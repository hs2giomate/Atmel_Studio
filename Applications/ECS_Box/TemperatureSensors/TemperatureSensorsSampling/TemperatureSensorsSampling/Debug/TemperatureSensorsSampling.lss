
TemperatureSensorsSampling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011350  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00011350  00011350  00021350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000060c  20000000  00011358  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003060c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003060c  2**0
                  CONTENTS
  5 .bss          00001364  2000060c  00011964  0003060c  2**2
                  ALLOC
  6 .stack        00010000  20001970  00012cc8  0003060c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003060c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003063a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00085ce4  00000000  00000000  00030693  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b79e  00000000  00000000  000b6377  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001eb05  00000000  00000000  000c1b15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000036d0  00000000  00000000  000e061a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003318  00000000  00000000  000e3cea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00053ac6  00000000  00000000  000e7002  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0004339b  00000000  00000000  0013aac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0014358e  00000000  00000000  0017de63  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e260  00000000  00000000  002c13f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 19 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     p.. ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	bd 61 00 00 d9 4f 00 00 e9 4f 00 00 d1 02 00 00     .a...O...O......
      7c:	f9 4f 00 00 09 50 00 00 19 50 00 00 29 50 00 00     .O...P...P..)P..
      8c:	39 50 00 00 49 50 00 00 59 50 00 00 d1 02 00 00     9P..IP..YP......
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 b1 75 00 00 cd 75 00 00 e9 75 00 00     .....u...u...u..
     174:	05 76 00 00 d1 02 00 00 1d 44 00 00 b9 b5 00 00     .v.......D......
     184:	c9 b5 00 00 d9 b5 00 00 e9 b5 00 00 d1 02 00 00     ................
     194:	15 80 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 31 80 00 00     ............1...
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 b5 8c 00 00 d1 02 00 00     ................
     1f4:	d1 8c 00 00 d1 02 00 00 ed 8c 00 00 09 8d 00 00     ................
     204:	25 8d 00 00 41 8d 00 00 d1 02 00 00 d1 02 00 00     %...A...........
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000060c 	.word	0x2000060c
     280:	00000000 	.word	0x00000000
     284:	00011358 	.word	0x00011358

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00011358 	.word	0x00011358
     2c4:	20000610 	.word	0x20000610
     2c8:	00011358 	.word	0x00011358
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	00011358 	.word	0x00011358
     33c:	2000060c 	.word	0x2000060c
     340:	20001970 	.word	0x20001970
     344:	2000060c 	.word	0x2000060c
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	00010b01 	.word	0x00010b01
     354:	00000359 	.word	0x00000359

00000358 <main>:
static Maintenance_Tool	toolApp;

static float currentTemperature,lastTemperature;

int main(void)
{
     358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool gotNewTemperature=false;
	atmel_start_init();
     35c:	4b1e      	ldr	r3, [pc, #120]	; (3d8 <main+0x80>)
     35e:	4798      	blx	r3
	usb.Init();
     360:	481e      	ldr	r0, [pc, #120]	; (3dc <main+0x84>)
     362:	4b1f      	ldr	r3, [pc, #124]	; (3e0 <main+0x88>)
     364:	4798      	blx	r3
	bool isOK=temperatures.Init();
     366:	481f      	ldr	r0, [pc, #124]	; (3e4 <main+0x8c>)
     368:	4b1f      	ldr	r3, [pc, #124]	; (3e8 <main+0x90>)
     36a:	4798      	blx	r3
	if (isOK)
     36c:	b110      	cbz	r0, 374 <main+0x1c>
	{
		temperatures.StartOneConversion();
     36e:	481d      	ldr	r0, [pc, #116]	; (3e4 <main+0x8c>)
     370:	4b1e      	ldr	r3, [pc, #120]	; (3ec <main+0x94>)
     372:	4798      	blx	r3
	}
	while(1){
		if (temperatures.IsConversionFinished())
		{
			
			temperatures.GetConversionResult();
     374:	4f1e      	ldr	r7, [pc, #120]	; (3f0 <main+0x98>)
			if (temperatures.faultData==VALID_TEMPERATURE)
			{
				lastTemperature=currentTemperature;
     376:	f8df 808c 	ldr.w	r8, [pc, #140]	; 404 <main+0xac>
		else
		{
		}
		if (gotNewTemperature)
		{
			if (toolApp.IsAppConnected())
     37a:	f108 0904 	add.w	r9, r8, #4
		if (temperatures.IsConversionFinished())
     37e:	4c19      	ldr	r4, [pc, #100]	; (3e4 <main+0x8c>)
     380:	4d1c      	ldr	r5, [pc, #112]	; (3f4 <main+0x9c>)
     382:	4620      	mov	r0, r4
     384:	47a8      	blx	r5
     386:	2800      	cmp	r0, #0
     388:	d0fb      	beq.n	382 <main+0x2a>
			temperatures.GetConversionResult();
     38a:	4620      	mov	r0, r4
     38c:	47b8      	blx	r7
			if (temperatures.faultData==VALID_TEMPERATURE)
     38e:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
     392:	2b01      	cmp	r3, #1
     394:	d010      	beq.n	3b8 <main+0x60>
     396:	2600      	movs	r6, #0
			temperatures.StartOneConversion();
     398:	4620      	mov	r0, r4
     39a:	4b14      	ldr	r3, [pc, #80]	; (3ec <main+0x94>)
     39c:	4798      	blx	r3
			asm("nop");
     39e:	bf00      	nop
		if (gotNewTemperature)
     3a0:	2e00      	cmp	r6, #0
     3a2:	d0ee      	beq.n	382 <main+0x2a>
			if (toolApp.IsAppConnected())
     3a4:	4648      	mov	r0, r9
     3a6:	4b14      	ldr	r3, [pc, #80]	; (3f8 <main+0xa0>)
     3a8:	4798      	blx	r3
     3aa:	2800      	cmp	r0, #0
     3ac:	d0e7      	beq.n	37e <main+0x26>
			{
				if (toolApp.handleCommunication())
     3ae:	f108 0004 	add.w	r0, r8, #4
     3b2:	4b12      	ldr	r3, [pc, #72]	; (3fc <main+0xa4>)
     3b4:	4798      	blx	r3
     3b6:	e7e0      	b.n	37a <main+0x22>
				lastTemperature=currentTemperature;
     3b8:	f8d8 0000 	ldr.w	r0, [r8]
				currentTemperature=temperatures.lastValue;
     3bc:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
     3c0:	f8c8 1000 	str.w	r1, [r8]
				if (lastTemperature!=currentTemperature)
     3c4:	f04f 0601 	mov.w	r6, #1
     3c8:	4b0d      	ldr	r3, [pc, #52]	; (400 <main+0xa8>)
     3ca:	4798      	blx	r3
     3cc:	b108      	cbz	r0, 3d2 <main+0x7a>
     3ce:	f04f 0600 	mov.w	r6, #0
     3d2:	b2f6      	uxtb	r6, r6
     3d4:	e7e0      	b.n	398 <main+0x40>
     3d6:	bf00      	nop
     3d8:	00000dbd 	.word	0x00000dbd
     3dc:	20001364 	.word	0x20001364
     3e0:	0000f3c1 	.word	0x0000f3c1
     3e4:	2000076c 	.word	0x2000076c
     3e8:	00000551 	.word	0x00000551
     3ec:	000005cd 	.word	0x000005cd
     3f0:	00000615 	.word	0x00000615
     3f4:	000006a9 	.word	0x000006a9
     3f8:	000007bd 	.word	0x000007bd
     3fc:	00000ce5 	.word	0x00000ce5
     400:	00010a75 	.word	0x00010a75
     404:	20000628 	.word	0x20000628

00000408 <_GLOBAL__sub_I_main>:
			
		}
		
		
	}
}
     408:	b510      	push	{r4, lr}
static Maintenance_Tool	toolApp;
     40a:	4c05      	ldr	r4, [pc, #20]	; (420 <_GLOBAL__sub_I_main+0x18>)
     40c:	4620      	mov	r0, r4
     40e:	4b05      	ldr	r3, [pc, #20]	; (424 <_GLOBAL__sub_I_main+0x1c>)
     410:	4798      	blx	r3
     412:	4a05      	ldr	r2, [pc, #20]	; (428 <_GLOBAL__sub_I_main+0x20>)
     414:	4905      	ldr	r1, [pc, #20]	; (42c <_GLOBAL__sub_I_main+0x24>)
     416:	4620      	mov	r0, r4
     418:	4b05      	ldr	r3, [pc, #20]	; (430 <_GLOBAL__sub_I_main+0x28>)
     41a:	4798      	blx	r3
     41c:	bd10      	pop	{r4, pc}
     41e:	bf00      	nop
     420:	2000062c 	.word	0x2000062c
     424:	00000741 	.word	0x00000741
     428:	20000000 	.word	0x20000000
     42c:	00000719 	.word	0x00000719
     430:	00010525 	.word	0x00010525

00000434 <_ZL17ConversionTimeoutPK10timer_task>:
	ptrTemperaturesClass->converterReady[2]=true;
	ptrTemperaturesClass->SetModuleReady(2);
	ptrTemperaturesClass->converterTimeout=false;
}
static void	ConversionTimeout(const struct timer_task *const timer_task){
	ptrTemperaturesClass->converterTimeout=true;
     434:	4b03      	ldr	r3, [pc, #12]	; (444 <_ZL17ConversionTimeoutPK10timer_task+0x10>)
     436:	681b      	ldr	r3, [r3, #0]
     438:	2201      	movs	r2, #1
     43a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	asm("nop");
     43e:	bf00      	nop
     440:	4770      	bx	lr
     442:	bf00      	nop
     444:	20000754 	.word	0x20000754

00000448 <_ZN24TemperatureSensors_ClassD1Ev>:
		SPIA=SPI_LTC;
		
} //TemperatureSensors_Class

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
     448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     44a:	4607      	mov	r7, r0
     44c:	f110 05a8 	adds.w	r5, r0, #168	; 0xa8
     450:	d007      	beq.n	462 <_ZN24TemperatureSensors_ClassD1Ev+0x1a>
     452:	f500 74f0 	add.w	r4, r0, #480	; 0x1e0
     456:	4e05      	ldr	r6, [pc, #20]	; (46c <_ZN24TemperatureSensors_ClassD1Ev+0x24>)
     458:	3c68      	subs	r4, #104	; 0x68
     45a:	4620      	mov	r0, r4
     45c:	47b0      	blx	r6
     45e:	42a5      	cmp	r5, r4
     460:	d1fa      	bne.n	458 <_ZN24TemperatureSensors_ClassD1Ev+0x10>
     462:	4638      	mov	r0, r7
     464:	4b02      	ldr	r3, [pc, #8]	; (470 <_ZN24TemperatureSensors_ClassD1Ev+0x28>)
     466:	4798      	blx	r3
{
} //~TemperatureSensors_Class
     468:	4638      	mov	r0, r7
     46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     46c:	0000dbc5 	.word	0x0000dbc5
     470:	0000dbc5 	.word	0x0000dbc5

00000474 <_ZL15Converter1Readyv>:
	ptrTemperaturesClass->converterReady[0]=true;
     474:	4b06      	ldr	r3, [pc, #24]	; (490 <_ZL15Converter1Readyv+0x1c>)
     476:	681b      	ldr	r3, [r3, #0]
     478:	2201      	movs	r2, #1
     47a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
bool	TemperatureSensors_Class::IsConversionFinished(){
	return converterReady[0]&converterReady[1]&converterReady[2];
}
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
	module[m].ready=true;
     47e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	return module[m].ready;
     482:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	ptrTemperaturesClass->converterTimeout=false;
     486:	2200      	movs	r2, #0
     488:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
     48c:	4770      	bx	lr
     48e:	bf00      	nop
     490:	20000754 	.word	0x20000754

00000494 <_ZL15Converter2Readyv>:
	ptrTemperaturesClass->converterReady[1]=true;
     494:	4b06      	ldr	r3, [pc, #24]	; (4b0 <_ZL15Converter2Readyv+0x1c>)
     496:	681b      	ldr	r3, [r3, #0]
     498:	2201      	movs	r2, #1
     49a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	module[m].ready=true;
     49e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	return module[m].ready;
     4a2:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
	ptrTemperaturesClass->converterTimeout=false;
     4a6:	2200      	movs	r2, #0
     4a8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
     4ac:	4770      	bx	lr
     4ae:	bf00      	nop
     4b0:	20000754 	.word	0x20000754

000004b4 <_ZL15Converter3Readyv>:
	ptrTemperaturesClass->converterReady[2]=true;
     4b4:	4b06      	ldr	r3, [pc, #24]	; (4d0 <_ZL15Converter3Readyv+0x1c>)
     4b6:	681b      	ldr	r3, [r3, #0]
     4b8:	2201      	movs	r2, #1
     4ba:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	module[m].ready=true;
     4be:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	return module[m].ready;
     4c2:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
	ptrTemperaturesClass->converterTimeout=false;
     4c6:	2200      	movs	r2, #0
     4c8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
     4cc:	4770      	bx	lr
     4ce:	bf00      	nop
     4d0:	20000754 	.word	0x20000754

000004d4 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor>:
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_sync_descriptor *SPI_LTC)
     4d4:	b570      	push	{r4, r5, r6, lr}
     4d6:	4604      	mov	r4, r0
     4d8:	460e      	mov	r6, r1
     4da:	4b0a      	ldr	r3, [pc, #40]	; (504 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x30>)
     4dc:	4798      	blx	r3
     4de:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
     4e2:	4d09      	ldr	r5, [pc, #36]	; (508 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x34>)
     4e4:	47a8      	blx	r5
     4e6:	f504 7088 	add.w	r0, r4, #272	; 0x110
     4ea:	47a8      	blx	r5
     4ec:	f504 70bc 	add.w	r0, r4, #376	; 0x178
     4f0:	47a8      	blx	r5
		spiLite=&ltSPI;
     4f2:	4b06      	ldr	r3, [pc, #24]	; (50c <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x38>)
     4f4:	1d1a      	adds	r2, r3, #4
     4f6:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
		ptrTemperaturesClass=this;
     4fa:	601c      	str	r4, [r3, #0]
		SPIA=SPI_LTC;
     4fc:	f8c4 61ec 	str.w	r6, [r4, #492]	; 0x1ec
} //TemperatureSensors_Class
     500:	4620      	mov	r0, r4
     502:	bd70      	pop	{r4, r5, r6, pc}
     504:	0000dbb1 	.word	0x0000dbb1
     508:	0000dbb1 	.word	0x0000dbb1
     50c:	20000754 	.word	0x20000754

00000510 <_ZN24TemperatureSensors_Class11InitModulesEv>:
bool TemperatureSensors_Class::InitModules(void){
     510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     514:	4604      	mov	r4, r0
	csPins[0]=CS_TEMP1;  csPins[1]=CS_TEMP2; csPins[2]=CS_TEMP3;
     516:	233d      	movs	r3, #61	; 0x3d
     518:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
     51c:	231b      	movs	r3, #27
     51e:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
     522:	2327      	movs	r3, #39	; 0x27
     524:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
     528:	f500 76f0 	add.w	r6, r0, #480	; 0x1e0
     52c:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
     530:	f500 78f6 	add.w	r8, r0, #492	; 0x1ec
		module[ii].Init(csPins[ii],spiLite);
     534:	4f05      	ldr	r7, [pc, #20]	; (54c <_ZN24TemperatureSensors_Class11InitModulesEv+0x3c>)
     536:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
     53a:	f856 1b04 	ldr.w	r1, [r6], #4
     53e:	4628      	mov	r0, r5
     540:	47b8      	blx	r7
     542:	3568      	adds	r5, #104	; 0x68
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
     544:	4546      	cmp	r6, r8
     546:	d1f6      	bne.n	536 <_ZN24TemperatureSensors_Class11InitModulesEv+0x26>
}
     548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     54c:	0000dbd9 	.word	0x0000dbd9

00000550 <_ZN24TemperatureSensors_Class4InitEv>:
bool	TemperatureSensors_Class::Init(void){
     550:	b538      	push	{r3, r4, r5, lr}
     552:	4604      	mov	r4, r0
	spiLite->set_descriptor(SPIA);
     554:	f8d0 11ec 	ldr.w	r1, [r0, #492]	; 0x1ec
     558:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
     55c:	4b13      	ldr	r3, [pc, #76]	; (5ac <_ZN24TemperatureSensors_Class4InitEv+0x5c>)
     55e:	4798      	blx	r3
	spiLite->init();
     560:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
     564:	4b12      	ldr	r3, [pc, #72]	; (5b0 <_ZN24TemperatureSensors_Class4InitEv+0x60>)
     566:	4798      	blx	r3
	ptrTemperaturesClass=this;
     568:	4b12      	ldr	r3, [pc, #72]	; (5b4 <_ZN24TemperatureSensors_Class4InitEv+0x64>)
     56a:	601c      	str	r4, [r3, #0]
	ext_irq_register(PIN_PB08, Converter1Ready);
     56c:	4912      	ldr	r1, [pc, #72]	; (5b8 <_ZN24TemperatureSensors_Class4InitEv+0x68>)
     56e:	2028      	movs	r0, #40	; 0x28
     570:	4d12      	ldr	r5, [pc, #72]	; (5bc <_ZN24TemperatureSensors_Class4InitEv+0x6c>)
     572:	47a8      	blx	r5
	ext_irq_register(PIN_PB09, Converter2Ready);
     574:	4912      	ldr	r1, [pc, #72]	; (5c0 <_ZN24TemperatureSensors_Class4InitEv+0x70>)
     576:	2029      	movs	r0, #41	; 0x29
     578:	47a8      	blx	r5
	ext_irq_register(PIN_PB01, Converter3Ready);
     57a:	4912      	ldr	r1, [pc, #72]	; (5c4 <_ZN24TemperatureSensors_Class4InitEv+0x74>)
     57c:	2021      	movs	r0, #33	; 0x21
     57e:	47a8      	blx	r5
	InitModules();
     580:	4620      	mov	r0, r4
     582:	4b11      	ldr	r3, [pc, #68]	; (5c8 <_ZN24TemperatureSensors_Class4InitEv+0x78>)
     584:	4798      	blx	r3
	currentModule=0; currentChannelIndex=0;
     586:	2300      	movs	r3, #0
     588:	f884 31f3 	strb.w	r3, [r4, #499]	; 0x1f3
     58c:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
     590:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
     594:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
     598:	4013      	ands	r3, r2
     59a:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
     59e:	4013      	ands	r3, r2
	isOK=(module[0].isOK)&(module[1].isOK)&(module[2].isOK);
     5a0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	return isOK;
     5a4:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
}
     5a8:	bd38      	pop	{r3, r4, r5, pc}
     5aa:	bf00      	nop
     5ac:	0000e3cd 	.word	0x0000e3cd
     5b0:	0000e371 	.word	0x0000e371
     5b4:	20000754 	.word	0x20000754
     5b8:	00000475 	.word	0x00000475
     5bc:	0000259d 	.word	0x0000259d
     5c0:	00000495 	.word	0x00000495
     5c4:	000004b5 	.word	0x000004b5
     5c8:	00000511 	.word	0x00000511

000005cc <_ZN24TemperatureSensors_Class18StartOneConversionEv>:
void	TemperatureSensors_Class::StartOneConversion(void){
     5cc:	b510      	push	{r4, lr}
     5ce:	4604      	mov	r4, r0
	converterTimeout=false;
     5d0:	2200      	movs	r2, #0
     5d2:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
	converterReady[currentModule]=false;
     5d6:	f890 31f3 	ldrb.w	r3, [r0, #499]	; 0x1f3
     5da:	4403      	add	r3, r0
     5dc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
     5e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     5e4:	4907      	ldr	r1, [pc, #28]	; (604 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x38>)
     5e6:	4808      	ldr	r0, [pc, #32]	; (608 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x3c>)
     5e8:	4b08      	ldr	r3, [pc, #32]	; (60c <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x40>)
     5ea:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
     5ec:	f894 01f3 	ldrb.w	r0, [r4, #499]	; 0x1f3
     5f0:	2368      	movs	r3, #104	; 0x68
     5f2:	fb03 4000 	mla	r0, r3, r0, r4
     5f6:	f894 11f4 	ldrb.w	r1, [r4, #500]	; 0x1f4
     5fa:	30a8      	adds	r0, #168	; 0xa8
     5fc:	4b04      	ldr	r3, [pc, #16]	; (610 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x44>)
     5fe:	4798      	blx	r3
     600:	bd10      	pop	{r4, pc}
     602:	bf00      	nop
     604:	00000435 	.word	0x00000435
     608:	200012d4 	.word	0x200012d4
     60c:	0000f011 	.word	0x0000f011
     610:	0000dccd 	.word	0x0000dccd

00000614 <_ZN24TemperatureSensors_Class19GetConversionResultEv>:
float TemperatureSensors_Class::GetConversionResult(void){
     614:	b538      	push	{r3, r4, r5, lr}
     616:	4604      	mov	r4, r0
	temperatureTimer.Remove_task(FUNC_PTR(ConversionTimeout));
     618:	491e      	ldr	r1, [pc, #120]	; (694 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x80>)
     61a:	481f      	ldr	r0, [pc, #124]	; (698 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x84>)
     61c:	4b1f      	ldr	r3, [pc, #124]	; (69c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x88>)
     61e:	4798      	blx	r3
	lastValue=module[currentModule].GetSingleChannelResultIndex(currentChannelIndex);
     620:	f894 01f3 	ldrb.w	r0, [r4, #499]	; 0x1f3
     624:	2568      	movs	r5, #104	; 0x68
     626:	fb05 4000 	mla	r0, r5, r0, r4
     62a:	f894 11f4 	ldrb.w	r1, [r4, #500]	; 0x1f4
     62e:	30a8      	adds	r0, #168	; 0xa8
     630:	4b1b      	ldr	r3, [pc, #108]	; (6a0 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x8c>)
     632:	4798      	blx	r3
     634:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	faultData=module[currentModule].fault_data;
     638:	f894 21f3 	ldrb.w	r2, [r4, #499]	; 0x1f3
     63c:	fb05 4502 	mla	r5, r5, r2, r4
     640:	f895 30af 	ldrb.w	r3, [r5, #175]	; 0xaf
     644:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (faultData==VALID_TEMPERATURE)
     648:	2b01      	cmp	r3, #1
     64a:	d00d      	beq.n	668 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x54>
			lastValue=-999;
     64c:	4b15      	ldr	r3, [pc, #84]	; (6a4 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x90>)
     64e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	currentChannelIndex++;
     652:	f894 31f4 	ldrb.w	r3, [r4, #500]	; 0x1f4
     656:	3301      	adds	r3, #1
     658:	b2db      	uxtb	r3, r3
	if (currentChannelIndex==NUMBER_TEMPERATURE_CHANNELS)
     65a:	2b04      	cmp	r3, #4
     65c:	d00c      	beq.n	678 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x64>
	currentChannelIndex++;
     65e:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
}
     662:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
     666:	bd38      	pop	{r3, r4, r5, pc}
			values[currentModule][currentChannelIndex]=lastValue;
     668:	f894 31f4 	ldrb.w	r3, [r4, #500]	; 0x1f4
     66c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     670:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     674:	66d8      	str	r0, [r3, #108]	; 0x6c
     676:	e7ec      	b.n	652 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x3e>
		currentChannelIndex=0;
     678:	2300      	movs	r3, #0
     67a:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
		currentModule++;
     67e:	3201      	adds	r2, #1
     680:	b2d2      	uxtb	r2, r2
		if (currentModule==NUMBER_LTC2983_MODULES)
     682:	2a03      	cmp	r2, #3
		currentModule++;
     684:	bf12      	itee	ne
     686:	f884 21f3 	strbne.w	r2, [r4, #499]	; 0x1f3
			currentModule=0;
     68a:	2300      	moveq	r3, #0
     68c:	f884 31f3 	strbeq.w	r3, [r4, #499]	; 0x1f3
     690:	e7e7      	b.n	662 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x4e>
     692:	bf00      	nop
     694:	00000435 	.word	0x00000435
     698:	200012d4 	.word	0x200012d4
     69c:	0000efb9 	.word	0x0000efb9
     6a0:	0000ddd5 	.word	0x0000ddd5
     6a4:	c479c000 	.word	0xc479c000

000006a8 <_ZN24TemperatureSensors_Class20IsConversionFinishedEv>:
	return converterReady[0]&converterReady[1]&converterReady[2];
     6a8:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
     6ac:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
     6b0:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
     6b4:	4013      	ands	r3, r2
}
     6b6:	4018      	ands	r0, r3
     6b8:	4770      	bx	lr
	...

000006bc <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev>:
}

TemperatureSensors_Class temperatures(&SPI_TEMP);
     6bc:	b570      	push	{r4, r5, r6, lr}
static LT_SPI	ltSPI;
     6be:	4c0a      	ldr	r4, [pc, #40]	; (6e8 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x2c>)
     6c0:	1d25      	adds	r5, r4, #4
     6c2:	4628      	mov	r0, r5
     6c4:	4b09      	ldr	r3, [pc, #36]	; (6ec <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x30>)
     6c6:	4798      	blx	r3
     6c8:	4e09      	ldr	r6, [pc, #36]	; (6f0 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x34>)
     6ca:	4632      	mov	r2, r6
     6cc:	4909      	ldr	r1, [pc, #36]	; (6f4 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x38>)
     6ce:	4628      	mov	r0, r5
     6d0:	4d09      	ldr	r5, [pc, #36]	; (6f8 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x3c>)
     6d2:	47a8      	blx	r5
TemperatureSensors_Class temperatures(&SPI_TEMP);
     6d4:	3418      	adds	r4, #24
     6d6:	4909      	ldr	r1, [pc, #36]	; (6fc <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x40>)
     6d8:	4620      	mov	r0, r4
     6da:	4b09      	ldr	r3, [pc, #36]	; (700 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x44>)
     6dc:	4798      	blx	r3
     6de:	4632      	mov	r2, r6
     6e0:	4908      	ldr	r1, [pc, #32]	; (704 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x48>)
     6e2:	4620      	mov	r0, r4
     6e4:	47a8      	blx	r5
     6e6:	bd70      	pop	{r4, r5, r6, pc}
     6e8:	20000754 	.word	0x20000754
     6ec:	0000e335 	.word	0x0000e335
     6f0:	20000000 	.word	0x20000000
     6f4:	0000e35d 	.word	0x0000e35d
     6f8:	00010525 	.word	0x00010525
     6fc:	200016f0 	.word	0x200016f0
     700:	000004d5 	.word	0x000004d5
     704:	00000449 	.word	0x00000449

00000708 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
     708:	4b02      	ldr	r3, [pc, #8]	; (714 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
     70a:	681b      	ldr	r3, [r3, #0]
     70c:	2200      	movs	r2, #0
     70e:	711a      	strb	r2, [r3, #4]
     710:	4770      	bx	lr
     712:	bf00      	nop
     714:	20000964 	.word	0x20000964

00000718 <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
     718:	b538      	push	{r3, r4, r5, lr}
     71a:	4604      	mov	r4, r0
{
	ticks=0;
     71c:	2300      	movs	r3, #0
     71e:	6003      	str	r3, [r0, #0]
	interfaceTimer.Stop();
     720:	4d04      	ldr	r5, [pc, #16]	; (734 <_ZN16Maintenance_ToolD1Ev+0x1c>)
     722:	4628      	mov	r0, r5
     724:	4b04      	ldr	r3, [pc, #16]	; (738 <_ZN16Maintenance_ToolD1Ev+0x20>)
     726:	4798      	blx	r3
	interfaceTimer.Remove_task();
     728:	4628      	mov	r0, r5
     72a:	4b04      	ldr	r3, [pc, #16]	; (73c <_ZN16Maintenance_ToolD1Ev+0x24>)
     72c:	4798      	blx	r3
	
} //~Maintenance_Tool
     72e:	4620      	mov	r0, r4
     730:	bd38      	pop	{r3, r4, r5, pc}
     732:	bf00      	nop
     734:	2000143c 	.word	0x2000143c
     738:	0000fb51 	.word	0x0000fb51
     73c:	0000fc41 	.word	0x0000fc41

00000740 <_ZN16Maintenance_ToolC1Ev>:
Maintenance_Tool::Maintenance_Tool()
     740:	b470      	push	{r4, r5, r6}
    kGAINCommandSetNSDData,             //!< Editing NSD data
    kGAINCommandSetNSDDataBlock,        //!< Editing NSD data in data blocks (see NSD communication: Data blockes are tranmitted to GNC)
    kGAINCommandSetView,                 //!< Enables simplified view or standard view (only 932/933)
	kGAINNumberOfCommands
	};
 struct __attribute__((__packed__)) HVACMessageHeader
     742:	2200      	movs	r2, #0
     744:	2664      	movs	r6, #100	; 0x64
     746:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
     74a:	2563      	movs	r5, #99	; 0x63
     74c:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
     750:	2462      	movs	r4, #98	; 0x62
     752:	f880 4047 	strb.w	r4, [r0, #71]	; 0x47
     756:	2161      	movs	r1, #97	; 0x61
     758:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
     75c:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
     760:	f880 609c 	strb.w	r6, [r0, #156]	; 0x9c
     764:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
     768:	f880 409e 	strb.w	r4, [r0, #158]	; 0x9e
     76c:	f880 109f 	strb.w	r1, [r0, #159]	; 0x9f
     770:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
	ptrMaintenanceTool=this;
     774:	4904      	ldr	r1, [pc, #16]	; (788 <_ZN16Maintenance_ToolC1Ev+0x48>)
     776:	6008      	str	r0, [r1, #0]
	maintenanceIsConnected = false;
     778:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
	nextMaintenanceSyncTime = 0;
     77c:	64c2      	str	r2, [r0, #76]	; 0x4c
	nextMaintenanceUsageTimerSyncTime = 0;
     77e:	6502      	str	r2, [r0, #80]	; 0x50
	ticks=0;
     780:	6002      	str	r2, [r0, #0]
} //Maintenance_Tool
     782:	bc70      	pop	{r4, r5, r6}
     784:	4770      	bx	lr
     786:	bf00      	nop
     788:	20000964 	.word	0x20000964

0000078c <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
     78c:	b508      	push	{r3, lr}
		maintenanceIsConnected = isConnected;
     78e:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
		if (isConnected)
     792:	b919      	cbnz	r1, 79c <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
     794:	4805      	ldr	r0, [pc, #20]	; (7ac <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     796:	4b06      	ldr	r3, [pc, #24]	; (7b0 <_ZN16Maintenance_Tool12setConnectedEb+0x24>)
     798:	4798      	blx	r3
     79a:	bd08      	pop	{r3, pc}
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
     79c:	f64e 2260 	movw	r2, #60000	; 0xea60
     7a0:	4904      	ldr	r1, [pc, #16]	; (7b4 <_ZN16Maintenance_Tool12setConnectedEb+0x28>)
     7a2:	4802      	ldr	r0, [pc, #8]	; (7ac <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     7a4:	4b04      	ldr	r3, [pc, #16]	; (7b8 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
     7a6:	4798      	blx	r3
     7a8:	bd08      	pop	{r3, pc}
     7aa:	bf00      	nop
     7ac:	2000143c 	.word	0x2000143c
     7b0:	0000fb51 	.word	0x0000fb51
     7b4:	00000709 	.word	0x00000709
     7b8:	0000fc09 	.word	0x0000fc09

000007bc <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
     7bc:	b510      	push	{r4, lr}
     7be:	4604      	mov	r4, r0
	result=false;
     7c0:	2300      	movs	r3, #0
     7c2:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	magic=0;
     7c6:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
	if (gotAccess==true)
     7ca:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
     7ce:	b12b      	cbz	r3, 7dc <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
     7d0:	2301      	movs	r3, #1
     7d2:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	return	result;
     7d6:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
}
     7da:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
     7dc:	4b13      	ldr	r3, [pc, #76]	; (82c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x70>)
     7de:	7d5b      	ldrb	r3, [r3, #21]
     7e0:	b18b      	cbz	r3, 806 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x4a>
     7e2:	1d43      	adds	r3, r0, #5
     7e4:	3009      	adds	r0, #9
     7e6:	2200      	movs	r2, #0
				magic|= localBuffer[i];
     7e8:	f813 1b01 	ldrb.w	r1, [r3], #1
     7ec:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
			for (int i = 0; i < 4; i++)
     7f0:	4283      	cmp	r3, r0
     7f2:	d1f9      	bne.n	7e8 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2c>
     7f4:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
     7f8:	4b0d      	ldr	r3, [pc, #52]	; (830 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x74>)
     7fa:	ea82 0103 	eor.w	r1, r2, r3
     7fe:	f8c4 111c 	str.w	r1, [r4, #284]	; 0x11c
			if (xorResult==0)
     802:	429a      	cmp	r2, r3
     804:	d005      	beq.n	812 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x56>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     806:	2240      	movs	r2, #64	; 0x40
     808:	1d61      	adds	r1, r4, #5
     80a:	4808      	ldr	r0, [pc, #32]	; (82c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x70>)
     80c:	4b09      	ldr	r3, [pc, #36]	; (834 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
     80e:	4798      	blx	r3
     810:	e7e1      	b.n	7d6 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
     812:	2101      	movs	r1, #1
     814:	f884 1101 	strb.w	r1, [r4, #257]	; 0x101
				result=true;
     818:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
				is_MTPC_Beaming=true;
     81c:	7121      	strb	r1, [r4, #4]
				setConnected(true);
     81e:	4620      	mov	r0, r4
     820:	4b05      	ldr	r3, [pc, #20]	; (838 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     822:	4798      	blx	r3
				return	result;
     824:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
     828:	bd10      	pop	{r4, pc}
     82a:	bf00      	nop
     82c:	20001364 	.word	0x20001364
     830:	61626364 	.word	0x61626364
     834:	0000f50d 	.word	0x0000f50d
     838:	0000078d 	.word	0x0000078d

0000083c <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
     83c:	1d02      	adds	r2, r0, #4
     83e:	2301      	movs	r3, #1
	uint8_t i;
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
     840:	2100      	movs	r1, #0
     842:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
     846:	b2d8      	uxtb	r0, r3
     848:	3301      	adds	r3, #1
     84a:	2b41      	cmp	r3, #65	; 0x41
     84c:	d1f9      	bne.n	842 <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x6>
	}
	return	i;
}
     84e:	4770      	bx	lr

00000850 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( HVACMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
     850:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
     854:	b92b      	cbnz	r3, 862 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader+0x12>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
     856:	64c3      	str	r3, [r0, #76]	; 0x4c
		maintenanceIsConnected = true;
     858:	2301      	movs	r3, #1
     85a:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
		bSendNotifications = true;
     85e:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
     862:	f890 0100 	ldrb.w	r0, [r0, #256]	; 0x100
     866:	4770      	bx	lr

00000868 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader>:

	uint32_t	w,r;
	
	
	bool	result(header.command == kGAINCommandWriteParameters);
	if (result){
     868:	790b      	ldrb	r3, [r1, #4]
     86a:	2b47      	cmp	r3, #71	; 0x47
     86c:	d001      	beq.n	872 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0xa>
	bool	result(header.command == kGAINCommandWriteParameters);
     86e:	2000      	movs	r0, #0
     870:	4770      	bx	lr
bool Maintenance_Tool::handleGAINCommandWriteParameters(HVACMessageHeader& header)	{
     872:	b570      	push	{r4, r5, r6, lr}
     874:	4604      	mov	r4, r0
		int n=sizeof(HVACMessageHeader)+1;
		flash.eraseFlash((uint32_t)&flashLayout->parameters,sizeof(UserParameters));
     876:	4e0c      	ldr	r6, [pc, #48]	; (8a8 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x40>)
     878:	6831      	ldr	r1, [r6, #0]
     87a:	4d0c      	ldr	r5, [pc, #48]	; (8ac <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x44>)
     87c:	2201      	movs	r2, #1
     87e:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
     882:	4628      	mov	r0, r5
     884:	4b0a      	ldr	r3, [pc, #40]	; (8b0 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x48>)
     886:	4798      	blx	r3
			
		memcpy((uint8_t*)&parameters,&localBuffer[n+1],sizeof(UserParameters));
     888:	7b63      	ldrb	r3, [r4, #13]
     88a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
		//uint32_t add=(uint32_t)&framMemory->parameters;
		uint32_t add=(uint32_t)&flashLayout->parameters;
     88e:	6832      	ldr	r2, [r6, #0]
		r=flash.WriteAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(UserParameters));
     890:	2301      	movs	r3, #1
     892:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
     896:	f504 7184 	add.w	r1, r4, #264	; 0x108
     89a:	4628      	mov	r0, r5
     89c:	4c05      	ldr	r4, [pc, #20]	; (8b4 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x4c>)
     89e:	47a0      	blx	r4
		//	r=fram.WriteAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(UserParameters));
			result=(bool)(r==0);
     8a0:	fab0 f080 	clz	r0, r0
     8a4:	0940      	lsrs	r0, r0, #5
     8a6:	bd70      	pop	{r4, r5, r6, pc}
     8a8:	20001138 	.word	0x20001138
     8ac:	2000113c 	.word	0x2000113c
     8b0:	0000e999 	.word	0x0000e999
     8b4:	0000ec3d 	.word	0x0000ec3d

000008b8 <_ZN16Maintenance_Tool17CommandSetHeatersEv>:
	}
	
	return result;
}

bool Maintenance_Tool::CommandSetHeaters(void)	{
     8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	bool powerOn;
	
		memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     8bc:	4603      	mov	r3, r0
     8be:	f853 1f05 	ldr.w	r1, [r3, #5]!
     8c2:	f8c0 1045 	str.w	r1, [r0, #69]	; 0x45
     8c6:	8899      	ldrh	r1, [r3, #4]
     8c8:	799b      	ldrb	r3, [r3, #6]
     8ca:	f8a0 1049 	strh.w	r1, [r0, #73]	; 0x49
     8ce:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
		
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandSetHeaters);
     8d2:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
     8d6:	2b49      	cmp	r3, #73	; 0x49
     8d8:	bf0c      	ite	eq
     8da:	f04f 0801 	moveq.w	r8, #1
     8de:	f04f 0800 	movne.w	r8, #0
	if (result){
     8e2:	d002      	beq.n	8ea <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x32>
			}
		}
	}
	
	return result;
}
     8e4:	4640      	mov	r0, r8
     8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		lastEnableHeaters=enableHeaters;
     8ea:	f890 2125 	ldrb.w	r2, [r0, #293]	; 0x125
     8ee:	f880 2124 	strb.w	r2, [r0, #292]	; 0x124
		enableHeaters=singleTaskMessage.description;
     8f2:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
     8f6:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
		if (enableHeaters!=lastEnableHeaters)
     8fa:	429a      	cmp	r2, r3
     8fc:	d0f2      	beq.n	8e4 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x2c>
     8fe:	4605      	mov	r5, r0
     900:	2400      	movs	r4, #0
				heater.SetRelay(i,powerOn);
     902:	4f07      	ldr	r7, [pc, #28]	; (920 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x68>)
     904:	4e07      	ldr	r6, [pc, #28]	; (924 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x6c>)
				powerOn=enableHeaters&(0x01<<i);
     906:	f895 2125 	ldrb.w	r2, [r5, #293]	; 0x125
     90a:	4122      	asrs	r2, r4
				heater.SetRelay(i,powerOn);
     90c:	f002 0201 	and.w	r2, r2, #1
     910:	b2e1      	uxtb	r1, r4
     912:	4638      	mov	r0, r7
     914:	47b0      	blx	r6
     916:	3401      	adds	r4, #1
			for (uint8_t i = 0; i < 4; i++)
     918:	2c04      	cmp	r4, #4
     91a:	d1f4      	bne.n	906 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x4e>
     91c:	e7e2      	b.n	8e4 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x2c>
     91e:	bf00      	nop
     920:	2000169c 	.word	0x2000169c
     924:	0001008d 	.word	0x0001008d

00000928 <_ZN16Maintenance_Tool20CommandSetEnableFansEv>:

bool Maintenance_Tool::CommandSetEnableFans(void){
     928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     92a:	4603      	mov	r3, r0
     92c:	f853 1f05 	ldr.w	r1, [r3, #5]!
     930:	f8c0 1045 	str.w	r1, [r0, #69]	; 0x45
     934:	8899      	ldrh	r1, [r3, #4]
     936:	799b      	ldrb	r3, [r3, #6]
     938:	f8a0 1049 	strh.w	r1, [r0, #73]	; 0x49
     93c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandSetEnableFans);
     940:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
     944:	2b4b      	cmp	r3, #75	; 0x4b
     946:	bf0c      	ite	eq
     948:	2401      	moveq	r4, #1
     94a:	2400      	movne	r4, #0
	if (result){
     94c:	d001      	beq.n	952 <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x2a>
	}else{

	}
	
	return result;
}
     94e:	4620      	mov	r0, r4
     950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data=singleTaskMessage.description;
     952:	f890 504b 	ldrb.w	r5, [r0, #75]	; 0x4b
		if ((data&(0x07))>3)
     956:	f005 0307 	and.w	r3, r5, #7
     95a:	2b03      	cmp	r3, #3
     95c:	dc0a      	bgt.n	974 <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x4c>
			fans.evaporator[0]->SetEnable(data&0x01);
     95e:	4f09      	ldr	r7, [pc, #36]	; (984 <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x5c>)
     960:	f005 0101 	and.w	r1, r5, #1
     964:	6df8      	ldr	r0, [r7, #92]	; 0x5c
     966:	4e08      	ldr	r6, [pc, #32]	; (988 <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x60>)
     968:	47b0      	blx	r6
			fans.evaporator[1]->SetEnable(data&0x02);
     96a:	f3c5 0140 	ubfx	r1, r5, #1, #1
     96e:	6e38      	ldr	r0, [r7, #96]	; 0x60
     970:	47b0      	blx	r6
     972:	e7ec      	b.n	94e <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x26>
			fans.condesator->SetEnable(data&0x04);
     974:	f3c5 0180 	ubfx	r1, r5, #2, #1
     978:	4b02      	ldr	r3, [pc, #8]	; (984 <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x5c>)
     97a:	6e58      	ldr	r0, [r3, #100]	; 0x64
     97c:	4b03      	ldr	r3, [pc, #12]	; (98c <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x64>)
     97e:	4798      	blx	r3
     980:	e7e5      	b.n	94e <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x26>
     982:	bf00      	nop
     984:	200015bc 	.word	0x200015bc
     988:	0000ffa5 	.word	0x0000ffa5
     98c:	0000fe11 	.word	0x0000fe11

00000990 <_ZN16Maintenance_Tool17CommandSetPWMFansEv>:

bool Maintenance_Tool::CommandSetPWMFans(void){
     990:	b510      	push	{r4, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     992:	4603      	mov	r3, r0
     994:	f853 1f05 	ldr.w	r1, [r3, #5]!
     998:	f8c0 1045 	str.w	r1, [r0, #69]	; 0x45
     99c:	8899      	ldrh	r1, [r3, #4]
     99e:	799b      	ldrb	r3, [r3, #6]
     9a0:	f8a0 1049 	strh.w	r1, [r0, #73]	; 0x49
     9a4:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandSetPWMFans);
     9a8:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
     9ac:	2b4c      	cmp	r3, #76	; 0x4c
     9ae:	bf0c      	ite	eq
     9b0:	2401      	moveq	r4, #1
     9b2:	2400      	movne	r4, #0
	if (result){
     9b4:	d001      	beq.n	9ba <_ZN16Maintenance_Tool17CommandSetPWMFansEv+0x2a>
	}else{

	}
	
	return result;
}
     9b6:	4620      	mov	r0, r4
     9b8:	bd10      	pop	{r4, pc}
			fans.evaporator[0]->SetPWM(data);
     9ba:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
     9be:	4b02      	ldr	r3, [pc, #8]	; (9c8 <_ZN16Maintenance_Tool17CommandSetPWMFansEv+0x38>)
     9c0:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
     9c2:	4b02      	ldr	r3, [pc, #8]	; (9cc <_ZN16Maintenance_Tool17CommandSetPWMFansEv+0x3c>)
     9c4:	4798      	blx	r3
     9c6:	e7f6      	b.n	9b6 <_ZN16Maintenance_Tool17CommandSetPWMFansEv+0x26>
     9c8:	200015bc 	.word	0x200015bc
     9cc:	0000ffc5 	.word	0x0000ffc5

000009d0 <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
     9d0:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
     9d2:	0855      	lsrs	r5, r2, #1
     9d4:	d007      	beq.n	9e6 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
     9d6:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
     9d8:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
     9dc:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
     9de:	3401      	adds	r4, #1
     9e0:	b2a4      	uxth	r4, r4
     9e2:	42ac      	cmp	r4, r5
     9e4:	dbf8      	blt.n	9d8 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
     9e6:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
     9ea:	bf1d      	ittte	ne
     9ec:	189b      	addne	r3, r3, r2
     9ee:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
     9f2:	4048      	eorne	r0, r1
     9f4:	4608      	moveq	r0, r1

	return checksum;
	}
     9f6:	bc30      	pop	{r4, r5}
     9f8:	4770      	bx	lr
	...

000009fc <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader>:
	{
     9fc:	b538      	push	{r3, r4, r5, lr}
     9fe:	4604      	mov	r4, r0
	checksum=0;
     a00:	2500      	movs	r5, #0
     a02:	f8a0 5104 	strh.w	r5, [r0, #260]	; 0x104
	checksum = calculateChecksum(0, sizeof(header), &header);
     a06:	460b      	mov	r3, r1
     a08:	2206      	movs	r2, #6
     a0a:	4629      	mov	r1, r5
     a0c:	4d02      	ldr	r5, [pc, #8]	; (a18 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader+0x1c>)
     a0e:	47a8      	blx	r5
     a10:	f8a4 0104 	strh.w	r0, [r4, #260]	; 0x104
	}
     a14:	bd38      	pop	{r3, r4, r5, pc}
     a16:	bf00      	nop
     a18:	000009d1 	.word	0x000009d1

00000a1c <_GLOBAL__sub_I_ptrMaintenanceTool>:
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
	}

}
     a1c:	b510      	push	{r4, lr}
     a1e:	4c05      	ldr	r4, [pc, #20]	; (a34 <_GLOBAL__sub_I_ptrMaintenanceTool+0x18>)
     a20:	4620      	mov	r0, r4
     a22:	4b05      	ldr	r3, [pc, #20]	; (a38 <_GLOBAL__sub_I_ptrMaintenanceTool+0x1c>)
     a24:	4798      	blx	r3
     a26:	4a05      	ldr	r2, [pc, #20]	; (a3c <_GLOBAL__sub_I_ptrMaintenanceTool+0x20>)
     a28:	4905      	ldr	r1, [pc, #20]	; (a40 <_GLOBAL__sub_I_ptrMaintenanceTool+0x24>)
     a2a:	4620      	mov	r0, r4
     a2c:	4b05      	ldr	r3, [pc, #20]	; (a44 <_GLOBAL__sub_I_ptrMaintenanceTool+0x28>)
     a2e:	4798      	blx	r3
     a30:	bd10      	pop	{r4, pc}
     a32:	bf00      	nop
     a34:	20000968 	.word	0x20000968
     a38:	00000741 	.word	0x00000741
     a3c:	20000000 	.word	0x20000000
     a40:	00000719 	.word	0x00000719
     a44:	00010525 	.word	0x00010525

00000a48 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb>:
	{
     a48:	b538      	push	{r3, r4, r5, lr}
     a4a:	4605      	mov	r5, r0
     a4c:	460c      	mov	r4, r1
	checksum = calculateChecksum(header);
     a4e:	4b05      	ldr	r3, [pc, #20]	; (a64 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x1c>)
     a50:	4798      	blx	r3
     a52:	f8a5 0104 	strh.w	r0, [r5, #260]	; 0x104
	usb.writeData(&header, sizeof(header));
     a56:	2206      	movs	r2, #6
     a58:	4621      	mov	r1, r4
     a5a:	4803      	ldr	r0, [pc, #12]	; (a68 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x20>)
     a5c:	4b03      	ldr	r3, [pc, #12]	; (a6c <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x24>)
     a5e:	4798      	blx	r3
     a60:	bd38      	pop	{r3, r4, r5, pc}
     a62:	bf00      	nop
     a64:	000009fd 	.word	0x000009fd
     a68:	20001364 	.word	0x20001364
     a6c:	0000f5f9 	.word	0x0000f5f9

00000a70 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader>:
bool Maintenance_Tool::handleGAINCommandReadParameters(HVACMessageHeader& header){
     a70:	b538      	push	{r3, r4, r5, lr}
		if (result){
     a72:	790b      	ldrb	r3, [r1, #4]
     a74:	2b48      	cmp	r3, #72	; 0x48
     a76:	d001      	beq.n	a7c <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0xc>
	 	bool	result(header.command == kGAINCommandReadParameters);
     a78:	2000      	movs	r0, #0
     a7a:	bd38      	pop	{r3, r4, r5, pc}
     a7c:	4604      	mov	r4, r0
			uint32_t add=(uint32_t)&flashLayout->parameters;
     a7e:	4b0d      	ldr	r3, [pc, #52]	; (ab4 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x44>)
     a80:	681a      	ldr	r2, [r3, #0]
			r=flash.ReadAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(UserParameters));
     a82:	2301      	movs	r3, #1
     a84:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
     a88:	f500 7184 	add.w	r1, r0, #264	; 0x108
     a8c:	480a      	ldr	r0, [pc, #40]	; (ab8 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x48>)
     a8e:	4d0b      	ldr	r5, [pc, #44]	; (abc <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x4c>)
     a90:	47a8      	blx	r5
			 if (r>0)
     a92:	b908      	cbnz	r0, a98 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x28>
	 	bool	result(header.command == kGAINCommandReadParameters);
     a94:	2001      	movs	r0, #1
}
     a96:	bd38      	pop	{r3, r4, r5, pc}
				memcpy((uint8_t*)&localBuffer[n+1],(void*)&parameters,sizeof(UserParameters));
     a98:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
     a9c:	7363      	strb	r3, [r4, #13]
				delay_us(1);
     a9e:	2001      	movs	r0, #1
     aa0:	4b07      	ldr	r3, [pc, #28]	; (ac0 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x50>)
     aa2:	4798      	blx	r3
				 usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     aa4:	2240      	movs	r2, #64	; 0x40
     aa6:	1d61      	adds	r1, r4, #5
     aa8:	4806      	ldr	r0, [pc, #24]	; (ac4 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x54>)
     aaa:	4b07      	ldr	r3, [pc, #28]	; (ac8 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x58>)
     aac:	4798      	blx	r3
				 result=w>0;
     aae:	2000      	movs	r0, #0
     ab0:	bd38      	pop	{r3, r4, r5, pc}
     ab2:	bf00      	nop
     ab4:	20001138 	.word	0x20001138
     ab8:	2000113c 	.word	0x2000113c
     abc:	0000ed1d 	.word	0x0000ed1d
     ac0:	000024d5 	.word	0x000024d5
     ac4:	20001364 	.word	0x20001364
     ac8:	0000f691 	.word	0x0000f691

00000acc <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv>:
bool Maintenance_Tool::CommandReadHeaterStatus(){
     acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool	result(header.task == kHVACCommandReadHeaterStatus);
     ace:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
     ad2:	2b4a      	cmp	r3, #74	; 0x4a
     ad4:	bf0c      	ite	eq
     ad6:	2501      	moveq	r5, #1
     ad8:	2500      	movne	r5, #0
	if (result){
     ada:	d001      	beq.n	ae0 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x14>
}
     adc:	4628      	mov	r0, r5
     ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ae0:	4604      	mov	r4, r0
			singleTask.description=heater.ReadStatus();
     ae2:	4f10      	ldr	r7, [pc, #64]	; (b24 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x58>)
     ae4:	4638      	mov	r0, r7
     ae6:	4b10      	ldr	r3, [pc, #64]	; (b28 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x5c>)
     ae8:	4798      	blx	r3
     aea:	4606      	mov	r6, r0
			memcpy(localBuffer,(void*)&singleTask,n);
     aec:	4b0f      	ldr	r3, [pc, #60]	; (b2c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x60>)
     aee:	f8c4 3005 	str.w	r3, [r4, #5]
     af2:	2300      	movs	r3, #0
     af4:	7263      	strb	r3, [r4, #9]
     af6:	234a      	movs	r3, #74	; 0x4a
     af8:	72a3      	strb	r3, [r4, #10]
     afa:	72e0      	strb	r0, [r4, #11]
			if (!heater.statusChanged)
     afc:	787b      	ldrb	r3, [r7, #1]
     afe:	b15b      	cbz	r3, b18 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x4c>
			singleTaskMessage=singleTask;
     b00:	4b0a      	ldr	r3, [pc, #40]	; (b2c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x60>)
     b02:	f8c4 3045 	str.w	r3, [r4, #69]	; 0x45
     b06:	2300      	movs	r3, #0
     b08:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
     b0c:	234a      	movs	r3, #74	; 0x4a
     b0e:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
     b12:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
     b16:	e7e1      	b.n	adc <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x10>
				usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     b18:	2240      	movs	r2, #64	; 0x40
     b1a:	1d61      	adds	r1, r4, #5
     b1c:	4804      	ldr	r0, [pc, #16]	; (b30 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x64>)
     b1e:	4b05      	ldr	r3, [pc, #20]	; (b34 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x68>)
     b20:	4798      	blx	r3
     b22:	e7ed      	b.n	b00 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x34>
     b24:	2000169c 	.word	0x2000169c
     b28:	00010021 	.word	0x00010021
     b2c:	61626364 	.word	0x61626364
     b30:	20001364 	.word	0x20001364
     b34:	0000f691 	.word	0x0000f691

00000b38 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv>:
bool Maintenance_Tool::CommandReadTemmperatures(){
     b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool	result(header.task == kHVACCommandReadTemperatures);
     b3a:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
     b3e:	2b4d      	cmp	r3, #77	; 0x4d
     b40:	bf0c      	ite	eq
     b42:	2501      	moveq	r5, #1
     b44:	2500      	movne	r5, #0
	if (result){
     b46:	d001      	beq.n	b4c <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x14>
}
     b48:	4628      	mov	r0, r5
     b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		singleTask.description=temperatures.faultData;
     b4c:	4f17      	ldr	r7, [pc, #92]	; (bac <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x74>)
     b4e:	f897 609c 	ldrb.w	r6, [r7, #156]	; 0x9c
		memcpy(localBuffer,(void*)&singleTask,n);
     b52:	4b17      	ldr	r3, [pc, #92]	; (bb0 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x78>)
     b54:	f8c0 3005 	str.w	r3, [r0, #5]
     b58:	2300      	movs	r3, #0
     b5a:	7243      	strb	r3, [r0, #9]
     b5c:	234d      	movs	r3, #77	; 0x4d
     b5e:	7283      	strb	r3, [r0, #10]
     b60:	72c6      	strb	r6, [r0, #11]
     b62:	3768      	adds	r7, #104	; 0x68
     b64:	f100 030c 	add.w	r3, r0, #12
     b68:	f100 0e3c 	add.w	lr, r0, #60	; 0x3c
     b6c:	f103 0410 	add.w	r4, r3, #16
bool Maintenance_Tool::CommandReadTemmperatures(){
     b70:	463a      	mov	r2, r7
				memcpy(&localBuffer[n+4*((4*i)+j)],(void*)&temperatures.values[i][j],4);
     b72:	f852 1f04 	ldr.w	r1, [r2, #4]!
     b76:	f843 1b04 	str.w	r1, [r3], #4
			for (int j = 0; j < 4; j++)
     b7a:	42a3      	cmp	r3, r4
     b7c:	d1f9      	bne.n	b72 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x3a>
     b7e:	3710      	adds	r7, #16
     b80:	4623      	mov	r3, r4
		for (int i = 0; i < 3; i++)
     b82:	45a6      	cmp	lr, r4
     b84:	d1f2      	bne.n	b6c <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x34>
     b86:	4604      	mov	r4, r0
		usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     b88:	2240      	movs	r2, #64	; 0x40
     b8a:	1d41      	adds	r1, r0, #5
     b8c:	4809      	ldr	r0, [pc, #36]	; (bb4 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
     b8e:	4b0a      	ldr	r3, [pc, #40]	; (bb8 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
     b90:	4798      	blx	r3
		singleTaskMessage=singleTask;
     b92:	4b07      	ldr	r3, [pc, #28]	; (bb0 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x78>)
     b94:	f8c4 3045 	str.w	r3, [r4, #69]	; 0x45
     b98:	2300      	movs	r3, #0
     b9a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
     b9e:	234d      	movs	r3, #77	; 0x4d
     ba0:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
     ba4:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
     ba8:	e7ce      	b.n	b48 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x10>
     baa:	bf00      	nop
     bac:	2000076c 	.word	0x2000076c
     bb0:	61626364 	.word	0x61626364
     bb4:	20001364 	.word	0x20001364
     bb8:	0000f691 	.word	0x0000f691

00000bbc <_ZN16Maintenance_Tool14handleHVACTaskEv>:
bool Maintenance_Tool::handleHVACTask(void){
     bbc:	b570      	push	{r4, r5, r6, lr}
     bbe:	4604      	mov	r4, r0
	memcpy(&header,localBuffer,sizeof(HVACMessageHeader));
     bc0:	f100 059c 	add.w	r5, r0, #156	; 0x9c
     bc4:	4601      	mov	r1, r0
     bc6:	f851 3f05 	ldr.w	r3, [r1, #5]!
     bca:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
     bce:	888b      	ldrh	r3, [r1, #4]
     bd0:	80ab      	strh	r3, [r5, #4]
	&& (header.task<kGAINNumberOfCommands))
     bd2:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
     bd6:	3b41      	subs	r3, #65	; 0x41
	if ((header.task>=kGAINCommandConnect)
     bd8:	b2db      	uxtb	r3, r3
     bda:	2b12      	cmp	r3, #18
     bdc:	d815      	bhi.n	c0a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x4e>
		gotTask=true;
     bde:	2301      	movs	r3, #1
     be0:	f880 3103 	strb.w	r3, [r0, #259]	; 0x103
		result=gotTask;
     be4:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
		switch (header.task)
     be8:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
     bec:	3b41      	subs	r3, #65	; 0x41
     bee:	2b12      	cmp	r3, #18
     bf0:	d85e      	bhi.n	cb0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xf4>
     bf2:	e8df f003 	tbb	[pc, r3]
     bf6:	221b      	.short	0x221b
     bf8:	18182818 	.word	0x18182818
     bfc:	453f3831 	.word	0x453f3831
     c00:	1857514b 	.word	0x1857514b
     c04:	5d5d1818 	.word	0x5d5d1818
     c08:	18          	.byte	0x18
     c09:	00          	.byte	0x00
		gotTask=false;
     c0a:	2300      	movs	r3, #0
     c0c:	f880 3103 	strb.w	r3, [r0, #259]	; 0x103
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
     c10:	4e29      	ldr	r6, [pc, #164]	; (cb8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xfc>)
     c12:	2240      	movs	r2, #64	; 0x40
     c14:	4630      	mov	r0, r6
     c16:	4b29      	ldr	r3, [pc, #164]	; (cbc <_ZN16Maintenance_Tool14handleHVACTaskEv+0x100>)
     c18:	4798      	blx	r3
		result=usb.rxReady;
     c1a:	7d73      	ldrb	r3, [r6, #21]
     c1c:	b2db      	uxtb	r3, r3
     c1e:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
	if (result)
     c22:	2b00      	cmp	r3, #0
     c24:	d1e0      	bne.n	be8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x2c>
	}
     c26:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
     c2a:	bd70      	pop	{r4, r5, r6, pc}
				result = handleGAINCommandConnect( header);
     c2c:	4629      	mov	r1, r5
     c2e:	4620      	mov	r0, r4
     c30:	4b23      	ldr	r3, [pc, #140]	; (cc0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x104>)
     c32:	4798      	blx	r3
     c34:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     c38:	e7f5      	b.n	c26 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
	maintenanceIsConnected = false;
     c3a:	2300      	movs	r3, #0
     c3c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
	bSendNotifications = false;
     c40:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
				break;
     c44:	e7ef      	b.n	c26 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
				notifyGAINCommandReceived( header, result);
     c46:	2201      	movs	r2, #1
     c48:	4629      	mov	r1, r5
     c4a:	4620      	mov	r0, r4
     c4c:	4b1d      	ldr	r3, [pc, #116]	; (cc4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x108>)
     c4e:	4798      	blx	r3
				result = handleGAINCommandReset(header);
     c50:	2301      	movs	r3, #1
     c52:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
				break;
     c56:	e7e6      	b.n	c26 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
				result = handleGAINCommandWriteParameters( header);
     c58:	4629      	mov	r1, r5
     c5a:	4620      	mov	r0, r4
     c5c:	4b1a      	ldr	r3, [pc, #104]	; (cc8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x10c>)
     c5e:	4798      	blx	r3
     c60:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     c64:	e7df      	b.n	c26 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
				result = handleGAINCommandReadParameters( header);
     c66:	4629      	mov	r1, r5
     c68:	4620      	mov	r0, r4
     c6a:	4b18      	ldr	r3, [pc, #96]	; (ccc <_ZN16Maintenance_Tool14handleHVACTaskEv+0x110>)
     c6c:	4798      	blx	r3
     c6e:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     c72:	e7d8      	b.n	c26 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
				result = CommandSetHeaters();
     c74:	4620      	mov	r0, r4
     c76:	4b16      	ldr	r3, [pc, #88]	; (cd0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x114>)
     c78:	4798      	blx	r3
     c7a:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     c7e:	e7d2      	b.n	c26 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
				result = CommandReadHeaterStatus();
     c80:	4620      	mov	r0, r4
     c82:	4b14      	ldr	r3, [pc, #80]	; (cd4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x118>)
     c84:	4798      	blx	r3
     c86:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     c8a:	e7cc      	b.n	c26 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
				result = CommandSetEnableFans();
     c8c:	4620      	mov	r0, r4
     c8e:	4b12      	ldr	r3, [pc, #72]	; (cd8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x11c>)
     c90:	4798      	blx	r3
     c92:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     c96:	e7c6      	b.n	c26 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
				result = CommandSetPWMFans();
     c98:	4620      	mov	r0, r4
     c9a:	4b10      	ldr	r3, [pc, #64]	; (cdc <_ZN16Maintenance_Tool14handleHVACTaskEv+0x120>)
     c9c:	4798      	blx	r3
     c9e:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     ca2:	e7c0      	b.n	c26 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
				result = CommandReadTemmperatures();
     ca4:	4620      	mov	r0, r4
     ca6:	4b0e      	ldr	r3, [pc, #56]	; (ce0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x124>)
     ca8:	4798      	blx	r3
     caa:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     cae:	e7ba      	b.n	c26 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
				result = false;
     cb0:	2300      	movs	r3, #0
     cb2:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
				break;
     cb6:	e7b6      	b.n	c26 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
     cb8:	20001364 	.word	0x20001364
     cbc:	0000f50d 	.word	0x0000f50d
     cc0:	00000851 	.word	0x00000851
     cc4:	00000a49 	.word	0x00000a49
     cc8:	00000869 	.word	0x00000869
     ccc:	00000a71 	.word	0x00000a71
     cd0:	000008b9 	.word	0x000008b9
     cd4:	00000acd 	.word	0x00000acd
     cd8:	00000929 	.word	0x00000929
     cdc:	00000991 	.word	0x00000991
     ce0:	00000b39 	.word	0x00000b39

00000ce4 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
     ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ce6:	4604      	mov	r4, r0
	result=false;
     ce8:	2300      	movs	r3, #0
     cea:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	if (gotAccess)
     cee:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
     cf2:	2b00      	cmp	r3, #0
     cf4:	d04c      	beq.n	d90 <_ZN16Maintenance_Tool19handleCommunicationEv+0xac>
		if (usb.rxReady)
     cf6:	4b28      	ldr	r3, [pc, #160]	; (d98 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
     cf8:	7d5b      	ldrb	r3, [r3, #21]
     cfa:	b953      	cbnz	r3, d12 <_ZN16Maintenance_Tool19handleCommunicationEv+0x2e>
			gotCommand=false;
     cfc:	2300      	movs	r3, #0
     cfe:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     d02:	2240      	movs	r2, #64	; 0x40
     d04:	1d61      	adds	r1, r4, #5
     d06:	4824      	ldr	r0, [pc, #144]	; (d98 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
     d08:	4b24      	ldr	r3, [pc, #144]	; (d9c <_ZN16Maintenance_Tool19handleCommunicationEv+0xb8>)
     d0a:	4798      	blx	r3
	}
     d0c:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
     d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memcpy(&header,localBuffer,sizeMessage);
     d12:	4603      	mov	r3, r0
     d14:	f853 2f05 	ldr.w	r2, [r3, #5]!
     d18:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
     d1c:	889b      	ldrh	r3, [r3, #4]
     d1e:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
			switch (input){
     d22:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
     d26:	2b3d      	cmp	r3, #61	; 0x3d
     d28:	d017      	beq.n	d5a <_ZN16Maintenance_Tool19handleCommunicationEv+0x76>
     d2a:	2b3e      	cmp	r3, #62	; 0x3e
     d2c:	d010      	beq.n	d50 <_ZN16Maintenance_Tool19handleCommunicationEv+0x6c>
     d2e:	2b3c      	cmp	r3, #60	; 0x3c
     d30:	d003      	beq.n	d3a <_ZN16Maintenance_Tool19handleCommunicationEv+0x56>
					gotCommand=false;
     d32:	2300      	movs	r3, #0
     d34:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
				break;
     d38:	e006      	b.n	d48 <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
					gotCommand=true;
     d3a:	2301      	movs	r3, #1
     d3c:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
					result = handleHVACTask();
     d40:	4b17      	ldr	r3, [pc, #92]	; (da0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
     d42:	4798      	blx	r3
     d44:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
			ClearLocalBuffer();
     d48:	4620      	mov	r0, r4
     d4a:	4b16      	ldr	r3, [pc, #88]	; (da4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
     d4c:	4798      	blx	r3
     d4e:	e7d8      	b.n	d02 <_ZN16Maintenance_Tool19handleCommunicationEv+0x1e>
					result = handleHVACTask();
     d50:	4b13      	ldr	r3, [pc, #76]	; (da0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
     d52:	4798      	blx	r3
     d54:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     d58:	e7f6      	b.n	d48 <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
					is_MTPC_Beaming=true;
     d5a:	2501      	movs	r5, #1
     d5c:	7105      	strb	r5, [r0, #4]
					interfaceTimer.Stop();
     d5e:	4e12      	ldr	r6, [pc, #72]	; (da8 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
     d60:	4630      	mov	r0, r6
     d62:	4b12      	ldr	r3, [pc, #72]	; (dac <_ZN16Maintenance_Tool19handleCommunicationEv+0xc8>)
     d64:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
     d66:	4f12      	ldr	r7, [pc, #72]	; (db0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xcc>)
     d68:	4639      	mov	r1, r7
     d6a:	4630      	mov	r0, r6
     d6c:	4b11      	ldr	r3, [pc, #68]	; (db4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd0>)
     d6e:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
     d70:	f242 7210 	movw	r2, #10000	; 0x2710
     d74:	4639      	mov	r1, r7
     d76:	4630      	mov	r0, r6
     d78:	4b0f      	ldr	r3, [pc, #60]	; (db8 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd4>)
     d7a:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
     d7c:	2300      	movs	r3, #0
     d7e:	64e3      	str	r3, [r4, #76]	; 0x4c
					maintenanceIsConnected = true;
     d80:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
					bSendNotifications = true;
     d84:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
					result=is_MTPC_Beaming;
     d88:	7923      	ldrb	r3, [r4, #4]
     d8a:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
				break;
     d8e:	e7db      	b.n	d48 <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
		gotCommand=false;
     d90:	2300      	movs	r3, #0
     d92:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
     d96:	e7b9      	b.n	d0c <_ZN16Maintenance_Tool19handleCommunicationEv+0x28>
     d98:	20001364 	.word	0x20001364
     d9c:	0000f50d 	.word	0x0000f50d
     da0:	00000bbd 	.word	0x00000bbd
     da4:	0000083d 	.word	0x0000083d
     da8:	2000143c 	.word	0x2000143c
     dac:	0000fb51 	.word	0x0000fb51
     db0:	00000709 	.word	0x00000709
     db4:	0000fc6d 	.word	0x0000fc6d
     db8:	0000fc09 	.word	0x0000fc09

00000dbc <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     dbc:	b580      	push	{r7, lr}
     dbe:	af00      	add	r7, sp, #0
	system_init();
     dc0:	4b03      	ldr	r3, [pc, #12]	; (dd0 <atmel_start_init+0x14>)
     dc2:	4798      	blx	r3
	usb_init();
     dc4:	4b03      	ldr	r3, [pc, #12]	; (dd4 <atmel_start_init+0x18>)
     dc6:	4798      	blx	r3
	spi_nor_flash_init();
     dc8:	4b03      	ldr	r3, [pc, #12]	; (dd8 <atmel_start_init+0x1c>)
     dca:	4798      	blx	r3
}
     dcc:	bf00      	nop
     dce:	bd80      	pop	{r7, pc}
     dd0:	00002145 	.word	0x00002145
     dd4:	0000bcbd 	.word	0x0000bcbd
     dd8:	0000bc51 	.word	0x0000bc51

00000ddc <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     ddc:	b480      	push	{r7}
     dde:	b085      	sub	sp, #20
     de0:	af00      	add	r7, sp, #0
     de2:	60f8      	str	r0, [r7, #12]
     de4:	460b      	mov	r3, r1
     de6:	607a      	str	r2, [r7, #4]
     de8:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     dea:	7afa      	ldrb	r2, [r7, #11]
     dec:	68fb      	ldr	r3, [r7, #12]
     dee:	3220      	adds	r2, #32
     df0:	6879      	ldr	r1, [r7, #4]
     df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     df6:	bf00      	nop
     df8:	3714      	adds	r7, #20
     dfa:	46bd      	mov	sp, r7
     dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
     e00:	4770      	bx	lr

00000e02 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     e02:	b480      	push	{r7}
     e04:	b083      	sub	sp, #12
     e06:	af00      	add	r7, sp, #0
     e08:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     e0a:	687b      	ldr	r3, [r7, #4]
     e0c:	691b      	ldr	r3, [r3, #16]
     e0e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     e12:	687b      	ldr	r3, [r7, #4]
     e14:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e16:	bf00      	nop
     e18:	370c      	adds	r7, #12
     e1a:	46bd      	mov	sp, r7
     e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
     e20:	4770      	bx	lr

00000e22 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     e22:	b480      	push	{r7}
     e24:	b083      	sub	sp, #12
     e26:	af00      	add	r7, sp, #0
     e28:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     e2a:	687b      	ldr	r3, [r7, #4]
     e2c:	691b      	ldr	r3, [r3, #16]
     e2e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     e32:	687b      	ldr	r3, [r7, #4]
     e34:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e36:	bf00      	nop
     e38:	370c      	adds	r7, #12
     e3a:	46bd      	mov	sp, r7
     e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
     e40:	4770      	bx	lr

00000e42 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     e42:	b480      	push	{r7}
     e44:	b083      	sub	sp, #12
     e46:	af00      	add	r7, sp, #0
     e48:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     e4a:	687b      	ldr	r3, [r7, #4]
     e4c:	691b      	ldr	r3, [r3, #16]
     e4e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     e52:	687b      	ldr	r3, [r7, #4]
     e54:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e56:	bf00      	nop
     e58:	370c      	adds	r7, #12
     e5a:	46bd      	mov	sp, r7
     e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
     e60:	4770      	bx	lr

00000e62 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     e62:	b480      	push	{r7}
     e64:	b083      	sub	sp, #12
     e66:	af00      	add	r7, sp, #0
     e68:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     e6a:	687b      	ldr	r3, [r7, #4]
     e6c:	691b      	ldr	r3, [r3, #16]
     e6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     e72:	687b      	ldr	r3, [r7, #4]
     e74:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e76:	bf00      	nop
     e78:	370c      	adds	r7, #12
     e7a:	46bd      	mov	sp, r7
     e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
     e80:	4770      	bx	lr

00000e82 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     e82:	b480      	push	{r7}
     e84:	b083      	sub	sp, #12
     e86:	af00      	add	r7, sp, #0
     e88:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     e8a:	687b      	ldr	r3, [r7, #4]
     e8c:	695b      	ldr	r3, [r3, #20]
     e8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     e92:	687b      	ldr	r3, [r7, #4]
     e94:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e96:	bf00      	nop
     e98:	370c      	adds	r7, #12
     e9a:	46bd      	mov	sp, r7
     e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
     ea0:	4770      	bx	lr

00000ea2 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     ea2:	b480      	push	{r7}
     ea4:	b083      	sub	sp, #12
     ea6:	af00      	add	r7, sp, #0
     ea8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     eaa:	687b      	ldr	r3, [r7, #4]
     eac:	695b      	ldr	r3, [r3, #20]
     eae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     eb2:	687b      	ldr	r3, [r7, #4]
     eb4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     eb6:	bf00      	nop
     eb8:	370c      	adds	r7, #12
     eba:	46bd      	mov	sp, r7
     ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
     ec0:	4770      	bx	lr

00000ec2 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     ec2:	b480      	push	{r7}
     ec4:	b083      	sub	sp, #12
     ec6:	af00      	add	r7, sp, #0
     ec8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     eca:	687b      	ldr	r3, [r7, #4]
     ecc:	695b      	ldr	r3, [r3, #20]
     ece:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     ed2:	687b      	ldr	r3, [r7, #4]
     ed4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ed6:	bf00      	nop
     ed8:	370c      	adds	r7, #12
     eda:	46bd      	mov	sp, r7
     edc:	f85d 7b04 	ldr.w	r7, [sp], #4
     ee0:	4770      	bx	lr

00000ee2 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     ee2:	b480      	push	{r7}
     ee4:	b083      	sub	sp, #12
     ee6:	af00      	add	r7, sp, #0
     ee8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     eea:	687b      	ldr	r3, [r7, #4]
     eec:	695b      	ldr	r3, [r3, #20]
     eee:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     ef2:	687b      	ldr	r3, [r7, #4]
     ef4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ef6:	bf00      	nop
     ef8:	370c      	adds	r7, #12
     efa:	46bd      	mov	sp, r7
     efc:	f85d 7b04 	ldr.w	r7, [sp], #4
     f00:	4770      	bx	lr

00000f02 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     f02:	b480      	push	{r7}
     f04:	b083      	sub	sp, #12
     f06:	af00      	add	r7, sp, #0
     f08:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     f0a:	687b      	ldr	r3, [r7, #4]
     f0c:	695b      	ldr	r3, [r3, #20]
     f0e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     f12:	687b      	ldr	r3, [r7, #4]
     f14:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f16:	bf00      	nop
     f18:	370c      	adds	r7, #12
     f1a:	46bd      	mov	sp, r7
     f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
     f20:	4770      	bx	lr

00000f22 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     f22:	b480      	push	{r7}
     f24:	b083      	sub	sp, #12
     f26:	af00      	add	r7, sp, #0
     f28:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     f2a:	687b      	ldr	r3, [r7, #4]
     f2c:	699b      	ldr	r3, [r3, #24]
     f2e:	f043 0201 	orr.w	r2, r3, #1
     f32:	687b      	ldr	r3, [r7, #4]
     f34:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f36:	bf00      	nop
     f38:	370c      	adds	r7, #12
     f3a:	46bd      	mov	sp, r7
     f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
     f40:	4770      	bx	lr

00000f42 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     f42:	b480      	push	{r7}
     f44:	b083      	sub	sp, #12
     f46:	af00      	add	r7, sp, #0
     f48:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     f4a:	687b      	ldr	r3, [r7, #4]
     f4c:	699b      	ldr	r3, [r3, #24]
     f4e:	f043 0202 	orr.w	r2, r3, #2
     f52:	687b      	ldr	r3, [r7, #4]
     f54:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f56:	bf00      	nop
     f58:	370c      	adds	r7, #12
     f5a:	46bd      	mov	sp, r7
     f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
     f60:	4770      	bx	lr

00000f62 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     f62:	b480      	push	{r7}
     f64:	b083      	sub	sp, #12
     f66:	af00      	add	r7, sp, #0
     f68:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     f6a:	687b      	ldr	r3, [r7, #4]
     f6c:	699b      	ldr	r3, [r3, #24]
     f6e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     f72:	687b      	ldr	r3, [r7, #4]
     f74:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f76:	bf00      	nop
     f78:	370c      	adds	r7, #12
     f7a:	46bd      	mov	sp, r7
     f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
     f80:	4770      	bx	lr

00000f82 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     f82:	b480      	push	{r7}
     f84:	b083      	sub	sp, #12
     f86:	af00      	add	r7, sp, #0
     f88:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     f8a:	687b      	ldr	r3, [r7, #4]
     f8c:	699b      	ldr	r3, [r3, #24]
     f8e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     f92:	687b      	ldr	r3, [r7, #4]
     f94:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f96:	bf00      	nop
     f98:	370c      	adds	r7, #12
     f9a:	46bd      	mov	sp, r7
     f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
     fa0:	4770      	bx	lr

00000fa2 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     fa2:	b480      	push	{r7}
     fa4:	b083      	sub	sp, #12
     fa6:	af00      	add	r7, sp, #0
     fa8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     faa:	687b      	ldr	r3, [r7, #4]
     fac:	699b      	ldr	r3, [r3, #24]
     fae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     fb2:	687b      	ldr	r3, [r7, #4]
     fb4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     fb6:	bf00      	nop
     fb8:	370c      	adds	r7, #12
     fba:	46bd      	mov	sp, r7
     fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fc0:	4770      	bx	lr

00000fc2 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     fc2:	b480      	push	{r7}
     fc4:	b083      	sub	sp, #12
     fc6:	af00      	add	r7, sp, #0
     fc8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     fca:	687b      	ldr	r3, [r7, #4]
     fcc:	699b      	ldr	r3, [r3, #24]
     fce:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     fd2:	687b      	ldr	r3, [r7, #4]
     fd4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     fd6:	bf00      	nop
     fd8:	370c      	adds	r7, #12
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr

00000fe2 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     fe2:	b480      	push	{r7}
     fe4:	b083      	sub	sp, #12
     fe6:	af00      	add	r7, sp, #0
     fe8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     fea:	687b      	ldr	r3, [r7, #4]
     fec:	69db      	ldr	r3, [r3, #28]
     fee:	f043 0220 	orr.w	r2, r3, #32
     ff2:	687b      	ldr	r3, [r7, #4]
     ff4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ff6:	bf00      	nop
     ff8:	370c      	adds	r7, #12
     ffa:	46bd      	mov	sp, r7
     ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1000:	4770      	bx	lr

00001002 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    1002:	b480      	push	{r7}
    1004:	b083      	sub	sp, #12
    1006:	af00      	add	r7, sp, #0
    1008:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    100a:	687b      	ldr	r3, [r7, #4]
    100c:	69db      	ldr	r3, [r3, #28]
    100e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    1012:	687b      	ldr	r3, [r7, #4]
    1014:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1016:	bf00      	nop
    1018:	370c      	adds	r7, #12
    101a:	46bd      	mov	sp, r7
    101c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1020:	4770      	bx	lr

00001022 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    1022:	b480      	push	{r7}
    1024:	b083      	sub	sp, #12
    1026:	af00      	add	r7, sp, #0
    1028:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    102a:	687b      	ldr	r3, [r7, #4]
    102c:	69db      	ldr	r3, [r3, #28]
    102e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1032:	687b      	ldr	r3, [r7, #4]
    1034:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1036:	bf00      	nop
    1038:	370c      	adds	r7, #12
    103a:	46bd      	mov	sp, r7
    103c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1040:	4770      	bx	lr

00001042 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    1042:	b480      	push	{r7}
    1044:	b083      	sub	sp, #12
    1046:	af00      	add	r7, sp, #0
    1048:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    104a:	687b      	ldr	r3, [r7, #4]
    104c:	6a1b      	ldr	r3, [r3, #32]
    104e:	f043 0201 	orr.w	r2, r3, #1
    1052:	687b      	ldr	r3, [r7, #4]
    1054:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1056:	bf00      	nop
    1058:	370c      	adds	r7, #12
    105a:	46bd      	mov	sp, r7
    105c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1060:	4770      	bx	lr

00001062 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    1062:	b480      	push	{r7}
    1064:	b083      	sub	sp, #12
    1066:	af00      	add	r7, sp, #0
    1068:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    106a:	687b      	ldr	r3, [r7, #4]
    106c:	6a1b      	ldr	r3, [r3, #32]
    106e:	f043 0202 	orr.w	r2, r3, #2
    1072:	687b      	ldr	r3, [r7, #4]
    1074:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1076:	bf00      	nop
    1078:	370c      	adds	r7, #12
    107a:	46bd      	mov	sp, r7
    107c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1080:	4770      	bx	lr

00001082 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    1082:	b480      	push	{r7}
    1084:	b083      	sub	sp, #12
    1086:	af00      	add	r7, sp, #0
    1088:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    108a:	687b      	ldr	r3, [r7, #4]
    108c:	6a1b      	ldr	r3, [r3, #32]
    108e:	f043 0204 	orr.w	r2, r3, #4
    1092:	687b      	ldr	r3, [r7, #4]
    1094:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1096:	bf00      	nop
    1098:	370c      	adds	r7, #12
    109a:	46bd      	mov	sp, r7
    109c:	f85d 7b04 	ldr.w	r7, [sp], #4
    10a0:	4770      	bx	lr

000010a2 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    10a2:	b480      	push	{r7}
    10a4:	b083      	sub	sp, #12
    10a6:	af00      	add	r7, sp, #0
    10a8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    10aa:	687b      	ldr	r3, [r7, #4]
    10ac:	6a1b      	ldr	r3, [r3, #32]
    10ae:	f043 0208 	orr.w	r2, r3, #8
    10b2:	687b      	ldr	r3, [r7, #4]
    10b4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10b6:	bf00      	nop
    10b8:	370c      	adds	r7, #12
    10ba:	46bd      	mov	sp, r7
    10bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    10c0:	4770      	bx	lr

000010c2 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    10c2:	b480      	push	{r7}
    10c4:	b083      	sub	sp, #12
    10c6:	af00      	add	r7, sp, #0
    10c8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    10ca:	687b      	ldr	r3, [r7, #4]
    10cc:	6a1b      	ldr	r3, [r3, #32]
    10ce:	f043 0220 	orr.w	r2, r3, #32
    10d2:	687b      	ldr	r3, [r7, #4]
    10d4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10d6:	bf00      	nop
    10d8:	370c      	adds	r7, #12
    10da:	46bd      	mov	sp, r7
    10dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    10e0:	4770      	bx	lr

000010e2 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    10e2:	b480      	push	{r7}
    10e4:	b083      	sub	sp, #12
    10e6:	af00      	add	r7, sp, #0
    10e8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    10ea:	687b      	ldr	r3, [r7, #4]
    10ec:	6a1b      	ldr	r3, [r3, #32]
    10ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    10f2:	687b      	ldr	r3, [r7, #4]
    10f4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10f6:	bf00      	nop
    10f8:	370c      	adds	r7, #12
    10fa:	46bd      	mov	sp, r7
    10fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1100:	4770      	bx	lr

00001102 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    1102:	b480      	push	{r7}
    1104:	b085      	sub	sp, #20
    1106:	af00      	add	r7, sp, #0
    1108:	60f8      	str	r0, [r7, #12]
    110a:	460b      	mov	r3, r1
    110c:	607a      	str	r2, [r7, #4]
    110e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1110:	7afb      	ldrb	r3, [r7, #11]
    1112:	68fa      	ldr	r2, [r7, #12]
    1114:	01db      	lsls	r3, r3, #7
    1116:	4413      	add	r3, r2
    1118:	3308      	adds	r3, #8
    111a:	687a      	ldr	r2, [r7, #4]
    111c:	601a      	str	r2, [r3, #0]
}
    111e:	bf00      	nop
    1120:	3714      	adds	r7, #20
    1122:	46bd      	mov	sp, r7
    1124:	f85d 7b04 	ldr.w	r7, [sp], #4
    1128:	4770      	bx	lr

0000112a <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    112a:	b480      	push	{r7}
    112c:	b085      	sub	sp, #20
    112e:	af00      	add	r7, sp, #0
    1130:	60f8      	str	r0, [r7, #12]
    1132:	460b      	mov	r3, r1
    1134:	607a      	str	r2, [r7, #4]
    1136:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1138:	7afb      	ldrb	r3, [r7, #11]
    113a:	68fa      	ldr	r2, [r7, #12]
    113c:	01db      	lsls	r3, r3, #7
    113e:	4413      	add	r3, r2
    1140:	3304      	adds	r3, #4
    1142:	687a      	ldr	r2, [r7, #4]
    1144:	601a      	str	r2, [r3, #0]
}
    1146:	bf00      	nop
    1148:	3714      	adds	r7, #20
    114a:	46bd      	mov	sp, r7
    114c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1150:	4770      	bx	lr

00001152 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1152:	b480      	push	{r7}
    1154:	b085      	sub	sp, #20
    1156:	af00      	add	r7, sp, #0
    1158:	60f8      	str	r0, [r7, #12]
    115a:	460b      	mov	r3, r1
    115c:	607a      	str	r2, [r7, #4]
    115e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1160:	7afb      	ldrb	r3, [r7, #11]
    1162:	68fa      	ldr	r2, [r7, #12]
    1164:	01db      	lsls	r3, r3, #7
    1166:	4413      	add	r3, r2
    1168:	3318      	adds	r3, #24
    116a:	687a      	ldr	r2, [r7, #4]
    116c:	601a      	str	r2, [r3, #0]
}
    116e:	bf00      	nop
    1170:	3714      	adds	r7, #20
    1172:	46bd      	mov	sp, r7
    1174:	f85d 7b04 	ldr.w	r7, [sp], #4
    1178:	4770      	bx	lr

0000117a <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    117a:	b480      	push	{r7}
    117c:	b085      	sub	sp, #20
    117e:	af00      	add	r7, sp, #0
    1180:	60f8      	str	r0, [r7, #12]
    1182:	460b      	mov	r3, r1
    1184:	607a      	str	r2, [r7, #4]
    1186:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1188:	7afb      	ldrb	r3, [r7, #11]
    118a:	68fa      	ldr	r2, [r7, #12]
    118c:	01db      	lsls	r3, r3, #7
    118e:	4413      	add	r3, r2
    1190:	3314      	adds	r3, #20
    1192:	687a      	ldr	r2, [r7, #4]
    1194:	601a      	str	r2, [r3, #0]
}
    1196:	bf00      	nop
    1198:	3714      	adds	r7, #20
    119a:	46bd      	mov	sp, r7
    119c:	f85d 7b04 	ldr.w	r7, [sp], #4
    11a0:	4770      	bx	lr

000011a2 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    11a2:	b480      	push	{r7}
    11a4:	b085      	sub	sp, #20
    11a6:	af00      	add	r7, sp, #0
    11a8:	6078      	str	r0, [r7, #4]
    11aa:	4608      	mov	r0, r1
    11ac:	4611      	mov	r1, r2
    11ae:	461a      	mov	r2, r3
    11b0:	4603      	mov	r3, r0
    11b2:	70fb      	strb	r3, [r7, #3]
    11b4:	460b      	mov	r3, r1
    11b6:	70bb      	strb	r3, [r7, #2]
    11b8:	4613      	mov	r3, r2
    11ba:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    11bc:	78fa      	ldrb	r2, [r7, #3]
    11be:	78bb      	ldrb	r3, [r7, #2]
    11c0:	6879      	ldr	r1, [r7, #4]
    11c2:	01d2      	lsls	r2, r2, #7
    11c4:	440a      	add	r2, r1
    11c6:	4413      	add	r3, r2
    11c8:	3330      	adds	r3, #48	; 0x30
    11ca:	781b      	ldrb	r3, [r3, #0]
    11cc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    11ce:	7bfb      	ldrb	r3, [r7, #15]
    11d0:	f023 030f 	bic.w	r3, r3, #15
    11d4:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    11d6:	787b      	ldrb	r3, [r7, #1]
    11d8:	f003 030f 	and.w	r3, r3, #15
    11dc:	b2da      	uxtb	r2, r3
    11de:	7bfb      	ldrb	r3, [r7, #15]
    11e0:	4313      	orrs	r3, r2
    11e2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    11e4:	78fa      	ldrb	r2, [r7, #3]
    11e6:	78bb      	ldrb	r3, [r7, #2]
    11e8:	6879      	ldr	r1, [r7, #4]
    11ea:	01d2      	lsls	r2, r2, #7
    11ec:	440a      	add	r2, r1
    11ee:	4413      	add	r3, r2
    11f0:	3330      	adds	r3, #48	; 0x30
    11f2:	7bfa      	ldrb	r2, [r7, #15]
    11f4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    11f6:	bf00      	nop
    11f8:	3714      	adds	r7, #20
    11fa:	46bd      	mov	sp, r7
    11fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1200:	4770      	bx	lr

00001202 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    1202:	b480      	push	{r7}
    1204:	b085      	sub	sp, #20
    1206:	af00      	add	r7, sp, #0
    1208:	6078      	str	r0, [r7, #4]
    120a:	4608      	mov	r0, r1
    120c:	4611      	mov	r1, r2
    120e:	461a      	mov	r2, r3
    1210:	4603      	mov	r3, r0
    1212:	70fb      	strb	r3, [r7, #3]
    1214:	460b      	mov	r3, r1
    1216:	70bb      	strb	r3, [r7, #2]
    1218:	4613      	mov	r3, r2
    121a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    121c:	78fa      	ldrb	r2, [r7, #3]
    121e:	78bb      	ldrb	r3, [r7, #2]
    1220:	6879      	ldr	r1, [r7, #4]
    1222:	01d2      	lsls	r2, r2, #7
    1224:	440a      	add	r2, r1
    1226:	4413      	add	r3, r2
    1228:	3330      	adds	r3, #48	; 0x30
    122a:	781b      	ldrb	r3, [r3, #0]
    122c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    122e:	7bfb      	ldrb	r3, [r7, #15]
    1230:	f003 030f 	and.w	r3, r3, #15
    1234:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    1236:	787b      	ldrb	r3, [r7, #1]
    1238:	011b      	lsls	r3, r3, #4
    123a:	b2da      	uxtb	r2, r3
    123c:	7bfb      	ldrb	r3, [r7, #15]
    123e:	4313      	orrs	r3, r2
    1240:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1242:	78fa      	ldrb	r2, [r7, #3]
    1244:	78bb      	ldrb	r3, [r7, #2]
    1246:	6879      	ldr	r1, [r7, #4]
    1248:	01d2      	lsls	r2, r2, #7
    124a:	440a      	add	r2, r1
    124c:	4413      	add	r3, r2
    124e:	3330      	adds	r3, #48	; 0x30
    1250:	7bfa      	ldrb	r2, [r7, #15]
    1252:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1254:	bf00      	nop
    1256:	3714      	adds	r7, #20
    1258:	46bd      	mov	sp, r7
    125a:	f85d 7b04 	ldr.w	r7, [sp], #4
    125e:	4770      	bx	lr

00001260 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    1260:	b480      	push	{r7}
    1262:	b085      	sub	sp, #20
    1264:	af00      	add	r7, sp, #0
    1266:	6078      	str	r0, [r7, #4]
    1268:	4608      	mov	r0, r1
    126a:	4611      	mov	r1, r2
    126c:	461a      	mov	r2, r3
    126e:	4603      	mov	r3, r0
    1270:	70fb      	strb	r3, [r7, #3]
    1272:	460b      	mov	r3, r1
    1274:	70bb      	strb	r3, [r7, #2]
    1276:	4613      	mov	r3, r2
    1278:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    127a:	78fa      	ldrb	r2, [r7, #3]
    127c:	78bb      	ldrb	r3, [r7, #2]
    127e:	6879      	ldr	r1, [r7, #4]
    1280:	01d2      	lsls	r2, r2, #7
    1282:	440a      	add	r2, r1
    1284:	4413      	add	r3, r2
    1286:	3340      	adds	r3, #64	; 0x40
    1288:	781b      	ldrb	r3, [r3, #0]
    128a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    128c:	7bfb      	ldrb	r3, [r7, #15]
    128e:	f023 0301 	bic.w	r3, r3, #1
    1292:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1294:	787a      	ldrb	r2, [r7, #1]
    1296:	7bfb      	ldrb	r3, [r7, #15]
    1298:	4313      	orrs	r3, r2
    129a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    129c:	78fa      	ldrb	r2, [r7, #3]
    129e:	78bb      	ldrb	r3, [r7, #2]
    12a0:	6879      	ldr	r1, [r7, #4]
    12a2:	01d2      	lsls	r2, r2, #7
    12a4:	440a      	add	r2, r1
    12a6:	4413      	add	r3, r2
    12a8:	3340      	adds	r3, #64	; 0x40
    12aa:	7bfa      	ldrb	r2, [r7, #15]
    12ac:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    12ae:	bf00      	nop
    12b0:	3714      	adds	r7, #20
    12b2:	46bd      	mov	sp, r7
    12b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    12b8:	4770      	bx	lr

000012ba <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    12ba:	b490      	push	{r4, r7}
    12bc:	b082      	sub	sp, #8
    12be:	af00      	add	r7, sp, #0
    12c0:	6078      	str	r0, [r7, #4]
    12c2:	460b      	mov	r3, r1
    12c4:	70fb      	strb	r3, [r7, #3]
    12c6:	4613      	mov	r3, r2
    12c8:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    12ca:	78fa      	ldrb	r2, [r7, #3]
    12cc:	78bb      	ldrb	r3, [r7, #2]
    12ce:	78f8      	ldrb	r0, [r7, #3]
    12d0:	78b9      	ldrb	r1, [r7, #2]
    12d2:	687c      	ldr	r4, [r7, #4]
    12d4:	01c0      	lsls	r0, r0, #7
    12d6:	4420      	add	r0, r4
    12d8:	4401      	add	r1, r0
    12da:	3140      	adds	r1, #64	; 0x40
    12dc:	7809      	ldrb	r1, [r1, #0]
    12de:	b2c9      	uxtb	r1, r1
    12e0:	f041 0104 	orr.w	r1, r1, #4
    12e4:	b2c8      	uxtb	r0, r1
    12e6:	6879      	ldr	r1, [r7, #4]
    12e8:	01d2      	lsls	r2, r2, #7
    12ea:	440a      	add	r2, r1
    12ec:	4413      	add	r3, r2
    12ee:	3340      	adds	r3, #64	; 0x40
    12f0:	4602      	mov	r2, r0
    12f2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    12f4:	bf00      	nop
    12f6:	3708      	adds	r7, #8
    12f8:	46bd      	mov	sp, r7
    12fa:	bc90      	pop	{r4, r7}
    12fc:	4770      	bx	lr

000012fe <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    12fe:	b490      	push	{r4, r7}
    1300:	b082      	sub	sp, #8
    1302:	af00      	add	r7, sp, #0
    1304:	6078      	str	r0, [r7, #4]
    1306:	460b      	mov	r3, r1
    1308:	70fb      	strb	r3, [r7, #3]
    130a:	4613      	mov	r3, r2
    130c:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    130e:	78fa      	ldrb	r2, [r7, #3]
    1310:	78bb      	ldrb	r3, [r7, #2]
    1312:	78f8      	ldrb	r0, [r7, #3]
    1314:	78b9      	ldrb	r1, [r7, #2]
    1316:	687c      	ldr	r4, [r7, #4]
    1318:	01c0      	lsls	r0, r0, #7
    131a:	4420      	add	r0, r4
    131c:	4401      	add	r1, r0
    131e:	3140      	adds	r1, #64	; 0x40
    1320:	7809      	ldrb	r1, [r1, #0]
    1322:	b2c9      	uxtb	r1, r1
    1324:	f021 0104 	bic.w	r1, r1, #4
    1328:	b2c8      	uxtb	r0, r1
    132a:	6879      	ldr	r1, [r7, #4]
    132c:	01d2      	lsls	r2, r2, #7
    132e:	440a      	add	r2, r1
    1330:	4413      	add	r3, r2
    1332:	3340      	adds	r3, #64	; 0x40
    1334:	4602      	mov	r2, r0
    1336:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1338:	bf00      	nop
    133a:	3708      	adds	r7, #8
    133c:	46bd      	mov	sp, r7
    133e:	bc90      	pop	{r4, r7}
    1340:	4770      	bx	lr

00001342 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    1342:	b480      	push	{r7}
    1344:	b085      	sub	sp, #20
    1346:	af00      	add	r7, sp, #0
    1348:	60f8      	str	r0, [r7, #12]
    134a:	460b      	mov	r3, r1
    134c:	607a      	str	r2, [r7, #4]
    134e:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1350:	7afb      	ldrb	r3, [r7, #11]
    1352:	68fa      	ldr	r2, [r7, #12]
    1354:	01db      	lsls	r3, r3, #7
    1356:	4413      	add	r3, r2
    1358:	3328      	adds	r3, #40	; 0x28
    135a:	687a      	ldr	r2, [r7, #4]
    135c:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    135e:	bf00      	nop
    1360:	3714      	adds	r7, #20
    1362:	46bd      	mov	sp, r7
    1364:	f85d 7b04 	ldr.w	r7, [sp], #4
    1368:	4770      	bx	lr
	...

0000136c <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    136c:	b580      	push	{r7, lr}
    136e:	b082      	sub	sp, #8
    1370:	af00      	add	r7, sp, #0
    1372:	4603      	mov	r3, r0
    1374:	6039      	str	r1, [r7, #0]
    1376:	71fb      	strb	r3, [r7, #7]
    1378:	4613      	mov	r3, r2
    137a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    137c:	79bb      	ldrb	r3, [r7, #6]
    137e:	2b01      	cmp	r3, #1
    1380:	d01c      	beq.n	13bc <_gpio_set_direction+0x50>
    1382:	2b02      	cmp	r3, #2
    1384:	d037      	beq.n	13f6 <_gpio_set_direction+0x8a>
    1386:	2b00      	cmp	r3, #0
    1388:	d14e      	bne.n	1428 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    138a:	79fb      	ldrb	r3, [r7, #7]
    138c:	683a      	ldr	r2, [r7, #0]
    138e:	4619      	mov	r1, r3
    1390:	482a      	ldr	r0, [pc, #168]	; (143c <_gpio_set_direction+0xd0>)
    1392:	4b2b      	ldr	r3, [pc, #172]	; (1440 <_gpio_set_direction+0xd4>)
    1394:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1396:	683b      	ldr	r3, [r7, #0]
    1398:	b29b      	uxth	r3, r3
    139a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    139e:	79fb      	ldrb	r3, [r7, #7]
    13a0:	4619      	mov	r1, r3
    13a2:	4826      	ldr	r0, [pc, #152]	; (143c <_gpio_set_direction+0xd0>)
    13a4:	4b27      	ldr	r3, [pc, #156]	; (1444 <_gpio_set_direction+0xd8>)
    13a6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    13a8:	683b      	ldr	r3, [r7, #0]
    13aa:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    13ac:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    13b0:	79fb      	ldrb	r3, [r7, #7]
    13b2:	4619      	mov	r1, r3
    13b4:	4821      	ldr	r0, [pc, #132]	; (143c <_gpio_set_direction+0xd0>)
    13b6:	4b23      	ldr	r3, [pc, #140]	; (1444 <_gpio_set_direction+0xd8>)
    13b8:	4798      	blx	r3
		break;
    13ba:	e03a      	b.n	1432 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    13bc:	79fb      	ldrb	r3, [r7, #7]
    13be:	683a      	ldr	r2, [r7, #0]
    13c0:	4619      	mov	r1, r3
    13c2:	481e      	ldr	r0, [pc, #120]	; (143c <_gpio_set_direction+0xd0>)
    13c4:	4b1e      	ldr	r3, [pc, #120]	; (1440 <_gpio_set_direction+0xd4>)
    13c6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    13c8:	683b      	ldr	r3, [r7, #0]
    13ca:	b29b      	uxth	r3, r3
    13cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    13d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    13d4:	79f9      	ldrb	r1, [r7, #7]
    13d6:	461a      	mov	r2, r3
    13d8:	4818      	ldr	r0, [pc, #96]	; (143c <_gpio_set_direction+0xd0>)
    13da:	4b1a      	ldr	r3, [pc, #104]	; (1444 <_gpio_set_direction+0xd8>)
    13dc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    13de:	683b      	ldr	r3, [r7, #0]
    13e0:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    13e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    13e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    13ea:	79f9      	ldrb	r1, [r7, #7]
    13ec:	461a      	mov	r2, r3
    13ee:	4813      	ldr	r0, [pc, #76]	; (143c <_gpio_set_direction+0xd0>)
    13f0:	4b14      	ldr	r3, [pc, #80]	; (1444 <_gpio_set_direction+0xd8>)
    13f2:	4798      	blx	r3
		break;
    13f4:	e01d      	b.n	1432 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    13f6:	79fb      	ldrb	r3, [r7, #7]
    13f8:	683a      	ldr	r2, [r7, #0]
    13fa:	4619      	mov	r1, r3
    13fc:	480f      	ldr	r0, [pc, #60]	; (143c <_gpio_set_direction+0xd0>)
    13fe:	4b12      	ldr	r3, [pc, #72]	; (1448 <_gpio_set_direction+0xdc>)
    1400:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1402:	683b      	ldr	r3, [r7, #0]
    1404:	b29b      	uxth	r3, r3
    1406:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    140a:	79fb      	ldrb	r3, [r7, #7]
    140c:	4619      	mov	r1, r3
    140e:	480b      	ldr	r0, [pc, #44]	; (143c <_gpio_set_direction+0xd0>)
    1410:	4b0c      	ldr	r3, [pc, #48]	; (1444 <_gpio_set_direction+0xd8>)
    1412:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1414:	683b      	ldr	r3, [r7, #0]
    1416:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1418:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    141c:	79fb      	ldrb	r3, [r7, #7]
    141e:	4619      	mov	r1, r3
    1420:	4806      	ldr	r0, [pc, #24]	; (143c <_gpio_set_direction+0xd0>)
    1422:	4b08      	ldr	r3, [pc, #32]	; (1444 <_gpio_set_direction+0xd8>)
    1424:	4798      	blx	r3
		break;
    1426:	e004      	b.n	1432 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    1428:	2246      	movs	r2, #70	; 0x46
    142a:	4908      	ldr	r1, [pc, #32]	; (144c <_gpio_set_direction+0xe0>)
    142c:	2000      	movs	r0, #0
    142e:	4b08      	ldr	r3, [pc, #32]	; (1450 <_gpio_set_direction+0xe4>)
    1430:	4798      	blx	r3
	}
}
    1432:	bf00      	nop
    1434:	3708      	adds	r7, #8
    1436:	46bd      	mov	sp, r7
    1438:	bd80      	pop	{r7, pc}
    143a:	bf00      	nop
    143c:	41008000 	.word	0x41008000
    1440:	0000112b 	.word	0x0000112b
    1444:	00001343 	.word	0x00001343
    1448:	00001103 	.word	0x00001103
    144c:	00010e40 	.word	0x00010e40
    1450:	00003cd5 	.word	0x00003cd5

00001454 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1454:	b580      	push	{r7, lr}
    1456:	b082      	sub	sp, #8
    1458:	af00      	add	r7, sp, #0
    145a:	4603      	mov	r3, r0
    145c:	6039      	str	r1, [r7, #0]
    145e:	71fb      	strb	r3, [r7, #7]
    1460:	4613      	mov	r3, r2
    1462:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1464:	79bb      	ldrb	r3, [r7, #6]
    1466:	2b00      	cmp	r3, #0
    1468:	d006      	beq.n	1478 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    146a:	79fb      	ldrb	r3, [r7, #7]
    146c:	683a      	ldr	r2, [r7, #0]
    146e:	4619      	mov	r1, r3
    1470:	4806      	ldr	r0, [pc, #24]	; (148c <_gpio_set_level+0x38>)
    1472:	4b07      	ldr	r3, [pc, #28]	; (1490 <_gpio_set_level+0x3c>)
    1474:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    1476:	e005      	b.n	1484 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1478:	79fb      	ldrb	r3, [r7, #7]
    147a:	683a      	ldr	r2, [r7, #0]
    147c:	4619      	mov	r1, r3
    147e:	4803      	ldr	r0, [pc, #12]	; (148c <_gpio_set_level+0x38>)
    1480:	4b04      	ldr	r3, [pc, #16]	; (1494 <_gpio_set_level+0x40>)
    1482:	4798      	blx	r3
}
    1484:	bf00      	nop
    1486:	3708      	adds	r7, #8
    1488:	46bd      	mov	sp, r7
    148a:	bd80      	pop	{r7, pc}
    148c:	41008000 	.word	0x41008000
    1490:	00001153 	.word	0x00001153
    1494:	0000117b 	.word	0x0000117b

00001498 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    1498:	b580      	push	{r7, lr}
    149a:	b082      	sub	sp, #8
    149c:	af00      	add	r7, sp, #0
    149e:	4603      	mov	r3, r0
    14a0:	71fb      	strb	r3, [r7, #7]
    14a2:	460b      	mov	r3, r1
    14a4:	71bb      	strb	r3, [r7, #6]
    14a6:	4613      	mov	r3, r2
    14a8:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    14aa:	797b      	ldrb	r3, [r7, #5]
    14ac:	2b01      	cmp	r3, #1
    14ae:	d00a      	beq.n	14c6 <_gpio_set_pin_pull_mode+0x2e>
    14b0:	2b02      	cmp	r3, #2
    14b2:	d01f      	beq.n	14f4 <_gpio_set_pin_pull_mode+0x5c>
    14b4:	2b00      	cmp	r3, #0
    14b6:	d134      	bne.n	1522 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    14b8:	79ba      	ldrb	r2, [r7, #6]
    14ba:	79fb      	ldrb	r3, [r7, #7]
    14bc:	4619      	mov	r1, r3
    14be:	481e      	ldr	r0, [pc, #120]	; (1538 <_gpio_set_pin_pull_mode+0xa0>)
    14c0:	4b1e      	ldr	r3, [pc, #120]	; (153c <_gpio_set_pin_pull_mode+0xa4>)
    14c2:	4798      	blx	r3
		break;
    14c4:	e033      	b.n	152e <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    14c6:	79bb      	ldrb	r3, [r7, #6]
    14c8:	2201      	movs	r2, #1
    14ca:	409a      	lsls	r2, r3
    14cc:	79fb      	ldrb	r3, [r7, #7]
    14ce:	4619      	mov	r1, r3
    14d0:	4819      	ldr	r0, [pc, #100]	; (1538 <_gpio_set_pin_pull_mode+0xa0>)
    14d2:	4b1b      	ldr	r3, [pc, #108]	; (1540 <_gpio_set_pin_pull_mode+0xa8>)
    14d4:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    14d6:	79ba      	ldrb	r2, [r7, #6]
    14d8:	79fb      	ldrb	r3, [r7, #7]
    14da:	4619      	mov	r1, r3
    14dc:	4816      	ldr	r0, [pc, #88]	; (1538 <_gpio_set_pin_pull_mode+0xa0>)
    14de:	4b19      	ldr	r3, [pc, #100]	; (1544 <_gpio_set_pin_pull_mode+0xac>)
    14e0:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    14e2:	79bb      	ldrb	r3, [r7, #6]
    14e4:	2201      	movs	r2, #1
    14e6:	409a      	lsls	r2, r3
    14e8:	79fb      	ldrb	r3, [r7, #7]
    14ea:	4619      	mov	r1, r3
    14ec:	4812      	ldr	r0, [pc, #72]	; (1538 <_gpio_set_pin_pull_mode+0xa0>)
    14ee:	4b16      	ldr	r3, [pc, #88]	; (1548 <_gpio_set_pin_pull_mode+0xb0>)
    14f0:	4798      	blx	r3
		break;
    14f2:	e01c      	b.n	152e <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    14f4:	79bb      	ldrb	r3, [r7, #6]
    14f6:	2201      	movs	r2, #1
    14f8:	409a      	lsls	r2, r3
    14fa:	79fb      	ldrb	r3, [r7, #7]
    14fc:	4619      	mov	r1, r3
    14fe:	480e      	ldr	r0, [pc, #56]	; (1538 <_gpio_set_pin_pull_mode+0xa0>)
    1500:	4b0f      	ldr	r3, [pc, #60]	; (1540 <_gpio_set_pin_pull_mode+0xa8>)
    1502:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1504:	79ba      	ldrb	r2, [r7, #6]
    1506:	79fb      	ldrb	r3, [r7, #7]
    1508:	4619      	mov	r1, r3
    150a:	480b      	ldr	r0, [pc, #44]	; (1538 <_gpio_set_pin_pull_mode+0xa0>)
    150c:	4b0d      	ldr	r3, [pc, #52]	; (1544 <_gpio_set_pin_pull_mode+0xac>)
    150e:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    1510:	79bb      	ldrb	r3, [r7, #6]
    1512:	2201      	movs	r2, #1
    1514:	409a      	lsls	r2, r3
    1516:	79fb      	ldrb	r3, [r7, #7]
    1518:	4619      	mov	r1, r3
    151a:	4807      	ldr	r0, [pc, #28]	; (1538 <_gpio_set_pin_pull_mode+0xa0>)
    151c:	4b0b      	ldr	r3, [pc, #44]	; (154c <_gpio_set_pin_pull_mode+0xb4>)
    151e:	4798      	blx	r3
		break;
    1520:	e005      	b.n	152e <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    1522:	2289      	movs	r2, #137	; 0x89
    1524:	490a      	ldr	r1, [pc, #40]	; (1550 <_gpio_set_pin_pull_mode+0xb8>)
    1526:	2000      	movs	r0, #0
    1528:	4b0a      	ldr	r3, [pc, #40]	; (1554 <_gpio_set_pin_pull_mode+0xbc>)
    152a:	4798      	blx	r3
		break;
    152c:	bf00      	nop
	}
}
    152e:	bf00      	nop
    1530:	3708      	adds	r7, #8
    1532:	46bd      	mov	sp, r7
    1534:	bd80      	pop	{r7, pc}
    1536:	bf00      	nop
    1538:	41008000 	.word	0x41008000
    153c:	000012ff 	.word	0x000012ff
    1540:	0000112b 	.word	0x0000112b
    1544:	000012bb 	.word	0x000012bb
    1548:	00001153 	.word	0x00001153
    154c:	0000117b 	.word	0x0000117b
    1550:	00010e40 	.word	0x00010e40
    1554:	00003cd5 	.word	0x00003cd5

00001558 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    1558:	b590      	push	{r4, r7, lr}
    155a:	b085      	sub	sp, #20
    155c:	af00      	add	r7, sp, #0
    155e:	6078      	str	r0, [r7, #4]
    1560:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1562:	687b      	ldr	r3, [r7, #4]
    1564:	095b      	lsrs	r3, r3, #5
    1566:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    1568:	687b      	ldr	r3, [r7, #4]
    156a:	b2db      	uxtb	r3, r3
    156c:	f003 031f 	and.w	r3, r3, #31
    1570:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1572:	683b      	ldr	r3, [r7, #0]
    1574:	f1b3 3fff 	cmp.w	r3, #4294967295
    1578:	d106      	bne.n	1588 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    157a:	7bba      	ldrb	r2, [r7, #14]
    157c:	7bf9      	ldrb	r1, [r7, #15]
    157e:	2300      	movs	r3, #0
    1580:	4812      	ldr	r0, [pc, #72]	; (15cc <_gpio_set_pin_function+0x74>)
    1582:	4c13      	ldr	r4, [pc, #76]	; (15d0 <_gpio_set_pin_function+0x78>)
    1584:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    1586:	e01d      	b.n	15c4 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    1588:	7bba      	ldrb	r2, [r7, #14]
    158a:	7bf9      	ldrb	r1, [r7, #15]
    158c:	2301      	movs	r3, #1
    158e:	480f      	ldr	r0, [pc, #60]	; (15cc <_gpio_set_pin_function+0x74>)
    1590:	4c0f      	ldr	r4, [pc, #60]	; (15d0 <_gpio_set_pin_function+0x78>)
    1592:	47a0      	blx	r4
		if (pin & 1) {
    1594:	7bbb      	ldrb	r3, [r7, #14]
    1596:	f003 0301 	and.w	r3, r3, #1
    159a:	2b00      	cmp	r3, #0
    159c:	d009      	beq.n	15b2 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    159e:	7bbb      	ldrb	r3, [r7, #14]
    15a0:	085b      	lsrs	r3, r3, #1
    15a2:	b2da      	uxtb	r2, r3
    15a4:	683b      	ldr	r3, [r7, #0]
    15a6:	b2db      	uxtb	r3, r3
    15a8:	7bf9      	ldrb	r1, [r7, #15]
    15aa:	4808      	ldr	r0, [pc, #32]	; (15cc <_gpio_set_pin_function+0x74>)
    15ac:	4c09      	ldr	r4, [pc, #36]	; (15d4 <_gpio_set_pin_function+0x7c>)
    15ae:	47a0      	blx	r4
}
    15b0:	e008      	b.n	15c4 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    15b2:	7bbb      	ldrb	r3, [r7, #14]
    15b4:	085b      	lsrs	r3, r3, #1
    15b6:	b2da      	uxtb	r2, r3
    15b8:	683b      	ldr	r3, [r7, #0]
    15ba:	b2db      	uxtb	r3, r3
    15bc:	7bf9      	ldrb	r1, [r7, #15]
    15be:	4803      	ldr	r0, [pc, #12]	; (15cc <_gpio_set_pin_function+0x74>)
    15c0:	4c05      	ldr	r4, [pc, #20]	; (15d8 <_gpio_set_pin_function+0x80>)
    15c2:	47a0      	blx	r4
}
    15c4:	bf00      	nop
    15c6:	3714      	adds	r7, #20
    15c8:	46bd      	mov	sp, r7
    15ca:	bd90      	pop	{r4, r7, pc}
    15cc:	41008000 	.word	0x41008000
    15d0:	00001261 	.word	0x00001261
    15d4:	00001203 	.word	0x00001203
    15d8:	000011a3 	.word	0x000011a3

000015dc <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    15dc:	b580      	push	{r7, lr}
    15de:	b082      	sub	sp, #8
    15e0:	af00      	add	r7, sp, #0
    15e2:	4603      	mov	r3, r0
    15e4:	460a      	mov	r2, r1
    15e6:	71fb      	strb	r3, [r7, #7]
    15e8:	4613      	mov	r3, r2
    15ea:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    15ec:	79fb      	ldrb	r3, [r7, #7]
    15ee:	095b      	lsrs	r3, r3, #5
    15f0:	b2d8      	uxtb	r0, r3
    15f2:	79fb      	ldrb	r3, [r7, #7]
    15f4:	f003 031f 	and.w	r3, r3, #31
    15f8:	b2db      	uxtb	r3, r3
    15fa:	79ba      	ldrb	r2, [r7, #6]
    15fc:	4619      	mov	r1, r3
    15fe:	4b03      	ldr	r3, [pc, #12]	; (160c <gpio_set_pin_pull_mode+0x30>)
    1600:	4798      	blx	r3
}
    1602:	bf00      	nop
    1604:	3708      	adds	r7, #8
    1606:	46bd      	mov	sp, r7
    1608:	bd80      	pop	{r7, pc}
    160a:	bf00      	nop
    160c:	00001499 	.word	0x00001499

00001610 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    1610:	b580      	push	{r7, lr}
    1612:	b082      	sub	sp, #8
    1614:	af00      	add	r7, sp, #0
    1616:	6078      	str	r0, [r7, #4]
    1618:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    161a:	6839      	ldr	r1, [r7, #0]
    161c:	6878      	ldr	r0, [r7, #4]
    161e:	4b03      	ldr	r3, [pc, #12]	; (162c <gpio_set_pin_function+0x1c>)
    1620:	4798      	blx	r3
}
    1622:	bf00      	nop
    1624:	3708      	adds	r7, #8
    1626:	46bd      	mov	sp, r7
    1628:	bd80      	pop	{r7, pc}
    162a:	bf00      	nop
    162c:	00001559 	.word	0x00001559

00001630 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    1630:	b580      	push	{r7, lr}
    1632:	b082      	sub	sp, #8
    1634:	af00      	add	r7, sp, #0
    1636:	4603      	mov	r3, r0
    1638:	460a      	mov	r2, r1
    163a:	71fb      	strb	r3, [r7, #7]
    163c:	4613      	mov	r3, r2
    163e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1640:	79fb      	ldrb	r3, [r7, #7]
    1642:	095b      	lsrs	r3, r3, #5
    1644:	b2d8      	uxtb	r0, r3
    1646:	79fb      	ldrb	r3, [r7, #7]
    1648:	f003 031f 	and.w	r3, r3, #31
    164c:	2201      	movs	r2, #1
    164e:	fa02 f303 	lsl.w	r3, r2, r3
    1652:	79ba      	ldrb	r2, [r7, #6]
    1654:	4619      	mov	r1, r3
    1656:	4b03      	ldr	r3, [pc, #12]	; (1664 <gpio_set_pin_direction+0x34>)
    1658:	4798      	blx	r3
}
    165a:	bf00      	nop
    165c:	3708      	adds	r7, #8
    165e:	46bd      	mov	sp, r7
    1660:	bd80      	pop	{r7, pc}
    1662:	bf00      	nop
    1664:	0000136d 	.word	0x0000136d

00001668 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1668:	b580      	push	{r7, lr}
    166a:	b082      	sub	sp, #8
    166c:	af00      	add	r7, sp, #0
    166e:	4603      	mov	r3, r0
    1670:	460a      	mov	r2, r1
    1672:	71fb      	strb	r3, [r7, #7]
    1674:	4613      	mov	r3, r2
    1676:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1678:	79fb      	ldrb	r3, [r7, #7]
    167a:	095b      	lsrs	r3, r3, #5
    167c:	b2d8      	uxtb	r0, r3
    167e:	79fb      	ldrb	r3, [r7, #7]
    1680:	f003 031f 	and.w	r3, r3, #31
    1684:	2201      	movs	r2, #1
    1686:	fa02 f303 	lsl.w	r3, r2, r3
    168a:	79ba      	ldrb	r2, [r7, #6]
    168c:	4619      	mov	r1, r3
    168e:	4b03      	ldr	r3, [pc, #12]	; (169c <gpio_set_pin_level+0x34>)
    1690:	4798      	blx	r3
}
    1692:	bf00      	nop
    1694:	3708      	adds	r7, #8
    1696:	46bd      	mov	sp, r7
    1698:	bd80      	pop	{r7, pc}
    169a:	bf00      	nop
    169c:	00001455 	.word	0x00001455

000016a0 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    16a0:	b580      	push	{r7, lr}
    16a2:	af00      	add	r7, sp, #0
	_init_chip();
    16a4:	4b01      	ldr	r3, [pc, #4]	; (16ac <init_mcu+0xc>)
    16a6:	4798      	blx	r3
}
    16a8:	bf00      	nop
    16aa:	bd80      	pop	{r7, pc}
    16ac:	000048e5 	.word	0x000048e5

000016b0 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    16b0:	b580      	push	{r7, lr}
    16b2:	b082      	sub	sp, #8
    16b4:	af00      	add	r7, sp, #0
    16b6:	6078      	str	r0, [r7, #4]
    16b8:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    16ba:	687b      	ldr	r3, [r7, #4]
    16bc:	2b00      	cmp	r3, #0
    16be:	d004      	beq.n	16ca <wdt_init+0x1a>
    16c0:	683b      	ldr	r3, [r7, #0]
    16c2:	2b00      	cmp	r3, #0
    16c4:	d001      	beq.n	16ca <wdt_init+0x1a>
    16c6:	2301      	movs	r3, #1
    16c8:	e000      	b.n	16cc <wdt_init+0x1c>
    16ca:	2300      	movs	r3, #0
    16cc:	f003 0301 	and.w	r3, r3, #1
    16d0:	b2db      	uxtb	r3, r3
    16d2:	2248      	movs	r2, #72	; 0x48
    16d4:	4907      	ldr	r1, [pc, #28]	; (16f4 <wdt_init+0x44>)
    16d6:	4618      	mov	r0, r3
    16d8:	4b07      	ldr	r3, [pc, #28]	; (16f8 <wdt_init+0x48>)
    16da:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    16dc:	687b      	ldr	r3, [r7, #4]
    16de:	683a      	ldr	r2, [r7, #0]
    16e0:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    16e2:	687b      	ldr	r3, [r7, #4]
    16e4:	4618      	mov	r0, r3
    16e6:	4b05      	ldr	r3, [pc, #20]	; (16fc <wdt_init+0x4c>)
    16e8:	4798      	blx	r3
    16ea:	4603      	mov	r3, r0
}
    16ec:	4618      	mov	r0, r3
    16ee:	3708      	adds	r7, #8
    16f0:	46bd      	mov	sp, r7
    16f2:	bd80      	pop	{r7, pc}
    16f4:	00010e5c 	.word	0x00010e5c
    16f8:	00003cd5 	.word	0x00003cd5
    16fc:	0000b6f5 	.word	0x0000b6f5

00001700 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    1700:	b580      	push	{r7, lr}
    1702:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    1704:	4804      	ldr	r0, [pc, #16]	; (1718 <CRC_CALC_init+0x18>)
    1706:	4b05      	ldr	r3, [pc, #20]	; (171c <CRC_CALC_init+0x1c>)
    1708:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    170a:	4905      	ldr	r1, [pc, #20]	; (1720 <CRC_CALC_init+0x20>)
    170c:	4805      	ldr	r0, [pc, #20]	; (1724 <CRC_CALC_init+0x24>)
    170e:	4b06      	ldr	r3, [pc, #24]	; (1728 <CRC_CALC_init+0x28>)
    1710:	4798      	blx	r3
}
    1712:	bf00      	nop
    1714:	bd80      	pop	{r7, pc}
    1716:	bf00      	nop
    1718:	40000800 	.word	0x40000800
    171c:	00000f43 	.word	0x00000f43
    1720:	41002000 	.word	0x41002000
    1724:	200018b4 	.word	0x200018b4
    1728:	00002489 	.word	0x00002489

0000172c <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    172c:	b580      	push	{r7, lr}
    172e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1730:	2244      	movs	r2, #68	; 0x44
    1732:	2104      	movs	r1, #4
    1734:	483f      	ldr	r0, [pc, #252]	; (1834 <EXTERNAL_IRQ_0_init+0x108>)
    1736:	4b40      	ldr	r3, [pc, #256]	; (1838 <EXTERNAL_IRQ_0_init+0x10c>)
    1738:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    173a:	4840      	ldr	r0, [pc, #256]	; (183c <EXTERNAL_IRQ_0_init+0x110>)
    173c:	4b40      	ldr	r3, [pc, #256]	; (1840 <EXTERNAL_IRQ_0_init+0x114>)
    173e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1740:	2101      	movs	r1, #1
    1742:	2040      	movs	r0, #64	; 0x40
    1744:	4b3f      	ldr	r3, [pc, #252]	; (1844 <EXTERNAL_IRQ_0_init+0x118>)
    1746:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1748:	2100      	movs	r1, #0
    174a:	2040      	movs	r0, #64	; 0x40
    174c:	4b3e      	ldr	r3, [pc, #248]	; (1848 <EXTERNAL_IRQ_0_init+0x11c>)
    174e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    1750:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    1754:	2040      	movs	r0, #64	; 0x40
    1756:	4b3d      	ldr	r3, [pc, #244]	; (184c <EXTERNAL_IRQ_0_init+0x120>)
    1758:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    175a:	2101      	movs	r1, #1
    175c:	2021      	movs	r0, #33	; 0x21
    175e:	4b39      	ldr	r3, [pc, #228]	; (1844 <EXTERNAL_IRQ_0_init+0x118>)
    1760:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    1762:	2100      	movs	r1, #0
    1764:	2021      	movs	r0, #33	; 0x21
    1766:	4b38      	ldr	r3, [pc, #224]	; (1848 <EXTERNAL_IRQ_0_init+0x11c>)
    1768:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    176a:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    176e:	2021      	movs	r0, #33	; 0x21
    1770:	4b36      	ldr	r3, [pc, #216]	; (184c <EXTERNAL_IRQ_0_init+0x120>)
    1772:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    1774:	2101      	movs	r1, #1
    1776:	2003      	movs	r0, #3
    1778:	4b32      	ldr	r3, [pc, #200]	; (1844 <EXTERNAL_IRQ_0_init+0x118>)
    177a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    177c:	2102      	movs	r1, #2
    177e:	2003      	movs	r0, #3
    1780:	4b31      	ldr	r3, [pc, #196]	; (1848 <EXTERNAL_IRQ_0_init+0x11c>)
    1782:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    1784:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    1788:	2003      	movs	r0, #3
    178a:	4b30      	ldr	r3, [pc, #192]	; (184c <EXTERNAL_IRQ_0_init+0x120>)
    178c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    178e:	2101      	movs	r1, #1
    1790:	2004      	movs	r0, #4
    1792:	4b2c      	ldr	r3, [pc, #176]	; (1844 <EXTERNAL_IRQ_0_init+0x118>)
    1794:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    1796:	2102      	movs	r1, #2
    1798:	2004      	movs	r0, #4
    179a:	4b2b      	ldr	r3, [pc, #172]	; (1848 <EXTERNAL_IRQ_0_init+0x11c>)
    179c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    179e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    17a2:	2004      	movs	r0, #4
    17a4:	4b29      	ldr	r3, [pc, #164]	; (184c <EXTERNAL_IRQ_0_init+0x120>)
    17a6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    17a8:	2101      	movs	r1, #1
    17aa:	2005      	movs	r0, #5
    17ac:	4b25      	ldr	r3, [pc, #148]	; (1844 <EXTERNAL_IRQ_0_init+0x118>)
    17ae:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    17b0:	2102      	movs	r1, #2
    17b2:	2005      	movs	r0, #5
    17b4:	4b24      	ldr	r3, [pc, #144]	; (1848 <EXTERNAL_IRQ_0_init+0x11c>)
    17b6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    17b8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    17bc:	2005      	movs	r0, #5
    17be:	4b23      	ldr	r3, [pc, #140]	; (184c <EXTERNAL_IRQ_0_init+0x120>)
    17c0:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    17c2:	2101      	movs	r1, #1
    17c4:	2056      	movs	r0, #86	; 0x56
    17c6:	4b1f      	ldr	r3, [pc, #124]	; (1844 <EXTERNAL_IRQ_0_init+0x118>)
    17c8:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    17ca:	2102      	movs	r1, #2
    17cc:	2056      	movs	r0, #86	; 0x56
    17ce:	4b1e      	ldr	r3, [pc, #120]	; (1848 <EXTERNAL_IRQ_0_init+0x11c>)
    17d0:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    17d2:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    17d6:	2056      	movs	r0, #86	; 0x56
    17d8:	4b1c      	ldr	r3, [pc, #112]	; (184c <EXTERNAL_IRQ_0_init+0x120>)
    17da:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    17dc:	2101      	movs	r1, #1
    17de:	2057      	movs	r0, #87	; 0x57
    17e0:	4b18      	ldr	r3, [pc, #96]	; (1844 <EXTERNAL_IRQ_0_init+0x118>)
    17e2:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    17e4:	2102      	movs	r1, #2
    17e6:	2057      	movs	r0, #87	; 0x57
    17e8:	4b17      	ldr	r3, [pc, #92]	; (1848 <EXTERNAL_IRQ_0_init+0x11c>)
    17ea:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    17ec:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    17f0:	2057      	movs	r0, #87	; 0x57
    17f2:	4b16      	ldr	r3, [pc, #88]	; (184c <EXTERNAL_IRQ_0_init+0x120>)
    17f4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    17f6:	2101      	movs	r1, #1
    17f8:	2028      	movs	r0, #40	; 0x28
    17fa:	4b12      	ldr	r3, [pc, #72]	; (1844 <EXTERNAL_IRQ_0_init+0x118>)
    17fc:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    17fe:	2100      	movs	r1, #0
    1800:	2028      	movs	r0, #40	; 0x28
    1802:	4b11      	ldr	r3, [pc, #68]	; (1848 <EXTERNAL_IRQ_0_init+0x11c>)
    1804:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    1806:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    180a:	2028      	movs	r0, #40	; 0x28
    180c:	4b0f      	ldr	r3, [pc, #60]	; (184c <EXTERNAL_IRQ_0_init+0x120>)
    180e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    1810:	2101      	movs	r1, #1
    1812:	2029      	movs	r0, #41	; 0x29
    1814:	4b0b      	ldr	r3, [pc, #44]	; (1844 <EXTERNAL_IRQ_0_init+0x118>)
    1816:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    1818:	2100      	movs	r1, #0
    181a:	2029      	movs	r0, #41	; 0x29
    181c:	4b0a      	ldr	r3, [pc, #40]	; (1848 <EXTERNAL_IRQ_0_init+0x11c>)
    181e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    1820:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1824:	2029      	movs	r0, #41	; 0x29
    1826:	4b09      	ldr	r3, [pc, #36]	; (184c <EXTERNAL_IRQ_0_init+0x120>)
    1828:	4798      	blx	r3

	ext_irq_init();
    182a:	4b09      	ldr	r3, [pc, #36]	; (1850 <EXTERNAL_IRQ_0_init+0x124>)
    182c:	4798      	blx	r3
}
    182e:	bf00      	nop
    1830:	bd80      	pop	{r7, pc}
    1832:	bf00      	nop
    1834:	40001c00 	.word	0x40001c00
    1838:	00000ddd 	.word	0x00000ddd
    183c:	40000800 	.word	0x40000800
    1840:	00000ec3 	.word	0x00000ec3
    1844:	00001631 	.word	0x00001631
    1848:	000015dd 	.word	0x000015dd
    184c:	00001611 	.word	0x00001611
    1850:	00002551 	.word	0x00002551

00001854 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1854:	b580      	push	{r7, lr}
    1856:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1858:	2244      	movs	r2, #68	; 0x44
    185a:	210b      	movs	r1, #11
    185c:	4807      	ldr	r0, [pc, #28]	; (187c <EVENT_SYSTEM_0_init+0x28>)
    185e:	4b08      	ldr	r3, [pc, #32]	; (1880 <EVENT_SYSTEM_0_init+0x2c>)
    1860:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1862:	2244      	movs	r2, #68	; 0x44
    1864:	210c      	movs	r1, #12
    1866:	4805      	ldr	r0, [pc, #20]	; (187c <EVENT_SYSTEM_0_init+0x28>)
    1868:	4b05      	ldr	r3, [pc, #20]	; (1880 <EVENT_SYSTEM_0_init+0x2c>)
    186a:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    186c:	4805      	ldr	r0, [pc, #20]	; (1884 <EVENT_SYSTEM_0_init+0x30>)
    186e:	4b06      	ldr	r3, [pc, #24]	; (1888 <EVENT_SYSTEM_0_init+0x34>)
    1870:	4798      	blx	r3

	event_system_init();
    1872:	4b06      	ldr	r3, [pc, #24]	; (188c <EVENT_SYSTEM_0_init+0x38>)
    1874:	4798      	blx	r3
}
    1876:	bf00      	nop
    1878:	bd80      	pop	{r7, pc}
    187a:	bf00      	nop
    187c:	40001c00 	.word	0x40001c00
    1880:	00000ddd 	.word	0x00000ddd
    1884:	40000800 	.word	0x40000800
    1888:	00000f63 	.word	0x00000f63
    188c:	0000253d 	.word	0x0000253d

00001890 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    1890:	b580      	push	{r7, lr}
    1892:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    1894:	2101      	movs	r1, #1
    1896:	202b      	movs	r0, #43	; 0x2b
    1898:	4b2b      	ldr	r3, [pc, #172]	; (1948 <QSPI_N25Q256_PORT_init+0xb8>)
    189a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    189c:	2100      	movs	r1, #0
    189e:	202b      	movs	r0, #43	; 0x2b
    18a0:	4b2a      	ldr	r3, [pc, #168]	; (194c <QSPI_N25Q256_PORT_init+0xbc>)
    18a2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    18a4:	492a      	ldr	r1, [pc, #168]	; (1950 <QSPI_N25Q256_PORT_init+0xc0>)
    18a6:	202b      	movs	r0, #43	; 0x2b
    18a8:	4b2a      	ldr	r3, [pc, #168]	; (1954 <QSPI_N25Q256_PORT_init+0xc4>)
    18aa:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    18ac:	2102      	movs	r1, #2
    18ae:	2008      	movs	r0, #8
    18b0:	4b25      	ldr	r3, [pc, #148]	; (1948 <QSPI_N25Q256_PORT_init+0xb8>)
    18b2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    18b4:	2100      	movs	r1, #0
    18b6:	2008      	movs	r0, #8
    18b8:	4b27      	ldr	r3, [pc, #156]	; (1958 <QSPI_N25Q256_PORT_init+0xc8>)
    18ba:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    18bc:	2100      	movs	r1, #0
    18be:	2008      	movs	r0, #8
    18c0:	4b22      	ldr	r3, [pc, #136]	; (194c <QSPI_N25Q256_PORT_init+0xbc>)
    18c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    18c4:	4925      	ldr	r1, [pc, #148]	; (195c <QSPI_N25Q256_PORT_init+0xcc>)
    18c6:	2008      	movs	r0, #8
    18c8:	4b22      	ldr	r3, [pc, #136]	; (1954 <QSPI_N25Q256_PORT_init+0xc4>)
    18ca:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    18cc:	2102      	movs	r1, #2
    18ce:	2009      	movs	r0, #9
    18d0:	4b1d      	ldr	r3, [pc, #116]	; (1948 <QSPI_N25Q256_PORT_init+0xb8>)
    18d2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    18d4:	2100      	movs	r1, #0
    18d6:	2009      	movs	r0, #9
    18d8:	4b1f      	ldr	r3, [pc, #124]	; (1958 <QSPI_N25Q256_PORT_init+0xc8>)
    18da:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    18dc:	2100      	movs	r1, #0
    18de:	2009      	movs	r0, #9
    18e0:	4b1a      	ldr	r3, [pc, #104]	; (194c <QSPI_N25Q256_PORT_init+0xbc>)
    18e2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    18e4:	491e      	ldr	r1, [pc, #120]	; (1960 <QSPI_N25Q256_PORT_init+0xd0>)
    18e6:	2009      	movs	r0, #9
    18e8:	4b1a      	ldr	r3, [pc, #104]	; (1954 <QSPI_N25Q256_PORT_init+0xc4>)
    18ea:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    18ec:	2102      	movs	r1, #2
    18ee:	200a      	movs	r0, #10
    18f0:	4b15      	ldr	r3, [pc, #84]	; (1948 <QSPI_N25Q256_PORT_init+0xb8>)
    18f2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    18f4:	2100      	movs	r1, #0
    18f6:	200a      	movs	r0, #10
    18f8:	4b17      	ldr	r3, [pc, #92]	; (1958 <QSPI_N25Q256_PORT_init+0xc8>)
    18fa:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    18fc:	2100      	movs	r1, #0
    18fe:	200a      	movs	r0, #10
    1900:	4b12      	ldr	r3, [pc, #72]	; (194c <QSPI_N25Q256_PORT_init+0xbc>)
    1902:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1904:	4917      	ldr	r1, [pc, #92]	; (1964 <QSPI_N25Q256_PORT_init+0xd4>)
    1906:	200a      	movs	r0, #10
    1908:	4b12      	ldr	r3, [pc, #72]	; (1954 <QSPI_N25Q256_PORT_init+0xc4>)
    190a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    190c:	2102      	movs	r1, #2
    190e:	200b      	movs	r0, #11
    1910:	4b0d      	ldr	r3, [pc, #52]	; (1948 <QSPI_N25Q256_PORT_init+0xb8>)
    1912:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1914:	2100      	movs	r1, #0
    1916:	200b      	movs	r0, #11
    1918:	4b0f      	ldr	r3, [pc, #60]	; (1958 <QSPI_N25Q256_PORT_init+0xc8>)
    191a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    191c:	2100      	movs	r1, #0
    191e:	200b      	movs	r0, #11
    1920:	4b0a      	ldr	r3, [pc, #40]	; (194c <QSPI_N25Q256_PORT_init+0xbc>)
    1922:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1924:	4910      	ldr	r1, [pc, #64]	; (1968 <QSPI_N25Q256_PORT_init+0xd8>)
    1926:	200b      	movs	r0, #11
    1928:	4b0a      	ldr	r3, [pc, #40]	; (1954 <QSPI_N25Q256_PORT_init+0xc4>)
    192a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    192c:	2101      	movs	r1, #1
    192e:	202a      	movs	r0, #42	; 0x2a
    1930:	4b05      	ldr	r3, [pc, #20]	; (1948 <QSPI_N25Q256_PORT_init+0xb8>)
    1932:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1934:	2100      	movs	r1, #0
    1936:	202a      	movs	r0, #42	; 0x2a
    1938:	4b04      	ldr	r3, [pc, #16]	; (194c <QSPI_N25Q256_PORT_init+0xbc>)
    193a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    193c:	490b      	ldr	r1, [pc, #44]	; (196c <QSPI_N25Q256_PORT_init+0xdc>)
    193e:	202a      	movs	r0, #42	; 0x2a
    1940:	4b04      	ldr	r3, [pc, #16]	; (1954 <QSPI_N25Q256_PORT_init+0xc4>)
    1942:	4798      	blx	r3
}
    1944:	bf00      	nop
    1946:	bd80      	pop	{r7, pc}
    1948:	00001631 	.word	0x00001631
    194c:	000015dd 	.word	0x000015dd
    1950:	002b0007 	.word	0x002b0007
    1954:	00001611 	.word	0x00001611
    1958:	00001669 	.word	0x00001669
    195c:	00080007 	.word	0x00080007
    1960:	00090007 	.word	0x00090007
    1964:	000a0007 	.word	0x000a0007
    1968:	000b0007 	.word	0x000b0007
    196c:	002a0007 	.word	0x002a0007

00001970 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1970:	b580      	push	{r7, lr}
    1972:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1974:	4805      	ldr	r0, [pc, #20]	; (198c <QSPI_N25Q256_CLOCK_init+0x1c>)
    1976:	4b06      	ldr	r3, [pc, #24]	; (1990 <QSPI_N25Q256_CLOCK_init+0x20>)
    1978:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    197a:	4804      	ldr	r0, [pc, #16]	; (198c <QSPI_N25Q256_CLOCK_init+0x1c>)
    197c:	4b05      	ldr	r3, [pc, #20]	; (1994 <QSPI_N25Q256_CLOCK_init+0x24>)
    197e:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1980:	4802      	ldr	r0, [pc, #8]	; (198c <QSPI_N25Q256_CLOCK_init+0x1c>)
    1982:	4b05      	ldr	r3, [pc, #20]	; (1998 <QSPI_N25Q256_CLOCK_init+0x28>)
    1984:	4798      	blx	r3
}
    1986:	bf00      	nop
    1988:	bd80      	pop	{r7, pc}
    198a:	bf00      	nop
    198c:	40000800 	.word	0x40000800
    1990:	00000e23 	.word	0x00000e23
    1994:	00000e63 	.word	0x00000e63
    1998:	00001023 	.word	0x00001023

0000199c <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    199c:	b580      	push	{r7, lr}
    199e:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    19a0:	4b04      	ldr	r3, [pc, #16]	; (19b4 <QSPI_N25Q256_init+0x18>)
    19a2:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    19a4:	4904      	ldr	r1, [pc, #16]	; (19b8 <QSPI_N25Q256_init+0x1c>)
    19a6:	4805      	ldr	r0, [pc, #20]	; (19bc <QSPI_N25Q256_init+0x20>)
    19a8:	4b05      	ldr	r3, [pc, #20]	; (19c0 <QSPI_N25Q256_init+0x24>)
    19aa:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    19ac:	4b05      	ldr	r3, [pc, #20]	; (19c4 <QSPI_N25Q256_init+0x28>)
    19ae:	4798      	blx	r3
}
    19b0:	bf00      	nop
    19b2:	bd80      	pop	{r7, pc}
    19b4:	00001971 	.word	0x00001971
    19b8:	42003400 	.word	0x42003400
    19bc:	20001728 	.word	0x20001728
    19c0:	00002b31 	.word	0x00002b31
    19c4:	00001891 	.word	0x00001891

000019c8 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    19c8:	b580      	push	{r7, lr}
    19ca:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    19cc:	4802      	ldr	r0, [pc, #8]	; (19d8 <DATETIME_CLOCK_CLOCK_init+0x10>)
    19ce:	4b03      	ldr	r3, [pc, #12]	; (19dc <DATETIME_CLOCK_CLOCK_init+0x14>)
    19d0:	4798      	blx	r3
}
    19d2:	bf00      	nop
    19d4:	bd80      	pop	{r7, pc}
    19d6:	bf00      	nop
    19d8:	40000800 	.word	0x40000800
    19dc:	00000ea3 	.word	0x00000ea3

000019e0 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    19e0:	b580      	push	{r7, lr}
    19e2:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    19e4:	4b03      	ldr	r3, [pc, #12]	; (19f4 <DATETIME_CLOCK_init+0x14>)
    19e6:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    19e8:	4903      	ldr	r1, [pc, #12]	; (19f8 <DATETIME_CLOCK_init+0x18>)
    19ea:	4804      	ldr	r0, [pc, #16]	; (19fc <DATETIME_CLOCK_init+0x1c>)
    19ec:	4b04      	ldr	r3, [pc, #16]	; (1a00 <DATETIME_CLOCK_init+0x20>)
    19ee:	4798      	blx	r3
}
    19f0:	bf00      	nop
    19f2:	bd80      	pop	{r7, pc}
    19f4:	000019c9 	.word	0x000019c9
    19f8:	40002400 	.word	0x40002400
    19fc:	20001890 	.word	0x20001890
    1a00:	0000232d 	.word	0x0000232d

00001a04 <I2C_SHARED_PORT_init>:

void I2C_SHARED_PORT_init(void)
{
    1a04:	b580      	push	{r7, lr}
    1a06:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    1a08:	2100      	movs	r1, #0
    1a0a:	2010      	movs	r0, #16
    1a0c:	4b07      	ldr	r3, [pc, #28]	; (1a2c <I2C_SHARED_PORT_init+0x28>)
    1a0e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1a10:	4907      	ldr	r1, [pc, #28]	; (1a30 <I2C_SHARED_PORT_init+0x2c>)
    1a12:	2010      	movs	r0, #16
    1a14:	4b07      	ldr	r3, [pc, #28]	; (1a34 <I2C_SHARED_PORT_init+0x30>)
    1a16:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    1a18:	2100      	movs	r1, #0
    1a1a:	2011      	movs	r0, #17
    1a1c:	4b03      	ldr	r3, [pc, #12]	; (1a2c <I2C_SHARED_PORT_init+0x28>)
    1a1e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1a20:	4905      	ldr	r1, [pc, #20]	; (1a38 <I2C_SHARED_PORT_init+0x34>)
    1a22:	2011      	movs	r0, #17
    1a24:	4b03      	ldr	r3, [pc, #12]	; (1a34 <I2C_SHARED_PORT_init+0x30>)
    1a26:	4798      	blx	r3
}
    1a28:	bf00      	nop
    1a2a:	bd80      	pop	{r7, pc}
    1a2c:	000015dd 	.word	0x000015dd
    1a30:	00100002 	.word	0x00100002
    1a34:	00001611 	.word	0x00001611
    1a38:	00110002 	.word	0x00110002

00001a3c <I2C_SHARED_CLOCK_init>:

void I2C_SHARED_CLOCK_init(void)
{
    1a3c:	b580      	push	{r7, lr}
    1a3e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a40:	2245      	movs	r2, #69	; 0x45
    1a42:	2108      	movs	r1, #8
    1a44:	4806      	ldr	r0, [pc, #24]	; (1a60 <I2C_SHARED_CLOCK_init+0x24>)
    1a46:	4b07      	ldr	r3, [pc, #28]	; (1a64 <I2C_SHARED_CLOCK_init+0x28>)
    1a48:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a4a:	224a      	movs	r2, #74	; 0x4a
    1a4c:	2103      	movs	r1, #3
    1a4e:	4804      	ldr	r0, [pc, #16]	; (1a60 <I2C_SHARED_CLOCK_init+0x24>)
    1a50:	4b04      	ldr	r3, [pc, #16]	; (1a64 <I2C_SHARED_CLOCK_init+0x28>)
    1a52:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1a54:	4804      	ldr	r0, [pc, #16]	; (1a68 <I2C_SHARED_CLOCK_init+0x2c>)
    1a56:	4b05      	ldr	r3, [pc, #20]	; (1a6c <I2C_SHARED_CLOCK_init+0x30>)
    1a58:	4798      	blx	r3
}
    1a5a:	bf00      	nop
    1a5c:	bd80      	pop	{r7, pc}
    1a5e:	bf00      	nop
    1a60:	40001c00 	.word	0x40001c00
    1a64:	00000ddd 	.word	0x00000ddd
    1a68:	40000800 	.word	0x40000800
    1a6c:	00000ee3 	.word	0x00000ee3

00001a70 <I2C_SHARED_init>:

void I2C_SHARED_init(void)
{
    1a70:	b580      	push	{r7, lr}
    1a72:	af00      	add	r7, sp, #0
	I2C_SHARED_CLOCK_init();
    1a74:	4b04      	ldr	r3, [pc, #16]	; (1a88 <I2C_SHARED_init+0x18>)
    1a76:	4798      	blx	r3
	i2c_m_sync_init(&I2C_SHARED, SERCOM1);
    1a78:	4904      	ldr	r1, [pc, #16]	; (1a8c <I2C_SHARED_init+0x1c>)
    1a7a:	4805      	ldr	r0, [pc, #20]	; (1a90 <I2C_SHARED_init+0x20>)
    1a7c:	4b05      	ldr	r3, [pc, #20]	; (1a94 <I2C_SHARED_init+0x24>)
    1a7e:	4798      	blx	r3
	I2C_SHARED_PORT_init();
    1a80:	4b05      	ldr	r3, [pc, #20]	; (1a98 <I2C_SHARED_init+0x28>)
    1a82:	4798      	blx	r3
}
    1a84:	bf00      	nop
    1a86:	bd80      	pop	{r7, pc}
    1a88:	00001a3d 	.word	0x00001a3d
    1a8c:	40003400 	.word	0x40003400
    1a90:	20001810 	.word	0x20001810
    1a94:	000029e9 	.word	0x000029e9
    1a98:	00001a05 	.word	0x00001a05

00001a9c <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1a9c:	b580      	push	{r7, lr}
    1a9e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    1aa0:	2100      	movs	r1, #0
    1aa2:	203b      	movs	r0, #59	; 0x3b
    1aa4:	4b11      	ldr	r3, [pc, #68]	; (1aec <SPI_TEMP_PORT_init+0x50>)
    1aa6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    1aa8:	2102      	movs	r1, #2
    1aaa:	203b      	movs	r0, #59	; 0x3b
    1aac:	4b10      	ldr	r3, [pc, #64]	; (1af0 <SPI_TEMP_PORT_init+0x54>)
    1aae:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    1ab0:	4910      	ldr	r1, [pc, #64]	; (1af4 <SPI_TEMP_PORT_init+0x58>)
    1ab2:	203b      	movs	r0, #59	; 0x3b
    1ab4:	4b10      	ldr	r3, [pc, #64]	; (1af8 <SPI_TEMP_PORT_init+0x5c>)
    1ab6:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    1ab8:	2100      	movs	r1, #0
    1aba:	203a      	movs	r0, #58	; 0x3a
    1abc:	4b0b      	ldr	r3, [pc, #44]	; (1aec <SPI_TEMP_PORT_init+0x50>)
    1abe:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1ac0:	2102      	movs	r1, #2
    1ac2:	203a      	movs	r0, #58	; 0x3a
    1ac4:	4b0a      	ldr	r3, [pc, #40]	; (1af0 <SPI_TEMP_PORT_init+0x54>)
    1ac6:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    1ac8:	490c      	ldr	r1, [pc, #48]	; (1afc <SPI_TEMP_PORT_init+0x60>)
    1aca:	203a      	movs	r0, #58	; 0x3a
    1acc:	4b0a      	ldr	r3, [pc, #40]	; (1af8 <SPI_TEMP_PORT_init+0x5c>)
    1ace:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1ad0:	2101      	movs	r1, #1
    1ad2:	203c      	movs	r0, #60	; 0x3c
    1ad4:	4b06      	ldr	r3, [pc, #24]	; (1af0 <SPI_TEMP_PORT_init+0x54>)
    1ad6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    1ad8:	2100      	movs	r1, #0
    1ada:	203c      	movs	r0, #60	; 0x3c
    1adc:	4b08      	ldr	r3, [pc, #32]	; (1b00 <SPI_TEMP_PORT_init+0x64>)
    1ade:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1ae0:	4908      	ldr	r1, [pc, #32]	; (1b04 <SPI_TEMP_PORT_init+0x68>)
    1ae2:	203c      	movs	r0, #60	; 0x3c
    1ae4:	4b04      	ldr	r3, [pc, #16]	; (1af8 <SPI_TEMP_PORT_init+0x5c>)
    1ae6:	4798      	blx	r3
}
    1ae8:	bf00      	nop
    1aea:	bd80      	pop	{r7, pc}
    1aec:	00001669 	.word	0x00001669
    1af0:	00001631 	.word	0x00001631
    1af4:	003b0003 	.word	0x003b0003
    1af8:	00001611 	.word	0x00001611
    1afc:	003a0003 	.word	0x003a0003
    1b00:	000015dd 	.word	0x000015dd
    1b04:	003c0003 	.word	0x003c0003

00001b08 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1b08:	b580      	push	{r7, lr}
    1b0a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b0c:	2245      	movs	r2, #69	; 0x45
    1b0e:	2122      	movs	r1, #34	; 0x22
    1b10:	4806      	ldr	r0, [pc, #24]	; (1b2c <SPI_TEMP_CLOCK_init+0x24>)
    1b12:	4b07      	ldr	r3, [pc, #28]	; (1b30 <SPI_TEMP_CLOCK_init+0x28>)
    1b14:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b16:	224a      	movs	r2, #74	; 0x4a
    1b18:	2103      	movs	r1, #3
    1b1a:	4804      	ldr	r0, [pc, #16]	; (1b2c <SPI_TEMP_CLOCK_init+0x24>)
    1b1c:	4b04      	ldr	r3, [pc, #16]	; (1b30 <SPI_TEMP_CLOCK_init+0x28>)
    1b1e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1b20:	4804      	ldr	r0, [pc, #16]	; (1b34 <SPI_TEMP_CLOCK_init+0x2c>)
    1b22:	4b05      	ldr	r3, [pc, #20]	; (1b38 <SPI_TEMP_CLOCK_init+0x30>)
    1b24:	4798      	blx	r3
}
    1b26:	bf00      	nop
    1b28:	bd80      	pop	{r7, pc}
    1b2a:	bf00      	nop
    1b2c:	40001c00 	.word	0x40001c00
    1b30:	00000ddd 	.word	0x00000ddd
    1b34:	40000800 	.word	0x40000800
    1b38:	00001043 	.word	0x00001043

00001b3c <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1b3c:	b580      	push	{r7, lr}
    1b3e:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1b40:	4b05      	ldr	r3, [pc, #20]	; (1b58 <SPI_TEMP_init+0x1c>)
    1b42:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    1b44:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1b48:	4804      	ldr	r0, [pc, #16]	; (1b5c <SPI_TEMP_init+0x20>)
    1b4a:	4b05      	ldr	r3, [pc, #20]	; (1b60 <SPI_TEMP_init+0x24>)
    1b4c:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1b4e:	4b05      	ldr	r3, [pc, #20]	; (1b64 <SPI_TEMP_init+0x28>)
    1b50:	4798      	blx	r3
}
    1b52:	bf00      	nop
    1b54:	bd80      	pop	{r7, pc}
    1b56:	bf00      	nop
    1b58:	00001b09 	.word	0x00001b09
    1b5c:	200016f0 	.word	0x200016f0
    1b60:	00002c41 	.word	0x00002c41
    1b64:	00001a9d 	.word	0x00001a9d

00001b68 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    1b68:	b580      	push	{r7, lr}
    1b6a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1b6c:	2100      	movs	r1, #0
    1b6e:	2017      	movs	r0, #23
    1b70:	4b07      	ldr	r3, [pc, #28]	; (1b90 <I2C_EXPANDER_PORT_init+0x28>)
    1b72:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    1b74:	4907      	ldr	r1, [pc, #28]	; (1b94 <I2C_EXPANDER_PORT_init+0x2c>)
    1b76:	2017      	movs	r0, #23
    1b78:	4b07      	ldr	r3, [pc, #28]	; (1b98 <I2C_EXPANDER_PORT_init+0x30>)
    1b7a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1b7c:	2100      	movs	r1, #0
    1b7e:	2016      	movs	r0, #22
    1b80:	4b03      	ldr	r3, [pc, #12]	; (1b90 <I2C_EXPANDER_PORT_init+0x28>)
    1b82:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    1b84:	4905      	ldr	r1, [pc, #20]	; (1b9c <I2C_EXPANDER_PORT_init+0x34>)
    1b86:	2016      	movs	r0, #22
    1b88:	4b03      	ldr	r3, [pc, #12]	; (1b98 <I2C_EXPANDER_PORT_init+0x30>)
    1b8a:	4798      	blx	r3
}
    1b8c:	bf00      	nop
    1b8e:	bd80      	pop	{r7, pc}
    1b90:	000015dd 	.word	0x000015dd
    1b94:	00170003 	.word	0x00170003
    1b98:	00001611 	.word	0x00001611
    1b9c:	00160003 	.word	0x00160003

00001ba0 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    1ba0:	b580      	push	{r7, lr}
    1ba2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ba4:	2244      	movs	r2, #68	; 0x44
    1ba6:	2123      	movs	r1, #35	; 0x23
    1ba8:	4806      	ldr	r0, [pc, #24]	; (1bc4 <I2C_EXPANDER_CLOCK_init+0x24>)
    1baa:	4b07      	ldr	r3, [pc, #28]	; (1bc8 <I2C_EXPANDER_CLOCK_init+0x28>)
    1bac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1bae:	224a      	movs	r2, #74	; 0x4a
    1bb0:	2103      	movs	r1, #3
    1bb2:	4804      	ldr	r0, [pc, #16]	; (1bc4 <I2C_EXPANDER_CLOCK_init+0x24>)
    1bb4:	4b04      	ldr	r3, [pc, #16]	; (1bc8 <I2C_EXPANDER_CLOCK_init+0x28>)
    1bb6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    1bb8:	4804      	ldr	r0, [pc, #16]	; (1bcc <I2C_EXPANDER_CLOCK_init+0x2c>)
    1bba:	4b05      	ldr	r3, [pc, #20]	; (1bd0 <I2C_EXPANDER_CLOCK_init+0x30>)
    1bbc:	4798      	blx	r3
}
    1bbe:	bf00      	nop
    1bc0:	bd80      	pop	{r7, pc}
    1bc2:	bf00      	nop
    1bc4:	40001c00 	.word	0x40001c00
    1bc8:	00000ddd 	.word	0x00000ddd
    1bcc:	40000800 	.word	0x40000800
    1bd0:	00001063 	.word	0x00001063

00001bd4 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    1bd4:	b580      	push	{r7, lr}
    1bd6:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    1bd8:	4b04      	ldr	r3, [pc, #16]	; (1bec <I2C_EXPANDER_init+0x18>)
    1bda:	4798      	blx	r3
	i2c_m_sync_init(&I2C_EXPANDER, SERCOM5);
    1bdc:	4904      	ldr	r1, [pc, #16]	; (1bf0 <I2C_EXPANDER_init+0x1c>)
    1bde:	4805      	ldr	r0, [pc, #20]	; (1bf4 <I2C_EXPANDER_init+0x20>)
    1be0:	4b05      	ldr	r3, [pc, #20]	; (1bf8 <I2C_EXPANDER_init+0x24>)
    1be2:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    1be4:	4b05      	ldr	r3, [pc, #20]	; (1bfc <I2C_EXPANDER_init+0x28>)
    1be6:	4798      	blx	r3
}
    1be8:	bf00      	nop
    1bea:	bd80      	pop	{r7, pc}
    1bec:	00001ba1 	.word	0x00001ba1
    1bf0:	43000400 	.word	0x43000400
    1bf4:	200017f0 	.word	0x200017f0
    1bf8:	000029e9 	.word	0x000029e9
    1bfc:	00001b69 	.word	0x00001b69

00001c00 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1c00:	b580      	push	{r7, lr}
    1c02:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1c04:	2100      	movs	r1, #0
    1c06:	2044      	movs	r0, #68	; 0x44
    1c08:	4b11      	ldr	r3, [pc, #68]	; (1c50 <SPI_HI3593_PORT_init+0x50>)
    1c0a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1c0c:	2102      	movs	r1, #2
    1c0e:	2044      	movs	r0, #68	; 0x44
    1c10:	4b10      	ldr	r3, [pc, #64]	; (1c54 <SPI_HI3593_PORT_init+0x54>)
    1c12:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1c14:	4910      	ldr	r1, [pc, #64]	; (1c58 <SPI_HI3593_PORT_init+0x58>)
    1c16:	2044      	movs	r0, #68	; 0x44
    1c18:	4b10      	ldr	r3, [pc, #64]	; (1c5c <SPI_HI3593_PORT_init+0x5c>)
    1c1a:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1c1c:	2100      	movs	r1, #0
    1c1e:	2045      	movs	r0, #69	; 0x45
    1c20:	4b0b      	ldr	r3, [pc, #44]	; (1c50 <SPI_HI3593_PORT_init+0x50>)
    1c22:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1c24:	2102      	movs	r1, #2
    1c26:	2045      	movs	r0, #69	; 0x45
    1c28:	4b0a      	ldr	r3, [pc, #40]	; (1c54 <SPI_HI3593_PORT_init+0x54>)
    1c2a:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1c2c:	490c      	ldr	r1, [pc, #48]	; (1c60 <SPI_HI3593_PORT_init+0x60>)
    1c2e:	2045      	movs	r0, #69	; 0x45
    1c30:	4b0a      	ldr	r3, [pc, #40]	; (1c5c <SPI_HI3593_PORT_init+0x5c>)
    1c32:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1c34:	2101      	movs	r1, #1
    1c36:	2047      	movs	r0, #71	; 0x47
    1c38:	4b06      	ldr	r3, [pc, #24]	; (1c54 <SPI_HI3593_PORT_init+0x54>)
    1c3a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1c3c:	2100      	movs	r1, #0
    1c3e:	2047      	movs	r0, #71	; 0x47
    1c40:	4b08      	ldr	r3, [pc, #32]	; (1c64 <SPI_HI3593_PORT_init+0x64>)
    1c42:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    1c44:	4908      	ldr	r1, [pc, #32]	; (1c68 <SPI_HI3593_PORT_init+0x68>)
    1c46:	2047      	movs	r0, #71	; 0x47
    1c48:	4b04      	ldr	r3, [pc, #16]	; (1c5c <SPI_HI3593_PORT_init+0x5c>)
    1c4a:	4798      	blx	r3
}
    1c4c:	bf00      	nop
    1c4e:	bd80      	pop	{r7, pc}
    1c50:	00001669 	.word	0x00001669
    1c54:	00001631 	.word	0x00001631
    1c58:	00440002 	.word	0x00440002
    1c5c:	00001611 	.word	0x00001611
    1c60:	00450002 	.word	0x00450002
    1c64:	000015dd 	.word	0x000015dd
    1c68:	00470002 	.word	0x00470002

00001c6c <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1c6c:	b580      	push	{r7, lr}
    1c6e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c70:	2242      	movs	r2, #66	; 0x42
    1c72:	2124      	movs	r1, #36	; 0x24
    1c74:	4806      	ldr	r0, [pc, #24]	; (1c90 <SPI_HI3593_CLOCK_init+0x24>)
    1c76:	4b07      	ldr	r3, [pc, #28]	; (1c94 <SPI_HI3593_CLOCK_init+0x28>)
    1c78:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c7a:	224a      	movs	r2, #74	; 0x4a
    1c7c:	2103      	movs	r1, #3
    1c7e:	4804      	ldr	r0, [pc, #16]	; (1c90 <SPI_HI3593_CLOCK_init+0x24>)
    1c80:	4b04      	ldr	r3, [pc, #16]	; (1c94 <SPI_HI3593_CLOCK_init+0x28>)
    1c82:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1c84:	4804      	ldr	r0, [pc, #16]	; (1c98 <SPI_HI3593_CLOCK_init+0x2c>)
    1c86:	4b05      	ldr	r3, [pc, #20]	; (1c9c <SPI_HI3593_CLOCK_init+0x30>)
    1c88:	4798      	blx	r3
}
    1c8a:	bf00      	nop
    1c8c:	bd80      	pop	{r7, pc}
    1c8e:	bf00      	nop
    1c90:	40001c00 	.word	0x40001c00
    1c94:	00000ddd 	.word	0x00000ddd
    1c98:	40000800 	.word	0x40000800
    1c9c:	00001083 	.word	0x00001083

00001ca0 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1ca0:	b580      	push	{r7, lr}
    1ca2:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1ca4:	4b04      	ldr	r3, [pc, #16]	; (1cb8 <SPI_HI3593_init+0x18>)
    1ca6:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1ca8:	4904      	ldr	r1, [pc, #16]	; (1cbc <SPI_HI3593_init+0x1c>)
    1caa:	4805      	ldr	r0, [pc, #20]	; (1cc0 <SPI_HI3593_init+0x20>)
    1cac:	4b05      	ldr	r3, [pc, #20]	; (1cc4 <SPI_HI3593_init+0x24>)
    1cae:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1cb0:	4b05      	ldr	r3, [pc, #20]	; (1cc8 <SPI_HI3593_init+0x28>)
    1cb2:	4798      	blx	r3
}
    1cb4:	bf00      	nop
    1cb6:	bd80      	pop	{r7, pc}
    1cb8:	00001c6d 	.word	0x00001c6d
    1cbc:	43000800 	.word	0x43000800
    1cc0:	200016d8 	.word	0x200016d8
    1cc4:	00002c41 	.word	0x00002c41
    1cc8:	00001c01 	.word	0x00001c01

00001ccc <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    1ccc:	b580      	push	{r7, lr}
    1cce:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1cd0:	2100      	movs	r1, #0
    1cd2:	2068      	movs	r0, #104	; 0x68
    1cd4:	4b07      	ldr	r3, [pc, #28]	; (1cf4 <I2C_EEPROM_PORT_init+0x28>)
    1cd6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1cd8:	4907      	ldr	r1, [pc, #28]	; (1cf8 <I2C_EEPROM_PORT_init+0x2c>)
    1cda:	2068      	movs	r0, #104	; 0x68
    1cdc:	4b07      	ldr	r3, [pc, #28]	; (1cfc <I2C_EEPROM_PORT_init+0x30>)
    1cde:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1ce0:	2100      	movs	r1, #0
    1ce2:	2069      	movs	r0, #105	; 0x69
    1ce4:	4b03      	ldr	r3, [pc, #12]	; (1cf4 <I2C_EEPROM_PORT_init+0x28>)
    1ce6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1ce8:	4905      	ldr	r1, [pc, #20]	; (1d00 <I2C_EEPROM_PORT_init+0x34>)
    1cea:	2069      	movs	r0, #105	; 0x69
    1cec:	4b03      	ldr	r3, [pc, #12]	; (1cfc <I2C_EEPROM_PORT_init+0x30>)
    1cee:	4798      	blx	r3
}
    1cf0:	bf00      	nop
    1cf2:	bd80      	pop	{r7, pc}
    1cf4:	000015dd 	.word	0x000015dd
    1cf8:	00680002 	.word	0x00680002
    1cfc:	00001611 	.word	0x00001611
    1d00:	00690002 	.word	0x00690002

00001d04 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    1d04:	b580      	push	{r7, lr}
    1d06:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d08:	2248      	movs	r2, #72	; 0x48
    1d0a:	2125      	movs	r1, #37	; 0x25
    1d0c:	4806      	ldr	r0, [pc, #24]	; (1d28 <I2C_EEPROM_CLOCK_init+0x24>)
    1d0e:	4b07      	ldr	r3, [pc, #28]	; (1d2c <I2C_EEPROM_CLOCK_init+0x28>)
    1d10:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d12:	224a      	movs	r2, #74	; 0x4a
    1d14:	2103      	movs	r1, #3
    1d16:	4804      	ldr	r0, [pc, #16]	; (1d28 <I2C_EEPROM_CLOCK_init+0x24>)
    1d18:	4b04      	ldr	r3, [pc, #16]	; (1d2c <I2C_EEPROM_CLOCK_init+0x28>)
    1d1a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1d1c:	4804      	ldr	r0, [pc, #16]	; (1d30 <I2C_EEPROM_CLOCK_init+0x2c>)
    1d1e:	4b05      	ldr	r3, [pc, #20]	; (1d34 <I2C_EEPROM_CLOCK_init+0x30>)
    1d20:	4798      	blx	r3
}
    1d22:	bf00      	nop
    1d24:	bd80      	pop	{r7, pc}
    1d26:	bf00      	nop
    1d28:	40001c00 	.word	0x40001c00
    1d2c:	00000ddd 	.word	0x00000ddd
    1d30:	40000800 	.word	0x40000800
    1d34:	000010a3 	.word	0x000010a3

00001d38 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    1d38:	b580      	push	{r7, lr}
    1d3a:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    1d3c:	4b04      	ldr	r3, [pc, #16]	; (1d50 <I2C_EEPROM_init+0x18>)
    1d3e:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    1d40:	4904      	ldr	r1, [pc, #16]	; (1d54 <I2C_EEPROM_init+0x1c>)
    1d42:	4805      	ldr	r0, [pc, #20]	; (1d58 <I2C_EEPROM_init+0x20>)
    1d44:	4b05      	ldr	r3, [pc, #20]	; (1d5c <I2C_EEPROM_init+0x24>)
    1d46:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    1d48:	4b05      	ldr	r3, [pc, #20]	; (1d60 <I2C_EEPROM_init+0x28>)
    1d4a:	4798      	blx	r3
}
    1d4c:	bf00      	nop
    1d4e:	bd80      	pop	{r7, pc}
    1d50:	00001d05 	.word	0x00001d05
    1d54:	43000c00 	.word	0x43000c00
    1d58:	20001850 	.word	0x20001850
    1d5c:	000028b5 	.word	0x000028b5
    1d60:	00001ccd 	.word	0x00001ccd

00001d64 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1d64:	b580      	push	{r7, lr}
    1d66:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1d68:	4808      	ldr	r0, [pc, #32]	; (1d8c <TIMER_USB_init+0x28>)
    1d6a:	4b09      	ldr	r3, [pc, #36]	; (1d90 <TIMER_USB_init+0x2c>)
    1d6c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d6e:	2243      	movs	r2, #67	; 0x43
    1d70:	2109      	movs	r1, #9
    1d72:	4808      	ldr	r0, [pc, #32]	; (1d94 <TIMER_USB_init+0x30>)
    1d74:	4b08      	ldr	r3, [pc, #32]	; (1d98 <TIMER_USB_init+0x34>)
    1d76:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    1d78:	4b08      	ldr	r3, [pc, #32]	; (1d9c <TIMER_USB_init+0x38>)
    1d7a:	4798      	blx	r3
    1d7c:	4603      	mov	r3, r0
    1d7e:	461a      	mov	r2, r3
    1d80:	4907      	ldr	r1, [pc, #28]	; (1da0 <TIMER_USB_init+0x3c>)
    1d82:	4808      	ldr	r0, [pc, #32]	; (1da4 <TIMER_USB_init+0x40>)
    1d84:	4b08      	ldr	r3, [pc, #32]	; (1da8 <TIMER_USB_init+0x44>)
    1d86:	4798      	blx	r3
}
    1d88:	bf00      	nop
    1d8a:	bd80      	pop	{r7, pc}
    1d8c:	40000800 	.word	0x40000800
    1d90:	00000f03 	.word	0x00000f03
    1d94:	40001c00 	.word	0x40001c00
    1d98:	00000ddd 	.word	0x00000ddd
    1d9c:	00008b8d 	.word	0x00008b8d
    1da0:	40003800 	.word	0x40003800
    1da4:	200017d0 	.word	0x200017d0
    1da8:	00002ed1 	.word	0x00002ed1

00001dac <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1dac:	b580      	push	{r7, lr}
    1dae:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1db0:	4808      	ldr	r0, [pc, #32]	; (1dd4 <TIMER_ARINC_init+0x28>)
    1db2:	4b09      	ldr	r3, [pc, #36]	; (1dd8 <TIMER_ARINC_init+0x2c>)
    1db4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1db6:	2244      	movs	r2, #68	; 0x44
    1db8:	211a      	movs	r1, #26
    1dba:	4808      	ldr	r0, [pc, #32]	; (1ddc <TIMER_ARINC_init+0x30>)
    1dbc:	4b08      	ldr	r3, [pc, #32]	; (1de0 <TIMER_ARINC_init+0x34>)
    1dbe:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1dc0:	4b08      	ldr	r3, [pc, #32]	; (1de4 <TIMER_ARINC_init+0x38>)
    1dc2:	4798      	blx	r3
    1dc4:	4603      	mov	r3, r0
    1dc6:	461a      	mov	r2, r3
    1dc8:	4907      	ldr	r1, [pc, #28]	; (1de8 <TIMER_ARINC_init+0x3c>)
    1dca:	4808      	ldr	r0, [pc, #32]	; (1dec <TIMER_ARINC_init+0x40>)
    1dcc:	4b08      	ldr	r3, [pc, #32]	; (1df0 <TIMER_ARINC_init+0x44>)
    1dce:	4798      	blx	r3
}
    1dd0:	bf00      	nop
    1dd2:	bd80      	pop	{r7, pc}
    1dd4:	40000800 	.word	0x40000800
    1dd8:	00000fc3 	.word	0x00000fc3
    1ddc:	40001c00 	.word	0x40001c00
    1de0:	00000ddd 	.word	0x00000ddd
    1de4:	00008b8d 	.word	0x00008b8d
    1de8:	4101a000 	.word	0x4101a000
    1dec:	200017b0 	.word	0x200017b0
    1df0:	00002ed1 	.word	0x00002ed1

00001df4 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    1df4:	b580      	push	{r7, lr}
    1df6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1df8:	4808      	ldr	r0, [pc, #32]	; (1e1c <TIMER_MAINTENANCE_init+0x28>)
    1dfa:	4b09      	ldr	r3, [pc, #36]	; (1e20 <TIMER_MAINTENANCE_init+0x2c>)
    1dfc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1dfe:	2246      	movs	r2, #70	; 0x46
    1e00:	211e      	movs	r1, #30
    1e02:	4808      	ldr	r0, [pc, #32]	; (1e24 <TIMER_MAINTENANCE_init+0x30>)
    1e04:	4b08      	ldr	r3, [pc, #32]	; (1e28 <TIMER_MAINTENANCE_init+0x34>)
    1e06:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1e08:	4b08      	ldr	r3, [pc, #32]	; (1e2c <TIMER_MAINTENANCE_init+0x38>)
    1e0a:	4798      	blx	r3
    1e0c:	4603      	mov	r3, r0
    1e0e:	461a      	mov	r2, r3
    1e10:	4907      	ldr	r1, [pc, #28]	; (1e30 <TIMER_MAINTENANCE_init+0x3c>)
    1e12:	4808      	ldr	r0, [pc, #32]	; (1e34 <TIMER_MAINTENANCE_init+0x40>)
    1e14:	4b08      	ldr	r3, [pc, #32]	; (1e38 <TIMER_MAINTENANCE_init+0x44>)
    1e16:	4798      	blx	r3
}
    1e18:	bf00      	nop
    1e1a:	bd80      	pop	{r7, pc}
    1e1c:	40000800 	.word	0x40000800
    1e20:	00000fe3 	.word	0x00000fe3
    1e24:	40001c00 	.word	0x40001c00
    1e28:	00000ddd 	.word	0x00000ddd
    1e2c:	00008b8d 	.word	0x00008b8d
    1e30:	42001400 	.word	0x42001400
    1e34:	20001708 	.word	0x20001708
    1e38:	00002ed1 	.word	0x00002ed1

00001e3c <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1e3c:	b580      	push	{r7, lr}
    1e3e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1e40:	4808      	ldr	r0, [pc, #32]	; (1e64 <TIMER_INTERFACE_init+0x28>)
    1e42:	4b09      	ldr	r3, [pc, #36]	; (1e68 <TIMER_INTERFACE_init+0x2c>)
    1e44:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e46:	2246      	movs	r2, #70	; 0x46
    1e48:	211e      	movs	r1, #30
    1e4a:	4808      	ldr	r0, [pc, #32]	; (1e6c <TIMER_INTERFACE_init+0x30>)
    1e4c:	4b08      	ldr	r3, [pc, #32]	; (1e70 <TIMER_INTERFACE_init+0x34>)
    1e4e:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1e50:	4b08      	ldr	r3, [pc, #32]	; (1e74 <TIMER_INTERFACE_init+0x38>)
    1e52:	4798      	blx	r3
    1e54:	4603      	mov	r3, r0
    1e56:	461a      	mov	r2, r3
    1e58:	4907      	ldr	r1, [pc, #28]	; (1e78 <TIMER_INTERFACE_init+0x3c>)
    1e5a:	4808      	ldr	r0, [pc, #32]	; (1e7c <TIMER_INTERFACE_init+0x40>)
    1e5c:	4b08      	ldr	r3, [pc, #32]	; (1e80 <TIMER_INTERFACE_init+0x44>)
    1e5e:	4798      	blx	r3
}
    1e60:	bf00      	nop
    1e62:	bd80      	pop	{r7, pc}
    1e64:	40000800 	.word	0x40000800
    1e68:	00001003 	.word	0x00001003
    1e6c:	40001c00 	.word	0x40001c00
    1e70:	00000ddd 	.word	0x00000ddd
    1e74:	00008b8d 	.word	0x00008b8d
    1e78:	42001800 	.word	0x42001800
    1e7c:	2000174c 	.word	0x2000174c
    1e80:	00002ed1 	.word	0x00002ed1

00001e84 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1e84:	b580      	push	{r7, lr}
    1e86:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    1e88:	4808      	ldr	r0, [pc, #32]	; (1eac <TIMER_EVENT_init+0x28>)
    1e8a:	4b09      	ldr	r3, [pc, #36]	; (1eb0 <TIMER_EVENT_init+0x2c>)
    1e8c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e8e:	2246      	movs	r2, #70	; 0x46
    1e90:	2127      	movs	r1, #39	; 0x27
    1e92:	4808      	ldr	r0, [pc, #32]	; (1eb4 <TIMER_EVENT_init+0x30>)
    1e94:	4b08      	ldr	r3, [pc, #32]	; (1eb8 <TIMER_EVENT_init+0x34>)
    1e96:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    1e98:	4b08      	ldr	r3, [pc, #32]	; (1ebc <TIMER_EVENT_init+0x38>)
    1e9a:	4798      	blx	r3
    1e9c:	4603      	mov	r3, r0
    1e9e:	461a      	mov	r2, r3
    1ea0:	4907      	ldr	r1, [pc, #28]	; (1ec0 <TIMER_EVENT_init+0x3c>)
    1ea2:	4808      	ldr	r0, [pc, #32]	; (1ec4 <TIMER_EVENT_init+0x40>)
    1ea4:	4b08      	ldr	r3, [pc, #32]	; (1ec8 <TIMER_EVENT_init+0x44>)
    1ea6:	4798      	blx	r3
}
    1ea8:	bf00      	nop
    1eaa:	bd80      	pop	{r7, pc}
    1eac:	40000800 	.word	0x40000800
    1eb0:	000010c3 	.word	0x000010c3
    1eb4:	40001c00 	.word	0x40001c00
    1eb8:	00000ddd 	.word	0x00000ddd
    1ebc:	00008b8d 	.word	0x00008b8d
    1ec0:	43001400 	.word	0x43001400
    1ec4:	2000172c 	.word	0x2000172c
    1ec8:	00002ed1 	.word	0x00002ed1

00001ecc <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1ecc:	b480      	push	{r7}
    1ece:	af00      	add	r7, sp, #0
}
    1ed0:	bf00      	nop
    1ed2:	46bd      	mov	sp, r7
    1ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ed8:	4770      	bx	lr
	...

00001edc <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1edc:	b580      	push	{r7, lr}
    1ede:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1ee0:	4804      	ldr	r0, [pc, #16]	; (1ef4 <LIVE_PULSE_CLOCK_init+0x18>)
    1ee2:	4b05      	ldr	r3, [pc, #20]	; (1ef8 <LIVE_PULSE_CLOCK_init+0x1c>)
    1ee4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ee6:	2240      	movs	r2, #64	; 0x40
    1ee8:	2127      	movs	r1, #39	; 0x27
    1eea:	4804      	ldr	r0, [pc, #16]	; (1efc <LIVE_PULSE_CLOCK_init+0x20>)
    1eec:	4b04      	ldr	r3, [pc, #16]	; (1f00 <LIVE_PULSE_CLOCK_init+0x24>)
    1eee:	4798      	blx	r3
}
    1ef0:	bf00      	nop
    1ef2:	bd80      	pop	{r7, pc}
    1ef4:	40000800 	.word	0x40000800
    1ef8:	000010e3 	.word	0x000010e3
    1efc:	40001c00 	.word	0x40001c00
    1f00:	00000ddd 	.word	0x00000ddd

00001f04 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1f04:	b580      	push	{r7, lr}
    1f06:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1f08:	4b06      	ldr	r3, [pc, #24]	; (1f24 <LIVE_PULSE_init+0x20>)
    1f0a:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1f0c:	4b06      	ldr	r3, [pc, #24]	; (1f28 <LIVE_PULSE_init+0x24>)
    1f0e:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1f10:	4b06      	ldr	r3, [pc, #24]	; (1f2c <LIVE_PULSE_init+0x28>)
    1f12:	4798      	blx	r3
    1f14:	4603      	mov	r3, r0
    1f16:	461a      	mov	r2, r3
    1f18:	4905      	ldr	r1, [pc, #20]	; (1f30 <LIVE_PULSE_init+0x2c>)
    1f1a:	4806      	ldr	r0, [pc, #24]	; (1f34 <LIVE_PULSE_init+0x30>)
    1f1c:	4b06      	ldr	r3, [pc, #24]	; (1f38 <LIVE_PULSE_init+0x34>)
    1f1e:	4798      	blx	r3
}
    1f20:	bf00      	nop
    1f22:	bd80      	pop	{r7, pc}
    1f24:	00001edd 	.word	0x00001edd
    1f28:	00001ecd 	.word	0x00001ecd
    1f2c:	00008ba1 	.word	0x00008ba1
    1f30:	43001800 	.word	0x43001800
    1f34:	2000176c 	.word	0x2000176c
    1f38:	00002a85 	.word	0x00002a85

00001f3c <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    1f3c:	b580      	push	{r7, lr}
    1f3e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    1f40:	4804      	ldr	r0, [pc, #16]	; (1f54 <TIMER_HVAC_CLOCK_init+0x18>)
    1f42:	4b05      	ldr	r3, [pc, #20]	; (1f58 <TIMER_HVAC_CLOCK_init+0x1c>)
    1f44:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f46:	2244      	movs	r2, #68	; 0x44
    1f48:	2119      	movs	r1, #25
    1f4a:	4804      	ldr	r0, [pc, #16]	; (1f5c <TIMER_HVAC_CLOCK_init+0x20>)
    1f4c:	4b04      	ldr	r3, [pc, #16]	; (1f60 <TIMER_HVAC_CLOCK_init+0x24>)
    1f4e:	4798      	blx	r3
}
    1f50:	bf00      	nop
    1f52:	bd80      	pop	{r7, pc}
    1f54:	40000800 	.word	0x40000800
    1f58:	00000f83 	.word	0x00000f83
    1f5c:	40001c00 	.word	0x40001c00
    1f60:	00000ddd 	.word	0x00000ddd

00001f64 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    1f64:	b580      	push	{r7, lr}
    1f66:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    1f68:	4b05      	ldr	r3, [pc, #20]	; (1f80 <TIMER_HVAC_init+0x1c>)
    1f6a:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    1f6c:	4b05      	ldr	r3, [pc, #20]	; (1f84 <TIMER_HVAC_init+0x20>)
    1f6e:	4798      	blx	r3
    1f70:	4603      	mov	r3, r0
    1f72:	461a      	mov	r2, r3
    1f74:	4904      	ldr	r1, [pc, #16]	; (1f88 <TIMER_HVAC_init+0x24>)
    1f76:	4805      	ldr	r0, [pc, #20]	; (1f8c <TIMER_HVAC_init+0x28>)
    1f78:	4b05      	ldr	r3, [pc, #20]	; (1f90 <TIMER_HVAC_init+0x2c>)
    1f7a:	4798      	blx	r3
}
    1f7c:	bf00      	nop
    1f7e:	bd80      	pop	{r7, pc}
    1f80:	00001f3d 	.word	0x00001f3d
    1f84:	00007f8d 	.word	0x00007f8d
    1f88:	41016000 	.word	0x41016000
    1f8c:	20001830 	.word	0x20001830
    1f90:	00002ed1 	.word	0x00002ed1

00001f94 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    1f94:	b580      	push	{r7, lr}
    1f96:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    1f98:	4804      	ldr	r0, [pc, #16]	; (1fac <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    1f9a:	4b05      	ldr	r3, [pc, #20]	; (1fb0 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    1f9c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f9e:	2244      	movs	r2, #68	; 0x44
    1fa0:	2119      	movs	r1, #25
    1fa2:	4804      	ldr	r0, [pc, #16]	; (1fb4 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    1fa4:	4b04      	ldr	r3, [pc, #16]	; (1fb8 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    1fa6:	4798      	blx	r3
}
    1fa8:	bf00      	nop
    1faa:	bd80      	pop	{r7, pc}
    1fac:	40000800 	.word	0x40000800
    1fb0:	00000fa3 	.word	0x00000fa3
    1fb4:	40001c00 	.word	0x40001c00
    1fb8:	00000ddd 	.word	0x00000ddd

00001fbc <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    1fbc:	b580      	push	{r7, lr}
    1fbe:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    1fc0:	4b05      	ldr	r3, [pc, #20]	; (1fd8 <TIMER_TEMPERATURES_init+0x1c>)
    1fc2:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    1fc4:	4b05      	ldr	r3, [pc, #20]	; (1fdc <TIMER_TEMPERATURES_init+0x20>)
    1fc6:	4798      	blx	r3
    1fc8:	4603      	mov	r3, r0
    1fca:	461a      	mov	r2, r3
    1fcc:	4904      	ldr	r1, [pc, #16]	; (1fe0 <TIMER_TEMPERATURES_init+0x24>)
    1fce:	4805      	ldr	r0, [pc, #20]	; (1fe4 <TIMER_TEMPERATURES_init+0x28>)
    1fd0:	4b05      	ldr	r3, [pc, #20]	; (1fe8 <TIMER_TEMPERATURES_init+0x2c>)
    1fd2:	4798      	blx	r3
}
    1fd4:	bf00      	nop
    1fd6:	bd80      	pop	{r7, pc}
    1fd8:	00001f95 	.word	0x00001f95
    1fdc:	00007f8d 	.word	0x00007f8d
    1fe0:	41018000 	.word	0x41018000
    1fe4:	200016b8 	.word	0x200016b8
    1fe8:	00002ed1 	.word	0x00002ed1

00001fec <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1fec:	b580      	push	{r7, lr}
    1fee:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1ff0:	2102      	movs	r1, #2
    1ff2:	2018      	movs	r0, #24
    1ff4:	4b0f      	ldr	r3, [pc, #60]	; (2034 <CDCUSB_PORT_init+0x48>)
    1ff6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1ff8:	2100      	movs	r1, #0
    1ffa:	2018      	movs	r0, #24
    1ffc:	4b0e      	ldr	r3, [pc, #56]	; (2038 <CDCUSB_PORT_init+0x4c>)
    1ffe:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    2000:	2100      	movs	r1, #0
    2002:	2018      	movs	r0, #24
    2004:	4b0d      	ldr	r3, [pc, #52]	; (203c <CDCUSB_PORT_init+0x50>)
    2006:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    2008:	490d      	ldr	r1, [pc, #52]	; (2040 <CDCUSB_PORT_init+0x54>)
    200a:	2018      	movs	r0, #24
    200c:	4b0d      	ldr	r3, [pc, #52]	; (2044 <CDCUSB_PORT_init+0x58>)
    200e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    2010:	2102      	movs	r1, #2
    2012:	2019      	movs	r0, #25
    2014:	4b07      	ldr	r3, [pc, #28]	; (2034 <CDCUSB_PORT_init+0x48>)
    2016:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    2018:	2100      	movs	r1, #0
    201a:	2019      	movs	r0, #25
    201c:	4b06      	ldr	r3, [pc, #24]	; (2038 <CDCUSB_PORT_init+0x4c>)
    201e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    2020:	2100      	movs	r1, #0
    2022:	2019      	movs	r0, #25
    2024:	4b05      	ldr	r3, [pc, #20]	; (203c <CDCUSB_PORT_init+0x50>)
    2026:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    2028:	4907      	ldr	r1, [pc, #28]	; (2048 <CDCUSB_PORT_init+0x5c>)
    202a:	2019      	movs	r0, #25
    202c:	4b05      	ldr	r3, [pc, #20]	; (2044 <CDCUSB_PORT_init+0x58>)
    202e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    2030:	bf00      	nop
    2032:	bd80      	pop	{r7, pc}
    2034:	00001631 	.word	0x00001631
    2038:	00001669 	.word	0x00001669
    203c:	000015dd 	.word	0x000015dd
    2040:	00180007 	.word	0x00180007
    2044:	00001611 	.word	0x00001611
    2048:	00190007 	.word	0x00190007

0000204c <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    204c:	b580      	push	{r7, lr}
    204e:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    2050:	2242      	movs	r2, #66	; 0x42
    2052:	210a      	movs	r1, #10
    2054:	4805      	ldr	r0, [pc, #20]	; (206c <CDCUSB_CLOCK_init+0x20>)
    2056:	4b06      	ldr	r3, [pc, #24]	; (2070 <CDCUSB_CLOCK_init+0x24>)
    2058:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    205a:	4806      	ldr	r0, [pc, #24]	; (2074 <CDCUSB_CLOCK_init+0x28>)
    205c:	4b06      	ldr	r3, [pc, #24]	; (2078 <CDCUSB_CLOCK_init+0x2c>)
    205e:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    2060:	4804      	ldr	r0, [pc, #16]	; (2074 <CDCUSB_CLOCK_init+0x28>)
    2062:	4b06      	ldr	r3, [pc, #24]	; (207c <CDCUSB_CLOCK_init+0x30>)
    2064:	4798      	blx	r3
}
    2066:	bf00      	nop
    2068:	bd80      	pop	{r7, pc}
    206a:	bf00      	nop
    206c:	40001c00 	.word	0x40001c00
    2070:	00000ddd 	.word	0x00000ddd
    2074:	40000800 	.word	0x40000800
    2078:	00000e03 	.word	0x00000e03
    207c:	00000f23 	.word	0x00000f23

00002080 <CDCUSB_init>:

void CDCUSB_init(void)
{
    2080:	b580      	push	{r7, lr}
    2082:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    2084:	4b03      	ldr	r3, [pc, #12]	; (2094 <CDCUSB_init+0x14>)
    2086:	4798      	blx	r3
	usb_d_init();
    2088:	4b03      	ldr	r3, [pc, #12]	; (2098 <CDCUSB_init+0x18>)
    208a:	4798      	blx	r3
	CDCUSB_PORT_init();
    208c:	4b03      	ldr	r3, [pc, #12]	; (209c <CDCUSB_init+0x1c>)
    208e:	4798      	blx	r3
}
    2090:	bf00      	nop
    2092:	bd80      	pop	{r7, pc}
    2094:	0000204d 	.word	0x0000204d
    2098:	0000372d 	.word	0x0000372d
    209c:	00001fed 	.word	0x00001fed

000020a0 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    20a0:	b580      	push	{r7, lr}
    20a2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    20a4:	4802      	ldr	r0, [pc, #8]	; (20b0 <WATCHDOG_CLOCK_init+0x10>)
    20a6:	4b03      	ldr	r3, [pc, #12]	; (20b4 <WATCHDOG_CLOCK_init+0x14>)
    20a8:	4798      	blx	r3
}
    20aa:	bf00      	nop
    20ac:	bd80      	pop	{r7, pc}
    20ae:	bf00      	nop
    20b0:	40000800 	.word	0x40000800
    20b4:	00000e83 	.word	0x00000e83

000020b8 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    20b8:	b580      	push	{r7, lr}
    20ba:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    20bc:	4b03      	ldr	r3, [pc, #12]	; (20cc <WATCHDOG_init+0x14>)
    20be:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    20c0:	4903      	ldr	r1, [pc, #12]	; (20d0 <WATCHDOG_init+0x18>)
    20c2:	4804      	ldr	r0, [pc, #16]	; (20d4 <WATCHDOG_init+0x1c>)
    20c4:	4b04      	ldr	r3, [pc, #16]	; (20d8 <WATCHDOG_init+0x20>)
    20c6:	4798      	blx	r3
}
    20c8:	bf00      	nop
    20ca:	bd80      	pop	{r7, pc}
    20cc:	000020a1 	.word	0x000020a1
    20d0:	40002000 	.word	0x40002000
    20d4:	200018b0 	.word	0x200018b0
    20d8:	000016b1 	.word	0x000016b1

000020dc <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    20dc:	b580      	push	{r7, lr}
    20de:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    20e0:	4904      	ldr	r1, [pc, #16]	; (20f4 <CAN_CCU_PORT_init+0x18>)
    20e2:	202d      	movs	r0, #45	; 0x2d
    20e4:	4b04      	ldr	r3, [pc, #16]	; (20f8 <CAN_CCU_PORT_init+0x1c>)
    20e6:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    20e8:	4904      	ldr	r1, [pc, #16]	; (20fc <CAN_CCU_PORT_init+0x20>)
    20ea:	202c      	movs	r0, #44	; 0x2c
    20ec:	4b02      	ldr	r3, [pc, #8]	; (20f8 <CAN_CCU_PORT_init+0x1c>)
    20ee:	4798      	blx	r3
}
    20f0:	bf00      	nop
    20f2:	bd80      	pop	{r7, pc}
    20f4:	002d0007 	.word	0x002d0007
    20f8:	00001611 	.word	0x00001611
    20fc:	002c0007 	.word	0x002c0007

00002100 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    2100:	b580      	push	{r7, lr}
    2102:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    2104:	4807      	ldr	r0, [pc, #28]	; (2124 <CAN_CCU_init+0x24>)
    2106:	4b08      	ldr	r3, [pc, #32]	; (2128 <CAN_CCU_init+0x28>)
    2108:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    210a:	2243      	movs	r2, #67	; 0x43
    210c:	211c      	movs	r1, #28
    210e:	4807      	ldr	r0, [pc, #28]	; (212c <CAN_CCU_init+0x2c>)
    2110:	4b07      	ldr	r3, [pc, #28]	; (2130 <CAN_CCU_init+0x30>)
    2112:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    2114:	4907      	ldr	r1, [pc, #28]	; (2134 <CAN_CCU_init+0x34>)
    2116:	4808      	ldr	r0, [pc, #32]	; (2138 <CAN_CCU_init+0x38>)
    2118:	4b08      	ldr	r3, [pc, #32]	; (213c <CAN_CCU_init+0x3c>)
    211a:	4798      	blx	r3
	CAN_CCU_PORT_init();
    211c:	4b08      	ldr	r3, [pc, #32]	; (2140 <CAN_CCU_init+0x40>)
    211e:	4798      	blx	r3
}
    2120:	bf00      	nop
    2122:	bd80      	pop	{r7, pc}
    2124:	40000800 	.word	0x40000800
    2128:	00000e43 	.word	0x00000e43
    212c:	40001c00 	.word	0x40001c00
    2130:	00000ddd 	.word	0x00000ddd
    2134:	42000400 	.word	0x42000400
    2138:	20001788 	.word	0x20001788
    213c:	0000239d 	.word	0x0000239d
    2140:	000020dd 	.word	0x000020dd

00002144 <system_init>:

void system_init(void)
{
    2144:	b580      	push	{r7, lr}
    2146:	af00      	add	r7, sp, #0
	init_mcu();
    2148:	4b5e      	ldr	r3, [pc, #376]	; (22c4 <system_init+0x180>)
    214a:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    214c:	2100      	movs	r1, #0
    214e:	2007      	movs	r0, #7
    2150:	4b5d      	ldr	r3, [pc, #372]	; (22c8 <system_init+0x184>)
    2152:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    2154:	2102      	movs	r1, #2
    2156:	2007      	movs	r0, #7
    2158:	4b5c      	ldr	r3, [pc, #368]	; (22cc <system_init+0x188>)
    215a:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    215c:	f04f 31ff 	mov.w	r1, #4294967295
    2160:	2007      	movs	r0, #7
    2162:	4b5b      	ldr	r3, [pc, #364]	; (22d0 <system_init+0x18c>)
    2164:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    2166:	2101      	movs	r1, #1
    2168:	200f      	movs	r0, #15
    216a:	4b57      	ldr	r3, [pc, #348]	; (22c8 <system_init+0x184>)
    216c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    216e:	2102      	movs	r1, #2
    2170:	200f      	movs	r0, #15
    2172:	4b56      	ldr	r3, [pc, #344]	; (22cc <system_init+0x188>)
    2174:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    2176:	f04f 31ff 	mov.w	r1, #4294967295
    217a:	200f      	movs	r0, #15
    217c:	4b54      	ldr	r3, [pc, #336]	; (22d0 <system_init+0x18c>)
    217e:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    2180:	2101      	movs	r1, #1
    2182:	2013      	movs	r0, #19
    2184:	4b50      	ldr	r3, [pc, #320]	; (22c8 <system_init+0x184>)
    2186:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    2188:	2102      	movs	r1, #2
    218a:	2013      	movs	r0, #19
    218c:	4b4f      	ldr	r3, [pc, #316]	; (22cc <system_init+0x188>)
    218e:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    2190:	f04f 31ff 	mov.w	r1, #4294967295
    2194:	2013      	movs	r0, #19
    2196:	4b4e      	ldr	r3, [pc, #312]	; (22d0 <system_init+0x18c>)
    2198:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    219a:	2101      	movs	r1, #1
    219c:	201b      	movs	r0, #27
    219e:	4b4a      	ldr	r3, [pc, #296]	; (22c8 <system_init+0x184>)
    21a0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    21a2:	2102      	movs	r1, #2
    21a4:	201b      	movs	r0, #27
    21a6:	4b49      	ldr	r3, [pc, #292]	; (22cc <system_init+0x188>)
    21a8:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    21aa:	f04f 31ff 	mov.w	r1, #4294967295
    21ae:	201b      	movs	r0, #27
    21b0:	4b47      	ldr	r3, [pc, #284]	; (22d0 <system_init+0x18c>)
    21b2:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    21b4:	2101      	movs	r1, #1
    21b6:	2027      	movs	r0, #39	; 0x27
    21b8:	4b43      	ldr	r3, [pc, #268]	; (22c8 <system_init+0x184>)
    21ba:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    21bc:	2102      	movs	r1, #2
    21be:	2027      	movs	r0, #39	; 0x27
    21c0:	4b42      	ldr	r3, [pc, #264]	; (22cc <system_init+0x188>)
    21c2:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    21c4:	f04f 31ff 	mov.w	r1, #4294967295
    21c8:	2027      	movs	r0, #39	; 0x27
    21ca:	4b41      	ldr	r3, [pc, #260]	; (22d0 <system_init+0x18c>)
    21cc:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    21ce:	2101      	movs	r1, #1
    21d0:	203d      	movs	r0, #61	; 0x3d
    21d2:	4b3d      	ldr	r3, [pc, #244]	; (22c8 <system_init+0x184>)
    21d4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    21d6:	2102      	movs	r1, #2
    21d8:	203d      	movs	r0, #61	; 0x3d
    21da:	4b3c      	ldr	r3, [pc, #240]	; (22cc <system_init+0x188>)
    21dc:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    21de:	f04f 31ff 	mov.w	r1, #4294967295
    21e2:	203d      	movs	r0, #61	; 0x3d
    21e4:	4b3a      	ldr	r3, [pc, #232]	; (22d0 <system_init+0x18c>)
    21e6:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    21e8:	2101      	movs	r1, #1
    21ea:	203f      	movs	r0, #63	; 0x3f
    21ec:	4b37      	ldr	r3, [pc, #220]	; (22cc <system_init+0x188>)
    21ee:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    21f0:	2101      	movs	r1, #1
    21f2:	203f      	movs	r0, #63	; 0x3f
    21f4:	4b37      	ldr	r3, [pc, #220]	; (22d4 <system_init+0x190>)
    21f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    21f8:	f04f 31ff 	mov.w	r1, #4294967295
    21fc:	203f      	movs	r0, #63	; 0x3f
    21fe:	4b34      	ldr	r3, [pc, #208]	; (22d0 <system_init+0x18c>)
    2200:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    2202:	2100      	movs	r1, #0
    2204:	204d      	movs	r0, #77	; 0x4d
    2206:	4b30      	ldr	r3, [pc, #192]	; (22c8 <system_init+0x184>)
    2208:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    220a:	2102      	movs	r1, #2
    220c:	204d      	movs	r0, #77	; 0x4d
    220e:	4b2f      	ldr	r3, [pc, #188]	; (22cc <system_init+0x188>)
    2210:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    2212:	f04f 31ff 	mov.w	r1, #4294967295
    2216:	204d      	movs	r0, #77	; 0x4d
    2218:	4b2d      	ldr	r3, [pc, #180]	; (22d0 <system_init+0x18c>)
    221a:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    221c:	2101      	movs	r1, #1
    221e:	204e      	movs	r0, #78	; 0x4e
    2220:	4b29      	ldr	r3, [pc, #164]	; (22c8 <system_init+0x184>)
    2222:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    2224:	2102      	movs	r1, #2
    2226:	204e      	movs	r0, #78	; 0x4e
    2228:	4b28      	ldr	r3, [pc, #160]	; (22cc <system_init+0x188>)
    222a:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    222c:	f04f 31ff 	mov.w	r1, #4294967295
    2230:	204e      	movs	r0, #78	; 0x4e
    2232:	4b27      	ldr	r3, [pc, #156]	; (22d0 <system_init+0x18c>)
    2234:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    2236:	2100      	movs	r1, #0
    2238:	204f      	movs	r0, #79	; 0x4f
    223a:	4b23      	ldr	r3, [pc, #140]	; (22c8 <system_init+0x184>)
    223c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    223e:	2102      	movs	r1, #2
    2240:	204f      	movs	r0, #79	; 0x4f
    2242:	4b22      	ldr	r3, [pc, #136]	; (22cc <system_init+0x188>)
    2244:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    2246:	f04f 31ff 	mov.w	r1, #4294967295
    224a:	204f      	movs	r0, #79	; 0x4f
    224c:	4b20      	ldr	r3, [pc, #128]	; (22d0 <system_init+0x18c>)
    224e:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    2250:	2100      	movs	r1, #0
    2252:	2052      	movs	r0, #82	; 0x52
    2254:	4b1c      	ldr	r3, [pc, #112]	; (22c8 <system_init+0x184>)
    2256:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    2258:	2102      	movs	r1, #2
    225a:	2052      	movs	r0, #82	; 0x52
    225c:	4b1b      	ldr	r3, [pc, #108]	; (22cc <system_init+0x188>)
    225e:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    2260:	f04f 31ff 	mov.w	r1, #4294967295
    2264:	2052      	movs	r0, #82	; 0x52
    2266:	4b1a      	ldr	r3, [pc, #104]	; (22d0 <system_init+0x18c>)
    2268:	4798      	blx	r3

	CRC_CALC_init();
    226a:	4b1b      	ldr	r3, [pc, #108]	; (22d8 <system_init+0x194>)
    226c:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    226e:	4b1b      	ldr	r3, [pc, #108]	; (22dc <system_init+0x198>)
    2270:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    2272:	4b1b      	ldr	r3, [pc, #108]	; (22e0 <system_init+0x19c>)
    2274:	4798      	blx	r3

	QSPI_N25Q256_init();
    2276:	4b1b      	ldr	r3, [pc, #108]	; (22e4 <system_init+0x1a0>)
    2278:	4798      	blx	r3

	DATETIME_CLOCK_init();
    227a:	4b1b      	ldr	r3, [pc, #108]	; (22e8 <system_init+0x1a4>)
    227c:	4798      	blx	r3

	I2C_SHARED_init();
    227e:	4b1b      	ldr	r3, [pc, #108]	; (22ec <system_init+0x1a8>)
    2280:	4798      	blx	r3

	SPI_TEMP_init();
    2282:	4b1b      	ldr	r3, [pc, #108]	; (22f0 <system_init+0x1ac>)
    2284:	4798      	blx	r3

	I2C_EXPANDER_init();
    2286:	4b1b      	ldr	r3, [pc, #108]	; (22f4 <system_init+0x1b0>)
    2288:	4798      	blx	r3

	SPI_HI3593_init();
    228a:	4b1b      	ldr	r3, [pc, #108]	; (22f8 <system_init+0x1b4>)
    228c:	4798      	blx	r3

	I2C_EEPROM_init();
    228e:	4b1b      	ldr	r3, [pc, #108]	; (22fc <system_init+0x1b8>)
    2290:	4798      	blx	r3

	TIMER_USB_init();
    2292:	4b1b      	ldr	r3, [pc, #108]	; (2300 <system_init+0x1bc>)
    2294:	4798      	blx	r3
	TIMER_ARINC_init();
    2296:	4b1b      	ldr	r3, [pc, #108]	; (2304 <system_init+0x1c0>)
    2298:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    229a:	4b1b      	ldr	r3, [pc, #108]	; (2308 <system_init+0x1c4>)
    229c:	4798      	blx	r3
	TIMER_INTERFACE_init();
    229e:	4b1b      	ldr	r3, [pc, #108]	; (230c <system_init+0x1c8>)
    22a0:	4798      	blx	r3
	TIMER_EVENT_init();
    22a2:	4b1b      	ldr	r3, [pc, #108]	; (2310 <system_init+0x1cc>)
    22a4:	4798      	blx	r3
	LIVE_PULSE_init();
    22a6:	4b1b      	ldr	r3, [pc, #108]	; (2314 <system_init+0x1d0>)
    22a8:	4798      	blx	r3

	TIMER_HVAC_init();
    22aa:	4b1b      	ldr	r3, [pc, #108]	; (2318 <system_init+0x1d4>)
    22ac:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    22ae:	4b1b      	ldr	r3, [pc, #108]	; (231c <system_init+0x1d8>)
    22b0:	4798      	blx	r3

	CDCUSB_init();
    22b2:	4b1b      	ldr	r3, [pc, #108]	; (2320 <system_init+0x1dc>)
    22b4:	4798      	blx	r3

	WATCHDOG_init();
    22b6:	4b1b      	ldr	r3, [pc, #108]	; (2324 <system_init+0x1e0>)
    22b8:	4798      	blx	r3
	CAN_CCU_init();
    22ba:	4b1b      	ldr	r3, [pc, #108]	; (2328 <system_init+0x1e4>)
    22bc:	4798      	blx	r3
}
    22be:	bf00      	nop
    22c0:	bd80      	pop	{r7, pc}
    22c2:	bf00      	nop
    22c4:	000016a1 	.word	0x000016a1
    22c8:	00001669 	.word	0x00001669
    22cc:	00001631 	.word	0x00001631
    22d0:	00001611 	.word	0x00001611
    22d4:	000015dd 	.word	0x000015dd
    22d8:	00001701 	.word	0x00001701
    22dc:	0000172d 	.word	0x0000172d
    22e0:	00001855 	.word	0x00001855
    22e4:	0000199d 	.word	0x0000199d
    22e8:	000019e1 	.word	0x000019e1
    22ec:	00001a71 	.word	0x00001a71
    22f0:	00001b3d 	.word	0x00001b3d
    22f4:	00001bd5 	.word	0x00001bd5
    22f8:	00001ca1 	.word	0x00001ca1
    22fc:	00001d39 	.word	0x00001d39
    2300:	00001d65 	.word	0x00001d65
    2304:	00001dad 	.word	0x00001dad
    2308:	00001df5 	.word	0x00001df5
    230c:	00001e3d 	.word	0x00001e3d
    2310:	00001e85 	.word	0x00001e85
    2314:	00001f05 	.word	0x00001f05
    2318:	00001f65 	.word	0x00001f65
    231c:	00001fbd 	.word	0x00001fbd
    2320:	00002081 	.word	0x00002081
    2324:	000020b9 	.word	0x000020b9
    2328:	00002101 	.word	0x00002101

0000232c <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    232c:	b580      	push	{r7, lr}
    232e:	b084      	sub	sp, #16
    2330:	af00      	add	r7, sp, #0
    2332:	6078      	str	r0, [r7, #4]
    2334:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    2336:	2300      	movs	r3, #0
    2338:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    233a:	687b      	ldr	r3, [r7, #4]
    233c:	2b00      	cmp	r3, #0
    233e:	bf14      	ite	ne
    2340:	2301      	movne	r3, #1
    2342:	2300      	moveq	r3, #0
    2344:	b2db      	uxtb	r3, r3
    2346:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    234a:	4911      	ldr	r1, [pc, #68]	; (2390 <calendar_init+0x64>)
    234c:	4618      	mov	r0, r3
    234e:	4b11      	ldr	r3, [pc, #68]	; (2394 <calendar_init+0x68>)
    2350:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    2352:	687b      	ldr	r3, [r7, #4]
    2354:	681a      	ldr	r2, [r3, #0]
    2356:	683b      	ldr	r3, [r7, #0]
    2358:	429a      	cmp	r2, r3
    235a:	d101      	bne.n	2360 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    235c:	2300      	movs	r3, #0
    235e:	e013      	b.n	2388 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    2360:	687b      	ldr	r3, [r7, #4]
    2362:	681b      	ldr	r3, [r3, #0]
    2364:	2b00      	cmp	r3, #0
    2366:	d002      	beq.n	236e <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    2368:	f06f 0311 	mvn.w	r3, #17
    236c:	e00c      	b.n	2388 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    236e:	687b      	ldr	r3, [r7, #4]
    2370:	683a      	ldr	r2, [r7, #0]
    2372:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    2374:	687b      	ldr	r3, [r7, #4]
    2376:	4618      	mov	r0, r3
    2378:	4b07      	ldr	r3, [pc, #28]	; (2398 <calendar_init+0x6c>)
    237a:	4798      	blx	r3
    237c:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    237e:	687b      	ldr	r3, [r7, #4]
    2380:	f240 72b2 	movw	r2, #1970	; 0x7b2
    2384:	619a      	str	r2, [r3, #24]

	return ret;
    2386:	68fb      	ldr	r3, [r7, #12]
}
    2388:	4618      	mov	r0, r3
    238a:	3710      	adds	r7, #16
    238c:	46bd      	mov	sp, r7
    238e:	bd80      	pop	{r7, pc}
    2390:	00010e78 	.word	0x00010e78
    2394:	00003cd5 	.word	0x00003cd5
    2398:	00006081 	.word	0x00006081

0000239c <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    239c:	b580      	push	{r7, lr}
    239e:	b084      	sub	sp, #16
    23a0:	af00      	add	r7, sp, #0
    23a2:	6078      	str	r0, [r7, #4]
    23a4:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    23a6:	687b      	ldr	r3, [r7, #4]
    23a8:	2b00      	cmp	r3, #0
    23aa:	d004      	beq.n	23b6 <can_async_init+0x1a>
    23ac:	683b      	ldr	r3, [r7, #0]
    23ae:	2b00      	cmp	r3, #0
    23b0:	d001      	beq.n	23b6 <can_async_init+0x1a>
    23b2:	2301      	movs	r3, #1
    23b4:	e000      	b.n	23b8 <can_async_init+0x1c>
    23b6:	2300      	movs	r3, #0
    23b8:	f003 0301 	and.w	r3, r3, #1
    23bc:	b2db      	uxtb	r3, r3
    23be:	2241      	movs	r2, #65	; 0x41
    23c0:	490e      	ldr	r1, [pc, #56]	; (23fc <can_async_init+0x60>)
    23c2:	4618      	mov	r0, r3
    23c4:	4b0e      	ldr	r3, [pc, #56]	; (2400 <can_async_init+0x64>)
    23c6:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    23c8:	687b      	ldr	r3, [r7, #4]
    23ca:	6839      	ldr	r1, [r7, #0]
    23cc:	4618      	mov	r0, r3
    23ce:	4b0d      	ldr	r3, [pc, #52]	; (2404 <can_async_init+0x68>)
    23d0:	4798      	blx	r3
    23d2:	60f8      	str	r0, [r7, #12]
	if (rc) {
    23d4:	68fb      	ldr	r3, [r7, #12]
    23d6:	2b00      	cmp	r3, #0
    23d8:	d001      	beq.n	23de <can_async_init+0x42>
		return rc;
    23da:	68fb      	ldr	r3, [r7, #12]
    23dc:	e009      	b.n	23f2 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    23de:	687b      	ldr	r3, [r7, #4]
    23e0:	4a09      	ldr	r2, [pc, #36]	; (2408 <can_async_init+0x6c>)
    23e2:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    23e4:	687b      	ldr	r3, [r7, #4]
    23e6:	4a09      	ldr	r2, [pc, #36]	; (240c <can_async_init+0x70>)
    23e8:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    23ea:	687b      	ldr	r3, [r7, #4]
    23ec:	4a08      	ldr	r2, [pc, #32]	; (2410 <can_async_init+0x74>)
    23ee:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    23f0:	2300      	movs	r3, #0
}
    23f2:	4618      	mov	r0, r3
    23f4:	3710      	adds	r7, #16
    23f6:	46bd      	mov	sp, r7
    23f8:	bd80      	pop	{r7, pc}
    23fa:	bf00      	nop
    23fc:	00010e94 	.word	0x00010e94
    2400:	00003cd5 	.word	0x00003cd5
    2404:	00004231 	.word	0x00004231
    2408:	00002415 	.word	0x00002415
    240c:	00002439 	.word	0x00002439
    2410:	0000245d 	.word	0x0000245d

00002414 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    2414:	b580      	push	{r7, lr}
    2416:	b084      	sub	sp, #16
    2418:	af00      	add	r7, sp, #0
    241a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    241c:	687b      	ldr	r3, [r7, #4]
    241e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    2420:	68fb      	ldr	r3, [r7, #12]
    2422:	69db      	ldr	r3, [r3, #28]
    2424:	2b00      	cmp	r3, #0
    2426:	d003      	beq.n	2430 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    2428:	68fb      	ldr	r3, [r7, #12]
    242a:	69db      	ldr	r3, [r3, #28]
    242c:	68f8      	ldr	r0, [r7, #12]
    242e:	4798      	blx	r3
	}
}
    2430:	bf00      	nop
    2432:	3710      	adds	r7, #16
    2434:	46bd      	mov	sp, r7
    2436:	bd80      	pop	{r7, pc}

00002438 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    2438:	b580      	push	{r7, lr}
    243a:	b084      	sub	sp, #16
    243c:	af00      	add	r7, sp, #0
    243e:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2440:	687b      	ldr	r3, [r7, #4]
    2442:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    2444:	68fb      	ldr	r3, [r7, #12]
    2446:	6a1b      	ldr	r3, [r3, #32]
    2448:	2b00      	cmp	r3, #0
    244a:	d003      	beq.n	2454 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    244c:	68fb      	ldr	r3, [r7, #12]
    244e:	6a1b      	ldr	r3, [r3, #32]
    2450:	68f8      	ldr	r0, [r7, #12]
    2452:	4798      	blx	r3
	}
}
    2454:	bf00      	nop
    2456:	3710      	adds	r7, #16
    2458:	46bd      	mov	sp, r7
    245a:	bd80      	pop	{r7, pc}

0000245c <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    245c:	b580      	push	{r7, lr}
    245e:	b084      	sub	sp, #16
    2460:	af00      	add	r7, sp, #0
    2462:	6078      	str	r0, [r7, #4]
    2464:	460b      	mov	r3, r1
    2466:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2468:	687b      	ldr	r3, [r7, #4]
    246a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    246c:	68fb      	ldr	r3, [r7, #12]
    246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2470:	2b00      	cmp	r3, #0
    2472:	d005      	beq.n	2480 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    2474:	68fb      	ldr	r3, [r7, #12]
    2476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2478:	78fa      	ldrb	r2, [r7, #3]
    247a:	4611      	mov	r1, r2
    247c:	68f8      	ldr	r0, [r7, #12]
    247e:	4798      	blx	r3
	}
}
    2480:	bf00      	nop
    2482:	3710      	adds	r7, #16
    2484:	46bd      	mov	sp, r7
    2486:	bd80      	pop	{r7, pc}

00002488 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    2488:	b580      	push	{r7, lr}
    248a:	b082      	sub	sp, #8
    248c:	af00      	add	r7, sp, #0
    248e:	6078      	str	r0, [r7, #4]
    2490:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    2492:	687b      	ldr	r3, [r7, #4]
    2494:	2b00      	cmp	r3, #0
    2496:	d004      	beq.n	24a2 <crc_sync_init+0x1a>
    2498:	683b      	ldr	r3, [r7, #0]
    249a:	2b00      	cmp	r3, #0
    249c:	d001      	beq.n	24a2 <crc_sync_init+0x1a>
    249e:	2301      	movs	r3, #1
    24a0:	e000      	b.n	24a4 <crc_sync_init+0x1c>
    24a2:	2300      	movs	r3, #0
    24a4:	f003 0301 	and.w	r3, r3, #1
    24a8:	b2db      	uxtb	r3, r3
    24aa:	222b      	movs	r2, #43	; 0x2b
    24ac:	4906      	ldr	r1, [pc, #24]	; (24c8 <crc_sync_init+0x40>)
    24ae:	4618      	mov	r0, r3
    24b0:	4b06      	ldr	r3, [pc, #24]	; (24cc <crc_sync_init+0x44>)
    24b2:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    24b4:	687b      	ldr	r3, [r7, #4]
    24b6:	6839      	ldr	r1, [r7, #0]
    24b8:	4618      	mov	r0, r3
    24ba:	4b05      	ldr	r3, [pc, #20]	; (24d0 <crc_sync_init+0x48>)
    24bc:	4798      	blx	r3
    24be:	4603      	mov	r3, r0
}
    24c0:	4618      	mov	r0, r3
    24c2:	3708      	adds	r7, #8
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}
    24c8:	00010eb0 	.word	0x00010eb0
    24cc:	00003cd5 	.word	0x00003cd5
    24d0:	00004939 	.word	0x00004939

000024d4 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    24d4:	b590      	push	{r4, r7, lr}
    24d6:	b083      	sub	sp, #12
    24d8:	af00      	add	r7, sp, #0
    24da:	4603      	mov	r3, r0
    24dc:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    24de:	4b07      	ldr	r3, [pc, #28]	; (24fc <delay_us+0x28>)
    24e0:	681c      	ldr	r4, [r3, #0]
    24e2:	88fb      	ldrh	r3, [r7, #6]
    24e4:	4618      	mov	r0, r3
    24e6:	4b06      	ldr	r3, [pc, #24]	; (2500 <delay_us+0x2c>)
    24e8:	4798      	blx	r3
    24ea:	4603      	mov	r3, r0
    24ec:	4619      	mov	r1, r3
    24ee:	4620      	mov	r0, r4
    24f0:	4b04      	ldr	r3, [pc, #16]	; (2504 <delay_us+0x30>)
    24f2:	4798      	blx	r3
}
    24f4:	bf00      	nop
    24f6:	370c      	adds	r7, #12
    24f8:	46bd      	mov	sp, r7
    24fa:	bd90      	pop	{r4, r7, pc}
    24fc:	20000a90 	.word	0x20000a90
    2500:	00004689 	.word	0x00004689
    2504:	00004821 	.word	0x00004821

00002508 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2508:	b590      	push	{r4, r7, lr}
    250a:	b083      	sub	sp, #12
    250c:	af00      	add	r7, sp, #0
    250e:	4603      	mov	r3, r0
    2510:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2512:	4b07      	ldr	r3, [pc, #28]	; (2530 <delay_ms+0x28>)
    2514:	681c      	ldr	r4, [r3, #0]
    2516:	88fb      	ldrh	r3, [r7, #6]
    2518:	4618      	mov	r0, r3
    251a:	4b06      	ldr	r3, [pc, #24]	; (2534 <delay_ms+0x2c>)
    251c:	4798      	blx	r3
    251e:	4603      	mov	r3, r0
    2520:	4619      	mov	r1, r3
    2522:	4620      	mov	r0, r4
    2524:	4b04      	ldr	r3, [pc, #16]	; (2538 <delay_ms+0x30>)
    2526:	4798      	blx	r3
}
    2528:	bf00      	nop
    252a:	370c      	adds	r7, #12
    252c:	46bd      	mov	sp, r7
    252e:	bd90      	pop	{r4, r7, pc}
    2530:	20000a90 	.word	0x20000a90
    2534:	000047f5 	.word	0x000047f5
    2538:	00004821 	.word	0x00004821

0000253c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    253c:	b580      	push	{r7, lr}
    253e:	af00      	add	r7, sp, #0
	return _event_system_init();
    2540:	4b02      	ldr	r3, [pc, #8]	; (254c <event_system_init+0x10>)
    2542:	4798      	blx	r3
    2544:	4603      	mov	r3, r0
}
    2546:	4618      	mov	r0, r3
    2548:	bd80      	pop	{r7, pc}
    254a:	bf00      	nop
    254c:	000050f5 	.word	0x000050f5

00002550 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    2550:	b580      	push	{r7, lr}
    2552:	b082      	sub	sp, #8
    2554:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2556:	2300      	movs	r3, #0
    2558:	80fb      	strh	r3, [r7, #6]
    255a:	e00e      	b.n	257a <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    255c:	88fb      	ldrh	r3, [r7, #6]
    255e:	4a0c      	ldr	r2, [pc, #48]	; (2590 <ext_irq_init+0x40>)
    2560:	00db      	lsls	r3, r3, #3
    2562:	4413      	add	r3, r2
    2564:	f04f 32ff 	mov.w	r2, #4294967295
    2568:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    256a:	88fb      	ldrh	r3, [r7, #6]
    256c:	4a08      	ldr	r2, [pc, #32]	; (2590 <ext_irq_init+0x40>)
    256e:	2100      	movs	r1, #0
    2570:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2574:	88fb      	ldrh	r3, [r7, #6]
    2576:	3301      	adds	r3, #1
    2578:	80fb      	strh	r3, [r7, #6]
    257a:	88fb      	ldrh	r3, [r7, #6]
    257c:	2b08      	cmp	r3, #8
    257e:	d9ed      	bls.n	255c <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    2580:	4804      	ldr	r0, [pc, #16]	; (2594 <ext_irq_init+0x44>)
    2582:	4b05      	ldr	r3, [pc, #20]	; (2598 <ext_irq_init+0x48>)
    2584:	4798      	blx	r3
    2586:	4603      	mov	r3, r0
}
    2588:	4618      	mov	r0, r3
    258a:	3708      	adds	r7, #8
    258c:	46bd      	mov	sp, r7
    258e:	bd80      	pop	{r7, pc}
    2590:	20000a94 	.word	0x20000a94
    2594:	000026f5 	.word	0x000026f5
    2598:	00004c79 	.word	0x00004c79

0000259c <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    259c:	b580      	push	{r7, lr}
    259e:	b086      	sub	sp, #24
    25a0:	af00      	add	r7, sp, #0
    25a2:	6078      	str	r0, [r7, #4]
    25a4:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    25a6:	2300      	movs	r3, #0
    25a8:	75fb      	strb	r3, [r7, #23]
    25aa:	2300      	movs	r3, #0
    25ac:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    25ae:	2300      	movs	r3, #0
    25b0:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    25b2:	e012      	b.n	25da <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    25b4:	7dfb      	ldrb	r3, [r7, #23]
    25b6:	4a4d      	ldr	r2, [pc, #308]	; (26ec <ext_irq_register+0x150>)
    25b8:	00db      	lsls	r3, r3, #3
    25ba:	4413      	add	r3, r2
    25bc:	685a      	ldr	r2, [r3, #4]
    25be:	687b      	ldr	r3, [r7, #4]
    25c0:	429a      	cmp	r2, r3
    25c2:	d107      	bne.n	25d4 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    25c4:	7dfb      	ldrb	r3, [r7, #23]
    25c6:	4949      	ldr	r1, [pc, #292]	; (26ec <ext_irq_register+0x150>)
    25c8:	683a      	ldr	r2, [r7, #0]
    25ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    25ce:	2301      	movs	r3, #1
    25d0:	757b      	strb	r3, [r7, #21]
			break;
    25d2:	e005      	b.n	25e0 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    25d4:	7dfb      	ldrb	r3, [r7, #23]
    25d6:	3301      	adds	r3, #1
    25d8:	75fb      	strb	r3, [r7, #23]
    25da:	7dfb      	ldrb	r3, [r7, #23]
    25dc:	2b08      	cmp	r3, #8
    25de:	d9e9      	bls.n	25b4 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    25e0:	683b      	ldr	r3, [r7, #0]
    25e2:	2b00      	cmp	r3, #0
    25e4:	d10e      	bne.n	2604 <ext_irq_register+0x68>
		if (!found) {
    25e6:	7d7b      	ldrb	r3, [r7, #21]
    25e8:	f083 0301 	eor.w	r3, r3, #1
    25ec:	b2db      	uxtb	r3, r3
    25ee:	2b00      	cmp	r3, #0
    25f0:	d002      	beq.n	25f8 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    25f2:	f06f 030c 	mvn.w	r3, #12
    25f6:	e074      	b.n	26e2 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    25f8:	2100      	movs	r1, #0
    25fa:	6878      	ldr	r0, [r7, #4]
    25fc:	4b3c      	ldr	r3, [pc, #240]	; (26f0 <ext_irq_register+0x154>)
    25fe:	4798      	blx	r3
    2600:	4603      	mov	r3, r0
    2602:	e06e      	b.n	26e2 <ext_irq_register+0x146>
	}

	if (!found) {
    2604:	7d7b      	ldrb	r3, [r7, #21]
    2606:	f083 0301 	eor.w	r3, r3, #1
    260a:	b2db      	uxtb	r3, r3
    260c:	2b00      	cmp	r3, #0
    260e:	d05a      	beq.n	26c6 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2610:	2300      	movs	r3, #0
    2612:	75fb      	strb	r3, [r7, #23]
    2614:	e016      	b.n	2644 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    2616:	7dfb      	ldrb	r3, [r7, #23]
    2618:	4a34      	ldr	r2, [pc, #208]	; (26ec <ext_irq_register+0x150>)
    261a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    261e:	2b00      	cmp	r3, #0
    2620:	d10d      	bne.n	263e <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    2622:	7dfb      	ldrb	r3, [r7, #23]
    2624:	4931      	ldr	r1, [pc, #196]	; (26ec <ext_irq_register+0x150>)
    2626:	683a      	ldr	r2, [r7, #0]
    2628:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    262c:	7dfb      	ldrb	r3, [r7, #23]
    262e:	4a2f      	ldr	r2, [pc, #188]	; (26ec <ext_irq_register+0x150>)
    2630:	00db      	lsls	r3, r3, #3
    2632:	4413      	add	r3, r2
    2634:	687a      	ldr	r2, [r7, #4]
    2636:	605a      	str	r2, [r3, #4]
				found           = true;
    2638:	2301      	movs	r3, #1
    263a:	757b      	strb	r3, [r7, #21]
				break;
    263c:	e005      	b.n	264a <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    263e:	7dfb      	ldrb	r3, [r7, #23]
    2640:	3301      	adds	r3, #1
    2642:	75fb      	strb	r3, [r7, #23]
    2644:	7dfb      	ldrb	r3, [r7, #23]
    2646:	2b08      	cmp	r3, #8
    2648:	d9e5      	bls.n	2616 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    264a:	e036      	b.n	26ba <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    264c:	7dfb      	ldrb	r3, [r7, #23]
    264e:	4a27      	ldr	r2, [pc, #156]	; (26ec <ext_irq_register+0x150>)
    2650:	00db      	lsls	r3, r3, #3
    2652:	4413      	add	r3, r2
    2654:	685a      	ldr	r2, [r3, #4]
    2656:	7dbb      	ldrb	r3, [r7, #22]
    2658:	4924      	ldr	r1, [pc, #144]	; (26ec <ext_irq_register+0x150>)
    265a:	00db      	lsls	r3, r3, #3
    265c:	440b      	add	r3, r1
    265e:	685b      	ldr	r3, [r3, #4]
    2660:	429a      	cmp	r2, r3
    2662:	d227      	bcs.n	26b4 <ext_irq_register+0x118>
    2664:	7dbb      	ldrb	r3, [r7, #22]
    2666:	4a21      	ldr	r2, [pc, #132]	; (26ec <ext_irq_register+0x150>)
    2668:	00db      	lsls	r3, r3, #3
    266a:	4413      	add	r3, r2
    266c:	685b      	ldr	r3, [r3, #4]
    266e:	f1b3 3fff 	cmp.w	r3, #4294967295
    2672:	d01f      	beq.n	26b4 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    2674:	7dbb      	ldrb	r3, [r7, #22]
    2676:	491d      	ldr	r1, [pc, #116]	; (26ec <ext_irq_register+0x150>)
    2678:	f107 020c 	add.w	r2, r7, #12
    267c:	00db      	lsls	r3, r3, #3
    267e:	440b      	add	r3, r1
    2680:	e893 0003 	ldmia.w	r3, {r0, r1}
    2684:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    2688:	7dbb      	ldrb	r3, [r7, #22]
    268a:	7dfa      	ldrb	r2, [r7, #23]
    268c:	4817      	ldr	r0, [pc, #92]	; (26ec <ext_irq_register+0x150>)
    268e:	4917      	ldr	r1, [pc, #92]	; (26ec <ext_irq_register+0x150>)
    2690:	00db      	lsls	r3, r3, #3
    2692:	4403      	add	r3, r0
    2694:	00d2      	lsls	r2, r2, #3
    2696:	440a      	add	r2, r1
    2698:	e892 0003 	ldmia.w	r2, {r0, r1}
    269c:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    26a0:	7dfb      	ldrb	r3, [r7, #23]
    26a2:	4a12      	ldr	r2, [pc, #72]	; (26ec <ext_irq_register+0x150>)
    26a4:	00db      	lsls	r3, r3, #3
    26a6:	4413      	add	r3, r2
    26a8:	f107 020c 	add.w	r2, r7, #12
    26ac:	e892 0003 	ldmia.w	r2, {r0, r1}
    26b0:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    26b4:	7dbb      	ldrb	r3, [r7, #22]
    26b6:	3301      	adds	r3, #1
    26b8:	75bb      	strb	r3, [r7, #22]
    26ba:	7dbb      	ldrb	r3, [r7, #22]
    26bc:	2b08      	cmp	r3, #8
    26be:	d802      	bhi.n	26c6 <ext_irq_register+0x12a>
    26c0:	7dfb      	ldrb	r3, [r7, #23]
    26c2:	2b08      	cmp	r3, #8
    26c4:	d9c2      	bls.n	264c <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    26c6:	7d7b      	ldrb	r3, [r7, #21]
    26c8:	f083 0301 	eor.w	r3, r3, #1
    26cc:	b2db      	uxtb	r3, r3
    26ce:	2b00      	cmp	r3, #0
    26d0:	d002      	beq.n	26d8 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    26d2:	f06f 030c 	mvn.w	r3, #12
    26d6:	e004      	b.n	26e2 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    26d8:	2101      	movs	r1, #1
    26da:	6878      	ldr	r0, [r7, #4]
    26dc:	4b04      	ldr	r3, [pc, #16]	; (26f0 <ext_irq_register+0x154>)
    26de:	4798      	blx	r3
    26e0:	4603      	mov	r3, r0
}
    26e2:	4618      	mov	r0, r3
    26e4:	3718      	adds	r7, #24
    26e6:	46bd      	mov	sp, r7
    26e8:	bd80      	pop	{r7, pc}
    26ea:	bf00      	nop
    26ec:	20000a94 	.word	0x20000a94
    26f0:	00004e0d 	.word	0x00004e0d

000026f4 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    26f4:	b580      	push	{r7, lr}
    26f6:	b084      	sub	sp, #16
    26f8:	af00      	add	r7, sp, #0
    26fa:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    26fc:	2300      	movs	r3, #0
    26fe:	73fb      	strb	r3, [r7, #15]
    2700:	2309      	movs	r3, #9
    2702:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    2704:	e02a      	b.n	275c <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    2706:	7bba      	ldrb	r2, [r7, #14]
    2708:	7bfb      	ldrb	r3, [r7, #15]
    270a:	4413      	add	r3, r2
    270c:	105b      	asrs	r3, r3, #1
    270e:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    2710:	7b7b      	ldrb	r3, [r7, #13]
    2712:	2b08      	cmp	r3, #8
    2714:	d827      	bhi.n	2766 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    2716:	7b7b      	ldrb	r3, [r7, #13]
    2718:	4a16      	ldr	r2, [pc, #88]	; (2774 <process_ext_irq+0x80>)
    271a:	00db      	lsls	r3, r3, #3
    271c:	4413      	add	r3, r2
    271e:	685a      	ldr	r2, [r3, #4]
    2720:	687b      	ldr	r3, [r7, #4]
    2722:	429a      	cmp	r2, r3
    2724:	d10b      	bne.n	273e <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    2726:	7b7b      	ldrb	r3, [r7, #13]
    2728:	4a12      	ldr	r2, [pc, #72]	; (2774 <process_ext_irq+0x80>)
    272a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    272e:	2b00      	cmp	r3, #0
    2730:	d01b      	beq.n	276a <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    2732:	7b7b      	ldrb	r3, [r7, #13]
    2734:	4a0f      	ldr	r2, [pc, #60]	; (2774 <process_ext_irq+0x80>)
    2736:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    273a:	4798      	blx	r3
			}
			return;
    273c:	e015      	b.n	276a <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    273e:	7b7b      	ldrb	r3, [r7, #13]
    2740:	4a0c      	ldr	r2, [pc, #48]	; (2774 <process_ext_irq+0x80>)
    2742:	00db      	lsls	r3, r3, #3
    2744:	4413      	add	r3, r2
    2746:	685a      	ldr	r2, [r3, #4]
    2748:	687b      	ldr	r3, [r7, #4]
    274a:	429a      	cmp	r2, r3
    274c:	d203      	bcs.n	2756 <process_ext_irq+0x62>
			lower = middle + 1;
    274e:	7b7b      	ldrb	r3, [r7, #13]
    2750:	3301      	adds	r3, #1
    2752:	73fb      	strb	r3, [r7, #15]
    2754:	e002      	b.n	275c <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    2756:	7b7b      	ldrb	r3, [r7, #13]
    2758:	3b01      	subs	r3, #1
    275a:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    275c:	7bba      	ldrb	r2, [r7, #14]
    275e:	7bfb      	ldrb	r3, [r7, #15]
    2760:	429a      	cmp	r2, r3
    2762:	d2d0      	bcs.n	2706 <process_ext_irq+0x12>
    2764:	e002      	b.n	276c <process_ext_irq+0x78>
			return;
    2766:	bf00      	nop
    2768:	e000      	b.n	276c <process_ext_irq+0x78>
			return;
    276a:	bf00      	nop
		}
	}
}
    276c:	3710      	adds	r7, #16
    276e:	46bd      	mov	sp, r7
    2770:	bd80      	pop	{r7, pc}
    2772:	bf00      	nop
    2774:	20000a94 	.word	0x20000a94

00002778 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    2778:	b580      	push	{r7, lr}
    277a:	b084      	sub	sp, #16
    277c:	af00      	add	r7, sp, #0
    277e:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    2780:	687b      	ldr	r3, [r7, #4]
    2782:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    2784:	687b      	ldr	r3, [r7, #4]
    2786:	885b      	ldrh	r3, [r3, #2]
    2788:	b29b      	uxth	r3, r3
    278a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    278e:	2b00      	cmp	r3, #0
    2790:	d107      	bne.n	27a2 <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    2792:	68fb      	ldr	r3, [r7, #12]
    2794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2796:	2b00      	cmp	r3, #0
    2798:	d003      	beq.n	27a2 <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    279a:	68fb      	ldr	r3, [r7, #12]
    279c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    279e:	68f8      	ldr	r0, [r7, #12]
    27a0:	4798      	blx	r3
		}
	}
}
    27a2:	bf00      	nop
    27a4:	3710      	adds	r7, #16
    27a6:	46bd      	mov	sp, r7
    27a8:	bd80      	pop	{r7, pc}

000027aa <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    27aa:	b580      	push	{r7, lr}
    27ac:	b084      	sub	sp, #16
    27ae:	af00      	add	r7, sp, #0
    27b0:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    27b2:	687b      	ldr	r3, [r7, #4]
    27b4:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    27b6:	687b      	ldr	r3, [r7, #4]
    27b8:	885b      	ldrh	r3, [r3, #2]
    27ba:	b29b      	uxth	r3, r3
    27bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
    27c0:	2b00      	cmp	r3, #0
    27c2:	d107      	bne.n	27d4 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    27c4:	68fb      	ldr	r3, [r7, #12]
    27c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    27c8:	2b00      	cmp	r3, #0
    27ca:	d003      	beq.n	27d4 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    27cc:	68fb      	ldr	r3, [r7, #12]
    27ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    27d0:	68f8      	ldr	r0, [r7, #12]
    27d2:	4798      	blx	r3
		}
	}
}
    27d4:	bf00      	nop
    27d6:	3710      	adds	r7, #16
    27d8:	46bd      	mov	sp, r7
    27da:	bd80      	pop	{r7, pc}

000027dc <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    27dc:	b580      	push	{r7, lr}
    27de:	b084      	sub	sp, #16
    27e0:	af00      	add	r7, sp, #0
    27e2:	6078      	str	r0, [r7, #4]
    27e4:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    27e6:	687b      	ldr	r3, [r7, #4]
    27e8:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    27ea:	687b      	ldr	r3, [r7, #4]
    27ec:	885b      	ldrh	r3, [r3, #2]
    27ee:	b29b      	uxth	r3, r3
    27f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    27f4:	2b00      	cmp	r3, #0
    27f6:	d108      	bne.n	280a <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    27f8:	68fb      	ldr	r3, [r7, #12]
    27fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    27fc:	2b00      	cmp	r3, #0
    27fe:	d004      	beq.n	280a <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    2800:	68fb      	ldr	r3, [r7, #12]
    2802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2804:	6839      	ldr	r1, [r7, #0]
    2806:	68f8      	ldr	r0, [r7, #12]
    2808:	4798      	blx	r3
		}
	}
}
    280a:	bf00      	nop
    280c:	3710      	adds	r7, #16
    280e:	46bd      	mov	sp, r7
    2810:	bd80      	pop	{r7, pc}
	...

00002814 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    2814:	b580      	push	{r7, lr}
    2816:	b08a      	sub	sp, #40	; 0x28
    2818:	af00      	add	r7, sp, #0
    281a:	60f8      	str	r0, [r7, #12]
    281c:	60b9      	str	r1, [r7, #8]
    281e:	4613      	mov	r3, r2
    2820:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    2822:	68fb      	ldr	r3, [r7, #12]
    2824:	3b28      	subs	r3, #40	; 0x28
    2826:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    2828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    282a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    282c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    282e:	88fb      	ldrh	r3, [r7, #6]
    2830:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    2832:	f248 0301 	movw	r3, #32769	; 0x8001
    2836:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2838:	68bb      	ldr	r3, [r7, #8]
    283a:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    283e:	f107 0214 	add.w	r2, r7, #20
    2842:	4611      	mov	r1, r2
    2844:	4618      	mov	r0, r3
    2846:	4b06      	ldr	r3, [pc, #24]	; (2860 <i2c_m_async_read+0x4c>)
    2848:	4798      	blx	r3
    284a:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    284c:	6a3b      	ldr	r3, [r7, #32]
    284e:	2b00      	cmp	r3, #0
    2850:	d001      	beq.n	2856 <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    2852:	6a3b      	ldr	r3, [r7, #32]
    2854:	e000      	b.n	2858 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    2856:	88fb      	ldrh	r3, [r7, #6]
}
    2858:	4618      	mov	r0, r3
    285a:	3728      	adds	r7, #40	; 0x28
    285c:	46bd      	mov	sp, r7
    285e:	bd80      	pop	{r7, pc}
    2860:	00006e65 	.word	0x00006e65

00002864 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    2864:	b580      	push	{r7, lr}
    2866:	b08a      	sub	sp, #40	; 0x28
    2868:	af00      	add	r7, sp, #0
    286a:	60f8      	str	r0, [r7, #12]
    286c:	60b9      	str	r1, [r7, #8]
    286e:	4613      	mov	r3, r2
    2870:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    2872:	68fb      	ldr	r3, [r7, #12]
    2874:	3b28      	subs	r3, #40	; 0x28
    2876:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    2878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    287a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    287c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    287e:	88fb      	ldrh	r3, [r7, #6]
    2880:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    2882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2886:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2888:	68bb      	ldr	r3, [r7, #8]
    288a:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    288e:	f107 0214 	add.w	r2, r7, #20
    2892:	4611      	mov	r1, r2
    2894:	4618      	mov	r0, r3
    2896:	4b06      	ldr	r3, [pc, #24]	; (28b0 <i2c_m_async_write+0x4c>)
    2898:	4798      	blx	r3
    289a:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    289c:	6a3b      	ldr	r3, [r7, #32]
    289e:	2b00      	cmp	r3, #0
    28a0:	d001      	beq.n	28a6 <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    28a2:	6a3b      	ldr	r3, [r7, #32]
    28a4:	e000      	b.n	28a8 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    28a6:	88fb      	ldrh	r3, [r7, #6]
}
    28a8:	4618      	mov	r0, r3
    28aa:	3728      	adds	r7, #40	; 0x28
    28ac:	46bd      	mov	sp, r7
    28ae:	bd80      	pop	{r7, pc}
    28b0:	00006e65 	.word	0x00006e65

000028b4 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
    28bc:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    28be:	687b      	ldr	r3, [r7, #4]
    28c0:	2b00      	cmp	r3, #0
    28c2:	bf14      	ite	ne
    28c4:	2301      	movne	r3, #1
    28c6:	2300      	moveq	r3, #0
    28c8:	b2db      	uxtb	r3, r3
    28ca:	2289      	movs	r2, #137	; 0x89
    28cc:	4915      	ldr	r1, [pc, #84]	; (2924 <i2c_m_async_init+0x70>)
    28ce:	4618      	mov	r0, r3
    28d0:	4b15      	ldr	r3, [pc, #84]	; (2928 <i2c_m_async_init+0x74>)
    28d2:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    28d4:	687b      	ldr	r3, [r7, #4]
    28d6:	6839      	ldr	r1, [r7, #0]
    28d8:	4618      	mov	r0, r3
    28da:	4b14      	ldr	r3, [pc, #80]	; (292c <i2c_m_async_init+0x78>)
    28dc:	4798      	blx	r3
    28de:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    28e0:	68fb      	ldr	r3, [r7, #12]
    28e2:	2b00      	cmp	r3, #0
    28e4:	d001      	beq.n	28ea <i2c_m_async_init+0x36>
		return init_status;
    28e6:	68fb      	ldr	r3, [r7, #12]
    28e8:	e018      	b.n	291c <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    28ea:	687b      	ldr	r3, [r7, #4]
    28ec:	4a10      	ldr	r2, [pc, #64]	; (2930 <i2c_m_async_init+0x7c>)
    28ee:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    28f0:	687b      	ldr	r3, [r7, #4]
    28f2:	4a10      	ldr	r2, [pc, #64]	; (2934 <i2c_m_async_init+0x80>)
    28f4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    28f6:	687b      	ldr	r3, [r7, #4]
    28f8:	4a0f      	ldr	r2, [pc, #60]	; (2938 <i2c_m_async_init+0x84>)
    28fa:	2101      	movs	r1, #1
    28fc:	4618      	mov	r0, r3
    28fe:	4b0f      	ldr	r3, [pc, #60]	; (293c <i2c_m_async_init+0x88>)
    2900:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    2902:	687b      	ldr	r3, [r7, #4]
    2904:	4a0e      	ldr	r2, [pc, #56]	; (2940 <i2c_m_async_init+0x8c>)
    2906:	2102      	movs	r1, #2
    2908:	4618      	mov	r0, r3
    290a:	4b0c      	ldr	r3, [pc, #48]	; (293c <i2c_m_async_init+0x88>)
    290c:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    290e:	687b      	ldr	r3, [r7, #4]
    2910:	4a0c      	ldr	r2, [pc, #48]	; (2944 <i2c_m_async_init+0x90>)
    2912:	2100      	movs	r1, #0
    2914:	4618      	mov	r0, r3
    2916:	4b09      	ldr	r3, [pc, #36]	; (293c <i2c_m_async_init+0x88>)
    2918:	4798      	blx	r3

	return ERR_NONE;
    291a:	2300      	movs	r3, #0
}
    291c:	4618      	mov	r0, r3
    291e:	3710      	adds	r7, #16
    2920:	46bd      	mov	sp, r7
    2922:	bd80      	pop	{r7, pc}
    2924:	00010ecc 	.word	0x00010ecc
    2928:	00003cd5 	.word	0x00003cd5
    292c:	00006cb5 	.word	0x00006cb5
    2930:	00002815 	.word	0x00002815
    2934:	00002865 	.word	0x00002865
    2938:	00002779 	.word	0x00002779
    293c:	00006f39 	.word	0x00006f39
    2940:	000027ab 	.word	0x000027ab
    2944:	000027dd 	.word	0x000027dd

00002948 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    2948:	b580      	push	{r7, lr}
    294a:	b08a      	sub	sp, #40	; 0x28
    294c:	af00      	add	r7, sp, #0
    294e:	60f8      	str	r0, [r7, #12]
    2950:	60b9      	str	r1, [r7, #8]
    2952:	4613      	mov	r3, r2
    2954:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2956:	68fb      	ldr	r3, [r7, #12]
    2958:	3b14      	subs	r3, #20
    295a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    295e:	8b9b      	ldrh	r3, [r3, #28]
    2960:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2962:	88fb      	ldrh	r3, [r7, #6]
    2964:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    2966:	f248 0301 	movw	r3, #32769	; 0x8001
    296a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    296c:	68bb      	ldr	r3, [r7, #8]
    296e:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2972:	f107 0214 	add.w	r2, r7, #20
    2976:	4611      	mov	r1, r2
    2978:	4618      	mov	r0, r3
    297a:	4b06      	ldr	r3, [pc, #24]	; (2994 <i2c_m_sync_read+0x4c>)
    297c:	4798      	blx	r3
    297e:	6238      	str	r0, [r7, #32]

	if (ret) {
    2980:	6a3b      	ldr	r3, [r7, #32]
    2982:	2b00      	cmp	r3, #0
    2984:	d001      	beq.n	298a <i2c_m_sync_read+0x42>
		return ret;
    2986:	6a3b      	ldr	r3, [r7, #32]
    2988:	e000      	b.n	298c <i2c_m_sync_read+0x44>
	}

	return n;
    298a:	88fb      	ldrh	r3, [r7, #6]
}
    298c:	4618      	mov	r0, r3
    298e:	3728      	adds	r7, #40	; 0x28
    2990:	46bd      	mov	sp, r7
    2992:	bd80      	pop	{r7, pc}
    2994:	00007141 	.word	0x00007141

00002998 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    2998:	b580      	push	{r7, lr}
    299a:	b08a      	sub	sp, #40	; 0x28
    299c:	af00      	add	r7, sp, #0
    299e:	60f8      	str	r0, [r7, #12]
    29a0:	60b9      	str	r1, [r7, #8]
    29a2:	4613      	mov	r3, r2
    29a4:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    29a6:	68fb      	ldr	r3, [r7, #12]
    29a8:	3b14      	subs	r3, #20
    29aa:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    29ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    29ae:	8b9b      	ldrh	r3, [r3, #28]
    29b0:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    29b2:	88fb      	ldrh	r3, [r7, #6]
    29b4:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    29b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    29ba:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    29bc:	68bb      	ldr	r3, [r7, #8]
    29be:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    29c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    29c2:	f107 0214 	add.w	r2, r7, #20
    29c6:	4611      	mov	r1, r2
    29c8:	4618      	mov	r0, r3
    29ca:	4b06      	ldr	r3, [pc, #24]	; (29e4 <i2c_m_sync_write+0x4c>)
    29cc:	4798      	blx	r3
    29ce:	6238      	str	r0, [r7, #32]

	if (ret) {
    29d0:	6a3b      	ldr	r3, [r7, #32]
    29d2:	2b00      	cmp	r3, #0
    29d4:	d001      	beq.n	29da <i2c_m_sync_write+0x42>
		return ret;
    29d6:	6a3b      	ldr	r3, [r7, #32]
    29d8:	e000      	b.n	29dc <i2c_m_sync_write+0x44>
	}

	return n;
    29da:	88fb      	ldrh	r3, [r7, #6]
}
    29dc:	4618      	mov	r0, r3
    29de:	3728      	adds	r7, #40	; 0x28
    29e0:	46bd      	mov	sp, r7
    29e2:	bd80      	pop	{r7, pc}
    29e4:	00007141 	.word	0x00007141

000029e8 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    29e8:	b580      	push	{r7, lr}
    29ea:	b084      	sub	sp, #16
    29ec:	af00      	add	r7, sp, #0
    29ee:	6078      	str	r0, [r7, #4]
    29f0:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    29f2:	687b      	ldr	r3, [r7, #4]
    29f4:	2b00      	cmp	r3, #0
    29f6:	bf14      	ite	ne
    29f8:	2301      	movne	r3, #1
    29fa:	2300      	moveq	r3, #0
    29fc:	b2db      	uxtb	r3, r3
    29fe:	225e      	movs	r2, #94	; 0x5e
    2a00:	490c      	ldr	r1, [pc, #48]	; (2a34 <i2c_m_sync_init+0x4c>)
    2a02:	4618      	mov	r0, r3
    2a04:	4b0c      	ldr	r3, [pc, #48]	; (2a38 <i2c_m_sync_init+0x50>)
    2a06:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2a08:	687b      	ldr	r3, [r7, #4]
    2a0a:	6839      	ldr	r1, [r7, #0]
    2a0c:	4618      	mov	r0, r3
    2a0e:	4b0b      	ldr	r3, [pc, #44]	; (2a3c <i2c_m_sync_init+0x54>)
    2a10:	4798      	blx	r3
    2a12:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2a14:	68fb      	ldr	r3, [r7, #12]
    2a16:	2b00      	cmp	r3, #0
    2a18:	d001      	beq.n	2a1e <i2c_m_sync_init+0x36>
		return init_status;
    2a1a:	68fb      	ldr	r3, [r7, #12]
    2a1c:	e006      	b.n	2a2c <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    2a1e:	687b      	ldr	r3, [r7, #4]
    2a20:	4a07      	ldr	r2, [pc, #28]	; (2a40 <i2c_m_sync_init+0x58>)
    2a22:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    2a24:	687b      	ldr	r3, [r7, #4]
    2a26:	4a07      	ldr	r2, [pc, #28]	; (2a44 <i2c_m_sync_init+0x5c>)
    2a28:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    2a2a:	2300      	movs	r3, #0
}
    2a2c:	4618      	mov	r0, r3
    2a2e:	3710      	adds	r7, #16
    2a30:	46bd      	mov	sp, r7
    2a32:	bd80      	pop	{r7, pc}
    2a34:	00010eec 	.word	0x00010eec
    2a38:	00003cd5 	.word	0x00003cd5
    2a3c:	00006f7d 	.word	0x00006f7d
    2a40:	00002949 	.word	0x00002949
    2a44:	00002999 	.word	0x00002999

00002a48 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    2a48:	b480      	push	{r7}
    2a4a:	b085      	sub	sp, #20
    2a4c:	af00      	add	r7, sp, #0
    2a4e:	60f8      	str	r0, [r7, #12]
    2a50:	460b      	mov	r3, r1
    2a52:	607a      	str	r2, [r7, #4]
    2a54:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    2a56:	897b      	ldrh	r3, [r7, #10]
    2a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2a5c:	b21a      	sxth	r2, r3
    2a5e:	687b      	ldr	r3, [r7, #4]
    2a60:	b21b      	sxth	r3, r3
    2a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2a66:	b21b      	sxth	r3, r3
    2a68:	4313      	orrs	r3, r2
    2a6a:	b21b      	sxth	r3, r3
    2a6c:	b29a      	uxth	r2, r3
    2a6e:	68fb      	ldr	r3, [r7, #12]
    2a70:	839a      	strh	r2, [r3, #28]
    2a72:	68fb      	ldr	r3, [r7, #12]
    2a74:	8b9b      	ldrh	r3, [r3, #28]
}
    2a76:	4618      	mov	r0, r3
    2a78:	3714      	adds	r7, #20
    2a7a:	46bd      	mov	sp, r7
    2a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a80:	4770      	bx	lr
	...

00002a84 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    2a84:	b580      	push	{r7, lr}
    2a86:	b084      	sub	sp, #16
    2a88:	af00      	add	r7, sp, #0
    2a8a:	60f8      	str	r0, [r7, #12]
    2a8c:	60b9      	str	r1, [r7, #8]
    2a8e:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2a90:	68fb      	ldr	r3, [r7, #12]
    2a92:	2b00      	cmp	r3, #0
    2a94:	d004      	beq.n	2aa0 <pwm_init+0x1c>
    2a96:	68bb      	ldr	r3, [r7, #8]
    2a98:	2b00      	cmp	r3, #0
    2a9a:	d001      	beq.n	2aa0 <pwm_init+0x1c>
    2a9c:	2301      	movs	r3, #1
    2a9e:	e000      	b.n	2aa2 <pwm_init+0x1e>
    2aa0:	2300      	movs	r3, #0
    2aa2:	f003 0301 	and.w	r3, r3, #1
    2aa6:	b2db      	uxtb	r3, r3
    2aa8:	2233      	movs	r2, #51	; 0x33
    2aaa:	490a      	ldr	r1, [pc, #40]	; (2ad4 <pwm_init+0x50>)
    2aac:	4618      	mov	r0, r3
    2aae:	4b0a      	ldr	r3, [pc, #40]	; (2ad8 <pwm_init+0x54>)
    2ab0:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    2ab2:	68fb      	ldr	r3, [r7, #12]
    2ab4:	68b9      	ldr	r1, [r7, #8]
    2ab6:	4618      	mov	r0, r3
    2ab8:	4b08      	ldr	r3, [pc, #32]	; (2adc <pwm_init+0x58>)
    2aba:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2abc:	68fb      	ldr	r3, [r7, #12]
    2abe:	4a08      	ldr	r2, [pc, #32]	; (2ae0 <pwm_init+0x5c>)
    2ac0:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    2ac2:	68fb      	ldr	r3, [r7, #12]
    2ac4:	4a07      	ldr	r2, [pc, #28]	; (2ae4 <pwm_init+0x60>)
    2ac6:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2ac8:	2300      	movs	r3, #0
}
    2aca:	4618      	mov	r0, r3
    2acc:	3710      	adds	r7, #16
    2ace:	46bd      	mov	sp, r7
    2ad0:	bd80      	pop	{r7, pc}
    2ad2:	bf00      	nop
    2ad4:	00010f08 	.word	0x00010f08
    2ad8:	00003cd5 	.word	0x00003cd5
    2adc:	000087bd 	.word	0x000087bd
    2ae0:	00002ae9 	.word	0x00002ae9
    2ae4:	00002b0d 	.word	0x00002b0d

00002ae8 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2ae8:	b580      	push	{r7, lr}
    2aea:	b084      	sub	sp, #16
    2aec:	af00      	add	r7, sp, #0
    2aee:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2af0:	687b      	ldr	r3, [r7, #4]
    2af2:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    2af4:	68fb      	ldr	r3, [r7, #12]
    2af6:	695b      	ldr	r3, [r3, #20]
    2af8:	2b00      	cmp	r3, #0
    2afa:	d003      	beq.n	2b04 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2afc:	68fb      	ldr	r3, [r7, #12]
    2afe:	695b      	ldr	r3, [r3, #20]
    2b00:	68f8      	ldr	r0, [r7, #12]
    2b02:	4798      	blx	r3
	}
}
    2b04:	bf00      	nop
    2b06:	3710      	adds	r7, #16
    2b08:	46bd      	mov	sp, r7
    2b0a:	bd80      	pop	{r7, pc}

00002b0c <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2b0c:	b580      	push	{r7, lr}
    2b0e:	b084      	sub	sp, #16
    2b10:	af00      	add	r7, sp, #0
    2b12:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2b14:	687b      	ldr	r3, [r7, #4]
    2b16:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2b18:	68fb      	ldr	r3, [r7, #12]
    2b1a:	699b      	ldr	r3, [r3, #24]
    2b1c:	2b00      	cmp	r3, #0
    2b1e:	d003      	beq.n	2b28 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2b20:	68fb      	ldr	r3, [r7, #12]
    2b22:	699b      	ldr	r3, [r3, #24]
    2b24:	68f8      	ldr	r0, [r7, #12]
    2b26:	4798      	blx	r3
	}
}
    2b28:	bf00      	nop
    2b2a:	3710      	adds	r7, #16
    2b2c:	46bd      	mov	sp, r7
    2b2e:	bd80      	pop	{r7, pc}

00002b30 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2b30:	b580      	push	{r7, lr}
    2b32:	b082      	sub	sp, #8
    2b34:	af00      	add	r7, sp, #0
    2b36:	6078      	str	r0, [r7, #4]
    2b38:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2b3a:	687b      	ldr	r3, [r7, #4]
    2b3c:	2b00      	cmp	r3, #0
    2b3e:	d004      	beq.n	2b4a <qspi_sync_init+0x1a>
    2b40:	683b      	ldr	r3, [r7, #0]
    2b42:	2b00      	cmp	r3, #0
    2b44:	d001      	beq.n	2b4a <qspi_sync_init+0x1a>
    2b46:	2301      	movs	r3, #1
    2b48:	e000      	b.n	2b4c <qspi_sync_init+0x1c>
    2b4a:	2300      	movs	r3, #0
    2b4c:	f003 0301 	and.w	r3, r3, #1
    2b50:	b2db      	uxtb	r3, r3
    2b52:	2231      	movs	r2, #49	; 0x31
    2b54:	4906      	ldr	r1, [pc, #24]	; (2b70 <qspi_sync_init+0x40>)
    2b56:	4618      	mov	r0, r3
    2b58:	4b06      	ldr	r3, [pc, #24]	; (2b74 <qspi_sync_init+0x44>)
    2b5a:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2b5c:	687b      	ldr	r3, [r7, #4]
    2b5e:	6839      	ldr	r1, [r7, #0]
    2b60:	4618      	mov	r0, r3
    2b62:	4b05      	ldr	r3, [pc, #20]	; (2b78 <qspi_sync_init+0x48>)
    2b64:	4798      	blx	r3
    2b66:	4603      	mov	r3, r0
}
    2b68:	4618      	mov	r0, r3
    2b6a:	3708      	adds	r7, #8
    2b6c:	46bd      	mov	sp, r7
    2b6e:	bd80      	pop	{r7, pc}
    2b70:	00010f20 	.word	0x00010f20
    2b74:	00003cd5 	.word	0x00003cd5
    2b78:	00005cbd 	.word	0x00005cbd

00002b7c <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2b7c:	b580      	push	{r7, lr}
    2b7e:	b082      	sub	sp, #8
    2b80:	af00      	add	r7, sp, #0
    2b82:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2b84:	687b      	ldr	r3, [r7, #4]
    2b86:	2b00      	cmp	r3, #0
    2b88:	bf14      	ite	ne
    2b8a:	2301      	movne	r3, #1
    2b8c:	2300      	moveq	r3, #0
    2b8e:	b2db      	uxtb	r3, r3
    2b90:	223f      	movs	r2, #63	; 0x3f
    2b92:	4906      	ldr	r1, [pc, #24]	; (2bac <qspi_sync_enable+0x30>)
    2b94:	4618      	mov	r0, r3
    2b96:	4b06      	ldr	r3, [pc, #24]	; (2bb0 <qspi_sync_enable+0x34>)
    2b98:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2b9a:	687b      	ldr	r3, [r7, #4]
    2b9c:	4618      	mov	r0, r3
    2b9e:	4b05      	ldr	r3, [pc, #20]	; (2bb4 <qspi_sync_enable+0x38>)
    2ba0:	4798      	blx	r3
    2ba2:	4603      	mov	r3, r0
}
    2ba4:	4618      	mov	r0, r3
    2ba6:	3708      	adds	r7, #8
    2ba8:	46bd      	mov	sp, r7
    2baa:	bd80      	pop	{r7, pc}
    2bac:	00010f20 	.word	0x00010f20
    2bb0:	00003cd5 	.word	0x00003cd5
    2bb4:	00005d31 	.word	0x00005d31

00002bb8 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2bb8:	b580      	push	{r7, lr}
    2bba:	b082      	sub	sp, #8
    2bbc:	af00      	add	r7, sp, #0
    2bbe:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2bc0:	687b      	ldr	r3, [r7, #4]
    2bc2:	2b00      	cmp	r3, #0
    2bc4:	bf14      	ite	ne
    2bc6:	2301      	movne	r3, #1
    2bc8:	2300      	moveq	r3, #0
    2bca:	b2db      	uxtb	r3, r3
    2bcc:	2246      	movs	r2, #70	; 0x46
    2bce:	4906      	ldr	r1, [pc, #24]	; (2be8 <qspi_sync_disable+0x30>)
    2bd0:	4618      	mov	r0, r3
    2bd2:	4b06      	ldr	r3, [pc, #24]	; (2bec <qspi_sync_disable+0x34>)
    2bd4:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    2bd6:	687b      	ldr	r3, [r7, #4]
    2bd8:	4618      	mov	r0, r3
    2bda:	4b05      	ldr	r3, [pc, #20]	; (2bf0 <qspi_sync_disable+0x38>)
    2bdc:	4798      	blx	r3
    2bde:	4603      	mov	r3, r0
}
    2be0:	4618      	mov	r0, r3
    2be2:	3708      	adds	r7, #8
    2be4:	46bd      	mov	sp, r7
    2be6:	bd80      	pop	{r7, pc}
    2be8:	00010f20 	.word	0x00010f20
    2bec:	00003cd5 	.word	0x00003cd5
    2bf0:	00005d55 	.word	0x00005d55

00002bf4 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2bf4:	b580      	push	{r7, lr}
    2bf6:	b082      	sub	sp, #8
    2bf8:	af00      	add	r7, sp, #0
    2bfa:	6078      	str	r0, [r7, #4]
    2bfc:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2bfe:	687b      	ldr	r3, [r7, #4]
    2c00:	2b00      	cmp	r3, #0
    2c02:	d004      	beq.n	2c0e <qspi_sync_serial_run_command+0x1a>
    2c04:	683b      	ldr	r3, [r7, #0]
    2c06:	2b00      	cmp	r3, #0
    2c08:	d001      	beq.n	2c0e <qspi_sync_serial_run_command+0x1a>
    2c0a:	2301      	movs	r3, #1
    2c0c:	e000      	b.n	2c10 <qspi_sync_serial_run_command+0x1c>
    2c0e:	2300      	movs	r3, #0
    2c10:	f003 0301 	and.w	r3, r3, #1
    2c14:	b2db      	uxtb	r3, r3
    2c16:	224d      	movs	r2, #77	; 0x4d
    2c18:	4906      	ldr	r1, [pc, #24]	; (2c34 <qspi_sync_serial_run_command+0x40>)
    2c1a:	4618      	mov	r0, r3
    2c1c:	4b06      	ldr	r3, [pc, #24]	; (2c38 <qspi_sync_serial_run_command+0x44>)
    2c1e:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2c20:	687b      	ldr	r3, [r7, #4]
    2c22:	6839      	ldr	r1, [r7, #0]
    2c24:	4618      	mov	r0, r3
    2c26:	4b05      	ldr	r3, [pc, #20]	; (2c3c <qspi_sync_serial_run_command+0x48>)
    2c28:	4798      	blx	r3
    2c2a:	4603      	mov	r3, r0
}
    2c2c:	4618      	mov	r0, r3
    2c2e:	3708      	adds	r7, #8
    2c30:	46bd      	mov	sp, r7
    2c32:	bd80      	pop	{r7, pc}
    2c34:	00010f20 	.word	0x00010f20
    2c38:	00003cd5 	.word	0x00003cd5
    2c3c:	00005ea1 	.word	0x00005ea1

00002c40 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2c40:	b580      	push	{r7, lr}
    2c42:	b084      	sub	sp, #16
    2c44:	af00      	add	r7, sp, #0
    2c46:	6078      	str	r0, [r7, #4]
    2c48:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2c4a:	2300      	movs	r3, #0
    2c4c:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2c4e:	687b      	ldr	r3, [r7, #4]
    2c50:	2b00      	cmp	r3, #0
    2c52:	d004      	beq.n	2c5e <spi_m_sync_init+0x1e>
    2c54:	683b      	ldr	r3, [r7, #0]
    2c56:	2b00      	cmp	r3, #0
    2c58:	d001      	beq.n	2c5e <spi_m_sync_init+0x1e>
    2c5a:	2301      	movs	r3, #1
    2c5c:	e000      	b.n	2c60 <spi_m_sync_init+0x20>
    2c5e:	2300      	movs	r3, #0
    2c60:	f003 0301 	and.w	r3, r3, #1
    2c64:	b2db      	uxtb	r3, r3
    2c66:	2240      	movs	r2, #64	; 0x40
    2c68:	4910      	ldr	r1, [pc, #64]	; (2cac <spi_m_sync_init+0x6c>)
    2c6a:	4618      	mov	r0, r3
    2c6c:	4b10      	ldr	r3, [pc, #64]	; (2cb0 <spi_m_sync_init+0x70>)
    2c6e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2c70:	687b      	ldr	r3, [r7, #4]
    2c72:	683a      	ldr	r2, [r7, #0]
    2c74:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2c76:	687b      	ldr	r3, [r7, #4]
    2c78:	3304      	adds	r3, #4
    2c7a:	6839      	ldr	r1, [r7, #0]
    2c7c:	4618      	mov	r0, r3
    2c7e:	4b0d      	ldr	r3, [pc, #52]	; (2cb4 <spi_m_sync_init+0x74>)
    2c80:	4798      	blx	r3
    2c82:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2c84:	68fb      	ldr	r3, [r7, #12]
    2c86:	2b00      	cmp	r3, #0
    2c88:	da01      	bge.n	2c8e <spi_m_sync_init+0x4e>
		return rc;
    2c8a:	68fb      	ldr	r3, [r7, #12]
    2c8c:	e00a      	b.n	2ca4 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2c8e:	687b      	ldr	r3, [r7, #4]
    2c90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2c94:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2c96:	687b      	ldr	r3, [r7, #4]
    2c98:	4a07      	ldr	r2, [pc, #28]	; (2cb8 <spi_m_sync_init+0x78>)
    2c9a:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2c9c:	687b      	ldr	r3, [r7, #4]
    2c9e:	4a07      	ldr	r2, [pc, #28]	; (2cbc <spi_m_sync_init+0x7c>)
    2ca0:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2ca2:	2300      	movs	r3, #0
}
    2ca4:	4618      	mov	r0, r3
    2ca6:	3710      	adds	r7, #16
    2ca8:	46bd      	mov	sp, r7
    2caa:	bd80      	pop	{r7, pc}
    2cac:	00010f3c 	.word	0x00010f3c
    2cb0:	00003cd5 	.word	0x00003cd5
    2cb4:	00007621 	.word	0x00007621
    2cb8:	00002d39 	.word	0x00002d39
    2cbc:	00002d91 	.word	0x00002d91

00002cc0 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    2cc0:	b580      	push	{r7, lr}
    2cc2:	b082      	sub	sp, #8
    2cc4:	af00      	add	r7, sp, #0
    2cc6:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2cc8:	687b      	ldr	r3, [r7, #4]
    2cca:	2b00      	cmp	r3, #0
    2ccc:	bf14      	ite	ne
    2cce:	2301      	movne	r3, #1
    2cd0:	2300      	moveq	r3, #0
    2cd2:	b2db      	uxtb	r3, r3
    2cd4:	2257      	movs	r2, #87	; 0x57
    2cd6:	4906      	ldr	r1, [pc, #24]	; (2cf0 <spi_m_sync_enable+0x30>)
    2cd8:	4618      	mov	r0, r3
    2cda:	4b06      	ldr	r3, [pc, #24]	; (2cf4 <spi_m_sync_enable+0x34>)
    2cdc:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    2cde:	687b      	ldr	r3, [r7, #4]
    2ce0:	3304      	adds	r3, #4
    2ce2:	4618      	mov	r0, r3
    2ce4:	4b04      	ldr	r3, [pc, #16]	; (2cf8 <spi_m_sync_enable+0x38>)
    2ce6:	4798      	blx	r3
}
    2ce8:	bf00      	nop
    2cea:	3708      	adds	r7, #8
    2cec:	46bd      	mov	sp, r7
    2cee:	bd80      	pop	{r7, pc}
    2cf0:	00010f3c 	.word	0x00010f3c
    2cf4:	00003cd5 	.word	0x00003cd5
    2cf8:	0000772d 	.word	0x0000772d

00002cfc <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    2cfc:	b580      	push	{r7, lr}
    2cfe:	b082      	sub	sp, #8
    2d00:	af00      	add	r7, sp, #0
    2d02:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2d04:	687b      	ldr	r3, [r7, #4]
    2d06:	2b00      	cmp	r3, #0
    2d08:	bf14      	ite	ne
    2d0a:	2301      	movne	r3, #1
    2d0c:	2300      	moveq	r3, #0
    2d0e:	b2db      	uxtb	r3, r3
    2d10:	225d      	movs	r2, #93	; 0x5d
    2d12:	4906      	ldr	r1, [pc, #24]	; (2d2c <spi_m_sync_disable+0x30>)
    2d14:	4618      	mov	r0, r3
    2d16:	4b06      	ldr	r3, [pc, #24]	; (2d30 <spi_m_sync_disable+0x34>)
    2d18:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    2d1a:	687b      	ldr	r3, [r7, #4]
    2d1c:	3304      	adds	r3, #4
    2d1e:	4618      	mov	r0, r3
    2d20:	4b04      	ldr	r3, [pc, #16]	; (2d34 <spi_m_sync_disable+0x38>)
    2d22:	4798      	blx	r3
}
    2d24:	bf00      	nop
    2d26:	3708      	adds	r7, #8
    2d28:	46bd      	mov	sp, r7
    2d2a:	bd80      	pop	{r7, pc}
    2d2c:	00010f3c 	.word	0x00010f3c
    2d30:	00003cd5 	.word	0x00003cd5
    2d34:	0000777d 	.word	0x0000777d

00002d38 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2d38:	b580      	push	{r7, lr}
    2d3a:	b088      	sub	sp, #32
    2d3c:	af00      	add	r7, sp, #0
    2d3e:	60f8      	str	r0, [r7, #12]
    2d40:	60b9      	str	r1, [r7, #8]
    2d42:	4613      	mov	r3, r2
    2d44:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2d46:	68fb      	ldr	r3, [r7, #12]
    2d48:	2b00      	cmp	r3, #0
    2d4a:	bf14      	ite	ne
    2d4c:	2301      	movne	r3, #1
    2d4e:	2300      	moveq	r3, #0
    2d50:	b2db      	uxtb	r3, r3
    2d52:	2287      	movs	r2, #135	; 0x87
    2d54:	490b      	ldr	r1, [pc, #44]	; (2d84 <_spi_m_sync_io_read+0x4c>)
    2d56:	4618      	mov	r0, r3
    2d58:	4b0b      	ldr	r3, [pc, #44]	; (2d88 <_spi_m_sync_io_read+0x50>)
    2d5a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2d5c:	68fb      	ldr	r3, [r7, #12]
    2d5e:	3b0c      	subs	r3, #12
    2d60:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    2d62:	68bb      	ldr	r3, [r7, #8]
    2d64:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    2d66:	2300      	movs	r3, #0
    2d68:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2d6a:	88fb      	ldrh	r3, [r7, #6]
    2d6c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2d6e:	f107 0310 	add.w	r3, r7, #16
    2d72:	4619      	mov	r1, r3
    2d74:	69f8      	ldr	r0, [r7, #28]
    2d76:	4b05      	ldr	r3, [pc, #20]	; (2d8c <_spi_m_sync_io_read+0x54>)
    2d78:	4798      	blx	r3
    2d7a:	4603      	mov	r3, r0
}
    2d7c:	4618      	mov	r0, r3
    2d7e:	3720      	adds	r7, #32
    2d80:	46bd      	mov	sp, r7
    2d82:	bd80      	pop	{r7, pc}
    2d84:	00010f3c 	.word	0x00010f3c
    2d88:	00003cd5 	.word	0x00003cd5
    2d8c:	00002de9 	.word	0x00002de9

00002d90 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2d90:	b580      	push	{r7, lr}
    2d92:	b088      	sub	sp, #32
    2d94:	af00      	add	r7, sp, #0
    2d96:	60f8      	str	r0, [r7, #12]
    2d98:	60b9      	str	r1, [r7, #8]
    2d9a:	4613      	mov	r3, r2
    2d9c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2d9e:	68fb      	ldr	r3, [r7, #12]
    2da0:	2b00      	cmp	r3, #0
    2da2:	bf14      	ite	ne
    2da4:	2301      	movne	r3, #1
    2da6:	2300      	moveq	r3, #0
    2da8:	b2db      	uxtb	r3, r3
    2daa:	22a3      	movs	r2, #163	; 0xa3
    2dac:	490b      	ldr	r1, [pc, #44]	; (2ddc <_spi_m_sync_io_write+0x4c>)
    2dae:	4618      	mov	r0, r3
    2db0:	4b0b      	ldr	r3, [pc, #44]	; (2de0 <_spi_m_sync_io_write+0x50>)
    2db2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2db4:	68fb      	ldr	r3, [r7, #12]
    2db6:	3b0c      	subs	r3, #12
    2db8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2dba:	2300      	movs	r3, #0
    2dbc:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2dbe:	68bb      	ldr	r3, [r7, #8]
    2dc0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2dc2:	88fb      	ldrh	r3, [r7, #6]
    2dc4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2dc6:	f107 0310 	add.w	r3, r7, #16
    2dca:	4619      	mov	r1, r3
    2dcc:	69f8      	ldr	r0, [r7, #28]
    2dce:	4b05      	ldr	r3, [pc, #20]	; (2de4 <_spi_m_sync_io_write+0x54>)
    2dd0:	4798      	blx	r3
    2dd2:	4603      	mov	r3, r0
}
    2dd4:	4618      	mov	r0, r3
    2dd6:	3720      	adds	r7, #32
    2dd8:	46bd      	mov	sp, r7
    2dda:	bd80      	pop	{r7, pc}
    2ddc:	00010f3c 	.word	0x00010f3c
    2de0:	00003cd5 	.word	0x00003cd5
    2de4:	00002de9 	.word	0x00002de9

00002de8 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2de8:	b580      	push	{r7, lr}
    2dea:	b086      	sub	sp, #24
    2dec:	af00      	add	r7, sp, #0
    2dee:	6078      	str	r0, [r7, #4]
    2df0:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2df2:	687b      	ldr	r3, [r7, #4]
    2df4:	2b00      	cmp	r3, #0
    2df6:	d004      	beq.n	2e02 <spi_m_sync_transfer+0x1a>
    2df8:	683b      	ldr	r3, [r7, #0]
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	d001      	beq.n	2e02 <spi_m_sync_transfer+0x1a>
    2dfe:	2301      	movs	r3, #1
    2e00:	e000      	b.n	2e04 <spi_m_sync_transfer+0x1c>
    2e02:	2300      	movs	r3, #0
    2e04:	f003 0301 	and.w	r3, r3, #1
    2e08:	b2db      	uxtb	r3, r3
    2e0a:	22b3      	movs	r2, #179	; 0xb3
    2e0c:	490c      	ldr	r1, [pc, #48]	; (2e40 <spi_m_sync_transfer+0x58>)
    2e0e:	4618      	mov	r0, r3
    2e10:	4b0c      	ldr	r3, [pc, #48]	; (2e44 <spi_m_sync_transfer+0x5c>)
    2e12:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2e14:	683b      	ldr	r3, [r7, #0]
    2e16:	681b      	ldr	r3, [r3, #0]
    2e18:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2e1a:	683b      	ldr	r3, [r7, #0]
    2e1c:	685b      	ldr	r3, [r3, #4]
    2e1e:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2e20:	683b      	ldr	r3, [r7, #0]
    2e22:	689b      	ldr	r3, [r3, #8]
    2e24:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2e26:	687b      	ldr	r3, [r7, #4]
    2e28:	3304      	adds	r3, #4
    2e2a:	f107 020c 	add.w	r2, r7, #12
    2e2e:	4611      	mov	r1, r2
    2e30:	4618      	mov	r0, r3
    2e32:	4b05      	ldr	r3, [pc, #20]	; (2e48 <spi_m_sync_transfer+0x60>)
    2e34:	4798      	blx	r3
    2e36:	4603      	mov	r3, r0
}
    2e38:	4618      	mov	r0, r3
    2e3a:	3718      	adds	r7, #24
    2e3c:	46bd      	mov	sp, r7
    2e3e:	bd80      	pop	{r7, pc}
    2e40:	00010f3c 	.word	0x00010f3c
    2e44:	00003cd5 	.word	0x00003cd5
    2e48:	00007921 	.word	0x00007921

00002e4c <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    2e4c:	b580      	push	{r7, lr}
    2e4e:	b082      	sub	sp, #8
    2e50:	af00      	add	r7, sp, #0
    2e52:	6078      	str	r0, [r7, #4]
    2e54:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    2e56:	687b      	ldr	r3, [r7, #4]
    2e58:	2b00      	cmp	r3, #0
    2e5a:	d004      	beq.n	2e66 <spi_m_sync_get_io_descriptor+0x1a>
    2e5c:	683b      	ldr	r3, [r7, #0]
    2e5e:	2b00      	cmp	r3, #0
    2e60:	d001      	beq.n	2e66 <spi_m_sync_get_io_descriptor+0x1a>
    2e62:	2301      	movs	r3, #1
    2e64:	e000      	b.n	2e68 <spi_m_sync_get_io_descriptor+0x1c>
    2e66:	2300      	movs	r3, #0
    2e68:	f003 0301 	and.w	r3, r3, #1
    2e6c:	b2db      	uxtb	r3, r3
    2e6e:	22bd      	movs	r2, #189	; 0xbd
    2e70:	4906      	ldr	r1, [pc, #24]	; (2e8c <spi_m_sync_get_io_descriptor+0x40>)
    2e72:	4618      	mov	r0, r3
    2e74:	4b06      	ldr	r3, [pc, #24]	; (2e90 <spi_m_sync_get_io_descriptor+0x44>)
    2e76:	4798      	blx	r3
	*io = &spi->io;
    2e78:	687b      	ldr	r3, [r7, #4]
    2e7a:	f103 020c 	add.w	r2, r3, #12
    2e7e:	683b      	ldr	r3, [r7, #0]
    2e80:	601a      	str	r2, [r3, #0]
	return 0;
    2e82:	2300      	movs	r3, #0
}
    2e84:	4618      	mov	r0, r3
    2e86:	3708      	adds	r7, #8
    2e88:	46bd      	mov	sp, r7
    2e8a:	bd80      	pop	{r7, pc}
    2e8c:	00010f3c 	.word	0x00010f3c
    2e90:	00003cd5 	.word	0x00003cd5

00002e94 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2e94:	b480      	push	{r7}
    2e96:	b083      	sub	sp, #12
    2e98:	af00      	add	r7, sp, #0
    2e9a:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2e9c:	687b      	ldr	r3, [r7, #4]
    2e9e:	681b      	ldr	r3, [r3, #0]
}
    2ea0:	4618      	mov	r0, r3
    2ea2:	370c      	adds	r7, #12
    2ea4:	46bd      	mov	sp, r7
    2ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2eaa:	4770      	bx	lr

00002eac <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2eac:	b480      	push	{r7}
    2eae:	b083      	sub	sp, #12
    2eb0:	af00      	add	r7, sp, #0
    2eb2:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2eb4:	687b      	ldr	r3, [r7, #4]
    2eb6:	2b00      	cmp	r3, #0
    2eb8:	d002      	beq.n	2ec0 <list_get_next_element+0x14>
    2eba:	687b      	ldr	r3, [r7, #4]
    2ebc:	681b      	ldr	r3, [r3, #0]
    2ebe:	e000      	b.n	2ec2 <list_get_next_element+0x16>
    2ec0:	2300      	movs	r3, #0
}
    2ec2:	4618      	mov	r0, r3
    2ec4:	370c      	adds	r7, #12
    2ec6:	46bd      	mov	sp, r7
    2ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ecc:	4770      	bx	lr
	...

00002ed0 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2ed0:	b580      	push	{r7, lr}
    2ed2:	b084      	sub	sp, #16
    2ed4:	af00      	add	r7, sp, #0
    2ed6:	60f8      	str	r0, [r7, #12]
    2ed8:	60b9      	str	r1, [r7, #8]
    2eda:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2edc:	68fb      	ldr	r3, [r7, #12]
    2ede:	2b00      	cmp	r3, #0
    2ee0:	d007      	beq.n	2ef2 <timer_init+0x22>
    2ee2:	68bb      	ldr	r3, [r7, #8]
    2ee4:	2b00      	cmp	r3, #0
    2ee6:	d004      	beq.n	2ef2 <timer_init+0x22>
    2ee8:	687b      	ldr	r3, [r7, #4]
    2eea:	2b00      	cmp	r3, #0
    2eec:	d001      	beq.n	2ef2 <timer_init+0x22>
    2eee:	2301      	movs	r3, #1
    2ef0:	e000      	b.n	2ef4 <timer_init+0x24>
    2ef2:	2300      	movs	r3, #0
    2ef4:	f003 0301 	and.w	r3, r3, #1
    2ef8:	b2db      	uxtb	r3, r3
    2efa:	223b      	movs	r2, #59	; 0x3b
    2efc:	490c      	ldr	r1, [pc, #48]	; (2f30 <timer_init+0x60>)
    2efe:	4618      	mov	r0, r3
    2f00:	4b0c      	ldr	r3, [pc, #48]	; (2f34 <timer_init+0x64>)
    2f02:	4798      	blx	r3
	descr->func = func;
    2f04:	68fb      	ldr	r3, [r7, #12]
    2f06:	687a      	ldr	r2, [r7, #4]
    2f08:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    2f0a:	68fb      	ldr	r3, [r7, #12]
    2f0c:	681b      	ldr	r3, [r3, #0]
    2f0e:	681b      	ldr	r3, [r3, #0]
    2f10:	68fa      	ldr	r2, [r7, #12]
    2f12:	3204      	adds	r2, #4
    2f14:	68b9      	ldr	r1, [r7, #8]
    2f16:	4610      	mov	r0, r2
    2f18:	4798      	blx	r3
	descr->time                           = 0;
    2f1a:	68fb      	ldr	r3, [r7, #12]
    2f1c:	2200      	movs	r2, #0
    2f1e:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2f20:	68fb      	ldr	r3, [r7, #12]
    2f22:	4a05      	ldr	r2, [pc, #20]	; (2f38 <timer_init+0x68>)
    2f24:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    2f26:	2300      	movs	r3, #0
}
    2f28:	4618      	mov	r0, r3
    2f2a:	3710      	adds	r7, #16
    2f2c:	46bd      	mov	sp, r7
    2f2e:	bd80      	pop	{r7, pc}
    2f30:	00010f58 	.word	0x00010f58
    2f34:	00003cd5 	.word	0x00003cd5
    2f38:	000032c1 	.word	0x000032c1

00002f3c <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2f3c:	b580      	push	{r7, lr}
    2f3e:	b082      	sub	sp, #8
    2f40:	af00      	add	r7, sp, #0
    2f42:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2f44:	687b      	ldr	r3, [r7, #4]
    2f46:	2b00      	cmp	r3, #0
    2f48:	d005      	beq.n	2f56 <timer_start+0x1a>
    2f4a:	687b      	ldr	r3, [r7, #4]
    2f4c:	681b      	ldr	r3, [r3, #0]
    2f4e:	2b00      	cmp	r3, #0
    2f50:	d001      	beq.n	2f56 <timer_start+0x1a>
    2f52:	2301      	movs	r3, #1
    2f54:	e000      	b.n	2f58 <timer_start+0x1c>
    2f56:	2300      	movs	r3, #0
    2f58:	f003 0301 	and.w	r3, r3, #1
    2f5c:	b2db      	uxtb	r3, r3
    2f5e:	2254      	movs	r2, #84	; 0x54
    2f60:	490e      	ldr	r1, [pc, #56]	; (2f9c <timer_start+0x60>)
    2f62:	4618      	mov	r0, r3
    2f64:	4b0e      	ldr	r3, [pc, #56]	; (2fa0 <timer_start+0x64>)
    2f66:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    2f68:	687b      	ldr	r3, [r7, #4]
    2f6a:	681b      	ldr	r3, [r3, #0]
    2f6c:	699b      	ldr	r3, [r3, #24]
    2f6e:	687a      	ldr	r2, [r7, #4]
    2f70:	3204      	adds	r2, #4
    2f72:	4610      	mov	r0, r2
    2f74:	4798      	blx	r3
    2f76:	4603      	mov	r3, r0
    2f78:	2b00      	cmp	r3, #0
    2f7a:	d002      	beq.n	2f82 <timer_start+0x46>
		return ERR_DENIED;
    2f7c:	f06f 0310 	mvn.w	r3, #16
    2f80:	e007      	b.n	2f92 <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    2f82:	687b      	ldr	r3, [r7, #4]
    2f84:	681b      	ldr	r3, [r3, #0]
    2f86:	689b      	ldr	r3, [r3, #8]
    2f88:	687a      	ldr	r2, [r7, #4]
    2f8a:	3204      	adds	r2, #4
    2f8c:	4610      	mov	r0, r2
    2f8e:	4798      	blx	r3

	return ERR_NONE;
    2f90:	2300      	movs	r3, #0
}
    2f92:	4618      	mov	r0, r3
    2f94:	3708      	adds	r7, #8
    2f96:	46bd      	mov	sp, r7
    2f98:	bd80      	pop	{r7, pc}
    2f9a:	bf00      	nop
    2f9c:	00010f58 	.word	0x00010f58
    2fa0:	00003cd5 	.word	0x00003cd5

00002fa4 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    2fa4:	b580      	push	{r7, lr}
    2fa6:	b082      	sub	sp, #8
    2fa8:	af00      	add	r7, sp, #0
    2faa:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2fac:	687b      	ldr	r3, [r7, #4]
    2fae:	2b00      	cmp	r3, #0
    2fb0:	d005      	beq.n	2fbe <timer_stop+0x1a>
    2fb2:	687b      	ldr	r3, [r7, #4]
    2fb4:	681b      	ldr	r3, [r3, #0]
    2fb6:	2b00      	cmp	r3, #0
    2fb8:	d001      	beq.n	2fbe <timer_stop+0x1a>
    2fba:	2301      	movs	r3, #1
    2fbc:	e000      	b.n	2fc0 <timer_stop+0x1c>
    2fbe:	2300      	movs	r3, #0
    2fc0:	f003 0301 	and.w	r3, r3, #1
    2fc4:	b2db      	uxtb	r3, r3
    2fc6:	2262      	movs	r2, #98	; 0x62
    2fc8:	490f      	ldr	r1, [pc, #60]	; (3008 <timer_stop+0x64>)
    2fca:	4618      	mov	r0, r3
    2fcc:	4b0f      	ldr	r3, [pc, #60]	; (300c <timer_stop+0x68>)
    2fce:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    2fd0:	687b      	ldr	r3, [r7, #4]
    2fd2:	681b      	ldr	r3, [r3, #0]
    2fd4:	699b      	ldr	r3, [r3, #24]
    2fd6:	687a      	ldr	r2, [r7, #4]
    2fd8:	3204      	adds	r2, #4
    2fda:	4610      	mov	r0, r2
    2fdc:	4798      	blx	r3
    2fde:	4603      	mov	r3, r0
    2fe0:	f083 0301 	eor.w	r3, r3, #1
    2fe4:	b2db      	uxtb	r3, r3
    2fe6:	2b00      	cmp	r3, #0
    2fe8:	d002      	beq.n	2ff0 <timer_stop+0x4c>
		return ERR_DENIED;
    2fea:	f06f 0310 	mvn.w	r3, #16
    2fee:	e007      	b.n	3000 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    2ff0:	687b      	ldr	r3, [r7, #4]
    2ff2:	681b      	ldr	r3, [r3, #0]
    2ff4:	68db      	ldr	r3, [r3, #12]
    2ff6:	687a      	ldr	r2, [r7, #4]
    2ff8:	3204      	adds	r2, #4
    2ffa:	4610      	mov	r0, r2
    2ffc:	4798      	blx	r3

	return ERR_NONE;
    2ffe:	2300      	movs	r3, #0
}
    3000:	4618      	mov	r0, r3
    3002:	3708      	adds	r7, #8
    3004:	46bd      	mov	sp, r7
    3006:	bd80      	pop	{r7, pc}
    3008:	00010f58 	.word	0x00010f58
    300c:	00003cd5 	.word	0x00003cd5

00003010 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    3010:	b580      	push	{r7, lr}
    3012:	b084      	sub	sp, #16
    3014:	af00      	add	r7, sp, #0
    3016:	6078      	str	r0, [r7, #4]
    3018:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    301a:	687b      	ldr	r3, [r7, #4]
    301c:	2b00      	cmp	r3, #0
    301e:	d008      	beq.n	3032 <timer_add_task+0x22>
    3020:	683b      	ldr	r3, [r7, #0]
    3022:	2b00      	cmp	r3, #0
    3024:	d005      	beq.n	3032 <timer_add_task+0x22>
    3026:	687b      	ldr	r3, [r7, #4]
    3028:	681b      	ldr	r3, [r3, #0]
    302a:	2b00      	cmp	r3, #0
    302c:	d001      	beq.n	3032 <timer_add_task+0x22>
    302e:	2301      	movs	r3, #1
    3030:	e000      	b.n	3034 <timer_add_task+0x24>
    3032:	2300      	movs	r3, #0
    3034:	f003 0301 	and.w	r3, r3, #1
    3038:	b2db      	uxtb	r3, r3
    303a:	227b      	movs	r2, #123	; 0x7b
    303c:	492f      	ldr	r1, [pc, #188]	; (30fc <timer_add_task+0xec>)
    303e:	4618      	mov	r0, r3
    3040:	4b2f      	ldr	r3, [pc, #188]	; (3100 <timer_add_task+0xf0>)
    3042:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3044:	687b      	ldr	r3, [r7, #4]
    3046:	7f1b      	ldrb	r3, [r3, #28]
    3048:	b2db      	uxtb	r3, r3
    304a:	f043 0301 	orr.w	r3, r3, #1
    304e:	b2da      	uxtb	r2, r3
    3050:	687b      	ldr	r3, [r7, #4]
    3052:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    3054:	687b      	ldr	r3, [r7, #4]
    3056:	3318      	adds	r3, #24
    3058:	6839      	ldr	r1, [r7, #0]
    305a:	4618      	mov	r0, r3
    305c:	4b29      	ldr	r3, [pc, #164]	; (3104 <timer_add_task+0xf4>)
    305e:	4798      	blx	r3
    3060:	4603      	mov	r3, r0
    3062:	2b00      	cmp	r3, #0
    3064:	d00f      	beq.n	3086 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3066:	687b      	ldr	r3, [r7, #4]
    3068:	7f1b      	ldrb	r3, [r3, #28]
    306a:	b2db      	uxtb	r3, r3
    306c:	f023 0301 	bic.w	r3, r3, #1
    3070:	b2da      	uxtb	r2, r3
    3072:	687b      	ldr	r3, [r7, #4]
    3074:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    3076:	2280      	movs	r2, #128	; 0x80
    3078:	4920      	ldr	r1, [pc, #128]	; (30fc <timer_add_task+0xec>)
    307a:	2000      	movs	r0, #0
    307c:	4b20      	ldr	r3, [pc, #128]	; (3100 <timer_add_task+0xf0>)
    307e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    3080:	f06f 0311 	mvn.w	r3, #17
    3084:	e035      	b.n	30f2 <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    3086:	687b      	ldr	r3, [r7, #4]
    3088:	695a      	ldr	r2, [r3, #20]
    308a:	683b      	ldr	r3, [r7, #0]
    308c:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    308e:	687b      	ldr	r3, [r7, #4]
    3090:	f103 0018 	add.w	r0, r3, #24
    3094:	687b      	ldr	r3, [r7, #4]
    3096:	695b      	ldr	r3, [r3, #20]
    3098:	461a      	mov	r2, r3
    309a:	6839      	ldr	r1, [r7, #0]
    309c:	4b1a      	ldr	r3, [pc, #104]	; (3108 <timer_add_task+0xf8>)
    309e:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    30a0:	687b      	ldr	r3, [r7, #4]
    30a2:	7f1b      	ldrb	r3, [r3, #28]
    30a4:	b2db      	uxtb	r3, r3
    30a6:	f023 0301 	bic.w	r3, r3, #1
    30aa:	b2da      	uxtb	r2, r3
    30ac:	687b      	ldr	r3, [r7, #4]
    30ae:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    30b0:	687b      	ldr	r3, [r7, #4]
    30b2:	7f1b      	ldrb	r3, [r3, #28]
    30b4:	b2db      	uxtb	r3, r3
    30b6:	f003 0302 	and.w	r3, r3, #2
    30ba:	2b00      	cmp	r3, #0
    30bc:	d018      	beq.n	30f0 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    30be:	f107 030c 	add.w	r3, r7, #12
    30c2:	4618      	mov	r0, r3
    30c4:	4b11      	ldr	r3, [pc, #68]	; (310c <timer_add_task+0xfc>)
    30c6:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    30c8:	687b      	ldr	r3, [r7, #4]
    30ca:	7f1b      	ldrb	r3, [r3, #28]
    30cc:	b2db      	uxtb	r3, r3
    30ce:	f023 0302 	bic.w	r3, r3, #2
    30d2:	b2da      	uxtb	r2, r3
    30d4:	687b      	ldr	r3, [r7, #4]
    30d6:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    30d8:	687b      	ldr	r3, [r7, #4]
    30da:	681b      	ldr	r3, [r3, #0]
    30dc:	69db      	ldr	r3, [r3, #28]
    30de:	687a      	ldr	r2, [r7, #4]
    30e0:	3204      	adds	r2, #4
    30e2:	4610      	mov	r0, r2
    30e4:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    30e6:	f107 030c 	add.w	r3, r7, #12
    30ea:	4618      	mov	r0, r3
    30ec:	4b08      	ldr	r3, [pc, #32]	; (3110 <timer_add_task+0x100>)
    30ee:	4798      	blx	r3
	}

	return ERR_NONE;
    30f0:	2300      	movs	r3, #0
}
    30f2:	4618      	mov	r0, r3
    30f4:	3710      	adds	r7, #16
    30f6:	46bd      	mov	sp, r7
    30f8:	bd80      	pop	{r7, pc}
    30fa:	bf00      	nop
    30fc:	00010f58 	.word	0x00010f58
    3100:	00003cd5 	.word	0x00003cd5
    3104:	00003cfd 	.word	0x00003cfd
    3108:	00003211 	.word	0x00003211
    310c:	0000bccd 	.word	0x0000bccd
    3110:	0000bcf3 	.word	0x0000bcf3

00003114 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    3114:	b580      	push	{r7, lr}
    3116:	b084      	sub	sp, #16
    3118:	af00      	add	r7, sp, #0
    311a:	6078      	str	r0, [r7, #4]
    311c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    311e:	687b      	ldr	r3, [r7, #4]
    3120:	2b00      	cmp	r3, #0
    3122:	d008      	beq.n	3136 <timer_remove_task+0x22>
    3124:	683b      	ldr	r3, [r7, #0]
    3126:	2b00      	cmp	r3, #0
    3128:	d005      	beq.n	3136 <timer_remove_task+0x22>
    312a:	687b      	ldr	r3, [r7, #4]
    312c:	681b      	ldr	r3, [r3, #0]
    312e:	2b00      	cmp	r3, #0
    3130:	d001      	beq.n	3136 <timer_remove_task+0x22>
    3132:	2301      	movs	r3, #1
    3134:	e000      	b.n	3138 <timer_remove_task+0x24>
    3136:	2300      	movs	r3, #0
    3138:	f003 0301 	and.w	r3, r3, #1
    313c:	b2db      	uxtb	r3, r3
    313e:	2296      	movs	r2, #150	; 0x96
    3140:	492d      	ldr	r1, [pc, #180]	; (31f8 <timer_remove_task+0xe4>)
    3142:	4618      	mov	r0, r3
    3144:	4b2d      	ldr	r3, [pc, #180]	; (31fc <timer_remove_task+0xe8>)
    3146:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3148:	687b      	ldr	r3, [r7, #4]
    314a:	7f1b      	ldrb	r3, [r3, #28]
    314c:	b2db      	uxtb	r3, r3
    314e:	f043 0301 	orr.w	r3, r3, #1
    3152:	b2da      	uxtb	r2, r3
    3154:	687b      	ldr	r3, [r7, #4]
    3156:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    3158:	687b      	ldr	r3, [r7, #4]
    315a:	3318      	adds	r3, #24
    315c:	6839      	ldr	r1, [r7, #0]
    315e:	4618      	mov	r0, r3
    3160:	4b27      	ldr	r3, [pc, #156]	; (3200 <timer_remove_task+0xec>)
    3162:	4798      	blx	r3
    3164:	4603      	mov	r3, r0
    3166:	f083 0301 	eor.w	r3, r3, #1
    316a:	b2db      	uxtb	r3, r3
    316c:	2b00      	cmp	r3, #0
    316e:	d00f      	beq.n	3190 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3170:	687b      	ldr	r3, [r7, #4]
    3172:	7f1b      	ldrb	r3, [r3, #28]
    3174:	b2db      	uxtb	r3, r3
    3176:	f023 0301 	bic.w	r3, r3, #1
    317a:	b2da      	uxtb	r2, r3
    317c:	687b      	ldr	r3, [r7, #4]
    317e:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    3180:	229b      	movs	r2, #155	; 0x9b
    3182:	491d      	ldr	r1, [pc, #116]	; (31f8 <timer_remove_task+0xe4>)
    3184:	2000      	movs	r0, #0
    3186:	4b1d      	ldr	r3, [pc, #116]	; (31fc <timer_remove_task+0xe8>)
    3188:	4798      	blx	r3
		return ERR_NOT_FOUND;
    318a:	f06f 0309 	mvn.w	r3, #9
    318e:	e02e      	b.n	31ee <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    3190:	687b      	ldr	r3, [r7, #4]
    3192:	3318      	adds	r3, #24
    3194:	6839      	ldr	r1, [r7, #0]
    3196:	4618      	mov	r0, r3
    3198:	4b1a      	ldr	r3, [pc, #104]	; (3204 <timer_remove_task+0xf0>)
    319a:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    319c:	687b      	ldr	r3, [r7, #4]
    319e:	7f1b      	ldrb	r3, [r3, #28]
    31a0:	b2db      	uxtb	r3, r3
    31a2:	f023 0301 	bic.w	r3, r3, #1
    31a6:	b2da      	uxtb	r2, r3
    31a8:	687b      	ldr	r3, [r7, #4]
    31aa:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    31ac:	687b      	ldr	r3, [r7, #4]
    31ae:	7f1b      	ldrb	r3, [r3, #28]
    31b0:	b2db      	uxtb	r3, r3
    31b2:	f003 0302 	and.w	r3, r3, #2
    31b6:	2b00      	cmp	r3, #0
    31b8:	d018      	beq.n	31ec <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    31ba:	f107 030c 	add.w	r3, r7, #12
    31be:	4618      	mov	r0, r3
    31c0:	4b11      	ldr	r3, [pc, #68]	; (3208 <timer_remove_task+0xf4>)
    31c2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    31c4:	687b      	ldr	r3, [r7, #4]
    31c6:	7f1b      	ldrb	r3, [r3, #28]
    31c8:	b2db      	uxtb	r3, r3
    31ca:	f023 0302 	bic.w	r3, r3, #2
    31ce:	b2da      	uxtb	r2, r3
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    31d4:	687b      	ldr	r3, [r7, #4]
    31d6:	681b      	ldr	r3, [r3, #0]
    31d8:	69db      	ldr	r3, [r3, #28]
    31da:	687a      	ldr	r2, [r7, #4]
    31dc:	3204      	adds	r2, #4
    31de:	4610      	mov	r0, r2
    31e0:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    31e2:	f107 030c 	add.w	r3, r7, #12
    31e6:	4618      	mov	r0, r3
    31e8:	4b08      	ldr	r3, [pc, #32]	; (320c <timer_remove_task+0xf8>)
    31ea:	4798      	blx	r3
	}

	return ERR_NONE;
    31ec:	2300      	movs	r3, #0
}
    31ee:	4618      	mov	r0, r3
    31f0:	3710      	adds	r7, #16
    31f2:	46bd      	mov	sp, r7
    31f4:	bd80      	pop	{r7, pc}
    31f6:	bf00      	nop
    31f8:	00010f58 	.word	0x00010f58
    31fc:	00003cd5 	.word	0x00003cd5
    3200:	00003cfd 	.word	0x00003cfd
    3204:	00003e5f 	.word	0x00003e5f
    3208:	0000bccd 	.word	0x0000bccd
    320c:	0000bcf3 	.word	0x0000bcf3

00003210 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    3210:	b580      	push	{r7, lr}
    3212:	b088      	sub	sp, #32
    3214:	af00      	add	r7, sp, #0
    3216:	60f8      	str	r0, [r7, #12]
    3218:	60b9      	str	r1, [r7, #8]
    321a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    321c:	2300      	movs	r3, #0
    321e:	61bb      	str	r3, [r7, #24]
    3220:	68f8      	ldr	r0, [r7, #12]
    3222:	4b23      	ldr	r3, [pc, #140]	; (32b0 <timer_add_timer_task+0xa0>)
    3224:	4798      	blx	r3
    3226:	6138      	str	r0, [r7, #16]

	if (!head) {
    3228:	693b      	ldr	r3, [r7, #16]
    322a:	2b00      	cmp	r3, #0
    322c:	d104      	bne.n	3238 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    322e:	68b9      	ldr	r1, [r7, #8]
    3230:	68f8      	ldr	r0, [r7, #12]
    3232:	4b20      	ldr	r3, [pc, #128]	; (32b4 <timer_add_timer_task+0xa4>)
    3234:	4798      	blx	r3
		return;
    3236:	e037      	b.n	32a8 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3238:	693b      	ldr	r3, [r7, #16]
    323a:	61fb      	str	r3, [r7, #28]
    323c:	e022      	b.n	3284 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    323e:	69fb      	ldr	r3, [r7, #28]
    3240:	685a      	ldr	r2, [r3, #4]
    3242:	687b      	ldr	r3, [r7, #4]
    3244:	429a      	cmp	r2, r3
    3246:	d808      	bhi.n	325a <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    3248:	69fb      	ldr	r3, [r7, #28]
    324a:	689a      	ldr	r2, [r3, #8]
    324c:	69fb      	ldr	r3, [r7, #28]
    324e:	6859      	ldr	r1, [r3, #4]
    3250:	687b      	ldr	r3, [r7, #4]
    3252:	1acb      	subs	r3, r1, r3
    3254:	4413      	add	r3, r2
    3256:	617b      	str	r3, [r7, #20]
    3258:	e009      	b.n	326e <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    325a:	69fb      	ldr	r3, [r7, #28]
    325c:	689a      	ldr	r2, [r3, #8]
    325e:	69fb      	ldr	r3, [r7, #28]
    3260:	685b      	ldr	r3, [r3, #4]
    3262:	441a      	add	r2, r3
    3264:	687b      	ldr	r3, [r7, #4]
    3266:	425b      	negs	r3, r3
    3268:	4413      	add	r3, r2
    326a:	3301      	adds	r3, #1
    326c:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    326e:	68bb      	ldr	r3, [r7, #8]
    3270:	689a      	ldr	r2, [r3, #8]
    3272:	697b      	ldr	r3, [r7, #20]
    3274:	429a      	cmp	r2, r3
    3276:	d909      	bls.n	328c <timer_add_timer_task+0x7c>
			break;
		prev = it;
    3278:	69fb      	ldr	r3, [r7, #28]
    327a:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    327c:	69f8      	ldr	r0, [r7, #28]
    327e:	4b0e      	ldr	r3, [pc, #56]	; (32b8 <timer_add_timer_task+0xa8>)
    3280:	4798      	blx	r3
    3282:	61f8      	str	r0, [r7, #28]
    3284:	69fb      	ldr	r3, [r7, #28]
    3286:	2b00      	cmp	r3, #0
    3288:	d1d9      	bne.n	323e <timer_add_timer_task+0x2e>
    328a:	e000      	b.n	328e <timer_add_timer_task+0x7e>
			break;
    328c:	bf00      	nop
	}

	if (it == head) {
    328e:	69fa      	ldr	r2, [r7, #28]
    3290:	693b      	ldr	r3, [r7, #16]
    3292:	429a      	cmp	r2, r3
    3294:	d104      	bne.n	32a0 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    3296:	68b9      	ldr	r1, [r7, #8]
    3298:	68f8      	ldr	r0, [r7, #12]
    329a:	4b06      	ldr	r3, [pc, #24]	; (32b4 <timer_add_timer_task+0xa4>)
    329c:	4798      	blx	r3
    329e:	e003      	b.n	32a8 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    32a0:	68b9      	ldr	r1, [r7, #8]
    32a2:	69b8      	ldr	r0, [r7, #24]
    32a4:	4b05      	ldr	r3, [pc, #20]	; (32bc <timer_add_timer_task+0xac>)
    32a6:	4798      	blx	r3
	}
}
    32a8:	3720      	adds	r7, #32
    32aa:	46bd      	mov	sp, r7
    32ac:	bd80      	pop	{r7, pc}
    32ae:	bf00      	nop
    32b0:	00002e95 	.word	0x00002e95
    32b4:	00003d35 	.word	0x00003d35
    32b8:	00002ead 	.word	0x00002ead
    32bc:	00003d8d 	.word	0x00003d8d

000032c0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    32c0:	b580      	push	{r7, lr}
    32c2:	b086      	sub	sp, #24
    32c4:	af00      	add	r7, sp, #0
    32c6:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    32c8:	687b      	ldr	r3, [r7, #4]
    32ca:	3b04      	subs	r3, #4
    32cc:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    32ce:	693b      	ldr	r3, [r7, #16]
    32d0:	3318      	adds	r3, #24
    32d2:	4618      	mov	r0, r3
    32d4:	4b27      	ldr	r3, [pc, #156]	; (3374 <timer_process_counted+0xb4>)
    32d6:	4798      	blx	r3
    32d8:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    32da:	693b      	ldr	r3, [r7, #16]
    32dc:	695b      	ldr	r3, [r3, #20]
    32de:	1c5a      	adds	r2, r3, #1
    32e0:	693b      	ldr	r3, [r7, #16]
    32e2:	615a      	str	r2, [r3, #20]
    32e4:	693b      	ldr	r3, [r7, #16]
    32e6:	695b      	ldr	r3, [r3, #20]
    32e8:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    32ea:	693b      	ldr	r3, [r7, #16]
    32ec:	7f1b      	ldrb	r3, [r3, #28]
    32ee:	b2db      	uxtb	r3, r3
    32f0:	f003 0301 	and.w	r3, r3, #1
    32f4:	2b00      	cmp	r3, #0
    32f6:	d106      	bne.n	3306 <timer_process_counted+0x46>
    32f8:	693b      	ldr	r3, [r7, #16]
    32fa:	7f1b      	ldrb	r3, [r3, #28]
    32fc:	b2db      	uxtb	r3, r3
    32fe:	f003 0302 	and.w	r3, r3, #2
    3302:	2b00      	cmp	r3, #0
    3304:	d027      	beq.n	3356 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    3306:	693b      	ldr	r3, [r7, #16]
    3308:	7f1b      	ldrb	r3, [r3, #28]
    330a:	b2db      	uxtb	r3, r3
    330c:	f043 0302 	orr.w	r3, r3, #2
    3310:	b2da      	uxtb	r2, r3
    3312:	693b      	ldr	r3, [r7, #16]
    3314:	771a      	strb	r2, [r3, #28]
		return;
    3316:	e029      	b.n	336c <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    3318:	697b      	ldr	r3, [r7, #20]
    331a:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    331c:	693b      	ldr	r3, [r7, #16]
    331e:	3318      	adds	r3, #24
    3320:	4618      	mov	r0, r3
    3322:	4b15      	ldr	r3, [pc, #84]	; (3378 <timer_process_counted+0xb8>)
    3324:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    3326:	68bb      	ldr	r3, [r7, #8]
    3328:	7c1b      	ldrb	r3, [r3, #16]
    332a:	2b01      	cmp	r3, #1
    332c:	d109      	bne.n	3342 <timer_process_counted+0x82>
			tmp->time_label = time;
    332e:	68bb      	ldr	r3, [r7, #8]
    3330:	68fa      	ldr	r2, [r7, #12]
    3332:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    3334:	693b      	ldr	r3, [r7, #16]
    3336:	3318      	adds	r3, #24
    3338:	68fa      	ldr	r2, [r7, #12]
    333a:	68b9      	ldr	r1, [r7, #8]
    333c:	4618      	mov	r0, r3
    333e:	4b0f      	ldr	r3, [pc, #60]	; (337c <timer_process_counted+0xbc>)
    3340:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    3342:	693b      	ldr	r3, [r7, #16]
    3344:	3318      	adds	r3, #24
    3346:	4618      	mov	r0, r3
    3348:	4b0a      	ldr	r3, [pc, #40]	; (3374 <timer_process_counted+0xb4>)
    334a:	4798      	blx	r3
    334c:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    334e:	68bb      	ldr	r3, [r7, #8]
    3350:	68db      	ldr	r3, [r3, #12]
    3352:	68b8      	ldr	r0, [r7, #8]
    3354:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    3356:	697b      	ldr	r3, [r7, #20]
    3358:	2b00      	cmp	r3, #0
    335a:	d007      	beq.n	336c <timer_process_counted+0xac>
    335c:	697b      	ldr	r3, [r7, #20]
    335e:	685b      	ldr	r3, [r3, #4]
    3360:	68fa      	ldr	r2, [r7, #12]
    3362:	1ad2      	subs	r2, r2, r3
    3364:	697b      	ldr	r3, [r7, #20]
    3366:	689b      	ldr	r3, [r3, #8]
    3368:	429a      	cmp	r2, r3
    336a:	d2d5      	bcs.n	3318 <timer_process_counted+0x58>
	}
}
    336c:	3718      	adds	r7, #24
    336e:	46bd      	mov	sp, r7
    3370:	bd80      	pop	{r7, pc}
    3372:	bf00      	nop
    3374:	00002e95 	.word	0x00002e95
    3378:	00003e2d 	.word	0x00003e2d
    337c:	00003211 	.word	0x00003211

00003380 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    3380:	b480      	push	{r7}
    3382:	b085      	sub	sp, #20
    3384:	af00      	add	r7, sp, #0
    3386:	4603      	mov	r3, r0
    3388:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    338a:	2300      	movs	r3, #0
    338c:	73fb      	strb	r3, [r7, #15]
    338e:	e029      	b.n	33e4 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    3390:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3394:	4a19      	ldr	r2, [pc, #100]	; (33fc <_usb_d_find_ep+0x7c>)
    3396:	015b      	lsls	r3, r3, #5
    3398:	4413      	add	r3, r2
    339a:	3301      	adds	r3, #1
    339c:	781b      	ldrb	r3, [r3, #0]
    339e:	79fa      	ldrb	r2, [r7, #7]
    33a0:	429a      	cmp	r2, r3
    33a2:	d102      	bne.n	33aa <_usb_d_find_ep+0x2a>
			return i;
    33a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    33a8:	e022      	b.n	33f0 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    33aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    33ae:	4a13      	ldr	r2, [pc, #76]	; (33fc <_usb_d_find_ep+0x7c>)
    33b0:	015b      	lsls	r3, r3, #5
    33b2:	4413      	add	r3, r2
    33b4:	781b      	ldrb	r3, [r3, #0]
    33b6:	2b00      	cmp	r3, #0
    33b8:	d10e      	bne.n	33d8 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    33ba:	79fb      	ldrb	r3, [r7, #7]
    33bc:	f003 030f 	and.w	r3, r3, #15
    33c0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    33c4:	490d      	ldr	r1, [pc, #52]	; (33fc <_usb_d_find_ep+0x7c>)
    33c6:	0152      	lsls	r2, r2, #5
    33c8:	440a      	add	r2, r1
    33ca:	3201      	adds	r2, #1
    33cc:	7812      	ldrb	r2, [r2, #0]
    33ce:	4293      	cmp	r3, r2
    33d0:	d102      	bne.n	33d8 <_usb_d_find_ep+0x58>
			return i;
    33d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    33d6:	e00b      	b.n	33f0 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    33d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    33dc:	b2db      	uxtb	r3, r3
    33de:	3301      	adds	r3, #1
    33e0:	b2db      	uxtb	r3, r3
    33e2:	73fb      	strb	r3, [r7, #15]
    33e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    33e8:	2b03      	cmp	r3, #3
    33ea:	ddd1      	ble.n	3390 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    33ec:	f04f 33ff 	mov.w	r3, #4294967295
}
    33f0:	4618      	mov	r0, r3
    33f2:	3714      	adds	r7, #20
    33f4:	46bd      	mov	sp, r7
    33f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    33fa:	4770      	bx	lr
    33fc:	20000adc 	.word	0x20000adc

00003400 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    3400:	b580      	push	{r7, lr}
    3402:	b088      	sub	sp, #32
    3404:	af00      	add	r7, sp, #0
    3406:	60ba      	str	r2, [r7, #8]
    3408:	607b      	str	r3, [r7, #4]
    340a:	4603      	mov	r3, r0
    340c:	73fb      	strb	r3, [r7, #15]
    340e:	460b      	mov	r3, r1
    3410:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    3412:	68bb      	ldr	r3, [r7, #8]
    3414:	617b      	str	r3, [r7, #20]
    3416:	687b      	ldr	r3, [r7, #4]
    3418:	61bb      	str	r3, [r7, #24]
    341a:	7bbb      	ldrb	r3, [r7, #14]
    341c:	2b00      	cmp	r3, #0
    341e:	d004      	beq.n	342a <_usb_d_trans+0x2a>
    3420:	7bfb      	ldrb	r3, [r7, #15]
    3422:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3426:	b2db      	uxtb	r3, r3
    3428:	e003      	b.n	3432 <_usb_d_trans+0x32>
    342a:	7bfb      	ldrb	r3, [r7, #15]
    342c:	f003 030f 	and.w	r3, r3, #15
    3430:	b2db      	uxtb	r3, r3
    3432:	773b      	strb	r3, [r7, #28]
    3434:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3438:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    343a:	f107 0314 	add.w	r3, r7, #20
    343e:	4618      	mov	r0, r3
    3440:	4b03      	ldr	r3, [pc, #12]	; (3450 <_usb_d_trans+0x50>)
    3442:	4798      	blx	r3
    3444:	4603      	mov	r3, r0
}
    3446:	4618      	mov	r0, r3
    3448:	3720      	adds	r7, #32
    344a:	46bd      	mov	sp, r7
    344c:	bd80      	pop	{r7, pc}
    344e:	bf00      	nop
    3450:	0000b301 	.word	0x0000b301

00003454 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    3454:	b480      	push	{r7}
    3456:	b085      	sub	sp, #20
    3458:	af00      	add	r7, sp, #0
    345a:	60f8      	str	r0, [r7, #12]
    345c:	60b9      	str	r1, [r7, #8]
    345e:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    3460:	2300      	movs	r3, #0
}
    3462:	4618      	mov	r0, r3
    3464:	3714      	adds	r7, #20
    3466:	46bd      	mov	sp, r7
    3468:	f85d 7b04 	ldr.w	r7, [sp], #4
    346c:	4770      	bx	lr
	...

00003470 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    3470:	b580      	push	{r7, lr}
    3472:	b086      	sub	sp, #24
    3474:	af00      	add	r7, sp, #0
    3476:	4603      	mov	r3, r0
    3478:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    347a:	79fb      	ldrb	r3, [r7, #7]
    347c:	4618      	mov	r0, r3
    347e:	4b2a      	ldr	r3, [pc, #168]	; (3528 <usb_d_cb_trans_setup+0xb8>)
    3480:	4798      	blx	r3
    3482:	4603      	mov	r3, r0
    3484:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3486:	f997 3017 	ldrsb.w	r3, [r7, #23]
    348a:	015b      	lsls	r3, r3, #5
    348c:	4a27      	ldr	r2, [pc, #156]	; (352c <usb_d_cb_trans_setup+0xbc>)
    348e:	4413      	add	r3, r2
    3490:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    3492:	693b      	ldr	r3, [r7, #16]
    3494:	330c      	adds	r3, #12
    3496:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    3498:	79fb      	ldrb	r3, [r7, #7]
    349a:	68f9      	ldr	r1, [r7, #12]
    349c:	4618      	mov	r0, r3
    349e:	4b24      	ldr	r3, [pc, #144]	; (3530 <usb_d_cb_trans_setup+0xc0>)
    34a0:	4798      	blx	r3
    34a2:	4603      	mov	r3, r0
    34a4:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    34a6:	7afb      	ldrb	r3, [r7, #11]
    34a8:	2b08      	cmp	r3, #8
    34aa:	d00d      	beq.n	34c8 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    34ac:	79fb      	ldrb	r3, [r7, #7]
    34ae:	2101      	movs	r1, #1
    34b0:	4618      	mov	r0, r3
    34b2:	4b20      	ldr	r3, [pc, #128]	; (3534 <usb_d_cb_trans_setup+0xc4>)
    34b4:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    34b6:	79fb      	ldrb	r3, [r7, #7]
    34b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    34bc:	b2db      	uxtb	r3, r3
    34be:	2101      	movs	r1, #1
    34c0:	4618      	mov	r0, r3
    34c2:	4b1c      	ldr	r3, [pc, #112]	; (3534 <usb_d_cb_trans_setup+0xc4>)
    34c4:	4798      	blx	r3
		return;
    34c6:	e02b      	b.n	3520 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    34c8:	79fb      	ldrb	r3, [r7, #7]
    34ca:	2100      	movs	r1, #0
    34cc:	4618      	mov	r0, r3
    34ce:	4b19      	ldr	r3, [pc, #100]	; (3534 <usb_d_cb_trans_setup+0xc4>)
    34d0:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    34d2:	79fb      	ldrb	r3, [r7, #7]
    34d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    34d8:	b2db      	uxtb	r3, r3
    34da:	2100      	movs	r1, #0
    34dc:	4618      	mov	r0, r3
    34de:	4b15      	ldr	r3, [pc, #84]	; (3534 <usb_d_cb_trans_setup+0xc4>)
    34e0:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    34e2:	693b      	ldr	r3, [r7, #16]
    34e4:	2201      	movs	r2, #1
    34e6:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    34e8:	693b      	ldr	r3, [r7, #16]
    34ea:	695b      	ldr	r3, [r3, #20]
    34ec:	79fa      	ldrb	r2, [r7, #7]
    34ee:	68f9      	ldr	r1, [r7, #12]
    34f0:	4610      	mov	r0, r2
    34f2:	4798      	blx	r3
    34f4:	4603      	mov	r3, r0
    34f6:	f083 0301 	eor.w	r3, r3, #1
    34fa:	b2db      	uxtb	r3, r3
    34fc:	2b00      	cmp	r3, #0
    34fe:	d00f      	beq.n	3520 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    3500:	693b      	ldr	r3, [r7, #16]
    3502:	2205      	movs	r2, #5
    3504:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3506:	79fb      	ldrb	r3, [r7, #7]
    3508:	2101      	movs	r1, #1
    350a:	4618      	mov	r0, r3
    350c:	4b09      	ldr	r3, [pc, #36]	; (3534 <usb_d_cb_trans_setup+0xc4>)
    350e:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3510:	79fb      	ldrb	r3, [r7, #7]
    3512:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3516:	b2db      	uxtb	r3, r3
    3518:	2101      	movs	r1, #1
    351a:	4618      	mov	r0, r3
    351c:	4b05      	ldr	r3, [pc, #20]	; (3534 <usb_d_cb_trans_setup+0xc4>)
    351e:	4798      	blx	r3
	}
}
    3520:	3718      	adds	r7, #24
    3522:	46bd      	mov	sp, r7
    3524:	bd80      	pop	{r7, pc}
    3526:	bf00      	nop
    3528:	00003381 	.word	0x00003381
    352c:	20000adc 	.word	0x20000adc
    3530:	0000b259 	.word	0x0000b259
    3534:	0000b0d1 	.word	0x0000b0d1

00003538 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3538:	b580      	push	{r7, lr}
    353a:	b084      	sub	sp, #16
    353c:	af00      	add	r7, sp, #0
    353e:	4603      	mov	r3, r0
    3540:	6039      	str	r1, [r7, #0]
    3542:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3544:	79fb      	ldrb	r3, [r7, #7]
    3546:	4618      	mov	r0, r3
    3548:	4b0d      	ldr	r3, [pc, #52]	; (3580 <usb_d_cb_trans_more+0x48>)
    354a:	4798      	blx	r3
    354c:	4603      	mov	r3, r0
    354e:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3550:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3554:	015b      	lsls	r3, r3, #5
    3556:	4a0b      	ldr	r2, [pc, #44]	; (3584 <usb_d_cb_trans_more+0x4c>)
    3558:	4413      	add	r3, r2
    355a:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    355c:	68bb      	ldr	r3, [r7, #8]
    355e:	789b      	ldrb	r3, [r3, #2]
    3560:	2b03      	cmp	r3, #3
    3562:	d107      	bne.n	3574 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    3564:	68bb      	ldr	r3, [r7, #8]
    3566:	699b      	ldr	r3, [r3, #24]
    3568:	79fa      	ldrb	r2, [r7, #7]
    356a:	6839      	ldr	r1, [r7, #0]
    356c:	4610      	mov	r0, r2
    356e:	4798      	blx	r3
    3570:	4603      	mov	r3, r0
    3572:	e000      	b.n	3576 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    3574:	2300      	movs	r3, #0
}
    3576:	4618      	mov	r0, r3
    3578:	3710      	adds	r7, #16
    357a:	46bd      	mov	sp, r7
    357c:	bd80      	pop	{r7, pc}
    357e:	bf00      	nop
    3580:	00003381 	.word	0x00003381
    3584:	20000adc 	.word	0x20000adc

00003588 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    3588:	b590      	push	{r4, r7, lr}
    358a:	b087      	sub	sp, #28
    358c:	af02      	add	r7, sp, #8
    358e:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    3590:	687b      	ldr	r3, [r7, #4]
    3592:	789b      	ldrb	r3, [r3, #2]
    3594:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    3596:	687b      	ldr	r3, [r7, #4]
    3598:	7b1b      	ldrb	r3, [r3, #12]
    359a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    359e:	2b00      	cmp	r3, #0
    35a0:	bf14      	ite	ne
    35a2:	2301      	movne	r3, #1
    35a4:	2300      	moveq	r3, #0
    35a6:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    35a8:	7bfb      	ldrb	r3, [r7, #15]
    35aa:	2b03      	cmp	r3, #3
    35ac:	d13a      	bne.n	3624 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    35ae:	687b      	ldr	r3, [r7, #4]
    35b0:	69db      	ldr	r3, [r3, #28]
    35b2:	687a      	ldr	r2, [r7, #4]
    35b4:	7850      	ldrb	r0, [r2, #1]
    35b6:	687a      	ldr	r2, [r7, #4]
    35b8:	320c      	adds	r2, #12
    35ba:	2101      	movs	r1, #1
    35bc:	4798      	blx	r3
    35be:	4603      	mov	r3, r0
    35c0:	737b      	strb	r3, [r7, #13]
		if (err) {
    35c2:	7b7b      	ldrb	r3, [r7, #13]
    35c4:	2b00      	cmp	r3, #0
    35c6:	d015      	beq.n	35f4 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    35c8:	687b      	ldr	r3, [r7, #4]
    35ca:	2205      	movs	r2, #5
    35cc:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    35ce:	687b      	ldr	r3, [r7, #4]
    35d0:	2202      	movs	r2, #2
    35d2:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    35d4:	7bbb      	ldrb	r3, [r7, #14]
    35d6:	2b00      	cmp	r3, #0
    35d8:	d002      	beq.n	35e0 <usb_d_ctrl_trans_done+0x58>
    35da:	687b      	ldr	r3, [r7, #4]
    35dc:	785b      	ldrb	r3, [r3, #1]
    35de:	e004      	b.n	35ea <usb_d_ctrl_trans_done+0x62>
    35e0:	687b      	ldr	r3, [r7, #4]
    35e2:	785b      	ldrb	r3, [r3, #1]
    35e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    35e8:	b2db      	uxtb	r3, r3
    35ea:	2101      	movs	r1, #1
    35ec:	4618      	mov	r0, r3
    35ee:	4b15      	ldr	r3, [pc, #84]	; (3644 <usb_d_ctrl_trans_done+0xbc>)
    35f0:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    35f2:	e022      	b.n	363a <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    35f4:	687b      	ldr	r3, [r7, #4]
    35f6:	2204      	movs	r2, #4
    35f8:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    35fa:	687b      	ldr	r3, [r7, #4]
    35fc:	7858      	ldrb	r0, [r3, #1]
    35fe:	7bbb      	ldrb	r3, [r7, #14]
    3600:	2b00      	cmp	r3, #0
    3602:	bf14      	ite	ne
    3604:	2301      	movne	r3, #1
    3606:	2300      	moveq	r3, #0
    3608:	b2db      	uxtb	r3, r3
    360a:	f083 0301 	eor.w	r3, r3, #1
    360e:	b2db      	uxtb	r3, r3
    3610:	f003 0301 	and.w	r3, r3, #1
    3614:	b2d9      	uxtb	r1, r3
    3616:	2301      	movs	r3, #1
    3618:	9300      	str	r3, [sp, #0]
    361a:	2300      	movs	r3, #0
    361c:	2200      	movs	r2, #0
    361e:	4c0a      	ldr	r4, [pc, #40]	; (3648 <usb_d_ctrl_trans_done+0xc0>)
    3620:	47a0      	blx	r4
}
    3622:	e00a      	b.n	363a <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    3624:	687b      	ldr	r3, [r7, #4]
    3626:	69db      	ldr	r3, [r3, #28]
    3628:	687a      	ldr	r2, [r7, #4]
    362a:	7850      	ldrb	r0, [r2, #1]
    362c:	687a      	ldr	r2, [r7, #4]
    362e:	320c      	adds	r2, #12
    3630:	2100      	movs	r1, #0
    3632:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3634:	687b      	ldr	r3, [r7, #4]
    3636:	2202      	movs	r2, #2
    3638:	709a      	strb	r2, [r3, #2]
}
    363a:	bf00      	nop
    363c:	3714      	adds	r7, #20
    363e:	46bd      	mov	sp, r7
    3640:	bd90      	pop	{r4, r7, pc}
    3642:	bf00      	nop
    3644:	0000b0d1 	.word	0x0000b0d1
    3648:	00003401 	.word	0x00003401

0000364c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    364c:	b580      	push	{r7, lr}
    364e:	b086      	sub	sp, #24
    3650:	af00      	add	r7, sp, #0
    3652:	4603      	mov	r3, r0
    3654:	60b9      	str	r1, [r7, #8]
    3656:	607a      	str	r2, [r7, #4]
    3658:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    365a:	7bfb      	ldrb	r3, [r7, #15]
    365c:	4618      	mov	r0, r3
    365e:	4b2f      	ldr	r3, [pc, #188]	; (371c <_usb_d_cb_trans_done+0xd0>)
    3660:	4798      	blx	r3
    3662:	4603      	mov	r3, r0
    3664:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3666:	f997 3017 	ldrsb.w	r3, [r7, #23]
    366a:	015b      	lsls	r3, r3, #5
    366c:	4a2c      	ldr	r2, [pc, #176]	; (3720 <_usb_d_cb_trans_done+0xd4>)
    366e:	4413      	add	r3, r2
    3670:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    3672:	68bb      	ldr	r3, [r7, #8]
    3674:	2b00      	cmp	r3, #0
    3676:	d10e      	bne.n	3696 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3678:	693b      	ldr	r3, [r7, #16]
    367a:	2200      	movs	r2, #0
    367c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    367e:	693b      	ldr	r3, [r7, #16]
    3680:	781b      	ldrb	r3, [r3, #0]
    3682:	2b00      	cmp	r3, #0
    3684:	d103      	bne.n	368e <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    3686:	6938      	ldr	r0, [r7, #16]
    3688:	4b26      	ldr	r3, [pc, #152]	; (3724 <_usb_d_cb_trans_done+0xd8>)
    368a:	4798      	blx	r3
			return;
    368c:	e043      	b.n	3716 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    368e:	693b      	ldr	r3, [r7, #16]
    3690:	2201      	movs	r2, #1
    3692:	709a      	strb	r2, [r3, #2]
    3694:	e038      	b.n	3708 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    3696:	68bb      	ldr	r3, [r7, #8]
    3698:	2b01      	cmp	r3, #1
    369a:	d113      	bne.n	36c4 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    369c:	693b      	ldr	r3, [r7, #16]
    369e:	2202      	movs	r2, #2
    36a0:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    36a2:	693b      	ldr	r3, [r7, #16]
    36a4:	781b      	ldrb	r3, [r3, #0]
    36a6:	2b00      	cmp	r3, #0
    36a8:	d108      	bne.n	36bc <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    36aa:	693b      	ldr	r3, [r7, #16]
    36ac:	2202      	movs	r2, #2
    36ae:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    36b0:	7bfb      	ldrb	r3, [r7, #15]
    36b2:	2100      	movs	r1, #0
    36b4:	4618      	mov	r0, r3
    36b6:	4b1c      	ldr	r3, [pc, #112]	; (3728 <_usb_d_cb_trans_done+0xdc>)
    36b8:	4798      	blx	r3
    36ba:	e025      	b.n	3708 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    36bc:	693b      	ldr	r3, [r7, #16]
    36be:	2205      	movs	r2, #5
    36c0:	709a      	strb	r2, [r3, #2]
    36c2:	e021      	b.n	3708 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    36c4:	68bb      	ldr	r3, [r7, #8]
    36c6:	2b02      	cmp	r3, #2
    36c8:	d10e      	bne.n	36e8 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    36ca:	693b      	ldr	r3, [r7, #16]
    36cc:	2204      	movs	r2, #4
    36ce:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    36d0:	693b      	ldr	r3, [r7, #16]
    36d2:	781b      	ldrb	r3, [r3, #0]
    36d4:	2b00      	cmp	r3, #0
    36d6:	d103      	bne.n	36e0 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    36d8:	693b      	ldr	r3, [r7, #16]
    36da:	2202      	movs	r2, #2
    36dc:	709a      	strb	r2, [r3, #2]
			return;
    36de:	e01a      	b.n	3716 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    36e0:	693b      	ldr	r3, [r7, #16]
    36e2:	2201      	movs	r2, #1
    36e4:	709a      	strb	r2, [r3, #2]
    36e6:	e00f      	b.n	3708 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    36e8:	68bb      	ldr	r3, [r7, #8]
    36ea:	2b03      	cmp	r3, #3
    36ec:	d106      	bne.n	36fc <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    36ee:	693b      	ldr	r3, [r7, #16]
    36f0:	2200      	movs	r2, #0
    36f2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    36f4:	693b      	ldr	r3, [r7, #16]
    36f6:	2205      	movs	r2, #5
    36f8:	70da      	strb	r2, [r3, #3]
    36fa:	e005      	b.n	3708 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    36fc:	693b      	ldr	r3, [r7, #16]
    36fe:	2206      	movs	r2, #6
    3700:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    3702:	693b      	ldr	r3, [r7, #16]
    3704:	2206      	movs	r2, #6
    3706:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    3708:	693b      	ldr	r3, [r7, #16]
    370a:	69db      	ldr	r3, [r3, #28]
    370c:	693a      	ldr	r2, [r7, #16]
    370e:	78d1      	ldrb	r1, [r2, #3]
    3710:	687a      	ldr	r2, [r7, #4]
    3712:	7bf8      	ldrb	r0, [r7, #15]
    3714:	4798      	blx	r3
}
    3716:	3718      	adds	r7, #24
    3718:	46bd      	mov	sp, r7
    371a:	bd80      	pop	{r7, pc}
    371c:	00003381 	.word	0x00003381
    3720:	20000adc 	.word	0x20000adc
    3724:	00003589 	.word	0x00003589
    3728:	0000b0d1 	.word	0x0000b0d1

0000372c <usb_d_init>:

int32_t usb_d_init(void)
{
    372c:	b580      	push	{r7, lr}
    372e:	b082      	sub	sp, #8
    3730:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    3732:	4b21      	ldr	r3, [pc, #132]	; (37b8 <usb_d_init+0x8c>)
    3734:	4798      	blx	r3
    3736:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3738:	683b      	ldr	r3, [r7, #0]
    373a:	2b00      	cmp	r3, #0
    373c:	da01      	bge.n	3742 <usb_d_init+0x16>
		return rc;
    373e:	683b      	ldr	r3, [r7, #0]
    3740:	e036      	b.n	37b0 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    3742:	2280      	movs	r2, #128	; 0x80
    3744:	2100      	movs	r1, #0
    3746:	481d      	ldr	r0, [pc, #116]	; (37bc <usb_d_init+0x90>)
    3748:	4b1d      	ldr	r3, [pc, #116]	; (37c0 <usb_d_init+0x94>)
    374a:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    374c:	2300      	movs	r3, #0
    374e:	71fb      	strb	r3, [r7, #7]
    3750:	e01e      	b.n	3790 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    3752:	79fb      	ldrb	r3, [r7, #7]
    3754:	4a19      	ldr	r2, [pc, #100]	; (37bc <usb_d_init+0x90>)
    3756:	015b      	lsls	r3, r3, #5
    3758:	4413      	add	r3, r2
    375a:	3301      	adds	r3, #1
    375c:	22ff      	movs	r2, #255	; 0xff
    375e:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    3760:	79fb      	ldrb	r3, [r7, #7]
    3762:	4a16      	ldr	r2, [pc, #88]	; (37bc <usb_d_init+0x90>)
    3764:	015b      	lsls	r3, r3, #5
    3766:	4413      	add	r3, r2
    3768:	3314      	adds	r3, #20
    376a:	4a16      	ldr	r2, [pc, #88]	; (37c4 <usb_d_init+0x98>)
    376c:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    376e:	79fb      	ldrb	r3, [r7, #7]
    3770:	4a12      	ldr	r2, [pc, #72]	; (37bc <usb_d_init+0x90>)
    3772:	015b      	lsls	r3, r3, #5
    3774:	4413      	add	r3, r2
    3776:	3318      	adds	r3, #24
    3778:	4a12      	ldr	r2, [pc, #72]	; (37c4 <usb_d_init+0x98>)
    377a:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    377c:	79fb      	ldrb	r3, [r7, #7]
    377e:	4a0f      	ldr	r2, [pc, #60]	; (37bc <usb_d_init+0x90>)
    3780:	015b      	lsls	r3, r3, #5
    3782:	4413      	add	r3, r2
    3784:	331c      	adds	r3, #28
    3786:	4a0f      	ldr	r2, [pc, #60]	; (37c4 <usb_d_init+0x98>)
    3788:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    378a:	79fb      	ldrb	r3, [r7, #7]
    378c:	3301      	adds	r3, #1
    378e:	71fb      	strb	r3, [r7, #7]
    3790:	79fb      	ldrb	r3, [r7, #7]
    3792:	2b03      	cmp	r3, #3
    3794:	d9dd      	bls.n	3752 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    3796:	490c      	ldr	r1, [pc, #48]	; (37c8 <usb_d_init+0x9c>)
    3798:	2000      	movs	r0, #0
    379a:	4b0c      	ldr	r3, [pc, #48]	; (37cc <usb_d_init+0xa0>)
    379c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    379e:	490c      	ldr	r1, [pc, #48]	; (37d0 <usb_d_init+0xa4>)
    37a0:	2001      	movs	r0, #1
    37a2:	4b0a      	ldr	r3, [pc, #40]	; (37cc <usb_d_init+0xa0>)
    37a4:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    37a6:	490b      	ldr	r1, [pc, #44]	; (37d4 <usb_d_init+0xa8>)
    37a8:	2002      	movs	r0, #2
    37aa:	4b08      	ldr	r3, [pc, #32]	; (37cc <usb_d_init+0xa0>)
    37ac:	4798      	blx	r3
	return ERR_NONE;
    37ae:	2300      	movs	r3, #0
}
    37b0:	4618      	mov	r0, r3
    37b2:	3708      	adds	r7, #8
    37b4:	46bd      	mov	sp, r7
    37b6:	bd80      	pop	{r7, pc}
    37b8:	0000a919 	.word	0x0000a919
    37bc:	20000adc 	.word	0x20000adc
    37c0:	00010c85 	.word	0x00010c85
    37c4:	00003455 	.word	0x00003455
    37c8:	00003471 	.word	0x00003471
    37cc:	0000b561 	.word	0x0000b561
    37d0:	00003539 	.word	0x00003539
    37d4:	0000364d 	.word	0x0000364d

000037d8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    37d8:	b580      	push	{r7, lr}
    37da:	b082      	sub	sp, #8
    37dc:	af00      	add	r7, sp, #0
    37de:	4603      	mov	r3, r0
    37e0:	6039      	str	r1, [r7, #0]
    37e2:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    37e4:	79fb      	ldrb	r3, [r7, #7]
    37e6:	6839      	ldr	r1, [r7, #0]
    37e8:	4618      	mov	r0, r3
    37ea:	4b03      	ldr	r3, [pc, #12]	; (37f8 <usb_d_register_callback+0x20>)
    37ec:	4798      	blx	r3
}
    37ee:	bf00      	nop
    37f0:	3708      	adds	r7, #8
    37f2:	46bd      	mov	sp, r7
    37f4:	bd80      	pop	{r7, pc}
    37f6:	bf00      	nop
    37f8:	0000b519 	.word	0x0000b519

000037fc <usb_d_enable>:

int32_t usb_d_enable(void)
{
    37fc:	b580      	push	{r7, lr}
    37fe:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    3800:	4b02      	ldr	r3, [pc, #8]	; (380c <usb_d_enable+0x10>)
    3802:	4798      	blx	r3
    3804:	4603      	mov	r3, r0
}
    3806:	4618      	mov	r0, r3
    3808:	bd80      	pop	{r7, pc}
    380a:	bf00      	nop
    380c:	0000aa09 	.word	0x0000aa09

00003810 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    3810:	b580      	push	{r7, lr}
    3812:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    3814:	4b01      	ldr	r3, [pc, #4]	; (381c <usb_d_attach+0xc>)
    3816:	4798      	blx	r3
}
    3818:	bf00      	nop
    381a:	bd80      	pop	{r7, pc}
    381c:	0000aa8d 	.word	0x0000aa8d

00003820 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    3820:	b580      	push	{r7, lr}
    3822:	b082      	sub	sp, #8
    3824:	af00      	add	r7, sp, #0
    3826:	4603      	mov	r3, r0
    3828:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    382a:	79fb      	ldrb	r3, [r7, #7]
    382c:	4618      	mov	r0, r3
    382e:	4b03      	ldr	r3, [pc, #12]	; (383c <usb_d_set_address+0x1c>)
    3830:	4798      	blx	r3
}
    3832:	bf00      	nop
    3834:	3708      	adds	r7, #8
    3836:	46bd      	mov	sp, r7
    3838:	bd80      	pop	{r7, pc}
    383a:	bf00      	nop
    383c:	0000aaa1 	.word	0x0000aaa1

00003840 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3840:	b580      	push	{r7, lr}
    3842:	b082      	sub	sp, #8
    3844:	af00      	add	r7, sp, #0
    3846:	4603      	mov	r3, r0
    3848:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    384a:	79fb      	ldrb	r3, [r7, #7]
    384c:	b29b      	uxth	r3, r3
    384e:	461a      	mov	r2, r3
    3850:	2100      	movs	r1, #0
    3852:	2000      	movs	r0, #0
    3854:	4b03      	ldr	r3, [pc, #12]	; (3864 <usb_d_ep0_init+0x24>)
    3856:	4798      	blx	r3
    3858:	4603      	mov	r3, r0
}
    385a:	4618      	mov	r0, r3
    385c:	3708      	adds	r7, #8
    385e:	46bd      	mov	sp, r7
    3860:	bd80      	pop	{r7, pc}
    3862:	bf00      	nop
    3864:	00003869 	.word	0x00003869

00003868 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3868:	b580      	push	{r7, lr}
    386a:	b086      	sub	sp, #24
    386c:	af00      	add	r7, sp, #0
    386e:	4603      	mov	r3, r0
    3870:	71fb      	strb	r3, [r7, #7]
    3872:	460b      	mov	r3, r1
    3874:	71bb      	strb	r3, [r7, #6]
    3876:	4613      	mov	r3, r2
    3878:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    387a:	79fb      	ldrb	r3, [r7, #7]
    387c:	4618      	mov	r0, r3
    387e:	4b1e      	ldr	r3, [pc, #120]	; (38f8 <usb_d_ep_init+0x90>)
    3880:	4798      	blx	r3
    3882:	4603      	mov	r3, r0
    3884:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3886:	f997 3017 	ldrsb.w	r3, [r7, #23]
    388a:	015b      	lsls	r3, r3, #5
    388c:	4a1b      	ldr	r2, [pc, #108]	; (38fc <usb_d_ep_init+0x94>)
    388e:	4413      	add	r3, r2
    3890:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    3892:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3896:	2b00      	cmp	r3, #0
    3898:	db02      	blt.n	38a0 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    389a:	f06f 0313 	mvn.w	r3, #19
    389e:	e027      	b.n	38f0 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    38a0:	20ff      	movs	r0, #255	; 0xff
    38a2:	4b15      	ldr	r3, [pc, #84]	; (38f8 <usb_d_ep_init+0x90>)
    38a4:	4798      	blx	r3
    38a6:	4603      	mov	r3, r0
    38a8:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    38aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
    38ae:	2b00      	cmp	r3, #0
    38b0:	da02      	bge.n	38b8 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    38b2:	f06f 0314 	mvn.w	r3, #20
    38b6:	e01b      	b.n	38f0 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    38b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
    38bc:	015b      	lsls	r3, r3, #5
    38be:	4a0f      	ldr	r2, [pc, #60]	; (38fc <usb_d_ep_init+0x94>)
    38c0:	4413      	add	r3, r2
    38c2:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    38c4:	88ba      	ldrh	r2, [r7, #4]
    38c6:	79b9      	ldrb	r1, [r7, #6]
    38c8:	79fb      	ldrb	r3, [r7, #7]
    38ca:	4618      	mov	r0, r3
    38cc:	4b0c      	ldr	r3, [pc, #48]	; (3900 <usb_d_ep_init+0x98>)
    38ce:	4798      	blx	r3
    38d0:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    38d2:	68fb      	ldr	r3, [r7, #12]
    38d4:	2b00      	cmp	r3, #0
    38d6:	da01      	bge.n	38dc <usb_d_ep_init+0x74>
		return rc;
    38d8:	68fb      	ldr	r3, [r7, #12]
    38da:	e009      	b.n	38f0 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    38dc:	693b      	ldr	r3, [r7, #16]
    38de:	79fa      	ldrb	r2, [r7, #7]
    38e0:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    38e2:	79bb      	ldrb	r3, [r7, #6]
    38e4:	f003 0303 	and.w	r3, r3, #3
    38e8:	b2da      	uxtb	r2, r3
    38ea:	693b      	ldr	r3, [r7, #16]
    38ec:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    38ee:	2300      	movs	r3, #0
}
    38f0:	4618      	mov	r0, r3
    38f2:	3718      	adds	r7, #24
    38f4:	46bd      	mov	sp, r7
    38f6:	bd80      	pop	{r7, pc}
    38f8:	00003381 	.word	0x00003381
    38fc:	20000adc 	.word	0x20000adc
    3900:	0000ab41 	.word	0x0000ab41

00003904 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3904:	b580      	push	{r7, lr}
    3906:	b084      	sub	sp, #16
    3908:	af00      	add	r7, sp, #0
    390a:	4603      	mov	r3, r0
    390c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    390e:	79fb      	ldrb	r3, [r7, #7]
    3910:	4618      	mov	r0, r3
    3912:	4b0d      	ldr	r3, [pc, #52]	; (3948 <usb_d_ep_deinit+0x44>)
    3914:	4798      	blx	r3
    3916:	4603      	mov	r3, r0
    3918:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    391a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    391e:	015b      	lsls	r3, r3, #5
    3920:	4a0a      	ldr	r2, [pc, #40]	; (394c <usb_d_ep_deinit+0x48>)
    3922:	4413      	add	r3, r2
    3924:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3926:	f997 300f 	ldrsb.w	r3, [r7, #15]
    392a:	2b00      	cmp	r3, #0
    392c:	db07      	blt.n	393e <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    392e:	79fb      	ldrb	r3, [r7, #7]
    3930:	4618      	mov	r0, r3
    3932:	4b07      	ldr	r3, [pc, #28]	; (3950 <usb_d_ep_deinit+0x4c>)
    3934:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    3936:	68bb      	ldr	r3, [r7, #8]
    3938:	22ff      	movs	r2, #255	; 0xff
    393a:	705a      	strb	r2, [r3, #1]
    393c:	e000      	b.n	3940 <usb_d_ep_deinit+0x3c>
		return;
    393e:	bf00      	nop
}
    3940:	3710      	adds	r7, #16
    3942:	46bd      	mov	sp, r7
    3944:	bd80      	pop	{r7, pc}
    3946:	bf00      	nop
    3948:	00003381 	.word	0x00003381
    394c:	20000adc 	.word	0x20000adc
    3950:	0000ac75 	.word	0x0000ac75

00003954 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3954:	b580      	push	{r7, lr}
    3956:	b086      	sub	sp, #24
    3958:	af00      	add	r7, sp, #0
    395a:	4603      	mov	r3, r0
    395c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    395e:	79fb      	ldrb	r3, [r7, #7]
    3960:	4618      	mov	r0, r3
    3962:	4b15      	ldr	r3, [pc, #84]	; (39b8 <usb_d_ep_enable+0x64>)
    3964:	4798      	blx	r3
    3966:	4603      	mov	r3, r0
    3968:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    396a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    396e:	015b      	lsls	r3, r3, #5
    3970:	4a12      	ldr	r2, [pc, #72]	; (39bc <usb_d_ep_enable+0x68>)
    3972:	4413      	add	r3, r2
    3974:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3976:	f997 3017 	ldrsb.w	r3, [r7, #23]
    397a:	2b00      	cmp	r3, #0
    397c:	da02      	bge.n	3984 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    397e:	f06f 0311 	mvn.w	r3, #17
    3982:	e014      	b.n	39ae <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3984:	693b      	ldr	r3, [r7, #16]
    3986:	781b      	ldrb	r3, [r3, #0]
    3988:	2b00      	cmp	r3, #0
    398a:	d101      	bne.n	3990 <usb_d_ep_enable+0x3c>
    398c:	2202      	movs	r2, #2
    398e:	e000      	b.n	3992 <usb_d_ep_enable+0x3e>
    3990:	2201      	movs	r2, #1
    3992:	693b      	ldr	r3, [r7, #16]
    3994:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    3996:	79fb      	ldrb	r3, [r7, #7]
    3998:	4618      	mov	r0, r3
    399a:	4b09      	ldr	r3, [pc, #36]	; (39c0 <usb_d_ep_enable+0x6c>)
    399c:	4798      	blx	r3
    399e:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    39a0:	68fb      	ldr	r3, [r7, #12]
    39a2:	2b00      	cmp	r3, #0
    39a4:	da02      	bge.n	39ac <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    39a6:	693b      	ldr	r3, [r7, #16]
    39a8:	2200      	movs	r2, #0
    39aa:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    39ac:	68fb      	ldr	r3, [r7, #12]
}
    39ae:	4618      	mov	r0, r3
    39b0:	3718      	adds	r7, #24
    39b2:	46bd      	mov	sp, r7
    39b4:	bd80      	pop	{r7, pc}
    39b6:	bf00      	nop
    39b8:	00003381 	.word	0x00003381
    39bc:	20000adc 	.word	0x20000adc
    39c0:	0000ad59 	.word	0x0000ad59

000039c4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    39c4:	b590      	push	{r4, r7, lr}
    39c6:	b08d      	sub	sp, #52	; 0x34
    39c8:	af02      	add	r7, sp, #8
    39ca:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    39cc:	687b      	ldr	r3, [r7, #4]
    39ce:	7a1b      	ldrb	r3, [r3, #8]
    39d0:	4618      	mov	r0, r3
    39d2:	4b51      	ldr	r3, [pc, #324]	; (3b18 <usb_d_ep_transfer+0x154>)
    39d4:	4798      	blx	r3
    39d6:	4603      	mov	r3, r0
    39d8:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    39da:	f997 301f 	ldrsb.w	r3, [r7, #31]
    39de:	015b      	lsls	r3, r3, #5
    39e0:	4a4e      	ldr	r2, [pc, #312]	; (3b1c <usb_d_ep_transfer+0x158>)
    39e2:	4413      	add	r3, r2
    39e4:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    39e6:	687b      	ldr	r3, [r7, #4]
    39e8:	7a1b      	ldrb	r3, [r3, #8]
    39ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    39ee:	2b00      	cmp	r3, #0
    39f0:	bf14      	ite	ne
    39f2:	2301      	movne	r3, #1
    39f4:	2300      	moveq	r3, #0
    39f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    39fa:	687b      	ldr	r3, [r7, #4]
    39fc:	7a5b      	ldrb	r3, [r3, #9]
    39fe:	2b00      	cmp	r3, #0
    3a00:	bf14      	ite	ne
    3a02:	2301      	movne	r3, #1
    3a04:	2300      	moveq	r3, #0
    3a06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    3a0a:	687b      	ldr	r3, [r7, #4]
    3a0c:	685b      	ldr	r3, [r3, #4]
    3a0e:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    3a10:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3a14:	2b00      	cmp	r3, #0
    3a16:	da02      	bge.n	3a1e <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3a18:	f06f 0311 	mvn.w	r3, #17
    3a1c:	e077      	b.n	3b0e <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    3a1e:	f107 0308 	add.w	r3, r7, #8
    3a22:	4618      	mov	r0, r3
    3a24:	4b3e      	ldr	r3, [pc, #248]	; (3b20 <usb_d_ep_transfer+0x15c>)
    3a26:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3a28:	69bb      	ldr	r3, [r7, #24]
    3a2a:	789b      	ldrb	r3, [r3, #2]
    3a2c:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    3a2e:	7bfb      	ldrb	r3, [r7, #15]
    3a30:	b2db      	uxtb	r3, r3
    3a32:	2b01      	cmp	r3, #1
    3a34:	d10c      	bne.n	3a50 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3a36:	69bb      	ldr	r3, [r7, #24]
    3a38:	2203      	movs	r2, #3
    3a3a:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3a3c:	f107 0308 	add.w	r3, r7, #8
    3a40:	4618      	mov	r0, r3
    3a42:	4b38      	ldr	r3, [pc, #224]	; (3b24 <usb_d_ep_transfer+0x160>)
    3a44:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3a46:	69bb      	ldr	r3, [r7, #24]
    3a48:	781b      	ldrb	r3, [r3, #0]
    3a4a:	2b00      	cmp	r3, #0
    3a4c:	d151      	bne.n	3af2 <usb_d_ep_transfer+0x12e>
    3a4e:	e017      	b.n	3a80 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3a50:	f107 0308 	add.w	r3, r7, #8
    3a54:	4618      	mov	r0, r3
    3a56:	4b33      	ldr	r3, [pc, #204]	; (3b24 <usb_d_ep_transfer+0x160>)
    3a58:	4798      	blx	r3
		switch (state) {
    3a5a:	7bfb      	ldrb	r3, [r7, #15]
    3a5c:	b2db      	uxtb	r3, r3
    3a5e:	2b05      	cmp	r3, #5
    3a60:	d004      	beq.n	3a6c <usb_d_ep_transfer+0xa8>
    3a62:	2b06      	cmp	r3, #6
    3a64:	d004      	beq.n	3a70 <usb_d_ep_transfer+0xac>
    3a66:	2b00      	cmp	r3, #0
    3a68:	d005      	beq.n	3a76 <usb_d_ep_transfer+0xb2>
    3a6a:	e007      	b.n	3a7c <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3a6c:	2302      	movs	r3, #2
    3a6e:	e04e      	b.n	3b0e <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3a70:	f06f 030f 	mvn.w	r3, #15
    3a74:	e04b      	b.n	3b0e <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    3a76:	f06f 0312 	mvn.w	r3, #18
    3a7a:	e048      	b.n	3b0e <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3a7c:	2301      	movs	r3, #1
    3a7e:	e046      	b.n	3b0e <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3a80:	69bb      	ldr	r3, [r7, #24]
    3a82:	7c9b      	ldrb	r3, [r3, #18]
    3a84:	b29a      	uxth	r2, r3
    3a86:	69bb      	ldr	r3, [r7, #24]
    3a88:	7cdb      	ldrb	r3, [r3, #19]
    3a8a:	b29b      	uxth	r3, r3
    3a8c:	021b      	lsls	r3, r3, #8
    3a8e:	b29b      	uxth	r3, r3
    3a90:	4413      	add	r3, r2
    3a92:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    3a94:	8afb      	ldrh	r3, [r7, #22]
    3a96:	2b00      	cmp	r3, #0
    3a98:	d10b      	bne.n	3ab2 <usb_d_ep_transfer+0xee>
			dir                 = true;
    3a9a:	2301      	movs	r3, #1
    3a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    3aa0:	2300      	movs	r3, #0
    3aa2:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    3aa4:	2301      	movs	r3, #1
    3aa6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3aaa:	69bb      	ldr	r3, [r7, #24]
    3aac:	2204      	movs	r2, #4
    3aae:	709a      	strb	r2, [r3, #2]
    3ab0:	e01f      	b.n	3af2 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    3ab2:	69bb      	ldr	r3, [r7, #24]
    3ab4:	7b1b      	ldrb	r3, [r3, #12]
    3ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3aba:	2b00      	cmp	r3, #0
    3abc:	bf14      	ite	ne
    3abe:	2301      	movne	r3, #1
    3ac0:	2300      	moveq	r3, #0
    3ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    3ac6:	8afa      	ldrh	r2, [r7, #22]
    3ac8:	6a3b      	ldr	r3, [r7, #32]
    3aca:	429a      	cmp	r2, r3
    3acc:	d201      	bcs.n	3ad2 <usb_d_ep_transfer+0x10e>
				len = req_len;
    3ace:	8afb      	ldrh	r3, [r7, #22]
    3ad0:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    3ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3ad6:	2b00      	cmp	r3, #0
    3ad8:	d008      	beq.n	3aec <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3ada:	8afa      	ldrh	r2, [r7, #22]
    3adc:	6a3b      	ldr	r3, [r7, #32]
    3ade:	429a      	cmp	r2, r3
    3ae0:	bf8c      	ite	hi
    3ae2:	2301      	movhi	r3, #1
    3ae4:	2300      	movls	r3, #0
    3ae6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3aea:	e002      	b.n	3af2 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3aec:	2300      	movs	r3, #0
    3aee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    3af2:	687b      	ldr	r3, [r7, #4]
    3af4:	7a18      	ldrb	r0, [r3, #8]
    3af6:	687b      	ldr	r3, [r7, #4]
    3af8:	681a      	ldr	r2, [r3, #0]
    3afa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3afe:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    3b02:	9300      	str	r3, [sp, #0]
    3b04:	6a3b      	ldr	r3, [r7, #32]
    3b06:	4c08      	ldr	r4, [pc, #32]	; (3b28 <usb_d_ep_transfer+0x164>)
    3b08:	47a0      	blx	r4
    3b0a:	6138      	str	r0, [r7, #16]
	return rc;
    3b0c:	693b      	ldr	r3, [r7, #16]
}
    3b0e:	4618      	mov	r0, r3
    3b10:	372c      	adds	r7, #44	; 0x2c
    3b12:	46bd      	mov	sp, r7
    3b14:	bd90      	pop	{r4, r7, pc}
    3b16:	bf00      	nop
    3b18:	00003381 	.word	0x00003381
    3b1c:	20000adc 	.word	0x20000adc
    3b20:	0000bccd 	.word	0x0000bccd
    3b24:	0000bcf3 	.word	0x0000bcf3
    3b28:	00003401 	.word	0x00003401

00003b2c <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3b2c:	b580      	push	{r7, lr}
    3b2e:	b084      	sub	sp, #16
    3b30:	af00      	add	r7, sp, #0
    3b32:	4603      	mov	r3, r0
    3b34:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3b36:	79fb      	ldrb	r3, [r7, #7]
    3b38:	4618      	mov	r0, r3
    3b3a:	4b0e      	ldr	r3, [pc, #56]	; (3b74 <usb_d_ep_abort+0x48>)
    3b3c:	4798      	blx	r3
    3b3e:	4603      	mov	r3, r0
    3b40:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3b46:	015b      	lsls	r3, r3, #5
    3b48:	4a0b      	ldr	r2, [pc, #44]	; (3b78 <usb_d_ep_abort+0x4c>)
    3b4a:	4413      	add	r3, r2
    3b4c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3b52:	2b00      	cmp	r3, #0
    3b54:	db0a      	blt.n	3b6c <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    3b56:	79fb      	ldrb	r3, [r7, #7]
    3b58:	4618      	mov	r0, r3
    3b5a:	4b08      	ldr	r3, [pc, #32]	; (3b7c <usb_d_ep_abort+0x50>)
    3b5c:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3b5e:	68bb      	ldr	r3, [r7, #8]
    3b60:	2201      	movs	r2, #1
    3b62:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    3b64:	68bb      	ldr	r3, [r7, #8]
    3b66:	2204      	movs	r2, #4
    3b68:	70da      	strb	r2, [r3, #3]
    3b6a:	e000      	b.n	3b6e <usb_d_ep_abort+0x42>
		return;
    3b6c:	bf00      	nop
}
    3b6e:	3710      	adds	r7, #16
    3b70:	46bd      	mov	sp, r7
    3b72:	bd80      	pop	{r7, pc}
    3b74:	00003381 	.word	0x00003381
    3b78:	20000adc 	.word	0x20000adc
    3b7c:	0000b4c5 	.word	0x0000b4c5

00003b80 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    3b80:	b580      	push	{r7, lr}
    3b82:	b086      	sub	sp, #24
    3b84:	af00      	add	r7, sp, #0
    3b86:	4603      	mov	r3, r0
    3b88:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3b8a:	79fb      	ldrb	r3, [r7, #7]
    3b8c:	4618      	mov	r0, r3
    3b8e:	4b1a      	ldr	r3, [pc, #104]	; (3bf8 <_usb_d_ep_halt_clr+0x78>)
    3b90:	4798      	blx	r3
    3b92:	4603      	mov	r3, r0
    3b94:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3b96:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3b9a:	015b      	lsls	r3, r3, #5
    3b9c:	4a17      	ldr	r2, [pc, #92]	; (3bfc <_usb_d_ep_halt_clr+0x7c>)
    3b9e:	4413      	add	r3, r2
    3ba0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3ba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3ba6:	2b00      	cmp	r3, #0
    3ba8:	da02      	bge.n	3bb0 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3baa:	f06f 0311 	mvn.w	r3, #17
    3bae:	e01f      	b.n	3bf0 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3bb0:	79fb      	ldrb	r3, [r7, #7]
    3bb2:	2102      	movs	r1, #2
    3bb4:	4618      	mov	r0, r3
    3bb6:	4b12      	ldr	r3, [pc, #72]	; (3c00 <_usb_d_ep_halt_clr+0x80>)
    3bb8:	4798      	blx	r3
    3bba:	4603      	mov	r3, r0
    3bbc:	2b00      	cmp	r3, #0
    3bbe:	d016      	beq.n	3bee <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3bc0:	79fb      	ldrb	r3, [r7, #7]
    3bc2:	2100      	movs	r1, #0
    3bc4:	4618      	mov	r0, r3
    3bc6:	4b0e      	ldr	r3, [pc, #56]	; (3c00 <_usb_d_ep_halt_clr+0x80>)
    3bc8:	4798      	blx	r3
    3bca:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3bcc:	68fb      	ldr	r3, [r7, #12]
    3bce:	2b00      	cmp	r3, #0
    3bd0:	da01      	bge.n	3bd6 <_usb_d_ep_halt_clr+0x56>
			return rc;
    3bd2:	68fb      	ldr	r3, [r7, #12]
    3bd4:	e00c      	b.n	3bf0 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3bd6:	693b      	ldr	r3, [r7, #16]
    3bd8:	2201      	movs	r2, #1
    3bda:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3bdc:	693b      	ldr	r3, [r7, #16]
    3bde:	2203      	movs	r2, #3
    3be0:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    3be2:	693b      	ldr	r3, [r7, #16]
    3be4:	69db      	ldr	r3, [r3, #28]
    3be6:	79f8      	ldrb	r0, [r7, #7]
    3be8:	2200      	movs	r2, #0
    3bea:	2103      	movs	r1, #3
    3bec:	4798      	blx	r3
	}
	return ERR_NONE;
    3bee:	2300      	movs	r3, #0
}
    3bf0:	4618      	mov	r0, r3
    3bf2:	3718      	adds	r7, #24
    3bf4:	46bd      	mov	sp, r7
    3bf6:	bd80      	pop	{r7, pc}
    3bf8:	00003381 	.word	0x00003381
    3bfc:	20000adc 	.word	0x20000adc
    3c00:	0000b0d1 	.word	0x0000b0d1

00003c04 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3c04:	b580      	push	{r7, lr}
    3c06:	b082      	sub	sp, #8
    3c08:	af00      	add	r7, sp, #0
    3c0a:	4603      	mov	r3, r0
    3c0c:	460a      	mov	r2, r1
    3c0e:	71fb      	strb	r3, [r7, #7]
    3c10:	4613      	mov	r3, r2
    3c12:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    3c14:	79bb      	ldrb	r3, [r7, #6]
    3c16:	2b00      	cmp	r3, #0
    3c18:	d105      	bne.n	3c26 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    3c1a:	79fb      	ldrb	r3, [r7, #7]
    3c1c:	4618      	mov	r0, r3
    3c1e:	4b0c      	ldr	r3, [pc, #48]	; (3c50 <usb_d_ep_halt+0x4c>)
    3c20:	4798      	blx	r3
    3c22:	4603      	mov	r3, r0
    3c24:	e00f      	b.n	3c46 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    3c26:	79bb      	ldrb	r3, [r7, #6]
    3c28:	2b01      	cmp	r3, #1
    3c2a:	d106      	bne.n	3c3a <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3c2c:	79fb      	ldrb	r3, [r7, #7]
    3c2e:	2101      	movs	r1, #1
    3c30:	4618      	mov	r0, r3
    3c32:	4b08      	ldr	r3, [pc, #32]	; (3c54 <usb_d_ep_halt+0x50>)
    3c34:	4798      	blx	r3
    3c36:	4603      	mov	r3, r0
    3c38:	e005      	b.n	3c46 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3c3a:	79fb      	ldrb	r3, [r7, #7]
    3c3c:	2102      	movs	r1, #2
    3c3e:	4618      	mov	r0, r3
    3c40:	4b04      	ldr	r3, [pc, #16]	; (3c54 <usb_d_ep_halt+0x50>)
    3c42:	4798      	blx	r3
    3c44:	4603      	mov	r3, r0
	}
}
    3c46:	4618      	mov	r0, r3
    3c48:	3708      	adds	r7, #8
    3c4a:	46bd      	mov	sp, r7
    3c4c:	bd80      	pop	{r7, pc}
    3c4e:	bf00      	nop
    3c50:	00003b81 	.word	0x00003b81
    3c54:	0000b0d1 	.word	0x0000b0d1

00003c58 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3c58:	b580      	push	{r7, lr}
    3c5a:	b086      	sub	sp, #24
    3c5c:	af00      	add	r7, sp, #0
    3c5e:	4603      	mov	r3, r0
    3c60:	603a      	str	r2, [r7, #0]
    3c62:	71fb      	strb	r3, [r7, #7]
    3c64:	460b      	mov	r3, r1
    3c66:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3c68:	79fb      	ldrb	r3, [r7, #7]
    3c6a:	4618      	mov	r0, r3
    3c6c:	4b16      	ldr	r3, [pc, #88]	; (3cc8 <usb_d_ep_register_callback+0x70>)
    3c6e:	4798      	blx	r3
    3c70:	4603      	mov	r3, r0
    3c72:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3c74:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3c78:	015b      	lsls	r3, r3, #5
    3c7a:	4a14      	ldr	r2, [pc, #80]	; (3ccc <usb_d_ep_register_callback+0x74>)
    3c7c:	4413      	add	r3, r2
    3c7e:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3c80:	683b      	ldr	r3, [r7, #0]
    3c82:	2b00      	cmp	r3, #0
    3c84:	d001      	beq.n	3c8a <usb_d_ep_register_callback+0x32>
    3c86:	683b      	ldr	r3, [r7, #0]
    3c88:	e000      	b.n	3c8c <usb_d_ep_register_callback+0x34>
    3c8a:	4b11      	ldr	r3, [pc, #68]	; (3cd0 <usb_d_ep_register_callback+0x78>)
    3c8c:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    3c8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3c92:	2b00      	cmp	r3, #0
    3c94:	db13      	blt.n	3cbe <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    3c96:	79bb      	ldrb	r3, [r7, #6]
    3c98:	2b01      	cmp	r3, #1
    3c9a:	d008      	beq.n	3cae <usb_d_ep_register_callback+0x56>
    3c9c:	2b02      	cmp	r3, #2
    3c9e:	d00a      	beq.n	3cb6 <usb_d_ep_register_callback+0x5e>
    3ca0:	2b00      	cmp	r3, #0
    3ca2:	d000      	beq.n	3ca6 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    3ca4:	e00c      	b.n	3cc0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    3ca6:	693b      	ldr	r3, [r7, #16]
    3ca8:	68fa      	ldr	r2, [r7, #12]
    3caa:	615a      	str	r2, [r3, #20]
		break;
    3cac:	e008      	b.n	3cc0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3cae:	693b      	ldr	r3, [r7, #16]
    3cb0:	68fa      	ldr	r2, [r7, #12]
    3cb2:	619a      	str	r2, [r3, #24]
		break;
    3cb4:	e004      	b.n	3cc0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    3cb6:	693b      	ldr	r3, [r7, #16]
    3cb8:	68fa      	ldr	r2, [r7, #12]
    3cba:	61da      	str	r2, [r3, #28]
		break;
    3cbc:	e000      	b.n	3cc0 <usb_d_ep_register_callback+0x68>
		return;
    3cbe:	bf00      	nop
	}
}
    3cc0:	3718      	adds	r7, #24
    3cc2:	46bd      	mov	sp, r7
    3cc4:	bd80      	pop	{r7, pc}
    3cc6:	bf00      	nop
    3cc8:	00003381 	.word	0x00003381
    3ccc:	20000adc 	.word	0x20000adc
    3cd0:	00003455 	.word	0x00003455

00003cd4 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3cd4:	b480      	push	{r7}
    3cd6:	b085      	sub	sp, #20
    3cd8:	af00      	add	r7, sp, #0
    3cda:	4603      	mov	r3, r0
    3cdc:	60b9      	str	r1, [r7, #8]
    3cde:	607a      	str	r2, [r7, #4]
    3ce0:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    3ce2:	7bfb      	ldrb	r3, [r7, #15]
    3ce4:	f083 0301 	eor.w	r3, r3, #1
    3ce8:	b2db      	uxtb	r3, r3
    3cea:	2b00      	cmp	r3, #0
    3cec:	d000      	beq.n	3cf0 <assert+0x1c>
		__asm("BKPT #0");
    3cee:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3cf0:	bf00      	nop
    3cf2:	3714      	adds	r7, #20
    3cf4:	46bd      	mov	sp, r7
    3cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cfa:	4770      	bx	lr

00003cfc <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3cfc:	b480      	push	{r7}
    3cfe:	b085      	sub	sp, #20
    3d00:	af00      	add	r7, sp, #0
    3d02:	6078      	str	r0, [r7, #4]
    3d04:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    3d06:	687b      	ldr	r3, [r7, #4]
    3d08:	681b      	ldr	r3, [r3, #0]
    3d0a:	60fb      	str	r3, [r7, #12]
    3d0c:	e008      	b.n	3d20 <is_list_element+0x24>
		if (it == element) {
    3d0e:	68fa      	ldr	r2, [r7, #12]
    3d10:	683b      	ldr	r3, [r7, #0]
    3d12:	429a      	cmp	r2, r3
    3d14:	d101      	bne.n	3d1a <is_list_element+0x1e>
			return true;
    3d16:	2301      	movs	r3, #1
    3d18:	e006      	b.n	3d28 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    3d1a:	68fb      	ldr	r3, [r7, #12]
    3d1c:	681b      	ldr	r3, [r3, #0]
    3d1e:	60fb      	str	r3, [r7, #12]
    3d20:	68fb      	ldr	r3, [r7, #12]
    3d22:	2b00      	cmp	r3, #0
    3d24:	d1f3      	bne.n	3d0e <is_list_element+0x12>
		}
	}

	return false;
    3d26:	2300      	movs	r3, #0
}
    3d28:	4618      	mov	r0, r3
    3d2a:	3714      	adds	r7, #20
    3d2c:	46bd      	mov	sp, r7
    3d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d32:	4770      	bx	lr

00003d34 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3d34:	b580      	push	{r7, lr}
    3d36:	b082      	sub	sp, #8
    3d38:	af00      	add	r7, sp, #0
    3d3a:	6078      	str	r0, [r7, #4]
    3d3c:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    3d3e:	6839      	ldr	r1, [r7, #0]
    3d40:	6878      	ldr	r0, [r7, #4]
    3d42:	4b0f      	ldr	r3, [pc, #60]	; (3d80 <list_insert_as_head+0x4c>)
    3d44:	4798      	blx	r3
    3d46:	4603      	mov	r3, r0
    3d48:	2b00      	cmp	r3, #0
    3d4a:	bf14      	ite	ne
    3d4c:	2301      	movne	r3, #1
    3d4e:	2300      	moveq	r3, #0
    3d50:	b2db      	uxtb	r3, r3
    3d52:	f083 0301 	eor.w	r3, r3, #1
    3d56:	b2db      	uxtb	r3, r3
    3d58:	f003 0301 	and.w	r3, r3, #1
    3d5c:	b2db      	uxtb	r3, r3
    3d5e:	2239      	movs	r2, #57	; 0x39
    3d60:	4908      	ldr	r1, [pc, #32]	; (3d84 <list_insert_as_head+0x50>)
    3d62:	4618      	mov	r0, r3
    3d64:	4b08      	ldr	r3, [pc, #32]	; (3d88 <list_insert_as_head+0x54>)
    3d66:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3d68:	687b      	ldr	r3, [r7, #4]
    3d6a:	681a      	ldr	r2, [r3, #0]
    3d6c:	683b      	ldr	r3, [r7, #0]
    3d6e:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3d70:	687b      	ldr	r3, [r7, #4]
    3d72:	683a      	ldr	r2, [r7, #0]
    3d74:	601a      	str	r2, [r3, #0]
}
    3d76:	bf00      	nop
    3d78:	3708      	adds	r7, #8
    3d7a:	46bd      	mov	sp, r7
    3d7c:	bd80      	pop	{r7, pc}
    3d7e:	bf00      	nop
    3d80:	00003cfd 	.word	0x00003cfd
    3d84:	00010f70 	.word	0x00010f70
    3d88:	00003cd5 	.word	0x00003cd5

00003d8c <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3d8c:	b480      	push	{r7}
    3d8e:	b083      	sub	sp, #12
    3d90:	af00      	add	r7, sp, #0
    3d92:	6078      	str	r0, [r7, #4]
    3d94:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    3d96:	687b      	ldr	r3, [r7, #4]
    3d98:	681a      	ldr	r2, [r3, #0]
    3d9a:	683b      	ldr	r3, [r7, #0]
    3d9c:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3d9e:	687b      	ldr	r3, [r7, #4]
    3da0:	683a      	ldr	r2, [r7, #0]
    3da2:	601a      	str	r2, [r3, #0]
}
    3da4:	bf00      	nop
    3da6:	370c      	adds	r7, #12
    3da8:	46bd      	mov	sp, r7
    3daa:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dae:	4770      	bx	lr

00003db0 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3db0:	b580      	push	{r7, lr}
    3db2:	b084      	sub	sp, #16
    3db4:	af00      	add	r7, sp, #0
    3db6:	6078      	str	r0, [r7, #4]
    3db8:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    3dba:	687b      	ldr	r3, [r7, #4]
    3dbc:	681b      	ldr	r3, [r3, #0]
    3dbe:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3dc0:	6839      	ldr	r1, [r7, #0]
    3dc2:	6878      	ldr	r0, [r7, #4]
    3dc4:	4b16      	ldr	r3, [pc, #88]	; (3e20 <list_insert_at_end+0x70>)
    3dc6:	4798      	blx	r3
    3dc8:	4603      	mov	r3, r0
    3dca:	2b00      	cmp	r3, #0
    3dcc:	bf14      	ite	ne
    3dce:	2301      	movne	r3, #1
    3dd0:	2300      	moveq	r3, #0
    3dd2:	b2db      	uxtb	r3, r3
    3dd4:	f083 0301 	eor.w	r3, r3, #1
    3dd8:	b2db      	uxtb	r3, r3
    3dda:	f003 0301 	and.w	r3, r3, #1
    3dde:	b2db      	uxtb	r3, r3
    3de0:	224f      	movs	r2, #79	; 0x4f
    3de2:	4910      	ldr	r1, [pc, #64]	; (3e24 <list_insert_at_end+0x74>)
    3de4:	4618      	mov	r0, r3
    3de6:	4b10      	ldr	r3, [pc, #64]	; (3e28 <list_insert_at_end+0x78>)
    3de8:	4798      	blx	r3

	if (!list->head) {
    3dea:	687b      	ldr	r3, [r7, #4]
    3dec:	681b      	ldr	r3, [r3, #0]
    3dee:	2b00      	cmp	r3, #0
    3df0:	d109      	bne.n	3e06 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    3df2:	687b      	ldr	r3, [r7, #4]
    3df4:	683a      	ldr	r2, [r7, #0]
    3df6:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3df8:	683b      	ldr	r3, [r7, #0]
    3dfa:	2200      	movs	r2, #0
    3dfc:	601a      	str	r2, [r3, #0]
		return;
    3dfe:	e00c      	b.n	3e1a <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3e00:	68fb      	ldr	r3, [r7, #12]
    3e02:	681b      	ldr	r3, [r3, #0]
    3e04:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    3e06:	68fb      	ldr	r3, [r7, #12]
    3e08:	681b      	ldr	r3, [r3, #0]
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d1f8      	bne.n	3e00 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3e0e:	68fb      	ldr	r3, [r7, #12]
    3e10:	683a      	ldr	r2, [r7, #0]
    3e12:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3e14:	683b      	ldr	r3, [r7, #0]
    3e16:	2200      	movs	r2, #0
    3e18:	601a      	str	r2, [r3, #0]
}
    3e1a:	3710      	adds	r7, #16
    3e1c:	46bd      	mov	sp, r7
    3e1e:	bd80      	pop	{r7, pc}
    3e20:	00003cfd 	.word	0x00003cfd
    3e24:	00010f70 	.word	0x00010f70
    3e28:	00003cd5 	.word	0x00003cd5

00003e2c <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3e2c:	b480      	push	{r7}
    3e2e:	b085      	sub	sp, #20
    3e30:	af00      	add	r7, sp, #0
    3e32:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3e34:	687b      	ldr	r3, [r7, #4]
    3e36:	681b      	ldr	r3, [r3, #0]
    3e38:	2b00      	cmp	r3, #0
    3e3a:	d009      	beq.n	3e50 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3e3c:	687b      	ldr	r3, [r7, #4]
    3e3e:	681b      	ldr	r3, [r3, #0]
    3e40:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3e42:	687b      	ldr	r3, [r7, #4]
    3e44:	681b      	ldr	r3, [r3, #0]
    3e46:	681a      	ldr	r2, [r3, #0]
    3e48:	687b      	ldr	r3, [r7, #4]
    3e4a:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3e4c:	68fb      	ldr	r3, [r7, #12]
    3e4e:	e000      	b.n	3e52 <list_remove_head+0x26>
	}

	return NULL;
    3e50:	2300      	movs	r3, #0
}
    3e52:	4618      	mov	r0, r3
    3e54:	3714      	adds	r7, #20
    3e56:	46bd      	mov	sp, r7
    3e58:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e5c:	4770      	bx	lr

00003e5e <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3e5e:	b480      	push	{r7}
    3e60:	b085      	sub	sp, #20
    3e62:	af00      	add	r7, sp, #0
    3e64:	6078      	str	r0, [r7, #4]
    3e66:	6039      	str	r1, [r7, #0]
	if (!element) {
    3e68:	683b      	ldr	r3, [r7, #0]
    3e6a:	2b00      	cmp	r3, #0
    3e6c:	d101      	bne.n	3e72 <list_delete_element+0x14>
		return false;
    3e6e:	2300      	movs	r3, #0
    3e70:	e024      	b.n	3ebc <list_delete_element+0x5e>
	}

	if (list->head == element) {
    3e72:	687b      	ldr	r3, [r7, #4]
    3e74:	681a      	ldr	r2, [r3, #0]
    3e76:	683b      	ldr	r3, [r7, #0]
    3e78:	429a      	cmp	r2, r3
    3e7a:	d106      	bne.n	3e8a <list_delete_element+0x2c>
		list->head = list->head->next;
    3e7c:	687b      	ldr	r3, [r7, #4]
    3e7e:	681b      	ldr	r3, [r3, #0]
    3e80:	681a      	ldr	r2, [r3, #0]
    3e82:	687b      	ldr	r3, [r7, #4]
    3e84:	601a      	str	r2, [r3, #0]
		return true;
    3e86:	2301      	movs	r3, #1
    3e88:	e018      	b.n	3ebc <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    3e8a:	687b      	ldr	r3, [r7, #4]
    3e8c:	681b      	ldr	r3, [r3, #0]
    3e8e:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3e90:	e002      	b.n	3e98 <list_delete_element+0x3a>
			it = it->next;
    3e92:	68fb      	ldr	r3, [r7, #12]
    3e94:	681b      	ldr	r3, [r3, #0]
    3e96:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    3e98:	68fb      	ldr	r3, [r7, #12]
    3e9a:	2b00      	cmp	r3, #0
    3e9c:	d004      	beq.n	3ea8 <list_delete_element+0x4a>
    3e9e:	68fb      	ldr	r3, [r7, #12]
    3ea0:	681a      	ldr	r2, [r3, #0]
    3ea2:	683b      	ldr	r3, [r7, #0]
    3ea4:	429a      	cmp	r2, r3
    3ea6:	d1f4      	bne.n	3e92 <list_delete_element+0x34>
		}
		if (it) {
    3ea8:	68fb      	ldr	r3, [r7, #12]
    3eaa:	2b00      	cmp	r3, #0
    3eac:	d005      	beq.n	3eba <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    3eae:	683b      	ldr	r3, [r7, #0]
    3eb0:	681a      	ldr	r2, [r3, #0]
    3eb2:	68fb      	ldr	r3, [r7, #12]
    3eb4:	601a      	str	r2, [r3, #0]
			return true;
    3eb6:	2301      	movs	r3, #1
    3eb8:	e000      	b.n	3ebc <list_delete_element+0x5e>
		}
	}

	return false;
    3eba:	2300      	movs	r3, #0
}
    3ebc:	4618      	mov	r0, r3
    3ebe:	3714      	adds	r7, #20
    3ec0:	46bd      	mov	sp, r7
    3ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ec6:	4770      	bx	lr

00003ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3ec8:	b480      	push	{r7}
    3eca:	b083      	sub	sp, #12
    3ecc:	af00      	add	r7, sp, #0
    3ece:	4603      	mov	r3, r0
    3ed0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3ed6:	2b00      	cmp	r3, #0
    3ed8:	db0b      	blt.n	3ef2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3eda:	4909      	ldr	r1, [pc, #36]	; (3f00 <__NVIC_EnableIRQ+0x38>)
    3edc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3ee0:	095b      	lsrs	r3, r3, #5
    3ee2:	88fa      	ldrh	r2, [r7, #6]
    3ee4:	f002 021f 	and.w	r2, r2, #31
    3ee8:	2001      	movs	r0, #1
    3eea:	fa00 f202 	lsl.w	r2, r0, r2
    3eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3ef2:	bf00      	nop
    3ef4:	370c      	adds	r7, #12
    3ef6:	46bd      	mov	sp, r7
    3ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3efc:	4770      	bx	lr
    3efe:	bf00      	nop
    3f00:	e000e100 	.word	0xe000e100

00003f04 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3f04:	b480      	push	{r7}
    3f06:	b083      	sub	sp, #12
    3f08:	af00      	add	r7, sp, #0
    3f0a:	4603      	mov	r3, r0
    3f0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3f12:	2b00      	cmp	r3, #0
    3f14:	db10      	blt.n	3f38 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3f16:	490b      	ldr	r1, [pc, #44]	; (3f44 <__NVIC_DisableIRQ+0x40>)
    3f18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3f1c:	095b      	lsrs	r3, r3, #5
    3f1e:	88fa      	ldrh	r2, [r7, #6]
    3f20:	f002 021f 	and.w	r2, r2, #31
    3f24:	2001      	movs	r0, #1
    3f26:	fa00 f202 	lsl.w	r2, r0, r2
    3f2a:	3320      	adds	r3, #32
    3f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3f30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f34:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3f38:	bf00      	nop
    3f3a:	370c      	adds	r7, #12
    3f3c:	46bd      	mov	sp, r7
    3f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f42:	4770      	bx	lr
    3f44:	e000e100 	.word	0xe000e100

00003f48 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3f48:	b480      	push	{r7}
    3f4a:	b083      	sub	sp, #12
    3f4c:	af00      	add	r7, sp, #0
    3f4e:	4603      	mov	r3, r0
    3f50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3f56:	2b00      	cmp	r3, #0
    3f58:	db0c      	blt.n	3f74 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3f5a:	4909      	ldr	r1, [pc, #36]	; (3f80 <__NVIC_ClearPendingIRQ+0x38>)
    3f5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3f60:	095b      	lsrs	r3, r3, #5
    3f62:	88fa      	ldrh	r2, [r7, #6]
    3f64:	f002 021f 	and.w	r2, r2, #31
    3f68:	2001      	movs	r0, #1
    3f6a:	fa00 f202 	lsl.w	r2, r0, r2
    3f6e:	3360      	adds	r3, #96	; 0x60
    3f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3f74:	bf00      	nop
    3f76:	370c      	adds	r7, #12
    3f78:	46bd      	mov	sp, r7
    3f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f7e:	4770      	bx	lr
    3f80:	e000e100 	.word	0xe000e100

00003f84 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3f84:	b480      	push	{r7}
    3f86:	b083      	sub	sp, #12
    3f88:	af00      	add	r7, sp, #0
    3f8a:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3f8c:	687b      	ldr	r3, [r7, #4]
    3f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3f90:	095b      	lsrs	r3, r3, #5
    3f92:	f003 0301 	and.w	r3, r3, #1
    3f96:	2b00      	cmp	r3, #0
    3f98:	bf14      	ite	ne
    3f9a:	2301      	movne	r3, #1
    3f9c:	2300      	moveq	r3, #0
    3f9e:	b2db      	uxtb	r3, r3
}
    3fa0:	4618      	mov	r0, r3
    3fa2:	370c      	adds	r7, #12
    3fa4:	46bd      	mov	sp, r7
    3fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3faa:	4770      	bx	lr

00003fac <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3fac:	b480      	push	{r7}
    3fae:	b083      	sub	sp, #12
    3fb0:	af00      	add	r7, sp, #0
    3fb2:	6078      	str	r0, [r7, #4]
    3fb4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    3fb6:	687b      	ldr	r3, [r7, #4]
    3fb8:	683a      	ldr	r2, [r7, #0]
    3fba:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3fbc:	bf00      	nop
    3fbe:	370c      	adds	r7, #12
    3fc0:	46bd      	mov	sp, r7
    3fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fc6:	4770      	bx	lr

00003fc8 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3fc8:	b480      	push	{r7}
    3fca:	b083      	sub	sp, #12
    3fcc:	af00      	add	r7, sp, #0
    3fce:	6078      	str	r0, [r7, #4]
    3fd0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3fd2:	687b      	ldr	r3, [r7, #4]
    3fd4:	683a      	ldr	r2, [r7, #0]
    3fd6:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3fd8:	bf00      	nop
    3fda:	370c      	adds	r7, #12
    3fdc:	46bd      	mov	sp, r7
    3fde:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fe2:	4770      	bx	lr

00003fe4 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3fe4:	b480      	push	{r7}
    3fe6:	b083      	sub	sp, #12
    3fe8:	af00      	add	r7, sp, #0
    3fea:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3fec:	687b      	ldr	r3, [r7, #4]
    3fee:	699b      	ldr	r3, [r3, #24]
    3ff0:	f043 0201 	orr.w	r2, r3, #1
    3ff4:	687b      	ldr	r3, [r7, #4]
    3ff6:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ff8:	bf00      	nop
    3ffa:	370c      	adds	r7, #12
    3ffc:	46bd      	mov	sp, r7
    3ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4002:	4770      	bx	lr

00004004 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    4004:	b480      	push	{r7}
    4006:	b085      	sub	sp, #20
    4008:	af00      	add	r7, sp, #0
    400a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    400c:	687b      	ldr	r3, [r7, #4]
    400e:	699b      	ldr	r3, [r3, #24]
    4010:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    4012:	68fb      	ldr	r3, [r7, #12]
    4014:	f003 0301 	and.w	r3, r3, #1
    4018:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    401a:	68fb      	ldr	r3, [r7, #12]
    401c:	2b00      	cmp	r3, #0
    401e:	bf14      	ite	ne
    4020:	2301      	movne	r3, #1
    4022:	2300      	moveq	r3, #0
    4024:	b2db      	uxtb	r3, r3
}
    4026:	4618      	mov	r0, r3
    4028:	3714      	adds	r7, #20
    402a:	46bd      	mov	sp, r7
    402c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4030:	4770      	bx	lr

00004032 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    4032:	b480      	push	{r7}
    4034:	b083      	sub	sp, #12
    4036:	af00      	add	r7, sp, #0
    4038:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    403a:	687b      	ldr	r3, [r7, #4]
    403c:	699b      	ldr	r3, [r3, #24]
    403e:	f023 0201 	bic.w	r2, r3, #1
    4042:	687b      	ldr	r3, [r7, #4]
    4044:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4046:	bf00      	nop
    4048:	370c      	adds	r7, #12
    404a:	46bd      	mov	sp, r7
    404c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4050:	4770      	bx	lr

00004052 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    4052:	b480      	push	{r7}
    4054:	b083      	sub	sp, #12
    4056:	af00      	add	r7, sp, #0
    4058:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    405a:	687b      	ldr	r3, [r7, #4]
    405c:	699b      	ldr	r3, [r3, #24]
    405e:	f043 0202 	orr.w	r2, r3, #2
    4062:	687b      	ldr	r3, [r7, #4]
    4064:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4066:	bf00      	nop
    4068:	370c      	adds	r7, #12
    406a:	46bd      	mov	sp, r7
    406c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4070:	4770      	bx	lr

00004072 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    4072:	b480      	push	{r7}
    4074:	b083      	sub	sp, #12
    4076:	af00      	add	r7, sp, #0
    4078:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    407a:	687b      	ldr	r3, [r7, #4]
    407c:	699b      	ldr	r3, [r3, #24]
    407e:	f023 0202 	bic.w	r2, r3, #2
    4082:	687b      	ldr	r3, [r7, #4]
    4084:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4086:	bf00      	nop
    4088:	370c      	adds	r7, #12
    408a:	46bd      	mov	sp, r7
    408c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4090:	4770      	bx	lr

00004092 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    4092:	b480      	push	{r7}
    4094:	b083      	sub	sp, #12
    4096:	af00      	add	r7, sp, #0
    4098:	6078      	str	r0, [r7, #4]
    409a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    409c:	687b      	ldr	r3, [r7, #4]
    409e:	699a      	ldr	r2, [r3, #24]
    40a0:	683b      	ldr	r3, [r7, #0]
    40a2:	431a      	orrs	r2, r3
    40a4:	687b      	ldr	r3, [r7, #4]
    40a6:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    40a8:	bf00      	nop
    40aa:	370c      	adds	r7, #12
    40ac:	46bd      	mov	sp, r7
    40ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    40b2:	4770      	bx	lr

000040b4 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    40b4:	b480      	push	{r7}
    40b6:	b083      	sub	sp, #12
    40b8:	af00      	add	r7, sp, #0
    40ba:	6078      	str	r0, [r7, #4]
    40bc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    40be:	687b      	ldr	r3, [r7, #4]
    40c0:	683a      	ldr	r2, [r7, #0]
    40c2:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    40c4:	bf00      	nop
    40c6:	370c      	adds	r7, #12
    40c8:	46bd      	mov	sp, r7
    40ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    40ce:	4770      	bx	lr

000040d0 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    40d0:	b480      	push	{r7}
    40d2:	b083      	sub	sp, #12
    40d4:	af00      	add	r7, sp, #0
    40d6:	6078      	str	r0, [r7, #4]
    40d8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    40da:	687b      	ldr	r3, [r7, #4]
    40dc:	683a      	ldr	r2, [r7, #0]
    40de:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    40e0:	bf00      	nop
    40e2:	370c      	adds	r7, #12
    40e4:	46bd      	mov	sp, r7
    40e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    40ea:	4770      	bx	lr

000040ec <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    40ec:	b480      	push	{r7}
    40ee:	b083      	sub	sp, #12
    40f0:	af00      	add	r7, sp, #0
    40f2:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    40f4:	687b      	ldr	r3, [r7, #4]
    40f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    40f8:	4618      	mov	r0, r3
    40fa:	370c      	adds	r7, #12
    40fc:	46bd      	mov	sp, r7
    40fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4102:	4770      	bx	lr

00004104 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    4104:	b480      	push	{r7}
    4106:	b083      	sub	sp, #12
    4108:	af00      	add	r7, sp, #0
    410a:	6078      	str	r0, [r7, #4]
    410c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    410e:	687b      	ldr	r3, [r7, #4]
    4110:	683a      	ldr	r2, [r7, #0]
    4112:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    4114:	bf00      	nop
    4116:	370c      	adds	r7, #12
    4118:	46bd      	mov	sp, r7
    411a:	f85d 7b04 	ldr.w	r7, [sp], #4
    411e:	4770      	bx	lr

00004120 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    4120:	b480      	push	{r7}
    4122:	b083      	sub	sp, #12
    4124:	af00      	add	r7, sp, #0
    4126:	6078      	str	r0, [r7, #4]
    4128:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    412a:	687b      	ldr	r3, [r7, #4]
    412c:	683a      	ldr	r2, [r7, #0]
    412e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    4132:	bf00      	nop
    4134:	370c      	adds	r7, #12
    4136:	46bd      	mov	sp, r7
    4138:	f85d 7b04 	ldr.w	r7, [sp], #4
    413c:	4770      	bx	lr

0000413e <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    413e:	b480      	push	{r7}
    4140:	b083      	sub	sp, #12
    4142:	af00      	add	r7, sp, #0
    4144:	6078      	str	r0, [r7, #4]
    4146:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    4148:	687b      	ldr	r3, [r7, #4]
    414a:	683a      	ldr	r2, [r7, #0]
    414c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    4150:	bf00      	nop
    4152:	370c      	adds	r7, #12
    4154:	46bd      	mov	sp, r7
    4156:	f85d 7b04 	ldr.w	r7, [sp], #4
    415a:	4770      	bx	lr

0000415c <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    415c:	b480      	push	{r7}
    415e:	b083      	sub	sp, #12
    4160:	af00      	add	r7, sp, #0
    4162:	6078      	str	r0, [r7, #4]
    4164:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    4166:	687b      	ldr	r3, [r7, #4]
    4168:	683a      	ldr	r2, [r7, #0]
    416a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    416e:	bf00      	nop
    4170:	370c      	adds	r7, #12
    4172:	46bd      	mov	sp, r7
    4174:	f85d 7b04 	ldr.w	r7, [sp], #4
    4178:	4770      	bx	lr

0000417a <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    417a:	b480      	push	{r7}
    417c:	b083      	sub	sp, #12
    417e:	af00      	add	r7, sp, #0
    4180:	6078      	str	r0, [r7, #4]
    4182:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    4184:	687b      	ldr	r3, [r7, #4]
    4186:	683a      	ldr	r2, [r7, #0]
    4188:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    418c:	bf00      	nop
    418e:	370c      	adds	r7, #12
    4190:	46bd      	mov	sp, r7
    4192:	f85d 7b04 	ldr.w	r7, [sp], #4
    4196:	4770      	bx	lr

00004198 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    4198:	b480      	push	{r7}
    419a:	b083      	sub	sp, #12
    419c:	af00      	add	r7, sp, #0
    419e:	6078      	str	r0, [r7, #4]
    41a0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    41a2:	687b      	ldr	r3, [r7, #4]
    41a4:	683a      	ldr	r2, [r7, #0]
    41a6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    41aa:	bf00      	nop
    41ac:	370c      	adds	r7, #12
    41ae:	46bd      	mov	sp, r7
    41b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    41b4:	4770      	bx	lr

000041b6 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    41b6:	b480      	push	{r7}
    41b8:	b083      	sub	sp, #12
    41ba:	af00      	add	r7, sp, #0
    41bc:	6078      	str	r0, [r7, #4]
    41be:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    41c0:	687b      	ldr	r3, [r7, #4]
    41c2:	683a      	ldr	r2, [r7, #0]
    41c4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    41c8:	bf00      	nop
    41ca:	370c      	adds	r7, #12
    41cc:	46bd      	mov	sp, r7
    41ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    41d2:	4770      	bx	lr

000041d4 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    41d4:	b480      	push	{r7}
    41d6:	b083      	sub	sp, #12
    41d8:	af00      	add	r7, sp, #0
    41da:	6078      	str	r0, [r7, #4]
    41dc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    41de:	687b      	ldr	r3, [r7, #4]
    41e0:	683a      	ldr	r2, [r7, #0]
    41e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    41e6:	bf00      	nop
    41e8:	370c      	adds	r7, #12
    41ea:	46bd      	mov	sp, r7
    41ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    41f0:	4770      	bx	lr

000041f2 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    41f2:	b480      	push	{r7}
    41f4:	b083      	sub	sp, #12
    41f6:	af00      	add	r7, sp, #0
    41f8:	6078      	str	r0, [r7, #4]
    41fa:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    41fc:	687b      	ldr	r3, [r7, #4]
    41fe:	683a      	ldr	r2, [r7, #0]
    4200:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    4204:	bf00      	nop
    4206:	370c      	adds	r7, #12
    4208:	46bd      	mov	sp, r7
    420a:	f85d 7b04 	ldr.w	r7, [sp], #4
    420e:	4770      	bx	lr

00004210 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    4210:	b480      	push	{r7}
    4212:	b083      	sub	sp, #12
    4214:	af00      	add	r7, sp, #0
    4216:	6078      	str	r0, [r7, #4]
    4218:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    421a:	687b      	ldr	r3, [r7, #4]
    421c:	683a      	ldr	r2, [r7, #0]
    421e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4222:	bf00      	nop
    4224:	370c      	adds	r7, #12
    4226:	46bd      	mov	sp, r7
    4228:	f85d 7b04 	ldr.w	r7, [sp], #4
    422c:	4770      	bx	lr
	...

00004230 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    4230:	b580      	push	{r7, lr}
    4232:	b082      	sub	sp, #8
    4234:	af00      	add	r7, sp, #0
    4236:	6078      	str	r0, [r7, #4]
    4238:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    423a:	687b      	ldr	r3, [r7, #4]
    423c:	683a      	ldr	r2, [r7, #0]
    423e:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    4240:	687b      	ldr	r3, [r7, #4]
    4242:	681b      	ldr	r3, [r3, #0]
    4244:	4618      	mov	r0, r3
    4246:	4b55      	ldr	r3, [pc, #340]	; (439c <_can_async_init+0x16c>)
    4248:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    424a:	bf00      	nop
    424c:	687b      	ldr	r3, [r7, #4]
    424e:	681b      	ldr	r3, [r3, #0]
    4250:	4618      	mov	r0, r3
    4252:	4b53      	ldr	r3, [pc, #332]	; (43a0 <_can_async_init+0x170>)
    4254:	4798      	blx	r3
    4256:	4603      	mov	r3, r0
    4258:	f083 0301 	eor.w	r3, r3, #1
    425c:	b2db      	uxtb	r3, r3
    425e:	2b00      	cmp	r3, #0
    4260:	d1f4      	bne.n	424c <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    4262:	687b      	ldr	r3, [r7, #4]
    4264:	681b      	ldr	r3, [r3, #0]
    4266:	4618      	mov	r0, r3
    4268:	4b4e      	ldr	r3, [pc, #312]	; (43a4 <_can_async_init+0x174>)
    426a:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    426c:	683b      	ldr	r3, [r7, #0]
    426e:	4a4e      	ldr	r2, [pc, #312]	; (43a8 <_can_async_init+0x178>)
    4270:	4293      	cmp	r3, r2
    4272:	d17a      	bne.n	436a <_can_async_init+0x13a>
		_can1_dev    = dev;
    4274:	4a4d      	ldr	r2, [pc, #308]	; (43ac <_can_async_init+0x17c>)
    4276:	687b      	ldr	r3, [r7, #4]
    4278:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    427a:	687b      	ldr	r3, [r7, #4]
    427c:	4a4c      	ldr	r2, [pc, #304]	; (43b0 <_can_async_init+0x180>)
    427e:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    4280:	687b      	ldr	r3, [r7, #4]
    4282:	681b      	ldr	r3, [r3, #0]
    4284:	f44f 7140 	mov.w	r1, #768	; 0x300
    4288:	4618      	mov	r0, r3
    428a:	4b4a      	ldr	r3, [pc, #296]	; (43b4 <_can_async_init+0x184>)
    428c:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    428e:	687b      	ldr	r3, [r7, #4]
    4290:	681b      	ldr	r3, [r3, #0]
    4292:	2102      	movs	r1, #2
    4294:	4618      	mov	r0, r3
    4296:	4b48      	ldr	r3, [pc, #288]	; (43b8 <_can_async_init+0x188>)
    4298:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    429a:	687b      	ldr	r3, [r7, #4]
    429c:	681b      	ldr	r3, [r3, #0]
    429e:	4947      	ldr	r1, [pc, #284]	; (43bc <_can_async_init+0x18c>)
    42a0:	4618      	mov	r0, r3
    42a2:	4b47      	ldr	r3, [pc, #284]	; (43c0 <_can_async_init+0x190>)
    42a4:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    42a6:	687b      	ldr	r3, [r7, #4]
    42a8:	681b      	ldr	r3, [r3, #0]
    42aa:	4946      	ldr	r1, [pc, #280]	; (43c4 <_can_async_init+0x194>)
    42ac:	4618      	mov	r0, r3
    42ae:	4b46      	ldr	r3, [pc, #280]	; (43c8 <_can_async_init+0x198>)
    42b0:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    42b2:	687b      	ldr	r3, [r7, #4]
    42b4:	681a      	ldr	r2, [r3, #0]
    42b6:	4b45      	ldr	r3, [pc, #276]	; (43cc <_can_async_init+0x19c>)
    42b8:	b29b      	uxth	r3, r3
    42ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    42be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    42c2:	4619      	mov	r1, r3
    42c4:	4610      	mov	r0, r2
    42c6:	4b42      	ldr	r3, [pc, #264]	; (43d0 <_can_async_init+0x1a0>)
    42c8:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    42ca:	687b      	ldr	r3, [r7, #4]
    42cc:	681b      	ldr	r3, [r3, #0]
    42ce:	2107      	movs	r1, #7
    42d0:	4618      	mov	r0, r3
    42d2:	4b40      	ldr	r3, [pc, #256]	; (43d4 <_can_async_init+0x1a4>)
    42d4:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    42d6:	687b      	ldr	r3, [r7, #4]
    42d8:	681b      	ldr	r3, [r3, #0]
    42da:	2107      	movs	r1, #7
    42dc:	4618      	mov	r0, r3
    42de:	4b3e      	ldr	r3, [pc, #248]	; (43d8 <_can_async_init+0x1a8>)
    42e0:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    42e2:	687b      	ldr	r3, [r7, #4]
    42e4:	681a      	ldr	r2, [r3, #0]
    42e6:	4b3d      	ldr	r3, [pc, #244]	; (43dc <_can_async_init+0x1ac>)
    42e8:	b29b      	uxth	r3, r3
    42ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    42ee:	4619      	mov	r1, r3
    42f0:	4610      	mov	r0, r2
    42f2:	4b3b      	ldr	r3, [pc, #236]	; (43e0 <_can_async_init+0x1b0>)
    42f4:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    42f6:	687b      	ldr	r3, [r7, #4]
    42f8:	681a      	ldr	r2, [r3, #0]
    42fa:	4b3a      	ldr	r3, [pc, #232]	; (43e4 <_can_async_init+0x1b4>)
    42fc:	b29b      	uxth	r3, r3
    42fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4302:	4619      	mov	r1, r3
    4304:	4610      	mov	r0, r2
    4306:	4b38      	ldr	r3, [pc, #224]	; (43e8 <_can_async_init+0x1b8>)
    4308:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    430a:	687b      	ldr	r3, [r7, #4]
    430c:	681b      	ldr	r3, [r3, #0]
    430e:	2108      	movs	r1, #8
    4310:	4618      	mov	r0, r3
    4312:	4b36      	ldr	r3, [pc, #216]	; (43ec <_can_async_init+0x1bc>)
    4314:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    4316:	687b      	ldr	r3, [r7, #4]
    4318:	681a      	ldr	r2, [r3, #0]
    431a:	4b35      	ldr	r3, [pc, #212]	; (43f0 <_can_async_init+0x1c0>)
    431c:	b29b      	uxth	r3, r3
    431e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    4322:	4619      	mov	r1, r3
    4324:	4610      	mov	r0, r2
    4326:	4b33      	ldr	r3, [pc, #204]	; (43f4 <_can_async_init+0x1c4>)
    4328:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    432a:	687b      	ldr	r3, [r7, #4]
    432c:	681a      	ldr	r2, [r3, #0]
    432e:	4b32      	ldr	r3, [pc, #200]	; (43f8 <_can_async_init+0x1c8>)
    4330:	b29b      	uxth	r3, r3
    4332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4336:	4619      	mov	r1, r3
    4338:	4610      	mov	r0, r2
    433a:	4b30      	ldr	r3, [pc, #192]	; (43fc <_can_async_init+0x1cc>)
    433c:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    433e:	687b      	ldr	r3, [r7, #4]
    4340:	681b      	ldr	r3, [r3, #0]
    4342:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    4346:	4618      	mov	r0, r3
    4348:	4b2d      	ldr	r3, [pc, #180]	; (4400 <_can_async_init+0x1d0>)
    434a:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    434c:	204f      	movs	r0, #79	; 0x4f
    434e:	4b2d      	ldr	r3, [pc, #180]	; (4404 <_can_async_init+0x1d4>)
    4350:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    4352:	204f      	movs	r0, #79	; 0x4f
    4354:	4b2c      	ldr	r3, [pc, #176]	; (4408 <_can_async_init+0x1d8>)
    4356:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    4358:	204f      	movs	r0, #79	; 0x4f
    435a:	4b2c      	ldr	r3, [pc, #176]	; (440c <_can_async_init+0x1dc>)
    435c:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    435e:	687b      	ldr	r3, [r7, #4]
    4360:	681b      	ldr	r3, [r3, #0]
    4362:	2101      	movs	r1, #1
    4364:	4618      	mov	r0, r3
    4366:	4b2a      	ldr	r3, [pc, #168]	; (4410 <_can_async_init+0x1e0>)
    4368:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    436a:	687b      	ldr	r3, [r7, #4]
    436c:	681b      	ldr	r3, [r3, #0]
    436e:	4618      	mov	r0, r3
    4370:	4b28      	ldr	r3, [pc, #160]	; (4414 <_can_async_init+0x1e4>)
    4372:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    4374:	687b      	ldr	r3, [r7, #4]
    4376:	681b      	ldr	r3, [r3, #0]
    4378:	4618      	mov	r0, r3
    437a:	4b27      	ldr	r3, [pc, #156]	; (4418 <_can_async_init+0x1e8>)
    437c:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    437e:	bf00      	nop
    4380:	687b      	ldr	r3, [r7, #4]
    4382:	681b      	ldr	r3, [r3, #0]
    4384:	4618      	mov	r0, r3
    4386:	4b06      	ldr	r3, [pc, #24]	; (43a0 <_can_async_init+0x170>)
    4388:	4798      	blx	r3
    438a:	4603      	mov	r3, r0
    438c:	2b00      	cmp	r3, #0
    438e:	d1f7      	bne.n	4380 <_can_async_init+0x150>
	};

	return ERR_NONE;
    4390:	2300      	movs	r3, #0
}
    4392:	4618      	mov	r0, r3
    4394:	3708      	adds	r7, #8
    4396:	46bd      	mov	sp, r7
    4398:	bd80      	pop	{r7, pc}
    439a:	bf00      	nop
    439c:	00003fe5 	.word	0x00003fe5
    43a0:	00004005 	.word	0x00004005
    43a4:	00004053 	.word	0x00004053
    43a8:	42000400 	.word	0x42000400
    43ac:	20000bfc 	.word	0x20000bfc
    43b0:	20000004 	.word	0x20000004
    43b4:	00004093 	.word	0x00004093
    43b8:	00003fad 	.word	0x00003fad
    43bc:	00010c01 	.word	0x00010c01
    43c0:	000040b5 	.word	0x000040b5
    43c4:	00010c10 	.word	0x00010c10
    43c8:	00003fc9 	.word	0x00003fc9
    43cc:	20001900 	.word	0x20001900
    43d0:	00004199 	.word	0x00004199
    43d4:	000041b7 	.word	0x000041b7
    43d8:	000041f3 	.word	0x000041f3
    43dc:	200018b8 	.word	0x200018b8
    43e0:	000041d5 	.word	0x000041d5
    43e4:	20000b5c 	.word	0x20000b5c
    43e8:	00004211 	.word	0x00004211
    43ec:	00004121 	.word	0x00004121
    43f0:	20000b6c 	.word	0x20000b6c
    43f4:	0000413f 	.word	0x0000413f
    43f8:	20000bec 	.word	0x20000bec
    43fc:	0000415d 	.word	0x0000415d
    4400:	0000417b 	.word	0x0000417b
    4404:	00003f05 	.word	0x00003f05
    4408:	00003f49 	.word	0x00003f49
    440c:	00003ec9 	.word	0x00003ec9
    4410:	00004105 	.word	0x00004105
    4414:	00004073 	.word	0x00004073
    4418:	00004033 	.word	0x00004033

0000441c <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    441c:	b590      	push	{r4, r7, lr}
    441e:	b083      	sub	sp, #12
    4420:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    4422:	4b2c      	ldr	r3, [pc, #176]	; (44d4 <CAN1_Handler+0xb8>)
    4424:	681b      	ldr	r3, [r3, #0]
    4426:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    4428:	687b      	ldr	r3, [r7, #4]
    442a:	681b      	ldr	r3, [r3, #0]
    442c:	4618      	mov	r0, r3
    442e:	4b2a      	ldr	r3, [pc, #168]	; (44d8 <CAN1_Handler+0xbc>)
    4430:	4798      	blx	r3
    4432:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    4434:	683b      	ldr	r3, [r7, #0]
    4436:	f003 0301 	and.w	r3, r3, #1
    443a:	2b00      	cmp	r3, #0
    443c:	d003      	beq.n	4446 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    443e:	687b      	ldr	r3, [r7, #4]
    4440:	689b      	ldr	r3, [r3, #8]
    4442:	6878      	ldr	r0, [r7, #4]
    4444:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    4446:	683b      	ldr	r3, [r7, #0]
    4448:	f403 7300 	and.w	r3, r3, #512	; 0x200
    444c:	2b00      	cmp	r3, #0
    444e:	d003      	beq.n	4458 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    4450:	687b      	ldr	r3, [r7, #4]
    4452:	685b      	ldr	r3, [r3, #4]
    4454:	6878      	ldr	r0, [r7, #4]
    4456:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    4458:	683b      	ldr	r3, [r7, #0]
    445a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    445e:	2b00      	cmp	r3, #0
    4460:	d004      	beq.n	446c <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    4462:	687b      	ldr	r3, [r7, #4]
    4464:	68db      	ldr	r3, [r3, #12]
    4466:	2103      	movs	r1, #3
    4468:	6878      	ldr	r0, [r7, #4]
    446a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    446c:	683b      	ldr	r3, [r7, #0]
    446e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    4472:	2b00      	cmp	r3, #0
    4474:	d004      	beq.n	4480 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    4476:	687b      	ldr	r3, [r7, #4]
    4478:	68db      	ldr	r3, [r3, #12]
    447a:	2100      	movs	r1, #0
    447c:	6878      	ldr	r0, [r7, #4]
    447e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    4480:	683b      	ldr	r3, [r7, #0]
    4482:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    4486:	2b00      	cmp	r3, #0
    4488:	d00f      	beq.n	44aa <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    448a:	687b      	ldr	r3, [r7, #4]
    448c:	68dc      	ldr	r4, [r3, #12]
    448e:	687b      	ldr	r3, [r7, #4]
    4490:	681b      	ldr	r3, [r3, #0]
    4492:	4618      	mov	r0, r3
    4494:	4b11      	ldr	r3, [pc, #68]	; (44dc <CAN1_Handler+0xc0>)
    4496:	4798      	blx	r3
    4498:	4603      	mov	r3, r0
    449a:	2b00      	cmp	r3, #0
    449c:	d001      	beq.n	44a2 <CAN1_Handler+0x86>
    449e:	2302      	movs	r3, #2
    44a0:	e000      	b.n	44a4 <CAN1_Handler+0x88>
    44a2:	2301      	movs	r3, #1
    44a4:	4619      	mov	r1, r3
    44a6:	6878      	ldr	r0, [r7, #4]
    44a8:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    44aa:	683b      	ldr	r3, [r7, #0]
    44ac:	f003 0308 	and.w	r3, r3, #8
    44b0:	2b00      	cmp	r3, #0
    44b2:	d004      	beq.n	44be <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    44b4:	687b      	ldr	r3, [r7, #4]
    44b6:	68db      	ldr	r3, [r3, #12]
    44b8:	2104      	movs	r1, #4
    44ba:	6878      	ldr	r0, [r7, #4]
    44bc:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    44be:	687b      	ldr	r3, [r7, #4]
    44c0:	681b      	ldr	r3, [r3, #0]
    44c2:	6839      	ldr	r1, [r7, #0]
    44c4:	4618      	mov	r0, r3
    44c6:	4b06      	ldr	r3, [pc, #24]	; (44e0 <CAN1_Handler+0xc4>)
    44c8:	4798      	blx	r3
}
    44ca:	bf00      	nop
    44cc:	370c      	adds	r7, #12
    44ce:	46bd      	mov	sp, r7
    44d0:	bd90      	pop	{r4, r7, pc}
    44d2:	bf00      	nop
    44d4:	20000bfc 	.word	0x20000bfc
    44d8:	000040ed 	.word	0x000040ed
    44dc:	00003f85 	.word	0x00003f85
    44e0:	000040d1 	.word	0x000040d1

000044e4 <__NVIC_SetPendingIRQ>:
{
    44e4:	b480      	push	{r7}
    44e6:	b083      	sub	sp, #12
    44e8:	af00      	add	r7, sp, #0
    44ea:	4603      	mov	r3, r0
    44ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    44ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    44f2:	2b00      	cmp	r3, #0
    44f4:	db0c      	blt.n	4510 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    44f6:	4909      	ldr	r1, [pc, #36]	; (451c <__NVIC_SetPendingIRQ+0x38>)
    44f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    44fc:	095b      	lsrs	r3, r3, #5
    44fe:	88fa      	ldrh	r2, [r7, #6]
    4500:	f002 021f 	and.w	r2, r2, #31
    4504:	2001      	movs	r0, #1
    4506:	fa00 f202 	lsl.w	r2, r0, r2
    450a:	3340      	adds	r3, #64	; 0x40
    450c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4510:	bf00      	nop
    4512:	370c      	adds	r7, #12
    4514:	46bd      	mov	sp, r7
    4516:	f85d 7b04 	ldr.w	r7, [sp], #4
    451a:	4770      	bx	lr
    451c:	e000e100 	.word	0xe000e100

00004520 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    4520:	b580      	push	{r7, lr}
    4522:	b082      	sub	sp, #8
    4524:	af00      	add	r7, sp, #0
    4526:	4603      	mov	r3, r0
    4528:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    452a:	79fb      	ldrb	r3, [r7, #7]
    452c:	b21b      	sxth	r3, r3
    452e:	4618      	mov	r0, r3
    4530:	4b02      	ldr	r3, [pc, #8]	; (453c <_irq_set+0x1c>)
    4532:	4798      	blx	r3
}
    4534:	bf00      	nop
    4536:	3708      	adds	r7, #8
    4538:	46bd      	mov	sp, r7
    453a:	bd80      	pop	{r7, pc}
    453c:	000044e5 	.word	0x000044e5

00004540 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    4540:	b480      	push	{r7}
    4542:	b083      	sub	sp, #12
    4544:	af00      	add	r7, sp, #0
    4546:	4603      	mov	r3, r0
    4548:	6039      	str	r1, [r7, #0]
    454a:	80fb      	strh	r3, [r7, #6]
    454c:	4613      	mov	r3, r2
    454e:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4550:	797b      	ldrb	r3, [r7, #5]
    4552:	3b04      	subs	r3, #4
    4554:	2b05      	cmp	r3, #5
    4556:	d86b      	bhi.n	4630 <_get_cycles_for_us_internal+0xf0>
    4558:	a201      	add	r2, pc, #4	; (adr r2, 4560 <_get_cycles_for_us_internal+0x20>)
    455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    455e:	bf00      	nop
    4560:	0000460f 	.word	0x0000460f
    4564:	000045ef 	.word	0x000045ef
    4568:	000045d1 	.word	0x000045d1
    456c:	000045b3 	.word	0x000045b3
    4570:	00004595 	.word	0x00004595
    4574:	00004579 	.word	0x00004579
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    4578:	88fb      	ldrh	r3, [r7, #6]
    457a:	683a      	ldr	r2, [r7, #0]
    457c:	4935      	ldr	r1, [pc, #212]	; (4654 <_get_cycles_for_us_internal+0x114>)
    457e:	fba1 1202 	umull	r1, r2, r1, r2
    4582:	0c92      	lsrs	r2, r2, #18
    4584:	fb02 f303 	mul.w	r3, r2, r3
    4588:	3302      	adds	r3, #2
    458a:	4a33      	ldr	r2, [pc, #204]	; (4658 <_get_cycles_for_us_internal+0x118>)
    458c:	fba2 2303 	umull	r2, r3, r2, r3
    4590:	085b      	lsrs	r3, r3, #1
    4592:	e059      	b.n	4648 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    4594:	88fb      	ldrh	r3, [r7, #6]
    4596:	683a      	ldr	r2, [r7, #0]
    4598:	0952      	lsrs	r2, r2, #5
    459a:	4930      	ldr	r1, [pc, #192]	; (465c <_get_cycles_for_us_internal+0x11c>)
    459c:	fba1 1202 	umull	r1, r2, r1, r2
    45a0:	09d2      	lsrs	r2, r2, #7
    45a2:	fb02 f303 	mul.w	r3, r2, r3
    45a6:	331d      	adds	r3, #29
    45a8:	4a2d      	ldr	r2, [pc, #180]	; (4660 <_get_cycles_for_us_internal+0x120>)
    45aa:	fba2 2303 	umull	r2, r3, r2, r3
    45ae:	091b      	lsrs	r3, r3, #4
    45b0:	e04a      	b.n	4648 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    45b2:	88fb      	ldrh	r3, [r7, #6]
    45b4:	683a      	ldr	r2, [r7, #0]
    45b6:	492b      	ldr	r1, [pc, #172]	; (4664 <_get_cycles_for_us_internal+0x124>)
    45b8:	fba1 1202 	umull	r1, r2, r1, r2
    45bc:	0b52      	lsrs	r2, r2, #13
    45be:	fb02 f303 	mul.w	r3, r2, r3
    45c2:	f203 132b 	addw	r3, r3, #299	; 0x12b
    45c6:	4a28      	ldr	r2, [pc, #160]	; (4668 <_get_cycles_for_us_internal+0x128>)
    45c8:	fba2 2303 	umull	r2, r3, r2, r3
    45cc:	095b      	lsrs	r3, r3, #5
    45ce:	e03b      	b.n	4648 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    45d0:	88fb      	ldrh	r3, [r7, #6]
    45d2:	683a      	ldr	r2, [r7, #0]
    45d4:	4925      	ldr	r1, [pc, #148]	; (466c <_get_cycles_for_us_internal+0x12c>)
    45d6:	fba1 1202 	umull	r1, r2, r1, r2
    45da:	0992      	lsrs	r2, r2, #6
    45dc:	fb02 f303 	mul.w	r3, r2, r3
    45e0:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    45e4:	4a22      	ldr	r2, [pc, #136]	; (4670 <_get_cycles_for_us_internal+0x130>)
    45e6:	fba2 2303 	umull	r2, r3, r2, r3
    45ea:	099b      	lsrs	r3, r3, #6
    45ec:	e02c      	b.n	4648 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    45ee:	88fb      	ldrh	r3, [r7, #6]
    45f0:	683a      	ldr	r2, [r7, #0]
    45f2:	4920      	ldr	r1, [pc, #128]	; (4674 <_get_cycles_for_us_internal+0x134>)
    45f4:	fba1 1202 	umull	r1, r2, r1, r2
    45f8:	0952      	lsrs	r2, r2, #5
    45fa:	fb02 f303 	mul.w	r3, r2, r3
    45fe:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    4602:	332f      	adds	r3, #47	; 0x2f
    4604:	4a1c      	ldr	r2, [pc, #112]	; (4678 <_get_cycles_for_us_internal+0x138>)
    4606:	fba2 2303 	umull	r2, r3, r2, r3
    460a:	0b5b      	lsrs	r3, r3, #13
    460c:	e01c      	b.n	4648 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    460e:	88fb      	ldrh	r3, [r7, #6]
    4610:	683a      	ldr	r2, [r7, #0]
    4612:	491a      	ldr	r1, [pc, #104]	; (467c <_get_cycles_for_us_internal+0x13c>)
    4614:	fba1 1202 	umull	r1, r2, r1, r2
    4618:	08d2      	lsrs	r2, r2, #3
    461a:	fb02 f303 	mul.w	r3, r2, r3
    461e:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    4622:	f203 33df 	addw	r3, r3, #991	; 0x3df
    4626:	4a16      	ldr	r2, [pc, #88]	; (4680 <_get_cycles_for_us_internal+0x140>)
    4628:	fba2 2303 	umull	r2, r3, r2, r3
    462c:	0c5b      	lsrs	r3, r3, #17
    462e:	e00b      	b.n	4648 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    4630:	88fb      	ldrh	r3, [r7, #6]
    4632:	683a      	ldr	r2, [r7, #0]
    4634:	fb02 f303 	mul.w	r3, r2, r3
    4638:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    463c:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    4640:	4a10      	ldr	r2, [pc, #64]	; (4684 <_get_cycles_for_us_internal+0x144>)
    4642:	fba2 2303 	umull	r2, r3, r2, r3
    4646:	0c9b      	lsrs	r3, r3, #18
	}
}
    4648:	4618      	mov	r0, r3
    464a:	370c      	adds	r7, #12
    464c:	46bd      	mov	sp, r7
    464e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4652:	4770      	bx	lr
    4654:	431bde83 	.word	0x431bde83
    4658:	aaaaaaab 	.word	0xaaaaaaab
    465c:	0a7c5ac5 	.word	0x0a7c5ac5
    4660:	88888889 	.word	0x88888889
    4664:	d1b71759 	.word	0xd1b71759
    4668:	1b4e81b5 	.word	0x1b4e81b5
    466c:	10624dd3 	.word	0x10624dd3
    4670:	057619f1 	.word	0x057619f1
    4674:	51eb851f 	.word	0x51eb851f
    4678:	45e7b273 	.word	0x45e7b273
    467c:	cccccccd 	.word	0xcccccccd
    4680:	6fd91d85 	.word	0x6fd91d85
    4684:	165e9f81 	.word	0x165e9f81

00004688 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    4688:	b580      	push	{r7, lr}
    468a:	b082      	sub	sp, #8
    468c:	af00      	add	r7, sp, #0
    468e:	4603      	mov	r3, r0
    4690:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4692:	88fb      	ldrh	r3, [r7, #6]
    4694:	2209      	movs	r2, #9
    4696:	4904      	ldr	r1, [pc, #16]	; (46a8 <_get_cycles_for_us+0x20>)
    4698:	4618      	mov	r0, r3
    469a:	4b04      	ldr	r3, [pc, #16]	; (46ac <_get_cycles_for_us+0x24>)
    469c:	4798      	blx	r3
    469e:	4603      	mov	r3, r0
}
    46a0:	4618      	mov	r0, r3
    46a2:	3708      	adds	r7, #8
    46a4:	46bd      	mov	sp, r7
    46a6:	bd80      	pop	{r7, pc}
    46a8:	07270e00 	.word	0x07270e00
    46ac:	00004541 	.word	0x00004541

000046b0 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    46b0:	b480      	push	{r7}
    46b2:	b083      	sub	sp, #12
    46b4:	af00      	add	r7, sp, #0
    46b6:	4603      	mov	r3, r0
    46b8:	6039      	str	r1, [r7, #0]
    46ba:	80fb      	strh	r3, [r7, #6]
    46bc:	4613      	mov	r3, r2
    46be:	717b      	strb	r3, [r7, #5]
	switch (power) {
    46c0:	797b      	ldrb	r3, [r7, #5]
    46c2:	3b04      	subs	r3, #4
    46c4:	2b05      	cmp	r3, #5
    46c6:	d870      	bhi.n	47aa <_get_cycles_for_ms_internal+0xfa>
    46c8:	a201      	add	r2, pc, #4	; (adr r2, 46d0 <_get_cycles_for_ms_internal+0x20>)
    46ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    46ce:	bf00      	nop
    46d0:	0000478d 	.word	0x0000478d
    46d4:	00004771 	.word	0x00004771
    46d8:	00004755 	.word	0x00004755
    46dc:	00004731 	.word	0x00004731
    46e0:	0000470d 	.word	0x0000470d
    46e4:	000046e9 	.word	0x000046e9
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    46e8:	88fb      	ldrh	r3, [r7, #6]
    46ea:	683a      	ldr	r2, [r7, #0]
    46ec:	4937      	ldr	r1, [pc, #220]	; (47cc <_get_cycles_for_ms_internal+0x11c>)
    46ee:	fba1 1202 	umull	r1, r2, r1, r2
    46f2:	0c92      	lsrs	r2, r2, #18
    46f4:	fb02 f303 	mul.w	r3, r2, r3
    46f8:	3302      	adds	r3, #2
    46fa:	4a35      	ldr	r2, [pc, #212]	; (47d0 <_get_cycles_for_ms_internal+0x120>)
    46fc:	fba2 2303 	umull	r2, r3, r2, r3
    4700:	085b      	lsrs	r3, r3, #1
    4702:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4706:	fb02 f303 	mul.w	r3, r2, r3
    470a:	e058      	b.n	47be <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    470c:	88fb      	ldrh	r3, [r7, #6]
    470e:	683a      	ldr	r2, [r7, #0]
    4710:	0952      	lsrs	r2, r2, #5
    4712:	4930      	ldr	r1, [pc, #192]	; (47d4 <_get_cycles_for_ms_internal+0x124>)
    4714:	fba1 1202 	umull	r1, r2, r1, r2
    4718:	09d2      	lsrs	r2, r2, #7
    471a:	fb02 f303 	mul.w	r3, r2, r3
    471e:	3302      	adds	r3, #2
    4720:	4a2b      	ldr	r2, [pc, #172]	; (47d0 <_get_cycles_for_ms_internal+0x120>)
    4722:	fba2 2303 	umull	r2, r3, r2, r3
    4726:	085b      	lsrs	r3, r3, #1
    4728:	2264      	movs	r2, #100	; 0x64
    472a:	fb02 f303 	mul.w	r3, r2, r3
    472e:	e046      	b.n	47be <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    4730:	88fb      	ldrh	r3, [r7, #6]
    4732:	683a      	ldr	r2, [r7, #0]
    4734:	4928      	ldr	r1, [pc, #160]	; (47d8 <_get_cycles_for_ms_internal+0x128>)
    4736:	fba1 1202 	umull	r1, r2, r1, r2
    473a:	0b52      	lsrs	r2, r2, #13
    473c:	fb02 f303 	mul.w	r3, r2, r3
    4740:	3302      	adds	r3, #2
    4742:	4a23      	ldr	r2, [pc, #140]	; (47d0 <_get_cycles_for_ms_internal+0x120>)
    4744:	fba2 2303 	umull	r2, r3, r2, r3
    4748:	085a      	lsrs	r2, r3, #1
    474a:	4613      	mov	r3, r2
    474c:	009b      	lsls	r3, r3, #2
    474e:	4413      	add	r3, r2
    4750:	005b      	lsls	r3, r3, #1
    4752:	e034      	b.n	47be <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    4754:	88fb      	ldrh	r3, [r7, #6]
    4756:	683a      	ldr	r2, [r7, #0]
    4758:	4920      	ldr	r1, [pc, #128]	; (47dc <_get_cycles_for_ms_internal+0x12c>)
    475a:	fba1 1202 	umull	r1, r2, r1, r2
    475e:	0992      	lsrs	r2, r2, #6
    4760:	fb02 f303 	mul.w	r3, r2, r3
    4764:	3302      	adds	r3, #2
    4766:	4a1a      	ldr	r2, [pc, #104]	; (47d0 <_get_cycles_for_ms_internal+0x120>)
    4768:	fba2 2303 	umull	r2, r3, r2, r3
    476c:	085b      	lsrs	r3, r3, #1
    476e:	e026      	b.n	47be <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    4770:	88fb      	ldrh	r3, [r7, #6]
    4772:	683a      	ldr	r2, [r7, #0]
    4774:	491a      	ldr	r1, [pc, #104]	; (47e0 <_get_cycles_for_ms_internal+0x130>)
    4776:	fba1 1202 	umull	r1, r2, r1, r2
    477a:	0952      	lsrs	r2, r2, #5
    477c:	fb02 f303 	mul.w	r3, r2, r3
    4780:	331d      	adds	r3, #29
    4782:	4a18      	ldr	r2, [pc, #96]	; (47e4 <_get_cycles_for_ms_internal+0x134>)
    4784:	fba2 2303 	umull	r2, r3, r2, r3
    4788:	091b      	lsrs	r3, r3, #4
    478a:	e018      	b.n	47be <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    478c:	88fb      	ldrh	r3, [r7, #6]
    478e:	683a      	ldr	r2, [r7, #0]
    4790:	4915      	ldr	r1, [pc, #84]	; (47e8 <_get_cycles_for_ms_internal+0x138>)
    4792:	fba1 1202 	umull	r1, r2, r1, r2
    4796:	08d2      	lsrs	r2, r2, #3
    4798:	fb02 f303 	mul.w	r3, r2, r3
    479c:	f203 132b 	addw	r3, r3, #299	; 0x12b
    47a0:	4a12      	ldr	r2, [pc, #72]	; (47ec <_get_cycles_for_ms_internal+0x13c>)
    47a2:	fba2 2303 	umull	r2, r3, r2, r3
    47a6:	095b      	lsrs	r3, r3, #5
    47a8:	e009      	b.n	47be <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    47aa:	88fb      	ldrh	r3, [r7, #6]
    47ac:	683a      	ldr	r2, [r7, #0]
    47ae:	fb02 f303 	mul.w	r3, r2, r3
    47b2:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    47b6:	4a0e      	ldr	r2, [pc, #56]	; (47f0 <_get_cycles_for_ms_internal+0x140>)
    47b8:	fba2 2303 	umull	r2, r3, r2, r3
    47bc:	099b      	lsrs	r3, r3, #6
	}
}
    47be:	4618      	mov	r0, r3
    47c0:	370c      	adds	r7, #12
    47c2:	46bd      	mov	sp, r7
    47c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47c8:	4770      	bx	lr
    47ca:	bf00      	nop
    47cc:	431bde83 	.word	0x431bde83
    47d0:	aaaaaaab 	.word	0xaaaaaaab
    47d4:	0a7c5ac5 	.word	0x0a7c5ac5
    47d8:	d1b71759 	.word	0xd1b71759
    47dc:	10624dd3 	.word	0x10624dd3
    47e0:	51eb851f 	.word	0x51eb851f
    47e4:	88888889 	.word	0x88888889
    47e8:	cccccccd 	.word	0xcccccccd
    47ec:	1b4e81b5 	.word	0x1b4e81b5
    47f0:	057619f1 	.word	0x057619f1

000047f4 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    47f4:	b580      	push	{r7, lr}
    47f6:	b082      	sub	sp, #8
    47f8:	af00      	add	r7, sp, #0
    47fa:	4603      	mov	r3, r0
    47fc:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    47fe:	88fb      	ldrh	r3, [r7, #6]
    4800:	2209      	movs	r2, #9
    4802:	4904      	ldr	r1, [pc, #16]	; (4814 <_get_cycles_for_ms+0x20>)
    4804:	4618      	mov	r0, r3
    4806:	4b04      	ldr	r3, [pc, #16]	; (4818 <_get_cycles_for_ms+0x24>)
    4808:	4798      	blx	r3
    480a:	4603      	mov	r3, r0
}
    480c:	4618      	mov	r0, r3
    480e:	3708      	adds	r7, #8
    4810:	46bd      	mov	sp, r7
    4812:	bd80      	pop	{r7, pc}
    4814:	07270e00 	.word	0x07270e00
    4818:	000046b1 	.word	0x000046b1
    481c:	00000000 	.word	0x00000000

00004820 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4820:	b480      	push	{r7}
    4822:	b083      	sub	sp, #12
    4824:	af00      	add	r7, sp, #0
    4826:	6078      	str	r0, [r7, #4]
    4828:	6039      	str	r1, [r7, #0]
    482a:	bf00      	nop
    482c:	f3af 8000 	nop.w

00004830 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4830:	3901      	subs	r1, #1
    4832:	d8fd      	bhi.n	4830 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    4834:	bf00      	nop
    4836:	370c      	adds	r7, #12
    4838:	46bd      	mov	sp, r7
    483a:	f85d 7b04 	ldr.w	r7, [sp], #4
    483e:	4770      	bx	lr

00004840 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4840:	b480      	push	{r7}
    4842:	b083      	sub	sp, #12
    4844:	af00      	add	r7, sp, #0
    4846:	6078      	str	r0, [r7, #4]
    4848:	460b      	mov	r3, r1
    484a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    484c:	687b      	ldr	r3, [r7, #4]
    484e:	881b      	ldrh	r3, [r3, #0]
    4850:	b29a      	uxth	r2, r3
    4852:	887b      	ldrh	r3, [r7, #2]
    4854:	021b      	lsls	r3, r3, #8
    4856:	b29b      	uxth	r3, r3
    4858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    485c:	b29b      	uxth	r3, r3
    485e:	4313      	orrs	r3, r2
    4860:	b29a      	uxth	r2, r3
    4862:	687b      	ldr	r3, [r7, #4]
    4864:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    4866:	bf00      	nop
    4868:	370c      	adds	r7, #12
    486a:	46bd      	mov	sp, r7
    486c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4870:	4770      	bx	lr

00004872 <hri_port_set_EVCTRL_reg>:
{
    4872:	b480      	push	{r7}
    4874:	b085      	sub	sp, #20
    4876:	af00      	add	r7, sp, #0
    4878:	60f8      	str	r0, [r7, #12]
    487a:	460b      	mov	r3, r1
    487c:	607a      	str	r2, [r7, #4]
    487e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4880:	7afb      	ldrb	r3, [r7, #11]
    4882:	7afa      	ldrb	r2, [r7, #11]
    4884:	68f9      	ldr	r1, [r7, #12]
    4886:	01d2      	lsls	r2, r2, #7
    4888:	440a      	add	r2, r1
    488a:	322c      	adds	r2, #44	; 0x2c
    488c:	6811      	ldr	r1, [r2, #0]
    488e:	687a      	ldr	r2, [r7, #4]
    4890:	430a      	orrs	r2, r1
    4892:	68f9      	ldr	r1, [r7, #12]
    4894:	01db      	lsls	r3, r3, #7
    4896:	440b      	add	r3, r1
    4898:	332c      	adds	r3, #44	; 0x2c
    489a:	601a      	str	r2, [r3, #0]
}
    489c:	bf00      	nop
    489e:	3714      	adds	r7, #20
    48a0:	46bd      	mov	sp, r7
    48a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    48a6:	4770      	bx	lr

000048a8 <_port_event_init>:

static inline void _port_event_init()
{
    48a8:	b580      	push	{r7, lr}
    48aa:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    48ac:	2200      	movs	r2, #0
    48ae:	2100      	movs	r1, #0
    48b0:	480a      	ldr	r0, [pc, #40]	; (48dc <_port_event_init+0x34>)
    48b2:	4b0b      	ldr	r3, [pc, #44]	; (48e0 <_port_event_init+0x38>)
    48b4:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    48b6:	2200      	movs	r2, #0
    48b8:	2101      	movs	r1, #1
    48ba:	4808      	ldr	r0, [pc, #32]	; (48dc <_port_event_init+0x34>)
    48bc:	4b08      	ldr	r3, [pc, #32]	; (48e0 <_port_event_init+0x38>)
    48be:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    48c0:	f64e 72ef 	movw	r2, #61423	; 0xefef
    48c4:	2102      	movs	r1, #2
    48c6:	4805      	ldr	r0, [pc, #20]	; (48dc <_port_event_init+0x34>)
    48c8:	4b05      	ldr	r3, [pc, #20]	; (48e0 <_port_event_init+0x38>)
    48ca:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    48cc:	2200      	movs	r2, #0
    48ce:	2103      	movs	r1, #3
    48d0:	4802      	ldr	r0, [pc, #8]	; (48dc <_port_event_init+0x34>)
    48d2:	4b03      	ldr	r3, [pc, #12]	; (48e0 <_port_event_init+0x38>)
    48d4:	4798      	blx	r3
}
    48d6:	bf00      	nop
    48d8:	bd80      	pop	{r7, pc}
    48da:	bf00      	nop
    48dc:	41008000 	.word	0x41008000
    48e0:	00004873 	.word	0x00004873

000048e4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    48e4:	b580      	push	{r7, lr}
    48e6:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    48e8:	2104      	movs	r1, #4
    48ea:	480b      	ldr	r0, [pc, #44]	; (4918 <_init_chip+0x34>)
    48ec:	4b0b      	ldr	r3, [pc, #44]	; (491c <_init_chip+0x38>)
    48ee:	4798      	blx	r3

	_osc32kctrl_init_sources();
    48f0:	4b0b      	ldr	r3, [pc, #44]	; (4920 <_init_chip+0x3c>)
    48f2:	4798      	blx	r3
	_oscctrl_init_sources();
    48f4:	4b0b      	ldr	r3, [pc, #44]	; (4924 <_init_chip+0x40>)
    48f6:	4798      	blx	r3
	_mclk_init();
    48f8:	4b0b      	ldr	r3, [pc, #44]	; (4928 <_init_chip+0x44>)
    48fa:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    48fc:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4900:	4b0a      	ldr	r3, [pc, #40]	; (492c <_init_chip+0x48>)
    4902:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    4904:	4b0a      	ldr	r3, [pc, #40]	; (4930 <_init_chip+0x4c>)
    4906:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4908:	f640 30df 	movw	r0, #3039	; 0xbdf
    490c:	4b07      	ldr	r3, [pc, #28]	; (492c <_init_chip+0x48>)
    490e:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4910:	4b08      	ldr	r3, [pc, #32]	; (4934 <_init_chip+0x50>)
    4912:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    4914:	bf00      	nop
    4916:	bd80      	pop	{r7, pc}
    4918:	41004000 	.word	0x41004000
    491c:	00004841 	.word	0x00004841
    4920:	000053f5 	.word	0x000053f5
    4924:	000058bd 	.word	0x000058bd
    4928:	00005315 	.word	0x00005315
    492c:	000051d5 	.word	0x000051d5
    4930:	000058fd 	.word	0x000058fd
    4934:	000048a9 	.word	0x000048a9

00004938 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4938:	b480      	push	{r7}
    493a:	b083      	sub	sp, #12
    493c:	af00      	add	r7, sp, #0
    493e:	6078      	str	r0, [r7, #4]
    4940:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    4942:	687b      	ldr	r3, [r7, #4]
    4944:	683a      	ldr	r2, [r7, #0]
    4946:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4948:	2300      	movs	r3, #0
}
    494a:	4618      	mov	r0, r3
    494c:	370c      	adds	r7, #12
    494e:	46bd      	mov	sp, r7
    4950:	f85d 7b04 	ldr.w	r7, [sp], #4
    4954:	4770      	bx	lr
	...

00004958 <__NVIC_EnableIRQ>:
{
    4958:	b480      	push	{r7}
    495a:	b083      	sub	sp, #12
    495c:	af00      	add	r7, sp, #0
    495e:	4603      	mov	r3, r0
    4960:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4966:	2b00      	cmp	r3, #0
    4968:	db0b      	blt.n	4982 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    496a:	4909      	ldr	r1, [pc, #36]	; (4990 <__NVIC_EnableIRQ+0x38>)
    496c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4970:	095b      	lsrs	r3, r3, #5
    4972:	88fa      	ldrh	r2, [r7, #6]
    4974:	f002 021f 	and.w	r2, r2, #31
    4978:	2001      	movs	r0, #1
    497a:	fa00 f202 	lsl.w	r2, r0, r2
    497e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4982:	bf00      	nop
    4984:	370c      	adds	r7, #12
    4986:	46bd      	mov	sp, r7
    4988:	f85d 7b04 	ldr.w	r7, [sp], #4
    498c:	4770      	bx	lr
    498e:	bf00      	nop
    4990:	e000e100 	.word	0xe000e100

00004994 <__NVIC_DisableIRQ>:
{
    4994:	b480      	push	{r7}
    4996:	b083      	sub	sp, #12
    4998:	af00      	add	r7, sp, #0
    499a:	4603      	mov	r3, r0
    499c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    499e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    49a2:	2b00      	cmp	r3, #0
    49a4:	db10      	blt.n	49c8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    49a6:	490b      	ldr	r1, [pc, #44]	; (49d4 <__NVIC_DisableIRQ+0x40>)
    49a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    49ac:	095b      	lsrs	r3, r3, #5
    49ae:	88fa      	ldrh	r2, [r7, #6]
    49b0:	f002 021f 	and.w	r2, r2, #31
    49b4:	2001      	movs	r0, #1
    49b6:	fa00 f202 	lsl.w	r2, r0, r2
    49ba:	3320      	adds	r3, #32
    49bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    49c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    49c4:	f3bf 8f6f 	isb	sy
}
    49c8:	bf00      	nop
    49ca:	370c      	adds	r7, #12
    49cc:	46bd      	mov	sp, r7
    49ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    49d2:	4770      	bx	lr
    49d4:	e000e100 	.word	0xe000e100

000049d8 <__NVIC_ClearPendingIRQ>:
{
    49d8:	b480      	push	{r7}
    49da:	b083      	sub	sp, #12
    49dc:	af00      	add	r7, sp, #0
    49de:	4603      	mov	r3, r0
    49e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    49e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    49e6:	2b00      	cmp	r3, #0
    49e8:	db0c      	blt.n	4a04 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    49ea:	4909      	ldr	r1, [pc, #36]	; (4a10 <__NVIC_ClearPendingIRQ+0x38>)
    49ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    49f0:	095b      	lsrs	r3, r3, #5
    49f2:	88fa      	ldrh	r2, [r7, #6]
    49f4:	f002 021f 	and.w	r2, r2, #31
    49f8:	2001      	movs	r0, #1
    49fa:	fa00 f202 	lsl.w	r2, r0, r2
    49fe:	3360      	adds	r3, #96	; 0x60
    4a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4a04:	bf00      	nop
    4a06:	370c      	adds	r7, #12
    4a08:	46bd      	mov	sp, r7
    4a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a0e:	4770      	bx	lr
    4a10:	e000e100 	.word	0xe000e100

00004a14 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4a14:	b480      	push	{r7}
    4a16:	b083      	sub	sp, #12
    4a18:	af00      	add	r7, sp, #0
    4a1a:	6078      	str	r0, [r7, #4]
    4a1c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    4a1e:	bf00      	nop
    4a20:	687b      	ldr	r3, [r7, #4]
    4a22:	685a      	ldr	r2, [r3, #4]
    4a24:	683b      	ldr	r3, [r7, #0]
    4a26:	4013      	ands	r3, r2
    4a28:	2b00      	cmp	r3, #0
    4a2a:	d1f9      	bne.n	4a20 <hri_eic_wait_for_sync+0xc>
	};
}
    4a2c:	bf00      	nop
    4a2e:	370c      	adds	r7, #12
    4a30:	46bd      	mov	sp, r7
    4a32:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a36:	4770      	bx	lr

00004a38 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4a38:	b480      	push	{r7}
    4a3a:	b083      	sub	sp, #12
    4a3c:	af00      	add	r7, sp, #0
    4a3e:	6078      	str	r0, [r7, #4]
    4a40:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4a42:	687b      	ldr	r3, [r7, #4]
    4a44:	685a      	ldr	r2, [r3, #4]
    4a46:	683b      	ldr	r3, [r7, #0]
    4a48:	4013      	ands	r3, r2
    4a4a:	2b00      	cmp	r3, #0
    4a4c:	bf14      	ite	ne
    4a4e:	2301      	movne	r3, #1
    4a50:	2300      	moveq	r3, #0
    4a52:	b2db      	uxtb	r3, r3
}
    4a54:	4618      	mov	r0, r3
    4a56:	370c      	adds	r7, #12
    4a58:	46bd      	mov	sp, r7
    4a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a5e:	4770      	bx	lr

00004a60 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4a60:	b480      	push	{r7}
    4a62:	b083      	sub	sp, #12
    4a64:	af00      	add	r7, sp, #0
    4a66:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4a68:	687b      	ldr	r3, [r7, #4]
    4a6a:	695b      	ldr	r3, [r3, #20]
}
    4a6c:	4618      	mov	r0, r3
    4a6e:	370c      	adds	r7, #12
    4a70:	46bd      	mov	sp, r7
    4a72:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a76:	4770      	bx	lr

00004a78 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4a78:	b480      	push	{r7}
    4a7a:	b083      	sub	sp, #12
    4a7c:	af00      	add	r7, sp, #0
    4a7e:	6078      	str	r0, [r7, #4]
    4a80:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    4a82:	687b      	ldr	r3, [r7, #4]
    4a84:	683a      	ldr	r2, [r7, #0]
    4a86:	615a      	str	r2, [r3, #20]
}
    4a88:	bf00      	nop
    4a8a:	370c      	adds	r7, #12
    4a8c:	46bd      	mov	sp, r7
    4a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a92:	4770      	bx	lr

00004a94 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4a94:	b480      	push	{r7}
    4a96:	b083      	sub	sp, #12
    4a98:	af00      	add	r7, sp, #0
    4a9a:	6078      	str	r0, [r7, #4]
    4a9c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    4a9e:	687b      	ldr	r3, [r7, #4]
    4aa0:	683a      	ldr	r2, [r7, #0]
    4aa2:	611a      	str	r2, [r3, #16]
}
    4aa4:	bf00      	nop
    4aa6:	370c      	adds	r7, #12
    4aa8:	46bd      	mov	sp, r7
    4aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    4aae:	4770      	bx	lr

00004ab0 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4ab0:	b480      	push	{r7}
    4ab2:	b083      	sub	sp, #12
    4ab4:	af00      	add	r7, sp, #0
    4ab6:	6078      	str	r0, [r7, #4]
    4ab8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    4aba:	687b      	ldr	r3, [r7, #4]
    4abc:	683a      	ldr	r2, [r7, #0]
    4abe:	60da      	str	r2, [r3, #12]
}
    4ac0:	bf00      	nop
    4ac2:	370c      	adds	r7, #12
    4ac4:	46bd      	mov	sp, r7
    4ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4aca:	4770      	bx	lr

00004acc <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4acc:	b580      	push	{r7, lr}
    4ace:	b082      	sub	sp, #8
    4ad0:	af00      	add	r7, sp, #0
    4ad2:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4ad4:	687b      	ldr	r3, [r7, #4]
    4ad6:	781b      	ldrb	r3, [r3, #0]
    4ad8:	b2db      	uxtb	r3, r3
    4ada:	f043 0302 	orr.w	r3, r3, #2
    4ade:	b2da      	uxtb	r2, r3
    4ae0:	687b      	ldr	r3, [r7, #4]
    4ae2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4ae4:	2103      	movs	r1, #3
    4ae6:	6878      	ldr	r0, [r7, #4]
    4ae8:	4b02      	ldr	r3, [pc, #8]	; (4af4 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    4aea:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4aec:	bf00      	nop
    4aee:	3708      	adds	r7, #8
    4af0:	46bd      	mov	sp, r7
    4af2:	bd80      	pop	{r7, pc}
    4af4:	00004a15 	.word	0x00004a15

00004af8 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4af8:	b580      	push	{r7, lr}
    4afa:	b082      	sub	sp, #8
    4afc:	af00      	add	r7, sp, #0
    4afe:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4b00:	687b      	ldr	r3, [r7, #4]
    4b02:	781b      	ldrb	r3, [r3, #0]
    4b04:	b2db      	uxtb	r3, r3
    4b06:	f023 0302 	bic.w	r3, r3, #2
    4b0a:	b2da      	uxtb	r2, r3
    4b0c:	687b      	ldr	r3, [r7, #4]
    4b0e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4b10:	2103      	movs	r1, #3
    4b12:	6878      	ldr	r0, [r7, #4]
    4b14:	4b02      	ldr	r3, [pc, #8]	; (4b20 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4b16:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4b18:	bf00      	nop
    4b1a:	3708      	adds	r7, #8
    4b1c:	46bd      	mov	sp, r7
    4b1e:	bd80      	pop	{r7, pc}
    4b20:	00004a15 	.word	0x00004a15

00004b24 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4b24:	b580      	push	{r7, lr}
    4b26:	b084      	sub	sp, #16
    4b28:	af00      	add	r7, sp, #0
    4b2a:	6078      	str	r0, [r7, #4]
    4b2c:	460b      	mov	r3, r1
    4b2e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4b30:	687b      	ldr	r3, [r7, #4]
    4b32:	781b      	ldrb	r3, [r3, #0]
    4b34:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4b36:	7bfb      	ldrb	r3, [r7, #15]
    4b38:	f023 0310 	bic.w	r3, r3, #16
    4b3c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    4b3e:	78fb      	ldrb	r3, [r7, #3]
    4b40:	011b      	lsls	r3, r3, #4
    4b42:	b25a      	sxtb	r2, r3
    4b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4b48:	4313      	orrs	r3, r2
    4b4a:	b25b      	sxtb	r3, r3
    4b4c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    4b4e:	687b      	ldr	r3, [r7, #4]
    4b50:	7bfa      	ldrb	r2, [r7, #15]
    4b52:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4b54:	2103      	movs	r1, #3
    4b56:	6878      	ldr	r0, [r7, #4]
    4b58:	4b02      	ldr	r3, [pc, #8]	; (4b64 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4b5a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4b5c:	bf00      	nop
    4b5e:	3710      	adds	r7, #16
    4b60:	46bd      	mov	sp, r7
    4b62:	bd80      	pop	{r7, pc}
    4b64:	00004a15 	.word	0x00004a15

00004b68 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4b68:	b580      	push	{r7, lr}
    4b6a:	b084      	sub	sp, #16
    4b6c:	af00      	add	r7, sp, #0
    4b6e:	6078      	str	r0, [r7, #4]
    4b70:	460b      	mov	r3, r1
    4b72:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4b74:	2103      	movs	r1, #3
    4b76:	6878      	ldr	r0, [r7, #4]
    4b78:	4b06      	ldr	r3, [pc, #24]	; (4b94 <hri_eic_get_CTRLA_reg+0x2c>)
    4b7a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4b7c:	687b      	ldr	r3, [r7, #4]
    4b7e:	781b      	ldrb	r3, [r3, #0]
    4b80:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    4b82:	7bfa      	ldrb	r2, [r7, #15]
    4b84:	78fb      	ldrb	r3, [r7, #3]
    4b86:	4013      	ands	r3, r2
    4b88:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4b8a:	7bfb      	ldrb	r3, [r7, #15]
}
    4b8c:	4618      	mov	r0, r3
    4b8e:	3710      	adds	r7, #16
    4b90:	46bd      	mov	sp, r7
    4b92:	bd80      	pop	{r7, pc}
    4b94:	00004a15 	.word	0x00004a15

00004b98 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4b98:	b580      	push	{r7, lr}
    4b9a:	b082      	sub	sp, #8
    4b9c:	af00      	add	r7, sp, #0
    4b9e:	6078      	str	r0, [r7, #4]
    4ba0:	460b      	mov	r3, r1
    4ba2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4ba4:	687b      	ldr	r3, [r7, #4]
    4ba6:	78fa      	ldrb	r2, [r7, #3]
    4ba8:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4baa:	2103      	movs	r1, #3
    4bac:	6878      	ldr	r0, [r7, #4]
    4bae:	4b03      	ldr	r3, [pc, #12]	; (4bbc <hri_eic_write_CTRLA_reg+0x24>)
    4bb0:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4bb2:	bf00      	nop
    4bb4:	3708      	adds	r7, #8
    4bb6:	46bd      	mov	sp, r7
    4bb8:	bd80      	pop	{r7, pc}
    4bba:	bf00      	nop
    4bbc:	00004a15 	.word	0x00004a15

00004bc0 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4bc0:	b480      	push	{r7}
    4bc2:	b083      	sub	sp, #12
    4bc4:	af00      	add	r7, sp, #0
    4bc6:	6078      	str	r0, [r7, #4]
    4bc8:	460b      	mov	r3, r1
    4bca:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	78fa      	ldrb	r2, [r7, #3]
    4bd0:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4bd2:	bf00      	nop
    4bd4:	370c      	adds	r7, #12
    4bd6:	46bd      	mov	sp, r7
    4bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bdc:	4770      	bx	lr

00004bde <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    4bde:	b480      	push	{r7}
    4be0:	b083      	sub	sp, #12
    4be2:	af00      	add	r7, sp, #0
    4be4:	6078      	str	r0, [r7, #4]
    4be6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4be8:	687b      	ldr	r3, [r7, #4]
    4bea:	683a      	ldr	r2, [r7, #0]
    4bec:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4bee:	bf00      	nop
    4bf0:	370c      	adds	r7, #12
    4bf2:	46bd      	mov	sp, r7
    4bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bf8:	4770      	bx	lr

00004bfa <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    4bfa:	b480      	push	{r7}
    4bfc:	b083      	sub	sp, #12
    4bfe:	af00      	add	r7, sp, #0
    4c00:	6078      	str	r0, [r7, #4]
    4c02:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4c04:	687b      	ldr	r3, [r7, #4]
    4c06:	683a      	ldr	r2, [r7, #0]
    4c08:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4c0a:	bf00      	nop
    4c0c:	370c      	adds	r7, #12
    4c0e:	46bd      	mov	sp, r7
    4c10:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c14:	4770      	bx	lr

00004c16 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4c16:	b480      	push	{r7}
    4c18:	b085      	sub	sp, #20
    4c1a:	af00      	add	r7, sp, #0
    4c1c:	60f8      	str	r0, [r7, #12]
    4c1e:	460b      	mov	r3, r1
    4c20:	607a      	str	r2, [r7, #4]
    4c22:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4c24:	7afb      	ldrb	r3, [r7, #11]
    4c26:	68fa      	ldr	r2, [r7, #12]
    4c28:	3306      	adds	r3, #6
    4c2a:	009b      	lsls	r3, r3, #2
    4c2c:	4413      	add	r3, r2
    4c2e:	687a      	ldr	r2, [r7, #4]
    4c30:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4c32:	bf00      	nop
    4c34:	3714      	adds	r7, #20
    4c36:	46bd      	mov	sp, r7
    4c38:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c3c:	4770      	bx	lr

00004c3e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    4c3e:	b480      	push	{r7}
    4c40:	b083      	sub	sp, #12
    4c42:	af00      	add	r7, sp, #0
    4c44:	6078      	str	r0, [r7, #4]
    4c46:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4c48:	687b      	ldr	r3, [r7, #4]
    4c4a:	683a      	ldr	r2, [r7, #0]
    4c4c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    4c4e:	bf00      	nop
    4c50:	370c      	adds	r7, #12
    4c52:	46bd      	mov	sp, r7
    4c54:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c58:	4770      	bx	lr

00004c5a <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4c5a:	b480      	push	{r7}
    4c5c:	b083      	sub	sp, #12
    4c5e:	af00      	add	r7, sp, #0
    4c60:	6078      	str	r0, [r7, #4]
    4c62:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4c64:	687b      	ldr	r3, [r7, #4]
    4c66:	683a      	ldr	r2, [r7, #0]
    4c68:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4c6a:	bf00      	nop
    4c6c:	370c      	adds	r7, #12
    4c6e:	46bd      	mov	sp, r7
    4c70:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c74:	4770      	bx	lr
	...

00004c78 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4c78:	b580      	push	{r7, lr}
    4c7a:	b082      	sub	sp, #8
    4c7c:	af00      	add	r7, sp, #0
    4c7e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4c80:	2101      	movs	r1, #1
    4c82:	484f      	ldr	r0, [pc, #316]	; (4dc0 <_ext_irq_init+0x148>)
    4c84:	4b4f      	ldr	r3, [pc, #316]	; (4dc4 <_ext_irq_init+0x14c>)
    4c86:	4798      	blx	r3
    4c88:	4603      	mov	r3, r0
    4c8a:	f083 0301 	eor.w	r3, r3, #1
    4c8e:	b2db      	uxtb	r3, r3
    4c90:	2b00      	cmp	r3, #0
    4c92:	d011      	beq.n	4cb8 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4c94:	2102      	movs	r1, #2
    4c96:	484a      	ldr	r0, [pc, #296]	; (4dc0 <_ext_irq_init+0x148>)
    4c98:	4b4b      	ldr	r3, [pc, #300]	; (4dc8 <_ext_irq_init+0x150>)
    4c9a:	4798      	blx	r3
    4c9c:	4603      	mov	r3, r0
    4c9e:	2b00      	cmp	r3, #0
    4ca0:	d006      	beq.n	4cb0 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    4ca2:	4847      	ldr	r0, [pc, #284]	; (4dc0 <_ext_irq_init+0x148>)
    4ca4:	4b49      	ldr	r3, [pc, #292]	; (4dcc <_ext_irq_init+0x154>)
    4ca6:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4ca8:	2102      	movs	r1, #2
    4caa:	4845      	ldr	r0, [pc, #276]	; (4dc0 <_ext_irq_init+0x148>)
    4cac:	4b48      	ldr	r3, [pc, #288]	; (4dd0 <_ext_irq_init+0x158>)
    4cae:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4cb0:	2101      	movs	r1, #1
    4cb2:	4843      	ldr	r0, [pc, #268]	; (4dc0 <_ext_irq_init+0x148>)
    4cb4:	4b47      	ldr	r3, [pc, #284]	; (4dd4 <_ext_irq_init+0x15c>)
    4cb6:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4cb8:	2101      	movs	r1, #1
    4cba:	4841      	ldr	r0, [pc, #260]	; (4dc0 <_ext_irq_init+0x148>)
    4cbc:	4b44      	ldr	r3, [pc, #272]	; (4dd0 <_ext_irq_init+0x158>)
    4cbe:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4cc0:	2100      	movs	r1, #0
    4cc2:	483f      	ldr	r0, [pc, #252]	; (4dc0 <_ext_irq_init+0x148>)
    4cc4:	4b44      	ldr	r3, [pc, #272]	; (4dd8 <_ext_irq_init+0x160>)
    4cc6:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4cc8:	2100      	movs	r1, #0
    4cca:	483d      	ldr	r0, [pc, #244]	; (4dc0 <_ext_irq_init+0x148>)
    4ccc:	4b43      	ldr	r3, [pc, #268]	; (4ddc <_ext_irq_init+0x164>)
    4cce:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4cd0:	2100      	movs	r1, #0
    4cd2:	483b      	ldr	r0, [pc, #236]	; (4dc0 <_ext_irq_init+0x148>)
    4cd4:	4b42      	ldr	r3, [pc, #264]	; (4de0 <_ext_irq_init+0x168>)
    4cd6:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4cd8:	f240 31bb 	movw	r1, #955	; 0x3bb
    4cdc:	4838      	ldr	r0, [pc, #224]	; (4dc0 <_ext_irq_init+0x148>)
    4cde:	4b41      	ldr	r3, [pc, #260]	; (4de4 <_ext_irq_init+0x16c>)
    4ce0:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4ce2:	f240 313b 	movw	r1, #827	; 0x33b
    4ce6:	4836      	ldr	r0, [pc, #216]	; (4dc0 <_ext_irq_init+0x148>)
    4ce8:	4b3f      	ldr	r3, [pc, #252]	; (4de8 <_ext_irq_init+0x170>)
    4cea:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    4cec:	2100      	movs	r1, #0
    4cee:	4834      	ldr	r0, [pc, #208]	; (4dc0 <_ext_irq_init+0x148>)
    4cf0:	4b3e      	ldr	r3, [pc, #248]	; (4dec <_ext_irq_init+0x174>)
    4cf2:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4cf4:	4a3e      	ldr	r2, [pc, #248]	; (4df0 <_ext_irq_init+0x178>)
    4cf6:	2100      	movs	r1, #0
    4cf8:	4831      	ldr	r0, [pc, #196]	; (4dc0 <_ext_irq_init+0x148>)
    4cfa:	4b3e      	ldr	r3, [pc, #248]	; (4df4 <_ext_irq_init+0x17c>)
    4cfc:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4cfe:	2211      	movs	r2, #17
    4d00:	2101      	movs	r1, #1
    4d02:	482f      	ldr	r0, [pc, #188]	; (4dc0 <_ext_irq_init+0x148>)
    4d04:	4b3b      	ldr	r3, [pc, #236]	; (4df4 <_ext_irq_init+0x17c>)
    4d06:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4d08:	482d      	ldr	r0, [pc, #180]	; (4dc0 <_ext_irq_init+0x148>)
    4d0a:	4b3b      	ldr	r3, [pc, #236]	; (4df8 <_ext_irq_init+0x180>)
    4d0c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    4d0e:	200c      	movs	r0, #12
    4d10:	4b3a      	ldr	r3, [pc, #232]	; (4dfc <_ext_irq_init+0x184>)
    4d12:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    4d14:	200c      	movs	r0, #12
    4d16:	4b3a      	ldr	r3, [pc, #232]	; (4e00 <_ext_irq_init+0x188>)
    4d18:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    4d1a:	200c      	movs	r0, #12
    4d1c:	4b39      	ldr	r3, [pc, #228]	; (4e04 <_ext_irq_init+0x18c>)
    4d1e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    4d20:	200d      	movs	r0, #13
    4d22:	4b36      	ldr	r3, [pc, #216]	; (4dfc <_ext_irq_init+0x184>)
    4d24:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    4d26:	200d      	movs	r0, #13
    4d28:	4b35      	ldr	r3, [pc, #212]	; (4e00 <_ext_irq_init+0x188>)
    4d2a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    4d2c:	200d      	movs	r0, #13
    4d2e:	4b35      	ldr	r3, [pc, #212]	; (4e04 <_ext_irq_init+0x18c>)
    4d30:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    4d32:	200f      	movs	r0, #15
    4d34:	4b31      	ldr	r3, [pc, #196]	; (4dfc <_ext_irq_init+0x184>)
    4d36:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    4d38:	200f      	movs	r0, #15
    4d3a:	4b31      	ldr	r3, [pc, #196]	; (4e00 <_ext_irq_init+0x188>)
    4d3c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    4d3e:	200f      	movs	r0, #15
    4d40:	4b30      	ldr	r3, [pc, #192]	; (4e04 <_ext_irq_init+0x18c>)
    4d42:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4d44:	2010      	movs	r0, #16
    4d46:	4b2d      	ldr	r3, [pc, #180]	; (4dfc <_ext_irq_init+0x184>)
    4d48:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    4d4a:	2010      	movs	r0, #16
    4d4c:	4b2c      	ldr	r3, [pc, #176]	; (4e00 <_ext_irq_init+0x188>)
    4d4e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4d50:	2010      	movs	r0, #16
    4d52:	4b2c      	ldr	r3, [pc, #176]	; (4e04 <_ext_irq_init+0x18c>)
    4d54:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    4d56:	2011      	movs	r0, #17
    4d58:	4b28      	ldr	r3, [pc, #160]	; (4dfc <_ext_irq_init+0x184>)
    4d5a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4d5c:	2011      	movs	r0, #17
    4d5e:	4b28      	ldr	r3, [pc, #160]	; (4e00 <_ext_irq_init+0x188>)
    4d60:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4d62:	2011      	movs	r0, #17
    4d64:	4b27      	ldr	r3, [pc, #156]	; (4e04 <_ext_irq_init+0x18c>)
    4d66:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4d68:	2012      	movs	r0, #18
    4d6a:	4b24      	ldr	r3, [pc, #144]	; (4dfc <_ext_irq_init+0x184>)
    4d6c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4d6e:	2012      	movs	r0, #18
    4d70:	4b23      	ldr	r3, [pc, #140]	; (4e00 <_ext_irq_init+0x188>)
    4d72:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4d74:	2012      	movs	r0, #18
    4d76:	4b23      	ldr	r3, [pc, #140]	; (4e04 <_ext_irq_init+0x18c>)
    4d78:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    4d7a:	2013      	movs	r0, #19
    4d7c:	4b1f      	ldr	r3, [pc, #124]	; (4dfc <_ext_irq_init+0x184>)
    4d7e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4d80:	2013      	movs	r0, #19
    4d82:	4b1f      	ldr	r3, [pc, #124]	; (4e00 <_ext_irq_init+0x188>)
    4d84:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    4d86:	2013      	movs	r0, #19
    4d88:	4b1e      	ldr	r3, [pc, #120]	; (4e04 <_ext_irq_init+0x18c>)
    4d8a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    4d8c:	2014      	movs	r0, #20
    4d8e:	4b1b      	ldr	r3, [pc, #108]	; (4dfc <_ext_irq_init+0x184>)
    4d90:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    4d92:	2014      	movs	r0, #20
    4d94:	4b1a      	ldr	r3, [pc, #104]	; (4e00 <_ext_irq_init+0x188>)
    4d96:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    4d98:	2014      	movs	r0, #20
    4d9a:	4b1a      	ldr	r3, [pc, #104]	; (4e04 <_ext_irq_init+0x18c>)
    4d9c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    4d9e:	2015      	movs	r0, #21
    4da0:	4b16      	ldr	r3, [pc, #88]	; (4dfc <_ext_irq_init+0x184>)
    4da2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    4da4:	2015      	movs	r0, #21
    4da6:	4b16      	ldr	r3, [pc, #88]	; (4e00 <_ext_irq_init+0x188>)
    4da8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    4daa:	2015      	movs	r0, #21
    4dac:	4b15      	ldr	r3, [pc, #84]	; (4e04 <_ext_irq_init+0x18c>)
    4dae:	4798      	blx	r3

	callback = cb;
    4db0:	4a15      	ldr	r2, [pc, #84]	; (4e08 <_ext_irq_init+0x190>)
    4db2:	687b      	ldr	r3, [r7, #4]
    4db4:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4db6:	2300      	movs	r3, #0
}
    4db8:	4618      	mov	r0, r3
    4dba:	3708      	adds	r7, #8
    4dbc:	46bd      	mov	sp, r7
    4dbe:	bd80      	pop	{r7, pc}
    4dc0:	40002800 	.word	0x40002800
    4dc4:	00004a39 	.word	0x00004a39
    4dc8:	00004b69 	.word	0x00004b69
    4dcc:	00004af9 	.word	0x00004af9
    4dd0:	00004a15 	.word	0x00004a15
    4dd4:	00004b99 	.word	0x00004b99
    4dd8:	00004b25 	.word	0x00004b25
    4ddc:	00004bc1 	.word	0x00004bc1
    4de0:	00004bdf 	.word	0x00004bdf
    4de4:	00004bfb 	.word	0x00004bfb
    4de8:	00004c3f 	.word	0x00004c3f
    4dec:	00004c5b 	.word	0x00004c5b
    4df0:	90999013 	.word	0x90999013
    4df4:	00004c17 	.word	0x00004c17
    4df8:	00004acd 	.word	0x00004acd
    4dfc:	00004995 	.word	0x00004995
    4e00:	000049d9 	.word	0x000049d9
    4e04:	00004959 	.word	0x00004959
    4e08:	20000c00 	.word	0x20000c00

00004e0c <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    4e0c:	b580      	push	{r7, lr}
    4e0e:	b084      	sub	sp, #16
    4e10:	af00      	add	r7, sp, #0
    4e12:	6078      	str	r0, [r7, #4]
    4e14:	460b      	mov	r3, r1
    4e16:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    4e18:	23ff      	movs	r3, #255	; 0xff
    4e1a:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    4e1c:	2300      	movs	r3, #0
    4e1e:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    4e20:	e010      	b.n	4e44 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    4e22:	7bbb      	ldrb	r3, [r7, #14]
    4e24:	4a1c      	ldr	r2, [pc, #112]	; (4e98 <_ext_irq_enable+0x8c>)
    4e26:	00db      	lsls	r3, r3, #3
    4e28:	4413      	add	r3, r2
    4e2a:	685a      	ldr	r2, [r3, #4]
    4e2c:	687b      	ldr	r3, [r7, #4]
    4e2e:	429a      	cmp	r2, r3
    4e30:	d105      	bne.n	4e3e <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    4e32:	7bbb      	ldrb	r3, [r7, #14]
    4e34:	4a18      	ldr	r2, [pc, #96]	; (4e98 <_ext_irq_enable+0x8c>)
    4e36:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4e3a:	73fb      	strb	r3, [r7, #15]
			break;
    4e3c:	e005      	b.n	4e4a <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    4e3e:	7bbb      	ldrb	r3, [r7, #14]
    4e40:	3301      	adds	r3, #1
    4e42:	73bb      	strb	r3, [r7, #14]
    4e44:	7bbb      	ldrb	r3, [r7, #14]
    4e46:	2b08      	cmp	r3, #8
    4e48:	d9eb      	bls.n	4e22 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    4e4a:	7bfb      	ldrb	r3, [r7, #15]
    4e4c:	2bff      	cmp	r3, #255	; 0xff
    4e4e:	d102      	bne.n	4e56 <_ext_irq_enable+0x4a>
		return -1;
    4e50:	f04f 33ff 	mov.w	r3, #4294967295
    4e54:	e01c      	b.n	4e90 <_ext_irq_enable+0x84>
	}

	if (enable) {
    4e56:	78fb      	ldrb	r3, [r7, #3]
    4e58:	2b00      	cmp	r3, #0
    4e5a:	d008      	beq.n	4e6e <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    4e5c:	7bfb      	ldrb	r3, [r7, #15]
    4e5e:	2201      	movs	r2, #1
    4e60:	fa02 f303 	lsl.w	r3, r2, r3
    4e64:	4619      	mov	r1, r3
    4e66:	480d      	ldr	r0, [pc, #52]	; (4e9c <_ext_irq_enable+0x90>)
    4e68:	4b0d      	ldr	r3, [pc, #52]	; (4ea0 <_ext_irq_enable+0x94>)
    4e6a:	4798      	blx	r3
    4e6c:	e00f      	b.n	4e8e <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    4e6e:	7bfb      	ldrb	r3, [r7, #15]
    4e70:	2201      	movs	r2, #1
    4e72:	fa02 f303 	lsl.w	r3, r2, r3
    4e76:	4619      	mov	r1, r3
    4e78:	4808      	ldr	r0, [pc, #32]	; (4e9c <_ext_irq_enable+0x90>)
    4e7a:	4b0a      	ldr	r3, [pc, #40]	; (4ea4 <_ext_irq_enable+0x98>)
    4e7c:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    4e7e:	7bfb      	ldrb	r3, [r7, #15]
    4e80:	2201      	movs	r2, #1
    4e82:	fa02 f303 	lsl.w	r3, r2, r3
    4e86:	4619      	mov	r1, r3
    4e88:	4804      	ldr	r0, [pc, #16]	; (4e9c <_ext_irq_enable+0x90>)
    4e8a:	4b07      	ldr	r3, [pc, #28]	; (4ea8 <_ext_irq_enable+0x9c>)
    4e8c:	4798      	blx	r3
	}

	return ERR_NONE;
    4e8e:	2300      	movs	r3, #0
}
    4e90:	4618      	mov	r0, r3
    4e92:	3710      	adds	r7, #16
    4e94:	46bd      	mov	sp, r7
    4e96:	bd80      	pop	{r7, pc}
    4e98:	00010f90 	.word	0x00010f90
    4e9c:	40002800 	.word	0x40002800
    4ea0:	00004a95 	.word	0x00004a95
    4ea4:	00004ab1 	.word	0x00004ab1
    4ea8:	00004a79 	.word	0x00004a79

00004eac <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4eac:	b580      	push	{r7, lr}
    4eae:	b084      	sub	sp, #16
    4eb0:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    4eb2:	4841      	ldr	r0, [pc, #260]	; (4fb8 <_ext_irq_handler+0x10c>)
    4eb4:	4b41      	ldr	r3, [pc, #260]	; (4fbc <_ext_irq_handler+0x110>)
    4eb6:	4798      	blx	r3
    4eb8:	4603      	mov	r3, r0
    4eba:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4ebc:	f04f 33ff 	mov.w	r3, #4294967295
    4ec0:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4ec2:	683b      	ldr	r3, [r7, #0]
    4ec4:	4619      	mov	r1, r3
    4ec6:	483c      	ldr	r0, [pc, #240]	; (4fb8 <_ext_irq_handler+0x10c>)
    4ec8:	4b3d      	ldr	r3, [pc, #244]	; (4fc0 <_ext_irq_handler+0x114>)
    4eca:	4798      	blx	r3

	ASSERT(callback);
    4ecc:	4b3d      	ldr	r3, [pc, #244]	; (4fc4 <_ext_irq_handler+0x118>)
    4ece:	681b      	ldr	r3, [r3, #0]
    4ed0:	2b00      	cmp	r3, #0
    4ed2:	bf14      	ite	ne
    4ed4:	2301      	movne	r3, #1
    4ed6:	2300      	moveq	r3, #0
    4ed8:	b2db      	uxtb	r3, r3
    4eda:	f44f 7284 	mov.w	r2, #264	; 0x108
    4ede:	493a      	ldr	r1, [pc, #232]	; (4fc8 <_ext_irq_handler+0x11c>)
    4ee0:	4618      	mov	r0, r3
    4ee2:	4b3a      	ldr	r3, [pc, #232]	; (4fcc <_ext_irq_handler+0x120>)
    4ee4:	4798      	blx	r3

	while (flags) {
    4ee6:	e060      	b.n	4faa <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    4ee8:	683b      	ldr	r3, [r7, #0]
    4eea:	4618      	mov	r0, r3
    4eec:	4b38      	ldr	r3, [pc, #224]	; (4fd0 <_ext_irq_handler+0x124>)
    4eee:	4798      	blx	r3
    4ef0:	4603      	mov	r3, r0
    4ef2:	b2db      	uxtb	r3, r3
    4ef4:	3b01      	subs	r3, #1
    4ef6:	b2db      	uxtb	r3, r3
    4ef8:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4efa:	e047      	b.n	4f8c <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4efc:	2300      	movs	r3, #0
    4efe:	71fb      	strb	r3, [r7, #7]
    4f00:	2309      	movs	r3, #9
    4f02:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    4f04:	e024      	b.n	4f50 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    4f06:	79ba      	ldrb	r2, [r7, #6]
    4f08:	79fb      	ldrb	r3, [r7, #7]
    4f0a:	4413      	add	r3, r2
    4f0c:	105b      	asrs	r3, r3, #1
    4f0e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4f10:	797b      	ldrb	r3, [r7, #5]
    4f12:	4a30      	ldr	r2, [pc, #192]	; (4fd4 <_ext_irq_handler+0x128>)
    4f14:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4f18:	461a      	mov	r2, r3
    4f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4f1e:	429a      	cmp	r2, r3
    4f20:	d106      	bne.n	4f30 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    4f22:	797b      	ldrb	r3, [r7, #5]
    4f24:	4a2b      	ldr	r2, [pc, #172]	; (4fd4 <_ext_irq_handler+0x128>)
    4f26:	00db      	lsls	r3, r3, #3
    4f28:	4413      	add	r3, r2
    4f2a:	685b      	ldr	r3, [r3, #4]
    4f2c:	60bb      	str	r3, [r7, #8]
					break;
    4f2e:	e013      	b.n	4f58 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    4f30:	797b      	ldrb	r3, [r7, #5]
    4f32:	4a28      	ldr	r2, [pc, #160]	; (4fd4 <_ext_irq_handler+0x128>)
    4f34:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4f38:	461a      	mov	r2, r3
    4f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4f3e:	429a      	cmp	r2, r3
    4f40:	da03      	bge.n	4f4a <_ext_irq_handler+0x9e>
					lower = middle + 1;
    4f42:	797b      	ldrb	r3, [r7, #5]
    4f44:	3301      	adds	r3, #1
    4f46:	71fb      	strb	r3, [r7, #7]
    4f48:	e002      	b.n	4f50 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    4f4a:	797b      	ldrb	r3, [r7, #5]
    4f4c:	3b01      	subs	r3, #1
    4f4e:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4f50:	79ba      	ldrb	r2, [r7, #6]
    4f52:	79fb      	ldrb	r3, [r7, #7]
    4f54:	429a      	cmp	r2, r3
    4f56:	d2d6      	bcs.n	4f06 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4f58:	68bb      	ldr	r3, [r7, #8]
    4f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
    4f5e:	d003      	beq.n	4f68 <_ext_irq_handler+0xbc>
				callback(pin);
    4f60:	4b18      	ldr	r3, [pc, #96]	; (4fc4 <_ext_irq_handler+0x118>)
    4f62:	681b      	ldr	r3, [r3, #0]
    4f64:	68b8      	ldr	r0, [r7, #8]
    4f66:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4f6c:	2201      	movs	r2, #1
    4f6e:	fa02 f303 	lsl.w	r3, r2, r3
    4f72:	43da      	mvns	r2, r3
    4f74:	683b      	ldr	r3, [r7, #0]
    4f76:	4013      	ands	r3, r2
    4f78:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    4f7a:	683b      	ldr	r3, [r7, #0]
    4f7c:	4618      	mov	r0, r3
    4f7e:	4b14      	ldr	r3, [pc, #80]	; (4fd0 <_ext_irq_handler+0x124>)
    4f80:	4798      	blx	r3
    4f82:	4603      	mov	r3, r0
    4f84:	b2db      	uxtb	r3, r3
    4f86:	3b01      	subs	r3, #1
    4f88:	b2db      	uxtb	r3, r3
    4f8a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4f90:	f1b3 3fff 	cmp.w	r3, #4294967295
    4f94:	d1b2      	bne.n	4efc <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4f96:	4808      	ldr	r0, [pc, #32]	; (4fb8 <_ext_irq_handler+0x10c>)
    4f98:	4b08      	ldr	r3, [pc, #32]	; (4fbc <_ext_irq_handler+0x110>)
    4f9a:	4798      	blx	r3
    4f9c:	4603      	mov	r3, r0
    4f9e:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4fa0:	683b      	ldr	r3, [r7, #0]
    4fa2:	4619      	mov	r1, r3
    4fa4:	4804      	ldr	r0, [pc, #16]	; (4fb8 <_ext_irq_handler+0x10c>)
    4fa6:	4b06      	ldr	r3, [pc, #24]	; (4fc0 <_ext_irq_handler+0x114>)
    4fa8:	4798      	blx	r3
	while (flags) {
    4faa:	683b      	ldr	r3, [r7, #0]
    4fac:	2b00      	cmp	r3, #0
    4fae:	d19b      	bne.n	4ee8 <_ext_irq_handler+0x3c>
	}
}
    4fb0:	bf00      	nop
    4fb2:	3710      	adds	r7, #16
    4fb4:	46bd      	mov	sp, r7
    4fb6:	bd80      	pop	{r7, pc}
    4fb8:	40002800 	.word	0x40002800
    4fbc:	00004a61 	.word	0x00004a61
    4fc0:	00004a79 	.word	0x00004a79
    4fc4:	20000c00 	.word	0x20000c00
    4fc8:	00010fd8 	.word	0x00010fd8
    4fcc:	00003cd5 	.word	0x00003cd5
    4fd0:	00010ae5 	.word	0x00010ae5
    4fd4:	00010f90 	.word	0x00010f90

00004fd8 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    4fd8:	b580      	push	{r7, lr}
    4fda:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4fdc:	4b01      	ldr	r3, [pc, #4]	; (4fe4 <EIC_0_Handler+0xc>)
    4fde:	4798      	blx	r3
} /**
    4fe0:	bf00      	nop
    4fe2:	bd80      	pop	{r7, pc}
    4fe4:	00004ead 	.word	0x00004ead

00004fe8 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    4fe8:	b580      	push	{r7, lr}
    4fea:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4fec:	4b01      	ldr	r3, [pc, #4]	; (4ff4 <EIC_1_Handler+0xc>)
    4fee:	4798      	blx	r3
} /**
    4ff0:	bf00      	nop
    4ff2:	bd80      	pop	{r7, pc}
    4ff4:	00004ead 	.word	0x00004ead

00004ff8 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    4ff8:	b580      	push	{r7, lr}
    4ffa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4ffc:	4b01      	ldr	r3, [pc, #4]	; (5004 <EIC_3_Handler+0xc>)
    4ffe:	4798      	blx	r3
} /**
    5000:	bf00      	nop
    5002:	bd80      	pop	{r7, pc}
    5004:	00004ead 	.word	0x00004ead

00005008 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    5008:	b580      	push	{r7, lr}
    500a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    500c:	4b01      	ldr	r3, [pc, #4]	; (5014 <EIC_4_Handler+0xc>)
    500e:	4798      	blx	r3
} /**
    5010:	bf00      	nop
    5012:	bd80      	pop	{r7, pc}
    5014:	00004ead 	.word	0x00004ead

00005018 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    5018:	b580      	push	{r7, lr}
    501a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    501c:	4b01      	ldr	r3, [pc, #4]	; (5024 <EIC_5_Handler+0xc>)
    501e:	4798      	blx	r3
} /**
    5020:	bf00      	nop
    5022:	bd80      	pop	{r7, pc}
    5024:	00004ead 	.word	0x00004ead

00005028 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    5028:	b580      	push	{r7, lr}
    502a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    502c:	4b01      	ldr	r3, [pc, #4]	; (5034 <EIC_6_Handler+0xc>)
    502e:	4798      	blx	r3
} /**
    5030:	bf00      	nop
    5032:	bd80      	pop	{r7, pc}
    5034:	00004ead 	.word	0x00004ead

00005038 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    5038:	b580      	push	{r7, lr}
    503a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    503c:	4b01      	ldr	r3, [pc, #4]	; (5044 <EIC_7_Handler+0xc>)
    503e:	4798      	blx	r3
} /**
    5040:	bf00      	nop
    5042:	bd80      	pop	{r7, pc}
    5044:	00004ead 	.word	0x00004ead

00005048 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    5048:	b580      	push	{r7, lr}
    504a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    504c:	4b01      	ldr	r3, [pc, #4]	; (5054 <EIC_8_Handler+0xc>)
    504e:	4798      	blx	r3
} /**
    5050:	bf00      	nop
    5052:	bd80      	pop	{r7, pc}
    5054:	00004ead 	.word	0x00004ead

00005058 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    5058:	b580      	push	{r7, lr}
    505a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    505c:	4b01      	ldr	r3, [pc, #4]	; (5064 <EIC_9_Handler+0xc>)
    505e:	4798      	blx	r3
}
    5060:	bf00      	nop
    5062:	bd80      	pop	{r7, pc}
    5064:	00004ead 	.word	0x00004ead

00005068 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    5068:	b480      	push	{r7}
    506a:	b085      	sub	sp, #20
    506c:	af00      	add	r7, sp, #0
    506e:	60f8      	str	r0, [r7, #12]
    5070:	460b      	mov	r3, r1
    5072:	607a      	str	r2, [r7, #4]
    5074:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    5076:	7afa      	ldrb	r2, [r7, #11]
    5078:	68fb      	ldr	r3, [r7, #12]
    507a:	3248      	adds	r2, #72	; 0x48
    507c:	6879      	ldr	r1, [r7, #4]
    507e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    5082:	bf00      	nop
    5084:	3714      	adds	r7, #20
    5086:	46bd      	mov	sp, r7
    5088:	f85d 7b04 	ldr.w	r7, [sp], #4
    508c:	4770      	bx	lr

0000508e <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    508e:	b480      	push	{r7}
    5090:	b083      	sub	sp, #12
    5092:	af00      	add	r7, sp, #0
    5094:	6078      	str	r0, [r7, #4]
    5096:	460b      	mov	r3, r1
    5098:	70fb      	strb	r3, [r7, #3]
    509a:	4613      	mov	r3, r2
    509c:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    509e:	78fb      	ldrb	r3, [r7, #3]
    50a0:	687a      	ldr	r2, [r7, #4]
    50a2:	3304      	adds	r3, #4
    50a4:	00db      	lsls	r3, r3, #3
    50a6:	4413      	add	r3, r2
    50a8:	78ba      	ldrb	r2, [r7, #2]
    50aa:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    50ac:	78fb      	ldrb	r3, [r7, #3]
    50ae:	78ba      	ldrb	r2, [r7, #2]
    50b0:	43d2      	mvns	r2, r2
    50b2:	b2d1      	uxtb	r1, r2
    50b4:	687a      	ldr	r2, [r7, #4]
    50b6:	3304      	adds	r3, #4
    50b8:	00db      	lsls	r3, r3, #3
    50ba:	4413      	add	r3, r2
    50bc:	460a      	mov	r2, r1
    50be:	711a      	strb	r2, [r3, #4]
}
    50c0:	bf00      	nop
    50c2:	370c      	adds	r7, #12
    50c4:	46bd      	mov	sp, r7
    50c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    50ca:	4770      	bx	lr

000050cc <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    50cc:	b480      	push	{r7}
    50ce:	b085      	sub	sp, #20
    50d0:	af00      	add	r7, sp, #0
    50d2:	60f8      	str	r0, [r7, #12]
    50d4:	460b      	mov	r3, r1
    50d6:	607a      	str	r2, [r7, #4]
    50d8:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    50da:	7afa      	ldrb	r2, [r7, #11]
    50dc:	68fb      	ldr	r3, [r7, #12]
    50de:	3204      	adds	r2, #4
    50e0:	6879      	ldr	r1, [r7, #4]
    50e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    50e6:	bf00      	nop
    50e8:	3714      	adds	r7, #20
    50ea:	46bd      	mov	sp, r7
    50ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    50f0:	4770      	bx	lr
	...

000050f4 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    50f4:	b580      	push	{r7, lr}
    50f6:	b082      	sub	sp, #8
    50f8:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    50fa:	2300      	movs	r3, #0
    50fc:	71fb      	strb	r3, [r7, #7]
    50fe:	e00b      	b.n	5118 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    5100:	79fb      	ldrb	r3, [r7, #7]
    5102:	4a18      	ldr	r2, [pc, #96]	; (5164 <_event_system_init+0x70>)
    5104:	5cd3      	ldrb	r3, [r2, r3]
    5106:	461a      	mov	r2, r3
    5108:	79fb      	ldrb	r3, [r7, #7]
    510a:	4619      	mov	r1, r3
    510c:	4816      	ldr	r0, [pc, #88]	; (5168 <_event_system_init+0x74>)
    510e:	4b17      	ldr	r3, [pc, #92]	; (516c <_event_system_init+0x78>)
    5110:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    5112:	79fb      	ldrb	r3, [r7, #7]
    5114:	3301      	adds	r3, #1
    5116:	71fb      	strb	r3, [r7, #7]
    5118:	79fb      	ldrb	r3, [r7, #7]
    511a:	2b42      	cmp	r3, #66	; 0x42
    511c:	d9f0      	bls.n	5100 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    511e:	2300      	movs	r3, #0
    5120:	71fb      	strb	r3, [r7, #7]
    5122:	e016      	b.n	5152 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    5124:	79fb      	ldrb	r3, [r7, #7]
    5126:	4a12      	ldr	r2, [pc, #72]	; (5170 <_event_system_init+0x7c>)
    5128:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    512c:	461a      	mov	r2, r3
    512e:	79fb      	ldrb	r3, [r7, #7]
    5130:	4619      	mov	r1, r3
    5132:	480d      	ldr	r0, [pc, #52]	; (5168 <_event_system_init+0x74>)
    5134:	4b0f      	ldr	r3, [pc, #60]	; (5174 <_event_system_init+0x80>)
    5136:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    5138:	79fb      	ldrb	r3, [r7, #7]
    513a:	4a0f      	ldr	r2, [pc, #60]	; (5178 <_event_system_init+0x84>)
    513c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5140:	b2da      	uxtb	r2, r3
    5142:	79fb      	ldrb	r3, [r7, #7]
    5144:	4619      	mov	r1, r3
    5146:	4808      	ldr	r0, [pc, #32]	; (5168 <_event_system_init+0x74>)
    5148:	4b0c      	ldr	r3, [pc, #48]	; (517c <_event_system_init+0x88>)
    514a:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    514c:	79fb      	ldrb	r3, [r7, #7]
    514e:	3301      	adds	r3, #1
    5150:	71fb      	strb	r3, [r7, #7]
    5152:	79fb      	ldrb	r3, [r7, #7]
    5154:	2b1f      	cmp	r3, #31
    5156:	d9e5      	bls.n	5124 <_event_system_init+0x30>
	}

	return ERR_NONE;
    5158:	2300      	movs	r3, #0
}
    515a:	4618      	mov	r0, r3
    515c:	3708      	adds	r7, #8
    515e:	46bd      	mov	sp, r7
    5160:	bd80      	pop	{r7, pc}
    5162:	bf00      	nop
    5164:	00010ff0 	.word	0x00010ff0
    5168:	4100e000 	.word	0x4100e000
    516c:	00005069 	.word	0x00005069
    5170:	00011034 	.word	0x00011034
    5174:	000050cd 	.word	0x000050cd
    5178:	00011074 	.word	0x00011074
    517c:	0000508f 	.word	0x0000508f

00005180 <hri_gclk_wait_for_sync>:
{
    5180:	b480      	push	{r7}
    5182:	b083      	sub	sp, #12
    5184:	af00      	add	r7, sp, #0
    5186:	6078      	str	r0, [r7, #4]
    5188:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    518a:	bf00      	nop
    518c:	687b      	ldr	r3, [r7, #4]
    518e:	685a      	ldr	r2, [r3, #4]
    5190:	683b      	ldr	r3, [r7, #0]
    5192:	4013      	ands	r3, r2
    5194:	2b00      	cmp	r3, #0
    5196:	d1f9      	bne.n	518c <hri_gclk_wait_for_sync+0xc>
}
    5198:	bf00      	nop
    519a:	370c      	adds	r7, #12
    519c:	46bd      	mov	sp, r7
    519e:	f85d 7b04 	ldr.w	r7, [sp], #4
    51a2:	4770      	bx	lr

000051a4 <hri_gclk_write_GENCTRL_reg>:
{
    51a4:	b580      	push	{r7, lr}
    51a6:	b084      	sub	sp, #16
    51a8:	af00      	add	r7, sp, #0
    51aa:	60f8      	str	r0, [r7, #12]
    51ac:	460b      	mov	r3, r1
    51ae:	607a      	str	r2, [r7, #4]
    51b0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    51b2:	7afa      	ldrb	r2, [r7, #11]
    51b4:	68fb      	ldr	r3, [r7, #12]
    51b6:	3208      	adds	r2, #8
    51b8:	6879      	ldr	r1, [r7, #4]
    51ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    51be:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    51c2:	68f8      	ldr	r0, [r7, #12]
    51c4:	4b02      	ldr	r3, [pc, #8]	; (51d0 <hri_gclk_write_GENCTRL_reg+0x2c>)
    51c6:	4798      	blx	r3
}
    51c8:	bf00      	nop
    51ca:	3710      	adds	r7, #16
    51cc:	46bd      	mov	sp, r7
    51ce:	bd80      	pop	{r7, pc}
    51d0:	00005181 	.word	0x00005181

000051d4 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    51d4:	b580      	push	{r7, lr}
    51d6:	b082      	sub	sp, #8
    51d8:	af00      	add	r7, sp, #0
    51da:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    51dc:	687b      	ldr	r3, [r7, #4]
    51de:	f003 0301 	and.w	r3, r3, #1
    51e2:	2b00      	cmp	r3, #0
    51e4:	d004      	beq.n	51f0 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    51e6:	4a36      	ldr	r2, [pc, #216]	; (52c0 <_gclk_init_generators_by_fref+0xec>)
    51e8:	2100      	movs	r1, #0
    51ea:	4836      	ldr	r0, [pc, #216]	; (52c4 <_gclk_init_generators_by_fref+0xf0>)
    51ec:	4b36      	ldr	r3, [pc, #216]	; (52c8 <_gclk_init_generators_by_fref+0xf4>)
    51ee:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    51f0:	687b      	ldr	r3, [r7, #4]
    51f2:	f003 0302 	and.w	r3, r3, #2
    51f6:	2b00      	cmp	r3, #0
    51f8:	d004      	beq.n	5204 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    51fa:	4a34      	ldr	r2, [pc, #208]	; (52cc <_gclk_init_generators_by_fref+0xf8>)
    51fc:	2101      	movs	r1, #1
    51fe:	4831      	ldr	r0, [pc, #196]	; (52c4 <_gclk_init_generators_by_fref+0xf0>)
    5200:	4b31      	ldr	r3, [pc, #196]	; (52c8 <_gclk_init_generators_by_fref+0xf4>)
    5202:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    5204:	687b      	ldr	r3, [r7, #4]
    5206:	f003 0304 	and.w	r3, r3, #4
    520a:	2b00      	cmp	r3, #0
    520c:	d004      	beq.n	5218 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    520e:	4a30      	ldr	r2, [pc, #192]	; (52d0 <_gclk_init_generators_by_fref+0xfc>)
    5210:	2102      	movs	r1, #2
    5212:	482c      	ldr	r0, [pc, #176]	; (52c4 <_gclk_init_generators_by_fref+0xf0>)
    5214:	4b2c      	ldr	r3, [pc, #176]	; (52c8 <_gclk_init_generators_by_fref+0xf4>)
    5216:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    5218:	687b      	ldr	r3, [r7, #4]
    521a:	f003 0308 	and.w	r3, r3, #8
    521e:	2b00      	cmp	r3, #0
    5220:	d004      	beq.n	522c <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    5222:	4a2c      	ldr	r2, [pc, #176]	; (52d4 <_gclk_init_generators_by_fref+0x100>)
    5224:	2103      	movs	r1, #3
    5226:	4827      	ldr	r0, [pc, #156]	; (52c4 <_gclk_init_generators_by_fref+0xf0>)
    5228:	4b27      	ldr	r3, [pc, #156]	; (52c8 <_gclk_init_generators_by_fref+0xf4>)
    522a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    522c:	687b      	ldr	r3, [r7, #4]
    522e:	f003 0310 	and.w	r3, r3, #16
    5232:	2b00      	cmp	r3, #0
    5234:	d004      	beq.n	5240 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    5236:	4a28      	ldr	r2, [pc, #160]	; (52d8 <_gclk_init_generators_by_fref+0x104>)
    5238:	2104      	movs	r1, #4
    523a:	4822      	ldr	r0, [pc, #136]	; (52c4 <_gclk_init_generators_by_fref+0xf0>)
    523c:	4b22      	ldr	r3, [pc, #136]	; (52c8 <_gclk_init_generators_by_fref+0xf4>)
    523e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    5240:	687b      	ldr	r3, [r7, #4]
    5242:	f003 0320 	and.w	r3, r3, #32
    5246:	2b00      	cmp	r3, #0
    5248:	d004      	beq.n	5254 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    524a:	4a24      	ldr	r2, [pc, #144]	; (52dc <_gclk_init_generators_by_fref+0x108>)
    524c:	2105      	movs	r1, #5
    524e:	481d      	ldr	r0, [pc, #116]	; (52c4 <_gclk_init_generators_by_fref+0xf0>)
    5250:	4b1d      	ldr	r3, [pc, #116]	; (52c8 <_gclk_init_generators_by_fref+0xf4>)
    5252:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    5254:	687b      	ldr	r3, [r7, #4]
    5256:	f003 0340 	and.w	r3, r3, #64	; 0x40
    525a:	2b00      	cmp	r3, #0
    525c:	d004      	beq.n	5268 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    525e:	4a20      	ldr	r2, [pc, #128]	; (52e0 <_gclk_init_generators_by_fref+0x10c>)
    5260:	2106      	movs	r1, #6
    5262:	4818      	ldr	r0, [pc, #96]	; (52c4 <_gclk_init_generators_by_fref+0xf0>)
    5264:	4b18      	ldr	r3, [pc, #96]	; (52c8 <_gclk_init_generators_by_fref+0xf4>)
    5266:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    5268:	687b      	ldr	r3, [r7, #4]
    526a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    526e:	2b00      	cmp	r3, #0
    5270:	d004      	beq.n	527c <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    5272:	4a1c      	ldr	r2, [pc, #112]	; (52e4 <_gclk_init_generators_by_fref+0x110>)
    5274:	2107      	movs	r1, #7
    5276:	4813      	ldr	r0, [pc, #76]	; (52c4 <_gclk_init_generators_by_fref+0xf0>)
    5278:	4b13      	ldr	r3, [pc, #76]	; (52c8 <_gclk_init_generators_by_fref+0xf4>)
    527a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    527c:	687b      	ldr	r3, [r7, #4]
    527e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5282:	2b00      	cmp	r3, #0
    5284:	d004      	beq.n	5290 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    5286:	4a18      	ldr	r2, [pc, #96]	; (52e8 <_gclk_init_generators_by_fref+0x114>)
    5288:	2108      	movs	r1, #8
    528a:	480e      	ldr	r0, [pc, #56]	; (52c4 <_gclk_init_generators_by_fref+0xf0>)
    528c:	4b0e      	ldr	r3, [pc, #56]	; (52c8 <_gclk_init_generators_by_fref+0xf4>)
    528e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    5290:	687b      	ldr	r3, [r7, #4]
    5292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5296:	2b00      	cmp	r3, #0
    5298:	d004      	beq.n	52a4 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    529a:	4a14      	ldr	r2, [pc, #80]	; (52ec <_gclk_init_generators_by_fref+0x118>)
    529c:	210a      	movs	r1, #10
    529e:	4809      	ldr	r0, [pc, #36]	; (52c4 <_gclk_init_generators_by_fref+0xf0>)
    52a0:	4b09      	ldr	r3, [pc, #36]	; (52c8 <_gclk_init_generators_by_fref+0xf4>)
    52a2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    52a4:	687b      	ldr	r3, [r7, #4]
    52a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    52aa:	2b00      	cmp	r3, #0
    52ac:	d004      	beq.n	52b8 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    52ae:	4a10      	ldr	r2, [pc, #64]	; (52f0 <_gclk_init_generators_by_fref+0x11c>)
    52b0:	210b      	movs	r1, #11
    52b2:	4804      	ldr	r0, [pc, #16]	; (52c4 <_gclk_init_generators_by_fref+0xf0>)
    52b4:	4b04      	ldr	r3, [pc, #16]	; (52c8 <_gclk_init_generators_by_fref+0xf4>)
    52b6:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    52b8:	bf00      	nop
    52ba:	3708      	adds	r7, #8
    52bc:	46bd      	mov	sp, r7
    52be:	bd80      	pop	{r7, pc}
    52c0:	00010107 	.word	0x00010107
    52c4:	40001c00 	.word	0x40001c00
    52c8:	000051a5 	.word	0x000051a5
    52cc:	00010907 	.word	0x00010907
    52d0:	00010906 	.word	0x00010906
    52d4:	00020908 	.word	0x00020908
    52d8:	00010901 	.word	0x00010901
    52dc:	00062901 	.word	0x00062901
    52e0:	000c2901 	.word	0x000c2901
    52e4:	00082908 	.word	0x00082908
    52e8:	00032901 	.word	0x00032901
    52ec:	00010905 	.word	0x00010905
    52f0:	00041905 	.word	0x00041905

000052f4 <hri_mclk_write_CPUDIV_reg>:
{
    52f4:	b480      	push	{r7}
    52f6:	b083      	sub	sp, #12
    52f8:	af00      	add	r7, sp, #0
    52fa:	6078      	str	r0, [r7, #4]
    52fc:	460b      	mov	r3, r1
    52fe:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    5300:	687b      	ldr	r3, [r7, #4]
    5302:	78fa      	ldrb	r2, [r7, #3]
    5304:	715a      	strb	r2, [r3, #5]
}
    5306:	bf00      	nop
    5308:	370c      	adds	r7, #12
    530a:	46bd      	mov	sp, r7
    530c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5310:	4770      	bx	lr
	...

00005314 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    5314:	b580      	push	{r7, lr}
    5316:	b082      	sub	sp, #8
    5318:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    531a:	4b05      	ldr	r3, [pc, #20]	; (5330 <_mclk_init+0x1c>)
    531c:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    531e:	2101      	movs	r1, #1
    5320:	6878      	ldr	r0, [r7, #4]
    5322:	4b04      	ldr	r3, [pc, #16]	; (5334 <_mclk_init+0x20>)
    5324:	4798      	blx	r3
}
    5326:	bf00      	nop
    5328:	3708      	adds	r7, #8
    532a:	46bd      	mov	sp, r7
    532c:	bd80      	pop	{r7, pc}
    532e:	bf00      	nop
    5330:	40000800 	.word	0x40000800
    5334:	000052f5 	.word	0x000052f5

00005338 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    5338:	b480      	push	{r7}
    533a:	b083      	sub	sp, #12
    533c:	af00      	add	r7, sp, #0
    533e:	6078      	str	r0, [r7, #4]
    5340:	460b      	mov	r3, r1
    5342:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    5344:	687b      	ldr	r3, [r7, #4]
    5346:	78fa      	ldrb	r2, [r7, #3]
    5348:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    534a:	bf00      	nop
    534c:	370c      	adds	r7, #12
    534e:	46bd      	mov	sp, r7
    5350:	f85d 7b04 	ldr.w	r7, [sp], #4
    5354:	4770      	bx	lr

00005356 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    5356:	b480      	push	{r7}
    5358:	b083      	sub	sp, #12
    535a:	af00      	add	r7, sp, #0
    535c:	6078      	str	r0, [r7, #4]
    535e:	460b      	mov	r3, r1
    5360:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    5362:	687b      	ldr	r3, [r7, #4]
    5364:	887a      	ldrh	r2, [r7, #2]
    5366:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5368:	bf00      	nop
    536a:	370c      	adds	r7, #12
    536c:	46bd      	mov	sp, r7
    536e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5372:	4770      	bx	lr

00005374 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    5374:	b480      	push	{r7}
    5376:	b083      	sub	sp, #12
    5378:	af00      	add	r7, sp, #0
    537a:	6078      	str	r0, [r7, #4]
    537c:	460b      	mov	r3, r1
    537e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    5380:	687b      	ldr	r3, [r7, #4]
    5382:	78fa      	ldrb	r2, [r7, #3]
    5384:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5386:	bf00      	nop
    5388:	370c      	adds	r7, #12
    538a:	46bd      	mov	sp, r7
    538c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5390:	4770      	bx	lr

00005392 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    5392:	b480      	push	{r7}
    5394:	b083      	sub	sp, #12
    5396:	af00      	add	r7, sp, #0
    5398:	6078      	str	r0, [r7, #4]
    539a:	460b      	mov	r3, r1
    539c:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    539e:	687b      	ldr	r3, [r7, #4]
    53a0:	78fa      	ldrb	r2, [r7, #3]
    53a2:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    53a4:	bf00      	nop
    53a6:	370c      	adds	r7, #12
    53a8:	46bd      	mov	sp, r7
    53aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    53ae:	4770      	bx	lr

000053b0 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    53b0:	b480      	push	{r7}
    53b2:	b085      	sub	sp, #20
    53b4:	af00      	add	r7, sp, #0
    53b6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    53b8:	687b      	ldr	r3, [r7, #4]
    53ba:	69db      	ldr	r3, [r3, #28]
    53bc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    53be:	68fb      	ldr	r3, [r7, #12]
    53c0:	0a1b      	lsrs	r3, r3, #8
    53c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    53c6:	60fb      	str	r3, [r7, #12]
	return tmp;
    53c8:	68fb      	ldr	r3, [r7, #12]
}
    53ca:	4618      	mov	r0, r3
    53cc:	3714      	adds	r7, #20
    53ce:	46bd      	mov	sp, r7
    53d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    53d4:	4770      	bx	lr

000053d6 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    53d6:	b480      	push	{r7}
    53d8:	b083      	sub	sp, #12
    53da:	af00      	add	r7, sp, #0
    53dc:	6078      	str	r0, [r7, #4]
    53de:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    53e0:	687b      	ldr	r3, [r7, #4]
    53e2:	683a      	ldr	r2, [r7, #0]
    53e4:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    53e6:	bf00      	nop
    53e8:	370c      	adds	r7, #12
    53ea:	46bd      	mov	sp, r7
    53ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    53f0:	4770      	bx	lr
	...

000053f4 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    53f4:	b580      	push	{r7, lr}
    53f6:	b082      	sub	sp, #8
    53f8:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    53fa:	4b13      	ldr	r3, [pc, #76]	; (5448 <_osc32kctrl_init_sources+0x54>)
    53fc:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    53fe:	2300      	movs	r3, #0
    5400:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    5402:	f242 018e 	movw	r1, #8334	; 0x208e
    5406:	6878      	ldr	r0, [r7, #4]
    5408:	4b10      	ldr	r3, [pc, #64]	; (544c <_osc32kctrl_init_sources+0x58>)
    540a:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    540c:	2100      	movs	r1, #0
    540e:	6878      	ldr	r0, [r7, #4]
    5410:	4b0f      	ldr	r3, [pc, #60]	; (5450 <_osc32kctrl_init_sources+0x5c>)
    5412:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    5414:	2100      	movs	r1, #0
    5416:	6878      	ldr	r0, [r7, #4]
    5418:	4b0e      	ldr	r3, [pc, #56]	; (5454 <_osc32kctrl_init_sources+0x60>)
    541a:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    541c:	6878      	ldr	r0, [r7, #4]
    541e:	4b0e      	ldr	r3, [pc, #56]	; (5458 <_osc32kctrl_init_sources+0x64>)
    5420:	4798      	blx	r3
    5422:	4603      	mov	r3, r0
    5424:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    5426:	887b      	ldrh	r3, [r7, #2]
    5428:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    542a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    542e:	4619      	mov	r1, r3
    5430:	6878      	ldr	r0, [r7, #4]
    5432:	4b0a      	ldr	r3, [pc, #40]	; (545c <_osc32kctrl_init_sources+0x68>)
    5434:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    5436:	2100      	movs	r1, #0
    5438:	6878      	ldr	r0, [r7, #4]
    543a:	4b09      	ldr	r3, [pc, #36]	; (5460 <_osc32kctrl_init_sources+0x6c>)
    543c:	4798      	blx	r3
	(void)calib;
}
    543e:	bf00      	nop
    5440:	3708      	adds	r7, #8
    5442:	46bd      	mov	sp, r7
    5444:	bd80      	pop	{r7, pc}
    5446:	bf00      	nop
    5448:	40001400 	.word	0x40001400
    544c:	00005357 	.word	0x00005357
    5450:	00005375 	.word	0x00005375
    5454:	00005393 	.word	0x00005393
    5458:	000053b1 	.word	0x000053b1
    545c:	000053d7 	.word	0x000053d7
    5460:	00005339 	.word	0x00005339

00005464 <hri_gclk_wait_for_sync>:
{
    5464:	b480      	push	{r7}
    5466:	b083      	sub	sp, #12
    5468:	af00      	add	r7, sp, #0
    546a:	6078      	str	r0, [r7, #4]
    546c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    546e:	bf00      	nop
    5470:	687b      	ldr	r3, [r7, #4]
    5472:	685a      	ldr	r2, [r3, #4]
    5474:	683b      	ldr	r3, [r7, #0]
    5476:	4013      	ands	r3, r2
    5478:	2b00      	cmp	r3, #0
    547a:	d1f9      	bne.n	5470 <hri_gclk_wait_for_sync+0xc>
}
    547c:	bf00      	nop
    547e:	370c      	adds	r7, #12
    5480:	46bd      	mov	sp, r7
    5482:	f85d 7b04 	ldr.w	r7, [sp], #4
    5486:	4770      	bx	lr

00005488 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    5488:	b480      	push	{r7}
    548a:	b083      	sub	sp, #12
    548c:	af00      	add	r7, sp, #0
    548e:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    5490:	687b      	ldr	r3, [r7, #4]
    5492:	685b      	ldr	r3, [r3, #4]
    5494:	089b      	lsrs	r3, r3, #2
    5496:	f003 0301 	and.w	r3, r3, #1
    549a:	2b00      	cmp	r3, #0
    549c:	bf14      	ite	ne
    549e:	2301      	movne	r3, #1
    54a0:	2300      	moveq	r3, #0
    54a2:	b2db      	uxtb	r3, r3
}
    54a4:	4618      	mov	r0, r3
    54a6:	370c      	adds	r7, #12
    54a8:	46bd      	mov	sp, r7
    54aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    54ae:	4770      	bx	lr

000054b0 <hri_gclk_read_SYNCBUSY_reg>:
{
    54b0:	b480      	push	{r7}
    54b2:	b083      	sub	sp, #12
    54b4:	af00      	add	r7, sp, #0
    54b6:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    54b8:	687b      	ldr	r3, [r7, #4]
    54ba:	685b      	ldr	r3, [r3, #4]
}
    54bc:	4618      	mov	r0, r3
    54be:	370c      	adds	r7, #12
    54c0:	46bd      	mov	sp, r7
    54c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    54c6:	4770      	bx	lr

000054c8 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    54c8:	b580      	push	{r7, lr}
    54ca:	b086      	sub	sp, #24
    54cc:	af00      	add	r7, sp, #0
    54ce:	60f8      	str	r0, [r7, #12]
    54d0:	460b      	mov	r3, r1
    54d2:	607a      	str	r2, [r7, #4]
    54d4:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    54d6:	7afa      	ldrb	r2, [r7, #11]
    54d8:	68fb      	ldr	r3, [r7, #12]
    54da:	3208      	adds	r2, #8
    54dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    54e0:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    54e2:	697b      	ldr	r3, [r7, #20]
    54e4:	f023 030f 	bic.w	r3, r3, #15
    54e8:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    54ea:	687b      	ldr	r3, [r7, #4]
    54ec:	f003 030f 	and.w	r3, r3, #15
    54f0:	697a      	ldr	r2, [r7, #20]
    54f2:	4313      	orrs	r3, r2
    54f4:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    54f6:	7afa      	ldrb	r2, [r7, #11]
    54f8:	68fb      	ldr	r3, [r7, #12]
    54fa:	3208      	adds	r2, #8
    54fc:	6979      	ldr	r1, [r7, #20]
    54fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    5502:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    5506:	68f8      	ldr	r0, [r7, #12]
    5508:	4b02      	ldr	r3, [pc, #8]	; (5514 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    550a:	4798      	blx	r3
}
    550c:	bf00      	nop
    550e:	3718      	adds	r7, #24
    5510:	46bd      	mov	sp, r7
    5512:	bd80      	pop	{r7, pc}
    5514:	00005465 	.word	0x00005465

00005518 <hri_gclk_write_PCHCTRL_reg>:
{
    5518:	b480      	push	{r7}
    551a:	b085      	sub	sp, #20
    551c:	af00      	add	r7, sp, #0
    551e:	60f8      	str	r0, [r7, #12]
    5520:	460b      	mov	r3, r1
    5522:	607a      	str	r2, [r7, #4]
    5524:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    5526:	7afa      	ldrb	r2, [r7, #11]
    5528:	68fb      	ldr	r3, [r7, #12]
    552a:	3220      	adds	r2, #32
    552c:	6879      	ldr	r1, [r7, #4]
    552e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5532:	bf00      	nop
    5534:	3714      	adds	r7, #20
    5536:	46bd      	mov	sp, r7
    5538:	f85d 7b04 	ldr.w	r7, [sp], #4
    553c:	4770      	bx	lr

0000553e <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    553e:	b480      	push	{r7}
    5540:	b085      	sub	sp, #20
    5542:	af00      	add	r7, sp, #0
    5544:	60f8      	str	r0, [r7, #12]
    5546:	460b      	mov	r3, r1
    5548:	607a      	str	r2, [r7, #4]
    554a:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    554c:	bf00      	nop
    554e:	7afa      	ldrb	r2, [r7, #11]
    5550:	68f9      	ldr	r1, [r7, #12]
    5552:	4613      	mov	r3, r2
    5554:	009b      	lsls	r3, r3, #2
    5556:	4413      	add	r3, r2
    5558:	009b      	lsls	r3, r3, #2
    555a:	440b      	add	r3, r1
    555c:	333c      	adds	r3, #60	; 0x3c
    555e:	681a      	ldr	r2, [r3, #0]
    5560:	687b      	ldr	r3, [r7, #4]
    5562:	4013      	ands	r3, r2
    5564:	2b00      	cmp	r3, #0
    5566:	d1f2      	bne.n	554e <hri_oscctrl_wait_for_sync+0x10>
	};
}
    5568:	bf00      	nop
    556a:	3714      	adds	r7, #20
    556c:	46bd      	mov	sp, r7
    556e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5572:	4770      	bx	lr

00005574 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    5574:	b480      	push	{r7}
    5576:	b083      	sub	sp, #12
    5578:	af00      	add	r7, sp, #0
    557a:	6078      	str	r0, [r7, #4]
    557c:	460b      	mov	r3, r1
    557e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    5580:	78fa      	ldrb	r2, [r7, #3]
    5582:	6879      	ldr	r1, [r7, #4]
    5584:	4613      	mov	r3, r2
    5586:	009b      	lsls	r3, r3, #2
    5588:	4413      	add	r3, r2
    558a:	009b      	lsls	r3, r3, #2
    558c:	440b      	add	r3, r1
    558e:	3340      	adds	r3, #64	; 0x40
    5590:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    5592:	f003 0301 	and.w	r3, r3, #1
    5596:	2b00      	cmp	r3, #0
    5598:	bf14      	ite	ne
    559a:	2301      	movne	r3, #1
    559c:	2300      	moveq	r3, #0
    559e:	b2db      	uxtb	r3, r3
}
    55a0:	4618      	mov	r0, r3
    55a2:	370c      	adds	r7, #12
    55a4:	46bd      	mov	sp, r7
    55a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    55aa:	4770      	bx	lr

000055ac <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    55ac:	b480      	push	{r7}
    55ae:	b083      	sub	sp, #12
    55b0:	af00      	add	r7, sp, #0
    55b2:	6078      	str	r0, [r7, #4]
    55b4:	460b      	mov	r3, r1
    55b6:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    55b8:	78fa      	ldrb	r2, [r7, #3]
    55ba:	6879      	ldr	r1, [r7, #4]
    55bc:	4613      	mov	r3, r2
    55be:	009b      	lsls	r3, r3, #2
    55c0:	4413      	add	r3, r2
    55c2:	009b      	lsls	r3, r3, #2
    55c4:	440b      	add	r3, r1
    55c6:	3340      	adds	r3, #64	; 0x40
    55c8:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    55ca:	085b      	lsrs	r3, r3, #1
    55cc:	f003 0301 	and.w	r3, r3, #1
    55d0:	2b00      	cmp	r3, #0
    55d2:	bf14      	ite	ne
    55d4:	2301      	movne	r3, #1
    55d6:	2300      	moveq	r3, #0
    55d8:	b2db      	uxtb	r3, r3
}
    55da:	4618      	mov	r0, r3
    55dc:	370c      	adds	r7, #12
    55de:	46bd      	mov	sp, r7
    55e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    55e4:	4770      	bx	lr
	...

000055e8 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    55e8:	b580      	push	{r7, lr}
    55ea:	b082      	sub	sp, #8
    55ec:	af00      	add	r7, sp, #0
    55ee:	6078      	str	r0, [r7, #4]
    55f0:	460b      	mov	r3, r1
    55f2:	70fb      	strb	r3, [r7, #3]
    55f4:	4613      	mov	r3, r2
    55f6:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    55f8:	78fa      	ldrb	r2, [r7, #3]
    55fa:	6879      	ldr	r1, [r7, #4]
    55fc:	4613      	mov	r3, r2
    55fe:	009b      	lsls	r3, r3, #2
    5600:	4413      	add	r3, r2
    5602:	009b      	lsls	r3, r3, #2
    5604:	440b      	add	r3, r1
    5606:	3330      	adds	r3, #48	; 0x30
    5608:	78ba      	ldrb	r2, [r7, #2]
    560a:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    560c:	78fb      	ldrb	r3, [r7, #3]
    560e:	2202      	movs	r2, #2
    5610:	4619      	mov	r1, r3
    5612:	6878      	ldr	r0, [r7, #4]
    5614:	4b02      	ldr	r3, [pc, #8]	; (5620 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    5616:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5618:	bf00      	nop
    561a:	3708      	adds	r7, #8
    561c:	46bd      	mov	sp, r7
    561e:	bd80      	pop	{r7, pc}
    5620:	0000553f 	.word	0x0000553f

00005624 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    5624:	b580      	push	{r7, lr}
    5626:	b084      	sub	sp, #16
    5628:	af00      	add	r7, sp, #0
    562a:	60f8      	str	r0, [r7, #12]
    562c:	460b      	mov	r3, r1
    562e:	607a      	str	r2, [r7, #4]
    5630:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    5632:	7afa      	ldrb	r2, [r7, #11]
    5634:	68f9      	ldr	r1, [r7, #12]
    5636:	4613      	mov	r3, r2
    5638:	009b      	lsls	r3, r3, #2
    563a:	4413      	add	r3, r2
    563c:	009b      	lsls	r3, r3, #2
    563e:	440b      	add	r3, r1
    5640:	3334      	adds	r3, #52	; 0x34
    5642:	687a      	ldr	r2, [r7, #4]
    5644:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    5646:	7afb      	ldrb	r3, [r7, #11]
    5648:	2206      	movs	r2, #6
    564a:	4619      	mov	r1, r3
    564c:	68f8      	ldr	r0, [r7, #12]
    564e:	4b03      	ldr	r3, [pc, #12]	; (565c <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    5650:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5652:	bf00      	nop
    5654:	3710      	adds	r7, #16
    5656:	46bd      	mov	sp, r7
    5658:	bd80      	pop	{r7, pc}
    565a:	bf00      	nop
    565c:	0000553f 	.word	0x0000553f

00005660 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    5660:	b480      	push	{r7}
    5662:	b085      	sub	sp, #20
    5664:	af00      	add	r7, sp, #0
    5666:	60f8      	str	r0, [r7, #12]
    5668:	460b      	mov	r3, r1
    566a:	607a      	str	r2, [r7, #4]
    566c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    566e:	7afa      	ldrb	r2, [r7, #11]
    5670:	68f9      	ldr	r1, [r7, #12]
    5672:	4613      	mov	r3, r2
    5674:	009b      	lsls	r3, r3, #2
    5676:	4413      	add	r3, r2
    5678:	009b      	lsls	r3, r3, #2
    567a:	440b      	add	r3, r1
    567c:	3338      	adds	r3, #56	; 0x38
    567e:	687a      	ldr	r2, [r7, #4]
    5680:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5682:	bf00      	nop
    5684:	3714      	adds	r7, #20
    5686:	46bd      	mov	sp, r7
    5688:	f85d 7b04 	ldr.w	r7, [sp], #4
    568c:	4770      	bx	lr

0000568e <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    568e:	b480      	push	{r7}
    5690:	b083      	sub	sp, #12
    5692:	af00      	add	r7, sp, #0
    5694:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    5696:	687b      	ldr	r3, [r7, #4]
    5698:	691b      	ldr	r3, [r3, #16]
    569a:	085b      	lsrs	r3, r3, #1
    569c:	f003 0301 	and.w	r3, r3, #1
    56a0:	2b00      	cmp	r3, #0
    56a2:	bf14      	ite	ne
    56a4:	2301      	movne	r3, #1
    56a6:	2300      	moveq	r3, #0
    56a8:	b2db      	uxtb	r3, r3
}
    56aa:	4618      	mov	r0, r3
    56ac:	370c      	adds	r7, #12
    56ae:	46bd      	mov	sp, r7
    56b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    56b4:	4770      	bx	lr

000056b6 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    56b6:	b480      	push	{r7}
    56b8:	b083      	sub	sp, #12
    56ba:	af00      	add	r7, sp, #0
    56bc:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    56be:	687b      	ldr	r3, [r7, #4]
    56c0:	691b      	ldr	r3, [r3, #16]
    56c2:	0a1b      	lsrs	r3, r3, #8
    56c4:	f003 0301 	and.w	r3, r3, #1
    56c8:	2b00      	cmp	r3, #0
    56ca:	bf14      	ite	ne
    56cc:	2301      	movne	r3, #1
    56ce:	2300      	moveq	r3, #0
    56d0:	b2db      	uxtb	r3, r3
}
    56d2:	4618      	mov	r0, r3
    56d4:	370c      	adds	r7, #12
    56d6:	46bd      	mov	sp, r7
    56d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    56dc:	4770      	bx	lr

000056de <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    56de:	b480      	push	{r7}
    56e0:	b085      	sub	sp, #20
    56e2:	af00      	add	r7, sp, #0
    56e4:	6078      	str	r0, [r7, #4]
    56e6:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    56e8:	687b      	ldr	r3, [r7, #4]
    56ea:	691b      	ldr	r3, [r3, #16]
    56ec:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    56ee:	68fa      	ldr	r2, [r7, #12]
    56f0:	683b      	ldr	r3, [r7, #0]
    56f2:	4013      	ands	r3, r2
    56f4:	60fb      	str	r3, [r7, #12]
	return tmp;
    56f6:	68fb      	ldr	r3, [r7, #12]
}
    56f8:	4618      	mov	r0, r3
    56fa:	3714      	adds	r7, #20
    56fc:	46bd      	mov	sp, r7
    56fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5702:	4770      	bx	lr

00005704 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    5704:	b480      	push	{r7}
    5706:	b085      	sub	sp, #20
    5708:	af00      	add	r7, sp, #0
    570a:	60f8      	str	r0, [r7, #12]
    570c:	460b      	mov	r3, r1
    570e:	607a      	str	r2, [r7, #4]
    5710:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    5712:	7afb      	ldrb	r3, [r7, #11]
    5714:	68fa      	ldr	r2, [r7, #12]
    5716:	3304      	adds	r3, #4
    5718:	009b      	lsls	r3, r3, #2
    571a:	4413      	add	r3, r2
    571c:	687a      	ldr	r2, [r7, #4]
    571e:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5720:	bf00      	nop
    5722:	3714      	adds	r7, #20
    5724:	46bd      	mov	sp, r7
    5726:	f85d 7b04 	ldr.w	r7, [sp], #4
    572a:	4770      	bx	lr

0000572c <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    572c:	b480      	push	{r7}
    572e:	b083      	sub	sp, #12
    5730:	af00      	add	r7, sp, #0
    5732:	6078      	str	r0, [r7, #4]
    5734:	460b      	mov	r3, r1
    5736:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5738:	687b      	ldr	r3, [r7, #4]
    573a:	78fa      	ldrb	r2, [r7, #3]
    573c:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    573e:	bf00      	nop
    5740:	370c      	adds	r7, #12
    5742:	46bd      	mov	sp, r7
    5744:	f85d 7b04 	ldr.w	r7, [sp], #4
    5748:	4770      	bx	lr

0000574a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    574a:	b480      	push	{r7}
    574c:	b085      	sub	sp, #20
    574e:	af00      	add	r7, sp, #0
    5750:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5752:	687b      	ldr	r3, [r7, #4]
    5754:	f893 3020 	ldrb.w	r3, [r3, #32]
    5758:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    575a:	7bfb      	ldrb	r3, [r7, #15]
    575c:	f003 0301 	and.w	r3, r3, #1
    5760:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5762:	7bfb      	ldrb	r3, [r7, #15]
    5764:	2b00      	cmp	r3, #0
    5766:	bf14      	ite	ne
    5768:	2301      	movne	r3, #1
    576a:	2300      	moveq	r3, #0
    576c:	b2db      	uxtb	r3, r3
}
    576e:	4618      	mov	r0, r3
    5770:	3714      	adds	r7, #20
    5772:	46bd      	mov	sp, r7
    5774:	f85d 7b04 	ldr.w	r7, [sp], #4
    5778:	4770      	bx	lr

0000577a <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    577a:	b480      	push	{r7}
    577c:	b083      	sub	sp, #12
    577e:	af00      	add	r7, sp, #0
    5780:	6078      	str	r0, [r7, #4]
    5782:	460b      	mov	r3, r1
    5784:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    5786:	687b      	ldr	r3, [r7, #4]
    5788:	78fa      	ldrb	r2, [r7, #3]
    578a:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    578e:	bf00      	nop
    5790:	370c      	adds	r7, #12
    5792:	46bd      	mov	sp, r7
    5794:	f85d 7b04 	ldr.w	r7, [sp], #4
    5798:	4770      	bx	lr

0000579a <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    579a:	b480      	push	{r7}
    579c:	b083      	sub	sp, #12
    579e:	af00      	add	r7, sp, #0
    57a0:	6078      	str	r0, [r7, #4]
    57a2:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    57a4:	687b      	ldr	r3, [r7, #4]
    57a6:	683a      	ldr	r2, [r7, #0]
    57a8:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    57aa:	bf00      	nop
    57ac:	370c      	adds	r7, #12
    57ae:	46bd      	mov	sp, r7
    57b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    57b4:	4770      	bx	lr

000057b6 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    57b6:	b480      	push	{r7}
    57b8:	b083      	sub	sp, #12
    57ba:	af00      	add	r7, sp, #0
    57bc:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    57be:	687b      	ldr	r3, [r7, #4]
    57c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    57c2:	4618      	mov	r0, r3
    57c4:	370c      	adds	r7, #12
    57c6:	46bd      	mov	sp, r7
    57c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    57cc:	4770      	bx	lr

000057ce <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    57ce:	b480      	push	{r7}
    57d0:	b083      	sub	sp, #12
    57d2:	af00      	add	r7, sp, #0
    57d4:	6078      	str	r0, [r7, #4]
    57d6:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    57d8:	687b      	ldr	r3, [r7, #4]
    57da:	683a      	ldr	r2, [r7, #0]
    57dc:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    57de:	bf00      	nop
    57e0:	370c      	adds	r7, #12
    57e2:	46bd      	mov	sp, r7
    57e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    57e8:	4770      	bx	lr

000057ea <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    57ea:	b480      	push	{r7}
    57ec:	b085      	sub	sp, #20
    57ee:	af00      	add	r7, sp, #0
    57f0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    57f2:	687b      	ldr	r3, [r7, #4]
    57f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    57f8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    57fa:	7bfb      	ldrb	r3, [r7, #15]
    57fc:	085b      	lsrs	r3, r3, #1
    57fe:	b2db      	uxtb	r3, r3
    5800:	f003 0301 	and.w	r3, r3, #1
    5804:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5806:	7bfb      	ldrb	r3, [r7, #15]
    5808:	2b00      	cmp	r3, #0
    580a:	bf14      	ite	ne
    580c:	2301      	movne	r3, #1
    580e:	2300      	moveq	r3, #0
    5810:	b2db      	uxtb	r3, r3
}
    5812:	4618      	mov	r0, r3
    5814:	3714      	adds	r7, #20
    5816:	46bd      	mov	sp, r7
    5818:	f85d 7b04 	ldr.w	r7, [sp], #4
    581c:	4770      	bx	lr

0000581e <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    581e:	b480      	push	{r7}
    5820:	b085      	sub	sp, #20
    5822:	af00      	add	r7, sp, #0
    5824:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5826:	687b      	ldr	r3, [r7, #4]
    5828:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    582c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    582e:	7bfb      	ldrb	r3, [r7, #15]
    5830:	089b      	lsrs	r3, r3, #2
    5832:	b2db      	uxtb	r3, r3
    5834:	f003 0301 	and.w	r3, r3, #1
    5838:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    583a:	7bfb      	ldrb	r3, [r7, #15]
    583c:	2b00      	cmp	r3, #0
    583e:	bf14      	ite	ne
    5840:	2301      	movne	r3, #1
    5842:	2300      	moveq	r3, #0
    5844:	b2db      	uxtb	r3, r3
}
    5846:	4618      	mov	r0, r3
    5848:	3714      	adds	r7, #20
    584a:	46bd      	mov	sp, r7
    584c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5850:	4770      	bx	lr

00005852 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    5852:	b480      	push	{r7}
    5854:	b085      	sub	sp, #20
    5856:	af00      	add	r7, sp, #0
    5858:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    585a:	687b      	ldr	r3, [r7, #4]
    585c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5860:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    5862:	7bfb      	ldrb	r3, [r7, #15]
    5864:	08db      	lsrs	r3, r3, #3
    5866:	b2db      	uxtb	r3, r3
    5868:	f003 0301 	and.w	r3, r3, #1
    586c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    586e:	7bfb      	ldrb	r3, [r7, #15]
    5870:	2b00      	cmp	r3, #0
    5872:	bf14      	ite	ne
    5874:	2301      	movne	r3, #1
    5876:	2300      	moveq	r3, #0
    5878:	b2db      	uxtb	r3, r3
}
    587a:	4618      	mov	r0, r3
    587c:	3714      	adds	r7, #20
    587e:	46bd      	mov	sp, r7
    5880:	f85d 7b04 	ldr.w	r7, [sp], #4
    5884:	4770      	bx	lr

00005886 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    5886:	b480      	push	{r7}
    5888:	b085      	sub	sp, #20
    588a:	af00      	add	r7, sp, #0
    588c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    588e:	687b      	ldr	r3, [r7, #4]
    5890:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5894:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    5896:	7bfb      	ldrb	r3, [r7, #15]
    5898:	091b      	lsrs	r3, r3, #4
    589a:	b2db      	uxtb	r3, r3
    589c:	f003 0301 	and.w	r3, r3, #1
    58a0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    58a2:	7bfb      	ldrb	r3, [r7, #15]
    58a4:	2b00      	cmp	r3, #0
    58a6:	bf14      	ite	ne
    58a8:	2301      	movne	r3, #1
    58aa:	2300      	moveq	r3, #0
    58ac:	b2db      	uxtb	r3, r3
}
    58ae:	4618      	mov	r0, r3
    58b0:	3714      	adds	r7, #20
    58b2:	46bd      	mov	sp, r7
    58b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    58b8:	4770      	bx	lr
	...

000058bc <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    58bc:	b580      	push	{r7, lr}
    58be:	b082      	sub	sp, #8
    58c0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    58c2:	4b0a      	ldr	r3, [pc, #40]	; (58ec <_oscctrl_init_sources+0x30>)
    58c4:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    58c6:	4a0a      	ldr	r2, [pc, #40]	; (58f0 <_oscctrl_init_sources+0x34>)
    58c8:	2101      	movs	r1, #1
    58ca:	6878      	ldr	r0, [r7, #4]
    58cc:	4b09      	ldr	r3, [pc, #36]	; (58f4 <_oscctrl_init_sources+0x38>)
    58ce:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    58d0:	bf00      	nop
    58d2:	6878      	ldr	r0, [r7, #4]
    58d4:	4b08      	ldr	r3, [pc, #32]	; (58f8 <_oscctrl_init_sources+0x3c>)
    58d6:	4798      	blx	r3
    58d8:	4603      	mov	r3, r0
    58da:	f083 0301 	eor.w	r3, r3, #1
    58de:	b2db      	uxtb	r3, r3
    58e0:	2b00      	cmp	r3, #0
    58e2:	d1f6      	bne.n	58d2 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    58e4:	bf00      	nop
    58e6:	3708      	adds	r7, #8
    58e8:	46bd      	mov	sp, r7
    58ea:	bd80      	pop	{r7, pc}
    58ec:	40001000 	.word	0x40001000
    58f0:	03002646 	.word	0x03002646
    58f4:	00005705 	.word	0x00005705
    58f8:	0000568f 	.word	0x0000568f

000058fc <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    58fc:	b580      	push	{r7, lr}
    58fe:	b084      	sub	sp, #16
    5900:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5902:	4b6b      	ldr	r3, [pc, #428]	; (5ab0 <_oscctrl_init_referenced_generators+0x1b4>)
    5904:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    5906:	2204      	movs	r2, #4
    5908:	2100      	movs	r1, #0
    590a:	486a      	ldr	r0, [pc, #424]	; (5ab4 <_oscctrl_init_referenced_generators+0x1b8>)
    590c:	4b6a      	ldr	r3, [pc, #424]	; (5ab8 <_oscctrl_init_referenced_generators+0x1bc>)
    590e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5910:	bf00      	nop
    5912:	4868      	ldr	r0, [pc, #416]	; (5ab4 <_oscctrl_init_referenced_generators+0x1b8>)
    5914:	4b69      	ldr	r3, [pc, #420]	; (5abc <_oscctrl_init_referenced_generators+0x1c0>)
    5916:	4798      	blx	r3
    5918:	4603      	mov	r3, r0
    591a:	2b00      	cmp	r3, #0
    591c:	d1f9      	bne.n	5912 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    591e:	2100      	movs	r1, #0
    5920:	68f8      	ldr	r0, [r7, #12]
    5922:	4b67      	ldr	r3, [pc, #412]	; (5ac0 <_oscctrl_init_referenced_generators+0x1c4>)
    5924:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    5926:	4967      	ldr	r1, [pc, #412]	; (5ac4 <_oscctrl_init_referenced_generators+0x1c8>)
    5928:	68f8      	ldr	r0, [r7, #12]
    592a:	4b67      	ldr	r3, [pc, #412]	; (5ac8 <_oscctrl_init_referenced_generators+0x1cc>)
    592c:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    592e:	bf00      	nop
    5930:	68f8      	ldr	r0, [r7, #12]
    5932:	4b66      	ldr	r3, [pc, #408]	; (5acc <_oscctrl_init_referenced_generators+0x1d0>)
    5934:	4798      	blx	r3
    5936:	4603      	mov	r3, r0
    5938:	2b00      	cmp	r3, #0
    593a:	d1f9      	bne.n	5930 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    593c:	2100      	movs	r1, #0
    593e:	68f8      	ldr	r0, [r7, #12]
    5940:	4b63      	ldr	r3, [pc, #396]	; (5ad0 <_oscctrl_init_referenced_generators+0x1d4>)
    5942:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5944:	bf00      	nop
    5946:	68f8      	ldr	r0, [r7, #12]
    5948:	4b62      	ldr	r3, [pc, #392]	; (5ad4 <_oscctrl_init_referenced_generators+0x1d8>)
    594a:	4798      	blx	r3
    594c:	4603      	mov	r3, r0
    594e:	2b00      	cmp	r3, #0
    5950:	d1f9      	bne.n	5946 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    5952:	2302      	movs	r3, #2
    5954:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    5956:	7afb      	ldrb	r3, [r7, #11]
    5958:	4619      	mov	r1, r3
    595a:	68f8      	ldr	r0, [r7, #12]
    595c:	4b58      	ldr	r3, [pc, #352]	; (5ac0 <_oscctrl_init_referenced_generators+0x1c4>)
    595e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5960:	bf00      	nop
    5962:	68f8      	ldr	r0, [r7, #12]
    5964:	4b5c      	ldr	r3, [pc, #368]	; (5ad8 <_oscctrl_init_referenced_generators+0x1dc>)
    5966:	4798      	blx	r3
    5968:	4603      	mov	r3, r0
    596a:	2b00      	cmp	r3, #0
    596c:	d1f9      	bne.n	5962 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    596e:	68f8      	ldr	r0, [r7, #12]
    5970:	4b5a      	ldr	r3, [pc, #360]	; (5adc <_oscctrl_init_referenced_generators+0x1e0>)
    5972:	4798      	blx	r3
    5974:	4603      	mov	r3, r0
    5976:	4619      	mov	r1, r3
    5978:	68f8      	ldr	r0, [r7, #12]
    597a:	4b59      	ldr	r3, [pc, #356]	; (5ae0 <_oscctrl_init_referenced_generators+0x1e4>)
    597c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    597e:	bf00      	nop
    5980:	68f8      	ldr	r0, [r7, #12]
    5982:	4b58      	ldr	r3, [pc, #352]	; (5ae4 <_oscctrl_init_referenced_generators+0x1e8>)
    5984:	4798      	blx	r3
    5986:	4603      	mov	r3, r0
    5988:	2b00      	cmp	r3, #0
    598a:	d1f9      	bne.n	5980 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    598c:	2319      	movs	r3, #25
    598e:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5990:	7afb      	ldrb	r3, [r7, #11]
    5992:	4619      	mov	r1, r3
    5994:	68f8      	ldr	r0, [r7, #12]
    5996:	4b4e      	ldr	r3, [pc, #312]	; (5ad0 <_oscctrl_init_referenced_generators+0x1d4>)
    5998:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    599a:	bf00      	nop
    599c:	68f8      	ldr	r0, [r7, #12]
    599e:	4b4d      	ldr	r3, [pc, #308]	; (5ad4 <_oscctrl_init_referenced_generators+0x1d8>)
    59a0:	4798      	blx	r3
    59a2:	4603      	mov	r3, r0
    59a4:	2b00      	cmp	r3, #0
    59a6:	d1f9      	bne.n	599c <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    59a8:	2245      	movs	r2, #69	; 0x45
    59aa:	2101      	movs	r1, #1
    59ac:	4841      	ldr	r0, [pc, #260]	; (5ab4 <_oscctrl_init_referenced_generators+0x1b8>)
    59ae:	4b4e      	ldr	r3, [pc, #312]	; (5ae8 <_oscctrl_init_referenced_generators+0x1ec>)
    59b0:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    59b2:	223b      	movs	r2, #59	; 0x3b
    59b4:	2100      	movs	r1, #0
    59b6:	68f8      	ldr	r0, [r7, #12]
    59b8:	4b4c      	ldr	r3, [pc, #304]	; (5aec <_oscctrl_init_referenced_generators+0x1f0>)
    59ba:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    59bc:	f44f 6201 	mov.w	r2, #2064	; 0x810
    59c0:	2100      	movs	r1, #0
    59c2:	68f8      	ldr	r0, [r7, #12]
    59c4:	4b4a      	ldr	r3, [pc, #296]	; (5af0 <_oscctrl_init_referenced_generators+0x1f4>)
    59c6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    59c8:	2242      	movs	r2, #66	; 0x42
    59ca:	2100      	movs	r1, #0
    59cc:	68f8      	ldr	r0, [r7, #12]
    59ce:	4b49      	ldr	r3, [pc, #292]	; (5af4 <_oscctrl_init_referenced_generators+0x1f8>)
    59d0:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    59d2:	4a49      	ldr	r2, [pc, #292]	; (5af8 <_oscctrl_init_referenced_generators+0x1fc>)
    59d4:	2101      	movs	r1, #1
    59d6:	68f8      	ldr	r0, [r7, #12]
    59d8:	4b44      	ldr	r3, [pc, #272]	; (5aec <_oscctrl_init_referenced_generators+0x1f0>)
    59da:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    59dc:	f44f 6203 	mov.w	r2, #2096	; 0x830
    59e0:	2101      	movs	r1, #1
    59e2:	68f8      	ldr	r0, [r7, #12]
    59e4:	4b42      	ldr	r3, [pc, #264]	; (5af0 <_oscctrl_init_referenced_generators+0x1f4>)
    59e6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    59e8:	2202      	movs	r2, #2
    59ea:	2101      	movs	r1, #1
    59ec:	68f8      	ldr	r0, [r7, #12]
    59ee:	4b41      	ldr	r3, [pc, #260]	; (5af4 <_oscctrl_init_referenced_generators+0x1f8>)
    59f0:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    59f2:	68f8      	ldr	r0, [r7, #12]
    59f4:	4b41      	ldr	r3, [pc, #260]	; (5afc <_oscctrl_init_referenced_generators+0x200>)
    59f6:	4798      	blx	r3
    59f8:	4603      	mov	r3, r0
    59fa:	2b00      	cmp	r3, #0
    59fc:	d00c      	beq.n	5a18 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    59fe:	f44f 6310 	mov.w	r3, #2304	; 0x900
    5a02:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    5a04:	bf00      	nop
    5a06:	6879      	ldr	r1, [r7, #4]
    5a08:	68f8      	ldr	r0, [r7, #12]
    5a0a:	4b3d      	ldr	r3, [pc, #244]	; (5b00 <_oscctrl_init_referenced_generators+0x204>)
    5a0c:	4798      	blx	r3
    5a0e:	4602      	mov	r2, r0
    5a10:	687b      	ldr	r3, [r7, #4]
    5a12:	429a      	cmp	r2, r3
    5a14:	d1f7      	bne.n	5a06 <_oscctrl_init_referenced_generators+0x10a>
    5a16:	e009      	b.n	5a2c <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5a18:	bf00      	nop
    5a1a:	68f8      	ldr	r0, [r7, #12]
    5a1c:	4b39      	ldr	r3, [pc, #228]	; (5b04 <_oscctrl_init_referenced_generators+0x208>)
    5a1e:	4798      	blx	r3
    5a20:	4603      	mov	r3, r0
    5a22:	f083 0301 	eor.w	r3, r3, #1
    5a26:	b2db      	uxtb	r3, r3
    5a28:	2b00      	cmp	r3, #0
    5a2a:	d1f6      	bne.n	5a1a <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    5a2c:	bf00      	nop
    5a2e:	2100      	movs	r1, #0
    5a30:	68f8      	ldr	r0, [r7, #12]
    5a32:	4b35      	ldr	r3, [pc, #212]	; (5b08 <_oscctrl_init_referenced_generators+0x20c>)
    5a34:	4798      	blx	r3
    5a36:	4603      	mov	r3, r0
    5a38:	f083 0301 	eor.w	r3, r3, #1
    5a3c:	b2db      	uxtb	r3, r3
    5a3e:	2b00      	cmp	r3, #0
    5a40:	d009      	beq.n	5a56 <_oscctrl_init_referenced_generators+0x15a>
    5a42:	2100      	movs	r1, #0
    5a44:	68f8      	ldr	r0, [r7, #12]
    5a46:	4b31      	ldr	r3, [pc, #196]	; (5b0c <_oscctrl_init_referenced_generators+0x210>)
    5a48:	4798      	blx	r3
    5a4a:	4603      	mov	r3, r0
    5a4c:	f083 0301 	eor.w	r3, r3, #1
    5a50:	b2db      	uxtb	r3, r3
    5a52:	2b00      	cmp	r3, #0
    5a54:	d1eb      	bne.n	5a2e <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5a56:	bf00      	nop
    5a58:	2101      	movs	r1, #1
    5a5a:	68f8      	ldr	r0, [r7, #12]
    5a5c:	4b2a      	ldr	r3, [pc, #168]	; (5b08 <_oscctrl_init_referenced_generators+0x20c>)
    5a5e:	4798      	blx	r3
    5a60:	4603      	mov	r3, r0
    5a62:	f083 0301 	eor.w	r3, r3, #1
    5a66:	b2db      	uxtb	r3, r3
    5a68:	2b00      	cmp	r3, #0
    5a6a:	d009      	beq.n	5a80 <_oscctrl_init_referenced_generators+0x184>
    5a6c:	2101      	movs	r1, #1
    5a6e:	68f8      	ldr	r0, [r7, #12]
    5a70:	4b26      	ldr	r3, [pc, #152]	; (5b0c <_oscctrl_init_referenced_generators+0x210>)
    5a72:	4798      	blx	r3
    5a74:	4603      	mov	r3, r0
    5a76:	f083 0301 	eor.w	r3, r3, #1
    5a7a:	b2db      	uxtb	r3, r3
    5a7c:	2b00      	cmp	r3, #0
    5a7e:	d1eb      	bne.n	5a58 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5a80:	bf00      	nop
    5a82:	480c      	ldr	r0, [pc, #48]	; (5ab4 <_oscctrl_init_referenced_generators+0x1b8>)
    5a84:	4b22      	ldr	r3, [pc, #136]	; (5b10 <_oscctrl_init_referenced_generators+0x214>)
    5a86:	4798      	blx	r3
    5a88:	4603      	mov	r3, r0
    5a8a:	2b00      	cmp	r3, #0
    5a8c:	d1f9      	bne.n	5a82 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5a8e:	2207      	movs	r2, #7
    5a90:	2100      	movs	r1, #0
    5a92:	4808      	ldr	r0, [pc, #32]	; (5ab4 <_oscctrl_init_referenced_generators+0x1b8>)
    5a94:	4b08      	ldr	r3, [pc, #32]	; (5ab8 <_oscctrl_init_referenced_generators+0x1bc>)
    5a96:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5a98:	bf00      	nop
    5a9a:	4806      	ldr	r0, [pc, #24]	; (5ab4 <_oscctrl_init_referenced_generators+0x1b8>)
    5a9c:	4b07      	ldr	r3, [pc, #28]	; (5abc <_oscctrl_init_referenced_generators+0x1c0>)
    5a9e:	4798      	blx	r3
    5aa0:	4603      	mov	r3, r0
    5aa2:	2b00      	cmp	r3, #0
    5aa4:	d1f9      	bne.n	5a9a <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    5aa6:	bf00      	nop
    5aa8:	3710      	adds	r7, #16
    5aaa:	46bd      	mov	sp, r7
    5aac:	bd80      	pop	{r7, pc}
    5aae:	bf00      	nop
    5ab0:	40001000 	.word	0x40001000
    5ab4:	40001c00 	.word	0x40001c00
    5ab8:	000054c9 	.word	0x000054c9
    5abc:	00005489 	.word	0x00005489
    5ac0:	0000572d 	.word	0x0000572d
    5ac4:	0401bb80 	.word	0x0401bb80
    5ac8:	000057cf 	.word	0x000057cf
    5acc:	00005887 	.word	0x00005887
    5ad0:	0000577b 	.word	0x0000577b
    5ad4:	0000581f 	.word	0x0000581f
    5ad8:	000057eb 	.word	0x000057eb
    5adc:	000057b7 	.word	0x000057b7
    5ae0:	0000579b 	.word	0x0000579b
    5ae4:	00005853 	.word	0x00005853
    5ae8:	00005519 	.word	0x00005519
    5aec:	00005625 	.word	0x00005625
    5af0:	00005661 	.word	0x00005661
    5af4:	000055e9 	.word	0x000055e9
    5af8:	000407a0 	.word	0x000407a0
    5afc:	0000574b 	.word	0x0000574b
    5b00:	000056df 	.word	0x000056df
    5b04:	000056b7 	.word	0x000056b7
    5b08:	00005575 	.word	0x00005575
    5b0c:	000055ad 	.word	0x000055ad
    5b10:	000054b1 	.word	0x000054b1

00005b14 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    5b14:	b480      	push	{r7}
    5b16:	b083      	sub	sp, #12
    5b18:	af00      	add	r7, sp, #0
    5b1a:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    5b1c:	687b      	ldr	r3, [r7, #4]
    5b1e:	69db      	ldr	r3, [r3, #28]
    5b20:	0a9b      	lsrs	r3, r3, #10
    5b22:	f003 0301 	and.w	r3, r3, #1
    5b26:	2b00      	cmp	r3, #0
    5b28:	bf14      	ite	ne
    5b2a:	2301      	movne	r3, #1
    5b2c:	2300      	moveq	r3, #0
    5b2e:	b2db      	uxtb	r3, r3
}
    5b30:	4618      	mov	r0, r3
    5b32:	370c      	adds	r7, #12
    5b34:	46bd      	mov	sp, r7
    5b36:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b3a:	4770      	bx	lr

00005b3c <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5b3c:	b480      	push	{r7}
    5b3e:	b083      	sub	sp, #12
    5b40:	af00      	add	r7, sp, #0
    5b42:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5b44:	687b      	ldr	r3, [r7, #4]
    5b46:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5b4a:	61da      	str	r2, [r3, #28]
}
    5b4c:	bf00      	nop
    5b4e:	370c      	adds	r7, #12
    5b50:	46bd      	mov	sp, r7
    5b52:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b56:	4770      	bx	lr

00005b58 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5b58:	b480      	push	{r7}
    5b5a:	b083      	sub	sp, #12
    5b5c:	af00      	add	r7, sp, #0
    5b5e:	6078      	str	r0, [r7, #4]
    5b60:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    5b62:	687b      	ldr	r3, [r7, #4]
    5b64:	683a      	ldr	r2, [r7, #0]
    5b66:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5b68:	bf00      	nop
    5b6a:	370c      	adds	r7, #12
    5b6c:	46bd      	mov	sp, r7
    5b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b72:	4770      	bx	lr

00005b74 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5b74:	b480      	push	{r7}
    5b76:	b083      	sub	sp, #12
    5b78:	af00      	add	r7, sp, #0
    5b7a:	6078      	str	r0, [r7, #4]
    5b7c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5b7e:	687b      	ldr	r3, [r7, #4]
    5b80:	683a      	ldr	r2, [r7, #0]
    5b82:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5b84:	bf00      	nop
    5b86:	370c      	adds	r7, #12
    5b88:	46bd      	mov	sp, r7
    5b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b8e:	4770      	bx	lr

00005b90 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5b90:	b480      	push	{r7}
    5b92:	b083      	sub	sp, #12
    5b94:	af00      	add	r7, sp, #0
    5b96:	6078      	str	r0, [r7, #4]
    5b98:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5b9a:	687b      	ldr	r3, [r7, #4]
    5b9c:	683a      	ldr	r2, [r7, #0]
    5b9e:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5ba0:	bf00      	nop
    5ba2:	370c      	adds	r7, #12
    5ba4:	46bd      	mov	sp, r7
    5ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5baa:	4770      	bx	lr

00005bac <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5bac:	b480      	push	{r7}
    5bae:	b083      	sub	sp, #12
    5bb0:	af00      	add	r7, sp, #0
    5bb2:	6078      	str	r0, [r7, #4]
    5bb4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    5bb6:	687b      	ldr	r3, [r7, #4]
    5bb8:	683a      	ldr	r2, [r7, #0]
    5bba:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5bbc:	bf00      	nop
    5bbe:	370c      	adds	r7, #12
    5bc0:	46bd      	mov	sp, r7
    5bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bc6:	4770      	bx	lr

00005bc8 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5bc8:	b480      	push	{r7}
    5bca:	b085      	sub	sp, #20
    5bcc:	af00      	add	r7, sp, #0
    5bce:	6078      	str	r0, [r7, #4]
    5bd0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5bd2:	687b      	ldr	r3, [r7, #4]
    5bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5bd6:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5bd8:	68fb      	ldr	r3, [r7, #12]
    5bda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5bde:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5be0:	683b      	ldr	r3, [r7, #0]
    5be2:	b2db      	uxtb	r3, r3
    5be4:	68fa      	ldr	r2, [r7, #12]
    5be6:	4313      	orrs	r3, r2
    5be8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5bea:	687b      	ldr	r3, [r7, #4]
    5bec:	68fa      	ldr	r2, [r7, #12]
    5bee:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5bf0:	bf00      	nop
    5bf2:	3714      	adds	r7, #20
    5bf4:	46bd      	mov	sp, r7
    5bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bfa:	4770      	bx	lr

00005bfc <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5bfc:	b480      	push	{r7}
    5bfe:	b085      	sub	sp, #20
    5c00:	af00      	add	r7, sp, #0
    5c02:	6078      	str	r0, [r7, #4]
    5c04:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5c06:	687b      	ldr	r3, [r7, #4]
    5c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5c0a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    5c0c:	68fb      	ldr	r3, [r7, #12]
    5c0e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    5c12:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    5c14:	683b      	ldr	r3, [r7, #0]
    5c16:	041b      	lsls	r3, r3, #16
    5c18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    5c1c:	68fa      	ldr	r2, [r7, #12]
    5c1e:	4313      	orrs	r3, r2
    5c20:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5c22:	687b      	ldr	r3, [r7, #4]
    5c24:	68fa      	ldr	r2, [r7, #12]
    5c26:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5c28:	bf00      	nop
    5c2a:	3714      	adds	r7, #20
    5c2c:	46bd      	mov	sp, r7
    5c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c32:	4770      	bx	lr

00005c34 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    5c34:	b480      	push	{r7}
    5c36:	b083      	sub	sp, #12
    5c38:	af00      	add	r7, sp, #0
    5c3a:	6078      	str	r0, [r7, #4]
    5c3c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    5c3e:	687b      	ldr	r3, [r7, #4]
    5c40:	683a      	ldr	r2, [r7, #0]
    5c42:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5c44:	bf00      	nop
    5c46:	370c      	adds	r7, #12
    5c48:	46bd      	mov	sp, r7
    5c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c4e:	4770      	bx	lr

00005c50 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5c50:	b480      	push	{r7}
    5c52:	b083      	sub	sp, #12
    5c54:	af00      	add	r7, sp, #0
    5c56:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5c58:	687b      	ldr	r3, [r7, #4]
    5c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5c5c:	4618      	mov	r0, r3
    5c5e:	370c      	adds	r7, #12
    5c60:	46bd      	mov	sp, r7
    5c62:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c66:	4770      	bx	lr

00005c68 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5c68:	b480      	push	{r7}
    5c6a:	b085      	sub	sp, #20
    5c6c:	af00      	add	r7, sp, #0
    5c6e:	60f8      	str	r0, [r7, #12]
    5c70:	60b9      	str	r1, [r7, #8]
    5c72:	607a      	str	r2, [r7, #4]
	while (count--) {
    5c74:	e007      	b.n	5c86 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    5c76:	68fb      	ldr	r3, [r7, #12]
    5c78:	1c5a      	adds	r2, r3, #1
    5c7a:	60fa      	str	r2, [r7, #12]
    5c7c:	68ba      	ldr	r2, [r7, #8]
    5c7e:	1c51      	adds	r1, r2, #1
    5c80:	60b9      	str	r1, [r7, #8]
    5c82:	7812      	ldrb	r2, [r2, #0]
    5c84:	701a      	strb	r2, [r3, #0]
	while (count--) {
    5c86:	687b      	ldr	r3, [r7, #4]
    5c88:	1e5a      	subs	r2, r3, #1
    5c8a:	607a      	str	r2, [r7, #4]
    5c8c:	2b00      	cmp	r3, #0
    5c8e:	d1f2      	bne.n	5c76 <_qspi_memcpy+0xe>
	}
}
    5c90:	bf00      	nop
    5c92:	3714      	adds	r7, #20
    5c94:	46bd      	mov	sp, r7
    5c96:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c9a:	4770      	bx	lr

00005c9c <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5c9c:	b580      	push	{r7, lr}
    5c9e:	b082      	sub	sp, #8
    5ca0:	af00      	add	r7, sp, #0
    5ca2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5ca4:	4903      	ldr	r1, [pc, #12]	; (5cb4 <_qspi_end_transfer+0x18>)
    5ca6:	6878      	ldr	r0, [r7, #4]
    5ca8:	4b03      	ldr	r3, [pc, #12]	; (5cb8 <_qspi_end_transfer+0x1c>)
    5caa:	4798      	blx	r3
}
    5cac:	bf00      	nop
    5cae:	3708      	adds	r7, #8
    5cb0:	46bd      	mov	sp, r7
    5cb2:	bd80      	pop	{r7, pc}
    5cb4:	01000002 	.word	0x01000002
    5cb8:	00005b59 	.word	0x00005b59

00005cbc <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5cbc:	b580      	push	{r7, lr}
    5cbe:	b082      	sub	sp, #8
    5cc0:	af00      	add	r7, sp, #0
    5cc2:	6078      	str	r0, [r7, #4]
    5cc4:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    5cc6:	687b      	ldr	r3, [r7, #4]
    5cc8:	2b00      	cmp	r3, #0
    5cca:	d004      	beq.n	5cd6 <_qspi_sync_init+0x1a>
    5ccc:	683b      	ldr	r3, [r7, #0]
    5cce:	2b00      	cmp	r3, #0
    5cd0:	d001      	beq.n	5cd6 <_qspi_sync_init+0x1a>
    5cd2:	2301      	movs	r3, #1
    5cd4:	e000      	b.n	5cd8 <_qspi_sync_init+0x1c>
    5cd6:	2300      	movs	r3, #0
    5cd8:	f003 0301 	and.w	r3, r3, #1
    5cdc:	b2db      	uxtb	r3, r3
    5cde:	2240      	movs	r2, #64	; 0x40
    5ce0:	490c      	ldr	r1, [pc, #48]	; (5d14 <_qspi_sync_init+0x58>)
    5ce2:	4618      	mov	r0, r3
    5ce4:	4b0c      	ldr	r3, [pc, #48]	; (5d18 <_qspi_sync_init+0x5c>)
    5ce6:	4798      	blx	r3
	dev->prvt = hw;
    5ce8:	687b      	ldr	r3, [r7, #4]
    5cea:	683a      	ldr	r2, [r7, #0]
    5cec:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    5cee:	687b      	ldr	r3, [r7, #4]
    5cf0:	681b      	ldr	r3, [r3, #0]
    5cf2:	2101      	movs	r1, #1
    5cf4:	4618      	mov	r0, r3
    5cf6:	4b09      	ldr	r3, [pc, #36]	; (5d1c <_qspi_sync_init+0x60>)
    5cf8:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    5cfa:	4909      	ldr	r1, [pc, #36]	; (5d20 <_qspi_sync_init+0x64>)
    5cfc:	6838      	ldr	r0, [r7, #0]
    5cfe:	4b09      	ldr	r3, [pc, #36]	; (5d24 <_qspi_sync_init+0x68>)
    5d00:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    5d02:	4909      	ldr	r1, [pc, #36]	; (5d28 <_qspi_sync_init+0x6c>)
    5d04:	6838      	ldr	r0, [r7, #0]
    5d06:	4b09      	ldr	r3, [pc, #36]	; (5d2c <_qspi_sync_init+0x70>)
    5d08:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    5d0a:	2300      	movs	r3, #0
}
    5d0c:	4618      	mov	r0, r3
    5d0e:	3708      	adds	r7, #8
    5d10:	46bd      	mov	sp, r7
    5d12:	bd80      	pop	{r7, pc}
    5d14:	000110f4 	.word	0x000110f4
    5d18:	00003cd5 	.word	0x00003cd5
    5d1c:	00005b59 	.word	0x00005b59
    5d20:	06000011 	.word	0x06000011
    5d24:	00005b75 	.word	0x00005b75
    5d28:	00241300 	.word	0x00241300
    5d2c:	00005b91 	.word	0x00005b91

00005d30 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    5d30:	b580      	push	{r7, lr}
    5d32:	b082      	sub	sp, #8
    5d34:	af00      	add	r7, sp, #0
    5d36:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5d38:	687b      	ldr	r3, [r7, #4]
    5d3a:	681b      	ldr	r3, [r3, #0]
    5d3c:	2102      	movs	r1, #2
    5d3e:	4618      	mov	r0, r3
    5d40:	4b03      	ldr	r3, [pc, #12]	; (5d50 <_qspi_sync_enable+0x20>)
    5d42:	4798      	blx	r3
	return ERR_NONE;
    5d44:	2300      	movs	r3, #0
}
    5d46:	4618      	mov	r0, r3
    5d48:	3708      	adds	r7, #8
    5d4a:	46bd      	mov	sp, r7
    5d4c:	bd80      	pop	{r7, pc}
    5d4e:	bf00      	nop
    5d50:	00005b59 	.word	0x00005b59

00005d54 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5d54:	b580      	push	{r7, lr}
    5d56:	b082      	sub	sp, #8
    5d58:	af00      	add	r7, sp, #0
    5d5a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5d5c:	687b      	ldr	r3, [r7, #4]
    5d5e:	681b      	ldr	r3, [r3, #0]
    5d60:	2100      	movs	r1, #0
    5d62:	4618      	mov	r0, r3
    5d64:	4b03      	ldr	r3, [pc, #12]	; (5d74 <_qspi_sync_disable+0x20>)
    5d66:	4798      	blx	r3
	return ERR_NONE;
    5d68:	2300      	movs	r3, #0
}
    5d6a:	4618      	mov	r0, r3
    5d6c:	3708      	adds	r7, #8
    5d6e:	46bd      	mov	sp, r7
    5d70:	bd80      	pop	{r7, pc}
    5d72:	bf00      	nop
    5d74:	00005b59 	.word	0x00005b59

00005d78 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5d78:	b580      	push	{r7, lr}
    5d7a:	b084      	sub	sp, #16
    5d7c:	af00      	add	r7, sp, #0
    5d7e:	6078      	str	r0, [r7, #4]
    5d80:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    5d82:	687b      	ldr	r3, [r7, #4]
    5d84:	681b      	ldr	r3, [r3, #0]
    5d86:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5d88:	683b      	ldr	r3, [r7, #0]
    5d8a:	781b      	ldrb	r3, [r3, #0]
    5d8c:	f003 0320 	and.w	r3, r3, #32
    5d90:	b2db      	uxtb	r3, r3
    5d92:	2b00      	cmp	r3, #0
    5d94:	d005      	beq.n	5da2 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    5d96:	683b      	ldr	r3, [r7, #0]
    5d98:	689b      	ldr	r3, [r3, #8]
    5d9a:	4619      	mov	r1, r3
    5d9c:	68f8      	ldr	r0, [r7, #12]
    5d9e:	4b13      	ldr	r3, [pc, #76]	; (5dec <_qspi_sync_command_set_ifr+0x74>)
    5da0:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    5da2:	683b      	ldr	r3, [r7, #0]
    5da4:	781b      	ldrb	r3, [r3, #0]
    5da6:	f003 0310 	and.w	r3, r3, #16
    5daa:	b2db      	uxtb	r3, r3
    5dac:	2b00      	cmp	r3, #0
    5dae:	d005      	beq.n	5dbc <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5db0:	683b      	ldr	r3, [r7, #0]
    5db2:	791b      	ldrb	r3, [r3, #4]
    5db4:	4619      	mov	r1, r3
    5db6:	68f8      	ldr	r0, [r7, #12]
    5db8:	4b0d      	ldr	r3, [pc, #52]	; (5df0 <_qspi_sync_command_set_ifr+0x78>)
    5dba:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5dbc:	683b      	ldr	r3, [r7, #0]
    5dbe:	781b      	ldrb	r3, [r3, #0]
    5dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5dc4:	b2db      	uxtb	r3, r3
    5dc6:	2b00      	cmp	r3, #0
    5dc8:	d005      	beq.n	5dd6 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5dca:	683b      	ldr	r3, [r7, #0]
    5dcc:	795b      	ldrb	r3, [r3, #5]
    5dce:	4619      	mov	r1, r3
    5dd0:	68f8      	ldr	r0, [r7, #12]
    5dd2:	4b08      	ldr	r3, [pc, #32]	; (5df4 <_qspi_sync_command_set_ifr+0x7c>)
    5dd4:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5dd6:	683b      	ldr	r3, [r7, #0]
    5dd8:	681b      	ldr	r3, [r3, #0]
    5dda:	4619      	mov	r1, r3
    5ddc:	68f8      	ldr	r0, [r7, #12]
    5dde:	4b06      	ldr	r3, [pc, #24]	; (5df8 <_qspi_sync_command_set_ifr+0x80>)
    5de0:	4798      	blx	r3
}
    5de2:	bf00      	nop
    5de4:	3710      	adds	r7, #16
    5de6:	46bd      	mov	sp, r7
    5de8:	bd80      	pop	{r7, pc}
    5dea:	bf00      	nop
    5dec:	00005bad 	.word	0x00005bad
    5df0:	00005bc9 	.word	0x00005bc9
    5df4:	00005bfd 	.word	0x00005bfd
    5df8:	00005c35 	.word	0x00005c35

00005dfc <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5dfc:	b580      	push	{r7, lr}
    5dfe:	b084      	sub	sp, #16
    5e00:	af00      	add	r7, sp, #0
    5e02:	6078      	str	r0, [r7, #4]
    5e04:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    5e06:	687b      	ldr	r3, [r7, #4]
    5e08:	681b      	ldr	r3, [r3, #0]
    5e0a:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5e0c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5e10:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    5e12:	683b      	ldr	r3, [r7, #0]
    5e14:	781b      	ldrb	r3, [r3, #0]
    5e16:	f003 0320 	and.w	r3, r3, #32
    5e1a:	b2db      	uxtb	r3, r3
    5e1c:	2b00      	cmp	r3, #0
    5e1e:	d004      	beq.n	5e2a <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5e20:	683b      	ldr	r3, [r7, #0]
    5e22:	689b      	ldr	r3, [r3, #8]
    5e24:	68fa      	ldr	r2, [r7, #12]
    5e26:	4413      	add	r3, r2
    5e28:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5e2a:	68b8      	ldr	r0, [r7, #8]
    5e2c:	4b18      	ldr	r3, [pc, #96]	; (5e90 <_qspi_sync_run_transfer+0x94>)
    5e2e:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5e30:	683b      	ldr	r3, [r7, #0]
    5e32:	691b      	ldr	r3, [r3, #16]
    5e34:	2b00      	cmp	r3, #0
    5e36:	d103      	bne.n	5e40 <_qspi_sync_run_transfer+0x44>
    5e38:	683b      	ldr	r3, [r7, #0]
    5e3a:	695b      	ldr	r3, [r3, #20]
    5e3c:	2b00      	cmp	r3, #0
    5e3e:	d001      	beq.n	5e44 <_qspi_sync_run_transfer+0x48>
    5e40:	2301      	movs	r3, #1
    5e42:	e000      	b.n	5e46 <_qspi_sync_run_transfer+0x4a>
    5e44:	2300      	movs	r3, #0
    5e46:	f003 0301 	and.w	r3, r3, #1
    5e4a:	b2db      	uxtb	r3, r3
    5e4c:	2282      	movs	r2, #130	; 0x82
    5e4e:	4911      	ldr	r1, [pc, #68]	; (5e94 <_qspi_sync_run_transfer+0x98>)
    5e50:	4618      	mov	r0, r3
    5e52:	4b11      	ldr	r3, [pc, #68]	; (5e98 <_qspi_sync_run_transfer+0x9c>)
    5e54:	4798      	blx	r3

	if (cmd->tx_buf) {
    5e56:	683b      	ldr	r3, [r7, #0]
    5e58:	691b      	ldr	r3, [r3, #16]
    5e5a:	2b00      	cmp	r3, #0
    5e5c:	d008      	beq.n	5e70 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5e5e:	683b      	ldr	r3, [r7, #0]
    5e60:	6919      	ldr	r1, [r3, #16]
    5e62:	683b      	ldr	r3, [r7, #0]
    5e64:	68db      	ldr	r3, [r3, #12]
    5e66:	461a      	mov	r2, r3
    5e68:	68f8      	ldr	r0, [r7, #12]
    5e6a:	4b0c      	ldr	r3, [pc, #48]	; (5e9c <_qspi_sync_run_transfer+0xa0>)
    5e6c:	4798      	blx	r3
    5e6e:	e007      	b.n	5e80 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5e70:	683b      	ldr	r3, [r7, #0]
    5e72:	6958      	ldr	r0, [r3, #20]
    5e74:	683b      	ldr	r3, [r7, #0]
    5e76:	68db      	ldr	r3, [r3, #12]
    5e78:	461a      	mov	r2, r3
    5e7a:	68f9      	ldr	r1, [r7, #12]
    5e7c:	4b07      	ldr	r3, [pc, #28]	; (5e9c <_qspi_sync_run_transfer+0xa0>)
    5e7e:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5e80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5e84:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5e88:	bf00      	nop
    5e8a:	3710      	adds	r7, #16
    5e8c:	46bd      	mov	sp, r7
    5e8e:	bd80      	pop	{r7, pc}
    5e90:	00005c51 	.word	0x00005c51
    5e94:	000110f4 	.word	0x000110f4
    5e98:	00003cd5 	.word	0x00003cd5
    5e9c:	00005c69 	.word	0x00005c69

00005ea0 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5ea0:	b580      	push	{r7, lr}
    5ea2:	b082      	sub	sp, #8
    5ea4:	af00      	add	r7, sp, #0
    5ea6:	6078      	str	r0, [r7, #4]
    5ea8:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5eaa:	6839      	ldr	r1, [r7, #0]
    5eac:	6878      	ldr	r0, [r7, #4]
    5eae:	4b14      	ldr	r3, [pc, #80]	; (5f00 <_qspi_sync_serial_run_command+0x60>)
    5eb0:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    5eb2:	683b      	ldr	r3, [r7, #0]
    5eb4:	781b      	ldrb	r3, [r3, #0]
    5eb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5eba:	b2db      	uxtb	r3, r3
    5ebc:	2b00      	cmp	r3, #0
    5ebe:	d003      	beq.n	5ec8 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5ec0:	6839      	ldr	r1, [r7, #0]
    5ec2:	6878      	ldr	r0, [r7, #4]
    5ec4:	4b0f      	ldr	r3, [pc, #60]	; (5f04 <_qspi_sync_serial_run_command+0x64>)
    5ec6:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5ec8:	687b      	ldr	r3, [r7, #4]
    5eca:	681b      	ldr	r3, [r3, #0]
    5ecc:	4618      	mov	r0, r3
    5ece:	4b0e      	ldr	r3, [pc, #56]	; (5f08 <_qspi_sync_serial_run_command+0x68>)
    5ed0:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    5ed2:	bf00      	nop
    5ed4:	687b      	ldr	r3, [r7, #4]
    5ed6:	681b      	ldr	r3, [r3, #0]
    5ed8:	4618      	mov	r0, r3
    5eda:	4b0c      	ldr	r3, [pc, #48]	; (5f0c <_qspi_sync_serial_run_command+0x6c>)
    5edc:	4798      	blx	r3
    5ede:	4603      	mov	r3, r0
    5ee0:	f083 0301 	eor.w	r3, r3, #1
    5ee4:	b2db      	uxtb	r3, r3
    5ee6:	2b00      	cmp	r3, #0
    5ee8:	d1f4      	bne.n	5ed4 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    5eea:	687b      	ldr	r3, [r7, #4]
    5eec:	681b      	ldr	r3, [r3, #0]
    5eee:	4618      	mov	r0, r3
    5ef0:	4b07      	ldr	r3, [pc, #28]	; (5f10 <_qspi_sync_serial_run_command+0x70>)
    5ef2:	4798      	blx	r3
	return ERR_NONE;
    5ef4:	2300      	movs	r3, #0
}
    5ef6:	4618      	mov	r0, r3
    5ef8:	3708      	adds	r7, #8
    5efa:	46bd      	mov	sp, r7
    5efc:	bd80      	pop	{r7, pc}
    5efe:	bf00      	nop
    5f00:	00005d79 	.word	0x00005d79
    5f04:	00005dfd 	.word	0x00005dfd
    5f08:	00005c9d 	.word	0x00005c9d
    5f0c:	00005b15 	.word	0x00005b15
    5f10:	00005b3d 	.word	0x00005b3d

00005f14 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    5f14:	b480      	push	{r7}
    5f16:	b083      	sub	sp, #12
    5f18:	af00      	add	r7, sp, #0
    5f1a:	6078      	str	r0, [r7, #4]
    5f1c:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5f1e:	bf00      	nop
    5f20:	687b      	ldr	r3, [r7, #4]
    5f22:	691a      	ldr	r2, [r3, #16]
    5f24:	683b      	ldr	r3, [r7, #0]
    5f26:	4013      	ands	r3, r2
    5f28:	2b00      	cmp	r3, #0
    5f2a:	d1f9      	bne.n	5f20 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5f2c:	bf00      	nop
    5f2e:	370c      	adds	r7, #12
    5f30:	46bd      	mov	sp, r7
    5f32:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f36:	4770      	bx	lr

00005f38 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5f38:	b480      	push	{r7}
    5f3a:	b083      	sub	sp, #12
    5f3c:	af00      	add	r7, sp, #0
    5f3e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5f40:	687b      	ldr	r3, [r7, #4]
    5f42:	f44f 7280 	mov.w	r2, #256	; 0x100
    5f46:	819a      	strh	r2, [r3, #12]
}
    5f48:	bf00      	nop
    5f4a:	370c      	adds	r7, #12
    5f4c:	46bd      	mov	sp, r7
    5f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f52:	4770      	bx	lr

00005f54 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5f54:	b480      	push	{r7}
    5f56:	b083      	sub	sp, #12
    5f58:	af00      	add	r7, sp, #0
    5f5a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5f5c:	687b      	ldr	r3, [r7, #4]
    5f5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5f62:	819a      	strh	r2, [r3, #12]
}
    5f64:	bf00      	nop
    5f66:	370c      	adds	r7, #12
    5f68:	46bd      	mov	sp, r7
    5f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f6e:	4770      	bx	lr

00005f70 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5f70:	b480      	push	{r7}
    5f72:	b083      	sub	sp, #12
    5f74:	af00      	add	r7, sp, #0
    5f76:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5f78:	687b      	ldr	r3, [r7, #4]
    5f7a:	899b      	ldrh	r3, [r3, #12]
    5f7c:	b29b      	uxth	r3, r3
}
    5f7e:	4618      	mov	r0, r3
    5f80:	370c      	adds	r7, #12
    5f82:	46bd      	mov	sp, r7
    5f84:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f88:	4770      	bx	lr

00005f8a <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    5f8a:	b480      	push	{r7}
    5f8c:	b083      	sub	sp, #12
    5f8e:	af00      	add	r7, sp, #0
    5f90:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    5f92:	687b      	ldr	r3, [r7, #4]
    5f94:	895b      	ldrh	r3, [r3, #10]
    5f96:	b29b      	uxth	r3, r3
}
    5f98:	4618      	mov	r0, r3
    5f9a:	370c      	adds	r7, #12
    5f9c:	46bd      	mov	sp, r7
    5f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fa2:	4770      	bx	lr

00005fa4 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    5fa4:	b580      	push	{r7, lr}
    5fa6:	b082      	sub	sp, #8
    5fa8:	af00      	add	r7, sp, #0
    5faa:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5fac:	687b      	ldr	r3, [r7, #4]
    5fae:	881b      	ldrh	r3, [r3, #0]
    5fb0:	b29b      	uxth	r3, r3
    5fb2:	f043 0301 	orr.w	r3, r3, #1
    5fb6:	b29a      	uxth	r2, r3
    5fb8:	687b      	ldr	r3, [r7, #4]
    5fba:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5fbc:	2101      	movs	r1, #1
    5fbe:	6878      	ldr	r0, [r7, #4]
    5fc0:	4b02      	ldr	r3, [pc, #8]	; (5fcc <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    5fc2:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5fc4:	bf00      	nop
    5fc6:	3708      	adds	r7, #8
    5fc8:	46bd      	mov	sp, r7
    5fca:	bd80      	pop	{r7, pc}
    5fcc:	00005f15 	.word	0x00005f15

00005fd0 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5fd0:	b580      	push	{r7, lr}
    5fd2:	b084      	sub	sp, #16
    5fd4:	af00      	add	r7, sp, #0
    5fd6:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5fd8:	f248 0103 	movw	r1, #32771	; 0x8003
    5fdc:	6878      	ldr	r0, [r7, #4]
    5fde:	4b0a      	ldr	r3, [pc, #40]	; (6008 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5fe0:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5fe2:	687b      	ldr	r3, [r7, #4]
    5fe4:	881b      	ldrh	r3, [r3, #0]
    5fe6:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5fe8:	89fb      	ldrh	r3, [r7, #14]
    5fea:	085b      	lsrs	r3, r3, #1
    5fec:	b29b      	uxth	r3, r3
    5fee:	f003 0301 	and.w	r3, r3, #1
    5ff2:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    5ff4:	89fb      	ldrh	r3, [r7, #14]
    5ff6:	2b00      	cmp	r3, #0
    5ff8:	bf14      	ite	ne
    5ffa:	2301      	movne	r3, #1
    5ffc:	2300      	moveq	r3, #0
    5ffe:	b2db      	uxtb	r3, r3
}
    6000:	4618      	mov	r0, r3
    6002:	3710      	adds	r7, #16
    6004:	46bd      	mov	sp, r7
    6006:	bd80      	pop	{r7, pc}
    6008:	00005f15 	.word	0x00005f15

0000600c <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    600c:	b580      	push	{r7, lr}
    600e:	b082      	sub	sp, #8
    6010:	af00      	add	r7, sp, #0
    6012:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    6014:	687b      	ldr	r3, [r7, #4]
    6016:	881b      	ldrh	r3, [r3, #0]
    6018:	b29b      	uxth	r3, r3
    601a:	f023 0302 	bic.w	r3, r3, #2
    601e:	b29a      	uxth	r2, r3
    6020:	687b      	ldr	r3, [r7, #4]
    6022:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6024:	f248 0103 	movw	r1, #32771	; 0x8003
    6028:	6878      	ldr	r0, [r7, #4]
    602a:	4b03      	ldr	r3, [pc, #12]	; (6038 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    602c:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    602e:	bf00      	nop
    6030:	3708      	adds	r7, #8
    6032:	46bd      	mov	sp, r7
    6034:	bd80      	pop	{r7, pc}
    6036:	bf00      	nop
    6038:	00005f15 	.word	0x00005f15

0000603c <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    603c:	b580      	push	{r7, lr}
    603e:	b082      	sub	sp, #8
    6040:	af00      	add	r7, sp, #0
    6042:	6078      	str	r0, [r7, #4]
    6044:	460b      	mov	r3, r1
    6046:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6048:	687b      	ldr	r3, [r7, #4]
    604a:	887a      	ldrh	r2, [r7, #2]
    604c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    604e:	f248 0103 	movw	r1, #32771	; 0x8003
    6052:	6878      	ldr	r0, [r7, #4]
    6054:	4b02      	ldr	r3, [pc, #8]	; (6060 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    6056:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    6058:	bf00      	nop
    605a:	3708      	adds	r7, #8
    605c:	46bd      	mov	sp, r7
    605e:	bd80      	pop	{r7, pc}
    6060:	00005f15 	.word	0x00005f15

00006064 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    6064:	b480      	push	{r7}
    6066:	b083      	sub	sp, #12
    6068:	af00      	add	r7, sp, #0
    606a:	6078      	str	r0, [r7, #4]
    606c:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    606e:	687b      	ldr	r3, [r7, #4]
    6070:	683a      	ldr	r2, [r7, #0]
    6072:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    6074:	bf00      	nop
    6076:	370c      	adds	r7, #12
    6078:	46bd      	mov	sp, r7
    607a:	f85d 7b04 	ldr.w	r7, [sp], #4
    607e:	4770      	bx	lr

00006080 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    6080:	b580      	push	{r7, lr}
    6082:	b082      	sub	sp, #8
    6084:	af00      	add	r7, sp, #0
    6086:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    6088:	687b      	ldr	r3, [r7, #4]
    608a:	2b00      	cmp	r3, #0
    608c:	d005      	beq.n	609a <_calendar_init+0x1a>
    608e:	687b      	ldr	r3, [r7, #4]
    6090:	681b      	ldr	r3, [r3, #0]
    6092:	2b00      	cmp	r3, #0
    6094:	d001      	beq.n	609a <_calendar_init+0x1a>
    6096:	2301      	movs	r3, #1
    6098:	e000      	b.n	609c <_calendar_init+0x1c>
    609a:	2300      	movs	r3, #0
    609c:	f003 0301 	and.w	r3, r3, #1
    60a0:	b2db      	uxtb	r3, r3
    60a2:	222f      	movs	r2, #47	; 0x2f
    60a4:	491b      	ldr	r1, [pc, #108]	; (6114 <_calendar_init+0x94>)
    60a6:	4618      	mov	r0, r3
    60a8:	4b1b      	ldr	r3, [pc, #108]	; (6118 <_calendar_init+0x98>)
    60aa:	4798      	blx	r3

	_rtc_dev = dev;
    60ac:	4a1b      	ldr	r2, [pc, #108]	; (611c <_calendar_init+0x9c>)
    60ae:	687b      	ldr	r3, [r7, #4]
    60b0:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    60b2:	687b      	ldr	r3, [r7, #4]
    60b4:	681b      	ldr	r3, [r3, #0]
    60b6:	4618      	mov	r0, r3
    60b8:	4b19      	ldr	r3, [pc, #100]	; (6120 <_calendar_init+0xa0>)
    60ba:	4798      	blx	r3
    60bc:	4603      	mov	r3, r0
    60be:	2b00      	cmp	r3, #0
    60c0:	d00a      	beq.n	60d8 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    60c2:	687b      	ldr	r3, [r7, #4]
    60c4:	681b      	ldr	r3, [r3, #0]
    60c6:	4618      	mov	r0, r3
    60c8:	4b16      	ldr	r3, [pc, #88]	; (6124 <_calendar_init+0xa4>)
    60ca:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    60cc:	687b      	ldr	r3, [r7, #4]
    60ce:	681b      	ldr	r3, [r3, #0]
    60d0:	2102      	movs	r1, #2
    60d2:	4618      	mov	r0, r3
    60d4:	4b14      	ldr	r3, [pc, #80]	; (6128 <_calendar_init+0xa8>)
    60d6:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    60d8:	687b      	ldr	r3, [r7, #4]
    60da:	681b      	ldr	r3, [r3, #0]
    60dc:	4618      	mov	r0, r3
    60de:	4b13      	ldr	r3, [pc, #76]	; (612c <_calendar_init+0xac>)
    60e0:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    60e2:	687b      	ldr	r3, [r7, #4]
    60e4:	681b      	ldr	r3, [r3, #0]
    60e6:	2101      	movs	r1, #1
    60e8:	4618      	mov	r0, r3
    60ea:	4b0f      	ldr	r3, [pc, #60]	; (6128 <_calendar_init+0xa8>)
    60ec:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    60ee:	687b      	ldr	r3, [r7, #4]
    60f0:	681b      	ldr	r3, [r3, #0]
    60f2:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    60f6:	4618      	mov	r0, r3
    60f8:	4b0d      	ldr	r3, [pc, #52]	; (6130 <_calendar_init+0xb0>)
    60fa:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    60fc:	687b      	ldr	r3, [r7, #4]
    60fe:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    6100:	2100      	movs	r1, #0
    6102:	4618      	mov	r0, r3
    6104:	4b0b      	ldr	r3, [pc, #44]	; (6134 <_calendar_init+0xb4>)
    6106:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    6108:	2300      	movs	r3, #0
}
    610a:	4618      	mov	r0, r3
    610c:	3708      	adds	r7, #8
    610e:	46bd      	mov	sp, r7
    6110:	bd80      	pop	{r7, pc}
    6112:	bf00      	nop
    6114:	0001110c 	.word	0x0001110c
    6118:	00003cd5 	.word	0x00003cd5
    611c:	20000c04 	.word	0x20000c04
    6120:	00005fd1 	.word	0x00005fd1
    6124:	0000600d 	.word	0x0000600d
    6128:	00005f15 	.word	0x00005f15
    612c:	00005fa5 	.word	0x00005fa5
    6130:	0000603d 	.word	0x0000603d
    6134:	00006065 	.word	0x00006065

00006138 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    6138:	b580      	push	{r7, lr}
    613a:	b084      	sub	sp, #16
    613c:	af00      	add	r7, sp, #0
    613e:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    6140:	687b      	ldr	r3, [r7, #4]
    6142:	681b      	ldr	r3, [r3, #0]
    6144:	4618      	mov	r0, r3
    6146:	4b19      	ldr	r3, [pc, #100]	; (61ac <_rtc_interrupt_handler+0x74>)
    6148:	4798      	blx	r3
    614a:	4603      	mov	r3, r0
    614c:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    614e:	687b      	ldr	r3, [r7, #4]
    6150:	681b      	ldr	r3, [r3, #0]
    6152:	4618      	mov	r0, r3
    6154:	4b16      	ldr	r3, [pc, #88]	; (61b0 <_rtc_interrupt_handler+0x78>)
    6156:	4798      	blx	r3
    6158:	4603      	mov	r3, r0
    615a:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    615c:	89fa      	ldrh	r2, [r7, #14]
    615e:	89bb      	ldrh	r3, [r7, #12]
    6160:	4013      	ands	r3, r2
    6162:	b29b      	uxth	r3, r3
    6164:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6168:	2b00      	cmp	r3, #0
    616a:	d009      	beq.n	6180 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    616c:	687b      	ldr	r3, [r7, #4]
    616e:	685b      	ldr	r3, [r3, #4]
    6170:	6878      	ldr	r0, [r7, #4]
    6172:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    6174:	687b      	ldr	r3, [r7, #4]
    6176:	681b      	ldr	r3, [r3, #0]
    6178:	4618      	mov	r0, r3
    617a:	4b0e      	ldr	r3, [pc, #56]	; (61b4 <_rtc_interrupt_handler+0x7c>)
    617c:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    617e:	e010      	b.n	61a2 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    6180:	89fa      	ldrh	r2, [r7, #14]
    6182:	89bb      	ldrh	r3, [r7, #12]
    6184:	4013      	ands	r3, r2
    6186:	b29b      	uxth	r3, r3
    6188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    618c:	2b00      	cmp	r3, #0
    618e:	d008      	beq.n	61a2 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    6190:	687b      	ldr	r3, [r7, #4]
    6192:	689b      	ldr	r3, [r3, #8]
    6194:	6878      	ldr	r0, [r7, #4]
    6196:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    6198:	687b      	ldr	r3, [r7, #4]
    619a:	681b      	ldr	r3, [r3, #0]
    619c:	4618      	mov	r0, r3
    619e:	4b06      	ldr	r3, [pc, #24]	; (61b8 <_rtc_interrupt_handler+0x80>)
    61a0:	4798      	blx	r3
}
    61a2:	bf00      	nop
    61a4:	3710      	adds	r7, #16
    61a6:	46bd      	mov	sp, r7
    61a8:	bd80      	pop	{r7, pc}
    61aa:	bf00      	nop
    61ac:	00005f71 	.word	0x00005f71
    61b0:	00005f8b 	.word	0x00005f8b
    61b4:	00005f39 	.word	0x00005f39
    61b8:	00005f55 	.word	0x00005f55

000061bc <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    61bc:	b580      	push	{r7, lr}
    61be:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    61c0:	4b03      	ldr	r3, [pc, #12]	; (61d0 <RTC_Handler+0x14>)
    61c2:	681b      	ldr	r3, [r3, #0]
    61c4:	4618      	mov	r0, r3
    61c6:	4b03      	ldr	r3, [pc, #12]	; (61d4 <RTC_Handler+0x18>)
    61c8:	4798      	blx	r3
}
    61ca:	bf00      	nop
    61cc:	bd80      	pop	{r7, pc}
    61ce:	bf00      	nop
    61d0:	20000c04 	.word	0x20000c04
    61d4:	00006139 	.word	0x00006139

000061d8 <__NVIC_EnableIRQ>:
{
    61d8:	b480      	push	{r7}
    61da:	b083      	sub	sp, #12
    61dc:	af00      	add	r7, sp, #0
    61de:	4603      	mov	r3, r0
    61e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    61e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    61e6:	2b00      	cmp	r3, #0
    61e8:	db0b      	blt.n	6202 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    61ea:	4909      	ldr	r1, [pc, #36]	; (6210 <__NVIC_EnableIRQ+0x38>)
    61ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    61f0:	095b      	lsrs	r3, r3, #5
    61f2:	88fa      	ldrh	r2, [r7, #6]
    61f4:	f002 021f 	and.w	r2, r2, #31
    61f8:	2001      	movs	r0, #1
    61fa:	fa00 f202 	lsl.w	r2, r0, r2
    61fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6202:	bf00      	nop
    6204:	370c      	adds	r7, #12
    6206:	46bd      	mov	sp, r7
    6208:	f85d 7b04 	ldr.w	r7, [sp], #4
    620c:	4770      	bx	lr
    620e:	bf00      	nop
    6210:	e000e100 	.word	0xe000e100

00006214 <__NVIC_DisableIRQ>:
{
    6214:	b480      	push	{r7}
    6216:	b083      	sub	sp, #12
    6218:	af00      	add	r7, sp, #0
    621a:	4603      	mov	r3, r0
    621c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    621e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6222:	2b00      	cmp	r3, #0
    6224:	db10      	blt.n	6248 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6226:	490b      	ldr	r1, [pc, #44]	; (6254 <__NVIC_DisableIRQ+0x40>)
    6228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    622c:	095b      	lsrs	r3, r3, #5
    622e:	88fa      	ldrh	r2, [r7, #6]
    6230:	f002 021f 	and.w	r2, r2, #31
    6234:	2001      	movs	r0, #1
    6236:	fa00 f202 	lsl.w	r2, r0, r2
    623a:	3320      	adds	r3, #32
    623c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6240:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6244:	f3bf 8f6f 	isb	sy
}
    6248:	bf00      	nop
    624a:	370c      	adds	r7, #12
    624c:	46bd      	mov	sp, r7
    624e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6252:	4770      	bx	lr
    6254:	e000e100 	.word	0xe000e100

00006258 <__NVIC_ClearPendingIRQ>:
{
    6258:	b480      	push	{r7}
    625a:	b083      	sub	sp, #12
    625c:	af00      	add	r7, sp, #0
    625e:	4603      	mov	r3, r0
    6260:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6266:	2b00      	cmp	r3, #0
    6268:	db0c      	blt.n	6284 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    626a:	4909      	ldr	r1, [pc, #36]	; (6290 <__NVIC_ClearPendingIRQ+0x38>)
    626c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6270:	095b      	lsrs	r3, r3, #5
    6272:	88fa      	ldrh	r2, [r7, #6]
    6274:	f002 021f 	and.w	r2, r2, #31
    6278:	2001      	movs	r0, #1
    627a:	fa00 f202 	lsl.w	r2, r0, r2
    627e:	3360      	adds	r3, #96	; 0x60
    6280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6284:	bf00      	nop
    6286:	370c      	adds	r7, #12
    6288:	46bd      	mov	sp, r7
    628a:	f85d 7b04 	ldr.w	r7, [sp], #4
    628e:	4770      	bx	lr
    6290:	e000e100 	.word	0xe000e100

00006294 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6294:	b480      	push	{r7}
    6296:	b083      	sub	sp, #12
    6298:	af00      	add	r7, sp, #0
    629a:	6078      	str	r0, [r7, #4]
    629c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    629e:	bf00      	nop
    62a0:	687b      	ldr	r3, [r7, #4]
    62a2:	69da      	ldr	r2, [r3, #28]
    62a4:	683b      	ldr	r3, [r7, #0]
    62a6:	4013      	ands	r3, r2
    62a8:	2b00      	cmp	r3, #0
    62aa:	d1f9      	bne.n	62a0 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    62ac:	bf00      	nop
    62ae:	370c      	adds	r7, #12
    62b0:	46bd      	mov	sp, r7
    62b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    62b6:	4770      	bx	lr

000062b8 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    62b8:	b480      	push	{r7}
    62ba:	b083      	sub	sp, #12
    62bc:	af00      	add	r7, sp, #0
    62be:	6078      	str	r0, [r7, #4]
    62c0:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    62c2:	687b      	ldr	r3, [r7, #4]
    62c4:	69da      	ldr	r2, [r3, #28]
    62c6:	683b      	ldr	r3, [r7, #0]
    62c8:	4013      	ands	r3, r2
    62ca:	2b00      	cmp	r3, #0
    62cc:	bf14      	ite	ne
    62ce:	2301      	movne	r3, #1
    62d0:	2300      	moveq	r3, #0
    62d2:	b2db      	uxtb	r3, r3
}
    62d4:	4618      	mov	r0, r3
    62d6:	370c      	adds	r7, #12
    62d8:	46bd      	mov	sp, r7
    62da:	f85d 7b04 	ldr.w	r7, [sp], #4
    62de:	4770      	bx	lr

000062e0 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    62e0:	b480      	push	{r7}
    62e2:	b083      	sub	sp, #12
    62e4:	af00      	add	r7, sp, #0
    62e6:	6078      	str	r0, [r7, #4]
    62e8:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    62ea:	bf00      	nop
    62ec:	687b      	ldr	r3, [r7, #4]
    62ee:	69da      	ldr	r2, [r3, #28]
    62f0:	683b      	ldr	r3, [r7, #0]
    62f2:	4013      	ands	r3, r2
    62f4:	2b00      	cmp	r3, #0
    62f6:	d1f9      	bne.n	62ec <hri_sercomspi_wait_for_sync+0xc>
	};
}
    62f8:	bf00      	nop
    62fa:	370c      	adds	r7, #12
    62fc:	46bd      	mov	sp, r7
    62fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    6302:	4770      	bx	lr

00006304 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    6304:	b480      	push	{r7}
    6306:	b083      	sub	sp, #12
    6308:	af00      	add	r7, sp, #0
    630a:	6078      	str	r0, [r7, #4]
    630c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    630e:	687b      	ldr	r3, [r7, #4]
    6310:	69da      	ldr	r2, [r3, #28]
    6312:	683b      	ldr	r3, [r7, #0]
    6314:	4013      	ands	r3, r2
    6316:	2b00      	cmp	r3, #0
    6318:	bf14      	ite	ne
    631a:	2301      	movne	r3, #1
    631c:	2300      	moveq	r3, #0
    631e:	b2db      	uxtb	r3, r3
}
    6320:	4618      	mov	r0, r3
    6322:	370c      	adds	r7, #12
    6324:	46bd      	mov	sp, r7
    6326:	f85d 7b04 	ldr.w	r7, [sp], #4
    632a:	4770      	bx	lr

0000632c <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    632c:	b480      	push	{r7}
    632e:	b083      	sub	sp, #12
    6330:	af00      	add	r7, sp, #0
    6332:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    6334:	687b      	ldr	r3, [r7, #4]
    6336:	2201      	movs	r2, #1
    6338:	761a      	strb	r2, [r3, #24]
}
    633a:	bf00      	nop
    633c:	370c      	adds	r7, #12
    633e:	46bd      	mov	sp, r7
    6340:	f85d 7b04 	ldr.w	r7, [sp], #4
    6344:	4770      	bx	lr

00006346 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    6346:	b480      	push	{r7}
    6348:	b083      	sub	sp, #12
    634a:	af00      	add	r7, sp, #0
    634c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    634e:	687b      	ldr	r3, [r7, #4]
    6350:	2202      	movs	r2, #2
    6352:	761a      	strb	r2, [r3, #24]
}
    6354:	bf00      	nop
    6356:	370c      	adds	r7, #12
    6358:	46bd      	mov	sp, r7
    635a:	f85d 7b04 	ldr.w	r7, [sp], #4
    635e:	4770      	bx	lr

00006360 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    6360:	b480      	push	{r7}
    6362:	b083      	sub	sp, #12
    6364:	af00      	add	r7, sp, #0
    6366:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    6368:	687b      	ldr	r3, [r7, #4]
    636a:	7e1b      	ldrb	r3, [r3, #24]
    636c:	b2db      	uxtb	r3, r3
}
    636e:	4618      	mov	r0, r3
    6370:	370c      	adds	r7, #12
    6372:	46bd      	mov	sp, r7
    6374:	f85d 7b04 	ldr.w	r7, [sp], #4
    6378:	4770      	bx	lr

0000637a <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    637a:	b480      	push	{r7}
    637c:	b083      	sub	sp, #12
    637e:	af00      	add	r7, sp, #0
    6380:	6078      	str	r0, [r7, #4]
    6382:	460b      	mov	r3, r1
    6384:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    6386:	687b      	ldr	r3, [r7, #4]
    6388:	78fa      	ldrb	r2, [r7, #3]
    638a:	761a      	strb	r2, [r3, #24]
}
    638c:	bf00      	nop
    638e:	370c      	adds	r7, #12
    6390:	46bd      	mov	sp, r7
    6392:	f85d 7b04 	ldr.w	r7, [sp], #4
    6396:	4770      	bx	lr

00006398 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    6398:	b480      	push	{r7}
    639a:	b085      	sub	sp, #20
    639c:	af00      	add	r7, sp, #0
    639e:	6078      	str	r0, [r7, #4]
    63a0:	460b      	mov	r3, r1
    63a2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    63a4:	687b      	ldr	r3, [r7, #4]
    63a6:	7e1b      	ldrb	r3, [r3, #24]
    63a8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    63aa:	7bfa      	ldrb	r2, [r7, #15]
    63ac:	78fb      	ldrb	r3, [r7, #3]
    63ae:	4013      	ands	r3, r2
    63b0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    63b2:	7bfb      	ldrb	r3, [r7, #15]
}
    63b4:	4618      	mov	r0, r3
    63b6:	3714      	adds	r7, #20
    63b8:	46bd      	mov	sp, r7
    63ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    63be:	4770      	bx	lr

000063c0 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    63c0:	b480      	push	{r7}
    63c2:	b083      	sub	sp, #12
    63c4:	af00      	add	r7, sp, #0
    63c6:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    63c8:	687b      	ldr	r3, [r7, #4]
    63ca:	7e1b      	ldrb	r3, [r3, #24]
    63cc:	b2db      	uxtb	r3, r3
}
    63ce:	4618      	mov	r0, r3
    63d0:	370c      	adds	r7, #12
    63d2:	46bd      	mov	sp, r7
    63d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    63d8:	4770      	bx	lr

000063da <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    63da:	b480      	push	{r7}
    63dc:	b083      	sub	sp, #12
    63de:	af00      	add	r7, sp, #0
    63e0:	6078      	str	r0, [r7, #4]
    63e2:	460b      	mov	r3, r1
    63e4:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    63e6:	687b      	ldr	r3, [r7, #4]
    63e8:	78fa      	ldrb	r2, [r7, #3]
    63ea:	761a      	strb	r2, [r3, #24]
}
    63ec:	bf00      	nop
    63ee:	370c      	adds	r7, #12
    63f0:	46bd      	mov	sp, r7
    63f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    63f6:	4770      	bx	lr

000063f8 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    63f8:	b580      	push	{r7, lr}
    63fa:	b082      	sub	sp, #8
    63fc:	af00      	add	r7, sp, #0
    63fe:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6400:	687b      	ldr	r3, [r7, #4]
    6402:	681b      	ldr	r3, [r3, #0]
    6404:	f023 0202 	bic.w	r2, r3, #2
    6408:	687b      	ldr	r3, [r7, #4]
    640a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    640c:	2103      	movs	r1, #3
    640e:	6878      	ldr	r0, [r7, #4]
    6410:	4b02      	ldr	r3, [pc, #8]	; (641c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    6412:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6414:	bf00      	nop
    6416:	3708      	adds	r7, #8
    6418:	46bd      	mov	sp, r7
    641a:	bd80      	pop	{r7, pc}
    641c:	00006295 	.word	0x00006295

00006420 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    6420:	b480      	push	{r7}
    6422:	b085      	sub	sp, #20
    6424:	af00      	add	r7, sp, #0
    6426:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6428:	687b      	ldr	r3, [r7, #4]
    642a:	681b      	ldr	r3, [r3, #0]
    642c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    642e:	68fb      	ldr	r3, [r7, #12]
    6430:	0edb      	lsrs	r3, r3, #27
    6432:	f003 0301 	and.w	r3, r3, #1
    6436:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6438:	68fb      	ldr	r3, [r7, #12]
    643a:	2b00      	cmp	r3, #0
    643c:	bf14      	ite	ne
    643e:	2301      	movne	r3, #1
    6440:	2300      	moveq	r3, #0
    6442:	b2db      	uxtb	r3, r3
}
    6444:	4618      	mov	r0, r3
    6446:	3714      	adds	r7, #20
    6448:	46bd      	mov	sp, r7
    644a:	f85d 7b04 	ldr.w	r7, [sp], #4
    644e:	4770      	bx	lr

00006450 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    6450:	b580      	push	{r7, lr}
    6452:	b084      	sub	sp, #16
    6454:	af00      	add	r7, sp, #0
    6456:	6078      	str	r0, [r7, #4]
    6458:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    645a:	2103      	movs	r1, #3
    645c:	6878      	ldr	r0, [r7, #4]
    645e:	4b07      	ldr	r3, [pc, #28]	; (647c <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    6460:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6462:	687b      	ldr	r3, [r7, #4]
    6464:	681b      	ldr	r3, [r3, #0]
    6466:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6468:	68fa      	ldr	r2, [r7, #12]
    646a:	683b      	ldr	r3, [r7, #0]
    646c:	4013      	ands	r3, r2
    646e:	60fb      	str	r3, [r7, #12]
	return tmp;
    6470:	68fb      	ldr	r3, [r7, #12]
}
    6472:	4618      	mov	r0, r3
    6474:	3710      	adds	r7, #16
    6476:	46bd      	mov	sp, r7
    6478:	bd80      	pop	{r7, pc}
    647a:	bf00      	nop
    647c:	00006295 	.word	0x00006295

00006480 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    6480:	b580      	push	{r7, lr}
    6482:	b082      	sub	sp, #8
    6484:	af00      	add	r7, sp, #0
    6486:	6078      	str	r0, [r7, #4]
    6488:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    648a:	687b      	ldr	r3, [r7, #4]
    648c:	683a      	ldr	r2, [r7, #0]
    648e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6490:	2103      	movs	r1, #3
    6492:	6878      	ldr	r0, [r7, #4]
    6494:	4b02      	ldr	r3, [pc, #8]	; (64a0 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    6496:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6498:	bf00      	nop
    649a:	3708      	adds	r7, #8
    649c:	46bd      	mov	sp, r7
    649e:	bd80      	pop	{r7, pc}
    64a0:	00006295 	.word	0x00006295

000064a4 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    64a4:	b580      	push	{r7, lr}
    64a6:	b082      	sub	sp, #8
    64a8:	af00      	add	r7, sp, #0
    64aa:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    64ac:	687b      	ldr	r3, [r7, #4]
    64ae:	681b      	ldr	r3, [r3, #0]
    64b0:	f043 0202 	orr.w	r2, r3, #2
    64b4:	687b      	ldr	r3, [r7, #4]
    64b6:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    64b8:	2103      	movs	r1, #3
    64ba:	6878      	ldr	r0, [r7, #4]
    64bc:	4b02      	ldr	r3, [pc, #8]	; (64c8 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    64be:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    64c0:	bf00      	nop
    64c2:	3708      	adds	r7, #8
    64c4:	46bd      	mov	sp, r7
    64c6:	bd80      	pop	{r7, pc}
    64c8:	000062e1 	.word	0x000062e1

000064cc <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    64cc:	b580      	push	{r7, lr}
    64ce:	b084      	sub	sp, #16
    64d0:	af00      	add	r7, sp, #0
    64d2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    64d4:	2103      	movs	r1, #3
    64d6:	6878      	ldr	r0, [r7, #4]
    64d8:	4b09      	ldr	r3, [pc, #36]	; (6500 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    64da:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    64dc:	687b      	ldr	r3, [r7, #4]
    64de:	681b      	ldr	r3, [r3, #0]
    64e0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    64e2:	68fb      	ldr	r3, [r7, #12]
    64e4:	085b      	lsrs	r3, r3, #1
    64e6:	f003 0301 	and.w	r3, r3, #1
    64ea:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    64ec:	68fb      	ldr	r3, [r7, #12]
    64ee:	2b00      	cmp	r3, #0
    64f0:	bf14      	ite	ne
    64f2:	2301      	movne	r3, #1
    64f4:	2300      	moveq	r3, #0
    64f6:	b2db      	uxtb	r3, r3
}
    64f8:	4618      	mov	r0, r3
    64fa:	3710      	adds	r7, #16
    64fc:	46bd      	mov	sp, r7
    64fe:	bd80      	pop	{r7, pc}
    6500:	000062e1 	.word	0x000062e1

00006504 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6504:	b580      	push	{r7, lr}
    6506:	b082      	sub	sp, #8
    6508:	af00      	add	r7, sp, #0
    650a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    650c:	687b      	ldr	r3, [r7, #4]
    650e:	681b      	ldr	r3, [r3, #0]
    6510:	f023 0202 	bic.w	r2, r3, #2
    6514:	687b      	ldr	r3, [r7, #4]
    6516:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6518:	2103      	movs	r1, #3
    651a:	6878      	ldr	r0, [r7, #4]
    651c:	4b02      	ldr	r3, [pc, #8]	; (6528 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    651e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6520:	bf00      	nop
    6522:	3708      	adds	r7, #8
    6524:	46bd      	mov	sp, r7
    6526:	bd80      	pop	{r7, pc}
    6528:	000062e1 	.word	0x000062e1

0000652c <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    652c:	b580      	push	{r7, lr}
    652e:	b084      	sub	sp, #16
    6530:	af00      	add	r7, sp, #0
    6532:	6078      	str	r0, [r7, #4]
    6534:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6536:	2103      	movs	r1, #3
    6538:	6878      	ldr	r0, [r7, #4]
    653a:	4b07      	ldr	r3, [pc, #28]	; (6558 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    653c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    653e:	687b      	ldr	r3, [r7, #4]
    6540:	681b      	ldr	r3, [r3, #0]
    6542:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6544:	68fa      	ldr	r2, [r7, #12]
    6546:	683b      	ldr	r3, [r7, #0]
    6548:	4013      	ands	r3, r2
    654a:	60fb      	str	r3, [r7, #12]
	return tmp;
    654c:	68fb      	ldr	r3, [r7, #12]
}
    654e:	4618      	mov	r0, r3
    6550:	3710      	adds	r7, #16
    6552:	46bd      	mov	sp, r7
    6554:	bd80      	pop	{r7, pc}
    6556:	bf00      	nop
    6558:	000062e1 	.word	0x000062e1

0000655c <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    655c:	b580      	push	{r7, lr}
    655e:	b082      	sub	sp, #8
    6560:	af00      	add	r7, sp, #0
    6562:	6078      	str	r0, [r7, #4]
    6564:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6566:	687b      	ldr	r3, [r7, #4]
    6568:	683a      	ldr	r2, [r7, #0]
    656a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    656c:	2103      	movs	r1, #3
    656e:	6878      	ldr	r0, [r7, #4]
    6570:	4b02      	ldr	r3, [pc, #8]	; (657c <hri_sercomspi_write_CTRLA_reg+0x20>)
    6572:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6574:	bf00      	nop
    6576:	3708      	adds	r7, #8
    6578:	46bd      	mov	sp, r7
    657a:	bd80      	pop	{r7, pc}
    657c:	000062e1 	.word	0x000062e1

00006580 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    6580:	b580      	push	{r7, lr}
    6582:	b082      	sub	sp, #8
    6584:	af00      	add	r7, sp, #0
    6586:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    6588:	687b      	ldr	r3, [r7, #4]
    658a:	685b      	ldr	r3, [r3, #4]
    658c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6590:	687b      	ldr	r3, [r7, #4]
    6592:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6594:	2104      	movs	r1, #4
    6596:	6878      	ldr	r0, [r7, #4]
    6598:	4b02      	ldr	r3, [pc, #8]	; (65a4 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    659a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    659c:	bf00      	nop
    659e:	3708      	adds	r7, #8
    65a0:	46bd      	mov	sp, r7
    65a2:	bd80      	pop	{r7, pc}
    65a4:	00006295 	.word	0x00006295

000065a8 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    65a8:	b580      	push	{r7, lr}
    65aa:	b082      	sub	sp, #8
    65ac:	af00      	add	r7, sp, #0
    65ae:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    65b0:	687b      	ldr	r3, [r7, #4]
    65b2:	685b      	ldr	r3, [r3, #4]
    65b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    65b8:	687b      	ldr	r3, [r7, #4]
    65ba:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    65bc:	2104      	movs	r1, #4
    65be:	6878      	ldr	r0, [r7, #4]
    65c0:	4b02      	ldr	r3, [pc, #8]	; (65cc <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    65c2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    65c4:	bf00      	nop
    65c6:	3708      	adds	r7, #8
    65c8:	46bd      	mov	sp, r7
    65ca:	bd80      	pop	{r7, pc}
    65cc:	00006295 	.word	0x00006295

000065d0 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    65d0:	b580      	push	{r7, lr}
    65d2:	b082      	sub	sp, #8
    65d4:	af00      	add	r7, sp, #0
    65d6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    65d8:	687b      	ldr	r3, [r7, #4]
    65da:	685b      	ldr	r3, [r3, #4]
    65dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    65e0:	687b      	ldr	r3, [r7, #4]
    65e2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    65e4:	2104      	movs	r1, #4
    65e6:	6878      	ldr	r0, [r7, #4]
    65e8:	4b02      	ldr	r3, [pc, #8]	; (65f4 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    65ea:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    65ec:	bf00      	nop
    65ee:	3708      	adds	r7, #8
    65f0:	46bd      	mov	sp, r7
    65f2:	bd80      	pop	{r7, pc}
    65f4:	00006295 	.word	0x00006295

000065f8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    65f8:	b580      	push	{r7, lr}
    65fa:	b082      	sub	sp, #8
    65fc:	af00      	add	r7, sp, #0
    65fe:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6600:	687b      	ldr	r3, [r7, #4]
    6602:	685b      	ldr	r3, [r3, #4]
    6604:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    6608:	687b      	ldr	r3, [r7, #4]
    660a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    660c:	2104      	movs	r1, #4
    660e:	6878      	ldr	r0, [r7, #4]
    6610:	4b02      	ldr	r3, [pc, #8]	; (661c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    6612:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6614:	bf00      	nop
    6616:	3708      	adds	r7, #8
    6618:	46bd      	mov	sp, r7
    661a:	bd80      	pop	{r7, pc}
    661c:	00006295 	.word	0x00006295

00006620 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    6620:	b580      	push	{r7, lr}
    6622:	b082      	sub	sp, #8
    6624:	af00      	add	r7, sp, #0
    6626:	6078      	str	r0, [r7, #4]
    6628:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    662a:	687b      	ldr	r3, [r7, #4]
    662c:	685a      	ldr	r2, [r3, #4]
    662e:	683b      	ldr	r3, [r7, #0]
    6630:	041b      	lsls	r3, r3, #16
    6632:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    6636:	431a      	orrs	r2, r3
    6638:	687b      	ldr	r3, [r7, #4]
    663a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    663c:	2104      	movs	r1, #4
    663e:	6878      	ldr	r0, [r7, #4]
    6640:	4b02      	ldr	r3, [pc, #8]	; (664c <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    6642:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6644:	bf00      	nop
    6646:	3708      	adds	r7, #8
    6648:	46bd      	mov	sp, r7
    664a:	bd80      	pop	{r7, pc}
    664c:	00006295 	.word	0x00006295

00006650 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    6650:	b580      	push	{r7, lr}
    6652:	b082      	sub	sp, #8
    6654:	af00      	add	r7, sp, #0
    6656:	6078      	str	r0, [r7, #4]
    6658:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    665a:	687b      	ldr	r3, [r7, #4]
    665c:	683a      	ldr	r2, [r7, #0]
    665e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6660:	2104      	movs	r1, #4
    6662:	6878      	ldr	r0, [r7, #4]
    6664:	4b02      	ldr	r3, [pc, #8]	; (6670 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    6666:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6668:	bf00      	nop
    666a:	3708      	adds	r7, #8
    666c:	46bd      	mov	sp, r7
    666e:	bd80      	pop	{r7, pc}
    6670:	00006295 	.word	0x00006295

00006674 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    6674:	b580      	push	{r7, lr}
    6676:	b082      	sub	sp, #8
    6678:	af00      	add	r7, sp, #0
    667a:	6078      	str	r0, [r7, #4]
    667c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    667e:	687b      	ldr	r3, [r7, #4]
    6680:	683a      	ldr	r2, [r7, #0]
    6682:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    6684:	2117      	movs	r1, #23
    6686:	6878      	ldr	r0, [r7, #4]
    6688:	4b02      	ldr	r3, [pc, #8]	; (6694 <hri_sercomspi_write_CTRLB_reg+0x20>)
    668a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    668c:	bf00      	nop
    668e:	3708      	adds	r7, #8
    6690:	46bd      	mov	sp, r7
    6692:	bd80      	pop	{r7, pc}
    6694:	000062e1 	.word	0x000062e1

00006698 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    6698:	b480      	push	{r7}
    669a:	b083      	sub	sp, #12
    669c:	af00      	add	r7, sp, #0
    669e:	6078      	str	r0, [r7, #4]
    66a0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    66a2:	687b      	ldr	r3, [r7, #4]
    66a4:	683a      	ldr	r2, [r7, #0]
    66a6:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    66a8:	bf00      	nop
    66aa:	370c      	adds	r7, #12
    66ac:	46bd      	mov	sp, r7
    66ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    66b2:	4770      	bx	lr

000066b4 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    66b4:	b480      	push	{r7}
    66b6:	b083      	sub	sp, #12
    66b8:	af00      	add	r7, sp, #0
    66ba:	6078      	str	r0, [r7, #4]
    66bc:	460b      	mov	r3, r1
    66be:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    66c0:	687b      	ldr	r3, [r7, #4]
    66c2:	78fa      	ldrb	r2, [r7, #3]
    66c4:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    66c6:	bf00      	nop
    66c8:	370c      	adds	r7, #12
    66ca:	46bd      	mov	sp, r7
    66cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    66d0:	4770      	bx	lr
	...

000066d4 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    66d4:	b580      	push	{r7, lr}
    66d6:	b084      	sub	sp, #16
    66d8:	af00      	add	r7, sp, #0
    66da:	6078      	str	r0, [r7, #4]
    66dc:	460b      	mov	r3, r1
    66de:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    66e0:	687b      	ldr	r3, [r7, #4]
    66e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    66e4:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    66e6:	68fb      	ldr	r3, [r7, #12]
    66e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    66ec:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    66ee:	78fb      	ldrb	r3, [r7, #3]
    66f0:	039b      	lsls	r3, r3, #14
    66f2:	461a      	mov	r2, r3
    66f4:	68fb      	ldr	r3, [r7, #12]
    66f6:	4313      	orrs	r3, r2
    66f8:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    66fa:	687b      	ldr	r3, [r7, #4]
    66fc:	68fa      	ldr	r2, [r7, #12]
    66fe:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6700:	2104      	movs	r1, #4
    6702:	6878      	ldr	r0, [r7, #4]
    6704:	4b02      	ldr	r3, [pc, #8]	; (6710 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    6706:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6708:	bf00      	nop
    670a:	3710      	adds	r7, #16
    670c:	46bd      	mov	sp, r7
    670e:	bd80      	pop	{r7, pc}
    6710:	00006295 	.word	0x00006295

00006714 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    6714:	b580      	push	{r7, lr}
    6716:	b082      	sub	sp, #8
    6718:	af00      	add	r7, sp, #0
    671a:	6078      	str	r0, [r7, #4]
    671c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    671e:	687b      	ldr	r3, [r7, #4]
    6720:	683a      	ldr	r2, [r7, #0]
    6722:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6724:	2104      	movs	r1, #4
    6726:	6878      	ldr	r0, [r7, #4]
    6728:	4b02      	ldr	r3, [pc, #8]	; (6734 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    672a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    672c:	bf00      	nop
    672e:	3708      	adds	r7, #8
    6730:	46bd      	mov	sp, r7
    6732:	bd80      	pop	{r7, pc}
    6734:	00006295 	.word	0x00006295

00006738 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    6738:	b580      	push	{r7, lr}
    673a:	b082      	sub	sp, #8
    673c:	af00      	add	r7, sp, #0
    673e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6740:	2104      	movs	r1, #4
    6742:	6878      	ldr	r0, [r7, #4]
    6744:	4b03      	ldr	r3, [pc, #12]	; (6754 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    6746:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6748:	687b      	ldr	r3, [r7, #4]
    674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    674c:	4618      	mov	r0, r3
    674e:	3708      	adds	r7, #8
    6750:	46bd      	mov	sp, r7
    6752:	bd80      	pop	{r7, pc}
    6754:	00006295 	.word	0x00006295

00006758 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    6758:	b480      	push	{r7}
    675a:	b083      	sub	sp, #12
    675c:	af00      	add	r7, sp, #0
    675e:	6078      	str	r0, [r7, #4]
    6760:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    6762:	687b      	ldr	r3, [r7, #4]
    6764:	683a      	ldr	r2, [r7, #0]
    6766:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6768:	bf00      	nop
    676a:	370c      	adds	r7, #12
    676c:	46bd      	mov	sp, r7
    676e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6772:	4770      	bx	lr

00006774 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    6774:	b580      	push	{r7, lr}
    6776:	b082      	sub	sp, #8
    6778:	af00      	add	r7, sp, #0
    677a:	6078      	str	r0, [r7, #4]
    677c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    677e:	687b      	ldr	r3, [r7, #4]
    6780:	683a      	ldr	r2, [r7, #0]
    6782:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6784:	2104      	movs	r1, #4
    6786:	6878      	ldr	r0, [r7, #4]
    6788:	4b02      	ldr	r3, [pc, #8]	; (6794 <hri_sercomi2cm_write_DATA_reg+0x20>)
    678a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    678c:	bf00      	nop
    678e:	3708      	adds	r7, #8
    6790:	46bd      	mov	sp, r7
    6792:	bd80      	pop	{r7, pc}
    6794:	00006295 	.word	0x00006295

00006798 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6798:	b580      	push	{r7, lr}
    679a:	b082      	sub	sp, #8
    679c:	af00      	add	r7, sp, #0
    679e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    67a0:	2104      	movs	r1, #4
    67a2:	6878      	ldr	r0, [r7, #4]
    67a4:	4b03      	ldr	r3, [pc, #12]	; (67b4 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    67a6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    67a8:	687b      	ldr	r3, [r7, #4]
    67aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    67ac:	4618      	mov	r0, r3
    67ae:	3708      	adds	r7, #8
    67b0:	46bd      	mov	sp, r7
    67b2:	bd80      	pop	{r7, pc}
    67b4:	00006295 	.word	0x00006295

000067b8 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    67b8:	b480      	push	{r7}
    67ba:	b083      	sub	sp, #12
    67bc:	af00      	add	r7, sp, #0
    67be:	6078      	str	r0, [r7, #4]
    67c0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    67c2:	687b      	ldr	r3, [r7, #4]
    67c4:	683a      	ldr	r2, [r7, #0]
    67c6:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    67c8:	bf00      	nop
    67ca:	370c      	adds	r7, #12
    67cc:	46bd      	mov	sp, r7
    67ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    67d2:	4770      	bx	lr

000067d4 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    67d4:	b480      	push	{r7}
    67d6:	b083      	sub	sp, #12
    67d8:	af00      	add	r7, sp, #0
    67da:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    67dc:	687b      	ldr	r3, [r7, #4]
    67de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    67e0:	4618      	mov	r0, r3
    67e2:	370c      	adds	r7, #12
    67e4:	46bd      	mov	sp, r7
    67e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    67ea:	4770      	bx	lr

000067ec <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    67ec:	b480      	push	{r7}
    67ee:	b083      	sub	sp, #12
    67f0:	af00      	add	r7, sp, #0
    67f2:	6078      	str	r0, [r7, #4]
    67f4:	460b      	mov	r3, r1
    67f6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    67f8:	687b      	ldr	r3, [r7, #4]
    67fa:	78fa      	ldrb	r2, [r7, #3]
    67fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6800:	bf00      	nop
    6802:	370c      	adds	r7, #12
    6804:	46bd      	mov	sp, r7
    6806:	f85d 7b04 	ldr.w	r7, [sp], #4
    680a:	4770      	bx	lr

0000680c <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    680c:	b480      	push	{r7}
    680e:	b083      	sub	sp, #12
    6810:	af00      	add	r7, sp, #0
    6812:	6078      	str	r0, [r7, #4]
    6814:	460b      	mov	r3, r1
    6816:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6818:	687b      	ldr	r3, [r7, #4]
    681a:	887a      	ldrh	r2, [r7, #2]
    681c:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    681e:	bf00      	nop
    6820:	370c      	adds	r7, #12
    6822:	46bd      	mov	sp, r7
    6824:	f85d 7b04 	ldr.w	r7, [sp], #4
    6828:	4770      	bx	lr
	...

0000682c <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    682c:	b580      	push	{r7, lr}
    682e:	b082      	sub	sp, #8
    6830:	af00      	add	r7, sp, #0
    6832:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6834:	2104      	movs	r1, #4
    6836:	6878      	ldr	r0, [r7, #4]
    6838:	4b04      	ldr	r3, [pc, #16]	; (684c <hri_sercomi2cm_read_STATUS_reg+0x20>)
    683a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    683c:	687b      	ldr	r3, [r7, #4]
    683e:	8b5b      	ldrh	r3, [r3, #26]
    6840:	b29b      	uxth	r3, r3
}
    6842:	4618      	mov	r0, r3
    6844:	3708      	adds	r7, #8
    6846:	46bd      	mov	sp, r7
    6848:	bd80      	pop	{r7, pc}
    684a:	bf00      	nop
    684c:	00006295 	.word	0x00006295

00006850 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6850:	b4b0      	push	{r4, r5, r7}
    6852:	b08d      	sub	sp, #52	; 0x34
    6854:	af00      	add	r7, sp, #0
    6856:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6858:	4b13      	ldr	r3, [pc, #76]	; (68a8 <_sercom_get_hardware_index+0x58>)
    685a:	f107 040c 	add.w	r4, r7, #12
    685e:	461d      	mov	r5, r3
    6860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6864:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6868:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    686c:	2300      	movs	r3, #0
    686e:	62fb      	str	r3, [r7, #44]	; 0x2c
    6870:	e010      	b.n	6894 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6874:	009b      	lsls	r3, r3, #2
    6876:	f107 0230 	add.w	r2, r7, #48	; 0x30
    687a:	4413      	add	r3, r2
    687c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    6880:	461a      	mov	r2, r3
    6882:	687b      	ldr	r3, [r7, #4]
    6884:	429a      	cmp	r2, r3
    6886:	d102      	bne.n	688e <_sercom_get_hardware_index+0x3e>
			return i;
    6888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    688a:	b2db      	uxtb	r3, r3
    688c:	e006      	b.n	689c <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    688e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6890:	3301      	adds	r3, #1
    6892:	62fb      	str	r3, [r7, #44]	; 0x2c
    6894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6896:	2b07      	cmp	r3, #7
    6898:	d9eb      	bls.n	6872 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    689a:	2300      	movs	r3, #0
}
    689c:	4618      	mov	r0, r3
    689e:	3734      	adds	r7, #52	; 0x34
    68a0:	46bd      	mov	sp, r7
    68a2:	bcb0      	pop	{r4, r5, r7}
    68a4:	4770      	bx	lr
    68a6:	bf00      	nop
    68a8:	00011140 	.word	0x00011140

000068ac <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    68ac:	b480      	push	{r7}
    68ae:	b083      	sub	sp, #12
    68b0:	af00      	add	r7, sp, #0
    68b2:	6078      	str	r0, [r7, #4]
    68b4:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM7) {
    68b6:	687b      	ldr	r3, [r7, #4]
    68b8:	4a05      	ldr	r2, [pc, #20]	; (68d0 <_sercom_init_irq_param+0x24>)
    68ba:	4293      	cmp	r3, r2
    68bc:	d102      	bne.n	68c4 <_sercom_init_irq_param+0x18>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    68be:	4a05      	ldr	r2, [pc, #20]	; (68d4 <_sercom_init_irq_param+0x28>)
    68c0:	683b      	ldr	r3, [r7, #0]
    68c2:	6013      	str	r3, [r2, #0]
	}
}
    68c4:	bf00      	nop
    68c6:	370c      	adds	r7, #12
    68c8:	46bd      	mov	sp, r7
    68ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    68ce:	4770      	bx	lr
    68d0:	43000c00 	.word	0x43000c00
    68d4:	20000c20 	.word	0x20000c20

000068d8 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    68d8:	b580      	push	{r7, lr}
    68da:	b084      	sub	sp, #16
    68dc:	af00      	add	r7, sp, #0
    68de:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    68e0:	6878      	ldr	r0, [r7, #4]
    68e2:	4b13      	ldr	r3, [pc, #76]	; (6930 <_get_i2cm_index+0x58>)
    68e4:	4798      	blx	r3
    68e6:	4603      	mov	r3, r0
    68e8:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    68ea:	2300      	movs	r3, #0
    68ec:	73fb      	strb	r3, [r7, #15]
    68ee:	e010      	b.n	6912 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    68f0:	7bfa      	ldrb	r2, [r7, #15]
    68f2:	4910      	ldr	r1, [pc, #64]	; (6934 <_get_i2cm_index+0x5c>)
    68f4:	4613      	mov	r3, r2
    68f6:	005b      	lsls	r3, r3, #1
    68f8:	4413      	add	r3, r2
    68fa:	00db      	lsls	r3, r3, #3
    68fc:	440b      	add	r3, r1
    68fe:	781b      	ldrb	r3, [r3, #0]
    6900:	7bba      	ldrb	r2, [r7, #14]
    6902:	429a      	cmp	r2, r3
    6904:	d102      	bne.n	690c <_get_i2cm_index+0x34>
			return i;
    6906:	f997 300f 	ldrsb.w	r3, [r7, #15]
    690a:	e00d      	b.n	6928 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    690c:	7bfb      	ldrb	r3, [r7, #15]
    690e:	3301      	adds	r3, #1
    6910:	73fb      	strb	r3, [r7, #15]
    6912:	7bfb      	ldrb	r3, [r7, #15]
    6914:	2b02      	cmp	r3, #2
    6916:	d9eb      	bls.n	68f0 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6918:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    691c:	4906      	ldr	r1, [pc, #24]	; (6938 <_get_i2cm_index+0x60>)
    691e:	2000      	movs	r0, #0
    6920:	4b06      	ldr	r3, [pc, #24]	; (693c <_get_i2cm_index+0x64>)
    6922:	4798      	blx	r3
	return -1;
    6924:	f04f 33ff 	mov.w	r3, #4294967295
}
    6928:	4618      	mov	r0, r3
    692a:	3710      	adds	r7, #16
    692c:	46bd      	mov	sp, r7
    692e:	bd80      	pop	{r7, pc}
    6930:	00006851 	.word	0x00006851
    6934:	20000018 	.word	0x20000018
    6938:	00011124 	.word	0x00011124
    693c:	00003cd5 	.word	0x00003cd5

00006940 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    6940:	b580      	push	{r7, lr}
    6942:	b082      	sub	sp, #8
    6944:	af00      	add	r7, sp, #0
    6946:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    6948:	2103      	movs	r1, #3
    694a:	6878      	ldr	r0, [r7, #4]
    694c:	4b02      	ldr	r3, [pc, #8]	; (6958 <_sercom_i2c_send_stop+0x18>)
    694e:	4798      	blx	r3
}
    6950:	bf00      	nop
    6952:	3708      	adds	r7, #8
    6954:	46bd      	mov	sp, r7
    6956:	bd80      	pop	{r7, pc}
    6958:	00006621 	.word	0x00006621

0000695c <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    695c:	b590      	push	{r4, r7, lr}
    695e:	b087      	sub	sp, #28
    6960:	af00      	add	r7, sp, #0
    6962:	60f8      	str	r0, [r7, #12]
    6964:	60b9      	str	r1, [r7, #8]
    6966:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6968:	68f8      	ldr	r0, [r7, #12]
    696a:	4b7d      	ldr	r3, [pc, #500]	; (6b60 <_sercom_i2c_sync_analyse_flags+0x204>)
    696c:	4798      	blx	r3
    696e:	4603      	mov	r3, r0
    6970:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    6972:	68f8      	ldr	r0, [r7, #12]
    6974:	4b7b      	ldr	r3, [pc, #492]	; (6b64 <_sercom_i2c_sync_analyse_flags+0x208>)
    6976:	4798      	blx	r3
    6978:	4603      	mov	r3, r0
    697a:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    697c:	68bb      	ldr	r3, [r7, #8]
    697e:	f003 0301 	and.w	r3, r3, #1
    6982:	2b00      	cmp	r3, #0
    6984:	f000 8095 	beq.w	6ab2 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6988:	8a7b      	ldrh	r3, [r7, #18]
    698a:	f003 0302 	and.w	r3, r3, #2
    698e:	2b00      	cmp	r3, #0
    6990:	d01d      	beq.n	69ce <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    6992:	68f8      	ldr	r0, [r7, #12]
    6994:	4b74      	ldr	r3, [pc, #464]	; (6b68 <_sercom_i2c_sync_analyse_flags+0x20c>)
    6996:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6998:	687b      	ldr	r3, [r7, #4]
    699a:	885b      	ldrh	r3, [r3, #2]
    699c:	b29b      	uxth	r3, r3
    699e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    69a2:	b29a      	uxth	r2, r3
    69a4:	687b      	ldr	r3, [r7, #4]
    69a6:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    69a8:	687b      	ldr	r3, [r7, #4]
    69aa:	885b      	ldrh	r3, [r3, #2]
    69ac:	b29b      	uxth	r3, r3
    69ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    69b2:	b29a      	uxth	r2, r3
    69b4:	687b      	ldr	r3, [r7, #4]
    69b6:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    69b8:	8a7b      	ldrh	r3, [r7, #18]
    69ba:	f003 0301 	and.w	r3, r3, #1
    69be:	2b00      	cmp	r3, #0
    69c0:	d002      	beq.n	69c8 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    69c2:	f06f 0304 	mvn.w	r3, #4
    69c6:	e0c6      	b.n	6b56 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    69c8:	f06f 0303 	mvn.w	r3, #3
    69cc:	e0c3      	b.n	6b56 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    69ce:	8a7b      	ldrh	r3, [r7, #18]
    69d0:	f003 0304 	and.w	r3, r3, #4
    69d4:	2b00      	cmp	r3, #0
    69d6:	d01f      	beq.n	6a18 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    69d8:	687b      	ldr	r3, [r7, #4]
    69da:	685b      	ldr	r3, [r3, #4]
    69dc:	2b00      	cmp	r3, #0
    69de:	dd07      	ble.n	69f0 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    69e0:	687b      	ldr	r3, [r7, #4]
    69e2:	885b      	ldrh	r3, [r3, #2]
    69e4:	b29b      	uxth	r3, r3
    69e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    69ea:	b29a      	uxth	r2, r3
    69ec:	687b      	ldr	r3, [r7, #4]
    69ee:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    69f0:	687b      	ldr	r3, [r7, #4]
    69f2:	885b      	ldrh	r3, [r3, #2]
    69f4:	b29b      	uxth	r3, r3
    69f6:	b21b      	sxth	r3, r3
    69f8:	2b00      	cmp	r3, #0
    69fa:	da02      	bge.n	6a02 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    69fc:	68f8      	ldr	r0, [r7, #12]
    69fe:	4b5b      	ldr	r3, [pc, #364]	; (6b6c <_sercom_i2c_sync_analyse_flags+0x210>)
    6a00:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6a02:	687b      	ldr	r3, [r7, #4]
    6a04:	885b      	ldrh	r3, [r3, #2]
    6a06:	b29b      	uxth	r3, r3
    6a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6a0c:	b29a      	uxth	r2, r3
    6a0e:	687b      	ldr	r3, [r7, #4]
    6a10:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    6a12:	f06f 0301 	mvn.w	r3, #1
    6a16:	e09e      	b.n	6b56 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6a18:	687b      	ldr	r3, [r7, #4]
    6a1a:	885b      	ldrh	r3, [r3, #2]
    6a1c:	b29b      	uxth	r3, r3
    6a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6a22:	2b00      	cmp	r3, #0
    6a24:	d01c      	beq.n	6a60 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6a26:	687b      	ldr	r3, [r7, #4]
    6a28:	881b      	ldrh	r3, [r3, #0]
    6a2a:	121b      	asrs	r3, r3, #8
    6a2c:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6a2e:	f003 0406 	and.w	r4, r3, #6
    6a32:	68f8      	ldr	r0, [r7, #12]
    6a34:	4b4e      	ldr	r3, [pc, #312]	; (6b70 <_sercom_i2c_sync_analyse_flags+0x214>)
    6a36:	4798      	blx	r3
    6a38:	4603      	mov	r3, r0
    6a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6a3e:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    6a40:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6a44:	4619      	mov	r1, r3
    6a46:	68f8      	ldr	r0, [r7, #12]
    6a48:	4b4a      	ldr	r3, [pc, #296]	; (6b74 <_sercom_i2c_sync_analyse_flags+0x218>)
    6a4a:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6a4c:	687b      	ldr	r3, [r7, #4]
    6a4e:	885b      	ldrh	r3, [r3, #2]
    6a50:	b29b      	uxth	r3, r3
    6a52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6a56:	b29a      	uxth	r2, r3
    6a58:	687b      	ldr	r3, [r7, #4]
    6a5a:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6a5c:	2300      	movs	r3, #0
    6a5e:	e07a      	b.n	6b56 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6a60:	687b      	ldr	r3, [r7, #4]
    6a62:	685b      	ldr	r3, [r3, #4]
    6a64:	2b00      	cmp	r3, #0
    6a66:	d111      	bne.n	6a8c <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6a68:	687b      	ldr	r3, [r7, #4]
    6a6a:	885b      	ldrh	r3, [r3, #2]
    6a6c:	b29b      	uxth	r3, r3
    6a6e:	b21b      	sxth	r3, r3
    6a70:	2b00      	cmp	r3, #0
    6a72:	da02      	bge.n	6a7a <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    6a74:	68f8      	ldr	r0, [r7, #12]
    6a76:	4b3d      	ldr	r3, [pc, #244]	; (6b6c <_sercom_i2c_sync_analyse_flags+0x210>)
    6a78:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6a7a:	687b      	ldr	r3, [r7, #4]
    6a7c:	885b      	ldrh	r3, [r3, #2]
    6a7e:	b29b      	uxth	r3, r3
    6a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6a84:	b29a      	uxth	r2, r3
    6a86:	687b      	ldr	r3, [r7, #4]
    6a88:	805a      	strh	r2, [r3, #2]
    6a8a:	e010      	b.n	6aae <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6a8c:	687b      	ldr	r3, [r7, #4]
    6a8e:	689b      	ldr	r3, [r3, #8]
    6a90:	781b      	ldrb	r3, [r3, #0]
    6a92:	4619      	mov	r1, r3
    6a94:	68f8      	ldr	r0, [r7, #12]
    6a96:	4b38      	ldr	r3, [pc, #224]	; (6b78 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6a98:	4798      	blx	r3
				msg->buffer++;
    6a9a:	687b      	ldr	r3, [r7, #4]
    6a9c:	689b      	ldr	r3, [r3, #8]
    6a9e:	1c5a      	adds	r2, r3, #1
    6aa0:	687b      	ldr	r3, [r7, #4]
    6aa2:	609a      	str	r2, [r3, #8]
				msg->len--;
    6aa4:	687b      	ldr	r3, [r7, #4]
    6aa6:	685b      	ldr	r3, [r3, #4]
    6aa8:	1e5a      	subs	r2, r3, #1
    6aaa:	687b      	ldr	r3, [r7, #4]
    6aac:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    6aae:	2300      	movs	r3, #0
    6ab0:	e051      	b.n	6b56 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    6ab2:	68bb      	ldr	r3, [r7, #8]
    6ab4:	f003 0302 	and.w	r3, r3, #2
    6ab8:	2b00      	cmp	r3, #0
    6aba:	d04b      	beq.n	6b54 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6abc:	687b      	ldr	r3, [r7, #4]
    6abe:	685b      	ldr	r3, [r3, #4]
    6ac0:	2b00      	cmp	r3, #0
    6ac2:	d041      	beq.n	6b48 <_sercom_i2c_sync_analyse_flags+0x1ec>
    6ac4:	8a7b      	ldrh	r3, [r7, #18]
    6ac6:	f003 0304 	and.w	r3, r3, #4
    6aca:	2b00      	cmp	r3, #0
    6acc:	d13c      	bne.n	6b48 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    6ace:	687b      	ldr	r3, [r7, #4]
    6ad0:	685b      	ldr	r3, [r3, #4]
    6ad2:	1e5a      	subs	r2, r3, #1
    6ad4:	687b      	ldr	r3, [r7, #4]
    6ad6:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6ad8:	687b      	ldr	r3, [r7, #4]
    6ada:	685b      	ldr	r3, [r3, #4]
    6adc:	2b00      	cmp	r3, #0
    6ade:	d102      	bne.n	6ae6 <_sercom_i2c_sync_analyse_flags+0x18a>
    6ae0:	697b      	ldr	r3, [r7, #20]
    6ae2:	2b00      	cmp	r3, #0
    6ae4:	d006      	beq.n	6af4 <_sercom_i2c_sync_analyse_flags+0x198>
    6ae6:	687b      	ldr	r3, [r7, #4]
    6ae8:	685b      	ldr	r3, [r3, #4]
    6aea:	2b01      	cmp	r3, #1
    6aec:	d105      	bne.n	6afa <_sercom_i2c_sync_analyse_flags+0x19e>
    6aee:	697b      	ldr	r3, [r7, #20]
    6af0:	2b00      	cmp	r3, #0
    6af2:	d002      	beq.n	6afa <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6af4:	68f8      	ldr	r0, [r7, #12]
    6af6:	4b21      	ldr	r3, [pc, #132]	; (6b7c <_sercom_i2c_sync_analyse_flags+0x220>)
    6af8:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6afa:	687b      	ldr	r3, [r7, #4]
    6afc:	685b      	ldr	r3, [r3, #4]
    6afe:	2b00      	cmp	r3, #0
    6b00:	d113      	bne.n	6b2a <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    6b02:	687b      	ldr	r3, [r7, #4]
    6b04:	885b      	ldrh	r3, [r3, #2]
    6b06:	b29b      	uxth	r3, r3
    6b08:	b21b      	sxth	r3, r3
    6b0a:	2b00      	cmp	r3, #0
    6b0c:	da05      	bge.n	6b1a <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6b0e:	68f8      	ldr	r0, [r7, #12]
    6b10:	4b1b      	ldr	r3, [pc, #108]	; (6b80 <_sercom_i2c_sync_analyse_flags+0x224>)
    6b12:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6b14:	68f8      	ldr	r0, [r7, #12]
    6b16:	4b15      	ldr	r3, [pc, #84]	; (6b6c <_sercom_i2c_sync_analyse_flags+0x210>)
    6b18:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6b1a:	687b      	ldr	r3, [r7, #4]
    6b1c:	885b      	ldrh	r3, [r3, #2]
    6b1e:	b29b      	uxth	r3, r3
    6b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6b24:	b29a      	uxth	r2, r3
    6b26:	687b      	ldr	r3, [r7, #4]
    6b28:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6b2a:	687b      	ldr	r3, [r7, #4]
    6b2c:	689c      	ldr	r4, [r3, #8]
    6b2e:	1c62      	adds	r2, r4, #1
    6b30:	687b      	ldr	r3, [r7, #4]
    6b32:	609a      	str	r2, [r3, #8]
    6b34:	68f8      	ldr	r0, [r7, #12]
    6b36:	4b13      	ldr	r3, [pc, #76]	; (6b84 <_sercom_i2c_sync_analyse_flags+0x228>)
    6b38:	4798      	blx	r3
    6b3a:	4603      	mov	r3, r0
    6b3c:	b2db      	uxtb	r3, r3
    6b3e:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6b40:	68f8      	ldr	r0, [r7, #12]
    6b42:	4b11      	ldr	r3, [pc, #68]	; (6b88 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6b44:	4798      	blx	r3
    6b46:	e005      	b.n	6b54 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6b48:	68f8      	ldr	r0, [r7, #12]
    6b4a:	4b0f      	ldr	r3, [pc, #60]	; (6b88 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6b4c:	4798      	blx	r3
			return I2C_NACK;
    6b4e:	f06f 0301 	mvn.w	r3, #1
    6b52:	e000      	b.n	6b56 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    6b54:	2300      	movs	r3, #0
}
    6b56:	4618      	mov	r0, r3
    6b58:	371c      	adds	r7, #28
    6b5a:	46bd      	mov	sp, r7
    6b5c:	bd90      	pop	{r4, r7, pc}
    6b5e:	bf00      	nop
    6b60:	00006421 	.word	0x00006421
    6b64:	0000682d 	.word	0x0000682d
    6b68:	0000632d 	.word	0x0000632d
    6b6c:	00006941 	.word	0x00006941
    6b70:	00006739 	.word	0x00006739
    6b74:	00006715 	.word	0x00006715
    6b78:	00006775 	.word	0x00006775
    6b7c:	000065d1 	.word	0x000065d1
    6b80:	000065a9 	.word	0x000065a9
    6b84:	00006799 	.word	0x00006799
    6b88:	00006347 	.word	0x00006347

00006b8c <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    6b8c:	b580      	push	{r7, lr}
    6b8e:	b086      	sub	sp, #24
    6b90:	af00      	add	r7, sp, #0
    6b92:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    6b94:	687b      	ldr	r3, [r7, #4]
    6b96:	691b      	ldr	r3, [r3, #16]
    6b98:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6b9a:	6938      	ldr	r0, [r7, #16]
    6b9c:	4b37      	ldr	r3, [pc, #220]	; (6c7c <_sercom_i2c_m_irq_handler+0xf0>)
    6b9e:	4798      	blx	r3
    6ba0:	4603      	mov	r3, r0
    6ba2:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    6ba4:	2300      	movs	r3, #0
    6ba6:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    6ba8:	687b      	ldr	r3, [r7, #4]
    6baa:	2b00      	cmp	r3, #0
    6bac:	bf14      	ite	ne
    6bae:	2301      	movne	r3, #1
    6bb0:	2300      	moveq	r3, #0
    6bb2:	b2db      	uxtb	r3, r3
    6bb4:	f240 421e 	movw	r2, #1054	; 0x41e
    6bb8:	4931      	ldr	r1, [pc, #196]	; (6c80 <_sercom_i2c_m_irq_handler+0xf4>)
    6bba:	4618      	mov	r0, r3
    6bbc:	4b31      	ldr	r3, [pc, #196]	; (6c84 <_sercom_i2c_m_irq_handler+0xf8>)
    6bbe:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6bc0:	687b      	ldr	r3, [r7, #4]
    6bc2:	691b      	ldr	r3, [r3, #16]
    6bc4:	2b00      	cmp	r3, #0
    6bc6:	bf14      	ite	ne
    6bc8:	2301      	movne	r3, #1
    6bca:	2300      	moveq	r3, #0
    6bcc:	b2db      	uxtb	r3, r3
    6bce:	f240 421f 	movw	r2, #1055	; 0x41f
    6bd2:	492b      	ldr	r1, [pc, #172]	; (6c80 <_sercom_i2c_m_irq_handler+0xf4>)
    6bd4:	4618      	mov	r0, r3
    6bd6:	4b2b      	ldr	r3, [pc, #172]	; (6c84 <_sercom_i2c_m_irq_handler+0xf8>)
    6bd8:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    6bda:	bf00      	nop
    6bdc:	68fb      	ldr	r3, [r7, #12]
    6bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6be2:	2b00      	cmp	r3, #0
    6be4:	d126      	bne.n	6c34 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6be6:	687b      	ldr	r3, [r7, #4]
    6be8:	461a      	mov	r2, r3
    6bea:	68f9      	ldr	r1, [r7, #12]
    6bec:	6938      	ldr	r0, [r7, #16]
    6bee:	4b26      	ldr	r3, [pc, #152]	; (6c88 <_sercom_i2c_m_irq_handler+0xfc>)
    6bf0:	4798      	blx	r3
    6bf2:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    6bf4:	697b      	ldr	r3, [r7, #20]
    6bf6:	2b00      	cmp	r3, #0
    6bf8:	d11b      	bne.n	6c32 <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    6bfa:	68fb      	ldr	r3, [r7, #12]
    6bfc:	f003 0301 	and.w	r3, r3, #1
    6c00:	2b00      	cmp	r3, #0
    6c02:	d008      	beq.n	6c16 <_sercom_i2c_m_irq_handler+0x8a>
    6c04:	687b      	ldr	r3, [r7, #4]
    6c06:	699b      	ldr	r3, [r3, #24]
    6c08:	2b00      	cmp	r3, #0
    6c0a:	d004      	beq.n	6c16 <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    6c0c:	687b      	ldr	r3, [r7, #4]
    6c0e:	699b      	ldr	r3, [r3, #24]
    6c10:	6878      	ldr	r0, [r7, #4]
    6c12:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    6c14:	e02e      	b.n	6c74 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6c16:	68fb      	ldr	r3, [r7, #12]
    6c18:	f003 0302 	and.w	r3, r3, #2
    6c1c:	2b00      	cmp	r3, #0
    6c1e:	d029      	beq.n	6c74 <_sercom_i2c_m_irq_handler+0xe8>
    6c20:	687b      	ldr	r3, [r7, #4]
    6c22:	69db      	ldr	r3, [r3, #28]
    6c24:	2b00      	cmp	r3, #0
    6c26:	d025      	beq.n	6c74 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    6c28:	687b      	ldr	r3, [r7, #4]
    6c2a:	69db      	ldr	r3, [r3, #28]
    6c2c:	6878      	ldr	r0, [r7, #4]
    6c2e:	4798      	blx	r3
		return;
    6c30:	e020      	b.n	6c74 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    6c32:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6c34:	687b      	ldr	r3, [r7, #4]
    6c36:	885b      	ldrh	r3, [r3, #2]
    6c38:	b29b      	uxth	r3, r3
    6c3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6c3e:	b29a      	uxth	r2, r3
    6c40:	687b      	ldr	r3, [r7, #4]
    6c42:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    6c44:	687b      	ldr	r3, [r7, #4]
    6c46:	695b      	ldr	r3, [r3, #20]
    6c48:	2b00      	cmp	r3, #0
    6c4a:	d014      	beq.n	6c76 <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    6c4c:	697b      	ldr	r3, [r7, #20]
    6c4e:	2b00      	cmp	r3, #0
    6c50:	d005      	beq.n	6c5e <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    6c52:	687b      	ldr	r3, [r7, #4]
    6c54:	695b      	ldr	r3, [r3, #20]
    6c56:	6979      	ldr	r1, [r7, #20]
    6c58:	6878      	ldr	r0, [r7, #4]
    6c5a:	4798      	blx	r3
    6c5c:	e005      	b.n	6c6a <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    6c5e:	687b      	ldr	r3, [r7, #4]
    6c60:	695b      	ldr	r3, [r3, #20]
    6c62:	f06f 0104 	mvn.w	r1, #4
    6c66:	6878      	ldr	r0, [r7, #4]
    6c68:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    6c6a:	2180      	movs	r1, #128	; 0x80
    6c6c:	6938      	ldr	r0, [r7, #16]
    6c6e:	4b07      	ldr	r3, [pc, #28]	; (6c8c <_sercom_i2c_m_irq_handler+0x100>)
    6c70:	4798      	blx	r3
    6c72:	e000      	b.n	6c76 <_sercom_i2c_m_irq_handler+0xea>
		return;
    6c74:	bf00      	nop
	}
}
    6c76:	3718      	adds	r7, #24
    6c78:	46bd      	mov	sp, r7
    6c7a:	bd80      	pop	{r7, pc}
    6c7c:	00006361 	.word	0x00006361
    6c80:	00011124 	.word	0x00011124
    6c84:	00003cd5 	.word	0x00003cd5
    6c88:	0000695d 	.word	0x0000695d
    6c8c:	0000637b 	.word	0x0000637b

00006c90 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    6c90:	b580      	push	{r7, lr}
    6c92:	b082      	sub	sp, #8
    6c94:	af00      	add	r7, sp, #0
    6c96:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    6c98:	6878      	ldr	r0, [r7, #4]
    6c9a:	4b05      	ldr	r3, [pc, #20]	; (6cb0 <_sercom_get_irq_num+0x20>)
    6c9c:	4798      	blx	r3
    6c9e:	4603      	mov	r3, r0
    6ca0:	009b      	lsls	r3, r3, #2
    6ca2:	b2db      	uxtb	r3, r3
    6ca4:	332e      	adds	r3, #46	; 0x2e
    6ca6:	b2db      	uxtb	r3, r3
}
    6ca8:	4618      	mov	r0, r3
    6caa:	3708      	adds	r7, #8
    6cac:	46bd      	mov	sp, r7
    6cae:	bd80      	pop	{r7, pc}
    6cb0:	00006851 	.word	0x00006851

00006cb4 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    6cb4:	b580      	push	{r7, lr}
    6cb6:	b086      	sub	sp, #24
    6cb8:	af00      	add	r7, sp, #0
    6cba:	6078      	str	r0, [r7, #4]
    6cbc:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    6cbe:	687b      	ldr	r3, [r7, #4]
    6cc0:	2b00      	cmp	r3, #0
    6cc2:	bf14      	ite	ne
    6cc4:	2301      	movne	r3, #1
    6cc6:	2300      	moveq	r3, #0
    6cc8:	b2db      	uxtb	r3, r3
    6cca:	f240 4292 	movw	r2, #1170	; 0x492
    6cce:	491d      	ldr	r1, [pc, #116]	; (6d44 <_i2c_m_async_init+0x90>)
    6cd0:	4618      	mov	r0, r3
    6cd2:	4b1d      	ldr	r3, [pc, #116]	; (6d48 <_i2c_m_async_init+0x94>)
    6cd4:	4798      	blx	r3

	i2c_dev->hw = hw;
    6cd6:	687b      	ldr	r3, [r7, #4]
    6cd8:	683a      	ldr	r2, [r7, #0]
    6cda:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6cdc:	687b      	ldr	r3, [r7, #4]
    6cde:	6839      	ldr	r1, [r7, #0]
    6ce0:	4618      	mov	r0, r3
    6ce2:	4b1a      	ldr	r3, [pc, #104]	; (6d4c <_i2c_m_async_init+0x98>)
    6ce4:	4798      	blx	r3
    6ce6:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    6ce8:	68fb      	ldr	r3, [r7, #12]
    6cea:	2b00      	cmp	r3, #0
    6cec:	d001      	beq.n	6cf2 <_i2c_m_async_init+0x3e>
		return init_status;
    6cee:	68fb      	ldr	r3, [r7, #12]
    6cf0:	e024      	b.n	6d3c <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    6cf2:	6879      	ldr	r1, [r7, #4]
    6cf4:	6838      	ldr	r0, [r7, #0]
    6cf6:	4b16      	ldr	r3, [pc, #88]	; (6d50 <_i2c_m_async_init+0x9c>)
    6cf8:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6cfa:	6838      	ldr	r0, [r7, #0]
    6cfc:	4b15      	ldr	r3, [pc, #84]	; (6d54 <_i2c_m_async_init+0xa0>)
    6cfe:	4798      	blx	r3
    6d00:	4603      	mov	r3, r0
    6d02:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6d04:	2300      	movs	r3, #0
    6d06:	613b      	str	r3, [r7, #16]
    6d08:	e014      	b.n	6d34 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    6d0a:	7dfb      	ldrb	r3, [r7, #23]
    6d0c:	b21b      	sxth	r3, r3
    6d0e:	4618      	mov	r0, r3
    6d10:	4b11      	ldr	r3, [pc, #68]	; (6d58 <_i2c_m_async_init+0xa4>)
    6d12:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    6d14:	7dfb      	ldrb	r3, [r7, #23]
    6d16:	b21b      	sxth	r3, r3
    6d18:	4618      	mov	r0, r3
    6d1a:	4b10      	ldr	r3, [pc, #64]	; (6d5c <_i2c_m_async_init+0xa8>)
    6d1c:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    6d1e:	7dfb      	ldrb	r3, [r7, #23]
    6d20:	b21b      	sxth	r3, r3
    6d22:	4618      	mov	r0, r3
    6d24:	4b0e      	ldr	r3, [pc, #56]	; (6d60 <_i2c_m_async_init+0xac>)
    6d26:	4798      	blx	r3
		irq++;
    6d28:	7dfb      	ldrb	r3, [r7, #23]
    6d2a:	3301      	adds	r3, #1
    6d2c:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6d2e:	693b      	ldr	r3, [r7, #16]
    6d30:	3301      	adds	r3, #1
    6d32:	613b      	str	r3, [r7, #16]
    6d34:	693b      	ldr	r3, [r7, #16]
    6d36:	2b03      	cmp	r3, #3
    6d38:	d9e7      	bls.n	6d0a <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    6d3a:	2300      	movs	r3, #0
}
    6d3c:	4618      	mov	r0, r3
    6d3e:	3718      	adds	r7, #24
    6d40:	46bd      	mov	sp, r7
    6d42:	bd80      	pop	{r7, pc}
    6d44:	00011124 	.word	0x00011124
    6d48:	00003cd5 	.word	0x00003cd5
    6d4c:	0000726d 	.word	0x0000726d
    6d50:	000068ad 	.word	0x000068ad
    6d54:	00006c91 	.word	0x00006c91
    6d58:	00006215 	.word	0x00006215
    6d5c:	00006259 	.word	0x00006259
    6d60:	000061d9 	.word	0x000061d9

00006d64 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    6d64:	b590      	push	{r4, r7, lr}
    6d66:	b087      	sub	sp, #28
    6d68:	af00      	add	r7, sp, #0
    6d6a:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6d6c:	687b      	ldr	r3, [r7, #4]
    6d6e:	691b      	ldr	r3, [r3, #16]
    6d70:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6d72:	687b      	ldr	r3, [r7, #4]
    6d74:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6d76:	6978      	ldr	r0, [r7, #20]
    6d78:	4b33      	ldr	r3, [pc, #204]	; (6e48 <_sercom_i2c_send_address+0xe4>)
    6d7a:	4798      	blx	r3
    6d7c:	4603      	mov	r3, r0
    6d7e:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    6d80:	687b      	ldr	r3, [r7, #4]
    6d82:	2b00      	cmp	r3, #0
    6d84:	bf14      	ite	ne
    6d86:	2301      	movne	r3, #1
    6d88:	2300      	moveq	r3, #0
    6d8a:	b2db      	uxtb	r3, r3
    6d8c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
    6d90:	492e      	ldr	r1, [pc, #184]	; (6e4c <_sercom_i2c_send_address+0xe8>)
    6d92:	4618      	mov	r0, r3
    6d94:	4b2e      	ldr	r3, [pc, #184]	; (6e50 <_sercom_i2c_send_address+0xec>)
    6d96:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6d98:	693b      	ldr	r3, [r7, #16]
    6d9a:	685b      	ldr	r3, [r3, #4]
    6d9c:	2b01      	cmp	r3, #1
    6d9e:	d106      	bne.n	6dae <_sercom_i2c_send_address+0x4a>
    6da0:	68fb      	ldr	r3, [r7, #12]
    6da2:	2b00      	cmp	r3, #0
    6da4:	d003      	beq.n	6dae <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6da6:	6978      	ldr	r0, [r7, #20]
    6da8:	4b2a      	ldr	r3, [pc, #168]	; (6e54 <_sercom_i2c_send_address+0xf0>)
    6daa:	4798      	blx	r3
    6dac:	e002      	b.n	6db4 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6dae:	6978      	ldr	r0, [r7, #20]
    6db0:	4b29      	ldr	r3, [pc, #164]	; (6e58 <_sercom_i2c_send_address+0xf4>)
    6db2:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6db4:	693b      	ldr	r3, [r7, #16]
    6db6:	881b      	ldrh	r3, [r3, #0]
    6db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6dbc:	2b00      	cmp	r3, #0
    6dbe:	d022      	beq.n	6e06 <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6dc0:	693b      	ldr	r3, [r7, #16]
    6dc2:	885b      	ldrh	r3, [r3, #2]
    6dc4:	b29b      	uxth	r3, r3
    6dc6:	f003 0301 	and.w	r3, r3, #1
    6dca:	2b00      	cmp	r3, #0
    6dcc:	d007      	beq.n	6dde <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6dce:	693b      	ldr	r3, [r7, #16]
    6dd0:	885b      	ldrh	r3, [r3, #2]
    6dd2:	b29b      	uxth	r3, r3
    6dd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6dd8:	b29a      	uxth	r2, r3
    6dda:	693b      	ldr	r3, [r7, #16]
    6ddc:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    6dde:	693b      	ldr	r3, [r7, #16]
    6de0:	881b      	ldrh	r3, [r3, #0]
    6de2:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6de4:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6de8:	401c      	ands	r4, r3
    6dea:	6978      	ldr	r0, [r7, #20]
    6dec:	4b1b      	ldr	r3, [pc, #108]	; (6e5c <_sercom_i2c_send_address+0xf8>)
    6dee:	4798      	blx	r3
    6df0:	4603      	mov	r3, r0
    6df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6df6:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6dfc:	4619      	mov	r1, r3
    6dfe:	6978      	ldr	r0, [r7, #20]
    6e00:	4b17      	ldr	r3, [pc, #92]	; (6e60 <_sercom_i2c_send_address+0xfc>)
    6e02:	4798      	blx	r3
    6e04:	e01a      	b.n	6e3c <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6e06:	693b      	ldr	r3, [r7, #16]
    6e08:	881b      	ldrh	r3, [r3, #0]
    6e0a:	005b      	lsls	r3, r3, #1
    6e0c:	b2db      	uxtb	r3, r3
    6e0e:	693a      	ldr	r2, [r7, #16]
    6e10:	8852      	ldrh	r2, [r2, #2]
    6e12:	b292      	uxth	r2, r2
    6e14:	f002 0201 	and.w	r2, r2, #1
    6e18:	2a00      	cmp	r2, #0
    6e1a:	bf14      	ite	ne
    6e1c:	2201      	movne	r2, #1
    6e1e:	2200      	moveq	r2, #0
    6e20:	b2d2      	uxtb	r2, r2
    6e22:	4313      	orrs	r3, r2
    6e24:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6e26:	6978      	ldr	r0, [r7, #20]
    6e28:	4b0c      	ldr	r3, [pc, #48]	; (6e5c <_sercom_i2c_send_address+0xf8>)
    6e2a:	4798      	blx	r3
    6e2c:	4603      	mov	r3, r0
    6e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6e32:	4323      	orrs	r3, r4
    6e34:	4619      	mov	r1, r3
    6e36:	6978      	ldr	r0, [r7, #20]
    6e38:	4b09      	ldr	r3, [pc, #36]	; (6e60 <_sercom_i2c_send_address+0xfc>)
    6e3a:	4798      	blx	r3
	}

	return ERR_NONE;
    6e3c:	2300      	movs	r3, #0
}
    6e3e:	4618      	mov	r0, r3
    6e40:	371c      	adds	r7, #28
    6e42:	46bd      	mov	sp, r7
    6e44:	bd90      	pop	{r4, r7, pc}
    6e46:	bf00      	nop
    6e48:	00006421 	.word	0x00006421
    6e4c:	00011124 	.word	0x00011124
    6e50:	00003cd5 	.word	0x00003cd5
    6e54:	000065d1 	.word	0x000065d1
    6e58:	000065f9 	.word	0x000065f9
    6e5c:	00006739 	.word	0x00006739
    6e60:	00006715 	.word	0x00006715

00006e64 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    6e64:	b580      	push	{r7, lr}
    6e66:	b084      	sub	sp, #16
    6e68:	af00      	add	r7, sp, #0
    6e6a:	6078      	str	r0, [r7, #4]
    6e6c:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    6e6e:	687b      	ldr	r3, [r7, #4]
    6e70:	2b00      	cmp	r3, #0
    6e72:	bf14      	ite	ne
    6e74:	2301      	movne	r3, #1
    6e76:	2300      	moveq	r3, #0
    6e78:	b2db      	uxtb	r3, r3
    6e7a:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
    6e7e:	492a      	ldr	r1, [pc, #168]	; (6f28 <_i2c_m_async_transfer+0xc4>)
    6e80:	4618      	mov	r0, r3
    6e82:	4b2a      	ldr	r3, [pc, #168]	; (6f2c <_i2c_m_async_transfer+0xc8>)
    6e84:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6e86:	687b      	ldr	r3, [r7, #4]
    6e88:	691b      	ldr	r3, [r3, #16]
    6e8a:	2b00      	cmp	r3, #0
    6e8c:	bf14      	ite	ne
    6e8e:	2301      	movne	r3, #1
    6e90:	2300      	moveq	r3, #0
    6e92:	b2db      	uxtb	r3, r3
    6e94:	f240 42e9 	movw	r2, #1257	; 0x4e9
    6e98:	4923      	ldr	r1, [pc, #140]	; (6f28 <_i2c_m_async_transfer+0xc4>)
    6e9a:	4618      	mov	r0, r3
    6e9c:	4b23      	ldr	r3, [pc, #140]	; (6f2c <_i2c_m_async_transfer+0xc8>)
    6e9e:	4798      	blx	r3
	ASSERT(msg);
    6ea0:	683b      	ldr	r3, [r7, #0]
    6ea2:	2b00      	cmp	r3, #0
    6ea4:	bf14      	ite	ne
    6ea6:	2301      	movne	r3, #1
    6ea8:	2300      	moveq	r3, #0
    6eaa:	b2db      	uxtb	r3, r3
    6eac:	f240 42ea 	movw	r2, #1258	; 0x4ea
    6eb0:	491d      	ldr	r1, [pc, #116]	; (6f28 <_i2c_m_async_transfer+0xc4>)
    6eb2:	4618      	mov	r0, r3
    6eb4:	4b1d      	ldr	r3, [pc, #116]	; (6f2c <_i2c_m_async_transfer+0xc8>)
    6eb6:	4798      	blx	r3

	if (msg->len == 0) {
    6eb8:	683b      	ldr	r3, [r7, #0]
    6eba:	685b      	ldr	r3, [r3, #4]
    6ebc:	2b00      	cmp	r3, #0
    6ebe:	d101      	bne.n	6ec4 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    6ec0:	2300      	movs	r3, #0
    6ec2:	e02d      	b.n	6f20 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6ec4:	687b      	ldr	r3, [r7, #4]
    6ec6:	885b      	ldrh	r3, [r3, #2]
    6ec8:	b29b      	uxth	r3, r3
    6eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6ece:	2b00      	cmp	r3, #0
    6ed0:	d002      	beq.n	6ed8 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    6ed2:	f06f 0303 	mvn.w	r3, #3
    6ed6:	e023      	b.n	6f20 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    6ed8:	683b      	ldr	r3, [r7, #0]
    6eda:	885b      	ldrh	r3, [r3, #2]
    6edc:	b29b      	uxth	r3, r3
    6ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6ee2:	b29a      	uxth	r2, r3
    6ee4:	683b      	ldr	r3, [r7, #0]
    6ee6:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6ee8:	687b      	ldr	r3, [r7, #4]
    6eea:	683a      	ldr	r2, [r7, #0]
    6eec:	ca07      	ldmia	r2, {r0, r1, r2}
    6eee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    6ef2:	687b      	ldr	r3, [r7, #4]
    6ef4:	691b      	ldr	r3, [r3, #16]
    6ef6:	4618      	mov	r0, r3
    6ef8:	4b0d      	ldr	r3, [pc, #52]	; (6f30 <_i2c_m_async_transfer+0xcc>)
    6efa:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    6efc:	6878      	ldr	r0, [r7, #4]
    6efe:	4b0d      	ldr	r3, [pc, #52]	; (6f34 <_i2c_m_async_transfer+0xd0>)
    6f00:	4798      	blx	r3
    6f02:	60f8      	str	r0, [r7, #12]

	if (ret) {
    6f04:	68fb      	ldr	r3, [r7, #12]
    6f06:	2b00      	cmp	r3, #0
    6f08:	d009      	beq.n	6f1e <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6f0a:	687b      	ldr	r3, [r7, #4]
    6f0c:	885b      	ldrh	r3, [r3, #2]
    6f0e:	b29b      	uxth	r3, r3
    6f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6f14:	b29a      	uxth	r2, r3
    6f16:	687b      	ldr	r3, [r7, #4]
    6f18:	805a      	strh	r2, [r3, #2]

		return ret;
    6f1a:	68fb      	ldr	r3, [r7, #12]
    6f1c:	e000      	b.n	6f20 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    6f1e:	2300      	movs	r3, #0
}
    6f20:	4618      	mov	r0, r3
    6f22:	3710      	adds	r7, #16
    6f24:	46bd      	mov	sp, r7
    6f26:	bd80      	pop	{r7, pc}
    6f28:	00011124 	.word	0x00011124
    6f2c:	00003cd5 	.word	0x00003cd5
    6f30:	00006581 	.word	0x00006581
    6f34:	00006d65 	.word	0x00006d65

00006f38 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    6f38:	b480      	push	{r7}
    6f3a:	b085      	sub	sp, #20
    6f3c:	af00      	add	r7, sp, #0
    6f3e:	60f8      	str	r0, [r7, #12]
    6f40:	460b      	mov	r3, r1
    6f42:	607a      	str	r2, [r7, #4]
    6f44:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    6f46:	7afb      	ldrb	r3, [r7, #11]
    6f48:	2b01      	cmp	r3, #1
    6f4a:	d008      	beq.n	6f5e <_i2c_m_async_register_callback+0x26>
    6f4c:	2b02      	cmp	r3, #2
    6f4e:	d00a      	beq.n	6f66 <_i2c_m_async_register_callback+0x2e>
    6f50:	2b00      	cmp	r3, #0
    6f52:	d000      	beq.n	6f56 <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    6f54:	e00b      	b.n	6f6e <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    6f56:	68fb      	ldr	r3, [r7, #12]
    6f58:	687a      	ldr	r2, [r7, #4]
    6f5a:	615a      	str	r2, [r3, #20]
		break;
    6f5c:	e007      	b.n	6f6e <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    6f5e:	68fb      	ldr	r3, [r7, #12]
    6f60:	687a      	ldr	r2, [r7, #4]
    6f62:	619a      	str	r2, [r3, #24]
		break;
    6f64:	e003      	b.n	6f6e <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    6f66:	68fb      	ldr	r3, [r7, #12]
    6f68:	687a      	ldr	r2, [r7, #4]
    6f6a:	61da      	str	r2, [r3, #28]
		break;
    6f6c:	bf00      	nop
	}

	return ERR_NONE;
    6f6e:	2300      	movs	r3, #0
}
    6f70:	4618      	mov	r0, r3
    6f72:	3714      	adds	r7, #20
    6f74:	46bd      	mov	sp, r7
    6f76:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f7a:	4770      	bx	lr

00006f7c <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    6f7c:	b580      	push	{r7, lr}
    6f7e:	b082      	sub	sp, #8
    6f80:	af00      	add	r7, sp, #0
    6f82:	6078      	str	r0, [r7, #4]
    6f84:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    6f86:	687b      	ldr	r3, [r7, #4]
    6f88:	2b00      	cmp	r3, #0
    6f8a:	bf14      	ite	ne
    6f8c:	2301      	movne	r3, #1
    6f8e:	2300      	moveq	r3, #0
    6f90:	b2db      	uxtb	r3, r3
    6f92:	f44f 62a9 	mov.w	r2, #1352	; 0x548
    6f96:	4908      	ldr	r1, [pc, #32]	; (6fb8 <_i2c_m_sync_init+0x3c>)
    6f98:	4618      	mov	r0, r3
    6f9a:	4b08      	ldr	r3, [pc, #32]	; (6fbc <_i2c_m_sync_init+0x40>)
    6f9c:	4798      	blx	r3

	i2c_dev->hw = hw;
    6f9e:	687b      	ldr	r3, [r7, #4]
    6fa0:	683a      	ldr	r2, [r7, #0]
    6fa2:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6fa4:	687b      	ldr	r3, [r7, #4]
    6fa6:	6839      	ldr	r1, [r7, #0]
    6fa8:	4618      	mov	r0, r3
    6faa:	4b05      	ldr	r3, [pc, #20]	; (6fc0 <_i2c_m_sync_init+0x44>)
    6fac:	4798      	blx	r3
    6fae:	4603      	mov	r3, r0
}
    6fb0:	4618      	mov	r0, r3
    6fb2:	3708      	adds	r7, #8
    6fb4:	46bd      	mov	sp, r7
    6fb6:	bd80      	pop	{r7, pc}
    6fb8:	00011124 	.word	0x00011124
    6fbc:	00003cd5 	.word	0x00003cd5
    6fc0:	0000726d 	.word	0x0000726d

00006fc4 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    6fc4:	b580      	push	{r7, lr}
    6fc6:	b084      	sub	sp, #16
    6fc8:	af00      	add	r7, sp, #0
    6fca:	6078      	str	r0, [r7, #4]
    6fcc:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    6fce:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6fd2:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    6fd4:	687b      	ldr	r3, [r7, #4]
    6fd6:	691b      	ldr	r3, [r3, #16]
    6fd8:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6fda:	68b8      	ldr	r0, [r7, #8]
    6fdc:	4b0f      	ldr	r3, [pc, #60]	; (701c <_sercom_i2c_sync_wait_bus+0x58>)
    6fde:	4798      	blx	r3
    6fe0:	4603      	mov	r3, r0
    6fe2:	461a      	mov	r2, r3
    6fe4:	683b      	ldr	r3, [r7, #0]
    6fe6:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    6fe8:	68fb      	ldr	r3, [r7, #12]
    6fea:	1e5a      	subs	r2, r3, #1
    6fec:	60fa      	str	r2, [r7, #12]
    6fee:	2b00      	cmp	r3, #0
    6ff0:	d102      	bne.n	6ff8 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    6ff2:	f06f 0304 	mvn.w	r3, #4
    6ff6:	e00c      	b.n	7012 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    6ff8:	683b      	ldr	r3, [r7, #0]
    6ffa:	681b      	ldr	r3, [r3, #0]
    6ffc:	f003 0301 	and.w	r3, r3, #1
    7000:	2b00      	cmp	r3, #0
    7002:	d105      	bne.n	7010 <_sercom_i2c_sync_wait_bus+0x4c>
    7004:	683b      	ldr	r3, [r7, #0]
    7006:	681b      	ldr	r3, [r3, #0]
    7008:	f003 0302 	and.w	r3, r3, #2
    700c:	2b00      	cmp	r3, #0
    700e:	d0e4      	beq.n	6fda <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    7010:	2300      	movs	r3, #0
}
    7012:	4618      	mov	r0, r3
    7014:	3710      	adds	r7, #16
    7016:	46bd      	mov	sp, r7
    7018:	bd80      	pop	{r7, pc}
    701a:	bf00      	nop
    701c:	00006361 	.word	0x00006361

00007020 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    7020:	b590      	push	{r4, r7, lr}
    7022:	b087      	sub	sp, #28
    7024:	af00      	add	r7, sp, #0
    7026:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    7028:	687b      	ldr	r3, [r7, #4]
    702a:	691b      	ldr	r3, [r3, #16]
    702c:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    702e:	687b      	ldr	r3, [r7, #4]
    7030:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    7032:	6978      	ldr	r0, [r7, #20]
    7034:	4b39      	ldr	r3, [pc, #228]	; (711c <_sercom_i2c_sync_send_address+0xfc>)
    7036:	4798      	blx	r3
    7038:	4603      	mov	r3, r0
    703a:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    703c:	687b      	ldr	r3, [r7, #4]
    703e:	2b00      	cmp	r3, #0
    7040:	bf14      	ite	ne
    7042:	2301      	movne	r3, #1
    7044:	2300      	moveq	r3, #0
    7046:	b2db      	uxtb	r3, r3
    7048:	f240 52d5 	movw	r2, #1493	; 0x5d5
    704c:	4934      	ldr	r1, [pc, #208]	; (7120 <_sercom_i2c_sync_send_address+0x100>)
    704e:	4618      	mov	r0, r3
    7050:	4b34      	ldr	r3, [pc, #208]	; (7124 <_sercom_i2c_sync_send_address+0x104>)
    7052:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    7054:	693b      	ldr	r3, [r7, #16]
    7056:	685b      	ldr	r3, [r3, #4]
    7058:	2b01      	cmp	r3, #1
    705a:	d106      	bne.n	706a <_sercom_i2c_sync_send_address+0x4a>
    705c:	68fb      	ldr	r3, [r7, #12]
    705e:	2b00      	cmp	r3, #0
    7060:	d003      	beq.n	706a <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    7062:	6978      	ldr	r0, [r7, #20]
    7064:	4b30      	ldr	r3, [pc, #192]	; (7128 <_sercom_i2c_sync_send_address+0x108>)
    7066:	4798      	blx	r3
    7068:	e002      	b.n	7070 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    706a:	6978      	ldr	r0, [r7, #20]
    706c:	4b2f      	ldr	r3, [pc, #188]	; (712c <_sercom_i2c_sync_send_address+0x10c>)
    706e:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    7070:	693b      	ldr	r3, [r7, #16]
    7072:	881b      	ldrh	r3, [r3, #0]
    7074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    7078:	2b00      	cmp	r3, #0
    707a:	d022      	beq.n	70c2 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    707c:	693b      	ldr	r3, [r7, #16]
    707e:	885b      	ldrh	r3, [r3, #2]
    7080:	b29b      	uxth	r3, r3
    7082:	f003 0301 	and.w	r3, r3, #1
    7086:	2b00      	cmp	r3, #0
    7088:	d007      	beq.n	709a <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    708a:	693b      	ldr	r3, [r7, #16]
    708c:	885b      	ldrh	r3, [r3, #2]
    708e:	b29b      	uxth	r3, r3
    7090:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    7094:	b29a      	uxth	r2, r3
    7096:	693b      	ldr	r3, [r7, #16]
    7098:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    709a:	693b      	ldr	r3, [r7, #16]
    709c:	881b      	ldrh	r3, [r3, #0]
    709e:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    70a0:	f240 74fe 	movw	r4, #2046	; 0x7fe
    70a4:	401c      	ands	r4, r3
    70a6:	6978      	ldr	r0, [r7, #20]
    70a8:	4b21      	ldr	r3, [pc, #132]	; (7130 <_sercom_i2c_sync_send_address+0x110>)
    70aa:	4798      	blx	r3
    70ac:	4603      	mov	r3, r0
    70ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    70b2:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    70b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    70b8:	4619      	mov	r1, r3
    70ba:	6978      	ldr	r0, [r7, #20]
    70bc:	4b1d      	ldr	r3, [pc, #116]	; (7134 <_sercom_i2c_sync_send_address+0x114>)
    70be:	4798      	blx	r3
    70c0:	e01a      	b.n	70f8 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    70c2:	693b      	ldr	r3, [r7, #16]
    70c4:	881b      	ldrh	r3, [r3, #0]
    70c6:	005b      	lsls	r3, r3, #1
    70c8:	b2db      	uxtb	r3, r3
    70ca:	693a      	ldr	r2, [r7, #16]
    70cc:	8852      	ldrh	r2, [r2, #2]
    70ce:	b292      	uxth	r2, r2
    70d0:	f002 0201 	and.w	r2, r2, #1
    70d4:	2a00      	cmp	r2, #0
    70d6:	bf14      	ite	ne
    70d8:	2201      	movne	r2, #1
    70da:	2200      	moveq	r2, #0
    70dc:	b2d2      	uxtb	r2, r2
    70de:	4313      	orrs	r3, r2
    70e0:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    70e2:	6978      	ldr	r0, [r7, #20]
    70e4:	4b12      	ldr	r3, [pc, #72]	; (7130 <_sercom_i2c_sync_send_address+0x110>)
    70e6:	4798      	blx	r3
    70e8:	4603      	mov	r3, r0
    70ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    70ee:	4323      	orrs	r3, r4
    70f0:	4619      	mov	r1, r3
    70f2:	6978      	ldr	r0, [r7, #20]
    70f4:	4b0f      	ldr	r3, [pc, #60]	; (7134 <_sercom_i2c_sync_send_address+0x114>)
    70f6:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    70f8:	f107 0308 	add.w	r3, r7, #8
    70fc:	4619      	mov	r1, r3
    70fe:	6878      	ldr	r0, [r7, #4]
    7100:	4b0d      	ldr	r3, [pc, #52]	; (7138 <_sercom_i2c_sync_send_address+0x118>)
    7102:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    7104:	68bb      	ldr	r3, [r7, #8]
    7106:	693a      	ldr	r2, [r7, #16]
    7108:	4619      	mov	r1, r3
    710a:	6978      	ldr	r0, [r7, #20]
    710c:	4b0b      	ldr	r3, [pc, #44]	; (713c <_sercom_i2c_sync_send_address+0x11c>)
    710e:	4798      	blx	r3
    7110:	4603      	mov	r3, r0
}
    7112:	4618      	mov	r0, r3
    7114:	371c      	adds	r7, #28
    7116:	46bd      	mov	sp, r7
    7118:	bd90      	pop	{r4, r7, pc}
    711a:	bf00      	nop
    711c:	00006421 	.word	0x00006421
    7120:	00011124 	.word	0x00011124
    7124:	00003cd5 	.word	0x00003cd5
    7128:	000065d1 	.word	0x000065d1
    712c:	000065f9 	.word	0x000065f9
    7130:	00006739 	.word	0x00006739
    7134:	00006715 	.word	0x00006715
    7138:	00006fc5 	.word	0x00006fc5
    713c:	0000695d 	.word	0x0000695d

00007140 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    7140:	b580      	push	{r7, lr}
    7142:	b086      	sub	sp, #24
    7144:	af00      	add	r7, sp, #0
    7146:	6078      	str	r0, [r7, #4]
    7148:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    714a:	687b      	ldr	r3, [r7, #4]
    714c:	691b      	ldr	r3, [r3, #16]
    714e:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    7150:	687b      	ldr	r3, [r7, #4]
    7152:	2b00      	cmp	r3, #0
    7154:	bf14      	ite	ne
    7156:	2301      	movne	r3, #1
    7158:	2300      	moveq	r3, #0
    715a:	b2db      	uxtb	r3, r3
    715c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    7160:	493b      	ldr	r1, [pc, #236]	; (7250 <_i2c_m_sync_transfer+0x110>)
    7162:	4618      	mov	r0, r3
    7164:	4b3b      	ldr	r3, [pc, #236]	; (7254 <_i2c_m_sync_transfer+0x114>)
    7166:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    7168:	687b      	ldr	r3, [r7, #4]
    716a:	691b      	ldr	r3, [r3, #16]
    716c:	2b00      	cmp	r3, #0
    716e:	bf14      	ite	ne
    7170:	2301      	movne	r3, #1
    7172:	2300      	moveq	r3, #0
    7174:	b2db      	uxtb	r3, r3
    7176:	f240 6201 	movw	r2, #1537	; 0x601
    717a:	4935      	ldr	r1, [pc, #212]	; (7250 <_i2c_m_sync_transfer+0x110>)
    717c:	4618      	mov	r0, r3
    717e:	4b35      	ldr	r3, [pc, #212]	; (7254 <_i2c_m_sync_transfer+0x114>)
    7180:	4798      	blx	r3
	ASSERT(msg);
    7182:	683b      	ldr	r3, [r7, #0]
    7184:	2b00      	cmp	r3, #0
    7186:	bf14      	ite	ne
    7188:	2301      	movne	r3, #1
    718a:	2300      	moveq	r3, #0
    718c:	b2db      	uxtb	r3, r3
    718e:	f240 6202 	movw	r2, #1538	; 0x602
    7192:	492f      	ldr	r1, [pc, #188]	; (7250 <_i2c_m_sync_transfer+0x110>)
    7194:	4618      	mov	r0, r3
    7196:	4b2f      	ldr	r3, [pc, #188]	; (7254 <_i2c_m_sync_transfer+0x114>)
    7198:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    719a:	687b      	ldr	r3, [r7, #4]
    719c:	885b      	ldrh	r3, [r3, #2]
    719e:	b29b      	uxth	r3, r3
    71a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    71a4:	2b00      	cmp	r3, #0
    71a6:	d002      	beq.n	71ae <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    71a8:	f06f 0305 	mvn.w	r3, #5
    71ac:	e04c      	b.n	7248 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    71ae:	683b      	ldr	r3, [r7, #0]
    71b0:	885b      	ldrh	r3, [r3, #2]
    71b2:	b29b      	uxth	r3, r3
    71b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    71b8:	b29a      	uxth	r2, r3
    71ba:	683b      	ldr	r3, [r7, #0]
    71bc:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    71be:	687b      	ldr	r3, [r7, #4]
    71c0:	683a      	ldr	r2, [r7, #0]
    71c2:	ca07      	ldmia	r2, {r0, r1, r2}
    71c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    71c8:	6938      	ldr	r0, [r7, #16]
    71ca:	4b23      	ldr	r3, [pc, #140]	; (7258 <_i2c_m_sync_transfer+0x118>)
    71cc:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    71ce:	6878      	ldr	r0, [r7, #4]
    71d0:	4b22      	ldr	r3, [pc, #136]	; (725c <_i2c_m_sync_transfer+0x11c>)
    71d2:	4798      	blx	r3
    71d4:	6178      	str	r0, [r7, #20]

	if (ret) {
    71d6:	697b      	ldr	r3, [r7, #20]
    71d8:	2b00      	cmp	r3, #0
    71da:	d02d      	beq.n	7238 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    71dc:	687b      	ldr	r3, [r7, #4]
    71de:	885b      	ldrh	r3, [r3, #2]
    71e0:	b29b      	uxth	r3, r3
    71e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    71e6:	b29a      	uxth	r2, r3
    71e8:	687b      	ldr	r3, [r7, #4]
    71ea:	805a      	strh	r2, [r3, #2]

		return ret;
    71ec:	697b      	ldr	r3, [r7, #20]
    71ee:	e02b      	b.n	7248 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    71f0:	f107 030c 	add.w	r3, r7, #12
    71f4:	4619      	mov	r1, r3
    71f6:	6878      	ldr	r0, [r7, #4]
    71f8:	4b19      	ldr	r3, [pc, #100]	; (7260 <_i2c_m_sync_transfer+0x120>)
    71fa:	4798      	blx	r3
    71fc:	6178      	str	r0, [r7, #20]

		if (ret) {
    71fe:	697b      	ldr	r3, [r7, #20]
    7200:	2b00      	cmp	r3, #0
    7202:	d012      	beq.n	722a <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    7204:	683b      	ldr	r3, [r7, #0]
    7206:	885b      	ldrh	r3, [r3, #2]
    7208:	b29b      	uxth	r3, r3
    720a:	b21b      	sxth	r3, r3
    720c:	2b00      	cmp	r3, #0
    720e:	da02      	bge.n	7216 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    7210:	6938      	ldr	r0, [r7, #16]
    7212:	4b14      	ldr	r3, [pc, #80]	; (7264 <_i2c_m_sync_transfer+0x124>)
    7214:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7216:	687b      	ldr	r3, [r7, #4]
    7218:	885b      	ldrh	r3, [r3, #2]
    721a:	b29b      	uxth	r3, r3
    721c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7220:	b29a      	uxth	r2, r3
    7222:	687b      	ldr	r3, [r7, #4]
    7224:	805a      	strh	r2, [r3, #2]

			return ret;
    7226:	697b      	ldr	r3, [r7, #20]
    7228:	e00e      	b.n	7248 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    722a:	68fb      	ldr	r3, [r7, #12]
    722c:	687a      	ldr	r2, [r7, #4]
    722e:	4619      	mov	r1, r3
    7230:	6938      	ldr	r0, [r7, #16]
    7232:	4b0d      	ldr	r3, [pc, #52]	; (7268 <_i2c_m_sync_transfer+0x128>)
    7234:	4798      	blx	r3
    7236:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    7238:	687b      	ldr	r3, [r7, #4]
    723a:	885b      	ldrh	r3, [r3, #2]
    723c:	b29b      	uxth	r3, r3
    723e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7242:	2b00      	cmp	r3, #0
    7244:	d1d4      	bne.n	71f0 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    7246:	697b      	ldr	r3, [r7, #20]
}
    7248:	4618      	mov	r0, r3
    724a:	3718      	adds	r7, #24
    724c:	46bd      	mov	sp, r7
    724e:	bd80      	pop	{r7, pc}
    7250:	00011124 	.word	0x00011124
    7254:	00003cd5 	.word	0x00003cd5
    7258:	00006581 	.word	0x00006581
    725c:	00007021 	.word	0x00007021
    7260:	00006fc5 	.word	0x00006fc5
    7264:	00006941 	.word	0x00006941
    7268:	0000695d 	.word	0x0000695d

0000726c <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    726c:	b580      	push	{r7, lr}
    726e:	b084      	sub	sp, #16
    7270:	af00      	add	r7, sp, #0
    7272:	6078      	str	r0, [r7, #4]
    7274:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    7276:	6838      	ldr	r0, [r7, #0]
    7278:	4b42      	ldr	r3, [pc, #264]	; (7384 <_i2c_m_sync_init_impl+0x118>)
    727a:	4798      	blx	r3
    727c:	4603      	mov	r3, r0
    727e:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    7280:	2101      	movs	r1, #1
    7282:	6838      	ldr	r0, [r7, #0]
    7284:	4b40      	ldr	r3, [pc, #256]	; (7388 <_i2c_m_sync_init_impl+0x11c>)
    7286:	4798      	blx	r3
    7288:	4603      	mov	r3, r0
    728a:	f083 0301 	eor.w	r3, r3, #1
    728e:	b2db      	uxtb	r3, r3
    7290:	2b00      	cmp	r3, #0
    7292:	d020      	beq.n	72d6 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    7294:	7bfa      	ldrb	r2, [r7, #15]
    7296:	493d      	ldr	r1, [pc, #244]	; (738c <_i2c_m_sync_init_impl+0x120>)
    7298:	4613      	mov	r3, r2
    729a:	005b      	lsls	r3, r3, #1
    729c:	4413      	add	r3, r2
    729e:	00db      	lsls	r3, r3, #3
    72a0:	440b      	add	r3, r1
    72a2:	3304      	adds	r3, #4
    72a4:	681b      	ldr	r3, [r3, #0]
    72a6:	f003 031c 	and.w	r3, r3, #28
    72aa:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    72ac:	2102      	movs	r1, #2
    72ae:	6838      	ldr	r0, [r7, #0]
    72b0:	4b37      	ldr	r3, [pc, #220]	; (7390 <_i2c_m_sync_init_impl+0x124>)
    72b2:	4798      	blx	r3
    72b4:	4603      	mov	r3, r0
    72b6:	2b00      	cmp	r3, #0
    72b8:	d006      	beq.n	72c8 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    72ba:	6838      	ldr	r0, [r7, #0]
    72bc:	4b35      	ldr	r3, [pc, #212]	; (7394 <_i2c_m_sync_init_impl+0x128>)
    72be:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    72c0:	2102      	movs	r1, #2
    72c2:	6838      	ldr	r0, [r7, #0]
    72c4:	4b34      	ldr	r3, [pc, #208]	; (7398 <_i2c_m_sync_init_impl+0x12c>)
    72c6:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    72c8:	68bb      	ldr	r3, [r7, #8]
    72ca:	f043 0301 	orr.w	r3, r3, #1
    72ce:	4619      	mov	r1, r3
    72d0:	6838      	ldr	r0, [r7, #0]
    72d2:	4b32      	ldr	r3, [pc, #200]	; (739c <_i2c_m_sync_init_impl+0x130>)
    72d4:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    72d6:	2101      	movs	r1, #1
    72d8:	6838      	ldr	r0, [r7, #0]
    72da:	4b2f      	ldr	r3, [pc, #188]	; (7398 <_i2c_m_sync_init_impl+0x12c>)
    72dc:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    72de:	7bfa      	ldrb	r2, [r7, #15]
    72e0:	492a      	ldr	r1, [pc, #168]	; (738c <_i2c_m_sync_init_impl+0x120>)
    72e2:	4613      	mov	r3, r2
    72e4:	005b      	lsls	r3, r3, #1
    72e6:	4413      	add	r3, r2
    72e8:	00db      	lsls	r3, r3, #3
    72ea:	440b      	add	r3, r1
    72ec:	3304      	adds	r3, #4
    72ee:	681b      	ldr	r3, [r3, #0]
    72f0:	4619      	mov	r1, r3
    72f2:	6838      	ldr	r0, [r7, #0]
    72f4:	4b29      	ldr	r3, [pc, #164]	; (739c <_i2c_m_sync_init_impl+0x130>)
    72f6:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    72f8:	7bfa      	ldrb	r2, [r7, #15]
    72fa:	4924      	ldr	r1, [pc, #144]	; (738c <_i2c_m_sync_init_impl+0x120>)
    72fc:	4613      	mov	r3, r2
    72fe:	005b      	lsls	r3, r3, #1
    7300:	4413      	add	r3, r2
    7302:	00db      	lsls	r3, r3, #3
    7304:	440b      	add	r3, r1
    7306:	3308      	adds	r3, #8
    7308:	681b      	ldr	r3, [r3, #0]
    730a:	4619      	mov	r1, r3
    730c:	6838      	ldr	r0, [r7, #0]
    730e:	4b24      	ldr	r3, [pc, #144]	; (73a0 <_i2c_m_sync_init_impl+0x134>)
    7310:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    7312:	7bfa      	ldrb	r2, [r7, #15]
    7314:	491d      	ldr	r1, [pc, #116]	; (738c <_i2c_m_sync_init_impl+0x120>)
    7316:	4613      	mov	r3, r2
    7318:	005b      	lsls	r3, r3, #1
    731a:	4413      	add	r3, r2
    731c:	00db      	lsls	r3, r3, #3
    731e:	440b      	add	r3, r1
    7320:	330c      	adds	r3, #12
    7322:	681b      	ldr	r3, [r3, #0]
    7324:	4619      	mov	r1, r3
    7326:	6838      	ldr	r0, [r7, #0]
    7328:	4b1e      	ldr	r3, [pc, #120]	; (73a4 <_i2c_m_sync_init_impl+0x138>)
    732a:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    732c:	7bfa      	ldrb	r2, [r7, #15]
    732e:	4917      	ldr	r1, [pc, #92]	; (738c <_i2c_m_sync_init_impl+0x120>)
    7330:	4613      	mov	r3, r2
    7332:	005b      	lsls	r3, r3, #1
    7334:	4413      	add	r3, r2
    7336:	00db      	lsls	r3, r3, #3
    7338:	440b      	add	r3, r1
    733a:	3304      	adds	r3, #4
    733c:	681b      	ldr	r3, [r3, #0]
    733e:	0e1b      	lsrs	r3, r3, #24
    7340:	b29b      	uxth	r3, r3
    7342:	f003 0303 	and.w	r3, r3, #3
    7346:	b29a      	uxth	r2, r3
    7348:	687b      	ldr	r3, [r7, #4]
    734a:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    734c:	687b      	ldr	r3, [r7, #4]
    734e:	899b      	ldrh	r3, [r3, #12]
    7350:	2b01      	cmp	r3, #1
    7352:	bf8c      	ite	hi
    7354:	2301      	movhi	r3, #1
    7356:	2300      	movls	r3, #0
    7358:	b2db      	uxtb	r3, r3
    735a:	4619      	mov	r1, r3
    735c:	6838      	ldr	r0, [r7, #0]
    735e:	4b12      	ldr	r3, [pc, #72]	; (73a8 <_i2c_m_sync_init_impl+0x13c>)
    7360:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    7362:	7bfa      	ldrb	r2, [r7, #15]
    7364:	4909      	ldr	r1, [pc, #36]	; (738c <_i2c_m_sync_init_impl+0x120>)
    7366:	4613      	mov	r3, r2
    7368:	005b      	lsls	r3, r3, #1
    736a:	4413      	add	r3, r2
    736c:	00db      	lsls	r3, r3, #3
    736e:	440b      	add	r3, r1
    7370:	3312      	adds	r3, #18
    7372:	881a      	ldrh	r2, [r3, #0]
    7374:	687b      	ldr	r3, [r7, #4]
    7376:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    7378:	2300      	movs	r3, #0
}
    737a:	4618      	mov	r0, r3
    737c:	3710      	adds	r7, #16
    737e:	46bd      	mov	sp, r7
    7380:	bd80      	pop	{r7, pc}
    7382:	bf00      	nop
    7384:	000068d9 	.word	0x000068d9
    7388:	000062b9 	.word	0x000062b9
    738c:	20000018 	.word	0x20000018
    7390:	00006451 	.word	0x00006451
    7394:	000063f9 	.word	0x000063f9
    7398:	00006295 	.word	0x00006295
    739c:	00006481 	.word	0x00006481
    73a0:	00006651 	.word	0x00006651
    73a4:	00006699 	.word	0x00006699
    73a8:	000066d5 	.word	0x000066d5

000073ac <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    73ac:	b580      	push	{r7, lr}
    73ae:	b082      	sub	sp, #8
    73b0:	af00      	add	r7, sp, #0
    73b2:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    73b4:	2101      	movs	r1, #1
    73b6:	6878      	ldr	r0, [r7, #4]
    73b8:	4b07      	ldr	r3, [pc, #28]	; (73d8 <_spi_sync_enable+0x2c>)
    73ba:	4798      	blx	r3
    73bc:	4603      	mov	r3, r0
    73be:	2b00      	cmp	r3, #0
    73c0:	d002      	beq.n	73c8 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    73c2:	f06f 0303 	mvn.w	r3, #3
    73c6:	e003      	b.n	73d0 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    73c8:	6878      	ldr	r0, [r7, #4]
    73ca:	4b04      	ldr	r3, [pc, #16]	; (73dc <_spi_sync_enable+0x30>)
    73cc:	4798      	blx	r3

	return ERR_NONE;
    73ce:	2300      	movs	r3, #0
}
    73d0:	4618      	mov	r0, r3
    73d2:	3708      	adds	r7, #8
    73d4:	46bd      	mov	sp, r7
    73d6:	bd80      	pop	{r7, pc}
    73d8:	00006305 	.word	0x00006305
    73dc:	000064a5 	.word	0x000064a5

000073e0 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    73e0:	b580      	push	{r7, lr}
    73e2:	b082      	sub	sp, #8
    73e4:	af00      	add	r7, sp, #0
    73e6:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    73e8:	2101      	movs	r1, #1
    73ea:	6878      	ldr	r0, [r7, #4]
    73ec:	4b07      	ldr	r3, [pc, #28]	; (740c <_spi_sync_disable+0x2c>)
    73ee:	4798      	blx	r3
    73f0:	4603      	mov	r3, r0
    73f2:	2b00      	cmp	r3, #0
    73f4:	d002      	beq.n	73fc <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    73f6:	f06f 0303 	mvn.w	r3, #3
    73fa:	e003      	b.n	7404 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    73fc:	6878      	ldr	r0, [r7, #4]
    73fe:	4b04      	ldr	r3, [pc, #16]	; (7410 <_spi_sync_disable+0x30>)
    7400:	4798      	blx	r3

	return ERR_NONE;
    7402:	2300      	movs	r3, #0
}
    7404:	4618      	mov	r0, r3
    7406:	3708      	adds	r7, #8
    7408:	46bd      	mov	sp, r7
    740a:	bd80      	pop	{r7, pc}
    740c:	00006305 	.word	0x00006305
    7410:	00006505 	.word	0x00006505

00007414 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    7414:	b580      	push	{r7, lr}
    7416:	b082      	sub	sp, #8
    7418:	af00      	add	r7, sp, #0
    741a:	6078      	str	r0, [r7, #4]
    741c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    741e:	687b      	ldr	r3, [r7, #4]
    7420:	2b00      	cmp	r3, #0
    7422:	d004      	beq.n	742e <_spi_load_regs_master+0x1a>
    7424:	683b      	ldr	r3, [r7, #0]
    7426:	2b00      	cmp	r3, #0
    7428:	d001      	beq.n	742e <_spi_load_regs_master+0x1a>
    742a:	2301      	movs	r3, #1
    742c:	e000      	b.n	7430 <_spi_load_regs_master+0x1c>
    742e:	2300      	movs	r3, #0
    7430:	f003 0301 	and.w	r3, r3, #1
    7434:	b2db      	uxtb	r3, r3
    7436:	f640 1239 	movw	r2, #2361	; 0x939
    743a:	4915      	ldr	r1, [pc, #84]	; (7490 <_spi_load_regs_master+0x7c>)
    743c:	4618      	mov	r0, r3
    743e:	4b15      	ldr	r3, [pc, #84]	; (7494 <_spi_load_regs_master+0x80>)
    7440:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7442:	683b      	ldr	r3, [r7, #0]
    7444:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    7446:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    744a:	f023 0301 	bic.w	r3, r3, #1
    744e:	4619      	mov	r1, r3
    7450:	6878      	ldr	r0, [r7, #4]
    7452:	4b11      	ldr	r3, [pc, #68]	; (7498 <_spi_load_regs_master+0x84>)
    7454:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    7456:	683b      	ldr	r3, [r7, #0]
    7458:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    745a:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    745e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    7462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7466:	4619      	mov	r1, r3
    7468:	6878      	ldr	r0, [r7, #4]
    746a:	4b0c      	ldr	r3, [pc, #48]	; (749c <_spi_load_regs_master+0x88>)
    746c:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    746e:	683b      	ldr	r3, [r7, #0]
    7470:	7b1b      	ldrb	r3, [r3, #12]
    7472:	4619      	mov	r1, r3
    7474:	6878      	ldr	r0, [r7, #4]
    7476:	4b0a      	ldr	r3, [pc, #40]	; (74a0 <_spi_load_regs_master+0x8c>)
    7478:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    747a:	683b      	ldr	r3, [r7, #0]
    747c:	7b5b      	ldrb	r3, [r3, #13]
    747e:	4619      	mov	r1, r3
    7480:	6878      	ldr	r0, [r7, #4]
    7482:	4b08      	ldr	r3, [pc, #32]	; (74a4 <_spi_load_regs_master+0x90>)
    7484:	4798      	blx	r3
}
    7486:	bf00      	nop
    7488:	3708      	adds	r7, #8
    748a:	46bd      	mov	sp, r7
    748c:	bd80      	pop	{r7, pc}
    748e:	bf00      	nop
    7490:	00011124 	.word	0x00011124
    7494:	00003cd5 	.word	0x00003cd5
    7498:	0000655d 	.word	0x0000655d
    749c:	00006675 	.word	0x00006675
    74a0:	000066b5 	.word	0x000066b5
    74a4:	000067ed 	.word	0x000067ed

000074a8 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    74a8:	b580      	push	{r7, lr}
    74aa:	b082      	sub	sp, #8
    74ac:	af00      	add	r7, sp, #0
    74ae:	6078      	str	r0, [r7, #4]
    74b0:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    74b2:	687b      	ldr	r3, [r7, #4]
    74b4:	2b00      	cmp	r3, #0
    74b6:	d004      	beq.n	74c2 <_spi_load_regs_slave+0x1a>
    74b8:	683b      	ldr	r3, [r7, #0]
    74ba:	2b00      	cmp	r3, #0
    74bc:	d001      	beq.n	74c2 <_spi_load_regs_slave+0x1a>
    74be:	2301      	movs	r3, #1
    74c0:	e000      	b.n	74c4 <_spi_load_regs_slave+0x1c>
    74c2:	2300      	movs	r3, #0
    74c4:	f003 0301 	and.w	r3, r3, #1
    74c8:	b2db      	uxtb	r3, r3
    74ca:	f640 124d 	movw	r2, #2381	; 0x94d
    74ce:	491a      	ldr	r1, [pc, #104]	; (7538 <_spi_load_regs_slave+0x90>)
    74d0:	4618      	mov	r0, r3
    74d2:	4b1a      	ldr	r3, [pc, #104]	; (753c <_spi_load_regs_slave+0x94>)
    74d4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    74d6:	683b      	ldr	r3, [r7, #0]
    74d8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    74da:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    74de:	f023 0301 	bic.w	r3, r3, #1
    74e2:	4619      	mov	r1, r3
    74e4:	6878      	ldr	r0, [r7, #4]
    74e6:	4b16      	ldr	r3, [pc, #88]	; (7540 <_spi_load_regs_slave+0x98>)
    74e8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    74ea:	683b      	ldr	r3, [r7, #0]
    74ec:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    74ee:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    74f2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    74f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    74fa:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    74fe:	4619      	mov	r1, r3
    7500:	6878      	ldr	r0, [r7, #4]
    7502:	4b10      	ldr	r3, [pc, #64]	; (7544 <_spi_load_regs_slave+0x9c>)
    7504:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    7506:	683b      	ldr	r3, [r7, #0]
    7508:	689b      	ldr	r3, [r3, #8]
    750a:	4619      	mov	r1, r3
    750c:	6878      	ldr	r0, [r7, #4]
    750e:	4b0e      	ldr	r3, [pc, #56]	; (7548 <_spi_load_regs_slave+0xa0>)
    7510:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7512:	683b      	ldr	r3, [r7, #0]
    7514:	7b5b      	ldrb	r3, [r3, #13]
    7516:	4619      	mov	r1, r3
    7518:	6878      	ldr	r0, [r7, #4]
    751a:	4b0c      	ldr	r3, [pc, #48]	; (754c <_spi_load_regs_slave+0xa4>)
    751c:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    751e:	bf00      	nop
    7520:	f04f 31ff 	mov.w	r1, #4294967295
    7524:	6878      	ldr	r0, [r7, #4]
    7526:	4b0a      	ldr	r3, [pc, #40]	; (7550 <_spi_load_regs_slave+0xa8>)
    7528:	4798      	blx	r3
    752a:	4603      	mov	r3, r0
    752c:	2b00      	cmp	r3, #0
    752e:	d1f7      	bne.n	7520 <_spi_load_regs_slave+0x78>
		;
}
    7530:	bf00      	nop
    7532:	3708      	adds	r7, #8
    7534:	46bd      	mov	sp, r7
    7536:	bd80      	pop	{r7, pc}
    7538:	00011124 	.word	0x00011124
    753c:	00003cd5 	.word	0x00003cd5
    7540:	0000655d 	.word	0x0000655d
    7544:	00006675 	.word	0x00006675
    7548:	00006759 	.word	0x00006759
    754c:	000067ed 	.word	0x000067ed
    7550:	00006305 	.word	0x00006305

00007554 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    7554:	b580      	push	{r7, lr}
    7556:	b084      	sub	sp, #16
    7558:	af00      	add	r7, sp, #0
    755a:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    755c:	687b      	ldr	r3, [r7, #4]
    755e:	4618      	mov	r0, r3
    7560:	4b11      	ldr	r3, [pc, #68]	; (75a8 <_spi_get_regs+0x54>)
    7562:	4798      	blx	r3
    7564:	4603      	mov	r3, r0
    7566:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7568:	2300      	movs	r3, #0
    756a:	73fb      	strb	r3, [r7, #15]
    756c:	e014      	b.n	7598 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    756e:	7bfa      	ldrb	r2, [r7, #15]
    7570:	490e      	ldr	r1, [pc, #56]	; (75ac <_spi_get_regs+0x58>)
    7572:	4613      	mov	r3, r2
    7574:	011b      	lsls	r3, r3, #4
    7576:	4413      	add	r3, r2
    7578:	440b      	add	r3, r1
    757a:	3310      	adds	r3, #16
    757c:	781b      	ldrb	r3, [r3, #0]
    757e:	7bba      	ldrb	r2, [r7, #14]
    7580:	429a      	cmp	r2, r3
    7582:	d106      	bne.n	7592 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    7584:	7bfa      	ldrb	r2, [r7, #15]
    7586:	4613      	mov	r3, r2
    7588:	011b      	lsls	r3, r3, #4
    758a:	4413      	add	r3, r2
    758c:	4a07      	ldr	r2, [pc, #28]	; (75ac <_spi_get_regs+0x58>)
    758e:	4413      	add	r3, r2
    7590:	e006      	b.n	75a0 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7592:	7bfb      	ldrb	r3, [r7, #15]
    7594:	3301      	adds	r3, #1
    7596:	73fb      	strb	r3, [r7, #15]
    7598:	7bfb      	ldrb	r3, [r7, #15]
    759a:	2b01      	cmp	r3, #1
    759c:	d9e7      	bls.n	756e <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    759e:	2300      	movs	r3, #0
}
    75a0:	4618      	mov	r0, r3
    75a2:	3710      	adds	r7, #16
    75a4:	46bd      	mov	sp, r7
    75a6:	bd80      	pop	{r7, pc}
    75a8:	00006851 	.word	0x00006851
    75ac:	00011160 	.word	0x00011160

000075b0 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    75b0:	b580      	push	{r7, lr}
    75b2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    75b4:	4b03      	ldr	r3, [pc, #12]	; (75c4 <SERCOM7_0_Handler+0x14>)
    75b6:	681b      	ldr	r3, [r3, #0]
    75b8:	4618      	mov	r0, r3
    75ba:	4b03      	ldr	r3, [pc, #12]	; (75c8 <SERCOM7_0_Handler+0x18>)
    75bc:	4798      	blx	r3
}
    75be:	bf00      	nop
    75c0:	bd80      	pop	{r7, pc}
    75c2:	bf00      	nop
    75c4:	20000c20 	.word	0x20000c20
    75c8:	00006b8d 	.word	0x00006b8d

000075cc <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    75cc:	b580      	push	{r7, lr}
    75ce:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    75d0:	4b03      	ldr	r3, [pc, #12]	; (75e0 <SERCOM7_1_Handler+0x14>)
    75d2:	681b      	ldr	r3, [r3, #0]
    75d4:	4618      	mov	r0, r3
    75d6:	4b03      	ldr	r3, [pc, #12]	; (75e4 <SERCOM7_1_Handler+0x18>)
    75d8:	4798      	blx	r3
}
    75da:	bf00      	nop
    75dc:	bd80      	pop	{r7, pc}
    75de:	bf00      	nop
    75e0:	20000c20 	.word	0x20000c20
    75e4:	00006b8d 	.word	0x00006b8d

000075e8 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    75e8:	b580      	push	{r7, lr}
    75ea:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    75ec:	4b03      	ldr	r3, [pc, #12]	; (75fc <SERCOM7_2_Handler+0x14>)
    75ee:	681b      	ldr	r3, [r3, #0]
    75f0:	4618      	mov	r0, r3
    75f2:	4b03      	ldr	r3, [pc, #12]	; (7600 <SERCOM7_2_Handler+0x18>)
    75f4:	4798      	blx	r3
}
    75f6:	bf00      	nop
    75f8:	bd80      	pop	{r7, pc}
    75fa:	bf00      	nop
    75fc:	20000c20 	.word	0x20000c20
    7600:	00006b8d 	.word	0x00006b8d

00007604 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    7604:	b580      	push	{r7, lr}
    7606:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    7608:	4b03      	ldr	r3, [pc, #12]	; (7618 <SERCOM7_3_Handler+0x14>)
    760a:	681b      	ldr	r3, [r3, #0]
    760c:	4618      	mov	r0, r3
    760e:	4b03      	ldr	r3, [pc, #12]	; (761c <SERCOM7_3_Handler+0x18>)
    7610:	4798      	blx	r3
}
    7612:	bf00      	nop
    7614:	bd80      	pop	{r7, pc}
    7616:	bf00      	nop
    7618:	20000c20 	.word	0x20000c20
    761c:	00006b8d 	.word	0x00006b8d

00007620 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    7620:	b580      	push	{r7, lr}
    7622:	b084      	sub	sp, #16
    7624:	af00      	add	r7, sp, #0
    7626:	6078      	str	r0, [r7, #4]
    7628:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    762a:	683b      	ldr	r3, [r7, #0]
    762c:	4618      	mov	r0, r3
    762e:	4b35      	ldr	r3, [pc, #212]	; (7704 <_spi_m_sync_init+0xe4>)
    7630:	4798      	blx	r3
    7632:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    7634:	687b      	ldr	r3, [r7, #4]
    7636:	2b00      	cmp	r3, #0
    7638:	d004      	beq.n	7644 <_spi_m_sync_init+0x24>
    763a:	683b      	ldr	r3, [r7, #0]
    763c:	2b00      	cmp	r3, #0
    763e:	d001      	beq.n	7644 <_spi_m_sync_init+0x24>
    7640:	2301      	movs	r3, #1
    7642:	e000      	b.n	7646 <_spi_m_sync_init+0x26>
    7644:	2300      	movs	r3, #0
    7646:	f003 0301 	and.w	r3, r3, #1
    764a:	b2db      	uxtb	r3, r3
    764c:	f640 128c 	movw	r2, #2444	; 0x98c
    7650:	492d      	ldr	r1, [pc, #180]	; (7708 <_spi_m_sync_init+0xe8>)
    7652:	4618      	mov	r0, r3
    7654:	4b2d      	ldr	r3, [pc, #180]	; (770c <_spi_m_sync_init+0xec>)
    7656:	4798      	blx	r3

	if (regs == NULL) {
    7658:	68fb      	ldr	r3, [r7, #12]
    765a:	2b00      	cmp	r3, #0
    765c:	d102      	bne.n	7664 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    765e:	f06f 030c 	mvn.w	r3, #12
    7662:	e04a      	b.n	76fa <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7664:	2101      	movs	r1, #1
    7666:	6838      	ldr	r0, [r7, #0]
    7668:	4b29      	ldr	r3, [pc, #164]	; (7710 <_spi_m_sync_init+0xf0>)
    766a:	4798      	blx	r3
    766c:	4603      	mov	r3, r0
    766e:	f083 0301 	eor.w	r3, r3, #1
    7672:	b2db      	uxtb	r3, r3
    7674:	2b00      	cmp	r3, #0
    7676:	d019      	beq.n	76ac <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7678:	68fb      	ldr	r3, [r7, #12]
    767a:	681b      	ldr	r3, [r3, #0]
    767c:	f003 031c 	and.w	r3, r3, #28
    7680:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7682:	2102      	movs	r1, #2
    7684:	6838      	ldr	r0, [r7, #0]
    7686:	4b23      	ldr	r3, [pc, #140]	; (7714 <_spi_m_sync_init+0xf4>)
    7688:	4798      	blx	r3
    768a:	4603      	mov	r3, r0
    768c:	2b00      	cmp	r3, #0
    768e:	d006      	beq.n	769e <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    7690:	6838      	ldr	r0, [r7, #0]
    7692:	4b21      	ldr	r3, [pc, #132]	; (7718 <_spi_m_sync_init+0xf8>)
    7694:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    7696:	2102      	movs	r1, #2
    7698:	6838      	ldr	r0, [r7, #0]
    769a:	4b20      	ldr	r3, [pc, #128]	; (771c <_spi_m_sync_init+0xfc>)
    769c:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    769e:	68bb      	ldr	r3, [r7, #8]
    76a0:	f043 0301 	orr.w	r3, r3, #1
    76a4:	4619      	mov	r1, r3
    76a6:	6838      	ldr	r0, [r7, #0]
    76a8:	4b1d      	ldr	r3, [pc, #116]	; (7720 <_spi_m_sync_init+0x100>)
    76aa:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    76ac:	2101      	movs	r1, #1
    76ae:	6838      	ldr	r0, [r7, #0]
    76b0:	4b1a      	ldr	r3, [pc, #104]	; (771c <_spi_m_sync_init+0xfc>)
    76b2:	4798      	blx	r3

	dev->prvt = hw;
    76b4:	687b      	ldr	r3, [r7, #4]
    76b6:	683a      	ldr	r2, [r7, #0]
    76b8:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    76ba:	68fb      	ldr	r3, [r7, #12]
    76bc:	681b      	ldr	r3, [r3, #0]
    76be:	f003 031c 	and.w	r3, r3, #28
    76c2:	2b08      	cmp	r3, #8
    76c4:	d104      	bne.n	76d0 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    76c6:	68f9      	ldr	r1, [r7, #12]
    76c8:	6838      	ldr	r0, [r7, #0]
    76ca:	4b16      	ldr	r3, [pc, #88]	; (7724 <_spi_m_sync_init+0x104>)
    76cc:	4798      	blx	r3
    76ce:	e003      	b.n	76d8 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    76d0:	68f9      	ldr	r1, [r7, #12]
    76d2:	6838      	ldr	r0, [r7, #0]
    76d4:	4b14      	ldr	r3, [pc, #80]	; (7728 <_spi_m_sync_init+0x108>)
    76d6:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    76d8:	68fb      	ldr	r3, [r7, #12]
    76da:	685b      	ldr	r3, [r3, #4]
    76dc:	f003 0307 	and.w	r3, r3, #7
    76e0:	2b00      	cmp	r3, #0
    76e2:	d101      	bne.n	76e8 <_spi_m_sync_init+0xc8>
    76e4:	2201      	movs	r2, #1
    76e6:	e000      	b.n	76ea <_spi_m_sync_init+0xca>
    76e8:	2202      	movs	r2, #2
    76ea:	687b      	ldr	r3, [r7, #4]
    76ec:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    76ee:	68fb      	ldr	r3, [r7, #12]
    76f0:	89db      	ldrh	r3, [r3, #14]
    76f2:	b29a      	uxth	r2, r3
    76f4:	687b      	ldr	r3, [r7, #4]
    76f6:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    76f8:	2300      	movs	r3, #0
}
    76fa:	4618      	mov	r0, r3
    76fc:	3710      	adds	r7, #16
    76fe:	46bd      	mov	sp, r7
    7700:	bd80      	pop	{r7, pc}
    7702:	bf00      	nop
    7704:	00007555 	.word	0x00007555
    7708:	00011124 	.word	0x00011124
    770c:	00003cd5 	.word	0x00003cd5
    7710:	00006305 	.word	0x00006305
    7714:	0000652d 	.word	0x0000652d
    7718:	00006505 	.word	0x00006505
    771c:	000062e1 	.word	0x000062e1
    7720:	0000655d 	.word	0x0000655d
    7724:	000074a9 	.word	0x000074a9
    7728:	00007415 	.word	0x00007415

0000772c <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    772c:	b580      	push	{r7, lr}
    772e:	b082      	sub	sp, #8
    7730:	af00      	add	r7, sp, #0
    7732:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7734:	687b      	ldr	r3, [r7, #4]
    7736:	2b00      	cmp	r3, #0
    7738:	d005      	beq.n	7746 <_spi_m_sync_enable+0x1a>
    773a:	687b      	ldr	r3, [r7, #4]
    773c:	681b      	ldr	r3, [r3, #0]
    773e:	2b00      	cmp	r3, #0
    7740:	d001      	beq.n	7746 <_spi_m_sync_enable+0x1a>
    7742:	2301      	movs	r3, #1
    7744:	e000      	b.n	7748 <_spi_m_sync_enable+0x1c>
    7746:	2300      	movs	r3, #0
    7748:	f003 0301 	and.w	r3, r3, #1
    774c:	b2db      	uxtb	r3, r3
    774e:	f640 12eb 	movw	r2, #2539	; 0x9eb
    7752:	4907      	ldr	r1, [pc, #28]	; (7770 <_spi_m_sync_enable+0x44>)
    7754:	4618      	mov	r0, r3
    7756:	4b07      	ldr	r3, [pc, #28]	; (7774 <_spi_m_sync_enable+0x48>)
    7758:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    775a:	687b      	ldr	r3, [r7, #4]
    775c:	681b      	ldr	r3, [r3, #0]
    775e:	4618      	mov	r0, r3
    7760:	4b05      	ldr	r3, [pc, #20]	; (7778 <_spi_m_sync_enable+0x4c>)
    7762:	4798      	blx	r3
    7764:	4603      	mov	r3, r0
}
    7766:	4618      	mov	r0, r3
    7768:	3708      	adds	r7, #8
    776a:	46bd      	mov	sp, r7
    776c:	bd80      	pop	{r7, pc}
    776e:	bf00      	nop
    7770:	00011124 	.word	0x00011124
    7774:	00003cd5 	.word	0x00003cd5
    7778:	000073ad 	.word	0x000073ad

0000777c <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    777c:	b580      	push	{r7, lr}
    777e:	b082      	sub	sp, #8
    7780:	af00      	add	r7, sp, #0
    7782:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7784:	687b      	ldr	r3, [r7, #4]
    7786:	2b00      	cmp	r3, #0
    7788:	d005      	beq.n	7796 <_spi_m_sync_disable+0x1a>
    778a:	687b      	ldr	r3, [r7, #4]
    778c:	681b      	ldr	r3, [r3, #0]
    778e:	2b00      	cmp	r3, #0
    7790:	d001      	beq.n	7796 <_spi_m_sync_disable+0x1a>
    7792:	2301      	movs	r3, #1
    7794:	e000      	b.n	7798 <_spi_m_sync_disable+0x1c>
    7796:	2300      	movs	r3, #0
    7798:	f003 0301 	and.w	r3, r3, #1
    779c:	b2db      	uxtb	r3, r3
    779e:	f640 2207 	movw	r2, #2567	; 0xa07
    77a2:	4907      	ldr	r1, [pc, #28]	; (77c0 <_spi_m_sync_disable+0x44>)
    77a4:	4618      	mov	r0, r3
    77a6:	4b07      	ldr	r3, [pc, #28]	; (77c4 <_spi_m_sync_disable+0x48>)
    77a8:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    77aa:	687b      	ldr	r3, [r7, #4]
    77ac:	681b      	ldr	r3, [r3, #0]
    77ae:	4618      	mov	r0, r3
    77b0:	4b05      	ldr	r3, [pc, #20]	; (77c8 <_spi_m_sync_disable+0x4c>)
    77b2:	4798      	blx	r3
    77b4:	4603      	mov	r3, r0
}
    77b6:	4618      	mov	r0, r3
    77b8:	3708      	adds	r7, #8
    77ba:	46bd      	mov	sp, r7
    77bc:	bd80      	pop	{r7, pc}
    77be:	bf00      	nop
    77c0:	00011124 	.word	0x00011124
    77c4:	00003cd5 	.word	0x00003cd5
    77c8:	000073e1 	.word	0x000073e1

000077cc <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    77cc:	b580      	push	{r7, lr}
    77ce:	b082      	sub	sp, #8
    77d0:	af00      	add	r7, sp, #0
    77d2:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    77d4:	bf00      	nop
    77d6:	2103      	movs	r1, #3
    77d8:	6878      	ldr	r0, [r7, #4]
    77da:	4b06      	ldr	r3, [pc, #24]	; (77f4 <_spi_wait_bus_idle+0x28>)
    77dc:	4798      	blx	r3
    77de:	4603      	mov	r3, r0
    77e0:	2b00      	cmp	r3, #0
    77e2:	d0f8      	beq.n	77d6 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    77e4:	2103      	movs	r1, #3
    77e6:	6878      	ldr	r0, [r7, #4]
    77e8:	4b03      	ldr	r3, [pc, #12]	; (77f8 <_spi_wait_bus_idle+0x2c>)
    77ea:	4798      	blx	r3
}
    77ec:	bf00      	nop
    77ee:	3708      	adds	r7, #8
    77f0:	46bd      	mov	sp, r7
    77f2:	bd80      	pop	{r7, pc}
    77f4:	00006399 	.word	0x00006399
    77f8:	000063db 	.word	0x000063db

000077fc <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    77fc:	b580      	push	{r7, lr}
    77fe:	b086      	sub	sp, #24
    7800:	af00      	add	r7, sp, #0
    7802:	60f8      	str	r0, [r7, #12]
    7804:	60b9      	str	r1, [r7, #8]
    7806:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    7808:	68bb      	ldr	r3, [r7, #8]
    780a:	f003 0304 	and.w	r3, r3, #4
    780e:	2b00      	cmp	r3, #0
    7810:	d101      	bne.n	7816 <_spi_rx_check_and_receive+0x1a>
		return false;
    7812:	2300      	movs	r3, #0
    7814:	e022      	b.n	785c <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    7816:	68f8      	ldr	r0, [r7, #12]
    7818:	4b12      	ldr	r3, [pc, #72]	; (7864 <_spi_rx_check_and_receive+0x68>)
    781a:	4798      	blx	r3
    781c:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    781e:	687b      	ldr	r3, [r7, #4]
    7820:	685b      	ldr	r3, [r3, #4]
    7822:	2b00      	cmp	r3, #0
    7824:	d014      	beq.n	7850 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    7826:	687b      	ldr	r3, [r7, #4]
    7828:	685b      	ldr	r3, [r3, #4]
    782a:	1c59      	adds	r1, r3, #1
    782c:	687a      	ldr	r2, [r7, #4]
    782e:	6051      	str	r1, [r2, #4]
    7830:	697a      	ldr	r2, [r7, #20]
    7832:	b2d2      	uxtb	r2, r2
    7834:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    7836:	687b      	ldr	r3, [r7, #4]
    7838:	7c1b      	ldrb	r3, [r3, #16]
    783a:	2b01      	cmp	r3, #1
    783c:	d908      	bls.n	7850 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    783e:	687b      	ldr	r3, [r7, #4]
    7840:	685b      	ldr	r3, [r3, #4]
    7842:	1c59      	adds	r1, r3, #1
    7844:	687a      	ldr	r2, [r7, #4]
    7846:	6051      	str	r1, [r2, #4]
    7848:	697a      	ldr	r2, [r7, #20]
    784a:	0a12      	lsrs	r2, r2, #8
    784c:	b2d2      	uxtb	r2, r2
    784e:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    7850:	687b      	ldr	r3, [r7, #4]
    7852:	68db      	ldr	r3, [r3, #12]
    7854:	1c5a      	adds	r2, r3, #1
    7856:	687b      	ldr	r3, [r7, #4]
    7858:	60da      	str	r2, [r3, #12]

	return true;
    785a:	2301      	movs	r3, #1
}
    785c:	4618      	mov	r0, r3
    785e:	3718      	adds	r7, #24
    7860:	46bd      	mov	sp, r7
    7862:	bd80      	pop	{r7, pc}
    7864:	000067d5 	.word	0x000067d5

00007868 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    7868:	b580      	push	{r7, lr}
    786a:	b086      	sub	sp, #24
    786c:	af00      	add	r7, sp, #0
    786e:	60f8      	str	r0, [r7, #12]
    7870:	60b9      	str	r1, [r7, #8]
    7872:	607a      	str	r2, [r7, #4]
    7874:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    7876:	68bb      	ldr	r3, [r7, #8]
    7878:	f003 0301 	and.w	r3, r3, #1
    787c:	2b00      	cmp	r3, #0
    787e:	d028      	beq.n	78d2 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    7880:	687b      	ldr	r3, [r7, #4]
    7882:	681b      	ldr	r3, [r3, #0]
    7884:	2b00      	cmp	r3, #0
    7886:	d018      	beq.n	78ba <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    7888:	687b      	ldr	r3, [r7, #4]
    788a:	681b      	ldr	r3, [r3, #0]
    788c:	1c59      	adds	r1, r3, #1
    788e:	687a      	ldr	r2, [r7, #4]
    7890:	6011      	str	r1, [r2, #0]
    7892:	781b      	ldrb	r3, [r3, #0]
    7894:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    7896:	687b      	ldr	r3, [r7, #4]
    7898:	7c1b      	ldrb	r3, [r3, #16]
    789a:	2b01      	cmp	r3, #1
    789c:	d90f      	bls.n	78be <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    789e:	687b      	ldr	r3, [r7, #4]
    78a0:	681b      	ldr	r3, [r3, #0]
    78a2:	781b      	ldrb	r3, [r3, #0]
    78a4:	021b      	lsls	r3, r3, #8
    78a6:	461a      	mov	r2, r3
    78a8:	697b      	ldr	r3, [r7, #20]
    78aa:	4313      	orrs	r3, r2
    78ac:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    78ae:	687b      	ldr	r3, [r7, #4]
    78b0:	681b      	ldr	r3, [r3, #0]
    78b2:	1c5a      	adds	r2, r3, #1
    78b4:	687b      	ldr	r3, [r7, #4]
    78b6:	601a      	str	r2, [r3, #0]
    78b8:	e001      	b.n	78be <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    78ba:	887b      	ldrh	r3, [r7, #2]
    78bc:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    78be:	687b      	ldr	r3, [r7, #4]
    78c0:	689b      	ldr	r3, [r3, #8]
    78c2:	1c5a      	adds	r2, r3, #1
    78c4:	687b      	ldr	r3, [r7, #4]
    78c6:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    78c8:	6979      	ldr	r1, [r7, #20]
    78ca:	68f8      	ldr	r0, [r7, #12]
    78cc:	4b03      	ldr	r3, [pc, #12]	; (78dc <_spi_tx_check_and_send+0x74>)
    78ce:	4798      	blx	r3
    78d0:	e000      	b.n	78d4 <_spi_tx_check_and_send+0x6c>
		return;
    78d2:	bf00      	nop
}
    78d4:	3718      	adds	r7, #24
    78d6:	46bd      	mov	sp, r7
    78d8:	bd80      	pop	{r7, pc}
    78da:	bf00      	nop
    78dc:	000067b9 	.word	0x000067b9

000078e0 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    78e0:	b580      	push	{r7, lr}
    78e2:	b082      	sub	sp, #8
    78e4:	af00      	add	r7, sp, #0
    78e6:	6078      	str	r0, [r7, #4]
    78e8:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    78ea:	687b      	ldr	r3, [r7, #4]
    78ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
    78f0:	2b00      	cmp	r3, #0
    78f2:	d00b      	beq.n	790c <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    78f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    78f8:	6838      	ldr	r0, [r7, #0]
    78fa:	4b07      	ldr	r3, [pc, #28]	; (7918 <_spi_err_check+0x38>)
    78fc:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    78fe:	2180      	movs	r1, #128	; 0x80
    7900:	6838      	ldr	r0, [r7, #0]
    7902:	4b06      	ldr	r3, [pc, #24]	; (791c <_spi_err_check+0x3c>)
    7904:	4798      	blx	r3
		return ERR_OVERFLOW;
    7906:	f06f 0312 	mvn.w	r3, #18
    790a:	e000      	b.n	790e <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    790c:	2300      	movs	r3, #0
}
    790e:	4618      	mov	r0, r3
    7910:	3708      	adds	r7, #8
    7912:	46bd      	mov	sp, r7
    7914:	bd80      	pop	{r7, pc}
    7916:	bf00      	nop
    7918:	0000680d 	.word	0x0000680d
    791c:	000063db 	.word	0x000063db

00007920 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    7920:	b590      	push	{r4, r7, lr}
    7922:	b08b      	sub	sp, #44	; 0x2c
    7924:	af00      	add	r7, sp, #0
    7926:	6078      	str	r0, [r7, #4]
    7928:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    792a:	687b      	ldr	r3, [r7, #4]
    792c:	681b      	ldr	r3, [r3, #0]
    792e:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    7930:	2300      	movs	r3, #0
    7932:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    7934:	683b      	ldr	r3, [r7, #0]
    7936:	681b      	ldr	r3, [r3, #0]
    7938:	60bb      	str	r3, [r7, #8]
    793a:	683b      	ldr	r3, [r7, #0]
    793c:	685b      	ldr	r3, [r3, #4]
    793e:	60fb      	str	r3, [r7, #12]
    7940:	2300      	movs	r3, #0
    7942:	613b      	str	r3, [r7, #16]
    7944:	2300      	movs	r3, #0
    7946:	617b      	str	r3, [r7, #20]
    7948:	687b      	ldr	r3, [r7, #4]
    794a:	791b      	ldrb	r3, [r3, #4]
    794c:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    794e:	687b      	ldr	r3, [r7, #4]
    7950:	2b00      	cmp	r3, #0
    7952:	d004      	beq.n	795e <_spi_m_sync_trans+0x3e>
    7954:	6a3b      	ldr	r3, [r7, #32]
    7956:	2b00      	cmp	r3, #0
    7958:	d001      	beq.n	795e <_spi_m_sync_trans+0x3e>
    795a:	2301      	movs	r3, #1
    795c:	e000      	b.n	7960 <_spi_m_sync_trans+0x40>
    795e:	2300      	movs	r3, #0
    7960:	f003 0301 	and.w	r3, r3, #1
    7964:	b2db      	uxtb	r3, r3
    7966:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
    796a:	492b      	ldr	r1, [pc, #172]	; (7a18 <_spi_m_sync_trans+0xf8>)
    796c:	4618      	mov	r0, r3
    796e:	4b2b      	ldr	r3, [pc, #172]	; (7a1c <_spi_m_sync_trans+0xfc>)
    7970:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    7972:	2107      	movs	r1, #7
    7974:	6a38      	ldr	r0, [r7, #32]
    7976:	4b2a      	ldr	r3, [pc, #168]	; (7a20 <_spi_m_sync_trans+0x100>)
    7978:	4798      	blx	r3
    797a:	4603      	mov	r3, r0
    797c:	2b00      	cmp	r3, #0
    797e:	d002      	beq.n	7986 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    7980:	f06f 0303 	mvn.w	r3, #3
    7984:	e043      	b.n	7a0e <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    7986:	6a38      	ldr	r0, [r7, #32]
    7988:	4b26      	ldr	r3, [pc, #152]	; (7a24 <_spi_m_sync_trans+0x104>)
    798a:	4798      	blx	r3
    798c:	4603      	mov	r3, r0
    798e:	f083 0301 	eor.w	r3, r3, #1
    7992:	b2db      	uxtb	r3, r3
    7994:	2b00      	cmp	r3, #0
    7996:	d002      	beq.n	799e <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    7998:	f06f 0313 	mvn.w	r3, #19
    799c:	e037      	b.n	7a0e <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    799e:	6a38      	ldr	r0, [r7, #32]
    79a0:	4b21      	ldr	r3, [pc, #132]	; (7a28 <_spi_m_sync_trans+0x108>)
    79a2:	4798      	blx	r3
    79a4:	4603      	mov	r3, r0
    79a6:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    79a8:	f107 0308 	add.w	r3, r7, #8
    79ac:	461a      	mov	r2, r3
    79ae:	69f9      	ldr	r1, [r7, #28]
    79b0:	6a38      	ldr	r0, [r7, #32]
    79b2:	4b1e      	ldr	r3, [pc, #120]	; (7a2c <_spi_m_sync_trans+0x10c>)
    79b4:	4798      	blx	r3
    79b6:	4603      	mov	r3, r0
    79b8:	f083 0301 	eor.w	r3, r3, #1
    79bc:	b2db      	uxtb	r3, r3
    79be:	2b00      	cmp	r3, #0
    79c0:	d00b      	beq.n	79da <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    79c2:	697a      	ldr	r2, [r7, #20]
    79c4:	693b      	ldr	r3, [r7, #16]
    79c6:	429a      	cmp	r2, r3
    79c8:	d307      	bcc.n	79da <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    79ca:	687b      	ldr	r3, [r7, #4]
    79cc:	88db      	ldrh	r3, [r3, #6]
    79ce:	f107 0208 	add.w	r2, r7, #8
    79d2:	69f9      	ldr	r1, [r7, #28]
    79d4:	6a38      	ldr	r0, [r7, #32]
    79d6:	4c16      	ldr	r4, [pc, #88]	; (7a30 <_spi_m_sync_trans+0x110>)
    79d8:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    79da:	6a39      	ldr	r1, [r7, #32]
    79dc:	69f8      	ldr	r0, [r7, #28]
    79de:	4b15      	ldr	r3, [pc, #84]	; (7a34 <_spi_m_sync_trans+0x114>)
    79e0:	4798      	blx	r3
    79e2:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    79e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    79e6:	2b00      	cmp	r3, #0
    79e8:	db0c      	blt.n	7a04 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    79ea:	693a      	ldr	r2, [r7, #16]
    79ec:	683b      	ldr	r3, [r7, #0]
    79ee:	689b      	ldr	r3, [r3, #8]
    79f0:	429a      	cmp	r2, r3
    79f2:	d3d4      	bcc.n	799e <_spi_m_sync_trans+0x7e>
    79f4:	697a      	ldr	r2, [r7, #20]
    79f6:	683b      	ldr	r3, [r7, #0]
    79f8:	689b      	ldr	r3, [r3, #8]
    79fa:	429a      	cmp	r2, r3
    79fc:	d3cf      	bcc.n	799e <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    79fe:	693b      	ldr	r3, [r7, #16]
    7a00:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    7a02:	e000      	b.n	7a06 <_spi_m_sync_trans+0xe6>
			break;
    7a04:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    7a06:	6a38      	ldr	r0, [r7, #32]
    7a08:	4b0b      	ldr	r3, [pc, #44]	; (7a38 <_spi_m_sync_trans+0x118>)
    7a0a:	4798      	blx	r3

	return rc;
    7a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    7a0e:	4618      	mov	r0, r3
    7a10:	372c      	adds	r7, #44	; 0x2c
    7a12:	46bd      	mov	sp, r7
    7a14:	bd90      	pop	{r4, r7, pc}
    7a16:	bf00      	nop
    7a18:	00011124 	.word	0x00011124
    7a1c:	00003cd5 	.word	0x00003cd5
    7a20:	00006305 	.word	0x00006305
    7a24:	000064cd 	.word	0x000064cd
    7a28:	000063c1 	.word	0x000063c1
    7a2c:	000077fd 	.word	0x000077fd
    7a30:	00007869 	.word	0x00007869
    7a34:	000078e1 	.word	0x000078e1
    7a38:	000077cd 	.word	0x000077cd

00007a3c <__NVIC_EnableIRQ>:
{
    7a3c:	b480      	push	{r7}
    7a3e:	b083      	sub	sp, #12
    7a40:	af00      	add	r7, sp, #0
    7a42:	4603      	mov	r3, r0
    7a44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7a46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7a4a:	2b00      	cmp	r3, #0
    7a4c:	db0b      	blt.n	7a66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7a4e:	4909      	ldr	r1, [pc, #36]	; (7a74 <__NVIC_EnableIRQ+0x38>)
    7a50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7a54:	095b      	lsrs	r3, r3, #5
    7a56:	88fa      	ldrh	r2, [r7, #6]
    7a58:	f002 021f 	and.w	r2, r2, #31
    7a5c:	2001      	movs	r0, #1
    7a5e:	fa00 f202 	lsl.w	r2, r0, r2
    7a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7a66:	bf00      	nop
    7a68:	370c      	adds	r7, #12
    7a6a:	46bd      	mov	sp, r7
    7a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a70:	4770      	bx	lr
    7a72:	bf00      	nop
    7a74:	e000e100 	.word	0xe000e100

00007a78 <__NVIC_DisableIRQ>:
{
    7a78:	b480      	push	{r7}
    7a7a:	b083      	sub	sp, #12
    7a7c:	af00      	add	r7, sp, #0
    7a7e:	4603      	mov	r3, r0
    7a80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7a86:	2b00      	cmp	r3, #0
    7a88:	db10      	blt.n	7aac <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7a8a:	490b      	ldr	r1, [pc, #44]	; (7ab8 <__NVIC_DisableIRQ+0x40>)
    7a8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7a90:	095b      	lsrs	r3, r3, #5
    7a92:	88fa      	ldrh	r2, [r7, #6]
    7a94:	f002 021f 	and.w	r2, r2, #31
    7a98:	2001      	movs	r0, #1
    7a9a:	fa00 f202 	lsl.w	r2, r0, r2
    7a9e:	3320      	adds	r3, #32
    7aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7aa4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7aa8:	f3bf 8f6f 	isb	sy
}
    7aac:	bf00      	nop
    7aae:	370c      	adds	r7, #12
    7ab0:	46bd      	mov	sp, r7
    7ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ab6:	4770      	bx	lr
    7ab8:	e000e100 	.word	0xe000e100

00007abc <__NVIC_ClearPendingIRQ>:
{
    7abc:	b480      	push	{r7}
    7abe:	b083      	sub	sp, #12
    7ac0:	af00      	add	r7, sp, #0
    7ac2:	4603      	mov	r3, r0
    7ac4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7aca:	2b00      	cmp	r3, #0
    7acc:	db0c      	blt.n	7ae8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7ace:	4909      	ldr	r1, [pc, #36]	; (7af4 <__NVIC_ClearPendingIRQ+0x38>)
    7ad0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7ad4:	095b      	lsrs	r3, r3, #5
    7ad6:	88fa      	ldrh	r2, [r7, #6]
    7ad8:	f002 021f 	and.w	r2, r2, #31
    7adc:	2001      	movs	r0, #1
    7ade:	fa00 f202 	lsl.w	r2, r0, r2
    7ae2:	3360      	adds	r3, #96	; 0x60
    7ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7ae8:	bf00      	nop
    7aea:	370c      	adds	r7, #12
    7aec:	46bd      	mov	sp, r7
    7aee:	f85d 7b04 	ldr.w	r7, [sp], #4
    7af2:	4770      	bx	lr
    7af4:	e000e100 	.word	0xe000e100

00007af8 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7af8:	b480      	push	{r7}
    7afa:	b083      	sub	sp, #12
    7afc:	af00      	add	r7, sp, #0
    7afe:	6078      	str	r0, [r7, #4]
    7b00:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    7b02:	bf00      	nop
    7b04:	687b      	ldr	r3, [r7, #4]
    7b06:	689a      	ldr	r2, [r3, #8]
    7b08:	683b      	ldr	r3, [r7, #0]
    7b0a:	4013      	ands	r3, r2
    7b0c:	2b00      	cmp	r3, #0
    7b0e:	d1f9      	bne.n	7b04 <hri_tcc_wait_for_sync+0xc>
	};
}
    7b10:	bf00      	nop
    7b12:	370c      	adds	r7, #12
    7b14:	46bd      	mov	sp, r7
    7b16:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b1a:	4770      	bx	lr

00007b1c <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7b1c:	b480      	push	{r7}
    7b1e:	b083      	sub	sp, #12
    7b20:	af00      	add	r7, sp, #0
    7b22:	6078      	str	r0, [r7, #4]
    7b24:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    7b26:	687b      	ldr	r3, [r7, #4]
    7b28:	689a      	ldr	r2, [r3, #8]
    7b2a:	683b      	ldr	r3, [r7, #0]
    7b2c:	4013      	ands	r3, r2
    7b2e:	2b00      	cmp	r3, #0
    7b30:	bf14      	ite	ne
    7b32:	2301      	movne	r3, #1
    7b34:	2300      	moveq	r3, #0
    7b36:	b2db      	uxtb	r3, r3
}
    7b38:	4618      	mov	r0, r3
    7b3a:	370c      	adds	r7, #12
    7b3c:	46bd      	mov	sp, r7
    7b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b42:	4770      	bx	lr

00007b44 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7b44:	b480      	push	{r7}
    7b46:	b083      	sub	sp, #12
    7b48:	af00      	add	r7, sp, #0
    7b4a:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    7b4c:	687b      	ldr	r3, [r7, #4]
    7b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7b50:	f003 0301 	and.w	r3, r3, #1
    7b54:	2b00      	cmp	r3, #0
    7b56:	bf14      	ite	ne
    7b58:	2301      	movne	r3, #1
    7b5a:	2300      	moveq	r3, #0
    7b5c:	b2db      	uxtb	r3, r3
}
    7b5e:	4618      	mov	r0, r3
    7b60:	370c      	adds	r7, #12
    7b62:	46bd      	mov	sp, r7
    7b64:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b68:	4770      	bx	lr

00007b6a <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    7b6a:	b480      	push	{r7}
    7b6c:	b083      	sub	sp, #12
    7b6e:	af00      	add	r7, sp, #0
    7b70:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    7b72:	687b      	ldr	r3, [r7, #4]
    7b74:	2201      	movs	r2, #1
    7b76:	62da      	str	r2, [r3, #44]	; 0x2c
}
    7b78:	bf00      	nop
    7b7a:	370c      	adds	r7, #12
    7b7c:	46bd      	mov	sp, r7
    7b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b82:	4770      	bx	lr

00007b84 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    7b84:	b480      	push	{r7}
    7b86:	b083      	sub	sp, #12
    7b88:	af00      	add	r7, sp, #0
    7b8a:	6078      	str	r0, [r7, #4]
    7b8c:	460b      	mov	r3, r1
    7b8e:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    7b90:	687b      	ldr	r3, [r7, #4]
    7b92:	78fa      	ldrb	r2, [r7, #3]
    7b94:	715a      	strb	r2, [r3, #5]
}
    7b96:	bf00      	nop
    7b98:	370c      	adds	r7, #12
    7b9a:	46bd      	mov	sp, r7
    7b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ba0:	4770      	bx	lr

00007ba2 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    7ba2:	b480      	push	{r7}
    7ba4:	b083      	sub	sp, #12
    7ba6:	af00      	add	r7, sp, #0
    7ba8:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    7baa:	687b      	ldr	r3, [r7, #4]
    7bac:	2201      	movs	r2, #1
    7bae:	629a      	str	r2, [r3, #40]	; 0x28
}
    7bb0:	bf00      	nop
    7bb2:	370c      	adds	r7, #12
    7bb4:	46bd      	mov	sp, r7
    7bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bba:	4770      	bx	lr

00007bbc <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7bbc:	b580      	push	{r7, lr}
    7bbe:	b082      	sub	sp, #8
    7bc0:	af00      	add	r7, sp, #0
    7bc2:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    7bc4:	687b      	ldr	r3, [r7, #4]
    7bc6:	681b      	ldr	r3, [r3, #0]
    7bc8:	f043 0201 	orr.w	r2, r3, #1
    7bcc:	687b      	ldr	r3, [r7, #4]
    7bce:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7bd0:	2101      	movs	r1, #1
    7bd2:	6878      	ldr	r0, [r7, #4]
    7bd4:	4b02      	ldr	r3, [pc, #8]	; (7be0 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    7bd6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7bd8:	bf00      	nop
    7bda:	3708      	adds	r7, #8
    7bdc:	46bd      	mov	sp, r7
    7bde:	bd80      	pop	{r7, pc}
    7be0:	00007af9 	.word	0x00007af9

00007be4 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7be4:	b580      	push	{r7, lr}
    7be6:	b082      	sub	sp, #8
    7be8:	af00      	add	r7, sp, #0
    7bea:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7bec:	687b      	ldr	r3, [r7, #4]
    7bee:	681b      	ldr	r3, [r3, #0]
    7bf0:	f043 0202 	orr.w	r2, r3, #2
    7bf4:	687b      	ldr	r3, [r7, #4]
    7bf6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7bf8:	2103      	movs	r1, #3
    7bfa:	6878      	ldr	r0, [r7, #4]
    7bfc:	4b02      	ldr	r3, [pc, #8]	; (7c08 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    7bfe:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7c00:	bf00      	nop
    7c02:	3708      	adds	r7, #8
    7c04:	46bd      	mov	sp, r7
    7c06:	bd80      	pop	{r7, pc}
    7c08:	00007af9 	.word	0x00007af9

00007c0c <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7c0c:	b580      	push	{r7, lr}
    7c0e:	b084      	sub	sp, #16
    7c10:	af00      	add	r7, sp, #0
    7c12:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7c14:	2103      	movs	r1, #3
    7c16:	6878      	ldr	r0, [r7, #4]
    7c18:	4b09      	ldr	r3, [pc, #36]	; (7c40 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    7c1a:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7c1c:	687b      	ldr	r3, [r7, #4]
    7c1e:	681b      	ldr	r3, [r3, #0]
    7c20:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    7c22:	68fb      	ldr	r3, [r7, #12]
    7c24:	085b      	lsrs	r3, r3, #1
    7c26:	f003 0301 	and.w	r3, r3, #1
    7c2a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7c2c:	68fb      	ldr	r3, [r7, #12]
    7c2e:	2b00      	cmp	r3, #0
    7c30:	bf14      	ite	ne
    7c32:	2301      	movne	r3, #1
    7c34:	2300      	moveq	r3, #0
    7c36:	b2db      	uxtb	r3, r3
}
    7c38:	4618      	mov	r0, r3
    7c3a:	3710      	adds	r7, #16
    7c3c:	46bd      	mov	sp, r7
    7c3e:	bd80      	pop	{r7, pc}
    7c40:	00007af9 	.word	0x00007af9

00007c44 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7c44:	b580      	push	{r7, lr}
    7c46:	b082      	sub	sp, #8
    7c48:	af00      	add	r7, sp, #0
    7c4a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7c4c:	687b      	ldr	r3, [r7, #4]
    7c4e:	681b      	ldr	r3, [r3, #0]
    7c50:	f023 0202 	bic.w	r2, r3, #2
    7c54:	687b      	ldr	r3, [r7, #4]
    7c56:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7c58:	2103      	movs	r1, #3
    7c5a:	6878      	ldr	r0, [r7, #4]
    7c5c:	4b02      	ldr	r3, [pc, #8]	; (7c68 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    7c5e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7c60:	bf00      	nop
    7c62:	3708      	adds	r7, #8
    7c64:	46bd      	mov	sp, r7
    7c66:	bd80      	pop	{r7, pc}
    7c68:	00007af9 	.word	0x00007af9

00007c6c <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    7c6c:	b580      	push	{r7, lr}
    7c6e:	b084      	sub	sp, #16
    7c70:	af00      	add	r7, sp, #0
    7c72:	6078      	str	r0, [r7, #4]
    7c74:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7c76:	2103      	movs	r1, #3
    7c78:	6878      	ldr	r0, [r7, #4]
    7c7a:	4b07      	ldr	r3, [pc, #28]	; (7c98 <hri_tcc_get_CTRLA_reg+0x2c>)
    7c7c:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7c7e:	687b      	ldr	r3, [r7, #4]
    7c80:	681b      	ldr	r3, [r3, #0]
    7c82:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7c84:	68fa      	ldr	r2, [r7, #12]
    7c86:	683b      	ldr	r3, [r7, #0]
    7c88:	4013      	ands	r3, r2
    7c8a:	60fb      	str	r3, [r7, #12]
	return tmp;
    7c8c:	68fb      	ldr	r3, [r7, #12]
}
    7c8e:	4618      	mov	r0, r3
    7c90:	3710      	adds	r7, #16
    7c92:	46bd      	mov	sp, r7
    7c94:	bd80      	pop	{r7, pc}
    7c96:	bf00      	nop
    7c98:	00007af9 	.word	0x00007af9

00007c9c <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    7c9c:	b580      	push	{r7, lr}
    7c9e:	b082      	sub	sp, #8
    7ca0:	af00      	add	r7, sp, #0
    7ca2:	6078      	str	r0, [r7, #4]
    7ca4:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    7ca6:	687b      	ldr	r3, [r7, #4]
    7ca8:	683a      	ldr	r2, [r7, #0]
    7caa:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7cac:	2103      	movs	r1, #3
    7cae:	6878      	ldr	r0, [r7, #4]
    7cb0:	4b02      	ldr	r3, [pc, #8]	; (7cbc <hri_tcc_write_CTRLA_reg+0x20>)
    7cb2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7cb4:	bf00      	nop
    7cb6:	3708      	adds	r7, #8
    7cb8:	46bd      	mov	sp, r7
    7cba:	bd80      	pop	{r7, pc}
    7cbc:	00007af9 	.word	0x00007af9

00007cc0 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    7cc0:	b480      	push	{r7}
    7cc2:	b083      	sub	sp, #12
    7cc4:	af00      	add	r7, sp, #0
    7cc6:	6078      	str	r0, [r7, #4]
    7cc8:	460b      	mov	r3, r1
    7cca:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    7ccc:	687b      	ldr	r3, [r7, #4]
    7cce:	78fa      	ldrb	r2, [r7, #3]
    7cd0:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7cd2:	bf00      	nop
    7cd4:	370c      	adds	r7, #12
    7cd6:	46bd      	mov	sp, r7
    7cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cdc:	4770      	bx	lr

00007cde <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    7cde:	b480      	push	{r7}
    7ce0:	b083      	sub	sp, #12
    7ce2:	af00      	add	r7, sp, #0
    7ce4:	6078      	str	r0, [r7, #4]
    7ce6:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    7ce8:	687b      	ldr	r3, [r7, #4]
    7cea:	683a      	ldr	r2, [r7, #0]
    7cec:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7cee:	bf00      	nop
    7cf0:	370c      	adds	r7, #12
    7cf2:	46bd      	mov	sp, r7
    7cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cf8:	4770      	bx	lr
	...

00007cfc <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    7cfc:	b580      	push	{r7, lr}
    7cfe:	b082      	sub	sp, #8
    7d00:	af00      	add	r7, sp, #0
    7d02:	6078      	str	r0, [r7, #4]
    7d04:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    7d06:	687b      	ldr	r3, [r7, #4]
    7d08:	683a      	ldr	r2, [r7, #0]
    7d0a:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7d0c:	2180      	movs	r1, #128	; 0x80
    7d0e:	6878      	ldr	r0, [r7, #4]
    7d10:	4b02      	ldr	r3, [pc, #8]	; (7d1c <hri_tcc_write_PER_reg+0x20>)
    7d12:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7d14:	bf00      	nop
    7d16:	3708      	adds	r7, #8
    7d18:	46bd      	mov	sp, r7
    7d1a:	bd80      	pop	{r7, pc}
    7d1c:	00007af9 	.word	0x00007af9

00007d20 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    7d20:	b580      	push	{r7, lr}
    7d22:	b082      	sub	sp, #8
    7d24:	af00      	add	r7, sp, #0
    7d26:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7d28:	2180      	movs	r1, #128	; 0x80
    7d2a:	6878      	ldr	r0, [r7, #4]
    7d2c:	4b03      	ldr	r3, [pc, #12]	; (7d3c <hri_tcc_read_PER_reg+0x1c>)
    7d2e:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    7d30:	687b      	ldr	r3, [r7, #4]
    7d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    7d34:	4618      	mov	r0, r3
    7d36:	3708      	adds	r7, #8
    7d38:	46bd      	mov	sp, r7
    7d3a:	bd80      	pop	{r7, pc}
    7d3c:	00007af9 	.word	0x00007af9

00007d40 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7d40:	b480      	push	{r7}
    7d42:	b083      	sub	sp, #12
    7d44:	af00      	add	r7, sp, #0
    7d46:	6078      	str	r0, [r7, #4]
    7d48:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    7d4a:	687b      	ldr	r3, [r7, #4]
    7d4c:	4a09      	ldr	r2, [pc, #36]	; (7d74 <_tcc_init_irq_param+0x34>)
    7d4e:	4293      	cmp	r3, r2
    7d50:	d102      	bne.n	7d58 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    7d52:	4a09      	ldr	r2, [pc, #36]	; (7d78 <_tcc_init_irq_param+0x38>)
    7d54:	683b      	ldr	r3, [r7, #0]
    7d56:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7d58:	687b      	ldr	r3, [r7, #4]
    7d5a:	4a08      	ldr	r2, [pc, #32]	; (7d7c <_tcc_init_irq_param+0x3c>)
    7d5c:	4293      	cmp	r3, r2
    7d5e:	d102      	bne.n	7d66 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    7d60:	4a07      	ldr	r2, [pc, #28]	; (7d80 <_tcc_init_irq_param+0x40>)
    7d62:	683b      	ldr	r3, [r7, #0]
    7d64:	6013      	str	r3, [r2, #0]
	}
}
    7d66:	bf00      	nop
    7d68:	370c      	adds	r7, #12
    7d6a:	46bd      	mov	sp, r7
    7d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d70:	4770      	bx	lr
    7d72:	bf00      	nop
    7d74:	41016000 	.word	0x41016000
    7d78:	20000c34 	.word	0x20000c34
    7d7c:	41018000 	.word	0x41018000
    7d80:	20000c38 	.word	0x20000c38

00007d84 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    7d84:	b580      	push	{r7, lr}
    7d86:	b084      	sub	sp, #16
    7d88:	af00      	add	r7, sp, #0
    7d8a:	6078      	str	r0, [r7, #4]
    7d8c:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7d8e:	6838      	ldr	r0, [r7, #0]
    7d90:	4b33      	ldr	r3, [pc, #204]	; (7e60 <_tcc_timer_init+0xdc>)
    7d92:	4798      	blx	r3
    7d94:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    7d96:	68fb      	ldr	r3, [r7, #12]
    7d98:	2b00      	cmp	r3, #0
    7d9a:	d102      	bne.n	7da2 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    7d9c:	f06f 0309 	mvn.w	r3, #9
    7da0:	e05a      	b.n	7e58 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    7da2:	687b      	ldr	r3, [r7, #4]
    7da4:	683a      	ldr	r2, [r7, #0]
    7da6:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    7da8:	2101      	movs	r1, #1
    7daa:	6838      	ldr	r0, [r7, #0]
    7dac:	4b2d      	ldr	r3, [pc, #180]	; (7e64 <_tcc_timer_init+0xe0>)
    7dae:	4798      	blx	r3
    7db0:	4603      	mov	r3, r0
    7db2:	f083 0301 	eor.w	r3, r3, #1
    7db6:	b2db      	uxtb	r3, r3
    7db8:	2b00      	cmp	r3, #0
    7dba:	d011      	beq.n	7de0 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    7dbc:	2102      	movs	r1, #2
    7dbe:	6838      	ldr	r0, [r7, #0]
    7dc0:	4b29      	ldr	r3, [pc, #164]	; (7e68 <_tcc_timer_init+0xe4>)
    7dc2:	4798      	blx	r3
    7dc4:	4603      	mov	r3, r0
    7dc6:	2b00      	cmp	r3, #0
    7dc8:	d006      	beq.n	7dd8 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7dca:	6838      	ldr	r0, [r7, #0]
    7dcc:	4b27      	ldr	r3, [pc, #156]	; (7e6c <_tcc_timer_init+0xe8>)
    7dce:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    7dd0:	2102      	movs	r1, #2
    7dd2:	6838      	ldr	r0, [r7, #0]
    7dd4:	4b26      	ldr	r3, [pc, #152]	; (7e70 <_tcc_timer_init+0xec>)
    7dd6:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    7dd8:	2101      	movs	r1, #1
    7dda:	6838      	ldr	r0, [r7, #0]
    7ddc:	4b25      	ldr	r3, [pc, #148]	; (7e74 <_tcc_timer_init+0xf0>)
    7dde:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7de0:	2101      	movs	r1, #1
    7de2:	6838      	ldr	r0, [r7, #0]
    7de4:	4b22      	ldr	r3, [pc, #136]	; (7e70 <_tcc_timer_init+0xec>)
    7de6:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    7de8:	68fb      	ldr	r3, [r7, #12]
    7dea:	689b      	ldr	r3, [r3, #8]
    7dec:	4619      	mov	r1, r3
    7dee:	6838      	ldr	r0, [r7, #0]
    7df0:	4b20      	ldr	r3, [pc, #128]	; (7e74 <_tcc_timer_init+0xf0>)
    7df2:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    7df4:	68fb      	ldr	r3, [r7, #12]
    7df6:	7b1b      	ldrb	r3, [r3, #12]
    7df8:	4619      	mov	r1, r3
    7dfa:	6838      	ldr	r0, [r7, #0]
    7dfc:	4b1e      	ldr	r3, [pc, #120]	; (7e78 <_tcc_timer_init+0xf4>)
    7dfe:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    7e00:	68fb      	ldr	r3, [r7, #12]
    7e02:	7b5b      	ldrb	r3, [r3, #13]
    7e04:	4619      	mov	r1, r3
    7e06:	6838      	ldr	r0, [r7, #0]
    7e08:	4b1c      	ldr	r3, [pc, #112]	; (7e7c <_tcc_timer_init+0xf8>)
    7e0a:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    7e0c:	68fb      	ldr	r3, [r7, #12]
    7e0e:	691b      	ldr	r3, [r3, #16]
    7e10:	4619      	mov	r1, r3
    7e12:	6838      	ldr	r0, [r7, #0]
    7e14:	4b1a      	ldr	r3, [pc, #104]	; (7e80 <_tcc_timer_init+0xfc>)
    7e16:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    7e18:	68fb      	ldr	r3, [r7, #12]
    7e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7e1c:	4619      	mov	r1, r3
    7e1e:	6838      	ldr	r0, [r7, #0]
    7e20:	4b18      	ldr	r3, [pc, #96]	; (7e84 <_tcc_timer_init+0x100>)
    7e22:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    7e24:	6838      	ldr	r0, [r7, #0]
    7e26:	4b18      	ldr	r3, [pc, #96]	; (7e88 <_tcc_timer_init+0x104>)
    7e28:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    7e2a:	6879      	ldr	r1, [r7, #4]
    7e2c:	6838      	ldr	r0, [r7, #0]
    7e2e:	4b17      	ldr	r3, [pc, #92]	; (7e8c <_tcc_timer_init+0x108>)
    7e30:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7e32:	68fb      	ldr	r3, [r7, #12]
    7e34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7e38:	4618      	mov	r0, r3
    7e3a:	4b15      	ldr	r3, [pc, #84]	; (7e90 <_tcc_timer_init+0x10c>)
    7e3c:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    7e3e:	68fb      	ldr	r3, [r7, #12]
    7e40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7e44:	4618      	mov	r0, r3
    7e46:	4b13      	ldr	r3, [pc, #76]	; (7e94 <_tcc_timer_init+0x110>)
    7e48:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    7e4a:	68fb      	ldr	r3, [r7, #12]
    7e4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7e50:	4618      	mov	r0, r3
    7e52:	4b11      	ldr	r3, [pc, #68]	; (7e98 <_tcc_timer_init+0x114>)
    7e54:	4798      	blx	r3

	return ERR_NONE;
    7e56:	2300      	movs	r3, #0
}
    7e58:	4618      	mov	r0, r3
    7e5a:	3710      	adds	r7, #16
    7e5c:	46bd      	mov	sp, r7
    7e5e:	bd80      	pop	{r7, pc}
    7e60:	0000804d 	.word	0x0000804d
    7e64:	00007b1d 	.word	0x00007b1d
    7e68:	00007c6d 	.word	0x00007c6d
    7e6c:	00007c45 	.word	0x00007c45
    7e70:	00007af9 	.word	0x00007af9
    7e74:	00007c9d 	.word	0x00007c9d
    7e78:	00007b85 	.word	0x00007b85
    7e7c:	00007cc1 	.word	0x00007cc1
    7e80:	00007cdf 	.word	0x00007cdf
    7e84:	00007cfd 	.word	0x00007cfd
    7e88:	00007ba3 	.word	0x00007ba3
    7e8c:	00007d41 	.word	0x00007d41
    7e90:	00007a79 	.word	0x00007a79
    7e94:	00007abd 	.word	0x00007abd
    7e98:	00007a3d 	.word	0x00007a3d

00007e9c <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    7e9c:	b580      	push	{r7, lr}
    7e9e:	b084      	sub	sp, #16
    7ea0:	af00      	add	r7, sp, #0
    7ea2:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7ea4:	687b      	ldr	r3, [r7, #4]
    7ea6:	68db      	ldr	r3, [r3, #12]
    7ea8:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7eaa:	68f8      	ldr	r0, [r7, #12]
    7eac:	4b0a      	ldr	r3, [pc, #40]	; (7ed8 <_tcc_timer_deinit+0x3c>)
    7eae:	4798      	blx	r3
    7eb0:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7eb2:	68bb      	ldr	r3, [r7, #8]
    7eb4:	2b00      	cmp	r3, #0
    7eb6:	d00b      	beq.n	7ed0 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7eb8:	68bb      	ldr	r3, [r7, #8]
    7eba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7ebe:	4618      	mov	r0, r3
    7ec0:	4b06      	ldr	r3, [pc, #24]	; (7edc <_tcc_timer_deinit+0x40>)
    7ec2:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7ec4:	68f8      	ldr	r0, [r7, #12]
    7ec6:	4b06      	ldr	r3, [pc, #24]	; (7ee0 <_tcc_timer_deinit+0x44>)
    7ec8:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    7eca:	68f8      	ldr	r0, [r7, #12]
    7ecc:	4b05      	ldr	r3, [pc, #20]	; (7ee4 <_tcc_timer_deinit+0x48>)
    7ece:	4798      	blx	r3
	}
}
    7ed0:	bf00      	nop
    7ed2:	3710      	adds	r7, #16
    7ed4:	46bd      	mov	sp, r7
    7ed6:	bd80      	pop	{r7, pc}
    7ed8:	0000804d 	.word	0x0000804d
    7edc:	00007a79 	.word	0x00007a79
    7ee0:	00007c45 	.word	0x00007c45
    7ee4:	00007bbd 	.word	0x00007bbd

00007ee8 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    7ee8:	b580      	push	{r7, lr}
    7eea:	b082      	sub	sp, #8
    7eec:	af00      	add	r7, sp, #0
    7eee:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    7ef0:	687b      	ldr	r3, [r7, #4]
    7ef2:	68db      	ldr	r3, [r3, #12]
    7ef4:	4618      	mov	r0, r3
    7ef6:	4b03      	ldr	r3, [pc, #12]	; (7f04 <_tcc_timer_start+0x1c>)
    7ef8:	4798      	blx	r3
}
    7efa:	bf00      	nop
    7efc:	3708      	adds	r7, #8
    7efe:	46bd      	mov	sp, r7
    7f00:	bd80      	pop	{r7, pc}
    7f02:	bf00      	nop
    7f04:	00007be5 	.word	0x00007be5

00007f08 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    7f08:	b580      	push	{r7, lr}
    7f0a:	b082      	sub	sp, #8
    7f0c:	af00      	add	r7, sp, #0
    7f0e:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    7f10:	687b      	ldr	r3, [r7, #4]
    7f12:	68db      	ldr	r3, [r3, #12]
    7f14:	4618      	mov	r0, r3
    7f16:	4b03      	ldr	r3, [pc, #12]	; (7f24 <_tcc_timer_stop+0x1c>)
    7f18:	4798      	blx	r3
}
    7f1a:	bf00      	nop
    7f1c:	3708      	adds	r7, #8
    7f1e:	46bd      	mov	sp, r7
    7f20:	bd80      	pop	{r7, pc}
    7f22:	bf00      	nop
    7f24:	00007c45 	.word	0x00007c45

00007f28 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7f28:	b580      	push	{r7, lr}
    7f2a:	b082      	sub	sp, #8
    7f2c:	af00      	add	r7, sp, #0
    7f2e:	6078      	str	r0, [r7, #4]
    7f30:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    7f32:	687b      	ldr	r3, [r7, #4]
    7f34:	68db      	ldr	r3, [r3, #12]
    7f36:	6839      	ldr	r1, [r7, #0]
    7f38:	4618      	mov	r0, r3
    7f3a:	4b03      	ldr	r3, [pc, #12]	; (7f48 <_tcc_timer_set_period+0x20>)
    7f3c:	4798      	blx	r3
}
    7f3e:	bf00      	nop
    7f40:	3708      	adds	r7, #8
    7f42:	46bd      	mov	sp, r7
    7f44:	bd80      	pop	{r7, pc}
    7f46:	bf00      	nop
    7f48:	00007cfd 	.word	0x00007cfd

00007f4c <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    7f4c:	b580      	push	{r7, lr}
    7f4e:	b082      	sub	sp, #8
    7f50:	af00      	add	r7, sp, #0
    7f52:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    7f54:	687b      	ldr	r3, [r7, #4]
    7f56:	68db      	ldr	r3, [r3, #12]
    7f58:	4618      	mov	r0, r3
    7f5a:	4b03      	ldr	r3, [pc, #12]	; (7f68 <_tcc_timer_get_period+0x1c>)
    7f5c:	4798      	blx	r3
    7f5e:	4603      	mov	r3, r0
}
    7f60:	4618      	mov	r0, r3
    7f62:	3708      	adds	r7, #8
    7f64:	46bd      	mov	sp, r7
    7f66:	bd80      	pop	{r7, pc}
    7f68:	00007d21 	.word	0x00007d21

00007f6c <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    7f6c:	b580      	push	{r7, lr}
    7f6e:	b082      	sub	sp, #8
    7f70:	af00      	add	r7, sp, #0
    7f72:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    7f74:	687b      	ldr	r3, [r7, #4]
    7f76:	68db      	ldr	r3, [r3, #12]
    7f78:	4618      	mov	r0, r3
    7f7a:	4b03      	ldr	r3, [pc, #12]	; (7f88 <_tcc_timer_is_started+0x1c>)
    7f7c:	4798      	blx	r3
    7f7e:	4603      	mov	r3, r0
}
    7f80:	4618      	mov	r0, r3
    7f82:	3708      	adds	r7, #8
    7f84:	46bd      	mov	sp, r7
    7f86:	bd80      	pop	{r7, pc}
    7f88:	00007c0d 	.word	0x00007c0d

00007f8c <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    7f8c:	b480      	push	{r7}
    7f8e:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    7f90:	4b02      	ldr	r3, [pc, #8]	; (7f9c <_tcc_get_timer+0x10>)
}
    7f92:	4618      	mov	r0, r3
    7f94:	46bd      	mov	sp, r7
    7f96:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f9a:	4770      	bx	lr
    7f9c:	200000c0 	.word	0x200000c0

00007fa0 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    7fa0:	b580      	push	{r7, lr}
    7fa2:	b084      	sub	sp, #16
    7fa4:	af00      	add	r7, sp, #0
    7fa6:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7fa8:	687b      	ldr	r3, [r7, #4]
    7faa:	68db      	ldr	r3, [r3, #12]
    7fac:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7fae:	68f8      	ldr	r0, [r7, #12]
    7fb0:	4b08      	ldr	r3, [pc, #32]	; (7fd4 <_tcc_timer_set_irq+0x34>)
    7fb2:	4798      	blx	r3
    7fb4:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7fb6:	68bb      	ldr	r3, [r7, #8]
    7fb8:	2b00      	cmp	r3, #0
    7fba:	d006      	beq.n	7fca <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    7fbc:	68bb      	ldr	r3, [r7, #8]
    7fbe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7fc2:	b2db      	uxtb	r3, r3
    7fc4:	4618      	mov	r0, r3
    7fc6:	4b04      	ldr	r3, [pc, #16]	; (7fd8 <_tcc_timer_set_irq+0x38>)
    7fc8:	4798      	blx	r3
	}
}
    7fca:	bf00      	nop
    7fcc:	3710      	adds	r7, #16
    7fce:	46bd      	mov	sp, r7
    7fd0:	bd80      	pop	{r7, pc}
    7fd2:	bf00      	nop
    7fd4:	0000804d 	.word	0x0000804d
    7fd8:	00004521 	.word	0x00004521

00007fdc <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    7fdc:	b580      	push	{r7, lr}
    7fde:	b084      	sub	sp, #16
    7fe0:	af00      	add	r7, sp, #0
    7fe2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7fe4:	687b      	ldr	r3, [r7, #4]
    7fe6:	68db      	ldr	r3, [r3, #12]
    7fe8:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    7fea:	68f8      	ldr	r0, [r7, #12]
    7fec:	4b07      	ldr	r3, [pc, #28]	; (800c <tcc_interrupt_handler+0x30>)
    7fee:	4798      	blx	r3
    7ff0:	4603      	mov	r3, r0
    7ff2:	2b00      	cmp	r3, #0
    7ff4:	d006      	beq.n	8004 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    7ff6:	68f8      	ldr	r0, [r7, #12]
    7ff8:	4b05      	ldr	r3, [pc, #20]	; (8010 <tcc_interrupt_handler+0x34>)
    7ffa:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7ffc:	687b      	ldr	r3, [r7, #4]
    7ffe:	681b      	ldr	r3, [r3, #0]
    8000:	6878      	ldr	r0, [r7, #4]
    8002:	4798      	blx	r3
	}
}
    8004:	bf00      	nop
    8006:	3710      	adds	r7, #16
    8008:	46bd      	mov	sp, r7
    800a:	bd80      	pop	{r7, pc}
    800c:	00007b45 	.word	0x00007b45
    8010:	00007b6b 	.word	0x00007b6b

00008014 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    8014:	b580      	push	{r7, lr}
    8016:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    8018:	4b03      	ldr	r3, [pc, #12]	; (8028 <TCC0_0_Handler+0x14>)
    801a:	681b      	ldr	r3, [r3, #0]
    801c:	4618      	mov	r0, r3
    801e:	4b03      	ldr	r3, [pc, #12]	; (802c <TCC0_0_Handler+0x18>)
    8020:	4798      	blx	r3
}
    8022:	bf00      	nop
    8024:	bd80      	pop	{r7, pc}
    8026:	bf00      	nop
    8028:	20000c34 	.word	0x20000c34
    802c:	00007fdd 	.word	0x00007fdd

00008030 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    8030:	b580      	push	{r7, lr}
    8032:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    8034:	4b03      	ldr	r3, [pc, #12]	; (8044 <TCC1_0_Handler+0x14>)
    8036:	681b      	ldr	r3, [r3, #0]
    8038:	4618      	mov	r0, r3
    803a:	4b03      	ldr	r3, [pc, #12]	; (8048 <TCC1_0_Handler+0x18>)
    803c:	4798      	blx	r3
}
    803e:	bf00      	nop
    8040:	bd80      	pop	{r7, pc}
    8042:	bf00      	nop
    8044:	20000c38 	.word	0x20000c38
    8048:	00007fdd 	.word	0x00007fdd

0000804c <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    804c:	b480      	push	{r7}
    804e:	b085      	sub	sp, #20
    8050:	af00      	add	r7, sp, #0
    8052:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    8054:	2300      	movs	r3, #0
    8056:	73fb      	strb	r3, [r7, #15]
    8058:	e015      	b.n	8086 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    805a:	7bfa      	ldrb	r2, [r7, #15]
    805c:	490f      	ldr	r1, [pc, #60]	; (809c <_get_tcc_cfg+0x50>)
    805e:	4613      	mov	r3, r2
    8060:	005b      	lsls	r3, r3, #1
    8062:	4413      	add	r3, r2
    8064:	011b      	lsls	r3, r3, #4
    8066:	440b      	add	r3, r1
    8068:	681a      	ldr	r2, [r3, #0]
    806a:	687b      	ldr	r3, [r7, #4]
    806c:	429a      	cmp	r2, r3
    806e:	d107      	bne.n	8080 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    8070:	7bfa      	ldrb	r2, [r7, #15]
    8072:	4613      	mov	r3, r2
    8074:	005b      	lsls	r3, r3, #1
    8076:	4413      	add	r3, r2
    8078:	011b      	lsls	r3, r3, #4
    807a:	4a08      	ldr	r2, [pc, #32]	; (809c <_get_tcc_cfg+0x50>)
    807c:	4413      	add	r3, r2
    807e:	e006      	b.n	808e <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    8080:	7bfb      	ldrb	r3, [r7, #15]
    8082:	3301      	adds	r3, #1
    8084:	73fb      	strb	r3, [r7, #15]
    8086:	7bfb      	ldrb	r3, [r7, #15]
    8088:	2b01      	cmp	r3, #1
    808a:	d9e6      	bls.n	805a <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    808c:	2300      	movs	r3, #0
}
    808e:	4618      	mov	r0, r3
    8090:	3714      	adds	r7, #20
    8092:	46bd      	mov	sp, r7
    8094:	f85d 7b04 	ldr.w	r7, [sp], #4
    8098:	4770      	bx	lr
    809a:	bf00      	nop
    809c:	20000060 	.word	0x20000060

000080a0 <__NVIC_EnableIRQ>:
{
    80a0:	b480      	push	{r7}
    80a2:	b083      	sub	sp, #12
    80a4:	af00      	add	r7, sp, #0
    80a6:	4603      	mov	r3, r0
    80a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    80aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    80ae:	2b00      	cmp	r3, #0
    80b0:	db0b      	blt.n	80ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    80b2:	4909      	ldr	r1, [pc, #36]	; (80d8 <__NVIC_EnableIRQ+0x38>)
    80b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    80b8:	095b      	lsrs	r3, r3, #5
    80ba:	88fa      	ldrh	r2, [r7, #6]
    80bc:	f002 021f 	and.w	r2, r2, #31
    80c0:	2001      	movs	r0, #1
    80c2:	fa00 f202 	lsl.w	r2, r0, r2
    80c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    80ca:	bf00      	nop
    80cc:	370c      	adds	r7, #12
    80ce:	46bd      	mov	sp, r7
    80d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    80d4:	4770      	bx	lr
    80d6:	bf00      	nop
    80d8:	e000e100 	.word	0xe000e100

000080dc <__NVIC_DisableIRQ>:
{
    80dc:	b480      	push	{r7}
    80de:	b083      	sub	sp, #12
    80e0:	af00      	add	r7, sp, #0
    80e2:	4603      	mov	r3, r0
    80e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    80e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    80ea:	2b00      	cmp	r3, #0
    80ec:	db10      	blt.n	8110 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    80ee:	490b      	ldr	r1, [pc, #44]	; (811c <__NVIC_DisableIRQ+0x40>)
    80f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    80f4:	095b      	lsrs	r3, r3, #5
    80f6:	88fa      	ldrh	r2, [r7, #6]
    80f8:	f002 021f 	and.w	r2, r2, #31
    80fc:	2001      	movs	r0, #1
    80fe:	fa00 f202 	lsl.w	r2, r0, r2
    8102:	3320      	adds	r3, #32
    8104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8108:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    810c:	f3bf 8f6f 	isb	sy
}
    8110:	bf00      	nop
    8112:	370c      	adds	r7, #12
    8114:	46bd      	mov	sp, r7
    8116:	f85d 7b04 	ldr.w	r7, [sp], #4
    811a:	4770      	bx	lr
    811c:	e000e100 	.word	0xe000e100

00008120 <__NVIC_ClearPendingIRQ>:
{
    8120:	b480      	push	{r7}
    8122:	b083      	sub	sp, #12
    8124:	af00      	add	r7, sp, #0
    8126:	4603      	mov	r3, r0
    8128:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    812a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    812e:	2b00      	cmp	r3, #0
    8130:	db0c      	blt.n	814c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8132:	4909      	ldr	r1, [pc, #36]	; (8158 <__NVIC_ClearPendingIRQ+0x38>)
    8134:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8138:	095b      	lsrs	r3, r3, #5
    813a:	88fa      	ldrh	r2, [r7, #6]
    813c:	f002 021f 	and.w	r2, r2, #31
    8140:	2001      	movs	r0, #1
    8142:	fa00 f202 	lsl.w	r2, r0, r2
    8146:	3360      	adds	r3, #96	; 0x60
    8148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    814c:	bf00      	nop
    814e:	370c      	adds	r7, #12
    8150:	46bd      	mov	sp, r7
    8152:	f85d 7b04 	ldr.w	r7, [sp], #4
    8156:	4770      	bx	lr
    8158:	e000e100 	.word	0xe000e100

0000815c <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    815c:	b480      	push	{r7}
    815e:	b083      	sub	sp, #12
    8160:	af00      	add	r7, sp, #0
    8162:	6078      	str	r0, [r7, #4]
    8164:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8166:	bf00      	nop
    8168:	687b      	ldr	r3, [r7, #4]
    816a:	691a      	ldr	r2, [r3, #16]
    816c:	683b      	ldr	r3, [r7, #0]
    816e:	4013      	ands	r3, r2
    8170:	2b00      	cmp	r3, #0
    8172:	d1f9      	bne.n	8168 <hri_tc_wait_for_sync+0xc>
	};
}
    8174:	bf00      	nop
    8176:	370c      	adds	r7, #12
    8178:	46bd      	mov	sp, r7
    817a:	f85d 7b04 	ldr.w	r7, [sp], #4
    817e:	4770      	bx	lr

00008180 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    8180:	b480      	push	{r7}
    8182:	b083      	sub	sp, #12
    8184:	af00      	add	r7, sp, #0
    8186:	6078      	str	r0, [r7, #4]
    8188:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    818a:	687b      	ldr	r3, [r7, #4]
    818c:	691a      	ldr	r2, [r3, #16]
    818e:	683b      	ldr	r3, [r7, #0]
    8190:	4013      	ands	r3, r2
    8192:	2b00      	cmp	r3, #0
    8194:	bf14      	ite	ne
    8196:	2301      	movne	r3, #1
    8198:	2300      	moveq	r3, #0
    819a:	b2db      	uxtb	r3, r3
}
    819c:	4618      	mov	r0, r3
    819e:	370c      	adds	r7, #12
    81a0:	46bd      	mov	sp, r7
    81a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    81a6:	4770      	bx	lr

000081a8 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    81a8:	b480      	push	{r7}
    81aa:	b083      	sub	sp, #12
    81ac:	af00      	add	r7, sp, #0
    81ae:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    81b0:	687b      	ldr	r3, [r7, #4]
    81b2:	7a9b      	ldrb	r3, [r3, #10]
    81b4:	b2db      	uxtb	r3, r3
    81b6:	f003 0301 	and.w	r3, r3, #1
    81ba:	2b00      	cmp	r3, #0
    81bc:	bf14      	ite	ne
    81be:	2301      	movne	r3, #1
    81c0:	2300      	moveq	r3, #0
    81c2:	b2db      	uxtb	r3, r3
}
    81c4:	4618      	mov	r0, r3
    81c6:	370c      	adds	r7, #12
    81c8:	46bd      	mov	sp, r7
    81ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    81ce:	4770      	bx	lr

000081d0 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    81d0:	b480      	push	{r7}
    81d2:	b083      	sub	sp, #12
    81d4:	af00      	add	r7, sp, #0
    81d6:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    81d8:	687b      	ldr	r3, [r7, #4]
    81da:	2201      	movs	r2, #1
    81dc:	729a      	strb	r2, [r3, #10]
}
    81de:	bf00      	nop
    81e0:	370c      	adds	r7, #12
    81e2:	46bd      	mov	sp, r7
    81e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    81e8:	4770      	bx	lr

000081ea <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    81ea:	b480      	push	{r7}
    81ec:	b083      	sub	sp, #12
    81ee:	af00      	add	r7, sp, #0
    81f0:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    81f2:	687b      	ldr	r3, [r7, #4]
    81f4:	2202      	movs	r2, #2
    81f6:	729a      	strb	r2, [r3, #10]
}
    81f8:	bf00      	nop
    81fa:	370c      	adds	r7, #12
    81fc:	46bd      	mov	sp, r7
    81fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8202:	4770      	bx	lr

00008204 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    8204:	b480      	push	{r7}
    8206:	b083      	sub	sp, #12
    8208:	af00      	add	r7, sp, #0
    820a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    820c:	687b      	ldr	r3, [r7, #4]
    820e:	2201      	movs	r2, #1
    8210:	725a      	strb	r2, [r3, #9]
}
    8212:	bf00      	nop
    8214:	370c      	adds	r7, #12
    8216:	46bd      	mov	sp, r7
    8218:	f85d 7b04 	ldr.w	r7, [sp], #4
    821c:	4770      	bx	lr

0000821e <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    821e:	b480      	push	{r7}
    8220:	b083      	sub	sp, #12
    8222:	af00      	add	r7, sp, #0
    8224:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    8226:	687b      	ldr	r3, [r7, #4]
    8228:	7a5b      	ldrb	r3, [r3, #9]
    822a:	b2db      	uxtb	r3, r3
    822c:	085b      	lsrs	r3, r3, #1
    822e:	f003 0301 	and.w	r3, r3, #1
    8232:	2b00      	cmp	r3, #0
    8234:	bf14      	ite	ne
    8236:	2301      	movne	r3, #1
    8238:	2300      	moveq	r3, #0
    823a:	b2db      	uxtb	r3, r3
}
    823c:	4618      	mov	r0, r3
    823e:	370c      	adds	r7, #12
    8240:	46bd      	mov	sp, r7
    8242:	f85d 7b04 	ldr.w	r7, [sp], #4
    8246:	4770      	bx	lr

00008248 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    8248:	b580      	push	{r7, lr}
    824a:	b082      	sub	sp, #8
    824c:	af00      	add	r7, sp, #0
    824e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    8250:	687b      	ldr	r3, [r7, #4]
    8252:	681b      	ldr	r3, [r3, #0]
    8254:	f043 0201 	orr.w	r2, r3, #1
    8258:	687b      	ldr	r3, [r7, #4]
    825a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    825c:	2101      	movs	r1, #1
    825e:	6878      	ldr	r0, [r7, #4]
    8260:	4b02      	ldr	r3, [pc, #8]	; (826c <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    8262:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8264:	bf00      	nop
    8266:	3708      	adds	r7, #8
    8268:	46bd      	mov	sp, r7
    826a:	bd80      	pop	{r7, pc}
    826c:	0000815d 	.word	0x0000815d

00008270 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8270:	b580      	push	{r7, lr}
    8272:	b082      	sub	sp, #8
    8274:	af00      	add	r7, sp, #0
    8276:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    8278:	687b      	ldr	r3, [r7, #4]
    827a:	681b      	ldr	r3, [r3, #0]
    827c:	f043 0202 	orr.w	r2, r3, #2
    8280:	687b      	ldr	r3, [r7, #4]
    8282:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8284:	2103      	movs	r1, #3
    8286:	6878      	ldr	r0, [r7, #4]
    8288:	4b02      	ldr	r3, [pc, #8]	; (8294 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    828a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    828c:	bf00      	nop
    828e:	3708      	adds	r7, #8
    8290:	46bd      	mov	sp, r7
    8292:	bd80      	pop	{r7, pc}
    8294:	0000815d 	.word	0x0000815d

00008298 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8298:	b580      	push	{r7, lr}
    829a:	b084      	sub	sp, #16
    829c:	af00      	add	r7, sp, #0
    829e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    82a0:	2103      	movs	r1, #3
    82a2:	6878      	ldr	r0, [r7, #4]
    82a4:	4b09      	ldr	r3, [pc, #36]	; (82cc <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    82a6:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    82a8:	687b      	ldr	r3, [r7, #4]
    82aa:	681b      	ldr	r3, [r3, #0]
    82ac:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    82ae:	68fb      	ldr	r3, [r7, #12]
    82b0:	085b      	lsrs	r3, r3, #1
    82b2:	f003 0301 	and.w	r3, r3, #1
    82b6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    82b8:	68fb      	ldr	r3, [r7, #12]
    82ba:	2b00      	cmp	r3, #0
    82bc:	bf14      	ite	ne
    82be:	2301      	movne	r3, #1
    82c0:	2300      	moveq	r3, #0
    82c2:	b2db      	uxtb	r3, r3
}
    82c4:	4618      	mov	r0, r3
    82c6:	3710      	adds	r7, #16
    82c8:	46bd      	mov	sp, r7
    82ca:	bd80      	pop	{r7, pc}
    82cc:	0000815d 	.word	0x0000815d

000082d0 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    82d0:	b580      	push	{r7, lr}
    82d2:	b082      	sub	sp, #8
    82d4:	af00      	add	r7, sp, #0
    82d6:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    82d8:	687b      	ldr	r3, [r7, #4]
    82da:	681b      	ldr	r3, [r3, #0]
    82dc:	f023 0202 	bic.w	r2, r3, #2
    82e0:	687b      	ldr	r3, [r7, #4]
    82e2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    82e4:	2103      	movs	r1, #3
    82e6:	6878      	ldr	r0, [r7, #4]
    82e8:	4b02      	ldr	r3, [pc, #8]	; (82f4 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    82ea:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    82ec:	bf00      	nop
    82ee:	3708      	adds	r7, #8
    82f0:	46bd      	mov	sp, r7
    82f2:	bd80      	pop	{r7, pc}
    82f4:	0000815d 	.word	0x0000815d

000082f8 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    82f8:	b480      	push	{r7}
    82fa:	b085      	sub	sp, #20
    82fc:	af00      	add	r7, sp, #0
    82fe:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8300:	687b      	ldr	r3, [r7, #4]
    8302:	681b      	ldr	r3, [r3, #0]
    8304:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    8306:	68fb      	ldr	r3, [r7, #12]
    8308:	089b      	lsrs	r3, r3, #2
    830a:	f003 0303 	and.w	r3, r3, #3
    830e:	60fb      	str	r3, [r7, #12]
	return tmp;
    8310:	68fb      	ldr	r3, [r7, #12]
}
    8312:	4618      	mov	r0, r3
    8314:	3714      	adds	r7, #20
    8316:	46bd      	mov	sp, r7
    8318:	f85d 7b04 	ldr.w	r7, [sp], #4
    831c:	4770      	bx	lr
	...

00008320 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    8320:	b580      	push	{r7, lr}
    8322:	b084      	sub	sp, #16
    8324:	af00      	add	r7, sp, #0
    8326:	6078      	str	r0, [r7, #4]
    8328:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    832a:	2103      	movs	r1, #3
    832c:	6878      	ldr	r0, [r7, #4]
    832e:	4b07      	ldr	r3, [pc, #28]	; (834c <hri_tc_get_CTRLA_reg+0x2c>)
    8330:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8332:	687b      	ldr	r3, [r7, #4]
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8338:	68fa      	ldr	r2, [r7, #12]
    833a:	683b      	ldr	r3, [r7, #0]
    833c:	4013      	ands	r3, r2
    833e:	60fb      	str	r3, [r7, #12]
	return tmp;
    8340:	68fb      	ldr	r3, [r7, #12]
}
    8342:	4618      	mov	r0, r3
    8344:	3710      	adds	r7, #16
    8346:	46bd      	mov	sp, r7
    8348:	bd80      	pop	{r7, pc}
    834a:	bf00      	nop
    834c:	0000815d 	.word	0x0000815d

00008350 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    8350:	b580      	push	{r7, lr}
    8352:	b082      	sub	sp, #8
    8354:	af00      	add	r7, sp, #0
    8356:	6078      	str	r0, [r7, #4]
    8358:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    835a:	687b      	ldr	r3, [r7, #4]
    835c:	683a      	ldr	r2, [r7, #0]
    835e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8360:	2103      	movs	r1, #3
    8362:	6878      	ldr	r0, [r7, #4]
    8364:	4b02      	ldr	r3, [pc, #8]	; (8370 <hri_tc_write_CTRLA_reg+0x20>)
    8366:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8368:	bf00      	nop
    836a:	3708      	adds	r7, #8
    836c:	46bd      	mov	sp, r7
    836e:	bd80      	pop	{r7, pc}
    8370:	0000815d 	.word	0x0000815d

00008374 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    8374:	b480      	push	{r7}
    8376:	b083      	sub	sp, #12
    8378:	af00      	add	r7, sp, #0
    837a:	6078      	str	r0, [r7, #4]
    837c:	460b      	mov	r3, r1
    837e:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    8380:	687b      	ldr	r3, [r7, #4]
    8382:	887a      	ldrh	r2, [r7, #2]
    8384:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    8386:	bf00      	nop
    8388:	370c      	adds	r7, #12
    838a:	46bd      	mov	sp, r7
    838c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8390:	4770      	bx	lr

00008392 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    8392:	b480      	push	{r7}
    8394:	b083      	sub	sp, #12
    8396:	af00      	add	r7, sp, #0
    8398:	6078      	str	r0, [r7, #4]
    839a:	460b      	mov	r3, r1
    839c:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    839e:	687b      	ldr	r3, [r7, #4]
    83a0:	78fa      	ldrb	r2, [r7, #3]
    83a2:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    83a4:	bf00      	nop
    83a6:	370c      	adds	r7, #12
    83a8:	46bd      	mov	sp, r7
    83aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    83ae:	4770      	bx	lr

000083b0 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    83b0:	b480      	push	{r7}
    83b2:	b083      	sub	sp, #12
    83b4:	af00      	add	r7, sp, #0
    83b6:	6078      	str	r0, [r7, #4]
    83b8:	460b      	mov	r3, r1
    83ba:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    83bc:	687b      	ldr	r3, [r7, #4]
    83be:	78fa      	ldrb	r2, [r7, #3]
    83c0:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    83c2:	bf00      	nop
    83c4:	370c      	adds	r7, #12
    83c6:	46bd      	mov	sp, r7
    83c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    83cc:	4770      	bx	lr
	...

000083d0 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    83d0:	b580      	push	{r7, lr}
    83d2:	b082      	sub	sp, #8
    83d4:	af00      	add	r7, sp, #0
    83d6:	6078      	str	r0, [r7, #4]
    83d8:	460b      	mov	r3, r1
    83da:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    83dc:	687b      	ldr	r3, [r7, #4]
    83de:	78fa      	ldrb	r2, [r7, #3]
    83e0:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    83e2:	2120      	movs	r1, #32
    83e4:	6878      	ldr	r0, [r7, #4]
    83e6:	4b03      	ldr	r3, [pc, #12]	; (83f4 <hri_tccount8_write_PER_reg+0x24>)
    83e8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    83ea:	bf00      	nop
    83ec:	3708      	adds	r7, #8
    83ee:	46bd      	mov	sp, r7
    83f0:	bd80      	pop	{r7, pc}
    83f2:	bf00      	nop
    83f4:	0000815d 	.word	0x0000815d

000083f8 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    83f8:	b580      	push	{r7, lr}
    83fa:	b082      	sub	sp, #8
    83fc:	af00      	add	r7, sp, #0
    83fe:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    8400:	2120      	movs	r1, #32
    8402:	6878      	ldr	r0, [r7, #4]
    8404:	4b04      	ldr	r3, [pc, #16]	; (8418 <hri_tccount8_read_PER_reg+0x20>)
    8406:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    8408:	687b      	ldr	r3, [r7, #4]
    840a:	7edb      	ldrb	r3, [r3, #27]
    840c:	b2db      	uxtb	r3, r3
}
    840e:	4618      	mov	r0, r3
    8410:	3708      	adds	r7, #8
    8412:	46bd      	mov	sp, r7
    8414:	bd80      	pop	{r7, pc}
    8416:	bf00      	nop
    8418:	0000815d 	.word	0x0000815d

0000841c <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    841c:	b580      	push	{r7, lr}
    841e:	b082      	sub	sp, #8
    8420:	af00      	add	r7, sp, #0
    8422:	6078      	str	r0, [r7, #4]
    8424:	460b      	mov	r3, r1
    8426:	70fb      	strb	r3, [r7, #3]
    8428:	4613      	mov	r3, r2
    842a:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    842c:	78fb      	ldrb	r3, [r7, #3]
    842e:	687a      	ldr	r2, [r7, #4]
    8430:	4413      	add	r3, r2
    8432:	78ba      	ldrb	r2, [r7, #2]
    8434:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8436:	21c0      	movs	r1, #192	; 0xc0
    8438:	6878      	ldr	r0, [r7, #4]
    843a:	4b03      	ldr	r3, [pc, #12]	; (8448 <hri_tccount8_write_CC_reg+0x2c>)
    843c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    843e:	bf00      	nop
    8440:	3708      	adds	r7, #8
    8442:	46bd      	mov	sp, r7
    8444:	bd80      	pop	{r7, pc}
    8446:	bf00      	nop
    8448:	0000815d 	.word	0x0000815d

0000844c <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    844c:	b580      	push	{r7, lr}
    844e:	b082      	sub	sp, #8
    8450:	af00      	add	r7, sp, #0
    8452:	6078      	str	r0, [r7, #4]
    8454:	460b      	mov	r3, r1
    8456:	70fb      	strb	r3, [r7, #3]
    8458:	4613      	mov	r3, r2
    845a:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    845c:	78fb      	ldrb	r3, [r7, #3]
    845e:	687a      	ldr	r2, [r7, #4]
    8460:	330c      	adds	r3, #12
    8462:	005b      	lsls	r3, r3, #1
    8464:	4413      	add	r3, r2
    8466:	883a      	ldrh	r2, [r7, #0]
    8468:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    846a:	21c0      	movs	r1, #192	; 0xc0
    846c:	6878      	ldr	r0, [r7, #4]
    846e:	4b03      	ldr	r3, [pc, #12]	; (847c <hri_tccount16_write_CC_reg+0x30>)
    8470:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8472:	bf00      	nop
    8474:	3708      	adds	r7, #8
    8476:	46bd      	mov	sp, r7
    8478:	bd80      	pop	{r7, pc}
    847a:	bf00      	nop
    847c:	0000815d 	.word	0x0000815d

00008480 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    8480:	b580      	push	{r7, lr}
    8482:	b082      	sub	sp, #8
    8484:	af00      	add	r7, sp, #0
    8486:	6078      	str	r0, [r7, #4]
    8488:	460b      	mov	r3, r1
    848a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    848c:	21c0      	movs	r1, #192	; 0xc0
    848e:	6878      	ldr	r0, [r7, #4]
    8490:	4b06      	ldr	r3, [pc, #24]	; (84ac <hri_tccount16_read_CC_reg+0x2c>)
    8492:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    8494:	78fb      	ldrb	r3, [r7, #3]
    8496:	687a      	ldr	r2, [r7, #4]
    8498:	330c      	adds	r3, #12
    849a:	005b      	lsls	r3, r3, #1
    849c:	4413      	add	r3, r2
    849e:	889b      	ldrh	r3, [r3, #4]
    84a0:	b29b      	uxth	r3, r3
}
    84a2:	4618      	mov	r0, r3
    84a4:	3708      	adds	r7, #8
    84a6:	46bd      	mov	sp, r7
    84a8:	bd80      	pop	{r7, pc}
    84aa:	bf00      	nop
    84ac:	0000815d 	.word	0x0000815d

000084b0 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    84b0:	b580      	push	{r7, lr}
    84b2:	b084      	sub	sp, #16
    84b4:	af00      	add	r7, sp, #0
    84b6:	60f8      	str	r0, [r7, #12]
    84b8:	460b      	mov	r3, r1
    84ba:	607a      	str	r2, [r7, #4]
    84bc:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    84be:	7afb      	ldrb	r3, [r7, #11]
    84c0:	68fa      	ldr	r2, [r7, #12]
    84c2:	3306      	adds	r3, #6
    84c4:	009b      	lsls	r3, r3, #2
    84c6:	4413      	add	r3, r2
    84c8:	687a      	ldr	r2, [r7, #4]
    84ca:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    84cc:	21c0      	movs	r1, #192	; 0xc0
    84ce:	68f8      	ldr	r0, [r7, #12]
    84d0:	4b02      	ldr	r3, [pc, #8]	; (84dc <hri_tccount32_write_CC_reg+0x2c>)
    84d2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    84d4:	bf00      	nop
    84d6:	3710      	adds	r7, #16
    84d8:	46bd      	mov	sp, r7
    84da:	bd80      	pop	{r7, pc}
    84dc:	0000815d 	.word	0x0000815d

000084e0 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    84e0:	b580      	push	{r7, lr}
    84e2:	b082      	sub	sp, #8
    84e4:	af00      	add	r7, sp, #0
    84e6:	6078      	str	r0, [r7, #4]
    84e8:	460b      	mov	r3, r1
    84ea:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    84ec:	21c0      	movs	r1, #192	; 0xc0
    84ee:	6878      	ldr	r0, [r7, #4]
    84f0:	4b05      	ldr	r3, [pc, #20]	; (8508 <hri_tccount32_read_CC_reg+0x28>)
    84f2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    84f4:	78fb      	ldrb	r3, [r7, #3]
    84f6:	687a      	ldr	r2, [r7, #4]
    84f8:	3306      	adds	r3, #6
    84fa:	009b      	lsls	r3, r3, #2
    84fc:	4413      	add	r3, r2
    84fe:	685b      	ldr	r3, [r3, #4]
}
    8500:	4618      	mov	r0, r3
    8502:	3708      	adds	r7, #8
    8504:	46bd      	mov	sp, r7
    8506:	bd80      	pop	{r7, pc}
    8508:	0000815d 	.word	0x0000815d

0000850c <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    850c:	b580      	push	{r7, lr}
    850e:	b084      	sub	sp, #16
    8510:	af00      	add	r7, sp, #0
    8512:	6078      	str	r0, [r7, #4]
    8514:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    8516:	6838      	ldr	r0, [r7, #0]
    8518:	4b93      	ldr	r3, [pc, #588]	; (8768 <_tc_timer_init+0x25c>)
    851a:	4798      	blx	r3
    851c:	4603      	mov	r3, r0
    851e:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    8520:	687b      	ldr	r3, [r7, #4]
    8522:	683a      	ldr	r2, [r7, #0]
    8524:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    8526:	22a4      	movs	r2, #164	; 0xa4
    8528:	4990      	ldr	r1, [pc, #576]	; (876c <_tc_timer_init+0x260>)
    852a:	2001      	movs	r0, #1
    852c:	4b90      	ldr	r3, [pc, #576]	; (8770 <_tc_timer_init+0x264>)
    852e:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8530:	2101      	movs	r1, #1
    8532:	6838      	ldr	r0, [r7, #0]
    8534:	4b8f      	ldr	r3, [pc, #572]	; (8774 <_tc_timer_init+0x268>)
    8536:	4798      	blx	r3
    8538:	4603      	mov	r3, r0
    853a:	f083 0301 	eor.w	r3, r3, #1
    853e:	b2db      	uxtb	r3, r3
    8540:	2b00      	cmp	r3, #0
    8542:	d011      	beq.n	8568 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8544:	2102      	movs	r1, #2
    8546:	6838      	ldr	r0, [r7, #0]
    8548:	4b8b      	ldr	r3, [pc, #556]	; (8778 <_tc_timer_init+0x26c>)
    854a:	4798      	blx	r3
    854c:	4603      	mov	r3, r0
    854e:	2b00      	cmp	r3, #0
    8550:	d006      	beq.n	8560 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8552:	6838      	ldr	r0, [r7, #0]
    8554:	4b89      	ldr	r3, [pc, #548]	; (877c <_tc_timer_init+0x270>)
    8556:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    8558:	2102      	movs	r1, #2
    855a:	6838      	ldr	r0, [r7, #0]
    855c:	4b88      	ldr	r3, [pc, #544]	; (8780 <_tc_timer_init+0x274>)
    855e:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    8560:	2101      	movs	r1, #1
    8562:	6838      	ldr	r0, [r7, #0]
    8564:	4b87      	ldr	r3, [pc, #540]	; (8784 <_tc_timer_init+0x278>)
    8566:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8568:	2101      	movs	r1, #1
    856a:	6838      	ldr	r0, [r7, #0]
    856c:	4b84      	ldr	r3, [pc, #528]	; (8780 <_tc_timer_init+0x274>)
    856e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8570:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8574:	4984      	ldr	r1, [pc, #528]	; (8788 <_tc_timer_init+0x27c>)
    8576:	4613      	mov	r3, r2
    8578:	009b      	lsls	r3, r3, #2
    857a:	4413      	add	r3, r2
    857c:	009b      	lsls	r3, r3, #2
    857e:	440b      	add	r3, r1
    8580:	3304      	adds	r3, #4
    8582:	681b      	ldr	r3, [r3, #0]
    8584:	4619      	mov	r1, r3
    8586:	6838      	ldr	r0, [r7, #0]
    8588:	4b7e      	ldr	r3, [pc, #504]	; (8784 <_tc_timer_init+0x278>)
    858a:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    858c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8590:	497d      	ldr	r1, [pc, #500]	; (8788 <_tc_timer_init+0x27c>)
    8592:	4613      	mov	r3, r2
    8594:	009b      	lsls	r3, r3, #2
    8596:	4413      	add	r3, r2
    8598:	009b      	lsls	r3, r3, #2
    859a:	440b      	add	r3, r1
    859c:	330a      	adds	r3, #10
    859e:	781b      	ldrb	r3, [r3, #0]
    85a0:	4619      	mov	r1, r3
    85a2:	6838      	ldr	r0, [r7, #0]
    85a4:	4b79      	ldr	r3, [pc, #484]	; (878c <_tc_timer_init+0x280>)
    85a6:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    85a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85ac:	4976      	ldr	r1, [pc, #472]	; (8788 <_tc_timer_init+0x27c>)
    85ae:	4613      	mov	r3, r2
    85b0:	009b      	lsls	r3, r3, #2
    85b2:	4413      	add	r3, r2
    85b4:	009b      	lsls	r3, r3, #2
    85b6:	440b      	add	r3, r1
    85b8:	3308      	adds	r3, #8
    85ba:	881b      	ldrh	r3, [r3, #0]
    85bc:	4619      	mov	r1, r3
    85be:	6838      	ldr	r0, [r7, #0]
    85c0:	4b73      	ldr	r3, [pc, #460]	; (8790 <_tc_timer_init+0x284>)
    85c2:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    85c4:	2101      	movs	r1, #1
    85c6:	6838      	ldr	r0, [r7, #0]
    85c8:	4b72      	ldr	r3, [pc, #456]	; (8794 <_tc_timer_init+0x288>)
    85ca:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    85cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85d0:	496d      	ldr	r1, [pc, #436]	; (8788 <_tc_timer_init+0x27c>)
    85d2:	4613      	mov	r3, r2
    85d4:	009b      	lsls	r3, r3, #2
    85d6:	4413      	add	r3, r2
    85d8:	009b      	lsls	r3, r3, #2
    85da:	440b      	add	r3, r1
    85dc:	3304      	adds	r3, #4
    85de:	681b      	ldr	r3, [r3, #0]
    85e0:	f003 030c 	and.w	r3, r3, #12
    85e4:	2b08      	cmp	r3, #8
    85e6:	d11e      	bne.n	8626 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    85e8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85ec:	4966      	ldr	r1, [pc, #408]	; (8788 <_tc_timer_init+0x27c>)
    85ee:	4613      	mov	r3, r2
    85f0:	009b      	lsls	r3, r3, #2
    85f2:	4413      	add	r3, r2
    85f4:	009b      	lsls	r3, r3, #2
    85f6:	440b      	add	r3, r1
    85f8:	330c      	adds	r3, #12
    85fa:	681b      	ldr	r3, [r3, #0]
    85fc:	461a      	mov	r2, r3
    85fe:	2100      	movs	r1, #0
    8600:	6838      	ldr	r0, [r7, #0]
    8602:	4b65      	ldr	r3, [pc, #404]	; (8798 <_tc_timer_init+0x28c>)
    8604:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    8606:	f997 200f 	ldrsb.w	r2, [r7, #15]
    860a:	495f      	ldr	r1, [pc, #380]	; (8788 <_tc_timer_init+0x27c>)
    860c:	4613      	mov	r3, r2
    860e:	009b      	lsls	r3, r3, #2
    8610:	4413      	add	r3, r2
    8612:	009b      	lsls	r3, r3, #2
    8614:	440b      	add	r3, r1
    8616:	3310      	adds	r3, #16
    8618:	681b      	ldr	r3, [r3, #0]
    861a:	461a      	mov	r2, r3
    861c:	2101      	movs	r1, #1
    861e:	6838      	ldr	r0, [r7, #0]
    8620:	4b5d      	ldr	r3, [pc, #372]	; (8798 <_tc_timer_init+0x28c>)
    8622:	4798      	blx	r3
    8624:	e06a      	b.n	86fc <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    8626:	f997 200f 	ldrsb.w	r2, [r7, #15]
    862a:	4957      	ldr	r1, [pc, #348]	; (8788 <_tc_timer_init+0x27c>)
    862c:	4613      	mov	r3, r2
    862e:	009b      	lsls	r3, r3, #2
    8630:	4413      	add	r3, r2
    8632:	009b      	lsls	r3, r3, #2
    8634:	440b      	add	r3, r1
    8636:	3304      	adds	r3, #4
    8638:	681b      	ldr	r3, [r3, #0]
    863a:	f003 030c 	and.w	r3, r3, #12
    863e:	2b00      	cmp	r3, #0
    8640:	d120      	bne.n	8684 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8642:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8646:	4950      	ldr	r1, [pc, #320]	; (8788 <_tc_timer_init+0x27c>)
    8648:	4613      	mov	r3, r2
    864a:	009b      	lsls	r3, r3, #2
    864c:	4413      	add	r3, r2
    864e:	009b      	lsls	r3, r3, #2
    8650:	440b      	add	r3, r1
    8652:	330c      	adds	r3, #12
    8654:	681b      	ldr	r3, [r3, #0]
    8656:	b29b      	uxth	r3, r3
    8658:	461a      	mov	r2, r3
    865a:	2100      	movs	r1, #0
    865c:	6838      	ldr	r0, [r7, #0]
    865e:	4b4f      	ldr	r3, [pc, #316]	; (879c <_tc_timer_init+0x290>)
    8660:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8662:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8666:	4948      	ldr	r1, [pc, #288]	; (8788 <_tc_timer_init+0x27c>)
    8668:	4613      	mov	r3, r2
    866a:	009b      	lsls	r3, r3, #2
    866c:	4413      	add	r3, r2
    866e:	009b      	lsls	r3, r3, #2
    8670:	440b      	add	r3, r1
    8672:	3310      	adds	r3, #16
    8674:	681b      	ldr	r3, [r3, #0]
    8676:	b29b      	uxth	r3, r3
    8678:	461a      	mov	r2, r3
    867a:	2101      	movs	r1, #1
    867c:	6838      	ldr	r0, [r7, #0]
    867e:	4b47      	ldr	r3, [pc, #284]	; (879c <_tc_timer_init+0x290>)
    8680:	4798      	blx	r3
    8682:	e03b      	b.n	86fc <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    8684:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8688:	493f      	ldr	r1, [pc, #252]	; (8788 <_tc_timer_init+0x27c>)
    868a:	4613      	mov	r3, r2
    868c:	009b      	lsls	r3, r3, #2
    868e:	4413      	add	r3, r2
    8690:	009b      	lsls	r3, r3, #2
    8692:	440b      	add	r3, r1
    8694:	3304      	adds	r3, #4
    8696:	681b      	ldr	r3, [r3, #0]
    8698:	f003 030c 	and.w	r3, r3, #12
    869c:	2b04      	cmp	r3, #4
    869e:	d12d      	bne.n	86fc <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    86a0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    86a4:	4938      	ldr	r1, [pc, #224]	; (8788 <_tc_timer_init+0x27c>)
    86a6:	4613      	mov	r3, r2
    86a8:	009b      	lsls	r3, r3, #2
    86aa:	4413      	add	r3, r2
    86ac:	009b      	lsls	r3, r3, #2
    86ae:	440b      	add	r3, r1
    86b0:	330c      	adds	r3, #12
    86b2:	681b      	ldr	r3, [r3, #0]
    86b4:	b2db      	uxtb	r3, r3
    86b6:	461a      	mov	r2, r3
    86b8:	2100      	movs	r1, #0
    86ba:	6838      	ldr	r0, [r7, #0]
    86bc:	4b38      	ldr	r3, [pc, #224]	; (87a0 <_tc_timer_init+0x294>)
    86be:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    86c0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    86c4:	4930      	ldr	r1, [pc, #192]	; (8788 <_tc_timer_init+0x27c>)
    86c6:	4613      	mov	r3, r2
    86c8:	009b      	lsls	r3, r3, #2
    86ca:	4413      	add	r3, r2
    86cc:	009b      	lsls	r3, r3, #2
    86ce:	440b      	add	r3, r1
    86d0:	3310      	adds	r3, #16
    86d2:	681b      	ldr	r3, [r3, #0]
    86d4:	b2db      	uxtb	r3, r3
    86d6:	461a      	mov	r2, r3
    86d8:	2101      	movs	r1, #1
    86da:	6838      	ldr	r0, [r7, #0]
    86dc:	4b30      	ldr	r3, [pc, #192]	; (87a0 <_tc_timer_init+0x294>)
    86de:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    86e0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    86e4:	4928      	ldr	r1, [pc, #160]	; (8788 <_tc_timer_init+0x27c>)
    86e6:	4613      	mov	r3, r2
    86e8:	009b      	lsls	r3, r3, #2
    86ea:	4413      	add	r3, r2
    86ec:	009b      	lsls	r3, r3, #2
    86ee:	440b      	add	r3, r1
    86f0:	330b      	adds	r3, #11
    86f2:	781b      	ldrb	r3, [r3, #0]
    86f4:	4619      	mov	r1, r3
    86f6:	6838      	ldr	r0, [r7, #0]
    86f8:	4b2a      	ldr	r3, [pc, #168]	; (87a4 <_tc_timer_init+0x298>)
    86fa:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    86fc:	6838      	ldr	r0, [r7, #0]
    86fe:	4b2a      	ldr	r3, [pc, #168]	; (87a8 <_tc_timer_init+0x29c>)
    8700:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    8702:	6879      	ldr	r1, [r7, #4]
    8704:	6838      	ldr	r0, [r7, #0]
    8706:	4b29      	ldr	r3, [pc, #164]	; (87ac <_tc_timer_init+0x2a0>)
    8708:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    870a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    870e:	491e      	ldr	r1, [pc, #120]	; (8788 <_tc_timer_init+0x27c>)
    8710:	4613      	mov	r3, r2
    8712:	009b      	lsls	r3, r3, #2
    8714:	4413      	add	r3, r2
    8716:	009b      	lsls	r3, r3, #2
    8718:	440b      	add	r3, r1
    871a:	3302      	adds	r3, #2
    871c:	f9b3 3000 	ldrsh.w	r3, [r3]
    8720:	4618      	mov	r0, r3
    8722:	4b23      	ldr	r3, [pc, #140]	; (87b0 <_tc_timer_init+0x2a4>)
    8724:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8726:	f997 200f 	ldrsb.w	r2, [r7, #15]
    872a:	4917      	ldr	r1, [pc, #92]	; (8788 <_tc_timer_init+0x27c>)
    872c:	4613      	mov	r3, r2
    872e:	009b      	lsls	r3, r3, #2
    8730:	4413      	add	r3, r2
    8732:	009b      	lsls	r3, r3, #2
    8734:	440b      	add	r3, r1
    8736:	3302      	adds	r3, #2
    8738:	f9b3 3000 	ldrsh.w	r3, [r3]
    873c:	4618      	mov	r0, r3
    873e:	4b1d      	ldr	r3, [pc, #116]	; (87b4 <_tc_timer_init+0x2a8>)
    8740:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8742:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8746:	4910      	ldr	r1, [pc, #64]	; (8788 <_tc_timer_init+0x27c>)
    8748:	4613      	mov	r3, r2
    874a:	009b      	lsls	r3, r3, #2
    874c:	4413      	add	r3, r2
    874e:	009b      	lsls	r3, r3, #2
    8750:	440b      	add	r3, r1
    8752:	3302      	adds	r3, #2
    8754:	f9b3 3000 	ldrsh.w	r3, [r3]
    8758:	4618      	mov	r0, r3
    875a:	4b17      	ldr	r3, [pc, #92]	; (87b8 <_tc_timer_init+0x2ac>)
    875c:	4798      	blx	r3

	return ERR_NONE;
    875e:	2300      	movs	r3, #0
}
    8760:	4618      	mov	r0, r3
    8762:	3710      	adds	r7, #16
    8764:	46bd      	mov	sp, r7
    8766:	bd80      	pop	{r7, pc}
    8768:	00008d5d 	.word	0x00008d5d
    876c:	00011184 	.word	0x00011184
    8770:	00003cd5 	.word	0x00003cd5
    8774:	00008181 	.word	0x00008181
    8778:	00008321 	.word	0x00008321
    877c:	000082d1 	.word	0x000082d1
    8780:	0000815d 	.word	0x0000815d
    8784:	00008351 	.word	0x00008351
    8788:	200000e0 	.word	0x200000e0
    878c:	000083b1 	.word	0x000083b1
    8790:	00008375 	.word	0x00008375
    8794:	00008393 	.word	0x00008393
    8798:	000084b1 	.word	0x000084b1
    879c:	0000844d 	.word	0x0000844d
    87a0:	0000841d 	.word	0x0000841d
    87a4:	000083d1 	.word	0x000083d1
    87a8:	00008205 	.word	0x00008205
    87ac:	00008dc5 	.word	0x00008dc5
    87b0:	000080dd 	.word	0x000080dd
    87b4:	00008121 	.word	0x00008121
    87b8:	000080a1 	.word	0x000080a1

000087bc <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    87bc:	b580      	push	{r7, lr}
    87be:	b084      	sub	sp, #16
    87c0:	af00      	add	r7, sp, #0
    87c2:	6078      	str	r0, [r7, #4]
    87c4:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    87c6:	6838      	ldr	r0, [r7, #0]
    87c8:	4b73      	ldr	r3, [pc, #460]	; (8998 <_pwm_init+0x1dc>)
    87ca:	4798      	blx	r3
    87cc:	4603      	mov	r3, r0
    87ce:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    87d0:	687b      	ldr	r3, [r7, #4]
    87d2:	683a      	ldr	r2, [r7, #0]
    87d4:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    87d6:	2101      	movs	r1, #1
    87d8:	6838      	ldr	r0, [r7, #0]
    87da:	4b70      	ldr	r3, [pc, #448]	; (899c <_pwm_init+0x1e0>)
    87dc:	4798      	blx	r3
    87de:	4603      	mov	r3, r0
    87e0:	f083 0301 	eor.w	r3, r3, #1
    87e4:	b2db      	uxtb	r3, r3
    87e6:	2b00      	cmp	r3, #0
    87e8:	d011      	beq.n	880e <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    87ea:	2102      	movs	r1, #2
    87ec:	6838      	ldr	r0, [r7, #0]
    87ee:	4b6c      	ldr	r3, [pc, #432]	; (89a0 <_pwm_init+0x1e4>)
    87f0:	4798      	blx	r3
    87f2:	4603      	mov	r3, r0
    87f4:	2b00      	cmp	r3, #0
    87f6:	d006      	beq.n	8806 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    87f8:	6838      	ldr	r0, [r7, #0]
    87fa:	4b6a      	ldr	r3, [pc, #424]	; (89a4 <_pwm_init+0x1e8>)
    87fc:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    87fe:	2102      	movs	r1, #2
    8800:	6838      	ldr	r0, [r7, #0]
    8802:	4b69      	ldr	r3, [pc, #420]	; (89a8 <_pwm_init+0x1ec>)
    8804:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    8806:	2101      	movs	r1, #1
    8808:	6838      	ldr	r0, [r7, #0]
    880a:	4b68      	ldr	r3, [pc, #416]	; (89ac <_pwm_init+0x1f0>)
    880c:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    880e:	2101      	movs	r1, #1
    8810:	6838      	ldr	r0, [r7, #0]
    8812:	4b65      	ldr	r3, [pc, #404]	; (89a8 <_pwm_init+0x1ec>)
    8814:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8816:	f997 200f 	ldrsb.w	r2, [r7, #15]
    881a:	4965      	ldr	r1, [pc, #404]	; (89b0 <_pwm_init+0x1f4>)
    881c:	4613      	mov	r3, r2
    881e:	009b      	lsls	r3, r3, #2
    8820:	4413      	add	r3, r2
    8822:	009b      	lsls	r3, r3, #2
    8824:	440b      	add	r3, r1
    8826:	3304      	adds	r3, #4
    8828:	681b      	ldr	r3, [r3, #0]
    882a:	4619      	mov	r1, r3
    882c:	6838      	ldr	r0, [r7, #0]
    882e:	4b5f      	ldr	r3, [pc, #380]	; (89ac <_pwm_init+0x1f0>)
    8830:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8832:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8836:	495e      	ldr	r1, [pc, #376]	; (89b0 <_pwm_init+0x1f4>)
    8838:	4613      	mov	r3, r2
    883a:	009b      	lsls	r3, r3, #2
    883c:	4413      	add	r3, r2
    883e:	009b      	lsls	r3, r3, #2
    8840:	440b      	add	r3, r1
    8842:	330a      	adds	r3, #10
    8844:	781b      	ldrb	r3, [r3, #0]
    8846:	4619      	mov	r1, r3
    8848:	6838      	ldr	r0, [r7, #0]
    884a:	4b5a      	ldr	r3, [pc, #360]	; (89b4 <_pwm_init+0x1f8>)
    884c:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    884e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8852:	4957      	ldr	r1, [pc, #348]	; (89b0 <_pwm_init+0x1f4>)
    8854:	4613      	mov	r3, r2
    8856:	009b      	lsls	r3, r3, #2
    8858:	4413      	add	r3, r2
    885a:	009b      	lsls	r3, r3, #2
    885c:	440b      	add	r3, r1
    885e:	3308      	adds	r3, #8
    8860:	881b      	ldrh	r3, [r3, #0]
    8862:	4619      	mov	r1, r3
    8864:	6838      	ldr	r0, [r7, #0]
    8866:	4b54      	ldr	r3, [pc, #336]	; (89b8 <_pwm_init+0x1fc>)
    8868:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    886a:	2103      	movs	r1, #3
    886c:	6838      	ldr	r0, [r7, #0]
    886e:	4b53      	ldr	r3, [pc, #332]	; (89bc <_pwm_init+0x200>)
    8870:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8872:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8876:	494e      	ldr	r1, [pc, #312]	; (89b0 <_pwm_init+0x1f4>)
    8878:	4613      	mov	r3, r2
    887a:	009b      	lsls	r3, r3, #2
    887c:	4413      	add	r3, r2
    887e:	009b      	lsls	r3, r3, #2
    8880:	440b      	add	r3, r1
    8882:	3304      	adds	r3, #4
    8884:	681b      	ldr	r3, [r3, #0]
    8886:	f003 030c 	and.w	r3, r3, #12
    888a:	2b08      	cmp	r3, #8
    888c:	d11e      	bne.n	88cc <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    888e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8892:	4947      	ldr	r1, [pc, #284]	; (89b0 <_pwm_init+0x1f4>)
    8894:	4613      	mov	r3, r2
    8896:	009b      	lsls	r3, r3, #2
    8898:	4413      	add	r3, r2
    889a:	009b      	lsls	r3, r3, #2
    889c:	440b      	add	r3, r1
    889e:	330c      	adds	r3, #12
    88a0:	681b      	ldr	r3, [r3, #0]
    88a2:	461a      	mov	r2, r3
    88a4:	2100      	movs	r1, #0
    88a6:	6838      	ldr	r0, [r7, #0]
    88a8:	4b45      	ldr	r3, [pc, #276]	; (89c0 <_pwm_init+0x204>)
    88aa:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    88ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88b0:	493f      	ldr	r1, [pc, #252]	; (89b0 <_pwm_init+0x1f4>)
    88b2:	4613      	mov	r3, r2
    88b4:	009b      	lsls	r3, r3, #2
    88b6:	4413      	add	r3, r2
    88b8:	009b      	lsls	r3, r3, #2
    88ba:	440b      	add	r3, r1
    88bc:	3310      	adds	r3, #16
    88be:	681b      	ldr	r3, [r3, #0]
    88c0:	461a      	mov	r2, r3
    88c2:	2101      	movs	r1, #1
    88c4:	6838      	ldr	r0, [r7, #0]
    88c6:	4b3e      	ldr	r3, [pc, #248]	; (89c0 <_pwm_init+0x204>)
    88c8:	4798      	blx	r3
    88ca:	e031      	b.n	8930 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    88cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88d0:	4937      	ldr	r1, [pc, #220]	; (89b0 <_pwm_init+0x1f4>)
    88d2:	4613      	mov	r3, r2
    88d4:	009b      	lsls	r3, r3, #2
    88d6:	4413      	add	r3, r2
    88d8:	009b      	lsls	r3, r3, #2
    88da:	440b      	add	r3, r1
    88dc:	3304      	adds	r3, #4
    88de:	681b      	ldr	r3, [r3, #0]
    88e0:	f003 030c 	and.w	r3, r3, #12
    88e4:	2b00      	cmp	r3, #0
    88e6:	d120      	bne.n	892a <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    88e8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88ec:	4930      	ldr	r1, [pc, #192]	; (89b0 <_pwm_init+0x1f4>)
    88ee:	4613      	mov	r3, r2
    88f0:	009b      	lsls	r3, r3, #2
    88f2:	4413      	add	r3, r2
    88f4:	009b      	lsls	r3, r3, #2
    88f6:	440b      	add	r3, r1
    88f8:	330c      	adds	r3, #12
    88fa:	681b      	ldr	r3, [r3, #0]
    88fc:	b29b      	uxth	r3, r3
    88fe:	461a      	mov	r2, r3
    8900:	2100      	movs	r1, #0
    8902:	6838      	ldr	r0, [r7, #0]
    8904:	4b2f      	ldr	r3, [pc, #188]	; (89c4 <_pwm_init+0x208>)
    8906:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8908:	f997 200f 	ldrsb.w	r2, [r7, #15]
    890c:	4928      	ldr	r1, [pc, #160]	; (89b0 <_pwm_init+0x1f4>)
    890e:	4613      	mov	r3, r2
    8910:	009b      	lsls	r3, r3, #2
    8912:	4413      	add	r3, r2
    8914:	009b      	lsls	r3, r3, #2
    8916:	440b      	add	r3, r1
    8918:	3310      	adds	r3, #16
    891a:	681b      	ldr	r3, [r3, #0]
    891c:	b29b      	uxth	r3, r3
    891e:	461a      	mov	r2, r3
    8920:	2101      	movs	r1, #1
    8922:	6838      	ldr	r0, [r7, #0]
    8924:	4b27      	ldr	r3, [pc, #156]	; (89c4 <_pwm_init+0x208>)
    8926:	4798      	blx	r3
    8928:	e002      	b.n	8930 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    892a:	f04f 33ff 	mov.w	r3, #4294967295
    892e:	e02e      	b.n	898e <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    8930:	6879      	ldr	r1, [r7, #4]
    8932:	6838      	ldr	r0, [r7, #0]
    8934:	4b24      	ldr	r3, [pc, #144]	; (89c8 <_pwm_init+0x20c>)
    8936:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8938:	f997 200f 	ldrsb.w	r2, [r7, #15]
    893c:	491c      	ldr	r1, [pc, #112]	; (89b0 <_pwm_init+0x1f4>)
    893e:	4613      	mov	r3, r2
    8940:	009b      	lsls	r3, r3, #2
    8942:	4413      	add	r3, r2
    8944:	009b      	lsls	r3, r3, #2
    8946:	440b      	add	r3, r1
    8948:	3302      	adds	r3, #2
    894a:	f9b3 3000 	ldrsh.w	r3, [r3]
    894e:	4618      	mov	r0, r3
    8950:	4b1e      	ldr	r3, [pc, #120]	; (89cc <_pwm_init+0x210>)
    8952:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8954:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8958:	4915      	ldr	r1, [pc, #84]	; (89b0 <_pwm_init+0x1f4>)
    895a:	4613      	mov	r3, r2
    895c:	009b      	lsls	r3, r3, #2
    895e:	4413      	add	r3, r2
    8960:	009b      	lsls	r3, r3, #2
    8962:	440b      	add	r3, r1
    8964:	3302      	adds	r3, #2
    8966:	f9b3 3000 	ldrsh.w	r3, [r3]
    896a:	4618      	mov	r0, r3
    896c:	4b18      	ldr	r3, [pc, #96]	; (89d0 <_pwm_init+0x214>)
    896e:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8970:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8974:	490e      	ldr	r1, [pc, #56]	; (89b0 <_pwm_init+0x1f4>)
    8976:	4613      	mov	r3, r2
    8978:	009b      	lsls	r3, r3, #2
    897a:	4413      	add	r3, r2
    897c:	009b      	lsls	r3, r3, #2
    897e:	440b      	add	r3, r1
    8980:	3302      	adds	r3, #2
    8982:	f9b3 3000 	ldrsh.w	r3, [r3]
    8986:	4618      	mov	r0, r3
    8988:	4b12      	ldr	r3, [pc, #72]	; (89d4 <_pwm_init+0x218>)
    898a:	4798      	blx	r3

	return 0;
    898c:	2300      	movs	r3, #0
}
    898e:	4618      	mov	r0, r3
    8990:	3710      	adds	r7, #16
    8992:	46bd      	mov	sp, r7
    8994:	bd80      	pop	{r7, pc}
    8996:	bf00      	nop
    8998:	00008d5d 	.word	0x00008d5d
    899c:	00008181 	.word	0x00008181
    89a0:	00008321 	.word	0x00008321
    89a4:	000082d1 	.word	0x000082d1
    89a8:	0000815d 	.word	0x0000815d
    89ac:	00008351 	.word	0x00008351
    89b0:	200000e0 	.word	0x200000e0
    89b4:	000083b1 	.word	0x000083b1
    89b8:	00008375 	.word	0x00008375
    89bc:	00008393 	.word	0x00008393
    89c0:	000084b1 	.word	0x000084b1
    89c4:	0000844d 	.word	0x0000844d
    89c8:	00008dc5 	.word	0x00008dc5
    89cc:	000080dd 	.word	0x000080dd
    89d0:	00008121 	.word	0x00008121
    89d4:	000080a1 	.word	0x000080a1

000089d8 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    89d8:	b580      	push	{r7, lr}
    89da:	b084      	sub	sp, #16
    89dc:	af00      	add	r7, sp, #0
    89de:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    89e0:	687b      	ldr	r3, [r7, #4]
    89e2:	68db      	ldr	r3, [r3, #12]
    89e4:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    89e6:	68f8      	ldr	r0, [r7, #12]
    89e8:	4b10      	ldr	r3, [pc, #64]	; (8a2c <_tc_timer_deinit+0x54>)
    89ea:	4798      	blx	r3
    89ec:	4603      	mov	r3, r0
    89ee:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    89f0:	22f9      	movs	r2, #249	; 0xf9
    89f2:	490f      	ldr	r1, [pc, #60]	; (8a30 <_tc_timer_deinit+0x58>)
    89f4:	2001      	movs	r0, #1
    89f6:	4b0f      	ldr	r3, [pc, #60]	; (8a34 <_tc_timer_deinit+0x5c>)
    89f8:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    89fa:	f997 200b 	ldrsb.w	r2, [r7, #11]
    89fe:	490e      	ldr	r1, [pc, #56]	; (8a38 <_tc_timer_deinit+0x60>)
    8a00:	4613      	mov	r3, r2
    8a02:	009b      	lsls	r3, r3, #2
    8a04:	4413      	add	r3, r2
    8a06:	009b      	lsls	r3, r3, #2
    8a08:	440b      	add	r3, r1
    8a0a:	3302      	adds	r3, #2
    8a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
    8a10:	4618      	mov	r0, r3
    8a12:	4b0a      	ldr	r3, [pc, #40]	; (8a3c <_tc_timer_deinit+0x64>)
    8a14:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8a16:	68f8      	ldr	r0, [r7, #12]
    8a18:	4b09      	ldr	r3, [pc, #36]	; (8a40 <_tc_timer_deinit+0x68>)
    8a1a:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    8a1c:	68f8      	ldr	r0, [r7, #12]
    8a1e:	4b09      	ldr	r3, [pc, #36]	; (8a44 <_tc_timer_deinit+0x6c>)
    8a20:	4798      	blx	r3
}
    8a22:	bf00      	nop
    8a24:	3710      	adds	r7, #16
    8a26:	46bd      	mov	sp, r7
    8a28:	bd80      	pop	{r7, pc}
    8a2a:	bf00      	nop
    8a2c:	00008d5d 	.word	0x00008d5d
    8a30:	00011184 	.word	0x00011184
    8a34:	00003cd5 	.word	0x00003cd5
    8a38:	200000e0 	.word	0x200000e0
    8a3c:	000080dd 	.word	0x000080dd
    8a40:	000082d1 	.word	0x000082d1
    8a44:	00008249 	.word	0x00008249

00008a48 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    8a48:	b580      	push	{r7, lr}
    8a4a:	b082      	sub	sp, #8
    8a4c:	af00      	add	r7, sp, #0
    8a4e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8a50:	687b      	ldr	r3, [r7, #4]
    8a52:	68db      	ldr	r3, [r3, #12]
    8a54:	4618      	mov	r0, r3
    8a56:	4b03      	ldr	r3, [pc, #12]	; (8a64 <_tc_timer_start+0x1c>)
    8a58:	4798      	blx	r3
}
    8a5a:	bf00      	nop
    8a5c:	3708      	adds	r7, #8
    8a5e:	46bd      	mov	sp, r7
    8a60:	bd80      	pop	{r7, pc}
    8a62:	bf00      	nop
    8a64:	00008271 	.word	0x00008271

00008a68 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    8a68:	b580      	push	{r7, lr}
    8a6a:	b082      	sub	sp, #8
    8a6c:	af00      	add	r7, sp, #0
    8a6e:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8a70:	687b      	ldr	r3, [r7, #4]
    8a72:	68db      	ldr	r3, [r3, #12]
    8a74:	4618      	mov	r0, r3
    8a76:	4b03      	ldr	r3, [pc, #12]	; (8a84 <_tc_timer_stop+0x1c>)
    8a78:	4798      	blx	r3
}
    8a7a:	bf00      	nop
    8a7c:	3708      	adds	r7, #8
    8a7e:	46bd      	mov	sp, r7
    8a80:	bd80      	pop	{r7, pc}
    8a82:	bf00      	nop
    8a84:	000082d1 	.word	0x000082d1

00008a88 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    8a88:	b580      	push	{r7, lr}
    8a8a:	b084      	sub	sp, #16
    8a8c:	af00      	add	r7, sp, #0
    8a8e:	6078      	str	r0, [r7, #4]
    8a90:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    8a92:	687b      	ldr	r3, [r7, #4]
    8a94:	68db      	ldr	r3, [r3, #12]
    8a96:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8a98:	68f8      	ldr	r0, [r7, #12]
    8a9a:	4b14      	ldr	r3, [pc, #80]	; (8aec <_tc_timer_set_period+0x64>)
    8a9c:	4798      	blx	r3
    8a9e:	4603      	mov	r3, r0
    8aa0:	2b02      	cmp	r3, #2
    8aa2:	d105      	bne.n	8ab0 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    8aa4:	683a      	ldr	r2, [r7, #0]
    8aa6:	2100      	movs	r1, #0
    8aa8:	68f8      	ldr	r0, [r7, #12]
    8aaa:	4b11      	ldr	r3, [pc, #68]	; (8af0 <_tc_timer_set_period+0x68>)
    8aac:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    8aae:	e019      	b.n	8ae4 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8ab0:	68f8      	ldr	r0, [r7, #12]
    8ab2:	4b0e      	ldr	r3, [pc, #56]	; (8aec <_tc_timer_set_period+0x64>)
    8ab4:	4798      	blx	r3
    8ab6:	4603      	mov	r3, r0
    8ab8:	2b00      	cmp	r3, #0
    8aba:	d107      	bne.n	8acc <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    8abc:	683b      	ldr	r3, [r7, #0]
    8abe:	b29b      	uxth	r3, r3
    8ac0:	461a      	mov	r2, r3
    8ac2:	2100      	movs	r1, #0
    8ac4:	68f8      	ldr	r0, [r7, #12]
    8ac6:	4b0b      	ldr	r3, [pc, #44]	; (8af4 <_tc_timer_set_period+0x6c>)
    8ac8:	4798      	blx	r3
}
    8aca:	e00b      	b.n	8ae4 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8acc:	68f8      	ldr	r0, [r7, #12]
    8ace:	4b07      	ldr	r3, [pc, #28]	; (8aec <_tc_timer_set_period+0x64>)
    8ad0:	4798      	blx	r3
    8ad2:	4603      	mov	r3, r0
    8ad4:	2b01      	cmp	r3, #1
    8ad6:	d105      	bne.n	8ae4 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    8ad8:	683b      	ldr	r3, [r7, #0]
    8ada:	b2db      	uxtb	r3, r3
    8adc:	4619      	mov	r1, r3
    8ade:	68f8      	ldr	r0, [r7, #12]
    8ae0:	4b05      	ldr	r3, [pc, #20]	; (8af8 <_tc_timer_set_period+0x70>)
    8ae2:	4798      	blx	r3
}
    8ae4:	bf00      	nop
    8ae6:	3710      	adds	r7, #16
    8ae8:	46bd      	mov	sp, r7
    8aea:	bd80      	pop	{r7, pc}
    8aec:	000082f9 	.word	0x000082f9
    8af0:	000084b1 	.word	0x000084b1
    8af4:	0000844d 	.word	0x0000844d
    8af8:	000083d1 	.word	0x000083d1

00008afc <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    8afc:	b580      	push	{r7, lr}
    8afe:	b084      	sub	sp, #16
    8b00:	af00      	add	r7, sp, #0
    8b02:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8b04:	687b      	ldr	r3, [r7, #4]
    8b06:	68db      	ldr	r3, [r3, #12]
    8b08:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8b0a:	68f8      	ldr	r0, [r7, #12]
    8b0c:	4b13      	ldr	r3, [pc, #76]	; (8b5c <_tc_timer_get_period+0x60>)
    8b0e:	4798      	blx	r3
    8b10:	4603      	mov	r3, r0
    8b12:	2b02      	cmp	r3, #2
    8b14:	d105      	bne.n	8b22 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    8b16:	2100      	movs	r1, #0
    8b18:	68f8      	ldr	r0, [r7, #12]
    8b1a:	4b11      	ldr	r3, [pc, #68]	; (8b60 <_tc_timer_get_period+0x64>)
    8b1c:	4798      	blx	r3
    8b1e:	4603      	mov	r3, r0
    8b20:	e017      	b.n	8b52 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8b22:	68f8      	ldr	r0, [r7, #12]
    8b24:	4b0d      	ldr	r3, [pc, #52]	; (8b5c <_tc_timer_get_period+0x60>)
    8b26:	4798      	blx	r3
    8b28:	4603      	mov	r3, r0
    8b2a:	2b00      	cmp	r3, #0
    8b2c:	d105      	bne.n	8b3a <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    8b2e:	2100      	movs	r1, #0
    8b30:	68f8      	ldr	r0, [r7, #12]
    8b32:	4b0c      	ldr	r3, [pc, #48]	; (8b64 <_tc_timer_get_period+0x68>)
    8b34:	4798      	blx	r3
    8b36:	4603      	mov	r3, r0
    8b38:	e00b      	b.n	8b52 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8b3a:	68f8      	ldr	r0, [r7, #12]
    8b3c:	4b07      	ldr	r3, [pc, #28]	; (8b5c <_tc_timer_get_period+0x60>)
    8b3e:	4798      	blx	r3
    8b40:	4603      	mov	r3, r0
    8b42:	2b01      	cmp	r3, #1
    8b44:	d104      	bne.n	8b50 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    8b46:	68f8      	ldr	r0, [r7, #12]
    8b48:	4b07      	ldr	r3, [pc, #28]	; (8b68 <_tc_timer_get_period+0x6c>)
    8b4a:	4798      	blx	r3
    8b4c:	4603      	mov	r3, r0
    8b4e:	e000      	b.n	8b52 <_tc_timer_get_period+0x56>
	}

	return 0;
    8b50:	2300      	movs	r3, #0
}
    8b52:	4618      	mov	r0, r3
    8b54:	3710      	adds	r7, #16
    8b56:	46bd      	mov	sp, r7
    8b58:	bd80      	pop	{r7, pc}
    8b5a:	bf00      	nop
    8b5c:	000082f9 	.word	0x000082f9
    8b60:	000084e1 	.word	0x000084e1
    8b64:	00008481 	.word	0x00008481
    8b68:	000083f9 	.word	0x000083f9

00008b6c <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    8b6c:	b580      	push	{r7, lr}
    8b6e:	b082      	sub	sp, #8
    8b70:	af00      	add	r7, sp, #0
    8b72:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8b74:	687b      	ldr	r3, [r7, #4]
    8b76:	68db      	ldr	r3, [r3, #12]
    8b78:	4618      	mov	r0, r3
    8b7a:	4b03      	ldr	r3, [pc, #12]	; (8b88 <_tc_timer_is_started+0x1c>)
    8b7c:	4798      	blx	r3
    8b7e:	4603      	mov	r3, r0
}
    8b80:	4618      	mov	r0, r3
    8b82:	3708      	adds	r7, #8
    8b84:	46bd      	mov	sp, r7
    8b86:	bd80      	pop	{r7, pc}
    8b88:	00008299 	.word	0x00008299

00008b8c <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    8b8c:	b480      	push	{r7}
    8b8e:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    8b90:	4b02      	ldr	r3, [pc, #8]	; (8b9c <_tc_get_timer+0x10>)
}
    8b92:	4618      	mov	r0, r3
    8b94:	46bd      	mov	sp, r7
    8b96:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b9a:	4770      	bx	lr
    8b9c:	20000158 	.word	0x20000158

00008ba0 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    8ba0:	b480      	push	{r7}
    8ba2:	af00      	add	r7, sp, #0
	return NULL;
    8ba4:	2300      	movs	r3, #0
}
    8ba6:	4618      	mov	r0, r3
    8ba8:	46bd      	mov	sp, r7
    8baa:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bae:	4770      	bx	lr

00008bb0 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    8bb0:	b580      	push	{r7, lr}
    8bb2:	b084      	sub	sp, #16
    8bb4:	af00      	add	r7, sp, #0
    8bb6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8bb8:	687b      	ldr	r3, [r7, #4]
    8bba:	68db      	ldr	r3, [r3, #12]
    8bbc:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8bbe:	68f8      	ldr	r0, [r7, #12]
    8bc0:	4b0e      	ldr	r3, [pc, #56]	; (8bfc <_tc_timer_set_irq+0x4c>)
    8bc2:	4798      	blx	r3
    8bc4:	4603      	mov	r3, r0
    8bc6:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8bc8:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    8bcc:	490c      	ldr	r1, [pc, #48]	; (8c00 <_tc_timer_set_irq+0x50>)
    8bce:	2001      	movs	r0, #1
    8bd0:	4b0c      	ldr	r3, [pc, #48]	; (8c04 <_tc_timer_set_irq+0x54>)
    8bd2:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    8bd4:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8bd8:	490b      	ldr	r1, [pc, #44]	; (8c08 <_tc_timer_set_irq+0x58>)
    8bda:	4613      	mov	r3, r2
    8bdc:	009b      	lsls	r3, r3, #2
    8bde:	4413      	add	r3, r2
    8be0:	009b      	lsls	r3, r3, #2
    8be2:	440b      	add	r3, r1
    8be4:	3302      	adds	r3, #2
    8be6:	f9b3 3000 	ldrsh.w	r3, [r3]
    8bea:	b2db      	uxtb	r3, r3
    8bec:	4618      	mov	r0, r3
    8bee:	4b07      	ldr	r3, [pc, #28]	; (8c0c <_tc_timer_set_irq+0x5c>)
    8bf0:	4798      	blx	r3
}
    8bf2:	bf00      	nop
    8bf4:	3710      	adds	r7, #16
    8bf6:	46bd      	mov	sp, r7
    8bf8:	bd80      	pop	{r7, pc}
    8bfa:	bf00      	nop
    8bfc:	00008d5d 	.word	0x00008d5d
    8c00:	00011184 	.word	0x00011184
    8c04:	00003cd5 	.word	0x00003cd5
    8c08:	200000e0 	.word	0x200000e0
    8c0c:	00004521 	.word	0x00004521

00008c10 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8c10:	b580      	push	{r7, lr}
    8c12:	b084      	sub	sp, #16
    8c14:	af00      	add	r7, sp, #0
    8c16:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8c18:	687b      	ldr	r3, [r7, #4]
    8c1a:	68db      	ldr	r3, [r3, #12]
    8c1c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8c1e:	68f8      	ldr	r0, [r7, #12]
    8c20:	4b07      	ldr	r3, [pc, #28]	; (8c40 <tc_interrupt_handler+0x30>)
    8c22:	4798      	blx	r3
    8c24:	4603      	mov	r3, r0
    8c26:	2b00      	cmp	r3, #0
    8c28:	d006      	beq.n	8c38 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8c2a:	68f8      	ldr	r0, [r7, #12]
    8c2c:	4b05      	ldr	r3, [pc, #20]	; (8c44 <tc_interrupt_handler+0x34>)
    8c2e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8c30:	687b      	ldr	r3, [r7, #4]
    8c32:	681b      	ldr	r3, [r3, #0]
    8c34:	6878      	ldr	r0, [r7, #4]
    8c36:	4798      	blx	r3
	}
}
    8c38:	bf00      	nop
    8c3a:	3710      	adds	r7, #16
    8c3c:	46bd      	mov	sp, r7
    8c3e:	bd80      	pop	{r7, pc}
    8c40:	000081a9 	.word	0x000081a9
    8c44:	000081d1 	.word	0x000081d1

00008c48 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8c48:	b580      	push	{r7, lr}
    8c4a:	b084      	sub	sp, #16
    8c4c:	af00      	add	r7, sp, #0
    8c4e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8c50:	687b      	ldr	r3, [r7, #4]
    8c52:	691b      	ldr	r3, [r3, #16]
    8c54:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8c56:	68f8      	ldr	r0, [r7, #12]
    8c58:	4b12      	ldr	r3, [pc, #72]	; (8ca4 <tc_pwm_interrupt_handler+0x5c>)
    8c5a:	4798      	blx	r3
    8c5c:	4603      	mov	r3, r0
    8c5e:	2b00      	cmp	r3, #0
    8c60:	d00a      	beq.n	8c78 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8c62:	68f8      	ldr	r0, [r7, #12]
    8c64:	4b10      	ldr	r3, [pc, #64]	; (8ca8 <tc_pwm_interrupt_handler+0x60>)
    8c66:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8c68:	687b      	ldr	r3, [r7, #4]
    8c6a:	681b      	ldr	r3, [r3, #0]
    8c6c:	2b00      	cmp	r3, #0
    8c6e:	d003      	beq.n	8c78 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8c70:	687b      	ldr	r3, [r7, #4]
    8c72:	681b      	ldr	r3, [r3, #0]
    8c74:	6878      	ldr	r0, [r7, #4]
    8c76:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    8c78:	68f8      	ldr	r0, [r7, #12]
    8c7a:	4b0c      	ldr	r3, [pc, #48]	; (8cac <tc_pwm_interrupt_handler+0x64>)
    8c7c:	4798      	blx	r3
    8c7e:	4603      	mov	r3, r0
    8c80:	2b00      	cmp	r3, #0
    8c82:	d00a      	beq.n	8c9a <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    8c84:	68f8      	ldr	r0, [r7, #12]
    8c86:	4b0a      	ldr	r3, [pc, #40]	; (8cb0 <tc_pwm_interrupt_handler+0x68>)
    8c88:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    8c8a:	687b      	ldr	r3, [r7, #4]
    8c8c:	685b      	ldr	r3, [r3, #4]
    8c8e:	2b00      	cmp	r3, #0
    8c90:	d003      	beq.n	8c9a <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    8c92:	687b      	ldr	r3, [r7, #4]
    8c94:	685b      	ldr	r3, [r3, #4]
    8c96:	6878      	ldr	r0, [r7, #4]
    8c98:	4798      	blx	r3
		}
	}
}
    8c9a:	bf00      	nop
    8c9c:	3710      	adds	r7, #16
    8c9e:	46bd      	mov	sp, r7
    8ca0:	bd80      	pop	{r7, pc}
    8ca2:	bf00      	nop
    8ca4:	000081a9 	.word	0x000081a9
    8ca8:	000081d1 	.word	0x000081d1
    8cac:	0000821f 	.word	0x0000821f
    8cb0:	000081eb 	.word	0x000081eb

00008cb4 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    8cb4:	b580      	push	{r7, lr}
    8cb6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    8cb8:	4b03      	ldr	r3, [pc, #12]	; (8cc8 <TC0_Handler+0x14>)
    8cba:	681b      	ldr	r3, [r3, #0]
    8cbc:	4618      	mov	r0, r3
    8cbe:	4b03      	ldr	r3, [pc, #12]	; (8ccc <TC0_Handler+0x18>)
    8cc0:	4798      	blx	r3
}
    8cc2:	bf00      	nop
    8cc4:	bd80      	pop	{r7, pc}
    8cc6:	bf00      	nop
    8cc8:	20000c3c 	.word	0x20000c3c
    8ccc:	00008c11 	.word	0x00008c11

00008cd0 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    8cd0:	b580      	push	{r7, lr}
    8cd2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    8cd4:	4b03      	ldr	r3, [pc, #12]	; (8ce4 <TC2_Handler+0x14>)
    8cd6:	681b      	ldr	r3, [r3, #0]
    8cd8:	4618      	mov	r0, r3
    8cda:	4b03      	ldr	r3, [pc, #12]	; (8ce8 <TC2_Handler+0x18>)
    8cdc:	4798      	blx	r3
}
    8cde:	bf00      	nop
    8ce0:	bd80      	pop	{r7, pc}
    8ce2:	bf00      	nop
    8ce4:	20000c40 	.word	0x20000c40
    8ce8:	00008c11 	.word	0x00008c11

00008cec <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    8cec:	b580      	push	{r7, lr}
    8cee:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8cf0:	4b03      	ldr	r3, [pc, #12]	; (8d00 <TC4_Handler+0x14>)
    8cf2:	681b      	ldr	r3, [r3, #0]
    8cf4:	4618      	mov	r0, r3
    8cf6:	4b03      	ldr	r3, [pc, #12]	; (8d04 <TC4_Handler+0x18>)
    8cf8:	4798      	blx	r3
}
    8cfa:	bf00      	nop
    8cfc:	bd80      	pop	{r7, pc}
    8cfe:	bf00      	nop
    8d00:	20000c44 	.word	0x20000c44
    8d04:	00008c11 	.word	0x00008c11

00008d08 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8d08:	b580      	push	{r7, lr}
    8d0a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    8d0c:	4b03      	ldr	r3, [pc, #12]	; (8d1c <TC5_Handler+0x14>)
    8d0e:	681b      	ldr	r3, [r3, #0]
    8d10:	4618      	mov	r0, r3
    8d12:	4b03      	ldr	r3, [pc, #12]	; (8d20 <TC5_Handler+0x18>)
    8d14:	4798      	blx	r3
}
    8d16:	bf00      	nop
    8d18:	bd80      	pop	{r7, pc}
    8d1a:	bf00      	nop
    8d1c:	20000c48 	.word	0x20000c48
    8d20:	00008c11 	.word	0x00008c11

00008d24 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    8d24:	b580      	push	{r7, lr}
    8d26:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8d28:	4b03      	ldr	r3, [pc, #12]	; (8d38 <TC6_Handler+0x14>)
    8d2a:	681b      	ldr	r3, [r3, #0]
    8d2c:	4618      	mov	r0, r3
    8d2e:	4b03      	ldr	r3, [pc, #12]	; (8d3c <TC6_Handler+0x18>)
    8d30:	4798      	blx	r3
}
    8d32:	bf00      	nop
    8d34:	bd80      	pop	{r7, pc}
    8d36:	bf00      	nop
    8d38:	20000c4c 	.word	0x20000c4c
    8d3c:	00008c11 	.word	0x00008c11

00008d40 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8d40:	b580      	push	{r7, lr}
    8d42:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    8d44:	4b03      	ldr	r3, [pc, #12]	; (8d54 <TC7_Handler+0x14>)
    8d46:	681b      	ldr	r3, [r3, #0]
    8d48:	4618      	mov	r0, r3
    8d4a:	4b03      	ldr	r3, [pc, #12]	; (8d58 <TC7_Handler+0x18>)
    8d4c:	4798      	blx	r3
}
    8d4e:	bf00      	nop
    8d50:	bd80      	pop	{r7, pc}
    8d52:	bf00      	nop
    8d54:	20000c50 	.word	0x20000c50
    8d58:	00008c49 	.word	0x00008c49

00008d5c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8d5c:	b580      	push	{r7, lr}
    8d5e:	b084      	sub	sp, #16
    8d60:	af00      	add	r7, sp, #0
    8d62:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    8d64:	6878      	ldr	r0, [r7, #4]
    8d66:	4b13      	ldr	r3, [pc, #76]	; (8db4 <get_tc_index+0x58>)
    8d68:	4798      	blx	r3
    8d6a:	4603      	mov	r3, r0
    8d6c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8d6e:	2300      	movs	r3, #0
    8d70:	73fb      	strb	r3, [r7, #15]
    8d72:	e010      	b.n	8d96 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    8d74:	7bfa      	ldrb	r2, [r7, #15]
    8d76:	4910      	ldr	r1, [pc, #64]	; (8db8 <get_tc_index+0x5c>)
    8d78:	4613      	mov	r3, r2
    8d7a:	009b      	lsls	r3, r3, #2
    8d7c:	4413      	add	r3, r2
    8d7e:	009b      	lsls	r3, r3, #2
    8d80:	440b      	add	r3, r1
    8d82:	781b      	ldrb	r3, [r3, #0]
    8d84:	7bba      	ldrb	r2, [r7, #14]
    8d86:	429a      	cmp	r2, r3
    8d88:	d102      	bne.n	8d90 <get_tc_index+0x34>
			return i;
    8d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8d8e:	e00d      	b.n	8dac <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8d90:	7bfb      	ldrb	r3, [r7, #15]
    8d92:	3301      	adds	r3, #1
    8d94:	73fb      	strb	r3, [r7, #15]
    8d96:	7bfb      	ldrb	r3, [r7, #15]
    8d98:	2b05      	cmp	r3, #5
    8d9a:	d9eb      	bls.n	8d74 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    8d9c:	f240 221d 	movw	r2, #541	; 0x21d
    8da0:	4906      	ldr	r1, [pc, #24]	; (8dbc <get_tc_index+0x60>)
    8da2:	2000      	movs	r0, #0
    8da4:	4b06      	ldr	r3, [pc, #24]	; (8dc0 <get_tc_index+0x64>)
    8da6:	4798      	blx	r3
	return -1;
    8da8:	f04f 33ff 	mov.w	r3, #4294967295
}
    8dac:	4618      	mov	r0, r3
    8dae:	3710      	adds	r7, #16
    8db0:	46bd      	mov	sp, r7
    8db2:	bd80      	pop	{r7, pc}
    8db4:	00008e61 	.word	0x00008e61
    8db8:	200000e0 	.word	0x200000e0
    8dbc:	00011184 	.word	0x00011184
    8dc0:	00003cd5 	.word	0x00003cd5

00008dc4 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    8dc4:	b480      	push	{r7}
    8dc6:	b083      	sub	sp, #12
    8dc8:	af00      	add	r7, sp, #0
    8dca:	6078      	str	r0, [r7, #4]
    8dcc:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    8dce:	687b      	ldr	r3, [r7, #4]
    8dd0:	4a17      	ldr	r2, [pc, #92]	; (8e30 <_tc_init_irq_param+0x6c>)
    8dd2:	4293      	cmp	r3, r2
    8dd4:	d102      	bne.n	8ddc <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    8dd6:	4a17      	ldr	r2, [pc, #92]	; (8e34 <_tc_init_irq_param+0x70>)
    8dd8:	683b      	ldr	r3, [r7, #0]
    8dda:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    8ddc:	687b      	ldr	r3, [r7, #4]
    8dde:	4a16      	ldr	r2, [pc, #88]	; (8e38 <_tc_init_irq_param+0x74>)
    8de0:	4293      	cmp	r3, r2
    8de2:	d102      	bne.n	8dea <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    8de4:	4a15      	ldr	r2, [pc, #84]	; (8e3c <_tc_init_irq_param+0x78>)
    8de6:	683b      	ldr	r3, [r7, #0]
    8de8:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    8dea:	687b      	ldr	r3, [r7, #4]
    8dec:	4a14      	ldr	r2, [pc, #80]	; (8e40 <_tc_init_irq_param+0x7c>)
    8dee:	4293      	cmp	r3, r2
    8df0:	d102      	bne.n	8df8 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    8df2:	4a14      	ldr	r2, [pc, #80]	; (8e44 <_tc_init_irq_param+0x80>)
    8df4:	683b      	ldr	r3, [r7, #0]
    8df6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8df8:	687b      	ldr	r3, [r7, #4]
    8dfa:	4a13      	ldr	r2, [pc, #76]	; (8e48 <_tc_init_irq_param+0x84>)
    8dfc:	4293      	cmp	r3, r2
    8dfe:	d102      	bne.n	8e06 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8e00:	4a12      	ldr	r2, [pc, #72]	; (8e4c <_tc_init_irq_param+0x88>)
    8e02:	683b      	ldr	r3, [r7, #0]
    8e04:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    8e06:	687b      	ldr	r3, [r7, #4]
    8e08:	4a11      	ldr	r2, [pc, #68]	; (8e50 <_tc_init_irq_param+0x8c>)
    8e0a:	4293      	cmp	r3, r2
    8e0c:	d102      	bne.n	8e14 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    8e0e:	4a11      	ldr	r2, [pc, #68]	; (8e54 <_tc_init_irq_param+0x90>)
    8e10:	683b      	ldr	r3, [r7, #0]
    8e12:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    8e14:	687b      	ldr	r3, [r7, #4]
    8e16:	4a10      	ldr	r2, [pc, #64]	; (8e58 <_tc_init_irq_param+0x94>)
    8e18:	4293      	cmp	r3, r2
    8e1a:	d102      	bne.n	8e22 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    8e1c:	4a0f      	ldr	r2, [pc, #60]	; (8e5c <_tc_init_irq_param+0x98>)
    8e1e:	683b      	ldr	r3, [r7, #0]
    8e20:	6013      	str	r3, [r2, #0]
	}
}
    8e22:	bf00      	nop
    8e24:	370c      	adds	r7, #12
    8e26:	46bd      	mov	sp, r7
    8e28:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e2c:	4770      	bx	lr
    8e2e:	bf00      	nop
    8e30:	40003800 	.word	0x40003800
    8e34:	20000c3c 	.word	0x20000c3c
    8e38:	4101a000 	.word	0x4101a000
    8e3c:	20000c40 	.word	0x20000c40
    8e40:	42001400 	.word	0x42001400
    8e44:	20000c44 	.word	0x20000c44
    8e48:	42001800 	.word	0x42001800
    8e4c:	20000c48 	.word	0x20000c48
    8e50:	43001400 	.word	0x43001400
    8e54:	20000c4c 	.word	0x20000c4c
    8e58:	43001800 	.word	0x43001800
    8e5c:	20000c50 	.word	0x20000c50

00008e60 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    8e60:	b4b0      	push	{r4, r5, r7}
    8e62:	b08d      	sub	sp, #52	; 0x34
    8e64:	af00      	add	r7, sp, #0
    8e66:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8e68:	4b13      	ldr	r3, [pc, #76]	; (8eb8 <_get_hardware_offset+0x58>)
    8e6a:	f107 040c 	add.w	r4, r7, #12
    8e6e:	461d      	mov	r5, r3
    8e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8e74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8e78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8e7c:	2300      	movs	r3, #0
    8e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    8e80:	e010      	b.n	8ea4 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    8e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8e84:	009b      	lsls	r3, r3, #2
    8e86:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8e8a:	4413      	add	r3, r2
    8e8c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8e90:	461a      	mov	r2, r3
    8e92:	687b      	ldr	r3, [r7, #4]
    8e94:	429a      	cmp	r2, r3
    8e96:	d102      	bne.n	8e9e <_get_hardware_offset+0x3e>
			return i;
    8e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8e9a:	b2db      	uxtb	r3, r3
    8e9c:	e006      	b.n	8eac <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8ea0:	3301      	adds	r3, #1
    8ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    8ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8ea6:	2b07      	cmp	r3, #7
    8ea8:	d9eb      	bls.n	8e82 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    8eaa:	2300      	movs	r3, #0
}
    8eac:	4618      	mov	r0, r3
    8eae:	3734      	adds	r7, #52	; 0x34
    8eb0:	46bd      	mov	sp, r7
    8eb2:	bcb0      	pop	{r4, r5, r7}
    8eb4:	4770      	bx	lr
    8eb6:	bf00      	nop
    8eb8:	00011198 	.word	0x00011198

00008ebc <__NVIC_EnableIRQ>:
{
    8ebc:	b480      	push	{r7}
    8ebe:	b083      	sub	sp, #12
    8ec0:	af00      	add	r7, sp, #0
    8ec2:	4603      	mov	r3, r0
    8ec4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8eca:	2b00      	cmp	r3, #0
    8ecc:	db0b      	blt.n	8ee6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8ece:	4909      	ldr	r1, [pc, #36]	; (8ef4 <__NVIC_EnableIRQ+0x38>)
    8ed0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8ed4:	095b      	lsrs	r3, r3, #5
    8ed6:	88fa      	ldrh	r2, [r7, #6]
    8ed8:	f002 021f 	and.w	r2, r2, #31
    8edc:	2001      	movs	r0, #1
    8ede:	fa00 f202 	lsl.w	r2, r0, r2
    8ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8ee6:	bf00      	nop
    8ee8:	370c      	adds	r7, #12
    8eea:	46bd      	mov	sp, r7
    8eec:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ef0:	4770      	bx	lr
    8ef2:	bf00      	nop
    8ef4:	e000e100 	.word	0xe000e100

00008ef8 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8ef8:	b480      	push	{r7}
    8efa:	b087      	sub	sp, #28
    8efc:	af00      	add	r7, sp, #0
    8efe:	60f8      	str	r0, [r7, #12]
    8f00:	460b      	mov	r3, r1
    8f02:	607a      	str	r2, [r7, #4]
    8f04:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    8f06:	7afa      	ldrb	r2, [r7, #11]
    8f08:	68f9      	ldr	r1, [r7, #12]
    8f0a:	4613      	mov	r3, r2
    8f0c:	009b      	lsls	r3, r3, #2
    8f0e:	4413      	add	r3, r2
    8f10:	009b      	lsls	r3, r3, #2
    8f12:	440b      	add	r3, r1
    8f14:	3340      	adds	r3, #64	; 0x40
    8f16:	681b      	ldr	r3, [r3, #0]
    8f18:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    8f1a:	697a      	ldr	r2, [r7, #20]
    8f1c:	687b      	ldr	r3, [r7, #4]
    8f1e:	4013      	ands	r3, r2
    8f20:	617b      	str	r3, [r7, #20]
	return tmp;
    8f22:	697b      	ldr	r3, [r7, #20]
}
    8f24:	4618      	mov	r0, r3
    8f26:	371c      	adds	r7, #28
    8f28:	46bd      	mov	sp, r7
    8f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f2e:	4770      	bx	lr

00008f30 <hri_oscctrl_get_STATUS_reg>:
{
    8f30:	b480      	push	{r7}
    8f32:	b085      	sub	sp, #20
    8f34:	af00      	add	r7, sp, #0
    8f36:	6078      	str	r0, [r7, #4]
    8f38:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8f3a:	687b      	ldr	r3, [r7, #4]
    8f3c:	691b      	ldr	r3, [r3, #16]
    8f3e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8f40:	68fa      	ldr	r2, [r7, #12]
    8f42:	683b      	ldr	r3, [r7, #0]
    8f44:	4013      	ands	r3, r2
    8f46:	60fb      	str	r3, [r7, #12]
	return tmp;
    8f48:	68fb      	ldr	r3, [r7, #12]
}
    8f4a:	4618      	mov	r0, r3
    8f4c:	3714      	adds	r7, #20
    8f4e:	46bd      	mov	sp, r7
    8f50:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f54:	4770      	bx	lr

00008f56 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    8f56:	b480      	push	{r7}
    8f58:	b085      	sub	sp, #20
    8f5a:	af00      	add	r7, sp, #0
    8f5c:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8f5e:	687b      	ldr	r3, [r7, #4]
    8f60:	f893 3020 	ldrb.w	r3, [r3, #32]
    8f64:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    8f66:	7bfb      	ldrb	r3, [r7, #15]
    8f68:	f003 0301 	and.w	r3, r3, #1
    8f6c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8f6e:	7bfb      	ldrb	r3, [r7, #15]
    8f70:	2b00      	cmp	r3, #0
    8f72:	bf14      	ite	ne
    8f74:	2301      	movne	r3, #1
    8f76:	2300      	moveq	r3, #0
    8f78:	b2db      	uxtb	r3, r3
}
    8f7a:	4618      	mov	r0, r3
    8f7c:	3714      	adds	r7, #20
    8f7e:	46bd      	mov	sp, r7
    8f80:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f84:	4770      	bx	lr

00008f86 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8f86:	b480      	push	{r7}
    8f88:	b083      	sub	sp, #12
    8f8a:	af00      	add	r7, sp, #0
    8f8c:	6078      	str	r0, [r7, #4]
    8f8e:	460b      	mov	r3, r1
    8f90:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8f92:	bf00      	nop
    8f94:	687b      	ldr	r3, [r7, #4]
    8f96:	789b      	ldrb	r3, [r3, #2]
    8f98:	b2da      	uxtb	r2, r3
    8f9a:	78fb      	ldrb	r3, [r7, #3]
    8f9c:	4013      	ands	r3, r2
    8f9e:	b2db      	uxtb	r3, r3
    8fa0:	2b00      	cmp	r3, #0
    8fa2:	d1f7      	bne.n	8f94 <hri_usb_wait_for_sync+0xe>
	};
}
    8fa4:	bf00      	nop
    8fa6:	370c      	adds	r7, #12
    8fa8:	46bd      	mov	sp, r7
    8faa:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fae:	4770      	bx	lr

00008fb0 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8fb0:	b480      	push	{r7}
    8fb2:	b083      	sub	sp, #12
    8fb4:	af00      	add	r7, sp, #0
    8fb6:	6078      	str	r0, [r7, #4]
    8fb8:	460b      	mov	r3, r1
    8fba:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8fbc:	687b      	ldr	r3, [r7, #4]
    8fbe:	789b      	ldrb	r3, [r3, #2]
    8fc0:	b2da      	uxtb	r2, r3
    8fc2:	78fb      	ldrb	r3, [r7, #3]
    8fc4:	4013      	ands	r3, r2
    8fc6:	b2db      	uxtb	r3, r3
    8fc8:	2b00      	cmp	r3, #0
    8fca:	bf14      	ite	ne
    8fcc:	2301      	movne	r3, #1
    8fce:	2300      	moveq	r3, #0
    8fd0:	b2db      	uxtb	r3, r3
}
    8fd2:	4618      	mov	r0, r3
    8fd4:	370c      	adds	r7, #12
    8fd6:	46bd      	mov	sp, r7
    8fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fdc:	4770      	bx	lr

00008fde <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    8fde:	b480      	push	{r7}
    8fe0:	b085      	sub	sp, #20
    8fe2:	af00      	add	r7, sp, #0
    8fe4:	6078      	str	r0, [r7, #4]
    8fe6:	460b      	mov	r3, r1
    8fe8:	70fb      	strb	r3, [r7, #3]
    8fea:	4613      	mov	r3, r2
    8fec:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8fee:	78fb      	ldrb	r3, [r7, #3]
    8ff0:	687a      	ldr	r2, [r7, #4]
    8ff2:	3308      	adds	r3, #8
    8ff4:	015b      	lsls	r3, r3, #5
    8ff6:	4413      	add	r3, r2
    8ff8:	3307      	adds	r3, #7
    8ffa:	781b      	ldrb	r3, [r3, #0]
    8ffc:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8ffe:	7bfa      	ldrb	r2, [r7, #15]
    9000:	78bb      	ldrb	r3, [r7, #2]
    9002:	4013      	ands	r3, r2
    9004:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9006:	7bfb      	ldrb	r3, [r7, #15]
}
    9008:	4618      	mov	r0, r3
    900a:	3714      	adds	r7, #20
    900c:	46bd      	mov	sp, r7
    900e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9012:	4770      	bx	lr

00009014 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    9014:	b480      	push	{r7}
    9016:	b083      	sub	sp, #12
    9018:	af00      	add	r7, sp, #0
    901a:	6078      	str	r0, [r7, #4]
    901c:	460b      	mov	r3, r1
    901e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    9020:	78fb      	ldrb	r3, [r7, #3]
    9022:	687a      	ldr	r2, [r7, #4]
    9024:	3308      	adds	r3, #8
    9026:	015b      	lsls	r3, r3, #5
    9028:	4413      	add	r3, r2
    902a:	3307      	adds	r3, #7
    902c:	781b      	ldrb	r3, [r3, #0]
    902e:	b2db      	uxtb	r3, r3
}
    9030:	4618      	mov	r0, r3
    9032:	370c      	adds	r7, #12
    9034:	46bd      	mov	sp, r7
    9036:	f85d 7b04 	ldr.w	r7, [sp], #4
    903a:	4770      	bx	lr

0000903c <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    903c:	b480      	push	{r7}
    903e:	b083      	sub	sp, #12
    9040:	af00      	add	r7, sp, #0
    9042:	6078      	str	r0, [r7, #4]
    9044:	460b      	mov	r3, r1
    9046:	70fb      	strb	r3, [r7, #3]
    9048:	4613      	mov	r3, r2
    904a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    904c:	78fb      	ldrb	r3, [r7, #3]
    904e:	687a      	ldr	r2, [r7, #4]
    9050:	3308      	adds	r3, #8
    9052:	015b      	lsls	r3, r3, #5
    9054:	4413      	add	r3, r2
    9056:	3307      	adds	r3, #7
    9058:	78ba      	ldrb	r2, [r7, #2]
    905a:	701a      	strb	r2, [r3, #0]
}
    905c:	bf00      	nop
    905e:	370c      	adds	r7, #12
    9060:	46bd      	mov	sp, r7
    9062:	f85d 7b04 	ldr.w	r7, [sp], #4
    9066:	4770      	bx	lr

00009068 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    9068:	b480      	push	{r7}
    906a:	b083      	sub	sp, #12
    906c:	af00      	add	r7, sp, #0
    906e:	6078      	str	r0, [r7, #4]
    9070:	460b      	mov	r3, r1
    9072:	70fb      	strb	r3, [r7, #3]
    9074:	4613      	mov	r3, r2
    9076:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9078:	78fb      	ldrb	r3, [r7, #3]
    907a:	687a      	ldr	r2, [r7, #4]
    907c:	3308      	adds	r3, #8
    907e:	015b      	lsls	r3, r3, #5
    9080:	4413      	add	r3, r2
    9082:	3305      	adds	r3, #5
    9084:	78ba      	ldrb	r2, [r7, #2]
    9086:	701a      	strb	r2, [r3, #0]
}
    9088:	bf00      	nop
    908a:	370c      	adds	r7, #12
    908c:	46bd      	mov	sp, r7
    908e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9092:	4770      	bx	lr

00009094 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    9094:	b480      	push	{r7}
    9096:	b083      	sub	sp, #12
    9098:	af00      	add	r7, sp, #0
    909a:	6078      	str	r0, [r7, #4]
    909c:	460b      	mov	r3, r1
    909e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    90a0:	78fb      	ldrb	r3, [r7, #3]
    90a2:	687a      	ldr	r2, [r7, #4]
    90a4:	3308      	adds	r3, #8
    90a6:	015b      	lsls	r3, r3, #5
    90a8:	4413      	add	r3, r2
    90aa:	3306      	adds	r3, #6
    90ac:	781b      	ldrb	r3, [r3, #0]
    90ae:	b2db      	uxtb	r3, r3
}
    90b0:	4618      	mov	r0, r3
    90b2:	370c      	adds	r7, #12
    90b4:	46bd      	mov	sp, r7
    90b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    90ba:	4770      	bx	lr

000090bc <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    90bc:	b480      	push	{r7}
    90be:	b083      	sub	sp, #12
    90c0:	af00      	add	r7, sp, #0
    90c2:	6078      	str	r0, [r7, #4]
    90c4:	460b      	mov	r3, r1
    90c6:	70fb      	strb	r3, [r7, #3]
    90c8:	4613      	mov	r3, r2
    90ca:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    90cc:	78fb      	ldrb	r3, [r7, #3]
    90ce:	687a      	ldr	r2, [r7, #4]
    90d0:	3308      	adds	r3, #8
    90d2:	015b      	lsls	r3, r3, #5
    90d4:	4413      	add	r3, r2
    90d6:	3304      	adds	r3, #4
    90d8:	78ba      	ldrb	r2, [r7, #2]
    90da:	701a      	strb	r2, [r3, #0]
}
    90dc:	bf00      	nop
    90de:	370c      	adds	r7, #12
    90e0:	46bd      	mov	sp, r7
    90e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    90e6:	4770      	bx	lr

000090e8 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    90e8:	b480      	push	{r7}
    90ea:	b083      	sub	sp, #12
    90ec:	af00      	add	r7, sp, #0
    90ee:	6078      	str	r0, [r7, #4]
    90f0:	460b      	mov	r3, r1
    90f2:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    90f4:	78fb      	ldrb	r3, [r7, #3]
    90f6:	687a      	ldr	r2, [r7, #4]
    90f8:	015b      	lsls	r3, r3, #5
    90fa:	4413      	add	r3, r2
    90fc:	f503 7384 	add.w	r3, r3, #264	; 0x108
    9100:	2210      	movs	r2, #16
    9102:	701a      	strb	r2, [r3, #0]
}
    9104:	bf00      	nop
    9106:	370c      	adds	r7, #12
    9108:	46bd      	mov	sp, r7
    910a:	f85d 7b04 	ldr.w	r7, [sp], #4
    910e:	4770      	bx	lr

00009110 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    9110:	b480      	push	{r7}
    9112:	b083      	sub	sp, #12
    9114:	af00      	add	r7, sp, #0
    9116:	6078      	str	r0, [r7, #4]
    9118:	460b      	mov	r3, r1
    911a:	70fb      	strb	r3, [r7, #3]
    911c:	4613      	mov	r3, r2
    911e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    9120:	78fb      	ldrb	r3, [r7, #3]
    9122:	687a      	ldr	r2, [r7, #4]
    9124:	015b      	lsls	r3, r3, #5
    9126:	4413      	add	r3, r2
    9128:	f203 1309 	addw	r3, r3, #265	; 0x109
    912c:	78ba      	ldrb	r2, [r7, #2]
    912e:	701a      	strb	r2, [r3, #0]
}
    9130:	bf00      	nop
    9132:	370c      	adds	r7, #12
    9134:	46bd      	mov	sp, r7
    9136:	f85d 7b04 	ldr.w	r7, [sp], #4
    913a:	4770      	bx	lr

0000913c <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    913c:	b480      	push	{r7}
    913e:	b083      	sub	sp, #12
    9140:	af00      	add	r7, sp, #0
    9142:	6078      	str	r0, [r7, #4]
    9144:	460b      	mov	r3, r1
    9146:	70fb      	strb	r3, [r7, #3]
    9148:	4613      	mov	r3, r2
    914a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    914c:	78fb      	ldrb	r3, [r7, #3]
    914e:	687a      	ldr	r2, [r7, #4]
    9150:	015b      	lsls	r3, r3, #5
    9152:	4413      	add	r3, r2
    9154:	f503 7384 	add.w	r3, r3, #264	; 0x108
    9158:	78ba      	ldrb	r2, [r7, #2]
    915a:	701a      	strb	r2, [r3, #0]
}
    915c:	bf00      	nop
    915e:	370c      	adds	r7, #12
    9160:	46bd      	mov	sp, r7
    9162:	f85d 7b04 	ldr.w	r7, [sp], #4
    9166:	4770      	bx	lr

00009168 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    9168:	b480      	push	{r7}
    916a:	b085      	sub	sp, #20
    916c:	af00      	add	r7, sp, #0
    916e:	6078      	str	r0, [r7, #4]
    9170:	460b      	mov	r3, r1
    9172:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9174:	78fb      	ldrb	r3, [r7, #3]
    9176:	687a      	ldr	r2, [r7, #4]
    9178:	3308      	adds	r3, #8
    917a:	015b      	lsls	r3, r3, #5
    917c:	4413      	add	r3, r2
    917e:	781b      	ldrb	r3, [r3, #0]
    9180:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    9182:	7bfb      	ldrb	r3, [r7, #15]
    9184:	f003 0307 	and.w	r3, r3, #7
    9188:	73fb      	strb	r3, [r7, #15]
	return tmp;
    918a:	7bfb      	ldrb	r3, [r7, #15]
}
    918c:	4618      	mov	r0, r3
    918e:	3714      	adds	r7, #20
    9190:	46bd      	mov	sp, r7
    9192:	f85d 7b04 	ldr.w	r7, [sp], #4
    9196:	4770      	bx	lr

00009198 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    9198:	b480      	push	{r7}
    919a:	b085      	sub	sp, #20
    919c:	af00      	add	r7, sp, #0
    919e:	6078      	str	r0, [r7, #4]
    91a0:	460b      	mov	r3, r1
    91a2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    91a4:	78fb      	ldrb	r3, [r7, #3]
    91a6:	687a      	ldr	r2, [r7, #4]
    91a8:	3308      	adds	r3, #8
    91aa:	015b      	lsls	r3, r3, #5
    91ac:	4413      	add	r3, r2
    91ae:	781b      	ldrb	r3, [r3, #0]
    91b0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    91b2:	7bfb      	ldrb	r3, [r7, #15]
    91b4:	091b      	lsrs	r3, r3, #4
    91b6:	b2db      	uxtb	r3, r3
    91b8:	f003 0307 	and.w	r3, r3, #7
    91bc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    91be:	7bfb      	ldrb	r3, [r7, #15]
}
    91c0:	4618      	mov	r0, r3
    91c2:	3714      	adds	r7, #20
    91c4:	46bd      	mov	sp, r7
    91c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    91ca:	4770      	bx	lr

000091cc <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    91cc:	b480      	push	{r7}
    91ce:	b083      	sub	sp, #12
    91d0:	af00      	add	r7, sp, #0
    91d2:	6078      	str	r0, [r7, #4]
    91d4:	460b      	mov	r3, r1
    91d6:	70fb      	strb	r3, [r7, #3]
    91d8:	4613      	mov	r3, r2
    91da:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    91dc:	78fb      	ldrb	r3, [r7, #3]
    91de:	687a      	ldr	r2, [r7, #4]
    91e0:	3308      	adds	r3, #8
    91e2:	015b      	lsls	r3, r3, #5
    91e4:	4413      	add	r3, r2
    91e6:	78ba      	ldrb	r2, [r7, #2]
    91e8:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    91ea:	bf00      	nop
    91ec:	370c      	adds	r7, #12
    91ee:	46bd      	mov	sp, r7
    91f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    91f4:	4770      	bx	lr

000091f6 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    91f6:	b480      	push	{r7}
    91f8:	b083      	sub	sp, #12
    91fa:	af00      	add	r7, sp, #0
    91fc:	6078      	str	r0, [r7, #4]
    91fe:	460b      	mov	r3, r1
    9200:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9202:	78fb      	ldrb	r3, [r7, #3]
    9204:	687a      	ldr	r2, [r7, #4]
    9206:	3308      	adds	r3, #8
    9208:	015b      	lsls	r3, r3, #5
    920a:	4413      	add	r3, r2
    920c:	781b      	ldrb	r3, [r3, #0]
    920e:	b2db      	uxtb	r3, r3
}
    9210:	4618      	mov	r0, r3
    9212:	370c      	adds	r7, #12
    9214:	46bd      	mov	sp, r7
    9216:	f85d 7b04 	ldr.w	r7, [sp], #4
    921a:	4770      	bx	lr

0000921c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    921c:	b480      	push	{r7}
    921e:	b083      	sub	sp, #12
    9220:	af00      	add	r7, sp, #0
    9222:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    9224:	687b      	ldr	r3, [r7, #4]
    9226:	8b9b      	ldrh	r3, [r3, #28]
    9228:	b29b      	uxth	r3, r3
}
    922a:	4618      	mov	r0, r3
    922c:	370c      	adds	r7, #12
    922e:	46bd      	mov	sp, r7
    9230:	f85d 7b04 	ldr.w	r7, [sp], #4
    9234:	4770      	bx	lr

00009236 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    9236:	b480      	push	{r7}
    9238:	b083      	sub	sp, #12
    923a:	af00      	add	r7, sp, #0
    923c:	6078      	str	r0, [r7, #4]
    923e:	460b      	mov	r3, r1
    9240:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    9242:	687b      	ldr	r3, [r7, #4]
    9244:	887a      	ldrh	r2, [r7, #2]
    9246:	839a      	strh	r2, [r3, #28]
}
    9248:	bf00      	nop
    924a:	370c      	adds	r7, #12
    924c:	46bd      	mov	sp, r7
    924e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9252:	4770      	bx	lr

00009254 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    9254:	b480      	push	{r7}
    9256:	b083      	sub	sp, #12
    9258:	af00      	add	r7, sp, #0
    925a:	6078      	str	r0, [r7, #4]
    925c:	460b      	mov	r3, r1
    925e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    9260:	687b      	ldr	r3, [r7, #4]
    9262:	887a      	ldrh	r2, [r7, #2]
    9264:	831a      	strh	r2, [r3, #24]
}
    9266:	bf00      	nop
    9268:	370c      	adds	r7, #12
    926a:	46bd      	mov	sp, r7
    926c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9270:	4770      	bx	lr

00009272 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    9272:	b480      	push	{r7}
    9274:	b083      	sub	sp, #12
    9276:	af00      	add	r7, sp, #0
    9278:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    927a:	687b      	ldr	r3, [r7, #4]
    927c:	8b1b      	ldrh	r3, [r3, #24]
    927e:	b29b      	uxth	r3, r3
}
    9280:	4618      	mov	r0, r3
    9282:	370c      	adds	r7, #12
    9284:	46bd      	mov	sp, r7
    9286:	f85d 7b04 	ldr.w	r7, [sp], #4
    928a:	4770      	bx	lr

0000928c <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    928c:	b480      	push	{r7}
    928e:	b083      	sub	sp, #12
    9290:	af00      	add	r7, sp, #0
    9292:	6078      	str	r0, [r7, #4]
    9294:	460b      	mov	r3, r1
    9296:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    9298:	687b      	ldr	r3, [r7, #4]
    929a:	887a      	ldrh	r2, [r7, #2]
    929c:	829a      	strh	r2, [r3, #20]
}
    929e:	bf00      	nop
    92a0:	370c      	adds	r7, #12
    92a2:	46bd      	mov	sp, r7
    92a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    92a8:	4770      	bx	lr

000092aa <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    92aa:	b480      	push	{r7}
    92ac:	b085      	sub	sp, #20
    92ae:	af00      	add	r7, sp, #0
    92b0:	6078      	str	r0, [r7, #4]
    92b2:	460b      	mov	r3, r1
    92b4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    92b6:	687b      	ldr	r3, [r7, #4]
    92b8:	789b      	ldrb	r3, [r3, #2]
    92ba:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    92bc:	7bfa      	ldrb	r2, [r7, #15]
    92be:	78fb      	ldrb	r3, [r7, #3]
    92c0:	4013      	ands	r3, r2
    92c2:	73fb      	strb	r3, [r7, #15]
	return tmp;
    92c4:	7bfb      	ldrb	r3, [r7, #15]
}
    92c6:	4618      	mov	r0, r3
    92c8:	3714      	adds	r7, #20
    92ca:	46bd      	mov	sp, r7
    92cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    92d0:	4770      	bx	lr
	...

000092d4 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    92d4:	b580      	push	{r7, lr}
    92d6:	b082      	sub	sp, #8
    92d8:	af00      	add	r7, sp, #0
    92da:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    92dc:	687b      	ldr	r3, [r7, #4]
    92de:	781b      	ldrb	r3, [r3, #0]
    92e0:	b2db      	uxtb	r3, r3
    92e2:	f023 0302 	bic.w	r3, r3, #2
    92e6:	b2da      	uxtb	r2, r3
    92e8:	687b      	ldr	r3, [r7, #4]
    92ea:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    92ec:	2103      	movs	r1, #3
    92ee:	6878      	ldr	r0, [r7, #4]
    92f0:	4b02      	ldr	r3, [pc, #8]	; (92fc <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    92f2:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    92f4:	bf00      	nop
    92f6:	3708      	adds	r7, #8
    92f8:	46bd      	mov	sp, r7
    92fa:	bd80      	pop	{r7, pc}
    92fc:	00008f87 	.word	0x00008f87

00009300 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    9300:	b580      	push	{r7, lr}
    9302:	b084      	sub	sp, #16
    9304:	af00      	add	r7, sp, #0
    9306:	6078      	str	r0, [r7, #4]
    9308:	460b      	mov	r3, r1
    930a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    930c:	2103      	movs	r1, #3
    930e:	6878      	ldr	r0, [r7, #4]
    9310:	4b06      	ldr	r3, [pc, #24]	; (932c <hri_usb_get_CTRLA_reg+0x2c>)
    9312:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    9314:	687b      	ldr	r3, [r7, #4]
    9316:	781b      	ldrb	r3, [r3, #0]
    9318:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    931a:	7bfa      	ldrb	r2, [r7, #15]
    931c:	78fb      	ldrb	r3, [r7, #3]
    931e:	4013      	ands	r3, r2
    9320:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9322:	7bfb      	ldrb	r3, [r7, #15]
}
    9324:	4618      	mov	r0, r3
    9326:	3710      	adds	r7, #16
    9328:	46bd      	mov	sp, r7
    932a:	bd80      	pop	{r7, pc}
    932c:	00008f87 	.word	0x00008f87

00009330 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    9330:	b580      	push	{r7, lr}
    9332:	b082      	sub	sp, #8
    9334:	af00      	add	r7, sp, #0
    9336:	6078      	str	r0, [r7, #4]
    9338:	460b      	mov	r3, r1
    933a:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    933c:	687b      	ldr	r3, [r7, #4]
    933e:	78fa      	ldrb	r2, [r7, #3]
    9340:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9342:	2103      	movs	r1, #3
    9344:	6878      	ldr	r0, [r7, #4]
    9346:	4b03      	ldr	r3, [pc, #12]	; (9354 <hri_usb_write_CTRLA_reg+0x24>)
    9348:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    934a:	bf00      	nop
    934c:	3708      	adds	r7, #8
    934e:	46bd      	mov	sp, r7
    9350:	bd80      	pop	{r7, pc}
    9352:	bf00      	nop
    9354:	00008f87 	.word	0x00008f87

00009358 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    9358:	b580      	push	{r7, lr}
    935a:	b082      	sub	sp, #8
    935c:	af00      	add	r7, sp, #0
    935e:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9360:	2103      	movs	r1, #3
    9362:	6878      	ldr	r0, [r7, #4]
    9364:	4b04      	ldr	r3, [pc, #16]	; (9378 <hri_usb_read_CTRLA_reg+0x20>)
    9366:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    9368:	687b      	ldr	r3, [r7, #4]
    936a:	781b      	ldrb	r3, [r3, #0]
    936c:	b2db      	uxtb	r3, r3
}
    936e:	4618      	mov	r0, r3
    9370:	3708      	adds	r7, #8
    9372:	46bd      	mov	sp, r7
    9374:	bd80      	pop	{r7, pc}
    9376:	bf00      	nop
    9378:	00008f87 	.word	0x00008f87

0000937c <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    937c:	b480      	push	{r7}
    937e:	b083      	sub	sp, #12
    9380:	af00      	add	r7, sp, #0
    9382:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    9384:	687b      	ldr	r3, [r7, #4]
    9386:	891b      	ldrh	r3, [r3, #8]
    9388:	b29b      	uxth	r3, r3
    938a:	f023 0301 	bic.w	r3, r3, #1
    938e:	b29a      	uxth	r2, r3
    9390:	687b      	ldr	r3, [r7, #4]
    9392:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    9394:	bf00      	nop
    9396:	370c      	adds	r7, #12
    9398:	46bd      	mov	sp, r7
    939a:	f85d 7b04 	ldr.w	r7, [sp], #4
    939e:	4770      	bx	lr

000093a0 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    93a0:	b480      	push	{r7}
    93a2:	b083      	sub	sp, #12
    93a4:	af00      	add	r7, sp, #0
    93a6:	6078      	str	r0, [r7, #4]
    93a8:	460b      	mov	r3, r1
    93aa:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    93ac:	687b      	ldr	r3, [r7, #4]
    93ae:	887a      	ldrh	r2, [r7, #2]
    93b0:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    93b2:	bf00      	nop
    93b4:	370c      	adds	r7, #12
    93b6:	46bd      	mov	sp, r7
    93b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    93bc:	4770      	bx	lr

000093be <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    93be:	b480      	push	{r7}
    93c0:	b083      	sub	sp, #12
    93c2:	af00      	add	r7, sp, #0
    93c4:	6078      	str	r0, [r7, #4]
    93c6:	460b      	mov	r3, r1
    93c8:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    93ca:	687b      	ldr	r3, [r7, #4]
    93cc:	78fa      	ldrb	r2, [r7, #3]
    93ce:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    93d0:	bf00      	nop
    93d2:	370c      	adds	r7, #12
    93d4:	46bd      	mov	sp, r7
    93d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    93da:	4770      	bx	lr

000093dc <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    93dc:	b480      	push	{r7}
    93de:	b083      	sub	sp, #12
    93e0:	af00      	add	r7, sp, #0
    93e2:	6078      	str	r0, [r7, #4]
    93e4:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    93e6:	687b      	ldr	r3, [r7, #4]
    93e8:	683a      	ldr	r2, [r7, #0]
    93ea:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    93ec:	bf00      	nop
    93ee:	370c      	adds	r7, #12
    93f0:	46bd      	mov	sp, r7
    93f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    93f6:	4770      	bx	lr

000093f8 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    93f8:	b480      	push	{r7}
    93fa:	b083      	sub	sp, #12
    93fc:	af00      	add	r7, sp, #0
    93fe:	6078      	str	r0, [r7, #4]
    9400:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    9402:	2300      	movs	r3, #0
}
    9404:	4618      	mov	r0, r3
    9406:	370c      	adds	r7, #12
    9408:	46bd      	mov	sp, r7
    940a:	f85d 7b04 	ldr.w	r7, [sp], #4
    940e:	4770      	bx	lr

00009410 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    9410:	b480      	push	{r7}
    9412:	b085      	sub	sp, #20
    9414:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    9416:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    941a:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    941c:	4b28      	ldr	r3, [pc, #160]	; (94c0 <_usb_load_calib+0xb0>)
    941e:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    9420:	f003 031f 	and.w	r3, r3, #31
    9424:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    9426:	4b26      	ldr	r3, [pc, #152]	; (94c0 <_usb_load_calib+0xb0>)
    9428:	681b      	ldr	r3, [r3, #0]
    942a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    942c:	f003 031f 	and.w	r3, r3, #31
    9430:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    9432:	4b23      	ldr	r3, [pc, #140]	; (94c0 <_usb_load_calib+0xb0>)
    9434:	681b      	ldr	r3, [r3, #0]
    9436:	0a9b      	lsrs	r3, r3, #10
    9438:	f003 0307 	and.w	r3, r3, #7
    943c:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    943e:	68fb      	ldr	r3, [r7, #12]
    9440:	2b00      	cmp	r3, #0
    9442:	d002      	beq.n	944a <_usb_load_calib+0x3a>
    9444:	68fb      	ldr	r3, [r7, #12]
    9446:	2b1f      	cmp	r3, #31
    9448:	d101      	bne.n	944e <_usb_load_calib+0x3e>
		pad_transn = 9;
    944a:	2309      	movs	r3, #9
    944c:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    944e:	68bb      	ldr	r3, [r7, #8]
    9450:	2b00      	cmp	r3, #0
    9452:	d002      	beq.n	945a <_usb_load_calib+0x4a>
    9454:	68bb      	ldr	r3, [r7, #8]
    9456:	2b1f      	cmp	r3, #31
    9458:	d101      	bne.n	945e <_usb_load_calib+0x4e>
		pad_transp = 25;
    945a:	2319      	movs	r3, #25
    945c:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    945e:	687b      	ldr	r3, [r7, #4]
    9460:	2b00      	cmp	r3, #0
    9462:	d002      	beq.n	946a <_usb_load_calib+0x5a>
    9464:	687b      	ldr	r3, [r7, #4]
    9466:	2b07      	cmp	r3, #7
    9468:	d101      	bne.n	946e <_usb_load_calib+0x5e>
		pad_trim = 6;
    946a:	2306      	movs	r3, #6
    946c:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    946e:	68fb      	ldr	r3, [r7, #12]
    9470:	b29b      	uxth	r3, r3
    9472:	019b      	lsls	r3, r3, #6
    9474:	b29b      	uxth	r3, r3
    9476:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    947a:	b29a      	uxth	r2, r3
    947c:	68bb      	ldr	r3, [r7, #8]
    947e:	b29b      	uxth	r3, r3
    9480:	f003 031f 	and.w	r3, r3, #31
    9484:	b29b      	uxth	r3, r3
    9486:	4313      	orrs	r3, r2
    9488:	b29a      	uxth	r2, r3
    948a:	687b      	ldr	r3, [r7, #4]
    948c:	b29b      	uxth	r3, r3
    948e:	031b      	lsls	r3, r3, #12
    9490:	b29b      	uxth	r3, r3
    9492:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    9496:	b29b      	uxth	r3, r3
    9498:	4313      	orrs	r3, r2
    949a:	b29a      	uxth	r2, r3
    949c:	683b      	ldr	r3, [r7, #0]
    949e:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    94a0:	683a      	ldr	r2, [r7, #0]
    94a2:	78d3      	ldrb	r3, [r2, #3]
    94a4:	f043 0303 	orr.w	r3, r3, #3
    94a8:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    94aa:	683a      	ldr	r2, [r7, #0]
    94ac:	78d3      	ldrb	r3, [r2, #3]
    94ae:	f043 030c 	orr.w	r3, r3, #12
    94b2:	70d3      	strb	r3, [r2, #3]
}
    94b4:	bf00      	nop
    94b6:	3714      	adds	r7, #20
    94b8:	46bd      	mov	sp, r7
    94ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    94be:	4770      	bx	lr
    94c0:	00800084 	.word	0x00800084

000094c4 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    94c4:	b580      	push	{r7, lr}
    94c6:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    94c8:	bf00      	nop
    94ca:	2203      	movs	r2, #3
    94cc:	2100      	movs	r1, #0
    94ce:	4804      	ldr	r0, [pc, #16]	; (94e0 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    94d0:	4b04      	ldr	r3, [pc, #16]	; (94e4 <_usb_d_dev_wait_dpll_rdy+0x20>)
    94d2:	4798      	blx	r3
    94d4:	4603      	mov	r3, r0
    94d6:	2b03      	cmp	r3, #3
    94d8:	d1f7      	bne.n	94ca <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    94da:	bf00      	nop
    94dc:	bd80      	pop	{r7, pc}
    94de:	bf00      	nop
    94e0:	40001000 	.word	0x40001000
    94e4:	00008ef9 	.word	0x00008ef9

000094e8 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    94e8:	b580      	push	{r7, lr}
    94ea:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    94ec:	480e      	ldr	r0, [pc, #56]	; (9528 <_usb_d_dev_wait_dfll_rdy+0x40>)
    94ee:	4b0f      	ldr	r3, [pc, #60]	; (952c <_usb_d_dev_wait_dfll_rdy+0x44>)
    94f0:	4798      	blx	r3
    94f2:	4603      	mov	r3, r0
    94f4:	2b00      	cmp	r3, #0
    94f6:	d00a      	beq.n	950e <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    94f8:	bf00      	nop
    94fa:	f44f 6110 	mov.w	r1, #2304	; 0x900
    94fe:	480a      	ldr	r0, [pc, #40]	; (9528 <_usb_d_dev_wait_dfll_rdy+0x40>)
    9500:	4b0b      	ldr	r3, [pc, #44]	; (9530 <_usb_d_dev_wait_dfll_rdy+0x48>)
    9502:	4798      	blx	r3
    9504:	4603      	mov	r3, r0
    9506:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    950a:	d1f6      	bne.n	94fa <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    950c:	e009      	b.n	9522 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    950e:	bf00      	nop
    9510:	f44f 7180 	mov.w	r1, #256	; 0x100
    9514:	4804      	ldr	r0, [pc, #16]	; (9528 <_usb_d_dev_wait_dfll_rdy+0x40>)
    9516:	4b06      	ldr	r3, [pc, #24]	; (9530 <_usb_d_dev_wait_dfll_rdy+0x48>)
    9518:	4798      	blx	r3
    951a:	4603      	mov	r3, r0
    951c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9520:	d1f6      	bne.n	9510 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    9522:	bf00      	nop
    9524:	bd80      	pop	{r7, pc}
    9526:	bf00      	nop
    9528:	40001000 	.word	0x40001000
    952c:	00008f57 	.word	0x00008f57
    9530:	00008f31 	.word	0x00008f31

00009534 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    9534:	b580      	push	{r7, lr}
    9536:	b082      	sub	sp, #8
    9538:	af00      	add	r7, sp, #0
    953a:	4603      	mov	r3, r0
    953c:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    953e:	79fb      	ldrb	r3, [r7, #7]
    9540:	2b00      	cmp	r3, #0
    9542:	d102      	bne.n	954a <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    9544:	4b05      	ldr	r3, [pc, #20]	; (955c <_usb_d_dev_wait_clk_rdy+0x28>)
    9546:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    9548:	e004      	b.n	9554 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    954a:	79fb      	ldrb	r3, [r7, #7]
    954c:	2b01      	cmp	r3, #1
    954e:	d101      	bne.n	9554 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    9550:	4b03      	ldr	r3, [pc, #12]	; (9560 <_usb_d_dev_wait_clk_rdy+0x2c>)
    9552:	4798      	blx	r3
}
    9554:	bf00      	nop
    9556:	3708      	adds	r7, #8
    9558:	46bd      	mov	sp, r7
    955a:	bd80      	pop	{r7, pc}
    955c:	000094e9 	.word	0x000094e9
    9560:	000094c5 	.word	0x000094c5

00009564 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    9564:	b580      	push	{r7, lr}
    9566:	b082      	sub	sp, #8
    9568:	af00      	add	r7, sp, #0
    956a:	4603      	mov	r3, r0
    956c:	6039      	str	r1, [r7, #0]
    956e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    9570:	683b      	ldr	r3, [r7, #0]
    9572:	b2da      	uxtb	r2, r3
    9574:	79fb      	ldrb	r3, [r7, #7]
    9576:	4619      	mov	r1, r3
    9578:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    957c:	4b02      	ldr	r3, [pc, #8]	; (9588 <_usbd_ep_int_ack+0x24>)
    957e:	4798      	blx	r3
}
    9580:	bf00      	nop
    9582:	3708      	adds	r7, #8
    9584:	46bd      	mov	sp, r7
    9586:	bd80      	pop	{r7, pc}
    9588:	0000903d 	.word	0x0000903d

0000958c <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    958c:	b580      	push	{r7, lr}
    958e:	b082      	sub	sp, #8
    9590:	af00      	add	r7, sp, #0
    9592:	4603      	mov	r3, r0
    9594:	6039      	str	r1, [r7, #0]
    9596:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    9598:	683b      	ldr	r3, [r7, #0]
    959a:	b2da      	uxtb	r2, r3
    959c:	79fb      	ldrb	r3, [r7, #7]
    959e:	4619      	mov	r1, r3
    95a0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95a4:	4b02      	ldr	r3, [pc, #8]	; (95b0 <_usbd_ep_int_en+0x24>)
    95a6:	4798      	blx	r3
}
    95a8:	bf00      	nop
    95aa:	3708      	adds	r7, #8
    95ac:	46bd      	mov	sp, r7
    95ae:	bd80      	pop	{r7, pc}
    95b0:	00009111 	.word	0x00009111

000095b4 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    95b4:	b580      	push	{r7, lr}
    95b6:	b082      	sub	sp, #8
    95b8:	af00      	add	r7, sp, #0
    95ba:	4603      	mov	r3, r0
    95bc:	6039      	str	r1, [r7, #0]
    95be:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    95c0:	683b      	ldr	r3, [r7, #0]
    95c2:	b2da      	uxtb	r2, r3
    95c4:	79fb      	ldrb	r3, [r7, #7]
    95c6:	4619      	mov	r1, r3
    95c8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95cc:	4b02      	ldr	r3, [pc, #8]	; (95d8 <_usbd_ep_int_dis+0x24>)
    95ce:	4798      	blx	r3
}
    95d0:	bf00      	nop
    95d2:	3708      	adds	r7, #8
    95d4:	46bd      	mov	sp, r7
    95d6:	bd80      	pop	{r7, pc}
    95d8:	0000913d 	.word	0x0000913d

000095dc <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    95dc:	b580      	push	{r7, lr}
    95de:	b082      	sub	sp, #8
    95e0:	af00      	add	r7, sp, #0
    95e2:	4603      	mov	r3, r0
    95e4:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    95e6:	79fb      	ldrb	r3, [r7, #7]
    95e8:	4619      	mov	r1, r3
    95ea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95ee:	4b06      	ldr	r3, [pc, #24]	; (9608 <_usbd_ep_is_ctrl+0x2c>)
    95f0:	4798      	blx	r3
    95f2:	4603      	mov	r3, r0
    95f4:	2b11      	cmp	r3, #17
    95f6:	bf0c      	ite	eq
    95f8:	2301      	moveq	r3, #1
    95fa:	2300      	movne	r3, #0
    95fc:	b2db      	uxtb	r3, r3
}
    95fe:	4618      	mov	r0, r3
    9600:	3708      	adds	r7, #8
    9602:	46bd      	mov	sp, r7
    9604:	bd80      	pop	{r7, pc}
    9606:	bf00      	nop
    9608:	000091f7 	.word	0x000091f7

0000960c <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    960c:	b580      	push	{r7, lr}
    960e:	b082      	sub	sp, #8
    9610:	af00      	add	r7, sp, #0
    9612:	4603      	mov	r3, r0
    9614:	71fb      	strb	r3, [r7, #7]
    9616:	460b      	mov	r3, r1
    9618:	71bb      	strb	r3, [r7, #6]
    961a:	4613      	mov	r3, r2
    961c:	717b      	strb	r3, [r7, #5]
	if (st) {
    961e:	797b      	ldrb	r3, [r7, #5]
    9620:	2b00      	cmp	r3, #0
    9622:	d00b      	beq.n	963c <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9624:	79bb      	ldrb	r3, [r7, #6]
    9626:	2210      	movs	r2, #16
    9628:	fa02 f303 	lsl.w	r3, r2, r3
    962c:	b2da      	uxtb	r2, r3
    962e:	79fb      	ldrb	r3, [r7, #7]
    9630:	4619      	mov	r1, r3
    9632:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9636:	4b09      	ldr	r3, [pc, #36]	; (965c <_usbd_ep_set_stall+0x50>)
    9638:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    963a:	e00a      	b.n	9652 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    963c:	79bb      	ldrb	r3, [r7, #6]
    963e:	2210      	movs	r2, #16
    9640:	fa02 f303 	lsl.w	r3, r2, r3
    9644:	b2da      	uxtb	r2, r3
    9646:	79fb      	ldrb	r3, [r7, #7]
    9648:	4619      	mov	r1, r3
    964a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    964e:	4b04      	ldr	r3, [pc, #16]	; (9660 <_usbd_ep_set_stall+0x54>)
    9650:	4798      	blx	r3
}
    9652:	bf00      	nop
    9654:	3708      	adds	r7, #8
    9656:	46bd      	mov	sp, r7
    9658:	bd80      	pop	{r7, pc}
    965a:	bf00      	nop
    965c:	00009069 	.word	0x00009069
    9660:	000090bd 	.word	0x000090bd

00009664 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    9664:	b580      	push	{r7, lr}
    9666:	b084      	sub	sp, #16
    9668:	af00      	add	r7, sp, #0
    966a:	4603      	mov	r3, r0
    966c:	460a      	mov	r2, r1
    966e:	71fb      	strb	r3, [r7, #7]
    9670:	4613      	mov	r3, r2
    9672:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    9674:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9678:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    967a:	79fb      	ldrb	r3, [r7, #7]
    967c:	4619      	mov	r1, r3
    967e:	68f8      	ldr	r0, [r7, #12]
    9680:	4b08      	ldr	r3, [pc, #32]	; (96a4 <_usbd_ep_is_stalled+0x40>)
    9682:	4798      	blx	r3
    9684:	4603      	mov	r3, r0
    9686:	4619      	mov	r1, r3
    9688:	79bb      	ldrb	r3, [r7, #6]
    968a:	2210      	movs	r2, #16
    968c:	fa02 f303 	lsl.w	r3, r2, r3
    9690:	400b      	ands	r3, r1
    9692:	2b00      	cmp	r3, #0
    9694:	bf14      	ite	ne
    9696:	2301      	movne	r3, #1
    9698:	2300      	moveq	r3, #0
    969a:	b2db      	uxtb	r3, r3
}
    969c:	4618      	mov	r0, r3
    969e:	3710      	adds	r7, #16
    96a0:	46bd      	mov	sp, r7
    96a2:	bd80      	pop	{r7, pc}
    96a4:	00009095 	.word	0x00009095

000096a8 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    96a8:	b580      	push	{r7, lr}
    96aa:	b084      	sub	sp, #16
    96ac:	af00      	add	r7, sp, #0
    96ae:	4603      	mov	r3, r0
    96b0:	460a      	mov	r2, r1
    96b2:	71fb      	strb	r3, [r7, #7]
    96b4:	4613      	mov	r3, r2
    96b6:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    96b8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    96bc:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    96be:	79fb      	ldrb	r3, [r7, #7]
    96c0:	4619      	mov	r1, r3
    96c2:	68f8      	ldr	r0, [r7, #12]
    96c4:	4b08      	ldr	r3, [pc, #32]	; (96e8 <_usbd_ep_is_stall_sent+0x40>)
    96c6:	4798      	blx	r3
    96c8:	4603      	mov	r3, r0
    96ca:	4619      	mov	r1, r3
    96cc:	79bb      	ldrb	r3, [r7, #6]
    96ce:	2220      	movs	r2, #32
    96d0:	fa02 f303 	lsl.w	r3, r2, r3
    96d4:	400b      	ands	r3, r1
    96d6:	2b00      	cmp	r3, #0
    96d8:	bf14      	ite	ne
    96da:	2301      	movne	r3, #1
    96dc:	2300      	moveq	r3, #0
    96de:	b2db      	uxtb	r3, r3
}
    96e0:	4618      	mov	r0, r3
    96e2:	3710      	adds	r7, #16
    96e4:	46bd      	mov	sp, r7
    96e6:	bd80      	pop	{r7, pc}
    96e8:	00009015 	.word	0x00009015

000096ec <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    96ec:	b580      	push	{r7, lr}
    96ee:	b082      	sub	sp, #8
    96f0:	af00      	add	r7, sp, #0
    96f2:	4603      	mov	r3, r0
    96f4:	460a      	mov	r2, r1
    96f6:	71fb      	strb	r3, [r7, #7]
    96f8:	4613      	mov	r3, r2
    96fa:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    96fc:	79bb      	ldrb	r3, [r7, #6]
    96fe:	2220      	movs	r2, #32
    9700:	409a      	lsls	r2, r3
    9702:	79fb      	ldrb	r3, [r7, #7]
    9704:	4611      	mov	r1, r2
    9706:	4618      	mov	r0, r3
    9708:	4b02      	ldr	r3, [pc, #8]	; (9714 <_usbd_ep_ack_stall+0x28>)
    970a:	4798      	blx	r3
}
    970c:	bf00      	nop
    970e:	3708      	adds	r7, #8
    9710:	46bd      	mov	sp, r7
    9712:	bd80      	pop	{r7, pc}
    9714:	00009565 	.word	0x00009565

00009718 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    9718:	b580      	push	{r7, lr}
    971a:	b082      	sub	sp, #8
    971c:	af00      	add	r7, sp, #0
    971e:	4603      	mov	r3, r0
    9720:	71fb      	strb	r3, [r7, #7]
    9722:	460b      	mov	r3, r1
    9724:	71bb      	strb	r3, [r7, #6]
    9726:	4613      	mov	r3, r2
    9728:	717b      	strb	r3, [r7, #5]
	if (en) {
    972a:	797b      	ldrb	r3, [r7, #5]
    972c:	2b00      	cmp	r3, #0
    972e:	d008      	beq.n	9742 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9730:	79bb      	ldrb	r3, [r7, #6]
    9732:	2220      	movs	r2, #32
    9734:	409a      	lsls	r2, r3
    9736:	79fb      	ldrb	r3, [r7, #7]
    9738:	4611      	mov	r1, r2
    973a:	4618      	mov	r0, r3
    973c:	4b07      	ldr	r3, [pc, #28]	; (975c <_usbd_ep_int_stall_en+0x44>)
    973e:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    9740:	e007      	b.n	9752 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9742:	79bb      	ldrb	r3, [r7, #6]
    9744:	2220      	movs	r2, #32
    9746:	409a      	lsls	r2, r3
    9748:	79fb      	ldrb	r3, [r7, #7]
    974a:	4611      	mov	r1, r2
    974c:	4618      	mov	r0, r3
    974e:	4b04      	ldr	r3, [pc, #16]	; (9760 <_usbd_ep_int_stall_en+0x48>)
    9750:	4798      	blx	r3
}
    9752:	bf00      	nop
    9754:	3708      	adds	r7, #8
    9756:	46bd      	mov	sp, r7
    9758:	bd80      	pop	{r7, pc}
    975a:	bf00      	nop
    975c:	0000958d 	.word	0x0000958d
    9760:	000095b5 	.word	0x000095b5

00009764 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    9764:	b580      	push	{r7, lr}
    9766:	b082      	sub	sp, #8
    9768:	af00      	add	r7, sp, #0
    976a:	4603      	mov	r3, r0
    976c:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    976e:	79fb      	ldrb	r3, [r7, #7]
    9770:	4619      	mov	r1, r3
    9772:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9776:	4b03      	ldr	r3, [pc, #12]	; (9784 <_usbd_ep_stop_setup+0x20>)
    9778:	4798      	blx	r3
}
    977a:	bf00      	nop
    977c:	3708      	adds	r7, #8
    977e:	46bd      	mov	sp, r7
    9780:	bd80      	pop	{r7, pc}
    9782:	bf00      	nop
    9784:	000090e9 	.word	0x000090e9

00009788 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    9788:	b580      	push	{r7, lr}
    978a:	b082      	sub	sp, #8
    978c:	af00      	add	r7, sp, #0
    978e:	4603      	mov	r3, r0
    9790:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    9792:	79fb      	ldrb	r3, [r7, #7]
    9794:	2210      	movs	r2, #16
    9796:	4619      	mov	r1, r3
    9798:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    979c:	4b05      	ldr	r3, [pc, #20]	; (97b4 <_usbd_ep_is_setup+0x2c>)
    979e:	4798      	blx	r3
    97a0:	4603      	mov	r3, r0
    97a2:	2b00      	cmp	r3, #0
    97a4:	bf14      	ite	ne
    97a6:	2301      	movne	r3, #1
    97a8:	2300      	moveq	r3, #0
    97aa:	b2db      	uxtb	r3, r3
}
    97ac:	4618      	mov	r0, r3
    97ae:	3708      	adds	r7, #8
    97b0:	46bd      	mov	sp, r7
    97b2:	bd80      	pop	{r7, pc}
    97b4:	00008fdf 	.word	0x00008fdf

000097b8 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    97b8:	b580      	push	{r7, lr}
    97ba:	b082      	sub	sp, #8
    97bc:	af00      	add	r7, sp, #0
    97be:	4603      	mov	r3, r0
    97c0:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    97c2:	79fb      	ldrb	r3, [r7, #7]
    97c4:	2110      	movs	r1, #16
    97c6:	4618      	mov	r0, r3
    97c8:	4b02      	ldr	r3, [pc, #8]	; (97d4 <_usbd_ep_ack_setup+0x1c>)
    97ca:	4798      	blx	r3
}
    97cc:	bf00      	nop
    97ce:	3708      	adds	r7, #8
    97d0:	46bd      	mov	sp, r7
    97d2:	bd80      	pop	{r7, pc}
    97d4:	00009565 	.word	0x00009565

000097d8 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    97d8:	b580      	push	{r7, lr}
    97da:	b082      	sub	sp, #8
    97dc:	af00      	add	r7, sp, #0
    97de:	4603      	mov	r3, r0
    97e0:	71fb      	strb	r3, [r7, #7]
    97e2:	460b      	mov	r3, r1
    97e4:	71bb      	strb	r3, [r7, #6]
    97e6:	4613      	mov	r3, r2
    97e8:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    97ea:	797b      	ldrb	r3, [r7, #5]
    97ec:	2b00      	cmp	r3, #0
    97ee:	d00b      	beq.n	9808 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    97f0:	79bb      	ldrb	r3, [r7, #6]
    97f2:	2201      	movs	r2, #1
    97f4:	fa02 f303 	lsl.w	r3, r2, r3
    97f8:	b2da      	uxtb	r2, r3
    97fa:	79fb      	ldrb	r3, [r7, #7]
    97fc:	4619      	mov	r1, r3
    97fe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9802:	4b09      	ldr	r3, [pc, #36]	; (9828 <_usbd_ep_set_toggle+0x50>)
    9804:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    9806:	e00a      	b.n	981e <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9808:	79bb      	ldrb	r3, [r7, #6]
    980a:	2201      	movs	r2, #1
    980c:	fa02 f303 	lsl.w	r3, r2, r3
    9810:	b2da      	uxtb	r2, r3
    9812:	79fb      	ldrb	r3, [r7, #7]
    9814:	4619      	mov	r1, r3
    9816:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    981a:	4b04      	ldr	r3, [pc, #16]	; (982c <_usbd_ep_set_toggle+0x54>)
    981c:	4798      	blx	r3
}
    981e:	bf00      	nop
    9820:	3708      	adds	r7, #8
    9822:	46bd      	mov	sp, r7
    9824:	bd80      	pop	{r7, pc}
    9826:	bf00      	nop
    9828:	00009069 	.word	0x00009069
    982c:	000090bd 	.word	0x000090bd

00009830 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    9830:	b580      	push	{r7, lr}
    9832:	b082      	sub	sp, #8
    9834:	af00      	add	r7, sp, #0
    9836:	4603      	mov	r3, r0
    9838:	460a      	mov	r2, r1
    983a:	71fb      	strb	r3, [r7, #7]
    983c:	4613      	mov	r3, r2
    983e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    9840:	79bb      	ldrb	r3, [r7, #6]
    9842:	2201      	movs	r2, #1
    9844:	409a      	lsls	r2, r3
    9846:	79fb      	ldrb	r3, [r7, #7]
    9848:	4611      	mov	r1, r2
    984a:	4618      	mov	r0, r3
    984c:	4b02      	ldr	r3, [pc, #8]	; (9858 <_usbd_ep_ack_io_cpt+0x28>)
    984e:	4798      	blx	r3
}
    9850:	bf00      	nop
    9852:	3708      	adds	r7, #8
    9854:	46bd      	mov	sp, r7
    9856:	bd80      	pop	{r7, pc}
    9858:	00009565 	.word	0x00009565

0000985c <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    985c:	b480      	push	{r7}
    985e:	b085      	sub	sp, #20
    9860:	af00      	add	r7, sp, #0
    9862:	4603      	mov	r3, r0
    9864:	603a      	str	r2, [r7, #0]
    9866:	71fb      	strb	r3, [r7, #7]
    9868:	460b      	mov	r3, r1
    986a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    986c:	79fa      	ldrb	r2, [r7, #7]
    986e:	79bb      	ldrb	r3, [r7, #6]
    9870:	0052      	lsls	r2, r2, #1
    9872:	4413      	add	r3, r2
    9874:	011b      	lsls	r3, r3, #4
    9876:	4a06      	ldr	r2, [pc, #24]	; (9890 <_usbd_ep_set_buf+0x34>)
    9878:	4413      	add	r3, r2
    987a:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    987c:	68fb      	ldr	r3, [r7, #12]
    987e:	683a      	ldr	r2, [r7, #0]
    9880:	601a      	str	r2, [r3, #0]
}
    9882:	bf00      	nop
    9884:	3714      	adds	r7, #20
    9886:	46bd      	mov	sp, r7
    9888:	f85d 7b04 	ldr.w	r7, [sp], #4
    988c:	4770      	bx	lr
    988e:	bf00      	nop
    9890:	20000f5c 	.word	0x20000f5c

00009894 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9894:	b480      	push	{r7}
    9896:	b085      	sub	sp, #20
    9898:	af00      	add	r7, sp, #0
    989a:	4603      	mov	r3, r0
    989c:	71fb      	strb	r3, [r7, #7]
    989e:	460b      	mov	r3, r1
    98a0:	71bb      	strb	r3, [r7, #6]
    98a2:	4613      	mov	r3, r2
    98a4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    98a6:	79fa      	ldrb	r2, [r7, #7]
    98a8:	79bb      	ldrb	r3, [r7, #6]
    98aa:	0052      	lsls	r2, r2, #1
    98ac:	4413      	add	r3, r2
    98ae:	011b      	lsls	r3, r3, #4
    98b0:	4a08      	ldr	r2, [pc, #32]	; (98d4 <_usbd_ep_set_in_count+0x40>)
    98b2:	4413      	add	r3, r2
    98b4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    98b6:	88bb      	ldrh	r3, [r7, #4]
    98b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    98bc:	b299      	uxth	r1, r3
    98be:	68fa      	ldr	r2, [r7, #12]
    98c0:	6853      	ldr	r3, [r2, #4]
    98c2:	f361 339b 	bfi	r3, r1, #14, #14
    98c6:	6053      	str	r3, [r2, #4]
}
    98c8:	bf00      	nop
    98ca:	3714      	adds	r7, #20
    98cc:	46bd      	mov	sp, r7
    98ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    98d2:	4770      	bx	lr
    98d4:	20000f5c 	.word	0x20000f5c

000098d8 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    98d8:	b480      	push	{r7}
    98da:	b085      	sub	sp, #20
    98dc:	af00      	add	r7, sp, #0
    98de:	4603      	mov	r3, r0
    98e0:	71fb      	strb	r3, [r7, #7]
    98e2:	460b      	mov	r3, r1
    98e4:	71bb      	strb	r3, [r7, #6]
    98e6:	4613      	mov	r3, r2
    98e8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    98ea:	79fa      	ldrb	r2, [r7, #7]
    98ec:	79bb      	ldrb	r3, [r7, #6]
    98ee:	0052      	lsls	r2, r2, #1
    98f0:	4413      	add	r3, r2
    98f2:	011b      	lsls	r3, r3, #4
    98f4:	4a08      	ldr	r2, [pc, #32]	; (9918 <_usbd_ep_set_in_size+0x40>)
    98f6:	4413      	add	r3, r2
    98f8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    98fa:	88bb      	ldrh	r3, [r7, #4]
    98fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9900:	b299      	uxth	r1, r3
    9902:	68fa      	ldr	r2, [r7, #12]
    9904:	6853      	ldr	r3, [r2, #4]
    9906:	f361 030d 	bfi	r3, r1, #0, #14
    990a:	6053      	str	r3, [r2, #4]
}
    990c:	bf00      	nop
    990e:	3714      	adds	r7, #20
    9910:	46bd      	mov	sp, r7
    9912:	f85d 7b04 	ldr.w	r7, [sp], #4
    9916:	4770      	bx	lr
    9918:	20000f5c 	.word	0x20000f5c

0000991c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    991c:	b480      	push	{r7}
    991e:	b085      	sub	sp, #20
    9920:	af00      	add	r7, sp, #0
    9922:	4603      	mov	r3, r0
    9924:	71fb      	strb	r3, [r7, #7]
    9926:	460b      	mov	r3, r1
    9928:	71bb      	strb	r3, [r7, #6]
    992a:	4613      	mov	r3, r2
    992c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    992e:	79fa      	ldrb	r2, [r7, #7]
    9930:	79bb      	ldrb	r3, [r7, #6]
    9932:	0052      	lsls	r2, r2, #1
    9934:	4413      	add	r3, r2
    9936:	011b      	lsls	r3, r3, #4
    9938:	4a08      	ldr	r2, [pc, #32]	; (995c <_usbd_ep_set_out_count+0x40>)
    993a:	4413      	add	r3, r2
    993c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    993e:	88bb      	ldrh	r3, [r7, #4]
    9940:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9944:	b299      	uxth	r1, r3
    9946:	68fa      	ldr	r2, [r7, #12]
    9948:	6853      	ldr	r3, [r2, #4]
    994a:	f361 030d 	bfi	r3, r1, #0, #14
    994e:	6053      	str	r3, [r2, #4]
}
    9950:	bf00      	nop
    9952:	3714      	adds	r7, #20
    9954:	46bd      	mov	sp, r7
    9956:	f85d 7b04 	ldr.w	r7, [sp], #4
    995a:	4770      	bx	lr
    995c:	20000f5c 	.word	0x20000f5c

00009960 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9960:	b480      	push	{r7}
    9962:	b085      	sub	sp, #20
    9964:	af00      	add	r7, sp, #0
    9966:	4603      	mov	r3, r0
    9968:	71fb      	strb	r3, [r7, #7]
    996a:	460b      	mov	r3, r1
    996c:	71bb      	strb	r3, [r7, #6]
    996e:	4613      	mov	r3, r2
    9970:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9972:	79fa      	ldrb	r2, [r7, #7]
    9974:	79bb      	ldrb	r3, [r7, #6]
    9976:	0052      	lsls	r2, r2, #1
    9978:	4413      	add	r3, r2
    997a:	011b      	lsls	r3, r3, #4
    997c:	4a08      	ldr	r2, [pc, #32]	; (99a0 <_usbd_ep_set_out_size+0x40>)
    997e:	4413      	add	r3, r2
    9980:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    9982:	88bb      	ldrh	r3, [r7, #4]
    9984:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9988:	b299      	uxth	r1, r3
    998a:	68fa      	ldr	r2, [r7, #12]
    998c:	6853      	ldr	r3, [r2, #4]
    998e:	f361 339b 	bfi	r3, r1, #14, #14
    9992:	6053      	str	r3, [r2, #4]
}
    9994:	bf00      	nop
    9996:	3714      	adds	r7, #20
    9998:	46bd      	mov	sp, r7
    999a:	f85d 7b04 	ldr.w	r7, [sp], #4
    999e:	4770      	bx	lr
    99a0:	20000f5c 	.word	0x20000f5c

000099a4 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    99a4:	b580      	push	{r7, lr}
    99a6:	b084      	sub	sp, #16
    99a8:	af00      	add	r7, sp, #0
    99aa:	60ba      	str	r2, [r7, #8]
    99ac:	607b      	str	r3, [r7, #4]
    99ae:	4603      	mov	r3, r0
    99b0:	73fb      	strb	r3, [r7, #15]
    99b2:	460b      	mov	r3, r1
    99b4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    99b6:	68bb      	ldr	r3, [r7, #8]
    99b8:	b29a      	uxth	r2, r3
    99ba:	7bb9      	ldrb	r1, [r7, #14]
    99bc:	7bfb      	ldrb	r3, [r7, #15]
    99be:	4618      	mov	r0, r3
    99c0:	4b06      	ldr	r3, [pc, #24]	; (99dc <_usbd_ep_set_in_trans+0x38>)
    99c2:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    99c4:	687b      	ldr	r3, [r7, #4]
    99c6:	b29a      	uxth	r2, r3
    99c8:	7bb9      	ldrb	r1, [r7, #14]
    99ca:	7bfb      	ldrb	r3, [r7, #15]
    99cc:	4618      	mov	r0, r3
    99ce:	4b04      	ldr	r3, [pc, #16]	; (99e0 <_usbd_ep_set_in_trans+0x3c>)
    99d0:	4798      	blx	r3
}
    99d2:	bf00      	nop
    99d4:	3710      	adds	r7, #16
    99d6:	46bd      	mov	sp, r7
    99d8:	bd80      	pop	{r7, pc}
    99da:	bf00      	nop
    99dc:	000098d9 	.word	0x000098d9
    99e0:	00009895 	.word	0x00009895

000099e4 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    99e4:	b580      	push	{r7, lr}
    99e6:	b084      	sub	sp, #16
    99e8:	af00      	add	r7, sp, #0
    99ea:	60ba      	str	r2, [r7, #8]
    99ec:	607b      	str	r3, [r7, #4]
    99ee:	4603      	mov	r3, r0
    99f0:	73fb      	strb	r3, [r7, #15]
    99f2:	460b      	mov	r3, r1
    99f4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    99f6:	68bb      	ldr	r3, [r7, #8]
    99f8:	b29a      	uxth	r2, r3
    99fa:	7bb9      	ldrb	r1, [r7, #14]
    99fc:	7bfb      	ldrb	r3, [r7, #15]
    99fe:	4618      	mov	r0, r3
    9a00:	4b06      	ldr	r3, [pc, #24]	; (9a1c <_usbd_ep_set_out_trans+0x38>)
    9a02:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    9a04:	687b      	ldr	r3, [r7, #4]
    9a06:	b29a      	uxth	r2, r3
    9a08:	7bb9      	ldrb	r1, [r7, #14]
    9a0a:	7bfb      	ldrb	r3, [r7, #15]
    9a0c:	4618      	mov	r0, r3
    9a0e:	4b04      	ldr	r3, [pc, #16]	; (9a20 <_usbd_ep_set_out_trans+0x3c>)
    9a10:	4798      	blx	r3
}
    9a12:	bf00      	nop
    9a14:	3710      	adds	r7, #16
    9a16:	46bd      	mov	sp, r7
    9a18:	bd80      	pop	{r7, pc}
    9a1a:	bf00      	nop
    9a1c:	00009961 	.word	0x00009961
    9a20:	0000991d 	.word	0x0000991d

00009a24 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    9a24:	b480      	push	{r7}
    9a26:	b085      	sub	sp, #20
    9a28:	af00      	add	r7, sp, #0
    9a2a:	4603      	mov	r3, r0
    9a2c:	460a      	mov	r2, r1
    9a2e:	71fb      	strb	r3, [r7, #7]
    9a30:	4613      	mov	r3, r2
    9a32:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9a34:	79fa      	ldrb	r2, [r7, #7]
    9a36:	79bb      	ldrb	r3, [r7, #6]
    9a38:	0052      	lsls	r2, r2, #1
    9a3a:	4413      	add	r3, r2
    9a3c:	011b      	lsls	r3, r3, #4
    9a3e:	4a06      	ldr	r2, [pc, #24]	; (9a58 <_usbd_ep_clear_bank_status+0x34>)
    9a40:	4413      	add	r3, r2
    9a42:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    9a44:	68fb      	ldr	r3, [r7, #12]
    9a46:	2200      	movs	r2, #0
    9a48:	729a      	strb	r2, [r3, #10]
}
    9a4a:	bf00      	nop
    9a4c:	3714      	adds	r7, #20
    9a4e:	46bd      	mov	sp, r7
    9a50:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a54:	4770      	bx	lr
    9a56:	bf00      	nop
    9a58:	20000f5c 	.word	0x20000f5c

00009a5c <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9a5c:	b580      	push	{r7, lr}
    9a5e:	b082      	sub	sp, #8
    9a60:	af00      	add	r7, sp, #0
    9a62:	4603      	mov	r3, r0
    9a64:	71fb      	strb	r3, [r7, #7]
    9a66:	460b      	mov	r3, r1
    9a68:	71bb      	strb	r3, [r7, #6]
    9a6a:	4613      	mov	r3, r2
    9a6c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9a6e:	797b      	ldrb	r3, [r7, #5]
    9a70:	2b00      	cmp	r3, #0
    9a72:	d00b      	beq.n	9a8c <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9a74:	79bb      	ldrb	r3, [r7, #6]
    9a76:	2240      	movs	r2, #64	; 0x40
    9a78:	fa02 f303 	lsl.w	r3, r2, r3
    9a7c:	b2da      	uxtb	r2, r3
    9a7e:	79fb      	ldrb	r3, [r7, #7]
    9a80:	4619      	mov	r1, r3
    9a82:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a86:	4b09      	ldr	r3, [pc, #36]	; (9aac <_usbd_ep_set_in_rdy+0x50>)
    9a88:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9a8a:	e00a      	b.n	9aa2 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9a8c:	79bb      	ldrb	r3, [r7, #6]
    9a8e:	2240      	movs	r2, #64	; 0x40
    9a90:	fa02 f303 	lsl.w	r3, r2, r3
    9a94:	b2da      	uxtb	r2, r3
    9a96:	79fb      	ldrb	r3, [r7, #7]
    9a98:	4619      	mov	r1, r3
    9a9a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a9e:	4b04      	ldr	r3, [pc, #16]	; (9ab0 <_usbd_ep_set_in_rdy+0x54>)
    9aa0:	4798      	blx	r3
}
    9aa2:	bf00      	nop
    9aa4:	3708      	adds	r7, #8
    9aa6:	46bd      	mov	sp, r7
    9aa8:	bd80      	pop	{r7, pc}
    9aaa:	bf00      	nop
    9aac:	00009069 	.word	0x00009069
    9ab0:	000090bd 	.word	0x000090bd

00009ab4 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9ab4:	b580      	push	{r7, lr}
    9ab6:	b082      	sub	sp, #8
    9ab8:	af00      	add	r7, sp, #0
    9aba:	4603      	mov	r3, r0
    9abc:	71fb      	strb	r3, [r7, #7]
    9abe:	460b      	mov	r3, r1
    9ac0:	71bb      	strb	r3, [r7, #6]
    9ac2:	4613      	mov	r3, r2
    9ac4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9ac6:	797b      	ldrb	r3, [r7, #5]
    9ac8:	2b00      	cmp	r3, #0
    9aca:	d00b      	beq.n	9ae4 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9acc:	79bb      	ldrb	r3, [r7, #6]
    9ace:	2240      	movs	r2, #64	; 0x40
    9ad0:	fa02 f303 	lsl.w	r3, r2, r3
    9ad4:	b2da      	uxtb	r2, r3
    9ad6:	79fb      	ldrb	r3, [r7, #7]
    9ad8:	4619      	mov	r1, r3
    9ada:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ade:	4b09      	ldr	r3, [pc, #36]	; (9b04 <_usbd_ep_set_out_rdy+0x50>)
    9ae0:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9ae2:	e00a      	b.n	9afa <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9ae4:	79bb      	ldrb	r3, [r7, #6]
    9ae6:	2240      	movs	r2, #64	; 0x40
    9ae8:	fa02 f303 	lsl.w	r3, r2, r3
    9aec:	b2da      	uxtb	r2, r3
    9aee:	79fb      	ldrb	r3, [r7, #7]
    9af0:	4619      	mov	r1, r3
    9af2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9af6:	4b04      	ldr	r3, [pc, #16]	; (9b08 <_usbd_ep_set_out_rdy+0x54>)
    9af8:	4798      	blx	r3
}
    9afa:	bf00      	nop
    9afc:	3708      	adds	r7, #8
    9afe:	46bd      	mov	sp, r7
    9b00:	bd80      	pop	{r7, pc}
    9b02:	bf00      	nop
    9b04:	000090bd 	.word	0x000090bd
    9b08:	00009069 	.word	0x00009069

00009b0c <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9b0c:	b480      	push	{r7}
    9b0e:	b083      	sub	sp, #12
    9b10:	af00      	add	r7, sp, #0
    9b12:	4603      	mov	r3, r0
    9b14:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9b16:	88fb      	ldrh	r3, [r7, #6]
    9b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9b1c:	d820      	bhi.n	9b60 <_usbd_ep_pcksize_size+0x54>
    9b1e:	88fb      	ldrh	r3, [r7, #6]
    9b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9b24:	d81a      	bhi.n	9b5c <_usbd_ep_pcksize_size+0x50>
    9b26:	88fb      	ldrh	r3, [r7, #6]
    9b28:	2b80      	cmp	r3, #128	; 0x80
    9b2a:	d815      	bhi.n	9b58 <_usbd_ep_pcksize_size+0x4c>
    9b2c:	88fb      	ldrh	r3, [r7, #6]
    9b2e:	2b40      	cmp	r3, #64	; 0x40
    9b30:	d810      	bhi.n	9b54 <_usbd_ep_pcksize_size+0x48>
    9b32:	88fb      	ldrh	r3, [r7, #6]
    9b34:	2b20      	cmp	r3, #32
    9b36:	d80b      	bhi.n	9b50 <_usbd_ep_pcksize_size+0x44>
    9b38:	88fb      	ldrh	r3, [r7, #6]
    9b3a:	2b10      	cmp	r3, #16
    9b3c:	d806      	bhi.n	9b4c <_usbd_ep_pcksize_size+0x40>
    9b3e:	88fb      	ldrh	r3, [r7, #6]
    9b40:	2b08      	cmp	r3, #8
    9b42:	bf8c      	ite	hi
    9b44:	2301      	movhi	r3, #1
    9b46:	2300      	movls	r3, #0
    9b48:	b2db      	uxtb	r3, r3
    9b4a:	e00a      	b.n	9b62 <_usbd_ep_pcksize_size+0x56>
    9b4c:	2302      	movs	r3, #2
    9b4e:	e008      	b.n	9b62 <_usbd_ep_pcksize_size+0x56>
    9b50:	2303      	movs	r3, #3
    9b52:	e006      	b.n	9b62 <_usbd_ep_pcksize_size+0x56>
    9b54:	2304      	movs	r3, #4
    9b56:	e004      	b.n	9b62 <_usbd_ep_pcksize_size+0x56>
    9b58:	2305      	movs	r3, #5
    9b5a:	e002      	b.n	9b62 <_usbd_ep_pcksize_size+0x56>
    9b5c:	2306      	movs	r3, #6
    9b5e:	e000      	b.n	9b62 <_usbd_ep_pcksize_size+0x56>
    9b60:	2307      	movs	r3, #7
}
    9b62:	4618      	mov	r0, r3
    9b64:	370c      	adds	r7, #12
    9b66:	46bd      	mov	sp, r7
    9b68:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b6c:	4770      	bx	lr
	...

00009b70 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9b70:	b480      	push	{r7}
    9b72:	b085      	sub	sp, #20
    9b74:	af00      	add	r7, sp, #0
    9b76:	4603      	mov	r3, r0
    9b78:	460a      	mov	r2, r1
    9b7a:	71fb      	strb	r3, [r7, #7]
    9b7c:	4613      	mov	r3, r2
    9b7e:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9b80:	79fb      	ldrb	r3, [r7, #7]
    9b82:	2b00      	cmp	r3, #0
    9b84:	d008      	beq.n	9b98 <_usb_d_dev_ept+0x28>
    9b86:	79bb      	ldrb	r3, [r7, #6]
    9b88:	2b00      	cmp	r3, #0
    9b8a:	d003      	beq.n	9b94 <_usb_d_dev_ept+0x24>
    9b8c:	79fb      	ldrb	r3, [r7, #7]
    9b8e:	3304      	adds	r3, #4
    9b90:	b2db      	uxtb	r3, r3
    9b92:	e002      	b.n	9b9a <_usb_d_dev_ept+0x2a>
    9b94:	79fb      	ldrb	r3, [r7, #7]
    9b96:	e000      	b.n	9b9a <_usb_d_dev_ept+0x2a>
    9b98:	2300      	movs	r3, #0
    9b9a:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    9b9c:	7bfa      	ldrb	r2, [r7, #15]
    9b9e:	4613      	mov	r3, r2
    9ba0:	009b      	lsls	r3, r3, #2
    9ba2:	4413      	add	r3, r2
    9ba4:	009b      	lsls	r3, r3, #2
    9ba6:	3310      	adds	r3, #16
    9ba8:	4a04      	ldr	r2, [pc, #16]	; (9bbc <_usb_d_dev_ept+0x4c>)
    9baa:	4413      	add	r3, r2
    9bac:	3304      	adds	r3, #4
}
    9bae:	4618      	mov	r0, r3
    9bb0:	3714      	adds	r7, #20
    9bb2:	46bd      	mov	sp, r7
    9bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bb8:	4770      	bx	lr
    9bba:	bf00      	nop
    9bbc:	20000e94 	.word	0x20000e94

00009bc0 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    9bc0:	b580      	push	{r7, lr}
    9bc2:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    9bc4:	2104      	movs	r1, #4
    9bc6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9bca:	4b03      	ldr	r3, [pc, #12]	; (9bd8 <_usb_d_dev_sof+0x18>)
    9bcc:	4798      	blx	r3
	dev_inst.callbacks.sof();
    9bce:	4b03      	ldr	r3, [pc, #12]	; (9bdc <_usb_d_dev_sof+0x1c>)
    9bd0:	681b      	ldr	r3, [r3, #0]
    9bd2:	4798      	blx	r3
}
    9bd4:	bf00      	nop
    9bd6:	bd80      	pop	{r7, pc}
    9bd8:	00009237 	.word	0x00009237
    9bdc:	20000e94 	.word	0x20000e94

00009be0 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    9be0:	b580      	push	{r7, lr}
    9be2:	b084      	sub	sp, #16
    9be4:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    9be6:	2300      	movs	r3, #0
    9be8:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9bea:	f240 2101 	movw	r1, #513	; 0x201
    9bee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9bf2:	4b1a      	ldr	r3, [pc, #104]	; (9c5c <_usb_d_dev_lpmsusp+0x7c>)
    9bf4:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9bf6:	f240 2101 	movw	r1, #513	; 0x201
    9bfa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9bfe:	4b18      	ldr	r3, [pc, #96]	; (9c60 <_usb_d_dev_lpmsusp+0x80>)
    9c00:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9c02:	2170      	movs	r1, #112	; 0x70
    9c04:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c08:	4b16      	ldr	r3, [pc, #88]	; (9c64 <_usb_d_dev_lpmsusp+0x84>)
    9c0a:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9c0c:	2300      	movs	r3, #0
    9c0e:	73fb      	strb	r3, [r7, #15]
    9c10:	e018      	b.n	9c44 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9c12:	7bfb      	ldrb	r3, [r7, #15]
    9c14:	015b      	lsls	r3, r3, #5
    9c16:	4a14      	ldr	r2, [pc, #80]	; (9c68 <_usb_d_dev_lpmsusp+0x88>)
    9c18:	4413      	add	r3, r2
    9c1a:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9c1c:	687b      	ldr	r3, [r7, #4]
    9c1e:	891b      	ldrh	r3, [r3, #8]
    9c20:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9c24:	b2db      	uxtb	r3, r3
    9c26:	2b03      	cmp	r3, #3
    9c28:	d109      	bne.n	9c3e <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9c2a:	687b      	ldr	r3, [r7, #4]
    9c2c:	891b      	ldrh	r3, [r3, #8]
    9c2e:	f3c3 130a 	ubfx	r3, r3, #4, #11
    9c32:	b29b      	uxth	r3, r3
    9c34:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    9c36:	687b      	ldr	r3, [r7, #4]
    9c38:	2200      	movs	r2, #0
    9c3a:	811a      	strh	r2, [r3, #8]
			break;
    9c3c:	e005      	b.n	9c4a <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9c3e:	7bfb      	ldrb	r3, [r7, #15]
    9c40:	3301      	adds	r3, #1
    9c42:	73fb      	strb	r3, [r7, #15]
    9c44:	7bfb      	ldrb	r3, [r7, #15]
    9c46:	2b03      	cmp	r3, #3
    9c48:	d9e3      	bls.n	9c12 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9c4a:	4b08      	ldr	r3, [pc, #32]	; (9c6c <_usb_d_dev_lpmsusp+0x8c>)
    9c4c:	685b      	ldr	r3, [r3, #4]
    9c4e:	68b9      	ldr	r1, [r7, #8]
    9c50:	2003      	movs	r0, #3
    9c52:	4798      	blx	r3
}
    9c54:	bf00      	nop
    9c56:	3710      	adds	r7, #16
    9c58:	46bd      	mov	sp, r7
    9c5a:	bd80      	pop	{r7, pc}
    9c5c:	00009237 	.word	0x00009237
    9c60:	0000928d 	.word	0x0000928d
    9c64:	00009255 	.word	0x00009255
    9c68:	20000f5c 	.word	0x20000f5c
    9c6c:	20000e94 	.word	0x20000e94

00009c70 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9c70:	b580      	push	{r7, lr}
    9c72:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    9c74:	2180      	movs	r1, #128	; 0x80
    9c76:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c7a:	4b04      	ldr	r3, [pc, #16]	; (9c8c <_usb_d_dev_ramerr+0x1c>)
    9c7c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    9c7e:	4b04      	ldr	r3, [pc, #16]	; (9c90 <_usb_d_dev_ramerr+0x20>)
    9c80:	685b      	ldr	r3, [r3, #4]
    9c82:	2100      	movs	r1, #0
    9c84:	2005      	movs	r0, #5
    9c86:	4798      	blx	r3
}
    9c88:	bf00      	nop
    9c8a:	bd80      	pop	{r7, pc}
    9c8c:	00009237 	.word	0x00009237
    9c90:	20000e94 	.word	0x20000e94

00009c94 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    9c94:	b580      	push	{r7, lr}
    9c96:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9c98:	2170      	movs	r1, #112	; 0x70
    9c9a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c9e:	4b0b      	ldr	r3, [pc, #44]	; (9ccc <_usb_d_dev_wakeup+0x38>)
    9ca0:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9ca2:	2170      	movs	r1, #112	; 0x70
    9ca4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ca8:	4b09      	ldr	r3, [pc, #36]	; (9cd0 <_usb_d_dev_wakeup+0x3c>)
    9caa:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9cac:	f240 2101 	movw	r1, #513	; 0x201
    9cb0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9cb4:	4b07      	ldr	r3, [pc, #28]	; (9cd4 <_usb_d_dev_wakeup+0x40>)
    9cb6:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    9cb8:	2000      	movs	r0, #0
    9cba:	4b07      	ldr	r3, [pc, #28]	; (9cd8 <_usb_d_dev_wakeup+0x44>)
    9cbc:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    9cbe:	4b07      	ldr	r3, [pc, #28]	; (9cdc <_usb_d_dev_wakeup+0x48>)
    9cc0:	685b      	ldr	r3, [r3, #4]
    9cc2:	2100      	movs	r1, #0
    9cc4:	2002      	movs	r0, #2
    9cc6:	4798      	blx	r3
}
    9cc8:	bf00      	nop
    9cca:	bd80      	pop	{r7, pc}
    9ccc:	00009237 	.word	0x00009237
    9cd0:	0000928d 	.word	0x0000928d
    9cd4:	00009255 	.word	0x00009255
    9cd8:	00009535 	.word	0x00009535
    9cdc:	20000e94 	.word	0x20000e94

00009ce0 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    9ce0:	b580      	push	{r7, lr}
    9ce2:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    9ce4:	2200      	movs	r2, #0
    9ce6:	2100      	movs	r1, #0
    9ce8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9cec:	4b0d      	ldr	r3, [pc, #52]	; (9d24 <_usb_d_dev_reset+0x44>)
    9cee:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    9cf0:	2108      	movs	r1, #8
    9cf2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9cf6:	4b0c      	ldr	r3, [pc, #48]	; (9d28 <_usb_d_dev_reset+0x48>)
    9cf8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9cfa:	2170      	movs	r1, #112	; 0x70
    9cfc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d00:	4b0a      	ldr	r3, [pc, #40]	; (9d2c <_usb_d_dev_reset+0x4c>)
    9d02:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9d04:	f240 2101 	movw	r1, #513	; 0x201
    9d08:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d0c:	4b08      	ldr	r3, [pc, #32]	; (9d30 <_usb_d_dev_reset+0x50>)
    9d0e:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9d10:	4b08      	ldr	r3, [pc, #32]	; (9d34 <_usb_d_dev_reset+0x54>)
    9d12:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9d14:	4b08      	ldr	r3, [pc, #32]	; (9d38 <_usb_d_dev_reset+0x58>)
    9d16:	685b      	ldr	r3, [r3, #4]
    9d18:	2100      	movs	r1, #0
    9d1a:	2001      	movs	r0, #1
    9d1c:	4798      	blx	r3
}
    9d1e:	bf00      	nop
    9d20:	bd80      	pop	{r7, pc}
    9d22:	bf00      	nop
    9d24:	000091cd 	.word	0x000091cd
    9d28:	00009237 	.word	0x00009237
    9d2c:	0000928d 	.word	0x0000928d
    9d30:	00009255 	.word	0x00009255
    9d34:	0000a89d 	.word	0x0000a89d
    9d38:	20000e94 	.word	0x20000e94

00009d3c <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    9d3c:	b580      	push	{r7, lr}
    9d3e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9d40:	f240 2101 	movw	r1, #513	; 0x201
    9d44:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d48:	4b09      	ldr	r3, [pc, #36]	; (9d70 <_usb_d_dev_suspend+0x34>)
    9d4a:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9d4c:	f240 2101 	movw	r1, #513	; 0x201
    9d50:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d54:	4b07      	ldr	r3, [pc, #28]	; (9d74 <_usb_d_dev_suspend+0x38>)
    9d56:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9d58:	2170      	movs	r1, #112	; 0x70
    9d5a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d5e:	4b06      	ldr	r3, [pc, #24]	; (9d78 <_usb_d_dev_suspend+0x3c>)
    9d60:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    9d62:	4b06      	ldr	r3, [pc, #24]	; (9d7c <_usb_d_dev_suspend+0x40>)
    9d64:	685b      	ldr	r3, [r3, #4]
    9d66:	2100      	movs	r1, #0
    9d68:	2004      	movs	r0, #4
    9d6a:	4798      	blx	r3
}
    9d6c:	bf00      	nop
    9d6e:	bd80      	pop	{r7, pc}
    9d70:	00009237 	.word	0x00009237
    9d74:	0000928d 	.word	0x0000928d
    9d78:	00009255 	.word	0x00009255
    9d7c:	20000e94 	.word	0x20000e94

00009d80 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    9d80:	b580      	push	{r7, lr}
    9d82:	b082      	sub	sp, #8
    9d84:	af00      	add	r7, sp, #0
	bool     rc    = true;
    9d86:	2301      	movs	r3, #1
    9d88:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    9d8a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d8e:	4b22      	ldr	r3, [pc, #136]	; (9e18 <_usb_d_dev_handle_nep+0x98>)
    9d90:	4798      	blx	r3
    9d92:	4603      	mov	r3, r0
    9d94:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    9d96:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d9a:	4b20      	ldr	r3, [pc, #128]	; (9e1c <_usb_d_dev_handle_nep+0x9c>)
    9d9c:	4798      	blx	r3
    9d9e:	4603      	mov	r3, r0
    9da0:	461a      	mov	r2, r3
    9da2:	88bb      	ldrh	r3, [r7, #4]
    9da4:	4013      	ands	r3, r2
    9da6:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    9da8:	88bb      	ldrh	r3, [r7, #4]
    9daa:	f003 0304 	and.w	r3, r3, #4
    9dae:	2b00      	cmp	r3, #0
    9db0:	d003      	beq.n	9dba <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    9db2:	4b1b      	ldr	r3, [pc, #108]	; (9e20 <_usb_d_dev_handle_nep+0xa0>)
    9db4:	4798      	blx	r3
		return true;
    9db6:	2301      	movs	r3, #1
    9db8:	e02a      	b.n	9e10 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    9dba:	88bb      	ldrh	r3, [r7, #4]
    9dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9dc0:	2b00      	cmp	r3, #0
    9dc2:	d002      	beq.n	9dca <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    9dc4:	4b17      	ldr	r3, [pc, #92]	; (9e24 <_usb_d_dev_handle_nep+0xa4>)
    9dc6:	4798      	blx	r3
    9dc8:	e021      	b.n	9e0e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    9dca:	88bb      	ldrh	r3, [r7, #4]
    9dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9dd0:	2b00      	cmp	r3, #0
    9dd2:	d002      	beq.n	9dda <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    9dd4:	4b14      	ldr	r3, [pc, #80]	; (9e28 <_usb_d_dev_handle_nep+0xa8>)
    9dd6:	4798      	blx	r3
    9dd8:	e019      	b.n	9e0e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    9dda:	88bb      	ldrh	r3, [r7, #4]
    9ddc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9de0:	2b00      	cmp	r3, #0
    9de2:	d002      	beq.n	9dea <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    9de4:	4b11      	ldr	r3, [pc, #68]	; (9e2c <_usb_d_dev_handle_nep+0xac>)
    9de6:	4798      	blx	r3
    9de8:	e011      	b.n	9e0e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    9dea:	88bb      	ldrh	r3, [r7, #4]
    9dec:	f003 0308 	and.w	r3, r3, #8
    9df0:	2b00      	cmp	r3, #0
    9df2:	d002      	beq.n	9dfa <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    9df4:	4b0e      	ldr	r3, [pc, #56]	; (9e30 <_usb_d_dev_handle_nep+0xb0>)
    9df6:	4798      	blx	r3
    9df8:	e009      	b.n	9e0e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    9dfa:	88bb      	ldrh	r3, [r7, #4]
    9dfc:	f003 0301 	and.w	r3, r3, #1
    9e00:	2b00      	cmp	r3, #0
    9e02:	d002      	beq.n	9e0a <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    9e04:	4b0b      	ldr	r3, [pc, #44]	; (9e34 <_usb_d_dev_handle_nep+0xb4>)
    9e06:	4798      	blx	r3
    9e08:	e001      	b.n	9e0e <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    9e0a:	2300      	movs	r3, #0
    9e0c:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    9e0e:	79fb      	ldrb	r3, [r7, #7]
}
    9e10:	4618      	mov	r0, r3
    9e12:	3708      	adds	r7, #8
    9e14:	46bd      	mov	sp, r7
    9e16:	bd80      	pop	{r7, pc}
    9e18:	0000921d 	.word	0x0000921d
    9e1c:	00009273 	.word	0x00009273
    9e20:	00009bc1 	.word	0x00009bc1
    9e24:	00009be1 	.word	0x00009be1
    9e28:	00009c71 	.word	0x00009c71
    9e2c:	00009c95 	.word	0x00009c95
    9e30:	00009ce1 	.word	0x00009ce1
    9e34:	00009d3d 	.word	0x00009d3d

00009e38 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9e38:	b590      	push	{r4, r7, lr}
    9e3a:	b089      	sub	sp, #36	; 0x24
    9e3c:	af00      	add	r7, sp, #0
    9e3e:	6078      	str	r0, [r7, #4]
    9e40:	460b      	mov	r3, r1
    9e42:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    9e44:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9e48:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9e4a:	687b      	ldr	r3, [r7, #4]
    9e4c:	7c9b      	ldrb	r3, [r3, #18]
    9e4e:	f003 030f 	and.w	r3, r3, #15
    9e52:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9e54:	7dfb      	ldrb	r3, [r7, #23]
    9e56:	015b      	lsls	r3, r3, #5
    9e58:	4a73      	ldr	r2, [pc, #460]	; (a028 <_usb_d_dev_in_next+0x1f0>)
    9e5a:	4413      	add	r3, r2
    9e5c:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9e5e:	78fb      	ldrb	r3, [r7, #3]
    9e60:	2b00      	cmp	r3, #0
    9e62:	d006      	beq.n	9e72 <_usb_d_dev_in_next+0x3a>
    9e64:	693b      	ldr	r3, [r7, #16]
    9e66:	3310      	adds	r3, #16
    9e68:	685b      	ldr	r3, [r3, #4]
    9e6a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9e6e:	b29b      	uxth	r3, r3
    9e70:	e000      	b.n	9e74 <_usb_d_dev_in_next+0x3c>
    9e72:	2300      	movs	r3, #0
    9e74:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    9e76:	687b      	ldr	r3, [r7, #4]
    9e78:	8a1b      	ldrh	r3, [r3, #16]
    9e7a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9e7e:	4293      	cmp	r3, r2
    9e80:	d103      	bne.n	9e8a <_usb_d_dev_in_next+0x52>
    9e82:	687b      	ldr	r3, [r7, #4]
    9e84:	8a1b      	ldrh	r3, [r3, #16]
    9e86:	b21b      	sxth	r3, r3
    9e88:	e004      	b.n	9e94 <_usb_d_dev_in_next+0x5c>
    9e8a:	687b      	ldr	r3, [r7, #4]
    9e8c:	8a1b      	ldrh	r3, [r3, #16]
    9e8e:	3b01      	subs	r3, #1
    9e90:	b29b      	uxth	r3, r3
    9e92:	b21b      	sxth	r3, r3
    9e94:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9e98:	4013      	ands	r3, r2
    9e9a:	b21b      	sxth	r3, r3
    9e9c:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    9e9e:	2300      	movs	r3, #0
    9ea0:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    9ea2:	687b      	ldr	r3, [r7, #4]
    9ea4:	7cdb      	ldrb	r3, [r3, #19]
    9ea6:	f003 0307 	and.w	r3, r3, #7
    9eaa:	b2db      	uxtb	r3, r3
    9eac:	2b01      	cmp	r3, #1
    9eae:	bf0c      	ite	eq
    9eb0:	2301      	moveq	r3, #1
    9eb2:	2300      	movne	r3, #0
    9eb4:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    9eb6:	78fb      	ldrb	r3, [r7, #3]
    9eb8:	2b00      	cmp	r3, #0
    9eba:	d004      	beq.n	9ec6 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    9ebc:	7dfb      	ldrb	r3, [r7, #23]
    9ebe:	2101      	movs	r1, #1
    9ec0:	4618      	mov	r0, r3
    9ec2:	4b5a      	ldr	r3, [pc, #360]	; (a02c <_usb_d_dev_in_next+0x1f4>)
    9ec4:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    9ec6:	687b      	ldr	r3, [r7, #4]
    9ec8:	689a      	ldr	r2, [r3, #8]
    9eca:	89fb      	ldrh	r3, [r7, #14]
    9ecc:	441a      	add	r2, r3
    9ece:	687b      	ldr	r3, [r7, #4]
    9ed0:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    9ed2:	687b      	ldr	r3, [r7, #4]
    9ed4:	689a      	ldr	r2, [r3, #8]
    9ed6:	687b      	ldr	r3, [r7, #4]
    9ed8:	685b      	ldr	r3, [r3, #4]
    9eda:	429a      	cmp	r2, r3
    9edc:	d243      	bcs.n	9f66 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    9ede:	687b      	ldr	r3, [r7, #4]
    9ee0:	685b      	ldr	r3, [r3, #4]
    9ee2:	b29a      	uxth	r2, r3
    9ee4:	687b      	ldr	r3, [r7, #4]
    9ee6:	689b      	ldr	r3, [r3, #8]
    9ee8:	b29b      	uxth	r3, r3
    9eea:	1ad3      	subs	r3, r2, r3
    9eec:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    9eee:	687b      	ldr	r3, [r7, #4]
    9ef0:	7cdb      	ldrb	r3, [r3, #19]
    9ef2:	f003 0320 	and.w	r3, r3, #32
    9ef6:	b2db      	uxtb	r3, r3
    9ef8:	2b00      	cmp	r3, #0
    9efa:	d01b      	beq.n	9f34 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    9efc:	687b      	ldr	r3, [r7, #4]
    9efe:	8a1b      	ldrh	r3, [r3, #16]
    9f00:	8bfa      	ldrh	r2, [r7, #30]
    9f02:	429a      	cmp	r2, r3
    9f04:	d902      	bls.n	9f0c <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    9f06:	687b      	ldr	r3, [r7, #4]
    9f08:	8a1b      	ldrh	r3, [r3, #16]
    9f0a:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    9f0c:	687b      	ldr	r3, [r7, #4]
    9f0e:	68d8      	ldr	r0, [r3, #12]
    9f10:	687b      	ldr	r3, [r7, #4]
    9f12:	681a      	ldr	r2, [r3, #0]
    9f14:	687b      	ldr	r3, [r7, #4]
    9f16:	689b      	ldr	r3, [r3, #8]
    9f18:	4413      	add	r3, r2
    9f1a:	8bfa      	ldrh	r2, [r7, #30]
    9f1c:	4619      	mov	r1, r3
    9f1e:	4b44      	ldr	r3, [pc, #272]	; (a030 <_usb_d_dev_in_next+0x1f8>)
    9f20:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    9f22:	687b      	ldr	r3, [r7, #4]
    9f24:	68db      	ldr	r3, [r3, #12]
    9f26:	461a      	mov	r2, r3
    9f28:	7dfb      	ldrb	r3, [r7, #23]
    9f2a:	2101      	movs	r1, #1
    9f2c:	4618      	mov	r0, r3
    9f2e:	4b41      	ldr	r3, [pc, #260]	; (a034 <_usb_d_dev_in_next+0x1fc>)
    9f30:	4798      	blx	r3
    9f32:	e011      	b.n	9f58 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    9f34:	8bfb      	ldrh	r3, [r7, #30]
    9f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9f3a:	d902      	bls.n	9f42 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    9f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9f40:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9f42:	687b      	ldr	r3, [r7, #4]
    9f44:	681a      	ldr	r2, [r3, #0]
    9f46:	687b      	ldr	r3, [r7, #4]
    9f48:	689b      	ldr	r3, [r3, #8]
    9f4a:	4413      	add	r3, r2
    9f4c:	461a      	mov	r2, r3
    9f4e:	7dfb      	ldrb	r3, [r7, #23]
    9f50:	2101      	movs	r1, #1
    9f52:	4618      	mov	r0, r3
    9f54:	4b37      	ldr	r3, [pc, #220]	; (a034 <_usb_d_dev_in_next+0x1fc>)
    9f56:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9f58:	8bfa      	ldrh	r2, [r7, #30]
    9f5a:	7df8      	ldrb	r0, [r7, #23]
    9f5c:	2300      	movs	r3, #0
    9f5e:	2101      	movs	r1, #1
    9f60:	4c35      	ldr	r4, [pc, #212]	; (a038 <_usb_d_dev_in_next+0x200>)
    9f62:	47a0      	blx	r4
		goto _in_tx_exec;
    9f64:	e041      	b.n	9fea <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    9f66:	687b      	ldr	r3, [r7, #4]
    9f68:	7cdb      	ldrb	r3, [r3, #19]
    9f6a:	f003 0310 	and.w	r3, r3, #16
    9f6e:	b2db      	uxtb	r3, r3
    9f70:	2b00      	cmp	r3, #0
    9f72:	d00b      	beq.n	9f8c <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    9f74:	687a      	ldr	r2, [r7, #4]
    9f76:	7cd3      	ldrb	r3, [r2, #19]
    9f78:	f36f 1304 	bfc	r3, #4, #1
    9f7c:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    9f7e:	7df8      	ldrb	r0, [r7, #23]
    9f80:	2300      	movs	r3, #0
    9f82:	2200      	movs	r2, #0
    9f84:	2101      	movs	r1, #1
    9f86:	4c2c      	ldr	r4, [pc, #176]	; (a038 <_usb_d_dev_in_next+0x200>)
    9f88:	47a0      	blx	r4
		goto _in_tx_exec;
    9f8a:	e02e      	b.n	9fea <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    9f8c:	7afb      	ldrb	r3, [r7, #11]
    9f8e:	2b00      	cmp	r3, #0
    9f90:	d006      	beq.n	9fa0 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    9f92:	7dfb      	ldrb	r3, [r7, #23]
    9f94:	224b      	movs	r2, #75	; 0x4b
    9f96:	4619      	mov	r1, r3
    9f98:	69b8      	ldr	r0, [r7, #24]
    9f9a:	4b28      	ldr	r3, [pc, #160]	; (a03c <_usb_d_dev_in_next+0x204>)
    9f9c:	4798      	blx	r3
    9f9e:	e005      	b.n	9fac <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    9fa0:	7dfb      	ldrb	r3, [r7, #23]
    9fa2:	224a      	movs	r2, #74	; 0x4a
    9fa4:	4619      	mov	r1, r3
    9fa6:	69b8      	ldr	r0, [r7, #24]
    9fa8:	4b24      	ldr	r3, [pc, #144]	; (a03c <_usb_d_dev_in_next+0x204>)
    9faa:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    9fac:	687b      	ldr	r3, [r7, #4]
    9fae:	8a1b      	ldrh	r3, [r3, #16]
    9fb0:	89ba      	ldrh	r2, [r7, #12]
    9fb2:	429a      	cmp	r2, r3
    9fb4:	d114      	bne.n	9fe0 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    9fb6:	687a      	ldr	r2, [r7, #4]
    9fb8:	7cd3      	ldrb	r3, [r2, #19]
    9fba:	f36f 1386 	bfc	r3, #6, #1
    9fbe:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    9fc0:	4b1f      	ldr	r3, [pc, #124]	; (a040 <_usb_d_dev_in_next+0x208>)
    9fc2:	68db      	ldr	r3, [r3, #12]
    9fc4:	687a      	ldr	r2, [r7, #4]
    9fc6:	7c90      	ldrb	r0, [r2, #18]
    9fc8:	687a      	ldr	r2, [r7, #4]
    9fca:	6892      	ldr	r2, [r2, #8]
    9fcc:	4611      	mov	r1, r2
    9fce:	4798      	blx	r3
    9fd0:	4603      	mov	r3, r0
    9fd2:	2b00      	cmp	r3, #0
    9fd4:	d124      	bne.n	a020 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    9fd6:	687a      	ldr	r2, [r7, #4]
    9fd8:	7cd3      	ldrb	r3, [r2, #19]
    9fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9fde:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9fe0:	2100      	movs	r1, #0
    9fe2:	6878      	ldr	r0, [r7, #4]
    9fe4:	4b17      	ldr	r3, [pc, #92]	; (a044 <_usb_d_dev_in_next+0x20c>)
    9fe6:	4798      	blx	r3
	return;
    9fe8:	e01b      	b.n	a022 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    9fea:	78fb      	ldrb	r3, [r7, #3]
    9fec:	f083 0301 	eor.w	r3, r3, #1
    9ff0:	b2db      	uxtb	r3, r3
    9ff2:	2b00      	cmp	r3, #0
    9ff4:	d00d      	beq.n	a012 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    9ff6:	7afb      	ldrb	r3, [r7, #11]
    9ff8:	2b00      	cmp	r3, #0
    9ffa:	d002      	beq.n	a002 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    9ffc:	234e      	movs	r3, #78	; 0x4e
    9ffe:	777b      	strb	r3, [r7, #29]
    a000:	e001      	b.n	a006 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    a002:	234a      	movs	r3, #74	; 0x4a
    a004:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a006:	7f7a      	ldrb	r2, [r7, #29]
    a008:	7dfb      	ldrb	r3, [r7, #23]
    a00a:	4619      	mov	r1, r3
    a00c:	69b8      	ldr	r0, [r7, #24]
    a00e:	4b0e      	ldr	r3, [pc, #56]	; (a048 <_usb_d_dev_in_next+0x210>)
    a010:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    a012:	7dfb      	ldrb	r3, [r7, #23]
    a014:	2201      	movs	r2, #1
    a016:	2101      	movs	r1, #1
    a018:	4618      	mov	r0, r3
    a01a:	4b0c      	ldr	r3, [pc, #48]	; (a04c <_usb_d_dev_in_next+0x214>)
    a01c:	4798      	blx	r3
    a01e:	e000      	b.n	a022 <_usb_d_dev_in_next+0x1ea>
			return;
    a020:	bf00      	nop
}
    a022:	3724      	adds	r7, #36	; 0x24
    a024:	46bd      	mov	sp, r7
    a026:	bd90      	pop	{r4, r7, pc}
    a028:	20000f5c 	.word	0x20000f5c
    a02c:	00009831 	.word	0x00009831
    a030:	00010b51 	.word	0x00010b51
    a034:	0000985d 	.word	0x0000985d
    a038:	000099a5 	.word	0x000099a5
    a03c:	0000913d 	.word	0x0000913d
    a040:	20000e94 	.word	0x20000e94
    a044:	0000b161 	.word	0x0000b161
    a048:	00009111 	.word	0x00009111
    a04c:	00009a5d 	.word	0x00009a5d

0000a050 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    a050:	b590      	push	{r4, r7, lr}
    a052:	b08b      	sub	sp, #44	; 0x2c
    a054:	af00      	add	r7, sp, #0
    a056:	6078      	str	r0, [r7, #4]
    a058:	460b      	mov	r3, r1
    a05a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    a05c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a060:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    a062:	687b      	ldr	r3, [r7, #4]
    a064:	7c9b      	ldrb	r3, [r3, #18]
    a066:	f003 030f 	and.w	r3, r3, #15
    a06a:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    a06c:	7ffb      	ldrb	r3, [r7, #31]
    a06e:	015b      	lsls	r3, r3, #5
    a070:	4a94      	ldr	r2, [pc, #592]	; (a2c4 <_usb_d_dev_out_next+0x274>)
    a072:	4413      	add	r3, r2
    a074:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    a076:	78fb      	ldrb	r3, [r7, #3]
    a078:	2b00      	cmp	r3, #0
    a07a:	d005      	beq.n	a088 <_usb_d_dev_out_next+0x38>
    a07c:	69bb      	ldr	r3, [r7, #24]
    a07e:	685b      	ldr	r3, [r3, #4]
    a080:	f3c3 338d 	ubfx	r3, r3, #14, #14
    a084:	b29b      	uxth	r3, r3
    a086:	e000      	b.n	a08a <_usb_d_dev_out_next+0x3a>
    a088:	2300      	movs	r3, #0
    a08a:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    a08c:	78fb      	ldrb	r3, [r7, #3]
    a08e:	2b00      	cmp	r3, #0
    a090:	d005      	beq.n	a09e <_usb_d_dev_out_next+0x4e>
    a092:	69bb      	ldr	r3, [r7, #24]
    a094:	685b      	ldr	r3, [r3, #4]
    a096:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a09a:	b29b      	uxth	r3, r3
    a09c:	e000      	b.n	a0a0 <_usb_d_dev_out_next+0x50>
    a09e:	2300      	movs	r3, #0
    a0a0:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a0a2:	687b      	ldr	r3, [r7, #4]
    a0a4:	8a1b      	ldrh	r3, [r3, #16]
    a0a6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a0aa:	4293      	cmp	r3, r2
    a0ac:	d004      	beq.n	a0b8 <_usb_d_dev_out_next+0x68>
    a0ae:	687b      	ldr	r3, [r7, #4]
    a0b0:	8a1b      	ldrh	r3, [r3, #16]
    a0b2:	3b01      	subs	r3, #1
    a0b4:	b29b      	uxth	r3, r3
    a0b6:	e001      	b.n	a0bc <_usb_d_dev_out_next+0x6c>
    a0b8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a0bc:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    a0be:	8aba      	ldrh	r2, [r7, #20]
    a0c0:	8a7b      	ldrh	r3, [r7, #18]
    a0c2:	4013      	ands	r3, r2
    a0c4:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a0c6:	687b      	ldr	r3, [r7, #4]
    a0c8:	7cdb      	ldrb	r3, [r3, #19]
    a0ca:	f003 0307 	and.w	r3, r3, #7
    a0ce:	b2db      	uxtb	r3, r3
    a0d0:	2b01      	cmp	r3, #1
    a0d2:	bf0c      	ite	eq
    a0d4:	2301      	moveq	r3, #1
    a0d6:	2300      	movne	r3, #0
    a0d8:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    a0da:	78fb      	ldrb	r3, [r7, #3]
    a0dc:	2b00      	cmp	r3, #0
    a0de:	d004      	beq.n	a0ea <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    a0e0:	7ffb      	ldrb	r3, [r7, #31]
    a0e2:	2100      	movs	r1, #0
    a0e4:	4618      	mov	r0, r3
    a0e6:	4b78      	ldr	r3, [pc, #480]	; (a2c8 <_usb_d_dev_out_next+0x278>)
    a0e8:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    a0ea:	687b      	ldr	r3, [r7, #4]
    a0ec:	7cdb      	ldrb	r3, [r3, #19]
    a0ee:	f003 0320 	and.w	r3, r3, #32
    a0f2:	b2db      	uxtb	r3, r3
    a0f4:	2b00      	cmp	r3, #0
    a0f6:	d01c      	beq.n	a132 <_usb_d_dev_out_next+0xe2>
    a0f8:	687b      	ldr	r3, [r7, #4]
    a0fa:	685b      	ldr	r3, [r3, #4]
    a0fc:	2b00      	cmp	r3, #0
    a0fe:	d018      	beq.n	a132 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    a100:	687b      	ldr	r3, [r7, #4]
    a102:	685b      	ldr	r3, [r3, #4]
    a104:	b29a      	uxth	r2, r3
    a106:	687b      	ldr	r3, [r7, #4]
    a108:	689b      	ldr	r3, [r3, #8]
    a10a:	b29b      	uxth	r3, r3
    a10c:	1ad3      	subs	r3, r2, r3
    a10e:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    a110:	687b      	ldr	r3, [r7, #4]
    a112:	681a      	ldr	r2, [r3, #0]
    a114:	687b      	ldr	r3, [r7, #4]
    a116:	689b      	ldr	r3, [r3, #8]
    a118:	18d0      	adds	r0, r2, r3
    a11a:	687b      	ldr	r3, [r7, #4]
    a11c:	68d9      	ldr	r1, [r3, #12]
    a11e:	89ba      	ldrh	r2, [r7, #12]
    a120:	8a3b      	ldrh	r3, [r7, #16]
    a122:	429a      	cmp	r2, r3
    a124:	d901      	bls.n	a12a <_usb_d_dev_out_next+0xda>
    a126:	8a3b      	ldrh	r3, [r7, #16]
    a128:	e000      	b.n	a12c <_usb_d_dev_out_next+0xdc>
    a12a:	89bb      	ldrh	r3, [r7, #12]
    a12c:	461a      	mov	r2, r3
    a12e:	4b67      	ldr	r3, [pc, #412]	; (a2cc <_usb_d_dev_out_next+0x27c>)
    a130:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    a132:	687b      	ldr	r3, [r7, #4]
    a134:	685b      	ldr	r3, [r3, #4]
    a136:	2b00      	cmp	r3, #0
    a138:	d121      	bne.n	a17e <_usb_d_dev_out_next+0x12e>
    a13a:	687b      	ldr	r3, [r7, #4]
    a13c:	7cdb      	ldrb	r3, [r3, #19]
    a13e:	f003 0310 	and.w	r3, r3, #16
    a142:	b2db      	uxtb	r3, r3
    a144:	2b00      	cmp	r3, #0
    a146:	d01a      	beq.n	a17e <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    a148:	687a      	ldr	r2, [r7, #4]
    a14a:	7cd3      	ldrb	r3, [r2, #19]
    a14c:	f36f 1304 	bfc	r3, #4, #1
    a150:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    a152:	687a      	ldr	r2, [r7, #4]
    a154:	7cd3      	ldrb	r3, [r2, #19]
    a156:	f043 0320 	orr.w	r3, r3, #32
    a15a:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a15c:	687b      	ldr	r3, [r7, #4]
    a15e:	68db      	ldr	r3, [r3, #12]
    a160:	461a      	mov	r2, r3
    a162:	7ffb      	ldrb	r3, [r7, #31]
    a164:	2100      	movs	r1, #0
    a166:	4618      	mov	r0, r3
    a168:	4b59      	ldr	r3, [pc, #356]	; (a2d0 <_usb_d_dev_out_next+0x280>)
    a16a:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a16c:	687b      	ldr	r3, [r7, #4]
    a16e:	8a1b      	ldrh	r3, [r3, #16]
    a170:	461a      	mov	r2, r3
    a172:	7ff8      	ldrb	r0, [r7, #31]
    a174:	2300      	movs	r3, #0
    a176:	2100      	movs	r1, #0
    a178:	4c56      	ldr	r4, [pc, #344]	; (a2d4 <_usb_d_dev_out_next+0x284>)
    a17a:	47a0      	blx	r4
		goto _out_rx_exec;
    a17c:	e090      	b.n	a2a0 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    a17e:	78fb      	ldrb	r3, [r7, #3]
    a180:	2b00      	cmp	r3, #0
    a182:	d010      	beq.n	a1a6 <_usb_d_dev_out_next+0x156>
    a184:	687b      	ldr	r3, [r7, #4]
    a186:	8a1b      	ldrh	r3, [r3, #16]
    a188:	8a3a      	ldrh	r2, [r7, #16]
    a18a:	429a      	cmp	r2, r3
    a18c:	d20b      	bcs.n	a1a6 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    a18e:	687a      	ldr	r2, [r7, #4]
    a190:	7cd3      	ldrb	r3, [r2, #19]
    a192:	f36f 1304 	bfc	r3, #4, #1
    a196:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    a198:	687b      	ldr	r3, [r7, #4]
    a19a:	689a      	ldr	r2, [r3, #8]
    a19c:	8abb      	ldrh	r3, [r7, #20]
    a19e:	441a      	add	r2, r3
    a1a0:	687b      	ldr	r3, [r7, #4]
    a1a2:	609a      	str	r2, [r3, #8]
    a1a4:	e05c      	b.n	a260 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    a1a6:	687b      	ldr	r3, [r7, #4]
    a1a8:	689a      	ldr	r2, [r3, #8]
    a1aa:	8afb      	ldrh	r3, [r7, #22]
    a1ac:	441a      	add	r2, r3
    a1ae:	687b      	ldr	r3, [r7, #4]
    a1b0:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    a1b2:	687b      	ldr	r3, [r7, #4]
    a1b4:	689a      	ldr	r2, [r3, #8]
    a1b6:	687b      	ldr	r3, [r7, #4]
    a1b8:	685b      	ldr	r3, [r3, #4]
    a1ba:	429a      	cmp	r2, r3
    a1bc:	d250      	bcs.n	a260 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    a1be:	687b      	ldr	r3, [r7, #4]
    a1c0:	685b      	ldr	r3, [r3, #4]
    a1c2:	b29a      	uxth	r2, r3
    a1c4:	687b      	ldr	r3, [r7, #4]
    a1c6:	689b      	ldr	r3, [r3, #8]
    a1c8:	b29b      	uxth	r3, r3
    a1ca:	1ad3      	subs	r3, r2, r3
    a1cc:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    a1ce:	687b      	ldr	r3, [r7, #4]
    a1d0:	7cdb      	ldrb	r3, [r3, #19]
    a1d2:	f003 0320 	and.w	r3, r3, #32
    a1d6:	b2db      	uxtb	r3, r3
    a1d8:	2b00      	cmp	r3, #0
    a1da:	d010      	beq.n	a1fe <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    a1dc:	687b      	ldr	r3, [r7, #4]
    a1de:	8a1b      	ldrh	r3, [r3, #16]
    a1e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a1e2:	429a      	cmp	r2, r3
    a1e4:	d902      	bls.n	a1ec <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    a1e6:	687b      	ldr	r3, [r7, #4]
    a1e8:	8a1b      	ldrh	r3, [r3, #16]
    a1ea:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a1ec:	687b      	ldr	r3, [r7, #4]
    a1ee:	68db      	ldr	r3, [r3, #12]
    a1f0:	461a      	mov	r2, r3
    a1f2:	7ffb      	ldrb	r3, [r7, #31]
    a1f4:	2100      	movs	r1, #0
    a1f6:	4618      	mov	r0, r3
    a1f8:	4b35      	ldr	r3, [pc, #212]	; (a2d0 <_usb_d_dev_out_next+0x280>)
    a1fa:	4798      	blx	r3
    a1fc:	e029      	b.n	a252 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    a1fe:	687b      	ldr	r3, [r7, #4]
    a200:	8a1b      	ldrh	r3, [r3, #16]
    a202:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a204:	429a      	cmp	r2, r3
    a206:	d90f      	bls.n	a228 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    a208:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    a20a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    a20e:	d903      	bls.n	a218 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    a210:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a214:	84fb      	strh	r3, [r7, #38]	; 0x26
    a216:	e011      	b.n	a23c <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    a218:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a21a:	8a7b      	ldrh	r3, [r7, #18]
    a21c:	4013      	ands	r3, r2
    a21e:	b29b      	uxth	r3, r3
    a220:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a222:	1ad3      	subs	r3, r2, r3
    a224:	84fb      	strh	r3, [r7, #38]	; 0x26
    a226:	e009      	b.n	a23c <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    a228:	687b      	ldr	r3, [r7, #4]
    a22a:	8a1b      	ldrh	r3, [r3, #16]
    a22c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a22e:	429a      	cmp	r2, r3
    a230:	d204      	bcs.n	a23c <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    a232:	687a      	ldr	r2, [r7, #4]
    a234:	7cd3      	ldrb	r3, [r2, #19]
    a236:	f043 0320 	orr.w	r3, r3, #32
    a23a:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a23c:	687b      	ldr	r3, [r7, #4]
    a23e:	681a      	ldr	r2, [r3, #0]
    a240:	687b      	ldr	r3, [r7, #4]
    a242:	689b      	ldr	r3, [r3, #8]
    a244:	4413      	add	r3, r2
    a246:	461a      	mov	r2, r3
    a248:	7ffb      	ldrb	r3, [r7, #31]
    a24a:	2100      	movs	r1, #0
    a24c:	4618      	mov	r0, r3
    a24e:	4b20      	ldr	r3, [pc, #128]	; (a2d0 <_usb_d_dev_out_next+0x280>)
    a250:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    a252:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a254:	7ff8      	ldrb	r0, [r7, #31]
    a256:	2300      	movs	r3, #0
    a258:	2100      	movs	r1, #0
    a25a:	4c1e      	ldr	r4, [pc, #120]	; (a2d4 <_usb_d_dev_out_next+0x284>)
    a25c:	47a0      	blx	r4
			goto _out_rx_exec;
    a25e:	e01f      	b.n	a2a0 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    a260:	7bfb      	ldrb	r3, [r7, #15]
    a262:	2b00      	cmp	r3, #0
    a264:	d006      	beq.n	a274 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    a266:	7ffb      	ldrb	r3, [r7, #31]
    a268:	222d      	movs	r2, #45	; 0x2d
    a26a:	4619      	mov	r1, r3
    a26c:	6a38      	ldr	r0, [r7, #32]
    a26e:	4b1a      	ldr	r3, [pc, #104]	; (a2d8 <_usb_d_dev_out_next+0x288>)
    a270:	4798      	blx	r3
    a272:	e005      	b.n	a280 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    a274:	7ffb      	ldrb	r3, [r7, #31]
    a276:	2225      	movs	r2, #37	; 0x25
    a278:	4619      	mov	r1, r3
    a27a:	6a38      	ldr	r0, [r7, #32]
    a27c:	4b16      	ldr	r3, [pc, #88]	; (a2d8 <_usb_d_dev_out_next+0x288>)
    a27e:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    a280:	7ffb      	ldrb	r3, [r7, #31]
    a282:	2b00      	cmp	r3, #0
    a284:	d107      	bne.n	a296 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a286:	687b      	ldr	r3, [r7, #4]
    a288:	68db      	ldr	r3, [r3, #12]
    a28a:	461a      	mov	r2, r3
    a28c:	7ffb      	ldrb	r3, [r7, #31]
    a28e:	2100      	movs	r1, #0
    a290:	4618      	mov	r0, r3
    a292:	4b0f      	ldr	r3, [pc, #60]	; (a2d0 <_usb_d_dev_out_next+0x280>)
    a294:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a296:	2100      	movs	r1, #0
    a298:	6878      	ldr	r0, [r7, #4]
    a29a:	4b10      	ldr	r3, [pc, #64]	; (a2dc <_usb_d_dev_out_next+0x28c>)
    a29c:	4798      	blx	r3
	return;
    a29e:	e031      	b.n	a304 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    a2a0:	78fb      	ldrb	r3, [r7, #3]
    a2a2:	f083 0301 	eor.w	r3, r3, #1
    a2a6:	b2db      	uxtb	r3, r3
    a2a8:	2b00      	cmp	r3, #0
    a2aa:	d025      	beq.n	a2f8 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    a2ac:	7bfb      	ldrb	r3, [r7, #15]
    a2ae:	2b00      	cmp	r3, #0
    a2b0:	d018      	beq.n	a2e4 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    a2b2:	7ffb      	ldrb	r3, [r7, #31]
    a2b4:	2101      	movs	r1, #1
    a2b6:	4618      	mov	r0, r3
    a2b8:	4b09      	ldr	r3, [pc, #36]	; (a2e0 <_usb_d_dev_out_next+0x290>)
    a2ba:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    a2bc:	232d      	movs	r3, #45	; 0x2d
    a2be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    a2c2:	e012      	b.n	a2ea <_usb_d_dev_out_next+0x29a>
    a2c4:	20000f5c 	.word	0x20000f5c
    a2c8:	00009831 	.word	0x00009831
    a2cc:	00010b51 	.word	0x00010b51
    a2d0:	0000985d 	.word	0x0000985d
    a2d4:	000099e5 	.word	0x000099e5
    a2d8:	0000913d 	.word	0x0000913d
    a2dc:	0000b161 	.word	0x0000b161
    a2e0:	00009a25 	.word	0x00009a25
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    a2e4:	2325      	movs	r3, #37	; 0x25
    a2e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a2ea:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    a2ee:	7ffb      	ldrb	r3, [r7, #31]
    a2f0:	4619      	mov	r1, r3
    a2f2:	6a38      	ldr	r0, [r7, #32]
    a2f4:	4b05      	ldr	r3, [pc, #20]	; (a30c <_usb_d_dev_out_next+0x2bc>)
    a2f6:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    a2f8:	7ffb      	ldrb	r3, [r7, #31]
    a2fa:	2201      	movs	r2, #1
    a2fc:	2100      	movs	r1, #0
    a2fe:	4618      	mov	r0, r3
    a300:	4b03      	ldr	r3, [pc, #12]	; (a310 <_usb_d_dev_out_next+0x2c0>)
    a302:	4798      	blx	r3
}
    a304:	372c      	adds	r7, #44	; 0x2c
    a306:	46bd      	mov	sp, r7
    a308:	bd90      	pop	{r4, r7, pc}
    a30a:	bf00      	nop
    a30c:	00009111 	.word	0x00009111
    a310:	00009ab5 	.word	0x00009ab5

0000a314 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    a314:	b580      	push	{r7, lr}
    a316:	b084      	sub	sp, #16
    a318:	af00      	add	r7, sp, #0
    a31a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    a31c:	687b      	ldr	r3, [r7, #4]
    a31e:	7c9b      	ldrb	r3, [r3, #18]
    a320:	f003 030f 	and.w	r3, r3, #15
    a324:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a326:	687b      	ldr	r3, [r7, #4]
    a328:	7cdb      	ldrb	r3, [r3, #19]
    a32a:	f003 0307 	and.w	r3, r3, #7
    a32e:	b2db      	uxtb	r3, r3
    a330:	2b01      	cmp	r3, #1
    a332:	bf0c      	ite	eq
    a334:	2301      	moveq	r3, #1
    a336:	2300      	movne	r3, #0
    a338:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    a33a:	7bbb      	ldrb	r3, [r7, #14]
    a33c:	f083 0301 	eor.w	r3, r3, #1
    a340:	b2db      	uxtb	r3, r3
    a342:	2b00      	cmp	r3, #0
    a344:	d008      	beq.n	a358 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    a346:	7bfb      	ldrb	r3, [r7, #15]
    a348:	4618      	mov	r0, r3
    a34a:	4b20      	ldr	r3, [pc, #128]	; (a3cc <_usb_d_dev_handle_setup+0xb8>)
    a34c:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    a34e:	7bfb      	ldrb	r3, [r7, #15]
    a350:	4618      	mov	r0, r3
    a352:	4b1f      	ldr	r3, [pc, #124]	; (a3d0 <_usb_d_dev_handle_setup+0xbc>)
    a354:	4798      	blx	r3
		return;
    a356:	e036      	b.n	a3c6 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    a358:	687b      	ldr	r3, [r7, #4]
    a35a:	7cdb      	ldrb	r3, [r3, #19]
    a35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a360:	b2db      	uxtb	r3, r3
    a362:	2b00      	cmp	r3, #0
    a364:	d010      	beq.n	a388 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    a366:	687a      	ldr	r2, [r7, #4]
    a368:	7cd3      	ldrb	r3, [r2, #19]
    a36a:	f36f 1386 	bfc	r3, #6, #1
    a36e:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a370:	7bfb      	ldrb	r3, [r7, #15]
    a372:	2200      	movs	r2, #0
    a374:	2101      	movs	r1, #1
    a376:	4618      	mov	r0, r3
    a378:	4b16      	ldr	r3, [pc, #88]	; (a3d4 <_usb_d_dev_handle_setup+0xc0>)
    a37a:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    a37c:	7bfb      	ldrb	r3, [r7, #15]
    a37e:	2200      	movs	r2, #0
    a380:	2100      	movs	r1, #0
    a382:	4618      	mov	r0, r3
    a384:	4b14      	ldr	r3, [pc, #80]	; (a3d8 <_usb_d_dev_handle_setup+0xc4>)
    a386:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    a388:	687a      	ldr	r2, [r7, #4]
    a38a:	7cd3      	ldrb	r3, [r2, #19]
    a38c:	f36f 03c3 	bfc	r3, #3, #1
    a390:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    a392:	7bfb      	ldrb	r3, [r7, #15]
    a394:	2100      	movs	r1, #0
    a396:	4618      	mov	r0, r3
    a398:	4b10      	ldr	r3, [pc, #64]	; (a3dc <_usb_d_dev_handle_setup+0xc8>)
    a39a:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    a39c:	7bfb      	ldrb	r3, [r7, #15]
    a39e:	2101      	movs	r1, #1
    a3a0:	4618      	mov	r0, r3
    a3a2:	4b0e      	ldr	r3, [pc, #56]	; (a3dc <_usb_d_dev_handle_setup+0xc8>)
    a3a4:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a3a6:	7bfb      	ldrb	r3, [r7, #15]
    a3a8:	216f      	movs	r1, #111	; 0x6f
    a3aa:	4618      	mov	r0, r3
    a3ac:	4b0c      	ldr	r3, [pc, #48]	; (a3e0 <_usb_d_dev_handle_setup+0xcc>)
    a3ae:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a3b0:	7bfb      	ldrb	r3, [r7, #15]
    a3b2:	216f      	movs	r1, #111	; 0x6f
    a3b4:	4618      	mov	r0, r3
    a3b6:	4b0b      	ldr	r3, [pc, #44]	; (a3e4 <_usb_d_dev_handle_setup+0xd0>)
    a3b8:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    a3ba:	4b0b      	ldr	r3, [pc, #44]	; (a3e8 <_usb_d_dev_handle_setup+0xd4>)
    a3bc:	689b      	ldr	r3, [r3, #8]
    a3be:	687a      	ldr	r2, [r7, #4]
    a3c0:	7c92      	ldrb	r2, [r2, #18]
    a3c2:	4610      	mov	r0, r2
    a3c4:	4798      	blx	r3
}
    a3c6:	3710      	adds	r7, #16
    a3c8:	46bd      	mov	sp, r7
    a3ca:	bd80      	pop	{r7, pc}
    a3cc:	000097b9 	.word	0x000097b9
    a3d0:	00009765 	.word	0x00009765
    a3d4:	00009a5d 	.word	0x00009a5d
    a3d8:	00009ab5 	.word	0x00009ab5
    a3dc:	00009a25 	.word	0x00009a25
    a3e0:	00009565 	.word	0x00009565
    a3e4:	000095b5 	.word	0x000095b5
    a3e8:	20000e94 	.word	0x20000e94

0000a3ec <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a3ec:	b580      	push	{r7, lr}
    a3ee:	b084      	sub	sp, #16
    a3f0:	af00      	add	r7, sp, #0
    a3f2:	6078      	str	r0, [r7, #4]
    a3f4:	460b      	mov	r3, r1
    a3f6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a3f8:	687b      	ldr	r3, [r7, #4]
    a3fa:	7c9b      	ldrb	r3, [r3, #18]
    a3fc:	f003 030f 	and.w	r3, r3, #15
    a400:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    a402:	78f9      	ldrb	r1, [r7, #3]
    a404:	7bfb      	ldrb	r3, [r7, #15]
    a406:	2200      	movs	r2, #0
    a408:	4618      	mov	r0, r3
    a40a:	4b07      	ldr	r3, [pc, #28]	; (a428 <_usb_d_dev_handle_stall+0x3c>)
    a40c:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    a40e:	4b07      	ldr	r3, [pc, #28]	; (a42c <_usb_d_dev_handle_stall+0x40>)
    a410:	691b      	ldr	r3, [r3, #16]
    a412:	687a      	ldr	r2, [r7, #4]
    a414:	7c90      	ldrb	r0, [r2, #18]
    a416:	687a      	ldr	r2, [r7, #4]
    a418:	6892      	ldr	r2, [r2, #8]
    a41a:	2101      	movs	r1, #1
    a41c:	4798      	blx	r3
}
    a41e:	bf00      	nop
    a420:	3710      	adds	r7, #16
    a422:	46bd      	mov	sp, r7
    a424:	bd80      	pop	{r7, pc}
    a426:	bf00      	nop
    a428:	00009719 	.word	0x00009719
    a42c:	20000e94 	.word	0x20000e94

0000a430 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a430:	b580      	push	{r7, lr}
    a432:	b088      	sub	sp, #32
    a434:	af00      	add	r7, sp, #0
    a436:	6078      	str	r0, [r7, #4]
    a438:	460b      	mov	r3, r1
    a43a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    a43c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a440:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    a442:	687b      	ldr	r3, [r7, #4]
    a444:	7c9b      	ldrb	r3, [r3, #18]
    a446:	f003 030f 	and.w	r3, r3, #15
    a44a:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    a44c:	4b61      	ldr	r3, [pc, #388]	; (a5d4 <_usb_d_dev_handle_trfail+0x1a4>)
    a44e:	881b      	ldrh	r3, [r3, #0]
    a450:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    a452:	7efb      	ldrb	r3, [r7, #27]
    a454:	015b      	lsls	r3, r3, #5
    a456:	4a60      	ldr	r2, [pc, #384]	; (a5d8 <_usb_d_dev_handle_trfail+0x1a8>)
    a458:	4413      	add	r3, r2
    a45a:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    a45c:	78fb      	ldrb	r3, [r7, #3]
    a45e:	2b00      	cmp	r3, #0
    a460:	d006      	beq.n	a470 <_usb_d_dev_handle_trfail+0x40>
    a462:	7efb      	ldrb	r3, [r7, #27]
    a464:	4619      	mov	r1, r3
    a466:	69f8      	ldr	r0, [r7, #28]
    a468:	4b5c      	ldr	r3, [pc, #368]	; (a5dc <_usb_d_dev_handle_trfail+0x1ac>)
    a46a:	4798      	blx	r3
    a46c:	4603      	mov	r3, r0
    a46e:	e005      	b.n	a47c <_usb_d_dev_handle_trfail+0x4c>
    a470:	7efb      	ldrb	r3, [r7, #27]
    a472:	4619      	mov	r1, r3
    a474:	69f8      	ldr	r0, [r7, #28]
    a476:	4b5a      	ldr	r3, [pc, #360]	; (a5e0 <_usb_d_dev_handle_trfail+0x1b0>)
    a478:	4798      	blx	r3
    a47a:	4603      	mov	r3, r0
    a47c:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a47e:	687b      	ldr	r3, [r7, #4]
    a480:	7cdb      	ldrb	r3, [r3, #19]
    a482:	f003 0307 	and.w	r3, r3, #7
    a486:	b2db      	uxtb	r3, r3
    a488:	2b01      	cmp	r3, #1
    a48a:	bf0c      	ite	eq
    a48c:	2301      	moveq	r3, #1
    a48e:	2300      	movne	r3, #0
    a490:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    a492:	78fb      	ldrb	r3, [r7, #3]
    a494:	011b      	lsls	r3, r3, #4
    a496:	697a      	ldr	r2, [r7, #20]
    a498:	4413      	add	r3, r2
    a49a:	7a9b      	ldrb	r3, [r3, #10]
    a49c:	b2db      	uxtb	r3, r3
    a49e:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    a4a0:	7cfb      	ldrb	r3, [r7, #19]
    a4a2:	2b02      	cmp	r3, #2
    a4a4:	d12f      	bne.n	a506 <_usb_d_dev_handle_trfail+0xd6>
    a4a6:	7b3b      	ldrb	r3, [r7, #12]
    a4a8:	f003 0301 	and.w	r3, r3, #1
    a4ac:	b2db      	uxtb	r3, r3
    a4ae:	2b00      	cmp	r3, #0
    a4b0:	d029      	beq.n	a506 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    a4b2:	78fb      	ldrb	r3, [r7, #3]
    a4b4:	011b      	lsls	r3, r3, #4
    a4b6:	697a      	ldr	r2, [r7, #20]
    a4b8:	441a      	add	r2, r3
    a4ba:	7a93      	ldrb	r3, [r2, #10]
    a4bc:	f36f 0300 	bfc	r3, #0, #1
    a4c0:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a4c2:	78fb      	ldrb	r3, [r7, #3]
    a4c4:	f107 0220 	add.w	r2, r7, #32
    a4c8:	4413      	add	r3, r2
    a4ca:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a4ce:	7efb      	ldrb	r3, [r7, #27]
    a4d0:	4619      	mov	r1, r3
    a4d2:	69f8      	ldr	r0, [r7, #28]
    a4d4:	4b43      	ldr	r3, [pc, #268]	; (a5e4 <_usb_d_dev_handle_trfail+0x1b4>)
    a4d6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a4d8:	78fb      	ldrb	r3, [r7, #3]
    a4da:	f107 0220 	add.w	r2, r7, #32
    a4de:	4413      	add	r3, r2
    a4e0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a4e4:	7efb      	ldrb	r3, [r7, #27]
    a4e6:	4619      	mov	r1, r3
    a4e8:	69f8      	ldr	r0, [r7, #28]
    a4ea:	4b3f      	ldr	r3, [pc, #252]	; (a5e8 <_usb_d_dev_handle_trfail+0x1b8>)
    a4ec:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    a4ee:	78fb      	ldrb	r3, [r7, #3]
    a4f0:	2b00      	cmp	r3, #0
    a4f2:	bf14      	ite	ne
    a4f4:	2301      	movne	r3, #1
    a4f6:	2300      	moveq	r3, #0
    a4f8:	b2db      	uxtb	r3, r3
    a4fa:	2204      	movs	r2, #4
    a4fc:	4619      	mov	r1, r3
    a4fe:	6878      	ldr	r0, [r7, #4]
    a500:	4b3a      	ldr	r3, [pc, #232]	; (a5ec <_usb_d_dev_handle_trfail+0x1bc>)
    a502:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    a504:	e062      	b.n	a5cc <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    a506:	7b3b      	ldrb	r3, [r7, #12]
    a508:	f003 0302 	and.w	r3, r3, #2
    a50c:	b2db      	uxtb	r3, r3
    a50e:	2b00      	cmp	r3, #0
    a510:	d040      	beq.n	a594 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    a512:	78fb      	ldrb	r3, [r7, #3]
    a514:	011b      	lsls	r3, r3, #4
    a516:	697a      	ldr	r2, [r7, #20]
    a518:	441a      	add	r2, r3
    a51a:	7a93      	ldrb	r3, [r2, #10]
    a51c:	f36f 0341 	bfc	r3, #1, #1
    a520:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a522:	78fb      	ldrb	r3, [r7, #3]
    a524:	f107 0220 	add.w	r2, r7, #32
    a528:	4413      	add	r3, r2
    a52a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a52e:	7efb      	ldrb	r3, [r7, #27]
    a530:	4619      	mov	r1, r3
    a532:	69f8      	ldr	r0, [r7, #28]
    a534:	4b2b      	ldr	r3, [pc, #172]	; (a5e4 <_usb_d_dev_handle_trfail+0x1b4>)
    a536:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a538:	78fb      	ldrb	r3, [r7, #3]
    a53a:	f107 0220 	add.w	r2, r7, #32
    a53e:	4413      	add	r3, r2
    a540:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a544:	7efb      	ldrb	r3, [r7, #27]
    a546:	4619      	mov	r1, r3
    a548:	69f8      	ldr	r0, [r7, #28]
    a54a:	4b27      	ldr	r3, [pc, #156]	; (a5e8 <_usb_d_dev_handle_trfail+0x1b8>)
    a54c:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    a54e:	7cbb      	ldrb	r3, [r7, #18]
    a550:	2b00      	cmp	r3, #0
    a552:	d03b      	beq.n	a5cc <_usb_d_dev_handle_trfail+0x19c>
    a554:	687b      	ldr	r3, [r7, #4]
    a556:	7cdb      	ldrb	r3, [r3, #19]
    a558:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a55c:	b2db      	uxtb	r3, r3
    a55e:	2b00      	cmp	r3, #0
    a560:	d034      	beq.n	a5cc <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    a562:	687b      	ldr	r3, [r7, #4]
    a564:	7cdb      	ldrb	r3, [r3, #19]
    a566:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a56a:	b2db      	uxtb	r3, r3
    a56c:	461a      	mov	r2, r3
    a56e:	78fb      	ldrb	r3, [r7, #3]
    a570:	4293      	cmp	r3, r2
    a572:	d02b      	beq.n	a5cc <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    a574:	687b      	ldr	r3, [r7, #4]
    a576:	7cdb      	ldrb	r3, [r3, #19]
    a578:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a57c:	b2db      	uxtb	r3, r3
    a57e:	2b00      	cmp	r3, #0
    a580:	bf14      	ite	ne
    a582:	2301      	movne	r3, #1
    a584:	2300      	moveq	r3, #0
    a586:	b2db      	uxtb	r3, r3
    a588:	2200      	movs	r2, #0
    a58a:	4619      	mov	r1, r3
    a58c:	6878      	ldr	r0, [r7, #4]
    a58e:	4b17      	ldr	r3, [pc, #92]	; (a5ec <_usb_d_dev_handle_trfail+0x1bc>)
    a590:	4798      	blx	r3
}
    a592:	e01b      	b.n	a5cc <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    a594:	78fa      	ldrb	r2, [r7, #3]
    a596:	7efb      	ldrb	r3, [r7, #27]
    a598:	4611      	mov	r1, r2
    a59a:	4618      	mov	r0, r3
    a59c:	4b14      	ldr	r3, [pc, #80]	; (a5f0 <_usb_d_dev_handle_trfail+0x1c0>)
    a59e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a5a0:	78fb      	ldrb	r3, [r7, #3]
    a5a2:	f107 0220 	add.w	r2, r7, #32
    a5a6:	4413      	add	r3, r2
    a5a8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a5ac:	7efb      	ldrb	r3, [r7, #27]
    a5ae:	4619      	mov	r1, r3
    a5b0:	69f8      	ldr	r0, [r7, #28]
    a5b2:	4b0c      	ldr	r3, [pc, #48]	; (a5e4 <_usb_d_dev_handle_trfail+0x1b4>)
    a5b4:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a5b6:	78fb      	ldrb	r3, [r7, #3]
    a5b8:	f107 0220 	add.w	r2, r7, #32
    a5bc:	4413      	add	r3, r2
    a5be:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a5c2:	7efb      	ldrb	r3, [r7, #27]
    a5c4:	4619      	mov	r1, r3
    a5c6:	69f8      	ldr	r0, [r7, #28]
    a5c8:	4b07      	ldr	r3, [pc, #28]	; (a5e8 <_usb_d_dev_handle_trfail+0x1b8>)
    a5ca:	4798      	blx	r3
}
    a5cc:	bf00      	nop
    a5ce:	3720      	adds	r7, #32
    a5d0:	46bd      	mov	sp, r7
    a5d2:	bd80      	pop	{r7, pc}
    a5d4:	000111f4 	.word	0x000111f4
    a5d8:	20000f5c 	.word	0x20000f5c
    a5dc:	00009199 	.word	0x00009199
    a5e0:	00009169 	.word	0x00009169
    a5e4:	0000903d 	.word	0x0000903d
    a5e8:	0000913d 	.word	0x0000913d
    a5ec:	0000b1a9 	.word	0x0000b1a9
    a5f0:	00009a25 	.word	0x00009a25

0000a5f4 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a5f4:	b580      	push	{r7, lr}
    a5f6:	b082      	sub	sp, #8
    a5f8:	af00      	add	r7, sp, #0
    a5fa:	6078      	str	r0, [r7, #4]
    a5fc:	460b      	mov	r3, r1
    a5fe:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a600:	78fb      	ldrb	r3, [r7, #3]
    a602:	f003 0310 	and.w	r3, r3, #16
    a606:	2b00      	cmp	r3, #0
    a608:	d003      	beq.n	a612 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    a60a:	6878      	ldr	r0, [r7, #4]
    a60c:	4b0c      	ldr	r3, [pc, #48]	; (a640 <_usb_d_dev_trans_setup_isr+0x4c>)
    a60e:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    a610:	e012      	b.n	a638 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a612:	78fb      	ldrb	r3, [r7, #3]
    a614:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a618:	2b00      	cmp	r3, #0
    a61a:	d004      	beq.n	a626 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    a61c:	2101      	movs	r1, #1
    a61e:	6878      	ldr	r0, [r7, #4]
    a620:	4b08      	ldr	r3, [pc, #32]	; (a644 <_usb_d_dev_trans_setup_isr+0x50>)
    a622:	4798      	blx	r3
}
    a624:	e008      	b.n	a638 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a626:	78fb      	ldrb	r3, [r7, #3]
    a628:	f003 0320 	and.w	r3, r3, #32
    a62c:	2b00      	cmp	r3, #0
    a62e:	d003      	beq.n	a638 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    a630:	2100      	movs	r1, #0
    a632:	6878      	ldr	r0, [r7, #4]
    a634:	4b03      	ldr	r3, [pc, #12]	; (a644 <_usb_d_dev_trans_setup_isr+0x50>)
    a636:	4798      	blx	r3
}
    a638:	bf00      	nop
    a63a:	3708      	adds	r7, #8
    a63c:	46bd      	mov	sp, r7
    a63e:	bd80      	pop	{r7, pc}
    a640:	0000a315 	.word	0x0000a315
    a644:	0000a3ed 	.word	0x0000a3ed

0000a648 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a648:	b580      	push	{r7, lr}
    a64a:	b082      	sub	sp, #8
    a64c:	af00      	add	r7, sp, #0
    a64e:	6078      	str	r0, [r7, #4]
    a650:	460b      	mov	r3, r1
    a652:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a654:	78fb      	ldrb	r3, [r7, #3]
    a656:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a65a:	2b00      	cmp	r3, #0
    a65c:	d004      	beq.n	a668 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    a65e:	2101      	movs	r1, #1
    a660:	6878      	ldr	r0, [r7, #4]
    a662:	4b1a      	ldr	r3, [pc, #104]	; (a6cc <_usb_d_dev_trans_in_isr+0x84>)
    a664:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a666:	e02c      	b.n	a6c2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a668:	78fb      	ldrb	r3, [r7, #3]
    a66a:	f003 0308 	and.w	r3, r3, #8
    a66e:	2b00      	cmp	r3, #0
    a670:	d004      	beq.n	a67c <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    a672:	2101      	movs	r1, #1
    a674:	6878      	ldr	r0, [r7, #4]
    a676:	4b16      	ldr	r3, [pc, #88]	; (a6d0 <_usb_d_dev_trans_in_isr+0x88>)
    a678:	4798      	blx	r3
}
    a67a:	e022      	b.n	a6c2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a67c:	78fb      	ldrb	r3, [r7, #3]
    a67e:	f003 0302 	and.w	r3, r3, #2
    a682:	2b00      	cmp	r3, #0
    a684:	d004      	beq.n	a690 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    a686:	2101      	movs	r1, #1
    a688:	6878      	ldr	r0, [r7, #4]
    a68a:	4b12      	ldr	r3, [pc, #72]	; (a6d4 <_usb_d_dev_trans_in_isr+0x8c>)
    a68c:	4798      	blx	r3
}
    a68e:	e018      	b.n	a6c2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a690:	687b      	ldr	r3, [r7, #4]
    a692:	7cdb      	ldrb	r3, [r3, #19]
    a694:	f003 0307 	and.w	r3, r3, #7
    a698:	b2db      	uxtb	r3, r3
    a69a:	2b01      	cmp	r3, #1
    a69c:	d111      	bne.n	a6c2 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a69e:	78fb      	ldrb	r3, [r7, #3]
    a6a0:	f003 0304 	and.w	r3, r3, #4
    a6a4:	2b00      	cmp	r3, #0
    a6a6:	d004      	beq.n	a6b2 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    a6a8:	2100      	movs	r1, #0
    a6aa:	6878      	ldr	r0, [r7, #4]
    a6ac:	4b08      	ldr	r3, [pc, #32]	; (a6d0 <_usb_d_dev_trans_in_isr+0x88>)
    a6ae:	4798      	blx	r3
}
    a6b0:	e007      	b.n	a6c2 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a6b2:	78fb      	ldrb	r3, [r7, #3]
    a6b4:	f003 0310 	and.w	r3, r3, #16
    a6b8:	2b00      	cmp	r3, #0
    a6ba:	d002      	beq.n	a6c2 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a6bc:	6878      	ldr	r0, [r7, #4]
    a6be:	4b06      	ldr	r3, [pc, #24]	; (a6d8 <_usb_d_dev_trans_in_isr+0x90>)
    a6c0:	4798      	blx	r3
}
    a6c2:	bf00      	nop
    a6c4:	3708      	adds	r7, #8
    a6c6:	46bd      	mov	sp, r7
    a6c8:	bd80      	pop	{r7, pc}
    a6ca:	bf00      	nop
    a6cc:	0000a3ed 	.word	0x0000a3ed
    a6d0:	0000a431 	.word	0x0000a431
    a6d4:	00009e39 	.word	0x00009e39
    a6d8:	0000a315 	.word	0x0000a315

0000a6dc <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a6dc:	b580      	push	{r7, lr}
    a6de:	b082      	sub	sp, #8
    a6e0:	af00      	add	r7, sp, #0
    a6e2:	6078      	str	r0, [r7, #4]
    a6e4:	460b      	mov	r3, r1
    a6e6:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a6e8:	78fb      	ldrb	r3, [r7, #3]
    a6ea:	f003 0320 	and.w	r3, r3, #32
    a6ee:	2b00      	cmp	r3, #0
    a6f0:	d004      	beq.n	a6fc <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    a6f2:	2100      	movs	r1, #0
    a6f4:	6878      	ldr	r0, [r7, #4]
    a6f6:	4b1a      	ldr	r3, [pc, #104]	; (a760 <_usb_d_dev_trans_out_isr+0x84>)
    a6f8:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a6fa:	e02c      	b.n	a756 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a6fc:	78fb      	ldrb	r3, [r7, #3]
    a6fe:	f003 0304 	and.w	r3, r3, #4
    a702:	2b00      	cmp	r3, #0
    a704:	d004      	beq.n	a710 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    a706:	2100      	movs	r1, #0
    a708:	6878      	ldr	r0, [r7, #4]
    a70a:	4b16      	ldr	r3, [pc, #88]	; (a764 <_usb_d_dev_trans_out_isr+0x88>)
    a70c:	4798      	blx	r3
}
    a70e:	e022      	b.n	a756 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    a710:	78fb      	ldrb	r3, [r7, #3]
    a712:	f003 0301 	and.w	r3, r3, #1
    a716:	2b00      	cmp	r3, #0
    a718:	d004      	beq.n	a724 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    a71a:	2101      	movs	r1, #1
    a71c:	6878      	ldr	r0, [r7, #4]
    a71e:	4b12      	ldr	r3, [pc, #72]	; (a768 <_usb_d_dev_trans_out_isr+0x8c>)
    a720:	4798      	blx	r3
}
    a722:	e018      	b.n	a756 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a724:	687b      	ldr	r3, [r7, #4]
    a726:	7cdb      	ldrb	r3, [r3, #19]
    a728:	f003 0307 	and.w	r3, r3, #7
    a72c:	b2db      	uxtb	r3, r3
    a72e:	2b01      	cmp	r3, #1
    a730:	d111      	bne.n	a756 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a732:	78fb      	ldrb	r3, [r7, #3]
    a734:	f003 0308 	and.w	r3, r3, #8
    a738:	2b00      	cmp	r3, #0
    a73a:	d004      	beq.n	a746 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    a73c:	2101      	movs	r1, #1
    a73e:	6878      	ldr	r0, [r7, #4]
    a740:	4b08      	ldr	r3, [pc, #32]	; (a764 <_usb_d_dev_trans_out_isr+0x88>)
    a742:	4798      	blx	r3
}
    a744:	e007      	b.n	a756 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a746:	78fb      	ldrb	r3, [r7, #3]
    a748:	f003 0310 	and.w	r3, r3, #16
    a74c:	2b00      	cmp	r3, #0
    a74e:	d002      	beq.n	a756 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a750:	6878      	ldr	r0, [r7, #4]
    a752:	4b06      	ldr	r3, [pc, #24]	; (a76c <_usb_d_dev_trans_out_isr+0x90>)
    a754:	4798      	blx	r3
}
    a756:	bf00      	nop
    a758:	3708      	adds	r7, #8
    a75a:	46bd      	mov	sp, r7
    a75c:	bd80      	pop	{r7, pc}
    a75e:	bf00      	nop
    a760:	0000a3ed 	.word	0x0000a3ed
    a764:	0000a431 	.word	0x0000a431
    a768:	0000a051 	.word	0x0000a051
    a76c:	0000a315 	.word	0x0000a315

0000a770 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    a770:	b580      	push	{r7, lr}
    a772:	b084      	sub	sp, #16
    a774:	af00      	add	r7, sp, #0
    a776:	6078      	str	r0, [r7, #4]
    a778:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    a77a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a77e:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a780:	683b      	ldr	r3, [r7, #0]
    a782:	7c9b      	ldrb	r3, [r3, #18]
    a784:	f003 030f 	and.w	r3, r3, #15
    a788:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    a78a:	7afb      	ldrb	r3, [r7, #11]
    a78c:	2201      	movs	r2, #1
    a78e:	409a      	lsls	r2, r3
    a790:	687b      	ldr	r3, [r7, #4]
    a792:	4013      	ands	r3, r2
    a794:	2b00      	cmp	r3, #0
    a796:	d03d      	beq.n	a814 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    a798:	7afb      	ldrb	r3, [r7, #11]
    a79a:	68fa      	ldr	r2, [r7, #12]
    a79c:	3308      	adds	r3, #8
    a79e:	015b      	lsls	r3, r3, #5
    a7a0:	4413      	add	r3, r2
    a7a2:	3307      	adds	r3, #7
    a7a4:	781b      	ldrb	r3, [r3, #0]
    a7a6:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    a7a8:	7afb      	ldrb	r3, [r7, #11]
    a7aa:	68fa      	ldr	r2, [r7, #12]
    a7ac:	015b      	lsls	r3, r3, #5
    a7ae:	4413      	add	r3, r2
    a7b0:	f203 1309 	addw	r3, r3, #265	; 0x109
    a7b4:	781b      	ldrb	r3, [r3, #0]
    a7b6:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    a7b8:	7aba      	ldrb	r2, [r7, #10]
    a7ba:	7a7b      	ldrb	r3, [r7, #9]
    a7bc:	4013      	ands	r3, r2
    a7be:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    a7c0:	7abb      	ldrb	r3, [r7, #10]
    a7c2:	2b00      	cmp	r3, #0
    a7c4:	d027      	beq.n	a816 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    a7c6:	683b      	ldr	r3, [r7, #0]
    a7c8:	7cdb      	ldrb	r3, [r3, #19]
    a7ca:	f003 0307 	and.w	r3, r3, #7
    a7ce:	b2db      	uxtb	r3, r3
    a7d0:	2b01      	cmp	r3, #1
    a7d2:	d10c      	bne.n	a7ee <_usb_d_dev_handle_eps+0x7e>
    a7d4:	683b      	ldr	r3, [r7, #0]
    a7d6:	7cdb      	ldrb	r3, [r3, #19]
    a7d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a7dc:	b2db      	uxtb	r3, r3
    a7de:	2b00      	cmp	r3, #0
    a7e0:	d105      	bne.n	a7ee <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    a7e2:	7abb      	ldrb	r3, [r7, #10]
    a7e4:	4619      	mov	r1, r3
    a7e6:	6838      	ldr	r0, [r7, #0]
    a7e8:	4b0c      	ldr	r3, [pc, #48]	; (a81c <_usb_d_dev_handle_eps+0xac>)
    a7ea:	4798      	blx	r3
    a7ec:	e013      	b.n	a816 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    a7ee:	683b      	ldr	r3, [r7, #0]
    a7f0:	7cdb      	ldrb	r3, [r3, #19]
    a7f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a7f6:	b2db      	uxtb	r3, r3
    a7f8:	2b00      	cmp	r3, #0
    a7fa:	d005      	beq.n	a808 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    a7fc:	7abb      	ldrb	r3, [r7, #10]
    a7fe:	4619      	mov	r1, r3
    a800:	6838      	ldr	r0, [r7, #0]
    a802:	4b07      	ldr	r3, [pc, #28]	; (a820 <_usb_d_dev_handle_eps+0xb0>)
    a804:	4798      	blx	r3
    a806:	e006      	b.n	a816 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    a808:	7abb      	ldrb	r3, [r7, #10]
    a80a:	4619      	mov	r1, r3
    a80c:	6838      	ldr	r0, [r7, #0]
    a80e:	4b05      	ldr	r3, [pc, #20]	; (a824 <_usb_d_dev_handle_eps+0xb4>)
    a810:	4798      	blx	r3
    a812:	e000      	b.n	a816 <_usb_d_dev_handle_eps+0xa6>
		return;
    a814:	bf00      	nop
		}
	}
}
    a816:	3710      	adds	r7, #16
    a818:	46bd      	mov	sp, r7
    a81a:	bd80      	pop	{r7, pc}
    a81c:	0000a5f5 	.word	0x0000a5f5
    a820:	0000a649 	.word	0x0000a649
    a824:	0000a6dd 	.word	0x0000a6dd

0000a828 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    a828:	b580      	push	{r7, lr}
    a82a:	b084      	sub	sp, #16
    a82c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a82e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a832:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    a834:	68bb      	ldr	r3, [r7, #8]
    a836:	8c1b      	ldrh	r3, [r3, #32]
    a838:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    a83a:	88fb      	ldrh	r3, [r7, #6]
    a83c:	2b00      	cmp	r3, #0
    a83e:	d104      	bne.n	a84a <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    a840:	4b13      	ldr	r3, [pc, #76]	; (a890 <_usb_d_dev_handler+0x68>)
    a842:	4798      	blx	r3
    a844:	4603      	mov	r3, r0
    a846:	2b00      	cmp	r3, #0
    a848:	d11e      	bne.n	a888 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    a84a:	2300      	movs	r3, #0
    a84c:	73fb      	strb	r3, [r7, #15]
    a84e:	e017      	b.n	a880 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    a850:	7bfa      	ldrb	r2, [r7, #15]
    a852:	4613      	mov	r3, r2
    a854:	009b      	lsls	r3, r3, #2
    a856:	4413      	add	r3, r2
    a858:	009b      	lsls	r3, r3, #2
    a85a:	3310      	adds	r3, #16
    a85c:	4a0d      	ldr	r2, [pc, #52]	; (a894 <_usb_d_dev_handler+0x6c>)
    a85e:	4413      	add	r3, r2
    a860:	3304      	adds	r3, #4
    a862:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    a864:	683b      	ldr	r3, [r7, #0]
    a866:	7c9b      	ldrb	r3, [r3, #18]
    a868:	2bff      	cmp	r3, #255	; 0xff
    a86a:	d005      	beq.n	a878 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    a86c:	88fb      	ldrh	r3, [r7, #6]
    a86e:	6839      	ldr	r1, [r7, #0]
    a870:	4618      	mov	r0, r3
    a872:	4b09      	ldr	r3, [pc, #36]	; (a898 <_usb_d_dev_handler+0x70>)
    a874:	4798      	blx	r3
    a876:	e000      	b.n	a87a <_usb_d_dev_handler+0x52>
			continue;
    a878:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    a87a:	7bfb      	ldrb	r3, [r7, #15]
    a87c:	3301      	adds	r3, #1
    a87e:	73fb      	strb	r3, [r7, #15]
    a880:	7bfb      	ldrb	r3, [r7, #15]
    a882:	2b08      	cmp	r3, #8
    a884:	d9e4      	bls.n	a850 <_usb_d_dev_handler+0x28>
    a886:	e000      	b.n	a88a <_usb_d_dev_handler+0x62>
			return;
    a888:	bf00      	nop
	}
}
    a88a:	3710      	adds	r7, #16
    a88c:	46bd      	mov	sp, r7
    a88e:	bd80      	pop	{r7, pc}
    a890:	00009d81 	.word	0x00009d81
    a894:	20000e94 	.word	0x20000e94
    a898:	0000a771 	.word	0x0000a771

0000a89c <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    a89c:	b580      	push	{r7, lr}
    a89e:	b082      	sub	sp, #8
    a8a0:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    a8a2:	2300      	movs	r3, #0
    a8a4:	71fb      	strb	r3, [r7, #7]
    a8a6:	e023      	b.n	a8f0 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    a8a8:	79fa      	ldrb	r2, [r7, #7]
    a8aa:	4613      	mov	r3, r2
    a8ac:	009b      	lsls	r3, r3, #2
    a8ae:	4413      	add	r3, r2
    a8b0:	009b      	lsls	r3, r3, #2
    a8b2:	3310      	adds	r3, #16
    a8b4:	4a14      	ldr	r2, [pc, #80]	; (a908 <_usb_d_dev_reset_epts+0x6c>)
    a8b6:	4413      	add	r3, r2
    a8b8:	3304      	adds	r3, #4
    a8ba:	2103      	movs	r1, #3
    a8bc:	4618      	mov	r0, r3
    a8be:	4b13      	ldr	r3, [pc, #76]	; (a90c <_usb_d_dev_reset_epts+0x70>)
    a8c0:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    a8c2:	79fa      	ldrb	r2, [r7, #7]
    a8c4:	4910      	ldr	r1, [pc, #64]	; (a908 <_usb_d_dev_reset_epts+0x6c>)
    a8c6:	4613      	mov	r3, r2
    a8c8:	009b      	lsls	r3, r3, #2
    a8ca:	4413      	add	r3, r2
    a8cc:	009b      	lsls	r3, r3, #2
    a8ce:	440b      	add	r3, r1
    a8d0:	3326      	adds	r3, #38	; 0x26
    a8d2:	22ff      	movs	r2, #255	; 0xff
    a8d4:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    a8d6:	79fa      	ldrb	r2, [r7, #7]
    a8d8:	490b      	ldr	r1, [pc, #44]	; (a908 <_usb_d_dev_reset_epts+0x6c>)
    a8da:	4613      	mov	r3, r2
    a8dc:	009b      	lsls	r3, r3, #2
    a8de:	4413      	add	r3, r2
    a8e0:	009b      	lsls	r3, r3, #2
    a8e2:	440b      	add	r3, r1
    a8e4:	3327      	adds	r3, #39	; 0x27
    a8e6:	2200      	movs	r2, #0
    a8e8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    a8ea:	79fb      	ldrb	r3, [r7, #7]
    a8ec:	3301      	adds	r3, #1
    a8ee:	71fb      	strb	r3, [r7, #7]
    a8f0:	79fb      	ldrb	r3, [r7, #7]
    a8f2:	2b08      	cmp	r3, #8
    a8f4:	d9d8      	bls.n	a8a8 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    a8f6:	22a0      	movs	r2, #160	; 0xa0
    a8f8:	2100      	movs	r1, #0
    a8fa:	4805      	ldr	r0, [pc, #20]	; (a910 <_usb_d_dev_reset_epts+0x74>)
    a8fc:	4b05      	ldr	r3, [pc, #20]	; (a914 <_usb_d_dev_reset_epts+0x78>)
    a8fe:	4798      	blx	r3
}
    a900:	bf00      	nop
    a902:	3708      	adds	r7, #8
    a904:	46bd      	mov	sp, r7
    a906:	bd80      	pop	{r7, pc}
    a908:	20000e94 	.word	0x20000e94
    a90c:	0000b161 	.word	0x0000b161
    a910:	20000f5c 	.word	0x20000f5c
    a914:	00010c85 	.word	0x00010c85

0000a918 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    a918:	b580      	push	{r7, lr}
    a91a:	b084      	sub	sp, #16
    a91c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    a91e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a922:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    a924:	2301      	movs	r3, #1
    a926:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    a928:	2304      	movs	r3, #4
    a92a:	713b      	strb	r3, [r7, #4]
    a92c:	2300      	movs	r3, #0
    a92e:	717b      	strb	r3, [r7, #5]
    a930:	2300      	movs	r3, #0
    a932:	71bb      	strb	r3, [r7, #6]
    a934:	2300      	movs	r3, #0
    a936:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    a938:	2101      	movs	r1, #1
    a93a:	68f8      	ldr	r0, [r7, #12]
    a93c:	4b26      	ldr	r3, [pc, #152]	; (a9d8 <_usb_d_dev_init+0xc0>)
    a93e:	4798      	blx	r3
    a940:	4603      	mov	r3, r0
    a942:	f083 0301 	eor.w	r3, r3, #1
    a946:	b2db      	uxtb	r3, r3
    a948:	2b00      	cmp	r3, #0
    a94a:	d011      	beq.n	a970 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    a94c:	2102      	movs	r1, #2
    a94e:	68f8      	ldr	r0, [r7, #12]
    a950:	4b22      	ldr	r3, [pc, #136]	; (a9dc <_usb_d_dev_init+0xc4>)
    a952:	4798      	blx	r3
    a954:	4603      	mov	r3, r0
    a956:	2b00      	cmp	r3, #0
    a958:	d006      	beq.n	a968 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    a95a:	68f8      	ldr	r0, [r7, #12]
    a95c:	4b20      	ldr	r3, [pc, #128]	; (a9e0 <_usb_d_dev_init+0xc8>)
    a95e:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    a960:	2102      	movs	r1, #2
    a962:	68f8      	ldr	r0, [r7, #12]
    a964:	4b1f      	ldr	r3, [pc, #124]	; (a9e4 <_usb_d_dev_init+0xcc>)
    a966:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    a968:	2101      	movs	r1, #1
    a96a:	68f8      	ldr	r0, [r7, #12]
    a96c:	4b1e      	ldr	r3, [pc, #120]	; (a9e8 <_usb_d_dev_init+0xd0>)
    a96e:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    a970:	2101      	movs	r1, #1
    a972:	68f8      	ldr	r0, [r7, #12]
    a974:	4b1b      	ldr	r3, [pc, #108]	; (a9e4 <_usb_d_dev_init+0xcc>)
    a976:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    a978:	4b1c      	ldr	r3, [pc, #112]	; (a9ec <_usb_d_dev_init+0xd4>)
    a97a:	4a1d      	ldr	r2, [pc, #116]	; (a9f0 <_usb_d_dev_init+0xd8>)
    a97c:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    a97e:	4b1b      	ldr	r3, [pc, #108]	; (a9ec <_usb_d_dev_init+0xd4>)
    a980:	4a1b      	ldr	r2, [pc, #108]	; (a9f0 <_usb_d_dev_init+0xd8>)
    a982:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    a984:	4b19      	ldr	r3, [pc, #100]	; (a9ec <_usb_d_dev_init+0xd4>)
    a986:	4a1a      	ldr	r2, [pc, #104]	; (a9f0 <_usb_d_dev_init+0xd8>)
    a988:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    a98a:	4b18      	ldr	r3, [pc, #96]	; (a9ec <_usb_d_dev_init+0xd4>)
    a98c:	4a18      	ldr	r2, [pc, #96]	; (a9f0 <_usb_d_dev_init+0xd8>)
    a98e:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    a990:	4b16      	ldr	r3, [pc, #88]	; (a9ec <_usb_d_dev_init+0xd4>)
    a992:	4a17      	ldr	r2, [pc, #92]	; (a9f0 <_usb_d_dev_init+0xd8>)
    a994:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    a996:	4b17      	ldr	r3, [pc, #92]	; (a9f4 <_usb_d_dev_init+0xdc>)
    a998:	4798      	blx	r3

	_usb_load_calib();
    a99a:	4b17      	ldr	r3, [pc, #92]	; (a9f8 <_usb_d_dev_init+0xe0>)
    a99c:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    a99e:	2104      	movs	r1, #4
    a9a0:	68f8      	ldr	r0, [r7, #12]
    a9a2:	4b11      	ldr	r3, [pc, #68]	; (a9e8 <_usb_d_dev_init+0xd0>)
    a9a4:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    a9a6:	4b15      	ldr	r3, [pc, #84]	; (a9fc <_usb_d_dev_init+0xe4>)
    a9a8:	4619      	mov	r1, r3
    a9aa:	68f8      	ldr	r0, [r7, #12]
    a9ac:	4b14      	ldr	r3, [pc, #80]	; (aa00 <_usb_d_dev_init+0xe8>)
    a9ae:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    a9b0:	7afb      	ldrb	r3, [r7, #11]
    a9b2:	f107 0210 	add.w	r2, r7, #16
    a9b6:	4413      	add	r3, r2
    a9b8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    a9bc:	f043 0301 	orr.w	r3, r3, #1
    a9c0:	b2db      	uxtb	r3, r3
    a9c2:	b29b      	uxth	r3, r3
    a9c4:	4619      	mov	r1, r3
    a9c6:	68f8      	ldr	r0, [r7, #12]
    a9c8:	4b0e      	ldr	r3, [pc, #56]	; (aa04 <_usb_d_dev_init+0xec>)
    a9ca:	4798      	blx	r3

	return ERR_NONE;
    a9cc:	2300      	movs	r3, #0
}
    a9ce:	4618      	mov	r0, r3
    a9d0:	3710      	adds	r7, #16
    a9d2:	46bd      	mov	sp, r7
    a9d4:	bd80      	pop	{r7, pc}
    a9d6:	bf00      	nop
    a9d8:	00008fb1 	.word	0x00008fb1
    a9dc:	00009301 	.word	0x00009301
    a9e0:	000092d5 	.word	0x000092d5
    a9e4:	00008f87 	.word	0x00008f87
    a9e8:	00009331 	.word	0x00009331
    a9ec:	20000e94 	.word	0x20000e94
    a9f0:	000093f9 	.word	0x000093f9
    a9f4:	0000a89d 	.word	0x0000a89d
    a9f8:	00009411 	.word	0x00009411
    a9fc:	20000f5c 	.word	0x20000f5c
    aa00:	000093dd 	.word	0x000093dd
    aa04:	000093a1 	.word	0x000093a1

0000aa08 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    aa08:	b580      	push	{r7, lr}
    aa0a:	b082      	sub	sp, #8
    aa0c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    aa0e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    aa12:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    aa14:	2103      	movs	r1, #3
    aa16:	6878      	ldr	r0, [r7, #4]
    aa18:	4b17      	ldr	r3, [pc, #92]	; (aa78 <_usb_d_dev_enable+0x70>)
    aa1a:	4798      	blx	r3
    aa1c:	4603      	mov	r3, r0
    aa1e:	2b00      	cmp	r3, #0
    aa20:	d002      	beq.n	aa28 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    aa22:	f06f 0310 	mvn.w	r3, #16
    aa26:	e023      	b.n	aa70 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    aa28:	6878      	ldr	r0, [r7, #4]
    aa2a:	4b14      	ldr	r3, [pc, #80]	; (aa7c <_usb_d_dev_enable+0x74>)
    aa2c:	4798      	blx	r3
    aa2e:	4603      	mov	r3, r0
    aa30:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    aa32:	78fb      	ldrb	r3, [r7, #3]
    aa34:	f003 0302 	and.w	r3, r3, #2
    aa38:	2b00      	cmp	r3, #0
    aa3a:	d107      	bne.n	aa4c <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    aa3c:	78fb      	ldrb	r3, [r7, #3]
    aa3e:	f043 0302 	orr.w	r3, r3, #2
    aa42:	b2db      	uxtb	r3, r3
    aa44:	4619      	mov	r1, r3
    aa46:	6878      	ldr	r0, [r7, #4]
    aa48:	4b0d      	ldr	r3, [pc, #52]	; (aa80 <_usb_d_dev_enable+0x78>)
    aa4a:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    aa4c:	2050      	movs	r0, #80	; 0x50
    aa4e:	4b0d      	ldr	r3, [pc, #52]	; (aa84 <_usb_d_dev_enable+0x7c>)
    aa50:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    aa52:	2051      	movs	r0, #81	; 0x51
    aa54:	4b0b      	ldr	r3, [pc, #44]	; (aa84 <_usb_d_dev_enable+0x7c>)
    aa56:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    aa58:	2052      	movs	r0, #82	; 0x52
    aa5a:	4b0a      	ldr	r3, [pc, #40]	; (aa84 <_usb_d_dev_enable+0x7c>)
    aa5c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    aa5e:	2053      	movs	r0, #83	; 0x53
    aa60:	4b08      	ldr	r3, [pc, #32]	; (aa84 <_usb_d_dev_enable+0x7c>)
    aa62:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    aa64:	f240 218d 	movw	r1, #653	; 0x28d
    aa68:	6878      	ldr	r0, [r7, #4]
    aa6a:	4b07      	ldr	r3, [pc, #28]	; (aa88 <_usb_d_dev_enable+0x80>)
    aa6c:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    aa6e:	2300      	movs	r3, #0
}
    aa70:	4618      	mov	r0, r3
    aa72:	3708      	adds	r7, #8
    aa74:	46bd      	mov	sp, r7
    aa76:	bd80      	pop	{r7, pc}
    aa78:	000092ab 	.word	0x000092ab
    aa7c:	00009359 	.word	0x00009359
    aa80:	00009331 	.word	0x00009331
    aa84:	00008ebd 	.word	0x00008ebd
    aa88:	00009255 	.word	0x00009255

0000aa8c <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    aa8c:	b580      	push	{r7, lr}
    aa8e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    aa90:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aa94:	4b01      	ldr	r3, [pc, #4]	; (aa9c <_usb_d_dev_attach+0x10>)
    aa96:	4798      	blx	r3
}
    aa98:	bf00      	nop
    aa9a:	bd80      	pop	{r7, pc}
    aa9c:	0000937d 	.word	0x0000937d

0000aaa0 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    aaa0:	b580      	push	{r7, lr}
    aaa2:	b082      	sub	sp, #8
    aaa4:	af00      	add	r7, sp, #0
    aaa6:	4603      	mov	r3, r0
    aaa8:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    aaaa:	79fb      	ldrb	r3, [r7, #7]
    aaac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    aab0:	b2db      	uxtb	r3, r3
    aab2:	4619      	mov	r1, r3
    aab4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aab8:	4b02      	ldr	r3, [pc, #8]	; (aac4 <_usb_d_dev_set_address+0x24>)
    aaba:	4798      	blx	r3
}
    aabc:	bf00      	nop
    aabe:	3708      	adds	r7, #8
    aac0:	46bd      	mov	sp, r7
    aac2:	bd80      	pop	{r7, pc}
    aac4:	000093bf 	.word	0x000093bf

0000aac8 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    aac8:	b590      	push	{r4, r7, lr}
    aaca:	b085      	sub	sp, #20
    aacc:	af00      	add	r7, sp, #0
    aace:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    aad0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    aad4:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    aad6:	687b      	ldr	r3, [r7, #4]
    aad8:	7c9b      	ldrb	r3, [r3, #18]
    aada:	f003 030f 	and.w	r3, r3, #15
    aade:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    aae0:	687b      	ldr	r3, [r7, #4]
    aae2:	68db      	ldr	r3, [r3, #12]
    aae4:	461a      	mov	r2, r3
    aae6:	7afb      	ldrb	r3, [r7, #11]
    aae8:	2100      	movs	r1, #0
    aaea:	4618      	mov	r0, r3
    aaec:	4b0f      	ldr	r3, [pc, #60]	; (ab2c <_usb_d_dev_trans_setup+0x64>)
    aaee:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    aaf0:	687b      	ldr	r3, [r7, #4]
    aaf2:	8a1b      	ldrh	r3, [r3, #16]
    aaf4:	461a      	mov	r2, r3
    aaf6:	7af8      	ldrb	r0, [r7, #11]
    aaf8:	2300      	movs	r3, #0
    aafa:	2100      	movs	r1, #0
    aafc:	4c0c      	ldr	r4, [pc, #48]	; (ab30 <_usb_d_dev_trans_setup+0x68>)
    aafe:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    ab00:	7afb      	ldrb	r3, [r7, #11]
    ab02:	22b0      	movs	r2, #176	; 0xb0
    ab04:	4619      	mov	r1, r3
    ab06:	68f8      	ldr	r0, [r7, #12]
    ab08:	4b0a      	ldr	r3, [pc, #40]	; (ab34 <_usb_d_dev_trans_setup+0x6c>)
    ab0a:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    ab0c:	7afb      	ldrb	r3, [r7, #11]
    ab0e:	2200      	movs	r2, #0
    ab10:	2100      	movs	r1, #0
    ab12:	4618      	mov	r0, r3
    ab14:	4b08      	ldr	r3, [pc, #32]	; (ab38 <_usb_d_dev_trans_setup+0x70>)
    ab16:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    ab18:	7afb      	ldrb	r3, [r7, #11]
    ab1a:	2210      	movs	r2, #16
    ab1c:	4619      	mov	r1, r3
    ab1e:	68f8      	ldr	r0, [r7, #12]
    ab20:	4b06      	ldr	r3, [pc, #24]	; (ab3c <_usb_d_dev_trans_setup+0x74>)
    ab22:	4798      	blx	r3
}
    ab24:	bf00      	nop
    ab26:	3714      	adds	r7, #20
    ab28:	46bd      	mov	sp, r7
    ab2a:	bd90      	pop	{r4, r7, pc}
    ab2c:	0000985d 	.word	0x0000985d
    ab30:	000099e5 	.word	0x000099e5
    ab34:	000090bd 	.word	0x000090bd
    ab38:	00009ab5 	.word	0x00009ab5
    ab3c:	00009111 	.word	0x00009111

0000ab40 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    ab40:	b580      	push	{r7, lr}
    ab42:	b088      	sub	sp, #32
    ab44:	af00      	add	r7, sp, #0
    ab46:	4603      	mov	r3, r0
    ab48:	71fb      	strb	r3, [r7, #7]
    ab4a:	460b      	mov	r3, r1
    ab4c:	71bb      	strb	r3, [r7, #6]
    ab4e:	4613      	mov	r3, r2
    ab50:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    ab52:	79fb      	ldrb	r3, [r7, #7]
    ab54:	f003 030f 	and.w	r3, r3, #15
    ab58:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    ab5a:	79fb      	ldrb	r3, [r7, #7]
    ab5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ab60:	2b00      	cmp	r3, #0
    ab62:	bf14      	ite	ne
    ab64:	2301      	movne	r3, #1
    ab66:	2300      	moveq	r3, #0
    ab68:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ab6a:	7fba      	ldrb	r2, [r7, #30]
    ab6c:	7ffb      	ldrb	r3, [r7, #31]
    ab6e:	4611      	mov	r1, r2
    ab70:	4618      	mov	r0, r3
    ab72:	4b3e      	ldr	r3, [pc, #248]	; (ac6c <_usb_d_dev_ep_init+0x12c>)
    ab74:	4798      	blx	r3
    ab76:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    ab78:	79bb      	ldrb	r3, [r7, #6]
    ab7a:	f003 0303 	and.w	r3, r3, #3
    ab7e:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    ab80:	7ffa      	ldrb	r2, [r7, #31]
    ab82:	4613      	mov	r3, r2
    ab84:	005b      	lsls	r3, r3, #1
    ab86:	4413      	add	r3, r2
    ab88:	009b      	lsls	r3, r3, #2
    ab8a:	4a39      	ldr	r2, [pc, #228]	; (ac70 <_usb_d_dev_ep_init+0x130>)
    ab8c:	4413      	add	r3, r2
    ab8e:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    ab90:	7ffb      	ldrb	r3, [r7, #31]
    ab92:	2b04      	cmp	r3, #4
    ab94:	d902      	bls.n	ab9c <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    ab96:	f06f 0311 	mvn.w	r3, #17
    ab9a:	e063      	b.n	ac64 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    ab9c:	69bb      	ldr	r3, [r7, #24]
    ab9e:	7c9b      	ldrb	r3, [r3, #18]
    aba0:	2bff      	cmp	r3, #255	; 0xff
    aba2:	d002      	beq.n	abaa <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    aba4:	f06f 0313 	mvn.w	r3, #19
    aba8:	e05c      	b.n	ac64 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    abaa:	7dfb      	ldrb	r3, [r7, #23]
    abac:	2b00      	cmp	r3, #0
    abae:	d11f      	bne.n	abf0 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    abb0:	7fbb      	ldrb	r3, [r7, #30]
    abb2:	2b00      	cmp	r3, #0
    abb4:	bf14      	ite	ne
    abb6:	2301      	movne	r3, #1
    abb8:	2300      	moveq	r3, #0
    abba:	b2db      	uxtb	r3, r3
    abbc:	f083 0301 	eor.w	r3, r3, #1
    abc0:	b2db      	uxtb	r3, r3
    abc2:	f003 0301 	and.w	r3, r3, #1
    abc6:	b2da      	uxtb	r2, r3
    abc8:	7ffb      	ldrb	r3, [r7, #31]
    abca:	4611      	mov	r1, r2
    abcc:	4618      	mov	r0, r3
    abce:	4b27      	ldr	r3, [pc, #156]	; (ac6c <_usb_d_dev_ep_init+0x12c>)
    abd0:	4798      	blx	r3
    abd2:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    abd4:	68fb      	ldr	r3, [r7, #12]
    abd6:	7c9b      	ldrb	r3, [r3, #18]
    abd8:	2bff      	cmp	r3, #255	; 0xff
    abda:	d002      	beq.n	abe2 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    abdc:	f06f 0313 	mvn.w	r3, #19
    abe0:	e040      	b.n	ac64 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    abe2:	693b      	ldr	r3, [r7, #16]
    abe4:	681b      	ldr	r3, [r3, #0]
    abe6:	2b00      	cmp	r3, #0
    abe8:	d102      	bne.n	abf0 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    abea:	f06f 0312 	mvn.w	r3, #18
    abee:	e039      	b.n	ac64 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    abf0:	7fbb      	ldrb	r3, [r7, #30]
    abf2:	2b00      	cmp	r3, #0
    abf4:	d007      	beq.n	ac06 <_usb_d_dev_ep_init+0xc6>
    abf6:	693b      	ldr	r3, [r7, #16]
    abf8:	685b      	ldr	r3, [r3, #4]
    abfa:	2b00      	cmp	r3, #0
    abfc:	bf14      	ite	ne
    abfe:	2301      	movne	r3, #1
    ac00:	2300      	moveq	r3, #0
    ac02:	b2db      	uxtb	r3, r3
    ac04:	e006      	b.n	ac14 <_usb_d_dev_ep_init+0xd4>
    ac06:	693b      	ldr	r3, [r7, #16]
    ac08:	681b      	ldr	r3, [r3, #0]
    ac0a:	2b00      	cmp	r3, #0
    ac0c:	bf14      	ite	ne
    ac0e:	2301      	movne	r3, #1
    ac10:	2300      	moveq	r3, #0
    ac12:	b2db      	uxtb	r3, r3
    ac14:	2b00      	cmp	r3, #0
    ac16:	d00f      	beq.n	ac38 <_usb_d_dev_ep_init+0xf8>
    ac18:	7fbb      	ldrb	r3, [r7, #30]
    ac1a:	2b00      	cmp	r3, #0
    ac1c:	d003      	beq.n	ac26 <_usb_d_dev_ep_init+0xe6>
    ac1e:	693b      	ldr	r3, [r7, #16]
    ac20:	895b      	ldrh	r3, [r3, #10]
    ac22:	461a      	mov	r2, r3
    ac24:	e002      	b.n	ac2c <_usb_d_dev_ep_init+0xec>
    ac26:	693b      	ldr	r3, [r7, #16]
    ac28:	891b      	ldrh	r3, [r3, #8]
    ac2a:	461a      	mov	r2, r3
    ac2c:	88bb      	ldrh	r3, [r7, #4]
    ac2e:	429a      	cmp	r2, r3
    ac30:	da02      	bge.n	ac38 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    ac32:	f06f 0312 	mvn.w	r3, #18
    ac36:	e015      	b.n	ac64 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    ac38:	7fbb      	ldrb	r3, [r7, #30]
    ac3a:	2b00      	cmp	r3, #0
    ac3c:	d002      	beq.n	ac44 <_usb_d_dev_ep_init+0x104>
    ac3e:	693b      	ldr	r3, [r7, #16]
    ac40:	685b      	ldr	r3, [r3, #4]
    ac42:	e001      	b.n	ac48 <_usb_d_dev_ep_init+0x108>
    ac44:	693b      	ldr	r3, [r7, #16]
    ac46:	681b      	ldr	r3, [r3, #0]
    ac48:	69ba      	ldr	r2, [r7, #24]
    ac4a:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    ac4c:	69bb      	ldr	r3, [r7, #24]
    ac4e:	88ba      	ldrh	r2, [r7, #4]
    ac50:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    ac52:	7dfb      	ldrb	r3, [r7, #23]
    ac54:	3301      	adds	r3, #1
    ac56:	b2da      	uxtb	r2, r3
    ac58:	69bb      	ldr	r3, [r7, #24]
    ac5a:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    ac5c:	69bb      	ldr	r3, [r7, #24]
    ac5e:	79fa      	ldrb	r2, [r7, #7]
    ac60:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    ac62:	2300      	movs	r3, #0
}
    ac64:	4618      	mov	r0, r3
    ac66:	3720      	adds	r7, #32
    ac68:	46bd      	mov	sp, r7
    ac6a:	bd80      	pop	{r7, pc}
    ac6c:	00009b71 	.word	0x00009b71
    ac70:	000111b8 	.word	0x000111b8

0000ac74 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    ac74:	b580      	push	{r7, lr}
    ac76:	b086      	sub	sp, #24
    ac78:	af00      	add	r7, sp, #0
    ac7a:	4603      	mov	r3, r0
    ac7c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    ac7e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ac82:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    ac84:	79fb      	ldrb	r3, [r7, #7]
    ac86:	f003 030f 	and.w	r3, r3, #15
    ac8a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    ac8c:	79fb      	ldrb	r3, [r7, #7]
    ac8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ac92:	2b00      	cmp	r3, #0
    ac94:	bf14      	ite	ne
    ac96:	2301      	movne	r3, #1
    ac98:	2300      	moveq	r3, #0
    ac9a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ac9c:	7cba      	ldrb	r2, [r7, #18]
    ac9e:	7cfb      	ldrb	r3, [r7, #19]
    aca0:	4611      	mov	r1, r2
    aca2:	4618      	mov	r0, r3
    aca4:	4b2a      	ldr	r3, [pc, #168]	; (ad50 <_usb_d_dev_ep_deinit+0xdc>)
    aca6:	4798      	blx	r3
    aca8:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    acaa:	7cfb      	ldrb	r3, [r7, #19]
    acac:	2b04      	cmp	r3, #4
    acae:	d84a      	bhi.n	ad46 <_usb_d_dev_ep_deinit+0xd2>
    acb0:	68fb      	ldr	r3, [r7, #12]
    acb2:	7c9b      	ldrb	r3, [r3, #18]
    acb4:	2bff      	cmp	r3, #255	; 0xff
    acb6:	d046      	beq.n	ad46 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    acb8:	7cbb      	ldrb	r3, [r7, #18]
    acba:	2203      	movs	r2, #3
    acbc:	4619      	mov	r1, r3
    acbe:	68f8      	ldr	r0, [r7, #12]
    acc0:	4b24      	ldr	r3, [pc, #144]	; (ad54 <_usb_d_dev_ep_deinit+0xe0>)
    acc2:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    acc4:	68fb      	ldr	r3, [r7, #12]
    acc6:	7cdb      	ldrb	r3, [r3, #19]
    acc8:	f003 0307 	and.w	r3, r3, #7
    accc:	b2db      	uxtb	r3, r3
    acce:	2b01      	cmp	r3, #1
    acd0:	d107      	bne.n	ace2 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    acd2:	79fb      	ldrb	r3, [r7, #7]
    acd4:	697a      	ldr	r2, [r7, #20]
    acd6:	3308      	adds	r3, #8
    acd8:	015b      	lsls	r3, r3, #5
    acda:	4413      	add	r3, r2
    acdc:	2200      	movs	r2, #0
    acde:	701a      	strb	r2, [r3, #0]
    ace0:	e02a      	b.n	ad38 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    ace2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    ace6:	2b00      	cmp	r3, #0
    ace8:	da15      	bge.n	ad16 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    acea:	79fb      	ldrb	r3, [r7, #7]
    acec:	f003 030f 	and.w	r3, r3, #15
    acf0:	79fa      	ldrb	r2, [r7, #7]
    acf2:	f002 020f 	and.w	r2, r2, #15
    acf6:	6979      	ldr	r1, [r7, #20]
    acf8:	3208      	adds	r2, #8
    acfa:	0152      	lsls	r2, r2, #5
    acfc:	440a      	add	r2, r1
    acfe:	7812      	ldrb	r2, [r2, #0]
    ad00:	b2d2      	uxtb	r2, r2
    ad02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    ad06:	b2d1      	uxtb	r1, r2
    ad08:	697a      	ldr	r2, [r7, #20]
    ad0a:	3308      	adds	r3, #8
    ad0c:	015b      	lsls	r3, r3, #5
    ad0e:	4413      	add	r3, r2
    ad10:	460a      	mov	r2, r1
    ad12:	701a      	strb	r2, [r3, #0]
    ad14:	e010      	b.n	ad38 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    ad16:	79fb      	ldrb	r3, [r7, #7]
    ad18:	79fa      	ldrb	r2, [r7, #7]
    ad1a:	6979      	ldr	r1, [r7, #20]
    ad1c:	3208      	adds	r2, #8
    ad1e:	0152      	lsls	r2, r2, #5
    ad20:	440a      	add	r2, r1
    ad22:	7812      	ldrb	r2, [r2, #0]
    ad24:	b2d2      	uxtb	r2, r2
    ad26:	f022 0207 	bic.w	r2, r2, #7
    ad2a:	b2d1      	uxtb	r1, r2
    ad2c:	697a      	ldr	r2, [r7, #20]
    ad2e:	3308      	adds	r3, #8
    ad30:	015b      	lsls	r3, r3, #5
    ad32:	4413      	add	r3, r2
    ad34:	460a      	mov	r2, r1
    ad36:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    ad38:	68fb      	ldr	r3, [r7, #12]
    ad3a:	2200      	movs	r2, #0
    ad3c:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    ad3e:	68fb      	ldr	r3, [r7, #12]
    ad40:	22ff      	movs	r2, #255	; 0xff
    ad42:	749a      	strb	r2, [r3, #18]
    ad44:	e000      	b.n	ad48 <_usb_d_dev_ep_deinit+0xd4>
		return;
    ad46:	bf00      	nop
}
    ad48:	3718      	adds	r7, #24
    ad4a:	46bd      	mov	sp, r7
    ad4c:	bd80      	pop	{r7, pc}
    ad4e:	bf00      	nop
    ad50:	00009b71 	.word	0x00009b71
    ad54:	0000b1a9 	.word	0x0000b1a9

0000ad58 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    ad58:	b5b0      	push	{r4, r5, r7, lr}
    ad5a:	b088      	sub	sp, #32
    ad5c:	af00      	add	r7, sp, #0
    ad5e:	4603      	mov	r3, r0
    ad60:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    ad62:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ad66:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    ad68:	79fb      	ldrb	r3, [r7, #7]
    ad6a:	f003 030f 	and.w	r3, r3, #15
    ad6e:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    ad70:	79fb      	ldrb	r3, [r7, #7]
    ad72:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ad76:	2b00      	cmp	r3, #0
    ad78:	bf14      	ite	ne
    ad7a:	2301      	movne	r3, #1
    ad7c:	2300      	moveq	r3, #0
    ad7e:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    ad80:	7eba      	ldrb	r2, [r7, #26]
    ad82:	7efb      	ldrb	r3, [r7, #27]
    ad84:	4611      	mov	r1, r2
    ad86:	4618      	mov	r0, r3
    ad88:	4b70      	ldr	r3, [pc, #448]	; (af4c <_usb_d_dev_ep_enable+0x1f4>)
    ad8a:	4798      	blx	r3
    ad8c:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    ad8e:	7efb      	ldrb	r3, [r7, #27]
    ad90:	4619      	mov	r1, r3
    ad92:	69f8      	ldr	r0, [r7, #28]
    ad94:	4b6e      	ldr	r3, [pc, #440]	; (af50 <_usb_d_dev_ep_enable+0x1f8>)
    ad96:	4798      	blx	r3
    ad98:	4603      	mov	r3, r0
    ad9a:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    ad9c:	7efb      	ldrb	r3, [r7, #27]
    ad9e:	2b04      	cmp	r3, #4
    ada0:	d803      	bhi.n	adaa <_usb_d_dev_ep_enable+0x52>
    ada2:	697b      	ldr	r3, [r7, #20]
    ada4:	7c9b      	ldrb	r3, [r3, #18]
    ada6:	2bff      	cmp	r3, #255	; 0xff
    ada8:	d102      	bne.n	adb0 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    adaa:	f06f 0311 	mvn.w	r3, #17
    adae:	e0c8      	b.n	af42 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    adb0:	7efb      	ldrb	r3, [r7, #27]
    adb2:	015b      	lsls	r3, r3, #5
    adb4:	4a67      	ldr	r2, [pc, #412]	; (af54 <_usb_d_dev_ep_enable+0x1fc>)
    adb6:	4413      	add	r3, r2
    adb8:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    adba:	697b      	ldr	r3, [r7, #20]
    adbc:	7cdb      	ldrb	r3, [r3, #19]
    adbe:	f003 0307 	and.w	r3, r3, #7
    adc2:	b2db      	uxtb	r3, r3
    adc4:	2b01      	cmp	r3, #1
    adc6:	d14b      	bne.n	ae60 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    adc8:	7cfb      	ldrb	r3, [r7, #19]
    adca:	f003 0377 	and.w	r3, r3, #119	; 0x77
    adce:	2b00      	cmp	r3, #0
    add0:	d002      	beq.n	add8 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    add2:	f06f 0313 	mvn.w	r3, #19
    add6:	e0b4      	b.n	af42 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    add8:	7efb      	ldrb	r3, [r7, #27]
    adda:	2211      	movs	r2, #17
    addc:	4619      	mov	r1, r3
    adde:	69f8      	ldr	r0, [r7, #28]
    ade0:	4b5d      	ldr	r3, [pc, #372]	; (af58 <_usb_d_dev_ep_enable+0x200>)
    ade2:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ade4:	697b      	ldr	r3, [r7, #20]
    ade6:	8a1b      	ldrh	r3, [r3, #16]
    ade8:	039b      	lsls	r3, r3, #14
    adea:	4c5c      	ldr	r4, [pc, #368]	; (af5c <_usb_d_dev_ep_enable+0x204>)
    adec:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    adee:	697b      	ldr	r3, [r7, #20]
    adf0:	8a1b      	ldrh	r3, [r3, #16]
    adf2:	4618      	mov	r0, r3
    adf4:	4b5a      	ldr	r3, [pc, #360]	; (af60 <_usb_d_dev_ep_enable+0x208>)
    adf6:	4798      	blx	r3
    adf8:	4603      	mov	r3, r0
    adfa:	071b      	lsls	r3, r3, #28
    adfc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ae00:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ae04:	68fb      	ldr	r3, [r7, #12]
    ae06:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    ae08:	68fb      	ldr	r3, [r7, #12]
    ae0a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ae0e:	697b      	ldr	r3, [r7, #20]
    ae10:	8a1b      	ldrh	r3, [r3, #16]
    ae12:	f3c3 050d 	ubfx	r5, r3, #0, #14
    ae16:	697b      	ldr	r3, [r7, #20]
    ae18:	8a1b      	ldrh	r3, [r3, #16]
    ae1a:	4618      	mov	r0, r3
    ae1c:	4b50      	ldr	r3, [pc, #320]	; (af60 <_usb_d_dev_ep_enable+0x208>)
    ae1e:	4798      	blx	r3
    ae20:	4603      	mov	r3, r0
    ae22:	071b      	lsls	r3, r3, #28
    ae24:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ae28:	432b      	orrs	r3, r5
    ae2a:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    ae2c:	7efb      	ldrb	r3, [r7, #27]
    ae2e:	2200      	movs	r2, #0
    ae30:	2100      	movs	r1, #0
    ae32:	4618      	mov	r0, r3
    ae34:	4b4b      	ldr	r3, [pc, #300]	; (af64 <_usb_d_dev_ep_enable+0x20c>)
    ae36:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    ae38:	7efb      	ldrb	r3, [r7, #27]
    ae3a:	2200      	movs	r2, #0
    ae3c:	2101      	movs	r1, #1
    ae3e:	4618      	mov	r0, r3
    ae40:	4b49      	ldr	r3, [pc, #292]	; (af68 <_usb_d_dev_ep_enable+0x210>)
    ae42:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    ae44:	7efb      	ldrb	r3, [r7, #27]
    ae46:	2100      	movs	r1, #0
    ae48:	4618      	mov	r0, r3
    ae4a:	4b48      	ldr	r3, [pc, #288]	; (af6c <_usb_d_dev_ep_enable+0x214>)
    ae4c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    ae4e:	7efb      	ldrb	r3, [r7, #27]
    ae50:	2101      	movs	r1, #1
    ae52:	4618      	mov	r0, r3
    ae54:	4b45      	ldr	r3, [pc, #276]	; (af6c <_usb_d_dev_ep_enable+0x214>)
    ae56:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    ae58:	6978      	ldr	r0, [r7, #20]
    ae5a:	4b45      	ldr	r3, [pc, #276]	; (af70 <_usb_d_dev_ep_enable+0x218>)
    ae5c:	4798      	blx	r3
    ae5e:	e06f      	b.n	af40 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    ae60:	7ebb      	ldrb	r3, [r7, #26]
    ae62:	2b00      	cmp	r3, #0
    ae64:	d038      	beq.n	aed8 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    ae66:	7cfb      	ldrb	r3, [r7, #19]
    ae68:	f003 0370 	and.w	r3, r3, #112	; 0x70
    ae6c:	2b00      	cmp	r3, #0
    ae6e:	d002      	beq.n	ae76 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    ae70:	f06f 0313 	mvn.w	r3, #19
    ae74:	e065      	b.n	af42 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    ae76:	697b      	ldr	r3, [r7, #20]
    ae78:	7cdb      	ldrb	r3, [r3, #19]
    ae7a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ae7e:	b2db      	uxtb	r3, r3
    ae80:	011b      	lsls	r3, r3, #4
    ae82:	b2db      	uxtb	r3, r3
    ae84:	f003 0370 	and.w	r3, r3, #112	; 0x70
    ae88:	b2da      	uxtb	r2, r3
    ae8a:	7cfb      	ldrb	r3, [r7, #19]
    ae8c:	4313      	orrs	r3, r2
    ae8e:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    ae90:	7cfa      	ldrb	r2, [r7, #19]
    ae92:	7efb      	ldrb	r3, [r7, #27]
    ae94:	4619      	mov	r1, r3
    ae96:	69f8      	ldr	r0, [r7, #28]
    ae98:	4b2f      	ldr	r3, [pc, #188]	; (af58 <_usb_d_dev_ep_enable+0x200>)
    ae9a:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    ae9c:	68fb      	ldr	r3, [r7, #12]
    ae9e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    aea2:	697b      	ldr	r3, [r7, #20]
    aea4:	8a1b      	ldrh	r3, [r3, #16]
    aea6:	f3c3 050d 	ubfx	r5, r3, #0, #14
    aeaa:	697b      	ldr	r3, [r7, #20]
    aeac:	8a1b      	ldrh	r3, [r3, #16]
    aeae:	4618      	mov	r0, r3
    aeb0:	4b2b      	ldr	r3, [pc, #172]	; (af60 <_usb_d_dev_ep_enable+0x208>)
    aeb2:	4798      	blx	r3
    aeb4:	4603      	mov	r3, r0
    aeb6:	071b      	lsls	r3, r3, #28
    aeb8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    aebc:	432b      	orrs	r3, r5
    aebe:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    aec0:	7efb      	ldrb	r3, [r7, #27]
    aec2:	2200      	movs	r2, #0
    aec4:	2101      	movs	r1, #1
    aec6:	4618      	mov	r0, r3
    aec8:	4b27      	ldr	r3, [pc, #156]	; (af68 <_usb_d_dev_ep_enable+0x210>)
    aeca:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    aecc:	7efb      	ldrb	r3, [r7, #27]
    aece:	2101      	movs	r1, #1
    aed0:	4618      	mov	r0, r3
    aed2:	4b26      	ldr	r3, [pc, #152]	; (af6c <_usb_d_dev_ep_enable+0x214>)
    aed4:	4798      	blx	r3
    aed6:	e033      	b.n	af40 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    aed8:	7cfb      	ldrb	r3, [r7, #19]
    aeda:	f003 0307 	and.w	r3, r3, #7
    aede:	2b00      	cmp	r3, #0
    aee0:	d002      	beq.n	aee8 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    aee2:	f06f 0313 	mvn.w	r3, #19
    aee6:	e02c      	b.n	af42 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    aee8:	697b      	ldr	r3, [r7, #20]
    aeea:	7cdb      	ldrb	r3, [r3, #19]
    aeec:	f3c3 0302 	ubfx	r3, r3, #0, #3
    aef0:	b2db      	uxtb	r3, r3
    aef2:	461a      	mov	r2, r3
    aef4:	7cfb      	ldrb	r3, [r7, #19]
    aef6:	4313      	orrs	r3, r2
    aef8:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    aefa:	7cfa      	ldrb	r2, [r7, #19]
    aefc:	7efb      	ldrb	r3, [r7, #27]
    aefe:	4619      	mov	r1, r3
    af00:	69f8      	ldr	r0, [r7, #28]
    af02:	4b15      	ldr	r3, [pc, #84]	; (af58 <_usb_d_dev_ep_enable+0x200>)
    af04:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    af06:	697b      	ldr	r3, [r7, #20]
    af08:	8a1b      	ldrh	r3, [r3, #16]
    af0a:	039b      	lsls	r3, r3, #14
    af0c:	4c13      	ldr	r4, [pc, #76]	; (af5c <_usb_d_dev_ep_enable+0x204>)
    af0e:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    af10:	697b      	ldr	r3, [r7, #20]
    af12:	8a1b      	ldrh	r3, [r3, #16]
    af14:	4618      	mov	r0, r3
    af16:	4b12      	ldr	r3, [pc, #72]	; (af60 <_usb_d_dev_ep_enable+0x208>)
    af18:	4798      	blx	r3
    af1a:	4603      	mov	r3, r0
    af1c:	071b      	lsls	r3, r3, #28
    af1e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    af22:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    af26:	68fb      	ldr	r3, [r7, #12]
    af28:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    af2a:	7efb      	ldrb	r3, [r7, #27]
    af2c:	2200      	movs	r2, #0
    af2e:	2100      	movs	r1, #0
    af30:	4618      	mov	r0, r3
    af32:	4b0c      	ldr	r3, [pc, #48]	; (af64 <_usb_d_dev_ep_enable+0x20c>)
    af34:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    af36:	7efb      	ldrb	r3, [r7, #27]
    af38:	2100      	movs	r1, #0
    af3a:	4618      	mov	r0, r3
    af3c:	4b0b      	ldr	r3, [pc, #44]	; (af6c <_usb_d_dev_ep_enable+0x214>)
    af3e:	4798      	blx	r3
	}

	return USB_OK;
    af40:	2300      	movs	r3, #0
}
    af42:	4618      	mov	r0, r3
    af44:	3720      	adds	r7, #32
    af46:	46bd      	mov	sp, r7
    af48:	bdb0      	pop	{r4, r5, r7, pc}
    af4a:	bf00      	nop
    af4c:	00009b71 	.word	0x00009b71
    af50:	000091f7 	.word	0x000091f7
    af54:	20000f5c 	.word	0x20000f5c
    af58:	000091cd 	.word	0x000091cd
    af5c:	0fffc000 	.word	0x0fffc000
    af60:	00009b0d 	.word	0x00009b0d
    af64:	00009ab5 	.word	0x00009ab5
    af68:	00009a5d 	.word	0x00009a5d
    af6c:	00009a25 	.word	0x00009a25
    af70:	0000aac9 	.word	0x0000aac9

0000af74 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    af74:	b580      	push	{r7, lr}
    af76:	b084      	sub	sp, #16
    af78:	af00      	add	r7, sp, #0
    af7a:	6078      	str	r0, [r7, #4]
    af7c:	460b      	mov	r3, r1
    af7e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    af80:	687b      	ldr	r3, [r7, #4]
    af82:	7c9b      	ldrb	r3, [r3, #18]
    af84:	f003 030f 	and.w	r3, r3, #15
    af88:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    af8a:	78fa      	ldrb	r2, [r7, #3]
    af8c:	7bfb      	ldrb	r3, [r7, #15]
    af8e:	4611      	mov	r1, r2
    af90:	4618      	mov	r0, r3
    af92:	4b03      	ldr	r3, [pc, #12]	; (afa0 <_usb_d_dev_ep_stall_get+0x2c>)
    af94:	4798      	blx	r3
    af96:	4603      	mov	r3, r0
}
    af98:	4618      	mov	r0, r3
    af9a:	3710      	adds	r7, #16
    af9c:	46bd      	mov	sp, r7
    af9e:	bd80      	pop	{r7, pc}
    afa0:	00009665 	.word	0x00009665

0000afa4 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    afa4:	b580      	push	{r7, lr}
    afa6:	b084      	sub	sp, #16
    afa8:	af00      	add	r7, sp, #0
    afaa:	6078      	str	r0, [r7, #4]
    afac:	460b      	mov	r3, r1
    afae:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    afb0:	687b      	ldr	r3, [r7, #4]
    afb2:	7c9b      	ldrb	r3, [r3, #18]
    afb4:	f003 030f 	and.w	r3, r3, #15
    afb8:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    afba:	78f9      	ldrb	r1, [r7, #3]
    afbc:	7bfb      	ldrb	r3, [r7, #15]
    afbe:	2201      	movs	r2, #1
    afc0:	4618      	mov	r0, r3
    afc2:	4b0a      	ldr	r3, [pc, #40]	; (afec <_usb_d_dev_ep_stall_set+0x48>)
    afc4:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    afc6:	78fb      	ldrb	r3, [r7, #3]
    afc8:	2220      	movs	r2, #32
    afca:	409a      	lsls	r2, r3
    afcc:	7bfb      	ldrb	r3, [r7, #15]
    afce:	4611      	mov	r1, r2
    afd0:	4618      	mov	r0, r3
    afd2:	4b07      	ldr	r3, [pc, #28]	; (aff0 <_usb_d_dev_ep_stall_set+0x4c>)
    afd4:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    afd6:	687a      	ldr	r2, [r7, #4]
    afd8:	7cd3      	ldrb	r3, [r2, #19]
    afda:	f043 0308 	orr.w	r3, r3, #8
    afde:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    afe0:	2300      	movs	r3, #0
}
    afe2:	4618      	mov	r0, r3
    afe4:	3710      	adds	r7, #16
    afe6:	46bd      	mov	sp, r7
    afe8:	bd80      	pop	{r7, pc}
    afea:	bf00      	nop
    afec:	0000960d 	.word	0x0000960d
    aff0:	0000958d 	.word	0x0000958d

0000aff4 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    aff4:	b580      	push	{r7, lr}
    aff6:	b084      	sub	sp, #16
    aff8:	af00      	add	r7, sp, #0
    affa:	6078      	str	r0, [r7, #4]
    affc:	460b      	mov	r3, r1
    affe:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    b000:	687b      	ldr	r3, [r7, #4]
    b002:	7c9b      	ldrb	r3, [r3, #18]
    b004:	f003 030f 	and.w	r3, r3, #15
    b008:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    b00a:	78fa      	ldrb	r2, [r7, #3]
    b00c:	7bfb      	ldrb	r3, [r7, #15]
    b00e:	4611      	mov	r1, r2
    b010:	4618      	mov	r0, r3
    b012:	4b28      	ldr	r3, [pc, #160]	; (b0b4 <_usb_d_dev_ep_stall_clr+0xc0>)
    b014:	4798      	blx	r3
    b016:	4603      	mov	r3, r0
    b018:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    b01a:	7bbb      	ldrb	r3, [r7, #14]
    b01c:	f083 0301 	eor.w	r3, r3, #1
    b020:	b2db      	uxtb	r3, r3
    b022:	2b00      	cmp	r3, #0
    b024:	d001      	beq.n	b02a <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    b026:	2300      	movs	r3, #0
    b028:	e040      	b.n	b0ac <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    b02a:	78f9      	ldrb	r1, [r7, #3]
    b02c:	7bfb      	ldrb	r3, [r7, #15]
    b02e:	2200      	movs	r2, #0
    b030:	4618      	mov	r0, r3
    b032:	4b21      	ldr	r3, [pc, #132]	; (b0b8 <_usb_d_dev_ep_stall_clr+0xc4>)
    b034:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b036:	78fb      	ldrb	r3, [r7, #3]
    b038:	2220      	movs	r2, #32
    b03a:	409a      	lsls	r2, r3
    b03c:	7bfb      	ldrb	r3, [r7, #15]
    b03e:	4611      	mov	r1, r2
    b040:	4618      	mov	r0, r3
    b042:	4b1e      	ldr	r3, [pc, #120]	; (b0bc <_usb_d_dev_ep_stall_clr+0xc8>)
    b044:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    b046:	78fa      	ldrb	r2, [r7, #3]
    b048:	7bfb      	ldrb	r3, [r7, #15]
    b04a:	4611      	mov	r1, r2
    b04c:	4618      	mov	r0, r3
    b04e:	4b1c      	ldr	r3, [pc, #112]	; (b0c0 <_usb_d_dev_ep_stall_clr+0xcc>)
    b050:	4798      	blx	r3
    b052:	4603      	mov	r3, r0
    b054:	2b00      	cmp	r3, #0
    b056:	d00b      	beq.n	b070 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    b058:	78fa      	ldrb	r2, [r7, #3]
    b05a:	7bfb      	ldrb	r3, [r7, #15]
    b05c:	4611      	mov	r1, r2
    b05e:	4618      	mov	r0, r3
    b060:	4b18      	ldr	r3, [pc, #96]	; (b0c4 <_usb_d_dev_ep_stall_clr+0xd0>)
    b062:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    b064:	78f9      	ldrb	r1, [r7, #3]
    b066:	7bfb      	ldrb	r3, [r7, #15]
    b068:	2200      	movs	r2, #0
    b06a:	4618      	mov	r0, r3
    b06c:	4b16      	ldr	r3, [pc, #88]	; (b0c8 <_usb_d_dev_ep_stall_clr+0xd4>)
    b06e:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    b070:	687b      	ldr	r3, [r7, #4]
    b072:	7cdb      	ldrb	r3, [r3, #19]
    b074:	f003 0307 	and.w	r3, r3, #7
    b078:	b2db      	uxtb	r3, r3
    b07a:	2b01      	cmp	r3, #1
    b07c:	d110      	bne.n	b0a0 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    b07e:	7bfb      	ldrb	r3, [r7, #15]
    b080:	4619      	mov	r1, r3
    b082:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b086:	4b11      	ldr	r3, [pc, #68]	; (b0cc <_usb_d_dev_ep_stall_clr+0xd8>)
    b088:	4798      	blx	r3
    b08a:	4603      	mov	r3, r0
    b08c:	f003 0330 	and.w	r3, r3, #48	; 0x30
    b090:	2b00      	cmp	r3, #0
    b092:	d10a      	bne.n	b0aa <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    b094:	687a      	ldr	r2, [r7, #4]
    b096:	7cd3      	ldrb	r3, [r2, #19]
    b098:	f36f 03c3 	bfc	r3, #3, #1
    b09c:	74d3      	strb	r3, [r2, #19]
    b09e:	e004      	b.n	b0aa <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    b0a0:	687a      	ldr	r2, [r7, #4]
    b0a2:	7cd3      	ldrb	r3, [r2, #19]
    b0a4:	f36f 03c3 	bfc	r3, #3, #1
    b0a8:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    b0aa:	2300      	movs	r3, #0
}
    b0ac:	4618      	mov	r0, r3
    b0ae:	3710      	adds	r7, #16
    b0b0:	46bd      	mov	sp, r7
    b0b2:	bd80      	pop	{r7, pc}
    b0b4:	00009665 	.word	0x00009665
    b0b8:	0000960d 	.word	0x0000960d
    b0bc:	000095b5 	.word	0x000095b5
    b0c0:	000096a9 	.word	0x000096a9
    b0c4:	000096ed 	.word	0x000096ed
    b0c8:	000097d9 	.word	0x000097d9
    b0cc:	00009095 	.word	0x00009095

0000b0d0 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    b0d0:	b580      	push	{r7, lr}
    b0d2:	b086      	sub	sp, #24
    b0d4:	af00      	add	r7, sp, #0
    b0d6:	4603      	mov	r3, r0
    b0d8:	460a      	mov	r2, r1
    b0da:	71fb      	strb	r3, [r7, #7]
    b0dc:	4613      	mov	r3, r2
    b0de:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    b0e0:	79fb      	ldrb	r3, [r7, #7]
    b0e2:	f003 030f 	and.w	r3, r3, #15
    b0e6:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    b0e8:	79fb      	ldrb	r3, [r7, #7]
    b0ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b0ee:	2b00      	cmp	r3, #0
    b0f0:	bf14      	ite	ne
    b0f2:	2301      	movne	r3, #1
    b0f4:	2300      	moveq	r3, #0
    b0f6:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b0f8:	7cba      	ldrb	r2, [r7, #18]
    b0fa:	7cfb      	ldrb	r3, [r7, #19]
    b0fc:	4611      	mov	r1, r2
    b0fe:	4618      	mov	r0, r3
    b100:	4b13      	ldr	r3, [pc, #76]	; (b150 <_usb_d_dev_ep_stall+0x80>)
    b102:	4798      	blx	r3
    b104:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b106:	7cfb      	ldrb	r3, [r7, #19]
    b108:	2b04      	cmp	r3, #4
    b10a:	d902      	bls.n	b112 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    b10c:	f06f 0311 	mvn.w	r3, #17
    b110:	e01a      	b.n	b148 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    b112:	79bb      	ldrb	r3, [r7, #6]
    b114:	2b01      	cmp	r3, #1
    b116:	d106      	bne.n	b126 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    b118:	7cbb      	ldrb	r3, [r7, #18]
    b11a:	4619      	mov	r1, r3
    b11c:	68f8      	ldr	r0, [r7, #12]
    b11e:	4b0d      	ldr	r3, [pc, #52]	; (b154 <_usb_d_dev_ep_stall+0x84>)
    b120:	4798      	blx	r3
    b122:	6178      	str	r0, [r7, #20]
    b124:	e00f      	b.n	b146 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    b126:	79bb      	ldrb	r3, [r7, #6]
    b128:	2b00      	cmp	r3, #0
    b12a:	d106      	bne.n	b13a <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    b12c:	7cbb      	ldrb	r3, [r7, #18]
    b12e:	4619      	mov	r1, r3
    b130:	68f8      	ldr	r0, [r7, #12]
    b132:	4b09      	ldr	r3, [pc, #36]	; (b158 <_usb_d_dev_ep_stall+0x88>)
    b134:	4798      	blx	r3
    b136:	6178      	str	r0, [r7, #20]
    b138:	e005      	b.n	b146 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    b13a:	7cbb      	ldrb	r3, [r7, #18]
    b13c:	4619      	mov	r1, r3
    b13e:	68f8      	ldr	r0, [r7, #12]
    b140:	4b06      	ldr	r3, [pc, #24]	; (b15c <_usb_d_dev_ep_stall+0x8c>)
    b142:	4798      	blx	r3
    b144:	6178      	str	r0, [r7, #20]
	}
	return rc;
    b146:	697b      	ldr	r3, [r7, #20]
}
    b148:	4618      	mov	r0, r3
    b14a:	3718      	adds	r7, #24
    b14c:	46bd      	mov	sp, r7
    b14e:	bd80      	pop	{r7, pc}
    b150:	00009b71 	.word	0x00009b71
    b154:	0000afa5 	.word	0x0000afa5
    b158:	0000aff5 	.word	0x0000aff5
    b15c:	0000af75 	.word	0x0000af75

0000b160 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    b160:	b580      	push	{r7, lr}
    b162:	b082      	sub	sp, #8
    b164:	af00      	add	r7, sp, #0
    b166:	6078      	str	r0, [r7, #4]
    b168:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b16a:	687b      	ldr	r3, [r7, #4]
    b16c:	7c9b      	ldrb	r3, [r3, #18]
    b16e:	2bff      	cmp	r3, #255	; 0xff
    b170:	d014      	beq.n	b19c <_usb_d_dev_trans_done+0x3c>
    b172:	687b      	ldr	r3, [r7, #4]
    b174:	7cdb      	ldrb	r3, [r3, #19]
    b176:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b17a:	b2db      	uxtb	r3, r3
    b17c:	2b00      	cmp	r3, #0
    b17e:	d00d      	beq.n	b19c <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    b180:	687a      	ldr	r2, [r7, #4]
    b182:	7cd3      	ldrb	r3, [r2, #19]
    b184:	f36f 1386 	bfc	r3, #6, #1
    b188:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    b18a:	4b06      	ldr	r3, [pc, #24]	; (b1a4 <_usb_d_dev_trans_done+0x44>)
    b18c:	691b      	ldr	r3, [r3, #16]
    b18e:	687a      	ldr	r2, [r7, #4]
    b190:	7c90      	ldrb	r0, [r2, #18]
    b192:	687a      	ldr	r2, [r7, #4]
    b194:	6892      	ldr	r2, [r2, #8]
    b196:	6839      	ldr	r1, [r7, #0]
    b198:	4798      	blx	r3
    b19a:	e000      	b.n	b19e <_usb_d_dev_trans_done+0x3e>
		return;
    b19c:	bf00      	nop
}
    b19e:	3708      	adds	r7, #8
    b1a0:	46bd      	mov	sp, r7
    b1a2:	bd80      	pop	{r7, pc}
    b1a4:	20000e94 	.word	0x20000e94

0000b1a8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    b1a8:	b580      	push	{r7, lr}
    b1aa:	b086      	sub	sp, #24
    b1ac:	af00      	add	r7, sp, #0
    b1ae:	60f8      	str	r0, [r7, #12]
    b1b0:	460b      	mov	r3, r1
    b1b2:	607a      	str	r2, [r7, #4]
    b1b4:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b1b6:	68fb      	ldr	r3, [r7, #12]
    b1b8:	7c9b      	ldrb	r3, [r3, #18]
    b1ba:	f003 030f 	and.w	r3, r3, #15
    b1be:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    b1c0:	4b1f      	ldr	r3, [pc, #124]	; (b240 <_usb_d_dev_trans_stop+0x98>)
    b1c2:	881b      	ldrh	r3, [r3, #0]
    b1c4:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b1c6:	68fb      	ldr	r3, [r7, #12]
    b1c8:	7c9b      	ldrb	r3, [r3, #18]
    b1ca:	2bff      	cmp	r3, #255	; 0xff
    b1cc:	d033      	beq.n	b236 <_usb_d_dev_trans_stop+0x8e>
    b1ce:	68fb      	ldr	r3, [r7, #12]
    b1d0:	7cdb      	ldrb	r3, [r3, #19]
    b1d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b1d6:	b2db      	uxtb	r3, r3
    b1d8:	2b00      	cmp	r3, #0
    b1da:	d02c      	beq.n	b236 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    b1dc:	7afb      	ldrb	r3, [r7, #11]
    b1de:	2b00      	cmp	r3, #0
    b1e0:	d006      	beq.n	b1f0 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b1e2:	7dfb      	ldrb	r3, [r7, #23]
    b1e4:	2200      	movs	r2, #0
    b1e6:	2101      	movs	r1, #1
    b1e8:	4618      	mov	r0, r3
    b1ea:	4b16      	ldr	r3, [pc, #88]	; (b244 <_usb_d_dev_trans_stop+0x9c>)
    b1ec:	4798      	blx	r3
    b1ee:	e005      	b.n	b1fc <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b1f0:	7dfb      	ldrb	r3, [r7, #23]
    b1f2:	2200      	movs	r2, #0
    b1f4:	2100      	movs	r1, #0
    b1f6:	4618      	mov	r0, r3
    b1f8:	4b13      	ldr	r3, [pc, #76]	; (b248 <_usb_d_dev_trans_stop+0xa0>)
    b1fa:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    b1fc:	7afb      	ldrb	r3, [r7, #11]
    b1fe:	f107 0218 	add.w	r2, r7, #24
    b202:	4413      	add	r3, r2
    b204:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b208:	461a      	mov	r2, r3
    b20a:	7dfb      	ldrb	r3, [r7, #23]
    b20c:	4611      	mov	r1, r2
    b20e:	4618      	mov	r0, r3
    b210:	4b0e      	ldr	r3, [pc, #56]	; (b24c <_usb_d_dev_trans_stop+0xa4>)
    b212:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    b214:	7afb      	ldrb	r3, [r7, #11]
    b216:	f107 0218 	add.w	r2, r7, #24
    b21a:	4413      	add	r3, r2
    b21c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b220:	461a      	mov	r2, r3
    b222:	7dfb      	ldrb	r3, [r7, #23]
    b224:	4611      	mov	r1, r2
    b226:	4618      	mov	r0, r3
    b228:	4b09      	ldr	r3, [pc, #36]	; (b250 <_usb_d_dev_trans_stop+0xa8>)
    b22a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    b22c:	6879      	ldr	r1, [r7, #4]
    b22e:	68f8      	ldr	r0, [r7, #12]
    b230:	4b08      	ldr	r3, [pc, #32]	; (b254 <_usb_d_dev_trans_stop+0xac>)
    b232:	4798      	blx	r3
    b234:	e000      	b.n	b238 <_usb_d_dev_trans_stop+0x90>
		return;
    b236:	bf00      	nop
}
    b238:	3718      	adds	r7, #24
    b23a:	46bd      	mov	sp, r7
    b23c:	bd80      	pop	{r7, pc}
    b23e:	bf00      	nop
    b240:	000111f8 	.word	0x000111f8
    b244:	00009a5d 	.word	0x00009a5d
    b248:	00009ab5 	.word	0x00009ab5
    b24c:	00009565 	.word	0x00009565
    b250:	000095b5 	.word	0x000095b5
    b254:	0000b161 	.word	0x0000b161

0000b258 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    b258:	b580      	push	{r7, lr}
    b25a:	b086      	sub	sp, #24
    b25c:	af00      	add	r7, sp, #0
    b25e:	4603      	mov	r3, r0
    b260:	6039      	str	r1, [r7, #0]
    b262:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    b264:	79fb      	ldrb	r3, [r7, #7]
    b266:	f003 030f 	and.w	r3, r3, #15
    b26a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    b26c:	7dfb      	ldrb	r3, [r7, #23]
    b26e:	015b      	lsls	r3, r3, #5
    b270:	4a1e      	ldr	r2, [pc, #120]	; (b2ec <_usb_d_dev_ep_read_req+0x94>)
    b272:	4413      	add	r3, r2
    b274:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    b276:	693b      	ldr	r3, [r7, #16]
    b278:	681b      	ldr	r3, [r3, #0]
    b27a:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    b27c:	693b      	ldr	r3, [r7, #16]
    b27e:	685b      	ldr	r3, [r3, #4]
    b280:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b284:	b29b      	uxth	r3, r3
    b286:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    b288:	7dfb      	ldrb	r3, [r7, #23]
    b28a:	2b04      	cmp	r3, #4
    b28c:	d802      	bhi.n	b294 <_usb_d_dev_ep_read_req+0x3c>
    b28e:	683b      	ldr	r3, [r7, #0]
    b290:	2b00      	cmp	r3, #0
    b292:	d102      	bne.n	b29a <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    b294:	f06f 0311 	mvn.w	r3, #17
    b298:	e023      	b.n	b2e2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    b29a:	7dfb      	ldrb	r3, [r7, #23]
    b29c:	4618      	mov	r0, r3
    b29e:	4b14      	ldr	r3, [pc, #80]	; (b2f0 <_usb_d_dev_ep_read_req+0x98>)
    b2a0:	4798      	blx	r3
    b2a2:	4603      	mov	r3, r0
    b2a4:	f083 0301 	eor.w	r3, r3, #1
    b2a8:	b2db      	uxtb	r3, r3
    b2aa:	2b00      	cmp	r3, #0
    b2ac:	d002      	beq.n	b2b4 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    b2ae:	f06f 0312 	mvn.w	r3, #18
    b2b2:	e016      	b.n	b2e2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    b2b4:	7dfb      	ldrb	r3, [r7, #23]
    b2b6:	4618      	mov	r0, r3
    b2b8:	4b0e      	ldr	r3, [pc, #56]	; (b2f4 <_usb_d_dev_ep_read_req+0x9c>)
    b2ba:	4798      	blx	r3
    b2bc:	4603      	mov	r3, r0
    b2be:	f083 0301 	eor.w	r3, r3, #1
    b2c2:	b2db      	uxtb	r3, r3
    b2c4:	2b00      	cmp	r3, #0
    b2c6:	d001      	beq.n	b2cc <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    b2c8:	2300      	movs	r3, #0
    b2ca:	e00a      	b.n	b2e2 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    b2cc:	68fb      	ldr	r3, [r7, #12]
    b2ce:	2208      	movs	r2, #8
    b2d0:	4619      	mov	r1, r3
    b2d2:	6838      	ldr	r0, [r7, #0]
    b2d4:	4b08      	ldr	r3, [pc, #32]	; (b2f8 <_usb_d_dev_ep_read_req+0xa0>)
    b2d6:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    b2d8:	7dfb      	ldrb	r3, [r7, #23]
    b2da:	4618      	mov	r0, r3
    b2dc:	4b07      	ldr	r3, [pc, #28]	; (b2fc <_usb_d_dev_ep_read_req+0xa4>)
    b2de:	4798      	blx	r3

	return bytes;
    b2e0:	897b      	ldrh	r3, [r7, #10]
}
    b2e2:	4618      	mov	r0, r3
    b2e4:	3718      	adds	r7, #24
    b2e6:	46bd      	mov	sp, r7
    b2e8:	bd80      	pop	{r7, pc}
    b2ea:	bf00      	nop
    b2ec:	20000f5c 	.word	0x20000f5c
    b2f0:	000095dd 	.word	0x000095dd
    b2f4:	00009789 	.word	0x00009789
    b2f8:	00010b51 	.word	0x00010b51
    b2fc:	000097b9 	.word	0x000097b9

0000b300 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    b300:	b580      	push	{r7, lr}
    b302:	b086      	sub	sp, #24
    b304:	af00      	add	r7, sp, #0
    b306:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    b308:	687b      	ldr	r3, [r7, #4]
    b30a:	7a1b      	ldrb	r3, [r3, #8]
    b30c:	f003 030f 	and.w	r3, r3, #15
    b310:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    b312:	687b      	ldr	r3, [r7, #4]
    b314:	7a1b      	ldrb	r3, [r3, #8]
    b316:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b31a:	2b00      	cmp	r3, #0
    b31c:	bf14      	ite	ne
    b31e:	2301      	movne	r3, #1
    b320:	2300      	moveq	r3, #0
    b322:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b324:	7d7a      	ldrb	r2, [r7, #21]
    b326:	7dbb      	ldrb	r3, [r7, #22]
    b328:	4611      	mov	r1, r2
    b32a:	4618      	mov	r0, r3
    b32c:	4b5f      	ldr	r3, [pc, #380]	; (b4ac <_usb_d_dev_ep_trans+0x1ac>)
    b32e:	4798      	blx	r3
    b330:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b332:	693b      	ldr	r3, [r7, #16]
    b334:	8a1b      	ldrh	r3, [r3, #16]
    b336:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b33a:	4293      	cmp	r3, r2
    b33c:	d004      	beq.n	b348 <_usb_d_dev_ep_trans+0x48>
    b33e:	693b      	ldr	r3, [r7, #16]
    b340:	8a1b      	ldrh	r3, [r3, #16]
    b342:	3b01      	subs	r3, #1
    b344:	b29b      	uxth	r3, r3
    b346:	e001      	b.n	b34c <_usb_d_dev_ep_trans+0x4c>
    b348:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b34c:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    b34e:	687b      	ldr	r3, [r7, #4]
    b350:	685a      	ldr	r2, [r3, #4]
    b352:	89fb      	ldrh	r3, [r7, #14]
    b354:	4013      	ands	r3, r2
    b356:	2b00      	cmp	r3, #0
    b358:	bf14      	ite	ne
    b35a:	2301      	movne	r3, #1
    b35c:	2300      	moveq	r3, #0
    b35e:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    b360:	2300      	movs	r3, #0
    b362:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b364:	7dbb      	ldrb	r3, [r7, #22]
    b366:	2b04      	cmp	r3, #4
    b368:	d902      	bls.n	b370 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    b36a:	f06f 0311 	mvn.w	r3, #17
    b36e:	e098      	b.n	b4a2 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    b370:	687b      	ldr	r3, [r7, #4]
    b372:	681b      	ldr	r3, [r3, #0]
    b374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    b378:	d31a      	bcc.n	b3b0 <_usb_d_dev_ep_trans+0xb0>
    b37a:	687b      	ldr	r3, [r7, #4]
    b37c:	681b      	ldr	r3, [r3, #0]
    b37e:	461a      	mov	r2, r3
    b380:	687b      	ldr	r3, [r7, #4]
    b382:	685b      	ldr	r3, [r3, #4]
    b384:	4413      	add	r3, r2
    b386:	4a4a      	ldr	r2, [pc, #296]	; (b4b0 <_usb_d_dev_ep_trans+0x1b0>)
    b388:	4293      	cmp	r3, r2
    b38a:	d811      	bhi.n	b3b0 <_usb_d_dev_ep_trans+0xb0>
    b38c:	687b      	ldr	r3, [r7, #4]
    b38e:	681b      	ldr	r3, [r3, #0]
    b390:	f003 0303 	and.w	r3, r3, #3
    b394:	2b00      	cmp	r3, #0
    b396:	d10b      	bne.n	b3b0 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    b398:	7d7b      	ldrb	r3, [r7, #21]
    b39a:	f083 0301 	eor.w	r3, r3, #1
    b39e:	b2db      	uxtb	r3, r3
    b3a0:	2b00      	cmp	r3, #0
    b3a2:	d00e      	beq.n	b3c2 <_usb_d_dev_ep_trans+0xc2>
    b3a4:	687b      	ldr	r3, [r7, #4]
    b3a6:	685b      	ldr	r3, [r3, #4]
    b3a8:	693a      	ldr	r2, [r7, #16]
    b3aa:	8a12      	ldrh	r2, [r2, #16]
    b3ac:	4293      	cmp	r3, r2
    b3ae:	d208      	bcs.n	b3c2 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    b3b0:	693b      	ldr	r3, [r7, #16]
    b3b2:	68db      	ldr	r3, [r3, #12]
    b3b4:	2b00      	cmp	r3, #0
    b3b6:	d102      	bne.n	b3be <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    b3b8:	f06f 0312 	mvn.w	r3, #18
    b3bc:	e071      	b.n	b4a2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    b3be:	2301      	movs	r3, #1
    b3c0:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    b3c2:	7d7b      	ldrb	r3, [r7, #21]
    b3c4:	f083 0301 	eor.w	r3, r3, #1
    b3c8:	b2db      	uxtb	r3, r3
    b3ca:	2b00      	cmp	r3, #0
    b3cc:	d009      	beq.n	b3e2 <_usb_d_dev_ep_trans+0xe2>
    b3ce:	7b7b      	ldrb	r3, [r7, #13]
    b3d0:	2b00      	cmp	r3, #0
    b3d2:	d006      	beq.n	b3e2 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    b3d4:	693b      	ldr	r3, [r7, #16]
    b3d6:	68db      	ldr	r3, [r3, #12]
    b3d8:	2b00      	cmp	r3, #0
    b3da:	d102      	bne.n	b3e2 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    b3dc:	f06f 0311 	mvn.w	r3, #17
    b3e0:	e05f      	b.n	b4a2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    b3e2:	693b      	ldr	r3, [r7, #16]
    b3e4:	7cdb      	ldrb	r3, [r3, #19]
    b3e6:	f003 0308 	and.w	r3, r3, #8
    b3ea:	b2db      	uxtb	r3, r3
    b3ec:	2b00      	cmp	r3, #0
    b3ee:	d001      	beq.n	b3f4 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    b3f0:	2302      	movs	r3, #2
    b3f2:	e056      	b.n	b4a2 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    b3f4:	f107 0308 	add.w	r3, r7, #8
    b3f8:	4618      	mov	r0, r3
    b3fa:	4b2e      	ldr	r3, [pc, #184]	; (b4b4 <_usb_d_dev_ep_trans+0x1b4>)
    b3fc:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    b3fe:	693b      	ldr	r3, [r7, #16]
    b400:	7cdb      	ldrb	r3, [r3, #19]
    b402:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b406:	b2db      	uxtb	r3, r3
    b408:	2b00      	cmp	r3, #0
    b40a:	d006      	beq.n	b41a <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    b40c:	f107 0308 	add.w	r3, r7, #8
    b410:	4618      	mov	r0, r3
    b412:	4b29      	ldr	r3, [pc, #164]	; (b4b8 <_usb_d_dev_ep_trans+0x1b8>)
    b414:	4798      	blx	r3
		return USB_BUSY;
    b416:	2301      	movs	r3, #1
    b418:	e043      	b.n	b4a2 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    b41a:	693a      	ldr	r2, [r7, #16]
    b41c:	7cd3      	ldrb	r3, [r2, #19]
    b41e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b422:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    b424:	f107 0308 	add.w	r3, r7, #8
    b428:	4618      	mov	r0, r3
    b42a:	4b23      	ldr	r3, [pc, #140]	; (b4b8 <_usb_d_dev_ep_trans+0x1b8>)
    b42c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    b42e:	687b      	ldr	r3, [r7, #4]
    b430:	681a      	ldr	r2, [r3, #0]
    b432:	693b      	ldr	r3, [r7, #16]
    b434:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    b436:	687b      	ldr	r3, [r7, #4]
    b438:	685a      	ldr	r2, [r3, #4]
    b43a:	693b      	ldr	r3, [r7, #16]
    b43c:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    b43e:	693b      	ldr	r3, [r7, #16]
    b440:	2200      	movs	r2, #0
    b442:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    b444:	693a      	ldr	r2, [r7, #16]
    b446:	7cd3      	ldrb	r3, [r2, #19]
    b448:	7d79      	ldrb	r1, [r7, #21]
    b44a:	f361 13c7 	bfi	r3, r1, #7, #1
    b44e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    b450:	693a      	ldr	r2, [r7, #16]
    b452:	7cd3      	ldrb	r3, [r2, #19]
    b454:	7df9      	ldrb	r1, [r7, #23]
    b456:	f361 1345 	bfi	r3, r1, #5, #1
    b45a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    b45c:	687b      	ldr	r3, [r7, #4]
    b45e:	7a5b      	ldrb	r3, [r3, #9]
    b460:	2b00      	cmp	r3, #0
    b462:	d007      	beq.n	b474 <_usb_d_dev_ep_trans+0x174>
    b464:	7b7b      	ldrb	r3, [r7, #13]
    b466:	f083 0301 	eor.w	r3, r3, #1
    b46a:	b2db      	uxtb	r3, r3
    b46c:	2b00      	cmp	r3, #0
    b46e:	d001      	beq.n	b474 <_usb_d_dev_ep_trans+0x174>
    b470:	2301      	movs	r3, #1
    b472:	e000      	b.n	b476 <_usb_d_dev_ep_trans+0x176>
    b474:	2300      	movs	r3, #0
    b476:	b2db      	uxtb	r3, r3
    b478:	f003 0301 	and.w	r3, r3, #1
    b47c:	b2d9      	uxtb	r1, r3
    b47e:	693a      	ldr	r2, [r7, #16]
    b480:	7cd3      	ldrb	r3, [r2, #19]
    b482:	f361 1304 	bfi	r3, r1, #4, #1
    b486:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    b488:	7d7b      	ldrb	r3, [r7, #21]
    b48a:	2b00      	cmp	r3, #0
    b48c:	d004      	beq.n	b498 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    b48e:	2100      	movs	r1, #0
    b490:	6938      	ldr	r0, [r7, #16]
    b492:	4b0a      	ldr	r3, [pc, #40]	; (b4bc <_usb_d_dev_ep_trans+0x1bc>)
    b494:	4798      	blx	r3
    b496:	e003      	b.n	b4a0 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    b498:	2100      	movs	r1, #0
    b49a:	6938      	ldr	r0, [r7, #16]
    b49c:	4b08      	ldr	r3, [pc, #32]	; (b4c0 <_usb_d_dev_ep_trans+0x1c0>)
    b49e:	4798      	blx	r3
	}

	return ERR_NONE;
    b4a0:	2300      	movs	r3, #0
}
    b4a2:	4618      	mov	r0, r3
    b4a4:	3718      	adds	r7, #24
    b4a6:	46bd      	mov	sp, r7
    b4a8:	bd80      	pop	{r7, pc}
    b4aa:	bf00      	nop
    b4ac:	00009b71 	.word	0x00009b71
    b4b0:	20041fff 	.word	0x20041fff
    b4b4:	0000bccd 	.word	0x0000bccd
    b4b8:	0000bcf3 	.word	0x0000bcf3
    b4bc:	00009e39 	.word	0x00009e39
    b4c0:	0000a051 	.word	0x0000a051

0000b4c4 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    b4c4:	b580      	push	{r7, lr}
    b4c6:	b084      	sub	sp, #16
    b4c8:	af00      	add	r7, sp, #0
    b4ca:	4603      	mov	r3, r0
    b4cc:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    b4ce:	79fb      	ldrb	r3, [r7, #7]
    b4d0:	f003 030f 	and.w	r3, r3, #15
    b4d4:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    b4d6:	79fb      	ldrb	r3, [r7, #7]
    b4d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b4dc:	2b00      	cmp	r3, #0
    b4de:	bf14      	ite	ne
    b4e0:	2301      	movne	r3, #1
    b4e2:	2300      	moveq	r3, #0
    b4e4:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b4e6:	7bba      	ldrb	r2, [r7, #14]
    b4e8:	7bfb      	ldrb	r3, [r7, #15]
    b4ea:	4611      	mov	r1, r2
    b4ec:	4618      	mov	r0, r3
    b4ee:	4b08      	ldr	r3, [pc, #32]	; (b510 <_usb_d_dev_ep_abort+0x4c>)
    b4f0:	4798      	blx	r3
    b4f2:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    b4f4:	7bfb      	ldrb	r3, [r7, #15]
    b4f6:	2b04      	cmp	r3, #4
    b4f8:	d806      	bhi.n	b508 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    b4fa:	7bbb      	ldrb	r3, [r7, #14]
    b4fc:	2202      	movs	r2, #2
    b4fe:	4619      	mov	r1, r3
    b500:	68b8      	ldr	r0, [r7, #8]
    b502:	4b04      	ldr	r3, [pc, #16]	; (b514 <_usb_d_dev_ep_abort+0x50>)
    b504:	4798      	blx	r3
    b506:	e000      	b.n	b50a <_usb_d_dev_ep_abort+0x46>
		return;
    b508:	bf00      	nop
}
    b50a:	3710      	adds	r7, #16
    b50c:	46bd      	mov	sp, r7
    b50e:	bd80      	pop	{r7, pc}
    b510:	00009b71 	.word	0x00009b71
    b514:	0000b1a9 	.word	0x0000b1a9

0000b518 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    b518:	b480      	push	{r7}
    b51a:	b085      	sub	sp, #20
    b51c:	af00      	add	r7, sp, #0
    b51e:	4603      	mov	r3, r0
    b520:	6039      	str	r1, [r7, #0]
    b522:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b524:	683b      	ldr	r3, [r7, #0]
    b526:	2b00      	cmp	r3, #0
    b528:	d001      	beq.n	b52e <_usb_d_dev_register_callback+0x16>
    b52a:	683b      	ldr	r3, [r7, #0]
    b52c:	e000      	b.n	b530 <_usb_d_dev_register_callback+0x18>
    b52e:	4b0a      	ldr	r3, [pc, #40]	; (b558 <_usb_d_dev_register_callback+0x40>)
    b530:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    b532:	79fb      	ldrb	r3, [r7, #7]
    b534:	2b01      	cmp	r3, #1
    b536:	d103      	bne.n	b540 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    b538:	4a08      	ldr	r2, [pc, #32]	; (b55c <_usb_d_dev_register_callback+0x44>)
    b53a:	68fb      	ldr	r3, [r7, #12]
    b53c:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    b53e:	e005      	b.n	b54c <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    b540:	79fb      	ldrb	r3, [r7, #7]
    b542:	2b00      	cmp	r3, #0
    b544:	d102      	bne.n	b54c <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    b546:	4a05      	ldr	r2, [pc, #20]	; (b55c <_usb_d_dev_register_callback+0x44>)
    b548:	68fb      	ldr	r3, [r7, #12]
    b54a:	6013      	str	r3, [r2, #0]
}
    b54c:	bf00      	nop
    b54e:	3714      	adds	r7, #20
    b550:	46bd      	mov	sp, r7
    b552:	f85d 7b04 	ldr.w	r7, [sp], #4
    b556:	4770      	bx	lr
    b558:	000093f9 	.word	0x000093f9
    b55c:	20000e94 	.word	0x20000e94

0000b560 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    b560:	b480      	push	{r7}
    b562:	b085      	sub	sp, #20
    b564:	af00      	add	r7, sp, #0
    b566:	4603      	mov	r3, r0
    b568:	6039      	str	r1, [r7, #0]
    b56a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b56c:	683b      	ldr	r3, [r7, #0]
    b56e:	2b00      	cmp	r3, #0
    b570:	d001      	beq.n	b576 <_usb_d_dev_register_ep_callback+0x16>
    b572:	683b      	ldr	r3, [r7, #0]
    b574:	e000      	b.n	b578 <_usb_d_dev_register_ep_callback+0x18>
    b576:	4b0e      	ldr	r3, [pc, #56]	; (b5b0 <_usb_d_dev_register_ep_callback+0x50>)
    b578:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    b57a:	79fb      	ldrb	r3, [r7, #7]
    b57c:	2b00      	cmp	r3, #0
    b57e:	d103      	bne.n	b588 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    b580:	4a0c      	ldr	r2, [pc, #48]	; (b5b4 <_usb_d_dev_register_ep_callback+0x54>)
    b582:	68fb      	ldr	r3, [r7, #12]
    b584:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    b586:	e00c      	b.n	b5a2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    b588:	79fb      	ldrb	r3, [r7, #7]
    b58a:	2b01      	cmp	r3, #1
    b58c:	d103      	bne.n	b596 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    b58e:	4a09      	ldr	r2, [pc, #36]	; (b5b4 <_usb_d_dev_register_ep_callback+0x54>)
    b590:	68fb      	ldr	r3, [r7, #12]
    b592:	60d3      	str	r3, [r2, #12]
}
    b594:	e005      	b.n	b5a2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    b596:	79fb      	ldrb	r3, [r7, #7]
    b598:	2b02      	cmp	r3, #2
    b59a:	d102      	bne.n	b5a2 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    b59c:	4a05      	ldr	r2, [pc, #20]	; (b5b4 <_usb_d_dev_register_ep_callback+0x54>)
    b59e:	68fb      	ldr	r3, [r7, #12]
    b5a0:	6113      	str	r3, [r2, #16]
}
    b5a2:	bf00      	nop
    b5a4:	3714      	adds	r7, #20
    b5a6:	46bd      	mov	sp, r7
    b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5ac:	4770      	bx	lr
    b5ae:	bf00      	nop
    b5b0:	000093f9 	.word	0x000093f9
    b5b4:	20000e94 	.word	0x20000e94

0000b5b8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    b5b8:	b580      	push	{r7, lr}
    b5ba:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b5bc:	4b01      	ldr	r3, [pc, #4]	; (b5c4 <USB_0_Handler+0xc>)
    b5be:	4798      	blx	r3
}
    b5c0:	bf00      	nop
    b5c2:	bd80      	pop	{r7, pc}
    b5c4:	0000a829 	.word	0x0000a829

0000b5c8 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    b5c8:	b580      	push	{r7, lr}
    b5ca:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b5cc:	4b01      	ldr	r3, [pc, #4]	; (b5d4 <USB_1_Handler+0xc>)
    b5ce:	4798      	blx	r3
}
    b5d0:	bf00      	nop
    b5d2:	bd80      	pop	{r7, pc}
    b5d4:	0000a829 	.word	0x0000a829

0000b5d8 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    b5d8:	b580      	push	{r7, lr}
    b5da:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b5dc:	4b01      	ldr	r3, [pc, #4]	; (b5e4 <USB_2_Handler+0xc>)
    b5de:	4798      	blx	r3
}
    b5e0:	bf00      	nop
    b5e2:	bd80      	pop	{r7, pc}
    b5e4:	0000a829 	.word	0x0000a829

0000b5e8 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    b5e8:	b580      	push	{r7, lr}
    b5ea:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b5ec:	4b01      	ldr	r3, [pc, #4]	; (b5f4 <USB_3_Handler+0xc>)
    b5ee:	4798      	blx	r3
}
    b5f0:	bf00      	nop
    b5f2:	bd80      	pop	{r7, pc}
    b5f4:	0000a829 	.word	0x0000a829

0000b5f8 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    b5f8:	b480      	push	{r7}
    b5fa:	b083      	sub	sp, #12
    b5fc:	af00      	add	r7, sp, #0
    b5fe:	6078      	str	r0, [r7, #4]
    b600:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b602:	bf00      	nop
    b604:	687b      	ldr	r3, [r7, #4]
    b606:	689a      	ldr	r2, [r3, #8]
    b608:	683b      	ldr	r3, [r7, #0]
    b60a:	4013      	ands	r3, r2
    b60c:	2b00      	cmp	r3, #0
    b60e:	d1f9      	bne.n	b604 <hri_wdt_wait_for_sync+0xc>
	};
}
    b610:	bf00      	nop
    b612:	370c      	adds	r7, #12
    b614:	46bd      	mov	sp, r7
    b616:	f85d 7b04 	ldr.w	r7, [sp], #4
    b61a:	4770      	bx	lr

0000b61c <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b61c:	b580      	push	{r7, lr}
    b61e:	b084      	sub	sp, #16
    b620:	af00      	add	r7, sp, #0
    b622:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b624:	210e      	movs	r1, #14
    b626:	6878      	ldr	r0, [r7, #4]
    b628:	4b0a      	ldr	r3, [pc, #40]	; (b654 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    b62a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b62c:	687b      	ldr	r3, [r7, #4]
    b62e:	781b      	ldrb	r3, [r3, #0]
    b630:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    b632:	7bfb      	ldrb	r3, [r7, #15]
    b634:	085b      	lsrs	r3, r3, #1
    b636:	b2db      	uxtb	r3, r3
    b638:	f003 0301 	and.w	r3, r3, #1
    b63c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b63e:	7bfb      	ldrb	r3, [r7, #15]
    b640:	2b00      	cmp	r3, #0
    b642:	bf14      	ite	ne
    b644:	2301      	movne	r3, #1
    b646:	2300      	moveq	r3, #0
    b648:	b2db      	uxtb	r3, r3
}
    b64a:	4618      	mov	r0, r3
    b64c:	3710      	adds	r7, #16
    b64e:	46bd      	mov	sp, r7
    b650:	bd80      	pop	{r7, pc}
    b652:	bf00      	nop
    b654:	0000b5f9 	.word	0x0000b5f9

0000b658 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    b658:	b580      	push	{r7, lr}
    b65a:	b082      	sub	sp, #8
    b65c:	af00      	add	r7, sp, #0
    b65e:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    b660:	687b      	ldr	r3, [r7, #4]
    b662:	781b      	ldrb	r3, [r3, #0]
    b664:	b2db      	uxtb	r3, r3
    b666:	f023 0304 	bic.w	r3, r3, #4
    b66a:	b2da      	uxtb	r2, r3
    b66c:	687b      	ldr	r3, [r7, #4]
    b66e:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b670:	210e      	movs	r1, #14
    b672:	6878      	ldr	r0, [r7, #4]
    b674:	4b02      	ldr	r3, [pc, #8]	; (b680 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    b676:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    b678:	bf00      	nop
    b67a:	3708      	adds	r7, #8
    b67c:	46bd      	mov	sp, r7
    b67e:	bd80      	pop	{r7, pc}
    b680:	0000b5f9 	.word	0x0000b5f9

0000b684 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    b684:	b580      	push	{r7, lr}
    b686:	b084      	sub	sp, #16
    b688:	af00      	add	r7, sp, #0
    b68a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b68c:	210e      	movs	r1, #14
    b68e:	6878      	ldr	r0, [r7, #4]
    b690:	4b08      	ldr	r3, [pc, #32]	; (b6b4 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    b692:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b694:	687b      	ldr	r3, [r7, #4]
    b696:	781b      	ldrb	r3, [r3, #0]
    b698:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    b69a:	7bfb      	ldrb	r3, [r7, #15]
    b69c:	09db      	lsrs	r3, r3, #7
    b69e:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b6a0:	7bfb      	ldrb	r3, [r7, #15]
    b6a2:	2b00      	cmp	r3, #0
    b6a4:	bf14      	ite	ne
    b6a6:	2301      	movne	r3, #1
    b6a8:	2300      	moveq	r3, #0
    b6aa:	b2db      	uxtb	r3, r3
}
    b6ac:	4618      	mov	r0, r3
    b6ae:	3710      	adds	r7, #16
    b6b0:	46bd      	mov	sp, r7
    b6b2:	bd80      	pop	{r7, pc}
    b6b4:	0000b5f9 	.word	0x0000b5f9

0000b6b8 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    b6b8:	b480      	push	{r7}
    b6ba:	b085      	sub	sp, #20
    b6bc:	af00      	add	r7, sp, #0
    b6be:	6078      	str	r0, [r7, #4]
    b6c0:	460b      	mov	r3, r1
    b6c2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    b6c4:	687b      	ldr	r3, [r7, #4]
    b6c6:	785b      	ldrb	r3, [r3, #1]
    b6c8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    b6ca:	7bfb      	ldrb	r3, [r7, #15]
    b6cc:	f023 030f 	bic.w	r3, r3, #15
    b6d0:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    b6d2:	78fb      	ldrb	r3, [r7, #3]
    b6d4:	f003 030f 	and.w	r3, r3, #15
    b6d8:	b2da      	uxtb	r2, r3
    b6da:	7bfb      	ldrb	r3, [r7, #15]
    b6dc:	4313      	orrs	r3, r2
    b6de:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    b6e0:	687b      	ldr	r3, [r7, #4]
    b6e2:	7bfa      	ldrb	r2, [r7, #15]
    b6e4:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    b6e6:	bf00      	nop
    b6e8:	3714      	adds	r7, #20
    b6ea:	46bd      	mov	sp, r7
    b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    b6f0:	4770      	bx	lr
	...

0000b6f4 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    b6f4:	b580      	push	{r7, lr}
    b6f6:	b082      	sub	sp, #8
    b6f8:	af00      	add	r7, sp, #0
    b6fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    b6fc:	687b      	ldr	r3, [r7, #4]
    b6fe:	2b00      	cmp	r3, #0
    b700:	d005      	beq.n	b70e <_wdt_init+0x1a>
    b702:	687b      	ldr	r3, [r7, #4]
    b704:	681b      	ldr	r3, [r3, #0]
    b706:	2b00      	cmp	r3, #0
    b708:	d001      	beq.n	b70e <_wdt_init+0x1a>
    b70a:	2301      	movs	r3, #1
    b70c:	e000      	b.n	b710 <_wdt_init+0x1c>
    b70e:	2300      	movs	r3, #0
    b710:	f003 0301 	and.w	r3, r3, #1
    b714:	b2db      	uxtb	r3, r3
    b716:	2250      	movs	r2, #80	; 0x50
    b718:	4913      	ldr	r1, [pc, #76]	; (b768 <_wdt_init+0x74>)
    b71a:	4618      	mov	r0, r3
    b71c:	4b13      	ldr	r3, [pc, #76]	; (b76c <_wdt_init+0x78>)
    b71e:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    b720:	687b      	ldr	r3, [r7, #4]
    b722:	681b      	ldr	r3, [r3, #0]
    b724:	4618      	mov	r0, r3
    b726:	4b12      	ldr	r3, [pc, #72]	; (b770 <_wdt_init+0x7c>)
    b728:	4798      	blx	r3
    b72a:	4603      	mov	r3, r0
    b72c:	2b00      	cmp	r3, #0
    b72e:	d107      	bne.n	b740 <_wdt_init+0x4c>
    b730:	687b      	ldr	r3, [r7, #4]
    b732:	681b      	ldr	r3, [r3, #0]
    b734:	4618      	mov	r0, r3
    b736:	4b0f      	ldr	r3, [pc, #60]	; (b774 <_wdt_init+0x80>)
    b738:	4798      	blx	r3
    b73a:	4603      	mov	r3, r0
    b73c:	2b00      	cmp	r3, #0
    b73e:	d002      	beq.n	b746 <_wdt_init+0x52>
		return ERR_DENIED;
    b740:	f06f 0310 	mvn.w	r3, #16
    b744:	e00b      	b.n	b75e <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    b746:	687b      	ldr	r3, [r7, #4]
    b748:	681b      	ldr	r3, [r3, #0]
    b74a:	4618      	mov	r0, r3
    b74c:	4b0a      	ldr	r3, [pc, #40]	; (b778 <_wdt_init+0x84>)
    b74e:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    b750:	687b      	ldr	r3, [r7, #4]
    b752:	681b      	ldr	r3, [r3, #0]
    b754:	210b      	movs	r1, #11
    b756:	4618      	mov	r0, r3
    b758:	4b08      	ldr	r3, [pc, #32]	; (b77c <_wdt_init+0x88>)
    b75a:	4798      	blx	r3
	}

	return ERR_NONE;
    b75c:	2300      	movs	r3, #0
}
    b75e:	4618      	mov	r0, r3
    b760:	3708      	adds	r7, #8
    b762:	46bd      	mov	sp, r7
    b764:	bd80      	pop	{r7, pc}
    b766:	bf00      	nop
    b768:	000111fc 	.word	0x000111fc
    b76c:	00003cd5 	.word	0x00003cd5
    b770:	0000b685 	.word	0x0000b685
    b774:	0000b61d 	.word	0x0000b61d
    b778:	0000b659 	.word	0x0000b659
    b77c:	0000b6b9 	.word	0x0000b6b9

0000b780 <hri_port_set_DIR_reg>:
{
    b780:	b480      	push	{r7}
    b782:	b085      	sub	sp, #20
    b784:	af00      	add	r7, sp, #0
    b786:	60f8      	str	r0, [r7, #12]
    b788:	460b      	mov	r3, r1
    b78a:	607a      	str	r2, [r7, #4]
    b78c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    b78e:	7afb      	ldrb	r3, [r7, #11]
    b790:	68fa      	ldr	r2, [r7, #12]
    b792:	01db      	lsls	r3, r3, #7
    b794:	4413      	add	r3, r2
    b796:	3308      	adds	r3, #8
    b798:	687a      	ldr	r2, [r7, #4]
    b79a:	601a      	str	r2, [r3, #0]
}
    b79c:	bf00      	nop
    b79e:	3714      	adds	r7, #20
    b7a0:	46bd      	mov	sp, r7
    b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7a6:	4770      	bx	lr

0000b7a8 <hri_port_clear_DIR_reg>:
{
    b7a8:	b480      	push	{r7}
    b7aa:	b085      	sub	sp, #20
    b7ac:	af00      	add	r7, sp, #0
    b7ae:	60f8      	str	r0, [r7, #12]
    b7b0:	460b      	mov	r3, r1
    b7b2:	607a      	str	r2, [r7, #4]
    b7b4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    b7b6:	7afb      	ldrb	r3, [r7, #11]
    b7b8:	68fa      	ldr	r2, [r7, #12]
    b7ba:	01db      	lsls	r3, r3, #7
    b7bc:	4413      	add	r3, r2
    b7be:	3304      	adds	r3, #4
    b7c0:	687a      	ldr	r2, [r7, #4]
    b7c2:	601a      	str	r2, [r3, #0]
}
    b7c4:	bf00      	nop
    b7c6:	3714      	adds	r7, #20
    b7c8:	46bd      	mov	sp, r7
    b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7ce:	4770      	bx	lr

0000b7d0 <hri_port_set_OUT_reg>:
{
    b7d0:	b480      	push	{r7}
    b7d2:	b085      	sub	sp, #20
    b7d4:	af00      	add	r7, sp, #0
    b7d6:	60f8      	str	r0, [r7, #12]
    b7d8:	460b      	mov	r3, r1
    b7da:	607a      	str	r2, [r7, #4]
    b7dc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b7de:	7afb      	ldrb	r3, [r7, #11]
    b7e0:	68fa      	ldr	r2, [r7, #12]
    b7e2:	01db      	lsls	r3, r3, #7
    b7e4:	4413      	add	r3, r2
    b7e6:	3318      	adds	r3, #24
    b7e8:	687a      	ldr	r2, [r7, #4]
    b7ea:	601a      	str	r2, [r3, #0]
}
    b7ec:	bf00      	nop
    b7ee:	3714      	adds	r7, #20
    b7f0:	46bd      	mov	sp, r7
    b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7f6:	4770      	bx	lr

0000b7f8 <hri_port_clear_OUT_reg>:
{
    b7f8:	b480      	push	{r7}
    b7fa:	b085      	sub	sp, #20
    b7fc:	af00      	add	r7, sp, #0
    b7fe:	60f8      	str	r0, [r7, #12]
    b800:	460b      	mov	r3, r1
    b802:	607a      	str	r2, [r7, #4]
    b804:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b806:	7afb      	ldrb	r3, [r7, #11]
    b808:	68fa      	ldr	r2, [r7, #12]
    b80a:	01db      	lsls	r3, r3, #7
    b80c:	4413      	add	r3, r2
    b80e:	3314      	adds	r3, #20
    b810:	687a      	ldr	r2, [r7, #4]
    b812:	601a      	str	r2, [r3, #0]
}
    b814:	bf00      	nop
    b816:	3714      	adds	r7, #20
    b818:	46bd      	mov	sp, r7
    b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b81e:	4770      	bx	lr

0000b820 <hri_port_write_PMUX_PMUXE_bf>:
{
    b820:	b480      	push	{r7}
    b822:	b085      	sub	sp, #20
    b824:	af00      	add	r7, sp, #0
    b826:	6078      	str	r0, [r7, #4]
    b828:	4608      	mov	r0, r1
    b82a:	4611      	mov	r1, r2
    b82c:	461a      	mov	r2, r3
    b82e:	4603      	mov	r3, r0
    b830:	70fb      	strb	r3, [r7, #3]
    b832:	460b      	mov	r3, r1
    b834:	70bb      	strb	r3, [r7, #2]
    b836:	4613      	mov	r3, r2
    b838:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b83a:	78fa      	ldrb	r2, [r7, #3]
    b83c:	78bb      	ldrb	r3, [r7, #2]
    b83e:	6879      	ldr	r1, [r7, #4]
    b840:	01d2      	lsls	r2, r2, #7
    b842:	440a      	add	r2, r1
    b844:	4413      	add	r3, r2
    b846:	3330      	adds	r3, #48	; 0x30
    b848:	781b      	ldrb	r3, [r3, #0]
    b84a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    b84c:	7bfb      	ldrb	r3, [r7, #15]
    b84e:	f023 030f 	bic.w	r3, r3, #15
    b852:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    b854:	787b      	ldrb	r3, [r7, #1]
    b856:	f003 030f 	and.w	r3, r3, #15
    b85a:	b2da      	uxtb	r2, r3
    b85c:	7bfb      	ldrb	r3, [r7, #15]
    b85e:	4313      	orrs	r3, r2
    b860:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b862:	78fa      	ldrb	r2, [r7, #3]
    b864:	78bb      	ldrb	r3, [r7, #2]
    b866:	6879      	ldr	r1, [r7, #4]
    b868:	01d2      	lsls	r2, r2, #7
    b86a:	440a      	add	r2, r1
    b86c:	4413      	add	r3, r2
    b86e:	3330      	adds	r3, #48	; 0x30
    b870:	7bfa      	ldrb	r2, [r7, #15]
    b872:	701a      	strb	r2, [r3, #0]
}
    b874:	bf00      	nop
    b876:	3714      	adds	r7, #20
    b878:	46bd      	mov	sp, r7
    b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b87e:	4770      	bx	lr

0000b880 <hri_port_write_PMUX_PMUXO_bf>:
{
    b880:	b480      	push	{r7}
    b882:	b085      	sub	sp, #20
    b884:	af00      	add	r7, sp, #0
    b886:	6078      	str	r0, [r7, #4]
    b888:	4608      	mov	r0, r1
    b88a:	4611      	mov	r1, r2
    b88c:	461a      	mov	r2, r3
    b88e:	4603      	mov	r3, r0
    b890:	70fb      	strb	r3, [r7, #3]
    b892:	460b      	mov	r3, r1
    b894:	70bb      	strb	r3, [r7, #2]
    b896:	4613      	mov	r3, r2
    b898:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b89a:	78fa      	ldrb	r2, [r7, #3]
    b89c:	78bb      	ldrb	r3, [r7, #2]
    b89e:	6879      	ldr	r1, [r7, #4]
    b8a0:	01d2      	lsls	r2, r2, #7
    b8a2:	440a      	add	r2, r1
    b8a4:	4413      	add	r3, r2
    b8a6:	3330      	adds	r3, #48	; 0x30
    b8a8:	781b      	ldrb	r3, [r3, #0]
    b8aa:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    b8ac:	7bfb      	ldrb	r3, [r7, #15]
    b8ae:	f003 030f 	and.w	r3, r3, #15
    b8b2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    b8b4:	787b      	ldrb	r3, [r7, #1]
    b8b6:	011b      	lsls	r3, r3, #4
    b8b8:	b2da      	uxtb	r2, r3
    b8ba:	7bfb      	ldrb	r3, [r7, #15]
    b8bc:	4313      	orrs	r3, r2
    b8be:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b8c0:	78fa      	ldrb	r2, [r7, #3]
    b8c2:	78bb      	ldrb	r3, [r7, #2]
    b8c4:	6879      	ldr	r1, [r7, #4]
    b8c6:	01d2      	lsls	r2, r2, #7
    b8c8:	440a      	add	r2, r1
    b8ca:	4413      	add	r3, r2
    b8cc:	3330      	adds	r3, #48	; 0x30
    b8ce:	7bfa      	ldrb	r2, [r7, #15]
    b8d0:	701a      	strb	r2, [r3, #0]
}
    b8d2:	bf00      	nop
    b8d4:	3714      	adds	r7, #20
    b8d6:	46bd      	mov	sp, r7
    b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8dc:	4770      	bx	lr

0000b8de <hri_port_write_PINCFG_PMUXEN_bit>:
{
    b8de:	b480      	push	{r7}
    b8e0:	b085      	sub	sp, #20
    b8e2:	af00      	add	r7, sp, #0
    b8e4:	6078      	str	r0, [r7, #4]
    b8e6:	4608      	mov	r0, r1
    b8e8:	4611      	mov	r1, r2
    b8ea:	461a      	mov	r2, r3
    b8ec:	4603      	mov	r3, r0
    b8ee:	70fb      	strb	r3, [r7, #3]
    b8f0:	460b      	mov	r3, r1
    b8f2:	70bb      	strb	r3, [r7, #2]
    b8f4:	4613      	mov	r3, r2
    b8f6:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    b8f8:	78fa      	ldrb	r2, [r7, #3]
    b8fa:	78bb      	ldrb	r3, [r7, #2]
    b8fc:	6879      	ldr	r1, [r7, #4]
    b8fe:	01d2      	lsls	r2, r2, #7
    b900:	440a      	add	r2, r1
    b902:	4413      	add	r3, r2
    b904:	3340      	adds	r3, #64	; 0x40
    b906:	781b      	ldrb	r3, [r3, #0]
    b908:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    b90a:	7bfb      	ldrb	r3, [r7, #15]
    b90c:	f023 0301 	bic.w	r3, r3, #1
    b910:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    b912:	787a      	ldrb	r2, [r7, #1]
    b914:	7bfb      	ldrb	r3, [r7, #15]
    b916:	4313      	orrs	r3, r2
    b918:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    b91a:	78fa      	ldrb	r2, [r7, #3]
    b91c:	78bb      	ldrb	r3, [r7, #2]
    b91e:	6879      	ldr	r1, [r7, #4]
    b920:	01d2      	lsls	r2, r2, #7
    b922:	440a      	add	r2, r1
    b924:	4413      	add	r3, r2
    b926:	3340      	adds	r3, #64	; 0x40
    b928:	7bfa      	ldrb	r2, [r7, #15]
    b92a:	701a      	strb	r2, [r3, #0]
}
    b92c:	bf00      	nop
    b92e:	3714      	adds	r7, #20
    b930:	46bd      	mov	sp, r7
    b932:	f85d 7b04 	ldr.w	r7, [sp], #4
    b936:	4770      	bx	lr

0000b938 <hri_port_write_WRCONFIG_reg>:
{
    b938:	b480      	push	{r7}
    b93a:	b085      	sub	sp, #20
    b93c:	af00      	add	r7, sp, #0
    b93e:	60f8      	str	r0, [r7, #12]
    b940:	460b      	mov	r3, r1
    b942:	607a      	str	r2, [r7, #4]
    b944:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    b946:	7afb      	ldrb	r3, [r7, #11]
    b948:	68fa      	ldr	r2, [r7, #12]
    b94a:	01db      	lsls	r3, r3, #7
    b94c:	4413      	add	r3, r2
    b94e:	3328      	adds	r3, #40	; 0x28
    b950:	687a      	ldr	r2, [r7, #4]
    b952:	601a      	str	r2, [r3, #0]
}
    b954:	bf00      	nop
    b956:	3714      	adds	r7, #20
    b958:	46bd      	mov	sp, r7
    b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b95e:	4770      	bx	lr

0000b960 <_gpio_set_direction>:
{
    b960:	b580      	push	{r7, lr}
    b962:	b082      	sub	sp, #8
    b964:	af00      	add	r7, sp, #0
    b966:	4603      	mov	r3, r0
    b968:	6039      	str	r1, [r7, #0]
    b96a:	71fb      	strb	r3, [r7, #7]
    b96c:	4613      	mov	r3, r2
    b96e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    b970:	79bb      	ldrb	r3, [r7, #6]
    b972:	2b01      	cmp	r3, #1
    b974:	d01c      	beq.n	b9b0 <_gpio_set_direction+0x50>
    b976:	2b02      	cmp	r3, #2
    b978:	d037      	beq.n	b9ea <_gpio_set_direction+0x8a>
    b97a:	2b00      	cmp	r3, #0
    b97c:	d14e      	bne.n	ba1c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b97e:	79fb      	ldrb	r3, [r7, #7]
    b980:	683a      	ldr	r2, [r7, #0]
    b982:	4619      	mov	r1, r3
    b984:	482a      	ldr	r0, [pc, #168]	; (ba30 <_gpio_set_direction+0xd0>)
    b986:	4b2b      	ldr	r3, [pc, #172]	; (ba34 <_gpio_set_direction+0xd4>)
    b988:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b98a:	683b      	ldr	r3, [r7, #0]
    b98c:	b29b      	uxth	r3, r3
    b98e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b992:	79fb      	ldrb	r3, [r7, #7]
    b994:	4619      	mov	r1, r3
    b996:	4826      	ldr	r0, [pc, #152]	; (ba30 <_gpio_set_direction+0xd0>)
    b998:	4b27      	ldr	r3, [pc, #156]	; (ba38 <_gpio_set_direction+0xd8>)
    b99a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b99c:	683b      	ldr	r3, [r7, #0]
    b99e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b9a0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b9a4:	79fb      	ldrb	r3, [r7, #7]
    b9a6:	4619      	mov	r1, r3
    b9a8:	4821      	ldr	r0, [pc, #132]	; (ba30 <_gpio_set_direction+0xd0>)
    b9aa:	4b23      	ldr	r3, [pc, #140]	; (ba38 <_gpio_set_direction+0xd8>)
    b9ac:	4798      	blx	r3
		break;
    b9ae:	e03a      	b.n	ba26 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b9b0:	79fb      	ldrb	r3, [r7, #7]
    b9b2:	683a      	ldr	r2, [r7, #0]
    b9b4:	4619      	mov	r1, r3
    b9b6:	481e      	ldr	r0, [pc, #120]	; (ba30 <_gpio_set_direction+0xd0>)
    b9b8:	4b1e      	ldr	r3, [pc, #120]	; (ba34 <_gpio_set_direction+0xd4>)
    b9ba:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    b9bc:	683b      	ldr	r3, [r7, #0]
    b9be:	b29b      	uxth	r3, r3
    b9c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b9c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b9c8:	79f9      	ldrb	r1, [r7, #7]
    b9ca:	461a      	mov	r2, r3
    b9cc:	4818      	ldr	r0, [pc, #96]	; (ba30 <_gpio_set_direction+0xd0>)
    b9ce:	4b1a      	ldr	r3, [pc, #104]	; (ba38 <_gpio_set_direction+0xd8>)
    b9d0:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    b9d2:	683b      	ldr	r3, [r7, #0]
    b9d4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    b9d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    b9da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b9de:	79f9      	ldrb	r1, [r7, #7]
    b9e0:	461a      	mov	r2, r3
    b9e2:	4813      	ldr	r0, [pc, #76]	; (ba30 <_gpio_set_direction+0xd0>)
    b9e4:	4b14      	ldr	r3, [pc, #80]	; (ba38 <_gpio_set_direction+0xd8>)
    b9e6:	4798      	blx	r3
		break;
    b9e8:	e01d      	b.n	ba26 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    b9ea:	79fb      	ldrb	r3, [r7, #7]
    b9ec:	683a      	ldr	r2, [r7, #0]
    b9ee:	4619      	mov	r1, r3
    b9f0:	480f      	ldr	r0, [pc, #60]	; (ba30 <_gpio_set_direction+0xd0>)
    b9f2:	4b12      	ldr	r3, [pc, #72]	; (ba3c <_gpio_set_direction+0xdc>)
    b9f4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b9f6:	683b      	ldr	r3, [r7, #0]
    b9f8:	b29b      	uxth	r3, r3
    b9fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b9fe:	79fb      	ldrb	r3, [r7, #7]
    ba00:	4619      	mov	r1, r3
    ba02:	480b      	ldr	r0, [pc, #44]	; (ba30 <_gpio_set_direction+0xd0>)
    ba04:	4b0c      	ldr	r3, [pc, #48]	; (ba38 <_gpio_set_direction+0xd8>)
    ba06:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ba08:	683b      	ldr	r3, [r7, #0]
    ba0a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ba0c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ba10:	79fb      	ldrb	r3, [r7, #7]
    ba12:	4619      	mov	r1, r3
    ba14:	4806      	ldr	r0, [pc, #24]	; (ba30 <_gpio_set_direction+0xd0>)
    ba16:	4b08      	ldr	r3, [pc, #32]	; (ba38 <_gpio_set_direction+0xd8>)
    ba18:	4798      	blx	r3
		break;
    ba1a:	e004      	b.n	ba26 <_gpio_set_direction+0xc6>
		ASSERT(false);
    ba1c:	2246      	movs	r2, #70	; 0x46
    ba1e:	4908      	ldr	r1, [pc, #32]	; (ba40 <_gpio_set_direction+0xe0>)
    ba20:	2000      	movs	r0, #0
    ba22:	4b08      	ldr	r3, [pc, #32]	; (ba44 <_gpio_set_direction+0xe4>)
    ba24:	4798      	blx	r3
}
    ba26:	bf00      	nop
    ba28:	3708      	adds	r7, #8
    ba2a:	46bd      	mov	sp, r7
    ba2c:	bd80      	pop	{r7, pc}
    ba2e:	bf00      	nop
    ba30:	41008000 	.word	0x41008000
    ba34:	0000b7a9 	.word	0x0000b7a9
    ba38:	0000b939 	.word	0x0000b939
    ba3c:	0000b781 	.word	0x0000b781
    ba40:	00011214 	.word	0x00011214
    ba44:	00003cd5 	.word	0x00003cd5

0000ba48 <_gpio_set_level>:
{
    ba48:	b580      	push	{r7, lr}
    ba4a:	b082      	sub	sp, #8
    ba4c:	af00      	add	r7, sp, #0
    ba4e:	4603      	mov	r3, r0
    ba50:	6039      	str	r1, [r7, #0]
    ba52:	71fb      	strb	r3, [r7, #7]
    ba54:	4613      	mov	r3, r2
    ba56:	71bb      	strb	r3, [r7, #6]
	if (level) {
    ba58:	79bb      	ldrb	r3, [r7, #6]
    ba5a:	2b00      	cmp	r3, #0
    ba5c:	d006      	beq.n	ba6c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    ba5e:	79fb      	ldrb	r3, [r7, #7]
    ba60:	683a      	ldr	r2, [r7, #0]
    ba62:	4619      	mov	r1, r3
    ba64:	4806      	ldr	r0, [pc, #24]	; (ba80 <_gpio_set_level+0x38>)
    ba66:	4b07      	ldr	r3, [pc, #28]	; (ba84 <_gpio_set_level+0x3c>)
    ba68:	4798      	blx	r3
}
    ba6a:	e005      	b.n	ba78 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    ba6c:	79fb      	ldrb	r3, [r7, #7]
    ba6e:	683a      	ldr	r2, [r7, #0]
    ba70:	4619      	mov	r1, r3
    ba72:	4803      	ldr	r0, [pc, #12]	; (ba80 <_gpio_set_level+0x38>)
    ba74:	4b04      	ldr	r3, [pc, #16]	; (ba88 <_gpio_set_level+0x40>)
    ba76:	4798      	blx	r3
}
    ba78:	bf00      	nop
    ba7a:	3708      	adds	r7, #8
    ba7c:	46bd      	mov	sp, r7
    ba7e:	bd80      	pop	{r7, pc}
    ba80:	41008000 	.word	0x41008000
    ba84:	0000b7d1 	.word	0x0000b7d1
    ba88:	0000b7f9 	.word	0x0000b7f9

0000ba8c <_gpio_set_pin_function>:
{
    ba8c:	b590      	push	{r4, r7, lr}
    ba8e:	b085      	sub	sp, #20
    ba90:	af00      	add	r7, sp, #0
    ba92:	6078      	str	r0, [r7, #4]
    ba94:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    ba96:	687b      	ldr	r3, [r7, #4]
    ba98:	095b      	lsrs	r3, r3, #5
    ba9a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    ba9c:	687b      	ldr	r3, [r7, #4]
    ba9e:	b2db      	uxtb	r3, r3
    baa0:	f003 031f 	and.w	r3, r3, #31
    baa4:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    baa6:	683b      	ldr	r3, [r7, #0]
    baa8:	f1b3 3fff 	cmp.w	r3, #4294967295
    baac:	d106      	bne.n	babc <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    baae:	7bba      	ldrb	r2, [r7, #14]
    bab0:	7bf9      	ldrb	r1, [r7, #15]
    bab2:	2300      	movs	r3, #0
    bab4:	4812      	ldr	r0, [pc, #72]	; (bb00 <_gpio_set_pin_function+0x74>)
    bab6:	4c13      	ldr	r4, [pc, #76]	; (bb04 <_gpio_set_pin_function+0x78>)
    bab8:	47a0      	blx	r4
}
    baba:	e01d      	b.n	baf8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    babc:	7bba      	ldrb	r2, [r7, #14]
    babe:	7bf9      	ldrb	r1, [r7, #15]
    bac0:	2301      	movs	r3, #1
    bac2:	480f      	ldr	r0, [pc, #60]	; (bb00 <_gpio_set_pin_function+0x74>)
    bac4:	4c0f      	ldr	r4, [pc, #60]	; (bb04 <_gpio_set_pin_function+0x78>)
    bac6:	47a0      	blx	r4
		if (pin & 1) {
    bac8:	7bbb      	ldrb	r3, [r7, #14]
    baca:	f003 0301 	and.w	r3, r3, #1
    bace:	2b00      	cmp	r3, #0
    bad0:	d009      	beq.n	bae6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    bad2:	7bbb      	ldrb	r3, [r7, #14]
    bad4:	085b      	lsrs	r3, r3, #1
    bad6:	b2da      	uxtb	r2, r3
    bad8:	683b      	ldr	r3, [r7, #0]
    bada:	b2db      	uxtb	r3, r3
    badc:	7bf9      	ldrb	r1, [r7, #15]
    bade:	4808      	ldr	r0, [pc, #32]	; (bb00 <_gpio_set_pin_function+0x74>)
    bae0:	4c09      	ldr	r4, [pc, #36]	; (bb08 <_gpio_set_pin_function+0x7c>)
    bae2:	47a0      	blx	r4
}
    bae4:	e008      	b.n	baf8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    bae6:	7bbb      	ldrb	r3, [r7, #14]
    bae8:	085b      	lsrs	r3, r3, #1
    baea:	b2da      	uxtb	r2, r3
    baec:	683b      	ldr	r3, [r7, #0]
    baee:	b2db      	uxtb	r3, r3
    baf0:	7bf9      	ldrb	r1, [r7, #15]
    baf2:	4803      	ldr	r0, [pc, #12]	; (bb00 <_gpio_set_pin_function+0x74>)
    baf4:	4c05      	ldr	r4, [pc, #20]	; (bb0c <_gpio_set_pin_function+0x80>)
    baf6:	47a0      	blx	r4
}
    baf8:	bf00      	nop
    bafa:	3714      	adds	r7, #20
    bafc:	46bd      	mov	sp, r7
    bafe:	bd90      	pop	{r4, r7, pc}
    bb00:	41008000 	.word	0x41008000
    bb04:	0000b8df 	.word	0x0000b8df
    bb08:	0000b881 	.word	0x0000b881
    bb0c:	0000b821 	.word	0x0000b821

0000bb10 <gpio_set_pin_function>:
{
    bb10:	b580      	push	{r7, lr}
    bb12:	b082      	sub	sp, #8
    bb14:	af00      	add	r7, sp, #0
    bb16:	6078      	str	r0, [r7, #4]
    bb18:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    bb1a:	6839      	ldr	r1, [r7, #0]
    bb1c:	6878      	ldr	r0, [r7, #4]
    bb1e:	4b03      	ldr	r3, [pc, #12]	; (bb2c <gpio_set_pin_function+0x1c>)
    bb20:	4798      	blx	r3
}
    bb22:	bf00      	nop
    bb24:	3708      	adds	r7, #8
    bb26:	46bd      	mov	sp, r7
    bb28:	bd80      	pop	{r7, pc}
    bb2a:	bf00      	nop
    bb2c:	0000ba8d 	.word	0x0000ba8d

0000bb30 <gpio_set_pin_direction>:
{
    bb30:	b580      	push	{r7, lr}
    bb32:	b082      	sub	sp, #8
    bb34:	af00      	add	r7, sp, #0
    bb36:	4603      	mov	r3, r0
    bb38:	460a      	mov	r2, r1
    bb3a:	71fb      	strb	r3, [r7, #7]
    bb3c:	4613      	mov	r3, r2
    bb3e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    bb40:	79fb      	ldrb	r3, [r7, #7]
    bb42:	095b      	lsrs	r3, r3, #5
    bb44:	b2d8      	uxtb	r0, r3
    bb46:	79fb      	ldrb	r3, [r7, #7]
    bb48:	f003 031f 	and.w	r3, r3, #31
    bb4c:	2201      	movs	r2, #1
    bb4e:	fa02 f303 	lsl.w	r3, r2, r3
    bb52:	79ba      	ldrb	r2, [r7, #6]
    bb54:	4619      	mov	r1, r3
    bb56:	4b03      	ldr	r3, [pc, #12]	; (bb64 <gpio_set_pin_direction+0x34>)
    bb58:	4798      	blx	r3
}
    bb5a:	bf00      	nop
    bb5c:	3708      	adds	r7, #8
    bb5e:	46bd      	mov	sp, r7
    bb60:	bd80      	pop	{r7, pc}
    bb62:	bf00      	nop
    bb64:	0000b961 	.word	0x0000b961

0000bb68 <gpio_set_pin_level>:
{
    bb68:	b580      	push	{r7, lr}
    bb6a:	b082      	sub	sp, #8
    bb6c:	af00      	add	r7, sp, #0
    bb6e:	4603      	mov	r3, r0
    bb70:	460a      	mov	r2, r1
    bb72:	71fb      	strb	r3, [r7, #7]
    bb74:	4613      	mov	r3, r2
    bb76:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    bb78:	79fb      	ldrb	r3, [r7, #7]
    bb7a:	095b      	lsrs	r3, r3, #5
    bb7c:	b2d8      	uxtb	r0, r3
    bb7e:	79fb      	ldrb	r3, [r7, #7]
    bb80:	f003 031f 	and.w	r3, r3, #31
    bb84:	2201      	movs	r2, #1
    bb86:	fa02 f303 	lsl.w	r3, r2, r3
    bb8a:	79ba      	ldrb	r2, [r7, #6]
    bb8c:	4619      	mov	r1, r3
    bb8e:	4b03      	ldr	r3, [pc, #12]	; (bb9c <gpio_set_pin_level+0x34>)
    bb90:	4798      	blx	r3
}
    bb92:	bf00      	nop
    bb94:	3708      	adds	r7, #8
    bb96:	46bd      	mov	sp, r7
    bb98:	bd80      	pop	{r7, pc}
    bb9a:	bf00      	nop
    bb9c:	0000ba49 	.word	0x0000ba49

0000bba0 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    bba0:	b580      	push	{r7, lr}
    bba2:	b082      	sub	sp, #8
    bba4:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    bba6:	2100      	movs	r1, #0
    bba8:	2008      	movs	r0, #8
    bbaa:	4b24      	ldr	r3, [pc, #144]	; (bc3c <QSPI_N25Q256_exit_xip+0x9c>)
    bbac:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    bbae:	2100      	movs	r1, #0
    bbb0:	202b      	movs	r0, #43	; 0x2b
    bbb2:	4b22      	ldr	r3, [pc, #136]	; (bc3c <QSPI_N25Q256_exit_xip+0x9c>)
    bbb4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    bbb6:	2100      	movs	r1, #0
    bbb8:	202a      	movs	r0, #42	; 0x2a
    bbba:	4b20      	ldr	r3, [pc, #128]	; (bc3c <QSPI_N25Q256_exit_xip+0x9c>)
    bbbc:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    bbbe:	2102      	movs	r1, #2
    bbc0:	2008      	movs	r0, #8
    bbc2:	4b1f      	ldr	r3, [pc, #124]	; (bc40 <QSPI_N25Q256_exit_xip+0xa0>)
    bbc4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    bbc6:	2102      	movs	r1, #2
    bbc8:	202b      	movs	r0, #43	; 0x2b
    bbca:	4b1d      	ldr	r3, [pc, #116]	; (bc40 <QSPI_N25Q256_exit_xip+0xa0>)
    bbcc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    bbce:	2102      	movs	r1, #2
    bbd0:	202a      	movs	r0, #42	; 0x2a
    bbd2:	4b1b      	ldr	r3, [pc, #108]	; (bc40 <QSPI_N25Q256_exit_xip+0xa0>)
    bbd4:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    bbd6:	2101      	movs	r1, #1
    bbd8:	2008      	movs	r0, #8
    bbda:	4b1a      	ldr	r3, [pc, #104]	; (bc44 <QSPI_N25Q256_exit_xip+0xa4>)
    bbdc:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    bbde:	2100      	movs	r1, #0
    bbe0:	202b      	movs	r0, #43	; 0x2b
    bbe2:	4b18      	ldr	r3, [pc, #96]	; (bc44 <QSPI_N25Q256_exit_xip+0xa4>)
    bbe4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    bbe6:	2100      	movs	r1, #0
    bbe8:	202a      	movs	r0, #42	; 0x2a
    bbea:	4b16      	ldr	r3, [pc, #88]	; (bc44 <QSPI_N25Q256_exit_xip+0xa4>)
    bbec:	4798      	blx	r3

	delay_us(1);
    bbee:	2001      	movs	r0, #1
    bbf0:	4b15      	ldr	r3, [pc, #84]	; (bc48 <QSPI_N25Q256_exit_xip+0xa8>)
    bbf2:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    bbf4:	2300      	movs	r3, #0
    bbf6:	607b      	str	r3, [r7, #4]
    bbf8:	e010      	b.n	bc1c <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    bbfa:	2101      	movs	r1, #1
    bbfc:	202a      	movs	r0, #42	; 0x2a
    bbfe:	4b11      	ldr	r3, [pc, #68]	; (bc44 <QSPI_N25Q256_exit_xip+0xa4>)
    bc00:	4798      	blx	r3
		delay_us(1);
    bc02:	2001      	movs	r0, #1
    bc04:	4b10      	ldr	r3, [pc, #64]	; (bc48 <QSPI_N25Q256_exit_xip+0xa8>)
    bc06:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    bc08:	2100      	movs	r1, #0
    bc0a:	202a      	movs	r0, #42	; 0x2a
    bc0c:	4b0d      	ldr	r3, [pc, #52]	; (bc44 <QSPI_N25Q256_exit_xip+0xa4>)
    bc0e:	4798      	blx	r3
		delay_us(1);
    bc10:	2001      	movs	r0, #1
    bc12:	4b0d      	ldr	r3, [pc, #52]	; (bc48 <QSPI_N25Q256_exit_xip+0xa8>)
    bc14:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    bc16:	687b      	ldr	r3, [r7, #4]
    bc18:	3301      	adds	r3, #1
    bc1a:	607b      	str	r3, [r7, #4]
    bc1c:	687b      	ldr	r3, [r7, #4]
    bc1e:	2b06      	cmp	r3, #6
    bc20:	ddeb      	ble.n	bbfa <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    bc22:	2101      	movs	r1, #1
    bc24:	202b      	movs	r0, #43	; 0x2b
    bc26:	4b07      	ldr	r3, [pc, #28]	; (bc44 <QSPI_N25Q256_exit_xip+0xa4>)
    bc28:	4798      	blx	r3
	delay_us(1);
    bc2a:	2001      	movs	r0, #1
    bc2c:	4b06      	ldr	r3, [pc, #24]	; (bc48 <QSPI_N25Q256_exit_xip+0xa8>)
    bc2e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    bc30:	4b06      	ldr	r3, [pc, #24]	; (bc4c <QSPI_N25Q256_exit_xip+0xac>)
    bc32:	4798      	blx	r3
}
    bc34:	bf00      	nop
    bc36:	3708      	adds	r7, #8
    bc38:	46bd      	mov	sp, r7
    bc3a:	bd80      	pop	{r7, pc}
    bc3c:	0000bb11 	.word	0x0000bb11
    bc40:	0000bb31 	.word	0x0000bb31
    bc44:	0000bb69 	.word	0x0000bb69
    bc48:	000024d5 	.word	0x000024d5
    bc4c:	00001891 	.word	0x00001891

0000bc50 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    bc50:	b598      	push	{r3, r4, r7, lr}
    bc52:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    bc54:	4806      	ldr	r0, [pc, #24]	; (bc70 <spi_nor_flash_init+0x20>)
    bc56:	4b07      	ldr	r3, [pc, #28]	; (bc74 <spi_nor_flash_init+0x24>)
    bc58:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    bc5a:	2300      	movs	r3, #0
    bc5c:	4a06      	ldr	r2, [pc, #24]	; (bc78 <spi_nor_flash_init+0x28>)
    bc5e:	4904      	ldr	r1, [pc, #16]	; (bc70 <spi_nor_flash_init+0x20>)
    bc60:	4806      	ldr	r0, [pc, #24]	; (bc7c <spi_nor_flash_init+0x2c>)
    bc62:	4c07      	ldr	r4, [pc, #28]	; (bc80 <spi_nor_flash_init+0x30>)
    bc64:	47a0      	blx	r4
    bc66:	4602      	mov	r2, r0
    bc68:	4b06      	ldr	r3, [pc, #24]	; (bc84 <spi_nor_flash_init+0x34>)
    bc6a:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    bc6c:	bf00      	nop
    bc6e:	bd98      	pop	{r3, r4, r7, pc}
    bc70:	20001728 	.word	0x20001728
    bc74:	00002b7d 	.word	0x00002b7d
    bc78:	0000bba1 	.word	0x0000bba1
    bc7c:	20000ffc 	.word	0x20000ffc
    bc80:	0000c0bd 	.word	0x0000c0bd
    bc84:	20001948 	.word	0x20001948

0000bc88 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    bc88:	b580      	push	{r7, lr}
    bc8a:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    bc8c:	4805      	ldr	r0, [pc, #20]	; (bca4 <cdc_device_acm_init+0x1c>)
    bc8e:	4b06      	ldr	r3, [pc, #24]	; (bca8 <cdc_device_acm_init+0x20>)
    bc90:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    bc92:	4b06      	ldr	r3, [pc, #24]	; (bcac <cdc_device_acm_init+0x24>)
    bc94:	4798      	blx	r3

	usbdc_start(single_desc);
    bc96:	4806      	ldr	r0, [pc, #24]	; (bcb0 <cdc_device_acm_init+0x28>)
    bc98:	4b06      	ldr	r3, [pc, #24]	; (bcb4 <cdc_device_acm_init+0x2c>)
    bc9a:	4798      	blx	r3
	usbdc_attach();
    bc9c:	4b06      	ldr	r3, [pc, #24]	; (bcb8 <cdc_device_acm_init+0x30>)
    bc9e:	4798      	blx	r3
}
    bca0:	bf00      	nop
    bca2:	bd80      	pop	{r7, pc}
    bca4:	2000104c 	.word	0x2000104c
    bca8:	0000d7e5 	.word	0x0000d7e5
    bcac:	0000ca5d 	.word	0x0000ca5d
    bcb0:	200001d0 	.word	0x200001d0
    bcb4:	0000d881 	.word	0x0000d881
    bcb8:	0000d8d1 	.word	0x0000d8d1

0000bcbc <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    bcbc:	b580      	push	{r7, lr}
    bcbe:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    bcc0:	4b01      	ldr	r3, [pc, #4]	; (bcc8 <usb_init+0xc>)
    bcc2:	4798      	blx	r3
}
    bcc4:	bf00      	nop
    bcc6:	bd80      	pop	{r7, pc}
    bcc8:	0000bc89 	.word	0x0000bc89

0000bccc <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    bccc:	b480      	push	{r7}
    bcce:	b085      	sub	sp, #20
    bcd0:	af00      	add	r7, sp, #0
    bcd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    bcd4:	f3ef 8310 	mrs	r3, PRIMASK
    bcd8:	60fb      	str	r3, [r7, #12]
  return(result);
    bcda:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    bcdc:	687b      	ldr	r3, [r7, #4]
    bcde:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    bce0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    bce2:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    bce6:	bf00      	nop
    bce8:	3714      	adds	r7, #20
    bcea:	46bd      	mov	sp, r7
    bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
    bcf0:	4770      	bx	lr

0000bcf2 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    bcf2:	b480      	push	{r7}
    bcf4:	b085      	sub	sp, #20
    bcf6:	af00      	add	r7, sp, #0
    bcf8:	6078      	str	r0, [r7, #4]
    bcfa:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    bcfe:	687b      	ldr	r3, [r7, #4]
    bd00:	681b      	ldr	r3, [r3, #0]
    bd02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    bd04:	68fb      	ldr	r3, [r7, #12]
    bd06:	f383 8810 	msr	PRIMASK, r3
}
    bd0a:	bf00      	nop
    bd0c:	3714      	adds	r7, #20
    bd0e:	46bd      	mov	sp, r7
    bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd14:	4770      	bx	lr
	...

0000bd18 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    bd18:	b580      	push	{r7, lr}
    bd1a:	b08c      	sub	sp, #48	; 0x30
    bd1c:	af00      	add	r7, sp, #0
    bd1e:	6078      	str	r0, [r7, #4]
    bd20:	460b      	mov	r3, r1
    bd22:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bd24:	687b      	ldr	r3, [r7, #4]
    bd26:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bd28:	687b      	ldr	r3, [r7, #4]
    bd2a:	681b      	ldr	r3, [r3, #0]
    bd2c:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    bd2e:	f107 030c 	add.w	r3, r7, #12
    bd32:	2200      	movs	r2, #0
    bd34:	601a      	str	r2, [r3, #0]
    bd36:	605a      	str	r2, [r3, #4]
    bd38:	609a      	str	r2, [r3, #8]
    bd3a:	60da      	str	r2, [r3, #12]
    bd3c:	611a      	str	r2, [r3, #16]
    bd3e:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd42:	7b1b      	ldrb	r3, [r3, #12]
    bd44:	2b00      	cmp	r3, #0
    bd46:	d001      	beq.n	bd4c <n25q256a_xip_confirm+0x34>
    bd48:	2206      	movs	r2, #6
    bd4a:	e000      	b.n	bd4e <n25q256a_xip_confirm+0x36>
    bd4c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    bd4e:	7b3b      	ldrb	r3, [r7, #12]
    bd50:	f362 0302 	bfi	r3, r2, #0, #3
    bd54:	733b      	strb	r3, [r7, #12]
    bd56:	7b3b      	ldrb	r3, [r7, #12]
    bd58:	f043 0310 	orr.w	r3, r3, #16
    bd5c:	733b      	strb	r3, [r7, #12]
    bd5e:	7b3b      	ldrb	r3, [r7, #12]
    bd60:	f043 0320 	orr.w	r3, r3, #32
    bd64:	733b      	strb	r3, [r7, #12]
    bd66:	7b3b      	ldrb	r3, [r7, #12]
    bd68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bd6c:	733b      	strb	r3, [r7, #12]
    bd6e:	7b3b      	ldrb	r3, [r7, #12]
    bd70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bd74:	733b      	strb	r3, [r7, #12]
    bd76:	7b7b      	ldrb	r3, [r7, #13]
    bd78:	f043 0303 	orr.w	r3, r3, #3
    bd7c:	737b      	strb	r3, [r7, #13]
    bd7e:	7b7b      	ldrb	r3, [r7, #13]
    bd80:	2201      	movs	r2, #1
    bd82:	f362 1305 	bfi	r3, r2, #4, #2
    bd86:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    bd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd8a:	7b1b      	ldrb	r3, [r3, #12]
    bd8c:	2b00      	cmp	r3, #0
    bd8e:	d001      	beq.n	bd94 <n25q256a_xip_confirm+0x7c>
    bd90:	2208      	movs	r2, #8
    bd92:	e000      	b.n	bd96 <n25q256a_xip_confirm+0x7e>
    bd94:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    bd96:	7bbb      	ldrb	r3, [r7, #14]
    bd98:	f362 0304 	bfi	r3, r2, #0, #5
    bd9c:	73bb      	strb	r3, [r7, #14]
    bd9e:	230b      	movs	r3, #11
    bda0:	743b      	strb	r3, [r7, #16]
    bda2:	78fb      	ldrb	r3, [r7, #3]
    bda4:	2b00      	cmp	r3, #0
    bda6:	d001      	beq.n	bdac <n25q256a_xip_confirm+0x94>
    bda8:	2300      	movs	r3, #0
    bdaa:	e000      	b.n	bdae <n25q256a_xip_confirm+0x96>
    bdac:	23ff      	movs	r3, #255	; 0xff
    bdae:	747b      	strb	r3, [r7, #17]
    bdb0:	2301      	movs	r3, #1
    bdb2:	61bb      	str	r3, [r7, #24]
    bdb4:	f107 0327 	add.w	r3, r7, #39	; 0x27
    bdb8:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    bdba:	f107 030c 	add.w	r3, r7, #12
    bdbe:	4619      	mov	r1, r3
    bdc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bdc2:	4b07      	ldr	r3, [pc, #28]	; (bde0 <n25q256a_xip_confirm+0xc8>)
    bdc4:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    bdc6:	78fb      	ldrb	r3, [r7, #3]
    bdc8:	2b00      	cmp	r3, #0
    bdca:	d001      	beq.n	bdd0 <n25q256a_xip_confirm+0xb8>
    bdcc:	2202      	movs	r2, #2
    bdce:	e000      	b.n	bdd2 <n25q256a_xip_confirm+0xba>
    bdd0:	2201      	movs	r2, #1
    bdd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bdd4:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    bdd6:	2300      	movs	r3, #0
}
    bdd8:	4618      	mov	r0, r3
    bdda:	3730      	adds	r7, #48	; 0x30
    bddc:	46bd      	mov	sp, r7
    bdde:	bd80      	pop	{r7, pc}
    bde0:	00002bf5 	.word	0x00002bf5

0000bde4 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    bde4:	b580      	push	{r7, lr}
    bde6:	b08c      	sub	sp, #48	; 0x30
    bde8:	af00      	add	r7, sp, #0
    bdea:	6078      	str	r0, [r7, #4]
    bdec:	460b      	mov	r3, r1
    bdee:	70fb      	strb	r3, [r7, #3]
    bdf0:	4613      	mov	r3, r2
    bdf2:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    bdf4:	2300      	movs	r3, #0
    bdf6:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    bdf8:	687b      	ldr	r3, [r7, #4]
    bdfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    bdfc:	687b      	ldr	r3, [r7, #4]
    bdfe:	681b      	ldr	r3, [r3, #0]
    be00:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    be02:	f107 030c 	add.w	r3, r7, #12
    be06:	2200      	movs	r2, #0
    be08:	601a      	str	r2, [r3, #0]
    be0a:	605a      	str	r2, [r3, #4]
    be0c:	609a      	str	r2, [r3, #8]
    be0e:	60da      	str	r2, [r3, #12]
    be10:	611a      	str	r2, [r3, #16]
    be12:	615a      	str	r2, [r3, #20]
    be14:	78fb      	ldrb	r3, [r7, #3]
    be16:	f003 0307 	and.w	r3, r3, #7
    be1a:	b2da      	uxtb	r2, r3
    be1c:	7b3b      	ldrb	r3, [r7, #12]
    be1e:	f362 0302 	bfi	r3, r2, #0, #3
    be22:	733b      	strb	r3, [r7, #12]
    be24:	7b3b      	ldrb	r3, [r7, #12]
    be26:	f043 0310 	orr.w	r3, r3, #16
    be2a:	733b      	strb	r3, [r7, #12]
    be2c:	7b3b      	ldrb	r3, [r7, #12]
    be2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    be32:	733b      	strb	r3, [r7, #12]
    be34:	78bb      	ldrb	r3, [r7, #2]
    be36:	743b      	strb	r3, [r7, #16]
    be38:	2301      	movs	r3, #1
    be3a:	61bb      	str	r3, [r7, #24]
    be3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    be40:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    be42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be44:	7b5b      	ldrb	r3, [r3, #13]
    be46:	2b00      	cmp	r3, #0
    be48:	d003      	beq.n	be52 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    be4a:	2100      	movs	r1, #0
    be4c:	6878      	ldr	r0, [r7, #4]
    be4e:	4b0a      	ldr	r3, [pc, #40]	; (be78 <n25q256a_read_reg+0x94>)
    be50:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    be52:	f107 030c 	add.w	r3, r7, #12
    be56:	4619      	mov	r1, r3
    be58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    be5a:	4b08      	ldr	r3, [pc, #32]	; (be7c <n25q256a_read_reg+0x98>)
    be5c:	4798      	blx	r3
	if (n25q->xip_mode) {
    be5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be60:	7b5b      	ldrb	r3, [r3, #13]
    be62:	2b00      	cmp	r3, #0
    be64:	d003      	beq.n	be6e <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    be66:	2101      	movs	r1, #1
    be68:	6878      	ldr	r0, [r7, #4]
    be6a:	4b03      	ldr	r3, [pc, #12]	; (be78 <n25q256a_read_reg+0x94>)
    be6c:	4798      	blx	r3
	}
	return status;
    be6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    be70:	4618      	mov	r0, r3
    be72:	3730      	adds	r7, #48	; 0x30
    be74:	46bd      	mov	sp, r7
    be76:	bd80      	pop	{r7, pc}
    be78:	0000bd19 	.word	0x0000bd19
    be7c:	00002bf5 	.word	0x00002bf5

0000be80 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    be80:	b580      	push	{r7, lr}
    be82:	b08c      	sub	sp, #48	; 0x30
    be84:	af00      	add	r7, sp, #0
    be86:	60f8      	str	r0, [r7, #12]
    be88:	607b      	str	r3, [r7, #4]
    be8a:	460b      	mov	r3, r1
    be8c:	72fb      	strb	r3, [r7, #11]
    be8e:	4613      	mov	r3, r2
    be90:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    be92:	68fb      	ldr	r3, [r7, #12]
    be94:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    be96:	68fb      	ldr	r3, [r7, #12]
    be98:	681b      	ldr	r3, [r3, #0]
    be9a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    be9c:	f107 0310 	add.w	r3, r7, #16
    bea0:	2200      	movs	r2, #0
    bea2:	601a      	str	r2, [r3, #0]
    bea4:	605a      	str	r2, [r3, #4]
    bea6:	609a      	str	r2, [r3, #8]
    bea8:	60da      	str	r2, [r3, #12]
    beaa:	611a      	str	r2, [r3, #16]
    beac:	615a      	str	r2, [r3, #20]
    beae:	7afb      	ldrb	r3, [r7, #11]
    beb0:	f003 0307 	and.w	r3, r3, #7
    beb4:	b2da      	uxtb	r2, r3
    beb6:	7c3b      	ldrb	r3, [r7, #16]
    beb8:	f362 0302 	bfi	r3, r2, #0, #3
    bebc:	743b      	strb	r3, [r7, #16]
    bebe:	7c3b      	ldrb	r3, [r7, #16]
    bec0:	f043 0310 	orr.w	r3, r3, #16
    bec4:	743b      	strb	r3, [r7, #16]
    bec6:	7c3b      	ldrb	r3, [r7, #16]
    bec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    becc:	743b      	strb	r3, [r7, #16]
    bece:	7c7b      	ldrb	r3, [r7, #17]
    bed0:	2202      	movs	r2, #2
    bed2:	f362 1305 	bfi	r3, r2, #4, #2
    bed6:	747b      	strb	r3, [r7, #17]
    bed8:	7abb      	ldrb	r3, [r7, #10]
    beda:	753b      	strb	r3, [r7, #20]
    bedc:	2301      	movs	r3, #1
    bede:	61fb      	str	r3, [r7, #28]
    bee0:	1d3b      	adds	r3, r7, #4
    bee2:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    bee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bee6:	7b5b      	ldrb	r3, [r3, #13]
    bee8:	2b00      	cmp	r3, #0
    beea:	d003      	beq.n	bef4 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    beec:	2100      	movs	r1, #0
    beee:	68f8      	ldr	r0, [r7, #12]
    bef0:	4b09      	ldr	r3, [pc, #36]	; (bf18 <n25q256a_write_reg+0x98>)
    bef2:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    bef4:	f107 0310 	add.w	r3, r7, #16
    bef8:	4619      	mov	r1, r3
    befa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    befc:	4b07      	ldr	r3, [pc, #28]	; (bf1c <n25q256a_write_reg+0x9c>)
    befe:	4798      	blx	r3
	if (n25q->xip_mode) {
    bf00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bf02:	7b5b      	ldrb	r3, [r3, #13]
    bf04:	2b00      	cmp	r3, #0
    bf06:	d003      	beq.n	bf10 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    bf08:	2101      	movs	r1, #1
    bf0a:	68f8      	ldr	r0, [r7, #12]
    bf0c:	4b02      	ldr	r3, [pc, #8]	; (bf18 <n25q256a_write_reg+0x98>)
    bf0e:	4798      	blx	r3
	}
}
    bf10:	bf00      	nop
    bf12:	3730      	adds	r7, #48	; 0x30
    bf14:	46bd      	mov	sp, r7
    bf16:	bd80      	pop	{r7, pc}
    bf18:	0000bd19 	.word	0x0000bd19
    bf1c:	00002bf5 	.word	0x00002bf5

0000bf20 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    bf20:	b580      	push	{r7, lr}
    bf22:	b090      	sub	sp, #64	; 0x40
    bf24:	af00      	add	r7, sp, #0
    bf26:	6078      	str	r0, [r7, #4]
    bf28:	460b      	mov	r3, r1
    bf2a:	70fb      	strb	r3, [r7, #3]
    bf2c:	4613      	mov	r3, r2
    bf2e:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bf30:	687b      	ldr	r3, [r7, #4]
    bf32:	681b      	ldr	r3, [r3, #0]
    bf34:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    bf36:	78bb      	ldrb	r3, [r7, #2]
    bf38:	2b00      	cmp	r3, #0
    bf3a:	d001      	beq.n	bf40 <n25q256a_write_enable+0x20>
    bf3c:	2306      	movs	r3, #6
    bf3e:	e000      	b.n	bf42 <n25q256a_write_enable+0x22>
    bf40:	2304      	movs	r3, #4
    bf42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    bf46:	f107 0320 	add.w	r3, r7, #32
    bf4a:	2200      	movs	r2, #0
    bf4c:	601a      	str	r2, [r3, #0]
    bf4e:	605a      	str	r2, [r3, #4]
    bf50:	609a      	str	r2, [r3, #8]
    bf52:	60da      	str	r2, [r3, #12]
    bf54:	611a      	str	r2, [r3, #16]
    bf56:	615a      	str	r2, [r3, #20]
    bf58:	78fb      	ldrb	r3, [r7, #3]
    bf5a:	f003 0307 	and.w	r3, r3, #7
    bf5e:	b2da      	uxtb	r2, r3
    bf60:	f897 3020 	ldrb.w	r3, [r7, #32]
    bf64:	f362 0302 	bfi	r3, r2, #0, #3
    bf68:	f887 3020 	strb.w	r3, [r7, #32]
    bf6c:	f897 3020 	ldrb.w	r3, [r7, #32]
    bf70:	f043 0310 	orr.w	r3, r3, #16
    bf74:	f887 3020 	strb.w	r3, [r7, #32]
    bf78:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    bf7c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    bf80:	f107 0308 	add.w	r3, r7, #8
    bf84:	2200      	movs	r2, #0
    bf86:	601a      	str	r2, [r3, #0]
    bf88:	605a      	str	r2, [r3, #4]
    bf8a:	609a      	str	r2, [r3, #8]
    bf8c:	60da      	str	r2, [r3, #12]
    bf8e:	611a      	str	r2, [r3, #16]
    bf90:	615a      	str	r2, [r3, #20]
    bf92:	78fb      	ldrb	r3, [r7, #3]
    bf94:	f003 0307 	and.w	r3, r3, #7
    bf98:	b2da      	uxtb	r2, r3
    bf9a:	7a3b      	ldrb	r3, [r7, #8]
    bf9c:	f362 0302 	bfi	r3, r2, #0, #3
    bfa0:	723b      	strb	r3, [r7, #8]
    bfa2:	7a3b      	ldrb	r3, [r7, #8]
    bfa4:	f043 0310 	orr.w	r3, r3, #16
    bfa8:	723b      	strb	r3, [r7, #8]
    bfaa:	7a3b      	ldrb	r3, [r7, #8]
    bfac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bfb0:	723b      	strb	r3, [r7, #8]
    bfb2:	2305      	movs	r3, #5
    bfb4:	733b      	strb	r3, [r7, #12]
    bfb6:	2301      	movs	r3, #1
    bfb8:	617b      	str	r3, [r7, #20]
    bfba:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    bfbe:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    bfc0:	f107 0320 	add.w	r3, r7, #32
    bfc4:	4619      	mov	r1, r3
    bfc6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    bfc8:	4b08      	ldr	r3, [pc, #32]	; (bfec <n25q256a_write_enable+0xcc>)
    bfca:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    bfcc:	f107 0308 	add.w	r3, r7, #8
    bfd0:	4619      	mov	r1, r3
    bfd2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    bfd4:	4b05      	ldr	r3, [pc, #20]	; (bfec <n25q256a_write_enable+0xcc>)
    bfd6:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    bfd8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    bfdc:	f003 0302 	and.w	r3, r3, #2
    bfe0:	2b00      	cmp	r3, #0
    bfe2:	d0ed      	beq.n	bfc0 <n25q256a_write_enable+0xa0>
}
    bfe4:	bf00      	nop
    bfe6:	3740      	adds	r7, #64	; 0x40
    bfe8:	46bd      	mov	sp, r7
    bfea:	bd80      	pop	{r7, pc}
    bfec:	00002bf5 	.word	0x00002bf5

0000bff0 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    bff0:	b590      	push	{r4, r7, lr}
    bff2:	b087      	sub	sp, #28
    bff4:	af00      	add	r7, sp, #0
    bff6:	6078      	str	r0, [r7, #4]
    bff8:	460b      	mov	r3, r1
    bffa:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    bffc:	687b      	ldr	r3, [r7, #4]
    bffe:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c000:	68fb      	ldr	r3, [r7, #12]
    c002:	7b1b      	ldrb	r3, [r3, #12]
    c004:	2b00      	cmp	r3, #0
    c006:	d001      	beq.n	c00c <n25q256a_switch_mode+0x1c>
    c008:	2306      	movs	r3, #6
    c00a:	e000      	b.n	c00e <n25q256a_switch_mode+0x1e>
    c00c:	2300      	movs	r3, #0
    c00e:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c010:	7afb      	ldrb	r3, [r7, #11]
    c012:	2265      	movs	r2, #101	; 0x65
    c014:	4619      	mov	r1, r3
    c016:	6878      	ldr	r0, [r7, #4]
    c018:	4b25      	ldr	r3, [pc, #148]	; (c0b0 <n25q256a_switch_mode+0xc0>)
    c01a:	4798      	blx	r3
    c01c:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    c01e:	2300      	movs	r3, #0
    c020:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    c022:	68fb      	ldr	r3, [r7, #12]
    c024:	7b1b      	ldrb	r3, [r3, #12]
    c026:	78fa      	ldrb	r2, [r7, #3]
    c028:	429a      	cmp	r2, r3
    c02a:	d03d      	beq.n	c0a8 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    c02c:	78fb      	ldrb	r3, [r7, #3]
    c02e:	2b00      	cmp	r3, #0
    c030:	d00b      	beq.n	c04a <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    c032:	697b      	ldr	r3, [r7, #20]
    c034:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c038:	2b00      	cmp	r3, #0
    c03a:	d011      	beq.n	c060 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    c03c:	697b      	ldr	r3, [r7, #20]
    c03e:	f003 031f 	and.w	r3, r3, #31
    c042:	617b      	str	r3, [r7, #20]
			modify = 1;
    c044:	2301      	movs	r3, #1
    c046:	74fb      	strb	r3, [r7, #19]
    c048:	e00a      	b.n	c060 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    c04a:	697b      	ldr	r3, [r7, #20]
    c04c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c050:	2b00      	cmp	r3, #0
    c052:	d105      	bne.n	c060 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    c054:	697b      	ldr	r3, [r7, #20]
    c056:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    c05a:	617b      	str	r3, [r7, #20]
			modify = 1;
    c05c:	2301      	movs	r3, #1
    c05e:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    c060:	7cfb      	ldrb	r3, [r7, #19]
    c062:	2b00      	cmp	r3, #0
    c064:	d021      	beq.n	c0aa <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    c066:	68fb      	ldr	r3, [r7, #12]
    c068:	78fa      	ldrb	r2, [r7, #3]
    c06a:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    c06c:	7afb      	ldrb	r3, [r7, #11]
    c06e:	2201      	movs	r2, #1
    c070:	4619      	mov	r1, r3
    c072:	6878      	ldr	r0, [r7, #4]
    c074:	4b0f      	ldr	r3, [pc, #60]	; (c0b4 <n25q256a_switch_mode+0xc4>)
    c076:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    c078:	7af9      	ldrb	r1, [r7, #11]
    c07a:	697b      	ldr	r3, [r7, #20]
    c07c:	2261      	movs	r2, #97	; 0x61
    c07e:	6878      	ldr	r0, [r7, #4]
    c080:	4c0d      	ldr	r4, [pc, #52]	; (c0b8 <n25q256a_switch_mode+0xc8>)
    c082:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c084:	78fb      	ldrb	r3, [r7, #3]
    c086:	2b00      	cmp	r3, #0
    c088:	d001      	beq.n	c08e <n25q256a_switch_mode+0x9e>
    c08a:	2306      	movs	r3, #6
    c08c:	e000      	b.n	c090 <n25q256a_switch_mode+0xa0>
    c08e:	2300      	movs	r3, #0
    c090:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c092:	7afb      	ldrb	r3, [r7, #11]
    c094:	2265      	movs	r2, #101	; 0x65
    c096:	4619      	mov	r1, r3
    c098:	6878      	ldr	r0, [r7, #4]
    c09a:	4b05      	ldr	r3, [pc, #20]	; (c0b0 <n25q256a_switch_mode+0xc0>)
    c09c:	4798      	blx	r3
    c09e:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    c0a0:	68fb      	ldr	r3, [r7, #12]
    c0a2:	78fa      	ldrb	r2, [r7, #3]
    c0a4:	731a      	strb	r2, [r3, #12]
    c0a6:	e000      	b.n	c0aa <n25q256a_switch_mode+0xba>
		return;
    c0a8:	bf00      	nop
	}
}
    c0aa:	371c      	adds	r7, #28
    c0ac:	46bd      	mov	sp, r7
    c0ae:	bd90      	pop	{r4, r7, pc}
    c0b0:	0000bde5 	.word	0x0000bde5
    c0b4:	0000bf21 	.word	0x0000bf21
    c0b8:	0000be81 	.word	0x0000be81

0000c0bc <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    c0bc:	b580      	push	{r7, lr}
    c0be:	b086      	sub	sp, #24
    c0c0:	af00      	add	r7, sp, #0
    c0c2:	60f8      	str	r0, [r7, #12]
    c0c4:	60b9      	str	r1, [r7, #8]
    c0c6:	607a      	str	r2, [r7, #4]
    c0c8:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    c0ca:	68fb      	ldr	r3, [r7, #12]
    c0cc:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    c0ce:	4a0c      	ldr	r2, [pc, #48]	; (c100 <n25q256a_construct+0x44>)
    c0d0:	68b9      	ldr	r1, [r7, #8]
    c0d2:	68f8      	ldr	r0, [r7, #12]
    c0d4:	4b0b      	ldr	r3, [pc, #44]	; (c104 <n25q256a_construct+0x48>)
    c0d6:	4798      	blx	r3
	n25q->quad_mode    = 0;
    c0d8:	697b      	ldr	r3, [r7, #20]
    c0da:	2200      	movs	r2, #0
    c0dc:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    c0de:	697b      	ldr	r3, [r7, #20]
    c0e0:	2200      	movs	r2, #0
    c0e2:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    c0e4:	697b      	ldr	r3, [r7, #20]
    c0e6:	687a      	ldr	r2, [r7, #4]
    c0e8:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    c0ea:	78fb      	ldrb	r3, [r7, #3]
    c0ec:	4619      	mov	r1, r3
    c0ee:	68f8      	ldr	r0, [r7, #12]
    c0f0:	4b05      	ldr	r3, [pc, #20]	; (c108 <n25q256a_construct+0x4c>)
    c0f2:	4798      	blx	r3
	return me;
    c0f4:	68fb      	ldr	r3, [r7, #12]
}
    c0f6:	4618      	mov	r0, r3
    c0f8:	3718      	adds	r7, #24
    c0fa:	46bd      	mov	sp, r7
    c0fc:	bd80      	pop	{r7, pc}
    c0fe:	bf00      	nop
    c100:	00011230 	.word	0x00011230
    c104:	0000c599 	.word	0x0000c599
    c108:	0000bff1 	.word	0x0000bff1

0000c10c <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c10c:	b580      	push	{r7, lr}
    c10e:	b08c      	sub	sp, #48	; 0x30
    c110:	af00      	add	r7, sp, #0
    c112:	60f8      	str	r0, [r7, #12]
    c114:	60b9      	str	r1, [r7, #8]
    c116:	607a      	str	r2, [r7, #4]
    c118:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c11a:	68fb      	ldr	r3, [r7, #12]
    c11c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c11e:	68fb      	ldr	r3, [r7, #12]
    c120:	681b      	ldr	r3, [r3, #0]
    c122:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    c124:	f107 0310 	add.w	r3, r7, #16
    c128:	2200      	movs	r2, #0
    c12a:	601a      	str	r2, [r3, #0]
    c12c:	605a      	str	r2, [r3, #4]
    c12e:	609a      	str	r2, [r3, #8]
    c130:	60da      	str	r2, [r3, #12]
    c132:	611a      	str	r2, [r3, #16]
    c134:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c138:	7b1b      	ldrb	r3, [r3, #12]
    c13a:	2b00      	cmp	r3, #0
    c13c:	d001      	beq.n	c142 <n25q256a_read+0x36>
    c13e:	2206      	movs	r2, #6
    c140:	e000      	b.n	c144 <n25q256a_read+0x38>
    c142:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    c144:	7c3b      	ldrb	r3, [r7, #16]
    c146:	f362 0302 	bfi	r3, r2, #0, #3
    c14a:	743b      	strb	r3, [r7, #16]
    c14c:	7c3b      	ldrb	r3, [r7, #16]
    c14e:	f043 0310 	orr.w	r3, r3, #16
    c152:	743b      	strb	r3, [r7, #16]
    c154:	7c3b      	ldrb	r3, [r7, #16]
    c156:	f043 0320 	orr.w	r3, r3, #32
    c15a:	743b      	strb	r3, [r7, #16]
    c15c:	7c3b      	ldrb	r3, [r7, #16]
    c15e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c162:	743b      	strb	r3, [r7, #16]
    c164:	7c7b      	ldrb	r3, [r7, #17]
    c166:	2201      	movs	r2, #1
    c168:	f362 1305 	bfi	r3, r2, #4, #2
    c16c:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    c16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c170:	7b1b      	ldrb	r3, [r3, #12]
    c172:	2b00      	cmp	r3, #0
    c174:	d001      	beq.n	c17a <n25q256a_read+0x6e>
    c176:	220a      	movs	r2, #10
    c178:	e000      	b.n	c17c <n25q256a_read+0x70>
    c17a:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    c17c:	7cbb      	ldrb	r3, [r7, #18]
    c17e:	f362 0304 	bfi	r3, r2, #0, #5
    c182:	74bb      	strb	r3, [r7, #18]
    c184:	230b      	movs	r3, #11
    c186:	753b      	strb	r3, [r7, #20]
    c188:	687b      	ldr	r3, [r7, #4]
    c18a:	61bb      	str	r3, [r7, #24]
    c18c:	683b      	ldr	r3, [r7, #0]
    c18e:	61fb      	str	r3, [r7, #28]
    c190:	68bb      	ldr	r3, [r7, #8]
    c192:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    c194:	f107 0310 	add.w	r3, r7, #16
    c198:	4619      	mov	r1, r3
    c19a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c19c:	4b03      	ldr	r3, [pc, #12]	; (c1ac <n25q256a_read+0xa0>)
    c19e:	4798      	blx	r3
	return ERR_NONE;
    c1a0:	2300      	movs	r3, #0
}
    c1a2:	4618      	mov	r0, r3
    c1a4:	3730      	adds	r7, #48	; 0x30
    c1a6:	46bd      	mov	sp, r7
    c1a8:	bd80      	pop	{r7, pc}
    c1aa:	bf00      	nop
    c1ac:	00002bf5 	.word	0x00002bf5

0000c1b0 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c1b0:	b580      	push	{r7, lr}
    c1b2:	b08c      	sub	sp, #48	; 0x30
    c1b4:	af00      	add	r7, sp, #0
    c1b6:	60f8      	str	r0, [r7, #12]
    c1b8:	60b9      	str	r1, [r7, #8]
    c1ba:	607a      	str	r2, [r7, #4]
    c1bc:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c1be:	68fb      	ldr	r3, [r7, #12]
    c1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c1c2:	68fb      	ldr	r3, [r7, #12]
    c1c4:	681b      	ldr	r3, [r3, #0]
    c1c6:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    c1c8:	f107 0310 	add.w	r3, r7, #16
    c1cc:	2200      	movs	r2, #0
    c1ce:	601a      	str	r2, [r3, #0]
    c1d0:	605a      	str	r2, [r3, #4]
    c1d2:	609a      	str	r2, [r3, #8]
    c1d4:	60da      	str	r2, [r3, #12]
    c1d6:	611a      	str	r2, [r3, #16]
    c1d8:	615a      	str	r2, [r3, #20]
    c1da:	7c3b      	ldrb	r3, [r7, #16]
    c1dc:	f043 0310 	orr.w	r3, r3, #16
    c1e0:	743b      	strb	r3, [r7, #16]
    c1e2:	7c3b      	ldrb	r3, [r7, #16]
    c1e4:	f043 0320 	orr.w	r3, r3, #32
    c1e8:	743b      	strb	r3, [r7, #16]
    c1ea:	7c3b      	ldrb	r3, [r7, #16]
    c1ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c1f0:	743b      	strb	r3, [r7, #16]
    c1f2:	7c7b      	ldrb	r3, [r7, #17]
    c1f4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    c1f8:	747b      	strb	r3, [r7, #17]
    c1fa:	2302      	movs	r3, #2
    c1fc:	753b      	strb	r3, [r7, #20]
    c1fe:	687b      	ldr	r3, [r7, #4]
    c200:	61bb      	str	r3, [r7, #24]
    c202:	683b      	ldr	r3, [r7, #0]
    c204:	61fb      	str	r3, [r7, #28]
    c206:	68bb      	ldr	r3, [r7, #8]
    c208:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c20c:	7b1b      	ldrb	r3, [r3, #12]
    c20e:	2b00      	cmp	r3, #0
    c210:	d001      	beq.n	c216 <n25q256a_write+0x66>
    c212:	2206      	movs	r2, #6
    c214:	e000      	b.n	c218 <n25q256a_write+0x68>
    c216:	2200      	movs	r2, #0
    c218:	7c3b      	ldrb	r3, [r7, #16]
    c21a:	f362 0302 	bfi	r3, r2, #0, #3
    c21e:	743b      	strb	r3, [r7, #16]
	while (length) {
    c220:	e035      	b.n	c28e <n25q256a_write+0xde>
		cmd.address = address;
    c222:	687b      	ldr	r3, [r7, #4]
    c224:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    c226:	683b      	ldr	r3, [r7, #0]
    c228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c22c:	d802      	bhi.n	c234 <n25q256a_write+0x84>
			cmd.buf_len = length;
    c22e:	683b      	ldr	r3, [r7, #0]
    c230:	61fb      	str	r3, [r7, #28]
    c232:	e002      	b.n	c23a <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    c234:	f44f 7380 	mov.w	r3, #256	; 0x100
    c238:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c23a:	7c3b      	ldrb	r3, [r7, #16]
    c23c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c240:	b2db      	uxtb	r3, r3
    c242:	2201      	movs	r2, #1
    c244:	4619      	mov	r1, r3
    c246:	68f8      	ldr	r0, [r7, #12]
    c248:	4b19      	ldr	r3, [pc, #100]	; (c2b0 <n25q256a_write+0x100>)
    c24a:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    c24c:	f107 0310 	add.w	r3, r7, #16
    c250:	4619      	mov	r1, r3
    c252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c254:	4b17      	ldr	r3, [pc, #92]	; (c2b4 <n25q256a_write+0x104>)
    c256:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c258:	bf00      	nop
    c25a:	7c3b      	ldrb	r3, [r7, #16]
    c25c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c260:	b2db      	uxtb	r3, r3
    c262:	2270      	movs	r2, #112	; 0x70
    c264:	4619      	mov	r1, r3
    c266:	68f8      	ldr	r0, [r7, #12]
    c268:	4b13      	ldr	r3, [pc, #76]	; (c2b8 <n25q256a_write+0x108>)
    c26a:	4798      	blx	r3
    c26c:	4603      	mov	r3, r0
    c26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c272:	2b00      	cmp	r3, #0
    c274:	d0f1      	beq.n	c25a <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    c276:	6a3a      	ldr	r2, [r7, #32]
    c278:	69fb      	ldr	r3, [r7, #28]
    c27a:	4413      	add	r3, r2
    c27c:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    c27e:	69fb      	ldr	r3, [r7, #28]
    c280:	683a      	ldr	r2, [r7, #0]
    c282:	1ad3      	subs	r3, r2, r3
    c284:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    c286:	69fb      	ldr	r3, [r7, #28]
    c288:	687a      	ldr	r2, [r7, #4]
    c28a:	4413      	add	r3, r2
    c28c:	607b      	str	r3, [r7, #4]
	while (length) {
    c28e:	683b      	ldr	r3, [r7, #0]
    c290:	2b00      	cmp	r3, #0
    c292:	d1c6      	bne.n	c222 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    c294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c296:	7b5b      	ldrb	r3, [r3, #13]
    c298:	2b00      	cmp	r3, #0
    c29a:	d003      	beq.n	c2a4 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    c29c:	2101      	movs	r1, #1
    c29e:	68f8      	ldr	r0, [r7, #12]
    c2a0:	4b06      	ldr	r3, [pc, #24]	; (c2bc <n25q256a_write+0x10c>)
    c2a2:	4798      	blx	r3
	}
	return ERR_NONE;
    c2a4:	2300      	movs	r3, #0
}
    c2a6:	4618      	mov	r0, r3
    c2a8:	3730      	adds	r7, #48	; 0x30
    c2aa:	46bd      	mov	sp, r7
    c2ac:	bd80      	pop	{r7, pc}
    c2ae:	bf00      	nop
    c2b0:	0000bf21 	.word	0x0000bf21
    c2b4:	00002bf5 	.word	0x00002bf5
    c2b8:	0000bde5 	.word	0x0000bde5
    c2bc:	0000bd19 	.word	0x0000bd19

0000c2c0 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    c2c0:	b580      	push	{r7, lr}
    c2c2:	b090      	sub	sp, #64	; 0x40
    c2c4:	af00      	add	r7, sp, #0
    c2c6:	60f8      	str	r0, [r7, #12]
    c2c8:	60b9      	str	r1, [r7, #8]
    c2ca:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c2cc:	68fb      	ldr	r3, [r7, #12]
    c2ce:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c2d0:	68fb      	ldr	r3, [r7, #12]
    c2d2:	681b      	ldr	r3, [r3, #0]
    c2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    c2d6:	f107 0314 	add.w	r3, r7, #20
    c2da:	2200      	movs	r2, #0
    c2dc:	601a      	str	r2, [r3, #0]
    c2de:	605a      	str	r2, [r3, #4]
    c2e0:	609a      	str	r2, [r3, #8]
    c2e2:	60da      	str	r2, [r3, #12]
    c2e4:	611a      	str	r2, [r3, #16]
    c2e6:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c2ea:	7b1b      	ldrb	r3, [r3, #12]
    c2ec:	2b00      	cmp	r3, #0
    c2ee:	d001      	beq.n	c2f4 <n25q256a_erase+0x34>
    c2f0:	2206      	movs	r2, #6
    c2f2:	e000      	b.n	c2f6 <n25q256a_erase+0x36>
    c2f4:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    c2f6:	7d3b      	ldrb	r3, [r7, #20]
    c2f8:	f362 0302 	bfi	r3, r2, #0, #3
    c2fc:	753b      	strb	r3, [r7, #20]
    c2fe:	7d3b      	ldrb	r3, [r7, #20]
    c300:	f043 0310 	orr.w	r3, r3, #16
    c304:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    c306:	687b      	ldr	r3, [r7, #4]
    c308:	4a56      	ldr	r2, [pc, #344]	; (c464 <n25q256a_erase+0x1a4>)
    c30a:	4293      	cmp	r3, r2
    c30c:	bf94      	ite	ls
    c30e:	2301      	movls	r3, #1
    c310:	2300      	movhi	r3, #0
    c312:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    c314:	7d3b      	ldrb	r3, [r7, #20]
    c316:	f362 1345 	bfi	r3, r2, #5, #1
    c31a:	753b      	strb	r3, [r7, #20]
    c31c:	7d7b      	ldrb	r3, [r7, #21]
    c31e:	2202      	movs	r2, #2
    c320:	f362 1305 	bfi	r3, r2, #4, #2
    c324:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    c326:	68bb      	ldr	r3, [r7, #8]
    c328:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    c32a:	687b      	ldr	r3, [r7, #4]
    c32c:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    c32e:	2300      	movs	r3, #0
    c330:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    c332:	687b      	ldr	r3, [r7, #4]
    c334:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c338:	2b00      	cmp	r3, #0
    c33a:	d104      	bne.n	c346 <n25q256a_erase+0x86>
    c33c:	68bb      	ldr	r3, [r7, #8]
    c33e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c342:	2b00      	cmp	r3, #0
    c344:	d002      	beq.n	c34c <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    c346:	f06f 030c 	mvn.w	r3, #12
    c34a:	e087      	b.n	c45c <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    c34c:	687b      	ldr	r3, [r7, #4]
    c34e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    c352:	d368      	bcc.n	c426 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    c354:	23c7      	movs	r3, #199	; 0xc7
    c356:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c358:	7d3b      	ldrb	r3, [r7, #20]
    c35a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c35e:	b2db      	uxtb	r3, r3
    c360:	2201      	movs	r2, #1
    c362:	4619      	mov	r1, r3
    c364:	68f8      	ldr	r0, [r7, #12]
    c366:	4b40      	ldr	r3, [pc, #256]	; (c468 <n25q256a_erase+0x1a8>)
    c368:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    c36a:	f107 0314 	add.w	r3, r7, #20
    c36e:	4619      	mov	r1, r3
    c370:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c372:	4b3e      	ldr	r3, [pc, #248]	; (c46c <n25q256a_erase+0x1ac>)
    c374:	4798      	blx	r3
    c376:	e059      	b.n	c42c <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    c378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c37a:	b29b      	uxth	r3, r3
    c37c:	2b00      	cmp	r3, #0
    c37e:	d11f      	bne.n	c3c0 <n25q256a_erase+0x100>
    c380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c386:	d31b      	bcc.n	c3c0 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    c388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c38a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    c38c:	23d8      	movs	r3, #216	; 0xd8
    c38e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c390:	7d3b      	ldrb	r3, [r7, #20]
    c392:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c396:	b2db      	uxtb	r3, r3
    c398:	2201      	movs	r2, #1
    c39a:	4619      	mov	r1, r3
    c39c:	68f8      	ldr	r0, [r7, #12]
    c39e:	4b32      	ldr	r3, [pc, #200]	; (c468 <n25q256a_erase+0x1a8>)
    c3a0:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c3a2:	f107 0314 	add.w	r3, r7, #20
    c3a6:	4619      	mov	r1, r3
    c3a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c3aa:	4b30      	ldr	r3, [pc, #192]	; (c46c <n25q256a_erase+0x1ac>)
    c3ac:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    c3ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c3b0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    c3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    c3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c3b8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    c3bc:	63bb      	str	r3, [r7, #56]	; 0x38
    c3be:	e023      	b.n	c408 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    c3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c3c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    c3c6:	d31b      	bcc.n	c400 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    c3c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c3ca:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    c3cc:	2320      	movs	r3, #32
    c3ce:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c3d0:	7d3b      	ldrb	r3, [r7, #20]
    c3d2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c3d6:	b2db      	uxtb	r3, r3
    c3d8:	2201      	movs	r2, #1
    c3da:	4619      	mov	r1, r3
    c3dc:	68f8      	ldr	r0, [r7, #12]
    c3de:	4b22      	ldr	r3, [pc, #136]	; (c468 <n25q256a_erase+0x1a8>)
    c3e0:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c3e2:	f107 0314 	add.w	r3, r7, #20
    c3e6:	4619      	mov	r1, r3
    c3e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c3ea:	4b20      	ldr	r3, [pc, #128]	; (c46c <n25q256a_erase+0x1ac>)
    c3ec:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    c3ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c3f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    c3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    c3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c3f8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    c3fc:	63bb      	str	r3, [r7, #56]	; 0x38
    c3fe:	e003      	b.n	c408 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    c400:	f06f 030c 	mvn.w	r3, #12
    c404:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    c406:	e011      	b.n	c42c <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c408:	bf00      	nop
    c40a:	7d3b      	ldrb	r3, [r7, #20]
    c40c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c410:	b2db      	uxtb	r3, r3
    c412:	2270      	movs	r2, #112	; 0x70
    c414:	4619      	mov	r1, r3
    c416:	68f8      	ldr	r0, [r7, #12]
    c418:	4b15      	ldr	r3, [pc, #84]	; (c470 <n25q256a_erase+0x1b0>)
    c41a:	4798      	blx	r3
    c41c:	4603      	mov	r3, r0
    c41e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c422:	2b00      	cmp	r3, #0
    c424:	d0f1      	beq.n	c40a <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    c426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c428:	2b00      	cmp	r3, #0
    c42a:	d1a5      	bne.n	c378 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c42c:	bf00      	nop
    c42e:	7d3b      	ldrb	r3, [r7, #20]
    c430:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c434:	b2db      	uxtb	r3, r3
    c436:	2270      	movs	r2, #112	; 0x70
    c438:	4619      	mov	r1, r3
    c43a:	68f8      	ldr	r0, [r7, #12]
    c43c:	4b0c      	ldr	r3, [pc, #48]	; (c470 <n25q256a_erase+0x1b0>)
    c43e:	4798      	blx	r3
    c440:	4603      	mov	r3, r0
    c442:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c446:	2b00      	cmp	r3, #0
    c448:	d0f1      	beq.n	c42e <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    c44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c44c:	7b5b      	ldrb	r3, [r3, #13]
    c44e:	2b00      	cmp	r3, #0
    c450:	d003      	beq.n	c45a <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    c452:	2101      	movs	r1, #1
    c454:	68f8      	ldr	r0, [r7, #12]
    c456:	4b07      	ldr	r3, [pc, #28]	; (c474 <n25q256a_erase+0x1b4>)
    c458:	4798      	blx	r3
	}
	return rc;
    c45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    c45c:	4618      	mov	r0, r3
    c45e:	3740      	adds	r7, #64	; 0x40
    c460:	46bd      	mov	sp, r7
    c462:	bd80      	pop	{r7, pc}
    c464:	001fffff 	.word	0x001fffff
    c468:	0000bf21 	.word	0x0000bf21
    c46c:	00002bf5 	.word	0x00002bf5
    c470:	0000bde5 	.word	0x0000bde5
    c474:	0000bd19 	.word	0x0000bd19

0000c478 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    c478:	b590      	push	{r4, r7, lr}
    c47a:	b085      	sub	sp, #20
    c47c:	af00      	add	r7, sp, #0
    c47e:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    c480:	687b      	ldr	r3, [r7, #4]
    c482:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c484:	68fb      	ldr	r3, [r7, #12]
    c486:	7b1b      	ldrb	r3, [r3, #12]
    c488:	2b00      	cmp	r3, #0
    c48a:	d001      	beq.n	c490 <n25q256a_enable_xip+0x18>
    c48c:	2306      	movs	r3, #6
    c48e:	e000      	b.n	c492 <n25q256a_enable_xip+0x1a>
    c490:	2300      	movs	r3, #0
    c492:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    c494:	68fb      	ldr	r3, [r7, #12]
    c496:	7b5b      	ldrb	r3, [r3, #13]
    c498:	2b00      	cmp	r3, #0
    c49a:	d129      	bne.n	c4f0 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c49c:	7afb      	ldrb	r3, [r7, #11]
    c49e:	2285      	movs	r2, #133	; 0x85
    c4a0:	4619      	mov	r1, r3
    c4a2:	6878      	ldr	r0, [r7, #4]
    c4a4:	4b15      	ldr	r3, [pc, #84]	; (c4fc <n25q256a_enable_xip+0x84>)
    c4a6:	4798      	blx	r3
    c4a8:	4603      	mov	r3, r0
    c4aa:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    c4ac:	7abb      	ldrb	r3, [r7, #10]
    c4ae:	f003 0308 	and.w	r3, r3, #8
    c4b2:	2b00      	cmp	r3, #0
    c4b4:	d015      	beq.n	c4e2 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    c4b6:	7abb      	ldrb	r3, [r7, #10]
    c4b8:	f023 0308 	bic.w	r3, r3, #8
    c4bc:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    c4be:	7abb      	ldrb	r3, [r7, #10]
    c4c0:	7af9      	ldrb	r1, [r7, #11]
    c4c2:	2281      	movs	r2, #129	; 0x81
    c4c4:	6878      	ldr	r0, [r7, #4]
    c4c6:	4c0e      	ldr	r4, [pc, #56]	; (c500 <n25q256a_enable_xip+0x88>)
    c4c8:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c4ca:	bf00      	nop
    c4cc:	7afb      	ldrb	r3, [r7, #11]
    c4ce:	2270      	movs	r2, #112	; 0x70
    c4d0:	4619      	mov	r1, r3
    c4d2:	6878      	ldr	r0, [r7, #4]
    c4d4:	4b09      	ldr	r3, [pc, #36]	; (c4fc <n25q256a_enable_xip+0x84>)
    c4d6:	4798      	blx	r3
    c4d8:	4603      	mov	r3, r0
    c4da:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c4de:	2b00      	cmp	r3, #0
    c4e0:	d0f4      	beq.n	c4cc <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    c4e2:	68fb      	ldr	r3, [r7, #12]
    c4e4:	2201      	movs	r2, #1
    c4e6:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    c4e8:	2101      	movs	r1, #1
    c4ea:	6878      	ldr	r0, [r7, #4]
    c4ec:	4b05      	ldr	r3, [pc, #20]	; (c504 <n25q256a_enable_xip+0x8c>)
    c4ee:	4798      	blx	r3
	}
	return ERR_NONE;
    c4f0:	2300      	movs	r3, #0
}
    c4f2:	4618      	mov	r0, r3
    c4f4:	3714      	adds	r7, #20
    c4f6:	46bd      	mov	sp, r7
    c4f8:	bd90      	pop	{r4, r7, pc}
    c4fa:	bf00      	nop
    c4fc:	0000bde5 	.word	0x0000bde5
    c500:	0000be81 	.word	0x0000be81
    c504:	0000bd19 	.word	0x0000bd19

0000c508 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    c508:	b580      	push	{r7, lr}
    c50a:	b086      	sub	sp, #24
    c50c:	af00      	add	r7, sp, #0
    c50e:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c510:	687b      	ldr	r3, [r7, #4]
    c512:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c514:	687b      	ldr	r3, [r7, #4]
    c516:	681b      	ldr	r3, [r3, #0]
    c518:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c51a:	697b      	ldr	r3, [r7, #20]
    c51c:	7b1b      	ldrb	r3, [r3, #12]
    c51e:	2b00      	cmp	r3, #0
    c520:	d001      	beq.n	c526 <n25q256a_disable_xip+0x1e>
    c522:	2306      	movs	r3, #6
    c524:	e000      	b.n	c528 <n25q256a_disable_xip+0x20>
    c526:	2300      	movs	r3, #0
    c528:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    c52a:	2100      	movs	r1, #0
    c52c:	6878      	ldr	r0, [r7, #4]
    c52e:	4b15      	ldr	r3, [pc, #84]	; (c584 <n25q256a_disable_xip+0x7c>)
    c530:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c532:	7bfb      	ldrb	r3, [r7, #15]
    c534:	2285      	movs	r2, #133	; 0x85
    c536:	4619      	mov	r1, r3
    c538:	6878      	ldr	r0, [r7, #4]
    c53a:	4b13      	ldr	r3, [pc, #76]	; (c588 <n25q256a_disable_xip+0x80>)
    c53c:	4798      	blx	r3
    c53e:	4603      	mov	r3, r0
    c540:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    c542:	7bbb      	ldrb	r3, [r7, #14]
    c544:	f003 0308 	and.w	r3, r3, #8
    c548:	2b00      	cmp	r3, #0
    c54a:	d113      	bne.n	c574 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    c54c:	697b      	ldr	r3, [r7, #20]
    c54e:	689b      	ldr	r3, [r3, #8]
    c550:	2b00      	cmp	r3, #0
    c552:	d00f      	beq.n	c574 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    c554:	693b      	ldr	r3, [r7, #16]
    c556:	681b      	ldr	r3, [r3, #0]
    c558:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    c55a:	6938      	ldr	r0, [r7, #16]
    c55c:	4b0b      	ldr	r3, [pc, #44]	; (c58c <n25q256a_disable_xip+0x84>)
    c55e:	4798      	blx	r3
			n25q->pin_exit_xip();
    c560:	697b      	ldr	r3, [r7, #20]
    c562:	689b      	ldr	r3, [r3, #8]
    c564:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    c566:	68b9      	ldr	r1, [r7, #8]
    c568:	6938      	ldr	r0, [r7, #16]
    c56a:	4b09      	ldr	r3, [pc, #36]	; (c590 <n25q256a_disable_xip+0x88>)
    c56c:	4798      	blx	r3
			qspi_sync_enable(descr);
    c56e:	6938      	ldr	r0, [r7, #16]
    c570:	4b08      	ldr	r3, [pc, #32]	; (c594 <n25q256a_disable_xip+0x8c>)
    c572:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    c574:	697b      	ldr	r3, [r7, #20]
    c576:	2200      	movs	r2, #0
    c578:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c57a:	2300      	movs	r3, #0
}
    c57c:	4618      	mov	r0, r3
    c57e:	3718      	adds	r7, #24
    c580:	46bd      	mov	sp, r7
    c582:	bd80      	pop	{r7, pc}
    c584:	0000bd19 	.word	0x0000bd19
    c588:	0000bde5 	.word	0x0000bde5
    c58c:	00002bb9 	.word	0x00002bb9
    c590:	00002b31 	.word	0x00002b31
    c594:	00002b7d 	.word	0x00002b7d

0000c598 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    c598:	b480      	push	{r7}
    c59a:	b085      	sub	sp, #20
    c59c:	af00      	add	r7, sp, #0
    c59e:	60f8      	str	r0, [r7, #12]
    c5a0:	60b9      	str	r1, [r7, #8]
    c5a2:	607a      	str	r2, [r7, #4]
	me->io        = io;
    c5a4:	68fb      	ldr	r3, [r7, #12]
    c5a6:	68ba      	ldr	r2, [r7, #8]
    c5a8:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    c5aa:	68fb      	ldr	r3, [r7, #12]
    c5ac:	687a      	ldr	r2, [r7, #4]
    c5ae:	605a      	str	r2, [r3, #4]

	return me;
    c5b0:	68fb      	ldr	r3, [r7, #12]
}
    c5b2:	4618      	mov	r0, r3
    c5b4:	3714      	adds	r7, #20
    c5b6:	46bd      	mov	sp, r7
    c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5bc:	4770      	bx	lr

0000c5be <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    c5be:	b480      	push	{r7}
    c5c0:	b083      	sub	sp, #12
    c5c2:	af00      	add	r7, sp, #0
    c5c4:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c5c6:	687b      	ldr	r3, [r7, #4]
    c5c8:	781b      	ldrb	r3, [r3, #0]
    c5ca:	b29a      	uxth	r2, r3
    c5cc:	687b      	ldr	r3, [r7, #4]
    c5ce:	3301      	adds	r3, #1
    c5d0:	781b      	ldrb	r3, [r3, #0]
    c5d2:	b29b      	uxth	r3, r3
    c5d4:	021b      	lsls	r3, r3, #8
    c5d6:	b29b      	uxth	r3, r3
    c5d8:	4413      	add	r3, r2
    c5da:	b29b      	uxth	r3, r3
}
    c5dc:	4618      	mov	r0, r3
    c5de:	370c      	adds	r7, #12
    c5e0:	46bd      	mov	sp, r7
    c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5e6:	4770      	bx	lr

0000c5e8 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    c5e8:	b480      	push	{r7}
    c5ea:	b083      	sub	sp, #12
    c5ec:	af00      	add	r7, sp, #0
    c5ee:	6078      	str	r0, [r7, #4]
	return desc[0];
    c5f0:	687b      	ldr	r3, [r7, #4]
    c5f2:	781b      	ldrb	r3, [r3, #0]
}
    c5f4:	4618      	mov	r0, r3
    c5f6:	370c      	adds	r7, #12
    c5f8:	46bd      	mov	sp, r7
    c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5fe:	4770      	bx	lr

0000c600 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    c600:	b580      	push	{r7, lr}
    c602:	b082      	sub	sp, #8
    c604:	af00      	add	r7, sp, #0
    c606:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c608:	6878      	ldr	r0, [r7, #4]
    c60a:	4b05      	ldr	r3, [pc, #20]	; (c620 <usb_desc_next+0x20>)
    c60c:	4798      	blx	r3
    c60e:	4603      	mov	r3, r0
    c610:	461a      	mov	r2, r3
    c612:	687b      	ldr	r3, [r7, #4]
    c614:	4413      	add	r3, r2
}
    c616:	4618      	mov	r0, r3
    c618:	3708      	adds	r7, #8
    c61a:	46bd      	mov	sp, r7
    c61c:	bd80      	pop	{r7, pc}
    c61e:	bf00      	nop
    c620:	0000c5e9 	.word	0x0000c5e9

0000c624 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c624:	b580      	push	{r7, lr}
    c626:	b08c      	sub	sp, #48	; 0x30
    c628:	af00      	add	r7, sp, #0
    c62a:	6078      	str	r0, [r7, #4]
    c62c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c62e:	687b      	ldr	r3, [r7, #4]
    c630:	689b      	ldr	r3, [r3, #8]
    c632:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    c634:	683b      	ldr	r3, [r7, #0]
    c636:	681b      	ldr	r3, [r3, #0]
    c638:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c63a:	2300      	movs	r3, #0
    c63c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c640:	e08f      	b.n	c762 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    c642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c644:	2b00      	cmp	r3, #0
    c646:	d102      	bne.n	c64e <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    c648:	f06f 0309 	mvn.w	r3, #9
    c64c:	e092      	b.n	c774 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    c64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c650:	789b      	ldrb	r3, [r3, #2]
    c652:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    c654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c656:	795b      	ldrb	r3, [r3, #5]
    c658:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c65a:	7c7b      	ldrb	r3, [r7, #17]
    c65c:	2b02      	cmp	r3, #2
    c65e:	d002      	beq.n	c666 <cdcdf_acm_enable+0x42>
    c660:	7c7b      	ldrb	r3, [r7, #17]
    c662:	2b0a      	cmp	r3, #10
    c664:	d121      	bne.n	c6aa <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c66a:	6a3a      	ldr	r2, [r7, #32]
    c66c:	5cd2      	ldrb	r2, [r2, r3]
    c66e:	7bbb      	ldrb	r3, [r7, #14]
    c670:	429a      	cmp	r2, r3
    c672:	d102      	bne.n	c67a <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    c674:	f06f 0311 	mvn.w	r3, #17
    c678:	e07c      	b.n	c774 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c67a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c67e:	6a3a      	ldr	r2, [r7, #32]
    c680:	5cd3      	ldrb	r3, [r2, r3]
    c682:	2bff      	cmp	r3, #255	; 0xff
    c684:	d002      	beq.n	c68c <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    c686:	f06f 031b 	mvn.w	r3, #27
    c68a:	e073      	b.n	c774 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c68c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c690:	7bb9      	ldrb	r1, [r7, #14]
    c692:	6a3a      	ldr	r2, [r7, #32]
    c694:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c696:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c698:	683b      	ldr	r3, [r7, #0]
    c69a:	685b      	ldr	r3, [r3, #4]
    c69c:	2205      	movs	r2, #5
    c69e:	4619      	mov	r1, r3
    c6a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c6a2:	4b36      	ldr	r3, [pc, #216]	; (c77c <cdcdf_acm_enable+0x158>)
    c6a4:	4798      	blx	r3
    c6a6:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c6a8:	e047      	b.n	c73a <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    c6aa:	f06f 0309 	mvn.w	r3, #9
    c6ae:	e061      	b.n	c774 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    c6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c6b2:	789b      	ldrb	r3, [r3, #2]
    c6b4:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    c6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c6b8:	78db      	ldrb	r3, [r3, #3]
    c6ba:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    c6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c6be:	3304      	adds	r3, #4
    c6c0:	4618      	mov	r0, r3
    c6c2:	4b2f      	ldr	r3, [pc, #188]	; (c780 <cdcdf_acm_enable+0x15c>)
    c6c4:	4798      	blx	r3
    c6c6:	4603      	mov	r3, r0
    c6c8:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c6ca:	7ebb      	ldrb	r3, [r7, #26]
    c6cc:	7ef9      	ldrb	r1, [r7, #27]
    c6ce:	8bba      	ldrh	r2, [r7, #28]
    c6d0:	4618      	mov	r0, r3
    c6d2:	4b2c      	ldr	r3, [pc, #176]	; (c784 <cdcdf_acm_enable+0x160>)
    c6d4:	4798      	blx	r3
    c6d6:	4603      	mov	r3, r0
    c6d8:	2b00      	cmp	r3, #0
    c6da:	d002      	beq.n	c6e2 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    c6dc:	f06f 0313 	mvn.w	r3, #19
    c6e0:	e048      	b.n	c774 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c6e2:	7ebb      	ldrb	r3, [r7, #26]
    c6e4:	b25b      	sxtb	r3, r3
    c6e6:	2b00      	cmp	r3, #0
    c6e8:	da0f      	bge.n	c70a <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c6ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c6ee:	7eb9      	ldrb	r1, [r7, #26]
    c6f0:	6a3a      	ldr	r2, [r7, #32]
    c6f2:	4413      	add	r3, r2
    c6f4:	460a      	mov	r2, r1
    c6f6:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    c6f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c6fc:	6a3a      	ldr	r2, [r7, #32]
    c6fe:	4413      	add	r3, r2
    c700:	789b      	ldrb	r3, [r3, #2]
    c702:	4618      	mov	r0, r3
    c704:	4b20      	ldr	r3, [pc, #128]	; (c788 <cdcdf_acm_enable+0x164>)
    c706:	4798      	blx	r3
    c708:	e007      	b.n	c71a <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c70a:	7eba      	ldrb	r2, [r7, #26]
    c70c:	6a3b      	ldr	r3, [r7, #32]
    c70e:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c710:	6a3b      	ldr	r3, [r7, #32]
    c712:	791b      	ldrb	r3, [r3, #4]
    c714:	4618      	mov	r0, r3
    c716:	4b1c      	ldr	r3, [pc, #112]	; (c788 <cdcdf_acm_enable+0x164>)
    c718:	4798      	blx	r3
			}
			desc->sod = ep;
    c71a:	683b      	ldr	r3, [r7, #0]
    c71c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c71e:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c720:	683b      	ldr	r3, [r7, #0]
    c722:	681b      	ldr	r3, [r3, #0]
    c724:	4618      	mov	r0, r3
    c726:	4b19      	ldr	r3, [pc, #100]	; (c78c <cdcdf_acm_enable+0x168>)
    c728:	4798      	blx	r3
    c72a:	4602      	mov	r2, r0
    c72c:	683b      	ldr	r3, [r7, #0]
    c72e:	685b      	ldr	r3, [r3, #4]
    c730:	4619      	mov	r1, r3
    c732:	4610      	mov	r0, r2
    c734:	4b16      	ldr	r3, [pc, #88]	; (c790 <cdcdf_acm_enable+0x16c>)
    c736:	4798      	blx	r3
    c738:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c73c:	2b00      	cmp	r3, #0
    c73e:	d1b7      	bne.n	c6b0 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c740:	683b      	ldr	r3, [r7, #0]
    c742:	681b      	ldr	r3, [r3, #0]
    c744:	4618      	mov	r0, r3
    c746:	4b11      	ldr	r3, [pc, #68]	; (c78c <cdcdf_acm_enable+0x168>)
    c748:	4798      	blx	r3
    c74a:	683b      	ldr	r3, [r7, #0]
    c74c:	685b      	ldr	r3, [r3, #4]
    c74e:	2204      	movs	r2, #4
    c750:	4619      	mov	r1, r3
    c752:	4b0a      	ldr	r3, [pc, #40]	; (c77c <cdcdf_acm_enable+0x158>)
    c754:	4798      	blx	r3
    c756:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c75c:	3301      	adds	r3, #1
    c75e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c762:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c766:	2b01      	cmp	r3, #1
    c768:	f67f af6b 	bls.w	c642 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    c76c:	4b09      	ldr	r3, [pc, #36]	; (c794 <cdcdf_acm_enable+0x170>)
    c76e:	2201      	movs	r2, #1
    c770:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c772:	2300      	movs	r3, #0
}
    c774:	4618      	mov	r0, r3
    c776:	3730      	adds	r7, #48	; 0x30
    c778:	46bd      	mov	sp, r7
    c77a:	bd80      	pop	{r7, pc}
    c77c:	0000d9e5 	.word	0x0000d9e5
    c780:	0000c5bf 	.word	0x0000c5bf
    c784:	00003869 	.word	0x00003869
    c788:	00003955 	.word	0x00003955
    c78c:	0000c601 	.word	0x0000c601
    c790:	0000da41 	.word	0x0000da41
    c794:	20001098 	.word	0x20001098

0000c798 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c798:	b580      	push	{r7, lr}
    c79a:	b088      	sub	sp, #32
    c79c:	af00      	add	r7, sp, #0
    c79e:	6078      	str	r0, [r7, #4]
    c7a0:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c7a2:	687b      	ldr	r3, [r7, #4]
    c7a4:	689b      	ldr	r3, [r3, #8]
    c7a6:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    c7a8:	683b      	ldr	r3, [r7, #0]
    c7aa:	2b00      	cmp	r3, #0
    c7ac:	d00c      	beq.n	c7c8 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c7ae:	683b      	ldr	r3, [r7, #0]
    c7b0:	681b      	ldr	r3, [r3, #0]
    c7b2:	795b      	ldrb	r3, [r3, #5]
    c7b4:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c7b6:	7c7b      	ldrb	r3, [r7, #17]
    c7b8:	2b02      	cmp	r3, #2
    c7ba:	d005      	beq.n	c7c8 <cdcdf_acm_disable+0x30>
    c7bc:	7c7b      	ldrb	r3, [r7, #17]
    c7be:	2b0a      	cmp	r3, #10
    c7c0:	d002      	beq.n	c7c8 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    c7c2:	f06f 0309 	mvn.w	r3, #9
    c7c6:	e035      	b.n	c834 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    c7c8:	2300      	movs	r3, #0
    c7ca:	77fb      	strb	r3, [r7, #31]
    c7cc:	e01f      	b.n	c80e <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    c7ce:	7ffb      	ldrb	r3, [r7, #31]
    c7d0:	69ba      	ldr	r2, [r7, #24]
    c7d2:	5cd3      	ldrb	r3, [r2, r3]
    c7d4:	2bff      	cmp	r3, #255	; 0xff
    c7d6:	d016      	beq.n	c806 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    c7d8:	7ffb      	ldrb	r3, [r7, #31]
    c7da:	69ba      	ldr	r2, [r7, #24]
    c7dc:	21ff      	movs	r1, #255	; 0xff
    c7de:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    c7e0:	7ffb      	ldrb	r3, [r7, #31]
    c7e2:	69ba      	ldr	r2, [r7, #24]
    c7e4:	4413      	add	r3, r2
    c7e6:	789b      	ldrb	r3, [r3, #2]
    c7e8:	2bff      	cmp	r3, #255	; 0xff
    c7ea:	d00d      	beq.n	c808 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c7ec:	7ffb      	ldrb	r3, [r7, #31]
    c7ee:	69ba      	ldr	r2, [r7, #24]
    c7f0:	4413      	add	r3, r2
    c7f2:	789b      	ldrb	r3, [r3, #2]
    c7f4:	4618      	mov	r0, r3
    c7f6:	4b11      	ldr	r3, [pc, #68]	; (c83c <cdcdf_acm_disable+0xa4>)
    c7f8:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    c7fa:	7ffb      	ldrb	r3, [r7, #31]
    c7fc:	69ba      	ldr	r2, [r7, #24]
    c7fe:	4413      	add	r3, r2
    c800:	22ff      	movs	r2, #255	; 0xff
    c802:	709a      	strb	r2, [r3, #2]
    c804:	e000      	b.n	c808 <cdcdf_acm_disable+0x70>
			continue;
    c806:	bf00      	nop
	for (i = 0; i < 2; i++) {
    c808:	7ffb      	ldrb	r3, [r7, #31]
    c80a:	3301      	adds	r3, #1
    c80c:	77fb      	strb	r3, [r7, #31]
    c80e:	7ffb      	ldrb	r3, [r7, #31]
    c810:	2b01      	cmp	r3, #1
    c812:	d9dc      	bls.n	c7ce <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    c814:	69bb      	ldr	r3, [r7, #24]
    c816:	791b      	ldrb	r3, [r3, #4]
    c818:	2bff      	cmp	r3, #255	; 0xff
    c81a:	d007      	beq.n	c82c <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    c81c:	69bb      	ldr	r3, [r7, #24]
    c81e:	791b      	ldrb	r3, [r3, #4]
    c820:	4618      	mov	r0, r3
    c822:	4b06      	ldr	r3, [pc, #24]	; (c83c <cdcdf_acm_disable+0xa4>)
    c824:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    c826:	69bb      	ldr	r3, [r7, #24]
    c828:	22ff      	movs	r2, #255	; 0xff
    c82a:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    c82c:	4b04      	ldr	r3, [pc, #16]	; (c840 <cdcdf_acm_disable+0xa8>)
    c82e:	2200      	movs	r2, #0
    c830:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c832:	2300      	movs	r3, #0
}
    c834:	4618      	mov	r0, r3
    c836:	3720      	adds	r7, #32
    c838:	46bd      	mov	sp, r7
    c83a:	bd80      	pop	{r7, pc}
    c83c:	00003905 	.word	0x00003905
    c840:	20001098 	.word	0x20001098

0000c844 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    c844:	b580      	push	{r7, lr}
    c846:	b084      	sub	sp, #16
    c848:	af00      	add	r7, sp, #0
    c84a:	60f8      	str	r0, [r7, #12]
    c84c:	460b      	mov	r3, r1
    c84e:	607a      	str	r2, [r7, #4]
    c850:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    c852:	7afb      	ldrb	r3, [r7, #11]
    c854:	2b01      	cmp	r3, #1
    c856:	d009      	beq.n	c86c <cdcdf_acm_ctrl+0x28>
    c858:	2b02      	cmp	r3, #2
    c85a:	d00d      	beq.n	c878 <cdcdf_acm_ctrl+0x34>
    c85c:	2b00      	cmp	r3, #0
    c85e:	d10e      	bne.n	c87e <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    c860:	6879      	ldr	r1, [r7, #4]
    c862:	68f8      	ldr	r0, [r7, #12]
    c864:	4b09      	ldr	r3, [pc, #36]	; (c88c <cdcdf_acm_ctrl+0x48>)
    c866:	4798      	blx	r3
    c868:	4603      	mov	r3, r0
    c86a:	e00a      	b.n	c882 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    c86c:	6879      	ldr	r1, [r7, #4]
    c86e:	68f8      	ldr	r0, [r7, #12]
    c870:	4b07      	ldr	r3, [pc, #28]	; (c890 <cdcdf_acm_ctrl+0x4c>)
    c872:	4798      	blx	r3
    c874:	4603      	mov	r3, r0
    c876:	e004      	b.n	c882 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    c878:	f06f 031a 	mvn.w	r3, #26
    c87c:	e001      	b.n	c882 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    c87e:	f06f 030c 	mvn.w	r3, #12
	}
}
    c882:	4618      	mov	r0, r3
    c884:	3710      	adds	r7, #16
    c886:	46bd      	mov	sp, r7
    c888:	bd80      	pop	{r7, pc}
    c88a:	bf00      	nop
    c88c:	0000c625 	.word	0x0000c625
    c890:	0000c799 	.word	0x0000c799

0000c894 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c894:	b590      	push	{r4, r7, lr}
    c896:	b087      	sub	sp, #28
    c898:	af00      	add	r7, sp, #0
    c89a:	4603      	mov	r3, r0
    c89c:	6039      	str	r1, [r7, #0]
    c89e:	71fb      	strb	r3, [r7, #7]
    c8a0:	4613      	mov	r3, r2
    c8a2:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    c8a4:	683b      	ldr	r3, [r7, #0]
    c8a6:	799a      	ldrb	r2, [r3, #6]
    c8a8:	79db      	ldrb	r3, [r3, #7]
    c8aa:	021b      	lsls	r3, r3, #8
    c8ac:	4313      	orrs	r3, r2
    c8ae:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c8b0:	4b2b      	ldr	r3, [pc, #172]	; (c960 <cdcdf_acm_set_req+0xcc>)
    c8b2:	4798      	blx	r3
    c8b4:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    c8b6:	683b      	ldr	r3, [r7, #0]
    c8b8:	785b      	ldrb	r3, [r3, #1]
    c8ba:	2b20      	cmp	r3, #32
    c8bc:	d002      	beq.n	c8c4 <cdcdf_acm_set_req+0x30>
    c8be:	2b22      	cmp	r3, #34	; 0x22
    c8c0:	d034      	beq.n	c92c <cdcdf_acm_set_req+0x98>
    c8c2:	e046      	b.n	c952 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c8c4:	8afb      	ldrh	r3, [r7, #22]
    c8c6:	2b07      	cmp	r3, #7
    c8c8:	d002      	beq.n	c8d0 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    c8ca:	f04f 33ff 	mov.w	r3, #4294967295
    c8ce:	e042      	b.n	c956 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    c8d0:	79bb      	ldrb	r3, [r7, #6]
    c8d2:	2b00      	cmp	r3, #0
    c8d4:	d107      	bne.n	c8e6 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c8d6:	8afa      	ldrh	r2, [r7, #22]
    c8d8:	79f8      	ldrb	r0, [r7, #7]
    c8da:	2300      	movs	r3, #0
    c8dc:	6939      	ldr	r1, [r7, #16]
    c8de:	4c21      	ldr	r4, [pc, #132]	; (c964 <cdcdf_acm_set_req+0xd0>)
    c8e0:	47a0      	blx	r4
    c8e2:	4603      	mov	r3, r0
    c8e4:	e037      	b.n	c956 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c8e6:	693a      	ldr	r2, [r7, #16]
    c8e8:	f107 0308 	add.w	r3, r7, #8
    c8ec:	6810      	ldr	r0, [r2, #0]
    c8ee:	6018      	str	r0, [r3, #0]
    c8f0:	8891      	ldrh	r1, [r2, #4]
    c8f2:	7992      	ldrb	r2, [r2, #6]
    c8f4:	8099      	strh	r1, [r3, #4]
    c8f6:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c8f8:	4b1b      	ldr	r3, [pc, #108]	; (c968 <cdcdf_acm_set_req+0xd4>)
    c8fa:	681b      	ldr	r3, [r3, #0]
    c8fc:	2b00      	cmp	r3, #0
    c8fe:	d008      	beq.n	c912 <cdcdf_acm_set_req+0x7e>
    c900:	4b19      	ldr	r3, [pc, #100]	; (c968 <cdcdf_acm_set_req+0xd4>)
    c902:	681b      	ldr	r3, [r3, #0]
    c904:	f107 0208 	add.w	r2, r7, #8
    c908:	4610      	mov	r0, r2
    c90a:	4798      	blx	r3
    c90c:	4603      	mov	r3, r0
    c90e:	2b00      	cmp	r3, #0
    c910:	d00a      	beq.n	c928 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c912:	4b16      	ldr	r3, [pc, #88]	; (c96c <cdcdf_acm_set_req+0xd8>)
    c914:	f107 0208 	add.w	r2, r7, #8
    c918:	e892 0003 	ldmia.w	r2, {r0, r1}
    c91c:	6018      	str	r0, [r3, #0]
    c91e:	3304      	adds	r3, #4
    c920:	8019      	strh	r1, [r3, #0]
    c922:	3302      	adds	r3, #2
    c924:	0c0a      	lsrs	r2, r1, #16
    c926:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    c928:	2300      	movs	r3, #0
    c92a:	e014      	b.n	c956 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    c92c:	2300      	movs	r3, #0
    c92e:	2200      	movs	r2, #0
    c930:	2100      	movs	r1, #0
    c932:	2000      	movs	r0, #0
    c934:	4c0b      	ldr	r4, [pc, #44]	; (c964 <cdcdf_acm_set_req+0xd0>)
    c936:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    c938:	4b0d      	ldr	r3, [pc, #52]	; (c970 <cdcdf_acm_set_req+0xdc>)
    c93a:	681b      	ldr	r3, [r3, #0]
    c93c:	2b00      	cmp	r3, #0
    c93e:	d006      	beq.n	c94e <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    c940:	4b0b      	ldr	r3, [pc, #44]	; (c970 <cdcdf_acm_set_req+0xdc>)
    c942:	681b      	ldr	r3, [r3, #0]
    c944:	683a      	ldr	r2, [r7, #0]
    c946:	8852      	ldrh	r2, [r2, #2]
    c948:	b292      	uxth	r2, r2
    c94a:	4610      	mov	r0, r2
    c94c:	4798      	blx	r3
		}
		return ERR_NONE;
    c94e:	2300      	movs	r3, #0
    c950:	e001      	b.n	c956 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    c952:	f06f 030c 	mvn.w	r3, #12
	}
}
    c956:	4618      	mov	r0, r3
    c958:	371c      	adds	r7, #28
    c95a:	46bd      	mov	sp, r7
    c95c:	bd90      	pop	{r4, r7, pc}
    c95e:	bf00      	nop
    c960:	0000d8e1 	.word	0x0000d8e1
    c964:	0000d755 	.word	0x0000d755
    c968:	200010ac 	.word	0x200010ac
    c96c:	200010a0 	.word	0x200010a0
    c970:	200010a8 	.word	0x200010a8

0000c974 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c974:	b590      	push	{r4, r7, lr}
    c976:	b085      	sub	sp, #20
    c978:	af00      	add	r7, sp, #0
    c97a:	4603      	mov	r3, r0
    c97c:	6039      	str	r1, [r7, #0]
    c97e:	71fb      	strb	r3, [r7, #7]
    c980:	4613      	mov	r3, r2
    c982:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    c984:	683b      	ldr	r3, [r7, #0]
    c986:	799a      	ldrb	r2, [r3, #6]
    c988:	79db      	ldrb	r3, [r3, #7]
    c98a:	021b      	lsls	r3, r3, #8
    c98c:	4313      	orrs	r3, r2
    c98e:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    c990:	79bb      	ldrb	r3, [r7, #6]
    c992:	2b01      	cmp	r3, #1
    c994:	d101      	bne.n	c99a <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    c996:	2300      	movs	r3, #0
    c998:	e013      	b.n	c9c2 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    c99a:	683b      	ldr	r3, [r7, #0]
    c99c:	785b      	ldrb	r3, [r3, #1]
    c99e:	2b21      	cmp	r3, #33	; 0x21
    c9a0:	d10d      	bne.n	c9be <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c9a2:	89fb      	ldrh	r3, [r7, #14]
    c9a4:	2b07      	cmp	r3, #7
    c9a6:	d002      	beq.n	c9ae <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    c9a8:	f04f 33ff 	mov.w	r3, #4294967295
    c9ac:	e009      	b.n	c9c2 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c9ae:	89fa      	ldrh	r2, [r7, #14]
    c9b0:	79f8      	ldrb	r0, [r7, #7]
    c9b2:	2300      	movs	r3, #0
    c9b4:	4905      	ldr	r1, [pc, #20]	; (c9cc <cdcdf_acm_get_req+0x58>)
    c9b6:	4c06      	ldr	r4, [pc, #24]	; (c9d0 <cdcdf_acm_get_req+0x5c>)
    c9b8:	47a0      	blx	r4
    c9ba:	4603      	mov	r3, r0
    c9bc:	e001      	b.n	c9c2 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    c9be:	f06f 030c 	mvn.w	r3, #12
	}
}
    c9c2:	4618      	mov	r0, r3
    c9c4:	3714      	adds	r7, #20
    c9c6:	46bd      	mov	sp, r7
    c9c8:	bd90      	pop	{r4, r7, pc}
    c9ca:	bf00      	nop
    c9cc:	200010a0 	.word	0x200010a0
    c9d0:	0000d755 	.word	0x0000d755

0000c9d4 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c9d4:	b580      	push	{r7, lr}
    c9d6:	b082      	sub	sp, #8
    c9d8:	af00      	add	r7, sp, #0
    c9da:	4603      	mov	r3, r0
    c9dc:	6039      	str	r1, [r7, #0]
    c9de:	71fb      	strb	r3, [r7, #7]
    c9e0:	4613      	mov	r3, r2
    c9e2:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c9e4:	683b      	ldr	r3, [r7, #0]
    c9e6:	781b      	ldrb	r3, [r3, #0]
    c9e8:	095b      	lsrs	r3, r3, #5
    c9ea:	b2db      	uxtb	r3, r3
    c9ec:	f003 0303 	and.w	r3, r3, #3
    c9f0:	2b01      	cmp	r3, #1
    c9f2:	d002      	beq.n	c9fa <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    c9f4:	f06f 0309 	mvn.w	r3, #9
    c9f8:	e026      	b.n	ca48 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c9fa:	683b      	ldr	r3, [r7, #0]
    c9fc:	889b      	ldrh	r3, [r3, #4]
    c9fe:	b29a      	uxth	r2, r3
    ca00:	4b13      	ldr	r3, [pc, #76]	; (ca50 <cdcdf_acm_req+0x7c>)
    ca02:	781b      	ldrb	r3, [r3, #0]
    ca04:	b29b      	uxth	r3, r3
    ca06:	429a      	cmp	r2, r3
    ca08:	d007      	beq.n	ca1a <cdcdf_acm_req+0x46>
    ca0a:	683b      	ldr	r3, [r7, #0]
    ca0c:	889b      	ldrh	r3, [r3, #4]
    ca0e:	b29a      	uxth	r2, r3
    ca10:	4b0f      	ldr	r3, [pc, #60]	; (ca50 <cdcdf_acm_req+0x7c>)
    ca12:	785b      	ldrb	r3, [r3, #1]
    ca14:	b29b      	uxth	r3, r3
    ca16:	429a      	cmp	r2, r3
    ca18:	d114      	bne.n	ca44 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    ca1a:	683b      	ldr	r3, [r7, #0]
    ca1c:	781b      	ldrb	r3, [r3, #0]
    ca1e:	b25b      	sxtb	r3, r3
    ca20:	2b00      	cmp	r3, #0
    ca22:	da07      	bge.n	ca34 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    ca24:	79ba      	ldrb	r2, [r7, #6]
    ca26:	79fb      	ldrb	r3, [r7, #7]
    ca28:	6839      	ldr	r1, [r7, #0]
    ca2a:	4618      	mov	r0, r3
    ca2c:	4b09      	ldr	r3, [pc, #36]	; (ca54 <cdcdf_acm_req+0x80>)
    ca2e:	4798      	blx	r3
    ca30:	4603      	mov	r3, r0
    ca32:	e009      	b.n	ca48 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    ca34:	79ba      	ldrb	r2, [r7, #6]
    ca36:	79fb      	ldrb	r3, [r7, #7]
    ca38:	6839      	ldr	r1, [r7, #0]
    ca3a:	4618      	mov	r0, r3
    ca3c:	4b06      	ldr	r3, [pc, #24]	; (ca58 <cdcdf_acm_req+0x84>)
    ca3e:	4798      	blx	r3
    ca40:	4603      	mov	r3, r0
    ca42:	e001      	b.n	ca48 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    ca44:	f06f 0309 	mvn.w	r3, #9
	}
}
    ca48:	4618      	mov	r0, r3
    ca4a:	3708      	adds	r7, #8
    ca4c:	46bd      	mov	sp, r7
    ca4e:	bd80      	pop	{r7, pc}
    ca50:	20001098 	.word	0x20001098
    ca54:	0000c975 	.word	0x0000c975
    ca58:	0000c895 	.word	0x0000c895

0000ca5c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    ca5c:	b580      	push	{r7, lr}
    ca5e:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    ca60:	4b0b      	ldr	r3, [pc, #44]	; (ca90 <cdcdf_acm_init+0x34>)
    ca62:	4798      	blx	r3
    ca64:	4603      	mov	r3, r0
    ca66:	2b01      	cmp	r3, #1
    ca68:	d902      	bls.n	ca70 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    ca6a:	f06f 0310 	mvn.w	r3, #16
    ca6e:	e00d      	b.n	ca8c <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    ca70:	4b08      	ldr	r3, [pc, #32]	; (ca94 <cdcdf_acm_init+0x38>)
    ca72:	4a09      	ldr	r2, [pc, #36]	; (ca98 <cdcdf_acm_init+0x3c>)
    ca74:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    ca76:	4b07      	ldr	r3, [pc, #28]	; (ca94 <cdcdf_acm_init+0x38>)
    ca78:	4a08      	ldr	r2, [pc, #32]	; (ca9c <cdcdf_acm_init+0x40>)
    ca7a:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    ca7c:	4805      	ldr	r0, [pc, #20]	; (ca94 <cdcdf_acm_init+0x38>)
    ca7e:	4b08      	ldr	r3, [pc, #32]	; (caa0 <cdcdf_acm_init+0x44>)
    ca80:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    ca82:	4908      	ldr	r1, [pc, #32]	; (caa4 <cdcdf_acm_init+0x48>)
    ca84:	2001      	movs	r0, #1
    ca86:	4b08      	ldr	r3, [pc, #32]	; (caa8 <cdcdf_acm_init+0x4c>)
    ca88:	4798      	blx	r3
	return ERR_NONE;
    ca8a:	2300      	movs	r3, #0
}
    ca8c:	4618      	mov	r0, r3
    ca8e:	bd80      	pop	{r7, pc}
    ca90:	0000d8f9 	.word	0x0000d8f9
    ca94:	2000108c 	.word	0x2000108c
    ca98:	0000c845 	.word	0x0000c845
    ca9c:	20001098 	.word	0x20001098
    caa0:	0000d861 	.word	0x0000d861
    caa4:	200001d8 	.word	0x200001d8
    caa8:	0000d791 	.word	0x0000d791

0000caac <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    caac:	b590      	push	{r4, r7, lr}
    caae:	b083      	sub	sp, #12
    cab0:	af00      	add	r7, sp, #0
    cab2:	6078      	str	r0, [r7, #4]
    cab4:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    cab6:	4b0b      	ldr	r3, [pc, #44]	; (cae4 <cdcdf_acm_read+0x38>)
    cab8:	4798      	blx	r3
    caba:	4603      	mov	r3, r0
    cabc:	f083 0301 	eor.w	r3, r3, #1
    cac0:	b2db      	uxtb	r3, r3
    cac2:	2b00      	cmp	r3, #0
    cac4:	d002      	beq.n	cacc <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    cac6:	f06f 0310 	mvn.w	r3, #16
    caca:	e007      	b.n	cadc <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    cacc:	4b06      	ldr	r3, [pc, #24]	; (cae8 <cdcdf_acm_read+0x3c>)
    cace:	7918      	ldrb	r0, [r3, #4]
    cad0:	2300      	movs	r3, #0
    cad2:	683a      	ldr	r2, [r7, #0]
    cad4:	6879      	ldr	r1, [r7, #4]
    cad6:	4c05      	ldr	r4, [pc, #20]	; (caec <cdcdf_acm_read+0x40>)
    cad8:	47a0      	blx	r4
    cada:	4603      	mov	r3, r0
}
    cadc:	4618      	mov	r0, r3
    cade:	370c      	adds	r7, #12
    cae0:	46bd      	mov	sp, r7
    cae2:	bd90      	pop	{r4, r7, pc}
    cae4:	0000cbd1 	.word	0x0000cbd1
    cae8:	20001098 	.word	0x20001098
    caec:	0000d755 	.word	0x0000d755

0000caf0 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    caf0:	b590      	push	{r4, r7, lr}
    caf2:	b083      	sub	sp, #12
    caf4:	af00      	add	r7, sp, #0
    caf6:	6078      	str	r0, [r7, #4]
    caf8:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    cafa:	4b0b      	ldr	r3, [pc, #44]	; (cb28 <cdcdf_acm_write+0x38>)
    cafc:	4798      	blx	r3
    cafe:	4603      	mov	r3, r0
    cb00:	f083 0301 	eor.w	r3, r3, #1
    cb04:	b2db      	uxtb	r3, r3
    cb06:	2b00      	cmp	r3, #0
    cb08:	d002      	beq.n	cb10 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    cb0a:	f06f 0310 	mvn.w	r3, #16
    cb0e:	e007      	b.n	cb20 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    cb10:	4b06      	ldr	r3, [pc, #24]	; (cb2c <cdcdf_acm_write+0x3c>)
    cb12:	78d8      	ldrb	r0, [r3, #3]
    cb14:	2301      	movs	r3, #1
    cb16:	683a      	ldr	r2, [r7, #0]
    cb18:	6879      	ldr	r1, [r7, #4]
    cb1a:	4c05      	ldr	r4, [pc, #20]	; (cb30 <cdcdf_acm_write+0x40>)
    cb1c:	47a0      	blx	r4
    cb1e:	4603      	mov	r3, r0
}
    cb20:	4618      	mov	r0, r3
    cb22:	370c      	adds	r7, #12
    cb24:	46bd      	mov	sp, r7
    cb26:	bd90      	pop	{r4, r7, pc}
    cb28:	0000cbd1 	.word	0x0000cbd1
    cb2c:	20001098 	.word	0x20001098
    cb30:	0000d755 	.word	0x0000d755

0000cb34 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    cb34:	b580      	push	{r7, lr}
    cb36:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    cb38:	4b05      	ldr	r3, [pc, #20]	; (cb50 <cdcdf_acm_stop_xfer+0x1c>)
    cb3a:	78db      	ldrb	r3, [r3, #3]
    cb3c:	4618      	mov	r0, r3
    cb3e:	4b05      	ldr	r3, [pc, #20]	; (cb54 <cdcdf_acm_stop_xfer+0x20>)
    cb40:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    cb42:	4b03      	ldr	r3, [pc, #12]	; (cb50 <cdcdf_acm_stop_xfer+0x1c>)
    cb44:	791b      	ldrb	r3, [r3, #4]
    cb46:	4618      	mov	r0, r3
    cb48:	4b02      	ldr	r3, [pc, #8]	; (cb54 <cdcdf_acm_stop_xfer+0x20>)
    cb4a:	4798      	blx	r3
}
    cb4c:	bf00      	nop
    cb4e:	bd80      	pop	{r7, pc}
    cb50:	20001098 	.word	0x20001098
    cb54:	00003b2d 	.word	0x00003b2d

0000cb58 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    cb58:	b580      	push	{r7, lr}
    cb5a:	b082      	sub	sp, #8
    cb5c:	af00      	add	r7, sp, #0
    cb5e:	4603      	mov	r3, r0
    cb60:	6039      	str	r1, [r7, #0]
    cb62:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    cb64:	79fb      	ldrb	r3, [r7, #7]
    cb66:	2b03      	cmp	r3, #3
    cb68:	d822      	bhi.n	cbb0 <cdcdf_acm_register_callback+0x58>
    cb6a:	a201      	add	r2, pc, #4	; (adr r2, cb70 <cdcdf_acm_register_callback+0x18>)
    cb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cb70:	0000cb81 	.word	0x0000cb81
    cb74:	0000cb91 	.word	0x0000cb91
    cb78:	0000cba1 	.word	0x0000cba1
    cb7c:	0000cba9 	.word	0x0000cba9
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    cb80:	4b0f      	ldr	r3, [pc, #60]	; (cbc0 <cdcdf_acm_register_callback+0x68>)
    cb82:	791b      	ldrb	r3, [r3, #4]
    cb84:	683a      	ldr	r2, [r7, #0]
    cb86:	2102      	movs	r1, #2
    cb88:	4618      	mov	r0, r3
    cb8a:	4b0e      	ldr	r3, [pc, #56]	; (cbc4 <cdcdf_acm_register_callback+0x6c>)
    cb8c:	4798      	blx	r3
		break;
    cb8e:	e012      	b.n	cbb6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    cb90:	4b0b      	ldr	r3, [pc, #44]	; (cbc0 <cdcdf_acm_register_callback+0x68>)
    cb92:	78db      	ldrb	r3, [r3, #3]
    cb94:	683a      	ldr	r2, [r7, #0]
    cb96:	2102      	movs	r1, #2
    cb98:	4618      	mov	r0, r3
    cb9a:	4b0a      	ldr	r3, [pc, #40]	; (cbc4 <cdcdf_acm_register_callback+0x6c>)
    cb9c:	4798      	blx	r3
		break;
    cb9e:	e00a      	b.n	cbb6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    cba0:	4a09      	ldr	r2, [pc, #36]	; (cbc8 <cdcdf_acm_register_callback+0x70>)
    cba2:	683b      	ldr	r3, [r7, #0]
    cba4:	6013      	str	r3, [r2, #0]
		break;
    cba6:	e006      	b.n	cbb6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    cba8:	4a08      	ldr	r2, [pc, #32]	; (cbcc <cdcdf_acm_register_callback+0x74>)
    cbaa:	683b      	ldr	r3, [r7, #0]
    cbac:	6013      	str	r3, [r2, #0]
		break;
    cbae:	e002      	b.n	cbb6 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    cbb0:	f06f 030c 	mvn.w	r3, #12
    cbb4:	e000      	b.n	cbb8 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    cbb6:	2300      	movs	r3, #0
}
    cbb8:	4618      	mov	r0, r3
    cbba:	3708      	adds	r7, #8
    cbbc:	46bd      	mov	sp, r7
    cbbe:	bd80      	pop	{r7, pc}
    cbc0:	20001098 	.word	0x20001098
    cbc4:	00003c59 	.word	0x00003c59
    cbc8:	200010ac 	.word	0x200010ac
    cbcc:	200010a8 	.word	0x200010a8

0000cbd0 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    cbd0:	b480      	push	{r7}
    cbd2:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    cbd4:	4b03      	ldr	r3, [pc, #12]	; (cbe4 <cdcdf_acm_is_enabled+0x14>)
    cbd6:	795b      	ldrb	r3, [r3, #5]
}
    cbd8:	4618      	mov	r0, r3
    cbda:	46bd      	mov	sp, r7
    cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbe0:	4770      	bx	lr
    cbe2:	bf00      	nop
    cbe4:	20001098 	.word	0x20001098

0000cbe8 <usb_get_u16>:
{
    cbe8:	b480      	push	{r7}
    cbea:	b083      	sub	sp, #12
    cbec:	af00      	add	r7, sp, #0
    cbee:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    cbf0:	687b      	ldr	r3, [r7, #4]
    cbf2:	781b      	ldrb	r3, [r3, #0]
    cbf4:	b29a      	uxth	r2, r3
    cbf6:	687b      	ldr	r3, [r7, #4]
    cbf8:	3301      	adds	r3, #1
    cbfa:	781b      	ldrb	r3, [r3, #0]
    cbfc:	b29b      	uxth	r3, r3
    cbfe:	021b      	lsls	r3, r3, #8
    cc00:	b29b      	uxth	r3, r3
    cc02:	4413      	add	r3, r2
    cc04:	b29b      	uxth	r3, r3
}
    cc06:	4618      	mov	r0, r3
    cc08:	370c      	adds	r7, #12
    cc0a:	46bd      	mov	sp, r7
    cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc10:	4770      	bx	lr

0000cc12 <usb_desc_len>:
{
    cc12:	b480      	push	{r7}
    cc14:	b083      	sub	sp, #12
    cc16:	af00      	add	r7, sp, #0
    cc18:	6078      	str	r0, [r7, #4]
	return desc[0];
    cc1a:	687b      	ldr	r3, [r7, #4]
    cc1c:	781b      	ldrb	r3, [r3, #0]
}
    cc1e:	4618      	mov	r0, r3
    cc20:	370c      	adds	r7, #12
    cc22:	46bd      	mov	sp, r7
    cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc28:	4770      	bx	lr
	...

0000cc2c <usb_desc_next>:
{
    cc2c:	b580      	push	{r7, lr}
    cc2e:	b082      	sub	sp, #8
    cc30:	af00      	add	r7, sp, #0
    cc32:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    cc34:	6878      	ldr	r0, [r7, #4]
    cc36:	4b05      	ldr	r3, [pc, #20]	; (cc4c <usb_desc_next+0x20>)
    cc38:	4798      	blx	r3
    cc3a:	4603      	mov	r3, r0
    cc3c:	461a      	mov	r2, r3
    cc3e:	687b      	ldr	r3, [r7, #4]
    cc40:	4413      	add	r3, r2
}
    cc42:	4618      	mov	r0, r3
    cc44:	3708      	adds	r7, #8
    cc46:	46bd      	mov	sp, r7
    cc48:	bd80      	pop	{r7, pc}
    cc4a:	bf00      	nop
    cc4c:	0000cc13 	.word	0x0000cc13

0000cc50 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    cc50:	b580      	push	{r7, lr}
    cc52:	b082      	sub	sp, #8
    cc54:	af00      	add	r7, sp, #0
    cc56:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    cc58:	687b      	ldr	r3, [r7, #4]
    cc5a:	3302      	adds	r3, #2
    cc5c:	4618      	mov	r0, r3
    cc5e:	4b03      	ldr	r3, [pc, #12]	; (cc6c <usb_cfg_desc_total_len+0x1c>)
    cc60:	4798      	blx	r3
    cc62:	4603      	mov	r3, r0
}
    cc64:	4618      	mov	r0, r3
    cc66:	3708      	adds	r7, #8
    cc68:	46bd      	mov	sp, r7
    cc6a:	bd80      	pop	{r7, pc}
    cc6c:	0000cbe9 	.word	0x0000cbe9

0000cc70 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    cc70:	b590      	push	{r4, r7, lr}
    cc72:	b085      	sub	sp, #20
    cc74:	af00      	add	r7, sp, #0
    cc76:	4603      	mov	r3, r0
    cc78:	6039      	str	r1, [r7, #0]
    cc7a:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    cc7c:	2300      	movs	r3, #0
    cc7e:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    cc80:	683b      	ldr	r3, [r7, #0]
    cc82:	799a      	ldrb	r2, [r3, #6]
    cc84:	79db      	ldrb	r3, [r3, #7]
    cc86:	021b      	lsls	r3, r3, #8
    cc88:	4313      	orrs	r3, r2
    cc8a:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    cc8c:	897b      	ldrh	r3, [r7, #10]
    cc8e:	2b12      	cmp	r3, #18
    cc90:	d901      	bls.n	cc96 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    cc92:	2312      	movs	r3, #18
    cc94:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    cc96:	68fb      	ldr	r3, [r7, #12]
    cc98:	2b00      	cmp	r3, #0
    cc9a:	d10a      	bne.n	ccb2 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    cc9c:	4b0f      	ldr	r3, [pc, #60]	; (ccdc <usbdc_get_dev_desc+0x6c>)
    cc9e:	681b      	ldr	r3, [r3, #0]
    cca0:	6818      	ldr	r0, [r3, #0]
    cca2:	4b0e      	ldr	r3, [pc, #56]	; (ccdc <usbdc_get_dev_desc+0x6c>)
    cca4:	681b      	ldr	r3, [r3, #0]
    cca6:	685b      	ldr	r3, [r3, #4]
    cca8:	2201      	movs	r2, #1
    ccaa:	4619      	mov	r1, r3
    ccac:	4b0c      	ldr	r3, [pc, #48]	; (cce0 <usbdc_get_dev_desc+0x70>)
    ccae:	4798      	blx	r3
    ccb0:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    ccb2:	68fb      	ldr	r3, [r7, #12]
    ccb4:	2b00      	cmp	r3, #0
    ccb6:	d101      	bne.n	ccbc <usbdc_get_dev_desc+0x4c>
		return false;
    ccb8:	2300      	movs	r3, #0
    ccba:	e00b      	b.n	ccd4 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    ccbc:	897a      	ldrh	r2, [r7, #10]
    ccbe:	79f8      	ldrb	r0, [r7, #7]
    ccc0:	2300      	movs	r3, #0
    ccc2:	68f9      	ldr	r1, [r7, #12]
    ccc4:	4c07      	ldr	r4, [pc, #28]	; (cce4 <usbdc_get_dev_desc+0x74>)
    ccc6:	47a0      	blx	r4
    ccc8:	4603      	mov	r3, r0
    ccca:	2b00      	cmp	r3, #0
    cccc:	d001      	beq.n	ccd2 <usbdc_get_dev_desc+0x62>
		return false;
    ccce:	2300      	movs	r3, #0
    ccd0:	e000      	b.n	ccd4 <usbdc_get_dev_desc+0x64>
	}
	return true;
    ccd2:	2301      	movs	r3, #1
}
    ccd4:	4618      	mov	r0, r3
    ccd6:	3714      	adds	r7, #20
    ccd8:	46bd      	mov	sp, r7
    ccda:	bd90      	pop	{r4, r7, pc}
    ccdc:	200010b0 	.word	0x200010b0
    cce0:	0000d9e5 	.word	0x0000d9e5
    cce4:	0000d755 	.word	0x0000d755

0000cce8 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    cce8:	b590      	push	{r4, r7, lr}
    ccea:	b087      	sub	sp, #28
    ccec:	af00      	add	r7, sp, #0
    ccee:	4603      	mov	r3, r0
    ccf0:	6039      	str	r1, [r7, #0]
    ccf2:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    ccf4:	2300      	movs	r3, #0
    ccf6:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    ccf8:	683b      	ldr	r3, [r7, #0]
    ccfa:	799a      	ldrb	r2, [r3, #6]
    ccfc:	79db      	ldrb	r3, [r3, #7]
    ccfe:	021b      	lsls	r3, r3, #8
    cd00:	4313      	orrs	r3, r2
    cd02:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    cd04:	683b      	ldr	r3, [r7, #0]
    cd06:	885b      	ldrh	r3, [r3, #2]
    cd08:	b29b      	uxth	r3, r3
    cd0a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    cd0c:	8a7a      	ldrh	r2, [r7, #18]
    cd0e:	4b1e      	ldr	r3, [pc, #120]	; (cd88 <usbdc_get_cfg_desc+0xa0>)
    cd10:	7f1b      	ldrb	r3, [r3, #28]
    cd12:	3b01      	subs	r3, #1
    cd14:	4013      	ands	r3, r2
    cd16:	2b00      	cmp	r3, #0
    cd18:	bf0c      	ite	eq
    cd1a:	2301      	moveq	r3, #1
    cd1c:	2300      	movne	r3, #0
    cd1e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    cd20:	697b      	ldr	r3, [r7, #20]
    cd22:	2b00      	cmp	r3, #0
    cd24:	d10c      	bne.n	cd40 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    cd26:	4b18      	ldr	r3, [pc, #96]	; (cd88 <usbdc_get_cfg_desc+0xa0>)
    cd28:	681b      	ldr	r3, [r3, #0]
    cd2a:	6818      	ldr	r0, [r3, #0]
    cd2c:	4b16      	ldr	r3, [pc, #88]	; (cd88 <usbdc_get_cfg_desc+0xa0>)
    cd2e:	681b      	ldr	r3, [r3, #0]
    cd30:	6859      	ldr	r1, [r3, #4]
    cd32:	7c3b      	ldrb	r3, [r7, #16]
    cd34:	3301      	adds	r3, #1
    cd36:	b2db      	uxtb	r3, r3
    cd38:	461a      	mov	r2, r3
    cd3a:	4b14      	ldr	r3, [pc, #80]	; (cd8c <usbdc_get_cfg_desc+0xa4>)
    cd3c:	4798      	blx	r3
    cd3e:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    cd40:	697b      	ldr	r3, [r7, #20]
    cd42:	2b00      	cmp	r3, #0
    cd44:	d101      	bne.n	cd4a <usbdc_get_cfg_desc+0x62>
		return false;
    cd46:	2300      	movs	r3, #0
    cd48:	e019      	b.n	cd7e <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    cd4a:	6978      	ldr	r0, [r7, #20]
    cd4c:	4b10      	ldr	r3, [pc, #64]	; (cd90 <usbdc_get_cfg_desc+0xa8>)
    cd4e:	4798      	blx	r3
    cd50:	4603      	mov	r3, r0
    cd52:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    cd54:	8a7a      	ldrh	r2, [r7, #18]
    cd56:	89fb      	ldrh	r3, [r7, #14]
    cd58:	429a      	cmp	r2, r3
    cd5a:	d802      	bhi.n	cd62 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    cd5c:	2300      	movs	r3, #0
    cd5e:	747b      	strb	r3, [r7, #17]
    cd60:	e001      	b.n	cd66 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    cd62:	89fb      	ldrh	r3, [r7, #14]
    cd64:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    cd66:	8a7a      	ldrh	r2, [r7, #18]
    cd68:	7c7b      	ldrb	r3, [r7, #17]
    cd6a:	79f8      	ldrb	r0, [r7, #7]
    cd6c:	6979      	ldr	r1, [r7, #20]
    cd6e:	4c09      	ldr	r4, [pc, #36]	; (cd94 <usbdc_get_cfg_desc+0xac>)
    cd70:	47a0      	blx	r4
    cd72:	4603      	mov	r3, r0
    cd74:	2b00      	cmp	r3, #0
    cd76:	d001      	beq.n	cd7c <usbdc_get_cfg_desc+0x94>
		return false;
    cd78:	2300      	movs	r3, #0
    cd7a:	e000      	b.n	cd7e <usbdc_get_cfg_desc+0x96>
	}
	return true;
    cd7c:	2301      	movs	r3, #1
}
    cd7e:	4618      	mov	r0, r3
    cd80:	371c      	adds	r7, #28
    cd82:	46bd      	mov	sp, r7
    cd84:	bd90      	pop	{r4, r7, pc}
    cd86:	bf00      	nop
    cd88:	200010b0 	.word	0x200010b0
    cd8c:	0000daa5 	.word	0x0000daa5
    cd90:	0000cc51 	.word	0x0000cc51
    cd94:	0000d755 	.word	0x0000d755

0000cd98 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    cd98:	b590      	push	{r4, r7, lr}
    cd9a:	b085      	sub	sp, #20
    cd9c:	af00      	add	r7, sp, #0
    cd9e:	4603      	mov	r3, r0
    cda0:	6039      	str	r1, [r7, #0]
    cda2:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    cda4:	683b      	ldr	r3, [r7, #0]
    cda6:	799a      	ldrb	r2, [r3, #6]
    cda8:	79db      	ldrb	r3, [r3, #7]
    cdaa:	021b      	lsls	r3, r3, #8
    cdac:	4313      	orrs	r3, r2
    cdae:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    cdb0:	683b      	ldr	r3, [r7, #0]
    cdb2:	885b      	ldrh	r3, [r3, #2]
    cdb4:	b29b      	uxth	r3, r3
    cdb6:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    cdb8:	89fa      	ldrh	r2, [r7, #14]
    cdba:	4b1a      	ldr	r3, [pc, #104]	; (ce24 <usbdc_get_str_desc+0x8c>)
    cdbc:	7f1b      	ldrb	r3, [r3, #28]
    cdbe:	3b01      	subs	r3, #1
    cdc0:	4013      	ands	r3, r2
    cdc2:	2b00      	cmp	r3, #0
    cdc4:	bf0c      	ite	eq
    cdc6:	2301      	moveq	r3, #1
    cdc8:	2300      	movne	r3, #0
    cdca:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    cdcc:	4b15      	ldr	r3, [pc, #84]	; (ce24 <usbdc_get_str_desc+0x8c>)
    cdce:	681b      	ldr	r3, [r3, #0]
    cdd0:	6818      	ldr	r0, [r3, #0]
    cdd2:	4b14      	ldr	r3, [pc, #80]	; (ce24 <usbdc_get_str_desc+0x8c>)
    cdd4:	681b      	ldr	r3, [r3, #0]
    cdd6:	685b      	ldr	r3, [r3, #4]
    cdd8:	7b3a      	ldrb	r2, [r7, #12]
    cdda:	4619      	mov	r1, r3
    cddc:	4b12      	ldr	r3, [pc, #72]	; (ce28 <usbdc_get_str_desc+0x90>)
    cdde:	4798      	blx	r3
    cde0:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    cde2:	68bb      	ldr	r3, [r7, #8]
    cde4:	2b00      	cmp	r3, #0
    cde6:	d101      	bne.n	cdec <usbdc_get_str_desc+0x54>
		return false;
    cde8:	2300      	movs	r3, #0
    cdea:	e017      	b.n	ce1c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    cdec:	68bb      	ldr	r3, [r7, #8]
    cdee:	781b      	ldrb	r3, [r3, #0]
    cdf0:	b29b      	uxth	r3, r3
    cdf2:	89fa      	ldrh	r2, [r7, #14]
    cdf4:	429a      	cmp	r2, r3
    cdf6:	d802      	bhi.n	cdfe <usbdc_get_str_desc+0x66>
		need_zlp = false;
    cdf8:	2300      	movs	r3, #0
    cdfa:	737b      	strb	r3, [r7, #13]
    cdfc:	e002      	b.n	ce04 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    cdfe:	68bb      	ldr	r3, [r7, #8]
    ce00:	781b      	ldrb	r3, [r3, #0]
    ce02:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    ce04:	89fa      	ldrh	r2, [r7, #14]
    ce06:	7b7b      	ldrb	r3, [r7, #13]
    ce08:	79f8      	ldrb	r0, [r7, #7]
    ce0a:	68b9      	ldr	r1, [r7, #8]
    ce0c:	4c07      	ldr	r4, [pc, #28]	; (ce2c <usbdc_get_str_desc+0x94>)
    ce0e:	47a0      	blx	r4
    ce10:	4603      	mov	r3, r0
    ce12:	2b00      	cmp	r3, #0
    ce14:	d001      	beq.n	ce1a <usbdc_get_str_desc+0x82>
		return false;
    ce16:	2300      	movs	r3, #0
    ce18:	e000      	b.n	ce1c <usbdc_get_str_desc+0x84>
	}
	return true;
    ce1a:	2301      	movs	r3, #1
}
    ce1c:	4618      	mov	r0, r3
    ce1e:	3714      	adds	r7, #20
    ce20:	46bd      	mov	sp, r7
    ce22:	bd90      	pop	{r4, r7, pc}
    ce24:	200010b0 	.word	0x200010b0
    ce28:	0000db1d 	.word	0x0000db1d
    ce2c:	0000d755 	.word	0x0000d755

0000ce30 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    ce30:	b580      	push	{r7, lr}
    ce32:	b084      	sub	sp, #16
    ce34:	af00      	add	r7, sp, #0
    ce36:	4603      	mov	r3, r0
    ce38:	6039      	str	r1, [r7, #0]
    ce3a:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    ce3c:	683b      	ldr	r3, [r7, #0]
    ce3e:	885b      	ldrh	r3, [r3, #2]
    ce40:	b29b      	uxth	r3, r3
    ce42:	0a1b      	lsrs	r3, r3, #8
    ce44:	b29b      	uxth	r3, r3
    ce46:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    ce48:	7bfb      	ldrb	r3, [r7, #15]
    ce4a:	2b02      	cmp	r3, #2
    ce4c:	d00d      	beq.n	ce6a <usbdc_get_desc_req+0x3a>
    ce4e:	2b03      	cmp	r3, #3
    ce50:	d012      	beq.n	ce78 <usbdc_get_desc_req+0x48>
    ce52:	2b01      	cmp	r3, #1
    ce54:	d002      	beq.n	ce5c <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    ce56:	bf00      	nop
	}
	return false;
    ce58:	2300      	movs	r3, #0
    ce5a:	e013      	b.n	ce84 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    ce5c:	79fb      	ldrb	r3, [r7, #7]
    ce5e:	6839      	ldr	r1, [r7, #0]
    ce60:	4618      	mov	r0, r3
    ce62:	4b0a      	ldr	r3, [pc, #40]	; (ce8c <usbdc_get_desc_req+0x5c>)
    ce64:	4798      	blx	r3
    ce66:	4603      	mov	r3, r0
    ce68:	e00c      	b.n	ce84 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    ce6a:	79fb      	ldrb	r3, [r7, #7]
    ce6c:	6839      	ldr	r1, [r7, #0]
    ce6e:	4618      	mov	r0, r3
    ce70:	4b07      	ldr	r3, [pc, #28]	; (ce90 <usbdc_get_desc_req+0x60>)
    ce72:	4798      	blx	r3
    ce74:	4603      	mov	r3, r0
    ce76:	e005      	b.n	ce84 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    ce78:	79fb      	ldrb	r3, [r7, #7]
    ce7a:	6839      	ldr	r1, [r7, #0]
    ce7c:	4618      	mov	r0, r3
    ce7e:	4b05      	ldr	r3, [pc, #20]	; (ce94 <usbdc_get_desc_req+0x64>)
    ce80:	4798      	blx	r3
    ce82:	4603      	mov	r3, r0
}
    ce84:	4618      	mov	r0, r3
    ce86:	3710      	adds	r7, #16
    ce88:	46bd      	mov	sp, r7
    ce8a:	bd80      	pop	{r7, pc}
    ce8c:	0000cc71 	.word	0x0000cc71
    ce90:	0000cce9 	.word	0x0000cce9
    ce94:	0000cd99 	.word	0x0000cd99

0000ce98 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    ce98:	b590      	push	{r4, r7, lr}
    ce9a:	b085      	sub	sp, #20
    ce9c:	af00      	add	r7, sp, #0
    ce9e:	4603      	mov	r3, r0
    cea0:	6039      	str	r1, [r7, #0]
    cea2:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    cea4:	683b      	ldr	r3, [r7, #0]
    cea6:	781b      	ldrb	r3, [r3, #0]
    cea8:	f003 031f 	and.w	r3, r3, #31
    ceac:	2b00      	cmp	r3, #0
    ceae:	db1b      	blt.n	cee8 <usbdc_get_status_req+0x50>
    ceb0:	2b01      	cmp	r3, #1
    ceb2:	dd02      	ble.n	ceba <usbdc_get_status_req+0x22>
    ceb4:	2b02      	cmp	r3, #2
    ceb6:	d003      	beq.n	cec0 <usbdc_get_status_req+0x28>
    ceb8:	e016      	b.n	cee8 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    ceba:	2300      	movs	r3, #0
    cebc:	60fb      	str	r3, [r7, #12]
		break;
    cebe:	e015      	b.n	ceec <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    cec0:	683b      	ldr	r3, [r7, #0]
    cec2:	889b      	ldrh	r3, [r3, #4]
    cec4:	b29b      	uxth	r3, r3
    cec6:	b2db      	uxtb	r3, r3
    cec8:	2102      	movs	r1, #2
    ceca:	4618      	mov	r0, r3
    cecc:	4b0f      	ldr	r3, [pc, #60]	; (cf0c <usbdc_get_status_req+0x74>)
    cece:	4798      	blx	r3
    ced0:	4603      	mov	r3, r0
    ced2:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    ced4:	68fb      	ldr	r3, [r7, #12]
    ced6:	2b00      	cmp	r3, #0
    ced8:	da01      	bge.n	cede <usbdc_get_status_req+0x46>
			return false;
    ceda:	2300      	movs	r3, #0
    cedc:	e012      	b.n	cf04 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    cede:	68fb      	ldr	r3, [r7, #12]
    cee0:	f003 0301 	and.w	r3, r3, #1
    cee4:	60fb      	str	r3, [r7, #12]
		break;
    cee6:	e001      	b.n	ceec <usbdc_get_status_req+0x54>
	default:
		return false;
    cee8:	2300      	movs	r3, #0
    ceea:	e00b      	b.n	cf04 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    ceec:	4b08      	ldr	r3, [pc, #32]	; (cf10 <usbdc_get_status_req+0x78>)
    ceee:	695b      	ldr	r3, [r3, #20]
    cef0:	89ba      	ldrh	r2, [r7, #12]
    cef2:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    cef4:	4b06      	ldr	r3, [pc, #24]	; (cf10 <usbdc_get_status_req+0x78>)
    cef6:	6959      	ldr	r1, [r3, #20]
    cef8:	79f8      	ldrb	r0, [r7, #7]
    cefa:	2300      	movs	r3, #0
    cefc:	2202      	movs	r2, #2
    cefe:	4c05      	ldr	r4, [pc, #20]	; (cf14 <usbdc_get_status_req+0x7c>)
    cf00:	47a0      	blx	r4
	return true;
    cf02:	2301      	movs	r3, #1
}
    cf04:	4618      	mov	r0, r3
    cf06:	3714      	adds	r7, #20
    cf08:	46bd      	mov	sp, r7
    cf0a:	bd90      	pop	{r4, r7, pc}
    cf0c:	00003c05 	.word	0x00003c05
    cf10:	200010b0 	.word	0x200010b0
    cf14:	0000d755 	.word	0x0000d755

0000cf18 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    cf18:	b590      	push	{r4, r7, lr}
    cf1a:	b085      	sub	sp, #20
    cf1c:	af00      	add	r7, sp, #0
    cf1e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    cf20:	4b1f      	ldr	r3, [pc, #124]	; (cfa0 <usbdc_get_interface+0x88>)
    cf22:	691b      	ldr	r3, [r3, #16]
    cf24:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    cf26:	4b1e      	ldr	r3, [pc, #120]	; (cfa0 <usbdc_get_interface+0x88>)
    cf28:	7f5b      	ldrb	r3, [r3, #29]
    cf2a:	461a      	mov	r2, r3
    cf2c:	687b      	ldr	r3, [r7, #4]
    cf2e:	889b      	ldrh	r3, [r3, #4]
    cf30:	b29b      	uxth	r3, r3
    cf32:	fa42 f303 	asr.w	r3, r2, r3
    cf36:	f003 0301 	and.w	r3, r3, #1
    cf3a:	2b00      	cmp	r3, #0
    cf3c:	d128      	bne.n	cf90 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    cf3e:	4b18      	ldr	r3, [pc, #96]	; (cfa0 <usbdc_get_interface+0x88>)
    cf40:	695b      	ldr	r3, [r3, #20]
    cf42:	2200      	movs	r2, #0
    cf44:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    cf46:	4b16      	ldr	r3, [pc, #88]	; (cfa0 <usbdc_get_interface+0x88>)
    cf48:	6959      	ldr	r1, [r3, #20]
    cf4a:	2300      	movs	r3, #0
    cf4c:	2201      	movs	r2, #1
    cf4e:	2000      	movs	r0, #0
    cf50:	4c14      	ldr	r4, [pc, #80]	; (cfa4 <usbdc_get_interface+0x8c>)
    cf52:	47a0      	blx	r4
		return true;
    cf54:	2301      	movs	r3, #1
    cf56:	e01f      	b.n	cf98 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    cf58:	68fb      	ldr	r3, [r7, #12]
    cf5a:	685b      	ldr	r3, [r3, #4]
    cf5c:	687a      	ldr	r2, [r7, #4]
    cf5e:	2102      	movs	r1, #2
    cf60:	68f8      	ldr	r0, [r7, #12]
    cf62:	4798      	blx	r3
    cf64:	60b8      	str	r0, [r7, #8]
    cf66:	68bb      	ldr	r3, [r7, #8]
    cf68:	2b00      	cmp	r3, #0
    cf6a:	da03      	bge.n	cf74 <usbdc_get_interface+0x5c>
			func = func->next;
    cf6c:	68fb      	ldr	r3, [r7, #12]
    cf6e:	681b      	ldr	r3, [r3, #0]
    cf70:	60fb      	str	r3, [r7, #12]
    cf72:	e00d      	b.n	cf90 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    cf74:	4b0a      	ldr	r3, [pc, #40]	; (cfa0 <usbdc_get_interface+0x88>)
    cf76:	695b      	ldr	r3, [r3, #20]
    cf78:	68ba      	ldr	r2, [r7, #8]
    cf7a:	b2d2      	uxtb	r2, r2
    cf7c:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    cf7e:	4b08      	ldr	r3, [pc, #32]	; (cfa0 <usbdc_get_interface+0x88>)
    cf80:	6959      	ldr	r1, [r3, #20]
    cf82:	2300      	movs	r3, #0
    cf84:	2201      	movs	r2, #1
    cf86:	2000      	movs	r0, #0
    cf88:	4c06      	ldr	r4, [pc, #24]	; (cfa4 <usbdc_get_interface+0x8c>)
    cf8a:	47a0      	blx	r4
			return true;
    cf8c:	2301      	movs	r3, #1
    cf8e:	e003      	b.n	cf98 <usbdc_get_interface+0x80>
	while (NULL != func) {
    cf90:	68fb      	ldr	r3, [r7, #12]
    cf92:	2b00      	cmp	r3, #0
    cf94:	d1e0      	bne.n	cf58 <usbdc_get_interface+0x40>
		}
	}
	return false;
    cf96:	2300      	movs	r3, #0
}
    cf98:	4618      	mov	r0, r3
    cf9a:	3714      	adds	r7, #20
    cf9c:	46bd      	mov	sp, r7
    cf9e:	bd90      	pop	{r4, r7, pc}
    cfa0:	200010b0 	.word	0x200010b0
    cfa4:	0000d755 	.word	0x0000d755

0000cfa8 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    cfa8:	b590      	push	{r4, r7, lr}
    cfaa:	b083      	sub	sp, #12
    cfac:	af00      	add	r7, sp, #0
    cfae:	4603      	mov	r3, r0
    cfb0:	6039      	str	r1, [r7, #0]
    cfb2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    cfb4:	683b      	ldr	r3, [r7, #0]
    cfb6:	785b      	ldrb	r3, [r3, #1]
    cfb8:	2b0a      	cmp	r3, #10
    cfba:	d83a      	bhi.n	d032 <usbdc_get_req+0x8a>
    cfbc:	a201      	add	r2, pc, #4	; (adr r2, cfc4 <usbdc_get_req+0x1c>)
    cfbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cfc2:	bf00      	nop
    cfc4:	0000d01b 	.word	0x0000d01b
    cfc8:	0000d033 	.word	0x0000d033
    cfcc:	0000d033 	.word	0x0000d033
    cfd0:	0000d033 	.word	0x0000d033
    cfd4:	0000d033 	.word	0x0000d033
    cfd8:	0000d033 	.word	0x0000d033
    cfdc:	0000cff1 	.word	0x0000cff1
    cfe0:	0000d033 	.word	0x0000d033
    cfe4:	0000cfff 	.word	0x0000cfff
    cfe8:	0000d033 	.word	0x0000d033
    cfec:	0000d029 	.word	0x0000d029
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    cff0:	79fb      	ldrb	r3, [r7, #7]
    cff2:	6839      	ldr	r1, [r7, #0]
    cff4:	4618      	mov	r0, r3
    cff6:	4b11      	ldr	r3, [pc, #68]	; (d03c <usbdc_get_req+0x94>)
    cff8:	4798      	blx	r3
    cffa:	4603      	mov	r3, r0
    cffc:	e01a      	b.n	d034 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    cffe:	4b10      	ldr	r3, [pc, #64]	; (d040 <usbdc_get_req+0x98>)
    d000:	695b      	ldr	r3, [r3, #20]
    d002:	4a0f      	ldr	r2, [pc, #60]	; (d040 <usbdc_get_req+0x98>)
    d004:	7ed2      	ldrb	r2, [r2, #27]
    d006:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    d008:	4b0d      	ldr	r3, [pc, #52]	; (d040 <usbdc_get_req+0x98>)
    d00a:	6959      	ldr	r1, [r3, #20]
    d00c:	79f8      	ldrb	r0, [r7, #7]
    d00e:	2300      	movs	r3, #0
    d010:	2201      	movs	r2, #1
    d012:	4c0c      	ldr	r4, [pc, #48]	; (d044 <usbdc_get_req+0x9c>)
    d014:	47a0      	blx	r4
		return true;
    d016:	2301      	movs	r3, #1
    d018:	e00c      	b.n	d034 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    d01a:	79fb      	ldrb	r3, [r7, #7]
    d01c:	6839      	ldr	r1, [r7, #0]
    d01e:	4618      	mov	r0, r3
    d020:	4b09      	ldr	r3, [pc, #36]	; (d048 <usbdc_get_req+0xa0>)
    d022:	4798      	blx	r3
    d024:	4603      	mov	r3, r0
    d026:	e005      	b.n	d034 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    d028:	6838      	ldr	r0, [r7, #0]
    d02a:	4b08      	ldr	r3, [pc, #32]	; (d04c <usbdc_get_req+0xa4>)
    d02c:	4798      	blx	r3
    d02e:	4603      	mov	r3, r0
    d030:	e000      	b.n	d034 <usbdc_get_req+0x8c>
	default:
		return false;
    d032:	2300      	movs	r3, #0
	}
}
    d034:	4618      	mov	r0, r3
    d036:	370c      	adds	r7, #12
    d038:	46bd      	mov	sp, r7
    d03a:	bd90      	pop	{r4, r7, pc}
    d03c:	0000ce31 	.word	0x0000ce31
    d040:	200010b0 	.word	0x200010b0
    d044:	0000d755 	.word	0x0000d755
    d048:	0000ce99 	.word	0x0000ce99
    d04c:	0000cf19 	.word	0x0000cf19

0000d050 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d050:	b590      	push	{r4, r7, lr}
    d052:	b083      	sub	sp, #12
    d054:	af00      	add	r7, sp, #0
    d056:	4603      	mov	r3, r0
    d058:	6039      	str	r1, [r7, #0]
    d05a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d05c:	683b      	ldr	r3, [r7, #0]
    d05e:	781b      	ldrb	r3, [r3, #0]
    d060:	f003 031f 	and.w	r3, r3, #31
    d064:	2b02      	cmp	r3, #2
    d066:	d116      	bne.n	d096 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d068:	683b      	ldr	r3, [r7, #0]
    d06a:	88db      	ldrh	r3, [r3, #6]
    d06c:	b29b      	uxth	r3, r3
    d06e:	2b00      	cmp	r3, #0
    d070:	d001      	beq.n	d076 <usbdc_clear_ftr_req+0x26>
			return false;
    d072:	2300      	movs	r3, #0
    d074:	e010      	b.n	d098 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    d076:	683b      	ldr	r3, [r7, #0]
    d078:	889b      	ldrh	r3, [r3, #4]
    d07a:	b29b      	uxth	r3, r3
    d07c:	b2db      	uxtb	r3, r3
    d07e:	2100      	movs	r1, #0
    d080:	4618      	mov	r0, r3
    d082:	4b07      	ldr	r3, [pc, #28]	; (d0a0 <usbdc_clear_ftr_req+0x50>)
    d084:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d086:	79f8      	ldrb	r0, [r7, #7]
    d088:	2301      	movs	r3, #1
    d08a:	2200      	movs	r2, #0
    d08c:	2100      	movs	r1, #0
    d08e:	4c05      	ldr	r4, [pc, #20]	; (d0a4 <usbdc_clear_ftr_req+0x54>)
    d090:	47a0      	blx	r4
		return true;
    d092:	2301      	movs	r3, #1
    d094:	e000      	b.n	d098 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    d096:	2300      	movs	r3, #0
	}
}
    d098:	4618      	mov	r0, r3
    d09a:	370c      	adds	r7, #12
    d09c:	46bd      	mov	sp, r7
    d09e:	bd90      	pop	{r4, r7, pc}
    d0a0:	00003c05 	.word	0x00003c05
    d0a4:	0000d755 	.word	0x0000d755

0000d0a8 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d0a8:	b590      	push	{r4, r7, lr}
    d0aa:	b083      	sub	sp, #12
    d0ac:	af00      	add	r7, sp, #0
    d0ae:	4603      	mov	r3, r0
    d0b0:	6039      	str	r1, [r7, #0]
    d0b2:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d0b4:	683b      	ldr	r3, [r7, #0]
    d0b6:	781b      	ldrb	r3, [r3, #0]
    d0b8:	f003 031f 	and.w	r3, r3, #31
    d0bc:	2b02      	cmp	r3, #2
    d0be:	d116      	bne.n	d0ee <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d0c0:	683b      	ldr	r3, [r7, #0]
    d0c2:	88db      	ldrh	r3, [r3, #6]
    d0c4:	b29b      	uxth	r3, r3
    d0c6:	2b00      	cmp	r3, #0
    d0c8:	d001      	beq.n	d0ce <usbdc_set_ftr_req+0x26>
			return false;
    d0ca:	2300      	movs	r3, #0
    d0cc:	e010      	b.n	d0f0 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    d0ce:	683b      	ldr	r3, [r7, #0]
    d0d0:	889b      	ldrh	r3, [r3, #4]
    d0d2:	b29b      	uxth	r3, r3
    d0d4:	b2db      	uxtb	r3, r3
    d0d6:	2101      	movs	r1, #1
    d0d8:	4618      	mov	r0, r3
    d0da:	4b07      	ldr	r3, [pc, #28]	; (d0f8 <usbdc_set_ftr_req+0x50>)
    d0dc:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d0de:	79f8      	ldrb	r0, [r7, #7]
    d0e0:	2301      	movs	r3, #1
    d0e2:	2200      	movs	r2, #0
    d0e4:	2100      	movs	r1, #0
    d0e6:	4c05      	ldr	r4, [pc, #20]	; (d0fc <usbdc_set_ftr_req+0x54>)
    d0e8:	47a0      	blx	r4
		return true;
    d0ea:	2301      	movs	r3, #1
    d0ec:	e000      	b.n	d0f0 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    d0ee:	2300      	movs	r3, #0
	}
}
    d0f0:	4618      	mov	r0, r3
    d0f2:	370c      	adds	r7, #12
    d0f4:	46bd      	mov	sp, r7
    d0f6:	bd90      	pop	{r4, r7, pc}
    d0f8:	00003c05 	.word	0x00003c05
    d0fc:	0000d755 	.word	0x0000d755

0000d100 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    d100:	b580      	push	{r7, lr}
    d102:	b082      	sub	sp, #8
    d104:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d106:	4b0a      	ldr	r3, [pc, #40]	; (d130 <usbdc_unconfig+0x30>)
    d108:	691b      	ldr	r3, [r3, #16]
    d10a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d10c:	e008      	b.n	d120 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    d10e:	687b      	ldr	r3, [r7, #4]
    d110:	685b      	ldr	r3, [r3, #4]
    d112:	2200      	movs	r2, #0
    d114:	2101      	movs	r1, #1
    d116:	6878      	ldr	r0, [r7, #4]
    d118:	4798      	blx	r3
		func = func->next;
    d11a:	687b      	ldr	r3, [r7, #4]
    d11c:	681b      	ldr	r3, [r3, #0]
    d11e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d120:	687b      	ldr	r3, [r7, #4]
    d122:	2b00      	cmp	r3, #0
    d124:	d1f3      	bne.n	d10e <usbdc_unconfig+0xe>
	}
}
    d126:	bf00      	nop
    d128:	3708      	adds	r7, #8
    d12a:	46bd      	mov	sp, r7
    d12c:	bd80      	pop	{r7, pc}
    d12e:	bf00      	nop
    d130:	200010b0 	.word	0x200010b0

0000d134 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    d134:	b580      	push	{r7, lr}
    d136:	b088      	sub	sp, #32
    d138:	af00      	add	r7, sp, #0
    d13a:	4603      	mov	r3, r0
    d13c:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    d13e:	2300      	movs	r3, #0
    d140:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    d142:	23ff      	movs	r3, #255	; 0xff
    d144:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    d146:	79fb      	ldrb	r3, [r7, #7]
    d148:	2b00      	cmp	r3, #0
    d14a:	d103      	bne.n	d154 <usbdc_set_config+0x20>
		usbdc_unconfig();
    d14c:	4b2e      	ldr	r3, [pc, #184]	; (d208 <usbdc_set_config+0xd4>)
    d14e:	4798      	blx	r3
		return true;
    d150:	2301      	movs	r3, #1
    d152:	e055      	b.n	d200 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    d154:	69bb      	ldr	r3, [r7, #24]
    d156:	2b00      	cmp	r3, #0
    d158:	d10a      	bne.n	d170 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    d15a:	4b2c      	ldr	r3, [pc, #176]	; (d20c <usbdc_set_config+0xd8>)
    d15c:	681b      	ldr	r3, [r3, #0]
    d15e:	6818      	ldr	r0, [r3, #0]
    d160:	4b2a      	ldr	r3, [pc, #168]	; (d20c <usbdc_set_config+0xd8>)
    d162:	681b      	ldr	r3, [r3, #0]
    d164:	685b      	ldr	r3, [r3, #4]
    d166:	79fa      	ldrb	r2, [r7, #7]
    d168:	4619      	mov	r1, r3
    d16a:	4b29      	ldr	r3, [pc, #164]	; (d210 <usbdc_set_config+0xdc>)
    d16c:	4798      	blx	r3
    d16e:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    d170:	69bb      	ldr	r3, [r7, #24]
    d172:	2b00      	cmp	r3, #0
    d174:	d101      	bne.n	d17a <usbdc_set_config+0x46>
		return false;
    d176:	2300      	movs	r3, #0
    d178:	e042      	b.n	d200 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    d17a:	69b8      	ldr	r0, [r7, #24]
    d17c:	4b25      	ldr	r3, [pc, #148]	; (d214 <usbdc_set_config+0xe0>)
    d17e:	4798      	blx	r3
    d180:	4603      	mov	r3, r0
    d182:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    d184:	8abb      	ldrh	r3, [r7, #20]
    d186:	69ba      	ldr	r2, [r7, #24]
    d188:	4413      	add	r3, r2
    d18a:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    d18c:	693b      	ldr	r3, [r7, #16]
    d18e:	2204      	movs	r2, #4
    d190:	4619      	mov	r1, r3
    d192:	69b8      	ldr	r0, [r7, #24]
    d194:	4b20      	ldr	r3, [pc, #128]	; (d218 <usbdc_set_config+0xe4>)
    d196:	4798      	blx	r3
    d198:	4603      	mov	r3, r0
    d19a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    d19c:	e02c      	b.n	d1f8 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    d19e:	68fb      	ldr	r3, [r7, #12]
    d1a0:	3302      	adds	r3, #2
    d1a2:	781b      	ldrb	r3, [r3, #0]
    d1a4:	7dfa      	ldrb	r2, [r7, #23]
    d1a6:	429a      	cmp	r2, r3
    d1a8:	d018      	beq.n	d1dc <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    d1aa:	68fb      	ldr	r3, [r7, #12]
    d1ac:	789b      	ldrb	r3, [r3, #2]
    d1ae:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    d1b0:	4b16      	ldr	r3, [pc, #88]	; (d20c <usbdc_set_config+0xd8>)
    d1b2:	691b      	ldr	r3, [r3, #16]
    d1b4:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d1b6:	e00c      	b.n	d1d2 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    d1b8:	69fb      	ldr	r3, [r7, #28]
    d1ba:	685b      	ldr	r3, [r3, #4]
    d1bc:	f107 020c 	add.w	r2, r7, #12
    d1c0:	2100      	movs	r1, #0
    d1c2:	69f8      	ldr	r0, [r7, #28]
    d1c4:	4798      	blx	r3
    d1c6:	4603      	mov	r3, r0
    d1c8:	2b00      	cmp	r3, #0
    d1ca:	d006      	beq.n	d1da <usbdc_set_config+0xa6>
					func = func->next;
    d1cc:	69fb      	ldr	r3, [r7, #28]
    d1ce:	681b      	ldr	r3, [r3, #0]
    d1d0:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d1d2:	69fb      	ldr	r3, [r7, #28]
    d1d4:	2b00      	cmp	r3, #0
    d1d6:	d1ef      	bne.n	d1b8 <usbdc_set_config+0x84>
    d1d8:	e000      	b.n	d1dc <usbdc_set_config+0xa8>
				} else {
					break;
    d1da:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    d1dc:	68fb      	ldr	r3, [r7, #12]
    d1de:	4618      	mov	r0, r3
    d1e0:	4b0e      	ldr	r3, [pc, #56]	; (d21c <usbdc_set_config+0xe8>)
    d1e2:	4798      	blx	r3
    d1e4:	4603      	mov	r3, r0
    d1e6:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d1e8:	68fb      	ldr	r3, [r7, #12]
    d1ea:	6939      	ldr	r1, [r7, #16]
    d1ec:	2204      	movs	r2, #4
    d1ee:	4618      	mov	r0, r3
    d1f0:	4b09      	ldr	r3, [pc, #36]	; (d218 <usbdc_set_config+0xe4>)
    d1f2:	4798      	blx	r3
    d1f4:	4603      	mov	r3, r0
    d1f6:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    d1f8:	68fb      	ldr	r3, [r7, #12]
    d1fa:	2b00      	cmp	r3, #0
    d1fc:	d1cf      	bne.n	d19e <usbdc_set_config+0x6a>
	}
	return true;
    d1fe:	2301      	movs	r3, #1
}
    d200:	4618      	mov	r0, r3
    d202:	3720      	adds	r7, #32
    d204:	46bd      	mov	sp, r7
    d206:	bd80      	pop	{r7, pc}
    d208:	0000d101 	.word	0x0000d101
    d20c:	200010b0 	.word	0x200010b0
    d210:	0000daa5 	.word	0x0000daa5
    d214:	0000cc51 	.word	0x0000cc51
    d218:	0000d9e5 	.word	0x0000d9e5
    d21c:	0000cc2d 	.word	0x0000cc2d

0000d220 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    d220:	b580      	push	{r7, lr}
    d222:	b082      	sub	sp, #8
    d224:	af00      	add	r7, sp, #0
    d226:	4603      	mov	r3, r0
    d228:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    d22a:	79fb      	ldrb	r3, [r7, #7]
    d22c:	4618      	mov	r0, r3
    d22e:	4b03      	ldr	r3, [pc, #12]	; (d23c <usbdc_set_address+0x1c>)
    d230:	4798      	blx	r3
}
    d232:	bf00      	nop
    d234:	3708      	adds	r7, #8
    d236:	46bd      	mov	sp, r7
    d238:	bd80      	pop	{r7, pc}
    d23a:	bf00      	nop
    d23c:	00003821 	.word	0x00003821

0000d240 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    d240:	b590      	push	{r4, r7, lr}
    d242:	b087      	sub	sp, #28
    d244:	af00      	add	r7, sp, #0
    d246:	4603      	mov	r3, r0
    d248:	460a      	mov	r2, r1
    d24a:	80fb      	strh	r3, [r7, #6]
    d24c:	4613      	mov	r3, r2
    d24e:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    d250:	2300      	movs	r3, #0
    d252:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    d254:	693b      	ldr	r3, [r7, #16]
    d256:	2b00      	cmp	r3, #0
    d258:	d10b      	bne.n	d272 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    d25a:	4b43      	ldr	r3, [pc, #268]	; (d368 <usbdc_set_interface+0x128>)
    d25c:	681b      	ldr	r3, [r3, #0]
    d25e:	6818      	ldr	r0, [r3, #0]
    d260:	4b41      	ldr	r3, [pc, #260]	; (d368 <usbdc_set_interface+0x128>)
    d262:	681b      	ldr	r3, [r3, #0]
    d264:	6859      	ldr	r1, [r3, #4]
    d266:	4b40      	ldr	r3, [pc, #256]	; (d368 <usbdc_set_interface+0x128>)
    d268:	7edb      	ldrb	r3, [r3, #27]
    d26a:	461a      	mov	r2, r3
    d26c:	4b3f      	ldr	r3, [pc, #252]	; (d36c <usbdc_set_interface+0x12c>)
    d26e:	4798      	blx	r3
    d270:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    d272:	693b      	ldr	r3, [r7, #16]
    d274:	2b00      	cmp	r3, #0
    d276:	d101      	bne.n	d27c <usbdc_set_interface+0x3c>
		return false;
    d278:	2300      	movs	r3, #0
    d27a:	e071      	b.n	d360 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    d27c:	693b      	ldr	r3, [r7, #16]
    d27e:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    d280:	6938      	ldr	r0, [r7, #16]
    d282:	4b3b      	ldr	r3, [pc, #236]	; (d370 <usbdc_set_interface+0x130>)
    d284:	4798      	blx	r3
    d286:	4603      	mov	r3, r0
    d288:	461a      	mov	r2, r3
    d28a:	693b      	ldr	r3, [r7, #16]
    d28c:	4413      	add	r3, r2
    d28e:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    d290:	68bb      	ldr	r3, [r7, #8]
    d292:	68f9      	ldr	r1, [r7, #12]
    d294:	2204      	movs	r2, #4
    d296:	4618      	mov	r0, r3
    d298:	4b36      	ldr	r3, [pc, #216]	; (d374 <usbdc_set_interface+0x134>)
    d29a:	4798      	blx	r3
    d29c:	6138      	str	r0, [r7, #16]
    d29e:	693b      	ldr	r3, [r7, #16]
    d2a0:	2b00      	cmp	r3, #0
    d2a2:	d113      	bne.n	d2cc <usbdc_set_interface+0x8c>
		return false;
    d2a4:	2300      	movs	r3, #0
    d2a6:	e05b      	b.n	d360 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    d2a8:	68bb      	ldr	r3, [r7, #8]
    d2aa:	4618      	mov	r0, r3
    d2ac:	4b32      	ldr	r3, [pc, #200]	; (d378 <usbdc_set_interface+0x138>)
    d2ae:	4798      	blx	r3
    d2b0:	4603      	mov	r3, r0
    d2b2:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d2b4:	68bb      	ldr	r3, [r7, #8]
    d2b6:	68f9      	ldr	r1, [r7, #12]
    d2b8:	2204      	movs	r2, #4
    d2ba:	4618      	mov	r0, r3
    d2bc:	4b2d      	ldr	r3, [pc, #180]	; (d374 <usbdc_set_interface+0x134>)
    d2be:	4798      	blx	r3
    d2c0:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    d2c2:	693b      	ldr	r3, [r7, #16]
    d2c4:	2b00      	cmp	r3, #0
    d2c6:	d101      	bne.n	d2cc <usbdc_set_interface+0x8c>
			return false;
    d2c8:	2300      	movs	r3, #0
    d2ca:	e049      	b.n	d360 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    d2cc:	693b      	ldr	r3, [r7, #16]
    d2ce:	3302      	adds	r3, #2
    d2d0:	781b      	ldrb	r3, [r3, #0]
    d2d2:	b29b      	uxth	r3, r3
    d2d4:	88ba      	ldrh	r2, [r7, #4]
    d2d6:	429a      	cmp	r2, r3
    d2d8:	d1e6      	bne.n	d2a8 <usbdc_set_interface+0x68>
    d2da:	693b      	ldr	r3, [r7, #16]
    d2dc:	3303      	adds	r3, #3
    d2de:	781b      	ldrb	r3, [r3, #0]
    d2e0:	b29b      	uxth	r3, r3
    d2e2:	88fa      	ldrh	r2, [r7, #6]
    d2e4:	429a      	cmp	r2, r3
    d2e6:	d1df      	bne.n	d2a8 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    d2e8:	693b      	ldr	r3, [r7, #16]
    d2ea:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    d2ec:	4b1e      	ldr	r3, [pc, #120]	; (d368 <usbdc_set_interface+0x128>)
    d2ee:	691b      	ldr	r3, [r3, #16]
    d2f0:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    d2f2:	e031      	b.n	d358 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    d2f4:	697b      	ldr	r3, [r7, #20]
    d2f6:	685b      	ldr	r3, [r3, #4]
    d2f8:	f107 0208 	add.w	r2, r7, #8
    d2fc:	2101      	movs	r1, #1
    d2fe:	6978      	ldr	r0, [r7, #20]
    d300:	4798      	blx	r3
    d302:	4603      	mov	r3, r0
    d304:	2b00      	cmp	r3, #0
    d306:	d003      	beq.n	d310 <usbdc_set_interface+0xd0>
			func = func->next;
    d308:	697b      	ldr	r3, [r7, #20]
    d30a:	681b      	ldr	r3, [r3, #0]
    d30c:	617b      	str	r3, [r7, #20]
    d30e:	e023      	b.n	d358 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    d310:	697b      	ldr	r3, [r7, #20]
    d312:	685b      	ldr	r3, [r3, #4]
    d314:	f107 0208 	add.w	r2, r7, #8
    d318:	2100      	movs	r1, #0
    d31a:	6978      	ldr	r0, [r7, #20]
    d31c:	4798      	blx	r3
    d31e:	4603      	mov	r3, r0
    d320:	2b00      	cmp	r3, #0
    d322:	d117      	bne.n	d354 <usbdc_set_interface+0x114>
			if (alt_set) {
    d324:	88fb      	ldrh	r3, [r7, #6]
    d326:	2b00      	cmp	r3, #0
    d328:	d00c      	beq.n	d344 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    d32a:	4b0f      	ldr	r3, [pc, #60]	; (d368 <usbdc_set_interface+0x128>)
    d32c:	7f5b      	ldrb	r3, [r3, #29]
    d32e:	b25a      	sxtb	r2, r3
    d330:	88bb      	ldrh	r3, [r7, #4]
    d332:	2101      	movs	r1, #1
    d334:	fa01 f303 	lsl.w	r3, r1, r3
    d338:	b25b      	sxtb	r3, r3
    d33a:	4313      	orrs	r3, r2
    d33c:	b25b      	sxtb	r3, r3
    d33e:	b2da      	uxtb	r2, r3
    d340:	4b09      	ldr	r3, [pc, #36]	; (d368 <usbdc_set_interface+0x128>)
    d342:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    d344:	2300      	movs	r3, #0
    d346:	2200      	movs	r2, #0
    d348:	2100      	movs	r1, #0
    d34a:	2000      	movs	r0, #0
    d34c:	4c0b      	ldr	r4, [pc, #44]	; (d37c <usbdc_set_interface+0x13c>)
    d34e:	47a0      	blx	r4
			return true;
    d350:	2301      	movs	r3, #1
    d352:	e005      	b.n	d360 <usbdc_set_interface+0x120>
		} else {
			return false;
    d354:	2300      	movs	r3, #0
    d356:	e003      	b.n	d360 <usbdc_set_interface+0x120>
	while (NULL != func) {
    d358:	697b      	ldr	r3, [r7, #20]
    d35a:	2b00      	cmp	r3, #0
    d35c:	d1ca      	bne.n	d2f4 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    d35e:	2300      	movs	r3, #0
}
    d360:	4618      	mov	r0, r3
    d362:	371c      	adds	r7, #28
    d364:	46bd      	mov	sp, r7
    d366:	bd90      	pop	{r4, r7, pc}
    d368:	200010b0 	.word	0x200010b0
    d36c:	0000daa5 	.word	0x0000daa5
    d370:	0000cc51 	.word	0x0000cc51
    d374:	0000d9e5 	.word	0x0000d9e5
    d378:	0000cc2d 	.word	0x0000cc2d
    d37c:	0000d755 	.word	0x0000d755

0000d380 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    d380:	b590      	push	{r4, r7, lr}
    d382:	b083      	sub	sp, #12
    d384:	af00      	add	r7, sp, #0
    d386:	4603      	mov	r3, r0
    d388:	6039      	str	r1, [r7, #0]
    d38a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d38c:	683b      	ldr	r3, [r7, #0]
    d38e:	785b      	ldrb	r3, [r3, #1]
    d390:	3b01      	subs	r3, #1
    d392:	2b0a      	cmp	r3, #10
    d394:	d85b      	bhi.n	d44e <usbdc_set_req+0xce>
    d396:	a201      	add	r2, pc, #4	; (adr r2, d39c <usbdc_set_req+0x1c>)
    d398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d39c:	0000d41b 	.word	0x0000d41b
    d3a0:	0000d44f 	.word	0x0000d44f
    d3a4:	0000d429 	.word	0x0000d429
    d3a8:	0000d44f 	.word	0x0000d44f
    d3ac:	0000d3c9 	.word	0x0000d3c9
    d3b0:	0000d44f 	.word	0x0000d44f
    d3b4:	0000d44f 	.word	0x0000d44f
    d3b8:	0000d44f 	.word	0x0000d44f
    d3bc:	0000d3e3 	.word	0x0000d3e3
    d3c0:	0000d44f 	.word	0x0000d44f
    d3c4:	0000d437 	.word	0x0000d437
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d3c8:	79f8      	ldrb	r0, [r7, #7]
    d3ca:	2301      	movs	r3, #1
    d3cc:	2200      	movs	r2, #0
    d3ce:	2100      	movs	r1, #0
    d3d0:	4c21      	ldr	r4, [pc, #132]	; (d458 <usbdc_set_req+0xd8>)
    d3d2:	47a0      	blx	r4
    d3d4:	4603      	mov	r3, r0
    d3d6:	2b00      	cmp	r3, #0
    d3d8:	bf0c      	ite	eq
    d3da:	2301      	moveq	r3, #1
    d3dc:	2300      	movne	r3, #0
    d3de:	b2db      	uxtb	r3, r3
    d3e0:	e036      	b.n	d450 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    d3e2:	683b      	ldr	r3, [r7, #0]
    d3e4:	885b      	ldrh	r3, [r3, #2]
    d3e6:	b29b      	uxth	r3, r3
    d3e8:	b2db      	uxtb	r3, r3
    d3ea:	4618      	mov	r0, r3
    d3ec:	4b1b      	ldr	r3, [pc, #108]	; (d45c <usbdc_set_req+0xdc>)
    d3ee:	4798      	blx	r3
    d3f0:	4603      	mov	r3, r0
    d3f2:	f083 0301 	eor.w	r3, r3, #1
    d3f6:	b2db      	uxtb	r3, r3
    d3f8:	2b00      	cmp	r3, #0
    d3fa:	d001      	beq.n	d400 <usbdc_set_req+0x80>
			return false;
    d3fc:	2300      	movs	r3, #0
    d3fe:	e027      	b.n	d450 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d400:	79f8      	ldrb	r0, [r7, #7]
    d402:	2301      	movs	r3, #1
    d404:	2200      	movs	r2, #0
    d406:	2100      	movs	r1, #0
    d408:	4c13      	ldr	r4, [pc, #76]	; (d458 <usbdc_set_req+0xd8>)
    d40a:	47a0      	blx	r4
    d40c:	4603      	mov	r3, r0
    d40e:	2b00      	cmp	r3, #0
    d410:	bf0c      	ite	eq
    d412:	2301      	moveq	r3, #1
    d414:	2300      	movne	r3, #0
    d416:	b2db      	uxtb	r3, r3
    d418:	e01a      	b.n	d450 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    d41a:	79fb      	ldrb	r3, [r7, #7]
    d41c:	6839      	ldr	r1, [r7, #0]
    d41e:	4618      	mov	r0, r3
    d420:	4b0f      	ldr	r3, [pc, #60]	; (d460 <usbdc_set_req+0xe0>)
    d422:	4798      	blx	r3
    d424:	4603      	mov	r3, r0
    d426:	e013      	b.n	d450 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    d428:	79fb      	ldrb	r3, [r7, #7]
    d42a:	6839      	ldr	r1, [r7, #0]
    d42c:	4618      	mov	r0, r3
    d42e:	4b0d      	ldr	r3, [pc, #52]	; (d464 <usbdc_set_req+0xe4>)
    d430:	4798      	blx	r3
    d432:	4603      	mov	r3, r0
    d434:	e00c      	b.n	d450 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    d436:	683b      	ldr	r3, [r7, #0]
    d438:	885b      	ldrh	r3, [r3, #2]
    d43a:	b29a      	uxth	r2, r3
    d43c:	683b      	ldr	r3, [r7, #0]
    d43e:	889b      	ldrh	r3, [r3, #4]
    d440:	b29b      	uxth	r3, r3
    d442:	4619      	mov	r1, r3
    d444:	4610      	mov	r0, r2
    d446:	4b08      	ldr	r3, [pc, #32]	; (d468 <usbdc_set_req+0xe8>)
    d448:	4798      	blx	r3
    d44a:	4603      	mov	r3, r0
    d44c:	e000      	b.n	d450 <usbdc_set_req+0xd0>
	default:
		return false;
    d44e:	2300      	movs	r3, #0
	}
}
    d450:	4618      	mov	r0, r3
    d452:	370c      	adds	r7, #12
    d454:	46bd      	mov	sp, r7
    d456:	bd90      	pop	{r4, r7, pc}
    d458:	0000d755 	.word	0x0000d755
    d45c:	0000d135 	.word	0x0000d135
    d460:	0000d051 	.word	0x0000d051
    d464:	0000d0a9 	.word	0x0000d0a9
    d468:	0000d241 	.word	0x0000d241

0000d46c <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    d46c:	b580      	push	{r7, lr}
    d46e:	b082      	sub	sp, #8
    d470:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d472:	4b0a      	ldr	r3, [pc, #40]	; (d49c <usbdc_sof_notify+0x30>)
    d474:	685b      	ldr	r3, [r3, #4]
    d476:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    d478:	e009      	b.n	d48e <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    d47a:	687b      	ldr	r3, [r7, #4]
    d47c:	685b      	ldr	r3, [r3, #4]
    d47e:	2b00      	cmp	r3, #0
    d480:	d002      	beq.n	d488 <usbdc_sof_notify+0x1c>
			sof->cb();
    d482:	687b      	ldr	r3, [r7, #4]
    d484:	685b      	ldr	r3, [r3, #4]
    d486:	4798      	blx	r3
		}
		sof = sof->next;
    d488:	687b      	ldr	r3, [r7, #4]
    d48a:	681b      	ldr	r3, [r3, #0]
    d48c:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    d48e:	687b      	ldr	r3, [r7, #4]
    d490:	2b00      	cmp	r3, #0
    d492:	d1f2      	bne.n	d47a <usbdc_sof_notify+0xe>
	}
}
    d494:	bf00      	nop
    d496:	3708      	adds	r7, #8
    d498:	46bd      	mov	sp, r7
    d49a:	bd80      	pop	{r7, pc}
    d49c:	200010b0 	.word	0x200010b0

0000d4a0 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    d4a0:	b580      	push	{r7, lr}
    d4a2:	b084      	sub	sp, #16
    d4a4:	af00      	add	r7, sp, #0
    d4a6:	4603      	mov	r3, r0
    d4a8:	6039      	str	r1, [r7, #0]
    d4aa:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d4ac:	4b0b      	ldr	r3, [pc, #44]	; (d4dc <usbdc_change_notify+0x3c>)
    d4ae:	68db      	ldr	r3, [r3, #12]
    d4b0:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    d4b2:	e00c      	b.n	d4ce <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    d4b4:	68fb      	ldr	r3, [r7, #12]
    d4b6:	685b      	ldr	r3, [r3, #4]
    d4b8:	2b00      	cmp	r3, #0
    d4ba:	d005      	beq.n	d4c8 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    d4bc:	68fb      	ldr	r3, [r7, #12]
    d4be:	685b      	ldr	r3, [r3, #4]
    d4c0:	79fa      	ldrb	r2, [r7, #7]
    d4c2:	6839      	ldr	r1, [r7, #0]
    d4c4:	4610      	mov	r0, r2
    d4c6:	4798      	blx	r3
		}
		cg = cg->next;
    d4c8:	68fb      	ldr	r3, [r7, #12]
    d4ca:	681b      	ldr	r3, [r3, #0]
    d4cc:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    d4ce:	68fb      	ldr	r3, [r7, #12]
    d4d0:	2b00      	cmp	r3, #0
    d4d2:	d1ef      	bne.n	d4b4 <usbdc_change_notify+0x14>
	}
}
    d4d4:	bf00      	nop
    d4d6:	3710      	adds	r7, #16
    d4d8:	46bd      	mov	sp, r7
    d4da:	bd80      	pop	{r7, pc}
    d4dc:	200010b0 	.word	0x200010b0

0000d4e0 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d4e0:	b580      	push	{r7, lr}
    d4e2:	b084      	sub	sp, #16
    d4e4:	af00      	add	r7, sp, #0
    d4e6:	4603      	mov	r3, r0
    d4e8:	6039      	str	r1, [r7, #0]
    d4ea:	71fb      	strb	r3, [r7, #7]
    d4ec:	4613      	mov	r3, r2
    d4ee:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d4f0:	4b12      	ldr	r3, [pc, #72]	; (d53c <usbdc_request_handler+0x5c>)
    d4f2:	689b      	ldr	r3, [r3, #8]
    d4f4:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    d4f6:	e019      	b.n	d52c <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    d4f8:	68fb      	ldr	r3, [r7, #12]
    d4fa:	685b      	ldr	r3, [r3, #4]
    d4fc:	2b00      	cmp	r3, #0
    d4fe:	d012      	beq.n	d526 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    d500:	68fb      	ldr	r3, [r7, #12]
    d502:	685b      	ldr	r3, [r3, #4]
    d504:	79ba      	ldrb	r2, [r7, #6]
    d506:	79f8      	ldrb	r0, [r7, #7]
    d508:	6839      	ldr	r1, [r7, #0]
    d50a:	4798      	blx	r3
    d50c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    d50e:	68bb      	ldr	r3, [r7, #8]
    d510:	2b00      	cmp	r3, #0
    d512:	d101      	bne.n	d518 <usbdc_request_handler+0x38>
				return true;
    d514:	2301      	movs	r3, #1
    d516:	e00d      	b.n	d534 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    d518:	68bb      	ldr	r3, [r7, #8]
    d51a:	f113 0f0a 	cmn.w	r3, #10
    d51e:	d002      	beq.n	d526 <usbdc_request_handler+0x46>
				return -1;
    d520:	f04f 33ff 	mov.w	r3, #4294967295
    d524:	e006      	b.n	d534 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    d526:	68fb      	ldr	r3, [r7, #12]
    d528:	681b      	ldr	r3, [r3, #0]
    d52a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    d52c:	68fb      	ldr	r3, [r7, #12]
    d52e:	2b00      	cmp	r3, #0
    d530:	d1e2      	bne.n	d4f8 <usbdc_request_handler+0x18>
	}
	return false;
    d532:	2300      	movs	r3, #0
}
    d534:	4618      	mov	r0, r3
    d536:	3710      	adds	r7, #16
    d538:	46bd      	mov	sp, r7
    d53a:	bd80      	pop	{r7, pc}
    d53c:	200010b0 	.word	0x200010b0

0000d540 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d540:	b580      	push	{r7, lr}
    d542:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    d544:	4b01      	ldr	r3, [pc, #4]	; (d54c <usbd_sof_cb+0xc>)
    d546:	4798      	blx	r3
}
    d548:	bf00      	nop
    d54a:	bd80      	pop	{r7, pc}
    d54c:	0000d46d 	.word	0x0000d46d

0000d550 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    d550:	b580      	push	{r7, lr}
    d552:	b082      	sub	sp, #8
    d554:	af00      	add	r7, sp, #0
    d556:	4603      	mov	r3, r0
    d558:	6039      	str	r1, [r7, #0]
    d55a:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    d55c:	79fb      	ldrb	r3, [r7, #7]
    d55e:	2200      	movs	r2, #0
    d560:	6839      	ldr	r1, [r7, #0]
    d562:	4618      	mov	r0, r3
    d564:	4b14      	ldr	r3, [pc, #80]	; (d5b8 <usbdc_cb_ctl_req+0x68>)
    d566:	4798      	blx	r3
    d568:	4603      	mov	r3, r0
    d56a:	f1b3 3fff 	cmp.w	r3, #4294967295
    d56e:	d00b      	beq.n	d588 <usbdc_cb_ctl_req+0x38>
    d570:	2b01      	cmp	r3, #1
    d572:	d007      	beq.n	d584 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    d574:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d576:	683b      	ldr	r3, [r7, #0]
    d578:	781b      	ldrb	r3, [r3, #0]
    d57a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    d57e:	2b00      	cmp	r3, #0
    d580:	d007      	beq.n	d592 <usbdc_cb_ctl_req+0x42>
    d582:	e003      	b.n	d58c <usbdc_cb_ctl_req+0x3c>
		return true;
    d584:	2301      	movs	r3, #1
    d586:	e013      	b.n	d5b0 <usbdc_cb_ctl_req+0x60>
		return false;
    d588:	2300      	movs	r3, #0
    d58a:	e011      	b.n	d5b0 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d58c:	2b80      	cmp	r3, #128	; 0x80
    d58e:	d007      	beq.n	d5a0 <usbdc_cb_ctl_req+0x50>
    d590:	e00d      	b.n	d5ae <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    d592:	79fb      	ldrb	r3, [r7, #7]
    d594:	6839      	ldr	r1, [r7, #0]
    d596:	4618      	mov	r0, r3
    d598:	4b08      	ldr	r3, [pc, #32]	; (d5bc <usbdc_cb_ctl_req+0x6c>)
    d59a:	4798      	blx	r3
    d59c:	4603      	mov	r3, r0
    d59e:	e007      	b.n	d5b0 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    d5a0:	79fb      	ldrb	r3, [r7, #7]
    d5a2:	6839      	ldr	r1, [r7, #0]
    d5a4:	4618      	mov	r0, r3
    d5a6:	4b06      	ldr	r3, [pc, #24]	; (d5c0 <usbdc_cb_ctl_req+0x70>)
    d5a8:	4798      	blx	r3
    d5aa:	4603      	mov	r3, r0
    d5ac:	e000      	b.n	d5b0 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    d5ae:	2300      	movs	r3, #0
	}
}
    d5b0:	4618      	mov	r0, r3
    d5b2:	3708      	adds	r7, #8
    d5b4:	46bd      	mov	sp, r7
    d5b6:	bd80      	pop	{r7, pc}
    d5b8:	0000d4e1 	.word	0x0000d4e1
    d5bc:	0000d381 	.word	0x0000d381
    d5c0:	0000cfa9 	.word	0x0000cfa9

0000d5c4 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    d5c4:	b580      	push	{r7, lr}
    d5c6:	b082      	sub	sp, #8
    d5c8:	af00      	add	r7, sp, #0
    d5ca:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    d5cc:	687b      	ldr	r3, [r7, #4]
    d5ce:	781b      	ldrb	r3, [r3, #0]
    d5d0:	2b00      	cmp	r3, #0
    d5d2:	d135      	bne.n	d640 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    d5d4:	687b      	ldr	r3, [r7, #4]
    d5d6:	785b      	ldrb	r3, [r3, #1]
    d5d8:	2b05      	cmp	r3, #5
    d5da:	d019      	beq.n	d610 <usbdc_ctrl_status_end+0x4c>
    d5dc:	2b09      	cmp	r3, #9
    d5de:	d000      	beq.n	d5e2 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    d5e0:	e02f      	b.n	d642 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    d5e2:	687b      	ldr	r3, [r7, #4]
    d5e4:	885b      	ldrh	r3, [r3, #2]
    d5e6:	b29b      	uxth	r3, r3
    d5e8:	b2da      	uxtb	r2, r3
    d5ea:	4b17      	ldr	r3, [pc, #92]	; (d648 <usbdc_ctrl_status_end+0x84>)
    d5ec:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d5ee:	687b      	ldr	r3, [r7, #4]
    d5f0:	885b      	ldrh	r3, [r3, #2]
    d5f2:	b29b      	uxth	r3, r3
    d5f4:	2b00      	cmp	r3, #0
    d5f6:	d001      	beq.n	d5fc <usbdc_ctrl_status_end+0x38>
    d5f8:	2204      	movs	r2, #4
    d5fa:	e000      	b.n	d5fe <usbdc_ctrl_status_end+0x3a>
    d5fc:	2203      	movs	r2, #3
    d5fe:	4b12      	ldr	r3, [pc, #72]	; (d648 <usbdc_ctrl_status_end+0x84>)
    d600:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d602:	4b11      	ldr	r3, [pc, #68]	; (d648 <usbdc_ctrl_status_end+0x84>)
    d604:	7e9b      	ldrb	r3, [r3, #26]
    d606:	4619      	mov	r1, r3
    d608:	2001      	movs	r0, #1
    d60a:	4b10      	ldr	r3, [pc, #64]	; (d64c <usbdc_ctrl_status_end+0x88>)
    d60c:	4798      	blx	r3
		break;
    d60e:	e018      	b.n	d642 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    d610:	687b      	ldr	r3, [r7, #4]
    d612:	885b      	ldrh	r3, [r3, #2]
    d614:	b29b      	uxth	r3, r3
    d616:	b2db      	uxtb	r3, r3
    d618:	4618      	mov	r0, r3
    d61a:	4b0d      	ldr	r3, [pc, #52]	; (d650 <usbdc_ctrl_status_end+0x8c>)
    d61c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d61e:	687b      	ldr	r3, [r7, #4]
    d620:	885b      	ldrh	r3, [r3, #2]
    d622:	b29b      	uxth	r3, r3
    d624:	2b00      	cmp	r3, #0
    d626:	d001      	beq.n	d62c <usbdc_ctrl_status_end+0x68>
    d628:	2203      	movs	r2, #3
    d62a:	e000      	b.n	d62e <usbdc_ctrl_status_end+0x6a>
    d62c:	2202      	movs	r2, #2
    d62e:	4b06      	ldr	r3, [pc, #24]	; (d648 <usbdc_ctrl_status_end+0x84>)
    d630:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d632:	4b05      	ldr	r3, [pc, #20]	; (d648 <usbdc_ctrl_status_end+0x84>)
    d634:	7e9b      	ldrb	r3, [r3, #26]
    d636:	4619      	mov	r1, r3
    d638:	2001      	movs	r0, #1
    d63a:	4b04      	ldr	r3, [pc, #16]	; (d64c <usbdc_ctrl_status_end+0x88>)
    d63c:	4798      	blx	r3
		break;
    d63e:	e000      	b.n	d642 <usbdc_ctrl_status_end+0x7e>
		return;
    d640:	bf00      	nop
	}
}
    d642:	3708      	adds	r7, #8
    d644:	46bd      	mov	sp, r7
    d646:	bd80      	pop	{r7, pc}
    d648:	200010b0 	.word	0x200010b0
    d64c:	0000d4a1 	.word	0x0000d4a1
    d650:	0000d221 	.word	0x0000d221

0000d654 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    d654:	b580      	push	{r7, lr}
    d656:	b082      	sub	sp, #8
    d658:	af00      	add	r7, sp, #0
    d65a:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    d65c:	2201      	movs	r2, #1
    d65e:	6879      	ldr	r1, [r7, #4]
    d660:	2000      	movs	r0, #0
    d662:	4b03      	ldr	r3, [pc, #12]	; (d670 <usbdc_ctrl_data_end+0x1c>)
    d664:	4798      	blx	r3
	return false;
    d666:	2300      	movs	r3, #0
}
    d668:	4618      	mov	r0, r3
    d66a:	3708      	adds	r7, #8
    d66c:	46bd      	mov	sp, r7
    d66e:	bd80      	pop	{r7, pc}
    d670:	0000d4e1 	.word	0x0000d4e1

0000d674 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    d674:	b580      	push	{r7, lr}
    d676:	b082      	sub	sp, #8
    d678:	af00      	add	r7, sp, #0
    d67a:	4603      	mov	r3, r0
    d67c:	603a      	str	r2, [r7, #0]
    d67e:	71fb      	strb	r3, [r7, #7]
    d680:	460b      	mov	r3, r1
    d682:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    d684:	79bb      	ldrb	r3, [r7, #6]
    d686:	2b00      	cmp	r3, #0
    d688:	d002      	beq.n	d690 <usbdc_cb_ctl_done+0x1c>
    d68a:	2b01      	cmp	r3, #1
    d68c:	d004      	beq.n	d698 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    d68e:	e008      	b.n	d6a2 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    d690:	6838      	ldr	r0, [r7, #0]
    d692:	4b06      	ldr	r3, [pc, #24]	; (d6ac <usbdc_cb_ctl_done+0x38>)
    d694:	4798      	blx	r3
		break;
    d696:	e004      	b.n	d6a2 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    d698:	6838      	ldr	r0, [r7, #0]
    d69a:	4b05      	ldr	r3, [pc, #20]	; (d6b0 <usbdc_cb_ctl_done+0x3c>)
    d69c:	4798      	blx	r3
    d69e:	4603      	mov	r3, r0
    d6a0:	e000      	b.n	d6a4 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    d6a2:	2300      	movs	r3, #0
}
    d6a4:	4618      	mov	r0, r3
    d6a6:	3708      	adds	r7, #8
    d6a8:	46bd      	mov	sp, r7
    d6aa:	bd80      	pop	{r7, pc}
    d6ac:	0000d5c5 	.word	0x0000d5c5
    d6b0:	0000d655 	.word	0x0000d655

0000d6b4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    d6b4:	b580      	push	{r7, lr}
    d6b6:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    d6b8:	4b10      	ldr	r3, [pc, #64]	; (d6fc <usbdc_reset+0x48>)
    d6ba:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    d6bc:	4b10      	ldr	r3, [pc, #64]	; (d700 <usbdc_reset+0x4c>)
    d6be:	2202      	movs	r2, #2
    d6c0:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    d6c2:	4b0f      	ldr	r3, [pc, #60]	; (d700 <usbdc_reset+0x4c>)
    d6c4:	2200      	movs	r2, #0
    d6c6:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    d6c8:	4b0d      	ldr	r3, [pc, #52]	; (d700 <usbdc_reset+0x4c>)
    d6ca:	2200      	movs	r2, #0
    d6cc:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    d6ce:	2000      	movs	r0, #0
    d6d0:	4b0c      	ldr	r3, [pc, #48]	; (d704 <usbdc_reset+0x50>)
    d6d2:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    d6d4:	4b0a      	ldr	r3, [pc, #40]	; (d700 <usbdc_reset+0x4c>)
    d6d6:	7f1b      	ldrb	r3, [r3, #28]
    d6d8:	4618      	mov	r0, r3
    d6da:	4b0b      	ldr	r3, [pc, #44]	; (d708 <usbdc_reset+0x54>)
    d6dc:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    d6de:	4a0b      	ldr	r2, [pc, #44]	; (d70c <usbdc_reset+0x58>)
    d6e0:	2100      	movs	r1, #0
    d6e2:	2000      	movs	r0, #0
    d6e4:	4b0a      	ldr	r3, [pc, #40]	; (d710 <usbdc_reset+0x5c>)
    d6e6:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    d6e8:	4a0a      	ldr	r2, [pc, #40]	; (d714 <usbdc_reset+0x60>)
    d6ea:	2102      	movs	r1, #2
    d6ec:	2000      	movs	r0, #0
    d6ee:	4b08      	ldr	r3, [pc, #32]	; (d710 <usbdc_reset+0x5c>)
    d6f0:	4798      	blx	r3
	usb_d_ep_enable(0);
    d6f2:	2000      	movs	r0, #0
    d6f4:	4b08      	ldr	r3, [pc, #32]	; (d718 <usbdc_reset+0x64>)
    d6f6:	4798      	blx	r3
}
    d6f8:	bf00      	nop
    d6fa:	bd80      	pop	{r7, pc}
    d6fc:	0000d101 	.word	0x0000d101
    d700:	200010b0 	.word	0x200010b0
    d704:	00003905 	.word	0x00003905
    d708:	00003841 	.word	0x00003841
    d70c:	0000d551 	.word	0x0000d551
    d710:	00003c59 	.word	0x00003c59
    d714:	0000d675 	.word	0x0000d675
    d718:	00003955 	.word	0x00003955

0000d71c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    d71c:	b580      	push	{r7, lr}
    d71e:	b082      	sub	sp, #8
    d720:	af00      	add	r7, sp, #0
    d722:	4603      	mov	r3, r0
    d724:	6039      	str	r1, [r7, #0]
    d726:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    d728:	79fb      	ldrb	r3, [r7, #7]
    d72a:	2b00      	cmp	r3, #0
    d72c:	d002      	beq.n	d734 <usbd_event_cb+0x18>
    d72e:	2b01      	cmp	r3, #1
    d730:	d005      	beq.n	d73e <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    d732:	e007      	b.n	d744 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    d734:	6839      	ldr	r1, [r7, #0]
    d736:	2000      	movs	r0, #0
    d738:	4b04      	ldr	r3, [pc, #16]	; (d74c <usbd_event_cb+0x30>)
    d73a:	4798      	blx	r3
		break;
    d73c:	e002      	b.n	d744 <usbd_event_cb+0x28>
		usbdc_reset();
    d73e:	4b04      	ldr	r3, [pc, #16]	; (d750 <usbd_event_cb+0x34>)
    d740:	4798      	blx	r3
		break;
    d742:	bf00      	nop
	}
}
    d744:	bf00      	nop
    d746:	3708      	adds	r7, #8
    d748:	46bd      	mov	sp, r7
    d74a:	bd80      	pop	{r7, pc}
    d74c:	0000d4a1 	.word	0x0000d4a1
    d750:	0000d6b5 	.word	0x0000d6b5

0000d754 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    d754:	b580      	push	{r7, lr}
    d756:	b088      	sub	sp, #32
    d758:	af00      	add	r7, sp, #0
    d75a:	60b9      	str	r1, [r7, #8]
    d75c:	607a      	str	r2, [r7, #4]
    d75e:	461a      	mov	r2, r3
    d760:	4603      	mov	r3, r0
    d762:	73fb      	strb	r3, [r7, #15]
    d764:	4613      	mov	r3, r2
    d766:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d768:	68bb      	ldr	r3, [r7, #8]
    d76a:	617b      	str	r3, [r7, #20]
    d76c:	687b      	ldr	r3, [r7, #4]
    d76e:	61bb      	str	r3, [r7, #24]
    d770:	7bfb      	ldrb	r3, [r7, #15]
    d772:	773b      	strb	r3, [r7, #28]
    d774:	7bbb      	ldrb	r3, [r7, #14]
    d776:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    d778:	f107 0314 	add.w	r3, r7, #20
    d77c:	4618      	mov	r0, r3
    d77e:	4b03      	ldr	r3, [pc, #12]	; (d78c <usbdc_xfer+0x38>)
    d780:	4798      	blx	r3
    d782:	4603      	mov	r3, r0
}
    d784:	4618      	mov	r0, r3
    d786:	3720      	adds	r7, #32
    d788:	46bd      	mov	sp, r7
    d78a:	bd80      	pop	{r7, pc}
    d78c:	000039c5 	.word	0x000039c5

0000d790 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    d790:	b580      	push	{r7, lr}
    d792:	b082      	sub	sp, #8
    d794:	af00      	add	r7, sp, #0
    d796:	4603      	mov	r3, r0
    d798:	6039      	str	r1, [r7, #0]
    d79a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    d79c:	79fb      	ldrb	r3, [r7, #7]
    d79e:	2b01      	cmp	r3, #1
    d7a0:	d009      	beq.n	d7b6 <usbdc_register_handler+0x26>
    d7a2:	2b02      	cmp	r3, #2
    d7a4:	d00c      	beq.n	d7c0 <usbdc_register_handler+0x30>
    d7a6:	2b00      	cmp	r3, #0
    d7a8:	d000      	beq.n	d7ac <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    d7aa:	e00e      	b.n	d7ca <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    d7ac:	6839      	ldr	r1, [r7, #0]
    d7ae:	4809      	ldr	r0, [pc, #36]	; (d7d4 <usbdc_register_handler+0x44>)
    d7b0:	4b09      	ldr	r3, [pc, #36]	; (d7d8 <usbdc_register_handler+0x48>)
    d7b2:	4798      	blx	r3
		break;
    d7b4:	e009      	b.n	d7ca <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    d7b6:	6839      	ldr	r1, [r7, #0]
    d7b8:	4808      	ldr	r0, [pc, #32]	; (d7dc <usbdc_register_handler+0x4c>)
    d7ba:	4b07      	ldr	r3, [pc, #28]	; (d7d8 <usbdc_register_handler+0x48>)
    d7bc:	4798      	blx	r3
		break;
    d7be:	e004      	b.n	d7ca <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    d7c0:	6839      	ldr	r1, [r7, #0]
    d7c2:	4807      	ldr	r0, [pc, #28]	; (d7e0 <usbdc_register_handler+0x50>)
    d7c4:	4b04      	ldr	r3, [pc, #16]	; (d7d8 <usbdc_register_handler+0x48>)
    d7c6:	4798      	blx	r3
		break;
    d7c8:	bf00      	nop
	}
}
    d7ca:	bf00      	nop
    d7cc:	3708      	adds	r7, #8
    d7ce:	46bd      	mov	sp, r7
    d7d0:	bd80      	pop	{r7, pc}
    d7d2:	bf00      	nop
    d7d4:	200010b4 	.word	0x200010b4
    d7d8:	00003db1 	.word	0x00003db1
    d7dc:	200010b8 	.word	0x200010b8
    d7e0:	200010bc 	.word	0x200010bc

0000d7e4 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d7e4:	b580      	push	{r7, lr}
    d7e6:	b084      	sub	sp, #16
    d7e8:	af00      	add	r7, sp, #0
    d7ea:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    d7ec:	687b      	ldr	r3, [r7, #4]
    d7ee:	2b00      	cmp	r3, #0
    d7f0:	bf14      	ite	ne
    d7f2:	2301      	movne	r3, #1
    d7f4:	2300      	moveq	r3, #0
    d7f6:	b2db      	uxtb	r3, r3
    d7f8:	f240 3255 	movw	r2, #853	; 0x355
    d7fc:	4910      	ldr	r1, [pc, #64]	; (d840 <usbdc_init+0x5c>)
    d7fe:	4618      	mov	r0, r3
    d800:	4b10      	ldr	r3, [pc, #64]	; (d844 <usbdc_init+0x60>)
    d802:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    d804:	4b10      	ldr	r3, [pc, #64]	; (d848 <usbdc_init+0x64>)
    d806:	4798      	blx	r3
    d808:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    d80a:	68fb      	ldr	r3, [r7, #12]
    d80c:	2b00      	cmp	r3, #0
    d80e:	da01      	bge.n	d814 <usbdc_init+0x30>
		return rc;
    d810:	68fb      	ldr	r3, [r7, #12]
    d812:	e010      	b.n	d836 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d814:	2220      	movs	r2, #32
    d816:	2100      	movs	r1, #0
    d818:	480c      	ldr	r0, [pc, #48]	; (d84c <usbdc_init+0x68>)
    d81a:	4b0d      	ldr	r3, [pc, #52]	; (d850 <usbdc_init+0x6c>)
    d81c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    d81e:	4a0b      	ldr	r2, [pc, #44]	; (d84c <usbdc_init+0x68>)
    d820:	687b      	ldr	r3, [r7, #4]
    d822:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d824:	490b      	ldr	r1, [pc, #44]	; (d854 <usbdc_init+0x70>)
    d826:	2000      	movs	r0, #0
    d828:	4b0b      	ldr	r3, [pc, #44]	; (d858 <usbdc_init+0x74>)
    d82a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d82c:	490b      	ldr	r1, [pc, #44]	; (d85c <usbdc_init+0x78>)
    d82e:	2001      	movs	r0, #1
    d830:	4b09      	ldr	r3, [pc, #36]	; (d858 <usbdc_init+0x74>)
    d832:	4798      	blx	r3

	return 0;
    d834:	2300      	movs	r3, #0
}
    d836:	4618      	mov	r0, r3
    d838:	3710      	adds	r7, #16
    d83a:	46bd      	mov	sp, r7
    d83c:	bd80      	pop	{r7, pc}
    d83e:	bf00      	nop
    d840:	00011244 	.word	0x00011244
    d844:	00003cd5 	.word	0x00003cd5
    d848:	0000372d 	.word	0x0000372d
    d84c:	200010b0 	.word	0x200010b0
    d850:	00010c85 	.word	0x00010c85
    d854:	0000d541 	.word	0x0000d541
    d858:	000037d9 	.word	0x000037d9
    d85c:	0000d71d 	.word	0x0000d71d

0000d860 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    d860:	b580      	push	{r7, lr}
    d862:	b082      	sub	sp, #8
    d864:	af00      	add	r7, sp, #0
    d866:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    d868:	6879      	ldr	r1, [r7, #4]
    d86a:	4803      	ldr	r0, [pc, #12]	; (d878 <usbdc_register_function+0x18>)
    d86c:	4b03      	ldr	r3, [pc, #12]	; (d87c <usbdc_register_function+0x1c>)
    d86e:	4798      	blx	r3
}
    d870:	bf00      	nop
    d872:	3708      	adds	r7, #8
    d874:	46bd      	mov	sp, r7
    d876:	bd80      	pop	{r7, pc}
    d878:	200010c0 	.word	0x200010c0
    d87c:	00003db1 	.word	0x00003db1

0000d880 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d880:	b580      	push	{r7, lr}
    d882:	b082      	sub	sp, #8
    d884:	af00      	add	r7, sp, #0
    d886:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    d888:	4b0f      	ldr	r3, [pc, #60]	; (d8c8 <usbdc_start+0x48>)
    d88a:	7e9b      	ldrb	r3, [r3, #26]
    d88c:	2b00      	cmp	r3, #0
    d88e:	d002      	beq.n	d896 <usbdc_start+0x16>
		return ERR_BUSY;
    d890:	f06f 0303 	mvn.w	r3, #3
    d894:	e013      	b.n	d8be <usbdc_start+0x3e>
	}

	if (desces) {
    d896:	687b      	ldr	r3, [r7, #4]
    d898:	2b00      	cmp	r3, #0
    d89a:	d00e      	beq.n	d8ba <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    d89c:	4a0a      	ldr	r2, [pc, #40]	; (d8c8 <usbdc_start+0x48>)
    d89e:	687b      	ldr	r3, [r7, #4]
    d8a0:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d8a2:	687b      	ldr	r3, [r7, #4]
    d8a4:	681b      	ldr	r3, [r3, #0]
    d8a6:	79da      	ldrb	r2, [r3, #7]
    d8a8:	4b07      	ldr	r3, [pc, #28]	; (d8c8 <usbdc_start+0x48>)
    d8aa:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d8ac:	4b06      	ldr	r3, [pc, #24]	; (d8c8 <usbdc_start+0x48>)
    d8ae:	2201      	movs	r2, #1
    d8b0:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d8b2:	4b06      	ldr	r3, [pc, #24]	; (d8cc <usbdc_start+0x4c>)
    d8b4:	4798      	blx	r3
	return ERR_NONE;
    d8b6:	2300      	movs	r3, #0
    d8b8:	e001      	b.n	d8be <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    d8ba:	f06f 0308 	mvn.w	r3, #8
}
    d8be:	4618      	mov	r0, r3
    d8c0:	3708      	adds	r7, #8
    d8c2:	46bd      	mov	sp, r7
    d8c4:	bd80      	pop	{r7, pc}
    d8c6:	bf00      	nop
    d8c8:	200010b0 	.word	0x200010b0
    d8cc:	000037fd 	.word	0x000037fd

0000d8d0 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    d8d0:	b580      	push	{r7, lr}
    d8d2:	af00      	add	r7, sp, #0
	usb_d_attach();
    d8d4:	4b01      	ldr	r3, [pc, #4]	; (d8dc <usbdc_attach+0xc>)
    d8d6:	4798      	blx	r3
}
    d8d8:	bf00      	nop
    d8da:	bd80      	pop	{r7, pc}
    d8dc:	00003811 	.word	0x00003811

0000d8e0 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    d8e0:	b480      	push	{r7}
    d8e2:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    d8e4:	4b03      	ldr	r3, [pc, #12]	; (d8f4 <usbdc_get_ctrl_buffer+0x14>)
    d8e6:	695b      	ldr	r3, [r3, #20]
}
    d8e8:	4618      	mov	r0, r3
    d8ea:	46bd      	mov	sp, r7
    d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8f0:	4770      	bx	lr
    d8f2:	bf00      	nop
    d8f4:	200010b0 	.word	0x200010b0

0000d8f8 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    d8f8:	b480      	push	{r7}
    d8fa:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    d8fc:	4b07      	ldr	r3, [pc, #28]	; (d91c <usbdc_get_state+0x24>)
    d8fe:	7e9b      	ldrb	r3, [r3, #26]
    d900:	f003 0310 	and.w	r3, r3, #16
    d904:	2b00      	cmp	r3, #0
    d906:	d001      	beq.n	d90c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    d908:	2310      	movs	r3, #16
    d90a:	e001      	b.n	d910 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    d90c:	4b03      	ldr	r3, [pc, #12]	; (d91c <usbdc_get_state+0x24>)
    d90e:	7e9b      	ldrb	r3, [r3, #26]
}
    d910:	4618      	mov	r0, r3
    d912:	46bd      	mov	sp, r7
    d914:	f85d 7b04 	ldr.w	r7, [sp], #4
    d918:	4770      	bx	lr
    d91a:	bf00      	nop
    d91c:	200010b0 	.word	0x200010b0

0000d920 <usb_get_u16>:
{
    d920:	b480      	push	{r7}
    d922:	b083      	sub	sp, #12
    d924:	af00      	add	r7, sp, #0
    d926:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d928:	687b      	ldr	r3, [r7, #4]
    d92a:	781b      	ldrb	r3, [r3, #0]
    d92c:	b29a      	uxth	r2, r3
    d92e:	687b      	ldr	r3, [r7, #4]
    d930:	3301      	adds	r3, #1
    d932:	781b      	ldrb	r3, [r3, #0]
    d934:	b29b      	uxth	r3, r3
    d936:	021b      	lsls	r3, r3, #8
    d938:	b29b      	uxth	r3, r3
    d93a:	4413      	add	r3, r2
    d93c:	b29b      	uxth	r3, r3
}
    d93e:	4618      	mov	r0, r3
    d940:	370c      	adds	r7, #12
    d942:	46bd      	mov	sp, r7
    d944:	f85d 7b04 	ldr.w	r7, [sp], #4
    d948:	4770      	bx	lr

0000d94a <usb_desc_len>:
{
    d94a:	b480      	push	{r7}
    d94c:	b083      	sub	sp, #12
    d94e:	af00      	add	r7, sp, #0
    d950:	6078      	str	r0, [r7, #4]
	return desc[0];
    d952:	687b      	ldr	r3, [r7, #4]
    d954:	781b      	ldrb	r3, [r3, #0]
}
    d956:	4618      	mov	r0, r3
    d958:	370c      	adds	r7, #12
    d95a:	46bd      	mov	sp, r7
    d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d960:	4770      	bx	lr

0000d962 <usb_desc_type>:
{
    d962:	b480      	push	{r7}
    d964:	b083      	sub	sp, #12
    d966:	af00      	add	r7, sp, #0
    d968:	6078      	str	r0, [r7, #4]
	return desc[1];
    d96a:	687b      	ldr	r3, [r7, #4]
    d96c:	3301      	adds	r3, #1
    d96e:	781b      	ldrb	r3, [r3, #0]
}
    d970:	4618      	mov	r0, r3
    d972:	370c      	adds	r7, #12
    d974:	46bd      	mov	sp, r7
    d976:	f85d 7b04 	ldr.w	r7, [sp], #4
    d97a:	4770      	bx	lr

0000d97c <usb_desc_next>:
{
    d97c:	b580      	push	{r7, lr}
    d97e:	b082      	sub	sp, #8
    d980:	af00      	add	r7, sp, #0
    d982:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d984:	6878      	ldr	r0, [r7, #4]
    d986:	4b05      	ldr	r3, [pc, #20]	; (d99c <usb_desc_next+0x20>)
    d988:	4798      	blx	r3
    d98a:	4603      	mov	r3, r0
    d98c:	461a      	mov	r2, r3
    d98e:	687b      	ldr	r3, [r7, #4]
    d990:	4413      	add	r3, r2
}
    d992:	4618      	mov	r0, r3
    d994:	3708      	adds	r7, #8
    d996:	46bd      	mov	sp, r7
    d998:	bd80      	pop	{r7, pc}
    d99a:	bf00      	nop
    d99c:	0000d94b 	.word	0x0000d94b

0000d9a0 <usb_cfg_desc_total_len>:
{
    d9a0:	b580      	push	{r7, lr}
    d9a2:	b082      	sub	sp, #8
    d9a4:	af00      	add	r7, sp, #0
    d9a6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d9a8:	687b      	ldr	r3, [r7, #4]
    d9aa:	3302      	adds	r3, #2
    d9ac:	4618      	mov	r0, r3
    d9ae:	4b03      	ldr	r3, [pc, #12]	; (d9bc <usb_cfg_desc_total_len+0x1c>)
    d9b0:	4798      	blx	r3
    d9b2:	4603      	mov	r3, r0
}
    d9b4:	4618      	mov	r0, r3
    d9b6:	3708      	adds	r7, #8
    d9b8:	46bd      	mov	sp, r7
    d9ba:	bd80      	pop	{r7, pc}
    d9bc:	0000d921 	.word	0x0000d921

0000d9c0 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    d9c0:	b580      	push	{r7, lr}
    d9c2:	b082      	sub	sp, #8
    d9c4:	af00      	add	r7, sp, #0
    d9c6:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d9c8:	6878      	ldr	r0, [r7, #4]
    d9ca:	4b05      	ldr	r3, [pc, #20]	; (d9e0 <usb_cfg_desc_next+0x20>)
    d9cc:	4798      	blx	r3
    d9ce:	4603      	mov	r3, r0
    d9d0:	461a      	mov	r2, r3
    d9d2:	687b      	ldr	r3, [r7, #4]
    d9d4:	4413      	add	r3, r2
}
    d9d6:	4618      	mov	r0, r3
    d9d8:	3708      	adds	r7, #8
    d9da:	46bd      	mov	sp, r7
    d9dc:	bd80      	pop	{r7, pc}
    d9de:	bf00      	nop
    d9e0:	0000d9a1 	.word	0x0000d9a1

0000d9e4 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    d9e4:	b580      	push	{r7, lr}
    d9e6:	b084      	sub	sp, #16
    d9e8:	af00      	add	r7, sp, #0
    d9ea:	60f8      	str	r0, [r7, #12]
    d9ec:	60b9      	str	r1, [r7, #8]
    d9ee:	4613      	mov	r3, r2
    d9f0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d9f2:	e015      	b.n	da20 <usb_find_desc+0x3c>
		_desc_len_check();
    d9f4:	68f8      	ldr	r0, [r7, #12]
    d9f6:	4b0f      	ldr	r3, [pc, #60]	; (da34 <usb_find_desc+0x50>)
    d9f8:	4798      	blx	r3
    d9fa:	4603      	mov	r3, r0
    d9fc:	2b01      	cmp	r3, #1
    d9fe:	d801      	bhi.n	da04 <usb_find_desc+0x20>
    da00:	2300      	movs	r3, #0
    da02:	e012      	b.n	da2a <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    da04:	68f8      	ldr	r0, [r7, #12]
    da06:	4b0c      	ldr	r3, [pc, #48]	; (da38 <usb_find_desc+0x54>)
    da08:	4798      	blx	r3
    da0a:	4603      	mov	r3, r0
    da0c:	461a      	mov	r2, r3
    da0e:	79fb      	ldrb	r3, [r7, #7]
    da10:	4293      	cmp	r3, r2
    da12:	d101      	bne.n	da18 <usb_find_desc+0x34>
			return desc;
    da14:	68fb      	ldr	r3, [r7, #12]
    da16:	e008      	b.n	da2a <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    da18:	68f8      	ldr	r0, [r7, #12]
    da1a:	4b08      	ldr	r3, [pc, #32]	; (da3c <usb_find_desc+0x58>)
    da1c:	4798      	blx	r3
    da1e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    da20:	68fa      	ldr	r2, [r7, #12]
    da22:	68bb      	ldr	r3, [r7, #8]
    da24:	429a      	cmp	r2, r3
    da26:	d3e5      	bcc.n	d9f4 <usb_find_desc+0x10>
	}
	return NULL;
    da28:	2300      	movs	r3, #0
}
    da2a:	4618      	mov	r0, r3
    da2c:	3710      	adds	r7, #16
    da2e:	46bd      	mov	sp, r7
    da30:	bd80      	pop	{r7, pc}
    da32:	bf00      	nop
    da34:	0000d94b 	.word	0x0000d94b
    da38:	0000d963 	.word	0x0000d963
    da3c:	0000d97d 	.word	0x0000d97d

0000da40 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    da40:	b580      	push	{r7, lr}
    da42:	b082      	sub	sp, #8
    da44:	af00      	add	r7, sp, #0
    da46:	6078      	str	r0, [r7, #4]
    da48:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    da4a:	e019      	b.n	da80 <usb_find_ep_desc+0x40>
		_desc_len_check();
    da4c:	6878      	ldr	r0, [r7, #4]
    da4e:	4b12      	ldr	r3, [pc, #72]	; (da98 <usb_find_ep_desc+0x58>)
    da50:	4798      	blx	r3
    da52:	4603      	mov	r3, r0
    da54:	2b01      	cmp	r3, #1
    da56:	d801      	bhi.n	da5c <usb_find_ep_desc+0x1c>
    da58:	2300      	movs	r3, #0
    da5a:	e018      	b.n	da8e <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    da5c:	6878      	ldr	r0, [r7, #4]
    da5e:	4b0f      	ldr	r3, [pc, #60]	; (da9c <usb_find_ep_desc+0x5c>)
    da60:	4798      	blx	r3
    da62:	4603      	mov	r3, r0
    da64:	2b04      	cmp	r3, #4
    da66:	d010      	beq.n	da8a <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    da68:	6878      	ldr	r0, [r7, #4]
    da6a:	4b0c      	ldr	r3, [pc, #48]	; (da9c <usb_find_ep_desc+0x5c>)
    da6c:	4798      	blx	r3
    da6e:	4603      	mov	r3, r0
    da70:	2b05      	cmp	r3, #5
    da72:	d101      	bne.n	da78 <usb_find_ep_desc+0x38>
			return desc;
    da74:	687b      	ldr	r3, [r7, #4]
    da76:	e00a      	b.n	da8e <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    da78:	6878      	ldr	r0, [r7, #4]
    da7a:	4b09      	ldr	r3, [pc, #36]	; (daa0 <usb_find_ep_desc+0x60>)
    da7c:	4798      	blx	r3
    da7e:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    da80:	687a      	ldr	r2, [r7, #4]
    da82:	683b      	ldr	r3, [r7, #0]
    da84:	429a      	cmp	r2, r3
    da86:	d3e1      	bcc.n	da4c <usb_find_ep_desc+0xc>
    da88:	e000      	b.n	da8c <usb_find_ep_desc+0x4c>
			break;
    da8a:	bf00      	nop
	}
	return NULL;
    da8c:	2300      	movs	r3, #0
}
    da8e:	4618      	mov	r0, r3
    da90:	3708      	adds	r7, #8
    da92:	46bd      	mov	sp, r7
    da94:	bd80      	pop	{r7, pc}
    da96:	bf00      	nop
    da98:	0000d94b 	.word	0x0000d94b
    da9c:	0000d963 	.word	0x0000d963
    daa0:	0000d97d 	.word	0x0000d97d

0000daa4 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    daa4:	b580      	push	{r7, lr}
    daa6:	b084      	sub	sp, #16
    daa8:	af00      	add	r7, sp, #0
    daaa:	60f8      	str	r0, [r7, #12]
    daac:	60b9      	str	r1, [r7, #8]
    daae:	4613      	mov	r3, r2
    dab0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    dab2:	2202      	movs	r2, #2
    dab4:	68b9      	ldr	r1, [r7, #8]
    dab6:	68f8      	ldr	r0, [r7, #12]
    dab8:	4b15      	ldr	r3, [pc, #84]	; (db10 <usb_find_cfg_desc+0x6c>)
    daba:	4798      	blx	r3
    dabc:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    dabe:	68fb      	ldr	r3, [r7, #12]
    dac0:	2b00      	cmp	r3, #0
    dac2:	d11a      	bne.n	dafa <usb_find_cfg_desc+0x56>
		return NULL;
    dac4:	2300      	movs	r3, #0
    dac6:	e01f      	b.n	db08 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    dac8:	68f8      	ldr	r0, [r7, #12]
    daca:	4b12      	ldr	r3, [pc, #72]	; (db14 <usb_find_cfg_desc+0x70>)
    dacc:	4798      	blx	r3
    dace:	4603      	mov	r3, r0
    dad0:	2b01      	cmp	r3, #1
    dad2:	d801      	bhi.n	dad8 <usb_find_cfg_desc+0x34>
    dad4:	2300      	movs	r3, #0
    dad6:	e017      	b.n	db08 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    dad8:	68fb      	ldr	r3, [r7, #12]
    dada:	3301      	adds	r3, #1
    dadc:	781b      	ldrb	r3, [r3, #0]
    dade:	2b02      	cmp	r3, #2
    dae0:	d110      	bne.n	db04 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    dae2:	68fb      	ldr	r3, [r7, #12]
    dae4:	3305      	adds	r3, #5
    dae6:	781b      	ldrb	r3, [r3, #0]
    dae8:	79fa      	ldrb	r2, [r7, #7]
    daea:	429a      	cmp	r2, r3
    daec:	d101      	bne.n	daf2 <usb_find_cfg_desc+0x4e>
			return desc;
    daee:	68fb      	ldr	r3, [r7, #12]
    daf0:	e00a      	b.n	db08 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    daf2:	68f8      	ldr	r0, [r7, #12]
    daf4:	4b08      	ldr	r3, [pc, #32]	; (db18 <usb_find_cfg_desc+0x74>)
    daf6:	4798      	blx	r3
    daf8:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    dafa:	68fa      	ldr	r2, [r7, #12]
    dafc:	68bb      	ldr	r3, [r7, #8]
    dafe:	429a      	cmp	r2, r3
    db00:	d3e2      	bcc.n	dac8 <usb_find_cfg_desc+0x24>
    db02:	e000      	b.n	db06 <usb_find_cfg_desc+0x62>
			break;
    db04:	bf00      	nop
	}
	return NULL;
    db06:	2300      	movs	r3, #0
}
    db08:	4618      	mov	r0, r3
    db0a:	3710      	adds	r7, #16
    db0c:	46bd      	mov	sp, r7
    db0e:	bd80      	pop	{r7, pc}
    db10:	0000d9e5 	.word	0x0000d9e5
    db14:	0000d94b 	.word	0x0000d94b
    db18:	0000d9c1 	.word	0x0000d9c1

0000db1c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    db1c:	b580      	push	{r7, lr}
    db1e:	b086      	sub	sp, #24
    db20:	af00      	add	r7, sp, #0
    db22:	60f8      	str	r0, [r7, #12]
    db24:	60b9      	str	r1, [r7, #8]
    db26:	4613      	mov	r3, r2
    db28:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    db2a:	2300      	movs	r3, #0
    db2c:	75fb      	strb	r3, [r7, #23]
    db2e:	e020      	b.n	db72 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    db30:	2203      	movs	r2, #3
    db32:	68b9      	ldr	r1, [r7, #8]
    db34:	68f8      	ldr	r0, [r7, #12]
    db36:	4b13      	ldr	r3, [pc, #76]	; (db84 <usb_find_str_desc+0x68>)
    db38:	4798      	blx	r3
    db3a:	60f8      	str	r0, [r7, #12]
		if (desc) {
    db3c:	68fb      	ldr	r3, [r7, #12]
    db3e:	2b00      	cmp	r3, #0
    db40:	d015      	beq.n	db6e <usb_find_str_desc+0x52>
			_desc_len_check();
    db42:	68f8      	ldr	r0, [r7, #12]
    db44:	4b10      	ldr	r3, [pc, #64]	; (db88 <usb_find_str_desc+0x6c>)
    db46:	4798      	blx	r3
    db48:	4603      	mov	r3, r0
    db4a:	2b01      	cmp	r3, #1
    db4c:	d801      	bhi.n	db52 <usb_find_str_desc+0x36>
    db4e:	2300      	movs	r3, #0
    db50:	e014      	b.n	db7c <usb_find_str_desc+0x60>
			if (i == str_index) {
    db52:	7dfa      	ldrb	r2, [r7, #23]
    db54:	79fb      	ldrb	r3, [r7, #7]
    db56:	429a      	cmp	r2, r3
    db58:	d101      	bne.n	db5e <usb_find_str_desc+0x42>
				return desc;
    db5a:	68fb      	ldr	r3, [r7, #12]
    db5c:	e00e      	b.n	db7c <usb_find_str_desc+0x60>
			}
			i++;
    db5e:	7dfb      	ldrb	r3, [r7, #23]
    db60:	3301      	adds	r3, #1
    db62:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    db64:	68f8      	ldr	r0, [r7, #12]
    db66:	4b09      	ldr	r3, [pc, #36]	; (db8c <usb_find_str_desc+0x70>)
    db68:	4798      	blx	r3
    db6a:	60f8      	str	r0, [r7, #12]
    db6c:	e001      	b.n	db72 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    db6e:	2300      	movs	r3, #0
    db70:	e004      	b.n	db7c <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    db72:	68fa      	ldr	r2, [r7, #12]
    db74:	68bb      	ldr	r3, [r7, #8]
    db76:	429a      	cmp	r2, r3
    db78:	d3da      	bcc.n	db30 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    db7a:	2300      	movs	r3, #0
}
    db7c:	4618      	mov	r0, r3
    db7e:	3718      	adds	r7, #24
    db80:	46bd      	mov	sp, r7
    db82:	bd80      	pop	{r7, pc}
    db84:	0000d9e5 	.word	0x0000d9e5
    db88:	0000d94b 	.word	0x0000d94b
    db8c:	0000d97d 	.word	0x0000d97d

0000db90 <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
    db90:	b480      	push	{r7}
    db92:	b083      	sub	sp, #12
    db94:	af00      	add	r7, sp, #0
    db96:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
    db98:	4b04      	ldr	r3, [pc, #16]	; (dbac <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
    db9a:	681b      	ldr	r3, [r3, #0]
    db9c:	2201      	movs	r2, #1
    db9e:	709a      	strb	r2, [r3, #2]
	asm("nop");
    dba0:	bf00      	nop
}
    dba2:	bf00      	nop
    dba4:	370c      	adds	r7, #12
    dba6:	46bd      	mov	sp, r7
    dba8:	bc80      	pop	{r7}
    dbaa:	4770      	bx	lr
    dbac:	200010d0 	.word	0x200010d0

0000dbb0 <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
    dbb0:	b480      	push	{r7}
    dbb2:	b083      	sub	sp, #12
    dbb4:	af00      	add	r7, sp, #0
    dbb6:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
    dbb8:	687b      	ldr	r3, [r7, #4]
    dbba:	4618      	mov	r0, r3
    dbbc:	370c      	adds	r7, #12
    dbbe:	46bd      	mov	sp, r7
    dbc0:	bc80      	pop	{r7}
    dbc2:	4770      	bx	lr

0000dbc4 <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
    dbc4:	b480      	push	{r7}
    dbc6:	b083      	sub	sp, #12
    dbc8:	af00      	add	r7, sp, #0
    dbca:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
    dbcc:	687b      	ldr	r3, [r7, #4]
    dbce:	4618      	mov	r0, r3
    dbd0:	370c      	adds	r7, #12
    dbd2:	46bd      	mov	sp, r7
    dbd4:	bc80      	pop	{r7}
    dbd6:	4770      	bx	lr

0000dbd8 <_ZN13LTC2983_Class4InitEmP6LT_SPI>:
	ready=true;	
	
	return	SelfTest();
}

bool LTC2983_Class::Init(uint32_t csPin,LT_SPI* spiLite){
    dbd8:	b580      	push	{r7, lr}
    dbda:	b084      	sub	sp, #16
    dbdc:	af00      	add	r7, sp, #0
    dbde:	60f8      	str	r0, [r7, #12]
    dbe0:	60b9      	str	r1, [r7, #8]
    dbe2:	607a      	str	r2, [r7, #4]
	
	ptrLTCClass=this;
    dbe4:	4a1c      	ldr	r2, [pc, #112]	; (dc58 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x80>)
    dbe6:	68fb      	ldr	r3, [r7, #12]
    dbe8:	6013      	str	r3, [r2, #0]
	chipSelect=csPin;
    dbea:	68fb      	ldr	r3, [r7, #12]
    dbec:	68ba      	ldr	r2, [r7, #8]
    dbee:	659a      	str	r2, [r3, #88]	; 0x58
	spiLT=spiLite;
    dbf0:	68fb      	ldr	r3, [r7, #12]
    dbf2:	687a      	ldr	r2, [r7, #4]
    dbf4:	621a      	str	r2, [r3, #32]
	rx=spiLT->rxLiteBuffer;
    dbf6:	68fb      	ldr	r3, [r7, #12]
    dbf8:	6a1b      	ldr	r3, [r3, #32]
    dbfa:	68da      	ldr	r2, [r3, #12]
    dbfc:	68fb      	ldr	r3, [r7, #12]
    dbfe:	62da      	str	r2, [r3, #44]	; 0x2c
	tx=spiLT->txLiteBuffer;
    dc00:	68fb      	ldr	r3, [r7, #12]
    dc02:	6a1b      	ldr	r3, [r3, #32]
    dc04:	689a      	ldr	r2, [r3, #8]
    dc06:	68fb      	ldr	r3, [r7, #12]
    dc08:	629a      	str	r2, [r3, #40]	; 0x28
	auxTimer=&hvacTimer;
    dc0a:	68fb      	ldr	r3, [r7, #12]
    dc0c:	4a13      	ldr	r2, [pc, #76]	; (dc5c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x84>)
    dc0e:	631a      	str	r2, [r3, #48]	; 0x30
	activeChannels[0]=4;
    dc10:	68fb      	ldr	r3, [r7, #12]
    dc12:	2204      	movs	r2, #4
    dc14:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=9;
    dc16:	68fb      	ldr	r3, [r7, #12]
    dc18:	2209      	movs	r2, #9
    dc1a:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=14;
    dc1c:	68fb      	ldr	r3, [r7, #12]
    dc1e:	220e      	movs	r2, #14
    dc20:	715a      	strb	r2, [r3, #5]
	activeChannels[3]=19;
    dc22:	68fb      	ldr	r3, [r7, #12]
    dc24:	2213      	movs	r2, #19
    dc26:	719a      	strb	r2, [r3, #6]
	delay_ms(200);
    dc28:	20c8      	movs	r0, #200	; 0xc8
    dc2a:	4b0d      	ldr	r3, [pc, #52]	; (dc60 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x88>)
    dc2c:	4798      	blx	r3
	temperatureTimer.Init();
    dc2e:	480d      	ldr	r0, [pc, #52]	; (dc64 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x8c>)
    dc30:	4b0d      	ldr	r3, [pc, #52]	; (dc68 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x90>)
    dc32:	4798      	blx	r3
	configure_channels();
    dc34:	68f8      	ldr	r0, [r7, #12]
    dc36:	4b0d      	ldr	r3, [pc, #52]	; (dc6c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x94>)
    dc38:	4798      	blx	r3
	configure_global_parameters();
    dc3a:	68f8      	ldr	r0, [r7, #12]
    dc3c:	4b0c      	ldr	r3, [pc, #48]	; (dc70 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x98>)
    dc3e:	4798      	blx	r3
	//while(!IsConverterDone());
	ready=true;
    dc40:	68fb      	ldr	r3, [r7, #12]
    dc42:	2201      	movs	r2, #1
    dc44:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
    dc46:	68f8      	ldr	r0, [r7, #12]
    dc48:	4b0a      	ldr	r3, [pc, #40]	; (dc74 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x9c>)
    dc4a:	4798      	blx	r3
    dc4c:	4603      	mov	r3, r0
}
    dc4e:	4618      	mov	r0, r3
    dc50:	3710      	adds	r7, #16
    dc52:	46bd      	mov	sp, r7
    dc54:	bd80      	pop	{r7, pc}
    dc56:	bf00      	nop
    dc58:	200010d0 	.word	0x200010d0
    dc5c:	2000130c 	.word	0x2000130c
    dc60:	00002509 	.word	0x00002509
    dc64:	200012d4 	.word	0x200012d4
    dc68:	0000eef5 	.word	0x0000eef5
    dc6c:	0000e081 	.word	0x0000e081
    dc70:	0000e139 	.word	0x0000e139
    dc74:	0000e171 	.word	0x0000e171

0000dc78 <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
    dc78:	b590      	push	{r4, r7, lr}
    dc7a:	b089      	sub	sp, #36	; 0x24
    dc7c:	af02      	add	r7, sp, #8
    dc7e:	60f8      	str	r0, [r7, #12]
    dc80:	60b9      	str	r1, [r7, #8]
    dc82:	603b      	str	r3, [r7, #0]
    dc84:	4613      	mov	r3, r2
    dc86:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
    dc88:	79fb      	ldrb	r3, [r7, #7]
    dc8a:	461a      	mov	r2, r3
    dc8c:	f44f 7100 	mov.w	r1, #512	; 0x200
    dc90:	68f8      	ldr	r0, [r7, #12]
    dc92:	4b0b      	ldr	r3, [pc, #44]	; (dcc0 <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
    dc94:	4798      	blx	r3
    dc96:	4603      	mov	r3, r0
    dc98:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
    dc9a:	8afa      	ldrh	r2, [r7, #22]
    dc9c:	683b      	ldr	r3, [r7, #0]
    dc9e:	9300      	str	r3, [sp, #0]
    dca0:	4613      	mov	r3, r2
    dca2:	2202      	movs	r2, #2
    dca4:	68b9      	ldr	r1, [r7, #8]
    dca6:	68f8      	ldr	r0, [r7, #12]
    dca8:	4c06      	ldr	r4, [pc, #24]	; (dcc4 <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
    dcaa:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
    dcac:	8afb      	ldrh	r3, [r7, #22]
    dcae:	79fa      	ldrb	r2, [r7, #7]
    dcb0:	68b9      	ldr	r1, [r7, #8]
    dcb2:	68f8      	ldr	r0, [r7, #12]
    dcb4:	4c04      	ldr	r4, [pc, #16]	; (dcc8 <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
    dcb6:	47a0      	blx	r4
}
    dcb8:	bf00      	nop
    dcba:	371c      	adds	r7, #28
    dcbc:	46bd      	mov	sp, r7
    dcbe:	bd90      	pop	{r4, r7, pc}
    dcc0:	0000e055 	.word	0x0000e055
    dcc4:	0000df15 	.word	0x0000df15
    dcc8:	0000dd19 	.word	0x0000dd19

0000dccc <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
    dccc:	b590      	push	{r4, r7, lr}
    dcce:	b087      	sub	sp, #28
    dcd0:	af02      	add	r7, sp, #8
    dcd2:	6078      	str	r0, [r7, #4]
    dcd4:	460b      	mov	r3, r1
    dcd6:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
    dcd8:	78fb      	ldrb	r3, [r7, #3]
    dcda:	687a      	ldr	r2, [r7, #4]
    dcdc:	4413      	add	r3, r2
    dcde:	78db      	ldrb	r3, [r3, #3]
    dce0:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
    dce2:	687b      	ldr	r3, [r7, #4]
    dce4:	2200      	movs	r2, #0
    dce6:	705a      	strb	r2, [r3, #1]
	ready=false;
    dce8:	687b      	ldr	r3, [r7, #4]
    dcea:	2200      	movs	r2, #0
    dcec:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
    dcee:	687b      	ldr	r3, [r7, #4]
    dcf0:	6d99      	ldr	r1, [r3, #88]	; 0x58
    dcf2:	7bfb      	ldrb	r3, [r7, #15]
    dcf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    dcf8:	b2db      	uxtb	r3, r3
    dcfa:	9300      	str	r3, [sp, #0]
    dcfc:	2300      	movs	r3, #0
    dcfe:	2202      	movs	r2, #2
    dd00:	6878      	ldr	r0, [r7, #4]
    dd02:	4c04      	ldr	r4, [pc, #16]	; (dd14 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
    dd04:	47a0      	blx	r4
	channelOnProcess=channel_number;
    dd06:	687b      	ldr	r3, [r7, #4]
    dd08:	7bfa      	ldrb	r2, [r7, #15]
    dd0a:	721a      	strb	r2, [r3, #8]
	//wait_for_process_to_finish(chip_select);
}
    dd0c:	bf00      	nop
    dd0e:	3714      	adds	r7, #20
    dd10:	46bd      	mov	sp, r7
    dd12:	bd90      	pop	{r4, r7, pc}
    dd14:	0000dfe5 	.word	0x0000dfe5

0000dd18 <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
    dd18:	b590      	push	{r4, r7, lr}
    dd1a:	b089      	sub	sp, #36	; 0x24
    dd1c:	af02      	add	r7, sp, #8
    dd1e:	60f8      	str	r0, [r7, #12]
    dd20:	60b9      	str	r1, [r7, #8]
    dd22:	4611      	mov	r1, r2
    dd24:	461a      	mov	r2, r3
    dd26:	460b      	mov	r3, r1
    dd28:	71fb      	strb	r3, [r7, #7]
    dd2a:	4613      	mov	r3, r2
    dd2c:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
    dd2e:	88ba      	ldrh	r2, [r7, #4]
    dd30:	2300      	movs	r3, #0
    dd32:	9300      	str	r3, [sp, #0]
    dd34:	4613      	mov	r3, r2
    dd36:	2203      	movs	r2, #3
    dd38:	68b9      	ldr	r1, [r7, #8]
    dd3a:	68f8      	ldr	r0, [r7, #12]
    dd3c:	4c03      	ldr	r4, [pc, #12]	; (dd4c <_ZN13LTC2983_Class20print_config_channelEmht+0x34>)
    dd3e:	47a0      	blx	r4
    dd40:	6178      	str	r0, [r7, #20]
	// 24 LSB's are conversion result
	
// 	usb<<"register value: ";
// 	usb.println(raw_data,HEX);
	
}
    dd42:	bf00      	nop
    dd44:	371c      	adds	r7, #28
    dd46:	46bd      	mov	sp, r7
    dd48:	bd90      	pop	{r4, r7, pc}
    dd4a:	bf00      	nop
    dd4c:	0000df15 	.word	0x0000df15

0000dd50 <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
    dd50:	b590      	push	{r4, r7, lr}
    dd52:	b085      	sub	sp, #20
    dd54:	af02      	add	r7, sp, #8
    dd56:	6078      	str	r0, [r7, #4]
    dd58:	460b      	mov	r3, r1
    dd5a:	70fb      	strb	r3, [r7, #3]
    dd5c:	4613      	mov	r3, r2
    dd5e:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
    dd60:	78fb      	ldrb	r3, [r7, #3]
    dd62:	461a      	mov	r2, r3
    dd64:	2110      	movs	r1, #16
    dd66:	6878      	ldr	r0, [r7, #4]
    dd68:	4b17      	ldr	r3, [pc, #92]	; (ddc8 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
    dd6a:	4798      	blx	r3
    dd6c:	4603      	mov	r3, r0
    dd6e:	461a      	mov	r2, r3
    dd70:	687b      	ldr	r3, [r7, #4]
    dd72:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
    dd76:	687b      	ldr	r3, [r7, #4]
    dd78:	6d99      	ldr	r1, [r3, #88]	; 0x58
    dd7a:	687b      	ldr	r3, [r7, #4]
    dd7c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
    dd80:	2300      	movs	r3, #0
    dd82:	9300      	str	r3, [sp, #0]
    dd84:	4613      	mov	r3, r2
    dd86:	2203      	movs	r2, #3
    dd88:	6878      	ldr	r0, [r7, #4]
    dd8a:	4c10      	ldr	r4, [pc, #64]	; (ddcc <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
    dd8c:	47a0      	blx	r4
    dd8e:	4602      	mov	r2, r0
    dd90:	687b      	ldr	r3, [r7, #4]
    dd92:	655a      	str	r2, [r3, #84]	; 0x54


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
    dd94:	687b      	ldr	r3, [r7, #4]
    dd96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    dd98:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    dd9c:	687b      	ldr	r3, [r7, #4]
    dd9e:	651a      	str	r2, [r3, #80]	; 0x50
	ConvertResult(raw_conversion_result, channel_number, channel_output);
    dda0:	687b      	ldr	r3, [r7, #4]
    dda2:	6d19      	ldr	r1, [r3, #80]	; 0x50
    dda4:	78bb      	ldrb	r3, [r7, #2]
    dda6:	78fa      	ldrb	r2, [r7, #3]
    dda8:	6878      	ldr	r0, [r7, #4]
    ddaa:	4c09      	ldr	r4, [pc, #36]	; (ddd0 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
    ddac:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
    ddae:	687b      	ldr	r3, [r7, #4]
    ddb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    ddb2:	0e1b      	lsrs	r3, r3, #24
    ddb4:	b2da      	uxtb	r2, r3
    ddb6:	687b      	ldr	r3, [r7, #4]
    ddb8:	71da      	strb	r2, [r3, #7]
	return scaled_result;
    ddba:	687b      	ldr	r3, [r7, #4]
    ddbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
}
    ddbe:	4618      	mov	r0, r3
    ddc0:	370c      	adds	r7, #12
    ddc2:	46bd      	mov	sp, r7
    ddc4:	bd90      	pop	{r4, r7, pc}
    ddc6:	bf00      	nop
    ddc8:	0000e055 	.word	0x0000e055
    ddcc:	0000df15 	.word	0x0000df15
    ddd0:	0000de29 	.word	0x0000de29

0000ddd4 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh>:

float LTC2983_Class::GetSingleChannelResultIndex( uint8_t channel_index){
    ddd4:	b580      	push	{r7, lr}
    ddd6:	b082      	sub	sp, #8
    ddd8:	af00      	add	r7, sp, #0
    ddda:	6078      	str	r0, [r7, #4]
    dddc:	460b      	mov	r3, r1
    ddde:	70fb      	strb	r3, [r7, #3]
	return GetSingleChannelResult(activeChannels[channel_index]);
    dde0:	78fb      	ldrb	r3, [r7, #3]
    dde2:	687a      	ldr	r2, [r7, #4]
    dde4:	4413      	add	r3, r2
    dde6:	78db      	ldrb	r3, [r3, #3]
    dde8:	4619      	mov	r1, r3
    ddea:	6878      	ldr	r0, [r7, #4]
    ddec:	4b03      	ldr	r3, [pc, #12]	; (ddfc <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh+0x28>)
    ddee:	4798      	blx	r3
    ddf0:	4603      	mov	r3, r0
}
    ddf2:	4618      	mov	r0, r3
    ddf4:	3708      	adds	r7, #8
    ddf6:	46bd      	mov	sp, r7
    ddf8:	bd80      	pop	{r7, pc}
    ddfa:	bf00      	nop
    ddfc:	0000de01 	.word	0x0000de01

0000de00 <_ZN13LTC2983_Class22GetSingleChannelResultEh>:

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
    de00:	b580      	push	{r7, lr}
    de02:	b082      	sub	sp, #8
    de04:	af00      	add	r7, sp, #0
    de06:	6078      	str	r0, [r7, #4]
    de08:	460b      	mov	r3, r1
    de0a:	70fb      	strb	r3, [r7, #3]
	
	return GetSingleChannelResult(channel_number,TEMPERATURE);
    de0c:	78fb      	ldrb	r3, [r7, #3]
    de0e:	2202      	movs	r2, #2
    de10:	4619      	mov	r1, r3
    de12:	6878      	ldr	r0, [r7, #4]
    de14:	4b03      	ldr	r3, [pc, #12]	; (de24 <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
    de16:	4798      	blx	r3
    de18:	4603      	mov	r3, r0
}
    de1a:	4618      	mov	r0, r3
    de1c:	3708      	adds	r7, #8
    de1e:	46bd      	mov	sp, r7
    de20:	bd80      	pop	{r7, pc}
    de22:	bf00      	nop
    de24:	0000dd51 	.word	0x0000dd51

0000de28 <_ZN13LTC2983_Class13ConvertResultEmhh>:
// 		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
    de28:	b580      	push	{r7, lr}
    de2a:	b084      	sub	sp, #16
    de2c:	af00      	add	r7, sp, #0
    de2e:	60f8      	str	r0, [r7, #12]
    de30:	60b9      	str	r1, [r7, #8]
    de32:	4611      	mov	r1, r2
    de34:	461a      	mov	r2, r3
    de36:	460b      	mov	r3, r1
    de38:	71fb      	strb	r3, [r7, #7]
    de3a:	4613      	mov	r3, r2
    de3c:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
    de3e:	68ba      	ldr	r2, [r7, #8]
    de40:	68fb      	ldr	r3, [r7, #12]
    de42:	661a      	str	r2, [r3, #96]	; 0x60
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
    de44:	68fb      	ldr	r3, [r7, #12]
    de46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    de48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    de4c:	2b00      	cmp	r3, #0
    de4e:	d006      	beq.n	de5e <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
    de50:	68fb      	ldr	r3, [r7, #12]
    de52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    de54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    de58:	461a      	mov	r2, r3
    de5a:	68fb      	ldr	r3, [r7, #12]
    de5c:	661a      	str	r2, [r3, #96]	; 0x60

	// Translate and print result
	if (channel_output == TEMPERATURE)
    de5e:	79bb      	ldrb	r3, [r7, #6]
    de60:	2b02      	cmp	r3, #2
    de62:	d11d      	bne.n	dea0 <_ZN13LTC2983_Class13ConvertResultEmhh+0x78>
	{
		scaled_result= float(signed_data) / 1024;
    de64:	68fb      	ldr	r3, [r7, #12]
    de66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    de68:	4b18      	ldr	r3, [pc, #96]	; (decc <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
    de6a:	4610      	mov	r0, r2
    de6c:	4798      	blx	r3
    de6e:	4602      	mov	r2, r0
    de70:	4b17      	ldr	r3, [pc, #92]	; (ded0 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
    de72:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
    de76:	4610      	mov	r0, r2
    de78:	4798      	blx	r3
    de7a:	4603      	mov	r3, r0
    de7c:	461a      	mov	r2, r3
    de7e:	68fb      	ldr	r3, [r7, #12]
    de80:	65da      	str	r2, [r3, #92]	; 0x5c
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
    de82:	79fb      	ldrb	r3, [r7, #7]
    de84:	4619      	mov	r1, r3
    de86:	68f8      	ldr	r0, [r7, #12]
    de88:	4b12      	ldr	r3, [pc, #72]	; (ded4 <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
    de8a:	4798      	blx	r3
    de8c:	4603      	mov	r3, r0
    de8e:	4618      	mov	r0, r3
    de90:	68fb      	ldr	r3, [r7, #12]
    de92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    de94:	68f9      	ldr	r1, [r7, #12]
    de96:	1c83      	adds	r3, r0, #2
    de98:	009b      	lsls	r3, r3, #2
    de9a:	440b      	add	r3, r1
    de9c:	605a      	str	r2, [r3, #4]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
    de9e:	e011      	b.n	dec4 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
	else if (channel_output == VOLTAGE)
    dea0:	79bb      	ldrb	r3, [r7, #6]
    dea2:	2b01      	cmp	r3, #1
    dea4:	d10e      	bne.n	dec4 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
		scaled_result = float(signed_data) / 2097152;
    dea6:	68fb      	ldr	r3, [r7, #12]
    dea8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    deaa:	4b08      	ldr	r3, [pc, #32]	; (decc <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
    deac:	4610      	mov	r0, r2
    deae:	4798      	blx	r3
    deb0:	4602      	mov	r2, r0
    deb2:	4b07      	ldr	r3, [pc, #28]	; (ded0 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
    deb4:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
    deb8:	4610      	mov	r0, r2
    deba:	4798      	blx	r3
    debc:	4603      	mov	r3, r0
    debe:	461a      	mov	r2, r3
    dec0:	68fb      	ldr	r3, [r7, #12]
    dec2:	65da      	str	r2, [r3, #92]	; 0x5c
}
    dec4:	bf00      	nop
    dec6:	3710      	adds	r7, #16
    dec8:	46bd      	mov	sp, r7
    deca:	bd80      	pop	{r7, pc}
    decc:	000106a5 	.word	0x000106a5
    ded0:	000108b5 	.word	0x000108b5
    ded4:	0000ded9 	.word	0x0000ded9

0000ded8 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
    ded8:	b480      	push	{r7}
    deda:	b085      	sub	sp, #20
    dedc:	af00      	add	r7, sp, #0
    dede:	6078      	str	r0, [r7, #4]
    dee0:	460b      	mov	r3, r1
    dee2:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
    dee4:	2300      	movs	r3, #0
    dee6:	73fb      	strb	r3, [r7, #15]
    dee8:	7bfb      	ldrb	r3, [r7, #15]
    deea:	2b03      	cmp	r3, #3
    deec:	dc0c      	bgt.n	df08 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x30>
	{
		if (activeChannels[ii]==chn)
    deee:	7bfb      	ldrb	r3, [r7, #15]
    def0:	687a      	ldr	r2, [r7, #4]
    def2:	4413      	add	r3, r2
    def4:	78db      	ldrb	r3, [r3, #3]
    def6:	78fa      	ldrb	r2, [r7, #3]
    def8:	429a      	cmp	r2, r3
    defa:	d101      	bne.n	df00 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x28>
		{
			return ii;
    defc:	7bfb      	ldrb	r3, [r7, #15]
    defe:	e004      	b.n	df0a <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x32>
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
    df00:	7bfb      	ldrb	r3, [r7, #15]
    df02:	3301      	adds	r3, #1
    df04:	73fb      	strb	r3, [r7, #15]
    df06:	e7ef      	b.n	dee8 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x10>
		}
	}
	return 0;
    df08:	2300      	movs	r3, #0
}
    df0a:	4618      	mov	r0, r3
    df0c:	3714      	adds	r7, #20
    df0e:	46bd      	mov	sp, r7
    df10:	bc80      	pop	{r7}
    df12:	4770      	bx	lr

0000df14 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
    df14:	b590      	push	{r4, r7, lr}
    df16:	b089      	sub	sp, #36	; 0x24
    df18:	af02      	add	r7, sp, #8
    df1a:	60f8      	str	r0, [r7, #12]
    df1c:	60b9      	str	r1, [r7, #8]
    df1e:	4611      	mov	r1, r2
    df20:	461a      	mov	r2, r3
    df22:	460b      	mov	r3, r1
    df24:	71fb      	strb	r3, [r7, #7]
    df26:	4613      	mov	r3, r2
    df28:	80bb      	strh	r3, [r7, #4]

	uint8_t i,rx2[LTC2983_SPI_BUFFER_SIZE];
	
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
    df2a:	2300      	movs	r3, #0
    df2c:	75fb      	strb	r3, [r7, #23]
    df2e:	7dfb      	ldrb	r3, [r7, #23]
    df30:	2b06      	cmp	r3, #6
    df32:	dc09      	bgt.n	df48 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x34>
	{
		rx[i]=0;
    df34:	68fb      	ldr	r3, [r7, #12]
    df36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    df38:	7dfb      	ldrb	r3, [r7, #23]
    df3a:	4413      	add	r3, r2
    df3c:	2200      	movs	r2, #0
    df3e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
    df40:	7dfb      	ldrb	r3, [r7, #23]
    df42:	3301      	adds	r3, #1
    df44:	75fb      	strb	r3, [r7, #23]
    df46:	e7f2      	b.n	df2e <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x1a>
	}

	tx[0] = ram_read_or_write;
    df48:	68fb      	ldr	r3, [r7, #12]
    df4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df4c:	79fa      	ldrb	r2, [r7, #7]
    df4e:	701a      	strb	r2, [r3, #0]
	tx[1] = highByte(start_address);
    df50:	68fb      	ldr	r3, [r7, #12]
    df52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df54:	3301      	adds	r3, #1
    df56:	88ba      	ldrh	r2, [r7, #4]
    df58:	1212      	asrs	r2, r2, #8
    df5a:	b2d2      	uxtb	r2, r2
    df5c:	701a      	strb	r2, [r3, #0]
	tx[2] = lowByte(start_address);
    df5e:	68fb      	ldr	r3, [r7, #12]
    df60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df62:	3302      	adds	r3, #2
    df64:	88ba      	ldrh	r2, [r7, #4]
    df66:	b2d2      	uxtb	r2, r2
    df68:	701a      	strb	r2, [r3, #0]
	tx[3] = (uint8_t)(input_data >> 24);
    df6a:	68fb      	ldr	r3, [r7, #12]
    df6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df6e:	3303      	adds	r3, #3
    df70:	6aba      	ldr	r2, [r7, #40]	; 0x28
    df72:	0e12      	lsrs	r2, r2, #24
    df74:	b2d2      	uxtb	r2, r2
    df76:	701a      	strb	r2, [r3, #0]
	tx[4] = (uint8_t)(input_data >> 16);
    df78:	68fb      	ldr	r3, [r7, #12]
    df7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df7c:	3304      	adds	r3, #4
    df7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    df80:	0c12      	lsrs	r2, r2, #16
    df82:	b2d2      	uxtb	r2, r2
    df84:	701a      	strb	r2, [r3, #0]
	tx[5] = (uint8_t)(input_data >> 8);
    df86:	68fb      	ldr	r3, [r7, #12]
    df88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df8a:	3305      	adds	r3, #5
    df8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    df8e:	0a12      	lsrs	r2, r2, #8
    df90:	b2d2      	uxtb	r2, r2
    df92:	701a      	strb	r2, [r3, #0]
	tx[6] = (uint8_t) input_data;
    df94:	68fb      	ldr	r3, [r7, #12]
    df96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df98:	3306      	adds	r3, #6
    df9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    df9c:	b2d2      	uxtb	r2, r2
    df9e:	701a      	strb	r2, [r3, #0]

	spiLT->spi_transfer_block(chip_select,tx,rx2, LTC2983_SPI_BUFFER_SIZE);
    dfa0:	68fb      	ldr	r3, [r7, #12]
    dfa2:	6a18      	ldr	r0, [r3, #32]
    dfa4:	68fb      	ldr	r3, [r7, #12]
    dfa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dfa8:	f107 0110 	add.w	r1, r7, #16
    dfac:	2307      	movs	r3, #7
    dfae:	9300      	str	r3, [sp, #0]
    dfb0:	460b      	mov	r3, r1
    dfb2:	68b9      	ldr	r1, [r7, #8]
    dfb4:	4c0a      	ldr	r4, [pc, #40]	; (dfe0 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0xcc>)
    dfb6:	47a0      	blx	r4

	output_data = (uint32_t) rx2[0] << 24 |
    dfb8:	7c3b      	ldrb	r3, [r7, #16]
    dfba:	061a      	lsls	r2, r3, #24
	(uint32_t) rx2[1] << 16 |
    dfbc:	7c7b      	ldrb	r3, [r7, #17]
    dfbe:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx2[0] << 24 |
    dfc0:	431a      	orrs	r2, r3
	(uint32_t) rx2[2] << 8  |
    dfc2:	7cbb      	ldrb	r3, [r7, #18]
    dfc4:	021b      	lsls	r3, r3, #8
	(uint32_t) rx2[1] << 16 |
    dfc6:	4313      	orrs	r3, r2
	(uint32_t) rx2[3];
    dfc8:	7cfa      	ldrb	r2, [r7, #19]
	(uint32_t) rx2[2] << 8  |
    dfca:	431a      	orrs	r2, r3
	output_data = (uint32_t) rx2[0] << 24 |
    dfcc:	68fb      	ldr	r3, [r7, #12]
    dfce:	625a      	str	r2, [r3, #36]	; 0x24
	asm("nop");
    dfd0:	bf00      	nop
	return output_data;
    dfd2:	68fb      	ldr	r3, [r7, #12]
    dfd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    dfd6:	4618      	mov	r0, r3
    dfd8:	371c      	adds	r7, #28
    dfda:	46bd      	mov	sp, r7
    dfdc:	bd90      	pop	{r4, r7, pc}
    dfde:	bf00      	nop
    dfe0:	0000e3f1 	.word	0x0000e3f1

0000dfe4 <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
    dfe4:	b590      	push	{r4, r7, lr}
    dfe6:	b087      	sub	sp, #28
    dfe8:	af02      	add	r7, sp, #8
    dfea:	60f8      	str	r0, [r7, #12]
    dfec:	60b9      	str	r1, [r7, #8]
    dfee:	4611      	mov	r1, r2
    dff0:	461a      	mov	r2, r3
    dff2:	460b      	mov	r3, r1
    dff4:	71fb      	strb	r3, [r7, #7]
    dff6:	4613      	mov	r3, r2
    dff8:	80bb      	strh	r3, [r7, #4]

	tx[0] = ram_read_or_write;
    dffa:	68fb      	ldr	r3, [r7, #12]
    dffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dffe:	79fa      	ldrb	r2, [r7, #7]
    e000:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t)(start_address >> 8);
    e002:	68fb      	ldr	r3, [r7, #12]
    e004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e006:	3301      	adds	r3, #1
    e008:	88ba      	ldrh	r2, [r7, #4]
    e00a:	1212      	asrs	r2, r2, #8
    e00c:	b2d2      	uxtb	r2, r2
    e00e:	701a      	strb	r2, [r3, #0]
	tx[2] = (uint8_t)start_address;
    e010:	68fb      	ldr	r3, [r7, #12]
    e012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e014:	3302      	adds	r3, #2
    e016:	88ba      	ldrh	r2, [r7, #4]
    e018:	b2d2      	uxtb	r2, r2
    e01a:	701a      	strb	r2, [r3, #0]
	tx[3] = input_data;
    e01c:	68fb      	ldr	r3, [r7, #12]
    e01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e020:	3303      	adds	r3, #3
    e022:	f897 2020 	ldrb.w	r2, [r7, #32]
    e026:	701a      	strb	r2, [r3, #0]
	spiLT->spi_transfer_block(chip_select,tx, rx, 4);
    e028:	68fb      	ldr	r3, [r7, #12]
    e02a:	6a18      	ldr	r0, [r3, #32]
    e02c:	68fb      	ldr	r3, [r7, #12]
    e02e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e030:	68fb      	ldr	r3, [r7, #12]
    e032:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    e034:	2304      	movs	r3, #4
    e036:	9300      	str	r3, [sp, #0]
    e038:	460b      	mov	r3, r1
    e03a:	68b9      	ldr	r1, [r7, #8]
    e03c:	4c04      	ldr	r4, [pc, #16]	; (e050 <_ZN13LTC2983_Class13transfer_byteEmhth+0x6c>)
    e03e:	47a0      	blx	r4
	return rx[0];
    e040:	68fb      	ldr	r3, [r7, #12]
    e042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e044:	781b      	ldrb	r3, [r3, #0]
}
    e046:	4618      	mov	r0, r3
    e048:	3714      	adds	r7, #20
    e04a:	46bd      	mov	sp, r7
    e04c:	bd90      	pop	{r4, r7, pc}
    e04e:	bf00      	nop
    e050:	0000e3f1 	.word	0x0000e3f1

0000e054 <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
    e054:	b480      	push	{r7}
    e056:	b083      	sub	sp, #12
    e058:	af00      	add	r7, sp, #0
    e05a:	6078      	str	r0, [r7, #4]
    e05c:	460b      	mov	r3, r1
    e05e:	807b      	strh	r3, [r7, #2]
    e060:	4613      	mov	r3, r2
    e062:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
    e064:	787b      	ldrb	r3, [r7, #1]
    e066:	3b01      	subs	r3, #1
    e068:	b29b      	uxth	r3, r3
    e06a:	009b      	lsls	r3, r3, #2
    e06c:	b29a      	uxth	r2, r3
    e06e:	887b      	ldrh	r3, [r7, #2]
    e070:	4413      	add	r3, r2
    e072:	b29b      	uxth	r3, r3
}
    e074:	4618      	mov	r0, r3
    e076:	370c      	adds	r7, #12
    e078:	46bd      	mov	sp, r7
    e07a:	bc80      	pop	{r7}
    e07c:	4770      	bx	lr
	...

0000e080 <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
    e080:	b590      	push	{r4, r7, lr}
    e082:	b085      	sub	sp, #20
    e084:	af00      	add	r7, sp, #0
    e086:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	
	  // ----- Channel 2: Assign Sense Resistor -----
	  channel_assignment_data =
    e088:	4b25      	ldr	r3, [pc, #148]	; (e120 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
    e08a:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 2, channel_assignment_data);
    e08c:	687b      	ldr	r3, [r7, #4]
    e08e:	6d99      	ldr	r1, [r3, #88]	; 0x58
    e090:	68fb      	ldr	r3, [r7, #12]
    e092:	2202      	movs	r2, #2
    e094:	6878      	ldr	r0, [r7, #4]
    e096:	4c23      	ldr	r4, [pc, #140]	; (e124 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    e098:	47a0      	blx	r4
	  // ----- Channel 4: Assign RTD PT-100 -----
	  channel_assignment_data =
    e09a:	4b23      	ldr	r3, [pc, #140]	; (e128 <_ZN13LTC2983_Class18configure_channelsEv+0xa8>)
    e09c:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__2 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 4, channel_assignment_data);
    e09e:	687b      	ldr	r3, [r7, #4]
    e0a0:	6d99      	ldr	r1, [r3, #88]	; 0x58
    e0a2:	68fb      	ldr	r3, [r7, #12]
    e0a4:	2204      	movs	r2, #4
    e0a6:	6878      	ldr	r0, [r7, #4]
    e0a8:	4c1e      	ldr	r4, [pc, #120]	; (e124 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    e0aa:	47a0      	blx	r4
	  // ----- Channel 7: Assign Sense Resistor -----
	  channel_assignment_data =
    e0ac:	4b1c      	ldr	r3, [pc, #112]	; (e120 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
    e0ae:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 7, channel_assignment_data);
    e0b0:	687b      	ldr	r3, [r7, #4]
    e0b2:	6d99      	ldr	r1, [r3, #88]	; 0x58
    e0b4:	68fb      	ldr	r3, [r7, #12]
    e0b6:	2207      	movs	r2, #7
    e0b8:	6878      	ldr	r0, [r7, #4]
    e0ba:	4c1a      	ldr	r4, [pc, #104]	; (e124 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    e0bc:	47a0      	blx	r4
	  // ----- Channel 9: Assign RTD PT-100 -----
	  channel_assignment_data =
    e0be:	4b1b      	ldr	r3, [pc, #108]	; (e12c <_ZN13LTC2983_Class18configure_channelsEv+0xac>)
    e0c0:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__7 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 9, channel_assignment_data);
    e0c2:	687b      	ldr	r3, [r7, #4]
    e0c4:	6d99      	ldr	r1, [r3, #88]	; 0x58
    e0c6:	68fb      	ldr	r3, [r7, #12]
    e0c8:	2209      	movs	r2, #9
    e0ca:	6878      	ldr	r0, [r7, #4]
    e0cc:	4c15      	ldr	r4, [pc, #84]	; (e124 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    e0ce:	47a0      	blx	r4
	  // ----- Channel 12: Assign Sense Resistor -----
	  channel_assignment_data =
    e0d0:	4b13      	ldr	r3, [pc, #76]	; (e120 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
    e0d2:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 12, channel_assignment_data);
    e0d4:	687b      	ldr	r3, [r7, #4]
    e0d6:	6d99      	ldr	r1, [r3, #88]	; 0x58
    e0d8:	68fb      	ldr	r3, [r7, #12]
    e0da:	220c      	movs	r2, #12
    e0dc:	6878      	ldr	r0, [r7, #4]
    e0de:	4c11      	ldr	r4, [pc, #68]	; (e124 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    e0e0:	47a0      	blx	r4
	  // ----- Channel 14: Assign RTD PT-100 -----
	  channel_assignment_data =
    e0e2:	4b13      	ldr	r3, [pc, #76]	; (e130 <_ZN13LTC2983_Class18configure_channelsEv+0xb0>)
    e0e4:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__12 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 14, channel_assignment_data);
    e0e6:	687b      	ldr	r3, [r7, #4]
    e0e8:	6d99      	ldr	r1, [r3, #88]	; 0x58
    e0ea:	68fb      	ldr	r3, [r7, #12]
    e0ec:	220e      	movs	r2, #14
    e0ee:	6878      	ldr	r0, [r7, #4]
    e0f0:	4c0c      	ldr	r4, [pc, #48]	; (e124 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    e0f2:	47a0      	blx	r4
	  // ----- Channel 17: Assign Sense Resistor -----
	  channel_assignment_data =
    e0f4:	4b0a      	ldr	r3, [pc, #40]	; (e120 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
    e0f6:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 17, channel_assignment_data);
    e0f8:	687b      	ldr	r3, [r7, #4]
    e0fa:	6d99      	ldr	r1, [r3, #88]	; 0x58
    e0fc:	68fb      	ldr	r3, [r7, #12]
    e0fe:	2211      	movs	r2, #17
    e100:	6878      	ldr	r0, [r7, #4]
    e102:	4c08      	ldr	r4, [pc, #32]	; (e124 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    e104:	47a0      	blx	r4
	  // ----- Channel 19: Assign RTD PT-100 -----
	  channel_assignment_data =
    e106:	4b0b      	ldr	r3, [pc, #44]	; (e134 <_ZN13LTC2983_Class18configure_channelsEv+0xb4>)
    e108:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__17 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 19, channel_assignment_data);
    e10a:	687b      	ldr	r3, [r7, #4]
    e10c:	6d99      	ldr	r1, [r3, #88]	; 0x58
    e10e:	68fb      	ldr	r3, [r7, #12]
    e110:	2213      	movs	r2, #19
    e112:	6878      	ldr	r0, [r7, #4]
    e114:	4c03      	ldr	r4, [pc, #12]	; (e124 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    e116:	47a0      	blx	r4

}
    e118:	bf00      	nop
    e11a:	3714      	adds	r7, #20
    e11c:	46bd      	mov	sp, r7
    e11e:	bd90      	pop	{r4, r7, pc}
    e120:	e89c4000 	.word	0xe89c4000
    e124:	0000dc79 	.word	0x0000dc79
    e128:	60a91000 	.word	0x60a91000
    e12c:	61e91000 	.word	0x61e91000
    e130:	63291000 	.word	0x63291000
    e134:	64691000 	.word	0x64691000

0000e138 <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
    e138:	b590      	push	{r4, r7, lr}
    e13a:	b085      	sub	sp, #20
    e13c:	af02      	add	r7, sp, #8
    e13e:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
    e140:	687b      	ldr	r3, [r7, #4]
    e142:	6d99      	ldr	r1, [r3, #88]	; 0x58
	REJECTION__50_60_HZ);
    e144:	2300      	movs	r3, #0
    e146:	9300      	str	r3, [sp, #0]
    e148:	23f0      	movs	r3, #240	; 0xf0
    e14a:	2202      	movs	r2, #2
    e14c:	6878      	ldr	r0, [r7, #4]
    e14e:	4c07      	ldr	r4, [pc, #28]	; (e16c <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
    e150:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
    e152:	687b      	ldr	r3, [r7, #4]
    e154:	6d99      	ldr	r1, [r3, #88]	; 0x58
    e156:	2300      	movs	r3, #0
    e158:	9300      	str	r3, [sp, #0]
    e15a:	23ff      	movs	r3, #255	; 0xff
    e15c:	2202      	movs	r2, #2
    e15e:	6878      	ldr	r0, [r7, #4]
    e160:	4c02      	ldr	r4, [pc, #8]	; (e16c <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
    e162:	47a0      	blx	r4
}
    e164:	bf00      	nop
    e166:	370c      	adds	r7, #12
    e168:	46bd      	mov	sp, r7
    e16a:	bd90      	pop	{r4, r7, pc}
    e16c:	0000dfe5 	.word	0x0000dfe5

0000e170 <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
    e170:	b580      	push	{r7, lr}
    e172:	b082      	sub	sp, #8
    e174:	af00      	add	r7, sp, #0
    e176:	6078      	str	r0, [r7, #4]
	process_finished = 0;
    e178:	687b      	ldr	r3, [r7, #4]
    e17a:	2200      	movs	r2, #0
    e17c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	meassureTimeout=false;
    e180:	687b      	ldr	r3, [r7, #4]
    e182:	2200      	movs	r2, #0
    e184:	709a      	strb	r2, [r3, #2]
	ptrLTCClass=this;	
    e186:	4a31      	ldr	r2, [pc, #196]	; (e24c <_ZN13LTC2983_Class8SelfTestEv+0xdc>)
    e188:	687b      	ldr	r3, [r7, #4]
    e18a:	6013      	str	r3, [r2, #0]
	temperatureTimer.Start_oneShot_task((FUNC_PTR)MeassureTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
    e18c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e190:	492f      	ldr	r1, [pc, #188]	; (e250 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
    e192:	4830      	ldr	r0, [pc, #192]	; (e254 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
    e194:	4b30      	ldr	r3, [pc, #192]	; (e258 <_ZN13LTC2983_Class8SelfTestEv+0xe8>)
    e196:	4798      	blx	r3

		
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
    e198:	687b      	ldr	r3, [r7, #4]
    e19a:	79db      	ldrb	r3, [r3, #7]
    e19c:	2b01      	cmp	r3, #1
    e19e:	d009      	beq.n	e1b4 <_ZN13LTC2983_Class8SelfTestEv+0x44>
    e1a0:	687b      	ldr	r3, [r7, #4]
    e1a2:	789b      	ldrb	r3, [r3, #2]
    e1a4:	b2db      	uxtb	r3, r3
    e1a6:	f083 0301 	eor.w	r3, r3, #1
    e1aa:	b2db      	uxtb	r3, r3
    e1ac:	2b00      	cmp	r3, #0
    e1ae:	d001      	beq.n	e1b4 <_ZN13LTC2983_Class8SelfTestEv+0x44>
    e1b0:	2301      	movs	r3, #1
    e1b2:	e000      	b.n	e1b6 <_ZN13LTC2983_Class8SelfTestEv+0x46>
    e1b4:	2300      	movs	r3, #0
    e1b6:	2b00      	cmp	r3, #0
    e1b8:	d034      	beq.n	e224 <_ZN13LTC2983_Class8SelfTestEv+0xb4>

		ConvertAsyncChannelIndex(0);
    e1ba:	2100      	movs	r1, #0
    e1bc:	6878      	ldr	r0, [r7, #4]
    e1be:	4b27      	ldr	r3, [pc, #156]	; (e25c <_ZN13LTC2983_Class8SelfTestEv+0xec>)
    e1c0:	4798      	blx	r3
		delay_ms(1);
    e1c2:	2001      	movs	r0, #1
    e1c4:	4b26      	ldr	r3, [pc, #152]	; (e260 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
    e1c6:	4798      	blx	r3
		//while(!IsConverterDone());
		while((!ready)&&(!meassureTimeout));
    e1c8:	687b      	ldr	r3, [r7, #4]
    e1ca:	781b      	ldrb	r3, [r3, #0]
    e1cc:	b2db      	uxtb	r3, r3
    e1ce:	f083 0301 	eor.w	r3, r3, #1
    e1d2:	b2db      	uxtb	r3, r3
    e1d4:	2b00      	cmp	r3, #0
    e1d6:	d009      	beq.n	e1ec <_ZN13LTC2983_Class8SelfTestEv+0x7c>
    e1d8:	687b      	ldr	r3, [r7, #4]
    e1da:	789b      	ldrb	r3, [r3, #2]
    e1dc:	b2db      	uxtb	r3, r3
    e1de:	f083 0301 	eor.w	r3, r3, #1
    e1e2:	b2db      	uxtb	r3, r3
    e1e4:	2b00      	cmp	r3, #0
    e1e6:	d001      	beq.n	e1ec <_ZN13LTC2983_Class8SelfTestEv+0x7c>
    e1e8:	2301      	movs	r3, #1
    e1ea:	e000      	b.n	e1ee <_ZN13LTC2983_Class8SelfTestEv+0x7e>
    e1ec:	2300      	movs	r3, #0
    e1ee:	2b00      	cmp	r3, #0
    e1f0:	d000      	beq.n	e1f4 <_ZN13LTC2983_Class8SelfTestEv+0x84>
    e1f2:	e7e9      	b.n	e1c8 <_ZN13LTC2983_Class8SelfTestEv+0x58>
		if (!meassureTimeout)
    e1f4:	687b      	ldr	r3, [r7, #4]
    e1f6:	789b      	ldrb	r3, [r3, #2]
    e1f8:	b2db      	uxtb	r3, r3
    e1fa:	f083 0301 	eor.w	r3, r3, #1
    e1fe:	b2db      	uxtb	r3, r3
    e200:	2b00      	cmp	r3, #0
    e202:	d0c9      	beq.n	e198 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			
			if (ready)
    e204:	687b      	ldr	r3, [r7, #4]
    e206:	781b      	ldrb	r3, [r3, #0]
    e208:	b2db      	uxtb	r3, r3
    e20a:	2b00      	cmp	r3, #0
    e20c:	d006      	beq.n	e21c <_ZN13LTC2983_Class8SelfTestEv+0xac>
			{
			GetSingleChannelResult(activeChannels[0]);
    e20e:	687b      	ldr	r3, [r7, #4]
    e210:	78db      	ldrb	r3, [r3, #3]
    e212:	4619      	mov	r1, r3
    e214:	6878      	ldr	r0, [r7, #4]
    e216:	4b13      	ldr	r3, [pc, #76]	; (e264 <_ZN13LTC2983_Class8SelfTestEv+0xf4>)
    e218:	4798      	blx	r3
    e21a:	e7bd      	b.n	e198 <_ZN13LTC2983_Class8SelfTestEv+0x28>
	
			}else{
				delay_ms(1);
    e21c:	2001      	movs	r0, #1
    e21e:	4b10      	ldr	r3, [pc, #64]	; (e260 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
    e220:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
    e222:	e7b9      	b.n	e198 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			//delay_ms(1);
		}

	}
	temperatureTimer.Remove_task(FUNC_PTR(MeassureTimeout));
    e224:	490a      	ldr	r1, [pc, #40]	; (e250 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
    e226:	480b      	ldr	r0, [pc, #44]	; (e254 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
    e228:	4b0f      	ldr	r3, [pc, #60]	; (e268 <_ZN13LTC2983_Class8SelfTestEv+0xf8>)
    e22a:	4798      	blx	r3
	

	isOK=fault_data==VALID_TEMPERATURE;
    e22c:	687b      	ldr	r3, [r7, #4]
    e22e:	79db      	ldrb	r3, [r3, #7]
    e230:	2b01      	cmp	r3, #1
    e232:	bf0c      	ite	eq
    e234:	2301      	moveq	r3, #1
    e236:	2300      	movne	r3, #0
    e238:	b2da      	uxtb	r2, r3
    e23a:	687b      	ldr	r3, [r7, #4]
    e23c:	771a      	strb	r2, [r3, #28]
	return	isOK;
    e23e:	687b      	ldr	r3, [r7, #4]
    e240:	7f1b      	ldrb	r3, [r3, #28]
	}
    e242:	4618      	mov	r0, r3
    e244:	3708      	adds	r7, #8
    e246:	46bd      	mov	sp, r7
    e248:	bd80      	pop	{r7, pc}
    e24a:	bf00      	nop
    e24c:	200010d0 	.word	0x200010d0
    e250:	0000db91 	.word	0x0000db91
    e254:	200012d4 	.word	0x200012d4
    e258:	0000f011 	.word	0x0000f011
    e25c:	0000dccd 	.word	0x0000dccd
    e260:	00002509 	.word	0x00002509
    e264:	0000de01 	.word	0x0000de01
    e268:	0000efb9 	.word	0x0000efb9

0000e26c <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    e26c:	b480      	push	{r7}
    e26e:	b085      	sub	sp, #20
    e270:	af00      	add	r7, sp, #0
    e272:	60f8      	str	r0, [r7, #12]
    e274:	460b      	mov	r3, r1
    e276:	607a      	str	r2, [r7, #4]
    e278:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    e27a:	7afb      	ldrb	r3, [r7, #11]
    e27c:	68fa      	ldr	r2, [r7, #12]
    e27e:	01db      	lsls	r3, r3, #7
    e280:	4413      	add	r3, r2
    e282:	3318      	adds	r3, #24
    e284:	687a      	ldr	r2, [r7, #4]
    e286:	601a      	str	r2, [r3, #0]
}
    e288:	bf00      	nop
    e28a:	3714      	adds	r7, #20
    e28c:	46bd      	mov	sp, r7
    e28e:	bc80      	pop	{r7}
    e290:	4770      	bx	lr

0000e292 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    e292:	b480      	push	{r7}
    e294:	b085      	sub	sp, #20
    e296:	af00      	add	r7, sp, #0
    e298:	60f8      	str	r0, [r7, #12]
    e29a:	460b      	mov	r3, r1
    e29c:	607a      	str	r2, [r7, #4]
    e29e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    e2a0:	7afb      	ldrb	r3, [r7, #11]
    e2a2:	68fa      	ldr	r2, [r7, #12]
    e2a4:	01db      	lsls	r3, r3, #7
    e2a6:	4413      	add	r3, r2
    e2a8:	3314      	adds	r3, #20
    e2aa:	687a      	ldr	r2, [r7, #4]
    e2ac:	601a      	str	r2, [r3, #0]
}
    e2ae:	bf00      	nop
    e2b0:	3714      	adds	r7, #20
    e2b2:	46bd      	mov	sp, r7
    e2b4:	bc80      	pop	{r7}
    e2b6:	4770      	bx	lr

0000e2b8 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    e2b8:	b580      	push	{r7, lr}
    e2ba:	b082      	sub	sp, #8
    e2bc:	af00      	add	r7, sp, #0
    e2be:	4603      	mov	r3, r0
    e2c0:	6039      	str	r1, [r7, #0]
    e2c2:	71fb      	strb	r3, [r7, #7]
    e2c4:	4613      	mov	r3, r2
    e2c6:	71bb      	strb	r3, [r7, #6]
	if (level) {
    e2c8:	79bb      	ldrb	r3, [r7, #6]
    e2ca:	2b00      	cmp	r3, #0
    e2cc:	d006      	beq.n	e2dc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    e2ce:	79fb      	ldrb	r3, [r7, #7]
    e2d0:	683a      	ldr	r2, [r7, #0]
    e2d2:	4619      	mov	r1, r3
    e2d4:	4806      	ldr	r0, [pc, #24]	; (e2f0 <_gpio_set_level+0x38>)
    e2d6:	4b07      	ldr	r3, [pc, #28]	; (e2f4 <_gpio_set_level+0x3c>)
    e2d8:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    e2da:	e005      	b.n	e2e8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    e2dc:	79fb      	ldrb	r3, [r7, #7]
    e2de:	683a      	ldr	r2, [r7, #0]
    e2e0:	4619      	mov	r1, r3
    e2e2:	4803      	ldr	r0, [pc, #12]	; (e2f0 <_gpio_set_level+0x38>)
    e2e4:	4b04      	ldr	r3, [pc, #16]	; (e2f8 <_gpio_set_level+0x40>)
    e2e6:	4798      	blx	r3
}
    e2e8:	bf00      	nop
    e2ea:	3708      	adds	r7, #8
    e2ec:	46bd      	mov	sp, r7
    e2ee:	bd80      	pop	{r7, pc}
    e2f0:	41008000 	.word	0x41008000
    e2f4:	0000e26d 	.word	0x0000e26d
    e2f8:	0000e293 	.word	0x0000e293

0000e2fc <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    e2fc:	b580      	push	{r7, lr}
    e2fe:	b082      	sub	sp, #8
    e300:	af00      	add	r7, sp, #0
    e302:	4603      	mov	r3, r0
    e304:	460a      	mov	r2, r1
    e306:	71fb      	strb	r3, [r7, #7]
    e308:	4613      	mov	r3, r2
    e30a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    e30c:	79fb      	ldrb	r3, [r7, #7]
    e30e:	115b      	asrs	r3, r3, #5
    e310:	b2d8      	uxtb	r0, r3
    e312:	79fb      	ldrb	r3, [r7, #7]
    e314:	f003 031f 	and.w	r3, r3, #31
    e318:	2201      	movs	r2, #1
    e31a:	fa02 f303 	lsl.w	r3, r2, r3
    e31e:	79ba      	ldrb	r2, [r7, #6]
    e320:	4619      	mov	r1, r3
    e322:	4b03      	ldr	r3, [pc, #12]	; (e330 <gpio_set_pin_level+0x34>)
    e324:	4798      	blx	r3
}
    e326:	bf00      	nop
    e328:	3708      	adds	r7, #8
    e32a:	46bd      	mov	sp, r7
    e32c:	bd80      	pop	{r7, pc}
    e32e:	bf00      	nop
    e330:	0000e2b9 	.word	0x0000e2b9

0000e334 <_ZN6LT_SPIC1Ev>:
LT_SPI	*ptrLTSPIClass;

static  SPI_Syn_Class spiStaticTemp;

// default constructor
LT_SPI::LT_SPI()
    e334:	b480      	push	{r7}
    e336:	b083      	sub	sp, #12
    e338:	af00      	add	r7, sp, #0
    e33a:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
    e33c:	4a05      	ldr	r2, [pc, #20]	; (e354 <_ZN6LT_SPIC1Ev+0x20>)
    e33e:	687b      	ldr	r3, [r7, #4]
    e340:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
    e342:	687b      	ldr	r3, [r7, #4]
    e344:	4a04      	ldr	r2, [pc, #16]	; (e358 <_ZN6LT_SPIC1Ev+0x24>)
    e346:	605a      	str	r2, [r3, #4]
} //LT_SPI
    e348:	687b      	ldr	r3, [r7, #4]
    e34a:	4618      	mov	r0, r3
    e34c:	370c      	adds	r7, #12
    e34e:	46bd      	mov	sp, r7
    e350:	bc80      	pop	{r7}
    e352:	4770      	bx	lr
    e354:	200010d4 	.word	0x200010d4
    e358:	200010d8 	.word	0x200010d8

0000e35c <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
    e35c:	b480      	push	{r7}
    e35e:	b083      	sub	sp, #12
    e360:	af00      	add	r7, sp, #0
    e362:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
    e364:	687b      	ldr	r3, [r7, #4]
    e366:	4618      	mov	r0, r3
    e368:	370c      	adds	r7, #12
    e36a:	46bd      	mov	sp, r7
    e36c:	bc80      	pop	{r7}
    e36e:	4770      	bx	lr

0000e370 <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
    e370:	b580      	push	{r7, lr}
    e372:	b082      	sub	sp, #8
    e374:	af00      	add	r7, sp, #0
    e376:	6078      	str	r0, [r7, #4]
	spiTemp->SetDescriptor(SPIA);
    e378:	687b      	ldr	r3, [r7, #4]
    e37a:	685a      	ldr	r2, [r3, #4]
    e37c:	687b      	ldr	r3, [r7, #4]
    e37e:	691b      	ldr	r3, [r3, #16]
    e380:	4619      	mov	r1, r3
    e382:	4610      	mov	r0, r2
    e384:	4b0e      	ldr	r3, [pc, #56]	; (e3c0 <_ZN6LT_SPI4initEv+0x50>)
    e386:	4798      	blx	r3
	spiTemp->init();
    e388:	687b      	ldr	r3, [r7, #4]
    e38a:	685b      	ldr	r3, [r3, #4]
    e38c:	4618      	mov	r0, r3
    e38e:	4b0d      	ldr	r3, [pc, #52]	; (e3c4 <_ZN6LT_SPI4initEv+0x54>)
    e390:	4798      	blx	r3
	txLiteBuffer=spiTemp->txBuffer;
    e392:	687b      	ldr	r3, [r7, #4]
    e394:	685b      	ldr	r3, [r3, #4]
    e396:	685a      	ldr	r2, [r3, #4]
    e398:	687b      	ldr	r3, [r7, #4]
    e39a:	609a      	str	r2, [r3, #8]
	rxLiteBuffer=spiTemp->rxBuffer;
    e39c:	687b      	ldr	r3, [r7, #4]
    e39e:	685b      	ldr	r3, [r3, #4]
    e3a0:	689a      	ldr	r2, [r3, #8]
    e3a2:	687b      	ldr	r3, [r7, #4]
    e3a4:	60da      	str	r2, [r3, #12]
	spiTemp->Enable();
    e3a6:	687b      	ldr	r3, [r7, #4]
    e3a8:	685b      	ldr	r3, [r3, #4]
    e3aa:	4618      	mov	r0, r3
    e3ac:	4b06      	ldr	r3, [pc, #24]	; (e3c8 <_ZN6LT_SPI4initEv+0x58>)
    e3ae:	4798      	blx	r3
	ready=true;
    e3b0:	687b      	ldr	r3, [r7, #4]
    e3b2:	2201      	movs	r2, #1
    e3b4:	701a      	strb	r2, [r3, #0]
}
    e3b6:	bf00      	nop
    e3b8:	3708      	adds	r7, #8
    e3ba:	46bd      	mov	sp, r7
    e3bc:	bd80      	pop	{r7, pc}
    e3be:	bf00      	nop
    e3c0:	0000e619 	.word	0x0000e619
    e3c4:	0000e5d1 	.word	0x0000e5d1
    e3c8:	0000e63d 	.word	0x0000e63d

0000e3cc <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor>:
void	LT_SPI::set_descriptor(spi_m_sync_descriptor * i2c_a){
    e3cc:	b480      	push	{r7}
    e3ce:	b083      	sub	sp, #12
    e3d0:	af00      	add	r7, sp, #0
    e3d2:	6078      	str	r0, [r7, #4]
    e3d4:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
    e3d6:	687b      	ldr	r3, [r7, #4]
    e3d8:	683a      	ldr	r2, [r7, #0]
    e3da:	611a      	str	r2, [r3, #16]
	ptrLTSPIClass=this;
    e3dc:	4a03      	ldr	r2, [pc, #12]	; (e3ec <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor+0x20>)
    e3de:	687b      	ldr	r3, [r7, #4]
    e3e0:	6013      	str	r3, [r2, #0]
}
    e3e2:	bf00      	nop
    e3e4:	370c      	adds	r7, #12
    e3e6:	46bd      	mov	sp, r7
    e3e8:	bc80      	pop	{r7}
    e3ea:	4770      	bx	lr
    e3ec:	200010d4 	.word	0x200010d4

0000e3f0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
    e3f0:	b580      	push	{r7, lr}
    e3f2:	b086      	sub	sp, #24
    e3f4:	af00      	add	r7, sp, #0
    e3f6:	60f8      	str	r0, [r7, #12]
    e3f8:	60b9      	str	r1, [r7, #8]
    e3fa:	607a      	str	r2, [r7, #4]
    e3fc:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
    e3fe:	687b      	ldr	r3, [r7, #4]
    e400:	781b      	ldrb	r3, [r3, #0]
    e402:	75fb      	strb	r3, [r7, #23]
	Open(cs_pin);               //! 1) Pull CS low
    e404:	68b9      	ldr	r1, [r7, #8]
    e406:	68f8      	ldr	r0, [r7, #12]
    e408:	4b25      	ldr	r3, [pc, #148]	; (e4a0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb0>)
    e40a:	4798      	blx	r3
	
	switch(rOrw){
    e40c:	7dfb      	ldrb	r3, [r7, #23]
    e40e:	2b02      	cmp	r3, #2
    e410:	d002      	beq.n	e418 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x28>
    e412:	2b03      	cmp	r3, #3
    e414:	d009      	beq.n	e42a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3a>
    e416:	e028      	b.n	e46a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x7a>
		case WRITE_TO_RAM:
			spiTemp->Write(tx,length);				//! 2) Read byte and send byte
    e418:	68fb      	ldr	r3, [r7, #12]
    e41a:	685b      	ldr	r3, [r3, #4]
    e41c:	f897 2020 	ldrb.w	r2, [r7, #32]
    e420:	6879      	ldr	r1, [r7, #4]
    e422:	4618      	mov	r0, r3
    e424:	4b1f      	ldr	r3, [pc, #124]	; (e4a4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
    e426:	4798      	blx	r3
			//while(!spiTemp->xferDone);
			break;
    e428:	e031      	b.n	e48e <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		case READ_FROM_RAM:
			spiTemp->Write(tx,3); 
    e42a:	68fb      	ldr	r3, [r7, #12]
    e42c:	685b      	ldr	r3, [r3, #4]
    e42e:	2203      	movs	r2, #3
    e430:	6879      	ldr	r1, [r7, #4]
    e432:	4618      	mov	r0, r3
    e434:	4b1b      	ldr	r3, [pc, #108]	; (e4a4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
    e436:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
		//	gpio_set_pin_level(cs_pin,true) ;
			if (length>4)
    e438:	f897 3020 	ldrb.w	r3, [r7, #32]
    e43c:	2b04      	cmp	r3, #4
    e43e:	dd0b      	ble.n	e458 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x68>
			{
			//	delay_ms(1);
			//	gpio_set_pin_level(cs_pin,false);
				spiTemp->Read(rx,length-3);
    e440:	68fb      	ldr	r3, [r7, #12]
    e442:	6858      	ldr	r0, [r3, #4]
    e444:	f897 3020 	ldrb.w	r3, [r7, #32]
    e448:	3b03      	subs	r3, #3
    e44a:	461a      	mov	r2, r3
    e44c:	6839      	ldr	r1, [r7, #0]
    e44e:	4b16      	ldr	r3, [pc, #88]	; (e4a8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
    e450:	4798      	blx	r3
					asm("nop");
    e452:	bf00      	nop
			//	while (!spiTemp->xferDone);
				asm("nop");
    e454:	bf00      	nop
			{
				spiTemp->Read(rx,1);
				asm("nop");
			}
	
			break;
    e456:	e01a      	b.n	e48e <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
				spiTemp->Read(rx,1);
    e458:	68fb      	ldr	r3, [r7, #12]
    e45a:	685b      	ldr	r3, [r3, #4]
    e45c:	2201      	movs	r2, #1
    e45e:	6839      	ldr	r1, [r7, #0]
    e460:	4618      	mov	r0, r3
    e462:	4b11      	ldr	r3, [pc, #68]	; (e4a8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
    e464:	4798      	blx	r3
				asm("nop");
    e466:	bf00      	nop
			break;
    e468:	e011      	b.n	e48e <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		default:
			spiTemp->Write(tx,length);             //! 2) Read byte and send byte
    e46a:	68fb      	ldr	r3, [r7, #12]
    e46c:	685b      	ldr	r3, [r3, #4]
    e46e:	f897 2020 	ldrb.w	r2, [r7, #32]
    e472:	6879      	ldr	r1, [r7, #4]
    e474:	4618      	mov	r0, r3
    e476:	4b0b      	ldr	r3, [pc, #44]	; (e4a4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
    e478:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
			spiTemp->Read(rx,length-3);
    e47a:	68fb      	ldr	r3, [r7, #12]
    e47c:	6858      	ldr	r0, [r3, #4]
    e47e:	f897 3020 	ldrb.w	r3, [r7, #32]
    e482:	3b03      	subs	r3, #3
    e484:	461a      	mov	r2, r3
    e486:	6839      	ldr	r1, [r7, #0]
    e488:	4b07      	ldr	r3, [pc, #28]	; (e4a8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
    e48a:	4798      	blx	r3
			break;
    e48c:	bf00      	nop


	

	//while (!spiTemp->xferDone);
	Close(cs_pin) ;              //! 3) Pull CS high
    e48e:	68b9      	ldr	r1, [r7, #8]
    e490:	68f8      	ldr	r0, [r7, #12]
    e492:	4b06      	ldr	r3, [pc, #24]	; (e4ac <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xbc>)
    e494:	4798      	blx	r3
	asm("nop");
    e496:	bf00      	nop
	
}
    e498:	bf00      	nop
    e49a:	3718      	adds	r7, #24
    e49c:	46bd      	mov	sp, r7
    e49e:	bd80      	pop	{r7, pc}
    e4a0:	0000e4b1 	.word	0x0000e4b1
    e4a4:	0000e679 	.word	0x0000e679
    e4a8:	0000e6bd 	.word	0x0000e6bd
    e4ac:	0000e4f9 	.word	0x0000e4f9

0000e4b0 <_ZN6LT_SPI4OpenEm>:





 void LT_SPI::Open(uint32_t cs_pin){
    e4b0:	b580      	push	{r7, lr}
    e4b2:	b082      	sub	sp, #8
    e4b4:	af00      	add	r7, sp, #0
    e4b6:	6078      	str	r0, [r7, #4]
    e4b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    e4ba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    e4be:	b672      	cpsid	i
	 __DMB();
	 __disable_irq();

	gpio_set_pin_level(cs_pin,false);
    e4c0:	683b      	ldr	r3, [r7, #0]
    e4c2:	b2db      	uxtb	r3, r3
    e4c4:	2100      	movs	r1, #0
    e4c6:	4618      	mov	r0, r3
    e4c8:	4b08      	ldr	r3, [pc, #32]	; (e4ec <_ZN6LT_SPI4OpenEm+0x3c>)
    e4ca:	4798      	blx	r3
	 delay_us(10);
    e4cc:	200a      	movs	r0, #10
    e4ce:	4b08      	ldr	r3, [pc, #32]	; (e4f0 <_ZN6LT_SPI4OpenEm+0x40>)
    e4d0:	4798      	blx	r3
	spiTemp->Enable();
    e4d2:	687b      	ldr	r3, [r7, #4]
    e4d4:	685b      	ldr	r3, [r3, #4]
    e4d6:	4618      	mov	r0, r3
    e4d8:	4b06      	ldr	r3, [pc, #24]	; (e4f4 <_ZN6LT_SPI4OpenEm+0x44>)
    e4da:	4798      	blx	r3
	 delay_us(10);
    e4dc:	200a      	movs	r0, #10
    e4de:	4b04      	ldr	r3, [pc, #16]	; (e4f0 <_ZN6LT_SPI4OpenEm+0x40>)
    e4e0:	4798      	blx	r3
 }
    e4e2:	bf00      	nop
    e4e4:	3708      	adds	r7, #8
    e4e6:	46bd      	mov	sp, r7
    e4e8:	bd80      	pop	{r7, pc}
    e4ea:	bf00      	nop
    e4ec:	0000e2fd 	.word	0x0000e2fd
    e4f0:	000024d5 	.word	0x000024d5
    e4f4:	0000e63d 	.word	0x0000e63d

0000e4f8 <_ZN6LT_SPI5CloseEm>:

 void LT_SPI::Close(uint32_t cs_pin){
    e4f8:	b580      	push	{r7, lr}
    e4fa:	b082      	sub	sp, #8
    e4fc:	af00      	add	r7, sp, #0
    e4fe:	6078      	str	r0, [r7, #4]
    e500:	6039      	str	r1, [r7, #0]

	  delay_us(10);
    e502:	200a      	movs	r0, #10
    e504:	4b0b      	ldr	r3, [pc, #44]	; (e534 <_ZN6LT_SPI5CloseEm+0x3c>)
    e506:	4798      	blx	r3
	 spiTemp->Disable();
    e508:	687b      	ldr	r3, [r7, #4]
    e50a:	685b      	ldr	r3, [r3, #4]
    e50c:	4618      	mov	r0, r3
    e50e:	4b0a      	ldr	r3, [pc, #40]	; (e538 <_ZN6LT_SPI5CloseEm+0x40>)
    e510:	4798      	blx	r3
	delay_us(10);
    e512:	200a      	movs	r0, #10
    e514:	4b07      	ldr	r3, [pc, #28]	; (e534 <_ZN6LT_SPI5CloseEm+0x3c>)
    e516:	4798      	blx	r3
	gpio_set_pin_level(cs_pin,true);
    e518:	683b      	ldr	r3, [r7, #0]
    e51a:	b2db      	uxtb	r3, r3
    e51c:	2101      	movs	r1, #1
    e51e:	4618      	mov	r0, r3
    e520:	4b06      	ldr	r3, [pc, #24]	; (e53c <_ZN6LT_SPI5CloseEm+0x44>)
    e522:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
    e524:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e528:	b662      	cpsie	i
	__DMB();
	__enable_irq();
	 
    e52a:	bf00      	nop
    e52c:	3708      	adds	r7, #8
    e52e:	46bd      	mov	sp, r7
    e530:	bd80      	pop	{r7, pc}
    e532:	bf00      	nop
    e534:	000024d5 	.word	0x000024d5
    e538:	0000e701 	.word	0x0000e701
    e53c:	0000e2fd 	.word	0x0000e2fd

0000e540 <_Z41__static_initialization_and_destruction_0ii>:
    e540:	b580      	push	{r7, lr}
    e542:	b082      	sub	sp, #8
    e544:	af00      	add	r7, sp, #0
    e546:	6078      	str	r0, [r7, #4]
    e548:	6039      	str	r1, [r7, #0]
    e54a:	687b      	ldr	r3, [r7, #4]
    e54c:	2b01      	cmp	r3, #1
    e54e:	d10c      	bne.n	e56a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    e550:	683b      	ldr	r3, [r7, #0]
    e552:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e556:	4293      	cmp	r3, r2
    e558:	d107      	bne.n	e56a <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
    e55a:	4806      	ldr	r0, [pc, #24]	; (e574 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e55c:	4b06      	ldr	r3, [pc, #24]	; (e578 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e55e:	4798      	blx	r3
    e560:	4a06      	ldr	r2, [pc, #24]	; (e57c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    e562:	4907      	ldr	r1, [pc, #28]	; (e580 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    e564:	4803      	ldr	r0, [pc, #12]	; (e574 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e566:	4b07      	ldr	r3, [pc, #28]	; (e584 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    e568:	4798      	blx	r3
    e56a:	bf00      	nop
    e56c:	3708      	adds	r7, #8
    e56e:	46bd      	mov	sp, r7
    e570:	bd80      	pop	{r7, pc}
    e572:	bf00      	nop
    e574:	200010d8 	.word	0x200010d8
    e578:	0000e59d 	.word	0x0000e59d
    e57c:	20000000 	.word	0x20000000
    e580:	0000e5bd 	.word	0x0000e5bd
    e584:	00010525 	.word	0x00010525

0000e588 <_GLOBAL__sub_I_ptrLTSPIClass>:
    e588:	b580      	push	{r7, lr}
    e58a:	af00      	add	r7, sp, #0
    e58c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e590:	2001      	movs	r0, #1
    e592:	4b01      	ldr	r3, [pc, #4]	; (e598 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
    e594:	4798      	blx	r3
    e596:	bd80      	pop	{r7, pc}
    e598:	0000e541 	.word	0x0000e541

0000e59c <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
    e59c:	b480      	push	{r7}
    e59e:	b083      	sub	sp, #12
    e5a0:	af00      	add	r7, sp, #0
    e5a2:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
    e5a4:	4a04      	ldr	r2, [pc, #16]	; (e5b8 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
    e5a6:	687b      	ldr	r3, [r7, #4]
    e5a8:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    e5aa:	687b      	ldr	r3, [r7, #4]
    e5ac:	4618      	mov	r0, r3
    e5ae:	370c      	adds	r7, #12
    e5b0:	46bd      	mov	sp, r7
    e5b2:	bc80      	pop	{r7}
    e5b4:	4770      	bx	lr
    e5b6:	bf00      	nop
    e5b8:	200010f4 	.word	0x200010f4

0000e5bc <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
    e5bc:	b480      	push	{r7}
    e5be:	b083      	sub	sp, #12
    e5c0:	af00      	add	r7, sp, #0
    e5c2:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    e5c4:	687b      	ldr	r3, [r7, #4]
    e5c6:	4618      	mov	r0, r3
    e5c8:	370c      	adds	r7, #12
    e5ca:	46bd      	mov	sp, r7
    e5cc:	bc80      	pop	{r7}
    e5ce:	4770      	bx	lr

0000e5d0 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
    e5d0:	b580      	push	{r7, lr}
    e5d2:	b082      	sub	sp, #8
    e5d4:	af00      	add	r7, sp, #0
    e5d6:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    e5d8:	687b      	ldr	r3, [r7, #4]
    e5da:	68da      	ldr	r2, [r3, #12]
    e5dc:	687b      	ldr	r3, [r7, #4]
    e5de:	3310      	adds	r3, #16
    e5e0:	4619      	mov	r1, r3
    e5e2:	4610      	mov	r0, r2
    e5e4:	4b09      	ldr	r3, [pc, #36]	; (e60c <_ZN13SPI_Syn_Class4initEv+0x3c>)
    e5e6:	4798      	blx	r3

	spi_m_sync_enable(SPI);
    e5e8:	687b      	ldr	r3, [r7, #4]
    e5ea:	68db      	ldr	r3, [r3, #12]
    e5ec:	4618      	mov	r0, r3
    e5ee:	4b08      	ldr	r3, [pc, #32]	; (e610 <_ZN13SPI_Syn_Class4initEv+0x40>)
    e5f0:	4798      	blx	r3
		txBuffer=txStaticBuffer;
    e5f2:	687b      	ldr	r3, [r7, #4]
    e5f4:	4a07      	ldr	r2, [pc, #28]	; (e614 <_ZN13SPI_Syn_Class4initEv+0x44>)
    e5f6:	605a      	str	r2, [r3, #4]
		rxBuffer=txStaticBuffer;
    e5f8:	687b      	ldr	r3, [r7, #4]
    e5fa:	4a06      	ldr	r2, [pc, #24]	; (e614 <_ZN13SPI_Syn_Class4initEv+0x44>)
    e5fc:	609a      	str	r2, [r3, #8]
	ready=true;
    e5fe:	687b      	ldr	r3, [r7, #4]
    e600:	2201      	movs	r2, #1
    e602:	701a      	strb	r2, [r3, #0]
	
}
    e604:	bf00      	nop
    e606:	3708      	adds	r7, #8
    e608:	46bd      	mov	sp, r7
    e60a:	bd80      	pop	{r7, pc}
    e60c:	00002e4d 	.word	0x00002e4d
    e610:	00002cc1 	.word	0x00002cc1
    e614:	200010f8 	.word	0x200010f8

0000e618 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
    e618:	b480      	push	{r7}
    e61a:	b083      	sub	sp, #12
    e61c:	af00      	add	r7, sp, #0
    e61e:	6078      	str	r0, [r7, #4]
    e620:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
    e622:	4a05      	ldr	r2, [pc, #20]	; (e638 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
    e624:	687b      	ldr	r3, [r7, #4]
    e626:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
    e628:	687b      	ldr	r3, [r7, #4]
    e62a:	683a      	ldr	r2, [r7, #0]
    e62c:	60da      	str	r2, [r3, #12]
}
    e62e:	bf00      	nop
    e630:	370c      	adds	r7, #12
    e632:	46bd      	mov	sp, r7
    e634:	bc80      	pop	{r7}
    e636:	4770      	bx	lr
    e638:	200010f4 	.word	0x200010f4

0000e63c <_ZN13SPI_Syn_Class6EnableEv>:


int32_t SPI_Syn_Class::Enable(){
    e63c:	b580      	push	{r7, lr}
    e63e:	b082      	sub	sp, #8
    e640:	af00      	add	r7, sp, #0
    e642:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    e644:	687b      	ldr	r3, [r7, #4]
    e646:	68da      	ldr	r2, [r3, #12]
    e648:	687b      	ldr	r3, [r7, #4]
    e64a:	3310      	adds	r3, #16
    e64c:	4619      	mov	r1, r3
    e64e:	4610      	mov	r0, r2
    e650:	4b07      	ldr	r3, [pc, #28]	; (e670 <_ZN13SPI_Syn_Class6EnableEv+0x34>)
    e652:	4798      	blx	r3
	spi_m_sync_enable(SPI);
    e654:	687b      	ldr	r3, [r7, #4]
    e656:	68db      	ldr	r3, [r3, #12]
    e658:	4618      	mov	r0, r3
    e65a:	4b06      	ldr	r3, [pc, #24]	; (e674 <_ZN13SPI_Syn_Class6EnableEv+0x38>)
    e65c:	4798      	blx	r3
	ready=true;
    e65e:	687b      	ldr	r3, [r7, #4]
    e660:	2201      	movs	r2, #1
    e662:	701a      	strb	r2, [r3, #0]
	return 0;
    e664:	2300      	movs	r3, #0
}
    e666:	4618      	mov	r0, r3
    e668:	3708      	adds	r7, #8
    e66a:	46bd      	mov	sp, r7
    e66c:	bd80      	pop	{r7, pc}
    e66e:	bf00      	nop
    e670:	00002e4d 	.word	0x00002e4d
    e674:	00002cc1 	.word	0x00002cc1

0000e678 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
    e678:	b580      	push	{r7, lr}
    e67a:	b086      	sub	sp, #24
    e67c:	af00      	add	r7, sp, #0
    e67e:	60f8      	str	r0, [r7, #12]
    e680:	60b9      	str	r1, [r7, #8]
    e682:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
    e684:	68fb      	ldr	r3, [r7, #12]
    e686:	2201      	movs	r2, #1
    e688:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
    e68a:	68fb      	ldr	r3, [r7, #12]
    e68c:	691b      	ldr	r3, [r3, #16]
    e68e:	687a      	ldr	r2, [r7, #4]
    e690:	b292      	uxth	r2, r2
    e692:	68b9      	ldr	r1, [r7, #8]
    e694:	4618      	mov	r0, r3
    e696:	4b08      	ldr	r3, [pc, #32]	; (e6b8 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
    e698:	4798      	blx	r3
    e69a:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
    e69c:	697b      	ldr	r3, [r7, #20]
    e69e:	2b00      	cmp	r3, #0
    e6a0:	bf14      	ite	ne
    e6a2:	2301      	movne	r3, #1
    e6a4:	2300      	moveq	r3, #0
    e6a6:	b2da      	uxtb	r2, r3
    e6a8:	68fb      	ldr	r3, [r7, #12]
    e6aa:	761a      	strb	r2, [r3, #24]
	 return w;
    e6ac:	697b      	ldr	r3, [r7, #20]
	
}
    e6ae:	4618      	mov	r0, r3
    e6b0:	3718      	adds	r7, #24
    e6b2:	46bd      	mov	sp, r7
    e6b4:	bd80      	pop	{r7, pc}
    e6b6:	bf00      	nop
    e6b8:	0001019d 	.word	0x0001019d

0000e6bc <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
    e6bc:	b580      	push	{r7, lr}
    e6be:	b086      	sub	sp, #24
    e6c0:	af00      	add	r7, sp, #0
    e6c2:	60f8      	str	r0, [r7, #12]
    e6c4:	60b9      	str	r1, [r7, #8]
    e6c6:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
    e6c8:	68fb      	ldr	r3, [r7, #12]
    e6ca:	2201      	movs	r2, #1
    e6cc:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
    e6ce:	68fb      	ldr	r3, [r7, #12]
    e6d0:	691b      	ldr	r3, [r3, #16]
    e6d2:	687a      	ldr	r2, [r7, #4]
    e6d4:	b292      	uxth	r2, r2
    e6d6:	68b9      	ldr	r1, [r7, #8]
    e6d8:	4618      	mov	r0, r3
    e6da:	4b08      	ldr	r3, [pc, #32]	; (e6fc <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
    e6dc:	4798      	blx	r3
    e6de:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
    e6e0:	697b      	ldr	r3, [r7, #20]
    e6e2:	2b00      	cmp	r3, #0
    e6e4:	bf14      	ite	ne
    e6e6:	2301      	movne	r3, #1
    e6e8:	2300      	moveq	r3, #0
    e6ea:	b2da      	uxtb	r2, r3
    e6ec:	68fb      	ldr	r3, [r7, #12]
    e6ee:	765a      	strb	r2, [r3, #25]
	return  r;
    e6f0:	697b      	ldr	r3, [r7, #20]
}
    e6f2:	4618      	mov	r0, r3
    e6f4:	3718      	adds	r7, #24
    e6f6:	46bd      	mov	sp, r7
    e6f8:	bd80      	pop	{r7, pc}
    e6fa:	bf00      	nop
    e6fc:	000101ed 	.word	0x000101ed

0000e700 <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
    e700:	b580      	push	{r7, lr}
    e702:	b082      	sub	sp, #8
    e704:	af00      	add	r7, sp, #0
    e706:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
    e708:	687b      	ldr	r3, [r7, #4]
    e70a:	68db      	ldr	r3, [r3, #12]
    e70c:	4618      	mov	r0, r3
    e70e:	4b03      	ldr	r3, [pc, #12]	; (e71c <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
    e710:	4798      	blx	r3
	
}
    e712:	bf00      	nop
    e714:	3708      	adds	r7, #8
    e716:	46bd      	mov	sp, r7
    e718:	bd80      	pop	{r7, pc}
    e71a:	bf00      	nop
    e71c:	00002cfd 	.word	0x00002cfd

0000e720 <hri_port_set_OUT_reg>:
{
    e720:	b480      	push	{r7}
    e722:	b085      	sub	sp, #20
    e724:	af00      	add	r7, sp, #0
    e726:	60f8      	str	r0, [r7, #12]
    e728:	460b      	mov	r3, r1
    e72a:	607a      	str	r2, [r7, #4]
    e72c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    e72e:	7afb      	ldrb	r3, [r7, #11]
    e730:	68fa      	ldr	r2, [r7, #12]
    e732:	01db      	lsls	r3, r3, #7
    e734:	4413      	add	r3, r2
    e736:	3318      	adds	r3, #24
    e738:	687a      	ldr	r2, [r7, #4]
    e73a:	601a      	str	r2, [r3, #0]
}
    e73c:	bf00      	nop
    e73e:	3714      	adds	r7, #20
    e740:	46bd      	mov	sp, r7
    e742:	bc80      	pop	{r7}
    e744:	4770      	bx	lr

0000e746 <hri_port_clear_OUT_reg>:
{
    e746:	b480      	push	{r7}
    e748:	b085      	sub	sp, #20
    e74a:	af00      	add	r7, sp, #0
    e74c:	60f8      	str	r0, [r7, #12]
    e74e:	460b      	mov	r3, r1
    e750:	607a      	str	r2, [r7, #4]
    e752:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    e754:	7afb      	ldrb	r3, [r7, #11]
    e756:	68fa      	ldr	r2, [r7, #12]
    e758:	01db      	lsls	r3, r3, #7
    e75a:	4413      	add	r3, r2
    e75c:	3314      	adds	r3, #20
    e75e:	687a      	ldr	r2, [r7, #4]
    e760:	601a      	str	r2, [r3, #0]
}
    e762:	bf00      	nop
    e764:	3714      	adds	r7, #20
    e766:	46bd      	mov	sp, r7
    e768:	bc80      	pop	{r7}
    e76a:	4770      	bx	lr

0000e76c <_gpio_set_level>:
{
    e76c:	b580      	push	{r7, lr}
    e76e:	b082      	sub	sp, #8
    e770:	af00      	add	r7, sp, #0
    e772:	4603      	mov	r3, r0
    e774:	6039      	str	r1, [r7, #0]
    e776:	71fb      	strb	r3, [r7, #7]
    e778:	4613      	mov	r3, r2
    e77a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    e77c:	79bb      	ldrb	r3, [r7, #6]
    e77e:	2b00      	cmp	r3, #0
    e780:	d006      	beq.n	e790 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    e782:	79fb      	ldrb	r3, [r7, #7]
    e784:	683a      	ldr	r2, [r7, #0]
    e786:	4619      	mov	r1, r3
    e788:	4806      	ldr	r0, [pc, #24]	; (e7a4 <_gpio_set_level+0x38>)
    e78a:	4b07      	ldr	r3, [pc, #28]	; (e7a8 <_gpio_set_level+0x3c>)
    e78c:	4798      	blx	r3
}
    e78e:	e005      	b.n	e79c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    e790:	79fb      	ldrb	r3, [r7, #7]
    e792:	683a      	ldr	r2, [r7, #0]
    e794:	4619      	mov	r1, r3
    e796:	4803      	ldr	r0, [pc, #12]	; (e7a4 <_gpio_set_level+0x38>)
    e798:	4b04      	ldr	r3, [pc, #16]	; (e7ac <_gpio_set_level+0x40>)
    e79a:	4798      	blx	r3
}
    e79c:	bf00      	nop
    e79e:	3708      	adds	r7, #8
    e7a0:	46bd      	mov	sp, r7
    e7a2:	bd80      	pop	{r7, pc}
    e7a4:	41008000 	.word	0x41008000
    e7a8:	0000e721 	.word	0x0000e721
    e7ac:	0000e747 	.word	0x0000e747

0000e7b0 <gpio_set_pin_level>:
{
    e7b0:	b580      	push	{r7, lr}
    e7b2:	b082      	sub	sp, #8
    e7b4:	af00      	add	r7, sp, #0
    e7b6:	4603      	mov	r3, r0
    e7b8:	460a      	mov	r2, r1
    e7ba:	71fb      	strb	r3, [r7, #7]
    e7bc:	4613      	mov	r3, r2
    e7be:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    e7c0:	79fb      	ldrb	r3, [r7, #7]
    e7c2:	115b      	asrs	r3, r3, #5
    e7c4:	b2d8      	uxtb	r0, r3
    e7c6:	79fb      	ldrb	r3, [r7, #7]
    e7c8:	f003 031f 	and.w	r3, r3, #31
    e7cc:	2201      	movs	r2, #1
    e7ce:	fa02 f303 	lsl.w	r3, r2, r3
    e7d2:	79ba      	ldrb	r2, [r7, #6]
    e7d4:	4619      	mov	r1, r3
    e7d6:	4b03      	ldr	r3, [pc, #12]	; (e7e4 <gpio_set_pin_level+0x34>)
    e7d8:	4798      	blx	r3
}
    e7da:	bf00      	nop
    e7dc:	3708      	adds	r7, #8
    e7de:	46bd      	mov	sp, r7
    e7e0:	bd80      	pop	{r7, pc}
    e7e2:	bf00      	nop
    e7e4:	0000e76d 	.word	0x0000e76d

0000e7e8 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor>:
{
		appParameters=defaultParameters;
		spiPort=0;
		memoryMap=flashLayout;
} //FlashMemoryClass
FlashMemoryClass::FlashMemoryClass(spi_m_sync_descriptor *spi_des)
    e7e8:	b580      	push	{r7, lr}
    e7ea:	b082      	sub	sp, #8
    e7ec:	af00      	add	r7, sp, #0
    e7ee:	6078      	str	r0, [r7, #4]
    e7f0:	6039      	str	r1, [r7, #0]
    e7f2:	687b      	ldr	r3, [r7, #4]
    e7f4:	3318      	adds	r3, #24
    e7f6:	4618      	mov	r0, r3
    e7f8:	4b08      	ldr	r3, [pc, #32]	; (e81c <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x34>)
    e7fa:	4798      	blx	r3
{
	appParameters=defaultParameters;
    e7fc:	687b      	ldr	r3, [r7, #4]
    e7fe:	4a08      	ldr	r2, [pc, #32]	; (e820 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x38>)
    e800:	7812      	ldrb	r2, [r2, #0]
    e802:	711a      	strb	r2, [r3, #4]
	spi_descriptor=spi_des;
    e804:	687b      	ldr	r3, [r7, #4]
    e806:	683a      	ldr	r2, [r7, #0]
    e808:	615a      	str	r2, [r3, #20]
	memoryMap=flashLayout;
    e80a:	4b06      	ldr	r3, [pc, #24]	; (e824 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x3c>)
    e80c:	681a      	ldr	r2, [r3, #0]
    e80e:	687b      	ldr	r3, [r7, #4]
    e810:	601a      	str	r2, [r3, #0]
} //FlashMemoryClass
    e812:	687b      	ldr	r3, [r7, #4]
    e814:	4618      	mov	r0, r3
    e816:	3708      	adds	r7, #8
    e818:	46bd      	mov	sp, r7
    e81a:	bd80      	pop	{r7, pc}
    e81c:	0000e59d 	.word	0x0000e59d
    e820:	0001125c 	.word	0x0001125c
    e824:	20001138 	.word	0x20001138

0000e828 <_ZN16FlashMemoryClassD1Ev>:

// default destructor
FlashMemoryClass::~FlashMemoryClass()
    e828:	b580      	push	{r7, lr}
    e82a:	b082      	sub	sp, #8
    e82c:	af00      	add	r7, sp, #0
    e82e:	6078      	str	r0, [r7, #4]
    e830:	687b      	ldr	r3, [r7, #4]
    e832:	3318      	adds	r3, #24
    e834:	4618      	mov	r0, r3
    e836:	4b03      	ldr	r3, [pc, #12]	; (e844 <_ZN16FlashMemoryClassD1Ev+0x1c>)
    e838:	4798      	blx	r3
{
} //~FlashMemoryClass
    e83a:	687b      	ldr	r3, [r7, #4]
    e83c:	4618      	mov	r0, r3
    e83e:	3708      	adds	r7, #8
    e840:	46bd      	mov	sp, r7
    e842:	bd80      	pop	{r7, pc}
    e844:	0000e5bd 	.word	0x0000e5bd

0000e848 <_ZN16FlashMemoryClass9flashOpenEv>:
}



void FlashMemoryClass::flashOpen(void)
{
    e848:	b580      	push	{r7, lr}
    e84a:	b082      	sub	sp, #8
    e84c:	af00      	add	r7, sp, #0
    e84e:	6078      	str	r0, [r7, #4]
	garbage=spi.Enable();
    e850:	687b      	ldr	r3, [r7, #4]
    e852:	3318      	adds	r3, #24
    e854:	4618      	mov	r0, r3
    e856:	4b05      	ldr	r3, [pc, #20]	; (e86c <_ZN16FlashMemoryClass9flashOpenEv+0x24>)
    e858:	4798      	blx	r3
    e85a:	4603      	mov	r3, r0
    e85c:	461a      	mov	r2, r3
    e85e:	687b      	ldr	r3, [r7, #4]
    e860:	609a      	str	r2, [r3, #8]
	
	
}
    e862:	bf00      	nop
    e864:	3708      	adds	r7, #8
    e866:	46bd      	mov	sp, r7
    e868:	bd80      	pop	{r7, pc}
    e86a:	bf00      	nop
    e86c:	0000e63d 	.word	0x0000e63d

0000e870 <_ZN16FlashMemoryClass12CE_Low_FlashEv>:
	spi.Read((uint8_t *)dest, (uint16_t)size);
	CE_High_Flash();
	return (uint8_t)src;
}
void FlashMemoryClass::CE_Low_Flash(void)
{
    e870:	b580      	push	{r7, lr}
    e872:	b082      	sub	sp, #8
    e874:	af00      	add	r7, sp, #0
    e876:	6078      	str	r0, [r7, #4]
	garbage=0;
    e878:	687b      	ldr	r3, [r7, #4]
    e87a:	2200      	movs	r2, #0
    e87c:	609a      	str	r2, [r3, #8]
		gpio_set_pin_level(CS_FLASH,
		// <y> Initial level
		// <id> pad_initial_level
		// <false"> Low
		// <true"> High
		false);
    e87e:	2100      	movs	r1, #0
    e880:	200f      	movs	r0, #15
    e882:	4b05      	ldr	r3, [pc, #20]	; (e898 <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
    e884:	4798      	blx	r3
		gpio_set_pin_level(CS_FRAM,true);
    e886:	2101      	movs	r1, #1
    e888:	2013      	movs	r0, #19
    e88a:	4b03      	ldr	r3, [pc, #12]	; (e898 <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
    e88c:	4798      	blx	r3
}
    e88e:	bf00      	nop
    e890:	3708      	adds	r7, #8
    e892:	46bd      	mov	sp, r7
    e894:	bd80      	pop	{r7, pc}
    e896:	bf00      	nop
    e898:	0000e7b1 	.word	0x0000e7b1

0000e89c <_ZN16FlashMemoryClass13CE_High_FlashEv>:

void FlashMemoryClass::CE_High_Flash(void)
{
    e89c:	b580      	push	{r7, lr}
    e89e:	b082      	sub	sp, #8
    e8a0:	af00      	add	r7, sp, #0
    e8a2:	6078      	str	r0, [r7, #4]
	garbage=0;
    e8a4:	687b      	ldr	r3, [r7, #4]
    e8a6:	2200      	movs	r2, #0
    e8a8:	609a      	str	r2, [r3, #8]
	gpio_set_pin_level(CS_FLASH,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
    e8aa:	2101      	movs	r1, #1
    e8ac:	200f      	movs	r0, #15
    e8ae:	4b05      	ldr	r3, [pc, #20]	; (e8c4 <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
    e8b0:	4798      	blx	r3
	gpio_set_pin_level(CS_FRAM,true);
    e8b2:	2101      	movs	r1, #1
    e8b4:	2013      	movs	r0, #19
    e8b6:	4b03      	ldr	r3, [pc, #12]	; (e8c4 <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
    e8b8:	4798      	blx	r3
}
    e8ba:	bf00      	nop
    e8bc:	3708      	adds	r7, #8
    e8be:	46bd      	mov	sp, r7
    e8c0:	bd80      	pop	{r7, pc}
    e8c2:	bf00      	nop
    e8c4:	0000e7b1 	.word	0x0000e7b1

0000e8c8 <_ZN16FlashMemoryClass9Send_ByteEh>:
uint8_t FlashMemoryClass::Send_Byte(uint8_t byte)
{
    e8c8:	b580      	push	{r7, lr}
    e8ca:	b082      	sub	sp, #8
    e8cc:	af00      	add	r7, sp, #0
    e8ce:	6078      	str	r0, [r7, #4]
    e8d0:	460b      	mov	r3, r1
    e8d2:	70fb      	strb	r3, [r7, #3]
	//WaitBusy();
	spi.Write(&byte,1);
    e8d4:	687b      	ldr	r3, [r7, #4]
    e8d6:	3318      	adds	r3, #24
    e8d8:	1cf9      	adds	r1, r7, #3
    e8da:	2201      	movs	r2, #1
    e8dc:	4618      	mov	r0, r3
    e8de:	4b03      	ldr	r3, [pc, #12]	; (e8ec <_ZN16FlashMemoryClass9Send_ByteEh+0x24>)
    e8e0:	4798      	blx	r3
	return byte;
    e8e2:	78fb      	ldrb	r3, [r7, #3]
}
    e8e4:	4618      	mov	r0, r3
    e8e6:	3708      	adds	r7, #8
    e8e8:	46bd      	mov	sp, r7
    e8ea:	bd80      	pop	{r7, pc}
    e8ec:	0000e679 	.word	0x0000e679

0000e8f0 <_ZN16FlashMemoryClass8Get_ByteEv>:

uint8_t FlashMemoryClass::Get_Byte(void)
{
    e8f0:	b580      	push	{r7, lr}
    e8f2:	b084      	sub	sp, #16
    e8f4:	af00      	add	r7, sp, #0
    e8f6:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	//WaitBusy();
	spi.Read(&byte,1);
    e8f8:	687b      	ldr	r3, [r7, #4]
    e8fa:	3318      	adds	r3, #24
    e8fc:	f107 010f 	add.w	r1, r7, #15
    e900:	2201      	movs	r2, #1
    e902:	4618      	mov	r0, r3
    e904:	4b03      	ldr	r3, [pc, #12]	; (e914 <_ZN16FlashMemoryClass8Get_ByteEv+0x24>)
    e906:	4798      	blx	r3
	
	return byte;
    e908:	7bfb      	ldrb	r3, [r7, #15]
}
    e90a:	4618      	mov	r0, r3
    e90c:	3710      	adds	r7, #16
    e90e:	46bd      	mov	sp, r7
    e910:	bd80      	pop	{r7, pc}
    e912:	bf00      	nop
    e914:	0000e6bd 	.word	0x0000e6bd

0000e918 <_ZN16FlashMemoryClass4WRENEv>:

void FlashMemoryClass::WREN(void)
{
    e918:	b580      	push	{r7, lr}
    e91a:	b082      	sub	sp, #8
    e91c:	af00      	add	r7, sp, #0
    e91e:	6078      	str	r0, [r7, #4]
	do
	{
		CE_Low_Flash();			// enable device
    e920:	6878      	ldr	r0, [r7, #4]
    e922:	4b0d      	ldr	r3, [pc, #52]	; (e958 <_ZN16FlashMemoryClass4WRENEv+0x40>)
    e924:	4798      	blx	r3
		Send_Byte(kFlashWREnable);	// send WREN command
    e926:	2106      	movs	r1, #6
    e928:	6878      	ldr	r0, [r7, #4]
    e92a:	4b0c      	ldr	r3, [pc, #48]	; (e95c <_ZN16FlashMemoryClass4WRENEv+0x44>)
    e92c:	4798      	blx	r3
		//WaitBusy();
		CE_High_Flash();
    e92e:	6878      	ldr	r0, [r7, #4]
    e930:	4b0b      	ldr	r3, [pc, #44]	; (e960 <_ZN16FlashMemoryClass4WRENEv+0x48>)
    e932:	4798      	blx	r3
		status=ReadStatusRegister();
    e934:	6878      	ldr	r0, [r7, #4]
    e936:	4b0b      	ldr	r3, [pc, #44]	; (e964 <_ZN16FlashMemoryClass4WRENEv+0x4c>)
    e938:	4798      	blx	r3
    e93a:	4603      	mov	r3, r0
    e93c:	461a      	mov	r2, r3
    e93e:	687b      	ldr	r3, [r7, #4]
    e940:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	} while ((status&&(0x02))==0);
    e944:	687b      	ldr	r3, [r7, #4]
    e946:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    e94a:	2b00      	cmp	r3, #0
    e94c:	d100      	bne.n	e950 <_ZN16FlashMemoryClass4WRENEv+0x38>
	do
    e94e:	e7e7      	b.n	e920 <_ZN16FlashMemoryClass4WRENEv+0x8>

}
    e950:	bf00      	nop
    e952:	3708      	adds	r7, #8
    e954:	46bd      	mov	sp, r7
    e956:	bd80      	pop	{r7, pc}
    e958:	0000e871 	.word	0x0000e871
    e95c:	0000e8c9 	.word	0x0000e8c9
    e960:	0000e89d 	.word	0x0000e89d
    e964:	0000eb45 	.word	0x0000eb45

0000e968 <_ZN16FlashMemoryClass4WRDIEv>:


void FlashMemoryClass::WRDI(void)
{
    e968:	b580      	push	{r7, lr}
    e96a:	b082      	sub	sp, #8
    e96c:	af00      	add	r7, sp, #0
    e96e:	6078      	str	r0, [r7, #4]
	CE_Low_Flash();			// enable device
    e970:	6878      	ldr	r0, [r7, #4]
    e972:	4b06      	ldr	r3, [pc, #24]	; (e98c <_ZN16FlashMemoryClass4WRDIEv+0x24>)
    e974:	4798      	blx	r3
	Send_Byte(kFlashWRinhibit);	// send WRDI command
    e976:	2104      	movs	r1, #4
    e978:	6878      	ldr	r0, [r7, #4]
    e97a:	4b05      	ldr	r3, [pc, #20]	; (e990 <_ZN16FlashMemoryClass4WRDIEv+0x28>)
    e97c:	4798      	blx	r3
//	WaitBusy();
	CE_High_Flash();			// disable device
    e97e:	6878      	ldr	r0, [r7, #4]
    e980:	4b04      	ldr	r3, [pc, #16]	; (e994 <_ZN16FlashMemoryClass4WRDIEv+0x2c>)
    e982:	4798      	blx	r3
	
}
    e984:	bf00      	nop
    e986:	3708      	adds	r7, #8
    e988:	46bd      	mov	sp, r7
    e98a:	bd80      	pop	{r7, pc}
    e98c:	0000e871 	.word	0x0000e871
    e990:	0000e8c9 	.word	0x0000e8c9
    e994:	0000e89d 	.word	0x0000e89d

0000e998 <_ZN16FlashMemoryClass10eraseFlashEmm>:
		return *srcPtr;

	}
	
void FlashMemoryClass::eraseFlash(uint32_t dest, uint32_t size)
	{
    e998:	b580      	push	{r7, lr}
    e99a:	b086      	sub	sp, #24
    e99c:	af00      	add	r7, sp, #0
    e99e:	60f8      	str	r0, [r7, #12]
    e9a0:	60b9      	str	r1, [r7, #8]
    e9a2:	607a      	str	r2, [r7, #4]
	uint32_t	eraseRemaining = size;
    e9a4:	687b      	ldr	r3, [r7, #4]
    e9a6:	617b      	str	r3, [r7, #20]
	uint32_t	eraseAddress = dest;
    e9a8:	68bb      	ldr	r3, [r7, #8]
    e9aa:	613b      	str	r3, [r7, #16]
	flashOpen();
    e9ac:	68f8      	ldr	r0, [r7, #12]
    e9ae:	4b21      	ldr	r3, [pc, #132]	; (ea34 <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>)
    e9b0:	4798      	blx	r3
	while (eraseRemaining > 0)
    e9b2:	697b      	ldr	r3, [r7, #20]
    e9b4:	2b00      	cmp	r3, #0
    e9b6:	d035      	beq.n	ea24 <_ZN16FlashMemoryClass10eraseFlashEmm+0x8c>
	{
	WREN();
    e9b8:	68f8      	ldr	r0, [r7, #12]
    e9ba:	4b1f      	ldr	r3, [pc, #124]	; (ea38 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa0>)
    e9bc:	4798      	blx	r3
	if (eraseRemaining <= 4 * 1024)
    e9be:	697b      	ldr	r3, [r7, #20]
    e9c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    e9c4:	d806      	bhi.n	e9d4 <_ZN16FlashMemoryClass10eraseFlashEmm+0x3c>
		{
		Sector_Erase(eraseAddress);
    e9c6:	6939      	ldr	r1, [r7, #16]
    e9c8:	68f8      	ldr	r0, [r7, #12]
    e9ca:	4b1c      	ldr	r3, [pc, #112]	; (ea3c <_ZN16FlashMemoryClass10eraseFlashEmm+0xa4>)
    e9cc:	4798      	blx	r3
		eraseRemaining = 0;
    e9ce:	2300      	movs	r3, #0
    e9d0:	617b      	str	r3, [r7, #20]
    e9d2:	e020      	b.n	ea16 <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		}
	else if (eraseRemaining < 64 * 1024)
    e9d4:	697b      	ldr	r3, [r7, #20]
    e9d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    e9da:	d20c      	bcs.n	e9f6 <_ZN16FlashMemoryClass10eraseFlashEmm+0x5e>
		{
		Sector_Erase(eraseAddress);
    e9dc:	6939      	ldr	r1, [r7, #16]
    e9de:	68f8      	ldr	r0, [r7, #12]
    e9e0:	4b16      	ldr	r3, [pc, #88]	; (ea3c <_ZN16FlashMemoryClass10eraseFlashEmm+0xa4>)
    e9e2:	4798      	blx	r3
		eraseAddress += (4 * 1024);
    e9e4:	693b      	ldr	r3, [r7, #16]
    e9e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    e9ea:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (4 * 1024);
    e9ec:	697b      	ldr	r3, [r7, #20]
    e9ee:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    e9f2:	617b      	str	r3, [r7, #20]
    e9f4:	e00f      	b.n	ea16 <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		}

	else if (eraseRemaining >= 64 * 1024)
    e9f6:	697b      	ldr	r3, [r7, #20]
    e9f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    e9fc:	d30b      	bcc.n	ea16 <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		{
		Block_Erase_64K(eraseAddress);
    e9fe:	6939      	ldr	r1, [r7, #16]
    ea00:	68f8      	ldr	r0, [r7, #12]
    ea02:	4b0f      	ldr	r3, [pc, #60]	; (ea40 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa8>)
    ea04:	4798      	blx	r3
		eraseAddress += (64 * 1024);
    ea06:	693b      	ldr	r3, [r7, #16]
    ea08:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ea0c:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (64 * 1024);
    ea0e:	697b      	ldr	r3, [r7, #20]
    ea10:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    ea14:	617b      	str	r3, [r7, #20]
		Block_Erase_32K(eraseAddress);
		eraseAddress += (32 * 1024);
		eraseRemaining -= (32 * 1024);
		}
*/
	WaitBusy();
    ea16:	68f8      	ldr	r0, [r7, #12]
    ea18:	4b0a      	ldr	r3, [pc, #40]	; (ea44 <_ZN16FlashMemoryClass10eraseFlashEmm+0xac>)
    ea1a:	4798      	blx	r3
	WRDI();
    ea1c:	68f8      	ldr	r0, [r7, #12]
    ea1e:	4b0a      	ldr	r3, [pc, #40]	; (ea48 <_ZN16FlashMemoryClass10eraseFlashEmm+0xb0>)
    ea20:	4798      	blx	r3
	while (eraseRemaining > 0)
    ea22:	e7c6      	b.n	e9b2 <_ZN16FlashMemoryClass10eraseFlashEmm+0x1a>
	}
	flashClose();
    ea24:	68f8      	ldr	r0, [r7, #12]
    ea26:	4b09      	ldr	r3, [pc, #36]	; (ea4c <_ZN16FlashMemoryClass10eraseFlashEmm+0xb4>)
    ea28:	4798      	blx	r3
}
    ea2a:	bf00      	nop
    ea2c:	3718      	adds	r7, #24
    ea2e:	46bd      	mov	sp, r7
    ea30:	bd80      	pop	{r7, pc}
    ea32:	bf00      	nop
    ea34:	0000e849 	.word	0x0000e849
    ea38:	0000e919 	.word	0x0000e919
    ea3c:	0000ebe1 	.word	0x0000ebe1
    ea40:	0000ea51 	.word	0x0000ea51
    ea44:	0000eaad 	.word	0x0000eaad
    ea48:	0000e969 	.word	0x0000e969
    ea4c:	0000ebbd 	.word	0x0000ebbd

0000ea50 <_ZN16FlashMemoryClass15Block_Erase_64KEm>:
	
void	FlashMemoryClass::Block_Erase_64K(uint32_t Dst){
    ea50:	b580      	push	{r7, lr}
    ea52:	b082      	sub	sp, #8
    ea54:	af00      	add	r7, sp, #0
    ea56:	6078      	str	r0, [r7, #4]
    ea58:	6039      	str	r1, [r7, #0]

		CE_Low_Flash();				// enable device
    ea5a:	6878      	ldr	r0, [r7, #4]
    ea5c:	4b10      	ldr	r3, [pc, #64]	; (eaa0 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x50>)
    ea5e:	4798      	blx	r3
		Send_Byte(kFlash64KBlockErase);		// send Sector Erase command
    ea60:	21d8      	movs	r1, #216	; 0xd8
    ea62:	6878      	ldr	r0, [r7, #4]
    ea64:	4b0f      	ldr	r3, [pc, #60]	; (eaa4 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    ea66:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
    ea68:	683b      	ldr	r3, [r7, #0]
    ea6a:	0c1b      	lsrs	r3, r3, #16
    ea6c:	b2db      	uxtb	r3, r3
    ea6e:	4619      	mov	r1, r3
    ea70:	6878      	ldr	r0, [r7, #4]
    ea72:	4b0c      	ldr	r3, [pc, #48]	; (eaa4 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    ea74:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFF) >> 8));
    ea76:	683b      	ldr	r3, [r7, #0]
    ea78:	0a1b      	lsrs	r3, r3, #8
    ea7a:	b2db      	uxtb	r3, r3
    ea7c:	4619      	mov	r1, r3
    ea7e:	6878      	ldr	r0, [r7, #4]
    ea80:	4b08      	ldr	r3, [pc, #32]	; (eaa4 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    ea82:	4798      	blx	r3
		Send_Byte(Dst & 0xFF);
    ea84:	683b      	ldr	r3, [r7, #0]
    ea86:	b2db      	uxtb	r3, r3
    ea88:	4619      	mov	r1, r3
    ea8a:	6878      	ldr	r0, [r7, #4]
    ea8c:	4b05      	ldr	r3, [pc, #20]	; (eaa4 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    ea8e:	4798      	blx	r3
		CE_High_Flash();				// disable device
    ea90:	6878      	ldr	r0, [r7, #4]
    ea92:	4b05      	ldr	r3, [pc, #20]	; (eaa8 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x58>)
    ea94:	4798      	blx	r3
		
}
    ea96:	bf00      	nop
    ea98:	3708      	adds	r7, #8
    ea9a:	46bd      	mov	sp, r7
    ea9c:	bd80      	pop	{r7, pc}
    ea9e:	bf00      	nop
    eaa0:	0000e871 	.word	0x0000e871
    eaa4:	0000e8c9 	.word	0x0000e8c9
    eaa8:	0000e89d 	.word	0x0000e89d

0000eaac <_ZN16FlashMemoryClass8WaitBusyEv>:
uint8_t  FlashMemoryClass::WaitBusy(void){
    eaac:	b580      	push	{r7, lr}
    eaae:	b082      	sub	sp, #8
    eab0:	af00      	add	r7, sp, #0
    eab2:	6078      	str	r0, [r7, #4]
	status = ReadStatusRegister();
    eab4:	6878      	ldr	r0, [r7, #4]
    eab6:	4b0f      	ldr	r3, [pc, #60]	; (eaf4 <_ZN16FlashMemoryClass8WaitBusyEv+0x48>)
    eab8:	4798      	blx	r3
    eaba:	4603      	mov	r3, r0
    eabc:	461a      	mov	r2, r3
    eabe:	687b      	ldr	r3, [r7, #4]
    eac0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    eac4:	687b      	ldr	r3, [r7, #4]
    eac6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    eaca:	f003 0301 	and.w	r3, r3, #1
    eace:	2b00      	cmp	r3, #0
    ead0:	d008      	beq.n	eae4 <_ZN16FlashMemoryClass8WaitBusyEv+0x38>
			status = ReadStatusRegister();
    ead2:	6878      	ldr	r0, [r7, #4]
    ead4:	4b07      	ldr	r3, [pc, #28]	; (eaf4 <_ZN16FlashMemoryClass8WaitBusyEv+0x48>)
    ead6:	4798      	blx	r3
    ead8:	4603      	mov	r3, r0
    eada:	461a      	mov	r2, r3
    eadc:	687b      	ldr	r3, [r7, #4]
    eade:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    eae2:	e7ef      	b.n	eac4 <_ZN16FlashMemoryClass8WaitBusyEv+0x18>
		}
		
		return	status;
    eae4:	687b      	ldr	r3, [r7, #4]
    eae6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
    eaea:	4618      	mov	r0, r3
    eaec:	3708      	adds	r7, #8
    eaee:	46bd      	mov	sp, r7
    eaf0:	bd80      	pop	{r7, pc}
    eaf2:	bf00      	nop
    eaf4:	0000eb45 	.word	0x0000eb45

0000eaf8 <_ZN16FlashMemoryClass7IsReadyEv>:
bool  FlashMemoryClass::IsReady(void){
    eaf8:	b580      	push	{r7, lr}
    eafa:	b082      	sub	sp, #8
    eafc:	af00      	add	r7, sp, #0
    eafe:	6078      	str	r0, [r7, #4]
	
	flashOpen();
    eb00:	6878      	ldr	r0, [r7, #4]
    eb02:	4b0d      	ldr	r3, [pc, #52]	; (eb38 <_ZN16FlashMemoryClass7IsReadyEv+0x40>)
    eb04:	4798      	blx	r3
	status = ReadStatusRegister();
    eb06:	6878      	ldr	r0, [r7, #4]
    eb08:	4b0c      	ldr	r3, [pc, #48]	; (eb3c <_ZN16FlashMemoryClass7IsReadyEv+0x44>)
    eb0a:	4798      	blx	r3
    eb0c:	4603      	mov	r3, r0
    eb0e:	461a      	mov	r2, r3
    eb10:	687b      	ldr	r3, [r7, #4]
    eb12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	flashClose();
    eb16:	6878      	ldr	r0, [r7, #4]
    eb18:	4b09      	ldr	r3, [pc, #36]	; (eb40 <_ZN16FlashMemoryClass7IsReadyEv+0x48>)
    eb1a:	4798      	blx	r3
	return	(status&0x01)==0;
    eb1c:	687b      	ldr	r3, [r7, #4]
    eb1e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    eb22:	f003 0301 	and.w	r3, r3, #1
    eb26:	2b00      	cmp	r3, #0
    eb28:	bf0c      	ite	eq
    eb2a:	2301      	moveq	r3, #1
    eb2c:	2300      	movne	r3, #0
    eb2e:	b2db      	uxtb	r3, r3
}
    eb30:	4618      	mov	r0, r3
    eb32:	3708      	adds	r7, #8
    eb34:	46bd      	mov	sp, r7
    eb36:	bd80      	pop	{r7, pc}
    eb38:	0000e849 	.word	0x0000e849
    eb3c:	0000eb45 	.word	0x0000eb45
    eb40:	0000ebbd 	.word	0x0000ebbd

0000eb44 <_ZN16FlashMemoryClass18ReadStatusRegisterEv>:
uint8_t  FlashMemoryClass::ReadStatusRegister(void){
    eb44:	b580      	push	{r7, lr}
    eb46:	b082      	sub	sp, #8
    eb48:	af00      	add	r7, sp, #0
    eb4a:	6078      	str	r0, [r7, #4]
			status=ReadSingleRegister(kFlashReadSR);
    eb4c:	2105      	movs	r1, #5
    eb4e:	6878      	ldr	r0, [r7, #4]
    eb50:	4b06      	ldr	r3, [pc, #24]	; (eb6c <_ZN16FlashMemoryClass18ReadStatusRegisterEv+0x28>)
    eb52:	4798      	blx	r3
    eb54:	4603      	mov	r3, r0
    eb56:	461a      	mov	r2, r3
    eb58:	687b      	ldr	r3, [r7, #4]
    eb5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		return status;
    eb5e:	687b      	ldr	r3, [r7, #4]
    eb60:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
    eb64:	4618      	mov	r0, r3
    eb66:	3708      	adds	r7, #8
    eb68:	46bd      	mov	sp, r7
    eb6a:	bd80      	pop	{r7, pc}
    eb6c:	0000eb71 	.word	0x0000eb71

0000eb70 <_ZN16FlashMemoryClass18ReadSingleRegisterEh>:
uint8_t  FlashMemoryClass::ReadFunctionRegister(void){
			// disable device
		return ReadSingleRegister(kFlashReadFunction);
	}
	
uint8_t  FlashMemoryClass::ReadSingleRegister(uint8_t r){
    eb70:	b580      	push	{r7, lr}
    eb72:	b084      	sub	sp, #16
    eb74:	af00      	add	r7, sp, #0
    eb76:	6078      	str	r0, [r7, #4]
    eb78:	460b      	mov	r3, r1
    eb7a:	70fb      	strb	r3, [r7, #3]
	uint8_t b = 0;
    eb7c:	2300      	movs	r3, #0
    eb7e:	73fb      	strb	r3, [r7, #15]
	CE_Low_Flash();			// enable device
    eb80:	6878      	ldr	r0, [r7, #4]
    eb82:	4b0a      	ldr	r3, [pc, #40]	; (ebac <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x3c>)
    eb84:	4798      	blx	r3
	Send_Byte(r);	// send RDSR command
    eb86:	78fb      	ldrb	r3, [r7, #3]
    eb88:	4619      	mov	r1, r3
    eb8a:	6878      	ldr	r0, [r7, #4]
    eb8c:	4b08      	ldr	r3, [pc, #32]	; (ebb0 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x40>)
    eb8e:	4798      	blx	r3
	b = Get_Byte();		/* receive byte */
    eb90:	6878      	ldr	r0, [r7, #4]
    eb92:	4b08      	ldr	r3, [pc, #32]	; (ebb4 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x44>)
    eb94:	4798      	blx	r3
    eb96:	4603      	mov	r3, r0
    eb98:	73fb      	strb	r3, [r7, #15]
	CE_High_Flash();			// disable device
    eb9a:	6878      	ldr	r0, [r7, #4]
    eb9c:	4b06      	ldr	r3, [pc, #24]	; (ebb8 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x48>)
    eb9e:	4798      	blx	r3
	return b;
    eba0:	7bfb      	ldrb	r3, [r7, #15]
}
    eba2:	4618      	mov	r0, r3
    eba4:	3710      	adds	r7, #16
    eba6:	46bd      	mov	sp, r7
    eba8:	bd80      	pop	{r7, pc}
    ebaa:	bf00      	nop
    ebac:	0000e871 	.word	0x0000e871
    ebb0:	0000e8c9 	.word	0x0000e8c9
    ebb4:	0000e8f1 	.word	0x0000e8f1
    ebb8:	0000e89d 	.word	0x0000e89d

0000ebbc <_ZN16FlashMemoryClass10flashCloseEv>:
	Send_Byte(byte);		/* receive byte */
	CE_High_Flash();			// disable device
	return byte;
}

void FlashMemoryClass::flashClose(void){
    ebbc:	b580      	push	{r7, lr}
    ebbe:	b082      	sub	sp, #8
    ebc0:	af00      	add	r7, sp, #0
    ebc2:	6078      	str	r0, [r7, #4]
	garbage=0;
    ebc4:	687b      	ldr	r3, [r7, #4]
    ebc6:	2200      	movs	r2, #0
    ebc8:	609a      	str	r2, [r3, #8]
		spi.Disable();
    ebca:	687b      	ldr	r3, [r7, #4]
    ebcc:	3318      	adds	r3, #24
    ebce:	4618      	mov	r0, r3
    ebd0:	4b02      	ldr	r3, [pc, #8]	; (ebdc <_ZN16FlashMemoryClass10flashCloseEv+0x20>)
    ebd2:	4798      	blx	r3
	}
    ebd4:	bf00      	nop
    ebd6:	3708      	adds	r7, #8
    ebd8:	46bd      	mov	sp, r7
    ebda:	bd80      	pop	{r7, pc}
    ebdc:	0000e701 	.word	0x0000e701

0000ebe0 <_ZN16FlashMemoryClass12Sector_EraseEm>:
void FlashMemoryClass::Sector_Erase(uint32_t Dst)
{
    ebe0:	b580      	push	{r7, lr}
    ebe2:	b082      	sub	sp, #8
    ebe4:	af00      	add	r7, sp, #0
    ebe6:	6078      	str	r0, [r7, #4]
    ebe8:	6039      	str	r1, [r7, #0]
	CE_Low_Flash();				// enable device
    ebea:	6878      	ldr	r0, [r7, #4]
    ebec:	4b10      	ldr	r3, [pc, #64]	; (ec30 <_ZN16FlashMemoryClass12Sector_EraseEm+0x50>)
    ebee:	4798      	blx	r3
	Send_Byte(kFlash4KSectorErase);		// send Sector Erase command
    ebf0:	2120      	movs	r1, #32
    ebf2:	6878      	ldr	r0, [r7, #4]
    ebf4:	4b0f      	ldr	r3, [pc, #60]	; (ec34 <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    ebf6:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
    ebf8:	683b      	ldr	r3, [r7, #0]
    ebfa:	0c1b      	lsrs	r3, r3, #16
    ebfc:	b2db      	uxtb	r3, r3
    ebfe:	4619      	mov	r1, r3
    ec00:	6878      	ldr	r0, [r7, #4]
    ec02:	4b0c      	ldr	r3, [pc, #48]	; (ec34 <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    ec04:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFF) >> 8));
    ec06:	683b      	ldr	r3, [r7, #0]
    ec08:	0a1b      	lsrs	r3, r3, #8
    ec0a:	b2db      	uxtb	r3, r3
    ec0c:	4619      	mov	r1, r3
    ec0e:	6878      	ldr	r0, [r7, #4]
    ec10:	4b08      	ldr	r3, [pc, #32]	; (ec34 <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    ec12:	4798      	blx	r3
	Send_Byte(Dst & 0xFF);
    ec14:	683b      	ldr	r3, [r7, #0]
    ec16:	b2db      	uxtb	r3, r3
    ec18:	4619      	mov	r1, r3
    ec1a:	6878      	ldr	r0, [r7, #4]
    ec1c:	4b05      	ldr	r3, [pc, #20]	; (ec34 <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    ec1e:	4798      	blx	r3
	CE_High_Flash();				// disable device
    ec20:	6878      	ldr	r0, [r7, #4]
    ec22:	4b05      	ldr	r3, [pc, #20]	; (ec38 <_ZN16FlashMemoryClass12Sector_EraseEm+0x58>)
    ec24:	4798      	blx	r3
}
    ec26:	bf00      	nop
    ec28:	3708      	adds	r7, #8
    ec2a:	46bd      	mov	sp, r7
    ec2c:	bd80      	pop	{r7, pc}
    ec2e:	bf00      	nop
    ec30:	0000e871 	.word	0x0000e871
    ec34:	0000e8c9 	.word	0x0000e8c9
    ec38:	0000e89d 	.word	0x0000e89d

0000ec3c <_ZN16FlashMemoryClass12WriteAddressEPhmm>:
	delay_ms(100);
	CE_Low_Flash();
	Send_Byte(0x99);
	CE_High_Flash();				// disable device
}
uint32_t	FlashMemoryClass::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
    ec3c:	b580      	push	{r7, lr}
    ec3e:	b086      	sub	sp, #24
    ec40:	af00      	add	r7, sp, #0
    ec42:	60f8      	str	r0, [r7, #12]
    ec44:	60b9      	str	r1, [r7, #8]
    ec46:	607a      	str	r2, [r7, #4]
    ec48:	603b      	str	r3, [r7, #0]
	uint32_t	w;
	while(!IsReady());
    ec4a:	68f8      	ldr	r0, [r7, #12]
    ec4c:	4b2b      	ldr	r3, [pc, #172]	; (ecfc <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc0>)
    ec4e:	4798      	blx	r3
    ec50:	4603      	mov	r3, r0
    ec52:	f083 0301 	eor.w	r3, r3, #1
    ec56:	b2db      	uxtb	r3, r3
    ec58:	2b00      	cmp	r3, #0
    ec5a:	d000      	beq.n	ec5e <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x22>
    ec5c:	e7f5      	b.n	ec4a <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe>
	flashOpen();
    ec5e:	68f8      	ldr	r0, [r7, #12]
    ec60:	4b27      	ldr	r3, [pc, #156]	; (ed00 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc4>)
    ec62:	4798      	blx	r3
	WREN();
    ec64:	68f8      	ldr	r0, [r7, #12]
    ec66:	4b27      	ldr	r3, [pc, #156]	; (ed04 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc8>)
    ec68:	4798      	blx	r3
	CE_Low_Flash();
    ec6a:	68f8      	ldr	r0, [r7, #12]
    ec6c:	4b26      	ldr	r3, [pc, #152]	; (ed08 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xcc>)
    ec6e:	4798      	blx	r3
	localBuffer[0]=kFlashByteProgram;
    ec70:	68fb      	ldr	r3, [r7, #12]
    ec72:	2202      	movs	r2, #2
    ec74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	localBuffer[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    ec78:	687b      	ldr	r3, [r7, #4]
    ec7a:	0c1b      	lsrs	r3, r3, #16
    ec7c:	b2da      	uxtb	r2, r3
    ec7e:	68fb      	ldr	r3, [r7, #12]
    ec80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	localBuffer[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    ec84:	687b      	ldr	r3, [r7, #4]
    ec86:	0a1b      	lsrs	r3, r3, #8
    ec88:	b2da      	uxtb	r2, r3
    ec8a:	68fb      	ldr	r3, [r7, #12]
    ec8c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	localBuffer[3]=(uint8_t)(addr&0xFF);
    ec90:	687b      	ldr	r3, [r7, #4]
    ec92:	b2da      	uxtb	r2, r3
    ec94:	68fb      	ldr	r3, [r7, #12]
    ec96:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	for (uint32_t i = 4; i <(size)+4; i++)
    ec9a:	2304      	movs	r3, #4
    ec9c:	617b      	str	r3, [r7, #20]
    ec9e:	683b      	ldr	r3, [r7, #0]
    eca0:	1d1a      	adds	r2, r3, #4
    eca2:	697b      	ldr	r3, [r7, #20]
    eca4:	429a      	cmp	r2, r3
    eca6:	d90e      	bls.n	ecc6 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x8a>
	{
		localBuffer[i]=*p;
    eca8:	68bb      	ldr	r3, [r7, #8]
    ecaa:	7819      	ldrb	r1, [r3, #0]
    ecac:	68fa      	ldr	r2, [r7, #12]
    ecae:	697b      	ldr	r3, [r7, #20]
    ecb0:	4413      	add	r3, r2
    ecb2:	3334      	adds	r3, #52	; 0x34
    ecb4:	460a      	mov	r2, r1
    ecb6:	701a      	strb	r2, [r3, #0]
		p++;
    ecb8:	68bb      	ldr	r3, [r7, #8]
    ecba:	3301      	adds	r3, #1
    ecbc:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 4; i <(size)+4; i++)
    ecbe:	697b      	ldr	r3, [r7, #20]
    ecc0:	3301      	adds	r3, #1
    ecc2:	617b      	str	r3, [r7, #20]
    ecc4:	e7eb      	b.n	ec9e <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x62>
	}


	w=spi.Write(&localBuffer[0],size+4);
    ecc6:	68fb      	ldr	r3, [r7, #12]
    ecc8:	f103 0018 	add.w	r0, r3, #24
    eccc:	68fb      	ldr	r3, [r7, #12]
    ecce:	f103 0134 	add.w	r1, r3, #52	; 0x34
    ecd2:	683b      	ldr	r3, [r7, #0]
    ecd4:	3304      	adds	r3, #4
    ecd6:	461a      	mov	r2, r3
    ecd8:	4b0c      	ldr	r3, [pc, #48]	; (ed0c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd0>)
    ecda:	4798      	blx	r3
    ecdc:	4603      	mov	r3, r0
    ecde:	613b      	str	r3, [r7, #16]

	CE_High_Flash();
    ece0:	68f8      	ldr	r0, [r7, #12]
    ece2:	4b0b      	ldr	r3, [pc, #44]	; (ed10 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd4>)
    ece4:	4798      	blx	r3
	WRDI();
    ece6:	68f8      	ldr	r0, [r7, #12]
    ece8:	4b0a      	ldr	r3, [pc, #40]	; (ed14 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd8>)
    ecea:	4798      	blx	r3
	flashClose();
    ecec:	68f8      	ldr	r0, [r7, #12]
    ecee:	4b0a      	ldr	r3, [pc, #40]	; (ed18 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xdc>)
    ecf0:	4798      	blx	r3
	return	w;
    ecf2:	693b      	ldr	r3, [r7, #16]
	/*return (uint32_t)writeFlash(addr,(void*)p,size);*/
}
    ecf4:	4618      	mov	r0, r3
    ecf6:	3718      	adds	r7, #24
    ecf8:	46bd      	mov	sp, r7
    ecfa:	bd80      	pop	{r7, pc}
    ecfc:	0000eaf9 	.word	0x0000eaf9
    ed00:	0000e849 	.word	0x0000e849
    ed04:	0000e919 	.word	0x0000e919
    ed08:	0000e871 	.word	0x0000e871
    ed0c:	0000e679 	.word	0x0000e679
    ed10:	0000e89d 	.word	0x0000e89d
    ed14:	0000e969 	.word	0x0000e969
    ed18:	0000ebbd 	.word	0x0000ebbd

0000ed1c <_ZN16FlashMemoryClass11ReadAddressEPhmm>:
uint32_t	FlashMemoryClass::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
    ed1c:	b580      	push	{r7, lr}
    ed1e:	b086      	sub	sp, #24
    ed20:	af00      	add	r7, sp, #0
    ed22:	60f8      	str	r0, [r7, #12]
    ed24:	60b9      	str	r1, [r7, #8]
    ed26:	607a      	str	r2, [r7, #4]
    ed28:	603b      	str	r3, [r7, #0]
	uint8_t	dummy;
	while(!IsReady());
    ed2a:	68f8      	ldr	r0, [r7, #12]
    ed2c:	4b21      	ldr	r3, [pc, #132]	; (edb4 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x98>)
    ed2e:	4798      	blx	r3
    ed30:	4603      	mov	r3, r0
    ed32:	f083 0301 	eor.w	r3, r3, #1
    ed36:	b2db      	uxtb	r3, r3
    ed38:	2b00      	cmp	r3, #0
    ed3a:	d000      	beq.n	ed3e <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x22>
    ed3c:	e7f5      	b.n	ed2a <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xe>
	flashOpen();
    ed3e:	68f8      	ldr	r0, [r7, #12]
    ed40:	4b1d      	ldr	r3, [pc, #116]	; (edb8 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x9c>)
    ed42:	4798      	blx	r3
	CE_Low_Flash();
    ed44:	68f8      	ldr	r0, [r7, #12]
    ed46:	4b1d      	ldr	r3, [pc, #116]	; (edbc <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa0>)
    ed48:	4798      	blx	r3
	instruction[0]=kFlashRead;
    ed4a:	68fb      	ldr	r3, [r7, #12]
    ed4c:	2203      	movs	r2, #3
    ed4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	instruction[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    ed52:	687b      	ldr	r3, [r7, #4]
    ed54:	0c1b      	lsrs	r3, r3, #16
    ed56:	b2da      	uxtb	r2, r3
    ed58:	68fb      	ldr	r3, [r7, #12]
    ed5a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	instruction[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    ed5e:	687b      	ldr	r3, [r7, #4]
    ed60:	0a1b      	lsrs	r3, r3, #8
    ed62:	b2da      	uxtb	r2, r3
    ed64:	68fb      	ldr	r3, [r7, #12]
    ed66:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	instruction[3]=(uint8_t)(addr&0xFF);
    ed6a:	687b      	ldr	r3, [r7, #4]
    ed6c:	b2da      	uxtb	r2, r3
    ed6e:	68fb      	ldr	r3, [r7, #12]
    ed70:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		
	uint32_t	r=spi.Write(instruction,4);
    ed74:	68fb      	ldr	r3, [r7, #12]
    ed76:	f103 0018 	add.w	r0, r3, #24
    ed7a:	68fb      	ldr	r3, [r7, #12]
    ed7c:	3348      	adds	r3, #72	; 0x48
    ed7e:	2204      	movs	r2, #4
    ed80:	4619      	mov	r1, r3
    ed82:	4b0f      	ldr	r3, [pc, #60]	; (edc0 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa4>)
    ed84:	4798      	blx	r3
    ed86:	4603      	mov	r3, r0
    ed88:	617b      	str	r3, [r7, #20]
	r=spi.Read(p,size);
    ed8a:	68fb      	ldr	r3, [r7, #12]
    ed8c:	3318      	adds	r3, #24
    ed8e:	683a      	ldr	r2, [r7, #0]
    ed90:	68b9      	ldr	r1, [r7, #8]
    ed92:	4618      	mov	r0, r3
    ed94:	4b0b      	ldr	r3, [pc, #44]	; (edc4 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa8>)
    ed96:	4798      	blx	r3
    ed98:	4603      	mov	r3, r0
    ed9a:	617b      	str	r3, [r7, #20]
	CE_High_Flash();
    ed9c:	68f8      	ldr	r0, [r7, #12]
    ed9e:	4b0a      	ldr	r3, [pc, #40]	; (edc8 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xac>)
    eda0:	4798      	blx	r3
	flashClose();
    eda2:	68f8      	ldr	r0, [r7, #12]
    eda4:	4b09      	ldr	r3, [pc, #36]	; (edcc <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xb0>)
    eda6:	4798      	blx	r3
	
	return	r;
    eda8:	697b      	ldr	r3, [r7, #20]
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
    edaa:	4618      	mov	r0, r3
    edac:	3718      	adds	r7, #24
    edae:	46bd      	mov	sp, r7
    edb0:	bd80      	pop	{r7, pc}
    edb2:	bf00      	nop
    edb4:	0000eaf9 	.word	0x0000eaf9
    edb8:	0000e849 	.word	0x0000e849
    edbc:	0000e871 	.word	0x0000e871
    edc0:	0000e679 	.word	0x0000e679
    edc4:	0000e6bd 	.word	0x0000e6bd
    edc8:	0000e89d 	.word	0x0000e89d
    edcc:	0000ebbd 	.word	0x0000ebbd

0000edd0 <_Z41__static_initialization_and_destruction_0ii>:
    edd0:	b580      	push	{r7, lr}
    edd2:	b082      	sub	sp, #8
    edd4:	af00      	add	r7, sp, #0
    edd6:	6078      	str	r0, [r7, #4]
    edd8:	6039      	str	r1, [r7, #0]
    edda:	687b      	ldr	r3, [r7, #4]
    eddc:	2b01      	cmp	r3, #1
    edde:	d10d      	bne.n	edfc <_Z41__static_initialization_and_destruction_0ii+0x2c>
    ede0:	683b      	ldr	r3, [r7, #0]
    ede2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ede6:	4293      	cmp	r3, r2
    ede8:	d108      	bne.n	edfc <_Z41__static_initialization_and_destruction_0ii+0x2c>
    edea:	4906      	ldr	r1, [pc, #24]	; (ee04 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    edec:	4806      	ldr	r0, [pc, #24]	; (ee08 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    edee:	4b07      	ldr	r3, [pc, #28]	; (ee0c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    edf0:	4798      	blx	r3
    edf2:	4a07      	ldr	r2, [pc, #28]	; (ee10 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    edf4:	4907      	ldr	r1, [pc, #28]	; (ee14 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    edf6:	4804      	ldr	r0, [pc, #16]	; (ee08 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    edf8:	4b07      	ldr	r3, [pc, #28]	; (ee18 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    edfa:	4798      	blx	r3
    edfc:	bf00      	nop
    edfe:	3708      	adds	r7, #8
    ee00:	46bd      	mov	sp, r7
    ee02:	bd80      	pop	{r7, pc}
    ee04:	200016d8 	.word	0x200016d8
    ee08:	2000113c 	.word	0x2000113c
    ee0c:	0000e7e9 	.word	0x0000e7e9
    ee10:	20000000 	.word	0x20000000
    ee14:	0000e829 	.word	0x0000e829
    ee18:	00010525 	.word	0x00010525

0000ee1c <_GLOBAL__sub_I_flashLayout>:
    ee1c:	b580      	push	{r7, lr}
    ee1e:	af00      	add	r7, sp, #0
    ee20:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ee24:	2001      	movs	r0, #1
    ee26:	4b01      	ldr	r3, [pc, #4]	; (ee2c <_GLOBAL__sub_I_flashLayout+0x10>)
    ee28:	4798      	blx	r3
    ee2a:	bd80      	pop	{r7, pc}
    ee2c:	0000edd1 	.word	0x0000edd1

0000ee30 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    ee30:	b480      	push	{r7}
    ee32:	b083      	sub	sp, #12
    ee34:	af00      	add	r7, sp, #0
    ee36:	6078      	str	r0, [r7, #4]
    ee38:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    ee3a:	687b      	ldr	r3, [r7, #4]
    ee3c:	683a      	ldr	r2, [r7, #0]
    ee3e:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    ee40:	4a06      	ldr	r2, [pc, #24]	; (ee5c <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
    ee42:	687b      	ldr	r3, [r7, #4]
    ee44:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    ee46:	687b      	ldr	r3, [r7, #4]
    ee48:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ee4c:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    ee4e:	687b      	ldr	r3, [r7, #4]
    ee50:	4618      	mov	r0, r3
    ee52:	370c      	adds	r7, #12
    ee54:	46bd      	mov	sp, r7
    ee56:	bc80      	pop	{r7}
    ee58:	4770      	bx	lr
    ee5a:	bf00      	nop
    ee5c:	2000118c 	.word	0x2000118c

0000ee60 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    ee60:	b480      	push	{r7}
    ee62:	b083      	sub	sp, #12
    ee64:	af00      	add	r7, sp, #0
    ee66:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    ee68:	687b      	ldr	r3, [r7, #4]
    ee6a:	2200      	movs	r2, #0
    ee6c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    ee6e:	687b      	ldr	r3, [r7, #4]
    ee70:	4618      	mov	r0, r3
    ee72:	370c      	adds	r7, #12
    ee74:	46bd      	mov	sp, r7
    ee76:	bc80      	pop	{r7}
    ee78:	4770      	bx	lr
	...

0000ee7c <_ZL9InitArrayv>:


static void InitArray(){
    ee7c:	b480      	push	{r7}
    ee7e:	b083      	sub	sp, #12
    ee80:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    ee82:	2301      	movs	r3, #1
    ee84:	607b      	str	r3, [r7, #4]
    ee86:	687b      	ldr	r3, [r7, #4]
    ee88:	2b0f      	cmp	r3, #15
    ee8a:	dc26      	bgt.n	eeda <_ZL9InitArrayv+0x5e>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    ee8c:	4917      	ldr	r1, [pc, #92]	; (eeec <_ZL9InitArrayv+0x70>)
    ee8e:	687a      	ldr	r2, [r7, #4]
    ee90:	4613      	mov	r3, r2
    ee92:	009b      	lsls	r3, r3, #2
    ee94:	4413      	add	r3, r2
    ee96:	009b      	lsls	r3, r3, #2
    ee98:	440b      	add	r3, r1
    ee9a:	2200      	movs	r2, #0
    ee9c:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    ee9e:	4913      	ldr	r1, [pc, #76]	; (eeec <_ZL9InitArrayv+0x70>)
    eea0:	687a      	ldr	r2, [r7, #4]
    eea2:	4613      	mov	r3, r2
    eea4:	009b      	lsls	r3, r3, #2
    eea6:	4413      	add	r3, r2
    eea8:	009b      	lsls	r3, r3, #2
    eeaa:	440b      	add	r3, r1
    eeac:	330c      	adds	r3, #12
    eeae:	2200      	movs	r2, #0
    eeb0:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    eeb2:	687b      	ldr	r3, [r7, #4]
    eeb4:	1e5a      	subs	r2, r3, #1
    eeb6:	6879      	ldr	r1, [r7, #4]
    eeb8:	460b      	mov	r3, r1
    eeba:	009b      	lsls	r3, r3, #2
    eebc:	440b      	add	r3, r1
    eebe:	009b      	lsls	r3, r3, #2
    eec0:	490a      	ldr	r1, [pc, #40]	; (eeec <_ZL9InitArrayv+0x70>)
    eec2:	4419      	add	r1, r3
    eec4:	4809      	ldr	r0, [pc, #36]	; (eeec <_ZL9InitArrayv+0x70>)
    eec6:	4613      	mov	r3, r2
    eec8:	009b      	lsls	r3, r3, #2
    eeca:	4413      	add	r3, r2
    eecc:	009b      	lsls	r3, r3, #2
    eece:	4403      	add	r3, r0
    eed0:	6019      	str	r1, [r3, #0]
	for (int i=1; i<TASK_NUMBER	; i++)
    eed2:	687b      	ldr	r3, [r7, #4]
    eed4:	3301      	adds	r3, #1
    eed6:	607b      	str	r3, [r7, #4]
    eed8:	e7d5      	b.n	ee86 <_ZL9InitArrayv+0xa>
	}
	arrayInitiated=true;
    eeda:	4b05      	ldr	r3, [pc, #20]	; (eef0 <_ZL9InitArrayv+0x74>)
    eedc:	2201      	movs	r2, #1
    eede:	701a      	strb	r2, [r3, #0]
		
}
    eee0:	bf00      	nop
    eee2:	370c      	adds	r7, #12
    eee4:	46bd      	mov	sp, r7
    eee6:	bc80      	pop	{r7}
    eee8:	4770      	bx	lr
    eeea:	bf00      	nop
    eeec:	20001190 	.word	0x20001190
    eef0:	200012d0 	.word	0x200012d0

0000eef4 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    eef4:	b580      	push	{r7, lr}
    eef6:	b082      	sub	sp, #8
    eef8:	af00      	add	r7, sp, #0
    eefa:	6078      	str	r0, [r7, #4]
	ticks=0;
    eefc:	687b      	ldr	r3, [r7, #4]
    eefe:	2200      	movs	r2, #0
    ef00:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    ef02:	4b0d      	ldr	r3, [pc, #52]	; (ef38 <_ZN11Timer_Class4InitEv+0x44>)
    ef04:	781b      	ldrb	r3, [r3, #0]
    ef06:	f083 0301 	eor.w	r3, r3, #1
    ef0a:	b2db      	uxtb	r3, r3
    ef0c:	2b00      	cmp	r3, #0
    ef0e:	d001      	beq.n	ef14 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    ef10:	4b0a      	ldr	r3, [pc, #40]	; (ef3c <_ZN11Timer_Class4InitEv+0x48>)
    ef12:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=start()==ERR_NONE;
    ef14:	6878      	ldr	r0, [r7, #4]
    ef16:	4b0a      	ldr	r3, [pc, #40]	; (ef40 <_ZN11Timer_Class4InitEv+0x4c>)
    ef18:	4798      	blx	r3
    ef1a:	4603      	mov	r3, r0
    ef1c:	2b00      	cmp	r3, #0
    ef1e:	bf0c      	ite	eq
    ef20:	2301      	moveq	r3, #1
    ef22:	2300      	movne	r3, #0
    ef24:	b2da      	uxtb	r2, r3
    ef26:	687b      	ldr	r3, [r7, #4]
    ef28:	709a      	strb	r2, [r3, #2]
	return isOK;
    ef2a:	687b      	ldr	r3, [r7, #4]
    ef2c:	789b      	ldrb	r3, [r3, #2]
    ef2e:	b2db      	uxtb	r3, r3
}
    ef30:	4618      	mov	r0, r3
    ef32:	3708      	adds	r7, #8
    ef34:	46bd      	mov	sp, r7
    ef36:	bd80      	pop	{r7, pc}
    ef38:	200012d0 	.word	0x200012d0
    ef3c:	0000ee7d 	.word	0x0000ee7d
    ef40:	0000ef45 	.word	0x0000ef45

0000ef44 <_ZN11Timer_Class5startEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::start(void){
    ef44:	b580      	push	{r7, lr}
    ef46:	b084      	sub	sp, #16
    ef48:	af00      	add	r7, sp, #0
    ef4a:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    ef4c:	687b      	ldr	r3, [r7, #4]
    ef4e:	68db      	ldr	r3, [r3, #12]
    ef50:	4618      	mov	r0, r3
    ef52:	4b04      	ldr	r3, [pc, #16]	; (ef64 <_ZN11Timer_Class5startEv+0x20>)
    ef54:	4798      	blx	r3
    ef56:	60f8      	str	r0, [r7, #12]
	return status;
    ef58:	68fb      	ldr	r3, [r7, #12]
	
}
    ef5a:	4618      	mov	r0, r3
    ef5c:	3710      	adds	r7, #16
    ef5e:	46bd      	mov	sp, r7
    ef60:	bd80      	pop	{r7, pc}
    ef62:	bf00      	nop
    ef64:	00002f3d 	.word	0x00002f3d

0000ef68 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    ef68:	b580      	push	{r7, lr}
    ef6a:	b086      	sub	sp, #24
    ef6c:	af00      	add	r7, sp, #0
    ef6e:	60f8      	str	r0, [r7, #12]
    ef70:	60b9      	str	r1, [r7, #8]
    ef72:	607a      	str	r2, [r7, #4]
    ef74:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    ef76:	68f8      	ldr	r0, [r7, #12]
    ef78:	4b0d      	ldr	r3, [pc, #52]	; (efb0 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    ef7a:	4798      	blx	r3
	task->interval = interval;
    ef7c:	68fb      	ldr	r3, [r7, #12]
    ef7e:	699b      	ldr	r3, [r3, #24]
    ef80:	687a      	ldr	r2, [r7, #4]
    ef82:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    ef84:	68fb      	ldr	r3, [r7, #12]
    ef86:	699b      	ldr	r3, [r3, #24]
    ef88:	68ba      	ldr	r2, [r7, #8]
    ef8a:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    ef8c:	68fb      	ldr	r3, [r7, #12]
    ef8e:	699b      	ldr	r3, [r3, #24]
    ef90:	78fa      	ldrb	r2, [r7, #3]
    ef92:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    ef94:	68fb      	ldr	r3, [r7, #12]
    ef96:	68da      	ldr	r2, [r3, #12]
    ef98:	68fb      	ldr	r3, [r7, #12]
    ef9a:	699b      	ldr	r3, [r3, #24]
    ef9c:	4619      	mov	r1, r3
    ef9e:	4610      	mov	r0, r2
    efa0:	4b04      	ldr	r3, [pc, #16]	; (efb4 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    efa2:	4798      	blx	r3
    efa4:	6178      	str	r0, [r7, #20]
	
	return status;
    efa6:	697b      	ldr	r3, [r7, #20]
}
    efa8:	4618      	mov	r0, r3
    efaa:	3718      	adds	r7, #24
    efac:	46bd      	mov	sp, r7
    efae:	bd80      	pop	{r7, pc}
    efb0:	0000f061 	.word	0x0000f061
    efb4:	00003011 	.word	0x00003011

0000efb8 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
    efb8:	b580      	push	{r7, lr}
    efba:	b082      	sub	sp, #8
    efbc:	af00      	add	r7, sp, #0
    efbe:	6078      	str	r0, [r7, #4]
    efc0:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    efc2:	6839      	ldr	r1, [r7, #0]
    efc4:	6878      	ldr	r0, [r7, #4]
    efc6:	4b0f      	ldr	r3, [pc, #60]	; (f004 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    efc8:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    efca:	687b      	ldr	r3, [r7, #4]
    efcc:	68db      	ldr	r3, [r3, #12]
    efce:	f103 0218 	add.w	r2, r3, #24
    efd2:	687b      	ldr	r3, [r7, #4]
    efd4:	699b      	ldr	r3, [r3, #24]
    efd6:	4619      	mov	r1, r3
    efd8:	4610      	mov	r0, r2
    efda:	4b0b      	ldr	r3, [pc, #44]	; (f008 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    efdc:	4798      	blx	r3
    efde:	4603      	mov	r3, r0
    efe0:	2b00      	cmp	r3, #0
    efe2:	d007      	beq.n	eff4 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    efe4:	687b      	ldr	r3, [r7, #4]
    efe6:	68da      	ldr	r2, [r3, #12]
    efe8:	687b      	ldr	r3, [r7, #4]
    efea:	699b      	ldr	r3, [r3, #24]
    efec:	4619      	mov	r1, r3
    efee:	4610      	mov	r0, r2
    eff0:	4b06      	ldr	r3, [pc, #24]	; (f00c <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    eff2:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    eff4:	687b      	ldr	r3, [r7, #4]
    eff6:	699b      	ldr	r3, [r3, #24]
    eff8:	2200      	movs	r2, #0
    effa:	60da      	str	r2, [r3, #12]
}
    effc:	bf00      	nop
    effe:	3708      	adds	r7, #8
    f000:	46bd      	mov	sp, r7
    f002:	bd80      	pop	{r7, pc}
    f004:	0000f0c1 	.word	0x0000f0c1
    f008:	00003cfd 	.word	0x00003cfd
    f00c:	00003115 	.word	0x00003115

0000f010 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    f010:	b590      	push	{r4, r7, lr}
    f012:	b087      	sub	sp, #28
    f014:	af00      	add	r7, sp, #0
    f016:	60f8      	str	r0, [r7, #12]
    f018:	60b9      	str	r1, [r7, #8]
    f01a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    f01c:	2300      	movs	r3, #0
    f01e:	687a      	ldr	r2, [r7, #4]
    f020:	68b9      	ldr	r1, [r7, #8]
    f022:	68f8      	ldr	r0, [r7, #12]
    f024:	4c0c      	ldr	r4, [pc, #48]	; (f058 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    f026:	47a0      	blx	r4
    f028:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    f02a:	68fb      	ldr	r3, [r7, #12]
    f02c:	68db      	ldr	r3, [r3, #12]
    f02e:	681b      	ldr	r3, [r3, #0]
    f030:	699b      	ldr	r3, [r3, #24]
    f032:	68fa      	ldr	r2, [r7, #12]
    f034:	68d2      	ldr	r2, [r2, #12]
    f036:	3204      	adds	r2, #4
    f038:	4610      	mov	r0, r2
    f03a:	4798      	blx	r3
    f03c:	4603      	mov	r3, r0
    f03e:	2b00      	cmp	r3, #0
    f040:	d105      	bne.n	f04e <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    f042:	68fb      	ldr	r3, [r7, #12]
    f044:	68db      	ldr	r3, [r3, #12]
    f046:	4618      	mov	r0, r3
    f048:	4b04      	ldr	r3, [pc, #16]	; (f05c <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    f04a:	4798      	blx	r3
    f04c:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    f04e:	697b      	ldr	r3, [r7, #20]
}
    f050:	4618      	mov	r0, r3
    f052:	371c      	adds	r7, #28
    f054:	46bd      	mov	sp, r7
    f056:	bd90      	pop	{r4, r7, pc}
    f058:	0000ef69 	.word	0x0000ef69
    f05c:	00002f3d 	.word	0x00002f3d

0000f060 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    f060:	b480      	push	{r7}
    f062:	b085      	sub	sp, #20
    f064:	af00      	add	r7, sp, #0
    f066:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    f068:	2300      	movs	r3, #0
    f06a:	73fb      	strb	r3, [r7, #15]
    f06c:	7bfb      	ldrb	r3, [r7, #15]
    f06e:	2b0f      	cmp	r3, #15
    f070:	dc1c      	bgt.n	f0ac <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x4c>
	{	
				
		j=ii%TASK_NUMBER;
    f072:	7bfb      	ldrb	r3, [r7, #15]
    f074:	f003 030f 	and.w	r3, r3, #15
    f078:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    f07a:	7bba      	ldrb	r2, [r7, #14]
    f07c:	490f      	ldr	r1, [pc, #60]	; (f0bc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    f07e:	4613      	mov	r3, r2
    f080:	009b      	lsls	r3, r3, #2
    f082:	4413      	add	r3, r2
    f084:	009b      	lsls	r3, r3, #2
    f086:	440b      	add	r3, r1
    f088:	330c      	adds	r3, #12
    f08a:	681b      	ldr	r3, [r3, #0]
    f08c:	2b00      	cmp	r3, #0
    f08e:	d109      	bne.n	f0a4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x44>
		{
			
			task=&taskArray[j];
    f090:	7bba      	ldrb	r2, [r7, #14]
    f092:	4613      	mov	r3, r2
    f094:	009b      	lsls	r3, r3, #2
    f096:	4413      	add	r3, r2
    f098:	009b      	lsls	r3, r3, #2
    f09a:	4a08      	ldr	r2, [pc, #32]	; (f0bc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    f09c:	441a      	add	r2, r3
    f09e:	687b      	ldr	r3, [r7, #4]
    f0a0:	619a      	str	r2, [r3, #24]
			return;
    f0a2:	e006      	b.n	f0b2 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    f0a4:	7bfb      	ldrb	r3, [r7, #15]
    f0a6:	3301      	adds	r3, #1
    f0a8:	73fb      	strb	r3, [r7, #15]
    f0aa:	e7df      	b.n	f06c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    f0ac:	687b      	ldr	r3, [r7, #4]
    f0ae:	4a03      	ldr	r2, [pc, #12]	; (f0bc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    f0b0:	619a      	str	r2, [r3, #24]

}
    f0b2:	3714      	adds	r7, #20
    f0b4:	46bd      	mov	sp, r7
    f0b6:	bc80      	pop	{r7}
    f0b8:	4770      	bx	lr
    f0ba:	bf00      	nop
    f0bc:	20001190 	.word	0x20001190

0000f0c0 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    f0c0:	b480      	push	{r7}
    f0c2:	b085      	sub	sp, #20
    f0c4:	af00      	add	r7, sp, #0
    f0c6:	6078      	str	r0, [r7, #4]
    f0c8:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    f0ca:	2300      	movs	r3, #0
    f0cc:	73fb      	strb	r3, [r7, #15]
    f0ce:	7bfb      	ldrb	r3, [r7, #15]
    f0d0:	2b0f      	cmp	r3, #15
    f0d2:	dc19      	bgt.n	f108 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    f0d4:	7bfa      	ldrb	r2, [r7, #15]
    f0d6:	490f      	ldr	r1, [pc, #60]	; (f114 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    f0d8:	4613      	mov	r3, r2
    f0da:	009b      	lsls	r3, r3, #2
    f0dc:	4413      	add	r3, r2
    f0de:	009b      	lsls	r3, r3, #2
    f0e0:	440b      	add	r3, r1
    f0e2:	330c      	adds	r3, #12
    f0e4:	681a      	ldr	r2, [r3, #0]
    f0e6:	683b      	ldr	r3, [r7, #0]
    f0e8:	429a      	cmp	r2, r3
    f0ea:	d109      	bne.n	f100 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    f0ec:	7bfa      	ldrb	r2, [r7, #15]
    f0ee:	4613      	mov	r3, r2
    f0f0:	009b      	lsls	r3, r3, #2
    f0f2:	4413      	add	r3, r2
    f0f4:	009b      	lsls	r3, r3, #2
    f0f6:	4a07      	ldr	r2, [pc, #28]	; (f114 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    f0f8:	441a      	add	r2, r3
    f0fa:	687b      	ldr	r3, [r7, #4]
    f0fc:	619a      	str	r2, [r3, #24]
			return;
    f0fe:	e004      	b.n	f10a <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    f100:	7bfb      	ldrb	r3, [r7, #15]
    f102:	3301      	adds	r3, #1
    f104:	73fb      	strb	r3, [r7, #15]
    f106:	e7e2      	b.n	f0ce <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    f108:	bf00      	nop
}
    f10a:	3714      	adds	r7, #20
    f10c:	46bd      	mov	sp, r7
    f10e:	bc80      	pop	{r7}
    f110:	4770      	bx	lr
    f112:	bf00      	nop
    f114:	20001190 	.word	0x20001190

0000f118 <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
Timer_Class arincTimer(&TIMER_ARINC);
    f118:	b580      	push	{r7, lr}
    f11a:	b082      	sub	sp, #8
    f11c:	af00      	add	r7, sp, #0
    f11e:	6078      	str	r0, [r7, #4]
    f120:	6039      	str	r1, [r7, #0]
    f122:	687b      	ldr	r3, [r7, #4]
    f124:	2b01      	cmp	r3, #1
    f126:	d131      	bne.n	f18c <_Z41__static_initialization_and_destruction_0ii+0x74>
    f128:	683b      	ldr	r3, [r7, #0]
    f12a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f12e:	4293      	cmp	r3, r2
    f130:	d12c      	bne.n	f18c <_Z41__static_initialization_and_destruction_0ii+0x74>
Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f132:	4918      	ldr	r1, [pc, #96]	; (f194 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    f134:	4818      	ldr	r0, [pc, #96]	; (f198 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    f136:	4b19      	ldr	r3, [pc, #100]	; (f19c <_Z41__static_initialization_and_destruction_0ii+0x84>)
    f138:	4798      	blx	r3
    f13a:	4a19      	ldr	r2, [pc, #100]	; (f1a0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    f13c:	4919      	ldr	r1, [pc, #100]	; (f1a4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    f13e:	4816      	ldr	r0, [pc, #88]	; (f198 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    f140:	4b19      	ldr	r3, [pc, #100]	; (f1a8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    f142:	4798      	blx	r3
Timer_Class eventTimer(&TIMER_EVENT);
    f144:	4919      	ldr	r1, [pc, #100]	; (f1ac <_Z41__static_initialization_and_destruction_0ii+0x94>)
    f146:	481a      	ldr	r0, [pc, #104]	; (f1b0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    f148:	4b14      	ldr	r3, [pc, #80]	; (f19c <_Z41__static_initialization_and_destruction_0ii+0x84>)
    f14a:	4798      	blx	r3
    f14c:	4a14      	ldr	r2, [pc, #80]	; (f1a0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    f14e:	4915      	ldr	r1, [pc, #84]	; (f1a4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    f150:	4817      	ldr	r0, [pc, #92]	; (f1b0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    f152:	4b15      	ldr	r3, [pc, #84]	; (f1a8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    f154:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    f156:	4917      	ldr	r1, [pc, #92]	; (f1b4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
    f158:	4817      	ldr	r0, [pc, #92]	; (f1b8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    f15a:	4b10      	ldr	r3, [pc, #64]	; (f19c <_Z41__static_initialization_and_destruction_0ii+0x84>)
    f15c:	4798      	blx	r3
    f15e:	4a10      	ldr	r2, [pc, #64]	; (f1a0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    f160:	4910      	ldr	r1, [pc, #64]	; (f1a4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    f162:	4815      	ldr	r0, [pc, #84]	; (f1b8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    f164:	4b10      	ldr	r3, [pc, #64]	; (f1a8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    f166:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
    f168:	4914      	ldr	r1, [pc, #80]	; (f1bc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    f16a:	4815      	ldr	r0, [pc, #84]	; (f1c0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    f16c:	4b0b      	ldr	r3, [pc, #44]	; (f19c <_Z41__static_initialization_and_destruction_0ii+0x84>)
    f16e:	4798      	blx	r3
    f170:	4a0b      	ldr	r2, [pc, #44]	; (f1a0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    f172:	490c      	ldr	r1, [pc, #48]	; (f1a4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    f174:	4812      	ldr	r0, [pc, #72]	; (f1c0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    f176:	4b0c      	ldr	r3, [pc, #48]	; (f1a8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    f178:	4798      	blx	r3
Timer_Class arincTimer(&TIMER_ARINC);
    f17a:	4912      	ldr	r1, [pc, #72]	; (f1c4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    f17c:	4812      	ldr	r0, [pc, #72]	; (f1c8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    f17e:	4b07      	ldr	r3, [pc, #28]	; (f19c <_Z41__static_initialization_and_destruction_0ii+0x84>)
    f180:	4798      	blx	r3
    f182:	4a07      	ldr	r2, [pc, #28]	; (f1a0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    f184:	4907      	ldr	r1, [pc, #28]	; (f1a4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    f186:	4810      	ldr	r0, [pc, #64]	; (f1c8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    f188:	4b07      	ldr	r3, [pc, #28]	; (f1a8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    f18a:	4798      	blx	r3
    f18c:	bf00      	nop
    f18e:	3708      	adds	r7, #8
    f190:	46bd      	mov	sp, r7
    f192:	bd80      	pop	{r7, pc}
    f194:	200016b8 	.word	0x200016b8
    f198:	200012d4 	.word	0x200012d4
    f19c:	0000ee31 	.word	0x0000ee31
    f1a0:	20000000 	.word	0x20000000
    f1a4:	0000ee61 	.word	0x0000ee61
    f1a8:	00010525 	.word	0x00010525
    f1ac:	2000172c 	.word	0x2000172c
    f1b0:	200012f0 	.word	0x200012f0
    f1b4:	20001830 	.word	0x20001830
    f1b8:	2000130c 	.word	0x2000130c
    f1bc:	2000174c 	.word	0x2000174c
    f1c0:	20001328 	.word	0x20001328
    f1c4:	200017b0 	.word	0x200017b0
    f1c8:	20001344 	.word	0x20001344

0000f1cc <_GLOBAL__sub_I_ptrTimerClass>:
    f1cc:	b580      	push	{r7, lr}
    f1ce:	af00      	add	r7, sp, #0
    f1d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f1d4:	2001      	movs	r0, #1
    f1d6:	4b01      	ldr	r3, [pc, #4]	; (f1dc <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    f1d8:	4798      	blx	r3
    f1da:	bd80      	pop	{r7, pc}
    f1dc:	0000f119 	.word	0x0000f119

0000f1e0 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    f1e0:	b480      	push	{r7}
    f1e2:	b083      	sub	sp, #12
    f1e4:	af00      	add	r7, sp, #0
    f1e6:	6078      	str	r0, [r7, #4]
    f1e8:	4a05      	ldr	r2, [pc, #20]	; (f200 <_ZN5PrintC1Ev+0x20>)
    f1ea:	687b      	ldr	r3, [r7, #4]
    f1ec:	601a      	str	r2, [r3, #0]
    f1ee:	687b      	ldr	r3, [r7, #4]
    f1f0:	2200      	movs	r2, #0
    f1f2:	605a      	str	r2, [r3, #4]
    f1f4:	687b      	ldr	r3, [r7, #4]
    f1f6:	4618      	mov	r0, r3
    f1f8:	370c      	adds	r7, #12
    f1fa:	46bd      	mov	sp, r7
    f1fc:	bc80      	pop	{r7}
    f1fe:	4770      	bx	lr
    f200:	000112dc 	.word	0x000112dc

0000f204 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    f204:	b480      	push	{r7}
    f206:	b083      	sub	sp, #12
    f208:	af00      	add	r7, sp, #0
    f20a:	6078      	str	r0, [r7, #4]
    f20c:	2300      	movs	r3, #0
    f20e:	4618      	mov	r0, r3
    f210:	370c      	adds	r7, #12
    f212:	46bd      	mov	sp, r7
    f214:	bc80      	pop	{r7}
    f216:	4770      	bx	lr

0000f218 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    f218:	b480      	push	{r7}
    f21a:	b083      	sub	sp, #12
    f21c:	af00      	add	r7, sp, #0
    f21e:	6078      	str	r0, [r7, #4]
    f220:	bf00      	nop
    f222:	370c      	adds	r7, #12
    f224:	46bd      	mov	sp, r7
    f226:	bc80      	pop	{r7}
    f228:	4770      	bx	lr
	...

0000f22c <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    f22c:	b580      	push	{r7, lr}
    f22e:	b082      	sub	sp, #8
    f230:	af00      	add	r7, sp, #0
    f232:	6078      	str	r0, [r7, #4]
    f234:	687b      	ldr	r3, [r7, #4]
    f236:	4618      	mov	r0, r3
    f238:	4b06      	ldr	r3, [pc, #24]	; (f254 <_ZN6StreamC1Ev+0x28>)
    f23a:	4798      	blx	r3
    f23c:	4a06      	ldr	r2, [pc, #24]	; (f258 <_ZN6StreamC1Ev+0x2c>)
    f23e:	687b      	ldr	r3, [r7, #4]
    f240:	601a      	str	r2, [r3, #0]
    f242:	687b      	ldr	r3, [r7, #4]
    f244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f248:	609a      	str	r2, [r3, #8]
    f24a:	687b      	ldr	r3, [r7, #4]
    f24c:	4618      	mov	r0, r3
    f24e:	3708      	adds	r7, #8
    f250:	46bd      	mov	sp, r7
    f252:	bd80      	pop	{r7, pc}
    f254:	0000f1e1 	.word	0x0000f1e1
    f258:	000112a0 	.word	0x000112a0

0000f25c <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    f25c:	b480      	push	{r7}
    f25e:	b083      	sub	sp, #12
    f260:	af00      	add	r7, sp, #0
    f262:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    f264:	4b06      	ldr	r3, [pc, #24]	; (f280 <_ZL10USBTimeoutPK10timer_task+0x24>)
    f266:	681b      	ldr	r3, [r3, #0]
    f268:	2201      	movs	r2, #1
    f26a:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    f26c:	4b04      	ldr	r3, [pc, #16]	; (f280 <_ZL10USBTimeoutPK10timer_task+0x24>)
    f26e:	681b      	ldr	r3, [r3, #0]
    f270:	2200      	movs	r2, #0
    f272:	741a      	strb	r2, [r3, #16]
	
}
    f274:	bf00      	nop
    f276:	370c      	adds	r7, #12
    f278:	46bd      	mov	sp, r7
    f27a:	bc80      	pop	{r7}
    f27c:	4770      	bx	lr
    f27e:	bf00      	nop
    f280:	20001360 	.word	0x20001360

0000f284 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    f284:	b480      	push	{r7}
    f286:	b083      	sub	sp, #12
    f288:	af00      	add	r7, sp, #0
    f28a:	4603      	mov	r3, r0
    f28c:	603a      	str	r2, [r7, #0]
    f28e:	71fb      	strb	r3, [r7, #7]
    f290:	460b      	mov	r3, r1
    f292:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    f294:	4b08      	ldr	r3, [pc, #32]	; (f2b8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    f296:	681b      	ldr	r3, [r3, #0]
    f298:	2201      	movs	r2, #1
    f29a:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    f29c:	4b06      	ldr	r3, [pc, #24]	; (f2b8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    f29e:	681b      	ldr	r3, [r3, #0]
    f2a0:	2201      	movs	r2, #1
    f2a2:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    f2a4:	4b04      	ldr	r3, [pc, #16]	; (f2b8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    f2a6:	681b      	ldr	r3, [r3, #0]
    f2a8:	2201      	movs	r2, #1
    f2aa:	741a      	strb	r2, [r3, #16]


	return false;
    f2ac:	2300      	movs	r3, #0
}
    f2ae:	4618      	mov	r0, r3
    f2b0:	370c      	adds	r7, #12
    f2b2:	46bd      	mov	sp, r7
    f2b4:	bc80      	pop	{r7}
    f2b6:	4770      	bx	lr
    f2b8:	20001360 	.word	0x20001360

0000f2bc <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    f2bc:	b480      	push	{r7}
    f2be:	b083      	sub	sp, #12
    f2c0:	af00      	add	r7, sp, #0
    f2c2:	4603      	mov	r3, r0
    f2c4:	603a      	str	r2, [r7, #0]
    f2c6:	71fb      	strb	r3, [r7, #7]
    f2c8:	460b      	mov	r3, r1
    f2ca:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    f2cc:	4b08      	ldr	r3, [pc, #32]	; (f2f0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    f2ce:	681b      	ldr	r3, [r3, #0]
    f2d0:	2201      	movs	r2, #1
    f2d2:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    f2d4:	4b06      	ldr	r3, [pc, #24]	; (f2f0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    f2d6:	681b      	ldr	r3, [r3, #0]
    f2d8:	2201      	movs	r2, #1
    f2da:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    f2dc:	4b04      	ldr	r3, [pc, #16]	; (f2f0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    f2de:	681b      	ldr	r3, [r3, #0]
    f2e0:	2201      	movs	r2, #1
    f2e2:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    f2e4:	2300      	movs	r3, #0
}
    f2e6:	4618      	mov	r0, r3
    f2e8:	370c      	adds	r7, #12
    f2ea:	46bd      	mov	sp, r7
    f2ec:	bc80      	pop	{r7}
    f2ee:	4770      	bx	lr
    f2f0:	20001360 	.word	0x20001360

0000f2f4 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    f2f4:	b580      	push	{r7, lr}
    f2f6:	b082      	sub	sp, #8
    f2f8:	af00      	add	r7, sp, #0
    f2fa:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    f2fc:	793b      	ldrb	r3, [r7, #4]
    f2fe:	f003 0301 	and.w	r3, r3, #1
    f302:	b2db      	uxtb	r3, r3
    f304:	2b00      	cmp	r3, #0
    f306:	d013      	beq.n	f330 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    f308:	490c      	ldr	r1, [pc, #48]	; (f33c <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    f30a:	2000      	movs	r0, #0
    f30c:	4b0c      	ldr	r3, [pc, #48]	; (f340 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    f30e:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    f310:	490c      	ldr	r1, [pc, #48]	; (f344 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    f312:	2001      	movs	r0, #1
    f314:	4b0a      	ldr	r3, [pc, #40]	; (f340 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    f316:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    f318:	4b0b      	ldr	r3, [pc, #44]	; (f348 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    f31a:	681b      	ldr	r3, [r3, #0]
    f31c:	2201      	movs	r2, #1
    f31e:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    f320:	4b09      	ldr	r3, [pc, #36]	; (f348 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    f322:	681b      	ldr	r3, [r3, #0]
    f324:	2201      	movs	r2, #1
    f326:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    f328:	4b07      	ldr	r3, [pc, #28]	; (f348 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    f32a:	681b      	ldr	r3, [r3, #0]
    f32c:	2201      	movs	r2, #1
    f32e:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    f330:	2300      	movs	r3, #0
}
    f332:	4618      	mov	r0, r3
    f334:	3708      	adds	r7, #8
    f336:	46bd      	mov	sp, r7
    f338:	bd80      	pop	{r7, pc}
    f33a:	bf00      	nop
    f33c:	0000f285 	.word	0x0000f285
    f340:	0000cb59 	.word	0x0000cb59
    f344:	0000f2bd 	.word	0x0000f2bd
    f348:	20001360 	.word	0x20001360

0000f34c <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    f34c:	b580      	push	{r7, lr}
    f34e:	b082      	sub	sp, #8
    f350:	af00      	add	r7, sp, #0
    f352:	6078      	str	r0, [r7, #4]
    f354:	687b      	ldr	r3, [r7, #4]
    f356:	4618      	mov	r0, r3
    f358:	4b0a      	ldr	r3, [pc, #40]	; (f384 <_ZN9CDC_ClassC1Ev+0x38>)
    f35a:	4798      	blx	r3
    f35c:	687b      	ldr	r3, [r7, #4]
    f35e:	3310      	adds	r3, #16
    f360:	4618      	mov	r0, r3
    f362:	4b09      	ldr	r3, [pc, #36]	; (f388 <_ZN9CDC_ClassC1Ev+0x3c>)
    f364:	4798      	blx	r3
    f366:	4a09      	ldr	r2, [pc, #36]	; (f38c <_ZN9CDC_ClassC1Ev+0x40>)
    f368:	687b      	ldr	r3, [r7, #4]
    f36a:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    f36c:	687b      	ldr	r3, [r7, #4]
    f36e:	f04f 32ff 	mov.w	r2, #4294967295
    f372:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    f374:	4a06      	ldr	r2, [pc, #24]	; (f390 <_ZN9CDC_ClassC1Ev+0x44>)
    f376:	687b      	ldr	r3, [r7, #4]
    f378:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    f37a:	687b      	ldr	r3, [r7, #4]
    f37c:	4618      	mov	r0, r3
    f37e:	3708      	adds	r7, #8
    f380:	46bd      	mov	sp, r7
    f382:	bd80      	pop	{r7, pc}
    f384:	0000f22d 	.word	0x0000f22d
    f388:	0000f991 	.word	0x0000f991
    f38c:	00011270 	.word	0x00011270
    f390:	20001360 	.word	0x20001360

0000f394 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    f394:	b580      	push	{r7, lr}
    f396:	b082      	sub	sp, #8
    f398:	af00      	add	r7, sp, #0
    f39a:	6078      	str	r0, [r7, #4]
    f39c:	4a06      	ldr	r2, [pc, #24]	; (f3b8 <_ZN9CDC_ClassD1Ev+0x24>)
    f39e:	687b      	ldr	r3, [r7, #4]
    f3a0:	601a      	str	r2, [r3, #0]
    f3a2:	687b      	ldr	r3, [r7, #4]
    f3a4:	3310      	adds	r3, #16
    f3a6:	4618      	mov	r0, r3
    f3a8:	4b04      	ldr	r3, [pc, #16]	; (f3bc <_ZN9CDC_ClassD1Ev+0x28>)
    f3aa:	4798      	blx	r3
{
} //~CDC_Class
    f3ac:	687b      	ldr	r3, [r7, #4]
    f3ae:	4618      	mov	r0, r3
    f3b0:	3708      	adds	r7, #8
    f3b2:	46bd      	mov	sp, r7
    f3b4:	bd80      	pop	{r7, pc}
    f3b6:	bf00      	nop
    f3b8:	00011270 	.word	0x00011270
    f3bc:	0000f9b1 	.word	0x0000f9b1

0000f3c0 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    f3c0:	b580      	push	{r7, lr}
    f3c2:	b082      	sub	sp, #8
    f3c4:	af00      	add	r7, sp, #0
    f3c6:	6078      	str	r0, [r7, #4]
	
	OnInit();
    f3c8:	687b      	ldr	r3, [r7, #4]
    f3ca:	3310      	adds	r3, #16
    f3cc:	4618      	mov	r0, r3
    f3ce:	4b09      	ldr	r3, [pc, #36]	; (f3f4 <_ZN9CDC_Class4InitEv+0x34>)
    f3d0:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    f3d2:	4909      	ldr	r1, [pc, #36]	; (f3f8 <_ZN9CDC_Class4InitEv+0x38>)
    f3d4:	2003      	movs	r0, #3
    f3d6:	4b09      	ldr	r3, [pc, #36]	; (f3fc <_ZN9CDC_Class4InitEv+0x3c>)
    f3d8:	4798      	blx	r3
	delay_ms(100);
    f3da:	2064      	movs	r0, #100	; 0x64
    f3dc:	4b08      	ldr	r3, [pc, #32]	; (f400 <_ZN9CDC_Class4InitEv+0x40>)
    f3de:	4798      	blx	r3
		
	if (connected)
    f3e0:	687b      	ldr	r3, [r7, #4]
    f3e2:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    f3e4:	2064      	movs	r0, #100	; 0x64
    f3e6:	4b06      	ldr	r3, [pc, #24]	; (f400 <_ZN9CDC_Class4InitEv+0x40>)
    f3e8:	4798      	blx	r3

	

}
    f3ea:	bf00      	nop
    f3ec:	3708      	adds	r7, #8
    f3ee:	46bd      	mov	sp, r7
    f3f0:	bd80      	pop	{r7, pc}
    f3f2:	bf00      	nop
    f3f4:	0000f9c5 	.word	0x0000f9c5
    f3f8:	0000f2f5 	.word	0x0000f2f5
    f3fc:	0000cb59 	.word	0x0000cb59
    f400:	00002509 	.word	0x00002509

0000f404 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    f404:	b580      	push	{r7, lr}
    f406:	b082      	sub	sp, #8
    f408:	af00      	add	r7, sp, #0
    f40a:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    f40c:	4b03      	ldr	r3, [pc, #12]	; (f41c <_ZN9CDC_Class9IsEnabledEv+0x18>)
    f40e:	4798      	blx	r3
    f410:	4603      	mov	r3, r0
	
}
    f412:	4618      	mov	r0, r3
    f414:	3708      	adds	r7, #8
    f416:	46bd      	mov	sp, r7
    f418:	bd80      	pop	{r7, pc}
    f41a:	bf00      	nop
    f41c:	0000cbd1 	.word	0x0000cbd1

0000f420 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    f420:	b580      	push	{r7, lr}
    f422:	b084      	sub	sp, #16
    f424:	af00      	add	r7, sp, #0
    f426:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    f428:	687b      	ldr	r3, [r7, #4]
    f42a:	699b      	ldr	r3, [r3, #24]
    f42c:	f1b3 3fff 	cmp.w	r3, #4294967295
    f430:	bf14      	ite	ne
    f432:	2301      	movne	r3, #1
    f434:	2300      	moveq	r3, #0
    f436:	b2db      	uxtb	r3, r3
    f438:	2b00      	cmp	r3, #0
    f43a:	d002      	beq.n	f442 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    f43c:	687b      	ldr	r3, [r7, #4]
    f43e:	699b      	ldr	r3, [r3, #24]
    f440:	e011      	b.n	f466 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    f442:	687b      	ldr	r3, [r7, #4]
    f444:	681b      	ldr	r3, [r3, #0]
    f446:	331c      	adds	r3, #28
    f448:	681b      	ldr	r3, [r3, #0]
    f44a:	f107 010f 	add.w	r1, r7, #15
    f44e:	2201      	movs	r2, #1
    f450:	6878      	ldr	r0, [r7, #4]
    f452:	4798      	blx	r3
    f454:	4602      	mov	r2, r0
    f456:	687b      	ldr	r3, [r7, #4]
    f458:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    f45a:	7bfb      	ldrb	r3, [r7, #15]
    f45c:	461a      	mov	r2, r3
    f45e:	687b      	ldr	r3, [r7, #4]
    f460:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    f462:	687b      	ldr	r3, [r7, #4]
    f464:	699b      	ldr	r3, [r3, #24]
}
    f466:	4618      	mov	r0, r3
    f468:	3710      	adds	r7, #16
    f46a:	46bd      	mov	sp, r7
    f46c:	bd80      	pop	{r7, pc}
	...

0000f470 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    f470:	b580      	push	{r7, lr}
    f472:	b086      	sub	sp, #24
    f474:	af00      	add	r7, sp, #0
    f476:	60f8      	str	r0, [r7, #12]
    f478:	60b9      	str	r1, [r7, #8]
    f47a:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    f47c:	68fb      	ldr	r3, [r7, #12]
    f47e:	7c1b      	ldrb	r3, [r3, #16]
    f480:	b2db      	uxtb	r3, r3
    f482:	2b00      	cmp	r3, #0
    f484:	d02e      	beq.n	f4e4 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    f486:	687a      	ldr	r2, [r7, #4]
    f488:	4613      	mov	r3, r2
    f48a:	009b      	lsls	r3, r3, #2
    f48c:	4413      	add	r3, r2
    f48e:	005b      	lsls	r3, r3, #1
    f490:	461a      	mov	r2, r3
    f492:	4918      	ldr	r1, [pc, #96]	; (f4f4 <_ZN9CDC_Class8readDataEPvl+0x84>)
    f494:	4818      	ldr	r0, [pc, #96]	; (f4f8 <_ZN9CDC_Class8readDataEPvl+0x88>)
    f496:	4b19      	ldr	r3, [pc, #100]	; (f4fc <_ZN9CDC_Class8readDataEPvl+0x8c>)
    f498:	4798      	blx	r3
		rxReady=false;
    f49a:	68fb      	ldr	r3, [r7, #12]
    f49c:	2200      	movs	r2, #0
    f49e:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    f4a0:	687b      	ldr	r3, [r7, #4]
    f4a2:	4619      	mov	r1, r3
    f4a4:	68b8      	ldr	r0, [r7, #8]
    f4a6:	4b16      	ldr	r3, [pc, #88]	; (f500 <_ZN9CDC_Class8readDataEPvl+0x90>)
    f4a8:	4798      	blx	r3
    f4aa:	4603      	mov	r3, r0
    f4ac:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    f4ae:	68fb      	ldr	r3, [r7, #12]
    f4b0:	7d5b      	ldrb	r3, [r3, #21]
    f4b2:	b2db      	uxtb	r3, r3
    f4b4:	f083 0301 	eor.w	r3, r3, #1
    f4b8:	b2db      	uxtb	r3, r3
    f4ba:	2b00      	cmp	r3, #0
    f4bc:	d006      	beq.n	f4cc <_ZN9CDC_Class8readDataEPvl+0x5c>
    f4be:	68fb      	ldr	r3, [r7, #12]
    f4c0:	7c1b      	ldrb	r3, [r3, #16]
    f4c2:	b2db      	uxtb	r3, r3
    f4c4:	2b00      	cmp	r3, #0
    f4c6:	d001      	beq.n	f4cc <_ZN9CDC_Class8readDataEPvl+0x5c>
    f4c8:	2301      	movs	r3, #1
    f4ca:	e000      	b.n	f4ce <_ZN9CDC_Class8readDataEPvl+0x5e>
    f4cc:	2300      	movs	r3, #0
    f4ce:	2b00      	cmp	r3, #0
    f4d0:	d000      	beq.n	f4d4 <_ZN9CDC_Class8readDataEPvl+0x64>
    f4d2:	e7ec      	b.n	f4ae <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    f4d4:	4808      	ldr	r0, [pc, #32]	; (f4f8 <_ZN9CDC_Class8readDataEPvl+0x88>)
    f4d6:	4b0b      	ldr	r3, [pc, #44]	; (f504 <_ZN9CDC_Class8readDataEPvl+0x94>)
    f4d8:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    f4da:	4906      	ldr	r1, [pc, #24]	; (f4f4 <_ZN9CDC_Class8readDataEPvl+0x84>)
    f4dc:	4806      	ldr	r0, [pc, #24]	; (f4f8 <_ZN9CDC_Class8readDataEPvl+0x88>)
    f4de:	4b0a      	ldr	r3, [pc, #40]	; (f508 <_ZN9CDC_Class8readDataEPvl+0x98>)
    f4e0:	4798      	blx	r3
    f4e2:	e001      	b.n	f4e8 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    f4e4:	2300      	movs	r3, #0
    f4e6:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    f4e8:	7dfb      	ldrb	r3, [r7, #23]
}
    f4ea:	4618      	mov	r0, r3
    f4ec:	3718      	adds	r7, #24
    f4ee:	46bd      	mov	sp, r7
    f4f0:	bd80      	pop	{r7, pc}
    f4f2:	bf00      	nop
    f4f4:	0000f25d 	.word	0x0000f25d
    f4f8:	2000141c 	.word	0x2000141c
    f4fc:	0000fc09 	.word	0x0000fc09
    f500:	0000caad 	.word	0x0000caad
    f504:	0000fb51 	.word	0x0000fb51
    f508:	0000fc6d 	.word	0x0000fc6d

0000f50c <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
    f50c:	b580      	push	{r7, lr}
    f50e:	b086      	sub	sp, #24
    f510:	af00      	add	r7, sp, #0
    f512:	60f8      	str	r0, [r7, #12]
    f514:	60b9      	str	r1, [r7, #8]
    f516:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
    f518:	68fb      	ldr	r3, [r7, #12]
    f51a:	2200      	movs	r2, #0
    f51c:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    f51e:	687b      	ldr	r3, [r7, #4]
    f520:	4619      	mov	r1, r3
    f522:	68b8      	ldr	r0, [r7, #8]
    f524:	4b04      	ldr	r3, [pc, #16]	; (f538 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
    f526:	4798      	blx	r3
    f528:	4603      	mov	r3, r0
    f52a:	617b      	str	r3, [r7, #20]
	return r;
    f52c:	697b      	ldr	r3, [r7, #20]
}
    f52e:	4618      	mov	r0, r3
    f530:	3718      	adds	r7, #24
    f532:	46bd      	mov	sp, r7
    f534:	bd80      	pop	{r7, pc}
    f536:	bf00      	nop
    f538:	0000caad 	.word	0x0000caad

0000f53c <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    f53c:	b580      	push	{r7, lr}
    f53e:	b084      	sub	sp, #16
    f540:	af00      	add	r7, sp, #0
    f542:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    f544:	687b      	ldr	r3, [r7, #4]
    f546:	2200      	movs	r2, #0
    f548:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    f54a:	f107 030f 	add.w	r3, r7, #15
    f54e:	2101      	movs	r1, #1
    f550:	4618      	mov	r0, r3
    f552:	4b08      	ldr	r3, [pc, #32]	; (f574 <_ZN9CDC_Class4readEv+0x38>)
    f554:	4798      	blx	r3
	while(!rxReady);
    f556:	687b      	ldr	r3, [r7, #4]
    f558:	7d5b      	ldrb	r3, [r3, #21]
    f55a:	b2db      	uxtb	r3, r3
    f55c:	f083 0301 	eor.w	r3, r3, #1
    f560:	b2db      	uxtb	r3, r3
    f562:	2b00      	cmp	r3, #0
    f564:	d000      	beq.n	f568 <_ZN9CDC_Class4readEv+0x2c>
    f566:	e7f6      	b.n	f556 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    f568:	7bfb      	ldrb	r3, [r7, #15]
}
    f56a:	4618      	mov	r0, r3
    f56c:	3710      	adds	r7, #16
    f56e:	46bd      	mov	sp, r7
    f570:	bd80      	pop	{r7, pc}
    f572:	bf00      	nop
    f574:	0000caad 	.word	0x0000caad

0000f578 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    f578:	b580      	push	{r7, lr}
    f57a:	b082      	sub	sp, #8
    f57c:	af00      	add	r7, sp, #0
    f57e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    f580:	687b      	ldr	r3, [r7, #4]
    f582:	331c      	adds	r3, #28
    f584:	2140      	movs	r1, #64	; 0x40
    f586:	4618      	mov	r0, r3
    f588:	4b02      	ldr	r3, [pc, #8]	; (f594 <_ZN9CDC_Class5flushEv+0x1c>)
    f58a:	4798      	blx	r3
}
    f58c:	bf00      	nop
    f58e:	3708      	adds	r7, #8
    f590:	46bd      	mov	sp, r7
    f592:	bd80      	pop	{r7, pc}
    f594:	0000caf1 	.word	0x0000caf1

0000f598 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    f598:	b580      	push	{r7, lr}
    f59a:	b082      	sub	sp, #8
    f59c:	af00      	add	r7, sp, #0
    f59e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    f5a0:	4b02      	ldr	r3, [pc, #8]	; (f5ac <_ZN9CDC_Class5clearEv+0x14>)
    f5a2:	4798      	blx	r3
}
    f5a4:	bf00      	nop
    f5a6:	3708      	adds	r7, #8
    f5a8:	46bd      	mov	sp, r7
    f5aa:	bd80      	pop	{r7, pc}
    f5ac:	0000cb35 	.word	0x0000cb35

0000f5b0 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    f5b0:	b580      	push	{r7, lr}
    f5b2:	b082      	sub	sp, #8
    f5b4:	af00      	add	r7, sp, #0
    f5b6:	6078      	str	r0, [r7, #4]
    f5b8:	460b      	mov	r3, r1
    f5ba:	70fb      	strb	r3, [r7, #3]
	if (connected){
    f5bc:	687b      	ldr	r3, [r7, #4]
    f5be:	7c1b      	ldrb	r3, [r3, #16]
    f5c0:	b2db      	uxtb	r3, r3
    f5c2:	2b00      	cmp	r3, #0
    f5c4:	d012      	beq.n	f5ec <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    f5c6:	687b      	ldr	r3, [r7, #4]
    f5c8:	7d1b      	ldrb	r3, [r3, #20]
    f5ca:	b2db      	uxtb	r3, r3
    f5cc:	f083 0301 	eor.w	r3, r3, #1
    f5d0:	b2db      	uxtb	r3, r3
    f5d2:	2b00      	cmp	r3, #0
    f5d4:	d000      	beq.n	f5d8 <_ZN9CDC_Class5writeEh+0x28>
    f5d6:	e7f6      	b.n	f5c6 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    f5d8:	687b      	ldr	r3, [r7, #4]
    f5da:	681b      	ldr	r3, [r3, #0]
    f5dc:	3324      	adds	r3, #36	; 0x24
    f5de:	681b      	ldr	r3, [r3, #0]
    f5e0:	1cf9      	adds	r1, r7, #3
    f5e2:	2201      	movs	r2, #1
    f5e4:	6878      	ldr	r0, [r7, #4]
    f5e6:	4798      	blx	r3
    f5e8:	4603      	mov	r3, r0
    f5ea:	e000      	b.n	f5ee <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    f5ec:	2300      	movs	r3, #0
	}
		
}
    f5ee:	4618      	mov	r0, r3
    f5f0:	3708      	adds	r7, #8
    f5f2:	46bd      	mov	sp, r7
    f5f4:	bd80      	pop	{r7, pc}
	...

0000f5f8 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    f5f8:	b580      	push	{r7, lr}
    f5fa:	b086      	sub	sp, #24
    f5fc:	af00      	add	r7, sp, #0
    f5fe:	60f8      	str	r0, [r7, #12]
    f600:	60b9      	str	r1, [r7, #8]
    f602:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    f604:	68fb      	ldr	r3, [r7, #12]
    f606:	7c1b      	ldrb	r3, [r3, #16]
    f608:	b2db      	uxtb	r3, r3
    f60a:	2b00      	cmp	r3, #0
    f60c:	d02f      	beq.n	f66e <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    f60e:	687a      	ldr	r2, [r7, #4]
    f610:	4613      	mov	r3, r2
    f612:	009b      	lsls	r3, r3, #2
    f614:	4413      	add	r3, r2
    f616:	005b      	lsls	r3, r3, #1
    f618:	461a      	mov	r2, r3
    f61a:	4917      	ldr	r1, [pc, #92]	; (f678 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    f61c:	4817      	ldr	r0, [pc, #92]	; (f67c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    f61e:	4b18      	ldr	r3, [pc, #96]	; (f680 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    f620:	4798      	blx	r3
		txReady=false;
    f622:	68fb      	ldr	r3, [r7, #12]
    f624:	2200      	movs	r2, #0
    f626:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    f628:	687b      	ldr	r3, [r7, #4]
    f62a:	4619      	mov	r1, r3
    f62c:	68b8      	ldr	r0, [r7, #8]
    f62e:	4b15      	ldr	r3, [pc, #84]	; (f684 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    f630:	4798      	blx	r3
    f632:	4603      	mov	r3, r0
    f634:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    f636:	68fb      	ldr	r3, [r7, #12]
    f638:	7d1b      	ldrb	r3, [r3, #20]
    f63a:	b2db      	uxtb	r3, r3
    f63c:	f083 0301 	eor.w	r3, r3, #1
    f640:	b2db      	uxtb	r3, r3
    f642:	2b00      	cmp	r3, #0
    f644:	d006      	beq.n	f654 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    f646:	68fb      	ldr	r3, [r7, #12]
    f648:	7c1b      	ldrb	r3, [r3, #16]
    f64a:	b2db      	uxtb	r3, r3
    f64c:	2b00      	cmp	r3, #0
    f64e:	d001      	beq.n	f654 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    f650:	2301      	movs	r3, #1
    f652:	e000      	b.n	f656 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    f654:	2300      	movs	r3, #0
    f656:	2b00      	cmp	r3, #0
    f658:	d000      	beq.n	f65c <_ZN9CDC_Class9writeDataEPKvl+0x64>
    f65a:	e7ec      	b.n	f636 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    f65c:	4807      	ldr	r0, [pc, #28]	; (f67c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    f65e:	4b0a      	ldr	r3, [pc, #40]	; (f688 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    f660:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    f662:	4905      	ldr	r1, [pc, #20]	; (f678 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    f664:	4805      	ldr	r0, [pc, #20]	; (f67c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    f666:	4b09      	ldr	r3, [pc, #36]	; (f68c <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    f668:	4798      	blx	r3
		return r;
    f66a:	697b      	ldr	r3, [r7, #20]
    f66c:	e000      	b.n	f670 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    f66e:	2300      	movs	r3, #0
	}
	

}
    f670:	4618      	mov	r0, r3
    f672:	3718      	adds	r7, #24
    f674:	46bd      	mov	sp, r7
    f676:	bd80      	pop	{r7, pc}
    f678:	0000f25d 	.word	0x0000f25d
    f67c:	2000141c 	.word	0x2000141c
    f680:	0000fc09 	.word	0x0000fc09
    f684:	0000caf1 	.word	0x0000caf1
    f688:	0000fb51 	.word	0x0000fb51
    f68c:	0000fc6d 	.word	0x0000fc6d

0000f690 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    f690:	b580      	push	{r7, lr}
    f692:	b086      	sub	sp, #24
    f694:	af00      	add	r7, sp, #0
    f696:	60f8      	str	r0, [r7, #12]
    f698:	60b9      	str	r1, [r7, #8]
    f69a:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    f69c:	68fb      	ldr	r3, [r7, #12]
    f69e:	2200      	movs	r2, #0
    f6a0:	751a      	strb	r2, [r3, #20]

 	if (connected){
    f6a2:	68fb      	ldr	r3, [r7, #12]
    f6a4:	7c1b      	ldrb	r3, [r3, #16]
    f6a6:	b2db      	uxtb	r3, r3
    f6a8:	2b00      	cmp	r3, #0
    f6aa:	d02a      	beq.n	f702 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    f6ac:	687a      	ldr	r2, [r7, #4]
    f6ae:	4613      	mov	r3, r2
    f6b0:	009b      	lsls	r3, r3, #2
    f6b2:	4413      	add	r3, r2
    f6b4:	005b      	lsls	r3, r3, #1
    f6b6:	461a      	mov	r2, r3
    f6b8:	4915      	ldr	r1, [pc, #84]	; (f710 <_ZN9CDC_Class5writeEPKhj+0x80>)
    f6ba:	4816      	ldr	r0, [pc, #88]	; (f714 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f6bc:	4b16      	ldr	r3, [pc, #88]	; (f718 <_ZN9CDC_Class5writeEPKhj+0x88>)
    f6be:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    f6c0:	6879      	ldr	r1, [r7, #4]
    f6c2:	68b8      	ldr	r0, [r7, #8]
    f6c4:	4b15      	ldr	r3, [pc, #84]	; (f71c <_ZN9CDC_Class5writeEPKhj+0x8c>)
    f6c6:	4798      	blx	r3
    f6c8:	4603      	mov	r3, r0
    f6ca:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    f6cc:	68fb      	ldr	r3, [r7, #12]
    f6ce:	7d1b      	ldrb	r3, [r3, #20]
    f6d0:	b2db      	uxtb	r3, r3
    f6d2:	f083 0301 	eor.w	r3, r3, #1
    f6d6:	b2db      	uxtb	r3, r3
    f6d8:	2b00      	cmp	r3, #0
    f6da:	d006      	beq.n	f6ea <_ZN9CDC_Class5writeEPKhj+0x5a>
    f6dc:	68fb      	ldr	r3, [r7, #12]
    f6de:	7c1b      	ldrb	r3, [r3, #16]
    f6e0:	b2db      	uxtb	r3, r3
    f6e2:	2b00      	cmp	r3, #0
    f6e4:	d001      	beq.n	f6ea <_ZN9CDC_Class5writeEPKhj+0x5a>
    f6e6:	2301      	movs	r3, #1
    f6e8:	e000      	b.n	f6ec <_ZN9CDC_Class5writeEPKhj+0x5c>
    f6ea:	2300      	movs	r3, #0
    f6ec:	2b00      	cmp	r3, #0
    f6ee:	d000      	beq.n	f6f2 <_ZN9CDC_Class5writeEPKhj+0x62>
    f6f0:	e7ec      	b.n	f6cc <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    f6f2:	4808      	ldr	r0, [pc, #32]	; (f714 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f6f4:	4b0a      	ldr	r3, [pc, #40]	; (f720 <_ZN9CDC_Class5writeEPKhj+0x90>)
    f6f6:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    f6f8:	4905      	ldr	r1, [pc, #20]	; (f710 <_ZN9CDC_Class5writeEPKhj+0x80>)
    f6fa:	4806      	ldr	r0, [pc, #24]	; (f714 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f6fc:	4b09      	ldr	r3, [pc, #36]	; (f724 <_ZN9CDC_Class5writeEPKhj+0x94>)
    f6fe:	4798      	blx	r3
    f700:	e001      	b.n	f706 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    f702:	2300      	movs	r3, #0
    f704:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    f706:	697b      	ldr	r3, [r7, #20]
}
    f708:	4618      	mov	r0, r3
    f70a:	3718      	adds	r7, #24
    f70c:	46bd      	mov	sp, r7
    f70e:	bd80      	pop	{r7, pc}
    f710:	0000f25d 	.word	0x0000f25d
    f714:	2000141c 	.word	0x2000141c
    f718:	0000fc09 	.word	0x0000fc09
    f71c:	0000caf1 	.word	0x0000caf1
    f720:	0000fb51 	.word	0x0000fb51
    f724:	0000fc6d 	.word	0x0000fc6d

0000f728 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    f728:	b480      	push	{r7}
    f72a:	b083      	sub	sp, #12
    f72c:	af00      	add	r7, sp, #0
    f72e:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    f730:	687b      	ldr	r3, [r7, #4]
    f732:	7d5b      	ldrb	r3, [r3, #21]
    f734:	b2db      	uxtb	r3, r3
    f736:	2b00      	cmp	r3, #0
    f738:	d006      	beq.n	f748 <_ZN9CDC_Class9availableEv+0x20>
    f73a:	687b      	ldr	r3, [r7, #4]
    f73c:	7d1b      	ldrb	r3, [r3, #20]
    f73e:	b2db      	uxtb	r3, r3
    f740:	2b00      	cmp	r3, #0
    f742:	d001      	beq.n	f748 <_ZN9CDC_Class9availableEv+0x20>
    f744:	2301      	movs	r3, #1
    f746:	e000      	b.n	f74a <_ZN9CDC_Class9availableEv+0x22>
    f748:	2300      	movs	r3, #0
    f74a:	2b00      	cmp	r3, #0
    f74c:	d001      	beq.n	f752 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    f74e:	2301      	movs	r3, #1
    f750:	e000      	b.n	f754 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    f752:	2300      	movs	r3, #0
	}
	
}
    f754:	4618      	mov	r0, r3
    f756:	370c      	adds	r7, #12
    f758:	46bd      	mov	sp, r7
    f75a:	bc80      	pop	{r7}
    f75c:	4770      	bx	lr
	...

0000f760 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    f760:	b580      	push	{r7, lr}
    f762:	b082      	sub	sp, #8
    f764:	af00      	add	r7, sp, #0
    f766:	6078      	str	r0, [r7, #4]
    f768:	6039      	str	r1, [r7, #0]
    f76a:	687b      	ldr	r3, [r7, #4]
    f76c:	2b01      	cmp	r3, #1
    f76e:	d10c      	bne.n	f78a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    f770:	683b      	ldr	r3, [r7, #0]
    f772:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f776:	4293      	cmp	r3, r2
    f778:	d107      	bne.n	f78a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    f77a:	4806      	ldr	r0, [pc, #24]	; (f794 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    f77c:	4b06      	ldr	r3, [pc, #24]	; (f798 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    f77e:	4798      	blx	r3
    f780:	4a06      	ldr	r2, [pc, #24]	; (f79c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    f782:	4907      	ldr	r1, [pc, #28]	; (f7a0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    f784:	4803      	ldr	r0, [pc, #12]	; (f794 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    f786:	4b07      	ldr	r3, [pc, #28]	; (f7a4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    f788:	4798      	blx	r3
    f78a:	bf00      	nop
    f78c:	3708      	adds	r7, #8
    f78e:	46bd      	mov	sp, r7
    f790:	bd80      	pop	{r7, pc}
    f792:	bf00      	nop
    f794:	20001364 	.word	0x20001364
    f798:	0000f34d 	.word	0x0000f34d
    f79c:	20000000 	.word	0x20000000
    f7a0:	0000f395 	.word	0x0000f395
    f7a4:	00010525 	.word	0x00010525

0000f7a8 <_GLOBAL__sub_I_ptrCDCClass>:
    f7a8:	b580      	push	{r7, lr}
    f7aa:	af00      	add	r7, sp, #0
    f7ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f7b0:	2001      	movs	r0, #1
    f7b2:	4b01      	ldr	r3, [pc, #4]	; (f7b8 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    f7b4:	4798      	blx	r3
    f7b6:	bd80      	pop	{r7, pc}
    f7b8:	0000f761 	.word	0x0000f761

0000f7bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    f7bc:	b580      	push	{r7, lr}
    f7be:	b086      	sub	sp, #24
    f7c0:	af00      	add	r7, sp, #0
    f7c2:	60f8      	str	r0, [r7, #12]
    f7c4:	60b9      	str	r1, [r7, #8]
    f7c6:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    f7c8:	2300      	movs	r3, #0
    f7ca:	617b      	str	r3, [r7, #20]
  while (size--) {
    f7cc:	687b      	ldr	r3, [r7, #4]
    f7ce:	1e5a      	subs	r2, r3, #1
    f7d0:	607a      	str	r2, [r7, #4]
    f7d2:	2b00      	cmp	r3, #0
    f7d4:	bf14      	ite	ne
    f7d6:	2301      	movne	r3, #1
    f7d8:	2300      	moveq	r3, #0
    f7da:	b2db      	uxtb	r3, r3
    f7dc:	2b00      	cmp	r3, #0
    f7de:	d016      	beq.n	f80e <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    f7e0:	68fb      	ldr	r3, [r7, #12]
    f7e2:	681b      	ldr	r3, [r3, #0]
    f7e4:	681a      	ldr	r2, [r3, #0]
    f7e6:	68bb      	ldr	r3, [r7, #8]
    f7e8:	1c59      	adds	r1, r3, #1
    f7ea:	60b9      	str	r1, [r7, #8]
    f7ec:	781b      	ldrb	r3, [r3, #0]
    f7ee:	4619      	mov	r1, r3
    f7f0:	68f8      	ldr	r0, [r7, #12]
    f7f2:	4790      	blx	r2
    f7f4:	4603      	mov	r3, r0
    f7f6:	2b00      	cmp	r3, #0
    f7f8:	bf14      	ite	ne
    f7fa:	2301      	movne	r3, #1
    f7fc:	2300      	moveq	r3, #0
    f7fe:	b2db      	uxtb	r3, r3
    f800:	2b00      	cmp	r3, #0
    f802:	d003      	beq.n	f80c <_ZN5Print5writeEPKhj+0x50>
    f804:	697b      	ldr	r3, [r7, #20]
    f806:	3301      	adds	r3, #1
    f808:	617b      	str	r3, [r7, #20]
  while (size--) {
    f80a:	e7df      	b.n	f7cc <_ZN5Print5writeEPKhj+0x10>
    else break;
    f80c:	bf00      	nop
  }
  return n;
    f80e:	697b      	ldr	r3, [r7, #20]
}
    f810:	4618      	mov	r0, r3
    f812:	3718      	adds	r7, #24
    f814:	46bd      	mov	sp, r7
    f816:	bd80      	pop	{r7, pc}

0000f818 <hri_port_read_DIR_reg>:
{
    f818:	b480      	push	{r7}
    f81a:	b083      	sub	sp, #12
    f81c:	af00      	add	r7, sp, #0
    f81e:	6078      	str	r0, [r7, #4]
    f820:	460b      	mov	r3, r1
    f822:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    f824:	78fb      	ldrb	r3, [r7, #3]
    f826:	687a      	ldr	r2, [r7, #4]
    f828:	01db      	lsls	r3, r3, #7
    f82a:	4413      	add	r3, r2
    f82c:	681b      	ldr	r3, [r3, #0]
}
    f82e:	4618      	mov	r0, r3
    f830:	370c      	adds	r7, #12
    f832:	46bd      	mov	sp, r7
    f834:	bc80      	pop	{r7}
    f836:	4770      	bx	lr

0000f838 <hri_port_read_OUT_reg>:
{
    f838:	b480      	push	{r7}
    f83a:	b083      	sub	sp, #12
    f83c:	af00      	add	r7, sp, #0
    f83e:	6078      	str	r0, [r7, #4]
    f840:	460b      	mov	r3, r1
    f842:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    f844:	78fb      	ldrb	r3, [r7, #3]
    f846:	687a      	ldr	r2, [r7, #4]
    f848:	01db      	lsls	r3, r3, #7
    f84a:	4413      	add	r3, r2
    f84c:	3310      	adds	r3, #16
    f84e:	681b      	ldr	r3, [r3, #0]
}
    f850:	4618      	mov	r0, r3
    f852:	370c      	adds	r7, #12
    f854:	46bd      	mov	sp, r7
    f856:	bc80      	pop	{r7}
    f858:	4770      	bx	lr

0000f85a <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    f85a:	b480      	push	{r7}
    f85c:	b083      	sub	sp, #12
    f85e:	af00      	add	r7, sp, #0
    f860:	6078      	str	r0, [r7, #4]
    f862:	460b      	mov	r3, r1
    f864:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    f866:	78fb      	ldrb	r3, [r7, #3]
    f868:	687a      	ldr	r2, [r7, #4]
    f86a:	01db      	lsls	r3, r3, #7
    f86c:	4413      	add	r3, r2
    f86e:	3320      	adds	r3, #32
    f870:	681b      	ldr	r3, [r3, #0]
}
    f872:	4618      	mov	r0, r3
    f874:	370c      	adds	r7, #12
    f876:	46bd      	mov	sp, r7
    f878:	bc80      	pop	{r7}
    f87a:	4770      	bx	lr

0000f87c <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    f87c:	b580      	push	{r7, lr}
    f87e:	b086      	sub	sp, #24
    f880:	af00      	add	r7, sp, #0
    f882:	4603      	mov	r3, r0
    f884:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    f886:	f107 030c 	add.w	r3, r7, #12
    f88a:	4618      	mov	r0, r3
    f88c:	4b13      	ldr	r3, [pc, #76]	; (f8dc <_gpio_get_level+0x60>)
    f88e:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    f890:	79fb      	ldrb	r3, [r7, #7]
    f892:	4619      	mov	r1, r3
    f894:	4812      	ldr	r0, [pc, #72]	; (f8e0 <_gpio_get_level+0x64>)
    f896:	4b13      	ldr	r3, [pc, #76]	; (f8e4 <_gpio_get_level+0x68>)
    f898:	4798      	blx	r3
    f89a:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    f89c:	79fb      	ldrb	r3, [r7, #7]
    f89e:	4619      	mov	r1, r3
    f8a0:	480f      	ldr	r0, [pc, #60]	; (f8e0 <_gpio_get_level+0x64>)
    f8a2:	4b11      	ldr	r3, [pc, #68]	; (f8e8 <_gpio_get_level+0x6c>)
    f8a4:	4798      	blx	r3
    f8a6:	4602      	mov	r2, r0
    f8a8:	697b      	ldr	r3, [r7, #20]
    f8aa:	43db      	mvns	r3, r3
    f8ac:	4013      	ands	r3, r2
    f8ae:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    f8b0:	79fb      	ldrb	r3, [r7, #7]
    f8b2:	4619      	mov	r1, r3
    f8b4:	480a      	ldr	r0, [pc, #40]	; (f8e0 <_gpio_get_level+0x64>)
    f8b6:	4b0d      	ldr	r3, [pc, #52]	; (f8ec <_gpio_get_level+0x70>)
    f8b8:	4798      	blx	r3
    f8ba:	4602      	mov	r2, r0
    f8bc:	697b      	ldr	r3, [r7, #20]
    f8be:	4013      	ands	r3, r2
    f8c0:	693a      	ldr	r2, [r7, #16]
    f8c2:	4313      	orrs	r3, r2
    f8c4:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    f8c6:	f107 030c 	add.w	r3, r7, #12
    f8ca:	4618      	mov	r0, r3
    f8cc:	4b08      	ldr	r3, [pc, #32]	; (f8f0 <_gpio_get_level+0x74>)
    f8ce:	4798      	blx	r3

	return tmp;
    f8d0:	693b      	ldr	r3, [r7, #16]
}
    f8d2:	4618      	mov	r0, r3
    f8d4:	3718      	adds	r7, #24
    f8d6:	46bd      	mov	sp, r7
    f8d8:	bd80      	pop	{r7, pc}
    f8da:	bf00      	nop
    f8dc:	0000bccd 	.word	0x0000bccd
    f8e0:	41008000 	.word	0x41008000
    f8e4:	0000f819 	.word	0x0000f819
    f8e8:	0000f85b 	.word	0x0000f85b
    f8ec:	0000f839 	.word	0x0000f839
    f8f0:	0000bcf3 	.word	0x0000bcf3

0000f8f4 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    f8f4:	b580      	push	{r7, lr}
    f8f6:	b082      	sub	sp, #8
    f8f8:	af00      	add	r7, sp, #0
    f8fa:	4603      	mov	r3, r0
    f8fc:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    f8fe:	79fb      	ldrb	r3, [r7, #7]
    f900:	115b      	asrs	r3, r3, #5
    f902:	b2db      	uxtb	r3, r3
    f904:	4618      	mov	r0, r3
    f906:	4b09      	ldr	r3, [pc, #36]	; (f92c <gpio_get_pin_level+0x38>)
    f908:	4798      	blx	r3
    f90a:	4601      	mov	r1, r0
    f90c:	79fb      	ldrb	r3, [r7, #7]
    f90e:	f003 031f 	and.w	r3, r3, #31
    f912:	2201      	movs	r2, #1
    f914:	fa02 f303 	lsl.w	r3, r2, r3
    f918:	400b      	ands	r3, r1
    f91a:	2b00      	cmp	r3, #0
    f91c:	bf14      	ite	ne
    f91e:	2301      	movne	r3, #1
    f920:	2300      	moveq	r3, #0
    f922:	b2db      	uxtb	r3, r3
}
    f924:	4618      	mov	r0, r3
    f926:	3708      	adds	r7, #8
    f928:	46bd      	mov	sp, r7
    f92a:	bd80      	pop	{r7, pc}
    f92c:	0000f87d 	.word	0x0000f87d

0000f930 <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    f930:	b480      	push	{r7}
    f932:	b083      	sub	sp, #12
    f934:	af00      	add	r7, sp, #0
    f936:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    f938:	4b06      	ldr	r3, [pc, #24]	; (f954 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f93a:	681b      	ldr	r3, [r3, #0]
    f93c:	2201      	movs	r2, #1
    f93e:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    f940:	4b04      	ldr	r3, [pc, #16]	; (f954 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f942:	681b      	ldr	r3, [r3, #0]
    f944:	2200      	movs	r2, #0
    f946:	705a      	strb	r2, [r3, #1]
}
    f948:	bf00      	nop
    f94a:	370c      	adds	r7, #12
    f94c:	46bd      	mov	sp, r7
    f94e:	bc80      	pop	{r7}
    f950:	4770      	bx	lr
    f952:	bf00      	nop
    f954:	200013c4 	.word	0x200013c4

0000f958 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    f958:	b580      	push	{r7, lr}
    f95a:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    f95c:	2040      	movs	r0, #64	; 0x40
    f95e:	4b0a      	ldr	r3, [pc, #40]	; (f988 <_ZL10USBPluggedv+0x30>)
    f960:	4798      	blx	r3
    f962:	4603      	mov	r3, r0
    f964:	2b00      	cmp	r3, #0
    f966:	d004      	beq.n	f972 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    f968:	4b08      	ldr	r3, [pc, #32]	; (f98c <_ZL10USBPluggedv+0x34>)
    f96a:	681b      	ldr	r3, [r3, #0]
    f96c:	2201      	movs	r2, #1
    f96e:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    f970:	e007      	b.n	f982 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    f972:	4b06      	ldr	r3, [pc, #24]	; (f98c <_ZL10USBPluggedv+0x34>)
    f974:	681b      	ldr	r3, [r3, #0]
    f976:	2200      	movs	r2, #0
    f978:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    f97a:	4b04      	ldr	r3, [pc, #16]	; (f98c <_ZL10USBPluggedv+0x34>)
    f97c:	681b      	ldr	r3, [r3, #0]
    f97e:	2200      	movs	r2, #0
    f980:	701a      	strb	r2, [r3, #0]
}
    f982:	bf00      	nop
    f984:	bd80      	pop	{r7, pc}
    f986:	bf00      	nop
    f988:	0000f8f5 	.word	0x0000f8f5
    f98c:	200013c4 	.word	0x200013c4

0000f990 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    f990:	b480      	push	{r7}
    f992:	b083      	sub	sp, #12
    f994:	af00      	add	r7, sp, #0
    f996:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    f998:	4a04      	ldr	r2, [pc, #16]	; (f9ac <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    f99a:	687b      	ldr	r3, [r7, #4]
    f99c:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    f99e:	687b      	ldr	r3, [r7, #4]
    f9a0:	4618      	mov	r0, r3
    f9a2:	370c      	adds	r7, #12
    f9a4:	46bd      	mov	sp, r7
    f9a6:	bc80      	pop	{r7}
    f9a8:	4770      	bx	lr
    f9aa:	bf00      	nop
    f9ac:	200013c4 	.word	0x200013c4

0000f9b0 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    f9b0:	b480      	push	{r7}
    f9b2:	b083      	sub	sp, #12
    f9b4:	af00      	add	r7, sp, #0
    f9b6:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    f9b8:	687b      	ldr	r3, [r7, #4]
    f9ba:	4618      	mov	r0, r3
    f9bc:	370c      	adds	r7, #12
    f9be:	46bd      	mov	sp, r7
    f9c0:	bc80      	pop	{r7}
    f9c2:	4770      	bx	lr

0000f9c4 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    f9c4:	b580      	push	{r7, lr}
    f9c6:	b082      	sub	sp, #8
    f9c8:	af00      	add	r7, sp, #0
    f9ca:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    f9cc:	491f      	ldr	r1, [pc, #124]	; (fa4c <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    f9ce:	2040      	movs	r0, #64	; 0x40
    f9d0:	4b1f      	ldr	r3, [pc, #124]	; (fa50 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    f9d2:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    f9d4:	481f      	ldr	r0, [pc, #124]	; (fa54 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f9d6:	4b20      	ldr	r3, [pc, #128]	; (fa58 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    f9d8:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    f9da:	2040      	movs	r0, #64	; 0x40
    f9dc:	4b1f      	ldr	r3, [pc, #124]	; (fa5c <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    f9de:	4798      	blx	r3
    f9e0:	4603      	mov	r3, r0
    f9e2:	461a      	mov	r2, r3
    f9e4:	687b      	ldr	r3, [r7, #4]
    f9e6:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    f9e8:	687b      	ldr	r3, [r7, #4]
    f9ea:	78db      	ldrb	r3, [r3, #3]
    f9ec:	2b00      	cmp	r3, #0
    f9ee:	d024      	beq.n	fa3a <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
    f9f0:	687b      	ldr	r3, [r7, #4]
    f9f2:	2200      	movs	r2, #0
    f9f4:	709a      	strb	r2, [r3, #2]
			plugged=true;
    f9f6:	687b      	ldr	r3, [r7, #4]
    f9f8:	2201      	movs	r2, #1
    f9fa:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    f9fc:	f44f 7216 	mov.w	r2, #600	; 0x258
    fa00:	4917      	ldr	r1, [pc, #92]	; (fa60 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    fa02:	4814      	ldr	r0, [pc, #80]	; (fa54 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    fa04:	4b17      	ldr	r3, [pc, #92]	; (fa64 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    fa06:	4798      	blx	r3
			usbTerminalTimer.Start();
    fa08:	4812      	ldr	r0, [pc, #72]	; (fa54 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    fa0a:	4b17      	ldr	r3, [pc, #92]	; (fa68 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    fa0c:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    fa0e:	4817      	ldr	r0, [pc, #92]	; (fa6c <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    fa10:	4b17      	ldr	r3, [pc, #92]	; (fa70 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
    fa12:	4798      	blx	r3
    fa14:	4603      	mov	r3, r0
    fa16:	f083 0301 	eor.w	r3, r3, #1
    fa1a:	b2db      	uxtb	r3, r3
    fa1c:	2b00      	cmp	r3, #0
    fa1e:	d008      	beq.n	fa32 <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
    fa20:	687b      	ldr	r3, [r7, #4]
    fa22:	789b      	ldrb	r3, [r3, #2]
    fa24:	b2db      	uxtb	r3, r3
    fa26:	2b00      	cmp	r3, #0
    fa28:	d0f1      	beq.n	fa0e <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
    fa2a:	687b      	ldr	r3, [r7, #4]
    fa2c:	2200      	movs	r2, #0
    fa2e:	701a      	strb	r2, [r3, #0]
					return;
    fa30:	e009      	b.n	fa46 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    fa32:	4808      	ldr	r0, [pc, #32]	; (fa54 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    fa34:	4b0f      	ldr	r3, [pc, #60]	; (fa74 <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
    fa36:	4798      	blx	r3
    fa38:	e005      	b.n	fa46 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
    fa3a:	687b      	ldr	r3, [r7, #4]
    fa3c:	2200      	movs	r2, #0
    fa3e:	701a      	strb	r2, [r3, #0]
			plugged=false;
    fa40:	687b      	ldr	r3, [r7, #4]
    fa42:	2200      	movs	r2, #0
    fa44:	705a      	strb	r2, [r3, #1]
		}
		
}
    fa46:	3708      	adds	r7, #8
    fa48:	46bd      	mov	sp, r7
    fa4a:	bd80      	pop	{r7, pc}
    fa4c:	0000f959 	.word	0x0000f959
    fa50:	0000259d 	.word	0x0000259d
    fa54:	2000141c 	.word	0x2000141c
    fa58:	0000faf5 	.word	0x0000faf5
    fa5c:	0000f8f5 	.word	0x0000f8f5
    fa60:	0000f931 	.word	0x0000f931
    fa64:	0000fbe1 	.word	0x0000fbe1
    fa68:	0000fb2d 	.word	0x0000fb2d
    fa6c:	20001364 	.word	0x20001364
    fa70:	0000f405 	.word	0x0000f405
    fa74:	0000fb51 	.word	0x0000fb51

0000fa78 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    fa78:	b580      	push	{r7, lr}
    fa7a:	b082      	sub	sp, #8
    fa7c:	af00      	add	r7, sp, #0
    fa7e:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    fa80:	4b04      	ldr	r3, [pc, #16]	; (fa94 <_ZL7task_cbPK10timer_task+0x1c>)
    fa82:	681b      	ldr	r3, [r3, #0]
    fa84:	4618      	mov	r0, r3
    fa86:	4b04      	ldr	r3, [pc, #16]	; (fa98 <_ZL7task_cbPK10timer_task+0x20>)
    fa88:	4798      	blx	r3
}
    fa8a:	bf00      	nop
    fa8c:	3708      	adds	r7, #8
    fa8e:	46bd      	mov	sp, r7
    fa90:	bd80      	pop	{r7, pc}
    fa92:	bf00      	nop
    fa94:	200013c8 	.word	0x200013c8
    fa98:	0000fb79 	.word	0x0000fb79

0000fa9c <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    fa9c:	b480      	push	{r7}
    fa9e:	b083      	sub	sp, #12
    faa0:	af00      	add	r7, sp, #0
    faa2:	6078      	str	r0, [r7, #4]
    faa4:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    faa6:	687b      	ldr	r3, [r7, #4]
    faa8:	683a      	ldr	r2, [r7, #0]
    faaa:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
    faac:	4a08      	ldr	r2, [pc, #32]	; (fad0 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    faae:	687b      	ldr	r3, [r7, #4]
    fab0:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    fab2:	687b      	ldr	r3, [r7, #4]
    fab4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    fab8:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
    faba:	687b      	ldr	r3, [r7, #4]
    fabc:	689b      	ldr	r3, [r3, #8]
    fabe:	4a05      	ldr	r2, [pc, #20]	; (fad4 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    fac0:	60da      	str	r2, [r3, #12]
} //Timer_Class
    fac2:	687b      	ldr	r3, [r7, #4]
    fac4:	4618      	mov	r0, r3
    fac6:	370c      	adds	r7, #12
    fac8:	46bd      	mov	sp, r7
    faca:	bc80      	pop	{r7}
    facc:	4770      	bx	lr
    face:	bf00      	nop
    fad0:	200013c8 	.word	0x200013c8
    fad4:	0000fa79 	.word	0x0000fa79

0000fad8 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    fad8:	b480      	push	{r7}
    fada:	b083      	sub	sp, #12
    fadc:	af00      	add	r7, sp, #0
    fade:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    fae0:	687b      	ldr	r3, [r7, #4]
    fae2:	2200      	movs	r2, #0
    fae4:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    fae6:	687b      	ldr	r3, [r7, #4]
    fae8:	4618      	mov	r0, r3
    faea:	370c      	adds	r7, #12
    faec:	46bd      	mov	sp, r7
    faee:	bc80      	pop	{r7}
    faf0:	4770      	bx	lr
	...

0000faf4 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
    faf4:	b580      	push	{r7, lr}
    faf6:	b082      	sub	sp, #8
    faf8:	af00      	add	r7, sp, #0
    fafa:	6078      	str	r0, [r7, #4]
	
	ticks=0;
    fafc:	687b      	ldr	r3, [r7, #4]
    fafe:	2200      	movs	r2, #0
    fb00:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
    fb02:	6878      	ldr	r0, [r7, #4]
    fb04:	4b08      	ldr	r3, [pc, #32]	; (fb28 <_ZN17TimerSerial_Class4InitEv+0x34>)
    fb06:	4798      	blx	r3
    fb08:	4603      	mov	r3, r0
    fb0a:	2b00      	cmp	r3, #0
    fb0c:	bf0c      	ite	eq
    fb0e:	2301      	moveq	r3, #1
    fb10:	2300      	movne	r3, #0
    fb12:	b2da      	uxtb	r2, r3
    fb14:	687b      	ldr	r3, [r7, #4]
    fb16:	709a      	strb	r2, [r3, #2]
	return isOK;
    fb18:	687b      	ldr	r3, [r7, #4]
    fb1a:	789b      	ldrb	r3, [r3, #2]
    fb1c:	b2db      	uxtb	r3, r3
}
    fb1e:	4618      	mov	r0, r3
    fb20:	3708      	adds	r7, #8
    fb22:	46bd      	mov	sp, r7
    fb24:	bd80      	pop	{r7, pc}
    fb26:	bf00      	nop
    fb28:	0000fb2d 	.word	0x0000fb2d

0000fb2c <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    fb2c:	b580      	push	{r7, lr}
    fb2e:	b084      	sub	sp, #16
    fb30:	af00      	add	r7, sp, #0
    fb32:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    fb34:	687b      	ldr	r3, [r7, #4]
    fb36:	691b      	ldr	r3, [r3, #16]
    fb38:	4618      	mov	r0, r3
    fb3a:	4b04      	ldr	r3, [pc, #16]	; (fb4c <_ZN17TimerSerial_Class5StartEv+0x20>)
    fb3c:	4798      	blx	r3
    fb3e:	60f8      	str	r0, [r7, #12]
	return status;
    fb40:	68fb      	ldr	r3, [r7, #12]
	
}
    fb42:	4618      	mov	r0, r3
    fb44:	3710      	adds	r7, #16
    fb46:	46bd      	mov	sp, r7
    fb48:	bd80      	pop	{r7, pc}
    fb4a:	bf00      	nop
    fb4c:	00002f3d 	.word	0x00002f3d

0000fb50 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    fb50:	b580      	push	{r7, lr}
    fb52:	b084      	sub	sp, #16
    fb54:	af00      	add	r7, sp, #0
    fb56:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    fb58:	687b      	ldr	r3, [r7, #4]
    fb5a:	691b      	ldr	r3, [r3, #16]
    fb5c:	4618      	mov	r0, r3
    fb5e:	4b05      	ldr	r3, [pc, #20]	; (fb74 <_ZN17TimerSerial_Class4StopEv+0x24>)
    fb60:	4798      	blx	r3
    fb62:	60f8      	str	r0, [r7, #12]
	timeout=0;
    fb64:	687b      	ldr	r3, [r7, #4]
    fb66:	2200      	movs	r2, #0
    fb68:	705a      	strb	r2, [r3, #1]
	return status;
    fb6a:	68fb      	ldr	r3, [r7, #12]
}
    fb6c:	4618      	mov	r0, r3
    fb6e:	3710      	adds	r7, #16
    fb70:	46bd      	mov	sp, r7
    fb72:	bd80      	pop	{r7, pc}
    fb74:	00002fa5 	.word	0x00002fa5

0000fb78 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    fb78:	b480      	push	{r7}
    fb7a:	b083      	sub	sp, #12
    fb7c:	af00      	add	r7, sp, #0
    fb7e:	6078      	str	r0, [r7, #4]
	timeout=1;
    fb80:	687b      	ldr	r3, [r7, #4]
    fb82:	2201      	movs	r2, #1
    fb84:	705a      	strb	r2, [r3, #1]
}
    fb86:	bf00      	nop
    fb88:	370c      	adds	r7, #12
    fb8a:	46bd      	mov	sp, r7
    fb8c:	bc80      	pop	{r7}
    fb8e:	4770      	bx	lr

0000fb90 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    fb90:	b580      	push	{r7, lr}
    fb92:	b086      	sub	sp, #24
    fb94:	af00      	add	r7, sp, #0
    fb96:	60f8      	str	r0, [r7, #12]
    fb98:	60b9      	str	r1, [r7, #8]
    fb9a:	607a      	str	r2, [r7, #4]
    fb9c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    fb9e:	68f8      	ldr	r0, [r7, #12]
    fba0:	4b0d      	ldr	r3, [pc, #52]	; (fbd8 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    fba2:	4798      	blx	r3
	task->interval = interval;
    fba4:	68fb      	ldr	r3, [r7, #12]
    fba6:	689b      	ldr	r3, [r3, #8]
    fba8:	687a      	ldr	r2, [r7, #4]
    fbaa:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    fbac:	68fb      	ldr	r3, [r7, #12]
    fbae:	689b      	ldr	r3, [r3, #8]
    fbb0:	68ba      	ldr	r2, [r7, #8]
    fbb2:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    fbb4:	68fb      	ldr	r3, [r7, #12]
    fbb6:	689b      	ldr	r3, [r3, #8]
    fbb8:	78fa      	ldrb	r2, [r7, #3]
    fbba:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    fbbc:	68fb      	ldr	r3, [r7, #12]
    fbbe:	691a      	ldr	r2, [r3, #16]
    fbc0:	68fb      	ldr	r3, [r7, #12]
    fbc2:	689b      	ldr	r3, [r3, #8]
    fbc4:	4619      	mov	r1, r3
    fbc6:	4610      	mov	r0, r2
    fbc8:	4b04      	ldr	r3, [pc, #16]	; (fbdc <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    fbca:	4798      	blx	r3
    fbcc:	6178      	str	r0, [r7, #20]
	
	return status;
    fbce:	697b      	ldr	r3, [r7, #20]
}
    fbd0:	4618      	mov	r0, r3
    fbd2:	3718      	adds	r7, #24
    fbd4:	46bd      	mov	sp, r7
    fbd6:	bd80      	pop	{r7, pc}
    fbd8:	0000fcc5 	.word	0x0000fcc5
    fbdc:	00003011 	.word	0x00003011

0000fbe0 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    fbe0:	b590      	push	{r4, r7, lr}
    fbe2:	b087      	sub	sp, #28
    fbe4:	af00      	add	r7, sp, #0
    fbe6:	60f8      	str	r0, [r7, #12]
    fbe8:	60b9      	str	r1, [r7, #8]
    fbea:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    fbec:	2300      	movs	r3, #0
    fbee:	687a      	ldr	r2, [r7, #4]
    fbf0:	68b9      	ldr	r1, [r7, #8]
    fbf2:	68f8      	ldr	r0, [r7, #12]
    fbf4:	4c03      	ldr	r4, [pc, #12]	; (fc04 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    fbf6:	47a0      	blx	r4
    fbf8:	6178      	str	r0, [r7, #20]
	return status;
    fbfa:	697b      	ldr	r3, [r7, #20]
}
    fbfc:	4618      	mov	r0, r3
    fbfe:	371c      	adds	r7, #28
    fc00:	46bd      	mov	sp, r7
    fc02:	bd90      	pop	{r4, r7, pc}
    fc04:	0000fb91 	.word	0x0000fb91

0000fc08 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    fc08:	b590      	push	{r4, r7, lr}
    fc0a:	b087      	sub	sp, #28
    fc0c:	af00      	add	r7, sp, #0
    fc0e:	60f8      	str	r0, [r7, #12]
    fc10:	60b9      	str	r1, [r7, #8]
    fc12:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    fc14:	2300      	movs	r3, #0
    fc16:	687a      	ldr	r2, [r7, #4]
    fc18:	68b9      	ldr	r1, [r7, #8]
    fc1a:	68f8      	ldr	r0, [r7, #12]
    fc1c:	4c06      	ldr	r4, [pc, #24]	; (fc38 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    fc1e:	47a0      	blx	r4
    fc20:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    fc22:	68fb      	ldr	r3, [r7, #12]
    fc24:	691b      	ldr	r3, [r3, #16]
    fc26:	4618      	mov	r0, r3
    fc28:	4b04      	ldr	r3, [pc, #16]	; (fc3c <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    fc2a:	4798      	blx	r3
    fc2c:	6178      	str	r0, [r7, #20]
	return status;
    fc2e:	697b      	ldr	r3, [r7, #20]
}
    fc30:	4618      	mov	r0, r3
    fc32:	371c      	adds	r7, #28
    fc34:	46bd      	mov	sp, r7
    fc36:	bd90      	pop	{r4, r7, pc}
    fc38:	0000fb91 	.word	0x0000fb91
    fc3c:	00002f3d 	.word	0x00002f3d

0000fc40 <_ZN17TimerSerial_Class11Remove_taskEv>:

void	TimerSerial_Class::Remove_task(void){
    fc40:	b580      	push	{r7, lr}
    fc42:	b082      	sub	sp, #8
    fc44:	af00      	add	r7, sp, #0
    fc46:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
    fc48:	687b      	ldr	r3, [r7, #4]
    fc4a:	691a      	ldr	r2, [r3, #16]
    fc4c:	687b      	ldr	r3, [r7, #4]
    fc4e:	689b      	ldr	r3, [r3, #8]
    fc50:	4619      	mov	r1, r3
    fc52:	4610      	mov	r0, r2
    fc54:	4b04      	ldr	r3, [pc, #16]	; (fc68 <_ZN17TimerSerial_Class11Remove_taskEv+0x28>)
    fc56:	4798      	blx	r3
	task->cb=NULL;
    fc58:	687b      	ldr	r3, [r7, #4]
    fc5a:	689b      	ldr	r3, [r3, #8]
    fc5c:	2200      	movs	r2, #0
    fc5e:	60da      	str	r2, [r3, #12]
}
    fc60:	bf00      	nop
    fc62:	3708      	adds	r7, #8
    fc64:	46bd      	mov	sp, r7
    fc66:	bd80      	pop	{r7, pc}
    fc68:	00003115 	.word	0x00003115

0000fc6c <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    fc6c:	b580      	push	{r7, lr}
    fc6e:	b082      	sub	sp, #8
    fc70:	af00      	add	r7, sp, #0
    fc72:	6078      	str	r0, [r7, #4]
    fc74:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    fc76:	6839      	ldr	r1, [r7, #0]
    fc78:	6878      	ldr	r0, [r7, #4]
    fc7a:	4b0f      	ldr	r3, [pc, #60]	; (fcb8 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    fc7c:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    fc7e:	687b      	ldr	r3, [r7, #4]
    fc80:	691b      	ldr	r3, [r3, #16]
    fc82:	f103 0218 	add.w	r2, r3, #24
    fc86:	687b      	ldr	r3, [r7, #4]
    fc88:	689b      	ldr	r3, [r3, #8]
    fc8a:	4619      	mov	r1, r3
    fc8c:	4610      	mov	r0, r2
    fc8e:	4b0b      	ldr	r3, [pc, #44]	; (fcbc <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    fc90:	4798      	blx	r3
    fc92:	4603      	mov	r3, r0
    fc94:	2b00      	cmp	r3, #0
    fc96:	d007      	beq.n	fca8 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    fc98:	687b      	ldr	r3, [r7, #4]
    fc9a:	691a      	ldr	r2, [r3, #16]
    fc9c:	687b      	ldr	r3, [r7, #4]
    fc9e:	689b      	ldr	r3, [r3, #8]
    fca0:	4619      	mov	r1, r3
    fca2:	4610      	mov	r0, r2
    fca4:	4b06      	ldr	r3, [pc, #24]	; (fcc0 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    fca6:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    fca8:	687b      	ldr	r3, [r7, #4]
    fcaa:	689b      	ldr	r3, [r3, #8]
    fcac:	2200      	movs	r2, #0
    fcae:	60da      	str	r2, [r3, #12]
}
    fcb0:	bf00      	nop
    fcb2:	3708      	adds	r7, #8
    fcb4:	46bd      	mov	sp, r7
    fcb6:	bd80      	pop	{r7, pc}
    fcb8:	0000fd1d 	.word	0x0000fd1d
    fcbc:	00003cfd 	.word	0x00003cfd
    fcc0:	00003115 	.word	0x00003115

0000fcc4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    fcc4:	b480      	push	{r7}
    fcc6:	b085      	sub	sp, #20
    fcc8:	af00      	add	r7, sp, #0
    fcca:	6078      	str	r0, [r7, #4]
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    fccc:	2300      	movs	r3, #0
    fcce:	73fb      	strb	r3, [r7, #15]
    fcd0:	7bfb      	ldrb	r3, [r7, #15]
    fcd2:	2b03      	cmp	r3, #3
    fcd4:	dc18      	bgt.n	fd08 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x44>
	{
			if (taskArray[ii].cb==NULL)
    fcd6:	7bfa      	ldrb	r2, [r7, #15]
    fcd8:	490f      	ldr	r1, [pc, #60]	; (fd18 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    fcda:	4613      	mov	r3, r2
    fcdc:	009b      	lsls	r3, r3, #2
    fcde:	4413      	add	r3, r2
    fce0:	009b      	lsls	r3, r3, #2
    fce2:	440b      	add	r3, r1
    fce4:	330c      	adds	r3, #12
    fce6:	681b      	ldr	r3, [r3, #0]
    fce8:	2b00      	cmp	r3, #0
    fcea:	d109      	bne.n	fd00 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
			{
				
				task=&taskArray[ii];
    fcec:	7bfa      	ldrb	r2, [r7, #15]
    fcee:	4613      	mov	r3, r2
    fcf0:	009b      	lsls	r3, r3, #2
    fcf2:	4413      	add	r3, r2
    fcf4:	009b      	lsls	r3, r3, #2
    fcf6:	4a08      	ldr	r2, [pc, #32]	; (fd18 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    fcf8:	441a      	add	r2, r3
    fcfa:	687b      	ldr	r3, [r7, #4]
    fcfc:	609a      	str	r2, [r3, #8]
			return;
    fcfe:	e006      	b.n	fd0e <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4a>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    fd00:	7bfb      	ldrb	r3, [r7, #15]
    fd02:	3301      	adds	r3, #1
    fd04:	73fb      	strb	r3, [r7, #15]
    fd06:	e7e3      	b.n	fcd0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xc>
				
			}
	}
	task=&taskArray[0];
    fd08:	687b      	ldr	r3, [r7, #4]
    fd0a:	4a03      	ldr	r2, [pc, #12]	; (fd18 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    fd0c:	609a      	str	r2, [r3, #8]

}
    fd0e:	3714      	adds	r7, #20
    fd10:	46bd      	mov	sp, r7
    fd12:	bc80      	pop	{r7}
    fd14:	4770      	bx	lr
    fd16:	bf00      	nop
    fd18:	200013cc 	.word	0x200013cc

0000fd1c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    fd1c:	b480      	push	{r7}
    fd1e:	b085      	sub	sp, #20
    fd20:	af00      	add	r7, sp, #0
    fd22:	6078      	str	r0, [r7, #4]
    fd24:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    fd26:	2300      	movs	r3, #0
    fd28:	73fb      	strb	r3, [r7, #15]
    fd2a:	7bfb      	ldrb	r3, [r7, #15]
    fd2c:	2b03      	cmp	r3, #3
    fd2e:	dc19      	bgt.n	fd64 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    fd30:	7bfa      	ldrb	r2, [r7, #15]
    fd32:	490e      	ldr	r1, [pc, #56]	; (fd6c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    fd34:	4613      	mov	r3, r2
    fd36:	009b      	lsls	r3, r3, #2
    fd38:	4413      	add	r3, r2
    fd3a:	009b      	lsls	r3, r3, #2
    fd3c:	440b      	add	r3, r1
    fd3e:	330c      	adds	r3, #12
    fd40:	681a      	ldr	r2, [r3, #0]
    fd42:	683b      	ldr	r3, [r7, #0]
    fd44:	429a      	cmp	r2, r3
    fd46:	d109      	bne.n	fd5c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    fd48:	7bfa      	ldrb	r2, [r7, #15]
    fd4a:	4613      	mov	r3, r2
    fd4c:	009b      	lsls	r3, r3, #2
    fd4e:	4413      	add	r3, r2
    fd50:	009b      	lsls	r3, r3, #2
    fd52:	4a06      	ldr	r2, [pc, #24]	; (fd6c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    fd54:	441a      	add	r2, r3
    fd56:	687b      	ldr	r3, [r7, #4]
    fd58:	609a      	str	r2, [r3, #8]
			return;
    fd5a:	e003      	b.n	fd64 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    fd5c:	7bfb      	ldrb	r3, [r7, #15]
    fd5e:	3301      	adds	r3, #1
    fd60:	73fb      	strb	r3, [r7, #15]
    fd62:	e7e2      	b.n	fd2a <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}


}
    fd64:	3714      	adds	r7, #20
    fd66:	46bd      	mov	sp, r7
    fd68:	bc80      	pop	{r7}
    fd6a:	4770      	bx	lr
    fd6c:	200013cc 	.word	0x200013cc

0000fd70 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    fd70:	b580      	push	{r7, lr}
    fd72:	b082      	sub	sp, #8
    fd74:	af00      	add	r7, sp, #0
    fd76:	6078      	str	r0, [r7, #4]
    fd78:	6039      	str	r1, [r7, #0]
    fd7a:	687b      	ldr	r3, [r7, #4]
    fd7c:	2b01      	cmp	r3, #1
    fd7e:	d116      	bne.n	fdae <_Z41__static_initialization_and_destruction_0ii+0x3e>
    fd80:	683b      	ldr	r3, [r7, #0]
    fd82:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fd86:	4293      	cmp	r3, r2
    fd88:	d111      	bne.n	fdae <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    fd8a:	490b      	ldr	r1, [pc, #44]	; (fdb8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    fd8c:	480b      	ldr	r0, [pc, #44]	; (fdbc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    fd8e:	4b0c      	ldr	r3, [pc, #48]	; (fdc0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    fd90:	4798      	blx	r3
    fd92:	4a0c      	ldr	r2, [pc, #48]	; (fdc4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    fd94:	490c      	ldr	r1, [pc, #48]	; (fdc8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    fd96:	4809      	ldr	r0, [pc, #36]	; (fdbc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    fd98:	4b0c      	ldr	r3, [pc, #48]	; (fdcc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    fd9a:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    fd9c:	490c      	ldr	r1, [pc, #48]	; (fdd0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    fd9e:	480d      	ldr	r0, [pc, #52]	; (fdd4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    fda0:	4b07      	ldr	r3, [pc, #28]	; (fdc0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    fda2:	4798      	blx	r3
    fda4:	4a07      	ldr	r2, [pc, #28]	; (fdc4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    fda6:	4908      	ldr	r1, [pc, #32]	; (fdc8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    fda8:	480a      	ldr	r0, [pc, #40]	; (fdd4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    fdaa:	4b08      	ldr	r3, [pc, #32]	; (fdcc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    fdac:	4798      	blx	r3
    fdae:	bf00      	nop
    fdb0:	3708      	adds	r7, #8
    fdb2:	46bd      	mov	sp, r7
    fdb4:	bd80      	pop	{r7, pc}
    fdb6:	bf00      	nop
    fdb8:	200017d0 	.word	0x200017d0
    fdbc:	2000141c 	.word	0x2000141c
    fdc0:	0000fa9d 	.word	0x0000fa9d
    fdc4:	20000000 	.word	0x20000000
    fdc8:	0000fad9 	.word	0x0000fad9
    fdcc:	00010525 	.word	0x00010525
    fdd0:	20001708 	.word	0x20001708
    fdd4:	2000143c 	.word	0x2000143c

0000fdd8 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    fdd8:	b580      	push	{r7, lr}
    fdda:	af00      	add	r7, sp, #0
    fddc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fde0:	2001      	movs	r0, #1
    fde2:	4b01      	ldr	r3, [pc, #4]	; (fde8 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    fde4:	4798      	blx	r3
    fde6:	bd80      	pop	{r7, pc}
    fde8:	0000fd71 	.word	0x0000fd71

0000fdec <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    fdec:	b480      	push	{r7}
    fdee:	b083      	sub	sp, #12
    fdf0:	af00      	add	r7, sp, #0
    fdf2:	6078      	str	r0, [r7, #4]
    return (void *)0;
    fdf4:	2300      	movs	r3, #0
	}
    fdf6:	4618      	mov	r0, r3
    fdf8:	370c      	adds	r7, #12
    fdfa:	46bd      	mov	sp, r7
    fdfc:	bc80      	pop	{r7}
    fdfe:	4770      	bx	lr

0000fe00 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    fe00:	b480      	push	{r7}
    fe02:	af00      	add	r7, sp, #0
		}
    fe04:	bf00      	nop
    fe06:	46bd      	mov	sp, r7
    fe08:	bc80      	pop	{r7}
    fe0a:	4770      	bx	lr

0000fe0c <_ZN19CondesatorFan_ClassC1Ev>:
#include "CondesatorFan_Class.h"

// default constructor
CondesatorFan_Class::CondesatorFan_Class()
{
} //CondesatorFan_Class
    fe0c:	4770      	bx	lr

0000fe0e <_ZN19CondesatorFan_ClassD1Ev>:

// default destructor
CondesatorFan_Class::~CondesatorFan_Class()
{
} //~CondesatorFan_Class
    fe0e:	4770      	bx	lr

0000fe10 <_ZN19CondesatorFan_Class9SetEnableEb>:
}
uint8_t	CondesatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(2,true);
	return uint8_t(enabled);
}
uint8_t	CondesatorFan_Class::SetEnable(bool state){
    fe10:	b510      	push	{r4, lr}
    fe12:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(2,state);
    fe14:	460a      	mov	r2, r1
    fe16:	2102      	movs	r1, #2
    fe18:	68c0      	ldr	r0, [r0, #12]
    fe1a:	4b02      	ldr	r3, [pc, #8]	; (fe24 <_ZN19CondesatorFan_Class9SetEnableEb+0x14>)
    fe1c:	4798      	blx	r3
    fe1e:	7060      	strb	r0, [r4, #1]
	return uint8_t(enabled);
}
    fe20:	bd10      	pop	{r4, pc}
    fe22:	bf00      	nop
    fe24:	00010479 	.word	0x00010479

0000fe28 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev>:
	somethingChanged=false;
	
} //EvaporatorAndCondesatorFans_Class

// default destructor
EvaporatorAndCondesatorFans_Class::~EvaporatorAndCondesatorFans_Class()
    fe28:	b510      	push	{r4, lr}
    fe2a:	4604      	mov	r4, r0
    fe2c:	302c      	adds	r0, #44	; 0x2c
    fe2e:	4b03      	ldr	r3, [pc, #12]	; (fe3c <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x14>)
    fe30:	4798      	blx	r3
    fe32:	4620      	mov	r0, r4
    fe34:	4b02      	ldr	r3, [pc, #8]	; (fe40 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x18>)
    fe36:	4798      	blx	r3
{
} //~EvaporatorAndCondesatorFans_Class
    fe38:	4620      	mov	r0, r4
    fe3a:	bd10      	pop	{r4, pc}
    fe3c:	0000fe0f 	.word	0x0000fe0f
    fe40:	0000ff95 	.word	0x0000ff95

0000fe44 <__tcf_1>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
    fe44:	b570      	push	{r4, r5, r6, lr}
    fe46:	4c05      	ldr	r4, [pc, #20]	; (fe5c <__tcf_1+0x18>)
    fe48:	4e05      	ldr	r6, [pc, #20]	; (fe60 <__tcf_1+0x1c>)
    fe4a:	f1a4 05c4 	sub.w	r5, r4, #196	; 0xc4
    fe4e:	3c1c      	subs	r4, #28
    fe50:	4620      	mov	r0, r4
    fe52:	47b0      	blx	r6
    fe54:	42ac      	cmp	r4, r5
    fe56:	d1fa      	bne.n	fe4e <__tcf_1+0xa>
    fe58:	bd70      	pop	{r4, r5, r6, pc}
    fe5a:	bf00      	nop
    fe5c:	20001520 	.word	0x20001520
    fe60:	00010305 	.word	0x00010305

0000fe64 <__tcf_0>:
static EvaporatorFan_Class	evaporatorFan[2];
    fe64:	b510      	push	{r4, lr}
    fe66:	4803      	ldr	r0, [pc, #12]	; (fe74 <__tcf_0+0x10>)
    fe68:	4c03      	ldr	r4, [pc, #12]	; (fe78 <__tcf_0+0x14>)
    fe6a:	47a0      	blx	r4
    fe6c:	4803      	ldr	r0, [pc, #12]	; (fe7c <__tcf_0+0x18>)
    fe6e:	47a0      	blx	r4
    fe70:	bd10      	pop	{r4, pc}
    fe72:	bf00      	nop
    fe74:	2000154c 	.word	0x2000154c
    fe78:	0000ff95 	.word	0x0000ff95
    fe7c:	20001520 	.word	0x20001520

0000fe80 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev>:
EvaporatorAndCondesatorFans_Class::EvaporatorAndCondesatorFans_Class()
    fe80:	b510      	push	{r4, lr}
    fe82:	4604      	mov	r4, r0
    fe84:	4b0d      	ldr	r3, [pc, #52]	; (febc <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x3c>)
    fe86:	4798      	blx	r3
    fe88:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    fe8c:	4b0c      	ldr	r3, [pc, #48]	; (fec0 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x40>)
    fe8e:	4798      	blx	r3
	i2c=&i2cSharedStatic;
    fe90:	4b0c      	ldr	r3, [pc, #48]	; (fec4 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x44>)
    fe92:	f503 728e 	add.w	r2, r3, #284	; 0x11c
    fe96:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	evaporator[0]=&evaporatorFan[0];
    fe9a:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
    fe9e:	65e2      	str	r2, [r4, #92]	; 0x5c
	evaporator[1]=&evaporatorFan[1];
    fea0:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
    fea4:	6622      	str	r2, [r4, #96]	; 0x60
	condesator=&condesatorFan;
    fea6:	f503 7298 	add.w	r2, r3, #304	; 0x130
    feaa:	6662      	str	r2, [r4, #100]	; 0x64
	ptrFansClass=this;
    feac:	f8c3 415c 	str.w	r4, [r3, #348]	; 0x15c
	somethingChanged=false;
    feb0:	2300      	movs	r3, #0
    feb2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
} //EvaporatorAndCondesatorFans_Class
    feb6:	4620      	mov	r0, r4
    feb8:	bd10      	pop	{r4, pc}
    feba:	bf00      	nop
    febc:	0000ff7d 	.word	0x0000ff7d
    fec0:	0000fe0d 	.word	0x0000fe0d
    fec4:	2000145c 	.word	0x2000145c

0000fec8 <_GLOBAL__sub_I_ptrFansClass>:
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
	}
	return 0;
}

EvaporatorAndCondesatorFans_Class  fans;
    fec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
static I2C_Sync_Class	i2cSharedStatic(&I2C_EXPANDER);
    fecc:	4c1c      	ldr	r4, [pc, #112]	; (ff40 <_GLOBAL__sub_I_ptrFansClass+0x78>)
    fece:	f504 758e 	add.w	r5, r4, #284	; 0x11c
    fed2:	491c      	ldr	r1, [pc, #112]	; (ff44 <_GLOBAL__sub_I_ptrFansClass+0x7c>)
    fed4:	4628      	mov	r0, r5
    fed6:	4b1c      	ldr	r3, [pc, #112]	; (ff48 <_GLOBAL__sub_I_ptrFansClass+0x80>)
    fed8:	4798      	blx	r3
    feda:	4f1c      	ldr	r7, [pc, #112]	; (ff4c <_GLOBAL__sub_I_ptrFansClass+0x84>)
    fedc:	463a      	mov	r2, r7
    fede:	491c      	ldr	r1, [pc, #112]	; (ff50 <_GLOBAL__sub_I_ptrFansClass+0x88>)
    fee0:	4628      	mov	r0, r5
    fee2:	4e1c      	ldr	r6, [pc, #112]	; (ff54 <_GLOBAL__sub_I_ptrFansClass+0x8c>)
    fee4:	47b0      	blx	r6
static EvaporatorFan_Class	evaporatorFan[2];
    fee6:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    feea:	4628      	mov	r0, r5
    feec:	f8df 8088 	ldr.w	r8, [pc, #136]	; ff78 <_GLOBAL__sub_I_ptrFansClass+0xb0>
    fef0:	47c0      	blx	r8
    fef2:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    fef6:	47c0      	blx	r8
    fef8:	463a      	mov	r2, r7
    fefa:	4917      	ldr	r1, [pc, #92]	; (ff58 <_GLOBAL__sub_I_ptrFansClass+0x90>)
    fefc:	2000      	movs	r0, #0
    fefe:	47b0      	blx	r6
static CondesatorFan_Class	condesatorFan;
    ff00:	f504 7898 	add.w	r8, r4, #304	; 0x130
    ff04:	4640      	mov	r0, r8
    ff06:	4b15      	ldr	r3, [pc, #84]	; (ff5c <_GLOBAL__sub_I_ptrFansClass+0x94>)
    ff08:	4798      	blx	r3
    ff0a:	463a      	mov	r2, r7
    ff0c:	4914      	ldr	r1, [pc, #80]	; (ff60 <_GLOBAL__sub_I_ptrFansClass+0x98>)
    ff0e:	4640      	mov	r0, r8
    ff10:	47b0      	blx	r6
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
    ff12:	4e14      	ldr	r6, [pc, #80]	; (ff64 <_GLOBAL__sub_I_ptrFansClass+0x9c>)
    ff14:	4620      	mov	r0, r4
    ff16:	47b0      	blx	r6
    ff18:	341c      	adds	r4, #28
    ff1a:	42a5      	cmp	r5, r4
    ff1c:	d1fa      	bne.n	ff14 <_GLOBAL__sub_I_ptrFansClass+0x4c>
    ff1e:	4e0b      	ldr	r6, [pc, #44]	; (ff4c <_GLOBAL__sub_I_ptrFansClass+0x84>)
    ff20:	4632      	mov	r2, r6
    ff22:	4911      	ldr	r1, [pc, #68]	; (ff68 <_GLOBAL__sub_I_ptrFansClass+0xa0>)
    ff24:	2000      	movs	r0, #0
    ff26:	4c0b      	ldr	r4, [pc, #44]	; (ff54 <_GLOBAL__sub_I_ptrFansClass+0x8c>)
    ff28:	47a0      	blx	r4
EvaporatorAndCondesatorFans_Class  fans;
    ff2a:	4d10      	ldr	r5, [pc, #64]	; (ff6c <_GLOBAL__sub_I_ptrFansClass+0xa4>)
    ff2c:	4628      	mov	r0, r5
    ff2e:	4b10      	ldr	r3, [pc, #64]	; (ff70 <_GLOBAL__sub_I_ptrFansClass+0xa8>)
    ff30:	4798      	blx	r3
    ff32:	4632      	mov	r2, r6
    ff34:	490f      	ldr	r1, [pc, #60]	; (ff74 <_GLOBAL__sub_I_ptrFansClass+0xac>)
    ff36:	4628      	mov	r0, r5
    ff38:	47a0      	blx	r4
    ff3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ff3e:	bf00      	nop
    ff40:	2000145c 	.word	0x2000145c
    ff44:	200017f0 	.word	0x200017f0
    ff48:	0001023d 	.word	0x0001023d
    ff4c:	20000000 	.word	0x20000000
    ff50:	00010259 	.word	0x00010259
    ff54:	00010525 	.word	0x00010525
    ff58:	0000fe65 	.word	0x0000fe65
    ff5c:	0000fe0d 	.word	0x0000fe0d
    ff60:	0000fe0f 	.word	0x0000fe0f
    ff64:	000102f1 	.word	0x000102f1
    ff68:	0000fe45 	.word	0x0000fe45
    ff6c:	200015bc 	.word	0x200015bc
    ff70:	0000fe81 	.word	0x0000fe81
    ff74:	0000fe29 	.word	0x0000fe29
    ff78:	0000ff7d 	.word	0x0000ff7d

0000ff7c <_ZN19EvaporatorFan_ClassC1Ev>:




// default constructor
EvaporatorFan_Class::EvaporatorFan_Class()
    ff7c:	b510      	push	{r4, lr}
    ff7e:	4604      	mov	r4, r0
    ff80:	4b02      	ldr	r3, [pc, #8]	; (ff8c <_ZN19EvaporatorFan_ClassC1Ev+0x10>)
    ff82:	4798      	blx	r3
{
	
	ptrEvaFanClass=this;
    ff84:	4b02      	ldr	r3, [pc, #8]	; (ff90 <_ZN19EvaporatorFan_ClassC1Ev+0x14>)
    ff86:	601c      	str	r4, [r3, #0]
	
} //EvaporatorFan_Class
    ff88:	4620      	mov	r0, r4
    ff8a:	bd10      	pop	{r4, pc}
    ff8c:	0000ffe1 	.word	0x0000ffe1
    ff90:	20001648 	.word	0x20001648

0000ff94 <_ZN19EvaporatorFan_ClassD1Ev>:

// default destructor
EvaporatorFan_Class::~EvaporatorFan_Class()
    ff94:	b510      	push	{r4, lr}
    ff96:	4604      	mov	r4, r0
    ff98:	4b01      	ldr	r3, [pc, #4]	; (ffa0 <_ZN19EvaporatorFan_ClassD1Ev+0xc>)
    ff9a:	4798      	blx	r3
{
} //~EvaporatorFan_Class
    ff9c:	4620      	mov	r0, r4
    ff9e:	bd10      	pop	{r4, pc}
    ffa0:	0000ffe3 	.word	0x0000ffe3

0000ffa4 <_ZN19EvaporatorFan_Class9SetEnableEb>:
}
uint8_t	EvaporatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,true);
	return uint8_t(enabled);
}
uint8_t	EvaporatorFan_Class::SetEnable(bool state){
    ffa4:	b510      	push	{r4, lr}
    ffa6:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(1-fanNumber,!state);
    ffa8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    ffac:	f1c3 0301 	rsb	r3, r3, #1
    ffb0:	f081 0201 	eor.w	r2, r1, #1
    ffb4:	b2d9      	uxtb	r1, r3
    ffb6:	68c0      	ldr	r0, [r0, #12]
    ffb8:	4b01      	ldr	r3, [pc, #4]	; (ffc0 <_ZN19EvaporatorFan_Class9SetEnableEb+0x1c>)
    ffba:	4798      	blx	r3
    ffbc:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
    ffbe:	bd10      	pop	{r4, pc}
    ffc0:	00010479 	.word	0x00010479

0000ffc4 <_ZN19EvaporatorFan_Class6SetPWMEh>:
uint8_t	EvaporatorFan_Class::Disable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,false)?false:true;
	return uint8_t(enabled);
}

uint8_t	EvaporatorFan_Class::SetPWM(uint8_t pwm){
    ffc4:	b510      	push	{r4, lr}
    ffc6:	4604      	mov	r4, r0
	pwmValue= expanders[4+fanNumber]->WriteGPIORegister(pwm);
    ffc8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    ffcc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ffd0:	69d8      	ldr	r0, [r3, #28]
    ffd2:	4b02      	ldr	r3, [pc, #8]	; (ffdc <_ZN19EvaporatorFan_Class6SetPWMEh+0x18>)
    ffd4:	4798      	blx	r3
    ffd6:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	return pwmValue;
}
    ffda:	bd10      	pop	{r4, pc}
    ffdc:	0001043d 	.word	0x0001043d

0000ffe0 <_ZN29EvaporatorFanDataStruct_ClassC1Ev>:
#include "EvaporatorFanDataStruct_Class.h"

// default constructor
EvaporatorFanDataStruct_Class::EvaporatorFanDataStruct_Class()
{
} //EvaporatorFanDataStruct_Class
    ffe0:	4770      	bx	lr

0000ffe2 <_ZN29EvaporatorFanDataStruct_ClassD1Ev>:

// default destructor
EvaporatorFanDataStruct_Class::~EvaporatorFanDataStruct_Class()
{
} //~EvaporatorFanDataStruct_Class
    ffe2:	4770      	bx	lr

0000ffe4 <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
    ffe4:	b480      	push	{r7}
    ffe6:	b083      	sub	sp, #12
    ffe8:	af00      	add	r7, sp, #0
    ffea:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
    ffec:	4a05      	ldr	r2, [pc, #20]	; (10004 <STACK_SIZE+0x4>)
    ffee:	687b      	ldr	r3, [r7, #4]
    fff0:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
    fff2:	687b      	ldr	r3, [r7, #4]
    fff4:	4a04      	ldr	r2, [pc, #16]	; (10008 <STACK_SIZE+0x8>)
    fff6:	619a      	str	r2, [r3, #24]
} //SingleHeater_Class
    fff8:	687b      	ldr	r3, [r7, #4]
    fffa:	4618      	mov	r0, r3
    fffc:	370c      	adds	r7, #12
    fffe:	46bd      	mov	sp, r7
   10000:	bc80      	pop	{r7}
   10002:	4770      	bx	lr
   10004:	2000164c 	.word	0x2000164c
   10008:	20001650 	.word	0x20001650

0001000c <_ZN18SingleHeater_ClassD1Ev>:
	statusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
   1000c:	b480      	push	{r7}
   1000e:	b083      	sub	sp, #12
   10010:	af00      	add	r7, sp, #0
   10012:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
   10014:	687b      	ldr	r3, [r7, #4]
   10016:	4618      	mov	r0, r3
   10018:	370c      	adds	r7, #12
   1001a:	46bd      	mov	sp, r7
   1001c:	bc80      	pop	{r7}
   1001e:	4770      	bx	lr

00010020 <_ZN18SingleHeater_Class10ReadStatusEv>:
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
	}
	
}

uint8_t	SingleHeater_Class::ReadStatus(void){
   10020:	b580      	push	{r7, lr}
   10022:	b084      	sub	sp, #16
   10024:	af00      	add	r7, sp, #0
   10026:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
   10028:	687b      	ldr	r3, [r7, #4]
   1002a:	68db      	ldr	r3, [r3, #12]
   1002c:	4618      	mov	r0, r3
   1002e:	4b16      	ldr	r3, [pc, #88]	; (10088 <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
   10030:	4798      	blx	r3
   10032:	4603      	mov	r3, r0
   10034:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
   10036:	7bbb      	ldrb	r3, [r7, #14]
   10038:	f003 0301 	and.w	r3, r3, #1
   1003c:	2b00      	cmp	r3, #0
   1003e:	bf14      	ite	ne
   10040:	2301      	movne	r3, #1
   10042:	2300      	moveq	r3, #0
   10044:	b2da      	uxtb	r2, r3
   10046:	687b      	ldr	r3, [r7, #4]
   10048:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
   1004a:	2300      	movs	r3, #0
   1004c:	73fb      	strb	r3, [r7, #15]
   1004e:	7bfb      	ldrb	r3, [r7, #15]
   10050:	2b03      	cmp	r3, #3
   10052:	dc14      	bgt.n	1007e <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
   10054:	7bfb      	ldrb	r3, [r7, #15]
   10056:	7bb9      	ldrb	r1, [r7, #14]
   10058:	7bfa      	ldrb	r2, [r7, #15]
   1005a:	3201      	adds	r2, #1
   1005c:	fa41 f202 	asr.w	r2, r1, r2
   10060:	f002 0201 	and.w	r2, r2, #1
   10064:	2a00      	cmp	r2, #0
   10066:	bf14      	ite	ne
   10068:	2201      	movne	r2, #1
   1006a:	2200      	moveq	r2, #0
   1006c:	b2d1      	uxtb	r1, r2
   1006e:	687a      	ldr	r2, [r7, #4]
   10070:	4413      	add	r3, r2
   10072:	460a      	mov	r2, r1
   10074:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
   10076:	7bfb      	ldrb	r3, [r7, #15]
   10078:	3301      	adds	r3, #1
   1007a:	73fb      	strb	r3, [r7, #15]
   1007c:	e7e7      	b.n	1004e <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
   1007e:	7bbb      	ldrb	r3, [r7, #14]
}
   10080:	4618      	mov	r0, r3
   10082:	3710      	adds	r7, #16
   10084:	46bd      	mov	sp, r7
   10086:	bd80      	pop	{r7, pc}
   10088:	000103bd 	.word	0x000103bd

0001008c <_ZN18SingleHeater_Class8SetRelayEhb>:
uint8_t	SingleHeater_Class::Enable(uint8_t indexHeater){
	enabled=expanders[1]->WriteDigit(indexHeater,false);
	return uint8_t(enabled);
}
uint8_t	SingleHeater_Class::SetRelay(uint8_t indexHeater, bool state){
   1008c:	b580      	push	{r7, lr}
   1008e:	b082      	sub	sp, #8
   10090:	af00      	add	r7, sp, #0
   10092:	6078      	str	r0, [r7, #4]
   10094:	460b      	mov	r3, r1
   10096:	70fb      	strb	r3, [r7, #3]
   10098:	4613      	mov	r3, r2
   1009a:	70bb      	strb	r3, [r7, #2]
	enabled=expanders[1]->WriteDigit(indexHeater,!state);
   1009c:	687b      	ldr	r3, [r7, #4]
   1009e:	6918      	ldr	r0, [r3, #16]
   100a0:	78bb      	ldrb	r3, [r7, #2]
   100a2:	f083 0301 	eor.w	r3, r3, #1
   100a6:	b2da      	uxtb	r2, r3
   100a8:	78fb      	ldrb	r3, [r7, #3]
   100aa:	4619      	mov	r1, r3
   100ac:	4b05      	ldr	r3, [pc, #20]	; (100c4 <_ZN18SingleHeater_Class8SetRelayEhb+0x38>)
   100ae:	4798      	blx	r3
   100b0:	4603      	mov	r3, r0
   100b2:	461a      	mov	r2, r3
   100b4:	687b      	ldr	r3, [r7, #4]
   100b6:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   100b8:	687b      	ldr	r3, [r7, #4]
   100ba:	7adb      	ldrb	r3, [r3, #11]
}
   100bc:	4618      	mov	r0, r3
   100be:	3708      	adds	r7, #8
   100c0:	46bd      	mov	sp, r7
   100c2:	bd80      	pop	{r7, pc}
   100c4:	00010479 	.word	0x00010479

000100c8 <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   100c8:	b590      	push	{r4, r7, lr}
   100ca:	b083      	sub	sp, #12
   100cc:	af00      	add	r7, sp, #0
   100ce:	6078      	str	r0, [r7, #4]
   100d0:	4c05      	ldr	r4, [pc, #20]	; (100e8 <__tcf_0+0x20>)
   100d2:	4b06      	ldr	r3, [pc, #24]	; (100ec <__tcf_0+0x24>)
   100d4:	429c      	cmp	r4, r3
   100d6:	d004      	beq.n	100e2 <__tcf_0+0x1a>
   100d8:	3c1c      	subs	r4, #28
   100da:	4620      	mov	r0, r4
   100dc:	4b04      	ldr	r3, [pc, #16]	; (100f0 <__tcf_0+0x28>)
   100de:	4798      	blx	r3
   100e0:	e7f7      	b.n	100d2 <__tcf_0+0xa>
   100e2:	370c      	adds	r7, #12
   100e4:	46bd      	mov	sp, r7
   100e6:	bd90      	pop	{r4, r7, pc}
   100e8:	2000169c 	.word	0x2000169c
   100ec:	20001664 	.word	0x20001664
   100f0:	00010305 	.word	0x00010305

000100f4 <_Z41__static_initialization_and_destruction_0ii>:

bool SingleHeater_Class::SelfTest(void){
	return true;
}

   100f4:	b5b0      	push	{r4, r5, r7, lr}
   100f6:	b082      	sub	sp, #8
   100f8:	af00      	add	r7, sp, #0
   100fa:	6078      	str	r0, [r7, #4]
   100fc:	6039      	str	r1, [r7, #0]
   100fe:	687b      	ldr	r3, [r7, #4]
   10100:	2b01      	cmp	r3, #1
   10102:	d125      	bne.n	10150 <_Z41__static_initialization_and_destruction_0ii+0x5c>
   10104:	683b      	ldr	r3, [r7, #0]
   10106:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1010a:	4293      	cmp	r3, r2
   1010c:	d120      	bne.n	10150 <_Z41__static_initialization_and_destruction_0ii+0x5c>
static I2C_Sync_Class	i2cSharedStatic(&I2C_EXPANDER);
   1010e:	4912      	ldr	r1, [pc, #72]	; (10158 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   10110:	4812      	ldr	r0, [pc, #72]	; (1015c <_Z41__static_initialization_and_destruction_0ii+0x68>)
   10112:	4b13      	ldr	r3, [pc, #76]	; (10160 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   10114:	4798      	blx	r3
   10116:	4a13      	ldr	r2, [pc, #76]	; (10164 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   10118:	4913      	ldr	r1, [pc, #76]	; (10168 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   1011a:	4810      	ldr	r0, [pc, #64]	; (1015c <_Z41__static_initialization_and_destruction_0ii+0x68>)
   1011c:	4b13      	ldr	r3, [pc, #76]	; (1016c <_Z41__static_initialization_and_destruction_0ii+0x78>)
   1011e:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   10120:	4b13      	ldr	r3, [pc, #76]	; (10170 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   10122:	2401      	movs	r4, #1
   10124:	461d      	mov	r5, r3
   10126:	2c00      	cmp	r4, #0
   10128:	db05      	blt.n	10136 <_Z41__static_initialization_and_destruction_0ii+0x42>
   1012a:	4628      	mov	r0, r5
   1012c:	4b11      	ldr	r3, [pc, #68]	; (10174 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   1012e:	4798      	blx	r3
   10130:	351c      	adds	r5, #28
   10132:	3c01      	subs	r4, #1
   10134:	e7f7      	b.n	10126 <_Z41__static_initialization_and_destruction_0ii+0x32>
   10136:	4a0b      	ldr	r2, [pc, #44]	; (10164 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   10138:	490f      	ldr	r1, [pc, #60]	; (10178 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   1013a:	2000      	movs	r0, #0
   1013c:	4b0b      	ldr	r3, [pc, #44]	; (1016c <_Z41__static_initialization_and_destruction_0ii+0x78>)
   1013e:	4798      	blx	r3
   10140:	480e      	ldr	r0, [pc, #56]	; (1017c <_Z41__static_initialization_and_destruction_0ii+0x88>)
   10142:	4b0f      	ldr	r3, [pc, #60]	; (10180 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   10144:	4798      	blx	r3
   10146:	4a07      	ldr	r2, [pc, #28]	; (10164 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   10148:	490e      	ldr	r1, [pc, #56]	; (10184 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   1014a:	480c      	ldr	r0, [pc, #48]	; (1017c <_Z41__static_initialization_and_destruction_0ii+0x88>)
   1014c:	4b07      	ldr	r3, [pc, #28]	; (1016c <_Z41__static_initialization_and_destruction_0ii+0x78>)
   1014e:	4798      	blx	r3
   10150:	bf00      	nop
   10152:	3708      	adds	r7, #8
   10154:	46bd      	mov	sp, r7
   10156:	bdb0      	pop	{r4, r5, r7, pc}
   10158:	200017f0 	.word	0x200017f0
   1015c:	20001650 	.word	0x20001650
   10160:	0001023d 	.word	0x0001023d
   10164:	20000000 	.word	0x20000000
   10168:	00010259 	.word	0x00010259
   1016c:	00010525 	.word	0x00010525
   10170:	20001664 	.word	0x20001664
   10174:	000102f1 	.word	0x000102f1
   10178:	000100c9 	.word	0x000100c9
   1017c:	2000169c 	.word	0x2000169c
   10180:	0000ffe5 	.word	0x0000ffe5
   10184:	0001000d 	.word	0x0001000d

00010188 <_GLOBAL__sub_I_ptrSingleHeaterClass>:
   10188:	b580      	push	{r7, lr}
   1018a:	af00      	add	r7, sp, #0
   1018c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10190:	2001      	movs	r0, #1
   10192:	4b01      	ldr	r3, [pc, #4]	; (10198 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
   10194:	4798      	blx	r3
   10196:	bd80      	pop	{r7, pc}
   10198:	000100f5 	.word	0x000100f5

0001019c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   1019c:	b580      	push	{r7, lr}
   1019e:	b084      	sub	sp, #16
   101a0:	af00      	add	r7, sp, #0
   101a2:	60f8      	str	r0, [r7, #12]
   101a4:	60b9      	str	r1, [r7, #8]
   101a6:	4613      	mov	r3, r2
   101a8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   101aa:	68fb      	ldr	r3, [r7, #12]
   101ac:	2b00      	cmp	r3, #0
   101ae:	d004      	beq.n	101ba <io_write+0x1e>
   101b0:	68bb      	ldr	r3, [r7, #8]
   101b2:	2b00      	cmp	r3, #0
   101b4:	d001      	beq.n	101ba <io_write+0x1e>
   101b6:	2301      	movs	r3, #1
   101b8:	e000      	b.n	101bc <io_write+0x20>
   101ba:	2300      	movs	r3, #0
   101bc:	f003 0301 	and.w	r3, r3, #1
   101c0:	b2db      	uxtb	r3, r3
   101c2:	2234      	movs	r2, #52	; 0x34
   101c4:	4907      	ldr	r1, [pc, #28]	; (101e4 <io_write+0x48>)
   101c6:	4618      	mov	r0, r3
   101c8:	4b07      	ldr	r3, [pc, #28]	; (101e8 <io_write+0x4c>)
   101ca:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   101cc:	68fb      	ldr	r3, [r7, #12]
   101ce:	681b      	ldr	r3, [r3, #0]
   101d0:	88fa      	ldrh	r2, [r7, #6]
   101d2:	68b9      	ldr	r1, [r7, #8]
   101d4:	68f8      	ldr	r0, [r7, #12]
   101d6:	4798      	blx	r3
   101d8:	4603      	mov	r3, r0
}
   101da:	4618      	mov	r0, r3
   101dc:	3710      	adds	r7, #16
   101de:	46bd      	mov	sp, r7
   101e0:	bd80      	pop	{r7, pc}
   101e2:	bf00      	nop
   101e4:	000112ec 	.word	0x000112ec
   101e8:	00003cd5 	.word	0x00003cd5

000101ec <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   101ec:	b580      	push	{r7, lr}
   101ee:	b084      	sub	sp, #16
   101f0:	af00      	add	r7, sp, #0
   101f2:	60f8      	str	r0, [r7, #12]
   101f4:	60b9      	str	r1, [r7, #8]
   101f6:	4613      	mov	r3, r2
   101f8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   101fa:	68fb      	ldr	r3, [r7, #12]
   101fc:	2b00      	cmp	r3, #0
   101fe:	d004      	beq.n	1020a <io_read+0x1e>
   10200:	68bb      	ldr	r3, [r7, #8]
   10202:	2b00      	cmp	r3, #0
   10204:	d001      	beq.n	1020a <io_read+0x1e>
   10206:	2301      	movs	r3, #1
   10208:	e000      	b.n	1020c <io_read+0x20>
   1020a:	2300      	movs	r3, #0
   1020c:	f003 0301 	and.w	r3, r3, #1
   10210:	b2db      	uxtb	r3, r3
   10212:	223d      	movs	r2, #61	; 0x3d
   10214:	4907      	ldr	r1, [pc, #28]	; (10234 <io_read+0x48>)
   10216:	4618      	mov	r0, r3
   10218:	4b07      	ldr	r3, [pc, #28]	; (10238 <io_read+0x4c>)
   1021a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   1021c:	68fb      	ldr	r3, [r7, #12]
   1021e:	685b      	ldr	r3, [r3, #4]
   10220:	88fa      	ldrh	r2, [r7, #6]
   10222:	68b9      	ldr	r1, [r7, #8]
   10224:	68f8      	ldr	r0, [r7, #12]
   10226:	4798      	blx	r3
   10228:	4603      	mov	r3, r0
}
   1022a:	4618      	mov	r0, r3
   1022c:	3710      	adds	r7, #16
   1022e:	46bd      	mov	sp, r7
   10230:	bd80      	pop	{r7, pc}
   10232:	bf00      	nop
   10234:	000112ec 	.word	0x000112ec
   10238:	00003cd5 	.word	0x00003cd5

0001023c <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:

// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
   1023c:	b480      	push	{r7}
   1023e:	b083      	sub	sp, #12
   10240:	af00      	add	r7, sp, #0
   10242:	6078      	str	r0, [r7, #4]
   10244:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
   10246:	687b      	ldr	r3, [r7, #4]
   10248:	683a      	ldr	r2, [r7, #0]
   1024a:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
   1024c:	687b      	ldr	r3, [r7, #4]
   1024e:	4618      	mov	r0, r3
   10250:	370c      	adds	r7, #12
   10252:	46bd      	mov	sp, r7
   10254:	bc80      	pop	{r7}
   10256:	4770      	bx	lr

00010258 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
   10258:	b480      	push	{r7}
   1025a:	b083      	sub	sp, #12
   1025c:	af00      	add	r7, sp, #0
   1025e:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
   10260:	687b      	ldr	r3, [r7, #4]
   10262:	4618      	mov	r0, r3
   10264:	370c      	adds	r7, #12
   10266:	46bd      	mov	sp, r7
   10268:	bc80      	pop	{r7}
   1026a:	4770      	bx	lr

0001026c <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
   1026c:	b580      	push	{r7, lr}
   1026e:	b082      	sub	sp, #8
   10270:	af00      	add	r7, sp, #0
   10272:	6078      	str	r0, [r7, #4]
   10274:	460b      	mov	r3, r1
   10276:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
   10278:	687b      	ldr	r3, [r7, #4]
   1027a:	691b      	ldr	r3, [r3, #16]
   1027c:	78fa      	ldrb	r2, [r7, #3]
   1027e:	b211      	sxth	r1, r2
   10280:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10284:	4618      	mov	r0, r3
   10286:	4b03      	ldr	r3, [pc, #12]	; (10294 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
   10288:	4798      	blx	r3
   1028a:	4603      	mov	r3, r0
}
   1028c:	4618      	mov	r0, r3
   1028e:	3708      	adds	r7, #8
   10290:	46bd      	mov	sp, r7
   10292:	bd80      	pop	{r7, pc}
   10294:	00002a49 	.word	0x00002a49

00010298 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
   10298:	b580      	push	{r7, lr}
   1029a:	b086      	sub	sp, #24
   1029c:	af00      	add	r7, sp, #0
   1029e:	60f8      	str	r0, [r7, #12]
   102a0:	60b9      	str	r1, [r7, #8]
   102a2:	4613      	mov	r3, r2
   102a4:	80fb      	strh	r3, [r7, #6]
	//Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
   102a6:	68fb      	ldr	r3, [r7, #12]
   102a8:	68db      	ldr	r3, [r3, #12]
   102aa:	88fa      	ldrh	r2, [r7, #6]
   102ac:	68b9      	ldr	r1, [r7, #8]
   102ae:	4618      	mov	r0, r3
   102b0:	4b03      	ldr	r3, [pc, #12]	; (102c0 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
   102b2:	4798      	blx	r3
   102b4:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
   102b6:	697b      	ldr	r3, [r7, #20]
}
   102b8:	4618      	mov	r0, r3
   102ba:	3718      	adds	r7, #24
   102bc:	46bd      	mov	sp, r7
   102be:	bd80      	pop	{r7, pc}
   102c0:	0001019d 	.word	0x0001019d

000102c4 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
   102c4:	b580      	push	{r7, lr}
   102c6:	b086      	sub	sp, #24
   102c8:	af00      	add	r7, sp, #0
   102ca:	60f8      	str	r0, [r7, #12]
   102cc:	60b9      	str	r1, [r7, #8]
   102ce:	4613      	mov	r3, r2
   102d0:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
   102d2:	68fb      	ldr	r3, [r7, #12]
   102d4:	68db      	ldr	r3, [r3, #12]
   102d6:	88fa      	ldrh	r2, [r7, #6]
   102d8:	68b9      	ldr	r1, [r7, #8]
   102da:	4618      	mov	r0, r3
   102dc:	4b03      	ldr	r3, [pc, #12]	; (102ec <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
   102de:	4798      	blx	r3
   102e0:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
   102e2:	697b      	ldr	r3, [r7, #20]
}
   102e4:	4618      	mov	r0, r3
   102e6:	3718      	adds	r7, #24
   102e8:	46bd      	mov	sp, r7
   102ea:	bd80      	pop	{r7, pc}
   102ec:	000101ed 	.word	0x000101ed

000102f0 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
   102f0:	b480      	push	{r7}
   102f2:	b083      	sub	sp, #12
   102f4:	af00      	add	r7, sp, #0
   102f6:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
   102f8:	687b      	ldr	r3, [r7, #4]
   102fa:	4618      	mov	r0, r3
   102fc:	370c      	adds	r7, #12
   102fe:	46bd      	mov	sp, r7
   10300:	bc80      	pop	{r7}
   10302:	4770      	bx	lr

00010304 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
   10304:	b480      	push	{r7}
   10306:	b083      	sub	sp, #12
   10308:	af00      	add	r7, sp, #0
   1030a:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
   1030c:	687b      	ldr	r3, [r7, #4]
   1030e:	4618      	mov	r0, r3
   10310:	370c      	adds	r7, #12
   10312:	46bd      	mov	sp, r7
   10314:	bc80      	pop	{r7}
   10316:	4770      	bx	lr

00010318 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
   10318:	b480      	push	{r7}
   1031a:	b083      	sub	sp, #12
   1031c:	af00      	add	r7, sp, #0
   1031e:	6078      	str	r0, [r7, #4]
   10320:	460b      	mov	r3, r1
   10322:	70fb      	strb	r3, [r7, #3]
    return pin%8;
   10324:	78fb      	ldrb	r3, [r7, #3]
   10326:	f003 0307 	and.w	r3, r3, #7
   1032a:	b2db      	uxtb	r3, r3
}
   1032c:	4618      	mov	r0, r3
   1032e:	370c      	adds	r7, #12
   10330:	46bd      	mov	sp, r7
   10332:	bc80      	pop	{r7}
   10334:	4770      	bx	lr

00010336 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
   10336:	b480      	push	{r7}
   10338:	b083      	sub	sp, #12
   1033a:	af00      	add	r7, sp, #0
   1033c:	6078      	str	r0, [r7, #4]
   1033e:	4608      	mov	r0, r1
   10340:	4611      	mov	r1, r2
   10342:	461a      	mov	r2, r3
   10344:	4603      	mov	r3, r0
   10346:	70fb      	strb	r3, [r7, #3]
   10348:	460b      	mov	r3, r1
   1034a:	70bb      	strb	r3, [r7, #2]
   1034c:	4613      	mov	r3, r2
   1034e:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
   10350:	78fb      	ldrb	r3, [r7, #3]
   10352:	2b07      	cmp	r3, #7
   10354:	dc01      	bgt.n	1035a <_ZN14MCP23008_Class9regForPinEhhh+0x24>
   10356:	78bb      	ldrb	r3, [r7, #2]
   10358:	e000      	b.n	1035c <_ZN14MCP23008_Class9regForPinEhhh+0x26>
   1035a:	787b      	ldrb	r3, [r7, #1]
}
   1035c:	4618      	mov	r0, r3
   1035e:	370c      	adds	r7, #12
   10360:	46bd      	mov	sp, r7
   10362:	bc80      	pop	{r7}
   10364:	4770      	bx	lr
	...

00010368 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
   10368:	b580      	push	{r7, lr}
   1036a:	b082      	sub	sp, #8
   1036c:	af00      	add	r7, sp, #0
   1036e:	6078      	str	r0, [r7, #4]
   10370:	460b      	mov	r3, r1
   10372:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
   10374:	687b      	ldr	r3, [r7, #4]
   10376:	691a      	ldr	r2, [r3, #16]
   10378:	687b      	ldr	r3, [r7, #4]
   1037a:	7b1b      	ldrb	r3, [r3, #12]
   1037c:	4619      	mov	r1, r3
   1037e:	4610      	mov	r0, r2
   10380:	4b0b      	ldr	r3, [pc, #44]	; (103b0 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
   10382:	4798      	blx	r3
	i2cClass->Write(&addr,1);
   10384:	687b      	ldr	r3, [r7, #4]
   10386:	691b      	ldr	r3, [r3, #16]
   10388:	1cf9      	adds	r1, r7, #3
   1038a:	2201      	movs	r2, #1
   1038c:	4618      	mov	r0, r3
   1038e:	4b09      	ldr	r3, [pc, #36]	; (103b4 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
   10390:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
   10392:	687b      	ldr	r3, [r7, #4]
   10394:	6918      	ldr	r0, [r3, #16]
   10396:	687b      	ldr	r3, [r7, #4]
   10398:	3304      	adds	r3, #4
   1039a:	2201      	movs	r2, #1
   1039c:	4619      	mov	r1, r3
   1039e:	4b06      	ldr	r3, [pc, #24]	; (103b8 <_ZN14MCP23008_Class12readRegisterEh+0x50>)
   103a0:	4798      	blx	r3

	return registerValue;
   103a2:	687b      	ldr	r3, [r7, #4]
   103a4:	791b      	ldrb	r3, [r3, #4]
}
   103a6:	4618      	mov	r0, r3
   103a8:	3708      	adds	r7, #8
   103aa:	46bd      	mov	sp, r7
   103ac:	bd80      	pop	{r7, pc}
   103ae:	bf00      	nop
   103b0:	0001026d 	.word	0x0001026d
   103b4:	00010299 	.word	0x00010299
   103b8:	000102c5 	.word	0x000102c5

000103bc <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
   103bc:	b580      	push	{r7, lr}
   103be:	b082      	sub	sp, #8
   103c0:	af00      	add	r7, sp, #0
   103c2:	6078      	str	r0, [r7, #4]
	i2cClass->SetSlaveAddress(i2cAddress);
   103c4:	687b      	ldr	r3, [r7, #4]
   103c6:	691a      	ldr	r2, [r3, #16]
   103c8:	687b      	ldr	r3, [r7, #4]
   103ca:	7b1b      	ldrb	r3, [r3, #12]
   103cc:	4619      	mov	r1, r3
   103ce:	4610      	mov	r0, r2
   103d0:	4b05      	ldr	r3, [pc, #20]	; (103e8 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x2c>)
   103d2:	4798      	blx	r3
	return readRegister(MCP23008_GPIOA);
   103d4:	2109      	movs	r1, #9
   103d6:	6878      	ldr	r0, [r7, #4]
   103d8:	4b04      	ldr	r3, [pc, #16]	; (103ec <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
   103da:	4798      	blx	r3
   103dc:	4603      	mov	r3, r0
}
   103de:	4618      	mov	r0, r3
   103e0:	3708      	adds	r7, #8
   103e2:	46bd      	mov	sp, r7
   103e4:	bd80      	pop	{r7, pc}
   103e6:	bf00      	nop
   103e8:	0001026d 	.word	0x0001026d
   103ec:	00010369 	.word	0x00010369

000103f0 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
   103f0:	b580      	push	{r7, lr}
   103f2:	b084      	sub	sp, #16
   103f4:	af00      	add	r7, sp, #0
   103f6:	6078      	str	r0, [r7, #4]
   103f8:	460b      	mov	r3, r1
   103fa:	70fb      	strb	r3, [r7, #3]
   103fc:	4613      	mov	r3, r2
   103fe:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
   10400:	687b      	ldr	r3, [r7, #4]
   10402:	691a      	ldr	r2, [r3, #16]
   10404:	687b      	ldr	r3, [r7, #4]
   10406:	7b1b      	ldrb	r3, [r3, #12]
   10408:	4619      	mov	r1, r3
   1040a:	4610      	mov	r0, r2
   1040c:	4b09      	ldr	r3, [pc, #36]	; (10434 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
   1040e:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
   10410:	78fb      	ldrb	r3, [r7, #3]
   10412:	733b      	strb	r3, [r7, #12]
	array[1]=value;
   10414:	78bb      	ldrb	r3, [r7, #2]
   10416:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
   10418:	687b      	ldr	r3, [r7, #4]
   1041a:	691b      	ldr	r3, [r3, #16]
   1041c:	f107 010c 	add.w	r1, r7, #12
   10420:	2202      	movs	r2, #2
   10422:	4618      	mov	r0, r3
   10424:	4b04      	ldr	r3, [pc, #16]	; (10438 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
   10426:	4798      	blx	r3
   10428:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
   1042a:	4618      	mov	r0, r3
   1042c:	3710      	adds	r7, #16
   1042e:	46bd      	mov	sp, r7
   10430:	bd80      	pop	{r7, pc}
   10432:	bf00      	nop
   10434:	0001026d 	.word	0x0001026d
   10438:	00010299 	.word	0x00010299

0001043c <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
   1043c:	b580      	push	{r7, lr}
   1043e:	b082      	sub	sp, #8
   10440:	af00      	add	r7, sp, #0
   10442:	6078      	str	r0, [r7, #4]
   10444:	460b      	mov	r3, r1
   10446:	70fb      	strb	r3, [r7, #3]
	i2cClass->SetSlaveAddress(i2cAddress);
   10448:	687b      	ldr	r3, [r7, #4]
   1044a:	691a      	ldr	r2, [r3, #16]
   1044c:	687b      	ldr	r3, [r7, #4]
   1044e:	7b1b      	ldrb	r3, [r3, #12]
   10450:	4619      	mov	r1, r3
   10452:	4610      	mov	r0, r2
   10454:	4b06      	ldr	r3, [pc, #24]	; (10470 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
   10456:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
   10458:	78fb      	ldrb	r3, [r7, #3]
   1045a:	461a      	mov	r2, r3
   1045c:	2109      	movs	r1, #9
   1045e:	6878      	ldr	r0, [r7, #4]
   10460:	4b04      	ldr	r3, [pc, #16]	; (10474 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
   10462:	4798      	blx	r3
	return v;
   10464:	78fb      	ldrb	r3, [r7, #3]
}
   10466:	4618      	mov	r0, r3
   10468:	3708      	adds	r7, #8
   1046a:	46bd      	mov	sp, r7
   1046c:	bd80      	pop	{r7, pc}
   1046e:	bf00      	nop
   10470:	0001026d 	.word	0x0001026d
   10474:	000103f1 	.word	0x000103f1

00010478 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
   10478:	b590      	push	{r4, r7, lr}
   1047a:	b085      	sub	sp, #20
   1047c:	af00      	add	r7, sp, #0
   1047e:	6078      	str	r0, [r7, #4]
   10480:	460b      	mov	r3, r1
   10482:	70fb      	strb	r3, [r7, #3]
   10484:	4613      	mov	r3, r2
   10486:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
   10488:	78fb      	ldrb	r3, [r7, #3]
   1048a:	4619      	mov	r1, r3
   1048c:	6878      	ldr	r0, [r7, #4]
   1048e:	4b21      	ldr	r3, [pc, #132]	; (10514 <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
   10490:	4798      	blx	r3
   10492:	4603      	mov	r3, r0
   10494:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
   10496:	78f9      	ldrb	r1, [r7, #3]
   10498:	230a      	movs	r3, #10
   1049a:	220a      	movs	r2, #10
   1049c:	6878      	ldr	r0, [r7, #4]
   1049e:	4c1e      	ldr	r4, [pc, #120]	; (10518 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   104a0:	47a0      	blx	r4
   104a2:	4603      	mov	r3, r0
   104a4:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
   104a6:	7bfb      	ldrb	r3, [r7, #15]
   104a8:	4619      	mov	r1, r3
   104aa:	6878      	ldr	r0, [r7, #4]
   104ac:	4b1b      	ldr	r3, [pc, #108]	; (1051c <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
   104ae:	4798      	blx	r3
   104b0:	4603      	mov	r3, r0
   104b2:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
   104b4:	78bb      	ldrb	r3, [r7, #2]
   104b6:	2b00      	cmp	r3, #0
   104b8:	d009      	beq.n	104ce <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
   104ba:	7bba      	ldrb	r2, [r7, #14]
   104bc:	7b7b      	ldrb	r3, [r7, #13]
   104be:	4619      	mov	r1, r3
   104c0:	2301      	movs	r3, #1
   104c2:	408b      	lsls	r3, r1
   104c4:	b2db      	uxtb	r3, r3
   104c6:	4313      	orrs	r3, r2
   104c8:	b2db      	uxtb	r3, r3
   104ca:	73bb      	strb	r3, [r7, #14]
   104cc:	e00a      	b.n	104e4 <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
   104ce:	7bba      	ldrb	r2, [r7, #14]
   104d0:	7b7b      	ldrb	r3, [r7, #13]
   104d2:	4619      	mov	r1, r3
   104d4:	2301      	movs	r3, #1
   104d6:	408b      	lsls	r3, r1
   104d8:	b2db      	uxtb	r3, r3
   104da:	43db      	mvns	r3, r3
   104dc:	b2db      	uxtb	r3, r3
   104de:	4013      	ands	r3, r2
   104e0:	b2db      	uxtb	r3, r3
   104e2:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
   104e4:	78f9      	ldrb	r1, [r7, #3]
   104e6:	2309      	movs	r3, #9
   104e8:	2209      	movs	r2, #9
   104ea:	6878      	ldr	r0, [r7, #4]
   104ec:	4c0a      	ldr	r4, [pc, #40]	; (10518 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   104ee:	47a0      	blx	r4
   104f0:	4603      	mov	r3, r0
   104f2:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
   104f4:	7bba      	ldrb	r2, [r7, #14]
   104f6:	7bfb      	ldrb	r3, [r7, #15]
   104f8:	4619      	mov	r1, r3
   104fa:	6878      	ldr	r0, [r7, #4]
   104fc:	4b08      	ldr	r3, [pc, #32]	; (10520 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
   104fe:	4798      	blx	r3
   10500:	4603      	mov	r3, r0
   10502:	2b00      	cmp	r3, #0
   10504:	bf0c      	ite	eq
   10506:	2301      	moveq	r3, #1
   10508:	2300      	movne	r3, #0
   1050a:	b2db      	uxtb	r3, r3
}
   1050c:	4618      	mov	r0, r3
   1050e:	3714      	adds	r7, #20
   10510:	46bd      	mov	sp, r7
   10512:	bd90      	pop	{r4, r7, pc}
   10514:	00010319 	.word	0x00010319
   10518:	00010337 	.word	0x00010337
   1051c:	00010369 	.word	0x00010369
   10520:	000103f1 	.word	0x000103f1

00010524 <__aeabi_atexit>:
   10524:	460b      	mov	r3, r1
   10526:	4601      	mov	r1, r0
   10528:	4618      	mov	r0, r3
   1052a:	f000 bad5 	b.w	10ad8 <__cxa_atexit>
   1052e:	bf00      	nop

00010530 <__aeabi_frsub>:
   10530:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   10534:	e002      	b.n	1053c <__addsf3>
   10536:	bf00      	nop

00010538 <__aeabi_fsub>:
   10538:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001053c <__addsf3>:
   1053c:	0042      	lsls	r2, r0, #1
   1053e:	bf1f      	itttt	ne
   10540:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   10544:	ea92 0f03 	teqne	r2, r3
   10548:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1054c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   10550:	d06a      	beq.n	10628 <__addsf3+0xec>
   10552:	ea4f 6212 	mov.w	r2, r2, lsr #24
   10556:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1055a:	bfc1      	itttt	gt
   1055c:	18d2      	addgt	r2, r2, r3
   1055e:	4041      	eorgt	r1, r0
   10560:	4048      	eorgt	r0, r1
   10562:	4041      	eorgt	r1, r0
   10564:	bfb8      	it	lt
   10566:	425b      	neglt	r3, r3
   10568:	2b19      	cmp	r3, #25
   1056a:	bf88      	it	hi
   1056c:	4770      	bxhi	lr
   1056e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   10572:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10576:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1057a:	bf18      	it	ne
   1057c:	4240      	negne	r0, r0
   1057e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10582:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   10586:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1058a:	bf18      	it	ne
   1058c:	4249      	negne	r1, r1
   1058e:	ea92 0f03 	teq	r2, r3
   10592:	d03f      	beq.n	10614 <__addsf3+0xd8>
   10594:	f1a2 0201 	sub.w	r2, r2, #1
   10598:	fa41 fc03 	asr.w	ip, r1, r3
   1059c:	eb10 000c 	adds.w	r0, r0, ip
   105a0:	f1c3 0320 	rsb	r3, r3, #32
   105a4:	fa01 f103 	lsl.w	r1, r1, r3
   105a8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   105ac:	d502      	bpl.n	105b4 <__addsf3+0x78>
   105ae:	4249      	negs	r1, r1
   105b0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   105b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   105b8:	d313      	bcc.n	105e2 <__addsf3+0xa6>
   105ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   105be:	d306      	bcc.n	105ce <__addsf3+0x92>
   105c0:	0840      	lsrs	r0, r0, #1
   105c2:	ea4f 0131 	mov.w	r1, r1, rrx
   105c6:	f102 0201 	add.w	r2, r2, #1
   105ca:	2afe      	cmp	r2, #254	; 0xfe
   105cc:	d251      	bcs.n	10672 <__addsf3+0x136>
   105ce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   105d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   105d6:	bf08      	it	eq
   105d8:	f020 0001 	biceq.w	r0, r0, #1
   105dc:	ea40 0003 	orr.w	r0, r0, r3
   105e0:	4770      	bx	lr
   105e2:	0049      	lsls	r1, r1, #1
   105e4:	eb40 0000 	adc.w	r0, r0, r0
   105e8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   105ec:	f1a2 0201 	sub.w	r2, r2, #1
   105f0:	d1ed      	bne.n	105ce <__addsf3+0x92>
   105f2:	fab0 fc80 	clz	ip, r0
   105f6:	f1ac 0c08 	sub.w	ip, ip, #8
   105fa:	ebb2 020c 	subs.w	r2, r2, ip
   105fe:	fa00 f00c 	lsl.w	r0, r0, ip
   10602:	bfaa      	itet	ge
   10604:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   10608:	4252      	neglt	r2, r2
   1060a:	4318      	orrge	r0, r3
   1060c:	bfbc      	itt	lt
   1060e:	40d0      	lsrlt	r0, r2
   10610:	4318      	orrlt	r0, r3
   10612:	4770      	bx	lr
   10614:	f092 0f00 	teq	r2, #0
   10618:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1061c:	bf06      	itte	eq
   1061e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   10622:	3201      	addeq	r2, #1
   10624:	3b01      	subne	r3, #1
   10626:	e7b5      	b.n	10594 <__addsf3+0x58>
   10628:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   10630:	bf18      	it	ne
   10632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   10636:	d021      	beq.n	1067c <__addsf3+0x140>
   10638:	ea92 0f03 	teq	r2, r3
   1063c:	d004      	beq.n	10648 <__addsf3+0x10c>
   1063e:	f092 0f00 	teq	r2, #0
   10642:	bf08      	it	eq
   10644:	4608      	moveq	r0, r1
   10646:	4770      	bx	lr
   10648:	ea90 0f01 	teq	r0, r1
   1064c:	bf1c      	itt	ne
   1064e:	2000      	movne	r0, #0
   10650:	4770      	bxne	lr
   10652:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   10656:	d104      	bne.n	10662 <__addsf3+0x126>
   10658:	0040      	lsls	r0, r0, #1
   1065a:	bf28      	it	cs
   1065c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   10660:	4770      	bx	lr
   10662:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   10666:	bf3c      	itt	cc
   10668:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1066c:	4770      	bxcc	lr
   1066e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   10672:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   10676:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1067a:	4770      	bx	lr
   1067c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   10680:	bf16      	itet	ne
   10682:	4608      	movne	r0, r1
   10684:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   10688:	4601      	movne	r1, r0
   1068a:	0242      	lsls	r2, r0, #9
   1068c:	bf06      	itte	eq
   1068e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   10692:	ea90 0f01 	teqeq	r0, r1
   10696:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1069a:	4770      	bx	lr

0001069c <__aeabi_ui2f>:
   1069c:	f04f 0300 	mov.w	r3, #0
   106a0:	e004      	b.n	106ac <__aeabi_i2f+0x8>
   106a2:	bf00      	nop

000106a4 <__aeabi_i2f>:
   106a4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   106a8:	bf48      	it	mi
   106aa:	4240      	negmi	r0, r0
   106ac:	ea5f 0c00 	movs.w	ip, r0
   106b0:	bf08      	it	eq
   106b2:	4770      	bxeq	lr
   106b4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   106b8:	4601      	mov	r1, r0
   106ba:	f04f 0000 	mov.w	r0, #0
   106be:	e01c      	b.n	106fa <__aeabi_l2f+0x2a>

000106c0 <__aeabi_ul2f>:
   106c0:	ea50 0201 	orrs.w	r2, r0, r1
   106c4:	bf08      	it	eq
   106c6:	4770      	bxeq	lr
   106c8:	f04f 0300 	mov.w	r3, #0
   106cc:	e00a      	b.n	106e4 <__aeabi_l2f+0x14>
   106ce:	bf00      	nop

000106d0 <__aeabi_l2f>:
   106d0:	ea50 0201 	orrs.w	r2, r0, r1
   106d4:	bf08      	it	eq
   106d6:	4770      	bxeq	lr
   106d8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   106dc:	d502      	bpl.n	106e4 <__aeabi_l2f+0x14>
   106de:	4240      	negs	r0, r0
   106e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   106e4:	ea5f 0c01 	movs.w	ip, r1
   106e8:	bf02      	ittt	eq
   106ea:	4684      	moveq	ip, r0
   106ec:	4601      	moveq	r1, r0
   106ee:	2000      	moveq	r0, #0
   106f0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   106f4:	bf08      	it	eq
   106f6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   106fa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   106fe:	fabc f28c 	clz	r2, ip
   10702:	3a08      	subs	r2, #8
   10704:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   10708:	db10      	blt.n	1072c <__aeabi_l2f+0x5c>
   1070a:	fa01 fc02 	lsl.w	ip, r1, r2
   1070e:	4463      	add	r3, ip
   10710:	fa00 fc02 	lsl.w	ip, r0, r2
   10714:	f1c2 0220 	rsb	r2, r2, #32
   10718:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1071c:	fa20 f202 	lsr.w	r2, r0, r2
   10720:	eb43 0002 	adc.w	r0, r3, r2
   10724:	bf08      	it	eq
   10726:	f020 0001 	biceq.w	r0, r0, #1
   1072a:	4770      	bx	lr
   1072c:	f102 0220 	add.w	r2, r2, #32
   10730:	fa01 fc02 	lsl.w	ip, r1, r2
   10734:	f1c2 0220 	rsb	r2, r2, #32
   10738:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1073c:	fa21 f202 	lsr.w	r2, r1, r2
   10740:	eb43 0002 	adc.w	r0, r3, r2
   10744:	bf08      	it	eq
   10746:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1074a:	4770      	bx	lr

0001074c <__aeabi_fmul>:
   1074c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10750:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   10754:	bf1e      	ittt	ne
   10756:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1075a:	ea92 0f0c 	teqne	r2, ip
   1075e:	ea93 0f0c 	teqne	r3, ip
   10762:	d06f      	beq.n	10844 <__aeabi_fmul+0xf8>
   10764:	441a      	add	r2, r3
   10766:	ea80 0c01 	eor.w	ip, r0, r1
   1076a:	0240      	lsls	r0, r0, #9
   1076c:	bf18      	it	ne
   1076e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   10772:	d01e      	beq.n	107b2 <__aeabi_fmul+0x66>
   10774:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   10778:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1077c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   10780:	fba0 3101 	umull	r3, r1, r0, r1
   10784:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   10788:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1078c:	bf3e      	ittt	cc
   1078e:	0049      	lslcc	r1, r1, #1
   10790:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   10794:	005b      	lslcc	r3, r3, #1
   10796:	ea40 0001 	orr.w	r0, r0, r1
   1079a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1079e:	2afd      	cmp	r2, #253	; 0xfd
   107a0:	d81d      	bhi.n	107de <__aeabi_fmul+0x92>
   107a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   107a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   107aa:	bf08      	it	eq
   107ac:	f020 0001 	biceq.w	r0, r0, #1
   107b0:	4770      	bx	lr
   107b2:	f090 0f00 	teq	r0, #0
   107b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   107ba:	bf08      	it	eq
   107bc:	0249      	lsleq	r1, r1, #9
   107be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   107c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   107c6:	3a7f      	subs	r2, #127	; 0x7f
   107c8:	bfc2      	ittt	gt
   107ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   107ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   107d2:	4770      	bxgt	lr
   107d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   107d8:	f04f 0300 	mov.w	r3, #0
   107dc:	3a01      	subs	r2, #1
   107de:	dc5d      	bgt.n	1089c <__aeabi_fmul+0x150>
   107e0:	f112 0f19 	cmn.w	r2, #25
   107e4:	bfdc      	itt	le
   107e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   107ea:	4770      	bxle	lr
   107ec:	f1c2 0200 	rsb	r2, r2, #0
   107f0:	0041      	lsls	r1, r0, #1
   107f2:	fa21 f102 	lsr.w	r1, r1, r2
   107f6:	f1c2 0220 	rsb	r2, r2, #32
   107fa:	fa00 fc02 	lsl.w	ip, r0, r2
   107fe:	ea5f 0031 	movs.w	r0, r1, rrx
   10802:	f140 0000 	adc.w	r0, r0, #0
   10806:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1080a:	bf08      	it	eq
   1080c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   10810:	4770      	bx	lr
   10812:	f092 0f00 	teq	r2, #0
   10816:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1081a:	bf02      	ittt	eq
   1081c:	0040      	lsleq	r0, r0, #1
   1081e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   10822:	3a01      	subeq	r2, #1
   10824:	d0f9      	beq.n	1081a <__aeabi_fmul+0xce>
   10826:	ea40 000c 	orr.w	r0, r0, ip
   1082a:	f093 0f00 	teq	r3, #0
   1082e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   10832:	bf02      	ittt	eq
   10834:	0049      	lsleq	r1, r1, #1
   10836:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1083a:	3b01      	subeq	r3, #1
   1083c:	d0f9      	beq.n	10832 <__aeabi_fmul+0xe6>
   1083e:	ea41 010c 	orr.w	r1, r1, ip
   10842:	e78f      	b.n	10764 <__aeabi_fmul+0x18>
   10844:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   10848:	ea92 0f0c 	teq	r2, ip
   1084c:	bf18      	it	ne
   1084e:	ea93 0f0c 	teqne	r3, ip
   10852:	d00a      	beq.n	1086a <__aeabi_fmul+0x11e>
   10854:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   10858:	bf18      	it	ne
   1085a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1085e:	d1d8      	bne.n	10812 <__aeabi_fmul+0xc6>
   10860:	ea80 0001 	eor.w	r0, r0, r1
   10864:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   10868:	4770      	bx	lr
   1086a:	f090 0f00 	teq	r0, #0
   1086e:	bf17      	itett	ne
   10870:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   10874:	4608      	moveq	r0, r1
   10876:	f091 0f00 	teqne	r1, #0
   1087a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1087e:	d014      	beq.n	108aa <__aeabi_fmul+0x15e>
   10880:	ea92 0f0c 	teq	r2, ip
   10884:	d101      	bne.n	1088a <__aeabi_fmul+0x13e>
   10886:	0242      	lsls	r2, r0, #9
   10888:	d10f      	bne.n	108aa <__aeabi_fmul+0x15e>
   1088a:	ea93 0f0c 	teq	r3, ip
   1088e:	d103      	bne.n	10898 <__aeabi_fmul+0x14c>
   10890:	024b      	lsls	r3, r1, #9
   10892:	bf18      	it	ne
   10894:	4608      	movne	r0, r1
   10896:	d108      	bne.n	108aa <__aeabi_fmul+0x15e>
   10898:	ea80 0001 	eor.w	r0, r0, r1
   1089c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   108a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   108a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   108a8:	4770      	bx	lr
   108aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   108ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   108b2:	4770      	bx	lr

000108b4 <__aeabi_fdiv>:
   108b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
   108b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   108bc:	bf1e      	ittt	ne
   108be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   108c2:	ea92 0f0c 	teqne	r2, ip
   108c6:	ea93 0f0c 	teqne	r3, ip
   108ca:	d069      	beq.n	109a0 <__aeabi_fdiv+0xec>
   108cc:	eba2 0203 	sub.w	r2, r2, r3
   108d0:	ea80 0c01 	eor.w	ip, r0, r1
   108d4:	0249      	lsls	r1, r1, #9
   108d6:	ea4f 2040 	mov.w	r0, r0, lsl #9
   108da:	d037      	beq.n	1094c <__aeabi_fdiv+0x98>
   108dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   108e0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   108e4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   108e8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   108ec:	428b      	cmp	r3, r1
   108ee:	bf38      	it	cc
   108f0:	005b      	lslcc	r3, r3, #1
   108f2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   108f6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   108fa:	428b      	cmp	r3, r1
   108fc:	bf24      	itt	cs
   108fe:	1a5b      	subcs	r3, r3, r1
   10900:	ea40 000c 	orrcs.w	r0, r0, ip
   10904:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   10908:	bf24      	itt	cs
   1090a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1090e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   10912:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   10916:	bf24      	itt	cs
   10918:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   10920:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   10924:	bf24      	itt	cs
   10926:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1092a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1092e:	011b      	lsls	r3, r3, #4
   10930:	bf18      	it	ne
   10932:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   10936:	d1e0      	bne.n	108fa <__aeabi_fdiv+0x46>
   10938:	2afd      	cmp	r2, #253	; 0xfd
   1093a:	f63f af50 	bhi.w	107de <__aeabi_fmul+0x92>
   1093e:	428b      	cmp	r3, r1
   10940:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   10944:	bf08      	it	eq
   10946:	f020 0001 	biceq.w	r0, r0, #1
   1094a:	4770      	bx	lr
   1094c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   10950:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   10954:	327f      	adds	r2, #127	; 0x7f
   10956:	bfc2      	ittt	gt
   10958:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1095c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   10960:	4770      	bxgt	lr
   10962:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10966:	f04f 0300 	mov.w	r3, #0
   1096a:	3a01      	subs	r2, #1
   1096c:	e737      	b.n	107de <__aeabi_fmul+0x92>
   1096e:	f092 0f00 	teq	r2, #0
   10972:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   10976:	bf02      	ittt	eq
   10978:	0040      	lsleq	r0, r0, #1
   1097a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1097e:	3a01      	subeq	r2, #1
   10980:	d0f9      	beq.n	10976 <__aeabi_fdiv+0xc2>
   10982:	ea40 000c 	orr.w	r0, r0, ip
   10986:	f093 0f00 	teq	r3, #0
   1098a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1098e:	bf02      	ittt	eq
   10990:	0049      	lsleq	r1, r1, #1
   10992:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   10996:	3b01      	subeq	r3, #1
   10998:	d0f9      	beq.n	1098e <__aeabi_fdiv+0xda>
   1099a:	ea41 010c 	orr.w	r1, r1, ip
   1099e:	e795      	b.n	108cc <__aeabi_fdiv+0x18>
   109a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   109a4:	ea92 0f0c 	teq	r2, ip
   109a8:	d108      	bne.n	109bc <__aeabi_fdiv+0x108>
   109aa:	0242      	lsls	r2, r0, #9
   109ac:	f47f af7d 	bne.w	108aa <__aeabi_fmul+0x15e>
   109b0:	ea93 0f0c 	teq	r3, ip
   109b4:	f47f af70 	bne.w	10898 <__aeabi_fmul+0x14c>
   109b8:	4608      	mov	r0, r1
   109ba:	e776      	b.n	108aa <__aeabi_fmul+0x15e>
   109bc:	ea93 0f0c 	teq	r3, ip
   109c0:	d104      	bne.n	109cc <__aeabi_fdiv+0x118>
   109c2:	024b      	lsls	r3, r1, #9
   109c4:	f43f af4c 	beq.w	10860 <__aeabi_fmul+0x114>
   109c8:	4608      	mov	r0, r1
   109ca:	e76e      	b.n	108aa <__aeabi_fmul+0x15e>
   109cc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   109d0:	bf18      	it	ne
   109d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   109d6:	d1ca      	bne.n	1096e <__aeabi_fdiv+0xba>
   109d8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   109dc:	f47f af5c 	bne.w	10898 <__aeabi_fmul+0x14c>
   109e0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   109e4:	f47f af3c 	bne.w	10860 <__aeabi_fmul+0x114>
   109e8:	e75f      	b.n	108aa <__aeabi_fmul+0x15e>
   109ea:	bf00      	nop

000109ec <__gesf2>:
   109ec:	f04f 3cff 	mov.w	ip, #4294967295
   109f0:	e006      	b.n	10a00 <__cmpsf2+0x4>
   109f2:	bf00      	nop

000109f4 <__lesf2>:
   109f4:	f04f 0c01 	mov.w	ip, #1
   109f8:	e002      	b.n	10a00 <__cmpsf2+0x4>
   109fa:	bf00      	nop

000109fc <__cmpsf2>:
   109fc:	f04f 0c01 	mov.w	ip, #1
   10a00:	f84d cd04 	str.w	ip, [sp, #-4]!
   10a04:	ea4f 0240 	mov.w	r2, r0, lsl #1
   10a08:	ea4f 0341 	mov.w	r3, r1, lsl #1
   10a0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   10a10:	bf18      	it	ne
   10a12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   10a16:	d011      	beq.n	10a3c <__cmpsf2+0x40>
   10a18:	b001      	add	sp, #4
   10a1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   10a1e:	bf18      	it	ne
   10a20:	ea90 0f01 	teqne	r0, r1
   10a24:	bf58      	it	pl
   10a26:	ebb2 0003 	subspl.w	r0, r2, r3
   10a2a:	bf88      	it	hi
   10a2c:	17c8      	asrhi	r0, r1, #31
   10a2e:	bf38      	it	cc
   10a30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   10a34:	bf18      	it	ne
   10a36:	f040 0001 	orrne.w	r0, r0, #1
   10a3a:	4770      	bx	lr
   10a3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   10a40:	d102      	bne.n	10a48 <__cmpsf2+0x4c>
   10a42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   10a46:	d105      	bne.n	10a54 <__cmpsf2+0x58>
   10a48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   10a4c:	d1e4      	bne.n	10a18 <__cmpsf2+0x1c>
   10a4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   10a52:	d0e1      	beq.n	10a18 <__cmpsf2+0x1c>
   10a54:	f85d 0b04 	ldr.w	r0, [sp], #4
   10a58:	4770      	bx	lr
   10a5a:	bf00      	nop

00010a5c <__aeabi_cfrcmple>:
   10a5c:	4684      	mov	ip, r0
   10a5e:	4608      	mov	r0, r1
   10a60:	4661      	mov	r1, ip
   10a62:	e7ff      	b.n	10a64 <__aeabi_cfcmpeq>

00010a64 <__aeabi_cfcmpeq>:
   10a64:	b50f      	push	{r0, r1, r2, r3, lr}
   10a66:	f7ff ffc9 	bl	109fc <__cmpsf2>
   10a6a:	2800      	cmp	r0, #0
   10a6c:	bf48      	it	mi
   10a6e:	f110 0f00 	cmnmi.w	r0, #0
   10a72:	bd0f      	pop	{r0, r1, r2, r3, pc}

00010a74 <__aeabi_fcmpeq>:
   10a74:	f84d ed08 	str.w	lr, [sp, #-8]!
   10a78:	f7ff fff4 	bl	10a64 <__aeabi_cfcmpeq>
   10a7c:	bf0c      	ite	eq
   10a7e:	2001      	moveq	r0, #1
   10a80:	2000      	movne	r0, #0
   10a82:	f85d fb08 	ldr.w	pc, [sp], #8
   10a86:	bf00      	nop

00010a88 <__aeabi_fcmplt>:
   10a88:	f84d ed08 	str.w	lr, [sp, #-8]!
   10a8c:	f7ff ffea 	bl	10a64 <__aeabi_cfcmpeq>
   10a90:	bf34      	ite	cc
   10a92:	2001      	movcc	r0, #1
   10a94:	2000      	movcs	r0, #0
   10a96:	f85d fb08 	ldr.w	pc, [sp], #8
   10a9a:	bf00      	nop

00010a9c <__aeabi_fcmple>:
   10a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   10aa0:	f7ff ffe0 	bl	10a64 <__aeabi_cfcmpeq>
   10aa4:	bf94      	ite	ls
   10aa6:	2001      	movls	r0, #1
   10aa8:	2000      	movhi	r0, #0
   10aaa:	f85d fb08 	ldr.w	pc, [sp], #8
   10aae:	bf00      	nop

00010ab0 <__aeabi_fcmpge>:
   10ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
   10ab4:	f7ff ffd2 	bl	10a5c <__aeabi_cfrcmple>
   10ab8:	bf94      	ite	ls
   10aba:	2001      	movls	r0, #1
   10abc:	2000      	movhi	r0, #0
   10abe:	f85d fb08 	ldr.w	pc, [sp], #8
   10ac2:	bf00      	nop

00010ac4 <__aeabi_fcmpgt>:
   10ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
   10ac8:	f7ff ffc8 	bl	10a5c <__aeabi_cfrcmple>
   10acc:	bf34      	ite	cc
   10ace:	2001      	movcc	r0, #1
   10ad0:	2000      	movcs	r0, #0
   10ad2:	f85d fb08 	ldr.w	pc, [sp], #8
   10ad6:	bf00      	nop

00010ad8 <__cxa_atexit>:
   10ad8:	4613      	mov	r3, r2
   10ada:	460a      	mov	r2, r1
   10adc:	4601      	mov	r1, r0
   10ade:	2002      	movs	r0, #2
   10ae0:	f000 b91e 	b.w	10d20 <__register_exitproc>

00010ae4 <ffs>:
   10ae4:	b140      	cbz	r0, 10af8 <ffs+0x14>
   10ae6:	2300      	movs	r3, #0
   10ae8:	fa40 f103 	asr.w	r1, r0, r3
   10aec:	1c5a      	adds	r2, r3, #1
   10aee:	07c9      	lsls	r1, r1, #31
   10af0:	4613      	mov	r3, r2
   10af2:	d5f9      	bpl.n	10ae8 <ffs+0x4>
   10af4:	4610      	mov	r0, r2
   10af6:	4770      	bx	lr
   10af8:	4602      	mov	r2, r0
   10afa:	4610      	mov	r0, r2
   10afc:	4770      	bx	lr
   10afe:	bf00      	nop

00010b00 <__libc_init_array>:
   10b00:	b570      	push	{r4, r5, r6, lr}
   10b02:	4e0f      	ldr	r6, [pc, #60]	; (10b40 <__libc_init_array+0x40>)
   10b04:	4d0f      	ldr	r5, [pc, #60]	; (10b44 <__libc_init_array+0x44>)
   10b06:	1b76      	subs	r6, r6, r5
   10b08:	10b6      	asrs	r6, r6, #2
   10b0a:	bf18      	it	ne
   10b0c:	2400      	movne	r4, #0
   10b0e:	d005      	beq.n	10b1c <__libc_init_array+0x1c>
   10b10:	3401      	adds	r4, #1
   10b12:	f855 3b04 	ldr.w	r3, [r5], #4
   10b16:	4798      	blx	r3
   10b18:	42a6      	cmp	r6, r4
   10b1a:	d1f9      	bne.n	10b10 <__libc_init_array+0x10>
   10b1c:	4e0a      	ldr	r6, [pc, #40]	; (10b48 <__libc_init_array+0x48>)
   10b1e:	4d0b      	ldr	r5, [pc, #44]	; (10b4c <__libc_init_array+0x4c>)
   10b20:	1b76      	subs	r6, r6, r5
   10b22:	f000 fbef 	bl	11304 <_init>
   10b26:	10b6      	asrs	r6, r6, #2
   10b28:	bf18      	it	ne
   10b2a:	2400      	movne	r4, #0
   10b2c:	d006      	beq.n	10b3c <__libc_init_array+0x3c>
   10b2e:	3401      	adds	r4, #1
   10b30:	f855 3b04 	ldr.w	r3, [r5], #4
   10b34:	4798      	blx	r3
   10b36:	42a6      	cmp	r6, r4
   10b38:	d1f9      	bne.n	10b2e <__libc_init_array+0x2e>
   10b3a:	bd70      	pop	{r4, r5, r6, pc}
   10b3c:	bd70      	pop	{r4, r5, r6, pc}
   10b3e:	bf00      	nop
   10b40:	00011310 	.word	0x00011310
   10b44:	00011310 	.word	0x00011310
   10b48:	00011340 	.word	0x00011340
   10b4c:	00011310 	.word	0x00011310

00010b50 <memcpy>:
   10b50:	4684      	mov	ip, r0
   10b52:	ea41 0300 	orr.w	r3, r1, r0
   10b56:	f013 0303 	ands.w	r3, r3, #3
   10b5a:	d16d      	bne.n	10c38 <memcpy+0xe8>
   10b5c:	3a40      	subs	r2, #64	; 0x40
   10b5e:	d341      	bcc.n	10be4 <memcpy+0x94>
   10b60:	f851 3b04 	ldr.w	r3, [r1], #4
   10b64:	f840 3b04 	str.w	r3, [r0], #4
   10b68:	f851 3b04 	ldr.w	r3, [r1], #4
   10b6c:	f840 3b04 	str.w	r3, [r0], #4
   10b70:	f851 3b04 	ldr.w	r3, [r1], #4
   10b74:	f840 3b04 	str.w	r3, [r0], #4
   10b78:	f851 3b04 	ldr.w	r3, [r1], #4
   10b7c:	f840 3b04 	str.w	r3, [r0], #4
   10b80:	f851 3b04 	ldr.w	r3, [r1], #4
   10b84:	f840 3b04 	str.w	r3, [r0], #4
   10b88:	f851 3b04 	ldr.w	r3, [r1], #4
   10b8c:	f840 3b04 	str.w	r3, [r0], #4
   10b90:	f851 3b04 	ldr.w	r3, [r1], #4
   10b94:	f840 3b04 	str.w	r3, [r0], #4
   10b98:	f851 3b04 	ldr.w	r3, [r1], #4
   10b9c:	f840 3b04 	str.w	r3, [r0], #4
   10ba0:	f851 3b04 	ldr.w	r3, [r1], #4
   10ba4:	f840 3b04 	str.w	r3, [r0], #4
   10ba8:	f851 3b04 	ldr.w	r3, [r1], #4
   10bac:	f840 3b04 	str.w	r3, [r0], #4
   10bb0:	f851 3b04 	ldr.w	r3, [r1], #4
   10bb4:	f840 3b04 	str.w	r3, [r0], #4
   10bb8:	f851 3b04 	ldr.w	r3, [r1], #4
   10bbc:	f840 3b04 	str.w	r3, [r0], #4
   10bc0:	f851 3b04 	ldr.w	r3, [r1], #4
   10bc4:	f840 3b04 	str.w	r3, [r0], #4
   10bc8:	f851 3b04 	ldr.w	r3, [r1], #4
   10bcc:	f840 3b04 	str.w	r3, [r0], #4
   10bd0:	f851 3b04 	ldr.w	r3, [r1], #4
   10bd4:	f840 3b04 	str.w	r3, [r0], #4
   10bd8:	f851 3b04 	ldr.w	r3, [r1], #4
   10bdc:	f840 3b04 	str.w	r3, [r0], #4
   10be0:	3a40      	subs	r2, #64	; 0x40
   10be2:	d2bd      	bcs.n	10b60 <memcpy+0x10>
   10be4:	3230      	adds	r2, #48	; 0x30
   10be6:	d311      	bcc.n	10c0c <memcpy+0xbc>
   10be8:	f851 3b04 	ldr.w	r3, [r1], #4
   10bec:	f840 3b04 	str.w	r3, [r0], #4
   10bf0:	f851 3b04 	ldr.w	r3, [r1], #4
   10bf4:	f840 3b04 	str.w	r3, [r0], #4
   10bf8:	f851 3b04 	ldr.w	r3, [r1], #4
   10bfc:	f840 3b04 	str.w	r3, [r0], #4
   10c00:	f851 3b04 	ldr.w	r3, [r1], #4
   10c04:	f840 3b04 	str.w	r3, [r0], #4
   10c08:	3a10      	subs	r2, #16
   10c0a:	d2ed      	bcs.n	10be8 <memcpy+0x98>
   10c0c:	320c      	adds	r2, #12
   10c0e:	d305      	bcc.n	10c1c <memcpy+0xcc>
   10c10:	f851 3b04 	ldr.w	r3, [r1], #4
   10c14:	f840 3b04 	str.w	r3, [r0], #4
   10c18:	3a04      	subs	r2, #4
   10c1a:	d2f9      	bcs.n	10c10 <memcpy+0xc0>
   10c1c:	3204      	adds	r2, #4
   10c1e:	d008      	beq.n	10c32 <memcpy+0xe2>
   10c20:	07d2      	lsls	r2, r2, #31
   10c22:	bf1c      	itt	ne
   10c24:	f811 3b01 	ldrbne.w	r3, [r1], #1
   10c28:	f800 3b01 	strbne.w	r3, [r0], #1
   10c2c:	d301      	bcc.n	10c32 <memcpy+0xe2>
   10c2e:	880b      	ldrh	r3, [r1, #0]
   10c30:	8003      	strh	r3, [r0, #0]
   10c32:	4660      	mov	r0, ip
   10c34:	4770      	bx	lr
   10c36:	bf00      	nop
   10c38:	2a08      	cmp	r2, #8
   10c3a:	d313      	bcc.n	10c64 <memcpy+0x114>
   10c3c:	078b      	lsls	r3, r1, #30
   10c3e:	d08d      	beq.n	10b5c <memcpy+0xc>
   10c40:	f010 0303 	ands.w	r3, r0, #3
   10c44:	d08a      	beq.n	10b5c <memcpy+0xc>
   10c46:	f1c3 0304 	rsb	r3, r3, #4
   10c4a:	1ad2      	subs	r2, r2, r3
   10c4c:	07db      	lsls	r3, r3, #31
   10c4e:	bf1c      	itt	ne
   10c50:	f811 3b01 	ldrbne.w	r3, [r1], #1
   10c54:	f800 3b01 	strbne.w	r3, [r0], #1
   10c58:	d380      	bcc.n	10b5c <memcpy+0xc>
   10c5a:	f831 3b02 	ldrh.w	r3, [r1], #2
   10c5e:	f820 3b02 	strh.w	r3, [r0], #2
   10c62:	e77b      	b.n	10b5c <memcpy+0xc>
   10c64:	3a04      	subs	r2, #4
   10c66:	d3d9      	bcc.n	10c1c <memcpy+0xcc>
   10c68:	3a01      	subs	r2, #1
   10c6a:	f811 3b01 	ldrb.w	r3, [r1], #1
   10c6e:	f800 3b01 	strb.w	r3, [r0], #1
   10c72:	d2f9      	bcs.n	10c68 <memcpy+0x118>
   10c74:	780b      	ldrb	r3, [r1, #0]
   10c76:	7003      	strb	r3, [r0, #0]
   10c78:	784b      	ldrb	r3, [r1, #1]
   10c7a:	7043      	strb	r3, [r0, #1]
   10c7c:	788b      	ldrb	r3, [r1, #2]
   10c7e:	7083      	strb	r3, [r0, #2]
   10c80:	4660      	mov	r0, ip
   10c82:	4770      	bx	lr

00010c84 <memset>:
   10c84:	b470      	push	{r4, r5, r6}
   10c86:	0786      	lsls	r6, r0, #30
   10c88:	d046      	beq.n	10d18 <memset+0x94>
   10c8a:	1e54      	subs	r4, r2, #1
   10c8c:	2a00      	cmp	r2, #0
   10c8e:	d041      	beq.n	10d14 <memset+0x90>
   10c90:	b2ca      	uxtb	r2, r1
   10c92:	4603      	mov	r3, r0
   10c94:	e002      	b.n	10c9c <memset+0x18>
   10c96:	f114 34ff 	adds.w	r4, r4, #4294967295
   10c9a:	d33b      	bcc.n	10d14 <memset+0x90>
   10c9c:	f803 2b01 	strb.w	r2, [r3], #1
   10ca0:	079d      	lsls	r5, r3, #30
   10ca2:	d1f8      	bne.n	10c96 <memset+0x12>
   10ca4:	2c03      	cmp	r4, #3
   10ca6:	d92e      	bls.n	10d06 <memset+0x82>
   10ca8:	b2cd      	uxtb	r5, r1
   10caa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   10cae:	2c0f      	cmp	r4, #15
   10cb0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   10cb4:	d919      	bls.n	10cea <memset+0x66>
   10cb6:	f103 0210 	add.w	r2, r3, #16
   10cba:	4626      	mov	r6, r4
   10cbc:	3e10      	subs	r6, #16
   10cbe:	2e0f      	cmp	r6, #15
   10cc0:	f842 5c10 	str.w	r5, [r2, #-16]
   10cc4:	f842 5c0c 	str.w	r5, [r2, #-12]
   10cc8:	f842 5c08 	str.w	r5, [r2, #-8]
   10ccc:	f842 5c04 	str.w	r5, [r2, #-4]
   10cd0:	f102 0210 	add.w	r2, r2, #16
   10cd4:	d8f2      	bhi.n	10cbc <memset+0x38>
   10cd6:	f1a4 0210 	sub.w	r2, r4, #16
   10cda:	f022 020f 	bic.w	r2, r2, #15
   10cde:	f004 040f 	and.w	r4, r4, #15
   10ce2:	3210      	adds	r2, #16
   10ce4:	2c03      	cmp	r4, #3
   10ce6:	4413      	add	r3, r2
   10ce8:	d90d      	bls.n	10d06 <memset+0x82>
   10cea:	461e      	mov	r6, r3
   10cec:	4622      	mov	r2, r4
   10cee:	3a04      	subs	r2, #4
   10cf0:	2a03      	cmp	r2, #3
   10cf2:	f846 5b04 	str.w	r5, [r6], #4
   10cf6:	d8fa      	bhi.n	10cee <memset+0x6a>
   10cf8:	1f22      	subs	r2, r4, #4
   10cfa:	f022 0203 	bic.w	r2, r2, #3
   10cfe:	3204      	adds	r2, #4
   10d00:	4413      	add	r3, r2
   10d02:	f004 0403 	and.w	r4, r4, #3
   10d06:	b12c      	cbz	r4, 10d14 <memset+0x90>
   10d08:	b2c9      	uxtb	r1, r1
   10d0a:	441c      	add	r4, r3
   10d0c:	f803 1b01 	strb.w	r1, [r3], #1
   10d10:	429c      	cmp	r4, r3
   10d12:	d1fb      	bne.n	10d0c <memset+0x88>
   10d14:	bc70      	pop	{r4, r5, r6}
   10d16:	4770      	bx	lr
   10d18:	4614      	mov	r4, r2
   10d1a:	4603      	mov	r3, r0
   10d1c:	e7c2      	b.n	10ca4 <memset+0x20>
   10d1e:	bf00      	nop

00010d20 <__register_exitproc>:
   10d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10d24:	4d2c      	ldr	r5, [pc, #176]	; (10dd8 <__register_exitproc+0xb8>)
   10d26:	4606      	mov	r6, r0
   10d28:	6828      	ldr	r0, [r5, #0]
   10d2a:	4698      	mov	r8, r3
   10d2c:	460f      	mov	r7, r1
   10d2e:	4691      	mov	r9, r2
   10d30:	f000 f882 	bl	10e38 <__retarget_lock_acquire_recursive>
   10d34:	4b29      	ldr	r3, [pc, #164]	; (10ddc <__register_exitproc+0xbc>)
   10d36:	681c      	ldr	r4, [r3, #0]
   10d38:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   10d3c:	2b00      	cmp	r3, #0
   10d3e:	d03e      	beq.n	10dbe <__register_exitproc+0x9e>
   10d40:	685a      	ldr	r2, [r3, #4]
   10d42:	2a1f      	cmp	r2, #31
   10d44:	dc1c      	bgt.n	10d80 <__register_exitproc+0x60>
   10d46:	f102 0e01 	add.w	lr, r2, #1
   10d4a:	b176      	cbz	r6, 10d6a <__register_exitproc+0x4a>
   10d4c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   10d50:	2401      	movs	r4, #1
   10d52:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   10d56:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   10d5a:	4094      	lsls	r4, r2
   10d5c:	4320      	orrs	r0, r4
   10d5e:	2e02      	cmp	r6, #2
   10d60:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   10d64:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   10d68:	d023      	beq.n	10db2 <__register_exitproc+0x92>
   10d6a:	3202      	adds	r2, #2
   10d6c:	f8c3 e004 	str.w	lr, [r3, #4]
   10d70:	6828      	ldr	r0, [r5, #0]
   10d72:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   10d76:	f000 f861 	bl	10e3c <__retarget_lock_release_recursive>
   10d7a:	2000      	movs	r0, #0
   10d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10d80:	4b17      	ldr	r3, [pc, #92]	; (10de0 <__register_exitproc+0xc0>)
   10d82:	b30b      	cbz	r3, 10dc8 <__register_exitproc+0xa8>
   10d84:	f44f 70c8 	mov.w	r0, #400	; 0x190
   10d88:	f7ff f830 	bl	fdec <malloc>
   10d8c:	4603      	mov	r3, r0
   10d8e:	b1d8      	cbz	r0, 10dc8 <__register_exitproc+0xa8>
   10d90:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   10d94:	6002      	str	r2, [r0, #0]
   10d96:	2100      	movs	r1, #0
   10d98:	6041      	str	r1, [r0, #4]
   10d9a:	460a      	mov	r2, r1
   10d9c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   10da0:	f04f 0e01 	mov.w	lr, #1
   10da4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   10da8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   10dac:	2e00      	cmp	r6, #0
   10dae:	d0dc      	beq.n	10d6a <__register_exitproc+0x4a>
   10db0:	e7cc      	b.n	10d4c <__register_exitproc+0x2c>
   10db2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   10db6:	430c      	orrs	r4, r1
   10db8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   10dbc:	e7d5      	b.n	10d6a <__register_exitproc+0x4a>
   10dbe:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   10dc2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   10dc6:	e7bb      	b.n	10d40 <__register_exitproc+0x20>
   10dc8:	6828      	ldr	r0, [r5, #0]
   10dca:	f000 f837 	bl	10e3c <__retarget_lock_release_recursive>
   10dce:	f04f 30ff 	mov.w	r0, #4294967295
   10dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10dd6:	bf00      	nop
   10dd8:	20000608 	.word	0x20000608
   10ddc:	00011300 	.word	0x00011300
   10de0:	0000fded 	.word	0x0000fded

00010de4 <register_fini>:
   10de4:	4b02      	ldr	r3, [pc, #8]	; (10df0 <register_fini+0xc>)
   10de6:	b113      	cbz	r3, 10dee <register_fini+0xa>
   10de8:	4802      	ldr	r0, [pc, #8]	; (10df4 <register_fini+0x10>)
   10dea:	f000 b805 	b.w	10df8 <atexit>
   10dee:	4770      	bx	lr
   10df0:	00000000 	.word	0x00000000
   10df4:	00010e05 	.word	0x00010e05

00010df8 <atexit>:
   10df8:	2300      	movs	r3, #0
   10dfa:	4601      	mov	r1, r0
   10dfc:	461a      	mov	r2, r3
   10dfe:	4618      	mov	r0, r3
   10e00:	f7ff bf8e 	b.w	10d20 <__register_exitproc>

00010e04 <__libc_fini_array>:
   10e04:	b538      	push	{r3, r4, r5, lr}
   10e06:	4c0a      	ldr	r4, [pc, #40]	; (10e30 <__libc_fini_array+0x2c>)
   10e08:	4d0a      	ldr	r5, [pc, #40]	; (10e34 <__libc_fini_array+0x30>)
   10e0a:	1b64      	subs	r4, r4, r5
   10e0c:	10a4      	asrs	r4, r4, #2
   10e0e:	d00a      	beq.n	10e26 <__libc_fini_array+0x22>
   10e10:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   10e14:	3b01      	subs	r3, #1
   10e16:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10e1a:	3c01      	subs	r4, #1
   10e1c:	f855 3904 	ldr.w	r3, [r5], #-4
   10e20:	4798      	blx	r3
   10e22:	2c00      	cmp	r4, #0
   10e24:	d1f9      	bne.n	10e1a <__libc_fini_array+0x16>
   10e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10e2a:	f000 ba89 	b.w	11340 <_fini>
   10e2e:	bf00      	nop
   10e30:	00011350 	.word	0x00011350
   10e34:	0001134c 	.word	0x0001134c

00010e38 <__retarget_lock_acquire_recursive>:
   10e38:	4770      	bx	lr
   10e3a:	bf00      	nop

00010e3c <__retarget_lock_release_recursive>:
   10e3c:	4770      	bx	lr
   10e3e:	bf00      	nop
   10e40:	682f2e2e 	.word	0x682f2e2e
   10e44:	702f6c70 	.word	0x702f6c70
   10e48:	2f74726f 	.word	0x2f74726f
   10e4c:	5f6c7068 	.word	0x5f6c7068
   10e50:	6f697067 	.word	0x6f697067
   10e54:	7361625f 	.word	0x7361625f
   10e58:	00682e65 	.word	0x00682e65
   10e5c:	682f2e2e 	.word	0x682f2e2e
   10e60:	692f6c61 	.word	0x692f6c61
   10e64:	756c636e 	.word	0x756c636e
   10e68:	682f6564 	.word	0x682f6564
   10e6c:	775f6c61 	.word	0x775f6c61
   10e70:	682e7464 	.word	0x682e7464
   10e74:	00000000 	.word	0x00000000
   10e78:	682f2e2e 	.word	0x682f2e2e
   10e7c:	732f6c61 	.word	0x732f6c61
   10e80:	682f6372 	.word	0x682f6372
   10e84:	635f6c61 	.word	0x635f6c61
   10e88:	6e656c61 	.word	0x6e656c61
   10e8c:	2e726164 	.word	0x2e726164
   10e90:	00000063 	.word	0x00000063
   10e94:	682f2e2e 	.word	0x682f2e2e
   10e98:	732f6c61 	.word	0x732f6c61
   10e9c:	682f6372 	.word	0x682f6372
   10ea0:	635f6c61 	.word	0x635f6c61
   10ea4:	615f6e61 	.word	0x615f6e61
   10ea8:	636e7973 	.word	0x636e7973
   10eac:	0000632e 	.word	0x0000632e
   10eb0:	682f2e2e 	.word	0x682f2e2e
   10eb4:	732f6c61 	.word	0x732f6c61
   10eb8:	682f6372 	.word	0x682f6372
   10ebc:	635f6c61 	.word	0x635f6c61
   10ec0:	735f6372 	.word	0x735f6372
   10ec4:	2e636e79 	.word	0x2e636e79
   10ec8:	00000063 	.word	0x00000063
   10ecc:	682f2e2e 	.word	0x682f2e2e
   10ed0:	732f6c61 	.word	0x732f6c61
   10ed4:	682f6372 	.word	0x682f6372
   10ed8:	695f6c61 	.word	0x695f6c61
   10edc:	6d5f6332 	.word	0x6d5f6332
   10ee0:	7973615f 	.word	0x7973615f
   10ee4:	632e636e 	.word	0x632e636e
   10ee8:	00000000 	.word	0x00000000
   10eec:	682f2e2e 	.word	0x682f2e2e
   10ef0:	732f6c61 	.word	0x732f6c61
   10ef4:	682f6372 	.word	0x682f6372
   10ef8:	695f6c61 	.word	0x695f6c61
   10efc:	6d5f6332 	.word	0x6d5f6332
   10f00:	6e79735f 	.word	0x6e79735f
   10f04:	00632e63 	.word	0x00632e63
   10f08:	682f2e2e 	.word	0x682f2e2e
   10f0c:	732f6c61 	.word	0x732f6c61
   10f10:	682f6372 	.word	0x682f6372
   10f14:	705f6c61 	.word	0x705f6c61
   10f18:	632e6d77 	.word	0x632e6d77
   10f1c:	00000000 	.word	0x00000000
   10f20:	682f2e2e 	.word	0x682f2e2e
   10f24:	732f6c61 	.word	0x732f6c61
   10f28:	682f6372 	.word	0x682f6372
   10f2c:	715f6c61 	.word	0x715f6c61
   10f30:	5f697073 	.word	0x5f697073
   10f34:	636e7973 	.word	0x636e7973
   10f38:	0000632e 	.word	0x0000632e
   10f3c:	682f2e2e 	.word	0x682f2e2e
   10f40:	732f6c61 	.word	0x732f6c61
   10f44:	682f6372 	.word	0x682f6372
   10f48:	735f6c61 	.word	0x735f6c61
   10f4c:	6d5f6970 	.word	0x6d5f6970
   10f50:	6e79735f 	.word	0x6e79735f
   10f54:	00632e63 	.word	0x00632e63
   10f58:	682f2e2e 	.word	0x682f2e2e
   10f5c:	732f6c61 	.word	0x732f6c61
   10f60:	682f6372 	.word	0x682f6372
   10f64:	745f6c61 	.word	0x745f6c61
   10f68:	72656d69 	.word	0x72656d69
   10f6c:	0000632e 	.word	0x0000632e
   10f70:	682f2e2e 	.word	0x682f2e2e
   10f74:	752f6c61 	.word	0x752f6c61
   10f78:	736c6974 	.word	0x736c6974
   10f7c:	6372732f 	.word	0x6372732f
   10f80:	6974752f 	.word	0x6974752f
   10f84:	6c5f736c 	.word	0x6c5f736c
   10f88:	2e747369 	.word	0x2e747369
   10f8c:	00000063 	.word	0x00000063

00010f90 <_map>:
   10f90:	00000000 00000040 00000001 00000021     ....@.......!...
   10fa0:	00000003 00000003 00000004 00000004     ................
   10fb0:	00000005 00000005 00000006 00000056     ............V...
   10fc0:	00000007 00000057 00000008 00000028     ....W.......(...
   10fd0:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   10fe0:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00010ff0 <user_mux_confs>:
   10ff0:	00020100 00000000 00000000 00000000     ................
	...

00011034 <channel_confs>:
   11034:	0660065f 00000000 00000000 00000000     _.`.............
	...

00011074 <interrupt_cfg>:
	...
   110f4:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   11104:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   11114:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   11124:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   11134:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   11144:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   11154:	43000400 43000800 43000c00              ...C...C...C

00011160 <sercomspi_regs>:
   11160:	0020000c 00020000 00000000 01ff0001     .. .............
   11170:	30000c04 02000000 00000000 ff00ef00     ...0............
   11180:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   11190:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   111a0:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   111b0:	43001400 43001800                       ...C...C

000111b8 <_usb_ep_cfgs>:
   111b8:	20000c54 00000000 00000040 20000c94     T.. ....@...... 
   111c8:	20000cd4 00400040 20000d14 20000d54     ... @.@.... T.. 
   111d8:	00400040 20000d94 20000dd4 00400040     @.@.... ... @.@.
   111e8:	20000e14 20000e54 00400040 00000804     ... T.. @.@.....
   111f8:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   11208:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   11218:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   11228:	7361625f 00682e65                       _base.h.

00011230 <n25q256a_interface>:
   11230:	0000c10d 0000c1b1 0000c2c1 0000c479     ............y...
   11240:	0000c509 752f2e2e 642f6273 63697665     ....../usb/devic
   11250:	73752f65 2e636462 00000063              e/usbdc.c...

0001125c <defaultParameters>:
   1125c:	00000040                                @...

00011260 <defaultPreferences>:
   11260:	000000fa 00000032                       ....2...

00011268 <_ZTV9CDC_Class>:
	...
   11270:	0000f5b1 0000f691 0000f205 0000f579     ............y...
   11280:	0000f729 0000f53d 0000f421 0000f471     )...=...!...q...
   11290:	0000f599 0000f5f9                       ........

00011298 <_ZTV6Stream>:
	...
   112a0:	0000fe01 0000f7bd 0000f205 0000f219     ................
   112b0:	0000fe01 0000fe01 0000fe01 2e257830     ............0x%.
   112c0:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   112d0:	0066766f                                ovf.

000112d4 <_ZTV5Print>:
	...
   112dc:	0000fe01 0000f7bd 0000f205 0000f219     ................
   112ec:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   112fc:	00632e6f                                o.c.

00011300 <_global_impure_ptr>:
   11300:	200001e0                                ... 

00011304 <_init>:
   11304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11306:	bf00      	nop
   11308:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1130a:	bc08      	pop	{r3}
   1130c:	469e      	mov	lr, r3
   1130e:	4770      	bx	lr

00011310 <__init_array_start>:
   11310:	00010de5 	.word	0x00010de5

00011314 <__frame_dummy_init_array_entry>:
   11314:	00000289 00000409 000006bd 00000a1d     ................
   11324:	0000e589 0000ee1d 0000f1cd 0000f7a9     ................
   11334:	0000fdd9 0000fec9 00010189              ............

00011340 <_fini>:
   11340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11342:	bf00      	nop
   11344:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11346:	bc08      	pop	{r3}
   11348:	469e      	mov	lr, r3
   1134a:	4770      	bx	lr

0001134c <__fini_array_start>:
   1134c:	00000265 	.word	0x00000265
