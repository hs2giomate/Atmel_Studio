
ECS_Box_Rev_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038d4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000014  20000000  000038d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020014  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020014  2**0
                  CONTENTS
  4 .bss          00000478  20000014  000038e8  00020014  2**2
                  ALLOC
  5 .stack        00010004  2000048c  00003d60  00020014  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
  8 .debug_info   00034f00  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000383f  00000000  00000000  00054f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00015fb5  00000000  00000000  000587da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d80  00000000  00000000  0006e78f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000014a0  00000000  00000000  0006f50f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034313  00000000  00000000  000709af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00015080  00000000  00000000  000a4cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011edf1  00000000  00000000  000b9d42  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002460  00000000  00000000  001d8b34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 04 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     ... ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	41 1a 00 00 4d 1a 00 00 59 1a 00 00 65 1a 00 00     A...M...Y...e...
      8c:	71 1a 00 00 7d 1a 00 00 89 1a 00 00 95 1a 00 00     q...}...........
      9c:	a1 1a 00 00 dd 02 00 00 dd 02 00 00 ad 1a 00 00     ................
      ac:	b9 1a 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      bc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      cc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	35 1b 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     5...............
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 65 26 00 00 79 26 00 00 8d 26 00 00     ....e&..y&...&..
     154:	a1 26 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     .&..............
     164:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     174:	dd 02 00 00 dd 02 00 00 11 17 00 00 4d 36 00 00     ............M6..
     184:	59 36 00 00 65 36 00 00 71 36 00 00 dd 02 00 00     Y6..e6..q6......
     194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1f4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     204:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     214:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     224:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000014 	.word	0x20000014
     280:	00000000 	.word	0x00000000
     284:	000038d4 	.word	0x000038d4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000038d4 	.word	0x000038d4
     2c4:	20000018 	.word	0x20000018
     2c8:	000038d4 	.word	0x000038d4
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	00000d0d 	.word	0x00000d0d

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b1c      	ldr	r3, [pc, #112]	; (354 <Reset_Handler+0x74>)
     2e4:	4a1c      	ldr	r2, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d010      	beq.n	30c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	4a19      	ldr	r2, [pc, #100]	; (354 <Reset_Handler+0x74>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d20c      	bcs.n	30c <Reset_Handler+0x2c>
     2f2:	3b01      	subs	r3, #1
     2f4:	1a9b      	subs	r3, r3, r2
     2f6:	f023 0303 	bic.w	r3, r3, #3
     2fa:	3304      	adds	r3, #4
     2fc:	4413      	add	r3, r2
     2fe:	4916      	ldr	r1, [pc, #88]	; (358 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     300:	f851 0b04 	ldr.w	r0, [r1], #4
     304:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     308:	429a      	cmp	r2, r3
     30a:	d1f9      	bne.n	300 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     30c:	4b14      	ldr	r3, [pc, #80]	; (360 <Reset_Handler+0x80>)
     30e:	4a15      	ldr	r2, [pc, #84]	; (364 <Reset_Handler+0x84>)
     310:	429a      	cmp	r2, r3
     312:	d20a      	bcs.n	32a <Reset_Handler+0x4a>
     314:	3b01      	subs	r3, #1
     316:	1a9b      	subs	r3, r3, r2
     318:	f023 0303 	bic.w	r3, r3, #3
     31c:	3304      	adds	r3, #4
     31e:	4413      	add	r3, r2
                *pDest++ = 0;
     320:	2100      	movs	r1, #0
     322:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     326:	4293      	cmp	r3, r2
     328:	d1fb      	bne.n	322 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32a:	4b0f      	ldr	r3, [pc, #60]	; (368 <Reset_Handler+0x88>)
     32c:	4a0f      	ldr	r2, [pc, #60]	; (36c <Reset_Handler+0x8c>)
     32e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     332:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     334:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     338:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     33c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     344:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     348:	4b09      	ldr	r3, [pc, #36]	; (370 <Reset_Handler+0x90>)
     34a:	4798      	blx	r3
        main();
     34c:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     34e:	4798      	blx	r3
     350:	e7fe      	b.n	350 <Reset_Handler+0x70>
     352:	bf00      	nop
     354:	20000000 	.word	0x20000000
     358:	000038d4 	.word	0x000038d4
     35c:	20000014 	.word	0x20000014
     360:	2000048c 	.word	0x2000048c
     364:	20000014 	.word	0x20000014
     368:	e000ed00 	.word	0xe000ed00
     36c:	00000000 	.word	0x00000000
     370:	00003689 	.word	0x00003689
     374:	0000367d 	.word	0x0000367d

00000378 <EXTERNAL_IRQ_0_init>:
struct i2c_m_async_desc I2C_CCu;

struct i2c_m_sync_desc FANs_I2C;

void EXTERNAL_IRQ_0_init(void)
{
     378:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     37a:	2040      	movs	r0, #64	; 0x40
     37c:	4baf      	ldr	r3, [pc, #700]	; (63c <EXTERNAL_IRQ_0_init+0x2c4>)
     37e:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     382:	4aaf      	ldr	r2, [pc, #700]	; (640 <EXTERNAL_IRQ_0_init+0x2c8>)
     384:	6953      	ldr	r3, [r2, #20]
     386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     38a:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     38c:	4bad      	ldr	r3, [pc, #692]	; (644 <EXTERNAL_IRQ_0_init+0x2cc>)
     38e:	2208      	movs	r2, #8
     390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     394:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     398:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     39c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     3a0:	4aa9      	ldr	r2, [pc, #676]	; (648 <EXTERNAL_IRQ_0_init+0x2d0>)
     3a2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3a6:	f893 10c3 	ldrb.w	r1, [r3, #195]	; 0xc3
     3aa:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     3ae:	f883 10c3 	strb.w	r1, [r3, #195]	; 0xc3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3b2:	f893 10c3 	ldrb.w	r1, [r3, #195]	; 0xc3
	tmp &= ~PORT_PINCFG_PMUXEN;
     3b6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ba:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3be:	f883 10c3 	strb.w	r1, [r3, #195]	; 0xc3
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3c2:	f893 10b1 	ldrb.w	r1, [r3, #177]	; 0xb1
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3c6:	f001 010f 	and.w	r1, r1, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ca:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3ce:	2110      	movs	r1, #16
     3d0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3d4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     3d8:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     3dc:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     3e0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3e4:	f893 10c4 	ldrb.w	r1, [r3, #196]	; 0xc4
     3e8:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     3ec:	f883 10c4 	strb.w	r1, [r3, #196]	; 0xc4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3f0:	f893 10c4 	ldrb.w	r1, [r3, #196]	; 0xc4
	tmp &= ~PORT_PINCFG_PMUXEN;
     3f4:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3f8:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3fc:	f883 10c4 	strb.w	r1, [r3, #196]	; 0xc4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     400:	f893 10b2 	ldrb.w	r1, [r3, #178]	; 0xb2
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     404:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     408:	f883 10b2 	strb.w	r1, [r3, #178]	; 0xb2
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     40c:	2120      	movs	r1, #32
     40e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     412:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     416:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     41a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     41e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     422:	f893 10c5 	ldrb.w	r1, [r3, #197]	; 0xc5
     426:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     42a:	f883 10c5 	strb.w	r1, [r3, #197]	; 0xc5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     42e:	f893 10c5 	ldrb.w	r1, [r3, #197]	; 0xc5
	tmp &= ~PORT_PINCFG_PMUXEN;
     432:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     436:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     43a:	f883 10c5 	strb.w	r1, [r3, #197]	; 0xc5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     43e:	f893 10b2 	ldrb.w	r1, [r3, #178]	; 0xb2
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     442:	f001 010f 	and.w	r1, r1, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     446:	f883 10b2 	strb.w	r1, [r3, #178]	; 0xb2
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     44a:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     44e:	497f      	ldr	r1, [pc, #508]	; (64c <EXTERNAL_IRQ_0_init+0x2d4>)
     450:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     454:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     458:	f893 10c6 	ldrb.w	r1, [r3, #198]	; 0xc6
     45c:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     460:	f883 10c6 	strb.w	r1, [r3, #198]	; 0xc6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     464:	f893 10c6 	ldrb.w	r1, [r3, #198]	; 0xc6
	tmp &= ~PORT_PINCFG_PMUXEN;
     468:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     46c:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     470:	f883 10c6 	strb.w	r1, [r3, #198]	; 0xc6
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     474:	f893 10b3 	ldrb.w	r1, [r3, #179]	; 0xb3
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     478:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     47c:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     480:	2180      	movs	r1, #128	; 0x80
     482:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     486:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     48a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     48e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     492:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     496:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     49a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     49e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4a2:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     4a6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4aa:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ae:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4b2:	f893 10b3 	ldrb.w	r1, [r3, #179]	; 0xb3
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4b6:	f001 010f 	and.w	r1, r1, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ba:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4be:	f44f 7180 	mov.w	r1, #256	; 0x100
     4c2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4c6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     4ca:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     4ce:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     4d2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4d6:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
     4da:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     4de:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4e2:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     4e6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4ea:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ee:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4f2:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4f6:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4fa:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4fe:	f44f 7100 	mov.w	r1, #512	; 0x200
     502:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     506:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     50a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     50e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     512:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     516:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
     51a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     51e:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     522:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     526:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     52a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     52e:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     532:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     536:	f001 010f 	and.w	r1, r1, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     53a:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     53e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     542:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     546:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     54a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     54e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     552:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     556:	f893 10ca 	ldrb.w	r1, [r3, #202]	; 0xca
     55a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     55e:	f883 10ca 	strb.w	r1, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     562:	f893 10ca 	ldrb.w	r1, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     566:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     56a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     56e:	f883 10ca 	strb.w	r1, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     572:	f893 10b5 	ldrb.w	r1, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     576:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     57a:	f883 10b5 	strb.w	r1, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     57e:	f44f 6100 	mov.w	r1, #2048	; 0x800
     582:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     586:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     58a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     58e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     592:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     596:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     59a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     59e:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5a2:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     5a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5aa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ae:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5b2:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5b6:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ba:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     5c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5c6:	f5a1 6100 	sub.w	r1, r1, #2048	; 0x800
     5ca:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     5ce:	4a20      	ldr	r2, [pc, #128]	; (650 <EXTERNAL_IRQ_0_init+0x2d8>)
     5d0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5d4:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
     5d8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5dc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5e0:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
	tmp &= ~PORT_PINCFG_PMUXEN;
     5e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5e8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ec:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5f0:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5f4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5f8:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
     600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     604:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     608:	4a12      	ldr	r2, [pc, #72]	; (654 <EXTERNAL_IRQ_0_init+0x2dc>)
     60a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     60e:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
     612:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     616:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     61a:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
	tmp &= ~PORT_PINCFG_PMUXEN;
     61e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     622:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     626:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     62a:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     62e:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     632:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(iAmmcInt2, PINMUX_PB29A_EIC_EXTINT15);

	ext_irq_init();
     636:	4b08      	ldr	r3, [pc, #32]	; (658 <EXTERNAL_IRQ_0_init+0x2e0>)
     638:	4798      	blx	r3
     63a:	bd08      	pop	{r3, pc}
     63c:	40001c00 	.word	0x40001c00
     640:	40000800 	.word	0x40000800
     644:	41008000 	.word	0x41008000
     648:	c0020000 	.word	0xc0020000
     64c:	40020040 	.word	0x40020040
     650:	c0021000 	.word	0xc0021000
     654:	c0022000 	.word	0xc0022000
     658:	00001069 	.word	0x00001069

0000065c <Flash_Mem_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     65c:	4b28      	ldr	r3, [pc, #160]	; (700 <Flash_Mem_SPI_PORT_init+0xa4>)
     65e:	2210      	movs	r2, #16
     660:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     662:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     664:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     668:	629a      	str	r2, [r3, #40]	; 0x28
     66a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     66e:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     670:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     674:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     678:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     67c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     680:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     684:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     688:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     68c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     690:	2220      	movs	r2, #32
     692:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     694:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     696:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     69a:	629a      	str	r2, [r3, #40]	; 0x28
     69c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     69e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     6a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6a6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6ae:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6b2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6b6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6ba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6be:	2240      	movs	r2, #64	; 0x40
     6c0:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6c2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     6c6:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     6ca:	629a      	str	r2, [r3, #40]	; 0x28
     6cc:	4a0d      	ldr	r2, [pc, #52]	; (704 <Flash_Mem_SPI_PORT_init+0xa8>)
     6ce:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6d0:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     6d4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     6d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6dc:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     6e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6e4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6ec:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6f0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6f4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6f8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     6fc:	4770      	bx	lr
     6fe:	bf00      	nop
     700:	41008000 	.word	0x41008000
     704:	c0020000 	.word	0xc0020000

00000708 <Flash_Mem_SPI_CLOCK_init>:
     708:	4b06      	ldr	r3, [pc, #24]	; (724 <Flash_Mem_SPI_CLOCK_init+0x1c>)
     70a:	2240      	movs	r2, #64	; 0x40
     70c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     710:	2243      	movs	r2, #67	; 0x43
     712:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     716:	4a04      	ldr	r2, [pc, #16]	; (728 <Flash_Mem_SPI_CLOCK_init+0x20>)
     718:	6953      	ldr	r3, [r2, #20]
     71a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     71e:	6153      	str	r3, [r2, #20]
     720:	4770      	bx	lr
     722:	bf00      	nop
     724:	40001c00 	.word	0x40001c00
     728:	40000800 	.word	0x40000800

0000072c <Flash_Mem_SPI_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void Flash_Mem_SPI_init(void)
{
     72c:	b508      	push	{r3, lr}
	Flash_Mem_SPI_CLOCK_init();
     72e:	4b04      	ldr	r3, [pc, #16]	; (740 <Flash_Mem_SPI_init+0x14>)
     730:	4798      	blx	r3
	spi_m_sync_init(&Flash_Mem_SPI, SERCOM0);
     732:	4904      	ldr	r1, [pc, #16]	; (744 <Flash_Mem_SPI_init+0x18>)
     734:	4804      	ldr	r0, [pc, #16]	; (748 <Flash_Mem_SPI_init+0x1c>)
     736:	4b05      	ldr	r3, [pc, #20]	; (74c <Flash_Mem_SPI_init+0x20>)
     738:	4798      	blx	r3
	Flash_Mem_SPI_PORT_init();
     73a:	4b05      	ldr	r3, [pc, #20]	; (750 <Flash_Mem_SPI_init+0x24>)
     73c:	4798      	blx	r3
     73e:	bd08      	pop	{r3, pc}
     740:	00000709 	.word	0x00000709
     744:	40003000 	.word	0x40003000
     748:	200003e4 	.word	0x200003e4
     74c:	00001239 	.word	0x00001239
     750:	0000065d 	.word	0x0000065d

00000754 <Fvx_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     754:	4b16      	ldr	r3, [pc, #88]	; (7b0 <Fvx_I2C_PORT_init+0x5c>)
     756:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
     75a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     75e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     762:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     766:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     76a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     76e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     772:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     776:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     77a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     77e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     782:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
     786:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     78a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     78e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     792:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     796:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     79a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     79e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7a2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     7a6:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     7ae:	4770      	bx	lr
     7b0:	41008000 	.word	0x41008000

000007b4 <Fvx_I2C_CLOCK_init>:
     7b4:	4b06      	ldr	r3, [pc, #24]	; (7d0 <Fvx_I2C_CLOCK_init+0x1c>)
     7b6:	2240      	movs	r2, #64	; 0x40
     7b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     7bc:	2243      	movs	r2, #67	; 0x43
     7be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     7c2:	4a04      	ldr	r2, [pc, #16]	; (7d4 <Fvx_I2C_CLOCK_init+0x20>)
     7c4:	6953      	ldr	r3, [r2, #20]
     7c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     7ca:	6153      	str	r3, [r2, #20]
     7cc:	4770      	bx	lr
     7ce:	bf00      	nop
     7d0:	40001c00 	.word	0x40001c00
     7d4:	40000800 	.word	0x40000800

000007d8 <Fvx_I2C_init>:

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
}

void Fvx_I2C_init(void)
{
     7d8:	b508      	push	{r3, lr}
	Fvx_I2C_CLOCK_init();
     7da:	4b04      	ldr	r3, [pc, #16]	; (7ec <Fvx_I2C_init+0x14>)
     7dc:	4798      	blx	r3
	i2c_m_sync_init(&Fvx_I2C, SERCOM1);
     7de:	4904      	ldr	r1, [pc, #16]	; (7f0 <Fvx_I2C_init+0x18>)
     7e0:	4804      	ldr	r0, [pc, #16]	; (7f4 <Fvx_I2C_init+0x1c>)
     7e2:	4b05      	ldr	r3, [pc, #20]	; (7f8 <Fvx_I2C_init+0x20>)
     7e4:	4798      	blx	r3
	Fvx_I2C_PORT_init();
     7e6:	4b05      	ldr	r3, [pc, #20]	; (7fc <Fvx_I2C_init+0x24>)
     7e8:	4798      	blx	r3
     7ea:	bd08      	pop	{r3, pc}
     7ec:	000007b5 	.word	0x000007b5
     7f0:	40003400 	.word	0x40003400
     7f4:	200003a4 	.word	0x200003a4
     7f8:	000011f9 	.word	0x000011f9
     7fc:	00000755 	.word	0x00000755

00000800 <Heater_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     800:	4b16      	ldr	r3, [pc, #88]	; (85c <Heater_I2C_PORT_init+0x5c>)
     802:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     806:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     80a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     80e:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     812:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     816:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     81a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     81e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     822:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     826:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     82a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     82e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     832:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     836:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     83a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     83e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     842:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     846:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     84a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     84e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     852:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
     85a:	4770      	bx	lr
     85c:	41008000 	.word	0x41008000

00000860 <Heater_I2C_CLOCK_init>:
     860:	4b06      	ldr	r3, [pc, #24]	; (87c <Heater_I2C_CLOCK_init+0x1c>)
     862:	2240      	movs	r2, #64	; 0x40
     864:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     868:	2243      	movs	r2, #67	; 0x43
     86a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     86e:	4a04      	ldr	r2, [pc, #16]	; (880 <Heater_I2C_CLOCK_init+0x20>)
     870:	6993      	ldr	r3, [r2, #24]
     872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     876:	6193      	str	r3, [r2, #24]
     878:	4770      	bx	lr
     87a:	bf00      	nop
     87c:	40001c00 	.word	0x40001c00
     880:	40000800 	.word	0x40000800

00000884 <Heater_I2C_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void Heater_I2C_init(void)
{
     884:	b508      	push	{r3, lr}
	Heater_I2C_CLOCK_init();
     886:	4b04      	ldr	r3, [pc, #16]	; (898 <Heater_I2C_init+0x14>)
     888:	4798      	blx	r3
	i2c_m_sync_init(&Heater_I2C, SERCOM2);
     88a:	4904      	ldr	r1, [pc, #16]	; (89c <Heater_I2C_init+0x18>)
     88c:	4804      	ldr	r0, [pc, #16]	; (8a0 <Heater_I2C_init+0x1c>)
     88e:	4b05      	ldr	r3, [pc, #20]	; (8a4 <Heater_I2C_init+0x20>)
     890:	4798      	blx	r3
	Heater_I2C_PORT_init();
     892:	4b05      	ldr	r3, [pc, #20]	; (8a8 <Heater_I2C_init+0x24>)
     894:	4798      	blx	r3
     896:	bd08      	pop	{r3, pc}
     898:	00000861 	.word	0x00000861
     89c:	41012000 	.word	0x41012000
     8a0:	200003c4 	.word	0x200003c4
     8a4:	000011f9 	.word	0x000011f9
     8a8:	00000801 	.word	0x00000801

000008ac <SPI_Alc_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8ac:	4b2c      	ldr	r3, [pc, #176]	; (960 <SPI_Alc_PORT_init+0xb4>)
     8ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     8b2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8b6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     8be:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     8c2:	4a28      	ldr	r2, [pc, #160]	; (964 <SPI_Alc_PORT_init+0xb8>)
     8c4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8c8:	f893 2157 	ldrb.w	r2, [r3, #343]	; 0x157
	tmp &= ~PORT_PINCFG_PMUXEN;
     8cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8d0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8d4:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8d8:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     8dc:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     8e0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8e4:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     8ec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8f0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8f4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     8f8:	4a1b      	ldr	r2, [pc, #108]	; (968 <SPI_Alc_PORT_init+0xbc>)
     8fa:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8fe:	f893 2156 	ldrb.w	r2, [r3, #342]	; 0x156
	tmp &= ~PORT_PINCFG_PMUXEN;
     902:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     906:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     90a:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     90e:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     912:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     916:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     91a:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     91e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     922:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     924:	4a11      	ldr	r2, [pc, #68]	; (96c <SPI_Alc_PORT_init+0xc0>)
     926:	629a      	str	r2, [r3, #40]	; 0x28
     928:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     92c:	3204      	adds	r2, #4
     92e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     930:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
     934:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     938:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     93c:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     940:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     944:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     948:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     94c:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     950:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     954:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
     95c:	4770      	bx	lr
     95e:	bf00      	nop
     960:	41008000 	.word	0x41008000
     964:	c0000080 	.word	0xc0000080
     968:	c0000040 	.word	0xc0000040
     96c:	40020000 	.word	0x40020000

00000970 <SPI_Alc_CLOCK_init>:
     970:	4b06      	ldr	r3, [pc, #24]	; (98c <SPI_Alc_CLOCK_init+0x1c>)
     972:	2240      	movs	r2, #64	; 0x40
     974:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     978:	2243      	movs	r2, #67	; 0x43
     97a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     97e:	4a04      	ldr	r2, [pc, #16]	; (990 <SPI_Alc_CLOCK_init+0x20>)
     980:	6993      	ldr	r3, [r2, #24]
     982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     986:	6193      	str	r3, [r2, #24]
     988:	4770      	bx	lr
     98a:	bf00      	nop
     98c:	40001c00 	.word	0x40001c00
     990:	40000800 	.word	0x40000800

00000994 <SPI_Alc_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void SPI_Alc_init(void)
{
     994:	b508      	push	{r3, lr}
	SPI_Alc_CLOCK_init();
     996:	4b04      	ldr	r3, [pc, #16]	; (9a8 <SPI_Alc_init+0x14>)
     998:	4798      	blx	r3
	spi_m_sync_init(&SPI_Alc, SERCOM3);
     99a:	4904      	ldr	r1, [pc, #16]	; (9ac <SPI_Alc_init+0x18>)
     99c:	4804      	ldr	r0, [pc, #16]	; (9b0 <SPI_Alc_init+0x1c>)
     99e:	4b05      	ldr	r3, [pc, #20]	; (9b4 <SPI_Alc_init+0x20>)
     9a0:	4798      	blx	r3
	SPI_Alc_PORT_init();
     9a2:	4b05      	ldr	r3, [pc, #20]	; (9b8 <SPI_Alc_init+0x24>)
     9a4:	4798      	blx	r3
     9a6:	bd08      	pop	{r3, pc}
     9a8:	00000971 	.word	0x00000971
     9ac:	41014000 	.word	0x41014000
     9b0:	20000364 	.word	0x20000364
     9b4:	00001239 	.word	0x00001239
     9b8:	000008ad 	.word	0x000008ad

000009bc <Misc_Inc_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     9bc:	4b16      	ldr	r3, [pc, #88]	; (a18 <Misc_Inc_I2C_PORT_init+0x5c>)
     9be:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
     9c2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     9c6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9ca:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
	tmp &= ~PORT_PINCFG_PMUXEN;
     9ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9d2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9da:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     9de:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     9e2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9e6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     9ea:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
     9ee:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     9f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9f6:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
	tmp &= ~PORT_PINCFG_PMUXEN;
     9fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9fe:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a06:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a0a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a0e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a12:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
     a16:	4770      	bx	lr
     a18:	41008000 	.word	0x41008000

00000a1c <Misc_Inc_I2C_CLOCK_init>:
     a1c:	4b06      	ldr	r3, [pc, #24]	; (a38 <Misc_Inc_I2C_CLOCK_init+0x1c>)
     a1e:	2240      	movs	r2, #64	; 0x40
     a20:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     a24:	2243      	movs	r2, #67	; 0x43
     a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     a2a:	4a04      	ldr	r2, [pc, #16]	; (a3c <Misc_Inc_I2C_CLOCK_init+0x20>)
     a2c:	6a13      	ldr	r3, [r2, #32]
     a2e:	f043 0301 	orr.w	r3, r3, #1
     a32:	6213      	str	r3, [r2, #32]
     a34:	4770      	bx	lr
     a36:	bf00      	nop
     a38:	40001c00 	.word	0x40001c00
     a3c:	40000800 	.word	0x40000800

00000a40 <Misc_Inc_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}

void Misc_Inc_I2C_init(void)
{
     a40:	b508      	push	{r3, lr}
	Misc_Inc_I2C_CLOCK_init();
     a42:	4b05      	ldr	r3, [pc, #20]	; (a58 <Misc_Inc_I2C_init+0x18>)
     a44:	4798      	blx	r3
	i2c_m_sync_init(&Misc_Inc_I2C, SERCOM4);
     a46:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     a4a:	4804      	ldr	r0, [pc, #16]	; (a5c <Misc_Inc_I2C_init+0x1c>)
     a4c:	4b04      	ldr	r3, [pc, #16]	; (a60 <Misc_Inc_I2C_init+0x20>)
     a4e:	4798      	blx	r3
	Misc_Inc_I2C_PORT_init();
     a50:	4b04      	ldr	r3, [pc, #16]	; (a64 <Misc_Inc_I2C_init+0x24>)
     a52:	4798      	blx	r3
     a54:	bd08      	pop	{r3, pc}
     a56:	bf00      	nop
     a58:	00000a1d 	.word	0x00000a1d
     a5c:	2000041c 	.word	0x2000041c
     a60:	000011f9 	.word	0x000011f9
     a64:	000009bd 	.word	0x000009bd

00000a68 <I2C_CCu_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a68:	4b16      	ldr	r3, [pc, #88]	; (ac4 <I2C_CCu_PORT_init+0x5c>)
     a6a:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     a6e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     a72:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a76:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     a7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a7e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a82:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a86:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a8a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a8e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a92:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a96:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     a9a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     a9e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aa2:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     aa6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     aaa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aae:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ab2:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ab6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     aba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     abe:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     ac2:	4770      	bx	lr
     ac4:	41008000 	.word	0x41008000

00000ac8 <I2C_CCu_CLOCK_init>:
     ac8:	4b06      	ldr	r3, [pc, #24]	; (ae4 <I2C_CCu_CLOCK_init+0x1c>)
     aca:	2240      	movs	r2, #64	; 0x40
     acc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     ad0:	2243      	movs	r2, #67	; 0x43
     ad2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     ad6:	4a04      	ldr	r2, [pc, #16]	; (ae8 <I2C_CCu_CLOCK_init+0x20>)
     ad8:	6a13      	ldr	r3, [r2, #32]
     ada:	f043 0302 	orr.w	r3, r3, #2
     ade:	6213      	str	r3, [r2, #32]
     ae0:	4770      	bx	lr
     ae2:	bf00      	nop
     ae4:	40001c00 	.word	0x40001c00
     ae8:	40000800 	.word	0x40000800

00000aec <I2C_CCu_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void I2C_CCu_init(void)
{
     aec:	b508      	push	{r3, lr}
	I2C_CCu_CLOCK_init();
     aee:	4b04      	ldr	r3, [pc, #16]	; (b00 <I2C_CCu_init+0x14>)
     af0:	4798      	blx	r3
	i2c_m_async_init(&I2C_CCu, SERCOM5);
     af2:	4904      	ldr	r1, [pc, #16]	; (b04 <I2C_CCu_init+0x18>)
     af4:	4804      	ldr	r0, [pc, #16]	; (b08 <I2C_CCu_init+0x1c>)
     af6:	4b05      	ldr	r3, [pc, #20]	; (b0c <I2C_CCu_init+0x20>)
     af8:	4798      	blx	r3
	I2C_CCu_PORT_init();
     afa:	4b05      	ldr	r3, [pc, #20]	; (b10 <I2C_CCu_init+0x24>)
     afc:	4798      	blx	r3
     afe:	bd08      	pop	{r3, pc}
     b00:	00000ac9 	.word	0x00000ac9
     b04:	43000400 	.word	0x43000400
     b08:	20000324 	.word	0x20000324
     b0c:	0000112d 	.word	0x0000112d
     b10:	00000a69 	.word	0x00000a69

00000b14 <FANs_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b14:	4b16      	ldr	r3, [pc, #88]	; (b70 <FANs_I2C_PORT_init+0x5c>)
     b16:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
     b1a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b1e:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b22:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
	tmp &= ~PORT_PINCFG_PMUXEN;
     b26:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b2a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b2e:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b32:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b36:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b3a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b3e:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b42:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
     b46:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b4a:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b4e:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
	tmp &= ~PORT_PINCFG_PMUXEN;
     b52:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b56:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b5a:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b5e:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b62:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b66:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b6a:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
     b6e:	4770      	bx	lr
     b70:	41008000 	.word	0x41008000

00000b74 <FANs_I2C_CLOCK_init>:
     b74:	4b06      	ldr	r3, [pc, #24]	; (b90 <FANs_I2C_CLOCK_init+0x1c>)
     b76:	2240      	movs	r2, #64	; 0x40
     b78:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     b7c:	2243      	movs	r2, #67	; 0x43
     b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     b82:	4a04      	ldr	r2, [pc, #16]	; (b94 <FANs_I2C_CLOCK_init+0x20>)
     b84:	6a13      	ldr	r3, [r2, #32]
     b86:	f043 0304 	orr.w	r3, r3, #4
     b8a:	6213      	str	r3, [r2, #32]
     b8c:	4770      	bx	lr
     b8e:	bf00      	nop
     b90:	40001c00 	.word	0x40001c00
     b94:	40000800 	.word	0x40000800

00000b98 <FANs_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
}

void FANs_I2C_init(void)
{
     b98:	b508      	push	{r3, lr}
	FANs_I2C_CLOCK_init();
     b9a:	4b04      	ldr	r3, [pc, #16]	; (bac <FANs_I2C_init+0x14>)
     b9c:	4798      	blx	r3
	i2c_m_sync_init(&FANs_I2C, SERCOM6);
     b9e:	4904      	ldr	r1, [pc, #16]	; (bb0 <FANs_I2C_init+0x18>)
     ba0:	4804      	ldr	r0, [pc, #16]	; (bb4 <FANs_I2C_init+0x1c>)
     ba2:	4b05      	ldr	r3, [pc, #20]	; (bb8 <FANs_I2C_init+0x20>)
     ba4:	4798      	blx	r3
	FANs_I2C_PORT_init();
     ba6:	4b05      	ldr	r3, [pc, #20]	; (bbc <FANs_I2C_init+0x24>)
     ba8:	4798      	blx	r3
     baa:	bd08      	pop	{r3, pc}
     bac:	00000b75 	.word	0x00000b75
     bb0:	43000800 	.word	0x43000800
     bb4:	200003fc 	.word	0x200003fc
     bb8:	000011f9 	.word	0x000011f9
     bbc:	00000b15 	.word	0x00000b15

00000bc0 <MaintUSB_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bc0:	4b1e      	ldr	r3, [pc, #120]	; (c3c <MaintUSB_PORT_init+0x7c>)
     bc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     bc6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bc8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     bcc:	6299      	str	r1, [r3, #40]	; 0x28
     bce:	481c      	ldr	r0, [pc, #112]	; (c40 <MaintUSB_PORT_init+0x80>)
     bd0:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bd2:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     bd4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     bd8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     bdc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     be0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     be4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     be8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bf0:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bf4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     bf8:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     c04:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c06:	6299      	str	r1, [r3, #40]	; 0x28
     c08:	490e      	ldr	r1, [pc, #56]	; (c44 <MaintUSB_PORT_init+0x84>)
     c0a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c0c:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c0e:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     c12:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c16:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c1a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     c1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c22:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c26:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c2a:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c2e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c32:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     c3a:	4770      	bx	lr
     c3c:	41008000 	.word	0x41008000
     c40:	c0000100 	.word	0xc0000100
     c44:	c0000200 	.word	0xc0000200

00000c48 <MaintUSB_CLOCK_init>:
     c48:	2240      	movs	r2, #64	; 0x40
     c4a:	4b07      	ldr	r3, [pc, #28]	; (c68 <MaintUSB_CLOCK_init+0x20>)
     c4c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     c50:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     c54:	691a      	ldr	r2, [r3, #16]
     c56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     c5a:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     c5c:	699a      	ldr	r2, [r3, #24]
     c5e:	f042 0201 	orr.w	r2, r2, #1
     c62:	619a      	str	r2, [r3, #24]
     c64:	4770      	bx	lr
     c66:	bf00      	nop
     c68:	40001c00 	.word	0x40001c00

00000c6c <MaintUSB_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void MaintUSB_init(void)
{
     c6c:	b508      	push	{r3, lr}
	MaintUSB_CLOCK_init();
     c6e:	4b03      	ldr	r3, [pc, #12]	; (c7c <MaintUSB_init+0x10>)
     c70:	4798      	blx	r3
	usb_d_init();
     c72:	4b03      	ldr	r3, [pc, #12]	; (c80 <MaintUSB_init+0x14>)
     c74:	4798      	blx	r3
	MaintUSB_PORT_init();
     c76:	4b03      	ldr	r3, [pc, #12]	; (c84 <MaintUSB_init+0x18>)
     c78:	4798      	blx	r3
     c7a:	bd08      	pop	{r3, pc}
     c7c:	00000c49 	.word	0x00000c49
     c80:	00001595 	.word	0x00001595
     c84:	00000bc1 	.word	0x00000bc1

00000c88 <CCu_CAN_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c88:	4b10      	ldr	r3, [pc, #64]	; (ccc <CCu_CAN_PORT_init+0x44>)
     c8a:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     c8e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c92:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c96:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c9a:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c9e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     ca2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ca6:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     caa:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     cae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     cb2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cb6:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     cba:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     cbe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     cc2:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     cc6:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
     cca:	4770      	bx	lr
     ccc:	41008000 	.word	0x41008000

00000cd0 <CCu_CAN_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CCu_CAN_init(void)
{
     cd0:	b508      	push	{r3, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     cd2:	4a08      	ldr	r2, [pc, #32]	; (cf4 <CCu_CAN_init+0x24>)
     cd4:	6913      	ldr	r3, [r2, #16]
     cd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
     cda:	6113      	str	r3, [r2, #16]
     cdc:	2240      	movs	r2, #64	; 0x40
     cde:	4b06      	ldr	r3, [pc, #24]	; (cf8 <CCu_CAN_init+0x28>)
     ce0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CCu_CAN, CAN1);
     ce4:	4905      	ldr	r1, [pc, #20]	; (cfc <CCu_CAN_init+0x2c>)
     ce6:	4806      	ldr	r0, [pc, #24]	; (d00 <CCu_CAN_init+0x30>)
     ce8:	4b06      	ldr	r3, [pc, #24]	; (d04 <CCu_CAN_init+0x34>)
     cea:	4798      	blx	r3
	CCu_CAN_PORT_init();
     cec:	4b06      	ldr	r3, [pc, #24]	; (d08 <CCu_CAN_init+0x38>)
     cee:	4798      	blx	r3
     cf0:	bd08      	pop	{r3, pc}
     cf2:	bf00      	nop
     cf4:	40000800 	.word	0x40000800
     cf8:	40001c00 	.word	0x40001c00
     cfc:	42000400 	.word	0x42000400
     d00:	2000037c 	.word	0x2000037c
     d04:	00000fc9 	.word	0x00000fc9
     d08:	00000c89 	.word	0x00000c89

00000d0c <system_init>:
}

void system_init(void)
{
     d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     d0e:	4b89      	ldr	r3, [pc, #548]	; (f34 <system_init+0x228>)
     d10:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d12:	4b89      	ldr	r3, [pc, #548]	; (f38 <system_init+0x22c>)
     d14:	f04f 0c01 	mov.w	ip, #1
     d18:	f8c3 c004 	str.w	ip, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d1c:	f8df e26c 	ldr.w	lr, [pc, #620]	; f8c <system_init+0x280>
     d20:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
     d24:	4f85      	ldr	r7, [pc, #532]	; (f3c <system_init+0x230>)
     d26:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d28:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
     d2c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d34:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
     d38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d40:	2202      	movs	r2, #2
     d42:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d44:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d46:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     d4a:	629a      	str	r2, [r3, #40]	; 0x28
     d4c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
     d50:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d52:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
	tmp &= ~PORT_PINCFG_PMUXEN;
     d56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d5e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d66:	4e76      	ldr	r6, [pc, #472]	; (f40 <system_init+0x234>)
     d68:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     d6c:	4a75      	ldr	r2, [pc, #468]	; (f44 <system_init+0x238>)
     d6e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d72:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
     d76:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d7a:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d7e:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
	tmp &= ~PORT_PINCFG_PMUXEN;
     d82:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d86:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d8a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     d8e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     d9a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     d9e:	496a      	ldr	r1, [pc, #424]	; (f48 <system_init+0x23c>)
     da0:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     da4:	f893 10d7 	ldrb.w	r1, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
     da8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dac:	f883 10d7 	strb.w	r1, [r3, #215]	; 0xd7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     db0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
     db4:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     db8:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dbc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     dc0:	4c62      	ldr	r4, [pc, #392]	; (f4c <system_init+0x240>)
     dc2:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dc6:	f893 50db 	ldrb.w	r5, [r3, #219]	; 0xdb
	tmp &= ~PORT_PINCFG_PMUXEN;
     dca:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dce:	f883 50db 	strb.w	r5, [r3, #219]	; 0xdb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     dd2:	f8c3 c104 	str.w	ip, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dd6:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
     dda:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     dde:	f893 5140 	ldrb.w	r5, [r3, #320]	; 0x140
     de2:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
     de6:	f883 5140 	strb.w	r5, [r3, #320]	; 0x140
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dea:	f893 5140 	ldrb.w	r5, [r3, #320]	; 0x140
	tmp &= ~PORT_PINCFG_PMUXEN;
     dee:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     df2:	f883 5140 	strb.w	r5, [r3, #320]	; 0x140
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     df6:	2504      	movs	r5, #4
     df8:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dfc:	f8c3 5108 	str.w	r5, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e00:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
     e04:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
     e08:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e0c:	f893 5142 	ldrb.w	r5, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     e10:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e14:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e18:	2510      	movs	r5, #16
     e1a:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e1e:	f8c3 5108 	str.w	r5, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e22:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
     e26:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
     e2a:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e2e:	f893 0144 	ldrb.w	r0, [r3, #324]	; 0x144
	tmp &= ~PORT_PINCFG_PMUXEN;
     e32:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e36:	f883 0144 	strb.w	r0, [r3, #324]	; 0x144
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e3a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     e3e:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e42:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     e46:	4842      	ldr	r0, [pc, #264]	; (f50 <system_init+0x244>)
     e48:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e4c:	f893 0153 	ldrb.w	r0, [r3, #339]	; 0x153
     e50:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     e54:	f883 0153 	strb.w	r0, [r3, #339]	; 0x153
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e58:	f893 0153 	ldrb.w	r0, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     e5c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e60:	f883 0153 	strb.w	r0, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e64:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
     e68:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e6c:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e70:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     e74:	4837      	ldr	r0, [pc, #220]	; (f54 <system_init+0x248>)
     e76:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e7a:	f893 0158 	ldrb.w	r0, [r3, #344]	; 0x158
	tmp &= ~PORT_PINCFG_PMUXEN;
     e7e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e82:	f883 0158 	strb.w	r0, [r3, #344]	; 0x158
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e86:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
     e8a:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e8e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e92:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     e96:	4830      	ldr	r0, [pc, #192]	; (f58 <system_init+0x24c>)
     e98:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e9c:	f893 0159 	ldrb.w	r0, [r3, #345]	; 0x159
	tmp &= ~PORT_PINCFG_PMUXEN;
     ea0:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ea4:	f883 0159 	strb.w	r0, [r3, #345]	; 0x159
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ea8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
     eac:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     eb0:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     eb4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     eb8:	4828      	ldr	r0, [pc, #160]	; (f5c <system_init+0x250>)
     eba:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ebe:	f893 015a 	ldrb.w	r0, [r3, #346]	; 0x15a
	tmp &= ~PORT_PINCFG_PMUXEN;
     ec2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ec6:	f883 015a 	strb.w	r0, [r3, #346]	; 0x15a
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     eca:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ece:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ed2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     ed6:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eda:	f893 115b 	ldrb.w	r1, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     ede:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ee2:	f883 115b 	strb.w	r1, [r3, #347]	; 0x15b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ee6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     eea:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     eee:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ef2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     ef6:	4a1a      	ldr	r2, [pc, #104]	; (f60 <system_init+0x254>)
     ef8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     efc:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     f00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f04:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	// Set pin direction to output
	gpio_set_pin_direction(niAlcTempSensSpiSs0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(niAlcTempSensSpiSs0, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     f08:	4b16      	ldr	r3, [pc, #88]	; (f64 <system_init+0x258>)
     f0a:	4798      	blx	r3

	Flash_Mem_SPI_init();
     f0c:	4b16      	ldr	r3, [pc, #88]	; (f68 <system_init+0x25c>)
     f0e:	4798      	blx	r3

	Fvx_I2C_init();
     f10:	4b16      	ldr	r3, [pc, #88]	; (f6c <system_init+0x260>)
     f12:	4798      	blx	r3

	Heater_I2C_init();
     f14:	4b16      	ldr	r3, [pc, #88]	; (f70 <system_init+0x264>)
     f16:	4798      	blx	r3

	SPI_Alc_init();
     f18:	4b16      	ldr	r3, [pc, #88]	; (f74 <system_init+0x268>)
     f1a:	4798      	blx	r3

	Misc_Inc_I2C_init();
     f1c:	4b16      	ldr	r3, [pc, #88]	; (f78 <system_init+0x26c>)
     f1e:	4798      	blx	r3

	I2C_CCu_init();
     f20:	4b16      	ldr	r3, [pc, #88]	; (f7c <system_init+0x270>)
     f22:	4798      	blx	r3

	FANs_I2C_init();
     f24:	4b16      	ldr	r3, [pc, #88]	; (f80 <system_init+0x274>)
     f26:	4798      	blx	r3

	MaintUSB_init();
     f28:	4b16      	ldr	r3, [pc, #88]	; (f84 <system_init+0x278>)
     f2a:	4798      	blx	r3
	CCu_CAN_init();
     f2c:	4b16      	ldr	r3, [pc, #88]	; (f88 <system_init+0x27c>)
     f2e:	4798      	blx	r3
     f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f32:	bf00      	nop
     f34:	0000178d 	.word	0x0000178d
     f38:	41008000 	.word	0x41008000
     f3c:	c0020000 	.word	0xc0020000
     f40:	40020000 	.word	0x40020000
     f44:	c0020040 	.word	0xc0020040
     f48:	c0000080 	.word	0xc0000080
     f4c:	c0000800 	.word	0xc0000800
     f50:	c0020008 	.word	0xc0020008
     f54:	c0000100 	.word	0xc0000100
     f58:	c0000200 	.word	0xc0000200
     f5c:	c0000400 	.word	0xc0000400
     f60:	c0001000 	.word	0xc0001000
     f64:	00000379 	.word	0x00000379
     f68:	0000072d 	.word	0x0000072d
     f6c:	000007d9 	.word	0x000007d9
     f70:	00000885 	.word	0x00000885
     f74:	00000995 	.word	0x00000995
     f78:	00000a41 	.word	0x00000a41
     f7c:	00000aed 	.word	0x00000aed
     f80:	00000b99 	.word	0x00000b99
     f84:	00000c6d 	.word	0x00000c6d
     f88:	00000cd1 	.word	0x00000cd1
     f8c:	40020001 	.word	0x40020001

00000f90 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     f90:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     f94:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     f96:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     f98:	f3bf 8f5f 	dmb	sy
     f9c:	4770      	bx	lr

00000f9e <atomic_leave_critical>:
     f9e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     fa2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     fa4:	f383 8810 	msr	PRIMASK, r3
     fa8:	4770      	bx	lr

00000faa <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
     faa:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
     fac:	69c3      	ldr	r3, [r0, #28]
     fae:	b103      	cbz	r3, fb2 <can_tx_done+0x8>
		descr->cb.tx_done(descr);
     fb0:	4798      	blx	r3
     fb2:	bd08      	pop	{r3, pc}

00000fb4 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
     fb4:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
     fb6:	6a03      	ldr	r3, [r0, #32]
     fb8:	b103      	cbz	r3, fbc <can_rx_done+0x8>
		descr->cb.rx_done(descr);
     fba:	4798      	blx	r3
     fbc:	bd08      	pop	{r3, pc}

00000fbe <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
     fbe:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
     fc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
     fc2:	b103      	cbz	r3, fc6 <can_irq_handler+0x8>
		descr->cb.irq_handler(descr, type);
     fc4:	4798      	blx	r3
     fc6:	bd08      	pop	{r3, pc}

00000fc8 <can_async_init>:
{
     fc8:	b538      	push	{r3, r4, r5, lr}
     fca:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     fcc:	4604      	mov	r4, r0
     fce:	b1a0      	cbz	r0, ffa <can_async_init+0x32>
     fd0:	1c08      	adds	r0, r1, #0
     fd2:	bf18      	it	ne
     fd4:	2001      	movne	r0, #1
     fd6:	2241      	movs	r2, #65	; 0x41
     fd8:	4909      	ldr	r1, [pc, #36]	; (1000 <can_async_init+0x38>)
     fda:	4b0a      	ldr	r3, [pc, #40]	; (1004 <can_async_init+0x3c>)
     fdc:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
     fde:	4629      	mov	r1, r5
     fe0:	4620      	mov	r0, r4
     fe2:	4b09      	ldr	r3, [pc, #36]	; (1008 <can_async_init+0x40>)
     fe4:	4798      	blx	r3
	if (rc) {
     fe6:	4603      	mov	r3, r0
     fe8:	b928      	cbnz	r0, ff6 <can_async_init+0x2e>
	descr->dev.cb.tx_done     = can_tx_done;
     fea:	4a08      	ldr	r2, [pc, #32]	; (100c <can_async_init+0x44>)
     fec:	6062      	str	r2, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
     fee:	4a08      	ldr	r2, [pc, #32]	; (1010 <can_async_init+0x48>)
     ff0:	60a2      	str	r2, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
     ff2:	4a08      	ldr	r2, [pc, #32]	; (1014 <can_async_init+0x4c>)
     ff4:	60e2      	str	r2, [r4, #12]
}
     ff6:	4618      	mov	r0, r3
     ff8:	bd38      	pop	{r3, r4, r5, pc}
     ffa:	2000      	movs	r0, #0
     ffc:	e7eb      	b.n	fd6 <can_async_init+0xe>
     ffe:	bf00      	nop
    1000:	000036f8 	.word	0x000036f8
    1004:	000015fd 	.word	0x000015fd
    1008:	00001605 	.word	0x00001605
    100c:	00000fab 	.word	0x00000fab
    1010:	00000fb5 	.word	0x00000fb5
    1014:	00000fbf 	.word	0x00000fbf

00001018 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1018:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    101a:	4b12      	ldr	r3, [pc, #72]	; (1064 <process_ext_irq+0x4c>)
    101c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    101e:	4288      	cmp	r0, r1
    1020:	d01d      	beq.n	105e <process_ext_irq+0x46>
    1022:	2205      	movs	r2, #5
    1024:	250b      	movs	r5, #11
    1026:	2400      	movs	r4, #0
    1028:	461e      	mov	r6, r3
				ext_irqs[middle].cb();
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
    102a:	4288      	cmp	r0, r1
			lower = middle + 1;
    102c:	bf87      	ittee	hi
    102e:	3201      	addhi	r2, #1
    1030:	b2d4      	uxtbhi	r4, r2
		} else {
			upper = middle - 1;
    1032:	f102 32ff 	addls.w	r2, r2, #4294967295
    1036:	b2d5      	uxtbls	r5, r2
	while (upper >= lower) {
    1038:	42a5      	cmp	r5, r4
    103a:	d312      	bcc.n	1062 <process_ext_irq+0x4a>
		middle = (upper + lower) >> 1;
    103c:	192b      	adds	r3, r5, r4
    103e:	105b      	asrs	r3, r3, #1
    1040:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
    1042:	2a0a      	cmp	r2, #10
    1044:	d80d      	bhi.n	1062 <process_ext_irq+0x4a>
    1046:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
    1048:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
    104c:	6849      	ldr	r1, [r1, #4]
    104e:	4281      	cmp	r1, r0
    1050:	d1eb      	bne.n	102a <process_ext_irq+0x12>
			if (ext_irqs[middle].cb) {
    1052:	4a04      	ldr	r2, [pc, #16]	; (1064 <process_ext_irq+0x4c>)
    1054:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1058:	b11b      	cbz	r3, 1062 <process_ext_irq+0x4a>
				ext_irqs[middle].cb();
    105a:	4798      	blx	r3
    105c:	bd70      	pop	{r4, r5, r6, pc}
		if (ext_irqs[middle].pin == pin) {
    105e:	2305      	movs	r3, #5
    1060:	e7f7      	b.n	1052 <process_ext_irq+0x3a>
    1062:	bd70      	pop	{r4, r5, r6, pc}
    1064:	20000030 	.word	0x20000030

00001068 <ext_irq_init>:
{
    1068:	b508      	push	{r3, lr}
    106a:	4b07      	ldr	r3, [pc, #28]	; (1088 <ext_irq_init+0x20>)
    106c:	f103 0058 	add.w	r0, r3, #88	; 0x58
		ext_irqs[i].pin = 0xFFFFFFFF;
    1070:	f04f 31ff 	mov.w	r1, #4294967295
		ext_irqs[i].cb  = NULL;
    1074:	2200      	movs	r2, #0
		ext_irqs[i].pin = 0xFFFFFFFF;
    1076:	6059      	str	r1, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1078:	f843 2b08 	str.w	r2, [r3], #8
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    107c:	4283      	cmp	r3, r0
    107e:	d1fa      	bne.n	1076 <ext_irq_init+0xe>
	return _ext_irq_init(process_ext_irq);
    1080:	4802      	ldr	r0, [pc, #8]	; (108c <ext_irq_init+0x24>)
    1082:	4b03      	ldr	r3, [pc, #12]	; (1090 <ext_irq_init+0x28>)
    1084:	4798      	blx	r3
}
    1086:	bd08      	pop	{r3, pc}
    1088:	20000030 	.word	0x20000030
    108c:	00001019 	.word	0x00001019
    1090:	000018ad 	.word	0x000018ad

00001094 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1094:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1096:	8843      	ldrh	r3, [r0, #2]
    1098:	f413 7f80 	tst.w	r3, #256	; 0x100
    109c:	d102      	bne.n	10a4 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    109e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    10a0:	b103      	cbz	r3, 10a4 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    10a2:	4798      	blx	r3
    10a4:	bd08      	pop	{r3, pc}

000010a6 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    10a6:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    10a8:	8843      	ldrh	r3, [r0, #2]
    10aa:	f413 7f80 	tst.w	r3, #256	; 0x100
    10ae:	d102      	bne.n	10b6 <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    10b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    10b2:	b103      	cbz	r3, 10b6 <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    10b4:	4798      	blx	r3
    10b6:	bd08      	pop	{r3, pc}

000010b8 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    10b8:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    10ba:	8843      	ldrh	r3, [r0, #2]
    10bc:	f413 7f80 	tst.w	r3, #256	; 0x100
    10c0:	d102      	bne.n	10c8 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    10c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    10c4:	b103      	cbz	r3, 10c8 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    10c6:	4798      	blx	r3
    10c8:	bd08      	pop	{r3, pc}
	...

000010cc <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    10cc:	b510      	push	{r4, lr}
    10ce:	b084      	sub	sp, #16
    10d0:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    10d2:	8a83      	ldrh	r3, [r0, #20]
    10d4:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    10d8:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    10da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    10de:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    10e2:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    10e4:	a901      	add	r1, sp, #4
    10e6:	3828      	subs	r0, #40	; 0x28
    10e8:	4b03      	ldr	r3, [pc, #12]	; (10f8 <i2c_m_async_write+0x2c>)
    10ea:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    10ec:	2800      	cmp	r0, #0
    10ee:	bf08      	it	eq
    10f0:	4620      	moveq	r0, r4
    10f2:	b004      	add	sp, #16
    10f4:	bd10      	pop	{r4, pc}
    10f6:	bf00      	nop
    10f8:	00001fcd 	.word	0x00001fcd

000010fc <i2c_m_async_read>:
{
    10fc:	b510      	push	{r4, lr}
    10fe:	b084      	sub	sp, #16
    1100:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    1102:	8a83      	ldrh	r3, [r0, #20]
    1104:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1108:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    110a:	f248 0301 	movw	r3, #32769	; 0x8001
    110e:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    1112:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1114:	a901      	add	r1, sp, #4
    1116:	3828      	subs	r0, #40	; 0x28
    1118:	4b03      	ldr	r3, [pc, #12]	; (1128 <i2c_m_async_read+0x2c>)
    111a:	4798      	blx	r3
}
    111c:	2800      	cmp	r0, #0
    111e:	bf08      	it	eq
    1120:	4620      	moveq	r0, r4
    1122:	b004      	add	sp, #16
    1124:	bd10      	pop	{r4, pc}
    1126:	bf00      	nop
    1128:	00001fcd 	.word	0x00001fcd

0000112c <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    112c:	b570      	push	{r4, r5, r6, lr}
    112e:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    1130:	4604      	mov	r4, r0
    1132:	2289      	movs	r2, #137	; 0x89
    1134:	490f      	ldr	r1, [pc, #60]	; (1174 <i2c_m_async_init+0x48>)
    1136:	3000      	adds	r0, #0
    1138:	bf18      	it	ne
    113a:	2001      	movne	r0, #1
    113c:	4b0e      	ldr	r3, [pc, #56]	; (1178 <i2c_m_async_init+0x4c>)
    113e:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    1140:	4629      	mov	r1, r5
    1142:	4620      	mov	r0, r4
    1144:	4b0d      	ldr	r3, [pc, #52]	; (117c <i2c_m_async_init+0x50>)
    1146:	4798      	blx	r3
	if (init_status) {
    1148:	4605      	mov	r5, r0
    114a:	b108      	cbz	r0, 1150 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    114c:	4628      	mov	r0, r5
    114e:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    1150:	4b0b      	ldr	r3, [pc, #44]	; (1180 <i2c_m_async_init+0x54>)
    1152:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    1154:	4b0b      	ldr	r3, [pc, #44]	; (1184 <i2c_m_async_init+0x58>)
    1156:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    1158:	4a0b      	ldr	r2, [pc, #44]	; (1188 <i2c_m_async_init+0x5c>)
    115a:	2101      	movs	r1, #1
    115c:	4620      	mov	r0, r4
    115e:	4e0b      	ldr	r6, [pc, #44]	; (118c <i2c_m_async_init+0x60>)
    1160:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    1162:	4a0b      	ldr	r2, [pc, #44]	; (1190 <i2c_m_async_init+0x64>)
    1164:	2102      	movs	r1, #2
    1166:	4620      	mov	r0, r4
    1168:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    116a:	4a0a      	ldr	r2, [pc, #40]	; (1194 <i2c_m_async_init+0x68>)
    116c:	2100      	movs	r1, #0
    116e:	4620      	mov	r0, r4
    1170:	47b0      	blx	r6
	return ERR_NONE;
    1172:	e7eb      	b.n	114c <i2c_m_async_init+0x20>
    1174:	00003714 	.word	0x00003714
    1178:	000015fd 	.word	0x000015fd
    117c:	00001f45 	.word	0x00001f45
    1180:	000010fd 	.word	0x000010fd
    1184:	000010cd 	.word	0x000010cd
    1188:	00001095 	.word	0x00001095
    118c:	000020fd 	.word	0x000020fd
    1190:	000010a7 	.word	0x000010a7
    1194:	000010b9 	.word	0x000010b9

00001198 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    1198:	b510      	push	{r4, lr}
    119a:	b084      	sub	sp, #16
    119c:	4614      	mov	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    119e:	8903      	ldrh	r3, [r0, #8]
    11a0:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    11a4:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    11a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    11aa:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    11ae:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    11b0:	a901      	add	r1, sp, #4
    11b2:	3814      	subs	r0, #20
    11b4:	4b03      	ldr	r3, [pc, #12]	; (11c4 <i2c_m_sync_write+0x2c>)
    11b6:	4798      	blx	r3
	if (ret) {
		return ret;
	}

	return n;
}
    11b8:	2800      	cmp	r0, #0
    11ba:	bf08      	it	eq
    11bc:	4620      	moveq	r0, r4
    11be:	b004      	add	sp, #16
    11c0:	bd10      	pop	{r4, pc}
    11c2:	bf00      	nop
    11c4:	00002149 	.word	0x00002149

000011c8 <i2c_m_sync_read>:
{
    11c8:	b510      	push	{r4, lr}
    11ca:	b084      	sub	sp, #16
    11cc:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    11ce:	8903      	ldrh	r3, [r0, #8]
    11d0:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    11d4:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    11d6:	f248 0301 	movw	r3, #32769	; 0x8001
    11da:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    11de:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    11e0:	a901      	add	r1, sp, #4
    11e2:	3814      	subs	r0, #20
    11e4:	4b03      	ldr	r3, [pc, #12]	; (11f4 <i2c_m_sync_read+0x2c>)
    11e6:	4798      	blx	r3
}
    11e8:	2800      	cmp	r0, #0
    11ea:	bf08      	it	eq
    11ec:	4620      	moveq	r0, r4
    11ee:	b004      	add	sp, #16
    11f0:	bd10      	pop	{r4, pc}
    11f2:	bf00      	nop
    11f4:	00002149 	.word	0x00002149

000011f8 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    11f8:	b538      	push	{r3, r4, r5, lr}
    11fa:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    11fc:	4604      	mov	r4, r0
    11fe:	225e      	movs	r2, #94	; 0x5e
    1200:	4908      	ldr	r1, [pc, #32]	; (1224 <i2c_m_sync_init+0x2c>)
    1202:	3000      	adds	r0, #0
    1204:	bf18      	it	ne
    1206:	2001      	movne	r0, #1
    1208:	4b07      	ldr	r3, [pc, #28]	; (1228 <i2c_m_sync_init+0x30>)
    120a:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    120c:	4629      	mov	r1, r5
    120e:	4620      	mov	r0, r4
    1210:	4b06      	ldr	r3, [pc, #24]	; (122c <i2c_m_sync_init+0x34>)
    1212:	4798      	blx	r3
	if (init_status) {
    1214:	4603      	mov	r3, r0
    1216:	b918      	cbnz	r0, 1220 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    1218:	4a05      	ldr	r2, [pc, #20]	; (1230 <i2c_m_sync_init+0x38>)
    121a:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
    121c:	4a05      	ldr	r2, [pc, #20]	; (1234 <i2c_m_sync_init+0x3c>)
    121e:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
    1220:	4618      	mov	r0, r3
    1222:	bd38      	pop	{r3, r4, r5, pc}
    1224:	00003734 	.word	0x00003734
    1228:	000015fd 	.word	0x000015fd
    122c:	00002119 	.word	0x00002119
    1230:	000011c9 	.word	0x000011c9
    1234:	00001199 	.word	0x00001199

00001238 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1238:	b538      	push	{r3, r4, r5, lr}
    123a:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    123c:	4604      	mov	r4, r0
    123e:	b1b8      	cbz	r0, 1270 <spi_m_sync_init+0x38>
    1240:	1c08      	adds	r0, r1, #0
    1242:	bf18      	it	ne
    1244:	2001      	movne	r0, #1
    1246:	2240      	movs	r2, #64	; 0x40
    1248:	490a      	ldr	r1, [pc, #40]	; (1274 <spi_m_sync_init+0x3c>)
    124a:	4b0b      	ldr	r3, [pc, #44]	; (1278 <spi_m_sync_init+0x40>)
    124c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    124e:	4620      	mov	r0, r4
    1250:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
    1254:	4629      	mov	r1, r5
    1256:	4b09      	ldr	r3, [pc, #36]	; (127c <spi_m_sync_init+0x44>)
    1258:	4798      	blx	r3

	if (rc < 0) {
    125a:	2800      	cmp	r0, #0
    125c:	db07      	blt.n	126e <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    125e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1262:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    1264:	4b06      	ldr	r3, [pc, #24]	; (1280 <spi_m_sync_init+0x48>)
    1266:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    1268:	4b06      	ldr	r3, [pc, #24]	; (1284 <spi_m_sync_init+0x4c>)
    126a:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    126c:	2000      	movs	r0, #0
}
    126e:	bd38      	pop	{r3, r4, r5, pc}
    1270:	2000      	movs	r0, #0
    1272:	e7e8      	b.n	1246 <spi_m_sync_init+0xe>
    1274:	00003750 	.word	0x00003750
    1278:	000015fd 	.word	0x000015fd
    127c:	000026b5 	.word	0x000026b5
    1280:	00001305 	.word	0x00001305
    1284:	000012c9 	.word	0x000012c9

00001288 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1288:	b530      	push	{r4, r5, lr}
    128a:	b085      	sub	sp, #20
    128c:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    128e:	4605      	mov	r5, r0
    1290:	b190      	cbz	r0, 12b8 <spi_m_sync_transfer+0x30>
    1292:	1c08      	adds	r0, r1, #0
    1294:	bf18      	it	ne
    1296:	2001      	movne	r0, #1
    1298:	22b3      	movs	r2, #179	; 0xb3
    129a:	4908      	ldr	r1, [pc, #32]	; (12bc <spi_m_sync_transfer+0x34>)
    129c:	4b08      	ldr	r3, [pc, #32]	; (12c0 <spi_m_sync_transfer+0x38>)
    129e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    12a0:	6823      	ldr	r3, [r4, #0]
    12a2:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    12a4:	6863      	ldr	r3, [r4, #4]
    12a6:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    12a8:	68a3      	ldr	r3, [r4, #8]
    12aa:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
    12ac:	a901      	add	r1, sp, #4
    12ae:	1d28      	adds	r0, r5, #4
    12b0:	4b04      	ldr	r3, [pc, #16]	; (12c4 <spi_m_sync_transfer+0x3c>)
    12b2:	4798      	blx	r3
}
    12b4:	b005      	add	sp, #20
    12b6:	bd30      	pop	{r4, r5, pc}
    12b8:	2000      	movs	r0, #0
    12ba:	e7ed      	b.n	1298 <spi_m_sync_transfer+0x10>
    12bc:	00003750 	.word	0x00003750
    12c0:	000015fd 	.word	0x000015fd
    12c4:	00002845 	.word	0x00002845

000012c8 <_spi_m_sync_io_write>:
{
    12c8:	b570      	push	{r4, r5, r6, lr}
    12ca:	b084      	sub	sp, #16
    12cc:	460e      	mov	r6, r1
    12ce:	4615      	mov	r5, r2
	ASSERT(io);
    12d0:	4604      	mov	r4, r0
    12d2:	22a3      	movs	r2, #163	; 0xa3
    12d4:	4908      	ldr	r1, [pc, #32]	; (12f8 <_spi_m_sync_io_write+0x30>)
    12d6:	3000      	adds	r0, #0
    12d8:	bf18      	it	ne
    12da:	2001      	movne	r0, #1
    12dc:	4b07      	ldr	r3, [pc, #28]	; (12fc <_spi_m_sync_io_write+0x34>)
    12de:	4798      	blx	r3
	xfer.rxbuf = 0;
    12e0:	2300      	movs	r3, #0
    12e2:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    12e4:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    12e6:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    12e8:	a901      	add	r1, sp, #4
    12ea:	f1a4 000c 	sub.w	r0, r4, #12
    12ee:	4b04      	ldr	r3, [pc, #16]	; (1300 <_spi_m_sync_io_write+0x38>)
    12f0:	4798      	blx	r3
}
    12f2:	b004      	add	sp, #16
    12f4:	bd70      	pop	{r4, r5, r6, pc}
    12f6:	bf00      	nop
    12f8:	00003750 	.word	0x00003750
    12fc:	000015fd 	.word	0x000015fd
    1300:	00001289 	.word	0x00001289

00001304 <_spi_m_sync_io_read>:
{
    1304:	b570      	push	{r4, r5, r6, lr}
    1306:	b084      	sub	sp, #16
    1308:	460e      	mov	r6, r1
    130a:	4615      	mov	r5, r2
	ASSERT(io);
    130c:	4604      	mov	r4, r0
    130e:	2287      	movs	r2, #135	; 0x87
    1310:	4908      	ldr	r1, [pc, #32]	; (1334 <_spi_m_sync_io_read+0x30>)
    1312:	3000      	adds	r0, #0
    1314:	bf18      	it	ne
    1316:	2001      	movne	r0, #1
    1318:	4b07      	ldr	r3, [pc, #28]	; (1338 <_spi_m_sync_io_read+0x34>)
    131a:	4798      	blx	r3
	xfer.rxbuf = buf;
    131c:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    131e:	2300      	movs	r3, #0
    1320:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    1322:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1324:	a901      	add	r1, sp, #4
    1326:	f1a4 000c 	sub.w	r0, r4, #12
    132a:	4b04      	ldr	r3, [pc, #16]	; (133c <_spi_m_sync_io_read+0x38>)
    132c:	4798      	blx	r3
}
    132e:	b004      	add	sp, #16
    1330:	bd70      	pop	{r4, r5, r6, pc}
    1332:	bf00      	nop
    1334:	00003750 	.word	0x00003750
    1338:	000015fd 	.word	0x000015fd
    133c:	00001289 	.word	0x00001289

00001340 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1340:	4b0f      	ldr	r3, [pc, #60]	; (1380 <_usb_d_find_ep+0x40>)
    1342:	7859      	ldrb	r1, [r3, #1]
    1344:	4288      	cmp	r0, r1
    1346:	d018      	beq.n	137a <_usb_d_find_ep+0x3a>
{
    1348:	b430      	push	{r4, r5}
    134a:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    134c:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    134e:	f000 050f 	and.w	r5, r0, #15
    1352:	e007      	b.n	1364 <_usb_d_find_ep+0x24>
    1354:	3301      	adds	r3, #1
    1356:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1358:	2b04      	cmp	r3, #4
    135a:	d009      	beq.n	1370 <_usb_d_find_ep+0x30>
    135c:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    135e:	7851      	ldrb	r1, [r2, #1]
    1360:	4281      	cmp	r1, r0
    1362:	d007      	beq.n	1374 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1364:	7814      	ldrb	r4, [r2, #0]
    1366:	2c00      	cmp	r4, #0
    1368:	d1f4      	bne.n	1354 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    136a:	428d      	cmp	r5, r1
    136c:	d1f2      	bne.n	1354 <_usb_d_find_ep+0x14>
    136e:	e001      	b.n	1374 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    1370:	f04f 33ff 	mov.w	r3, #4294967295
}
    1374:	4618      	mov	r0, r3
    1376:	bc30      	pop	{r4, r5}
    1378:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    137a:	2300      	movs	r3, #0
}
    137c:	4618      	mov	r0, r3
    137e:	4770      	bx	lr
    1380:	20000088 	.word	0x20000088

00001384 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    1384:	2000      	movs	r0, #0
    1386:	4770      	bx	lr

00001388 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1388:	b538      	push	{r3, r4, r5, lr}
    138a:	4604      	mov	r4, r0
    138c:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    138e:	4b09      	ldr	r3, [pc, #36]	; (13b4 <usb_d_cb_trans_more+0x2c>)
    1390:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1392:	4b09      	ldr	r3, [pc, #36]	; (13b8 <usb_d_cb_trans_more+0x30>)
    1394:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1398:	789b      	ldrb	r3, [r3, #2]
    139a:	2b03      	cmp	r3, #3
    139c:	d001      	beq.n	13a2 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    139e:	2000      	movs	r0, #0
}
    13a0:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    13a2:	4b05      	ldr	r3, [pc, #20]	; (13b8 <usb_d_cb_trans_more+0x30>)
    13a4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    13a8:	6983      	ldr	r3, [r0, #24]
    13aa:	4629      	mov	r1, r5
    13ac:	4620      	mov	r0, r4
    13ae:	4798      	blx	r3
    13b0:	bd38      	pop	{r3, r4, r5, pc}
    13b2:	bf00      	nop
    13b4:	00001341 	.word	0x00001341
    13b8:	20000088 	.word	0x20000088

000013bc <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    13bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    13be:	b085      	sub	sp, #20
    13c0:	4606      	mov	r6, r0
    13c2:	460d      	mov	r5, r1
    13c4:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    13c6:	4b4d      	ldr	r3, [pc, #308]	; (14fc <_usb_d_cb_trans_done+0x140>)
    13c8:	4798      	blx	r3
    13ca:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    13cc:	2d00      	cmp	r5, #0
    13ce:	d15b      	bne.n	1488 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    13d0:	4a4b      	ldr	r2, [pc, #300]	; (1500 <_usb_d_cb_trans_done+0x144>)
    13d2:	0143      	lsls	r3, r0, #5
    13d4:	18d1      	adds	r1, r2, r3
    13d6:	2000      	movs	r0, #0
    13d8:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    13da:	5cd3      	ldrb	r3, [r2, r3]
    13dc:	b173      	cbz	r3, 13fc <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    13de:	4b48      	ldr	r3, [pc, #288]	; (1500 <_usb_d_cb_trans_done+0x144>)
    13e0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    13e4:	2201      	movs	r2, #1
    13e6:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    13e8:	4845      	ldr	r0, [pc, #276]	; (1500 <_usb_d_cb_trans_done+0x144>)
    13ea:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    13ee:	69c3      	ldr	r3, [r0, #28]
    13f0:	463a      	mov	r2, r7
    13f2:	78c1      	ldrb	r1, [r0, #3]
    13f4:	4630      	mov	r0, r6
    13f6:	4798      	blx	r3
}
    13f8:	b005      	add	sp, #20
    13fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    13fc:	788b      	ldrb	r3, [r1, #2]
    13fe:	2b03      	cmp	r3, #3
    1400:	d00b      	beq.n	141a <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    1402:	483f      	ldr	r0, [pc, #252]	; (1500 <_usb_d_cb_trans_done+0x144>)
    1404:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    1408:	4614      	mov	r4, r2
    140a:	69d3      	ldr	r3, [r2, #28]
    140c:	320c      	adds	r2, #12
    140e:	2100      	movs	r1, #0
    1410:	7860      	ldrb	r0, [r4, #1]
    1412:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1414:	2302      	movs	r3, #2
    1416:	70a3      	strb	r3, [r4, #2]
    1418:	e7ee      	b.n	13f8 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    141a:	460b      	mov	r3, r1
    141c:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    1420:	460a      	mov	r2, r1
    1422:	69ce      	ldr	r6, [r1, #28]
    1424:	320c      	adds	r2, #12
    1426:	2101      	movs	r1, #1
    1428:	7858      	ldrb	r0, [r3, #1]
    142a:	47b0      	blx	r6
		if (err) {
    142c:	b1a0      	cbz	r0, 1458 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    142e:	4b34      	ldr	r3, [pc, #208]	; (1500 <_usb_d_cb_trans_done+0x144>)
    1430:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1434:	2205      	movs	r2, #5
    1436:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    1438:	2202      	movs	r2, #2
    143a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    143c:	2d00      	cmp	r5, #0
    143e:	db09      	blt.n	1454 <_usb_d_cb_trans_done+0x98>
    1440:	482f      	ldr	r0, [pc, #188]	; (1500 <_usb_d_cb_trans_done+0x144>)
    1442:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1446:	7840      	ldrb	r0, [r0, #1]
    1448:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    144c:	2101      	movs	r1, #1
    144e:	4b2d      	ldr	r3, [pc, #180]	; (1504 <_usb_d_cb_trans_done+0x148>)
    1450:	4798      	blx	r3
    1452:	e7d1      	b.n	13f8 <_usb_d_cb_trans_done+0x3c>
    1454:	7858      	ldrb	r0, [r3, #1]
    1456:	e7f9      	b.n	144c <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1458:	4829      	ldr	r0, [pc, #164]	; (1500 <_usb_d_cb_trans_done+0x144>)
    145a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    145e:	2304      	movs	r3, #4
    1460:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    1462:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    1464:	2200      	movs	r2, #0
    1466:	9201      	str	r2, [sp, #4]
    1468:	9202      	str	r2, [sp, #8]
    146a:	4295      	cmp	r5, r2
    146c:	bfac      	ite	ge
    146e:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    1472:	f003 030f 	andlt.w	r3, r3, #15
    1476:	f88d 300c 	strb.w	r3, [sp, #12]
    147a:	2301      	movs	r3, #1
    147c:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    1480:	a801      	add	r0, sp, #4
    1482:	4b21      	ldr	r3, [pc, #132]	; (1508 <_usb_d_cb_trans_done+0x14c>)
    1484:	4798      	blx	r3
    1486:	e7b7      	b.n	13f8 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    1488:	2d01      	cmp	r5, #1
    148a:	d00a      	beq.n	14a2 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    148c:	2d02      	cmp	r5, #2
    148e:	d01c      	beq.n	14ca <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    1490:	2d03      	cmp	r5, #3
    1492:	d02a      	beq.n	14ea <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1494:	4b1a      	ldr	r3, [pc, #104]	; (1500 <_usb_d_cb_trans_done+0x144>)
    1496:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    149a:	2206      	movs	r2, #6
    149c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    149e:	70da      	strb	r2, [r3, #3]
    14a0:	e7a2      	b.n	13e8 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    14a2:	4a17      	ldr	r2, [pc, #92]	; (1500 <_usb_d_cb_trans_done+0x144>)
    14a4:	0143      	lsls	r3, r0, #5
    14a6:	18d1      	adds	r1, r2, r3
    14a8:	2002      	movs	r0, #2
    14aa:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    14ac:	5cd3      	ldrb	r3, [r2, r3]
    14ae:	b12b      	cbz	r3, 14bc <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    14b0:	4b13      	ldr	r3, [pc, #76]	; (1500 <_usb_d_cb_trans_done+0x144>)
    14b2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    14b6:	2205      	movs	r2, #5
    14b8:	709a      	strb	r2, [r3, #2]
    14ba:	e795      	b.n	13e8 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    14bc:	460b      	mov	r3, r1
    14be:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    14c0:	2100      	movs	r1, #0
    14c2:	4630      	mov	r0, r6
    14c4:	4b0f      	ldr	r3, [pc, #60]	; (1504 <_usb_d_cb_trans_done+0x148>)
    14c6:	4798      	blx	r3
    14c8:	e78e      	b.n	13e8 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    14ca:	4a0d      	ldr	r2, [pc, #52]	; (1500 <_usb_d_cb_trans_done+0x144>)
    14cc:	0143      	lsls	r3, r0, #5
    14ce:	18d1      	adds	r1, r2, r3
    14d0:	2004      	movs	r0, #4
    14d2:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    14d4:	5cd3      	ldrb	r3, [r2, r3]
    14d6:	b12b      	cbz	r3, 14e4 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    14d8:	4b09      	ldr	r3, [pc, #36]	; (1500 <_usb_d_cb_trans_done+0x144>)
    14da:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    14de:	2201      	movs	r2, #1
    14e0:	709a      	strb	r2, [r3, #2]
    14e2:	e781      	b.n	13e8 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    14e4:	2302      	movs	r3, #2
    14e6:	708b      	strb	r3, [r1, #2]
			return;
    14e8:	e786      	b.n	13f8 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    14ea:	4b05      	ldr	r3, [pc, #20]	; (1500 <_usb_d_cb_trans_done+0x144>)
    14ec:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    14f0:	2200      	movs	r2, #0
    14f2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    14f4:	2205      	movs	r2, #5
    14f6:	70da      	strb	r2, [r3, #3]
    14f8:	e776      	b.n	13e8 <_usb_d_cb_trans_done+0x2c>
    14fa:	bf00      	nop
    14fc:	00001341 	.word	0x00001341
    1500:	20000088 	.word	0x20000088
    1504:	00003295 	.word	0x00003295
    1508:	0000343d 	.word	0x0000343d

0000150c <usb_d_cb_trans_setup>:
{
    150c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1510:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1512:	4b1c      	ldr	r3, [pc, #112]	; (1584 <usb_d_cb_trans_setup+0x78>)
    1514:	4798      	blx	r3
    1516:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    1518:	4c1b      	ldr	r4, [pc, #108]	; (1588 <usb_d_cb_trans_setup+0x7c>)
    151a:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    151e:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    1520:	4621      	mov	r1, r4
    1522:	4628      	mov	r0, r5
    1524:	4b19      	ldr	r3, [pc, #100]	; (158c <usb_d_cb_trans_setup+0x80>)
    1526:	4798      	blx	r3
	if (n != 8) {
    1528:	b2c0      	uxtb	r0, r0
    152a:	2808      	cmp	r0, #8
    152c:	d009      	beq.n	1542 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    152e:	2101      	movs	r1, #1
    1530:	4628      	mov	r0, r5
    1532:	4c17      	ldr	r4, [pc, #92]	; (1590 <usb_d_cb_trans_setup+0x84>)
    1534:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1536:	2101      	movs	r1, #1
    1538:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    153c:	47a0      	blx	r4
		return;
    153e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1542:	2100      	movs	r1, #0
    1544:	4628      	mov	r0, r5
    1546:	4f12      	ldr	r7, [pc, #72]	; (1590 <usb_d_cb_trans_setup+0x84>)
    1548:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    154a:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    154e:	2100      	movs	r1, #0
    1550:	4640      	mov	r0, r8
    1552:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1554:	4b0c      	ldr	r3, [pc, #48]	; (1588 <usb_d_cb_trans_setup+0x7c>)
    1556:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    155a:	2201      	movs	r2, #1
    155c:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    155e:	695b      	ldr	r3, [r3, #20]
    1560:	4621      	mov	r1, r4
    1562:	4628      	mov	r0, r5
    1564:	4798      	blx	r3
    1566:	b108      	cbz	r0, 156c <usb_d_cb_trans_setup+0x60>
    1568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    156c:	4b06      	ldr	r3, [pc, #24]	; (1588 <usb_d_cb_trans_setup+0x7c>)
    156e:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1572:	2305      	movs	r3, #5
    1574:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1576:	2101      	movs	r1, #1
    1578:	4628      	mov	r0, r5
    157a:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    157c:	2101      	movs	r1, #1
    157e:	4640      	mov	r0, r8
    1580:	47b8      	blx	r7
    1582:	e7f1      	b.n	1568 <usb_d_cb_trans_setup+0x5c>
    1584:	00001341 	.word	0x00001341
    1588:	20000088 	.word	0x20000088
    158c:	000033dd 	.word	0x000033dd
    1590:	00003295 	.word	0x00003295

00001594 <usb_d_init>:

int32_t usb_d_init(void)
{
    1594:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1596:	4b11      	ldr	r3, [pc, #68]	; (15dc <usb_d_init+0x48>)
    1598:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    159a:	2800      	cmp	r0, #0
    159c:	db1c      	blt.n	15d8 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    159e:	4c10      	ldr	r4, [pc, #64]	; (15e0 <usb_d_init+0x4c>)
    15a0:	2280      	movs	r2, #128	; 0x80
    15a2:	2100      	movs	r1, #0
    15a4:	4620      	mov	r0, r4
    15a6:	4b0f      	ldr	r3, [pc, #60]	; (15e4 <usb_d_init+0x50>)
    15a8:	4798      	blx	r3
    15aa:	4623      	mov	r3, r4
    15ac:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    15b0:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    15b2:	4a0d      	ldr	r2, [pc, #52]	; (15e8 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    15b4:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    15b6:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    15b8:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    15ba:	61da      	str	r2, [r3, #28]
    15bc:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    15be:	4283      	cmp	r3, r0
    15c0:	d1f8      	bne.n	15b4 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    15c2:	490a      	ldr	r1, [pc, #40]	; (15ec <usb_d_init+0x58>)
    15c4:	2000      	movs	r0, #0
    15c6:	4c0a      	ldr	r4, [pc, #40]	; (15f0 <usb_d_init+0x5c>)
    15c8:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    15ca:	490a      	ldr	r1, [pc, #40]	; (15f4 <usb_d_init+0x60>)
    15cc:	2001      	movs	r0, #1
    15ce:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    15d0:	4909      	ldr	r1, [pc, #36]	; (15f8 <usb_d_init+0x64>)
    15d2:	2002      	movs	r0, #2
    15d4:	47a0      	blx	r4
	return ERR_NONE;
    15d6:	2000      	movs	r0, #0
}
    15d8:	bd10      	pop	{r4, pc}
    15da:	bf00      	nop
    15dc:	00003199 	.word	0x00003199
    15e0:	20000088 	.word	0x20000088
    15e4:	000036e7 	.word	0x000036e7
    15e8:	00001385 	.word	0x00001385
    15ec:	0000150d 	.word	0x0000150d
    15f0:	0000361d 	.word	0x0000361d
    15f4:	00001389 	.word	0x00001389
    15f8:	000013bd 	.word	0x000013bd

000015fc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    15fc:	b900      	cbnz	r0, 1600 <assert+0x4>
		__asm("BKPT #0");
    15fe:	be00      	bkpt	0x0000
    1600:	4770      	bx	lr
	...

00001604 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    1604:	b430      	push	{r4, r5}
	dev->hw = hw;
    1606:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    1608:	698b      	ldr	r3, [r1, #24]
    160a:	f043 0301 	orr.w	r3, r3, #1
    160e:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    1610:	6802      	ldr	r2, [r0, #0]
}

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    1612:	6993      	ldr	r3, [r2, #24]
    1614:	f013 0f01 	tst.w	r3, #1
    1618:	d0fb      	beq.n	1612 <_can_async_init+0xe>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    161a:	6993      	ldr	r3, [r2, #24]
    161c:	f043 0302 	orr.w	r3, r3, #2
    1620:	6193      	str	r3, [r2, #24]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    1622:	4b34      	ldr	r3, [pc, #208]	; (16f4 <_can_async_init+0xf0>)
    1624:	4299      	cmp	r1, r3
    1626:	d011      	beq.n	164c <_can_async_init+0x48>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    1628:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    162a:	6993      	ldr	r3, [r2, #24]
    162c:	f023 0302 	bic.w	r3, r3, #2
    1630:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    1632:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    1634:	6993      	ldr	r3, [r2, #24]
    1636:	f023 0301 	bic.w	r3, r3, #1
    163a:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    163c:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
    163e:	6993      	ldr	r3, [r2, #24]
    1640:	f013 0f01 	tst.w	r3, #1
    1644:	d1fb      	bne.n	163e <_can_async_init+0x3a>
	};

	return ERR_NONE;
}
    1646:	2000      	movs	r0, #0
    1648:	bc30      	pop	{r4, r5}
    164a:	4770      	bx	lr
		_can1_dev    = dev;
    164c:	4b2a      	ldr	r3, [pc, #168]	; (16f8 <_can_async_init+0xf4>)
    164e:	461a      	mov	r2, r3
    1650:	f842 0b04 	str.w	r0, [r2], #4
		dev->context = (void *)&_can1_context;
    1654:	4929      	ldr	r1, [pc, #164]	; (16fc <_can_async_init+0xf8>)
    1656:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    1658:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    165a:	698c      	ldr	r4, [r1, #24]
    165c:	618c      	str	r4, [r1, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    165e:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
    1660:	2400      	movs	r4, #0
    1662:	608c      	str	r4, [r1, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    1664:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    1666:	4d26      	ldr	r5, [pc, #152]	; (1700 <_can_async_init+0xfc>)
    1668:	61cd      	str	r5, [r1, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    166a:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
    166c:	f640 2533 	movw	r5, #2611	; 0xa33
    1670:	60cd      	str	r5, [r1, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    1672:	6805      	ldr	r5, [r0, #0]
    1674:	4923      	ldr	r1, [pc, #140]	; (1704 <_can_async_init+0x100>)
    1676:	b289      	uxth	r1, r1
    1678:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    167c:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    1680:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    1682:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    1686:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    1688:	f8c1 40c8 	str.w	r4, [r1, #200]	; 0xc8
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    168c:	6805      	ldr	r5, [r0, #0]
    168e:	491e      	ldr	r1, [pc, #120]	; (1708 <_can_async_init+0x104>)
    1690:	b289      	uxth	r1, r1
    1692:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
	((Can *)hw)->TXBC.reg = data;
    1696:	f8c5 10c0 	str.w	r1, [r5, #192]	; 0xc0
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    169a:	6801      	ldr	r1, [r0, #0]
    169c:	b292      	uxth	r2, r2
    169e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    16a2:	f8c1 20f0 	str.w	r2, [r1, #240]	; 0xf0
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    16a6:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->GFC.reg = data;
    16a8:	2128      	movs	r1, #40	; 0x28
    16aa:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    16ae:	6801      	ldr	r1, [r0, #0]
    16b0:	f103 0214 	add.w	r2, r3, #20
    16b4:	b292      	uxth	r2, r2
    16b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	((Can *)hw)->SIDFC.reg = data;
    16ba:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    16be:	6802      	ldr	r2, [r0, #0]
    16c0:	331c      	adds	r3, #28
    16c2:	b29b      	uxth	r3, r3
    16c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Can *)hw)->XIDFC.reg = data;
    16c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    16cc:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->XIDAM.reg = data;
    16ce:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    16d2:	4b0e      	ldr	r3, [pc, #56]	; (170c <_can_async_init+0x108>)
    16d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    16d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    16dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    16e0:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    16e4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    16e8:	609a      	str	r2, [r3, #8]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    16ea:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
    16ec:	2201      	movs	r2, #1
    16ee:	65da      	str	r2, [r3, #92]	; 0x5c
    16f0:	e79a      	b.n	1628 <_can_async_init+0x24>
    16f2:	bf00      	nop
    16f4:	42000400 	.word	0x42000400
    16f8:	20000108 	.word	0x20000108
    16fc:	20000000 	.word	0x20000000
    1700:	06020a07 	.word	0x06020a07
    1704:	2000045c 	.word	0x2000045c
    1708:	2000043c 	.word	0x2000043c
    170c:	e000e100 	.word	0xe000e100

00001710 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    1710:	b538      	push	{r3, r4, r5, lr}
	struct _can_async_device *dev = _can1_dev;
    1712:	4b1d      	ldr	r3, [pc, #116]	; (1788 <CAN1_Handler+0x78>)
    1714:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    1716:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
    1718:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
    171a:	f014 0f01 	tst.w	r4, #1
    171e:	d11c      	bne.n	175a <CAN1_Handler+0x4a>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
    1720:	f414 7f00 	tst.w	r4, #512	; 0x200
    1724:	d11d      	bne.n	1762 <CAN1_Handler+0x52>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
    1726:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
    172a:	d11e      	bne.n	176a <CAN1_Handler+0x5a>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
    172c:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
    1730:	d120      	bne.n	1774 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
    1732:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
    1736:	d00a      	beq.n	174e <CAN1_Handler+0x3e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    1738:	68ea      	ldr	r2, [r5, #12]
    173a:	682b      	ldr	r3, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    173e:	f3c3 1340 	ubfx	r3, r3, #5, #1
    1742:	2b00      	cmp	r3, #0
    1744:	bf14      	ite	ne
    1746:	2102      	movne	r1, #2
    1748:	2101      	moveq	r1, #1
    174a:	4628      	mov	r0, r5
    174c:	4790      	blx	r2
	}

	if (ir & CAN_IR_RF0L) {
    174e:	f014 0f08 	tst.w	r4, #8
    1752:	d114      	bne.n	177e <CAN1_Handler+0x6e>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
    1754:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
    1756:	651c      	str	r4, [r3, #80]	; 0x50
    1758:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
    175a:	68ab      	ldr	r3, [r5, #8]
    175c:	4628      	mov	r0, r5
    175e:	4798      	blx	r3
    1760:	e7de      	b.n	1720 <CAN1_Handler+0x10>
		dev->cb.tx_done(dev);
    1762:	686b      	ldr	r3, [r5, #4]
    1764:	4628      	mov	r0, r5
    1766:	4798      	blx	r3
    1768:	e7dd      	b.n	1726 <CAN1_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    176a:	68eb      	ldr	r3, [r5, #12]
    176c:	2103      	movs	r1, #3
    176e:	4628      	mov	r0, r5
    1770:	4798      	blx	r3
    1772:	e7db      	b.n	172c <CAN1_Handler+0x1c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    1774:	68eb      	ldr	r3, [r5, #12]
    1776:	2100      	movs	r1, #0
    1778:	4628      	mov	r0, r5
    177a:	4798      	blx	r3
    177c:	e7d9      	b.n	1732 <CAN1_Handler+0x22>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    177e:	68eb      	ldr	r3, [r5, #12]
    1780:	2104      	movs	r1, #4
    1782:	4628      	mov	r0, r5
    1784:	4798      	blx	r3
    1786:	e7e5      	b.n	1754 <CAN1_Handler+0x44>
    1788:	20000108 	.word	0x20000108

0000178c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    178c:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    178e:	4a08      	ldr	r2, [pc, #32]	; (17b0 <_init_chip+0x24>)
    1790:	8813      	ldrh	r3, [r2, #0]
    1792:	b29b      	uxth	r3, r3
    1794:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1796:	4b07      	ldr	r3, [pc, #28]	; (17b4 <_init_chip+0x28>)
    1798:	4798      	blx	r3
	_oscctrl_init_sources();
    179a:	4b07      	ldr	r3, [pc, #28]	; (17b8 <_init_chip+0x2c>)
    179c:	4798      	blx	r3
	_mclk_init();
    179e:	4b07      	ldr	r3, [pc, #28]	; (17bc <_init_chip+0x30>)
    17a0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    17a2:	4b07      	ldr	r3, [pc, #28]	; (17c0 <_init_chip+0x34>)
    17a4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    17a6:	f640 70ff 	movw	r0, #4095	; 0xfff
    17aa:	4b06      	ldr	r3, [pc, #24]	; (17c4 <_init_chip+0x38>)
    17ac:	4798      	blx	r3
    17ae:	bd08      	pop	{r3, pc}
    17b0:	41004000 	.word	0x41004000
    17b4:	00001af5 	.word	0x00001af5
    17b8:	00001b15 	.word	0x00001b15
    17bc:	00001ae9 	.word	0x00001ae9
    17c0:	00001b31 	.word	0x00001b31
    17c4:	00001ac5 	.word	0x00001ac5

000017c8 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    17c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    17cc:	b082      	sub	sp, #8
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
    17ce:	4b32      	ldr	r3, [pc, #200]	; (1898 <_ext_irq_handler+0xd0>)
    17d0:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    17d2:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    17d4:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
    17d6:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
    17d8:	4b30      	ldr	r3, [pc, #192]	; (189c <_ext_irq_handler+0xd4>)
    17da:	6818      	ldr	r0, [r3, #0]
    17dc:	f44f 7288 	mov.w	r2, #272	; 0x110
    17e0:	492f      	ldr	r1, [pc, #188]	; (18a0 <_ext_irq_handler+0xd8>)
    17e2:	3000      	adds	r0, #0
    17e4:	bf18      	it	ne
    17e6:	2001      	movne	r0, #1
    17e8:	4b2e      	ldr	r3, [pc, #184]	; (18a4 <_ext_irq_handler+0xdc>)
    17ea:	4798      	blx	r3

	while (flags) {
    17ec:	9b01      	ldr	r3, [sp, #4]
    17ee:	2b00      	cmp	r3, #0
    17f0:	d04f      	beq.n	1892 <_ext_irq_handler+0xca>
    17f2:	f04f 36ff 	mov.w	r6, #4294967295
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    17f6:	4d2c      	ldr	r5, [pc, #176]	; (18a8 <_ext_irq_handler+0xe0>)
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
    17f8:	4f28      	ldr	r7, [pc, #160]	; (189c <_ext_irq_handler+0xd4>)
	return ((Eic *)hw)->INTFLAG.reg;
    17fa:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1898 <_ext_irq_handler+0xd0>
    17fe:	e03d      	b.n	187c <_ext_irq_handler+0xb4>
				if (_map[middle].extint == pos) {
    1800:	f04f 0e05 	mov.w	lr, #5
					pin = _map[middle].pin;
    1804:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
    1808:	f8de 6004 	ldr.w	r6, [lr, #4]
			if (INVALID_PIN_NUMBER != pin) {
    180c:	f1b6 3fff 	cmp.w	r6, #4294967295
    1810:	d002      	beq.n	1818 <_ext_irq_handler+0x50>
				callback(pin);
    1812:	4630      	mov	r0, r6
    1814:	683b      	ldr	r3, [r7, #0]
    1816:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1818:	9b01      	ldr	r3, [sp, #4]
    181a:	2201      	movs	r2, #1
    181c:	fa02 f404 	lsl.w	r4, r2, r4
    1820:	ea23 0404 	bic.w	r4, r3, r4
    1824:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    1826:	9a01      	ldr	r2, [sp, #4]
    1828:	fa92 f3a2 	rbit	r3, r2
    182c:	fab3 f383 	clz	r3, r3
    1830:	2a00      	cmp	r2, #0
		while (-1 != pos) {
    1832:	bf08      	it	eq
    1834:	f04f 33ff 	moveq.w	r3, #4294967295
    1838:	d018      	beq.n	186c <_ext_irq_handler+0xa4>
				if (_map[middle].extint == pos) {
    183a:	461c      	mov	r4, r3
    183c:	2b08      	cmp	r3, #8
    183e:	d0df      	beq.n	1800 <_ext_irq_handler+0x38>
    1840:	2208      	movs	r2, #8
    1842:	2305      	movs	r3, #5
    1844:	200b      	movs	r0, #11
    1846:	2100      	movs	r1, #0
				if (_map[middle].extint < pos) {
    1848:	4294      	cmp	r4, r2
					lower = middle + 1;
    184a:	bfc7      	ittee	gt
    184c:	3301      	addgt	r3, #1
    184e:	b2d9      	uxtbgt	r1, r3
					upper = middle - 1;
    1850:	f103 33ff 	addle.w	r3, r3, #4294967295
    1854:	b2d8      	uxtble	r0, r3
			while (upper >= lower) {
    1856:	4281      	cmp	r1, r0
    1858:	d8d8      	bhi.n	180c <_ext_irq_handler+0x44>
				middle = (upper + lower) >> 1;
    185a:	1843      	adds	r3, r0, r1
    185c:	f3c3 0347 	ubfx	r3, r3, #1, #8
    1860:	469e      	mov	lr, r3
				if (_map[middle].extint == pos) {
    1862:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    1866:	42a2      	cmp	r2, r4
    1868:	d1ee      	bne.n	1848 <_ext_irq_handler+0x80>
    186a:	e7cb      	b.n	1804 <_ext_irq_handler+0x3c>
    186c:	f8d8 3014 	ldr.w	r3, [r8, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    1870:	9301      	str	r3, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1872:	9b01      	ldr	r3, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1874:	f8c8 3014 	str.w	r3, [r8, #20]
	while (flags) {
    1878:	9b01      	ldr	r3, [sp, #4]
    187a:	b153      	cbz	r3, 1892 <_ext_irq_handler+0xca>
		pos = ffs(flags) - 1;
    187c:	9a01      	ldr	r2, [sp, #4]
    187e:	fa92 f3a2 	rbit	r3, r2
    1882:	fab3 f383 	clz	r3, r3
    1886:	2a00      	cmp	r2, #0
		while (-1 != pos) {
    1888:	bf08      	it	eq
    188a:	f04f 33ff 	moveq.w	r3, #4294967295
    188e:	d1d4      	bne.n	183a <_ext_irq_handler+0x72>
    1890:	e7ec      	b.n	186c <_ext_irq_handler+0xa4>
	}
}
    1892:	b002      	add	sp, #8
    1894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1898:	40002800 	.word	0x40002800
    189c:	20000134 	.word	0x20000134
    18a0:	000037c4 	.word	0x000037c4
    18a4:	000015fd 	.word	0x000015fd
    18a8:	0000376c 	.word	0x0000376c

000018ac <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    18ac:	4b61      	ldr	r3, [pc, #388]	; (1a34 <_ext_irq_init+0x188>)
    18ae:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    18b0:	f013 0f01 	tst.w	r3, #1
    18b4:	d11f      	bne.n	18f6 <_ext_irq_init+0x4a>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    18b6:	4a5f      	ldr	r2, [pc, #380]	; (1a34 <_ext_irq_init+0x188>)
    18b8:	6853      	ldr	r3, [r2, #4]
    18ba:	f013 0f03 	tst.w	r3, #3
    18be:	d1fb      	bne.n	18b8 <_ext_irq_init+0xc>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    18c0:	4b5c      	ldr	r3, [pc, #368]	; (1a34 <_ext_irq_init+0x188>)
    18c2:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    18c4:	f013 0f02 	tst.w	r3, #2
    18c8:	d00d      	beq.n	18e6 <_ext_irq_init+0x3a>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    18ca:	4a5a      	ldr	r2, [pc, #360]	; (1a34 <_ext_irq_init+0x188>)
    18cc:	7813      	ldrb	r3, [r2, #0]
    18ce:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    18d2:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    18d4:	6853      	ldr	r3, [r2, #4]
    18d6:	f013 0f03 	tst.w	r3, #3
    18da:	d1fb      	bne.n	18d4 <_ext_irq_init+0x28>
    18dc:	4a55      	ldr	r2, [pc, #340]	; (1a34 <_ext_irq_init+0x188>)
    18de:	6853      	ldr	r3, [r2, #4]
    18e0:	f013 0f02 	tst.w	r3, #2
    18e4:	d1fb      	bne.n	18de <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    18e6:	2201      	movs	r2, #1
    18e8:	4b52      	ldr	r3, [pc, #328]	; (1a34 <_ext_irq_init+0x188>)
    18ea:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    18ec:	461a      	mov	r2, r3
    18ee:	6853      	ldr	r3, [r2, #4]
    18f0:	f013 0f03 	tst.w	r3, #3
    18f4:	d1fb      	bne.n	18ee <_ext_irq_init+0x42>
    18f6:	4a4f      	ldr	r2, [pc, #316]	; (1a34 <_ext_irq_init+0x188>)
    18f8:	6853      	ldr	r3, [r2, #4]
    18fa:	f013 0f01 	tst.w	r3, #1
    18fe:	d1fb      	bne.n	18f8 <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
    1900:	4a4c      	ldr	r2, [pc, #304]	; (1a34 <_ext_irq_init+0x188>)
    1902:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    1904:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    1908:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    190a:	6853      	ldr	r3, [r2, #4]
    190c:	f013 0f03 	tst.w	r3, #3
    1910:	d1fb      	bne.n	190a <_ext_irq_init+0x5e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1912:	4b48      	ldr	r3, [pc, #288]	; (1a34 <_ext_irq_init+0x188>)
    1914:	2200      	movs	r2, #0
    1916:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1918:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    191a:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    191c:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    191e:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    1920:	61da      	str	r2, [r3, #28]
    1922:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1924:	781a      	ldrb	r2, [r3, #0]
    1926:	f042 0202 	orr.w	r2, r2, #2
    192a:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    192c:	461a      	mov	r2, r3
    192e:	6853      	ldr	r3, [r2, #4]
    1930:	f013 0f03 	tst.w	r3, #3
    1934:	d1fb      	bne.n	192e <_ext_irq_init+0x82>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1936:	4b40      	ldr	r3, [pc, #256]	; (1a38 <_ext_irq_init+0x18c>)
    1938:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    193c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1940:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1944:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1948:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    194c:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    194e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1952:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1956:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    195a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    195e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1962:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1964:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    196c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1970:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1974:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1978:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    197a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    197e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1982:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1986:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    198a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    198e:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1990:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1998:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    199c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19a0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19a4:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    19aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    19ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19b2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19b6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19ba:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    19c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    19c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19c8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19cc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19d0:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19d2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    19d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    19da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19de:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19e2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19e6:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19e8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    19ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    19f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19f4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19fc:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    1a02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1a06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a0a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a0e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a12:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    1a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1a1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a20:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a24:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a28:	601a      	str	r2, [r3, #0]
	callback = cb;
    1a2a:	4b04      	ldr	r3, [pc, #16]	; (1a3c <_ext_irq_init+0x190>)
    1a2c:	6018      	str	r0, [r3, #0]
}
    1a2e:	2000      	movs	r0, #0
    1a30:	4770      	bx	lr
    1a32:	bf00      	nop
    1a34:	40002800 	.word	0x40002800
    1a38:	e000e100 	.word	0xe000e100
    1a3c:	20000134 	.word	0x20000134

00001a40 <EIC_3_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_3_Handler(void)
{
    1a40:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1a42:	4b01      	ldr	r3, [pc, #4]	; (1a48 <EIC_3_Handler+0x8>)
    1a44:	4798      	blx	r3
    1a46:	bd08      	pop	{r3, pc}
    1a48:	000017c9 	.word	0x000017c9

00001a4c <EIC_4_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    1a4c:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1a4e:	4b01      	ldr	r3, [pc, #4]	; (1a54 <EIC_4_Handler+0x8>)
    1a50:	4798      	blx	r3
    1a52:	bd08      	pop	{r3, pc}
    1a54:	000017c9 	.word	0x000017c9

00001a58 <EIC_5_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    1a58:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1a5a:	4b01      	ldr	r3, [pc, #4]	; (1a60 <EIC_5_Handler+0x8>)
    1a5c:	4798      	blx	r3
    1a5e:	bd08      	pop	{r3, pc}
    1a60:	000017c9 	.word	0x000017c9

00001a64 <EIC_6_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    1a64:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1a66:	4b01      	ldr	r3, [pc, #4]	; (1a6c <EIC_6_Handler+0x8>)
    1a68:	4798      	blx	r3
    1a6a:	bd08      	pop	{r3, pc}
    1a6c:	000017c9 	.word	0x000017c9

00001a70 <EIC_7_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    1a70:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1a72:	4b01      	ldr	r3, [pc, #4]	; (1a78 <EIC_7_Handler+0x8>)
    1a74:	4798      	blx	r3
    1a76:	bd08      	pop	{r3, pc}
    1a78:	000017c9 	.word	0x000017c9

00001a7c <EIC_8_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    1a7c:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1a7e:	4b01      	ldr	r3, [pc, #4]	; (1a84 <EIC_8_Handler+0x8>)
    1a80:	4798      	blx	r3
    1a82:	bd08      	pop	{r3, pc}
    1a84:	000017c9 	.word	0x000017c9

00001a88 <EIC_9_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    1a88:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1a8a:	4b01      	ldr	r3, [pc, #4]	; (1a90 <EIC_9_Handler+0x8>)
    1a8c:	4798      	blx	r3
    1a8e:	bd08      	pop	{r3, pc}
    1a90:	000017c9 	.word	0x000017c9

00001a94 <EIC_10_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_10_Handler(void)
{
    1a94:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1a96:	4b01      	ldr	r3, [pc, #4]	; (1a9c <EIC_10_Handler+0x8>)
    1a98:	4798      	blx	r3
    1a9a:	bd08      	pop	{r3, pc}
    1a9c:	000017c9 	.word	0x000017c9

00001aa0 <EIC_11_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_11_Handler(void)
{
    1aa0:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1aa2:	4b01      	ldr	r3, [pc, #4]	; (1aa8 <EIC_11_Handler+0x8>)
    1aa4:	4798      	blx	r3
    1aa6:	bd08      	pop	{r3, pc}
    1aa8:	000017c9 	.word	0x000017c9

00001aac <EIC_14_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_14_Handler(void)
{
    1aac:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1aae:	4b01      	ldr	r3, [pc, #4]	; (1ab4 <EIC_14_Handler+0x8>)
    1ab0:	4798      	blx	r3
    1ab2:	bd08      	pop	{r3, pc}
    1ab4:	000017c9 	.word	0x000017c9

00001ab8 <EIC_15_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_15_Handler(void)
{
    1ab8:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1aba:	4b01      	ldr	r3, [pc, #4]	; (1ac0 <EIC_15_Handler+0x8>)
    1abc:	4798      	blx	r3
    1abe:	bd08      	pop	{r3, pc}
    1ac0:	000017c9 	.word	0x000017c9

00001ac4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1ac4:	f010 0f01 	tst.w	r0, #1
    1ac8:	d008      	beq.n	1adc <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1aca:	4a05      	ldr	r2, [pc, #20]	; (1ae0 <_gclk_init_generators_by_fref+0x1c>)
    1acc:	4b05      	ldr	r3, [pc, #20]	; (1ae4 <_gclk_init_generators_by_fref+0x20>)
    1ace:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1ad0:	4619      	mov	r1, r3
    1ad2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1ad6:	684b      	ldr	r3, [r1, #4]
    1ad8:	4213      	tst	r3, r2
    1ada:	d1fc      	bne.n	1ad6 <_gclk_init_generators_by_fref+0x12>
    1adc:	4770      	bx	lr
    1ade:	bf00      	nop
    1ae0:	00010101 	.word	0x00010101
    1ae4:	40001c00 	.word	0x40001c00

00001ae8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1ae8:	2201      	movs	r2, #1
    1aea:	4b01      	ldr	r3, [pc, #4]	; (1af0 <_mclk_init+0x8>)
    1aec:	715a      	strb	r2, [r3, #5]
    1aee:	4770      	bx	lr
    1af0:	40000800 	.word	0x40000800

00001af4 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1af4:	4b06      	ldr	r3, [pc, #24]	; (1b10 <_osc32kctrl_init_sources+0x1c>)
    1af6:	f242 0286 	movw	r2, #8326	; 0x2086
    1afa:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1afc:	2200      	movs	r2, #0
    1afe:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1b00:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1b02:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1b04:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1b08:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1b0a:	2201      	movs	r2, #1
    1b0c:	741a      	strb	r2, [r3, #16]
    1b0e:	4770      	bx	lr
    1b10:	40001400 	.word	0x40001400

00001b14 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1b14:	4a04      	ldr	r2, [pc, #16]	; (1b28 <_oscctrl_init_sources+0x14>)
    1b16:	4b05      	ldr	r3, [pc, #20]	; (1b2c <_oscctrl_init_sources+0x18>)
    1b18:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1b1a:	461a      	mov	r2, r3
    1b1c:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1b1e:	f013 0f02 	tst.w	r3, #2
    1b22:	d0fb      	beq.n	1b1c <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1b24:	4770      	bx	lr
    1b26:	bf00      	nop
    1b28:	03002606 	.word	0x03002606
    1b2c:	40001000 	.word	0x40001000

00001b30 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    1b30:	4770      	bx	lr
	...

00001b34 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1b34:	b500      	push	{lr}
    1b36:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1b38:	4b0d      	ldr	r3, [pc, #52]	; (1b70 <RAMECC_Handler+0x3c>)
    1b3a:	789b      	ldrb	r3, [r3, #2]
    1b3c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1b3e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1b40:	9b01      	ldr	r3, [sp, #4]
    1b42:	f013 0f02 	tst.w	r3, #2
    1b46:	d006      	beq.n	1b56 <RAMECC_Handler+0x22>
    1b48:	4b0a      	ldr	r3, [pc, #40]	; (1b74 <RAMECC_Handler+0x40>)
    1b4a:	681b      	ldr	r3, [r3, #0]
    1b4c:	b11b      	cbz	r3, 1b56 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1b4e:	4a08      	ldr	r2, [pc, #32]	; (1b70 <RAMECC_Handler+0x3c>)
    1b50:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1b52:	4798      	blx	r3
    1b54:	e009      	b.n	1b6a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1b56:	9b01      	ldr	r3, [sp, #4]
    1b58:	f013 0f01 	tst.w	r3, #1
    1b5c:	d005      	beq.n	1b6a <RAMECC_Handler+0x36>
    1b5e:	4b05      	ldr	r3, [pc, #20]	; (1b74 <RAMECC_Handler+0x40>)
    1b60:	685b      	ldr	r3, [r3, #4]
    1b62:	b113      	cbz	r3, 1b6a <RAMECC_Handler+0x36>
    1b64:	4a02      	ldr	r2, [pc, #8]	; (1b70 <RAMECC_Handler+0x3c>)
    1b66:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1b68:	4798      	blx	r3
	} else {
		return;
	}
}
    1b6a:	b003      	add	sp, #12
    1b6c:	f85d fb04 	ldr.w	pc, [sp], #4
    1b70:	41020000 	.word	0x41020000
    1b74:	2000047c 	.word	0x2000047c

00001b78 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1b78:	b470      	push	{r4, r5, r6}
    1b7a:	b089      	sub	sp, #36	; 0x24
    1b7c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1b7e:	466c      	mov	r4, sp
    1b80:	4d0d      	ldr	r5, [pc, #52]	; (1bb8 <_sercom_get_hardware_index+0x40>)
    1b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1b86:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1b8e:	9b00      	ldr	r3, [sp, #0]
    1b90:	42b3      	cmp	r3, r6
    1b92:	d00d      	beq.n	1bb0 <_sercom_get_hardware_index+0x38>
    1b94:	4631      	mov	r1, r6
    1b96:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1b98:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1b9a:	f853 2b04 	ldr.w	r2, [r3], #4
    1b9e:	428a      	cmp	r2, r1
    1ba0:	d007      	beq.n	1bb2 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1ba2:	3001      	adds	r0, #1
    1ba4:	2808      	cmp	r0, #8
    1ba6:	d1f8      	bne.n	1b9a <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1ba8:	2000      	movs	r0, #0
}
    1baa:	b009      	add	sp, #36	; 0x24
    1bac:	bc70      	pop	{r4, r5, r6}
    1bae:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1bb0:	2000      	movs	r0, #0
			return i;
    1bb2:	b2c0      	uxtb	r0, r0
    1bb4:	e7f9      	b.n	1baa <_sercom_get_hardware_index+0x32>
    1bb6:	bf00      	nop
    1bb8:	000037dc 	.word	0x000037dc

00001bbc <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1bbc:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1bbe:	4b03      	ldr	r3, [pc, #12]	; (1bcc <_sercom_get_irq_num+0x10>)
    1bc0:	4798      	blx	r3
    1bc2:	0080      	lsls	r0, r0, #2
    1bc4:	302e      	adds	r0, #46	; 0x2e
}
    1bc6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1bca:	bd08      	pop	{r3, pc}
    1bcc:	00001b79 	.word	0x00001b79

00001bd0 <_get_i2cm_index>:
{
    1bd0:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1bd2:	4b10      	ldr	r3, [pc, #64]	; (1c14 <_get_i2cm_index+0x44>)
    1bd4:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    1bd6:	2801      	cmp	r0, #1
    1bd8:	d018      	beq.n	1c0c <_get_i2cm_index+0x3c>
    1bda:	2802      	cmp	r0, #2
    1bdc:	d010      	beq.n	1c00 <_get_i2cm_index+0x30>
    1bde:	2804      	cmp	r0, #4
    1be0:	d010      	beq.n	1c04 <_get_i2cm_index+0x34>
    1be2:	2805      	cmp	r0, #5
    1be4:	d010      	beq.n	1c08 <_get_i2cm_index+0x38>
    1be6:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1be8:	bf08      	it	eq
    1bea:	2004      	moveq	r0, #4
		if (_i2cms[i].number == sercom_offset) {
    1bec:	d00f      	beq.n	1c0e <_get_i2cm_index+0x3e>
	ASSERT(false);
    1bee:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    1bf2:	4909      	ldr	r1, [pc, #36]	; (1c18 <_get_i2cm_index+0x48>)
    1bf4:	2000      	movs	r0, #0
    1bf6:	4b09      	ldr	r3, [pc, #36]	; (1c1c <_get_i2cm_index+0x4c>)
    1bf8:	4798      	blx	r3
	return -1;
    1bfa:	f04f 30ff 	mov.w	r0, #4294967295
}
    1bfe:	bd08      	pop	{r3, pc}
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1c00:	2001      	movs	r0, #1
    1c02:	e004      	b.n	1c0e <_get_i2cm_index+0x3e>
    1c04:	2002      	movs	r0, #2
    1c06:	e002      	b.n	1c0e <_get_i2cm_index+0x3e>
    1c08:	2003      	movs	r0, #3
    1c0a:	e000      	b.n	1c0e <_get_i2cm_index+0x3e>
    1c0c:	2000      	movs	r0, #0
			return i;
    1c0e:	b240      	sxtb	r0, r0
    1c10:	bd08      	pop	{r3, pc}
    1c12:	bf00      	nop
    1c14:	00001b79 	.word	0x00001b79
    1c18:	00003898 	.word	0x00003898
    1c1c:	000015fd 	.word	0x000015fd

00001c20 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    1c20:	b538      	push	{r3, r4, r5, lr}
    1c22:	4605      	mov	r5, r0
    1c24:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1c26:	4608      	mov	r0, r1
    1c28:	4b32      	ldr	r3, [pc, #200]	; (1cf4 <_i2c_m_sync_init_impl+0xd4>)
    1c2a:	4798      	blx	r3
    1c2c:	b2c0      	uxtb	r0, r0
	};
}

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1c2e:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1c30:	f013 0f01 	tst.w	r3, #1
    1c34:	d122      	bne.n	1c7c <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    1c36:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1c3a:	4a2f      	ldr	r2, [pc, #188]	; (1cf8 <_i2c_m_sync_init_impl+0xd8>)
    1c3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1c40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1c42:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1c46:	69e3      	ldr	r3, [r4, #28]
    1c48:	f013 0f03 	tst.w	r3, #3
    1c4c:	d1fb      	bne.n	1c46 <_i2c_m_sync_init_impl+0x26>
static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1c4e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    1c50:	f013 0f02 	tst.w	r3, #2
    1c54:	d00b      	beq.n	1c6e <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1c56:	6823      	ldr	r3, [r4, #0]
    1c58:	f023 0302 	bic.w	r3, r3, #2
    1c5c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1c5e:	69e3      	ldr	r3, [r4, #28]
    1c60:	f013 0f03 	tst.w	r3, #3
    1c64:	d1fb      	bne.n	1c5e <_i2c_m_sync_init_impl+0x3e>
    1c66:	69e3      	ldr	r3, [r4, #28]
    1c68:	f013 0f02 	tst.w	r3, #2
    1c6c:	d1fb      	bne.n	1c66 <_i2c_m_sync_init_impl+0x46>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    1c6e:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1c72:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1c74:	69e3      	ldr	r3, [r4, #28]
    1c76:	f013 0f03 	tst.w	r3, #3
    1c7a:	d1fb      	bne.n	1c74 <_i2c_m_sync_init_impl+0x54>
    1c7c:	69e3      	ldr	r3, [r4, #28]
    1c7e:	f013 0f01 	tst.w	r3, #1
    1c82:	d1fb      	bne.n	1c7c <_i2c_m_sync_init_impl+0x5c>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    1c84:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1c88:	4a1b      	ldr	r2, [pc, #108]	; (1cf8 <_i2c_m_sync_init_impl+0xd8>)
    1c8a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1c90:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1c92:	69e3      	ldr	r3, [r4, #28]
    1c94:	f013 0f03 	tst.w	r3, #3
    1c98:	d1fb      	bne.n	1c92 <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    1c9a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1c9e:	4916      	ldr	r1, [pc, #88]	; (1cf8 <_i2c_m_sync_init_impl+0xd8>)
    1ca0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    1ca6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ca8:	69e3      	ldr	r3, [r4, #28]
    1caa:	f013 0f04 	tst.w	r3, #4
    1cae:	d1fb      	bne.n	1ca8 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    1cb0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1cb4:	4910      	ldr	r1, [pc, #64]	; (1cf8 <_i2c_m_sync_init_impl+0xd8>)
    1cb6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1cbc:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    1cbe:	f3c2 6301 	ubfx	r3, r2, #24, #2
    1cc2:	81ab      	strh	r3, [r5, #12]

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    1cc4:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    1cc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    1cca:	2b01      	cmp	r3, #1
    1ccc:	bf94      	ite	ls
    1cce:	2300      	movls	r3, #0
    1cd0:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    1cd2:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    1cd6:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1cd8:	69e3      	ldr	r3, [r4, #28]
    1cda:	f013 0f04 	tst.w	r3, #4
    1cde:	d1fb      	bne.n	1cd8 <_i2c_m_sync_init_impl+0xb8>

	service->trise = _i2cms[i].trise;
    1ce0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1ce4:	4b04      	ldr	r3, [pc, #16]	; (1cf8 <_i2c_m_sync_init_impl+0xd8>)
    1ce6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    1cea:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    1cec:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    1cee:	2000      	movs	r0, #0
    1cf0:	bd38      	pop	{r3, r4, r5, pc}
    1cf2:	bf00      	nop
    1cf4:	00001bd1 	.word	0x00001bd1
    1cf8:	000037dc 	.word	0x000037dc

00001cfc <_sercom_i2c_m_irq_handler>:
{
    1cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d00:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    1d02:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1d04:	7e26      	ldrb	r6, [r4, #24]
    1d06:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    1d08:	f8df 8234 	ldr.w	r8, [pc, #564]	; 1f40 <_sercom_i2c_m_irq_handler+0x244>
    1d0c:	f240 421e 	movw	r2, #1054	; 0x41e
    1d10:	4641      	mov	r1, r8
    1d12:	3000      	adds	r0, #0
    1d14:	bf18      	it	ne
    1d16:	2001      	movne	r0, #1
    1d18:	4f88      	ldr	r7, [pc, #544]	; (1f3c <_sercom_i2c_m_irq_handler+0x240>)
    1d1a:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    1d1c:	6928      	ldr	r0, [r5, #16]
    1d1e:	f240 421f 	movw	r2, #1055	; 0x41f
    1d22:	4641      	mov	r1, r8
    1d24:	3000      	adds	r0, #0
    1d26:	bf18      	it	ne
    1d28:	2001      	movne	r0, #1
    1d2a:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    1d2c:	f016 0f80 	tst.w	r6, #128	; 0x80
    1d30:	f040 80f6 	bne.w	1f20 <_sercom_i2c_m_irq_handler+0x224>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1d34:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d36:	69e3      	ldr	r3, [r4, #28]
    1d38:	f013 0f04 	tst.w	r3, #4
    1d3c:	d1fb      	bne.n	1d36 <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1d3e:	8b63      	ldrh	r3, [r4, #26]
    1d40:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    1d42:	f016 0f01 	tst.w	r6, #1
    1d46:	f000 8092 	beq.w	1e6e <_sercom_i2c_m_irq_handler+0x172>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1d4a:	f013 0f02 	tst.w	r3, #2
    1d4e:	d024      	beq.n	1d9a <_sercom_i2c_m_irq_handler+0x9e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1d50:	2201      	movs	r2, #1
    1d52:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    1d54:	886a      	ldrh	r2, [r5, #2]
    1d56:	b292      	uxth	r2, r2
    1d58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    1d5c:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1d5e:	886a      	ldrh	r2, [r5, #2]
    1d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1d64:	0412      	lsls	r2, r2, #16
    1d66:	0c12      	lsrs	r2, r2, #16
    1d68:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1d6a:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    1d6e:	2b00      	cmp	r3, #0
    1d70:	bf14      	ite	ne
    1d72:	f06f 0104 	mvnne.w	r1, #4
    1d76:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1d7a:	886b      	ldrh	r3, [r5, #2]
    1d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1d80:	041b      	lsls	r3, r3, #16
    1d82:	0c1b      	lsrs	r3, r3, #16
    1d84:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    1d86:	696b      	ldr	r3, [r5, #20]
    1d88:	2b00      	cmp	r3, #0
    1d8a:	f000 80c7 	beq.w	1f1c <_sercom_i2c_m_irq_handler+0x220>
			i2c_dev->cb.error(i2c_dev, ret);
    1d8e:	4628      	mov	r0, r5
    1d90:	4798      	blx	r3
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    1d92:	2380      	movs	r3, #128	; 0x80
    1d94:	7623      	strb	r3, [r4, #24]
    1d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1d9a:	f013 0f04 	tst.w	r3, #4
    1d9e:	d124      	bne.n	1dea <_sercom_i2c_m_irq_handler+0xee>
			if (msg->flags & I2C_M_TEN) {
    1da0:	886b      	ldrh	r3, [r5, #2]
    1da2:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1da6:	d03e      	beq.n	1e26 <_sercom_i2c_m_irq_handler+0x12a>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1da8:	882b      	ldrh	r3, [r5, #0]
    1daa:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1dac:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1db0:	69e3      	ldr	r3, [r4, #28]
    1db2:	f013 0f04 	tst.w	r3, #4
    1db6:	d1fb      	bne.n	1db0 <_sercom_i2c_m_irq_handler+0xb4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    1dbe:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    1dc2:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1dc4:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1dc6:	69e3      	ldr	r3, [r4, #28]
    1dc8:	f013 0f04 	tst.w	r3, #4
    1dcc:	d1fb      	bne.n	1dc6 <_sercom_i2c_m_irq_handler+0xca>
				msg->flags &= ~I2C_M_TEN;
    1dce:	886b      	ldrh	r3, [r5, #2]
    1dd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    1dd4:	041b      	lsls	r3, r3, #16
    1dd6:	0c1b      	lsrs	r3, r3, #16
    1dd8:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    1dda:	69ab      	ldr	r3, [r5, #24]
    1ddc:	2b00      	cmp	r3, #0
    1dde:	f000 8088 	beq.w	1ef2 <_sercom_i2c_m_irq_handler+0x1f6>
			i2c_dev->cb.tx_complete(i2c_dev);
    1de2:	4628      	mov	r0, r5
    1de4:	4798      	blx	r3
    1de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    1dea:	686b      	ldr	r3, [r5, #4]
    1dec:	2b00      	cmp	r3, #0
    1dee:	dd04      	ble.n	1dfa <_sercom_i2c_m_irq_handler+0xfe>
					msg->flags |= I2C_M_FAIL;
    1df0:	886b      	ldrh	r3, [r5, #2]
    1df2:	b29b      	uxth	r3, r3
    1df4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1df8:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1dfa:	886b      	ldrh	r3, [r5, #2]
    1dfc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1e00:	d108      	bne.n	1e14 <_sercom_i2c_m_irq_handler+0x118>
				msg->flags &= ~I2C_M_BUSY;
    1e02:	886b      	ldrh	r3, [r5, #2]
    1e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1e08:	041b      	lsls	r3, r3, #16
    1e0a:	0c1b      	lsrs	r3, r3, #16
    1e0c:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1e0e:	f06f 0101 	mvn.w	r1, #1
    1e12:	e7b2      	b.n	1d7a <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1e14:	6863      	ldr	r3, [r4, #4]
    1e16:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1e1a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e1c:	69e3      	ldr	r3, [r4, #28]
    1e1e:	f013 0f04 	tst.w	r3, #4
    1e22:	d1fb      	bne.n	1e1c <_sercom_i2c_m_irq_handler+0x120>
    1e24:	e7ed      	b.n	1e02 <_sercom_i2c_m_irq_handler+0x106>
			if (msg->len == 0) {
    1e26:	686b      	ldr	r3, [r5, #4]
    1e28:	b99b      	cbnz	r3, 1e52 <_sercom_i2c_m_irq_handler+0x156>
				if (msg->flags & I2C_M_STOP) {
    1e2a:	886b      	ldrh	r3, [r5, #2]
    1e2c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1e30:	d106      	bne.n	1e40 <_sercom_i2c_m_irq_handler+0x144>
				msg->flags &= ~I2C_M_BUSY;
    1e32:	886b      	ldrh	r3, [r5, #2]
    1e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1e38:	041b      	lsls	r3, r3, #16
    1e3a:	0c1b      	lsrs	r3, r3, #16
    1e3c:	806b      	strh	r3, [r5, #2]
    1e3e:	e7cc      	b.n	1dda <_sercom_i2c_m_irq_handler+0xde>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1e40:	6863      	ldr	r3, [r4, #4]
    1e42:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1e46:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e48:	69e3      	ldr	r3, [r4, #28]
    1e4a:	f013 0f04 	tst.w	r3, #4
    1e4e:	d1fb      	bne.n	1e48 <_sercom_i2c_m_irq_handler+0x14c>
    1e50:	e7ef      	b.n	1e32 <_sercom_i2c_m_irq_handler+0x136>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1e52:	68ab      	ldr	r3, [r5, #8]
    1e54:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1e56:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e58:	69e3      	ldr	r3, [r4, #28]
    1e5a:	f013 0f04 	tst.w	r3, #4
    1e5e:	d1fb      	bne.n	1e58 <_sercom_i2c_m_irq_handler+0x15c>
				msg->buffer++;
    1e60:	68ab      	ldr	r3, [r5, #8]
    1e62:	3301      	adds	r3, #1
    1e64:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1e66:	686b      	ldr	r3, [r5, #4]
    1e68:	3b01      	subs	r3, #1
    1e6a:	606b      	str	r3, [r5, #4]
    1e6c:	e7b5      	b.n	1dda <_sercom_i2c_m_irq_handler+0xde>
	} else if (flags & SB_FLAG) {
    1e6e:	f016 0f02 	tst.w	r6, #2
    1e72:	d041      	beq.n	1ef8 <_sercom_i2c_m_irq_handler+0x1fc>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1e74:	686a      	ldr	r2, [r5, #4]
    1e76:	2a00      	cmp	r2, #0
    1e78:	d036      	beq.n	1ee8 <_sercom_i2c_m_irq_handler+0x1ec>
    1e7a:	f013 0f04 	tst.w	r3, #4
    1e7e:	d133      	bne.n	1ee8 <_sercom_i2c_m_irq_handler+0x1ec>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1e80:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    1e84:	3a01      	subs	r2, #1
    1e86:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1e88:	2a00      	cmp	r2, #0
    1e8a:	d137      	bne.n	1efc <_sercom_i2c_m_irq_handler+0x200>
    1e8c:	2900      	cmp	r1, #0
    1e8e:	d039      	beq.n	1f04 <_sercom_i2c_m_irq_handler+0x208>
				if (msg->flags & I2C_M_STOP) {
    1e90:	886b      	ldrh	r3, [r5, #2]
    1e92:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1e96:	d116      	bne.n	1ec6 <_sercom_i2c_m_irq_handler+0x1ca>
				msg->flags &= ~I2C_M_BUSY;
    1e98:	886b      	ldrh	r3, [r5, #2]
    1e9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1e9e:	041b      	lsls	r3, r3, #16
    1ea0:	0c1b      	lsrs	r3, r3, #16
    1ea2:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1ea4:	68aa      	ldr	r2, [r5, #8]
    1ea6:	1c53      	adds	r3, r2, #1
    1ea8:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1eaa:	69e3      	ldr	r3, [r4, #28]
    1eac:	f013 0f04 	tst.w	r3, #4
    1eb0:	d1fb      	bne.n	1eaa <_sercom_i2c_m_irq_handler+0x1ae>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1eb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1eb4:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1eb6:	2302      	movs	r3, #2
    1eb8:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    1eba:	69eb      	ldr	r3, [r5, #28]
    1ebc:	b1e3      	cbz	r3, 1ef8 <_sercom_i2c_m_irq_handler+0x1fc>
			i2c_dev->cb.rx_complete(i2c_dev);
    1ebe:	4628      	mov	r0, r5
    1ec0:	4798      	blx	r3
    1ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1ec6:	6863      	ldr	r3, [r4, #4]
    1ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1ecc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ece:	69e3      	ldr	r3, [r4, #28]
    1ed0:	f013 0f04 	tst.w	r3, #4
    1ed4:	d1fb      	bne.n	1ece <_sercom_i2c_m_irq_handler+0x1d2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1ed6:	6863      	ldr	r3, [r4, #4]
    1ed8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1edc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ede:	69e3      	ldr	r3, [r4, #28]
    1ee0:	f013 0f04 	tst.w	r3, #4
    1ee4:	d1fb      	bne.n	1ede <_sercom_i2c_m_irq_handler+0x1e2>
    1ee6:	e7d7      	b.n	1e98 <_sercom_i2c_m_irq_handler+0x19c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1ee8:	2302      	movs	r3, #2
    1eea:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1eec:	f06f 0101 	mvn.w	r1, #1
    1ef0:	e743      	b.n	1d7a <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    1ef2:	f016 0f02 	tst.w	r6, #2
    1ef6:	d1e0      	bne.n	1eba <_sercom_i2c_m_irq_handler+0x1be>
    1ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1efc:	2a01      	cmp	r2, #1
    1efe:	d1d1      	bne.n	1ea4 <_sercom_i2c_m_irq_handler+0x1a8>
    1f00:	2900      	cmp	r1, #0
    1f02:	d0cf      	beq.n	1ea4 <_sercom_i2c_m_irq_handler+0x1a8>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1f04:	6863      	ldr	r3, [r4, #4]
    1f06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1f0a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f0c:	69e3      	ldr	r3, [r4, #28]
    1f0e:	f013 0f04 	tst.w	r3, #4
    1f12:	d1fb      	bne.n	1f0c <_sercom_i2c_m_irq_handler+0x210>
			if (msg->len == 0) {
    1f14:	686b      	ldr	r3, [r5, #4]
    1f16:	2b00      	cmp	r3, #0
    1f18:	d0ba      	beq.n	1e90 <_sercom_i2c_m_irq_handler+0x194>
    1f1a:	e7c3      	b.n	1ea4 <_sercom_i2c_m_irq_handler+0x1a8>
    1f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1f20:	886b      	ldrh	r3, [r5, #2]
    1f22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1f26:	041b      	lsls	r3, r3, #16
    1f28:	0c1b      	lsrs	r3, r3, #16
    1f2a:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    1f2c:	696b      	ldr	r3, [r5, #20]
    1f2e:	2b00      	cmp	r3, #0
    1f30:	d0e2      	beq.n	1ef8 <_sercom_i2c_m_irq_handler+0x1fc>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    1f32:	f06f 0104 	mvn.w	r1, #4
    1f36:	4628      	mov	r0, r5
    1f38:	4798      	blx	r3
    1f3a:	e72a      	b.n	1d92 <_sercom_i2c_m_irq_handler+0x96>
    1f3c:	000015fd 	.word	0x000015fd
    1f40:	00003898 	.word	0x00003898

00001f44 <_i2c_m_async_init>:
{
    1f44:	b570      	push	{r4, r5, r6, lr}
    1f46:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    1f48:	4606      	mov	r6, r0
    1f4a:	f240 4292 	movw	r2, #1170	; 0x492
    1f4e:	4919      	ldr	r1, [pc, #100]	; (1fb4 <_i2c_m_async_init+0x70>)
    1f50:	3000      	adds	r0, #0
    1f52:	bf18      	it	ne
    1f54:	2001      	movne	r0, #1
    1f56:	4b18      	ldr	r3, [pc, #96]	; (1fb8 <_i2c_m_async_init+0x74>)
    1f58:	4798      	blx	r3
	i2c_dev->hw = hw;
    1f5a:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    1f5c:	4629      	mov	r1, r5
    1f5e:	4630      	mov	r0, r6
    1f60:	4b16      	ldr	r3, [pc, #88]	; (1fbc <_i2c_m_async_init+0x78>)
    1f62:	4798      	blx	r3
	if (init_status) {
    1f64:	4604      	mov	r4, r0
    1f66:	b108      	cbz	r0, 1f6c <_i2c_m_async_init+0x28>
}
    1f68:	4620      	mov	r0, r4
    1f6a:	bd70      	pop	{r4, r5, r6, pc}
	if (hw == SERCOM5) {
    1f6c:	4b14      	ldr	r3, [pc, #80]	; (1fc0 <_i2c_m_async_init+0x7c>)
    1f6e:	429d      	cmp	r5, r3
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    1f70:	bf04      	itt	eq
    1f72:	4b14      	ldreq	r3, [pc, #80]	; (1fc4 <_i2c_m_async_init+0x80>)
    1f74:	601e      	streq	r6, [r3, #0]
	uint8_t irq = _sercom_get_irq_num(hw);
    1f76:	4628      	mov	r0, r5
    1f78:	4b13      	ldr	r3, [pc, #76]	; (1fc8 <_i2c_m_async_init+0x84>)
    1f7a:	4798      	blx	r3
    1f7c:	1d01      	adds	r1, r0, #4
    1f7e:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f80:	2501      	movs	r5, #1
    1f82:	f000 021f 	and.w	r2, r0, #31
    1f86:	fa05 f202 	lsl.w	r2, r5, r2
    1f8a:	0943      	lsrs	r3, r0, #5
    1f8c:	009b      	lsls	r3, r3, #2
    1f8e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1f92:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1f9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f9e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1fa2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1fa6:	601a      	str	r2, [r3, #0]
		irq++;
    1fa8:	3001      	adds	r0, #1
    1faa:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    1fac:	4281      	cmp	r1, r0
    1fae:	d1e8      	bne.n	1f82 <_i2c_m_async_init+0x3e>
    1fb0:	e7da      	b.n	1f68 <_i2c_m_async_init+0x24>
    1fb2:	bf00      	nop
    1fb4:	00003898 	.word	0x00003898
    1fb8:	000015fd 	.word	0x000015fd
    1fbc:	00001c21 	.word	0x00001c21
    1fc0:	43000400 	.word	0x43000400
    1fc4:	20000138 	.word	0x20000138
    1fc8:	00001bbd 	.word	0x00001bbd

00001fcc <_i2c_m_async_transfer>:
{
    1fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fd0:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    1fd2:	4605      	mov	r5, r0
    1fd4:	f110 0800 	adds.w	r8, r0, #0
    1fd8:	bf18      	it	ne
    1fda:	f04f 0801 	movne.w	r8, #1
    1fde:	4f45      	ldr	r7, [pc, #276]	; (20f4 <_i2c_m_async_transfer+0x128>)
    1fe0:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
    1fe4:	4639      	mov	r1, r7
    1fe6:	4640      	mov	r0, r8
    1fe8:	4e43      	ldr	r6, [pc, #268]	; (20f8 <_i2c_m_async_transfer+0x12c>)
    1fea:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    1fec:	6928      	ldr	r0, [r5, #16]
    1fee:	f240 42e9 	movw	r2, #1257	; 0x4e9
    1ff2:	4639      	mov	r1, r7
    1ff4:	3000      	adds	r0, #0
    1ff6:	bf18      	it	ne
    1ff8:	2001      	movne	r0, #1
    1ffa:	47b0      	blx	r6
	ASSERT(msg);
    1ffc:	f240 42ea 	movw	r2, #1258	; 0x4ea
    2000:	4639      	mov	r1, r7
    2002:	1c20      	adds	r0, r4, #0
    2004:	bf18      	it	ne
    2006:	2001      	movne	r0, #1
    2008:	47b0      	blx	r6
	if (msg->len == 0) {
    200a:	6860      	ldr	r0, [r4, #4]
    200c:	2800      	cmp	r0, #0
    200e:	d06f      	beq.n	20f0 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    2010:	886b      	ldrh	r3, [r5, #2]
    2012:	f413 7f80 	tst.w	r3, #256	; 0x100
    2016:	d169      	bne.n	20ec <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    2018:	8863      	ldrh	r3, [r4, #2]
    201a:	b29b      	uxth	r3, r3
    201c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2020:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    2022:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    2026:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    202a:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    202c:	6853      	ldr	r3, [r2, #4]
    202e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2032:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2034:	69d3      	ldr	r3, [r2, #28]
    2036:	f013 0f04 	tst.w	r3, #4
    203a:	d1fb      	bne.n	2034 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    203c:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    203e:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    2040:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
    2044:	492b      	ldr	r1, [pc, #172]	; (20f4 <_i2c_m_async_transfer+0x128>)
    2046:	4640      	mov	r0, r8
    2048:	4b2b      	ldr	r3, [pc, #172]	; (20f8 <_i2c_m_async_transfer+0x12c>)
    204a:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    204c:	686b      	ldr	r3, [r5, #4]
    204e:	2b01      	cmp	r3, #1
    2050:	d02a      	beq.n	20a8 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    2052:	6863      	ldr	r3, [r4, #4]
    2054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    2058:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    205a:	69e3      	ldr	r3, [r4, #28]
    205c:	f013 0f04 	tst.w	r3, #4
    2060:	d1fb      	bne.n	205a <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    2062:	882b      	ldrh	r3, [r5, #0]
    2064:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2068:	d02a      	beq.n	20c0 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    206a:	886a      	ldrh	r2, [r5, #2]
    206c:	f012 0f01 	tst.w	r2, #1
    2070:	d004      	beq.n	207c <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    2072:	886a      	ldrh	r2, [r5, #2]
    2074:	b292      	uxth	r2, r2
    2076:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    207a:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    207c:	f240 72fe 	movw	r2, #2046	; 0x7fe
    2080:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    2084:	69e3      	ldr	r3, [r4, #28]
    2086:	f013 0f04 	tst.w	r3, #4
    208a:	d1fb      	bne.n	2084 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    208c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    208e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    2092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2096:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2098:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    209a:	69e3      	ldr	r3, [r4, #28]
    209c:	f013 0f04 	tst.w	r3, #4
    20a0:	d1fb      	bne.n	209a <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    20a2:	2000      	movs	r0, #0
    20a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    20a8:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    20ac:	d0d1      	beq.n	2052 <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    20ae:	6863      	ldr	r3, [r4, #4]
    20b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    20b4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    20b6:	69e3      	ldr	r3, [r4, #28]
    20b8:	f013 0f04 	tst.w	r3, #4
    20bc:	d1fb      	bne.n	20b6 <_i2c_m_async_transfer+0xea>
    20be:	e7d0      	b.n	2062 <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    20c0:	8869      	ldrh	r1, [r5, #2]
    20c2:	005a      	lsls	r2, r3, #1
    20c4:	b2d2      	uxtb	r2, r2
    20c6:	f001 0301 	and.w	r3, r1, #1
    20ca:	431a      	orrs	r2, r3
    20cc:	69e3      	ldr	r3, [r4, #28]
    20ce:	f013 0f04 	tst.w	r3, #4
    20d2:	d1fb      	bne.n	20cc <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    20d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    20d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    20da:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    20dc:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    20de:	69e3      	ldr	r3, [r4, #28]
    20e0:	f013 0f04 	tst.w	r3, #4
    20e4:	d1fb      	bne.n	20de <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    20e6:	2000      	movs	r0, #0
    20e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    20ec:	f06f 0003 	mvn.w	r0, #3
}
    20f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    20f4:	00003898 	.word	0x00003898
    20f8:	000015fd 	.word	0x000015fd

000020fc <_i2c_m_async_register_callback>:
	switch (type) {
    20fc:	2901      	cmp	r1, #1
    20fe:	d006      	beq.n	210e <_i2c_m_async_register_callback+0x12>
    2100:	b119      	cbz	r1, 210a <_i2c_m_async_register_callback+0xe>
    2102:	2902      	cmp	r1, #2
    2104:	d005      	beq.n	2112 <_i2c_m_async_register_callback+0x16>
}
    2106:	2000      	movs	r0, #0
    2108:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    210a:	6142      	str	r2, [r0, #20]
		break;
    210c:	e7fb      	b.n	2106 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    210e:	6182      	str	r2, [r0, #24]
		break;
    2110:	e7f9      	b.n	2106 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    2112:	61c2      	str	r2, [r0, #28]
		break;
    2114:	e7f7      	b.n	2106 <_i2c_m_async_register_callback+0xa>
	...

00002118 <_i2c_m_sync_init>:
{
    2118:	b538      	push	{r3, r4, r5, lr}
    211a:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    211c:	4604      	mov	r4, r0
    211e:	f44f 62a9 	mov.w	r2, #1352	; 0x548
    2122:	4906      	ldr	r1, [pc, #24]	; (213c <_i2c_m_sync_init+0x24>)
    2124:	3000      	adds	r0, #0
    2126:	bf18      	it	ne
    2128:	2001      	movne	r0, #1
    212a:	4b05      	ldr	r3, [pc, #20]	; (2140 <_i2c_m_sync_init+0x28>)
    212c:	4798      	blx	r3
	i2c_dev->hw = hw;
    212e:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    2130:	4629      	mov	r1, r5
    2132:	4620      	mov	r0, r4
    2134:	4b03      	ldr	r3, [pc, #12]	; (2144 <_i2c_m_sync_init+0x2c>)
    2136:	4798      	blx	r3
}
    2138:	bd38      	pop	{r3, r4, r5, pc}
    213a:	bf00      	nop
    213c:	00003898 	.word	0x00003898
    2140:	000015fd 	.word	0x000015fd
    2144:	00001c21 	.word	0x00001c21

00002148 <_i2c_m_sync_transfer>:
{
    2148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    214c:	4605      	mov	r5, r0
    214e:	460e      	mov	r6, r1
	void *   hw = i2c_dev->hw;
    2150:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    2152:	f110 0800 	adds.w	r8, r0, #0
    2156:	bf18      	it	ne
    2158:	f04f 0801 	movne.w	r8, #1
    215c:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 2424 <_i2c_m_sync_transfer+0x2dc>
    2160:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    2164:	4649      	mov	r1, r9
    2166:	4640      	mov	r0, r8
    2168:	4fad      	ldr	r7, [pc, #692]	; (2420 <_i2c_m_sync_transfer+0x2d8>)
    216a:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    216c:	6928      	ldr	r0, [r5, #16]
    216e:	f240 6201 	movw	r2, #1537	; 0x601
    2172:	4649      	mov	r1, r9
    2174:	3000      	adds	r0, #0
    2176:	bf18      	it	ne
    2178:	2001      	movne	r0, #1
    217a:	47b8      	blx	r7
	ASSERT(msg);
    217c:	f240 6202 	movw	r2, #1538	; 0x602
    2180:	4649      	mov	r1, r9
    2182:	1c30      	adds	r0, r6, #0
    2184:	bf18      	it	ne
    2186:	2001      	movne	r0, #1
    2188:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    218a:	886b      	ldrh	r3, [r5, #2]
    218c:	f413 7f80 	tst.w	r3, #256	; 0x100
    2190:	f040 8218 	bne.w	25c4 <_i2c_m_sync_transfer+0x47c>
	msg->flags |= I2C_M_BUSY;
    2194:	8873      	ldrh	r3, [r6, #2]
    2196:	b29b      	uxth	r3, r3
    2198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    219c:	8073      	strh	r3, [r6, #2]
	i2c_dev->service.msg = *msg;
    219e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    21a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    21a6:	6863      	ldr	r3, [r4, #4]
    21a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    21ac:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    21ae:	69e3      	ldr	r3, [r4, #28]
    21b0:	f013 0f04 	tst.w	r3, #4
    21b4:	d1fb      	bne.n	21ae <_i2c_m_sync_transfer+0x66>
	void *             hw    = i2c_dev->hw;
    21b6:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    21b8:	f8d7 9000 	ldr.w	r9, [r7]
	ASSERT(i2c_dev);
    21bc:	f240 52d5 	movw	r2, #1493	; 0x5d5
    21c0:	4998      	ldr	r1, [pc, #608]	; (2424 <_i2c_m_sync_transfer+0x2dc>)
    21c2:	4640      	mov	r0, r8
    21c4:	4b96      	ldr	r3, [pc, #600]	; (2420 <_i2c_m_sync_transfer+0x2d8>)
    21c6:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    21c8:	686b      	ldr	r3, [r5, #4]
    21ca:	2b01      	cmp	r3, #1
    21cc:	d05e      	beq.n	228c <_i2c_m_sync_transfer+0x144>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    21ce:	687b      	ldr	r3, [r7, #4]
    21d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    21d4:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    21d6:	69fb      	ldr	r3, [r7, #28]
    21d8:	f013 0f04 	tst.w	r3, #4
    21dc:	d1fb      	bne.n	21d6 <_i2c_m_sync_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    21de:	882b      	ldrh	r3, [r5, #0]
    21e0:	f413 6f80 	tst.w	r3, #1024	; 0x400
    21e4:	d05e      	beq.n	22a4 <_i2c_m_sync_transfer+0x15c>
		if (msg->flags & I2C_M_RD) {
    21e6:	886a      	ldrh	r2, [r5, #2]
    21e8:	f012 0f01 	tst.w	r2, #1
    21ec:	d004      	beq.n	21f8 <_i2c_m_sync_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    21ee:	886a      	ldrh	r2, [r5, #2]
    21f0:	b292      	uxth	r2, r2
    21f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    21f6:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    21f8:	f240 72fe 	movw	r2, #2046	; 0x7fe
    21fc:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    2200:	69fb      	ldr	r3, [r7, #28]
    2202:	f013 0f04 	tst.w	r3, #4
    2206:	d1fb      	bne.n	2200 <_i2c_m_sync_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    220a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    220e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2212:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2214:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2216:	69fb      	ldr	r3, [r7, #28]
    2218:	f013 0f04 	tst.w	r3, #4
    221c:	d1fb      	bne.n	2216 <_i2c_m_sync_transfer+0xce>
	void *   hw      = i2c_dev->hw;
    221e:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    2220:	7e0b      	ldrb	r3, [r1, #24]
    2222:	b2db      	uxtb	r3, r3
    2224:	f64f 72ff 	movw	r2, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    2228:	f013 0f03 	tst.w	r3, #3
    222c:	d103      	bne.n	2236 <_i2c_m_sync_transfer+0xee>
    222e:	7e0b      	ldrb	r3, [r1, #24]
    2230:	b2db      	uxtb	r3, r3
		if (timeout-- == 0) {
    2232:	3a01      	subs	r2, #1
    2234:	d1f8      	bne.n	2228 <_i2c_m_sync_transfer+0xe0>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2236:	6839      	ldr	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2238:	69fa      	ldr	r2, [r7, #28]
    223a:	f012 0f04 	tst.w	r2, #4
    223e:	d1fb      	bne.n	2238 <_i2c_m_sync_transfer+0xf0>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    2240:	8b7a      	ldrh	r2, [r7, #26]
    2242:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    2244:	f013 0f01 	tst.w	r3, #1
    2248:	f000 80a3 	beq.w	2392 <_i2c_m_sync_transfer+0x24a>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    224c:	f012 0f02 	tst.w	r2, #2
    2250:	d03c      	beq.n	22cc <_i2c_m_sync_transfer+0x184>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    2252:	2301      	movs	r3, #1
    2254:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
    2256:	886b      	ldrh	r3, [r5, #2]
    2258:	b29b      	uxth	r3, r3
    225a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    225e:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    2260:	886b      	ldrh	r3, [r5, #2]
    2262:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2266:	041b      	lsls	r3, r3, #16
    2268:	0c1b      	lsrs	r3, r3, #16
    226a:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    226c:	f002 0201 	and.w	r2, r2, #1
			return I2C_ERR_BAD_ADDRESS;
    2270:	2a00      	cmp	r2, #0
    2272:	bf14      	ite	ne
    2274:	f06f 0004 	mvnne.w	r0, #4
    2278:	f06f 0003 	mvneq.w	r0, #3
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    227c:	886b      	ldrh	r3, [r5, #2]
    227e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2282:	041b      	lsls	r3, r3, #16
    2284:	0c1b      	lsrs	r3, r3, #16
    2286:	806b      	strh	r3, [r5, #2]
		return ret;
    2288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (msg->len == 1 && sclsm) {
    228c:	f019 6f00 	tst.w	r9, #134217728	; 0x8000000
    2290:	d09d      	beq.n	21ce <_i2c_m_sync_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2298:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    229a:	69fb      	ldr	r3, [r7, #28]
    229c:	f013 0f04 	tst.w	r3, #4
    22a0:	d1fb      	bne.n	229a <_i2c_m_sync_transfer+0x152>
    22a2:	e79c      	b.n	21de <_i2c_m_sync_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    22a4:	8869      	ldrh	r1, [r5, #2]
    22a6:	005a      	lsls	r2, r3, #1
    22a8:	b2d2      	uxtb	r2, r2
    22aa:	f001 0301 	and.w	r3, r1, #1
    22ae:	431a      	orrs	r2, r3
    22b0:	69fb      	ldr	r3, [r7, #28]
    22b2:	f013 0f04 	tst.w	r3, #4
    22b6:	d1fb      	bne.n	22b0 <_i2c_m_sync_transfer+0x168>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    22b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    22ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    22be:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    22c0:	627a      	str	r2, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22c2:	69fb      	ldr	r3, [r7, #28]
    22c4:	f013 0f04 	tst.w	r3, #4
    22c8:	d1fb      	bne.n	22c2 <_i2c_m_sync_transfer+0x17a>
    22ca:	e7a8      	b.n	221e <_i2c_m_sync_transfer+0xd6>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    22cc:	f012 0f04 	tst.w	r2, #4
    22d0:	d11d      	bne.n	230e <_i2c_m_sync_transfer+0x1c6>
			if (msg->flags & I2C_M_TEN) {
    22d2:	886b      	ldrh	r3, [r5, #2]
    22d4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    22d8:	d037      	beq.n	234a <_i2c_m_sync_transfer+0x202>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    22da:	882b      	ldrh	r3, [r5, #0]
    22dc:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    22de:	f003 0206 	and.w	r2, r3, #6
    22e2:	69fb      	ldr	r3, [r7, #28]
    22e4:	f013 0f04 	tst.w	r3, #4
    22e8:	d1fb      	bne.n	22e2 <_i2c_m_sync_transfer+0x19a>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    22ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    22ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    22f0:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    22f4:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    22f6:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22f8:	69fb      	ldr	r3, [r7, #28]
    22fa:	f013 0f04 	tst.w	r3, #4
    22fe:	d1fb      	bne.n	22f8 <_i2c_m_sync_transfer+0x1b0>
				msg->flags &= ~I2C_M_TEN;
    2300:	886b      	ldrh	r3, [r5, #2]
    2302:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2306:	041b      	lsls	r3, r3, #16
    2308:	0c1b      	lsrs	r3, r3, #16
    230a:	806b      	strh	r3, [r5, #2]
    230c:	e069      	b.n	23e2 <_i2c_m_sync_transfer+0x29a>
				if (msg->len > 0) {
    230e:	686b      	ldr	r3, [r5, #4]
    2310:	2b00      	cmp	r3, #0
    2312:	dd04      	ble.n	231e <_i2c_m_sync_transfer+0x1d6>
					msg->flags |= I2C_M_FAIL;
    2314:	886b      	ldrh	r3, [r5, #2]
    2316:	b29b      	uxth	r3, r3
    2318:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    231c:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    231e:	886b      	ldrh	r3, [r5, #2]
    2320:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2324:	d108      	bne.n	2338 <_i2c_m_sync_transfer+0x1f0>
				msg->flags &= ~I2C_M_BUSY;
    2326:	886b      	ldrh	r3, [r5, #2]
    2328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    232c:	041b      	lsls	r3, r3, #16
    232e:	0c1b      	lsrs	r3, r3, #16
    2330:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    2332:	f06f 0001 	mvn.w	r0, #1
    2336:	e7a1      	b.n	227c <_i2c_m_sync_transfer+0x134>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2338:	687b      	ldr	r3, [r7, #4]
    233a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    233e:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2340:	69fb      	ldr	r3, [r7, #28]
    2342:	f013 0f04 	tst.w	r3, #4
    2346:	d1fb      	bne.n	2340 <_i2c_m_sync_transfer+0x1f8>
    2348:	e7ed      	b.n	2326 <_i2c_m_sync_transfer+0x1de>
			if (msg->len == 0) {
    234a:	686b      	ldr	r3, [r5, #4]
    234c:	b99b      	cbnz	r3, 2376 <_i2c_m_sync_transfer+0x22e>
				if (msg->flags & I2C_M_STOP) {
    234e:	886b      	ldrh	r3, [r5, #2]
    2350:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2354:	d106      	bne.n	2364 <_i2c_m_sync_transfer+0x21c>
				msg->flags &= ~I2C_M_BUSY;
    2356:	886b      	ldrh	r3, [r5, #2]
    2358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    235c:	041b      	lsls	r3, r3, #16
    235e:	0c1b      	lsrs	r3, r3, #16
    2360:	806b      	strh	r3, [r5, #2]
    2362:	e03e      	b.n	23e2 <_i2c_m_sync_transfer+0x29a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2364:	687b      	ldr	r3, [r7, #4]
    2366:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    236a:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    236c:	69fb      	ldr	r3, [r7, #28]
    236e:	f013 0f04 	tst.w	r3, #4
    2372:	d1fb      	bne.n	236c <_i2c_m_sync_transfer+0x224>
    2374:	e7ef      	b.n	2356 <_i2c_m_sync_transfer+0x20e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    2376:	68ab      	ldr	r3, [r5, #8]
    2378:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    237a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    237c:	69fb      	ldr	r3, [r7, #28]
    237e:	f013 0f04 	tst.w	r3, #4
    2382:	d1fb      	bne.n	237c <_i2c_m_sync_transfer+0x234>
				msg->buffer++;
    2384:	68ab      	ldr	r3, [r5, #8]
    2386:	3301      	adds	r3, #1
    2388:	60ab      	str	r3, [r5, #8]
				msg->len--;
    238a:	686b      	ldr	r3, [r5, #4]
    238c:	3b01      	subs	r3, #1
    238e:	606b      	str	r3, [r5, #4]
    2390:	e027      	b.n	23e2 <_i2c_m_sync_transfer+0x29a>
	} else if (flags & SB_FLAG) {
    2392:	f013 0f02 	tst.w	r3, #2
    2396:	d024      	beq.n	23e2 <_i2c_m_sync_transfer+0x29a>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    2398:	686b      	ldr	r3, [r5, #4]
    239a:	2b00      	cmp	r3, #0
    239c:	d03a      	beq.n	2414 <_i2c_m_sync_transfer+0x2cc>
    239e:	f012 0f04 	tst.w	r2, #4
    23a2:	d137      	bne.n	2414 <_i2c_m_sync_transfer+0x2cc>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    23a4:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    23a8:	3b01      	subs	r3, #1
    23aa:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    23ac:	2b00      	cmp	r3, #0
    23ae:	f040 810d 	bne.w	25cc <_i2c_m_sync_transfer+0x484>
    23b2:	2900      	cmp	r1, #0
    23b4:	f000 8110 	beq.w	25d8 <_i2c_m_sync_transfer+0x490>
				if (msg->flags & I2C_M_STOP) {
    23b8:	886b      	ldrh	r3, [r5, #2]
    23ba:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    23be:	d118      	bne.n	23f2 <_i2c_m_sync_transfer+0x2aa>
				msg->flags &= ~I2C_M_BUSY;
    23c0:	886b      	ldrh	r3, [r5, #2]
    23c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    23c6:	041b      	lsls	r3, r3, #16
    23c8:	0c1b      	lsrs	r3, r3, #16
    23ca:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    23cc:	68aa      	ldr	r2, [r5, #8]
    23ce:	1c53      	adds	r3, r2, #1
    23d0:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23d2:	69fb      	ldr	r3, [r7, #28]
    23d4:	f013 0f04 	tst.w	r3, #4
    23d8:	d1fb      	bne.n	23d2 <_i2c_m_sync_transfer+0x28a>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    23da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    23dc:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    23de:	2302      	movs	r3, #2
    23e0:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    23e2:	2200      	movs	r2, #0
	return I2C_OK;
    23e4:	4610      	mov	r0, r2
    23e6:	2702      	movs	r7, #2
			return I2C_NACK;
    23e8:	f06f 0c01 	mvn.w	ip, #1
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    23ec:	f04f 0e01 	mov.w	lr, #1
    23f0:	e0b0      	b.n	2554 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    23f2:	687b      	ldr	r3, [r7, #4]
    23f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    23f8:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23fa:	69fb      	ldr	r3, [r7, #28]
    23fc:	f013 0f04 	tst.w	r3, #4
    2400:	d1fb      	bne.n	23fa <_i2c_m_sync_transfer+0x2b2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2402:	687b      	ldr	r3, [r7, #4]
    2404:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2408:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    240a:	69fb      	ldr	r3, [r7, #28]
    240c:	f013 0f04 	tst.w	r3, #4
    2410:	d1fb      	bne.n	240a <_i2c_m_sync_transfer+0x2c2>
    2412:	e7d5      	b.n	23c0 <_i2c_m_sync_transfer+0x278>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2414:	2302      	movs	r3, #2
    2416:	763b      	strb	r3, [r7, #24]
    2418:	f06f 0001 	mvn.w	r0, #1
    241c:	e72e      	b.n	227c <_i2c_m_sync_transfer+0x134>
    241e:	bf00      	nop
    2420:	000015fd 	.word	0x000015fd
    2424:	00003898 	.word	0x00003898
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2428:	6863      	ldr	r3, [r4, #4]
    242a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    242e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2430:	69e3      	ldr	r3, [r4, #28]
    2432:	f013 0f04 	tst.w	r3, #4
    2436:	d1fb      	bne.n	2430 <_i2c_m_sync_transfer+0x2e8>
    2438:	e0a1      	b.n	257e <_i2c_m_sync_transfer+0x436>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    243a:	f012 0f04 	tst.w	r2, #4
    243e:	d11e      	bne.n	247e <_i2c_m_sync_transfer+0x336>
			if (msg->flags & I2C_M_TEN) {
    2440:	886b      	ldrh	r3, [r5, #2]
    2442:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2446:	d037      	beq.n	24b8 <_i2c_m_sync_transfer+0x370>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    2448:	882b      	ldrh	r3, [r5, #0]
    244a:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    244c:	f003 0206 	and.w	r2, r3, #6
    2450:	69e3      	ldr	r3, [r4, #28]
    2452:	f013 0f04 	tst.w	r3, #4
    2456:	d1fb      	bne.n	2450 <_i2c_m_sync_transfer+0x308>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2458:	6a63      	ldr	r3, [r4, #36]	; 0x24
    245a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    245e:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    2462:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2464:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2466:	69e3      	ldr	r3, [r4, #28]
    2468:	f013 0f04 	tst.w	r3, #4
    246c:	d1fb      	bne.n	2466 <_i2c_m_sync_transfer+0x31e>
				msg->flags &= ~I2C_M_TEN;
    246e:	886b      	ldrh	r3, [r5, #2]
    2470:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2474:	041b      	lsls	r3, r3, #16
    2476:	0c1b      	lsrs	r3, r3, #16
    2478:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    247a:	4602      	mov	r2, r0
    247c:	e06a      	b.n	2554 <_i2c_m_sync_transfer+0x40c>
				if (msg->len > 0) {
    247e:	686b      	ldr	r3, [r5, #4]
    2480:	2b00      	cmp	r3, #0
    2482:	dd04      	ble.n	248e <_i2c_m_sync_transfer+0x346>
					msg->flags |= I2C_M_FAIL;
    2484:	886b      	ldrh	r3, [r5, #2]
    2486:	b29b      	uxth	r3, r3
    2488:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    248c:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    248e:	886b      	ldrh	r3, [r5, #2]
    2490:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2494:	d107      	bne.n	24a6 <_i2c_m_sync_transfer+0x35e>
				msg->flags &= ~I2C_M_BUSY;
    2496:	886b      	ldrh	r3, [r5, #2]
    2498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    249c:	041b      	lsls	r3, r3, #16
    249e:	0c1b      	lsrs	r3, r3, #16
    24a0:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    24a2:	4662      	mov	r2, ip
    24a4:	e056      	b.n	2554 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    24a6:	6863      	ldr	r3, [r4, #4]
    24a8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    24ac:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    24ae:	69e3      	ldr	r3, [r4, #28]
    24b0:	f013 0f04 	tst.w	r3, #4
    24b4:	d1fb      	bne.n	24ae <_i2c_m_sync_transfer+0x366>
    24b6:	e7ee      	b.n	2496 <_i2c_m_sync_transfer+0x34e>
			if (msg->len == 0) {
    24b8:	686b      	ldr	r3, [r5, #4]
    24ba:	b9a3      	cbnz	r3, 24e6 <_i2c_m_sync_transfer+0x39e>
				if (msg->flags & I2C_M_STOP) {
    24bc:	886b      	ldrh	r3, [r5, #2]
    24be:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    24c2:	d107      	bne.n	24d4 <_i2c_m_sync_transfer+0x38c>
				msg->flags &= ~I2C_M_BUSY;
    24c4:	886b      	ldrh	r3, [r5, #2]
    24c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    24ca:	041b      	lsls	r3, r3, #16
    24cc:	0c1b      	lsrs	r3, r3, #16
    24ce:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
    24d0:	4602      	mov	r2, r0
    24d2:	e03f      	b.n	2554 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    24d4:	6863      	ldr	r3, [r4, #4]
    24d6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    24da:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    24dc:	69e3      	ldr	r3, [r4, #28]
    24de:	f013 0f04 	tst.w	r3, #4
    24e2:	d1fb      	bne.n	24dc <_i2c_m_sync_transfer+0x394>
    24e4:	e7ee      	b.n	24c4 <_i2c_m_sync_transfer+0x37c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    24e6:	68ab      	ldr	r3, [r5, #8]
    24e8:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    24ea:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    24ec:	69e3      	ldr	r3, [r4, #28]
    24ee:	f013 0f04 	tst.w	r3, #4
    24f2:	d1fb      	bne.n	24ec <_i2c_m_sync_transfer+0x3a4>
				msg->buffer++;
    24f4:	68ab      	ldr	r3, [r5, #8]
    24f6:	3301      	adds	r3, #1
    24f8:	60ab      	str	r3, [r5, #8]
				msg->len--;
    24fa:	686b      	ldr	r3, [r5, #4]
    24fc:	3b01      	subs	r3, #1
    24fe:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    2500:	4602      	mov	r2, r0
    2502:	e027      	b.n	2554 <_i2c_m_sync_transfer+0x40c>
	} else if (flags & SB_FLAG) {
    2504:	f013 0f02 	tst.w	r3, #2
    2508:	d057      	beq.n	25ba <_i2c_m_sync_transfer+0x472>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    250a:	686b      	ldr	r3, [r5, #4]
    250c:	2b00      	cmp	r3, #0
    250e:	d051      	beq.n	25b4 <_i2c_m_sync_transfer+0x46c>
    2510:	f012 0f04 	tst.w	r2, #4
    2514:	d14e      	bne.n	25b4 <_i2c_m_sync_transfer+0x46c>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    2516:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    251a:	3b01      	subs	r3, #1
    251c:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    251e:	2b00      	cmp	r3, #0
    2520:	f040 808c 	bne.w	263c <_i2c_m_sync_transfer+0x4f4>
    2524:	2900      	cmp	r1, #0
    2526:	f000 808f 	beq.w	2648 <_i2c_m_sync_transfer+0x500>
				if (msg->flags & I2C_M_STOP) {
    252a:	886b      	ldrh	r3, [r5, #2]
    252c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2530:	d12f      	bne.n	2592 <_i2c_m_sync_transfer+0x44a>
				msg->flags &= ~I2C_M_BUSY;
    2532:	886b      	ldrh	r3, [r5, #2]
    2534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2538:	041b      	lsls	r3, r3, #16
    253a:	0c1b      	lsrs	r3, r3, #16
    253c:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    253e:	68aa      	ldr	r2, [r5, #8]
    2540:	1c53      	adds	r3, r2, #1
    2542:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2544:	69e3      	ldr	r3, [r4, #28]
    2546:	f013 0f04 	tst.w	r3, #4
    254a:	d1fb      	bne.n	2544 <_i2c_m_sync_transfer+0x3fc>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    254c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    254e:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2550:	7627      	strb	r7, [r4, #24]
	return I2C_OK;
    2552:	4602      	mov	r2, r0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    2554:	886b      	ldrh	r3, [r5, #2]
    2556:	f413 7f80 	tst.w	r3, #256	; 0x100
    255a:	d030      	beq.n	25be <_i2c_m_sync_transfer+0x476>
	void *   hw      = i2c_dev->hw;
    255c:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    255e:	7e0b      	ldrb	r3, [r1, #24]
    2560:	b2db      	uxtb	r3, r3
    2562:	f64f 72ff 	movw	r2, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    2566:	f013 0f03 	tst.w	r3, #3
    256a:	d142      	bne.n	25f2 <_i2c_m_sync_transfer+0x4aa>
    256c:	7e0b      	ldrb	r3, [r1, #24]
    256e:	b2db      	uxtb	r3, r3
		if (timeout-- == 0) {
    2570:	3a01      	subs	r2, #1
    2572:	d1f8      	bne.n	2566 <_i2c_m_sync_transfer+0x41e>
			if (msg->flags & I2C_M_STOP) {
    2574:	8873      	ldrh	r3, [r6, #2]
    2576:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    257a:	f47f af55 	bne.w	2428 <_i2c_m_sync_transfer+0x2e0>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    257e:	886b      	ldrh	r3, [r5, #2]
    2580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2584:	041b      	lsls	r3, r3, #16
    2586:	0c1b      	lsrs	r3, r3, #16
    2588:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
    258a:	f06f 0004 	mvn.w	r0, #4
			return ret;
    258e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    2592:	6863      	ldr	r3, [r4, #4]
    2594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2598:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    259a:	69e3      	ldr	r3, [r4, #28]
    259c:	f013 0f04 	tst.w	r3, #4
    25a0:	d1fb      	bne.n	259a <_i2c_m_sync_transfer+0x452>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    25a2:	6863      	ldr	r3, [r4, #4]
    25a4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    25a8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    25aa:	69e3      	ldr	r3, [r4, #28]
    25ac:	f013 0f04 	tst.w	r3, #4
    25b0:	d1fb      	bne.n	25aa <_i2c_m_sync_transfer+0x462>
    25b2:	e7be      	b.n	2532 <_i2c_m_sync_transfer+0x3ea>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    25b4:	7627      	strb	r7, [r4, #24]
			return I2C_NACK;
    25b6:	4662      	mov	r2, ip
    25b8:	e7cc      	b.n	2554 <_i2c_m_sync_transfer+0x40c>
	return I2C_OK;
    25ba:	4602      	mov	r2, r0
    25bc:	e7ca      	b.n	2554 <_i2c_m_sync_transfer+0x40c>
    25be:	4610      	mov	r0, r2
    25c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return I2C_ERR_BUSY;
    25c4:	f06f 0005 	mvn.w	r0, #5
    25c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    25cc:	2b01      	cmp	r3, #1
    25ce:	f47f aefd 	bne.w	23cc <_i2c_m_sync_transfer+0x284>
    25d2:	2900      	cmp	r1, #0
    25d4:	f43f aefa 	beq.w	23cc <_i2c_m_sync_transfer+0x284>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    25d8:	687b      	ldr	r3, [r7, #4]
    25da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    25de:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    25e0:	69fb      	ldr	r3, [r7, #28]
    25e2:	f013 0f04 	tst.w	r3, #4
    25e6:	d1fb      	bne.n	25e0 <_i2c_m_sync_transfer+0x498>
			if (msg->len == 0) {
    25e8:	686b      	ldr	r3, [r5, #4]
    25ea:	2b00      	cmp	r3, #0
    25ec:	f43f aee4 	beq.w	23b8 <_i2c_m_sync_transfer+0x270>
    25f0:	e6ec      	b.n	23cc <_i2c_m_sync_transfer+0x284>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    25f2:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    25f4:	69e2      	ldr	r2, [r4, #28]
    25f6:	f012 0f04 	tst.w	r2, #4
    25fa:	d1fb      	bne.n	25f4 <_i2c_m_sync_transfer+0x4ac>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    25fc:	8b62      	ldrh	r2, [r4, #26]
    25fe:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    2600:	f013 0f01 	tst.w	r3, #1
    2604:	f43f af7e 	beq.w	2504 <_i2c_m_sync_transfer+0x3bc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    2608:	f012 0f02 	tst.w	r2, #2
    260c:	f43f af15 	beq.w	243a <_i2c_m_sync_transfer+0x2f2>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    2610:	f884 e018 	strb.w	lr, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    2614:	886b      	ldrh	r3, [r5, #2]
    2616:	b29b      	uxth	r3, r3
    2618:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    261c:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    261e:	886b      	ldrh	r3, [r5, #2]
    2620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2624:	041b      	lsls	r3, r3, #16
    2626:	0c1b      	lsrs	r3, r3, #16
    2628:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    262a:	f002 0201 	and.w	r2, r2, #1
			return I2C_ERR_BAD_ADDRESS;
    262e:	2a00      	cmp	r2, #0
    2630:	bf14      	ite	ne
    2632:	f06f 0204 	mvnne.w	r2, #4
    2636:	f06f 0203 	mvneq.w	r2, #3
    263a:	e78b      	b.n	2554 <_i2c_m_sync_transfer+0x40c>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    263c:	2b01      	cmp	r3, #1
    263e:	f47f af7e 	bne.w	253e <_i2c_m_sync_transfer+0x3f6>
    2642:	2900      	cmp	r1, #0
    2644:	f43f af7b 	beq.w	253e <_i2c_m_sync_transfer+0x3f6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2648:	6863      	ldr	r3, [r4, #4]
    264a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    264e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2650:	69e3      	ldr	r3, [r4, #28]
    2652:	f013 0f04 	tst.w	r3, #4
    2656:	d1fb      	bne.n	2650 <_i2c_m_sync_transfer+0x508>
			if (msg->len == 0) {
    2658:	686b      	ldr	r3, [r5, #4]
    265a:	2b00      	cmp	r3, #0
    265c:	f43f af65 	beq.w	252a <_i2c_m_sync_transfer+0x3e2>
    2660:	e76d      	b.n	253e <_i2c_m_sync_transfer+0x3f6>
    2662:	bf00      	nop

00002664 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    2664:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    2666:	4b02      	ldr	r3, [pc, #8]	; (2670 <SERCOM5_0_Handler+0xc>)
    2668:	6818      	ldr	r0, [r3, #0]
    266a:	4b02      	ldr	r3, [pc, #8]	; (2674 <SERCOM5_0_Handler+0x10>)
    266c:	4798      	blx	r3
    266e:	bd08      	pop	{r3, pc}
    2670:	20000138 	.word	0x20000138
    2674:	00001cfd 	.word	0x00001cfd

00002678 <SERCOM5_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    2678:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    267a:	4b02      	ldr	r3, [pc, #8]	; (2684 <SERCOM5_1_Handler+0xc>)
    267c:	6818      	ldr	r0, [r3, #0]
    267e:	4b02      	ldr	r3, [pc, #8]	; (2688 <SERCOM5_1_Handler+0x10>)
    2680:	4798      	blx	r3
    2682:	bd08      	pop	{r3, pc}
    2684:	20000138 	.word	0x20000138
    2688:	00001cfd 	.word	0x00001cfd

0000268c <SERCOM5_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    268c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    268e:	4b02      	ldr	r3, [pc, #8]	; (2698 <SERCOM5_2_Handler+0xc>)
    2690:	6818      	ldr	r0, [r3, #0]
    2692:	4b02      	ldr	r3, [pc, #8]	; (269c <SERCOM5_2_Handler+0x10>)
    2694:	4798      	blx	r3
    2696:	bd08      	pop	{r3, pc}
    2698:	20000138 	.word	0x20000138
    269c:	00001cfd 	.word	0x00001cfd

000026a0 <SERCOM5_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    26a0:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    26a2:	4b02      	ldr	r3, [pc, #8]	; (26ac <SERCOM5_3_Handler+0xc>)
    26a4:	6818      	ldr	r0, [r3, #0]
    26a6:	4b02      	ldr	r3, [pc, #8]	; (26b0 <SERCOM5_3_Handler+0x10>)
    26a8:	4798      	blx	r3
    26aa:	bd08      	pop	{r3, pc}
    26ac:	20000138 	.word	0x20000138
    26b0:	00001cfd 	.word	0x00001cfd

000026b4 <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    26b4:	b570      	push	{r4, r5, r6, lr}
    26b6:	4606      	mov	r6, r0
    26b8:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    26ba:	4608      	mov	r0, r1
    26bc:	4b5d      	ldr	r3, [pc, #372]	; (2834 <_spi_m_sync_init+0x180>)
    26be:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    26c0:	b168      	cbz	r0, 26de <_spi_m_sync_init+0x2a>
    26c2:	4603      	mov	r3, r0
    26c4:	2803      	cmp	r0, #3
    26c6:	bf08      	it	eq
    26c8:	2301      	moveq	r3, #1
    26ca:	d009      	beq.n	26e0 <_spi_m_sync_init+0x2c>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    26cc:	2e00      	cmp	r6, #0
    26ce:	f000 809f 	beq.w	2810 <_spi_m_sync_init+0x15c>
    26d2:	2c00      	cmp	r4, #0
    26d4:	f040 80a5 	bne.w	2822 <_spi_m_sync_init+0x16e>
	return NULL;
    26d8:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    26da:	2000      	movs	r0, #0
    26dc:	e009      	b.n	26f2 <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    26de:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    26e0:	4d55      	ldr	r5, [pc, #340]	; (2838 <_spi_m_sync_init+0x184>)
    26e2:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    26e6:	441d      	add	r5, r3
	ASSERT(dev && hw);
    26e8:	2e00      	cmp	r6, #0
    26ea:	d0f6      	beq.n	26da <_spi_m_sync_init+0x26>
    26ec:	2001      	movs	r0, #1
    26ee:	2c00      	cmp	r4, #0
    26f0:	d0f3      	beq.n	26da <_spi_m_sync_init+0x26>
    26f2:	f640 1289 	movw	r2, #2441	; 0x989
    26f6:	4951      	ldr	r1, [pc, #324]	; (283c <_spi_m_sync_init+0x188>)
    26f8:	4b51      	ldr	r3, [pc, #324]	; (2840 <_spi_m_sync_init+0x18c>)
    26fa:	4798      	blx	r3

	if (regs == NULL) {
    26fc:	2d00      	cmp	r5, #0
    26fe:	f000 8084 	beq.w	280a <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2702:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2704:	f013 0f01 	tst.w	r3, #1
    2708:	d11d      	bne.n	2746 <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    270a:	682b      	ldr	r3, [r5, #0]
    270c:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2710:	69e3      	ldr	r3, [r4, #28]
    2712:	f013 0f03 	tst.w	r3, #3
    2716:	d1fb      	bne.n	2710 <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2718:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    271a:	f013 0f02 	tst.w	r3, #2
    271e:	d00b      	beq.n	2738 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2720:	6823      	ldr	r3, [r4, #0]
    2722:	f023 0302 	bic.w	r3, r3, #2
    2726:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2728:	69e3      	ldr	r3, [r4, #28]
    272a:	f013 0f03 	tst.w	r3, #3
    272e:	d1fb      	bne.n	2728 <_spi_m_sync_init+0x74>
    2730:	69e3      	ldr	r3, [r4, #28]
    2732:	f013 0f02 	tst.w	r3, #2
    2736:	d1fb      	bne.n	2730 <_spi_m_sync_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    2738:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    273c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    273e:	69e3      	ldr	r3, [r4, #28]
    2740:	f013 0f03 	tst.w	r3, #3
    2744:	d1fb      	bne.n	273e <_spi_m_sync_init+0x8a>
    2746:	69e3      	ldr	r3, [r4, #28]
    2748:	f013 0f01 	tst.w	r3, #1
    274c:	d1fb      	bne.n	2746 <_spi_m_sync_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    274e:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    2750:	682b      	ldr	r3, [r5, #0]
    2752:	f003 031c 	and.w	r3, r3, #28
    2756:	2b08      	cmp	r3, #8
    2758:	d02e      	beq.n	27b8 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    275a:	f640 1236 	movw	r2, #2358	; 0x936
    275e:	4937      	ldr	r1, [pc, #220]	; (283c <_spi_m_sync_init+0x188>)
    2760:	1c20      	adds	r0, r4, #0
    2762:	bf18      	it	ne
    2764:	2001      	movne	r0, #1
    2766:	4b36      	ldr	r3, [pc, #216]	; (2840 <_spi_m_sync_init+0x18c>)
    2768:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    276a:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    276c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    2770:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2774:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2776:	69e3      	ldr	r3, [r4, #28]
    2778:	f013 0f03 	tst.w	r3, #3
    277c:	d1fb      	bne.n	2776 <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    277e:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    2780:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    2784:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    2788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    278c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    278e:	69e3      	ldr	r3, [r4, #28]
    2790:	f013 0f17 	tst.w	r3, #23
    2794:	d1fb      	bne.n	278e <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    2796:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2798:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    279a:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    279c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    27a0:	686b      	ldr	r3, [r5, #4]
    27a2:	f003 0307 	and.w	r3, r3, #7
    27a6:	2b00      	cmp	r3, #0
    27a8:	bf0c      	ite	eq
    27aa:	2301      	moveq	r3, #1
    27ac:	2302      	movne	r3, #2
    27ae:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    27b0:	89eb      	ldrh	r3, [r5, #14]
    27b2:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    27b4:	2000      	movs	r0, #0
    27b6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    27b8:	f640 124a 	movw	r2, #2378	; 0x94a
    27bc:	491f      	ldr	r1, [pc, #124]	; (283c <_spi_m_sync_init+0x188>)
    27be:	1c20      	adds	r0, r4, #0
    27c0:	bf18      	it	ne
    27c2:	2001      	movne	r0, #1
    27c4:	4b1e      	ldr	r3, [pc, #120]	; (2840 <_spi_m_sync_init+0x18c>)
    27c6:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    27c8:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    27ca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    27ce:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    27d2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    27d4:	69e3      	ldr	r3, [r4, #28]
    27d6:	f013 0f03 	tst.w	r3, #3
    27da:	d1fb      	bne.n	27d4 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    27dc:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    27de:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    27e2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    27e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    27ea:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    27ee:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    27f0:	69e3      	ldr	r3, [r4, #28]
    27f2:	f013 0f17 	tst.w	r3, #23
    27f6:	d1fb      	bne.n	27f0 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    27f8:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    27fa:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    27fc:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    27fe:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2802:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    2804:	2b00      	cmp	r3, #0
    2806:	d1fc      	bne.n	2802 <_spi_m_sync_init+0x14e>
    2808:	e7ca      	b.n	27a0 <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    280a:	f06f 000c 	mvn.w	r0, #12
    280e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    2810:	f640 1289 	movw	r2, #2441	; 0x989
    2814:	4909      	ldr	r1, [pc, #36]	; (283c <_spi_m_sync_init+0x188>)
    2816:	2000      	movs	r0, #0
    2818:	4b09      	ldr	r3, [pc, #36]	; (2840 <_spi_m_sync_init+0x18c>)
    281a:	4798      	blx	r3
		return ERR_INVALID_ARG;
    281c:	f06f 000c 	mvn.w	r0, #12
    2820:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    2822:	f640 1289 	movw	r2, #2441	; 0x989
    2826:	4905      	ldr	r1, [pc, #20]	; (283c <_spi_m_sync_init+0x188>)
    2828:	2001      	movs	r0, #1
    282a:	4b05      	ldr	r3, [pc, #20]	; (2840 <_spi_m_sync_init+0x18c>)
    282c:	4798      	blx	r3
		return ERR_INVALID_ARG;
    282e:	f06f 000c 	mvn.w	r0, #12
    2832:	bd70      	pop	{r4, r5, r6, pc}
    2834:	00001b79 	.word	0x00001b79
    2838:	00003874 	.word	0x00003874
    283c:	00003898 	.word	0x00003898
    2840:	000015fd 	.word	0x000015fd

00002844 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    2844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2848:	4681      	mov	r9, r0
    284a:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    284c:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    284e:	f8d1 8000 	ldr.w	r8, [r1]
    2852:	684d      	ldr	r5, [r1, #4]
    2854:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    2856:	b1a8      	cbz	r0, 2884 <_spi_m_sync_trans+0x40>
    2858:	1c20      	adds	r0, r4, #0
    285a:	bf18      	it	ne
    285c:	2001      	movne	r0, #1
    285e:	f640 22ed 	movw	r2, #2797	; 0xaed
    2862:	492e      	ldr	r1, [pc, #184]	; (291c <_spi_m_sync_trans+0xd8>)
    2864:	4b2e      	ldr	r3, [pc, #184]	; (2920 <_spi_m_sync_trans+0xdc>)
    2866:	4798      	blx	r3
    2868:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    286a:	f013 0f07 	tst.w	r3, #7
    286e:	d134      	bne.n	28da <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2870:	69e0      	ldr	r0, [r4, #28]
    2872:	f010 0003 	ands.w	r0, r0, #3
    2876:	d1fb      	bne.n	2870 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2878:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    287a:	f013 0f02 	tst.w	r3, #2
    287e:	d030      	beq.n	28e2 <_spi_m_sync_trans+0x9e>
    2880:	4602      	mov	r2, r0
    2882:	e008      	b.n	2896 <_spi_m_sync_trans+0x52>
    2884:	2000      	movs	r0, #0
    2886:	e7ea      	b.n	285e <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    2888:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    288a:	f013 0f80 	tst.w	r3, #128	; 0x80
    288e:	d112      	bne.n	28b6 <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2890:	68b3      	ldr	r3, [r6, #8]
    2892:	4283      	cmp	r3, r0
    2894:	d91e      	bls.n	28d4 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    2896:	7e23      	ldrb	r3, [r4, #24]
    2898:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    289a:	f013 0f04 	tst.w	r3, #4
    289e:	d024      	beq.n	28ea <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    28a0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    28a2:	2d00      	cmp	r5, #0
    28a4:	d0f0      	beq.n	2888 <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    28a6:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    28a8:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    28aa:	bf91      	iteee	ls
    28ac:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    28ae:	0a09      	lsrhi	r1, r1, #8
    28b0:	7069      	strbhi	r1, [r5, #1]
    28b2:	3502      	addhi	r5, #2
    28b4:	e7e8      	b.n	2888 <_spi_m_sync_trans+0x44>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    28b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    28ba:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    28bc:	2380      	movs	r3, #128	; 0x80
    28be:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    28c0:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    28c4:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    28c6:	f013 0f03 	tst.w	r3, #3
    28ca:	d0fb      	beq.n	28c4 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    28cc:	2303      	movs	r3, #3
    28ce:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    28d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    28d4:	4293      	cmp	r3, r2
    28d6:	d8de      	bhi.n	2896 <_spi_m_sync_trans+0x52>
    28d8:	e7f4      	b.n	28c4 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    28da:	f06f 0003 	mvn.w	r0, #3
    28de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    28e2:	f06f 0013 	mvn.w	r0, #19
    28e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    28ea:	4290      	cmp	r0, r2
    28ec:	d8cd      	bhi.n	288a <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    28ee:	f013 0f01 	tst.w	r3, #1
    28f2:	d0ca      	beq.n	288a <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    28f4:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    28f8:	f1b8 0f00 	cmp.w	r8, #0
    28fc:	d00b      	beq.n	2916 <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    28fe:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    2902:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    2904:	bf91      	iteee	ls
    2906:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    290a:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    290e:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    2912:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    2916:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    2918:	62a1      	str	r1, [r4, #40]	; 0x28
    291a:	e7b6      	b.n	288a <_spi_m_sync_trans+0x46>
    291c:	00003898 	.word	0x00003898
    2920:	000015fd 	.word	0x000015fd

00002924 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    2924:	2000      	movs	r0, #0
    2926:	4770      	bx	lr

00002928 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    2928:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    292a:	7c83      	ldrb	r3, [r0, #18]
    292c:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2930:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    2932:	f002 0107 	and.w	r1, r2, #7
    2936:	2901      	cmp	r1, #1
    2938:	d00b      	beq.n	2952 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    293a:	015a      	lsls	r2, r3, #5
    293c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2940:	2110      	movs	r1, #16
    2942:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    2946:	015b      	lsls	r3, r3, #5
    2948:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    294c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    2950:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    2952:	f012 0f40 	tst.w	r2, #64	; 0x40
    2956:	d00c      	beq.n	2972 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    2958:	7cc2      	ldrb	r2, [r0, #19]
    295a:	f36f 1286 	bfc	r2, #6, #1
    295e:	74c2      	strb	r2, [r0, #19]
    2960:	015a      	lsls	r2, r3, #5
    2962:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2966:	2180      	movs	r1, #128	; 0x80
    2968:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    296c:	2140      	movs	r1, #64	; 0x40
    296e:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    2972:	7cc2      	ldrb	r2, [r0, #19]
    2974:	f36f 02c3 	bfc	r2, #3, #1
    2978:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    297a:	4909      	ldr	r1, [pc, #36]	; (29a0 <_usb_d_dev_handle_setup+0x78>)
    297c:	015a      	lsls	r2, r3, #5
    297e:	188c      	adds	r4, r1, r2
    2980:	2500      	movs	r5, #0
    2982:	72a5      	strb	r5, [r4, #10]
    2984:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2986:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    298a:	246f      	movs	r4, #111	; 0x6f
    298c:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2990:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2994:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    2998:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    299a:	7c80      	ldrb	r0, [r0, #18]
    299c:	4798      	blx	r3
    299e:	bd38      	pop	{r3, r4, r5, pc}
    29a0:	2000013c 	.word	0x2000013c

000029a4 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    29a4:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    29a6:	2320      	movs	r3, #32
    29a8:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    29ac:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    29ae:	7c83      	ldrb	r3, [r0, #18]
    29b0:	f003 030f 	and.w	r3, r3, #15
    29b4:	015b      	lsls	r3, r3, #5
    29b6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    29ba:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    29be:	4b03      	ldr	r3, [pc, #12]	; (29cc <_usb_d_dev_handle_stall+0x28>)
    29c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    29c2:	6882      	ldr	r2, [r0, #8]
    29c4:	2101      	movs	r1, #1
    29c6:	7c80      	ldrb	r0, [r0, #18]
    29c8:	4798      	blx	r3
    29ca:	bd08      	pop	{r3, pc}
    29cc:	2000013c 	.word	0x2000013c

000029d0 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    29d0:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    29d2:	7c84      	ldrb	r4, [r0, #18]
    29d4:	2cff      	cmp	r4, #255	; 0xff
    29d6:	d003      	beq.n	29e0 <_usb_d_dev_trans_done+0x10>
    29d8:	7cc3      	ldrb	r3, [r0, #19]
    29da:	f013 0f40 	tst.w	r3, #64	; 0x40
    29de:	d100      	bne.n	29e2 <_usb_d_dev_trans_done+0x12>
    29e0:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    29e2:	7cc2      	ldrb	r2, [r0, #19]
    29e4:	f36f 1286 	bfc	r2, #6, #1
    29e8:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    29ea:	4a03      	ldr	r2, [pc, #12]	; (29f8 <_usb_d_dev_trans_done+0x28>)
    29ec:	6f15      	ldr	r5, [r2, #112]	; 0x70
    29ee:	6882      	ldr	r2, [r0, #8]
    29f0:	4620      	mov	r0, r4
    29f2:	47a8      	blx	r5
    29f4:	e7f4      	b.n	29e0 <_usb_d_dev_trans_done+0x10>
    29f6:	bf00      	nop
    29f8:	2000013c 	.word	0x2000013c

000029fc <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    29fc:	b530      	push	{r4, r5, lr}
    29fe:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2a00:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    2a02:	2425      	movs	r4, #37	; 0x25
    2a04:	f88d 4004 	strb.w	r4, [sp, #4]
    2a08:	244a      	movs	r4, #74	; 0x4a
    2a0a:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2a0e:	2bff      	cmp	r3, #255	; 0xff
    2a10:	d01e      	beq.n	2a50 <_usb_d_dev_trans_stop+0x54>
    2a12:	7cc4      	ldrb	r4, [r0, #19]
    2a14:	f014 0f40 	tst.w	r4, #64	; 0x40
    2a18:	d01a      	beq.n	2a50 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2a1a:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    2a1e:	b1c9      	cbz	r1, 2a54 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2a20:	0163      	lsls	r3, r4, #5
    2a22:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2a26:	2580      	movs	r5, #128	; 0x80
    2a28:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    2a2c:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    2a2e:	a902      	add	r1, sp, #8
    2a30:	440b      	add	r3, r1
    2a32:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2a36:	0163      	lsls	r3, r4, #5
    2a38:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2a3c:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2a40:	0163      	lsls	r3, r4, #5
    2a42:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2a46:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    2a4a:	4611      	mov	r1, r2
    2a4c:	4b05      	ldr	r3, [pc, #20]	; (2a64 <_usb_d_dev_trans_stop+0x68>)
    2a4e:	4798      	blx	r3
}
    2a50:	b003      	add	sp, #12
    2a52:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2a54:	0163      	lsls	r3, r4, #5
    2a56:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2a5a:	2540      	movs	r5, #64	; 0x40
    2a5c:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    2a60:	e7e4      	b.n	2a2c <_usb_d_dev_trans_stop+0x30>
    2a62:	bf00      	nop
    2a64:	000029d1 	.word	0x000029d1

00002a68 <_usb_d_dev_handle_trfail>:
{
    2a68:	b530      	push	{r4, r5, lr}
    2a6a:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    2a6c:	7c83      	ldrb	r3, [r0, #18]
    2a6e:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    2a72:	2204      	movs	r2, #4
    2a74:	f88d 2004 	strb.w	r2, [sp, #4]
    2a78:	2208      	movs	r2, #8
    2a7a:	f88d 2005 	strb.w	r2, [sp, #5]
    2a7e:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    2a80:	460c      	mov	r4, r1
    2a82:	b391      	cbz	r1, 2aea <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2a84:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    2a88:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    2a8c:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    2a90:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    2a94:	4a32      	ldr	r2, [pc, #200]	; (2b60 <_usb_d_dev_handle_trfail+0xf8>)
    2a96:	440a      	add	r2, r1
    2a98:	7a91      	ldrb	r1, [r2, #10]
    2a9a:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2a9c:	2d02      	cmp	r5, #2
    2a9e:	d02c      	beq.n	2afa <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    2aa0:	f011 0f02 	tst.w	r1, #2
    2aa4:	d045      	beq.n	2b32 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2aa6:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    2aa8:	7a91      	ldrb	r1, [r2, #10]
    2aaa:	f36f 0141 	bfc	r1, #1, #1
    2aae:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2ab0:	aa02      	add	r2, sp, #8
    2ab2:	4422      	add	r2, r4
    2ab4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2ab8:	015a      	lsls	r2, r3, #5
    2aba:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2abe:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2ac2:	015b      	lsls	r3, r3, #5
    2ac4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2ac8:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    2acc:	f005 0307 	and.w	r3, r5, #7
    2ad0:	2b01      	cmp	r3, #1
    2ad2:	d143      	bne.n	2b5c <_usb_d_dev_handle_trfail+0xf4>
    2ad4:	7cc3      	ldrb	r3, [r0, #19]
    2ad6:	f013 0f40 	tst.w	r3, #64	; 0x40
    2ada:	d03f      	beq.n	2b5c <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    2adc:	09d9      	lsrs	r1, r3, #7
    2ade:	428c      	cmp	r4, r1
    2ae0:	d03c      	beq.n	2b5c <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    2ae2:	2200      	movs	r2, #0
    2ae4:	4b1f      	ldr	r3, [pc, #124]	; (2b64 <_usb_d_dev_handle_trfail+0xfc>)
    2ae6:	4798      	blx	r3
    2ae8:	e038      	b.n	2b5c <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2aea:	0159      	lsls	r1, r3, #5
    2aec:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    2af0:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    2af4:	f005 0507 	and.w	r5, r5, #7
    2af8:	e7ca      	b.n	2a90 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2afa:	f011 0f01 	tst.w	r1, #1
    2afe:	d0cf      	beq.n	2aa0 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    2b00:	7a91      	ldrb	r1, [r2, #10]
    2b02:	f36f 0100 	bfc	r1, #0, #1
    2b06:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2b08:	aa02      	add	r2, sp, #8
    2b0a:	4422      	add	r2, r4
    2b0c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2b10:	015a      	lsls	r2, r3, #5
    2b12:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2b16:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2b1a:	015b      	lsls	r3, r3, #5
    2b1c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2b20:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    2b24:	2204      	movs	r2, #4
    2b26:	1c21      	adds	r1, r4, #0
    2b28:	bf18      	it	ne
    2b2a:	2101      	movne	r1, #1
    2b2c:	4b0d      	ldr	r3, [pc, #52]	; (2b64 <_usb_d_dev_handle_trfail+0xfc>)
    2b2e:	4798      	blx	r3
    2b30:	e014      	b.n	2b5c <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    2b32:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    2b36:	4a0a      	ldr	r2, [pc, #40]	; (2b60 <_usb_d_dev_handle_trfail+0xf8>)
    2b38:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    2b3c:	2100      	movs	r1, #0
    2b3e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2b40:	aa02      	add	r2, sp, #8
    2b42:	4414      	add	r4, r2
    2b44:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2b48:	015a      	lsls	r2, r3, #5
    2b4a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2b4e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2b52:	015b      	lsls	r3, r3, #5
    2b54:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2b58:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    2b5c:	b003      	add	sp, #12
    2b5e:	bd30      	pop	{r4, r5, pc}
    2b60:	2000013c 	.word	0x2000013c
    2b64:	000029fd 	.word	0x000029fd

00002b68 <_usb_d_dev_reset_epts>:
{
    2b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b6c:	4d0c      	ldr	r5, [pc, #48]	; (2ba0 <_usb_d_dev_reset_epts+0x38>)
    2b6e:	f105 0474 	add.w	r4, r5, #116	; 0x74
    2b72:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    2b76:	f04f 0803 	mov.w	r8, #3
    2b7a:	4f0a      	ldr	r7, [pc, #40]	; (2ba4 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    2b7c:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    2b7e:	4641      	mov	r1, r8
    2b80:	4620      	mov	r0, r4
    2b82:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    2b84:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    2b86:	2300      	movs	r3, #0
    2b88:	74e3      	strb	r3, [r4, #19]
    2b8a:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2b8c:	42ac      	cmp	r4, r5
    2b8e:	d1f6      	bne.n	2b7e <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    2b90:	2260      	movs	r2, #96	; 0x60
    2b92:	4619      	mov	r1, r3
    2b94:	4802      	ldr	r0, [pc, #8]	; (2ba0 <_usb_d_dev_reset_epts+0x38>)
    2b96:	4b04      	ldr	r3, [pc, #16]	; (2ba8 <_usb_d_dev_reset_epts+0x40>)
    2b98:	4798      	blx	r3
    2b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b9e:	bf00      	nop
    2ba0:	2000013c 	.word	0x2000013c
    2ba4:	000029d1 	.word	0x000029d1
    2ba8:	000036e7 	.word	0x000036e7

00002bac <_usb_d_dev_in_next>:
{
    2bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2bb0:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    2bb2:	7c84      	ldrb	r4, [r0, #18]
    2bb4:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2bb8:	4688      	mov	r8, r1
    2bba:	2900      	cmp	r1, #0
    2bbc:	f000 809f 	beq.w	2cfe <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    2bc0:	4b58      	ldr	r3, [pc, #352]	; (2d24 <_usb_d_dev_in_next+0x178>)
    2bc2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2bc6:	6958      	ldr	r0, [r3, #20]
    2bc8:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2bcc:	8a2b      	ldrh	r3, [r5, #16]
    2bce:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2bd2:	4293      	cmp	r3, r2
    2bd4:	f000 808d 	beq.w	2cf2 <_usb_d_dev_in_next+0x146>
    2bd8:	3b01      	subs	r3, #1
    2bda:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2bdc:	7cef      	ldrb	r7, [r5, #19]
    2bde:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    2be2:	f1b8 0f00 	cmp.w	r8, #0
    2be6:	d005      	beq.n	2bf4 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2be8:	0162      	lsls	r2, r4, #5
    2bea:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2bee:	2302      	movs	r3, #2
    2bf0:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    2bf4:	68a9      	ldr	r1, [r5, #8]
    2bf6:	eb0e 0301 	add.w	r3, lr, r1
    2bfa:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    2bfc:	686e      	ldr	r6, [r5, #4]
    2bfe:	42b3      	cmp	r3, r6
    2c00:	d23f      	bcs.n	2c82 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    2c02:	1af6      	subs	r6, r6, r3
    2c04:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    2c06:	7cea      	ldrb	r2, [r5, #19]
    2c08:	f012 0f20 	tst.w	r2, #32
    2c0c:	d02d      	beq.n	2c6a <_usb_d_dev_in_next+0xbe>
    2c0e:	8a2a      	ldrh	r2, [r5, #16]
    2c10:	4296      	cmp	r6, r2
    2c12:	bf28      	it	cs
    2c14:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    2c16:	6829      	ldr	r1, [r5, #0]
    2c18:	4632      	mov	r2, r6
    2c1a:	4419      	add	r1, r3
    2c1c:	68e8      	ldr	r0, [r5, #12]
    2c1e:	4b42      	ldr	r3, [pc, #264]	; (2d28 <_usb_d_dev_in_next+0x17c>)
    2c20:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    2c22:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    2c24:	4b3f      	ldr	r3, [pc, #252]	; (2d24 <_usb_d_dev_in_next+0x178>)
    2c26:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2c2a:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2c2c:	4b3d      	ldr	r3, [pc, #244]	; (2d24 <_usb_d_dev_in_next+0x178>)
    2c2e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2c32:	695a      	ldr	r2, [r3, #20]
    2c34:	f366 020d 	bfi	r2, r6, #0, #14
    2c38:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2c3a:	695a      	ldr	r2, [r3, #20]
    2c3c:	f36f 329b 	bfc	r2, #14, #14
    2c40:	615a      	str	r2, [r3, #20]
	if (!isr) {
    2c42:	f1b8 0f00 	cmp.w	r8, #0
    2c46:	d108      	bne.n	2c5a <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    2c48:	2f01      	cmp	r7, #1
    2c4a:	bf0c      	ite	eq
    2c4c:	224e      	moveq	r2, #78	; 0x4e
    2c4e:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2c50:	0163      	lsls	r3, r4, #5
    2c52:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2c56:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2c5a:	0164      	lsls	r4, r4, #5
    2c5c:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    2c60:	2380      	movs	r3, #128	; 0x80
    2c62:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    2c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c6a:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    2c6e:	bf28      	it	cs
    2c70:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2c74:	6829      	ldr	r1, [r5, #0]
    2c76:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    2c78:	4a2a      	ldr	r2, [pc, #168]	; (2d24 <_usb_d_dev_in_next+0x178>)
    2c7a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    2c7e:	6113      	str	r3, [r2, #16]
    2c80:	e7d4      	b.n	2c2c <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    2c82:	7ceb      	ldrb	r3, [r5, #19]
    2c84:	f013 0f10 	tst.w	r3, #16
    2c88:	d00f      	beq.n	2caa <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    2c8a:	7ceb      	ldrb	r3, [r5, #19]
    2c8c:	f36f 1304 	bfc	r3, #4, #1
    2c90:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2c92:	4b24      	ldr	r3, [pc, #144]	; (2d24 <_usb_d_dev_in_next+0x178>)
    2c94:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2c98:	695a      	ldr	r2, [r3, #20]
    2c9a:	f36f 020d 	bfc	r2, #0, #14
    2c9e:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2ca0:	695a      	ldr	r2, [r3, #20]
    2ca2:	f36f 329b 	bfc	r2, #14, #14
    2ca6:	615a      	str	r2, [r3, #20]
    2ca8:	e7cb      	b.n	2c42 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    2caa:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2cac:	ea4f 1444 	mov.w	r4, r4, lsl #5
    2cb0:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    2cb4:	bf0c      	ite	eq
    2cb6:	234b      	moveq	r3, #75	; 0x4b
    2cb8:	234a      	movne	r3, #74	; 0x4a
    2cba:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    2cbe:	8a2a      	ldrh	r2, [r5, #16]
    2cc0:	ea00 030e 	and.w	r3, r0, lr
    2cc4:	429a      	cmp	r2, r3
    2cc6:	d005      	beq.n	2cd4 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2cc8:	2100      	movs	r1, #0
    2cca:	4628      	mov	r0, r5
    2ccc:	4b17      	ldr	r3, [pc, #92]	; (2d2c <_usb_d_dev_in_next+0x180>)
    2cce:	4798      	blx	r3
	return;
    2cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    2cd4:	7ceb      	ldrb	r3, [r5, #19]
    2cd6:	f36f 1386 	bfc	r3, #6, #1
    2cda:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    2cdc:	4b11      	ldr	r3, [pc, #68]	; (2d24 <_usb_d_dev_in_next+0x178>)
    2cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    2ce0:	68a9      	ldr	r1, [r5, #8]
    2ce2:	7ca8      	ldrb	r0, [r5, #18]
    2ce4:	4798      	blx	r3
    2ce6:	b9d0      	cbnz	r0, 2d1e <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    2ce8:	7ceb      	ldrb	r3, [r5, #19]
    2cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2cee:	74eb      	strb	r3, [r5, #19]
    2cf0:	e7ea      	b.n	2cc8 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2cf2:	7cef      	ldrb	r7, [r5, #19]
    2cf4:	f007 0707 	and.w	r7, r7, #7
    2cf8:	f240 30ff 	movw	r0, #1023	; 0x3ff
    2cfc:	e774      	b.n	2be8 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2cfe:	8a03      	ldrh	r3, [r0, #16]
    2d00:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2d04:	4293      	cmp	r3, r2
    2d06:	d107      	bne.n	2d18 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2d08:	7cef      	ldrb	r7, [r5, #19]
    2d0a:	f007 0707 	and.w	r7, r7, #7
    2d0e:	f04f 0e00 	mov.w	lr, #0
    2d12:	f240 30ff 	movw	r0, #1023	; 0x3ff
    2d16:	e76d      	b.n	2bf4 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2d18:	f04f 0e00 	mov.w	lr, #0
    2d1c:	e75c      	b.n	2bd8 <_usb_d_dev_in_next+0x2c>
    2d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2d22:	bf00      	nop
    2d24:	2000013c 	.word	0x2000013c
    2d28:	000036d1 	.word	0x000036d1
    2d2c:	000029d1 	.word	0x000029d1

00002d30 <_usb_d_dev_out_next>:
{
    2d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d34:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    2d36:	7c85      	ldrb	r5, [r0, #18]
    2d38:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    2d3c:	4689      	mov	r9, r1
    2d3e:	2900      	cmp	r1, #0
    2d40:	d056      	beq.n	2df0 <_usb_d_dev_out_next+0xc0>
    2d42:	4b74      	ldr	r3, [pc, #464]	; (2f14 <_usb_d_dev_out_next+0x1e4>)
    2d44:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2d48:	685a      	ldr	r2, [r3, #4]
    2d4a:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    2d4e:	685f      	ldr	r7, [r3, #4]
    2d50:	f3c7 070d 	ubfx	r7, r7, #0, #14
    2d54:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2d56:	8a06      	ldrh	r6, [r0, #16]
    2d58:	f240 33ff 	movw	r3, #1023	; 0x3ff
    2d5c:	429e      	cmp	r6, r3
    2d5e:	f000 80ba 	beq.w	2ed6 <_usb_d_dev_out_next+0x1a6>
    2d62:	3e01      	subs	r6, #1
    2d64:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    2d66:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2d6a:	f894 8013 	ldrb.w	r8, [r4, #19]
    2d6e:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    2d72:	f1b9 0f00 	cmp.w	r9, #0
    2d76:	d005      	beq.n	2d84 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2d78:	016b      	lsls	r3, r5, #5
    2d7a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2d7e:	2201      	movs	r2, #1
    2d80:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    2d84:	7ce3      	ldrb	r3, [r4, #19]
    2d86:	f013 0f20 	tst.w	r3, #32
    2d8a:	d00d      	beq.n	2da8 <_usb_d_dev_out_next+0x78>
    2d8c:	6862      	ldr	r2, [r4, #4]
    2d8e:	2a00      	cmp	r2, #0
    2d90:	d037      	beq.n	2e02 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    2d92:	68a0      	ldr	r0, [r4, #8]
    2d94:	1a12      	subs	r2, r2, r0
    2d96:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    2d98:	6823      	ldr	r3, [r4, #0]
    2d9a:	42ba      	cmp	r2, r7
    2d9c:	bf28      	it	cs
    2d9e:	463a      	movcs	r2, r7
    2da0:	68e1      	ldr	r1, [r4, #12]
    2da2:	4418      	add	r0, r3
    2da4:	4b5c      	ldr	r3, [pc, #368]	; (2f18 <_usb_d_dev_out_next+0x1e8>)
    2da6:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2da8:	6863      	ldr	r3, [r4, #4]
    2daa:	b353      	cbz	r3, 2e02 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    2dac:	f1b9 0f00 	cmp.w	r9, #0
    2db0:	d040      	beq.n	2e34 <_usb_d_dev_out_next+0x104>
    2db2:	8a22      	ldrh	r2, [r4, #16]
    2db4:	42ba      	cmp	r2, r7
    2db6:	d93d      	bls.n	2e34 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    2db8:	7ce3      	ldrb	r3, [r4, #19]
    2dba:	f36f 1304 	bfc	r3, #4, #1
    2dbe:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    2dc0:	68a3      	ldr	r3, [r4, #8]
    2dc2:	445b      	add	r3, fp
    2dc4:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    2dc6:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2dca:	ea4f 1345 	mov.w	r3, r5, lsl #5
    2dce:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2dd2:	bf0c      	ite	eq
    2dd4:	222d      	moveq	r2, #45	; 0x2d
    2dd6:	2225      	movne	r2, #37	; 0x25
    2dd8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    2ddc:	b915      	cbnz	r5, 2de4 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2dde:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    2de0:	4b4c      	ldr	r3, [pc, #304]	; (2f14 <_usb_d_dev_out_next+0x1e4>)
    2de2:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2de4:	2100      	movs	r1, #0
    2de6:	4620      	mov	r0, r4
    2de8:	4b4c      	ldr	r3, [pc, #304]	; (2f1c <_usb_d_dev_out_next+0x1ec>)
    2dea:	4798      	blx	r3
	return;
    2dec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2df0:	8a06      	ldrh	r6, [r0, #16]
    2df2:	f240 33ff 	movw	r3, #1023	; 0x3ff
    2df6:	429e      	cmp	r6, r3
    2df8:	d07b      	beq.n	2ef2 <_usb_d_dev_out_next+0x1c2>
    2dfa:	f04f 0b00 	mov.w	fp, #0
    2dfe:	46da      	mov	sl, fp
    2e00:	e7af      	b.n	2d62 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2e02:	7ce3      	ldrb	r3, [r4, #19]
    2e04:	f013 0f10 	tst.w	r3, #16
    2e08:	d06c      	beq.n	2ee4 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    2e0a:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    2e0c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2e10:	f043 0320 	orr.w	r3, r3, #32
    2e14:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2e16:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2e18:	493e      	ldr	r1, [pc, #248]	; (2f14 <_usb_d_dev_out_next+0x1e4>)
    2e1a:	016a      	lsls	r2, r5, #5
    2e1c:	188b      	adds	r3, r1, r2
    2e1e:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2e20:	8a21      	ldrh	r1, [r4, #16]
    2e22:	685a      	ldr	r2, [r3, #4]
    2e24:	f361 329b 	bfi	r2, r1, #14, #14
    2e28:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2e2a:	685a      	ldr	r2, [r3, #4]
    2e2c:	f36f 020d 	bfc	r2, #0, #14
    2e30:	605a      	str	r2, [r3, #4]
    2e32:	e01d      	b.n	2e70 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    2e34:	68a2      	ldr	r2, [r4, #8]
    2e36:	4452      	add	r2, sl
    2e38:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    2e3a:	4293      	cmp	r3, r2
    2e3c:	d9c3      	bls.n	2dc6 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    2e3e:	1a9b      	subs	r3, r3, r2
    2e40:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    2e42:	7ce1      	ldrb	r1, [r4, #19]
    2e44:	f011 0f20 	tst.w	r1, #32
    2e48:	d026      	beq.n	2e98 <_usb_d_dev_out_next+0x168>
    2e4a:	8a22      	ldrh	r2, [r4, #16]
    2e4c:	4293      	cmp	r3, r2
    2e4e:	bf28      	it	cs
    2e50:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2e52:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2e54:	016a      	lsls	r2, r5, #5
    2e56:	492f      	ldr	r1, [pc, #188]	; (2f14 <_usb_d_dev_out_next+0x1e4>)
    2e58:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2e5a:	4a2e      	ldr	r2, [pc, #184]	; (2f14 <_usb_d_dev_out_next+0x1e4>)
    2e5c:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    2e60:	6851      	ldr	r1, [r2, #4]
    2e62:	f363 319b 	bfi	r1, r3, #14, #14
    2e66:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2e68:	6853      	ldr	r3, [r2, #4]
    2e6a:	f36f 030d 	bfc	r3, #0, #14
    2e6e:	6053      	str	r3, [r2, #4]
	if (!isr) {
    2e70:	f1b9 0f00 	cmp.w	r9, #0
    2e74:	d108      	bne.n	2e88 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    2e76:	f1b8 0f01 	cmp.w	r8, #1
    2e7a:	d025      	beq.n	2ec8 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    2e7c:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2e7e:	016b      	lsls	r3, r5, #5
    2e80:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2e84:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2e88:	016d      	lsls	r5, r5, #5
    2e8a:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    2e8e:	2340      	movs	r3, #64	; 0x40
    2e90:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    2e94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    2e98:	8a21      	ldrh	r1, [r4, #16]
    2e9a:	428b      	cmp	r3, r1
    2e9c:	d90a      	bls.n	2eb4 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    2e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    2ea2:	d80e      	bhi.n	2ec2 <_usb_d_dev_out_next+0x192>
    2ea4:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2ea8:	6821      	ldr	r1, [r4, #0]
    2eaa:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    2eac:	0169      	lsls	r1, r5, #5
    2eae:	4819      	ldr	r0, [pc, #100]	; (2f14 <_usb_d_dev_out_next+0x1e4>)
    2eb0:	5042      	str	r2, [r0, r1]
    2eb2:	e7d2      	b.n	2e5a <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    2eb4:	428b      	cmp	r3, r1
    2eb6:	d2f7      	bcs.n	2ea8 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    2eb8:	7ce1      	ldrb	r1, [r4, #19]
    2eba:	f041 0120 	orr.w	r1, r1, #32
    2ebe:	74e1      	strb	r1, [r4, #19]
    2ec0:	e7f2      	b.n	2ea8 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    2ec2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2ec6:	e7ef      	b.n	2ea8 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    2ec8:	4b12      	ldr	r3, [pc, #72]	; (2f14 <_usb_d_dev_out_next+0x1e4>)
    2eca:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2ece:	2200      	movs	r2, #0
    2ed0:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    2ed2:	222d      	movs	r2, #45	; 0x2d
    2ed4:	e7d3      	b.n	2e7e <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    2ed6:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2eda:	f890 8013 	ldrb.w	r8, [r0, #19]
    2ede:	f008 0807 	and.w	r8, r8, #7
    2ee2:	e749      	b.n	2d78 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    2ee4:	f1b9 0f00 	cmp.w	r9, #0
    2ee8:	d10b      	bne.n	2f02 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    2eea:	68a3      	ldr	r3, [r4, #8]
    2eec:	4453      	add	r3, sl
    2eee:	60a3      	str	r3, [r4, #8]
    2ef0:	e769      	b.n	2dc6 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2ef2:	f890 8013 	ldrb.w	r8, [r0, #19]
    2ef6:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    2efa:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2efc:	46bb      	mov	fp, r7
    2efe:	46ba      	mov	sl, r7
    2f00:	e740      	b.n	2d84 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    2f02:	8a23      	ldrh	r3, [r4, #16]
    2f04:	42bb      	cmp	r3, r7
    2f06:	f63f af57 	bhi.w	2db8 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    2f0a:	68a3      	ldr	r3, [r4, #8]
    2f0c:	4453      	add	r3, sl
    2f0e:	60a3      	str	r3, [r4, #8]
    2f10:	e759      	b.n	2dc6 <_usb_d_dev_out_next+0x96>
    2f12:	bf00      	nop
    2f14:	2000013c 	.word	0x2000013c
    2f18:	000036d1 	.word	0x000036d1
    2f1c:	000029d1 	.word	0x000029d1

00002f20 <_usb_d_dev_handler>:
{
    2f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    2f24:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2f28:	8c1e      	ldrh	r6, [r3, #32]
    2f2a:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    2f2c:	b146      	cbz	r6, 2f40 <_usb_d_dev_handler+0x20>
    2f2e:	4d91      	ldr	r5, [pc, #580]	; (3174 <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    2f30:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2f32:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    2f36:	f8df 9258 	ldr.w	r9, [pc, #600]	; 3190 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    2f3a:	f8df 8258 	ldr.w	r8, [pc, #600]	; 3194 <_usb_d_dev_handler+0x274>
    2f3e:	e0d3      	b.n	30e8 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    2f40:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    2f42:	8b1b      	ldrh	r3, [r3, #24]
    2f44:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    2f46:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    2f48:	f013 0f04 	tst.w	r3, #4
    2f4c:	d11d      	bne.n	2f8a <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    2f4e:	f413 7f00 	tst.w	r3, #512	; 0x200
    2f52:	d123      	bne.n	2f9c <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    2f54:	f013 0f80 	tst.w	r3, #128	; 0x80
    2f58:	d147      	bne.n	2fea <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    2f5a:	f013 0f70 	tst.w	r3, #112	; 0x70
    2f5e:	d14f      	bne.n	3000 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    2f60:	f013 0f08 	tst.w	r3, #8
    2f64:	d16e      	bne.n	3044 <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    2f66:	f013 0f01 	tst.w	r3, #1
    2f6a:	d0e0      	beq.n	2f2e <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2f6c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2f70:	f240 2201 	movw	r2, #513	; 0x201
    2f74:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2f76:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2f78:	2270      	movs	r2, #112	; 0x70
    2f7a:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    2f7c:	4b7e      	ldr	r3, [pc, #504]	; (3178 <_usb_d_dev_handler+0x258>)
    2f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2f80:	2100      	movs	r1, #0
    2f82:	2004      	movs	r0, #4
    2f84:	4798      	blx	r3
    2f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2f8a:	2204      	movs	r2, #4
    2f8c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2f90:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    2f92:	4b79      	ldr	r3, [pc, #484]	; (3178 <_usb_d_dev_handler+0x258>)
    2f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2f96:	4798      	blx	r3
    2f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2f9c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2fa0:	f240 2201 	movw	r2, #513	; 0x201
    2fa4:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2fa6:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2fa8:	2270      	movs	r2, #112	; 0x70
    2faa:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2fac:	4b72      	ldr	r3, [pc, #456]	; (3178 <_usb_d_dev_handler+0x258>)
    2fae:	891b      	ldrh	r3, [r3, #8]
    2fb0:	f003 030f 	and.w	r3, r3, #15
    2fb4:	2b03      	cmp	r3, #3
    2fb6:	d00e      	beq.n	2fd6 <_usb_d_dev_handler+0xb6>
    2fb8:	4b6f      	ldr	r3, [pc, #444]	; (3178 <_usb_d_dev_handler+0x258>)
    2fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2fbc:	f003 030f 	and.w	r3, r3, #15
    2fc0:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2fc2:	bf08      	it	eq
    2fc4:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2fc6:	d007      	beq.n	2fd8 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    2fc8:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    2fca:	4b6b      	ldr	r3, [pc, #428]	; (3178 <_usb_d_dev_handler+0x258>)
    2fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2fce:	2003      	movs	r0, #3
    2fd0:	4798      	blx	r3
    2fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2fd6:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    2fd8:	4b67      	ldr	r3, [pc, #412]	; (3178 <_usb_d_dev_handler+0x258>)
    2fda:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    2fde:	8919      	ldrh	r1, [r3, #8]
    2fe0:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    2fe4:	2200      	movs	r2, #0
    2fe6:	811a      	strh	r2, [r3, #8]
    2fe8:	e7ef      	b.n	2fca <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2fea:	2280      	movs	r2, #128	; 0x80
    2fec:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2ff0:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    2ff2:	4b61      	ldr	r3, [pc, #388]	; (3178 <_usb_d_dev_handler+0x258>)
    2ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2ff6:	2100      	movs	r1, #0
    2ff8:	2005      	movs	r0, #5
    2ffa:	4798      	blx	r3
    2ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3000:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3004:	2270      	movs	r2, #112	; 0x70
    3006:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3008:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    300a:	f240 2201 	movw	r2, #513	; 0x201
    300e:	831a      	strh	r2, [r3, #24]
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    3010:	4b5a      	ldr	r3, [pc, #360]	; (317c <_usb_d_dev_handler+0x25c>)
    3012:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    3016:	f013 0f01 	tst.w	r3, #1
    301a:	d00d      	beq.n	3038 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    301c:	4a57      	ldr	r2, [pc, #348]	; (317c <_usb_d_dev_handler+0x25c>)
    301e:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    3020:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    3024:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    3028:	d1f9      	bne.n	301e <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    302a:	4b53      	ldr	r3, [pc, #332]	; (3178 <_usb_d_dev_handler+0x258>)
    302c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    302e:	2100      	movs	r1, #0
    3030:	2002      	movs	r0, #2
    3032:	4798      	blx	r3
    3034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3038:	4a50      	ldr	r2, [pc, #320]	; (317c <_usb_d_dev_handler+0x25c>)
    303a:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    303c:	f413 7f80 	tst.w	r3, #256	; 0x100
    3040:	d0fb      	beq.n	303a <_usb_d_dev_handler+0x11a>
    3042:	e7f2      	b.n	302a <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3044:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3048:	2400      	movs	r4, #0
    304a:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    304e:	2208      	movs	r2, #8
    3050:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3052:	2270      	movs	r2, #112	; 0x70
    3054:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3056:	f240 2201 	movw	r2, #513	; 0x201
    305a:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    305c:	4b48      	ldr	r3, [pc, #288]	; (3180 <_usb_d_dev_handler+0x260>)
    305e:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    3060:	4b45      	ldr	r3, [pc, #276]	; (3178 <_usb_d_dev_handler+0x258>)
    3062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3064:	4621      	mov	r1, r4
    3066:	2001      	movs	r0, #1
    3068:	4798      	blx	r3
    306a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    306e:	f011 0f10 	tst.w	r1, #16
    3072:	d109      	bne.n	3088 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    3074:	f011 0f40 	tst.w	r1, #64	; 0x40
    3078:	d108      	bne.n	308c <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    307a:	f011 0f20 	tst.w	r1, #32
    307e:	d02f      	beq.n	30e0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    3080:	2100      	movs	r1, #0
    3082:	4b40      	ldr	r3, [pc, #256]	; (3184 <_usb_d_dev_handler+0x264>)
    3084:	4798      	blx	r3
    3086:	e02b      	b.n	30e0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    3088:	47c8      	blx	r9
    308a:	e029      	b.n	30e0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    308c:	2101      	movs	r1, #1
    308e:	4b3d      	ldr	r3, [pc, #244]	; (3184 <_usb_d_dev_handler+0x264>)
    3090:	4798      	blx	r3
    3092:	e025      	b.n	30e0 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    3094:	f011 0f40 	tst.w	r1, #64	; 0x40
    3098:	d111      	bne.n	30be <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    309a:	f011 0f08 	tst.w	r1, #8
    309e:	d112      	bne.n	30c6 <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    30a0:	f011 0f02 	tst.w	r1, #2
    30a4:	d112      	bne.n	30cc <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    30a6:	f003 0307 	and.w	r3, r3, #7
    30aa:	2b01      	cmp	r3, #1
    30ac:	d118      	bne.n	30e0 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    30ae:	f011 0f04 	tst.w	r1, #4
    30b2:	d10f      	bne.n	30d4 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    30b4:	f011 0f10 	tst.w	r1, #16
    30b8:	d012      	beq.n	30e0 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    30ba:	47c8      	blx	r9
    30bc:	e010      	b.n	30e0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    30be:	2101      	movs	r1, #1
    30c0:	4b30      	ldr	r3, [pc, #192]	; (3184 <_usb_d_dev_handler+0x264>)
    30c2:	4798      	blx	r3
    30c4:	e00c      	b.n	30e0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    30c6:	2101      	movs	r1, #1
    30c8:	47c0      	blx	r8
    30ca:	e009      	b.n	30e0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    30cc:	2101      	movs	r1, #1
    30ce:	4b2e      	ldr	r3, [pc, #184]	; (3188 <_usb_d_dev_handler+0x268>)
    30d0:	4798      	blx	r3
    30d2:	e005      	b.n	30e0 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    30d4:	2100      	movs	r1, #0
    30d6:	47c0      	blx	r8
    30d8:	e002      	b.n	30e0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    30da:	2100      	movs	r1, #0
    30dc:	4b29      	ldr	r3, [pc, #164]	; (3184 <_usb_d_dev_handler+0x264>)
    30de:	4798      	blx	r3
    30e0:	3401      	adds	r4, #1
    30e2:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    30e4:	2c09      	cmp	r4, #9
    30e6:	d042      	beq.n	316e <_usb_d_dev_handler+0x24e>
    30e8:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    30ea:	7cab      	ldrb	r3, [r5, #18]
    30ec:	2bff      	cmp	r3, #255	; 0xff
    30ee:	d0f7      	beq.n	30e0 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    30f0:	f003 030f 	and.w	r3, r3, #15
    30f4:	2101      	movs	r1, #1
    30f6:	4099      	lsls	r1, r3
    30f8:	4231      	tst	r1, r6
    30fa:	d0f1      	beq.n	30e0 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    30fc:	0159      	lsls	r1, r3, #5
    30fe:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    3102:	f501 7180 	add.w	r1, r1, #256	; 0x100
    3106:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    3108:	015b      	lsls	r3, r3, #5
    310a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    310e:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    3112:	4019      	ands	r1, r3
    3114:	d0e4      	beq.n	30e0 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    3116:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    311a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    311e:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    3122:	f003 0247 	and.w	r2, r3, #71	; 0x47
    3126:	2a01      	cmp	r2, #1
    3128:	d0a1      	beq.n	306e <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    312a:	f013 0f80 	tst.w	r3, #128	; 0x80
    312e:	d1b1      	bne.n	3094 <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3130:	f011 0f20 	tst.w	r1, #32
    3134:	d1d1      	bne.n	30da <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3136:	f011 0f04 	tst.w	r1, #4
    313a:	d10e      	bne.n	315a <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    313c:	f011 0f01 	tst.w	r1, #1
    3140:	d10e      	bne.n	3160 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    3142:	f003 0307 	and.w	r3, r3, #7
    3146:	2b01      	cmp	r3, #1
    3148:	d1ca      	bne.n	30e0 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    314a:	f011 0f08 	tst.w	r1, #8
    314e:	d10b      	bne.n	3168 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3150:	f011 0f10 	tst.w	r1, #16
    3154:	d0c4      	beq.n	30e0 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    3156:	47c8      	blx	r9
    3158:	e7c2      	b.n	30e0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    315a:	2100      	movs	r1, #0
    315c:	47c0      	blx	r8
    315e:	e7bf      	b.n	30e0 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    3160:	2101      	movs	r1, #1
    3162:	4b0a      	ldr	r3, [pc, #40]	; (318c <_usb_d_dev_handler+0x26c>)
    3164:	4798      	blx	r3
    3166:	e7bb      	b.n	30e0 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    3168:	2101      	movs	r1, #1
    316a:	47c0      	blx	r8
    316c:	e7b8      	b.n	30e0 <_usb_d_dev_handler+0x1c0>
    316e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3172:	bf00      	nop
    3174:	200001b0 	.word	0x200001b0
    3178:	2000013c 	.word	0x2000013c
    317c:	40001000 	.word	0x40001000
    3180:	00002b69 	.word	0x00002b69
    3184:	000029a5 	.word	0x000029a5
    3188:	00002bad 	.word	0x00002bad
    318c:	00002d31 	.word	0x00002d31
    3190:	00002929 	.word	0x00002929
    3194:	00002a69 	.word	0x00002a69

00003198 <_usb_d_dev_init>:
{
    3198:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    319a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    319e:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    31a0:	f013 0f01 	tst.w	r3, #1
    31a4:	d124      	bne.n	31f0 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    31a6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    31aa:	7893      	ldrb	r3, [r2, #2]
    31ac:	f013 0f03 	tst.w	r3, #3
    31b0:	d1fb      	bne.n	31aa <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    31b2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    31b6:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    31b8:	f013 0f02 	tst.w	r3, #2
    31bc:	d00f      	beq.n	31de <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    31be:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    31c2:	7813      	ldrb	r3, [r2, #0]
    31c4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    31c8:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    31ca:	7893      	ldrb	r3, [r2, #2]
    31cc:	f013 0f03 	tst.w	r3, #3
    31d0:	d1fb      	bne.n	31ca <_usb_d_dev_init+0x32>
    31d2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    31d6:	7893      	ldrb	r3, [r2, #2]
    31d8:	f013 0f02 	tst.w	r3, #2
    31dc:	d1fb      	bne.n	31d6 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    31de:	2201      	movs	r2, #1
    31e0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    31e4:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    31e6:	461a      	mov	r2, r3
    31e8:	7893      	ldrb	r3, [r2, #2]
    31ea:	f013 0f03 	tst.w	r3, #3
    31ee:	d1fb      	bne.n	31e8 <_usb_d_dev_init+0x50>
    31f0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    31f4:	7893      	ldrb	r3, [r2, #2]
    31f6:	f013 0f01 	tst.w	r3, #1
    31fa:	d1fb      	bne.n	31f4 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    31fc:	4b21      	ldr	r3, [pc, #132]	; (3284 <_usb_d_dev_init+0xec>)
    31fe:	4a22      	ldr	r2, [pc, #136]	; (3288 <_usb_d_dev_init+0xf0>)
    3200:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    3202:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    3204:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    3206:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    3208:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    320a:	4b20      	ldr	r3, [pc, #128]	; (328c <_usb_d_dev_init+0xf4>)
    320c:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    320e:	4b20      	ldr	r3, [pc, #128]	; (3290 <_usb_d_dev_init+0xf8>)
    3210:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    3212:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    3216:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    321a:	f011 011f 	ands.w	r1, r1, #31
    321e:	d02b      	beq.n	3278 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    3220:	291f      	cmp	r1, #31
    3222:	bf08      	it	eq
    3224:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    3226:	b34b      	cbz	r3, 327c <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    3228:	2b1f      	cmp	r3, #31
    322a:	bf08      	it	eq
    322c:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    322e:	b33a      	cbz	r2, 3280 <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    3230:	2a07      	cmp	r2, #7
    3232:	bf08      	it	eq
    3234:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    3236:	f003 031f 	and.w	r3, r3, #31
    323a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    323e:	0312      	lsls	r2, r2, #12
    3240:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    3244:	4313      	orrs	r3, r2
    3246:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    324a:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    324c:	78d3      	ldrb	r3, [r2, #3]
    324e:	f043 0303 	orr.w	r3, r3, #3
    3252:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    3254:	78d3      	ldrb	r3, [r2, #3]
    3256:	f043 030c 	orr.w	r3, r3, #12
    325a:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    325c:	2304      	movs	r3, #4
    325e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3260:	7893      	ldrb	r3, [r2, #2]
    3262:	f013 0f03 	tst.w	r3, #3
    3266:	d1fb      	bne.n	3260 <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    3268:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    326c:	4a05      	ldr	r2, [pc, #20]	; (3284 <_usb_d_dev_init+0xec>)
    326e:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    3270:	2201      	movs	r2, #1
    3272:	811a      	strh	r2, [r3, #8]
}
    3274:	2000      	movs	r0, #0
    3276:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    3278:	2109      	movs	r1, #9
    327a:	e7d4      	b.n	3226 <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    327c:	2319      	movs	r3, #25
    327e:	e7d6      	b.n	322e <_usb_d_dev_init+0x96>
		pad_trim = 6;
    3280:	2206      	movs	r2, #6
    3282:	e7d8      	b.n	3236 <_usb_d_dev_init+0x9e>
    3284:	2000013c 	.word	0x2000013c
    3288:	00002925 	.word	0x00002925
    328c:	00002b69 	.word	0x00002b69
    3290:	00800084 	.word	0x00800084

00003294 <_usb_d_dev_ep_stall>:
{
    3294:	b470      	push	{r4, r5, r6}
    3296:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    3298:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    329a:	f010 000f 	ands.w	r0, r0, #15
    329e:	d008      	beq.n	32b2 <_usb_d_dev_ep_stall+0x1e>
    32a0:	2b00      	cmp	r3, #0
    32a2:	bfb4      	ite	lt
    32a4:	1c83      	addlt	r3, r0, #2
    32a6:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    32a8:	2802      	cmp	r0, #2
    32aa:	d903      	bls.n	32b4 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    32ac:	f06f 0011 	mvn.w	r0, #17
    32b0:	e018      	b.n	32e4 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    32b2:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    32b4:	2901      	cmp	r1, #1
    32b6:	d017      	beq.n	32e8 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    32b8:	2900      	cmp	r1, #0
    32ba:	d03a      	beq.n	3332 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    32bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    32c0:	4a45      	ldr	r2, [pc, #276]	; (33d8 <_usb_d_dev_ep_stall+0x144>)
    32c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    32c6:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    32ca:	f003 030f 	and.w	r3, r3, #15
    32ce:	015b      	lsls	r3, r3, #5
    32d0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    32d4:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    32d8:	2310      	movs	r3, #16
    32da:	40a3      	lsls	r3, r4
    32dc:	421a      	tst	r2, r3
    32de:	bf14      	ite	ne
    32e0:	2001      	movne	r0, #1
    32e2:	2000      	moveq	r0, #0
}
    32e4:	bc70      	pop	{r4, r5, r6}
    32e6:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    32e8:	2510      	movs	r5, #16
    32ea:	40a5      	lsls	r5, r4
    32ec:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    32ee:	493a      	ldr	r1, [pc, #232]	; (33d8 <_usb_d_dev_ep_stall+0x144>)
    32f0:	009e      	lsls	r6, r3, #2
    32f2:	18f2      	adds	r2, r6, r3
    32f4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    32f8:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    32fc:	f002 020f 	and.w	r2, r2, #15
    3300:	0150      	lsls	r0, r2, #5
    3302:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    3306:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    330a:	2020      	movs	r0, #32
    330c:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    3310:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3312:	0152      	lsls	r2, r2, #5
    3314:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3318:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    331c:	4433      	add	r3, r6
    331e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    3322:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    3326:	f042 0208 	orr.w	r2, r2, #8
    332a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    332e:	2000      	movs	r0, #0
    3330:	e7d8      	b.n	32e4 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    3332:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3336:	4928      	ldr	r1, [pc, #160]	; (33d8 <_usb_d_dev_ep_stall+0x144>)
    3338:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    333c:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    3340:	f002 020f 	and.w	r2, r2, #15
    3344:	0151      	lsls	r1, r2, #5
    3346:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    334a:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    334e:	2010      	movs	r0, #16
    3350:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    3352:	4205      	tst	r5, r0
    3354:	d03c      	beq.n	33d0 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3356:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3358:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    335c:	2020      	movs	r0, #32
    335e:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    3360:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3362:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3366:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    336a:	4202      	tst	r2, r0
    336c:	d007      	beq.n	337e <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    336e:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    3372:	2201      	movs	r2, #1
    3374:	fa02 f404 	lsl.w	r4, r2, r4
    3378:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    337a:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    337e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3382:	4815      	ldr	r0, [pc, #84]	; (33d8 <_usb_d_dev_ep_stall+0x144>)
    3384:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    3388:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    338c:	f002 0207 	and.w	r2, r2, #7
    3390:	2a01      	cmp	r2, #1
    3392:	d00c      	beq.n	33ae <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    3394:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3398:	4a0f      	ldr	r2, [pc, #60]	; (33d8 <_usb_d_dev_ep_stall+0x144>)
    339a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    339e:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    33a2:	f36f 02c3 	bfc	r2, #3, #1
    33a6:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    33aa:	2000      	movs	r0, #0
    33ac:	e79a      	b.n	32e4 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    33ae:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    33b2:	f012 0f30 	tst.w	r2, #48	; 0x30
    33b6:	d10d      	bne.n	33d4 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    33b8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    33bc:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    33c0:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    33c4:	f36f 02c3 	bfc	r2, #3, #1
    33c8:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    33cc:	2000      	movs	r0, #0
    33ce:	e789      	b.n	32e4 <_usb_d_dev_ep_stall+0x50>
    33d0:	2000      	movs	r0, #0
    33d2:	e787      	b.n	32e4 <_usb_d_dev_ep_stall+0x50>
    33d4:	2000      	movs	r0, #0
    33d6:	e785      	b.n	32e4 <_usb_d_dev_ep_stall+0x50>
    33d8:	2000013c 	.word	0x2000013c

000033dc <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    33dc:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    33de:	f000 040f 	and.w	r4, r0, #15
    33e2:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    33e4:	4a14      	ldr	r2, [pc, #80]	; (3438 <_usb_d_dev_ep_read_req+0x5c>)
    33e6:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    33e8:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    33ea:	6840      	ldr	r0, [r0, #4]
    33ec:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    33f0:	2c02      	cmp	r4, #2
    33f2:	d817      	bhi.n	3424 <_usb_d_dev_ep_read_req+0x48>
    33f4:	b1c9      	cbz	r1, 342a <_usb_d_dev_ep_read_req+0x4e>
    33f6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    33fa:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    33fe:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    3400:	2a11      	cmp	r2, #17
    3402:	d115      	bne.n	3430 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3404:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    3408:	f012 0f10 	tst.w	r2, #16
    340c:	d102      	bne.n	3414 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    340e:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    3410:	bc30      	pop	{r4, r5}
    3412:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    3414:	682c      	ldr	r4, [r5, #0]
    3416:	686a      	ldr	r2, [r5, #4]
    3418:	600c      	str	r4, [r1, #0]
    341a:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    341c:	2210      	movs	r2, #16
    341e:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    3422:	e7f5      	b.n	3410 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    3424:	f06f 0011 	mvn.w	r0, #17
    3428:	e7f2      	b.n	3410 <_usb_d_dev_ep_read_req+0x34>
    342a:	f06f 0011 	mvn.w	r0, #17
    342e:	e7ef      	b.n	3410 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    3430:	f06f 0012 	mvn.w	r0, #18
    3434:	e7ec      	b.n	3410 <_usb_d_dev_ep_read_req+0x34>
    3436:	bf00      	nop
    3438:	2000013c 	.word	0x2000013c

0000343c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    343c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3440:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    3442:	7a03      	ldrb	r3, [r0, #8]
    3444:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3446:	f013 030f 	ands.w	r3, r3, #15
    344a:	f000 80c2 	beq.w	35d2 <_usb_d_dev_ep_trans+0x196>
    344e:	2e00      	cmp	r6, #0
    3450:	bfb4      	ite	lt
    3452:	1c9a      	addlt	r2, r3, #2
    3454:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    3456:	4614      	mov	r4, r2
    3458:	4969      	ldr	r1, [pc, #420]	; (3600 <_usb_d_dev_ep_trans+0x1c4>)
    345a:	f101 0760 	add.w	r7, r1, #96	; 0x60
    345e:	1c55      	adds	r5, r2, #1
    3460:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3464:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3468:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    346c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3470:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    3474:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3478:	428a      	cmp	r2, r1
    347a:	d025      	beq.n	34c8 <_usb_d_dev_ep_trans+0x8c>
    347c:	1e55      	subs	r5, r2, #1
    347e:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    3480:	6841      	ldr	r1, [r0, #4]
    3482:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    3484:	2b02      	cmp	r3, #2
    3486:	f200 8092 	bhi.w	35ae <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    348a:	6803      	ldr	r3, [r0, #0]
    348c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    3490:	d31c      	bcc.n	34cc <_usb_d_dev_ep_trans+0x90>
    3492:	eb03 0c01 	add.w	ip, r3, r1
    3496:	f8df e180 	ldr.w	lr, [pc, #384]	; 3618 <_usb_d_dev_ep_trans+0x1dc>
    349a:	45f4      	cmp	ip, lr
    349c:	d816      	bhi.n	34cc <_usb_d_dev_ep_trans+0x90>
    349e:	f013 0f03 	tst.w	r3, #3
    34a2:	d113      	bne.n	34cc <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    34a4:	2e00      	cmp	r6, #0
    34a6:	db2a      	blt.n	34fe <_usb_d_dev_ep_trans+0xc2>
    34a8:	428a      	cmp	r2, r1
    34aa:	f200 809c 	bhi.w	35e6 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    34ae:	b34d      	cbz	r5, 3504 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    34b0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    34b4:	4a52      	ldr	r2, [pc, #328]	; (3600 <_usb_d_dev_ep_trans+0x1c4>)
    34b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    34ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    34be:	2b00      	cmp	r3, #0
    34c0:	d07b      	beq.n	35ba <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    34c2:	f04f 0800 	mov.w	r8, #0
    34c6:	e00c      	b.n	34e2 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    34c8:	4615      	mov	r5, r2
    34ca:	e7d9      	b.n	3480 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    34cc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    34d0:	4a4b      	ldr	r2, [pc, #300]	; (3600 <_usb_d_dev_ep_trans+0x1c4>)
    34d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    34d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    34da:	2b00      	cmp	r3, #0
    34dc:	d06a      	beq.n	35b4 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    34de:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    34e2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    34e6:	4a46      	ldr	r2, [pc, #280]	; (3600 <_usb_d_dev_ep_trans+0x1c4>)
    34e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    34ec:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    34f0:	f013 0f08 	tst.w	r3, #8
    34f4:	d009      	beq.n	350a <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    34f6:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    34f8:	b003      	add	sp, #12
    34fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    34fe:	f04f 0800 	mov.w	r8, #0
    3502:	e7ee      	b.n	34e2 <_usb_d_dev_ep_trans+0xa6>
    3504:	f04f 0800 	mov.w	r8, #0
    3508:	e7eb      	b.n	34e2 <_usb_d_dev_ep_trans+0xa6>
    350a:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    350c:	a801      	add	r0, sp, #4
    350e:	4b3d      	ldr	r3, [pc, #244]	; (3604 <_usb_d_dev_ep_trans+0x1c8>)
    3510:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    3512:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3516:	4a3a      	ldr	r2, [pc, #232]	; (3600 <_usb_d_dev_ep_trans+0x1c4>)
    3518:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    351c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    3520:	f013 0f40 	tst.w	r3, #64	; 0x40
    3524:	d13c      	bne.n	35a0 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    3526:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    352a:	4b35      	ldr	r3, [pc, #212]	; (3600 <_usb_d_dev_ep_trans+0x1c4>)
    352c:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    3530:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    3534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3538:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    353c:	a801      	add	r0, sp, #4
    353e:	4b32      	ldr	r3, [pc, #200]	; (3608 <_usb_d_dev_ep_trans+0x1cc>)
    3540:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    3542:	f8da 3000 	ldr.w	r3, [sl]
    3546:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    354a:	f8da 3004 	ldr.w	r3, [sl, #4]
    354e:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    3552:	2300      	movs	r3, #0
    3554:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    3558:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    355a:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    355e:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    3562:	f368 1345 	bfi	r3, r8, #5, #1
    3566:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    356a:	f89a 3009 	ldrb.w	r3, [sl, #9]
    356e:	b1e3      	cbz	r3, 35aa <_usb_d_dev_ep_trans+0x16e>
    3570:	fab5 f585 	clz	r5, r5
    3574:	096d      	lsrs	r5, r5, #5
    3576:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    357a:	4b21      	ldr	r3, [pc, #132]	; (3600 <_usb_d_dev_ep_trans+0x1c4>)
    357c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    3580:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    3584:	f365 1304 	bfi	r3, r5, #4, #1
    3588:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    358c:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    358e:	f04f 0100 	mov.w	r1, #0
    3592:	4638      	mov	r0, r7
    3594:	bfb4      	ite	lt
    3596:	4b1d      	ldrlt	r3, [pc, #116]	; (360c <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    3598:	4b1d      	ldrge	r3, [pc, #116]	; (3610 <_usb_d_dev_ep_trans+0x1d4>)
    359a:	4798      	blx	r3
	return ERR_NONE;
    359c:	2000      	movs	r0, #0
    359e:	e7ab      	b.n	34f8 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    35a0:	a801      	add	r0, sp, #4
    35a2:	4b19      	ldr	r3, [pc, #100]	; (3608 <_usb_d_dev_ep_trans+0x1cc>)
    35a4:	4798      	blx	r3
		return USB_BUSY;
    35a6:	2001      	movs	r0, #1
    35a8:	e7a6      	b.n	34f8 <_usb_d_dev_ep_trans+0xbc>
    35aa:	2500      	movs	r5, #0
    35ac:	e7e3      	b.n	3576 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    35ae:	f06f 0011 	mvn.w	r0, #17
    35b2:	e7a1      	b.n	34f8 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    35b4:	f06f 0012 	mvn.w	r0, #18
    35b8:	e79e      	b.n	34f8 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    35ba:	f06f 0011 	mvn.w	r0, #17
    35be:	e79b      	b.n	34f8 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    35c0:	f06f 0012 	mvn.w	r0, #18
    35c4:	e798      	b.n	34f8 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    35c6:	6841      	ldr	r1, [r0, #4]
    35c8:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    35cc:	4f11      	ldr	r7, [pc, #68]	; (3614 <_usb_d_dev_ep_trans+0x1d8>)
    35ce:	2400      	movs	r4, #0
    35d0:	e75b      	b.n	348a <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    35d2:	4a0b      	ldr	r2, [pc, #44]	; (3600 <_usb_d_dev_ep_trans+0x1c4>)
    35d4:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    35d8:	f240 31ff 	movw	r1, #1023	; 0x3ff
    35dc:	428a      	cmp	r2, r1
    35de:	d0f2      	beq.n	35c6 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    35e0:	4f0c      	ldr	r7, [pc, #48]	; (3614 <_usb_d_dev_ep_trans+0x1d8>)
    35e2:	2400      	movs	r4, #0
    35e4:	e74a      	b.n	347c <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    35e6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    35ea:	4a05      	ldr	r2, [pc, #20]	; (3600 <_usb_d_dev_ep_trans+0x1c4>)
    35ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    35f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    35f4:	2b00      	cmp	r3, #0
    35f6:	d0e3      	beq.n	35c0 <_usb_d_dev_ep_trans+0x184>
    35f8:	f04f 0801 	mov.w	r8, #1
    35fc:	e771      	b.n	34e2 <_usb_d_dev_ep_trans+0xa6>
    35fe:	bf00      	nop
    3600:	2000013c 	.word	0x2000013c
    3604:	00000f91 	.word	0x00000f91
    3608:	00000f9f 	.word	0x00000f9f
    360c:	00002bad 	.word	0x00002bad
    3610:	00002d31 	.word	0x00002d31
    3614:	200001b0 	.word	0x200001b0
    3618:	20041fff 	.word	0x20041fff

0000361c <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    361c:	4b09      	ldr	r3, [pc, #36]	; (3644 <_usb_d_dev_register_ep_callback+0x28>)
    361e:	2900      	cmp	r1, #0
    3620:	bf08      	it	eq
    3622:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    3624:	4603      	mov	r3, r0
    3626:	b130      	cbz	r0, 3636 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    3628:	2801      	cmp	r0, #1
    362a:	d007      	beq.n	363c <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    362c:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    362e:	bf04      	itt	eq
    3630:	4b05      	ldreq	r3, [pc, #20]	; (3648 <_usb_d_dev_register_ep_callback+0x2c>)
    3632:	6719      	streq	r1, [r3, #112]	; 0x70
    3634:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    3636:	4b04      	ldr	r3, [pc, #16]	; (3648 <_usb_d_dev_register_ep_callback+0x2c>)
    3638:	6699      	str	r1, [r3, #104]	; 0x68
    363a:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    363c:	4b02      	ldr	r3, [pc, #8]	; (3648 <_usb_d_dev_register_ep_callback+0x2c>)
    363e:	66d9      	str	r1, [r3, #108]	; 0x6c
    3640:	4770      	bx	lr
    3642:	bf00      	nop
    3644:	00002925 	.word	0x00002925
    3648:	2000013c 	.word	0x2000013c

0000364c <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    364c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    364e:	4b01      	ldr	r3, [pc, #4]	; (3654 <USB_0_Handler+0x8>)
    3650:	4798      	blx	r3
    3652:	bd08      	pop	{r3, pc}
    3654:	00002f21 	.word	0x00002f21

00003658 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    3658:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    365a:	4b01      	ldr	r3, [pc, #4]	; (3660 <USB_1_Handler+0x8>)
    365c:	4798      	blx	r3
    365e:	bd08      	pop	{r3, pc}
    3660:	00002f21 	.word	0x00002f21

00003664 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    3664:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3666:	4b01      	ldr	r3, [pc, #4]	; (366c <USB_2_Handler+0x8>)
    3668:	4798      	blx	r3
    366a:	bd08      	pop	{r3, pc}
    366c:	00002f21 	.word	0x00002f21

00003670 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    3670:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3672:	4b01      	ldr	r3, [pc, #4]	; (3678 <USB_3_Handler+0x8>)
    3674:	4798      	blx	r3
    3676:	bd08      	pop	{r3, pc}
    3678:	00002f21 	.word	0x00002f21

0000367c <main>:
#include <atmel_start.h>

int main(void)
{
    367c:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    367e:	4b01      	ldr	r3, [pc, #4]	; (3684 <main+0x8>)
    3680:	4798      	blx	r3
    3682:	e7fe      	b.n	3682 <main+0x6>
    3684:	000002d1 	.word	0x000002d1

00003688 <__libc_init_array>:
    3688:	b570      	push	{r4, r5, r6, lr}
    368a:	4e0d      	ldr	r6, [pc, #52]	; (36c0 <__libc_init_array+0x38>)
    368c:	4c0d      	ldr	r4, [pc, #52]	; (36c4 <__libc_init_array+0x3c>)
    368e:	1ba4      	subs	r4, r4, r6
    3690:	10a4      	asrs	r4, r4, #2
    3692:	2500      	movs	r5, #0
    3694:	42a5      	cmp	r5, r4
    3696:	d109      	bne.n	36ac <__libc_init_array+0x24>
    3698:	4e0b      	ldr	r6, [pc, #44]	; (36c8 <__libc_init_array+0x40>)
    369a:	4c0c      	ldr	r4, [pc, #48]	; (36cc <__libc_init_array+0x44>)
    369c:	f000 f90a 	bl	38b4 <_init>
    36a0:	1ba4      	subs	r4, r4, r6
    36a2:	10a4      	asrs	r4, r4, #2
    36a4:	2500      	movs	r5, #0
    36a6:	42a5      	cmp	r5, r4
    36a8:	d105      	bne.n	36b6 <__libc_init_array+0x2e>
    36aa:	bd70      	pop	{r4, r5, r6, pc}
    36ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    36b0:	4798      	blx	r3
    36b2:	3501      	adds	r5, #1
    36b4:	e7ee      	b.n	3694 <__libc_init_array+0xc>
    36b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    36ba:	4798      	blx	r3
    36bc:	3501      	adds	r5, #1
    36be:	e7f2      	b.n	36a6 <__libc_init_array+0x1e>
    36c0:	000038c0 	.word	0x000038c0
    36c4:	000038c0 	.word	0x000038c0
    36c8:	000038c0 	.word	0x000038c0
    36cc:	000038c4 	.word	0x000038c4

000036d0 <memcpy>:
    36d0:	b510      	push	{r4, lr}
    36d2:	1e43      	subs	r3, r0, #1
    36d4:	440a      	add	r2, r1
    36d6:	4291      	cmp	r1, r2
    36d8:	d100      	bne.n	36dc <memcpy+0xc>
    36da:	bd10      	pop	{r4, pc}
    36dc:	f811 4b01 	ldrb.w	r4, [r1], #1
    36e0:	f803 4f01 	strb.w	r4, [r3, #1]!
    36e4:	e7f7      	b.n	36d6 <memcpy+0x6>

000036e6 <memset>:
    36e6:	4402      	add	r2, r0
    36e8:	4603      	mov	r3, r0
    36ea:	4293      	cmp	r3, r2
    36ec:	d100      	bne.n	36f0 <memset+0xa>
    36ee:	4770      	bx	lr
    36f0:	f803 1b01 	strb.w	r1, [r3], #1
    36f4:	e7f9      	b.n	36ea <memset+0x4>
    36f6:	0000      	movs	r0, r0
    36f8:	682f2e2e 	.word	0x682f2e2e
    36fc:	732f6c61 	.word	0x732f6c61
    3700:	682f6372 	.word	0x682f6372
    3704:	635f6c61 	.word	0x635f6c61
    3708:	615f6e61 	.word	0x615f6e61
    370c:	636e7973 	.word	0x636e7973
    3710:	0000632e 	.word	0x0000632e
    3714:	682f2e2e 	.word	0x682f2e2e
    3718:	732f6c61 	.word	0x732f6c61
    371c:	682f6372 	.word	0x682f6372
    3720:	695f6c61 	.word	0x695f6c61
    3724:	6d5f6332 	.word	0x6d5f6332
    3728:	7973615f 	.word	0x7973615f
    372c:	632e636e 	.word	0x632e636e
    3730:	00000000 	.word	0x00000000
    3734:	682f2e2e 	.word	0x682f2e2e
    3738:	732f6c61 	.word	0x732f6c61
    373c:	682f6372 	.word	0x682f6372
    3740:	695f6c61 	.word	0x695f6c61
    3744:	6d5f6332 	.word	0x6d5f6332
    3748:	6e79735f 	.word	0x6e79735f
    374c:	00632e63 	.word	0x00632e63
    3750:	682f2e2e 	.word	0x682f2e2e
    3754:	732f6c61 	.word	0x732f6c61
    3758:	682f6372 	.word	0x682f6372
    375c:	735f6c61 	.word	0x735f6c61
    3760:	6d5f6970 	.word	0x6d5f6970
    3764:	6e79735f 	.word	0x6e79735f
    3768:	00632e63 	.word	0x00632e63

0000376c <_map>:
    376c:	00000003 00000023 00000004 00000024     ....#.......$...
    377c:	00000005 00000025 00000006 00000026     ....%.......&...
    378c:	00000007 00000027 00000008 00000028     ....'.......(...
    379c:	00000009 00000029 0000000a 0000002a     ....).......*...
    37ac:	0000000b 0000002b 0000000e 0000003c     ....+.......<...
    37bc:	0000000f 0000003d 682f2e2e 652f6c70     ....=...../hpl/e
    37cc:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    37dc:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    37ec:	43000000 43000400 43000800 43000c00     ...C...C...C...C

000037fc <_i2cms>:
    37fc:	00000001 00200014 00000100 00003635     ...... .....56..
    380c:	00d70000 00b71b00 00000002 00200014     .............. .
    381c:	00000100 00003635 00d70000 00b71b00     ....56..........
    382c:	00000004 00200014 00000100 00003635     ...... .....56..
    383c:	00d70000 00b71b00 00000005 00200014     .............. .
    384c:	00000100 00003635 00d70000 00b71b00     ....56..........
    385c:	00000006 00200014 00000100 00003635     ...... .....56..
    386c:	00d70000 00b71b00                       ........

00003874 <sercomspi_regs>:
    3874:	0020000c 00020000 00000000 01ff0077     .. .........w...
    3884:	20000c00 02000000 00000000 ff007700     ... .........w..
    3894:	00000301 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    38a4:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

000038b4 <_init>:
    38b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38b6:	bf00      	nop
    38b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    38ba:	bc08      	pop	{r3}
    38bc:	469e      	mov	lr, r3
    38be:	4770      	bx	lr

000038c0 <__init_array_start>:
    38c0:	00000289 	.word	0x00000289

000038c4 <_fini>:
    38c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38c6:	bf00      	nop
    38c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    38ca:	bc08      	pop	{r3}
    38cc:	469e      	mov	lr, r3
    38ce:	4770      	bx	lr

000038d0 <__fini_array_start>:
    38d0:	00000265 	.word	0x00000265
