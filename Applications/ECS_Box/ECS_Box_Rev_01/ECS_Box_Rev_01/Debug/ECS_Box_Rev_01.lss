
ECS_Box_Rev_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003664  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000014  20000000  00003664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020014  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020014  2**0
                  CONTENTS
  4 .bss          00000454  20000014  00003678  00020014  2**2
                  ALLOC
  5 .stack        00010000  20000468  00003acc  00020014  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
  8 .debug_info   00035a11  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003670  00000000  00000000  00055aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00017076  00000000  00000000  0005911c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000cb8  00000000  00000000  00070192  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000013a0  00000000  00000000  00070e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033bc3  00000000  00000000  000721ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00014394  00000000  00000000  000a5dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011eb2a  00000000  00000000  000ba141  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000222c  00000000  00000000  001d8c6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 04 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     h.. ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 fd 1a 00 00 09 1b 00 00 15 1b 00 00     ................
      7c:	21 1b 00 00 2d 1b 00 00 39 1b 00 00 45 1b 00 00     !...-...9...E...
      8c:	51 1b 00 00 5d 1b 00 00 69 1b 00 00 75 1b 00 00     Q...]...i...u...
      9c:	81 1b 00 00 8d 1b 00 00 99 1b 00 00 a5 1b 00 00     ................
      ac:	b1 1b 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      bc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      cc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	65 1d 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     e...............
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     164:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     174:	dd 02 00 00 dd 02 00 00 61 17 00 00 f5 33 00 00     ........a....3..
     184:	01 34 00 00 0d 34 00 00 19 34 00 00 dd 02 00 00     .4...4...4......
     194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1f4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     204:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     214:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     224:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000014 	.word	0x20000014
     280:	00000000 	.word	0x00000000
     284:	00003664 	.word	0x00003664

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00003664 	.word	0x00003664
     2c4:	20000018 	.word	0x20000018
     2c8:	00003664 	.word	0x00003664
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	00000df1 	.word	0x00000df1

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b1c      	ldr	r3, [pc, #112]	; (354 <Reset_Handler+0x74>)
     2e4:	4a1c      	ldr	r2, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d010      	beq.n	30c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	4a19      	ldr	r2, [pc, #100]	; (354 <Reset_Handler+0x74>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d20c      	bcs.n	30c <Reset_Handler+0x2c>
     2f2:	3b01      	subs	r3, #1
     2f4:	1a9b      	subs	r3, r3, r2
     2f6:	f023 0303 	bic.w	r3, r3, #3
     2fa:	3304      	adds	r3, #4
     2fc:	4413      	add	r3, r2
     2fe:	4916      	ldr	r1, [pc, #88]	; (358 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     300:	f851 0b04 	ldr.w	r0, [r1], #4
     304:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     308:	429a      	cmp	r2, r3
     30a:	d1f9      	bne.n	300 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     30c:	4b14      	ldr	r3, [pc, #80]	; (360 <Reset_Handler+0x80>)
     30e:	4a15      	ldr	r2, [pc, #84]	; (364 <Reset_Handler+0x84>)
     310:	429a      	cmp	r2, r3
     312:	d20a      	bcs.n	32a <Reset_Handler+0x4a>
     314:	3b01      	subs	r3, #1
     316:	1a9b      	subs	r3, r3, r2
     318:	f023 0303 	bic.w	r3, r3, #3
     31c:	3304      	adds	r3, #4
     31e:	4413      	add	r3, r2
                *pDest++ = 0;
     320:	2100      	movs	r1, #0
     322:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     326:	4293      	cmp	r3, r2
     328:	d1fb      	bne.n	322 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32a:	4b0f      	ldr	r3, [pc, #60]	; (368 <Reset_Handler+0x88>)
     32c:	4a0f      	ldr	r2, [pc, #60]	; (36c <Reset_Handler+0x8c>)
     32e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     332:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     334:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     338:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     33c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     344:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     348:	4b09      	ldr	r3, [pc, #36]	; (370 <Reset_Handler+0x90>)
     34a:	4798      	blx	r3
        main();
     34c:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     34e:	4798      	blx	r3
     350:	e7fe      	b.n	350 <Reset_Handler+0x70>
     352:	bf00      	nop
     354:	20000000 	.word	0x20000000
     358:	00003664 	.word	0x00003664
     35c:	20000014 	.word	0x20000014
     360:	20000468 	.word	0x20000468
     364:	20000014 	.word	0x20000014
     368:	e000ed00 	.word	0xe000ed00
     36c:	00000000 	.word	0x00000000
     370:	00003431 	.word	0x00003431
     374:	00003425 	.word	0x00003425

00000378 <EXTERNAL_IRQ_0_init>:
struct i2c_m_sync_desc Fvx_I2C;

struct i2c_m_sync_desc FANs_I2C;

void EXTERNAL_IRQ_0_init(void)
{
     378:	b510      	push	{r4, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     37a:	2240      	movs	r2, #64	; 0x40
     37c:	4bee      	ldr	r3, [pc, #952]	; (738 <EXTERNAL_IRQ_0_init+0x3c0>)
     37e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     382:	4aee      	ldr	r2, [pc, #952]	; (73c <EXTERNAL_IRQ_0_init+0x3c4>)
     384:	6953      	ldr	r3, [r2, #20]
     386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     38a:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     38c:	4bec      	ldr	r3, [pc, #944]	; (740 <EXTERNAL_IRQ_0_init+0x3c8>)
     38e:	2201      	movs	r2, #1
     390:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     394:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     398:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     39c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     3a0:	4ae8      	ldr	r2, [pc, #928]	; (744 <EXTERNAL_IRQ_0_init+0x3cc>)
     3a2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3a6:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
     3aa:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     3ae:	f883 1140 	strb.w	r1, [r3, #320]	; 0x140
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3b2:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
	tmp &= ~PORT_PINCFG_PMUXEN;
     3b6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ba:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3be:	f883 1140 	strb.w	r1, [r3, #320]	; 0x140
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3c2:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3c6:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ca:	f883 1130 	strb.w	r1, [r3, #304]	; 0x130
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3ce:	2102      	movs	r1, #2
     3d0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3d4:	49dc      	ldr	r1, [pc, #880]	; (748 <EXTERNAL_IRQ_0_init+0x3d0>)
     3d6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     3da:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3de:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
     3e2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     3e6:	f883 10c1 	strb.w	r1, [r3, #193]	; 0xc1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3ea:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ee:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3f2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3f6:	f883 10c1 	strb.w	r1, [r3, #193]	; 0xc1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3fa:	f893 10b0 	ldrb.w	r1, [r3, #176]	; 0xb0
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3fe:	f001 010f 	and.w	r1, r1, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     402:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     406:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     40a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     40e:	48cf      	ldr	r0, [pc, #828]	; (74c <EXTERNAL_IRQ_0_init+0x3d4>)
     410:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     414:	49ce      	ldr	r1, [pc, #824]	; (750 <EXTERNAL_IRQ_0_init+0x3d8>)
     416:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     41a:	f893 1152 	ldrb.w	r1, [r3, #338]	; 0x152
     41e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     422:	f883 1152 	strb.w	r1, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     426:	f893 1152 	ldrb.w	r1, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     42a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     42e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     432:	f883 1152 	strb.w	r1, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     436:	f893 1139 	ldrb.w	r1, [r3, #313]	; 0x139
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     43a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     43e:	f883 1139 	strb.w	r1, [r3, #313]	; 0x139
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     442:	2108      	movs	r1, #8
     444:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     446:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     44a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     44e:	6299      	str	r1, [r3, #40]	; 0x28
     450:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     452:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
     456:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     45a:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     45e:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
     462:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     466:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     46a:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     46e:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     472:	f001 010f 	and.w	r1, r1, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     476:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     47a:	2110      	movs	r1, #16
     47c:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     47e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     482:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     486:	6299      	str	r1, [r3, #40]	; 0x28
     488:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     48a:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
     48e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     492:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     496:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     49a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     49e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4a2:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a6:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4aa:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ae:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4b2:	2120      	movs	r1, #32
     4b4:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4b6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     4ba:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     4be:	6299      	str	r1, [r3, #40]	; 0x28
     4c0:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4c2:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
     4c6:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     4ca:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ce:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     4d2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4d6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4da:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4de:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4e2:	f001 010f 	and.w	r1, r1, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4e6:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
     4ee:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4f2:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     4f6:	4997      	ldr	r1, [pc, #604]	; (754 <EXTERNAL_IRQ_0_init+0x3dc>)
     4f8:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4fc:	f893 1156 	ldrb.w	r1, [r3, #342]	; 0x156
     500:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     504:	f883 1156 	strb.w	r1, [r3, #342]	; 0x156
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     508:	f893 1156 	ldrb.w	r1, [r3, #342]	; 0x156
	tmp &= ~PORT_PINCFG_PMUXEN;
     50c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     510:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     514:	f883 1156 	strb.w	r1, [r3, #342]	; 0x156
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     518:	f893 113b 	ldrb.w	r1, [r3, #315]	; 0x13b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     51c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     520:	f883 113b 	strb.w	r1, [r3, #315]	; 0x13b
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     524:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
     528:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     52c:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     530:	4989      	ldr	r1, [pc, #548]	; (758 <EXTERNAL_IRQ_0_init+0x3e0>)
     532:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     536:	f893 1157 	ldrb.w	r1, [r3, #343]	; 0x157
     53a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     53e:	f883 1157 	strb.w	r1, [r3, #343]	; 0x157
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     542:	f893 1157 	ldrb.w	r1, [r3, #343]	; 0x157
	tmp &= ~PORT_PINCFG_PMUXEN;
     546:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     54a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     54e:	f883 1157 	strb.w	r1, [r3, #343]	; 0x157
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     552:	f893 113b 	ldrb.w	r1, [r3, #315]	; 0x13b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     556:	f001 010f 	and.w	r1, r1, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     55a:	f883 113b 	strb.w	r1, [r3, #315]	; 0x13b
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     55e:	f44f 7180 	mov.w	r1, #256	; 0x100
     562:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     566:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     56a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     56e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     572:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     576:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
     57a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     57e:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     582:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     586:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     58a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     58e:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     592:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     596:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     59a:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     59e:	f44f 7100 	mov.w	r1, #512	; 0x200
     5a2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5a6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     5aa:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     5ae:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     5b2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5b6:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
     5ba:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     5be:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5c2:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     5c6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ca:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ce:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5d2:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5d6:	f001 010f 	and.w	r1, r1, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5da:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5de:	f44f 6180 	mov.w	r1, #1024	; 0x400
     5e2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5e6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     5ea:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     5ee:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     5f2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5f6:	f893 114a 	ldrb.w	r1, [r3, #330]	; 0x14a
     5fa:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     5fe:	f883 114a 	strb.w	r1, [r3, #330]	; 0x14a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     602:	f893 114a 	ldrb.w	r1, [r3, #330]	; 0x14a
	tmp &= ~PORT_PINCFG_PMUXEN;
     606:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     60a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     60e:	f883 114a 	strb.w	r1, [r3, #330]	; 0x14a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     612:	f893 1135 	ldrb.w	r1, [r3, #309]	; 0x135
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     616:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     61a:	f883 1135 	strb.w	r1, [r3, #309]	; 0x135
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     61e:	f44f 6100 	mov.w	r1, #2048	; 0x800
     622:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     626:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     62a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     62e:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     632:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     636:	f893 114b 	ldrb.w	r1, [r3, #331]	; 0x14b
     63a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     63e:	f883 114b 	strb.w	r1, [r3, #331]	; 0x14b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     642:	f893 114b 	ldrb.w	r1, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     646:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     64a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     64e:	f883 114b 	strb.w	r1, [r3, #331]	; 0x14b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     652:	f893 1135 	ldrb.w	r1, [r3, #309]	; 0x135
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     656:	f001 010f 	and.w	r1, r1, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     65a:	f883 1135 	strb.w	r1, [r3, #309]	; 0x135
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     65e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     662:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     666:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     66a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     66e:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     672:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     676:	f893 114c 	ldrb.w	r1, [r3, #332]	; 0x14c
     67a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     67e:	f883 114c 	strb.w	r1, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     682:	f893 114c 	ldrb.w	r1, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     686:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     68a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     68e:	f883 114c 	strb.w	r1, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     692:	f893 1136 	ldrb.w	r1, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     696:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     69a:	f883 1136 	strb.w	r1, [r3, #310]	; 0x136
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     69e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     6a2:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6a4:	492d      	ldr	r1, [pc, #180]	; (75c <EXTERNAL_IRQ_0_init+0x3e4>)
     6a6:	6299      	str	r1, [r3, #40]	; 0x28
     6a8:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6aa:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
     6ae:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     6b2:	f883 104d 	strb.w	r1, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6b6:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ba:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6be:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6c2:	f883 104d 	strb.w	r1, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6c6:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6ca:	f001 010f 	and.w	r1, r1, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6ce:	f883 1036 	strb.w	r1, [r3, #54]	; 0x36
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     6d6:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6d8:	4c21      	ldr	r4, [pc, #132]	; (760 <EXTERNAL_IRQ_0_init+0x3e8>)
     6da:	629c      	str	r4, [r3, #40]	; 0x28
     6dc:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6de:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     6e0:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
     6e4:	f042 0204 	orr.w	r2, r2, #4
     6e8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6ec:	6159      	str	r1, [r3, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6ee:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
	tmp &= ~PORT_PINCFG_PMUXEN;
     6f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6fa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6fe:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     702:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     706:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     70a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
     70e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     712:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     716:	4a13      	ldr	r2, [pc, #76]	; (764 <EXTERNAL_IRQ_0_init+0x3ec>)
     718:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     71c:	f893 215f 	ldrb.w	r2, [r3, #351]	; 0x15f
     720:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     724:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     728:	f893 215f 	ldrb.w	r2, [r3, #351]	; 0x15f
	tmp &= ~PORT_PINCFG_PMUXEN;
     72c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     730:	f042 0201 	orr.w	r2, r2, #1
     734:	e018      	b.n	768 <EXTERNAL_IRQ_0_init+0x3f0>
     736:	bf00      	nop
     738:	40001c00 	.word	0x40001c00
     73c:	40000800 	.word	0x40000800
     740:	41008000 	.word	0x41008000
     744:	c0020000 	.word	0xc0020000
     748:	40020002 	.word	0x40020002
     74c:	40020000 	.word	0x40020000
     750:	c0020004 	.word	0xc0020004
     754:	c0020040 	.word	0xc0020040
     758:	c0020080 	.word	0xc0020080
     75c:	40022000 	.word	0x40022000
     760:	40024000 	.word	0x40024000
     764:	c0028000 	.word	0xc0028000
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     768:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     76c:	f893 213f 	ldrb.w	r2, [r3, #319]	; 0x13f
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     770:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     774:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(nAlcReset, PINMUX_PC31A_EIC_EXTINT15);

	ext_irq_init();
     778:	4b01      	ldr	r3, [pc, #4]	; (780 <EXTERNAL_IRQ_0_init+0x408>)
     77a:	4798      	blx	r3
     77c:	bd10      	pop	{r4, pc}
     77e:	bf00      	nop
     780:	000011bd 	.word	0x000011bd

00000784 <Flash_Mem_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     784:	4b29      	ldr	r3, [pc, #164]	; (82c <Flash_Mem_SPI_PORT_init+0xa8>)
     786:	f44f 7200 	mov.w	r2, #512	; 0x200
     78a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     78c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     78e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     792:	629a      	str	r2, [r3, #40]	; 0x28
     794:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     798:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     79a:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     79e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7a2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7a6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7aa:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7ae:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     7b2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7ba:	f44f 7280 	mov.w	r2, #256	; 0x100
     7be:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7c0:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7c2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     7c6:	629a      	str	r2, [r3, #40]	; 0x28
     7c8:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7ca:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7d2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7da:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7de:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7e2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     7ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
     7ee:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7f0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     7f4:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     7f8:	629a      	str	r2, [r3, #40]	; 0x28
     7fa:	4a0d      	ldr	r2, [pc, #52]	; (830 <Flash_Mem_SPI_PORT_init+0xac>)
     7fc:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7fe:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     802:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     806:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     80a:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     80e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     812:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     816:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     81a:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     81e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     822:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
     82a:	4770      	bx	lr
     82c:	41008000 	.word	0x41008000
     830:	c0020000 	.word	0xc0020000

00000834 <Flash_Mem_SPI_CLOCK_init>:
     834:	4b06      	ldr	r3, [pc, #24]	; (850 <Flash_Mem_SPI_CLOCK_init+0x1c>)
     836:	2240      	movs	r2, #64	; 0x40
     838:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     83c:	2243      	movs	r2, #67	; 0x43
     83e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     842:	4a04      	ldr	r2, [pc, #16]	; (854 <Flash_Mem_SPI_CLOCK_init+0x20>)
     844:	6993      	ldr	r3, [r2, #24]
     846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     84a:	6193      	str	r3, [r2, #24]
     84c:	4770      	bx	lr
     84e:	bf00      	nop
     850:	40001c00 	.word	0x40001c00
     854:	40000800 	.word	0x40000800

00000858 <Flash_Mem_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void Flash_Mem_SPI_init(void)
{
     858:	b508      	push	{r3, lr}
	Flash_Mem_SPI_CLOCK_init();
     85a:	4b04      	ldr	r3, [pc, #16]	; (86c <Flash_Mem_SPI_init+0x14>)
     85c:	4798      	blx	r3
	spi_m_sync_init(&Flash_Mem_SPI, SERCOM2);
     85e:	4904      	ldr	r1, [pc, #16]	; (870 <Flash_Mem_SPI_init+0x18>)
     860:	4804      	ldr	r0, [pc, #16]	; (874 <Flash_Mem_SPI_init+0x1c>)
     862:	4b05      	ldr	r3, [pc, #20]	; (878 <Flash_Mem_SPI_init+0x20>)
     864:	4798      	blx	r3
	Flash_Mem_SPI_PORT_init();
     866:	4b05      	ldr	r3, [pc, #20]	; (87c <Flash_Mem_SPI_init+0x24>)
     868:	4798      	blx	r3
     86a:	bd08      	pop	{r3, pc}
     86c:	00000835 	.word	0x00000835
     870:	41012000 	.word	0x41012000
     874:	20000390 	.word	0x20000390
     878:	00001289 	.word	0x00001289
     87c:	00000785 	.word	0x00000785

00000880 <Shared_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     880:	4b16      	ldr	r3, [pc, #88]	; (8dc <Shared_I2C_PORT_init+0x5c>)
     882:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
     886:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     88a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     88e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     892:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     896:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     89a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     89e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     8a2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     8a6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8ae:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
     8b2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     8b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8ba:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     8be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8c2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8ca:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     8ce:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8d2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     8da:	4770      	bx	lr
     8dc:	41008000 	.word	0x41008000

000008e0 <Shared_I2C_CLOCK_init>:
     8e0:	4b06      	ldr	r3, [pc, #24]	; (8fc <Shared_I2C_CLOCK_init+0x1c>)
     8e2:	2240      	movs	r2, #64	; 0x40
     8e4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     8e8:	2243      	movs	r2, #67	; 0x43
     8ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     8ee:	4a04      	ldr	r2, [pc, #16]	; (900 <Shared_I2C_CLOCK_init+0x20>)
     8f0:	6993      	ldr	r3, [r2, #24]
     8f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     8f6:	6193      	str	r3, [r2, #24]
     8f8:	4770      	bx	lr
     8fa:	bf00      	nop
     8fc:	40001c00 	.word	0x40001c00
     900:	40000800 	.word	0x40000800

00000904 <Shared_I2C_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void Shared_I2C_init(void)
{
     904:	b508      	push	{r3, lr}
	Shared_I2C_CLOCK_init();
     906:	4b04      	ldr	r3, [pc, #16]	; (918 <Shared_I2C_init+0x14>)
     908:	4798      	blx	r3
	i2c_m_sync_init(&Shared_I2C, SERCOM3);
     90a:	4904      	ldr	r1, [pc, #16]	; (91c <Shared_I2C_init+0x18>)
     90c:	4804      	ldr	r0, [pc, #16]	; (920 <Shared_I2C_init+0x1c>)
     90e:	4b05      	ldr	r3, [pc, #20]	; (924 <Shared_I2C_init+0x20>)
     910:	4798      	blx	r3
	Shared_I2C_PORT_init();
     912:	4b05      	ldr	r3, [pc, #20]	; (928 <Shared_I2C_init+0x24>)
     914:	4798      	blx	r3
     916:	bd08      	pop	{r3, pc}
     918:	000008e1 	.word	0x000008e1
     91c:	41014000 	.word	0x41014000
     920:	200003f8 	.word	0x200003f8
     924:	00001249 	.word	0x00001249
     928:	00000881 	.word	0x00000881

0000092c <SPI_Temp_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     92c:	4b2c      	ldr	r3, [pc, #176]	; (9e0 <SPI_Temp_PORT_init+0xb4>)
     92e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     932:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     93a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     93e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     942:	4a28      	ldr	r2, [pc, #160]	; (9e4 <SPI_Temp_PORT_init+0xb8>)
     944:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     948:	f893 20db 	ldrb.w	r2, [r3, #219]	; 0xdb
	tmp &= ~PORT_PINCFG_PMUXEN;
     94c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     950:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     954:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     958:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     95c:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     960:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     964:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     968:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
     96c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     974:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     978:	4a1b      	ldr	r2, [pc, #108]	; (9e8 <SPI_Temp_PORT_init+0xbc>)
     97a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     97e:	f893 20da 	ldrb.w	r2, [r3, #218]	; 0xda
	tmp &= ~PORT_PINCFG_PMUXEN;
     982:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     986:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     98a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     98e:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     992:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     996:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     99a:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     99e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     9a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9a6:	4a11      	ldr	r2, [pc, #68]	; (9ec <SPI_Temp_PORT_init+0xc0>)
     9a8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     9ac:	4a10      	ldr	r2, [pc, #64]	; (9f0 <SPI_Temp_PORT_init+0xc4>)
     9ae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     9b2:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
     9b6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     9ba:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9be:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
	tmp &= ~PORT_PINCFG_PMUXEN;
     9c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9c6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9ca:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9ce:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9d2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9d6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9da:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
     9de:	4770      	bx	lr
     9e0:	41008000 	.word	0x41008000
     9e4:	c0000800 	.word	0xc0000800
     9e8:	c0000400 	.word	0xc0000400
     9ec:	40020000 	.word	0x40020000
     9f0:	c0021000 	.word	0xc0021000

000009f4 <SPI_Temp_CLOCK_init>:
     9f4:	4b06      	ldr	r3, [pc, #24]	; (a10 <SPI_Temp_CLOCK_init+0x1c>)
     9f6:	2240      	movs	r2, #64	; 0x40
     9f8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     9fc:	2243      	movs	r2, #67	; 0x43
     9fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     a02:	4a04      	ldr	r2, [pc, #16]	; (a14 <SPI_Temp_CLOCK_init+0x20>)
     a04:	6a13      	ldr	r3, [r2, #32]
     a06:	f043 0301 	orr.w	r3, r3, #1
     a0a:	6213      	str	r3, [r2, #32]
     a0c:	4770      	bx	lr
     a0e:	bf00      	nop
     a10:	40001c00 	.word	0x40001c00
     a14:	40000800 	.word	0x40000800

00000a18 <SPI_Temp_init>:

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}

void SPI_Temp_init(void)
{
     a18:	b508      	push	{r3, lr}
	SPI_Temp_CLOCK_init();
     a1a:	4b05      	ldr	r3, [pc, #20]	; (a30 <SPI_Temp_init+0x18>)
     a1c:	4798      	blx	r3
	spi_m_sync_init(&SPI_Temp, SERCOM4);
     a1e:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     a22:	4804      	ldr	r0, [pc, #16]	; (a34 <SPI_Temp_init+0x1c>)
     a24:	4b04      	ldr	r3, [pc, #16]	; (a38 <SPI_Temp_init+0x20>)
     a26:	4798      	blx	r3
	SPI_Temp_PORT_init();
     a28:	4b04      	ldr	r3, [pc, #16]	; (a3c <SPI_Temp_init+0x24>)
     a2a:	4798      	blx	r3
     a2c:	bd08      	pop	{r3, pc}
     a2e:	bf00      	nop
     a30:	000009f5 	.word	0x000009f5
     a34:	200003e0 	.word	0x200003e0
     a38:	00001289 	.word	0x00001289
     a3c:	0000092d 	.word	0x0000092d

00000a40 <Fvx_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a40:	4b16      	ldr	r3, [pc, #88]	; (a9c <Fvx_I2C_PORT_init+0x5c>)
     a42:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     a46:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     a4a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a4e:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     a52:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a56:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a5a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a5e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a62:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a66:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a6a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a6e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     a72:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     a76:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a7a:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     a7e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a82:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a86:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a8a:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a8e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a92:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a96:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     a9a:	4770      	bx	lr
     a9c:	41008000 	.word	0x41008000

00000aa0 <Fvx_I2C_CLOCK_init>:
     aa0:	4b06      	ldr	r3, [pc, #24]	; (abc <Fvx_I2C_CLOCK_init+0x1c>)
     aa2:	2240      	movs	r2, #64	; 0x40
     aa4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     aa8:	2243      	movs	r2, #67	; 0x43
     aaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     aae:	4a04      	ldr	r2, [pc, #16]	; (ac0 <Fvx_I2C_CLOCK_init+0x20>)
     ab0:	6a13      	ldr	r3, [r2, #32]
     ab2:	f043 0302 	orr.w	r3, r3, #2
     ab6:	6213      	str	r3, [r2, #32]
     ab8:	4770      	bx	lr
     aba:	bf00      	nop
     abc:	40001c00 	.word	0x40001c00
     ac0:	40000800 	.word	0x40000800

00000ac4 <Fvx_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void Fvx_I2C_init(void)
{
     ac4:	b508      	push	{r3, lr}
	Fvx_I2C_CLOCK_init();
     ac6:	4b04      	ldr	r3, [pc, #16]	; (ad8 <Fvx_I2C_init+0x14>)
     ac8:	4798      	blx	r3
	i2c_m_sync_init(&Fvx_I2C, SERCOM5);
     aca:	4904      	ldr	r1, [pc, #16]	; (adc <Fvx_I2C_init+0x18>)
     acc:	4804      	ldr	r0, [pc, #16]	; (ae0 <Fvx_I2C_init+0x1c>)
     ace:	4b05      	ldr	r3, [pc, #20]	; (ae4 <Fvx_I2C_init+0x20>)
     ad0:	4798      	blx	r3
	Fvx_I2C_PORT_init();
     ad2:	4b05      	ldr	r3, [pc, #20]	; (ae8 <Fvx_I2C_init+0x24>)
     ad4:	4798      	blx	r3
     ad6:	bd08      	pop	{r3, pc}
     ad8:	00000aa1 	.word	0x00000aa1
     adc:	43000400 	.word	0x43000400
     ae0:	20000370 	.word	0x20000370
     ae4:	00001249 	.word	0x00001249
     ae8:	00000a41 	.word	0x00000a41

00000aec <SPI_AMMC_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aec:	4b2d      	ldr	r3, [pc, #180]	; (ba4 <SPI_AMMC_PORT_init+0xb8>)
     aee:	2210      	movs	r2, #16
     af0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     af4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     af8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     afc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     b00:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     b04:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b08:	f893 2144 	ldrb.w	r2, [r3, #324]	; 0x144
	tmp &= ~PORT_PINCFG_PMUXEN;
     b0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b10:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b14:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b18:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b1c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b20:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b24:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b28:	2220      	movs	r2, #32
     b2a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b2e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b32:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     b36:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     b3a:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b3e:	f893 2145 	ldrb.w	r2, [r3, #325]	; 0x145
	tmp &= ~PORT_PINCFG_PMUXEN;
     b42:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b46:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b4a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b4e:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b52:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b56:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b5a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b5e:	2280      	movs	r2, #128	; 0x80
     b60:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b64:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     b68:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     b6c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     b70:	4a0d      	ldr	r2, [pc, #52]	; (ba8 <SPI_AMMC_PORT_init+0xbc>)
     b72:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b76:	f893 2147 	ldrb.w	r2, [r3, #327]	; 0x147
     b7a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b7e:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b82:	f893 2147 	ldrb.w	r2, [r3, #327]	; 0x147
	tmp &= ~PORT_PINCFG_PMUXEN;
     b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b8a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b8e:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b92:	f893 2133 	ldrb.w	r2, [r3, #307]	; 0x133
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b96:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b9a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b9e:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
     ba2:	4770      	bx	lr
     ba4:	41008000 	.word	0x41008000
     ba8:	c0020000 	.word	0xc0020000

00000bac <SPI_AMMC_CLOCK_init>:
     bac:	4b06      	ldr	r3, [pc, #24]	; (bc8 <SPI_AMMC_CLOCK_init+0x1c>)
     bae:	2240      	movs	r2, #64	; 0x40
     bb0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     bb4:	2243      	movs	r2, #67	; 0x43
     bb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     bba:	4a04      	ldr	r2, [pc, #16]	; (bcc <SPI_AMMC_CLOCK_init+0x20>)
     bbc:	6a13      	ldr	r3, [r2, #32]
     bbe:	f043 0304 	orr.w	r3, r3, #4
     bc2:	6213      	str	r3, [r2, #32]
     bc4:	4770      	bx	lr
     bc6:	bf00      	nop
     bc8:	40001c00 	.word	0x40001c00
     bcc:	40000800 	.word	0x40000800

00000bd0 <SPI_AMMC_init>:

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
}

void SPI_AMMC_init(void)
{
     bd0:	b508      	push	{r3, lr}
	SPI_AMMC_CLOCK_init();
     bd2:	4b04      	ldr	r3, [pc, #16]	; (be4 <SPI_AMMC_init+0x14>)
     bd4:	4798      	blx	r3
	spi_m_sync_init(&SPI_AMMC, SERCOM6);
     bd6:	4904      	ldr	r1, [pc, #16]	; (be8 <SPI_AMMC_init+0x18>)
     bd8:	4804      	ldr	r0, [pc, #16]	; (bec <SPI_AMMC_init+0x1c>)
     bda:	4b05      	ldr	r3, [pc, #20]	; (bf0 <SPI_AMMC_init+0x20>)
     bdc:	4798      	blx	r3
	SPI_AMMC_PORT_init();
     bde:	4b05      	ldr	r3, [pc, #20]	; (bf4 <SPI_AMMC_init+0x24>)
     be0:	4798      	blx	r3
     be2:	bd08      	pop	{r3, pc}
     be4:	00000bad 	.word	0x00000bad
     be8:	43000800 	.word	0x43000800
     bec:	200003a8 	.word	0x200003a8
     bf0:	00001289 	.word	0x00001289
     bf4:	00000aed 	.word	0x00000aed

00000bf8 <FANs_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     bf8:	4b16      	ldr	r3, [pc, #88]	; (c54 <FANs_I2C_PORT_init+0x5c>)
     bfa:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
     bfe:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c02:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c06:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
	tmp &= ~PORT_PINCFG_PMUXEN;
     c0a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c0e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c12:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c16:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c1a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c1e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c22:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c26:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
     c2a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c2e:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c32:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
	tmp &= ~PORT_PINCFG_PMUXEN;
     c36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c3e:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c42:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c46:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c4a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c4e:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
     c52:	4770      	bx	lr
     c54:	41008000 	.word	0x41008000

00000c58 <FANs_I2C_CLOCK_init>:
     c58:	4b06      	ldr	r3, [pc, #24]	; (c74 <FANs_I2C_CLOCK_init+0x1c>)
     c5a:	2240      	movs	r2, #64	; 0x40
     c5c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     c60:	2243      	movs	r2, #67	; 0x43
     c62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     c66:	4a04      	ldr	r2, [pc, #16]	; (c78 <FANs_I2C_CLOCK_init+0x20>)
     c68:	6a13      	ldr	r3, [r2, #32]
     c6a:	f043 0308 	orr.w	r3, r3, #8
     c6e:	6213      	str	r3, [r2, #32]
     c70:	4770      	bx	lr
     c72:	bf00      	nop
     c74:	40001c00 	.word	0x40001c00
     c78:	40000800 	.word	0x40000800

00000c7c <FANs_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void FANs_I2C_init(void)
{
     c7c:	b508      	push	{r3, lr}
	FANs_I2C_CLOCK_init();
     c7e:	4b04      	ldr	r3, [pc, #16]	; (c90 <FANs_I2C_init+0x14>)
     c80:	4798      	blx	r3
	i2c_m_sync_init(&FANs_I2C, SERCOM7);
     c82:	4904      	ldr	r1, [pc, #16]	; (c94 <FANs_I2C_init+0x18>)
     c84:	4804      	ldr	r0, [pc, #16]	; (c98 <FANs_I2C_init+0x1c>)
     c86:	4b05      	ldr	r3, [pc, #20]	; (c9c <FANs_I2C_init+0x20>)
     c88:	4798      	blx	r3
	FANs_I2C_PORT_init();
     c8a:	4b05      	ldr	r3, [pc, #20]	; (ca0 <FANs_I2C_init+0x24>)
     c8c:	4798      	blx	r3
     c8e:	bd08      	pop	{r3, pc}
     c90:	00000c59 	.word	0x00000c59
     c94:	43000c00 	.word	0x43000c00
     c98:	200003c0 	.word	0x200003c0
     c9c:	00001249 	.word	0x00001249
     ca0:	00000bf9 	.word	0x00000bf9

00000ca4 <MaintUSB_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ca4:	4b1e      	ldr	r3, [pc, #120]	; (d20 <MaintUSB_PORT_init+0x7c>)
     ca6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     caa:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     cb0:	6299      	str	r1, [r3, #40]	; 0x28
     cb2:	481c      	ldr	r0, [pc, #112]	; (d24 <MaintUSB_PORT_init+0x80>)
     cb4:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cb6:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     cb8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     cbc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     cc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cc4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     cc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ccc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     cd4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     cd8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     cdc:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ce4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     ce8:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cea:	6299      	str	r1, [r3, #40]	; 0x28
     cec:	490e      	ldr	r1, [pc, #56]	; (d28 <MaintUSB_PORT_init+0x84>)
     cee:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cf0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     cf2:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     cf6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     cfa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cfe:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     d02:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d06:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d0a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d0e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d12:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     d16:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     d1e:	4770      	bx	lr
     d20:	41008000 	.word	0x41008000
     d24:	c0000100 	.word	0xc0000100
     d28:	c0000200 	.word	0xc0000200

00000d2c <MaintUSB_CLOCK_init>:
     d2c:	2241      	movs	r2, #65	; 0x41
     d2e:	4b07      	ldr	r3, [pc, #28]	; (d4c <MaintUSB_CLOCK_init+0x20>)
     d30:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     d34:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     d38:	691a      	ldr	r2, [r3, #16]
     d3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     d3e:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     d40:	699a      	ldr	r2, [r3, #24]
     d42:	f042 0201 	orr.w	r2, r2, #1
     d46:	619a      	str	r2, [r3, #24]
     d48:	4770      	bx	lr
     d4a:	bf00      	nop
     d4c:	40001c00 	.word	0x40001c00

00000d50 <MaintUSB_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void MaintUSB_init(void)
{
     d50:	b508      	push	{r3, lr}
	MaintUSB_CLOCK_init();
     d52:	4b03      	ldr	r3, [pc, #12]	; (d60 <MaintUSB_init+0x10>)
     d54:	4798      	blx	r3
	usb_d_init();
     d56:	4b03      	ldr	r3, [pc, #12]	; (d64 <MaintUSB_init+0x14>)
     d58:	4798      	blx	r3
	MaintUSB_PORT_init();
     d5a:	4b03      	ldr	r3, [pc, #12]	; (d68 <MaintUSB_init+0x18>)
     d5c:	4798      	blx	r3
     d5e:	bd08      	pop	{r3, pc}
     d60:	00000d2d 	.word	0x00000d2d
     d64:	000015e5 	.word	0x000015e5
     d68:	00000ca5 	.word	0x00000ca5

00000d6c <CCu_CAN_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d6c:	4b10      	ldr	r3, [pc, #64]	; (db0 <CCu_CAN_PORT_init+0x44>)
     d6e:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     d72:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d76:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7a:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d7e:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d82:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     d86:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d8a:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d8e:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     d92:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d96:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d9a:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d9e:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     da2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     da6:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     daa:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
     dae:	4770      	bx	lr
     db0:	41008000 	.word	0x41008000

00000db4 <CCu_CAN_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CCu_CAN_init(void)
{
     db4:	b508      	push	{r3, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     db6:	4a08      	ldr	r2, [pc, #32]	; (dd8 <CCu_CAN_init+0x24>)
     db8:	6913      	ldr	r3, [r2, #16]
     dba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
     dbe:	6113      	str	r3, [r2, #16]
     dc0:	2240      	movs	r2, #64	; 0x40
     dc2:	4b06      	ldr	r3, [pc, #24]	; (ddc <CCu_CAN_init+0x28>)
     dc4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CCu_CAN, CAN1);
     dc8:	4905      	ldr	r1, [pc, #20]	; (de0 <CCu_CAN_init+0x2c>)
     dca:	4806      	ldr	r0, [pc, #24]	; (de4 <CCu_CAN_init+0x30>)
     dcc:	4b06      	ldr	r3, [pc, #24]	; (de8 <CCu_CAN_init+0x34>)
     dce:	4798      	blx	r3
	CCu_CAN_PORT_init();
     dd0:	4b06      	ldr	r3, [pc, #24]	; (dec <CCu_CAN_init+0x38>)
     dd2:	4798      	blx	r3
     dd4:	bd08      	pop	{r3, pc}
     dd6:	bf00      	nop
     dd8:	40000800 	.word	0x40000800
     ddc:	40001c00 	.word	0x40001c00
     de0:	42000400 	.word	0x42000400
     de4:	20000348 	.word	0x20000348
     de8:	0000111d 	.word	0x0000111d
     dec:	00000d6d 	.word	0x00000d6d

00000df0 <system_init>:
}

void system_init(void)
{
     df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     df2:	4ba4      	ldr	r3, [pc, #656]	; (1084 <system_init+0x294>)
     df4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     df6:	4ba4      	ldr	r3, [pc, #656]	; (1088 <system_init+0x298>)
     df8:	2401      	movs	r4, #1
     dfa:	605c      	str	r4, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dfc:	4aa3      	ldr	r2, [pc, #652]	; (108c <system_init+0x29c>)
     dfe:	629a      	str	r2, [r3, #40]	; 0x28
     e00:	4aa3      	ldr	r2, [pc, #652]	; (1090 <system_init+0x2a0>)
     e02:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e04:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
     e08:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e10:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
     e14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e1c:	2002      	movs	r0, #2
     e1e:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e20:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e22:	4f9c      	ldr	r7, [pc, #624]	; (1094 <system_init+0x2a4>)
     e24:	629f      	str	r7, [r3, #40]	; 0x28
     e26:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     e2a:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e2c:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
	tmp &= ~PORT_PINCFG_PMUXEN;
     e30:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e34:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e38:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
     e3c:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e3e:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e40:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     e44:	6299      	str	r1, [r3, #40]	; 0x28
     e46:	4d94      	ldr	r5, [pc, #592]	; (1098 <system_init+0x2a8>)
     e48:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e4a:	f893 505b 	ldrb.w	r5, [r3, #91]	; 0x5b
	tmp &= ~PORT_PINCFG_PMUXEN;
     e4e:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e52:	f883 505b 	strb.w	r5, [r3, #91]	; 0x5b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e56:	2580      	movs	r5, #128	; 0x80
     e58:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e5c:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e60:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
     e64:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     e68:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e6c:	f893 50c7 	ldrb.w	r5, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     e70:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e74:	f883 50c7 	strb.w	r5, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e78:	f44f 3580 	mov.w	r5, #65536	; 0x10000
     e7c:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e80:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e84:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     e88:	4d84      	ldr	r5, [pc, #528]	; (109c <system_init+0x2ac>)
     e8a:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e8e:	f893 50d0 	ldrb.w	r5, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     e92:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e96:	f883 50d0 	strb.w	r5, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e9a:	f44f 3500 	mov.w	r5, #131072	; 0x20000
     e9e:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ea2:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ea6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     eaa:	4d7d      	ldr	r5, [pc, #500]	; (10a0 <system_init+0x2b0>)
     eac:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eb0:	f893 50d1 	ldrb.w	r5, [r3, #209]	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
     eb4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     eb8:	f883 50d1 	strb.w	r5, [r3, #209]	; 0xd1
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     ebc:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
     ec0:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ec4:	4d77      	ldr	r5, [pc, #476]	; (10a4 <system_init+0x2b4>)
     ec6:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     eca:	4e77      	ldr	r6, [pc, #476]	; (10a8 <system_init+0x2b8>)
     ecc:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ed0:	f893 60d6 	ldrb.w	r6, [r3, #214]	; 0xd6
     ed4:	f006 06fb 	and.w	r6, r6, #251	; 0xfb
     ed8:	f883 60d6 	strb.w	r6, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     edc:	f893 60d6 	ldrb.w	r6, [r3, #214]	; 0xd6
	tmp &= ~PORT_PINCFG_PMUXEN;
     ee0:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ee4:	f883 60d6 	strb.w	r6, [r3, #214]	; 0xd6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ee8:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
     eec:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ef0:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ef4:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     ef8:	4e6c      	ldr	r6, [pc, #432]	; (10ac <system_init+0x2bc>)
     efa:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     efe:	f893 60d7 	ldrb.w	r6, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
     f02:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f06:	f883 60d7 	strb.w	r6, [r3, #215]	; 0xd7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f0a:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
     f0e:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f12:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f16:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     f1a:	4e65      	ldr	r6, [pc, #404]	; (10b0 <system_init+0x2c0>)
     f1c:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f20:	f893 60dd 	ldrb.w	r6, [r3, #221]	; 0xdd
	tmp &= ~PORT_PINCFG_PMUXEN;
     f24:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f28:	f883 60dd 	strb.w	r6, [r3, #221]	; 0xdd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f2c:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f30:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f34:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
     f38:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f3c:	f893 0141 	ldrb.w	r0, [r3, #321]	; 0x141
	tmp &= ~PORT_PINCFG_PMUXEN;
     f40:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f44:	f883 0141 	strb.w	r0, [r3, #321]	; 0x141
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f48:	2004      	movs	r0, #4
     f4a:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f4e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f52:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     f56:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     f5a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f5e:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     f62:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f66:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f6a:	2040      	movs	r0, #64	; 0x40
     f6c:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f70:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f74:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     f78:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     f7c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f80:	f893 0146 	ldrb.w	r0, [r3, #326]	; 0x146
	tmp &= ~PORT_PINCFG_PMUXEN;
     f84:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f88:	f883 0146 	strb.w	r0, [r3, #326]	; 0x146
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
     f90:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f94:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f98:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     f9c:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     fa0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fa4:	f893 014d 	ldrb.w	r0, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     fa8:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fac:	f883 014d 	strb.w	r0, [r3, #333]	; 0x14d
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     fb0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
     fb4:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fb8:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fbc:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
     fc0:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     fc4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fc8:	f893 014e 	ldrb.w	r0, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     fcc:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fd0:	f883 014e 	strb.w	r0, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     fd4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     fd8:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fdc:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
     fe0:	4834      	ldr	r0, [pc, #208]	; (10b4 <system_init+0x2c4>)
     fe2:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     fe6:	f893 0153 	ldrb.w	r0, [r3, #339]	; 0x153
     fea:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     fee:	f883 0153 	strb.w	r0, [r3, #339]	; 0x153
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ff2:	f893 0153 	ldrb.w	r0, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     ff6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ffa:	f883 0153 	strb.w	r0, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ffe:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1002:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1006:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    100a:	492b      	ldr	r1, [pc, #172]	; (10b8 <system_init+0x2c8>)
    100c:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1010:	f893 115e 	ldrb.w	r1, [r3, #350]	; 0x15e
	tmp &= ~PORT_PINCFG_PMUXEN;
    1014:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1018:	f883 115e 	strb.w	r1, [r3, #350]	; 0x15e
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    101c:	f8c3 4194 	str.w	r4, [r3, #404]	; 0x194
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1020:	f8c3 4188 	str.w	r4, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1024:	4925      	ldr	r1, [pc, #148]	; (10bc <system_init+0x2cc>)
    1026:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
    102a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    102e:	f893 11c0 	ldrb.w	r1, [r3, #448]	; 0x1c0
	tmp &= ~PORT_PINCFG_PMUXEN;
    1032:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1036:	f883 11c0 	strb.w	r1, [r3, #448]	; 0x1c0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    103a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    103e:	f8c3 1194 	str.w	r1, [r3, #404]	; 0x194
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1042:	f8c3 1188 	str.w	r1, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1046:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    104a:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
    104e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1052:	f893 21cb 	ldrb.w	r2, [r3, #459]	; 0x1cb
	tmp &= ~PORT_PINCFG_PMUXEN;
    1056:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    105a:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb
	// Set pin direction to output
	gpio_set_pin_direction(niAlcSPIFramCs, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(niAlcSPIFramCs, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
    105e:	4b18      	ldr	r3, [pc, #96]	; (10c0 <system_init+0x2d0>)
    1060:	4798      	blx	r3

	Flash_Mem_SPI_init();
    1062:	4b18      	ldr	r3, [pc, #96]	; (10c4 <system_init+0x2d4>)
    1064:	4798      	blx	r3

	Shared_I2C_init();
    1066:	4b18      	ldr	r3, [pc, #96]	; (10c8 <system_init+0x2d8>)
    1068:	4798      	blx	r3

	SPI_Temp_init();
    106a:	4b18      	ldr	r3, [pc, #96]	; (10cc <system_init+0x2dc>)
    106c:	4798      	blx	r3

	Fvx_I2C_init();
    106e:	4b18      	ldr	r3, [pc, #96]	; (10d0 <system_init+0x2e0>)
    1070:	4798      	blx	r3

	SPI_AMMC_init();
    1072:	4b18      	ldr	r3, [pc, #96]	; (10d4 <system_init+0x2e4>)
    1074:	4798      	blx	r3

	FANs_I2C_init();
    1076:	4b18      	ldr	r3, [pc, #96]	; (10d8 <system_init+0x2e8>)
    1078:	4798      	blx	r3

	MaintUSB_init();
    107a:	4b18      	ldr	r3, [pc, #96]	; (10dc <system_init+0x2ec>)
    107c:	4798      	blx	r3
	CCu_CAN_init();
    107e:	4b18      	ldr	r3, [pc, #96]	; (10e0 <system_init+0x2f0>)
    1080:	4798      	blx	r3
    1082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1084:	000017dd 	.word	0x000017dd
    1088:	41008000 	.word	0x41008000
    108c:	40020001 	.word	0x40020001
    1090:	c0020000 	.word	0xc0020000
    1094:	40000002 	.word	0x40000002
    1098:	c0000800 	.word	0xc0000800
    109c:	c0000001 	.word	0xc0000001
    10a0:	c0000002 	.word	0xc0000002
    10a4:	40020000 	.word	0x40020000
    10a8:	c0020040 	.word	0xc0020040
    10ac:	c0000080 	.word	0xc0000080
    10b0:	c0002000 	.word	0xc0002000
    10b4:	c0020008 	.word	0xc0020008
    10b8:	c0004000 	.word	0xc0004000
    10bc:	40000001 	.word	0x40000001
    10c0:	00000379 	.word	0x00000379
    10c4:	00000859 	.word	0x00000859
    10c8:	00000905 	.word	0x00000905
    10cc:	00000a19 	.word	0x00000a19
    10d0:	00000ac5 	.word	0x00000ac5
    10d4:	00000bd1 	.word	0x00000bd1
    10d8:	00000c7d 	.word	0x00000c7d
    10dc:	00000d51 	.word	0x00000d51
    10e0:	00000db5 	.word	0x00000db5

000010e4 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    10e4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    10e8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    10ea:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    10ec:	f3bf 8f5f 	dmb	sy
    10f0:	4770      	bx	lr

000010f2 <atomic_leave_critical>:
    10f2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    10f6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    10f8:	f383 8810 	msr	PRIMASK, r3
    10fc:	4770      	bx	lr

000010fe <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    10fe:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
    1100:	69c3      	ldr	r3, [r0, #28]
    1102:	b103      	cbz	r3, 1106 <can_tx_done+0x8>
		descr->cb.tx_done(descr);
    1104:	4798      	blx	r3
    1106:	bd08      	pop	{r3, pc}

00001108 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    1108:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
    110a:	6a03      	ldr	r3, [r0, #32]
    110c:	b103      	cbz	r3, 1110 <can_rx_done+0x8>
		descr->cb.rx_done(descr);
    110e:	4798      	blx	r3
    1110:	bd08      	pop	{r3, pc}

00001112 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1112:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
    1114:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1116:	b103      	cbz	r3, 111a <can_irq_handler+0x8>
		descr->cb.irq_handler(descr, type);
    1118:	4798      	blx	r3
    111a:	bd08      	pop	{r3, pc}

0000111c <can_async_init>:
{
    111c:	b538      	push	{r3, r4, r5, lr}
    111e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1120:	4604      	mov	r4, r0
    1122:	b1a0      	cbz	r0, 114e <can_async_init+0x32>
    1124:	1c08      	adds	r0, r1, #0
    1126:	bf18      	it	ne
    1128:	2001      	movne	r0, #1
    112a:	2241      	movs	r2, #65	; 0x41
    112c:	4909      	ldr	r1, [pc, #36]	; (1154 <can_async_init+0x38>)
    112e:	4b0a      	ldr	r3, [pc, #40]	; (1158 <can_async_init+0x3c>)
    1130:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
    1132:	4629      	mov	r1, r5
    1134:	4620      	mov	r0, r4
    1136:	4b09      	ldr	r3, [pc, #36]	; (115c <can_async_init+0x40>)
    1138:	4798      	blx	r3
	if (rc) {
    113a:	4603      	mov	r3, r0
    113c:	b928      	cbnz	r0, 114a <can_async_init+0x2e>
	descr->dev.cb.tx_done     = can_tx_done;
    113e:	4a08      	ldr	r2, [pc, #32]	; (1160 <can_async_init+0x44>)
    1140:	6062      	str	r2, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1142:	4a08      	ldr	r2, [pc, #32]	; (1164 <can_async_init+0x48>)
    1144:	60a2      	str	r2, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1146:	4a08      	ldr	r2, [pc, #32]	; (1168 <can_async_init+0x4c>)
    1148:	60e2      	str	r2, [r4, #12]
}
    114a:	4618      	mov	r0, r3
    114c:	bd38      	pop	{r3, r4, r5, pc}
    114e:	2000      	movs	r0, #0
    1150:	e7eb      	b.n	112a <can_async_init+0xe>
    1152:	bf00      	nop
    1154:	000034a0 	.word	0x000034a0
    1158:	0000164d 	.word	0x0000164d
    115c:	00001655 	.word	0x00001655
    1160:	000010ff 	.word	0x000010ff
    1164:	00001109 	.word	0x00001109
    1168:	00001113 	.word	0x00001113

0000116c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    116c:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    116e:	4b12      	ldr	r3, [pc, #72]	; (11b8 <process_ext_irq+0x4c>)
    1170:	6c59      	ldr	r1, [r3, #68]	; 0x44
    1172:	4288      	cmp	r0, r1
    1174:	d01d      	beq.n	11b2 <process_ext_irq+0x46>
    1176:	2208      	movs	r2, #8
    1178:	2510      	movs	r5, #16
    117a:	2400      	movs	r4, #0
    117c:	461e      	mov	r6, r3
				ext_irqs[middle].cb();
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
    117e:	4288      	cmp	r0, r1
			lower = middle + 1;
    1180:	bf87      	ittee	hi
    1182:	3201      	addhi	r2, #1
    1184:	b2d4      	uxtbhi	r4, r2
		} else {
			upper = middle - 1;
    1186:	f102 32ff 	addls.w	r2, r2, #4294967295
    118a:	b2d5      	uxtbls	r5, r2
	while (upper >= lower) {
    118c:	42a5      	cmp	r5, r4
    118e:	d312      	bcc.n	11b6 <process_ext_irq+0x4a>
		middle = (upper + lower) >> 1;
    1190:	192b      	adds	r3, r5, r4
    1192:	105b      	asrs	r3, r3, #1
    1194:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
    1196:	2a0f      	cmp	r2, #15
    1198:	d80d      	bhi.n	11b6 <process_ext_irq+0x4a>
    119a:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
    119c:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
    11a0:	6849      	ldr	r1, [r1, #4]
    11a2:	4281      	cmp	r1, r0
    11a4:	d1eb      	bne.n	117e <process_ext_irq+0x12>
			if (ext_irqs[middle].cb) {
    11a6:	4a04      	ldr	r2, [pc, #16]	; (11b8 <process_ext_irq+0x4c>)
    11a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    11ac:	b11b      	cbz	r3, 11b6 <process_ext_irq+0x4a>
				ext_irqs[middle].cb();
    11ae:	4798      	blx	r3
    11b0:	bd70      	pop	{r4, r5, r6, pc}
		if (ext_irqs[middle].pin == pin) {
    11b2:	2308      	movs	r3, #8
    11b4:	e7f7      	b.n	11a6 <process_ext_irq+0x3a>
    11b6:	bd70      	pop	{r4, r5, r6, pc}
    11b8:	20000030 	.word	0x20000030

000011bc <ext_irq_init>:
{
    11bc:	b508      	push	{r3, lr}
    11be:	4b07      	ldr	r3, [pc, #28]	; (11dc <ext_irq_init+0x20>)
    11c0:	f103 0080 	add.w	r0, r3, #128	; 0x80
		ext_irqs[i].pin = 0xFFFFFFFF;
    11c4:	f04f 31ff 	mov.w	r1, #4294967295
		ext_irqs[i].cb  = NULL;
    11c8:	2200      	movs	r2, #0
		ext_irqs[i].pin = 0xFFFFFFFF;
    11ca:	6059      	str	r1, [r3, #4]
		ext_irqs[i].cb  = NULL;
    11cc:	f843 2b08 	str.w	r2, [r3], #8
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    11d0:	4283      	cmp	r3, r0
    11d2:	d1fa      	bne.n	11ca <ext_irq_init+0xe>
	return _ext_irq_init(process_ext_irq);
    11d4:	4802      	ldr	r0, [pc, #8]	; (11e0 <ext_irq_init+0x24>)
    11d6:	4b03      	ldr	r3, [pc, #12]	; (11e4 <ext_irq_init+0x28>)
    11d8:	4798      	blx	r3
}
    11da:	bd08      	pop	{r3, pc}
    11dc:	20000030 	.word	0x20000030
    11e0:	0000116d 	.word	0x0000116d
    11e4:	000018fd 	.word	0x000018fd

000011e8 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    11e8:	b510      	push	{r4, lr}
    11ea:	b084      	sub	sp, #16
    11ec:	4614      	mov	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    11ee:	8903      	ldrh	r3, [r0, #8]
    11f0:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    11f4:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    11f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    11fa:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    11fe:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1200:	a901      	add	r1, sp, #4
    1202:	3814      	subs	r0, #20
    1204:	4b03      	ldr	r3, [pc, #12]	; (1214 <i2c_m_sync_write+0x2c>)
    1206:	4798      	blx	r3
	if (ret) {
		return ret;
	}

	return n;
}
    1208:	2800      	cmp	r0, #0
    120a:	bf08      	it	eq
    120c:	4620      	moveq	r0, r4
    120e:	b004      	add	sp, #16
    1210:	bd10      	pop	{r4, pc}
    1212:	bf00      	nop
    1214:	00001f39 	.word	0x00001f39

00001218 <i2c_m_sync_read>:
{
    1218:	b510      	push	{r4, lr}
    121a:	b084      	sub	sp, #16
    121c:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    121e:	8903      	ldrh	r3, [r0, #8]
    1220:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1224:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1226:	f248 0301 	movw	r3, #32769	; 0x8001
    122a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    122e:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1230:	a901      	add	r1, sp, #4
    1232:	3814      	subs	r0, #20
    1234:	4b03      	ldr	r3, [pc, #12]	; (1244 <i2c_m_sync_read+0x2c>)
    1236:	4798      	blx	r3
}
    1238:	2800      	cmp	r0, #0
    123a:	bf08      	it	eq
    123c:	4620      	moveq	r0, r4
    123e:	b004      	add	sp, #16
    1240:	bd10      	pop	{r4, pc}
    1242:	bf00      	nop
    1244:	00001f39 	.word	0x00001f39

00001248 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    1248:	b538      	push	{r3, r4, r5, lr}
    124a:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    124c:	4604      	mov	r4, r0
    124e:	225e      	movs	r2, #94	; 0x5e
    1250:	4908      	ldr	r1, [pc, #32]	; (1274 <i2c_m_sync_init+0x2c>)
    1252:	3000      	adds	r0, #0
    1254:	bf18      	it	ne
    1256:	2001      	movne	r0, #1
    1258:	4b07      	ldr	r3, [pc, #28]	; (1278 <i2c_m_sync_init+0x30>)
    125a:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    125c:	4629      	mov	r1, r5
    125e:	4620      	mov	r0, r4
    1260:	4b06      	ldr	r3, [pc, #24]	; (127c <i2c_m_sync_init+0x34>)
    1262:	4798      	blx	r3
	if (init_status) {
    1264:	4603      	mov	r3, r0
    1266:	b918      	cbnz	r0, 1270 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    1268:	4a05      	ldr	r2, [pc, #20]	; (1280 <i2c_m_sync_init+0x38>)
    126a:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
    126c:	4a05      	ldr	r2, [pc, #20]	; (1284 <i2c_m_sync_init+0x3c>)
    126e:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
    1270:	4618      	mov	r0, r3
    1272:	bd38      	pop	{r3, r4, r5, pc}
    1274:	000034bc 	.word	0x000034bc
    1278:	0000164d 	.word	0x0000164d
    127c:	00001f09 	.word	0x00001f09
    1280:	00001219 	.word	0x00001219
    1284:	000011e9 	.word	0x000011e9

00001288 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1288:	b538      	push	{r3, r4, r5, lr}
    128a:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    128c:	4604      	mov	r4, r0
    128e:	b1b8      	cbz	r0, 12c0 <spi_m_sync_init+0x38>
    1290:	1c08      	adds	r0, r1, #0
    1292:	bf18      	it	ne
    1294:	2001      	movne	r0, #1
    1296:	2240      	movs	r2, #64	; 0x40
    1298:	490a      	ldr	r1, [pc, #40]	; (12c4 <spi_m_sync_init+0x3c>)
    129a:	4b0b      	ldr	r3, [pc, #44]	; (12c8 <spi_m_sync_init+0x40>)
    129c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    129e:	4620      	mov	r0, r4
    12a0:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
    12a4:	4629      	mov	r1, r5
    12a6:	4b09      	ldr	r3, [pc, #36]	; (12cc <spi_m_sync_init+0x44>)
    12a8:	4798      	blx	r3

	if (rc < 0) {
    12aa:	2800      	cmp	r0, #0
    12ac:	db07      	blt.n	12be <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    12ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    12b2:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    12b4:	4b06      	ldr	r3, [pc, #24]	; (12d0 <spi_m_sync_init+0x48>)
    12b6:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    12b8:	4b06      	ldr	r3, [pc, #24]	; (12d4 <spi_m_sync_init+0x4c>)
    12ba:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    12bc:	2000      	movs	r0, #0
}
    12be:	bd38      	pop	{r3, r4, r5, pc}
    12c0:	2000      	movs	r0, #0
    12c2:	e7e8      	b.n	1296 <spi_m_sync_init+0xe>
    12c4:	000034d8 	.word	0x000034d8
    12c8:	0000164d 	.word	0x0000164d
    12cc:	00002455 	.word	0x00002455
    12d0:	00001355 	.word	0x00001355
    12d4:	00001319 	.word	0x00001319

000012d8 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    12d8:	b530      	push	{r4, r5, lr}
    12da:	b085      	sub	sp, #20
    12dc:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    12de:	4605      	mov	r5, r0
    12e0:	b190      	cbz	r0, 1308 <spi_m_sync_transfer+0x30>
    12e2:	1c08      	adds	r0, r1, #0
    12e4:	bf18      	it	ne
    12e6:	2001      	movne	r0, #1
    12e8:	22b3      	movs	r2, #179	; 0xb3
    12ea:	4908      	ldr	r1, [pc, #32]	; (130c <spi_m_sync_transfer+0x34>)
    12ec:	4b08      	ldr	r3, [pc, #32]	; (1310 <spi_m_sync_transfer+0x38>)
    12ee:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    12f0:	6823      	ldr	r3, [r4, #0]
    12f2:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    12f4:	6863      	ldr	r3, [r4, #4]
    12f6:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    12f8:	68a3      	ldr	r3, [r4, #8]
    12fa:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
    12fc:	a901      	add	r1, sp, #4
    12fe:	1d28      	adds	r0, r5, #4
    1300:	4b04      	ldr	r3, [pc, #16]	; (1314 <spi_m_sync_transfer+0x3c>)
    1302:	4798      	blx	r3
}
    1304:	b005      	add	sp, #20
    1306:	bd30      	pop	{r4, r5, pc}
    1308:	2000      	movs	r0, #0
    130a:	e7ed      	b.n	12e8 <spi_m_sync_transfer+0x10>
    130c:	000034d8 	.word	0x000034d8
    1310:	0000164d 	.word	0x0000164d
    1314:	000025ed 	.word	0x000025ed

00001318 <_spi_m_sync_io_write>:
{
    1318:	b570      	push	{r4, r5, r6, lr}
    131a:	b084      	sub	sp, #16
    131c:	460e      	mov	r6, r1
    131e:	4615      	mov	r5, r2
	ASSERT(io);
    1320:	4604      	mov	r4, r0
    1322:	22a3      	movs	r2, #163	; 0xa3
    1324:	4908      	ldr	r1, [pc, #32]	; (1348 <_spi_m_sync_io_write+0x30>)
    1326:	3000      	adds	r0, #0
    1328:	bf18      	it	ne
    132a:	2001      	movne	r0, #1
    132c:	4b07      	ldr	r3, [pc, #28]	; (134c <_spi_m_sync_io_write+0x34>)
    132e:	4798      	blx	r3
	xfer.rxbuf = 0;
    1330:	2300      	movs	r3, #0
    1332:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    1334:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    1336:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1338:	a901      	add	r1, sp, #4
    133a:	f1a4 000c 	sub.w	r0, r4, #12
    133e:	4b04      	ldr	r3, [pc, #16]	; (1350 <_spi_m_sync_io_write+0x38>)
    1340:	4798      	blx	r3
}
    1342:	b004      	add	sp, #16
    1344:	bd70      	pop	{r4, r5, r6, pc}
    1346:	bf00      	nop
    1348:	000034d8 	.word	0x000034d8
    134c:	0000164d 	.word	0x0000164d
    1350:	000012d9 	.word	0x000012d9

00001354 <_spi_m_sync_io_read>:
{
    1354:	b570      	push	{r4, r5, r6, lr}
    1356:	b084      	sub	sp, #16
    1358:	460e      	mov	r6, r1
    135a:	4615      	mov	r5, r2
	ASSERT(io);
    135c:	4604      	mov	r4, r0
    135e:	2287      	movs	r2, #135	; 0x87
    1360:	4908      	ldr	r1, [pc, #32]	; (1384 <_spi_m_sync_io_read+0x30>)
    1362:	3000      	adds	r0, #0
    1364:	bf18      	it	ne
    1366:	2001      	movne	r0, #1
    1368:	4b07      	ldr	r3, [pc, #28]	; (1388 <_spi_m_sync_io_read+0x34>)
    136a:	4798      	blx	r3
	xfer.rxbuf = buf;
    136c:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    136e:	2300      	movs	r3, #0
    1370:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    1372:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1374:	a901      	add	r1, sp, #4
    1376:	f1a4 000c 	sub.w	r0, r4, #12
    137a:	4b04      	ldr	r3, [pc, #16]	; (138c <_spi_m_sync_io_read+0x38>)
    137c:	4798      	blx	r3
}
    137e:	b004      	add	sp, #16
    1380:	bd70      	pop	{r4, r5, r6, pc}
    1382:	bf00      	nop
    1384:	000034d8 	.word	0x000034d8
    1388:	0000164d 	.word	0x0000164d
    138c:	000012d9 	.word	0x000012d9

00001390 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1390:	4b0f      	ldr	r3, [pc, #60]	; (13d0 <_usb_d_find_ep+0x40>)
    1392:	7859      	ldrb	r1, [r3, #1]
    1394:	4288      	cmp	r0, r1
    1396:	d018      	beq.n	13ca <_usb_d_find_ep+0x3a>
{
    1398:	b430      	push	{r4, r5}
    139a:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    139c:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    139e:	f000 050f 	and.w	r5, r0, #15
    13a2:	e007      	b.n	13b4 <_usb_d_find_ep+0x24>
    13a4:	3301      	adds	r3, #1
    13a6:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    13a8:	2b04      	cmp	r3, #4
    13aa:	d009      	beq.n	13c0 <_usb_d_find_ep+0x30>
    13ac:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    13ae:	7851      	ldrb	r1, [r2, #1]
    13b0:	4281      	cmp	r1, r0
    13b2:	d007      	beq.n	13c4 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    13b4:	7814      	ldrb	r4, [r2, #0]
    13b6:	2c00      	cmp	r4, #0
    13b8:	d1f4      	bne.n	13a4 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    13ba:	428d      	cmp	r5, r1
    13bc:	d1f2      	bne.n	13a4 <_usb_d_find_ep+0x14>
    13be:	e001      	b.n	13c4 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    13c0:	f04f 33ff 	mov.w	r3, #4294967295
}
    13c4:	4618      	mov	r0, r3
    13c6:	bc30      	pop	{r4, r5}
    13c8:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    13ca:	2300      	movs	r3, #0
}
    13cc:	4618      	mov	r0, r3
    13ce:	4770      	bx	lr
    13d0:	200000b0 	.word	0x200000b0

000013d4 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    13d4:	2000      	movs	r0, #0
    13d6:	4770      	bx	lr

000013d8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    13d8:	b538      	push	{r3, r4, r5, lr}
    13da:	4604      	mov	r4, r0
    13dc:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    13de:	4b09      	ldr	r3, [pc, #36]	; (1404 <usb_d_cb_trans_more+0x2c>)
    13e0:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    13e2:	4b09      	ldr	r3, [pc, #36]	; (1408 <usb_d_cb_trans_more+0x30>)
    13e4:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    13e8:	789b      	ldrb	r3, [r3, #2]
    13ea:	2b03      	cmp	r3, #3
    13ec:	d001      	beq.n	13f2 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    13ee:	2000      	movs	r0, #0
}
    13f0:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    13f2:	4b05      	ldr	r3, [pc, #20]	; (1408 <usb_d_cb_trans_more+0x30>)
    13f4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    13f8:	6983      	ldr	r3, [r0, #24]
    13fa:	4629      	mov	r1, r5
    13fc:	4620      	mov	r0, r4
    13fe:	4798      	blx	r3
    1400:	bd38      	pop	{r3, r4, r5, pc}
    1402:	bf00      	nop
    1404:	00001391 	.word	0x00001391
    1408:	200000b0 	.word	0x200000b0

0000140c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    140c:	b5f0      	push	{r4, r5, r6, r7, lr}
    140e:	b085      	sub	sp, #20
    1410:	4606      	mov	r6, r0
    1412:	460d      	mov	r5, r1
    1414:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1416:	4b4d      	ldr	r3, [pc, #308]	; (154c <_usb_d_cb_trans_done+0x140>)
    1418:	4798      	blx	r3
    141a:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    141c:	2d00      	cmp	r5, #0
    141e:	d15b      	bne.n	14d8 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1420:	4a4b      	ldr	r2, [pc, #300]	; (1550 <_usb_d_cb_trans_done+0x144>)
    1422:	0143      	lsls	r3, r0, #5
    1424:	18d1      	adds	r1, r2, r3
    1426:	2000      	movs	r0, #0
    1428:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    142a:	5cd3      	ldrb	r3, [r2, r3]
    142c:	b173      	cbz	r3, 144c <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    142e:	4b48      	ldr	r3, [pc, #288]	; (1550 <_usb_d_cb_trans_done+0x144>)
    1430:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1434:	2201      	movs	r2, #1
    1436:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    1438:	4845      	ldr	r0, [pc, #276]	; (1550 <_usb_d_cb_trans_done+0x144>)
    143a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    143e:	69c3      	ldr	r3, [r0, #28]
    1440:	463a      	mov	r2, r7
    1442:	78c1      	ldrb	r1, [r0, #3]
    1444:	4630      	mov	r0, r6
    1446:	4798      	blx	r3
}
    1448:	b005      	add	sp, #20
    144a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    144c:	788b      	ldrb	r3, [r1, #2]
    144e:	2b03      	cmp	r3, #3
    1450:	d00b      	beq.n	146a <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    1452:	483f      	ldr	r0, [pc, #252]	; (1550 <_usb_d_cb_trans_done+0x144>)
    1454:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    1458:	4614      	mov	r4, r2
    145a:	69d3      	ldr	r3, [r2, #28]
    145c:	320c      	adds	r2, #12
    145e:	2100      	movs	r1, #0
    1460:	7860      	ldrb	r0, [r4, #1]
    1462:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1464:	2302      	movs	r3, #2
    1466:	70a3      	strb	r3, [r4, #2]
    1468:	e7ee      	b.n	1448 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    146a:	460b      	mov	r3, r1
    146c:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    1470:	460a      	mov	r2, r1
    1472:	69ce      	ldr	r6, [r1, #28]
    1474:	320c      	adds	r2, #12
    1476:	2101      	movs	r1, #1
    1478:	7858      	ldrb	r0, [r3, #1]
    147a:	47b0      	blx	r6
		if (err) {
    147c:	b1a0      	cbz	r0, 14a8 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    147e:	4b34      	ldr	r3, [pc, #208]	; (1550 <_usb_d_cb_trans_done+0x144>)
    1480:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1484:	2205      	movs	r2, #5
    1486:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    1488:	2202      	movs	r2, #2
    148a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    148c:	2d00      	cmp	r5, #0
    148e:	db09      	blt.n	14a4 <_usb_d_cb_trans_done+0x98>
    1490:	482f      	ldr	r0, [pc, #188]	; (1550 <_usb_d_cb_trans_done+0x144>)
    1492:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1496:	7840      	ldrb	r0, [r0, #1]
    1498:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    149c:	2101      	movs	r1, #1
    149e:	4b2d      	ldr	r3, [pc, #180]	; (1554 <_usb_d_cb_trans_done+0x148>)
    14a0:	4798      	blx	r3
    14a2:	e7d1      	b.n	1448 <_usb_d_cb_trans_done+0x3c>
    14a4:	7858      	ldrb	r0, [r3, #1]
    14a6:	e7f9      	b.n	149c <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    14a8:	4829      	ldr	r0, [pc, #164]	; (1550 <_usb_d_cb_trans_done+0x144>)
    14aa:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    14ae:	2304      	movs	r3, #4
    14b0:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    14b2:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    14b4:	2200      	movs	r2, #0
    14b6:	9201      	str	r2, [sp, #4]
    14b8:	9202      	str	r2, [sp, #8]
    14ba:	4295      	cmp	r5, r2
    14bc:	bfac      	ite	ge
    14be:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    14c2:	f003 030f 	andlt.w	r3, r3, #15
    14c6:	f88d 300c 	strb.w	r3, [sp, #12]
    14ca:	2301      	movs	r3, #1
    14cc:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    14d0:	a801      	add	r0, sp, #4
    14d2:	4b21      	ldr	r3, [pc, #132]	; (1558 <_usb_d_cb_trans_done+0x14c>)
    14d4:	4798      	blx	r3
    14d6:	e7b7      	b.n	1448 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    14d8:	2d01      	cmp	r5, #1
    14da:	d00a      	beq.n	14f2 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    14dc:	2d02      	cmp	r5, #2
    14de:	d01c      	beq.n	151a <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    14e0:	2d03      	cmp	r5, #3
    14e2:	d02a      	beq.n	153a <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    14e4:	4b1a      	ldr	r3, [pc, #104]	; (1550 <_usb_d_cb_trans_done+0x144>)
    14e6:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    14ea:	2206      	movs	r2, #6
    14ec:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    14ee:	70da      	strb	r2, [r3, #3]
    14f0:	e7a2      	b.n	1438 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    14f2:	4a17      	ldr	r2, [pc, #92]	; (1550 <_usb_d_cb_trans_done+0x144>)
    14f4:	0143      	lsls	r3, r0, #5
    14f6:	18d1      	adds	r1, r2, r3
    14f8:	2002      	movs	r0, #2
    14fa:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    14fc:	5cd3      	ldrb	r3, [r2, r3]
    14fe:	b12b      	cbz	r3, 150c <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    1500:	4b13      	ldr	r3, [pc, #76]	; (1550 <_usb_d_cb_trans_done+0x144>)
    1502:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1506:	2205      	movs	r2, #5
    1508:	709a      	strb	r2, [r3, #2]
    150a:	e795      	b.n	1438 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    150c:	460b      	mov	r3, r1
    150e:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1510:	2100      	movs	r1, #0
    1512:	4630      	mov	r0, r6
    1514:	4b0f      	ldr	r3, [pc, #60]	; (1554 <_usb_d_cb_trans_done+0x148>)
    1516:	4798      	blx	r3
    1518:	e78e      	b.n	1438 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    151a:	4a0d      	ldr	r2, [pc, #52]	; (1550 <_usb_d_cb_trans_done+0x144>)
    151c:	0143      	lsls	r3, r0, #5
    151e:	18d1      	adds	r1, r2, r3
    1520:	2004      	movs	r0, #4
    1522:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1524:	5cd3      	ldrb	r3, [r2, r3]
    1526:	b12b      	cbz	r3, 1534 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1528:	4b09      	ldr	r3, [pc, #36]	; (1550 <_usb_d_cb_trans_done+0x144>)
    152a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    152e:	2201      	movs	r2, #1
    1530:	709a      	strb	r2, [r3, #2]
    1532:	e781      	b.n	1438 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1534:	2302      	movs	r3, #2
    1536:	708b      	strb	r3, [r1, #2]
			return;
    1538:	e786      	b.n	1448 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    153a:	4b05      	ldr	r3, [pc, #20]	; (1550 <_usb_d_cb_trans_done+0x144>)
    153c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1540:	2200      	movs	r2, #0
    1542:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    1544:	2205      	movs	r2, #5
    1546:	70da      	strb	r2, [r3, #3]
    1548:	e776      	b.n	1438 <_usb_d_cb_trans_done+0x2c>
    154a:	bf00      	nop
    154c:	00001391 	.word	0x00001391
    1550:	200000b0 	.word	0x200000b0
    1554:	0000303d 	.word	0x0000303d
    1558:	000031e5 	.word	0x000031e5

0000155c <usb_d_cb_trans_setup>:
{
    155c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1560:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1562:	4b1c      	ldr	r3, [pc, #112]	; (15d4 <usb_d_cb_trans_setup+0x78>)
    1564:	4798      	blx	r3
    1566:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    1568:	4c1b      	ldr	r4, [pc, #108]	; (15d8 <usb_d_cb_trans_setup+0x7c>)
    156a:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    156e:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    1570:	4621      	mov	r1, r4
    1572:	4628      	mov	r0, r5
    1574:	4b19      	ldr	r3, [pc, #100]	; (15dc <usb_d_cb_trans_setup+0x80>)
    1576:	4798      	blx	r3
	if (n != 8) {
    1578:	b2c0      	uxtb	r0, r0
    157a:	2808      	cmp	r0, #8
    157c:	d009      	beq.n	1592 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    157e:	2101      	movs	r1, #1
    1580:	4628      	mov	r0, r5
    1582:	4c17      	ldr	r4, [pc, #92]	; (15e0 <usb_d_cb_trans_setup+0x84>)
    1584:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1586:	2101      	movs	r1, #1
    1588:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    158c:	47a0      	blx	r4
		return;
    158e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1592:	2100      	movs	r1, #0
    1594:	4628      	mov	r0, r5
    1596:	4f12      	ldr	r7, [pc, #72]	; (15e0 <usb_d_cb_trans_setup+0x84>)
    1598:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    159a:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    159e:	2100      	movs	r1, #0
    15a0:	4640      	mov	r0, r8
    15a2:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    15a4:	4b0c      	ldr	r3, [pc, #48]	; (15d8 <usb_d_cb_trans_setup+0x7c>)
    15a6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    15aa:	2201      	movs	r2, #1
    15ac:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    15ae:	695b      	ldr	r3, [r3, #20]
    15b0:	4621      	mov	r1, r4
    15b2:	4628      	mov	r0, r5
    15b4:	4798      	blx	r3
    15b6:	b108      	cbz	r0, 15bc <usb_d_cb_trans_setup+0x60>
    15b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    15bc:	4b06      	ldr	r3, [pc, #24]	; (15d8 <usb_d_cb_trans_setup+0x7c>)
    15be:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    15c2:	2305      	movs	r3, #5
    15c4:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    15c6:	2101      	movs	r1, #1
    15c8:	4628      	mov	r0, r5
    15ca:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    15cc:	2101      	movs	r1, #1
    15ce:	4640      	mov	r0, r8
    15d0:	47b8      	blx	r7
    15d2:	e7f1      	b.n	15b8 <usb_d_cb_trans_setup+0x5c>
    15d4:	00001391 	.word	0x00001391
    15d8:	200000b0 	.word	0x200000b0
    15dc:	00003185 	.word	0x00003185
    15e0:	0000303d 	.word	0x0000303d

000015e4 <usb_d_init>:

int32_t usb_d_init(void)
{
    15e4:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    15e6:	4b11      	ldr	r3, [pc, #68]	; (162c <usb_d_init+0x48>)
    15e8:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    15ea:	2800      	cmp	r0, #0
    15ec:	db1c      	blt.n	1628 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    15ee:	4c10      	ldr	r4, [pc, #64]	; (1630 <usb_d_init+0x4c>)
    15f0:	2280      	movs	r2, #128	; 0x80
    15f2:	2100      	movs	r1, #0
    15f4:	4620      	mov	r0, r4
    15f6:	4b0f      	ldr	r3, [pc, #60]	; (1634 <usb_d_init+0x50>)
    15f8:	4798      	blx	r3
    15fa:	4623      	mov	r3, r4
    15fc:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1600:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1602:	4a0d      	ldr	r2, [pc, #52]	; (1638 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1604:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1606:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1608:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    160a:	61da      	str	r2, [r3, #28]
    160c:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    160e:	4283      	cmp	r3, r0
    1610:	d1f8      	bne.n	1604 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1612:	490a      	ldr	r1, [pc, #40]	; (163c <usb_d_init+0x58>)
    1614:	2000      	movs	r0, #0
    1616:	4c0a      	ldr	r4, [pc, #40]	; (1640 <usb_d_init+0x5c>)
    1618:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    161a:	490a      	ldr	r1, [pc, #40]	; (1644 <usb_d_init+0x60>)
    161c:	2001      	movs	r0, #1
    161e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1620:	4909      	ldr	r1, [pc, #36]	; (1648 <usb_d_init+0x64>)
    1622:	2002      	movs	r0, #2
    1624:	47a0      	blx	r4
	return ERR_NONE;
    1626:	2000      	movs	r0, #0
}
    1628:	bd10      	pop	{r4, pc}
    162a:	bf00      	nop
    162c:	00002f41 	.word	0x00002f41
    1630:	200000b0 	.word	0x200000b0
    1634:	0000348f 	.word	0x0000348f
    1638:	000013d5 	.word	0x000013d5
    163c:	0000155d 	.word	0x0000155d
    1640:	000033c5 	.word	0x000033c5
    1644:	000013d9 	.word	0x000013d9
    1648:	0000140d 	.word	0x0000140d

0000164c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    164c:	b900      	cbnz	r0, 1650 <assert+0x4>
		__asm("BKPT #0");
    164e:	be00      	bkpt	0x0000
    1650:	4770      	bx	lr
	...

00001654 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    1654:	b430      	push	{r4, r5}
	dev->hw = hw;
    1656:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    1658:	698b      	ldr	r3, [r1, #24]
    165a:	f043 0301 	orr.w	r3, r3, #1
    165e:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    1660:	6802      	ldr	r2, [r0, #0]
}

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    1662:	6993      	ldr	r3, [r2, #24]
    1664:	f013 0f01 	tst.w	r3, #1
    1668:	d0fb      	beq.n	1662 <_can_async_init+0xe>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    166a:	6993      	ldr	r3, [r2, #24]
    166c:	f043 0302 	orr.w	r3, r3, #2
    1670:	6193      	str	r3, [r2, #24]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    1672:	4b34      	ldr	r3, [pc, #208]	; (1744 <_can_async_init+0xf0>)
    1674:	4299      	cmp	r1, r3
    1676:	d011      	beq.n	169c <_can_async_init+0x48>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    1678:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    167a:	6993      	ldr	r3, [r2, #24]
    167c:	f023 0302 	bic.w	r3, r3, #2
    1680:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    1682:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    1684:	6993      	ldr	r3, [r2, #24]
    1686:	f023 0301 	bic.w	r3, r3, #1
    168a:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    168c:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
    168e:	6993      	ldr	r3, [r2, #24]
    1690:	f013 0f01 	tst.w	r3, #1
    1694:	d1fb      	bne.n	168e <_can_async_init+0x3a>
	};

	return ERR_NONE;
}
    1696:	2000      	movs	r0, #0
    1698:	bc30      	pop	{r4, r5}
    169a:	4770      	bx	lr
		_can1_dev    = dev;
    169c:	4b2a      	ldr	r3, [pc, #168]	; (1748 <_can_async_init+0xf4>)
    169e:	461a      	mov	r2, r3
    16a0:	f842 0b04 	str.w	r0, [r2], #4
		dev->context = (void *)&_can1_context;
    16a4:	4929      	ldr	r1, [pc, #164]	; (174c <_can_async_init+0xf8>)
    16a6:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    16a8:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    16aa:	698c      	ldr	r4, [r1, #24]
    16ac:	618c      	str	r4, [r1, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    16ae:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
    16b0:	2400      	movs	r4, #0
    16b2:	608c      	str	r4, [r1, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    16b4:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    16b6:	4d26      	ldr	r5, [pc, #152]	; (1750 <_can_async_init+0xfc>)
    16b8:	61cd      	str	r5, [r1, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    16ba:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
    16bc:	f640 2533 	movw	r5, #2611	; 0xa33
    16c0:	60cd      	str	r5, [r1, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    16c2:	6805      	ldr	r5, [r0, #0]
    16c4:	4923      	ldr	r1, [pc, #140]	; (1754 <_can_async_init+0x100>)
    16c6:	b289      	uxth	r1, r1
    16c8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    16cc:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    16d0:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    16d2:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    16d6:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    16d8:	f8c1 40c8 	str.w	r4, [r1, #200]	; 0xc8
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    16dc:	6805      	ldr	r5, [r0, #0]
    16de:	491e      	ldr	r1, [pc, #120]	; (1758 <_can_async_init+0x104>)
    16e0:	b289      	uxth	r1, r1
    16e2:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
	((Can *)hw)->TXBC.reg = data;
    16e6:	f8c5 10c0 	str.w	r1, [r5, #192]	; 0xc0
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    16ea:	6801      	ldr	r1, [r0, #0]
    16ec:	b292      	uxth	r2, r2
    16ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    16f2:	f8c1 20f0 	str.w	r2, [r1, #240]	; 0xf0
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    16f6:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->GFC.reg = data;
    16f8:	2128      	movs	r1, #40	; 0x28
    16fa:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    16fe:	6801      	ldr	r1, [r0, #0]
    1700:	f103 0214 	add.w	r2, r3, #20
    1704:	b292      	uxth	r2, r2
    1706:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	((Can *)hw)->SIDFC.reg = data;
    170a:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    170e:	6802      	ldr	r2, [r0, #0]
    1710:	331c      	adds	r3, #28
    1712:	b29b      	uxth	r3, r3
    1714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Can *)hw)->XIDFC.reg = data;
    1718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    171c:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->XIDAM.reg = data;
    171e:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1722:	4b0e      	ldr	r3, [pc, #56]	; (175c <_can_async_init+0x108>)
    1724:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    172c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1730:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1734:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1738:	609a      	str	r2, [r3, #8]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    173a:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
    173c:	2201      	movs	r2, #1
    173e:	65da      	str	r2, [r3, #92]	; 0x5c
    1740:	e79a      	b.n	1678 <_can_async_init+0x24>
    1742:	bf00      	nop
    1744:	42000400 	.word	0x42000400
    1748:	20000130 	.word	0x20000130
    174c:	20000000 	.word	0x20000000
    1750:	06020a07 	.word	0x06020a07
    1754:	20000438 	.word	0x20000438
    1758:	20000418 	.word	0x20000418
    175c:	e000e100 	.word	0xe000e100

00001760 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    1760:	b538      	push	{r3, r4, r5, lr}
	struct _can_async_device *dev = _can1_dev;
    1762:	4b1d      	ldr	r3, [pc, #116]	; (17d8 <CAN1_Handler+0x78>)
    1764:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    1766:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
    1768:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
    176a:	f014 0f01 	tst.w	r4, #1
    176e:	d11c      	bne.n	17aa <CAN1_Handler+0x4a>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
    1770:	f414 7f00 	tst.w	r4, #512	; 0x200
    1774:	d11d      	bne.n	17b2 <CAN1_Handler+0x52>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
    1776:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
    177a:	d11e      	bne.n	17ba <CAN1_Handler+0x5a>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
    177c:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
    1780:	d120      	bne.n	17c4 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
    1782:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
    1786:	d00a      	beq.n	179e <CAN1_Handler+0x3e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    1788:	68ea      	ldr	r2, [r5, #12]
    178a:	682b      	ldr	r3, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    178e:	f3c3 1340 	ubfx	r3, r3, #5, #1
    1792:	2b00      	cmp	r3, #0
    1794:	bf14      	ite	ne
    1796:	2102      	movne	r1, #2
    1798:	2101      	moveq	r1, #1
    179a:	4628      	mov	r0, r5
    179c:	4790      	blx	r2
	}

	if (ir & CAN_IR_RF0L) {
    179e:	f014 0f08 	tst.w	r4, #8
    17a2:	d114      	bne.n	17ce <CAN1_Handler+0x6e>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
    17a4:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
    17a6:	651c      	str	r4, [r3, #80]	; 0x50
    17a8:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
    17aa:	68ab      	ldr	r3, [r5, #8]
    17ac:	4628      	mov	r0, r5
    17ae:	4798      	blx	r3
    17b0:	e7de      	b.n	1770 <CAN1_Handler+0x10>
		dev->cb.tx_done(dev);
    17b2:	686b      	ldr	r3, [r5, #4]
    17b4:	4628      	mov	r0, r5
    17b6:	4798      	blx	r3
    17b8:	e7dd      	b.n	1776 <CAN1_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    17ba:	68eb      	ldr	r3, [r5, #12]
    17bc:	2103      	movs	r1, #3
    17be:	4628      	mov	r0, r5
    17c0:	4798      	blx	r3
    17c2:	e7db      	b.n	177c <CAN1_Handler+0x1c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    17c4:	68eb      	ldr	r3, [r5, #12]
    17c6:	2100      	movs	r1, #0
    17c8:	4628      	mov	r0, r5
    17ca:	4798      	blx	r3
    17cc:	e7d9      	b.n	1782 <CAN1_Handler+0x22>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    17ce:	68eb      	ldr	r3, [r5, #12]
    17d0:	2104      	movs	r1, #4
    17d2:	4628      	mov	r0, r5
    17d4:	4798      	blx	r3
    17d6:	e7e5      	b.n	17a4 <CAN1_Handler+0x44>
    17d8:	20000130 	.word	0x20000130

000017dc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    17dc:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    17de:	4a08      	ldr	r2, [pc, #32]	; (1800 <_init_chip+0x24>)
    17e0:	8813      	ldrh	r3, [r2, #0]
    17e2:	b29b      	uxth	r3, r3
    17e4:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    17e6:	4b07      	ldr	r3, [pc, #28]	; (1804 <_init_chip+0x28>)
    17e8:	4798      	blx	r3
	_oscctrl_init_sources();
    17ea:	4b07      	ldr	r3, [pc, #28]	; (1808 <_init_chip+0x2c>)
    17ec:	4798      	blx	r3
	_mclk_init();
    17ee:	4b07      	ldr	r3, [pc, #28]	; (180c <_init_chip+0x30>)
    17f0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    17f2:	4b07      	ldr	r3, [pc, #28]	; (1810 <_init_chip+0x34>)
    17f4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    17f6:	f640 70ff 	movw	r0, #4095	; 0xfff
    17fa:	4b06      	ldr	r3, [pc, #24]	; (1814 <_init_chip+0x38>)
    17fc:	4798      	blx	r3
    17fe:	bd08      	pop	{r3, pc}
    1800:	41004000 	.word	0x41004000
    1804:	00001c41 	.word	0x00001c41
    1808:	00001c61 	.word	0x00001c61
    180c:	00001c35 	.word	0x00001c35
    1810:	00001c7d 	.word	0x00001c7d
    1814:	00001bbd 	.word	0x00001bbd

00001818 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    1818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    181c:	b082      	sub	sp, #8
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
    181e:	4b32      	ldr	r3, [pc, #200]	; (18e8 <_ext_irq_handler+0xd0>)
    1820:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    1822:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1824:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
    1826:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
    1828:	4b30      	ldr	r3, [pc, #192]	; (18ec <_ext_irq_handler+0xd4>)
    182a:	6818      	ldr	r0, [r3, #0]
    182c:	f44f 7292 	mov.w	r2, #292	; 0x124
    1830:	492f      	ldr	r1, [pc, #188]	; (18f0 <_ext_irq_handler+0xd8>)
    1832:	3000      	adds	r0, #0
    1834:	bf18      	it	ne
    1836:	2001      	movne	r0, #1
    1838:	4b2e      	ldr	r3, [pc, #184]	; (18f4 <_ext_irq_handler+0xdc>)
    183a:	4798      	blx	r3

	while (flags) {
    183c:	9b01      	ldr	r3, [sp, #4]
    183e:	2b00      	cmp	r3, #0
    1840:	d04e      	beq.n	18e0 <_ext_irq_handler+0xc8>
    1842:	f04f 36ff 	mov.w	r6, #4294967295
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    1846:	4d2c      	ldr	r5, [pc, #176]	; (18f8 <_ext_irq_handler+0xe0>)
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
    1848:	4f28      	ldr	r7, [pc, #160]	; (18ec <_ext_irq_handler+0xd4>)
	return ((Eic *)hw)->INTFLAG.reg;
    184a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 18e8 <_ext_irq_handler+0xd0>
    184e:	e03c      	b.n	18ca <_ext_irq_handler+0xb2>
					pin = _map[middle].pin;
    1850:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
    1854:	f8de 6004 	ldr.w	r6, [lr, #4]
			if (INVALID_PIN_NUMBER != pin) {
    1858:	f1b6 3fff 	cmp.w	r6, #4294967295
    185c:	d002      	beq.n	1864 <_ext_irq_handler+0x4c>
				callback(pin);
    185e:	4630      	mov	r0, r6
    1860:	683b      	ldr	r3, [r7, #0]
    1862:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1864:	9b01      	ldr	r3, [sp, #4]
    1866:	2201      	movs	r2, #1
    1868:	fa02 f404 	lsl.w	r4, r2, r4
    186c:	ea23 0404 	bic.w	r4, r3, r4
    1870:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    1872:	9b01      	ldr	r3, [sp, #4]
    1874:	fa93 fea3 	rbit	lr, r3
    1878:	fabe fe8e 	clz	lr, lr
    187c:	2b00      	cmp	r3, #0
		while (-1 != pos) {
    187e:	bf08      	it	eq
    1880:	f04f 3eff 	moveq.w	lr, #4294967295
    1884:	d019      	beq.n	18ba <_ext_irq_handler+0xa2>
				if (_map[middle].extint == pos) {
    1886:	4674      	mov	r4, lr
    1888:	f1be 0f08 	cmp.w	lr, #8
    188c:	d0e0      	beq.n	1850 <_ext_irq_handler+0x38>
    188e:	2208      	movs	r2, #8
    1890:	4613      	mov	r3, r2
    1892:	2010      	movs	r0, #16
    1894:	2100      	movs	r1, #0
				if (_map[middle].extint < pos) {
    1896:	4294      	cmp	r4, r2
					lower = middle + 1;
    1898:	bfc7      	ittee	gt
    189a:	3301      	addgt	r3, #1
    189c:	b2d9      	uxtbgt	r1, r3
					upper = middle - 1;
    189e:	f103 33ff 	addle.w	r3, r3, #4294967295
    18a2:	b2d8      	uxtble	r0, r3
			while (upper >= lower) {
    18a4:	4281      	cmp	r1, r0
    18a6:	d8d7      	bhi.n	1858 <_ext_irq_handler+0x40>
				middle = (upper + lower) >> 1;
    18a8:	1843      	adds	r3, r0, r1
    18aa:	f3c3 0347 	ubfx	r3, r3, #1, #8
    18ae:	469e      	mov	lr, r3
				if (_map[middle].extint == pos) {
    18b0:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    18b4:	42a2      	cmp	r2, r4
    18b6:	d1ee      	bne.n	1896 <_ext_irq_handler+0x7e>
    18b8:	e7ca      	b.n	1850 <_ext_irq_handler+0x38>
    18ba:	f8d8 3014 	ldr.w	r3, [r8, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    18be:	9301      	str	r3, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    18c0:	9b01      	ldr	r3, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    18c2:	f8c8 3014 	str.w	r3, [r8, #20]
	while (flags) {
    18c6:	9b01      	ldr	r3, [sp, #4]
    18c8:	b153      	cbz	r3, 18e0 <_ext_irq_handler+0xc8>
		pos = ffs(flags) - 1;
    18ca:	9b01      	ldr	r3, [sp, #4]
    18cc:	fa93 fea3 	rbit	lr, r3
    18d0:	fabe fe8e 	clz	lr, lr
    18d4:	2b00      	cmp	r3, #0
		while (-1 != pos) {
    18d6:	bf08      	it	eq
    18d8:	f04f 3eff 	moveq.w	lr, #4294967295
    18dc:	d1d3      	bne.n	1886 <_ext_irq_handler+0x6e>
    18de:	e7ec      	b.n	18ba <_ext_irq_handler+0xa2>
	}
}
    18e0:	b002      	add	sp, #8
    18e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18e6:	bf00      	nop
    18e8:	40002800 	.word	0x40002800
    18ec:	2000015c 	.word	0x2000015c
    18f0:	00003574 	.word	0x00003574
    18f4:	0000164d 	.word	0x0000164d
    18f8:	000034f4 	.word	0x000034f4

000018fc <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    18fc:	4b7c      	ldr	r3, [pc, #496]	; (1af0 <_ext_irq_init+0x1f4>)
    18fe:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    1900:	f013 0f01 	tst.w	r3, #1
    1904:	d11f      	bne.n	1946 <_ext_irq_init+0x4a>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1906:	4a7a      	ldr	r2, [pc, #488]	; (1af0 <_ext_irq_init+0x1f4>)
    1908:	6853      	ldr	r3, [r2, #4]
    190a:	f013 0f03 	tst.w	r3, #3
    190e:	d1fb      	bne.n	1908 <_ext_irq_init+0xc>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1910:	4b77      	ldr	r3, [pc, #476]	; (1af0 <_ext_irq_init+0x1f4>)
    1912:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    1914:	f013 0f02 	tst.w	r3, #2
    1918:	d00d      	beq.n	1936 <_ext_irq_init+0x3a>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    191a:	4a75      	ldr	r2, [pc, #468]	; (1af0 <_ext_irq_init+0x1f4>)
    191c:	7813      	ldrb	r3, [r2, #0]
    191e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1922:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1924:	6853      	ldr	r3, [r2, #4]
    1926:	f013 0f03 	tst.w	r3, #3
    192a:	d1fb      	bne.n	1924 <_ext_irq_init+0x28>
    192c:	4a70      	ldr	r2, [pc, #448]	; (1af0 <_ext_irq_init+0x1f4>)
    192e:	6853      	ldr	r3, [r2, #4]
    1930:	f013 0f02 	tst.w	r3, #2
    1934:	d1fb      	bne.n	192e <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    1936:	2201      	movs	r2, #1
    1938:	4b6d      	ldr	r3, [pc, #436]	; (1af0 <_ext_irq_init+0x1f4>)
    193a:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    193c:	461a      	mov	r2, r3
    193e:	6853      	ldr	r3, [r2, #4]
    1940:	f013 0f03 	tst.w	r3, #3
    1944:	d1fb      	bne.n	193e <_ext_irq_init+0x42>
    1946:	4a6a      	ldr	r2, [pc, #424]	; (1af0 <_ext_irq_init+0x1f4>)
    1948:	6853      	ldr	r3, [r2, #4]
    194a:	f013 0f01 	tst.w	r3, #1
    194e:	d1fb      	bne.n	1948 <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
    1950:	4a67      	ldr	r2, [pc, #412]	; (1af0 <_ext_irq_init+0x1f4>)
    1952:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    1954:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    1958:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    195a:	6853      	ldr	r3, [r2, #4]
    195c:	f013 0f03 	tst.w	r3, #3
    1960:	d1fb      	bne.n	195a <_ext_irq_init+0x5e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1962:	4b63      	ldr	r3, [pc, #396]	; (1af0 <_ext_irq_init+0x1f4>)
    1964:	2200      	movs	r2, #0
    1966:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1968:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    196a:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    196c:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    196e:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    1970:	61da      	str	r2, [r3, #28]
    1972:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1974:	781a      	ldrb	r2, [r3, #0]
    1976:	f042 0202 	orr.w	r2, r2, #2
    197a:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    197c:	461a      	mov	r2, r3
    197e:	6853      	ldr	r3, [r2, #4]
    1980:	f013 0f03 	tst.w	r3, #3
    1984:	d1fb      	bne.n	197e <_ext_irq_init+0x82>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1986:	4b5b      	ldr	r3, [pc, #364]	; (1af4 <_ext_irq_init+0x1f8>)
    1988:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    198c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1990:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1994:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1998:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    199c:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    199e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    19a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    19a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19aa:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19ae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19b2:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    19b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    19bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19c0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19c4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19c8:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    19ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    19d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19d6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19da:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19de:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    19e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    19e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19ec:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19f0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19f4:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    19fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    19fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a02:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a06:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a0a:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a0c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1a14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a18:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a1c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a20:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a22:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1a26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1a2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a2e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a32:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a36:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    1a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1a40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a44:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a48:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a4c:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a4e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1a52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1a56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a5a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a5e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a62:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a64:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    1a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1a6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a70:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a74:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a78:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a7a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    1a7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1a82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a86:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a8a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a8e:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1a98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a9c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1aa0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1aa4:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1aa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    1aaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1aae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ab2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ab6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1aba:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1abc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    1ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1ac4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ac8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1acc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ad0:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ad2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    1ad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1ada:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ade:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ae2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ae6:	601a      	str	r2, [r3, #0]
	callback = cb;
    1ae8:	4b03      	ldr	r3, [pc, #12]	; (1af8 <_ext_irq_init+0x1fc>)
    1aea:	6018      	str	r0, [r3, #0]
}
    1aec:	2000      	movs	r0, #0
    1aee:	4770      	bx	lr
    1af0:	40002800 	.word	0x40002800
    1af4:	e000e100 	.word	0xe000e100
    1af8:	2000015c 	.word	0x2000015c

00001afc <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    1afc:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1afe:	4b01      	ldr	r3, [pc, #4]	; (1b04 <EIC_0_Handler+0x8>)
    1b00:	4798      	blx	r3
    1b02:	bd08      	pop	{r3, pc}
    1b04:	00001819 	.word	0x00001819

00001b08 <EIC_1_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    1b08:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1b0a:	4b01      	ldr	r3, [pc, #4]	; (1b10 <EIC_1_Handler+0x8>)
    1b0c:	4798      	blx	r3
    1b0e:	bd08      	pop	{r3, pc}
    1b10:	00001819 	.word	0x00001819

00001b14 <EIC_2_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_2_Handler(void)
{
    1b14:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1b16:	4b01      	ldr	r3, [pc, #4]	; (1b1c <EIC_2_Handler+0x8>)
    1b18:	4798      	blx	r3
    1b1a:	bd08      	pop	{r3, pc}
    1b1c:	00001819 	.word	0x00001819

00001b20 <EIC_3_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    1b20:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1b22:	4b01      	ldr	r3, [pc, #4]	; (1b28 <EIC_3_Handler+0x8>)
    1b24:	4798      	blx	r3
    1b26:	bd08      	pop	{r3, pc}
    1b28:	00001819 	.word	0x00001819

00001b2c <EIC_4_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    1b2c:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1b2e:	4b01      	ldr	r3, [pc, #4]	; (1b34 <EIC_4_Handler+0x8>)
    1b30:	4798      	blx	r3
    1b32:	bd08      	pop	{r3, pc}
    1b34:	00001819 	.word	0x00001819

00001b38 <EIC_5_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    1b38:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1b3a:	4b01      	ldr	r3, [pc, #4]	; (1b40 <EIC_5_Handler+0x8>)
    1b3c:	4798      	blx	r3
    1b3e:	bd08      	pop	{r3, pc}
    1b40:	00001819 	.word	0x00001819

00001b44 <EIC_6_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    1b44:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1b46:	4b01      	ldr	r3, [pc, #4]	; (1b4c <EIC_6_Handler+0x8>)
    1b48:	4798      	blx	r3
    1b4a:	bd08      	pop	{r3, pc}
    1b4c:	00001819 	.word	0x00001819

00001b50 <EIC_7_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    1b50:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1b52:	4b01      	ldr	r3, [pc, #4]	; (1b58 <EIC_7_Handler+0x8>)
    1b54:	4798      	blx	r3
    1b56:	bd08      	pop	{r3, pc}
    1b58:	00001819 	.word	0x00001819

00001b5c <EIC_8_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    1b5c:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1b5e:	4b01      	ldr	r3, [pc, #4]	; (1b64 <EIC_8_Handler+0x8>)
    1b60:	4798      	blx	r3
    1b62:	bd08      	pop	{r3, pc}
    1b64:	00001819 	.word	0x00001819

00001b68 <EIC_9_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    1b68:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1b6a:	4b01      	ldr	r3, [pc, #4]	; (1b70 <EIC_9_Handler+0x8>)
    1b6c:	4798      	blx	r3
    1b6e:	bd08      	pop	{r3, pc}
    1b70:	00001819 	.word	0x00001819

00001b74 <EIC_10_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_10_Handler(void)
{
    1b74:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1b76:	4b01      	ldr	r3, [pc, #4]	; (1b7c <EIC_10_Handler+0x8>)
    1b78:	4798      	blx	r3
    1b7a:	bd08      	pop	{r3, pc}
    1b7c:	00001819 	.word	0x00001819

00001b80 <EIC_11_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_11_Handler(void)
{
    1b80:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1b82:	4b01      	ldr	r3, [pc, #4]	; (1b88 <EIC_11_Handler+0x8>)
    1b84:	4798      	blx	r3
    1b86:	bd08      	pop	{r3, pc}
    1b88:	00001819 	.word	0x00001819

00001b8c <EIC_12_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_12_Handler(void)
{
    1b8c:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1b8e:	4b01      	ldr	r3, [pc, #4]	; (1b94 <EIC_12_Handler+0x8>)
    1b90:	4798      	blx	r3
    1b92:	bd08      	pop	{r3, pc}
    1b94:	00001819 	.word	0x00001819

00001b98 <EIC_13_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_13_Handler(void)
{
    1b98:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1b9a:	4b01      	ldr	r3, [pc, #4]	; (1ba0 <EIC_13_Handler+0x8>)
    1b9c:	4798      	blx	r3
    1b9e:	bd08      	pop	{r3, pc}
    1ba0:	00001819 	.word	0x00001819

00001ba4 <EIC_14_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_14_Handler(void)
{
    1ba4:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1ba6:	4b01      	ldr	r3, [pc, #4]	; (1bac <EIC_14_Handler+0x8>)
    1ba8:	4798      	blx	r3
    1baa:	bd08      	pop	{r3, pc}
    1bac:	00001819 	.word	0x00001819

00001bb0 <EIC_15_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_15_Handler(void)
{
    1bb0:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1bb2:	4b01      	ldr	r3, [pc, #4]	; (1bb8 <EIC_15_Handler+0x8>)
    1bb4:	4798      	blx	r3
    1bb6:	bd08      	pop	{r3, pc}
    1bb8:	00001819 	.word	0x00001819

00001bbc <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1bbc:	f010 0f01 	tst.w	r0, #1
    1bc0:	d008      	beq.n	1bd4 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1bc2:	4a17      	ldr	r2, [pc, #92]	; (1c20 <_gclk_init_generators_by_fref+0x64>)
    1bc4:	4b17      	ldr	r3, [pc, #92]	; (1c24 <_gclk_init_generators_by_fref+0x68>)
    1bc6:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1bc8:	4619      	mov	r1, r3
    1bca:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1bce:	684b      	ldr	r3, [r1, #4]
    1bd0:	4213      	tst	r3, r2
    1bd2:	d1fc      	bne.n	1bce <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1bd4:	f010 0f02 	tst.w	r0, #2
    1bd8:	d008      	beq.n	1bec <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1bda:	4a13      	ldr	r2, [pc, #76]	; (1c28 <_gclk_init_generators_by_fref+0x6c>)
    1bdc:	4b11      	ldr	r3, [pc, #68]	; (1c24 <_gclk_init_generators_by_fref+0x68>)
    1bde:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1be0:	4619      	mov	r1, r3
    1be2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1be6:	684b      	ldr	r3, [r1, #4]
    1be8:	4213      	tst	r3, r2
    1bea:	d1fc      	bne.n	1be6 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    1bec:	f410 6f80 	tst.w	r0, #1024	; 0x400
    1bf0:	d008      	beq.n	1c04 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1bf2:	4a0e      	ldr	r2, [pc, #56]	; (1c2c <_gclk_init_generators_by_fref+0x70>)
    1bf4:	4b0b      	ldr	r3, [pc, #44]	; (1c24 <_gclk_init_generators_by_fref+0x68>)
    1bf6:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1bf8:	4619      	mov	r1, r3
    1bfa:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1bfe:	684b      	ldr	r3, [r1, #4]
    1c00:	4213      	tst	r3, r2
    1c02:	d1fc      	bne.n	1bfe <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    1c04:	f410 6f00 	tst.w	r0, #2048	; 0x800
    1c08:	d008      	beq.n	1c1c <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1c0a:	4a09      	ldr	r2, [pc, #36]	; (1c30 <_gclk_init_generators_by_fref+0x74>)
    1c0c:	4b05      	ldr	r3, [pc, #20]	; (1c24 <_gclk_init_generators_by_fref+0x68>)
    1c0e:	64da      	str	r2, [r3, #76]	; 0x4c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1c10:	4619      	mov	r1, r3
    1c12:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1c16:	684b      	ldr	r3, [r1, #4]
    1c18:	4213      	tst	r3, r2
    1c1a:	d1fc      	bne.n	1c16 <_gclk_init_generators_by_fref+0x5a>
    1c1c:	4770      	bx	lr
    1c1e:	bf00      	nop
    1c20:	00010101 	.word	0x00010101
    1c24:	40001c00 	.word	0x40001c00
    1c28:	00010906 	.word	0x00010906
    1c2c:	00010105 	.word	0x00010105
    1c30:	00010904 	.word	0x00010904

00001c34 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1c34:	2201      	movs	r2, #1
    1c36:	4b01      	ldr	r3, [pc, #4]	; (1c3c <_mclk_init+0x8>)
    1c38:	715a      	strb	r2, [r3, #5]
    1c3a:	4770      	bx	lr
    1c3c:	40000800 	.word	0x40000800

00001c40 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1c40:	4b06      	ldr	r3, [pc, #24]	; (1c5c <_osc32kctrl_init_sources+0x1c>)
    1c42:	f242 0286 	movw	r2, #8326	; 0x2086
    1c46:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1c48:	2200      	movs	r2, #0
    1c4a:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1c4c:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1c4e:	69d9      	ldr	r1, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1c50:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1c54:	61d9      	str	r1, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1c56:	741a      	strb	r2, [r3, #16]
    1c58:	4770      	bx	lr
    1c5a:	bf00      	nop
    1c5c:	40001400 	.word	0x40001400

00001c60 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1c60:	4a04      	ldr	r2, [pc, #16]	; (1c74 <_oscctrl_init_sources+0x14>)
    1c62:	4b05      	ldr	r3, [pc, #20]	; (1c78 <_oscctrl_init_sources+0x18>)
    1c64:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1c66:	461a      	mov	r2, r3
    1c68:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1c6a:	f013 0f02 	tst.w	r3, #2
    1c6e:	d0fb      	beq.n	1c68 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1c70:	4770      	bx	lr
    1c72:	bf00      	nop
    1c74:	03002606 	.word	0x03002606
    1c78:	40001000 	.word	0x40001000

00001c7c <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1c7c:	4a36      	ldr	r2, [pc, #216]	; (1d58 <_oscctrl_init_referenced_generators+0xdc>)
    1c7e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1c80:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1c84:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1c88:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1c8a:	4611      	mov	r1, r2
    1c8c:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1c90:	684b      	ldr	r3, [r1, #4]
    1c92:	4213      	tst	r3, r2
    1c94:	d1fc      	bne.n	1c90 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1c96:	4a30      	ldr	r2, [pc, #192]	; (1d58 <_oscctrl_init_referenced_generators+0xdc>)
    1c98:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1c9a:	f013 0f04 	tst.w	r3, #4
    1c9e:	d1fb      	bne.n	1c98 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1ca0:	4b2e      	ldr	r3, [pc, #184]	; (1d5c <_oscctrl_init_referenced_generators+0xe0>)
    1ca2:	2200      	movs	r2, #0
    1ca4:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1ca6:	4a2e      	ldr	r2, [pc, #184]	; (1d60 <_oscctrl_init_referenced_generators+0xe4>)
    1ca8:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1caa:	461a      	mov	r2, r3
    1cac:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1cb0:	f013 0f10 	tst.w	r3, #16
    1cb4:	d1fa      	bne.n	1cac <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1cb6:	2200      	movs	r2, #0
    1cb8:	4b28      	ldr	r3, [pc, #160]	; (1d5c <_oscctrl_init_referenced_generators+0xe0>)
    1cba:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1cbe:	461a      	mov	r2, r3
    1cc0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1cc4:	f013 0f04 	tst.w	r3, #4
    1cc8:	d1fa      	bne.n	1cc0 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1cca:	2202      	movs	r2, #2
    1ccc:	4b23      	ldr	r3, [pc, #140]	; (1d5c <_oscctrl_init_referenced_generators+0xe0>)
    1cce:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1cd0:	461a      	mov	r2, r3
    1cd2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1cd6:	f013 0f02 	tst.w	r3, #2
    1cda:	d1fa      	bne.n	1cd2 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1cdc:	4b1f      	ldr	r3, [pc, #124]	; (1d5c <_oscctrl_init_referenced_generators+0xe0>)
    1cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1ce0:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1ce2:	461a      	mov	r2, r3
    1ce4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1ce8:	f013 0f08 	tst.w	r3, #8
    1cec:	d1fa      	bne.n	1ce4 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1cee:	2219      	movs	r2, #25
    1cf0:	4b1a      	ldr	r3, [pc, #104]	; (1d5c <_oscctrl_init_referenced_generators+0xe0>)
    1cf2:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1cf6:	461a      	mov	r2, r3
    1cf8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1cfc:	f013 0f04 	tst.w	r3, #4
    1d00:	d1fa      	bne.n	1cf8 <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1d02:	4b16      	ldr	r3, [pc, #88]	; (1d5c <_oscctrl_init_referenced_generators+0xe0>)
    1d04:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1d08:	f013 0f01 	tst.w	r3, #1
    1d0c:	d01d      	beq.n	1d4a <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1d0e:	4a13      	ldr	r2, [pc, #76]	; (1d5c <_oscctrl_init_referenced_generators+0xe0>)
    1d10:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1d12:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1d16:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1d1a:	d1f9      	bne.n	1d10 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1d1c:	4a0e      	ldr	r2, [pc, #56]	; (1d58 <_oscctrl_init_referenced_generators+0xdc>)
    1d1e:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1d20:	2b00      	cmp	r3, #0
    1d22:	d1fc      	bne.n	1d1e <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1d24:	4a0c      	ldr	r2, [pc, #48]	; (1d58 <_oscctrl_init_referenced_generators+0xdc>)
    1d26:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1d28:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1d2c:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1d30:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1d32:	4611      	mov	r1, r2
    1d34:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1d38:	684b      	ldr	r3, [r1, #4]
    1d3a:	4213      	tst	r3, r2
    1d3c:	d1fc      	bne.n	1d38 <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1d3e:	4a06      	ldr	r2, [pc, #24]	; (1d58 <_oscctrl_init_referenced_generators+0xdc>)
    1d40:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1d42:	f013 0f04 	tst.w	r3, #4
    1d46:	d1fb      	bne.n	1d40 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    1d48:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1d4a:	4a04      	ldr	r2, [pc, #16]	; (1d5c <_oscctrl_init_referenced_generators+0xe0>)
    1d4c:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1d4e:	f413 7f80 	tst.w	r3, #256	; 0x100
    1d52:	d0fb      	beq.n	1d4c <_oscctrl_init_referenced_generators+0xd0>
    1d54:	e7e2      	b.n	1d1c <_oscctrl_init_referenced_generators+0xa0>
    1d56:	bf00      	nop
    1d58:	40001c00 	.word	0x40001c00
    1d5c:	40001000 	.word	0x40001000
    1d60:	0401bb80 	.word	0x0401bb80

00001d64 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1d64:	b500      	push	{lr}
    1d66:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1d68:	4b0d      	ldr	r3, [pc, #52]	; (1da0 <RAMECC_Handler+0x3c>)
    1d6a:	789b      	ldrb	r3, [r3, #2]
    1d6c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1d6e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1d70:	9b01      	ldr	r3, [sp, #4]
    1d72:	f013 0f02 	tst.w	r3, #2
    1d76:	d006      	beq.n	1d86 <RAMECC_Handler+0x22>
    1d78:	4b0a      	ldr	r3, [pc, #40]	; (1da4 <RAMECC_Handler+0x40>)
    1d7a:	681b      	ldr	r3, [r3, #0]
    1d7c:	b11b      	cbz	r3, 1d86 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1d7e:	4a08      	ldr	r2, [pc, #32]	; (1da0 <RAMECC_Handler+0x3c>)
    1d80:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1d82:	4798      	blx	r3
    1d84:	e009      	b.n	1d9a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1d86:	9b01      	ldr	r3, [sp, #4]
    1d88:	f013 0f01 	tst.w	r3, #1
    1d8c:	d005      	beq.n	1d9a <RAMECC_Handler+0x36>
    1d8e:	4b05      	ldr	r3, [pc, #20]	; (1da4 <RAMECC_Handler+0x40>)
    1d90:	685b      	ldr	r3, [r3, #4]
    1d92:	b113      	cbz	r3, 1d9a <RAMECC_Handler+0x36>
    1d94:	4a02      	ldr	r2, [pc, #8]	; (1da0 <RAMECC_Handler+0x3c>)
    1d96:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1d98:	4798      	blx	r3
	} else {
		return;
	}
}
    1d9a:	b003      	add	sp, #12
    1d9c:	f85d fb04 	ldr.w	pc, [sp], #4
    1da0:	41020000 	.word	0x41020000
    1da4:	20000458 	.word	0x20000458

00001da8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1da8:	b470      	push	{r4, r5, r6}
    1daa:	b089      	sub	sp, #36	; 0x24
    1dac:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1dae:	466c      	mov	r4, sp
    1db0:	4d0d      	ldr	r5, [pc, #52]	; (1de8 <_sercom_get_hardware_index+0x40>)
    1db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1db4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1db6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1dba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1dbe:	9b00      	ldr	r3, [sp, #0]
    1dc0:	42b3      	cmp	r3, r6
    1dc2:	d00d      	beq.n	1de0 <_sercom_get_hardware_index+0x38>
    1dc4:	4631      	mov	r1, r6
    1dc6:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1dc8:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1dca:	f853 2b04 	ldr.w	r2, [r3], #4
    1dce:	428a      	cmp	r2, r1
    1dd0:	d007      	beq.n	1de2 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1dd2:	3001      	adds	r0, #1
    1dd4:	2808      	cmp	r0, #8
    1dd6:	d1f8      	bne.n	1dca <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1dd8:	2000      	movs	r0, #0
}
    1dda:	b009      	add	sp, #36	; 0x24
    1ddc:	bc70      	pop	{r4, r5, r6}
    1dde:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1de0:	2000      	movs	r0, #0
			return i;
    1de2:	b2c0      	uxtb	r0, r0
    1de4:	e7f9      	b.n	1dda <_sercom_get_hardware_index+0x32>
    1de6:	bf00      	nop
    1de8:	0000358c 	.word	0x0000358c

00001dec <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    1dec:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1dee:	4b0c      	ldr	r3, [pc, #48]	; (1e20 <_get_i2cm_index+0x34>)
    1df0:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
		if (_i2cms[i].number == sercom_offset) {
    1df2:	2803      	cmp	r0, #3
    1df4:	d010      	beq.n	1e18 <_get_i2cm_index+0x2c>
    1df6:	2805      	cmp	r0, #5
    1df8:	d00c      	beq.n	1e14 <_get_i2cm_index+0x28>
    1dfa:	2807      	cmp	r0, #7
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1dfc:	bf08      	it	eq
    1dfe:	2002      	moveq	r0, #2
		if (_i2cms[i].number == sercom_offset) {
    1e00:	d00b      	beq.n	1e1a <_get_i2cm_index+0x2e>
			return i;
		}
	}

	ASSERT(false);
    1e02:	f240 32a6 	movw	r2, #934	; 0x3a6
    1e06:	4907      	ldr	r1, [pc, #28]	; (1e24 <_get_i2cm_index+0x38>)
    1e08:	2000      	movs	r0, #0
    1e0a:	4b07      	ldr	r3, [pc, #28]	; (1e28 <_get_i2cm_index+0x3c>)
    1e0c:	4798      	blx	r3
	return -1;
    1e0e:	f04f 30ff 	mov.w	r0, #4294967295
}
    1e12:	bd08      	pop	{r3, pc}
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1e14:	2001      	movs	r0, #1
    1e16:	e000      	b.n	1e1a <_get_i2cm_index+0x2e>
    1e18:	2000      	movs	r0, #0
			return i;
    1e1a:	b240      	sxtb	r0, r0
    1e1c:	bd08      	pop	{r3, pc}
    1e1e:	bf00      	nop
    1e20:	00001da9 	.word	0x00001da9
    1e24:	00003628 	.word	0x00003628
    1e28:	0000164d 	.word	0x0000164d

00001e2c <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    1e2c:	b538      	push	{r3, r4, r5, lr}
    1e2e:	4605      	mov	r5, r0
    1e30:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1e32:	4608      	mov	r0, r1
    1e34:	4b32      	ldr	r3, [pc, #200]	; (1f00 <_i2c_m_sync_init_impl+0xd4>)
    1e36:	4798      	blx	r3
    1e38:	b2c0      	uxtb	r0, r0
	};
}

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1e3a:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1e3c:	f013 0f01 	tst.w	r3, #1
    1e40:	d122      	bne.n	1e88 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    1e42:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1e46:	4a2f      	ldr	r2, [pc, #188]	; (1f04 <_i2c_m_sync_init_impl+0xd8>)
    1e48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1e4e:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e52:	69e3      	ldr	r3, [r4, #28]
    1e54:	f013 0f03 	tst.w	r3, #3
    1e58:	d1fb      	bne.n	1e52 <_i2c_m_sync_init_impl+0x26>
static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1e5a:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    1e5c:	f013 0f02 	tst.w	r3, #2
    1e60:	d00b      	beq.n	1e7a <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1e62:	6823      	ldr	r3, [r4, #0]
    1e64:	f023 0302 	bic.w	r3, r3, #2
    1e68:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e6a:	69e3      	ldr	r3, [r4, #28]
    1e6c:	f013 0f03 	tst.w	r3, #3
    1e70:	d1fb      	bne.n	1e6a <_i2c_m_sync_init_impl+0x3e>
    1e72:	69e3      	ldr	r3, [r4, #28]
    1e74:	f013 0f02 	tst.w	r3, #2
    1e78:	d1fb      	bne.n	1e72 <_i2c_m_sync_init_impl+0x46>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    1e7a:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1e7e:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e80:	69e3      	ldr	r3, [r4, #28]
    1e82:	f013 0f03 	tst.w	r3, #3
    1e86:	d1fb      	bne.n	1e80 <_i2c_m_sync_init_impl+0x54>
    1e88:	69e3      	ldr	r3, [r4, #28]
    1e8a:	f013 0f01 	tst.w	r3, #1
    1e8e:	d1fb      	bne.n	1e88 <_i2c_m_sync_init_impl+0x5c>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    1e90:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1e94:	4a1b      	ldr	r2, [pc, #108]	; (1f04 <_i2c_m_sync_init_impl+0xd8>)
    1e96:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1e9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1e9c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e9e:	69e3      	ldr	r3, [r4, #28]
    1ea0:	f013 0f03 	tst.w	r3, #3
    1ea4:	d1fb      	bne.n	1e9e <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    1ea6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1eaa:	4916      	ldr	r1, [pc, #88]	; (1f04 <_i2c_m_sync_init_impl+0xd8>)
    1eac:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    1eb2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1eb4:	69e3      	ldr	r3, [r4, #28]
    1eb6:	f013 0f04 	tst.w	r3, #4
    1eba:	d1fb      	bne.n	1eb4 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    1ebc:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1ec0:	4910      	ldr	r1, [pc, #64]	; (1f04 <_i2c_m_sync_init_impl+0xd8>)
    1ec2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1ec8:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    1eca:	f3c2 6301 	ubfx	r3, r2, #24, #2
    1ece:	81ab      	strh	r3, [r5, #12]

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    1ed0:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    1ed2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    1ed6:	2b01      	cmp	r3, #1
    1ed8:	bf94      	ite	ls
    1eda:	2300      	movls	r3, #0
    1edc:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    1ede:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    1ee2:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ee4:	69e3      	ldr	r3, [r4, #28]
    1ee6:	f013 0f04 	tst.w	r3, #4
    1eea:	d1fb      	bne.n	1ee4 <_i2c_m_sync_init_impl+0xb8>

	service->trise = _i2cms[i].trise;
    1eec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1ef0:	4b04      	ldr	r3, [pc, #16]	; (1f04 <_i2c_m_sync_init_impl+0xd8>)
    1ef2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    1ef6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    1ef8:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    1efa:	2000      	movs	r0, #0
    1efc:	bd38      	pop	{r3, r4, r5, pc}
    1efe:	bf00      	nop
    1f00:	00001ded 	.word	0x00001ded
    1f04:	0000358c 	.word	0x0000358c

00001f08 <_i2c_m_sync_init>:
{
    1f08:	b538      	push	{r3, r4, r5, lr}
    1f0a:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    1f0c:	4604      	mov	r4, r0
    1f0e:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    1f12:	4906      	ldr	r1, [pc, #24]	; (1f2c <_i2c_m_sync_init+0x24>)
    1f14:	3000      	adds	r0, #0
    1f16:	bf18      	it	ne
    1f18:	2001      	movne	r0, #1
    1f1a:	4b05      	ldr	r3, [pc, #20]	; (1f30 <_i2c_m_sync_init+0x28>)
    1f1c:	4798      	blx	r3
	i2c_dev->hw = hw;
    1f1e:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    1f20:	4629      	mov	r1, r5
    1f22:	4620      	mov	r0, r4
    1f24:	4b03      	ldr	r3, [pc, #12]	; (1f34 <_i2c_m_sync_init+0x2c>)
    1f26:	4798      	blx	r3
}
    1f28:	bd38      	pop	{r3, r4, r5, pc}
    1f2a:	bf00      	nop
    1f2c:	00003628 	.word	0x00003628
    1f30:	0000164d 	.word	0x0000164d
    1f34:	00001e2d 	.word	0x00001e2d

00001f38 <_i2c_m_sync_transfer>:
{
    1f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1f3c:	4605      	mov	r5, r0
    1f3e:	460e      	mov	r6, r1
	void *   hw = i2c_dev->hw;
    1f40:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    1f42:	f110 0800 	adds.w	r8, r0, #0
    1f46:	bf18      	it	ne
    1f48:	f04f 0801 	movne.w	r8, #1
    1f4c:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 2214 <_i2c_m_sync_transfer+0x2dc>
    1f50:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    1f54:	4649      	mov	r1, r9
    1f56:	4640      	mov	r0, r8
    1f58:	4fad      	ldr	r7, [pc, #692]	; (2210 <_i2c_m_sync_transfer+0x2d8>)
    1f5a:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    1f5c:	6928      	ldr	r0, [r5, #16]
    1f5e:	f240 52d1 	movw	r2, #1489	; 0x5d1
    1f62:	4649      	mov	r1, r9
    1f64:	3000      	adds	r0, #0
    1f66:	bf18      	it	ne
    1f68:	2001      	movne	r0, #1
    1f6a:	47b8      	blx	r7
	ASSERT(msg);
    1f6c:	f240 52d2 	movw	r2, #1490	; 0x5d2
    1f70:	4649      	mov	r1, r9
    1f72:	1c30      	adds	r0, r6, #0
    1f74:	bf18      	it	ne
    1f76:	2001      	movne	r0, #1
    1f78:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1f7a:	886b      	ldrh	r3, [r5, #2]
    1f7c:	f413 7f80 	tst.w	r3, #256	; 0x100
    1f80:	f040 8218 	bne.w	23b4 <_i2c_m_sync_transfer+0x47c>
	msg->flags |= I2C_M_BUSY;
    1f84:	8873      	ldrh	r3, [r6, #2]
    1f86:	b29b      	uxth	r3, r3
    1f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1f8c:	8073      	strh	r3, [r6, #2]
	i2c_dev->service.msg = *msg;
    1f8e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1f92:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    1f96:	6863      	ldr	r3, [r4, #4]
    1f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1f9c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f9e:	69e3      	ldr	r3, [r4, #28]
    1fa0:	f013 0f04 	tst.w	r3, #4
    1fa4:	d1fb      	bne.n	1f9e <_i2c_m_sync_transfer+0x66>
	void *             hw    = i2c_dev->hw;
    1fa6:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1fa8:	f8d7 9000 	ldr.w	r9, [r7]
	ASSERT(i2c_dev);
    1fac:	f240 52a5 	movw	r2, #1445	; 0x5a5
    1fb0:	4998      	ldr	r1, [pc, #608]	; (2214 <_i2c_m_sync_transfer+0x2dc>)
    1fb2:	4640      	mov	r0, r8
    1fb4:	4b96      	ldr	r3, [pc, #600]	; (2210 <_i2c_m_sync_transfer+0x2d8>)
    1fb6:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    1fb8:	686b      	ldr	r3, [r5, #4]
    1fba:	2b01      	cmp	r3, #1
    1fbc:	d05e      	beq.n	207c <_i2c_m_sync_transfer+0x144>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1fbe:	687b      	ldr	r3, [r7, #4]
    1fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    1fc4:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1fc6:	69fb      	ldr	r3, [r7, #28]
    1fc8:	f013 0f04 	tst.w	r3, #4
    1fcc:	d1fb      	bne.n	1fc6 <_i2c_m_sync_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    1fce:	882b      	ldrh	r3, [r5, #0]
    1fd0:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1fd4:	d05e      	beq.n	2094 <_i2c_m_sync_transfer+0x15c>
		if (msg->flags & I2C_M_RD) {
    1fd6:	886a      	ldrh	r2, [r5, #2]
    1fd8:	f012 0f01 	tst.w	r2, #1
    1fdc:	d004      	beq.n	1fe8 <_i2c_m_sync_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    1fde:	886a      	ldrh	r2, [r5, #2]
    1fe0:	b292      	uxth	r2, r2
    1fe2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1fe6:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1fe8:	f240 72fe 	movw	r2, #2046	; 0x7fe
    1fec:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    1ff0:	69fb      	ldr	r3, [r7, #28]
    1ff2:	f013 0f04 	tst.w	r3, #4
    1ff6:	d1fb      	bne.n	1ff0 <_i2c_m_sync_transfer+0xb8>
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    1ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2002:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2004:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2006:	69fb      	ldr	r3, [r7, #28]
    2008:	f013 0f04 	tst.w	r3, #4
    200c:	d1fb      	bne.n	2006 <_i2c_m_sync_transfer+0xce>
	void *   hw      = i2c_dev->hw;
    200e:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    2010:	7e0b      	ldrb	r3, [r1, #24]
    2012:	b2db      	uxtb	r3, r3
    2014:	f64f 72ff 	movw	r2, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    2018:	f013 0f03 	tst.w	r3, #3
    201c:	d103      	bne.n	2026 <_i2c_m_sync_transfer+0xee>
    201e:	7e0b      	ldrb	r3, [r1, #24]
    2020:	b2db      	uxtb	r3, r3
		if (timeout-- == 0) {
    2022:	3a01      	subs	r2, #1
    2024:	d1f8      	bne.n	2018 <_i2c_m_sync_transfer+0xe0>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2026:	6839      	ldr	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2028:	69fa      	ldr	r2, [r7, #28]
    202a:	f012 0f04 	tst.w	r2, #4
    202e:	d1fb      	bne.n	2028 <_i2c_m_sync_transfer+0xf0>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    2030:	8b7a      	ldrh	r2, [r7, #26]
    2032:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    2034:	f013 0f01 	tst.w	r3, #1
    2038:	f000 80a3 	beq.w	2182 <_i2c_m_sync_transfer+0x24a>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    203c:	f012 0f02 	tst.w	r2, #2
    2040:	d03c      	beq.n	20bc <_i2c_m_sync_transfer+0x184>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    2042:	2301      	movs	r3, #1
    2044:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
    2046:	886b      	ldrh	r3, [r5, #2]
    2048:	b29b      	uxth	r3, r3
    204a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    204e:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    2050:	886b      	ldrh	r3, [r5, #2]
    2052:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2056:	041b      	lsls	r3, r3, #16
    2058:	0c1b      	lsrs	r3, r3, #16
    205a:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    205c:	f002 0201 	and.w	r2, r2, #1
			return I2C_ERR_BAD_ADDRESS;
    2060:	2a00      	cmp	r2, #0
    2062:	bf14      	ite	ne
    2064:	f06f 0004 	mvnne.w	r0, #4
    2068:	f06f 0003 	mvneq.w	r0, #3
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    206c:	886b      	ldrh	r3, [r5, #2]
    206e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2072:	041b      	lsls	r3, r3, #16
    2074:	0c1b      	lsrs	r3, r3, #16
    2076:	806b      	strh	r3, [r5, #2]
		return ret;
    2078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (msg->len == 1 && sclsm) {
    207c:	f019 6f00 	tst.w	r9, #134217728	; 0x8000000
    2080:	d09d      	beq.n	1fbe <_i2c_m_sync_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2088:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    208a:	69fb      	ldr	r3, [r7, #28]
    208c:	f013 0f04 	tst.w	r3, #4
    2090:	d1fb      	bne.n	208a <_i2c_m_sync_transfer+0x152>
    2092:	e79c      	b.n	1fce <_i2c_m_sync_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    2094:	8869      	ldrh	r1, [r5, #2]
    2096:	005a      	lsls	r2, r3, #1
    2098:	b2d2      	uxtb	r2, r2
    209a:	f001 0301 	and.w	r3, r1, #1
    209e:	431a      	orrs	r2, r3
    20a0:	69fb      	ldr	r3, [r7, #28]
    20a2:	f013 0f04 	tst.w	r3, #4
    20a6:	d1fb      	bne.n	20a0 <_i2c_m_sync_transfer+0x168>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    20a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    20aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    20ae:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    20b0:	627a      	str	r2, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    20b2:	69fb      	ldr	r3, [r7, #28]
    20b4:	f013 0f04 	tst.w	r3, #4
    20b8:	d1fb      	bne.n	20b2 <_i2c_m_sync_transfer+0x17a>
    20ba:	e7a8      	b.n	200e <_i2c_m_sync_transfer+0xd6>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    20bc:	f012 0f04 	tst.w	r2, #4
    20c0:	d11d      	bne.n	20fe <_i2c_m_sync_transfer+0x1c6>
			if (msg->flags & I2C_M_TEN) {
    20c2:	886b      	ldrh	r3, [r5, #2]
    20c4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    20c8:	d037      	beq.n	213a <_i2c_m_sync_transfer+0x202>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    20ca:	882b      	ldrh	r3, [r5, #0]
    20cc:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    20ce:	f003 0206 	and.w	r2, r3, #6
    20d2:	69fb      	ldr	r3, [r7, #28]
    20d4:	f013 0f04 	tst.w	r3, #4
    20d8:	d1fb      	bne.n	20d2 <_i2c_m_sync_transfer+0x19a>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    20da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    20dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    20e0:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    20e4:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    20e6:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    20e8:	69fb      	ldr	r3, [r7, #28]
    20ea:	f013 0f04 	tst.w	r3, #4
    20ee:	d1fb      	bne.n	20e8 <_i2c_m_sync_transfer+0x1b0>
				msg->flags &= ~I2C_M_TEN;
    20f0:	886b      	ldrh	r3, [r5, #2]
    20f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    20f6:	041b      	lsls	r3, r3, #16
    20f8:	0c1b      	lsrs	r3, r3, #16
    20fa:	806b      	strh	r3, [r5, #2]
    20fc:	e069      	b.n	21d2 <_i2c_m_sync_transfer+0x29a>
				if (msg->len > 0) {
    20fe:	686b      	ldr	r3, [r5, #4]
    2100:	2b00      	cmp	r3, #0
    2102:	dd04      	ble.n	210e <_i2c_m_sync_transfer+0x1d6>
					msg->flags |= I2C_M_FAIL;
    2104:	886b      	ldrh	r3, [r5, #2]
    2106:	b29b      	uxth	r3, r3
    2108:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    210c:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    210e:	886b      	ldrh	r3, [r5, #2]
    2110:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2114:	d108      	bne.n	2128 <_i2c_m_sync_transfer+0x1f0>
				msg->flags &= ~I2C_M_BUSY;
    2116:	886b      	ldrh	r3, [r5, #2]
    2118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    211c:	041b      	lsls	r3, r3, #16
    211e:	0c1b      	lsrs	r3, r3, #16
    2120:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    2122:	f06f 0001 	mvn.w	r0, #1
    2126:	e7a1      	b.n	206c <_i2c_m_sync_transfer+0x134>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2128:	687b      	ldr	r3, [r7, #4]
    212a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    212e:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2130:	69fb      	ldr	r3, [r7, #28]
    2132:	f013 0f04 	tst.w	r3, #4
    2136:	d1fb      	bne.n	2130 <_i2c_m_sync_transfer+0x1f8>
    2138:	e7ed      	b.n	2116 <_i2c_m_sync_transfer+0x1de>
			if (msg->len == 0) {
    213a:	686b      	ldr	r3, [r5, #4]
    213c:	b99b      	cbnz	r3, 2166 <_i2c_m_sync_transfer+0x22e>
				if (msg->flags & I2C_M_STOP) {
    213e:	886b      	ldrh	r3, [r5, #2]
    2140:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2144:	d106      	bne.n	2154 <_i2c_m_sync_transfer+0x21c>
				msg->flags &= ~I2C_M_BUSY;
    2146:	886b      	ldrh	r3, [r5, #2]
    2148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    214c:	041b      	lsls	r3, r3, #16
    214e:	0c1b      	lsrs	r3, r3, #16
    2150:	806b      	strh	r3, [r5, #2]
    2152:	e03e      	b.n	21d2 <_i2c_m_sync_transfer+0x29a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2154:	687b      	ldr	r3, [r7, #4]
    2156:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    215a:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    215c:	69fb      	ldr	r3, [r7, #28]
    215e:	f013 0f04 	tst.w	r3, #4
    2162:	d1fb      	bne.n	215c <_i2c_m_sync_transfer+0x224>
    2164:	e7ef      	b.n	2146 <_i2c_m_sync_transfer+0x20e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    2166:	68ab      	ldr	r3, [r5, #8]
    2168:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    216a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    216c:	69fb      	ldr	r3, [r7, #28]
    216e:	f013 0f04 	tst.w	r3, #4
    2172:	d1fb      	bne.n	216c <_i2c_m_sync_transfer+0x234>
				msg->buffer++;
    2174:	68ab      	ldr	r3, [r5, #8]
    2176:	3301      	adds	r3, #1
    2178:	60ab      	str	r3, [r5, #8]
				msg->len--;
    217a:	686b      	ldr	r3, [r5, #4]
    217c:	3b01      	subs	r3, #1
    217e:	606b      	str	r3, [r5, #4]
    2180:	e027      	b.n	21d2 <_i2c_m_sync_transfer+0x29a>
	} else if (flags & SB_FLAG) {
    2182:	f013 0f02 	tst.w	r3, #2
    2186:	d024      	beq.n	21d2 <_i2c_m_sync_transfer+0x29a>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    2188:	686b      	ldr	r3, [r5, #4]
    218a:	2b00      	cmp	r3, #0
    218c:	d03a      	beq.n	2204 <_i2c_m_sync_transfer+0x2cc>
    218e:	f012 0f04 	tst.w	r2, #4
    2192:	d137      	bne.n	2204 <_i2c_m_sync_transfer+0x2cc>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    2194:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    2198:	3b01      	subs	r3, #1
    219a:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    219c:	2b00      	cmp	r3, #0
    219e:	f040 810d 	bne.w	23bc <_i2c_m_sync_transfer+0x484>
    21a2:	2900      	cmp	r1, #0
    21a4:	f000 8110 	beq.w	23c8 <_i2c_m_sync_transfer+0x490>
				if (msg->flags & I2C_M_STOP) {
    21a8:	886b      	ldrh	r3, [r5, #2]
    21aa:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    21ae:	d118      	bne.n	21e2 <_i2c_m_sync_transfer+0x2aa>
				msg->flags &= ~I2C_M_BUSY;
    21b0:	886b      	ldrh	r3, [r5, #2]
    21b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    21b6:	041b      	lsls	r3, r3, #16
    21b8:	0c1b      	lsrs	r3, r3, #16
    21ba:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    21bc:	68aa      	ldr	r2, [r5, #8]
    21be:	1c53      	adds	r3, r2, #1
    21c0:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    21c2:	69fb      	ldr	r3, [r7, #28]
    21c4:	f013 0f04 	tst.w	r3, #4
    21c8:	d1fb      	bne.n	21c2 <_i2c_m_sync_transfer+0x28a>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    21ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    21cc:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    21ce:	2302      	movs	r3, #2
    21d0:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    21d2:	2200      	movs	r2, #0
	return I2C_OK;
    21d4:	4610      	mov	r0, r2
    21d6:	2702      	movs	r7, #2
			return I2C_NACK;
    21d8:	f06f 0c01 	mvn.w	ip, #1
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    21dc:	f04f 0e01 	mov.w	lr, #1
    21e0:	e0b0      	b.n	2344 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    21e8:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    21ea:	69fb      	ldr	r3, [r7, #28]
    21ec:	f013 0f04 	tst.w	r3, #4
    21f0:	d1fb      	bne.n	21ea <_i2c_m_sync_transfer+0x2b2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    21f2:	687b      	ldr	r3, [r7, #4]
    21f4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    21f8:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    21fa:	69fb      	ldr	r3, [r7, #28]
    21fc:	f013 0f04 	tst.w	r3, #4
    2200:	d1fb      	bne.n	21fa <_i2c_m_sync_transfer+0x2c2>
    2202:	e7d5      	b.n	21b0 <_i2c_m_sync_transfer+0x278>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2204:	2302      	movs	r3, #2
    2206:	763b      	strb	r3, [r7, #24]
    2208:	f06f 0001 	mvn.w	r0, #1
    220c:	e72e      	b.n	206c <_i2c_m_sync_transfer+0x134>
    220e:	bf00      	nop
    2210:	0000164d 	.word	0x0000164d
    2214:	00003628 	.word	0x00003628
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2218:	6863      	ldr	r3, [r4, #4]
    221a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    221e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2220:	69e3      	ldr	r3, [r4, #28]
    2222:	f013 0f04 	tst.w	r3, #4
    2226:	d1fb      	bne.n	2220 <_i2c_m_sync_transfer+0x2e8>
    2228:	e0a1      	b.n	236e <_i2c_m_sync_transfer+0x436>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    222a:	f012 0f04 	tst.w	r2, #4
    222e:	d11e      	bne.n	226e <_i2c_m_sync_transfer+0x336>
			if (msg->flags & I2C_M_TEN) {
    2230:	886b      	ldrh	r3, [r5, #2]
    2232:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2236:	d037      	beq.n	22a8 <_i2c_m_sync_transfer+0x370>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    2238:	882b      	ldrh	r3, [r5, #0]
    223a:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    223c:	f003 0206 	and.w	r2, r3, #6
    2240:	69e3      	ldr	r3, [r4, #28]
    2242:	f013 0f04 	tst.w	r3, #4
    2246:	d1fb      	bne.n	2240 <_i2c_m_sync_transfer+0x308>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2248:	6a63      	ldr	r3, [r4, #36]	; 0x24
    224a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    224e:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    2252:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2254:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2256:	69e3      	ldr	r3, [r4, #28]
    2258:	f013 0f04 	tst.w	r3, #4
    225c:	d1fb      	bne.n	2256 <_i2c_m_sync_transfer+0x31e>
				msg->flags &= ~I2C_M_TEN;
    225e:	886b      	ldrh	r3, [r5, #2]
    2260:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2264:	041b      	lsls	r3, r3, #16
    2266:	0c1b      	lsrs	r3, r3, #16
    2268:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    226a:	4602      	mov	r2, r0
    226c:	e06a      	b.n	2344 <_i2c_m_sync_transfer+0x40c>
				if (msg->len > 0) {
    226e:	686b      	ldr	r3, [r5, #4]
    2270:	2b00      	cmp	r3, #0
    2272:	dd04      	ble.n	227e <_i2c_m_sync_transfer+0x346>
					msg->flags |= I2C_M_FAIL;
    2274:	886b      	ldrh	r3, [r5, #2]
    2276:	b29b      	uxth	r3, r3
    2278:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    227c:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    227e:	886b      	ldrh	r3, [r5, #2]
    2280:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2284:	d107      	bne.n	2296 <_i2c_m_sync_transfer+0x35e>
				msg->flags &= ~I2C_M_BUSY;
    2286:	886b      	ldrh	r3, [r5, #2]
    2288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    228c:	041b      	lsls	r3, r3, #16
    228e:	0c1b      	lsrs	r3, r3, #16
    2290:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    2292:	4662      	mov	r2, ip
    2294:	e056      	b.n	2344 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2296:	6863      	ldr	r3, [r4, #4]
    2298:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    229c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    229e:	69e3      	ldr	r3, [r4, #28]
    22a0:	f013 0f04 	tst.w	r3, #4
    22a4:	d1fb      	bne.n	229e <_i2c_m_sync_transfer+0x366>
    22a6:	e7ee      	b.n	2286 <_i2c_m_sync_transfer+0x34e>
			if (msg->len == 0) {
    22a8:	686b      	ldr	r3, [r5, #4]
    22aa:	b9a3      	cbnz	r3, 22d6 <_i2c_m_sync_transfer+0x39e>
				if (msg->flags & I2C_M_STOP) {
    22ac:	886b      	ldrh	r3, [r5, #2]
    22ae:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    22b2:	d107      	bne.n	22c4 <_i2c_m_sync_transfer+0x38c>
				msg->flags &= ~I2C_M_BUSY;
    22b4:	886b      	ldrh	r3, [r5, #2]
    22b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    22ba:	041b      	lsls	r3, r3, #16
    22bc:	0c1b      	lsrs	r3, r3, #16
    22be:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
    22c0:	4602      	mov	r2, r0
    22c2:	e03f      	b.n	2344 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    22c4:	6863      	ldr	r3, [r4, #4]
    22c6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    22ca:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22cc:	69e3      	ldr	r3, [r4, #28]
    22ce:	f013 0f04 	tst.w	r3, #4
    22d2:	d1fb      	bne.n	22cc <_i2c_m_sync_transfer+0x394>
    22d4:	e7ee      	b.n	22b4 <_i2c_m_sync_transfer+0x37c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    22d6:	68ab      	ldr	r3, [r5, #8]
    22d8:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    22da:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22dc:	69e3      	ldr	r3, [r4, #28]
    22de:	f013 0f04 	tst.w	r3, #4
    22e2:	d1fb      	bne.n	22dc <_i2c_m_sync_transfer+0x3a4>
				msg->buffer++;
    22e4:	68ab      	ldr	r3, [r5, #8]
    22e6:	3301      	adds	r3, #1
    22e8:	60ab      	str	r3, [r5, #8]
				msg->len--;
    22ea:	686b      	ldr	r3, [r5, #4]
    22ec:	3b01      	subs	r3, #1
    22ee:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    22f0:	4602      	mov	r2, r0
    22f2:	e027      	b.n	2344 <_i2c_m_sync_transfer+0x40c>
	} else if (flags & SB_FLAG) {
    22f4:	f013 0f02 	tst.w	r3, #2
    22f8:	d057      	beq.n	23aa <_i2c_m_sync_transfer+0x472>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    22fa:	686b      	ldr	r3, [r5, #4]
    22fc:	2b00      	cmp	r3, #0
    22fe:	d051      	beq.n	23a4 <_i2c_m_sync_transfer+0x46c>
    2300:	f012 0f04 	tst.w	r2, #4
    2304:	d14e      	bne.n	23a4 <_i2c_m_sync_transfer+0x46c>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    2306:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    230a:	3b01      	subs	r3, #1
    230c:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    230e:	2b00      	cmp	r3, #0
    2310:	f040 808c 	bne.w	242c <_i2c_m_sync_transfer+0x4f4>
    2314:	2900      	cmp	r1, #0
    2316:	f000 808f 	beq.w	2438 <_i2c_m_sync_transfer+0x500>
				if (msg->flags & I2C_M_STOP) {
    231a:	886b      	ldrh	r3, [r5, #2]
    231c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2320:	d12f      	bne.n	2382 <_i2c_m_sync_transfer+0x44a>
				msg->flags &= ~I2C_M_BUSY;
    2322:	886b      	ldrh	r3, [r5, #2]
    2324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2328:	041b      	lsls	r3, r3, #16
    232a:	0c1b      	lsrs	r3, r3, #16
    232c:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    232e:	68aa      	ldr	r2, [r5, #8]
    2330:	1c53      	adds	r3, r2, #1
    2332:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2334:	69e3      	ldr	r3, [r4, #28]
    2336:	f013 0f04 	tst.w	r3, #4
    233a:	d1fb      	bne.n	2334 <_i2c_m_sync_transfer+0x3fc>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    233c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    233e:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2340:	7627      	strb	r7, [r4, #24]
	return I2C_OK;
    2342:	4602      	mov	r2, r0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    2344:	886b      	ldrh	r3, [r5, #2]
    2346:	f413 7f80 	tst.w	r3, #256	; 0x100
    234a:	d030      	beq.n	23ae <_i2c_m_sync_transfer+0x476>
	void *   hw      = i2c_dev->hw;
    234c:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    234e:	7e0b      	ldrb	r3, [r1, #24]
    2350:	b2db      	uxtb	r3, r3
    2352:	f64f 72ff 	movw	r2, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    2356:	f013 0f03 	tst.w	r3, #3
    235a:	d142      	bne.n	23e2 <_i2c_m_sync_transfer+0x4aa>
    235c:	7e0b      	ldrb	r3, [r1, #24]
    235e:	b2db      	uxtb	r3, r3
		if (timeout-- == 0) {
    2360:	3a01      	subs	r2, #1
    2362:	d1f8      	bne.n	2356 <_i2c_m_sync_transfer+0x41e>
			if (msg->flags & I2C_M_STOP) {
    2364:	8873      	ldrh	r3, [r6, #2]
    2366:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    236a:	f47f af55 	bne.w	2218 <_i2c_m_sync_transfer+0x2e0>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    236e:	886b      	ldrh	r3, [r5, #2]
    2370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2374:	041b      	lsls	r3, r3, #16
    2376:	0c1b      	lsrs	r3, r3, #16
    2378:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
    237a:	f06f 0004 	mvn.w	r0, #4
			return ret;
    237e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    2382:	6863      	ldr	r3, [r4, #4]
    2384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2388:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    238a:	69e3      	ldr	r3, [r4, #28]
    238c:	f013 0f04 	tst.w	r3, #4
    2390:	d1fb      	bne.n	238a <_i2c_m_sync_transfer+0x452>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2392:	6863      	ldr	r3, [r4, #4]
    2394:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2398:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    239a:	69e3      	ldr	r3, [r4, #28]
    239c:	f013 0f04 	tst.w	r3, #4
    23a0:	d1fb      	bne.n	239a <_i2c_m_sync_transfer+0x462>
    23a2:	e7be      	b.n	2322 <_i2c_m_sync_transfer+0x3ea>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    23a4:	7627      	strb	r7, [r4, #24]
			return I2C_NACK;
    23a6:	4662      	mov	r2, ip
    23a8:	e7cc      	b.n	2344 <_i2c_m_sync_transfer+0x40c>
	return I2C_OK;
    23aa:	4602      	mov	r2, r0
    23ac:	e7ca      	b.n	2344 <_i2c_m_sync_transfer+0x40c>
    23ae:	4610      	mov	r0, r2
    23b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return I2C_ERR_BUSY;
    23b4:	f06f 0005 	mvn.w	r0, #5
    23b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    23bc:	2b01      	cmp	r3, #1
    23be:	f47f aefd 	bne.w	21bc <_i2c_m_sync_transfer+0x284>
    23c2:	2900      	cmp	r1, #0
    23c4:	f43f aefa 	beq.w	21bc <_i2c_m_sync_transfer+0x284>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    23c8:	687b      	ldr	r3, [r7, #4]
    23ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    23ce:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23d0:	69fb      	ldr	r3, [r7, #28]
    23d2:	f013 0f04 	tst.w	r3, #4
    23d6:	d1fb      	bne.n	23d0 <_i2c_m_sync_transfer+0x498>
			if (msg->len == 0) {
    23d8:	686b      	ldr	r3, [r5, #4]
    23da:	2b00      	cmp	r3, #0
    23dc:	f43f aee4 	beq.w	21a8 <_i2c_m_sync_transfer+0x270>
    23e0:	e6ec      	b.n	21bc <_i2c_m_sync_transfer+0x284>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    23e2:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23e4:	69e2      	ldr	r2, [r4, #28]
    23e6:	f012 0f04 	tst.w	r2, #4
    23ea:	d1fb      	bne.n	23e4 <_i2c_m_sync_transfer+0x4ac>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    23ec:	8b62      	ldrh	r2, [r4, #26]
    23ee:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    23f0:	f013 0f01 	tst.w	r3, #1
    23f4:	f43f af7e 	beq.w	22f4 <_i2c_m_sync_transfer+0x3bc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    23f8:	f012 0f02 	tst.w	r2, #2
    23fc:	f43f af15 	beq.w	222a <_i2c_m_sync_transfer+0x2f2>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    2400:	f884 e018 	strb.w	lr, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    2404:	886b      	ldrh	r3, [r5, #2]
    2406:	b29b      	uxth	r3, r3
    2408:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    240c:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    240e:	886b      	ldrh	r3, [r5, #2]
    2410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2414:	041b      	lsls	r3, r3, #16
    2416:	0c1b      	lsrs	r3, r3, #16
    2418:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    241a:	f002 0201 	and.w	r2, r2, #1
			return I2C_ERR_BAD_ADDRESS;
    241e:	2a00      	cmp	r2, #0
    2420:	bf14      	ite	ne
    2422:	f06f 0204 	mvnne.w	r2, #4
    2426:	f06f 0203 	mvneq.w	r2, #3
    242a:	e78b      	b.n	2344 <_i2c_m_sync_transfer+0x40c>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    242c:	2b01      	cmp	r3, #1
    242e:	f47f af7e 	bne.w	232e <_i2c_m_sync_transfer+0x3f6>
    2432:	2900      	cmp	r1, #0
    2434:	f43f af7b 	beq.w	232e <_i2c_m_sync_transfer+0x3f6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2438:	6863      	ldr	r3, [r4, #4]
    243a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    243e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2440:	69e3      	ldr	r3, [r4, #28]
    2442:	f013 0f04 	tst.w	r3, #4
    2446:	d1fb      	bne.n	2440 <_i2c_m_sync_transfer+0x508>
			if (msg->len == 0) {
    2448:	686b      	ldr	r3, [r5, #4]
    244a:	2b00      	cmp	r3, #0
    244c:	f43f af65 	beq.w	231a <_i2c_m_sync_transfer+0x3e2>
    2450:	e76d      	b.n	232e <_i2c_m_sync_transfer+0x3f6>
    2452:	bf00      	nop

00002454 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    2454:	b570      	push	{r4, r5, r6, lr}
    2456:	4606      	mov	r6, r0
    2458:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    245a:	4608      	mov	r0, r1
    245c:	4b5f      	ldr	r3, [pc, #380]	; (25dc <_spi_m_sync_init+0x188>)
    245e:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    2460:	2802      	cmp	r0, #2
    2462:	d072      	beq.n	254a <_spi_m_sync_init+0xf6>
    2464:	2804      	cmp	r0, #4
    2466:	d06e      	beq.n	2546 <_spi_m_sync_init+0xf2>
    2468:	2806      	cmp	r0, #6
    246a:	bf08      	it	eq
    246c:	2502      	moveq	r5, #2
    246e:	d06d      	beq.n	254c <_spi_m_sync_init+0xf8>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    2470:	2e00      	cmp	r6, #0
    2472:	f000 80a1 	beq.w	25b8 <_spi_m_sync_init+0x164>
    2476:	2c00      	cmp	r4, #0
    2478:	f040 80a7 	bne.w	25ca <_spi_m_sync_init+0x176>
	return NULL;
    247c:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    247e:	2000      	movs	r0, #0
    2480:	f640 123f 	movw	r2, #2367	; 0x93f
    2484:	4956      	ldr	r1, [pc, #344]	; (25e0 <_spi_m_sync_init+0x18c>)
    2486:	4b57      	ldr	r3, [pc, #348]	; (25e4 <_spi_m_sync_init+0x190>)
    2488:	4798      	blx	r3

	if (regs == NULL) {
    248a:	2d00      	cmp	r5, #0
    248c:	f000 8091 	beq.w	25b2 <_spi_m_sync_init+0x15e>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2490:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2492:	f013 0f01 	tst.w	r3, #1
    2496:	d11d      	bne.n	24d4 <_spi_m_sync_init+0x80>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    2498:	682b      	ldr	r3, [r5, #0]
    249a:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    249e:	69e3      	ldr	r3, [r4, #28]
    24a0:	f013 0f03 	tst.w	r3, #3
    24a4:	d1fb      	bne.n	249e <_spi_m_sync_init+0x4a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    24a6:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    24a8:	f013 0f02 	tst.w	r3, #2
    24ac:	d00b      	beq.n	24c6 <_spi_m_sync_init+0x72>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    24ae:	6823      	ldr	r3, [r4, #0]
    24b0:	f023 0302 	bic.w	r3, r3, #2
    24b4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    24b6:	69e3      	ldr	r3, [r4, #28]
    24b8:	f013 0f03 	tst.w	r3, #3
    24bc:	d1fb      	bne.n	24b6 <_spi_m_sync_init+0x62>
    24be:	69e3      	ldr	r3, [r4, #28]
    24c0:	f013 0f02 	tst.w	r3, #2
    24c4:	d1fb      	bne.n	24be <_spi_m_sync_init+0x6a>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    24c6:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    24ca:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    24cc:	69e3      	ldr	r3, [r4, #28]
    24ce:	f013 0f03 	tst.w	r3, #3
    24d2:	d1fb      	bne.n	24cc <_spi_m_sync_init+0x78>
    24d4:	69e3      	ldr	r3, [r4, #28]
    24d6:	f013 0f01 	tst.w	r3, #1
    24da:	d1fb      	bne.n	24d4 <_spi_m_sync_init+0x80>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    24dc:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    24de:	682b      	ldr	r3, [r5, #0]
    24e0:	f003 031c 	and.w	r3, r3, #28
    24e4:	2b08      	cmp	r3, #8
    24e6:	d03b      	beq.n	2560 <_spi_m_sync_init+0x10c>
	ASSERT(hw && regs);
    24e8:	f640 1209 	movw	r2, #2313	; 0x909
    24ec:	493c      	ldr	r1, [pc, #240]	; (25e0 <_spi_m_sync_init+0x18c>)
    24ee:	1c20      	adds	r0, r4, #0
    24f0:	bf18      	it	ne
    24f2:	2001      	movne	r0, #1
    24f4:	4b3b      	ldr	r3, [pc, #236]	; (25e4 <_spi_m_sync_init+0x190>)
    24f6:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    24f8:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    24fa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    24fe:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2502:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2504:	69e3      	ldr	r3, [r4, #28]
    2506:	f013 0f03 	tst.w	r3, #3
    250a:	d1fb      	bne.n	2504 <_spi_m_sync_init+0xb0>
	    (regs->ctrlb
    250c:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    250e:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    2512:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    2516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    251a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    251c:	69e3      	ldr	r3, [r4, #28]
    251e:	f013 0f17 	tst.w	r3, #23
    2522:	d1fb      	bne.n	251c <_spi_m_sync_init+0xc8>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    2524:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2526:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2528:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    252a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    252e:	686b      	ldr	r3, [r5, #4]
    2530:	f003 0307 	and.w	r3, r3, #7
    2534:	2b00      	cmp	r3, #0
    2536:	bf0c      	ite	eq
    2538:	2301      	moveq	r3, #1
    253a:	2302      	movne	r3, #2
    253c:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    253e:	89eb      	ldrh	r3, [r5, #14]
    2540:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    2542:	2000      	movs	r0, #0
    2544:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    2546:	2501      	movs	r5, #1
    2548:	e000      	b.n	254c <_spi_m_sync_init+0xf8>
    254a:	2500      	movs	r5, #0
			return &sercomspi_regs[i];
    254c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
    2550:	4b25      	ldr	r3, [pc, #148]	; (25e8 <_spi_m_sync_init+0x194>)
    2552:	441d      	add	r5, r3
	ASSERT(dev && hw);
    2554:	2e00      	cmp	r6, #0
    2556:	d092      	beq.n	247e <_spi_m_sync_init+0x2a>
    2558:	2001      	movs	r0, #1
    255a:	2c00      	cmp	r4, #0
    255c:	d190      	bne.n	2480 <_spi_m_sync_init+0x2c>
    255e:	e78e      	b.n	247e <_spi_m_sync_init+0x2a>
	ASSERT(hw && regs);
    2560:	f640 121d 	movw	r2, #2333	; 0x91d
    2564:	491e      	ldr	r1, [pc, #120]	; (25e0 <_spi_m_sync_init+0x18c>)
    2566:	1c20      	adds	r0, r4, #0
    2568:	bf18      	it	ne
    256a:	2001      	movne	r0, #1
    256c:	4b1d      	ldr	r3, [pc, #116]	; (25e4 <_spi_m_sync_init+0x190>)
    256e:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2570:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    2572:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    2576:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    257a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    257c:	69e3      	ldr	r3, [r4, #28]
    257e:	f013 0f03 	tst.w	r3, #3
    2582:	d1fb      	bne.n	257c <_spi_m_sync_init+0x128>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    2584:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    2586:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    258a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    258e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2592:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2596:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2598:	69e3      	ldr	r3, [r4, #28]
    259a:	f013 0f17 	tst.w	r3, #23
    259e:	d1fb      	bne.n	2598 <_spi_m_sync_init+0x144>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    25a0:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    25a2:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    25a4:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    25a6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    25aa:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    25ac:	2b00      	cmp	r3, #0
    25ae:	d1fc      	bne.n	25aa <_spi_m_sync_init+0x156>
    25b0:	e7bd      	b.n	252e <_spi_m_sync_init+0xda>
		return ERR_INVALID_ARG;
    25b2:	f06f 000c 	mvn.w	r0, #12
    25b6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    25b8:	f640 123f 	movw	r2, #2367	; 0x93f
    25bc:	4908      	ldr	r1, [pc, #32]	; (25e0 <_spi_m_sync_init+0x18c>)
    25be:	2000      	movs	r0, #0
    25c0:	4b08      	ldr	r3, [pc, #32]	; (25e4 <_spi_m_sync_init+0x190>)
    25c2:	4798      	blx	r3
		return ERR_INVALID_ARG;
    25c4:	f06f 000c 	mvn.w	r0, #12
    25c8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    25ca:	f640 123f 	movw	r2, #2367	; 0x93f
    25ce:	4904      	ldr	r1, [pc, #16]	; (25e0 <_spi_m_sync_init+0x18c>)
    25d0:	2001      	movs	r0, #1
    25d2:	4b04      	ldr	r3, [pc, #16]	; (25e4 <_spi_m_sync_init+0x190>)
    25d4:	4798      	blx	r3
		return ERR_INVALID_ARG;
    25d6:	f06f 000c 	mvn.w	r0, #12
    25da:	bd70      	pop	{r4, r5, r6, pc}
    25dc:	00001da9 	.word	0x00001da9
    25e0:	00003628 	.word	0x00003628
    25e4:	0000164d 	.word	0x0000164d
    25e8:	000035f4 	.word	0x000035f4

000025ec <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    25ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    25f0:	4681      	mov	r9, r0
    25f2:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    25f4:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    25f6:	f8d1 8000 	ldr.w	r8, [r1]
    25fa:	684d      	ldr	r5, [r1, #4]
    25fc:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    25fe:	b1a8      	cbz	r0, 262c <_spi_m_sync_trans+0x40>
    2600:	1c20      	adds	r0, r4, #0
    2602:	bf18      	it	ne
    2604:	2001      	movne	r0, #1
    2606:	f640 22a3 	movw	r2, #2723	; 0xaa3
    260a:	492e      	ldr	r1, [pc, #184]	; (26c4 <_spi_m_sync_trans+0xd8>)
    260c:	4b2e      	ldr	r3, [pc, #184]	; (26c8 <_spi_m_sync_trans+0xdc>)
    260e:	4798      	blx	r3
    2610:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    2612:	f013 0f07 	tst.w	r3, #7
    2616:	d134      	bne.n	2682 <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2618:	69e0      	ldr	r0, [r4, #28]
    261a:	f010 0003 	ands.w	r0, r0, #3
    261e:	d1fb      	bne.n	2618 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2620:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    2622:	f013 0f02 	tst.w	r3, #2
    2626:	d030      	beq.n	268a <_spi_m_sync_trans+0x9e>
    2628:	4602      	mov	r2, r0
    262a:	e008      	b.n	263e <_spi_m_sync_trans+0x52>
    262c:	2000      	movs	r0, #0
    262e:	e7ea      	b.n	2606 <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    2630:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    2632:	f013 0f80 	tst.w	r3, #128	; 0x80
    2636:	d112      	bne.n	265e <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2638:	68b3      	ldr	r3, [r6, #8]
    263a:	4283      	cmp	r3, r0
    263c:	d91e      	bls.n	267c <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    263e:	7e23      	ldrb	r3, [r4, #24]
    2640:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    2642:	f013 0f04 	tst.w	r3, #4
    2646:	d024      	beq.n	2692 <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    2648:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    264a:	2d00      	cmp	r5, #0
    264c:	d0f0      	beq.n	2630 <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    264e:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    2650:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    2652:	bf91      	iteee	ls
    2654:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    2656:	0a09      	lsrhi	r1, r1, #8
    2658:	7069      	strbhi	r1, [r5, #1]
    265a:	3502      	addhi	r5, #2
    265c:	e7e8      	b.n	2630 <_spi_m_sync_trans+0x44>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    265e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2662:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2664:	2380      	movs	r3, #128	; 0x80
    2666:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    2668:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    266c:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    266e:	f013 0f03 	tst.w	r3, #3
    2672:	d0fb      	beq.n	266c <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2674:	2303      	movs	r3, #3
    2676:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    2678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    267c:	4293      	cmp	r3, r2
    267e:	d8de      	bhi.n	263e <_spi_m_sync_trans+0x52>
    2680:	e7f4      	b.n	266c <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    2682:	f06f 0003 	mvn.w	r0, #3
    2686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    268a:	f06f 0013 	mvn.w	r0, #19
    268e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    2692:	4290      	cmp	r0, r2
    2694:	d8cd      	bhi.n	2632 <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    2696:	f013 0f01 	tst.w	r3, #1
    269a:	d0ca      	beq.n	2632 <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    269c:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    26a0:	f1b8 0f00 	cmp.w	r8, #0
    26a4:	d00b      	beq.n	26be <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    26a6:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    26aa:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    26ac:	bf91      	iteee	ls
    26ae:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    26b2:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    26b6:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    26ba:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    26be:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    26c0:	62a1      	str	r1, [r4, #40]	; 0x28
    26c2:	e7b6      	b.n	2632 <_spi_m_sync_trans+0x46>
    26c4:	00003628 	.word	0x00003628
    26c8:	0000164d 	.word	0x0000164d

000026cc <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    26cc:	2000      	movs	r0, #0
    26ce:	4770      	bx	lr

000026d0 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    26d0:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    26d2:	7c83      	ldrb	r3, [r0, #18]
    26d4:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    26d8:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    26da:	f002 0107 	and.w	r1, r2, #7
    26de:	2901      	cmp	r1, #1
    26e0:	d00b      	beq.n	26fa <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    26e2:	015a      	lsls	r2, r3, #5
    26e4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    26e8:	2110      	movs	r1, #16
    26ea:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    26ee:	015b      	lsls	r3, r3, #5
    26f0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    26f4:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    26f8:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    26fa:	f012 0f40 	tst.w	r2, #64	; 0x40
    26fe:	d00c      	beq.n	271a <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    2700:	7cc2      	ldrb	r2, [r0, #19]
    2702:	f36f 1286 	bfc	r2, #6, #1
    2706:	74c2      	strb	r2, [r0, #19]
    2708:	015a      	lsls	r2, r3, #5
    270a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    270e:	2180      	movs	r1, #128	; 0x80
    2710:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2714:	2140      	movs	r1, #64	; 0x40
    2716:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    271a:	7cc2      	ldrb	r2, [r0, #19]
    271c:	f36f 02c3 	bfc	r2, #3, #1
    2720:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    2722:	4909      	ldr	r1, [pc, #36]	; (2748 <_usb_d_dev_handle_setup+0x78>)
    2724:	015a      	lsls	r2, r3, #5
    2726:	188c      	adds	r4, r1, r2
    2728:	2500      	movs	r5, #0
    272a:	72a5      	strb	r5, [r4, #10]
    272c:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    272e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    2732:	246f      	movs	r4, #111	; 0x6f
    2734:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2738:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    273c:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    2740:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    2742:	7c80      	ldrb	r0, [r0, #18]
    2744:	4798      	blx	r3
    2746:	bd38      	pop	{r3, r4, r5, pc}
    2748:	20000160 	.word	0x20000160

0000274c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    274c:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    274e:	2320      	movs	r3, #32
    2750:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2754:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2756:	7c83      	ldrb	r3, [r0, #18]
    2758:	f003 030f 	and.w	r3, r3, #15
    275c:	015b      	lsls	r3, r3, #5
    275e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2762:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    2766:	4b03      	ldr	r3, [pc, #12]	; (2774 <_usb_d_dev_handle_stall+0x28>)
    2768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    276a:	6882      	ldr	r2, [r0, #8]
    276c:	2101      	movs	r1, #1
    276e:	7c80      	ldrb	r0, [r0, #18]
    2770:	4798      	blx	r3
    2772:	bd08      	pop	{r3, pc}
    2774:	20000160 	.word	0x20000160

00002778 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    2778:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    277a:	7c84      	ldrb	r4, [r0, #18]
    277c:	2cff      	cmp	r4, #255	; 0xff
    277e:	d003      	beq.n	2788 <_usb_d_dev_trans_done+0x10>
    2780:	7cc3      	ldrb	r3, [r0, #19]
    2782:	f013 0f40 	tst.w	r3, #64	; 0x40
    2786:	d100      	bne.n	278a <_usb_d_dev_trans_done+0x12>
    2788:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    278a:	7cc2      	ldrb	r2, [r0, #19]
    278c:	f36f 1286 	bfc	r2, #6, #1
    2790:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    2792:	4a03      	ldr	r2, [pc, #12]	; (27a0 <_usb_d_dev_trans_done+0x28>)
    2794:	6f15      	ldr	r5, [r2, #112]	; 0x70
    2796:	6882      	ldr	r2, [r0, #8]
    2798:	4620      	mov	r0, r4
    279a:	47a8      	blx	r5
    279c:	e7f4      	b.n	2788 <_usb_d_dev_trans_done+0x10>
    279e:	bf00      	nop
    27a0:	20000160 	.word	0x20000160

000027a4 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    27a4:	b530      	push	{r4, r5, lr}
    27a6:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    27a8:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    27aa:	2425      	movs	r4, #37	; 0x25
    27ac:	f88d 4004 	strb.w	r4, [sp, #4]
    27b0:	244a      	movs	r4, #74	; 0x4a
    27b2:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    27b6:	2bff      	cmp	r3, #255	; 0xff
    27b8:	d01e      	beq.n	27f8 <_usb_d_dev_trans_stop+0x54>
    27ba:	7cc4      	ldrb	r4, [r0, #19]
    27bc:	f014 0f40 	tst.w	r4, #64	; 0x40
    27c0:	d01a      	beq.n	27f8 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    27c2:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    27c6:	b1c9      	cbz	r1, 27fc <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    27c8:	0163      	lsls	r3, r4, #5
    27ca:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    27ce:	2580      	movs	r5, #128	; 0x80
    27d0:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    27d4:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    27d6:	a902      	add	r1, sp, #8
    27d8:	440b      	add	r3, r1
    27da:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    27de:	0163      	lsls	r3, r4, #5
    27e0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    27e4:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    27e8:	0163      	lsls	r3, r4, #5
    27ea:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    27ee:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    27f2:	4611      	mov	r1, r2
    27f4:	4b05      	ldr	r3, [pc, #20]	; (280c <_usb_d_dev_trans_stop+0x68>)
    27f6:	4798      	blx	r3
}
    27f8:	b003      	add	sp, #12
    27fa:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    27fc:	0163      	lsls	r3, r4, #5
    27fe:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2802:	2540      	movs	r5, #64	; 0x40
    2804:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    2808:	e7e4      	b.n	27d4 <_usb_d_dev_trans_stop+0x30>
    280a:	bf00      	nop
    280c:	00002779 	.word	0x00002779

00002810 <_usb_d_dev_handle_trfail>:
{
    2810:	b530      	push	{r4, r5, lr}
    2812:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    2814:	7c83      	ldrb	r3, [r0, #18]
    2816:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    281a:	2204      	movs	r2, #4
    281c:	f88d 2004 	strb.w	r2, [sp, #4]
    2820:	2208      	movs	r2, #8
    2822:	f88d 2005 	strb.w	r2, [sp, #5]
    2826:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    2828:	460c      	mov	r4, r1
    282a:	b391      	cbz	r1, 2892 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    282c:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    2830:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    2834:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    2838:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    283c:	4a32      	ldr	r2, [pc, #200]	; (2908 <_usb_d_dev_handle_trfail+0xf8>)
    283e:	440a      	add	r2, r1
    2840:	7a91      	ldrb	r1, [r2, #10]
    2842:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2844:	2d02      	cmp	r5, #2
    2846:	d02c      	beq.n	28a2 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    2848:	f011 0f02 	tst.w	r1, #2
    284c:	d045      	beq.n	28da <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    284e:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    2850:	7a91      	ldrb	r1, [r2, #10]
    2852:	f36f 0141 	bfc	r1, #1, #1
    2856:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2858:	aa02      	add	r2, sp, #8
    285a:	4422      	add	r2, r4
    285c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2860:	015a      	lsls	r2, r3, #5
    2862:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2866:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    286a:	015b      	lsls	r3, r3, #5
    286c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2870:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    2874:	f005 0307 	and.w	r3, r5, #7
    2878:	2b01      	cmp	r3, #1
    287a:	d143      	bne.n	2904 <_usb_d_dev_handle_trfail+0xf4>
    287c:	7cc3      	ldrb	r3, [r0, #19]
    287e:	f013 0f40 	tst.w	r3, #64	; 0x40
    2882:	d03f      	beq.n	2904 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    2884:	09d9      	lsrs	r1, r3, #7
    2886:	428c      	cmp	r4, r1
    2888:	d03c      	beq.n	2904 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    288a:	2200      	movs	r2, #0
    288c:	4b1f      	ldr	r3, [pc, #124]	; (290c <_usb_d_dev_handle_trfail+0xfc>)
    288e:	4798      	blx	r3
    2890:	e038      	b.n	2904 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2892:	0159      	lsls	r1, r3, #5
    2894:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    2898:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    289c:	f005 0507 	and.w	r5, r5, #7
    28a0:	e7ca      	b.n	2838 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    28a2:	f011 0f01 	tst.w	r1, #1
    28a6:	d0cf      	beq.n	2848 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    28a8:	7a91      	ldrb	r1, [r2, #10]
    28aa:	f36f 0100 	bfc	r1, #0, #1
    28ae:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    28b0:	aa02      	add	r2, sp, #8
    28b2:	4422      	add	r2, r4
    28b4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    28b8:	015a      	lsls	r2, r3, #5
    28ba:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    28be:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    28c2:	015b      	lsls	r3, r3, #5
    28c4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    28c8:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    28cc:	2204      	movs	r2, #4
    28ce:	1c21      	adds	r1, r4, #0
    28d0:	bf18      	it	ne
    28d2:	2101      	movne	r1, #1
    28d4:	4b0d      	ldr	r3, [pc, #52]	; (290c <_usb_d_dev_handle_trfail+0xfc>)
    28d6:	4798      	blx	r3
    28d8:	e014      	b.n	2904 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    28da:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    28de:	4a0a      	ldr	r2, [pc, #40]	; (2908 <_usb_d_dev_handle_trfail+0xf8>)
    28e0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    28e4:	2100      	movs	r1, #0
    28e6:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    28e8:	aa02      	add	r2, sp, #8
    28ea:	4414      	add	r4, r2
    28ec:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    28f0:	015a      	lsls	r2, r3, #5
    28f2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    28f6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    28fa:	015b      	lsls	r3, r3, #5
    28fc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2900:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    2904:	b003      	add	sp, #12
    2906:	bd30      	pop	{r4, r5, pc}
    2908:	20000160 	.word	0x20000160
    290c:	000027a5 	.word	0x000027a5

00002910 <_usb_d_dev_reset_epts>:
{
    2910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2914:	4d0c      	ldr	r5, [pc, #48]	; (2948 <_usb_d_dev_reset_epts+0x38>)
    2916:	f105 0474 	add.w	r4, r5, #116	; 0x74
    291a:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    291e:	f04f 0803 	mov.w	r8, #3
    2922:	4f0a      	ldr	r7, [pc, #40]	; (294c <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    2924:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    2926:	4641      	mov	r1, r8
    2928:	4620      	mov	r0, r4
    292a:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    292c:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    292e:	2300      	movs	r3, #0
    2930:	74e3      	strb	r3, [r4, #19]
    2932:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2934:	42ac      	cmp	r4, r5
    2936:	d1f6      	bne.n	2926 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    2938:	2260      	movs	r2, #96	; 0x60
    293a:	4619      	mov	r1, r3
    293c:	4802      	ldr	r0, [pc, #8]	; (2948 <_usb_d_dev_reset_epts+0x38>)
    293e:	4b04      	ldr	r3, [pc, #16]	; (2950 <_usb_d_dev_reset_epts+0x40>)
    2940:	4798      	blx	r3
    2942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2946:	bf00      	nop
    2948:	20000160 	.word	0x20000160
    294c:	00002779 	.word	0x00002779
    2950:	0000348f 	.word	0x0000348f

00002954 <_usb_d_dev_in_next>:
{
    2954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2958:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    295a:	7c84      	ldrb	r4, [r0, #18]
    295c:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2960:	4688      	mov	r8, r1
    2962:	2900      	cmp	r1, #0
    2964:	f000 809f 	beq.w	2aa6 <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    2968:	4b58      	ldr	r3, [pc, #352]	; (2acc <_usb_d_dev_in_next+0x178>)
    296a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    296e:	6958      	ldr	r0, [r3, #20]
    2970:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2974:	8a2b      	ldrh	r3, [r5, #16]
    2976:	f240 32ff 	movw	r2, #1023	; 0x3ff
    297a:	4293      	cmp	r3, r2
    297c:	f000 808d 	beq.w	2a9a <_usb_d_dev_in_next+0x146>
    2980:	3b01      	subs	r3, #1
    2982:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2984:	7cef      	ldrb	r7, [r5, #19]
    2986:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    298a:	f1b8 0f00 	cmp.w	r8, #0
    298e:	d005      	beq.n	299c <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2990:	0162      	lsls	r2, r4, #5
    2992:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2996:	2302      	movs	r3, #2
    2998:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    299c:	68a9      	ldr	r1, [r5, #8]
    299e:	eb0e 0301 	add.w	r3, lr, r1
    29a2:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    29a4:	686e      	ldr	r6, [r5, #4]
    29a6:	42b3      	cmp	r3, r6
    29a8:	d23f      	bcs.n	2a2a <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    29aa:	1af6      	subs	r6, r6, r3
    29ac:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    29ae:	7cea      	ldrb	r2, [r5, #19]
    29b0:	f012 0f20 	tst.w	r2, #32
    29b4:	d02d      	beq.n	2a12 <_usb_d_dev_in_next+0xbe>
    29b6:	8a2a      	ldrh	r2, [r5, #16]
    29b8:	4296      	cmp	r6, r2
    29ba:	bf28      	it	cs
    29bc:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    29be:	6829      	ldr	r1, [r5, #0]
    29c0:	4632      	mov	r2, r6
    29c2:	4419      	add	r1, r3
    29c4:	68e8      	ldr	r0, [r5, #12]
    29c6:	4b42      	ldr	r3, [pc, #264]	; (2ad0 <_usb_d_dev_in_next+0x17c>)
    29c8:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    29ca:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    29cc:	4b3f      	ldr	r3, [pc, #252]	; (2acc <_usb_d_dev_in_next+0x178>)
    29ce:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    29d2:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    29d4:	4b3d      	ldr	r3, [pc, #244]	; (2acc <_usb_d_dev_in_next+0x178>)
    29d6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    29da:	695a      	ldr	r2, [r3, #20]
    29dc:	f366 020d 	bfi	r2, r6, #0, #14
    29e0:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    29e2:	695a      	ldr	r2, [r3, #20]
    29e4:	f36f 329b 	bfc	r2, #14, #14
    29e8:	615a      	str	r2, [r3, #20]
	if (!isr) {
    29ea:	f1b8 0f00 	cmp.w	r8, #0
    29ee:	d108      	bne.n	2a02 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    29f0:	2f01      	cmp	r7, #1
    29f2:	bf0c      	ite	eq
    29f4:	224e      	moveq	r2, #78	; 0x4e
    29f6:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    29f8:	0163      	lsls	r3, r4, #5
    29fa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    29fe:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2a02:	0164      	lsls	r4, r4, #5
    2a04:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    2a08:	2380      	movs	r3, #128	; 0x80
    2a0a:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    2a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a12:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    2a16:	bf28      	it	cs
    2a18:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2a1c:	6829      	ldr	r1, [r5, #0]
    2a1e:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    2a20:	4a2a      	ldr	r2, [pc, #168]	; (2acc <_usb_d_dev_in_next+0x178>)
    2a22:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    2a26:	6113      	str	r3, [r2, #16]
    2a28:	e7d4      	b.n	29d4 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    2a2a:	7ceb      	ldrb	r3, [r5, #19]
    2a2c:	f013 0f10 	tst.w	r3, #16
    2a30:	d00f      	beq.n	2a52 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    2a32:	7ceb      	ldrb	r3, [r5, #19]
    2a34:	f36f 1304 	bfc	r3, #4, #1
    2a38:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2a3a:	4b24      	ldr	r3, [pc, #144]	; (2acc <_usb_d_dev_in_next+0x178>)
    2a3c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2a40:	695a      	ldr	r2, [r3, #20]
    2a42:	f36f 020d 	bfc	r2, #0, #14
    2a46:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2a48:	695a      	ldr	r2, [r3, #20]
    2a4a:	f36f 329b 	bfc	r2, #14, #14
    2a4e:	615a      	str	r2, [r3, #20]
    2a50:	e7cb      	b.n	29ea <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    2a52:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2a54:	ea4f 1444 	mov.w	r4, r4, lsl #5
    2a58:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    2a5c:	bf0c      	ite	eq
    2a5e:	234b      	moveq	r3, #75	; 0x4b
    2a60:	234a      	movne	r3, #74	; 0x4a
    2a62:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    2a66:	8a2a      	ldrh	r2, [r5, #16]
    2a68:	ea00 030e 	and.w	r3, r0, lr
    2a6c:	429a      	cmp	r2, r3
    2a6e:	d005      	beq.n	2a7c <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2a70:	2100      	movs	r1, #0
    2a72:	4628      	mov	r0, r5
    2a74:	4b17      	ldr	r3, [pc, #92]	; (2ad4 <_usb_d_dev_in_next+0x180>)
    2a76:	4798      	blx	r3
	return;
    2a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    2a7c:	7ceb      	ldrb	r3, [r5, #19]
    2a7e:	f36f 1386 	bfc	r3, #6, #1
    2a82:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    2a84:	4b11      	ldr	r3, [pc, #68]	; (2acc <_usb_d_dev_in_next+0x178>)
    2a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    2a88:	68a9      	ldr	r1, [r5, #8]
    2a8a:	7ca8      	ldrb	r0, [r5, #18]
    2a8c:	4798      	blx	r3
    2a8e:	b9d0      	cbnz	r0, 2ac6 <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    2a90:	7ceb      	ldrb	r3, [r5, #19]
    2a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2a96:	74eb      	strb	r3, [r5, #19]
    2a98:	e7ea      	b.n	2a70 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2a9a:	7cef      	ldrb	r7, [r5, #19]
    2a9c:	f007 0707 	and.w	r7, r7, #7
    2aa0:	f240 30ff 	movw	r0, #1023	; 0x3ff
    2aa4:	e774      	b.n	2990 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2aa6:	8a03      	ldrh	r3, [r0, #16]
    2aa8:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2aac:	4293      	cmp	r3, r2
    2aae:	d107      	bne.n	2ac0 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2ab0:	7cef      	ldrb	r7, [r5, #19]
    2ab2:	f007 0707 	and.w	r7, r7, #7
    2ab6:	f04f 0e00 	mov.w	lr, #0
    2aba:	f240 30ff 	movw	r0, #1023	; 0x3ff
    2abe:	e76d      	b.n	299c <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2ac0:	f04f 0e00 	mov.w	lr, #0
    2ac4:	e75c      	b.n	2980 <_usb_d_dev_in_next+0x2c>
    2ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2aca:	bf00      	nop
    2acc:	20000160 	.word	0x20000160
    2ad0:	00003479 	.word	0x00003479
    2ad4:	00002779 	.word	0x00002779

00002ad8 <_usb_d_dev_out_next>:
{
    2ad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2adc:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    2ade:	7c85      	ldrb	r5, [r0, #18]
    2ae0:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    2ae4:	4689      	mov	r9, r1
    2ae6:	2900      	cmp	r1, #0
    2ae8:	d056      	beq.n	2b98 <_usb_d_dev_out_next+0xc0>
    2aea:	4b74      	ldr	r3, [pc, #464]	; (2cbc <_usb_d_dev_out_next+0x1e4>)
    2aec:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2af0:	685a      	ldr	r2, [r3, #4]
    2af2:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    2af6:	685f      	ldr	r7, [r3, #4]
    2af8:	f3c7 070d 	ubfx	r7, r7, #0, #14
    2afc:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2afe:	8a06      	ldrh	r6, [r0, #16]
    2b00:	f240 33ff 	movw	r3, #1023	; 0x3ff
    2b04:	429e      	cmp	r6, r3
    2b06:	f000 80ba 	beq.w	2c7e <_usb_d_dev_out_next+0x1a6>
    2b0a:	3e01      	subs	r6, #1
    2b0c:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    2b0e:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2b12:	f894 8013 	ldrb.w	r8, [r4, #19]
    2b16:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    2b1a:	f1b9 0f00 	cmp.w	r9, #0
    2b1e:	d005      	beq.n	2b2c <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2b20:	016b      	lsls	r3, r5, #5
    2b22:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2b26:	2201      	movs	r2, #1
    2b28:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    2b2c:	7ce3      	ldrb	r3, [r4, #19]
    2b2e:	f013 0f20 	tst.w	r3, #32
    2b32:	d00d      	beq.n	2b50 <_usb_d_dev_out_next+0x78>
    2b34:	6862      	ldr	r2, [r4, #4]
    2b36:	2a00      	cmp	r2, #0
    2b38:	d037      	beq.n	2baa <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    2b3a:	68a0      	ldr	r0, [r4, #8]
    2b3c:	1a12      	subs	r2, r2, r0
    2b3e:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    2b40:	6823      	ldr	r3, [r4, #0]
    2b42:	42ba      	cmp	r2, r7
    2b44:	bf28      	it	cs
    2b46:	463a      	movcs	r2, r7
    2b48:	68e1      	ldr	r1, [r4, #12]
    2b4a:	4418      	add	r0, r3
    2b4c:	4b5c      	ldr	r3, [pc, #368]	; (2cc0 <_usb_d_dev_out_next+0x1e8>)
    2b4e:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2b50:	6863      	ldr	r3, [r4, #4]
    2b52:	b353      	cbz	r3, 2baa <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    2b54:	f1b9 0f00 	cmp.w	r9, #0
    2b58:	d040      	beq.n	2bdc <_usb_d_dev_out_next+0x104>
    2b5a:	8a22      	ldrh	r2, [r4, #16]
    2b5c:	42ba      	cmp	r2, r7
    2b5e:	d93d      	bls.n	2bdc <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    2b60:	7ce3      	ldrb	r3, [r4, #19]
    2b62:	f36f 1304 	bfc	r3, #4, #1
    2b66:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    2b68:	68a3      	ldr	r3, [r4, #8]
    2b6a:	445b      	add	r3, fp
    2b6c:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    2b6e:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2b72:	ea4f 1345 	mov.w	r3, r5, lsl #5
    2b76:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2b7a:	bf0c      	ite	eq
    2b7c:	222d      	moveq	r2, #45	; 0x2d
    2b7e:	2225      	movne	r2, #37	; 0x25
    2b80:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    2b84:	b915      	cbnz	r5, 2b8c <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2b86:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    2b88:	4b4c      	ldr	r3, [pc, #304]	; (2cbc <_usb_d_dev_out_next+0x1e4>)
    2b8a:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2b8c:	2100      	movs	r1, #0
    2b8e:	4620      	mov	r0, r4
    2b90:	4b4c      	ldr	r3, [pc, #304]	; (2cc4 <_usb_d_dev_out_next+0x1ec>)
    2b92:	4798      	blx	r3
	return;
    2b94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2b98:	8a06      	ldrh	r6, [r0, #16]
    2b9a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    2b9e:	429e      	cmp	r6, r3
    2ba0:	d07b      	beq.n	2c9a <_usb_d_dev_out_next+0x1c2>
    2ba2:	f04f 0b00 	mov.w	fp, #0
    2ba6:	46da      	mov	sl, fp
    2ba8:	e7af      	b.n	2b0a <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2baa:	7ce3      	ldrb	r3, [r4, #19]
    2bac:	f013 0f10 	tst.w	r3, #16
    2bb0:	d06c      	beq.n	2c8c <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    2bb2:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    2bb4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2bb8:	f043 0320 	orr.w	r3, r3, #32
    2bbc:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2bbe:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2bc0:	493e      	ldr	r1, [pc, #248]	; (2cbc <_usb_d_dev_out_next+0x1e4>)
    2bc2:	016a      	lsls	r2, r5, #5
    2bc4:	188b      	adds	r3, r1, r2
    2bc6:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2bc8:	8a21      	ldrh	r1, [r4, #16]
    2bca:	685a      	ldr	r2, [r3, #4]
    2bcc:	f361 329b 	bfi	r2, r1, #14, #14
    2bd0:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2bd2:	685a      	ldr	r2, [r3, #4]
    2bd4:	f36f 020d 	bfc	r2, #0, #14
    2bd8:	605a      	str	r2, [r3, #4]
    2bda:	e01d      	b.n	2c18 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    2bdc:	68a2      	ldr	r2, [r4, #8]
    2bde:	4452      	add	r2, sl
    2be0:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    2be2:	4293      	cmp	r3, r2
    2be4:	d9c3      	bls.n	2b6e <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    2be6:	1a9b      	subs	r3, r3, r2
    2be8:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    2bea:	7ce1      	ldrb	r1, [r4, #19]
    2bec:	f011 0f20 	tst.w	r1, #32
    2bf0:	d026      	beq.n	2c40 <_usb_d_dev_out_next+0x168>
    2bf2:	8a22      	ldrh	r2, [r4, #16]
    2bf4:	4293      	cmp	r3, r2
    2bf6:	bf28      	it	cs
    2bf8:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2bfa:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2bfc:	016a      	lsls	r2, r5, #5
    2bfe:	492f      	ldr	r1, [pc, #188]	; (2cbc <_usb_d_dev_out_next+0x1e4>)
    2c00:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2c02:	4a2e      	ldr	r2, [pc, #184]	; (2cbc <_usb_d_dev_out_next+0x1e4>)
    2c04:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    2c08:	6851      	ldr	r1, [r2, #4]
    2c0a:	f363 319b 	bfi	r1, r3, #14, #14
    2c0e:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2c10:	6853      	ldr	r3, [r2, #4]
    2c12:	f36f 030d 	bfc	r3, #0, #14
    2c16:	6053      	str	r3, [r2, #4]
	if (!isr) {
    2c18:	f1b9 0f00 	cmp.w	r9, #0
    2c1c:	d108      	bne.n	2c30 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    2c1e:	f1b8 0f01 	cmp.w	r8, #1
    2c22:	d025      	beq.n	2c70 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    2c24:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2c26:	016b      	lsls	r3, r5, #5
    2c28:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2c2c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2c30:	016d      	lsls	r5, r5, #5
    2c32:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    2c36:	2340      	movs	r3, #64	; 0x40
    2c38:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    2c3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    2c40:	8a21      	ldrh	r1, [r4, #16]
    2c42:	428b      	cmp	r3, r1
    2c44:	d90a      	bls.n	2c5c <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    2c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    2c4a:	d80e      	bhi.n	2c6a <_usb_d_dev_out_next+0x192>
    2c4c:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2c50:	6821      	ldr	r1, [r4, #0]
    2c52:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    2c54:	0169      	lsls	r1, r5, #5
    2c56:	4819      	ldr	r0, [pc, #100]	; (2cbc <_usb_d_dev_out_next+0x1e4>)
    2c58:	5042      	str	r2, [r0, r1]
    2c5a:	e7d2      	b.n	2c02 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    2c5c:	428b      	cmp	r3, r1
    2c5e:	d2f7      	bcs.n	2c50 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    2c60:	7ce1      	ldrb	r1, [r4, #19]
    2c62:	f041 0120 	orr.w	r1, r1, #32
    2c66:	74e1      	strb	r1, [r4, #19]
    2c68:	e7f2      	b.n	2c50 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    2c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2c6e:	e7ef      	b.n	2c50 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    2c70:	4b12      	ldr	r3, [pc, #72]	; (2cbc <_usb_d_dev_out_next+0x1e4>)
    2c72:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2c76:	2200      	movs	r2, #0
    2c78:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    2c7a:	222d      	movs	r2, #45	; 0x2d
    2c7c:	e7d3      	b.n	2c26 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    2c7e:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2c82:	f890 8013 	ldrb.w	r8, [r0, #19]
    2c86:	f008 0807 	and.w	r8, r8, #7
    2c8a:	e749      	b.n	2b20 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    2c8c:	f1b9 0f00 	cmp.w	r9, #0
    2c90:	d10b      	bne.n	2caa <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    2c92:	68a3      	ldr	r3, [r4, #8]
    2c94:	4453      	add	r3, sl
    2c96:	60a3      	str	r3, [r4, #8]
    2c98:	e769      	b.n	2b6e <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2c9a:	f890 8013 	ldrb.w	r8, [r0, #19]
    2c9e:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    2ca2:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2ca4:	46bb      	mov	fp, r7
    2ca6:	46ba      	mov	sl, r7
    2ca8:	e740      	b.n	2b2c <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    2caa:	8a23      	ldrh	r3, [r4, #16]
    2cac:	42bb      	cmp	r3, r7
    2cae:	f63f af57 	bhi.w	2b60 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    2cb2:	68a3      	ldr	r3, [r4, #8]
    2cb4:	4453      	add	r3, sl
    2cb6:	60a3      	str	r3, [r4, #8]
    2cb8:	e759      	b.n	2b6e <_usb_d_dev_out_next+0x96>
    2cba:	bf00      	nop
    2cbc:	20000160 	.word	0x20000160
    2cc0:	00003479 	.word	0x00003479
    2cc4:	00002779 	.word	0x00002779

00002cc8 <_usb_d_dev_handler>:
{
    2cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    2ccc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2cd0:	8c1e      	ldrh	r6, [r3, #32]
    2cd2:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    2cd4:	b146      	cbz	r6, 2ce8 <_usb_d_dev_handler+0x20>
    2cd6:	4d91      	ldr	r5, [pc, #580]	; (2f1c <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    2cd8:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2cda:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    2cde:	f8df 9258 	ldr.w	r9, [pc, #600]	; 2f38 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    2ce2:	f8df 8258 	ldr.w	r8, [pc, #600]	; 2f3c <_usb_d_dev_handler+0x274>
    2ce6:	e0d3      	b.n	2e90 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    2ce8:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    2cea:	8b1b      	ldrh	r3, [r3, #24]
    2cec:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    2cee:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    2cf0:	f013 0f04 	tst.w	r3, #4
    2cf4:	d11d      	bne.n	2d32 <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    2cf6:	f413 7f00 	tst.w	r3, #512	; 0x200
    2cfa:	d123      	bne.n	2d44 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    2cfc:	f013 0f80 	tst.w	r3, #128	; 0x80
    2d00:	d147      	bne.n	2d92 <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    2d02:	f013 0f70 	tst.w	r3, #112	; 0x70
    2d06:	d14f      	bne.n	2da8 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    2d08:	f013 0f08 	tst.w	r3, #8
    2d0c:	d16e      	bne.n	2dec <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    2d0e:	f013 0f01 	tst.w	r3, #1
    2d12:	d0e0      	beq.n	2cd6 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2d14:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2d18:	f240 2201 	movw	r2, #513	; 0x201
    2d1c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2d1e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2d20:	2270      	movs	r2, #112	; 0x70
    2d22:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    2d24:	4b7e      	ldr	r3, [pc, #504]	; (2f20 <_usb_d_dev_handler+0x258>)
    2d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2d28:	2100      	movs	r1, #0
    2d2a:	2004      	movs	r0, #4
    2d2c:	4798      	blx	r3
    2d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2d32:	2204      	movs	r2, #4
    2d34:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2d38:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    2d3a:	4b79      	ldr	r3, [pc, #484]	; (2f20 <_usb_d_dev_handler+0x258>)
    2d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2d3e:	4798      	blx	r3
    2d40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2d44:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2d48:	f240 2201 	movw	r2, #513	; 0x201
    2d4c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2d4e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2d50:	2270      	movs	r2, #112	; 0x70
    2d52:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2d54:	4b72      	ldr	r3, [pc, #456]	; (2f20 <_usb_d_dev_handler+0x258>)
    2d56:	891b      	ldrh	r3, [r3, #8]
    2d58:	f003 030f 	and.w	r3, r3, #15
    2d5c:	2b03      	cmp	r3, #3
    2d5e:	d00e      	beq.n	2d7e <_usb_d_dev_handler+0xb6>
    2d60:	4b6f      	ldr	r3, [pc, #444]	; (2f20 <_usb_d_dev_handler+0x258>)
    2d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2d64:	f003 030f 	and.w	r3, r3, #15
    2d68:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2d6a:	bf08      	it	eq
    2d6c:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2d6e:	d007      	beq.n	2d80 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    2d70:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    2d72:	4b6b      	ldr	r3, [pc, #428]	; (2f20 <_usb_d_dev_handler+0x258>)
    2d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2d76:	2003      	movs	r0, #3
    2d78:	4798      	blx	r3
    2d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2d7e:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    2d80:	4b67      	ldr	r3, [pc, #412]	; (2f20 <_usb_d_dev_handler+0x258>)
    2d82:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    2d86:	8919      	ldrh	r1, [r3, #8]
    2d88:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    2d8c:	2200      	movs	r2, #0
    2d8e:	811a      	strh	r2, [r3, #8]
    2d90:	e7ef      	b.n	2d72 <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2d92:	2280      	movs	r2, #128	; 0x80
    2d94:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2d98:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    2d9a:	4b61      	ldr	r3, [pc, #388]	; (2f20 <_usb_d_dev_handler+0x258>)
    2d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2d9e:	2100      	movs	r1, #0
    2da0:	2005      	movs	r0, #5
    2da2:	4798      	blx	r3
    2da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2da8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2dac:	2270      	movs	r2, #112	; 0x70
    2dae:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2db0:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2db2:	f240 2201 	movw	r2, #513	; 0x201
    2db6:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    2db8:	4b5a      	ldr	r3, [pc, #360]	; (2f24 <_usb_d_dev_handler+0x25c>)
    2dba:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    2dbe:	f013 0f01 	tst.w	r3, #1
    2dc2:	d00d      	beq.n	2de0 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2dc4:	4a57      	ldr	r2, [pc, #348]	; (2f24 <_usb_d_dev_handler+0x25c>)
    2dc6:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    2dc8:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    2dcc:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2dd0:	d1f9      	bne.n	2dc6 <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    2dd2:	4b53      	ldr	r3, [pc, #332]	; (2f20 <_usb_d_dev_handler+0x258>)
    2dd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2dd6:	2100      	movs	r1, #0
    2dd8:	2002      	movs	r0, #2
    2dda:	4798      	blx	r3
    2ddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2de0:	4a50      	ldr	r2, [pc, #320]	; (2f24 <_usb_d_dev_handler+0x25c>)
    2de2:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    2de4:	f413 7f80 	tst.w	r3, #256	; 0x100
    2de8:	d0fb      	beq.n	2de2 <_usb_d_dev_handler+0x11a>
    2dea:	e7f2      	b.n	2dd2 <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2dec:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2df0:	2400      	movs	r4, #0
    2df2:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2df6:	2208      	movs	r2, #8
    2df8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2dfa:	2270      	movs	r2, #112	; 0x70
    2dfc:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2dfe:	f240 2201 	movw	r2, #513	; 0x201
    2e02:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    2e04:	4b48      	ldr	r3, [pc, #288]	; (2f28 <_usb_d_dev_handler+0x260>)
    2e06:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    2e08:	4b45      	ldr	r3, [pc, #276]	; (2f20 <_usb_d_dev_handler+0x258>)
    2e0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2e0c:	4621      	mov	r1, r4
    2e0e:	2001      	movs	r0, #1
    2e10:	4798      	blx	r3
    2e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2e16:	f011 0f10 	tst.w	r1, #16
    2e1a:	d109      	bne.n	2e30 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2e1c:	f011 0f40 	tst.w	r1, #64	; 0x40
    2e20:	d108      	bne.n	2e34 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2e22:	f011 0f20 	tst.w	r1, #32
    2e26:	d02f      	beq.n	2e88 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    2e28:	2100      	movs	r1, #0
    2e2a:	4b40      	ldr	r3, [pc, #256]	; (2f2c <_usb_d_dev_handler+0x264>)
    2e2c:	4798      	blx	r3
    2e2e:	e02b      	b.n	2e88 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    2e30:	47c8      	blx	r9
    2e32:	e029      	b.n	2e88 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    2e34:	2101      	movs	r1, #1
    2e36:	4b3d      	ldr	r3, [pc, #244]	; (2f2c <_usb_d_dev_handler+0x264>)
    2e38:	4798      	blx	r3
    2e3a:	e025      	b.n	2e88 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2e3c:	f011 0f40 	tst.w	r1, #64	; 0x40
    2e40:	d111      	bne.n	2e66 <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2e42:	f011 0f08 	tst.w	r1, #8
    2e46:	d112      	bne.n	2e6e <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2e48:	f011 0f02 	tst.w	r1, #2
    2e4c:	d112      	bne.n	2e74 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2e4e:	f003 0307 	and.w	r3, r3, #7
    2e52:	2b01      	cmp	r3, #1
    2e54:	d118      	bne.n	2e88 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2e56:	f011 0f04 	tst.w	r1, #4
    2e5a:	d10f      	bne.n	2e7c <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2e5c:	f011 0f10 	tst.w	r1, #16
    2e60:	d012      	beq.n	2e88 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    2e62:	47c8      	blx	r9
    2e64:	e010      	b.n	2e88 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    2e66:	2101      	movs	r1, #1
    2e68:	4b30      	ldr	r3, [pc, #192]	; (2f2c <_usb_d_dev_handler+0x264>)
    2e6a:	4798      	blx	r3
    2e6c:	e00c      	b.n	2e88 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    2e6e:	2101      	movs	r1, #1
    2e70:	47c0      	blx	r8
    2e72:	e009      	b.n	2e88 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    2e74:	2101      	movs	r1, #1
    2e76:	4b2e      	ldr	r3, [pc, #184]	; (2f30 <_usb_d_dev_handler+0x268>)
    2e78:	4798      	blx	r3
    2e7a:	e005      	b.n	2e88 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    2e7c:	2100      	movs	r1, #0
    2e7e:	47c0      	blx	r8
    2e80:	e002      	b.n	2e88 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    2e82:	2100      	movs	r1, #0
    2e84:	4b29      	ldr	r3, [pc, #164]	; (2f2c <_usb_d_dev_handler+0x264>)
    2e86:	4798      	blx	r3
    2e88:	3401      	adds	r4, #1
    2e8a:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2e8c:	2c09      	cmp	r4, #9
    2e8e:	d042      	beq.n	2f16 <_usb_d_dev_handler+0x24e>
    2e90:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    2e92:	7cab      	ldrb	r3, [r5, #18]
    2e94:	2bff      	cmp	r3, #255	; 0xff
    2e96:	d0f7      	beq.n	2e88 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    2e98:	f003 030f 	and.w	r3, r3, #15
    2e9c:	2101      	movs	r1, #1
    2e9e:	4099      	lsls	r1, r3
    2ea0:	4231      	tst	r1, r6
    2ea2:	d0f1      	beq.n	2e88 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    2ea4:	0159      	lsls	r1, r3, #5
    2ea6:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    2eaa:	f501 7180 	add.w	r1, r1, #256	; 0x100
    2eae:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    2eb0:	015b      	lsls	r3, r3, #5
    2eb2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2eb6:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    2eba:	4019      	ands	r1, r3
    2ebc:	d0e4      	beq.n	2e88 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2ebe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    2ec2:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    2ec6:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    2eca:	f003 0247 	and.w	r2, r3, #71	; 0x47
    2ece:	2a01      	cmp	r2, #1
    2ed0:	d0a1      	beq.n	2e16 <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    2ed2:	f013 0f80 	tst.w	r3, #128	; 0x80
    2ed6:	d1b1      	bne.n	2e3c <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2ed8:	f011 0f20 	tst.w	r1, #32
    2edc:	d1d1      	bne.n	2e82 <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2ede:	f011 0f04 	tst.w	r1, #4
    2ee2:	d10e      	bne.n	2f02 <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2ee4:	f011 0f01 	tst.w	r1, #1
    2ee8:	d10e      	bne.n	2f08 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2eea:	f003 0307 	and.w	r3, r3, #7
    2eee:	2b01      	cmp	r3, #1
    2ef0:	d1ca      	bne.n	2e88 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2ef2:	f011 0f08 	tst.w	r1, #8
    2ef6:	d10b      	bne.n	2f10 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2ef8:	f011 0f10 	tst.w	r1, #16
    2efc:	d0c4      	beq.n	2e88 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    2efe:	47c8      	blx	r9
    2f00:	e7c2      	b.n	2e88 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    2f02:	2100      	movs	r1, #0
    2f04:	47c0      	blx	r8
    2f06:	e7bf      	b.n	2e88 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    2f08:	2101      	movs	r1, #1
    2f0a:	4b0a      	ldr	r3, [pc, #40]	; (2f34 <_usb_d_dev_handler+0x26c>)
    2f0c:	4798      	blx	r3
    2f0e:	e7bb      	b.n	2e88 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    2f10:	2101      	movs	r1, #1
    2f12:	47c0      	blx	r8
    2f14:	e7b8      	b.n	2e88 <_usb_d_dev_handler+0x1c0>
    2f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2f1a:	bf00      	nop
    2f1c:	200001d4 	.word	0x200001d4
    2f20:	20000160 	.word	0x20000160
    2f24:	40001000 	.word	0x40001000
    2f28:	00002911 	.word	0x00002911
    2f2c:	0000274d 	.word	0x0000274d
    2f30:	00002955 	.word	0x00002955
    2f34:	00002ad9 	.word	0x00002ad9
    2f38:	000026d1 	.word	0x000026d1
    2f3c:	00002811 	.word	0x00002811

00002f40 <_usb_d_dev_init>:
{
    2f40:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    2f42:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2f46:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    2f48:	f013 0f01 	tst.w	r3, #1
    2f4c:	d124      	bne.n	2f98 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2f4e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2f52:	7893      	ldrb	r3, [r2, #2]
    2f54:	f013 0f03 	tst.w	r3, #3
    2f58:	d1fb      	bne.n	2f52 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    2f5a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2f5e:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    2f60:	f013 0f02 	tst.w	r3, #2
    2f64:	d00f      	beq.n	2f86 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    2f66:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2f6a:	7813      	ldrb	r3, [r2, #0]
    2f6c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2f70:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2f72:	7893      	ldrb	r3, [r2, #2]
    2f74:	f013 0f03 	tst.w	r3, #3
    2f78:	d1fb      	bne.n	2f72 <_usb_d_dev_init+0x32>
    2f7a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2f7e:	7893      	ldrb	r3, [r2, #2]
    2f80:	f013 0f02 	tst.w	r3, #2
    2f84:	d1fb      	bne.n	2f7e <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2f86:	2201      	movs	r2, #1
    2f88:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2f8c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2f8e:	461a      	mov	r2, r3
    2f90:	7893      	ldrb	r3, [r2, #2]
    2f92:	f013 0f03 	tst.w	r3, #3
    2f96:	d1fb      	bne.n	2f90 <_usb_d_dev_init+0x50>
    2f98:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2f9c:	7893      	ldrb	r3, [r2, #2]
    2f9e:	f013 0f01 	tst.w	r3, #1
    2fa2:	d1fb      	bne.n	2f9c <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    2fa4:	4b21      	ldr	r3, [pc, #132]	; (302c <_usb_d_dev_init+0xec>)
    2fa6:	4a22      	ldr	r2, [pc, #136]	; (3030 <_usb_d_dev_init+0xf0>)
    2fa8:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    2faa:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    2fac:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    2fae:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    2fb0:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    2fb2:	4b20      	ldr	r3, [pc, #128]	; (3034 <_usb_d_dev_init+0xf4>)
    2fb4:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    2fb6:	4b20      	ldr	r3, [pc, #128]	; (3038 <_usb_d_dev_init+0xf8>)
    2fb8:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    2fba:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    2fbe:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    2fc2:	f011 011f 	ands.w	r1, r1, #31
    2fc6:	d02b      	beq.n	3020 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    2fc8:	291f      	cmp	r1, #31
    2fca:	bf08      	it	eq
    2fcc:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    2fce:	b34b      	cbz	r3, 3024 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    2fd0:	2b1f      	cmp	r3, #31
    2fd2:	bf08      	it	eq
    2fd4:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    2fd6:	b33a      	cbz	r2, 3028 <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    2fd8:	2a07      	cmp	r2, #7
    2fda:	bf08      	it	eq
    2fdc:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    2fde:	f003 031f 	and.w	r3, r3, #31
    2fe2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    2fe6:	0312      	lsls	r2, r2, #12
    2fe8:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    2fec:	4313      	orrs	r3, r2
    2fee:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2ff2:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    2ff4:	78d3      	ldrb	r3, [r2, #3]
    2ff6:	f043 0303 	orr.w	r3, r3, #3
    2ffa:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    2ffc:	78d3      	ldrb	r3, [r2, #3]
    2ffe:	f043 030c 	orr.w	r3, r3, #12
    3002:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3004:	2304      	movs	r3, #4
    3006:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3008:	7893      	ldrb	r3, [r2, #2]
    300a:	f013 0f03 	tst.w	r3, #3
    300e:	d1fb      	bne.n	3008 <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    3010:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3014:	4a05      	ldr	r2, [pc, #20]	; (302c <_usb_d_dev_init+0xec>)
    3016:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    3018:	2201      	movs	r2, #1
    301a:	811a      	strh	r2, [r3, #8]
}
    301c:	2000      	movs	r0, #0
    301e:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    3020:	2109      	movs	r1, #9
    3022:	e7d4      	b.n	2fce <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    3024:	2319      	movs	r3, #25
    3026:	e7d6      	b.n	2fd6 <_usb_d_dev_init+0x96>
		pad_trim = 6;
    3028:	2206      	movs	r2, #6
    302a:	e7d8      	b.n	2fde <_usb_d_dev_init+0x9e>
    302c:	20000160 	.word	0x20000160
    3030:	000026cd 	.word	0x000026cd
    3034:	00002911 	.word	0x00002911
    3038:	00800084 	.word	0x00800084

0000303c <_usb_d_dev_ep_stall>:
{
    303c:	b470      	push	{r4, r5, r6}
    303e:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    3040:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3042:	f010 000f 	ands.w	r0, r0, #15
    3046:	d008      	beq.n	305a <_usb_d_dev_ep_stall+0x1e>
    3048:	2b00      	cmp	r3, #0
    304a:	bfb4      	ite	lt
    304c:	1c83      	addlt	r3, r0, #2
    304e:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    3050:	2802      	cmp	r0, #2
    3052:	d903      	bls.n	305c <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    3054:	f06f 0011 	mvn.w	r0, #17
    3058:	e018      	b.n	308c <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    305a:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    305c:	2901      	cmp	r1, #1
    305e:	d017      	beq.n	3090 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    3060:	2900      	cmp	r1, #0
    3062:	d03a      	beq.n	30da <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3064:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3068:	4a45      	ldr	r2, [pc, #276]	; (3180 <_usb_d_dev_ep_stall+0x144>)
    306a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    306e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3072:	f003 030f 	and.w	r3, r3, #15
    3076:	015b      	lsls	r3, r3, #5
    3078:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    307c:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3080:	2310      	movs	r3, #16
    3082:	40a3      	lsls	r3, r4
    3084:	421a      	tst	r2, r3
    3086:	bf14      	ite	ne
    3088:	2001      	movne	r0, #1
    308a:	2000      	moveq	r0, #0
}
    308c:	bc70      	pop	{r4, r5, r6}
    308e:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3090:	2510      	movs	r5, #16
    3092:	40a5      	lsls	r5, r4
    3094:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3096:	493a      	ldr	r1, [pc, #232]	; (3180 <_usb_d_dev_ep_stall+0x144>)
    3098:	009e      	lsls	r6, r3, #2
    309a:	18f2      	adds	r2, r6, r3
    309c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    30a0:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    30a4:	f002 020f 	and.w	r2, r2, #15
    30a8:	0150      	lsls	r0, r2, #5
    30aa:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    30ae:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    30b2:	2020      	movs	r0, #32
    30b4:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    30b8:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    30ba:	0152      	lsls	r2, r2, #5
    30bc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    30c0:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    30c4:	4433      	add	r3, r6
    30c6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    30ca:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    30ce:	f042 0208 	orr.w	r2, r2, #8
    30d2:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    30d6:	2000      	movs	r0, #0
    30d8:	e7d8      	b.n	308c <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    30da:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    30de:	4928      	ldr	r1, [pc, #160]	; (3180 <_usb_d_dev_ep_stall+0x144>)
    30e0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    30e4:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    30e8:	f002 020f 	and.w	r2, r2, #15
    30ec:	0151      	lsls	r1, r2, #5
    30ee:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    30f2:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    30f6:	2010      	movs	r0, #16
    30f8:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    30fa:	4205      	tst	r5, r0
    30fc:	d03c      	beq.n	3178 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    30fe:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3100:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3104:	2020      	movs	r0, #32
    3106:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    3108:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    310a:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    310e:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    3112:	4202      	tst	r2, r0
    3114:	d007      	beq.n	3126 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3116:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    311a:	2201      	movs	r2, #1
    311c:	fa02 f404 	lsl.w	r4, r2, r4
    3120:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3122:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3126:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    312a:	4815      	ldr	r0, [pc, #84]	; (3180 <_usb_d_dev_ep_stall+0x144>)
    312c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    3130:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    3134:	f002 0207 	and.w	r2, r2, #7
    3138:	2a01      	cmp	r2, #1
    313a:	d00c      	beq.n	3156 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    313c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3140:	4a0f      	ldr	r2, [pc, #60]	; (3180 <_usb_d_dev_ep_stall+0x144>)
    3142:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3146:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    314a:	f36f 02c3 	bfc	r2, #3, #1
    314e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3152:	2000      	movs	r0, #0
    3154:	e79a      	b.n	308c <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3156:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    315a:	f012 0f30 	tst.w	r2, #48	; 0x30
    315e:	d10d      	bne.n	317c <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    3160:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3164:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    3168:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    316c:	f36f 02c3 	bfc	r2, #3, #1
    3170:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3174:	2000      	movs	r0, #0
    3176:	e789      	b.n	308c <_usb_d_dev_ep_stall+0x50>
    3178:	2000      	movs	r0, #0
    317a:	e787      	b.n	308c <_usb_d_dev_ep_stall+0x50>
    317c:	2000      	movs	r0, #0
    317e:	e785      	b.n	308c <_usb_d_dev_ep_stall+0x50>
    3180:	20000160 	.word	0x20000160

00003184 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    3184:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    3186:	f000 040f 	and.w	r4, r0, #15
    318a:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    318c:	4a14      	ldr	r2, [pc, #80]	; (31e0 <_usb_d_dev_ep_read_req+0x5c>)
    318e:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    3190:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    3192:	6840      	ldr	r0, [r0, #4]
    3194:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    3198:	2c02      	cmp	r4, #2
    319a:	d817      	bhi.n	31cc <_usb_d_dev_ep_read_req+0x48>
    319c:	b1c9      	cbz	r1, 31d2 <_usb_d_dev_ep_read_req+0x4e>
    319e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    31a2:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    31a6:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    31a8:	2a11      	cmp	r2, #17
    31aa:	d115      	bne.n	31d8 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    31ac:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    31b0:	f012 0f10 	tst.w	r2, #16
    31b4:	d102      	bne.n	31bc <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    31b6:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    31b8:	bc30      	pop	{r4, r5}
    31ba:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    31bc:	682c      	ldr	r4, [r5, #0]
    31be:	686a      	ldr	r2, [r5, #4]
    31c0:	600c      	str	r4, [r1, #0]
    31c2:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    31c4:	2210      	movs	r2, #16
    31c6:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    31ca:	e7f5      	b.n	31b8 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    31cc:	f06f 0011 	mvn.w	r0, #17
    31d0:	e7f2      	b.n	31b8 <_usb_d_dev_ep_read_req+0x34>
    31d2:	f06f 0011 	mvn.w	r0, #17
    31d6:	e7ef      	b.n	31b8 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    31d8:	f06f 0012 	mvn.w	r0, #18
    31dc:	e7ec      	b.n	31b8 <_usb_d_dev_ep_read_req+0x34>
    31de:	bf00      	nop
    31e0:	20000160 	.word	0x20000160

000031e4 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    31e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31e8:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    31ea:	7a03      	ldrb	r3, [r0, #8]
    31ec:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    31ee:	f013 030f 	ands.w	r3, r3, #15
    31f2:	f000 80c2 	beq.w	337a <_usb_d_dev_ep_trans+0x196>
    31f6:	2e00      	cmp	r6, #0
    31f8:	bfb4      	ite	lt
    31fa:	1c9a      	addlt	r2, r3, #2
    31fc:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    31fe:	4614      	mov	r4, r2
    3200:	4969      	ldr	r1, [pc, #420]	; (33a8 <_usb_d_dev_ep_trans+0x1c4>)
    3202:	f101 0760 	add.w	r7, r1, #96	; 0x60
    3206:	1c55      	adds	r5, r2, #1
    3208:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    320c:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3210:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3214:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3218:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    321c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3220:	428a      	cmp	r2, r1
    3222:	d025      	beq.n	3270 <_usb_d_dev_ep_trans+0x8c>
    3224:	1e55      	subs	r5, r2, #1
    3226:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    3228:	6841      	ldr	r1, [r0, #4]
    322a:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    322c:	2b02      	cmp	r3, #2
    322e:	f200 8092 	bhi.w	3356 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    3232:	6803      	ldr	r3, [r0, #0]
    3234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    3238:	d31c      	bcc.n	3274 <_usb_d_dev_ep_trans+0x90>
    323a:	eb03 0c01 	add.w	ip, r3, r1
    323e:	f8df e180 	ldr.w	lr, [pc, #384]	; 33c0 <_usb_d_dev_ep_trans+0x1dc>
    3242:	45f4      	cmp	ip, lr
    3244:	d816      	bhi.n	3274 <_usb_d_dev_ep_trans+0x90>
    3246:	f013 0f03 	tst.w	r3, #3
    324a:	d113      	bne.n	3274 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    324c:	2e00      	cmp	r6, #0
    324e:	db2a      	blt.n	32a6 <_usb_d_dev_ep_trans+0xc2>
    3250:	428a      	cmp	r2, r1
    3252:	f200 809c 	bhi.w	338e <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    3256:	b34d      	cbz	r5, 32ac <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    3258:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    325c:	4a52      	ldr	r2, [pc, #328]	; (33a8 <_usb_d_dev_ep_trans+0x1c4>)
    325e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3266:	2b00      	cmp	r3, #0
    3268:	d07b      	beq.n	3362 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    326a:	f04f 0800 	mov.w	r8, #0
    326e:	e00c      	b.n	328a <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3270:	4615      	mov	r5, r2
    3272:	e7d9      	b.n	3228 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    3274:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3278:	4a4b      	ldr	r2, [pc, #300]	; (33a8 <_usb_d_dev_ep_trans+0x1c4>)
    327a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    327e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3282:	2b00      	cmp	r3, #0
    3284:	d06a      	beq.n	335c <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    3286:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    328a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    328e:	4a46      	ldr	r2, [pc, #280]	; (33a8 <_usb_d_dev_ep_trans+0x1c4>)
    3290:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3294:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    3298:	f013 0f08 	tst.w	r3, #8
    329c:	d009      	beq.n	32b2 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    329e:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    32a0:	b003      	add	sp, #12
    32a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    32a6:	f04f 0800 	mov.w	r8, #0
    32aa:	e7ee      	b.n	328a <_usb_d_dev_ep_trans+0xa6>
    32ac:	f04f 0800 	mov.w	r8, #0
    32b0:	e7eb      	b.n	328a <_usb_d_dev_ep_trans+0xa6>
    32b2:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    32b4:	a801      	add	r0, sp, #4
    32b6:	4b3d      	ldr	r3, [pc, #244]	; (33ac <_usb_d_dev_ep_trans+0x1c8>)
    32b8:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    32ba:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    32be:	4a3a      	ldr	r2, [pc, #232]	; (33a8 <_usb_d_dev_ep_trans+0x1c4>)
    32c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    32c4:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    32c8:	f013 0f40 	tst.w	r3, #64	; 0x40
    32cc:	d13c      	bne.n	3348 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    32ce:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    32d2:	4b35      	ldr	r3, [pc, #212]	; (33a8 <_usb_d_dev_ep_trans+0x1c4>)
    32d4:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    32d8:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    32dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    32e0:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    32e4:	a801      	add	r0, sp, #4
    32e6:	4b32      	ldr	r3, [pc, #200]	; (33b0 <_usb_d_dev_ep_trans+0x1cc>)
    32e8:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    32ea:	f8da 3000 	ldr.w	r3, [sl]
    32ee:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    32f2:	f8da 3004 	ldr.w	r3, [sl, #4]
    32f6:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    32fa:	2300      	movs	r3, #0
    32fc:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    3300:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    3302:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    3306:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    330a:	f368 1345 	bfi	r3, r8, #5, #1
    330e:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    3312:	f89a 3009 	ldrb.w	r3, [sl, #9]
    3316:	b1e3      	cbz	r3, 3352 <_usb_d_dev_ep_trans+0x16e>
    3318:	fab5 f585 	clz	r5, r5
    331c:	096d      	lsrs	r5, r5, #5
    331e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    3322:	4b21      	ldr	r3, [pc, #132]	; (33a8 <_usb_d_dev_ep_trans+0x1c4>)
    3324:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    3328:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    332c:	f365 1304 	bfi	r3, r5, #4, #1
    3330:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    3334:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    3336:	f04f 0100 	mov.w	r1, #0
    333a:	4638      	mov	r0, r7
    333c:	bfb4      	ite	lt
    333e:	4b1d      	ldrlt	r3, [pc, #116]	; (33b4 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    3340:	4b1d      	ldrge	r3, [pc, #116]	; (33b8 <_usb_d_dev_ep_trans+0x1d4>)
    3342:	4798      	blx	r3
	return ERR_NONE;
    3344:	2000      	movs	r0, #0
    3346:	e7ab      	b.n	32a0 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    3348:	a801      	add	r0, sp, #4
    334a:	4b19      	ldr	r3, [pc, #100]	; (33b0 <_usb_d_dev_ep_trans+0x1cc>)
    334c:	4798      	blx	r3
		return USB_BUSY;
    334e:	2001      	movs	r0, #1
    3350:	e7a6      	b.n	32a0 <_usb_d_dev_ep_trans+0xbc>
    3352:	2500      	movs	r5, #0
    3354:	e7e3      	b.n	331e <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    3356:	f06f 0011 	mvn.w	r0, #17
    335a:	e7a1      	b.n	32a0 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    335c:	f06f 0012 	mvn.w	r0, #18
    3360:	e79e      	b.n	32a0 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    3362:	f06f 0011 	mvn.w	r0, #17
    3366:	e79b      	b.n	32a0 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    3368:	f06f 0012 	mvn.w	r0, #18
    336c:	e798      	b.n	32a0 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    336e:	6841      	ldr	r1, [r0, #4]
    3370:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    3374:	4f11      	ldr	r7, [pc, #68]	; (33bc <_usb_d_dev_ep_trans+0x1d8>)
    3376:	2400      	movs	r4, #0
    3378:	e75b      	b.n	3232 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    337a:	4a0b      	ldr	r2, [pc, #44]	; (33a8 <_usb_d_dev_ep_trans+0x1c4>)
    337c:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    3380:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3384:	428a      	cmp	r2, r1
    3386:	d0f2      	beq.n	336e <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    3388:	4f0c      	ldr	r7, [pc, #48]	; (33bc <_usb_d_dev_ep_trans+0x1d8>)
    338a:	2400      	movs	r4, #0
    338c:	e74a      	b.n	3224 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    338e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3392:	4a05      	ldr	r2, [pc, #20]	; (33a8 <_usb_d_dev_ep_trans+0x1c4>)
    3394:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    339c:	2b00      	cmp	r3, #0
    339e:	d0e3      	beq.n	3368 <_usb_d_dev_ep_trans+0x184>
    33a0:	f04f 0801 	mov.w	r8, #1
    33a4:	e771      	b.n	328a <_usb_d_dev_ep_trans+0xa6>
    33a6:	bf00      	nop
    33a8:	20000160 	.word	0x20000160
    33ac:	000010e5 	.word	0x000010e5
    33b0:	000010f3 	.word	0x000010f3
    33b4:	00002955 	.word	0x00002955
    33b8:	00002ad9 	.word	0x00002ad9
    33bc:	200001d4 	.word	0x200001d4
    33c0:	20041fff 	.word	0x20041fff

000033c4 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    33c4:	4b09      	ldr	r3, [pc, #36]	; (33ec <_usb_d_dev_register_ep_callback+0x28>)
    33c6:	2900      	cmp	r1, #0
    33c8:	bf08      	it	eq
    33ca:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    33cc:	4603      	mov	r3, r0
    33ce:	b130      	cbz	r0, 33de <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    33d0:	2801      	cmp	r0, #1
    33d2:	d007      	beq.n	33e4 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    33d4:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    33d6:	bf04      	itt	eq
    33d8:	4b05      	ldreq	r3, [pc, #20]	; (33f0 <_usb_d_dev_register_ep_callback+0x2c>)
    33da:	6719      	streq	r1, [r3, #112]	; 0x70
    33dc:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    33de:	4b04      	ldr	r3, [pc, #16]	; (33f0 <_usb_d_dev_register_ep_callback+0x2c>)
    33e0:	6699      	str	r1, [r3, #104]	; 0x68
    33e2:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    33e4:	4b02      	ldr	r3, [pc, #8]	; (33f0 <_usb_d_dev_register_ep_callback+0x2c>)
    33e6:	66d9      	str	r1, [r3, #108]	; 0x6c
    33e8:	4770      	bx	lr
    33ea:	bf00      	nop
    33ec:	000026cd 	.word	0x000026cd
    33f0:	20000160 	.word	0x20000160

000033f4 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    33f4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    33f6:	4b01      	ldr	r3, [pc, #4]	; (33fc <USB_0_Handler+0x8>)
    33f8:	4798      	blx	r3
    33fa:	bd08      	pop	{r3, pc}
    33fc:	00002cc9 	.word	0x00002cc9

00003400 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    3400:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3402:	4b01      	ldr	r3, [pc, #4]	; (3408 <USB_1_Handler+0x8>)
    3404:	4798      	blx	r3
    3406:	bd08      	pop	{r3, pc}
    3408:	00002cc9 	.word	0x00002cc9

0000340c <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    340c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    340e:	4b01      	ldr	r3, [pc, #4]	; (3414 <USB_2_Handler+0x8>)
    3410:	4798      	blx	r3
    3412:	bd08      	pop	{r3, pc}
    3414:	00002cc9 	.word	0x00002cc9

00003418 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    3418:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    341a:	4b01      	ldr	r3, [pc, #4]	; (3420 <USB_3_Handler+0x8>)
    341c:	4798      	blx	r3
    341e:	bd08      	pop	{r3, pc}
    3420:	00002cc9 	.word	0x00002cc9

00003424 <main>:
#include <atmel_start.h>

int main(void)
{
    3424:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    3426:	4b01      	ldr	r3, [pc, #4]	; (342c <main+0x8>)
    3428:	4798      	blx	r3
    342a:	e7fe      	b.n	342a <main+0x6>
    342c:	000002d1 	.word	0x000002d1

00003430 <__libc_init_array>:
    3430:	b570      	push	{r4, r5, r6, lr}
    3432:	4e0d      	ldr	r6, [pc, #52]	; (3468 <__libc_init_array+0x38>)
    3434:	4c0d      	ldr	r4, [pc, #52]	; (346c <__libc_init_array+0x3c>)
    3436:	1ba4      	subs	r4, r4, r6
    3438:	10a4      	asrs	r4, r4, #2
    343a:	2500      	movs	r5, #0
    343c:	42a5      	cmp	r5, r4
    343e:	d109      	bne.n	3454 <__libc_init_array+0x24>
    3440:	4e0b      	ldr	r6, [pc, #44]	; (3470 <__libc_init_array+0x40>)
    3442:	4c0c      	ldr	r4, [pc, #48]	; (3474 <__libc_init_array+0x44>)
    3444:	f000 f8fe 	bl	3644 <_init>
    3448:	1ba4      	subs	r4, r4, r6
    344a:	10a4      	asrs	r4, r4, #2
    344c:	2500      	movs	r5, #0
    344e:	42a5      	cmp	r5, r4
    3450:	d105      	bne.n	345e <__libc_init_array+0x2e>
    3452:	bd70      	pop	{r4, r5, r6, pc}
    3454:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    3458:	4798      	blx	r3
    345a:	3501      	adds	r5, #1
    345c:	e7ee      	b.n	343c <__libc_init_array+0xc>
    345e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    3462:	4798      	blx	r3
    3464:	3501      	adds	r5, #1
    3466:	e7f2      	b.n	344e <__libc_init_array+0x1e>
    3468:	00003650 	.word	0x00003650
    346c:	00003650 	.word	0x00003650
    3470:	00003650 	.word	0x00003650
    3474:	00003654 	.word	0x00003654

00003478 <memcpy>:
    3478:	b510      	push	{r4, lr}
    347a:	1e43      	subs	r3, r0, #1
    347c:	440a      	add	r2, r1
    347e:	4291      	cmp	r1, r2
    3480:	d100      	bne.n	3484 <memcpy+0xc>
    3482:	bd10      	pop	{r4, pc}
    3484:	f811 4b01 	ldrb.w	r4, [r1], #1
    3488:	f803 4f01 	strb.w	r4, [r3, #1]!
    348c:	e7f7      	b.n	347e <memcpy+0x6>

0000348e <memset>:
    348e:	4402      	add	r2, r0
    3490:	4603      	mov	r3, r0
    3492:	4293      	cmp	r3, r2
    3494:	d100      	bne.n	3498 <memset+0xa>
    3496:	4770      	bx	lr
    3498:	f803 1b01 	strb.w	r1, [r3], #1
    349c:	e7f9      	b.n	3492 <memset+0x4>
    349e:	0000      	movs	r0, r0
    34a0:	682f2e2e 	.word	0x682f2e2e
    34a4:	732f6c61 	.word	0x732f6c61
    34a8:	682f6372 	.word	0x682f6372
    34ac:	635f6c61 	.word	0x635f6c61
    34b0:	615f6e61 	.word	0x615f6e61
    34b4:	636e7973 	.word	0x636e7973
    34b8:	0000632e 	.word	0x0000632e
    34bc:	682f2e2e 	.word	0x682f2e2e
    34c0:	732f6c61 	.word	0x732f6c61
    34c4:	682f6372 	.word	0x682f6372
    34c8:	695f6c61 	.word	0x695f6c61
    34cc:	6d5f6332 	.word	0x6d5f6332
    34d0:	6e79735f 	.word	0x6e79735f
    34d4:	00632e63 	.word	0x00632e63
    34d8:	682f2e2e 	.word	0x682f2e2e
    34dc:	732f6c61 	.word	0x732f6c61
    34e0:	682f6372 	.word	0x682f6372
    34e4:	735f6c61 	.word	0x735f6c61
    34e8:	6d5f6970 	.word	0x6d5f6970
    34ec:	6e79735f 	.word	0x6e79735f
    34f0:	00632e63 	.word	0x00632e63

000034f4 <_map>:
    34f4:	00000000 00000040 00000001 00000021     ....@.......!...
    3504:	00000002 00000052 00000003 00000003     ....R...........
    3514:	00000004 00000004 00000005 00000005     ................
    3524:	00000006 00000056 00000007 00000057     ....V.......W...
    3534:	00000008 00000028 00000009 00000029     ....(.......)...
    3544:	0000000a 0000004a 0000000b 0000004b     ....J.......K...
    3554:	0000000c 0000004c 0000000d 0000000d     ....L...........
    3564:	0000000e 0000000e 0000000f 0000005f     ............_...
    3574:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    3584:	632e6369 00000000 40003000 40003400     ic.c.....0.@.4.@
    3594:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    35a4:	43000800 43000c00                       ...C...C

000035ac <_i2cms>:
    35ac:	00000003 00200014 00000100 00003635     ...... .....56..
    35bc:	00d70000 00b71b00 00000005 00200014     .............. .
    35cc:	00000100 00003635 00d70000 00b71b00     ....56..........
    35dc:	00000007 00200014 00000100 00003635     ...... .....56..
    35ec:	00d70000 00b71b00                       ........

000035f4 <sercomspi_regs>:
    35f4:	0020000c 00020000 00000000 01ff0077     .. .........w...
    3604:	20000c02 02000000 00000000 ff007700     ... .........w..
    3614:	000c0401 00000030 00000002 00770000     ....0.........w.
    3624:	000601ff 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    3634:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

00003644 <_init>:
    3644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3646:	bf00      	nop
    3648:	bcf8      	pop	{r3, r4, r5, r6, r7}
    364a:	bc08      	pop	{r3}
    364c:	469e      	mov	lr, r3
    364e:	4770      	bx	lr

00003650 <__init_array_start>:
    3650:	00000289 	.word	0x00000289

00003654 <_fini>:
    3654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3656:	bf00      	nop
    3658:	bcf8      	pop	{r3, r4, r5, r6, r7}
    365a:	bc08      	pop	{r3}
    365c:	469e      	mov	lr, r3
    365e:	4770      	bx	lr

00003660 <__fini_array_start>:
    3660:	00000265 	.word	0x00000265
