
ECS_Box_Rev_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034e8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000014  20000000  000034e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020014  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020014  2**0
                  CONTENTS
  4 .bss          0000043c  20000014  000034fc  00020014  2**2
                  ALLOC
  5 .stack        00010000  20000450  00003938  00020014  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
  8 .debug_info   000349ab  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000367f  00000000  00000000  00054a46  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00015b96  00000000  00000000  000580c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ca0  00000000  00000000  0006dc5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001388  00000000  00000000  0006e8fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033b9f  00000000  00000000  0006fc83  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001425a  00000000  00000000  000a3822  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011ea1c  00000000  00000000  000b7a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000021ec  00000000  00000000  001d6498  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	50 04 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     P.. ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 bd 19 00 00 c9 19 00 00 d5 19 00 00     ................
      7c:	e1 19 00 00 ed 19 00 00 f9 19 00 00 05 1a 00 00     ................
      8c:	11 1a 00 00 1d 1a 00 00 29 1a 00 00 35 1a 00 00     ........)...5...
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 41 1a 00 00     ............A...
      ac:	4d 1a 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     M...............
      bc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      cc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	01 1c 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     164:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     174:	dd 02 00 00 dd 02 00 00 61 16 00 00 91 32 00 00     ........a....2..
     184:	9d 32 00 00 a9 32 00 00 b5 32 00 00 dd 02 00 00     .2...2...2......
     194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1f4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     204:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     214:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     224:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000014 	.word	0x20000014
     280:	00000000 	.word	0x00000000
     284:	000034e8 	.word	0x000034e8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000034e8 	.word	0x000034e8
     2c4:	20000018 	.word	0x20000018
     2c8:	000034e8 	.word	0x000034e8
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	00000d49 	.word	0x00000d49

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b1c      	ldr	r3, [pc, #112]	; (354 <Reset_Handler+0x74>)
     2e4:	4a1c      	ldr	r2, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d010      	beq.n	30c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	4a19      	ldr	r2, [pc, #100]	; (354 <Reset_Handler+0x74>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d20c      	bcs.n	30c <Reset_Handler+0x2c>
     2f2:	3b01      	subs	r3, #1
     2f4:	1a9b      	subs	r3, r3, r2
     2f6:	f023 0303 	bic.w	r3, r3, #3
     2fa:	3304      	adds	r3, #4
     2fc:	4413      	add	r3, r2
     2fe:	4916      	ldr	r1, [pc, #88]	; (358 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     300:	f851 0b04 	ldr.w	r0, [r1], #4
     304:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     308:	429a      	cmp	r2, r3
     30a:	d1f9      	bne.n	300 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     30c:	4b14      	ldr	r3, [pc, #80]	; (360 <Reset_Handler+0x80>)
     30e:	4a15      	ldr	r2, [pc, #84]	; (364 <Reset_Handler+0x84>)
     310:	429a      	cmp	r2, r3
     312:	d20a      	bcs.n	32a <Reset_Handler+0x4a>
     314:	3b01      	subs	r3, #1
     316:	1a9b      	subs	r3, r3, r2
     318:	f023 0303 	bic.w	r3, r3, #3
     31c:	3304      	adds	r3, #4
     31e:	4413      	add	r3, r2
                *pDest++ = 0;
     320:	2100      	movs	r1, #0
     322:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     326:	4293      	cmp	r3, r2
     328:	d1fb      	bne.n	322 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32a:	4b0f      	ldr	r3, [pc, #60]	; (368 <Reset_Handler+0x88>)
     32c:	4a0f      	ldr	r2, [pc, #60]	; (36c <Reset_Handler+0x8c>)
     32e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     332:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     334:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     338:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     33c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     344:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     348:	4b09      	ldr	r3, [pc, #36]	; (370 <Reset_Handler+0x90>)
     34a:	4798      	blx	r3
        main();
     34c:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     34e:	4798      	blx	r3
     350:	e7fe      	b.n	350 <Reset_Handler+0x70>
     352:	bf00      	nop
     354:	20000000 	.word	0x20000000
     358:	000034e8 	.word	0x000034e8
     35c:	20000014 	.word	0x20000014
     360:	20000450 	.word	0x20000450
     364:	20000014 	.word	0x20000014
     368:	e000ed00 	.word	0xe000ed00
     36c:	00000000 	.word	0x00000000
     370:	000032cd 	.word	0x000032cd
     374:	000032c1 	.word	0x000032c1

00000378 <EXTERNAL_IRQ_0_init>:
struct i2c_m_sync_desc FANs_I2C;

struct i2c_m_sync_desc Shared_I2C;

void EXTERNAL_IRQ_0_init(void)
{
     378:	b510      	push	{r4, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     37a:	2440      	movs	r4, #64	; 0x40
     37c:	4bcb      	ldr	r3, [pc, #812]	; (6ac <EXTERNAL_IRQ_0_init+0x334>)
     37e:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     382:	4acb      	ldr	r2, [pc, #812]	; (6b0 <EXTERNAL_IRQ_0_init+0x338>)
     384:	6953      	ldr	r3, [r2, #20]
     386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     38a:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     38c:	4bc9      	ldr	r3, [pc, #804]	; (6b4 <EXTERNAL_IRQ_0_init+0x33c>)
     38e:	2201      	movs	r2, #1
     390:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     394:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     398:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     39c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
     3a0:	4ac5      	ldr	r2, [pc, #788]	; (6b8 <EXTERNAL_IRQ_0_init+0x340>)
     3a2:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3a6:	f893 11c0 	ldrb.w	r1, [r3, #448]	; 0x1c0
     3aa:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     3ae:	f883 11c0 	strb.w	r1, [r3, #448]	; 0x1c0
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3b2:	f893 11c0 	ldrb.w	r1, [r3, #448]	; 0x1c0
	tmp &= ~PORT_PINCFG_PMUXEN;
     3b6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ba:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3be:	f883 11c0 	strb.w	r1, [r3, #448]	; 0x1c0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3c2:	f893 11b0 	ldrb.w	r1, [r3, #432]	; 0x1b0
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3c6:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ca:	f883 11b0 	strb.w	r1, [r3, #432]	; 0x1b0
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3ce:	2102      	movs	r1, #2
     3d0:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3d4:	49b9      	ldr	r1, [pc, #740]	; (6bc <EXTERNAL_IRQ_0_init+0x344>)
     3d6:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
     3da:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3de:	f893 11c1 	ldrb.w	r1, [r3, #449]	; 0x1c1
     3e2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     3e6:	f883 11c1 	strb.w	r1, [r3, #449]	; 0x1c1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3ea:	f893 11c1 	ldrb.w	r1, [r3, #449]	; 0x1c1
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ee:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3f2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3f6:	f883 11c1 	strb.w	r1, [r3, #449]	; 0x1c1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3fa:	f893 11b0 	ldrb.w	r1, [r3, #432]	; 0x1b0
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3fe:	f001 010f 	and.w	r1, r1, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     402:	f883 11b0 	strb.w	r1, [r3, #432]	; 0x1b0
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     406:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     40a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     40e:	48ac      	ldr	r0, [pc, #688]	; (6c0 <EXTERNAL_IRQ_0_init+0x348>)
     410:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     414:	49ab      	ldr	r1, [pc, #684]	; (6c4 <EXTERNAL_IRQ_0_init+0x34c>)
     416:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     41a:	f893 1152 	ldrb.w	r1, [r3, #338]	; 0x152
     41e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     422:	f883 1152 	strb.w	r1, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     426:	f893 1152 	ldrb.w	r1, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     42a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     42e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     432:	f883 1152 	strb.w	r1, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     436:	f893 1139 	ldrb.w	r1, [r3, #313]	; 0x139
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     43a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     43e:	f883 1139 	strb.w	r1, [r3, #313]	; 0x139
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     442:	2108      	movs	r1, #8
     444:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     448:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     44c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     450:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     454:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     458:	f893 10c3 	ldrb.w	r1, [r3, #195]	; 0xc3
     45c:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     460:	f883 10c3 	strb.w	r1, [r3, #195]	; 0xc3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     464:	f893 10c3 	ldrb.w	r1, [r3, #195]	; 0xc3
	tmp &= ~PORT_PINCFG_PMUXEN;
     468:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     46c:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     470:	f883 10c3 	strb.w	r1, [r3, #195]	; 0xc3
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     474:	f893 10b1 	ldrb.w	r1, [r3, #177]	; 0xb1
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     478:	f001 010f 	and.w	r1, r1, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     47c:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     480:	2110      	movs	r1, #16
     482:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     486:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     48a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     48e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     492:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     496:	f893 10c4 	ldrb.w	r1, [r3, #196]	; 0xc4
     49a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     49e:	f883 10c4 	strb.w	r1, [r3, #196]	; 0xc4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4a2:	f893 10c4 	ldrb.w	r1, [r3, #196]	; 0xc4
	tmp &= ~PORT_PINCFG_PMUXEN;
     4a6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4aa:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ae:	f883 10c4 	strb.w	r1, [r3, #196]	; 0xc4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4b2:	f893 10b2 	ldrb.w	r1, [r3, #178]	; 0xb2
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4b6:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ba:	f883 10b2 	strb.w	r1, [r3, #178]	; 0xb2
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4be:	2120      	movs	r1, #32
     4c0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4c4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     4c8:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     4cc:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     4d0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4d4:	f893 10c5 	ldrb.w	r1, [r3, #197]	; 0xc5
     4d8:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     4dc:	f883 10c5 	strb.w	r1, [r3, #197]	; 0xc5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4e0:	f893 10c5 	ldrb.w	r1, [r3, #197]	; 0xc5
	tmp &= ~PORT_PINCFG_PMUXEN;
     4e4:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4e8:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ec:	f883 10c5 	strb.w	r1, [r3, #197]	; 0xc5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4f0:	f893 10b2 	ldrb.w	r1, [r3, #178]	; 0xb2
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4f4:	f001 010f 	and.w	r1, r1, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4f8:	f883 10b2 	strb.w	r1, [r3, #178]	; 0xb2
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4fc:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     500:	4971      	ldr	r1, [pc, #452]	; (6c8 <EXTERNAL_IRQ_0_init+0x350>)
     502:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     506:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     50a:	f893 10c6 	ldrb.w	r1, [r3, #198]	; 0xc6
     50e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     512:	f883 10c6 	strb.w	r1, [r3, #198]	; 0xc6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     516:	f893 10c6 	ldrb.w	r1, [r3, #198]	; 0xc6
	tmp &= ~PORT_PINCFG_PMUXEN;
     51a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     51e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     522:	f883 10c6 	strb.w	r1, [r3, #198]	; 0xc6
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     526:	f893 10b3 	ldrb.w	r1, [r3, #179]	; 0xb3
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     52a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     52e:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     532:	2180      	movs	r1, #128	; 0x80
     534:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     538:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     53c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     540:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     544:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     548:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     54c:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     550:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     554:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     558:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     55c:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     560:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     564:	f893 10b3 	ldrb.w	r1, [r3, #179]	; 0xb3
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     568:	f001 010f 	and.w	r1, r1, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     56c:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     570:	f44f 7180 	mov.w	r1, #256	; 0x100
     574:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     578:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     57c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     580:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     584:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     588:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
     58c:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     590:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     594:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     598:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     59c:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5a0:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5a4:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5a8:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ac:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5b0:	f44f 7100 	mov.w	r1, #512	; 0x200
     5b4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5b8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     5bc:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     5c0:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     5c4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5c8:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
     5cc:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     5d0:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5d4:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     5d8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5dc:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5e0:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5e4:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5e8:	f001 010f 	and.w	r1, r1, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ec:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
     5f4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5f8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     5fc:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     600:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     604:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     608:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     60c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     610:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     614:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     618:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     61c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     620:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     624:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     628:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     62c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     638:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     63c:	4a23      	ldr	r2, [pc, #140]	; (6cc <EXTERNAL_IRQ_0_init+0x354>)
     63e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     642:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
     646:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     64a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     64e:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
	tmp &= ~PORT_PINCFG_PMUXEN;
     652:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     656:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     65a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     65e:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     662:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     666:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     66a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
     66e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     672:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     676:	4a16      	ldr	r2, [pc, #88]	; (6d0 <EXTERNAL_IRQ_0_init+0x358>)
     678:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     67c:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
     680:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     684:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     688:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
	tmp &= ~PORT_PINCFG_PMUXEN;
     68c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     690:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     694:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     698:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     69c:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6a0:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(iAmmcInt2, PINMUX_PB29A_EIC_EXTINT15);

	ext_irq_init();
     6a4:	4b0b      	ldr	r3, [pc, #44]	; (6d4 <EXTERNAL_IRQ_0_init+0x35c>)
     6a6:	4798      	blx	r3
     6a8:	bd10      	pop	{r4, pc}
     6aa:	bf00      	nop
     6ac:	40001c00 	.word	0x40001c00
     6b0:	40000800 	.word	0x40000800
     6b4:	41008000 	.word	0x41008000
     6b8:	c0020000 	.word	0xc0020000
     6bc:	40020002 	.word	0x40020002
     6c0:	40020000 	.word	0x40020000
     6c4:	c0020004 	.word	0xc0020004
     6c8:	40020040 	.word	0x40020040
     6cc:	c0021000 	.word	0xc0021000
     6d0:	c0022000 	.word	0xc0022000
     6d4:	000010bd 	.word	0x000010bd

000006d8 <Flash_Mem_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6d8:	4b28      	ldr	r3, [pc, #160]	; (77c <Flash_Mem_SPI_PORT_init+0xa4>)
     6da:	2210      	movs	r2, #16
     6dc:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6de:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6e0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     6e4:	629a      	str	r2, [r3, #40]	; 0x28
     6e6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     6ea:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6ec:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     6f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6f4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6fc:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     700:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     704:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     708:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     70c:	2220      	movs	r2, #32
     70e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     710:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     712:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     716:	629a      	str	r2, [r3, #40]	; 0x28
     718:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     71a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     71e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     722:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     72a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     72e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     732:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     736:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     73a:	2240      	movs	r2, #64	; 0x40
     73c:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     73e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     742:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     746:	629a      	str	r2, [r3, #40]	; 0x28
     748:	4a0d      	ldr	r2, [pc, #52]	; (780 <Flash_Mem_SPI_PORT_init+0xa8>)
     74a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     74c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     750:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     758:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     75c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     760:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     768:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     76c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     770:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     774:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     778:	4770      	bx	lr
     77a:	bf00      	nop
     77c:	41008000 	.word	0x41008000
     780:	c0020000 	.word	0xc0020000

00000784 <Flash_Mem_SPI_CLOCK_init>:
     784:	4b06      	ldr	r3, [pc, #24]	; (7a0 <Flash_Mem_SPI_CLOCK_init+0x1c>)
     786:	2240      	movs	r2, #64	; 0x40
     788:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     78c:	2243      	movs	r2, #67	; 0x43
     78e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     792:	4a04      	ldr	r2, [pc, #16]	; (7a4 <Flash_Mem_SPI_CLOCK_init+0x20>)
     794:	6953      	ldr	r3, [r2, #20]
     796:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     79a:	6153      	str	r3, [r2, #20]
     79c:	4770      	bx	lr
     79e:	bf00      	nop
     7a0:	40001c00 	.word	0x40001c00
     7a4:	40000800 	.word	0x40000800

000007a8 <Flash_Mem_SPI_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void Flash_Mem_SPI_init(void)
{
     7a8:	b508      	push	{r3, lr}
	Flash_Mem_SPI_CLOCK_init();
     7aa:	4b04      	ldr	r3, [pc, #16]	; (7bc <Flash_Mem_SPI_init+0x14>)
     7ac:	4798      	blx	r3
	spi_m_sync_init(&Flash_Mem_SPI, SERCOM0);
     7ae:	4904      	ldr	r1, [pc, #16]	; (7c0 <Flash_Mem_SPI_init+0x18>)
     7b0:	4804      	ldr	r0, [pc, #16]	; (7c4 <Flash_Mem_SPI_init+0x1c>)
     7b2:	4b05      	ldr	r3, [pc, #20]	; (7c8 <Flash_Mem_SPI_init+0x20>)
     7b4:	4798      	blx	r3
	Flash_Mem_SPI_PORT_init();
     7b6:	4b05      	ldr	r3, [pc, #20]	; (7cc <Flash_Mem_SPI_init+0x24>)
     7b8:	4798      	blx	r3
     7ba:	bd08      	pop	{r3, pc}
     7bc:	00000785 	.word	0x00000785
     7c0:	40003000 	.word	0x40003000
     7c4:	20000378 	.word	0x20000378
     7c8:	00001189 	.word	0x00001189
     7cc:	000006d9 	.word	0x000006d9

000007d0 <Fvx_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7d0:	4b16      	ldr	r3, [pc, #88]	; (82c <Fvx_I2C_PORT_init+0x5c>)
     7d2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
     7d6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     7da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7de:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     7e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7e6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7ee:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7f2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7f6:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7fe:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
     802:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     80a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     80e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     812:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     81a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     81e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     822:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     82a:	4770      	bx	lr
     82c:	41008000 	.word	0x41008000

00000830 <Fvx_I2C_CLOCK_init>:
     830:	4b06      	ldr	r3, [pc, #24]	; (84c <Fvx_I2C_CLOCK_init+0x1c>)
     832:	2240      	movs	r2, #64	; 0x40
     834:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     838:	2243      	movs	r2, #67	; 0x43
     83a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     83e:	4a04      	ldr	r2, [pc, #16]	; (850 <Fvx_I2C_CLOCK_init+0x20>)
     840:	6953      	ldr	r3, [r2, #20]
     842:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     846:	6153      	str	r3, [r2, #20]
     848:	4770      	bx	lr
     84a:	bf00      	nop
     84c:	40001c00 	.word	0x40001c00
     850:	40000800 	.word	0x40000800

00000854 <Fvx_I2C_init>:

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
}

void Fvx_I2C_init(void)
{
     854:	b508      	push	{r3, lr}
	Fvx_I2C_CLOCK_init();
     856:	4b04      	ldr	r3, [pc, #16]	; (868 <Fvx_I2C_init+0x14>)
     858:	4798      	blx	r3
	i2c_m_sync_init(&Fvx_I2C, SERCOM1);
     85a:	4904      	ldr	r1, [pc, #16]	; (86c <Fvx_I2C_init+0x18>)
     85c:	4804      	ldr	r0, [pc, #16]	; (870 <Fvx_I2C_init+0x1c>)
     85e:	4b05      	ldr	r3, [pc, #20]	; (874 <Fvx_I2C_init+0x20>)
     860:	4798      	blx	r3
	Fvx_I2C_PORT_init();
     862:	4b05      	ldr	r3, [pc, #20]	; (878 <Fvx_I2C_init+0x24>)
     864:	4798      	blx	r3
     866:	bd08      	pop	{r3, pc}
     868:	00000831 	.word	0x00000831
     86c:	40003400 	.word	0x40003400
     870:	20000358 	.word	0x20000358
     874:	00001149 	.word	0x00001149
     878:	000007d1 	.word	0x000007d1

0000087c <FANs_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     87c:	4b16      	ldr	r3, [pc, #88]	; (8d8 <FANs_I2C_PORT_init+0x5c>)
     87e:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     882:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     886:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     88a:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     88e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     892:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     896:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     89a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     89e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     8a2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8aa:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     8ae:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     8b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8b6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     8ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8c6:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     8ca:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8ce:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
     8d6:	4770      	bx	lr
     8d8:	41008000 	.word	0x41008000

000008dc <FANs_I2C_CLOCK_init>:
     8dc:	4b06      	ldr	r3, [pc, #24]	; (8f8 <FANs_I2C_CLOCK_init+0x1c>)
     8de:	2240      	movs	r2, #64	; 0x40
     8e0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     8e4:	2243      	movs	r2, #67	; 0x43
     8e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     8ea:	4a04      	ldr	r2, [pc, #16]	; (8fc <FANs_I2C_CLOCK_init+0x20>)
     8ec:	6993      	ldr	r3, [r2, #24]
     8ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     8f2:	6193      	str	r3, [r2, #24]
     8f4:	4770      	bx	lr
     8f6:	bf00      	nop
     8f8:	40001c00 	.word	0x40001c00
     8fc:	40000800 	.word	0x40000800

00000900 <FANs_I2C_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void FANs_I2C_init(void)
{
     900:	b508      	push	{r3, lr}
	FANs_I2C_CLOCK_init();
     902:	4b04      	ldr	r3, [pc, #16]	; (914 <FANs_I2C_init+0x14>)
     904:	4798      	blx	r3
	i2c_m_sync_init(&FANs_I2C, SERCOM2);
     906:	4904      	ldr	r1, [pc, #16]	; (918 <FANs_I2C_init+0x18>)
     908:	4804      	ldr	r0, [pc, #16]	; (91c <FANs_I2C_init+0x1c>)
     90a:	4b05      	ldr	r3, [pc, #20]	; (920 <FANs_I2C_init+0x20>)
     90c:	4798      	blx	r3
	FANs_I2C_PORT_init();
     90e:	4b05      	ldr	r3, [pc, #20]	; (924 <FANs_I2C_init+0x24>)
     910:	4798      	blx	r3
     912:	bd08      	pop	{r3, pc}
     914:	000008dd 	.word	0x000008dd
     918:	41012000 	.word	0x41012000
     91c:	200003a8 	.word	0x200003a8
     920:	00001149 	.word	0x00001149
     924:	0000087d 	.word	0x0000087d

00000928 <Shared_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     928:	4b16      	ldr	r3, [pc, #88]	; (984 <Shared_I2C_PORT_init+0x5c>)
     92a:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
     92e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     932:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     936:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
	tmp &= ~PORT_PINCFG_PMUXEN;
     93a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     93e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     942:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     946:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     94a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     94e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     952:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     956:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
     95a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     95e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     962:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
	tmp &= ~PORT_PINCFG_PMUXEN;
     966:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     96a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     96e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     972:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     976:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     97a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     97e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
     982:	4770      	bx	lr
     984:	41008000 	.word	0x41008000

00000988 <Shared_I2C_CLOCK_init>:
     988:	4b06      	ldr	r3, [pc, #24]	; (9a4 <Shared_I2C_CLOCK_init+0x1c>)
     98a:	2240      	movs	r2, #64	; 0x40
     98c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     990:	2243      	movs	r2, #67	; 0x43
     992:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     996:	4a04      	ldr	r2, [pc, #16]	; (9a8 <Shared_I2C_CLOCK_init+0x20>)
     998:	6a13      	ldr	r3, [r2, #32]
     99a:	f043 0301 	orr.w	r3, r3, #1
     99e:	6213      	str	r3, [r2, #32]
     9a0:	4770      	bx	lr
     9a2:	bf00      	nop
     9a4:	40001c00 	.word	0x40001c00
     9a8:	40000800 	.word	0x40000800

000009ac <Shared_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}

void Shared_I2C_init(void)
{
     9ac:	b508      	push	{r3, lr}
	Shared_I2C_CLOCK_init();
     9ae:	4b05      	ldr	r3, [pc, #20]	; (9c4 <Shared_I2C_init+0x18>)
     9b0:	4798      	blx	r3
	i2c_m_sync_init(&Shared_I2C, SERCOM4);
     9b2:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     9b6:	4804      	ldr	r0, [pc, #16]	; (9c8 <Shared_I2C_init+0x1c>)
     9b8:	4b04      	ldr	r3, [pc, #16]	; (9cc <Shared_I2C_init+0x20>)
     9ba:	4798      	blx	r3
	Shared_I2C_PORT_init();
     9bc:	4b04      	ldr	r3, [pc, #16]	; (9d0 <Shared_I2C_init+0x24>)
     9be:	4798      	blx	r3
     9c0:	bd08      	pop	{r3, pc}
     9c2:	bf00      	nop
     9c4:	00000989 	.word	0x00000989
     9c8:	200003e0 	.word	0x200003e0
     9cc:	00001149 	.word	0x00001149
     9d0:	00000929 	.word	0x00000929

000009d4 <SPI_Temp_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9d4:	4b2d      	ldr	r3, [pc, #180]	; (a8c <SPI_Temp_PORT_init+0xb8>)
     9d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     9da:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9de:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     9e6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     9ea:	4a29      	ldr	r2, [pc, #164]	; (a90 <SPI_Temp_PORT_init+0xbc>)
     9ec:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9f0:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     9f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9f8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9fc:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a00:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a04:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a08:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a0c:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     a14:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a18:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a1c:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     a20:	4a1c      	ldr	r2, [pc, #112]	; (a94 <SPI_Temp_PORT_init+0xc0>)
     a22:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a26:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     a2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a2e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a32:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a36:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a3a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a3e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a42:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     a4a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a4e:	4a12      	ldr	r2, [pc, #72]	; (a98 <SPI_Temp_PORT_init+0xc4>)
     a50:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     a54:	f1a2 2280 	sub.w	r2, r2, #2147516416	; 0x80008000
     a58:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a5c:	f893 214f 	ldrb.w	r2, [r3, #335]	; 0x14f
     a60:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     a64:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a68:	f893 214f 	ldrb.w	r2, [r3, #335]	; 0x14f
	tmp &= ~PORT_PINCFG_PMUXEN;
     a6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a70:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a74:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a78:	f893 2137 	ldrb.w	r2, [r3, #311]	; 0x137
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a7c:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a80:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a84:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
     a88:	4770      	bx	lr
     a8a:	bf00      	nop
     a8c:	41008000 	.word	0x41008000
     a90:	c0000001 	.word	0xc0000001
     a94:	c0000002 	.word	0xc0000002
     a98:	40028000 	.word	0x40028000

00000a9c <SPI_Temp_CLOCK_init>:
     a9c:	4b06      	ldr	r3, [pc, #24]	; (ab8 <SPI_Temp_CLOCK_init+0x1c>)
     a9e:	2240      	movs	r2, #64	; 0x40
     aa0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     aa4:	2243      	movs	r2, #67	; 0x43
     aa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     aaa:	4a04      	ldr	r2, [pc, #16]	; (abc <SPI_Temp_CLOCK_init+0x20>)
     aac:	6a13      	ldr	r3, [r2, #32]
     aae:	f043 0304 	orr.w	r3, r3, #4
     ab2:	6213      	str	r3, [r2, #32]
     ab4:	4770      	bx	lr
     ab6:	bf00      	nop
     ab8:	40001c00 	.word	0x40001c00
     abc:	40000800 	.word	0x40000800

00000ac0 <SPI_Temp_init>:

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
}

void SPI_Temp_init(void)
{
     ac0:	b508      	push	{r3, lr}
	SPI_Temp_CLOCK_init();
     ac2:	4b04      	ldr	r3, [pc, #16]	; (ad4 <SPI_Temp_init+0x14>)
     ac4:	4798      	blx	r3
	spi_m_sync_init(&SPI_Temp, SERCOM6);
     ac6:	4904      	ldr	r1, [pc, #16]	; (ad8 <SPI_Temp_init+0x18>)
     ac8:	4804      	ldr	r0, [pc, #16]	; (adc <SPI_Temp_init+0x1c>)
     aca:	4b05      	ldr	r3, [pc, #20]	; (ae0 <SPI_Temp_init+0x20>)
     acc:	4798      	blx	r3
	SPI_Temp_PORT_init();
     ace:	4b05      	ldr	r3, [pc, #20]	; (ae4 <SPI_Temp_init+0x24>)
     ad0:	4798      	blx	r3
     ad2:	bd08      	pop	{r3, pc}
     ad4:	00000a9d 	.word	0x00000a9d
     ad8:	43000800 	.word	0x43000800
     adc:	200003c8 	.word	0x200003c8
     ae0:	00001189 	.word	0x00001189
     ae4:	000009d5 	.word	0x000009d5

00000ae8 <SPI_AMMC_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ae8:	4b2f      	ldr	r3, [pc, #188]	; (ba8 <SPI_AMMC_PORT_init+0xc0>)
     aea:	f44f 7280 	mov.w	r2, #256	; 0x100
     aee:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     af2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     af6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     afa:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
     afe:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     b02:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b06:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
	tmp &= ~PORT_PINCFG_PMUXEN;
     b0a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b0e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b12:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b16:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b1a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b1e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b22:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b26:	f44f 7200 	mov.w	r2, #512	; 0x200
     b2a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b2e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b32:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     b36:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
     b3a:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b3e:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
	tmp &= ~PORT_PINCFG_PMUXEN;
     b42:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b46:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b4a:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b4e:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b52:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b56:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b5a:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
     b62:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b66:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     b6a:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     b6e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
     b72:	4a0e      	ldr	r2, [pc, #56]	; (bac <SPI_AMMC_PORT_init+0xc4>)
     b74:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b78:	f893 21ca 	ldrb.w	r2, [r3, #458]	; 0x1ca
     b7c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b80:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b84:	f893 21ca 	ldrb.w	r2, [r3, #458]	; 0x1ca
	tmp &= ~PORT_PINCFG_PMUXEN;
     b88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b8c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b90:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b94:	f893 21b5 	ldrb.w	r2, [r3, #437]	; 0x1b5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b98:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b9c:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ba0:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
     ba4:	4770      	bx	lr
     ba6:	bf00      	nop
     ba8:	41008000 	.word	0x41008000
     bac:	c0020000 	.word	0xc0020000

00000bb0 <SPI_AMMC_CLOCK_init>:
     bb0:	4b06      	ldr	r3, [pc, #24]	; (bcc <SPI_AMMC_CLOCK_init+0x1c>)
     bb2:	2240      	movs	r2, #64	; 0x40
     bb4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     bb8:	2243      	movs	r2, #67	; 0x43
     bba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     bbe:	4a04      	ldr	r2, [pc, #16]	; (bd0 <SPI_AMMC_CLOCK_init+0x20>)
     bc0:	6a13      	ldr	r3, [r2, #32]
     bc2:	f043 0308 	orr.w	r3, r3, #8
     bc6:	6213      	str	r3, [r2, #32]
     bc8:	4770      	bx	lr
     bca:	bf00      	nop
     bcc:	40001c00 	.word	0x40001c00
     bd0:	40000800 	.word	0x40000800

00000bd4 <SPI_AMMC_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void SPI_AMMC_init(void)
{
     bd4:	b508      	push	{r3, lr}
	SPI_AMMC_CLOCK_init();
     bd6:	4b04      	ldr	r3, [pc, #16]	; (be8 <SPI_AMMC_init+0x14>)
     bd8:	4798      	blx	r3
	spi_m_sync_init(&SPI_AMMC, SERCOM7);
     bda:	4904      	ldr	r1, [pc, #16]	; (bec <SPI_AMMC_init+0x18>)
     bdc:	4804      	ldr	r0, [pc, #16]	; (bf0 <SPI_AMMC_init+0x1c>)
     bde:	4b05      	ldr	r3, [pc, #20]	; (bf4 <SPI_AMMC_init+0x20>)
     be0:	4798      	blx	r3
	SPI_AMMC_PORT_init();
     be2:	4b05      	ldr	r3, [pc, #20]	; (bf8 <SPI_AMMC_init+0x24>)
     be4:	4798      	blx	r3
     be6:	bd08      	pop	{r3, pc}
     be8:	00000bb1 	.word	0x00000bb1
     bec:	43000c00 	.word	0x43000c00
     bf0:	20000390 	.word	0x20000390
     bf4:	00001189 	.word	0x00001189
     bf8:	00000ae9 	.word	0x00000ae9

00000bfc <MaintUSB_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bfc:	4b1e      	ldr	r3, [pc, #120]	; (c78 <MaintUSB_PORT_init+0x7c>)
     bfe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     c02:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c04:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     c08:	6299      	str	r1, [r3, #40]	; 0x28
     c0a:	481c      	ldr	r0, [pc, #112]	; (c7c <MaintUSB_PORT_init+0x80>)
     c0c:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c0e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c10:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     c14:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c1c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     c20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c24:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c2c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c30:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c34:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     c40:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c42:	6299      	str	r1, [r3, #40]	; 0x28
     c44:	490e      	ldr	r1, [pc, #56]	; (c80 <MaintUSB_PORT_init+0x84>)
     c46:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c48:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c4a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     c4e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c52:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c56:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     c5a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c5e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c62:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c66:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c6a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c6e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     c76:	4770      	bx	lr
     c78:	41008000 	.word	0x41008000
     c7c:	c0000100 	.word	0xc0000100
     c80:	c0000200 	.word	0xc0000200

00000c84 <MaintUSB_CLOCK_init>:
     c84:	2241      	movs	r2, #65	; 0x41
     c86:	4b07      	ldr	r3, [pc, #28]	; (ca4 <MaintUSB_CLOCK_init+0x20>)
     c88:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     c8c:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     c90:	691a      	ldr	r2, [r3, #16]
     c92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     c96:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     c98:	699a      	ldr	r2, [r3, #24]
     c9a:	f042 0201 	orr.w	r2, r2, #1
     c9e:	619a      	str	r2, [r3, #24]
     ca0:	4770      	bx	lr
     ca2:	bf00      	nop
     ca4:	40001c00 	.word	0x40001c00

00000ca8 <MaintUSB_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void MaintUSB_init(void)
{
     ca8:	b508      	push	{r3, lr}
	MaintUSB_CLOCK_init();
     caa:	4b03      	ldr	r3, [pc, #12]	; (cb8 <MaintUSB_init+0x10>)
     cac:	4798      	blx	r3
	usb_d_init();
     cae:	4b03      	ldr	r3, [pc, #12]	; (cbc <MaintUSB_init+0x14>)
     cb0:	4798      	blx	r3
	MaintUSB_PORT_init();
     cb2:	4b03      	ldr	r3, [pc, #12]	; (cc0 <MaintUSB_init+0x18>)
     cb4:	4798      	blx	r3
     cb6:	bd08      	pop	{r3, pc}
     cb8:	00000c85 	.word	0x00000c85
     cbc:	000014e5 	.word	0x000014e5
     cc0:	00000bfd 	.word	0x00000bfd

00000cc4 <CCu_CAN_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cc4:	4b10      	ldr	r3, [pc, #64]	; (d08 <CCu_CAN_PORT_init+0x44>)
     cc6:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     cca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     cce:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cd2:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     cd6:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     cda:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     cde:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ce2:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ce6:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     cea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     cee:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cf2:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     cf6:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     cfa:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     cfe:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d02:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
     d06:	4770      	bx	lr
     d08:	41008000 	.word	0x41008000

00000d0c <CCu_CAN_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CCu_CAN_init(void)
{
     d0c:	b508      	push	{r3, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     d0e:	4a08      	ldr	r2, [pc, #32]	; (d30 <CCu_CAN_init+0x24>)
     d10:	6913      	ldr	r3, [r2, #16]
     d12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
     d16:	6113      	str	r3, [r2, #16]
     d18:	2240      	movs	r2, #64	; 0x40
     d1a:	4b06      	ldr	r3, [pc, #24]	; (d34 <CCu_CAN_init+0x28>)
     d1c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CCu_CAN, CAN1);
     d20:	4905      	ldr	r1, [pc, #20]	; (d38 <CCu_CAN_init+0x2c>)
     d22:	4806      	ldr	r0, [pc, #24]	; (d3c <CCu_CAN_init+0x30>)
     d24:	4b06      	ldr	r3, [pc, #24]	; (d40 <CCu_CAN_init+0x34>)
     d26:	4798      	blx	r3
	CCu_CAN_PORT_init();
     d28:	4b06      	ldr	r3, [pc, #24]	; (d44 <CCu_CAN_init+0x38>)
     d2a:	4798      	blx	r3
     d2c:	bd08      	pop	{r3, pc}
     d2e:	bf00      	nop
     d30:	40000800 	.word	0x40000800
     d34:	40001c00 	.word	0x40001c00
     d38:	42000400 	.word	0x42000400
     d3c:	20000330 	.word	0x20000330
     d40:	0000101d 	.word	0x0000101d
     d44:	00000cc5 	.word	0x00000cc5

00000d48 <system_init>:
}

void system_init(void)
{
     d48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     d4c:	4b8f      	ldr	r3, [pc, #572]	; (f8c <system_init+0x244>)
     d4e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d50:	4b8f      	ldr	r3, [pc, #572]	; (f90 <system_init+0x248>)
     d52:	f04f 0b01 	mov.w	fp, #1
     d56:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d5a:	f8df a278 	ldr.w	sl, [pc, #632]	; fd4 <system_init+0x28c>
     d5e:	f8c3 a028 	str.w	sl, [r3, #40]	; 0x28
     d62:	f8df 9274 	ldr.w	r9, [pc, #628]	; fd8 <system_init+0x290>
     d66:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d6a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
     d6e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d76:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
     d7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d82:	2502      	movs	r5, #2
     d84:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d86:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d88:	f8df 8250 	ldr.w	r8, [pc, #592]	; fdc <system_init+0x294>
     d8c:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
     d90:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     d94:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d96:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
	tmp &= ~PORT_PINCFG_PMUXEN;
     d9a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     da2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     da6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     daa:	f8df e234 	ldr.w	lr, [pc, #564]	; fe0 <system_init+0x298>
     dae:	f8c3 e0a8 	str.w	lr, [r3, #168]	; 0xa8
     db2:	4a78      	ldr	r2, [pc, #480]	; (f94 <system_init+0x24c>)
     db4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     db8:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
     dbc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     dc0:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dc4:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
	tmp &= ~PORT_PINCFG_PMUXEN;
     dc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dcc:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dd0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     dd4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ddc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     de0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     de4:	496c      	ldr	r1, [pc, #432]	; (f98 <system_init+0x250>)
     de6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dea:	f893 10d7 	ldrb.w	r1, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
     dee:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     df2:	f883 10d7 	strb.w	r1, [r3, #215]	; 0xd7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     df6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
     dfa:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dfe:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e02:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     e06:	4f65      	ldr	r7, [pc, #404]	; (f9c <system_init+0x254>)
     e08:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e0c:	f893 10da 	ldrb.w	r1, [r3, #218]	; 0xda
	tmp &= ~PORT_PINCFG_PMUXEN;
     e10:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e14:	f883 10da 	strb.w	r1, [r3, #218]	; 0xda
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e18:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
     e1c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e20:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e24:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     e28:	4e5d      	ldr	r6, [pc, #372]	; (fa0 <system_init+0x258>)
     e2a:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e2e:	f893 c0db 	ldrb.w	ip, [r3, #219]	; 0xdb
	tmp &= ~PORT_PINCFG_PMUXEN;
     e32:	f00c 0cfe 	and.w	ip, ip, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e36:	f883 c0db 	strb.w	ip, [r3, #219]	; 0xdb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e3a:	f8c3 b104 	str.w	fp, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e3e:	f8c3 a128 	str.w	sl, [r3, #296]	; 0x128
     e42:	f8c3 9128 	str.w	r9, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e46:	f893 c140 	ldrb.w	ip, [r3, #320]	; 0x140
     e4a:	f00c 0cfb 	and.w	ip, ip, #251	; 0xfb
     e4e:	f883 c140 	strb.w	ip, [r3, #320]	; 0x140
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e52:	f893 c140 	ldrb.w	ip, [r3, #320]	; 0x140
	tmp &= ~PORT_PINCFG_PMUXEN;
     e56:	f00c 0cfe 	and.w	ip, ip, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e5a:	f883 c140 	strb.w	ip, [r3, #320]	; 0x140
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e5e:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e62:	f8c3 5108 	str.w	r5, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e66:	f8c3 8128 	str.w	r8, [r3, #296]	; 0x128
     e6a:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e6e:	f893 5141 	ldrb.w	r5, [r3, #321]	; 0x141
	tmp &= ~PORT_PINCFG_PMUXEN;
     e72:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e76:	f883 5141 	strb.w	r5, [r3, #321]	; 0x141
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e7a:	2504      	movs	r5, #4
     e7c:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e80:	f8c3 5108 	str.w	r5, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e84:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
     e88:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
     e8c:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e90:	f893 5142 	ldrb.w	r5, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     e94:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e98:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e9c:	2510      	movs	r5, #16
     e9e:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ea2:	f8c3 5108 	str.w	r5, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ea6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
     eaa:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
     eae:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eb2:	f893 4144 	ldrb.w	r4, [r3, #324]	; 0x144
	tmp &= ~PORT_PINCFG_PMUXEN;
     eb6:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     eba:	f883 4144 	strb.w	r4, [r3, #324]	; 0x144
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     ebe:	f44f 2400 	mov.w	r4, #524288	; 0x80000
     ec2:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ec6:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
     eca:	4c36      	ldr	r4, [pc, #216]	; (fa4 <system_init+0x25c>)
     ecc:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ed0:	f893 4153 	ldrb.w	r4, [r3, #339]	; 0x153
     ed4:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     ed8:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     edc:	f893 4153 	ldrb.w	r4, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     ee0:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ee4:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ee8:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
     eec:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ef0:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ef4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     ef8:	4c2b      	ldr	r4, [pc, #172]	; (fa8 <system_init+0x260>)
     efa:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     efe:	f893 4159 	ldrb.w	r4, [r3, #345]	; 0x159
	tmp &= ~PORT_PINCFG_PMUXEN;
     f02:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f06:	f883 4159 	strb.w	r4, [r3, #345]	; 0x159
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f0a:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f0e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f12:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     f16:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f1a:	f893 015a 	ldrb.w	r0, [r3, #346]	; 0x15a
	tmp &= ~PORT_PINCFG_PMUXEN;
     f1e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f22:	f883 015a 	strb.w	r0, [r3, #346]	; 0x15a
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f26:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f2a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f2e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     f32:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f36:	f893 115b 	ldrb.w	r1, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     f3a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f3e:	f883 115b 	strb.w	r1, [r3, #347]	; 0x15b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f42:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     f46:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f4a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f4e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     f52:	4a16      	ldr	r2, [pc, #88]	; (fac <system_init+0x264>)
     f54:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f58:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f60:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	// Set pin direction to output
	gpio_set_pin_direction(niAlcTempSensSpiSs0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(niAlcTempSensSpiSs0, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     f64:	4b12      	ldr	r3, [pc, #72]	; (fb0 <system_init+0x268>)
     f66:	4798      	blx	r3

	Flash_Mem_SPI_init();
     f68:	4b12      	ldr	r3, [pc, #72]	; (fb4 <system_init+0x26c>)
     f6a:	4798      	blx	r3

	Fvx_I2C_init();
     f6c:	4b12      	ldr	r3, [pc, #72]	; (fb8 <system_init+0x270>)
     f6e:	4798      	blx	r3

	FANs_I2C_init();
     f70:	4b12      	ldr	r3, [pc, #72]	; (fbc <system_init+0x274>)
     f72:	4798      	blx	r3

	Shared_I2C_init();
     f74:	4b12      	ldr	r3, [pc, #72]	; (fc0 <system_init+0x278>)
     f76:	4798      	blx	r3

	SPI_Temp_init();
     f78:	4b12      	ldr	r3, [pc, #72]	; (fc4 <system_init+0x27c>)
     f7a:	4798      	blx	r3

	SPI_AMMC_init();
     f7c:	4b12      	ldr	r3, [pc, #72]	; (fc8 <system_init+0x280>)
     f7e:	4798      	blx	r3

	MaintUSB_init();
     f80:	4b12      	ldr	r3, [pc, #72]	; (fcc <system_init+0x284>)
     f82:	4798      	blx	r3
	CCu_CAN_init();
     f84:	4b12      	ldr	r3, [pc, #72]	; (fd0 <system_init+0x288>)
     f86:	4798      	blx	r3
     f88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f8c:	000016dd 	.word	0x000016dd
     f90:	41008000 	.word	0x41008000
     f94:	c0020040 	.word	0xc0020040
     f98:	c0000080 	.word	0xc0000080
     f9c:	c0000400 	.word	0xc0000400
     fa0:	c0000800 	.word	0xc0000800
     fa4:	c0020008 	.word	0xc0020008
     fa8:	c0000200 	.word	0xc0000200
     fac:	c0001000 	.word	0xc0001000
     fb0:	00000379 	.word	0x00000379
     fb4:	000007a9 	.word	0x000007a9
     fb8:	00000855 	.word	0x00000855
     fbc:	00000901 	.word	0x00000901
     fc0:	000009ad 	.word	0x000009ad
     fc4:	00000ac1 	.word	0x00000ac1
     fc8:	00000bd5 	.word	0x00000bd5
     fcc:	00000ca9 	.word	0x00000ca9
     fd0:	00000d0d 	.word	0x00000d0d
     fd4:	40020001 	.word	0x40020001
     fd8:	c0020000 	.word	0xc0020000
     fdc:	40000002 	.word	0x40000002
     fe0:	40020000 	.word	0x40020000

00000fe4 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     fe4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     fe8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     fea:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     fec:	f3bf 8f5f 	dmb	sy
     ff0:	4770      	bx	lr

00000ff2 <atomic_leave_critical>:
     ff2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     ff6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     ff8:	f383 8810 	msr	PRIMASK, r3
     ffc:	4770      	bx	lr

00000ffe <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
     ffe:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
    1000:	69c3      	ldr	r3, [r0, #28]
    1002:	b103      	cbz	r3, 1006 <can_tx_done+0x8>
		descr->cb.tx_done(descr);
    1004:	4798      	blx	r3
    1006:	bd08      	pop	{r3, pc}

00001008 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    1008:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
    100a:	6a03      	ldr	r3, [r0, #32]
    100c:	b103      	cbz	r3, 1010 <can_rx_done+0x8>
		descr->cb.rx_done(descr);
    100e:	4798      	blx	r3
    1010:	bd08      	pop	{r3, pc}

00001012 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1012:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
    1014:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1016:	b103      	cbz	r3, 101a <can_irq_handler+0x8>
		descr->cb.irq_handler(descr, type);
    1018:	4798      	blx	r3
    101a:	bd08      	pop	{r3, pc}

0000101c <can_async_init>:
{
    101c:	b538      	push	{r3, r4, r5, lr}
    101e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1020:	4604      	mov	r4, r0
    1022:	b1a0      	cbz	r0, 104e <can_async_init+0x32>
    1024:	1c08      	adds	r0, r1, #0
    1026:	bf18      	it	ne
    1028:	2001      	movne	r0, #1
    102a:	2241      	movs	r2, #65	; 0x41
    102c:	4909      	ldr	r1, [pc, #36]	; (1054 <can_async_init+0x38>)
    102e:	4b0a      	ldr	r3, [pc, #40]	; (1058 <can_async_init+0x3c>)
    1030:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
    1032:	4629      	mov	r1, r5
    1034:	4620      	mov	r0, r4
    1036:	4b09      	ldr	r3, [pc, #36]	; (105c <can_async_init+0x40>)
    1038:	4798      	blx	r3
	if (rc) {
    103a:	4603      	mov	r3, r0
    103c:	b928      	cbnz	r0, 104a <can_async_init+0x2e>
	descr->dev.cb.tx_done     = can_tx_done;
    103e:	4a08      	ldr	r2, [pc, #32]	; (1060 <can_async_init+0x44>)
    1040:	6062      	str	r2, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1042:	4a08      	ldr	r2, [pc, #32]	; (1064 <can_async_init+0x48>)
    1044:	60a2      	str	r2, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1046:	4a08      	ldr	r2, [pc, #32]	; (1068 <can_async_init+0x4c>)
    1048:	60e2      	str	r2, [r4, #12]
}
    104a:	4618      	mov	r0, r3
    104c:	bd38      	pop	{r3, r4, r5, pc}
    104e:	2000      	movs	r0, #0
    1050:	e7eb      	b.n	102a <can_async_init+0xe>
    1052:	bf00      	nop
    1054:	0000333c 	.word	0x0000333c
    1058:	0000154d 	.word	0x0000154d
    105c:	00001555 	.word	0x00001555
    1060:	00000fff 	.word	0x00000fff
    1064:	00001009 	.word	0x00001009
    1068:	00001013 	.word	0x00001013

0000106c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    106c:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    106e:	4b12      	ldr	r3, [pc, #72]	; (10b8 <process_ext_irq+0x4c>)
    1070:	6b59      	ldr	r1, [r3, #52]	; 0x34
    1072:	4288      	cmp	r0, r1
    1074:	d01d      	beq.n	10b2 <process_ext_irq+0x46>
    1076:	2206      	movs	r2, #6
    1078:	250d      	movs	r5, #13
    107a:	2400      	movs	r4, #0
    107c:	461e      	mov	r6, r3
				ext_irqs[middle].cb();
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
    107e:	4288      	cmp	r0, r1
			lower = middle + 1;
    1080:	bf87      	ittee	hi
    1082:	3201      	addhi	r2, #1
    1084:	b2d4      	uxtbhi	r4, r2
		} else {
			upper = middle - 1;
    1086:	f102 32ff 	addls.w	r2, r2, #4294967295
    108a:	b2d5      	uxtbls	r5, r2
	while (upper >= lower) {
    108c:	42a5      	cmp	r5, r4
    108e:	d312      	bcc.n	10b6 <process_ext_irq+0x4a>
		middle = (upper + lower) >> 1;
    1090:	192b      	adds	r3, r5, r4
    1092:	105b      	asrs	r3, r3, #1
    1094:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
    1096:	2a0c      	cmp	r2, #12
    1098:	d80d      	bhi.n	10b6 <process_ext_irq+0x4a>
    109a:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
    109c:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
    10a0:	6849      	ldr	r1, [r1, #4]
    10a2:	4281      	cmp	r1, r0
    10a4:	d1eb      	bne.n	107e <process_ext_irq+0x12>
			if (ext_irqs[middle].cb) {
    10a6:	4a04      	ldr	r2, [pc, #16]	; (10b8 <process_ext_irq+0x4c>)
    10a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    10ac:	b11b      	cbz	r3, 10b6 <process_ext_irq+0x4a>
				ext_irqs[middle].cb();
    10ae:	4798      	blx	r3
    10b0:	bd70      	pop	{r4, r5, r6, pc}
		if (ext_irqs[middle].pin == pin) {
    10b2:	2306      	movs	r3, #6
    10b4:	e7f7      	b.n	10a6 <process_ext_irq+0x3a>
    10b6:	bd70      	pop	{r4, r5, r6, pc}
    10b8:	20000030 	.word	0x20000030

000010bc <ext_irq_init>:
{
    10bc:	b508      	push	{r3, lr}
    10be:	4b07      	ldr	r3, [pc, #28]	; (10dc <ext_irq_init+0x20>)
    10c0:	f103 0068 	add.w	r0, r3, #104	; 0x68
		ext_irqs[i].pin = 0xFFFFFFFF;
    10c4:	f04f 31ff 	mov.w	r1, #4294967295
		ext_irqs[i].cb  = NULL;
    10c8:	2200      	movs	r2, #0
		ext_irqs[i].pin = 0xFFFFFFFF;
    10ca:	6059      	str	r1, [r3, #4]
		ext_irqs[i].cb  = NULL;
    10cc:	f843 2b08 	str.w	r2, [r3], #8
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    10d0:	4283      	cmp	r3, r0
    10d2:	d1fa      	bne.n	10ca <ext_irq_init+0xe>
	return _ext_irq_init(process_ext_irq);
    10d4:	4802      	ldr	r0, [pc, #8]	; (10e0 <ext_irq_init+0x24>)
    10d6:	4b03      	ldr	r3, [pc, #12]	; (10e4 <ext_irq_init+0x28>)
    10d8:	4798      	blx	r3
}
    10da:	bd08      	pop	{r3, pc}
    10dc:	20000030 	.word	0x20000030
    10e0:	0000106d 	.word	0x0000106d
    10e4:	000017fd 	.word	0x000017fd

000010e8 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    10e8:	b510      	push	{r4, lr}
    10ea:	b084      	sub	sp, #16
    10ec:	4614      	mov	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    10ee:	8903      	ldrh	r3, [r0, #8]
    10f0:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    10f4:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    10f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    10fa:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    10fe:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1100:	a901      	add	r1, sp, #4
    1102:	3814      	subs	r0, #20
    1104:	4b03      	ldr	r3, [pc, #12]	; (1114 <i2c_m_sync_write+0x2c>)
    1106:	4798      	blx	r3
	if (ret) {
		return ret;
	}

	return n;
}
    1108:	2800      	cmp	r0, #0
    110a:	bf08      	it	eq
    110c:	4620      	moveq	r0, r4
    110e:	b004      	add	sp, #16
    1110:	bd10      	pop	{r4, pc}
    1112:	bf00      	nop
    1114:	00001dd5 	.word	0x00001dd5

00001118 <i2c_m_sync_read>:
{
    1118:	b510      	push	{r4, lr}
    111a:	b084      	sub	sp, #16
    111c:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    111e:	8903      	ldrh	r3, [r0, #8]
    1120:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1124:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1126:	f248 0301 	movw	r3, #32769	; 0x8001
    112a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    112e:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1130:	a901      	add	r1, sp, #4
    1132:	3814      	subs	r0, #20
    1134:	4b03      	ldr	r3, [pc, #12]	; (1144 <i2c_m_sync_read+0x2c>)
    1136:	4798      	blx	r3
}
    1138:	2800      	cmp	r0, #0
    113a:	bf08      	it	eq
    113c:	4620      	moveq	r0, r4
    113e:	b004      	add	sp, #16
    1140:	bd10      	pop	{r4, pc}
    1142:	bf00      	nop
    1144:	00001dd5 	.word	0x00001dd5

00001148 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    1148:	b538      	push	{r3, r4, r5, lr}
    114a:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    114c:	4604      	mov	r4, r0
    114e:	225e      	movs	r2, #94	; 0x5e
    1150:	4908      	ldr	r1, [pc, #32]	; (1174 <i2c_m_sync_init+0x2c>)
    1152:	3000      	adds	r0, #0
    1154:	bf18      	it	ne
    1156:	2001      	movne	r0, #1
    1158:	4b07      	ldr	r3, [pc, #28]	; (1178 <i2c_m_sync_init+0x30>)
    115a:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    115c:	4629      	mov	r1, r5
    115e:	4620      	mov	r0, r4
    1160:	4b06      	ldr	r3, [pc, #24]	; (117c <i2c_m_sync_init+0x34>)
    1162:	4798      	blx	r3
	if (init_status) {
    1164:	4603      	mov	r3, r0
    1166:	b918      	cbnz	r0, 1170 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    1168:	4a05      	ldr	r2, [pc, #20]	; (1180 <i2c_m_sync_init+0x38>)
    116a:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
    116c:	4a05      	ldr	r2, [pc, #20]	; (1184 <i2c_m_sync_init+0x3c>)
    116e:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
    1170:	4618      	mov	r0, r3
    1172:	bd38      	pop	{r3, r4, r5, pc}
    1174:	00003358 	.word	0x00003358
    1178:	0000154d 	.word	0x0000154d
    117c:	00001da5 	.word	0x00001da5
    1180:	00001119 	.word	0x00001119
    1184:	000010e9 	.word	0x000010e9

00001188 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1188:	b538      	push	{r3, r4, r5, lr}
    118a:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    118c:	4604      	mov	r4, r0
    118e:	b1b8      	cbz	r0, 11c0 <spi_m_sync_init+0x38>
    1190:	1c08      	adds	r0, r1, #0
    1192:	bf18      	it	ne
    1194:	2001      	movne	r0, #1
    1196:	2240      	movs	r2, #64	; 0x40
    1198:	490a      	ldr	r1, [pc, #40]	; (11c4 <spi_m_sync_init+0x3c>)
    119a:	4b0b      	ldr	r3, [pc, #44]	; (11c8 <spi_m_sync_init+0x40>)
    119c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    119e:	4620      	mov	r0, r4
    11a0:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
    11a4:	4629      	mov	r1, r5
    11a6:	4b09      	ldr	r3, [pc, #36]	; (11cc <spi_m_sync_init+0x44>)
    11a8:	4798      	blx	r3

	if (rc < 0) {
    11aa:	2800      	cmp	r0, #0
    11ac:	db07      	blt.n	11be <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    11ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    11b2:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    11b4:	4b06      	ldr	r3, [pc, #24]	; (11d0 <spi_m_sync_init+0x48>)
    11b6:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    11b8:	4b06      	ldr	r3, [pc, #24]	; (11d4 <spi_m_sync_init+0x4c>)
    11ba:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    11bc:	2000      	movs	r0, #0
}
    11be:	bd38      	pop	{r3, r4, r5, pc}
    11c0:	2000      	movs	r0, #0
    11c2:	e7e8      	b.n	1196 <spi_m_sync_init+0xe>
    11c4:	00003374 	.word	0x00003374
    11c8:	0000154d 	.word	0x0000154d
    11cc:	000022f1 	.word	0x000022f1
    11d0:	00001255 	.word	0x00001255
    11d4:	00001219 	.word	0x00001219

000011d8 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    11d8:	b530      	push	{r4, r5, lr}
    11da:	b085      	sub	sp, #20
    11dc:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    11de:	4605      	mov	r5, r0
    11e0:	b190      	cbz	r0, 1208 <spi_m_sync_transfer+0x30>
    11e2:	1c08      	adds	r0, r1, #0
    11e4:	bf18      	it	ne
    11e6:	2001      	movne	r0, #1
    11e8:	22b3      	movs	r2, #179	; 0xb3
    11ea:	4908      	ldr	r1, [pc, #32]	; (120c <spi_m_sync_transfer+0x34>)
    11ec:	4b08      	ldr	r3, [pc, #32]	; (1210 <spi_m_sync_transfer+0x38>)
    11ee:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    11f0:	6823      	ldr	r3, [r4, #0]
    11f2:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    11f4:	6863      	ldr	r3, [r4, #4]
    11f6:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    11f8:	68a3      	ldr	r3, [r4, #8]
    11fa:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
    11fc:	a901      	add	r1, sp, #4
    11fe:	1d28      	adds	r0, r5, #4
    1200:	4b04      	ldr	r3, [pc, #16]	; (1214 <spi_m_sync_transfer+0x3c>)
    1202:	4798      	blx	r3
}
    1204:	b005      	add	sp, #20
    1206:	bd30      	pop	{r4, r5, pc}
    1208:	2000      	movs	r0, #0
    120a:	e7ed      	b.n	11e8 <spi_m_sync_transfer+0x10>
    120c:	00003374 	.word	0x00003374
    1210:	0000154d 	.word	0x0000154d
    1214:	00002489 	.word	0x00002489

00001218 <_spi_m_sync_io_write>:
{
    1218:	b570      	push	{r4, r5, r6, lr}
    121a:	b084      	sub	sp, #16
    121c:	460e      	mov	r6, r1
    121e:	4615      	mov	r5, r2
	ASSERT(io);
    1220:	4604      	mov	r4, r0
    1222:	22a3      	movs	r2, #163	; 0xa3
    1224:	4908      	ldr	r1, [pc, #32]	; (1248 <_spi_m_sync_io_write+0x30>)
    1226:	3000      	adds	r0, #0
    1228:	bf18      	it	ne
    122a:	2001      	movne	r0, #1
    122c:	4b07      	ldr	r3, [pc, #28]	; (124c <_spi_m_sync_io_write+0x34>)
    122e:	4798      	blx	r3
	xfer.rxbuf = 0;
    1230:	2300      	movs	r3, #0
    1232:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    1234:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    1236:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1238:	a901      	add	r1, sp, #4
    123a:	f1a4 000c 	sub.w	r0, r4, #12
    123e:	4b04      	ldr	r3, [pc, #16]	; (1250 <_spi_m_sync_io_write+0x38>)
    1240:	4798      	blx	r3
}
    1242:	b004      	add	sp, #16
    1244:	bd70      	pop	{r4, r5, r6, pc}
    1246:	bf00      	nop
    1248:	00003374 	.word	0x00003374
    124c:	0000154d 	.word	0x0000154d
    1250:	000011d9 	.word	0x000011d9

00001254 <_spi_m_sync_io_read>:
{
    1254:	b570      	push	{r4, r5, r6, lr}
    1256:	b084      	sub	sp, #16
    1258:	460e      	mov	r6, r1
    125a:	4615      	mov	r5, r2
	ASSERT(io);
    125c:	4604      	mov	r4, r0
    125e:	2287      	movs	r2, #135	; 0x87
    1260:	4908      	ldr	r1, [pc, #32]	; (1284 <_spi_m_sync_io_read+0x30>)
    1262:	3000      	adds	r0, #0
    1264:	bf18      	it	ne
    1266:	2001      	movne	r0, #1
    1268:	4b07      	ldr	r3, [pc, #28]	; (1288 <_spi_m_sync_io_read+0x34>)
    126a:	4798      	blx	r3
	xfer.rxbuf = buf;
    126c:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    126e:	2300      	movs	r3, #0
    1270:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    1272:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1274:	a901      	add	r1, sp, #4
    1276:	f1a4 000c 	sub.w	r0, r4, #12
    127a:	4b04      	ldr	r3, [pc, #16]	; (128c <_spi_m_sync_io_read+0x38>)
    127c:	4798      	blx	r3
}
    127e:	b004      	add	sp, #16
    1280:	bd70      	pop	{r4, r5, r6, pc}
    1282:	bf00      	nop
    1284:	00003374 	.word	0x00003374
    1288:	0000154d 	.word	0x0000154d
    128c:	000011d9 	.word	0x000011d9

00001290 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1290:	4b0f      	ldr	r3, [pc, #60]	; (12d0 <_usb_d_find_ep+0x40>)
    1292:	7859      	ldrb	r1, [r3, #1]
    1294:	4288      	cmp	r0, r1
    1296:	d018      	beq.n	12ca <_usb_d_find_ep+0x3a>
{
    1298:	b430      	push	{r4, r5}
    129a:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    129c:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    129e:	f000 050f 	and.w	r5, r0, #15
    12a2:	e007      	b.n	12b4 <_usb_d_find_ep+0x24>
    12a4:	3301      	adds	r3, #1
    12a6:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    12a8:	2b04      	cmp	r3, #4
    12aa:	d009      	beq.n	12c0 <_usb_d_find_ep+0x30>
    12ac:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    12ae:	7851      	ldrb	r1, [r2, #1]
    12b0:	4281      	cmp	r1, r0
    12b2:	d007      	beq.n	12c4 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    12b4:	7814      	ldrb	r4, [r2, #0]
    12b6:	2c00      	cmp	r4, #0
    12b8:	d1f4      	bne.n	12a4 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    12ba:	428d      	cmp	r5, r1
    12bc:	d1f2      	bne.n	12a4 <_usb_d_find_ep+0x14>
    12be:	e001      	b.n	12c4 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    12c0:	f04f 33ff 	mov.w	r3, #4294967295
}
    12c4:	4618      	mov	r0, r3
    12c6:	bc30      	pop	{r4, r5}
    12c8:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    12ca:	2300      	movs	r3, #0
}
    12cc:	4618      	mov	r0, r3
    12ce:	4770      	bx	lr
    12d0:	20000098 	.word	0x20000098

000012d4 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    12d4:	2000      	movs	r0, #0
    12d6:	4770      	bx	lr

000012d8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    12d8:	b538      	push	{r3, r4, r5, lr}
    12da:	4604      	mov	r4, r0
    12dc:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    12de:	4b09      	ldr	r3, [pc, #36]	; (1304 <usb_d_cb_trans_more+0x2c>)
    12e0:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    12e2:	4b09      	ldr	r3, [pc, #36]	; (1308 <usb_d_cb_trans_more+0x30>)
    12e4:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    12e8:	789b      	ldrb	r3, [r3, #2]
    12ea:	2b03      	cmp	r3, #3
    12ec:	d001      	beq.n	12f2 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    12ee:	2000      	movs	r0, #0
}
    12f0:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    12f2:	4b05      	ldr	r3, [pc, #20]	; (1308 <usb_d_cb_trans_more+0x30>)
    12f4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    12f8:	6983      	ldr	r3, [r0, #24]
    12fa:	4629      	mov	r1, r5
    12fc:	4620      	mov	r0, r4
    12fe:	4798      	blx	r3
    1300:	bd38      	pop	{r3, r4, r5, pc}
    1302:	bf00      	nop
    1304:	00001291 	.word	0x00001291
    1308:	20000098 	.word	0x20000098

0000130c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    130c:	b5f0      	push	{r4, r5, r6, r7, lr}
    130e:	b085      	sub	sp, #20
    1310:	4606      	mov	r6, r0
    1312:	460d      	mov	r5, r1
    1314:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1316:	4b4d      	ldr	r3, [pc, #308]	; (144c <_usb_d_cb_trans_done+0x140>)
    1318:	4798      	blx	r3
    131a:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    131c:	2d00      	cmp	r5, #0
    131e:	d15b      	bne.n	13d8 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1320:	4a4b      	ldr	r2, [pc, #300]	; (1450 <_usb_d_cb_trans_done+0x144>)
    1322:	0143      	lsls	r3, r0, #5
    1324:	18d1      	adds	r1, r2, r3
    1326:	2000      	movs	r0, #0
    1328:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    132a:	5cd3      	ldrb	r3, [r2, r3]
    132c:	b173      	cbz	r3, 134c <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    132e:	4b48      	ldr	r3, [pc, #288]	; (1450 <_usb_d_cb_trans_done+0x144>)
    1330:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1334:	2201      	movs	r2, #1
    1336:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    1338:	4845      	ldr	r0, [pc, #276]	; (1450 <_usb_d_cb_trans_done+0x144>)
    133a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    133e:	69c3      	ldr	r3, [r0, #28]
    1340:	463a      	mov	r2, r7
    1342:	78c1      	ldrb	r1, [r0, #3]
    1344:	4630      	mov	r0, r6
    1346:	4798      	blx	r3
}
    1348:	b005      	add	sp, #20
    134a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    134c:	788b      	ldrb	r3, [r1, #2]
    134e:	2b03      	cmp	r3, #3
    1350:	d00b      	beq.n	136a <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    1352:	483f      	ldr	r0, [pc, #252]	; (1450 <_usb_d_cb_trans_done+0x144>)
    1354:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    1358:	4614      	mov	r4, r2
    135a:	69d3      	ldr	r3, [r2, #28]
    135c:	320c      	adds	r2, #12
    135e:	2100      	movs	r1, #0
    1360:	7860      	ldrb	r0, [r4, #1]
    1362:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1364:	2302      	movs	r3, #2
    1366:	70a3      	strb	r3, [r4, #2]
    1368:	e7ee      	b.n	1348 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    136a:	460b      	mov	r3, r1
    136c:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    1370:	460a      	mov	r2, r1
    1372:	69ce      	ldr	r6, [r1, #28]
    1374:	320c      	adds	r2, #12
    1376:	2101      	movs	r1, #1
    1378:	7858      	ldrb	r0, [r3, #1]
    137a:	47b0      	blx	r6
		if (err) {
    137c:	b1a0      	cbz	r0, 13a8 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    137e:	4b34      	ldr	r3, [pc, #208]	; (1450 <_usb_d_cb_trans_done+0x144>)
    1380:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1384:	2205      	movs	r2, #5
    1386:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    1388:	2202      	movs	r2, #2
    138a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    138c:	2d00      	cmp	r5, #0
    138e:	db09      	blt.n	13a4 <_usb_d_cb_trans_done+0x98>
    1390:	482f      	ldr	r0, [pc, #188]	; (1450 <_usb_d_cb_trans_done+0x144>)
    1392:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1396:	7840      	ldrb	r0, [r0, #1]
    1398:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    139c:	2101      	movs	r1, #1
    139e:	4b2d      	ldr	r3, [pc, #180]	; (1454 <_usb_d_cb_trans_done+0x148>)
    13a0:	4798      	blx	r3
    13a2:	e7d1      	b.n	1348 <_usb_d_cb_trans_done+0x3c>
    13a4:	7858      	ldrb	r0, [r3, #1]
    13a6:	e7f9      	b.n	139c <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    13a8:	4829      	ldr	r0, [pc, #164]	; (1450 <_usb_d_cb_trans_done+0x144>)
    13aa:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    13ae:	2304      	movs	r3, #4
    13b0:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    13b2:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    13b4:	2200      	movs	r2, #0
    13b6:	9201      	str	r2, [sp, #4]
    13b8:	9202      	str	r2, [sp, #8]
    13ba:	4295      	cmp	r5, r2
    13bc:	bfac      	ite	ge
    13be:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    13c2:	f003 030f 	andlt.w	r3, r3, #15
    13c6:	f88d 300c 	strb.w	r3, [sp, #12]
    13ca:	2301      	movs	r3, #1
    13cc:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    13d0:	a801      	add	r0, sp, #4
    13d2:	4b21      	ldr	r3, [pc, #132]	; (1458 <_usb_d_cb_trans_done+0x14c>)
    13d4:	4798      	blx	r3
    13d6:	e7b7      	b.n	1348 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    13d8:	2d01      	cmp	r5, #1
    13da:	d00a      	beq.n	13f2 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    13dc:	2d02      	cmp	r5, #2
    13de:	d01c      	beq.n	141a <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    13e0:	2d03      	cmp	r5, #3
    13e2:	d02a      	beq.n	143a <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    13e4:	4b1a      	ldr	r3, [pc, #104]	; (1450 <_usb_d_cb_trans_done+0x144>)
    13e6:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    13ea:	2206      	movs	r2, #6
    13ec:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    13ee:	70da      	strb	r2, [r3, #3]
    13f0:	e7a2      	b.n	1338 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    13f2:	4a17      	ldr	r2, [pc, #92]	; (1450 <_usb_d_cb_trans_done+0x144>)
    13f4:	0143      	lsls	r3, r0, #5
    13f6:	18d1      	adds	r1, r2, r3
    13f8:	2002      	movs	r0, #2
    13fa:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    13fc:	5cd3      	ldrb	r3, [r2, r3]
    13fe:	b12b      	cbz	r3, 140c <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    1400:	4b13      	ldr	r3, [pc, #76]	; (1450 <_usb_d_cb_trans_done+0x144>)
    1402:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1406:	2205      	movs	r2, #5
    1408:	709a      	strb	r2, [r3, #2]
    140a:	e795      	b.n	1338 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    140c:	460b      	mov	r3, r1
    140e:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1410:	2100      	movs	r1, #0
    1412:	4630      	mov	r0, r6
    1414:	4b0f      	ldr	r3, [pc, #60]	; (1454 <_usb_d_cb_trans_done+0x148>)
    1416:	4798      	blx	r3
    1418:	e78e      	b.n	1338 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    141a:	4a0d      	ldr	r2, [pc, #52]	; (1450 <_usb_d_cb_trans_done+0x144>)
    141c:	0143      	lsls	r3, r0, #5
    141e:	18d1      	adds	r1, r2, r3
    1420:	2004      	movs	r0, #4
    1422:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1424:	5cd3      	ldrb	r3, [r2, r3]
    1426:	b12b      	cbz	r3, 1434 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1428:	4b09      	ldr	r3, [pc, #36]	; (1450 <_usb_d_cb_trans_done+0x144>)
    142a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    142e:	2201      	movs	r2, #1
    1430:	709a      	strb	r2, [r3, #2]
    1432:	e781      	b.n	1338 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1434:	2302      	movs	r3, #2
    1436:	708b      	strb	r3, [r1, #2]
			return;
    1438:	e786      	b.n	1348 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    143a:	4b05      	ldr	r3, [pc, #20]	; (1450 <_usb_d_cb_trans_done+0x144>)
    143c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1440:	2200      	movs	r2, #0
    1442:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    1444:	2205      	movs	r2, #5
    1446:	70da      	strb	r2, [r3, #3]
    1448:	e776      	b.n	1338 <_usb_d_cb_trans_done+0x2c>
    144a:	bf00      	nop
    144c:	00001291 	.word	0x00001291
    1450:	20000098 	.word	0x20000098
    1454:	00002ed9 	.word	0x00002ed9
    1458:	00003081 	.word	0x00003081

0000145c <usb_d_cb_trans_setup>:
{
    145c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1460:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1462:	4b1c      	ldr	r3, [pc, #112]	; (14d4 <usb_d_cb_trans_setup+0x78>)
    1464:	4798      	blx	r3
    1466:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    1468:	4c1b      	ldr	r4, [pc, #108]	; (14d8 <usb_d_cb_trans_setup+0x7c>)
    146a:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    146e:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    1470:	4621      	mov	r1, r4
    1472:	4628      	mov	r0, r5
    1474:	4b19      	ldr	r3, [pc, #100]	; (14dc <usb_d_cb_trans_setup+0x80>)
    1476:	4798      	blx	r3
	if (n != 8) {
    1478:	b2c0      	uxtb	r0, r0
    147a:	2808      	cmp	r0, #8
    147c:	d009      	beq.n	1492 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    147e:	2101      	movs	r1, #1
    1480:	4628      	mov	r0, r5
    1482:	4c17      	ldr	r4, [pc, #92]	; (14e0 <usb_d_cb_trans_setup+0x84>)
    1484:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1486:	2101      	movs	r1, #1
    1488:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    148c:	47a0      	blx	r4
		return;
    148e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1492:	2100      	movs	r1, #0
    1494:	4628      	mov	r0, r5
    1496:	4f12      	ldr	r7, [pc, #72]	; (14e0 <usb_d_cb_trans_setup+0x84>)
    1498:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    149a:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    149e:	2100      	movs	r1, #0
    14a0:	4640      	mov	r0, r8
    14a2:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    14a4:	4b0c      	ldr	r3, [pc, #48]	; (14d8 <usb_d_cb_trans_setup+0x7c>)
    14a6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    14aa:	2201      	movs	r2, #1
    14ac:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    14ae:	695b      	ldr	r3, [r3, #20]
    14b0:	4621      	mov	r1, r4
    14b2:	4628      	mov	r0, r5
    14b4:	4798      	blx	r3
    14b6:	b108      	cbz	r0, 14bc <usb_d_cb_trans_setup+0x60>
    14b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    14bc:	4b06      	ldr	r3, [pc, #24]	; (14d8 <usb_d_cb_trans_setup+0x7c>)
    14be:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    14c2:	2305      	movs	r3, #5
    14c4:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    14c6:	2101      	movs	r1, #1
    14c8:	4628      	mov	r0, r5
    14ca:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    14cc:	2101      	movs	r1, #1
    14ce:	4640      	mov	r0, r8
    14d0:	47b8      	blx	r7
    14d2:	e7f1      	b.n	14b8 <usb_d_cb_trans_setup+0x5c>
    14d4:	00001291 	.word	0x00001291
    14d8:	20000098 	.word	0x20000098
    14dc:	00003021 	.word	0x00003021
    14e0:	00002ed9 	.word	0x00002ed9

000014e4 <usb_d_init>:

int32_t usb_d_init(void)
{
    14e4:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    14e6:	4b11      	ldr	r3, [pc, #68]	; (152c <usb_d_init+0x48>)
    14e8:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    14ea:	2800      	cmp	r0, #0
    14ec:	db1c      	blt.n	1528 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    14ee:	4c10      	ldr	r4, [pc, #64]	; (1530 <usb_d_init+0x4c>)
    14f0:	2280      	movs	r2, #128	; 0x80
    14f2:	2100      	movs	r1, #0
    14f4:	4620      	mov	r0, r4
    14f6:	4b0f      	ldr	r3, [pc, #60]	; (1534 <usb_d_init+0x50>)
    14f8:	4798      	blx	r3
    14fa:	4623      	mov	r3, r4
    14fc:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1500:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1502:	4a0d      	ldr	r2, [pc, #52]	; (1538 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1504:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1506:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1508:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    150a:	61da      	str	r2, [r3, #28]
    150c:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    150e:	4283      	cmp	r3, r0
    1510:	d1f8      	bne.n	1504 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1512:	490a      	ldr	r1, [pc, #40]	; (153c <usb_d_init+0x58>)
    1514:	2000      	movs	r0, #0
    1516:	4c0a      	ldr	r4, [pc, #40]	; (1540 <usb_d_init+0x5c>)
    1518:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    151a:	490a      	ldr	r1, [pc, #40]	; (1544 <usb_d_init+0x60>)
    151c:	2001      	movs	r0, #1
    151e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1520:	4909      	ldr	r1, [pc, #36]	; (1548 <usb_d_init+0x64>)
    1522:	2002      	movs	r0, #2
    1524:	47a0      	blx	r4
	return ERR_NONE;
    1526:	2000      	movs	r0, #0
}
    1528:	bd10      	pop	{r4, pc}
    152a:	bf00      	nop
    152c:	00002ddd 	.word	0x00002ddd
    1530:	20000098 	.word	0x20000098
    1534:	0000332b 	.word	0x0000332b
    1538:	000012d5 	.word	0x000012d5
    153c:	0000145d 	.word	0x0000145d
    1540:	00003261 	.word	0x00003261
    1544:	000012d9 	.word	0x000012d9
    1548:	0000130d 	.word	0x0000130d

0000154c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    154c:	b900      	cbnz	r0, 1550 <assert+0x4>
		__asm("BKPT #0");
    154e:	be00      	bkpt	0x0000
    1550:	4770      	bx	lr
	...

00001554 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    1554:	b430      	push	{r4, r5}
	dev->hw = hw;
    1556:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    1558:	698b      	ldr	r3, [r1, #24]
    155a:	f043 0301 	orr.w	r3, r3, #1
    155e:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    1560:	6802      	ldr	r2, [r0, #0]
}

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    1562:	6993      	ldr	r3, [r2, #24]
    1564:	f013 0f01 	tst.w	r3, #1
    1568:	d0fb      	beq.n	1562 <_can_async_init+0xe>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    156a:	6993      	ldr	r3, [r2, #24]
    156c:	f043 0302 	orr.w	r3, r3, #2
    1570:	6193      	str	r3, [r2, #24]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    1572:	4b34      	ldr	r3, [pc, #208]	; (1644 <_can_async_init+0xf0>)
    1574:	4299      	cmp	r1, r3
    1576:	d011      	beq.n	159c <_can_async_init+0x48>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    1578:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    157a:	6993      	ldr	r3, [r2, #24]
    157c:	f023 0302 	bic.w	r3, r3, #2
    1580:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    1582:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    1584:	6993      	ldr	r3, [r2, #24]
    1586:	f023 0301 	bic.w	r3, r3, #1
    158a:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    158c:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
    158e:	6993      	ldr	r3, [r2, #24]
    1590:	f013 0f01 	tst.w	r3, #1
    1594:	d1fb      	bne.n	158e <_can_async_init+0x3a>
	};

	return ERR_NONE;
}
    1596:	2000      	movs	r0, #0
    1598:	bc30      	pop	{r4, r5}
    159a:	4770      	bx	lr
		_can1_dev    = dev;
    159c:	4b2a      	ldr	r3, [pc, #168]	; (1648 <_can_async_init+0xf4>)
    159e:	461a      	mov	r2, r3
    15a0:	f842 0b04 	str.w	r0, [r2], #4
		dev->context = (void *)&_can1_context;
    15a4:	4929      	ldr	r1, [pc, #164]	; (164c <_can_async_init+0xf8>)
    15a6:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    15a8:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    15aa:	698c      	ldr	r4, [r1, #24]
    15ac:	618c      	str	r4, [r1, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    15ae:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
    15b0:	2400      	movs	r4, #0
    15b2:	608c      	str	r4, [r1, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    15b4:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    15b6:	4d26      	ldr	r5, [pc, #152]	; (1650 <_can_async_init+0xfc>)
    15b8:	61cd      	str	r5, [r1, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    15ba:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
    15bc:	f640 2533 	movw	r5, #2611	; 0xa33
    15c0:	60cd      	str	r5, [r1, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    15c2:	6805      	ldr	r5, [r0, #0]
    15c4:	4923      	ldr	r1, [pc, #140]	; (1654 <_can_async_init+0x100>)
    15c6:	b289      	uxth	r1, r1
    15c8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    15cc:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    15d0:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    15d2:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    15d6:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    15d8:	f8c1 40c8 	str.w	r4, [r1, #200]	; 0xc8
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    15dc:	6805      	ldr	r5, [r0, #0]
    15de:	491e      	ldr	r1, [pc, #120]	; (1658 <_can_async_init+0x104>)
    15e0:	b289      	uxth	r1, r1
    15e2:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
	((Can *)hw)->TXBC.reg = data;
    15e6:	f8c5 10c0 	str.w	r1, [r5, #192]	; 0xc0
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    15ea:	6801      	ldr	r1, [r0, #0]
    15ec:	b292      	uxth	r2, r2
    15ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    15f2:	f8c1 20f0 	str.w	r2, [r1, #240]	; 0xf0
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    15f6:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->GFC.reg = data;
    15f8:	2128      	movs	r1, #40	; 0x28
    15fa:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    15fe:	6801      	ldr	r1, [r0, #0]
    1600:	f103 0214 	add.w	r2, r3, #20
    1604:	b292      	uxth	r2, r2
    1606:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	((Can *)hw)->SIDFC.reg = data;
    160a:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    160e:	6802      	ldr	r2, [r0, #0]
    1610:	331c      	adds	r3, #28
    1612:	b29b      	uxth	r3, r3
    1614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Can *)hw)->XIDFC.reg = data;
    1618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    161c:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->XIDAM.reg = data;
    161e:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1622:	4b0e      	ldr	r3, [pc, #56]	; (165c <_can_async_init+0x108>)
    1624:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    162c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1630:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1634:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1638:	609a      	str	r2, [r3, #8]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    163a:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
    163c:	2201      	movs	r2, #1
    163e:	65da      	str	r2, [r3, #92]	; 0x5c
    1640:	e79a      	b.n	1578 <_can_async_init+0x24>
    1642:	bf00      	nop
    1644:	42000400 	.word	0x42000400
    1648:	20000118 	.word	0x20000118
    164c:	20000000 	.word	0x20000000
    1650:	06020a07 	.word	0x06020a07
    1654:	20000420 	.word	0x20000420
    1658:	20000400 	.word	0x20000400
    165c:	e000e100 	.word	0xe000e100

00001660 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    1660:	b538      	push	{r3, r4, r5, lr}
	struct _can_async_device *dev = _can1_dev;
    1662:	4b1d      	ldr	r3, [pc, #116]	; (16d8 <CAN1_Handler+0x78>)
    1664:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    1666:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
    1668:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
    166a:	f014 0f01 	tst.w	r4, #1
    166e:	d11c      	bne.n	16aa <CAN1_Handler+0x4a>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
    1670:	f414 7f00 	tst.w	r4, #512	; 0x200
    1674:	d11d      	bne.n	16b2 <CAN1_Handler+0x52>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
    1676:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
    167a:	d11e      	bne.n	16ba <CAN1_Handler+0x5a>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
    167c:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
    1680:	d120      	bne.n	16c4 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
    1682:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
    1686:	d00a      	beq.n	169e <CAN1_Handler+0x3e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    1688:	68ea      	ldr	r2, [r5, #12]
    168a:	682b      	ldr	r3, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    168e:	f3c3 1340 	ubfx	r3, r3, #5, #1
    1692:	2b00      	cmp	r3, #0
    1694:	bf14      	ite	ne
    1696:	2102      	movne	r1, #2
    1698:	2101      	moveq	r1, #1
    169a:	4628      	mov	r0, r5
    169c:	4790      	blx	r2
	}

	if (ir & CAN_IR_RF0L) {
    169e:	f014 0f08 	tst.w	r4, #8
    16a2:	d114      	bne.n	16ce <CAN1_Handler+0x6e>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
    16a4:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
    16a6:	651c      	str	r4, [r3, #80]	; 0x50
    16a8:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
    16aa:	68ab      	ldr	r3, [r5, #8]
    16ac:	4628      	mov	r0, r5
    16ae:	4798      	blx	r3
    16b0:	e7de      	b.n	1670 <CAN1_Handler+0x10>
		dev->cb.tx_done(dev);
    16b2:	686b      	ldr	r3, [r5, #4]
    16b4:	4628      	mov	r0, r5
    16b6:	4798      	blx	r3
    16b8:	e7dd      	b.n	1676 <CAN1_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    16ba:	68eb      	ldr	r3, [r5, #12]
    16bc:	2103      	movs	r1, #3
    16be:	4628      	mov	r0, r5
    16c0:	4798      	blx	r3
    16c2:	e7db      	b.n	167c <CAN1_Handler+0x1c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    16c4:	68eb      	ldr	r3, [r5, #12]
    16c6:	2100      	movs	r1, #0
    16c8:	4628      	mov	r0, r5
    16ca:	4798      	blx	r3
    16cc:	e7d9      	b.n	1682 <CAN1_Handler+0x22>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    16ce:	68eb      	ldr	r3, [r5, #12]
    16d0:	2104      	movs	r1, #4
    16d2:	4628      	mov	r0, r5
    16d4:	4798      	blx	r3
    16d6:	e7e5      	b.n	16a4 <CAN1_Handler+0x44>
    16d8:	20000118 	.word	0x20000118

000016dc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    16dc:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    16de:	4a08      	ldr	r2, [pc, #32]	; (1700 <_init_chip+0x24>)
    16e0:	8813      	ldrh	r3, [r2, #0]
    16e2:	b29b      	uxth	r3, r3
    16e4:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    16e6:	4b07      	ldr	r3, [pc, #28]	; (1704 <_init_chip+0x28>)
    16e8:	4798      	blx	r3
	_oscctrl_init_sources();
    16ea:	4b07      	ldr	r3, [pc, #28]	; (1708 <_init_chip+0x2c>)
    16ec:	4798      	blx	r3
	_mclk_init();
    16ee:	4b07      	ldr	r3, [pc, #28]	; (170c <_init_chip+0x30>)
    16f0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    16f2:	4b07      	ldr	r3, [pc, #28]	; (1710 <_init_chip+0x34>)
    16f4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    16f6:	f640 70ff 	movw	r0, #4095	; 0xfff
    16fa:	4b06      	ldr	r3, [pc, #24]	; (1714 <_init_chip+0x38>)
    16fc:	4798      	blx	r3
    16fe:	bd08      	pop	{r3, pc}
    1700:	41004000 	.word	0x41004000
    1704:	00001add 	.word	0x00001add
    1708:	00001afd 	.word	0x00001afd
    170c:	00001ad1 	.word	0x00001ad1
    1710:	00001b19 	.word	0x00001b19
    1714:	00001a59 	.word	0x00001a59

00001718 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    1718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    171c:	b082      	sub	sp, #8
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
    171e:	4b32      	ldr	r3, [pc, #200]	; (17e8 <_ext_irq_handler+0xd0>)
    1720:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    1722:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1724:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
    1726:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
    1728:	4b30      	ldr	r3, [pc, #192]	; (17ec <_ext_irq_handler+0xd4>)
    172a:	6818      	ldr	r0, [r3, #0]
    172c:	f44f 728c 	mov.w	r2, #280	; 0x118
    1730:	492f      	ldr	r1, [pc, #188]	; (17f0 <_ext_irq_handler+0xd8>)
    1732:	3000      	adds	r0, #0
    1734:	bf18      	it	ne
    1736:	2001      	movne	r0, #1
    1738:	4b2e      	ldr	r3, [pc, #184]	; (17f4 <_ext_irq_handler+0xdc>)
    173a:	4798      	blx	r3

	while (flags) {
    173c:	9b01      	ldr	r3, [sp, #4]
    173e:	2b00      	cmp	r3, #0
    1740:	d04e      	beq.n	17e0 <_ext_irq_handler+0xc8>
    1742:	f04f 36ff 	mov.w	r6, #4294967295
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    1746:	4d2c      	ldr	r5, [pc, #176]	; (17f8 <_ext_irq_handler+0xe0>)
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
    1748:	4f28      	ldr	r7, [pc, #160]	; (17ec <_ext_irq_handler+0xd4>)
	return ((Eic *)hw)->INTFLAG.reg;
    174a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 17e8 <_ext_irq_handler+0xd0>
    174e:	e03c      	b.n	17ca <_ext_irq_handler+0xb2>
					pin = _map[middle].pin;
    1750:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
    1754:	f8de 6004 	ldr.w	r6, [lr, #4]
			if (INVALID_PIN_NUMBER != pin) {
    1758:	f1b6 3fff 	cmp.w	r6, #4294967295
    175c:	d002      	beq.n	1764 <_ext_irq_handler+0x4c>
				callback(pin);
    175e:	4630      	mov	r0, r6
    1760:	683b      	ldr	r3, [r7, #0]
    1762:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1764:	9b01      	ldr	r3, [sp, #4]
    1766:	2201      	movs	r2, #1
    1768:	fa02 f404 	lsl.w	r4, r2, r4
    176c:	ea23 0404 	bic.w	r4, r3, r4
    1770:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    1772:	9b01      	ldr	r3, [sp, #4]
    1774:	fa93 fea3 	rbit	lr, r3
    1778:	fabe fe8e 	clz	lr, lr
    177c:	2b00      	cmp	r3, #0
		while (-1 != pos) {
    177e:	bf08      	it	eq
    1780:	f04f 3eff 	moveq.w	lr, #4294967295
    1784:	d019      	beq.n	17ba <_ext_irq_handler+0xa2>
				if (_map[middle].extint == pos) {
    1786:	4674      	mov	r4, lr
    1788:	f1be 0f06 	cmp.w	lr, #6
    178c:	d0e0      	beq.n	1750 <_ext_irq_handler+0x38>
    178e:	2206      	movs	r2, #6
    1790:	4613      	mov	r3, r2
    1792:	200d      	movs	r0, #13
    1794:	2100      	movs	r1, #0
				if (_map[middle].extint < pos) {
    1796:	4294      	cmp	r4, r2
					lower = middle + 1;
    1798:	bfc7      	ittee	gt
    179a:	3301      	addgt	r3, #1
    179c:	b2d9      	uxtbgt	r1, r3
					upper = middle - 1;
    179e:	f103 33ff 	addle.w	r3, r3, #4294967295
    17a2:	b2d8      	uxtble	r0, r3
			while (upper >= lower) {
    17a4:	4281      	cmp	r1, r0
    17a6:	d8d7      	bhi.n	1758 <_ext_irq_handler+0x40>
				middle = (upper + lower) >> 1;
    17a8:	1843      	adds	r3, r0, r1
    17aa:	f3c3 0347 	ubfx	r3, r3, #1, #8
    17ae:	469e      	mov	lr, r3
				if (_map[middle].extint == pos) {
    17b0:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    17b4:	42a2      	cmp	r2, r4
    17b6:	d1ee      	bne.n	1796 <_ext_irq_handler+0x7e>
    17b8:	e7ca      	b.n	1750 <_ext_irq_handler+0x38>
    17ba:	f8d8 3014 	ldr.w	r3, [r8, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    17be:	9301      	str	r3, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    17c0:	9b01      	ldr	r3, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    17c2:	f8c8 3014 	str.w	r3, [r8, #20]
	while (flags) {
    17c6:	9b01      	ldr	r3, [sp, #4]
    17c8:	b153      	cbz	r3, 17e0 <_ext_irq_handler+0xc8>
		pos = ffs(flags) - 1;
    17ca:	9b01      	ldr	r3, [sp, #4]
    17cc:	fa93 fea3 	rbit	lr, r3
    17d0:	fabe fe8e 	clz	lr, lr
    17d4:	2b00      	cmp	r3, #0
		while (-1 != pos) {
    17d6:	bf08      	it	eq
    17d8:	f04f 3eff 	moveq.w	lr, #4294967295
    17dc:	d1d3      	bne.n	1786 <_ext_irq_handler+0x6e>
    17de:	e7ec      	b.n	17ba <_ext_irq_handler+0xa2>
	}
}
    17e0:	b002      	add	sp, #8
    17e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    17e6:	bf00      	nop
    17e8:	40002800 	.word	0x40002800
    17ec:	20000144 	.word	0x20000144
    17f0:	000033f8 	.word	0x000033f8
    17f4:	0000154d 	.word	0x0000154d
    17f8:	00003390 	.word	0x00003390

000017fc <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    17fc:	4b6c      	ldr	r3, [pc, #432]	; (19b0 <_ext_irq_init+0x1b4>)
    17fe:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    1800:	f013 0f01 	tst.w	r3, #1
    1804:	d11f      	bne.n	1846 <_ext_irq_init+0x4a>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1806:	4a6a      	ldr	r2, [pc, #424]	; (19b0 <_ext_irq_init+0x1b4>)
    1808:	6853      	ldr	r3, [r2, #4]
    180a:	f013 0f03 	tst.w	r3, #3
    180e:	d1fb      	bne.n	1808 <_ext_irq_init+0xc>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1810:	4b67      	ldr	r3, [pc, #412]	; (19b0 <_ext_irq_init+0x1b4>)
    1812:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    1814:	f013 0f02 	tst.w	r3, #2
    1818:	d00d      	beq.n	1836 <_ext_irq_init+0x3a>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    181a:	4a65      	ldr	r2, [pc, #404]	; (19b0 <_ext_irq_init+0x1b4>)
    181c:	7813      	ldrb	r3, [r2, #0]
    181e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1822:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1824:	6853      	ldr	r3, [r2, #4]
    1826:	f013 0f03 	tst.w	r3, #3
    182a:	d1fb      	bne.n	1824 <_ext_irq_init+0x28>
    182c:	4a60      	ldr	r2, [pc, #384]	; (19b0 <_ext_irq_init+0x1b4>)
    182e:	6853      	ldr	r3, [r2, #4]
    1830:	f013 0f02 	tst.w	r3, #2
    1834:	d1fb      	bne.n	182e <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    1836:	2201      	movs	r2, #1
    1838:	4b5d      	ldr	r3, [pc, #372]	; (19b0 <_ext_irq_init+0x1b4>)
    183a:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    183c:	461a      	mov	r2, r3
    183e:	6853      	ldr	r3, [r2, #4]
    1840:	f013 0f03 	tst.w	r3, #3
    1844:	d1fb      	bne.n	183e <_ext_irq_init+0x42>
    1846:	4a5a      	ldr	r2, [pc, #360]	; (19b0 <_ext_irq_init+0x1b4>)
    1848:	6853      	ldr	r3, [r2, #4]
    184a:	f013 0f01 	tst.w	r3, #1
    184e:	d1fb      	bne.n	1848 <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
    1850:	4a57      	ldr	r2, [pc, #348]	; (19b0 <_ext_irq_init+0x1b4>)
    1852:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    1854:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    1858:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    185a:	6853      	ldr	r3, [r2, #4]
    185c:	f013 0f03 	tst.w	r3, #3
    1860:	d1fb      	bne.n	185a <_ext_irq_init+0x5e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1862:	4b53      	ldr	r3, [pc, #332]	; (19b0 <_ext_irq_init+0x1b4>)
    1864:	2200      	movs	r2, #0
    1866:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1868:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    186a:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    186c:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    186e:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    1870:	61da      	str	r2, [r3, #28]
    1872:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1874:	781a      	ldrb	r2, [r3, #0]
    1876:	f042 0202 	orr.w	r2, r2, #2
    187a:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    187c:	461a      	mov	r2, r3
    187e:	6853      	ldr	r3, [r2, #4]
    1880:	f013 0f03 	tst.w	r3, #3
    1884:	d1fb      	bne.n	187e <_ext_irq_init+0x82>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1886:	4b4b      	ldr	r3, [pc, #300]	; (19b4 <_ext_irq_init+0x1b8>)
    1888:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    188c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1890:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1894:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1898:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    189c:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    189e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    18a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    18a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18aa:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18ae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18b2:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    18b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    18bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18c0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18c4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18c8:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    18ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    18d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18d6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18da:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18de:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    18e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    18e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18ec:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18f0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18f4:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    18fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    18fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1902:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1906:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    190a:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    190c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1914:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1918:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    191c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1920:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1922:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1926:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    192a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    192e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1932:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1936:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1938:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    193c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1940:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1944:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1948:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    194c:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    194e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1952:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1956:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    195a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    195e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1962:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1964:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    1968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    196c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1970:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1974:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1978:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    197a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    197e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1982:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1986:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    198a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    198e:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1990:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    1994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1998:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    199c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19a0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19a4:	601a      	str	r2, [r3, #0]
	callback = cb;
    19a6:	4b04      	ldr	r3, [pc, #16]	; (19b8 <_ext_irq_init+0x1bc>)
    19a8:	6018      	str	r0, [r3, #0]
}
    19aa:	2000      	movs	r0, #0
    19ac:	4770      	bx	lr
    19ae:	bf00      	nop
    19b0:	40002800 	.word	0x40002800
    19b4:	e000e100 	.word	0xe000e100
    19b8:	20000144 	.word	0x20000144

000019bc <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    19bc:	b508      	push	{r3, lr}
	_ext_irq_handler();
    19be:	4b01      	ldr	r3, [pc, #4]	; (19c4 <EIC_0_Handler+0x8>)
    19c0:	4798      	blx	r3
    19c2:	bd08      	pop	{r3, pc}
    19c4:	00001719 	.word	0x00001719

000019c8 <EIC_1_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    19c8:	b508      	push	{r3, lr}
	_ext_irq_handler();
    19ca:	4b01      	ldr	r3, [pc, #4]	; (19d0 <EIC_1_Handler+0x8>)
    19cc:	4798      	blx	r3
    19ce:	bd08      	pop	{r3, pc}
    19d0:	00001719 	.word	0x00001719

000019d4 <EIC_2_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_2_Handler(void)
{
    19d4:	b508      	push	{r3, lr}
	_ext_irq_handler();
    19d6:	4b01      	ldr	r3, [pc, #4]	; (19dc <EIC_2_Handler+0x8>)
    19d8:	4798      	blx	r3
    19da:	bd08      	pop	{r3, pc}
    19dc:	00001719 	.word	0x00001719

000019e0 <EIC_3_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    19e0:	b508      	push	{r3, lr}
	_ext_irq_handler();
    19e2:	4b01      	ldr	r3, [pc, #4]	; (19e8 <EIC_3_Handler+0x8>)
    19e4:	4798      	blx	r3
    19e6:	bd08      	pop	{r3, pc}
    19e8:	00001719 	.word	0x00001719

000019ec <EIC_4_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    19ec:	b508      	push	{r3, lr}
	_ext_irq_handler();
    19ee:	4b01      	ldr	r3, [pc, #4]	; (19f4 <EIC_4_Handler+0x8>)
    19f0:	4798      	blx	r3
    19f2:	bd08      	pop	{r3, pc}
    19f4:	00001719 	.word	0x00001719

000019f8 <EIC_5_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    19f8:	b508      	push	{r3, lr}
	_ext_irq_handler();
    19fa:	4b01      	ldr	r3, [pc, #4]	; (1a00 <EIC_5_Handler+0x8>)
    19fc:	4798      	blx	r3
    19fe:	bd08      	pop	{r3, pc}
    1a00:	00001719 	.word	0x00001719

00001a04 <EIC_6_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    1a04:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1a06:	4b01      	ldr	r3, [pc, #4]	; (1a0c <EIC_6_Handler+0x8>)
    1a08:	4798      	blx	r3
    1a0a:	bd08      	pop	{r3, pc}
    1a0c:	00001719 	.word	0x00001719

00001a10 <EIC_7_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    1a10:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1a12:	4b01      	ldr	r3, [pc, #4]	; (1a18 <EIC_7_Handler+0x8>)
    1a14:	4798      	blx	r3
    1a16:	bd08      	pop	{r3, pc}
    1a18:	00001719 	.word	0x00001719

00001a1c <EIC_8_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    1a1c:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1a1e:	4b01      	ldr	r3, [pc, #4]	; (1a24 <EIC_8_Handler+0x8>)
    1a20:	4798      	blx	r3
    1a22:	bd08      	pop	{r3, pc}
    1a24:	00001719 	.word	0x00001719

00001a28 <EIC_9_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    1a28:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1a2a:	4b01      	ldr	r3, [pc, #4]	; (1a30 <EIC_9_Handler+0x8>)
    1a2c:	4798      	blx	r3
    1a2e:	bd08      	pop	{r3, pc}
    1a30:	00001719 	.word	0x00001719

00001a34 <EIC_10_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_10_Handler(void)
{
    1a34:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1a36:	4b01      	ldr	r3, [pc, #4]	; (1a3c <EIC_10_Handler+0x8>)
    1a38:	4798      	blx	r3
    1a3a:	bd08      	pop	{r3, pc}
    1a3c:	00001719 	.word	0x00001719

00001a40 <EIC_14_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_14_Handler(void)
{
    1a40:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1a42:	4b01      	ldr	r3, [pc, #4]	; (1a48 <EIC_14_Handler+0x8>)
    1a44:	4798      	blx	r3
    1a46:	bd08      	pop	{r3, pc}
    1a48:	00001719 	.word	0x00001719

00001a4c <EIC_15_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_15_Handler(void)
{
    1a4c:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1a4e:	4b01      	ldr	r3, [pc, #4]	; (1a54 <EIC_15_Handler+0x8>)
    1a50:	4798      	blx	r3
    1a52:	bd08      	pop	{r3, pc}
    1a54:	00001719 	.word	0x00001719

00001a58 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1a58:	f010 0f01 	tst.w	r0, #1
    1a5c:	d008      	beq.n	1a70 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1a5e:	4a17      	ldr	r2, [pc, #92]	; (1abc <_gclk_init_generators_by_fref+0x64>)
    1a60:	4b17      	ldr	r3, [pc, #92]	; (1ac0 <_gclk_init_generators_by_fref+0x68>)
    1a62:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1a64:	4619      	mov	r1, r3
    1a66:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1a6a:	684b      	ldr	r3, [r1, #4]
    1a6c:	4213      	tst	r3, r2
    1a6e:	d1fc      	bne.n	1a6a <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1a70:	f010 0f02 	tst.w	r0, #2
    1a74:	d008      	beq.n	1a88 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1a76:	4a13      	ldr	r2, [pc, #76]	; (1ac4 <_gclk_init_generators_by_fref+0x6c>)
    1a78:	4b11      	ldr	r3, [pc, #68]	; (1ac0 <_gclk_init_generators_by_fref+0x68>)
    1a7a:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1a7c:	4619      	mov	r1, r3
    1a7e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1a82:	684b      	ldr	r3, [r1, #4]
    1a84:	4213      	tst	r3, r2
    1a86:	d1fc      	bne.n	1a82 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    1a88:	f410 6f80 	tst.w	r0, #1024	; 0x400
    1a8c:	d008      	beq.n	1aa0 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1a8e:	4a0e      	ldr	r2, [pc, #56]	; (1ac8 <_gclk_init_generators_by_fref+0x70>)
    1a90:	4b0b      	ldr	r3, [pc, #44]	; (1ac0 <_gclk_init_generators_by_fref+0x68>)
    1a92:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1a94:	4619      	mov	r1, r3
    1a96:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1a9a:	684b      	ldr	r3, [r1, #4]
    1a9c:	4213      	tst	r3, r2
    1a9e:	d1fc      	bne.n	1a9a <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    1aa0:	f410 6f00 	tst.w	r0, #2048	; 0x800
    1aa4:	d008      	beq.n	1ab8 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1aa6:	4a09      	ldr	r2, [pc, #36]	; (1acc <_gclk_init_generators_by_fref+0x74>)
    1aa8:	4b05      	ldr	r3, [pc, #20]	; (1ac0 <_gclk_init_generators_by_fref+0x68>)
    1aaa:	64da      	str	r2, [r3, #76]	; 0x4c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1aac:	4619      	mov	r1, r3
    1aae:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1ab2:	684b      	ldr	r3, [r1, #4]
    1ab4:	4213      	tst	r3, r2
    1ab6:	d1fc      	bne.n	1ab2 <_gclk_init_generators_by_fref+0x5a>
    1ab8:	4770      	bx	lr
    1aba:	bf00      	nop
    1abc:	00010101 	.word	0x00010101
    1ac0:	40001c00 	.word	0x40001c00
    1ac4:	00010906 	.word	0x00010906
    1ac8:	00010105 	.word	0x00010105
    1acc:	00010904 	.word	0x00010904

00001ad0 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1ad0:	2201      	movs	r2, #1
    1ad2:	4b01      	ldr	r3, [pc, #4]	; (1ad8 <_mclk_init+0x8>)
    1ad4:	715a      	strb	r2, [r3, #5]
    1ad6:	4770      	bx	lr
    1ad8:	40000800 	.word	0x40000800

00001adc <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1adc:	4b06      	ldr	r3, [pc, #24]	; (1af8 <_osc32kctrl_init_sources+0x1c>)
    1ade:	f242 0286 	movw	r2, #8326	; 0x2086
    1ae2:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1ae4:	2200      	movs	r2, #0
    1ae6:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1ae8:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1aea:	69d9      	ldr	r1, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1aec:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1af0:	61d9      	str	r1, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1af2:	741a      	strb	r2, [r3, #16]
    1af4:	4770      	bx	lr
    1af6:	bf00      	nop
    1af8:	40001400 	.word	0x40001400

00001afc <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1afc:	4a04      	ldr	r2, [pc, #16]	; (1b10 <_oscctrl_init_sources+0x14>)
    1afe:	4b05      	ldr	r3, [pc, #20]	; (1b14 <_oscctrl_init_sources+0x18>)
    1b00:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1b02:	461a      	mov	r2, r3
    1b04:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1b06:	f013 0f02 	tst.w	r3, #2
    1b0a:	d0fb      	beq.n	1b04 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1b0c:	4770      	bx	lr
    1b0e:	bf00      	nop
    1b10:	03002606 	.word	0x03002606
    1b14:	40001000 	.word	0x40001000

00001b18 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1b18:	4a36      	ldr	r2, [pc, #216]	; (1bf4 <_oscctrl_init_referenced_generators+0xdc>)
    1b1a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1b1c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1b20:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1b24:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1b26:	4611      	mov	r1, r2
    1b28:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1b2c:	684b      	ldr	r3, [r1, #4]
    1b2e:	4213      	tst	r3, r2
    1b30:	d1fc      	bne.n	1b2c <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1b32:	4a30      	ldr	r2, [pc, #192]	; (1bf4 <_oscctrl_init_referenced_generators+0xdc>)
    1b34:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1b36:	f013 0f04 	tst.w	r3, #4
    1b3a:	d1fb      	bne.n	1b34 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1b3c:	4b2e      	ldr	r3, [pc, #184]	; (1bf8 <_oscctrl_init_referenced_generators+0xe0>)
    1b3e:	2200      	movs	r2, #0
    1b40:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1b42:	4a2e      	ldr	r2, [pc, #184]	; (1bfc <_oscctrl_init_referenced_generators+0xe4>)
    1b44:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1b46:	461a      	mov	r2, r3
    1b48:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1b4c:	f013 0f10 	tst.w	r3, #16
    1b50:	d1fa      	bne.n	1b48 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1b52:	2200      	movs	r2, #0
    1b54:	4b28      	ldr	r3, [pc, #160]	; (1bf8 <_oscctrl_init_referenced_generators+0xe0>)
    1b56:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1b5a:	461a      	mov	r2, r3
    1b5c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1b60:	f013 0f04 	tst.w	r3, #4
    1b64:	d1fa      	bne.n	1b5c <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1b66:	2202      	movs	r2, #2
    1b68:	4b23      	ldr	r3, [pc, #140]	; (1bf8 <_oscctrl_init_referenced_generators+0xe0>)
    1b6a:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1b6c:	461a      	mov	r2, r3
    1b6e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1b72:	f013 0f02 	tst.w	r3, #2
    1b76:	d1fa      	bne.n	1b6e <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1b78:	4b1f      	ldr	r3, [pc, #124]	; (1bf8 <_oscctrl_init_referenced_generators+0xe0>)
    1b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1b7c:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1b7e:	461a      	mov	r2, r3
    1b80:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1b84:	f013 0f08 	tst.w	r3, #8
    1b88:	d1fa      	bne.n	1b80 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1b8a:	2219      	movs	r2, #25
    1b8c:	4b1a      	ldr	r3, [pc, #104]	; (1bf8 <_oscctrl_init_referenced_generators+0xe0>)
    1b8e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1b92:	461a      	mov	r2, r3
    1b94:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1b98:	f013 0f04 	tst.w	r3, #4
    1b9c:	d1fa      	bne.n	1b94 <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1b9e:	4b16      	ldr	r3, [pc, #88]	; (1bf8 <_oscctrl_init_referenced_generators+0xe0>)
    1ba0:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1ba4:	f013 0f01 	tst.w	r3, #1
    1ba8:	d01d      	beq.n	1be6 <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1baa:	4a13      	ldr	r2, [pc, #76]	; (1bf8 <_oscctrl_init_referenced_generators+0xe0>)
    1bac:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1bae:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1bb2:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1bb6:	d1f9      	bne.n	1bac <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1bb8:	4a0e      	ldr	r2, [pc, #56]	; (1bf4 <_oscctrl_init_referenced_generators+0xdc>)
    1bba:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1bbc:	2b00      	cmp	r3, #0
    1bbe:	d1fc      	bne.n	1bba <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1bc0:	4a0c      	ldr	r2, [pc, #48]	; (1bf4 <_oscctrl_init_referenced_generators+0xdc>)
    1bc2:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1bc4:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1bc8:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1bcc:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1bce:	4611      	mov	r1, r2
    1bd0:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1bd4:	684b      	ldr	r3, [r1, #4]
    1bd6:	4213      	tst	r3, r2
    1bd8:	d1fc      	bne.n	1bd4 <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1bda:	4a06      	ldr	r2, [pc, #24]	; (1bf4 <_oscctrl_init_referenced_generators+0xdc>)
    1bdc:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1bde:	f013 0f04 	tst.w	r3, #4
    1be2:	d1fb      	bne.n	1bdc <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    1be4:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1be6:	4a04      	ldr	r2, [pc, #16]	; (1bf8 <_oscctrl_init_referenced_generators+0xe0>)
    1be8:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1bea:	f413 7f80 	tst.w	r3, #256	; 0x100
    1bee:	d0fb      	beq.n	1be8 <_oscctrl_init_referenced_generators+0xd0>
    1bf0:	e7e2      	b.n	1bb8 <_oscctrl_init_referenced_generators+0xa0>
    1bf2:	bf00      	nop
    1bf4:	40001c00 	.word	0x40001c00
    1bf8:	40001000 	.word	0x40001000
    1bfc:	0401bb80 	.word	0x0401bb80

00001c00 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1c00:	b500      	push	{lr}
    1c02:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1c04:	4b0d      	ldr	r3, [pc, #52]	; (1c3c <RAMECC_Handler+0x3c>)
    1c06:	789b      	ldrb	r3, [r3, #2]
    1c08:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1c0a:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1c0c:	9b01      	ldr	r3, [sp, #4]
    1c0e:	f013 0f02 	tst.w	r3, #2
    1c12:	d006      	beq.n	1c22 <RAMECC_Handler+0x22>
    1c14:	4b0a      	ldr	r3, [pc, #40]	; (1c40 <RAMECC_Handler+0x40>)
    1c16:	681b      	ldr	r3, [r3, #0]
    1c18:	b11b      	cbz	r3, 1c22 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1c1a:	4a08      	ldr	r2, [pc, #32]	; (1c3c <RAMECC_Handler+0x3c>)
    1c1c:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1c1e:	4798      	blx	r3
    1c20:	e009      	b.n	1c36 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1c22:	9b01      	ldr	r3, [sp, #4]
    1c24:	f013 0f01 	tst.w	r3, #1
    1c28:	d005      	beq.n	1c36 <RAMECC_Handler+0x36>
    1c2a:	4b05      	ldr	r3, [pc, #20]	; (1c40 <RAMECC_Handler+0x40>)
    1c2c:	685b      	ldr	r3, [r3, #4]
    1c2e:	b113      	cbz	r3, 1c36 <RAMECC_Handler+0x36>
    1c30:	4a02      	ldr	r2, [pc, #8]	; (1c3c <RAMECC_Handler+0x3c>)
    1c32:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1c34:	4798      	blx	r3
	} else {
		return;
	}
}
    1c36:	b003      	add	sp, #12
    1c38:	f85d fb04 	ldr.w	pc, [sp], #4
    1c3c:	41020000 	.word	0x41020000
    1c40:	20000440 	.word	0x20000440

00001c44 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1c44:	b470      	push	{r4, r5, r6}
    1c46:	b089      	sub	sp, #36	; 0x24
    1c48:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1c4a:	466c      	mov	r4, sp
    1c4c:	4d0d      	ldr	r5, [pc, #52]	; (1c84 <_sercom_get_hardware_index+0x40>)
    1c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1c52:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1c56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1c5a:	9b00      	ldr	r3, [sp, #0]
    1c5c:	42b3      	cmp	r3, r6
    1c5e:	d00d      	beq.n	1c7c <_sercom_get_hardware_index+0x38>
    1c60:	4631      	mov	r1, r6
    1c62:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c64:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1c66:	f853 2b04 	ldr.w	r2, [r3], #4
    1c6a:	428a      	cmp	r2, r1
    1c6c:	d007      	beq.n	1c7e <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c6e:	3001      	adds	r0, #1
    1c70:	2808      	cmp	r0, #8
    1c72:	d1f8      	bne.n	1c66 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1c74:	2000      	movs	r0, #0
}
    1c76:	b009      	add	sp, #36	; 0x24
    1c78:	bc70      	pop	{r4, r5, r6}
    1c7a:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c7c:	2000      	movs	r0, #0
			return i;
    1c7e:	b2c0      	uxtb	r0, r0
    1c80:	e7f9      	b.n	1c76 <_sercom_get_hardware_index+0x32>
    1c82:	bf00      	nop
    1c84:	00003410 	.word	0x00003410

00001c88 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    1c88:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1c8a:	4b0c      	ldr	r3, [pc, #48]	; (1cbc <_get_i2cm_index+0x34>)
    1c8c:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
		if (_i2cms[i].number == sercom_offset) {
    1c8e:	2801      	cmp	r0, #1
    1c90:	d010      	beq.n	1cb4 <_get_i2cm_index+0x2c>
    1c92:	2802      	cmp	r0, #2
    1c94:	d00c      	beq.n	1cb0 <_get_i2cm_index+0x28>
    1c96:	2804      	cmp	r0, #4
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1c98:	bf08      	it	eq
    1c9a:	2002      	moveq	r0, #2
		if (_i2cms[i].number == sercom_offset) {
    1c9c:	d00b      	beq.n	1cb6 <_get_i2cm_index+0x2e>
			return i;
		}
	}

	ASSERT(false);
    1c9e:	f240 32a6 	movw	r2, #934	; 0x3a6
    1ca2:	4907      	ldr	r1, [pc, #28]	; (1cc0 <_get_i2cm_index+0x38>)
    1ca4:	2000      	movs	r0, #0
    1ca6:	4b07      	ldr	r3, [pc, #28]	; (1cc4 <_get_i2cm_index+0x3c>)
    1ca8:	4798      	blx	r3
	return -1;
    1caa:	f04f 30ff 	mov.w	r0, #4294967295
}
    1cae:	bd08      	pop	{r3, pc}
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1cb0:	2001      	movs	r0, #1
    1cb2:	e000      	b.n	1cb6 <_get_i2cm_index+0x2e>
    1cb4:	2000      	movs	r0, #0
			return i;
    1cb6:	b240      	sxtb	r0, r0
    1cb8:	bd08      	pop	{r3, pc}
    1cba:	bf00      	nop
    1cbc:	00001c45 	.word	0x00001c45
    1cc0:	000034ac 	.word	0x000034ac
    1cc4:	0000154d 	.word	0x0000154d

00001cc8 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    1cc8:	b538      	push	{r3, r4, r5, lr}
    1cca:	4605      	mov	r5, r0
    1ccc:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1cce:	4608      	mov	r0, r1
    1cd0:	4b32      	ldr	r3, [pc, #200]	; (1d9c <_i2c_m_sync_init_impl+0xd4>)
    1cd2:	4798      	blx	r3
    1cd4:	b2c0      	uxtb	r0, r0
	};
}

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1cd6:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1cd8:	f013 0f01 	tst.w	r3, #1
    1cdc:	d122      	bne.n	1d24 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    1cde:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1ce2:	4a2f      	ldr	r2, [pc, #188]	; (1da0 <_i2c_m_sync_init_impl+0xd8>)
    1ce4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1ce8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1cea:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1cee:	69e3      	ldr	r3, [r4, #28]
    1cf0:	f013 0f03 	tst.w	r3, #3
    1cf4:	d1fb      	bne.n	1cee <_i2c_m_sync_init_impl+0x26>
static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1cf6:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    1cf8:	f013 0f02 	tst.w	r3, #2
    1cfc:	d00b      	beq.n	1d16 <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1cfe:	6823      	ldr	r3, [r4, #0]
    1d00:	f023 0302 	bic.w	r3, r3, #2
    1d04:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d06:	69e3      	ldr	r3, [r4, #28]
    1d08:	f013 0f03 	tst.w	r3, #3
    1d0c:	d1fb      	bne.n	1d06 <_i2c_m_sync_init_impl+0x3e>
    1d0e:	69e3      	ldr	r3, [r4, #28]
    1d10:	f013 0f02 	tst.w	r3, #2
    1d14:	d1fb      	bne.n	1d0e <_i2c_m_sync_init_impl+0x46>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    1d16:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1d1a:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d1c:	69e3      	ldr	r3, [r4, #28]
    1d1e:	f013 0f03 	tst.w	r3, #3
    1d22:	d1fb      	bne.n	1d1c <_i2c_m_sync_init_impl+0x54>
    1d24:	69e3      	ldr	r3, [r4, #28]
    1d26:	f013 0f01 	tst.w	r3, #1
    1d2a:	d1fb      	bne.n	1d24 <_i2c_m_sync_init_impl+0x5c>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    1d2c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1d30:	4a1b      	ldr	r2, [pc, #108]	; (1da0 <_i2c_m_sync_init_impl+0xd8>)
    1d32:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1d36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1d38:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d3a:	69e3      	ldr	r3, [r4, #28]
    1d3c:	f013 0f03 	tst.w	r3, #3
    1d40:	d1fb      	bne.n	1d3a <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    1d42:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1d46:	4916      	ldr	r1, [pc, #88]	; (1da0 <_i2c_m_sync_init_impl+0xd8>)
    1d48:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    1d4e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d50:	69e3      	ldr	r3, [r4, #28]
    1d52:	f013 0f04 	tst.w	r3, #4
    1d56:	d1fb      	bne.n	1d50 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    1d58:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1d5c:	4910      	ldr	r1, [pc, #64]	; (1da0 <_i2c_m_sync_init_impl+0xd8>)
    1d5e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1d64:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    1d66:	f3c2 6301 	ubfx	r3, r2, #24, #2
    1d6a:	81ab      	strh	r3, [r5, #12]

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    1d6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    1d6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    1d72:	2b01      	cmp	r3, #1
    1d74:	bf94      	ite	ls
    1d76:	2300      	movls	r3, #0
    1d78:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    1d7a:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    1d7e:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d80:	69e3      	ldr	r3, [r4, #28]
    1d82:	f013 0f04 	tst.w	r3, #4
    1d86:	d1fb      	bne.n	1d80 <_i2c_m_sync_init_impl+0xb8>

	service->trise = _i2cms[i].trise;
    1d88:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1d8c:	4b04      	ldr	r3, [pc, #16]	; (1da0 <_i2c_m_sync_init_impl+0xd8>)
    1d8e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    1d92:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    1d94:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    1d96:	2000      	movs	r0, #0
    1d98:	bd38      	pop	{r3, r4, r5, pc}
    1d9a:	bf00      	nop
    1d9c:	00001c89 	.word	0x00001c89
    1da0:	00003410 	.word	0x00003410

00001da4 <_i2c_m_sync_init>:
{
    1da4:	b538      	push	{r3, r4, r5, lr}
    1da6:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    1da8:	4604      	mov	r4, r0
    1daa:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    1dae:	4906      	ldr	r1, [pc, #24]	; (1dc8 <_i2c_m_sync_init+0x24>)
    1db0:	3000      	adds	r0, #0
    1db2:	bf18      	it	ne
    1db4:	2001      	movne	r0, #1
    1db6:	4b05      	ldr	r3, [pc, #20]	; (1dcc <_i2c_m_sync_init+0x28>)
    1db8:	4798      	blx	r3
	i2c_dev->hw = hw;
    1dba:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    1dbc:	4629      	mov	r1, r5
    1dbe:	4620      	mov	r0, r4
    1dc0:	4b03      	ldr	r3, [pc, #12]	; (1dd0 <_i2c_m_sync_init+0x2c>)
    1dc2:	4798      	blx	r3
}
    1dc4:	bd38      	pop	{r3, r4, r5, pc}
    1dc6:	bf00      	nop
    1dc8:	000034ac 	.word	0x000034ac
    1dcc:	0000154d 	.word	0x0000154d
    1dd0:	00001cc9 	.word	0x00001cc9

00001dd4 <_i2c_m_sync_transfer>:
{
    1dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1dd8:	4605      	mov	r5, r0
    1dda:	460e      	mov	r6, r1
	void *   hw = i2c_dev->hw;
    1ddc:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    1dde:	f110 0800 	adds.w	r8, r0, #0
    1de2:	bf18      	it	ne
    1de4:	f04f 0801 	movne.w	r8, #1
    1de8:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 20b0 <_i2c_m_sync_transfer+0x2dc>
    1dec:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    1df0:	4649      	mov	r1, r9
    1df2:	4640      	mov	r0, r8
    1df4:	4fad      	ldr	r7, [pc, #692]	; (20ac <_i2c_m_sync_transfer+0x2d8>)
    1df6:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    1df8:	6928      	ldr	r0, [r5, #16]
    1dfa:	f240 52d1 	movw	r2, #1489	; 0x5d1
    1dfe:	4649      	mov	r1, r9
    1e00:	3000      	adds	r0, #0
    1e02:	bf18      	it	ne
    1e04:	2001      	movne	r0, #1
    1e06:	47b8      	blx	r7
	ASSERT(msg);
    1e08:	f240 52d2 	movw	r2, #1490	; 0x5d2
    1e0c:	4649      	mov	r1, r9
    1e0e:	1c30      	adds	r0, r6, #0
    1e10:	bf18      	it	ne
    1e12:	2001      	movne	r0, #1
    1e14:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1e16:	886b      	ldrh	r3, [r5, #2]
    1e18:	f413 7f80 	tst.w	r3, #256	; 0x100
    1e1c:	f040 8218 	bne.w	2250 <_i2c_m_sync_transfer+0x47c>
	msg->flags |= I2C_M_BUSY;
    1e20:	8873      	ldrh	r3, [r6, #2]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1e28:	8073      	strh	r3, [r6, #2]
	i2c_dev->service.msg = *msg;
    1e2a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1e2e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    1e32:	6863      	ldr	r3, [r4, #4]
    1e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1e38:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e3a:	69e3      	ldr	r3, [r4, #28]
    1e3c:	f013 0f04 	tst.w	r3, #4
    1e40:	d1fb      	bne.n	1e3a <_i2c_m_sync_transfer+0x66>
	void *             hw    = i2c_dev->hw;
    1e42:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1e44:	f8d7 9000 	ldr.w	r9, [r7]
	ASSERT(i2c_dev);
    1e48:	f240 52a5 	movw	r2, #1445	; 0x5a5
    1e4c:	4998      	ldr	r1, [pc, #608]	; (20b0 <_i2c_m_sync_transfer+0x2dc>)
    1e4e:	4640      	mov	r0, r8
    1e50:	4b96      	ldr	r3, [pc, #600]	; (20ac <_i2c_m_sync_transfer+0x2d8>)
    1e52:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    1e54:	686b      	ldr	r3, [r5, #4]
    1e56:	2b01      	cmp	r3, #1
    1e58:	d05e      	beq.n	1f18 <_i2c_m_sync_transfer+0x144>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1e5a:	687b      	ldr	r3, [r7, #4]
    1e5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    1e60:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e62:	69fb      	ldr	r3, [r7, #28]
    1e64:	f013 0f04 	tst.w	r3, #4
    1e68:	d1fb      	bne.n	1e62 <_i2c_m_sync_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    1e6a:	882b      	ldrh	r3, [r5, #0]
    1e6c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1e70:	d05e      	beq.n	1f30 <_i2c_m_sync_transfer+0x15c>
		if (msg->flags & I2C_M_RD) {
    1e72:	886a      	ldrh	r2, [r5, #2]
    1e74:	f012 0f01 	tst.w	r2, #1
    1e78:	d004      	beq.n	1e84 <_i2c_m_sync_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    1e7a:	886a      	ldrh	r2, [r5, #2]
    1e7c:	b292      	uxth	r2, r2
    1e7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1e82:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1e84:	f240 72fe 	movw	r2, #2046	; 0x7fe
    1e88:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    1e8c:	69fb      	ldr	r3, [r7, #28]
    1e8e:	f013 0f04 	tst.w	r3, #4
    1e92:	d1fb      	bne.n	1e8c <_i2c_m_sync_transfer+0xb8>
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    1e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1e9e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1ea0:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ea2:	69fb      	ldr	r3, [r7, #28]
    1ea4:	f013 0f04 	tst.w	r3, #4
    1ea8:	d1fb      	bne.n	1ea2 <_i2c_m_sync_transfer+0xce>
	void *   hw      = i2c_dev->hw;
    1eaa:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1eac:	7e0b      	ldrb	r3, [r1, #24]
    1eae:	b2db      	uxtb	r3, r3
    1eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1eb4:	f013 0f03 	tst.w	r3, #3
    1eb8:	d103      	bne.n	1ec2 <_i2c_m_sync_transfer+0xee>
    1eba:	7e0b      	ldrb	r3, [r1, #24]
    1ebc:	b2db      	uxtb	r3, r3
		if (timeout-- == 0) {
    1ebe:	3a01      	subs	r2, #1
    1ec0:	d1f8      	bne.n	1eb4 <_i2c_m_sync_transfer+0xe0>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1ec2:	6839      	ldr	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ec4:	69fa      	ldr	r2, [r7, #28]
    1ec6:	f012 0f04 	tst.w	r2, #4
    1eca:	d1fb      	bne.n	1ec4 <_i2c_m_sync_transfer+0xf0>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1ecc:	8b7a      	ldrh	r2, [r7, #26]
    1ece:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    1ed0:	f013 0f01 	tst.w	r3, #1
    1ed4:	f000 80a3 	beq.w	201e <_i2c_m_sync_transfer+0x24a>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1ed8:	f012 0f02 	tst.w	r2, #2
    1edc:	d03c      	beq.n	1f58 <_i2c_m_sync_transfer+0x184>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1ede:	2301      	movs	r3, #1
    1ee0:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
    1ee2:	886b      	ldrh	r3, [r5, #2]
    1ee4:	b29b      	uxth	r3, r3
    1ee6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1eea:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1eec:	886b      	ldrh	r3, [r5, #2]
    1eee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1ef2:	041b      	lsls	r3, r3, #16
    1ef4:	0c1b      	lsrs	r3, r3, #16
    1ef6:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1ef8:	f002 0201 	and.w	r2, r2, #1
			return I2C_ERR_BAD_ADDRESS;
    1efc:	2a00      	cmp	r2, #0
    1efe:	bf14      	ite	ne
    1f00:	f06f 0004 	mvnne.w	r0, #4
    1f04:	f06f 0003 	mvneq.w	r0, #3
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1f08:	886b      	ldrh	r3, [r5, #2]
    1f0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1f0e:	041b      	lsls	r3, r3, #16
    1f10:	0c1b      	lsrs	r3, r3, #16
    1f12:	806b      	strh	r3, [r5, #2]
		return ret;
    1f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (msg->len == 1 && sclsm) {
    1f18:	f019 6f00 	tst.w	r9, #134217728	; 0x8000000
    1f1c:	d09d      	beq.n	1e5a <_i2c_m_sync_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1f1e:	687b      	ldr	r3, [r7, #4]
    1f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1f24:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f26:	69fb      	ldr	r3, [r7, #28]
    1f28:	f013 0f04 	tst.w	r3, #4
    1f2c:	d1fb      	bne.n	1f26 <_i2c_m_sync_transfer+0x152>
    1f2e:	e79c      	b.n	1e6a <_i2c_m_sync_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    1f30:	8869      	ldrh	r1, [r5, #2]
    1f32:	005a      	lsls	r2, r3, #1
    1f34:	b2d2      	uxtb	r2, r2
    1f36:	f001 0301 	and.w	r3, r1, #1
    1f3a:	431a      	orrs	r2, r3
    1f3c:	69fb      	ldr	r3, [r7, #28]
    1f3e:	f013 0f04 	tst.w	r3, #4
    1f42:	d1fb      	bne.n	1f3c <_i2c_m_sync_transfer+0x168>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    1f4a:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1f4c:	627a      	str	r2, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f4e:	69fb      	ldr	r3, [r7, #28]
    1f50:	f013 0f04 	tst.w	r3, #4
    1f54:	d1fb      	bne.n	1f4e <_i2c_m_sync_transfer+0x17a>
    1f56:	e7a8      	b.n	1eaa <_i2c_m_sync_transfer+0xd6>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1f58:	f012 0f04 	tst.w	r2, #4
    1f5c:	d11d      	bne.n	1f9a <_i2c_m_sync_transfer+0x1c6>
			if (msg->flags & I2C_M_TEN) {
    1f5e:	886b      	ldrh	r3, [r5, #2]
    1f60:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1f64:	d037      	beq.n	1fd6 <_i2c_m_sync_transfer+0x202>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1f66:	882b      	ldrh	r3, [r5, #0]
    1f68:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1f6a:	f003 0206 	and.w	r2, r3, #6
    1f6e:	69fb      	ldr	r3, [r7, #28]
    1f70:	f013 0f04 	tst.w	r3, #4
    1f74:	d1fb      	bne.n	1f6e <_i2c_m_sync_transfer+0x19a>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    1f7c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    1f80:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1f82:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f84:	69fb      	ldr	r3, [r7, #28]
    1f86:	f013 0f04 	tst.w	r3, #4
    1f8a:	d1fb      	bne.n	1f84 <_i2c_m_sync_transfer+0x1b0>
				msg->flags &= ~I2C_M_TEN;
    1f8c:	886b      	ldrh	r3, [r5, #2]
    1f8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    1f92:	041b      	lsls	r3, r3, #16
    1f94:	0c1b      	lsrs	r3, r3, #16
    1f96:	806b      	strh	r3, [r5, #2]
    1f98:	e069      	b.n	206e <_i2c_m_sync_transfer+0x29a>
				if (msg->len > 0) {
    1f9a:	686b      	ldr	r3, [r5, #4]
    1f9c:	2b00      	cmp	r3, #0
    1f9e:	dd04      	ble.n	1faa <_i2c_m_sync_transfer+0x1d6>
					msg->flags |= I2C_M_FAIL;
    1fa0:	886b      	ldrh	r3, [r5, #2]
    1fa2:	b29b      	uxth	r3, r3
    1fa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1fa8:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1faa:	886b      	ldrh	r3, [r5, #2]
    1fac:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1fb0:	d108      	bne.n	1fc4 <_i2c_m_sync_transfer+0x1f0>
				msg->flags &= ~I2C_M_BUSY;
    1fb2:	886b      	ldrh	r3, [r5, #2]
    1fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1fb8:	041b      	lsls	r3, r3, #16
    1fba:	0c1b      	lsrs	r3, r3, #16
    1fbc:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1fbe:	f06f 0001 	mvn.w	r0, #1
    1fc2:	e7a1      	b.n	1f08 <_i2c_m_sync_transfer+0x134>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1fc4:	687b      	ldr	r3, [r7, #4]
    1fc6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1fca:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1fcc:	69fb      	ldr	r3, [r7, #28]
    1fce:	f013 0f04 	tst.w	r3, #4
    1fd2:	d1fb      	bne.n	1fcc <_i2c_m_sync_transfer+0x1f8>
    1fd4:	e7ed      	b.n	1fb2 <_i2c_m_sync_transfer+0x1de>
			if (msg->len == 0) {
    1fd6:	686b      	ldr	r3, [r5, #4]
    1fd8:	b99b      	cbnz	r3, 2002 <_i2c_m_sync_transfer+0x22e>
				if (msg->flags & I2C_M_STOP) {
    1fda:	886b      	ldrh	r3, [r5, #2]
    1fdc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1fe0:	d106      	bne.n	1ff0 <_i2c_m_sync_transfer+0x21c>
				msg->flags &= ~I2C_M_BUSY;
    1fe2:	886b      	ldrh	r3, [r5, #2]
    1fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1fe8:	041b      	lsls	r3, r3, #16
    1fea:	0c1b      	lsrs	r3, r3, #16
    1fec:	806b      	strh	r3, [r5, #2]
    1fee:	e03e      	b.n	206e <_i2c_m_sync_transfer+0x29a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1ff0:	687b      	ldr	r3, [r7, #4]
    1ff2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1ff6:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ff8:	69fb      	ldr	r3, [r7, #28]
    1ffa:	f013 0f04 	tst.w	r3, #4
    1ffe:	d1fb      	bne.n	1ff8 <_i2c_m_sync_transfer+0x224>
    2000:	e7ef      	b.n	1fe2 <_i2c_m_sync_transfer+0x20e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    2002:	68ab      	ldr	r3, [r5, #8]
    2004:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    2006:	62bb      	str	r3, [r7, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2008:	69fb      	ldr	r3, [r7, #28]
    200a:	f013 0f04 	tst.w	r3, #4
    200e:	d1fb      	bne.n	2008 <_i2c_m_sync_transfer+0x234>
				msg->buffer++;
    2010:	68ab      	ldr	r3, [r5, #8]
    2012:	3301      	adds	r3, #1
    2014:	60ab      	str	r3, [r5, #8]
				msg->len--;
    2016:	686b      	ldr	r3, [r5, #4]
    2018:	3b01      	subs	r3, #1
    201a:	606b      	str	r3, [r5, #4]
    201c:	e027      	b.n	206e <_i2c_m_sync_transfer+0x29a>
	} else if (flags & SB_FLAG) {
    201e:	f013 0f02 	tst.w	r3, #2
    2022:	d024      	beq.n	206e <_i2c_m_sync_transfer+0x29a>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    2024:	686b      	ldr	r3, [r5, #4]
    2026:	2b00      	cmp	r3, #0
    2028:	d03a      	beq.n	20a0 <_i2c_m_sync_transfer+0x2cc>
    202a:	f012 0f04 	tst.w	r2, #4
    202e:	d137      	bne.n	20a0 <_i2c_m_sync_transfer+0x2cc>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    2030:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    2034:	3b01      	subs	r3, #1
    2036:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2038:	2b00      	cmp	r3, #0
    203a:	f040 810d 	bne.w	2258 <_i2c_m_sync_transfer+0x484>
    203e:	2900      	cmp	r1, #0
    2040:	f000 8110 	beq.w	2264 <_i2c_m_sync_transfer+0x490>
				if (msg->flags & I2C_M_STOP) {
    2044:	886b      	ldrh	r3, [r5, #2]
    2046:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    204a:	d118      	bne.n	207e <_i2c_m_sync_transfer+0x2aa>
				msg->flags &= ~I2C_M_BUSY;
    204c:	886b      	ldrh	r3, [r5, #2]
    204e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2052:	041b      	lsls	r3, r3, #16
    2054:	0c1b      	lsrs	r3, r3, #16
    2056:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    2058:	68aa      	ldr	r2, [r5, #8]
    205a:	1c53      	adds	r3, r2, #1
    205c:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    205e:	69fb      	ldr	r3, [r7, #28]
    2060:	f013 0f04 	tst.w	r3, #4
    2064:	d1fb      	bne.n	205e <_i2c_m_sync_transfer+0x28a>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    2066:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2068:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    206a:	2302      	movs	r3, #2
    206c:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    206e:	2200      	movs	r2, #0
	return I2C_OK;
    2070:	4610      	mov	r0, r2
    2072:	2702      	movs	r7, #2
			return I2C_NACK;
    2074:	f06f 0c01 	mvn.w	ip, #1
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    2078:	f04f 0e01 	mov.w	lr, #1
    207c:	e0b0      	b.n	21e0 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    207e:	687b      	ldr	r3, [r7, #4]
    2080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2084:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2086:	69fb      	ldr	r3, [r7, #28]
    2088:	f013 0f04 	tst.w	r3, #4
    208c:	d1fb      	bne.n	2086 <_i2c_m_sync_transfer+0x2b2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    208e:	687b      	ldr	r3, [r7, #4]
    2090:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2094:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2096:	69fb      	ldr	r3, [r7, #28]
    2098:	f013 0f04 	tst.w	r3, #4
    209c:	d1fb      	bne.n	2096 <_i2c_m_sync_transfer+0x2c2>
    209e:	e7d5      	b.n	204c <_i2c_m_sync_transfer+0x278>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    20a0:	2302      	movs	r3, #2
    20a2:	763b      	strb	r3, [r7, #24]
    20a4:	f06f 0001 	mvn.w	r0, #1
    20a8:	e72e      	b.n	1f08 <_i2c_m_sync_transfer+0x134>
    20aa:	bf00      	nop
    20ac:	0000154d 	.word	0x0000154d
    20b0:	000034ac 	.word	0x000034ac
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    20b4:	6863      	ldr	r3, [r4, #4]
    20b6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    20ba:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    20bc:	69e3      	ldr	r3, [r4, #28]
    20be:	f013 0f04 	tst.w	r3, #4
    20c2:	d1fb      	bne.n	20bc <_i2c_m_sync_transfer+0x2e8>
    20c4:	e0a1      	b.n	220a <_i2c_m_sync_transfer+0x436>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    20c6:	f012 0f04 	tst.w	r2, #4
    20ca:	d11e      	bne.n	210a <_i2c_m_sync_transfer+0x336>
			if (msg->flags & I2C_M_TEN) {
    20cc:	886b      	ldrh	r3, [r5, #2]
    20ce:	f413 6f80 	tst.w	r3, #1024	; 0x400
    20d2:	d037      	beq.n	2144 <_i2c_m_sync_transfer+0x370>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    20d4:	882b      	ldrh	r3, [r5, #0]
    20d6:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    20d8:	f003 0206 	and.w	r2, r3, #6
    20dc:	69e3      	ldr	r3, [r4, #28]
    20de:	f013 0f04 	tst.w	r3, #4
    20e2:	d1fb      	bne.n	20dc <_i2c_m_sync_transfer+0x308>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    20e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    20e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    20ea:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    20ee:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    20f0:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    20f2:	69e3      	ldr	r3, [r4, #28]
    20f4:	f013 0f04 	tst.w	r3, #4
    20f8:	d1fb      	bne.n	20f2 <_i2c_m_sync_transfer+0x31e>
				msg->flags &= ~I2C_M_TEN;
    20fa:	886b      	ldrh	r3, [r5, #2]
    20fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2100:	041b      	lsls	r3, r3, #16
    2102:	0c1b      	lsrs	r3, r3, #16
    2104:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    2106:	4602      	mov	r2, r0
    2108:	e06a      	b.n	21e0 <_i2c_m_sync_transfer+0x40c>
				if (msg->len > 0) {
    210a:	686b      	ldr	r3, [r5, #4]
    210c:	2b00      	cmp	r3, #0
    210e:	dd04      	ble.n	211a <_i2c_m_sync_transfer+0x346>
					msg->flags |= I2C_M_FAIL;
    2110:	886b      	ldrh	r3, [r5, #2]
    2112:	b29b      	uxth	r3, r3
    2114:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    2118:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    211a:	886b      	ldrh	r3, [r5, #2]
    211c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2120:	d107      	bne.n	2132 <_i2c_m_sync_transfer+0x35e>
				msg->flags &= ~I2C_M_BUSY;
    2122:	886b      	ldrh	r3, [r5, #2]
    2124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2128:	041b      	lsls	r3, r3, #16
    212a:	0c1b      	lsrs	r3, r3, #16
    212c:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    212e:	4662      	mov	r2, ip
    2130:	e056      	b.n	21e0 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2132:	6863      	ldr	r3, [r4, #4]
    2134:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2138:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    213a:	69e3      	ldr	r3, [r4, #28]
    213c:	f013 0f04 	tst.w	r3, #4
    2140:	d1fb      	bne.n	213a <_i2c_m_sync_transfer+0x366>
    2142:	e7ee      	b.n	2122 <_i2c_m_sync_transfer+0x34e>
			if (msg->len == 0) {
    2144:	686b      	ldr	r3, [r5, #4]
    2146:	b9a3      	cbnz	r3, 2172 <_i2c_m_sync_transfer+0x39e>
				if (msg->flags & I2C_M_STOP) {
    2148:	886b      	ldrh	r3, [r5, #2]
    214a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    214e:	d107      	bne.n	2160 <_i2c_m_sync_transfer+0x38c>
				msg->flags &= ~I2C_M_BUSY;
    2150:	886b      	ldrh	r3, [r5, #2]
    2152:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2156:	041b      	lsls	r3, r3, #16
    2158:	0c1b      	lsrs	r3, r3, #16
    215a:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
    215c:	4602      	mov	r2, r0
    215e:	e03f      	b.n	21e0 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2160:	6863      	ldr	r3, [r4, #4]
    2162:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2166:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2168:	69e3      	ldr	r3, [r4, #28]
    216a:	f013 0f04 	tst.w	r3, #4
    216e:	d1fb      	bne.n	2168 <_i2c_m_sync_transfer+0x394>
    2170:	e7ee      	b.n	2150 <_i2c_m_sync_transfer+0x37c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    2172:	68ab      	ldr	r3, [r5, #8]
    2174:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    2176:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2178:	69e3      	ldr	r3, [r4, #28]
    217a:	f013 0f04 	tst.w	r3, #4
    217e:	d1fb      	bne.n	2178 <_i2c_m_sync_transfer+0x3a4>
				msg->buffer++;
    2180:	68ab      	ldr	r3, [r5, #8]
    2182:	3301      	adds	r3, #1
    2184:	60ab      	str	r3, [r5, #8]
				msg->len--;
    2186:	686b      	ldr	r3, [r5, #4]
    2188:	3b01      	subs	r3, #1
    218a:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    218c:	4602      	mov	r2, r0
    218e:	e027      	b.n	21e0 <_i2c_m_sync_transfer+0x40c>
	} else if (flags & SB_FLAG) {
    2190:	f013 0f02 	tst.w	r3, #2
    2194:	d057      	beq.n	2246 <_i2c_m_sync_transfer+0x472>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    2196:	686b      	ldr	r3, [r5, #4]
    2198:	2b00      	cmp	r3, #0
    219a:	d051      	beq.n	2240 <_i2c_m_sync_transfer+0x46c>
    219c:	f012 0f04 	tst.w	r2, #4
    21a0:	d14e      	bne.n	2240 <_i2c_m_sync_transfer+0x46c>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    21a2:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    21a6:	3b01      	subs	r3, #1
    21a8:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    21aa:	2b00      	cmp	r3, #0
    21ac:	f040 808c 	bne.w	22c8 <_i2c_m_sync_transfer+0x4f4>
    21b0:	2900      	cmp	r1, #0
    21b2:	f000 808f 	beq.w	22d4 <_i2c_m_sync_transfer+0x500>
				if (msg->flags & I2C_M_STOP) {
    21b6:	886b      	ldrh	r3, [r5, #2]
    21b8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    21bc:	d12f      	bne.n	221e <_i2c_m_sync_transfer+0x44a>
				msg->flags &= ~I2C_M_BUSY;
    21be:	886b      	ldrh	r3, [r5, #2]
    21c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    21c4:	041b      	lsls	r3, r3, #16
    21c6:	0c1b      	lsrs	r3, r3, #16
    21c8:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    21ca:	68aa      	ldr	r2, [r5, #8]
    21cc:	1c53      	adds	r3, r2, #1
    21ce:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    21d0:	69e3      	ldr	r3, [r4, #28]
    21d2:	f013 0f04 	tst.w	r3, #4
    21d6:	d1fb      	bne.n	21d0 <_i2c_m_sync_transfer+0x3fc>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    21d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    21da:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    21dc:	7627      	strb	r7, [r4, #24]
	return I2C_OK;
    21de:	4602      	mov	r2, r0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    21e0:	886b      	ldrh	r3, [r5, #2]
    21e2:	f413 7f80 	tst.w	r3, #256	; 0x100
    21e6:	d030      	beq.n	224a <_i2c_m_sync_transfer+0x476>
	void *   hw      = i2c_dev->hw;
    21e8:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    21ea:	7e0b      	ldrb	r3, [r1, #24]
    21ec:	b2db      	uxtb	r3, r3
    21ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    21f2:	f013 0f03 	tst.w	r3, #3
    21f6:	d142      	bne.n	227e <_i2c_m_sync_transfer+0x4aa>
    21f8:	7e0b      	ldrb	r3, [r1, #24]
    21fa:	b2db      	uxtb	r3, r3
		if (timeout-- == 0) {
    21fc:	3a01      	subs	r2, #1
    21fe:	d1f8      	bne.n	21f2 <_i2c_m_sync_transfer+0x41e>
			if (msg->flags & I2C_M_STOP) {
    2200:	8873      	ldrh	r3, [r6, #2]
    2202:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2206:	f47f af55 	bne.w	20b4 <_i2c_m_sync_transfer+0x2e0>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    220a:	886b      	ldrh	r3, [r5, #2]
    220c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2210:	041b      	lsls	r3, r3, #16
    2212:	0c1b      	lsrs	r3, r3, #16
    2214:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
    2216:	f06f 0004 	mvn.w	r0, #4
			return ret;
    221a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    221e:	6863      	ldr	r3, [r4, #4]
    2220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2224:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2226:	69e3      	ldr	r3, [r4, #28]
    2228:	f013 0f04 	tst.w	r3, #4
    222c:	d1fb      	bne.n	2226 <_i2c_m_sync_transfer+0x452>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    222e:	6863      	ldr	r3, [r4, #4]
    2230:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2234:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2236:	69e3      	ldr	r3, [r4, #28]
    2238:	f013 0f04 	tst.w	r3, #4
    223c:	d1fb      	bne.n	2236 <_i2c_m_sync_transfer+0x462>
    223e:	e7be      	b.n	21be <_i2c_m_sync_transfer+0x3ea>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2240:	7627      	strb	r7, [r4, #24]
			return I2C_NACK;
    2242:	4662      	mov	r2, ip
    2244:	e7cc      	b.n	21e0 <_i2c_m_sync_transfer+0x40c>
	return I2C_OK;
    2246:	4602      	mov	r2, r0
    2248:	e7ca      	b.n	21e0 <_i2c_m_sync_transfer+0x40c>
    224a:	4610      	mov	r0, r2
    224c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return I2C_ERR_BUSY;
    2250:	f06f 0005 	mvn.w	r0, #5
    2254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2258:	2b01      	cmp	r3, #1
    225a:	f47f aefd 	bne.w	2058 <_i2c_m_sync_transfer+0x284>
    225e:	2900      	cmp	r1, #0
    2260:	f43f aefa 	beq.w	2058 <_i2c_m_sync_transfer+0x284>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    226a:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    226c:	69fb      	ldr	r3, [r7, #28]
    226e:	f013 0f04 	tst.w	r3, #4
    2272:	d1fb      	bne.n	226c <_i2c_m_sync_transfer+0x498>
			if (msg->len == 0) {
    2274:	686b      	ldr	r3, [r5, #4]
    2276:	2b00      	cmp	r3, #0
    2278:	f43f aee4 	beq.w	2044 <_i2c_m_sync_transfer+0x270>
    227c:	e6ec      	b.n	2058 <_i2c_m_sync_transfer+0x284>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    227e:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2280:	69e2      	ldr	r2, [r4, #28]
    2282:	f012 0f04 	tst.w	r2, #4
    2286:	d1fb      	bne.n	2280 <_i2c_m_sync_transfer+0x4ac>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    2288:	8b62      	ldrh	r2, [r4, #26]
    228a:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    228c:	f013 0f01 	tst.w	r3, #1
    2290:	f43f af7e 	beq.w	2190 <_i2c_m_sync_transfer+0x3bc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    2294:	f012 0f02 	tst.w	r2, #2
    2298:	f43f af15 	beq.w	20c6 <_i2c_m_sync_transfer+0x2f2>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    229c:	f884 e018 	strb.w	lr, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    22a0:	886b      	ldrh	r3, [r5, #2]
    22a2:	b29b      	uxth	r3, r3
    22a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    22a8:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    22aa:	886b      	ldrh	r3, [r5, #2]
    22ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    22b0:	041b      	lsls	r3, r3, #16
    22b2:	0c1b      	lsrs	r3, r3, #16
    22b4:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    22b6:	f002 0201 	and.w	r2, r2, #1
			return I2C_ERR_BAD_ADDRESS;
    22ba:	2a00      	cmp	r2, #0
    22bc:	bf14      	ite	ne
    22be:	f06f 0204 	mvnne.w	r2, #4
    22c2:	f06f 0203 	mvneq.w	r2, #3
    22c6:	e78b      	b.n	21e0 <_i2c_m_sync_transfer+0x40c>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    22c8:	2b01      	cmp	r3, #1
    22ca:	f47f af7e 	bne.w	21ca <_i2c_m_sync_transfer+0x3f6>
    22ce:	2900      	cmp	r1, #0
    22d0:	f43f af7b 	beq.w	21ca <_i2c_m_sync_transfer+0x3f6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    22d4:	6863      	ldr	r3, [r4, #4]
    22d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    22da:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22dc:	69e3      	ldr	r3, [r4, #28]
    22de:	f013 0f04 	tst.w	r3, #4
    22e2:	d1fb      	bne.n	22dc <_i2c_m_sync_transfer+0x508>
			if (msg->len == 0) {
    22e4:	686b      	ldr	r3, [r5, #4]
    22e6:	2b00      	cmp	r3, #0
    22e8:	f43f af65 	beq.w	21b6 <_i2c_m_sync_transfer+0x3e2>
    22ec:	e76d      	b.n	21ca <_i2c_m_sync_transfer+0x3f6>
    22ee:	bf00      	nop

000022f0 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    22f0:	b570      	push	{r4, r5, r6, lr}
    22f2:	4606      	mov	r6, r0
    22f4:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    22f6:	4608      	mov	r0, r1
    22f8:	4b5f      	ldr	r3, [pc, #380]	; (2478 <_spi_m_sync_init+0x188>)
    22fa:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    22fc:	2800      	cmp	r0, #0
    22fe:	d072      	beq.n	23e6 <_spi_m_sync_init+0xf6>
    2300:	2806      	cmp	r0, #6
    2302:	d06e      	beq.n	23e2 <_spi_m_sync_init+0xf2>
    2304:	2807      	cmp	r0, #7
    2306:	bf08      	it	eq
    2308:	2502      	moveq	r5, #2
    230a:	d06d      	beq.n	23e8 <_spi_m_sync_init+0xf8>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    230c:	2e00      	cmp	r6, #0
    230e:	f000 80a1 	beq.w	2454 <_spi_m_sync_init+0x164>
    2312:	2c00      	cmp	r4, #0
    2314:	f040 80a7 	bne.w	2466 <_spi_m_sync_init+0x176>
	return NULL;
    2318:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    231a:	2000      	movs	r0, #0
    231c:	f640 123c 	movw	r2, #2364	; 0x93c
    2320:	4956      	ldr	r1, [pc, #344]	; (247c <_spi_m_sync_init+0x18c>)
    2322:	4b57      	ldr	r3, [pc, #348]	; (2480 <_spi_m_sync_init+0x190>)
    2324:	4798      	blx	r3

	if (regs == NULL) {
    2326:	2d00      	cmp	r5, #0
    2328:	f000 8091 	beq.w	244e <_spi_m_sync_init+0x15e>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    232c:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    232e:	f013 0f01 	tst.w	r3, #1
    2332:	d11d      	bne.n	2370 <_spi_m_sync_init+0x80>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    2334:	682b      	ldr	r3, [r5, #0]
    2336:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    233a:	69e3      	ldr	r3, [r4, #28]
    233c:	f013 0f03 	tst.w	r3, #3
    2340:	d1fb      	bne.n	233a <_spi_m_sync_init+0x4a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2342:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    2344:	f013 0f02 	tst.w	r3, #2
    2348:	d00b      	beq.n	2362 <_spi_m_sync_init+0x72>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    234a:	6823      	ldr	r3, [r4, #0]
    234c:	f023 0302 	bic.w	r3, r3, #2
    2350:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2352:	69e3      	ldr	r3, [r4, #28]
    2354:	f013 0f03 	tst.w	r3, #3
    2358:	d1fb      	bne.n	2352 <_spi_m_sync_init+0x62>
    235a:	69e3      	ldr	r3, [r4, #28]
    235c:	f013 0f02 	tst.w	r3, #2
    2360:	d1fb      	bne.n	235a <_spi_m_sync_init+0x6a>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    2362:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2366:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2368:	69e3      	ldr	r3, [r4, #28]
    236a:	f013 0f03 	tst.w	r3, #3
    236e:	d1fb      	bne.n	2368 <_spi_m_sync_init+0x78>
    2370:	69e3      	ldr	r3, [r4, #28]
    2372:	f013 0f01 	tst.w	r3, #1
    2376:	d1fb      	bne.n	2370 <_spi_m_sync_init+0x80>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    2378:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    237a:	682b      	ldr	r3, [r5, #0]
    237c:	f003 031c 	and.w	r3, r3, #28
    2380:	2b08      	cmp	r3, #8
    2382:	d03b      	beq.n	23fc <_spi_m_sync_init+0x10c>
	ASSERT(hw && regs);
    2384:	f640 1206 	movw	r2, #2310	; 0x906
    2388:	493c      	ldr	r1, [pc, #240]	; (247c <_spi_m_sync_init+0x18c>)
    238a:	1c20      	adds	r0, r4, #0
    238c:	bf18      	it	ne
    238e:	2001      	movne	r0, #1
    2390:	4b3b      	ldr	r3, [pc, #236]	; (2480 <_spi_m_sync_init+0x190>)
    2392:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2394:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    2396:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    239a:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    239e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    23a0:	69e3      	ldr	r3, [r4, #28]
    23a2:	f013 0f03 	tst.w	r3, #3
    23a6:	d1fb      	bne.n	23a0 <_spi_m_sync_init+0xb0>
	    (regs->ctrlb
    23a8:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    23aa:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    23ae:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    23b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    23b6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    23b8:	69e3      	ldr	r3, [r4, #28]
    23ba:	f013 0f17 	tst.w	r3, #23
    23be:	d1fb      	bne.n	23b8 <_spi_m_sync_init+0xc8>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    23c0:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    23c2:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    23c4:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    23c6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    23ca:	686b      	ldr	r3, [r5, #4]
    23cc:	f003 0307 	and.w	r3, r3, #7
    23d0:	2b00      	cmp	r3, #0
    23d2:	bf0c      	ite	eq
    23d4:	2301      	moveq	r3, #1
    23d6:	2302      	movne	r3, #2
    23d8:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    23da:	89eb      	ldrh	r3, [r5, #14]
    23dc:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    23de:	2000      	movs	r0, #0
    23e0:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    23e2:	2501      	movs	r5, #1
    23e4:	e000      	b.n	23e8 <_spi_m_sync_init+0xf8>
    23e6:	2500      	movs	r5, #0
			return &sercomspi_regs[i];
    23e8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
    23ec:	4b25      	ldr	r3, [pc, #148]	; (2484 <_spi_m_sync_init+0x194>)
    23ee:	441d      	add	r5, r3
	ASSERT(dev && hw);
    23f0:	2e00      	cmp	r6, #0
    23f2:	d092      	beq.n	231a <_spi_m_sync_init+0x2a>
    23f4:	2001      	movs	r0, #1
    23f6:	2c00      	cmp	r4, #0
    23f8:	d190      	bne.n	231c <_spi_m_sync_init+0x2c>
    23fa:	e78e      	b.n	231a <_spi_m_sync_init+0x2a>
	ASSERT(hw && regs);
    23fc:	f640 121a 	movw	r2, #2330	; 0x91a
    2400:	491e      	ldr	r1, [pc, #120]	; (247c <_spi_m_sync_init+0x18c>)
    2402:	1c20      	adds	r0, r4, #0
    2404:	bf18      	it	ne
    2406:	2001      	movne	r0, #1
    2408:	4b1d      	ldr	r3, [pc, #116]	; (2480 <_spi_m_sync_init+0x190>)
    240a:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    240c:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    240e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    2412:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2416:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2418:	69e3      	ldr	r3, [r4, #28]
    241a:	f013 0f03 	tst.w	r3, #3
    241e:	d1fb      	bne.n	2418 <_spi_m_sync_init+0x128>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    2420:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    2422:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    2426:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    242a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    242e:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2432:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2434:	69e3      	ldr	r3, [r4, #28]
    2436:	f013 0f17 	tst.w	r3, #23
    243a:	d1fb      	bne.n	2434 <_spi_m_sync_init+0x144>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    243c:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    243e:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2440:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2442:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2446:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    2448:	2b00      	cmp	r3, #0
    244a:	d1fc      	bne.n	2446 <_spi_m_sync_init+0x156>
    244c:	e7bd      	b.n	23ca <_spi_m_sync_init+0xda>
		return ERR_INVALID_ARG;
    244e:	f06f 000c 	mvn.w	r0, #12
    2452:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    2454:	f640 123c 	movw	r2, #2364	; 0x93c
    2458:	4908      	ldr	r1, [pc, #32]	; (247c <_spi_m_sync_init+0x18c>)
    245a:	2000      	movs	r0, #0
    245c:	4b08      	ldr	r3, [pc, #32]	; (2480 <_spi_m_sync_init+0x190>)
    245e:	4798      	blx	r3
		return ERR_INVALID_ARG;
    2460:	f06f 000c 	mvn.w	r0, #12
    2464:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    2466:	f640 123c 	movw	r2, #2364	; 0x93c
    246a:	4904      	ldr	r1, [pc, #16]	; (247c <_spi_m_sync_init+0x18c>)
    246c:	2001      	movs	r0, #1
    246e:	4b04      	ldr	r3, [pc, #16]	; (2480 <_spi_m_sync_init+0x190>)
    2470:	4798      	blx	r3
		return ERR_INVALID_ARG;
    2472:	f06f 000c 	mvn.w	r0, #12
    2476:	bd70      	pop	{r4, r5, r6, pc}
    2478:	00001c45 	.word	0x00001c45
    247c:	000034ac 	.word	0x000034ac
    2480:	0000154d 	.word	0x0000154d
    2484:	00003478 	.word	0x00003478

00002488 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    2488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    248c:	4681      	mov	r9, r0
    248e:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    2490:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    2492:	f8d1 8000 	ldr.w	r8, [r1]
    2496:	684d      	ldr	r5, [r1, #4]
    2498:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    249a:	b1a8      	cbz	r0, 24c8 <_spi_m_sync_trans+0x40>
    249c:	1c20      	adds	r0, r4, #0
    249e:	bf18      	it	ne
    24a0:	2001      	movne	r0, #1
    24a2:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
    24a6:	492e      	ldr	r1, [pc, #184]	; (2560 <_spi_m_sync_trans+0xd8>)
    24a8:	4b2e      	ldr	r3, [pc, #184]	; (2564 <_spi_m_sync_trans+0xdc>)
    24aa:	4798      	blx	r3
    24ac:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    24ae:	f013 0f07 	tst.w	r3, #7
    24b2:	d134      	bne.n	251e <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    24b4:	69e0      	ldr	r0, [r4, #28]
    24b6:	f010 0003 	ands.w	r0, r0, #3
    24ba:	d1fb      	bne.n	24b4 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    24bc:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    24be:	f013 0f02 	tst.w	r3, #2
    24c2:	d030      	beq.n	2526 <_spi_m_sync_trans+0x9e>
    24c4:	4602      	mov	r2, r0
    24c6:	e008      	b.n	24da <_spi_m_sync_trans+0x52>
    24c8:	2000      	movs	r0, #0
    24ca:	e7ea      	b.n	24a2 <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    24cc:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    24ce:	f013 0f80 	tst.w	r3, #128	; 0x80
    24d2:	d112      	bne.n	24fa <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    24d4:	68b3      	ldr	r3, [r6, #8]
    24d6:	4283      	cmp	r3, r0
    24d8:	d91e      	bls.n	2518 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    24da:	7e23      	ldrb	r3, [r4, #24]
    24dc:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    24de:	f013 0f04 	tst.w	r3, #4
    24e2:	d024      	beq.n	252e <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    24e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    24e6:	2d00      	cmp	r5, #0
    24e8:	d0f0      	beq.n	24cc <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    24ea:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    24ec:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    24ee:	bf91      	iteee	ls
    24f0:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    24f2:	0a09      	lsrhi	r1, r1, #8
    24f4:	7069      	strbhi	r1, [r5, #1]
    24f6:	3502      	addhi	r5, #2
    24f8:	e7e8      	b.n	24cc <_spi_m_sync_trans+0x44>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    24fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    24fe:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2500:	2380      	movs	r3, #128	; 0x80
    2502:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    2504:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    2508:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    250a:	f013 0f03 	tst.w	r3, #3
    250e:	d0fb      	beq.n	2508 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2510:	2303      	movs	r3, #3
    2512:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    2514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2518:	4293      	cmp	r3, r2
    251a:	d8de      	bhi.n	24da <_spi_m_sync_trans+0x52>
    251c:	e7f4      	b.n	2508 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    251e:	f06f 0003 	mvn.w	r0, #3
    2522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    2526:	f06f 0013 	mvn.w	r0, #19
    252a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    252e:	4290      	cmp	r0, r2
    2530:	d8cd      	bhi.n	24ce <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    2532:	f013 0f01 	tst.w	r3, #1
    2536:	d0ca      	beq.n	24ce <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    2538:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    253c:	f1b8 0f00 	cmp.w	r8, #0
    2540:	d00b      	beq.n	255a <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    2542:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    2546:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    2548:	bf91      	iteee	ls
    254a:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    254e:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    2552:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    2556:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    255a:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    255c:	62a1      	str	r1, [r4, #40]	; 0x28
    255e:	e7b6      	b.n	24ce <_spi_m_sync_trans+0x46>
    2560:	000034ac 	.word	0x000034ac
    2564:	0000154d 	.word	0x0000154d

00002568 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    2568:	2000      	movs	r0, #0
    256a:	4770      	bx	lr

0000256c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    256c:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    256e:	7c83      	ldrb	r3, [r0, #18]
    2570:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2574:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    2576:	f002 0107 	and.w	r1, r2, #7
    257a:	2901      	cmp	r1, #1
    257c:	d00b      	beq.n	2596 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    257e:	015a      	lsls	r2, r3, #5
    2580:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2584:	2110      	movs	r1, #16
    2586:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    258a:	015b      	lsls	r3, r3, #5
    258c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2590:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    2594:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    2596:	f012 0f40 	tst.w	r2, #64	; 0x40
    259a:	d00c      	beq.n	25b6 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    259c:	7cc2      	ldrb	r2, [r0, #19]
    259e:	f36f 1286 	bfc	r2, #6, #1
    25a2:	74c2      	strb	r2, [r0, #19]
    25a4:	015a      	lsls	r2, r3, #5
    25a6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    25aa:	2180      	movs	r1, #128	; 0x80
    25ac:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    25b0:	2140      	movs	r1, #64	; 0x40
    25b2:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    25b6:	7cc2      	ldrb	r2, [r0, #19]
    25b8:	f36f 02c3 	bfc	r2, #3, #1
    25bc:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    25be:	4909      	ldr	r1, [pc, #36]	; (25e4 <_usb_d_dev_handle_setup+0x78>)
    25c0:	015a      	lsls	r2, r3, #5
    25c2:	188c      	adds	r4, r1, r2
    25c4:	2500      	movs	r5, #0
    25c6:	72a5      	strb	r5, [r4, #10]
    25c8:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    25ca:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    25ce:	246f      	movs	r4, #111	; 0x6f
    25d0:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    25d4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    25d8:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    25dc:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    25de:	7c80      	ldrb	r0, [r0, #18]
    25e0:	4798      	blx	r3
    25e2:	bd38      	pop	{r3, r4, r5, pc}
    25e4:	20000148 	.word	0x20000148

000025e8 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    25e8:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    25ea:	2320      	movs	r3, #32
    25ec:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    25f0:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    25f2:	7c83      	ldrb	r3, [r0, #18]
    25f4:	f003 030f 	and.w	r3, r3, #15
    25f8:	015b      	lsls	r3, r3, #5
    25fa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    25fe:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    2602:	4b03      	ldr	r3, [pc, #12]	; (2610 <_usb_d_dev_handle_stall+0x28>)
    2604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2606:	6882      	ldr	r2, [r0, #8]
    2608:	2101      	movs	r1, #1
    260a:	7c80      	ldrb	r0, [r0, #18]
    260c:	4798      	blx	r3
    260e:	bd08      	pop	{r3, pc}
    2610:	20000148 	.word	0x20000148

00002614 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    2614:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2616:	7c84      	ldrb	r4, [r0, #18]
    2618:	2cff      	cmp	r4, #255	; 0xff
    261a:	d003      	beq.n	2624 <_usb_d_dev_trans_done+0x10>
    261c:	7cc3      	ldrb	r3, [r0, #19]
    261e:	f013 0f40 	tst.w	r3, #64	; 0x40
    2622:	d100      	bne.n	2626 <_usb_d_dev_trans_done+0x12>
    2624:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    2626:	7cc2      	ldrb	r2, [r0, #19]
    2628:	f36f 1286 	bfc	r2, #6, #1
    262c:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    262e:	4a03      	ldr	r2, [pc, #12]	; (263c <_usb_d_dev_trans_done+0x28>)
    2630:	6f15      	ldr	r5, [r2, #112]	; 0x70
    2632:	6882      	ldr	r2, [r0, #8]
    2634:	4620      	mov	r0, r4
    2636:	47a8      	blx	r5
    2638:	e7f4      	b.n	2624 <_usb_d_dev_trans_done+0x10>
    263a:	bf00      	nop
    263c:	20000148 	.word	0x20000148

00002640 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    2640:	b530      	push	{r4, r5, lr}
    2642:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2644:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    2646:	2425      	movs	r4, #37	; 0x25
    2648:	f88d 4004 	strb.w	r4, [sp, #4]
    264c:	244a      	movs	r4, #74	; 0x4a
    264e:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2652:	2bff      	cmp	r3, #255	; 0xff
    2654:	d01e      	beq.n	2694 <_usb_d_dev_trans_stop+0x54>
    2656:	7cc4      	ldrb	r4, [r0, #19]
    2658:	f014 0f40 	tst.w	r4, #64	; 0x40
    265c:	d01a      	beq.n	2694 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    265e:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    2662:	b1c9      	cbz	r1, 2698 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2664:	0163      	lsls	r3, r4, #5
    2666:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    266a:	2580      	movs	r5, #128	; 0x80
    266c:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    2670:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    2672:	a902      	add	r1, sp, #8
    2674:	440b      	add	r3, r1
    2676:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    267a:	0163      	lsls	r3, r4, #5
    267c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2680:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2684:	0163      	lsls	r3, r4, #5
    2686:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    268a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    268e:	4611      	mov	r1, r2
    2690:	4b05      	ldr	r3, [pc, #20]	; (26a8 <_usb_d_dev_trans_stop+0x68>)
    2692:	4798      	blx	r3
}
    2694:	b003      	add	sp, #12
    2696:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2698:	0163      	lsls	r3, r4, #5
    269a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    269e:	2540      	movs	r5, #64	; 0x40
    26a0:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    26a4:	e7e4      	b.n	2670 <_usb_d_dev_trans_stop+0x30>
    26a6:	bf00      	nop
    26a8:	00002615 	.word	0x00002615

000026ac <_usb_d_dev_handle_trfail>:
{
    26ac:	b530      	push	{r4, r5, lr}
    26ae:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    26b0:	7c83      	ldrb	r3, [r0, #18]
    26b2:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    26b6:	2204      	movs	r2, #4
    26b8:	f88d 2004 	strb.w	r2, [sp, #4]
    26bc:	2208      	movs	r2, #8
    26be:	f88d 2005 	strb.w	r2, [sp, #5]
    26c2:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    26c4:	460c      	mov	r4, r1
    26c6:	b391      	cbz	r1, 272e <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    26c8:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    26cc:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    26d0:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    26d4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    26d8:	4a32      	ldr	r2, [pc, #200]	; (27a4 <_usb_d_dev_handle_trfail+0xf8>)
    26da:	440a      	add	r2, r1
    26dc:	7a91      	ldrb	r1, [r2, #10]
    26de:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    26e0:	2d02      	cmp	r5, #2
    26e2:	d02c      	beq.n	273e <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    26e4:	f011 0f02 	tst.w	r1, #2
    26e8:	d045      	beq.n	2776 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    26ea:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    26ec:	7a91      	ldrb	r1, [r2, #10]
    26ee:	f36f 0141 	bfc	r1, #1, #1
    26f2:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    26f4:	aa02      	add	r2, sp, #8
    26f6:	4422      	add	r2, r4
    26f8:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    26fc:	015a      	lsls	r2, r3, #5
    26fe:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2702:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2706:	015b      	lsls	r3, r3, #5
    2708:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    270c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    2710:	f005 0307 	and.w	r3, r5, #7
    2714:	2b01      	cmp	r3, #1
    2716:	d143      	bne.n	27a0 <_usb_d_dev_handle_trfail+0xf4>
    2718:	7cc3      	ldrb	r3, [r0, #19]
    271a:	f013 0f40 	tst.w	r3, #64	; 0x40
    271e:	d03f      	beq.n	27a0 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    2720:	09d9      	lsrs	r1, r3, #7
    2722:	428c      	cmp	r4, r1
    2724:	d03c      	beq.n	27a0 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    2726:	2200      	movs	r2, #0
    2728:	4b1f      	ldr	r3, [pc, #124]	; (27a8 <_usb_d_dev_handle_trfail+0xfc>)
    272a:	4798      	blx	r3
    272c:	e038      	b.n	27a0 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    272e:	0159      	lsls	r1, r3, #5
    2730:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    2734:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    2738:	f005 0507 	and.w	r5, r5, #7
    273c:	e7ca      	b.n	26d4 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    273e:	f011 0f01 	tst.w	r1, #1
    2742:	d0cf      	beq.n	26e4 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    2744:	7a91      	ldrb	r1, [r2, #10]
    2746:	f36f 0100 	bfc	r1, #0, #1
    274a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    274c:	aa02      	add	r2, sp, #8
    274e:	4422      	add	r2, r4
    2750:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2754:	015a      	lsls	r2, r3, #5
    2756:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    275a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    275e:	015b      	lsls	r3, r3, #5
    2760:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2764:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    2768:	2204      	movs	r2, #4
    276a:	1c21      	adds	r1, r4, #0
    276c:	bf18      	it	ne
    276e:	2101      	movne	r1, #1
    2770:	4b0d      	ldr	r3, [pc, #52]	; (27a8 <_usb_d_dev_handle_trfail+0xfc>)
    2772:	4798      	blx	r3
    2774:	e014      	b.n	27a0 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    2776:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    277a:	4a0a      	ldr	r2, [pc, #40]	; (27a4 <_usb_d_dev_handle_trfail+0xf8>)
    277c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    2780:	2100      	movs	r1, #0
    2782:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2784:	aa02      	add	r2, sp, #8
    2786:	4414      	add	r4, r2
    2788:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    278c:	015a      	lsls	r2, r3, #5
    278e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2792:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2796:	015b      	lsls	r3, r3, #5
    2798:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    279c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    27a0:	b003      	add	sp, #12
    27a2:	bd30      	pop	{r4, r5, pc}
    27a4:	20000148 	.word	0x20000148
    27a8:	00002641 	.word	0x00002641

000027ac <_usb_d_dev_reset_epts>:
{
    27ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27b0:	4d0c      	ldr	r5, [pc, #48]	; (27e4 <_usb_d_dev_reset_epts+0x38>)
    27b2:	f105 0474 	add.w	r4, r5, #116	; 0x74
    27b6:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    27ba:	f04f 0803 	mov.w	r8, #3
    27be:	4f0a      	ldr	r7, [pc, #40]	; (27e8 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    27c0:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    27c2:	4641      	mov	r1, r8
    27c4:	4620      	mov	r0, r4
    27c6:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    27c8:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    27ca:	2300      	movs	r3, #0
    27cc:	74e3      	strb	r3, [r4, #19]
    27ce:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    27d0:	42ac      	cmp	r4, r5
    27d2:	d1f6      	bne.n	27c2 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    27d4:	2260      	movs	r2, #96	; 0x60
    27d6:	4619      	mov	r1, r3
    27d8:	4802      	ldr	r0, [pc, #8]	; (27e4 <_usb_d_dev_reset_epts+0x38>)
    27da:	4b04      	ldr	r3, [pc, #16]	; (27ec <_usb_d_dev_reset_epts+0x40>)
    27dc:	4798      	blx	r3
    27de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    27e2:	bf00      	nop
    27e4:	20000148 	.word	0x20000148
    27e8:	00002615 	.word	0x00002615
    27ec:	0000332b 	.word	0x0000332b

000027f0 <_usb_d_dev_in_next>:
{
    27f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27f4:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    27f6:	7c84      	ldrb	r4, [r0, #18]
    27f8:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    27fc:	4688      	mov	r8, r1
    27fe:	2900      	cmp	r1, #0
    2800:	f000 809f 	beq.w	2942 <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    2804:	4b58      	ldr	r3, [pc, #352]	; (2968 <_usb_d_dev_in_next+0x178>)
    2806:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    280a:	6958      	ldr	r0, [r3, #20]
    280c:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2810:	8a2b      	ldrh	r3, [r5, #16]
    2812:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2816:	4293      	cmp	r3, r2
    2818:	f000 808d 	beq.w	2936 <_usb_d_dev_in_next+0x146>
    281c:	3b01      	subs	r3, #1
    281e:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2820:	7cef      	ldrb	r7, [r5, #19]
    2822:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    2826:	f1b8 0f00 	cmp.w	r8, #0
    282a:	d005      	beq.n	2838 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    282c:	0162      	lsls	r2, r4, #5
    282e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2832:	2302      	movs	r3, #2
    2834:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    2838:	68a9      	ldr	r1, [r5, #8]
    283a:	eb0e 0301 	add.w	r3, lr, r1
    283e:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    2840:	686e      	ldr	r6, [r5, #4]
    2842:	42b3      	cmp	r3, r6
    2844:	d23f      	bcs.n	28c6 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    2846:	1af6      	subs	r6, r6, r3
    2848:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    284a:	7cea      	ldrb	r2, [r5, #19]
    284c:	f012 0f20 	tst.w	r2, #32
    2850:	d02d      	beq.n	28ae <_usb_d_dev_in_next+0xbe>
    2852:	8a2a      	ldrh	r2, [r5, #16]
    2854:	4296      	cmp	r6, r2
    2856:	bf28      	it	cs
    2858:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    285a:	6829      	ldr	r1, [r5, #0]
    285c:	4632      	mov	r2, r6
    285e:	4419      	add	r1, r3
    2860:	68e8      	ldr	r0, [r5, #12]
    2862:	4b42      	ldr	r3, [pc, #264]	; (296c <_usb_d_dev_in_next+0x17c>)
    2864:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    2866:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    2868:	4b3f      	ldr	r3, [pc, #252]	; (2968 <_usb_d_dev_in_next+0x178>)
    286a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    286e:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2870:	4b3d      	ldr	r3, [pc, #244]	; (2968 <_usb_d_dev_in_next+0x178>)
    2872:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2876:	695a      	ldr	r2, [r3, #20]
    2878:	f366 020d 	bfi	r2, r6, #0, #14
    287c:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    287e:	695a      	ldr	r2, [r3, #20]
    2880:	f36f 329b 	bfc	r2, #14, #14
    2884:	615a      	str	r2, [r3, #20]
	if (!isr) {
    2886:	f1b8 0f00 	cmp.w	r8, #0
    288a:	d108      	bne.n	289e <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    288c:	2f01      	cmp	r7, #1
    288e:	bf0c      	ite	eq
    2890:	224e      	moveq	r2, #78	; 0x4e
    2892:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2894:	0163      	lsls	r3, r4, #5
    2896:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    289a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    289e:	0164      	lsls	r4, r4, #5
    28a0:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    28a4:	2380      	movs	r3, #128	; 0x80
    28a6:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    28aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28ae:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    28b2:	bf28      	it	cs
    28b4:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    28b8:	6829      	ldr	r1, [r5, #0]
    28ba:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    28bc:	4a2a      	ldr	r2, [pc, #168]	; (2968 <_usb_d_dev_in_next+0x178>)
    28be:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    28c2:	6113      	str	r3, [r2, #16]
    28c4:	e7d4      	b.n	2870 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    28c6:	7ceb      	ldrb	r3, [r5, #19]
    28c8:	f013 0f10 	tst.w	r3, #16
    28cc:	d00f      	beq.n	28ee <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    28ce:	7ceb      	ldrb	r3, [r5, #19]
    28d0:	f36f 1304 	bfc	r3, #4, #1
    28d4:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    28d6:	4b24      	ldr	r3, [pc, #144]	; (2968 <_usb_d_dev_in_next+0x178>)
    28d8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    28dc:	695a      	ldr	r2, [r3, #20]
    28de:	f36f 020d 	bfc	r2, #0, #14
    28e2:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    28e4:	695a      	ldr	r2, [r3, #20]
    28e6:	f36f 329b 	bfc	r2, #14, #14
    28ea:	615a      	str	r2, [r3, #20]
    28ec:	e7cb      	b.n	2886 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    28ee:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    28f0:	ea4f 1444 	mov.w	r4, r4, lsl #5
    28f4:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    28f8:	bf0c      	ite	eq
    28fa:	234b      	moveq	r3, #75	; 0x4b
    28fc:	234a      	movne	r3, #74	; 0x4a
    28fe:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    2902:	8a2a      	ldrh	r2, [r5, #16]
    2904:	ea00 030e 	and.w	r3, r0, lr
    2908:	429a      	cmp	r2, r3
    290a:	d005      	beq.n	2918 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    290c:	2100      	movs	r1, #0
    290e:	4628      	mov	r0, r5
    2910:	4b17      	ldr	r3, [pc, #92]	; (2970 <_usb_d_dev_in_next+0x180>)
    2912:	4798      	blx	r3
	return;
    2914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    2918:	7ceb      	ldrb	r3, [r5, #19]
    291a:	f36f 1386 	bfc	r3, #6, #1
    291e:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    2920:	4b11      	ldr	r3, [pc, #68]	; (2968 <_usb_d_dev_in_next+0x178>)
    2922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    2924:	68a9      	ldr	r1, [r5, #8]
    2926:	7ca8      	ldrb	r0, [r5, #18]
    2928:	4798      	blx	r3
    292a:	b9d0      	cbnz	r0, 2962 <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    292c:	7ceb      	ldrb	r3, [r5, #19]
    292e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2932:	74eb      	strb	r3, [r5, #19]
    2934:	e7ea      	b.n	290c <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2936:	7cef      	ldrb	r7, [r5, #19]
    2938:	f007 0707 	and.w	r7, r7, #7
    293c:	f240 30ff 	movw	r0, #1023	; 0x3ff
    2940:	e774      	b.n	282c <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2942:	8a03      	ldrh	r3, [r0, #16]
    2944:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2948:	4293      	cmp	r3, r2
    294a:	d107      	bne.n	295c <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    294c:	7cef      	ldrb	r7, [r5, #19]
    294e:	f007 0707 	and.w	r7, r7, #7
    2952:	f04f 0e00 	mov.w	lr, #0
    2956:	f240 30ff 	movw	r0, #1023	; 0x3ff
    295a:	e76d      	b.n	2838 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    295c:	f04f 0e00 	mov.w	lr, #0
    2960:	e75c      	b.n	281c <_usb_d_dev_in_next+0x2c>
    2962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2966:	bf00      	nop
    2968:	20000148 	.word	0x20000148
    296c:	00003315 	.word	0x00003315
    2970:	00002615 	.word	0x00002615

00002974 <_usb_d_dev_out_next>:
{
    2974:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2978:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    297a:	7c85      	ldrb	r5, [r0, #18]
    297c:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    2980:	4689      	mov	r9, r1
    2982:	2900      	cmp	r1, #0
    2984:	d056      	beq.n	2a34 <_usb_d_dev_out_next+0xc0>
    2986:	4b74      	ldr	r3, [pc, #464]	; (2b58 <_usb_d_dev_out_next+0x1e4>)
    2988:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    298c:	685a      	ldr	r2, [r3, #4]
    298e:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    2992:	685f      	ldr	r7, [r3, #4]
    2994:	f3c7 070d 	ubfx	r7, r7, #0, #14
    2998:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    299a:	8a06      	ldrh	r6, [r0, #16]
    299c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    29a0:	429e      	cmp	r6, r3
    29a2:	f000 80ba 	beq.w	2b1a <_usb_d_dev_out_next+0x1a6>
    29a6:	3e01      	subs	r6, #1
    29a8:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    29aa:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    29ae:	f894 8013 	ldrb.w	r8, [r4, #19]
    29b2:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    29b6:	f1b9 0f00 	cmp.w	r9, #0
    29ba:	d005      	beq.n	29c8 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    29bc:	016b      	lsls	r3, r5, #5
    29be:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    29c2:	2201      	movs	r2, #1
    29c4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    29c8:	7ce3      	ldrb	r3, [r4, #19]
    29ca:	f013 0f20 	tst.w	r3, #32
    29ce:	d00d      	beq.n	29ec <_usb_d_dev_out_next+0x78>
    29d0:	6862      	ldr	r2, [r4, #4]
    29d2:	2a00      	cmp	r2, #0
    29d4:	d037      	beq.n	2a46 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    29d6:	68a0      	ldr	r0, [r4, #8]
    29d8:	1a12      	subs	r2, r2, r0
    29da:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    29dc:	6823      	ldr	r3, [r4, #0]
    29de:	42ba      	cmp	r2, r7
    29e0:	bf28      	it	cs
    29e2:	463a      	movcs	r2, r7
    29e4:	68e1      	ldr	r1, [r4, #12]
    29e6:	4418      	add	r0, r3
    29e8:	4b5c      	ldr	r3, [pc, #368]	; (2b5c <_usb_d_dev_out_next+0x1e8>)
    29ea:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    29ec:	6863      	ldr	r3, [r4, #4]
    29ee:	b353      	cbz	r3, 2a46 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    29f0:	f1b9 0f00 	cmp.w	r9, #0
    29f4:	d040      	beq.n	2a78 <_usb_d_dev_out_next+0x104>
    29f6:	8a22      	ldrh	r2, [r4, #16]
    29f8:	42ba      	cmp	r2, r7
    29fa:	d93d      	bls.n	2a78 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    29fc:	7ce3      	ldrb	r3, [r4, #19]
    29fe:	f36f 1304 	bfc	r3, #4, #1
    2a02:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    2a04:	68a3      	ldr	r3, [r4, #8]
    2a06:	445b      	add	r3, fp
    2a08:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    2a0a:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2a0e:	ea4f 1345 	mov.w	r3, r5, lsl #5
    2a12:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2a16:	bf0c      	ite	eq
    2a18:	222d      	moveq	r2, #45	; 0x2d
    2a1a:	2225      	movne	r2, #37	; 0x25
    2a1c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    2a20:	b915      	cbnz	r5, 2a28 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2a22:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    2a24:	4b4c      	ldr	r3, [pc, #304]	; (2b58 <_usb_d_dev_out_next+0x1e4>)
    2a26:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2a28:	2100      	movs	r1, #0
    2a2a:	4620      	mov	r0, r4
    2a2c:	4b4c      	ldr	r3, [pc, #304]	; (2b60 <_usb_d_dev_out_next+0x1ec>)
    2a2e:	4798      	blx	r3
	return;
    2a30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2a34:	8a06      	ldrh	r6, [r0, #16]
    2a36:	f240 33ff 	movw	r3, #1023	; 0x3ff
    2a3a:	429e      	cmp	r6, r3
    2a3c:	d07b      	beq.n	2b36 <_usb_d_dev_out_next+0x1c2>
    2a3e:	f04f 0b00 	mov.w	fp, #0
    2a42:	46da      	mov	sl, fp
    2a44:	e7af      	b.n	29a6 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2a46:	7ce3      	ldrb	r3, [r4, #19]
    2a48:	f013 0f10 	tst.w	r3, #16
    2a4c:	d06c      	beq.n	2b28 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    2a4e:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    2a50:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2a54:	f043 0320 	orr.w	r3, r3, #32
    2a58:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2a5a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2a5c:	493e      	ldr	r1, [pc, #248]	; (2b58 <_usb_d_dev_out_next+0x1e4>)
    2a5e:	016a      	lsls	r2, r5, #5
    2a60:	188b      	adds	r3, r1, r2
    2a62:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2a64:	8a21      	ldrh	r1, [r4, #16]
    2a66:	685a      	ldr	r2, [r3, #4]
    2a68:	f361 329b 	bfi	r2, r1, #14, #14
    2a6c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2a6e:	685a      	ldr	r2, [r3, #4]
    2a70:	f36f 020d 	bfc	r2, #0, #14
    2a74:	605a      	str	r2, [r3, #4]
    2a76:	e01d      	b.n	2ab4 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    2a78:	68a2      	ldr	r2, [r4, #8]
    2a7a:	4452      	add	r2, sl
    2a7c:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    2a7e:	4293      	cmp	r3, r2
    2a80:	d9c3      	bls.n	2a0a <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    2a82:	1a9b      	subs	r3, r3, r2
    2a84:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    2a86:	7ce1      	ldrb	r1, [r4, #19]
    2a88:	f011 0f20 	tst.w	r1, #32
    2a8c:	d026      	beq.n	2adc <_usb_d_dev_out_next+0x168>
    2a8e:	8a22      	ldrh	r2, [r4, #16]
    2a90:	4293      	cmp	r3, r2
    2a92:	bf28      	it	cs
    2a94:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2a96:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2a98:	016a      	lsls	r2, r5, #5
    2a9a:	492f      	ldr	r1, [pc, #188]	; (2b58 <_usb_d_dev_out_next+0x1e4>)
    2a9c:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2a9e:	4a2e      	ldr	r2, [pc, #184]	; (2b58 <_usb_d_dev_out_next+0x1e4>)
    2aa0:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    2aa4:	6851      	ldr	r1, [r2, #4]
    2aa6:	f363 319b 	bfi	r1, r3, #14, #14
    2aaa:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2aac:	6853      	ldr	r3, [r2, #4]
    2aae:	f36f 030d 	bfc	r3, #0, #14
    2ab2:	6053      	str	r3, [r2, #4]
	if (!isr) {
    2ab4:	f1b9 0f00 	cmp.w	r9, #0
    2ab8:	d108      	bne.n	2acc <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    2aba:	f1b8 0f01 	cmp.w	r8, #1
    2abe:	d025      	beq.n	2b0c <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    2ac0:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2ac2:	016b      	lsls	r3, r5, #5
    2ac4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2ac8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2acc:	016d      	lsls	r5, r5, #5
    2ace:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    2ad2:	2340      	movs	r3, #64	; 0x40
    2ad4:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    2ad8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    2adc:	8a21      	ldrh	r1, [r4, #16]
    2ade:	428b      	cmp	r3, r1
    2ae0:	d90a      	bls.n	2af8 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    2ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    2ae6:	d80e      	bhi.n	2b06 <_usb_d_dev_out_next+0x192>
    2ae8:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2aec:	6821      	ldr	r1, [r4, #0]
    2aee:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    2af0:	0169      	lsls	r1, r5, #5
    2af2:	4819      	ldr	r0, [pc, #100]	; (2b58 <_usb_d_dev_out_next+0x1e4>)
    2af4:	5042      	str	r2, [r0, r1]
    2af6:	e7d2      	b.n	2a9e <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    2af8:	428b      	cmp	r3, r1
    2afa:	d2f7      	bcs.n	2aec <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    2afc:	7ce1      	ldrb	r1, [r4, #19]
    2afe:	f041 0120 	orr.w	r1, r1, #32
    2b02:	74e1      	strb	r1, [r4, #19]
    2b04:	e7f2      	b.n	2aec <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    2b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2b0a:	e7ef      	b.n	2aec <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    2b0c:	4b12      	ldr	r3, [pc, #72]	; (2b58 <_usb_d_dev_out_next+0x1e4>)
    2b0e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2b12:	2200      	movs	r2, #0
    2b14:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    2b16:	222d      	movs	r2, #45	; 0x2d
    2b18:	e7d3      	b.n	2ac2 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    2b1a:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2b1e:	f890 8013 	ldrb.w	r8, [r0, #19]
    2b22:	f008 0807 	and.w	r8, r8, #7
    2b26:	e749      	b.n	29bc <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    2b28:	f1b9 0f00 	cmp.w	r9, #0
    2b2c:	d10b      	bne.n	2b46 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    2b2e:	68a3      	ldr	r3, [r4, #8]
    2b30:	4453      	add	r3, sl
    2b32:	60a3      	str	r3, [r4, #8]
    2b34:	e769      	b.n	2a0a <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2b36:	f890 8013 	ldrb.w	r8, [r0, #19]
    2b3a:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    2b3e:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2b40:	46bb      	mov	fp, r7
    2b42:	46ba      	mov	sl, r7
    2b44:	e740      	b.n	29c8 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    2b46:	8a23      	ldrh	r3, [r4, #16]
    2b48:	42bb      	cmp	r3, r7
    2b4a:	f63f af57 	bhi.w	29fc <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    2b4e:	68a3      	ldr	r3, [r4, #8]
    2b50:	4453      	add	r3, sl
    2b52:	60a3      	str	r3, [r4, #8]
    2b54:	e759      	b.n	2a0a <_usb_d_dev_out_next+0x96>
    2b56:	bf00      	nop
    2b58:	20000148 	.word	0x20000148
    2b5c:	00003315 	.word	0x00003315
    2b60:	00002615 	.word	0x00002615

00002b64 <_usb_d_dev_handler>:
{
    2b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    2b68:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2b6c:	8c1e      	ldrh	r6, [r3, #32]
    2b6e:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    2b70:	b146      	cbz	r6, 2b84 <_usb_d_dev_handler+0x20>
    2b72:	4d91      	ldr	r5, [pc, #580]	; (2db8 <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    2b74:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2b76:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    2b7a:	f8df 9258 	ldr.w	r9, [pc, #600]	; 2dd4 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    2b7e:	f8df 8258 	ldr.w	r8, [pc, #600]	; 2dd8 <_usb_d_dev_handler+0x274>
    2b82:	e0d3      	b.n	2d2c <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    2b84:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    2b86:	8b1b      	ldrh	r3, [r3, #24]
    2b88:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    2b8a:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    2b8c:	f013 0f04 	tst.w	r3, #4
    2b90:	d11d      	bne.n	2bce <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    2b92:	f413 7f00 	tst.w	r3, #512	; 0x200
    2b96:	d123      	bne.n	2be0 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    2b98:	f013 0f80 	tst.w	r3, #128	; 0x80
    2b9c:	d147      	bne.n	2c2e <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    2b9e:	f013 0f70 	tst.w	r3, #112	; 0x70
    2ba2:	d14f      	bne.n	2c44 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    2ba4:	f013 0f08 	tst.w	r3, #8
    2ba8:	d16e      	bne.n	2c88 <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    2baa:	f013 0f01 	tst.w	r3, #1
    2bae:	d0e0      	beq.n	2b72 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2bb0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2bb4:	f240 2201 	movw	r2, #513	; 0x201
    2bb8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2bba:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2bbc:	2270      	movs	r2, #112	; 0x70
    2bbe:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    2bc0:	4b7e      	ldr	r3, [pc, #504]	; (2dbc <_usb_d_dev_handler+0x258>)
    2bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2bc4:	2100      	movs	r1, #0
    2bc6:	2004      	movs	r0, #4
    2bc8:	4798      	blx	r3
    2bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2bce:	2204      	movs	r2, #4
    2bd0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2bd4:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    2bd6:	4b79      	ldr	r3, [pc, #484]	; (2dbc <_usb_d_dev_handler+0x258>)
    2bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2bda:	4798      	blx	r3
    2bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2be0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2be4:	f240 2201 	movw	r2, #513	; 0x201
    2be8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2bea:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2bec:	2270      	movs	r2, #112	; 0x70
    2bee:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2bf0:	4b72      	ldr	r3, [pc, #456]	; (2dbc <_usb_d_dev_handler+0x258>)
    2bf2:	891b      	ldrh	r3, [r3, #8]
    2bf4:	f003 030f 	and.w	r3, r3, #15
    2bf8:	2b03      	cmp	r3, #3
    2bfa:	d00e      	beq.n	2c1a <_usb_d_dev_handler+0xb6>
    2bfc:	4b6f      	ldr	r3, [pc, #444]	; (2dbc <_usb_d_dev_handler+0x258>)
    2bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2c00:	f003 030f 	and.w	r3, r3, #15
    2c04:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2c06:	bf08      	it	eq
    2c08:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2c0a:	d007      	beq.n	2c1c <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    2c0c:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    2c0e:	4b6b      	ldr	r3, [pc, #428]	; (2dbc <_usb_d_dev_handler+0x258>)
    2c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2c12:	2003      	movs	r0, #3
    2c14:	4798      	blx	r3
    2c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2c1a:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    2c1c:	4b67      	ldr	r3, [pc, #412]	; (2dbc <_usb_d_dev_handler+0x258>)
    2c1e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    2c22:	8919      	ldrh	r1, [r3, #8]
    2c24:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    2c28:	2200      	movs	r2, #0
    2c2a:	811a      	strh	r2, [r3, #8]
    2c2c:	e7ef      	b.n	2c0e <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2c2e:	2280      	movs	r2, #128	; 0x80
    2c30:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2c34:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    2c36:	4b61      	ldr	r3, [pc, #388]	; (2dbc <_usb_d_dev_handler+0x258>)
    2c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2c3a:	2100      	movs	r1, #0
    2c3c:	2005      	movs	r0, #5
    2c3e:	4798      	blx	r3
    2c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2c44:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2c48:	2270      	movs	r2, #112	; 0x70
    2c4a:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2c4c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2c4e:	f240 2201 	movw	r2, #513	; 0x201
    2c52:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    2c54:	4b5a      	ldr	r3, [pc, #360]	; (2dc0 <_usb_d_dev_handler+0x25c>)
    2c56:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    2c5a:	f013 0f01 	tst.w	r3, #1
    2c5e:	d00d      	beq.n	2c7c <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2c60:	4a57      	ldr	r2, [pc, #348]	; (2dc0 <_usb_d_dev_handler+0x25c>)
    2c62:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    2c64:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    2c68:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2c6c:	d1f9      	bne.n	2c62 <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    2c6e:	4b53      	ldr	r3, [pc, #332]	; (2dbc <_usb_d_dev_handler+0x258>)
    2c70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2c72:	2100      	movs	r1, #0
    2c74:	2002      	movs	r0, #2
    2c76:	4798      	blx	r3
    2c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2c7c:	4a50      	ldr	r2, [pc, #320]	; (2dc0 <_usb_d_dev_handler+0x25c>)
    2c7e:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    2c80:	f413 7f80 	tst.w	r3, #256	; 0x100
    2c84:	d0fb      	beq.n	2c7e <_usb_d_dev_handler+0x11a>
    2c86:	e7f2      	b.n	2c6e <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2c88:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2c8c:	2400      	movs	r4, #0
    2c8e:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2c92:	2208      	movs	r2, #8
    2c94:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2c96:	2270      	movs	r2, #112	; 0x70
    2c98:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2c9a:	f240 2201 	movw	r2, #513	; 0x201
    2c9e:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    2ca0:	4b48      	ldr	r3, [pc, #288]	; (2dc4 <_usb_d_dev_handler+0x260>)
    2ca2:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    2ca4:	4b45      	ldr	r3, [pc, #276]	; (2dbc <_usb_d_dev_handler+0x258>)
    2ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2ca8:	4621      	mov	r1, r4
    2caa:	2001      	movs	r0, #1
    2cac:	4798      	blx	r3
    2cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2cb2:	f011 0f10 	tst.w	r1, #16
    2cb6:	d109      	bne.n	2ccc <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2cb8:	f011 0f40 	tst.w	r1, #64	; 0x40
    2cbc:	d108      	bne.n	2cd0 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2cbe:	f011 0f20 	tst.w	r1, #32
    2cc2:	d02f      	beq.n	2d24 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    2cc4:	2100      	movs	r1, #0
    2cc6:	4b40      	ldr	r3, [pc, #256]	; (2dc8 <_usb_d_dev_handler+0x264>)
    2cc8:	4798      	blx	r3
    2cca:	e02b      	b.n	2d24 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    2ccc:	47c8      	blx	r9
    2cce:	e029      	b.n	2d24 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    2cd0:	2101      	movs	r1, #1
    2cd2:	4b3d      	ldr	r3, [pc, #244]	; (2dc8 <_usb_d_dev_handler+0x264>)
    2cd4:	4798      	blx	r3
    2cd6:	e025      	b.n	2d24 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2cd8:	f011 0f40 	tst.w	r1, #64	; 0x40
    2cdc:	d111      	bne.n	2d02 <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2cde:	f011 0f08 	tst.w	r1, #8
    2ce2:	d112      	bne.n	2d0a <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2ce4:	f011 0f02 	tst.w	r1, #2
    2ce8:	d112      	bne.n	2d10 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2cea:	f003 0307 	and.w	r3, r3, #7
    2cee:	2b01      	cmp	r3, #1
    2cf0:	d118      	bne.n	2d24 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2cf2:	f011 0f04 	tst.w	r1, #4
    2cf6:	d10f      	bne.n	2d18 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2cf8:	f011 0f10 	tst.w	r1, #16
    2cfc:	d012      	beq.n	2d24 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    2cfe:	47c8      	blx	r9
    2d00:	e010      	b.n	2d24 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    2d02:	2101      	movs	r1, #1
    2d04:	4b30      	ldr	r3, [pc, #192]	; (2dc8 <_usb_d_dev_handler+0x264>)
    2d06:	4798      	blx	r3
    2d08:	e00c      	b.n	2d24 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    2d0a:	2101      	movs	r1, #1
    2d0c:	47c0      	blx	r8
    2d0e:	e009      	b.n	2d24 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    2d10:	2101      	movs	r1, #1
    2d12:	4b2e      	ldr	r3, [pc, #184]	; (2dcc <_usb_d_dev_handler+0x268>)
    2d14:	4798      	blx	r3
    2d16:	e005      	b.n	2d24 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    2d18:	2100      	movs	r1, #0
    2d1a:	47c0      	blx	r8
    2d1c:	e002      	b.n	2d24 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    2d1e:	2100      	movs	r1, #0
    2d20:	4b29      	ldr	r3, [pc, #164]	; (2dc8 <_usb_d_dev_handler+0x264>)
    2d22:	4798      	blx	r3
    2d24:	3401      	adds	r4, #1
    2d26:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2d28:	2c09      	cmp	r4, #9
    2d2a:	d042      	beq.n	2db2 <_usb_d_dev_handler+0x24e>
    2d2c:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    2d2e:	7cab      	ldrb	r3, [r5, #18]
    2d30:	2bff      	cmp	r3, #255	; 0xff
    2d32:	d0f7      	beq.n	2d24 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    2d34:	f003 030f 	and.w	r3, r3, #15
    2d38:	2101      	movs	r1, #1
    2d3a:	4099      	lsls	r1, r3
    2d3c:	4231      	tst	r1, r6
    2d3e:	d0f1      	beq.n	2d24 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    2d40:	0159      	lsls	r1, r3, #5
    2d42:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    2d46:	f501 7180 	add.w	r1, r1, #256	; 0x100
    2d4a:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    2d4c:	015b      	lsls	r3, r3, #5
    2d4e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2d52:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    2d56:	4019      	ands	r1, r3
    2d58:	d0e4      	beq.n	2d24 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2d5a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    2d5e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    2d62:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    2d66:	f003 0247 	and.w	r2, r3, #71	; 0x47
    2d6a:	2a01      	cmp	r2, #1
    2d6c:	d0a1      	beq.n	2cb2 <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    2d6e:	f013 0f80 	tst.w	r3, #128	; 0x80
    2d72:	d1b1      	bne.n	2cd8 <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2d74:	f011 0f20 	tst.w	r1, #32
    2d78:	d1d1      	bne.n	2d1e <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2d7a:	f011 0f04 	tst.w	r1, #4
    2d7e:	d10e      	bne.n	2d9e <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2d80:	f011 0f01 	tst.w	r1, #1
    2d84:	d10e      	bne.n	2da4 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2d86:	f003 0307 	and.w	r3, r3, #7
    2d8a:	2b01      	cmp	r3, #1
    2d8c:	d1ca      	bne.n	2d24 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2d8e:	f011 0f08 	tst.w	r1, #8
    2d92:	d10b      	bne.n	2dac <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2d94:	f011 0f10 	tst.w	r1, #16
    2d98:	d0c4      	beq.n	2d24 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    2d9a:	47c8      	blx	r9
    2d9c:	e7c2      	b.n	2d24 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    2d9e:	2100      	movs	r1, #0
    2da0:	47c0      	blx	r8
    2da2:	e7bf      	b.n	2d24 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    2da4:	2101      	movs	r1, #1
    2da6:	4b0a      	ldr	r3, [pc, #40]	; (2dd0 <_usb_d_dev_handler+0x26c>)
    2da8:	4798      	blx	r3
    2daa:	e7bb      	b.n	2d24 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    2dac:	2101      	movs	r1, #1
    2dae:	47c0      	blx	r8
    2db0:	e7b8      	b.n	2d24 <_usb_d_dev_handler+0x1c0>
    2db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2db6:	bf00      	nop
    2db8:	200001bc 	.word	0x200001bc
    2dbc:	20000148 	.word	0x20000148
    2dc0:	40001000 	.word	0x40001000
    2dc4:	000027ad 	.word	0x000027ad
    2dc8:	000025e9 	.word	0x000025e9
    2dcc:	000027f1 	.word	0x000027f1
    2dd0:	00002975 	.word	0x00002975
    2dd4:	0000256d 	.word	0x0000256d
    2dd8:	000026ad 	.word	0x000026ad

00002ddc <_usb_d_dev_init>:
{
    2ddc:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    2dde:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2de2:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    2de4:	f013 0f01 	tst.w	r3, #1
    2de8:	d124      	bne.n	2e34 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2dea:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2dee:	7893      	ldrb	r3, [r2, #2]
    2df0:	f013 0f03 	tst.w	r3, #3
    2df4:	d1fb      	bne.n	2dee <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    2df6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2dfa:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    2dfc:	f013 0f02 	tst.w	r3, #2
    2e00:	d00f      	beq.n	2e22 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    2e02:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2e06:	7813      	ldrb	r3, [r2, #0]
    2e08:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2e0c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2e0e:	7893      	ldrb	r3, [r2, #2]
    2e10:	f013 0f03 	tst.w	r3, #3
    2e14:	d1fb      	bne.n	2e0e <_usb_d_dev_init+0x32>
    2e16:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2e1a:	7893      	ldrb	r3, [r2, #2]
    2e1c:	f013 0f02 	tst.w	r3, #2
    2e20:	d1fb      	bne.n	2e1a <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2e22:	2201      	movs	r2, #1
    2e24:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2e28:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2e2a:	461a      	mov	r2, r3
    2e2c:	7893      	ldrb	r3, [r2, #2]
    2e2e:	f013 0f03 	tst.w	r3, #3
    2e32:	d1fb      	bne.n	2e2c <_usb_d_dev_init+0x50>
    2e34:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2e38:	7893      	ldrb	r3, [r2, #2]
    2e3a:	f013 0f01 	tst.w	r3, #1
    2e3e:	d1fb      	bne.n	2e38 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    2e40:	4b21      	ldr	r3, [pc, #132]	; (2ec8 <_usb_d_dev_init+0xec>)
    2e42:	4a22      	ldr	r2, [pc, #136]	; (2ecc <_usb_d_dev_init+0xf0>)
    2e44:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    2e46:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    2e48:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    2e4a:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    2e4c:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    2e4e:	4b20      	ldr	r3, [pc, #128]	; (2ed0 <_usb_d_dev_init+0xf4>)
    2e50:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    2e52:	4b20      	ldr	r3, [pc, #128]	; (2ed4 <_usb_d_dev_init+0xf8>)
    2e54:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    2e56:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    2e5a:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    2e5e:	f011 011f 	ands.w	r1, r1, #31
    2e62:	d02b      	beq.n	2ebc <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    2e64:	291f      	cmp	r1, #31
    2e66:	bf08      	it	eq
    2e68:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    2e6a:	b34b      	cbz	r3, 2ec0 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    2e6c:	2b1f      	cmp	r3, #31
    2e6e:	bf08      	it	eq
    2e70:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    2e72:	b33a      	cbz	r2, 2ec4 <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    2e74:	2a07      	cmp	r2, #7
    2e76:	bf08      	it	eq
    2e78:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    2e7a:	f003 031f 	and.w	r3, r3, #31
    2e7e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    2e82:	0312      	lsls	r2, r2, #12
    2e84:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    2e88:	4313      	orrs	r3, r2
    2e8a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2e8e:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    2e90:	78d3      	ldrb	r3, [r2, #3]
    2e92:	f043 0303 	orr.w	r3, r3, #3
    2e96:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    2e98:	78d3      	ldrb	r3, [r2, #3]
    2e9a:	f043 030c 	orr.w	r3, r3, #12
    2e9e:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2ea0:	2304      	movs	r3, #4
    2ea2:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2ea4:	7893      	ldrb	r3, [r2, #2]
    2ea6:	f013 0f03 	tst.w	r3, #3
    2eaa:	d1fb      	bne.n	2ea4 <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    2eac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2eb0:	4a05      	ldr	r2, [pc, #20]	; (2ec8 <_usb_d_dev_init+0xec>)
    2eb2:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    2eb4:	2201      	movs	r2, #1
    2eb6:	811a      	strh	r2, [r3, #8]
}
    2eb8:	2000      	movs	r0, #0
    2eba:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    2ebc:	2109      	movs	r1, #9
    2ebe:	e7d4      	b.n	2e6a <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    2ec0:	2319      	movs	r3, #25
    2ec2:	e7d6      	b.n	2e72 <_usb_d_dev_init+0x96>
		pad_trim = 6;
    2ec4:	2206      	movs	r2, #6
    2ec6:	e7d8      	b.n	2e7a <_usb_d_dev_init+0x9e>
    2ec8:	20000148 	.word	0x20000148
    2ecc:	00002569 	.word	0x00002569
    2ed0:	000027ad 	.word	0x000027ad
    2ed4:	00800084 	.word	0x00800084

00002ed8 <_usb_d_dev_ep_stall>:
{
    2ed8:	b470      	push	{r4, r5, r6}
    2eda:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    2edc:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2ede:	f010 000f 	ands.w	r0, r0, #15
    2ee2:	d008      	beq.n	2ef6 <_usb_d_dev_ep_stall+0x1e>
    2ee4:	2b00      	cmp	r3, #0
    2ee6:	bfb4      	ite	lt
    2ee8:	1c83      	addlt	r3, r0, #2
    2eea:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    2eec:	2802      	cmp	r0, #2
    2eee:	d903      	bls.n	2ef8 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    2ef0:	f06f 0011 	mvn.w	r0, #17
    2ef4:	e018      	b.n	2f28 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    2ef6:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    2ef8:	2901      	cmp	r1, #1
    2efa:	d017      	beq.n	2f2c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    2efc:	2900      	cmp	r1, #0
    2efe:	d03a      	beq.n	2f76 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2f00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2f04:	4a45      	ldr	r2, [pc, #276]	; (301c <_usb_d_dev_ep_stall+0x144>)
    2f06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2f0a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2f0e:	f003 030f 	and.w	r3, r3, #15
    2f12:	015b      	lsls	r3, r3, #5
    2f14:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2f18:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2f1c:	2310      	movs	r3, #16
    2f1e:	40a3      	lsls	r3, r4
    2f20:	421a      	tst	r2, r3
    2f22:	bf14      	ite	ne
    2f24:	2001      	movne	r0, #1
    2f26:	2000      	moveq	r0, #0
}
    2f28:	bc70      	pop	{r4, r5, r6}
    2f2a:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2f2c:	2510      	movs	r5, #16
    2f2e:	40a5      	lsls	r5, r4
    2f30:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2f32:	493a      	ldr	r1, [pc, #232]	; (301c <_usb_d_dev_ep_stall+0x144>)
    2f34:	009e      	lsls	r6, r3, #2
    2f36:	18f2      	adds	r2, r6, r3
    2f38:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2f3c:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2f40:	f002 020f 	and.w	r2, r2, #15
    2f44:	0150      	lsls	r0, r2, #5
    2f46:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2f4a:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2f4e:	2020      	movs	r0, #32
    2f50:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    2f54:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2f56:	0152      	lsls	r2, r2, #5
    2f58:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2f5c:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    2f60:	4433      	add	r3, r6
    2f62:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    2f66:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2f6a:	f042 0208 	orr.w	r2, r2, #8
    2f6e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    2f72:	2000      	movs	r0, #0
    2f74:	e7d8      	b.n	2f28 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    2f76:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2f7a:	4928      	ldr	r1, [pc, #160]	; (301c <_usb_d_dev_ep_stall+0x144>)
    2f7c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2f80:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    2f84:	f002 020f 	and.w	r2, r2, #15
    2f88:	0151      	lsls	r1, r2, #5
    2f8a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2f8e:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2f92:	2010      	movs	r0, #16
    2f94:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    2f96:	4205      	tst	r5, r0
    2f98:	d03c      	beq.n	3014 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2f9a:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2f9c:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2fa0:	2020      	movs	r0, #32
    2fa2:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2fa4:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2fa6:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2faa:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    2fae:	4202      	tst	r2, r0
    2fb0:	d007      	beq.n	2fc2 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2fb2:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    2fb6:	2201      	movs	r2, #1
    2fb8:	fa02 f404 	lsl.w	r4, r2, r4
    2fbc:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2fbe:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2fc2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2fc6:	4815      	ldr	r0, [pc, #84]	; (301c <_usb_d_dev_ep_stall+0x144>)
    2fc8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    2fcc:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    2fd0:	f002 0207 	and.w	r2, r2, #7
    2fd4:	2a01      	cmp	r2, #1
    2fd6:	d00c      	beq.n	2ff2 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    2fd8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2fdc:	4a0f      	ldr	r2, [pc, #60]	; (301c <_usb_d_dev_ep_stall+0x144>)
    2fde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2fe2:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2fe6:	f36f 02c3 	bfc	r2, #3, #1
    2fea:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2fee:	2000      	movs	r0, #0
    2ff0:	e79a      	b.n	2f28 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2ff2:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    2ff6:	f012 0f30 	tst.w	r2, #48	; 0x30
    2ffa:	d10d      	bne.n	3018 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    2ffc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3000:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    3004:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    3008:	f36f 02c3 	bfc	r2, #3, #1
    300c:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3010:	2000      	movs	r0, #0
    3012:	e789      	b.n	2f28 <_usb_d_dev_ep_stall+0x50>
    3014:	2000      	movs	r0, #0
    3016:	e787      	b.n	2f28 <_usb_d_dev_ep_stall+0x50>
    3018:	2000      	movs	r0, #0
    301a:	e785      	b.n	2f28 <_usb_d_dev_ep_stall+0x50>
    301c:	20000148 	.word	0x20000148

00003020 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    3020:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    3022:	f000 040f 	and.w	r4, r0, #15
    3026:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    3028:	4a14      	ldr	r2, [pc, #80]	; (307c <_usb_d_dev_ep_read_req+0x5c>)
    302a:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    302c:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    302e:	6840      	ldr	r0, [r0, #4]
    3030:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    3034:	2c02      	cmp	r4, #2
    3036:	d817      	bhi.n	3068 <_usb_d_dev_ep_read_req+0x48>
    3038:	b1c9      	cbz	r1, 306e <_usb_d_dev_ep_read_req+0x4e>
    303a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    303e:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    3042:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    3044:	2a11      	cmp	r2, #17
    3046:	d115      	bne.n	3074 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3048:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    304c:	f012 0f10 	tst.w	r2, #16
    3050:	d102      	bne.n	3058 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    3052:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    3054:	bc30      	pop	{r4, r5}
    3056:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    3058:	682c      	ldr	r4, [r5, #0]
    305a:	686a      	ldr	r2, [r5, #4]
    305c:	600c      	str	r4, [r1, #0]
    305e:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3060:	2210      	movs	r2, #16
    3062:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    3066:	e7f5      	b.n	3054 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    3068:	f06f 0011 	mvn.w	r0, #17
    306c:	e7f2      	b.n	3054 <_usb_d_dev_ep_read_req+0x34>
    306e:	f06f 0011 	mvn.w	r0, #17
    3072:	e7ef      	b.n	3054 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    3074:	f06f 0012 	mvn.w	r0, #18
    3078:	e7ec      	b.n	3054 <_usb_d_dev_ep_read_req+0x34>
    307a:	bf00      	nop
    307c:	20000148 	.word	0x20000148

00003080 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    3080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3084:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    3086:	7a03      	ldrb	r3, [r0, #8]
    3088:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    308a:	f013 030f 	ands.w	r3, r3, #15
    308e:	f000 80c2 	beq.w	3216 <_usb_d_dev_ep_trans+0x196>
    3092:	2e00      	cmp	r6, #0
    3094:	bfb4      	ite	lt
    3096:	1c9a      	addlt	r2, r3, #2
    3098:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    309a:	4614      	mov	r4, r2
    309c:	4969      	ldr	r1, [pc, #420]	; (3244 <_usb_d_dev_ep_trans+0x1c4>)
    309e:	f101 0760 	add.w	r7, r1, #96	; 0x60
    30a2:	1c55      	adds	r5, r2, #1
    30a4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    30a8:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    30ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    30b0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    30b4:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    30b8:	f240 31ff 	movw	r1, #1023	; 0x3ff
    30bc:	428a      	cmp	r2, r1
    30be:	d025      	beq.n	310c <_usb_d_dev_ep_trans+0x8c>
    30c0:	1e55      	subs	r5, r2, #1
    30c2:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    30c4:	6841      	ldr	r1, [r0, #4]
    30c6:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    30c8:	2b02      	cmp	r3, #2
    30ca:	f200 8092 	bhi.w	31f2 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    30ce:	6803      	ldr	r3, [r0, #0]
    30d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    30d4:	d31c      	bcc.n	3110 <_usb_d_dev_ep_trans+0x90>
    30d6:	eb03 0c01 	add.w	ip, r3, r1
    30da:	f8df e180 	ldr.w	lr, [pc, #384]	; 325c <_usb_d_dev_ep_trans+0x1dc>
    30de:	45f4      	cmp	ip, lr
    30e0:	d816      	bhi.n	3110 <_usb_d_dev_ep_trans+0x90>
    30e2:	f013 0f03 	tst.w	r3, #3
    30e6:	d113      	bne.n	3110 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    30e8:	2e00      	cmp	r6, #0
    30ea:	db2a      	blt.n	3142 <_usb_d_dev_ep_trans+0xc2>
    30ec:	428a      	cmp	r2, r1
    30ee:	f200 809c 	bhi.w	322a <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    30f2:	b34d      	cbz	r5, 3148 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    30f4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    30f8:	4a52      	ldr	r2, [pc, #328]	; (3244 <_usb_d_dev_ep_trans+0x1c4>)
    30fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    30fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3102:	2b00      	cmp	r3, #0
    3104:	d07b      	beq.n	31fe <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    3106:	f04f 0800 	mov.w	r8, #0
    310a:	e00c      	b.n	3126 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    310c:	4615      	mov	r5, r2
    310e:	e7d9      	b.n	30c4 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    3110:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3114:	4a4b      	ldr	r2, [pc, #300]	; (3244 <_usb_d_dev_ep_trans+0x1c4>)
    3116:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    311a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    311e:	2b00      	cmp	r3, #0
    3120:	d06a      	beq.n	31f8 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    3122:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    3126:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    312a:	4a46      	ldr	r2, [pc, #280]	; (3244 <_usb_d_dev_ep_trans+0x1c4>)
    312c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3130:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    3134:	f013 0f08 	tst.w	r3, #8
    3138:	d009      	beq.n	314e <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    313a:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    313c:	b003      	add	sp, #12
    313e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    3142:	f04f 0800 	mov.w	r8, #0
    3146:	e7ee      	b.n	3126 <_usb_d_dev_ep_trans+0xa6>
    3148:	f04f 0800 	mov.w	r8, #0
    314c:	e7eb      	b.n	3126 <_usb_d_dev_ep_trans+0xa6>
    314e:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    3150:	a801      	add	r0, sp, #4
    3152:	4b3d      	ldr	r3, [pc, #244]	; (3248 <_usb_d_dev_ep_trans+0x1c8>)
    3154:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    3156:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    315a:	4a3a      	ldr	r2, [pc, #232]	; (3244 <_usb_d_dev_ep_trans+0x1c4>)
    315c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3160:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    3164:	f013 0f40 	tst.w	r3, #64	; 0x40
    3168:	d13c      	bne.n	31e4 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    316a:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    316e:	4b35      	ldr	r3, [pc, #212]	; (3244 <_usb_d_dev_ep_trans+0x1c4>)
    3170:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    3174:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    3178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    317c:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    3180:	a801      	add	r0, sp, #4
    3182:	4b32      	ldr	r3, [pc, #200]	; (324c <_usb_d_dev_ep_trans+0x1cc>)
    3184:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    3186:	f8da 3000 	ldr.w	r3, [sl]
    318a:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    318e:	f8da 3004 	ldr.w	r3, [sl, #4]
    3192:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    3196:	2300      	movs	r3, #0
    3198:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    319c:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    319e:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    31a2:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    31a6:	f368 1345 	bfi	r3, r8, #5, #1
    31aa:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    31ae:	f89a 3009 	ldrb.w	r3, [sl, #9]
    31b2:	b1e3      	cbz	r3, 31ee <_usb_d_dev_ep_trans+0x16e>
    31b4:	fab5 f585 	clz	r5, r5
    31b8:	096d      	lsrs	r5, r5, #5
    31ba:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    31be:	4b21      	ldr	r3, [pc, #132]	; (3244 <_usb_d_dev_ep_trans+0x1c4>)
    31c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    31c4:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    31c8:	f365 1304 	bfi	r3, r5, #4, #1
    31cc:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    31d0:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    31d2:	f04f 0100 	mov.w	r1, #0
    31d6:	4638      	mov	r0, r7
    31d8:	bfb4      	ite	lt
    31da:	4b1d      	ldrlt	r3, [pc, #116]	; (3250 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    31dc:	4b1d      	ldrge	r3, [pc, #116]	; (3254 <_usb_d_dev_ep_trans+0x1d4>)
    31de:	4798      	blx	r3
	return ERR_NONE;
    31e0:	2000      	movs	r0, #0
    31e2:	e7ab      	b.n	313c <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    31e4:	a801      	add	r0, sp, #4
    31e6:	4b19      	ldr	r3, [pc, #100]	; (324c <_usb_d_dev_ep_trans+0x1cc>)
    31e8:	4798      	blx	r3
		return USB_BUSY;
    31ea:	2001      	movs	r0, #1
    31ec:	e7a6      	b.n	313c <_usb_d_dev_ep_trans+0xbc>
    31ee:	2500      	movs	r5, #0
    31f0:	e7e3      	b.n	31ba <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    31f2:	f06f 0011 	mvn.w	r0, #17
    31f6:	e7a1      	b.n	313c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    31f8:	f06f 0012 	mvn.w	r0, #18
    31fc:	e79e      	b.n	313c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    31fe:	f06f 0011 	mvn.w	r0, #17
    3202:	e79b      	b.n	313c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    3204:	f06f 0012 	mvn.w	r0, #18
    3208:	e798      	b.n	313c <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    320a:	6841      	ldr	r1, [r0, #4]
    320c:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    3210:	4f11      	ldr	r7, [pc, #68]	; (3258 <_usb_d_dev_ep_trans+0x1d8>)
    3212:	2400      	movs	r4, #0
    3214:	e75b      	b.n	30ce <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3216:	4a0b      	ldr	r2, [pc, #44]	; (3244 <_usb_d_dev_ep_trans+0x1c4>)
    3218:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    321c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3220:	428a      	cmp	r2, r1
    3222:	d0f2      	beq.n	320a <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    3224:	4f0c      	ldr	r7, [pc, #48]	; (3258 <_usb_d_dev_ep_trans+0x1d8>)
    3226:	2400      	movs	r4, #0
    3228:	e74a      	b.n	30c0 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    322a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    322e:	4a05      	ldr	r2, [pc, #20]	; (3244 <_usb_d_dev_ep_trans+0x1c4>)
    3230:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3234:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3238:	2b00      	cmp	r3, #0
    323a:	d0e3      	beq.n	3204 <_usb_d_dev_ep_trans+0x184>
    323c:	f04f 0801 	mov.w	r8, #1
    3240:	e771      	b.n	3126 <_usb_d_dev_ep_trans+0xa6>
    3242:	bf00      	nop
    3244:	20000148 	.word	0x20000148
    3248:	00000fe5 	.word	0x00000fe5
    324c:	00000ff3 	.word	0x00000ff3
    3250:	000027f1 	.word	0x000027f1
    3254:	00002975 	.word	0x00002975
    3258:	200001bc 	.word	0x200001bc
    325c:	20041fff 	.word	0x20041fff

00003260 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3260:	4b09      	ldr	r3, [pc, #36]	; (3288 <_usb_d_dev_register_ep_callback+0x28>)
    3262:	2900      	cmp	r1, #0
    3264:	bf08      	it	eq
    3266:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    3268:	4603      	mov	r3, r0
    326a:	b130      	cbz	r0, 327a <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    326c:	2801      	cmp	r0, #1
    326e:	d007      	beq.n	3280 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    3270:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    3272:	bf04      	itt	eq
    3274:	4b05      	ldreq	r3, [pc, #20]	; (328c <_usb_d_dev_register_ep_callback+0x2c>)
    3276:	6719      	streq	r1, [r3, #112]	; 0x70
    3278:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    327a:	4b04      	ldr	r3, [pc, #16]	; (328c <_usb_d_dev_register_ep_callback+0x2c>)
    327c:	6699      	str	r1, [r3, #104]	; 0x68
    327e:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    3280:	4b02      	ldr	r3, [pc, #8]	; (328c <_usb_d_dev_register_ep_callback+0x2c>)
    3282:	66d9      	str	r1, [r3, #108]	; 0x6c
    3284:	4770      	bx	lr
    3286:	bf00      	nop
    3288:	00002569 	.word	0x00002569
    328c:	20000148 	.word	0x20000148

00003290 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    3290:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3292:	4b01      	ldr	r3, [pc, #4]	; (3298 <USB_0_Handler+0x8>)
    3294:	4798      	blx	r3
    3296:	bd08      	pop	{r3, pc}
    3298:	00002b65 	.word	0x00002b65

0000329c <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    329c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    329e:	4b01      	ldr	r3, [pc, #4]	; (32a4 <USB_1_Handler+0x8>)
    32a0:	4798      	blx	r3
    32a2:	bd08      	pop	{r3, pc}
    32a4:	00002b65 	.word	0x00002b65

000032a8 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    32a8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    32aa:	4b01      	ldr	r3, [pc, #4]	; (32b0 <USB_2_Handler+0x8>)
    32ac:	4798      	blx	r3
    32ae:	bd08      	pop	{r3, pc}
    32b0:	00002b65 	.word	0x00002b65

000032b4 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    32b4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    32b6:	4b01      	ldr	r3, [pc, #4]	; (32bc <USB_3_Handler+0x8>)
    32b8:	4798      	blx	r3
    32ba:	bd08      	pop	{r3, pc}
    32bc:	00002b65 	.word	0x00002b65

000032c0 <main>:
#include <atmel_start.h>

int main(void)
{
    32c0:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    32c2:	4b01      	ldr	r3, [pc, #4]	; (32c8 <main+0x8>)
    32c4:	4798      	blx	r3
    32c6:	e7fe      	b.n	32c6 <main+0x6>
    32c8:	000002d1 	.word	0x000002d1

000032cc <__libc_init_array>:
    32cc:	b570      	push	{r4, r5, r6, lr}
    32ce:	4e0d      	ldr	r6, [pc, #52]	; (3304 <__libc_init_array+0x38>)
    32d0:	4c0d      	ldr	r4, [pc, #52]	; (3308 <__libc_init_array+0x3c>)
    32d2:	1ba4      	subs	r4, r4, r6
    32d4:	10a4      	asrs	r4, r4, #2
    32d6:	2500      	movs	r5, #0
    32d8:	42a5      	cmp	r5, r4
    32da:	d109      	bne.n	32f0 <__libc_init_array+0x24>
    32dc:	4e0b      	ldr	r6, [pc, #44]	; (330c <__libc_init_array+0x40>)
    32de:	4c0c      	ldr	r4, [pc, #48]	; (3310 <__libc_init_array+0x44>)
    32e0:	f000 f8f2 	bl	34c8 <_init>
    32e4:	1ba4      	subs	r4, r4, r6
    32e6:	10a4      	asrs	r4, r4, #2
    32e8:	2500      	movs	r5, #0
    32ea:	42a5      	cmp	r5, r4
    32ec:	d105      	bne.n	32fa <__libc_init_array+0x2e>
    32ee:	bd70      	pop	{r4, r5, r6, pc}
    32f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    32f4:	4798      	blx	r3
    32f6:	3501      	adds	r5, #1
    32f8:	e7ee      	b.n	32d8 <__libc_init_array+0xc>
    32fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    32fe:	4798      	blx	r3
    3300:	3501      	adds	r5, #1
    3302:	e7f2      	b.n	32ea <__libc_init_array+0x1e>
    3304:	000034d4 	.word	0x000034d4
    3308:	000034d4 	.word	0x000034d4
    330c:	000034d4 	.word	0x000034d4
    3310:	000034d8 	.word	0x000034d8

00003314 <memcpy>:
    3314:	b510      	push	{r4, lr}
    3316:	1e43      	subs	r3, r0, #1
    3318:	440a      	add	r2, r1
    331a:	4291      	cmp	r1, r2
    331c:	d100      	bne.n	3320 <memcpy+0xc>
    331e:	bd10      	pop	{r4, pc}
    3320:	f811 4b01 	ldrb.w	r4, [r1], #1
    3324:	f803 4f01 	strb.w	r4, [r3, #1]!
    3328:	e7f7      	b.n	331a <memcpy+0x6>

0000332a <memset>:
    332a:	4402      	add	r2, r0
    332c:	4603      	mov	r3, r0
    332e:	4293      	cmp	r3, r2
    3330:	d100      	bne.n	3334 <memset+0xa>
    3332:	4770      	bx	lr
    3334:	f803 1b01 	strb.w	r1, [r3], #1
    3338:	e7f9      	b.n	332e <memset+0x4>
    333a:	0000      	movs	r0, r0
    333c:	682f2e2e 	.word	0x682f2e2e
    3340:	732f6c61 	.word	0x732f6c61
    3344:	682f6372 	.word	0x682f6372
    3348:	635f6c61 	.word	0x635f6c61
    334c:	615f6e61 	.word	0x615f6e61
    3350:	636e7973 	.word	0x636e7973
    3354:	0000632e 	.word	0x0000632e
    3358:	682f2e2e 	.word	0x682f2e2e
    335c:	732f6c61 	.word	0x732f6c61
    3360:	682f6372 	.word	0x682f6372
    3364:	695f6c61 	.word	0x695f6c61
    3368:	6d5f6332 	.word	0x6d5f6332
    336c:	6e79735f 	.word	0x6e79735f
    3370:	00632e63 	.word	0x00632e63
    3374:	682f2e2e 	.word	0x682f2e2e
    3378:	732f6c61 	.word	0x732f6c61
    337c:	682f6372 	.word	0x682f6372
    3380:	735f6c61 	.word	0x735f6c61
    3384:	6d5f6970 	.word	0x6d5f6970
    3388:	6e79735f 	.word	0x6e79735f
    338c:	00632e63 	.word	0x00632e63

00003390 <_map>:
    3390:	00000000 00000060 00000001 00000061     ....`.......a...
    33a0:	00000002 00000052 00000003 00000023     ....R.......#...
    33b0:	00000004 00000024 00000005 00000025     ....$.......%...
    33c0:	00000006 00000026 00000007 00000027     ....&.......'...
    33d0:	00000008 00000028 00000009 00000029     ....(.......)...
    33e0:	0000000a 0000002a 0000000e 0000003c     ....*.......<...
    33f0:	0000000f 0000003d 682f2e2e 652f6c70     ....=...../hpl/e
    3400:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    3410:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    3420:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00003430 <_i2cms>:
    3430:	00000001 00200014 00000100 00003635     ...... .....56..
    3440:	00d70000 00b71b00 00000002 00200014     .............. .
    3450:	00000100 00003635 00d70000 00b71b00     ....56..........
    3460:	00000004 00200014 00000100 00003635     ...... .....56..
    3470:	00d70000 00b71b00                       ........

00003478 <sercomspi_regs>:
    3478:	0020000c 00020000 00000000 01ff0077     .. .........w...
    3488:	30000c00 02000000 00000000 ff007700     ...0.........w..
    3498:	000c0601 00000020 00000002 00770000     .... .........w.
    34a8:	000701ff 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    34b8:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

000034c8 <_init>:
    34c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34ca:	bf00      	nop
    34cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    34ce:	bc08      	pop	{r3}
    34d0:	469e      	mov	lr, r3
    34d2:	4770      	bx	lr

000034d4 <__init_array_start>:
    34d4:	00000289 	.word	0x00000289

000034d8 <_fini>:
    34d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34da:	bf00      	nop
    34dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    34de:	bc08      	pop	{r3}
    34e0:	469e      	mov	lr, r3
    34e2:	4770      	bx	lr

000034e4 <__fini_array_start>:
    34e4:	00000265 	.word	0x00000265
