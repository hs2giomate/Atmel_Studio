
libEvaporatorAndCondesatorFan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f270  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000f270  0000f270  0001f270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000063c  20000000  0000f278  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002063c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002063c  2**0
                  CONTENTS
  5 .bss          00001360  2000063c  0000f8b4  0002063c  2**2
                  ALLOC
  6 .stack        00010004  2000199c  00010c14  0002063c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002063c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002066a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00068abb  00000000  00000000  000206c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000092b6  00000000  00000000  0008917e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001a710  00000000  00000000  00092434  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002f28  00000000  00000000  000acb44  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002c58  00000000  00000000  000afa6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004c9a6  00000000  00000000  000b26c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00036daf  00000000  00000000  000ff06a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013c6d0  00000000  00000000  00135e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c490  00000000  00000000  002724ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 19 01 20 21 04 00 00 1d 04 00 00 1d 04 00 00     ... !...........
      10:	1d 04 00 00 1d 04 00 00 1d 04 00 00 00 00 00 00     ................
	...
      2c:	1d 04 00 00 1d 04 00 00 00 00 00 00 1d 04 00 00     ................
      3c:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................
      4c:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................
      5c:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................
      6c:	ad 5d 00 00 b1 4b 00 00 c1 4b 00 00 1d 04 00 00     .]...K...K......
      7c:	d1 4b 00 00 e1 4b 00 00 f1 4b 00 00 01 4c 00 00     .K...K...K...L..
      8c:	11 4c 00 00 21 4c 00 00 31 4c 00 00 1d 04 00 00     .L..!L..1L......
      9c:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................
      ac:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................
      bc:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................
      cc:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................
      dc:	1d 04 00 00 1d 04 00 00 1d 04 00 00 00 00 00 00     ................
	...
      f4:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................
     104:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................
     114:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................
     124:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................
     134:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................
     144:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................
     154:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................
     164:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................
     174:	1d 04 00 00 1d 04 00 00 f9 3f 00 00 29 ad 00 00     .........?..)...
     184:	39 ad 00 00 49 ad 00 00 59 ad 00 00 1d 04 00 00     9...I...Y.......
     194:	29 77 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     )w..............
     1a4:	1d 04 00 00 1d 04 00 00 1d 04 00 00 45 77 00 00     ............Ew..
     1b4:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................
     1c4:	61 77 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     aw..............
     1d4:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................
     1e4:	1d 04 00 00 1d 04 00 00 25 84 00 00 1d 04 00 00     ........%.......
     1f4:	41 84 00 00 1d 04 00 00 5d 84 00 00 79 84 00 00     A.......]...y...
     204:	95 84 00 00 b1 84 00 00 1d 04 00 00 1d 04 00 00     ................
     214:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................
     224:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................
     234:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................
     244:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................
     254:	1d 04 00 00 1d 04 00 00 1d 04 00 00 1d 04 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000063c 	.word	0x2000063c
     280:	00000000 	.word	0x00000000
     284:	0000f278 	.word	0x0000f278

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000f278 	.word	0x0000f278
     2c4:	20000640 	.word	0x20000640
     2c8:	0000f278 	.word	0x0000f278
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN19CondesatorFan_ClassC1Ev>:
#include "CondesatorFan_Class.h"

// default constructor
CondesatorFan_Class::CondesatorFan_Class()
{
} //CondesatorFan_Class
     2d0:	4770      	bx	lr

000002d2 <_ZN19CondesatorFan_ClassD1Ev>:

// default destructor
CondesatorFan_Class::~CondesatorFan_Class()
{
} //~CondesatorFan_Class
     2d2:	4770      	bx	lr

000002d4 <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
	return isOK;
	
	
}

uint8_t CondesatorFan_Class::InitExpanderArray(MCP23008_Class** expandersArray){
     2d4:	1f0b      	subs	r3, r1, #4
     2d6:	300c      	adds	r0, #12
     2d8:	3118      	adds	r1, #24
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
		{
			expanders[i]=expandersArray[i];
     2da:	f853 2f04 	ldr.w	r2, [r3, #4]!
     2de:	f840 2b04 	str.w	r2, [r0], #4
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
     2e2:	428b      	cmp	r3, r1
     2e4:	d1f9      	bne.n	2da <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
		}
		return 0;
}
     2e6:	2000      	movs	r0, #0
     2e8:	4770      	bx	lr
	...

000002ec <_ZN19CondesatorFan_Class10ReadStatusEv>:
	


uint8_t	CondesatorFan_Class::ReadStatus(void){
     2ec:	b510      	push	{r4, lr}
     2ee:	4604      	mov	r4, r0
	uint8_t r=expanders[0]->ReadGPIORegister();
     2f0:	68c0      	ldr	r0, [r0, #12]
     2f2:	4b0a      	ldr	r3, [pc, #40]	; (31c <_ZN19CondesatorFan_Class10ReadStatusEv+0x30>)
     2f4:	4798      	blx	r3
	
	
	condesatorStatus.niAlcCdsFanExtFault=r&(0x01<<(4));
     2f6:	f3c0 1200 	ubfx	r2, r0, #4, #1
     2fa:	78e3      	ldrb	r3, [r4, #3]
     2fc:	f362 0382 	bfi	r3, r2, #2, #1
	condesatorStatus.niAlcCdsFanEnableFault=r&(0x02<<(4));
     300:	f3c0 1240 	ubfx	r2, r0, #5, #1
     304:	f362 0341 	bfi	r3, r2, #1, #1
	condesatorStatus.niAlcCdsFanPwmFault=r&(0x04<<(4));
     308:	f3c0 1280 	ubfx	r2, r0, #6, #1
     30c:	f362 0300 	bfi	r3, r2, #0, #1
     310:	70e3      	strb	r3, [r4, #3]
	faults=r&(0x07<<(4));
     312:	f000 0070 	and.w	r0, r0, #112	; 0x70
     316:	7120      	strb	r0, [r4, #4]
	return faults;
}
     318:	bd10      	pop	{r4, pc}
     31a:	bf00      	nop
     31c:	0000d5c9 	.word	0x0000d5c9

00000320 <_ZN19CondesatorFan_Class6EnableEv>:
uint8_t	CondesatorFan_Class::Enable(void){
     320:	b510      	push	{r4, lr}
     322:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(2,true);
     324:	2201      	movs	r2, #1
     326:	2102      	movs	r1, #2
     328:	68c0      	ldr	r0, [r0, #12]
     32a:	4b02      	ldr	r3, [pc, #8]	; (334 <_ZN19CondesatorFan_Class6EnableEv+0x14>)
     32c:	4798      	blx	r3
     32e:	7060      	strb	r0, [r4, #1]
	return uint8_t(enabled);
}
     330:	bd10      	pop	{r4, pc}
     332:	bf00      	nop
     334:	0000d881 	.word	0x0000d881

00000338 <_ZN19CondesatorFan_Class9SetEnableEb>:
uint8_t	CondesatorFan_Class::SetEnable(bool state){
     338:	b510      	push	{r4, lr}
     33a:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(0,!state);
     33c:	f081 0201 	eor.w	r2, r1, #1
     340:	2100      	movs	r1, #0
     342:	68c0      	ldr	r0, [r0, #12]
     344:	4b01      	ldr	r3, [pc, #4]	; (34c <_ZN19CondesatorFan_Class9SetEnableEb+0x14>)
     346:	4798      	blx	r3
     348:	7060      	strb	r0, [r4, #1]
	
	return uint8_t(enabled);
}
     34a:	bd10      	pop	{r4, pc}
     34c:	0000d881 	.word	0x0000d881

00000350 <_ZN19CondesatorFan_Class6SetPWMEh>:
	enabled=(value&0x01);
	return enabled;
}


uint8_t	CondesatorFan_Class::SetPWM(uint8_t pwm){
     350:	b510      	push	{r4, lr}
     352:	4604      	mov	r4, r0
	pwmValue= expanders[6]->WriteGPIORegister(pwm);
     354:	6a40      	ldr	r0, [r0, #36]	; 0x24
     356:	4b02      	ldr	r3, [pc, #8]	; (360 <_ZN19CondesatorFan_Class6SetPWMEh+0x10>)
     358:	4798      	blx	r3
     35a:	7160      	strb	r0, [r4, #5]
	return pwmValue;
}
     35c:	bd10      	pop	{r4, pc}
     35e:	bf00      	nop
     360:	0000d64d 	.word	0x0000d64d

00000364 <_ZN19CondesatorFan_Class8SelfTestEv>:

bool CondesatorFan_Class::SelfTest(void){
     364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     368:	4605      	mov	r5, r0
		bool result;
		SetEnable(false);
     36a:	2100      	movs	r1, #0
     36c:	4c0f      	ldr	r4, [pc, #60]	; (3ac <_ZN19CondesatorFan_Class8SelfTestEv+0x48>)
     36e:	47a0      	blx	r4
		SetPWM(0xff);
     370:	21ff      	movs	r1, #255	; 0xff
     372:	4628      	mov	r0, r5
     374:	4b0e      	ldr	r3, [pc, #56]	; (3b0 <_ZN19CondesatorFan_Class8SelfTestEv+0x4c>)
     376:	4798      	blx	r3
		SetEnable(true);
     378:	2101      	movs	r1, #1
     37a:	4628      	mov	r0, r5
     37c:	47a0      	blx	r4
     37e:	24ff      	movs	r4, #255	; 0xff
		for (uint8_t i = 0xff; i >CONDESATOR_MINIMUN_FLOW_AIR ; i--)
		{
			SetPWM(i);
     380:	4f0b      	ldr	r7, [pc, #44]	; (3b0 <_ZN19CondesatorFan_Class8SelfTestEv+0x4c>)
			delay_us(10);
     382:	f04f 080a 	mov.w	r8, #10
     386:	4e0b      	ldr	r6, [pc, #44]	; (3b4 <_ZN19CondesatorFan_Class8SelfTestEv+0x50>)
			SetPWM(i);
     388:	4621      	mov	r1, r4
     38a:	4628      	mov	r0, r5
     38c:	47b8      	blx	r7
			delay_us(10);
     38e:	4640      	mov	r0, r8
     390:	47b0      	blx	r6
		for (uint8_t i = 0xff; i >CONDESATOR_MINIMUN_FLOW_AIR ; i--)
     392:	3c01      	subs	r4, #1
     394:	b2e4      	uxtb	r4, r4
     396:	2c10      	cmp	r4, #16
     398:	d1f6      	bne.n	388 <_ZN19CondesatorFan_Class8SelfTestEv+0x24>
		}

		ReadStatus();
     39a:	4628      	mov	r0, r5
     39c:	4b06      	ldr	r3, [pc, #24]	; (3b8 <_ZN19CondesatorFan_Class8SelfTestEv+0x54>)
     39e:	4798      	blx	r3
// 		delay_ms(6*1000);
// 		SetEnable(false);
		result=condesatorStatus.niAlcCdsFanExtFault;
     3a0:	78e8      	ldrb	r0, [r5, #3]
		return result;
     3a2:	f3c0 0080 	ubfx	r0, r0, #2, #1
     3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     3aa:	bf00      	nop
     3ac:	00000339 	.word	0x00000339
     3b0:	00000351 	.word	0x00000351
     3b4:	00002291 	.word	0x00002291
     3b8:	000002ed 	.word	0x000002ed

000003bc <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class>:
bool CondesatorFan_Class::InitCondesator(I2C_Sync_Class* i2cClass,MCP23008_Class** expanderArray){
     3bc:	b510      	push	{r4, lr}
     3be:	4604      	mov	r4, r0
	i2c=i2cClass;
     3c0:	6081      	str	r1, [r0, #8]
	if (i2c->isOK)
     3c2:	7a4b      	ldrb	r3, [r1, #9]
     3c4:	b90b      	cbnz	r3, 3ca <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
}
     3c6:	78a0      	ldrb	r0, [r4, #2]
     3c8:	bd10      	pop	{r4, pc}
		InitExpanderArray(expanderArray);
     3ca:	4611      	mov	r1, r2
     3cc:	4b04      	ldr	r3, [pc, #16]	; (3e0 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x24>)
     3ce:	4798      	blx	r3
		expanders[EVAPORATOR_AND_CONDESATOR_EXPANDERS-1]->SetPortOutput();
     3d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
     3d2:	4b04      	ldr	r3, [pc, #16]	; (3e4 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x28>)
     3d4:	4798      	blx	r3
		isOK=SelfTest();
     3d6:	4620      	mov	r0, r4
     3d8:	4b03      	ldr	r3, [pc, #12]	; (3e8 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x2c>)
     3da:	4798      	blx	r3
     3dc:	70a0      	strb	r0, [r4, #2]
     3de:	e7f2      	b.n	3c6 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xa>
     3e0:	000002d5 	.word	0x000002d5
     3e4:	0000d741 	.word	0x0000d741
     3e8:	00000365 	.word	0x00000365

000003ec <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev>:
     3ec:	b510      	push	{r4, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     3ee:	4c05      	ldr	r4, [pc, #20]	; (404 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x18>)
     3f0:	4905      	ldr	r1, [pc, #20]	; (408 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x1c>)
     3f2:	4620      	mov	r0, r4
     3f4:	4b05      	ldr	r3, [pc, #20]	; (40c <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x20>)
     3f6:	4798      	blx	r3
     3f8:	4a05      	ldr	r2, [pc, #20]	; (410 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x24>)
     3fa:	4906      	ldr	r1, [pc, #24]	; (414 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x28>)
     3fc:	4620      	mov	r0, r4
     3fe:	4b06      	ldr	r3, [pc, #24]	; (418 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x2c>)
     400:	4798      	blx	r3
     402:	bd10      	pop	{r4, pc}
     404:	20000658 	.word	0x20000658
     408:	20001814 	.word	0x20001814
     40c:	0000d301 	.word	0x0000d301
     410:	20000000 	.word	0x20000000
     414:	0000d31d 	.word	0x0000d31d
     418:	0000ea1d 	.word	0x0000ea1d

0000041c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     41c:	e7fe      	b.n	41c <Dummy_Handler>
	...

00000420 <Reset_Handler>:
{
     420:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     422:	4b17      	ldr	r3, [pc, #92]	; (480 <Reset_Handler+0x60>)
     424:	4a17      	ldr	r2, [pc, #92]	; (484 <Reset_Handler+0x64>)
     426:	429a      	cmp	r2, r3
     428:	d010      	beq.n	44c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     42a:	4b17      	ldr	r3, [pc, #92]	; (488 <Reset_Handler+0x68>)
     42c:	4a14      	ldr	r2, [pc, #80]	; (480 <Reset_Handler+0x60>)
     42e:	429a      	cmp	r2, r3
     430:	d20c      	bcs.n	44c <Reset_Handler+0x2c>
     432:	3b01      	subs	r3, #1
     434:	1a9b      	subs	r3, r3, r2
     436:	f023 0303 	bic.w	r3, r3, #3
     43a:	3304      	adds	r3, #4
     43c:	4413      	add	r3, r2
     43e:	4911      	ldr	r1, [pc, #68]	; (484 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     440:	f851 0b04 	ldr.w	r0, [r1], #4
     444:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     448:	429a      	cmp	r2, r3
     44a:	d1f9      	bne.n	440 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     44c:	4b0f      	ldr	r3, [pc, #60]	; (48c <Reset_Handler+0x6c>)
     44e:	4a10      	ldr	r2, [pc, #64]	; (490 <Reset_Handler+0x70>)
     450:	429a      	cmp	r2, r3
     452:	d20a      	bcs.n	46a <Reset_Handler+0x4a>
     454:	3b01      	subs	r3, #1
     456:	1a9b      	subs	r3, r3, r2
     458:	f023 0303 	bic.w	r3, r3, #3
     45c:	3304      	adds	r3, #4
     45e:	4413      	add	r3, r2
                *pDest++ = 0;
     460:	2100      	movs	r1, #0
     462:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     466:	4293      	cmp	r3, r2
     468:	d1fb      	bne.n	462 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     46a:	4a0a      	ldr	r2, [pc, #40]	; (494 <Reset_Handler+0x74>)
     46c:	4b0a      	ldr	r3, [pc, #40]	; (498 <Reset_Handler+0x78>)
     46e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     472:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     474:	4b09      	ldr	r3, [pc, #36]	; (49c <Reset_Handler+0x7c>)
     476:	4798      	blx	r3
        main();
     478:	4b09      	ldr	r3, [pc, #36]	; (4a0 <Reset_Handler+0x80>)
     47a:	4798      	blx	r3
     47c:	e7fe      	b.n	47c <Reset_Handler+0x5c>
     47e:	bf00      	nop
     480:	20000000 	.word	0x20000000
     484:	0000f278 	.word	0x0000f278
     488:	2000063c 	.word	0x2000063c
     48c:	2000199c 	.word	0x2000199c
     490:	2000063c 	.word	0x2000063c
     494:	e000ed00 	.word	0xe000ed00
     498:	00000000 	.word	0x00000000
     49c:	0000ea51 	.word	0x0000ea51
     4a0:	000008b1 	.word	0x000008b1

000004a4 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev>:
	somethingChanged=false;
	
} //EvaporatorAndCondesatorFans_Class

// default destructor
EvaporatorAndCondesatorFans_Class::~EvaporatorAndCondesatorFans_Class()
     4a4:	b510      	push	{r4, lr}
     4a6:	4604      	mov	r4, r0
     4a8:	302c      	adds	r0, #44	; 0x2c
     4aa:	4b03      	ldr	r3, [pc, #12]	; (4b8 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x14>)
     4ac:	4798      	blx	r3
     4ae:	4620      	mov	r0, r4
     4b0:	4b02      	ldr	r3, [pc, #8]	; (4bc <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x18>)
     4b2:	4798      	blx	r3
{
} //~EvaporatorAndCondesatorFans_Class
     4b4:	4620      	mov	r0, r4
     4b6:	bd10      	pop	{r4, pc}
     4b8:	000002d3 	.word	0x000002d3
     4bc:	000006e9 	.word	0x000006e9

000004c0 <__tcf_1>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
     4c0:	b570      	push	{r4, r5, r6, lr}
     4c2:	4c05      	ldr	r4, [pc, #20]	; (4d8 <__tcf_1+0x18>)
     4c4:	4e05      	ldr	r6, [pc, #20]	; (4dc <__tcf_1+0x1c>)
     4c6:	f1a4 05c4 	sub.w	r5, r4, #196	; 0xc4
     4ca:	3c1c      	subs	r4, #28
     4cc:	4620      	mov	r0, r4
     4ce:	47b0      	blx	r6
     4d0:	42ac      	cmp	r4, r5
     4d2:	d1fa      	bne.n	4ca <__tcf_1+0xa>
     4d4:	bd70      	pop	{r4, r5, r6, pc}
     4d6:	bf00      	nop
     4d8:	20000734 	.word	0x20000734
     4dc:	0000d4d1 	.word	0x0000d4d1

000004e0 <__tcf_0>:
static EvaporatorFan_Class	evaporatorFan[2];
     4e0:	b510      	push	{r4, lr}
     4e2:	4803      	ldr	r0, [pc, #12]	; (4f0 <__tcf_0+0x10>)
     4e4:	4c03      	ldr	r4, [pc, #12]	; (4f4 <__tcf_0+0x14>)
     4e6:	47a0      	blx	r4
     4e8:	4803      	ldr	r0, [pc, #12]	; (4f8 <__tcf_0+0x18>)
     4ea:	47a0      	blx	r4
     4ec:	bd10      	pop	{r4, pc}
     4ee:	bf00      	nop
     4f0:	20000760 	.word	0x20000760
     4f4:	000006e9 	.word	0x000006e9
     4f8:	20000734 	.word	0x20000734

000004fc <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev>:
EvaporatorAndCondesatorFans_Class::EvaporatorAndCondesatorFans_Class()
     4fc:	b510      	push	{r4, lr}
     4fe:	4604      	mov	r4, r0
     500:	4b0d      	ldr	r3, [pc, #52]	; (538 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x3c>)
     502:	4798      	blx	r3
     504:	f104 002c 	add.w	r0, r4, #44	; 0x2c
     508:	4b0c      	ldr	r3, [pc, #48]	; (53c <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x40>)
     50a:	4798      	blx	r3
	i2c=&i2cFansStatic;
     50c:	4b0c      	ldr	r3, [pc, #48]	; (540 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x44>)
     50e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
     512:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	evaporator[0]=&evaporatorFan[0];
     516:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
     51a:	65e2      	str	r2, [r4, #92]	; 0x5c
	evaporator[1]=&evaporatorFan[1];
     51c:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
     520:	6622      	str	r2, [r4, #96]	; 0x60
	condesator=&condesatorFan;
     522:	f503 729a 	add.w	r2, r3, #308	; 0x134
     526:	6662      	str	r2, [r4, #100]	; 0x64
	ptrFansClass=this;
     528:	f8c3 4160 	str.w	r4, [r3, #352]	; 0x160
	somethingChanged=false;
     52c:	2300      	movs	r3, #0
     52e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
} //EvaporatorAndCondesatorFans_Class
     532:	4620      	mov	r0, r4
     534:	bd10      	pop	{r4, pc}
     536:	bf00      	nop
     538:	000006d1 	.word	0x000006d1
     53c:	000002d1 	.word	0x000002d1
     540:	20000670 	.word	0x20000670

00000544 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv>:
	}
	isOK=i2c->isOK;
	return isOK;
	
}
uint8_t EvaporatorAndCondesatorFans_Class::InitExpanderArray(void){
     544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     548:	4606      	mov	r6, r0
     54a:	4c0c      	ldr	r4, [pc, #48]	; (57c <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x38>)
     54c:	f100 0768 	add.w	r7, r0, #104	; 0x68
	
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
     550:	2500      	movs	r5, #0
	{
		expanders[i]=&expandersStatic[i];
		currentExpander=expanders[i];
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
     552:	f8df 802c 	ldr.w	r8, [pc, #44]	; 580 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x3c>
		expanders[i]=&expandersStatic[i];
     556:	f847 4b04 	str.w	r4, [r7], #4
		currentExpander=expanders[i];
     55a:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
     55e:	f045 0120 	orr.w	r1, r5, #32
     562:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
     566:	b2c9      	uxtb	r1, r1
     568:	4620      	mov	r0, r4
     56a:	47c0      	blx	r8
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
     56c:	3501      	adds	r5, #1
     56e:	341c      	adds	r4, #28
     570:	2d07      	cmp	r5, #7
     572:	d1f0      	bne.n	556 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x12>
	}
	return 0;
}
     574:	2000      	movs	r0, #0
     576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     57a:	bf00      	nop
     57c:	20000670 	.word	0x20000670
     580:	0000d4e5 	.word	0x0000d4e5

00000584 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv>:
bool	EvaporatorAndCondesatorFans_Class::Init(void){
     584:	b570      	push	{r4, r5, r6, lr}
     586:	4604      	mov	r4, r0
	i2c->Init();
     588:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
     58c:	4b17      	ldr	r3, [pc, #92]	; (5ec <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x68>)
     58e:	4798      	blx	r3
	if (i2c->isOK)
     590:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     594:	7a5b      	ldrb	r3, [r3, #9]
     596:	b943      	cbnz	r3, 5aa <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x26>
	isOK=i2c->isOK;
     598:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     59c:	7a5b      	ldrb	r3, [r3, #9]
     59e:	b2db      	uxtb	r3, r3
     5a0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
	return isOK;
     5a4:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
}
     5a8:	bd70      	pop	{r4, r5, r6, pc}
		InitExpanderArray();
     5aa:	4620      	mov	r0, r4
     5ac:	4b10      	ldr	r3, [pc, #64]	; (5f0 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x6c>)
     5ae:	4798      	blx	r3
		evaporator[0]->InitEvaporator(0,i2c,expanders);
     5b0:	f104 0568 	add.w	r5, r4, #104	; 0x68
     5b4:	462b      	mov	r3, r5
     5b6:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
     5ba:	2100      	movs	r1, #0
     5bc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
     5be:	4e0d      	ldr	r6, [pc, #52]	; (5f4 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x70>)
     5c0:	47b0      	blx	r6
		evaporator[1]->InitEvaporator(1,i2c,expanders);
     5c2:	462b      	mov	r3, r5
     5c4:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
     5c8:	2101      	movs	r1, #1
     5ca:	6e20      	ldr	r0, [r4, #96]	; 0x60
     5cc:	47b0      	blx	r6
		condesator->InitCondesator(i2c,expanders);
     5ce:	462a      	mov	r2, r5
     5d0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
     5d4:	6e60      	ldr	r0, [r4, #100]	; 0x64
     5d6:	4b08      	ldr	r3, [pc, #32]	; (5f8 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x74>)
     5d8:	4798      	blx	r3
		isOK=(evaporator[0]->isOK)&(evaporator[1]->isOK);
     5da:	6de3      	ldr	r3, [r4, #92]	; 0x5c
     5dc:	6e22      	ldr	r2, [r4, #96]	; 0x60
     5de:	791b      	ldrb	r3, [r3, #4]
     5e0:	7912      	ldrb	r2, [r2, #4]
     5e2:	4013      	ands	r3, r2
     5e4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     5e8:	e7d6      	b.n	598 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x14>
     5ea:	bf00      	nop
     5ec:	0000d331 	.word	0x0000d331
     5f0:	00000545 	.word	0x00000545
     5f4:	0000080d 	.word	0x0000080d
     5f8:	000003bd 	.word	0x000003bd

000005fc <_GLOBAL__sub_I_ptrFansClass>:
	}
	

}

EvaporatorAndCondesatorFans_Class  fans;
     5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     600:	4c22      	ldr	r4, [pc, #136]	; (68c <_GLOBAL__sub_I_ptrFansClass+0x90>)
     602:	f504 75b2 	add.w	r5, r4, #356	; 0x164
     606:	4922      	ldr	r1, [pc, #136]	; (690 <_GLOBAL__sub_I_ptrFansClass+0x94>)
     608:	4628      	mov	r0, r5
     60a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 6c0 <_GLOBAL__sub_I_ptrFansClass+0xc4>
     60e:	47c8      	blx	r9
     610:	4f20      	ldr	r7, [pc, #128]	; (694 <_GLOBAL__sub_I_ptrFansClass+0x98>)
     612:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 6c4 <_GLOBAL__sub_I_ptrFansClass+0xc8>
     616:	463a      	mov	r2, r7
     618:	4641      	mov	r1, r8
     61a:	4628      	mov	r0, r5
     61c:	4e1e      	ldr	r6, [pc, #120]	; (698 <_GLOBAL__sub_I_ptrFansClass+0x9c>)
     61e:	47b0      	blx	r6
static I2C_Sync_Class	i2cFansStatic(&I2C_FANS);
     620:	f504 758e 	add.w	r5, r4, #284	; 0x11c
     624:	491d      	ldr	r1, [pc, #116]	; (69c <_GLOBAL__sub_I_ptrFansClass+0xa0>)
     626:	4628      	mov	r0, r5
     628:	47c8      	blx	r9
     62a:	463a      	mov	r2, r7
     62c:	4641      	mov	r1, r8
     62e:	4628      	mov	r0, r5
     630:	47b0      	blx	r6
static EvaporatorFan_Class	evaporatorFan[2];
     632:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
     636:	4628      	mov	r0, r5
     638:	f8df 808c 	ldr.w	r8, [pc, #140]	; 6c8 <_GLOBAL__sub_I_ptrFansClass+0xcc>
     63c:	47c0      	blx	r8
     63e:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
     642:	47c0      	blx	r8
     644:	463a      	mov	r2, r7
     646:	4916      	ldr	r1, [pc, #88]	; (6a0 <_GLOBAL__sub_I_ptrFansClass+0xa4>)
     648:	2000      	movs	r0, #0
     64a:	47b0      	blx	r6
static CondesatorFan_Class	condesatorFan;
     64c:	f504 789a 	add.w	r8, r4, #308	; 0x134
     650:	4640      	mov	r0, r8
     652:	4b14      	ldr	r3, [pc, #80]	; (6a4 <_GLOBAL__sub_I_ptrFansClass+0xa8>)
     654:	4798      	blx	r3
     656:	463a      	mov	r2, r7
     658:	4913      	ldr	r1, [pc, #76]	; (6a8 <_GLOBAL__sub_I_ptrFansClass+0xac>)
     65a:	4640      	mov	r0, r8
     65c:	47b0      	blx	r6
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
     65e:	4e13      	ldr	r6, [pc, #76]	; (6ac <_GLOBAL__sub_I_ptrFansClass+0xb0>)
     660:	4620      	mov	r0, r4
     662:	47b0      	blx	r6
     664:	341c      	adds	r4, #28
     666:	42a5      	cmp	r5, r4
     668:	d1fa      	bne.n	660 <_GLOBAL__sub_I_ptrFansClass+0x64>
     66a:	4e0a      	ldr	r6, [pc, #40]	; (694 <_GLOBAL__sub_I_ptrFansClass+0x98>)
     66c:	4632      	mov	r2, r6
     66e:	4910      	ldr	r1, [pc, #64]	; (6b0 <_GLOBAL__sub_I_ptrFansClass+0xb4>)
     670:	2000      	movs	r0, #0
     672:	4c09      	ldr	r4, [pc, #36]	; (698 <_GLOBAL__sub_I_ptrFansClass+0x9c>)
     674:	47a0      	blx	r4
EvaporatorAndCondesatorFans_Class  fans;
     676:	4d0f      	ldr	r5, [pc, #60]	; (6b4 <_GLOBAL__sub_I_ptrFansClass+0xb8>)
     678:	4628      	mov	r0, r5
     67a:	4b0f      	ldr	r3, [pc, #60]	; (6b8 <_GLOBAL__sub_I_ptrFansClass+0xbc>)
     67c:	4798      	blx	r3
     67e:	4632      	mov	r2, r6
     680:	490e      	ldr	r1, [pc, #56]	; (6bc <_GLOBAL__sub_I_ptrFansClass+0xc0>)
     682:	4628      	mov	r0, r5
     684:	47a0      	blx	r4
     686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     68a:	bf00      	nop
     68c:	20000670 	.word	0x20000670
     690:	20001814 	.word	0x20001814
     694:	20000000 	.word	0x20000000
     698:	0000ea1d 	.word	0x0000ea1d
     69c:	20001734 	.word	0x20001734
     6a0:	000004e1 	.word	0x000004e1
     6a4:	000002d1 	.word	0x000002d1
     6a8:	000002d3 	.word	0x000002d3
     6ac:	0000d4bd 	.word	0x0000d4bd
     6b0:	000004c1 	.word	0x000004c1
     6b4:	200007ec 	.word	0x200007ec
     6b8:	000004fd 	.word	0x000004fd
     6bc:	000004a5 	.word	0x000004a5
     6c0:	0000d301 	.word	0x0000d301
     6c4:	0000d31d 	.word	0x0000d31d
     6c8:	000006d1 	.word	0x000006d1

000006cc <_ZN29EvaporatorFanDataStruct_ClassC1Ev>:
#include "EvaporatorFanDataStruct_Class.h"

// default constructor
EvaporatorFanDataStruct_Class::EvaporatorFanDataStruct_Class()
{
} //EvaporatorFanDataStruct_Class
     6cc:	4770      	bx	lr

000006ce <_ZN29EvaporatorFanDataStruct_ClassD1Ev>:

// default destructor
EvaporatorFanDataStruct_Class::~EvaporatorFanDataStruct_Class()
{
} //~EvaporatorFanDataStruct_Class
     6ce:	4770      	bx	lr

000006d0 <_ZN19EvaporatorFan_ClassC1Ev>:




// default constructor
EvaporatorFan_Class::EvaporatorFan_Class()
     6d0:	b510      	push	{r4, lr}
     6d2:	4604      	mov	r4, r0
     6d4:	4b02      	ldr	r3, [pc, #8]	; (6e0 <_ZN19EvaporatorFan_ClassC1Ev+0x10>)
     6d6:	4798      	blx	r3
{
	
	ptrEvaFanClass=this;
     6d8:	4b02      	ldr	r3, [pc, #8]	; (6e4 <_ZN19EvaporatorFan_ClassC1Ev+0x14>)
     6da:	601c      	str	r4, [r3, #0]
	
} //EvaporatorFan_Class
     6dc:	4620      	mov	r0, r4
     6de:	bd10      	pop	{r4, pc}
     6e0:	000006cd 	.word	0x000006cd
     6e4:	20000878 	.word	0x20000878

000006e8 <_ZN19EvaporatorFan_ClassD1Ev>:

// default destructor
EvaporatorFan_Class::~EvaporatorFan_Class()
     6e8:	b510      	push	{r4, lr}
     6ea:	4604      	mov	r4, r0
     6ec:	4b01      	ldr	r3, [pc, #4]	; (6f4 <_ZN19EvaporatorFan_ClassD1Ev+0xc>)
     6ee:	4798      	blx	r3
{
} //~EvaporatorFan_Class
     6f0:	4620      	mov	r0, r4
     6f2:	bd10      	pop	{r4, pc}
     6f4:	000006cf 	.word	0x000006cf

000006f8 <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
		}
		return isOK;
	
	
}
uint8_t EvaporatorFan_Class::InitExpanderArray(MCP23008_Class** expanArray){
     6f8:	1f0b      	subs	r3, r1, #4
     6fa:	300c      	adds	r0, #12
     6fc:	3114      	adds	r1, #20
	
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
			{
				expanders[i]=expanArray[i];
     6fe:	f853 2f04 	ldr.w	r2, [r3, #4]!
     702:	f840 2b04 	str.w	r2, [r0], #4
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
     706:	428b      	cmp	r3, r1
     708:	d1f9      	bne.n	6fe <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
			}
			return 0;
}
     70a:	2000      	movs	r0, #0
     70c:	4770      	bx	lr
	...

00000710 <_ZN19EvaporatorFan_Class10ReadStatusEv>:

uint8_t	EvaporatorFan_Class::ReadStatus(void){
     710:	b538      	push	{r3, r4, r5, lr}
     712:	4604      	mov	r4, r0
	uint8_t r=expanders[1]->ReadGPIORegister();
     714:	6900      	ldr	r0, [r0, #16]
     716:	4b10      	ldr	r3, [pc, #64]	; (758 <_ZN19EvaporatorFan_Class10ReadStatusEv+0x48>)
     718:	4798      	blx	r3
	
	
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanExtFault=r&(0x01<<(4*fanNumber));
     71a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     71e:	0099      	lsls	r1, r3, #2
     720:	fa40 f501 	asr.w	r5, r0, r1
     724:	5ce2      	ldrb	r2, [r4, r3]
     726:	f365 0282 	bfi	r2, r5, #2, #1
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanEnableFault=r&(0x02<<(4*fanNumber));
     72a:	2502      	movs	r5, #2
     72c:	408d      	lsls	r5, r1
     72e:	4205      	tst	r5, r0
     730:	bf14      	ite	ne
     732:	2501      	movne	r5, #1
     734:	2500      	moveq	r5, #0
     736:	f365 0241 	bfi	r2, r5, #1, #1
	evaporatorFansStatus.inputs[fanNumber].iAlcEvaFanPwmFault=r&(0x04<<(4*fanNumber));
     73a:	2504      	movs	r5, #4
     73c:	408d      	lsls	r5, r1
     73e:	4205      	tst	r5, r0
     740:	bf14      	ite	ne
     742:	2501      	movne	r5, #1
     744:	2500      	moveq	r5, #0
     746:	f365 0200 	bfi	r2, r5, #0, #1
     74a:	54e2      	strb	r2, [r4, r3]
	faults=r&(0x07<<(4*fanNumber));
     74c:	2307      	movs	r3, #7
     74e:	408b      	lsls	r3, r1
     750:	4018      	ands	r0, r3
     752:	b2c0      	uxtb	r0, r0
     754:	7160      	strb	r0, [r4, #5]
	return faults;
		
}
     756:	bd38      	pop	{r3, r4, r5, pc}
     758:	0000d5c9 	.word	0x0000d5c9

0000075c <_ZN19EvaporatorFan_Class6EnableEv>:
uint8_t	EvaporatorFan_Class::Enable(void){
     75c:	b510      	push	{r4, lr}
     75e:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(fanNumber,true);
     760:	2201      	movs	r2, #1
     762:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
     766:	68c0      	ldr	r0, [r0, #12]
     768:	4b01      	ldr	r3, [pc, #4]	; (770 <_ZN19EvaporatorFan_Class6EnableEv+0x14>)
     76a:	4798      	blx	r3
     76c:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
     76e:	bd10      	pop	{r4, pc}
     770:	0000d881 	.word	0x0000d881

00000774 <_ZN19EvaporatorFan_Class9SetEnableEb>:
uint8_t	EvaporatorFan_Class::SetEnable(bool state){
     774:	b510      	push	{r4, lr}
     776:	4604      	mov	r4, r0
	uint8_t fanCorrrection=fanNumber==1?2:1;
     778:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
     77c:	2b01      	cmp	r3, #1
	enabled=expanders[0]->WriteDigit(fanCorrrection,!state);
     77e:	f081 0201 	eor.w	r2, r1, #1
     782:	bf0c      	ite	eq
     784:	2102      	moveq	r1, #2
     786:	2101      	movne	r1, #1
     788:	68c0      	ldr	r0, [r0, #12]
     78a:	4b02      	ldr	r3, [pc, #8]	; (794 <_ZN19EvaporatorFan_Class9SetEnableEb+0x20>)
     78c:	4798      	blx	r3
     78e:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
     790:	bd10      	pop	{r4, pc}
     792:	bf00      	nop
     794:	0000d881 	.word	0x0000d881

00000798 <_ZN19EvaporatorFan_Class6SetPWMEh>:
uint8_t	EvaporatorFan_Class::Disable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,false)?false:true;
	return uint8_t(enabled);
}

uint8_t	EvaporatorFan_Class::SetPWM(uint8_t pwm){
     798:	b510      	push	{r4, lr}
     79a:	4604      	mov	r4, r0
	pwmValue= expanders[4+fanNumber]->WriteGPIORegister(pwm);
     79c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
     7a0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     7a4:	69d8      	ldr	r0, [r3, #28]
     7a6:	4b02      	ldr	r3, [pc, #8]	; (7b0 <_ZN19EvaporatorFan_Class6SetPWMEh+0x18>)
     7a8:	4798      	blx	r3
     7aa:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	
	return pwmValue;
}
     7ae:	bd10      	pop	{r4, pc}
     7b0:	0000d64d 	.word	0x0000d64d

000007b4 <_ZN19EvaporatorFan_Class8SelfTestEv>:
	uint8_t value=expanders[0]->ReadGPIORegister();
	enabled=!(value&fanCorrrection);
	return enabled;
}

bool EvaporatorFan_Class::SelfTest(void){
     7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     7b8:	4605      	mov	r5, r0
	bool result;
	SetEnable(false);
     7ba:	2100      	movs	r1, #0
     7bc:	4c0f      	ldr	r4, [pc, #60]	; (7fc <_ZN19EvaporatorFan_Class8SelfTestEv+0x48>)
     7be:	47a0      	blx	r4
	SetPWM(0xff);
     7c0:	21ff      	movs	r1, #255	; 0xff
     7c2:	4628      	mov	r0, r5
     7c4:	4b0e      	ldr	r3, [pc, #56]	; (800 <_ZN19EvaporatorFan_Class8SelfTestEv+0x4c>)
     7c6:	4798      	blx	r3
	SetEnable(true);
     7c8:	2101      	movs	r1, #1
     7ca:	4628      	mov	r0, r5
     7cc:	47a0      	blx	r4
     7ce:	24ff      	movs	r4, #255	; 0xff
	for (uint8_t i = 0xff; i >EVAPORATOR_MINIMUN_FLOW_AIR ; i--)
	{
		SetPWM(i);
     7d0:	4f0b      	ldr	r7, [pc, #44]	; (800 <_ZN19EvaporatorFan_Class8SelfTestEv+0x4c>)
		delay_us(10);
     7d2:	f04f 080a 	mov.w	r8, #10
     7d6:	4e0b      	ldr	r6, [pc, #44]	; (804 <_ZN19EvaporatorFan_Class8SelfTestEv+0x50>)
		SetPWM(i);
     7d8:	4621      	mov	r1, r4
     7da:	4628      	mov	r0, r5
     7dc:	47b8      	blx	r7
		delay_us(10);
     7de:	4640      	mov	r0, r8
     7e0:	47b0      	blx	r6
	for (uint8_t i = 0xff; i >EVAPORATOR_MINIMUN_FLOW_AIR ; i--)
     7e2:	3c01      	subs	r4, #1
     7e4:	b2e4      	uxtb	r4, r4
     7e6:	2c0c      	cmp	r4, #12
     7e8:	d1f6      	bne.n	7d8 <_ZN19EvaporatorFan_Class8SelfTestEv+0x24>
	}

	ReadStatus();
     7ea:	4628      	mov	r0, r5
     7ec:	4b06      	ldr	r3, [pc, #24]	; (808 <_ZN19EvaporatorFan_Class8SelfTestEv+0x54>)
     7ee:	4798      	blx	r3
	result=evaporatorFansStatus.inputs->niAlcEvaFanExtFault;
     7f0:	7828      	ldrb	r0, [r5, #0]
	return result;
}
     7f2:	f3c0 0080 	ubfx	r0, r0, #2, #1
     7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     7fa:	bf00      	nop
     7fc:	00000775 	.word	0x00000775
     800:	00000799 	.word	0x00000799
     804:	00002291 	.word	0x00002291
     808:	00000711 	.word	0x00000711

0000080c <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class>:
bool EvaporatorFan_Class::InitEvaporator(uint8_t number, I2C_Sync_Class* i2cClass,MCP23008_Class** expandersArray){
     80c:	b510      	push	{r4, lr}
     80e:	4604      	mov	r4, r0
	i2c=i2cClass;
     810:	6082      	str	r2, [r0, #8]
	fanNumber=number;
     812:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
		if (i2c->isOK)
     816:	7a52      	ldrb	r2, [r2, #9]
     818:	b90a      	cbnz	r2, 81e <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x12>
}
     81a:	7920      	ldrb	r0, [r4, #4]
     81c:	bd10      	pop	{r4, pc}
			InitExpanderArray(expandersArray);
     81e:	4619      	mov	r1, r3
     820:	4b0e      	ldr	r3, [pc, #56]	; (85c <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x50>)
     822:	4798      	blx	r3
			if (fanNumber==0)
     824:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     828:	b15b      	cbz	r3, 842 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x36>
			expanders[4+fanNumber]->SetPortOutput();
     82a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     82e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     832:	69d8      	ldr	r0, [r3, #28]
     834:	4b0a      	ldr	r3, [pc, #40]	; (860 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x54>)
     836:	4798      	blx	r3
			isOK=SelfTest();
     838:	4620      	mov	r0, r4
     83a:	4b0a      	ldr	r3, [pc, #40]	; (864 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x58>)
     83c:	4798      	blx	r3
     83e:	7120      	strb	r0, [r4, #4]
     840:	e7eb      	b.n	81a <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
				expanders[0]->SetPortInput(0x70);
     842:	2170      	movs	r1, #112	; 0x70
     844:	68e0      	ldr	r0, [r4, #12]
     846:	4b08      	ldr	r3, [pc, #32]	; (868 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x5c>)
     848:	4798      	blx	r3
				expanders[0]->SetPortOutput(0x07);
     84a:	2107      	movs	r1, #7
     84c:	68e0      	ldr	r0, [r4, #12]
     84e:	4b07      	ldr	r3, [pc, #28]	; (86c <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x60>)
     850:	4798      	blx	r3
				expanders[1]->SetPortInput();
     852:	6920      	ldr	r0, [r4, #16]
     854:	4b06      	ldr	r3, [pc, #24]	; (870 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x64>)
     856:	4798      	blx	r3
     858:	e7e7      	b.n	82a <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x1e>
     85a:	bf00      	nop
     85c:	000006f9 	.word	0x000006f9
     860:	0000d741 	.word	0x0000d741
     864:	000007b5 	.word	0x000007b5
     868:	0000d6cd 	.word	0x0000d6cd
     86c:	0000d775 	.word	0x0000d775
     870:	0000d689 	.word	0x0000d689

00000874 <_GLOBAL__sub_I_ptrEvaFanClass>:
}
     874:	b510      	push	{r4, lr}
     876:	4c05      	ldr	r4, [pc, #20]	; (88c <_GLOBAL__sub_I_ptrEvaFanClass+0x18>)
     878:	4905      	ldr	r1, [pc, #20]	; (890 <_GLOBAL__sub_I_ptrEvaFanClass+0x1c>)
     87a:	4620      	mov	r0, r4
     87c:	4b05      	ldr	r3, [pc, #20]	; (894 <_GLOBAL__sub_I_ptrEvaFanClass+0x20>)
     87e:	4798      	blx	r3
     880:	4a05      	ldr	r2, [pc, #20]	; (898 <_GLOBAL__sub_I_ptrEvaFanClass+0x24>)
     882:	4906      	ldr	r1, [pc, #24]	; (89c <_GLOBAL__sub_I_ptrEvaFanClass+0x28>)
     884:	4620      	mov	r0, r4
     886:	4b06      	ldr	r3, [pc, #24]	; (8a0 <_GLOBAL__sub_I_ptrEvaFanClass+0x2c>)
     888:	4798      	blx	r3
     88a:	bd10      	pop	{r4, pc}
     88c:	2000087c 	.word	0x2000087c
     890:	20001814 	.word	0x20001814
     894:	0000d301 	.word	0x0000d301
     898:	20000000 	.word	0x20000000
     89c:	0000d31d 	.word	0x0000d31d
     8a0:	0000ea1d 	.word	0x0000ea1d

000008a4 <_ZL13FirmwareAlivePK10timer_task>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8a4:	2280      	movs	r2, #128	; 0x80
     8a6:	4b01      	ldr	r3, [pc, #4]	; (8ac <_ZL13FirmwareAlivePK10timer_task+0x8>)
     8a8:	619a      	str	r2, [r3, #24]
     8aa:	4770      	bx	lr
     8ac:	41008000 	.word	0x41008000

000008b0 <main>:
	gpio_set_pin_level(iAlcFwIsAlive,true);
}


int main(void)
{
     8b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	atmel_start_init();
     8b4:	4b41      	ldr	r3, [pc, #260]	; (9bc <main+0x10c>)
     8b6:	4798      	blx	r3
	uint8_t status;

	usb.Init();
     8b8:	4841      	ldr	r0, [pc, #260]	; (9c0 <main+0x110>)
     8ba:	4b42      	ldr	r3, [pc, #264]	; (9c4 <main+0x114>)
     8bc:	4798      	blx	r3
	delay_ms(100);
     8be:	2064      	movs	r0, #100	; 0x64
     8c0:	4b41      	ldr	r3, [pc, #260]	; (9c8 <main+0x118>)
     8c2:	4798      	blx	r3
//	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
//	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
	pwm_enable(&LIVE_PULSE);
     8c4:	4841      	ldr	r0, [pc, #260]	; (9cc <main+0x11c>)
     8c6:	4b42      	ldr	r3, [pc, #264]	; (9d0 <main+0x120>)
     8c8:	4798      	blx	r3
	fans.Init();
     8ca:	4842      	ldr	r0, [pc, #264]	; (9d4 <main+0x124>)
     8cc:	4b42      	ldr	r3, [pc, #264]	; (9d8 <main+0x128>)
     8ce:	4798      	blx	r3
	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareAlive),250);
     8d0:	22fa      	movs	r2, #250	; 0xfa
     8d2:	4942      	ldr	r1, [pc, #264]	; (9dc <main+0x12c>)
     8d4:	4842      	ldr	r0, [pc, #264]	; (9e0 <main+0x130>)
     8d6:	4b43      	ldr	r3, [pc, #268]	; (9e4 <main+0x134>)
     8d8:	4798      	blx	r3
     8da:	f8df 8120 	ldr.w	r8, [pc, #288]	; 9fc <main+0x14c>
		
		for (uint8_t j = 0; j <0xff; j++)
		{
			for (uint8_t i = 0; i < 2; i++)
			{
				delay_ms(DELAY_TIME_REQUEST);
     8de:	4d3a      	ldr	r5, [pc, #232]	; (9c8 <main+0x118>)
     8e0:	f108 0708 	add.w	r7, r8, #8
     8e4:	e065      	b.n	9b2 <main+0x102>
			//	delay_ms(DELAY_TIME_REQUEST);
			//	fans.evaporator[i]->Disable();
			//	usb<<" EvaporatorFan "<<i<< " Disabled"<<NEWLINE;
			
			}
			delay_ms(DELAY_TIME_REQUEST);
     8e6:	4648      	mov	r0, r9
     8e8:	47a8      	blx	r5
		//	usb<<NEWLINE<<"Enabling Condesator .\t";
			fans.condesator->Enable();
     8ea:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 9d4 <main+0x124>
     8ee:	f8da 0064 	ldr.w	r0, [sl, #100]	; 0x64
     8f2:	4b3d      	ldr	r3, [pc, #244]	; (9e8 <main+0x138>)
     8f4:	4798      	blx	r3
			delay_ms(DELAY_TIME_REQUEST);
     8f6:	4648      	mov	r0, r9
     8f8:	47a8      	blx	r5
			status= fans.condesator->ReadStatus();
     8fa:	f8da 0064 	ldr.w	r0, [sl, #100]	; 0x64
     8fe:	4b3b      	ldr	r3, [pc, #236]	; (9ec <main+0x13c>)
     900:	4798      	blx	r3
		//	usb<<"Condesator  Status :"<<status<<" .\t";
			delay_ms(DELAY_TIME_REQUEST);
     902:	4648      	mov	r0, r9
     904:	47a8      	blx	r5
			status= fans.condesator->SetPWM(j);
     906:	4631      	mov	r1, r6
     908:	f8da 0064 	ldr.w	r0, [sl, #100]	; 0x64
     90c:	4b38      	ldr	r3, [pc, #224]	; (9f0 <main+0x140>)
     90e:	4798      	blx	r3
		//	usb<<"Condesator SetPoint :"<<status<<" .\t";
			delay_ms(DELAY_TIME_REQUEST);
     910:	4648      	mov	r0, r9
     912:	47a8      	blx	r5
		for (uint8_t j = 0; j <0xff; j++)
     914:	3601      	adds	r6, #1
     916:	b2f6      	uxtb	r6, r6
     918:	2eff      	cmp	r6, #255	; 0xff
     91a:	d017      	beq.n	94c <main+0x9c>
{
     91c:	4644      	mov	r4, r8
				fans.evaporator[i]->Enable();
     91e:	f8df a0e0 	ldr.w	sl, [pc, #224]	; a00 <main+0x150>
				delay_ms(DELAY_TIME_REQUEST);
     922:	4648      	mov	r0, r9
     924:	47a8      	blx	r5
     926:	46a3      	mov	fp, r4
				fans.evaporator[i]->Enable();
     928:	6820      	ldr	r0, [r4, #0]
     92a:	47d0      	blx	sl
				delay_ms(DELAY_TIME_REQUEST);
     92c:	4648      	mov	r0, r9
     92e:	47a8      	blx	r5
				status= fans.evaporator[i]->ReadStatus();
     930:	f854 0b04 	ldr.w	r0, [r4], #4
     934:	4b2f      	ldr	r3, [pc, #188]	; (9f4 <main+0x144>)
     936:	4798      	blx	r3
				delay_ms(DELAY_TIME_REQUEST);
     938:	4648      	mov	r0, r9
     93a:	47a8      	blx	r5
				status= fans.evaporator[i]->SetPWM(j);
     93c:	4631      	mov	r1, r6
     93e:	f8db 0000 	ldr.w	r0, [fp]
     942:	4b2d      	ldr	r3, [pc, #180]	; (9f8 <main+0x148>)
     944:	4798      	blx	r3
			for (uint8_t i = 0; i < 2; i++)
     946:	42bc      	cmp	r4, r7
     948:	d1eb      	bne.n	922 <main+0x72>
     94a:	e7cc      	b.n	8e6 <main+0x36>
		{
			for (uint8_t i = 0; i < 2; i++)
			{
				delay_ms(DELAY_TIME_REQUEST);
				//	usb<<"Enabling Evaporator Fan: "<<i<<" .\t";
				fans.evaporator[i]->Enable();
     94c:	f8df b0b0 	ldr.w	fp, [pc, #176]	; a00 <main+0x150>
{
     950:	46c1      	mov	r9, r8
				delay_ms(DELAY_TIME_REQUEST);
     952:	200a      	movs	r0, #10
     954:	47a8      	blx	r5
     956:	46ca      	mov	sl, r9
				fans.evaporator[i]->Enable();
     958:	f8d9 0000 	ldr.w	r0, [r9]
     95c:	47d8      	blx	fp
				delay_ms(DELAY_TIME_REQUEST);
     95e:	200a      	movs	r0, #10
     960:	47a8      	blx	r5
				status= fans.evaporator[i]->ReadStatus();
     962:	f859 0b04 	ldr.w	r0, [r9], #4
     966:	4b23      	ldr	r3, [pc, #140]	; (9f4 <main+0x144>)
     968:	4798      	blx	r3
				//	usb<<"Evaporator Fan "<<i<< " Status :"<<status<<" .\t";
				delay_ms(DELAY_TIME_REQUEST);
     96a:	200a      	movs	r0, #10
     96c:	47a8      	blx	r5
				status= fans.evaporator[i]->SetPWM(j);
     96e:	4631      	mov	r1, r6
     970:	f8da 0000 	ldr.w	r0, [sl]
     974:	4b20      	ldr	r3, [pc, #128]	; (9f8 <main+0x148>)
     976:	4798      	blx	r3
			for (uint8_t i = 0; i < 2; i++)
     978:	454c      	cmp	r4, r9
     97a:	d1ea      	bne.n	952 <main+0xa2>
				//	delay_ms(DELAY_TIME_REQUEST);
				//	fans.evaporator[i]->Disable();
				//	usb<<" EvaporatorFan "<<i<< " Disabled"<<NEWLINE;
				
			}
			delay_ms(DELAY_TIME_REQUEST);
     97c:	200a      	movs	r0, #10
     97e:	47a8      	blx	r5
			//	usb<<NEWLINE<<"Enabling Condesator .\t";
			fans.condesator->Enable();
     980:	f8df 9050 	ldr.w	r9, [pc, #80]	; 9d4 <main+0x124>
     984:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
     988:	4b17      	ldr	r3, [pc, #92]	; (9e8 <main+0x138>)
     98a:	4798      	blx	r3
			delay_ms(DELAY_TIME_REQUEST);
     98c:	200a      	movs	r0, #10
     98e:	47a8      	blx	r5
			status= fans.condesator->ReadStatus();
     990:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
     994:	4b15      	ldr	r3, [pc, #84]	; (9ec <main+0x13c>)
     996:	4798      	blx	r3
			//	usb<<"Condesator  Status :"<<status<<" .\t";
			delay_ms(DELAY_TIME_REQUEST);
     998:	200a      	movs	r0, #10
     99a:	47a8      	blx	r5
			status= fans.condesator->SetPWM(j);
     99c:	4631      	mov	r1, r6
     99e:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
     9a2:	4b13      	ldr	r3, [pc, #76]	; (9f0 <main+0x140>)
     9a4:	4798      	blx	r3
			//	usb<<"Condesator SetPoint :"<<status<<" .\t";
			delay_ms(DELAY_TIME_REQUEST);
     9a6:	200a      	movs	r0, #10
     9a8:	47a8      	blx	r5
		for (uint8_t j = 0xff; j >0; j--)
     9aa:	3e01      	subs	r6, #1
     9ac:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
     9b0:	d1ce      	bne.n	950 <main+0xa0>
{
     9b2:	2600      	movs	r6, #0
				delay_ms(DELAY_TIME_REQUEST);
     9b4:	f04f 090a 	mov.w	r9, #10
     9b8:	e7b0      	b.n	91c <main+0x6c>
     9ba:	bf00      	nop
     9bc:	00000af9 	.word	0x00000af9
     9c0:	20001580 	.word	0x20001580
     9c4:	0000e0ed 	.word	0x0000e0ed
     9c8:	000022c5 	.word	0x000022c5
     9cc:	200017d8 	.word	0x200017d8
     9d0:	00002735 	.word	0x00002735
     9d4:	200007ec 	.word	0x200007ec
     9d8:	00000585 	.word	0x00000585
     9dc:	000008a5 	.word	0x000008a5
     9e0:	20000894 	.word	0x20000894
     9e4:	0000db95 	.word	0x0000db95
     9e8:	00000321 	.word	0x00000321
     9ec:	000002ed 	.word	0x000002ed
     9f0:	00000351 	.word	0x00000351
     9f4:	00000711 	.word	0x00000711
     9f8:	00000799 	.word	0x00000799
     9fc:	20000848 	.word	0x20000848
     a00:	0000075d 	.word	0x0000075d

00000a04 <_GLOBAL__sub_I_main>:


		

	}
}
     a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     a08:	4c2b      	ldr	r4, [pc, #172]	; (ab8 <_GLOBAL__sub_I_main+0xb4>)
     a0a:	f104 0520 	add.w	r5, r4, #32
     a0e:	492b      	ldr	r1, [pc, #172]	; (abc <_GLOBAL__sub_I_main+0xb8>)
     a10:	4628      	mov	r0, r5
     a12:	4f2b      	ldr	r7, [pc, #172]	; (ac0 <_GLOBAL__sub_I_main+0xbc>)
     a14:	47b8      	blx	r7
     a16:	4e2b      	ldr	r6, [pc, #172]	; (ac4 <_GLOBAL__sub_I_main+0xc0>)
     a18:	f8df 80d8 	ldr.w	r8, [pc, #216]	; af4 <_GLOBAL__sub_I_main+0xf0>
     a1c:	4632      	mov	r2, r6
     a1e:	4641      	mov	r1, r8
     a20:	4628      	mov	r0, r5
     a22:	4d29      	ldr	r5, [pc, #164]	; (ac8 <_GLOBAL__sub_I_main+0xc4>)
     a24:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     a26:	f104 0940 	add.w	r9, r4, #64	; 0x40
     a2a:	4928      	ldr	r1, [pc, #160]	; (acc <_GLOBAL__sub_I_main+0xc8>)
     a2c:	4648      	mov	r0, r9
     a2e:	47b8      	blx	r7
     a30:	4632      	mov	r2, r6
     a32:	4641      	mov	r1, r8
     a34:	4648      	mov	r0, r9
     a36:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     a38:	4925      	ldr	r1, [pc, #148]	; (ad0 <_GLOBAL__sub_I_main+0xcc>)
     a3a:	4620      	mov	r0, r4
     a3c:	47b8      	blx	r7
     a3e:	4632      	mov	r2, r6
     a40:	4641      	mov	r1, r8
     a42:	4620      	mov	r0, r4
     a44:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     a46:	f104 0960 	add.w	r9, r4, #96	; 0x60
     a4a:	4922      	ldr	r1, [pc, #136]	; (ad4 <_GLOBAL__sub_I_main+0xd0>)
     a4c:	4648      	mov	r0, r9
     a4e:	47b8      	blx	r7
     a50:	4632      	mov	r2, r6
     a52:	4641      	mov	r1, r8
     a54:	4648      	mov	r0, r9
     a56:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     a58:	f104 0980 	add.w	r9, r4, #128	; 0x80
     a5c:	491e      	ldr	r1, [pc, #120]	; (ad8 <_GLOBAL__sub_I_main+0xd4>)
     a5e:	4648      	mov	r0, r9
     a60:	47b8      	blx	r7
     a62:	4632      	mov	r2, r6
     a64:	4641      	mov	r1, r8
     a66:	4648      	mov	r0, r9
     a68:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     a6a:	f104 09a0 	add.w	r9, r4, #160	; 0xa0
     a6e:	491b      	ldr	r1, [pc, #108]	; (adc <_GLOBAL__sub_I_main+0xd8>)
     a70:	4648      	mov	r0, r9
     a72:	47b8      	blx	r7
     a74:	4632      	mov	r2, r6
     a76:	4641      	mov	r1, r8
     a78:	4648      	mov	r0, r9
     a7a:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     a7c:	f104 09c0 	add.w	r9, r4, #192	; 0xc0
     a80:	4917      	ldr	r1, [pc, #92]	; (ae0 <_GLOBAL__sub_I_main+0xdc>)
     a82:	4648      	mov	r0, r9
     a84:	47b8      	blx	r7
     a86:	4632      	mov	r2, r6
     a88:	4641      	mov	r1, r8
     a8a:	4648      	mov	r0, r9
     a8c:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     a8e:	f104 09e0 	add.w	r9, r4, #224	; 0xe0
     a92:	4914      	ldr	r1, [pc, #80]	; (ae4 <_GLOBAL__sub_I_main+0xe0>)
     a94:	4648      	mov	r0, r9
     a96:	47b8      	blx	r7
     a98:	4632      	mov	r2, r6
     a9a:	4641      	mov	r1, r8
     a9c:	4648      	mov	r0, r9
     a9e:	47a8      	blx	r5
     aa0:	f504 7480 	add.w	r4, r4, #256	; 0x100
     aa4:	4910      	ldr	r1, [pc, #64]	; (ae8 <_GLOBAL__sub_I_main+0xe4>)
     aa6:	4620      	mov	r0, r4
     aa8:	4b10      	ldr	r3, [pc, #64]	; (aec <_GLOBAL__sub_I_main+0xe8>)
     aaa:	4798      	blx	r3
     aac:	4632      	mov	r2, r6
     aae:	4910      	ldr	r1, [pc, #64]	; (af0 <_GLOBAL__sub_I_main+0xec>)
     ab0:	4620      	mov	r0, r4
     ab2:	47a8      	blx	r5
     ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     ab8:	20000894 	.word	0x20000894
     abc:	200016e4 	.word	0x200016e4
     ac0:	0000d9b9 	.word	0x0000d9b9
     ac4:	20000000 	.word	0x20000000
     ac8:	0000ea1d 	.word	0x0000ea1d
     acc:	20001778 	.word	0x20001778
     ad0:	2000189c 	.word	0x2000189c
     ad4:	20001798 	.word	0x20001798
     ad8:	2000185c 	.word	0x2000185c
     adc:	2000187c 	.word	0x2000187c
     ae0:	20001754 	.word	0x20001754
     ae4:	200017f4 	.word	0x200017f4
     ae8:	20001814 	.word	0x20001814
     aec:	0000d301 	.word	0x0000d301
     af0:	0000d31d 	.word	0x0000d31d
     af4:	0000d9f1 	.word	0x0000d9f1

00000af8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     af8:	b580      	push	{r7, lr}
     afa:	af00      	add	r7, sp, #0
	system_init();
     afc:	4b03      	ldr	r3, [pc, #12]	; (b0c <atmel_start_init+0x14>)
     afe:	4798      	blx	r3
	usb_init();
     b00:	4b03      	ldr	r3, [pc, #12]	; (b10 <atmel_start_init+0x18>)
     b02:	4798      	blx	r3
	spi_nor_flash_init();
     b04:	4b03      	ldr	r3, [pc, #12]	; (b14 <atmel_start_init+0x1c>)
     b06:	4798      	blx	r3
}
     b08:	bf00      	nop
     b0a:	bd80      	pop	{r7, pc}
     b0c:	00001ef9 	.word	0x00001ef9
     b10:	0000b42d 	.word	0x0000b42d
     b14:	0000b3c1 	.word	0x0000b3c1

00000b18 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     b18:	b480      	push	{r7}
     b1a:	b085      	sub	sp, #20
     b1c:	af00      	add	r7, sp, #0
     b1e:	60f8      	str	r0, [r7, #12]
     b20:	460b      	mov	r3, r1
     b22:	607a      	str	r2, [r7, #4]
     b24:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     b26:	7afa      	ldrb	r2, [r7, #11]
     b28:	68fb      	ldr	r3, [r7, #12]
     b2a:	3220      	adds	r2, #32
     b2c:	6879      	ldr	r1, [r7, #4]
     b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     b32:	bf00      	nop
     b34:	3714      	adds	r7, #20
     b36:	46bd      	mov	sp, r7
     b38:	f85d 7b04 	ldr.w	r7, [sp], #4
     b3c:	4770      	bx	lr

00000b3e <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     b3e:	b480      	push	{r7}
     b40:	b083      	sub	sp, #12
     b42:	af00      	add	r7, sp, #0
     b44:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     b46:	687b      	ldr	r3, [r7, #4]
     b48:	691b      	ldr	r3, [r3, #16]
     b4a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     b4e:	687b      	ldr	r3, [r7, #4]
     b50:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b52:	bf00      	nop
     b54:	370c      	adds	r7, #12
     b56:	46bd      	mov	sp, r7
     b58:	f85d 7b04 	ldr.w	r7, [sp], #4
     b5c:	4770      	bx	lr

00000b5e <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     b5e:	b480      	push	{r7}
     b60:	b083      	sub	sp, #12
     b62:	af00      	add	r7, sp, #0
     b64:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     b66:	687b      	ldr	r3, [r7, #4]
     b68:	691b      	ldr	r3, [r3, #16]
     b6a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     b6e:	687b      	ldr	r3, [r7, #4]
     b70:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b72:	bf00      	nop
     b74:	370c      	adds	r7, #12
     b76:	46bd      	mov	sp, r7
     b78:	f85d 7b04 	ldr.w	r7, [sp], #4
     b7c:	4770      	bx	lr

00000b7e <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     b7e:	b480      	push	{r7}
     b80:	b083      	sub	sp, #12
     b82:	af00      	add	r7, sp, #0
     b84:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     b86:	687b      	ldr	r3, [r7, #4]
     b88:	691b      	ldr	r3, [r3, #16]
     b8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     b8e:	687b      	ldr	r3, [r7, #4]
     b90:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b92:	bf00      	nop
     b94:	370c      	adds	r7, #12
     b96:	46bd      	mov	sp, r7
     b98:	f85d 7b04 	ldr.w	r7, [sp], #4
     b9c:	4770      	bx	lr

00000b9e <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     b9e:	b480      	push	{r7}
     ba0:	b083      	sub	sp, #12
     ba2:	af00      	add	r7, sp, #0
     ba4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     ba6:	687b      	ldr	r3, [r7, #4]
     ba8:	691b      	ldr	r3, [r3, #16]
     baa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     bae:	687b      	ldr	r3, [r7, #4]
     bb0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bb2:	bf00      	nop
     bb4:	370c      	adds	r7, #12
     bb6:	46bd      	mov	sp, r7
     bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
     bbc:	4770      	bx	lr

00000bbe <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     bbe:	b480      	push	{r7}
     bc0:	b083      	sub	sp, #12
     bc2:	af00      	add	r7, sp, #0
     bc4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     bc6:	687b      	ldr	r3, [r7, #4]
     bc8:	695b      	ldr	r3, [r3, #20]
     bca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     bce:	687b      	ldr	r3, [r7, #4]
     bd0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bd2:	bf00      	nop
     bd4:	370c      	adds	r7, #12
     bd6:	46bd      	mov	sp, r7
     bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
     bdc:	4770      	bx	lr

00000bde <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     bde:	b480      	push	{r7}
     be0:	b083      	sub	sp, #12
     be2:	af00      	add	r7, sp, #0
     be4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     be6:	687b      	ldr	r3, [r7, #4]
     be8:	695b      	ldr	r3, [r3, #20]
     bea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     bee:	687b      	ldr	r3, [r7, #4]
     bf0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bf2:	bf00      	nop
     bf4:	370c      	adds	r7, #12
     bf6:	46bd      	mov	sp, r7
     bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
     bfc:	4770      	bx	lr

00000bfe <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     bfe:	b480      	push	{r7}
     c00:	b083      	sub	sp, #12
     c02:	af00      	add	r7, sp, #0
     c04:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     c06:	687b      	ldr	r3, [r7, #4]
     c08:	695b      	ldr	r3, [r3, #20]
     c0a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     c0e:	687b      	ldr	r3, [r7, #4]
     c10:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c12:	bf00      	nop
     c14:	370c      	adds	r7, #12
     c16:	46bd      	mov	sp, r7
     c18:	f85d 7b04 	ldr.w	r7, [sp], #4
     c1c:	4770      	bx	lr

00000c1e <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     c1e:	b480      	push	{r7}
     c20:	b083      	sub	sp, #12
     c22:	af00      	add	r7, sp, #0
     c24:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     c26:	687b      	ldr	r3, [r7, #4]
     c28:	695b      	ldr	r3, [r3, #20]
     c2a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     c2e:	687b      	ldr	r3, [r7, #4]
     c30:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c32:	bf00      	nop
     c34:	370c      	adds	r7, #12
     c36:	46bd      	mov	sp, r7
     c38:	f85d 7b04 	ldr.w	r7, [sp], #4
     c3c:	4770      	bx	lr

00000c3e <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     c3e:	b480      	push	{r7}
     c40:	b083      	sub	sp, #12
     c42:	af00      	add	r7, sp, #0
     c44:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     c46:	687b      	ldr	r3, [r7, #4]
     c48:	699b      	ldr	r3, [r3, #24]
     c4a:	f043 0201 	orr.w	r2, r3, #1
     c4e:	687b      	ldr	r3, [r7, #4]
     c50:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c52:	bf00      	nop
     c54:	370c      	adds	r7, #12
     c56:	46bd      	mov	sp, r7
     c58:	f85d 7b04 	ldr.w	r7, [sp], #4
     c5c:	4770      	bx	lr

00000c5e <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     c5e:	b480      	push	{r7}
     c60:	b083      	sub	sp, #12
     c62:	af00      	add	r7, sp, #0
     c64:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     c66:	687b      	ldr	r3, [r7, #4]
     c68:	699b      	ldr	r3, [r3, #24]
     c6a:	f043 0202 	orr.w	r2, r3, #2
     c6e:	687b      	ldr	r3, [r7, #4]
     c70:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c72:	bf00      	nop
     c74:	370c      	adds	r7, #12
     c76:	46bd      	mov	sp, r7
     c78:	f85d 7b04 	ldr.w	r7, [sp], #4
     c7c:	4770      	bx	lr

00000c7e <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     c7e:	b480      	push	{r7}
     c80:	b083      	sub	sp, #12
     c82:	af00      	add	r7, sp, #0
     c84:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     c86:	687b      	ldr	r3, [r7, #4]
     c88:	699b      	ldr	r3, [r3, #24]
     c8a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     c8e:	687b      	ldr	r3, [r7, #4]
     c90:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c92:	bf00      	nop
     c94:	370c      	adds	r7, #12
     c96:	46bd      	mov	sp, r7
     c98:	f85d 7b04 	ldr.w	r7, [sp], #4
     c9c:	4770      	bx	lr

00000c9e <hri_mclk_set_APBBMASK_SERCOM3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
     c9e:	b480      	push	{r7}
     ca0:	b083      	sub	sp, #12
     ca2:	af00      	add	r7, sp, #0
     ca4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     ca6:	687b      	ldr	r3, [r7, #4]
     ca8:	699b      	ldr	r3, [r3, #24]
     caa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     cae:	687b      	ldr	r3, [r7, #4]
     cb0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cb2:	bf00      	nop
     cb4:	370c      	adds	r7, #12
     cb6:	46bd      	mov	sp, r7
     cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
     cbc:	4770      	bx	lr

00000cbe <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     cbe:	b480      	push	{r7}
     cc0:	b083      	sub	sp, #12
     cc2:	af00      	add	r7, sp, #0
     cc4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     cc6:	687b      	ldr	r3, [r7, #4]
     cc8:	699b      	ldr	r3, [r3, #24]
     cca:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     cce:	687b      	ldr	r3, [r7, #4]
     cd0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cd2:	bf00      	nop
     cd4:	370c      	adds	r7, #12
     cd6:	46bd      	mov	sp, r7
     cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
     cdc:	4770      	bx	lr

00000cde <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     cde:	b480      	push	{r7}
     ce0:	b083      	sub	sp, #12
     ce2:	af00      	add	r7, sp, #0
     ce4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     ce6:	687b      	ldr	r3, [r7, #4]
     ce8:	699b      	ldr	r3, [r3, #24]
     cea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cf2:	bf00      	nop
     cf4:	370c      	adds	r7, #12
     cf6:	46bd      	mov	sp, r7
     cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
     cfc:	4770      	bx	lr

00000cfe <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     cfe:	b480      	push	{r7}
     d00:	b083      	sub	sp, #12
     d02:	af00      	add	r7, sp, #0
     d04:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     d06:	687b      	ldr	r3, [r7, #4]
     d08:	699b      	ldr	r3, [r3, #24]
     d0a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     d0e:	687b      	ldr	r3, [r7, #4]
     d10:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d12:	bf00      	nop
     d14:	370c      	adds	r7, #12
     d16:	46bd      	mov	sp, r7
     d18:	f85d 7b04 	ldr.w	r7, [sp], #4
     d1c:	4770      	bx	lr

00000d1e <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
     d1e:	b480      	push	{r7}
     d20:	b083      	sub	sp, #12
     d22:	af00      	add	r7, sp, #0
     d24:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
     d26:	687b      	ldr	r3, [r7, #4]
     d28:	69db      	ldr	r3, [r3, #28]
     d2a:	f043 0208 	orr.w	r2, r3, #8
     d2e:	687b      	ldr	r3, [r7, #4]
     d30:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d32:	bf00      	nop
     d34:	370c      	adds	r7, #12
     d36:	46bd      	mov	sp, r7
     d38:	f85d 7b04 	ldr.w	r7, [sp], #4
     d3c:	4770      	bx	lr

00000d3e <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     d3e:	b480      	push	{r7}
     d40:	b083      	sub	sp, #12
     d42:	af00      	add	r7, sp, #0
     d44:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     d46:	687b      	ldr	r3, [r7, #4]
     d48:	69db      	ldr	r3, [r3, #28]
     d4a:	f043 0220 	orr.w	r2, r3, #32
     d4e:	687b      	ldr	r3, [r7, #4]
     d50:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d52:	bf00      	nop
     d54:	370c      	adds	r7, #12
     d56:	46bd      	mov	sp, r7
     d58:	f85d 7b04 	ldr.w	r7, [sp], #4
     d5c:	4770      	bx	lr

00000d5e <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     d5e:	b480      	push	{r7}
     d60:	b083      	sub	sp, #12
     d62:	af00      	add	r7, sp, #0
     d64:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     d66:	687b      	ldr	r3, [r7, #4]
     d68:	69db      	ldr	r3, [r3, #28]
     d6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     d6e:	687b      	ldr	r3, [r7, #4]
     d70:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d72:	bf00      	nop
     d74:	370c      	adds	r7, #12
     d76:	46bd      	mov	sp, r7
     d78:	f85d 7b04 	ldr.w	r7, [sp], #4
     d7c:	4770      	bx	lr

00000d7e <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     d7e:	b480      	push	{r7}
     d80:	b083      	sub	sp, #12
     d82:	af00      	add	r7, sp, #0
     d84:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     d86:	687b      	ldr	r3, [r7, #4]
     d88:	69db      	ldr	r3, [r3, #28]
     d8a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     d8e:	687b      	ldr	r3, [r7, #4]
     d90:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d92:	bf00      	nop
     d94:	370c      	adds	r7, #12
     d96:	46bd      	mov	sp, r7
     d98:	f85d 7b04 	ldr.w	r7, [sp], #4
     d9c:	4770      	bx	lr

00000d9e <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     d9e:	b480      	push	{r7}
     da0:	b083      	sub	sp, #12
     da2:	af00      	add	r7, sp, #0
     da4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     da6:	687b      	ldr	r3, [r7, #4]
     da8:	6a1b      	ldr	r3, [r3, #32]
     daa:	f043 0201 	orr.w	r2, r3, #1
     dae:	687b      	ldr	r3, [r7, #4]
     db0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     db2:	bf00      	nop
     db4:	370c      	adds	r7, #12
     db6:	46bd      	mov	sp, r7
     db8:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbc:	4770      	bx	lr

00000dbe <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     dbe:	b480      	push	{r7}
     dc0:	b083      	sub	sp, #12
     dc2:	af00      	add	r7, sp, #0
     dc4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     dc6:	687b      	ldr	r3, [r7, #4]
     dc8:	6a1b      	ldr	r3, [r3, #32]
     dca:	f043 0202 	orr.w	r2, r3, #2
     dce:	687b      	ldr	r3, [r7, #4]
     dd0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     dd2:	bf00      	nop
     dd4:	370c      	adds	r7, #12
     dd6:	46bd      	mov	sp, r7
     dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
     ddc:	4770      	bx	lr

00000dde <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     dde:	b480      	push	{r7}
     de0:	b083      	sub	sp, #12
     de2:	af00      	add	r7, sp, #0
     de4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     de6:	687b      	ldr	r3, [r7, #4]
     de8:	6a1b      	ldr	r3, [r3, #32]
     dea:	f043 0204 	orr.w	r2, r3, #4
     dee:	687b      	ldr	r3, [r7, #4]
     df0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     df2:	bf00      	nop
     df4:	370c      	adds	r7, #12
     df6:	46bd      	mov	sp, r7
     df8:	f85d 7b04 	ldr.w	r7, [sp], #4
     dfc:	4770      	bx	lr

00000dfe <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     dfe:	b480      	push	{r7}
     e00:	b083      	sub	sp, #12
     e02:	af00      	add	r7, sp, #0
     e04:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     e06:	687b      	ldr	r3, [r7, #4]
     e08:	6a1b      	ldr	r3, [r3, #32]
     e0a:	f043 0208 	orr.w	r2, r3, #8
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e12:	bf00      	nop
     e14:	370c      	adds	r7, #12
     e16:	46bd      	mov	sp, r7
     e18:	f85d 7b04 	ldr.w	r7, [sp], #4
     e1c:	4770      	bx	lr

00000e1e <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     e1e:	b480      	push	{r7}
     e20:	b083      	sub	sp, #12
     e22:	af00      	add	r7, sp, #0
     e24:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     e26:	687b      	ldr	r3, [r7, #4]
     e28:	6a1b      	ldr	r3, [r3, #32]
     e2a:	f043 0220 	orr.w	r2, r3, #32
     e2e:	687b      	ldr	r3, [r7, #4]
     e30:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e32:	bf00      	nop
     e34:	370c      	adds	r7, #12
     e36:	46bd      	mov	sp, r7
     e38:	f85d 7b04 	ldr.w	r7, [sp], #4
     e3c:	4770      	bx	lr

00000e3e <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     e3e:	b480      	push	{r7}
     e40:	b083      	sub	sp, #12
     e42:	af00      	add	r7, sp, #0
     e44:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     e46:	687b      	ldr	r3, [r7, #4]
     e48:	6a1b      	ldr	r3, [r3, #32]
     e4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e52:	bf00      	nop
     e54:	370c      	adds	r7, #12
     e56:	46bd      	mov	sp, r7
     e58:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5c:	4770      	bx	lr

00000e5e <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     e5e:	b480      	push	{r7}
     e60:	b085      	sub	sp, #20
     e62:	af00      	add	r7, sp, #0
     e64:	60f8      	str	r0, [r7, #12]
     e66:	460b      	mov	r3, r1
     e68:	607a      	str	r2, [r7, #4]
     e6a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e6c:	7afb      	ldrb	r3, [r7, #11]
     e6e:	68fa      	ldr	r2, [r7, #12]
     e70:	01db      	lsls	r3, r3, #7
     e72:	4413      	add	r3, r2
     e74:	3308      	adds	r3, #8
     e76:	687a      	ldr	r2, [r7, #4]
     e78:	601a      	str	r2, [r3, #0]
}
     e7a:	bf00      	nop
     e7c:	3714      	adds	r7, #20
     e7e:	46bd      	mov	sp, r7
     e80:	f85d 7b04 	ldr.w	r7, [sp], #4
     e84:	4770      	bx	lr

00000e86 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     e86:	b480      	push	{r7}
     e88:	b085      	sub	sp, #20
     e8a:	af00      	add	r7, sp, #0
     e8c:	60f8      	str	r0, [r7, #12]
     e8e:	460b      	mov	r3, r1
     e90:	607a      	str	r2, [r7, #4]
     e92:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e94:	7afb      	ldrb	r3, [r7, #11]
     e96:	68fa      	ldr	r2, [r7, #12]
     e98:	01db      	lsls	r3, r3, #7
     e9a:	4413      	add	r3, r2
     e9c:	3304      	adds	r3, #4
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	601a      	str	r2, [r3, #0]
}
     ea2:	bf00      	nop
     ea4:	3714      	adds	r7, #20
     ea6:	46bd      	mov	sp, r7
     ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
     eac:	4770      	bx	lr

00000eae <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     eae:	b480      	push	{r7}
     eb0:	b085      	sub	sp, #20
     eb2:	af00      	add	r7, sp, #0
     eb4:	60f8      	str	r0, [r7, #12]
     eb6:	460b      	mov	r3, r1
     eb8:	607a      	str	r2, [r7, #4]
     eba:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ebc:	7afb      	ldrb	r3, [r7, #11]
     ebe:	68fa      	ldr	r2, [r7, #12]
     ec0:	01db      	lsls	r3, r3, #7
     ec2:	4413      	add	r3, r2
     ec4:	3318      	adds	r3, #24
     ec6:	687a      	ldr	r2, [r7, #4]
     ec8:	601a      	str	r2, [r3, #0]
}
     eca:	bf00      	nop
     ecc:	3714      	adds	r7, #20
     ece:	46bd      	mov	sp, r7
     ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ed4:	4770      	bx	lr

00000ed6 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     ed6:	b480      	push	{r7}
     ed8:	b085      	sub	sp, #20
     eda:	af00      	add	r7, sp, #0
     edc:	60f8      	str	r0, [r7, #12]
     ede:	460b      	mov	r3, r1
     ee0:	607a      	str	r2, [r7, #4]
     ee2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ee4:	7afb      	ldrb	r3, [r7, #11]
     ee6:	68fa      	ldr	r2, [r7, #12]
     ee8:	01db      	lsls	r3, r3, #7
     eea:	4413      	add	r3, r2
     eec:	3314      	adds	r3, #20
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	601a      	str	r2, [r3, #0]
}
     ef2:	bf00      	nop
     ef4:	3714      	adds	r7, #20
     ef6:	46bd      	mov	sp, r7
     ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
     efc:	4770      	bx	lr

00000efe <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     efe:	b480      	push	{r7}
     f00:	b085      	sub	sp, #20
     f02:	af00      	add	r7, sp, #0
     f04:	6078      	str	r0, [r7, #4]
     f06:	4608      	mov	r0, r1
     f08:	4611      	mov	r1, r2
     f0a:	461a      	mov	r2, r3
     f0c:	4603      	mov	r3, r0
     f0e:	70fb      	strb	r3, [r7, #3]
     f10:	460b      	mov	r3, r1
     f12:	70bb      	strb	r3, [r7, #2]
     f14:	4613      	mov	r3, r2
     f16:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f18:	78fa      	ldrb	r2, [r7, #3]
     f1a:	78bb      	ldrb	r3, [r7, #2]
     f1c:	6879      	ldr	r1, [r7, #4]
     f1e:	01d2      	lsls	r2, r2, #7
     f20:	440a      	add	r2, r1
     f22:	4413      	add	r3, r2
     f24:	3330      	adds	r3, #48	; 0x30
     f26:	781b      	ldrb	r3, [r3, #0]
     f28:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     f2a:	7bfb      	ldrb	r3, [r7, #15]
     f2c:	f023 030f 	bic.w	r3, r3, #15
     f30:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     f32:	787b      	ldrb	r3, [r7, #1]
     f34:	f003 030f 	and.w	r3, r3, #15
     f38:	b2da      	uxtb	r2, r3
     f3a:	7bfb      	ldrb	r3, [r7, #15]
     f3c:	4313      	orrs	r3, r2
     f3e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f40:	78fa      	ldrb	r2, [r7, #3]
     f42:	78bb      	ldrb	r3, [r7, #2]
     f44:	6879      	ldr	r1, [r7, #4]
     f46:	01d2      	lsls	r2, r2, #7
     f48:	440a      	add	r2, r1
     f4a:	4413      	add	r3, r2
     f4c:	3330      	adds	r3, #48	; 0x30
     f4e:	7bfa      	ldrb	r2, [r7, #15]
     f50:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     f52:	bf00      	nop
     f54:	3714      	adds	r7, #20
     f56:	46bd      	mov	sp, r7
     f58:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5c:	4770      	bx	lr

00000f5e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     f5e:	b480      	push	{r7}
     f60:	b085      	sub	sp, #20
     f62:	af00      	add	r7, sp, #0
     f64:	6078      	str	r0, [r7, #4]
     f66:	4608      	mov	r0, r1
     f68:	4611      	mov	r1, r2
     f6a:	461a      	mov	r2, r3
     f6c:	4603      	mov	r3, r0
     f6e:	70fb      	strb	r3, [r7, #3]
     f70:	460b      	mov	r3, r1
     f72:	70bb      	strb	r3, [r7, #2]
     f74:	4613      	mov	r3, r2
     f76:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f78:	78fa      	ldrb	r2, [r7, #3]
     f7a:	78bb      	ldrb	r3, [r7, #2]
     f7c:	6879      	ldr	r1, [r7, #4]
     f7e:	01d2      	lsls	r2, r2, #7
     f80:	440a      	add	r2, r1
     f82:	4413      	add	r3, r2
     f84:	3330      	adds	r3, #48	; 0x30
     f86:	781b      	ldrb	r3, [r3, #0]
     f88:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     f8a:	7bfb      	ldrb	r3, [r7, #15]
     f8c:	f003 030f 	and.w	r3, r3, #15
     f90:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     f92:	787b      	ldrb	r3, [r7, #1]
     f94:	011b      	lsls	r3, r3, #4
     f96:	b2da      	uxtb	r2, r3
     f98:	7bfb      	ldrb	r3, [r7, #15]
     f9a:	4313      	orrs	r3, r2
     f9c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f9e:	78fa      	ldrb	r2, [r7, #3]
     fa0:	78bb      	ldrb	r3, [r7, #2]
     fa2:	6879      	ldr	r1, [r7, #4]
     fa4:	01d2      	lsls	r2, r2, #7
     fa6:	440a      	add	r2, r1
     fa8:	4413      	add	r3, r2
     faa:	3330      	adds	r3, #48	; 0x30
     fac:	7bfa      	ldrb	r2, [r7, #15]
     fae:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     fb0:	bf00      	nop
     fb2:	3714      	adds	r7, #20
     fb4:	46bd      	mov	sp, r7
     fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
     fba:	4770      	bx	lr

00000fbc <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     fbc:	b480      	push	{r7}
     fbe:	b085      	sub	sp, #20
     fc0:	af00      	add	r7, sp, #0
     fc2:	6078      	str	r0, [r7, #4]
     fc4:	4608      	mov	r0, r1
     fc6:	4611      	mov	r1, r2
     fc8:	461a      	mov	r2, r3
     fca:	4603      	mov	r3, r0
     fcc:	70fb      	strb	r3, [r7, #3]
     fce:	460b      	mov	r3, r1
     fd0:	70bb      	strb	r3, [r7, #2]
     fd2:	4613      	mov	r3, r2
     fd4:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fd6:	78fa      	ldrb	r2, [r7, #3]
     fd8:	78bb      	ldrb	r3, [r7, #2]
     fda:	6879      	ldr	r1, [r7, #4]
     fdc:	01d2      	lsls	r2, r2, #7
     fde:	440a      	add	r2, r1
     fe0:	4413      	add	r3, r2
     fe2:	3340      	adds	r3, #64	; 0x40
     fe4:	781b      	ldrb	r3, [r3, #0]
     fe6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     fe8:	7bfb      	ldrb	r3, [r7, #15]
     fea:	f023 0301 	bic.w	r3, r3, #1
     fee:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ff0:	787a      	ldrb	r2, [r7, #1]
     ff2:	7bfb      	ldrb	r3, [r7, #15]
     ff4:	4313      	orrs	r3, r2
     ff6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ff8:	78fa      	ldrb	r2, [r7, #3]
     ffa:	78bb      	ldrb	r3, [r7, #2]
     ffc:	6879      	ldr	r1, [r7, #4]
     ffe:	01d2      	lsls	r2, r2, #7
    1000:	440a      	add	r2, r1
    1002:	4413      	add	r3, r2
    1004:	3340      	adds	r3, #64	; 0x40
    1006:	7bfa      	ldrb	r2, [r7, #15]
    1008:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    100a:	bf00      	nop
    100c:	3714      	adds	r7, #20
    100e:	46bd      	mov	sp, r7
    1010:	f85d 7b04 	ldr.w	r7, [sp], #4
    1014:	4770      	bx	lr

00001016 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1016:	b490      	push	{r4, r7}
    1018:	b082      	sub	sp, #8
    101a:	af00      	add	r7, sp, #0
    101c:	6078      	str	r0, [r7, #4]
    101e:	460b      	mov	r3, r1
    1020:	70fb      	strb	r3, [r7, #3]
    1022:	4613      	mov	r3, r2
    1024:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1026:	78fa      	ldrb	r2, [r7, #3]
    1028:	78bb      	ldrb	r3, [r7, #2]
    102a:	78f8      	ldrb	r0, [r7, #3]
    102c:	78b9      	ldrb	r1, [r7, #2]
    102e:	687c      	ldr	r4, [r7, #4]
    1030:	01c0      	lsls	r0, r0, #7
    1032:	4420      	add	r0, r4
    1034:	4401      	add	r1, r0
    1036:	3140      	adds	r1, #64	; 0x40
    1038:	7809      	ldrb	r1, [r1, #0]
    103a:	b2c9      	uxtb	r1, r1
    103c:	f041 0104 	orr.w	r1, r1, #4
    1040:	b2c8      	uxtb	r0, r1
    1042:	6879      	ldr	r1, [r7, #4]
    1044:	01d2      	lsls	r2, r2, #7
    1046:	440a      	add	r2, r1
    1048:	4413      	add	r3, r2
    104a:	3340      	adds	r3, #64	; 0x40
    104c:	4602      	mov	r2, r0
    104e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1050:	bf00      	nop
    1052:	3708      	adds	r7, #8
    1054:	46bd      	mov	sp, r7
    1056:	bc90      	pop	{r4, r7}
    1058:	4770      	bx	lr

0000105a <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    105a:	b490      	push	{r4, r7}
    105c:	b082      	sub	sp, #8
    105e:	af00      	add	r7, sp, #0
    1060:	6078      	str	r0, [r7, #4]
    1062:	460b      	mov	r3, r1
    1064:	70fb      	strb	r3, [r7, #3]
    1066:	4613      	mov	r3, r2
    1068:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    106a:	78fa      	ldrb	r2, [r7, #3]
    106c:	78bb      	ldrb	r3, [r7, #2]
    106e:	78f8      	ldrb	r0, [r7, #3]
    1070:	78b9      	ldrb	r1, [r7, #2]
    1072:	687c      	ldr	r4, [r7, #4]
    1074:	01c0      	lsls	r0, r0, #7
    1076:	4420      	add	r0, r4
    1078:	4401      	add	r1, r0
    107a:	3140      	adds	r1, #64	; 0x40
    107c:	7809      	ldrb	r1, [r1, #0]
    107e:	b2c9      	uxtb	r1, r1
    1080:	f021 0104 	bic.w	r1, r1, #4
    1084:	b2c8      	uxtb	r0, r1
    1086:	6879      	ldr	r1, [r7, #4]
    1088:	01d2      	lsls	r2, r2, #7
    108a:	440a      	add	r2, r1
    108c:	4413      	add	r3, r2
    108e:	3340      	adds	r3, #64	; 0x40
    1090:	4602      	mov	r2, r0
    1092:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1094:	bf00      	nop
    1096:	3708      	adds	r7, #8
    1098:	46bd      	mov	sp, r7
    109a:	bc90      	pop	{r4, r7}
    109c:	4770      	bx	lr

0000109e <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    109e:	b480      	push	{r7}
    10a0:	b085      	sub	sp, #20
    10a2:	af00      	add	r7, sp, #0
    10a4:	60f8      	str	r0, [r7, #12]
    10a6:	460b      	mov	r3, r1
    10a8:	607a      	str	r2, [r7, #4]
    10aa:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    10ac:	7afb      	ldrb	r3, [r7, #11]
    10ae:	68fa      	ldr	r2, [r7, #12]
    10b0:	01db      	lsls	r3, r3, #7
    10b2:	4413      	add	r3, r2
    10b4:	3328      	adds	r3, #40	; 0x28
    10b6:	687a      	ldr	r2, [r7, #4]
    10b8:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    10ba:	bf00      	nop
    10bc:	3714      	adds	r7, #20
    10be:	46bd      	mov	sp, r7
    10c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    10c4:	4770      	bx	lr
	...

000010c8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    10c8:	b580      	push	{r7, lr}
    10ca:	b082      	sub	sp, #8
    10cc:	af00      	add	r7, sp, #0
    10ce:	4603      	mov	r3, r0
    10d0:	6039      	str	r1, [r7, #0]
    10d2:	71fb      	strb	r3, [r7, #7]
    10d4:	4613      	mov	r3, r2
    10d6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    10d8:	79bb      	ldrb	r3, [r7, #6]
    10da:	2b01      	cmp	r3, #1
    10dc:	d01c      	beq.n	1118 <_gpio_set_direction+0x50>
    10de:	2b02      	cmp	r3, #2
    10e0:	d037      	beq.n	1152 <_gpio_set_direction+0x8a>
    10e2:	2b00      	cmp	r3, #0
    10e4:	d14e      	bne.n	1184 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    10e6:	79fb      	ldrb	r3, [r7, #7]
    10e8:	683a      	ldr	r2, [r7, #0]
    10ea:	4619      	mov	r1, r3
    10ec:	482a      	ldr	r0, [pc, #168]	; (1198 <_gpio_set_direction+0xd0>)
    10ee:	4b2b      	ldr	r3, [pc, #172]	; (119c <_gpio_set_direction+0xd4>)
    10f0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    10f2:	683b      	ldr	r3, [r7, #0]
    10f4:	b29b      	uxth	r3, r3
    10f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    10fa:	79fb      	ldrb	r3, [r7, #7]
    10fc:	4619      	mov	r1, r3
    10fe:	4826      	ldr	r0, [pc, #152]	; (1198 <_gpio_set_direction+0xd0>)
    1100:	4b27      	ldr	r3, [pc, #156]	; (11a0 <_gpio_set_direction+0xd8>)
    1102:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1104:	683b      	ldr	r3, [r7, #0]
    1106:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1108:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    110c:	79fb      	ldrb	r3, [r7, #7]
    110e:	4619      	mov	r1, r3
    1110:	4821      	ldr	r0, [pc, #132]	; (1198 <_gpio_set_direction+0xd0>)
    1112:	4b23      	ldr	r3, [pc, #140]	; (11a0 <_gpio_set_direction+0xd8>)
    1114:	4798      	blx	r3
		break;
    1116:	e03a      	b.n	118e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1118:	79fb      	ldrb	r3, [r7, #7]
    111a:	683a      	ldr	r2, [r7, #0]
    111c:	4619      	mov	r1, r3
    111e:	481e      	ldr	r0, [pc, #120]	; (1198 <_gpio_set_direction+0xd0>)
    1120:	4b1e      	ldr	r3, [pc, #120]	; (119c <_gpio_set_direction+0xd4>)
    1122:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1124:	683b      	ldr	r3, [r7, #0]
    1126:	b29b      	uxth	r3, r3
    1128:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    112c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1130:	79f9      	ldrb	r1, [r7, #7]
    1132:	461a      	mov	r2, r3
    1134:	4818      	ldr	r0, [pc, #96]	; (1198 <_gpio_set_direction+0xd0>)
    1136:	4b1a      	ldr	r3, [pc, #104]	; (11a0 <_gpio_set_direction+0xd8>)
    1138:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    113a:	683b      	ldr	r3, [r7, #0]
    113c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    113e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    1142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1146:	79f9      	ldrb	r1, [r7, #7]
    1148:	461a      	mov	r2, r3
    114a:	4813      	ldr	r0, [pc, #76]	; (1198 <_gpio_set_direction+0xd0>)
    114c:	4b14      	ldr	r3, [pc, #80]	; (11a0 <_gpio_set_direction+0xd8>)
    114e:	4798      	blx	r3
		break;
    1150:	e01d      	b.n	118e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    1152:	79fb      	ldrb	r3, [r7, #7]
    1154:	683a      	ldr	r2, [r7, #0]
    1156:	4619      	mov	r1, r3
    1158:	480f      	ldr	r0, [pc, #60]	; (1198 <_gpio_set_direction+0xd0>)
    115a:	4b12      	ldr	r3, [pc, #72]	; (11a4 <_gpio_set_direction+0xdc>)
    115c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    115e:	683b      	ldr	r3, [r7, #0]
    1160:	b29b      	uxth	r3, r3
    1162:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1166:	79fb      	ldrb	r3, [r7, #7]
    1168:	4619      	mov	r1, r3
    116a:	480b      	ldr	r0, [pc, #44]	; (1198 <_gpio_set_direction+0xd0>)
    116c:	4b0c      	ldr	r3, [pc, #48]	; (11a0 <_gpio_set_direction+0xd8>)
    116e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1170:	683b      	ldr	r3, [r7, #0]
    1172:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1174:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1178:	79fb      	ldrb	r3, [r7, #7]
    117a:	4619      	mov	r1, r3
    117c:	4806      	ldr	r0, [pc, #24]	; (1198 <_gpio_set_direction+0xd0>)
    117e:	4b08      	ldr	r3, [pc, #32]	; (11a0 <_gpio_set_direction+0xd8>)
    1180:	4798      	blx	r3
		break;
    1182:	e004      	b.n	118e <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    1184:	2246      	movs	r2, #70	; 0x46
    1186:	4908      	ldr	r1, [pc, #32]	; (11a8 <_gpio_set_direction+0xe0>)
    1188:	2000      	movs	r0, #0
    118a:	4b08      	ldr	r3, [pc, #32]	; (11ac <_gpio_set_direction+0xe4>)
    118c:	4798      	blx	r3
	}
}
    118e:	bf00      	nop
    1190:	3708      	adds	r7, #8
    1192:	46bd      	mov	sp, r7
    1194:	bd80      	pop	{r7, pc}
    1196:	bf00      	nop
    1198:	41008000 	.word	0x41008000
    119c:	00000e87 	.word	0x00000e87
    11a0:	0000109f 	.word	0x0000109f
    11a4:	00000e5f 	.word	0x00000e5f
    11a8:	0000ed90 	.word	0x0000ed90
    11ac:	000038b5 	.word	0x000038b5

000011b0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    11b0:	b580      	push	{r7, lr}
    11b2:	b082      	sub	sp, #8
    11b4:	af00      	add	r7, sp, #0
    11b6:	4603      	mov	r3, r0
    11b8:	6039      	str	r1, [r7, #0]
    11ba:	71fb      	strb	r3, [r7, #7]
    11bc:	4613      	mov	r3, r2
    11be:	71bb      	strb	r3, [r7, #6]
	if (level) {
    11c0:	79bb      	ldrb	r3, [r7, #6]
    11c2:	2b00      	cmp	r3, #0
    11c4:	d006      	beq.n	11d4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    11c6:	79fb      	ldrb	r3, [r7, #7]
    11c8:	683a      	ldr	r2, [r7, #0]
    11ca:	4619      	mov	r1, r3
    11cc:	4806      	ldr	r0, [pc, #24]	; (11e8 <_gpio_set_level+0x38>)
    11ce:	4b07      	ldr	r3, [pc, #28]	; (11ec <_gpio_set_level+0x3c>)
    11d0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    11d2:	e005      	b.n	11e0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    11d4:	79fb      	ldrb	r3, [r7, #7]
    11d6:	683a      	ldr	r2, [r7, #0]
    11d8:	4619      	mov	r1, r3
    11da:	4803      	ldr	r0, [pc, #12]	; (11e8 <_gpio_set_level+0x38>)
    11dc:	4b04      	ldr	r3, [pc, #16]	; (11f0 <_gpio_set_level+0x40>)
    11de:	4798      	blx	r3
}
    11e0:	bf00      	nop
    11e2:	3708      	adds	r7, #8
    11e4:	46bd      	mov	sp, r7
    11e6:	bd80      	pop	{r7, pc}
    11e8:	41008000 	.word	0x41008000
    11ec:	00000eaf 	.word	0x00000eaf
    11f0:	00000ed7 	.word	0x00000ed7

000011f4 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    11f4:	b580      	push	{r7, lr}
    11f6:	b082      	sub	sp, #8
    11f8:	af00      	add	r7, sp, #0
    11fa:	4603      	mov	r3, r0
    11fc:	71fb      	strb	r3, [r7, #7]
    11fe:	460b      	mov	r3, r1
    1200:	71bb      	strb	r3, [r7, #6]
    1202:	4613      	mov	r3, r2
    1204:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    1206:	797b      	ldrb	r3, [r7, #5]
    1208:	2b01      	cmp	r3, #1
    120a:	d00a      	beq.n	1222 <_gpio_set_pin_pull_mode+0x2e>
    120c:	2b02      	cmp	r3, #2
    120e:	d01f      	beq.n	1250 <_gpio_set_pin_pull_mode+0x5c>
    1210:	2b00      	cmp	r3, #0
    1212:	d134      	bne.n	127e <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    1214:	79ba      	ldrb	r2, [r7, #6]
    1216:	79fb      	ldrb	r3, [r7, #7]
    1218:	4619      	mov	r1, r3
    121a:	481e      	ldr	r0, [pc, #120]	; (1294 <_gpio_set_pin_pull_mode+0xa0>)
    121c:	4b1e      	ldr	r3, [pc, #120]	; (1298 <_gpio_set_pin_pull_mode+0xa4>)
    121e:	4798      	blx	r3
		break;
    1220:	e033      	b.n	128a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1222:	79bb      	ldrb	r3, [r7, #6]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	79fb      	ldrb	r3, [r7, #7]
    122a:	4619      	mov	r1, r3
    122c:	4819      	ldr	r0, [pc, #100]	; (1294 <_gpio_set_pin_pull_mode+0xa0>)
    122e:	4b1b      	ldr	r3, [pc, #108]	; (129c <_gpio_set_pin_pull_mode+0xa8>)
    1230:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1232:	79ba      	ldrb	r2, [r7, #6]
    1234:	79fb      	ldrb	r3, [r7, #7]
    1236:	4619      	mov	r1, r3
    1238:	4816      	ldr	r0, [pc, #88]	; (1294 <_gpio_set_pin_pull_mode+0xa0>)
    123a:	4b19      	ldr	r3, [pc, #100]	; (12a0 <_gpio_set_pin_pull_mode+0xac>)
    123c:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    123e:	79bb      	ldrb	r3, [r7, #6]
    1240:	2201      	movs	r2, #1
    1242:	409a      	lsls	r2, r3
    1244:	79fb      	ldrb	r3, [r7, #7]
    1246:	4619      	mov	r1, r3
    1248:	4812      	ldr	r0, [pc, #72]	; (1294 <_gpio_set_pin_pull_mode+0xa0>)
    124a:	4b16      	ldr	r3, [pc, #88]	; (12a4 <_gpio_set_pin_pull_mode+0xb0>)
    124c:	4798      	blx	r3
		break;
    124e:	e01c      	b.n	128a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1250:	79bb      	ldrb	r3, [r7, #6]
    1252:	2201      	movs	r2, #1
    1254:	409a      	lsls	r2, r3
    1256:	79fb      	ldrb	r3, [r7, #7]
    1258:	4619      	mov	r1, r3
    125a:	480e      	ldr	r0, [pc, #56]	; (1294 <_gpio_set_pin_pull_mode+0xa0>)
    125c:	4b0f      	ldr	r3, [pc, #60]	; (129c <_gpio_set_pin_pull_mode+0xa8>)
    125e:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1260:	79ba      	ldrb	r2, [r7, #6]
    1262:	79fb      	ldrb	r3, [r7, #7]
    1264:	4619      	mov	r1, r3
    1266:	480b      	ldr	r0, [pc, #44]	; (1294 <_gpio_set_pin_pull_mode+0xa0>)
    1268:	4b0d      	ldr	r3, [pc, #52]	; (12a0 <_gpio_set_pin_pull_mode+0xac>)
    126a:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    126c:	79bb      	ldrb	r3, [r7, #6]
    126e:	2201      	movs	r2, #1
    1270:	409a      	lsls	r2, r3
    1272:	79fb      	ldrb	r3, [r7, #7]
    1274:	4619      	mov	r1, r3
    1276:	4807      	ldr	r0, [pc, #28]	; (1294 <_gpio_set_pin_pull_mode+0xa0>)
    1278:	4b0b      	ldr	r3, [pc, #44]	; (12a8 <_gpio_set_pin_pull_mode+0xb4>)
    127a:	4798      	blx	r3
		break;
    127c:	e005      	b.n	128a <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    127e:	2289      	movs	r2, #137	; 0x89
    1280:	490a      	ldr	r1, [pc, #40]	; (12ac <_gpio_set_pin_pull_mode+0xb8>)
    1282:	2000      	movs	r0, #0
    1284:	4b0a      	ldr	r3, [pc, #40]	; (12b0 <_gpio_set_pin_pull_mode+0xbc>)
    1286:	4798      	blx	r3
		break;
    1288:	bf00      	nop
	}
}
    128a:	bf00      	nop
    128c:	3708      	adds	r7, #8
    128e:	46bd      	mov	sp, r7
    1290:	bd80      	pop	{r7, pc}
    1292:	bf00      	nop
    1294:	41008000 	.word	0x41008000
    1298:	0000105b 	.word	0x0000105b
    129c:	00000e87 	.word	0x00000e87
    12a0:	00001017 	.word	0x00001017
    12a4:	00000eaf 	.word	0x00000eaf
    12a8:	00000ed7 	.word	0x00000ed7
    12ac:	0000ed90 	.word	0x0000ed90
    12b0:	000038b5 	.word	0x000038b5

000012b4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    12b4:	b590      	push	{r4, r7, lr}
    12b6:	b085      	sub	sp, #20
    12b8:	af00      	add	r7, sp, #0
    12ba:	6078      	str	r0, [r7, #4]
    12bc:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	095b      	lsrs	r3, r3, #5
    12c2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    12c4:	687b      	ldr	r3, [r7, #4]
    12c6:	b2db      	uxtb	r3, r3
    12c8:	f003 031f 	and.w	r3, r3, #31
    12cc:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    12ce:	683b      	ldr	r3, [r7, #0]
    12d0:	f1b3 3fff 	cmp.w	r3, #4294967295
    12d4:	d106      	bne.n	12e4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    12d6:	7bba      	ldrb	r2, [r7, #14]
    12d8:	7bf9      	ldrb	r1, [r7, #15]
    12da:	2300      	movs	r3, #0
    12dc:	4812      	ldr	r0, [pc, #72]	; (1328 <_gpio_set_pin_function+0x74>)
    12de:	4c13      	ldr	r4, [pc, #76]	; (132c <_gpio_set_pin_function+0x78>)
    12e0:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    12e2:	e01d      	b.n	1320 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    12e4:	7bba      	ldrb	r2, [r7, #14]
    12e6:	7bf9      	ldrb	r1, [r7, #15]
    12e8:	2301      	movs	r3, #1
    12ea:	480f      	ldr	r0, [pc, #60]	; (1328 <_gpio_set_pin_function+0x74>)
    12ec:	4c0f      	ldr	r4, [pc, #60]	; (132c <_gpio_set_pin_function+0x78>)
    12ee:	47a0      	blx	r4
		if (pin & 1) {
    12f0:	7bbb      	ldrb	r3, [r7, #14]
    12f2:	f003 0301 	and.w	r3, r3, #1
    12f6:	2b00      	cmp	r3, #0
    12f8:	d009      	beq.n	130e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    12fa:	7bbb      	ldrb	r3, [r7, #14]
    12fc:	085b      	lsrs	r3, r3, #1
    12fe:	b2da      	uxtb	r2, r3
    1300:	683b      	ldr	r3, [r7, #0]
    1302:	b2db      	uxtb	r3, r3
    1304:	7bf9      	ldrb	r1, [r7, #15]
    1306:	4808      	ldr	r0, [pc, #32]	; (1328 <_gpio_set_pin_function+0x74>)
    1308:	4c09      	ldr	r4, [pc, #36]	; (1330 <_gpio_set_pin_function+0x7c>)
    130a:	47a0      	blx	r4
}
    130c:	e008      	b.n	1320 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    130e:	7bbb      	ldrb	r3, [r7, #14]
    1310:	085b      	lsrs	r3, r3, #1
    1312:	b2da      	uxtb	r2, r3
    1314:	683b      	ldr	r3, [r7, #0]
    1316:	b2db      	uxtb	r3, r3
    1318:	7bf9      	ldrb	r1, [r7, #15]
    131a:	4803      	ldr	r0, [pc, #12]	; (1328 <_gpio_set_pin_function+0x74>)
    131c:	4c05      	ldr	r4, [pc, #20]	; (1334 <_gpio_set_pin_function+0x80>)
    131e:	47a0      	blx	r4
}
    1320:	bf00      	nop
    1322:	3714      	adds	r7, #20
    1324:	46bd      	mov	sp, r7
    1326:	bd90      	pop	{r4, r7, pc}
    1328:	41008000 	.word	0x41008000
    132c:	00000fbd 	.word	0x00000fbd
    1330:	00000f5f 	.word	0x00000f5f
    1334:	00000eff 	.word	0x00000eff

00001338 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1338:	b580      	push	{r7, lr}
    133a:	b082      	sub	sp, #8
    133c:	af00      	add	r7, sp, #0
    133e:	4603      	mov	r3, r0
    1340:	460a      	mov	r2, r1
    1342:	71fb      	strb	r3, [r7, #7]
    1344:	4613      	mov	r3, r2
    1346:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1348:	79fb      	ldrb	r3, [r7, #7]
    134a:	095b      	lsrs	r3, r3, #5
    134c:	b2d8      	uxtb	r0, r3
    134e:	79fb      	ldrb	r3, [r7, #7]
    1350:	f003 031f 	and.w	r3, r3, #31
    1354:	b2db      	uxtb	r3, r3
    1356:	79ba      	ldrb	r2, [r7, #6]
    1358:	4619      	mov	r1, r3
    135a:	4b03      	ldr	r3, [pc, #12]	; (1368 <gpio_set_pin_pull_mode+0x30>)
    135c:	4798      	blx	r3
}
    135e:	bf00      	nop
    1360:	3708      	adds	r7, #8
    1362:	46bd      	mov	sp, r7
    1364:	bd80      	pop	{r7, pc}
    1366:	bf00      	nop
    1368:	000011f5 	.word	0x000011f5

0000136c <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    136c:	b580      	push	{r7, lr}
    136e:	b082      	sub	sp, #8
    1370:	af00      	add	r7, sp, #0
    1372:	6078      	str	r0, [r7, #4]
    1374:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1376:	6839      	ldr	r1, [r7, #0]
    1378:	6878      	ldr	r0, [r7, #4]
    137a:	4b03      	ldr	r3, [pc, #12]	; (1388 <gpio_set_pin_function+0x1c>)
    137c:	4798      	blx	r3
}
    137e:	bf00      	nop
    1380:	3708      	adds	r7, #8
    1382:	46bd      	mov	sp, r7
    1384:	bd80      	pop	{r7, pc}
    1386:	bf00      	nop
    1388:	000012b5 	.word	0x000012b5

0000138c <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    138c:	b580      	push	{r7, lr}
    138e:	b082      	sub	sp, #8
    1390:	af00      	add	r7, sp, #0
    1392:	4603      	mov	r3, r0
    1394:	460a      	mov	r2, r1
    1396:	71fb      	strb	r3, [r7, #7]
    1398:	4613      	mov	r3, r2
    139a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    139c:	79fb      	ldrb	r3, [r7, #7]
    139e:	095b      	lsrs	r3, r3, #5
    13a0:	b2d8      	uxtb	r0, r3
    13a2:	79fb      	ldrb	r3, [r7, #7]
    13a4:	f003 031f 	and.w	r3, r3, #31
    13a8:	2201      	movs	r2, #1
    13aa:	fa02 f303 	lsl.w	r3, r2, r3
    13ae:	79ba      	ldrb	r2, [r7, #6]
    13b0:	4619      	mov	r1, r3
    13b2:	4b03      	ldr	r3, [pc, #12]	; (13c0 <gpio_set_pin_direction+0x34>)
    13b4:	4798      	blx	r3
}
    13b6:	bf00      	nop
    13b8:	3708      	adds	r7, #8
    13ba:	46bd      	mov	sp, r7
    13bc:	bd80      	pop	{r7, pc}
    13be:	bf00      	nop
    13c0:	000010c9 	.word	0x000010c9

000013c4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    13c4:	b580      	push	{r7, lr}
    13c6:	b082      	sub	sp, #8
    13c8:	af00      	add	r7, sp, #0
    13ca:	4603      	mov	r3, r0
    13cc:	460a      	mov	r2, r1
    13ce:	71fb      	strb	r3, [r7, #7]
    13d0:	4613      	mov	r3, r2
    13d2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    13d4:	79fb      	ldrb	r3, [r7, #7]
    13d6:	095b      	lsrs	r3, r3, #5
    13d8:	b2d8      	uxtb	r0, r3
    13da:	79fb      	ldrb	r3, [r7, #7]
    13dc:	f003 031f 	and.w	r3, r3, #31
    13e0:	2201      	movs	r2, #1
    13e2:	fa02 f303 	lsl.w	r3, r2, r3
    13e6:	79ba      	ldrb	r2, [r7, #6]
    13e8:	4619      	mov	r1, r3
    13ea:	4b03      	ldr	r3, [pc, #12]	; (13f8 <gpio_set_pin_level+0x34>)
    13ec:	4798      	blx	r3
}
    13ee:	bf00      	nop
    13f0:	3708      	adds	r7, #8
    13f2:	46bd      	mov	sp, r7
    13f4:	bd80      	pop	{r7, pc}
    13f6:	bf00      	nop
    13f8:	000011b1 	.word	0x000011b1

000013fc <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    13fc:	b580      	push	{r7, lr}
    13fe:	af00      	add	r7, sp, #0
	_init_chip();
    1400:	4b01      	ldr	r3, [pc, #4]	; (1408 <init_mcu+0xc>)
    1402:	4798      	blx	r3
}
    1404:	bf00      	nop
    1406:	bd80      	pop	{r7, pc}
    1408:	000044bd 	.word	0x000044bd

0000140c <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    140c:	b580      	push	{r7, lr}
    140e:	b082      	sub	sp, #8
    1410:	af00      	add	r7, sp, #0
    1412:	6078      	str	r0, [r7, #4]
    1414:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    1416:	687b      	ldr	r3, [r7, #4]
    1418:	2b00      	cmp	r3, #0
    141a:	d004      	beq.n	1426 <wdt_init+0x1a>
    141c:	683b      	ldr	r3, [r7, #0]
    141e:	2b00      	cmp	r3, #0
    1420:	d001      	beq.n	1426 <wdt_init+0x1a>
    1422:	2301      	movs	r3, #1
    1424:	e000      	b.n	1428 <wdt_init+0x1c>
    1426:	2300      	movs	r3, #0
    1428:	f003 0301 	and.w	r3, r3, #1
    142c:	b2db      	uxtb	r3, r3
    142e:	2248      	movs	r2, #72	; 0x48
    1430:	4907      	ldr	r1, [pc, #28]	; (1450 <wdt_init+0x44>)
    1432:	4618      	mov	r0, r3
    1434:	4b07      	ldr	r3, [pc, #28]	; (1454 <wdt_init+0x48>)
    1436:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1438:	687b      	ldr	r3, [r7, #4]
    143a:	683a      	ldr	r2, [r7, #0]
    143c:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    143e:	687b      	ldr	r3, [r7, #4]
    1440:	4618      	mov	r0, r3
    1442:	4b05      	ldr	r3, [pc, #20]	; (1458 <wdt_init+0x4c>)
    1444:	4798      	blx	r3
    1446:	4603      	mov	r3, r0
}
    1448:	4618      	mov	r0, r3
    144a:	3708      	adds	r7, #8
    144c:	46bd      	mov	sp, r7
    144e:	bd80      	pop	{r7, pc}
    1450:	0000edac 	.word	0x0000edac
    1454:	000038b5 	.word	0x000038b5
    1458:	0000ae65 	.word	0x0000ae65

0000145c <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    145c:	b580      	push	{r7, lr}
    145e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    1460:	4804      	ldr	r0, [pc, #16]	; (1474 <CRC_CALC_init+0x18>)
    1462:	4b05      	ldr	r3, [pc, #20]	; (1478 <CRC_CALC_init+0x1c>)
    1464:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    1466:	4905      	ldr	r1, [pc, #20]	; (147c <CRC_CALC_init+0x20>)
    1468:	4805      	ldr	r0, [pc, #20]	; (1480 <CRC_CALC_init+0x24>)
    146a:	4b06      	ldr	r3, [pc, #24]	; (1484 <CRC_CALC_init+0x28>)
    146c:	4798      	blx	r3
}
    146e:	bf00      	nop
    1470:	bd80      	pop	{r7, pc}
    1472:	bf00      	nop
    1474:	40000800 	.word	0x40000800
    1478:	00000c5f 	.word	0x00000c5f
    147c:	41002000 	.word	0x41002000
    1480:	200018e0 	.word	0x200018e0
    1484:	00002245 	.word	0x00002245

00001488 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1488:	b580      	push	{r7, lr}
    148a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    148c:	2244      	movs	r2, #68	; 0x44
    148e:	2104      	movs	r1, #4
    1490:	483f      	ldr	r0, [pc, #252]	; (1590 <EXTERNAL_IRQ_0_init+0x108>)
    1492:	4b40      	ldr	r3, [pc, #256]	; (1594 <EXTERNAL_IRQ_0_init+0x10c>)
    1494:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    1496:	4840      	ldr	r0, [pc, #256]	; (1598 <EXTERNAL_IRQ_0_init+0x110>)
    1498:	4b40      	ldr	r3, [pc, #256]	; (159c <EXTERNAL_IRQ_0_init+0x114>)
    149a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    149c:	2101      	movs	r1, #1
    149e:	2040      	movs	r0, #64	; 0x40
    14a0:	4b3f      	ldr	r3, [pc, #252]	; (15a0 <EXTERNAL_IRQ_0_init+0x118>)
    14a2:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    14a4:	2100      	movs	r1, #0
    14a6:	2040      	movs	r0, #64	; 0x40
    14a8:	4b3e      	ldr	r3, [pc, #248]	; (15a4 <EXTERNAL_IRQ_0_init+0x11c>)
    14aa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    14ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    14b0:	2040      	movs	r0, #64	; 0x40
    14b2:	4b3d      	ldr	r3, [pc, #244]	; (15a8 <EXTERNAL_IRQ_0_init+0x120>)
    14b4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    14b6:	2101      	movs	r1, #1
    14b8:	2021      	movs	r0, #33	; 0x21
    14ba:	4b39      	ldr	r3, [pc, #228]	; (15a0 <EXTERNAL_IRQ_0_init+0x118>)
    14bc:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    14be:	2100      	movs	r1, #0
    14c0:	2021      	movs	r0, #33	; 0x21
    14c2:	4b38      	ldr	r3, [pc, #224]	; (15a4 <EXTERNAL_IRQ_0_init+0x11c>)
    14c4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    14c6:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    14ca:	2021      	movs	r0, #33	; 0x21
    14cc:	4b36      	ldr	r3, [pc, #216]	; (15a8 <EXTERNAL_IRQ_0_init+0x120>)
    14ce:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    14d0:	2101      	movs	r1, #1
    14d2:	2003      	movs	r0, #3
    14d4:	4b32      	ldr	r3, [pc, #200]	; (15a0 <EXTERNAL_IRQ_0_init+0x118>)
    14d6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    14d8:	2102      	movs	r1, #2
    14da:	2003      	movs	r0, #3
    14dc:	4b31      	ldr	r3, [pc, #196]	; (15a4 <EXTERNAL_IRQ_0_init+0x11c>)
    14de:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    14e0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    14e4:	2003      	movs	r0, #3
    14e6:	4b30      	ldr	r3, [pc, #192]	; (15a8 <EXTERNAL_IRQ_0_init+0x120>)
    14e8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    14ea:	2101      	movs	r1, #1
    14ec:	2004      	movs	r0, #4
    14ee:	4b2c      	ldr	r3, [pc, #176]	; (15a0 <EXTERNAL_IRQ_0_init+0x118>)
    14f0:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    14f2:	2102      	movs	r1, #2
    14f4:	2004      	movs	r0, #4
    14f6:	4b2b      	ldr	r3, [pc, #172]	; (15a4 <EXTERNAL_IRQ_0_init+0x11c>)
    14f8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    14fa:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    14fe:	2004      	movs	r0, #4
    1500:	4b29      	ldr	r3, [pc, #164]	; (15a8 <EXTERNAL_IRQ_0_init+0x120>)
    1502:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    1504:	2101      	movs	r1, #1
    1506:	2005      	movs	r0, #5
    1508:	4b25      	ldr	r3, [pc, #148]	; (15a0 <EXTERNAL_IRQ_0_init+0x118>)
    150a:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    150c:	2102      	movs	r1, #2
    150e:	2005      	movs	r0, #5
    1510:	4b24      	ldr	r3, [pc, #144]	; (15a4 <EXTERNAL_IRQ_0_init+0x11c>)
    1512:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    1514:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    1518:	2005      	movs	r0, #5
    151a:	4b23      	ldr	r3, [pc, #140]	; (15a8 <EXTERNAL_IRQ_0_init+0x120>)
    151c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    151e:	2101      	movs	r1, #1
    1520:	2056      	movs	r0, #86	; 0x56
    1522:	4b1f      	ldr	r3, [pc, #124]	; (15a0 <EXTERNAL_IRQ_0_init+0x118>)
    1524:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    1526:	2102      	movs	r1, #2
    1528:	2056      	movs	r0, #86	; 0x56
    152a:	4b1e      	ldr	r3, [pc, #120]	; (15a4 <EXTERNAL_IRQ_0_init+0x11c>)
    152c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    152e:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    1532:	2056      	movs	r0, #86	; 0x56
    1534:	4b1c      	ldr	r3, [pc, #112]	; (15a8 <EXTERNAL_IRQ_0_init+0x120>)
    1536:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    1538:	2101      	movs	r1, #1
    153a:	2057      	movs	r0, #87	; 0x57
    153c:	4b18      	ldr	r3, [pc, #96]	; (15a0 <EXTERNAL_IRQ_0_init+0x118>)
    153e:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    1540:	2102      	movs	r1, #2
    1542:	2057      	movs	r0, #87	; 0x57
    1544:	4b17      	ldr	r3, [pc, #92]	; (15a4 <EXTERNAL_IRQ_0_init+0x11c>)
    1546:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    1548:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    154c:	2057      	movs	r0, #87	; 0x57
    154e:	4b16      	ldr	r3, [pc, #88]	; (15a8 <EXTERNAL_IRQ_0_init+0x120>)
    1550:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    1552:	2101      	movs	r1, #1
    1554:	2028      	movs	r0, #40	; 0x28
    1556:	4b12      	ldr	r3, [pc, #72]	; (15a0 <EXTERNAL_IRQ_0_init+0x118>)
    1558:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    155a:	2100      	movs	r1, #0
    155c:	2028      	movs	r0, #40	; 0x28
    155e:	4b11      	ldr	r3, [pc, #68]	; (15a4 <EXTERNAL_IRQ_0_init+0x11c>)
    1560:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    1562:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1566:	2028      	movs	r0, #40	; 0x28
    1568:	4b0f      	ldr	r3, [pc, #60]	; (15a8 <EXTERNAL_IRQ_0_init+0x120>)
    156a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    156c:	2101      	movs	r1, #1
    156e:	2029      	movs	r0, #41	; 0x29
    1570:	4b0b      	ldr	r3, [pc, #44]	; (15a0 <EXTERNAL_IRQ_0_init+0x118>)
    1572:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    1574:	2100      	movs	r1, #0
    1576:	2029      	movs	r0, #41	; 0x29
    1578:	4b0a      	ldr	r3, [pc, #40]	; (15a4 <EXTERNAL_IRQ_0_init+0x11c>)
    157a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    157c:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1580:	2029      	movs	r0, #41	; 0x29
    1582:	4b09      	ldr	r3, [pc, #36]	; (15a8 <EXTERNAL_IRQ_0_init+0x120>)
    1584:	4798      	blx	r3

	ext_irq_init();
    1586:	4b09      	ldr	r3, [pc, #36]	; (15ac <EXTERNAL_IRQ_0_init+0x124>)
    1588:	4798      	blx	r3
}
    158a:	bf00      	nop
    158c:	bd80      	pop	{r7, pc}
    158e:	bf00      	nop
    1590:	40001c00 	.word	0x40001c00
    1594:	00000b19 	.word	0x00000b19
    1598:	40000800 	.word	0x40000800
    159c:	00000bff 	.word	0x00000bff
    15a0:	0000138d 	.word	0x0000138d
    15a4:	00001339 	.word	0x00001339
    15a8:	0000136d 	.word	0x0000136d
    15ac:	0000230d 	.word	0x0000230d

000015b0 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    15b0:	b580      	push	{r7, lr}
    15b2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15b4:	2244      	movs	r2, #68	; 0x44
    15b6:	210b      	movs	r1, #11
    15b8:	4807      	ldr	r0, [pc, #28]	; (15d8 <EVENT_SYSTEM_0_init+0x28>)
    15ba:	4b08      	ldr	r3, [pc, #32]	; (15dc <EVENT_SYSTEM_0_init+0x2c>)
    15bc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15be:	2244      	movs	r2, #68	; 0x44
    15c0:	210c      	movs	r1, #12
    15c2:	4805      	ldr	r0, [pc, #20]	; (15d8 <EVENT_SYSTEM_0_init+0x28>)
    15c4:	4b05      	ldr	r3, [pc, #20]	; (15dc <EVENT_SYSTEM_0_init+0x2c>)
    15c6:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    15c8:	4805      	ldr	r0, [pc, #20]	; (15e0 <EVENT_SYSTEM_0_init+0x30>)
    15ca:	4b06      	ldr	r3, [pc, #24]	; (15e4 <EVENT_SYSTEM_0_init+0x34>)
    15cc:	4798      	blx	r3

	event_system_init();
    15ce:	4b06      	ldr	r3, [pc, #24]	; (15e8 <EVENT_SYSTEM_0_init+0x38>)
    15d0:	4798      	blx	r3
}
    15d2:	bf00      	nop
    15d4:	bd80      	pop	{r7, pc}
    15d6:	bf00      	nop
    15d8:	40001c00 	.word	0x40001c00
    15dc:	00000b19 	.word	0x00000b19
    15e0:	40000800 	.word	0x40000800
    15e4:	00000c7f 	.word	0x00000c7f
    15e8:	000022f9 	.word	0x000022f9

000015ec <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    15ec:	b580      	push	{r7, lr}
    15ee:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    15f0:	2101      	movs	r1, #1
    15f2:	202b      	movs	r0, #43	; 0x2b
    15f4:	4b2b      	ldr	r3, [pc, #172]	; (16a4 <QSPI_N25Q256_PORT_init+0xb8>)
    15f6:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    15f8:	2100      	movs	r1, #0
    15fa:	202b      	movs	r0, #43	; 0x2b
    15fc:	4b2a      	ldr	r3, [pc, #168]	; (16a8 <QSPI_N25Q256_PORT_init+0xbc>)
    15fe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    1600:	492a      	ldr	r1, [pc, #168]	; (16ac <QSPI_N25Q256_PORT_init+0xc0>)
    1602:	202b      	movs	r0, #43	; 0x2b
    1604:	4b2a      	ldr	r3, [pc, #168]	; (16b0 <QSPI_N25Q256_PORT_init+0xc4>)
    1606:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1608:	2102      	movs	r1, #2
    160a:	2008      	movs	r0, #8
    160c:	4b25      	ldr	r3, [pc, #148]	; (16a4 <QSPI_N25Q256_PORT_init+0xb8>)
    160e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    1610:	2100      	movs	r1, #0
    1612:	2008      	movs	r0, #8
    1614:	4b27      	ldr	r3, [pc, #156]	; (16b4 <QSPI_N25Q256_PORT_init+0xc8>)
    1616:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1618:	2100      	movs	r1, #0
    161a:	2008      	movs	r0, #8
    161c:	4b22      	ldr	r3, [pc, #136]	; (16a8 <QSPI_N25Q256_PORT_init+0xbc>)
    161e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1620:	4925      	ldr	r1, [pc, #148]	; (16b8 <QSPI_N25Q256_PORT_init+0xcc>)
    1622:	2008      	movs	r0, #8
    1624:	4b22      	ldr	r3, [pc, #136]	; (16b0 <QSPI_N25Q256_PORT_init+0xc4>)
    1626:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1628:	2102      	movs	r1, #2
    162a:	2009      	movs	r0, #9
    162c:	4b1d      	ldr	r3, [pc, #116]	; (16a4 <QSPI_N25Q256_PORT_init+0xb8>)
    162e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1630:	2100      	movs	r1, #0
    1632:	2009      	movs	r0, #9
    1634:	4b1f      	ldr	r3, [pc, #124]	; (16b4 <QSPI_N25Q256_PORT_init+0xc8>)
    1636:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1638:	2100      	movs	r1, #0
    163a:	2009      	movs	r0, #9
    163c:	4b1a      	ldr	r3, [pc, #104]	; (16a8 <QSPI_N25Q256_PORT_init+0xbc>)
    163e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1640:	491e      	ldr	r1, [pc, #120]	; (16bc <QSPI_N25Q256_PORT_init+0xd0>)
    1642:	2009      	movs	r0, #9
    1644:	4b1a      	ldr	r3, [pc, #104]	; (16b0 <QSPI_N25Q256_PORT_init+0xc4>)
    1646:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1648:	2102      	movs	r1, #2
    164a:	200a      	movs	r0, #10
    164c:	4b15      	ldr	r3, [pc, #84]	; (16a4 <QSPI_N25Q256_PORT_init+0xb8>)
    164e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1650:	2100      	movs	r1, #0
    1652:	200a      	movs	r0, #10
    1654:	4b17      	ldr	r3, [pc, #92]	; (16b4 <QSPI_N25Q256_PORT_init+0xc8>)
    1656:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1658:	2100      	movs	r1, #0
    165a:	200a      	movs	r0, #10
    165c:	4b12      	ldr	r3, [pc, #72]	; (16a8 <QSPI_N25Q256_PORT_init+0xbc>)
    165e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1660:	4917      	ldr	r1, [pc, #92]	; (16c0 <QSPI_N25Q256_PORT_init+0xd4>)
    1662:	200a      	movs	r0, #10
    1664:	4b12      	ldr	r3, [pc, #72]	; (16b0 <QSPI_N25Q256_PORT_init+0xc4>)
    1666:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1668:	2102      	movs	r1, #2
    166a:	200b      	movs	r0, #11
    166c:	4b0d      	ldr	r3, [pc, #52]	; (16a4 <QSPI_N25Q256_PORT_init+0xb8>)
    166e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1670:	2100      	movs	r1, #0
    1672:	200b      	movs	r0, #11
    1674:	4b0f      	ldr	r3, [pc, #60]	; (16b4 <QSPI_N25Q256_PORT_init+0xc8>)
    1676:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1678:	2100      	movs	r1, #0
    167a:	200b      	movs	r0, #11
    167c:	4b0a      	ldr	r3, [pc, #40]	; (16a8 <QSPI_N25Q256_PORT_init+0xbc>)
    167e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1680:	4910      	ldr	r1, [pc, #64]	; (16c4 <QSPI_N25Q256_PORT_init+0xd8>)
    1682:	200b      	movs	r0, #11
    1684:	4b0a      	ldr	r3, [pc, #40]	; (16b0 <QSPI_N25Q256_PORT_init+0xc4>)
    1686:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1688:	2101      	movs	r1, #1
    168a:	202a      	movs	r0, #42	; 0x2a
    168c:	4b05      	ldr	r3, [pc, #20]	; (16a4 <QSPI_N25Q256_PORT_init+0xb8>)
    168e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1690:	2100      	movs	r1, #0
    1692:	202a      	movs	r0, #42	; 0x2a
    1694:	4b04      	ldr	r3, [pc, #16]	; (16a8 <QSPI_N25Q256_PORT_init+0xbc>)
    1696:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1698:	490b      	ldr	r1, [pc, #44]	; (16c8 <QSPI_N25Q256_PORT_init+0xdc>)
    169a:	202a      	movs	r0, #42	; 0x2a
    169c:	4b04      	ldr	r3, [pc, #16]	; (16b0 <QSPI_N25Q256_PORT_init+0xc4>)
    169e:	4798      	blx	r3
}
    16a0:	bf00      	nop
    16a2:	bd80      	pop	{r7, pc}
    16a4:	0000138d 	.word	0x0000138d
    16a8:	00001339 	.word	0x00001339
    16ac:	002b0007 	.word	0x002b0007
    16b0:	0000136d 	.word	0x0000136d
    16b4:	000013c5 	.word	0x000013c5
    16b8:	00080007 	.word	0x00080007
    16bc:	00090007 	.word	0x00090007
    16c0:	000a0007 	.word	0x000a0007
    16c4:	000b0007 	.word	0x000b0007
    16c8:	002a0007 	.word	0x002a0007

000016cc <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    16cc:	b580      	push	{r7, lr}
    16ce:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    16d0:	4805      	ldr	r0, [pc, #20]	; (16e8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    16d2:	4b06      	ldr	r3, [pc, #24]	; (16ec <QSPI_N25Q256_CLOCK_init+0x20>)
    16d4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    16d6:	4804      	ldr	r0, [pc, #16]	; (16e8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    16d8:	4b05      	ldr	r3, [pc, #20]	; (16f0 <QSPI_N25Q256_CLOCK_init+0x24>)
    16da:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    16dc:	4802      	ldr	r0, [pc, #8]	; (16e8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    16de:	4b05      	ldr	r3, [pc, #20]	; (16f4 <QSPI_N25Q256_CLOCK_init+0x28>)
    16e0:	4798      	blx	r3
}
    16e2:	bf00      	nop
    16e4:	bd80      	pop	{r7, pc}
    16e6:	bf00      	nop
    16e8:	40000800 	.word	0x40000800
    16ec:	00000b5f 	.word	0x00000b5f
    16f0:	00000b9f 	.word	0x00000b9f
    16f4:	00000d7f 	.word	0x00000d7f

000016f8 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    16f8:	b580      	push	{r7, lr}
    16fa:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    16fc:	4b04      	ldr	r3, [pc, #16]	; (1710 <QSPI_N25Q256_init+0x18>)
    16fe:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1700:	4904      	ldr	r1, [pc, #16]	; (1714 <QSPI_N25Q256_init+0x1c>)
    1702:	4805      	ldr	r0, [pc, #20]	; (1718 <QSPI_N25Q256_init+0x20>)
    1704:	4b05      	ldr	r3, [pc, #20]	; (171c <QSPI_N25Q256_init+0x24>)
    1706:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1708:	4b05      	ldr	r3, [pc, #20]	; (1720 <QSPI_N25Q256_init+0x28>)
    170a:	4798      	blx	r3
}
    170c:	bf00      	nop
    170e:	bd80      	pop	{r7, pc}
    1710:	000016cd 	.word	0x000016cd
    1714:	42003400 	.word	0x42003400
    1718:	20001774 	.word	0x20001774
    171c:	000027d1 	.word	0x000027d1
    1720:	000015ed 	.word	0x000015ed

00001724 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1724:	b580      	push	{r7, lr}
    1726:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1728:	4802      	ldr	r0, [pc, #8]	; (1734 <DATETIME_CLOCK_CLOCK_init+0x10>)
    172a:	4b03      	ldr	r3, [pc, #12]	; (1738 <DATETIME_CLOCK_CLOCK_init+0x14>)
    172c:	4798      	blx	r3
}
    172e:	bf00      	nop
    1730:	bd80      	pop	{r7, pc}
    1732:	bf00      	nop
    1734:	40000800 	.word	0x40000800
    1738:	00000bdf 	.word	0x00000bdf

0000173c <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    173c:	b580      	push	{r7, lr}
    173e:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1740:	4b03      	ldr	r3, [pc, #12]	; (1750 <DATETIME_CLOCK_init+0x14>)
    1742:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1744:	4903      	ldr	r1, [pc, #12]	; (1754 <DATETIME_CLOCK_init+0x18>)
    1746:	4804      	ldr	r0, [pc, #16]	; (1758 <DATETIME_CLOCK_init+0x1c>)
    1748:	4b04      	ldr	r3, [pc, #16]	; (175c <DATETIME_CLOCK_init+0x20>)
    174a:	4798      	blx	r3
}
    174c:	bf00      	nop
    174e:	bd80      	pop	{r7, pc}
    1750:	00001725 	.word	0x00001725
    1754:	40002400 	.word	0x40002400
    1758:	200018bc 	.word	0x200018bc
    175c:	000020e9 	.word	0x000020e9

00001760 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    1760:	b580      	push	{r7, lr}
    1762:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA17,
    1764:	2100      	movs	r1, #0
    1766:	2011      	movs	r0, #17
    1768:	4b07      	ldr	r3, [pc, #28]	; (1788 <I2C_HEATERS_PORT_init+0x28>)
    176a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17D_SERCOM3_PAD0);
    176c:	4907      	ldr	r1, [pc, #28]	; (178c <I2C_HEATERS_PORT_init+0x2c>)
    176e:	2011      	movs	r0, #17
    1770:	4b07      	ldr	r3, [pc, #28]	; (1790 <I2C_HEATERS_PORT_init+0x30>)
    1772:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA16,
    1774:	2100      	movs	r1, #0
    1776:	2010      	movs	r0, #16
    1778:	4b03      	ldr	r3, [pc, #12]	; (1788 <I2C_HEATERS_PORT_init+0x28>)
    177a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16D_SERCOM3_PAD1);
    177c:	4905      	ldr	r1, [pc, #20]	; (1794 <I2C_HEATERS_PORT_init+0x34>)
    177e:	2010      	movs	r0, #16
    1780:	4b03      	ldr	r3, [pc, #12]	; (1790 <I2C_HEATERS_PORT_init+0x30>)
    1782:	4798      	blx	r3
}
    1784:	bf00      	nop
    1786:	bd80      	pop	{r7, pc}
    1788:	00001339 	.word	0x00001339
    178c:	00110003 	.word	0x00110003
    1790:	0000136d 	.word	0x0000136d
    1794:	00100003 	.word	0x00100003

00001798 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    1798:	b580      	push	{r7, lr}
    179a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    179c:	2240      	movs	r2, #64	; 0x40
    179e:	2118      	movs	r1, #24
    17a0:	4806      	ldr	r0, [pc, #24]	; (17bc <I2C_HEATERS_CLOCK_init+0x24>)
    17a2:	4b07      	ldr	r3, [pc, #28]	; (17c0 <I2C_HEATERS_CLOCK_init+0x28>)
    17a4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17a6:	2243      	movs	r2, #67	; 0x43
    17a8:	2103      	movs	r1, #3
    17aa:	4804      	ldr	r0, [pc, #16]	; (17bc <I2C_HEATERS_CLOCK_init+0x24>)
    17ac:	4b04      	ldr	r3, [pc, #16]	; (17c0 <I2C_HEATERS_CLOCK_init+0x28>)
    17ae:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
    17b0:	4804      	ldr	r0, [pc, #16]	; (17c4 <I2C_HEATERS_CLOCK_init+0x2c>)
    17b2:	4b05      	ldr	r3, [pc, #20]	; (17c8 <I2C_HEATERS_CLOCK_init+0x30>)
    17b4:	4798      	blx	r3
}
    17b6:	bf00      	nop
    17b8:	bd80      	pop	{r7, pc}
    17ba:	bf00      	nop
    17bc:	40001c00 	.word	0x40001c00
    17c0:	00000b19 	.word	0x00000b19
    17c4:	40000800 	.word	0x40000800
    17c8:	00000c9f 	.word	0x00000c9f

000017cc <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    17cc:	b580      	push	{r7, lr}
    17ce:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    17d0:	4b04      	ldr	r3, [pc, #16]	; (17e4 <I2C_HEATERS_init+0x18>)
    17d2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM3);
    17d4:	4904      	ldr	r1, [pc, #16]	; (17e8 <I2C_HEATERS_init+0x1c>)
    17d6:	4805      	ldr	r0, [pc, #20]	; (17ec <I2C_HEATERS_init+0x20>)
    17d8:	4b05      	ldr	r3, [pc, #20]	; (17f0 <I2C_HEATERS_init+0x24>)
    17da:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    17dc:	4b05      	ldr	r3, [pc, #20]	; (17f4 <I2C_HEATERS_init+0x28>)
    17de:	4798      	blx	r3
}
    17e0:	bf00      	nop
    17e2:	bd80      	pop	{r7, pc}
    17e4:	00001799 	.word	0x00001799
    17e8:	41014000 	.word	0x41014000
    17ec:	20001814 	.word	0x20001814
    17f0:	000025d5 	.word	0x000025d5
    17f4:	00001761 	.word	0x00001761

000017f8 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    17f8:	b580      	push	{r7, lr}
    17fa:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    17fc:	2100      	movs	r1, #0
    17fe:	203b      	movs	r0, #59	; 0x3b
    1800:	4b11      	ldr	r3, [pc, #68]	; (1848 <SPI_TEMP_PORT_init+0x50>)
    1802:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    1804:	2102      	movs	r1, #2
    1806:	203b      	movs	r0, #59	; 0x3b
    1808:	4b10      	ldr	r3, [pc, #64]	; (184c <SPI_TEMP_PORT_init+0x54>)
    180a:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    180c:	4910      	ldr	r1, [pc, #64]	; (1850 <SPI_TEMP_PORT_init+0x58>)
    180e:	203b      	movs	r0, #59	; 0x3b
    1810:	4b10      	ldr	r3, [pc, #64]	; (1854 <SPI_TEMP_PORT_init+0x5c>)
    1812:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    1814:	2100      	movs	r1, #0
    1816:	203a      	movs	r0, #58	; 0x3a
    1818:	4b0b      	ldr	r3, [pc, #44]	; (1848 <SPI_TEMP_PORT_init+0x50>)
    181a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    181c:	2102      	movs	r1, #2
    181e:	203a      	movs	r0, #58	; 0x3a
    1820:	4b0a      	ldr	r3, [pc, #40]	; (184c <SPI_TEMP_PORT_init+0x54>)
    1822:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    1824:	490c      	ldr	r1, [pc, #48]	; (1858 <SPI_TEMP_PORT_init+0x60>)
    1826:	203a      	movs	r0, #58	; 0x3a
    1828:	4b0a      	ldr	r3, [pc, #40]	; (1854 <SPI_TEMP_PORT_init+0x5c>)
    182a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    182c:	2101      	movs	r1, #1
    182e:	203c      	movs	r0, #60	; 0x3c
    1830:	4b06      	ldr	r3, [pc, #24]	; (184c <SPI_TEMP_PORT_init+0x54>)
    1832:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    1834:	2100      	movs	r1, #0
    1836:	203c      	movs	r0, #60	; 0x3c
    1838:	4b08      	ldr	r3, [pc, #32]	; (185c <SPI_TEMP_PORT_init+0x64>)
    183a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    183c:	4908      	ldr	r1, [pc, #32]	; (1860 <SPI_TEMP_PORT_init+0x68>)
    183e:	203c      	movs	r0, #60	; 0x3c
    1840:	4b04      	ldr	r3, [pc, #16]	; (1854 <SPI_TEMP_PORT_init+0x5c>)
    1842:	4798      	blx	r3
}
    1844:	bf00      	nop
    1846:	bd80      	pop	{r7, pc}
    1848:	000013c5 	.word	0x000013c5
    184c:	0000138d 	.word	0x0000138d
    1850:	003b0003 	.word	0x003b0003
    1854:	0000136d 	.word	0x0000136d
    1858:	003a0003 	.word	0x003a0003
    185c:	00001339 	.word	0x00001339
    1860:	003c0003 	.word	0x003c0003

00001864 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1864:	b580      	push	{r7, lr}
    1866:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1868:	2245      	movs	r2, #69	; 0x45
    186a:	2122      	movs	r1, #34	; 0x22
    186c:	4806      	ldr	r0, [pc, #24]	; (1888 <SPI_TEMP_CLOCK_init+0x24>)
    186e:	4b07      	ldr	r3, [pc, #28]	; (188c <SPI_TEMP_CLOCK_init+0x28>)
    1870:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1872:	224a      	movs	r2, #74	; 0x4a
    1874:	2103      	movs	r1, #3
    1876:	4804      	ldr	r0, [pc, #16]	; (1888 <SPI_TEMP_CLOCK_init+0x24>)
    1878:	4b04      	ldr	r3, [pc, #16]	; (188c <SPI_TEMP_CLOCK_init+0x28>)
    187a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    187c:	4804      	ldr	r0, [pc, #16]	; (1890 <SPI_TEMP_CLOCK_init+0x2c>)
    187e:	4b05      	ldr	r3, [pc, #20]	; (1894 <SPI_TEMP_CLOCK_init+0x30>)
    1880:	4798      	blx	r3
}
    1882:	bf00      	nop
    1884:	bd80      	pop	{r7, pc}
    1886:	bf00      	nop
    1888:	40001c00 	.word	0x40001c00
    188c:	00000b19 	.word	0x00000b19
    1890:	40000800 	.word	0x40000800
    1894:	00000d9f 	.word	0x00000d9f

00001898 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1898:	b580      	push	{r7, lr}
    189a:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    189c:	4b05      	ldr	r3, [pc, #20]	; (18b4 <SPI_TEMP_init+0x1c>)
    189e:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    18a0:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    18a4:	4804      	ldr	r0, [pc, #16]	; (18b8 <SPI_TEMP_init+0x20>)
    18a6:	4b05      	ldr	r3, [pc, #20]	; (18bc <SPI_TEMP_init+0x24>)
    18a8:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    18aa:	4b05      	ldr	r3, [pc, #20]	; (18c0 <SPI_TEMP_init+0x28>)
    18ac:	4798      	blx	r3
}
    18ae:	bf00      	nop
    18b0:	bd80      	pop	{r7, pc}
    18b2:	bf00      	nop
    18b4:	00001865 	.word	0x00001865
    18b8:	2000171c 	.word	0x2000171c
    18bc:	000028e1 	.word	0x000028e1
    18c0:	000017f9 	.word	0x000017f9

000018c4 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    18c4:	b580      	push	{r7, lr}
    18c6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    18c8:	2100      	movs	r1, #0
    18ca:	2017      	movs	r0, #23
    18cc:	4b07      	ldr	r3, [pc, #28]	; (18ec <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    18ce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    18d0:	4907      	ldr	r1, [pc, #28]	; (18f0 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    18d2:	2017      	movs	r0, #23
    18d4:	4b07      	ldr	r3, [pc, #28]	; (18f4 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    18d6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    18d8:	2100      	movs	r1, #0
    18da:	2016      	movs	r0, #22
    18dc:	4b03      	ldr	r3, [pc, #12]	; (18ec <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    18de:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    18e0:	4905      	ldr	r1, [pc, #20]	; (18f8 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    18e2:	2016      	movs	r0, #22
    18e4:	4b03      	ldr	r3, [pc, #12]	; (18f4 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    18e6:	4798      	blx	r3
}
    18e8:	bf00      	nop
    18ea:	bd80      	pop	{r7, pc}
    18ec:	00001339 	.word	0x00001339
    18f0:	00170003 	.word	0x00170003
    18f4:	0000136d 	.word	0x0000136d
    18f8:	00160003 	.word	0x00160003

000018fc <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    18fc:	b580      	push	{r7, lr}
    18fe:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1900:	2244      	movs	r2, #68	; 0x44
    1902:	2123      	movs	r1, #35	; 0x23
    1904:	4806      	ldr	r0, [pc, #24]	; (1920 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    1906:	4b07      	ldr	r3, [pc, #28]	; (1924 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    1908:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    190a:	224a      	movs	r2, #74	; 0x4a
    190c:	2103      	movs	r1, #3
    190e:	4804      	ldr	r0, [pc, #16]	; (1920 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    1910:	4b04      	ldr	r3, [pc, #16]	; (1924 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    1912:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    1914:	4804      	ldr	r0, [pc, #16]	; (1928 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    1916:	4b05      	ldr	r3, [pc, #20]	; (192c <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    1918:	4798      	blx	r3
}
    191a:	bf00      	nop
    191c:	bd80      	pop	{r7, pc}
    191e:	bf00      	nop
    1920:	40001c00 	.word	0x40001c00
    1924:	00000b19 	.word	0x00000b19
    1928:	40000800 	.word	0x40000800
    192c:	00000dbf 	.word	0x00000dbf

00001930 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    1930:	b580      	push	{r7, lr}
    1932:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    1934:	4b04      	ldr	r3, [pc, #16]	; (1948 <I2C_FLAPPER_VALVE_init+0x18>)
    1936:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    1938:	4904      	ldr	r1, [pc, #16]	; (194c <I2C_FLAPPER_VALVE_init+0x1c>)
    193a:	4805      	ldr	r0, [pc, #20]	; (1950 <I2C_FLAPPER_VALVE_init+0x20>)
    193c:	4b05      	ldr	r3, [pc, #20]	; (1954 <I2C_FLAPPER_VALVE_init+0x24>)
    193e:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    1940:	4b05      	ldr	r3, [pc, #20]	; (1958 <I2C_FLAPPER_VALVE_init+0x28>)
    1942:	4798      	blx	r3
}
    1944:	bf00      	nop
    1946:	bd80      	pop	{r7, pc}
    1948:	000018fd 	.word	0x000018fd
    194c:	43000400 	.word	0x43000400
    1950:	200017b8 	.word	0x200017b8
    1954:	000025d5 	.word	0x000025d5
    1958:	000018c5 	.word	0x000018c5

0000195c <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    195c:	b580      	push	{r7, lr}
    195e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1960:	2100      	movs	r1, #0
    1962:	2044      	movs	r0, #68	; 0x44
    1964:	4b11      	ldr	r3, [pc, #68]	; (19ac <SPI_HI3593_PORT_init+0x50>)
    1966:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1968:	2102      	movs	r1, #2
    196a:	2044      	movs	r0, #68	; 0x44
    196c:	4b10      	ldr	r3, [pc, #64]	; (19b0 <SPI_HI3593_PORT_init+0x54>)
    196e:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1970:	4910      	ldr	r1, [pc, #64]	; (19b4 <SPI_HI3593_PORT_init+0x58>)
    1972:	2044      	movs	r0, #68	; 0x44
    1974:	4b10      	ldr	r3, [pc, #64]	; (19b8 <SPI_HI3593_PORT_init+0x5c>)
    1976:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1978:	2100      	movs	r1, #0
    197a:	2045      	movs	r0, #69	; 0x45
    197c:	4b0b      	ldr	r3, [pc, #44]	; (19ac <SPI_HI3593_PORT_init+0x50>)
    197e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1980:	2102      	movs	r1, #2
    1982:	2045      	movs	r0, #69	; 0x45
    1984:	4b0a      	ldr	r3, [pc, #40]	; (19b0 <SPI_HI3593_PORT_init+0x54>)
    1986:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1988:	490c      	ldr	r1, [pc, #48]	; (19bc <SPI_HI3593_PORT_init+0x60>)
    198a:	2045      	movs	r0, #69	; 0x45
    198c:	4b0a      	ldr	r3, [pc, #40]	; (19b8 <SPI_HI3593_PORT_init+0x5c>)
    198e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1990:	2101      	movs	r1, #1
    1992:	2047      	movs	r0, #71	; 0x47
    1994:	4b06      	ldr	r3, [pc, #24]	; (19b0 <SPI_HI3593_PORT_init+0x54>)
    1996:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1998:	2100      	movs	r1, #0
    199a:	2047      	movs	r0, #71	; 0x47
    199c:	4b08      	ldr	r3, [pc, #32]	; (19c0 <SPI_HI3593_PORT_init+0x64>)
    199e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    19a0:	4908      	ldr	r1, [pc, #32]	; (19c4 <SPI_HI3593_PORT_init+0x68>)
    19a2:	2047      	movs	r0, #71	; 0x47
    19a4:	4b04      	ldr	r3, [pc, #16]	; (19b8 <SPI_HI3593_PORT_init+0x5c>)
    19a6:	4798      	blx	r3
}
    19a8:	bf00      	nop
    19aa:	bd80      	pop	{r7, pc}
    19ac:	000013c5 	.word	0x000013c5
    19b0:	0000138d 	.word	0x0000138d
    19b4:	00440002 	.word	0x00440002
    19b8:	0000136d 	.word	0x0000136d
    19bc:	00450002 	.word	0x00450002
    19c0:	00001339 	.word	0x00001339
    19c4:	00470002 	.word	0x00470002

000019c8 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    19c8:	b580      	push	{r7, lr}
    19ca:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19cc:	2242      	movs	r2, #66	; 0x42
    19ce:	2124      	movs	r1, #36	; 0x24
    19d0:	4806      	ldr	r0, [pc, #24]	; (19ec <SPI_HI3593_CLOCK_init+0x24>)
    19d2:	4b07      	ldr	r3, [pc, #28]	; (19f0 <SPI_HI3593_CLOCK_init+0x28>)
    19d4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19d6:	224a      	movs	r2, #74	; 0x4a
    19d8:	2103      	movs	r1, #3
    19da:	4804      	ldr	r0, [pc, #16]	; (19ec <SPI_HI3593_CLOCK_init+0x24>)
    19dc:	4b04      	ldr	r3, [pc, #16]	; (19f0 <SPI_HI3593_CLOCK_init+0x28>)
    19de:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    19e0:	4804      	ldr	r0, [pc, #16]	; (19f4 <SPI_HI3593_CLOCK_init+0x2c>)
    19e2:	4b05      	ldr	r3, [pc, #20]	; (19f8 <SPI_HI3593_CLOCK_init+0x30>)
    19e4:	4798      	blx	r3
}
    19e6:	bf00      	nop
    19e8:	bd80      	pop	{r7, pc}
    19ea:	bf00      	nop
    19ec:	40001c00 	.word	0x40001c00
    19f0:	00000b19 	.word	0x00000b19
    19f4:	40000800 	.word	0x40000800
    19f8:	00000ddf 	.word	0x00000ddf

000019fc <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    19fc:	b580      	push	{r7, lr}
    19fe:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1a00:	4b04      	ldr	r3, [pc, #16]	; (1a14 <SPI_HI3593_init+0x18>)
    1a02:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1a04:	4904      	ldr	r1, [pc, #16]	; (1a18 <SPI_HI3593_init+0x1c>)
    1a06:	4805      	ldr	r0, [pc, #20]	; (1a1c <SPI_HI3593_init+0x20>)
    1a08:	4b05      	ldr	r3, [pc, #20]	; (1a20 <SPI_HI3593_init+0x24>)
    1a0a:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1a0c:	4b05      	ldr	r3, [pc, #20]	; (1a24 <SPI_HI3593_init+0x28>)
    1a0e:	4798      	blx	r3
}
    1a10:	bf00      	nop
    1a12:	bd80      	pop	{r7, pc}
    1a14:	000019c9 	.word	0x000019c9
    1a18:	43000800 	.word	0x43000800
    1a1c:	20001704 	.word	0x20001704
    1a20:	000028e1 	.word	0x000028e1
    1a24:	0000195d 	.word	0x0000195d

00001a28 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    1a28:	b580      	push	{r7, lr}
    1a2a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1a2c:	2100      	movs	r1, #0
    1a2e:	2068      	movs	r0, #104	; 0x68
    1a30:	4b07      	ldr	r3, [pc, #28]	; (1a50 <I2C_FANS_PORT_init+0x28>)
    1a32:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1a34:	4907      	ldr	r1, [pc, #28]	; (1a54 <I2C_FANS_PORT_init+0x2c>)
    1a36:	2068      	movs	r0, #104	; 0x68
    1a38:	4b07      	ldr	r3, [pc, #28]	; (1a58 <I2C_FANS_PORT_init+0x30>)
    1a3a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1a3c:	2100      	movs	r1, #0
    1a3e:	2069      	movs	r0, #105	; 0x69
    1a40:	4b03      	ldr	r3, [pc, #12]	; (1a50 <I2C_FANS_PORT_init+0x28>)
    1a42:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1a44:	4905      	ldr	r1, [pc, #20]	; (1a5c <I2C_FANS_PORT_init+0x34>)
    1a46:	2069      	movs	r0, #105	; 0x69
    1a48:	4b03      	ldr	r3, [pc, #12]	; (1a58 <I2C_FANS_PORT_init+0x30>)
    1a4a:	4798      	blx	r3
}
    1a4c:	bf00      	nop
    1a4e:	bd80      	pop	{r7, pc}
    1a50:	00001339 	.word	0x00001339
    1a54:	00680002 	.word	0x00680002
    1a58:	0000136d 	.word	0x0000136d
    1a5c:	00690002 	.word	0x00690002

00001a60 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    1a60:	b580      	push	{r7, lr}
    1a62:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a64:	2244      	movs	r2, #68	; 0x44
    1a66:	2125      	movs	r1, #37	; 0x25
    1a68:	4806      	ldr	r0, [pc, #24]	; (1a84 <I2C_FANS_CLOCK_init+0x24>)
    1a6a:	4b07      	ldr	r3, [pc, #28]	; (1a88 <I2C_FANS_CLOCK_init+0x28>)
    1a6c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a6e:	224a      	movs	r2, #74	; 0x4a
    1a70:	2103      	movs	r1, #3
    1a72:	4804      	ldr	r0, [pc, #16]	; (1a84 <I2C_FANS_CLOCK_init+0x24>)
    1a74:	4b04      	ldr	r3, [pc, #16]	; (1a88 <I2C_FANS_CLOCK_init+0x28>)
    1a76:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1a78:	4804      	ldr	r0, [pc, #16]	; (1a8c <I2C_FANS_CLOCK_init+0x2c>)
    1a7a:	4b05      	ldr	r3, [pc, #20]	; (1a90 <I2C_FANS_CLOCK_init+0x30>)
    1a7c:	4798      	blx	r3
}
    1a7e:	bf00      	nop
    1a80:	bd80      	pop	{r7, pc}
    1a82:	bf00      	nop
    1a84:	40001c00 	.word	0x40001c00
    1a88:	00000b19 	.word	0x00000b19
    1a8c:	40000800 	.word	0x40000800
    1a90:	00000dff 	.word	0x00000dff

00001a94 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    1a94:	b580      	push	{r7, lr}
    1a96:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    1a98:	4b04      	ldr	r3, [pc, #16]	; (1aac <I2C_FANS_init+0x18>)
    1a9a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    1a9c:	4904      	ldr	r1, [pc, #16]	; (1ab0 <I2C_FANS_init+0x1c>)
    1a9e:	4805      	ldr	r0, [pc, #20]	; (1ab4 <I2C_FANS_init+0x20>)
    1aa0:	4b05      	ldr	r3, [pc, #20]	; (1ab8 <I2C_FANS_init+0x24>)
    1aa2:	4798      	blx	r3
	I2C_FANS_PORT_init();
    1aa4:	4b05      	ldr	r3, [pc, #20]	; (1abc <I2C_FANS_init+0x28>)
    1aa6:	4798      	blx	r3
}
    1aa8:	bf00      	nop
    1aaa:	bd80      	pop	{r7, pc}
    1aac:	00001a61 	.word	0x00001a61
    1ab0:	43000c00 	.word	0x43000c00
    1ab4:	20001734 	.word	0x20001734
    1ab8:	000025d5 	.word	0x000025d5
    1abc:	00001a29 	.word	0x00001a29

00001ac0 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1ac0:	b580      	push	{r7, lr}
    1ac2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1ac4:	4808      	ldr	r0, [pc, #32]	; (1ae8 <TIMER_USB_init+0x28>)
    1ac6:	4b09      	ldr	r3, [pc, #36]	; (1aec <TIMER_USB_init+0x2c>)
    1ac8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1aca:	2243      	movs	r2, #67	; 0x43
    1acc:	2109      	movs	r1, #9
    1ace:	4808      	ldr	r0, [pc, #32]	; (1af0 <TIMER_USB_init+0x30>)
    1ad0:	4b08      	ldr	r3, [pc, #32]	; (1af4 <TIMER_USB_init+0x34>)
    1ad2:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    1ad4:	4b08      	ldr	r3, [pc, #32]	; (1af8 <TIMER_USB_init+0x38>)
    1ad6:	4798      	blx	r3
    1ad8:	4603      	mov	r3, r0
    1ada:	461a      	mov	r2, r3
    1adc:	4907      	ldr	r1, [pc, #28]	; (1afc <TIMER_USB_init+0x3c>)
    1ade:	4808      	ldr	r0, [pc, #32]	; (1b00 <TIMER_USB_init+0x40>)
    1ae0:	4b08      	ldr	r3, [pc, #32]	; (1b04 <TIMER_USB_init+0x44>)
    1ae2:	4798      	blx	r3
}
    1ae4:	bf00      	nop
    1ae6:	bd80      	pop	{r7, pc}
    1ae8:	40000800 	.word	0x40000800
    1aec:	00000c1f 	.word	0x00000c1f
    1af0:	40001c00 	.word	0x40001c00
    1af4:	00000b19 	.word	0x00000b19
    1af8:	000082fd 	.word	0x000082fd
    1afc:	40003800 	.word	0x40003800
    1b00:	2000187c 	.word	0x2000187c
    1b04:	00002ab1 	.word	0x00002ab1

00001b08 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1b08:	b580      	push	{r7, lr}
    1b0a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1b0c:	4808      	ldr	r0, [pc, #32]	; (1b30 <TIMER_ARINC_init+0x28>)
    1b0e:	4b09      	ldr	r3, [pc, #36]	; (1b34 <TIMER_ARINC_init+0x2c>)
    1b10:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b12:	2244      	movs	r2, #68	; 0x44
    1b14:	211a      	movs	r1, #26
    1b16:	4808      	ldr	r0, [pc, #32]	; (1b38 <TIMER_ARINC_init+0x30>)
    1b18:	4b08      	ldr	r3, [pc, #32]	; (1b3c <TIMER_ARINC_init+0x34>)
    1b1a:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1b1c:	4b08      	ldr	r3, [pc, #32]	; (1b40 <TIMER_ARINC_init+0x38>)
    1b1e:	4798      	blx	r3
    1b20:	4603      	mov	r3, r0
    1b22:	461a      	mov	r2, r3
    1b24:	4907      	ldr	r1, [pc, #28]	; (1b44 <TIMER_ARINC_init+0x3c>)
    1b26:	4808      	ldr	r0, [pc, #32]	; (1b48 <TIMER_ARINC_init+0x40>)
    1b28:	4b08      	ldr	r3, [pc, #32]	; (1b4c <TIMER_ARINC_init+0x44>)
    1b2a:	4798      	blx	r3
}
    1b2c:	bf00      	nop
    1b2e:	bd80      	pop	{r7, pc}
    1b30:	40000800 	.word	0x40000800
    1b34:	00000cff 	.word	0x00000cff
    1b38:	40001c00 	.word	0x40001c00
    1b3c:	00000b19 	.word	0x00000b19
    1b40:	000082fd 	.word	0x000082fd
    1b44:	4101a000 	.word	0x4101a000
    1b48:	2000185c 	.word	0x2000185c
    1b4c:	00002ab1 	.word	0x00002ab1

00001b50 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    1b50:	b580      	push	{r7, lr}
    1b52:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1b54:	4808      	ldr	r0, [pc, #32]	; (1b78 <TIMER_MAINTENANCE_init+0x28>)
    1b56:	4b09      	ldr	r3, [pc, #36]	; (1b7c <TIMER_MAINTENANCE_init+0x2c>)
    1b58:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b5a:	2246      	movs	r2, #70	; 0x46
    1b5c:	211e      	movs	r1, #30
    1b5e:	4808      	ldr	r0, [pc, #32]	; (1b80 <TIMER_MAINTENANCE_init+0x30>)
    1b60:	4b08      	ldr	r3, [pc, #32]	; (1b84 <TIMER_MAINTENANCE_init+0x34>)
    1b62:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1b64:	4b08      	ldr	r3, [pc, #32]	; (1b88 <TIMER_MAINTENANCE_init+0x38>)
    1b66:	4798      	blx	r3
    1b68:	4603      	mov	r3, r0
    1b6a:	461a      	mov	r2, r3
    1b6c:	4907      	ldr	r1, [pc, #28]	; (1b8c <TIMER_MAINTENANCE_init+0x3c>)
    1b6e:	4808      	ldr	r0, [pc, #32]	; (1b90 <TIMER_MAINTENANCE_init+0x40>)
    1b70:	4b08      	ldr	r3, [pc, #32]	; (1b94 <TIMER_MAINTENANCE_init+0x44>)
    1b72:	4798      	blx	r3
}
    1b74:	bf00      	nop
    1b76:	bd80      	pop	{r7, pc}
    1b78:	40000800 	.word	0x40000800
    1b7c:	00000d3f 	.word	0x00000d3f
    1b80:	40001c00 	.word	0x40001c00
    1b84:	00000b19 	.word	0x00000b19
    1b88:	000082fd 	.word	0x000082fd
    1b8c:	42001400 	.word	0x42001400
    1b90:	20001754 	.word	0x20001754
    1b94:	00002ab1 	.word	0x00002ab1

00001b98 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1b98:	b580      	push	{r7, lr}
    1b9a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1b9c:	4808      	ldr	r0, [pc, #32]	; (1bc0 <TIMER_INTERFACE_init+0x28>)
    1b9e:	4b09      	ldr	r3, [pc, #36]	; (1bc4 <TIMER_INTERFACE_init+0x2c>)
    1ba0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ba2:	2246      	movs	r2, #70	; 0x46
    1ba4:	211e      	movs	r1, #30
    1ba6:	4808      	ldr	r0, [pc, #32]	; (1bc8 <TIMER_INTERFACE_init+0x30>)
    1ba8:	4b08      	ldr	r3, [pc, #32]	; (1bcc <TIMER_INTERFACE_init+0x34>)
    1baa:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1bac:	4b08      	ldr	r3, [pc, #32]	; (1bd0 <TIMER_INTERFACE_init+0x38>)
    1bae:	4798      	blx	r3
    1bb0:	4603      	mov	r3, r0
    1bb2:	461a      	mov	r2, r3
    1bb4:	4907      	ldr	r1, [pc, #28]	; (1bd4 <TIMER_INTERFACE_init+0x3c>)
    1bb6:	4808      	ldr	r0, [pc, #32]	; (1bd8 <TIMER_INTERFACE_init+0x40>)
    1bb8:	4b08      	ldr	r3, [pc, #32]	; (1bdc <TIMER_INTERFACE_init+0x44>)
    1bba:	4798      	blx	r3
}
    1bbc:	bf00      	nop
    1bbe:	bd80      	pop	{r7, pc}
    1bc0:	40000800 	.word	0x40000800
    1bc4:	00000d5f 	.word	0x00000d5f
    1bc8:	40001c00 	.word	0x40001c00
    1bcc:	00000b19 	.word	0x00000b19
    1bd0:	000082fd 	.word	0x000082fd
    1bd4:	42001800 	.word	0x42001800
    1bd8:	20001798 	.word	0x20001798
    1bdc:	00002ab1 	.word	0x00002ab1

00001be0 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1be0:	b580      	push	{r7, lr}
    1be2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    1be4:	4808      	ldr	r0, [pc, #32]	; (1c08 <TIMER_EVENT_init+0x28>)
    1be6:	4b09      	ldr	r3, [pc, #36]	; (1c0c <TIMER_EVENT_init+0x2c>)
    1be8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1bea:	2246      	movs	r2, #70	; 0x46
    1bec:	2127      	movs	r1, #39	; 0x27
    1bee:	4808      	ldr	r0, [pc, #32]	; (1c10 <TIMER_EVENT_init+0x30>)
    1bf0:	4b08      	ldr	r3, [pc, #32]	; (1c14 <TIMER_EVENT_init+0x34>)
    1bf2:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    1bf4:	4b08      	ldr	r3, [pc, #32]	; (1c18 <TIMER_EVENT_init+0x38>)
    1bf6:	4798      	blx	r3
    1bf8:	4603      	mov	r3, r0
    1bfa:	461a      	mov	r2, r3
    1bfc:	4907      	ldr	r1, [pc, #28]	; (1c1c <TIMER_EVENT_init+0x3c>)
    1bfe:	4808      	ldr	r0, [pc, #32]	; (1c20 <TIMER_EVENT_init+0x40>)
    1c00:	4b08      	ldr	r3, [pc, #32]	; (1c24 <TIMER_EVENT_init+0x44>)
    1c02:	4798      	blx	r3
}
    1c04:	bf00      	nop
    1c06:	bd80      	pop	{r7, pc}
    1c08:	40000800 	.word	0x40000800
    1c0c:	00000e1f 	.word	0x00000e1f
    1c10:	40001c00 	.word	0x40001c00
    1c14:	00000b19 	.word	0x00000b19
    1c18:	000082fd 	.word	0x000082fd
    1c1c:	43001400 	.word	0x43001400
    1c20:	20001778 	.word	0x20001778
    1c24:	00002ab1 	.word	0x00002ab1

00001c28 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1c28:	b480      	push	{r7}
    1c2a:	af00      	add	r7, sp, #0
}
    1c2c:	bf00      	nop
    1c2e:	46bd      	mov	sp, r7
    1c30:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c34:	4770      	bx	lr
	...

00001c38 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1c38:	b580      	push	{r7, lr}
    1c3a:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1c3c:	4804      	ldr	r0, [pc, #16]	; (1c50 <LIVE_PULSE_CLOCK_init+0x18>)
    1c3e:	4b05      	ldr	r3, [pc, #20]	; (1c54 <LIVE_PULSE_CLOCK_init+0x1c>)
    1c40:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c42:	2240      	movs	r2, #64	; 0x40
    1c44:	2127      	movs	r1, #39	; 0x27
    1c46:	4804      	ldr	r0, [pc, #16]	; (1c58 <LIVE_PULSE_CLOCK_init+0x20>)
    1c48:	4b04      	ldr	r3, [pc, #16]	; (1c5c <LIVE_PULSE_CLOCK_init+0x24>)
    1c4a:	4798      	blx	r3
}
    1c4c:	bf00      	nop
    1c4e:	bd80      	pop	{r7, pc}
    1c50:	40000800 	.word	0x40000800
    1c54:	00000e3f 	.word	0x00000e3f
    1c58:	40001c00 	.word	0x40001c00
    1c5c:	00000b19 	.word	0x00000b19

00001c60 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1c60:	b580      	push	{r7, lr}
    1c62:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1c64:	4b06      	ldr	r3, [pc, #24]	; (1c80 <LIVE_PULSE_init+0x20>)
    1c66:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1c68:	4b06      	ldr	r3, [pc, #24]	; (1c84 <LIVE_PULSE_init+0x24>)
    1c6a:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1c6c:	4b06      	ldr	r3, [pc, #24]	; (1c88 <LIVE_PULSE_init+0x28>)
    1c6e:	4798      	blx	r3
    1c70:	4603      	mov	r3, r0
    1c72:	461a      	mov	r2, r3
    1c74:	4905      	ldr	r1, [pc, #20]	; (1c8c <LIVE_PULSE_init+0x2c>)
    1c76:	4806      	ldr	r0, [pc, #24]	; (1c90 <LIVE_PULSE_init+0x30>)
    1c78:	4b06      	ldr	r3, [pc, #24]	; (1c94 <LIVE_PULSE_init+0x34>)
    1c7a:	4798      	blx	r3
}
    1c7c:	bf00      	nop
    1c7e:	bd80      	pop	{r7, pc}
    1c80:	00001c39 	.word	0x00001c39
    1c84:	00001c29 	.word	0x00001c29
    1c88:	00008311 	.word	0x00008311
    1c8c:	43001800 	.word	0x43001800
    1c90:	200017d8 	.word	0x200017d8
    1c94:	000026d1 	.word	0x000026d1

00001c98 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    1c98:	b580      	push	{r7, lr}
    1c9a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    1c9c:	4804      	ldr	r0, [pc, #16]	; (1cb0 <TIMER_HVAC_CLOCK_init+0x18>)
    1c9e:	4b05      	ldr	r3, [pc, #20]	; (1cb4 <TIMER_HVAC_CLOCK_init+0x1c>)
    1ca0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ca2:	2244      	movs	r2, #68	; 0x44
    1ca4:	2119      	movs	r1, #25
    1ca6:	4804      	ldr	r0, [pc, #16]	; (1cb8 <TIMER_HVAC_CLOCK_init+0x20>)
    1ca8:	4b04      	ldr	r3, [pc, #16]	; (1cbc <TIMER_HVAC_CLOCK_init+0x24>)
    1caa:	4798      	blx	r3
}
    1cac:	bf00      	nop
    1cae:	bd80      	pop	{r7, pc}
    1cb0:	40000800 	.word	0x40000800
    1cb4:	00000cbf 	.word	0x00000cbf
    1cb8:	40001c00 	.word	0x40001c00
    1cbc:	00000b19 	.word	0x00000b19

00001cc0 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    1cc0:	b580      	push	{r7, lr}
    1cc2:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    1cc4:	4b05      	ldr	r3, [pc, #20]	; (1cdc <TIMER_HVAC_init+0x1c>)
    1cc6:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    1cc8:	4b05      	ldr	r3, [pc, #20]	; (1ce0 <TIMER_HVAC_init+0x20>)
    1cca:	4798      	blx	r3
    1ccc:	4603      	mov	r3, r0
    1cce:	461a      	mov	r2, r3
    1cd0:	4904      	ldr	r1, [pc, #16]	; (1ce4 <TIMER_HVAC_init+0x24>)
    1cd2:	4805      	ldr	r0, [pc, #20]	; (1ce8 <TIMER_HVAC_init+0x28>)
    1cd4:	4b05      	ldr	r3, [pc, #20]	; (1cec <TIMER_HVAC_init+0x2c>)
    1cd6:	4798      	blx	r3
}
    1cd8:	bf00      	nop
    1cda:	bd80      	pop	{r7, pc}
    1cdc:	00001c99 	.word	0x00001c99
    1ce0:	000076a1 	.word	0x000076a1
    1ce4:	41016000 	.word	0x41016000
    1ce8:	2000189c 	.word	0x2000189c
    1cec:	00002ab1 	.word	0x00002ab1

00001cf0 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    1cf0:	b580      	push	{r7, lr}
    1cf2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    1cf4:	4804      	ldr	r0, [pc, #16]	; (1d08 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    1cf6:	4b05      	ldr	r3, [pc, #20]	; (1d0c <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    1cf8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1cfa:	2244      	movs	r2, #68	; 0x44
    1cfc:	2119      	movs	r1, #25
    1cfe:	4804      	ldr	r0, [pc, #16]	; (1d10 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    1d00:	4b04      	ldr	r3, [pc, #16]	; (1d14 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    1d02:	4798      	blx	r3
}
    1d04:	bf00      	nop
    1d06:	bd80      	pop	{r7, pc}
    1d08:	40000800 	.word	0x40000800
    1d0c:	00000cdf 	.word	0x00000cdf
    1d10:	40001c00 	.word	0x40001c00
    1d14:	00000b19 	.word	0x00000b19

00001d18 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    1d18:	b580      	push	{r7, lr}
    1d1a:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    1d1c:	4b05      	ldr	r3, [pc, #20]	; (1d34 <TIMER_TEMPERATURES_init+0x1c>)
    1d1e:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    1d20:	4b05      	ldr	r3, [pc, #20]	; (1d38 <TIMER_TEMPERATURES_init+0x20>)
    1d22:	4798      	blx	r3
    1d24:	4603      	mov	r3, r0
    1d26:	461a      	mov	r2, r3
    1d28:	4904      	ldr	r1, [pc, #16]	; (1d3c <TIMER_TEMPERATURES_init+0x24>)
    1d2a:	4805      	ldr	r0, [pc, #20]	; (1d40 <TIMER_TEMPERATURES_init+0x28>)
    1d2c:	4b05      	ldr	r3, [pc, #20]	; (1d44 <TIMER_TEMPERATURES_init+0x2c>)
    1d2e:	4798      	blx	r3
}
    1d30:	bf00      	nop
    1d32:	bd80      	pop	{r7, pc}
    1d34:	00001cf1 	.word	0x00001cf1
    1d38:	000076a1 	.word	0x000076a1
    1d3c:	41018000 	.word	0x41018000
    1d40:	200016e4 	.word	0x200016e4
    1d44:	00002ab1 	.word	0x00002ab1

00001d48 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    1d48:	b580      	push	{r7, lr}
    1d4a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    1d4c:	4804      	ldr	r0, [pc, #16]	; (1d60 <TIMER_CCU_CLOCK_init+0x18>)
    1d4e:	4b05      	ldr	r3, [pc, #20]	; (1d64 <TIMER_CCU_CLOCK_init+0x1c>)
    1d50:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d52:	2240      	movs	r2, #64	; 0x40
    1d54:	211d      	movs	r1, #29
    1d56:	4804      	ldr	r0, [pc, #16]	; (1d68 <TIMER_CCU_CLOCK_init+0x20>)
    1d58:	4b04      	ldr	r3, [pc, #16]	; (1d6c <TIMER_CCU_CLOCK_init+0x24>)
    1d5a:	4798      	blx	r3
}
    1d5c:	bf00      	nop
    1d5e:	bd80      	pop	{r7, pc}
    1d60:	40000800 	.word	0x40000800
    1d64:	00000d1f 	.word	0x00000d1f
    1d68:	40001c00 	.word	0x40001c00
    1d6c:	00000b19 	.word	0x00000b19

00001d70 <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    1d70:	b580      	push	{r7, lr}
    1d72:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    1d74:	4b05      	ldr	r3, [pc, #20]	; (1d8c <TIMER_CCU_init+0x1c>)
    1d76:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    1d78:	4b05      	ldr	r3, [pc, #20]	; (1d90 <TIMER_CCU_init+0x20>)
    1d7a:	4798      	blx	r3
    1d7c:	4603      	mov	r3, r0
    1d7e:	461a      	mov	r2, r3
    1d80:	4904      	ldr	r1, [pc, #16]	; (1d94 <TIMER_CCU_init+0x24>)
    1d82:	4805      	ldr	r0, [pc, #20]	; (1d98 <TIMER_CCU_init+0x28>)
    1d84:	4b05      	ldr	r3, [pc, #20]	; (1d9c <TIMER_CCU_init+0x2c>)
    1d86:	4798      	blx	r3
}
    1d88:	bf00      	nop
    1d8a:	bd80      	pop	{r7, pc}
    1d8c:	00001d49 	.word	0x00001d49
    1d90:	000076a1 	.word	0x000076a1
    1d94:	42000c00 	.word	0x42000c00
    1d98:	200017f4 	.word	0x200017f4
    1d9c:	00002ab1 	.word	0x00002ab1

00001da0 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1da0:	b580      	push	{r7, lr}
    1da2:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1da4:	2102      	movs	r1, #2
    1da6:	2018      	movs	r0, #24
    1da8:	4b0f      	ldr	r3, [pc, #60]	; (1de8 <CDCUSB_PORT_init+0x48>)
    1daa:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1dac:	2100      	movs	r1, #0
    1dae:	2018      	movs	r0, #24
    1db0:	4b0e      	ldr	r3, [pc, #56]	; (1dec <CDCUSB_PORT_init+0x4c>)
    1db2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1db4:	2100      	movs	r1, #0
    1db6:	2018      	movs	r0, #24
    1db8:	4b0d      	ldr	r3, [pc, #52]	; (1df0 <CDCUSB_PORT_init+0x50>)
    1dba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1dbc:	490d      	ldr	r1, [pc, #52]	; (1df4 <CDCUSB_PORT_init+0x54>)
    1dbe:	2018      	movs	r0, #24
    1dc0:	4b0d      	ldr	r3, [pc, #52]	; (1df8 <CDCUSB_PORT_init+0x58>)
    1dc2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1dc4:	2102      	movs	r1, #2
    1dc6:	2019      	movs	r0, #25
    1dc8:	4b07      	ldr	r3, [pc, #28]	; (1de8 <CDCUSB_PORT_init+0x48>)
    1dca:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1dcc:	2100      	movs	r1, #0
    1dce:	2019      	movs	r0, #25
    1dd0:	4b06      	ldr	r3, [pc, #24]	; (1dec <CDCUSB_PORT_init+0x4c>)
    1dd2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1dd4:	2100      	movs	r1, #0
    1dd6:	2019      	movs	r0, #25
    1dd8:	4b05      	ldr	r3, [pc, #20]	; (1df0 <CDCUSB_PORT_init+0x50>)
    1dda:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1ddc:	4907      	ldr	r1, [pc, #28]	; (1dfc <CDCUSB_PORT_init+0x5c>)
    1dde:	2019      	movs	r0, #25
    1de0:	4b05      	ldr	r3, [pc, #20]	; (1df8 <CDCUSB_PORT_init+0x58>)
    1de2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1de4:	bf00      	nop
    1de6:	bd80      	pop	{r7, pc}
    1de8:	0000138d 	.word	0x0000138d
    1dec:	000013c5 	.word	0x000013c5
    1df0:	00001339 	.word	0x00001339
    1df4:	00180007 	.word	0x00180007
    1df8:	0000136d 	.word	0x0000136d
    1dfc:	00190007 	.word	0x00190007

00001e00 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    1e00:	b580      	push	{r7, lr}
    1e02:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1e04:	2242      	movs	r2, #66	; 0x42
    1e06:	210a      	movs	r1, #10
    1e08:	4805      	ldr	r0, [pc, #20]	; (1e20 <CDCUSB_CLOCK_init+0x20>)
    1e0a:	4b06      	ldr	r3, [pc, #24]	; (1e24 <CDCUSB_CLOCK_init+0x24>)
    1e0c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    1e0e:	4806      	ldr	r0, [pc, #24]	; (1e28 <CDCUSB_CLOCK_init+0x28>)
    1e10:	4b06      	ldr	r3, [pc, #24]	; (1e2c <CDCUSB_CLOCK_init+0x2c>)
    1e12:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1e14:	4804      	ldr	r0, [pc, #16]	; (1e28 <CDCUSB_CLOCK_init+0x28>)
    1e16:	4b06      	ldr	r3, [pc, #24]	; (1e30 <CDCUSB_CLOCK_init+0x30>)
    1e18:	4798      	blx	r3
}
    1e1a:	bf00      	nop
    1e1c:	bd80      	pop	{r7, pc}
    1e1e:	bf00      	nop
    1e20:	40001c00 	.word	0x40001c00
    1e24:	00000b19 	.word	0x00000b19
    1e28:	40000800 	.word	0x40000800
    1e2c:	00000b3f 	.word	0x00000b3f
    1e30:	00000c3f 	.word	0x00000c3f

00001e34 <CDCUSB_init>:

void CDCUSB_init(void)
{
    1e34:	b580      	push	{r7, lr}
    1e36:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1e38:	4b03      	ldr	r3, [pc, #12]	; (1e48 <CDCUSB_init+0x14>)
    1e3a:	4798      	blx	r3
	usb_d_init();
    1e3c:	4b03      	ldr	r3, [pc, #12]	; (1e4c <CDCUSB_init+0x18>)
    1e3e:	4798      	blx	r3
	CDCUSB_PORT_init();
    1e40:	4b03      	ldr	r3, [pc, #12]	; (1e50 <CDCUSB_init+0x1c>)
    1e42:	4798      	blx	r3
}
    1e44:	bf00      	nop
    1e46:	bd80      	pop	{r7, pc}
    1e48:	00001e01 	.word	0x00001e01
    1e4c:	0000330d 	.word	0x0000330d
    1e50:	00001da1 	.word	0x00001da1

00001e54 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1e54:	b580      	push	{r7, lr}
    1e56:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1e58:	4802      	ldr	r0, [pc, #8]	; (1e64 <WATCHDOG_CLOCK_init+0x10>)
    1e5a:	4b03      	ldr	r3, [pc, #12]	; (1e68 <WATCHDOG_CLOCK_init+0x14>)
    1e5c:	4798      	blx	r3
}
    1e5e:	bf00      	nop
    1e60:	bd80      	pop	{r7, pc}
    1e62:	bf00      	nop
    1e64:	40000800 	.word	0x40000800
    1e68:	00000bbf 	.word	0x00000bbf

00001e6c <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1e6c:	b580      	push	{r7, lr}
    1e6e:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1e70:	4b03      	ldr	r3, [pc, #12]	; (1e80 <WATCHDOG_init+0x14>)
    1e72:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1e74:	4903      	ldr	r1, [pc, #12]	; (1e84 <WATCHDOG_init+0x18>)
    1e76:	4804      	ldr	r0, [pc, #16]	; (1e88 <WATCHDOG_init+0x1c>)
    1e78:	4b04      	ldr	r3, [pc, #16]	; (1e8c <WATCHDOG_init+0x20>)
    1e7a:	4798      	blx	r3
}
    1e7c:	bf00      	nop
    1e7e:	bd80      	pop	{r7, pc}
    1e80:	00001e55 	.word	0x00001e55
    1e84:	40002000 	.word	0x40002000
    1e88:	200018dc 	.word	0x200018dc
    1e8c:	0000140d 	.word	0x0000140d

00001e90 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1e90:	b580      	push	{r7, lr}
    1e92:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1e94:	4904      	ldr	r1, [pc, #16]	; (1ea8 <CAN_CCU_PORT_init+0x18>)
    1e96:	202d      	movs	r0, #45	; 0x2d
    1e98:	4b04      	ldr	r3, [pc, #16]	; (1eac <CAN_CCU_PORT_init+0x1c>)
    1e9a:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1e9c:	4904      	ldr	r1, [pc, #16]	; (1eb0 <CAN_CCU_PORT_init+0x20>)
    1e9e:	202c      	movs	r0, #44	; 0x2c
    1ea0:	4b02      	ldr	r3, [pc, #8]	; (1eac <CAN_CCU_PORT_init+0x1c>)
    1ea2:	4798      	blx	r3
}
    1ea4:	bf00      	nop
    1ea6:	bd80      	pop	{r7, pc}
    1ea8:	002d0007 	.word	0x002d0007
    1eac:	0000136d 	.word	0x0000136d
    1eb0:	002c0007 	.word	0x002c0007

00001eb4 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1eb4:	b580      	push	{r7, lr}
    1eb6:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1eb8:	4807      	ldr	r0, [pc, #28]	; (1ed8 <CAN_CCU_init+0x24>)
    1eba:	4b08      	ldr	r3, [pc, #32]	; (1edc <CAN_CCU_init+0x28>)
    1ebc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ebe:	2249      	movs	r2, #73	; 0x49
    1ec0:	211c      	movs	r1, #28
    1ec2:	4807      	ldr	r0, [pc, #28]	; (1ee0 <CAN_CCU_init+0x2c>)
    1ec4:	4b07      	ldr	r3, [pc, #28]	; (1ee4 <CAN_CCU_init+0x30>)
    1ec6:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1ec8:	4907      	ldr	r1, [pc, #28]	; (1ee8 <CAN_CCU_init+0x34>)
    1eca:	4808      	ldr	r0, [pc, #32]	; (1eec <CAN_CCU_init+0x38>)
    1ecc:	4b08      	ldr	r3, [pc, #32]	; (1ef0 <CAN_CCU_init+0x3c>)
    1ece:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1ed0:	4b08      	ldr	r3, [pc, #32]	; (1ef4 <CAN_CCU_init+0x40>)
    1ed2:	4798      	blx	r3
}
    1ed4:	bf00      	nop
    1ed6:	bd80      	pop	{r7, pc}
    1ed8:	40000800 	.word	0x40000800
    1edc:	00000b7f 	.word	0x00000b7f
    1ee0:	40001c00 	.word	0x40001c00
    1ee4:	00000b19 	.word	0x00000b19
    1ee8:	42000400 	.word	0x42000400
    1eec:	20001834 	.word	0x20001834
    1ef0:	00002159 	.word	0x00002159
    1ef4:	00001e91 	.word	0x00001e91

00001ef8 <system_init>:

void system_init(void)
{
    1ef8:	b580      	push	{r7, lr}
    1efa:	af00      	add	r7, sp, #0
	init_mcu();
    1efc:	4b5f      	ldr	r3, [pc, #380]	; (207c <system_init+0x184>)
    1efe:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    1f00:	2100      	movs	r1, #0
    1f02:	2007      	movs	r0, #7
    1f04:	4b5e      	ldr	r3, [pc, #376]	; (2080 <system_init+0x188>)
    1f06:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    1f08:	2102      	movs	r1, #2
    1f0a:	2007      	movs	r0, #7
    1f0c:	4b5d      	ldr	r3, [pc, #372]	; (2084 <system_init+0x18c>)
    1f0e:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    1f10:	f04f 31ff 	mov.w	r1, #4294967295
    1f14:	2007      	movs	r0, #7
    1f16:	4b5c      	ldr	r3, [pc, #368]	; (2088 <system_init+0x190>)
    1f18:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    1f1a:	2101      	movs	r1, #1
    1f1c:	200f      	movs	r0, #15
    1f1e:	4b58      	ldr	r3, [pc, #352]	; (2080 <system_init+0x188>)
    1f20:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1f22:	2102      	movs	r1, #2
    1f24:	200f      	movs	r0, #15
    1f26:	4b57      	ldr	r3, [pc, #348]	; (2084 <system_init+0x18c>)
    1f28:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1f2a:	f04f 31ff 	mov.w	r1, #4294967295
    1f2e:	200f      	movs	r0, #15
    1f30:	4b55      	ldr	r3, [pc, #340]	; (2088 <system_init+0x190>)
    1f32:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1f34:	2101      	movs	r1, #1
    1f36:	2013      	movs	r0, #19
    1f38:	4b51      	ldr	r3, [pc, #324]	; (2080 <system_init+0x188>)
    1f3a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    1f3c:	2102      	movs	r1, #2
    1f3e:	2013      	movs	r0, #19
    1f40:	4b50      	ldr	r3, [pc, #320]	; (2084 <system_init+0x18c>)
    1f42:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1f44:	f04f 31ff 	mov.w	r1, #4294967295
    1f48:	2013      	movs	r0, #19
    1f4a:	4b4f      	ldr	r3, [pc, #316]	; (2088 <system_init+0x190>)
    1f4c:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    1f4e:	2101      	movs	r1, #1
    1f50:	201b      	movs	r0, #27
    1f52:	4b4b      	ldr	r3, [pc, #300]	; (2080 <system_init+0x188>)
    1f54:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    1f56:	2102      	movs	r1, #2
    1f58:	201b      	movs	r0, #27
    1f5a:	4b4a      	ldr	r3, [pc, #296]	; (2084 <system_init+0x18c>)
    1f5c:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    1f5e:	f04f 31ff 	mov.w	r1, #4294967295
    1f62:	201b      	movs	r0, #27
    1f64:	4b48      	ldr	r3, [pc, #288]	; (2088 <system_init+0x190>)
    1f66:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    1f68:	2101      	movs	r1, #1
    1f6a:	2027      	movs	r0, #39	; 0x27
    1f6c:	4b44      	ldr	r3, [pc, #272]	; (2080 <system_init+0x188>)
    1f6e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    1f70:	2102      	movs	r1, #2
    1f72:	2027      	movs	r0, #39	; 0x27
    1f74:	4b43      	ldr	r3, [pc, #268]	; (2084 <system_init+0x18c>)
    1f76:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    1f78:	f04f 31ff 	mov.w	r1, #4294967295
    1f7c:	2027      	movs	r0, #39	; 0x27
    1f7e:	4b42      	ldr	r3, [pc, #264]	; (2088 <system_init+0x190>)
    1f80:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    1f82:	2101      	movs	r1, #1
    1f84:	203d      	movs	r0, #61	; 0x3d
    1f86:	4b3e      	ldr	r3, [pc, #248]	; (2080 <system_init+0x188>)
    1f88:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    1f8a:	2102      	movs	r1, #2
    1f8c:	203d      	movs	r0, #61	; 0x3d
    1f8e:	4b3d      	ldr	r3, [pc, #244]	; (2084 <system_init+0x18c>)
    1f90:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    1f92:	f04f 31ff 	mov.w	r1, #4294967295
    1f96:	203d      	movs	r0, #61	; 0x3d
    1f98:	4b3b      	ldr	r3, [pc, #236]	; (2088 <system_init+0x190>)
    1f9a:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1f9c:	2101      	movs	r1, #1
    1f9e:	203f      	movs	r0, #63	; 0x3f
    1fa0:	4b38      	ldr	r3, [pc, #224]	; (2084 <system_init+0x18c>)
    1fa2:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1fa4:	2101      	movs	r1, #1
    1fa6:	203f      	movs	r0, #63	; 0x3f
    1fa8:	4b38      	ldr	r3, [pc, #224]	; (208c <system_init+0x194>)
    1faa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1fac:	f04f 31ff 	mov.w	r1, #4294967295
    1fb0:	203f      	movs	r0, #63	; 0x3f
    1fb2:	4b35      	ldr	r3, [pc, #212]	; (2088 <system_init+0x190>)
    1fb4:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1fb6:	2100      	movs	r1, #0
    1fb8:	204d      	movs	r0, #77	; 0x4d
    1fba:	4b31      	ldr	r3, [pc, #196]	; (2080 <system_init+0x188>)
    1fbc:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1fbe:	2102      	movs	r1, #2
    1fc0:	204d      	movs	r0, #77	; 0x4d
    1fc2:	4b30      	ldr	r3, [pc, #192]	; (2084 <system_init+0x18c>)
    1fc4:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1fc6:	f04f 31ff 	mov.w	r1, #4294967295
    1fca:	204d      	movs	r0, #77	; 0x4d
    1fcc:	4b2e      	ldr	r3, [pc, #184]	; (2088 <system_init+0x190>)
    1fce:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1fd0:	2101      	movs	r1, #1
    1fd2:	204e      	movs	r0, #78	; 0x4e
    1fd4:	4b2a      	ldr	r3, [pc, #168]	; (2080 <system_init+0x188>)
    1fd6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    1fd8:	2102      	movs	r1, #2
    1fda:	204e      	movs	r0, #78	; 0x4e
    1fdc:	4b29      	ldr	r3, [pc, #164]	; (2084 <system_init+0x18c>)
    1fde:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1fe0:	f04f 31ff 	mov.w	r1, #4294967295
    1fe4:	204e      	movs	r0, #78	; 0x4e
    1fe6:	4b28      	ldr	r3, [pc, #160]	; (2088 <system_init+0x190>)
    1fe8:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1fea:	2100      	movs	r1, #0
    1fec:	204f      	movs	r0, #79	; 0x4f
    1fee:	4b24      	ldr	r3, [pc, #144]	; (2080 <system_init+0x188>)
    1ff0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1ff2:	2102      	movs	r1, #2
    1ff4:	204f      	movs	r0, #79	; 0x4f
    1ff6:	4b23      	ldr	r3, [pc, #140]	; (2084 <system_init+0x18c>)
    1ff8:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1ffa:	f04f 31ff 	mov.w	r1, #4294967295
    1ffe:	204f      	movs	r0, #79	; 0x4f
    2000:	4b21      	ldr	r3, [pc, #132]	; (2088 <system_init+0x190>)
    2002:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    2004:	2100      	movs	r1, #0
    2006:	2052      	movs	r0, #82	; 0x52
    2008:	4b1d      	ldr	r3, [pc, #116]	; (2080 <system_init+0x188>)
    200a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    200c:	2102      	movs	r1, #2
    200e:	2052      	movs	r0, #82	; 0x52
    2010:	4b1c      	ldr	r3, [pc, #112]	; (2084 <system_init+0x18c>)
    2012:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    2014:	f04f 31ff 	mov.w	r1, #4294967295
    2018:	2052      	movs	r0, #82	; 0x52
    201a:	4b1b      	ldr	r3, [pc, #108]	; (2088 <system_init+0x190>)
    201c:	4798      	blx	r3

	CRC_CALC_init();
    201e:	4b1c      	ldr	r3, [pc, #112]	; (2090 <system_init+0x198>)
    2020:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    2022:	4b1c      	ldr	r3, [pc, #112]	; (2094 <system_init+0x19c>)
    2024:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    2026:	4b1c      	ldr	r3, [pc, #112]	; (2098 <system_init+0x1a0>)
    2028:	4798      	blx	r3

	QSPI_N25Q256_init();
    202a:	4b1c      	ldr	r3, [pc, #112]	; (209c <system_init+0x1a4>)
    202c:	4798      	blx	r3

	DATETIME_CLOCK_init();
    202e:	4b1c      	ldr	r3, [pc, #112]	; (20a0 <system_init+0x1a8>)
    2030:	4798      	blx	r3

	I2C_HEATERS_init();
    2032:	4b1c      	ldr	r3, [pc, #112]	; (20a4 <system_init+0x1ac>)
    2034:	4798      	blx	r3

	SPI_TEMP_init();
    2036:	4b1c      	ldr	r3, [pc, #112]	; (20a8 <system_init+0x1b0>)
    2038:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    203a:	4b1c      	ldr	r3, [pc, #112]	; (20ac <system_init+0x1b4>)
    203c:	4798      	blx	r3

	SPI_HI3593_init();
    203e:	4b1c      	ldr	r3, [pc, #112]	; (20b0 <system_init+0x1b8>)
    2040:	4798      	blx	r3

	I2C_FANS_init();
    2042:	4b1c      	ldr	r3, [pc, #112]	; (20b4 <system_init+0x1bc>)
    2044:	4798      	blx	r3

	TIMER_USB_init();
    2046:	4b1c      	ldr	r3, [pc, #112]	; (20b8 <system_init+0x1c0>)
    2048:	4798      	blx	r3
	TIMER_ARINC_init();
    204a:	4b1c      	ldr	r3, [pc, #112]	; (20bc <system_init+0x1c4>)
    204c:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    204e:	4b1c      	ldr	r3, [pc, #112]	; (20c0 <system_init+0x1c8>)
    2050:	4798      	blx	r3
	TIMER_INTERFACE_init();
    2052:	4b1c      	ldr	r3, [pc, #112]	; (20c4 <system_init+0x1cc>)
    2054:	4798      	blx	r3
	TIMER_EVENT_init();
    2056:	4b1c      	ldr	r3, [pc, #112]	; (20c8 <system_init+0x1d0>)
    2058:	4798      	blx	r3
	LIVE_PULSE_init();
    205a:	4b1c      	ldr	r3, [pc, #112]	; (20cc <system_init+0x1d4>)
    205c:	4798      	blx	r3

	TIMER_HVAC_init();
    205e:	4b1c      	ldr	r3, [pc, #112]	; (20d0 <system_init+0x1d8>)
    2060:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    2062:	4b1c      	ldr	r3, [pc, #112]	; (20d4 <system_init+0x1dc>)
    2064:	4798      	blx	r3

	TIMER_CCU_init();
    2066:	4b1c      	ldr	r3, [pc, #112]	; (20d8 <system_init+0x1e0>)
    2068:	4798      	blx	r3

	CDCUSB_init();
    206a:	4b1c      	ldr	r3, [pc, #112]	; (20dc <system_init+0x1e4>)
    206c:	4798      	blx	r3

	WATCHDOG_init();
    206e:	4b1c      	ldr	r3, [pc, #112]	; (20e0 <system_init+0x1e8>)
    2070:	4798      	blx	r3
	CAN_CCU_init();
    2072:	4b1c      	ldr	r3, [pc, #112]	; (20e4 <system_init+0x1ec>)
    2074:	4798      	blx	r3
}
    2076:	bf00      	nop
    2078:	bd80      	pop	{r7, pc}
    207a:	bf00      	nop
    207c:	000013fd 	.word	0x000013fd
    2080:	000013c5 	.word	0x000013c5
    2084:	0000138d 	.word	0x0000138d
    2088:	0000136d 	.word	0x0000136d
    208c:	00001339 	.word	0x00001339
    2090:	0000145d 	.word	0x0000145d
    2094:	00001489 	.word	0x00001489
    2098:	000015b1 	.word	0x000015b1
    209c:	000016f9 	.word	0x000016f9
    20a0:	0000173d 	.word	0x0000173d
    20a4:	000017cd 	.word	0x000017cd
    20a8:	00001899 	.word	0x00001899
    20ac:	00001931 	.word	0x00001931
    20b0:	000019fd 	.word	0x000019fd
    20b4:	00001a95 	.word	0x00001a95
    20b8:	00001ac1 	.word	0x00001ac1
    20bc:	00001b09 	.word	0x00001b09
    20c0:	00001b51 	.word	0x00001b51
    20c4:	00001b99 	.word	0x00001b99
    20c8:	00001be1 	.word	0x00001be1
    20cc:	00001c61 	.word	0x00001c61
    20d0:	00001cc1 	.word	0x00001cc1
    20d4:	00001d19 	.word	0x00001d19
    20d8:	00001d71 	.word	0x00001d71
    20dc:	00001e35 	.word	0x00001e35
    20e0:	00001e6d 	.word	0x00001e6d
    20e4:	00001eb5 	.word	0x00001eb5

000020e8 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    20e8:	b580      	push	{r7, lr}
    20ea:	b084      	sub	sp, #16
    20ec:	af00      	add	r7, sp, #0
    20ee:	6078      	str	r0, [r7, #4]
    20f0:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    20f2:	2300      	movs	r3, #0
    20f4:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    20f6:	687b      	ldr	r3, [r7, #4]
    20f8:	2b00      	cmp	r3, #0
    20fa:	bf14      	ite	ne
    20fc:	2301      	movne	r3, #1
    20fe:	2300      	moveq	r3, #0
    2100:	b2db      	uxtb	r3, r3
    2102:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    2106:	4911      	ldr	r1, [pc, #68]	; (214c <calendar_init+0x64>)
    2108:	4618      	mov	r0, r3
    210a:	4b11      	ldr	r3, [pc, #68]	; (2150 <calendar_init+0x68>)
    210c:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    210e:	687b      	ldr	r3, [r7, #4]
    2110:	681a      	ldr	r2, [r3, #0]
    2112:	683b      	ldr	r3, [r7, #0]
    2114:	429a      	cmp	r2, r3
    2116:	d101      	bne.n	211c <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    2118:	2300      	movs	r3, #0
    211a:	e013      	b.n	2144 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	681b      	ldr	r3, [r3, #0]
    2120:	2b00      	cmp	r3, #0
    2122:	d002      	beq.n	212a <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    2124:	f06f 0311 	mvn.w	r3, #17
    2128:	e00c      	b.n	2144 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    212a:	687b      	ldr	r3, [r7, #4]
    212c:	683a      	ldr	r2, [r7, #0]
    212e:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    2130:	687b      	ldr	r3, [r7, #4]
    2132:	4618      	mov	r0, r3
    2134:	4b07      	ldr	r3, [pc, #28]	; (2154 <calendar_init+0x6c>)
    2136:	4798      	blx	r3
    2138:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    213a:	687b      	ldr	r3, [r7, #4]
    213c:	f240 72b2 	movw	r2, #1970	; 0x7b2
    2140:	619a      	str	r2, [r3, #24]

	return ret;
    2142:	68fb      	ldr	r3, [r7, #12]
}
    2144:	4618      	mov	r0, r3
    2146:	3710      	adds	r7, #16
    2148:	46bd      	mov	sp, r7
    214a:	bd80      	pop	{r7, pc}
    214c:	0000edc8 	.word	0x0000edc8
    2150:	000038b5 	.word	0x000038b5
    2154:	00005c71 	.word	0x00005c71

00002158 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    2158:	b580      	push	{r7, lr}
    215a:	b084      	sub	sp, #16
    215c:	af00      	add	r7, sp, #0
    215e:	6078      	str	r0, [r7, #4]
    2160:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    2162:	687b      	ldr	r3, [r7, #4]
    2164:	2b00      	cmp	r3, #0
    2166:	d004      	beq.n	2172 <can_async_init+0x1a>
    2168:	683b      	ldr	r3, [r7, #0]
    216a:	2b00      	cmp	r3, #0
    216c:	d001      	beq.n	2172 <can_async_init+0x1a>
    216e:	2301      	movs	r3, #1
    2170:	e000      	b.n	2174 <can_async_init+0x1c>
    2172:	2300      	movs	r3, #0
    2174:	f003 0301 	and.w	r3, r3, #1
    2178:	b2db      	uxtb	r3, r3
    217a:	2241      	movs	r2, #65	; 0x41
    217c:	490e      	ldr	r1, [pc, #56]	; (21b8 <can_async_init+0x60>)
    217e:	4618      	mov	r0, r3
    2180:	4b0e      	ldr	r3, [pc, #56]	; (21bc <can_async_init+0x64>)
    2182:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    2184:	687b      	ldr	r3, [r7, #4]
    2186:	6839      	ldr	r1, [r7, #0]
    2188:	4618      	mov	r0, r3
    218a:	4b0d      	ldr	r3, [pc, #52]	; (21c0 <can_async_init+0x68>)
    218c:	4798      	blx	r3
    218e:	60f8      	str	r0, [r7, #12]
	if (rc) {
    2190:	68fb      	ldr	r3, [r7, #12]
    2192:	2b00      	cmp	r3, #0
    2194:	d001      	beq.n	219a <can_async_init+0x42>
		return rc;
    2196:	68fb      	ldr	r3, [r7, #12]
    2198:	e009      	b.n	21ae <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    219a:	687b      	ldr	r3, [r7, #4]
    219c:	4a09      	ldr	r2, [pc, #36]	; (21c4 <can_async_init+0x6c>)
    219e:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    21a0:	687b      	ldr	r3, [r7, #4]
    21a2:	4a09      	ldr	r2, [pc, #36]	; (21c8 <can_async_init+0x70>)
    21a4:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    21a6:	687b      	ldr	r3, [r7, #4]
    21a8:	4a08      	ldr	r2, [pc, #32]	; (21cc <can_async_init+0x74>)
    21aa:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    21ac:	2300      	movs	r3, #0
}
    21ae:	4618      	mov	r0, r3
    21b0:	3710      	adds	r7, #16
    21b2:	46bd      	mov	sp, r7
    21b4:	bd80      	pop	{r7, pc}
    21b6:	bf00      	nop
    21b8:	0000ede4 	.word	0x0000ede4
    21bc:	000038b5 	.word	0x000038b5
    21c0:	00003e11 	.word	0x00003e11
    21c4:	000021d1 	.word	0x000021d1
    21c8:	000021f5 	.word	0x000021f5
    21cc:	00002219 	.word	0x00002219

000021d0 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    21d0:	b580      	push	{r7, lr}
    21d2:	b084      	sub	sp, #16
    21d4:	af00      	add	r7, sp, #0
    21d6:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    21d8:	687b      	ldr	r3, [r7, #4]
    21da:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    21dc:	68fb      	ldr	r3, [r7, #12]
    21de:	69db      	ldr	r3, [r3, #28]
    21e0:	2b00      	cmp	r3, #0
    21e2:	d003      	beq.n	21ec <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    21e4:	68fb      	ldr	r3, [r7, #12]
    21e6:	69db      	ldr	r3, [r3, #28]
    21e8:	68f8      	ldr	r0, [r7, #12]
    21ea:	4798      	blx	r3
	}
}
    21ec:	bf00      	nop
    21ee:	3710      	adds	r7, #16
    21f0:	46bd      	mov	sp, r7
    21f2:	bd80      	pop	{r7, pc}

000021f4 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    21f4:	b580      	push	{r7, lr}
    21f6:	b084      	sub	sp, #16
    21f8:	af00      	add	r7, sp, #0
    21fa:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    21fc:	687b      	ldr	r3, [r7, #4]
    21fe:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    2200:	68fb      	ldr	r3, [r7, #12]
    2202:	6a1b      	ldr	r3, [r3, #32]
    2204:	2b00      	cmp	r3, #0
    2206:	d003      	beq.n	2210 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    2208:	68fb      	ldr	r3, [r7, #12]
    220a:	6a1b      	ldr	r3, [r3, #32]
    220c:	68f8      	ldr	r0, [r7, #12]
    220e:	4798      	blx	r3
	}
}
    2210:	bf00      	nop
    2212:	3710      	adds	r7, #16
    2214:	46bd      	mov	sp, r7
    2216:	bd80      	pop	{r7, pc}

00002218 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    2218:	b580      	push	{r7, lr}
    221a:	b084      	sub	sp, #16
    221c:	af00      	add	r7, sp, #0
    221e:	6078      	str	r0, [r7, #4]
    2220:	460b      	mov	r3, r1
    2222:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2224:	687b      	ldr	r3, [r7, #4]
    2226:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    2228:	68fb      	ldr	r3, [r7, #12]
    222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    222c:	2b00      	cmp	r3, #0
    222e:	d005      	beq.n	223c <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    2230:	68fb      	ldr	r3, [r7, #12]
    2232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2234:	78fa      	ldrb	r2, [r7, #3]
    2236:	4611      	mov	r1, r2
    2238:	68f8      	ldr	r0, [r7, #12]
    223a:	4798      	blx	r3
	}
}
    223c:	bf00      	nop
    223e:	3710      	adds	r7, #16
    2240:	46bd      	mov	sp, r7
    2242:	bd80      	pop	{r7, pc}

00002244 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    2244:	b580      	push	{r7, lr}
    2246:	b082      	sub	sp, #8
    2248:	af00      	add	r7, sp, #0
    224a:	6078      	str	r0, [r7, #4]
    224c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    224e:	687b      	ldr	r3, [r7, #4]
    2250:	2b00      	cmp	r3, #0
    2252:	d004      	beq.n	225e <crc_sync_init+0x1a>
    2254:	683b      	ldr	r3, [r7, #0]
    2256:	2b00      	cmp	r3, #0
    2258:	d001      	beq.n	225e <crc_sync_init+0x1a>
    225a:	2301      	movs	r3, #1
    225c:	e000      	b.n	2260 <crc_sync_init+0x1c>
    225e:	2300      	movs	r3, #0
    2260:	f003 0301 	and.w	r3, r3, #1
    2264:	b2db      	uxtb	r3, r3
    2266:	222b      	movs	r2, #43	; 0x2b
    2268:	4906      	ldr	r1, [pc, #24]	; (2284 <crc_sync_init+0x40>)
    226a:	4618      	mov	r0, r3
    226c:	4b06      	ldr	r3, [pc, #24]	; (2288 <crc_sync_init+0x44>)
    226e:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    2270:	687b      	ldr	r3, [r7, #4]
    2272:	6839      	ldr	r1, [r7, #0]
    2274:	4618      	mov	r0, r3
    2276:	4b05      	ldr	r3, [pc, #20]	; (228c <crc_sync_init+0x48>)
    2278:	4798      	blx	r3
    227a:	4603      	mov	r3, r0
}
    227c:	4618      	mov	r0, r3
    227e:	3708      	adds	r7, #8
    2280:	46bd      	mov	sp, r7
    2282:	bd80      	pop	{r7, pc}
    2284:	0000ee00 	.word	0x0000ee00
    2288:	000038b5 	.word	0x000038b5
    228c:	00004511 	.word	0x00004511

00002290 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    2290:	b590      	push	{r4, r7, lr}
    2292:	b083      	sub	sp, #12
    2294:	af00      	add	r7, sp, #0
    2296:	4603      	mov	r3, r0
    2298:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    229a:	4b07      	ldr	r3, [pc, #28]	; (22b8 <delay_us+0x28>)
    229c:	681c      	ldr	r4, [r3, #0]
    229e:	88fb      	ldrh	r3, [r7, #6]
    22a0:	4618      	mov	r0, r3
    22a2:	4b06      	ldr	r3, [pc, #24]	; (22bc <delay_us+0x2c>)
    22a4:	4798      	blx	r3
    22a6:	4603      	mov	r3, r0
    22a8:	4619      	mov	r1, r3
    22aa:	4620      	mov	r0, r4
    22ac:	4b04      	ldr	r3, [pc, #16]	; (22c0 <delay_us+0x30>)
    22ae:	4798      	blx	r3
}
    22b0:	bf00      	nop
    22b2:	370c      	adds	r7, #12
    22b4:	46bd      	mov	sp, r7
    22b6:	bd90      	pop	{r4, r7, pc}
    22b8:	200009ac 	.word	0x200009ac
    22bc:	00004265 	.word	0x00004265
    22c0:	000043f9 	.word	0x000043f9

000022c4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    22c4:	b590      	push	{r4, r7, lr}
    22c6:	b083      	sub	sp, #12
    22c8:	af00      	add	r7, sp, #0
    22ca:	4603      	mov	r3, r0
    22cc:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    22ce:	4b07      	ldr	r3, [pc, #28]	; (22ec <delay_ms+0x28>)
    22d0:	681c      	ldr	r4, [r3, #0]
    22d2:	88fb      	ldrh	r3, [r7, #6]
    22d4:	4618      	mov	r0, r3
    22d6:	4b06      	ldr	r3, [pc, #24]	; (22f0 <delay_ms+0x2c>)
    22d8:	4798      	blx	r3
    22da:	4603      	mov	r3, r0
    22dc:	4619      	mov	r1, r3
    22de:	4620      	mov	r0, r4
    22e0:	4b04      	ldr	r3, [pc, #16]	; (22f4 <delay_ms+0x30>)
    22e2:	4798      	blx	r3
}
    22e4:	bf00      	nop
    22e6:	370c      	adds	r7, #12
    22e8:	46bd      	mov	sp, r7
    22ea:	bd90      	pop	{r4, r7, pc}
    22ec:	200009ac 	.word	0x200009ac
    22f0:	000043d1 	.word	0x000043d1
    22f4:	000043f9 	.word	0x000043f9

000022f8 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    22f8:	b580      	push	{r7, lr}
    22fa:	af00      	add	r7, sp, #0
	return _event_system_init();
    22fc:	4b02      	ldr	r3, [pc, #8]	; (2308 <event_system_init+0x10>)
    22fe:	4798      	blx	r3
    2300:	4603      	mov	r3, r0
}
    2302:	4618      	mov	r0, r3
    2304:	bd80      	pop	{r7, pc}
    2306:	bf00      	nop
    2308:	00004ccd 	.word	0x00004ccd

0000230c <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    230c:	b580      	push	{r7, lr}
    230e:	b082      	sub	sp, #8
    2310:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2312:	2300      	movs	r3, #0
    2314:	80fb      	strh	r3, [r7, #6]
    2316:	e00e      	b.n	2336 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    2318:	88fb      	ldrh	r3, [r7, #6]
    231a:	4a0c      	ldr	r2, [pc, #48]	; (234c <ext_irq_init+0x40>)
    231c:	00db      	lsls	r3, r3, #3
    231e:	4413      	add	r3, r2
    2320:	f04f 32ff 	mov.w	r2, #4294967295
    2324:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    2326:	88fb      	ldrh	r3, [r7, #6]
    2328:	4a08      	ldr	r2, [pc, #32]	; (234c <ext_irq_init+0x40>)
    232a:	2100      	movs	r1, #0
    232c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2330:	88fb      	ldrh	r3, [r7, #6]
    2332:	3301      	adds	r3, #1
    2334:	80fb      	strh	r3, [r7, #6]
    2336:	88fb      	ldrh	r3, [r7, #6]
    2338:	2b08      	cmp	r3, #8
    233a:	d9ed      	bls.n	2318 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    233c:	4804      	ldr	r0, [pc, #16]	; (2350 <ext_irq_init+0x44>)
    233e:	4b05      	ldr	r3, [pc, #20]	; (2354 <ext_irq_init+0x48>)
    2340:	4798      	blx	r3
    2342:	4603      	mov	r3, r0
}
    2344:	4618      	mov	r0, r3
    2346:	3708      	adds	r7, #8
    2348:	46bd      	mov	sp, r7
    234a:	bd80      	pop	{r7, pc}
    234c:	200009b0 	.word	0x200009b0
    2350:	000024b1 	.word	0x000024b1
    2354:	00004851 	.word	0x00004851

00002358 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    2358:	b580      	push	{r7, lr}
    235a:	b086      	sub	sp, #24
    235c:	af00      	add	r7, sp, #0
    235e:	6078      	str	r0, [r7, #4]
    2360:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    2362:	2300      	movs	r3, #0
    2364:	75fb      	strb	r3, [r7, #23]
    2366:	2300      	movs	r3, #0
    2368:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    236a:	2300      	movs	r3, #0
    236c:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    236e:	e012      	b.n	2396 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    2370:	7dfb      	ldrb	r3, [r7, #23]
    2372:	4a4d      	ldr	r2, [pc, #308]	; (24a8 <ext_irq_register+0x150>)
    2374:	00db      	lsls	r3, r3, #3
    2376:	4413      	add	r3, r2
    2378:	685a      	ldr	r2, [r3, #4]
    237a:	687b      	ldr	r3, [r7, #4]
    237c:	429a      	cmp	r2, r3
    237e:	d107      	bne.n	2390 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    2380:	7dfb      	ldrb	r3, [r7, #23]
    2382:	4949      	ldr	r1, [pc, #292]	; (24a8 <ext_irq_register+0x150>)
    2384:	683a      	ldr	r2, [r7, #0]
    2386:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    238a:	2301      	movs	r3, #1
    238c:	757b      	strb	r3, [r7, #21]
			break;
    238e:	e005      	b.n	239c <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2390:	7dfb      	ldrb	r3, [r7, #23]
    2392:	3301      	adds	r3, #1
    2394:	75fb      	strb	r3, [r7, #23]
    2396:	7dfb      	ldrb	r3, [r7, #23]
    2398:	2b08      	cmp	r3, #8
    239a:	d9e9      	bls.n	2370 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    239c:	683b      	ldr	r3, [r7, #0]
    239e:	2b00      	cmp	r3, #0
    23a0:	d10e      	bne.n	23c0 <ext_irq_register+0x68>
		if (!found) {
    23a2:	7d7b      	ldrb	r3, [r7, #21]
    23a4:	f083 0301 	eor.w	r3, r3, #1
    23a8:	b2db      	uxtb	r3, r3
    23aa:	2b00      	cmp	r3, #0
    23ac:	d002      	beq.n	23b4 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    23ae:	f06f 030c 	mvn.w	r3, #12
    23b2:	e074      	b.n	249e <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    23b4:	2100      	movs	r1, #0
    23b6:	6878      	ldr	r0, [r7, #4]
    23b8:	4b3c      	ldr	r3, [pc, #240]	; (24ac <ext_irq_register+0x154>)
    23ba:	4798      	blx	r3
    23bc:	4603      	mov	r3, r0
    23be:	e06e      	b.n	249e <ext_irq_register+0x146>
	}

	if (!found) {
    23c0:	7d7b      	ldrb	r3, [r7, #21]
    23c2:	f083 0301 	eor.w	r3, r3, #1
    23c6:	b2db      	uxtb	r3, r3
    23c8:	2b00      	cmp	r3, #0
    23ca:	d05a      	beq.n	2482 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    23cc:	2300      	movs	r3, #0
    23ce:	75fb      	strb	r3, [r7, #23]
    23d0:	e016      	b.n	2400 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    23d2:	7dfb      	ldrb	r3, [r7, #23]
    23d4:	4a34      	ldr	r2, [pc, #208]	; (24a8 <ext_irq_register+0x150>)
    23d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    23da:	2b00      	cmp	r3, #0
    23dc:	d10d      	bne.n	23fa <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    23de:	7dfb      	ldrb	r3, [r7, #23]
    23e0:	4931      	ldr	r1, [pc, #196]	; (24a8 <ext_irq_register+0x150>)
    23e2:	683a      	ldr	r2, [r7, #0]
    23e4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    23e8:	7dfb      	ldrb	r3, [r7, #23]
    23ea:	4a2f      	ldr	r2, [pc, #188]	; (24a8 <ext_irq_register+0x150>)
    23ec:	00db      	lsls	r3, r3, #3
    23ee:	4413      	add	r3, r2
    23f0:	687a      	ldr	r2, [r7, #4]
    23f2:	605a      	str	r2, [r3, #4]
				found           = true;
    23f4:	2301      	movs	r3, #1
    23f6:	757b      	strb	r3, [r7, #21]
				break;
    23f8:	e005      	b.n	2406 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    23fa:	7dfb      	ldrb	r3, [r7, #23]
    23fc:	3301      	adds	r3, #1
    23fe:	75fb      	strb	r3, [r7, #23]
    2400:	7dfb      	ldrb	r3, [r7, #23]
    2402:	2b08      	cmp	r3, #8
    2404:	d9e5      	bls.n	23d2 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2406:	e036      	b.n	2476 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    2408:	7dfb      	ldrb	r3, [r7, #23]
    240a:	4a27      	ldr	r2, [pc, #156]	; (24a8 <ext_irq_register+0x150>)
    240c:	00db      	lsls	r3, r3, #3
    240e:	4413      	add	r3, r2
    2410:	685a      	ldr	r2, [r3, #4]
    2412:	7dbb      	ldrb	r3, [r7, #22]
    2414:	4924      	ldr	r1, [pc, #144]	; (24a8 <ext_irq_register+0x150>)
    2416:	00db      	lsls	r3, r3, #3
    2418:	440b      	add	r3, r1
    241a:	685b      	ldr	r3, [r3, #4]
    241c:	429a      	cmp	r2, r3
    241e:	d227      	bcs.n	2470 <ext_irq_register+0x118>
    2420:	7dbb      	ldrb	r3, [r7, #22]
    2422:	4a21      	ldr	r2, [pc, #132]	; (24a8 <ext_irq_register+0x150>)
    2424:	00db      	lsls	r3, r3, #3
    2426:	4413      	add	r3, r2
    2428:	685b      	ldr	r3, [r3, #4]
    242a:	f1b3 3fff 	cmp.w	r3, #4294967295
    242e:	d01f      	beq.n	2470 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    2430:	7dbb      	ldrb	r3, [r7, #22]
    2432:	491d      	ldr	r1, [pc, #116]	; (24a8 <ext_irq_register+0x150>)
    2434:	f107 020c 	add.w	r2, r7, #12
    2438:	00db      	lsls	r3, r3, #3
    243a:	440b      	add	r3, r1
    243c:	e893 0003 	ldmia.w	r3, {r0, r1}
    2440:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    2444:	7dbb      	ldrb	r3, [r7, #22]
    2446:	7dfa      	ldrb	r2, [r7, #23]
    2448:	4817      	ldr	r0, [pc, #92]	; (24a8 <ext_irq_register+0x150>)
    244a:	4917      	ldr	r1, [pc, #92]	; (24a8 <ext_irq_register+0x150>)
    244c:	00db      	lsls	r3, r3, #3
    244e:	4403      	add	r3, r0
    2450:	00d2      	lsls	r2, r2, #3
    2452:	440a      	add	r2, r1
    2454:	e892 0003 	ldmia.w	r2, {r0, r1}
    2458:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    245c:	7dfb      	ldrb	r3, [r7, #23]
    245e:	4a12      	ldr	r2, [pc, #72]	; (24a8 <ext_irq_register+0x150>)
    2460:	00db      	lsls	r3, r3, #3
    2462:	4413      	add	r3, r2
    2464:	f107 020c 	add.w	r2, r7, #12
    2468:	e892 0003 	ldmia.w	r2, {r0, r1}
    246c:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2470:	7dbb      	ldrb	r3, [r7, #22]
    2472:	3301      	adds	r3, #1
    2474:	75bb      	strb	r3, [r7, #22]
    2476:	7dbb      	ldrb	r3, [r7, #22]
    2478:	2b08      	cmp	r3, #8
    247a:	d802      	bhi.n	2482 <ext_irq_register+0x12a>
    247c:	7dfb      	ldrb	r3, [r7, #23]
    247e:	2b08      	cmp	r3, #8
    2480:	d9c2      	bls.n	2408 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    2482:	7d7b      	ldrb	r3, [r7, #21]
    2484:	f083 0301 	eor.w	r3, r3, #1
    2488:	b2db      	uxtb	r3, r3
    248a:	2b00      	cmp	r3, #0
    248c:	d002      	beq.n	2494 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    248e:	f06f 030c 	mvn.w	r3, #12
    2492:	e004      	b.n	249e <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    2494:	2101      	movs	r1, #1
    2496:	6878      	ldr	r0, [r7, #4]
    2498:	4b04      	ldr	r3, [pc, #16]	; (24ac <ext_irq_register+0x154>)
    249a:	4798      	blx	r3
    249c:	4603      	mov	r3, r0
}
    249e:	4618      	mov	r0, r3
    24a0:	3718      	adds	r7, #24
    24a2:	46bd      	mov	sp, r7
    24a4:	bd80      	pop	{r7, pc}
    24a6:	bf00      	nop
    24a8:	200009b0 	.word	0x200009b0
    24ac:	000049e5 	.word	0x000049e5

000024b0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    24b0:	b580      	push	{r7, lr}
    24b2:	b084      	sub	sp, #16
    24b4:	af00      	add	r7, sp, #0
    24b6:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    24b8:	2300      	movs	r3, #0
    24ba:	73fb      	strb	r3, [r7, #15]
    24bc:	2309      	movs	r3, #9
    24be:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    24c0:	e02a      	b.n	2518 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    24c2:	7bba      	ldrb	r2, [r7, #14]
    24c4:	7bfb      	ldrb	r3, [r7, #15]
    24c6:	4413      	add	r3, r2
    24c8:	105b      	asrs	r3, r3, #1
    24ca:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    24cc:	7b7b      	ldrb	r3, [r7, #13]
    24ce:	2b08      	cmp	r3, #8
    24d0:	d827      	bhi.n	2522 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    24d2:	7b7b      	ldrb	r3, [r7, #13]
    24d4:	4a16      	ldr	r2, [pc, #88]	; (2530 <process_ext_irq+0x80>)
    24d6:	00db      	lsls	r3, r3, #3
    24d8:	4413      	add	r3, r2
    24da:	685a      	ldr	r2, [r3, #4]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	429a      	cmp	r2, r3
    24e0:	d10b      	bne.n	24fa <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    24e2:	7b7b      	ldrb	r3, [r7, #13]
    24e4:	4a12      	ldr	r2, [pc, #72]	; (2530 <process_ext_irq+0x80>)
    24e6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    24ea:	2b00      	cmp	r3, #0
    24ec:	d01b      	beq.n	2526 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    24ee:	7b7b      	ldrb	r3, [r7, #13]
    24f0:	4a0f      	ldr	r2, [pc, #60]	; (2530 <process_ext_irq+0x80>)
    24f2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    24f6:	4798      	blx	r3
			}
			return;
    24f8:	e015      	b.n	2526 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    24fa:	7b7b      	ldrb	r3, [r7, #13]
    24fc:	4a0c      	ldr	r2, [pc, #48]	; (2530 <process_ext_irq+0x80>)
    24fe:	00db      	lsls	r3, r3, #3
    2500:	4413      	add	r3, r2
    2502:	685a      	ldr	r2, [r3, #4]
    2504:	687b      	ldr	r3, [r7, #4]
    2506:	429a      	cmp	r2, r3
    2508:	d203      	bcs.n	2512 <process_ext_irq+0x62>
			lower = middle + 1;
    250a:	7b7b      	ldrb	r3, [r7, #13]
    250c:	3301      	adds	r3, #1
    250e:	73fb      	strb	r3, [r7, #15]
    2510:	e002      	b.n	2518 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    2512:	7b7b      	ldrb	r3, [r7, #13]
    2514:	3b01      	subs	r3, #1
    2516:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    2518:	7bba      	ldrb	r2, [r7, #14]
    251a:	7bfb      	ldrb	r3, [r7, #15]
    251c:	429a      	cmp	r2, r3
    251e:	d2d0      	bcs.n	24c2 <process_ext_irq+0x12>
    2520:	e002      	b.n	2528 <process_ext_irq+0x78>
			return;
    2522:	bf00      	nop
    2524:	e000      	b.n	2528 <process_ext_irq+0x78>
			return;
    2526:	bf00      	nop
		}
	}
}
    2528:	3710      	adds	r7, #16
    252a:	46bd      	mov	sp, r7
    252c:	bd80      	pop	{r7, pc}
    252e:	bf00      	nop
    2530:	200009b0 	.word	0x200009b0

00002534 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    2534:	b580      	push	{r7, lr}
    2536:	b08a      	sub	sp, #40	; 0x28
    2538:	af00      	add	r7, sp, #0
    253a:	60f8      	str	r0, [r7, #12]
    253c:	60b9      	str	r1, [r7, #8]
    253e:	4613      	mov	r3, r2
    2540:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2542:	68fb      	ldr	r3, [r7, #12]
    2544:	3b14      	subs	r3, #20
    2546:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    254a:	8b9b      	ldrh	r3, [r3, #28]
    254c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    254e:	88fb      	ldrh	r3, [r7, #6]
    2550:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    2552:	f248 0301 	movw	r3, #32769	; 0x8001
    2556:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2558:	68bb      	ldr	r3, [r7, #8]
    255a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    255e:	f107 0214 	add.w	r2, r7, #20
    2562:	4611      	mov	r1, r2
    2564:	4618      	mov	r0, r3
    2566:	4b06      	ldr	r3, [pc, #24]	; (2580 <i2c_m_sync_read+0x4c>)
    2568:	4798      	blx	r3
    256a:	6238      	str	r0, [r7, #32]

	if (ret) {
    256c:	6a3b      	ldr	r3, [r7, #32]
    256e:	2b00      	cmp	r3, #0
    2570:	d001      	beq.n	2576 <i2c_m_sync_read+0x42>
		return ret;
    2572:	6a3b      	ldr	r3, [r7, #32]
    2574:	e000      	b.n	2578 <i2c_m_sync_read+0x44>
	}

	return n;
    2576:	88fb      	ldrh	r3, [r7, #6]
}
    2578:	4618      	mov	r0, r3
    257a:	3728      	adds	r7, #40	; 0x28
    257c:	46bd      	mov	sp, r7
    257e:	bd80      	pop	{r7, pc}
    2580:	0000692d 	.word	0x0000692d

00002584 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    2584:	b580      	push	{r7, lr}
    2586:	b08a      	sub	sp, #40	; 0x28
    2588:	af00      	add	r7, sp, #0
    258a:	60f8      	str	r0, [r7, #12]
    258c:	60b9      	str	r1, [r7, #8]
    258e:	4613      	mov	r3, r2
    2590:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2592:	68fb      	ldr	r3, [r7, #12]
    2594:	3b14      	subs	r3, #20
    2596:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    259a:	8b9b      	ldrh	r3, [r3, #28]
    259c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    259e:	88fb      	ldrh	r3, [r7, #6]
    25a0:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    25a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    25a6:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    25a8:	68bb      	ldr	r3, [r7, #8]
    25aa:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    25ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    25ae:	f107 0214 	add.w	r2, r7, #20
    25b2:	4611      	mov	r1, r2
    25b4:	4618      	mov	r0, r3
    25b6:	4b06      	ldr	r3, [pc, #24]	; (25d0 <i2c_m_sync_write+0x4c>)
    25b8:	4798      	blx	r3
    25ba:	6238      	str	r0, [r7, #32]

	if (ret) {
    25bc:	6a3b      	ldr	r3, [r7, #32]
    25be:	2b00      	cmp	r3, #0
    25c0:	d001      	beq.n	25c6 <i2c_m_sync_write+0x42>
		return ret;
    25c2:	6a3b      	ldr	r3, [r7, #32]
    25c4:	e000      	b.n	25c8 <i2c_m_sync_write+0x44>
	}

	return n;
    25c6:	88fb      	ldrh	r3, [r7, #6]
}
    25c8:	4618      	mov	r0, r3
    25ca:	3728      	adds	r7, #40	; 0x28
    25cc:	46bd      	mov	sp, r7
    25ce:	bd80      	pop	{r7, pc}
    25d0:	0000692d 	.word	0x0000692d

000025d4 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    25d4:	b580      	push	{r7, lr}
    25d6:	b084      	sub	sp, #16
    25d8:	af00      	add	r7, sp, #0
    25da:	6078      	str	r0, [r7, #4]
    25dc:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    25de:	687b      	ldr	r3, [r7, #4]
    25e0:	2b00      	cmp	r3, #0
    25e2:	bf14      	ite	ne
    25e4:	2301      	movne	r3, #1
    25e6:	2300      	moveq	r3, #0
    25e8:	b2db      	uxtb	r3, r3
    25ea:	225e      	movs	r2, #94	; 0x5e
    25ec:	490c      	ldr	r1, [pc, #48]	; (2620 <i2c_m_sync_init+0x4c>)
    25ee:	4618      	mov	r0, r3
    25f0:	4b0c      	ldr	r3, [pc, #48]	; (2624 <i2c_m_sync_init+0x50>)
    25f2:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    25f4:	687b      	ldr	r3, [r7, #4]
    25f6:	6839      	ldr	r1, [r7, #0]
    25f8:	4618      	mov	r0, r3
    25fa:	4b0b      	ldr	r3, [pc, #44]	; (2628 <i2c_m_sync_init+0x54>)
    25fc:	4798      	blx	r3
    25fe:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2600:	68fb      	ldr	r3, [r7, #12]
    2602:	2b00      	cmp	r3, #0
    2604:	d001      	beq.n	260a <i2c_m_sync_init+0x36>
		return init_status;
    2606:	68fb      	ldr	r3, [r7, #12]
    2608:	e006      	b.n	2618 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    260a:	687b      	ldr	r3, [r7, #4]
    260c:	4a07      	ldr	r2, [pc, #28]	; (262c <i2c_m_sync_init+0x58>)
    260e:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    2610:	687b      	ldr	r3, [r7, #4]
    2612:	4a07      	ldr	r2, [pc, #28]	; (2630 <i2c_m_sync_init+0x5c>)
    2614:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    2616:	2300      	movs	r3, #0
}
    2618:	4618      	mov	r0, r3
    261a:	3710      	adds	r7, #16
    261c:	46bd      	mov	sp, r7
    261e:	bd80      	pop	{r7, pc}
    2620:	0000ee1c 	.word	0x0000ee1c
    2624:	000038b5 	.word	0x000038b5
    2628:	000066cd 	.word	0x000066cd
    262c:	00002535 	.word	0x00002535
    2630:	00002585 	.word	0x00002585

00002634 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    2634:	b580      	push	{r7, lr}
    2636:	b082      	sub	sp, #8
    2638:	af00      	add	r7, sp, #0
    263a:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    263c:	687b      	ldr	r3, [r7, #4]
    263e:	4618      	mov	r0, r3
    2640:	4b03      	ldr	r3, [pc, #12]	; (2650 <i2c_m_sync_enable+0x1c>)
    2642:	4798      	blx	r3
    2644:	4603      	mov	r3, r0
}
    2646:	4618      	mov	r0, r3
    2648:	3708      	adds	r7, #8
    264a:	46bd      	mov	sp, r7
    264c:	bd80      	pop	{r7, pc}
    264e:	bf00      	nop
    2650:	00006715 	.word	0x00006715

00002654 <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    2654:	b580      	push	{r7, lr}
    2656:	b082      	sub	sp, #8
    2658:	af00      	add	r7, sp, #0
    265a:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_disable(&i2c->device);
    265c:	687b      	ldr	r3, [r7, #4]
    265e:	4618      	mov	r0, r3
    2660:	4b03      	ldr	r3, [pc, #12]	; (2670 <i2c_m_sync_disable+0x1c>)
    2662:	4798      	blx	r3
    2664:	4603      	mov	r3, r0
}
    2666:	4618      	mov	r0, r3
    2668:	3708      	adds	r7, #8
    266a:	46bd      	mov	sp, r7
    266c:	bd80      	pop	{r7, pc}
    266e:	bf00      	nop
    2670:	00006755 	.word	0x00006755

00002674 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    2674:	b480      	push	{r7}
    2676:	b085      	sub	sp, #20
    2678:	af00      	add	r7, sp, #0
    267a:	60f8      	str	r0, [r7, #12]
    267c:	460b      	mov	r3, r1
    267e:	607a      	str	r2, [r7, #4]
    2680:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    2682:	897b      	ldrh	r3, [r7, #10]
    2684:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2688:	b21a      	sxth	r2, r3
    268a:	687b      	ldr	r3, [r7, #4]
    268c:	b21b      	sxth	r3, r3
    268e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2692:	b21b      	sxth	r3, r3
    2694:	4313      	orrs	r3, r2
    2696:	b21b      	sxth	r3, r3
    2698:	b29a      	uxth	r2, r3
    269a:	68fb      	ldr	r3, [r7, #12]
    269c:	839a      	strh	r2, [r3, #28]
    269e:	68fb      	ldr	r3, [r7, #12]
    26a0:	8b9b      	ldrh	r3, [r3, #28]
}
    26a2:	4618      	mov	r0, r3
    26a4:	3714      	adds	r7, #20
    26a6:	46bd      	mov	sp, r7
    26a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    26ac:	4770      	bx	lr

000026ae <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    26ae:	b480      	push	{r7}
    26b0:	b083      	sub	sp, #12
    26b2:	af00      	add	r7, sp, #0
    26b4:	6078      	str	r0, [r7, #4]
    26b6:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    26b8:	687b      	ldr	r3, [r7, #4]
    26ba:	f103 0214 	add.w	r2, r3, #20
    26be:	683b      	ldr	r3, [r7, #0]
    26c0:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    26c2:	2300      	movs	r3, #0
}
    26c4:	4618      	mov	r0, r3
    26c6:	370c      	adds	r7, #12
    26c8:	46bd      	mov	sp, r7
    26ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    26ce:	4770      	bx	lr

000026d0 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    26d0:	b580      	push	{r7, lr}
    26d2:	b084      	sub	sp, #16
    26d4:	af00      	add	r7, sp, #0
    26d6:	60f8      	str	r0, [r7, #12]
    26d8:	60b9      	str	r1, [r7, #8]
    26da:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    26dc:	68fb      	ldr	r3, [r7, #12]
    26de:	2b00      	cmp	r3, #0
    26e0:	d004      	beq.n	26ec <pwm_init+0x1c>
    26e2:	68bb      	ldr	r3, [r7, #8]
    26e4:	2b00      	cmp	r3, #0
    26e6:	d001      	beq.n	26ec <pwm_init+0x1c>
    26e8:	2301      	movs	r3, #1
    26ea:	e000      	b.n	26ee <pwm_init+0x1e>
    26ec:	2300      	movs	r3, #0
    26ee:	f003 0301 	and.w	r3, r3, #1
    26f2:	b2db      	uxtb	r3, r3
    26f4:	2233      	movs	r2, #51	; 0x33
    26f6:	490a      	ldr	r1, [pc, #40]	; (2720 <pwm_init+0x50>)
    26f8:	4618      	mov	r0, r3
    26fa:	4b0a      	ldr	r3, [pc, #40]	; (2724 <pwm_init+0x54>)
    26fc:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    26fe:	68fb      	ldr	r3, [r7, #12]
    2700:	68b9      	ldr	r1, [r7, #8]
    2702:	4618      	mov	r0, r3
    2704:	4b08      	ldr	r3, [pc, #32]	; (2728 <pwm_init+0x58>)
    2706:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2708:	68fb      	ldr	r3, [r7, #12]
    270a:	4a08      	ldr	r2, [pc, #32]	; (272c <pwm_init+0x5c>)
    270c:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    270e:	68fb      	ldr	r3, [r7, #12]
    2710:	4a07      	ldr	r2, [pc, #28]	; (2730 <pwm_init+0x60>)
    2712:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2714:	2300      	movs	r3, #0
}
    2716:	4618      	mov	r0, r3
    2718:	3710      	adds	r7, #16
    271a:	46bd      	mov	sp, r7
    271c:	bd80      	pop	{r7, pc}
    271e:	bf00      	nop
    2720:	0000ee38 	.word	0x0000ee38
    2724:	000038b5 	.word	0x000038b5
    2728:	00007eed 	.word	0x00007eed
    272c:	00002789 	.word	0x00002789
    2730:	000027ad 	.word	0x000027ad

00002734 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    2734:	b580      	push	{r7, lr}
    2736:	b082      	sub	sp, #8
    2738:	af00      	add	r7, sp, #0
    273a:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    273c:	687b      	ldr	r3, [r7, #4]
    273e:	2b00      	cmp	r3, #0
    2740:	bf14      	ite	ne
    2742:	2301      	movne	r3, #1
    2744:	2300      	moveq	r3, #0
    2746:	b2db      	uxtb	r3, r3
    2748:	224a      	movs	r2, #74	; 0x4a
    274a:	490b      	ldr	r1, [pc, #44]	; (2778 <pwm_enable+0x44>)
    274c:	4618      	mov	r0, r3
    274e:	4b0b      	ldr	r3, [pc, #44]	; (277c <pwm_enable+0x48>)
    2750:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    2752:	687b      	ldr	r3, [r7, #4]
    2754:	4618      	mov	r0, r3
    2756:	4b0a      	ldr	r3, [pc, #40]	; (2780 <pwm_enable+0x4c>)
    2758:	4798      	blx	r3
    275a:	4603      	mov	r3, r0
    275c:	2b00      	cmp	r3, #0
    275e:	d002      	beq.n	2766 <pwm_enable+0x32>
		return ERR_DENIED;
    2760:	f06f 0310 	mvn.w	r3, #16
    2764:	e004      	b.n	2770 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    2766:	687b      	ldr	r3, [r7, #4]
    2768:	4618      	mov	r0, r3
    276a:	4b06      	ldr	r3, [pc, #24]	; (2784 <pwm_enable+0x50>)
    276c:	4798      	blx	r3

	return ERR_NONE;
    276e:	2300      	movs	r3, #0
}
    2770:	4618      	mov	r0, r3
    2772:	3708      	adds	r7, #8
    2774:	46bd      	mov	sp, r7
    2776:	bd80      	pop	{r7, pc}
    2778:	0000ee38 	.word	0x0000ee38
    277c:	000038b5 	.word	0x000038b5
    2780:	000082dd 	.word	0x000082dd
    2784:	00008199 	.word	0x00008199

00002788 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2788:	b580      	push	{r7, lr}
    278a:	b084      	sub	sp, #16
    278c:	af00      	add	r7, sp, #0
    278e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2790:	687b      	ldr	r3, [r7, #4]
    2792:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    2794:	68fb      	ldr	r3, [r7, #12]
    2796:	695b      	ldr	r3, [r3, #20]
    2798:	2b00      	cmp	r3, #0
    279a:	d003      	beq.n	27a4 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    279c:	68fb      	ldr	r3, [r7, #12]
    279e:	695b      	ldr	r3, [r3, #20]
    27a0:	68f8      	ldr	r0, [r7, #12]
    27a2:	4798      	blx	r3
	}
}
    27a4:	bf00      	nop
    27a6:	3710      	adds	r7, #16
    27a8:	46bd      	mov	sp, r7
    27aa:	bd80      	pop	{r7, pc}

000027ac <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    27ac:	b580      	push	{r7, lr}
    27ae:	b084      	sub	sp, #16
    27b0:	af00      	add	r7, sp, #0
    27b2:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    27b4:	687b      	ldr	r3, [r7, #4]
    27b6:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    27b8:	68fb      	ldr	r3, [r7, #12]
    27ba:	699b      	ldr	r3, [r3, #24]
    27bc:	2b00      	cmp	r3, #0
    27be:	d003      	beq.n	27c8 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    27c0:	68fb      	ldr	r3, [r7, #12]
    27c2:	699b      	ldr	r3, [r3, #24]
    27c4:	68f8      	ldr	r0, [r7, #12]
    27c6:	4798      	blx	r3
	}
}
    27c8:	bf00      	nop
    27ca:	3710      	adds	r7, #16
    27cc:	46bd      	mov	sp, r7
    27ce:	bd80      	pop	{r7, pc}

000027d0 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    27d0:	b580      	push	{r7, lr}
    27d2:	b082      	sub	sp, #8
    27d4:	af00      	add	r7, sp, #0
    27d6:	6078      	str	r0, [r7, #4]
    27d8:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    27da:	687b      	ldr	r3, [r7, #4]
    27dc:	2b00      	cmp	r3, #0
    27de:	d004      	beq.n	27ea <qspi_sync_init+0x1a>
    27e0:	683b      	ldr	r3, [r7, #0]
    27e2:	2b00      	cmp	r3, #0
    27e4:	d001      	beq.n	27ea <qspi_sync_init+0x1a>
    27e6:	2301      	movs	r3, #1
    27e8:	e000      	b.n	27ec <qspi_sync_init+0x1c>
    27ea:	2300      	movs	r3, #0
    27ec:	f003 0301 	and.w	r3, r3, #1
    27f0:	b2db      	uxtb	r3, r3
    27f2:	2231      	movs	r2, #49	; 0x31
    27f4:	4906      	ldr	r1, [pc, #24]	; (2810 <qspi_sync_init+0x40>)
    27f6:	4618      	mov	r0, r3
    27f8:	4b06      	ldr	r3, [pc, #24]	; (2814 <qspi_sync_init+0x44>)
    27fa:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    27fc:	687b      	ldr	r3, [r7, #4]
    27fe:	6839      	ldr	r1, [r7, #0]
    2800:	4618      	mov	r0, r3
    2802:	4b05      	ldr	r3, [pc, #20]	; (2818 <qspi_sync_init+0x48>)
    2804:	4798      	blx	r3
    2806:	4603      	mov	r3, r0
}
    2808:	4618      	mov	r0, r3
    280a:	3708      	adds	r7, #8
    280c:	46bd      	mov	sp, r7
    280e:	bd80      	pop	{r7, pc}
    2810:	0000ee50 	.word	0x0000ee50
    2814:	000038b5 	.word	0x000038b5
    2818:	000058ad 	.word	0x000058ad

0000281c <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    281c:	b580      	push	{r7, lr}
    281e:	b082      	sub	sp, #8
    2820:	af00      	add	r7, sp, #0
    2822:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2824:	687b      	ldr	r3, [r7, #4]
    2826:	2b00      	cmp	r3, #0
    2828:	bf14      	ite	ne
    282a:	2301      	movne	r3, #1
    282c:	2300      	moveq	r3, #0
    282e:	b2db      	uxtb	r3, r3
    2830:	223f      	movs	r2, #63	; 0x3f
    2832:	4906      	ldr	r1, [pc, #24]	; (284c <qspi_sync_enable+0x30>)
    2834:	4618      	mov	r0, r3
    2836:	4b06      	ldr	r3, [pc, #24]	; (2850 <qspi_sync_enable+0x34>)
    2838:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    283a:	687b      	ldr	r3, [r7, #4]
    283c:	4618      	mov	r0, r3
    283e:	4b05      	ldr	r3, [pc, #20]	; (2854 <qspi_sync_enable+0x38>)
    2840:	4798      	blx	r3
    2842:	4603      	mov	r3, r0
}
    2844:	4618      	mov	r0, r3
    2846:	3708      	adds	r7, #8
    2848:	46bd      	mov	sp, r7
    284a:	bd80      	pop	{r7, pc}
    284c:	0000ee50 	.word	0x0000ee50
    2850:	000038b5 	.word	0x000038b5
    2854:	00005921 	.word	0x00005921

00002858 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2858:	b580      	push	{r7, lr}
    285a:	b082      	sub	sp, #8
    285c:	af00      	add	r7, sp, #0
    285e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b00      	cmp	r3, #0
    2864:	bf14      	ite	ne
    2866:	2301      	movne	r3, #1
    2868:	2300      	moveq	r3, #0
    286a:	b2db      	uxtb	r3, r3
    286c:	2246      	movs	r2, #70	; 0x46
    286e:	4906      	ldr	r1, [pc, #24]	; (2888 <qspi_sync_disable+0x30>)
    2870:	4618      	mov	r0, r3
    2872:	4b06      	ldr	r3, [pc, #24]	; (288c <qspi_sync_disable+0x34>)
    2874:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    2876:	687b      	ldr	r3, [r7, #4]
    2878:	4618      	mov	r0, r3
    287a:	4b05      	ldr	r3, [pc, #20]	; (2890 <qspi_sync_disable+0x38>)
    287c:	4798      	blx	r3
    287e:	4603      	mov	r3, r0
}
    2880:	4618      	mov	r0, r3
    2882:	3708      	adds	r7, #8
    2884:	46bd      	mov	sp, r7
    2886:	bd80      	pop	{r7, pc}
    2888:	0000ee50 	.word	0x0000ee50
    288c:	000038b5 	.word	0x000038b5
    2890:	00005945 	.word	0x00005945

00002894 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2894:	b580      	push	{r7, lr}
    2896:	b082      	sub	sp, #8
    2898:	af00      	add	r7, sp, #0
    289a:	6078      	str	r0, [r7, #4]
    289c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    289e:	687b      	ldr	r3, [r7, #4]
    28a0:	2b00      	cmp	r3, #0
    28a2:	d004      	beq.n	28ae <qspi_sync_serial_run_command+0x1a>
    28a4:	683b      	ldr	r3, [r7, #0]
    28a6:	2b00      	cmp	r3, #0
    28a8:	d001      	beq.n	28ae <qspi_sync_serial_run_command+0x1a>
    28aa:	2301      	movs	r3, #1
    28ac:	e000      	b.n	28b0 <qspi_sync_serial_run_command+0x1c>
    28ae:	2300      	movs	r3, #0
    28b0:	f003 0301 	and.w	r3, r3, #1
    28b4:	b2db      	uxtb	r3, r3
    28b6:	224d      	movs	r2, #77	; 0x4d
    28b8:	4906      	ldr	r1, [pc, #24]	; (28d4 <qspi_sync_serial_run_command+0x40>)
    28ba:	4618      	mov	r0, r3
    28bc:	4b06      	ldr	r3, [pc, #24]	; (28d8 <qspi_sync_serial_run_command+0x44>)
    28be:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    28c0:	687b      	ldr	r3, [r7, #4]
    28c2:	6839      	ldr	r1, [r7, #0]
    28c4:	4618      	mov	r0, r3
    28c6:	4b05      	ldr	r3, [pc, #20]	; (28dc <qspi_sync_serial_run_command+0x48>)
    28c8:	4798      	blx	r3
    28ca:	4603      	mov	r3, r0
}
    28cc:	4618      	mov	r0, r3
    28ce:	3708      	adds	r7, #8
    28d0:	46bd      	mov	sp, r7
    28d2:	bd80      	pop	{r7, pc}
    28d4:	0000ee50 	.word	0x0000ee50
    28d8:	000038b5 	.word	0x000038b5
    28dc:	00005a91 	.word	0x00005a91

000028e0 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    28e0:	b580      	push	{r7, lr}
    28e2:	b084      	sub	sp, #16
    28e4:	af00      	add	r7, sp, #0
    28e6:	6078      	str	r0, [r7, #4]
    28e8:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    28ea:	2300      	movs	r3, #0
    28ec:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    28ee:	687b      	ldr	r3, [r7, #4]
    28f0:	2b00      	cmp	r3, #0
    28f2:	d004      	beq.n	28fe <spi_m_sync_init+0x1e>
    28f4:	683b      	ldr	r3, [r7, #0]
    28f6:	2b00      	cmp	r3, #0
    28f8:	d001      	beq.n	28fe <spi_m_sync_init+0x1e>
    28fa:	2301      	movs	r3, #1
    28fc:	e000      	b.n	2900 <spi_m_sync_init+0x20>
    28fe:	2300      	movs	r3, #0
    2900:	f003 0301 	and.w	r3, r3, #1
    2904:	b2db      	uxtb	r3, r3
    2906:	2240      	movs	r2, #64	; 0x40
    2908:	4910      	ldr	r1, [pc, #64]	; (294c <spi_m_sync_init+0x6c>)
    290a:	4618      	mov	r0, r3
    290c:	4b10      	ldr	r3, [pc, #64]	; (2950 <spi_m_sync_init+0x70>)
    290e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2910:	687b      	ldr	r3, [r7, #4]
    2912:	683a      	ldr	r2, [r7, #0]
    2914:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	3304      	adds	r3, #4
    291a:	6839      	ldr	r1, [r7, #0]
    291c:	4618      	mov	r0, r3
    291e:	4b0d      	ldr	r3, [pc, #52]	; (2954 <spi_m_sync_init+0x74>)
    2920:	4798      	blx	r3
    2922:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2924:	68fb      	ldr	r3, [r7, #12]
    2926:	2b00      	cmp	r3, #0
    2928:	da01      	bge.n	292e <spi_m_sync_init+0x4e>
		return rc;
    292a:	68fb      	ldr	r3, [r7, #12]
    292c:	e00a      	b.n	2944 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    292e:	687b      	ldr	r3, [r7, #4]
    2930:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2934:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2936:	687b      	ldr	r3, [r7, #4]
    2938:	4a07      	ldr	r2, [pc, #28]	; (2958 <spi_m_sync_init+0x78>)
    293a:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    293c:	687b      	ldr	r3, [r7, #4]
    293e:	4a07      	ldr	r2, [pc, #28]	; (295c <spi_m_sync_init+0x7c>)
    2940:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2942:	2300      	movs	r3, #0
}
    2944:	4618      	mov	r0, r3
    2946:	3710      	adds	r7, #16
    2948:	46bd      	mov	sp, r7
    294a:	bd80      	pop	{r7, pc}
    294c:	0000ee6c 	.word	0x0000ee6c
    2950:	000038b5 	.word	0x000038b5
    2954:	00006dc1 	.word	0x00006dc1
    2958:	00002961 	.word	0x00002961
    295c:	000029b9 	.word	0x000029b9

00002960 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2960:	b580      	push	{r7, lr}
    2962:	b088      	sub	sp, #32
    2964:	af00      	add	r7, sp, #0
    2966:	60f8      	str	r0, [r7, #12]
    2968:	60b9      	str	r1, [r7, #8]
    296a:	4613      	mov	r3, r2
    296c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    296e:	68fb      	ldr	r3, [r7, #12]
    2970:	2b00      	cmp	r3, #0
    2972:	bf14      	ite	ne
    2974:	2301      	movne	r3, #1
    2976:	2300      	moveq	r3, #0
    2978:	b2db      	uxtb	r3, r3
    297a:	2287      	movs	r2, #135	; 0x87
    297c:	490b      	ldr	r1, [pc, #44]	; (29ac <_spi_m_sync_io_read+0x4c>)
    297e:	4618      	mov	r0, r3
    2980:	4b0b      	ldr	r3, [pc, #44]	; (29b0 <_spi_m_sync_io_read+0x50>)
    2982:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2984:	68fb      	ldr	r3, [r7, #12]
    2986:	3b0c      	subs	r3, #12
    2988:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    298a:	68bb      	ldr	r3, [r7, #8]
    298c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    298e:	2300      	movs	r3, #0
    2990:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2992:	88fb      	ldrh	r3, [r7, #6]
    2994:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2996:	f107 0310 	add.w	r3, r7, #16
    299a:	4619      	mov	r1, r3
    299c:	69f8      	ldr	r0, [r7, #28]
    299e:	4b05      	ldr	r3, [pc, #20]	; (29b4 <_spi_m_sync_io_read+0x54>)
    29a0:	4798      	blx	r3
    29a2:	4603      	mov	r3, r0
}
    29a4:	4618      	mov	r0, r3
    29a6:	3720      	adds	r7, #32
    29a8:	46bd      	mov	sp, r7
    29aa:	bd80      	pop	{r7, pc}
    29ac:	0000ee6c 	.word	0x0000ee6c
    29b0:	000038b5 	.word	0x000038b5
    29b4:	00002a11 	.word	0x00002a11

000029b8 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    29b8:	b580      	push	{r7, lr}
    29ba:	b088      	sub	sp, #32
    29bc:	af00      	add	r7, sp, #0
    29be:	60f8      	str	r0, [r7, #12]
    29c0:	60b9      	str	r1, [r7, #8]
    29c2:	4613      	mov	r3, r2
    29c4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    29c6:	68fb      	ldr	r3, [r7, #12]
    29c8:	2b00      	cmp	r3, #0
    29ca:	bf14      	ite	ne
    29cc:	2301      	movne	r3, #1
    29ce:	2300      	moveq	r3, #0
    29d0:	b2db      	uxtb	r3, r3
    29d2:	22a3      	movs	r2, #163	; 0xa3
    29d4:	490b      	ldr	r1, [pc, #44]	; (2a04 <_spi_m_sync_io_write+0x4c>)
    29d6:	4618      	mov	r0, r3
    29d8:	4b0b      	ldr	r3, [pc, #44]	; (2a08 <_spi_m_sync_io_write+0x50>)
    29da:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    29dc:	68fb      	ldr	r3, [r7, #12]
    29de:	3b0c      	subs	r3, #12
    29e0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    29e2:	2300      	movs	r3, #0
    29e4:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    29e6:	68bb      	ldr	r3, [r7, #8]
    29e8:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    29ea:	88fb      	ldrh	r3, [r7, #6]
    29ec:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    29ee:	f107 0310 	add.w	r3, r7, #16
    29f2:	4619      	mov	r1, r3
    29f4:	69f8      	ldr	r0, [r7, #28]
    29f6:	4b05      	ldr	r3, [pc, #20]	; (2a0c <_spi_m_sync_io_write+0x54>)
    29f8:	4798      	blx	r3
    29fa:	4603      	mov	r3, r0
}
    29fc:	4618      	mov	r0, r3
    29fe:	3720      	adds	r7, #32
    2a00:	46bd      	mov	sp, r7
    2a02:	bd80      	pop	{r7, pc}
    2a04:	0000ee6c 	.word	0x0000ee6c
    2a08:	000038b5 	.word	0x000038b5
    2a0c:	00002a11 	.word	0x00002a11

00002a10 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2a10:	b580      	push	{r7, lr}
    2a12:	b086      	sub	sp, #24
    2a14:	af00      	add	r7, sp, #0
    2a16:	6078      	str	r0, [r7, #4]
    2a18:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2a1a:	687b      	ldr	r3, [r7, #4]
    2a1c:	2b00      	cmp	r3, #0
    2a1e:	d004      	beq.n	2a2a <spi_m_sync_transfer+0x1a>
    2a20:	683b      	ldr	r3, [r7, #0]
    2a22:	2b00      	cmp	r3, #0
    2a24:	d001      	beq.n	2a2a <spi_m_sync_transfer+0x1a>
    2a26:	2301      	movs	r3, #1
    2a28:	e000      	b.n	2a2c <spi_m_sync_transfer+0x1c>
    2a2a:	2300      	movs	r3, #0
    2a2c:	f003 0301 	and.w	r3, r3, #1
    2a30:	b2db      	uxtb	r3, r3
    2a32:	22b3      	movs	r2, #179	; 0xb3
    2a34:	490c      	ldr	r1, [pc, #48]	; (2a68 <spi_m_sync_transfer+0x58>)
    2a36:	4618      	mov	r0, r3
    2a38:	4b0c      	ldr	r3, [pc, #48]	; (2a6c <spi_m_sync_transfer+0x5c>)
    2a3a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2a3c:	683b      	ldr	r3, [r7, #0]
    2a3e:	681b      	ldr	r3, [r3, #0]
    2a40:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2a42:	683b      	ldr	r3, [r7, #0]
    2a44:	685b      	ldr	r3, [r3, #4]
    2a46:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2a48:	683b      	ldr	r3, [r7, #0]
    2a4a:	689b      	ldr	r3, [r3, #8]
    2a4c:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2a4e:	687b      	ldr	r3, [r7, #4]
    2a50:	3304      	adds	r3, #4
    2a52:	f107 020c 	add.w	r2, r7, #12
    2a56:	4611      	mov	r1, r2
    2a58:	4618      	mov	r0, r3
    2a5a:	4b05      	ldr	r3, [pc, #20]	; (2a70 <spi_m_sync_transfer+0x60>)
    2a5c:	4798      	blx	r3
    2a5e:	4603      	mov	r3, r0
}
    2a60:	4618      	mov	r0, r3
    2a62:	3718      	adds	r7, #24
    2a64:	46bd      	mov	sp, r7
    2a66:	bd80      	pop	{r7, pc}
    2a68:	0000ee6c 	.word	0x0000ee6c
    2a6c:	000038b5 	.word	0x000038b5
    2a70:	00007021 	.word	0x00007021

00002a74 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2a74:	b480      	push	{r7}
    2a76:	b083      	sub	sp, #12
    2a78:	af00      	add	r7, sp, #0
    2a7a:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2a7c:	687b      	ldr	r3, [r7, #4]
    2a7e:	681b      	ldr	r3, [r3, #0]
}
    2a80:	4618      	mov	r0, r3
    2a82:	370c      	adds	r7, #12
    2a84:	46bd      	mov	sp, r7
    2a86:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a8a:	4770      	bx	lr

00002a8c <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2a8c:	b480      	push	{r7}
    2a8e:	b083      	sub	sp, #12
    2a90:	af00      	add	r7, sp, #0
    2a92:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2a94:	687b      	ldr	r3, [r7, #4]
    2a96:	2b00      	cmp	r3, #0
    2a98:	d002      	beq.n	2aa0 <list_get_next_element+0x14>
    2a9a:	687b      	ldr	r3, [r7, #4]
    2a9c:	681b      	ldr	r3, [r3, #0]
    2a9e:	e000      	b.n	2aa2 <list_get_next_element+0x16>
    2aa0:	2300      	movs	r3, #0
}
    2aa2:	4618      	mov	r0, r3
    2aa4:	370c      	adds	r7, #12
    2aa6:	46bd      	mov	sp, r7
    2aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2aac:	4770      	bx	lr
	...

00002ab0 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2ab0:	b580      	push	{r7, lr}
    2ab2:	b084      	sub	sp, #16
    2ab4:	af00      	add	r7, sp, #0
    2ab6:	60f8      	str	r0, [r7, #12]
    2ab8:	60b9      	str	r1, [r7, #8]
    2aba:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2abc:	68fb      	ldr	r3, [r7, #12]
    2abe:	2b00      	cmp	r3, #0
    2ac0:	d007      	beq.n	2ad2 <timer_init+0x22>
    2ac2:	68bb      	ldr	r3, [r7, #8]
    2ac4:	2b00      	cmp	r3, #0
    2ac6:	d004      	beq.n	2ad2 <timer_init+0x22>
    2ac8:	687b      	ldr	r3, [r7, #4]
    2aca:	2b00      	cmp	r3, #0
    2acc:	d001      	beq.n	2ad2 <timer_init+0x22>
    2ace:	2301      	movs	r3, #1
    2ad0:	e000      	b.n	2ad4 <timer_init+0x24>
    2ad2:	2300      	movs	r3, #0
    2ad4:	f003 0301 	and.w	r3, r3, #1
    2ad8:	b2db      	uxtb	r3, r3
    2ada:	223b      	movs	r2, #59	; 0x3b
    2adc:	490c      	ldr	r1, [pc, #48]	; (2b10 <timer_init+0x60>)
    2ade:	4618      	mov	r0, r3
    2ae0:	4b0c      	ldr	r3, [pc, #48]	; (2b14 <timer_init+0x64>)
    2ae2:	4798      	blx	r3
	descr->func = func;
    2ae4:	68fb      	ldr	r3, [r7, #12]
    2ae6:	687a      	ldr	r2, [r7, #4]
    2ae8:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    2aea:	68fb      	ldr	r3, [r7, #12]
    2aec:	681b      	ldr	r3, [r3, #0]
    2aee:	681b      	ldr	r3, [r3, #0]
    2af0:	68fa      	ldr	r2, [r7, #12]
    2af2:	3204      	adds	r2, #4
    2af4:	68b9      	ldr	r1, [r7, #8]
    2af6:	4610      	mov	r0, r2
    2af8:	4798      	blx	r3
	descr->time                           = 0;
    2afa:	68fb      	ldr	r3, [r7, #12]
    2afc:	2200      	movs	r2, #0
    2afe:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2b00:	68fb      	ldr	r3, [r7, #12]
    2b02:	4a05      	ldr	r2, [pc, #20]	; (2b18 <timer_init+0x68>)
    2b04:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    2b06:	2300      	movs	r3, #0
}
    2b08:	4618      	mov	r0, r3
    2b0a:	3710      	adds	r7, #16
    2b0c:	46bd      	mov	sp, r7
    2b0e:	bd80      	pop	{r7, pc}
    2b10:	0000ee88 	.word	0x0000ee88
    2b14:	000038b5 	.word	0x000038b5
    2b18:	00002ea1 	.word	0x00002ea1

00002b1c <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2b1c:	b580      	push	{r7, lr}
    2b1e:	b082      	sub	sp, #8
    2b20:	af00      	add	r7, sp, #0
    2b22:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2b24:	687b      	ldr	r3, [r7, #4]
    2b26:	2b00      	cmp	r3, #0
    2b28:	d005      	beq.n	2b36 <timer_start+0x1a>
    2b2a:	687b      	ldr	r3, [r7, #4]
    2b2c:	681b      	ldr	r3, [r3, #0]
    2b2e:	2b00      	cmp	r3, #0
    2b30:	d001      	beq.n	2b36 <timer_start+0x1a>
    2b32:	2301      	movs	r3, #1
    2b34:	e000      	b.n	2b38 <timer_start+0x1c>
    2b36:	2300      	movs	r3, #0
    2b38:	f003 0301 	and.w	r3, r3, #1
    2b3c:	b2db      	uxtb	r3, r3
    2b3e:	2254      	movs	r2, #84	; 0x54
    2b40:	490e      	ldr	r1, [pc, #56]	; (2b7c <timer_start+0x60>)
    2b42:	4618      	mov	r0, r3
    2b44:	4b0e      	ldr	r3, [pc, #56]	; (2b80 <timer_start+0x64>)
    2b46:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    2b48:	687b      	ldr	r3, [r7, #4]
    2b4a:	681b      	ldr	r3, [r3, #0]
    2b4c:	699b      	ldr	r3, [r3, #24]
    2b4e:	687a      	ldr	r2, [r7, #4]
    2b50:	3204      	adds	r2, #4
    2b52:	4610      	mov	r0, r2
    2b54:	4798      	blx	r3
    2b56:	4603      	mov	r3, r0
    2b58:	2b00      	cmp	r3, #0
    2b5a:	d002      	beq.n	2b62 <timer_start+0x46>
		return ERR_DENIED;
    2b5c:	f06f 0310 	mvn.w	r3, #16
    2b60:	e007      	b.n	2b72 <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    2b62:	687b      	ldr	r3, [r7, #4]
    2b64:	681b      	ldr	r3, [r3, #0]
    2b66:	689b      	ldr	r3, [r3, #8]
    2b68:	687a      	ldr	r2, [r7, #4]
    2b6a:	3204      	adds	r2, #4
    2b6c:	4610      	mov	r0, r2
    2b6e:	4798      	blx	r3

	return ERR_NONE;
    2b70:	2300      	movs	r3, #0
}
    2b72:	4618      	mov	r0, r3
    2b74:	3708      	adds	r7, #8
    2b76:	46bd      	mov	sp, r7
    2b78:	bd80      	pop	{r7, pc}
    2b7a:	bf00      	nop
    2b7c:	0000ee88 	.word	0x0000ee88
    2b80:	000038b5 	.word	0x000038b5

00002b84 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    2b84:	b580      	push	{r7, lr}
    2b86:	b082      	sub	sp, #8
    2b88:	af00      	add	r7, sp, #0
    2b8a:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2b8c:	687b      	ldr	r3, [r7, #4]
    2b8e:	2b00      	cmp	r3, #0
    2b90:	d005      	beq.n	2b9e <timer_stop+0x1a>
    2b92:	687b      	ldr	r3, [r7, #4]
    2b94:	681b      	ldr	r3, [r3, #0]
    2b96:	2b00      	cmp	r3, #0
    2b98:	d001      	beq.n	2b9e <timer_stop+0x1a>
    2b9a:	2301      	movs	r3, #1
    2b9c:	e000      	b.n	2ba0 <timer_stop+0x1c>
    2b9e:	2300      	movs	r3, #0
    2ba0:	f003 0301 	and.w	r3, r3, #1
    2ba4:	b2db      	uxtb	r3, r3
    2ba6:	2262      	movs	r2, #98	; 0x62
    2ba8:	490f      	ldr	r1, [pc, #60]	; (2be8 <timer_stop+0x64>)
    2baa:	4618      	mov	r0, r3
    2bac:	4b0f      	ldr	r3, [pc, #60]	; (2bec <timer_stop+0x68>)
    2bae:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    2bb0:	687b      	ldr	r3, [r7, #4]
    2bb2:	681b      	ldr	r3, [r3, #0]
    2bb4:	699b      	ldr	r3, [r3, #24]
    2bb6:	687a      	ldr	r2, [r7, #4]
    2bb8:	3204      	adds	r2, #4
    2bba:	4610      	mov	r0, r2
    2bbc:	4798      	blx	r3
    2bbe:	4603      	mov	r3, r0
    2bc0:	f083 0301 	eor.w	r3, r3, #1
    2bc4:	b2db      	uxtb	r3, r3
    2bc6:	2b00      	cmp	r3, #0
    2bc8:	d002      	beq.n	2bd0 <timer_stop+0x4c>
		return ERR_DENIED;
    2bca:	f06f 0310 	mvn.w	r3, #16
    2bce:	e007      	b.n	2be0 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    2bd0:	687b      	ldr	r3, [r7, #4]
    2bd2:	681b      	ldr	r3, [r3, #0]
    2bd4:	68db      	ldr	r3, [r3, #12]
    2bd6:	687a      	ldr	r2, [r7, #4]
    2bd8:	3204      	adds	r2, #4
    2bda:	4610      	mov	r0, r2
    2bdc:	4798      	blx	r3

	return ERR_NONE;
    2bde:	2300      	movs	r3, #0
}
    2be0:	4618      	mov	r0, r3
    2be2:	3708      	adds	r7, #8
    2be4:	46bd      	mov	sp, r7
    2be6:	bd80      	pop	{r7, pc}
    2be8:	0000ee88 	.word	0x0000ee88
    2bec:	000038b5 	.word	0x000038b5

00002bf0 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    2bf0:	b580      	push	{r7, lr}
    2bf2:	b084      	sub	sp, #16
    2bf4:	af00      	add	r7, sp, #0
    2bf6:	6078      	str	r0, [r7, #4]
    2bf8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2bfa:	687b      	ldr	r3, [r7, #4]
    2bfc:	2b00      	cmp	r3, #0
    2bfe:	d008      	beq.n	2c12 <timer_add_task+0x22>
    2c00:	683b      	ldr	r3, [r7, #0]
    2c02:	2b00      	cmp	r3, #0
    2c04:	d005      	beq.n	2c12 <timer_add_task+0x22>
    2c06:	687b      	ldr	r3, [r7, #4]
    2c08:	681b      	ldr	r3, [r3, #0]
    2c0a:	2b00      	cmp	r3, #0
    2c0c:	d001      	beq.n	2c12 <timer_add_task+0x22>
    2c0e:	2301      	movs	r3, #1
    2c10:	e000      	b.n	2c14 <timer_add_task+0x24>
    2c12:	2300      	movs	r3, #0
    2c14:	f003 0301 	and.w	r3, r3, #1
    2c18:	b2db      	uxtb	r3, r3
    2c1a:	227b      	movs	r2, #123	; 0x7b
    2c1c:	492f      	ldr	r1, [pc, #188]	; (2cdc <timer_add_task+0xec>)
    2c1e:	4618      	mov	r0, r3
    2c20:	4b2f      	ldr	r3, [pc, #188]	; (2ce0 <timer_add_task+0xf0>)
    2c22:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2c24:	687b      	ldr	r3, [r7, #4]
    2c26:	7f1b      	ldrb	r3, [r3, #28]
    2c28:	b2db      	uxtb	r3, r3
    2c2a:	f043 0301 	orr.w	r3, r3, #1
    2c2e:	b2da      	uxtb	r2, r3
    2c30:	687b      	ldr	r3, [r7, #4]
    2c32:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    2c34:	687b      	ldr	r3, [r7, #4]
    2c36:	3318      	adds	r3, #24
    2c38:	6839      	ldr	r1, [r7, #0]
    2c3a:	4618      	mov	r0, r3
    2c3c:	4b29      	ldr	r3, [pc, #164]	; (2ce4 <timer_add_task+0xf4>)
    2c3e:	4798      	blx	r3
    2c40:	4603      	mov	r3, r0
    2c42:	2b00      	cmp	r3, #0
    2c44:	d00f      	beq.n	2c66 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2c46:	687b      	ldr	r3, [r7, #4]
    2c48:	7f1b      	ldrb	r3, [r3, #28]
    2c4a:	b2db      	uxtb	r3, r3
    2c4c:	f023 0301 	bic.w	r3, r3, #1
    2c50:	b2da      	uxtb	r2, r3
    2c52:	687b      	ldr	r3, [r7, #4]
    2c54:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2c56:	2280      	movs	r2, #128	; 0x80
    2c58:	4920      	ldr	r1, [pc, #128]	; (2cdc <timer_add_task+0xec>)
    2c5a:	2000      	movs	r0, #0
    2c5c:	4b20      	ldr	r3, [pc, #128]	; (2ce0 <timer_add_task+0xf0>)
    2c5e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2c60:	f06f 0311 	mvn.w	r3, #17
    2c64:	e035      	b.n	2cd2 <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    2c66:	687b      	ldr	r3, [r7, #4]
    2c68:	695a      	ldr	r2, [r3, #20]
    2c6a:	683b      	ldr	r3, [r7, #0]
    2c6c:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2c6e:	687b      	ldr	r3, [r7, #4]
    2c70:	f103 0018 	add.w	r0, r3, #24
    2c74:	687b      	ldr	r3, [r7, #4]
    2c76:	695b      	ldr	r3, [r3, #20]
    2c78:	461a      	mov	r2, r3
    2c7a:	6839      	ldr	r1, [r7, #0]
    2c7c:	4b1a      	ldr	r3, [pc, #104]	; (2ce8 <timer_add_task+0xf8>)
    2c7e:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2c80:	687b      	ldr	r3, [r7, #4]
    2c82:	7f1b      	ldrb	r3, [r3, #28]
    2c84:	b2db      	uxtb	r3, r3
    2c86:	f023 0301 	bic.w	r3, r3, #1
    2c8a:	b2da      	uxtb	r2, r3
    2c8c:	687b      	ldr	r3, [r7, #4]
    2c8e:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2c90:	687b      	ldr	r3, [r7, #4]
    2c92:	7f1b      	ldrb	r3, [r3, #28]
    2c94:	b2db      	uxtb	r3, r3
    2c96:	f003 0302 	and.w	r3, r3, #2
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	d018      	beq.n	2cd0 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    2c9e:	f107 030c 	add.w	r3, r7, #12
    2ca2:	4618      	mov	r0, r3
    2ca4:	4b11      	ldr	r3, [pc, #68]	; (2cec <timer_add_task+0xfc>)
    2ca6:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2ca8:	687b      	ldr	r3, [r7, #4]
    2caa:	7f1b      	ldrb	r3, [r3, #28]
    2cac:	b2db      	uxtb	r3, r3
    2cae:	f023 0302 	bic.w	r3, r3, #2
    2cb2:	b2da      	uxtb	r2, r3
    2cb4:	687b      	ldr	r3, [r7, #4]
    2cb6:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2cb8:	687b      	ldr	r3, [r7, #4]
    2cba:	681b      	ldr	r3, [r3, #0]
    2cbc:	69db      	ldr	r3, [r3, #28]
    2cbe:	687a      	ldr	r2, [r7, #4]
    2cc0:	3204      	adds	r2, #4
    2cc2:	4610      	mov	r0, r2
    2cc4:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2cc6:	f107 030c 	add.w	r3, r7, #12
    2cca:	4618      	mov	r0, r3
    2ccc:	4b08      	ldr	r3, [pc, #32]	; (2cf0 <timer_add_task+0x100>)
    2cce:	4798      	blx	r3
	}

	return ERR_NONE;
    2cd0:	2300      	movs	r3, #0
}
    2cd2:	4618      	mov	r0, r3
    2cd4:	3710      	adds	r7, #16
    2cd6:	46bd      	mov	sp, r7
    2cd8:	bd80      	pop	{r7, pc}
    2cda:	bf00      	nop
    2cdc:	0000ee88 	.word	0x0000ee88
    2ce0:	000038b5 	.word	0x000038b5
    2ce4:	000038dd 	.word	0x000038dd
    2ce8:	00002df1 	.word	0x00002df1
    2cec:	0000b43d 	.word	0x0000b43d
    2cf0:	0000b463 	.word	0x0000b463

00002cf4 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    2cf4:	b580      	push	{r7, lr}
    2cf6:	b084      	sub	sp, #16
    2cf8:	af00      	add	r7, sp, #0
    2cfa:	6078      	str	r0, [r7, #4]
    2cfc:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2cfe:	687b      	ldr	r3, [r7, #4]
    2d00:	2b00      	cmp	r3, #0
    2d02:	d008      	beq.n	2d16 <timer_remove_task+0x22>
    2d04:	683b      	ldr	r3, [r7, #0]
    2d06:	2b00      	cmp	r3, #0
    2d08:	d005      	beq.n	2d16 <timer_remove_task+0x22>
    2d0a:	687b      	ldr	r3, [r7, #4]
    2d0c:	681b      	ldr	r3, [r3, #0]
    2d0e:	2b00      	cmp	r3, #0
    2d10:	d001      	beq.n	2d16 <timer_remove_task+0x22>
    2d12:	2301      	movs	r3, #1
    2d14:	e000      	b.n	2d18 <timer_remove_task+0x24>
    2d16:	2300      	movs	r3, #0
    2d18:	f003 0301 	and.w	r3, r3, #1
    2d1c:	b2db      	uxtb	r3, r3
    2d1e:	2296      	movs	r2, #150	; 0x96
    2d20:	492d      	ldr	r1, [pc, #180]	; (2dd8 <timer_remove_task+0xe4>)
    2d22:	4618      	mov	r0, r3
    2d24:	4b2d      	ldr	r3, [pc, #180]	; (2ddc <timer_remove_task+0xe8>)
    2d26:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2d28:	687b      	ldr	r3, [r7, #4]
    2d2a:	7f1b      	ldrb	r3, [r3, #28]
    2d2c:	b2db      	uxtb	r3, r3
    2d2e:	f043 0301 	orr.w	r3, r3, #1
    2d32:	b2da      	uxtb	r2, r3
    2d34:	687b      	ldr	r3, [r7, #4]
    2d36:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    2d38:	687b      	ldr	r3, [r7, #4]
    2d3a:	3318      	adds	r3, #24
    2d3c:	6839      	ldr	r1, [r7, #0]
    2d3e:	4618      	mov	r0, r3
    2d40:	4b27      	ldr	r3, [pc, #156]	; (2de0 <timer_remove_task+0xec>)
    2d42:	4798      	blx	r3
    2d44:	4603      	mov	r3, r0
    2d46:	f083 0301 	eor.w	r3, r3, #1
    2d4a:	b2db      	uxtb	r3, r3
    2d4c:	2b00      	cmp	r3, #0
    2d4e:	d00f      	beq.n	2d70 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2d50:	687b      	ldr	r3, [r7, #4]
    2d52:	7f1b      	ldrb	r3, [r3, #28]
    2d54:	b2db      	uxtb	r3, r3
    2d56:	f023 0301 	bic.w	r3, r3, #1
    2d5a:	b2da      	uxtb	r2, r3
    2d5c:	687b      	ldr	r3, [r7, #4]
    2d5e:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2d60:	229b      	movs	r2, #155	; 0x9b
    2d62:	491d      	ldr	r1, [pc, #116]	; (2dd8 <timer_remove_task+0xe4>)
    2d64:	2000      	movs	r0, #0
    2d66:	4b1d      	ldr	r3, [pc, #116]	; (2ddc <timer_remove_task+0xe8>)
    2d68:	4798      	blx	r3
		return ERR_NOT_FOUND;
    2d6a:	f06f 0309 	mvn.w	r3, #9
    2d6e:	e02e      	b.n	2dce <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    2d70:	687b      	ldr	r3, [r7, #4]
    2d72:	3318      	adds	r3, #24
    2d74:	6839      	ldr	r1, [r7, #0]
    2d76:	4618      	mov	r0, r3
    2d78:	4b1a      	ldr	r3, [pc, #104]	; (2de4 <timer_remove_task+0xf0>)
    2d7a:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2d7c:	687b      	ldr	r3, [r7, #4]
    2d7e:	7f1b      	ldrb	r3, [r3, #28]
    2d80:	b2db      	uxtb	r3, r3
    2d82:	f023 0301 	bic.w	r3, r3, #1
    2d86:	b2da      	uxtb	r2, r3
    2d88:	687b      	ldr	r3, [r7, #4]
    2d8a:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2d8c:	687b      	ldr	r3, [r7, #4]
    2d8e:	7f1b      	ldrb	r3, [r3, #28]
    2d90:	b2db      	uxtb	r3, r3
    2d92:	f003 0302 	and.w	r3, r3, #2
    2d96:	2b00      	cmp	r3, #0
    2d98:	d018      	beq.n	2dcc <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    2d9a:	f107 030c 	add.w	r3, r7, #12
    2d9e:	4618      	mov	r0, r3
    2da0:	4b11      	ldr	r3, [pc, #68]	; (2de8 <timer_remove_task+0xf4>)
    2da2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2da4:	687b      	ldr	r3, [r7, #4]
    2da6:	7f1b      	ldrb	r3, [r3, #28]
    2da8:	b2db      	uxtb	r3, r3
    2daa:	f023 0302 	bic.w	r3, r3, #2
    2dae:	b2da      	uxtb	r2, r3
    2db0:	687b      	ldr	r3, [r7, #4]
    2db2:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2db4:	687b      	ldr	r3, [r7, #4]
    2db6:	681b      	ldr	r3, [r3, #0]
    2db8:	69db      	ldr	r3, [r3, #28]
    2dba:	687a      	ldr	r2, [r7, #4]
    2dbc:	3204      	adds	r2, #4
    2dbe:	4610      	mov	r0, r2
    2dc0:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2dc2:	f107 030c 	add.w	r3, r7, #12
    2dc6:	4618      	mov	r0, r3
    2dc8:	4b08      	ldr	r3, [pc, #32]	; (2dec <timer_remove_task+0xf8>)
    2dca:	4798      	blx	r3
	}

	return ERR_NONE;
    2dcc:	2300      	movs	r3, #0
}
    2dce:	4618      	mov	r0, r3
    2dd0:	3710      	adds	r7, #16
    2dd2:	46bd      	mov	sp, r7
    2dd4:	bd80      	pop	{r7, pc}
    2dd6:	bf00      	nop
    2dd8:	0000ee88 	.word	0x0000ee88
    2ddc:	000038b5 	.word	0x000038b5
    2de0:	000038dd 	.word	0x000038dd
    2de4:	00003a3f 	.word	0x00003a3f
    2de8:	0000b43d 	.word	0x0000b43d
    2dec:	0000b463 	.word	0x0000b463

00002df0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2df0:	b580      	push	{r7, lr}
    2df2:	b088      	sub	sp, #32
    2df4:	af00      	add	r7, sp, #0
    2df6:	60f8      	str	r0, [r7, #12]
    2df8:	60b9      	str	r1, [r7, #8]
    2dfa:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    2dfc:	2300      	movs	r3, #0
    2dfe:	61bb      	str	r3, [r7, #24]
    2e00:	68f8      	ldr	r0, [r7, #12]
    2e02:	4b23      	ldr	r3, [pc, #140]	; (2e90 <timer_add_timer_task+0xa0>)
    2e04:	4798      	blx	r3
    2e06:	6138      	str	r0, [r7, #16]

	if (!head) {
    2e08:	693b      	ldr	r3, [r7, #16]
    2e0a:	2b00      	cmp	r3, #0
    2e0c:	d104      	bne.n	2e18 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2e0e:	68b9      	ldr	r1, [r7, #8]
    2e10:	68f8      	ldr	r0, [r7, #12]
    2e12:	4b20      	ldr	r3, [pc, #128]	; (2e94 <timer_add_timer_task+0xa4>)
    2e14:	4798      	blx	r3
		return;
    2e16:	e037      	b.n	2e88 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2e18:	693b      	ldr	r3, [r7, #16]
    2e1a:	61fb      	str	r3, [r7, #28]
    2e1c:	e022      	b.n	2e64 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    2e1e:	69fb      	ldr	r3, [r7, #28]
    2e20:	685a      	ldr	r2, [r3, #4]
    2e22:	687b      	ldr	r3, [r7, #4]
    2e24:	429a      	cmp	r2, r3
    2e26:	d808      	bhi.n	2e3a <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2e28:	69fb      	ldr	r3, [r7, #28]
    2e2a:	689a      	ldr	r2, [r3, #8]
    2e2c:	69fb      	ldr	r3, [r7, #28]
    2e2e:	6859      	ldr	r1, [r3, #4]
    2e30:	687b      	ldr	r3, [r7, #4]
    2e32:	1acb      	subs	r3, r1, r3
    2e34:	4413      	add	r3, r2
    2e36:	617b      	str	r3, [r7, #20]
    2e38:	e009      	b.n	2e4e <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2e3a:	69fb      	ldr	r3, [r7, #28]
    2e3c:	689a      	ldr	r2, [r3, #8]
    2e3e:	69fb      	ldr	r3, [r7, #28]
    2e40:	685b      	ldr	r3, [r3, #4]
    2e42:	441a      	add	r2, r3
    2e44:	687b      	ldr	r3, [r7, #4]
    2e46:	425b      	negs	r3, r3
    2e48:	4413      	add	r3, r2
    2e4a:	3301      	adds	r3, #1
    2e4c:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    2e4e:	68bb      	ldr	r3, [r7, #8]
    2e50:	689a      	ldr	r2, [r3, #8]
    2e52:	697b      	ldr	r3, [r7, #20]
    2e54:	429a      	cmp	r2, r3
    2e56:	d909      	bls.n	2e6c <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2e58:	69fb      	ldr	r3, [r7, #28]
    2e5a:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2e5c:	69f8      	ldr	r0, [r7, #28]
    2e5e:	4b0e      	ldr	r3, [pc, #56]	; (2e98 <timer_add_timer_task+0xa8>)
    2e60:	4798      	blx	r3
    2e62:	61f8      	str	r0, [r7, #28]
    2e64:	69fb      	ldr	r3, [r7, #28]
    2e66:	2b00      	cmp	r3, #0
    2e68:	d1d9      	bne.n	2e1e <timer_add_timer_task+0x2e>
    2e6a:	e000      	b.n	2e6e <timer_add_timer_task+0x7e>
			break;
    2e6c:	bf00      	nop
	}

	if (it == head) {
    2e6e:	69fa      	ldr	r2, [r7, #28]
    2e70:	693b      	ldr	r3, [r7, #16]
    2e72:	429a      	cmp	r2, r3
    2e74:	d104      	bne.n	2e80 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    2e76:	68b9      	ldr	r1, [r7, #8]
    2e78:	68f8      	ldr	r0, [r7, #12]
    2e7a:	4b06      	ldr	r3, [pc, #24]	; (2e94 <timer_add_timer_task+0xa4>)
    2e7c:	4798      	blx	r3
    2e7e:	e003      	b.n	2e88 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2e80:	68b9      	ldr	r1, [r7, #8]
    2e82:	69b8      	ldr	r0, [r7, #24]
    2e84:	4b05      	ldr	r3, [pc, #20]	; (2e9c <timer_add_timer_task+0xac>)
    2e86:	4798      	blx	r3
	}
}
    2e88:	3720      	adds	r7, #32
    2e8a:	46bd      	mov	sp, r7
    2e8c:	bd80      	pop	{r7, pc}
    2e8e:	bf00      	nop
    2e90:	00002a75 	.word	0x00002a75
    2e94:	00003915 	.word	0x00003915
    2e98:	00002a8d 	.word	0x00002a8d
    2e9c:	0000396d 	.word	0x0000396d

00002ea0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2ea0:	b580      	push	{r7, lr}
    2ea2:	b086      	sub	sp, #24
    2ea4:	af00      	add	r7, sp, #0
    2ea6:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2ea8:	687b      	ldr	r3, [r7, #4]
    2eaa:	3b04      	subs	r3, #4
    2eac:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2eae:	693b      	ldr	r3, [r7, #16]
    2eb0:	3318      	adds	r3, #24
    2eb2:	4618      	mov	r0, r3
    2eb4:	4b27      	ldr	r3, [pc, #156]	; (2f54 <timer_process_counted+0xb4>)
    2eb6:	4798      	blx	r3
    2eb8:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2eba:	693b      	ldr	r3, [r7, #16]
    2ebc:	695b      	ldr	r3, [r3, #20]
    2ebe:	1c5a      	adds	r2, r3, #1
    2ec0:	693b      	ldr	r3, [r7, #16]
    2ec2:	615a      	str	r2, [r3, #20]
    2ec4:	693b      	ldr	r3, [r7, #16]
    2ec6:	695b      	ldr	r3, [r3, #20]
    2ec8:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2eca:	693b      	ldr	r3, [r7, #16]
    2ecc:	7f1b      	ldrb	r3, [r3, #28]
    2ece:	b2db      	uxtb	r3, r3
    2ed0:	f003 0301 	and.w	r3, r3, #1
    2ed4:	2b00      	cmp	r3, #0
    2ed6:	d106      	bne.n	2ee6 <timer_process_counted+0x46>
    2ed8:	693b      	ldr	r3, [r7, #16]
    2eda:	7f1b      	ldrb	r3, [r3, #28]
    2edc:	b2db      	uxtb	r3, r3
    2ede:	f003 0302 	and.w	r3, r3, #2
    2ee2:	2b00      	cmp	r3, #0
    2ee4:	d027      	beq.n	2f36 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2ee6:	693b      	ldr	r3, [r7, #16]
    2ee8:	7f1b      	ldrb	r3, [r3, #28]
    2eea:	b2db      	uxtb	r3, r3
    2eec:	f043 0302 	orr.w	r3, r3, #2
    2ef0:	b2da      	uxtb	r2, r3
    2ef2:	693b      	ldr	r3, [r7, #16]
    2ef4:	771a      	strb	r2, [r3, #28]
		return;
    2ef6:	e029      	b.n	2f4c <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2ef8:	697b      	ldr	r3, [r7, #20]
    2efa:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    2efc:	693b      	ldr	r3, [r7, #16]
    2efe:	3318      	adds	r3, #24
    2f00:	4618      	mov	r0, r3
    2f02:	4b15      	ldr	r3, [pc, #84]	; (2f58 <timer_process_counted+0xb8>)
    2f04:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2f06:	68bb      	ldr	r3, [r7, #8]
    2f08:	7c1b      	ldrb	r3, [r3, #16]
    2f0a:	2b01      	cmp	r3, #1
    2f0c:	d109      	bne.n	2f22 <timer_process_counted+0x82>
			tmp->time_label = time;
    2f0e:	68bb      	ldr	r3, [r7, #8]
    2f10:	68fa      	ldr	r2, [r7, #12]
    2f12:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2f14:	693b      	ldr	r3, [r7, #16]
    2f16:	3318      	adds	r3, #24
    2f18:	68fa      	ldr	r2, [r7, #12]
    2f1a:	68b9      	ldr	r1, [r7, #8]
    2f1c:	4618      	mov	r0, r3
    2f1e:	4b0f      	ldr	r3, [pc, #60]	; (2f5c <timer_process_counted+0xbc>)
    2f20:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2f22:	693b      	ldr	r3, [r7, #16]
    2f24:	3318      	adds	r3, #24
    2f26:	4618      	mov	r0, r3
    2f28:	4b0a      	ldr	r3, [pc, #40]	; (2f54 <timer_process_counted+0xb4>)
    2f2a:	4798      	blx	r3
    2f2c:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2f2e:	68bb      	ldr	r3, [r7, #8]
    2f30:	68db      	ldr	r3, [r3, #12]
    2f32:	68b8      	ldr	r0, [r7, #8]
    2f34:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2f36:	697b      	ldr	r3, [r7, #20]
    2f38:	2b00      	cmp	r3, #0
    2f3a:	d007      	beq.n	2f4c <timer_process_counted+0xac>
    2f3c:	697b      	ldr	r3, [r7, #20]
    2f3e:	685b      	ldr	r3, [r3, #4]
    2f40:	68fa      	ldr	r2, [r7, #12]
    2f42:	1ad2      	subs	r2, r2, r3
    2f44:	697b      	ldr	r3, [r7, #20]
    2f46:	689b      	ldr	r3, [r3, #8]
    2f48:	429a      	cmp	r2, r3
    2f4a:	d2d5      	bcs.n	2ef8 <timer_process_counted+0x58>
	}
}
    2f4c:	3718      	adds	r7, #24
    2f4e:	46bd      	mov	sp, r7
    2f50:	bd80      	pop	{r7, pc}
    2f52:	bf00      	nop
    2f54:	00002a75 	.word	0x00002a75
    2f58:	00003a0d 	.word	0x00003a0d
    2f5c:	00002df1 	.word	0x00002df1

00002f60 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2f60:	b480      	push	{r7}
    2f62:	b085      	sub	sp, #20
    2f64:	af00      	add	r7, sp, #0
    2f66:	4603      	mov	r3, r0
    2f68:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2f6a:	2300      	movs	r3, #0
    2f6c:	73fb      	strb	r3, [r7, #15]
    2f6e:	e029      	b.n	2fc4 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2f74:	4a19      	ldr	r2, [pc, #100]	; (2fdc <_usb_d_find_ep+0x7c>)
    2f76:	015b      	lsls	r3, r3, #5
    2f78:	4413      	add	r3, r2
    2f7a:	3301      	adds	r3, #1
    2f7c:	781b      	ldrb	r3, [r3, #0]
    2f7e:	79fa      	ldrb	r2, [r7, #7]
    2f80:	429a      	cmp	r2, r3
    2f82:	d102      	bne.n	2f8a <_usb_d_find_ep+0x2a>
			return i;
    2f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2f88:	e022      	b.n	2fd0 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2f8e:	4a13      	ldr	r2, [pc, #76]	; (2fdc <_usb_d_find_ep+0x7c>)
    2f90:	015b      	lsls	r3, r3, #5
    2f92:	4413      	add	r3, r2
    2f94:	781b      	ldrb	r3, [r3, #0]
    2f96:	2b00      	cmp	r3, #0
    2f98:	d10e      	bne.n	2fb8 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2f9a:	79fb      	ldrb	r3, [r7, #7]
    2f9c:	f003 030f 	and.w	r3, r3, #15
    2fa0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2fa4:	490d      	ldr	r1, [pc, #52]	; (2fdc <_usb_d_find_ep+0x7c>)
    2fa6:	0152      	lsls	r2, r2, #5
    2fa8:	440a      	add	r2, r1
    2faa:	3201      	adds	r2, #1
    2fac:	7812      	ldrb	r2, [r2, #0]
    2fae:	4293      	cmp	r3, r2
    2fb0:	d102      	bne.n	2fb8 <_usb_d_find_ep+0x58>
			return i;
    2fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2fb6:	e00b      	b.n	2fd0 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2fbc:	b2db      	uxtb	r3, r3
    2fbe:	3301      	adds	r3, #1
    2fc0:	b2db      	uxtb	r3, r3
    2fc2:	73fb      	strb	r3, [r7, #15]
    2fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2fc8:	2b03      	cmp	r3, #3
    2fca:	ddd1      	ble.n	2f70 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    2fcc:	f04f 33ff 	mov.w	r3, #4294967295
}
    2fd0:	4618      	mov	r0, r3
    2fd2:	3714      	adds	r7, #20
    2fd4:	46bd      	mov	sp, r7
    2fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fda:	4770      	bx	lr
    2fdc:	200009f8 	.word	0x200009f8

00002fe0 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    2fe0:	b580      	push	{r7, lr}
    2fe2:	b088      	sub	sp, #32
    2fe4:	af00      	add	r7, sp, #0
    2fe6:	60ba      	str	r2, [r7, #8]
    2fe8:	607b      	str	r3, [r7, #4]
    2fea:	4603      	mov	r3, r0
    2fec:	73fb      	strb	r3, [r7, #15]
    2fee:	460b      	mov	r3, r1
    2ff0:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    2ff2:	68bb      	ldr	r3, [r7, #8]
    2ff4:	617b      	str	r3, [r7, #20]
    2ff6:	687b      	ldr	r3, [r7, #4]
    2ff8:	61bb      	str	r3, [r7, #24]
    2ffa:	7bbb      	ldrb	r3, [r7, #14]
    2ffc:	2b00      	cmp	r3, #0
    2ffe:	d004      	beq.n	300a <_usb_d_trans+0x2a>
    3000:	7bfb      	ldrb	r3, [r7, #15]
    3002:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3006:	b2db      	uxtb	r3, r3
    3008:	e003      	b.n	3012 <_usb_d_trans+0x32>
    300a:	7bfb      	ldrb	r3, [r7, #15]
    300c:	f003 030f 	and.w	r3, r3, #15
    3010:	b2db      	uxtb	r3, r3
    3012:	773b      	strb	r3, [r7, #28]
    3014:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3018:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    301a:	f107 0314 	add.w	r3, r7, #20
    301e:	4618      	mov	r0, r3
    3020:	4b03      	ldr	r3, [pc, #12]	; (3030 <_usb_d_trans+0x50>)
    3022:	4798      	blx	r3
    3024:	4603      	mov	r3, r0
}
    3026:	4618      	mov	r0, r3
    3028:	3720      	adds	r7, #32
    302a:	46bd      	mov	sp, r7
    302c:	bd80      	pop	{r7, pc}
    302e:	bf00      	nop
    3030:	0000aa71 	.word	0x0000aa71

00003034 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    3034:	b480      	push	{r7}
    3036:	b085      	sub	sp, #20
    3038:	af00      	add	r7, sp, #0
    303a:	60f8      	str	r0, [r7, #12]
    303c:	60b9      	str	r1, [r7, #8]
    303e:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    3040:	2300      	movs	r3, #0
}
    3042:	4618      	mov	r0, r3
    3044:	3714      	adds	r7, #20
    3046:	46bd      	mov	sp, r7
    3048:	f85d 7b04 	ldr.w	r7, [sp], #4
    304c:	4770      	bx	lr
	...

00003050 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    3050:	b580      	push	{r7, lr}
    3052:	b086      	sub	sp, #24
    3054:	af00      	add	r7, sp, #0
    3056:	4603      	mov	r3, r0
    3058:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    305a:	79fb      	ldrb	r3, [r7, #7]
    305c:	4618      	mov	r0, r3
    305e:	4b2a      	ldr	r3, [pc, #168]	; (3108 <usb_d_cb_trans_setup+0xb8>)
    3060:	4798      	blx	r3
    3062:	4603      	mov	r3, r0
    3064:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3066:	f997 3017 	ldrsb.w	r3, [r7, #23]
    306a:	015b      	lsls	r3, r3, #5
    306c:	4a27      	ldr	r2, [pc, #156]	; (310c <usb_d_cb_trans_setup+0xbc>)
    306e:	4413      	add	r3, r2
    3070:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    3072:	693b      	ldr	r3, [r7, #16]
    3074:	330c      	adds	r3, #12
    3076:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    3078:	79fb      	ldrb	r3, [r7, #7]
    307a:	68f9      	ldr	r1, [r7, #12]
    307c:	4618      	mov	r0, r3
    307e:	4b24      	ldr	r3, [pc, #144]	; (3110 <usb_d_cb_trans_setup+0xc0>)
    3080:	4798      	blx	r3
    3082:	4603      	mov	r3, r0
    3084:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    3086:	7afb      	ldrb	r3, [r7, #11]
    3088:	2b08      	cmp	r3, #8
    308a:	d00d      	beq.n	30a8 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    308c:	79fb      	ldrb	r3, [r7, #7]
    308e:	2101      	movs	r1, #1
    3090:	4618      	mov	r0, r3
    3092:	4b20      	ldr	r3, [pc, #128]	; (3114 <usb_d_cb_trans_setup+0xc4>)
    3094:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3096:	79fb      	ldrb	r3, [r7, #7]
    3098:	f063 037f 	orn	r3, r3, #127	; 0x7f
    309c:	b2db      	uxtb	r3, r3
    309e:	2101      	movs	r1, #1
    30a0:	4618      	mov	r0, r3
    30a2:	4b1c      	ldr	r3, [pc, #112]	; (3114 <usb_d_cb_trans_setup+0xc4>)
    30a4:	4798      	blx	r3
		return;
    30a6:	e02b      	b.n	3100 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    30a8:	79fb      	ldrb	r3, [r7, #7]
    30aa:	2100      	movs	r1, #0
    30ac:	4618      	mov	r0, r3
    30ae:	4b19      	ldr	r3, [pc, #100]	; (3114 <usb_d_cb_trans_setup+0xc4>)
    30b0:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    30b2:	79fb      	ldrb	r3, [r7, #7]
    30b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    30b8:	b2db      	uxtb	r3, r3
    30ba:	2100      	movs	r1, #0
    30bc:	4618      	mov	r0, r3
    30be:	4b15      	ldr	r3, [pc, #84]	; (3114 <usb_d_cb_trans_setup+0xc4>)
    30c0:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    30c2:	693b      	ldr	r3, [r7, #16]
    30c4:	2201      	movs	r2, #1
    30c6:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    30c8:	693b      	ldr	r3, [r7, #16]
    30ca:	695b      	ldr	r3, [r3, #20]
    30cc:	79fa      	ldrb	r2, [r7, #7]
    30ce:	68f9      	ldr	r1, [r7, #12]
    30d0:	4610      	mov	r0, r2
    30d2:	4798      	blx	r3
    30d4:	4603      	mov	r3, r0
    30d6:	f083 0301 	eor.w	r3, r3, #1
    30da:	b2db      	uxtb	r3, r3
    30dc:	2b00      	cmp	r3, #0
    30de:	d00f      	beq.n	3100 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    30e0:	693b      	ldr	r3, [r7, #16]
    30e2:	2205      	movs	r2, #5
    30e4:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    30e6:	79fb      	ldrb	r3, [r7, #7]
    30e8:	2101      	movs	r1, #1
    30ea:	4618      	mov	r0, r3
    30ec:	4b09      	ldr	r3, [pc, #36]	; (3114 <usb_d_cb_trans_setup+0xc4>)
    30ee:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    30f0:	79fb      	ldrb	r3, [r7, #7]
    30f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    30f6:	b2db      	uxtb	r3, r3
    30f8:	2101      	movs	r1, #1
    30fa:	4618      	mov	r0, r3
    30fc:	4b05      	ldr	r3, [pc, #20]	; (3114 <usb_d_cb_trans_setup+0xc4>)
    30fe:	4798      	blx	r3
	}
}
    3100:	3718      	adds	r7, #24
    3102:	46bd      	mov	sp, r7
    3104:	bd80      	pop	{r7, pc}
    3106:	bf00      	nop
    3108:	00002f61 	.word	0x00002f61
    310c:	200009f8 	.word	0x200009f8
    3110:	0000a9c9 	.word	0x0000a9c9
    3114:	0000a841 	.word	0x0000a841

00003118 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3118:	b580      	push	{r7, lr}
    311a:	b084      	sub	sp, #16
    311c:	af00      	add	r7, sp, #0
    311e:	4603      	mov	r3, r0
    3120:	6039      	str	r1, [r7, #0]
    3122:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3124:	79fb      	ldrb	r3, [r7, #7]
    3126:	4618      	mov	r0, r3
    3128:	4b0d      	ldr	r3, [pc, #52]	; (3160 <usb_d_cb_trans_more+0x48>)
    312a:	4798      	blx	r3
    312c:	4603      	mov	r3, r0
    312e:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3130:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3134:	015b      	lsls	r3, r3, #5
    3136:	4a0b      	ldr	r2, [pc, #44]	; (3164 <usb_d_cb_trans_more+0x4c>)
    3138:	4413      	add	r3, r2
    313a:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    313c:	68bb      	ldr	r3, [r7, #8]
    313e:	789b      	ldrb	r3, [r3, #2]
    3140:	2b03      	cmp	r3, #3
    3142:	d107      	bne.n	3154 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    3144:	68bb      	ldr	r3, [r7, #8]
    3146:	699b      	ldr	r3, [r3, #24]
    3148:	79fa      	ldrb	r2, [r7, #7]
    314a:	6839      	ldr	r1, [r7, #0]
    314c:	4610      	mov	r0, r2
    314e:	4798      	blx	r3
    3150:	4603      	mov	r3, r0
    3152:	e000      	b.n	3156 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    3154:	2300      	movs	r3, #0
}
    3156:	4618      	mov	r0, r3
    3158:	3710      	adds	r7, #16
    315a:	46bd      	mov	sp, r7
    315c:	bd80      	pop	{r7, pc}
    315e:	bf00      	nop
    3160:	00002f61 	.word	0x00002f61
    3164:	200009f8 	.word	0x200009f8

00003168 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    3168:	b590      	push	{r4, r7, lr}
    316a:	b087      	sub	sp, #28
    316c:	af02      	add	r7, sp, #8
    316e:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    3170:	687b      	ldr	r3, [r7, #4]
    3172:	789b      	ldrb	r3, [r3, #2]
    3174:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    3176:	687b      	ldr	r3, [r7, #4]
    3178:	7b1b      	ldrb	r3, [r3, #12]
    317a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    317e:	2b00      	cmp	r3, #0
    3180:	bf14      	ite	ne
    3182:	2301      	movne	r3, #1
    3184:	2300      	moveq	r3, #0
    3186:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    3188:	7bfb      	ldrb	r3, [r7, #15]
    318a:	2b03      	cmp	r3, #3
    318c:	d13a      	bne.n	3204 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    318e:	687b      	ldr	r3, [r7, #4]
    3190:	69db      	ldr	r3, [r3, #28]
    3192:	687a      	ldr	r2, [r7, #4]
    3194:	7850      	ldrb	r0, [r2, #1]
    3196:	687a      	ldr	r2, [r7, #4]
    3198:	320c      	adds	r2, #12
    319a:	2101      	movs	r1, #1
    319c:	4798      	blx	r3
    319e:	4603      	mov	r3, r0
    31a0:	737b      	strb	r3, [r7, #13]
		if (err) {
    31a2:	7b7b      	ldrb	r3, [r7, #13]
    31a4:	2b00      	cmp	r3, #0
    31a6:	d015      	beq.n	31d4 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    31a8:	687b      	ldr	r3, [r7, #4]
    31aa:	2205      	movs	r2, #5
    31ac:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    31ae:	687b      	ldr	r3, [r7, #4]
    31b0:	2202      	movs	r2, #2
    31b2:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    31b4:	7bbb      	ldrb	r3, [r7, #14]
    31b6:	2b00      	cmp	r3, #0
    31b8:	d002      	beq.n	31c0 <usb_d_ctrl_trans_done+0x58>
    31ba:	687b      	ldr	r3, [r7, #4]
    31bc:	785b      	ldrb	r3, [r3, #1]
    31be:	e004      	b.n	31ca <usb_d_ctrl_trans_done+0x62>
    31c0:	687b      	ldr	r3, [r7, #4]
    31c2:	785b      	ldrb	r3, [r3, #1]
    31c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    31c8:	b2db      	uxtb	r3, r3
    31ca:	2101      	movs	r1, #1
    31cc:	4618      	mov	r0, r3
    31ce:	4b15      	ldr	r3, [pc, #84]	; (3224 <usb_d_ctrl_trans_done+0xbc>)
    31d0:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    31d2:	e022      	b.n	321a <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    31d4:	687b      	ldr	r3, [r7, #4]
    31d6:	2204      	movs	r2, #4
    31d8:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    31da:	687b      	ldr	r3, [r7, #4]
    31dc:	7858      	ldrb	r0, [r3, #1]
    31de:	7bbb      	ldrb	r3, [r7, #14]
    31e0:	2b00      	cmp	r3, #0
    31e2:	bf14      	ite	ne
    31e4:	2301      	movne	r3, #1
    31e6:	2300      	moveq	r3, #0
    31e8:	b2db      	uxtb	r3, r3
    31ea:	f083 0301 	eor.w	r3, r3, #1
    31ee:	b2db      	uxtb	r3, r3
    31f0:	f003 0301 	and.w	r3, r3, #1
    31f4:	b2d9      	uxtb	r1, r3
    31f6:	2301      	movs	r3, #1
    31f8:	9300      	str	r3, [sp, #0]
    31fa:	2300      	movs	r3, #0
    31fc:	2200      	movs	r2, #0
    31fe:	4c0a      	ldr	r4, [pc, #40]	; (3228 <usb_d_ctrl_trans_done+0xc0>)
    3200:	47a0      	blx	r4
}
    3202:	e00a      	b.n	321a <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    3204:	687b      	ldr	r3, [r7, #4]
    3206:	69db      	ldr	r3, [r3, #28]
    3208:	687a      	ldr	r2, [r7, #4]
    320a:	7850      	ldrb	r0, [r2, #1]
    320c:	687a      	ldr	r2, [r7, #4]
    320e:	320c      	adds	r2, #12
    3210:	2100      	movs	r1, #0
    3212:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3214:	687b      	ldr	r3, [r7, #4]
    3216:	2202      	movs	r2, #2
    3218:	709a      	strb	r2, [r3, #2]
}
    321a:	bf00      	nop
    321c:	3714      	adds	r7, #20
    321e:	46bd      	mov	sp, r7
    3220:	bd90      	pop	{r4, r7, pc}
    3222:	bf00      	nop
    3224:	0000a841 	.word	0x0000a841
    3228:	00002fe1 	.word	0x00002fe1

0000322c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    322c:	b580      	push	{r7, lr}
    322e:	b086      	sub	sp, #24
    3230:	af00      	add	r7, sp, #0
    3232:	4603      	mov	r3, r0
    3234:	60b9      	str	r1, [r7, #8]
    3236:	607a      	str	r2, [r7, #4]
    3238:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    323a:	7bfb      	ldrb	r3, [r7, #15]
    323c:	4618      	mov	r0, r3
    323e:	4b2f      	ldr	r3, [pc, #188]	; (32fc <_usb_d_cb_trans_done+0xd0>)
    3240:	4798      	blx	r3
    3242:	4603      	mov	r3, r0
    3244:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3246:	f997 3017 	ldrsb.w	r3, [r7, #23]
    324a:	015b      	lsls	r3, r3, #5
    324c:	4a2c      	ldr	r2, [pc, #176]	; (3300 <_usb_d_cb_trans_done+0xd4>)
    324e:	4413      	add	r3, r2
    3250:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    3252:	68bb      	ldr	r3, [r7, #8]
    3254:	2b00      	cmp	r3, #0
    3256:	d10e      	bne.n	3276 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3258:	693b      	ldr	r3, [r7, #16]
    325a:	2200      	movs	r2, #0
    325c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    325e:	693b      	ldr	r3, [r7, #16]
    3260:	781b      	ldrb	r3, [r3, #0]
    3262:	2b00      	cmp	r3, #0
    3264:	d103      	bne.n	326e <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    3266:	6938      	ldr	r0, [r7, #16]
    3268:	4b26      	ldr	r3, [pc, #152]	; (3304 <_usb_d_cb_trans_done+0xd8>)
    326a:	4798      	blx	r3
			return;
    326c:	e043      	b.n	32f6 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    326e:	693b      	ldr	r3, [r7, #16]
    3270:	2201      	movs	r2, #1
    3272:	709a      	strb	r2, [r3, #2]
    3274:	e038      	b.n	32e8 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    3276:	68bb      	ldr	r3, [r7, #8]
    3278:	2b01      	cmp	r3, #1
    327a:	d113      	bne.n	32a4 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    327c:	693b      	ldr	r3, [r7, #16]
    327e:	2202      	movs	r2, #2
    3280:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3282:	693b      	ldr	r3, [r7, #16]
    3284:	781b      	ldrb	r3, [r3, #0]
    3286:	2b00      	cmp	r3, #0
    3288:	d108      	bne.n	329c <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    328a:	693b      	ldr	r3, [r7, #16]
    328c:	2202      	movs	r2, #2
    328e:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3290:	7bfb      	ldrb	r3, [r7, #15]
    3292:	2100      	movs	r1, #0
    3294:	4618      	mov	r0, r3
    3296:	4b1c      	ldr	r3, [pc, #112]	; (3308 <_usb_d_cb_trans_done+0xdc>)
    3298:	4798      	blx	r3
    329a:	e025      	b.n	32e8 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    329c:	693b      	ldr	r3, [r7, #16]
    329e:	2205      	movs	r2, #5
    32a0:	709a      	strb	r2, [r3, #2]
    32a2:	e021      	b.n	32e8 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    32a4:	68bb      	ldr	r3, [r7, #8]
    32a6:	2b02      	cmp	r3, #2
    32a8:	d10e      	bne.n	32c8 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    32aa:	693b      	ldr	r3, [r7, #16]
    32ac:	2204      	movs	r2, #4
    32ae:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    32b0:	693b      	ldr	r3, [r7, #16]
    32b2:	781b      	ldrb	r3, [r3, #0]
    32b4:	2b00      	cmp	r3, #0
    32b6:	d103      	bne.n	32c0 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    32b8:	693b      	ldr	r3, [r7, #16]
    32ba:	2202      	movs	r2, #2
    32bc:	709a      	strb	r2, [r3, #2]
			return;
    32be:	e01a      	b.n	32f6 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    32c0:	693b      	ldr	r3, [r7, #16]
    32c2:	2201      	movs	r2, #1
    32c4:	709a      	strb	r2, [r3, #2]
    32c6:	e00f      	b.n	32e8 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    32c8:	68bb      	ldr	r3, [r7, #8]
    32ca:	2b03      	cmp	r3, #3
    32cc:	d106      	bne.n	32dc <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    32ce:	693b      	ldr	r3, [r7, #16]
    32d0:	2200      	movs	r2, #0
    32d2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    32d4:	693b      	ldr	r3, [r7, #16]
    32d6:	2205      	movs	r2, #5
    32d8:	70da      	strb	r2, [r3, #3]
    32da:	e005      	b.n	32e8 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    32dc:	693b      	ldr	r3, [r7, #16]
    32de:	2206      	movs	r2, #6
    32e0:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    32e2:	693b      	ldr	r3, [r7, #16]
    32e4:	2206      	movs	r2, #6
    32e6:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    32e8:	693b      	ldr	r3, [r7, #16]
    32ea:	69db      	ldr	r3, [r3, #28]
    32ec:	693a      	ldr	r2, [r7, #16]
    32ee:	78d1      	ldrb	r1, [r2, #3]
    32f0:	687a      	ldr	r2, [r7, #4]
    32f2:	7bf8      	ldrb	r0, [r7, #15]
    32f4:	4798      	blx	r3
}
    32f6:	3718      	adds	r7, #24
    32f8:	46bd      	mov	sp, r7
    32fa:	bd80      	pop	{r7, pc}
    32fc:	00002f61 	.word	0x00002f61
    3300:	200009f8 	.word	0x200009f8
    3304:	00003169 	.word	0x00003169
    3308:	0000a841 	.word	0x0000a841

0000330c <usb_d_init>:

int32_t usb_d_init(void)
{
    330c:	b580      	push	{r7, lr}
    330e:	b082      	sub	sp, #8
    3310:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    3312:	4b21      	ldr	r3, [pc, #132]	; (3398 <usb_d_init+0x8c>)
    3314:	4798      	blx	r3
    3316:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3318:	683b      	ldr	r3, [r7, #0]
    331a:	2b00      	cmp	r3, #0
    331c:	da01      	bge.n	3322 <usb_d_init+0x16>
		return rc;
    331e:	683b      	ldr	r3, [r7, #0]
    3320:	e036      	b.n	3390 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    3322:	2280      	movs	r2, #128	; 0x80
    3324:	2100      	movs	r1, #0
    3326:	481d      	ldr	r0, [pc, #116]	; (339c <usb_d_init+0x90>)
    3328:	4b1d      	ldr	r3, [pc, #116]	; (33a0 <usb_d_init+0x94>)
    332a:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    332c:	2300      	movs	r3, #0
    332e:	71fb      	strb	r3, [r7, #7]
    3330:	e01e      	b.n	3370 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    3332:	79fb      	ldrb	r3, [r7, #7]
    3334:	4a19      	ldr	r2, [pc, #100]	; (339c <usb_d_init+0x90>)
    3336:	015b      	lsls	r3, r3, #5
    3338:	4413      	add	r3, r2
    333a:	3301      	adds	r3, #1
    333c:	22ff      	movs	r2, #255	; 0xff
    333e:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    3340:	79fb      	ldrb	r3, [r7, #7]
    3342:	4a16      	ldr	r2, [pc, #88]	; (339c <usb_d_init+0x90>)
    3344:	015b      	lsls	r3, r3, #5
    3346:	4413      	add	r3, r2
    3348:	3314      	adds	r3, #20
    334a:	4a16      	ldr	r2, [pc, #88]	; (33a4 <usb_d_init+0x98>)
    334c:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    334e:	79fb      	ldrb	r3, [r7, #7]
    3350:	4a12      	ldr	r2, [pc, #72]	; (339c <usb_d_init+0x90>)
    3352:	015b      	lsls	r3, r3, #5
    3354:	4413      	add	r3, r2
    3356:	3318      	adds	r3, #24
    3358:	4a12      	ldr	r2, [pc, #72]	; (33a4 <usb_d_init+0x98>)
    335a:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    335c:	79fb      	ldrb	r3, [r7, #7]
    335e:	4a0f      	ldr	r2, [pc, #60]	; (339c <usb_d_init+0x90>)
    3360:	015b      	lsls	r3, r3, #5
    3362:	4413      	add	r3, r2
    3364:	331c      	adds	r3, #28
    3366:	4a0f      	ldr	r2, [pc, #60]	; (33a4 <usb_d_init+0x98>)
    3368:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    336a:	79fb      	ldrb	r3, [r7, #7]
    336c:	3301      	adds	r3, #1
    336e:	71fb      	strb	r3, [r7, #7]
    3370:	79fb      	ldrb	r3, [r7, #7]
    3372:	2b03      	cmp	r3, #3
    3374:	d9dd      	bls.n	3332 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    3376:	490c      	ldr	r1, [pc, #48]	; (33a8 <usb_d_init+0x9c>)
    3378:	2000      	movs	r0, #0
    337a:	4b0c      	ldr	r3, [pc, #48]	; (33ac <usb_d_init+0xa0>)
    337c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    337e:	490c      	ldr	r1, [pc, #48]	; (33b0 <usb_d_init+0xa4>)
    3380:	2001      	movs	r0, #1
    3382:	4b0a      	ldr	r3, [pc, #40]	; (33ac <usb_d_init+0xa0>)
    3384:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    3386:	490b      	ldr	r1, [pc, #44]	; (33b4 <usb_d_init+0xa8>)
    3388:	2002      	movs	r0, #2
    338a:	4b08      	ldr	r3, [pc, #32]	; (33ac <usb_d_init+0xa0>)
    338c:	4798      	blx	r3
	return ERR_NONE;
    338e:	2300      	movs	r3, #0
}
    3390:	4618      	mov	r0, r3
    3392:	3708      	adds	r7, #8
    3394:	46bd      	mov	sp, r7
    3396:	bd80      	pop	{r7, pc}
    3398:	0000a089 	.word	0x0000a089
    339c:	200009f8 	.word	0x200009f8
    33a0:	0000ebd5 	.word	0x0000ebd5
    33a4:	00003035 	.word	0x00003035
    33a8:	00003051 	.word	0x00003051
    33ac:	0000acd1 	.word	0x0000acd1
    33b0:	00003119 	.word	0x00003119
    33b4:	0000322d 	.word	0x0000322d

000033b8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    33b8:	b580      	push	{r7, lr}
    33ba:	b082      	sub	sp, #8
    33bc:	af00      	add	r7, sp, #0
    33be:	4603      	mov	r3, r0
    33c0:	6039      	str	r1, [r7, #0]
    33c2:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    33c4:	79fb      	ldrb	r3, [r7, #7]
    33c6:	6839      	ldr	r1, [r7, #0]
    33c8:	4618      	mov	r0, r3
    33ca:	4b03      	ldr	r3, [pc, #12]	; (33d8 <usb_d_register_callback+0x20>)
    33cc:	4798      	blx	r3
}
    33ce:	bf00      	nop
    33d0:	3708      	adds	r7, #8
    33d2:	46bd      	mov	sp, r7
    33d4:	bd80      	pop	{r7, pc}
    33d6:	bf00      	nop
    33d8:	0000ac89 	.word	0x0000ac89

000033dc <usb_d_enable>:

int32_t usb_d_enable(void)
{
    33dc:	b580      	push	{r7, lr}
    33de:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    33e0:	4b02      	ldr	r3, [pc, #8]	; (33ec <usb_d_enable+0x10>)
    33e2:	4798      	blx	r3
    33e4:	4603      	mov	r3, r0
}
    33e6:	4618      	mov	r0, r3
    33e8:	bd80      	pop	{r7, pc}
    33ea:	bf00      	nop
    33ec:	0000a179 	.word	0x0000a179

000033f0 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    33f0:	b580      	push	{r7, lr}
    33f2:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    33f4:	4b01      	ldr	r3, [pc, #4]	; (33fc <usb_d_attach+0xc>)
    33f6:	4798      	blx	r3
}
    33f8:	bf00      	nop
    33fa:	bd80      	pop	{r7, pc}
    33fc:	0000a1fd 	.word	0x0000a1fd

00003400 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    3400:	b580      	push	{r7, lr}
    3402:	b082      	sub	sp, #8
    3404:	af00      	add	r7, sp, #0
    3406:	4603      	mov	r3, r0
    3408:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    340a:	79fb      	ldrb	r3, [r7, #7]
    340c:	4618      	mov	r0, r3
    340e:	4b03      	ldr	r3, [pc, #12]	; (341c <usb_d_set_address+0x1c>)
    3410:	4798      	blx	r3
}
    3412:	bf00      	nop
    3414:	3708      	adds	r7, #8
    3416:	46bd      	mov	sp, r7
    3418:	bd80      	pop	{r7, pc}
    341a:	bf00      	nop
    341c:	0000a211 	.word	0x0000a211

00003420 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3420:	b580      	push	{r7, lr}
    3422:	b082      	sub	sp, #8
    3424:	af00      	add	r7, sp, #0
    3426:	4603      	mov	r3, r0
    3428:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    342a:	79fb      	ldrb	r3, [r7, #7]
    342c:	b29b      	uxth	r3, r3
    342e:	461a      	mov	r2, r3
    3430:	2100      	movs	r1, #0
    3432:	2000      	movs	r0, #0
    3434:	4b03      	ldr	r3, [pc, #12]	; (3444 <usb_d_ep0_init+0x24>)
    3436:	4798      	blx	r3
    3438:	4603      	mov	r3, r0
}
    343a:	4618      	mov	r0, r3
    343c:	3708      	adds	r7, #8
    343e:	46bd      	mov	sp, r7
    3440:	bd80      	pop	{r7, pc}
    3442:	bf00      	nop
    3444:	00003449 	.word	0x00003449

00003448 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3448:	b580      	push	{r7, lr}
    344a:	b086      	sub	sp, #24
    344c:	af00      	add	r7, sp, #0
    344e:	4603      	mov	r3, r0
    3450:	71fb      	strb	r3, [r7, #7]
    3452:	460b      	mov	r3, r1
    3454:	71bb      	strb	r3, [r7, #6]
    3456:	4613      	mov	r3, r2
    3458:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    345a:	79fb      	ldrb	r3, [r7, #7]
    345c:	4618      	mov	r0, r3
    345e:	4b1e      	ldr	r3, [pc, #120]	; (34d8 <usb_d_ep_init+0x90>)
    3460:	4798      	blx	r3
    3462:	4603      	mov	r3, r0
    3464:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3466:	f997 3017 	ldrsb.w	r3, [r7, #23]
    346a:	015b      	lsls	r3, r3, #5
    346c:	4a1b      	ldr	r2, [pc, #108]	; (34dc <usb_d_ep_init+0x94>)
    346e:	4413      	add	r3, r2
    3470:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    3472:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3476:	2b00      	cmp	r3, #0
    3478:	db02      	blt.n	3480 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    347a:	f06f 0313 	mvn.w	r3, #19
    347e:	e027      	b.n	34d0 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    3480:	20ff      	movs	r0, #255	; 0xff
    3482:	4b15      	ldr	r3, [pc, #84]	; (34d8 <usb_d_ep_init+0x90>)
    3484:	4798      	blx	r3
    3486:	4603      	mov	r3, r0
    3488:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    348a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    348e:	2b00      	cmp	r3, #0
    3490:	da02      	bge.n	3498 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    3492:	f06f 0314 	mvn.w	r3, #20
    3496:	e01b      	b.n	34d0 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3498:	f997 3017 	ldrsb.w	r3, [r7, #23]
    349c:	015b      	lsls	r3, r3, #5
    349e:	4a0f      	ldr	r2, [pc, #60]	; (34dc <usb_d_ep_init+0x94>)
    34a0:	4413      	add	r3, r2
    34a2:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    34a4:	88ba      	ldrh	r2, [r7, #4]
    34a6:	79b9      	ldrb	r1, [r7, #6]
    34a8:	79fb      	ldrb	r3, [r7, #7]
    34aa:	4618      	mov	r0, r3
    34ac:	4b0c      	ldr	r3, [pc, #48]	; (34e0 <usb_d_ep_init+0x98>)
    34ae:	4798      	blx	r3
    34b0:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    34b2:	68fb      	ldr	r3, [r7, #12]
    34b4:	2b00      	cmp	r3, #0
    34b6:	da01      	bge.n	34bc <usb_d_ep_init+0x74>
		return rc;
    34b8:	68fb      	ldr	r3, [r7, #12]
    34ba:	e009      	b.n	34d0 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    34bc:	693b      	ldr	r3, [r7, #16]
    34be:	79fa      	ldrb	r2, [r7, #7]
    34c0:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    34c2:	79bb      	ldrb	r3, [r7, #6]
    34c4:	f003 0303 	and.w	r3, r3, #3
    34c8:	b2da      	uxtb	r2, r3
    34ca:	693b      	ldr	r3, [r7, #16]
    34cc:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    34ce:	2300      	movs	r3, #0
}
    34d0:	4618      	mov	r0, r3
    34d2:	3718      	adds	r7, #24
    34d4:	46bd      	mov	sp, r7
    34d6:	bd80      	pop	{r7, pc}
    34d8:	00002f61 	.word	0x00002f61
    34dc:	200009f8 	.word	0x200009f8
    34e0:	0000a2b1 	.word	0x0000a2b1

000034e4 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    34e4:	b580      	push	{r7, lr}
    34e6:	b084      	sub	sp, #16
    34e8:	af00      	add	r7, sp, #0
    34ea:	4603      	mov	r3, r0
    34ec:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    34ee:	79fb      	ldrb	r3, [r7, #7]
    34f0:	4618      	mov	r0, r3
    34f2:	4b0d      	ldr	r3, [pc, #52]	; (3528 <usb_d_ep_deinit+0x44>)
    34f4:	4798      	blx	r3
    34f6:	4603      	mov	r3, r0
    34f8:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    34fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    34fe:	015b      	lsls	r3, r3, #5
    3500:	4a0a      	ldr	r2, [pc, #40]	; (352c <usb_d_ep_deinit+0x48>)
    3502:	4413      	add	r3, r2
    3504:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3506:	f997 300f 	ldrsb.w	r3, [r7, #15]
    350a:	2b00      	cmp	r3, #0
    350c:	db07      	blt.n	351e <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    350e:	79fb      	ldrb	r3, [r7, #7]
    3510:	4618      	mov	r0, r3
    3512:	4b07      	ldr	r3, [pc, #28]	; (3530 <usb_d_ep_deinit+0x4c>)
    3514:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    3516:	68bb      	ldr	r3, [r7, #8]
    3518:	22ff      	movs	r2, #255	; 0xff
    351a:	705a      	strb	r2, [r3, #1]
    351c:	e000      	b.n	3520 <usb_d_ep_deinit+0x3c>
		return;
    351e:	bf00      	nop
}
    3520:	3710      	adds	r7, #16
    3522:	46bd      	mov	sp, r7
    3524:	bd80      	pop	{r7, pc}
    3526:	bf00      	nop
    3528:	00002f61 	.word	0x00002f61
    352c:	200009f8 	.word	0x200009f8
    3530:	0000a3e5 	.word	0x0000a3e5

00003534 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3534:	b580      	push	{r7, lr}
    3536:	b086      	sub	sp, #24
    3538:	af00      	add	r7, sp, #0
    353a:	4603      	mov	r3, r0
    353c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    353e:	79fb      	ldrb	r3, [r7, #7]
    3540:	4618      	mov	r0, r3
    3542:	4b15      	ldr	r3, [pc, #84]	; (3598 <usb_d_ep_enable+0x64>)
    3544:	4798      	blx	r3
    3546:	4603      	mov	r3, r0
    3548:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    354a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    354e:	015b      	lsls	r3, r3, #5
    3550:	4a12      	ldr	r2, [pc, #72]	; (359c <usb_d_ep_enable+0x68>)
    3552:	4413      	add	r3, r2
    3554:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3556:	f997 3017 	ldrsb.w	r3, [r7, #23]
    355a:	2b00      	cmp	r3, #0
    355c:	da02      	bge.n	3564 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    355e:	f06f 0311 	mvn.w	r3, #17
    3562:	e014      	b.n	358e <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3564:	693b      	ldr	r3, [r7, #16]
    3566:	781b      	ldrb	r3, [r3, #0]
    3568:	2b00      	cmp	r3, #0
    356a:	d101      	bne.n	3570 <usb_d_ep_enable+0x3c>
    356c:	2202      	movs	r2, #2
    356e:	e000      	b.n	3572 <usb_d_ep_enable+0x3e>
    3570:	2201      	movs	r2, #1
    3572:	693b      	ldr	r3, [r7, #16]
    3574:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    3576:	79fb      	ldrb	r3, [r7, #7]
    3578:	4618      	mov	r0, r3
    357a:	4b09      	ldr	r3, [pc, #36]	; (35a0 <usb_d_ep_enable+0x6c>)
    357c:	4798      	blx	r3
    357e:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3580:	68fb      	ldr	r3, [r7, #12]
    3582:	2b00      	cmp	r3, #0
    3584:	da02      	bge.n	358c <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    3586:	693b      	ldr	r3, [r7, #16]
    3588:	2200      	movs	r2, #0
    358a:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    358c:	68fb      	ldr	r3, [r7, #12]
}
    358e:	4618      	mov	r0, r3
    3590:	3718      	adds	r7, #24
    3592:	46bd      	mov	sp, r7
    3594:	bd80      	pop	{r7, pc}
    3596:	bf00      	nop
    3598:	00002f61 	.word	0x00002f61
    359c:	200009f8 	.word	0x200009f8
    35a0:	0000a4c9 	.word	0x0000a4c9

000035a4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    35a4:	b590      	push	{r4, r7, lr}
    35a6:	b08d      	sub	sp, #52	; 0x34
    35a8:	af02      	add	r7, sp, #8
    35aa:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    35ac:	687b      	ldr	r3, [r7, #4]
    35ae:	7a1b      	ldrb	r3, [r3, #8]
    35b0:	4618      	mov	r0, r3
    35b2:	4b51      	ldr	r3, [pc, #324]	; (36f8 <usb_d_ep_transfer+0x154>)
    35b4:	4798      	blx	r3
    35b6:	4603      	mov	r3, r0
    35b8:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    35ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
    35be:	015b      	lsls	r3, r3, #5
    35c0:	4a4e      	ldr	r2, [pc, #312]	; (36fc <usb_d_ep_transfer+0x158>)
    35c2:	4413      	add	r3, r2
    35c4:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    35c6:	687b      	ldr	r3, [r7, #4]
    35c8:	7a1b      	ldrb	r3, [r3, #8]
    35ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    35ce:	2b00      	cmp	r3, #0
    35d0:	bf14      	ite	ne
    35d2:	2301      	movne	r3, #1
    35d4:	2300      	moveq	r3, #0
    35d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    35da:	687b      	ldr	r3, [r7, #4]
    35dc:	7a5b      	ldrb	r3, [r3, #9]
    35de:	2b00      	cmp	r3, #0
    35e0:	bf14      	ite	ne
    35e2:	2301      	movne	r3, #1
    35e4:	2300      	moveq	r3, #0
    35e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    35ea:	687b      	ldr	r3, [r7, #4]
    35ec:	685b      	ldr	r3, [r3, #4]
    35ee:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    35f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
    35f4:	2b00      	cmp	r3, #0
    35f6:	da02      	bge.n	35fe <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    35f8:	f06f 0311 	mvn.w	r3, #17
    35fc:	e077      	b.n	36ee <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    35fe:	f107 0308 	add.w	r3, r7, #8
    3602:	4618      	mov	r0, r3
    3604:	4b3e      	ldr	r3, [pc, #248]	; (3700 <usb_d_ep_transfer+0x15c>)
    3606:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3608:	69bb      	ldr	r3, [r7, #24]
    360a:	789b      	ldrb	r3, [r3, #2]
    360c:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    360e:	7bfb      	ldrb	r3, [r7, #15]
    3610:	b2db      	uxtb	r3, r3
    3612:	2b01      	cmp	r3, #1
    3614:	d10c      	bne.n	3630 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3616:	69bb      	ldr	r3, [r7, #24]
    3618:	2203      	movs	r2, #3
    361a:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    361c:	f107 0308 	add.w	r3, r7, #8
    3620:	4618      	mov	r0, r3
    3622:	4b38      	ldr	r3, [pc, #224]	; (3704 <usb_d_ep_transfer+0x160>)
    3624:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3626:	69bb      	ldr	r3, [r7, #24]
    3628:	781b      	ldrb	r3, [r3, #0]
    362a:	2b00      	cmp	r3, #0
    362c:	d151      	bne.n	36d2 <usb_d_ep_transfer+0x12e>
    362e:	e017      	b.n	3660 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3630:	f107 0308 	add.w	r3, r7, #8
    3634:	4618      	mov	r0, r3
    3636:	4b33      	ldr	r3, [pc, #204]	; (3704 <usb_d_ep_transfer+0x160>)
    3638:	4798      	blx	r3
		switch (state) {
    363a:	7bfb      	ldrb	r3, [r7, #15]
    363c:	b2db      	uxtb	r3, r3
    363e:	2b05      	cmp	r3, #5
    3640:	d004      	beq.n	364c <usb_d_ep_transfer+0xa8>
    3642:	2b06      	cmp	r3, #6
    3644:	d004      	beq.n	3650 <usb_d_ep_transfer+0xac>
    3646:	2b00      	cmp	r3, #0
    3648:	d005      	beq.n	3656 <usb_d_ep_transfer+0xb2>
    364a:	e007      	b.n	365c <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    364c:	2302      	movs	r3, #2
    364e:	e04e      	b.n	36ee <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3650:	f06f 030f 	mvn.w	r3, #15
    3654:	e04b      	b.n	36ee <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    3656:	f06f 0312 	mvn.w	r3, #18
    365a:	e048      	b.n	36ee <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    365c:	2301      	movs	r3, #1
    365e:	e046      	b.n	36ee <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3660:	69bb      	ldr	r3, [r7, #24]
    3662:	7c9b      	ldrb	r3, [r3, #18]
    3664:	b29a      	uxth	r2, r3
    3666:	69bb      	ldr	r3, [r7, #24]
    3668:	7cdb      	ldrb	r3, [r3, #19]
    366a:	b29b      	uxth	r3, r3
    366c:	021b      	lsls	r3, r3, #8
    366e:	b29b      	uxth	r3, r3
    3670:	4413      	add	r3, r2
    3672:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    3674:	8afb      	ldrh	r3, [r7, #22]
    3676:	2b00      	cmp	r3, #0
    3678:	d10b      	bne.n	3692 <usb_d_ep_transfer+0xee>
			dir                 = true;
    367a:	2301      	movs	r3, #1
    367c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    3680:	2300      	movs	r3, #0
    3682:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    3684:	2301      	movs	r3, #1
    3686:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    368a:	69bb      	ldr	r3, [r7, #24]
    368c:	2204      	movs	r2, #4
    368e:	709a      	strb	r2, [r3, #2]
    3690:	e01f      	b.n	36d2 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    3692:	69bb      	ldr	r3, [r7, #24]
    3694:	7b1b      	ldrb	r3, [r3, #12]
    3696:	f003 0380 	and.w	r3, r3, #128	; 0x80
    369a:	2b00      	cmp	r3, #0
    369c:	bf14      	ite	ne
    369e:	2301      	movne	r3, #1
    36a0:	2300      	moveq	r3, #0
    36a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    36a6:	8afa      	ldrh	r2, [r7, #22]
    36a8:	6a3b      	ldr	r3, [r7, #32]
    36aa:	429a      	cmp	r2, r3
    36ac:	d201      	bcs.n	36b2 <usb_d_ep_transfer+0x10e>
				len = req_len;
    36ae:	8afb      	ldrh	r3, [r7, #22]
    36b0:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    36b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    36b6:	2b00      	cmp	r3, #0
    36b8:	d008      	beq.n	36cc <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    36ba:	8afa      	ldrh	r2, [r7, #22]
    36bc:	6a3b      	ldr	r3, [r7, #32]
    36be:	429a      	cmp	r2, r3
    36c0:	bf8c      	ite	hi
    36c2:	2301      	movhi	r3, #1
    36c4:	2300      	movls	r3, #0
    36c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    36ca:	e002      	b.n	36d2 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    36cc:	2300      	movs	r3, #0
    36ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    36d2:	687b      	ldr	r3, [r7, #4]
    36d4:	7a18      	ldrb	r0, [r3, #8]
    36d6:	687b      	ldr	r3, [r7, #4]
    36d8:	681a      	ldr	r2, [r3, #0]
    36da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    36de:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    36e2:	9300      	str	r3, [sp, #0]
    36e4:	6a3b      	ldr	r3, [r7, #32]
    36e6:	4c08      	ldr	r4, [pc, #32]	; (3708 <usb_d_ep_transfer+0x164>)
    36e8:	47a0      	blx	r4
    36ea:	6138      	str	r0, [r7, #16]
	return rc;
    36ec:	693b      	ldr	r3, [r7, #16]
}
    36ee:	4618      	mov	r0, r3
    36f0:	372c      	adds	r7, #44	; 0x2c
    36f2:	46bd      	mov	sp, r7
    36f4:	bd90      	pop	{r4, r7, pc}
    36f6:	bf00      	nop
    36f8:	00002f61 	.word	0x00002f61
    36fc:	200009f8 	.word	0x200009f8
    3700:	0000b43d 	.word	0x0000b43d
    3704:	0000b463 	.word	0x0000b463
    3708:	00002fe1 	.word	0x00002fe1

0000370c <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    370c:	b580      	push	{r7, lr}
    370e:	b084      	sub	sp, #16
    3710:	af00      	add	r7, sp, #0
    3712:	4603      	mov	r3, r0
    3714:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3716:	79fb      	ldrb	r3, [r7, #7]
    3718:	4618      	mov	r0, r3
    371a:	4b0e      	ldr	r3, [pc, #56]	; (3754 <usb_d_ep_abort+0x48>)
    371c:	4798      	blx	r3
    371e:	4603      	mov	r3, r0
    3720:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3722:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3726:	015b      	lsls	r3, r3, #5
    3728:	4a0b      	ldr	r2, [pc, #44]	; (3758 <usb_d_ep_abort+0x4c>)
    372a:	4413      	add	r3, r2
    372c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    372e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3732:	2b00      	cmp	r3, #0
    3734:	db0a      	blt.n	374c <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    3736:	79fb      	ldrb	r3, [r7, #7]
    3738:	4618      	mov	r0, r3
    373a:	4b08      	ldr	r3, [pc, #32]	; (375c <usb_d_ep_abort+0x50>)
    373c:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    373e:	68bb      	ldr	r3, [r7, #8]
    3740:	2201      	movs	r2, #1
    3742:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    3744:	68bb      	ldr	r3, [r7, #8]
    3746:	2204      	movs	r2, #4
    3748:	70da      	strb	r2, [r3, #3]
    374a:	e000      	b.n	374e <usb_d_ep_abort+0x42>
		return;
    374c:	bf00      	nop
}
    374e:	3710      	adds	r7, #16
    3750:	46bd      	mov	sp, r7
    3752:	bd80      	pop	{r7, pc}
    3754:	00002f61 	.word	0x00002f61
    3758:	200009f8 	.word	0x200009f8
    375c:	0000ac35 	.word	0x0000ac35

00003760 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    3760:	b580      	push	{r7, lr}
    3762:	b086      	sub	sp, #24
    3764:	af00      	add	r7, sp, #0
    3766:	4603      	mov	r3, r0
    3768:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    376a:	79fb      	ldrb	r3, [r7, #7]
    376c:	4618      	mov	r0, r3
    376e:	4b1a      	ldr	r3, [pc, #104]	; (37d8 <_usb_d_ep_halt_clr+0x78>)
    3770:	4798      	blx	r3
    3772:	4603      	mov	r3, r0
    3774:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3776:	f997 3017 	ldrsb.w	r3, [r7, #23]
    377a:	015b      	lsls	r3, r3, #5
    377c:	4a17      	ldr	r2, [pc, #92]	; (37dc <_usb_d_ep_halt_clr+0x7c>)
    377e:	4413      	add	r3, r2
    3780:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3782:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3786:	2b00      	cmp	r3, #0
    3788:	da02      	bge.n	3790 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    378a:	f06f 0311 	mvn.w	r3, #17
    378e:	e01f      	b.n	37d0 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3790:	79fb      	ldrb	r3, [r7, #7]
    3792:	2102      	movs	r1, #2
    3794:	4618      	mov	r0, r3
    3796:	4b12      	ldr	r3, [pc, #72]	; (37e0 <_usb_d_ep_halt_clr+0x80>)
    3798:	4798      	blx	r3
    379a:	4603      	mov	r3, r0
    379c:	2b00      	cmp	r3, #0
    379e:	d016      	beq.n	37ce <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    37a0:	79fb      	ldrb	r3, [r7, #7]
    37a2:	2100      	movs	r1, #0
    37a4:	4618      	mov	r0, r3
    37a6:	4b0e      	ldr	r3, [pc, #56]	; (37e0 <_usb_d_ep_halt_clr+0x80>)
    37a8:	4798      	blx	r3
    37aa:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    37ac:	68fb      	ldr	r3, [r7, #12]
    37ae:	2b00      	cmp	r3, #0
    37b0:	da01      	bge.n	37b6 <_usb_d_ep_halt_clr+0x56>
			return rc;
    37b2:	68fb      	ldr	r3, [r7, #12]
    37b4:	e00c      	b.n	37d0 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    37b6:	693b      	ldr	r3, [r7, #16]
    37b8:	2201      	movs	r2, #1
    37ba:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    37bc:	693b      	ldr	r3, [r7, #16]
    37be:	2203      	movs	r2, #3
    37c0:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    37c2:	693b      	ldr	r3, [r7, #16]
    37c4:	69db      	ldr	r3, [r3, #28]
    37c6:	79f8      	ldrb	r0, [r7, #7]
    37c8:	2200      	movs	r2, #0
    37ca:	2103      	movs	r1, #3
    37cc:	4798      	blx	r3
	}
	return ERR_NONE;
    37ce:	2300      	movs	r3, #0
}
    37d0:	4618      	mov	r0, r3
    37d2:	3718      	adds	r7, #24
    37d4:	46bd      	mov	sp, r7
    37d6:	bd80      	pop	{r7, pc}
    37d8:	00002f61 	.word	0x00002f61
    37dc:	200009f8 	.word	0x200009f8
    37e0:	0000a841 	.word	0x0000a841

000037e4 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    37e4:	b580      	push	{r7, lr}
    37e6:	b082      	sub	sp, #8
    37e8:	af00      	add	r7, sp, #0
    37ea:	4603      	mov	r3, r0
    37ec:	460a      	mov	r2, r1
    37ee:	71fb      	strb	r3, [r7, #7]
    37f0:	4613      	mov	r3, r2
    37f2:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    37f4:	79bb      	ldrb	r3, [r7, #6]
    37f6:	2b00      	cmp	r3, #0
    37f8:	d105      	bne.n	3806 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    37fa:	79fb      	ldrb	r3, [r7, #7]
    37fc:	4618      	mov	r0, r3
    37fe:	4b0c      	ldr	r3, [pc, #48]	; (3830 <usb_d_ep_halt+0x4c>)
    3800:	4798      	blx	r3
    3802:	4603      	mov	r3, r0
    3804:	e00f      	b.n	3826 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    3806:	79bb      	ldrb	r3, [r7, #6]
    3808:	2b01      	cmp	r3, #1
    380a:	d106      	bne.n	381a <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    380c:	79fb      	ldrb	r3, [r7, #7]
    380e:	2101      	movs	r1, #1
    3810:	4618      	mov	r0, r3
    3812:	4b08      	ldr	r3, [pc, #32]	; (3834 <usb_d_ep_halt+0x50>)
    3814:	4798      	blx	r3
    3816:	4603      	mov	r3, r0
    3818:	e005      	b.n	3826 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    381a:	79fb      	ldrb	r3, [r7, #7]
    381c:	2102      	movs	r1, #2
    381e:	4618      	mov	r0, r3
    3820:	4b04      	ldr	r3, [pc, #16]	; (3834 <usb_d_ep_halt+0x50>)
    3822:	4798      	blx	r3
    3824:	4603      	mov	r3, r0
	}
}
    3826:	4618      	mov	r0, r3
    3828:	3708      	adds	r7, #8
    382a:	46bd      	mov	sp, r7
    382c:	bd80      	pop	{r7, pc}
    382e:	bf00      	nop
    3830:	00003761 	.word	0x00003761
    3834:	0000a841 	.word	0x0000a841

00003838 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3838:	b580      	push	{r7, lr}
    383a:	b086      	sub	sp, #24
    383c:	af00      	add	r7, sp, #0
    383e:	4603      	mov	r3, r0
    3840:	603a      	str	r2, [r7, #0]
    3842:	71fb      	strb	r3, [r7, #7]
    3844:	460b      	mov	r3, r1
    3846:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3848:	79fb      	ldrb	r3, [r7, #7]
    384a:	4618      	mov	r0, r3
    384c:	4b16      	ldr	r3, [pc, #88]	; (38a8 <usb_d_ep_register_callback+0x70>)
    384e:	4798      	blx	r3
    3850:	4603      	mov	r3, r0
    3852:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3854:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3858:	015b      	lsls	r3, r3, #5
    385a:	4a14      	ldr	r2, [pc, #80]	; (38ac <usb_d_ep_register_callback+0x74>)
    385c:	4413      	add	r3, r2
    385e:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3860:	683b      	ldr	r3, [r7, #0]
    3862:	2b00      	cmp	r3, #0
    3864:	d001      	beq.n	386a <usb_d_ep_register_callback+0x32>
    3866:	683b      	ldr	r3, [r7, #0]
    3868:	e000      	b.n	386c <usb_d_ep_register_callback+0x34>
    386a:	4b11      	ldr	r3, [pc, #68]	; (38b0 <usb_d_ep_register_callback+0x78>)
    386c:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    386e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3872:	2b00      	cmp	r3, #0
    3874:	db13      	blt.n	389e <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    3876:	79bb      	ldrb	r3, [r7, #6]
    3878:	2b01      	cmp	r3, #1
    387a:	d008      	beq.n	388e <usb_d_ep_register_callback+0x56>
    387c:	2b02      	cmp	r3, #2
    387e:	d00a      	beq.n	3896 <usb_d_ep_register_callback+0x5e>
    3880:	2b00      	cmp	r3, #0
    3882:	d000      	beq.n	3886 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    3884:	e00c      	b.n	38a0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    3886:	693b      	ldr	r3, [r7, #16]
    3888:	68fa      	ldr	r2, [r7, #12]
    388a:	615a      	str	r2, [r3, #20]
		break;
    388c:	e008      	b.n	38a0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    388e:	693b      	ldr	r3, [r7, #16]
    3890:	68fa      	ldr	r2, [r7, #12]
    3892:	619a      	str	r2, [r3, #24]
		break;
    3894:	e004      	b.n	38a0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    3896:	693b      	ldr	r3, [r7, #16]
    3898:	68fa      	ldr	r2, [r7, #12]
    389a:	61da      	str	r2, [r3, #28]
		break;
    389c:	e000      	b.n	38a0 <usb_d_ep_register_callback+0x68>
		return;
    389e:	bf00      	nop
	}
}
    38a0:	3718      	adds	r7, #24
    38a2:	46bd      	mov	sp, r7
    38a4:	bd80      	pop	{r7, pc}
    38a6:	bf00      	nop
    38a8:	00002f61 	.word	0x00002f61
    38ac:	200009f8 	.word	0x200009f8
    38b0:	00003035 	.word	0x00003035

000038b4 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    38b4:	b480      	push	{r7}
    38b6:	b085      	sub	sp, #20
    38b8:	af00      	add	r7, sp, #0
    38ba:	4603      	mov	r3, r0
    38bc:	60b9      	str	r1, [r7, #8]
    38be:	607a      	str	r2, [r7, #4]
    38c0:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    38c2:	7bfb      	ldrb	r3, [r7, #15]
    38c4:	f083 0301 	eor.w	r3, r3, #1
    38c8:	b2db      	uxtb	r3, r3
    38ca:	2b00      	cmp	r3, #0
    38cc:	d000      	beq.n	38d0 <assert+0x1c>
		__asm("BKPT #0");
    38ce:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    38d0:	bf00      	nop
    38d2:	3714      	adds	r7, #20
    38d4:	46bd      	mov	sp, r7
    38d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    38da:	4770      	bx	lr

000038dc <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    38dc:	b480      	push	{r7}
    38de:	b085      	sub	sp, #20
    38e0:	af00      	add	r7, sp, #0
    38e2:	6078      	str	r0, [r7, #4]
    38e4:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    38e6:	687b      	ldr	r3, [r7, #4]
    38e8:	681b      	ldr	r3, [r3, #0]
    38ea:	60fb      	str	r3, [r7, #12]
    38ec:	e008      	b.n	3900 <is_list_element+0x24>
		if (it == element) {
    38ee:	68fa      	ldr	r2, [r7, #12]
    38f0:	683b      	ldr	r3, [r7, #0]
    38f2:	429a      	cmp	r2, r3
    38f4:	d101      	bne.n	38fa <is_list_element+0x1e>
			return true;
    38f6:	2301      	movs	r3, #1
    38f8:	e006      	b.n	3908 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    38fa:	68fb      	ldr	r3, [r7, #12]
    38fc:	681b      	ldr	r3, [r3, #0]
    38fe:	60fb      	str	r3, [r7, #12]
    3900:	68fb      	ldr	r3, [r7, #12]
    3902:	2b00      	cmp	r3, #0
    3904:	d1f3      	bne.n	38ee <is_list_element+0x12>
		}
	}

	return false;
    3906:	2300      	movs	r3, #0
}
    3908:	4618      	mov	r0, r3
    390a:	3714      	adds	r7, #20
    390c:	46bd      	mov	sp, r7
    390e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3912:	4770      	bx	lr

00003914 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3914:	b580      	push	{r7, lr}
    3916:	b082      	sub	sp, #8
    3918:	af00      	add	r7, sp, #0
    391a:	6078      	str	r0, [r7, #4]
    391c:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    391e:	6839      	ldr	r1, [r7, #0]
    3920:	6878      	ldr	r0, [r7, #4]
    3922:	4b0f      	ldr	r3, [pc, #60]	; (3960 <list_insert_as_head+0x4c>)
    3924:	4798      	blx	r3
    3926:	4603      	mov	r3, r0
    3928:	2b00      	cmp	r3, #0
    392a:	bf14      	ite	ne
    392c:	2301      	movne	r3, #1
    392e:	2300      	moveq	r3, #0
    3930:	b2db      	uxtb	r3, r3
    3932:	f083 0301 	eor.w	r3, r3, #1
    3936:	b2db      	uxtb	r3, r3
    3938:	f003 0301 	and.w	r3, r3, #1
    393c:	b2db      	uxtb	r3, r3
    393e:	2239      	movs	r2, #57	; 0x39
    3940:	4908      	ldr	r1, [pc, #32]	; (3964 <list_insert_as_head+0x50>)
    3942:	4618      	mov	r0, r3
    3944:	4b08      	ldr	r3, [pc, #32]	; (3968 <list_insert_as_head+0x54>)
    3946:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3948:	687b      	ldr	r3, [r7, #4]
    394a:	681a      	ldr	r2, [r3, #0]
    394c:	683b      	ldr	r3, [r7, #0]
    394e:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3950:	687b      	ldr	r3, [r7, #4]
    3952:	683a      	ldr	r2, [r7, #0]
    3954:	601a      	str	r2, [r3, #0]
}
    3956:	bf00      	nop
    3958:	3708      	adds	r7, #8
    395a:	46bd      	mov	sp, r7
    395c:	bd80      	pop	{r7, pc}
    395e:	bf00      	nop
    3960:	000038dd 	.word	0x000038dd
    3964:	0000eea0 	.word	0x0000eea0
    3968:	000038b5 	.word	0x000038b5

0000396c <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    396c:	b480      	push	{r7}
    396e:	b083      	sub	sp, #12
    3970:	af00      	add	r7, sp, #0
    3972:	6078      	str	r0, [r7, #4]
    3974:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    3976:	687b      	ldr	r3, [r7, #4]
    3978:	681a      	ldr	r2, [r3, #0]
    397a:	683b      	ldr	r3, [r7, #0]
    397c:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    397e:	687b      	ldr	r3, [r7, #4]
    3980:	683a      	ldr	r2, [r7, #0]
    3982:	601a      	str	r2, [r3, #0]
}
    3984:	bf00      	nop
    3986:	370c      	adds	r7, #12
    3988:	46bd      	mov	sp, r7
    398a:	f85d 7b04 	ldr.w	r7, [sp], #4
    398e:	4770      	bx	lr

00003990 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3990:	b580      	push	{r7, lr}
    3992:	b084      	sub	sp, #16
    3994:	af00      	add	r7, sp, #0
    3996:	6078      	str	r0, [r7, #4]
    3998:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    399a:	687b      	ldr	r3, [r7, #4]
    399c:	681b      	ldr	r3, [r3, #0]
    399e:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    39a0:	6839      	ldr	r1, [r7, #0]
    39a2:	6878      	ldr	r0, [r7, #4]
    39a4:	4b16      	ldr	r3, [pc, #88]	; (3a00 <list_insert_at_end+0x70>)
    39a6:	4798      	blx	r3
    39a8:	4603      	mov	r3, r0
    39aa:	2b00      	cmp	r3, #0
    39ac:	bf14      	ite	ne
    39ae:	2301      	movne	r3, #1
    39b0:	2300      	moveq	r3, #0
    39b2:	b2db      	uxtb	r3, r3
    39b4:	f083 0301 	eor.w	r3, r3, #1
    39b8:	b2db      	uxtb	r3, r3
    39ba:	f003 0301 	and.w	r3, r3, #1
    39be:	b2db      	uxtb	r3, r3
    39c0:	224f      	movs	r2, #79	; 0x4f
    39c2:	4910      	ldr	r1, [pc, #64]	; (3a04 <list_insert_at_end+0x74>)
    39c4:	4618      	mov	r0, r3
    39c6:	4b10      	ldr	r3, [pc, #64]	; (3a08 <list_insert_at_end+0x78>)
    39c8:	4798      	blx	r3

	if (!list->head) {
    39ca:	687b      	ldr	r3, [r7, #4]
    39cc:	681b      	ldr	r3, [r3, #0]
    39ce:	2b00      	cmp	r3, #0
    39d0:	d109      	bne.n	39e6 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    39d2:	687b      	ldr	r3, [r7, #4]
    39d4:	683a      	ldr	r2, [r7, #0]
    39d6:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    39d8:	683b      	ldr	r3, [r7, #0]
    39da:	2200      	movs	r2, #0
    39dc:	601a      	str	r2, [r3, #0]
		return;
    39de:	e00c      	b.n	39fa <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    39e0:	68fb      	ldr	r3, [r7, #12]
    39e2:	681b      	ldr	r3, [r3, #0]
    39e4:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    39e6:	68fb      	ldr	r3, [r7, #12]
    39e8:	681b      	ldr	r3, [r3, #0]
    39ea:	2b00      	cmp	r3, #0
    39ec:	d1f8      	bne.n	39e0 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    39ee:	68fb      	ldr	r3, [r7, #12]
    39f0:	683a      	ldr	r2, [r7, #0]
    39f2:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    39f4:	683b      	ldr	r3, [r7, #0]
    39f6:	2200      	movs	r2, #0
    39f8:	601a      	str	r2, [r3, #0]
}
    39fa:	3710      	adds	r7, #16
    39fc:	46bd      	mov	sp, r7
    39fe:	bd80      	pop	{r7, pc}
    3a00:	000038dd 	.word	0x000038dd
    3a04:	0000eea0 	.word	0x0000eea0
    3a08:	000038b5 	.word	0x000038b5

00003a0c <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3a0c:	b480      	push	{r7}
    3a0e:	b085      	sub	sp, #20
    3a10:	af00      	add	r7, sp, #0
    3a12:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3a14:	687b      	ldr	r3, [r7, #4]
    3a16:	681b      	ldr	r3, [r3, #0]
    3a18:	2b00      	cmp	r3, #0
    3a1a:	d009      	beq.n	3a30 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3a1c:	687b      	ldr	r3, [r7, #4]
    3a1e:	681b      	ldr	r3, [r3, #0]
    3a20:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3a22:	687b      	ldr	r3, [r7, #4]
    3a24:	681b      	ldr	r3, [r3, #0]
    3a26:	681a      	ldr	r2, [r3, #0]
    3a28:	687b      	ldr	r3, [r7, #4]
    3a2a:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3a2c:	68fb      	ldr	r3, [r7, #12]
    3a2e:	e000      	b.n	3a32 <list_remove_head+0x26>
	}

	return NULL;
    3a30:	2300      	movs	r3, #0
}
    3a32:	4618      	mov	r0, r3
    3a34:	3714      	adds	r7, #20
    3a36:	46bd      	mov	sp, r7
    3a38:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a3c:	4770      	bx	lr

00003a3e <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3a3e:	b480      	push	{r7}
    3a40:	b085      	sub	sp, #20
    3a42:	af00      	add	r7, sp, #0
    3a44:	6078      	str	r0, [r7, #4]
    3a46:	6039      	str	r1, [r7, #0]
	if (!element) {
    3a48:	683b      	ldr	r3, [r7, #0]
    3a4a:	2b00      	cmp	r3, #0
    3a4c:	d101      	bne.n	3a52 <list_delete_element+0x14>
		return false;
    3a4e:	2300      	movs	r3, #0
    3a50:	e024      	b.n	3a9c <list_delete_element+0x5e>
	}

	if (list->head == element) {
    3a52:	687b      	ldr	r3, [r7, #4]
    3a54:	681a      	ldr	r2, [r3, #0]
    3a56:	683b      	ldr	r3, [r7, #0]
    3a58:	429a      	cmp	r2, r3
    3a5a:	d106      	bne.n	3a6a <list_delete_element+0x2c>
		list->head = list->head->next;
    3a5c:	687b      	ldr	r3, [r7, #4]
    3a5e:	681b      	ldr	r3, [r3, #0]
    3a60:	681a      	ldr	r2, [r3, #0]
    3a62:	687b      	ldr	r3, [r7, #4]
    3a64:	601a      	str	r2, [r3, #0]
		return true;
    3a66:	2301      	movs	r3, #1
    3a68:	e018      	b.n	3a9c <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    3a6a:	687b      	ldr	r3, [r7, #4]
    3a6c:	681b      	ldr	r3, [r3, #0]
    3a6e:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3a70:	e002      	b.n	3a78 <list_delete_element+0x3a>
			it = it->next;
    3a72:	68fb      	ldr	r3, [r7, #12]
    3a74:	681b      	ldr	r3, [r3, #0]
    3a76:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    3a78:	68fb      	ldr	r3, [r7, #12]
    3a7a:	2b00      	cmp	r3, #0
    3a7c:	d004      	beq.n	3a88 <list_delete_element+0x4a>
    3a7e:	68fb      	ldr	r3, [r7, #12]
    3a80:	681a      	ldr	r2, [r3, #0]
    3a82:	683b      	ldr	r3, [r7, #0]
    3a84:	429a      	cmp	r2, r3
    3a86:	d1f4      	bne.n	3a72 <list_delete_element+0x34>
		}
		if (it) {
    3a88:	68fb      	ldr	r3, [r7, #12]
    3a8a:	2b00      	cmp	r3, #0
    3a8c:	d005      	beq.n	3a9a <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    3a8e:	683b      	ldr	r3, [r7, #0]
    3a90:	681a      	ldr	r2, [r3, #0]
    3a92:	68fb      	ldr	r3, [r7, #12]
    3a94:	601a      	str	r2, [r3, #0]
			return true;
    3a96:	2301      	movs	r3, #1
    3a98:	e000      	b.n	3a9c <list_delete_element+0x5e>
		}
	}

	return false;
    3a9a:	2300      	movs	r3, #0
}
    3a9c:	4618      	mov	r0, r3
    3a9e:	3714      	adds	r7, #20
    3aa0:	46bd      	mov	sp, r7
    3aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3aa6:	4770      	bx	lr

00003aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3aa8:	b480      	push	{r7}
    3aaa:	b083      	sub	sp, #12
    3aac:	af00      	add	r7, sp, #0
    3aae:	4603      	mov	r3, r0
    3ab0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3ab6:	2b00      	cmp	r3, #0
    3ab8:	db0b      	blt.n	3ad2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3aba:	4909      	ldr	r1, [pc, #36]	; (3ae0 <__NVIC_EnableIRQ+0x38>)
    3abc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3ac0:	095b      	lsrs	r3, r3, #5
    3ac2:	88fa      	ldrh	r2, [r7, #6]
    3ac4:	f002 021f 	and.w	r2, r2, #31
    3ac8:	2001      	movs	r0, #1
    3aca:	fa00 f202 	lsl.w	r2, r0, r2
    3ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3ad2:	bf00      	nop
    3ad4:	370c      	adds	r7, #12
    3ad6:	46bd      	mov	sp, r7
    3ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3adc:	4770      	bx	lr
    3ade:	bf00      	nop
    3ae0:	e000e100 	.word	0xe000e100

00003ae4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3ae4:	b480      	push	{r7}
    3ae6:	b083      	sub	sp, #12
    3ae8:	af00      	add	r7, sp, #0
    3aea:	4603      	mov	r3, r0
    3aec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3af2:	2b00      	cmp	r3, #0
    3af4:	db10      	blt.n	3b18 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3af6:	490b      	ldr	r1, [pc, #44]	; (3b24 <__NVIC_DisableIRQ+0x40>)
    3af8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3afc:	095b      	lsrs	r3, r3, #5
    3afe:	88fa      	ldrh	r2, [r7, #6]
    3b00:	f002 021f 	and.w	r2, r2, #31
    3b04:	2001      	movs	r0, #1
    3b06:	fa00 f202 	lsl.w	r2, r0, r2
    3b0a:	3320      	adds	r3, #32
    3b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3b10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b14:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3b18:	bf00      	nop
    3b1a:	370c      	adds	r7, #12
    3b1c:	46bd      	mov	sp, r7
    3b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b22:	4770      	bx	lr
    3b24:	e000e100 	.word	0xe000e100

00003b28 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3b28:	b480      	push	{r7}
    3b2a:	b083      	sub	sp, #12
    3b2c:	af00      	add	r7, sp, #0
    3b2e:	4603      	mov	r3, r0
    3b30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b36:	2b00      	cmp	r3, #0
    3b38:	db0c      	blt.n	3b54 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b3a:	4909      	ldr	r1, [pc, #36]	; (3b60 <__NVIC_ClearPendingIRQ+0x38>)
    3b3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b40:	095b      	lsrs	r3, r3, #5
    3b42:	88fa      	ldrh	r2, [r7, #6]
    3b44:	f002 021f 	and.w	r2, r2, #31
    3b48:	2001      	movs	r0, #1
    3b4a:	fa00 f202 	lsl.w	r2, r0, r2
    3b4e:	3360      	adds	r3, #96	; 0x60
    3b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3b54:	bf00      	nop
    3b56:	370c      	adds	r7, #12
    3b58:	46bd      	mov	sp, r7
    3b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b5e:	4770      	bx	lr
    3b60:	e000e100 	.word	0xe000e100

00003b64 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3b64:	b480      	push	{r7}
    3b66:	b083      	sub	sp, #12
    3b68:	af00      	add	r7, sp, #0
    3b6a:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3b6c:	687b      	ldr	r3, [r7, #4]
    3b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3b70:	095b      	lsrs	r3, r3, #5
    3b72:	f003 0301 	and.w	r3, r3, #1
    3b76:	2b00      	cmp	r3, #0
    3b78:	bf14      	ite	ne
    3b7a:	2301      	movne	r3, #1
    3b7c:	2300      	moveq	r3, #0
    3b7e:	b2db      	uxtb	r3, r3
}
    3b80:	4618      	mov	r0, r3
    3b82:	370c      	adds	r7, #12
    3b84:	46bd      	mov	sp, r7
    3b86:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b8a:	4770      	bx	lr

00003b8c <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3b8c:	b480      	push	{r7}
    3b8e:	b083      	sub	sp, #12
    3b90:	af00      	add	r7, sp, #0
    3b92:	6078      	str	r0, [r7, #4]
    3b94:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    3b96:	687b      	ldr	r3, [r7, #4]
    3b98:	683a      	ldr	r2, [r7, #0]
    3b9a:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b9c:	bf00      	nop
    3b9e:	370c      	adds	r7, #12
    3ba0:	46bd      	mov	sp, r7
    3ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ba6:	4770      	bx	lr

00003ba8 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3ba8:	b480      	push	{r7}
    3baa:	b083      	sub	sp, #12
    3bac:	af00      	add	r7, sp, #0
    3bae:	6078      	str	r0, [r7, #4]
    3bb0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3bb2:	687b      	ldr	r3, [r7, #4]
    3bb4:	683a      	ldr	r2, [r7, #0]
    3bb6:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bb8:	bf00      	nop
    3bba:	370c      	adds	r7, #12
    3bbc:	46bd      	mov	sp, r7
    3bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bc2:	4770      	bx	lr

00003bc4 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3bc4:	b480      	push	{r7}
    3bc6:	b083      	sub	sp, #12
    3bc8:	af00      	add	r7, sp, #0
    3bca:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3bcc:	687b      	ldr	r3, [r7, #4]
    3bce:	699b      	ldr	r3, [r3, #24]
    3bd0:	f043 0201 	orr.w	r2, r3, #1
    3bd4:	687b      	ldr	r3, [r7, #4]
    3bd6:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bd8:	bf00      	nop
    3bda:	370c      	adds	r7, #12
    3bdc:	46bd      	mov	sp, r7
    3bde:	f85d 7b04 	ldr.w	r7, [sp], #4
    3be2:	4770      	bx	lr

00003be4 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3be4:	b480      	push	{r7}
    3be6:	b085      	sub	sp, #20
    3be8:	af00      	add	r7, sp, #0
    3bea:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3bec:	687b      	ldr	r3, [r7, #4]
    3bee:	699b      	ldr	r3, [r3, #24]
    3bf0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3bf2:	68fb      	ldr	r3, [r7, #12]
    3bf4:	f003 0301 	and.w	r3, r3, #1
    3bf8:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3bfa:	68fb      	ldr	r3, [r7, #12]
    3bfc:	2b00      	cmp	r3, #0
    3bfe:	bf14      	ite	ne
    3c00:	2301      	movne	r3, #1
    3c02:	2300      	moveq	r3, #0
    3c04:	b2db      	uxtb	r3, r3
}
    3c06:	4618      	mov	r0, r3
    3c08:	3714      	adds	r7, #20
    3c0a:	46bd      	mov	sp, r7
    3c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c10:	4770      	bx	lr

00003c12 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    3c12:	b480      	push	{r7}
    3c14:	b083      	sub	sp, #12
    3c16:	af00      	add	r7, sp, #0
    3c18:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3c1a:	687b      	ldr	r3, [r7, #4]
    3c1c:	699b      	ldr	r3, [r3, #24]
    3c1e:	f023 0201 	bic.w	r2, r3, #1
    3c22:	687b      	ldr	r3, [r7, #4]
    3c24:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c26:	bf00      	nop
    3c28:	370c      	adds	r7, #12
    3c2a:	46bd      	mov	sp, r7
    3c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c30:	4770      	bx	lr

00003c32 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    3c32:	b480      	push	{r7}
    3c34:	b083      	sub	sp, #12
    3c36:	af00      	add	r7, sp, #0
    3c38:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3c3a:	687b      	ldr	r3, [r7, #4]
    3c3c:	699b      	ldr	r3, [r3, #24]
    3c3e:	f043 0202 	orr.w	r2, r3, #2
    3c42:	687b      	ldr	r3, [r7, #4]
    3c44:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c46:	bf00      	nop
    3c48:	370c      	adds	r7, #12
    3c4a:	46bd      	mov	sp, r7
    3c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c50:	4770      	bx	lr

00003c52 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3c52:	b480      	push	{r7}
    3c54:	b083      	sub	sp, #12
    3c56:	af00      	add	r7, sp, #0
    3c58:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3c5a:	687b      	ldr	r3, [r7, #4]
    3c5c:	699b      	ldr	r3, [r3, #24]
    3c5e:	f023 0202 	bic.w	r2, r3, #2
    3c62:	687b      	ldr	r3, [r7, #4]
    3c64:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c66:	bf00      	nop
    3c68:	370c      	adds	r7, #12
    3c6a:	46bd      	mov	sp, r7
    3c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c70:	4770      	bx	lr

00003c72 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3c72:	b480      	push	{r7}
    3c74:	b083      	sub	sp, #12
    3c76:	af00      	add	r7, sp, #0
    3c78:	6078      	str	r0, [r7, #4]
    3c7a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3c7c:	687b      	ldr	r3, [r7, #4]
    3c7e:	699a      	ldr	r2, [r3, #24]
    3c80:	683b      	ldr	r3, [r7, #0]
    3c82:	431a      	orrs	r2, r3
    3c84:	687b      	ldr	r3, [r7, #4]
    3c86:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c88:	bf00      	nop
    3c8a:	370c      	adds	r7, #12
    3c8c:	46bd      	mov	sp, r7
    3c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c92:	4770      	bx	lr

00003c94 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3c94:	b480      	push	{r7}
    3c96:	b083      	sub	sp, #12
    3c98:	af00      	add	r7, sp, #0
    3c9a:	6078      	str	r0, [r7, #4]
    3c9c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3c9e:	687b      	ldr	r3, [r7, #4]
    3ca0:	683a      	ldr	r2, [r7, #0]
    3ca2:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ca4:	bf00      	nop
    3ca6:	370c      	adds	r7, #12
    3ca8:	46bd      	mov	sp, r7
    3caa:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cae:	4770      	bx	lr

00003cb0 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3cb0:	b480      	push	{r7}
    3cb2:	b083      	sub	sp, #12
    3cb4:	af00      	add	r7, sp, #0
    3cb6:	6078      	str	r0, [r7, #4]
    3cb8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    3cba:	687b      	ldr	r3, [r7, #4]
    3cbc:	683a      	ldr	r2, [r7, #0]
    3cbe:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3cc0:	bf00      	nop
    3cc2:	370c      	adds	r7, #12
    3cc4:	46bd      	mov	sp, r7
    3cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cca:	4770      	bx	lr

00003ccc <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3ccc:	b480      	push	{r7}
    3cce:	b083      	sub	sp, #12
    3cd0:	af00      	add	r7, sp, #0
    3cd2:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3cd4:	687b      	ldr	r3, [r7, #4]
    3cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    3cd8:	4618      	mov	r0, r3
    3cda:	370c      	adds	r7, #12
    3cdc:	46bd      	mov	sp, r7
    3cde:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ce2:	4770      	bx	lr

00003ce4 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3ce4:	b480      	push	{r7}
    3ce6:	b083      	sub	sp, #12
    3ce8:	af00      	add	r7, sp, #0
    3cea:	6078      	str	r0, [r7, #4]
    3cec:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3cee:	687b      	ldr	r3, [r7, #4]
    3cf0:	683a      	ldr	r2, [r7, #0]
    3cf2:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3cf4:	bf00      	nop
    3cf6:	370c      	adds	r7, #12
    3cf8:	46bd      	mov	sp, r7
    3cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cfe:	4770      	bx	lr

00003d00 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3d00:	b480      	push	{r7}
    3d02:	b083      	sub	sp, #12
    3d04:	af00      	add	r7, sp, #0
    3d06:	6078      	str	r0, [r7, #4]
    3d08:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3d0a:	687b      	ldr	r3, [r7, #4]
    3d0c:	683a      	ldr	r2, [r7, #0]
    3d0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d12:	bf00      	nop
    3d14:	370c      	adds	r7, #12
    3d16:	46bd      	mov	sp, r7
    3d18:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d1c:	4770      	bx	lr

00003d1e <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3d1e:	b480      	push	{r7}
    3d20:	b083      	sub	sp, #12
    3d22:	af00      	add	r7, sp, #0
    3d24:	6078      	str	r0, [r7, #4]
    3d26:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    3d28:	687b      	ldr	r3, [r7, #4]
    3d2a:	683a      	ldr	r2, [r7, #0]
    3d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d30:	bf00      	nop
    3d32:	370c      	adds	r7, #12
    3d34:	46bd      	mov	sp, r7
    3d36:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d3a:	4770      	bx	lr

00003d3c <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3d3c:	b480      	push	{r7}
    3d3e:	b083      	sub	sp, #12
    3d40:	af00      	add	r7, sp, #0
    3d42:	6078      	str	r0, [r7, #4]
    3d44:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    3d46:	687b      	ldr	r3, [r7, #4]
    3d48:	683a      	ldr	r2, [r7, #0]
    3d4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d4e:	bf00      	nop
    3d50:	370c      	adds	r7, #12
    3d52:	46bd      	mov	sp, r7
    3d54:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d58:	4770      	bx	lr

00003d5a <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    3d5a:	b480      	push	{r7}
    3d5c:	b083      	sub	sp, #12
    3d5e:	af00      	add	r7, sp, #0
    3d60:	6078      	str	r0, [r7, #4]
    3d62:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    3d64:	687b      	ldr	r3, [r7, #4]
    3d66:	683a      	ldr	r2, [r7, #0]
    3d68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d6c:	bf00      	nop
    3d6e:	370c      	adds	r7, #12
    3d70:	46bd      	mov	sp, r7
    3d72:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d76:	4770      	bx	lr

00003d78 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    3d78:	b480      	push	{r7}
    3d7a:	b083      	sub	sp, #12
    3d7c:	af00      	add	r7, sp, #0
    3d7e:	6078      	str	r0, [r7, #4]
    3d80:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3d82:	687b      	ldr	r3, [r7, #4]
    3d84:	683a      	ldr	r2, [r7, #0]
    3d86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d8a:	bf00      	nop
    3d8c:	370c      	adds	r7, #12
    3d8e:	46bd      	mov	sp, r7
    3d90:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d94:	4770      	bx	lr

00003d96 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    3d96:	b480      	push	{r7}
    3d98:	b083      	sub	sp, #12
    3d9a:	af00      	add	r7, sp, #0
    3d9c:	6078      	str	r0, [r7, #4]
    3d9e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3da0:	687b      	ldr	r3, [r7, #4]
    3da2:	683a      	ldr	r2, [r7, #0]
    3da4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3da8:	bf00      	nop
    3daa:	370c      	adds	r7, #12
    3dac:	46bd      	mov	sp, r7
    3dae:	f85d 7b04 	ldr.w	r7, [sp], #4
    3db2:	4770      	bx	lr

00003db4 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3db4:	b480      	push	{r7}
    3db6:	b083      	sub	sp, #12
    3db8:	af00      	add	r7, sp, #0
    3dba:	6078      	str	r0, [r7, #4]
    3dbc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3dbe:	687b      	ldr	r3, [r7, #4]
    3dc0:	683a      	ldr	r2, [r7, #0]
    3dc2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3dc6:	bf00      	nop
    3dc8:	370c      	adds	r7, #12
    3dca:	46bd      	mov	sp, r7
    3dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dd0:	4770      	bx	lr

00003dd2 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    3dd2:	b480      	push	{r7}
    3dd4:	b083      	sub	sp, #12
    3dd6:	af00      	add	r7, sp, #0
    3dd8:	6078      	str	r0, [r7, #4]
    3dda:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3ddc:	687b      	ldr	r3, [r7, #4]
    3dde:	683a      	ldr	r2, [r7, #0]
    3de0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3de4:	bf00      	nop
    3de6:	370c      	adds	r7, #12
    3de8:	46bd      	mov	sp, r7
    3dea:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dee:	4770      	bx	lr

00003df0 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    3df0:	b480      	push	{r7}
    3df2:	b083      	sub	sp, #12
    3df4:	af00      	add	r7, sp, #0
    3df6:	6078      	str	r0, [r7, #4]
    3df8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    3dfa:	687b      	ldr	r3, [r7, #4]
    3dfc:	683a      	ldr	r2, [r7, #0]
    3dfe:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e02:	bf00      	nop
    3e04:	370c      	adds	r7, #12
    3e06:	46bd      	mov	sp, r7
    3e08:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e0c:	4770      	bx	lr
	...

00003e10 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    3e10:	b580      	push	{r7, lr}
    3e12:	b082      	sub	sp, #8
    3e14:	af00      	add	r7, sp, #0
    3e16:	6078      	str	r0, [r7, #4]
    3e18:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    3e1a:	687b      	ldr	r3, [r7, #4]
    3e1c:	683a      	ldr	r2, [r7, #0]
    3e1e:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    3e20:	687b      	ldr	r3, [r7, #4]
    3e22:	681b      	ldr	r3, [r3, #0]
    3e24:	4618      	mov	r0, r3
    3e26:	4b56      	ldr	r3, [pc, #344]	; (3f80 <_can_async_init+0x170>)
    3e28:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3e2a:	bf00      	nop
    3e2c:	687b      	ldr	r3, [r7, #4]
    3e2e:	681b      	ldr	r3, [r3, #0]
    3e30:	4618      	mov	r0, r3
    3e32:	4b54      	ldr	r3, [pc, #336]	; (3f84 <_can_async_init+0x174>)
    3e34:	4798      	blx	r3
    3e36:	4603      	mov	r3, r0
    3e38:	f083 0301 	eor.w	r3, r3, #1
    3e3c:	b2db      	uxtb	r3, r3
    3e3e:	2b00      	cmp	r3, #0
    3e40:	d1f4      	bne.n	3e2c <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    3e42:	687b      	ldr	r3, [r7, #4]
    3e44:	681b      	ldr	r3, [r3, #0]
    3e46:	4618      	mov	r0, r3
    3e48:	4b4f      	ldr	r3, [pc, #316]	; (3f88 <_can_async_init+0x178>)
    3e4a:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3e4c:	683b      	ldr	r3, [r7, #0]
    3e4e:	4a4f      	ldr	r2, [pc, #316]	; (3f8c <_can_async_init+0x17c>)
    3e50:	4293      	cmp	r3, r2
    3e52:	d17c      	bne.n	3f4e <_can_async_init+0x13e>
		_can1_dev    = dev;
    3e54:	4a4e      	ldr	r2, [pc, #312]	; (3f90 <_can_async_init+0x180>)
    3e56:	687b      	ldr	r3, [r7, #4]
    3e58:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3e5a:	687b      	ldr	r3, [r7, #4]
    3e5c:	4a4d      	ldr	r2, [pc, #308]	; (3f94 <_can_async_init+0x184>)
    3e5e:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3e60:	687b      	ldr	r3, [r7, #4]
    3e62:	681b      	ldr	r3, [r3, #0]
    3e64:	f44f 7100 	mov.w	r1, #512	; 0x200
    3e68:	4618      	mov	r0, r3
    3e6a:	4b4b      	ldr	r3, [pc, #300]	; (3f98 <_can_async_init+0x188>)
    3e6c:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3e6e:	687b      	ldr	r3, [r7, #4]
    3e70:	681b      	ldr	r3, [r3, #0]
    3e72:	2102      	movs	r1, #2
    3e74:	4618      	mov	r0, r3
    3e76:	4b49      	ldr	r3, [pc, #292]	; (3f9c <_can_async_init+0x18c>)
    3e78:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3e7a:	687b      	ldr	r3, [r7, #4]
    3e7c:	681b      	ldr	r3, [r3, #0]
    3e7e:	f640 2103 	movw	r1, #2563	; 0xa03
    3e82:	4618      	mov	r0, r3
    3e84:	4b46      	ldr	r3, [pc, #280]	; (3fa0 <_can_async_init+0x190>)
    3e86:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    3e88:	687b      	ldr	r3, [r7, #4]
    3e8a:	681b      	ldr	r3, [r3, #0]
    3e8c:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    3e90:	4618      	mov	r0, r3
    3e92:	4b44      	ldr	r3, [pc, #272]	; (3fa4 <_can_async_init+0x194>)
    3e94:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    3e96:	687b      	ldr	r3, [r7, #4]
    3e98:	681a      	ldr	r2, [r3, #0]
    3e9a:	4b43      	ldr	r3, [pc, #268]	; (3fa8 <_can_async_init+0x198>)
    3e9c:	b29b      	uxth	r3, r3
    3e9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3ea6:	4619      	mov	r1, r3
    3ea8:	4610      	mov	r0, r2
    3eaa:	4b40      	ldr	r3, [pc, #256]	; (3fac <_can_async_init+0x19c>)
    3eac:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3eae:	687b      	ldr	r3, [r7, #4]
    3eb0:	681b      	ldr	r3, [r3, #0]
    3eb2:	2107      	movs	r1, #7
    3eb4:	4618      	mov	r0, r3
    3eb6:	4b3e      	ldr	r3, [pc, #248]	; (3fb0 <_can_async_init+0x1a0>)
    3eb8:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    3eba:	687b      	ldr	r3, [r7, #4]
    3ebc:	681b      	ldr	r3, [r3, #0]
    3ebe:	2107      	movs	r1, #7
    3ec0:	4618      	mov	r0, r3
    3ec2:	4b3c      	ldr	r3, [pc, #240]	; (3fb4 <_can_async_init+0x1a4>)
    3ec4:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    3ec6:	687b      	ldr	r3, [r7, #4]
    3ec8:	681a      	ldr	r2, [r3, #0]
    3eca:	4b3b      	ldr	r3, [pc, #236]	; (3fb8 <_can_async_init+0x1a8>)
    3ecc:	b29b      	uxth	r3, r3
    3ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3ed2:	4619      	mov	r1, r3
    3ed4:	4610      	mov	r0, r2
    3ed6:	4b39      	ldr	r3, [pc, #228]	; (3fbc <_can_async_init+0x1ac>)
    3ed8:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    3eda:	687b      	ldr	r3, [r7, #4]
    3edc:	681a      	ldr	r2, [r3, #0]
    3ede:	4b38      	ldr	r3, [pc, #224]	; (3fc0 <_can_async_init+0x1b0>)
    3ee0:	b29b      	uxth	r3, r3
    3ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3ee6:	4619      	mov	r1, r3
    3ee8:	4610      	mov	r0, r2
    3eea:	4b36      	ldr	r3, [pc, #216]	; (3fc4 <_can_async_init+0x1b4>)
    3eec:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    3eee:	687b      	ldr	r3, [r7, #4]
    3ef0:	681b      	ldr	r3, [r3, #0]
    3ef2:	2108      	movs	r1, #8
    3ef4:	4618      	mov	r0, r3
    3ef6:	4b34      	ldr	r3, [pc, #208]	; (3fc8 <_can_async_init+0x1b8>)
    3ef8:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    3efa:	687b      	ldr	r3, [r7, #4]
    3efc:	681a      	ldr	r2, [r3, #0]
    3efe:	4b33      	ldr	r3, [pc, #204]	; (3fcc <_can_async_init+0x1bc>)
    3f00:	b29b      	uxth	r3, r3
    3f02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    3f06:	4619      	mov	r1, r3
    3f08:	4610      	mov	r0, r2
    3f0a:	4b31      	ldr	r3, [pc, #196]	; (3fd0 <_can_async_init+0x1c0>)
    3f0c:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3f0e:	687b      	ldr	r3, [r7, #4]
    3f10:	681a      	ldr	r2, [r3, #0]
    3f12:	4b30      	ldr	r3, [pc, #192]	; (3fd4 <_can_async_init+0x1c4>)
    3f14:	b29b      	uxth	r3, r3
    3f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3f1a:	4619      	mov	r1, r3
    3f1c:	4610      	mov	r0, r2
    3f1e:	4b2e      	ldr	r3, [pc, #184]	; (3fd8 <_can_async_init+0x1c8>)
    3f20:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3f22:	687b      	ldr	r3, [r7, #4]
    3f24:	681b      	ldr	r3, [r3, #0]
    3f26:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    3f2a:	4618      	mov	r0, r3
    3f2c:	4b2b      	ldr	r3, [pc, #172]	; (3fdc <_can_async_init+0x1cc>)
    3f2e:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3f30:	204f      	movs	r0, #79	; 0x4f
    3f32:	4b2b      	ldr	r3, [pc, #172]	; (3fe0 <_can_async_init+0x1d0>)
    3f34:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    3f36:	204f      	movs	r0, #79	; 0x4f
    3f38:	4b2a      	ldr	r3, [pc, #168]	; (3fe4 <_can_async_init+0x1d4>)
    3f3a:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3f3c:	204f      	movs	r0, #79	; 0x4f
    3f3e:	4b2a      	ldr	r3, [pc, #168]	; (3fe8 <_can_async_init+0x1d8>)
    3f40:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3f42:	687b      	ldr	r3, [r7, #4]
    3f44:	681b      	ldr	r3, [r3, #0]
    3f46:	2101      	movs	r1, #1
    3f48:	4618      	mov	r0, r3
    3f4a:	4b28      	ldr	r3, [pc, #160]	; (3fec <_can_async_init+0x1dc>)
    3f4c:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3f4e:	687b      	ldr	r3, [r7, #4]
    3f50:	681b      	ldr	r3, [r3, #0]
    3f52:	4618      	mov	r0, r3
    3f54:	4b26      	ldr	r3, [pc, #152]	; (3ff0 <_can_async_init+0x1e0>)
    3f56:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3f58:	687b      	ldr	r3, [r7, #4]
    3f5a:	681b      	ldr	r3, [r3, #0]
    3f5c:	4618      	mov	r0, r3
    3f5e:	4b25      	ldr	r3, [pc, #148]	; (3ff4 <_can_async_init+0x1e4>)
    3f60:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3f62:	bf00      	nop
    3f64:	687b      	ldr	r3, [r7, #4]
    3f66:	681b      	ldr	r3, [r3, #0]
    3f68:	4618      	mov	r0, r3
    3f6a:	4b06      	ldr	r3, [pc, #24]	; (3f84 <_can_async_init+0x174>)
    3f6c:	4798      	blx	r3
    3f6e:	4603      	mov	r3, r0
    3f70:	2b00      	cmp	r3, #0
    3f72:	d1f7      	bne.n	3f64 <_can_async_init+0x154>
	};

	return ERR_NONE;
    3f74:	2300      	movs	r3, #0
}
    3f76:	4618      	mov	r0, r3
    3f78:	3708      	adds	r7, #8
    3f7a:	46bd      	mov	sp, r7
    3f7c:	bd80      	pop	{r7, pc}
    3f7e:	bf00      	nop
    3f80:	00003bc5 	.word	0x00003bc5
    3f84:	00003be5 	.word	0x00003be5
    3f88:	00003c33 	.word	0x00003c33
    3f8c:	42000400 	.word	0x42000400
    3f90:	20000b18 	.word	0x20000b18
    3f94:	20000004 	.word	0x20000004
    3f98:	00003c73 	.word	0x00003c73
    3f9c:	00003b8d 	.word	0x00003b8d
    3fa0:	00003c95 	.word	0x00003c95
    3fa4:	00003ba9 	.word	0x00003ba9
    3fa8:	2000192c 	.word	0x2000192c
    3fac:	00003d79 	.word	0x00003d79
    3fb0:	00003d97 	.word	0x00003d97
    3fb4:	00003dd3 	.word	0x00003dd3
    3fb8:	200018e4 	.word	0x200018e4
    3fbc:	00003db5 	.word	0x00003db5
    3fc0:	20000a78 	.word	0x20000a78
    3fc4:	00003df1 	.word	0x00003df1
    3fc8:	00003d01 	.word	0x00003d01
    3fcc:	20000a88 	.word	0x20000a88
    3fd0:	00003d1f 	.word	0x00003d1f
    3fd4:	20000b08 	.word	0x20000b08
    3fd8:	00003d3d 	.word	0x00003d3d
    3fdc:	00003d5b 	.word	0x00003d5b
    3fe0:	00003ae5 	.word	0x00003ae5
    3fe4:	00003b29 	.word	0x00003b29
    3fe8:	00003aa9 	.word	0x00003aa9
    3fec:	00003ce5 	.word	0x00003ce5
    3ff0:	00003c53 	.word	0x00003c53
    3ff4:	00003c13 	.word	0x00003c13

00003ff8 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    3ff8:	b590      	push	{r4, r7, lr}
    3ffa:	b083      	sub	sp, #12
    3ffc:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    3ffe:	4b2c      	ldr	r3, [pc, #176]	; (40b0 <CAN1_Handler+0xb8>)
    4000:	681b      	ldr	r3, [r3, #0]
    4002:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    4004:	687b      	ldr	r3, [r7, #4]
    4006:	681b      	ldr	r3, [r3, #0]
    4008:	4618      	mov	r0, r3
    400a:	4b2a      	ldr	r3, [pc, #168]	; (40b4 <CAN1_Handler+0xbc>)
    400c:	4798      	blx	r3
    400e:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    4010:	683b      	ldr	r3, [r7, #0]
    4012:	f003 0301 	and.w	r3, r3, #1
    4016:	2b00      	cmp	r3, #0
    4018:	d003      	beq.n	4022 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    401a:	687b      	ldr	r3, [r7, #4]
    401c:	689b      	ldr	r3, [r3, #8]
    401e:	6878      	ldr	r0, [r7, #4]
    4020:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    4022:	683b      	ldr	r3, [r7, #0]
    4024:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4028:	2b00      	cmp	r3, #0
    402a:	d003      	beq.n	4034 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    402c:	687b      	ldr	r3, [r7, #4]
    402e:	685b      	ldr	r3, [r3, #4]
    4030:	6878      	ldr	r0, [r7, #4]
    4032:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    4034:	683b      	ldr	r3, [r7, #0]
    4036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    403a:	2b00      	cmp	r3, #0
    403c:	d004      	beq.n	4048 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    403e:	687b      	ldr	r3, [r7, #4]
    4040:	68db      	ldr	r3, [r3, #12]
    4042:	2103      	movs	r1, #3
    4044:	6878      	ldr	r0, [r7, #4]
    4046:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    4048:	683b      	ldr	r3, [r7, #0]
    404a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    404e:	2b00      	cmp	r3, #0
    4050:	d004      	beq.n	405c <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    4052:	687b      	ldr	r3, [r7, #4]
    4054:	68db      	ldr	r3, [r3, #12]
    4056:	2100      	movs	r1, #0
    4058:	6878      	ldr	r0, [r7, #4]
    405a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    405c:	683b      	ldr	r3, [r7, #0]
    405e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    4062:	2b00      	cmp	r3, #0
    4064:	d00f      	beq.n	4086 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    4066:	687b      	ldr	r3, [r7, #4]
    4068:	68dc      	ldr	r4, [r3, #12]
    406a:	687b      	ldr	r3, [r7, #4]
    406c:	681b      	ldr	r3, [r3, #0]
    406e:	4618      	mov	r0, r3
    4070:	4b11      	ldr	r3, [pc, #68]	; (40b8 <CAN1_Handler+0xc0>)
    4072:	4798      	blx	r3
    4074:	4603      	mov	r3, r0
    4076:	2b00      	cmp	r3, #0
    4078:	d001      	beq.n	407e <CAN1_Handler+0x86>
    407a:	2302      	movs	r3, #2
    407c:	e000      	b.n	4080 <CAN1_Handler+0x88>
    407e:	2301      	movs	r3, #1
    4080:	4619      	mov	r1, r3
    4082:	6878      	ldr	r0, [r7, #4]
    4084:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    4086:	683b      	ldr	r3, [r7, #0]
    4088:	f003 0308 	and.w	r3, r3, #8
    408c:	2b00      	cmp	r3, #0
    408e:	d004      	beq.n	409a <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    4090:	687b      	ldr	r3, [r7, #4]
    4092:	68db      	ldr	r3, [r3, #12]
    4094:	2104      	movs	r1, #4
    4096:	6878      	ldr	r0, [r7, #4]
    4098:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    409a:	687b      	ldr	r3, [r7, #4]
    409c:	681b      	ldr	r3, [r3, #0]
    409e:	6839      	ldr	r1, [r7, #0]
    40a0:	4618      	mov	r0, r3
    40a2:	4b06      	ldr	r3, [pc, #24]	; (40bc <CAN1_Handler+0xc4>)
    40a4:	4798      	blx	r3
}
    40a6:	bf00      	nop
    40a8:	370c      	adds	r7, #12
    40aa:	46bd      	mov	sp, r7
    40ac:	bd90      	pop	{r4, r7, pc}
    40ae:	bf00      	nop
    40b0:	20000b18 	.word	0x20000b18
    40b4:	00003ccd 	.word	0x00003ccd
    40b8:	00003b65 	.word	0x00003b65
    40bc:	00003cb1 	.word	0x00003cb1

000040c0 <__NVIC_SetPendingIRQ>:
{
    40c0:	b480      	push	{r7}
    40c2:	b083      	sub	sp, #12
    40c4:	af00      	add	r7, sp, #0
    40c6:	4603      	mov	r3, r0
    40c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    40ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40ce:	2b00      	cmp	r3, #0
    40d0:	db0c      	blt.n	40ec <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    40d2:	4909      	ldr	r1, [pc, #36]	; (40f8 <__NVIC_SetPendingIRQ+0x38>)
    40d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40d8:	095b      	lsrs	r3, r3, #5
    40da:	88fa      	ldrh	r2, [r7, #6]
    40dc:	f002 021f 	and.w	r2, r2, #31
    40e0:	2001      	movs	r0, #1
    40e2:	fa00 f202 	lsl.w	r2, r0, r2
    40e6:	3340      	adds	r3, #64	; 0x40
    40e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    40ec:	bf00      	nop
    40ee:	370c      	adds	r7, #12
    40f0:	46bd      	mov	sp, r7
    40f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    40f6:	4770      	bx	lr
    40f8:	e000e100 	.word	0xe000e100

000040fc <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    40fc:	b580      	push	{r7, lr}
    40fe:	b082      	sub	sp, #8
    4100:	af00      	add	r7, sp, #0
    4102:	4603      	mov	r3, r0
    4104:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    4106:	79fb      	ldrb	r3, [r7, #7]
    4108:	b21b      	sxth	r3, r3
    410a:	4618      	mov	r0, r3
    410c:	4b02      	ldr	r3, [pc, #8]	; (4118 <_irq_set+0x1c>)
    410e:	4798      	blx	r3
}
    4110:	bf00      	nop
    4112:	3708      	adds	r7, #8
    4114:	46bd      	mov	sp, r7
    4116:	bd80      	pop	{r7, pc}
    4118:	000040c1 	.word	0x000040c1

0000411c <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    411c:	b480      	push	{r7}
    411e:	b083      	sub	sp, #12
    4120:	af00      	add	r7, sp, #0
    4122:	4603      	mov	r3, r0
    4124:	6039      	str	r1, [r7, #0]
    4126:	80fb      	strh	r3, [r7, #6]
    4128:	4613      	mov	r3, r2
    412a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    412c:	797b      	ldrb	r3, [r7, #5]
    412e:	3b04      	subs	r3, #4
    4130:	2b05      	cmp	r3, #5
    4132:	d86b      	bhi.n	420c <_get_cycles_for_us_internal+0xf0>
    4134:	a201      	add	r2, pc, #4	; (adr r2, 413c <_get_cycles_for_us_internal+0x20>)
    4136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    413a:	bf00      	nop
    413c:	000041eb 	.word	0x000041eb
    4140:	000041cb 	.word	0x000041cb
    4144:	000041ad 	.word	0x000041ad
    4148:	0000418f 	.word	0x0000418f
    414c:	00004171 	.word	0x00004171
    4150:	00004155 	.word	0x00004155
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    4154:	88fb      	ldrh	r3, [r7, #6]
    4156:	683a      	ldr	r2, [r7, #0]
    4158:	4935      	ldr	r1, [pc, #212]	; (4230 <_get_cycles_for_us_internal+0x114>)
    415a:	fba1 1202 	umull	r1, r2, r1, r2
    415e:	0c92      	lsrs	r2, r2, #18
    4160:	fb02 f303 	mul.w	r3, r2, r3
    4164:	3302      	adds	r3, #2
    4166:	4a33      	ldr	r2, [pc, #204]	; (4234 <_get_cycles_for_us_internal+0x118>)
    4168:	fba2 2303 	umull	r2, r3, r2, r3
    416c:	085b      	lsrs	r3, r3, #1
    416e:	e059      	b.n	4224 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    4170:	88fb      	ldrh	r3, [r7, #6]
    4172:	683a      	ldr	r2, [r7, #0]
    4174:	0952      	lsrs	r2, r2, #5
    4176:	4930      	ldr	r1, [pc, #192]	; (4238 <_get_cycles_for_us_internal+0x11c>)
    4178:	fba1 1202 	umull	r1, r2, r1, r2
    417c:	09d2      	lsrs	r2, r2, #7
    417e:	fb02 f303 	mul.w	r3, r2, r3
    4182:	331d      	adds	r3, #29
    4184:	4a2d      	ldr	r2, [pc, #180]	; (423c <_get_cycles_for_us_internal+0x120>)
    4186:	fba2 2303 	umull	r2, r3, r2, r3
    418a:	091b      	lsrs	r3, r3, #4
    418c:	e04a      	b.n	4224 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    418e:	88fb      	ldrh	r3, [r7, #6]
    4190:	683a      	ldr	r2, [r7, #0]
    4192:	492b      	ldr	r1, [pc, #172]	; (4240 <_get_cycles_for_us_internal+0x124>)
    4194:	fba1 1202 	umull	r1, r2, r1, r2
    4198:	0b52      	lsrs	r2, r2, #13
    419a:	fb02 f303 	mul.w	r3, r2, r3
    419e:	f203 132b 	addw	r3, r3, #299	; 0x12b
    41a2:	4a28      	ldr	r2, [pc, #160]	; (4244 <_get_cycles_for_us_internal+0x128>)
    41a4:	fba2 2303 	umull	r2, r3, r2, r3
    41a8:	095b      	lsrs	r3, r3, #5
    41aa:	e03b      	b.n	4224 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    41ac:	88fb      	ldrh	r3, [r7, #6]
    41ae:	683a      	ldr	r2, [r7, #0]
    41b0:	4925      	ldr	r1, [pc, #148]	; (4248 <_get_cycles_for_us_internal+0x12c>)
    41b2:	fba1 1202 	umull	r1, r2, r1, r2
    41b6:	0992      	lsrs	r2, r2, #6
    41b8:	fb02 f303 	mul.w	r3, r2, r3
    41bc:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    41c0:	4a22      	ldr	r2, [pc, #136]	; (424c <_get_cycles_for_us_internal+0x130>)
    41c2:	fba2 2303 	umull	r2, r3, r2, r3
    41c6:	099b      	lsrs	r3, r3, #6
    41c8:	e02c      	b.n	4224 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    41ca:	88fb      	ldrh	r3, [r7, #6]
    41cc:	683a      	ldr	r2, [r7, #0]
    41ce:	4920      	ldr	r1, [pc, #128]	; (4250 <_get_cycles_for_us_internal+0x134>)
    41d0:	fba1 1202 	umull	r1, r2, r1, r2
    41d4:	0952      	lsrs	r2, r2, #5
    41d6:	fb02 f303 	mul.w	r3, r2, r3
    41da:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    41de:	332f      	adds	r3, #47	; 0x2f
    41e0:	4a1c      	ldr	r2, [pc, #112]	; (4254 <_get_cycles_for_us_internal+0x138>)
    41e2:	fba2 2303 	umull	r2, r3, r2, r3
    41e6:	0b5b      	lsrs	r3, r3, #13
    41e8:	e01c      	b.n	4224 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    41ea:	88fb      	ldrh	r3, [r7, #6]
    41ec:	683a      	ldr	r2, [r7, #0]
    41ee:	491a      	ldr	r1, [pc, #104]	; (4258 <_get_cycles_for_us_internal+0x13c>)
    41f0:	fba1 1202 	umull	r1, r2, r1, r2
    41f4:	08d2      	lsrs	r2, r2, #3
    41f6:	fb02 f303 	mul.w	r3, r2, r3
    41fa:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    41fe:	f203 33df 	addw	r3, r3, #991	; 0x3df
    4202:	4a16      	ldr	r2, [pc, #88]	; (425c <_get_cycles_for_us_internal+0x140>)
    4204:	fba2 2303 	umull	r2, r3, r2, r3
    4208:	0c5b      	lsrs	r3, r3, #17
    420a:	e00b      	b.n	4224 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    420c:	88fb      	ldrh	r3, [r7, #6]
    420e:	683a      	ldr	r2, [r7, #0]
    4210:	fb02 f303 	mul.w	r3, r2, r3
    4214:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    4218:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    421c:	4a10      	ldr	r2, [pc, #64]	; (4260 <_get_cycles_for_us_internal+0x144>)
    421e:	fba2 2303 	umull	r2, r3, r2, r3
    4222:	0c9b      	lsrs	r3, r3, #18
	}
}
    4224:	4618      	mov	r0, r3
    4226:	370c      	adds	r7, #12
    4228:	46bd      	mov	sp, r7
    422a:	f85d 7b04 	ldr.w	r7, [sp], #4
    422e:	4770      	bx	lr
    4230:	431bde83 	.word	0x431bde83
    4234:	aaaaaaab 	.word	0xaaaaaaab
    4238:	0a7c5ac5 	.word	0x0a7c5ac5
    423c:	88888889 	.word	0x88888889
    4240:	d1b71759 	.word	0xd1b71759
    4244:	1b4e81b5 	.word	0x1b4e81b5
    4248:	10624dd3 	.word	0x10624dd3
    424c:	057619f1 	.word	0x057619f1
    4250:	51eb851f 	.word	0x51eb851f
    4254:	45e7b273 	.word	0x45e7b273
    4258:	cccccccd 	.word	0xcccccccd
    425c:	6fd91d85 	.word	0x6fd91d85
    4260:	165e9f81 	.word	0x165e9f81

00004264 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    4264:	b580      	push	{r7, lr}
    4266:	b082      	sub	sp, #8
    4268:	af00      	add	r7, sp, #0
    426a:	4603      	mov	r3, r0
    426c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    426e:	88fb      	ldrh	r3, [r7, #6]
    4270:	2209      	movs	r2, #9
    4272:	4904      	ldr	r1, [pc, #16]	; (4284 <_get_cycles_for_us+0x20>)
    4274:	4618      	mov	r0, r3
    4276:	4b04      	ldr	r3, [pc, #16]	; (4288 <_get_cycles_for_us+0x24>)
    4278:	4798      	blx	r3
    427a:	4603      	mov	r3, r0
}
    427c:	4618      	mov	r0, r3
    427e:	3708      	adds	r7, #8
    4280:	46bd      	mov	sp, r7
    4282:	bd80      	pop	{r7, pc}
    4284:	07270e00 	.word	0x07270e00
    4288:	0000411d 	.word	0x0000411d

0000428c <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    428c:	b480      	push	{r7}
    428e:	b083      	sub	sp, #12
    4290:	af00      	add	r7, sp, #0
    4292:	4603      	mov	r3, r0
    4294:	6039      	str	r1, [r7, #0]
    4296:	80fb      	strh	r3, [r7, #6]
    4298:	4613      	mov	r3, r2
    429a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    429c:	797b      	ldrb	r3, [r7, #5]
    429e:	3b04      	subs	r3, #4
    42a0:	2b05      	cmp	r3, #5
    42a2:	d870      	bhi.n	4386 <_get_cycles_for_ms_internal+0xfa>
    42a4:	a201      	add	r2, pc, #4	; (adr r2, 42ac <_get_cycles_for_ms_internal+0x20>)
    42a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    42aa:	bf00      	nop
    42ac:	00004369 	.word	0x00004369
    42b0:	0000434d 	.word	0x0000434d
    42b4:	00004331 	.word	0x00004331
    42b8:	0000430d 	.word	0x0000430d
    42bc:	000042e9 	.word	0x000042e9
    42c0:	000042c5 	.word	0x000042c5
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    42c4:	88fb      	ldrh	r3, [r7, #6]
    42c6:	683a      	ldr	r2, [r7, #0]
    42c8:	4937      	ldr	r1, [pc, #220]	; (43a8 <_get_cycles_for_ms_internal+0x11c>)
    42ca:	fba1 1202 	umull	r1, r2, r1, r2
    42ce:	0c92      	lsrs	r2, r2, #18
    42d0:	fb02 f303 	mul.w	r3, r2, r3
    42d4:	3302      	adds	r3, #2
    42d6:	4a35      	ldr	r2, [pc, #212]	; (43ac <_get_cycles_for_ms_internal+0x120>)
    42d8:	fba2 2303 	umull	r2, r3, r2, r3
    42dc:	085b      	lsrs	r3, r3, #1
    42de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    42e2:	fb02 f303 	mul.w	r3, r2, r3
    42e6:	e058      	b.n	439a <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    42e8:	88fb      	ldrh	r3, [r7, #6]
    42ea:	683a      	ldr	r2, [r7, #0]
    42ec:	0952      	lsrs	r2, r2, #5
    42ee:	4930      	ldr	r1, [pc, #192]	; (43b0 <_get_cycles_for_ms_internal+0x124>)
    42f0:	fba1 1202 	umull	r1, r2, r1, r2
    42f4:	09d2      	lsrs	r2, r2, #7
    42f6:	fb02 f303 	mul.w	r3, r2, r3
    42fa:	3302      	adds	r3, #2
    42fc:	4a2b      	ldr	r2, [pc, #172]	; (43ac <_get_cycles_for_ms_internal+0x120>)
    42fe:	fba2 2303 	umull	r2, r3, r2, r3
    4302:	085b      	lsrs	r3, r3, #1
    4304:	2264      	movs	r2, #100	; 0x64
    4306:	fb02 f303 	mul.w	r3, r2, r3
    430a:	e046      	b.n	439a <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    430c:	88fb      	ldrh	r3, [r7, #6]
    430e:	683a      	ldr	r2, [r7, #0]
    4310:	4928      	ldr	r1, [pc, #160]	; (43b4 <_get_cycles_for_ms_internal+0x128>)
    4312:	fba1 1202 	umull	r1, r2, r1, r2
    4316:	0b52      	lsrs	r2, r2, #13
    4318:	fb02 f303 	mul.w	r3, r2, r3
    431c:	3302      	adds	r3, #2
    431e:	4a23      	ldr	r2, [pc, #140]	; (43ac <_get_cycles_for_ms_internal+0x120>)
    4320:	fba2 2303 	umull	r2, r3, r2, r3
    4324:	085a      	lsrs	r2, r3, #1
    4326:	4613      	mov	r3, r2
    4328:	009b      	lsls	r3, r3, #2
    432a:	4413      	add	r3, r2
    432c:	005b      	lsls	r3, r3, #1
    432e:	e034      	b.n	439a <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    4330:	88fb      	ldrh	r3, [r7, #6]
    4332:	683a      	ldr	r2, [r7, #0]
    4334:	4920      	ldr	r1, [pc, #128]	; (43b8 <_get_cycles_for_ms_internal+0x12c>)
    4336:	fba1 1202 	umull	r1, r2, r1, r2
    433a:	0992      	lsrs	r2, r2, #6
    433c:	fb02 f303 	mul.w	r3, r2, r3
    4340:	3302      	adds	r3, #2
    4342:	4a1a      	ldr	r2, [pc, #104]	; (43ac <_get_cycles_for_ms_internal+0x120>)
    4344:	fba2 2303 	umull	r2, r3, r2, r3
    4348:	085b      	lsrs	r3, r3, #1
    434a:	e026      	b.n	439a <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    434c:	88fb      	ldrh	r3, [r7, #6]
    434e:	683a      	ldr	r2, [r7, #0]
    4350:	491a      	ldr	r1, [pc, #104]	; (43bc <_get_cycles_for_ms_internal+0x130>)
    4352:	fba1 1202 	umull	r1, r2, r1, r2
    4356:	0952      	lsrs	r2, r2, #5
    4358:	fb02 f303 	mul.w	r3, r2, r3
    435c:	331d      	adds	r3, #29
    435e:	4a18      	ldr	r2, [pc, #96]	; (43c0 <_get_cycles_for_ms_internal+0x134>)
    4360:	fba2 2303 	umull	r2, r3, r2, r3
    4364:	091b      	lsrs	r3, r3, #4
    4366:	e018      	b.n	439a <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    4368:	88fb      	ldrh	r3, [r7, #6]
    436a:	683a      	ldr	r2, [r7, #0]
    436c:	4915      	ldr	r1, [pc, #84]	; (43c4 <_get_cycles_for_ms_internal+0x138>)
    436e:	fba1 1202 	umull	r1, r2, r1, r2
    4372:	08d2      	lsrs	r2, r2, #3
    4374:	fb02 f303 	mul.w	r3, r2, r3
    4378:	f203 132b 	addw	r3, r3, #299	; 0x12b
    437c:	4a12      	ldr	r2, [pc, #72]	; (43c8 <_get_cycles_for_ms_internal+0x13c>)
    437e:	fba2 2303 	umull	r2, r3, r2, r3
    4382:	095b      	lsrs	r3, r3, #5
    4384:	e009      	b.n	439a <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    4386:	88fb      	ldrh	r3, [r7, #6]
    4388:	683a      	ldr	r2, [r7, #0]
    438a:	fb02 f303 	mul.w	r3, r2, r3
    438e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4392:	4a0e      	ldr	r2, [pc, #56]	; (43cc <_get_cycles_for_ms_internal+0x140>)
    4394:	fba2 2303 	umull	r2, r3, r2, r3
    4398:	099b      	lsrs	r3, r3, #6
	}
}
    439a:	4618      	mov	r0, r3
    439c:	370c      	adds	r7, #12
    439e:	46bd      	mov	sp, r7
    43a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    43a4:	4770      	bx	lr
    43a6:	bf00      	nop
    43a8:	431bde83 	.word	0x431bde83
    43ac:	aaaaaaab 	.word	0xaaaaaaab
    43b0:	0a7c5ac5 	.word	0x0a7c5ac5
    43b4:	d1b71759 	.word	0xd1b71759
    43b8:	10624dd3 	.word	0x10624dd3
    43bc:	51eb851f 	.word	0x51eb851f
    43c0:	88888889 	.word	0x88888889
    43c4:	cccccccd 	.word	0xcccccccd
    43c8:	1b4e81b5 	.word	0x1b4e81b5
    43cc:	057619f1 	.word	0x057619f1

000043d0 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    43d0:	b580      	push	{r7, lr}
    43d2:	b082      	sub	sp, #8
    43d4:	af00      	add	r7, sp, #0
    43d6:	4603      	mov	r3, r0
    43d8:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    43da:	88fb      	ldrh	r3, [r7, #6]
    43dc:	2209      	movs	r2, #9
    43de:	4904      	ldr	r1, [pc, #16]	; (43f0 <_get_cycles_for_ms+0x20>)
    43e0:	4618      	mov	r0, r3
    43e2:	4b04      	ldr	r3, [pc, #16]	; (43f4 <_get_cycles_for_ms+0x24>)
    43e4:	4798      	blx	r3
    43e6:	4603      	mov	r3, r0
}
    43e8:	4618      	mov	r0, r3
    43ea:	3708      	adds	r7, #8
    43ec:	46bd      	mov	sp, r7
    43ee:	bd80      	pop	{r7, pc}
    43f0:	07270e00 	.word	0x07270e00
    43f4:	0000428d 	.word	0x0000428d

000043f8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    43f8:	b480      	push	{r7}
    43fa:	b083      	sub	sp, #12
    43fc:	af00      	add	r7, sp, #0
    43fe:	6078      	str	r0, [r7, #4]
    4400:	6039      	str	r1, [r7, #0]
    4402:	bf00      	nop
    4404:	f3af 8000 	nop.w

00004408 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4408:	3901      	subs	r1, #1
    440a:	d8fd      	bhi.n	4408 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    440c:	bf00      	nop
    440e:	370c      	adds	r7, #12
    4410:	46bd      	mov	sp, r7
    4412:	f85d 7b04 	ldr.w	r7, [sp], #4
    4416:	4770      	bx	lr

00004418 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4418:	b480      	push	{r7}
    441a:	b083      	sub	sp, #12
    441c:	af00      	add	r7, sp, #0
    441e:	6078      	str	r0, [r7, #4]
    4420:	460b      	mov	r3, r1
    4422:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    4424:	687b      	ldr	r3, [r7, #4]
    4426:	881b      	ldrh	r3, [r3, #0]
    4428:	b29a      	uxth	r2, r3
    442a:	887b      	ldrh	r3, [r7, #2]
    442c:	021b      	lsls	r3, r3, #8
    442e:	b29b      	uxth	r3, r3
    4430:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    4434:	b29b      	uxth	r3, r3
    4436:	4313      	orrs	r3, r2
    4438:	b29a      	uxth	r2, r3
    443a:	687b      	ldr	r3, [r7, #4]
    443c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    443e:	bf00      	nop
    4440:	370c      	adds	r7, #12
    4442:	46bd      	mov	sp, r7
    4444:	f85d 7b04 	ldr.w	r7, [sp], #4
    4448:	4770      	bx	lr

0000444a <hri_port_set_EVCTRL_reg>:
{
    444a:	b480      	push	{r7}
    444c:	b085      	sub	sp, #20
    444e:	af00      	add	r7, sp, #0
    4450:	60f8      	str	r0, [r7, #12]
    4452:	460b      	mov	r3, r1
    4454:	607a      	str	r2, [r7, #4]
    4456:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4458:	7afb      	ldrb	r3, [r7, #11]
    445a:	7afa      	ldrb	r2, [r7, #11]
    445c:	68f9      	ldr	r1, [r7, #12]
    445e:	01d2      	lsls	r2, r2, #7
    4460:	440a      	add	r2, r1
    4462:	322c      	adds	r2, #44	; 0x2c
    4464:	6811      	ldr	r1, [r2, #0]
    4466:	687a      	ldr	r2, [r7, #4]
    4468:	430a      	orrs	r2, r1
    446a:	68f9      	ldr	r1, [r7, #12]
    446c:	01db      	lsls	r3, r3, #7
    446e:	440b      	add	r3, r1
    4470:	332c      	adds	r3, #44	; 0x2c
    4472:	601a      	str	r2, [r3, #0]
}
    4474:	bf00      	nop
    4476:	3714      	adds	r7, #20
    4478:	46bd      	mov	sp, r7
    447a:	f85d 7b04 	ldr.w	r7, [sp], #4
    447e:	4770      	bx	lr

00004480 <_port_event_init>:

static inline void _port_event_init()
{
    4480:	b580      	push	{r7, lr}
    4482:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    4484:	2200      	movs	r2, #0
    4486:	2100      	movs	r1, #0
    4488:	480a      	ldr	r0, [pc, #40]	; (44b4 <_port_event_init+0x34>)
    448a:	4b0b      	ldr	r3, [pc, #44]	; (44b8 <_port_event_init+0x38>)
    448c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    448e:	2200      	movs	r2, #0
    4490:	2101      	movs	r1, #1
    4492:	4808      	ldr	r0, [pc, #32]	; (44b4 <_port_event_init+0x34>)
    4494:	4b08      	ldr	r3, [pc, #32]	; (44b8 <_port_event_init+0x38>)
    4496:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4498:	f64e 72ef 	movw	r2, #61423	; 0xefef
    449c:	2102      	movs	r1, #2
    449e:	4805      	ldr	r0, [pc, #20]	; (44b4 <_port_event_init+0x34>)
    44a0:	4b05      	ldr	r3, [pc, #20]	; (44b8 <_port_event_init+0x38>)
    44a2:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    44a4:	2200      	movs	r2, #0
    44a6:	2103      	movs	r1, #3
    44a8:	4802      	ldr	r0, [pc, #8]	; (44b4 <_port_event_init+0x34>)
    44aa:	4b03      	ldr	r3, [pc, #12]	; (44b8 <_port_event_init+0x38>)
    44ac:	4798      	blx	r3
}
    44ae:	bf00      	nop
    44b0:	bd80      	pop	{r7, pc}
    44b2:	bf00      	nop
    44b4:	41008000 	.word	0x41008000
    44b8:	0000444b 	.word	0x0000444b

000044bc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    44bc:	b580      	push	{r7, lr}
    44be:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    44c0:	2104      	movs	r1, #4
    44c2:	480b      	ldr	r0, [pc, #44]	; (44f0 <_init_chip+0x34>)
    44c4:	4b0b      	ldr	r3, [pc, #44]	; (44f4 <_init_chip+0x38>)
    44c6:	4798      	blx	r3

	_osc32kctrl_init_sources();
    44c8:	4b0b      	ldr	r3, [pc, #44]	; (44f8 <_init_chip+0x3c>)
    44ca:	4798      	blx	r3
	_oscctrl_init_sources();
    44cc:	4b0b      	ldr	r3, [pc, #44]	; (44fc <_init_chip+0x40>)
    44ce:	4798      	blx	r3
	_mclk_init();
    44d0:	4b0b      	ldr	r3, [pc, #44]	; (4500 <_init_chip+0x44>)
    44d2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    44d4:	f44f 6084 	mov.w	r0, #1056	; 0x420
    44d8:	4b0a      	ldr	r3, [pc, #40]	; (4504 <_init_chip+0x48>)
    44da:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    44dc:	4b0a      	ldr	r3, [pc, #40]	; (4508 <_init_chip+0x4c>)
    44de:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    44e0:	f640 30df 	movw	r0, #3039	; 0xbdf
    44e4:	4b07      	ldr	r3, [pc, #28]	; (4504 <_init_chip+0x48>)
    44e6:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    44e8:	4b08      	ldr	r3, [pc, #32]	; (450c <_init_chip+0x50>)
    44ea:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    44ec:	bf00      	nop
    44ee:	bd80      	pop	{r7, pc}
    44f0:	41004000 	.word	0x41004000
    44f4:	00004419 	.word	0x00004419
    44f8:	00004fe5 	.word	0x00004fe5
    44fc:	000054ad 	.word	0x000054ad
    4500:	00004f05 	.word	0x00004f05
    4504:	00004dad 	.word	0x00004dad
    4508:	000054ed 	.word	0x000054ed
    450c:	00004481 	.word	0x00004481

00004510 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4510:	b480      	push	{r7}
    4512:	b083      	sub	sp, #12
    4514:	af00      	add	r7, sp, #0
    4516:	6078      	str	r0, [r7, #4]
    4518:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    451a:	687b      	ldr	r3, [r7, #4]
    451c:	683a      	ldr	r2, [r7, #0]
    451e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4520:	2300      	movs	r3, #0
}
    4522:	4618      	mov	r0, r3
    4524:	370c      	adds	r7, #12
    4526:	46bd      	mov	sp, r7
    4528:	f85d 7b04 	ldr.w	r7, [sp], #4
    452c:	4770      	bx	lr
	...

00004530 <__NVIC_EnableIRQ>:
{
    4530:	b480      	push	{r7}
    4532:	b083      	sub	sp, #12
    4534:	af00      	add	r7, sp, #0
    4536:	4603      	mov	r3, r0
    4538:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    453a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    453e:	2b00      	cmp	r3, #0
    4540:	db0b      	blt.n	455a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4542:	4909      	ldr	r1, [pc, #36]	; (4568 <__NVIC_EnableIRQ+0x38>)
    4544:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4548:	095b      	lsrs	r3, r3, #5
    454a:	88fa      	ldrh	r2, [r7, #6]
    454c:	f002 021f 	and.w	r2, r2, #31
    4550:	2001      	movs	r0, #1
    4552:	fa00 f202 	lsl.w	r2, r0, r2
    4556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    455a:	bf00      	nop
    455c:	370c      	adds	r7, #12
    455e:	46bd      	mov	sp, r7
    4560:	f85d 7b04 	ldr.w	r7, [sp], #4
    4564:	4770      	bx	lr
    4566:	bf00      	nop
    4568:	e000e100 	.word	0xe000e100

0000456c <__NVIC_DisableIRQ>:
{
    456c:	b480      	push	{r7}
    456e:	b083      	sub	sp, #12
    4570:	af00      	add	r7, sp, #0
    4572:	4603      	mov	r3, r0
    4574:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    457a:	2b00      	cmp	r3, #0
    457c:	db10      	blt.n	45a0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    457e:	490b      	ldr	r1, [pc, #44]	; (45ac <__NVIC_DisableIRQ+0x40>)
    4580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4584:	095b      	lsrs	r3, r3, #5
    4586:	88fa      	ldrh	r2, [r7, #6]
    4588:	f002 021f 	and.w	r2, r2, #31
    458c:	2001      	movs	r0, #1
    458e:	fa00 f202 	lsl.w	r2, r0, r2
    4592:	3320      	adds	r3, #32
    4594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4598:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    459c:	f3bf 8f6f 	isb	sy
}
    45a0:	bf00      	nop
    45a2:	370c      	adds	r7, #12
    45a4:	46bd      	mov	sp, r7
    45a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    45aa:	4770      	bx	lr
    45ac:	e000e100 	.word	0xe000e100

000045b0 <__NVIC_ClearPendingIRQ>:
{
    45b0:	b480      	push	{r7}
    45b2:	b083      	sub	sp, #12
    45b4:	af00      	add	r7, sp, #0
    45b6:	4603      	mov	r3, r0
    45b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    45ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    45be:	2b00      	cmp	r3, #0
    45c0:	db0c      	blt.n	45dc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    45c2:	4909      	ldr	r1, [pc, #36]	; (45e8 <__NVIC_ClearPendingIRQ+0x38>)
    45c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    45c8:	095b      	lsrs	r3, r3, #5
    45ca:	88fa      	ldrh	r2, [r7, #6]
    45cc:	f002 021f 	and.w	r2, r2, #31
    45d0:	2001      	movs	r0, #1
    45d2:	fa00 f202 	lsl.w	r2, r0, r2
    45d6:	3360      	adds	r3, #96	; 0x60
    45d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    45dc:	bf00      	nop
    45de:	370c      	adds	r7, #12
    45e0:	46bd      	mov	sp, r7
    45e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    45e6:	4770      	bx	lr
    45e8:	e000e100 	.word	0xe000e100

000045ec <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    45ec:	b480      	push	{r7}
    45ee:	b083      	sub	sp, #12
    45f0:	af00      	add	r7, sp, #0
    45f2:	6078      	str	r0, [r7, #4]
    45f4:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    45f6:	bf00      	nop
    45f8:	687b      	ldr	r3, [r7, #4]
    45fa:	685a      	ldr	r2, [r3, #4]
    45fc:	683b      	ldr	r3, [r7, #0]
    45fe:	4013      	ands	r3, r2
    4600:	2b00      	cmp	r3, #0
    4602:	d1f9      	bne.n	45f8 <hri_eic_wait_for_sync+0xc>
	};
}
    4604:	bf00      	nop
    4606:	370c      	adds	r7, #12
    4608:	46bd      	mov	sp, r7
    460a:	f85d 7b04 	ldr.w	r7, [sp], #4
    460e:	4770      	bx	lr

00004610 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4610:	b480      	push	{r7}
    4612:	b083      	sub	sp, #12
    4614:	af00      	add	r7, sp, #0
    4616:	6078      	str	r0, [r7, #4]
    4618:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    461a:	687b      	ldr	r3, [r7, #4]
    461c:	685a      	ldr	r2, [r3, #4]
    461e:	683b      	ldr	r3, [r7, #0]
    4620:	4013      	ands	r3, r2
    4622:	2b00      	cmp	r3, #0
    4624:	bf14      	ite	ne
    4626:	2301      	movne	r3, #1
    4628:	2300      	moveq	r3, #0
    462a:	b2db      	uxtb	r3, r3
}
    462c:	4618      	mov	r0, r3
    462e:	370c      	adds	r7, #12
    4630:	46bd      	mov	sp, r7
    4632:	f85d 7b04 	ldr.w	r7, [sp], #4
    4636:	4770      	bx	lr

00004638 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4638:	b480      	push	{r7}
    463a:	b083      	sub	sp, #12
    463c:	af00      	add	r7, sp, #0
    463e:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4640:	687b      	ldr	r3, [r7, #4]
    4642:	695b      	ldr	r3, [r3, #20]
}
    4644:	4618      	mov	r0, r3
    4646:	370c      	adds	r7, #12
    4648:	46bd      	mov	sp, r7
    464a:	f85d 7b04 	ldr.w	r7, [sp], #4
    464e:	4770      	bx	lr

00004650 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4650:	b480      	push	{r7}
    4652:	b083      	sub	sp, #12
    4654:	af00      	add	r7, sp, #0
    4656:	6078      	str	r0, [r7, #4]
    4658:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    465a:	687b      	ldr	r3, [r7, #4]
    465c:	683a      	ldr	r2, [r7, #0]
    465e:	615a      	str	r2, [r3, #20]
}
    4660:	bf00      	nop
    4662:	370c      	adds	r7, #12
    4664:	46bd      	mov	sp, r7
    4666:	f85d 7b04 	ldr.w	r7, [sp], #4
    466a:	4770      	bx	lr

0000466c <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    466c:	b480      	push	{r7}
    466e:	b083      	sub	sp, #12
    4670:	af00      	add	r7, sp, #0
    4672:	6078      	str	r0, [r7, #4]
    4674:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    4676:	687b      	ldr	r3, [r7, #4]
    4678:	683a      	ldr	r2, [r7, #0]
    467a:	611a      	str	r2, [r3, #16]
}
    467c:	bf00      	nop
    467e:	370c      	adds	r7, #12
    4680:	46bd      	mov	sp, r7
    4682:	f85d 7b04 	ldr.w	r7, [sp], #4
    4686:	4770      	bx	lr

00004688 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4688:	b480      	push	{r7}
    468a:	b083      	sub	sp, #12
    468c:	af00      	add	r7, sp, #0
    468e:	6078      	str	r0, [r7, #4]
    4690:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    4692:	687b      	ldr	r3, [r7, #4]
    4694:	683a      	ldr	r2, [r7, #0]
    4696:	60da      	str	r2, [r3, #12]
}
    4698:	bf00      	nop
    469a:	370c      	adds	r7, #12
    469c:	46bd      	mov	sp, r7
    469e:	f85d 7b04 	ldr.w	r7, [sp], #4
    46a2:	4770      	bx	lr

000046a4 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    46a4:	b580      	push	{r7, lr}
    46a6:	b082      	sub	sp, #8
    46a8:	af00      	add	r7, sp, #0
    46aa:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    46ac:	687b      	ldr	r3, [r7, #4]
    46ae:	781b      	ldrb	r3, [r3, #0]
    46b0:	b2db      	uxtb	r3, r3
    46b2:	f043 0302 	orr.w	r3, r3, #2
    46b6:	b2da      	uxtb	r2, r3
    46b8:	687b      	ldr	r3, [r7, #4]
    46ba:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    46bc:	2103      	movs	r1, #3
    46be:	6878      	ldr	r0, [r7, #4]
    46c0:	4b02      	ldr	r3, [pc, #8]	; (46cc <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    46c2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    46c4:	bf00      	nop
    46c6:	3708      	adds	r7, #8
    46c8:	46bd      	mov	sp, r7
    46ca:	bd80      	pop	{r7, pc}
    46cc:	000045ed 	.word	0x000045ed

000046d0 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    46d0:	b580      	push	{r7, lr}
    46d2:	b082      	sub	sp, #8
    46d4:	af00      	add	r7, sp, #0
    46d6:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    46d8:	687b      	ldr	r3, [r7, #4]
    46da:	781b      	ldrb	r3, [r3, #0]
    46dc:	b2db      	uxtb	r3, r3
    46de:	f023 0302 	bic.w	r3, r3, #2
    46e2:	b2da      	uxtb	r2, r3
    46e4:	687b      	ldr	r3, [r7, #4]
    46e6:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    46e8:	2103      	movs	r1, #3
    46ea:	6878      	ldr	r0, [r7, #4]
    46ec:	4b02      	ldr	r3, [pc, #8]	; (46f8 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    46ee:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    46f0:	bf00      	nop
    46f2:	3708      	adds	r7, #8
    46f4:	46bd      	mov	sp, r7
    46f6:	bd80      	pop	{r7, pc}
    46f8:	000045ed 	.word	0x000045ed

000046fc <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    46fc:	b580      	push	{r7, lr}
    46fe:	b084      	sub	sp, #16
    4700:	af00      	add	r7, sp, #0
    4702:	6078      	str	r0, [r7, #4]
    4704:	460b      	mov	r3, r1
    4706:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4708:	687b      	ldr	r3, [r7, #4]
    470a:	781b      	ldrb	r3, [r3, #0]
    470c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    470e:	7bfb      	ldrb	r3, [r7, #15]
    4710:	f023 0310 	bic.w	r3, r3, #16
    4714:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    4716:	78fb      	ldrb	r3, [r7, #3]
    4718:	011b      	lsls	r3, r3, #4
    471a:	b25a      	sxtb	r2, r3
    471c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4720:	4313      	orrs	r3, r2
    4722:	b25b      	sxtb	r3, r3
    4724:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    4726:	687b      	ldr	r3, [r7, #4]
    4728:	7bfa      	ldrb	r2, [r7, #15]
    472a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    472c:	2103      	movs	r1, #3
    472e:	6878      	ldr	r0, [r7, #4]
    4730:	4b02      	ldr	r3, [pc, #8]	; (473c <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4732:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4734:	bf00      	nop
    4736:	3710      	adds	r7, #16
    4738:	46bd      	mov	sp, r7
    473a:	bd80      	pop	{r7, pc}
    473c:	000045ed 	.word	0x000045ed

00004740 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4740:	b580      	push	{r7, lr}
    4742:	b084      	sub	sp, #16
    4744:	af00      	add	r7, sp, #0
    4746:	6078      	str	r0, [r7, #4]
    4748:	460b      	mov	r3, r1
    474a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    474c:	2103      	movs	r1, #3
    474e:	6878      	ldr	r0, [r7, #4]
    4750:	4b06      	ldr	r3, [pc, #24]	; (476c <hri_eic_get_CTRLA_reg+0x2c>)
    4752:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4754:	687b      	ldr	r3, [r7, #4]
    4756:	781b      	ldrb	r3, [r3, #0]
    4758:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    475a:	7bfa      	ldrb	r2, [r7, #15]
    475c:	78fb      	ldrb	r3, [r7, #3]
    475e:	4013      	ands	r3, r2
    4760:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4762:	7bfb      	ldrb	r3, [r7, #15]
}
    4764:	4618      	mov	r0, r3
    4766:	3710      	adds	r7, #16
    4768:	46bd      	mov	sp, r7
    476a:	bd80      	pop	{r7, pc}
    476c:	000045ed 	.word	0x000045ed

00004770 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4770:	b580      	push	{r7, lr}
    4772:	b082      	sub	sp, #8
    4774:	af00      	add	r7, sp, #0
    4776:	6078      	str	r0, [r7, #4]
    4778:	460b      	mov	r3, r1
    477a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    477c:	687b      	ldr	r3, [r7, #4]
    477e:	78fa      	ldrb	r2, [r7, #3]
    4780:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4782:	2103      	movs	r1, #3
    4784:	6878      	ldr	r0, [r7, #4]
    4786:	4b03      	ldr	r3, [pc, #12]	; (4794 <hri_eic_write_CTRLA_reg+0x24>)
    4788:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    478a:	bf00      	nop
    478c:	3708      	adds	r7, #8
    478e:	46bd      	mov	sp, r7
    4790:	bd80      	pop	{r7, pc}
    4792:	bf00      	nop
    4794:	000045ed 	.word	0x000045ed

00004798 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4798:	b480      	push	{r7}
    479a:	b083      	sub	sp, #12
    479c:	af00      	add	r7, sp, #0
    479e:	6078      	str	r0, [r7, #4]
    47a0:	460b      	mov	r3, r1
    47a2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    47a4:	687b      	ldr	r3, [r7, #4]
    47a6:	78fa      	ldrb	r2, [r7, #3]
    47a8:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    47aa:	bf00      	nop
    47ac:	370c      	adds	r7, #12
    47ae:	46bd      	mov	sp, r7
    47b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    47b4:	4770      	bx	lr

000047b6 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    47b6:	b480      	push	{r7}
    47b8:	b083      	sub	sp, #12
    47ba:	af00      	add	r7, sp, #0
    47bc:	6078      	str	r0, [r7, #4]
    47be:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    47c0:	687b      	ldr	r3, [r7, #4]
    47c2:	683a      	ldr	r2, [r7, #0]
    47c4:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    47c6:	bf00      	nop
    47c8:	370c      	adds	r7, #12
    47ca:	46bd      	mov	sp, r7
    47cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    47d0:	4770      	bx	lr

000047d2 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    47d2:	b480      	push	{r7}
    47d4:	b083      	sub	sp, #12
    47d6:	af00      	add	r7, sp, #0
    47d8:	6078      	str	r0, [r7, #4]
    47da:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    47dc:	687b      	ldr	r3, [r7, #4]
    47de:	683a      	ldr	r2, [r7, #0]
    47e0:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    47e2:	bf00      	nop
    47e4:	370c      	adds	r7, #12
    47e6:	46bd      	mov	sp, r7
    47e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    47ec:	4770      	bx	lr

000047ee <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    47ee:	b480      	push	{r7}
    47f0:	b085      	sub	sp, #20
    47f2:	af00      	add	r7, sp, #0
    47f4:	60f8      	str	r0, [r7, #12]
    47f6:	460b      	mov	r3, r1
    47f8:	607a      	str	r2, [r7, #4]
    47fa:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    47fc:	7afb      	ldrb	r3, [r7, #11]
    47fe:	68fa      	ldr	r2, [r7, #12]
    4800:	3306      	adds	r3, #6
    4802:	009b      	lsls	r3, r3, #2
    4804:	4413      	add	r3, r2
    4806:	687a      	ldr	r2, [r7, #4]
    4808:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    480a:	bf00      	nop
    480c:	3714      	adds	r7, #20
    480e:	46bd      	mov	sp, r7
    4810:	f85d 7b04 	ldr.w	r7, [sp], #4
    4814:	4770      	bx	lr

00004816 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    4816:	b480      	push	{r7}
    4818:	b083      	sub	sp, #12
    481a:	af00      	add	r7, sp, #0
    481c:	6078      	str	r0, [r7, #4]
    481e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4820:	687b      	ldr	r3, [r7, #4]
    4822:	683a      	ldr	r2, [r7, #0]
    4824:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    4826:	bf00      	nop
    4828:	370c      	adds	r7, #12
    482a:	46bd      	mov	sp, r7
    482c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4830:	4770      	bx	lr

00004832 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4832:	b480      	push	{r7}
    4834:	b083      	sub	sp, #12
    4836:	af00      	add	r7, sp, #0
    4838:	6078      	str	r0, [r7, #4]
    483a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    483c:	687b      	ldr	r3, [r7, #4]
    483e:	683a      	ldr	r2, [r7, #0]
    4840:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4842:	bf00      	nop
    4844:	370c      	adds	r7, #12
    4846:	46bd      	mov	sp, r7
    4848:	f85d 7b04 	ldr.w	r7, [sp], #4
    484c:	4770      	bx	lr
	...

00004850 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4850:	b580      	push	{r7, lr}
    4852:	b082      	sub	sp, #8
    4854:	af00      	add	r7, sp, #0
    4856:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4858:	2101      	movs	r1, #1
    485a:	484f      	ldr	r0, [pc, #316]	; (4998 <_ext_irq_init+0x148>)
    485c:	4b4f      	ldr	r3, [pc, #316]	; (499c <_ext_irq_init+0x14c>)
    485e:	4798      	blx	r3
    4860:	4603      	mov	r3, r0
    4862:	f083 0301 	eor.w	r3, r3, #1
    4866:	b2db      	uxtb	r3, r3
    4868:	2b00      	cmp	r3, #0
    486a:	d011      	beq.n	4890 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    486c:	2102      	movs	r1, #2
    486e:	484a      	ldr	r0, [pc, #296]	; (4998 <_ext_irq_init+0x148>)
    4870:	4b4b      	ldr	r3, [pc, #300]	; (49a0 <_ext_irq_init+0x150>)
    4872:	4798      	blx	r3
    4874:	4603      	mov	r3, r0
    4876:	2b00      	cmp	r3, #0
    4878:	d006      	beq.n	4888 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    487a:	4847      	ldr	r0, [pc, #284]	; (4998 <_ext_irq_init+0x148>)
    487c:	4b49      	ldr	r3, [pc, #292]	; (49a4 <_ext_irq_init+0x154>)
    487e:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4880:	2102      	movs	r1, #2
    4882:	4845      	ldr	r0, [pc, #276]	; (4998 <_ext_irq_init+0x148>)
    4884:	4b48      	ldr	r3, [pc, #288]	; (49a8 <_ext_irq_init+0x158>)
    4886:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4888:	2101      	movs	r1, #1
    488a:	4843      	ldr	r0, [pc, #268]	; (4998 <_ext_irq_init+0x148>)
    488c:	4b47      	ldr	r3, [pc, #284]	; (49ac <_ext_irq_init+0x15c>)
    488e:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4890:	2101      	movs	r1, #1
    4892:	4841      	ldr	r0, [pc, #260]	; (4998 <_ext_irq_init+0x148>)
    4894:	4b44      	ldr	r3, [pc, #272]	; (49a8 <_ext_irq_init+0x158>)
    4896:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4898:	2100      	movs	r1, #0
    489a:	483f      	ldr	r0, [pc, #252]	; (4998 <_ext_irq_init+0x148>)
    489c:	4b44      	ldr	r3, [pc, #272]	; (49b0 <_ext_irq_init+0x160>)
    489e:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    48a0:	2100      	movs	r1, #0
    48a2:	483d      	ldr	r0, [pc, #244]	; (4998 <_ext_irq_init+0x148>)
    48a4:	4b43      	ldr	r3, [pc, #268]	; (49b4 <_ext_irq_init+0x164>)
    48a6:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    48a8:	2100      	movs	r1, #0
    48aa:	483b      	ldr	r0, [pc, #236]	; (4998 <_ext_irq_init+0x148>)
    48ac:	4b42      	ldr	r3, [pc, #264]	; (49b8 <_ext_irq_init+0x168>)
    48ae:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    48b0:	f240 31bb 	movw	r1, #955	; 0x3bb
    48b4:	4838      	ldr	r0, [pc, #224]	; (4998 <_ext_irq_init+0x148>)
    48b6:	4b41      	ldr	r3, [pc, #260]	; (49bc <_ext_irq_init+0x16c>)
    48b8:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    48ba:	f240 313b 	movw	r1, #827	; 0x33b
    48be:	4836      	ldr	r0, [pc, #216]	; (4998 <_ext_irq_init+0x148>)
    48c0:	4b3f      	ldr	r3, [pc, #252]	; (49c0 <_ext_irq_init+0x170>)
    48c2:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    48c4:	2100      	movs	r1, #0
    48c6:	4834      	ldr	r0, [pc, #208]	; (4998 <_ext_irq_init+0x148>)
    48c8:	4b3e      	ldr	r3, [pc, #248]	; (49c4 <_ext_irq_init+0x174>)
    48ca:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    48cc:	4a3e      	ldr	r2, [pc, #248]	; (49c8 <_ext_irq_init+0x178>)
    48ce:	2100      	movs	r1, #0
    48d0:	4831      	ldr	r0, [pc, #196]	; (4998 <_ext_irq_init+0x148>)
    48d2:	4b3e      	ldr	r3, [pc, #248]	; (49cc <_ext_irq_init+0x17c>)
    48d4:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    48d6:	2211      	movs	r2, #17
    48d8:	2101      	movs	r1, #1
    48da:	482f      	ldr	r0, [pc, #188]	; (4998 <_ext_irq_init+0x148>)
    48dc:	4b3b      	ldr	r3, [pc, #236]	; (49cc <_ext_irq_init+0x17c>)
    48de:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    48e0:	482d      	ldr	r0, [pc, #180]	; (4998 <_ext_irq_init+0x148>)
    48e2:	4b3b      	ldr	r3, [pc, #236]	; (49d0 <_ext_irq_init+0x180>)
    48e4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    48e6:	200c      	movs	r0, #12
    48e8:	4b3a      	ldr	r3, [pc, #232]	; (49d4 <_ext_irq_init+0x184>)
    48ea:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    48ec:	200c      	movs	r0, #12
    48ee:	4b3a      	ldr	r3, [pc, #232]	; (49d8 <_ext_irq_init+0x188>)
    48f0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    48f2:	200c      	movs	r0, #12
    48f4:	4b39      	ldr	r3, [pc, #228]	; (49dc <_ext_irq_init+0x18c>)
    48f6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    48f8:	200d      	movs	r0, #13
    48fa:	4b36      	ldr	r3, [pc, #216]	; (49d4 <_ext_irq_init+0x184>)
    48fc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    48fe:	200d      	movs	r0, #13
    4900:	4b35      	ldr	r3, [pc, #212]	; (49d8 <_ext_irq_init+0x188>)
    4902:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    4904:	200d      	movs	r0, #13
    4906:	4b35      	ldr	r3, [pc, #212]	; (49dc <_ext_irq_init+0x18c>)
    4908:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    490a:	200f      	movs	r0, #15
    490c:	4b31      	ldr	r3, [pc, #196]	; (49d4 <_ext_irq_init+0x184>)
    490e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    4910:	200f      	movs	r0, #15
    4912:	4b31      	ldr	r3, [pc, #196]	; (49d8 <_ext_irq_init+0x188>)
    4914:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    4916:	200f      	movs	r0, #15
    4918:	4b30      	ldr	r3, [pc, #192]	; (49dc <_ext_irq_init+0x18c>)
    491a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    491c:	2010      	movs	r0, #16
    491e:	4b2d      	ldr	r3, [pc, #180]	; (49d4 <_ext_irq_init+0x184>)
    4920:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    4922:	2010      	movs	r0, #16
    4924:	4b2c      	ldr	r3, [pc, #176]	; (49d8 <_ext_irq_init+0x188>)
    4926:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4928:	2010      	movs	r0, #16
    492a:	4b2c      	ldr	r3, [pc, #176]	; (49dc <_ext_irq_init+0x18c>)
    492c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    492e:	2011      	movs	r0, #17
    4930:	4b28      	ldr	r3, [pc, #160]	; (49d4 <_ext_irq_init+0x184>)
    4932:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4934:	2011      	movs	r0, #17
    4936:	4b28      	ldr	r3, [pc, #160]	; (49d8 <_ext_irq_init+0x188>)
    4938:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    493a:	2011      	movs	r0, #17
    493c:	4b27      	ldr	r3, [pc, #156]	; (49dc <_ext_irq_init+0x18c>)
    493e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4940:	2012      	movs	r0, #18
    4942:	4b24      	ldr	r3, [pc, #144]	; (49d4 <_ext_irq_init+0x184>)
    4944:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4946:	2012      	movs	r0, #18
    4948:	4b23      	ldr	r3, [pc, #140]	; (49d8 <_ext_irq_init+0x188>)
    494a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    494c:	2012      	movs	r0, #18
    494e:	4b23      	ldr	r3, [pc, #140]	; (49dc <_ext_irq_init+0x18c>)
    4950:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    4952:	2013      	movs	r0, #19
    4954:	4b1f      	ldr	r3, [pc, #124]	; (49d4 <_ext_irq_init+0x184>)
    4956:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4958:	2013      	movs	r0, #19
    495a:	4b1f      	ldr	r3, [pc, #124]	; (49d8 <_ext_irq_init+0x188>)
    495c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    495e:	2013      	movs	r0, #19
    4960:	4b1e      	ldr	r3, [pc, #120]	; (49dc <_ext_irq_init+0x18c>)
    4962:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    4964:	2014      	movs	r0, #20
    4966:	4b1b      	ldr	r3, [pc, #108]	; (49d4 <_ext_irq_init+0x184>)
    4968:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    496a:	2014      	movs	r0, #20
    496c:	4b1a      	ldr	r3, [pc, #104]	; (49d8 <_ext_irq_init+0x188>)
    496e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    4970:	2014      	movs	r0, #20
    4972:	4b1a      	ldr	r3, [pc, #104]	; (49dc <_ext_irq_init+0x18c>)
    4974:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    4976:	2015      	movs	r0, #21
    4978:	4b16      	ldr	r3, [pc, #88]	; (49d4 <_ext_irq_init+0x184>)
    497a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    497c:	2015      	movs	r0, #21
    497e:	4b16      	ldr	r3, [pc, #88]	; (49d8 <_ext_irq_init+0x188>)
    4980:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    4982:	2015      	movs	r0, #21
    4984:	4b15      	ldr	r3, [pc, #84]	; (49dc <_ext_irq_init+0x18c>)
    4986:	4798      	blx	r3

	callback = cb;
    4988:	4a15      	ldr	r2, [pc, #84]	; (49e0 <_ext_irq_init+0x190>)
    498a:	687b      	ldr	r3, [r7, #4]
    498c:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    498e:	2300      	movs	r3, #0
}
    4990:	4618      	mov	r0, r3
    4992:	3708      	adds	r7, #8
    4994:	46bd      	mov	sp, r7
    4996:	bd80      	pop	{r7, pc}
    4998:	40002800 	.word	0x40002800
    499c:	00004611 	.word	0x00004611
    49a0:	00004741 	.word	0x00004741
    49a4:	000046d1 	.word	0x000046d1
    49a8:	000045ed 	.word	0x000045ed
    49ac:	00004771 	.word	0x00004771
    49b0:	000046fd 	.word	0x000046fd
    49b4:	00004799 	.word	0x00004799
    49b8:	000047b7 	.word	0x000047b7
    49bc:	000047d3 	.word	0x000047d3
    49c0:	00004817 	.word	0x00004817
    49c4:	00004833 	.word	0x00004833
    49c8:	90999013 	.word	0x90999013
    49cc:	000047ef 	.word	0x000047ef
    49d0:	000046a5 	.word	0x000046a5
    49d4:	0000456d 	.word	0x0000456d
    49d8:	000045b1 	.word	0x000045b1
    49dc:	00004531 	.word	0x00004531
    49e0:	20000b1c 	.word	0x20000b1c

000049e4 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    49e4:	b580      	push	{r7, lr}
    49e6:	b084      	sub	sp, #16
    49e8:	af00      	add	r7, sp, #0
    49ea:	6078      	str	r0, [r7, #4]
    49ec:	460b      	mov	r3, r1
    49ee:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    49f0:	23ff      	movs	r3, #255	; 0xff
    49f2:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    49f4:	2300      	movs	r3, #0
    49f6:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    49f8:	e010      	b.n	4a1c <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    49fa:	7bbb      	ldrb	r3, [r7, #14]
    49fc:	4a1c      	ldr	r2, [pc, #112]	; (4a70 <_ext_irq_enable+0x8c>)
    49fe:	00db      	lsls	r3, r3, #3
    4a00:	4413      	add	r3, r2
    4a02:	685a      	ldr	r2, [r3, #4]
    4a04:	687b      	ldr	r3, [r7, #4]
    4a06:	429a      	cmp	r2, r3
    4a08:	d105      	bne.n	4a16 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    4a0a:	7bbb      	ldrb	r3, [r7, #14]
    4a0c:	4a18      	ldr	r2, [pc, #96]	; (4a70 <_ext_irq_enable+0x8c>)
    4a0e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4a12:	73fb      	strb	r3, [r7, #15]
			break;
    4a14:	e005      	b.n	4a22 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    4a16:	7bbb      	ldrb	r3, [r7, #14]
    4a18:	3301      	adds	r3, #1
    4a1a:	73bb      	strb	r3, [r7, #14]
    4a1c:	7bbb      	ldrb	r3, [r7, #14]
    4a1e:	2b08      	cmp	r3, #8
    4a20:	d9eb      	bls.n	49fa <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    4a22:	7bfb      	ldrb	r3, [r7, #15]
    4a24:	2bff      	cmp	r3, #255	; 0xff
    4a26:	d102      	bne.n	4a2e <_ext_irq_enable+0x4a>
		return -1;
    4a28:	f04f 33ff 	mov.w	r3, #4294967295
    4a2c:	e01c      	b.n	4a68 <_ext_irq_enable+0x84>
	}

	if (enable) {
    4a2e:	78fb      	ldrb	r3, [r7, #3]
    4a30:	2b00      	cmp	r3, #0
    4a32:	d008      	beq.n	4a46 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    4a34:	7bfb      	ldrb	r3, [r7, #15]
    4a36:	2201      	movs	r2, #1
    4a38:	fa02 f303 	lsl.w	r3, r2, r3
    4a3c:	4619      	mov	r1, r3
    4a3e:	480d      	ldr	r0, [pc, #52]	; (4a74 <_ext_irq_enable+0x90>)
    4a40:	4b0d      	ldr	r3, [pc, #52]	; (4a78 <_ext_irq_enable+0x94>)
    4a42:	4798      	blx	r3
    4a44:	e00f      	b.n	4a66 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    4a46:	7bfb      	ldrb	r3, [r7, #15]
    4a48:	2201      	movs	r2, #1
    4a4a:	fa02 f303 	lsl.w	r3, r2, r3
    4a4e:	4619      	mov	r1, r3
    4a50:	4808      	ldr	r0, [pc, #32]	; (4a74 <_ext_irq_enable+0x90>)
    4a52:	4b0a      	ldr	r3, [pc, #40]	; (4a7c <_ext_irq_enable+0x98>)
    4a54:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    4a56:	7bfb      	ldrb	r3, [r7, #15]
    4a58:	2201      	movs	r2, #1
    4a5a:	fa02 f303 	lsl.w	r3, r2, r3
    4a5e:	4619      	mov	r1, r3
    4a60:	4804      	ldr	r0, [pc, #16]	; (4a74 <_ext_irq_enable+0x90>)
    4a62:	4b07      	ldr	r3, [pc, #28]	; (4a80 <_ext_irq_enable+0x9c>)
    4a64:	4798      	blx	r3
	}

	return ERR_NONE;
    4a66:	2300      	movs	r3, #0
}
    4a68:	4618      	mov	r0, r3
    4a6a:	3710      	adds	r7, #16
    4a6c:	46bd      	mov	sp, r7
    4a6e:	bd80      	pop	{r7, pc}
    4a70:	0000eec0 	.word	0x0000eec0
    4a74:	40002800 	.word	0x40002800
    4a78:	0000466d 	.word	0x0000466d
    4a7c:	00004689 	.word	0x00004689
    4a80:	00004651 	.word	0x00004651

00004a84 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4a84:	b580      	push	{r7, lr}
    4a86:	b084      	sub	sp, #16
    4a88:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    4a8a:	4841      	ldr	r0, [pc, #260]	; (4b90 <_ext_irq_handler+0x10c>)
    4a8c:	4b41      	ldr	r3, [pc, #260]	; (4b94 <_ext_irq_handler+0x110>)
    4a8e:	4798      	blx	r3
    4a90:	4603      	mov	r3, r0
    4a92:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4a94:	f04f 33ff 	mov.w	r3, #4294967295
    4a98:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4a9a:	683b      	ldr	r3, [r7, #0]
    4a9c:	4619      	mov	r1, r3
    4a9e:	483c      	ldr	r0, [pc, #240]	; (4b90 <_ext_irq_handler+0x10c>)
    4aa0:	4b3d      	ldr	r3, [pc, #244]	; (4b98 <_ext_irq_handler+0x114>)
    4aa2:	4798      	blx	r3

	ASSERT(callback);
    4aa4:	4b3d      	ldr	r3, [pc, #244]	; (4b9c <_ext_irq_handler+0x118>)
    4aa6:	681b      	ldr	r3, [r3, #0]
    4aa8:	2b00      	cmp	r3, #0
    4aaa:	bf14      	ite	ne
    4aac:	2301      	movne	r3, #1
    4aae:	2300      	moveq	r3, #0
    4ab0:	b2db      	uxtb	r3, r3
    4ab2:	f44f 7284 	mov.w	r2, #264	; 0x108
    4ab6:	493a      	ldr	r1, [pc, #232]	; (4ba0 <_ext_irq_handler+0x11c>)
    4ab8:	4618      	mov	r0, r3
    4aba:	4b3a      	ldr	r3, [pc, #232]	; (4ba4 <_ext_irq_handler+0x120>)
    4abc:	4798      	blx	r3

	while (flags) {
    4abe:	e060      	b.n	4b82 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    4ac0:	683b      	ldr	r3, [r7, #0]
    4ac2:	4618      	mov	r0, r3
    4ac4:	4b38      	ldr	r3, [pc, #224]	; (4ba8 <_ext_irq_handler+0x124>)
    4ac6:	4798      	blx	r3
    4ac8:	4603      	mov	r3, r0
    4aca:	b2db      	uxtb	r3, r3
    4acc:	3b01      	subs	r3, #1
    4ace:	b2db      	uxtb	r3, r3
    4ad0:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4ad2:	e047      	b.n	4b64 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4ad4:	2300      	movs	r3, #0
    4ad6:	71fb      	strb	r3, [r7, #7]
    4ad8:	2309      	movs	r3, #9
    4ada:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    4adc:	e024      	b.n	4b28 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    4ade:	79ba      	ldrb	r2, [r7, #6]
    4ae0:	79fb      	ldrb	r3, [r7, #7]
    4ae2:	4413      	add	r3, r2
    4ae4:	105b      	asrs	r3, r3, #1
    4ae6:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4ae8:	797b      	ldrb	r3, [r7, #5]
    4aea:	4a30      	ldr	r2, [pc, #192]	; (4bac <_ext_irq_handler+0x128>)
    4aec:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4af0:	461a      	mov	r2, r3
    4af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4af6:	429a      	cmp	r2, r3
    4af8:	d106      	bne.n	4b08 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    4afa:	797b      	ldrb	r3, [r7, #5]
    4afc:	4a2b      	ldr	r2, [pc, #172]	; (4bac <_ext_irq_handler+0x128>)
    4afe:	00db      	lsls	r3, r3, #3
    4b00:	4413      	add	r3, r2
    4b02:	685b      	ldr	r3, [r3, #4]
    4b04:	60bb      	str	r3, [r7, #8]
					break;
    4b06:	e013      	b.n	4b30 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    4b08:	797b      	ldrb	r3, [r7, #5]
    4b0a:	4a28      	ldr	r2, [pc, #160]	; (4bac <_ext_irq_handler+0x128>)
    4b0c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4b10:	461a      	mov	r2, r3
    4b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4b16:	429a      	cmp	r2, r3
    4b18:	da03      	bge.n	4b22 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    4b1a:	797b      	ldrb	r3, [r7, #5]
    4b1c:	3301      	adds	r3, #1
    4b1e:	71fb      	strb	r3, [r7, #7]
    4b20:	e002      	b.n	4b28 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    4b22:	797b      	ldrb	r3, [r7, #5]
    4b24:	3b01      	subs	r3, #1
    4b26:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4b28:	79ba      	ldrb	r2, [r7, #6]
    4b2a:	79fb      	ldrb	r3, [r7, #7]
    4b2c:	429a      	cmp	r2, r3
    4b2e:	d2d6      	bcs.n	4ade <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4b30:	68bb      	ldr	r3, [r7, #8]
    4b32:	f1b3 3fff 	cmp.w	r3, #4294967295
    4b36:	d003      	beq.n	4b40 <_ext_irq_handler+0xbc>
				callback(pin);
    4b38:	4b18      	ldr	r3, [pc, #96]	; (4b9c <_ext_irq_handler+0x118>)
    4b3a:	681b      	ldr	r3, [r3, #0]
    4b3c:	68b8      	ldr	r0, [r7, #8]
    4b3e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4b44:	2201      	movs	r2, #1
    4b46:	fa02 f303 	lsl.w	r3, r2, r3
    4b4a:	43da      	mvns	r2, r3
    4b4c:	683b      	ldr	r3, [r7, #0]
    4b4e:	4013      	ands	r3, r2
    4b50:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    4b52:	683b      	ldr	r3, [r7, #0]
    4b54:	4618      	mov	r0, r3
    4b56:	4b14      	ldr	r3, [pc, #80]	; (4ba8 <_ext_irq_handler+0x124>)
    4b58:	4798      	blx	r3
    4b5a:	4603      	mov	r3, r0
    4b5c:	b2db      	uxtb	r3, r3
    4b5e:	3b01      	subs	r3, #1
    4b60:	b2db      	uxtb	r3, r3
    4b62:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4b68:	f1b3 3fff 	cmp.w	r3, #4294967295
    4b6c:	d1b2      	bne.n	4ad4 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4b6e:	4808      	ldr	r0, [pc, #32]	; (4b90 <_ext_irq_handler+0x10c>)
    4b70:	4b08      	ldr	r3, [pc, #32]	; (4b94 <_ext_irq_handler+0x110>)
    4b72:	4798      	blx	r3
    4b74:	4603      	mov	r3, r0
    4b76:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4b78:	683b      	ldr	r3, [r7, #0]
    4b7a:	4619      	mov	r1, r3
    4b7c:	4804      	ldr	r0, [pc, #16]	; (4b90 <_ext_irq_handler+0x10c>)
    4b7e:	4b06      	ldr	r3, [pc, #24]	; (4b98 <_ext_irq_handler+0x114>)
    4b80:	4798      	blx	r3
	while (flags) {
    4b82:	683b      	ldr	r3, [r7, #0]
    4b84:	2b00      	cmp	r3, #0
    4b86:	d19b      	bne.n	4ac0 <_ext_irq_handler+0x3c>
	}
}
    4b88:	bf00      	nop
    4b8a:	3710      	adds	r7, #16
    4b8c:	46bd      	mov	sp, r7
    4b8e:	bd80      	pop	{r7, pc}
    4b90:	40002800 	.word	0x40002800
    4b94:	00004639 	.word	0x00004639
    4b98:	00004651 	.word	0x00004651
    4b9c:	20000b1c 	.word	0x20000b1c
    4ba0:	0000ef08 	.word	0x0000ef08
    4ba4:	000038b5 	.word	0x000038b5
    4ba8:	0000ea35 	.word	0x0000ea35
    4bac:	0000eec0 	.word	0x0000eec0

00004bb0 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    4bb0:	b580      	push	{r7, lr}
    4bb2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4bb4:	4b01      	ldr	r3, [pc, #4]	; (4bbc <EIC_0_Handler+0xc>)
    4bb6:	4798      	blx	r3
} /**
    4bb8:	bf00      	nop
    4bba:	bd80      	pop	{r7, pc}
    4bbc:	00004a85 	.word	0x00004a85

00004bc0 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    4bc0:	b580      	push	{r7, lr}
    4bc2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4bc4:	4b01      	ldr	r3, [pc, #4]	; (4bcc <EIC_1_Handler+0xc>)
    4bc6:	4798      	blx	r3
} /**
    4bc8:	bf00      	nop
    4bca:	bd80      	pop	{r7, pc}
    4bcc:	00004a85 	.word	0x00004a85

00004bd0 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    4bd0:	b580      	push	{r7, lr}
    4bd2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4bd4:	4b01      	ldr	r3, [pc, #4]	; (4bdc <EIC_3_Handler+0xc>)
    4bd6:	4798      	blx	r3
} /**
    4bd8:	bf00      	nop
    4bda:	bd80      	pop	{r7, pc}
    4bdc:	00004a85 	.word	0x00004a85

00004be0 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    4be0:	b580      	push	{r7, lr}
    4be2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4be4:	4b01      	ldr	r3, [pc, #4]	; (4bec <EIC_4_Handler+0xc>)
    4be6:	4798      	blx	r3
} /**
    4be8:	bf00      	nop
    4bea:	bd80      	pop	{r7, pc}
    4bec:	00004a85 	.word	0x00004a85

00004bf0 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4bf0:	b580      	push	{r7, lr}
    4bf2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4bf4:	4b01      	ldr	r3, [pc, #4]	; (4bfc <EIC_5_Handler+0xc>)
    4bf6:	4798      	blx	r3
} /**
    4bf8:	bf00      	nop
    4bfa:	bd80      	pop	{r7, pc}
    4bfc:	00004a85 	.word	0x00004a85

00004c00 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4c00:	b580      	push	{r7, lr}
    4c02:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4c04:	4b01      	ldr	r3, [pc, #4]	; (4c0c <EIC_6_Handler+0xc>)
    4c06:	4798      	blx	r3
} /**
    4c08:	bf00      	nop
    4c0a:	bd80      	pop	{r7, pc}
    4c0c:	00004a85 	.word	0x00004a85

00004c10 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4c10:	b580      	push	{r7, lr}
    4c12:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4c14:	4b01      	ldr	r3, [pc, #4]	; (4c1c <EIC_7_Handler+0xc>)
    4c16:	4798      	blx	r3
} /**
    4c18:	bf00      	nop
    4c1a:	bd80      	pop	{r7, pc}
    4c1c:	00004a85 	.word	0x00004a85

00004c20 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    4c20:	b580      	push	{r7, lr}
    4c22:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4c24:	4b01      	ldr	r3, [pc, #4]	; (4c2c <EIC_8_Handler+0xc>)
    4c26:	4798      	blx	r3
} /**
    4c28:	bf00      	nop
    4c2a:	bd80      	pop	{r7, pc}
    4c2c:	00004a85 	.word	0x00004a85

00004c30 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    4c30:	b580      	push	{r7, lr}
    4c32:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4c34:	4b01      	ldr	r3, [pc, #4]	; (4c3c <EIC_9_Handler+0xc>)
    4c36:	4798      	blx	r3
}
    4c38:	bf00      	nop
    4c3a:	bd80      	pop	{r7, pc}
    4c3c:	00004a85 	.word	0x00004a85

00004c40 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4c40:	b480      	push	{r7}
    4c42:	b085      	sub	sp, #20
    4c44:	af00      	add	r7, sp, #0
    4c46:	60f8      	str	r0, [r7, #12]
    4c48:	460b      	mov	r3, r1
    4c4a:	607a      	str	r2, [r7, #4]
    4c4c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4c4e:	7afa      	ldrb	r2, [r7, #11]
    4c50:	68fb      	ldr	r3, [r7, #12]
    4c52:	3248      	adds	r2, #72	; 0x48
    4c54:	6879      	ldr	r1, [r7, #4]
    4c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4c5a:	bf00      	nop
    4c5c:	3714      	adds	r7, #20
    4c5e:	46bd      	mov	sp, r7
    4c60:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c64:	4770      	bx	lr

00004c66 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    4c66:	b480      	push	{r7}
    4c68:	b083      	sub	sp, #12
    4c6a:	af00      	add	r7, sp, #0
    4c6c:	6078      	str	r0, [r7, #4]
    4c6e:	460b      	mov	r3, r1
    4c70:	70fb      	strb	r3, [r7, #3]
    4c72:	4613      	mov	r3, r2
    4c74:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    4c76:	78fb      	ldrb	r3, [r7, #3]
    4c78:	687a      	ldr	r2, [r7, #4]
    4c7a:	3304      	adds	r3, #4
    4c7c:	00db      	lsls	r3, r3, #3
    4c7e:	4413      	add	r3, r2
    4c80:	78ba      	ldrb	r2, [r7, #2]
    4c82:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4c84:	78fb      	ldrb	r3, [r7, #3]
    4c86:	78ba      	ldrb	r2, [r7, #2]
    4c88:	43d2      	mvns	r2, r2
    4c8a:	b2d1      	uxtb	r1, r2
    4c8c:	687a      	ldr	r2, [r7, #4]
    4c8e:	3304      	adds	r3, #4
    4c90:	00db      	lsls	r3, r3, #3
    4c92:	4413      	add	r3, r2
    4c94:	460a      	mov	r2, r1
    4c96:	711a      	strb	r2, [r3, #4]
}
    4c98:	bf00      	nop
    4c9a:	370c      	adds	r7, #12
    4c9c:	46bd      	mov	sp, r7
    4c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ca2:	4770      	bx	lr

00004ca4 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4ca4:	b480      	push	{r7}
    4ca6:	b085      	sub	sp, #20
    4ca8:	af00      	add	r7, sp, #0
    4caa:	60f8      	str	r0, [r7, #12]
    4cac:	460b      	mov	r3, r1
    4cae:	607a      	str	r2, [r7, #4]
    4cb0:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    4cb2:	7afa      	ldrb	r2, [r7, #11]
    4cb4:	68fb      	ldr	r3, [r7, #12]
    4cb6:	3204      	adds	r2, #4
    4cb8:	6879      	ldr	r1, [r7, #4]
    4cba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4cbe:	bf00      	nop
    4cc0:	3714      	adds	r7, #20
    4cc2:	46bd      	mov	sp, r7
    4cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cc8:	4770      	bx	lr
	...

00004ccc <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4ccc:	b580      	push	{r7, lr}
    4cce:	b082      	sub	sp, #8
    4cd0:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    4cd2:	2300      	movs	r3, #0
    4cd4:	71fb      	strb	r3, [r7, #7]
    4cd6:	e00b      	b.n	4cf0 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4cd8:	79fb      	ldrb	r3, [r7, #7]
    4cda:	4a18      	ldr	r2, [pc, #96]	; (4d3c <_event_system_init+0x70>)
    4cdc:	5cd3      	ldrb	r3, [r2, r3]
    4cde:	461a      	mov	r2, r3
    4ce0:	79fb      	ldrb	r3, [r7, #7]
    4ce2:	4619      	mov	r1, r3
    4ce4:	4816      	ldr	r0, [pc, #88]	; (4d40 <_event_system_init+0x74>)
    4ce6:	4b17      	ldr	r3, [pc, #92]	; (4d44 <_event_system_init+0x78>)
    4ce8:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4cea:	79fb      	ldrb	r3, [r7, #7]
    4cec:	3301      	adds	r3, #1
    4cee:	71fb      	strb	r3, [r7, #7]
    4cf0:	79fb      	ldrb	r3, [r7, #7]
    4cf2:	2b42      	cmp	r3, #66	; 0x42
    4cf4:	d9f0      	bls.n	4cd8 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4cf6:	2300      	movs	r3, #0
    4cf8:	71fb      	strb	r3, [r7, #7]
    4cfa:	e016      	b.n	4d2a <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4cfc:	79fb      	ldrb	r3, [r7, #7]
    4cfe:	4a12      	ldr	r2, [pc, #72]	; (4d48 <_event_system_init+0x7c>)
    4d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4d04:	461a      	mov	r2, r3
    4d06:	79fb      	ldrb	r3, [r7, #7]
    4d08:	4619      	mov	r1, r3
    4d0a:	480d      	ldr	r0, [pc, #52]	; (4d40 <_event_system_init+0x74>)
    4d0c:	4b0f      	ldr	r3, [pc, #60]	; (4d4c <_event_system_init+0x80>)
    4d0e:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4d10:	79fb      	ldrb	r3, [r7, #7]
    4d12:	4a0f      	ldr	r2, [pc, #60]	; (4d50 <_event_system_init+0x84>)
    4d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4d18:	b2da      	uxtb	r2, r3
    4d1a:	79fb      	ldrb	r3, [r7, #7]
    4d1c:	4619      	mov	r1, r3
    4d1e:	4808      	ldr	r0, [pc, #32]	; (4d40 <_event_system_init+0x74>)
    4d20:	4b0c      	ldr	r3, [pc, #48]	; (4d54 <_event_system_init+0x88>)
    4d22:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4d24:	79fb      	ldrb	r3, [r7, #7]
    4d26:	3301      	adds	r3, #1
    4d28:	71fb      	strb	r3, [r7, #7]
    4d2a:	79fb      	ldrb	r3, [r7, #7]
    4d2c:	2b1f      	cmp	r3, #31
    4d2e:	d9e5      	bls.n	4cfc <_event_system_init+0x30>
	}

	return ERR_NONE;
    4d30:	2300      	movs	r3, #0
}
    4d32:	4618      	mov	r0, r3
    4d34:	3708      	adds	r7, #8
    4d36:	46bd      	mov	sp, r7
    4d38:	bd80      	pop	{r7, pc}
    4d3a:	bf00      	nop
    4d3c:	0000ef20 	.word	0x0000ef20
    4d40:	4100e000 	.word	0x4100e000
    4d44:	00004c41 	.word	0x00004c41
    4d48:	0000ef64 	.word	0x0000ef64
    4d4c:	00004ca5 	.word	0x00004ca5
    4d50:	0000efa4 	.word	0x0000efa4
    4d54:	00004c67 	.word	0x00004c67

00004d58 <hri_gclk_wait_for_sync>:
{
    4d58:	b480      	push	{r7}
    4d5a:	b083      	sub	sp, #12
    4d5c:	af00      	add	r7, sp, #0
    4d5e:	6078      	str	r0, [r7, #4]
    4d60:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4d62:	bf00      	nop
    4d64:	687b      	ldr	r3, [r7, #4]
    4d66:	685a      	ldr	r2, [r3, #4]
    4d68:	683b      	ldr	r3, [r7, #0]
    4d6a:	4013      	ands	r3, r2
    4d6c:	2b00      	cmp	r3, #0
    4d6e:	d1f9      	bne.n	4d64 <hri_gclk_wait_for_sync+0xc>
}
    4d70:	bf00      	nop
    4d72:	370c      	adds	r7, #12
    4d74:	46bd      	mov	sp, r7
    4d76:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d7a:	4770      	bx	lr

00004d7c <hri_gclk_write_GENCTRL_reg>:
{
    4d7c:	b580      	push	{r7, lr}
    4d7e:	b084      	sub	sp, #16
    4d80:	af00      	add	r7, sp, #0
    4d82:	60f8      	str	r0, [r7, #12]
    4d84:	460b      	mov	r3, r1
    4d86:	607a      	str	r2, [r7, #4]
    4d88:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4d8a:	7afa      	ldrb	r2, [r7, #11]
    4d8c:	68fb      	ldr	r3, [r7, #12]
    4d8e:	3208      	adds	r2, #8
    4d90:	6879      	ldr	r1, [r7, #4]
    4d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4d96:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4d9a:	68f8      	ldr	r0, [r7, #12]
    4d9c:	4b02      	ldr	r3, [pc, #8]	; (4da8 <hri_gclk_write_GENCTRL_reg+0x2c>)
    4d9e:	4798      	blx	r3
}
    4da0:	bf00      	nop
    4da2:	3710      	adds	r7, #16
    4da4:	46bd      	mov	sp, r7
    4da6:	bd80      	pop	{r7, pc}
    4da8:	00004d59 	.word	0x00004d59

00004dac <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    4dac:	b580      	push	{r7, lr}
    4dae:	b082      	sub	sp, #8
    4db0:	af00      	add	r7, sp, #0
    4db2:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    4db4:	687b      	ldr	r3, [r7, #4]
    4db6:	f003 0301 	and.w	r3, r3, #1
    4dba:	2b00      	cmp	r3, #0
    4dbc:	d004      	beq.n	4dc8 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    4dbe:	4a3b      	ldr	r2, [pc, #236]	; (4eac <_gclk_init_generators_by_fref+0x100>)
    4dc0:	2100      	movs	r1, #0
    4dc2:	483b      	ldr	r0, [pc, #236]	; (4eb0 <_gclk_init_generators_by_fref+0x104>)
    4dc4:	4b3b      	ldr	r3, [pc, #236]	; (4eb4 <_gclk_init_generators_by_fref+0x108>)
    4dc6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4dc8:	687b      	ldr	r3, [r7, #4]
    4dca:	f003 0302 	and.w	r3, r3, #2
    4dce:	2b00      	cmp	r3, #0
    4dd0:	d004      	beq.n	4ddc <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    4dd2:	4a39      	ldr	r2, [pc, #228]	; (4eb8 <_gclk_init_generators_by_fref+0x10c>)
    4dd4:	2101      	movs	r1, #1
    4dd6:	4836      	ldr	r0, [pc, #216]	; (4eb0 <_gclk_init_generators_by_fref+0x104>)
    4dd8:	4b36      	ldr	r3, [pc, #216]	; (4eb4 <_gclk_init_generators_by_fref+0x108>)
    4dda:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4ddc:	687b      	ldr	r3, [r7, #4]
    4dde:	f003 0304 	and.w	r3, r3, #4
    4de2:	2b00      	cmp	r3, #0
    4de4:	d004      	beq.n	4df0 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    4de6:	4a35      	ldr	r2, [pc, #212]	; (4ebc <_gclk_init_generators_by_fref+0x110>)
    4de8:	2102      	movs	r1, #2
    4dea:	4831      	ldr	r0, [pc, #196]	; (4eb0 <_gclk_init_generators_by_fref+0x104>)
    4dec:	4b31      	ldr	r3, [pc, #196]	; (4eb4 <_gclk_init_generators_by_fref+0x108>)
    4dee:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4df0:	687b      	ldr	r3, [r7, #4]
    4df2:	f003 0308 	and.w	r3, r3, #8
    4df6:	2b00      	cmp	r3, #0
    4df8:	d004      	beq.n	4e04 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    4dfa:	4a31      	ldr	r2, [pc, #196]	; (4ec0 <_gclk_init_generators_by_fref+0x114>)
    4dfc:	2103      	movs	r1, #3
    4dfe:	482c      	ldr	r0, [pc, #176]	; (4eb0 <_gclk_init_generators_by_fref+0x104>)
    4e00:	4b2c      	ldr	r3, [pc, #176]	; (4eb4 <_gclk_init_generators_by_fref+0x108>)
    4e02:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4e04:	687b      	ldr	r3, [r7, #4]
    4e06:	f003 0310 	and.w	r3, r3, #16
    4e0a:	2b00      	cmp	r3, #0
    4e0c:	d004      	beq.n	4e18 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4e0e:	4a2d      	ldr	r2, [pc, #180]	; (4ec4 <_gclk_init_generators_by_fref+0x118>)
    4e10:	2104      	movs	r1, #4
    4e12:	4827      	ldr	r0, [pc, #156]	; (4eb0 <_gclk_init_generators_by_fref+0x104>)
    4e14:	4b27      	ldr	r3, [pc, #156]	; (4eb4 <_gclk_init_generators_by_fref+0x108>)
    4e16:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4e18:	687b      	ldr	r3, [r7, #4]
    4e1a:	f003 0320 	and.w	r3, r3, #32
    4e1e:	2b00      	cmp	r3, #0
    4e20:	d004      	beq.n	4e2c <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    4e22:	4a29      	ldr	r2, [pc, #164]	; (4ec8 <_gclk_init_generators_by_fref+0x11c>)
    4e24:	2105      	movs	r1, #5
    4e26:	4822      	ldr	r0, [pc, #136]	; (4eb0 <_gclk_init_generators_by_fref+0x104>)
    4e28:	4b22      	ldr	r3, [pc, #136]	; (4eb4 <_gclk_init_generators_by_fref+0x108>)
    4e2a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    4e2c:	687b      	ldr	r3, [r7, #4]
    4e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4e32:	2b00      	cmp	r3, #0
    4e34:	d004      	beq.n	4e40 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    4e36:	4a25      	ldr	r2, [pc, #148]	; (4ecc <_gclk_init_generators_by_fref+0x120>)
    4e38:	2106      	movs	r1, #6
    4e3a:	481d      	ldr	r0, [pc, #116]	; (4eb0 <_gclk_init_generators_by_fref+0x104>)
    4e3c:	4b1d      	ldr	r3, [pc, #116]	; (4eb4 <_gclk_init_generators_by_fref+0x108>)
    4e3e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    4e40:	687b      	ldr	r3, [r7, #4]
    4e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4e46:	2b00      	cmp	r3, #0
    4e48:	d004      	beq.n	4e54 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    4e4a:	4a21      	ldr	r2, [pc, #132]	; (4ed0 <_gclk_init_generators_by_fref+0x124>)
    4e4c:	2107      	movs	r1, #7
    4e4e:	4818      	ldr	r0, [pc, #96]	; (4eb0 <_gclk_init_generators_by_fref+0x104>)
    4e50:	4b18      	ldr	r3, [pc, #96]	; (4eb4 <_gclk_init_generators_by_fref+0x108>)
    4e52:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    4e54:	687b      	ldr	r3, [r7, #4]
    4e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4e5a:	2b00      	cmp	r3, #0
    4e5c:	d004      	beq.n	4e68 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    4e5e:	4a1d      	ldr	r2, [pc, #116]	; (4ed4 <_gclk_init_generators_by_fref+0x128>)
    4e60:	2108      	movs	r1, #8
    4e62:	4813      	ldr	r0, [pc, #76]	; (4eb0 <_gclk_init_generators_by_fref+0x104>)
    4e64:	4b13      	ldr	r3, [pc, #76]	; (4eb4 <_gclk_init_generators_by_fref+0x108>)
    4e66:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    4e68:	687b      	ldr	r3, [r7, #4]
    4e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4e6e:	2b00      	cmp	r3, #0
    4e70:	d004      	beq.n	4e7c <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    4e72:	4a19      	ldr	r2, [pc, #100]	; (4ed8 <_gclk_init_generators_by_fref+0x12c>)
    4e74:	2109      	movs	r1, #9
    4e76:	480e      	ldr	r0, [pc, #56]	; (4eb0 <_gclk_init_generators_by_fref+0x104>)
    4e78:	4b0e      	ldr	r3, [pc, #56]	; (4eb4 <_gclk_init_generators_by_fref+0x108>)
    4e7a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4e7c:	687b      	ldr	r3, [r7, #4]
    4e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4e82:	2b00      	cmp	r3, #0
    4e84:	d004      	beq.n	4e90 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    4e86:	4a15      	ldr	r2, [pc, #84]	; (4edc <_gclk_init_generators_by_fref+0x130>)
    4e88:	210a      	movs	r1, #10
    4e8a:	4809      	ldr	r0, [pc, #36]	; (4eb0 <_gclk_init_generators_by_fref+0x104>)
    4e8c:	4b09      	ldr	r3, [pc, #36]	; (4eb4 <_gclk_init_generators_by_fref+0x108>)
    4e8e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4e90:	687b      	ldr	r3, [r7, #4]
    4e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    4e96:	2b00      	cmp	r3, #0
    4e98:	d004      	beq.n	4ea4 <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    4e9a:	4a11      	ldr	r2, [pc, #68]	; (4ee0 <_gclk_init_generators_by_fref+0x134>)
    4e9c:	210b      	movs	r1, #11
    4e9e:	4804      	ldr	r0, [pc, #16]	; (4eb0 <_gclk_init_generators_by_fref+0x104>)
    4ea0:	4b04      	ldr	r3, [pc, #16]	; (4eb4 <_gclk_init_generators_by_fref+0x108>)
    4ea2:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4ea4:	bf00      	nop
    4ea6:	3708      	adds	r7, #8
    4ea8:	46bd      	mov	sp, r7
    4eaa:	bd80      	pop	{r7, pc}
    4eac:	00010107 	.word	0x00010107
    4eb0:	40001c00 	.word	0x40001c00
    4eb4:	00004d7d 	.word	0x00004d7d
    4eb8:	00010907 	.word	0x00010907
    4ebc:	00010906 	.word	0x00010906
    4ec0:	00020908 	.word	0x00020908
    4ec4:	00010901 	.word	0x00010901
    4ec8:	00062901 	.word	0x00062901
    4ecc:	000c2901 	.word	0x000c2901
    4ed0:	00082908 	.word	0x00082908
    4ed4:	00032901 	.word	0x00032901
    4ed8:	00011908 	.word	0x00011908
    4edc:	00010905 	.word	0x00010905
    4ee0:	00041905 	.word	0x00041905

00004ee4 <hri_mclk_write_CPUDIV_reg>:
{
    4ee4:	b480      	push	{r7}
    4ee6:	b083      	sub	sp, #12
    4ee8:	af00      	add	r7, sp, #0
    4eea:	6078      	str	r0, [r7, #4]
    4eec:	460b      	mov	r3, r1
    4eee:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    4ef0:	687b      	ldr	r3, [r7, #4]
    4ef2:	78fa      	ldrb	r2, [r7, #3]
    4ef4:	715a      	strb	r2, [r3, #5]
}
    4ef6:	bf00      	nop
    4ef8:	370c      	adds	r7, #12
    4efa:	46bd      	mov	sp, r7
    4efc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f00:	4770      	bx	lr
	...

00004f04 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    4f04:	b580      	push	{r7, lr}
    4f06:	b082      	sub	sp, #8
    4f08:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    4f0a:	4b05      	ldr	r3, [pc, #20]	; (4f20 <_mclk_init+0x1c>)
    4f0c:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    4f0e:	2101      	movs	r1, #1
    4f10:	6878      	ldr	r0, [r7, #4]
    4f12:	4b04      	ldr	r3, [pc, #16]	; (4f24 <_mclk_init+0x20>)
    4f14:	4798      	blx	r3
}
    4f16:	bf00      	nop
    4f18:	3708      	adds	r7, #8
    4f1a:	46bd      	mov	sp, r7
    4f1c:	bd80      	pop	{r7, pc}
    4f1e:	bf00      	nop
    4f20:	40000800 	.word	0x40000800
    4f24:	00004ee5 	.word	0x00004ee5

00004f28 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4f28:	b480      	push	{r7}
    4f2a:	b083      	sub	sp, #12
    4f2c:	af00      	add	r7, sp, #0
    4f2e:	6078      	str	r0, [r7, #4]
    4f30:	460b      	mov	r3, r1
    4f32:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4f34:	687b      	ldr	r3, [r7, #4]
    4f36:	78fa      	ldrb	r2, [r7, #3]
    4f38:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4f3a:	bf00      	nop
    4f3c:	370c      	adds	r7, #12
    4f3e:	46bd      	mov	sp, r7
    4f40:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f44:	4770      	bx	lr

00004f46 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4f46:	b480      	push	{r7}
    4f48:	b083      	sub	sp, #12
    4f4a:	af00      	add	r7, sp, #0
    4f4c:	6078      	str	r0, [r7, #4]
    4f4e:	460b      	mov	r3, r1
    4f50:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4f52:	687b      	ldr	r3, [r7, #4]
    4f54:	887a      	ldrh	r2, [r7, #2]
    4f56:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4f58:	bf00      	nop
    4f5a:	370c      	adds	r7, #12
    4f5c:	46bd      	mov	sp, r7
    4f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f62:	4770      	bx	lr

00004f64 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4f64:	b480      	push	{r7}
    4f66:	b083      	sub	sp, #12
    4f68:	af00      	add	r7, sp, #0
    4f6a:	6078      	str	r0, [r7, #4]
    4f6c:	460b      	mov	r3, r1
    4f6e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4f70:	687b      	ldr	r3, [r7, #4]
    4f72:	78fa      	ldrb	r2, [r7, #3]
    4f74:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4f76:	bf00      	nop
    4f78:	370c      	adds	r7, #12
    4f7a:	46bd      	mov	sp, r7
    4f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f80:	4770      	bx	lr

00004f82 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4f82:	b480      	push	{r7}
    4f84:	b083      	sub	sp, #12
    4f86:	af00      	add	r7, sp, #0
    4f88:	6078      	str	r0, [r7, #4]
    4f8a:	460b      	mov	r3, r1
    4f8c:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    4f8e:	687b      	ldr	r3, [r7, #4]
    4f90:	78fa      	ldrb	r2, [r7, #3]
    4f92:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4f94:	bf00      	nop
    4f96:	370c      	adds	r7, #12
    4f98:	46bd      	mov	sp, r7
    4f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f9e:	4770      	bx	lr

00004fa0 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    4fa0:	b480      	push	{r7}
    4fa2:	b085      	sub	sp, #20
    4fa4:	af00      	add	r7, sp, #0
    4fa6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4fa8:	687b      	ldr	r3, [r7, #4]
    4faa:	69db      	ldr	r3, [r3, #28]
    4fac:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    4fae:	68fb      	ldr	r3, [r7, #12]
    4fb0:	0a1b      	lsrs	r3, r3, #8
    4fb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4fb6:	60fb      	str	r3, [r7, #12]
	return tmp;
    4fb8:	68fb      	ldr	r3, [r7, #12]
}
    4fba:	4618      	mov	r0, r3
    4fbc:	3714      	adds	r7, #20
    4fbe:	46bd      	mov	sp, r7
    4fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fc4:	4770      	bx	lr

00004fc6 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    4fc6:	b480      	push	{r7}
    4fc8:	b083      	sub	sp, #12
    4fca:	af00      	add	r7, sp, #0
    4fcc:	6078      	str	r0, [r7, #4]
    4fce:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    4fd0:	687b      	ldr	r3, [r7, #4]
    4fd2:	683a      	ldr	r2, [r7, #0]
    4fd4:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4fd6:	bf00      	nop
    4fd8:	370c      	adds	r7, #12
    4fda:	46bd      	mov	sp, r7
    4fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fe0:	4770      	bx	lr
	...

00004fe4 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    4fe4:	b580      	push	{r7, lr}
    4fe6:	b082      	sub	sp, #8
    4fe8:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    4fea:	4b13      	ldr	r3, [pc, #76]	; (5038 <_osc32kctrl_init_sources+0x54>)
    4fec:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    4fee:	2300      	movs	r3, #0
    4ff0:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    4ff2:	f242 018e 	movw	r1, #8334	; 0x208e
    4ff6:	6878      	ldr	r0, [r7, #4]
    4ff8:	4b10      	ldr	r3, [pc, #64]	; (503c <_osc32kctrl_init_sources+0x58>)
    4ffa:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    4ffc:	2100      	movs	r1, #0
    4ffe:	6878      	ldr	r0, [r7, #4]
    5000:	4b0f      	ldr	r3, [pc, #60]	; (5040 <_osc32kctrl_init_sources+0x5c>)
    5002:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    5004:	2100      	movs	r1, #0
    5006:	6878      	ldr	r0, [r7, #4]
    5008:	4b0e      	ldr	r3, [pc, #56]	; (5044 <_osc32kctrl_init_sources+0x60>)
    500a:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    500c:	6878      	ldr	r0, [r7, #4]
    500e:	4b0e      	ldr	r3, [pc, #56]	; (5048 <_osc32kctrl_init_sources+0x64>)
    5010:	4798      	blx	r3
    5012:	4603      	mov	r3, r0
    5014:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    5016:	887b      	ldrh	r3, [r7, #2]
    5018:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    501a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    501e:	4619      	mov	r1, r3
    5020:	6878      	ldr	r0, [r7, #4]
    5022:	4b0a      	ldr	r3, [pc, #40]	; (504c <_osc32kctrl_init_sources+0x68>)
    5024:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    5026:	2100      	movs	r1, #0
    5028:	6878      	ldr	r0, [r7, #4]
    502a:	4b09      	ldr	r3, [pc, #36]	; (5050 <_osc32kctrl_init_sources+0x6c>)
    502c:	4798      	blx	r3
	(void)calib;
}
    502e:	bf00      	nop
    5030:	3708      	adds	r7, #8
    5032:	46bd      	mov	sp, r7
    5034:	bd80      	pop	{r7, pc}
    5036:	bf00      	nop
    5038:	40001400 	.word	0x40001400
    503c:	00004f47 	.word	0x00004f47
    5040:	00004f65 	.word	0x00004f65
    5044:	00004f83 	.word	0x00004f83
    5048:	00004fa1 	.word	0x00004fa1
    504c:	00004fc7 	.word	0x00004fc7
    5050:	00004f29 	.word	0x00004f29

00005054 <hri_gclk_wait_for_sync>:
{
    5054:	b480      	push	{r7}
    5056:	b083      	sub	sp, #12
    5058:	af00      	add	r7, sp, #0
    505a:	6078      	str	r0, [r7, #4]
    505c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    505e:	bf00      	nop
    5060:	687b      	ldr	r3, [r7, #4]
    5062:	685a      	ldr	r2, [r3, #4]
    5064:	683b      	ldr	r3, [r7, #0]
    5066:	4013      	ands	r3, r2
    5068:	2b00      	cmp	r3, #0
    506a:	d1f9      	bne.n	5060 <hri_gclk_wait_for_sync+0xc>
}
    506c:	bf00      	nop
    506e:	370c      	adds	r7, #12
    5070:	46bd      	mov	sp, r7
    5072:	f85d 7b04 	ldr.w	r7, [sp], #4
    5076:	4770      	bx	lr

00005078 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    5078:	b480      	push	{r7}
    507a:	b083      	sub	sp, #12
    507c:	af00      	add	r7, sp, #0
    507e:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    5080:	687b      	ldr	r3, [r7, #4]
    5082:	685b      	ldr	r3, [r3, #4]
    5084:	089b      	lsrs	r3, r3, #2
    5086:	f003 0301 	and.w	r3, r3, #1
    508a:	2b00      	cmp	r3, #0
    508c:	bf14      	ite	ne
    508e:	2301      	movne	r3, #1
    5090:	2300      	moveq	r3, #0
    5092:	b2db      	uxtb	r3, r3
}
    5094:	4618      	mov	r0, r3
    5096:	370c      	adds	r7, #12
    5098:	46bd      	mov	sp, r7
    509a:	f85d 7b04 	ldr.w	r7, [sp], #4
    509e:	4770      	bx	lr

000050a0 <hri_gclk_read_SYNCBUSY_reg>:
{
    50a0:	b480      	push	{r7}
    50a2:	b083      	sub	sp, #12
    50a4:	af00      	add	r7, sp, #0
    50a6:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    50a8:	687b      	ldr	r3, [r7, #4]
    50aa:	685b      	ldr	r3, [r3, #4]
}
    50ac:	4618      	mov	r0, r3
    50ae:	370c      	adds	r7, #12
    50b0:	46bd      	mov	sp, r7
    50b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    50b6:	4770      	bx	lr

000050b8 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    50b8:	b580      	push	{r7, lr}
    50ba:	b086      	sub	sp, #24
    50bc:	af00      	add	r7, sp, #0
    50be:	60f8      	str	r0, [r7, #12]
    50c0:	460b      	mov	r3, r1
    50c2:	607a      	str	r2, [r7, #4]
    50c4:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    50c6:	7afa      	ldrb	r2, [r7, #11]
    50c8:	68fb      	ldr	r3, [r7, #12]
    50ca:	3208      	adds	r2, #8
    50cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    50d0:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    50d2:	697b      	ldr	r3, [r7, #20]
    50d4:	f023 030f 	bic.w	r3, r3, #15
    50d8:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    50da:	687b      	ldr	r3, [r7, #4]
    50dc:	f003 030f 	and.w	r3, r3, #15
    50e0:	697a      	ldr	r2, [r7, #20]
    50e2:	4313      	orrs	r3, r2
    50e4:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    50e6:	7afa      	ldrb	r2, [r7, #11]
    50e8:	68fb      	ldr	r3, [r7, #12]
    50ea:	3208      	adds	r2, #8
    50ec:	6979      	ldr	r1, [r7, #20]
    50ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    50f2:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    50f6:	68f8      	ldr	r0, [r7, #12]
    50f8:	4b02      	ldr	r3, [pc, #8]	; (5104 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    50fa:	4798      	blx	r3
}
    50fc:	bf00      	nop
    50fe:	3718      	adds	r7, #24
    5100:	46bd      	mov	sp, r7
    5102:	bd80      	pop	{r7, pc}
    5104:	00005055 	.word	0x00005055

00005108 <hri_gclk_write_PCHCTRL_reg>:
{
    5108:	b480      	push	{r7}
    510a:	b085      	sub	sp, #20
    510c:	af00      	add	r7, sp, #0
    510e:	60f8      	str	r0, [r7, #12]
    5110:	460b      	mov	r3, r1
    5112:	607a      	str	r2, [r7, #4]
    5114:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    5116:	7afa      	ldrb	r2, [r7, #11]
    5118:	68fb      	ldr	r3, [r7, #12]
    511a:	3220      	adds	r2, #32
    511c:	6879      	ldr	r1, [r7, #4]
    511e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5122:	bf00      	nop
    5124:	3714      	adds	r7, #20
    5126:	46bd      	mov	sp, r7
    5128:	f85d 7b04 	ldr.w	r7, [sp], #4
    512c:	4770      	bx	lr

0000512e <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    512e:	b480      	push	{r7}
    5130:	b085      	sub	sp, #20
    5132:	af00      	add	r7, sp, #0
    5134:	60f8      	str	r0, [r7, #12]
    5136:	460b      	mov	r3, r1
    5138:	607a      	str	r2, [r7, #4]
    513a:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    513c:	bf00      	nop
    513e:	7afa      	ldrb	r2, [r7, #11]
    5140:	68f9      	ldr	r1, [r7, #12]
    5142:	4613      	mov	r3, r2
    5144:	009b      	lsls	r3, r3, #2
    5146:	4413      	add	r3, r2
    5148:	009b      	lsls	r3, r3, #2
    514a:	440b      	add	r3, r1
    514c:	333c      	adds	r3, #60	; 0x3c
    514e:	681a      	ldr	r2, [r3, #0]
    5150:	687b      	ldr	r3, [r7, #4]
    5152:	4013      	ands	r3, r2
    5154:	2b00      	cmp	r3, #0
    5156:	d1f2      	bne.n	513e <hri_oscctrl_wait_for_sync+0x10>
	};
}
    5158:	bf00      	nop
    515a:	3714      	adds	r7, #20
    515c:	46bd      	mov	sp, r7
    515e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5162:	4770      	bx	lr

00005164 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    5164:	b480      	push	{r7}
    5166:	b083      	sub	sp, #12
    5168:	af00      	add	r7, sp, #0
    516a:	6078      	str	r0, [r7, #4]
    516c:	460b      	mov	r3, r1
    516e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    5170:	78fa      	ldrb	r2, [r7, #3]
    5172:	6879      	ldr	r1, [r7, #4]
    5174:	4613      	mov	r3, r2
    5176:	009b      	lsls	r3, r3, #2
    5178:	4413      	add	r3, r2
    517a:	009b      	lsls	r3, r3, #2
    517c:	440b      	add	r3, r1
    517e:	3340      	adds	r3, #64	; 0x40
    5180:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    5182:	f003 0301 	and.w	r3, r3, #1
    5186:	2b00      	cmp	r3, #0
    5188:	bf14      	ite	ne
    518a:	2301      	movne	r3, #1
    518c:	2300      	moveq	r3, #0
    518e:	b2db      	uxtb	r3, r3
}
    5190:	4618      	mov	r0, r3
    5192:	370c      	adds	r7, #12
    5194:	46bd      	mov	sp, r7
    5196:	f85d 7b04 	ldr.w	r7, [sp], #4
    519a:	4770      	bx	lr

0000519c <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    519c:	b480      	push	{r7}
    519e:	b083      	sub	sp, #12
    51a0:	af00      	add	r7, sp, #0
    51a2:	6078      	str	r0, [r7, #4]
    51a4:	460b      	mov	r3, r1
    51a6:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    51a8:	78fa      	ldrb	r2, [r7, #3]
    51aa:	6879      	ldr	r1, [r7, #4]
    51ac:	4613      	mov	r3, r2
    51ae:	009b      	lsls	r3, r3, #2
    51b0:	4413      	add	r3, r2
    51b2:	009b      	lsls	r3, r3, #2
    51b4:	440b      	add	r3, r1
    51b6:	3340      	adds	r3, #64	; 0x40
    51b8:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    51ba:	085b      	lsrs	r3, r3, #1
    51bc:	f003 0301 	and.w	r3, r3, #1
    51c0:	2b00      	cmp	r3, #0
    51c2:	bf14      	ite	ne
    51c4:	2301      	movne	r3, #1
    51c6:	2300      	moveq	r3, #0
    51c8:	b2db      	uxtb	r3, r3
}
    51ca:	4618      	mov	r0, r3
    51cc:	370c      	adds	r7, #12
    51ce:	46bd      	mov	sp, r7
    51d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    51d4:	4770      	bx	lr
	...

000051d8 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    51d8:	b580      	push	{r7, lr}
    51da:	b082      	sub	sp, #8
    51dc:	af00      	add	r7, sp, #0
    51de:	6078      	str	r0, [r7, #4]
    51e0:	460b      	mov	r3, r1
    51e2:	70fb      	strb	r3, [r7, #3]
    51e4:	4613      	mov	r3, r2
    51e6:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    51e8:	78fa      	ldrb	r2, [r7, #3]
    51ea:	6879      	ldr	r1, [r7, #4]
    51ec:	4613      	mov	r3, r2
    51ee:	009b      	lsls	r3, r3, #2
    51f0:	4413      	add	r3, r2
    51f2:	009b      	lsls	r3, r3, #2
    51f4:	440b      	add	r3, r1
    51f6:	3330      	adds	r3, #48	; 0x30
    51f8:	78ba      	ldrb	r2, [r7, #2]
    51fa:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    51fc:	78fb      	ldrb	r3, [r7, #3]
    51fe:	2202      	movs	r2, #2
    5200:	4619      	mov	r1, r3
    5202:	6878      	ldr	r0, [r7, #4]
    5204:	4b02      	ldr	r3, [pc, #8]	; (5210 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    5206:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5208:	bf00      	nop
    520a:	3708      	adds	r7, #8
    520c:	46bd      	mov	sp, r7
    520e:	bd80      	pop	{r7, pc}
    5210:	0000512f 	.word	0x0000512f

00005214 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    5214:	b580      	push	{r7, lr}
    5216:	b084      	sub	sp, #16
    5218:	af00      	add	r7, sp, #0
    521a:	60f8      	str	r0, [r7, #12]
    521c:	460b      	mov	r3, r1
    521e:	607a      	str	r2, [r7, #4]
    5220:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    5222:	7afa      	ldrb	r2, [r7, #11]
    5224:	68f9      	ldr	r1, [r7, #12]
    5226:	4613      	mov	r3, r2
    5228:	009b      	lsls	r3, r3, #2
    522a:	4413      	add	r3, r2
    522c:	009b      	lsls	r3, r3, #2
    522e:	440b      	add	r3, r1
    5230:	3334      	adds	r3, #52	; 0x34
    5232:	687a      	ldr	r2, [r7, #4]
    5234:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    5236:	7afb      	ldrb	r3, [r7, #11]
    5238:	2206      	movs	r2, #6
    523a:	4619      	mov	r1, r3
    523c:	68f8      	ldr	r0, [r7, #12]
    523e:	4b03      	ldr	r3, [pc, #12]	; (524c <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    5240:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5242:	bf00      	nop
    5244:	3710      	adds	r7, #16
    5246:	46bd      	mov	sp, r7
    5248:	bd80      	pop	{r7, pc}
    524a:	bf00      	nop
    524c:	0000512f 	.word	0x0000512f

00005250 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    5250:	b480      	push	{r7}
    5252:	b085      	sub	sp, #20
    5254:	af00      	add	r7, sp, #0
    5256:	60f8      	str	r0, [r7, #12]
    5258:	460b      	mov	r3, r1
    525a:	607a      	str	r2, [r7, #4]
    525c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    525e:	7afa      	ldrb	r2, [r7, #11]
    5260:	68f9      	ldr	r1, [r7, #12]
    5262:	4613      	mov	r3, r2
    5264:	009b      	lsls	r3, r3, #2
    5266:	4413      	add	r3, r2
    5268:	009b      	lsls	r3, r3, #2
    526a:	440b      	add	r3, r1
    526c:	3338      	adds	r3, #56	; 0x38
    526e:	687a      	ldr	r2, [r7, #4]
    5270:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5272:	bf00      	nop
    5274:	3714      	adds	r7, #20
    5276:	46bd      	mov	sp, r7
    5278:	f85d 7b04 	ldr.w	r7, [sp], #4
    527c:	4770      	bx	lr

0000527e <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    527e:	b480      	push	{r7}
    5280:	b083      	sub	sp, #12
    5282:	af00      	add	r7, sp, #0
    5284:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    5286:	687b      	ldr	r3, [r7, #4]
    5288:	691b      	ldr	r3, [r3, #16]
    528a:	085b      	lsrs	r3, r3, #1
    528c:	f003 0301 	and.w	r3, r3, #1
    5290:	2b00      	cmp	r3, #0
    5292:	bf14      	ite	ne
    5294:	2301      	movne	r3, #1
    5296:	2300      	moveq	r3, #0
    5298:	b2db      	uxtb	r3, r3
}
    529a:	4618      	mov	r0, r3
    529c:	370c      	adds	r7, #12
    529e:	46bd      	mov	sp, r7
    52a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    52a4:	4770      	bx	lr

000052a6 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    52a6:	b480      	push	{r7}
    52a8:	b083      	sub	sp, #12
    52aa:	af00      	add	r7, sp, #0
    52ac:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    52ae:	687b      	ldr	r3, [r7, #4]
    52b0:	691b      	ldr	r3, [r3, #16]
    52b2:	0a1b      	lsrs	r3, r3, #8
    52b4:	f003 0301 	and.w	r3, r3, #1
    52b8:	2b00      	cmp	r3, #0
    52ba:	bf14      	ite	ne
    52bc:	2301      	movne	r3, #1
    52be:	2300      	moveq	r3, #0
    52c0:	b2db      	uxtb	r3, r3
}
    52c2:	4618      	mov	r0, r3
    52c4:	370c      	adds	r7, #12
    52c6:	46bd      	mov	sp, r7
    52c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    52cc:	4770      	bx	lr

000052ce <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    52ce:	b480      	push	{r7}
    52d0:	b085      	sub	sp, #20
    52d2:	af00      	add	r7, sp, #0
    52d4:	6078      	str	r0, [r7, #4]
    52d6:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    52d8:	687b      	ldr	r3, [r7, #4]
    52da:	691b      	ldr	r3, [r3, #16]
    52dc:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    52de:	68fa      	ldr	r2, [r7, #12]
    52e0:	683b      	ldr	r3, [r7, #0]
    52e2:	4013      	ands	r3, r2
    52e4:	60fb      	str	r3, [r7, #12]
	return tmp;
    52e6:	68fb      	ldr	r3, [r7, #12]
}
    52e8:	4618      	mov	r0, r3
    52ea:	3714      	adds	r7, #20
    52ec:	46bd      	mov	sp, r7
    52ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    52f2:	4770      	bx	lr

000052f4 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    52f4:	b480      	push	{r7}
    52f6:	b085      	sub	sp, #20
    52f8:	af00      	add	r7, sp, #0
    52fa:	60f8      	str	r0, [r7, #12]
    52fc:	460b      	mov	r3, r1
    52fe:	607a      	str	r2, [r7, #4]
    5300:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    5302:	7afb      	ldrb	r3, [r7, #11]
    5304:	68fa      	ldr	r2, [r7, #12]
    5306:	3304      	adds	r3, #4
    5308:	009b      	lsls	r3, r3, #2
    530a:	4413      	add	r3, r2
    530c:	687a      	ldr	r2, [r7, #4]
    530e:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5310:	bf00      	nop
    5312:	3714      	adds	r7, #20
    5314:	46bd      	mov	sp, r7
    5316:	f85d 7b04 	ldr.w	r7, [sp], #4
    531a:	4770      	bx	lr

0000531c <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    531c:	b480      	push	{r7}
    531e:	b083      	sub	sp, #12
    5320:	af00      	add	r7, sp, #0
    5322:	6078      	str	r0, [r7, #4]
    5324:	460b      	mov	r3, r1
    5326:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5328:	687b      	ldr	r3, [r7, #4]
    532a:	78fa      	ldrb	r2, [r7, #3]
    532c:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    532e:	bf00      	nop
    5330:	370c      	adds	r7, #12
    5332:	46bd      	mov	sp, r7
    5334:	f85d 7b04 	ldr.w	r7, [sp], #4
    5338:	4770      	bx	lr

0000533a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    533a:	b480      	push	{r7}
    533c:	b085      	sub	sp, #20
    533e:	af00      	add	r7, sp, #0
    5340:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5342:	687b      	ldr	r3, [r7, #4]
    5344:	f893 3020 	ldrb.w	r3, [r3, #32]
    5348:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    534a:	7bfb      	ldrb	r3, [r7, #15]
    534c:	f003 0301 	and.w	r3, r3, #1
    5350:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5352:	7bfb      	ldrb	r3, [r7, #15]
    5354:	2b00      	cmp	r3, #0
    5356:	bf14      	ite	ne
    5358:	2301      	movne	r3, #1
    535a:	2300      	moveq	r3, #0
    535c:	b2db      	uxtb	r3, r3
}
    535e:	4618      	mov	r0, r3
    5360:	3714      	adds	r7, #20
    5362:	46bd      	mov	sp, r7
    5364:	f85d 7b04 	ldr.w	r7, [sp], #4
    5368:	4770      	bx	lr

0000536a <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    536a:	b480      	push	{r7}
    536c:	b083      	sub	sp, #12
    536e:	af00      	add	r7, sp, #0
    5370:	6078      	str	r0, [r7, #4]
    5372:	460b      	mov	r3, r1
    5374:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    5376:	687b      	ldr	r3, [r7, #4]
    5378:	78fa      	ldrb	r2, [r7, #3]
    537a:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    537e:	bf00      	nop
    5380:	370c      	adds	r7, #12
    5382:	46bd      	mov	sp, r7
    5384:	f85d 7b04 	ldr.w	r7, [sp], #4
    5388:	4770      	bx	lr

0000538a <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    538a:	b480      	push	{r7}
    538c:	b083      	sub	sp, #12
    538e:	af00      	add	r7, sp, #0
    5390:	6078      	str	r0, [r7, #4]
    5392:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    5394:	687b      	ldr	r3, [r7, #4]
    5396:	683a      	ldr	r2, [r7, #0]
    5398:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    539a:	bf00      	nop
    539c:	370c      	adds	r7, #12
    539e:	46bd      	mov	sp, r7
    53a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    53a4:	4770      	bx	lr

000053a6 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    53a6:	b480      	push	{r7}
    53a8:	b083      	sub	sp, #12
    53aa:	af00      	add	r7, sp, #0
    53ac:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    53ae:	687b      	ldr	r3, [r7, #4]
    53b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    53b2:	4618      	mov	r0, r3
    53b4:	370c      	adds	r7, #12
    53b6:	46bd      	mov	sp, r7
    53b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    53bc:	4770      	bx	lr

000053be <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    53be:	b480      	push	{r7}
    53c0:	b083      	sub	sp, #12
    53c2:	af00      	add	r7, sp, #0
    53c4:	6078      	str	r0, [r7, #4]
    53c6:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    53c8:	687b      	ldr	r3, [r7, #4]
    53ca:	683a      	ldr	r2, [r7, #0]
    53cc:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    53ce:	bf00      	nop
    53d0:	370c      	adds	r7, #12
    53d2:	46bd      	mov	sp, r7
    53d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    53d8:	4770      	bx	lr

000053da <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    53da:	b480      	push	{r7}
    53dc:	b085      	sub	sp, #20
    53de:	af00      	add	r7, sp, #0
    53e0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    53e2:	687b      	ldr	r3, [r7, #4]
    53e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    53e8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    53ea:	7bfb      	ldrb	r3, [r7, #15]
    53ec:	085b      	lsrs	r3, r3, #1
    53ee:	b2db      	uxtb	r3, r3
    53f0:	f003 0301 	and.w	r3, r3, #1
    53f4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    53f6:	7bfb      	ldrb	r3, [r7, #15]
    53f8:	2b00      	cmp	r3, #0
    53fa:	bf14      	ite	ne
    53fc:	2301      	movne	r3, #1
    53fe:	2300      	moveq	r3, #0
    5400:	b2db      	uxtb	r3, r3
}
    5402:	4618      	mov	r0, r3
    5404:	3714      	adds	r7, #20
    5406:	46bd      	mov	sp, r7
    5408:	f85d 7b04 	ldr.w	r7, [sp], #4
    540c:	4770      	bx	lr

0000540e <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    540e:	b480      	push	{r7}
    5410:	b085      	sub	sp, #20
    5412:	af00      	add	r7, sp, #0
    5414:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5416:	687b      	ldr	r3, [r7, #4]
    5418:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    541c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    541e:	7bfb      	ldrb	r3, [r7, #15]
    5420:	089b      	lsrs	r3, r3, #2
    5422:	b2db      	uxtb	r3, r3
    5424:	f003 0301 	and.w	r3, r3, #1
    5428:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    542a:	7bfb      	ldrb	r3, [r7, #15]
    542c:	2b00      	cmp	r3, #0
    542e:	bf14      	ite	ne
    5430:	2301      	movne	r3, #1
    5432:	2300      	moveq	r3, #0
    5434:	b2db      	uxtb	r3, r3
}
    5436:	4618      	mov	r0, r3
    5438:	3714      	adds	r7, #20
    543a:	46bd      	mov	sp, r7
    543c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5440:	4770      	bx	lr

00005442 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    5442:	b480      	push	{r7}
    5444:	b085      	sub	sp, #20
    5446:	af00      	add	r7, sp, #0
    5448:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    544a:	687b      	ldr	r3, [r7, #4]
    544c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5450:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    5452:	7bfb      	ldrb	r3, [r7, #15]
    5454:	08db      	lsrs	r3, r3, #3
    5456:	b2db      	uxtb	r3, r3
    5458:	f003 0301 	and.w	r3, r3, #1
    545c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    545e:	7bfb      	ldrb	r3, [r7, #15]
    5460:	2b00      	cmp	r3, #0
    5462:	bf14      	ite	ne
    5464:	2301      	movne	r3, #1
    5466:	2300      	moveq	r3, #0
    5468:	b2db      	uxtb	r3, r3
}
    546a:	4618      	mov	r0, r3
    546c:	3714      	adds	r7, #20
    546e:	46bd      	mov	sp, r7
    5470:	f85d 7b04 	ldr.w	r7, [sp], #4
    5474:	4770      	bx	lr

00005476 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    5476:	b480      	push	{r7}
    5478:	b085      	sub	sp, #20
    547a:	af00      	add	r7, sp, #0
    547c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    547e:	687b      	ldr	r3, [r7, #4]
    5480:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5484:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    5486:	7bfb      	ldrb	r3, [r7, #15]
    5488:	091b      	lsrs	r3, r3, #4
    548a:	b2db      	uxtb	r3, r3
    548c:	f003 0301 	and.w	r3, r3, #1
    5490:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5492:	7bfb      	ldrb	r3, [r7, #15]
    5494:	2b00      	cmp	r3, #0
    5496:	bf14      	ite	ne
    5498:	2301      	movne	r3, #1
    549a:	2300      	moveq	r3, #0
    549c:	b2db      	uxtb	r3, r3
}
    549e:	4618      	mov	r0, r3
    54a0:	3714      	adds	r7, #20
    54a2:	46bd      	mov	sp, r7
    54a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    54a8:	4770      	bx	lr
	...

000054ac <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    54ac:	b580      	push	{r7, lr}
    54ae:	b082      	sub	sp, #8
    54b0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    54b2:	4b0a      	ldr	r3, [pc, #40]	; (54dc <_oscctrl_init_sources+0x30>)
    54b4:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    54b6:	4a0a      	ldr	r2, [pc, #40]	; (54e0 <_oscctrl_init_sources+0x34>)
    54b8:	2101      	movs	r1, #1
    54ba:	6878      	ldr	r0, [r7, #4]
    54bc:	4b09      	ldr	r3, [pc, #36]	; (54e4 <_oscctrl_init_sources+0x38>)
    54be:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    54c0:	bf00      	nop
    54c2:	6878      	ldr	r0, [r7, #4]
    54c4:	4b08      	ldr	r3, [pc, #32]	; (54e8 <_oscctrl_init_sources+0x3c>)
    54c6:	4798      	blx	r3
    54c8:	4603      	mov	r3, r0
    54ca:	f083 0301 	eor.w	r3, r3, #1
    54ce:	b2db      	uxtb	r3, r3
    54d0:	2b00      	cmp	r3, #0
    54d2:	d1f6      	bne.n	54c2 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    54d4:	bf00      	nop
    54d6:	3708      	adds	r7, #8
    54d8:	46bd      	mov	sp, r7
    54da:	bd80      	pop	{r7, pc}
    54dc:	40001000 	.word	0x40001000
    54e0:	03002646 	.word	0x03002646
    54e4:	000052f5 	.word	0x000052f5
    54e8:	0000527f 	.word	0x0000527f

000054ec <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    54ec:	b580      	push	{r7, lr}
    54ee:	b084      	sub	sp, #16
    54f0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    54f2:	4b6b      	ldr	r3, [pc, #428]	; (56a0 <_oscctrl_init_referenced_generators+0x1b4>)
    54f4:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    54f6:	2204      	movs	r2, #4
    54f8:	2100      	movs	r1, #0
    54fa:	486a      	ldr	r0, [pc, #424]	; (56a4 <_oscctrl_init_referenced_generators+0x1b8>)
    54fc:	4b6a      	ldr	r3, [pc, #424]	; (56a8 <_oscctrl_init_referenced_generators+0x1bc>)
    54fe:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5500:	bf00      	nop
    5502:	4868      	ldr	r0, [pc, #416]	; (56a4 <_oscctrl_init_referenced_generators+0x1b8>)
    5504:	4b69      	ldr	r3, [pc, #420]	; (56ac <_oscctrl_init_referenced_generators+0x1c0>)
    5506:	4798      	blx	r3
    5508:	4603      	mov	r3, r0
    550a:	2b00      	cmp	r3, #0
    550c:	d1f9      	bne.n	5502 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    550e:	2100      	movs	r1, #0
    5510:	68f8      	ldr	r0, [r7, #12]
    5512:	4b67      	ldr	r3, [pc, #412]	; (56b0 <_oscctrl_init_referenced_generators+0x1c4>)
    5514:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    5516:	4967      	ldr	r1, [pc, #412]	; (56b4 <_oscctrl_init_referenced_generators+0x1c8>)
    5518:	68f8      	ldr	r0, [r7, #12]
    551a:	4b67      	ldr	r3, [pc, #412]	; (56b8 <_oscctrl_init_referenced_generators+0x1cc>)
    551c:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    551e:	bf00      	nop
    5520:	68f8      	ldr	r0, [r7, #12]
    5522:	4b66      	ldr	r3, [pc, #408]	; (56bc <_oscctrl_init_referenced_generators+0x1d0>)
    5524:	4798      	blx	r3
    5526:	4603      	mov	r3, r0
    5528:	2b00      	cmp	r3, #0
    552a:	d1f9      	bne.n	5520 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    552c:	2100      	movs	r1, #0
    552e:	68f8      	ldr	r0, [r7, #12]
    5530:	4b63      	ldr	r3, [pc, #396]	; (56c0 <_oscctrl_init_referenced_generators+0x1d4>)
    5532:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5534:	bf00      	nop
    5536:	68f8      	ldr	r0, [r7, #12]
    5538:	4b62      	ldr	r3, [pc, #392]	; (56c4 <_oscctrl_init_referenced_generators+0x1d8>)
    553a:	4798      	blx	r3
    553c:	4603      	mov	r3, r0
    553e:	2b00      	cmp	r3, #0
    5540:	d1f9      	bne.n	5536 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    5542:	2302      	movs	r3, #2
    5544:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    5546:	7afb      	ldrb	r3, [r7, #11]
    5548:	4619      	mov	r1, r3
    554a:	68f8      	ldr	r0, [r7, #12]
    554c:	4b58      	ldr	r3, [pc, #352]	; (56b0 <_oscctrl_init_referenced_generators+0x1c4>)
    554e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5550:	bf00      	nop
    5552:	68f8      	ldr	r0, [r7, #12]
    5554:	4b5c      	ldr	r3, [pc, #368]	; (56c8 <_oscctrl_init_referenced_generators+0x1dc>)
    5556:	4798      	blx	r3
    5558:	4603      	mov	r3, r0
    555a:	2b00      	cmp	r3, #0
    555c:	d1f9      	bne.n	5552 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    555e:	68f8      	ldr	r0, [r7, #12]
    5560:	4b5a      	ldr	r3, [pc, #360]	; (56cc <_oscctrl_init_referenced_generators+0x1e0>)
    5562:	4798      	blx	r3
    5564:	4603      	mov	r3, r0
    5566:	4619      	mov	r1, r3
    5568:	68f8      	ldr	r0, [r7, #12]
    556a:	4b59      	ldr	r3, [pc, #356]	; (56d0 <_oscctrl_init_referenced_generators+0x1e4>)
    556c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    556e:	bf00      	nop
    5570:	68f8      	ldr	r0, [r7, #12]
    5572:	4b58      	ldr	r3, [pc, #352]	; (56d4 <_oscctrl_init_referenced_generators+0x1e8>)
    5574:	4798      	blx	r3
    5576:	4603      	mov	r3, r0
    5578:	2b00      	cmp	r3, #0
    557a:	d1f9      	bne.n	5570 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    557c:	2319      	movs	r3, #25
    557e:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5580:	7afb      	ldrb	r3, [r7, #11]
    5582:	4619      	mov	r1, r3
    5584:	68f8      	ldr	r0, [r7, #12]
    5586:	4b4e      	ldr	r3, [pc, #312]	; (56c0 <_oscctrl_init_referenced_generators+0x1d4>)
    5588:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    558a:	bf00      	nop
    558c:	68f8      	ldr	r0, [r7, #12]
    558e:	4b4d      	ldr	r3, [pc, #308]	; (56c4 <_oscctrl_init_referenced_generators+0x1d8>)
    5590:	4798      	blx	r3
    5592:	4603      	mov	r3, r0
    5594:	2b00      	cmp	r3, #0
    5596:	d1f9      	bne.n	558c <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5598:	2245      	movs	r2, #69	; 0x45
    559a:	2101      	movs	r1, #1
    559c:	4841      	ldr	r0, [pc, #260]	; (56a4 <_oscctrl_init_referenced_generators+0x1b8>)
    559e:	4b4e      	ldr	r3, [pc, #312]	; (56d8 <_oscctrl_init_referenced_generators+0x1ec>)
    55a0:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    55a2:	223b      	movs	r2, #59	; 0x3b
    55a4:	2100      	movs	r1, #0
    55a6:	68f8      	ldr	r0, [r7, #12]
    55a8:	4b4c      	ldr	r3, [pc, #304]	; (56dc <_oscctrl_init_referenced_generators+0x1f0>)
    55aa:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    55ac:	f44f 6201 	mov.w	r2, #2064	; 0x810
    55b0:	2100      	movs	r1, #0
    55b2:	68f8      	ldr	r0, [r7, #12]
    55b4:	4b4a      	ldr	r3, [pc, #296]	; (56e0 <_oscctrl_init_referenced_generators+0x1f4>)
    55b6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    55b8:	2242      	movs	r2, #66	; 0x42
    55ba:	2100      	movs	r1, #0
    55bc:	68f8      	ldr	r0, [r7, #12]
    55be:	4b49      	ldr	r3, [pc, #292]	; (56e4 <_oscctrl_init_referenced_generators+0x1f8>)
    55c0:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    55c2:	4a49      	ldr	r2, [pc, #292]	; (56e8 <_oscctrl_init_referenced_generators+0x1fc>)
    55c4:	2101      	movs	r1, #1
    55c6:	68f8      	ldr	r0, [r7, #12]
    55c8:	4b44      	ldr	r3, [pc, #272]	; (56dc <_oscctrl_init_referenced_generators+0x1f0>)
    55ca:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    55cc:	f44f 6203 	mov.w	r2, #2096	; 0x830
    55d0:	2101      	movs	r1, #1
    55d2:	68f8      	ldr	r0, [r7, #12]
    55d4:	4b42      	ldr	r3, [pc, #264]	; (56e0 <_oscctrl_init_referenced_generators+0x1f4>)
    55d6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    55d8:	2202      	movs	r2, #2
    55da:	2101      	movs	r1, #1
    55dc:	68f8      	ldr	r0, [r7, #12]
    55de:	4b41      	ldr	r3, [pc, #260]	; (56e4 <_oscctrl_init_referenced_generators+0x1f8>)
    55e0:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    55e2:	68f8      	ldr	r0, [r7, #12]
    55e4:	4b41      	ldr	r3, [pc, #260]	; (56ec <_oscctrl_init_referenced_generators+0x200>)
    55e6:	4798      	blx	r3
    55e8:	4603      	mov	r3, r0
    55ea:	2b00      	cmp	r3, #0
    55ec:	d00c      	beq.n	5608 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    55ee:	f44f 6310 	mov.w	r3, #2304	; 0x900
    55f2:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    55f4:	bf00      	nop
    55f6:	6879      	ldr	r1, [r7, #4]
    55f8:	68f8      	ldr	r0, [r7, #12]
    55fa:	4b3d      	ldr	r3, [pc, #244]	; (56f0 <_oscctrl_init_referenced_generators+0x204>)
    55fc:	4798      	blx	r3
    55fe:	4602      	mov	r2, r0
    5600:	687b      	ldr	r3, [r7, #4]
    5602:	429a      	cmp	r2, r3
    5604:	d1f7      	bne.n	55f6 <_oscctrl_init_referenced_generators+0x10a>
    5606:	e009      	b.n	561c <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5608:	bf00      	nop
    560a:	68f8      	ldr	r0, [r7, #12]
    560c:	4b39      	ldr	r3, [pc, #228]	; (56f4 <_oscctrl_init_referenced_generators+0x208>)
    560e:	4798      	blx	r3
    5610:	4603      	mov	r3, r0
    5612:	f083 0301 	eor.w	r3, r3, #1
    5616:	b2db      	uxtb	r3, r3
    5618:	2b00      	cmp	r3, #0
    561a:	d1f6      	bne.n	560a <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    561c:	bf00      	nop
    561e:	2100      	movs	r1, #0
    5620:	68f8      	ldr	r0, [r7, #12]
    5622:	4b35      	ldr	r3, [pc, #212]	; (56f8 <_oscctrl_init_referenced_generators+0x20c>)
    5624:	4798      	blx	r3
    5626:	4603      	mov	r3, r0
    5628:	f083 0301 	eor.w	r3, r3, #1
    562c:	b2db      	uxtb	r3, r3
    562e:	2b00      	cmp	r3, #0
    5630:	d009      	beq.n	5646 <_oscctrl_init_referenced_generators+0x15a>
    5632:	2100      	movs	r1, #0
    5634:	68f8      	ldr	r0, [r7, #12]
    5636:	4b31      	ldr	r3, [pc, #196]	; (56fc <_oscctrl_init_referenced_generators+0x210>)
    5638:	4798      	blx	r3
    563a:	4603      	mov	r3, r0
    563c:	f083 0301 	eor.w	r3, r3, #1
    5640:	b2db      	uxtb	r3, r3
    5642:	2b00      	cmp	r3, #0
    5644:	d1eb      	bne.n	561e <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5646:	bf00      	nop
    5648:	2101      	movs	r1, #1
    564a:	68f8      	ldr	r0, [r7, #12]
    564c:	4b2a      	ldr	r3, [pc, #168]	; (56f8 <_oscctrl_init_referenced_generators+0x20c>)
    564e:	4798      	blx	r3
    5650:	4603      	mov	r3, r0
    5652:	f083 0301 	eor.w	r3, r3, #1
    5656:	b2db      	uxtb	r3, r3
    5658:	2b00      	cmp	r3, #0
    565a:	d009      	beq.n	5670 <_oscctrl_init_referenced_generators+0x184>
    565c:	2101      	movs	r1, #1
    565e:	68f8      	ldr	r0, [r7, #12]
    5660:	4b26      	ldr	r3, [pc, #152]	; (56fc <_oscctrl_init_referenced_generators+0x210>)
    5662:	4798      	blx	r3
    5664:	4603      	mov	r3, r0
    5666:	f083 0301 	eor.w	r3, r3, #1
    566a:	b2db      	uxtb	r3, r3
    566c:	2b00      	cmp	r3, #0
    566e:	d1eb      	bne.n	5648 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5670:	bf00      	nop
    5672:	480c      	ldr	r0, [pc, #48]	; (56a4 <_oscctrl_init_referenced_generators+0x1b8>)
    5674:	4b22      	ldr	r3, [pc, #136]	; (5700 <_oscctrl_init_referenced_generators+0x214>)
    5676:	4798      	blx	r3
    5678:	4603      	mov	r3, r0
    567a:	2b00      	cmp	r3, #0
    567c:	d1f9      	bne.n	5672 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    567e:	2207      	movs	r2, #7
    5680:	2100      	movs	r1, #0
    5682:	4808      	ldr	r0, [pc, #32]	; (56a4 <_oscctrl_init_referenced_generators+0x1b8>)
    5684:	4b08      	ldr	r3, [pc, #32]	; (56a8 <_oscctrl_init_referenced_generators+0x1bc>)
    5686:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5688:	bf00      	nop
    568a:	4806      	ldr	r0, [pc, #24]	; (56a4 <_oscctrl_init_referenced_generators+0x1b8>)
    568c:	4b07      	ldr	r3, [pc, #28]	; (56ac <_oscctrl_init_referenced_generators+0x1c0>)
    568e:	4798      	blx	r3
    5690:	4603      	mov	r3, r0
    5692:	2b00      	cmp	r3, #0
    5694:	d1f9      	bne.n	568a <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    5696:	bf00      	nop
    5698:	3710      	adds	r7, #16
    569a:	46bd      	mov	sp, r7
    569c:	bd80      	pop	{r7, pc}
    569e:	bf00      	nop
    56a0:	40001000 	.word	0x40001000
    56a4:	40001c00 	.word	0x40001c00
    56a8:	000050b9 	.word	0x000050b9
    56ac:	00005079 	.word	0x00005079
    56b0:	0000531d 	.word	0x0000531d
    56b4:	0401bb80 	.word	0x0401bb80
    56b8:	000053bf 	.word	0x000053bf
    56bc:	00005477 	.word	0x00005477
    56c0:	0000536b 	.word	0x0000536b
    56c4:	0000540f 	.word	0x0000540f
    56c8:	000053db 	.word	0x000053db
    56cc:	000053a7 	.word	0x000053a7
    56d0:	0000538b 	.word	0x0000538b
    56d4:	00005443 	.word	0x00005443
    56d8:	00005109 	.word	0x00005109
    56dc:	00005215 	.word	0x00005215
    56e0:	00005251 	.word	0x00005251
    56e4:	000051d9 	.word	0x000051d9
    56e8:	000407a0 	.word	0x000407a0
    56ec:	0000533b 	.word	0x0000533b
    56f0:	000052cf 	.word	0x000052cf
    56f4:	000052a7 	.word	0x000052a7
    56f8:	00005165 	.word	0x00005165
    56fc:	0000519d 	.word	0x0000519d
    5700:	000050a1 	.word	0x000050a1

00005704 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    5704:	b480      	push	{r7}
    5706:	b083      	sub	sp, #12
    5708:	af00      	add	r7, sp, #0
    570a:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    570c:	687b      	ldr	r3, [r7, #4]
    570e:	69db      	ldr	r3, [r3, #28]
    5710:	0a9b      	lsrs	r3, r3, #10
    5712:	f003 0301 	and.w	r3, r3, #1
    5716:	2b00      	cmp	r3, #0
    5718:	bf14      	ite	ne
    571a:	2301      	movne	r3, #1
    571c:	2300      	moveq	r3, #0
    571e:	b2db      	uxtb	r3, r3
}
    5720:	4618      	mov	r0, r3
    5722:	370c      	adds	r7, #12
    5724:	46bd      	mov	sp, r7
    5726:	f85d 7b04 	ldr.w	r7, [sp], #4
    572a:	4770      	bx	lr

0000572c <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    572c:	b480      	push	{r7}
    572e:	b083      	sub	sp, #12
    5730:	af00      	add	r7, sp, #0
    5732:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5734:	687b      	ldr	r3, [r7, #4]
    5736:	f44f 6280 	mov.w	r2, #1024	; 0x400
    573a:	61da      	str	r2, [r3, #28]
}
    573c:	bf00      	nop
    573e:	370c      	adds	r7, #12
    5740:	46bd      	mov	sp, r7
    5742:	f85d 7b04 	ldr.w	r7, [sp], #4
    5746:	4770      	bx	lr

00005748 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5748:	b480      	push	{r7}
    574a:	b083      	sub	sp, #12
    574c:	af00      	add	r7, sp, #0
    574e:	6078      	str	r0, [r7, #4]
    5750:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    5752:	687b      	ldr	r3, [r7, #4]
    5754:	683a      	ldr	r2, [r7, #0]
    5756:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5758:	bf00      	nop
    575a:	370c      	adds	r7, #12
    575c:	46bd      	mov	sp, r7
    575e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5762:	4770      	bx	lr

00005764 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5764:	b480      	push	{r7}
    5766:	b083      	sub	sp, #12
    5768:	af00      	add	r7, sp, #0
    576a:	6078      	str	r0, [r7, #4]
    576c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    576e:	687b      	ldr	r3, [r7, #4]
    5770:	683a      	ldr	r2, [r7, #0]
    5772:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5774:	bf00      	nop
    5776:	370c      	adds	r7, #12
    5778:	46bd      	mov	sp, r7
    577a:	f85d 7b04 	ldr.w	r7, [sp], #4
    577e:	4770      	bx	lr

00005780 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5780:	b480      	push	{r7}
    5782:	b083      	sub	sp, #12
    5784:	af00      	add	r7, sp, #0
    5786:	6078      	str	r0, [r7, #4]
    5788:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    578a:	687b      	ldr	r3, [r7, #4]
    578c:	683a      	ldr	r2, [r7, #0]
    578e:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5790:	bf00      	nop
    5792:	370c      	adds	r7, #12
    5794:	46bd      	mov	sp, r7
    5796:	f85d 7b04 	ldr.w	r7, [sp], #4
    579a:	4770      	bx	lr

0000579c <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    579c:	b480      	push	{r7}
    579e:	b083      	sub	sp, #12
    57a0:	af00      	add	r7, sp, #0
    57a2:	6078      	str	r0, [r7, #4]
    57a4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    57a6:	687b      	ldr	r3, [r7, #4]
    57a8:	683a      	ldr	r2, [r7, #0]
    57aa:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    57ac:	bf00      	nop
    57ae:	370c      	adds	r7, #12
    57b0:	46bd      	mov	sp, r7
    57b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    57b6:	4770      	bx	lr

000057b8 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    57b8:	b480      	push	{r7}
    57ba:	b085      	sub	sp, #20
    57bc:	af00      	add	r7, sp, #0
    57be:	6078      	str	r0, [r7, #4]
    57c0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    57c2:	687b      	ldr	r3, [r7, #4]
    57c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    57c6:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    57c8:	68fb      	ldr	r3, [r7, #12]
    57ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    57ce:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    57d0:	683b      	ldr	r3, [r7, #0]
    57d2:	b2db      	uxtb	r3, r3
    57d4:	68fa      	ldr	r2, [r7, #12]
    57d6:	4313      	orrs	r3, r2
    57d8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    57da:	687b      	ldr	r3, [r7, #4]
    57dc:	68fa      	ldr	r2, [r7, #12]
    57de:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    57e0:	bf00      	nop
    57e2:	3714      	adds	r7, #20
    57e4:	46bd      	mov	sp, r7
    57e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    57ea:	4770      	bx	lr

000057ec <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    57ec:	b480      	push	{r7}
    57ee:	b085      	sub	sp, #20
    57f0:	af00      	add	r7, sp, #0
    57f2:	6078      	str	r0, [r7, #4]
    57f4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    57f6:	687b      	ldr	r3, [r7, #4]
    57f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    57fa:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    57fc:	68fb      	ldr	r3, [r7, #12]
    57fe:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    5802:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    5804:	683b      	ldr	r3, [r7, #0]
    5806:	041b      	lsls	r3, r3, #16
    5808:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    580c:	68fa      	ldr	r2, [r7, #12]
    580e:	4313      	orrs	r3, r2
    5810:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5812:	687b      	ldr	r3, [r7, #4]
    5814:	68fa      	ldr	r2, [r7, #12]
    5816:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5818:	bf00      	nop
    581a:	3714      	adds	r7, #20
    581c:	46bd      	mov	sp, r7
    581e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5822:	4770      	bx	lr

00005824 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    5824:	b480      	push	{r7}
    5826:	b083      	sub	sp, #12
    5828:	af00      	add	r7, sp, #0
    582a:	6078      	str	r0, [r7, #4]
    582c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    582e:	687b      	ldr	r3, [r7, #4]
    5830:	683a      	ldr	r2, [r7, #0]
    5832:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5834:	bf00      	nop
    5836:	370c      	adds	r7, #12
    5838:	46bd      	mov	sp, r7
    583a:	f85d 7b04 	ldr.w	r7, [sp], #4
    583e:	4770      	bx	lr

00005840 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5840:	b480      	push	{r7}
    5842:	b083      	sub	sp, #12
    5844:	af00      	add	r7, sp, #0
    5846:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5848:	687b      	ldr	r3, [r7, #4]
    584a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    584c:	4618      	mov	r0, r3
    584e:	370c      	adds	r7, #12
    5850:	46bd      	mov	sp, r7
    5852:	f85d 7b04 	ldr.w	r7, [sp], #4
    5856:	4770      	bx	lr

00005858 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5858:	b480      	push	{r7}
    585a:	b085      	sub	sp, #20
    585c:	af00      	add	r7, sp, #0
    585e:	60f8      	str	r0, [r7, #12]
    5860:	60b9      	str	r1, [r7, #8]
    5862:	607a      	str	r2, [r7, #4]
	while (count--) {
    5864:	e007      	b.n	5876 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    5866:	68fb      	ldr	r3, [r7, #12]
    5868:	1c5a      	adds	r2, r3, #1
    586a:	60fa      	str	r2, [r7, #12]
    586c:	68ba      	ldr	r2, [r7, #8]
    586e:	1c51      	adds	r1, r2, #1
    5870:	60b9      	str	r1, [r7, #8]
    5872:	7812      	ldrb	r2, [r2, #0]
    5874:	701a      	strb	r2, [r3, #0]
	while (count--) {
    5876:	687b      	ldr	r3, [r7, #4]
    5878:	1e5a      	subs	r2, r3, #1
    587a:	607a      	str	r2, [r7, #4]
    587c:	2b00      	cmp	r3, #0
    587e:	d1f2      	bne.n	5866 <_qspi_memcpy+0xe>
	}
}
    5880:	bf00      	nop
    5882:	3714      	adds	r7, #20
    5884:	46bd      	mov	sp, r7
    5886:	f85d 7b04 	ldr.w	r7, [sp], #4
    588a:	4770      	bx	lr

0000588c <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    588c:	b580      	push	{r7, lr}
    588e:	b082      	sub	sp, #8
    5890:	af00      	add	r7, sp, #0
    5892:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5894:	4903      	ldr	r1, [pc, #12]	; (58a4 <_qspi_end_transfer+0x18>)
    5896:	6878      	ldr	r0, [r7, #4]
    5898:	4b03      	ldr	r3, [pc, #12]	; (58a8 <_qspi_end_transfer+0x1c>)
    589a:	4798      	blx	r3
}
    589c:	bf00      	nop
    589e:	3708      	adds	r7, #8
    58a0:	46bd      	mov	sp, r7
    58a2:	bd80      	pop	{r7, pc}
    58a4:	01000002 	.word	0x01000002
    58a8:	00005749 	.word	0x00005749

000058ac <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    58ac:	b580      	push	{r7, lr}
    58ae:	b082      	sub	sp, #8
    58b0:	af00      	add	r7, sp, #0
    58b2:	6078      	str	r0, [r7, #4]
    58b4:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    58b6:	687b      	ldr	r3, [r7, #4]
    58b8:	2b00      	cmp	r3, #0
    58ba:	d004      	beq.n	58c6 <_qspi_sync_init+0x1a>
    58bc:	683b      	ldr	r3, [r7, #0]
    58be:	2b00      	cmp	r3, #0
    58c0:	d001      	beq.n	58c6 <_qspi_sync_init+0x1a>
    58c2:	2301      	movs	r3, #1
    58c4:	e000      	b.n	58c8 <_qspi_sync_init+0x1c>
    58c6:	2300      	movs	r3, #0
    58c8:	f003 0301 	and.w	r3, r3, #1
    58cc:	b2db      	uxtb	r3, r3
    58ce:	2240      	movs	r2, #64	; 0x40
    58d0:	490c      	ldr	r1, [pc, #48]	; (5904 <_qspi_sync_init+0x58>)
    58d2:	4618      	mov	r0, r3
    58d4:	4b0c      	ldr	r3, [pc, #48]	; (5908 <_qspi_sync_init+0x5c>)
    58d6:	4798      	blx	r3
	dev->prvt = hw;
    58d8:	687b      	ldr	r3, [r7, #4]
    58da:	683a      	ldr	r2, [r7, #0]
    58dc:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    58de:	687b      	ldr	r3, [r7, #4]
    58e0:	681b      	ldr	r3, [r3, #0]
    58e2:	2101      	movs	r1, #1
    58e4:	4618      	mov	r0, r3
    58e6:	4b09      	ldr	r3, [pc, #36]	; (590c <_qspi_sync_init+0x60>)
    58e8:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    58ea:	4909      	ldr	r1, [pc, #36]	; (5910 <_qspi_sync_init+0x64>)
    58ec:	6838      	ldr	r0, [r7, #0]
    58ee:	4b09      	ldr	r3, [pc, #36]	; (5914 <_qspi_sync_init+0x68>)
    58f0:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    58f2:	4909      	ldr	r1, [pc, #36]	; (5918 <_qspi_sync_init+0x6c>)
    58f4:	6838      	ldr	r0, [r7, #0]
    58f6:	4b09      	ldr	r3, [pc, #36]	; (591c <_qspi_sync_init+0x70>)
    58f8:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    58fa:	2300      	movs	r3, #0
}
    58fc:	4618      	mov	r0, r3
    58fe:	3708      	adds	r7, #8
    5900:	46bd      	mov	sp, r7
    5902:	bd80      	pop	{r7, pc}
    5904:	0000f024 	.word	0x0000f024
    5908:	000038b5 	.word	0x000038b5
    590c:	00005749 	.word	0x00005749
    5910:	06000011 	.word	0x06000011
    5914:	00005765 	.word	0x00005765
    5918:	00241300 	.word	0x00241300
    591c:	00005781 	.word	0x00005781

00005920 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    5920:	b580      	push	{r7, lr}
    5922:	b082      	sub	sp, #8
    5924:	af00      	add	r7, sp, #0
    5926:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5928:	687b      	ldr	r3, [r7, #4]
    592a:	681b      	ldr	r3, [r3, #0]
    592c:	2102      	movs	r1, #2
    592e:	4618      	mov	r0, r3
    5930:	4b03      	ldr	r3, [pc, #12]	; (5940 <_qspi_sync_enable+0x20>)
    5932:	4798      	blx	r3
	return ERR_NONE;
    5934:	2300      	movs	r3, #0
}
    5936:	4618      	mov	r0, r3
    5938:	3708      	adds	r7, #8
    593a:	46bd      	mov	sp, r7
    593c:	bd80      	pop	{r7, pc}
    593e:	bf00      	nop
    5940:	00005749 	.word	0x00005749

00005944 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5944:	b580      	push	{r7, lr}
    5946:	b082      	sub	sp, #8
    5948:	af00      	add	r7, sp, #0
    594a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    594c:	687b      	ldr	r3, [r7, #4]
    594e:	681b      	ldr	r3, [r3, #0]
    5950:	2100      	movs	r1, #0
    5952:	4618      	mov	r0, r3
    5954:	4b03      	ldr	r3, [pc, #12]	; (5964 <_qspi_sync_disable+0x20>)
    5956:	4798      	blx	r3
	return ERR_NONE;
    5958:	2300      	movs	r3, #0
}
    595a:	4618      	mov	r0, r3
    595c:	3708      	adds	r7, #8
    595e:	46bd      	mov	sp, r7
    5960:	bd80      	pop	{r7, pc}
    5962:	bf00      	nop
    5964:	00005749 	.word	0x00005749

00005968 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5968:	b580      	push	{r7, lr}
    596a:	b084      	sub	sp, #16
    596c:	af00      	add	r7, sp, #0
    596e:	6078      	str	r0, [r7, #4]
    5970:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    5972:	687b      	ldr	r3, [r7, #4]
    5974:	681b      	ldr	r3, [r3, #0]
    5976:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5978:	683b      	ldr	r3, [r7, #0]
    597a:	781b      	ldrb	r3, [r3, #0]
    597c:	f003 0320 	and.w	r3, r3, #32
    5980:	b2db      	uxtb	r3, r3
    5982:	2b00      	cmp	r3, #0
    5984:	d005      	beq.n	5992 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    5986:	683b      	ldr	r3, [r7, #0]
    5988:	689b      	ldr	r3, [r3, #8]
    598a:	4619      	mov	r1, r3
    598c:	68f8      	ldr	r0, [r7, #12]
    598e:	4b13      	ldr	r3, [pc, #76]	; (59dc <_qspi_sync_command_set_ifr+0x74>)
    5990:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    5992:	683b      	ldr	r3, [r7, #0]
    5994:	781b      	ldrb	r3, [r3, #0]
    5996:	f003 0310 	and.w	r3, r3, #16
    599a:	b2db      	uxtb	r3, r3
    599c:	2b00      	cmp	r3, #0
    599e:	d005      	beq.n	59ac <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    59a0:	683b      	ldr	r3, [r7, #0]
    59a2:	791b      	ldrb	r3, [r3, #4]
    59a4:	4619      	mov	r1, r3
    59a6:	68f8      	ldr	r0, [r7, #12]
    59a8:	4b0d      	ldr	r3, [pc, #52]	; (59e0 <_qspi_sync_command_set_ifr+0x78>)
    59aa:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    59ac:	683b      	ldr	r3, [r7, #0]
    59ae:	781b      	ldrb	r3, [r3, #0]
    59b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    59b4:	b2db      	uxtb	r3, r3
    59b6:	2b00      	cmp	r3, #0
    59b8:	d005      	beq.n	59c6 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    59ba:	683b      	ldr	r3, [r7, #0]
    59bc:	795b      	ldrb	r3, [r3, #5]
    59be:	4619      	mov	r1, r3
    59c0:	68f8      	ldr	r0, [r7, #12]
    59c2:	4b08      	ldr	r3, [pc, #32]	; (59e4 <_qspi_sync_command_set_ifr+0x7c>)
    59c4:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    59c6:	683b      	ldr	r3, [r7, #0]
    59c8:	681b      	ldr	r3, [r3, #0]
    59ca:	4619      	mov	r1, r3
    59cc:	68f8      	ldr	r0, [r7, #12]
    59ce:	4b06      	ldr	r3, [pc, #24]	; (59e8 <_qspi_sync_command_set_ifr+0x80>)
    59d0:	4798      	blx	r3
}
    59d2:	bf00      	nop
    59d4:	3710      	adds	r7, #16
    59d6:	46bd      	mov	sp, r7
    59d8:	bd80      	pop	{r7, pc}
    59da:	bf00      	nop
    59dc:	0000579d 	.word	0x0000579d
    59e0:	000057b9 	.word	0x000057b9
    59e4:	000057ed 	.word	0x000057ed
    59e8:	00005825 	.word	0x00005825

000059ec <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    59ec:	b580      	push	{r7, lr}
    59ee:	b084      	sub	sp, #16
    59f0:	af00      	add	r7, sp, #0
    59f2:	6078      	str	r0, [r7, #4]
    59f4:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    59f6:	687b      	ldr	r3, [r7, #4]
    59f8:	681b      	ldr	r3, [r3, #0]
    59fa:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    59fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5a00:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    5a02:	683b      	ldr	r3, [r7, #0]
    5a04:	781b      	ldrb	r3, [r3, #0]
    5a06:	f003 0320 	and.w	r3, r3, #32
    5a0a:	b2db      	uxtb	r3, r3
    5a0c:	2b00      	cmp	r3, #0
    5a0e:	d004      	beq.n	5a1a <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5a10:	683b      	ldr	r3, [r7, #0]
    5a12:	689b      	ldr	r3, [r3, #8]
    5a14:	68fa      	ldr	r2, [r7, #12]
    5a16:	4413      	add	r3, r2
    5a18:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5a1a:	68b8      	ldr	r0, [r7, #8]
    5a1c:	4b18      	ldr	r3, [pc, #96]	; (5a80 <_qspi_sync_run_transfer+0x94>)
    5a1e:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5a20:	683b      	ldr	r3, [r7, #0]
    5a22:	691b      	ldr	r3, [r3, #16]
    5a24:	2b00      	cmp	r3, #0
    5a26:	d103      	bne.n	5a30 <_qspi_sync_run_transfer+0x44>
    5a28:	683b      	ldr	r3, [r7, #0]
    5a2a:	695b      	ldr	r3, [r3, #20]
    5a2c:	2b00      	cmp	r3, #0
    5a2e:	d001      	beq.n	5a34 <_qspi_sync_run_transfer+0x48>
    5a30:	2301      	movs	r3, #1
    5a32:	e000      	b.n	5a36 <_qspi_sync_run_transfer+0x4a>
    5a34:	2300      	movs	r3, #0
    5a36:	f003 0301 	and.w	r3, r3, #1
    5a3a:	b2db      	uxtb	r3, r3
    5a3c:	2282      	movs	r2, #130	; 0x82
    5a3e:	4911      	ldr	r1, [pc, #68]	; (5a84 <_qspi_sync_run_transfer+0x98>)
    5a40:	4618      	mov	r0, r3
    5a42:	4b11      	ldr	r3, [pc, #68]	; (5a88 <_qspi_sync_run_transfer+0x9c>)
    5a44:	4798      	blx	r3

	if (cmd->tx_buf) {
    5a46:	683b      	ldr	r3, [r7, #0]
    5a48:	691b      	ldr	r3, [r3, #16]
    5a4a:	2b00      	cmp	r3, #0
    5a4c:	d008      	beq.n	5a60 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5a4e:	683b      	ldr	r3, [r7, #0]
    5a50:	6919      	ldr	r1, [r3, #16]
    5a52:	683b      	ldr	r3, [r7, #0]
    5a54:	68db      	ldr	r3, [r3, #12]
    5a56:	461a      	mov	r2, r3
    5a58:	68f8      	ldr	r0, [r7, #12]
    5a5a:	4b0c      	ldr	r3, [pc, #48]	; (5a8c <_qspi_sync_run_transfer+0xa0>)
    5a5c:	4798      	blx	r3
    5a5e:	e007      	b.n	5a70 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5a60:	683b      	ldr	r3, [r7, #0]
    5a62:	6958      	ldr	r0, [r3, #20]
    5a64:	683b      	ldr	r3, [r7, #0]
    5a66:	68db      	ldr	r3, [r3, #12]
    5a68:	461a      	mov	r2, r3
    5a6a:	68f9      	ldr	r1, [r7, #12]
    5a6c:	4b07      	ldr	r3, [pc, #28]	; (5a8c <_qspi_sync_run_transfer+0xa0>)
    5a6e:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5a70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5a74:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5a78:	bf00      	nop
    5a7a:	3710      	adds	r7, #16
    5a7c:	46bd      	mov	sp, r7
    5a7e:	bd80      	pop	{r7, pc}
    5a80:	00005841 	.word	0x00005841
    5a84:	0000f024 	.word	0x0000f024
    5a88:	000038b5 	.word	0x000038b5
    5a8c:	00005859 	.word	0x00005859

00005a90 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5a90:	b580      	push	{r7, lr}
    5a92:	b082      	sub	sp, #8
    5a94:	af00      	add	r7, sp, #0
    5a96:	6078      	str	r0, [r7, #4]
    5a98:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5a9a:	6839      	ldr	r1, [r7, #0]
    5a9c:	6878      	ldr	r0, [r7, #4]
    5a9e:	4b14      	ldr	r3, [pc, #80]	; (5af0 <_qspi_sync_serial_run_command+0x60>)
    5aa0:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    5aa2:	683b      	ldr	r3, [r7, #0]
    5aa4:	781b      	ldrb	r3, [r3, #0]
    5aa6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5aaa:	b2db      	uxtb	r3, r3
    5aac:	2b00      	cmp	r3, #0
    5aae:	d003      	beq.n	5ab8 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5ab0:	6839      	ldr	r1, [r7, #0]
    5ab2:	6878      	ldr	r0, [r7, #4]
    5ab4:	4b0f      	ldr	r3, [pc, #60]	; (5af4 <_qspi_sync_serial_run_command+0x64>)
    5ab6:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5ab8:	687b      	ldr	r3, [r7, #4]
    5aba:	681b      	ldr	r3, [r3, #0]
    5abc:	4618      	mov	r0, r3
    5abe:	4b0e      	ldr	r3, [pc, #56]	; (5af8 <_qspi_sync_serial_run_command+0x68>)
    5ac0:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    5ac2:	bf00      	nop
    5ac4:	687b      	ldr	r3, [r7, #4]
    5ac6:	681b      	ldr	r3, [r3, #0]
    5ac8:	4618      	mov	r0, r3
    5aca:	4b0c      	ldr	r3, [pc, #48]	; (5afc <_qspi_sync_serial_run_command+0x6c>)
    5acc:	4798      	blx	r3
    5ace:	4603      	mov	r3, r0
    5ad0:	f083 0301 	eor.w	r3, r3, #1
    5ad4:	b2db      	uxtb	r3, r3
    5ad6:	2b00      	cmp	r3, #0
    5ad8:	d1f4      	bne.n	5ac4 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    5ada:	687b      	ldr	r3, [r7, #4]
    5adc:	681b      	ldr	r3, [r3, #0]
    5ade:	4618      	mov	r0, r3
    5ae0:	4b07      	ldr	r3, [pc, #28]	; (5b00 <_qspi_sync_serial_run_command+0x70>)
    5ae2:	4798      	blx	r3
	return ERR_NONE;
    5ae4:	2300      	movs	r3, #0
}
    5ae6:	4618      	mov	r0, r3
    5ae8:	3708      	adds	r7, #8
    5aea:	46bd      	mov	sp, r7
    5aec:	bd80      	pop	{r7, pc}
    5aee:	bf00      	nop
    5af0:	00005969 	.word	0x00005969
    5af4:	000059ed 	.word	0x000059ed
    5af8:	0000588d 	.word	0x0000588d
    5afc:	00005705 	.word	0x00005705
    5b00:	0000572d 	.word	0x0000572d

00005b04 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    5b04:	b480      	push	{r7}
    5b06:	b083      	sub	sp, #12
    5b08:	af00      	add	r7, sp, #0
    5b0a:	6078      	str	r0, [r7, #4]
    5b0c:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5b0e:	bf00      	nop
    5b10:	687b      	ldr	r3, [r7, #4]
    5b12:	691a      	ldr	r2, [r3, #16]
    5b14:	683b      	ldr	r3, [r7, #0]
    5b16:	4013      	ands	r3, r2
    5b18:	2b00      	cmp	r3, #0
    5b1a:	d1f9      	bne.n	5b10 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5b1c:	bf00      	nop
    5b1e:	370c      	adds	r7, #12
    5b20:	46bd      	mov	sp, r7
    5b22:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b26:	4770      	bx	lr

00005b28 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5b28:	b480      	push	{r7}
    5b2a:	b083      	sub	sp, #12
    5b2c:	af00      	add	r7, sp, #0
    5b2e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5b30:	687b      	ldr	r3, [r7, #4]
    5b32:	f44f 7280 	mov.w	r2, #256	; 0x100
    5b36:	819a      	strh	r2, [r3, #12]
}
    5b38:	bf00      	nop
    5b3a:	370c      	adds	r7, #12
    5b3c:	46bd      	mov	sp, r7
    5b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b42:	4770      	bx	lr

00005b44 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5b44:	b480      	push	{r7}
    5b46:	b083      	sub	sp, #12
    5b48:	af00      	add	r7, sp, #0
    5b4a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5b4c:	687b      	ldr	r3, [r7, #4]
    5b4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5b52:	819a      	strh	r2, [r3, #12]
}
    5b54:	bf00      	nop
    5b56:	370c      	adds	r7, #12
    5b58:	46bd      	mov	sp, r7
    5b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b5e:	4770      	bx	lr

00005b60 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5b60:	b480      	push	{r7}
    5b62:	b083      	sub	sp, #12
    5b64:	af00      	add	r7, sp, #0
    5b66:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5b68:	687b      	ldr	r3, [r7, #4]
    5b6a:	899b      	ldrh	r3, [r3, #12]
    5b6c:	b29b      	uxth	r3, r3
}
    5b6e:	4618      	mov	r0, r3
    5b70:	370c      	adds	r7, #12
    5b72:	46bd      	mov	sp, r7
    5b74:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b78:	4770      	bx	lr

00005b7a <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    5b7a:	b480      	push	{r7}
    5b7c:	b083      	sub	sp, #12
    5b7e:	af00      	add	r7, sp, #0
    5b80:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    5b82:	687b      	ldr	r3, [r7, #4]
    5b84:	895b      	ldrh	r3, [r3, #10]
    5b86:	b29b      	uxth	r3, r3
}
    5b88:	4618      	mov	r0, r3
    5b8a:	370c      	adds	r7, #12
    5b8c:	46bd      	mov	sp, r7
    5b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b92:	4770      	bx	lr

00005b94 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    5b94:	b580      	push	{r7, lr}
    5b96:	b082      	sub	sp, #8
    5b98:	af00      	add	r7, sp, #0
    5b9a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5b9c:	687b      	ldr	r3, [r7, #4]
    5b9e:	881b      	ldrh	r3, [r3, #0]
    5ba0:	b29b      	uxth	r3, r3
    5ba2:	f043 0301 	orr.w	r3, r3, #1
    5ba6:	b29a      	uxth	r2, r3
    5ba8:	687b      	ldr	r3, [r7, #4]
    5baa:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5bac:	2101      	movs	r1, #1
    5bae:	6878      	ldr	r0, [r7, #4]
    5bb0:	4b02      	ldr	r3, [pc, #8]	; (5bbc <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    5bb2:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5bb4:	bf00      	nop
    5bb6:	3708      	adds	r7, #8
    5bb8:	46bd      	mov	sp, r7
    5bba:	bd80      	pop	{r7, pc}
    5bbc:	00005b05 	.word	0x00005b05

00005bc0 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5bc0:	b580      	push	{r7, lr}
    5bc2:	b084      	sub	sp, #16
    5bc4:	af00      	add	r7, sp, #0
    5bc6:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5bc8:	f248 0103 	movw	r1, #32771	; 0x8003
    5bcc:	6878      	ldr	r0, [r7, #4]
    5bce:	4b0a      	ldr	r3, [pc, #40]	; (5bf8 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5bd0:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5bd2:	687b      	ldr	r3, [r7, #4]
    5bd4:	881b      	ldrh	r3, [r3, #0]
    5bd6:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5bd8:	89fb      	ldrh	r3, [r7, #14]
    5bda:	085b      	lsrs	r3, r3, #1
    5bdc:	b29b      	uxth	r3, r3
    5bde:	f003 0301 	and.w	r3, r3, #1
    5be2:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    5be4:	89fb      	ldrh	r3, [r7, #14]
    5be6:	2b00      	cmp	r3, #0
    5be8:	bf14      	ite	ne
    5bea:	2301      	movne	r3, #1
    5bec:	2300      	moveq	r3, #0
    5bee:	b2db      	uxtb	r3, r3
}
    5bf0:	4618      	mov	r0, r3
    5bf2:	3710      	adds	r7, #16
    5bf4:	46bd      	mov	sp, r7
    5bf6:	bd80      	pop	{r7, pc}
    5bf8:	00005b05 	.word	0x00005b05

00005bfc <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5bfc:	b580      	push	{r7, lr}
    5bfe:	b082      	sub	sp, #8
    5c00:	af00      	add	r7, sp, #0
    5c02:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5c04:	687b      	ldr	r3, [r7, #4]
    5c06:	881b      	ldrh	r3, [r3, #0]
    5c08:	b29b      	uxth	r3, r3
    5c0a:	f023 0302 	bic.w	r3, r3, #2
    5c0e:	b29a      	uxth	r2, r3
    5c10:	687b      	ldr	r3, [r7, #4]
    5c12:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5c14:	f248 0103 	movw	r1, #32771	; 0x8003
    5c18:	6878      	ldr	r0, [r7, #4]
    5c1a:	4b03      	ldr	r3, [pc, #12]	; (5c28 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5c1c:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5c1e:	bf00      	nop
    5c20:	3708      	adds	r7, #8
    5c22:	46bd      	mov	sp, r7
    5c24:	bd80      	pop	{r7, pc}
    5c26:	bf00      	nop
    5c28:	00005b05 	.word	0x00005b05

00005c2c <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5c2c:	b580      	push	{r7, lr}
    5c2e:	b082      	sub	sp, #8
    5c30:	af00      	add	r7, sp, #0
    5c32:	6078      	str	r0, [r7, #4]
    5c34:	460b      	mov	r3, r1
    5c36:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5c38:	687b      	ldr	r3, [r7, #4]
    5c3a:	887a      	ldrh	r2, [r7, #2]
    5c3c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5c3e:	f248 0103 	movw	r1, #32771	; 0x8003
    5c42:	6878      	ldr	r0, [r7, #4]
    5c44:	4b02      	ldr	r3, [pc, #8]	; (5c50 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5c46:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5c48:	bf00      	nop
    5c4a:	3708      	adds	r7, #8
    5c4c:	46bd      	mov	sp, r7
    5c4e:	bd80      	pop	{r7, pc}
    5c50:	00005b05 	.word	0x00005b05

00005c54 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5c54:	b480      	push	{r7}
    5c56:	b083      	sub	sp, #12
    5c58:	af00      	add	r7, sp, #0
    5c5a:	6078      	str	r0, [r7, #4]
    5c5c:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5c5e:	687b      	ldr	r3, [r7, #4]
    5c60:	683a      	ldr	r2, [r7, #0]
    5c62:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5c64:	bf00      	nop
    5c66:	370c      	adds	r7, #12
    5c68:	46bd      	mov	sp, r7
    5c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c6e:	4770      	bx	lr

00005c70 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5c70:	b580      	push	{r7, lr}
    5c72:	b082      	sub	sp, #8
    5c74:	af00      	add	r7, sp, #0
    5c76:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5c78:	687b      	ldr	r3, [r7, #4]
    5c7a:	2b00      	cmp	r3, #0
    5c7c:	d005      	beq.n	5c8a <_calendar_init+0x1a>
    5c7e:	687b      	ldr	r3, [r7, #4]
    5c80:	681b      	ldr	r3, [r3, #0]
    5c82:	2b00      	cmp	r3, #0
    5c84:	d001      	beq.n	5c8a <_calendar_init+0x1a>
    5c86:	2301      	movs	r3, #1
    5c88:	e000      	b.n	5c8c <_calendar_init+0x1c>
    5c8a:	2300      	movs	r3, #0
    5c8c:	f003 0301 	and.w	r3, r3, #1
    5c90:	b2db      	uxtb	r3, r3
    5c92:	222f      	movs	r2, #47	; 0x2f
    5c94:	491b      	ldr	r1, [pc, #108]	; (5d04 <_calendar_init+0x94>)
    5c96:	4618      	mov	r0, r3
    5c98:	4b1b      	ldr	r3, [pc, #108]	; (5d08 <_calendar_init+0x98>)
    5c9a:	4798      	blx	r3

	_rtc_dev = dev;
    5c9c:	4a1b      	ldr	r2, [pc, #108]	; (5d0c <_calendar_init+0x9c>)
    5c9e:	687b      	ldr	r3, [r7, #4]
    5ca0:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    5ca2:	687b      	ldr	r3, [r7, #4]
    5ca4:	681b      	ldr	r3, [r3, #0]
    5ca6:	4618      	mov	r0, r3
    5ca8:	4b19      	ldr	r3, [pc, #100]	; (5d10 <_calendar_init+0xa0>)
    5caa:	4798      	blx	r3
    5cac:	4603      	mov	r3, r0
    5cae:	2b00      	cmp	r3, #0
    5cb0:	d00a      	beq.n	5cc8 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5cb2:	687b      	ldr	r3, [r7, #4]
    5cb4:	681b      	ldr	r3, [r3, #0]
    5cb6:	4618      	mov	r0, r3
    5cb8:	4b16      	ldr	r3, [pc, #88]	; (5d14 <_calendar_init+0xa4>)
    5cba:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    5cbc:	687b      	ldr	r3, [r7, #4]
    5cbe:	681b      	ldr	r3, [r3, #0]
    5cc0:	2102      	movs	r1, #2
    5cc2:	4618      	mov	r0, r3
    5cc4:	4b14      	ldr	r3, [pc, #80]	; (5d18 <_calendar_init+0xa8>)
    5cc6:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5cc8:	687b      	ldr	r3, [r7, #4]
    5cca:	681b      	ldr	r3, [r3, #0]
    5ccc:	4618      	mov	r0, r3
    5cce:	4b13      	ldr	r3, [pc, #76]	; (5d1c <_calendar_init+0xac>)
    5cd0:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5cd2:	687b      	ldr	r3, [r7, #4]
    5cd4:	681b      	ldr	r3, [r3, #0]
    5cd6:	2101      	movs	r1, #1
    5cd8:	4618      	mov	r0, r3
    5cda:	4b0f      	ldr	r3, [pc, #60]	; (5d18 <_calendar_init+0xa8>)
    5cdc:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    5cde:	687b      	ldr	r3, [r7, #4]
    5ce0:	681b      	ldr	r3, [r3, #0]
    5ce2:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    5ce6:	4618      	mov	r0, r3
    5ce8:	4b0d      	ldr	r3, [pc, #52]	; (5d20 <_calendar_init+0xb0>)
    5cea:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    5cec:	687b      	ldr	r3, [r7, #4]
    5cee:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5cf0:	2100      	movs	r1, #0
    5cf2:	4618      	mov	r0, r3
    5cf4:	4b0b      	ldr	r3, [pc, #44]	; (5d24 <_calendar_init+0xb4>)
    5cf6:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5cf8:	2300      	movs	r3, #0
}
    5cfa:	4618      	mov	r0, r3
    5cfc:	3708      	adds	r7, #8
    5cfe:	46bd      	mov	sp, r7
    5d00:	bd80      	pop	{r7, pc}
    5d02:	bf00      	nop
    5d04:	0000f03c 	.word	0x0000f03c
    5d08:	000038b5 	.word	0x000038b5
    5d0c:	20000b20 	.word	0x20000b20
    5d10:	00005bc1 	.word	0x00005bc1
    5d14:	00005bfd 	.word	0x00005bfd
    5d18:	00005b05 	.word	0x00005b05
    5d1c:	00005b95 	.word	0x00005b95
    5d20:	00005c2d 	.word	0x00005c2d
    5d24:	00005c55 	.word	0x00005c55

00005d28 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5d28:	b580      	push	{r7, lr}
    5d2a:	b084      	sub	sp, #16
    5d2c:	af00      	add	r7, sp, #0
    5d2e:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5d30:	687b      	ldr	r3, [r7, #4]
    5d32:	681b      	ldr	r3, [r3, #0]
    5d34:	4618      	mov	r0, r3
    5d36:	4b19      	ldr	r3, [pc, #100]	; (5d9c <_rtc_interrupt_handler+0x74>)
    5d38:	4798      	blx	r3
    5d3a:	4603      	mov	r3, r0
    5d3c:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5d3e:	687b      	ldr	r3, [r7, #4]
    5d40:	681b      	ldr	r3, [r3, #0]
    5d42:	4618      	mov	r0, r3
    5d44:	4b16      	ldr	r3, [pc, #88]	; (5da0 <_rtc_interrupt_handler+0x78>)
    5d46:	4798      	blx	r3
    5d48:	4603      	mov	r3, r0
    5d4a:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5d4c:	89fa      	ldrh	r2, [r7, #14]
    5d4e:	89bb      	ldrh	r3, [r7, #12]
    5d50:	4013      	ands	r3, r2
    5d52:	b29b      	uxth	r3, r3
    5d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5d58:	2b00      	cmp	r3, #0
    5d5a:	d009      	beq.n	5d70 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5d5c:	687b      	ldr	r3, [r7, #4]
    5d5e:	685b      	ldr	r3, [r3, #4]
    5d60:	6878      	ldr	r0, [r7, #4]
    5d62:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    5d64:	687b      	ldr	r3, [r7, #4]
    5d66:	681b      	ldr	r3, [r3, #0]
    5d68:	4618      	mov	r0, r3
    5d6a:	4b0e      	ldr	r3, [pc, #56]	; (5da4 <_rtc_interrupt_handler+0x7c>)
    5d6c:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    5d6e:	e010      	b.n	5d92 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5d70:	89fa      	ldrh	r2, [r7, #14]
    5d72:	89bb      	ldrh	r3, [r7, #12]
    5d74:	4013      	ands	r3, r2
    5d76:	b29b      	uxth	r3, r3
    5d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5d7c:	2b00      	cmp	r3, #0
    5d7e:	d008      	beq.n	5d92 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5d80:	687b      	ldr	r3, [r7, #4]
    5d82:	689b      	ldr	r3, [r3, #8]
    5d84:	6878      	ldr	r0, [r7, #4]
    5d86:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5d88:	687b      	ldr	r3, [r7, #4]
    5d8a:	681b      	ldr	r3, [r3, #0]
    5d8c:	4618      	mov	r0, r3
    5d8e:	4b06      	ldr	r3, [pc, #24]	; (5da8 <_rtc_interrupt_handler+0x80>)
    5d90:	4798      	blx	r3
}
    5d92:	bf00      	nop
    5d94:	3710      	adds	r7, #16
    5d96:	46bd      	mov	sp, r7
    5d98:	bd80      	pop	{r7, pc}
    5d9a:	bf00      	nop
    5d9c:	00005b61 	.word	0x00005b61
    5da0:	00005b7b 	.word	0x00005b7b
    5da4:	00005b29 	.word	0x00005b29
    5da8:	00005b45 	.word	0x00005b45

00005dac <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5dac:	b580      	push	{r7, lr}
    5dae:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5db0:	4b03      	ldr	r3, [pc, #12]	; (5dc0 <RTC_Handler+0x14>)
    5db2:	681b      	ldr	r3, [r3, #0]
    5db4:	4618      	mov	r0, r3
    5db6:	4b03      	ldr	r3, [pc, #12]	; (5dc4 <RTC_Handler+0x18>)
    5db8:	4798      	blx	r3
}
    5dba:	bf00      	nop
    5dbc:	bd80      	pop	{r7, pc}
    5dbe:	bf00      	nop
    5dc0:	20000b20 	.word	0x20000b20
    5dc4:	00005d29 	.word	0x00005d29

00005dc8 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5dc8:	b480      	push	{r7}
    5dca:	b083      	sub	sp, #12
    5dcc:	af00      	add	r7, sp, #0
    5dce:	6078      	str	r0, [r7, #4]
    5dd0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5dd2:	bf00      	nop
    5dd4:	687b      	ldr	r3, [r7, #4]
    5dd6:	69da      	ldr	r2, [r3, #28]
    5dd8:	683b      	ldr	r3, [r7, #0]
    5dda:	4013      	ands	r3, r2
    5ddc:	2b00      	cmp	r3, #0
    5dde:	d1f9      	bne.n	5dd4 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5de0:	bf00      	nop
    5de2:	370c      	adds	r7, #12
    5de4:	46bd      	mov	sp, r7
    5de6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dea:	4770      	bx	lr

00005dec <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5dec:	b480      	push	{r7}
    5dee:	b083      	sub	sp, #12
    5df0:	af00      	add	r7, sp, #0
    5df2:	6078      	str	r0, [r7, #4]
    5df4:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    5df6:	687b      	ldr	r3, [r7, #4]
    5df8:	69da      	ldr	r2, [r3, #28]
    5dfa:	683b      	ldr	r3, [r7, #0]
    5dfc:	4013      	ands	r3, r2
    5dfe:	2b00      	cmp	r3, #0
    5e00:	bf14      	ite	ne
    5e02:	2301      	movne	r3, #1
    5e04:	2300      	moveq	r3, #0
    5e06:	b2db      	uxtb	r3, r3
}
    5e08:	4618      	mov	r0, r3
    5e0a:	370c      	adds	r7, #12
    5e0c:	46bd      	mov	sp, r7
    5e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e12:	4770      	bx	lr

00005e14 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5e14:	b480      	push	{r7}
    5e16:	b083      	sub	sp, #12
    5e18:	af00      	add	r7, sp, #0
    5e1a:	6078      	str	r0, [r7, #4]
    5e1c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5e1e:	bf00      	nop
    5e20:	687b      	ldr	r3, [r7, #4]
    5e22:	69da      	ldr	r2, [r3, #28]
    5e24:	683b      	ldr	r3, [r7, #0]
    5e26:	4013      	ands	r3, r2
    5e28:	2b00      	cmp	r3, #0
    5e2a:	d1f9      	bne.n	5e20 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5e2c:	bf00      	nop
    5e2e:	370c      	adds	r7, #12
    5e30:	46bd      	mov	sp, r7
    5e32:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e36:	4770      	bx	lr

00005e38 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5e38:	b480      	push	{r7}
    5e3a:	b083      	sub	sp, #12
    5e3c:	af00      	add	r7, sp, #0
    5e3e:	6078      	str	r0, [r7, #4]
    5e40:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5e42:	687b      	ldr	r3, [r7, #4]
    5e44:	69da      	ldr	r2, [r3, #28]
    5e46:	683b      	ldr	r3, [r7, #0]
    5e48:	4013      	ands	r3, r2
    5e4a:	2b00      	cmp	r3, #0
    5e4c:	bf14      	ite	ne
    5e4e:	2301      	movne	r3, #1
    5e50:	2300      	moveq	r3, #0
    5e52:	b2db      	uxtb	r3, r3
}
    5e54:	4618      	mov	r0, r3
    5e56:	370c      	adds	r7, #12
    5e58:	46bd      	mov	sp, r7
    5e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e5e:	4770      	bx	lr

00005e60 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5e60:	b480      	push	{r7}
    5e62:	b083      	sub	sp, #12
    5e64:	af00      	add	r7, sp, #0
    5e66:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5e68:	687b      	ldr	r3, [r7, #4]
    5e6a:	2201      	movs	r2, #1
    5e6c:	761a      	strb	r2, [r3, #24]
}
    5e6e:	bf00      	nop
    5e70:	370c      	adds	r7, #12
    5e72:	46bd      	mov	sp, r7
    5e74:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e78:	4770      	bx	lr

00005e7a <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5e7a:	b480      	push	{r7}
    5e7c:	b083      	sub	sp, #12
    5e7e:	af00      	add	r7, sp, #0
    5e80:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5e82:	687b      	ldr	r3, [r7, #4]
    5e84:	2202      	movs	r2, #2
    5e86:	761a      	strb	r2, [r3, #24]
}
    5e88:	bf00      	nop
    5e8a:	370c      	adds	r7, #12
    5e8c:	46bd      	mov	sp, r7
    5e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e92:	4770      	bx	lr

00005e94 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5e94:	b480      	push	{r7}
    5e96:	b083      	sub	sp, #12
    5e98:	af00      	add	r7, sp, #0
    5e9a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5e9c:	687b      	ldr	r3, [r7, #4]
    5e9e:	7e1b      	ldrb	r3, [r3, #24]
    5ea0:	b2db      	uxtb	r3, r3
}
    5ea2:	4618      	mov	r0, r3
    5ea4:	370c      	adds	r7, #12
    5ea6:	46bd      	mov	sp, r7
    5ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eac:	4770      	bx	lr

00005eae <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    5eae:	b480      	push	{r7}
    5eb0:	b085      	sub	sp, #20
    5eb2:	af00      	add	r7, sp, #0
    5eb4:	6078      	str	r0, [r7, #4]
    5eb6:	460b      	mov	r3, r1
    5eb8:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    5eba:	687b      	ldr	r3, [r7, #4]
    5ebc:	7e1b      	ldrb	r3, [r3, #24]
    5ebe:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5ec0:	7bfa      	ldrb	r2, [r7, #15]
    5ec2:	78fb      	ldrb	r3, [r7, #3]
    5ec4:	4013      	ands	r3, r2
    5ec6:	73fb      	strb	r3, [r7, #15]
	return tmp;
    5ec8:	7bfb      	ldrb	r3, [r7, #15]
}
    5eca:	4618      	mov	r0, r3
    5ecc:	3714      	adds	r7, #20
    5ece:	46bd      	mov	sp, r7
    5ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ed4:	4770      	bx	lr

00005ed6 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    5ed6:	b480      	push	{r7}
    5ed8:	b083      	sub	sp, #12
    5eda:	af00      	add	r7, sp, #0
    5edc:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    5ede:	687b      	ldr	r3, [r7, #4]
    5ee0:	7e1b      	ldrb	r3, [r3, #24]
    5ee2:	b2db      	uxtb	r3, r3
}
    5ee4:	4618      	mov	r0, r3
    5ee6:	370c      	adds	r7, #12
    5ee8:	46bd      	mov	sp, r7
    5eea:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eee:	4770      	bx	lr

00005ef0 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    5ef0:	b480      	push	{r7}
    5ef2:	b083      	sub	sp, #12
    5ef4:	af00      	add	r7, sp, #0
    5ef6:	6078      	str	r0, [r7, #4]
    5ef8:	460b      	mov	r3, r1
    5efa:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    5efc:	687b      	ldr	r3, [r7, #4]
    5efe:	78fa      	ldrb	r2, [r7, #3]
    5f00:	761a      	strb	r2, [r3, #24]
}
    5f02:	bf00      	nop
    5f04:	370c      	adds	r7, #12
    5f06:	46bd      	mov	sp, r7
    5f08:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f0c:	4770      	bx	lr
	...

00005f10 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5f10:	b580      	push	{r7, lr}
    5f12:	b082      	sub	sp, #8
    5f14:	af00      	add	r7, sp, #0
    5f16:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    5f18:	687b      	ldr	r3, [r7, #4]
    5f1a:	681b      	ldr	r3, [r3, #0]
    5f1c:	f043 0202 	orr.w	r2, r3, #2
    5f20:	687b      	ldr	r3, [r7, #4]
    5f22:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5f24:	2103      	movs	r1, #3
    5f26:	6878      	ldr	r0, [r7, #4]
    5f28:	4b02      	ldr	r3, [pc, #8]	; (5f34 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    5f2a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f2c:	bf00      	nop
    5f2e:	3708      	adds	r7, #8
    5f30:	46bd      	mov	sp, r7
    5f32:	bd80      	pop	{r7, pc}
    5f34:	00005dc9 	.word	0x00005dc9

00005f38 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5f38:	b580      	push	{r7, lr}
    5f3a:	b082      	sub	sp, #8
    5f3c:	af00      	add	r7, sp, #0
    5f3e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5f40:	687b      	ldr	r3, [r7, #4]
    5f42:	681b      	ldr	r3, [r3, #0]
    5f44:	f023 0202 	bic.w	r2, r3, #2
    5f48:	687b      	ldr	r3, [r7, #4]
    5f4a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5f4c:	2103      	movs	r1, #3
    5f4e:	6878      	ldr	r0, [r7, #4]
    5f50:	4b02      	ldr	r3, [pc, #8]	; (5f5c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5f52:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f54:	bf00      	nop
    5f56:	3708      	adds	r7, #8
    5f58:	46bd      	mov	sp, r7
    5f5a:	bd80      	pop	{r7, pc}
    5f5c:	00005dc9 	.word	0x00005dc9

00005f60 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5f60:	b480      	push	{r7}
    5f62:	b085      	sub	sp, #20
    5f64:	af00      	add	r7, sp, #0
    5f66:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5f68:	687b      	ldr	r3, [r7, #4]
    5f6a:	681b      	ldr	r3, [r3, #0]
    5f6c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    5f6e:	68fb      	ldr	r3, [r7, #12]
    5f70:	0edb      	lsrs	r3, r3, #27
    5f72:	f003 0301 	and.w	r3, r3, #1
    5f76:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5f78:	68fb      	ldr	r3, [r7, #12]
    5f7a:	2b00      	cmp	r3, #0
    5f7c:	bf14      	ite	ne
    5f7e:	2301      	movne	r3, #1
    5f80:	2300      	moveq	r3, #0
    5f82:	b2db      	uxtb	r3, r3
}
    5f84:	4618      	mov	r0, r3
    5f86:	3714      	adds	r7, #20
    5f88:	46bd      	mov	sp, r7
    5f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f8e:	4770      	bx	lr

00005f90 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5f90:	b580      	push	{r7, lr}
    5f92:	b084      	sub	sp, #16
    5f94:	af00      	add	r7, sp, #0
    5f96:	6078      	str	r0, [r7, #4]
    5f98:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5f9a:	2103      	movs	r1, #3
    5f9c:	6878      	ldr	r0, [r7, #4]
    5f9e:	4b07      	ldr	r3, [pc, #28]	; (5fbc <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5fa0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5fa2:	687b      	ldr	r3, [r7, #4]
    5fa4:	681b      	ldr	r3, [r3, #0]
    5fa6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5fa8:	68fa      	ldr	r2, [r7, #12]
    5faa:	683b      	ldr	r3, [r7, #0]
    5fac:	4013      	ands	r3, r2
    5fae:	60fb      	str	r3, [r7, #12]
	return tmp;
    5fb0:	68fb      	ldr	r3, [r7, #12]
}
    5fb2:	4618      	mov	r0, r3
    5fb4:	3710      	adds	r7, #16
    5fb6:	46bd      	mov	sp, r7
    5fb8:	bd80      	pop	{r7, pc}
    5fba:	bf00      	nop
    5fbc:	00005dc9 	.word	0x00005dc9

00005fc0 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    5fc0:	b580      	push	{r7, lr}
    5fc2:	b082      	sub	sp, #8
    5fc4:	af00      	add	r7, sp, #0
    5fc6:	6078      	str	r0, [r7, #4]
    5fc8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    5fca:	687b      	ldr	r3, [r7, #4]
    5fcc:	683a      	ldr	r2, [r7, #0]
    5fce:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5fd0:	2103      	movs	r1, #3
    5fd2:	6878      	ldr	r0, [r7, #4]
    5fd4:	4b02      	ldr	r3, [pc, #8]	; (5fe0 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    5fd6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5fd8:	bf00      	nop
    5fda:	3708      	adds	r7, #8
    5fdc:	46bd      	mov	sp, r7
    5fde:	bd80      	pop	{r7, pc}
    5fe0:	00005dc9 	.word	0x00005dc9

00005fe4 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5fe4:	b580      	push	{r7, lr}
    5fe6:	b084      	sub	sp, #16
    5fe8:	af00      	add	r7, sp, #0
    5fea:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5fec:	2103      	movs	r1, #3
    5fee:	6878      	ldr	r0, [r7, #4]
    5ff0:	4b09      	ldr	r3, [pc, #36]	; (6018 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    5ff2:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5ff4:	687b      	ldr	r3, [r7, #4]
    5ff6:	681b      	ldr	r3, [r3, #0]
    5ff8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    5ffa:	68fb      	ldr	r3, [r7, #12]
    5ffc:	085b      	lsrs	r3, r3, #1
    5ffe:	f003 0301 	and.w	r3, r3, #1
    6002:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6004:	68fb      	ldr	r3, [r7, #12]
    6006:	2b00      	cmp	r3, #0
    6008:	bf14      	ite	ne
    600a:	2301      	movne	r3, #1
    600c:	2300      	moveq	r3, #0
    600e:	b2db      	uxtb	r3, r3
}
    6010:	4618      	mov	r0, r3
    6012:	3710      	adds	r7, #16
    6014:	46bd      	mov	sp, r7
    6016:	bd80      	pop	{r7, pc}
    6018:	00005e15 	.word	0x00005e15

0000601c <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    601c:	b580      	push	{r7, lr}
    601e:	b082      	sub	sp, #8
    6020:	af00      	add	r7, sp, #0
    6022:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6024:	687b      	ldr	r3, [r7, #4]
    6026:	681b      	ldr	r3, [r3, #0]
    6028:	f023 0202 	bic.w	r2, r3, #2
    602c:	687b      	ldr	r3, [r7, #4]
    602e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6030:	2103      	movs	r1, #3
    6032:	6878      	ldr	r0, [r7, #4]
    6034:	4b02      	ldr	r3, [pc, #8]	; (6040 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    6036:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6038:	bf00      	nop
    603a:	3708      	adds	r7, #8
    603c:	46bd      	mov	sp, r7
    603e:	bd80      	pop	{r7, pc}
    6040:	00005e15 	.word	0x00005e15

00006044 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    6044:	b580      	push	{r7, lr}
    6046:	b084      	sub	sp, #16
    6048:	af00      	add	r7, sp, #0
    604a:	6078      	str	r0, [r7, #4]
    604c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    604e:	2103      	movs	r1, #3
    6050:	6878      	ldr	r0, [r7, #4]
    6052:	4b07      	ldr	r3, [pc, #28]	; (6070 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    6054:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6056:	687b      	ldr	r3, [r7, #4]
    6058:	681b      	ldr	r3, [r3, #0]
    605a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    605c:	68fa      	ldr	r2, [r7, #12]
    605e:	683b      	ldr	r3, [r7, #0]
    6060:	4013      	ands	r3, r2
    6062:	60fb      	str	r3, [r7, #12]
	return tmp;
    6064:	68fb      	ldr	r3, [r7, #12]
}
    6066:	4618      	mov	r0, r3
    6068:	3710      	adds	r7, #16
    606a:	46bd      	mov	sp, r7
    606c:	bd80      	pop	{r7, pc}
    606e:	bf00      	nop
    6070:	00005e15 	.word	0x00005e15

00006074 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    6074:	b580      	push	{r7, lr}
    6076:	b082      	sub	sp, #8
    6078:	af00      	add	r7, sp, #0
    607a:	6078      	str	r0, [r7, #4]
    607c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    607e:	687b      	ldr	r3, [r7, #4]
    6080:	683a      	ldr	r2, [r7, #0]
    6082:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6084:	2103      	movs	r1, #3
    6086:	6878      	ldr	r0, [r7, #4]
    6088:	4b02      	ldr	r3, [pc, #8]	; (6094 <hri_sercomspi_write_CTRLA_reg+0x20>)
    608a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    608c:	bf00      	nop
    608e:	3708      	adds	r7, #8
    6090:	46bd      	mov	sp, r7
    6092:	bd80      	pop	{r7, pc}
    6094:	00005e15 	.word	0x00005e15

00006098 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    6098:	b580      	push	{r7, lr}
    609a:	b082      	sub	sp, #8
    609c:	af00      	add	r7, sp, #0
    609e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    60a0:	687b      	ldr	r3, [r7, #4]
    60a2:	685b      	ldr	r3, [r3, #4]
    60a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    60a8:	687b      	ldr	r3, [r7, #4]
    60aa:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    60ac:	2104      	movs	r1, #4
    60ae:	6878      	ldr	r0, [r7, #4]
    60b0:	4b02      	ldr	r3, [pc, #8]	; (60bc <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    60b2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    60b4:	bf00      	nop
    60b6:	3708      	adds	r7, #8
    60b8:	46bd      	mov	sp, r7
    60ba:	bd80      	pop	{r7, pc}
    60bc:	00005dc9 	.word	0x00005dc9

000060c0 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    60c0:	b580      	push	{r7, lr}
    60c2:	b082      	sub	sp, #8
    60c4:	af00      	add	r7, sp, #0
    60c6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    60c8:	687b      	ldr	r3, [r7, #4]
    60ca:	685b      	ldr	r3, [r3, #4]
    60cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    60d0:	687b      	ldr	r3, [r7, #4]
    60d2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    60d4:	2104      	movs	r1, #4
    60d6:	6878      	ldr	r0, [r7, #4]
    60d8:	4b02      	ldr	r3, [pc, #8]	; (60e4 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    60da:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    60dc:	bf00      	nop
    60de:	3708      	adds	r7, #8
    60e0:	46bd      	mov	sp, r7
    60e2:	bd80      	pop	{r7, pc}
    60e4:	00005dc9 	.word	0x00005dc9

000060e8 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    60e8:	b580      	push	{r7, lr}
    60ea:	b082      	sub	sp, #8
    60ec:	af00      	add	r7, sp, #0
    60ee:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    60f0:	687b      	ldr	r3, [r7, #4]
    60f2:	685b      	ldr	r3, [r3, #4]
    60f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    60f8:	687b      	ldr	r3, [r7, #4]
    60fa:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    60fc:	2104      	movs	r1, #4
    60fe:	6878      	ldr	r0, [r7, #4]
    6100:	4b02      	ldr	r3, [pc, #8]	; (610c <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    6102:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6104:	bf00      	nop
    6106:	3708      	adds	r7, #8
    6108:	46bd      	mov	sp, r7
    610a:	bd80      	pop	{r7, pc}
    610c:	00005dc9 	.word	0x00005dc9

00006110 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    6110:	b580      	push	{r7, lr}
    6112:	b082      	sub	sp, #8
    6114:	af00      	add	r7, sp, #0
    6116:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6118:	687b      	ldr	r3, [r7, #4]
    611a:	685b      	ldr	r3, [r3, #4]
    611c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    6120:	687b      	ldr	r3, [r7, #4]
    6122:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6124:	2104      	movs	r1, #4
    6126:	6878      	ldr	r0, [r7, #4]
    6128:	4b02      	ldr	r3, [pc, #8]	; (6134 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    612a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    612c:	bf00      	nop
    612e:	3708      	adds	r7, #8
    6130:	46bd      	mov	sp, r7
    6132:	bd80      	pop	{r7, pc}
    6134:	00005dc9 	.word	0x00005dc9

00006138 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    6138:	b580      	push	{r7, lr}
    613a:	b082      	sub	sp, #8
    613c:	af00      	add	r7, sp, #0
    613e:	6078      	str	r0, [r7, #4]
    6140:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6142:	687b      	ldr	r3, [r7, #4]
    6144:	685a      	ldr	r2, [r3, #4]
    6146:	683b      	ldr	r3, [r7, #0]
    6148:	041b      	lsls	r3, r3, #16
    614a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    614e:	431a      	orrs	r2, r3
    6150:	687b      	ldr	r3, [r7, #4]
    6152:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6154:	2104      	movs	r1, #4
    6156:	6878      	ldr	r0, [r7, #4]
    6158:	4b02      	ldr	r3, [pc, #8]	; (6164 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    615a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    615c:	bf00      	nop
    615e:	3708      	adds	r7, #8
    6160:	46bd      	mov	sp, r7
    6162:	bd80      	pop	{r7, pc}
    6164:	00005dc9 	.word	0x00005dc9

00006168 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    6168:	b580      	push	{r7, lr}
    616a:	b082      	sub	sp, #8
    616c:	af00      	add	r7, sp, #0
    616e:	6078      	str	r0, [r7, #4]
    6170:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    6172:	687b      	ldr	r3, [r7, #4]
    6174:	683a      	ldr	r2, [r7, #0]
    6176:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6178:	2104      	movs	r1, #4
    617a:	6878      	ldr	r0, [r7, #4]
    617c:	4b02      	ldr	r3, [pc, #8]	; (6188 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    617e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6180:	bf00      	nop
    6182:	3708      	adds	r7, #8
    6184:	46bd      	mov	sp, r7
    6186:	bd80      	pop	{r7, pc}
    6188:	00005dc9 	.word	0x00005dc9

0000618c <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    618c:	b580      	push	{r7, lr}
    618e:	b082      	sub	sp, #8
    6190:	af00      	add	r7, sp, #0
    6192:	6078      	str	r0, [r7, #4]
    6194:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    6196:	687b      	ldr	r3, [r7, #4]
    6198:	683a      	ldr	r2, [r7, #0]
    619a:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    619c:	2117      	movs	r1, #23
    619e:	6878      	ldr	r0, [r7, #4]
    61a0:	4b02      	ldr	r3, [pc, #8]	; (61ac <hri_sercomspi_write_CTRLB_reg+0x20>)
    61a2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61a4:	bf00      	nop
    61a6:	3708      	adds	r7, #8
    61a8:	46bd      	mov	sp, r7
    61aa:	bd80      	pop	{r7, pc}
    61ac:	00005e15 	.word	0x00005e15

000061b0 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    61b0:	b480      	push	{r7}
    61b2:	b083      	sub	sp, #12
    61b4:	af00      	add	r7, sp, #0
    61b6:	6078      	str	r0, [r7, #4]
    61b8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    61ba:	687b      	ldr	r3, [r7, #4]
    61bc:	683a      	ldr	r2, [r7, #0]
    61be:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61c0:	bf00      	nop
    61c2:	370c      	adds	r7, #12
    61c4:	46bd      	mov	sp, r7
    61c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    61ca:	4770      	bx	lr

000061cc <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    61cc:	b480      	push	{r7}
    61ce:	b083      	sub	sp, #12
    61d0:	af00      	add	r7, sp, #0
    61d2:	6078      	str	r0, [r7, #4]
    61d4:	460b      	mov	r3, r1
    61d6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    61d8:	687b      	ldr	r3, [r7, #4]
    61da:	78fa      	ldrb	r2, [r7, #3]
    61dc:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61de:	bf00      	nop
    61e0:	370c      	adds	r7, #12
    61e2:	46bd      	mov	sp, r7
    61e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    61e8:	4770      	bx	lr
	...

000061ec <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    61ec:	b580      	push	{r7, lr}
    61ee:	b084      	sub	sp, #16
    61f0:	af00      	add	r7, sp, #0
    61f2:	6078      	str	r0, [r7, #4]
    61f4:	460b      	mov	r3, r1
    61f6:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    61f8:	687b      	ldr	r3, [r7, #4]
    61fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    61fc:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    61fe:	68fb      	ldr	r3, [r7, #12]
    6200:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    6204:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    6206:	78fb      	ldrb	r3, [r7, #3]
    6208:	039b      	lsls	r3, r3, #14
    620a:	461a      	mov	r2, r3
    620c:	68fb      	ldr	r3, [r7, #12]
    620e:	4313      	orrs	r3, r2
    6210:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    6212:	687b      	ldr	r3, [r7, #4]
    6214:	68fa      	ldr	r2, [r7, #12]
    6216:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6218:	2104      	movs	r1, #4
    621a:	6878      	ldr	r0, [r7, #4]
    621c:	4b02      	ldr	r3, [pc, #8]	; (6228 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    621e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6220:	bf00      	nop
    6222:	3710      	adds	r7, #16
    6224:	46bd      	mov	sp, r7
    6226:	bd80      	pop	{r7, pc}
    6228:	00005dc9 	.word	0x00005dc9

0000622c <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    622c:	b580      	push	{r7, lr}
    622e:	b082      	sub	sp, #8
    6230:	af00      	add	r7, sp, #0
    6232:	6078      	str	r0, [r7, #4]
    6234:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6236:	687b      	ldr	r3, [r7, #4]
    6238:	683a      	ldr	r2, [r7, #0]
    623a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    623c:	2104      	movs	r1, #4
    623e:	6878      	ldr	r0, [r7, #4]
    6240:	4b02      	ldr	r3, [pc, #8]	; (624c <hri_sercomi2cm_write_ADDR_reg+0x20>)
    6242:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6244:	bf00      	nop
    6246:	3708      	adds	r7, #8
    6248:	46bd      	mov	sp, r7
    624a:	bd80      	pop	{r7, pc}
    624c:	00005dc9 	.word	0x00005dc9

00006250 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    6250:	b580      	push	{r7, lr}
    6252:	b082      	sub	sp, #8
    6254:	af00      	add	r7, sp, #0
    6256:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6258:	2104      	movs	r1, #4
    625a:	6878      	ldr	r0, [r7, #4]
    625c:	4b03      	ldr	r3, [pc, #12]	; (626c <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    625e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6260:	687b      	ldr	r3, [r7, #4]
    6262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    6264:	4618      	mov	r0, r3
    6266:	3708      	adds	r7, #8
    6268:	46bd      	mov	sp, r7
    626a:	bd80      	pop	{r7, pc}
    626c:	00005dc9 	.word	0x00005dc9

00006270 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    6270:	b480      	push	{r7}
    6272:	b083      	sub	sp, #12
    6274:	af00      	add	r7, sp, #0
    6276:	6078      	str	r0, [r7, #4]
    6278:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    627a:	687b      	ldr	r3, [r7, #4]
    627c:	683a      	ldr	r2, [r7, #0]
    627e:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6280:	bf00      	nop
    6282:	370c      	adds	r7, #12
    6284:	46bd      	mov	sp, r7
    6286:	f85d 7b04 	ldr.w	r7, [sp], #4
    628a:	4770      	bx	lr

0000628c <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    628c:	b580      	push	{r7, lr}
    628e:	b082      	sub	sp, #8
    6290:	af00      	add	r7, sp, #0
    6292:	6078      	str	r0, [r7, #4]
    6294:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6296:	687b      	ldr	r3, [r7, #4]
    6298:	683a      	ldr	r2, [r7, #0]
    629a:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    629c:	2104      	movs	r1, #4
    629e:	6878      	ldr	r0, [r7, #4]
    62a0:	4b02      	ldr	r3, [pc, #8]	; (62ac <hri_sercomi2cm_write_DATA_reg+0x20>)
    62a2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62a4:	bf00      	nop
    62a6:	3708      	adds	r7, #8
    62a8:	46bd      	mov	sp, r7
    62aa:	bd80      	pop	{r7, pc}
    62ac:	00005dc9 	.word	0x00005dc9

000062b0 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    62b0:	b580      	push	{r7, lr}
    62b2:	b082      	sub	sp, #8
    62b4:	af00      	add	r7, sp, #0
    62b6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    62b8:	2104      	movs	r1, #4
    62ba:	6878      	ldr	r0, [r7, #4]
    62bc:	4b03      	ldr	r3, [pc, #12]	; (62cc <hri_sercomi2cm_read_DATA_reg+0x1c>)
    62be:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    62c0:	687b      	ldr	r3, [r7, #4]
    62c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    62c4:	4618      	mov	r0, r3
    62c6:	3708      	adds	r7, #8
    62c8:	46bd      	mov	sp, r7
    62ca:	bd80      	pop	{r7, pc}
    62cc:	00005dc9 	.word	0x00005dc9

000062d0 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    62d0:	b480      	push	{r7}
    62d2:	b083      	sub	sp, #12
    62d4:	af00      	add	r7, sp, #0
    62d6:	6078      	str	r0, [r7, #4]
    62d8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    62da:	687b      	ldr	r3, [r7, #4]
    62dc:	683a      	ldr	r2, [r7, #0]
    62de:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62e0:	bf00      	nop
    62e2:	370c      	adds	r7, #12
    62e4:	46bd      	mov	sp, r7
    62e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    62ea:	4770      	bx	lr

000062ec <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    62ec:	b480      	push	{r7}
    62ee:	b083      	sub	sp, #12
    62f0:	af00      	add	r7, sp, #0
    62f2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    62f4:	687b      	ldr	r3, [r7, #4]
    62f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    62f8:	4618      	mov	r0, r3
    62fa:	370c      	adds	r7, #12
    62fc:	46bd      	mov	sp, r7
    62fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    6302:	4770      	bx	lr

00006304 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    6304:	b480      	push	{r7}
    6306:	b083      	sub	sp, #12
    6308:	af00      	add	r7, sp, #0
    630a:	6078      	str	r0, [r7, #4]
    630c:	460b      	mov	r3, r1
    630e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6310:	687b      	ldr	r3, [r7, #4]
    6312:	78fa      	ldrb	r2, [r7, #3]
    6314:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6318:	bf00      	nop
    631a:	370c      	adds	r7, #12
    631c:	46bd      	mov	sp, r7
    631e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6322:	4770      	bx	lr

00006324 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    6324:	b480      	push	{r7}
    6326:	b083      	sub	sp, #12
    6328:	af00      	add	r7, sp, #0
    632a:	6078      	str	r0, [r7, #4]
    632c:	460b      	mov	r3, r1
    632e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6330:	687b      	ldr	r3, [r7, #4]
    6332:	887a      	ldrh	r2, [r7, #2]
    6334:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6336:	bf00      	nop
    6338:	370c      	adds	r7, #12
    633a:	46bd      	mov	sp, r7
    633c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6340:	4770      	bx	lr
	...

00006344 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    6344:	b580      	push	{r7, lr}
    6346:	b082      	sub	sp, #8
    6348:	af00      	add	r7, sp, #0
    634a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    634c:	2104      	movs	r1, #4
    634e:	6878      	ldr	r0, [r7, #4]
    6350:	4b06      	ldr	r3, [pc, #24]	; (636c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    6352:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    6354:	687b      	ldr	r3, [r7, #4]
    6356:	8b5b      	ldrh	r3, [r3, #26]
    6358:	b29b      	uxth	r3, r3
    635a:	091b      	lsrs	r3, r3, #4
    635c:	b29b      	uxth	r3, r3
    635e:	f003 0303 	and.w	r3, r3, #3
    6362:	b29b      	uxth	r3, r3
}
    6364:	4618      	mov	r0, r3
    6366:	3708      	adds	r7, #8
    6368:	46bd      	mov	sp, r7
    636a:	bd80      	pop	{r7, pc}
    636c:	00005dc9 	.word	0x00005dc9

00006370 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6370:	b580      	push	{r7, lr}
    6372:	b082      	sub	sp, #8
    6374:	af00      	add	r7, sp, #0
    6376:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6378:	2104      	movs	r1, #4
    637a:	6878      	ldr	r0, [r7, #4]
    637c:	4b04      	ldr	r3, [pc, #16]	; (6390 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    637e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6380:	687b      	ldr	r3, [r7, #4]
    6382:	8b5b      	ldrh	r3, [r3, #26]
    6384:	b29b      	uxth	r3, r3
}
    6386:	4618      	mov	r0, r3
    6388:	3708      	adds	r7, #8
    638a:	46bd      	mov	sp, r7
    638c:	bd80      	pop	{r7, pc}
    638e:	bf00      	nop
    6390:	00005dc9 	.word	0x00005dc9

00006394 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    6394:	b580      	push	{r7, lr}
    6396:	b082      	sub	sp, #8
    6398:	af00      	add	r7, sp, #0
    639a:	6078      	str	r0, [r7, #4]
    639c:	460b      	mov	r3, r1
    639e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    63a0:	687b      	ldr	r3, [r7, #4]
    63a2:	887a      	ldrh	r2, [r7, #2]
    63a4:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    63a6:	2104      	movs	r1, #4
    63a8:	6878      	ldr	r0, [r7, #4]
    63aa:	4b03      	ldr	r3, [pc, #12]	; (63b8 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    63ac:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    63ae:	bf00      	nop
    63b0:	3708      	adds	r7, #8
    63b2:	46bd      	mov	sp, r7
    63b4:	bd80      	pop	{r7, pc}
    63b6:	bf00      	nop
    63b8:	00005dc9 	.word	0x00005dc9

000063bc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    63bc:	b4b0      	push	{r4, r5, r7}
    63be:	b08d      	sub	sp, #52	; 0x34
    63c0:	af00      	add	r7, sp, #0
    63c2:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    63c4:	4b13      	ldr	r3, [pc, #76]	; (6414 <_sercom_get_hardware_index+0x58>)
    63c6:	f107 040c 	add.w	r4, r7, #12
    63ca:	461d      	mov	r5, r3
    63cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    63ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    63d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    63d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    63d8:	2300      	movs	r3, #0
    63da:	62fb      	str	r3, [r7, #44]	; 0x2c
    63dc:	e010      	b.n	6400 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    63de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    63e0:	009b      	lsls	r3, r3, #2
    63e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    63e6:	4413      	add	r3, r2
    63e8:	f853 3c24 	ldr.w	r3, [r3, #-36]
    63ec:	461a      	mov	r2, r3
    63ee:	687b      	ldr	r3, [r7, #4]
    63f0:	429a      	cmp	r2, r3
    63f2:	d102      	bne.n	63fa <_sercom_get_hardware_index+0x3e>
			return i;
    63f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    63f6:	b2db      	uxtb	r3, r3
    63f8:	e006      	b.n	6408 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    63fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    63fc:	3301      	adds	r3, #1
    63fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    6400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6402:	2b07      	cmp	r3, #7
    6404:	d9eb      	bls.n	63de <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    6406:	2300      	movs	r3, #0
}
    6408:	4618      	mov	r0, r3
    640a:	3734      	adds	r7, #52	; 0x34
    640c:	46bd      	mov	sp, r7
    640e:	bcb0      	pop	{r4, r5, r7}
    6410:	4770      	bx	lr
    6412:	bf00      	nop
    6414:	0000f070 	.word	0x0000f070

00006418 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6418:	b580      	push	{r7, lr}
    641a:	b084      	sub	sp, #16
    641c:	af00      	add	r7, sp, #0
    641e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6420:	6878      	ldr	r0, [r7, #4]
    6422:	4b13      	ldr	r3, [pc, #76]	; (6470 <_get_i2cm_index+0x58>)
    6424:	4798      	blx	r3
    6426:	4603      	mov	r3, r0
    6428:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    642a:	2300      	movs	r3, #0
    642c:	73fb      	strb	r3, [r7, #15]
    642e:	e010      	b.n	6452 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    6430:	7bfa      	ldrb	r2, [r7, #15]
    6432:	4910      	ldr	r1, [pc, #64]	; (6474 <_get_i2cm_index+0x5c>)
    6434:	4613      	mov	r3, r2
    6436:	005b      	lsls	r3, r3, #1
    6438:	4413      	add	r3, r2
    643a:	00db      	lsls	r3, r3, #3
    643c:	440b      	add	r3, r1
    643e:	781b      	ldrb	r3, [r3, #0]
    6440:	7bba      	ldrb	r2, [r7, #14]
    6442:	429a      	cmp	r2, r3
    6444:	d102      	bne.n	644c <_get_i2cm_index+0x34>
			return i;
    6446:	f997 300f 	ldrsb.w	r3, [r7, #15]
    644a:	e00d      	b.n	6468 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    644c:	7bfb      	ldrb	r3, [r7, #15]
    644e:	3301      	adds	r3, #1
    6450:	73fb      	strb	r3, [r7, #15]
    6452:	7bfb      	ldrb	r3, [r7, #15]
    6454:	2b02      	cmp	r3, #2
    6456:	d9eb      	bls.n	6430 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6458:	f240 32a6 	movw	r2, #934	; 0x3a6
    645c:	4906      	ldr	r1, [pc, #24]	; (6478 <_get_i2cm_index+0x60>)
    645e:	2000      	movs	r0, #0
    6460:	4b06      	ldr	r3, [pc, #24]	; (647c <_get_i2cm_index+0x64>)
    6462:	4798      	blx	r3
	return -1;
    6464:	f04f 33ff 	mov.w	r3, #4294967295
}
    6468:	4618      	mov	r0, r3
    646a:	3710      	adds	r7, #16
    646c:	46bd      	mov	sp, r7
    646e:	bd80      	pop	{r7, pc}
    6470:	000063bd 	.word	0x000063bd
    6474:	20000018 	.word	0x20000018
    6478:	0000f054 	.word	0x0000f054
    647c:	000038b5 	.word	0x000038b5

00006480 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    6480:	b580      	push	{r7, lr}
    6482:	b082      	sub	sp, #8
    6484:	af00      	add	r7, sp, #0
    6486:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    6488:	2103      	movs	r1, #3
    648a:	6878      	ldr	r0, [r7, #4]
    648c:	4b02      	ldr	r3, [pc, #8]	; (6498 <_sercom_i2c_send_stop+0x18>)
    648e:	4798      	blx	r3
}
    6490:	bf00      	nop
    6492:	3708      	adds	r7, #8
    6494:	46bd      	mov	sp, r7
    6496:	bd80      	pop	{r7, pc}
    6498:	00006139 	.word	0x00006139

0000649c <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    649c:	b590      	push	{r4, r7, lr}
    649e:	b087      	sub	sp, #28
    64a0:	af00      	add	r7, sp, #0
    64a2:	60f8      	str	r0, [r7, #12]
    64a4:	60b9      	str	r1, [r7, #8]
    64a6:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    64a8:	68f8      	ldr	r0, [r7, #12]
    64aa:	4b7d      	ldr	r3, [pc, #500]	; (66a0 <_sercom_i2c_sync_analyse_flags+0x204>)
    64ac:	4798      	blx	r3
    64ae:	4603      	mov	r3, r0
    64b0:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    64b2:	68f8      	ldr	r0, [r7, #12]
    64b4:	4b7b      	ldr	r3, [pc, #492]	; (66a4 <_sercom_i2c_sync_analyse_flags+0x208>)
    64b6:	4798      	blx	r3
    64b8:	4603      	mov	r3, r0
    64ba:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    64bc:	68bb      	ldr	r3, [r7, #8]
    64be:	f003 0301 	and.w	r3, r3, #1
    64c2:	2b00      	cmp	r3, #0
    64c4:	f000 8095 	beq.w	65f2 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    64c8:	8a7b      	ldrh	r3, [r7, #18]
    64ca:	f003 0302 	and.w	r3, r3, #2
    64ce:	2b00      	cmp	r3, #0
    64d0:	d01d      	beq.n	650e <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    64d2:	68f8      	ldr	r0, [r7, #12]
    64d4:	4b74      	ldr	r3, [pc, #464]	; (66a8 <_sercom_i2c_sync_analyse_flags+0x20c>)
    64d6:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    64d8:	687b      	ldr	r3, [r7, #4]
    64da:	885b      	ldrh	r3, [r3, #2]
    64dc:	b29b      	uxth	r3, r3
    64de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    64e2:	b29a      	uxth	r2, r3
    64e4:	687b      	ldr	r3, [r7, #4]
    64e6:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    64e8:	687b      	ldr	r3, [r7, #4]
    64ea:	885b      	ldrh	r3, [r3, #2]
    64ec:	b29b      	uxth	r3, r3
    64ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    64f2:	b29a      	uxth	r2, r3
    64f4:	687b      	ldr	r3, [r7, #4]
    64f6:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    64f8:	8a7b      	ldrh	r3, [r7, #18]
    64fa:	f003 0301 	and.w	r3, r3, #1
    64fe:	2b00      	cmp	r3, #0
    6500:	d002      	beq.n	6508 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    6502:	f06f 0304 	mvn.w	r3, #4
    6506:	e0c6      	b.n	6696 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6508:	f06f 0303 	mvn.w	r3, #3
    650c:	e0c3      	b.n	6696 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    650e:	8a7b      	ldrh	r3, [r7, #18]
    6510:	f003 0304 	and.w	r3, r3, #4
    6514:	2b00      	cmp	r3, #0
    6516:	d01f      	beq.n	6558 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6518:	687b      	ldr	r3, [r7, #4]
    651a:	685b      	ldr	r3, [r3, #4]
    651c:	2b00      	cmp	r3, #0
    651e:	dd07      	ble.n	6530 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6520:	687b      	ldr	r3, [r7, #4]
    6522:	885b      	ldrh	r3, [r3, #2]
    6524:	b29b      	uxth	r3, r3
    6526:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    652a:	b29a      	uxth	r2, r3
    652c:	687b      	ldr	r3, [r7, #4]
    652e:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6530:	687b      	ldr	r3, [r7, #4]
    6532:	885b      	ldrh	r3, [r3, #2]
    6534:	b29b      	uxth	r3, r3
    6536:	b21b      	sxth	r3, r3
    6538:	2b00      	cmp	r3, #0
    653a:	da02      	bge.n	6542 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    653c:	68f8      	ldr	r0, [r7, #12]
    653e:	4b5b      	ldr	r3, [pc, #364]	; (66ac <_sercom_i2c_sync_analyse_flags+0x210>)
    6540:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6542:	687b      	ldr	r3, [r7, #4]
    6544:	885b      	ldrh	r3, [r3, #2]
    6546:	b29b      	uxth	r3, r3
    6548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    654c:	b29a      	uxth	r2, r3
    654e:	687b      	ldr	r3, [r7, #4]
    6550:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    6552:	f06f 0301 	mvn.w	r3, #1
    6556:	e09e      	b.n	6696 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6558:	687b      	ldr	r3, [r7, #4]
    655a:	885b      	ldrh	r3, [r3, #2]
    655c:	b29b      	uxth	r3, r3
    655e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6562:	2b00      	cmp	r3, #0
    6564:	d01c      	beq.n	65a0 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6566:	687b      	ldr	r3, [r7, #4]
    6568:	881b      	ldrh	r3, [r3, #0]
    656a:	121b      	asrs	r3, r3, #8
    656c:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    656e:	f003 0406 	and.w	r4, r3, #6
    6572:	68f8      	ldr	r0, [r7, #12]
    6574:	4b4e      	ldr	r3, [pc, #312]	; (66b0 <_sercom_i2c_sync_analyse_flags+0x214>)
    6576:	4798      	blx	r3
    6578:	4603      	mov	r3, r0
    657a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    657e:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    6580:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6584:	4619      	mov	r1, r3
    6586:	68f8      	ldr	r0, [r7, #12]
    6588:	4b4a      	ldr	r3, [pc, #296]	; (66b4 <_sercom_i2c_sync_analyse_flags+0x218>)
    658a:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    658c:	687b      	ldr	r3, [r7, #4]
    658e:	885b      	ldrh	r3, [r3, #2]
    6590:	b29b      	uxth	r3, r3
    6592:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6596:	b29a      	uxth	r2, r3
    6598:	687b      	ldr	r3, [r7, #4]
    659a:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    659c:	2300      	movs	r3, #0
    659e:	e07a      	b.n	6696 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    65a0:	687b      	ldr	r3, [r7, #4]
    65a2:	685b      	ldr	r3, [r3, #4]
    65a4:	2b00      	cmp	r3, #0
    65a6:	d111      	bne.n	65cc <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    65a8:	687b      	ldr	r3, [r7, #4]
    65aa:	885b      	ldrh	r3, [r3, #2]
    65ac:	b29b      	uxth	r3, r3
    65ae:	b21b      	sxth	r3, r3
    65b0:	2b00      	cmp	r3, #0
    65b2:	da02      	bge.n	65ba <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    65b4:	68f8      	ldr	r0, [r7, #12]
    65b6:	4b3d      	ldr	r3, [pc, #244]	; (66ac <_sercom_i2c_sync_analyse_flags+0x210>)
    65b8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    65ba:	687b      	ldr	r3, [r7, #4]
    65bc:	885b      	ldrh	r3, [r3, #2]
    65be:	b29b      	uxth	r3, r3
    65c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    65c4:	b29a      	uxth	r2, r3
    65c6:	687b      	ldr	r3, [r7, #4]
    65c8:	805a      	strh	r2, [r3, #2]
    65ca:	e010      	b.n	65ee <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    65cc:	687b      	ldr	r3, [r7, #4]
    65ce:	689b      	ldr	r3, [r3, #8]
    65d0:	781b      	ldrb	r3, [r3, #0]
    65d2:	4619      	mov	r1, r3
    65d4:	68f8      	ldr	r0, [r7, #12]
    65d6:	4b38      	ldr	r3, [pc, #224]	; (66b8 <_sercom_i2c_sync_analyse_flags+0x21c>)
    65d8:	4798      	blx	r3
				msg->buffer++;
    65da:	687b      	ldr	r3, [r7, #4]
    65dc:	689b      	ldr	r3, [r3, #8]
    65de:	1c5a      	adds	r2, r3, #1
    65e0:	687b      	ldr	r3, [r7, #4]
    65e2:	609a      	str	r2, [r3, #8]
				msg->len--;
    65e4:	687b      	ldr	r3, [r7, #4]
    65e6:	685b      	ldr	r3, [r3, #4]
    65e8:	1e5a      	subs	r2, r3, #1
    65ea:	687b      	ldr	r3, [r7, #4]
    65ec:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    65ee:	2300      	movs	r3, #0
    65f0:	e051      	b.n	6696 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    65f2:	68bb      	ldr	r3, [r7, #8]
    65f4:	f003 0302 	and.w	r3, r3, #2
    65f8:	2b00      	cmp	r3, #0
    65fa:	d04b      	beq.n	6694 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    65fc:	687b      	ldr	r3, [r7, #4]
    65fe:	685b      	ldr	r3, [r3, #4]
    6600:	2b00      	cmp	r3, #0
    6602:	d041      	beq.n	6688 <_sercom_i2c_sync_analyse_flags+0x1ec>
    6604:	8a7b      	ldrh	r3, [r7, #18]
    6606:	f003 0304 	and.w	r3, r3, #4
    660a:	2b00      	cmp	r3, #0
    660c:	d13c      	bne.n	6688 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    660e:	687b      	ldr	r3, [r7, #4]
    6610:	685b      	ldr	r3, [r3, #4]
    6612:	1e5a      	subs	r2, r3, #1
    6614:	687b      	ldr	r3, [r7, #4]
    6616:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6618:	687b      	ldr	r3, [r7, #4]
    661a:	685b      	ldr	r3, [r3, #4]
    661c:	2b00      	cmp	r3, #0
    661e:	d102      	bne.n	6626 <_sercom_i2c_sync_analyse_flags+0x18a>
    6620:	697b      	ldr	r3, [r7, #20]
    6622:	2b00      	cmp	r3, #0
    6624:	d006      	beq.n	6634 <_sercom_i2c_sync_analyse_flags+0x198>
    6626:	687b      	ldr	r3, [r7, #4]
    6628:	685b      	ldr	r3, [r3, #4]
    662a:	2b01      	cmp	r3, #1
    662c:	d105      	bne.n	663a <_sercom_i2c_sync_analyse_flags+0x19e>
    662e:	697b      	ldr	r3, [r7, #20]
    6630:	2b00      	cmp	r3, #0
    6632:	d002      	beq.n	663a <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6634:	68f8      	ldr	r0, [r7, #12]
    6636:	4b21      	ldr	r3, [pc, #132]	; (66bc <_sercom_i2c_sync_analyse_flags+0x220>)
    6638:	4798      	blx	r3
			}

			if (msg->len == 0) {
    663a:	687b      	ldr	r3, [r7, #4]
    663c:	685b      	ldr	r3, [r3, #4]
    663e:	2b00      	cmp	r3, #0
    6640:	d113      	bne.n	666a <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    6642:	687b      	ldr	r3, [r7, #4]
    6644:	885b      	ldrh	r3, [r3, #2]
    6646:	b29b      	uxth	r3, r3
    6648:	b21b      	sxth	r3, r3
    664a:	2b00      	cmp	r3, #0
    664c:	da05      	bge.n	665a <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    664e:	68f8      	ldr	r0, [r7, #12]
    6650:	4b1b      	ldr	r3, [pc, #108]	; (66c0 <_sercom_i2c_sync_analyse_flags+0x224>)
    6652:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6654:	68f8      	ldr	r0, [r7, #12]
    6656:	4b15      	ldr	r3, [pc, #84]	; (66ac <_sercom_i2c_sync_analyse_flags+0x210>)
    6658:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    665a:	687b      	ldr	r3, [r7, #4]
    665c:	885b      	ldrh	r3, [r3, #2]
    665e:	b29b      	uxth	r3, r3
    6660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6664:	b29a      	uxth	r2, r3
    6666:	687b      	ldr	r3, [r7, #4]
    6668:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    666a:	687b      	ldr	r3, [r7, #4]
    666c:	689c      	ldr	r4, [r3, #8]
    666e:	1c62      	adds	r2, r4, #1
    6670:	687b      	ldr	r3, [r7, #4]
    6672:	609a      	str	r2, [r3, #8]
    6674:	68f8      	ldr	r0, [r7, #12]
    6676:	4b13      	ldr	r3, [pc, #76]	; (66c4 <_sercom_i2c_sync_analyse_flags+0x228>)
    6678:	4798      	blx	r3
    667a:	4603      	mov	r3, r0
    667c:	b2db      	uxtb	r3, r3
    667e:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6680:	68f8      	ldr	r0, [r7, #12]
    6682:	4b11      	ldr	r3, [pc, #68]	; (66c8 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6684:	4798      	blx	r3
    6686:	e005      	b.n	6694 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6688:	68f8      	ldr	r0, [r7, #12]
    668a:	4b0f      	ldr	r3, [pc, #60]	; (66c8 <_sercom_i2c_sync_analyse_flags+0x22c>)
    668c:	4798      	blx	r3
			return I2C_NACK;
    668e:	f06f 0301 	mvn.w	r3, #1
    6692:	e000      	b.n	6696 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    6694:	2300      	movs	r3, #0
}
    6696:	4618      	mov	r0, r3
    6698:	371c      	adds	r7, #28
    669a:	46bd      	mov	sp, r7
    669c:	bd90      	pop	{r4, r7, pc}
    669e:	bf00      	nop
    66a0:	00005f61 	.word	0x00005f61
    66a4:	00006371 	.word	0x00006371
    66a8:	00005e61 	.word	0x00005e61
    66ac:	00006481 	.word	0x00006481
    66b0:	00006251 	.word	0x00006251
    66b4:	0000622d 	.word	0x0000622d
    66b8:	0000628d 	.word	0x0000628d
    66bc:	000060e9 	.word	0x000060e9
    66c0:	000060c1 	.word	0x000060c1
    66c4:	000062b1 	.word	0x000062b1
    66c8:	00005e7b 	.word	0x00005e7b

000066cc <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    66cc:	b580      	push	{r7, lr}
    66ce:	b082      	sub	sp, #8
    66d0:	af00      	add	r7, sp, #0
    66d2:	6078      	str	r0, [r7, #4]
    66d4:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    66d6:	687b      	ldr	r3, [r7, #4]
    66d8:	2b00      	cmp	r3, #0
    66da:	bf14      	ite	ne
    66dc:	2301      	movne	r3, #1
    66de:	2300      	moveq	r3, #0
    66e0:	b2db      	uxtb	r3, r3
    66e2:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    66e6:	4908      	ldr	r1, [pc, #32]	; (6708 <_i2c_m_sync_init+0x3c>)
    66e8:	4618      	mov	r0, r3
    66ea:	4b08      	ldr	r3, [pc, #32]	; (670c <_i2c_m_sync_init+0x40>)
    66ec:	4798      	blx	r3

	i2c_dev->hw = hw;
    66ee:	687b      	ldr	r3, [r7, #4]
    66f0:	683a      	ldr	r2, [r7, #0]
    66f2:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    66f4:	687b      	ldr	r3, [r7, #4]
    66f6:	6839      	ldr	r1, [r7, #0]
    66f8:	4618      	mov	r0, r3
    66fa:	4b05      	ldr	r3, [pc, #20]	; (6710 <_i2c_m_sync_init+0x44>)
    66fc:	4798      	blx	r3
    66fe:	4603      	mov	r3, r0
}
    6700:	4618      	mov	r0, r3
    6702:	3708      	adds	r7, #8
    6704:	46bd      	mov	sp, r7
    6706:	bd80      	pop	{r7, pc}
    6708:	0000f054 	.word	0x0000f054
    670c:	000038b5 	.word	0x000038b5
    6710:	00006ae5 	.word	0x00006ae5

00006714 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    6714:	b580      	push	{r7, lr}
    6716:	b082      	sub	sp, #8
    6718:	af00      	add	r7, sp, #0
    671a:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    671c:	687b      	ldr	r3, [r7, #4]
    671e:	2b00      	cmp	r3, #0
    6720:	bf14      	ite	ne
    6722:	2301      	movne	r3, #1
    6724:	2300      	moveq	r3, #0
    6726:	b2db      	uxtb	r3, r3
    6728:	f240 5235 	movw	r2, #1333	; 0x535
    672c:	4906      	ldr	r1, [pc, #24]	; (6748 <_i2c_m_sync_enable+0x34>)
    672e:	4618      	mov	r0, r3
    6730:	4b06      	ldr	r3, [pc, #24]	; (674c <_i2c_m_sync_enable+0x38>)
    6732:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    6734:	687b      	ldr	r3, [r7, #4]
    6736:	691b      	ldr	r3, [r3, #16]
    6738:	4618      	mov	r0, r3
    673a:	4b05      	ldr	r3, [pc, #20]	; (6750 <_i2c_m_sync_enable+0x3c>)
    673c:	4798      	blx	r3
    673e:	4603      	mov	r3, r0
}
    6740:	4618      	mov	r0, r3
    6742:	3708      	adds	r7, #8
    6744:	46bd      	mov	sp, r7
    6746:	bd80      	pop	{r7, pc}
    6748:	0000f054 	.word	0x0000f054
    674c:	000038b5 	.word	0x000038b5
    6750:	00006a59 	.word	0x00006a59

00006754 <_i2c_m_sync_disable>:
 * \brief Disable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_disable(struct _i2c_m_sync_device *const i2c_dev)
{
    6754:	b580      	push	{r7, lr}
    6756:	b084      	sub	sp, #16
    6758:	af00      	add	r7, sp, #0
    675a:	6078      	str	r0, [r7, #4]
	void *hw = i2c_dev->hw;
    675c:	687b      	ldr	r3, [r7, #4]
    675e:	691b      	ldr	r3, [r3, #16]
    6760:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    6762:	687b      	ldr	r3, [r7, #4]
    6764:	2b00      	cmp	r3, #0
    6766:	bf14      	ite	ne
    6768:	2301      	movne	r3, #1
    676a:	2300      	moveq	r3, #0
    676c:	b2db      	uxtb	r3, r3
    676e:	f240 5243 	movw	r2, #1347	; 0x543
    6772:	490c      	ldr	r1, [pc, #48]	; (67a4 <_i2c_m_sync_disable+0x50>)
    6774:	4618      	mov	r0, r3
    6776:	4b0c      	ldr	r3, [pc, #48]	; (67a8 <_i2c_m_sync_disable+0x54>)
    6778:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    677a:	687b      	ldr	r3, [r7, #4]
    677c:	691b      	ldr	r3, [r3, #16]
    677e:	2b00      	cmp	r3, #0
    6780:	bf14      	ite	ne
    6782:	2301      	movne	r3, #1
    6784:	2300      	moveq	r3, #0
    6786:	b2db      	uxtb	r3, r3
    6788:	f240 5244 	movw	r2, #1348	; 0x544
    678c:	4905      	ldr	r1, [pc, #20]	; (67a4 <_i2c_m_sync_disable+0x50>)
    678e:	4618      	mov	r0, r3
    6790:	4b05      	ldr	r3, [pc, #20]	; (67a8 <_i2c_m_sync_disable+0x54>)
    6792:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    6794:	68f8      	ldr	r0, [r7, #12]
    6796:	4b05      	ldr	r3, [pc, #20]	; (67ac <_i2c_m_sync_disable+0x58>)
    6798:	4798      	blx	r3

	return ERR_NONE;
    679a:	2300      	movs	r3, #0
}
    679c:	4618      	mov	r0, r3
    679e:	3710      	adds	r7, #16
    67a0:	46bd      	mov	sp, r7
    67a2:	bd80      	pop	{r7, pc}
    67a4:	0000f054 	.word	0x0000f054
    67a8:	000038b5 	.word	0x000038b5
    67ac:	00005f39 	.word	0x00005f39

000067b0 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    67b0:	b580      	push	{r7, lr}
    67b2:	b084      	sub	sp, #16
    67b4:	af00      	add	r7, sp, #0
    67b6:	6078      	str	r0, [r7, #4]
    67b8:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    67ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
    67be:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    67c0:	687b      	ldr	r3, [r7, #4]
    67c2:	691b      	ldr	r3, [r3, #16]
    67c4:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    67c6:	68b8      	ldr	r0, [r7, #8]
    67c8:	4b0f      	ldr	r3, [pc, #60]	; (6808 <_sercom_i2c_sync_wait_bus+0x58>)
    67ca:	4798      	blx	r3
    67cc:	4603      	mov	r3, r0
    67ce:	461a      	mov	r2, r3
    67d0:	683b      	ldr	r3, [r7, #0]
    67d2:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    67d4:	68fb      	ldr	r3, [r7, #12]
    67d6:	1e5a      	subs	r2, r3, #1
    67d8:	60fa      	str	r2, [r7, #12]
    67da:	2b00      	cmp	r3, #0
    67dc:	d102      	bne.n	67e4 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    67de:	f06f 0304 	mvn.w	r3, #4
    67e2:	e00c      	b.n	67fe <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    67e4:	683b      	ldr	r3, [r7, #0]
    67e6:	681b      	ldr	r3, [r3, #0]
    67e8:	f003 0301 	and.w	r3, r3, #1
    67ec:	2b00      	cmp	r3, #0
    67ee:	d105      	bne.n	67fc <_sercom_i2c_sync_wait_bus+0x4c>
    67f0:	683b      	ldr	r3, [r7, #0]
    67f2:	681b      	ldr	r3, [r3, #0]
    67f4:	f003 0302 	and.w	r3, r3, #2
    67f8:	2b00      	cmp	r3, #0
    67fa:	d0e4      	beq.n	67c6 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    67fc:	2300      	movs	r3, #0
}
    67fe:	4618      	mov	r0, r3
    6800:	3710      	adds	r7, #16
    6802:	46bd      	mov	sp, r7
    6804:	bd80      	pop	{r7, pc}
    6806:	bf00      	nop
    6808:	00005e95 	.word	0x00005e95

0000680c <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    680c:	b590      	push	{r4, r7, lr}
    680e:	b087      	sub	sp, #28
    6810:	af00      	add	r7, sp, #0
    6812:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6814:	687b      	ldr	r3, [r7, #4]
    6816:	691b      	ldr	r3, [r3, #16]
    6818:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    681a:	687b      	ldr	r3, [r7, #4]
    681c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    681e:	6978      	ldr	r0, [r7, #20]
    6820:	4b39      	ldr	r3, [pc, #228]	; (6908 <_sercom_i2c_sync_send_address+0xfc>)
    6822:	4798      	blx	r3
    6824:	4603      	mov	r3, r0
    6826:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    6828:	687b      	ldr	r3, [r7, #4]
    682a:	2b00      	cmp	r3, #0
    682c:	bf14      	ite	ne
    682e:	2301      	movne	r3, #1
    6830:	2300      	moveq	r3, #0
    6832:	b2db      	uxtb	r3, r3
    6834:	f240 52a5 	movw	r2, #1445	; 0x5a5
    6838:	4934      	ldr	r1, [pc, #208]	; (690c <_sercom_i2c_sync_send_address+0x100>)
    683a:	4618      	mov	r0, r3
    683c:	4b34      	ldr	r3, [pc, #208]	; (6910 <_sercom_i2c_sync_send_address+0x104>)
    683e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6840:	693b      	ldr	r3, [r7, #16]
    6842:	685b      	ldr	r3, [r3, #4]
    6844:	2b01      	cmp	r3, #1
    6846:	d106      	bne.n	6856 <_sercom_i2c_sync_send_address+0x4a>
    6848:	68fb      	ldr	r3, [r7, #12]
    684a:	2b00      	cmp	r3, #0
    684c:	d003      	beq.n	6856 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    684e:	6978      	ldr	r0, [r7, #20]
    6850:	4b30      	ldr	r3, [pc, #192]	; (6914 <_sercom_i2c_sync_send_address+0x108>)
    6852:	4798      	blx	r3
    6854:	e002      	b.n	685c <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6856:	6978      	ldr	r0, [r7, #20]
    6858:	4b2f      	ldr	r3, [pc, #188]	; (6918 <_sercom_i2c_sync_send_address+0x10c>)
    685a:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    685c:	693b      	ldr	r3, [r7, #16]
    685e:	881b      	ldrh	r3, [r3, #0]
    6860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6864:	2b00      	cmp	r3, #0
    6866:	d022      	beq.n	68ae <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6868:	693b      	ldr	r3, [r7, #16]
    686a:	885b      	ldrh	r3, [r3, #2]
    686c:	b29b      	uxth	r3, r3
    686e:	f003 0301 	and.w	r3, r3, #1
    6872:	2b00      	cmp	r3, #0
    6874:	d007      	beq.n	6886 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6876:	693b      	ldr	r3, [r7, #16]
    6878:	885b      	ldrh	r3, [r3, #2]
    687a:	b29b      	uxth	r3, r3
    687c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6880:	b29a      	uxth	r2, r3
    6882:	693b      	ldr	r3, [r7, #16]
    6884:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    6886:	693b      	ldr	r3, [r7, #16]
    6888:	881b      	ldrh	r3, [r3, #0]
    688a:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    688c:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6890:	401c      	ands	r4, r3
    6892:	6978      	ldr	r0, [r7, #20]
    6894:	4b21      	ldr	r3, [pc, #132]	; (691c <_sercom_i2c_sync_send_address+0x110>)
    6896:	4798      	blx	r3
    6898:	4603      	mov	r3, r0
    689a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    689e:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    68a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    68a4:	4619      	mov	r1, r3
    68a6:	6978      	ldr	r0, [r7, #20]
    68a8:	4b1d      	ldr	r3, [pc, #116]	; (6920 <_sercom_i2c_sync_send_address+0x114>)
    68aa:	4798      	blx	r3
    68ac:	e01a      	b.n	68e4 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    68ae:	693b      	ldr	r3, [r7, #16]
    68b0:	881b      	ldrh	r3, [r3, #0]
    68b2:	005b      	lsls	r3, r3, #1
    68b4:	b2db      	uxtb	r3, r3
    68b6:	693a      	ldr	r2, [r7, #16]
    68b8:	8852      	ldrh	r2, [r2, #2]
    68ba:	b292      	uxth	r2, r2
    68bc:	f002 0201 	and.w	r2, r2, #1
    68c0:	2a00      	cmp	r2, #0
    68c2:	bf14      	ite	ne
    68c4:	2201      	movne	r2, #1
    68c6:	2200      	moveq	r2, #0
    68c8:	b2d2      	uxtb	r2, r2
    68ca:	4313      	orrs	r3, r2
    68cc:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    68ce:	6978      	ldr	r0, [r7, #20]
    68d0:	4b12      	ldr	r3, [pc, #72]	; (691c <_sercom_i2c_sync_send_address+0x110>)
    68d2:	4798      	blx	r3
    68d4:	4603      	mov	r3, r0
    68d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    68da:	4323      	orrs	r3, r4
    68dc:	4619      	mov	r1, r3
    68de:	6978      	ldr	r0, [r7, #20]
    68e0:	4b0f      	ldr	r3, [pc, #60]	; (6920 <_sercom_i2c_sync_send_address+0x114>)
    68e2:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    68e4:	f107 0308 	add.w	r3, r7, #8
    68e8:	4619      	mov	r1, r3
    68ea:	6878      	ldr	r0, [r7, #4]
    68ec:	4b0d      	ldr	r3, [pc, #52]	; (6924 <_sercom_i2c_sync_send_address+0x118>)
    68ee:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    68f0:	68bb      	ldr	r3, [r7, #8]
    68f2:	693a      	ldr	r2, [r7, #16]
    68f4:	4619      	mov	r1, r3
    68f6:	6978      	ldr	r0, [r7, #20]
    68f8:	4b0b      	ldr	r3, [pc, #44]	; (6928 <_sercom_i2c_sync_send_address+0x11c>)
    68fa:	4798      	blx	r3
    68fc:	4603      	mov	r3, r0
}
    68fe:	4618      	mov	r0, r3
    6900:	371c      	adds	r7, #28
    6902:	46bd      	mov	sp, r7
    6904:	bd90      	pop	{r4, r7, pc}
    6906:	bf00      	nop
    6908:	00005f61 	.word	0x00005f61
    690c:	0000f054 	.word	0x0000f054
    6910:	000038b5 	.word	0x000038b5
    6914:	000060e9 	.word	0x000060e9
    6918:	00006111 	.word	0x00006111
    691c:	00006251 	.word	0x00006251
    6920:	0000622d 	.word	0x0000622d
    6924:	000067b1 	.word	0x000067b1
    6928:	0000649d 	.word	0x0000649d

0000692c <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    692c:	b580      	push	{r7, lr}
    692e:	b086      	sub	sp, #24
    6930:	af00      	add	r7, sp, #0
    6932:	6078      	str	r0, [r7, #4]
    6934:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    6936:	687b      	ldr	r3, [r7, #4]
    6938:	691b      	ldr	r3, [r3, #16]
    693a:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    693c:	687b      	ldr	r3, [r7, #4]
    693e:	2b00      	cmp	r3, #0
    6940:	bf14      	ite	ne
    6942:	2301      	movne	r3, #1
    6944:	2300      	moveq	r3, #0
    6946:	b2db      	uxtb	r3, r3
    6948:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    694c:	493b      	ldr	r1, [pc, #236]	; (6a3c <_i2c_m_sync_transfer+0x110>)
    694e:	4618      	mov	r0, r3
    6950:	4b3b      	ldr	r3, [pc, #236]	; (6a40 <_i2c_m_sync_transfer+0x114>)
    6952:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6954:	687b      	ldr	r3, [r7, #4]
    6956:	691b      	ldr	r3, [r3, #16]
    6958:	2b00      	cmp	r3, #0
    695a:	bf14      	ite	ne
    695c:	2301      	movne	r3, #1
    695e:	2300      	moveq	r3, #0
    6960:	b2db      	uxtb	r3, r3
    6962:	f240 52d1 	movw	r2, #1489	; 0x5d1
    6966:	4935      	ldr	r1, [pc, #212]	; (6a3c <_i2c_m_sync_transfer+0x110>)
    6968:	4618      	mov	r0, r3
    696a:	4b35      	ldr	r3, [pc, #212]	; (6a40 <_i2c_m_sync_transfer+0x114>)
    696c:	4798      	blx	r3
	ASSERT(msg);
    696e:	683b      	ldr	r3, [r7, #0]
    6970:	2b00      	cmp	r3, #0
    6972:	bf14      	ite	ne
    6974:	2301      	movne	r3, #1
    6976:	2300      	moveq	r3, #0
    6978:	b2db      	uxtb	r3, r3
    697a:	f240 52d2 	movw	r2, #1490	; 0x5d2
    697e:	492f      	ldr	r1, [pc, #188]	; (6a3c <_i2c_m_sync_transfer+0x110>)
    6980:	4618      	mov	r0, r3
    6982:	4b2f      	ldr	r3, [pc, #188]	; (6a40 <_i2c_m_sync_transfer+0x114>)
    6984:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6986:	687b      	ldr	r3, [r7, #4]
    6988:	885b      	ldrh	r3, [r3, #2]
    698a:	b29b      	uxth	r3, r3
    698c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6990:	2b00      	cmp	r3, #0
    6992:	d002      	beq.n	699a <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    6994:	f06f 0305 	mvn.w	r3, #5
    6998:	e04c      	b.n	6a34 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    699a:	683b      	ldr	r3, [r7, #0]
    699c:	885b      	ldrh	r3, [r3, #2]
    699e:	b29b      	uxth	r3, r3
    69a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    69a4:	b29a      	uxth	r2, r3
    69a6:	683b      	ldr	r3, [r7, #0]
    69a8:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    69aa:	687b      	ldr	r3, [r7, #4]
    69ac:	683a      	ldr	r2, [r7, #0]
    69ae:	ca07      	ldmia	r2, {r0, r1, r2}
    69b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    69b4:	6938      	ldr	r0, [r7, #16]
    69b6:	4b23      	ldr	r3, [pc, #140]	; (6a44 <_i2c_m_sync_transfer+0x118>)
    69b8:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    69ba:	6878      	ldr	r0, [r7, #4]
    69bc:	4b22      	ldr	r3, [pc, #136]	; (6a48 <_i2c_m_sync_transfer+0x11c>)
    69be:	4798      	blx	r3
    69c0:	6178      	str	r0, [r7, #20]

	if (ret) {
    69c2:	697b      	ldr	r3, [r7, #20]
    69c4:	2b00      	cmp	r3, #0
    69c6:	d02d      	beq.n	6a24 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    69c8:	687b      	ldr	r3, [r7, #4]
    69ca:	885b      	ldrh	r3, [r3, #2]
    69cc:	b29b      	uxth	r3, r3
    69ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    69d2:	b29a      	uxth	r2, r3
    69d4:	687b      	ldr	r3, [r7, #4]
    69d6:	805a      	strh	r2, [r3, #2]

		return ret;
    69d8:	697b      	ldr	r3, [r7, #20]
    69da:	e02b      	b.n	6a34 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    69dc:	f107 030c 	add.w	r3, r7, #12
    69e0:	4619      	mov	r1, r3
    69e2:	6878      	ldr	r0, [r7, #4]
    69e4:	4b19      	ldr	r3, [pc, #100]	; (6a4c <_i2c_m_sync_transfer+0x120>)
    69e6:	4798      	blx	r3
    69e8:	6178      	str	r0, [r7, #20]

		if (ret) {
    69ea:	697b      	ldr	r3, [r7, #20]
    69ec:	2b00      	cmp	r3, #0
    69ee:	d012      	beq.n	6a16 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    69f0:	683b      	ldr	r3, [r7, #0]
    69f2:	885b      	ldrh	r3, [r3, #2]
    69f4:	b29b      	uxth	r3, r3
    69f6:	b21b      	sxth	r3, r3
    69f8:	2b00      	cmp	r3, #0
    69fa:	da02      	bge.n	6a02 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    69fc:	6938      	ldr	r0, [r7, #16]
    69fe:	4b14      	ldr	r3, [pc, #80]	; (6a50 <_i2c_m_sync_transfer+0x124>)
    6a00:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6a02:	687b      	ldr	r3, [r7, #4]
    6a04:	885b      	ldrh	r3, [r3, #2]
    6a06:	b29b      	uxth	r3, r3
    6a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6a0c:	b29a      	uxth	r2, r3
    6a0e:	687b      	ldr	r3, [r7, #4]
    6a10:	805a      	strh	r2, [r3, #2]

			return ret;
    6a12:	697b      	ldr	r3, [r7, #20]
    6a14:	e00e      	b.n	6a34 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6a16:	68fb      	ldr	r3, [r7, #12]
    6a18:	687a      	ldr	r2, [r7, #4]
    6a1a:	4619      	mov	r1, r3
    6a1c:	6938      	ldr	r0, [r7, #16]
    6a1e:	4b0d      	ldr	r3, [pc, #52]	; (6a54 <_i2c_m_sync_transfer+0x128>)
    6a20:	4798      	blx	r3
    6a22:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6a24:	687b      	ldr	r3, [r7, #4]
    6a26:	885b      	ldrh	r3, [r3, #2]
    6a28:	b29b      	uxth	r3, r3
    6a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6a2e:	2b00      	cmp	r3, #0
    6a30:	d1d4      	bne.n	69dc <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    6a32:	697b      	ldr	r3, [r7, #20]
}
    6a34:	4618      	mov	r0, r3
    6a36:	3718      	adds	r7, #24
    6a38:	46bd      	mov	sp, r7
    6a3a:	bd80      	pop	{r7, pc}
    6a3c:	0000f054 	.word	0x0000f054
    6a40:	000038b5 	.word	0x000038b5
    6a44:	00006099 	.word	0x00006099
    6a48:	0000680d 	.word	0x0000680d
    6a4c:	000067b1 	.word	0x000067b1
    6a50:	00006481 	.word	0x00006481
    6a54:	0000649d 	.word	0x0000649d

00006a58 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    6a58:	b580      	push	{r7, lr}
    6a5a:	b084      	sub	sp, #16
    6a5c:	af00      	add	r7, sp, #0
    6a5e:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    6a60:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6a64:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    6a66:	2304      	movs	r3, #4
    6a68:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    6a6a:	687b      	ldr	r3, [r7, #4]
    6a6c:	2b00      	cmp	r3, #0
    6a6e:	bf14      	ite	ne
    6a70:	2301      	movne	r3, #1
    6a72:	2300      	moveq	r3, #0
    6a74:	b2db      	uxtb	r3, r3
    6a76:	f240 6205 	movw	r2, #1541	; 0x605
    6a7a:	4915      	ldr	r1, [pc, #84]	; (6ad0 <_i2c_m_enable_implementation+0x78>)
    6a7c:	4618      	mov	r0, r3
    6a7e:	4b15      	ldr	r3, [pc, #84]	; (6ad4 <_i2c_m_enable_implementation+0x7c>)
    6a80:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    6a82:	6878      	ldr	r0, [r7, #4]
    6a84:	4b14      	ldr	r3, [pc, #80]	; (6ad8 <_i2c_m_enable_implementation+0x80>)
    6a86:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6a88:	e016      	b.n	6ab8 <_i2c_m_enable_implementation+0x60>
		timeout--;
    6a8a:	68fb      	ldr	r3, [r7, #12]
    6a8c:	3b01      	subs	r3, #1
    6a8e:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    6a90:	68fb      	ldr	r3, [r7, #12]
    6a92:	2b00      	cmp	r3, #0
    6a94:	dc10      	bgt.n	6ab8 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    6a96:	68bb      	ldr	r3, [r7, #8]
    6a98:	3b01      	subs	r3, #1
    6a9a:	60bb      	str	r3, [r7, #8]
    6a9c:	68bb      	ldr	r3, [r7, #8]
    6a9e:	2b00      	cmp	r3, #0
    6aa0:	d007      	beq.n	6ab2 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    6aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6aa6:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    6aa8:	2110      	movs	r1, #16
    6aaa:	6878      	ldr	r0, [r7, #4]
    6aac:	4b0b      	ldr	r3, [pc, #44]	; (6adc <_i2c_m_enable_implementation+0x84>)
    6aae:	4798      	blx	r3
    6ab0:	e002      	b.n	6ab8 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    6ab2:	f06f 0305 	mvn.w	r3, #5
    6ab6:	e006      	b.n	6ac6 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6ab8:	6878      	ldr	r0, [r7, #4]
    6aba:	4b09      	ldr	r3, [pc, #36]	; (6ae0 <_i2c_m_enable_implementation+0x88>)
    6abc:	4798      	blx	r3
    6abe:	4603      	mov	r3, r0
    6ac0:	2b01      	cmp	r3, #1
    6ac2:	d1e2      	bne.n	6a8a <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    6ac4:	2300      	movs	r3, #0
}
    6ac6:	4618      	mov	r0, r3
    6ac8:	3710      	adds	r7, #16
    6aca:	46bd      	mov	sp, r7
    6acc:	bd80      	pop	{r7, pc}
    6ace:	bf00      	nop
    6ad0:	0000f054 	.word	0x0000f054
    6ad4:	000038b5 	.word	0x000038b5
    6ad8:	00005f11 	.word	0x00005f11
    6adc:	00006395 	.word	0x00006395
    6ae0:	00006345 	.word	0x00006345

00006ae4 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6ae4:	b580      	push	{r7, lr}
    6ae6:	b084      	sub	sp, #16
    6ae8:	af00      	add	r7, sp, #0
    6aea:	6078      	str	r0, [r7, #4]
    6aec:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    6aee:	6838      	ldr	r0, [r7, #0]
    6af0:	4b42      	ldr	r3, [pc, #264]	; (6bfc <_i2c_m_sync_init_impl+0x118>)
    6af2:	4798      	blx	r3
    6af4:	4603      	mov	r3, r0
    6af6:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6af8:	2101      	movs	r1, #1
    6afa:	6838      	ldr	r0, [r7, #0]
    6afc:	4b40      	ldr	r3, [pc, #256]	; (6c00 <_i2c_m_sync_init_impl+0x11c>)
    6afe:	4798      	blx	r3
    6b00:	4603      	mov	r3, r0
    6b02:	f083 0301 	eor.w	r3, r3, #1
    6b06:	b2db      	uxtb	r3, r3
    6b08:	2b00      	cmp	r3, #0
    6b0a:	d020      	beq.n	6b4e <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6b0c:	7bfa      	ldrb	r2, [r7, #15]
    6b0e:	493d      	ldr	r1, [pc, #244]	; (6c04 <_i2c_m_sync_init_impl+0x120>)
    6b10:	4613      	mov	r3, r2
    6b12:	005b      	lsls	r3, r3, #1
    6b14:	4413      	add	r3, r2
    6b16:	00db      	lsls	r3, r3, #3
    6b18:	440b      	add	r3, r1
    6b1a:	3304      	adds	r3, #4
    6b1c:	681b      	ldr	r3, [r3, #0]
    6b1e:	f003 031c 	and.w	r3, r3, #28
    6b22:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6b24:	2102      	movs	r1, #2
    6b26:	6838      	ldr	r0, [r7, #0]
    6b28:	4b37      	ldr	r3, [pc, #220]	; (6c08 <_i2c_m_sync_init_impl+0x124>)
    6b2a:	4798      	blx	r3
    6b2c:	4603      	mov	r3, r0
    6b2e:	2b00      	cmp	r3, #0
    6b30:	d006      	beq.n	6b40 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    6b32:	6838      	ldr	r0, [r7, #0]
    6b34:	4b35      	ldr	r3, [pc, #212]	; (6c0c <_i2c_m_sync_init_impl+0x128>)
    6b36:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    6b38:	2102      	movs	r1, #2
    6b3a:	6838      	ldr	r0, [r7, #0]
    6b3c:	4b34      	ldr	r3, [pc, #208]	; (6c10 <_i2c_m_sync_init_impl+0x12c>)
    6b3e:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6b40:	68bb      	ldr	r3, [r7, #8]
    6b42:	f043 0301 	orr.w	r3, r3, #1
    6b46:	4619      	mov	r1, r3
    6b48:	6838      	ldr	r0, [r7, #0]
    6b4a:	4b32      	ldr	r3, [pc, #200]	; (6c14 <_i2c_m_sync_init_impl+0x130>)
    6b4c:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    6b4e:	2101      	movs	r1, #1
    6b50:	6838      	ldr	r0, [r7, #0]
    6b52:	4b2f      	ldr	r3, [pc, #188]	; (6c10 <_i2c_m_sync_init_impl+0x12c>)
    6b54:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6b56:	7bfa      	ldrb	r2, [r7, #15]
    6b58:	492a      	ldr	r1, [pc, #168]	; (6c04 <_i2c_m_sync_init_impl+0x120>)
    6b5a:	4613      	mov	r3, r2
    6b5c:	005b      	lsls	r3, r3, #1
    6b5e:	4413      	add	r3, r2
    6b60:	00db      	lsls	r3, r3, #3
    6b62:	440b      	add	r3, r1
    6b64:	3304      	adds	r3, #4
    6b66:	681b      	ldr	r3, [r3, #0]
    6b68:	4619      	mov	r1, r3
    6b6a:	6838      	ldr	r0, [r7, #0]
    6b6c:	4b29      	ldr	r3, [pc, #164]	; (6c14 <_i2c_m_sync_init_impl+0x130>)
    6b6e:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6b70:	7bfa      	ldrb	r2, [r7, #15]
    6b72:	4924      	ldr	r1, [pc, #144]	; (6c04 <_i2c_m_sync_init_impl+0x120>)
    6b74:	4613      	mov	r3, r2
    6b76:	005b      	lsls	r3, r3, #1
    6b78:	4413      	add	r3, r2
    6b7a:	00db      	lsls	r3, r3, #3
    6b7c:	440b      	add	r3, r1
    6b7e:	3308      	adds	r3, #8
    6b80:	681b      	ldr	r3, [r3, #0]
    6b82:	4619      	mov	r1, r3
    6b84:	6838      	ldr	r0, [r7, #0]
    6b86:	4b24      	ldr	r3, [pc, #144]	; (6c18 <_i2c_m_sync_init_impl+0x134>)
    6b88:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6b8a:	7bfa      	ldrb	r2, [r7, #15]
    6b8c:	491d      	ldr	r1, [pc, #116]	; (6c04 <_i2c_m_sync_init_impl+0x120>)
    6b8e:	4613      	mov	r3, r2
    6b90:	005b      	lsls	r3, r3, #1
    6b92:	4413      	add	r3, r2
    6b94:	00db      	lsls	r3, r3, #3
    6b96:	440b      	add	r3, r1
    6b98:	330c      	adds	r3, #12
    6b9a:	681b      	ldr	r3, [r3, #0]
    6b9c:	4619      	mov	r1, r3
    6b9e:	6838      	ldr	r0, [r7, #0]
    6ba0:	4b1e      	ldr	r3, [pc, #120]	; (6c1c <_i2c_m_sync_init_impl+0x138>)
    6ba2:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6ba4:	7bfa      	ldrb	r2, [r7, #15]
    6ba6:	4917      	ldr	r1, [pc, #92]	; (6c04 <_i2c_m_sync_init_impl+0x120>)
    6ba8:	4613      	mov	r3, r2
    6baa:	005b      	lsls	r3, r3, #1
    6bac:	4413      	add	r3, r2
    6bae:	00db      	lsls	r3, r3, #3
    6bb0:	440b      	add	r3, r1
    6bb2:	3304      	adds	r3, #4
    6bb4:	681b      	ldr	r3, [r3, #0]
    6bb6:	0e1b      	lsrs	r3, r3, #24
    6bb8:	b29b      	uxth	r3, r3
    6bba:	f003 0303 	and.w	r3, r3, #3
    6bbe:	b29a      	uxth	r2, r3
    6bc0:	687b      	ldr	r3, [r7, #4]
    6bc2:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6bc4:	687b      	ldr	r3, [r7, #4]
    6bc6:	899b      	ldrh	r3, [r3, #12]
    6bc8:	2b01      	cmp	r3, #1
    6bca:	bf8c      	ite	hi
    6bcc:	2301      	movhi	r3, #1
    6bce:	2300      	movls	r3, #0
    6bd0:	b2db      	uxtb	r3, r3
    6bd2:	4619      	mov	r1, r3
    6bd4:	6838      	ldr	r0, [r7, #0]
    6bd6:	4b12      	ldr	r3, [pc, #72]	; (6c20 <_i2c_m_sync_init_impl+0x13c>)
    6bd8:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    6bda:	7bfa      	ldrb	r2, [r7, #15]
    6bdc:	4909      	ldr	r1, [pc, #36]	; (6c04 <_i2c_m_sync_init_impl+0x120>)
    6bde:	4613      	mov	r3, r2
    6be0:	005b      	lsls	r3, r3, #1
    6be2:	4413      	add	r3, r2
    6be4:	00db      	lsls	r3, r3, #3
    6be6:	440b      	add	r3, r1
    6be8:	3312      	adds	r3, #18
    6bea:	881a      	ldrh	r2, [r3, #0]
    6bec:	687b      	ldr	r3, [r7, #4]
    6bee:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6bf0:	2300      	movs	r3, #0
}
    6bf2:	4618      	mov	r0, r3
    6bf4:	3710      	adds	r7, #16
    6bf6:	46bd      	mov	sp, r7
    6bf8:	bd80      	pop	{r7, pc}
    6bfa:	bf00      	nop
    6bfc:	00006419 	.word	0x00006419
    6c00:	00005ded 	.word	0x00005ded
    6c04:	20000018 	.word	0x20000018
    6c08:	00005f91 	.word	0x00005f91
    6c0c:	00005f39 	.word	0x00005f39
    6c10:	00005dc9 	.word	0x00005dc9
    6c14:	00005fc1 	.word	0x00005fc1
    6c18:	00006169 	.word	0x00006169
    6c1c:	000061b1 	.word	0x000061b1
    6c20:	000061ed 	.word	0x000061ed

00006c24 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6c24:	b580      	push	{r7, lr}
    6c26:	b082      	sub	sp, #8
    6c28:	af00      	add	r7, sp, #0
    6c2a:	6078      	str	r0, [r7, #4]
    6c2c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6c2e:	687b      	ldr	r3, [r7, #4]
    6c30:	2b00      	cmp	r3, #0
    6c32:	d004      	beq.n	6c3e <_spi_load_regs_master+0x1a>
    6c34:	683b      	ldr	r3, [r7, #0]
    6c36:	2b00      	cmp	r3, #0
    6c38:	d001      	beq.n	6c3e <_spi_load_regs_master+0x1a>
    6c3a:	2301      	movs	r3, #1
    6c3c:	e000      	b.n	6c40 <_spi_load_regs_master+0x1c>
    6c3e:	2300      	movs	r3, #0
    6c40:	f003 0301 	and.w	r3, r3, #1
    6c44:	b2db      	uxtb	r3, r3
    6c46:	f640 1209 	movw	r2, #2313	; 0x909
    6c4a:	4915      	ldr	r1, [pc, #84]	; (6ca0 <_spi_load_regs_master+0x7c>)
    6c4c:	4618      	mov	r0, r3
    6c4e:	4b15      	ldr	r3, [pc, #84]	; (6ca4 <_spi_load_regs_master+0x80>)
    6c50:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6c52:	683b      	ldr	r3, [r7, #0]
    6c54:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6c56:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6c5a:	f023 0301 	bic.w	r3, r3, #1
    6c5e:	4619      	mov	r1, r3
    6c60:	6878      	ldr	r0, [r7, #4]
    6c62:	4b11      	ldr	r3, [pc, #68]	; (6ca8 <_spi_load_regs_master+0x84>)
    6c64:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    6c66:	683b      	ldr	r3, [r7, #0]
    6c68:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    6c6a:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    6c6e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    6c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6c76:	4619      	mov	r1, r3
    6c78:	6878      	ldr	r0, [r7, #4]
    6c7a:	4b0c      	ldr	r3, [pc, #48]	; (6cac <_spi_load_regs_master+0x88>)
    6c7c:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    6c7e:	683b      	ldr	r3, [r7, #0]
    6c80:	7b1b      	ldrb	r3, [r3, #12]
    6c82:	4619      	mov	r1, r3
    6c84:	6878      	ldr	r0, [r7, #4]
    6c86:	4b0a      	ldr	r3, [pc, #40]	; (6cb0 <_spi_load_regs_master+0x8c>)
    6c88:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6c8a:	683b      	ldr	r3, [r7, #0]
    6c8c:	7b5b      	ldrb	r3, [r3, #13]
    6c8e:	4619      	mov	r1, r3
    6c90:	6878      	ldr	r0, [r7, #4]
    6c92:	4b08      	ldr	r3, [pc, #32]	; (6cb4 <_spi_load_regs_master+0x90>)
    6c94:	4798      	blx	r3
}
    6c96:	bf00      	nop
    6c98:	3708      	adds	r7, #8
    6c9a:	46bd      	mov	sp, r7
    6c9c:	bd80      	pop	{r7, pc}
    6c9e:	bf00      	nop
    6ca0:	0000f054 	.word	0x0000f054
    6ca4:	000038b5 	.word	0x000038b5
    6ca8:	00006075 	.word	0x00006075
    6cac:	0000618d 	.word	0x0000618d
    6cb0:	000061cd 	.word	0x000061cd
    6cb4:	00006305 	.word	0x00006305

00006cb8 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6cb8:	b580      	push	{r7, lr}
    6cba:	b082      	sub	sp, #8
    6cbc:	af00      	add	r7, sp, #0
    6cbe:	6078      	str	r0, [r7, #4]
    6cc0:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6cc2:	687b      	ldr	r3, [r7, #4]
    6cc4:	2b00      	cmp	r3, #0
    6cc6:	d004      	beq.n	6cd2 <_spi_load_regs_slave+0x1a>
    6cc8:	683b      	ldr	r3, [r7, #0]
    6cca:	2b00      	cmp	r3, #0
    6ccc:	d001      	beq.n	6cd2 <_spi_load_regs_slave+0x1a>
    6cce:	2301      	movs	r3, #1
    6cd0:	e000      	b.n	6cd4 <_spi_load_regs_slave+0x1c>
    6cd2:	2300      	movs	r3, #0
    6cd4:	f003 0301 	and.w	r3, r3, #1
    6cd8:	b2db      	uxtb	r3, r3
    6cda:	f640 121d 	movw	r2, #2333	; 0x91d
    6cde:	491a      	ldr	r1, [pc, #104]	; (6d48 <_spi_load_regs_slave+0x90>)
    6ce0:	4618      	mov	r0, r3
    6ce2:	4b1a      	ldr	r3, [pc, #104]	; (6d4c <_spi_load_regs_slave+0x94>)
    6ce4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6ce6:	683b      	ldr	r3, [r7, #0]
    6ce8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6cea:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6cee:	f023 0301 	bic.w	r3, r3, #1
    6cf2:	4619      	mov	r1, r3
    6cf4:	6878      	ldr	r0, [r7, #4]
    6cf6:	4b16      	ldr	r3, [pc, #88]	; (6d50 <_spi_load_regs_slave+0x98>)
    6cf8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6cfa:	683b      	ldr	r3, [r7, #0]
    6cfc:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6cfe:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6d02:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6d0a:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    6d0e:	4619      	mov	r1, r3
    6d10:	6878      	ldr	r0, [r7, #4]
    6d12:	4b10      	ldr	r3, [pc, #64]	; (6d54 <_spi_load_regs_slave+0x9c>)
    6d14:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6d16:	683b      	ldr	r3, [r7, #0]
    6d18:	689b      	ldr	r3, [r3, #8]
    6d1a:	4619      	mov	r1, r3
    6d1c:	6878      	ldr	r0, [r7, #4]
    6d1e:	4b0e      	ldr	r3, [pc, #56]	; (6d58 <_spi_load_regs_slave+0xa0>)
    6d20:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6d22:	683b      	ldr	r3, [r7, #0]
    6d24:	7b5b      	ldrb	r3, [r3, #13]
    6d26:	4619      	mov	r1, r3
    6d28:	6878      	ldr	r0, [r7, #4]
    6d2a:	4b0c      	ldr	r3, [pc, #48]	; (6d5c <_spi_load_regs_slave+0xa4>)
    6d2c:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6d2e:	bf00      	nop
    6d30:	f04f 31ff 	mov.w	r1, #4294967295
    6d34:	6878      	ldr	r0, [r7, #4]
    6d36:	4b0a      	ldr	r3, [pc, #40]	; (6d60 <_spi_load_regs_slave+0xa8>)
    6d38:	4798      	blx	r3
    6d3a:	4603      	mov	r3, r0
    6d3c:	2b00      	cmp	r3, #0
    6d3e:	d1f7      	bne.n	6d30 <_spi_load_regs_slave+0x78>
		;
}
    6d40:	bf00      	nop
    6d42:	3708      	adds	r7, #8
    6d44:	46bd      	mov	sp, r7
    6d46:	bd80      	pop	{r7, pc}
    6d48:	0000f054 	.word	0x0000f054
    6d4c:	000038b5 	.word	0x000038b5
    6d50:	00006075 	.word	0x00006075
    6d54:	0000618d 	.word	0x0000618d
    6d58:	00006271 	.word	0x00006271
    6d5c:	00006305 	.word	0x00006305
    6d60:	00005e39 	.word	0x00005e39

00006d64 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    6d64:	b580      	push	{r7, lr}
    6d66:	b084      	sub	sp, #16
    6d68:	af00      	add	r7, sp, #0
    6d6a:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6d6c:	687b      	ldr	r3, [r7, #4]
    6d6e:	4618      	mov	r0, r3
    6d70:	4b11      	ldr	r3, [pc, #68]	; (6db8 <_spi_get_regs+0x54>)
    6d72:	4798      	blx	r3
    6d74:	4603      	mov	r3, r0
    6d76:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6d78:	2300      	movs	r3, #0
    6d7a:	73fb      	strb	r3, [r7, #15]
    6d7c:	e014      	b.n	6da8 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    6d7e:	7bfa      	ldrb	r2, [r7, #15]
    6d80:	490e      	ldr	r1, [pc, #56]	; (6dbc <_spi_get_regs+0x58>)
    6d82:	4613      	mov	r3, r2
    6d84:	011b      	lsls	r3, r3, #4
    6d86:	4413      	add	r3, r2
    6d88:	440b      	add	r3, r1
    6d8a:	3310      	adds	r3, #16
    6d8c:	781b      	ldrb	r3, [r3, #0]
    6d8e:	7bba      	ldrb	r2, [r7, #14]
    6d90:	429a      	cmp	r2, r3
    6d92:	d106      	bne.n	6da2 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6d94:	7bfa      	ldrb	r2, [r7, #15]
    6d96:	4613      	mov	r3, r2
    6d98:	011b      	lsls	r3, r3, #4
    6d9a:	4413      	add	r3, r2
    6d9c:	4a07      	ldr	r2, [pc, #28]	; (6dbc <_spi_get_regs+0x58>)
    6d9e:	4413      	add	r3, r2
    6da0:	e006      	b.n	6db0 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6da2:	7bfb      	ldrb	r3, [r7, #15]
    6da4:	3301      	adds	r3, #1
    6da6:	73fb      	strb	r3, [r7, #15]
    6da8:	7bfb      	ldrb	r3, [r7, #15]
    6daa:	2b01      	cmp	r3, #1
    6dac:	d9e7      	bls.n	6d7e <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    6dae:	2300      	movs	r3, #0
}
    6db0:	4618      	mov	r0, r3
    6db2:	3710      	adds	r7, #16
    6db4:	46bd      	mov	sp, r7
    6db6:	bd80      	pop	{r7, pc}
    6db8:	000063bd 	.word	0x000063bd
    6dbc:	0000f090 	.word	0x0000f090

00006dc0 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    6dc0:	b580      	push	{r7, lr}
    6dc2:	b084      	sub	sp, #16
    6dc4:	af00      	add	r7, sp, #0
    6dc6:	6078      	str	r0, [r7, #4]
    6dc8:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    6dca:	683b      	ldr	r3, [r7, #0]
    6dcc:	4618      	mov	r0, r3
    6dce:	4b35      	ldr	r3, [pc, #212]	; (6ea4 <_spi_m_sync_init+0xe4>)
    6dd0:	4798      	blx	r3
    6dd2:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    6dd4:	687b      	ldr	r3, [r7, #4]
    6dd6:	2b00      	cmp	r3, #0
    6dd8:	d004      	beq.n	6de4 <_spi_m_sync_init+0x24>
    6dda:	683b      	ldr	r3, [r7, #0]
    6ddc:	2b00      	cmp	r3, #0
    6dde:	d001      	beq.n	6de4 <_spi_m_sync_init+0x24>
    6de0:	2301      	movs	r3, #1
    6de2:	e000      	b.n	6de6 <_spi_m_sync_init+0x26>
    6de4:	2300      	movs	r3, #0
    6de6:	f003 0301 	and.w	r3, r3, #1
    6dea:	b2db      	uxtb	r3, r3
    6dec:	f640 123f 	movw	r2, #2367	; 0x93f
    6df0:	492d      	ldr	r1, [pc, #180]	; (6ea8 <_spi_m_sync_init+0xe8>)
    6df2:	4618      	mov	r0, r3
    6df4:	4b2d      	ldr	r3, [pc, #180]	; (6eac <_spi_m_sync_init+0xec>)
    6df6:	4798      	blx	r3

	if (regs == NULL) {
    6df8:	68fb      	ldr	r3, [r7, #12]
    6dfa:	2b00      	cmp	r3, #0
    6dfc:	d102      	bne.n	6e04 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    6dfe:	f06f 030c 	mvn.w	r3, #12
    6e02:	e04a      	b.n	6e9a <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6e04:	2101      	movs	r1, #1
    6e06:	6838      	ldr	r0, [r7, #0]
    6e08:	4b29      	ldr	r3, [pc, #164]	; (6eb0 <_spi_m_sync_init+0xf0>)
    6e0a:	4798      	blx	r3
    6e0c:	4603      	mov	r3, r0
    6e0e:	f083 0301 	eor.w	r3, r3, #1
    6e12:	b2db      	uxtb	r3, r3
    6e14:	2b00      	cmp	r3, #0
    6e16:	d019      	beq.n	6e4c <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6e18:	68fb      	ldr	r3, [r7, #12]
    6e1a:	681b      	ldr	r3, [r3, #0]
    6e1c:	f003 031c 	and.w	r3, r3, #28
    6e20:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6e22:	2102      	movs	r1, #2
    6e24:	6838      	ldr	r0, [r7, #0]
    6e26:	4b23      	ldr	r3, [pc, #140]	; (6eb4 <_spi_m_sync_init+0xf4>)
    6e28:	4798      	blx	r3
    6e2a:	4603      	mov	r3, r0
    6e2c:	2b00      	cmp	r3, #0
    6e2e:	d006      	beq.n	6e3e <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6e30:	6838      	ldr	r0, [r7, #0]
    6e32:	4b21      	ldr	r3, [pc, #132]	; (6eb8 <_spi_m_sync_init+0xf8>)
    6e34:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    6e36:	2102      	movs	r1, #2
    6e38:	6838      	ldr	r0, [r7, #0]
    6e3a:	4b20      	ldr	r3, [pc, #128]	; (6ebc <_spi_m_sync_init+0xfc>)
    6e3c:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    6e3e:	68bb      	ldr	r3, [r7, #8]
    6e40:	f043 0301 	orr.w	r3, r3, #1
    6e44:	4619      	mov	r1, r3
    6e46:	6838      	ldr	r0, [r7, #0]
    6e48:	4b1d      	ldr	r3, [pc, #116]	; (6ec0 <_spi_m_sync_init+0x100>)
    6e4a:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    6e4c:	2101      	movs	r1, #1
    6e4e:	6838      	ldr	r0, [r7, #0]
    6e50:	4b1a      	ldr	r3, [pc, #104]	; (6ebc <_spi_m_sync_init+0xfc>)
    6e52:	4798      	blx	r3

	dev->prvt = hw;
    6e54:	687b      	ldr	r3, [r7, #4]
    6e56:	683a      	ldr	r2, [r7, #0]
    6e58:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    6e5a:	68fb      	ldr	r3, [r7, #12]
    6e5c:	681b      	ldr	r3, [r3, #0]
    6e5e:	f003 031c 	and.w	r3, r3, #28
    6e62:	2b08      	cmp	r3, #8
    6e64:	d104      	bne.n	6e70 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    6e66:	68f9      	ldr	r1, [r7, #12]
    6e68:	6838      	ldr	r0, [r7, #0]
    6e6a:	4b16      	ldr	r3, [pc, #88]	; (6ec4 <_spi_m_sync_init+0x104>)
    6e6c:	4798      	blx	r3
    6e6e:	e003      	b.n	6e78 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    6e70:	68f9      	ldr	r1, [r7, #12]
    6e72:	6838      	ldr	r0, [r7, #0]
    6e74:	4b14      	ldr	r3, [pc, #80]	; (6ec8 <_spi_m_sync_init+0x108>)
    6e76:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6e78:	68fb      	ldr	r3, [r7, #12]
    6e7a:	685b      	ldr	r3, [r3, #4]
    6e7c:	f003 0307 	and.w	r3, r3, #7
    6e80:	2b00      	cmp	r3, #0
    6e82:	d101      	bne.n	6e88 <_spi_m_sync_init+0xc8>
    6e84:	2201      	movs	r2, #1
    6e86:	e000      	b.n	6e8a <_spi_m_sync_init+0xca>
    6e88:	2202      	movs	r2, #2
    6e8a:	687b      	ldr	r3, [r7, #4]
    6e8c:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    6e8e:	68fb      	ldr	r3, [r7, #12]
    6e90:	89db      	ldrh	r3, [r3, #14]
    6e92:	b29a      	uxth	r2, r3
    6e94:	687b      	ldr	r3, [r7, #4]
    6e96:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    6e98:	2300      	movs	r3, #0
}
    6e9a:	4618      	mov	r0, r3
    6e9c:	3710      	adds	r7, #16
    6e9e:	46bd      	mov	sp, r7
    6ea0:	bd80      	pop	{r7, pc}
    6ea2:	bf00      	nop
    6ea4:	00006d65 	.word	0x00006d65
    6ea8:	0000f054 	.word	0x0000f054
    6eac:	000038b5 	.word	0x000038b5
    6eb0:	00005e39 	.word	0x00005e39
    6eb4:	00006045 	.word	0x00006045
    6eb8:	0000601d 	.word	0x0000601d
    6ebc:	00005e15 	.word	0x00005e15
    6ec0:	00006075 	.word	0x00006075
    6ec4:	00006cb9 	.word	0x00006cb9
    6ec8:	00006c25 	.word	0x00006c25

00006ecc <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    6ecc:	b580      	push	{r7, lr}
    6ece:	b082      	sub	sp, #8
    6ed0:	af00      	add	r7, sp, #0
    6ed2:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    6ed4:	bf00      	nop
    6ed6:	2103      	movs	r1, #3
    6ed8:	6878      	ldr	r0, [r7, #4]
    6eda:	4b06      	ldr	r3, [pc, #24]	; (6ef4 <_spi_wait_bus_idle+0x28>)
    6edc:	4798      	blx	r3
    6ede:	4603      	mov	r3, r0
    6ee0:	2b00      	cmp	r3, #0
    6ee2:	d0f8      	beq.n	6ed6 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    6ee4:	2103      	movs	r1, #3
    6ee6:	6878      	ldr	r0, [r7, #4]
    6ee8:	4b03      	ldr	r3, [pc, #12]	; (6ef8 <_spi_wait_bus_idle+0x2c>)
    6eea:	4798      	blx	r3
}
    6eec:	bf00      	nop
    6eee:	3708      	adds	r7, #8
    6ef0:	46bd      	mov	sp, r7
    6ef2:	bd80      	pop	{r7, pc}
    6ef4:	00005eaf 	.word	0x00005eaf
    6ef8:	00005ef1 	.word	0x00005ef1

00006efc <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    6efc:	b580      	push	{r7, lr}
    6efe:	b086      	sub	sp, #24
    6f00:	af00      	add	r7, sp, #0
    6f02:	60f8      	str	r0, [r7, #12]
    6f04:	60b9      	str	r1, [r7, #8]
    6f06:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    6f08:	68bb      	ldr	r3, [r7, #8]
    6f0a:	f003 0304 	and.w	r3, r3, #4
    6f0e:	2b00      	cmp	r3, #0
    6f10:	d101      	bne.n	6f16 <_spi_rx_check_and_receive+0x1a>
		return false;
    6f12:	2300      	movs	r3, #0
    6f14:	e022      	b.n	6f5c <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    6f16:	68f8      	ldr	r0, [r7, #12]
    6f18:	4b12      	ldr	r3, [pc, #72]	; (6f64 <_spi_rx_check_and_receive+0x68>)
    6f1a:	4798      	blx	r3
    6f1c:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    6f1e:	687b      	ldr	r3, [r7, #4]
    6f20:	685b      	ldr	r3, [r3, #4]
    6f22:	2b00      	cmp	r3, #0
    6f24:	d014      	beq.n	6f50 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    6f26:	687b      	ldr	r3, [r7, #4]
    6f28:	685b      	ldr	r3, [r3, #4]
    6f2a:	1c59      	adds	r1, r3, #1
    6f2c:	687a      	ldr	r2, [r7, #4]
    6f2e:	6051      	str	r1, [r2, #4]
    6f30:	697a      	ldr	r2, [r7, #20]
    6f32:	b2d2      	uxtb	r2, r2
    6f34:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    6f36:	687b      	ldr	r3, [r7, #4]
    6f38:	7c1b      	ldrb	r3, [r3, #16]
    6f3a:	2b01      	cmp	r3, #1
    6f3c:	d908      	bls.n	6f50 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    6f3e:	687b      	ldr	r3, [r7, #4]
    6f40:	685b      	ldr	r3, [r3, #4]
    6f42:	1c59      	adds	r1, r3, #1
    6f44:	687a      	ldr	r2, [r7, #4]
    6f46:	6051      	str	r1, [r2, #4]
    6f48:	697a      	ldr	r2, [r7, #20]
    6f4a:	0a12      	lsrs	r2, r2, #8
    6f4c:	b2d2      	uxtb	r2, r2
    6f4e:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    6f50:	687b      	ldr	r3, [r7, #4]
    6f52:	68db      	ldr	r3, [r3, #12]
    6f54:	1c5a      	adds	r2, r3, #1
    6f56:	687b      	ldr	r3, [r7, #4]
    6f58:	60da      	str	r2, [r3, #12]

	return true;
    6f5a:	2301      	movs	r3, #1
}
    6f5c:	4618      	mov	r0, r3
    6f5e:	3718      	adds	r7, #24
    6f60:	46bd      	mov	sp, r7
    6f62:	bd80      	pop	{r7, pc}
    6f64:	000062ed 	.word	0x000062ed

00006f68 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    6f68:	b580      	push	{r7, lr}
    6f6a:	b086      	sub	sp, #24
    6f6c:	af00      	add	r7, sp, #0
    6f6e:	60f8      	str	r0, [r7, #12]
    6f70:	60b9      	str	r1, [r7, #8]
    6f72:	607a      	str	r2, [r7, #4]
    6f74:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    6f76:	68bb      	ldr	r3, [r7, #8]
    6f78:	f003 0301 	and.w	r3, r3, #1
    6f7c:	2b00      	cmp	r3, #0
    6f7e:	d028      	beq.n	6fd2 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    6f80:	687b      	ldr	r3, [r7, #4]
    6f82:	681b      	ldr	r3, [r3, #0]
    6f84:	2b00      	cmp	r3, #0
    6f86:	d018      	beq.n	6fba <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    6f88:	687b      	ldr	r3, [r7, #4]
    6f8a:	681b      	ldr	r3, [r3, #0]
    6f8c:	1c59      	adds	r1, r3, #1
    6f8e:	687a      	ldr	r2, [r7, #4]
    6f90:	6011      	str	r1, [r2, #0]
    6f92:	781b      	ldrb	r3, [r3, #0]
    6f94:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    6f96:	687b      	ldr	r3, [r7, #4]
    6f98:	7c1b      	ldrb	r3, [r3, #16]
    6f9a:	2b01      	cmp	r3, #1
    6f9c:	d90f      	bls.n	6fbe <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    6f9e:	687b      	ldr	r3, [r7, #4]
    6fa0:	681b      	ldr	r3, [r3, #0]
    6fa2:	781b      	ldrb	r3, [r3, #0]
    6fa4:	021b      	lsls	r3, r3, #8
    6fa6:	461a      	mov	r2, r3
    6fa8:	697b      	ldr	r3, [r7, #20]
    6faa:	4313      	orrs	r3, r2
    6fac:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    6fae:	687b      	ldr	r3, [r7, #4]
    6fb0:	681b      	ldr	r3, [r3, #0]
    6fb2:	1c5a      	adds	r2, r3, #1
    6fb4:	687b      	ldr	r3, [r7, #4]
    6fb6:	601a      	str	r2, [r3, #0]
    6fb8:	e001      	b.n	6fbe <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    6fba:	887b      	ldrh	r3, [r7, #2]
    6fbc:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    6fbe:	687b      	ldr	r3, [r7, #4]
    6fc0:	689b      	ldr	r3, [r3, #8]
    6fc2:	1c5a      	adds	r2, r3, #1
    6fc4:	687b      	ldr	r3, [r7, #4]
    6fc6:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    6fc8:	6979      	ldr	r1, [r7, #20]
    6fca:	68f8      	ldr	r0, [r7, #12]
    6fcc:	4b03      	ldr	r3, [pc, #12]	; (6fdc <_spi_tx_check_and_send+0x74>)
    6fce:	4798      	blx	r3
    6fd0:	e000      	b.n	6fd4 <_spi_tx_check_and_send+0x6c>
		return;
    6fd2:	bf00      	nop
}
    6fd4:	3718      	adds	r7, #24
    6fd6:	46bd      	mov	sp, r7
    6fd8:	bd80      	pop	{r7, pc}
    6fda:	bf00      	nop
    6fdc:	000062d1 	.word	0x000062d1

00006fe0 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    6fe0:	b580      	push	{r7, lr}
    6fe2:	b082      	sub	sp, #8
    6fe4:	af00      	add	r7, sp, #0
    6fe6:	6078      	str	r0, [r7, #4]
    6fe8:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    6fea:	687b      	ldr	r3, [r7, #4]
    6fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6ff0:	2b00      	cmp	r3, #0
    6ff2:	d00b      	beq.n	700c <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    6ff4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6ff8:	6838      	ldr	r0, [r7, #0]
    6ffa:	4b07      	ldr	r3, [pc, #28]	; (7018 <_spi_err_check+0x38>)
    6ffc:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    6ffe:	2180      	movs	r1, #128	; 0x80
    7000:	6838      	ldr	r0, [r7, #0]
    7002:	4b06      	ldr	r3, [pc, #24]	; (701c <_spi_err_check+0x3c>)
    7004:	4798      	blx	r3
		return ERR_OVERFLOW;
    7006:	f06f 0312 	mvn.w	r3, #18
    700a:	e000      	b.n	700e <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    700c:	2300      	movs	r3, #0
}
    700e:	4618      	mov	r0, r3
    7010:	3708      	adds	r7, #8
    7012:	46bd      	mov	sp, r7
    7014:	bd80      	pop	{r7, pc}
    7016:	bf00      	nop
    7018:	00006325 	.word	0x00006325
    701c:	00005ef1 	.word	0x00005ef1

00007020 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    7020:	b590      	push	{r4, r7, lr}
    7022:	b08b      	sub	sp, #44	; 0x2c
    7024:	af00      	add	r7, sp, #0
    7026:	6078      	str	r0, [r7, #4]
    7028:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    702a:	687b      	ldr	r3, [r7, #4]
    702c:	681b      	ldr	r3, [r3, #0]
    702e:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    7030:	2300      	movs	r3, #0
    7032:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    7034:	683b      	ldr	r3, [r7, #0]
    7036:	681b      	ldr	r3, [r3, #0]
    7038:	60bb      	str	r3, [r7, #8]
    703a:	683b      	ldr	r3, [r7, #0]
    703c:	685b      	ldr	r3, [r3, #4]
    703e:	60fb      	str	r3, [r7, #12]
    7040:	2300      	movs	r3, #0
    7042:	613b      	str	r3, [r7, #16]
    7044:	2300      	movs	r3, #0
    7046:	617b      	str	r3, [r7, #20]
    7048:	687b      	ldr	r3, [r7, #4]
    704a:	791b      	ldrb	r3, [r3, #4]
    704c:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    704e:	687b      	ldr	r3, [r7, #4]
    7050:	2b00      	cmp	r3, #0
    7052:	d004      	beq.n	705e <_spi_m_sync_trans+0x3e>
    7054:	6a3b      	ldr	r3, [r7, #32]
    7056:	2b00      	cmp	r3, #0
    7058:	d001      	beq.n	705e <_spi_m_sync_trans+0x3e>
    705a:	2301      	movs	r3, #1
    705c:	e000      	b.n	7060 <_spi_m_sync_trans+0x40>
    705e:	2300      	movs	r3, #0
    7060:	f003 0301 	and.w	r3, r3, #1
    7064:	b2db      	uxtb	r3, r3
    7066:	f640 22a3 	movw	r2, #2723	; 0xaa3
    706a:	492b      	ldr	r1, [pc, #172]	; (7118 <_spi_m_sync_trans+0xf8>)
    706c:	4618      	mov	r0, r3
    706e:	4b2b      	ldr	r3, [pc, #172]	; (711c <_spi_m_sync_trans+0xfc>)
    7070:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    7072:	2107      	movs	r1, #7
    7074:	6a38      	ldr	r0, [r7, #32]
    7076:	4b2a      	ldr	r3, [pc, #168]	; (7120 <_spi_m_sync_trans+0x100>)
    7078:	4798      	blx	r3
    707a:	4603      	mov	r3, r0
    707c:	2b00      	cmp	r3, #0
    707e:	d002      	beq.n	7086 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    7080:	f06f 0303 	mvn.w	r3, #3
    7084:	e043      	b.n	710e <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    7086:	6a38      	ldr	r0, [r7, #32]
    7088:	4b26      	ldr	r3, [pc, #152]	; (7124 <_spi_m_sync_trans+0x104>)
    708a:	4798      	blx	r3
    708c:	4603      	mov	r3, r0
    708e:	f083 0301 	eor.w	r3, r3, #1
    7092:	b2db      	uxtb	r3, r3
    7094:	2b00      	cmp	r3, #0
    7096:	d002      	beq.n	709e <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    7098:	f06f 0313 	mvn.w	r3, #19
    709c:	e037      	b.n	710e <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    709e:	6a38      	ldr	r0, [r7, #32]
    70a0:	4b21      	ldr	r3, [pc, #132]	; (7128 <_spi_m_sync_trans+0x108>)
    70a2:	4798      	blx	r3
    70a4:	4603      	mov	r3, r0
    70a6:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    70a8:	f107 0308 	add.w	r3, r7, #8
    70ac:	461a      	mov	r2, r3
    70ae:	69f9      	ldr	r1, [r7, #28]
    70b0:	6a38      	ldr	r0, [r7, #32]
    70b2:	4b1e      	ldr	r3, [pc, #120]	; (712c <_spi_m_sync_trans+0x10c>)
    70b4:	4798      	blx	r3
    70b6:	4603      	mov	r3, r0
    70b8:	f083 0301 	eor.w	r3, r3, #1
    70bc:	b2db      	uxtb	r3, r3
    70be:	2b00      	cmp	r3, #0
    70c0:	d00b      	beq.n	70da <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    70c2:	697a      	ldr	r2, [r7, #20]
    70c4:	693b      	ldr	r3, [r7, #16]
    70c6:	429a      	cmp	r2, r3
    70c8:	d307      	bcc.n	70da <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    70ca:	687b      	ldr	r3, [r7, #4]
    70cc:	88db      	ldrh	r3, [r3, #6]
    70ce:	f107 0208 	add.w	r2, r7, #8
    70d2:	69f9      	ldr	r1, [r7, #28]
    70d4:	6a38      	ldr	r0, [r7, #32]
    70d6:	4c16      	ldr	r4, [pc, #88]	; (7130 <_spi_m_sync_trans+0x110>)
    70d8:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    70da:	6a39      	ldr	r1, [r7, #32]
    70dc:	69f8      	ldr	r0, [r7, #28]
    70de:	4b15      	ldr	r3, [pc, #84]	; (7134 <_spi_m_sync_trans+0x114>)
    70e0:	4798      	blx	r3
    70e2:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    70e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    70e6:	2b00      	cmp	r3, #0
    70e8:	db0c      	blt.n	7104 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    70ea:	693a      	ldr	r2, [r7, #16]
    70ec:	683b      	ldr	r3, [r7, #0]
    70ee:	689b      	ldr	r3, [r3, #8]
    70f0:	429a      	cmp	r2, r3
    70f2:	d3d4      	bcc.n	709e <_spi_m_sync_trans+0x7e>
    70f4:	697a      	ldr	r2, [r7, #20]
    70f6:	683b      	ldr	r3, [r7, #0]
    70f8:	689b      	ldr	r3, [r3, #8]
    70fa:	429a      	cmp	r2, r3
    70fc:	d3cf      	bcc.n	709e <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    70fe:	693b      	ldr	r3, [r7, #16]
    7100:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    7102:	e000      	b.n	7106 <_spi_m_sync_trans+0xe6>
			break;
    7104:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    7106:	6a38      	ldr	r0, [r7, #32]
    7108:	4b0b      	ldr	r3, [pc, #44]	; (7138 <_spi_m_sync_trans+0x118>)
    710a:	4798      	blx	r3

	return rc;
    710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    710e:	4618      	mov	r0, r3
    7110:	372c      	adds	r7, #44	; 0x2c
    7112:	46bd      	mov	sp, r7
    7114:	bd90      	pop	{r4, r7, pc}
    7116:	bf00      	nop
    7118:	0000f054 	.word	0x0000f054
    711c:	000038b5 	.word	0x000038b5
    7120:	00005e39 	.word	0x00005e39
    7124:	00005fe5 	.word	0x00005fe5
    7128:	00005ed7 	.word	0x00005ed7
    712c:	00006efd 	.word	0x00006efd
    7130:	00006f69 	.word	0x00006f69
    7134:	00006fe1 	.word	0x00006fe1
    7138:	00006ecd 	.word	0x00006ecd

0000713c <__NVIC_EnableIRQ>:
{
    713c:	b480      	push	{r7}
    713e:	b083      	sub	sp, #12
    7140:	af00      	add	r7, sp, #0
    7142:	4603      	mov	r3, r0
    7144:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    714a:	2b00      	cmp	r3, #0
    714c:	db0b      	blt.n	7166 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    714e:	4909      	ldr	r1, [pc, #36]	; (7174 <__NVIC_EnableIRQ+0x38>)
    7150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7154:	095b      	lsrs	r3, r3, #5
    7156:	88fa      	ldrh	r2, [r7, #6]
    7158:	f002 021f 	and.w	r2, r2, #31
    715c:	2001      	movs	r0, #1
    715e:	fa00 f202 	lsl.w	r2, r0, r2
    7162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7166:	bf00      	nop
    7168:	370c      	adds	r7, #12
    716a:	46bd      	mov	sp, r7
    716c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7170:	4770      	bx	lr
    7172:	bf00      	nop
    7174:	e000e100 	.word	0xe000e100

00007178 <__NVIC_DisableIRQ>:
{
    7178:	b480      	push	{r7}
    717a:	b083      	sub	sp, #12
    717c:	af00      	add	r7, sp, #0
    717e:	4603      	mov	r3, r0
    7180:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7186:	2b00      	cmp	r3, #0
    7188:	db10      	blt.n	71ac <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    718a:	490b      	ldr	r1, [pc, #44]	; (71b8 <__NVIC_DisableIRQ+0x40>)
    718c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7190:	095b      	lsrs	r3, r3, #5
    7192:	88fa      	ldrh	r2, [r7, #6]
    7194:	f002 021f 	and.w	r2, r2, #31
    7198:	2001      	movs	r0, #1
    719a:	fa00 f202 	lsl.w	r2, r0, r2
    719e:	3320      	adds	r3, #32
    71a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    71a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    71a8:	f3bf 8f6f 	isb	sy
}
    71ac:	bf00      	nop
    71ae:	370c      	adds	r7, #12
    71b0:	46bd      	mov	sp, r7
    71b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    71b6:	4770      	bx	lr
    71b8:	e000e100 	.word	0xe000e100

000071bc <__NVIC_ClearPendingIRQ>:
{
    71bc:	b480      	push	{r7}
    71be:	b083      	sub	sp, #12
    71c0:	af00      	add	r7, sp, #0
    71c2:	4603      	mov	r3, r0
    71c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    71c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    71ca:	2b00      	cmp	r3, #0
    71cc:	db0c      	blt.n	71e8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    71ce:	4909      	ldr	r1, [pc, #36]	; (71f4 <__NVIC_ClearPendingIRQ+0x38>)
    71d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    71d4:	095b      	lsrs	r3, r3, #5
    71d6:	88fa      	ldrh	r2, [r7, #6]
    71d8:	f002 021f 	and.w	r2, r2, #31
    71dc:	2001      	movs	r0, #1
    71de:	fa00 f202 	lsl.w	r2, r0, r2
    71e2:	3360      	adds	r3, #96	; 0x60
    71e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    71e8:	bf00      	nop
    71ea:	370c      	adds	r7, #12
    71ec:	46bd      	mov	sp, r7
    71ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    71f2:	4770      	bx	lr
    71f4:	e000e100 	.word	0xe000e100

000071f8 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    71f8:	b480      	push	{r7}
    71fa:	b083      	sub	sp, #12
    71fc:	af00      	add	r7, sp, #0
    71fe:	6078      	str	r0, [r7, #4]
    7200:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    7202:	bf00      	nop
    7204:	687b      	ldr	r3, [r7, #4]
    7206:	689a      	ldr	r2, [r3, #8]
    7208:	683b      	ldr	r3, [r7, #0]
    720a:	4013      	ands	r3, r2
    720c:	2b00      	cmp	r3, #0
    720e:	d1f9      	bne.n	7204 <hri_tcc_wait_for_sync+0xc>
	};
}
    7210:	bf00      	nop
    7212:	370c      	adds	r7, #12
    7214:	46bd      	mov	sp, r7
    7216:	f85d 7b04 	ldr.w	r7, [sp], #4
    721a:	4770      	bx	lr

0000721c <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    721c:	b480      	push	{r7}
    721e:	b083      	sub	sp, #12
    7220:	af00      	add	r7, sp, #0
    7222:	6078      	str	r0, [r7, #4]
    7224:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    7226:	687b      	ldr	r3, [r7, #4]
    7228:	689a      	ldr	r2, [r3, #8]
    722a:	683b      	ldr	r3, [r7, #0]
    722c:	4013      	ands	r3, r2
    722e:	2b00      	cmp	r3, #0
    7230:	bf14      	ite	ne
    7232:	2301      	movne	r3, #1
    7234:	2300      	moveq	r3, #0
    7236:	b2db      	uxtb	r3, r3
}
    7238:	4618      	mov	r0, r3
    723a:	370c      	adds	r7, #12
    723c:	46bd      	mov	sp, r7
    723e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7242:	4770      	bx	lr

00007244 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7244:	b480      	push	{r7}
    7246:	b083      	sub	sp, #12
    7248:	af00      	add	r7, sp, #0
    724a:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    724c:	687b      	ldr	r3, [r7, #4]
    724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7250:	f003 0301 	and.w	r3, r3, #1
    7254:	2b00      	cmp	r3, #0
    7256:	bf14      	ite	ne
    7258:	2301      	movne	r3, #1
    725a:	2300      	moveq	r3, #0
    725c:	b2db      	uxtb	r3, r3
}
    725e:	4618      	mov	r0, r3
    7260:	370c      	adds	r7, #12
    7262:	46bd      	mov	sp, r7
    7264:	f85d 7b04 	ldr.w	r7, [sp], #4
    7268:	4770      	bx	lr

0000726a <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    726a:	b480      	push	{r7}
    726c:	b083      	sub	sp, #12
    726e:	af00      	add	r7, sp, #0
    7270:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    7272:	687b      	ldr	r3, [r7, #4]
    7274:	2201      	movs	r2, #1
    7276:	62da      	str	r2, [r3, #44]	; 0x2c
}
    7278:	bf00      	nop
    727a:	370c      	adds	r7, #12
    727c:	46bd      	mov	sp, r7
    727e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7282:	4770      	bx	lr

00007284 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    7284:	b480      	push	{r7}
    7286:	b083      	sub	sp, #12
    7288:	af00      	add	r7, sp, #0
    728a:	6078      	str	r0, [r7, #4]
    728c:	460b      	mov	r3, r1
    728e:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    7290:	687b      	ldr	r3, [r7, #4]
    7292:	78fa      	ldrb	r2, [r7, #3]
    7294:	715a      	strb	r2, [r3, #5]
}
    7296:	bf00      	nop
    7298:	370c      	adds	r7, #12
    729a:	46bd      	mov	sp, r7
    729c:	f85d 7b04 	ldr.w	r7, [sp], #4
    72a0:	4770      	bx	lr

000072a2 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    72a2:	b480      	push	{r7}
    72a4:	b083      	sub	sp, #12
    72a6:	af00      	add	r7, sp, #0
    72a8:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    72aa:	687b      	ldr	r3, [r7, #4]
    72ac:	2201      	movs	r2, #1
    72ae:	629a      	str	r2, [r3, #40]	; 0x28
}
    72b0:	bf00      	nop
    72b2:	370c      	adds	r7, #12
    72b4:	46bd      	mov	sp, r7
    72b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    72ba:	4770      	bx	lr

000072bc <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    72bc:	b580      	push	{r7, lr}
    72be:	b082      	sub	sp, #8
    72c0:	af00      	add	r7, sp, #0
    72c2:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    72c4:	687b      	ldr	r3, [r7, #4]
    72c6:	681b      	ldr	r3, [r3, #0]
    72c8:	f043 0201 	orr.w	r2, r3, #1
    72cc:	687b      	ldr	r3, [r7, #4]
    72ce:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    72d0:	2101      	movs	r1, #1
    72d2:	6878      	ldr	r0, [r7, #4]
    72d4:	4b02      	ldr	r3, [pc, #8]	; (72e0 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    72d6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    72d8:	bf00      	nop
    72da:	3708      	adds	r7, #8
    72dc:	46bd      	mov	sp, r7
    72de:	bd80      	pop	{r7, pc}
    72e0:	000071f9 	.word	0x000071f9

000072e4 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    72e4:	b580      	push	{r7, lr}
    72e6:	b082      	sub	sp, #8
    72e8:	af00      	add	r7, sp, #0
    72ea:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    72ec:	687b      	ldr	r3, [r7, #4]
    72ee:	681b      	ldr	r3, [r3, #0]
    72f0:	f043 0202 	orr.w	r2, r3, #2
    72f4:	687b      	ldr	r3, [r7, #4]
    72f6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    72f8:	2103      	movs	r1, #3
    72fa:	6878      	ldr	r0, [r7, #4]
    72fc:	4b02      	ldr	r3, [pc, #8]	; (7308 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    72fe:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7300:	bf00      	nop
    7302:	3708      	adds	r7, #8
    7304:	46bd      	mov	sp, r7
    7306:	bd80      	pop	{r7, pc}
    7308:	000071f9 	.word	0x000071f9

0000730c <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    730c:	b580      	push	{r7, lr}
    730e:	b084      	sub	sp, #16
    7310:	af00      	add	r7, sp, #0
    7312:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7314:	2103      	movs	r1, #3
    7316:	6878      	ldr	r0, [r7, #4]
    7318:	4b09      	ldr	r3, [pc, #36]	; (7340 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    731a:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    731c:	687b      	ldr	r3, [r7, #4]
    731e:	681b      	ldr	r3, [r3, #0]
    7320:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    7322:	68fb      	ldr	r3, [r7, #12]
    7324:	085b      	lsrs	r3, r3, #1
    7326:	f003 0301 	and.w	r3, r3, #1
    732a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    732c:	68fb      	ldr	r3, [r7, #12]
    732e:	2b00      	cmp	r3, #0
    7330:	bf14      	ite	ne
    7332:	2301      	movne	r3, #1
    7334:	2300      	moveq	r3, #0
    7336:	b2db      	uxtb	r3, r3
}
    7338:	4618      	mov	r0, r3
    733a:	3710      	adds	r7, #16
    733c:	46bd      	mov	sp, r7
    733e:	bd80      	pop	{r7, pc}
    7340:	000071f9 	.word	0x000071f9

00007344 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7344:	b580      	push	{r7, lr}
    7346:	b082      	sub	sp, #8
    7348:	af00      	add	r7, sp, #0
    734a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    734c:	687b      	ldr	r3, [r7, #4]
    734e:	681b      	ldr	r3, [r3, #0]
    7350:	f023 0202 	bic.w	r2, r3, #2
    7354:	687b      	ldr	r3, [r7, #4]
    7356:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7358:	2103      	movs	r1, #3
    735a:	6878      	ldr	r0, [r7, #4]
    735c:	4b02      	ldr	r3, [pc, #8]	; (7368 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    735e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7360:	bf00      	nop
    7362:	3708      	adds	r7, #8
    7364:	46bd      	mov	sp, r7
    7366:	bd80      	pop	{r7, pc}
    7368:	000071f9 	.word	0x000071f9

0000736c <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    736c:	b580      	push	{r7, lr}
    736e:	b084      	sub	sp, #16
    7370:	af00      	add	r7, sp, #0
    7372:	6078      	str	r0, [r7, #4]
    7374:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7376:	2103      	movs	r1, #3
    7378:	6878      	ldr	r0, [r7, #4]
    737a:	4b07      	ldr	r3, [pc, #28]	; (7398 <hri_tcc_get_CTRLA_reg+0x2c>)
    737c:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    737e:	687b      	ldr	r3, [r7, #4]
    7380:	681b      	ldr	r3, [r3, #0]
    7382:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7384:	68fa      	ldr	r2, [r7, #12]
    7386:	683b      	ldr	r3, [r7, #0]
    7388:	4013      	ands	r3, r2
    738a:	60fb      	str	r3, [r7, #12]
	return tmp;
    738c:	68fb      	ldr	r3, [r7, #12]
}
    738e:	4618      	mov	r0, r3
    7390:	3710      	adds	r7, #16
    7392:	46bd      	mov	sp, r7
    7394:	bd80      	pop	{r7, pc}
    7396:	bf00      	nop
    7398:	000071f9 	.word	0x000071f9

0000739c <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    739c:	b580      	push	{r7, lr}
    739e:	b082      	sub	sp, #8
    73a0:	af00      	add	r7, sp, #0
    73a2:	6078      	str	r0, [r7, #4]
    73a4:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    73a6:	687b      	ldr	r3, [r7, #4]
    73a8:	683a      	ldr	r2, [r7, #0]
    73aa:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    73ac:	2103      	movs	r1, #3
    73ae:	6878      	ldr	r0, [r7, #4]
    73b0:	4b02      	ldr	r3, [pc, #8]	; (73bc <hri_tcc_write_CTRLA_reg+0x20>)
    73b2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    73b4:	bf00      	nop
    73b6:	3708      	adds	r7, #8
    73b8:	46bd      	mov	sp, r7
    73ba:	bd80      	pop	{r7, pc}
    73bc:	000071f9 	.word	0x000071f9

000073c0 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    73c0:	b480      	push	{r7}
    73c2:	b083      	sub	sp, #12
    73c4:	af00      	add	r7, sp, #0
    73c6:	6078      	str	r0, [r7, #4]
    73c8:	460b      	mov	r3, r1
    73ca:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    73cc:	687b      	ldr	r3, [r7, #4]
    73ce:	78fa      	ldrb	r2, [r7, #3]
    73d0:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    73d2:	bf00      	nop
    73d4:	370c      	adds	r7, #12
    73d6:	46bd      	mov	sp, r7
    73d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    73dc:	4770      	bx	lr

000073de <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    73de:	b480      	push	{r7}
    73e0:	b083      	sub	sp, #12
    73e2:	af00      	add	r7, sp, #0
    73e4:	6078      	str	r0, [r7, #4]
    73e6:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    73e8:	687b      	ldr	r3, [r7, #4]
    73ea:	683a      	ldr	r2, [r7, #0]
    73ec:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    73ee:	bf00      	nop
    73f0:	370c      	adds	r7, #12
    73f2:	46bd      	mov	sp, r7
    73f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    73f8:	4770      	bx	lr
	...

000073fc <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    73fc:	b580      	push	{r7, lr}
    73fe:	b082      	sub	sp, #8
    7400:	af00      	add	r7, sp, #0
    7402:	6078      	str	r0, [r7, #4]
    7404:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    7406:	687b      	ldr	r3, [r7, #4]
    7408:	683a      	ldr	r2, [r7, #0]
    740a:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    740c:	2180      	movs	r1, #128	; 0x80
    740e:	6878      	ldr	r0, [r7, #4]
    7410:	4b02      	ldr	r3, [pc, #8]	; (741c <hri_tcc_write_PER_reg+0x20>)
    7412:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7414:	bf00      	nop
    7416:	3708      	adds	r7, #8
    7418:	46bd      	mov	sp, r7
    741a:	bd80      	pop	{r7, pc}
    741c:	000071f9 	.word	0x000071f9

00007420 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    7420:	b580      	push	{r7, lr}
    7422:	b082      	sub	sp, #8
    7424:	af00      	add	r7, sp, #0
    7426:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7428:	2180      	movs	r1, #128	; 0x80
    742a:	6878      	ldr	r0, [r7, #4]
    742c:	4b03      	ldr	r3, [pc, #12]	; (743c <hri_tcc_read_PER_reg+0x1c>)
    742e:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    7430:	687b      	ldr	r3, [r7, #4]
    7432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    7434:	4618      	mov	r0, r3
    7436:	3708      	adds	r7, #8
    7438:	46bd      	mov	sp, r7
    743a:	bd80      	pop	{r7, pc}
    743c:	000071f9 	.word	0x000071f9

00007440 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7440:	b480      	push	{r7}
    7442:	b083      	sub	sp, #12
    7444:	af00      	add	r7, sp, #0
    7446:	6078      	str	r0, [r7, #4]
    7448:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    744a:	687b      	ldr	r3, [r7, #4]
    744c:	4a0c      	ldr	r2, [pc, #48]	; (7480 <_tcc_init_irq_param+0x40>)
    744e:	4293      	cmp	r3, r2
    7450:	d102      	bne.n	7458 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    7452:	4a0c      	ldr	r2, [pc, #48]	; (7484 <_tcc_init_irq_param+0x44>)
    7454:	683b      	ldr	r3, [r7, #0]
    7456:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7458:	687b      	ldr	r3, [r7, #4]
    745a:	4a0b      	ldr	r2, [pc, #44]	; (7488 <_tcc_init_irq_param+0x48>)
    745c:	4293      	cmp	r3, r2
    745e:	d102      	bne.n	7466 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    7460:	4a0a      	ldr	r2, [pc, #40]	; (748c <_tcc_init_irq_param+0x4c>)
    7462:	683b      	ldr	r3, [r7, #0]
    7464:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    7466:	687b      	ldr	r3, [r7, #4]
    7468:	4a09      	ldr	r2, [pc, #36]	; (7490 <_tcc_init_irq_param+0x50>)
    746a:	4293      	cmp	r3, r2
    746c:	d102      	bne.n	7474 <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    746e:	4a09      	ldr	r2, [pc, #36]	; (7494 <_tcc_init_irq_param+0x54>)
    7470:	683b      	ldr	r3, [r7, #0]
    7472:	6013      	str	r3, [r2, #0]
	}
}
    7474:	bf00      	nop
    7476:	370c      	adds	r7, #12
    7478:	46bd      	mov	sp, r7
    747a:	f85d 7b04 	ldr.w	r7, [sp], #4
    747e:	4770      	bx	lr
    7480:	41016000 	.word	0x41016000
    7484:	20000b24 	.word	0x20000b24
    7488:	41018000 	.word	0x41018000
    748c:	20000b28 	.word	0x20000b28
    7490:	42000c00 	.word	0x42000c00
    7494:	20000b2c 	.word	0x20000b2c

00007498 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    7498:	b580      	push	{r7, lr}
    749a:	b084      	sub	sp, #16
    749c:	af00      	add	r7, sp, #0
    749e:	6078      	str	r0, [r7, #4]
    74a0:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    74a2:	6838      	ldr	r0, [r7, #0]
    74a4:	4b33      	ldr	r3, [pc, #204]	; (7574 <_tcc_timer_init+0xdc>)
    74a6:	4798      	blx	r3
    74a8:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    74aa:	68fb      	ldr	r3, [r7, #12]
    74ac:	2b00      	cmp	r3, #0
    74ae:	d102      	bne.n	74b6 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    74b0:	f06f 0309 	mvn.w	r3, #9
    74b4:	e05a      	b.n	756c <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    74b6:	687b      	ldr	r3, [r7, #4]
    74b8:	683a      	ldr	r2, [r7, #0]
    74ba:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    74bc:	2101      	movs	r1, #1
    74be:	6838      	ldr	r0, [r7, #0]
    74c0:	4b2d      	ldr	r3, [pc, #180]	; (7578 <_tcc_timer_init+0xe0>)
    74c2:	4798      	blx	r3
    74c4:	4603      	mov	r3, r0
    74c6:	f083 0301 	eor.w	r3, r3, #1
    74ca:	b2db      	uxtb	r3, r3
    74cc:	2b00      	cmp	r3, #0
    74ce:	d011      	beq.n	74f4 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    74d0:	2102      	movs	r1, #2
    74d2:	6838      	ldr	r0, [r7, #0]
    74d4:	4b29      	ldr	r3, [pc, #164]	; (757c <_tcc_timer_init+0xe4>)
    74d6:	4798      	blx	r3
    74d8:	4603      	mov	r3, r0
    74da:	2b00      	cmp	r3, #0
    74dc:	d006      	beq.n	74ec <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    74de:	6838      	ldr	r0, [r7, #0]
    74e0:	4b27      	ldr	r3, [pc, #156]	; (7580 <_tcc_timer_init+0xe8>)
    74e2:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    74e4:	2102      	movs	r1, #2
    74e6:	6838      	ldr	r0, [r7, #0]
    74e8:	4b26      	ldr	r3, [pc, #152]	; (7584 <_tcc_timer_init+0xec>)
    74ea:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    74ec:	2101      	movs	r1, #1
    74ee:	6838      	ldr	r0, [r7, #0]
    74f0:	4b25      	ldr	r3, [pc, #148]	; (7588 <_tcc_timer_init+0xf0>)
    74f2:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    74f4:	2101      	movs	r1, #1
    74f6:	6838      	ldr	r0, [r7, #0]
    74f8:	4b22      	ldr	r3, [pc, #136]	; (7584 <_tcc_timer_init+0xec>)
    74fa:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    74fc:	68fb      	ldr	r3, [r7, #12]
    74fe:	689b      	ldr	r3, [r3, #8]
    7500:	4619      	mov	r1, r3
    7502:	6838      	ldr	r0, [r7, #0]
    7504:	4b20      	ldr	r3, [pc, #128]	; (7588 <_tcc_timer_init+0xf0>)
    7506:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    7508:	68fb      	ldr	r3, [r7, #12]
    750a:	7b1b      	ldrb	r3, [r3, #12]
    750c:	4619      	mov	r1, r3
    750e:	6838      	ldr	r0, [r7, #0]
    7510:	4b1e      	ldr	r3, [pc, #120]	; (758c <_tcc_timer_init+0xf4>)
    7512:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    7514:	68fb      	ldr	r3, [r7, #12]
    7516:	7b5b      	ldrb	r3, [r3, #13]
    7518:	4619      	mov	r1, r3
    751a:	6838      	ldr	r0, [r7, #0]
    751c:	4b1c      	ldr	r3, [pc, #112]	; (7590 <_tcc_timer_init+0xf8>)
    751e:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    7520:	68fb      	ldr	r3, [r7, #12]
    7522:	691b      	ldr	r3, [r3, #16]
    7524:	4619      	mov	r1, r3
    7526:	6838      	ldr	r0, [r7, #0]
    7528:	4b1a      	ldr	r3, [pc, #104]	; (7594 <_tcc_timer_init+0xfc>)
    752a:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    752c:	68fb      	ldr	r3, [r7, #12]
    752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7530:	4619      	mov	r1, r3
    7532:	6838      	ldr	r0, [r7, #0]
    7534:	4b18      	ldr	r3, [pc, #96]	; (7598 <_tcc_timer_init+0x100>)
    7536:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    7538:	6838      	ldr	r0, [r7, #0]
    753a:	4b18      	ldr	r3, [pc, #96]	; (759c <_tcc_timer_init+0x104>)
    753c:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    753e:	6879      	ldr	r1, [r7, #4]
    7540:	6838      	ldr	r0, [r7, #0]
    7542:	4b17      	ldr	r3, [pc, #92]	; (75a0 <_tcc_timer_init+0x108>)
    7544:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7546:	68fb      	ldr	r3, [r7, #12]
    7548:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    754c:	4618      	mov	r0, r3
    754e:	4b15      	ldr	r3, [pc, #84]	; (75a4 <_tcc_timer_init+0x10c>)
    7550:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    7552:	68fb      	ldr	r3, [r7, #12]
    7554:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7558:	4618      	mov	r0, r3
    755a:	4b13      	ldr	r3, [pc, #76]	; (75a8 <_tcc_timer_init+0x110>)
    755c:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    755e:	68fb      	ldr	r3, [r7, #12]
    7560:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7564:	4618      	mov	r0, r3
    7566:	4b11      	ldr	r3, [pc, #68]	; (75ac <_tcc_timer_init+0x114>)
    7568:	4798      	blx	r3

	return ERR_NONE;
    756a:	2300      	movs	r3, #0
}
    756c:	4618      	mov	r0, r3
    756e:	3710      	adds	r7, #16
    7570:	46bd      	mov	sp, r7
    7572:	bd80      	pop	{r7, pc}
    7574:	0000777d 	.word	0x0000777d
    7578:	0000721d 	.word	0x0000721d
    757c:	0000736d 	.word	0x0000736d
    7580:	00007345 	.word	0x00007345
    7584:	000071f9 	.word	0x000071f9
    7588:	0000739d 	.word	0x0000739d
    758c:	00007285 	.word	0x00007285
    7590:	000073c1 	.word	0x000073c1
    7594:	000073df 	.word	0x000073df
    7598:	000073fd 	.word	0x000073fd
    759c:	000072a3 	.word	0x000072a3
    75a0:	00007441 	.word	0x00007441
    75a4:	00007179 	.word	0x00007179
    75a8:	000071bd 	.word	0x000071bd
    75ac:	0000713d 	.word	0x0000713d

000075b0 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    75b0:	b580      	push	{r7, lr}
    75b2:	b084      	sub	sp, #16
    75b4:	af00      	add	r7, sp, #0
    75b6:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    75b8:	687b      	ldr	r3, [r7, #4]
    75ba:	68db      	ldr	r3, [r3, #12]
    75bc:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    75be:	68f8      	ldr	r0, [r7, #12]
    75c0:	4b0a      	ldr	r3, [pc, #40]	; (75ec <_tcc_timer_deinit+0x3c>)
    75c2:	4798      	blx	r3
    75c4:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    75c6:	68bb      	ldr	r3, [r7, #8]
    75c8:	2b00      	cmp	r3, #0
    75ca:	d00b      	beq.n	75e4 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    75cc:	68bb      	ldr	r3, [r7, #8]
    75ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    75d2:	4618      	mov	r0, r3
    75d4:	4b06      	ldr	r3, [pc, #24]	; (75f0 <_tcc_timer_deinit+0x40>)
    75d6:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    75d8:	68f8      	ldr	r0, [r7, #12]
    75da:	4b06      	ldr	r3, [pc, #24]	; (75f4 <_tcc_timer_deinit+0x44>)
    75dc:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    75de:	68f8      	ldr	r0, [r7, #12]
    75e0:	4b05      	ldr	r3, [pc, #20]	; (75f8 <_tcc_timer_deinit+0x48>)
    75e2:	4798      	blx	r3
	}
}
    75e4:	bf00      	nop
    75e6:	3710      	adds	r7, #16
    75e8:	46bd      	mov	sp, r7
    75ea:	bd80      	pop	{r7, pc}
    75ec:	0000777d 	.word	0x0000777d
    75f0:	00007179 	.word	0x00007179
    75f4:	00007345 	.word	0x00007345
    75f8:	000072bd 	.word	0x000072bd

000075fc <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    75fc:	b580      	push	{r7, lr}
    75fe:	b082      	sub	sp, #8
    7600:	af00      	add	r7, sp, #0
    7602:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    7604:	687b      	ldr	r3, [r7, #4]
    7606:	68db      	ldr	r3, [r3, #12]
    7608:	4618      	mov	r0, r3
    760a:	4b03      	ldr	r3, [pc, #12]	; (7618 <_tcc_timer_start+0x1c>)
    760c:	4798      	blx	r3
}
    760e:	bf00      	nop
    7610:	3708      	adds	r7, #8
    7612:	46bd      	mov	sp, r7
    7614:	bd80      	pop	{r7, pc}
    7616:	bf00      	nop
    7618:	000072e5 	.word	0x000072e5

0000761c <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    761c:	b580      	push	{r7, lr}
    761e:	b082      	sub	sp, #8
    7620:	af00      	add	r7, sp, #0
    7622:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    7624:	687b      	ldr	r3, [r7, #4]
    7626:	68db      	ldr	r3, [r3, #12]
    7628:	4618      	mov	r0, r3
    762a:	4b03      	ldr	r3, [pc, #12]	; (7638 <_tcc_timer_stop+0x1c>)
    762c:	4798      	blx	r3
}
    762e:	bf00      	nop
    7630:	3708      	adds	r7, #8
    7632:	46bd      	mov	sp, r7
    7634:	bd80      	pop	{r7, pc}
    7636:	bf00      	nop
    7638:	00007345 	.word	0x00007345

0000763c <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    763c:	b580      	push	{r7, lr}
    763e:	b082      	sub	sp, #8
    7640:	af00      	add	r7, sp, #0
    7642:	6078      	str	r0, [r7, #4]
    7644:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    7646:	687b      	ldr	r3, [r7, #4]
    7648:	68db      	ldr	r3, [r3, #12]
    764a:	6839      	ldr	r1, [r7, #0]
    764c:	4618      	mov	r0, r3
    764e:	4b03      	ldr	r3, [pc, #12]	; (765c <_tcc_timer_set_period+0x20>)
    7650:	4798      	blx	r3
}
    7652:	bf00      	nop
    7654:	3708      	adds	r7, #8
    7656:	46bd      	mov	sp, r7
    7658:	bd80      	pop	{r7, pc}
    765a:	bf00      	nop
    765c:	000073fd 	.word	0x000073fd

00007660 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    7660:	b580      	push	{r7, lr}
    7662:	b082      	sub	sp, #8
    7664:	af00      	add	r7, sp, #0
    7666:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    7668:	687b      	ldr	r3, [r7, #4]
    766a:	68db      	ldr	r3, [r3, #12]
    766c:	4618      	mov	r0, r3
    766e:	4b03      	ldr	r3, [pc, #12]	; (767c <_tcc_timer_get_period+0x1c>)
    7670:	4798      	blx	r3
    7672:	4603      	mov	r3, r0
}
    7674:	4618      	mov	r0, r3
    7676:	3708      	adds	r7, #8
    7678:	46bd      	mov	sp, r7
    767a:	bd80      	pop	{r7, pc}
    767c:	00007421 	.word	0x00007421

00007680 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    7680:	b580      	push	{r7, lr}
    7682:	b082      	sub	sp, #8
    7684:	af00      	add	r7, sp, #0
    7686:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    7688:	687b      	ldr	r3, [r7, #4]
    768a:	68db      	ldr	r3, [r3, #12]
    768c:	4618      	mov	r0, r3
    768e:	4b03      	ldr	r3, [pc, #12]	; (769c <_tcc_timer_is_started+0x1c>)
    7690:	4798      	blx	r3
    7692:	4603      	mov	r3, r0
}
    7694:	4618      	mov	r0, r3
    7696:	3708      	adds	r7, #8
    7698:	46bd      	mov	sp, r7
    769a:	bd80      	pop	{r7, pc}
    769c:	0000730d 	.word	0x0000730d

000076a0 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    76a0:	b480      	push	{r7}
    76a2:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    76a4:	4b02      	ldr	r3, [pc, #8]	; (76b0 <_tcc_get_timer+0x10>)
}
    76a6:	4618      	mov	r0, r3
    76a8:	46bd      	mov	sp, r7
    76aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    76ae:	4770      	bx	lr
    76b0:	200000f0 	.word	0x200000f0

000076b4 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    76b4:	b580      	push	{r7, lr}
    76b6:	b084      	sub	sp, #16
    76b8:	af00      	add	r7, sp, #0
    76ba:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    76bc:	687b      	ldr	r3, [r7, #4]
    76be:	68db      	ldr	r3, [r3, #12]
    76c0:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    76c2:	68f8      	ldr	r0, [r7, #12]
    76c4:	4b08      	ldr	r3, [pc, #32]	; (76e8 <_tcc_timer_set_irq+0x34>)
    76c6:	4798      	blx	r3
    76c8:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    76ca:	68bb      	ldr	r3, [r7, #8]
    76cc:	2b00      	cmp	r3, #0
    76ce:	d006      	beq.n	76de <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    76d0:	68bb      	ldr	r3, [r7, #8]
    76d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    76d6:	b2db      	uxtb	r3, r3
    76d8:	4618      	mov	r0, r3
    76da:	4b04      	ldr	r3, [pc, #16]	; (76ec <_tcc_timer_set_irq+0x38>)
    76dc:	4798      	blx	r3
	}
}
    76de:	bf00      	nop
    76e0:	3710      	adds	r7, #16
    76e2:	46bd      	mov	sp, r7
    76e4:	bd80      	pop	{r7, pc}
    76e6:	bf00      	nop
    76e8:	0000777d 	.word	0x0000777d
    76ec:	000040fd 	.word	0x000040fd

000076f0 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    76f0:	b580      	push	{r7, lr}
    76f2:	b084      	sub	sp, #16
    76f4:	af00      	add	r7, sp, #0
    76f6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    76f8:	687b      	ldr	r3, [r7, #4]
    76fa:	68db      	ldr	r3, [r3, #12]
    76fc:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    76fe:	68f8      	ldr	r0, [r7, #12]
    7700:	4b07      	ldr	r3, [pc, #28]	; (7720 <tcc_interrupt_handler+0x30>)
    7702:	4798      	blx	r3
    7704:	4603      	mov	r3, r0
    7706:	2b00      	cmp	r3, #0
    7708:	d006      	beq.n	7718 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    770a:	68f8      	ldr	r0, [r7, #12]
    770c:	4b05      	ldr	r3, [pc, #20]	; (7724 <tcc_interrupt_handler+0x34>)
    770e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7710:	687b      	ldr	r3, [r7, #4]
    7712:	681b      	ldr	r3, [r3, #0]
    7714:	6878      	ldr	r0, [r7, #4]
    7716:	4798      	blx	r3
	}
}
    7718:	bf00      	nop
    771a:	3710      	adds	r7, #16
    771c:	46bd      	mov	sp, r7
    771e:	bd80      	pop	{r7, pc}
    7720:	00007245 	.word	0x00007245
    7724:	0000726b 	.word	0x0000726b

00007728 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    7728:	b580      	push	{r7, lr}
    772a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    772c:	4b03      	ldr	r3, [pc, #12]	; (773c <TCC0_0_Handler+0x14>)
    772e:	681b      	ldr	r3, [r3, #0]
    7730:	4618      	mov	r0, r3
    7732:	4b03      	ldr	r3, [pc, #12]	; (7740 <TCC0_0_Handler+0x18>)
    7734:	4798      	blx	r3
}
    7736:	bf00      	nop
    7738:	bd80      	pop	{r7, pc}
    773a:	bf00      	nop
    773c:	20000b24 	.word	0x20000b24
    7740:	000076f1 	.word	0x000076f1

00007744 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    7744:	b580      	push	{r7, lr}
    7746:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    7748:	4b03      	ldr	r3, [pc, #12]	; (7758 <TCC1_0_Handler+0x14>)
    774a:	681b      	ldr	r3, [r3, #0]
    774c:	4618      	mov	r0, r3
    774e:	4b03      	ldr	r3, [pc, #12]	; (775c <TCC1_0_Handler+0x18>)
    7750:	4798      	blx	r3
}
    7752:	bf00      	nop
    7754:	bd80      	pop	{r7, pc}
    7756:	bf00      	nop
    7758:	20000b28 	.word	0x20000b28
    775c:	000076f1 	.word	0x000076f1

00007760 <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    7760:	b580      	push	{r7, lr}
    7762:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    7764:	4b03      	ldr	r3, [pc, #12]	; (7774 <TCC2_0_Handler+0x14>)
    7766:	681b      	ldr	r3, [r3, #0]
    7768:	4618      	mov	r0, r3
    776a:	4b03      	ldr	r3, [pc, #12]	; (7778 <TCC2_0_Handler+0x18>)
    776c:	4798      	blx	r3
}
    776e:	bf00      	nop
    7770:	bd80      	pop	{r7, pc}
    7772:	bf00      	nop
    7774:	20000b2c 	.word	0x20000b2c
    7778:	000076f1 	.word	0x000076f1

0000777c <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    777c:	b480      	push	{r7}
    777e:	b085      	sub	sp, #20
    7780:	af00      	add	r7, sp, #0
    7782:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7784:	2300      	movs	r3, #0
    7786:	73fb      	strb	r3, [r7, #15]
    7788:	e015      	b.n	77b6 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    778a:	7bfa      	ldrb	r2, [r7, #15]
    778c:	490f      	ldr	r1, [pc, #60]	; (77cc <_get_tcc_cfg+0x50>)
    778e:	4613      	mov	r3, r2
    7790:	005b      	lsls	r3, r3, #1
    7792:	4413      	add	r3, r2
    7794:	011b      	lsls	r3, r3, #4
    7796:	440b      	add	r3, r1
    7798:	681a      	ldr	r2, [r3, #0]
    779a:	687b      	ldr	r3, [r7, #4]
    779c:	429a      	cmp	r2, r3
    779e:	d107      	bne.n	77b0 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    77a0:	7bfa      	ldrb	r2, [r7, #15]
    77a2:	4613      	mov	r3, r2
    77a4:	005b      	lsls	r3, r3, #1
    77a6:	4413      	add	r3, r2
    77a8:	011b      	lsls	r3, r3, #4
    77aa:	4a08      	ldr	r2, [pc, #32]	; (77cc <_get_tcc_cfg+0x50>)
    77ac:	4413      	add	r3, r2
    77ae:	e006      	b.n	77be <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    77b0:	7bfb      	ldrb	r3, [r7, #15]
    77b2:	3301      	adds	r3, #1
    77b4:	73fb      	strb	r3, [r7, #15]
    77b6:	7bfb      	ldrb	r3, [r7, #15]
    77b8:	2b02      	cmp	r3, #2
    77ba:	d9e6      	bls.n	778a <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    77bc:	2300      	movs	r3, #0
}
    77be:	4618      	mov	r0, r3
    77c0:	3714      	adds	r7, #20
    77c2:	46bd      	mov	sp, r7
    77c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    77c8:	4770      	bx	lr
    77ca:	bf00      	nop
    77cc:	20000060 	.word	0x20000060

000077d0 <__NVIC_EnableIRQ>:
{
    77d0:	b480      	push	{r7}
    77d2:	b083      	sub	sp, #12
    77d4:	af00      	add	r7, sp, #0
    77d6:	4603      	mov	r3, r0
    77d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    77da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    77de:	2b00      	cmp	r3, #0
    77e0:	db0b      	blt.n	77fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    77e2:	4909      	ldr	r1, [pc, #36]	; (7808 <__NVIC_EnableIRQ+0x38>)
    77e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    77e8:	095b      	lsrs	r3, r3, #5
    77ea:	88fa      	ldrh	r2, [r7, #6]
    77ec:	f002 021f 	and.w	r2, r2, #31
    77f0:	2001      	movs	r0, #1
    77f2:	fa00 f202 	lsl.w	r2, r0, r2
    77f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    77fa:	bf00      	nop
    77fc:	370c      	adds	r7, #12
    77fe:	46bd      	mov	sp, r7
    7800:	f85d 7b04 	ldr.w	r7, [sp], #4
    7804:	4770      	bx	lr
    7806:	bf00      	nop
    7808:	e000e100 	.word	0xe000e100

0000780c <__NVIC_DisableIRQ>:
{
    780c:	b480      	push	{r7}
    780e:	b083      	sub	sp, #12
    7810:	af00      	add	r7, sp, #0
    7812:	4603      	mov	r3, r0
    7814:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    781a:	2b00      	cmp	r3, #0
    781c:	db10      	blt.n	7840 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    781e:	490b      	ldr	r1, [pc, #44]	; (784c <__NVIC_DisableIRQ+0x40>)
    7820:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7824:	095b      	lsrs	r3, r3, #5
    7826:	88fa      	ldrh	r2, [r7, #6]
    7828:	f002 021f 	and.w	r2, r2, #31
    782c:	2001      	movs	r0, #1
    782e:	fa00 f202 	lsl.w	r2, r0, r2
    7832:	3320      	adds	r3, #32
    7834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7838:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    783c:	f3bf 8f6f 	isb	sy
}
    7840:	bf00      	nop
    7842:	370c      	adds	r7, #12
    7844:	46bd      	mov	sp, r7
    7846:	f85d 7b04 	ldr.w	r7, [sp], #4
    784a:	4770      	bx	lr
    784c:	e000e100 	.word	0xe000e100

00007850 <__NVIC_ClearPendingIRQ>:
{
    7850:	b480      	push	{r7}
    7852:	b083      	sub	sp, #12
    7854:	af00      	add	r7, sp, #0
    7856:	4603      	mov	r3, r0
    7858:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    785a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    785e:	2b00      	cmp	r3, #0
    7860:	db0c      	blt.n	787c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7862:	4909      	ldr	r1, [pc, #36]	; (7888 <__NVIC_ClearPendingIRQ+0x38>)
    7864:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7868:	095b      	lsrs	r3, r3, #5
    786a:	88fa      	ldrh	r2, [r7, #6]
    786c:	f002 021f 	and.w	r2, r2, #31
    7870:	2001      	movs	r0, #1
    7872:	fa00 f202 	lsl.w	r2, r0, r2
    7876:	3360      	adds	r3, #96	; 0x60
    7878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    787c:	bf00      	nop
    787e:	370c      	adds	r7, #12
    7880:	46bd      	mov	sp, r7
    7882:	f85d 7b04 	ldr.w	r7, [sp], #4
    7886:	4770      	bx	lr
    7888:	e000e100 	.word	0xe000e100

0000788c <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    788c:	b480      	push	{r7}
    788e:	b083      	sub	sp, #12
    7890:	af00      	add	r7, sp, #0
    7892:	6078      	str	r0, [r7, #4]
    7894:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7896:	bf00      	nop
    7898:	687b      	ldr	r3, [r7, #4]
    789a:	691a      	ldr	r2, [r3, #16]
    789c:	683b      	ldr	r3, [r7, #0]
    789e:	4013      	ands	r3, r2
    78a0:	2b00      	cmp	r3, #0
    78a2:	d1f9      	bne.n	7898 <hri_tc_wait_for_sync+0xc>
	};
}
    78a4:	bf00      	nop
    78a6:	370c      	adds	r7, #12
    78a8:	46bd      	mov	sp, r7
    78aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    78ae:	4770      	bx	lr

000078b0 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    78b0:	b480      	push	{r7}
    78b2:	b083      	sub	sp, #12
    78b4:	af00      	add	r7, sp, #0
    78b6:	6078      	str	r0, [r7, #4]
    78b8:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    78ba:	687b      	ldr	r3, [r7, #4]
    78bc:	691a      	ldr	r2, [r3, #16]
    78be:	683b      	ldr	r3, [r7, #0]
    78c0:	4013      	ands	r3, r2
    78c2:	2b00      	cmp	r3, #0
    78c4:	bf14      	ite	ne
    78c6:	2301      	movne	r3, #1
    78c8:	2300      	moveq	r3, #0
    78ca:	b2db      	uxtb	r3, r3
}
    78cc:	4618      	mov	r0, r3
    78ce:	370c      	adds	r7, #12
    78d0:	46bd      	mov	sp, r7
    78d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    78d6:	4770      	bx	lr

000078d8 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    78d8:	b480      	push	{r7}
    78da:	b083      	sub	sp, #12
    78dc:	af00      	add	r7, sp, #0
    78de:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    78e0:	687b      	ldr	r3, [r7, #4]
    78e2:	7a9b      	ldrb	r3, [r3, #10]
    78e4:	b2db      	uxtb	r3, r3
    78e6:	f003 0301 	and.w	r3, r3, #1
    78ea:	2b00      	cmp	r3, #0
    78ec:	bf14      	ite	ne
    78ee:	2301      	movne	r3, #1
    78f0:	2300      	moveq	r3, #0
    78f2:	b2db      	uxtb	r3, r3
}
    78f4:	4618      	mov	r0, r3
    78f6:	370c      	adds	r7, #12
    78f8:	46bd      	mov	sp, r7
    78fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    78fe:	4770      	bx	lr

00007900 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    7900:	b480      	push	{r7}
    7902:	b083      	sub	sp, #12
    7904:	af00      	add	r7, sp, #0
    7906:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7908:	687b      	ldr	r3, [r7, #4]
    790a:	2201      	movs	r2, #1
    790c:	729a      	strb	r2, [r3, #10]
}
    790e:	bf00      	nop
    7910:	370c      	adds	r7, #12
    7912:	46bd      	mov	sp, r7
    7914:	f85d 7b04 	ldr.w	r7, [sp], #4
    7918:	4770      	bx	lr

0000791a <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    791a:	b480      	push	{r7}
    791c:	b083      	sub	sp, #12
    791e:	af00      	add	r7, sp, #0
    7920:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    7922:	687b      	ldr	r3, [r7, #4]
    7924:	2202      	movs	r2, #2
    7926:	729a      	strb	r2, [r3, #10]
}
    7928:	bf00      	nop
    792a:	370c      	adds	r7, #12
    792c:	46bd      	mov	sp, r7
    792e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7932:	4770      	bx	lr

00007934 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    7934:	b480      	push	{r7}
    7936:	b083      	sub	sp, #12
    7938:	af00      	add	r7, sp, #0
    793a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    793c:	687b      	ldr	r3, [r7, #4]
    793e:	2201      	movs	r2, #1
    7940:	725a      	strb	r2, [r3, #9]
}
    7942:	bf00      	nop
    7944:	370c      	adds	r7, #12
    7946:	46bd      	mov	sp, r7
    7948:	f85d 7b04 	ldr.w	r7, [sp], #4
    794c:	4770      	bx	lr

0000794e <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    794e:	b480      	push	{r7}
    7950:	b083      	sub	sp, #12
    7952:	af00      	add	r7, sp, #0
    7954:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    7956:	687b      	ldr	r3, [r7, #4]
    7958:	7a5b      	ldrb	r3, [r3, #9]
    795a:	b2db      	uxtb	r3, r3
    795c:	085b      	lsrs	r3, r3, #1
    795e:	f003 0301 	and.w	r3, r3, #1
    7962:	2b00      	cmp	r3, #0
    7964:	bf14      	ite	ne
    7966:	2301      	movne	r3, #1
    7968:	2300      	moveq	r3, #0
    796a:	b2db      	uxtb	r3, r3
}
    796c:	4618      	mov	r0, r3
    796e:	370c      	adds	r7, #12
    7970:	46bd      	mov	sp, r7
    7972:	f85d 7b04 	ldr.w	r7, [sp], #4
    7976:	4770      	bx	lr

00007978 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7978:	b580      	push	{r7, lr}
    797a:	b082      	sub	sp, #8
    797c:	af00      	add	r7, sp, #0
    797e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    7980:	687b      	ldr	r3, [r7, #4]
    7982:	681b      	ldr	r3, [r3, #0]
    7984:	f043 0201 	orr.w	r2, r3, #1
    7988:	687b      	ldr	r3, [r7, #4]
    798a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    798c:	2101      	movs	r1, #1
    798e:	6878      	ldr	r0, [r7, #4]
    7990:	4b02      	ldr	r3, [pc, #8]	; (799c <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    7992:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7994:	bf00      	nop
    7996:	3708      	adds	r7, #8
    7998:	46bd      	mov	sp, r7
    799a:	bd80      	pop	{r7, pc}
    799c:	0000788d 	.word	0x0000788d

000079a0 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    79a0:	b580      	push	{r7, lr}
    79a2:	b082      	sub	sp, #8
    79a4:	af00      	add	r7, sp, #0
    79a6:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    79a8:	687b      	ldr	r3, [r7, #4]
    79aa:	681b      	ldr	r3, [r3, #0]
    79ac:	f043 0202 	orr.w	r2, r3, #2
    79b0:	687b      	ldr	r3, [r7, #4]
    79b2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    79b4:	2103      	movs	r1, #3
    79b6:	6878      	ldr	r0, [r7, #4]
    79b8:	4b02      	ldr	r3, [pc, #8]	; (79c4 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    79ba:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    79bc:	bf00      	nop
    79be:	3708      	adds	r7, #8
    79c0:	46bd      	mov	sp, r7
    79c2:	bd80      	pop	{r7, pc}
    79c4:	0000788d 	.word	0x0000788d

000079c8 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    79c8:	b580      	push	{r7, lr}
    79ca:	b084      	sub	sp, #16
    79cc:	af00      	add	r7, sp, #0
    79ce:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    79d0:	2103      	movs	r1, #3
    79d2:	6878      	ldr	r0, [r7, #4]
    79d4:	4b09      	ldr	r3, [pc, #36]	; (79fc <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    79d6:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    79d8:	687b      	ldr	r3, [r7, #4]
    79da:	681b      	ldr	r3, [r3, #0]
    79dc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    79de:	68fb      	ldr	r3, [r7, #12]
    79e0:	085b      	lsrs	r3, r3, #1
    79e2:	f003 0301 	and.w	r3, r3, #1
    79e6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    79e8:	68fb      	ldr	r3, [r7, #12]
    79ea:	2b00      	cmp	r3, #0
    79ec:	bf14      	ite	ne
    79ee:	2301      	movne	r3, #1
    79f0:	2300      	moveq	r3, #0
    79f2:	b2db      	uxtb	r3, r3
}
    79f4:	4618      	mov	r0, r3
    79f6:	3710      	adds	r7, #16
    79f8:	46bd      	mov	sp, r7
    79fa:	bd80      	pop	{r7, pc}
    79fc:	0000788d 	.word	0x0000788d

00007a00 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7a00:	b580      	push	{r7, lr}
    7a02:	b082      	sub	sp, #8
    7a04:	af00      	add	r7, sp, #0
    7a06:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7a08:	687b      	ldr	r3, [r7, #4]
    7a0a:	681b      	ldr	r3, [r3, #0]
    7a0c:	f023 0202 	bic.w	r2, r3, #2
    7a10:	687b      	ldr	r3, [r7, #4]
    7a12:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7a14:	2103      	movs	r1, #3
    7a16:	6878      	ldr	r0, [r7, #4]
    7a18:	4b02      	ldr	r3, [pc, #8]	; (7a24 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    7a1a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7a1c:	bf00      	nop
    7a1e:	3708      	adds	r7, #8
    7a20:	46bd      	mov	sp, r7
    7a22:	bd80      	pop	{r7, pc}
    7a24:	0000788d 	.word	0x0000788d

00007a28 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    7a28:	b480      	push	{r7}
    7a2a:	b085      	sub	sp, #20
    7a2c:	af00      	add	r7, sp, #0
    7a2e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7a30:	687b      	ldr	r3, [r7, #4]
    7a32:	681b      	ldr	r3, [r3, #0]
    7a34:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7a36:	68fb      	ldr	r3, [r7, #12]
    7a38:	089b      	lsrs	r3, r3, #2
    7a3a:	f003 0303 	and.w	r3, r3, #3
    7a3e:	60fb      	str	r3, [r7, #12]
	return tmp;
    7a40:	68fb      	ldr	r3, [r7, #12]
}
    7a42:	4618      	mov	r0, r3
    7a44:	3714      	adds	r7, #20
    7a46:	46bd      	mov	sp, r7
    7a48:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a4c:	4770      	bx	lr
	...

00007a50 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    7a50:	b580      	push	{r7, lr}
    7a52:	b084      	sub	sp, #16
    7a54:	af00      	add	r7, sp, #0
    7a56:	6078      	str	r0, [r7, #4]
    7a58:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7a5a:	2103      	movs	r1, #3
    7a5c:	6878      	ldr	r0, [r7, #4]
    7a5e:	4b07      	ldr	r3, [pc, #28]	; (7a7c <hri_tc_get_CTRLA_reg+0x2c>)
    7a60:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7a62:	687b      	ldr	r3, [r7, #4]
    7a64:	681b      	ldr	r3, [r3, #0]
    7a66:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7a68:	68fa      	ldr	r2, [r7, #12]
    7a6a:	683b      	ldr	r3, [r7, #0]
    7a6c:	4013      	ands	r3, r2
    7a6e:	60fb      	str	r3, [r7, #12]
	return tmp;
    7a70:	68fb      	ldr	r3, [r7, #12]
}
    7a72:	4618      	mov	r0, r3
    7a74:	3710      	adds	r7, #16
    7a76:	46bd      	mov	sp, r7
    7a78:	bd80      	pop	{r7, pc}
    7a7a:	bf00      	nop
    7a7c:	0000788d 	.word	0x0000788d

00007a80 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    7a80:	b580      	push	{r7, lr}
    7a82:	b082      	sub	sp, #8
    7a84:	af00      	add	r7, sp, #0
    7a86:	6078      	str	r0, [r7, #4]
    7a88:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7a8a:	687b      	ldr	r3, [r7, #4]
    7a8c:	683a      	ldr	r2, [r7, #0]
    7a8e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7a90:	2103      	movs	r1, #3
    7a92:	6878      	ldr	r0, [r7, #4]
    7a94:	4b02      	ldr	r3, [pc, #8]	; (7aa0 <hri_tc_write_CTRLA_reg+0x20>)
    7a96:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7a98:	bf00      	nop
    7a9a:	3708      	adds	r7, #8
    7a9c:	46bd      	mov	sp, r7
    7a9e:	bd80      	pop	{r7, pc}
    7aa0:	0000788d 	.word	0x0000788d

00007aa4 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    7aa4:	b480      	push	{r7}
    7aa6:	b083      	sub	sp, #12
    7aa8:	af00      	add	r7, sp, #0
    7aaa:	6078      	str	r0, [r7, #4]
    7aac:	460b      	mov	r3, r1
    7aae:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7ab0:	687b      	ldr	r3, [r7, #4]
    7ab2:	887a      	ldrh	r2, [r7, #2]
    7ab4:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    7ab6:	bf00      	nop
    7ab8:	370c      	adds	r7, #12
    7aba:	46bd      	mov	sp, r7
    7abc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ac0:	4770      	bx	lr

00007ac2 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    7ac2:	b480      	push	{r7}
    7ac4:	b083      	sub	sp, #12
    7ac6:	af00      	add	r7, sp, #0
    7ac8:	6078      	str	r0, [r7, #4]
    7aca:	460b      	mov	r3, r1
    7acc:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    7ace:	687b      	ldr	r3, [r7, #4]
    7ad0:	78fa      	ldrb	r2, [r7, #3]
    7ad2:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    7ad4:	bf00      	nop
    7ad6:	370c      	adds	r7, #12
    7ad8:	46bd      	mov	sp, r7
    7ada:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ade:	4770      	bx	lr

00007ae0 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    7ae0:	b480      	push	{r7}
    7ae2:	b083      	sub	sp, #12
    7ae4:	af00      	add	r7, sp, #0
    7ae6:	6078      	str	r0, [r7, #4]
    7ae8:	460b      	mov	r3, r1
    7aea:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7aec:	687b      	ldr	r3, [r7, #4]
    7aee:	78fa      	ldrb	r2, [r7, #3]
    7af0:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    7af2:	bf00      	nop
    7af4:	370c      	adds	r7, #12
    7af6:	46bd      	mov	sp, r7
    7af8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7afc:	4770      	bx	lr
	...

00007b00 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    7b00:	b580      	push	{r7, lr}
    7b02:	b082      	sub	sp, #8
    7b04:	af00      	add	r7, sp, #0
    7b06:	6078      	str	r0, [r7, #4]
    7b08:	460b      	mov	r3, r1
    7b0a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    7b0c:	687b      	ldr	r3, [r7, #4]
    7b0e:	78fa      	ldrb	r2, [r7, #3]
    7b10:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7b12:	2120      	movs	r1, #32
    7b14:	6878      	ldr	r0, [r7, #4]
    7b16:	4b03      	ldr	r3, [pc, #12]	; (7b24 <hri_tccount8_write_PER_reg+0x24>)
    7b18:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7b1a:	bf00      	nop
    7b1c:	3708      	adds	r7, #8
    7b1e:	46bd      	mov	sp, r7
    7b20:	bd80      	pop	{r7, pc}
    7b22:	bf00      	nop
    7b24:	0000788d 	.word	0x0000788d

00007b28 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    7b28:	b580      	push	{r7, lr}
    7b2a:	b082      	sub	sp, #8
    7b2c:	af00      	add	r7, sp, #0
    7b2e:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7b30:	2120      	movs	r1, #32
    7b32:	6878      	ldr	r0, [r7, #4]
    7b34:	4b04      	ldr	r3, [pc, #16]	; (7b48 <hri_tccount8_read_PER_reg+0x20>)
    7b36:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    7b38:	687b      	ldr	r3, [r7, #4]
    7b3a:	7edb      	ldrb	r3, [r3, #27]
    7b3c:	b2db      	uxtb	r3, r3
}
    7b3e:	4618      	mov	r0, r3
    7b40:	3708      	adds	r7, #8
    7b42:	46bd      	mov	sp, r7
    7b44:	bd80      	pop	{r7, pc}
    7b46:	bf00      	nop
    7b48:	0000788d 	.word	0x0000788d

00007b4c <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    7b4c:	b580      	push	{r7, lr}
    7b4e:	b082      	sub	sp, #8
    7b50:	af00      	add	r7, sp, #0
    7b52:	6078      	str	r0, [r7, #4]
    7b54:	460b      	mov	r3, r1
    7b56:	70fb      	strb	r3, [r7, #3]
    7b58:	4613      	mov	r3, r2
    7b5a:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7b5c:	78fb      	ldrb	r3, [r7, #3]
    7b5e:	687a      	ldr	r2, [r7, #4]
    7b60:	4413      	add	r3, r2
    7b62:	78ba      	ldrb	r2, [r7, #2]
    7b64:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7b66:	21c0      	movs	r1, #192	; 0xc0
    7b68:	6878      	ldr	r0, [r7, #4]
    7b6a:	4b03      	ldr	r3, [pc, #12]	; (7b78 <hri_tccount8_write_CC_reg+0x2c>)
    7b6c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7b6e:	bf00      	nop
    7b70:	3708      	adds	r7, #8
    7b72:	46bd      	mov	sp, r7
    7b74:	bd80      	pop	{r7, pc}
    7b76:	bf00      	nop
    7b78:	0000788d 	.word	0x0000788d

00007b7c <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    7b7c:	b580      	push	{r7, lr}
    7b7e:	b082      	sub	sp, #8
    7b80:	af00      	add	r7, sp, #0
    7b82:	6078      	str	r0, [r7, #4]
    7b84:	460b      	mov	r3, r1
    7b86:	70fb      	strb	r3, [r7, #3]
    7b88:	4613      	mov	r3, r2
    7b8a:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7b8c:	78fb      	ldrb	r3, [r7, #3]
    7b8e:	687a      	ldr	r2, [r7, #4]
    7b90:	330c      	adds	r3, #12
    7b92:	005b      	lsls	r3, r3, #1
    7b94:	4413      	add	r3, r2
    7b96:	883a      	ldrh	r2, [r7, #0]
    7b98:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7b9a:	21c0      	movs	r1, #192	; 0xc0
    7b9c:	6878      	ldr	r0, [r7, #4]
    7b9e:	4b03      	ldr	r3, [pc, #12]	; (7bac <hri_tccount16_write_CC_reg+0x30>)
    7ba0:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7ba2:	bf00      	nop
    7ba4:	3708      	adds	r7, #8
    7ba6:	46bd      	mov	sp, r7
    7ba8:	bd80      	pop	{r7, pc}
    7baa:	bf00      	nop
    7bac:	0000788d 	.word	0x0000788d

00007bb0 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    7bb0:	b580      	push	{r7, lr}
    7bb2:	b082      	sub	sp, #8
    7bb4:	af00      	add	r7, sp, #0
    7bb6:	6078      	str	r0, [r7, #4]
    7bb8:	460b      	mov	r3, r1
    7bba:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7bbc:	21c0      	movs	r1, #192	; 0xc0
    7bbe:	6878      	ldr	r0, [r7, #4]
    7bc0:	4b06      	ldr	r3, [pc, #24]	; (7bdc <hri_tccount16_read_CC_reg+0x2c>)
    7bc2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    7bc4:	78fb      	ldrb	r3, [r7, #3]
    7bc6:	687a      	ldr	r2, [r7, #4]
    7bc8:	330c      	adds	r3, #12
    7bca:	005b      	lsls	r3, r3, #1
    7bcc:	4413      	add	r3, r2
    7bce:	889b      	ldrh	r3, [r3, #4]
    7bd0:	b29b      	uxth	r3, r3
}
    7bd2:	4618      	mov	r0, r3
    7bd4:	3708      	adds	r7, #8
    7bd6:	46bd      	mov	sp, r7
    7bd8:	bd80      	pop	{r7, pc}
    7bda:	bf00      	nop
    7bdc:	0000788d 	.word	0x0000788d

00007be0 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    7be0:	b580      	push	{r7, lr}
    7be2:	b084      	sub	sp, #16
    7be4:	af00      	add	r7, sp, #0
    7be6:	60f8      	str	r0, [r7, #12]
    7be8:	460b      	mov	r3, r1
    7bea:	607a      	str	r2, [r7, #4]
    7bec:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7bee:	7afb      	ldrb	r3, [r7, #11]
    7bf0:	68fa      	ldr	r2, [r7, #12]
    7bf2:	3306      	adds	r3, #6
    7bf4:	009b      	lsls	r3, r3, #2
    7bf6:	4413      	add	r3, r2
    7bf8:	687a      	ldr	r2, [r7, #4]
    7bfa:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7bfc:	21c0      	movs	r1, #192	; 0xc0
    7bfe:	68f8      	ldr	r0, [r7, #12]
    7c00:	4b02      	ldr	r3, [pc, #8]	; (7c0c <hri_tccount32_write_CC_reg+0x2c>)
    7c02:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7c04:	bf00      	nop
    7c06:	3710      	adds	r7, #16
    7c08:	46bd      	mov	sp, r7
    7c0a:	bd80      	pop	{r7, pc}
    7c0c:	0000788d 	.word	0x0000788d

00007c10 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    7c10:	b580      	push	{r7, lr}
    7c12:	b082      	sub	sp, #8
    7c14:	af00      	add	r7, sp, #0
    7c16:	6078      	str	r0, [r7, #4]
    7c18:	460b      	mov	r3, r1
    7c1a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7c1c:	21c0      	movs	r1, #192	; 0xc0
    7c1e:	6878      	ldr	r0, [r7, #4]
    7c20:	4b05      	ldr	r3, [pc, #20]	; (7c38 <hri_tccount32_read_CC_reg+0x28>)
    7c22:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    7c24:	78fb      	ldrb	r3, [r7, #3]
    7c26:	687a      	ldr	r2, [r7, #4]
    7c28:	3306      	adds	r3, #6
    7c2a:	009b      	lsls	r3, r3, #2
    7c2c:	4413      	add	r3, r2
    7c2e:	685b      	ldr	r3, [r3, #4]
}
    7c30:	4618      	mov	r0, r3
    7c32:	3708      	adds	r7, #8
    7c34:	46bd      	mov	sp, r7
    7c36:	bd80      	pop	{r7, pc}
    7c38:	0000788d 	.word	0x0000788d

00007c3c <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    7c3c:	b580      	push	{r7, lr}
    7c3e:	b084      	sub	sp, #16
    7c40:	af00      	add	r7, sp, #0
    7c42:	6078      	str	r0, [r7, #4]
    7c44:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    7c46:	6838      	ldr	r0, [r7, #0]
    7c48:	4b93      	ldr	r3, [pc, #588]	; (7e98 <_tc_timer_init+0x25c>)
    7c4a:	4798      	blx	r3
    7c4c:	4603      	mov	r3, r0
    7c4e:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    7c50:	687b      	ldr	r3, [r7, #4]
    7c52:	683a      	ldr	r2, [r7, #0]
    7c54:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7c56:	22a4      	movs	r2, #164	; 0xa4
    7c58:	4990      	ldr	r1, [pc, #576]	; (7e9c <_tc_timer_init+0x260>)
    7c5a:	2001      	movs	r0, #1
    7c5c:	4b90      	ldr	r3, [pc, #576]	; (7ea0 <_tc_timer_init+0x264>)
    7c5e:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7c60:	2101      	movs	r1, #1
    7c62:	6838      	ldr	r0, [r7, #0]
    7c64:	4b8f      	ldr	r3, [pc, #572]	; (7ea4 <_tc_timer_init+0x268>)
    7c66:	4798      	blx	r3
    7c68:	4603      	mov	r3, r0
    7c6a:	f083 0301 	eor.w	r3, r3, #1
    7c6e:	b2db      	uxtb	r3, r3
    7c70:	2b00      	cmp	r3, #0
    7c72:	d011      	beq.n	7c98 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7c74:	2102      	movs	r1, #2
    7c76:	6838      	ldr	r0, [r7, #0]
    7c78:	4b8b      	ldr	r3, [pc, #556]	; (7ea8 <_tc_timer_init+0x26c>)
    7c7a:	4798      	blx	r3
    7c7c:	4603      	mov	r3, r0
    7c7e:	2b00      	cmp	r3, #0
    7c80:	d006      	beq.n	7c90 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7c82:	6838      	ldr	r0, [r7, #0]
    7c84:	4b89      	ldr	r3, [pc, #548]	; (7eac <_tc_timer_init+0x270>)
    7c86:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7c88:	2102      	movs	r1, #2
    7c8a:	6838      	ldr	r0, [r7, #0]
    7c8c:	4b88      	ldr	r3, [pc, #544]	; (7eb0 <_tc_timer_init+0x274>)
    7c8e:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7c90:	2101      	movs	r1, #1
    7c92:	6838      	ldr	r0, [r7, #0]
    7c94:	4b87      	ldr	r3, [pc, #540]	; (7eb4 <_tc_timer_init+0x278>)
    7c96:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7c98:	2101      	movs	r1, #1
    7c9a:	6838      	ldr	r0, [r7, #0]
    7c9c:	4b84      	ldr	r3, [pc, #528]	; (7eb0 <_tc_timer_init+0x274>)
    7c9e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7ca0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ca4:	4984      	ldr	r1, [pc, #528]	; (7eb8 <_tc_timer_init+0x27c>)
    7ca6:	4613      	mov	r3, r2
    7ca8:	009b      	lsls	r3, r3, #2
    7caa:	4413      	add	r3, r2
    7cac:	009b      	lsls	r3, r3, #2
    7cae:	440b      	add	r3, r1
    7cb0:	3304      	adds	r3, #4
    7cb2:	681b      	ldr	r3, [r3, #0]
    7cb4:	4619      	mov	r1, r3
    7cb6:	6838      	ldr	r0, [r7, #0]
    7cb8:	4b7e      	ldr	r3, [pc, #504]	; (7eb4 <_tc_timer_init+0x278>)
    7cba:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7cbc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7cc0:	497d      	ldr	r1, [pc, #500]	; (7eb8 <_tc_timer_init+0x27c>)
    7cc2:	4613      	mov	r3, r2
    7cc4:	009b      	lsls	r3, r3, #2
    7cc6:	4413      	add	r3, r2
    7cc8:	009b      	lsls	r3, r3, #2
    7cca:	440b      	add	r3, r1
    7ccc:	330a      	adds	r3, #10
    7cce:	781b      	ldrb	r3, [r3, #0]
    7cd0:	4619      	mov	r1, r3
    7cd2:	6838      	ldr	r0, [r7, #0]
    7cd4:	4b79      	ldr	r3, [pc, #484]	; (7ebc <_tc_timer_init+0x280>)
    7cd6:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7cd8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7cdc:	4976      	ldr	r1, [pc, #472]	; (7eb8 <_tc_timer_init+0x27c>)
    7cde:	4613      	mov	r3, r2
    7ce0:	009b      	lsls	r3, r3, #2
    7ce2:	4413      	add	r3, r2
    7ce4:	009b      	lsls	r3, r3, #2
    7ce6:	440b      	add	r3, r1
    7ce8:	3308      	adds	r3, #8
    7cea:	881b      	ldrh	r3, [r3, #0]
    7cec:	4619      	mov	r1, r3
    7cee:	6838      	ldr	r0, [r7, #0]
    7cf0:	4b73      	ldr	r3, [pc, #460]	; (7ec0 <_tc_timer_init+0x284>)
    7cf2:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7cf4:	2101      	movs	r1, #1
    7cf6:	6838      	ldr	r0, [r7, #0]
    7cf8:	4b72      	ldr	r3, [pc, #456]	; (7ec4 <_tc_timer_init+0x288>)
    7cfa:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7cfc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d00:	496d      	ldr	r1, [pc, #436]	; (7eb8 <_tc_timer_init+0x27c>)
    7d02:	4613      	mov	r3, r2
    7d04:	009b      	lsls	r3, r3, #2
    7d06:	4413      	add	r3, r2
    7d08:	009b      	lsls	r3, r3, #2
    7d0a:	440b      	add	r3, r1
    7d0c:	3304      	adds	r3, #4
    7d0e:	681b      	ldr	r3, [r3, #0]
    7d10:	f003 030c 	and.w	r3, r3, #12
    7d14:	2b08      	cmp	r3, #8
    7d16:	d11e      	bne.n	7d56 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7d18:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d1c:	4966      	ldr	r1, [pc, #408]	; (7eb8 <_tc_timer_init+0x27c>)
    7d1e:	4613      	mov	r3, r2
    7d20:	009b      	lsls	r3, r3, #2
    7d22:	4413      	add	r3, r2
    7d24:	009b      	lsls	r3, r3, #2
    7d26:	440b      	add	r3, r1
    7d28:	330c      	adds	r3, #12
    7d2a:	681b      	ldr	r3, [r3, #0]
    7d2c:	461a      	mov	r2, r3
    7d2e:	2100      	movs	r1, #0
    7d30:	6838      	ldr	r0, [r7, #0]
    7d32:	4b65      	ldr	r3, [pc, #404]	; (7ec8 <_tc_timer_init+0x28c>)
    7d34:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7d36:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d3a:	495f      	ldr	r1, [pc, #380]	; (7eb8 <_tc_timer_init+0x27c>)
    7d3c:	4613      	mov	r3, r2
    7d3e:	009b      	lsls	r3, r3, #2
    7d40:	4413      	add	r3, r2
    7d42:	009b      	lsls	r3, r3, #2
    7d44:	440b      	add	r3, r1
    7d46:	3310      	adds	r3, #16
    7d48:	681b      	ldr	r3, [r3, #0]
    7d4a:	461a      	mov	r2, r3
    7d4c:	2101      	movs	r1, #1
    7d4e:	6838      	ldr	r0, [r7, #0]
    7d50:	4b5d      	ldr	r3, [pc, #372]	; (7ec8 <_tc_timer_init+0x28c>)
    7d52:	4798      	blx	r3
    7d54:	e06a      	b.n	7e2c <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7d56:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d5a:	4957      	ldr	r1, [pc, #348]	; (7eb8 <_tc_timer_init+0x27c>)
    7d5c:	4613      	mov	r3, r2
    7d5e:	009b      	lsls	r3, r3, #2
    7d60:	4413      	add	r3, r2
    7d62:	009b      	lsls	r3, r3, #2
    7d64:	440b      	add	r3, r1
    7d66:	3304      	adds	r3, #4
    7d68:	681b      	ldr	r3, [r3, #0]
    7d6a:	f003 030c 	and.w	r3, r3, #12
    7d6e:	2b00      	cmp	r3, #0
    7d70:	d120      	bne.n	7db4 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7d72:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d76:	4950      	ldr	r1, [pc, #320]	; (7eb8 <_tc_timer_init+0x27c>)
    7d78:	4613      	mov	r3, r2
    7d7a:	009b      	lsls	r3, r3, #2
    7d7c:	4413      	add	r3, r2
    7d7e:	009b      	lsls	r3, r3, #2
    7d80:	440b      	add	r3, r1
    7d82:	330c      	adds	r3, #12
    7d84:	681b      	ldr	r3, [r3, #0]
    7d86:	b29b      	uxth	r3, r3
    7d88:	461a      	mov	r2, r3
    7d8a:	2100      	movs	r1, #0
    7d8c:	6838      	ldr	r0, [r7, #0]
    7d8e:	4b4f      	ldr	r3, [pc, #316]	; (7ecc <_tc_timer_init+0x290>)
    7d90:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7d92:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d96:	4948      	ldr	r1, [pc, #288]	; (7eb8 <_tc_timer_init+0x27c>)
    7d98:	4613      	mov	r3, r2
    7d9a:	009b      	lsls	r3, r3, #2
    7d9c:	4413      	add	r3, r2
    7d9e:	009b      	lsls	r3, r3, #2
    7da0:	440b      	add	r3, r1
    7da2:	3310      	adds	r3, #16
    7da4:	681b      	ldr	r3, [r3, #0]
    7da6:	b29b      	uxth	r3, r3
    7da8:	461a      	mov	r2, r3
    7daa:	2101      	movs	r1, #1
    7dac:	6838      	ldr	r0, [r7, #0]
    7dae:	4b47      	ldr	r3, [pc, #284]	; (7ecc <_tc_timer_init+0x290>)
    7db0:	4798      	blx	r3
    7db2:	e03b      	b.n	7e2c <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7db4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7db8:	493f      	ldr	r1, [pc, #252]	; (7eb8 <_tc_timer_init+0x27c>)
    7dba:	4613      	mov	r3, r2
    7dbc:	009b      	lsls	r3, r3, #2
    7dbe:	4413      	add	r3, r2
    7dc0:	009b      	lsls	r3, r3, #2
    7dc2:	440b      	add	r3, r1
    7dc4:	3304      	adds	r3, #4
    7dc6:	681b      	ldr	r3, [r3, #0]
    7dc8:	f003 030c 	and.w	r3, r3, #12
    7dcc:	2b04      	cmp	r3, #4
    7dce:	d12d      	bne.n	7e2c <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7dd0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7dd4:	4938      	ldr	r1, [pc, #224]	; (7eb8 <_tc_timer_init+0x27c>)
    7dd6:	4613      	mov	r3, r2
    7dd8:	009b      	lsls	r3, r3, #2
    7dda:	4413      	add	r3, r2
    7ddc:	009b      	lsls	r3, r3, #2
    7dde:	440b      	add	r3, r1
    7de0:	330c      	adds	r3, #12
    7de2:	681b      	ldr	r3, [r3, #0]
    7de4:	b2db      	uxtb	r3, r3
    7de6:	461a      	mov	r2, r3
    7de8:	2100      	movs	r1, #0
    7dea:	6838      	ldr	r0, [r7, #0]
    7dec:	4b38      	ldr	r3, [pc, #224]	; (7ed0 <_tc_timer_init+0x294>)
    7dee:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7df0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7df4:	4930      	ldr	r1, [pc, #192]	; (7eb8 <_tc_timer_init+0x27c>)
    7df6:	4613      	mov	r3, r2
    7df8:	009b      	lsls	r3, r3, #2
    7dfa:	4413      	add	r3, r2
    7dfc:	009b      	lsls	r3, r3, #2
    7dfe:	440b      	add	r3, r1
    7e00:	3310      	adds	r3, #16
    7e02:	681b      	ldr	r3, [r3, #0]
    7e04:	b2db      	uxtb	r3, r3
    7e06:	461a      	mov	r2, r3
    7e08:	2101      	movs	r1, #1
    7e0a:	6838      	ldr	r0, [r7, #0]
    7e0c:	4b30      	ldr	r3, [pc, #192]	; (7ed0 <_tc_timer_init+0x294>)
    7e0e:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7e10:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e14:	4928      	ldr	r1, [pc, #160]	; (7eb8 <_tc_timer_init+0x27c>)
    7e16:	4613      	mov	r3, r2
    7e18:	009b      	lsls	r3, r3, #2
    7e1a:	4413      	add	r3, r2
    7e1c:	009b      	lsls	r3, r3, #2
    7e1e:	440b      	add	r3, r1
    7e20:	330b      	adds	r3, #11
    7e22:	781b      	ldrb	r3, [r3, #0]
    7e24:	4619      	mov	r1, r3
    7e26:	6838      	ldr	r0, [r7, #0]
    7e28:	4b2a      	ldr	r3, [pc, #168]	; (7ed4 <_tc_timer_init+0x298>)
    7e2a:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    7e2c:	6838      	ldr	r0, [r7, #0]
    7e2e:	4b2a      	ldr	r3, [pc, #168]	; (7ed8 <_tc_timer_init+0x29c>)
    7e30:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    7e32:	6879      	ldr	r1, [r7, #4]
    7e34:	6838      	ldr	r0, [r7, #0]
    7e36:	4b29      	ldr	r3, [pc, #164]	; (7edc <_tc_timer_init+0x2a0>)
    7e38:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7e3a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e3e:	491e      	ldr	r1, [pc, #120]	; (7eb8 <_tc_timer_init+0x27c>)
    7e40:	4613      	mov	r3, r2
    7e42:	009b      	lsls	r3, r3, #2
    7e44:	4413      	add	r3, r2
    7e46:	009b      	lsls	r3, r3, #2
    7e48:	440b      	add	r3, r1
    7e4a:	3302      	adds	r3, #2
    7e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
    7e50:	4618      	mov	r0, r3
    7e52:	4b23      	ldr	r3, [pc, #140]	; (7ee0 <_tc_timer_init+0x2a4>)
    7e54:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7e56:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e5a:	4917      	ldr	r1, [pc, #92]	; (7eb8 <_tc_timer_init+0x27c>)
    7e5c:	4613      	mov	r3, r2
    7e5e:	009b      	lsls	r3, r3, #2
    7e60:	4413      	add	r3, r2
    7e62:	009b      	lsls	r3, r3, #2
    7e64:	440b      	add	r3, r1
    7e66:	3302      	adds	r3, #2
    7e68:	f9b3 3000 	ldrsh.w	r3, [r3]
    7e6c:	4618      	mov	r0, r3
    7e6e:	4b1d      	ldr	r3, [pc, #116]	; (7ee4 <_tc_timer_init+0x2a8>)
    7e70:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7e72:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e76:	4910      	ldr	r1, [pc, #64]	; (7eb8 <_tc_timer_init+0x27c>)
    7e78:	4613      	mov	r3, r2
    7e7a:	009b      	lsls	r3, r3, #2
    7e7c:	4413      	add	r3, r2
    7e7e:	009b      	lsls	r3, r3, #2
    7e80:	440b      	add	r3, r1
    7e82:	3302      	adds	r3, #2
    7e84:	f9b3 3000 	ldrsh.w	r3, [r3]
    7e88:	4618      	mov	r0, r3
    7e8a:	4b17      	ldr	r3, [pc, #92]	; (7ee8 <_tc_timer_init+0x2ac>)
    7e8c:	4798      	blx	r3

	return ERR_NONE;
    7e8e:	2300      	movs	r3, #0
}
    7e90:	4618      	mov	r0, r3
    7e92:	3710      	adds	r7, #16
    7e94:	46bd      	mov	sp, r7
    7e96:	bd80      	pop	{r7, pc}
    7e98:	000084cd 	.word	0x000084cd
    7e9c:	0000f0b4 	.word	0x0000f0b4
    7ea0:	000038b5 	.word	0x000038b5
    7ea4:	000078b1 	.word	0x000078b1
    7ea8:	00007a51 	.word	0x00007a51
    7eac:	00007a01 	.word	0x00007a01
    7eb0:	0000788d 	.word	0x0000788d
    7eb4:	00007a81 	.word	0x00007a81
    7eb8:	20000110 	.word	0x20000110
    7ebc:	00007ae1 	.word	0x00007ae1
    7ec0:	00007aa5 	.word	0x00007aa5
    7ec4:	00007ac3 	.word	0x00007ac3
    7ec8:	00007be1 	.word	0x00007be1
    7ecc:	00007b7d 	.word	0x00007b7d
    7ed0:	00007b4d 	.word	0x00007b4d
    7ed4:	00007b01 	.word	0x00007b01
    7ed8:	00007935 	.word	0x00007935
    7edc:	00008535 	.word	0x00008535
    7ee0:	0000780d 	.word	0x0000780d
    7ee4:	00007851 	.word	0x00007851
    7ee8:	000077d1 	.word	0x000077d1

00007eec <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7eec:	b580      	push	{r7, lr}
    7eee:	b084      	sub	sp, #16
    7ef0:	af00      	add	r7, sp, #0
    7ef2:	6078      	str	r0, [r7, #4]
    7ef4:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7ef6:	6838      	ldr	r0, [r7, #0]
    7ef8:	4b73      	ldr	r3, [pc, #460]	; (80c8 <_pwm_init+0x1dc>)
    7efa:	4798      	blx	r3
    7efc:	4603      	mov	r3, r0
    7efe:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    7f00:	687b      	ldr	r3, [r7, #4]
    7f02:	683a      	ldr	r2, [r7, #0]
    7f04:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7f06:	2101      	movs	r1, #1
    7f08:	6838      	ldr	r0, [r7, #0]
    7f0a:	4b70      	ldr	r3, [pc, #448]	; (80cc <_pwm_init+0x1e0>)
    7f0c:	4798      	blx	r3
    7f0e:	4603      	mov	r3, r0
    7f10:	f083 0301 	eor.w	r3, r3, #1
    7f14:	b2db      	uxtb	r3, r3
    7f16:	2b00      	cmp	r3, #0
    7f18:	d011      	beq.n	7f3e <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7f1a:	2102      	movs	r1, #2
    7f1c:	6838      	ldr	r0, [r7, #0]
    7f1e:	4b6c      	ldr	r3, [pc, #432]	; (80d0 <_pwm_init+0x1e4>)
    7f20:	4798      	blx	r3
    7f22:	4603      	mov	r3, r0
    7f24:	2b00      	cmp	r3, #0
    7f26:	d006      	beq.n	7f36 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7f28:	6838      	ldr	r0, [r7, #0]
    7f2a:	4b6a      	ldr	r3, [pc, #424]	; (80d4 <_pwm_init+0x1e8>)
    7f2c:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7f2e:	2102      	movs	r1, #2
    7f30:	6838      	ldr	r0, [r7, #0]
    7f32:	4b69      	ldr	r3, [pc, #420]	; (80d8 <_pwm_init+0x1ec>)
    7f34:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7f36:	2101      	movs	r1, #1
    7f38:	6838      	ldr	r0, [r7, #0]
    7f3a:	4b68      	ldr	r3, [pc, #416]	; (80dc <_pwm_init+0x1f0>)
    7f3c:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7f3e:	2101      	movs	r1, #1
    7f40:	6838      	ldr	r0, [r7, #0]
    7f42:	4b65      	ldr	r3, [pc, #404]	; (80d8 <_pwm_init+0x1ec>)
    7f44:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7f46:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f4a:	4965      	ldr	r1, [pc, #404]	; (80e0 <_pwm_init+0x1f4>)
    7f4c:	4613      	mov	r3, r2
    7f4e:	009b      	lsls	r3, r3, #2
    7f50:	4413      	add	r3, r2
    7f52:	009b      	lsls	r3, r3, #2
    7f54:	440b      	add	r3, r1
    7f56:	3304      	adds	r3, #4
    7f58:	681b      	ldr	r3, [r3, #0]
    7f5a:	4619      	mov	r1, r3
    7f5c:	6838      	ldr	r0, [r7, #0]
    7f5e:	4b5f      	ldr	r3, [pc, #380]	; (80dc <_pwm_init+0x1f0>)
    7f60:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7f62:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f66:	495e      	ldr	r1, [pc, #376]	; (80e0 <_pwm_init+0x1f4>)
    7f68:	4613      	mov	r3, r2
    7f6a:	009b      	lsls	r3, r3, #2
    7f6c:	4413      	add	r3, r2
    7f6e:	009b      	lsls	r3, r3, #2
    7f70:	440b      	add	r3, r1
    7f72:	330a      	adds	r3, #10
    7f74:	781b      	ldrb	r3, [r3, #0]
    7f76:	4619      	mov	r1, r3
    7f78:	6838      	ldr	r0, [r7, #0]
    7f7a:	4b5a      	ldr	r3, [pc, #360]	; (80e4 <_pwm_init+0x1f8>)
    7f7c:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7f7e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f82:	4957      	ldr	r1, [pc, #348]	; (80e0 <_pwm_init+0x1f4>)
    7f84:	4613      	mov	r3, r2
    7f86:	009b      	lsls	r3, r3, #2
    7f88:	4413      	add	r3, r2
    7f8a:	009b      	lsls	r3, r3, #2
    7f8c:	440b      	add	r3, r1
    7f8e:	3308      	adds	r3, #8
    7f90:	881b      	ldrh	r3, [r3, #0]
    7f92:	4619      	mov	r1, r3
    7f94:	6838      	ldr	r0, [r7, #0]
    7f96:	4b54      	ldr	r3, [pc, #336]	; (80e8 <_pwm_init+0x1fc>)
    7f98:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    7f9a:	2103      	movs	r1, #3
    7f9c:	6838      	ldr	r0, [r7, #0]
    7f9e:	4b53      	ldr	r3, [pc, #332]	; (80ec <_pwm_init+0x200>)
    7fa0:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7fa2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7fa6:	494e      	ldr	r1, [pc, #312]	; (80e0 <_pwm_init+0x1f4>)
    7fa8:	4613      	mov	r3, r2
    7faa:	009b      	lsls	r3, r3, #2
    7fac:	4413      	add	r3, r2
    7fae:	009b      	lsls	r3, r3, #2
    7fb0:	440b      	add	r3, r1
    7fb2:	3304      	adds	r3, #4
    7fb4:	681b      	ldr	r3, [r3, #0]
    7fb6:	f003 030c 	and.w	r3, r3, #12
    7fba:	2b08      	cmp	r3, #8
    7fbc:	d11e      	bne.n	7ffc <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7fbe:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7fc2:	4947      	ldr	r1, [pc, #284]	; (80e0 <_pwm_init+0x1f4>)
    7fc4:	4613      	mov	r3, r2
    7fc6:	009b      	lsls	r3, r3, #2
    7fc8:	4413      	add	r3, r2
    7fca:	009b      	lsls	r3, r3, #2
    7fcc:	440b      	add	r3, r1
    7fce:	330c      	adds	r3, #12
    7fd0:	681b      	ldr	r3, [r3, #0]
    7fd2:	461a      	mov	r2, r3
    7fd4:	2100      	movs	r1, #0
    7fd6:	6838      	ldr	r0, [r7, #0]
    7fd8:	4b45      	ldr	r3, [pc, #276]	; (80f0 <_pwm_init+0x204>)
    7fda:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7fdc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7fe0:	493f      	ldr	r1, [pc, #252]	; (80e0 <_pwm_init+0x1f4>)
    7fe2:	4613      	mov	r3, r2
    7fe4:	009b      	lsls	r3, r3, #2
    7fe6:	4413      	add	r3, r2
    7fe8:	009b      	lsls	r3, r3, #2
    7fea:	440b      	add	r3, r1
    7fec:	3310      	adds	r3, #16
    7fee:	681b      	ldr	r3, [r3, #0]
    7ff0:	461a      	mov	r2, r3
    7ff2:	2101      	movs	r1, #1
    7ff4:	6838      	ldr	r0, [r7, #0]
    7ff6:	4b3e      	ldr	r3, [pc, #248]	; (80f0 <_pwm_init+0x204>)
    7ff8:	4798      	blx	r3
    7ffa:	e031      	b.n	8060 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7ffc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8000:	4937      	ldr	r1, [pc, #220]	; (80e0 <_pwm_init+0x1f4>)
    8002:	4613      	mov	r3, r2
    8004:	009b      	lsls	r3, r3, #2
    8006:	4413      	add	r3, r2
    8008:	009b      	lsls	r3, r3, #2
    800a:	440b      	add	r3, r1
    800c:	3304      	adds	r3, #4
    800e:	681b      	ldr	r3, [r3, #0]
    8010:	f003 030c 	and.w	r3, r3, #12
    8014:	2b00      	cmp	r3, #0
    8016:	d120      	bne.n	805a <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8018:	f997 200f 	ldrsb.w	r2, [r7, #15]
    801c:	4930      	ldr	r1, [pc, #192]	; (80e0 <_pwm_init+0x1f4>)
    801e:	4613      	mov	r3, r2
    8020:	009b      	lsls	r3, r3, #2
    8022:	4413      	add	r3, r2
    8024:	009b      	lsls	r3, r3, #2
    8026:	440b      	add	r3, r1
    8028:	330c      	adds	r3, #12
    802a:	681b      	ldr	r3, [r3, #0]
    802c:	b29b      	uxth	r3, r3
    802e:	461a      	mov	r2, r3
    8030:	2100      	movs	r1, #0
    8032:	6838      	ldr	r0, [r7, #0]
    8034:	4b2f      	ldr	r3, [pc, #188]	; (80f4 <_pwm_init+0x208>)
    8036:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8038:	f997 200f 	ldrsb.w	r2, [r7, #15]
    803c:	4928      	ldr	r1, [pc, #160]	; (80e0 <_pwm_init+0x1f4>)
    803e:	4613      	mov	r3, r2
    8040:	009b      	lsls	r3, r3, #2
    8042:	4413      	add	r3, r2
    8044:	009b      	lsls	r3, r3, #2
    8046:	440b      	add	r3, r1
    8048:	3310      	adds	r3, #16
    804a:	681b      	ldr	r3, [r3, #0]
    804c:	b29b      	uxth	r3, r3
    804e:	461a      	mov	r2, r3
    8050:	2101      	movs	r1, #1
    8052:	6838      	ldr	r0, [r7, #0]
    8054:	4b27      	ldr	r3, [pc, #156]	; (80f4 <_pwm_init+0x208>)
    8056:	4798      	blx	r3
    8058:	e002      	b.n	8060 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    805a:	f04f 33ff 	mov.w	r3, #4294967295
    805e:	e02e      	b.n	80be <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    8060:	6879      	ldr	r1, [r7, #4]
    8062:	6838      	ldr	r0, [r7, #0]
    8064:	4b24      	ldr	r3, [pc, #144]	; (80f8 <_pwm_init+0x20c>)
    8066:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8068:	f997 200f 	ldrsb.w	r2, [r7, #15]
    806c:	491c      	ldr	r1, [pc, #112]	; (80e0 <_pwm_init+0x1f4>)
    806e:	4613      	mov	r3, r2
    8070:	009b      	lsls	r3, r3, #2
    8072:	4413      	add	r3, r2
    8074:	009b      	lsls	r3, r3, #2
    8076:	440b      	add	r3, r1
    8078:	3302      	adds	r3, #2
    807a:	f9b3 3000 	ldrsh.w	r3, [r3]
    807e:	4618      	mov	r0, r3
    8080:	4b1e      	ldr	r3, [pc, #120]	; (80fc <_pwm_init+0x210>)
    8082:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8084:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8088:	4915      	ldr	r1, [pc, #84]	; (80e0 <_pwm_init+0x1f4>)
    808a:	4613      	mov	r3, r2
    808c:	009b      	lsls	r3, r3, #2
    808e:	4413      	add	r3, r2
    8090:	009b      	lsls	r3, r3, #2
    8092:	440b      	add	r3, r1
    8094:	3302      	adds	r3, #2
    8096:	f9b3 3000 	ldrsh.w	r3, [r3]
    809a:	4618      	mov	r0, r3
    809c:	4b18      	ldr	r3, [pc, #96]	; (8100 <_pwm_init+0x214>)
    809e:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    80a0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    80a4:	490e      	ldr	r1, [pc, #56]	; (80e0 <_pwm_init+0x1f4>)
    80a6:	4613      	mov	r3, r2
    80a8:	009b      	lsls	r3, r3, #2
    80aa:	4413      	add	r3, r2
    80ac:	009b      	lsls	r3, r3, #2
    80ae:	440b      	add	r3, r1
    80b0:	3302      	adds	r3, #2
    80b2:	f9b3 3000 	ldrsh.w	r3, [r3]
    80b6:	4618      	mov	r0, r3
    80b8:	4b12      	ldr	r3, [pc, #72]	; (8104 <_pwm_init+0x218>)
    80ba:	4798      	blx	r3

	return 0;
    80bc:	2300      	movs	r3, #0
}
    80be:	4618      	mov	r0, r3
    80c0:	3710      	adds	r7, #16
    80c2:	46bd      	mov	sp, r7
    80c4:	bd80      	pop	{r7, pc}
    80c6:	bf00      	nop
    80c8:	000084cd 	.word	0x000084cd
    80cc:	000078b1 	.word	0x000078b1
    80d0:	00007a51 	.word	0x00007a51
    80d4:	00007a01 	.word	0x00007a01
    80d8:	0000788d 	.word	0x0000788d
    80dc:	00007a81 	.word	0x00007a81
    80e0:	20000110 	.word	0x20000110
    80e4:	00007ae1 	.word	0x00007ae1
    80e8:	00007aa5 	.word	0x00007aa5
    80ec:	00007ac3 	.word	0x00007ac3
    80f0:	00007be1 	.word	0x00007be1
    80f4:	00007b7d 	.word	0x00007b7d
    80f8:	00008535 	.word	0x00008535
    80fc:	0000780d 	.word	0x0000780d
    8100:	00007851 	.word	0x00007851
    8104:	000077d1 	.word	0x000077d1

00008108 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    8108:	b580      	push	{r7, lr}
    810a:	b084      	sub	sp, #16
    810c:	af00      	add	r7, sp, #0
    810e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8110:	687b      	ldr	r3, [r7, #4]
    8112:	68db      	ldr	r3, [r3, #12]
    8114:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8116:	68f8      	ldr	r0, [r7, #12]
    8118:	4b10      	ldr	r3, [pc, #64]	; (815c <_tc_timer_deinit+0x54>)
    811a:	4798      	blx	r3
    811c:	4603      	mov	r3, r0
    811e:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8120:	22f9      	movs	r2, #249	; 0xf9
    8122:	490f      	ldr	r1, [pc, #60]	; (8160 <_tc_timer_deinit+0x58>)
    8124:	2001      	movs	r0, #1
    8126:	4b0f      	ldr	r3, [pc, #60]	; (8164 <_tc_timer_deinit+0x5c>)
    8128:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    812a:	f997 200b 	ldrsb.w	r2, [r7, #11]
    812e:	490e      	ldr	r1, [pc, #56]	; (8168 <_tc_timer_deinit+0x60>)
    8130:	4613      	mov	r3, r2
    8132:	009b      	lsls	r3, r3, #2
    8134:	4413      	add	r3, r2
    8136:	009b      	lsls	r3, r3, #2
    8138:	440b      	add	r3, r1
    813a:	3302      	adds	r3, #2
    813c:	f9b3 3000 	ldrsh.w	r3, [r3]
    8140:	4618      	mov	r0, r3
    8142:	4b0a      	ldr	r3, [pc, #40]	; (816c <_tc_timer_deinit+0x64>)
    8144:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8146:	68f8      	ldr	r0, [r7, #12]
    8148:	4b09      	ldr	r3, [pc, #36]	; (8170 <_tc_timer_deinit+0x68>)
    814a:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    814c:	68f8      	ldr	r0, [r7, #12]
    814e:	4b09      	ldr	r3, [pc, #36]	; (8174 <_tc_timer_deinit+0x6c>)
    8150:	4798      	blx	r3
}
    8152:	bf00      	nop
    8154:	3710      	adds	r7, #16
    8156:	46bd      	mov	sp, r7
    8158:	bd80      	pop	{r7, pc}
    815a:	bf00      	nop
    815c:	000084cd 	.word	0x000084cd
    8160:	0000f0b4 	.word	0x0000f0b4
    8164:	000038b5 	.word	0x000038b5
    8168:	20000110 	.word	0x20000110
    816c:	0000780d 	.word	0x0000780d
    8170:	00007a01 	.word	0x00007a01
    8174:	00007979 	.word	0x00007979

00008178 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    8178:	b580      	push	{r7, lr}
    817a:	b082      	sub	sp, #8
    817c:	af00      	add	r7, sp, #0
    817e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8180:	687b      	ldr	r3, [r7, #4]
    8182:	68db      	ldr	r3, [r3, #12]
    8184:	4618      	mov	r0, r3
    8186:	4b03      	ldr	r3, [pc, #12]	; (8194 <_tc_timer_start+0x1c>)
    8188:	4798      	blx	r3
}
    818a:	bf00      	nop
    818c:	3708      	adds	r7, #8
    818e:	46bd      	mov	sp, r7
    8190:	bd80      	pop	{r7, pc}
    8192:	bf00      	nop
    8194:	000079a1 	.word	0x000079a1

00008198 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    8198:	b580      	push	{r7, lr}
    819a:	b082      	sub	sp, #8
    819c:	af00      	add	r7, sp, #0
    819e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    81a0:	687b      	ldr	r3, [r7, #4]
    81a2:	691b      	ldr	r3, [r3, #16]
    81a4:	4618      	mov	r0, r3
    81a6:	4b03      	ldr	r3, [pc, #12]	; (81b4 <_pwm_enable+0x1c>)
    81a8:	4798      	blx	r3
}
    81aa:	bf00      	nop
    81ac:	3708      	adds	r7, #8
    81ae:	46bd      	mov	sp, r7
    81b0:	bd80      	pop	{r7, pc}
    81b2:	bf00      	nop
    81b4:	000079a1 	.word	0x000079a1

000081b8 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    81b8:	b580      	push	{r7, lr}
    81ba:	b082      	sub	sp, #8
    81bc:	af00      	add	r7, sp, #0
    81be:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    81c0:	687b      	ldr	r3, [r7, #4]
    81c2:	68db      	ldr	r3, [r3, #12]
    81c4:	4618      	mov	r0, r3
    81c6:	4b03      	ldr	r3, [pc, #12]	; (81d4 <_tc_timer_stop+0x1c>)
    81c8:	4798      	blx	r3
}
    81ca:	bf00      	nop
    81cc:	3708      	adds	r7, #8
    81ce:	46bd      	mov	sp, r7
    81d0:	bd80      	pop	{r7, pc}
    81d2:	bf00      	nop
    81d4:	00007a01 	.word	0x00007a01

000081d8 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    81d8:	b580      	push	{r7, lr}
    81da:	b084      	sub	sp, #16
    81dc:	af00      	add	r7, sp, #0
    81de:	6078      	str	r0, [r7, #4]
    81e0:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    81e2:	687b      	ldr	r3, [r7, #4]
    81e4:	68db      	ldr	r3, [r3, #12]
    81e6:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    81e8:	68f8      	ldr	r0, [r7, #12]
    81ea:	4b14      	ldr	r3, [pc, #80]	; (823c <_tc_timer_set_period+0x64>)
    81ec:	4798      	blx	r3
    81ee:	4603      	mov	r3, r0
    81f0:	2b02      	cmp	r3, #2
    81f2:	d105      	bne.n	8200 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    81f4:	683a      	ldr	r2, [r7, #0]
    81f6:	2100      	movs	r1, #0
    81f8:	68f8      	ldr	r0, [r7, #12]
    81fa:	4b11      	ldr	r3, [pc, #68]	; (8240 <_tc_timer_set_period+0x68>)
    81fc:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    81fe:	e019      	b.n	8234 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8200:	68f8      	ldr	r0, [r7, #12]
    8202:	4b0e      	ldr	r3, [pc, #56]	; (823c <_tc_timer_set_period+0x64>)
    8204:	4798      	blx	r3
    8206:	4603      	mov	r3, r0
    8208:	2b00      	cmp	r3, #0
    820a:	d107      	bne.n	821c <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    820c:	683b      	ldr	r3, [r7, #0]
    820e:	b29b      	uxth	r3, r3
    8210:	461a      	mov	r2, r3
    8212:	2100      	movs	r1, #0
    8214:	68f8      	ldr	r0, [r7, #12]
    8216:	4b0b      	ldr	r3, [pc, #44]	; (8244 <_tc_timer_set_period+0x6c>)
    8218:	4798      	blx	r3
}
    821a:	e00b      	b.n	8234 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    821c:	68f8      	ldr	r0, [r7, #12]
    821e:	4b07      	ldr	r3, [pc, #28]	; (823c <_tc_timer_set_period+0x64>)
    8220:	4798      	blx	r3
    8222:	4603      	mov	r3, r0
    8224:	2b01      	cmp	r3, #1
    8226:	d105      	bne.n	8234 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    8228:	683b      	ldr	r3, [r7, #0]
    822a:	b2db      	uxtb	r3, r3
    822c:	4619      	mov	r1, r3
    822e:	68f8      	ldr	r0, [r7, #12]
    8230:	4b05      	ldr	r3, [pc, #20]	; (8248 <_tc_timer_set_period+0x70>)
    8232:	4798      	blx	r3
}
    8234:	bf00      	nop
    8236:	3710      	adds	r7, #16
    8238:	46bd      	mov	sp, r7
    823a:	bd80      	pop	{r7, pc}
    823c:	00007a29 	.word	0x00007a29
    8240:	00007be1 	.word	0x00007be1
    8244:	00007b7d 	.word	0x00007b7d
    8248:	00007b01 	.word	0x00007b01

0000824c <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    824c:	b580      	push	{r7, lr}
    824e:	b084      	sub	sp, #16
    8250:	af00      	add	r7, sp, #0
    8252:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8254:	687b      	ldr	r3, [r7, #4]
    8256:	68db      	ldr	r3, [r3, #12]
    8258:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    825a:	68f8      	ldr	r0, [r7, #12]
    825c:	4b13      	ldr	r3, [pc, #76]	; (82ac <_tc_timer_get_period+0x60>)
    825e:	4798      	blx	r3
    8260:	4603      	mov	r3, r0
    8262:	2b02      	cmp	r3, #2
    8264:	d105      	bne.n	8272 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    8266:	2100      	movs	r1, #0
    8268:	68f8      	ldr	r0, [r7, #12]
    826a:	4b11      	ldr	r3, [pc, #68]	; (82b0 <_tc_timer_get_period+0x64>)
    826c:	4798      	blx	r3
    826e:	4603      	mov	r3, r0
    8270:	e017      	b.n	82a2 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8272:	68f8      	ldr	r0, [r7, #12]
    8274:	4b0d      	ldr	r3, [pc, #52]	; (82ac <_tc_timer_get_period+0x60>)
    8276:	4798      	blx	r3
    8278:	4603      	mov	r3, r0
    827a:	2b00      	cmp	r3, #0
    827c:	d105      	bne.n	828a <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    827e:	2100      	movs	r1, #0
    8280:	68f8      	ldr	r0, [r7, #12]
    8282:	4b0c      	ldr	r3, [pc, #48]	; (82b4 <_tc_timer_get_period+0x68>)
    8284:	4798      	blx	r3
    8286:	4603      	mov	r3, r0
    8288:	e00b      	b.n	82a2 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    828a:	68f8      	ldr	r0, [r7, #12]
    828c:	4b07      	ldr	r3, [pc, #28]	; (82ac <_tc_timer_get_period+0x60>)
    828e:	4798      	blx	r3
    8290:	4603      	mov	r3, r0
    8292:	2b01      	cmp	r3, #1
    8294:	d104      	bne.n	82a0 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    8296:	68f8      	ldr	r0, [r7, #12]
    8298:	4b07      	ldr	r3, [pc, #28]	; (82b8 <_tc_timer_get_period+0x6c>)
    829a:	4798      	blx	r3
    829c:	4603      	mov	r3, r0
    829e:	e000      	b.n	82a2 <_tc_timer_get_period+0x56>
	}

	return 0;
    82a0:	2300      	movs	r3, #0
}
    82a2:	4618      	mov	r0, r3
    82a4:	3710      	adds	r7, #16
    82a6:	46bd      	mov	sp, r7
    82a8:	bd80      	pop	{r7, pc}
    82aa:	bf00      	nop
    82ac:	00007a29 	.word	0x00007a29
    82b0:	00007c11 	.word	0x00007c11
    82b4:	00007bb1 	.word	0x00007bb1
    82b8:	00007b29 	.word	0x00007b29

000082bc <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    82bc:	b580      	push	{r7, lr}
    82be:	b082      	sub	sp, #8
    82c0:	af00      	add	r7, sp, #0
    82c2:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    82c4:	687b      	ldr	r3, [r7, #4]
    82c6:	68db      	ldr	r3, [r3, #12]
    82c8:	4618      	mov	r0, r3
    82ca:	4b03      	ldr	r3, [pc, #12]	; (82d8 <_tc_timer_is_started+0x1c>)
    82cc:	4798      	blx	r3
    82ce:	4603      	mov	r3, r0
}
    82d0:	4618      	mov	r0, r3
    82d2:	3708      	adds	r7, #8
    82d4:	46bd      	mov	sp, r7
    82d6:	bd80      	pop	{r7, pc}
    82d8:	000079c9 	.word	0x000079c9

000082dc <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    82dc:	b580      	push	{r7, lr}
    82de:	b082      	sub	sp, #8
    82e0:	af00      	add	r7, sp, #0
    82e2:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    82e4:	687b      	ldr	r3, [r7, #4]
    82e6:	691b      	ldr	r3, [r3, #16]
    82e8:	4618      	mov	r0, r3
    82ea:	4b03      	ldr	r3, [pc, #12]	; (82f8 <_pwm_is_enabled+0x1c>)
    82ec:	4798      	blx	r3
    82ee:	4603      	mov	r3, r0
}
    82f0:	4618      	mov	r0, r3
    82f2:	3708      	adds	r7, #8
    82f4:	46bd      	mov	sp, r7
    82f6:	bd80      	pop	{r7, pc}
    82f8:	000079c9 	.word	0x000079c9

000082fc <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    82fc:	b480      	push	{r7}
    82fe:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    8300:	4b02      	ldr	r3, [pc, #8]	; (830c <_tc_get_timer+0x10>)
}
    8302:	4618      	mov	r0, r3
    8304:	46bd      	mov	sp, r7
    8306:	f85d 7b04 	ldr.w	r7, [sp], #4
    830a:	4770      	bx	lr
    830c:	20000188 	.word	0x20000188

00008310 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    8310:	b480      	push	{r7}
    8312:	af00      	add	r7, sp, #0
	return NULL;
    8314:	2300      	movs	r3, #0
}
    8316:	4618      	mov	r0, r3
    8318:	46bd      	mov	sp, r7
    831a:	f85d 7b04 	ldr.w	r7, [sp], #4
    831e:	4770      	bx	lr

00008320 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    8320:	b580      	push	{r7, lr}
    8322:	b084      	sub	sp, #16
    8324:	af00      	add	r7, sp, #0
    8326:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8328:	687b      	ldr	r3, [r7, #4]
    832a:	68db      	ldr	r3, [r3, #12]
    832c:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    832e:	68f8      	ldr	r0, [r7, #12]
    8330:	4b0e      	ldr	r3, [pc, #56]	; (836c <_tc_timer_set_irq+0x4c>)
    8332:	4798      	blx	r3
    8334:	4603      	mov	r3, r0
    8336:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8338:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    833c:	490c      	ldr	r1, [pc, #48]	; (8370 <_tc_timer_set_irq+0x50>)
    833e:	2001      	movs	r0, #1
    8340:	4b0c      	ldr	r3, [pc, #48]	; (8374 <_tc_timer_set_irq+0x54>)
    8342:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    8344:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8348:	490b      	ldr	r1, [pc, #44]	; (8378 <_tc_timer_set_irq+0x58>)
    834a:	4613      	mov	r3, r2
    834c:	009b      	lsls	r3, r3, #2
    834e:	4413      	add	r3, r2
    8350:	009b      	lsls	r3, r3, #2
    8352:	440b      	add	r3, r1
    8354:	3302      	adds	r3, #2
    8356:	f9b3 3000 	ldrsh.w	r3, [r3]
    835a:	b2db      	uxtb	r3, r3
    835c:	4618      	mov	r0, r3
    835e:	4b07      	ldr	r3, [pc, #28]	; (837c <_tc_timer_set_irq+0x5c>)
    8360:	4798      	blx	r3
}
    8362:	bf00      	nop
    8364:	3710      	adds	r7, #16
    8366:	46bd      	mov	sp, r7
    8368:	bd80      	pop	{r7, pc}
    836a:	bf00      	nop
    836c:	000084cd 	.word	0x000084cd
    8370:	0000f0b4 	.word	0x0000f0b4
    8374:	000038b5 	.word	0x000038b5
    8378:	20000110 	.word	0x20000110
    837c:	000040fd 	.word	0x000040fd

00008380 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8380:	b580      	push	{r7, lr}
    8382:	b084      	sub	sp, #16
    8384:	af00      	add	r7, sp, #0
    8386:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8388:	687b      	ldr	r3, [r7, #4]
    838a:	68db      	ldr	r3, [r3, #12]
    838c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    838e:	68f8      	ldr	r0, [r7, #12]
    8390:	4b07      	ldr	r3, [pc, #28]	; (83b0 <tc_interrupt_handler+0x30>)
    8392:	4798      	blx	r3
    8394:	4603      	mov	r3, r0
    8396:	2b00      	cmp	r3, #0
    8398:	d006      	beq.n	83a8 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    839a:	68f8      	ldr	r0, [r7, #12]
    839c:	4b05      	ldr	r3, [pc, #20]	; (83b4 <tc_interrupt_handler+0x34>)
    839e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    83a0:	687b      	ldr	r3, [r7, #4]
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	6878      	ldr	r0, [r7, #4]
    83a6:	4798      	blx	r3
	}
}
    83a8:	bf00      	nop
    83aa:	3710      	adds	r7, #16
    83ac:	46bd      	mov	sp, r7
    83ae:	bd80      	pop	{r7, pc}
    83b0:	000078d9 	.word	0x000078d9
    83b4:	00007901 	.word	0x00007901

000083b8 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    83b8:	b580      	push	{r7, lr}
    83ba:	b084      	sub	sp, #16
    83bc:	af00      	add	r7, sp, #0
    83be:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    83c0:	687b      	ldr	r3, [r7, #4]
    83c2:	691b      	ldr	r3, [r3, #16]
    83c4:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    83c6:	68f8      	ldr	r0, [r7, #12]
    83c8:	4b12      	ldr	r3, [pc, #72]	; (8414 <tc_pwm_interrupt_handler+0x5c>)
    83ca:	4798      	blx	r3
    83cc:	4603      	mov	r3, r0
    83ce:	2b00      	cmp	r3, #0
    83d0:	d00a      	beq.n	83e8 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    83d2:	68f8      	ldr	r0, [r7, #12]
    83d4:	4b10      	ldr	r3, [pc, #64]	; (8418 <tc_pwm_interrupt_handler+0x60>)
    83d6:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    83d8:	687b      	ldr	r3, [r7, #4]
    83da:	681b      	ldr	r3, [r3, #0]
    83dc:	2b00      	cmp	r3, #0
    83de:	d003      	beq.n	83e8 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    83e0:	687b      	ldr	r3, [r7, #4]
    83e2:	681b      	ldr	r3, [r3, #0]
    83e4:	6878      	ldr	r0, [r7, #4]
    83e6:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    83e8:	68f8      	ldr	r0, [r7, #12]
    83ea:	4b0c      	ldr	r3, [pc, #48]	; (841c <tc_pwm_interrupt_handler+0x64>)
    83ec:	4798      	blx	r3
    83ee:	4603      	mov	r3, r0
    83f0:	2b00      	cmp	r3, #0
    83f2:	d00a      	beq.n	840a <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    83f4:	68f8      	ldr	r0, [r7, #12]
    83f6:	4b0a      	ldr	r3, [pc, #40]	; (8420 <tc_pwm_interrupt_handler+0x68>)
    83f8:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    83fa:	687b      	ldr	r3, [r7, #4]
    83fc:	685b      	ldr	r3, [r3, #4]
    83fe:	2b00      	cmp	r3, #0
    8400:	d003      	beq.n	840a <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    8402:	687b      	ldr	r3, [r7, #4]
    8404:	685b      	ldr	r3, [r3, #4]
    8406:	6878      	ldr	r0, [r7, #4]
    8408:	4798      	blx	r3
		}
	}
}
    840a:	bf00      	nop
    840c:	3710      	adds	r7, #16
    840e:	46bd      	mov	sp, r7
    8410:	bd80      	pop	{r7, pc}
    8412:	bf00      	nop
    8414:	000078d9 	.word	0x000078d9
    8418:	00007901 	.word	0x00007901
    841c:	0000794f 	.word	0x0000794f
    8420:	0000791b 	.word	0x0000791b

00008424 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    8424:	b580      	push	{r7, lr}
    8426:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    8428:	4b03      	ldr	r3, [pc, #12]	; (8438 <TC0_Handler+0x14>)
    842a:	681b      	ldr	r3, [r3, #0]
    842c:	4618      	mov	r0, r3
    842e:	4b03      	ldr	r3, [pc, #12]	; (843c <TC0_Handler+0x18>)
    8430:	4798      	blx	r3
}
    8432:	bf00      	nop
    8434:	bd80      	pop	{r7, pc}
    8436:	bf00      	nop
    8438:	20000b30 	.word	0x20000b30
    843c:	00008381 	.word	0x00008381

00008440 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    8440:	b580      	push	{r7, lr}
    8442:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    8444:	4b03      	ldr	r3, [pc, #12]	; (8454 <TC2_Handler+0x14>)
    8446:	681b      	ldr	r3, [r3, #0]
    8448:	4618      	mov	r0, r3
    844a:	4b03      	ldr	r3, [pc, #12]	; (8458 <TC2_Handler+0x18>)
    844c:	4798      	blx	r3
}
    844e:	bf00      	nop
    8450:	bd80      	pop	{r7, pc}
    8452:	bf00      	nop
    8454:	20000b34 	.word	0x20000b34
    8458:	00008381 	.word	0x00008381

0000845c <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    845c:	b580      	push	{r7, lr}
    845e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8460:	4b03      	ldr	r3, [pc, #12]	; (8470 <TC4_Handler+0x14>)
    8462:	681b      	ldr	r3, [r3, #0]
    8464:	4618      	mov	r0, r3
    8466:	4b03      	ldr	r3, [pc, #12]	; (8474 <TC4_Handler+0x18>)
    8468:	4798      	blx	r3
}
    846a:	bf00      	nop
    846c:	bd80      	pop	{r7, pc}
    846e:	bf00      	nop
    8470:	20000b38 	.word	0x20000b38
    8474:	00008381 	.word	0x00008381

00008478 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8478:	b580      	push	{r7, lr}
    847a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    847c:	4b03      	ldr	r3, [pc, #12]	; (848c <TC5_Handler+0x14>)
    847e:	681b      	ldr	r3, [r3, #0]
    8480:	4618      	mov	r0, r3
    8482:	4b03      	ldr	r3, [pc, #12]	; (8490 <TC5_Handler+0x18>)
    8484:	4798      	blx	r3
}
    8486:	bf00      	nop
    8488:	bd80      	pop	{r7, pc}
    848a:	bf00      	nop
    848c:	20000b3c 	.word	0x20000b3c
    8490:	00008381 	.word	0x00008381

00008494 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    8494:	b580      	push	{r7, lr}
    8496:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8498:	4b03      	ldr	r3, [pc, #12]	; (84a8 <TC6_Handler+0x14>)
    849a:	681b      	ldr	r3, [r3, #0]
    849c:	4618      	mov	r0, r3
    849e:	4b03      	ldr	r3, [pc, #12]	; (84ac <TC6_Handler+0x18>)
    84a0:	4798      	blx	r3
}
    84a2:	bf00      	nop
    84a4:	bd80      	pop	{r7, pc}
    84a6:	bf00      	nop
    84a8:	20000b40 	.word	0x20000b40
    84ac:	00008381 	.word	0x00008381

000084b0 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    84b0:	b580      	push	{r7, lr}
    84b2:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    84b4:	4b03      	ldr	r3, [pc, #12]	; (84c4 <TC7_Handler+0x14>)
    84b6:	681b      	ldr	r3, [r3, #0]
    84b8:	4618      	mov	r0, r3
    84ba:	4b03      	ldr	r3, [pc, #12]	; (84c8 <TC7_Handler+0x18>)
    84bc:	4798      	blx	r3
}
    84be:	bf00      	nop
    84c0:	bd80      	pop	{r7, pc}
    84c2:	bf00      	nop
    84c4:	20000b44 	.word	0x20000b44
    84c8:	000083b9 	.word	0x000083b9

000084cc <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    84cc:	b580      	push	{r7, lr}
    84ce:	b084      	sub	sp, #16
    84d0:	af00      	add	r7, sp, #0
    84d2:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    84d4:	6878      	ldr	r0, [r7, #4]
    84d6:	4b13      	ldr	r3, [pc, #76]	; (8524 <get_tc_index+0x58>)
    84d8:	4798      	blx	r3
    84da:	4603      	mov	r3, r0
    84dc:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    84de:	2300      	movs	r3, #0
    84e0:	73fb      	strb	r3, [r7, #15]
    84e2:	e010      	b.n	8506 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    84e4:	7bfa      	ldrb	r2, [r7, #15]
    84e6:	4910      	ldr	r1, [pc, #64]	; (8528 <get_tc_index+0x5c>)
    84e8:	4613      	mov	r3, r2
    84ea:	009b      	lsls	r3, r3, #2
    84ec:	4413      	add	r3, r2
    84ee:	009b      	lsls	r3, r3, #2
    84f0:	440b      	add	r3, r1
    84f2:	781b      	ldrb	r3, [r3, #0]
    84f4:	7bba      	ldrb	r2, [r7, #14]
    84f6:	429a      	cmp	r2, r3
    84f8:	d102      	bne.n	8500 <get_tc_index+0x34>
			return i;
    84fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    84fe:	e00d      	b.n	851c <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8500:	7bfb      	ldrb	r3, [r7, #15]
    8502:	3301      	adds	r3, #1
    8504:	73fb      	strb	r3, [r7, #15]
    8506:	7bfb      	ldrb	r3, [r7, #15]
    8508:	2b05      	cmp	r3, #5
    850a:	d9eb      	bls.n	84e4 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    850c:	f240 221d 	movw	r2, #541	; 0x21d
    8510:	4906      	ldr	r1, [pc, #24]	; (852c <get_tc_index+0x60>)
    8512:	2000      	movs	r0, #0
    8514:	4b06      	ldr	r3, [pc, #24]	; (8530 <get_tc_index+0x64>)
    8516:	4798      	blx	r3
	return -1;
    8518:	f04f 33ff 	mov.w	r3, #4294967295
}
    851c:	4618      	mov	r0, r3
    851e:	3710      	adds	r7, #16
    8520:	46bd      	mov	sp, r7
    8522:	bd80      	pop	{r7, pc}
    8524:	000085d1 	.word	0x000085d1
    8528:	20000110 	.word	0x20000110
    852c:	0000f0b4 	.word	0x0000f0b4
    8530:	000038b5 	.word	0x000038b5

00008534 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    8534:	b480      	push	{r7}
    8536:	b083      	sub	sp, #12
    8538:	af00      	add	r7, sp, #0
    853a:	6078      	str	r0, [r7, #4]
    853c:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    853e:	687b      	ldr	r3, [r7, #4]
    8540:	4a17      	ldr	r2, [pc, #92]	; (85a0 <_tc_init_irq_param+0x6c>)
    8542:	4293      	cmp	r3, r2
    8544:	d102      	bne.n	854c <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    8546:	4a17      	ldr	r2, [pc, #92]	; (85a4 <_tc_init_irq_param+0x70>)
    8548:	683b      	ldr	r3, [r7, #0]
    854a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    854c:	687b      	ldr	r3, [r7, #4]
    854e:	4a16      	ldr	r2, [pc, #88]	; (85a8 <_tc_init_irq_param+0x74>)
    8550:	4293      	cmp	r3, r2
    8552:	d102      	bne.n	855a <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    8554:	4a15      	ldr	r2, [pc, #84]	; (85ac <_tc_init_irq_param+0x78>)
    8556:	683b      	ldr	r3, [r7, #0]
    8558:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    855a:	687b      	ldr	r3, [r7, #4]
    855c:	4a14      	ldr	r2, [pc, #80]	; (85b0 <_tc_init_irq_param+0x7c>)
    855e:	4293      	cmp	r3, r2
    8560:	d102      	bne.n	8568 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    8562:	4a14      	ldr	r2, [pc, #80]	; (85b4 <_tc_init_irq_param+0x80>)
    8564:	683b      	ldr	r3, [r7, #0]
    8566:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8568:	687b      	ldr	r3, [r7, #4]
    856a:	4a13      	ldr	r2, [pc, #76]	; (85b8 <_tc_init_irq_param+0x84>)
    856c:	4293      	cmp	r3, r2
    856e:	d102      	bne.n	8576 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8570:	4a12      	ldr	r2, [pc, #72]	; (85bc <_tc_init_irq_param+0x88>)
    8572:	683b      	ldr	r3, [r7, #0]
    8574:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    8576:	687b      	ldr	r3, [r7, #4]
    8578:	4a11      	ldr	r2, [pc, #68]	; (85c0 <_tc_init_irq_param+0x8c>)
    857a:	4293      	cmp	r3, r2
    857c:	d102      	bne.n	8584 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    857e:	4a11      	ldr	r2, [pc, #68]	; (85c4 <_tc_init_irq_param+0x90>)
    8580:	683b      	ldr	r3, [r7, #0]
    8582:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    8584:	687b      	ldr	r3, [r7, #4]
    8586:	4a10      	ldr	r2, [pc, #64]	; (85c8 <_tc_init_irq_param+0x94>)
    8588:	4293      	cmp	r3, r2
    858a:	d102      	bne.n	8592 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    858c:	4a0f      	ldr	r2, [pc, #60]	; (85cc <_tc_init_irq_param+0x98>)
    858e:	683b      	ldr	r3, [r7, #0]
    8590:	6013      	str	r3, [r2, #0]
	}
}
    8592:	bf00      	nop
    8594:	370c      	adds	r7, #12
    8596:	46bd      	mov	sp, r7
    8598:	f85d 7b04 	ldr.w	r7, [sp], #4
    859c:	4770      	bx	lr
    859e:	bf00      	nop
    85a0:	40003800 	.word	0x40003800
    85a4:	20000b30 	.word	0x20000b30
    85a8:	4101a000 	.word	0x4101a000
    85ac:	20000b34 	.word	0x20000b34
    85b0:	42001400 	.word	0x42001400
    85b4:	20000b38 	.word	0x20000b38
    85b8:	42001800 	.word	0x42001800
    85bc:	20000b3c 	.word	0x20000b3c
    85c0:	43001400 	.word	0x43001400
    85c4:	20000b40 	.word	0x20000b40
    85c8:	43001800 	.word	0x43001800
    85cc:	20000b44 	.word	0x20000b44

000085d0 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    85d0:	b4b0      	push	{r4, r5, r7}
    85d2:	b08d      	sub	sp, #52	; 0x34
    85d4:	af00      	add	r7, sp, #0
    85d6:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    85d8:	4b13      	ldr	r3, [pc, #76]	; (8628 <_get_hardware_offset+0x58>)
    85da:	f107 040c 	add.w	r4, r7, #12
    85de:	461d      	mov	r5, r3
    85e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    85e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    85e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    85e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    85ec:	2300      	movs	r3, #0
    85ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    85f0:	e010      	b.n	8614 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    85f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    85f4:	009b      	lsls	r3, r3, #2
    85f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    85fa:	4413      	add	r3, r2
    85fc:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8600:	461a      	mov	r2, r3
    8602:	687b      	ldr	r3, [r7, #4]
    8604:	429a      	cmp	r2, r3
    8606:	d102      	bne.n	860e <_get_hardware_offset+0x3e>
			return i;
    8608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    860a:	b2db      	uxtb	r3, r3
    860c:	e006      	b.n	861c <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    860e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8610:	3301      	adds	r3, #1
    8612:	62fb      	str	r3, [r7, #44]	; 0x2c
    8614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8616:	2b07      	cmp	r3, #7
    8618:	d9eb      	bls.n	85f2 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    861a:	2300      	movs	r3, #0
}
    861c:	4618      	mov	r0, r3
    861e:	3734      	adds	r7, #52	; 0x34
    8620:	46bd      	mov	sp, r7
    8622:	bcb0      	pop	{r4, r5, r7}
    8624:	4770      	bx	lr
    8626:	bf00      	nop
    8628:	0000f0c8 	.word	0x0000f0c8

0000862c <__NVIC_EnableIRQ>:
{
    862c:	b480      	push	{r7}
    862e:	b083      	sub	sp, #12
    8630:	af00      	add	r7, sp, #0
    8632:	4603      	mov	r3, r0
    8634:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    863a:	2b00      	cmp	r3, #0
    863c:	db0b      	blt.n	8656 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    863e:	4909      	ldr	r1, [pc, #36]	; (8664 <__NVIC_EnableIRQ+0x38>)
    8640:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8644:	095b      	lsrs	r3, r3, #5
    8646:	88fa      	ldrh	r2, [r7, #6]
    8648:	f002 021f 	and.w	r2, r2, #31
    864c:	2001      	movs	r0, #1
    864e:	fa00 f202 	lsl.w	r2, r0, r2
    8652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8656:	bf00      	nop
    8658:	370c      	adds	r7, #12
    865a:	46bd      	mov	sp, r7
    865c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8660:	4770      	bx	lr
    8662:	bf00      	nop
    8664:	e000e100 	.word	0xe000e100

00008668 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8668:	b480      	push	{r7}
    866a:	b087      	sub	sp, #28
    866c:	af00      	add	r7, sp, #0
    866e:	60f8      	str	r0, [r7, #12]
    8670:	460b      	mov	r3, r1
    8672:	607a      	str	r2, [r7, #4]
    8674:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    8676:	7afa      	ldrb	r2, [r7, #11]
    8678:	68f9      	ldr	r1, [r7, #12]
    867a:	4613      	mov	r3, r2
    867c:	009b      	lsls	r3, r3, #2
    867e:	4413      	add	r3, r2
    8680:	009b      	lsls	r3, r3, #2
    8682:	440b      	add	r3, r1
    8684:	3340      	adds	r3, #64	; 0x40
    8686:	681b      	ldr	r3, [r3, #0]
    8688:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    868a:	697a      	ldr	r2, [r7, #20]
    868c:	687b      	ldr	r3, [r7, #4]
    868e:	4013      	ands	r3, r2
    8690:	617b      	str	r3, [r7, #20]
	return tmp;
    8692:	697b      	ldr	r3, [r7, #20]
}
    8694:	4618      	mov	r0, r3
    8696:	371c      	adds	r7, #28
    8698:	46bd      	mov	sp, r7
    869a:	f85d 7b04 	ldr.w	r7, [sp], #4
    869e:	4770      	bx	lr

000086a0 <hri_oscctrl_get_STATUS_reg>:
{
    86a0:	b480      	push	{r7}
    86a2:	b085      	sub	sp, #20
    86a4:	af00      	add	r7, sp, #0
    86a6:	6078      	str	r0, [r7, #4]
    86a8:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    86aa:	687b      	ldr	r3, [r7, #4]
    86ac:	691b      	ldr	r3, [r3, #16]
    86ae:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    86b0:	68fa      	ldr	r2, [r7, #12]
    86b2:	683b      	ldr	r3, [r7, #0]
    86b4:	4013      	ands	r3, r2
    86b6:	60fb      	str	r3, [r7, #12]
	return tmp;
    86b8:	68fb      	ldr	r3, [r7, #12]
}
    86ba:	4618      	mov	r0, r3
    86bc:	3714      	adds	r7, #20
    86be:	46bd      	mov	sp, r7
    86c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    86c4:	4770      	bx	lr

000086c6 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    86c6:	b480      	push	{r7}
    86c8:	b085      	sub	sp, #20
    86ca:	af00      	add	r7, sp, #0
    86cc:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    86ce:	687b      	ldr	r3, [r7, #4]
    86d0:	f893 3020 	ldrb.w	r3, [r3, #32]
    86d4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    86d6:	7bfb      	ldrb	r3, [r7, #15]
    86d8:	f003 0301 	and.w	r3, r3, #1
    86dc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    86de:	7bfb      	ldrb	r3, [r7, #15]
    86e0:	2b00      	cmp	r3, #0
    86e2:	bf14      	ite	ne
    86e4:	2301      	movne	r3, #1
    86e6:	2300      	moveq	r3, #0
    86e8:	b2db      	uxtb	r3, r3
}
    86ea:	4618      	mov	r0, r3
    86ec:	3714      	adds	r7, #20
    86ee:	46bd      	mov	sp, r7
    86f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    86f4:	4770      	bx	lr

000086f6 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    86f6:	b480      	push	{r7}
    86f8:	b083      	sub	sp, #12
    86fa:	af00      	add	r7, sp, #0
    86fc:	6078      	str	r0, [r7, #4]
    86fe:	460b      	mov	r3, r1
    8700:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8702:	bf00      	nop
    8704:	687b      	ldr	r3, [r7, #4]
    8706:	789b      	ldrb	r3, [r3, #2]
    8708:	b2da      	uxtb	r2, r3
    870a:	78fb      	ldrb	r3, [r7, #3]
    870c:	4013      	ands	r3, r2
    870e:	b2db      	uxtb	r3, r3
    8710:	2b00      	cmp	r3, #0
    8712:	d1f7      	bne.n	8704 <hri_usb_wait_for_sync+0xe>
	};
}
    8714:	bf00      	nop
    8716:	370c      	adds	r7, #12
    8718:	46bd      	mov	sp, r7
    871a:	f85d 7b04 	ldr.w	r7, [sp], #4
    871e:	4770      	bx	lr

00008720 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8720:	b480      	push	{r7}
    8722:	b083      	sub	sp, #12
    8724:	af00      	add	r7, sp, #0
    8726:	6078      	str	r0, [r7, #4]
    8728:	460b      	mov	r3, r1
    872a:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    872c:	687b      	ldr	r3, [r7, #4]
    872e:	789b      	ldrb	r3, [r3, #2]
    8730:	b2da      	uxtb	r2, r3
    8732:	78fb      	ldrb	r3, [r7, #3]
    8734:	4013      	ands	r3, r2
    8736:	b2db      	uxtb	r3, r3
    8738:	2b00      	cmp	r3, #0
    873a:	bf14      	ite	ne
    873c:	2301      	movne	r3, #1
    873e:	2300      	moveq	r3, #0
    8740:	b2db      	uxtb	r3, r3
}
    8742:	4618      	mov	r0, r3
    8744:	370c      	adds	r7, #12
    8746:	46bd      	mov	sp, r7
    8748:	f85d 7b04 	ldr.w	r7, [sp], #4
    874c:	4770      	bx	lr

0000874e <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    874e:	b480      	push	{r7}
    8750:	b085      	sub	sp, #20
    8752:	af00      	add	r7, sp, #0
    8754:	6078      	str	r0, [r7, #4]
    8756:	460b      	mov	r3, r1
    8758:	70fb      	strb	r3, [r7, #3]
    875a:	4613      	mov	r3, r2
    875c:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    875e:	78fb      	ldrb	r3, [r7, #3]
    8760:	687a      	ldr	r2, [r7, #4]
    8762:	3308      	adds	r3, #8
    8764:	015b      	lsls	r3, r3, #5
    8766:	4413      	add	r3, r2
    8768:	3307      	adds	r3, #7
    876a:	781b      	ldrb	r3, [r3, #0]
    876c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    876e:	7bfa      	ldrb	r2, [r7, #15]
    8770:	78bb      	ldrb	r3, [r7, #2]
    8772:	4013      	ands	r3, r2
    8774:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8776:	7bfb      	ldrb	r3, [r7, #15]
}
    8778:	4618      	mov	r0, r3
    877a:	3714      	adds	r7, #20
    877c:	46bd      	mov	sp, r7
    877e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8782:	4770      	bx	lr

00008784 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    8784:	b480      	push	{r7}
    8786:	b083      	sub	sp, #12
    8788:	af00      	add	r7, sp, #0
    878a:	6078      	str	r0, [r7, #4]
    878c:	460b      	mov	r3, r1
    878e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8790:	78fb      	ldrb	r3, [r7, #3]
    8792:	687a      	ldr	r2, [r7, #4]
    8794:	3308      	adds	r3, #8
    8796:	015b      	lsls	r3, r3, #5
    8798:	4413      	add	r3, r2
    879a:	3307      	adds	r3, #7
    879c:	781b      	ldrb	r3, [r3, #0]
    879e:	b2db      	uxtb	r3, r3
}
    87a0:	4618      	mov	r0, r3
    87a2:	370c      	adds	r7, #12
    87a4:	46bd      	mov	sp, r7
    87a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    87aa:	4770      	bx	lr

000087ac <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    87ac:	b480      	push	{r7}
    87ae:	b083      	sub	sp, #12
    87b0:	af00      	add	r7, sp, #0
    87b2:	6078      	str	r0, [r7, #4]
    87b4:	460b      	mov	r3, r1
    87b6:	70fb      	strb	r3, [r7, #3]
    87b8:	4613      	mov	r3, r2
    87ba:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    87bc:	78fb      	ldrb	r3, [r7, #3]
    87be:	687a      	ldr	r2, [r7, #4]
    87c0:	3308      	adds	r3, #8
    87c2:	015b      	lsls	r3, r3, #5
    87c4:	4413      	add	r3, r2
    87c6:	3307      	adds	r3, #7
    87c8:	78ba      	ldrb	r2, [r7, #2]
    87ca:	701a      	strb	r2, [r3, #0]
}
    87cc:	bf00      	nop
    87ce:	370c      	adds	r7, #12
    87d0:	46bd      	mov	sp, r7
    87d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    87d6:	4770      	bx	lr

000087d8 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    87d8:	b480      	push	{r7}
    87da:	b083      	sub	sp, #12
    87dc:	af00      	add	r7, sp, #0
    87de:	6078      	str	r0, [r7, #4]
    87e0:	460b      	mov	r3, r1
    87e2:	70fb      	strb	r3, [r7, #3]
    87e4:	4613      	mov	r3, r2
    87e6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    87e8:	78fb      	ldrb	r3, [r7, #3]
    87ea:	687a      	ldr	r2, [r7, #4]
    87ec:	3308      	adds	r3, #8
    87ee:	015b      	lsls	r3, r3, #5
    87f0:	4413      	add	r3, r2
    87f2:	3305      	adds	r3, #5
    87f4:	78ba      	ldrb	r2, [r7, #2]
    87f6:	701a      	strb	r2, [r3, #0]
}
    87f8:	bf00      	nop
    87fa:	370c      	adds	r7, #12
    87fc:	46bd      	mov	sp, r7
    87fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8802:	4770      	bx	lr

00008804 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    8804:	b480      	push	{r7}
    8806:	b083      	sub	sp, #12
    8808:	af00      	add	r7, sp, #0
    880a:	6078      	str	r0, [r7, #4]
    880c:	460b      	mov	r3, r1
    880e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8810:	78fb      	ldrb	r3, [r7, #3]
    8812:	687a      	ldr	r2, [r7, #4]
    8814:	3308      	adds	r3, #8
    8816:	015b      	lsls	r3, r3, #5
    8818:	4413      	add	r3, r2
    881a:	3306      	adds	r3, #6
    881c:	781b      	ldrb	r3, [r3, #0]
    881e:	b2db      	uxtb	r3, r3
}
    8820:	4618      	mov	r0, r3
    8822:	370c      	adds	r7, #12
    8824:	46bd      	mov	sp, r7
    8826:	f85d 7b04 	ldr.w	r7, [sp], #4
    882a:	4770      	bx	lr

0000882c <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    882c:	b480      	push	{r7}
    882e:	b083      	sub	sp, #12
    8830:	af00      	add	r7, sp, #0
    8832:	6078      	str	r0, [r7, #4]
    8834:	460b      	mov	r3, r1
    8836:	70fb      	strb	r3, [r7, #3]
    8838:	4613      	mov	r3, r2
    883a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    883c:	78fb      	ldrb	r3, [r7, #3]
    883e:	687a      	ldr	r2, [r7, #4]
    8840:	3308      	adds	r3, #8
    8842:	015b      	lsls	r3, r3, #5
    8844:	4413      	add	r3, r2
    8846:	3304      	adds	r3, #4
    8848:	78ba      	ldrb	r2, [r7, #2]
    884a:	701a      	strb	r2, [r3, #0]
}
    884c:	bf00      	nop
    884e:	370c      	adds	r7, #12
    8850:	46bd      	mov	sp, r7
    8852:	f85d 7b04 	ldr.w	r7, [sp], #4
    8856:	4770      	bx	lr

00008858 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    8858:	b480      	push	{r7}
    885a:	b083      	sub	sp, #12
    885c:	af00      	add	r7, sp, #0
    885e:	6078      	str	r0, [r7, #4]
    8860:	460b      	mov	r3, r1
    8862:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8864:	78fb      	ldrb	r3, [r7, #3]
    8866:	687a      	ldr	r2, [r7, #4]
    8868:	015b      	lsls	r3, r3, #5
    886a:	4413      	add	r3, r2
    886c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8870:	2210      	movs	r2, #16
    8872:	701a      	strb	r2, [r3, #0]
}
    8874:	bf00      	nop
    8876:	370c      	adds	r7, #12
    8878:	46bd      	mov	sp, r7
    887a:	f85d 7b04 	ldr.w	r7, [sp], #4
    887e:	4770      	bx	lr

00008880 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    8880:	b480      	push	{r7}
    8882:	b083      	sub	sp, #12
    8884:	af00      	add	r7, sp, #0
    8886:	6078      	str	r0, [r7, #4]
    8888:	460b      	mov	r3, r1
    888a:	70fb      	strb	r3, [r7, #3]
    888c:	4613      	mov	r3, r2
    888e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8890:	78fb      	ldrb	r3, [r7, #3]
    8892:	687a      	ldr	r2, [r7, #4]
    8894:	015b      	lsls	r3, r3, #5
    8896:	4413      	add	r3, r2
    8898:	f203 1309 	addw	r3, r3, #265	; 0x109
    889c:	78ba      	ldrb	r2, [r7, #2]
    889e:	701a      	strb	r2, [r3, #0]
}
    88a0:	bf00      	nop
    88a2:	370c      	adds	r7, #12
    88a4:	46bd      	mov	sp, r7
    88a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    88aa:	4770      	bx	lr

000088ac <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    88ac:	b480      	push	{r7}
    88ae:	b083      	sub	sp, #12
    88b0:	af00      	add	r7, sp, #0
    88b2:	6078      	str	r0, [r7, #4]
    88b4:	460b      	mov	r3, r1
    88b6:	70fb      	strb	r3, [r7, #3]
    88b8:	4613      	mov	r3, r2
    88ba:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    88bc:	78fb      	ldrb	r3, [r7, #3]
    88be:	687a      	ldr	r2, [r7, #4]
    88c0:	015b      	lsls	r3, r3, #5
    88c2:	4413      	add	r3, r2
    88c4:	f503 7384 	add.w	r3, r3, #264	; 0x108
    88c8:	78ba      	ldrb	r2, [r7, #2]
    88ca:	701a      	strb	r2, [r3, #0]
}
    88cc:	bf00      	nop
    88ce:	370c      	adds	r7, #12
    88d0:	46bd      	mov	sp, r7
    88d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    88d6:	4770      	bx	lr

000088d8 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    88d8:	b480      	push	{r7}
    88da:	b085      	sub	sp, #20
    88dc:	af00      	add	r7, sp, #0
    88de:	6078      	str	r0, [r7, #4]
    88e0:	460b      	mov	r3, r1
    88e2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    88e4:	78fb      	ldrb	r3, [r7, #3]
    88e6:	687a      	ldr	r2, [r7, #4]
    88e8:	3308      	adds	r3, #8
    88ea:	015b      	lsls	r3, r3, #5
    88ec:	4413      	add	r3, r2
    88ee:	781b      	ldrb	r3, [r3, #0]
    88f0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    88f2:	7bfb      	ldrb	r3, [r7, #15]
    88f4:	f003 0307 	and.w	r3, r3, #7
    88f8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    88fa:	7bfb      	ldrb	r3, [r7, #15]
}
    88fc:	4618      	mov	r0, r3
    88fe:	3714      	adds	r7, #20
    8900:	46bd      	mov	sp, r7
    8902:	f85d 7b04 	ldr.w	r7, [sp], #4
    8906:	4770      	bx	lr

00008908 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8908:	b480      	push	{r7}
    890a:	b085      	sub	sp, #20
    890c:	af00      	add	r7, sp, #0
    890e:	6078      	str	r0, [r7, #4]
    8910:	460b      	mov	r3, r1
    8912:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8914:	78fb      	ldrb	r3, [r7, #3]
    8916:	687a      	ldr	r2, [r7, #4]
    8918:	3308      	adds	r3, #8
    891a:	015b      	lsls	r3, r3, #5
    891c:	4413      	add	r3, r2
    891e:	781b      	ldrb	r3, [r3, #0]
    8920:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    8922:	7bfb      	ldrb	r3, [r7, #15]
    8924:	091b      	lsrs	r3, r3, #4
    8926:	b2db      	uxtb	r3, r3
    8928:	f003 0307 	and.w	r3, r3, #7
    892c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    892e:	7bfb      	ldrb	r3, [r7, #15]
}
    8930:	4618      	mov	r0, r3
    8932:	3714      	adds	r7, #20
    8934:	46bd      	mov	sp, r7
    8936:	f85d 7b04 	ldr.w	r7, [sp], #4
    893a:	4770      	bx	lr

0000893c <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    893c:	b480      	push	{r7}
    893e:	b083      	sub	sp, #12
    8940:	af00      	add	r7, sp, #0
    8942:	6078      	str	r0, [r7, #4]
    8944:	460b      	mov	r3, r1
    8946:	70fb      	strb	r3, [r7, #3]
    8948:	4613      	mov	r3, r2
    894a:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    894c:	78fb      	ldrb	r3, [r7, #3]
    894e:	687a      	ldr	r2, [r7, #4]
    8950:	3308      	adds	r3, #8
    8952:	015b      	lsls	r3, r3, #5
    8954:	4413      	add	r3, r2
    8956:	78ba      	ldrb	r2, [r7, #2]
    8958:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    895a:	bf00      	nop
    895c:	370c      	adds	r7, #12
    895e:	46bd      	mov	sp, r7
    8960:	f85d 7b04 	ldr.w	r7, [sp], #4
    8964:	4770      	bx	lr

00008966 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    8966:	b480      	push	{r7}
    8968:	b083      	sub	sp, #12
    896a:	af00      	add	r7, sp, #0
    896c:	6078      	str	r0, [r7, #4]
    896e:	460b      	mov	r3, r1
    8970:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8972:	78fb      	ldrb	r3, [r7, #3]
    8974:	687a      	ldr	r2, [r7, #4]
    8976:	3308      	adds	r3, #8
    8978:	015b      	lsls	r3, r3, #5
    897a:	4413      	add	r3, r2
    897c:	781b      	ldrb	r3, [r3, #0]
    897e:	b2db      	uxtb	r3, r3
}
    8980:	4618      	mov	r0, r3
    8982:	370c      	adds	r7, #12
    8984:	46bd      	mov	sp, r7
    8986:	f85d 7b04 	ldr.w	r7, [sp], #4
    898a:	4770      	bx	lr

0000898c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    898c:	b480      	push	{r7}
    898e:	b083      	sub	sp, #12
    8990:	af00      	add	r7, sp, #0
    8992:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8994:	687b      	ldr	r3, [r7, #4]
    8996:	8b9b      	ldrh	r3, [r3, #28]
    8998:	b29b      	uxth	r3, r3
}
    899a:	4618      	mov	r0, r3
    899c:	370c      	adds	r7, #12
    899e:	46bd      	mov	sp, r7
    89a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    89a4:	4770      	bx	lr

000089a6 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    89a6:	b480      	push	{r7}
    89a8:	b083      	sub	sp, #12
    89aa:	af00      	add	r7, sp, #0
    89ac:	6078      	str	r0, [r7, #4]
    89ae:	460b      	mov	r3, r1
    89b0:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    89b2:	687b      	ldr	r3, [r7, #4]
    89b4:	887a      	ldrh	r2, [r7, #2]
    89b6:	839a      	strh	r2, [r3, #28]
}
    89b8:	bf00      	nop
    89ba:	370c      	adds	r7, #12
    89bc:	46bd      	mov	sp, r7
    89be:	f85d 7b04 	ldr.w	r7, [sp], #4
    89c2:	4770      	bx	lr

000089c4 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    89c4:	b480      	push	{r7}
    89c6:	b083      	sub	sp, #12
    89c8:	af00      	add	r7, sp, #0
    89ca:	6078      	str	r0, [r7, #4]
    89cc:	460b      	mov	r3, r1
    89ce:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    89d0:	687b      	ldr	r3, [r7, #4]
    89d2:	887a      	ldrh	r2, [r7, #2]
    89d4:	831a      	strh	r2, [r3, #24]
}
    89d6:	bf00      	nop
    89d8:	370c      	adds	r7, #12
    89da:	46bd      	mov	sp, r7
    89dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    89e0:	4770      	bx	lr

000089e2 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    89e2:	b480      	push	{r7}
    89e4:	b083      	sub	sp, #12
    89e6:	af00      	add	r7, sp, #0
    89e8:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    89ea:	687b      	ldr	r3, [r7, #4]
    89ec:	8b1b      	ldrh	r3, [r3, #24]
    89ee:	b29b      	uxth	r3, r3
}
    89f0:	4618      	mov	r0, r3
    89f2:	370c      	adds	r7, #12
    89f4:	46bd      	mov	sp, r7
    89f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    89fa:	4770      	bx	lr

000089fc <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    89fc:	b480      	push	{r7}
    89fe:	b083      	sub	sp, #12
    8a00:	af00      	add	r7, sp, #0
    8a02:	6078      	str	r0, [r7, #4]
    8a04:	460b      	mov	r3, r1
    8a06:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8a08:	687b      	ldr	r3, [r7, #4]
    8a0a:	887a      	ldrh	r2, [r7, #2]
    8a0c:	829a      	strh	r2, [r3, #20]
}
    8a0e:	bf00      	nop
    8a10:	370c      	adds	r7, #12
    8a12:	46bd      	mov	sp, r7
    8a14:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a18:	4770      	bx	lr

00008a1a <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    8a1a:	b480      	push	{r7}
    8a1c:	b085      	sub	sp, #20
    8a1e:	af00      	add	r7, sp, #0
    8a20:	6078      	str	r0, [r7, #4]
    8a22:	460b      	mov	r3, r1
    8a24:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    8a26:	687b      	ldr	r3, [r7, #4]
    8a28:	789b      	ldrb	r3, [r3, #2]
    8a2a:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8a2c:	7bfa      	ldrb	r2, [r7, #15]
    8a2e:	78fb      	ldrb	r3, [r7, #3]
    8a30:	4013      	ands	r3, r2
    8a32:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8a34:	7bfb      	ldrb	r3, [r7, #15]
}
    8a36:	4618      	mov	r0, r3
    8a38:	3714      	adds	r7, #20
    8a3a:	46bd      	mov	sp, r7
    8a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a40:	4770      	bx	lr
	...

00008a44 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8a44:	b580      	push	{r7, lr}
    8a46:	b082      	sub	sp, #8
    8a48:	af00      	add	r7, sp, #0
    8a4a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8a4c:	687b      	ldr	r3, [r7, #4]
    8a4e:	781b      	ldrb	r3, [r3, #0]
    8a50:	b2db      	uxtb	r3, r3
    8a52:	f023 0302 	bic.w	r3, r3, #2
    8a56:	b2da      	uxtb	r2, r3
    8a58:	687b      	ldr	r3, [r7, #4]
    8a5a:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    8a5c:	2103      	movs	r1, #3
    8a5e:	6878      	ldr	r0, [r7, #4]
    8a60:	4b02      	ldr	r3, [pc, #8]	; (8a6c <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    8a62:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8a64:	bf00      	nop
    8a66:	3708      	adds	r7, #8
    8a68:	46bd      	mov	sp, r7
    8a6a:	bd80      	pop	{r7, pc}
    8a6c:	000086f7 	.word	0x000086f7

00008a70 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    8a70:	b580      	push	{r7, lr}
    8a72:	b084      	sub	sp, #16
    8a74:	af00      	add	r7, sp, #0
    8a76:	6078      	str	r0, [r7, #4]
    8a78:	460b      	mov	r3, r1
    8a7a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8a7c:	2103      	movs	r1, #3
    8a7e:	6878      	ldr	r0, [r7, #4]
    8a80:	4b06      	ldr	r3, [pc, #24]	; (8a9c <hri_usb_get_CTRLA_reg+0x2c>)
    8a82:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8a84:	687b      	ldr	r3, [r7, #4]
    8a86:	781b      	ldrb	r3, [r3, #0]
    8a88:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8a8a:	7bfa      	ldrb	r2, [r7, #15]
    8a8c:	78fb      	ldrb	r3, [r7, #3]
    8a8e:	4013      	ands	r3, r2
    8a90:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8a92:	7bfb      	ldrb	r3, [r7, #15]
}
    8a94:	4618      	mov	r0, r3
    8a96:	3710      	adds	r7, #16
    8a98:	46bd      	mov	sp, r7
    8a9a:	bd80      	pop	{r7, pc}
    8a9c:	000086f7 	.word	0x000086f7

00008aa0 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    8aa0:	b580      	push	{r7, lr}
    8aa2:	b082      	sub	sp, #8
    8aa4:	af00      	add	r7, sp, #0
    8aa6:	6078      	str	r0, [r7, #4]
    8aa8:	460b      	mov	r3, r1
    8aaa:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8aac:	687b      	ldr	r3, [r7, #4]
    8aae:	78fa      	ldrb	r2, [r7, #3]
    8ab0:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8ab2:	2103      	movs	r1, #3
    8ab4:	6878      	ldr	r0, [r7, #4]
    8ab6:	4b03      	ldr	r3, [pc, #12]	; (8ac4 <hri_usb_write_CTRLA_reg+0x24>)
    8ab8:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8aba:	bf00      	nop
    8abc:	3708      	adds	r7, #8
    8abe:	46bd      	mov	sp, r7
    8ac0:	bd80      	pop	{r7, pc}
    8ac2:	bf00      	nop
    8ac4:	000086f7 	.word	0x000086f7

00008ac8 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    8ac8:	b580      	push	{r7, lr}
    8aca:	b082      	sub	sp, #8
    8acc:	af00      	add	r7, sp, #0
    8ace:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8ad0:	2103      	movs	r1, #3
    8ad2:	6878      	ldr	r0, [r7, #4]
    8ad4:	4b04      	ldr	r3, [pc, #16]	; (8ae8 <hri_usb_read_CTRLA_reg+0x20>)
    8ad6:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8ad8:	687b      	ldr	r3, [r7, #4]
    8ada:	781b      	ldrb	r3, [r3, #0]
    8adc:	b2db      	uxtb	r3, r3
}
    8ade:	4618      	mov	r0, r3
    8ae0:	3708      	adds	r7, #8
    8ae2:	46bd      	mov	sp, r7
    8ae4:	bd80      	pop	{r7, pc}
    8ae6:	bf00      	nop
    8ae8:	000086f7 	.word	0x000086f7

00008aec <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    8aec:	b480      	push	{r7}
    8aee:	b083      	sub	sp, #12
    8af0:	af00      	add	r7, sp, #0
    8af2:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8af4:	687b      	ldr	r3, [r7, #4]
    8af6:	891b      	ldrh	r3, [r3, #8]
    8af8:	b29b      	uxth	r3, r3
    8afa:	f023 0301 	bic.w	r3, r3, #1
    8afe:	b29a      	uxth	r2, r3
    8b00:	687b      	ldr	r3, [r7, #4]
    8b02:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8b04:	bf00      	nop
    8b06:	370c      	adds	r7, #12
    8b08:	46bd      	mov	sp, r7
    8b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b0e:	4770      	bx	lr

00008b10 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    8b10:	b480      	push	{r7}
    8b12:	b083      	sub	sp, #12
    8b14:	af00      	add	r7, sp, #0
    8b16:	6078      	str	r0, [r7, #4]
    8b18:	460b      	mov	r3, r1
    8b1a:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8b1c:	687b      	ldr	r3, [r7, #4]
    8b1e:	887a      	ldrh	r2, [r7, #2]
    8b20:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8b22:	bf00      	nop
    8b24:	370c      	adds	r7, #12
    8b26:	46bd      	mov	sp, r7
    8b28:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b2c:	4770      	bx	lr

00008b2e <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    8b2e:	b480      	push	{r7}
    8b30:	b083      	sub	sp, #12
    8b32:	af00      	add	r7, sp, #0
    8b34:	6078      	str	r0, [r7, #4]
    8b36:	460b      	mov	r3, r1
    8b38:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8b3a:	687b      	ldr	r3, [r7, #4]
    8b3c:	78fa      	ldrb	r2, [r7, #3]
    8b3e:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    8b40:	bf00      	nop
    8b42:	370c      	adds	r7, #12
    8b44:	46bd      	mov	sp, r7
    8b46:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b4a:	4770      	bx	lr

00008b4c <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    8b4c:	b480      	push	{r7}
    8b4e:	b083      	sub	sp, #12
    8b50:	af00      	add	r7, sp, #0
    8b52:	6078      	str	r0, [r7, #4]
    8b54:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    8b56:	687b      	ldr	r3, [r7, #4]
    8b58:	683a      	ldr	r2, [r7, #0]
    8b5a:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    8b5c:	bf00      	nop
    8b5e:	370c      	adds	r7, #12
    8b60:	46bd      	mov	sp, r7
    8b62:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b66:	4770      	bx	lr

00008b68 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    8b68:	b480      	push	{r7}
    8b6a:	b083      	sub	sp, #12
    8b6c:	af00      	add	r7, sp, #0
    8b6e:	6078      	str	r0, [r7, #4]
    8b70:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    8b72:	2300      	movs	r3, #0
}
    8b74:	4618      	mov	r0, r3
    8b76:	370c      	adds	r7, #12
    8b78:	46bd      	mov	sp, r7
    8b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b7e:	4770      	bx	lr

00008b80 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    8b80:	b480      	push	{r7}
    8b82:	b085      	sub	sp, #20
    8b84:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    8b86:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8b8a:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8b8c:	4b28      	ldr	r3, [pc, #160]	; (8c30 <_usb_load_calib+0xb0>)
    8b8e:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    8b90:	f003 031f 	and.w	r3, r3, #31
    8b94:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    8b96:	4b26      	ldr	r3, [pc, #152]	; (8c30 <_usb_load_calib+0xb0>)
    8b98:	681b      	ldr	r3, [r3, #0]
    8b9a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    8b9c:	f003 031f 	and.w	r3, r3, #31
    8ba0:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8ba2:	4b23      	ldr	r3, [pc, #140]	; (8c30 <_usb_load_calib+0xb0>)
    8ba4:	681b      	ldr	r3, [r3, #0]
    8ba6:	0a9b      	lsrs	r3, r3, #10
    8ba8:	f003 0307 	and.w	r3, r3, #7
    8bac:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8bae:	68fb      	ldr	r3, [r7, #12]
    8bb0:	2b00      	cmp	r3, #0
    8bb2:	d002      	beq.n	8bba <_usb_load_calib+0x3a>
    8bb4:	68fb      	ldr	r3, [r7, #12]
    8bb6:	2b1f      	cmp	r3, #31
    8bb8:	d101      	bne.n	8bbe <_usb_load_calib+0x3e>
		pad_transn = 9;
    8bba:	2309      	movs	r3, #9
    8bbc:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8bbe:	68bb      	ldr	r3, [r7, #8]
    8bc0:	2b00      	cmp	r3, #0
    8bc2:	d002      	beq.n	8bca <_usb_load_calib+0x4a>
    8bc4:	68bb      	ldr	r3, [r7, #8]
    8bc6:	2b1f      	cmp	r3, #31
    8bc8:	d101      	bne.n	8bce <_usb_load_calib+0x4e>
		pad_transp = 25;
    8bca:	2319      	movs	r3, #25
    8bcc:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    8bce:	687b      	ldr	r3, [r7, #4]
    8bd0:	2b00      	cmp	r3, #0
    8bd2:	d002      	beq.n	8bda <_usb_load_calib+0x5a>
    8bd4:	687b      	ldr	r3, [r7, #4]
    8bd6:	2b07      	cmp	r3, #7
    8bd8:	d101      	bne.n	8bde <_usb_load_calib+0x5e>
		pad_trim = 6;
    8bda:	2306      	movs	r3, #6
    8bdc:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8bde:	68fb      	ldr	r3, [r7, #12]
    8be0:	b29b      	uxth	r3, r3
    8be2:	019b      	lsls	r3, r3, #6
    8be4:	b29b      	uxth	r3, r3
    8be6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    8bea:	b29a      	uxth	r2, r3
    8bec:	68bb      	ldr	r3, [r7, #8]
    8bee:	b29b      	uxth	r3, r3
    8bf0:	f003 031f 	and.w	r3, r3, #31
    8bf4:	b29b      	uxth	r3, r3
    8bf6:	4313      	orrs	r3, r2
    8bf8:	b29a      	uxth	r2, r3
    8bfa:	687b      	ldr	r3, [r7, #4]
    8bfc:	b29b      	uxth	r3, r3
    8bfe:	031b      	lsls	r3, r3, #12
    8c00:	b29b      	uxth	r3, r3
    8c02:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    8c06:	b29b      	uxth	r3, r3
    8c08:	4313      	orrs	r3, r2
    8c0a:	b29a      	uxth	r2, r3
    8c0c:	683b      	ldr	r3, [r7, #0]
    8c0e:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    8c10:	683a      	ldr	r2, [r7, #0]
    8c12:	78d3      	ldrb	r3, [r2, #3]
    8c14:	f043 0303 	orr.w	r3, r3, #3
    8c18:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8c1a:	683a      	ldr	r2, [r7, #0]
    8c1c:	78d3      	ldrb	r3, [r2, #3]
    8c1e:	f043 030c 	orr.w	r3, r3, #12
    8c22:	70d3      	strb	r3, [r2, #3]
}
    8c24:	bf00      	nop
    8c26:	3714      	adds	r7, #20
    8c28:	46bd      	mov	sp, r7
    8c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c2e:	4770      	bx	lr
    8c30:	00800084 	.word	0x00800084

00008c34 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    8c34:	b580      	push	{r7, lr}
    8c36:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    8c38:	bf00      	nop
    8c3a:	2203      	movs	r2, #3
    8c3c:	2100      	movs	r1, #0
    8c3e:	4804      	ldr	r0, [pc, #16]	; (8c50 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    8c40:	4b04      	ldr	r3, [pc, #16]	; (8c54 <_usb_d_dev_wait_dpll_rdy+0x20>)
    8c42:	4798      	blx	r3
    8c44:	4603      	mov	r3, r0
    8c46:	2b03      	cmp	r3, #3
    8c48:	d1f7      	bne.n	8c3a <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    8c4a:	bf00      	nop
    8c4c:	bd80      	pop	{r7, pc}
    8c4e:	bf00      	nop
    8c50:	40001000 	.word	0x40001000
    8c54:	00008669 	.word	0x00008669

00008c58 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    8c58:	b580      	push	{r7, lr}
    8c5a:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8c5c:	480e      	ldr	r0, [pc, #56]	; (8c98 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8c5e:	4b0f      	ldr	r3, [pc, #60]	; (8c9c <_usb_d_dev_wait_dfll_rdy+0x44>)
    8c60:	4798      	blx	r3
    8c62:	4603      	mov	r3, r0
    8c64:	2b00      	cmp	r3, #0
    8c66:	d00a      	beq.n	8c7e <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8c68:	bf00      	nop
    8c6a:	f44f 6110 	mov.w	r1, #2304	; 0x900
    8c6e:	480a      	ldr	r0, [pc, #40]	; (8c98 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8c70:	4b0b      	ldr	r3, [pc, #44]	; (8ca0 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8c72:	4798      	blx	r3
    8c74:	4603      	mov	r3, r0
    8c76:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8c7a:	d1f6      	bne.n	8c6a <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    8c7c:	e009      	b.n	8c92 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8c7e:	bf00      	nop
    8c80:	f44f 7180 	mov.w	r1, #256	; 0x100
    8c84:	4804      	ldr	r0, [pc, #16]	; (8c98 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8c86:	4b06      	ldr	r3, [pc, #24]	; (8ca0 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8c88:	4798      	blx	r3
    8c8a:	4603      	mov	r3, r0
    8c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8c90:	d1f6      	bne.n	8c80 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    8c92:	bf00      	nop
    8c94:	bd80      	pop	{r7, pc}
    8c96:	bf00      	nop
    8c98:	40001000 	.word	0x40001000
    8c9c:	000086c7 	.word	0x000086c7
    8ca0:	000086a1 	.word	0x000086a1

00008ca4 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    8ca4:	b580      	push	{r7, lr}
    8ca6:	b082      	sub	sp, #8
    8ca8:	af00      	add	r7, sp, #0
    8caa:	4603      	mov	r3, r0
    8cac:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    8cae:	79fb      	ldrb	r3, [r7, #7]
    8cb0:	2b00      	cmp	r3, #0
    8cb2:	d102      	bne.n	8cba <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    8cb4:	4b05      	ldr	r3, [pc, #20]	; (8ccc <_usb_d_dev_wait_clk_rdy+0x28>)
    8cb6:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8cb8:	e004      	b.n	8cc4 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    8cba:	79fb      	ldrb	r3, [r7, #7]
    8cbc:	2b01      	cmp	r3, #1
    8cbe:	d101      	bne.n	8cc4 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    8cc0:	4b03      	ldr	r3, [pc, #12]	; (8cd0 <_usb_d_dev_wait_clk_rdy+0x2c>)
    8cc2:	4798      	blx	r3
}
    8cc4:	bf00      	nop
    8cc6:	3708      	adds	r7, #8
    8cc8:	46bd      	mov	sp, r7
    8cca:	bd80      	pop	{r7, pc}
    8ccc:	00008c59 	.word	0x00008c59
    8cd0:	00008c35 	.word	0x00008c35

00008cd4 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    8cd4:	b580      	push	{r7, lr}
    8cd6:	b082      	sub	sp, #8
    8cd8:	af00      	add	r7, sp, #0
    8cda:	4603      	mov	r3, r0
    8cdc:	6039      	str	r1, [r7, #0]
    8cde:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    8ce0:	683b      	ldr	r3, [r7, #0]
    8ce2:	b2da      	uxtb	r2, r3
    8ce4:	79fb      	ldrb	r3, [r7, #7]
    8ce6:	4619      	mov	r1, r3
    8ce8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8cec:	4b02      	ldr	r3, [pc, #8]	; (8cf8 <_usbd_ep_int_ack+0x24>)
    8cee:	4798      	blx	r3
}
    8cf0:	bf00      	nop
    8cf2:	3708      	adds	r7, #8
    8cf4:	46bd      	mov	sp, r7
    8cf6:	bd80      	pop	{r7, pc}
    8cf8:	000087ad 	.word	0x000087ad

00008cfc <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    8cfc:	b580      	push	{r7, lr}
    8cfe:	b082      	sub	sp, #8
    8d00:	af00      	add	r7, sp, #0
    8d02:	4603      	mov	r3, r0
    8d04:	6039      	str	r1, [r7, #0]
    8d06:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8d08:	683b      	ldr	r3, [r7, #0]
    8d0a:	b2da      	uxtb	r2, r3
    8d0c:	79fb      	ldrb	r3, [r7, #7]
    8d0e:	4619      	mov	r1, r3
    8d10:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d14:	4b02      	ldr	r3, [pc, #8]	; (8d20 <_usbd_ep_int_en+0x24>)
    8d16:	4798      	blx	r3
}
    8d18:	bf00      	nop
    8d1a:	3708      	adds	r7, #8
    8d1c:	46bd      	mov	sp, r7
    8d1e:	bd80      	pop	{r7, pc}
    8d20:	00008881 	.word	0x00008881

00008d24 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    8d24:	b580      	push	{r7, lr}
    8d26:	b082      	sub	sp, #8
    8d28:	af00      	add	r7, sp, #0
    8d2a:	4603      	mov	r3, r0
    8d2c:	6039      	str	r1, [r7, #0]
    8d2e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8d30:	683b      	ldr	r3, [r7, #0]
    8d32:	b2da      	uxtb	r2, r3
    8d34:	79fb      	ldrb	r3, [r7, #7]
    8d36:	4619      	mov	r1, r3
    8d38:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d3c:	4b02      	ldr	r3, [pc, #8]	; (8d48 <_usbd_ep_int_dis+0x24>)
    8d3e:	4798      	blx	r3
}
    8d40:	bf00      	nop
    8d42:	3708      	adds	r7, #8
    8d44:	46bd      	mov	sp, r7
    8d46:	bd80      	pop	{r7, pc}
    8d48:	000088ad 	.word	0x000088ad

00008d4c <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    8d4c:	b580      	push	{r7, lr}
    8d4e:	b082      	sub	sp, #8
    8d50:	af00      	add	r7, sp, #0
    8d52:	4603      	mov	r3, r0
    8d54:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    8d56:	79fb      	ldrb	r3, [r7, #7]
    8d58:	4619      	mov	r1, r3
    8d5a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d5e:	4b06      	ldr	r3, [pc, #24]	; (8d78 <_usbd_ep_is_ctrl+0x2c>)
    8d60:	4798      	blx	r3
    8d62:	4603      	mov	r3, r0
    8d64:	2b11      	cmp	r3, #17
    8d66:	bf0c      	ite	eq
    8d68:	2301      	moveq	r3, #1
    8d6a:	2300      	movne	r3, #0
    8d6c:	b2db      	uxtb	r3, r3
}
    8d6e:	4618      	mov	r0, r3
    8d70:	3708      	adds	r7, #8
    8d72:	46bd      	mov	sp, r7
    8d74:	bd80      	pop	{r7, pc}
    8d76:	bf00      	nop
    8d78:	00008967 	.word	0x00008967

00008d7c <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    8d7c:	b580      	push	{r7, lr}
    8d7e:	b082      	sub	sp, #8
    8d80:	af00      	add	r7, sp, #0
    8d82:	4603      	mov	r3, r0
    8d84:	71fb      	strb	r3, [r7, #7]
    8d86:	460b      	mov	r3, r1
    8d88:	71bb      	strb	r3, [r7, #6]
    8d8a:	4613      	mov	r3, r2
    8d8c:	717b      	strb	r3, [r7, #5]
	if (st) {
    8d8e:	797b      	ldrb	r3, [r7, #5]
    8d90:	2b00      	cmp	r3, #0
    8d92:	d00b      	beq.n	8dac <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8d94:	79bb      	ldrb	r3, [r7, #6]
    8d96:	2210      	movs	r2, #16
    8d98:	fa02 f303 	lsl.w	r3, r2, r3
    8d9c:	b2da      	uxtb	r2, r3
    8d9e:	79fb      	ldrb	r3, [r7, #7]
    8da0:	4619      	mov	r1, r3
    8da2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8da6:	4b09      	ldr	r3, [pc, #36]	; (8dcc <_usbd_ep_set_stall+0x50>)
    8da8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    8daa:	e00a      	b.n	8dc2 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8dac:	79bb      	ldrb	r3, [r7, #6]
    8dae:	2210      	movs	r2, #16
    8db0:	fa02 f303 	lsl.w	r3, r2, r3
    8db4:	b2da      	uxtb	r2, r3
    8db6:	79fb      	ldrb	r3, [r7, #7]
    8db8:	4619      	mov	r1, r3
    8dba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8dbe:	4b04      	ldr	r3, [pc, #16]	; (8dd0 <_usbd_ep_set_stall+0x54>)
    8dc0:	4798      	blx	r3
}
    8dc2:	bf00      	nop
    8dc4:	3708      	adds	r7, #8
    8dc6:	46bd      	mov	sp, r7
    8dc8:	bd80      	pop	{r7, pc}
    8dca:	bf00      	nop
    8dcc:	000087d9 	.word	0x000087d9
    8dd0:	0000882d 	.word	0x0000882d

00008dd4 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8dd4:	b580      	push	{r7, lr}
    8dd6:	b084      	sub	sp, #16
    8dd8:	af00      	add	r7, sp, #0
    8dda:	4603      	mov	r3, r0
    8ddc:	460a      	mov	r2, r1
    8dde:	71fb      	strb	r3, [r7, #7]
    8de0:	4613      	mov	r3, r2
    8de2:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8de4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8de8:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8dea:	79fb      	ldrb	r3, [r7, #7]
    8dec:	4619      	mov	r1, r3
    8dee:	68f8      	ldr	r0, [r7, #12]
    8df0:	4b08      	ldr	r3, [pc, #32]	; (8e14 <_usbd_ep_is_stalled+0x40>)
    8df2:	4798      	blx	r3
    8df4:	4603      	mov	r3, r0
    8df6:	4619      	mov	r1, r3
    8df8:	79bb      	ldrb	r3, [r7, #6]
    8dfa:	2210      	movs	r2, #16
    8dfc:	fa02 f303 	lsl.w	r3, r2, r3
    8e00:	400b      	ands	r3, r1
    8e02:	2b00      	cmp	r3, #0
    8e04:	bf14      	ite	ne
    8e06:	2301      	movne	r3, #1
    8e08:	2300      	moveq	r3, #0
    8e0a:	b2db      	uxtb	r3, r3
}
    8e0c:	4618      	mov	r0, r3
    8e0e:	3710      	adds	r7, #16
    8e10:	46bd      	mov	sp, r7
    8e12:	bd80      	pop	{r7, pc}
    8e14:	00008805 	.word	0x00008805

00008e18 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    8e18:	b580      	push	{r7, lr}
    8e1a:	b084      	sub	sp, #16
    8e1c:	af00      	add	r7, sp, #0
    8e1e:	4603      	mov	r3, r0
    8e20:	460a      	mov	r2, r1
    8e22:	71fb      	strb	r3, [r7, #7]
    8e24:	4613      	mov	r3, r2
    8e26:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8e28:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8e2c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8e2e:	79fb      	ldrb	r3, [r7, #7]
    8e30:	4619      	mov	r1, r3
    8e32:	68f8      	ldr	r0, [r7, #12]
    8e34:	4b08      	ldr	r3, [pc, #32]	; (8e58 <_usbd_ep_is_stall_sent+0x40>)
    8e36:	4798      	blx	r3
    8e38:	4603      	mov	r3, r0
    8e3a:	4619      	mov	r1, r3
    8e3c:	79bb      	ldrb	r3, [r7, #6]
    8e3e:	2220      	movs	r2, #32
    8e40:	fa02 f303 	lsl.w	r3, r2, r3
    8e44:	400b      	ands	r3, r1
    8e46:	2b00      	cmp	r3, #0
    8e48:	bf14      	ite	ne
    8e4a:	2301      	movne	r3, #1
    8e4c:	2300      	moveq	r3, #0
    8e4e:	b2db      	uxtb	r3, r3
}
    8e50:	4618      	mov	r0, r3
    8e52:	3710      	adds	r7, #16
    8e54:	46bd      	mov	sp, r7
    8e56:	bd80      	pop	{r7, pc}
    8e58:	00008785 	.word	0x00008785

00008e5c <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    8e5c:	b580      	push	{r7, lr}
    8e5e:	b082      	sub	sp, #8
    8e60:	af00      	add	r7, sp, #0
    8e62:	4603      	mov	r3, r0
    8e64:	460a      	mov	r2, r1
    8e66:	71fb      	strb	r3, [r7, #7]
    8e68:	4613      	mov	r3, r2
    8e6a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8e6c:	79bb      	ldrb	r3, [r7, #6]
    8e6e:	2220      	movs	r2, #32
    8e70:	409a      	lsls	r2, r3
    8e72:	79fb      	ldrb	r3, [r7, #7]
    8e74:	4611      	mov	r1, r2
    8e76:	4618      	mov	r0, r3
    8e78:	4b02      	ldr	r3, [pc, #8]	; (8e84 <_usbd_ep_ack_stall+0x28>)
    8e7a:	4798      	blx	r3
}
    8e7c:	bf00      	nop
    8e7e:	3708      	adds	r7, #8
    8e80:	46bd      	mov	sp, r7
    8e82:	bd80      	pop	{r7, pc}
    8e84:	00008cd5 	.word	0x00008cd5

00008e88 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8e88:	b580      	push	{r7, lr}
    8e8a:	b082      	sub	sp, #8
    8e8c:	af00      	add	r7, sp, #0
    8e8e:	4603      	mov	r3, r0
    8e90:	71fb      	strb	r3, [r7, #7]
    8e92:	460b      	mov	r3, r1
    8e94:	71bb      	strb	r3, [r7, #6]
    8e96:	4613      	mov	r3, r2
    8e98:	717b      	strb	r3, [r7, #5]
	if (en) {
    8e9a:	797b      	ldrb	r3, [r7, #5]
    8e9c:	2b00      	cmp	r3, #0
    8e9e:	d008      	beq.n	8eb2 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8ea0:	79bb      	ldrb	r3, [r7, #6]
    8ea2:	2220      	movs	r2, #32
    8ea4:	409a      	lsls	r2, r3
    8ea6:	79fb      	ldrb	r3, [r7, #7]
    8ea8:	4611      	mov	r1, r2
    8eaa:	4618      	mov	r0, r3
    8eac:	4b07      	ldr	r3, [pc, #28]	; (8ecc <_usbd_ep_int_stall_en+0x44>)
    8eae:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8eb0:	e007      	b.n	8ec2 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8eb2:	79bb      	ldrb	r3, [r7, #6]
    8eb4:	2220      	movs	r2, #32
    8eb6:	409a      	lsls	r2, r3
    8eb8:	79fb      	ldrb	r3, [r7, #7]
    8eba:	4611      	mov	r1, r2
    8ebc:	4618      	mov	r0, r3
    8ebe:	4b04      	ldr	r3, [pc, #16]	; (8ed0 <_usbd_ep_int_stall_en+0x48>)
    8ec0:	4798      	blx	r3
}
    8ec2:	bf00      	nop
    8ec4:	3708      	adds	r7, #8
    8ec6:	46bd      	mov	sp, r7
    8ec8:	bd80      	pop	{r7, pc}
    8eca:	bf00      	nop
    8ecc:	00008cfd 	.word	0x00008cfd
    8ed0:	00008d25 	.word	0x00008d25

00008ed4 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8ed4:	b580      	push	{r7, lr}
    8ed6:	b082      	sub	sp, #8
    8ed8:	af00      	add	r7, sp, #0
    8eda:	4603      	mov	r3, r0
    8edc:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    8ede:	79fb      	ldrb	r3, [r7, #7]
    8ee0:	4619      	mov	r1, r3
    8ee2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ee6:	4b03      	ldr	r3, [pc, #12]	; (8ef4 <_usbd_ep_stop_setup+0x20>)
    8ee8:	4798      	blx	r3
}
    8eea:	bf00      	nop
    8eec:	3708      	adds	r7, #8
    8eee:	46bd      	mov	sp, r7
    8ef0:	bd80      	pop	{r7, pc}
    8ef2:	bf00      	nop
    8ef4:	00008859 	.word	0x00008859

00008ef8 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8ef8:	b580      	push	{r7, lr}
    8efa:	b082      	sub	sp, #8
    8efc:	af00      	add	r7, sp, #0
    8efe:	4603      	mov	r3, r0
    8f00:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8f02:	79fb      	ldrb	r3, [r7, #7]
    8f04:	2210      	movs	r2, #16
    8f06:	4619      	mov	r1, r3
    8f08:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f0c:	4b05      	ldr	r3, [pc, #20]	; (8f24 <_usbd_ep_is_setup+0x2c>)
    8f0e:	4798      	blx	r3
    8f10:	4603      	mov	r3, r0
    8f12:	2b00      	cmp	r3, #0
    8f14:	bf14      	ite	ne
    8f16:	2301      	movne	r3, #1
    8f18:	2300      	moveq	r3, #0
    8f1a:	b2db      	uxtb	r3, r3
}
    8f1c:	4618      	mov	r0, r3
    8f1e:	3708      	adds	r7, #8
    8f20:	46bd      	mov	sp, r7
    8f22:	bd80      	pop	{r7, pc}
    8f24:	0000874f 	.word	0x0000874f

00008f28 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    8f28:	b580      	push	{r7, lr}
    8f2a:	b082      	sub	sp, #8
    8f2c:	af00      	add	r7, sp, #0
    8f2e:	4603      	mov	r3, r0
    8f30:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8f32:	79fb      	ldrb	r3, [r7, #7]
    8f34:	2110      	movs	r1, #16
    8f36:	4618      	mov	r0, r3
    8f38:	4b02      	ldr	r3, [pc, #8]	; (8f44 <_usbd_ep_ack_setup+0x1c>)
    8f3a:	4798      	blx	r3
}
    8f3c:	bf00      	nop
    8f3e:	3708      	adds	r7, #8
    8f40:	46bd      	mov	sp, r7
    8f42:	bd80      	pop	{r7, pc}
    8f44:	00008cd5 	.word	0x00008cd5

00008f48 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    8f48:	b580      	push	{r7, lr}
    8f4a:	b082      	sub	sp, #8
    8f4c:	af00      	add	r7, sp, #0
    8f4e:	4603      	mov	r3, r0
    8f50:	71fb      	strb	r3, [r7, #7]
    8f52:	460b      	mov	r3, r1
    8f54:	71bb      	strb	r3, [r7, #6]
    8f56:	4613      	mov	r3, r2
    8f58:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    8f5a:	797b      	ldrb	r3, [r7, #5]
    8f5c:	2b00      	cmp	r3, #0
    8f5e:	d00b      	beq.n	8f78 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8f60:	79bb      	ldrb	r3, [r7, #6]
    8f62:	2201      	movs	r2, #1
    8f64:	fa02 f303 	lsl.w	r3, r2, r3
    8f68:	b2da      	uxtb	r2, r3
    8f6a:	79fb      	ldrb	r3, [r7, #7]
    8f6c:	4619      	mov	r1, r3
    8f6e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f72:	4b09      	ldr	r3, [pc, #36]	; (8f98 <_usbd_ep_set_toggle+0x50>)
    8f74:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    8f76:	e00a      	b.n	8f8e <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8f78:	79bb      	ldrb	r3, [r7, #6]
    8f7a:	2201      	movs	r2, #1
    8f7c:	fa02 f303 	lsl.w	r3, r2, r3
    8f80:	b2da      	uxtb	r2, r3
    8f82:	79fb      	ldrb	r3, [r7, #7]
    8f84:	4619      	mov	r1, r3
    8f86:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f8a:	4b04      	ldr	r3, [pc, #16]	; (8f9c <_usbd_ep_set_toggle+0x54>)
    8f8c:	4798      	blx	r3
}
    8f8e:	bf00      	nop
    8f90:	3708      	adds	r7, #8
    8f92:	46bd      	mov	sp, r7
    8f94:	bd80      	pop	{r7, pc}
    8f96:	bf00      	nop
    8f98:	000087d9 	.word	0x000087d9
    8f9c:	0000882d 	.word	0x0000882d

00008fa0 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    8fa0:	b580      	push	{r7, lr}
    8fa2:	b082      	sub	sp, #8
    8fa4:	af00      	add	r7, sp, #0
    8fa6:	4603      	mov	r3, r0
    8fa8:	460a      	mov	r2, r1
    8faa:	71fb      	strb	r3, [r7, #7]
    8fac:	4613      	mov	r3, r2
    8fae:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    8fb0:	79bb      	ldrb	r3, [r7, #6]
    8fb2:	2201      	movs	r2, #1
    8fb4:	409a      	lsls	r2, r3
    8fb6:	79fb      	ldrb	r3, [r7, #7]
    8fb8:	4611      	mov	r1, r2
    8fba:	4618      	mov	r0, r3
    8fbc:	4b02      	ldr	r3, [pc, #8]	; (8fc8 <_usbd_ep_ack_io_cpt+0x28>)
    8fbe:	4798      	blx	r3
}
    8fc0:	bf00      	nop
    8fc2:	3708      	adds	r7, #8
    8fc4:	46bd      	mov	sp, r7
    8fc6:	bd80      	pop	{r7, pc}
    8fc8:	00008cd5 	.word	0x00008cd5

00008fcc <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    8fcc:	b480      	push	{r7}
    8fce:	b085      	sub	sp, #20
    8fd0:	af00      	add	r7, sp, #0
    8fd2:	4603      	mov	r3, r0
    8fd4:	603a      	str	r2, [r7, #0]
    8fd6:	71fb      	strb	r3, [r7, #7]
    8fd8:	460b      	mov	r3, r1
    8fda:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8fdc:	79fa      	ldrb	r2, [r7, #7]
    8fde:	79bb      	ldrb	r3, [r7, #6]
    8fe0:	0052      	lsls	r2, r2, #1
    8fe2:	4413      	add	r3, r2
    8fe4:	011b      	lsls	r3, r3, #4
    8fe6:	4a06      	ldr	r2, [pc, #24]	; (9000 <_usbd_ep_set_buf+0x34>)
    8fe8:	4413      	add	r3, r2
    8fea:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    8fec:	68fb      	ldr	r3, [r7, #12]
    8fee:	683a      	ldr	r2, [r7, #0]
    8ff0:	601a      	str	r2, [r3, #0]
}
    8ff2:	bf00      	nop
    8ff4:	3714      	adds	r7, #20
    8ff6:	46bd      	mov	sp, r7
    8ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ffc:	4770      	bx	lr
    8ffe:	bf00      	nop
    9000:	20000e50 	.word	0x20000e50

00009004 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9004:	b480      	push	{r7}
    9006:	b085      	sub	sp, #20
    9008:	af00      	add	r7, sp, #0
    900a:	4603      	mov	r3, r0
    900c:	71fb      	strb	r3, [r7, #7]
    900e:	460b      	mov	r3, r1
    9010:	71bb      	strb	r3, [r7, #6]
    9012:	4613      	mov	r3, r2
    9014:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9016:	79fa      	ldrb	r2, [r7, #7]
    9018:	79bb      	ldrb	r3, [r7, #6]
    901a:	0052      	lsls	r2, r2, #1
    901c:	4413      	add	r3, r2
    901e:	011b      	lsls	r3, r3, #4
    9020:	4a08      	ldr	r2, [pc, #32]	; (9044 <_usbd_ep_set_in_count+0x40>)
    9022:	4413      	add	r3, r2
    9024:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    9026:	88bb      	ldrh	r3, [r7, #4]
    9028:	f3c3 030d 	ubfx	r3, r3, #0, #14
    902c:	b299      	uxth	r1, r3
    902e:	68fa      	ldr	r2, [r7, #12]
    9030:	6853      	ldr	r3, [r2, #4]
    9032:	f361 339b 	bfi	r3, r1, #14, #14
    9036:	6053      	str	r3, [r2, #4]
}
    9038:	bf00      	nop
    903a:	3714      	adds	r7, #20
    903c:	46bd      	mov	sp, r7
    903e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9042:	4770      	bx	lr
    9044:	20000e50 	.word	0x20000e50

00009048 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9048:	b480      	push	{r7}
    904a:	b085      	sub	sp, #20
    904c:	af00      	add	r7, sp, #0
    904e:	4603      	mov	r3, r0
    9050:	71fb      	strb	r3, [r7, #7]
    9052:	460b      	mov	r3, r1
    9054:	71bb      	strb	r3, [r7, #6]
    9056:	4613      	mov	r3, r2
    9058:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    905a:	79fa      	ldrb	r2, [r7, #7]
    905c:	79bb      	ldrb	r3, [r7, #6]
    905e:	0052      	lsls	r2, r2, #1
    9060:	4413      	add	r3, r2
    9062:	011b      	lsls	r3, r3, #4
    9064:	4a08      	ldr	r2, [pc, #32]	; (9088 <_usbd_ep_set_in_size+0x40>)
    9066:	4413      	add	r3, r2
    9068:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    906a:	88bb      	ldrh	r3, [r7, #4]
    906c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9070:	b299      	uxth	r1, r3
    9072:	68fa      	ldr	r2, [r7, #12]
    9074:	6853      	ldr	r3, [r2, #4]
    9076:	f361 030d 	bfi	r3, r1, #0, #14
    907a:	6053      	str	r3, [r2, #4]
}
    907c:	bf00      	nop
    907e:	3714      	adds	r7, #20
    9080:	46bd      	mov	sp, r7
    9082:	f85d 7b04 	ldr.w	r7, [sp], #4
    9086:	4770      	bx	lr
    9088:	20000e50 	.word	0x20000e50

0000908c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    908c:	b480      	push	{r7}
    908e:	b085      	sub	sp, #20
    9090:	af00      	add	r7, sp, #0
    9092:	4603      	mov	r3, r0
    9094:	71fb      	strb	r3, [r7, #7]
    9096:	460b      	mov	r3, r1
    9098:	71bb      	strb	r3, [r7, #6]
    909a:	4613      	mov	r3, r2
    909c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    909e:	79fa      	ldrb	r2, [r7, #7]
    90a0:	79bb      	ldrb	r3, [r7, #6]
    90a2:	0052      	lsls	r2, r2, #1
    90a4:	4413      	add	r3, r2
    90a6:	011b      	lsls	r3, r3, #4
    90a8:	4a08      	ldr	r2, [pc, #32]	; (90cc <_usbd_ep_set_out_count+0x40>)
    90aa:	4413      	add	r3, r2
    90ac:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    90ae:	88bb      	ldrh	r3, [r7, #4]
    90b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    90b4:	b299      	uxth	r1, r3
    90b6:	68fa      	ldr	r2, [r7, #12]
    90b8:	6853      	ldr	r3, [r2, #4]
    90ba:	f361 030d 	bfi	r3, r1, #0, #14
    90be:	6053      	str	r3, [r2, #4]
}
    90c0:	bf00      	nop
    90c2:	3714      	adds	r7, #20
    90c4:	46bd      	mov	sp, r7
    90c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    90ca:	4770      	bx	lr
    90cc:	20000e50 	.word	0x20000e50

000090d0 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    90d0:	b480      	push	{r7}
    90d2:	b085      	sub	sp, #20
    90d4:	af00      	add	r7, sp, #0
    90d6:	4603      	mov	r3, r0
    90d8:	71fb      	strb	r3, [r7, #7]
    90da:	460b      	mov	r3, r1
    90dc:	71bb      	strb	r3, [r7, #6]
    90de:	4613      	mov	r3, r2
    90e0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    90e2:	79fa      	ldrb	r2, [r7, #7]
    90e4:	79bb      	ldrb	r3, [r7, #6]
    90e6:	0052      	lsls	r2, r2, #1
    90e8:	4413      	add	r3, r2
    90ea:	011b      	lsls	r3, r3, #4
    90ec:	4a08      	ldr	r2, [pc, #32]	; (9110 <_usbd_ep_set_out_size+0x40>)
    90ee:	4413      	add	r3, r2
    90f0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    90f2:	88bb      	ldrh	r3, [r7, #4]
    90f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    90f8:	b299      	uxth	r1, r3
    90fa:	68fa      	ldr	r2, [r7, #12]
    90fc:	6853      	ldr	r3, [r2, #4]
    90fe:	f361 339b 	bfi	r3, r1, #14, #14
    9102:	6053      	str	r3, [r2, #4]
}
    9104:	bf00      	nop
    9106:	3714      	adds	r7, #20
    9108:	46bd      	mov	sp, r7
    910a:	f85d 7b04 	ldr.w	r7, [sp], #4
    910e:	4770      	bx	lr
    9110:	20000e50 	.word	0x20000e50

00009114 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9114:	b580      	push	{r7, lr}
    9116:	b084      	sub	sp, #16
    9118:	af00      	add	r7, sp, #0
    911a:	60ba      	str	r2, [r7, #8]
    911c:	607b      	str	r3, [r7, #4]
    911e:	4603      	mov	r3, r0
    9120:	73fb      	strb	r3, [r7, #15]
    9122:	460b      	mov	r3, r1
    9124:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    9126:	68bb      	ldr	r3, [r7, #8]
    9128:	b29a      	uxth	r2, r3
    912a:	7bb9      	ldrb	r1, [r7, #14]
    912c:	7bfb      	ldrb	r3, [r7, #15]
    912e:	4618      	mov	r0, r3
    9130:	4b06      	ldr	r3, [pc, #24]	; (914c <_usbd_ep_set_in_trans+0x38>)
    9132:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    9134:	687b      	ldr	r3, [r7, #4]
    9136:	b29a      	uxth	r2, r3
    9138:	7bb9      	ldrb	r1, [r7, #14]
    913a:	7bfb      	ldrb	r3, [r7, #15]
    913c:	4618      	mov	r0, r3
    913e:	4b04      	ldr	r3, [pc, #16]	; (9150 <_usbd_ep_set_in_trans+0x3c>)
    9140:	4798      	blx	r3
}
    9142:	bf00      	nop
    9144:	3710      	adds	r7, #16
    9146:	46bd      	mov	sp, r7
    9148:	bd80      	pop	{r7, pc}
    914a:	bf00      	nop
    914c:	00009049 	.word	0x00009049
    9150:	00009005 	.word	0x00009005

00009154 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9154:	b580      	push	{r7, lr}
    9156:	b084      	sub	sp, #16
    9158:	af00      	add	r7, sp, #0
    915a:	60ba      	str	r2, [r7, #8]
    915c:	607b      	str	r3, [r7, #4]
    915e:	4603      	mov	r3, r0
    9160:	73fb      	strb	r3, [r7, #15]
    9162:	460b      	mov	r3, r1
    9164:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    9166:	68bb      	ldr	r3, [r7, #8]
    9168:	b29a      	uxth	r2, r3
    916a:	7bb9      	ldrb	r1, [r7, #14]
    916c:	7bfb      	ldrb	r3, [r7, #15]
    916e:	4618      	mov	r0, r3
    9170:	4b06      	ldr	r3, [pc, #24]	; (918c <_usbd_ep_set_out_trans+0x38>)
    9172:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    9174:	687b      	ldr	r3, [r7, #4]
    9176:	b29a      	uxth	r2, r3
    9178:	7bb9      	ldrb	r1, [r7, #14]
    917a:	7bfb      	ldrb	r3, [r7, #15]
    917c:	4618      	mov	r0, r3
    917e:	4b04      	ldr	r3, [pc, #16]	; (9190 <_usbd_ep_set_out_trans+0x3c>)
    9180:	4798      	blx	r3
}
    9182:	bf00      	nop
    9184:	3710      	adds	r7, #16
    9186:	46bd      	mov	sp, r7
    9188:	bd80      	pop	{r7, pc}
    918a:	bf00      	nop
    918c:	000090d1 	.word	0x000090d1
    9190:	0000908d 	.word	0x0000908d

00009194 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    9194:	b480      	push	{r7}
    9196:	b085      	sub	sp, #20
    9198:	af00      	add	r7, sp, #0
    919a:	4603      	mov	r3, r0
    919c:	460a      	mov	r2, r1
    919e:	71fb      	strb	r3, [r7, #7]
    91a0:	4613      	mov	r3, r2
    91a2:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    91a4:	79fa      	ldrb	r2, [r7, #7]
    91a6:	79bb      	ldrb	r3, [r7, #6]
    91a8:	0052      	lsls	r2, r2, #1
    91aa:	4413      	add	r3, r2
    91ac:	011b      	lsls	r3, r3, #4
    91ae:	4a06      	ldr	r2, [pc, #24]	; (91c8 <_usbd_ep_clear_bank_status+0x34>)
    91b0:	4413      	add	r3, r2
    91b2:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    91b4:	68fb      	ldr	r3, [r7, #12]
    91b6:	2200      	movs	r2, #0
    91b8:	729a      	strb	r2, [r3, #10]
}
    91ba:	bf00      	nop
    91bc:	3714      	adds	r7, #20
    91be:	46bd      	mov	sp, r7
    91c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    91c4:	4770      	bx	lr
    91c6:	bf00      	nop
    91c8:	20000e50 	.word	0x20000e50

000091cc <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    91cc:	b580      	push	{r7, lr}
    91ce:	b082      	sub	sp, #8
    91d0:	af00      	add	r7, sp, #0
    91d2:	4603      	mov	r3, r0
    91d4:	71fb      	strb	r3, [r7, #7]
    91d6:	460b      	mov	r3, r1
    91d8:	71bb      	strb	r3, [r7, #6]
    91da:	4613      	mov	r3, r2
    91dc:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    91de:	797b      	ldrb	r3, [r7, #5]
    91e0:	2b00      	cmp	r3, #0
    91e2:	d00b      	beq.n	91fc <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    91e4:	79bb      	ldrb	r3, [r7, #6]
    91e6:	2240      	movs	r2, #64	; 0x40
    91e8:	fa02 f303 	lsl.w	r3, r2, r3
    91ec:	b2da      	uxtb	r2, r3
    91ee:	79fb      	ldrb	r3, [r7, #7]
    91f0:	4619      	mov	r1, r3
    91f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91f6:	4b09      	ldr	r3, [pc, #36]	; (921c <_usbd_ep_set_in_rdy+0x50>)
    91f8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    91fa:	e00a      	b.n	9212 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    91fc:	79bb      	ldrb	r3, [r7, #6]
    91fe:	2240      	movs	r2, #64	; 0x40
    9200:	fa02 f303 	lsl.w	r3, r2, r3
    9204:	b2da      	uxtb	r2, r3
    9206:	79fb      	ldrb	r3, [r7, #7]
    9208:	4619      	mov	r1, r3
    920a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    920e:	4b04      	ldr	r3, [pc, #16]	; (9220 <_usbd_ep_set_in_rdy+0x54>)
    9210:	4798      	blx	r3
}
    9212:	bf00      	nop
    9214:	3708      	adds	r7, #8
    9216:	46bd      	mov	sp, r7
    9218:	bd80      	pop	{r7, pc}
    921a:	bf00      	nop
    921c:	000087d9 	.word	0x000087d9
    9220:	0000882d 	.word	0x0000882d

00009224 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9224:	b580      	push	{r7, lr}
    9226:	b082      	sub	sp, #8
    9228:	af00      	add	r7, sp, #0
    922a:	4603      	mov	r3, r0
    922c:	71fb      	strb	r3, [r7, #7]
    922e:	460b      	mov	r3, r1
    9230:	71bb      	strb	r3, [r7, #6]
    9232:	4613      	mov	r3, r2
    9234:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9236:	797b      	ldrb	r3, [r7, #5]
    9238:	2b00      	cmp	r3, #0
    923a:	d00b      	beq.n	9254 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    923c:	79bb      	ldrb	r3, [r7, #6]
    923e:	2240      	movs	r2, #64	; 0x40
    9240:	fa02 f303 	lsl.w	r3, r2, r3
    9244:	b2da      	uxtb	r2, r3
    9246:	79fb      	ldrb	r3, [r7, #7]
    9248:	4619      	mov	r1, r3
    924a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    924e:	4b09      	ldr	r3, [pc, #36]	; (9274 <_usbd_ep_set_out_rdy+0x50>)
    9250:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9252:	e00a      	b.n	926a <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9254:	79bb      	ldrb	r3, [r7, #6]
    9256:	2240      	movs	r2, #64	; 0x40
    9258:	fa02 f303 	lsl.w	r3, r2, r3
    925c:	b2da      	uxtb	r2, r3
    925e:	79fb      	ldrb	r3, [r7, #7]
    9260:	4619      	mov	r1, r3
    9262:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9266:	4b04      	ldr	r3, [pc, #16]	; (9278 <_usbd_ep_set_out_rdy+0x54>)
    9268:	4798      	blx	r3
}
    926a:	bf00      	nop
    926c:	3708      	adds	r7, #8
    926e:	46bd      	mov	sp, r7
    9270:	bd80      	pop	{r7, pc}
    9272:	bf00      	nop
    9274:	0000882d 	.word	0x0000882d
    9278:	000087d9 	.word	0x000087d9

0000927c <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    927c:	b480      	push	{r7}
    927e:	b083      	sub	sp, #12
    9280:	af00      	add	r7, sp, #0
    9282:	4603      	mov	r3, r0
    9284:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9286:	88fb      	ldrh	r3, [r7, #6]
    9288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    928c:	d820      	bhi.n	92d0 <_usbd_ep_pcksize_size+0x54>
    928e:	88fb      	ldrh	r3, [r7, #6]
    9290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9294:	d81a      	bhi.n	92cc <_usbd_ep_pcksize_size+0x50>
    9296:	88fb      	ldrh	r3, [r7, #6]
    9298:	2b80      	cmp	r3, #128	; 0x80
    929a:	d815      	bhi.n	92c8 <_usbd_ep_pcksize_size+0x4c>
    929c:	88fb      	ldrh	r3, [r7, #6]
    929e:	2b40      	cmp	r3, #64	; 0x40
    92a0:	d810      	bhi.n	92c4 <_usbd_ep_pcksize_size+0x48>
    92a2:	88fb      	ldrh	r3, [r7, #6]
    92a4:	2b20      	cmp	r3, #32
    92a6:	d80b      	bhi.n	92c0 <_usbd_ep_pcksize_size+0x44>
    92a8:	88fb      	ldrh	r3, [r7, #6]
    92aa:	2b10      	cmp	r3, #16
    92ac:	d806      	bhi.n	92bc <_usbd_ep_pcksize_size+0x40>
    92ae:	88fb      	ldrh	r3, [r7, #6]
    92b0:	2b08      	cmp	r3, #8
    92b2:	bf8c      	ite	hi
    92b4:	2301      	movhi	r3, #1
    92b6:	2300      	movls	r3, #0
    92b8:	b2db      	uxtb	r3, r3
    92ba:	e00a      	b.n	92d2 <_usbd_ep_pcksize_size+0x56>
    92bc:	2302      	movs	r3, #2
    92be:	e008      	b.n	92d2 <_usbd_ep_pcksize_size+0x56>
    92c0:	2303      	movs	r3, #3
    92c2:	e006      	b.n	92d2 <_usbd_ep_pcksize_size+0x56>
    92c4:	2304      	movs	r3, #4
    92c6:	e004      	b.n	92d2 <_usbd_ep_pcksize_size+0x56>
    92c8:	2305      	movs	r3, #5
    92ca:	e002      	b.n	92d2 <_usbd_ep_pcksize_size+0x56>
    92cc:	2306      	movs	r3, #6
    92ce:	e000      	b.n	92d2 <_usbd_ep_pcksize_size+0x56>
    92d0:	2307      	movs	r3, #7
}
    92d2:	4618      	mov	r0, r3
    92d4:	370c      	adds	r7, #12
    92d6:	46bd      	mov	sp, r7
    92d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    92dc:	4770      	bx	lr
	...

000092e0 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    92e0:	b480      	push	{r7}
    92e2:	b085      	sub	sp, #20
    92e4:	af00      	add	r7, sp, #0
    92e6:	4603      	mov	r3, r0
    92e8:	460a      	mov	r2, r1
    92ea:	71fb      	strb	r3, [r7, #7]
    92ec:	4613      	mov	r3, r2
    92ee:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    92f0:	79fb      	ldrb	r3, [r7, #7]
    92f2:	2b00      	cmp	r3, #0
    92f4:	d008      	beq.n	9308 <_usb_d_dev_ept+0x28>
    92f6:	79bb      	ldrb	r3, [r7, #6]
    92f8:	2b00      	cmp	r3, #0
    92fa:	d003      	beq.n	9304 <_usb_d_dev_ept+0x24>
    92fc:	79fb      	ldrb	r3, [r7, #7]
    92fe:	3304      	adds	r3, #4
    9300:	b2db      	uxtb	r3, r3
    9302:	e002      	b.n	930a <_usb_d_dev_ept+0x2a>
    9304:	79fb      	ldrb	r3, [r7, #7]
    9306:	e000      	b.n	930a <_usb_d_dev_ept+0x2a>
    9308:	2300      	movs	r3, #0
    930a:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    930c:	7bfa      	ldrb	r2, [r7, #15]
    930e:	4613      	mov	r3, r2
    9310:	009b      	lsls	r3, r3, #2
    9312:	4413      	add	r3, r2
    9314:	009b      	lsls	r3, r3, #2
    9316:	3310      	adds	r3, #16
    9318:	4a04      	ldr	r2, [pc, #16]	; (932c <_usb_d_dev_ept+0x4c>)
    931a:	4413      	add	r3, r2
    931c:	3304      	adds	r3, #4
}
    931e:	4618      	mov	r0, r3
    9320:	3714      	adds	r7, #20
    9322:	46bd      	mov	sp, r7
    9324:	f85d 7b04 	ldr.w	r7, [sp], #4
    9328:	4770      	bx	lr
    932a:	bf00      	nop
    932c:	20000d88 	.word	0x20000d88

00009330 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    9330:	b580      	push	{r7, lr}
    9332:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    9334:	2104      	movs	r1, #4
    9336:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    933a:	4b03      	ldr	r3, [pc, #12]	; (9348 <_usb_d_dev_sof+0x18>)
    933c:	4798      	blx	r3
	dev_inst.callbacks.sof();
    933e:	4b03      	ldr	r3, [pc, #12]	; (934c <_usb_d_dev_sof+0x1c>)
    9340:	681b      	ldr	r3, [r3, #0]
    9342:	4798      	blx	r3
}
    9344:	bf00      	nop
    9346:	bd80      	pop	{r7, pc}
    9348:	000089a7 	.word	0x000089a7
    934c:	20000d88 	.word	0x20000d88

00009350 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    9350:	b580      	push	{r7, lr}
    9352:	b084      	sub	sp, #16
    9354:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    9356:	2300      	movs	r3, #0
    9358:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    935a:	f240 2101 	movw	r1, #513	; 0x201
    935e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9362:	4b1a      	ldr	r3, [pc, #104]	; (93cc <_usb_d_dev_lpmsusp+0x7c>)
    9364:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9366:	f240 2101 	movw	r1, #513	; 0x201
    936a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    936e:	4b18      	ldr	r3, [pc, #96]	; (93d0 <_usb_d_dev_lpmsusp+0x80>)
    9370:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9372:	2170      	movs	r1, #112	; 0x70
    9374:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9378:	4b16      	ldr	r3, [pc, #88]	; (93d4 <_usb_d_dev_lpmsusp+0x84>)
    937a:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    937c:	2300      	movs	r3, #0
    937e:	73fb      	strb	r3, [r7, #15]
    9380:	e018      	b.n	93b4 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9382:	7bfb      	ldrb	r3, [r7, #15]
    9384:	015b      	lsls	r3, r3, #5
    9386:	4a14      	ldr	r2, [pc, #80]	; (93d8 <_usb_d_dev_lpmsusp+0x88>)
    9388:	4413      	add	r3, r2
    938a:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    938c:	687b      	ldr	r3, [r7, #4]
    938e:	891b      	ldrh	r3, [r3, #8]
    9390:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9394:	b2db      	uxtb	r3, r3
    9396:	2b03      	cmp	r3, #3
    9398:	d109      	bne.n	93ae <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    939a:	687b      	ldr	r3, [r7, #4]
    939c:	891b      	ldrh	r3, [r3, #8]
    939e:	f3c3 130a 	ubfx	r3, r3, #4, #11
    93a2:	b29b      	uxth	r3, r3
    93a4:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    93a6:	687b      	ldr	r3, [r7, #4]
    93a8:	2200      	movs	r2, #0
    93aa:	811a      	strh	r2, [r3, #8]
			break;
    93ac:	e005      	b.n	93ba <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    93ae:	7bfb      	ldrb	r3, [r7, #15]
    93b0:	3301      	adds	r3, #1
    93b2:	73fb      	strb	r3, [r7, #15]
    93b4:	7bfb      	ldrb	r3, [r7, #15]
    93b6:	2b03      	cmp	r3, #3
    93b8:	d9e3      	bls.n	9382 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    93ba:	4b08      	ldr	r3, [pc, #32]	; (93dc <_usb_d_dev_lpmsusp+0x8c>)
    93bc:	685b      	ldr	r3, [r3, #4]
    93be:	68b9      	ldr	r1, [r7, #8]
    93c0:	2003      	movs	r0, #3
    93c2:	4798      	blx	r3
}
    93c4:	bf00      	nop
    93c6:	3710      	adds	r7, #16
    93c8:	46bd      	mov	sp, r7
    93ca:	bd80      	pop	{r7, pc}
    93cc:	000089a7 	.word	0x000089a7
    93d0:	000089fd 	.word	0x000089fd
    93d4:	000089c5 	.word	0x000089c5
    93d8:	20000e50 	.word	0x20000e50
    93dc:	20000d88 	.word	0x20000d88

000093e0 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    93e0:	b580      	push	{r7, lr}
    93e2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    93e4:	2180      	movs	r1, #128	; 0x80
    93e6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    93ea:	4b04      	ldr	r3, [pc, #16]	; (93fc <_usb_d_dev_ramerr+0x1c>)
    93ec:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    93ee:	4b04      	ldr	r3, [pc, #16]	; (9400 <_usb_d_dev_ramerr+0x20>)
    93f0:	685b      	ldr	r3, [r3, #4]
    93f2:	2100      	movs	r1, #0
    93f4:	2005      	movs	r0, #5
    93f6:	4798      	blx	r3
}
    93f8:	bf00      	nop
    93fa:	bd80      	pop	{r7, pc}
    93fc:	000089a7 	.word	0x000089a7
    9400:	20000d88 	.word	0x20000d88

00009404 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    9404:	b580      	push	{r7, lr}
    9406:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9408:	2170      	movs	r1, #112	; 0x70
    940a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    940e:	4b0b      	ldr	r3, [pc, #44]	; (943c <_usb_d_dev_wakeup+0x38>)
    9410:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9412:	2170      	movs	r1, #112	; 0x70
    9414:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9418:	4b09      	ldr	r3, [pc, #36]	; (9440 <_usb_d_dev_wakeup+0x3c>)
    941a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    941c:	f240 2101 	movw	r1, #513	; 0x201
    9420:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9424:	4b07      	ldr	r3, [pc, #28]	; (9444 <_usb_d_dev_wakeup+0x40>)
    9426:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    9428:	2000      	movs	r0, #0
    942a:	4b07      	ldr	r3, [pc, #28]	; (9448 <_usb_d_dev_wakeup+0x44>)
    942c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    942e:	4b07      	ldr	r3, [pc, #28]	; (944c <_usb_d_dev_wakeup+0x48>)
    9430:	685b      	ldr	r3, [r3, #4]
    9432:	2100      	movs	r1, #0
    9434:	2002      	movs	r0, #2
    9436:	4798      	blx	r3
}
    9438:	bf00      	nop
    943a:	bd80      	pop	{r7, pc}
    943c:	000089a7 	.word	0x000089a7
    9440:	000089fd 	.word	0x000089fd
    9444:	000089c5 	.word	0x000089c5
    9448:	00008ca5 	.word	0x00008ca5
    944c:	20000d88 	.word	0x20000d88

00009450 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    9450:	b580      	push	{r7, lr}
    9452:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    9454:	2200      	movs	r2, #0
    9456:	2100      	movs	r1, #0
    9458:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    945c:	4b0d      	ldr	r3, [pc, #52]	; (9494 <_usb_d_dev_reset+0x44>)
    945e:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    9460:	2108      	movs	r1, #8
    9462:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9466:	4b0c      	ldr	r3, [pc, #48]	; (9498 <_usb_d_dev_reset+0x48>)
    9468:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    946a:	2170      	movs	r1, #112	; 0x70
    946c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9470:	4b0a      	ldr	r3, [pc, #40]	; (949c <_usb_d_dev_reset+0x4c>)
    9472:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9474:	f240 2101 	movw	r1, #513	; 0x201
    9478:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    947c:	4b08      	ldr	r3, [pc, #32]	; (94a0 <_usb_d_dev_reset+0x50>)
    947e:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9480:	4b08      	ldr	r3, [pc, #32]	; (94a4 <_usb_d_dev_reset+0x54>)
    9482:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9484:	4b08      	ldr	r3, [pc, #32]	; (94a8 <_usb_d_dev_reset+0x58>)
    9486:	685b      	ldr	r3, [r3, #4]
    9488:	2100      	movs	r1, #0
    948a:	2001      	movs	r0, #1
    948c:	4798      	blx	r3
}
    948e:	bf00      	nop
    9490:	bd80      	pop	{r7, pc}
    9492:	bf00      	nop
    9494:	0000893d 	.word	0x0000893d
    9498:	000089a7 	.word	0x000089a7
    949c:	000089fd 	.word	0x000089fd
    94a0:	000089c5 	.word	0x000089c5
    94a4:	0000a00d 	.word	0x0000a00d
    94a8:	20000d88 	.word	0x20000d88

000094ac <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    94ac:	b580      	push	{r7, lr}
    94ae:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    94b0:	f240 2101 	movw	r1, #513	; 0x201
    94b4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94b8:	4b09      	ldr	r3, [pc, #36]	; (94e0 <_usb_d_dev_suspend+0x34>)
    94ba:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    94bc:	f240 2101 	movw	r1, #513	; 0x201
    94c0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94c4:	4b07      	ldr	r3, [pc, #28]	; (94e4 <_usb_d_dev_suspend+0x38>)
    94c6:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    94c8:	2170      	movs	r1, #112	; 0x70
    94ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94ce:	4b06      	ldr	r3, [pc, #24]	; (94e8 <_usb_d_dev_suspend+0x3c>)
    94d0:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    94d2:	4b06      	ldr	r3, [pc, #24]	; (94ec <_usb_d_dev_suspend+0x40>)
    94d4:	685b      	ldr	r3, [r3, #4]
    94d6:	2100      	movs	r1, #0
    94d8:	2004      	movs	r0, #4
    94da:	4798      	blx	r3
}
    94dc:	bf00      	nop
    94de:	bd80      	pop	{r7, pc}
    94e0:	000089a7 	.word	0x000089a7
    94e4:	000089fd 	.word	0x000089fd
    94e8:	000089c5 	.word	0x000089c5
    94ec:	20000d88 	.word	0x20000d88

000094f0 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    94f0:	b580      	push	{r7, lr}
    94f2:	b082      	sub	sp, #8
    94f4:	af00      	add	r7, sp, #0
	bool     rc    = true;
    94f6:	2301      	movs	r3, #1
    94f8:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    94fa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94fe:	4b22      	ldr	r3, [pc, #136]	; (9588 <_usb_d_dev_handle_nep+0x98>)
    9500:	4798      	blx	r3
    9502:	4603      	mov	r3, r0
    9504:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    9506:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    950a:	4b20      	ldr	r3, [pc, #128]	; (958c <_usb_d_dev_handle_nep+0x9c>)
    950c:	4798      	blx	r3
    950e:	4603      	mov	r3, r0
    9510:	461a      	mov	r2, r3
    9512:	88bb      	ldrh	r3, [r7, #4]
    9514:	4013      	ands	r3, r2
    9516:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    9518:	88bb      	ldrh	r3, [r7, #4]
    951a:	f003 0304 	and.w	r3, r3, #4
    951e:	2b00      	cmp	r3, #0
    9520:	d003      	beq.n	952a <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    9522:	4b1b      	ldr	r3, [pc, #108]	; (9590 <_usb_d_dev_handle_nep+0xa0>)
    9524:	4798      	blx	r3
		return true;
    9526:	2301      	movs	r3, #1
    9528:	e02a      	b.n	9580 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    952a:	88bb      	ldrh	r3, [r7, #4]
    952c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9530:	2b00      	cmp	r3, #0
    9532:	d002      	beq.n	953a <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    9534:	4b17      	ldr	r3, [pc, #92]	; (9594 <_usb_d_dev_handle_nep+0xa4>)
    9536:	4798      	blx	r3
    9538:	e021      	b.n	957e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    953a:	88bb      	ldrh	r3, [r7, #4]
    953c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9540:	2b00      	cmp	r3, #0
    9542:	d002      	beq.n	954a <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    9544:	4b14      	ldr	r3, [pc, #80]	; (9598 <_usb_d_dev_handle_nep+0xa8>)
    9546:	4798      	blx	r3
    9548:	e019      	b.n	957e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    954a:	88bb      	ldrh	r3, [r7, #4]
    954c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9550:	2b00      	cmp	r3, #0
    9552:	d002      	beq.n	955a <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    9554:	4b11      	ldr	r3, [pc, #68]	; (959c <_usb_d_dev_handle_nep+0xac>)
    9556:	4798      	blx	r3
    9558:	e011      	b.n	957e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    955a:	88bb      	ldrh	r3, [r7, #4]
    955c:	f003 0308 	and.w	r3, r3, #8
    9560:	2b00      	cmp	r3, #0
    9562:	d002      	beq.n	956a <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    9564:	4b0e      	ldr	r3, [pc, #56]	; (95a0 <_usb_d_dev_handle_nep+0xb0>)
    9566:	4798      	blx	r3
    9568:	e009      	b.n	957e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    956a:	88bb      	ldrh	r3, [r7, #4]
    956c:	f003 0301 	and.w	r3, r3, #1
    9570:	2b00      	cmp	r3, #0
    9572:	d002      	beq.n	957a <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    9574:	4b0b      	ldr	r3, [pc, #44]	; (95a4 <_usb_d_dev_handle_nep+0xb4>)
    9576:	4798      	blx	r3
    9578:	e001      	b.n	957e <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    957a:	2300      	movs	r3, #0
    957c:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    957e:	79fb      	ldrb	r3, [r7, #7]
}
    9580:	4618      	mov	r0, r3
    9582:	3708      	adds	r7, #8
    9584:	46bd      	mov	sp, r7
    9586:	bd80      	pop	{r7, pc}
    9588:	0000898d 	.word	0x0000898d
    958c:	000089e3 	.word	0x000089e3
    9590:	00009331 	.word	0x00009331
    9594:	00009351 	.word	0x00009351
    9598:	000093e1 	.word	0x000093e1
    959c:	00009405 	.word	0x00009405
    95a0:	00009451 	.word	0x00009451
    95a4:	000094ad 	.word	0x000094ad

000095a8 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    95a8:	b590      	push	{r4, r7, lr}
    95aa:	b089      	sub	sp, #36	; 0x24
    95ac:	af00      	add	r7, sp, #0
    95ae:	6078      	str	r0, [r7, #4]
    95b0:	460b      	mov	r3, r1
    95b2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    95b4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    95b8:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    95ba:	687b      	ldr	r3, [r7, #4]
    95bc:	7c9b      	ldrb	r3, [r3, #18]
    95be:	f003 030f 	and.w	r3, r3, #15
    95c2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    95c4:	7dfb      	ldrb	r3, [r7, #23]
    95c6:	015b      	lsls	r3, r3, #5
    95c8:	4a73      	ldr	r2, [pc, #460]	; (9798 <_usb_d_dev_in_next+0x1f0>)
    95ca:	4413      	add	r3, r2
    95cc:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    95ce:	78fb      	ldrb	r3, [r7, #3]
    95d0:	2b00      	cmp	r3, #0
    95d2:	d006      	beq.n	95e2 <_usb_d_dev_in_next+0x3a>
    95d4:	693b      	ldr	r3, [r7, #16]
    95d6:	3310      	adds	r3, #16
    95d8:	685b      	ldr	r3, [r3, #4]
    95da:	f3c3 030d 	ubfx	r3, r3, #0, #14
    95de:	b29b      	uxth	r3, r3
    95e0:	e000      	b.n	95e4 <_usb_d_dev_in_next+0x3c>
    95e2:	2300      	movs	r3, #0
    95e4:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    95e6:	687b      	ldr	r3, [r7, #4]
    95e8:	8a1b      	ldrh	r3, [r3, #16]
    95ea:	f240 32ff 	movw	r2, #1023	; 0x3ff
    95ee:	4293      	cmp	r3, r2
    95f0:	d103      	bne.n	95fa <_usb_d_dev_in_next+0x52>
    95f2:	687b      	ldr	r3, [r7, #4]
    95f4:	8a1b      	ldrh	r3, [r3, #16]
    95f6:	b21b      	sxth	r3, r3
    95f8:	e004      	b.n	9604 <_usb_d_dev_in_next+0x5c>
    95fa:	687b      	ldr	r3, [r7, #4]
    95fc:	8a1b      	ldrh	r3, [r3, #16]
    95fe:	3b01      	subs	r3, #1
    9600:	b29b      	uxth	r3, r3
    9602:	b21b      	sxth	r3, r3
    9604:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9608:	4013      	ands	r3, r2
    960a:	b21b      	sxth	r3, r3
    960c:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    960e:	2300      	movs	r3, #0
    9610:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    9612:	687b      	ldr	r3, [r7, #4]
    9614:	7cdb      	ldrb	r3, [r3, #19]
    9616:	f003 0307 	and.w	r3, r3, #7
    961a:	b2db      	uxtb	r3, r3
    961c:	2b01      	cmp	r3, #1
    961e:	bf0c      	ite	eq
    9620:	2301      	moveq	r3, #1
    9622:	2300      	movne	r3, #0
    9624:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    9626:	78fb      	ldrb	r3, [r7, #3]
    9628:	2b00      	cmp	r3, #0
    962a:	d004      	beq.n	9636 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    962c:	7dfb      	ldrb	r3, [r7, #23]
    962e:	2101      	movs	r1, #1
    9630:	4618      	mov	r0, r3
    9632:	4b5a      	ldr	r3, [pc, #360]	; (979c <_usb_d_dev_in_next+0x1f4>)
    9634:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    9636:	687b      	ldr	r3, [r7, #4]
    9638:	689a      	ldr	r2, [r3, #8]
    963a:	89fb      	ldrh	r3, [r7, #14]
    963c:	441a      	add	r2, r3
    963e:	687b      	ldr	r3, [r7, #4]
    9640:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    9642:	687b      	ldr	r3, [r7, #4]
    9644:	689a      	ldr	r2, [r3, #8]
    9646:	687b      	ldr	r3, [r7, #4]
    9648:	685b      	ldr	r3, [r3, #4]
    964a:	429a      	cmp	r2, r3
    964c:	d243      	bcs.n	96d6 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    964e:	687b      	ldr	r3, [r7, #4]
    9650:	685b      	ldr	r3, [r3, #4]
    9652:	b29a      	uxth	r2, r3
    9654:	687b      	ldr	r3, [r7, #4]
    9656:	689b      	ldr	r3, [r3, #8]
    9658:	b29b      	uxth	r3, r3
    965a:	1ad3      	subs	r3, r2, r3
    965c:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    965e:	687b      	ldr	r3, [r7, #4]
    9660:	7cdb      	ldrb	r3, [r3, #19]
    9662:	f003 0320 	and.w	r3, r3, #32
    9666:	b2db      	uxtb	r3, r3
    9668:	2b00      	cmp	r3, #0
    966a:	d01b      	beq.n	96a4 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    966c:	687b      	ldr	r3, [r7, #4]
    966e:	8a1b      	ldrh	r3, [r3, #16]
    9670:	8bfa      	ldrh	r2, [r7, #30]
    9672:	429a      	cmp	r2, r3
    9674:	d902      	bls.n	967c <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    9676:	687b      	ldr	r3, [r7, #4]
    9678:	8a1b      	ldrh	r3, [r3, #16]
    967a:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    967c:	687b      	ldr	r3, [r7, #4]
    967e:	68d8      	ldr	r0, [r3, #12]
    9680:	687b      	ldr	r3, [r7, #4]
    9682:	681a      	ldr	r2, [r3, #0]
    9684:	687b      	ldr	r3, [r7, #4]
    9686:	689b      	ldr	r3, [r3, #8]
    9688:	4413      	add	r3, r2
    968a:	8bfa      	ldrh	r2, [r7, #30]
    968c:	4619      	mov	r1, r3
    968e:	4b44      	ldr	r3, [pc, #272]	; (97a0 <_usb_d_dev_in_next+0x1f8>)
    9690:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    9692:	687b      	ldr	r3, [r7, #4]
    9694:	68db      	ldr	r3, [r3, #12]
    9696:	461a      	mov	r2, r3
    9698:	7dfb      	ldrb	r3, [r7, #23]
    969a:	2101      	movs	r1, #1
    969c:	4618      	mov	r0, r3
    969e:	4b41      	ldr	r3, [pc, #260]	; (97a4 <_usb_d_dev_in_next+0x1fc>)
    96a0:	4798      	blx	r3
    96a2:	e011      	b.n	96c8 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    96a4:	8bfb      	ldrh	r3, [r7, #30]
    96a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    96aa:	d902      	bls.n	96b2 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    96ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    96b0:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    96b2:	687b      	ldr	r3, [r7, #4]
    96b4:	681a      	ldr	r2, [r3, #0]
    96b6:	687b      	ldr	r3, [r7, #4]
    96b8:	689b      	ldr	r3, [r3, #8]
    96ba:	4413      	add	r3, r2
    96bc:	461a      	mov	r2, r3
    96be:	7dfb      	ldrb	r3, [r7, #23]
    96c0:	2101      	movs	r1, #1
    96c2:	4618      	mov	r0, r3
    96c4:	4b37      	ldr	r3, [pc, #220]	; (97a4 <_usb_d_dev_in_next+0x1fc>)
    96c6:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    96c8:	8bfa      	ldrh	r2, [r7, #30]
    96ca:	7df8      	ldrb	r0, [r7, #23]
    96cc:	2300      	movs	r3, #0
    96ce:	2101      	movs	r1, #1
    96d0:	4c35      	ldr	r4, [pc, #212]	; (97a8 <_usb_d_dev_in_next+0x200>)
    96d2:	47a0      	blx	r4
		goto _in_tx_exec;
    96d4:	e041      	b.n	975a <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    96d6:	687b      	ldr	r3, [r7, #4]
    96d8:	7cdb      	ldrb	r3, [r3, #19]
    96da:	f003 0310 	and.w	r3, r3, #16
    96de:	b2db      	uxtb	r3, r3
    96e0:	2b00      	cmp	r3, #0
    96e2:	d00b      	beq.n	96fc <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    96e4:	687a      	ldr	r2, [r7, #4]
    96e6:	7cd3      	ldrb	r3, [r2, #19]
    96e8:	f36f 1304 	bfc	r3, #4, #1
    96ec:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    96ee:	7df8      	ldrb	r0, [r7, #23]
    96f0:	2300      	movs	r3, #0
    96f2:	2200      	movs	r2, #0
    96f4:	2101      	movs	r1, #1
    96f6:	4c2c      	ldr	r4, [pc, #176]	; (97a8 <_usb_d_dev_in_next+0x200>)
    96f8:	47a0      	blx	r4
		goto _in_tx_exec;
    96fa:	e02e      	b.n	975a <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    96fc:	7afb      	ldrb	r3, [r7, #11]
    96fe:	2b00      	cmp	r3, #0
    9700:	d006      	beq.n	9710 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    9702:	7dfb      	ldrb	r3, [r7, #23]
    9704:	224b      	movs	r2, #75	; 0x4b
    9706:	4619      	mov	r1, r3
    9708:	69b8      	ldr	r0, [r7, #24]
    970a:	4b28      	ldr	r3, [pc, #160]	; (97ac <_usb_d_dev_in_next+0x204>)
    970c:	4798      	blx	r3
    970e:	e005      	b.n	971c <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    9710:	7dfb      	ldrb	r3, [r7, #23]
    9712:	224a      	movs	r2, #74	; 0x4a
    9714:	4619      	mov	r1, r3
    9716:	69b8      	ldr	r0, [r7, #24]
    9718:	4b24      	ldr	r3, [pc, #144]	; (97ac <_usb_d_dev_in_next+0x204>)
    971a:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    971c:	687b      	ldr	r3, [r7, #4]
    971e:	8a1b      	ldrh	r3, [r3, #16]
    9720:	89ba      	ldrh	r2, [r7, #12]
    9722:	429a      	cmp	r2, r3
    9724:	d114      	bne.n	9750 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    9726:	687a      	ldr	r2, [r7, #4]
    9728:	7cd3      	ldrb	r3, [r2, #19]
    972a:	f36f 1386 	bfc	r3, #6, #1
    972e:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    9730:	4b1f      	ldr	r3, [pc, #124]	; (97b0 <_usb_d_dev_in_next+0x208>)
    9732:	68db      	ldr	r3, [r3, #12]
    9734:	687a      	ldr	r2, [r7, #4]
    9736:	7c90      	ldrb	r0, [r2, #18]
    9738:	687a      	ldr	r2, [r7, #4]
    973a:	6892      	ldr	r2, [r2, #8]
    973c:	4611      	mov	r1, r2
    973e:	4798      	blx	r3
    9740:	4603      	mov	r3, r0
    9742:	2b00      	cmp	r3, #0
    9744:	d124      	bne.n	9790 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    9746:	687a      	ldr	r2, [r7, #4]
    9748:	7cd3      	ldrb	r3, [r2, #19]
    974a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    974e:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9750:	2100      	movs	r1, #0
    9752:	6878      	ldr	r0, [r7, #4]
    9754:	4b17      	ldr	r3, [pc, #92]	; (97b4 <_usb_d_dev_in_next+0x20c>)
    9756:	4798      	blx	r3
	return;
    9758:	e01b      	b.n	9792 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    975a:	78fb      	ldrb	r3, [r7, #3]
    975c:	f083 0301 	eor.w	r3, r3, #1
    9760:	b2db      	uxtb	r3, r3
    9762:	2b00      	cmp	r3, #0
    9764:	d00d      	beq.n	9782 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    9766:	7afb      	ldrb	r3, [r7, #11]
    9768:	2b00      	cmp	r3, #0
    976a:	d002      	beq.n	9772 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    976c:	234e      	movs	r3, #78	; 0x4e
    976e:	777b      	strb	r3, [r7, #29]
    9770:	e001      	b.n	9776 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    9772:	234a      	movs	r3, #74	; 0x4a
    9774:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9776:	7f7a      	ldrb	r2, [r7, #29]
    9778:	7dfb      	ldrb	r3, [r7, #23]
    977a:	4619      	mov	r1, r3
    977c:	69b8      	ldr	r0, [r7, #24]
    977e:	4b0e      	ldr	r3, [pc, #56]	; (97b8 <_usb_d_dev_in_next+0x210>)
    9780:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    9782:	7dfb      	ldrb	r3, [r7, #23]
    9784:	2201      	movs	r2, #1
    9786:	2101      	movs	r1, #1
    9788:	4618      	mov	r0, r3
    978a:	4b0c      	ldr	r3, [pc, #48]	; (97bc <_usb_d_dev_in_next+0x214>)
    978c:	4798      	blx	r3
    978e:	e000      	b.n	9792 <_usb_d_dev_in_next+0x1ea>
			return;
    9790:	bf00      	nop
}
    9792:	3724      	adds	r7, #36	; 0x24
    9794:	46bd      	mov	sp, r7
    9796:	bd90      	pop	{r4, r7, pc}
    9798:	20000e50 	.word	0x20000e50
    979c:	00008fa1 	.word	0x00008fa1
    97a0:	0000eaa1 	.word	0x0000eaa1
    97a4:	00008fcd 	.word	0x00008fcd
    97a8:	00009115 	.word	0x00009115
    97ac:	000088ad 	.word	0x000088ad
    97b0:	20000d88 	.word	0x20000d88
    97b4:	0000a8d1 	.word	0x0000a8d1
    97b8:	00008881 	.word	0x00008881
    97bc:	000091cd 	.word	0x000091cd

000097c0 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    97c0:	b590      	push	{r4, r7, lr}
    97c2:	b08b      	sub	sp, #44	; 0x2c
    97c4:	af00      	add	r7, sp, #0
    97c6:	6078      	str	r0, [r7, #4]
    97c8:	460b      	mov	r3, r1
    97ca:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    97cc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    97d0:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    97d2:	687b      	ldr	r3, [r7, #4]
    97d4:	7c9b      	ldrb	r3, [r3, #18]
    97d6:	f003 030f 	and.w	r3, r3, #15
    97da:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    97dc:	7ffb      	ldrb	r3, [r7, #31]
    97de:	015b      	lsls	r3, r3, #5
    97e0:	4a94      	ldr	r2, [pc, #592]	; (9a34 <_usb_d_dev_out_next+0x274>)
    97e2:	4413      	add	r3, r2
    97e4:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    97e6:	78fb      	ldrb	r3, [r7, #3]
    97e8:	2b00      	cmp	r3, #0
    97ea:	d005      	beq.n	97f8 <_usb_d_dev_out_next+0x38>
    97ec:	69bb      	ldr	r3, [r7, #24]
    97ee:	685b      	ldr	r3, [r3, #4]
    97f0:	f3c3 338d 	ubfx	r3, r3, #14, #14
    97f4:	b29b      	uxth	r3, r3
    97f6:	e000      	b.n	97fa <_usb_d_dev_out_next+0x3a>
    97f8:	2300      	movs	r3, #0
    97fa:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    97fc:	78fb      	ldrb	r3, [r7, #3]
    97fe:	2b00      	cmp	r3, #0
    9800:	d005      	beq.n	980e <_usb_d_dev_out_next+0x4e>
    9802:	69bb      	ldr	r3, [r7, #24]
    9804:	685b      	ldr	r3, [r3, #4]
    9806:	f3c3 030d 	ubfx	r3, r3, #0, #14
    980a:	b29b      	uxth	r3, r3
    980c:	e000      	b.n	9810 <_usb_d_dev_out_next+0x50>
    980e:	2300      	movs	r3, #0
    9810:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9812:	687b      	ldr	r3, [r7, #4]
    9814:	8a1b      	ldrh	r3, [r3, #16]
    9816:	f240 32ff 	movw	r2, #1023	; 0x3ff
    981a:	4293      	cmp	r3, r2
    981c:	d004      	beq.n	9828 <_usb_d_dev_out_next+0x68>
    981e:	687b      	ldr	r3, [r7, #4]
    9820:	8a1b      	ldrh	r3, [r3, #16]
    9822:	3b01      	subs	r3, #1
    9824:	b29b      	uxth	r3, r3
    9826:	e001      	b.n	982c <_usb_d_dev_out_next+0x6c>
    9828:	f240 33ff 	movw	r3, #1023	; 0x3ff
    982c:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    982e:	8aba      	ldrh	r2, [r7, #20]
    9830:	8a7b      	ldrh	r3, [r7, #18]
    9832:	4013      	ands	r3, r2
    9834:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9836:	687b      	ldr	r3, [r7, #4]
    9838:	7cdb      	ldrb	r3, [r3, #19]
    983a:	f003 0307 	and.w	r3, r3, #7
    983e:	b2db      	uxtb	r3, r3
    9840:	2b01      	cmp	r3, #1
    9842:	bf0c      	ite	eq
    9844:	2301      	moveq	r3, #1
    9846:	2300      	movne	r3, #0
    9848:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    984a:	78fb      	ldrb	r3, [r7, #3]
    984c:	2b00      	cmp	r3, #0
    984e:	d004      	beq.n	985a <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    9850:	7ffb      	ldrb	r3, [r7, #31]
    9852:	2100      	movs	r1, #0
    9854:	4618      	mov	r0, r3
    9856:	4b78      	ldr	r3, [pc, #480]	; (9a38 <_usb_d_dev_out_next+0x278>)
    9858:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    985a:	687b      	ldr	r3, [r7, #4]
    985c:	7cdb      	ldrb	r3, [r3, #19]
    985e:	f003 0320 	and.w	r3, r3, #32
    9862:	b2db      	uxtb	r3, r3
    9864:	2b00      	cmp	r3, #0
    9866:	d01c      	beq.n	98a2 <_usb_d_dev_out_next+0xe2>
    9868:	687b      	ldr	r3, [r7, #4]
    986a:	685b      	ldr	r3, [r3, #4]
    986c:	2b00      	cmp	r3, #0
    986e:	d018      	beq.n	98a2 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    9870:	687b      	ldr	r3, [r7, #4]
    9872:	685b      	ldr	r3, [r3, #4]
    9874:	b29a      	uxth	r2, r3
    9876:	687b      	ldr	r3, [r7, #4]
    9878:	689b      	ldr	r3, [r3, #8]
    987a:	b29b      	uxth	r3, r3
    987c:	1ad3      	subs	r3, r2, r3
    987e:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    9880:	687b      	ldr	r3, [r7, #4]
    9882:	681a      	ldr	r2, [r3, #0]
    9884:	687b      	ldr	r3, [r7, #4]
    9886:	689b      	ldr	r3, [r3, #8]
    9888:	18d0      	adds	r0, r2, r3
    988a:	687b      	ldr	r3, [r7, #4]
    988c:	68d9      	ldr	r1, [r3, #12]
    988e:	89ba      	ldrh	r2, [r7, #12]
    9890:	8a3b      	ldrh	r3, [r7, #16]
    9892:	429a      	cmp	r2, r3
    9894:	d901      	bls.n	989a <_usb_d_dev_out_next+0xda>
    9896:	8a3b      	ldrh	r3, [r7, #16]
    9898:	e000      	b.n	989c <_usb_d_dev_out_next+0xdc>
    989a:	89bb      	ldrh	r3, [r7, #12]
    989c:	461a      	mov	r2, r3
    989e:	4b67      	ldr	r3, [pc, #412]	; (9a3c <_usb_d_dev_out_next+0x27c>)
    98a0:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    98a2:	687b      	ldr	r3, [r7, #4]
    98a4:	685b      	ldr	r3, [r3, #4]
    98a6:	2b00      	cmp	r3, #0
    98a8:	d121      	bne.n	98ee <_usb_d_dev_out_next+0x12e>
    98aa:	687b      	ldr	r3, [r7, #4]
    98ac:	7cdb      	ldrb	r3, [r3, #19]
    98ae:	f003 0310 	and.w	r3, r3, #16
    98b2:	b2db      	uxtb	r3, r3
    98b4:	2b00      	cmp	r3, #0
    98b6:	d01a      	beq.n	98ee <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    98b8:	687a      	ldr	r2, [r7, #4]
    98ba:	7cd3      	ldrb	r3, [r2, #19]
    98bc:	f36f 1304 	bfc	r3, #4, #1
    98c0:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    98c2:	687a      	ldr	r2, [r7, #4]
    98c4:	7cd3      	ldrb	r3, [r2, #19]
    98c6:	f043 0320 	orr.w	r3, r3, #32
    98ca:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    98cc:	687b      	ldr	r3, [r7, #4]
    98ce:	68db      	ldr	r3, [r3, #12]
    98d0:	461a      	mov	r2, r3
    98d2:	7ffb      	ldrb	r3, [r7, #31]
    98d4:	2100      	movs	r1, #0
    98d6:	4618      	mov	r0, r3
    98d8:	4b59      	ldr	r3, [pc, #356]	; (9a40 <_usb_d_dev_out_next+0x280>)
    98da:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    98dc:	687b      	ldr	r3, [r7, #4]
    98de:	8a1b      	ldrh	r3, [r3, #16]
    98e0:	461a      	mov	r2, r3
    98e2:	7ff8      	ldrb	r0, [r7, #31]
    98e4:	2300      	movs	r3, #0
    98e6:	2100      	movs	r1, #0
    98e8:	4c56      	ldr	r4, [pc, #344]	; (9a44 <_usb_d_dev_out_next+0x284>)
    98ea:	47a0      	blx	r4
		goto _out_rx_exec;
    98ec:	e090      	b.n	9a10 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    98ee:	78fb      	ldrb	r3, [r7, #3]
    98f0:	2b00      	cmp	r3, #0
    98f2:	d010      	beq.n	9916 <_usb_d_dev_out_next+0x156>
    98f4:	687b      	ldr	r3, [r7, #4]
    98f6:	8a1b      	ldrh	r3, [r3, #16]
    98f8:	8a3a      	ldrh	r2, [r7, #16]
    98fa:	429a      	cmp	r2, r3
    98fc:	d20b      	bcs.n	9916 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    98fe:	687a      	ldr	r2, [r7, #4]
    9900:	7cd3      	ldrb	r3, [r2, #19]
    9902:	f36f 1304 	bfc	r3, #4, #1
    9906:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    9908:	687b      	ldr	r3, [r7, #4]
    990a:	689a      	ldr	r2, [r3, #8]
    990c:	8abb      	ldrh	r3, [r7, #20]
    990e:	441a      	add	r2, r3
    9910:	687b      	ldr	r3, [r7, #4]
    9912:	609a      	str	r2, [r3, #8]
    9914:	e05c      	b.n	99d0 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    9916:	687b      	ldr	r3, [r7, #4]
    9918:	689a      	ldr	r2, [r3, #8]
    991a:	8afb      	ldrh	r3, [r7, #22]
    991c:	441a      	add	r2, r3
    991e:	687b      	ldr	r3, [r7, #4]
    9920:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    9922:	687b      	ldr	r3, [r7, #4]
    9924:	689a      	ldr	r2, [r3, #8]
    9926:	687b      	ldr	r3, [r7, #4]
    9928:	685b      	ldr	r3, [r3, #4]
    992a:	429a      	cmp	r2, r3
    992c:	d250      	bcs.n	99d0 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    992e:	687b      	ldr	r3, [r7, #4]
    9930:	685b      	ldr	r3, [r3, #4]
    9932:	b29a      	uxth	r2, r3
    9934:	687b      	ldr	r3, [r7, #4]
    9936:	689b      	ldr	r3, [r3, #8]
    9938:	b29b      	uxth	r3, r3
    993a:	1ad3      	subs	r3, r2, r3
    993c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    993e:	687b      	ldr	r3, [r7, #4]
    9940:	7cdb      	ldrb	r3, [r3, #19]
    9942:	f003 0320 	and.w	r3, r3, #32
    9946:	b2db      	uxtb	r3, r3
    9948:	2b00      	cmp	r3, #0
    994a:	d010      	beq.n	996e <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    994c:	687b      	ldr	r3, [r7, #4]
    994e:	8a1b      	ldrh	r3, [r3, #16]
    9950:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9952:	429a      	cmp	r2, r3
    9954:	d902      	bls.n	995c <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    9956:	687b      	ldr	r3, [r7, #4]
    9958:	8a1b      	ldrh	r3, [r3, #16]
    995a:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    995c:	687b      	ldr	r3, [r7, #4]
    995e:	68db      	ldr	r3, [r3, #12]
    9960:	461a      	mov	r2, r3
    9962:	7ffb      	ldrb	r3, [r7, #31]
    9964:	2100      	movs	r1, #0
    9966:	4618      	mov	r0, r3
    9968:	4b35      	ldr	r3, [pc, #212]	; (9a40 <_usb_d_dev_out_next+0x280>)
    996a:	4798      	blx	r3
    996c:	e029      	b.n	99c2 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    996e:	687b      	ldr	r3, [r7, #4]
    9970:	8a1b      	ldrh	r3, [r3, #16]
    9972:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9974:	429a      	cmp	r2, r3
    9976:	d90f      	bls.n	9998 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    9978:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    997a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    997e:	d903      	bls.n	9988 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    9980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9984:	84fb      	strh	r3, [r7, #38]	; 0x26
    9986:	e011      	b.n	99ac <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    9988:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    998a:	8a7b      	ldrh	r3, [r7, #18]
    998c:	4013      	ands	r3, r2
    998e:	b29b      	uxth	r3, r3
    9990:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9992:	1ad3      	subs	r3, r2, r3
    9994:	84fb      	strh	r3, [r7, #38]	; 0x26
    9996:	e009      	b.n	99ac <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    9998:	687b      	ldr	r3, [r7, #4]
    999a:	8a1b      	ldrh	r3, [r3, #16]
    999c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    999e:	429a      	cmp	r2, r3
    99a0:	d204      	bcs.n	99ac <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    99a2:	687a      	ldr	r2, [r7, #4]
    99a4:	7cd3      	ldrb	r3, [r2, #19]
    99a6:	f043 0320 	orr.w	r3, r3, #32
    99aa:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    99ac:	687b      	ldr	r3, [r7, #4]
    99ae:	681a      	ldr	r2, [r3, #0]
    99b0:	687b      	ldr	r3, [r7, #4]
    99b2:	689b      	ldr	r3, [r3, #8]
    99b4:	4413      	add	r3, r2
    99b6:	461a      	mov	r2, r3
    99b8:	7ffb      	ldrb	r3, [r7, #31]
    99ba:	2100      	movs	r1, #0
    99bc:	4618      	mov	r0, r3
    99be:	4b20      	ldr	r3, [pc, #128]	; (9a40 <_usb_d_dev_out_next+0x280>)
    99c0:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    99c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    99c4:	7ff8      	ldrb	r0, [r7, #31]
    99c6:	2300      	movs	r3, #0
    99c8:	2100      	movs	r1, #0
    99ca:	4c1e      	ldr	r4, [pc, #120]	; (9a44 <_usb_d_dev_out_next+0x284>)
    99cc:	47a0      	blx	r4
			goto _out_rx_exec;
    99ce:	e01f      	b.n	9a10 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    99d0:	7bfb      	ldrb	r3, [r7, #15]
    99d2:	2b00      	cmp	r3, #0
    99d4:	d006      	beq.n	99e4 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    99d6:	7ffb      	ldrb	r3, [r7, #31]
    99d8:	222d      	movs	r2, #45	; 0x2d
    99da:	4619      	mov	r1, r3
    99dc:	6a38      	ldr	r0, [r7, #32]
    99de:	4b1a      	ldr	r3, [pc, #104]	; (9a48 <_usb_d_dev_out_next+0x288>)
    99e0:	4798      	blx	r3
    99e2:	e005      	b.n	99f0 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    99e4:	7ffb      	ldrb	r3, [r7, #31]
    99e6:	2225      	movs	r2, #37	; 0x25
    99e8:	4619      	mov	r1, r3
    99ea:	6a38      	ldr	r0, [r7, #32]
    99ec:	4b16      	ldr	r3, [pc, #88]	; (9a48 <_usb_d_dev_out_next+0x288>)
    99ee:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    99f0:	7ffb      	ldrb	r3, [r7, #31]
    99f2:	2b00      	cmp	r3, #0
    99f4:	d107      	bne.n	9a06 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    99f6:	687b      	ldr	r3, [r7, #4]
    99f8:	68db      	ldr	r3, [r3, #12]
    99fa:	461a      	mov	r2, r3
    99fc:	7ffb      	ldrb	r3, [r7, #31]
    99fe:	2100      	movs	r1, #0
    9a00:	4618      	mov	r0, r3
    9a02:	4b0f      	ldr	r3, [pc, #60]	; (9a40 <_usb_d_dev_out_next+0x280>)
    9a04:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9a06:	2100      	movs	r1, #0
    9a08:	6878      	ldr	r0, [r7, #4]
    9a0a:	4b10      	ldr	r3, [pc, #64]	; (9a4c <_usb_d_dev_out_next+0x28c>)
    9a0c:	4798      	blx	r3
	return;
    9a0e:	e031      	b.n	9a74 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    9a10:	78fb      	ldrb	r3, [r7, #3]
    9a12:	f083 0301 	eor.w	r3, r3, #1
    9a16:	b2db      	uxtb	r3, r3
    9a18:	2b00      	cmp	r3, #0
    9a1a:	d025      	beq.n	9a68 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    9a1c:	7bfb      	ldrb	r3, [r7, #15]
    9a1e:	2b00      	cmp	r3, #0
    9a20:	d018      	beq.n	9a54 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    9a22:	7ffb      	ldrb	r3, [r7, #31]
    9a24:	2101      	movs	r1, #1
    9a26:	4618      	mov	r0, r3
    9a28:	4b09      	ldr	r3, [pc, #36]	; (9a50 <_usb_d_dev_out_next+0x290>)
    9a2a:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9a2c:	232d      	movs	r3, #45	; 0x2d
    9a2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    9a32:	e012      	b.n	9a5a <_usb_d_dev_out_next+0x29a>
    9a34:	20000e50 	.word	0x20000e50
    9a38:	00008fa1 	.word	0x00008fa1
    9a3c:	0000eaa1 	.word	0x0000eaa1
    9a40:	00008fcd 	.word	0x00008fcd
    9a44:	00009155 	.word	0x00009155
    9a48:	000088ad 	.word	0x000088ad
    9a4c:	0000a8d1 	.word	0x0000a8d1
    9a50:	00009195 	.word	0x00009195
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    9a54:	2325      	movs	r3, #37	; 0x25
    9a56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9a5a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    9a5e:	7ffb      	ldrb	r3, [r7, #31]
    9a60:	4619      	mov	r1, r3
    9a62:	6a38      	ldr	r0, [r7, #32]
    9a64:	4b05      	ldr	r3, [pc, #20]	; (9a7c <_usb_d_dev_out_next+0x2bc>)
    9a66:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    9a68:	7ffb      	ldrb	r3, [r7, #31]
    9a6a:	2201      	movs	r2, #1
    9a6c:	2100      	movs	r1, #0
    9a6e:	4618      	mov	r0, r3
    9a70:	4b03      	ldr	r3, [pc, #12]	; (9a80 <_usb_d_dev_out_next+0x2c0>)
    9a72:	4798      	blx	r3
}
    9a74:	372c      	adds	r7, #44	; 0x2c
    9a76:	46bd      	mov	sp, r7
    9a78:	bd90      	pop	{r4, r7, pc}
    9a7a:	bf00      	nop
    9a7c:	00008881 	.word	0x00008881
    9a80:	00009225 	.word	0x00009225

00009a84 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    9a84:	b580      	push	{r7, lr}
    9a86:	b084      	sub	sp, #16
    9a88:	af00      	add	r7, sp, #0
    9a8a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    9a8c:	687b      	ldr	r3, [r7, #4]
    9a8e:	7c9b      	ldrb	r3, [r3, #18]
    9a90:	f003 030f 	and.w	r3, r3, #15
    9a94:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9a96:	687b      	ldr	r3, [r7, #4]
    9a98:	7cdb      	ldrb	r3, [r3, #19]
    9a9a:	f003 0307 	and.w	r3, r3, #7
    9a9e:	b2db      	uxtb	r3, r3
    9aa0:	2b01      	cmp	r3, #1
    9aa2:	bf0c      	ite	eq
    9aa4:	2301      	moveq	r3, #1
    9aa6:	2300      	movne	r3, #0
    9aa8:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    9aaa:	7bbb      	ldrb	r3, [r7, #14]
    9aac:	f083 0301 	eor.w	r3, r3, #1
    9ab0:	b2db      	uxtb	r3, r3
    9ab2:	2b00      	cmp	r3, #0
    9ab4:	d008      	beq.n	9ac8 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    9ab6:	7bfb      	ldrb	r3, [r7, #15]
    9ab8:	4618      	mov	r0, r3
    9aba:	4b20      	ldr	r3, [pc, #128]	; (9b3c <_usb_d_dev_handle_setup+0xb8>)
    9abc:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    9abe:	7bfb      	ldrb	r3, [r7, #15]
    9ac0:	4618      	mov	r0, r3
    9ac2:	4b1f      	ldr	r3, [pc, #124]	; (9b40 <_usb_d_dev_handle_setup+0xbc>)
    9ac4:	4798      	blx	r3
		return;
    9ac6:	e036      	b.n	9b36 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9ac8:	687b      	ldr	r3, [r7, #4]
    9aca:	7cdb      	ldrb	r3, [r3, #19]
    9acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9ad0:	b2db      	uxtb	r3, r3
    9ad2:	2b00      	cmp	r3, #0
    9ad4:	d010      	beq.n	9af8 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    9ad6:	687a      	ldr	r2, [r7, #4]
    9ad8:	7cd3      	ldrb	r3, [r2, #19]
    9ada:	f36f 1386 	bfc	r3, #6, #1
    9ade:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9ae0:	7bfb      	ldrb	r3, [r7, #15]
    9ae2:	2200      	movs	r2, #0
    9ae4:	2101      	movs	r1, #1
    9ae6:	4618      	mov	r0, r3
    9ae8:	4b16      	ldr	r3, [pc, #88]	; (9b44 <_usb_d_dev_handle_setup+0xc0>)
    9aea:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    9aec:	7bfb      	ldrb	r3, [r7, #15]
    9aee:	2200      	movs	r2, #0
    9af0:	2100      	movs	r1, #0
    9af2:	4618      	mov	r0, r3
    9af4:	4b14      	ldr	r3, [pc, #80]	; (9b48 <_usb_d_dev_handle_setup+0xc4>)
    9af6:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    9af8:	687a      	ldr	r2, [r7, #4]
    9afa:	7cd3      	ldrb	r3, [r2, #19]
    9afc:	f36f 03c3 	bfc	r3, #3, #1
    9b00:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    9b02:	7bfb      	ldrb	r3, [r7, #15]
    9b04:	2100      	movs	r1, #0
    9b06:	4618      	mov	r0, r3
    9b08:	4b10      	ldr	r3, [pc, #64]	; (9b4c <_usb_d_dev_handle_setup+0xc8>)
    9b0a:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    9b0c:	7bfb      	ldrb	r3, [r7, #15]
    9b0e:	2101      	movs	r1, #1
    9b10:	4618      	mov	r0, r3
    9b12:	4b0e      	ldr	r3, [pc, #56]	; (9b4c <_usb_d_dev_handle_setup+0xc8>)
    9b14:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9b16:	7bfb      	ldrb	r3, [r7, #15]
    9b18:	216f      	movs	r1, #111	; 0x6f
    9b1a:	4618      	mov	r0, r3
    9b1c:	4b0c      	ldr	r3, [pc, #48]	; (9b50 <_usb_d_dev_handle_setup+0xcc>)
    9b1e:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9b20:	7bfb      	ldrb	r3, [r7, #15]
    9b22:	216f      	movs	r1, #111	; 0x6f
    9b24:	4618      	mov	r0, r3
    9b26:	4b0b      	ldr	r3, [pc, #44]	; (9b54 <_usb_d_dev_handle_setup+0xd0>)
    9b28:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    9b2a:	4b0b      	ldr	r3, [pc, #44]	; (9b58 <_usb_d_dev_handle_setup+0xd4>)
    9b2c:	689b      	ldr	r3, [r3, #8]
    9b2e:	687a      	ldr	r2, [r7, #4]
    9b30:	7c92      	ldrb	r2, [r2, #18]
    9b32:	4610      	mov	r0, r2
    9b34:	4798      	blx	r3
}
    9b36:	3710      	adds	r7, #16
    9b38:	46bd      	mov	sp, r7
    9b3a:	bd80      	pop	{r7, pc}
    9b3c:	00008f29 	.word	0x00008f29
    9b40:	00008ed5 	.word	0x00008ed5
    9b44:	000091cd 	.word	0x000091cd
    9b48:	00009225 	.word	0x00009225
    9b4c:	00009195 	.word	0x00009195
    9b50:	00008cd5 	.word	0x00008cd5
    9b54:	00008d25 	.word	0x00008d25
    9b58:	20000d88 	.word	0x20000d88

00009b5c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9b5c:	b580      	push	{r7, lr}
    9b5e:	b084      	sub	sp, #16
    9b60:	af00      	add	r7, sp, #0
    9b62:	6078      	str	r0, [r7, #4]
    9b64:	460b      	mov	r3, r1
    9b66:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9b68:	687b      	ldr	r3, [r7, #4]
    9b6a:	7c9b      	ldrb	r3, [r3, #18]
    9b6c:	f003 030f 	and.w	r3, r3, #15
    9b70:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    9b72:	78f9      	ldrb	r1, [r7, #3]
    9b74:	7bfb      	ldrb	r3, [r7, #15]
    9b76:	2200      	movs	r2, #0
    9b78:	4618      	mov	r0, r3
    9b7a:	4b07      	ldr	r3, [pc, #28]	; (9b98 <_usb_d_dev_handle_stall+0x3c>)
    9b7c:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    9b7e:	4b07      	ldr	r3, [pc, #28]	; (9b9c <_usb_d_dev_handle_stall+0x40>)
    9b80:	691b      	ldr	r3, [r3, #16]
    9b82:	687a      	ldr	r2, [r7, #4]
    9b84:	7c90      	ldrb	r0, [r2, #18]
    9b86:	687a      	ldr	r2, [r7, #4]
    9b88:	6892      	ldr	r2, [r2, #8]
    9b8a:	2101      	movs	r1, #1
    9b8c:	4798      	blx	r3
}
    9b8e:	bf00      	nop
    9b90:	3710      	adds	r7, #16
    9b92:	46bd      	mov	sp, r7
    9b94:	bd80      	pop	{r7, pc}
    9b96:	bf00      	nop
    9b98:	00008e89 	.word	0x00008e89
    9b9c:	20000d88 	.word	0x20000d88

00009ba0 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9ba0:	b580      	push	{r7, lr}
    9ba2:	b088      	sub	sp, #32
    9ba4:	af00      	add	r7, sp, #0
    9ba6:	6078      	str	r0, [r7, #4]
    9ba8:	460b      	mov	r3, r1
    9baa:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    9bac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9bb0:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    9bb2:	687b      	ldr	r3, [r7, #4]
    9bb4:	7c9b      	ldrb	r3, [r3, #18]
    9bb6:	f003 030f 	and.w	r3, r3, #15
    9bba:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    9bbc:	4b61      	ldr	r3, [pc, #388]	; (9d44 <_usb_d_dev_handle_trfail+0x1a4>)
    9bbe:	881b      	ldrh	r3, [r3, #0]
    9bc0:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    9bc2:	7efb      	ldrb	r3, [r7, #27]
    9bc4:	015b      	lsls	r3, r3, #5
    9bc6:	4a60      	ldr	r2, [pc, #384]	; (9d48 <_usb_d_dev_handle_trfail+0x1a8>)
    9bc8:	4413      	add	r3, r2
    9bca:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    9bcc:	78fb      	ldrb	r3, [r7, #3]
    9bce:	2b00      	cmp	r3, #0
    9bd0:	d006      	beq.n	9be0 <_usb_d_dev_handle_trfail+0x40>
    9bd2:	7efb      	ldrb	r3, [r7, #27]
    9bd4:	4619      	mov	r1, r3
    9bd6:	69f8      	ldr	r0, [r7, #28]
    9bd8:	4b5c      	ldr	r3, [pc, #368]	; (9d4c <_usb_d_dev_handle_trfail+0x1ac>)
    9bda:	4798      	blx	r3
    9bdc:	4603      	mov	r3, r0
    9bde:	e005      	b.n	9bec <_usb_d_dev_handle_trfail+0x4c>
    9be0:	7efb      	ldrb	r3, [r7, #27]
    9be2:	4619      	mov	r1, r3
    9be4:	69f8      	ldr	r0, [r7, #28]
    9be6:	4b5a      	ldr	r3, [pc, #360]	; (9d50 <_usb_d_dev_handle_trfail+0x1b0>)
    9be8:	4798      	blx	r3
    9bea:	4603      	mov	r3, r0
    9bec:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9bee:	687b      	ldr	r3, [r7, #4]
    9bf0:	7cdb      	ldrb	r3, [r3, #19]
    9bf2:	f003 0307 	and.w	r3, r3, #7
    9bf6:	b2db      	uxtb	r3, r3
    9bf8:	2b01      	cmp	r3, #1
    9bfa:	bf0c      	ite	eq
    9bfc:	2301      	moveq	r3, #1
    9bfe:	2300      	movne	r3, #0
    9c00:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    9c02:	78fb      	ldrb	r3, [r7, #3]
    9c04:	011b      	lsls	r3, r3, #4
    9c06:	697a      	ldr	r2, [r7, #20]
    9c08:	4413      	add	r3, r2
    9c0a:	7a9b      	ldrb	r3, [r3, #10]
    9c0c:	b2db      	uxtb	r3, r3
    9c0e:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    9c10:	7cfb      	ldrb	r3, [r7, #19]
    9c12:	2b02      	cmp	r3, #2
    9c14:	d12f      	bne.n	9c76 <_usb_d_dev_handle_trfail+0xd6>
    9c16:	7b3b      	ldrb	r3, [r7, #12]
    9c18:	f003 0301 	and.w	r3, r3, #1
    9c1c:	b2db      	uxtb	r3, r3
    9c1e:	2b00      	cmp	r3, #0
    9c20:	d029      	beq.n	9c76 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    9c22:	78fb      	ldrb	r3, [r7, #3]
    9c24:	011b      	lsls	r3, r3, #4
    9c26:	697a      	ldr	r2, [r7, #20]
    9c28:	441a      	add	r2, r3
    9c2a:	7a93      	ldrb	r3, [r2, #10]
    9c2c:	f36f 0300 	bfc	r3, #0, #1
    9c30:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9c32:	78fb      	ldrb	r3, [r7, #3]
    9c34:	f107 0220 	add.w	r2, r7, #32
    9c38:	4413      	add	r3, r2
    9c3a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9c3e:	7efb      	ldrb	r3, [r7, #27]
    9c40:	4619      	mov	r1, r3
    9c42:	69f8      	ldr	r0, [r7, #28]
    9c44:	4b43      	ldr	r3, [pc, #268]	; (9d54 <_usb_d_dev_handle_trfail+0x1b4>)
    9c46:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9c48:	78fb      	ldrb	r3, [r7, #3]
    9c4a:	f107 0220 	add.w	r2, r7, #32
    9c4e:	4413      	add	r3, r2
    9c50:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9c54:	7efb      	ldrb	r3, [r7, #27]
    9c56:	4619      	mov	r1, r3
    9c58:	69f8      	ldr	r0, [r7, #28]
    9c5a:	4b3f      	ldr	r3, [pc, #252]	; (9d58 <_usb_d_dev_handle_trfail+0x1b8>)
    9c5c:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    9c5e:	78fb      	ldrb	r3, [r7, #3]
    9c60:	2b00      	cmp	r3, #0
    9c62:	bf14      	ite	ne
    9c64:	2301      	movne	r3, #1
    9c66:	2300      	moveq	r3, #0
    9c68:	b2db      	uxtb	r3, r3
    9c6a:	2204      	movs	r2, #4
    9c6c:	4619      	mov	r1, r3
    9c6e:	6878      	ldr	r0, [r7, #4]
    9c70:	4b3a      	ldr	r3, [pc, #232]	; (9d5c <_usb_d_dev_handle_trfail+0x1bc>)
    9c72:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    9c74:	e062      	b.n	9d3c <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    9c76:	7b3b      	ldrb	r3, [r7, #12]
    9c78:	f003 0302 	and.w	r3, r3, #2
    9c7c:	b2db      	uxtb	r3, r3
    9c7e:	2b00      	cmp	r3, #0
    9c80:	d040      	beq.n	9d04 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    9c82:	78fb      	ldrb	r3, [r7, #3]
    9c84:	011b      	lsls	r3, r3, #4
    9c86:	697a      	ldr	r2, [r7, #20]
    9c88:	441a      	add	r2, r3
    9c8a:	7a93      	ldrb	r3, [r2, #10]
    9c8c:	f36f 0341 	bfc	r3, #1, #1
    9c90:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9c92:	78fb      	ldrb	r3, [r7, #3]
    9c94:	f107 0220 	add.w	r2, r7, #32
    9c98:	4413      	add	r3, r2
    9c9a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9c9e:	7efb      	ldrb	r3, [r7, #27]
    9ca0:	4619      	mov	r1, r3
    9ca2:	69f8      	ldr	r0, [r7, #28]
    9ca4:	4b2b      	ldr	r3, [pc, #172]	; (9d54 <_usb_d_dev_handle_trfail+0x1b4>)
    9ca6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9ca8:	78fb      	ldrb	r3, [r7, #3]
    9caa:	f107 0220 	add.w	r2, r7, #32
    9cae:	4413      	add	r3, r2
    9cb0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9cb4:	7efb      	ldrb	r3, [r7, #27]
    9cb6:	4619      	mov	r1, r3
    9cb8:	69f8      	ldr	r0, [r7, #28]
    9cba:	4b27      	ldr	r3, [pc, #156]	; (9d58 <_usb_d_dev_handle_trfail+0x1b8>)
    9cbc:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    9cbe:	7cbb      	ldrb	r3, [r7, #18]
    9cc0:	2b00      	cmp	r3, #0
    9cc2:	d03b      	beq.n	9d3c <_usb_d_dev_handle_trfail+0x19c>
    9cc4:	687b      	ldr	r3, [r7, #4]
    9cc6:	7cdb      	ldrb	r3, [r3, #19]
    9cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9ccc:	b2db      	uxtb	r3, r3
    9cce:	2b00      	cmp	r3, #0
    9cd0:	d034      	beq.n	9d3c <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    9cd2:	687b      	ldr	r3, [r7, #4]
    9cd4:	7cdb      	ldrb	r3, [r3, #19]
    9cd6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9cda:	b2db      	uxtb	r3, r3
    9cdc:	461a      	mov	r2, r3
    9cde:	78fb      	ldrb	r3, [r7, #3]
    9ce0:	4293      	cmp	r3, r2
    9ce2:	d02b      	beq.n	9d3c <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9ce4:	687b      	ldr	r3, [r7, #4]
    9ce6:	7cdb      	ldrb	r3, [r3, #19]
    9ce8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9cec:	b2db      	uxtb	r3, r3
    9cee:	2b00      	cmp	r3, #0
    9cf0:	bf14      	ite	ne
    9cf2:	2301      	movne	r3, #1
    9cf4:	2300      	moveq	r3, #0
    9cf6:	b2db      	uxtb	r3, r3
    9cf8:	2200      	movs	r2, #0
    9cfa:	4619      	mov	r1, r3
    9cfc:	6878      	ldr	r0, [r7, #4]
    9cfe:	4b17      	ldr	r3, [pc, #92]	; (9d5c <_usb_d_dev_handle_trfail+0x1bc>)
    9d00:	4798      	blx	r3
}
    9d02:	e01b      	b.n	9d3c <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    9d04:	78fa      	ldrb	r2, [r7, #3]
    9d06:	7efb      	ldrb	r3, [r7, #27]
    9d08:	4611      	mov	r1, r2
    9d0a:	4618      	mov	r0, r3
    9d0c:	4b14      	ldr	r3, [pc, #80]	; (9d60 <_usb_d_dev_handle_trfail+0x1c0>)
    9d0e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9d10:	78fb      	ldrb	r3, [r7, #3]
    9d12:	f107 0220 	add.w	r2, r7, #32
    9d16:	4413      	add	r3, r2
    9d18:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9d1c:	7efb      	ldrb	r3, [r7, #27]
    9d1e:	4619      	mov	r1, r3
    9d20:	69f8      	ldr	r0, [r7, #28]
    9d22:	4b0c      	ldr	r3, [pc, #48]	; (9d54 <_usb_d_dev_handle_trfail+0x1b4>)
    9d24:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9d26:	78fb      	ldrb	r3, [r7, #3]
    9d28:	f107 0220 	add.w	r2, r7, #32
    9d2c:	4413      	add	r3, r2
    9d2e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9d32:	7efb      	ldrb	r3, [r7, #27]
    9d34:	4619      	mov	r1, r3
    9d36:	69f8      	ldr	r0, [r7, #28]
    9d38:	4b07      	ldr	r3, [pc, #28]	; (9d58 <_usb_d_dev_handle_trfail+0x1b8>)
    9d3a:	4798      	blx	r3
}
    9d3c:	bf00      	nop
    9d3e:	3720      	adds	r7, #32
    9d40:	46bd      	mov	sp, r7
    9d42:	bd80      	pop	{r7, pc}
    9d44:	0000f124 	.word	0x0000f124
    9d48:	20000e50 	.word	0x20000e50
    9d4c:	00008909 	.word	0x00008909
    9d50:	000088d9 	.word	0x000088d9
    9d54:	000087ad 	.word	0x000087ad
    9d58:	000088ad 	.word	0x000088ad
    9d5c:	0000a919 	.word	0x0000a919
    9d60:	00009195 	.word	0x00009195

00009d64 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9d64:	b580      	push	{r7, lr}
    9d66:	b082      	sub	sp, #8
    9d68:	af00      	add	r7, sp, #0
    9d6a:	6078      	str	r0, [r7, #4]
    9d6c:	460b      	mov	r3, r1
    9d6e:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9d70:	78fb      	ldrb	r3, [r7, #3]
    9d72:	f003 0310 	and.w	r3, r3, #16
    9d76:	2b00      	cmp	r3, #0
    9d78:	d003      	beq.n	9d82 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    9d7a:	6878      	ldr	r0, [r7, #4]
    9d7c:	4b0c      	ldr	r3, [pc, #48]	; (9db0 <_usb_d_dev_trans_setup_isr+0x4c>)
    9d7e:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9d80:	e012      	b.n	9da8 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9d82:	78fb      	ldrb	r3, [r7, #3]
    9d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9d88:	2b00      	cmp	r3, #0
    9d8a:	d004      	beq.n	9d96 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    9d8c:	2101      	movs	r1, #1
    9d8e:	6878      	ldr	r0, [r7, #4]
    9d90:	4b08      	ldr	r3, [pc, #32]	; (9db4 <_usb_d_dev_trans_setup_isr+0x50>)
    9d92:	4798      	blx	r3
}
    9d94:	e008      	b.n	9da8 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9d96:	78fb      	ldrb	r3, [r7, #3]
    9d98:	f003 0320 	and.w	r3, r3, #32
    9d9c:	2b00      	cmp	r3, #0
    9d9e:	d003      	beq.n	9da8 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9da0:	2100      	movs	r1, #0
    9da2:	6878      	ldr	r0, [r7, #4]
    9da4:	4b03      	ldr	r3, [pc, #12]	; (9db4 <_usb_d_dev_trans_setup_isr+0x50>)
    9da6:	4798      	blx	r3
}
    9da8:	bf00      	nop
    9daa:	3708      	adds	r7, #8
    9dac:	46bd      	mov	sp, r7
    9dae:	bd80      	pop	{r7, pc}
    9db0:	00009a85 	.word	0x00009a85
    9db4:	00009b5d 	.word	0x00009b5d

00009db8 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9db8:	b580      	push	{r7, lr}
    9dba:	b082      	sub	sp, #8
    9dbc:	af00      	add	r7, sp, #0
    9dbe:	6078      	str	r0, [r7, #4]
    9dc0:	460b      	mov	r3, r1
    9dc2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9dc4:	78fb      	ldrb	r3, [r7, #3]
    9dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9dca:	2b00      	cmp	r3, #0
    9dcc:	d004      	beq.n	9dd8 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    9dce:	2101      	movs	r1, #1
    9dd0:	6878      	ldr	r0, [r7, #4]
    9dd2:	4b1a      	ldr	r3, [pc, #104]	; (9e3c <_usb_d_dev_trans_in_isr+0x84>)
    9dd4:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9dd6:	e02c      	b.n	9e32 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9dd8:	78fb      	ldrb	r3, [r7, #3]
    9dda:	f003 0308 	and.w	r3, r3, #8
    9dde:	2b00      	cmp	r3, #0
    9de0:	d004      	beq.n	9dec <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    9de2:	2101      	movs	r1, #1
    9de4:	6878      	ldr	r0, [r7, #4]
    9de6:	4b16      	ldr	r3, [pc, #88]	; (9e40 <_usb_d_dev_trans_in_isr+0x88>)
    9de8:	4798      	blx	r3
}
    9dea:	e022      	b.n	9e32 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9dec:	78fb      	ldrb	r3, [r7, #3]
    9dee:	f003 0302 	and.w	r3, r3, #2
    9df2:	2b00      	cmp	r3, #0
    9df4:	d004      	beq.n	9e00 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    9df6:	2101      	movs	r1, #1
    9df8:	6878      	ldr	r0, [r7, #4]
    9dfa:	4b12      	ldr	r3, [pc, #72]	; (9e44 <_usb_d_dev_trans_in_isr+0x8c>)
    9dfc:	4798      	blx	r3
}
    9dfe:	e018      	b.n	9e32 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9e00:	687b      	ldr	r3, [r7, #4]
    9e02:	7cdb      	ldrb	r3, [r3, #19]
    9e04:	f003 0307 	and.w	r3, r3, #7
    9e08:	b2db      	uxtb	r3, r3
    9e0a:	2b01      	cmp	r3, #1
    9e0c:	d111      	bne.n	9e32 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9e0e:	78fb      	ldrb	r3, [r7, #3]
    9e10:	f003 0304 	and.w	r3, r3, #4
    9e14:	2b00      	cmp	r3, #0
    9e16:	d004      	beq.n	9e22 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    9e18:	2100      	movs	r1, #0
    9e1a:	6878      	ldr	r0, [r7, #4]
    9e1c:	4b08      	ldr	r3, [pc, #32]	; (9e40 <_usb_d_dev_trans_in_isr+0x88>)
    9e1e:	4798      	blx	r3
}
    9e20:	e007      	b.n	9e32 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9e22:	78fb      	ldrb	r3, [r7, #3]
    9e24:	f003 0310 	and.w	r3, r3, #16
    9e28:	2b00      	cmp	r3, #0
    9e2a:	d002      	beq.n	9e32 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9e2c:	6878      	ldr	r0, [r7, #4]
    9e2e:	4b06      	ldr	r3, [pc, #24]	; (9e48 <_usb_d_dev_trans_in_isr+0x90>)
    9e30:	4798      	blx	r3
}
    9e32:	bf00      	nop
    9e34:	3708      	adds	r7, #8
    9e36:	46bd      	mov	sp, r7
    9e38:	bd80      	pop	{r7, pc}
    9e3a:	bf00      	nop
    9e3c:	00009b5d 	.word	0x00009b5d
    9e40:	00009ba1 	.word	0x00009ba1
    9e44:	000095a9 	.word	0x000095a9
    9e48:	00009a85 	.word	0x00009a85

00009e4c <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9e4c:	b580      	push	{r7, lr}
    9e4e:	b082      	sub	sp, #8
    9e50:	af00      	add	r7, sp, #0
    9e52:	6078      	str	r0, [r7, #4]
    9e54:	460b      	mov	r3, r1
    9e56:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9e58:	78fb      	ldrb	r3, [r7, #3]
    9e5a:	f003 0320 	and.w	r3, r3, #32
    9e5e:	2b00      	cmp	r3, #0
    9e60:	d004      	beq.n	9e6c <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    9e62:	2100      	movs	r1, #0
    9e64:	6878      	ldr	r0, [r7, #4]
    9e66:	4b1a      	ldr	r3, [pc, #104]	; (9ed0 <_usb_d_dev_trans_out_isr+0x84>)
    9e68:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9e6a:	e02c      	b.n	9ec6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9e6c:	78fb      	ldrb	r3, [r7, #3]
    9e6e:	f003 0304 	and.w	r3, r3, #4
    9e72:	2b00      	cmp	r3, #0
    9e74:	d004      	beq.n	9e80 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    9e76:	2100      	movs	r1, #0
    9e78:	6878      	ldr	r0, [r7, #4]
    9e7a:	4b16      	ldr	r3, [pc, #88]	; (9ed4 <_usb_d_dev_trans_out_isr+0x88>)
    9e7c:	4798      	blx	r3
}
    9e7e:	e022      	b.n	9ec6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9e80:	78fb      	ldrb	r3, [r7, #3]
    9e82:	f003 0301 	and.w	r3, r3, #1
    9e86:	2b00      	cmp	r3, #0
    9e88:	d004      	beq.n	9e94 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    9e8a:	2101      	movs	r1, #1
    9e8c:	6878      	ldr	r0, [r7, #4]
    9e8e:	4b12      	ldr	r3, [pc, #72]	; (9ed8 <_usb_d_dev_trans_out_isr+0x8c>)
    9e90:	4798      	blx	r3
}
    9e92:	e018      	b.n	9ec6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9e94:	687b      	ldr	r3, [r7, #4]
    9e96:	7cdb      	ldrb	r3, [r3, #19]
    9e98:	f003 0307 	and.w	r3, r3, #7
    9e9c:	b2db      	uxtb	r3, r3
    9e9e:	2b01      	cmp	r3, #1
    9ea0:	d111      	bne.n	9ec6 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9ea2:	78fb      	ldrb	r3, [r7, #3]
    9ea4:	f003 0308 	and.w	r3, r3, #8
    9ea8:	2b00      	cmp	r3, #0
    9eaa:	d004      	beq.n	9eb6 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    9eac:	2101      	movs	r1, #1
    9eae:	6878      	ldr	r0, [r7, #4]
    9eb0:	4b08      	ldr	r3, [pc, #32]	; (9ed4 <_usb_d_dev_trans_out_isr+0x88>)
    9eb2:	4798      	blx	r3
}
    9eb4:	e007      	b.n	9ec6 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9eb6:	78fb      	ldrb	r3, [r7, #3]
    9eb8:	f003 0310 	and.w	r3, r3, #16
    9ebc:	2b00      	cmp	r3, #0
    9ebe:	d002      	beq.n	9ec6 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9ec0:	6878      	ldr	r0, [r7, #4]
    9ec2:	4b06      	ldr	r3, [pc, #24]	; (9edc <_usb_d_dev_trans_out_isr+0x90>)
    9ec4:	4798      	blx	r3
}
    9ec6:	bf00      	nop
    9ec8:	3708      	adds	r7, #8
    9eca:	46bd      	mov	sp, r7
    9ecc:	bd80      	pop	{r7, pc}
    9ece:	bf00      	nop
    9ed0:	00009b5d 	.word	0x00009b5d
    9ed4:	00009ba1 	.word	0x00009ba1
    9ed8:	000097c1 	.word	0x000097c1
    9edc:	00009a85 	.word	0x00009a85

00009ee0 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9ee0:	b580      	push	{r7, lr}
    9ee2:	b084      	sub	sp, #16
    9ee4:	af00      	add	r7, sp, #0
    9ee6:	6078      	str	r0, [r7, #4]
    9ee8:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    9eea:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9eee:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9ef0:	683b      	ldr	r3, [r7, #0]
    9ef2:	7c9b      	ldrb	r3, [r3, #18]
    9ef4:	f003 030f 	and.w	r3, r3, #15
    9ef8:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    9efa:	7afb      	ldrb	r3, [r7, #11]
    9efc:	2201      	movs	r2, #1
    9efe:	409a      	lsls	r2, r3
    9f00:	687b      	ldr	r3, [r7, #4]
    9f02:	4013      	ands	r3, r2
    9f04:	2b00      	cmp	r3, #0
    9f06:	d03d      	beq.n	9f84 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    9f08:	7afb      	ldrb	r3, [r7, #11]
    9f0a:	68fa      	ldr	r2, [r7, #12]
    9f0c:	3308      	adds	r3, #8
    9f0e:	015b      	lsls	r3, r3, #5
    9f10:	4413      	add	r3, r2
    9f12:	3307      	adds	r3, #7
    9f14:	781b      	ldrb	r3, [r3, #0]
    9f16:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    9f18:	7afb      	ldrb	r3, [r7, #11]
    9f1a:	68fa      	ldr	r2, [r7, #12]
    9f1c:	015b      	lsls	r3, r3, #5
    9f1e:	4413      	add	r3, r2
    9f20:	f203 1309 	addw	r3, r3, #265	; 0x109
    9f24:	781b      	ldrb	r3, [r3, #0]
    9f26:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    9f28:	7aba      	ldrb	r2, [r7, #10]
    9f2a:	7a7b      	ldrb	r3, [r7, #9]
    9f2c:	4013      	ands	r3, r2
    9f2e:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    9f30:	7abb      	ldrb	r3, [r7, #10]
    9f32:	2b00      	cmp	r3, #0
    9f34:	d027      	beq.n	9f86 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    9f36:	683b      	ldr	r3, [r7, #0]
    9f38:	7cdb      	ldrb	r3, [r3, #19]
    9f3a:	f003 0307 	and.w	r3, r3, #7
    9f3e:	b2db      	uxtb	r3, r3
    9f40:	2b01      	cmp	r3, #1
    9f42:	d10c      	bne.n	9f5e <_usb_d_dev_handle_eps+0x7e>
    9f44:	683b      	ldr	r3, [r7, #0]
    9f46:	7cdb      	ldrb	r3, [r3, #19]
    9f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9f4c:	b2db      	uxtb	r3, r3
    9f4e:	2b00      	cmp	r3, #0
    9f50:	d105      	bne.n	9f5e <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    9f52:	7abb      	ldrb	r3, [r7, #10]
    9f54:	4619      	mov	r1, r3
    9f56:	6838      	ldr	r0, [r7, #0]
    9f58:	4b0c      	ldr	r3, [pc, #48]	; (9f8c <_usb_d_dev_handle_eps+0xac>)
    9f5a:	4798      	blx	r3
    9f5c:	e013      	b.n	9f86 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    9f5e:	683b      	ldr	r3, [r7, #0]
    9f60:	7cdb      	ldrb	r3, [r3, #19]
    9f62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9f66:	b2db      	uxtb	r3, r3
    9f68:	2b00      	cmp	r3, #0
    9f6a:	d005      	beq.n	9f78 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    9f6c:	7abb      	ldrb	r3, [r7, #10]
    9f6e:	4619      	mov	r1, r3
    9f70:	6838      	ldr	r0, [r7, #0]
    9f72:	4b07      	ldr	r3, [pc, #28]	; (9f90 <_usb_d_dev_handle_eps+0xb0>)
    9f74:	4798      	blx	r3
    9f76:	e006      	b.n	9f86 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    9f78:	7abb      	ldrb	r3, [r7, #10]
    9f7a:	4619      	mov	r1, r3
    9f7c:	6838      	ldr	r0, [r7, #0]
    9f7e:	4b05      	ldr	r3, [pc, #20]	; (9f94 <_usb_d_dev_handle_eps+0xb4>)
    9f80:	4798      	blx	r3
    9f82:	e000      	b.n	9f86 <_usb_d_dev_handle_eps+0xa6>
		return;
    9f84:	bf00      	nop
		}
	}
}
    9f86:	3710      	adds	r7, #16
    9f88:	46bd      	mov	sp, r7
    9f8a:	bd80      	pop	{r7, pc}
    9f8c:	00009d65 	.word	0x00009d65
    9f90:	00009db9 	.word	0x00009db9
    9f94:	00009e4d 	.word	0x00009e4d

00009f98 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    9f98:	b580      	push	{r7, lr}
    9f9a:	b084      	sub	sp, #16
    9f9c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9f9e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9fa2:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    9fa4:	68bb      	ldr	r3, [r7, #8]
    9fa6:	8c1b      	ldrh	r3, [r3, #32]
    9fa8:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    9faa:	88fb      	ldrh	r3, [r7, #6]
    9fac:	2b00      	cmp	r3, #0
    9fae:	d104      	bne.n	9fba <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    9fb0:	4b13      	ldr	r3, [pc, #76]	; (a000 <_usb_d_dev_handler+0x68>)
    9fb2:	4798      	blx	r3
    9fb4:	4603      	mov	r3, r0
    9fb6:	2b00      	cmp	r3, #0
    9fb8:	d11e      	bne.n	9ff8 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    9fba:	2300      	movs	r3, #0
    9fbc:	73fb      	strb	r3, [r7, #15]
    9fbe:	e017      	b.n	9ff0 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    9fc0:	7bfa      	ldrb	r2, [r7, #15]
    9fc2:	4613      	mov	r3, r2
    9fc4:	009b      	lsls	r3, r3, #2
    9fc6:	4413      	add	r3, r2
    9fc8:	009b      	lsls	r3, r3, #2
    9fca:	3310      	adds	r3, #16
    9fcc:	4a0d      	ldr	r2, [pc, #52]	; (a004 <_usb_d_dev_handler+0x6c>)
    9fce:	4413      	add	r3, r2
    9fd0:	3304      	adds	r3, #4
    9fd2:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    9fd4:	683b      	ldr	r3, [r7, #0]
    9fd6:	7c9b      	ldrb	r3, [r3, #18]
    9fd8:	2bff      	cmp	r3, #255	; 0xff
    9fda:	d005      	beq.n	9fe8 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    9fdc:	88fb      	ldrh	r3, [r7, #6]
    9fde:	6839      	ldr	r1, [r7, #0]
    9fe0:	4618      	mov	r0, r3
    9fe2:	4b09      	ldr	r3, [pc, #36]	; (a008 <_usb_d_dev_handler+0x70>)
    9fe4:	4798      	blx	r3
    9fe6:	e000      	b.n	9fea <_usb_d_dev_handler+0x52>
			continue;
    9fe8:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    9fea:	7bfb      	ldrb	r3, [r7, #15]
    9fec:	3301      	adds	r3, #1
    9fee:	73fb      	strb	r3, [r7, #15]
    9ff0:	7bfb      	ldrb	r3, [r7, #15]
    9ff2:	2b08      	cmp	r3, #8
    9ff4:	d9e4      	bls.n	9fc0 <_usb_d_dev_handler+0x28>
    9ff6:	e000      	b.n	9ffa <_usb_d_dev_handler+0x62>
			return;
    9ff8:	bf00      	nop
	}
}
    9ffa:	3710      	adds	r7, #16
    9ffc:	46bd      	mov	sp, r7
    9ffe:	bd80      	pop	{r7, pc}
    a000:	000094f1 	.word	0x000094f1
    a004:	20000d88 	.word	0x20000d88
    a008:	00009ee1 	.word	0x00009ee1

0000a00c <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    a00c:	b580      	push	{r7, lr}
    a00e:	b082      	sub	sp, #8
    a010:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    a012:	2300      	movs	r3, #0
    a014:	71fb      	strb	r3, [r7, #7]
    a016:	e023      	b.n	a060 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    a018:	79fa      	ldrb	r2, [r7, #7]
    a01a:	4613      	mov	r3, r2
    a01c:	009b      	lsls	r3, r3, #2
    a01e:	4413      	add	r3, r2
    a020:	009b      	lsls	r3, r3, #2
    a022:	3310      	adds	r3, #16
    a024:	4a14      	ldr	r2, [pc, #80]	; (a078 <_usb_d_dev_reset_epts+0x6c>)
    a026:	4413      	add	r3, r2
    a028:	3304      	adds	r3, #4
    a02a:	2103      	movs	r1, #3
    a02c:	4618      	mov	r0, r3
    a02e:	4b13      	ldr	r3, [pc, #76]	; (a07c <_usb_d_dev_reset_epts+0x70>)
    a030:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    a032:	79fa      	ldrb	r2, [r7, #7]
    a034:	4910      	ldr	r1, [pc, #64]	; (a078 <_usb_d_dev_reset_epts+0x6c>)
    a036:	4613      	mov	r3, r2
    a038:	009b      	lsls	r3, r3, #2
    a03a:	4413      	add	r3, r2
    a03c:	009b      	lsls	r3, r3, #2
    a03e:	440b      	add	r3, r1
    a040:	3326      	adds	r3, #38	; 0x26
    a042:	22ff      	movs	r2, #255	; 0xff
    a044:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    a046:	79fa      	ldrb	r2, [r7, #7]
    a048:	490b      	ldr	r1, [pc, #44]	; (a078 <_usb_d_dev_reset_epts+0x6c>)
    a04a:	4613      	mov	r3, r2
    a04c:	009b      	lsls	r3, r3, #2
    a04e:	4413      	add	r3, r2
    a050:	009b      	lsls	r3, r3, #2
    a052:	440b      	add	r3, r1
    a054:	3327      	adds	r3, #39	; 0x27
    a056:	2200      	movs	r2, #0
    a058:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    a05a:	79fb      	ldrb	r3, [r7, #7]
    a05c:	3301      	adds	r3, #1
    a05e:	71fb      	strb	r3, [r7, #7]
    a060:	79fb      	ldrb	r3, [r7, #7]
    a062:	2b08      	cmp	r3, #8
    a064:	d9d8      	bls.n	a018 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    a066:	22a0      	movs	r2, #160	; 0xa0
    a068:	2100      	movs	r1, #0
    a06a:	4805      	ldr	r0, [pc, #20]	; (a080 <_usb_d_dev_reset_epts+0x74>)
    a06c:	4b05      	ldr	r3, [pc, #20]	; (a084 <_usb_d_dev_reset_epts+0x78>)
    a06e:	4798      	blx	r3
}
    a070:	bf00      	nop
    a072:	3708      	adds	r7, #8
    a074:	46bd      	mov	sp, r7
    a076:	bd80      	pop	{r7, pc}
    a078:	20000d88 	.word	0x20000d88
    a07c:	0000a8d1 	.word	0x0000a8d1
    a080:	20000e50 	.word	0x20000e50
    a084:	0000ebd5 	.word	0x0000ebd5

0000a088 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    a088:	b580      	push	{r7, lr}
    a08a:	b084      	sub	sp, #16
    a08c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    a08e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a092:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    a094:	2301      	movs	r3, #1
    a096:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    a098:	2304      	movs	r3, #4
    a09a:	713b      	strb	r3, [r7, #4]
    a09c:	2300      	movs	r3, #0
    a09e:	717b      	strb	r3, [r7, #5]
    a0a0:	2300      	movs	r3, #0
    a0a2:	71bb      	strb	r3, [r7, #6]
    a0a4:	2300      	movs	r3, #0
    a0a6:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    a0a8:	2101      	movs	r1, #1
    a0aa:	68f8      	ldr	r0, [r7, #12]
    a0ac:	4b26      	ldr	r3, [pc, #152]	; (a148 <_usb_d_dev_init+0xc0>)
    a0ae:	4798      	blx	r3
    a0b0:	4603      	mov	r3, r0
    a0b2:	f083 0301 	eor.w	r3, r3, #1
    a0b6:	b2db      	uxtb	r3, r3
    a0b8:	2b00      	cmp	r3, #0
    a0ba:	d011      	beq.n	a0e0 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    a0bc:	2102      	movs	r1, #2
    a0be:	68f8      	ldr	r0, [r7, #12]
    a0c0:	4b22      	ldr	r3, [pc, #136]	; (a14c <_usb_d_dev_init+0xc4>)
    a0c2:	4798      	blx	r3
    a0c4:	4603      	mov	r3, r0
    a0c6:	2b00      	cmp	r3, #0
    a0c8:	d006      	beq.n	a0d8 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    a0ca:	68f8      	ldr	r0, [r7, #12]
    a0cc:	4b20      	ldr	r3, [pc, #128]	; (a150 <_usb_d_dev_init+0xc8>)
    a0ce:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    a0d0:	2102      	movs	r1, #2
    a0d2:	68f8      	ldr	r0, [r7, #12]
    a0d4:	4b1f      	ldr	r3, [pc, #124]	; (a154 <_usb_d_dev_init+0xcc>)
    a0d6:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    a0d8:	2101      	movs	r1, #1
    a0da:	68f8      	ldr	r0, [r7, #12]
    a0dc:	4b1e      	ldr	r3, [pc, #120]	; (a158 <_usb_d_dev_init+0xd0>)
    a0de:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    a0e0:	2101      	movs	r1, #1
    a0e2:	68f8      	ldr	r0, [r7, #12]
    a0e4:	4b1b      	ldr	r3, [pc, #108]	; (a154 <_usb_d_dev_init+0xcc>)
    a0e6:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    a0e8:	4b1c      	ldr	r3, [pc, #112]	; (a15c <_usb_d_dev_init+0xd4>)
    a0ea:	4a1d      	ldr	r2, [pc, #116]	; (a160 <_usb_d_dev_init+0xd8>)
    a0ec:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    a0ee:	4b1b      	ldr	r3, [pc, #108]	; (a15c <_usb_d_dev_init+0xd4>)
    a0f0:	4a1b      	ldr	r2, [pc, #108]	; (a160 <_usb_d_dev_init+0xd8>)
    a0f2:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    a0f4:	4b19      	ldr	r3, [pc, #100]	; (a15c <_usb_d_dev_init+0xd4>)
    a0f6:	4a1a      	ldr	r2, [pc, #104]	; (a160 <_usb_d_dev_init+0xd8>)
    a0f8:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    a0fa:	4b18      	ldr	r3, [pc, #96]	; (a15c <_usb_d_dev_init+0xd4>)
    a0fc:	4a18      	ldr	r2, [pc, #96]	; (a160 <_usb_d_dev_init+0xd8>)
    a0fe:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    a100:	4b16      	ldr	r3, [pc, #88]	; (a15c <_usb_d_dev_init+0xd4>)
    a102:	4a17      	ldr	r2, [pc, #92]	; (a160 <_usb_d_dev_init+0xd8>)
    a104:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    a106:	4b17      	ldr	r3, [pc, #92]	; (a164 <_usb_d_dev_init+0xdc>)
    a108:	4798      	blx	r3

	_usb_load_calib();
    a10a:	4b17      	ldr	r3, [pc, #92]	; (a168 <_usb_d_dev_init+0xe0>)
    a10c:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    a10e:	2104      	movs	r1, #4
    a110:	68f8      	ldr	r0, [r7, #12]
    a112:	4b11      	ldr	r3, [pc, #68]	; (a158 <_usb_d_dev_init+0xd0>)
    a114:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    a116:	4b15      	ldr	r3, [pc, #84]	; (a16c <_usb_d_dev_init+0xe4>)
    a118:	4619      	mov	r1, r3
    a11a:	68f8      	ldr	r0, [r7, #12]
    a11c:	4b14      	ldr	r3, [pc, #80]	; (a170 <_usb_d_dev_init+0xe8>)
    a11e:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    a120:	7afb      	ldrb	r3, [r7, #11]
    a122:	f107 0210 	add.w	r2, r7, #16
    a126:	4413      	add	r3, r2
    a128:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    a12c:	f043 0301 	orr.w	r3, r3, #1
    a130:	b2db      	uxtb	r3, r3
    a132:	b29b      	uxth	r3, r3
    a134:	4619      	mov	r1, r3
    a136:	68f8      	ldr	r0, [r7, #12]
    a138:	4b0e      	ldr	r3, [pc, #56]	; (a174 <_usb_d_dev_init+0xec>)
    a13a:	4798      	blx	r3

	return ERR_NONE;
    a13c:	2300      	movs	r3, #0
}
    a13e:	4618      	mov	r0, r3
    a140:	3710      	adds	r7, #16
    a142:	46bd      	mov	sp, r7
    a144:	bd80      	pop	{r7, pc}
    a146:	bf00      	nop
    a148:	00008721 	.word	0x00008721
    a14c:	00008a71 	.word	0x00008a71
    a150:	00008a45 	.word	0x00008a45
    a154:	000086f7 	.word	0x000086f7
    a158:	00008aa1 	.word	0x00008aa1
    a15c:	20000d88 	.word	0x20000d88
    a160:	00008b69 	.word	0x00008b69
    a164:	0000a00d 	.word	0x0000a00d
    a168:	00008b81 	.word	0x00008b81
    a16c:	20000e50 	.word	0x20000e50
    a170:	00008b4d 	.word	0x00008b4d
    a174:	00008b11 	.word	0x00008b11

0000a178 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    a178:	b580      	push	{r7, lr}
    a17a:	b082      	sub	sp, #8
    a17c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a17e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a182:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    a184:	2103      	movs	r1, #3
    a186:	6878      	ldr	r0, [r7, #4]
    a188:	4b17      	ldr	r3, [pc, #92]	; (a1e8 <_usb_d_dev_enable+0x70>)
    a18a:	4798      	blx	r3
    a18c:	4603      	mov	r3, r0
    a18e:	2b00      	cmp	r3, #0
    a190:	d002      	beq.n	a198 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    a192:	f06f 0310 	mvn.w	r3, #16
    a196:	e023      	b.n	a1e0 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    a198:	6878      	ldr	r0, [r7, #4]
    a19a:	4b14      	ldr	r3, [pc, #80]	; (a1ec <_usb_d_dev_enable+0x74>)
    a19c:	4798      	blx	r3
    a19e:	4603      	mov	r3, r0
    a1a0:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    a1a2:	78fb      	ldrb	r3, [r7, #3]
    a1a4:	f003 0302 	and.w	r3, r3, #2
    a1a8:	2b00      	cmp	r3, #0
    a1aa:	d107      	bne.n	a1bc <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    a1ac:	78fb      	ldrb	r3, [r7, #3]
    a1ae:	f043 0302 	orr.w	r3, r3, #2
    a1b2:	b2db      	uxtb	r3, r3
    a1b4:	4619      	mov	r1, r3
    a1b6:	6878      	ldr	r0, [r7, #4]
    a1b8:	4b0d      	ldr	r3, [pc, #52]	; (a1f0 <_usb_d_dev_enable+0x78>)
    a1ba:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    a1bc:	2050      	movs	r0, #80	; 0x50
    a1be:	4b0d      	ldr	r3, [pc, #52]	; (a1f4 <_usb_d_dev_enable+0x7c>)
    a1c0:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    a1c2:	2051      	movs	r0, #81	; 0x51
    a1c4:	4b0b      	ldr	r3, [pc, #44]	; (a1f4 <_usb_d_dev_enable+0x7c>)
    a1c6:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    a1c8:	2052      	movs	r0, #82	; 0x52
    a1ca:	4b0a      	ldr	r3, [pc, #40]	; (a1f4 <_usb_d_dev_enable+0x7c>)
    a1cc:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    a1ce:	2053      	movs	r0, #83	; 0x53
    a1d0:	4b08      	ldr	r3, [pc, #32]	; (a1f4 <_usb_d_dev_enable+0x7c>)
    a1d2:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    a1d4:	f240 218d 	movw	r1, #653	; 0x28d
    a1d8:	6878      	ldr	r0, [r7, #4]
    a1da:	4b07      	ldr	r3, [pc, #28]	; (a1f8 <_usb_d_dev_enable+0x80>)
    a1dc:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    a1de:	2300      	movs	r3, #0
}
    a1e0:	4618      	mov	r0, r3
    a1e2:	3708      	adds	r7, #8
    a1e4:	46bd      	mov	sp, r7
    a1e6:	bd80      	pop	{r7, pc}
    a1e8:	00008a1b 	.word	0x00008a1b
    a1ec:	00008ac9 	.word	0x00008ac9
    a1f0:	00008aa1 	.word	0x00008aa1
    a1f4:	0000862d 	.word	0x0000862d
    a1f8:	000089c5 	.word	0x000089c5

0000a1fc <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    a1fc:	b580      	push	{r7, lr}
    a1fe:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    a200:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a204:	4b01      	ldr	r3, [pc, #4]	; (a20c <_usb_d_dev_attach+0x10>)
    a206:	4798      	blx	r3
}
    a208:	bf00      	nop
    a20a:	bd80      	pop	{r7, pc}
    a20c:	00008aed 	.word	0x00008aed

0000a210 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    a210:	b580      	push	{r7, lr}
    a212:	b082      	sub	sp, #8
    a214:	af00      	add	r7, sp, #0
    a216:	4603      	mov	r3, r0
    a218:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    a21a:	79fb      	ldrb	r3, [r7, #7]
    a21c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a220:	b2db      	uxtb	r3, r3
    a222:	4619      	mov	r1, r3
    a224:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a228:	4b02      	ldr	r3, [pc, #8]	; (a234 <_usb_d_dev_set_address+0x24>)
    a22a:	4798      	blx	r3
}
    a22c:	bf00      	nop
    a22e:	3708      	adds	r7, #8
    a230:	46bd      	mov	sp, r7
    a232:	bd80      	pop	{r7, pc}
    a234:	00008b2f 	.word	0x00008b2f

0000a238 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    a238:	b590      	push	{r4, r7, lr}
    a23a:	b085      	sub	sp, #20
    a23c:	af00      	add	r7, sp, #0
    a23e:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    a240:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a244:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a246:	687b      	ldr	r3, [r7, #4]
    a248:	7c9b      	ldrb	r3, [r3, #18]
    a24a:	f003 030f 	and.w	r3, r3, #15
    a24e:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a250:	687b      	ldr	r3, [r7, #4]
    a252:	68db      	ldr	r3, [r3, #12]
    a254:	461a      	mov	r2, r3
    a256:	7afb      	ldrb	r3, [r7, #11]
    a258:	2100      	movs	r1, #0
    a25a:	4618      	mov	r0, r3
    a25c:	4b0f      	ldr	r3, [pc, #60]	; (a29c <_usb_d_dev_trans_setup+0x64>)
    a25e:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a260:	687b      	ldr	r3, [r7, #4]
    a262:	8a1b      	ldrh	r3, [r3, #16]
    a264:	461a      	mov	r2, r3
    a266:	7af8      	ldrb	r0, [r7, #11]
    a268:	2300      	movs	r3, #0
    a26a:	2100      	movs	r1, #0
    a26c:	4c0c      	ldr	r4, [pc, #48]	; (a2a0 <_usb_d_dev_trans_setup+0x68>)
    a26e:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    a270:	7afb      	ldrb	r3, [r7, #11]
    a272:	22b0      	movs	r2, #176	; 0xb0
    a274:	4619      	mov	r1, r3
    a276:	68f8      	ldr	r0, [r7, #12]
    a278:	4b0a      	ldr	r3, [pc, #40]	; (a2a4 <_usb_d_dev_trans_setup+0x6c>)
    a27a:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    a27c:	7afb      	ldrb	r3, [r7, #11]
    a27e:	2200      	movs	r2, #0
    a280:	2100      	movs	r1, #0
    a282:	4618      	mov	r0, r3
    a284:	4b08      	ldr	r3, [pc, #32]	; (a2a8 <_usb_d_dev_trans_setup+0x70>)
    a286:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    a288:	7afb      	ldrb	r3, [r7, #11]
    a28a:	2210      	movs	r2, #16
    a28c:	4619      	mov	r1, r3
    a28e:	68f8      	ldr	r0, [r7, #12]
    a290:	4b06      	ldr	r3, [pc, #24]	; (a2ac <_usb_d_dev_trans_setup+0x74>)
    a292:	4798      	blx	r3
}
    a294:	bf00      	nop
    a296:	3714      	adds	r7, #20
    a298:	46bd      	mov	sp, r7
    a29a:	bd90      	pop	{r4, r7, pc}
    a29c:	00008fcd 	.word	0x00008fcd
    a2a0:	00009155 	.word	0x00009155
    a2a4:	0000882d 	.word	0x0000882d
    a2a8:	00009225 	.word	0x00009225
    a2ac:	00008881 	.word	0x00008881

0000a2b0 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    a2b0:	b580      	push	{r7, lr}
    a2b2:	b088      	sub	sp, #32
    a2b4:	af00      	add	r7, sp, #0
    a2b6:	4603      	mov	r3, r0
    a2b8:	71fb      	strb	r3, [r7, #7]
    a2ba:	460b      	mov	r3, r1
    a2bc:	71bb      	strb	r3, [r7, #6]
    a2be:	4613      	mov	r3, r2
    a2c0:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    a2c2:	79fb      	ldrb	r3, [r7, #7]
    a2c4:	f003 030f 	and.w	r3, r3, #15
    a2c8:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    a2ca:	79fb      	ldrb	r3, [r7, #7]
    a2cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a2d0:	2b00      	cmp	r3, #0
    a2d2:	bf14      	ite	ne
    a2d4:	2301      	movne	r3, #1
    a2d6:	2300      	moveq	r3, #0
    a2d8:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a2da:	7fba      	ldrb	r2, [r7, #30]
    a2dc:	7ffb      	ldrb	r3, [r7, #31]
    a2de:	4611      	mov	r1, r2
    a2e0:	4618      	mov	r0, r3
    a2e2:	4b3e      	ldr	r3, [pc, #248]	; (a3dc <_usb_d_dev_ep_init+0x12c>)
    a2e4:	4798      	blx	r3
    a2e6:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a2e8:	79bb      	ldrb	r3, [r7, #6]
    a2ea:	f003 0303 	and.w	r3, r3, #3
    a2ee:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a2f0:	7ffa      	ldrb	r2, [r7, #31]
    a2f2:	4613      	mov	r3, r2
    a2f4:	005b      	lsls	r3, r3, #1
    a2f6:	4413      	add	r3, r2
    a2f8:	009b      	lsls	r3, r3, #2
    a2fa:	4a39      	ldr	r2, [pc, #228]	; (a3e0 <_usb_d_dev_ep_init+0x130>)
    a2fc:	4413      	add	r3, r2
    a2fe:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    a300:	7ffb      	ldrb	r3, [r7, #31]
    a302:	2b04      	cmp	r3, #4
    a304:	d902      	bls.n	a30c <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    a306:	f06f 0311 	mvn.w	r3, #17
    a30a:	e063      	b.n	a3d4 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    a30c:	69bb      	ldr	r3, [r7, #24]
    a30e:	7c9b      	ldrb	r3, [r3, #18]
    a310:	2bff      	cmp	r3, #255	; 0xff
    a312:	d002      	beq.n	a31a <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    a314:	f06f 0313 	mvn.w	r3, #19
    a318:	e05c      	b.n	a3d4 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    a31a:	7dfb      	ldrb	r3, [r7, #23]
    a31c:	2b00      	cmp	r3, #0
    a31e:	d11f      	bne.n	a360 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    a320:	7fbb      	ldrb	r3, [r7, #30]
    a322:	2b00      	cmp	r3, #0
    a324:	bf14      	ite	ne
    a326:	2301      	movne	r3, #1
    a328:	2300      	moveq	r3, #0
    a32a:	b2db      	uxtb	r3, r3
    a32c:	f083 0301 	eor.w	r3, r3, #1
    a330:	b2db      	uxtb	r3, r3
    a332:	f003 0301 	and.w	r3, r3, #1
    a336:	b2da      	uxtb	r2, r3
    a338:	7ffb      	ldrb	r3, [r7, #31]
    a33a:	4611      	mov	r1, r2
    a33c:	4618      	mov	r0, r3
    a33e:	4b27      	ldr	r3, [pc, #156]	; (a3dc <_usb_d_dev_ep_init+0x12c>)
    a340:	4798      	blx	r3
    a342:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    a344:	68fb      	ldr	r3, [r7, #12]
    a346:	7c9b      	ldrb	r3, [r3, #18]
    a348:	2bff      	cmp	r3, #255	; 0xff
    a34a:	d002      	beq.n	a352 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    a34c:	f06f 0313 	mvn.w	r3, #19
    a350:	e040      	b.n	a3d4 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    a352:	693b      	ldr	r3, [r7, #16]
    a354:	681b      	ldr	r3, [r3, #0]
    a356:	2b00      	cmp	r3, #0
    a358:	d102      	bne.n	a360 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    a35a:	f06f 0312 	mvn.w	r3, #18
    a35e:	e039      	b.n	a3d4 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a360:	7fbb      	ldrb	r3, [r7, #30]
    a362:	2b00      	cmp	r3, #0
    a364:	d007      	beq.n	a376 <_usb_d_dev_ep_init+0xc6>
    a366:	693b      	ldr	r3, [r7, #16]
    a368:	685b      	ldr	r3, [r3, #4]
    a36a:	2b00      	cmp	r3, #0
    a36c:	bf14      	ite	ne
    a36e:	2301      	movne	r3, #1
    a370:	2300      	moveq	r3, #0
    a372:	b2db      	uxtb	r3, r3
    a374:	e006      	b.n	a384 <_usb_d_dev_ep_init+0xd4>
    a376:	693b      	ldr	r3, [r7, #16]
    a378:	681b      	ldr	r3, [r3, #0]
    a37a:	2b00      	cmp	r3, #0
    a37c:	bf14      	ite	ne
    a37e:	2301      	movne	r3, #1
    a380:	2300      	moveq	r3, #0
    a382:	b2db      	uxtb	r3, r3
    a384:	2b00      	cmp	r3, #0
    a386:	d00f      	beq.n	a3a8 <_usb_d_dev_ep_init+0xf8>
    a388:	7fbb      	ldrb	r3, [r7, #30]
    a38a:	2b00      	cmp	r3, #0
    a38c:	d003      	beq.n	a396 <_usb_d_dev_ep_init+0xe6>
    a38e:	693b      	ldr	r3, [r7, #16]
    a390:	895b      	ldrh	r3, [r3, #10]
    a392:	461a      	mov	r2, r3
    a394:	e002      	b.n	a39c <_usb_d_dev_ep_init+0xec>
    a396:	693b      	ldr	r3, [r7, #16]
    a398:	891b      	ldrh	r3, [r3, #8]
    a39a:	461a      	mov	r2, r3
    a39c:	88bb      	ldrh	r3, [r7, #4]
    a39e:	429a      	cmp	r2, r3
    a3a0:	da02      	bge.n	a3a8 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    a3a2:	f06f 0312 	mvn.w	r3, #18
    a3a6:	e015      	b.n	a3d4 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a3a8:	7fbb      	ldrb	r3, [r7, #30]
    a3aa:	2b00      	cmp	r3, #0
    a3ac:	d002      	beq.n	a3b4 <_usb_d_dev_ep_init+0x104>
    a3ae:	693b      	ldr	r3, [r7, #16]
    a3b0:	685b      	ldr	r3, [r3, #4]
    a3b2:	e001      	b.n	a3b8 <_usb_d_dev_ep_init+0x108>
    a3b4:	693b      	ldr	r3, [r7, #16]
    a3b6:	681b      	ldr	r3, [r3, #0]
    a3b8:	69ba      	ldr	r2, [r7, #24]
    a3ba:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    a3bc:	69bb      	ldr	r3, [r7, #24]
    a3be:	88ba      	ldrh	r2, [r7, #4]
    a3c0:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    a3c2:	7dfb      	ldrb	r3, [r7, #23]
    a3c4:	3301      	adds	r3, #1
    a3c6:	b2da      	uxtb	r2, r3
    a3c8:	69bb      	ldr	r3, [r7, #24]
    a3ca:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    a3cc:	69bb      	ldr	r3, [r7, #24]
    a3ce:	79fa      	ldrb	r2, [r7, #7]
    a3d0:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    a3d2:	2300      	movs	r3, #0
}
    a3d4:	4618      	mov	r0, r3
    a3d6:	3720      	adds	r7, #32
    a3d8:	46bd      	mov	sp, r7
    a3da:	bd80      	pop	{r7, pc}
    a3dc:	000092e1 	.word	0x000092e1
    a3e0:	0000f0e8 	.word	0x0000f0e8

0000a3e4 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    a3e4:	b580      	push	{r7, lr}
    a3e6:	b086      	sub	sp, #24
    a3e8:	af00      	add	r7, sp, #0
    a3ea:	4603      	mov	r3, r0
    a3ec:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    a3ee:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a3f2:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    a3f4:	79fb      	ldrb	r3, [r7, #7]
    a3f6:	f003 030f 	and.w	r3, r3, #15
    a3fa:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a3fc:	79fb      	ldrb	r3, [r7, #7]
    a3fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a402:	2b00      	cmp	r3, #0
    a404:	bf14      	ite	ne
    a406:	2301      	movne	r3, #1
    a408:	2300      	moveq	r3, #0
    a40a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a40c:	7cba      	ldrb	r2, [r7, #18]
    a40e:	7cfb      	ldrb	r3, [r7, #19]
    a410:	4611      	mov	r1, r2
    a412:	4618      	mov	r0, r3
    a414:	4b2a      	ldr	r3, [pc, #168]	; (a4c0 <_usb_d_dev_ep_deinit+0xdc>)
    a416:	4798      	blx	r3
    a418:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a41a:	7cfb      	ldrb	r3, [r7, #19]
    a41c:	2b04      	cmp	r3, #4
    a41e:	d84a      	bhi.n	a4b6 <_usb_d_dev_ep_deinit+0xd2>
    a420:	68fb      	ldr	r3, [r7, #12]
    a422:	7c9b      	ldrb	r3, [r3, #18]
    a424:	2bff      	cmp	r3, #255	; 0xff
    a426:	d046      	beq.n	a4b6 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a428:	7cbb      	ldrb	r3, [r7, #18]
    a42a:	2203      	movs	r2, #3
    a42c:	4619      	mov	r1, r3
    a42e:	68f8      	ldr	r0, [r7, #12]
    a430:	4b24      	ldr	r3, [pc, #144]	; (a4c4 <_usb_d_dev_ep_deinit+0xe0>)
    a432:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a434:	68fb      	ldr	r3, [r7, #12]
    a436:	7cdb      	ldrb	r3, [r3, #19]
    a438:	f003 0307 	and.w	r3, r3, #7
    a43c:	b2db      	uxtb	r3, r3
    a43e:	2b01      	cmp	r3, #1
    a440:	d107      	bne.n	a452 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a442:	79fb      	ldrb	r3, [r7, #7]
    a444:	697a      	ldr	r2, [r7, #20]
    a446:	3308      	adds	r3, #8
    a448:	015b      	lsls	r3, r3, #5
    a44a:	4413      	add	r3, r2
    a44c:	2200      	movs	r2, #0
    a44e:	701a      	strb	r2, [r3, #0]
    a450:	e02a      	b.n	a4a8 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    a452:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a456:	2b00      	cmp	r3, #0
    a458:	da15      	bge.n	a486 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a45a:	79fb      	ldrb	r3, [r7, #7]
    a45c:	f003 030f 	and.w	r3, r3, #15
    a460:	79fa      	ldrb	r2, [r7, #7]
    a462:	f002 020f 	and.w	r2, r2, #15
    a466:	6979      	ldr	r1, [r7, #20]
    a468:	3208      	adds	r2, #8
    a46a:	0152      	lsls	r2, r2, #5
    a46c:	440a      	add	r2, r1
    a46e:	7812      	ldrb	r2, [r2, #0]
    a470:	b2d2      	uxtb	r2, r2
    a472:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    a476:	b2d1      	uxtb	r1, r2
    a478:	697a      	ldr	r2, [r7, #20]
    a47a:	3308      	adds	r3, #8
    a47c:	015b      	lsls	r3, r3, #5
    a47e:	4413      	add	r3, r2
    a480:	460a      	mov	r2, r1
    a482:	701a      	strb	r2, [r3, #0]
    a484:	e010      	b.n	a4a8 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    a486:	79fb      	ldrb	r3, [r7, #7]
    a488:	79fa      	ldrb	r2, [r7, #7]
    a48a:	6979      	ldr	r1, [r7, #20]
    a48c:	3208      	adds	r2, #8
    a48e:	0152      	lsls	r2, r2, #5
    a490:	440a      	add	r2, r1
    a492:	7812      	ldrb	r2, [r2, #0]
    a494:	b2d2      	uxtb	r2, r2
    a496:	f022 0207 	bic.w	r2, r2, #7
    a49a:	b2d1      	uxtb	r1, r2
    a49c:	697a      	ldr	r2, [r7, #20]
    a49e:	3308      	adds	r3, #8
    a4a0:	015b      	lsls	r3, r3, #5
    a4a2:	4413      	add	r3, r2
    a4a4:	460a      	mov	r2, r1
    a4a6:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    a4a8:	68fb      	ldr	r3, [r7, #12]
    a4aa:	2200      	movs	r2, #0
    a4ac:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    a4ae:	68fb      	ldr	r3, [r7, #12]
    a4b0:	22ff      	movs	r2, #255	; 0xff
    a4b2:	749a      	strb	r2, [r3, #18]
    a4b4:	e000      	b.n	a4b8 <_usb_d_dev_ep_deinit+0xd4>
		return;
    a4b6:	bf00      	nop
}
    a4b8:	3718      	adds	r7, #24
    a4ba:	46bd      	mov	sp, r7
    a4bc:	bd80      	pop	{r7, pc}
    a4be:	bf00      	nop
    a4c0:	000092e1 	.word	0x000092e1
    a4c4:	0000a919 	.word	0x0000a919

0000a4c8 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    a4c8:	b5b0      	push	{r4, r5, r7, lr}
    a4ca:	b088      	sub	sp, #32
    a4cc:	af00      	add	r7, sp, #0
    a4ce:	4603      	mov	r3, r0
    a4d0:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    a4d2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a4d6:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    a4d8:	79fb      	ldrb	r3, [r7, #7]
    a4da:	f003 030f 	and.w	r3, r3, #15
    a4de:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    a4e0:	79fb      	ldrb	r3, [r7, #7]
    a4e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a4e6:	2b00      	cmp	r3, #0
    a4e8:	bf14      	ite	ne
    a4ea:	2301      	movne	r3, #1
    a4ec:	2300      	moveq	r3, #0
    a4ee:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    a4f0:	7eba      	ldrb	r2, [r7, #26]
    a4f2:	7efb      	ldrb	r3, [r7, #27]
    a4f4:	4611      	mov	r1, r2
    a4f6:	4618      	mov	r0, r3
    a4f8:	4b70      	ldr	r3, [pc, #448]	; (a6bc <_usb_d_dev_ep_enable+0x1f4>)
    a4fa:	4798      	blx	r3
    a4fc:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    a4fe:	7efb      	ldrb	r3, [r7, #27]
    a500:	4619      	mov	r1, r3
    a502:	69f8      	ldr	r0, [r7, #28]
    a504:	4b6e      	ldr	r3, [pc, #440]	; (a6c0 <_usb_d_dev_ep_enable+0x1f8>)
    a506:	4798      	blx	r3
    a508:	4603      	mov	r3, r0
    a50a:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a50c:	7efb      	ldrb	r3, [r7, #27]
    a50e:	2b04      	cmp	r3, #4
    a510:	d803      	bhi.n	a51a <_usb_d_dev_ep_enable+0x52>
    a512:	697b      	ldr	r3, [r7, #20]
    a514:	7c9b      	ldrb	r3, [r3, #18]
    a516:	2bff      	cmp	r3, #255	; 0xff
    a518:	d102      	bne.n	a520 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    a51a:	f06f 0311 	mvn.w	r3, #17
    a51e:	e0c8      	b.n	a6b2 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    a520:	7efb      	ldrb	r3, [r7, #27]
    a522:	015b      	lsls	r3, r3, #5
    a524:	4a67      	ldr	r2, [pc, #412]	; (a6c4 <_usb_d_dev_ep_enable+0x1fc>)
    a526:	4413      	add	r3, r2
    a528:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    a52a:	697b      	ldr	r3, [r7, #20]
    a52c:	7cdb      	ldrb	r3, [r3, #19]
    a52e:	f003 0307 	and.w	r3, r3, #7
    a532:	b2db      	uxtb	r3, r3
    a534:	2b01      	cmp	r3, #1
    a536:	d14b      	bne.n	a5d0 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a538:	7cfb      	ldrb	r3, [r7, #19]
    a53a:	f003 0377 	and.w	r3, r3, #119	; 0x77
    a53e:	2b00      	cmp	r3, #0
    a540:	d002      	beq.n	a548 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    a542:	f06f 0313 	mvn.w	r3, #19
    a546:	e0b4      	b.n	a6b2 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    a548:	7efb      	ldrb	r3, [r7, #27]
    a54a:	2211      	movs	r2, #17
    a54c:	4619      	mov	r1, r3
    a54e:	69f8      	ldr	r0, [r7, #28]
    a550:	4b5d      	ldr	r3, [pc, #372]	; (a6c8 <_usb_d_dev_ep_enable+0x200>)
    a552:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a554:	697b      	ldr	r3, [r7, #20]
    a556:	8a1b      	ldrh	r3, [r3, #16]
    a558:	039b      	lsls	r3, r3, #14
    a55a:	4c5c      	ldr	r4, [pc, #368]	; (a6cc <_usb_d_dev_ep_enable+0x204>)
    a55c:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a55e:	697b      	ldr	r3, [r7, #20]
    a560:	8a1b      	ldrh	r3, [r3, #16]
    a562:	4618      	mov	r0, r3
    a564:	4b5a      	ldr	r3, [pc, #360]	; (a6d0 <_usb_d_dev_ep_enable+0x208>)
    a566:	4798      	blx	r3
    a568:	4603      	mov	r3, r0
    a56a:	071b      	lsls	r3, r3, #28
    a56c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a570:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a574:	68fb      	ldr	r3, [r7, #12]
    a576:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    a578:	68fb      	ldr	r3, [r7, #12]
    a57a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a57e:	697b      	ldr	r3, [r7, #20]
    a580:	8a1b      	ldrh	r3, [r3, #16]
    a582:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a586:	697b      	ldr	r3, [r7, #20]
    a588:	8a1b      	ldrh	r3, [r3, #16]
    a58a:	4618      	mov	r0, r3
    a58c:	4b50      	ldr	r3, [pc, #320]	; (a6d0 <_usb_d_dev_ep_enable+0x208>)
    a58e:	4798      	blx	r3
    a590:	4603      	mov	r3, r0
    a592:	071b      	lsls	r3, r3, #28
    a594:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a598:	432b      	orrs	r3, r5
    a59a:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a59c:	7efb      	ldrb	r3, [r7, #27]
    a59e:	2200      	movs	r2, #0
    a5a0:	2100      	movs	r1, #0
    a5a2:	4618      	mov	r0, r3
    a5a4:	4b4b      	ldr	r3, [pc, #300]	; (a6d4 <_usb_d_dev_ep_enable+0x20c>)
    a5a6:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    a5a8:	7efb      	ldrb	r3, [r7, #27]
    a5aa:	2200      	movs	r2, #0
    a5ac:	2101      	movs	r1, #1
    a5ae:	4618      	mov	r0, r3
    a5b0:	4b49      	ldr	r3, [pc, #292]	; (a6d8 <_usb_d_dev_ep_enable+0x210>)
    a5b2:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    a5b4:	7efb      	ldrb	r3, [r7, #27]
    a5b6:	2100      	movs	r1, #0
    a5b8:	4618      	mov	r0, r3
    a5ba:	4b48      	ldr	r3, [pc, #288]	; (a6dc <_usb_d_dev_ep_enable+0x214>)
    a5bc:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a5be:	7efb      	ldrb	r3, [r7, #27]
    a5c0:	2101      	movs	r1, #1
    a5c2:	4618      	mov	r0, r3
    a5c4:	4b45      	ldr	r3, [pc, #276]	; (a6dc <_usb_d_dev_ep_enable+0x214>)
    a5c6:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    a5c8:	6978      	ldr	r0, [r7, #20]
    a5ca:	4b45      	ldr	r3, [pc, #276]	; (a6e0 <_usb_d_dev_ep_enable+0x218>)
    a5cc:	4798      	blx	r3
    a5ce:	e06f      	b.n	a6b0 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    a5d0:	7ebb      	ldrb	r3, [r7, #26]
    a5d2:	2b00      	cmp	r3, #0
    a5d4:	d038      	beq.n	a648 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a5d6:	7cfb      	ldrb	r3, [r7, #19]
    a5d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a5dc:	2b00      	cmp	r3, #0
    a5de:	d002      	beq.n	a5e6 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    a5e0:	f06f 0313 	mvn.w	r3, #19
    a5e4:	e065      	b.n	a6b2 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a5e6:	697b      	ldr	r3, [r7, #20]
    a5e8:	7cdb      	ldrb	r3, [r3, #19]
    a5ea:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a5ee:	b2db      	uxtb	r3, r3
    a5f0:	011b      	lsls	r3, r3, #4
    a5f2:	b2db      	uxtb	r3, r3
    a5f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a5f8:	b2da      	uxtb	r2, r3
    a5fa:	7cfb      	ldrb	r3, [r7, #19]
    a5fc:	4313      	orrs	r3, r2
    a5fe:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a600:	7cfa      	ldrb	r2, [r7, #19]
    a602:	7efb      	ldrb	r3, [r7, #27]
    a604:	4619      	mov	r1, r3
    a606:	69f8      	ldr	r0, [r7, #28]
    a608:	4b2f      	ldr	r3, [pc, #188]	; (a6c8 <_usb_d_dev_ep_enable+0x200>)
    a60a:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    a60c:	68fb      	ldr	r3, [r7, #12]
    a60e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a612:	697b      	ldr	r3, [r7, #20]
    a614:	8a1b      	ldrh	r3, [r3, #16]
    a616:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a61a:	697b      	ldr	r3, [r7, #20]
    a61c:	8a1b      	ldrh	r3, [r3, #16]
    a61e:	4618      	mov	r0, r3
    a620:	4b2b      	ldr	r3, [pc, #172]	; (a6d0 <_usb_d_dev_ep_enable+0x208>)
    a622:	4798      	blx	r3
    a624:	4603      	mov	r3, r0
    a626:	071b      	lsls	r3, r3, #28
    a628:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a62c:	432b      	orrs	r3, r5
    a62e:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a630:	7efb      	ldrb	r3, [r7, #27]
    a632:	2200      	movs	r2, #0
    a634:	2101      	movs	r1, #1
    a636:	4618      	mov	r0, r3
    a638:	4b27      	ldr	r3, [pc, #156]	; (a6d8 <_usb_d_dev_ep_enable+0x210>)
    a63a:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a63c:	7efb      	ldrb	r3, [r7, #27]
    a63e:	2101      	movs	r1, #1
    a640:	4618      	mov	r0, r3
    a642:	4b26      	ldr	r3, [pc, #152]	; (a6dc <_usb_d_dev_ep_enable+0x214>)
    a644:	4798      	blx	r3
    a646:	e033      	b.n	a6b0 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    a648:	7cfb      	ldrb	r3, [r7, #19]
    a64a:	f003 0307 	and.w	r3, r3, #7
    a64e:	2b00      	cmp	r3, #0
    a650:	d002      	beq.n	a658 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    a652:	f06f 0313 	mvn.w	r3, #19
    a656:	e02c      	b.n	a6b2 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    a658:	697b      	ldr	r3, [r7, #20]
    a65a:	7cdb      	ldrb	r3, [r3, #19]
    a65c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a660:	b2db      	uxtb	r3, r3
    a662:	461a      	mov	r2, r3
    a664:	7cfb      	ldrb	r3, [r7, #19]
    a666:	4313      	orrs	r3, r2
    a668:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a66a:	7cfa      	ldrb	r2, [r7, #19]
    a66c:	7efb      	ldrb	r3, [r7, #27]
    a66e:	4619      	mov	r1, r3
    a670:	69f8      	ldr	r0, [r7, #28]
    a672:	4b15      	ldr	r3, [pc, #84]	; (a6c8 <_usb_d_dev_ep_enable+0x200>)
    a674:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a676:	697b      	ldr	r3, [r7, #20]
    a678:	8a1b      	ldrh	r3, [r3, #16]
    a67a:	039b      	lsls	r3, r3, #14
    a67c:	4c13      	ldr	r4, [pc, #76]	; (a6cc <_usb_d_dev_ep_enable+0x204>)
    a67e:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a680:	697b      	ldr	r3, [r7, #20]
    a682:	8a1b      	ldrh	r3, [r3, #16]
    a684:	4618      	mov	r0, r3
    a686:	4b12      	ldr	r3, [pc, #72]	; (a6d0 <_usb_d_dev_ep_enable+0x208>)
    a688:	4798      	blx	r3
    a68a:	4603      	mov	r3, r0
    a68c:	071b      	lsls	r3, r3, #28
    a68e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a692:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a696:	68fb      	ldr	r3, [r7, #12]
    a698:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a69a:	7efb      	ldrb	r3, [r7, #27]
    a69c:	2200      	movs	r2, #0
    a69e:	2100      	movs	r1, #0
    a6a0:	4618      	mov	r0, r3
    a6a2:	4b0c      	ldr	r3, [pc, #48]	; (a6d4 <_usb_d_dev_ep_enable+0x20c>)
    a6a4:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    a6a6:	7efb      	ldrb	r3, [r7, #27]
    a6a8:	2100      	movs	r1, #0
    a6aa:	4618      	mov	r0, r3
    a6ac:	4b0b      	ldr	r3, [pc, #44]	; (a6dc <_usb_d_dev_ep_enable+0x214>)
    a6ae:	4798      	blx	r3
	}

	return USB_OK;
    a6b0:	2300      	movs	r3, #0
}
    a6b2:	4618      	mov	r0, r3
    a6b4:	3720      	adds	r7, #32
    a6b6:	46bd      	mov	sp, r7
    a6b8:	bdb0      	pop	{r4, r5, r7, pc}
    a6ba:	bf00      	nop
    a6bc:	000092e1 	.word	0x000092e1
    a6c0:	00008967 	.word	0x00008967
    a6c4:	20000e50 	.word	0x20000e50
    a6c8:	0000893d 	.word	0x0000893d
    a6cc:	0fffc000 	.word	0x0fffc000
    a6d0:	0000927d 	.word	0x0000927d
    a6d4:	00009225 	.word	0x00009225
    a6d8:	000091cd 	.word	0x000091cd
    a6dc:	00009195 	.word	0x00009195
    a6e0:	0000a239 	.word	0x0000a239

0000a6e4 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    a6e4:	b580      	push	{r7, lr}
    a6e6:	b084      	sub	sp, #16
    a6e8:	af00      	add	r7, sp, #0
    a6ea:	6078      	str	r0, [r7, #4]
    a6ec:	460b      	mov	r3, r1
    a6ee:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a6f0:	687b      	ldr	r3, [r7, #4]
    a6f2:	7c9b      	ldrb	r3, [r3, #18]
    a6f4:	f003 030f 	and.w	r3, r3, #15
    a6f8:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    a6fa:	78fa      	ldrb	r2, [r7, #3]
    a6fc:	7bfb      	ldrb	r3, [r7, #15]
    a6fe:	4611      	mov	r1, r2
    a700:	4618      	mov	r0, r3
    a702:	4b03      	ldr	r3, [pc, #12]	; (a710 <_usb_d_dev_ep_stall_get+0x2c>)
    a704:	4798      	blx	r3
    a706:	4603      	mov	r3, r0
}
    a708:	4618      	mov	r0, r3
    a70a:	3710      	adds	r7, #16
    a70c:	46bd      	mov	sp, r7
    a70e:	bd80      	pop	{r7, pc}
    a710:	00008dd5 	.word	0x00008dd5

0000a714 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    a714:	b580      	push	{r7, lr}
    a716:	b084      	sub	sp, #16
    a718:	af00      	add	r7, sp, #0
    a71a:	6078      	str	r0, [r7, #4]
    a71c:	460b      	mov	r3, r1
    a71e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a720:	687b      	ldr	r3, [r7, #4]
    a722:	7c9b      	ldrb	r3, [r3, #18]
    a724:	f003 030f 	and.w	r3, r3, #15
    a728:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    a72a:	78f9      	ldrb	r1, [r7, #3]
    a72c:	7bfb      	ldrb	r3, [r7, #15]
    a72e:	2201      	movs	r2, #1
    a730:	4618      	mov	r0, r3
    a732:	4b0a      	ldr	r3, [pc, #40]	; (a75c <_usb_d_dev_ep_stall_set+0x48>)
    a734:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a736:	78fb      	ldrb	r3, [r7, #3]
    a738:	2220      	movs	r2, #32
    a73a:	409a      	lsls	r2, r3
    a73c:	7bfb      	ldrb	r3, [r7, #15]
    a73e:	4611      	mov	r1, r2
    a740:	4618      	mov	r0, r3
    a742:	4b07      	ldr	r3, [pc, #28]	; (a760 <_usb_d_dev_ep_stall_set+0x4c>)
    a744:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    a746:	687a      	ldr	r2, [r7, #4]
    a748:	7cd3      	ldrb	r3, [r2, #19]
    a74a:	f043 0308 	orr.w	r3, r3, #8
    a74e:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    a750:	2300      	movs	r3, #0
}
    a752:	4618      	mov	r0, r3
    a754:	3710      	adds	r7, #16
    a756:	46bd      	mov	sp, r7
    a758:	bd80      	pop	{r7, pc}
    a75a:	bf00      	nop
    a75c:	00008d7d 	.word	0x00008d7d
    a760:	00008cfd 	.word	0x00008cfd

0000a764 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    a764:	b580      	push	{r7, lr}
    a766:	b084      	sub	sp, #16
    a768:	af00      	add	r7, sp, #0
    a76a:	6078      	str	r0, [r7, #4]
    a76c:	460b      	mov	r3, r1
    a76e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    a770:	687b      	ldr	r3, [r7, #4]
    a772:	7c9b      	ldrb	r3, [r3, #18]
    a774:	f003 030f 	and.w	r3, r3, #15
    a778:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    a77a:	78fa      	ldrb	r2, [r7, #3]
    a77c:	7bfb      	ldrb	r3, [r7, #15]
    a77e:	4611      	mov	r1, r2
    a780:	4618      	mov	r0, r3
    a782:	4b28      	ldr	r3, [pc, #160]	; (a824 <_usb_d_dev_ep_stall_clr+0xc0>)
    a784:	4798      	blx	r3
    a786:	4603      	mov	r3, r0
    a788:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    a78a:	7bbb      	ldrb	r3, [r7, #14]
    a78c:	f083 0301 	eor.w	r3, r3, #1
    a790:	b2db      	uxtb	r3, r3
    a792:	2b00      	cmp	r3, #0
    a794:	d001      	beq.n	a79a <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    a796:	2300      	movs	r3, #0
    a798:	e040      	b.n	a81c <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    a79a:	78f9      	ldrb	r1, [r7, #3]
    a79c:	7bfb      	ldrb	r3, [r7, #15]
    a79e:	2200      	movs	r2, #0
    a7a0:	4618      	mov	r0, r3
    a7a2:	4b21      	ldr	r3, [pc, #132]	; (a828 <_usb_d_dev_ep_stall_clr+0xc4>)
    a7a4:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a7a6:	78fb      	ldrb	r3, [r7, #3]
    a7a8:	2220      	movs	r2, #32
    a7aa:	409a      	lsls	r2, r3
    a7ac:	7bfb      	ldrb	r3, [r7, #15]
    a7ae:	4611      	mov	r1, r2
    a7b0:	4618      	mov	r0, r3
    a7b2:	4b1e      	ldr	r3, [pc, #120]	; (a82c <_usb_d_dev_ep_stall_clr+0xc8>)
    a7b4:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    a7b6:	78fa      	ldrb	r2, [r7, #3]
    a7b8:	7bfb      	ldrb	r3, [r7, #15]
    a7ba:	4611      	mov	r1, r2
    a7bc:	4618      	mov	r0, r3
    a7be:	4b1c      	ldr	r3, [pc, #112]	; (a830 <_usb_d_dev_ep_stall_clr+0xcc>)
    a7c0:	4798      	blx	r3
    a7c2:	4603      	mov	r3, r0
    a7c4:	2b00      	cmp	r3, #0
    a7c6:	d00b      	beq.n	a7e0 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    a7c8:	78fa      	ldrb	r2, [r7, #3]
    a7ca:	7bfb      	ldrb	r3, [r7, #15]
    a7cc:	4611      	mov	r1, r2
    a7ce:	4618      	mov	r0, r3
    a7d0:	4b18      	ldr	r3, [pc, #96]	; (a834 <_usb_d_dev_ep_stall_clr+0xd0>)
    a7d2:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    a7d4:	78f9      	ldrb	r1, [r7, #3]
    a7d6:	7bfb      	ldrb	r3, [r7, #15]
    a7d8:	2200      	movs	r2, #0
    a7da:	4618      	mov	r0, r3
    a7dc:	4b16      	ldr	r3, [pc, #88]	; (a838 <_usb_d_dev_ep_stall_clr+0xd4>)
    a7de:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a7e0:	687b      	ldr	r3, [r7, #4]
    a7e2:	7cdb      	ldrb	r3, [r3, #19]
    a7e4:	f003 0307 	and.w	r3, r3, #7
    a7e8:	b2db      	uxtb	r3, r3
    a7ea:	2b01      	cmp	r3, #1
    a7ec:	d110      	bne.n	a810 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    a7ee:	7bfb      	ldrb	r3, [r7, #15]
    a7f0:	4619      	mov	r1, r3
    a7f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a7f6:	4b11      	ldr	r3, [pc, #68]	; (a83c <_usb_d_dev_ep_stall_clr+0xd8>)
    a7f8:	4798      	blx	r3
    a7fa:	4603      	mov	r3, r0
    a7fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
    a800:	2b00      	cmp	r3, #0
    a802:	d10a      	bne.n	a81a <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    a804:	687a      	ldr	r2, [r7, #4]
    a806:	7cd3      	ldrb	r3, [r2, #19]
    a808:	f36f 03c3 	bfc	r3, #3, #1
    a80c:	74d3      	strb	r3, [r2, #19]
    a80e:	e004      	b.n	a81a <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    a810:	687a      	ldr	r2, [r7, #4]
    a812:	7cd3      	ldrb	r3, [r2, #19]
    a814:	f36f 03c3 	bfc	r3, #3, #1
    a818:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    a81a:	2300      	movs	r3, #0
}
    a81c:	4618      	mov	r0, r3
    a81e:	3710      	adds	r7, #16
    a820:	46bd      	mov	sp, r7
    a822:	bd80      	pop	{r7, pc}
    a824:	00008dd5 	.word	0x00008dd5
    a828:	00008d7d 	.word	0x00008d7d
    a82c:	00008d25 	.word	0x00008d25
    a830:	00008e19 	.word	0x00008e19
    a834:	00008e5d 	.word	0x00008e5d
    a838:	00008f49 	.word	0x00008f49
    a83c:	00008805 	.word	0x00008805

0000a840 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    a840:	b580      	push	{r7, lr}
    a842:	b086      	sub	sp, #24
    a844:	af00      	add	r7, sp, #0
    a846:	4603      	mov	r3, r0
    a848:	460a      	mov	r2, r1
    a84a:	71fb      	strb	r3, [r7, #7]
    a84c:	4613      	mov	r3, r2
    a84e:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    a850:	79fb      	ldrb	r3, [r7, #7]
    a852:	f003 030f 	and.w	r3, r3, #15
    a856:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a858:	79fb      	ldrb	r3, [r7, #7]
    a85a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a85e:	2b00      	cmp	r3, #0
    a860:	bf14      	ite	ne
    a862:	2301      	movne	r3, #1
    a864:	2300      	moveq	r3, #0
    a866:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a868:	7cba      	ldrb	r2, [r7, #18]
    a86a:	7cfb      	ldrb	r3, [r7, #19]
    a86c:	4611      	mov	r1, r2
    a86e:	4618      	mov	r0, r3
    a870:	4b13      	ldr	r3, [pc, #76]	; (a8c0 <_usb_d_dev_ep_stall+0x80>)
    a872:	4798      	blx	r3
    a874:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a876:	7cfb      	ldrb	r3, [r7, #19]
    a878:	2b04      	cmp	r3, #4
    a87a:	d902      	bls.n	a882 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    a87c:	f06f 0311 	mvn.w	r3, #17
    a880:	e01a      	b.n	a8b8 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    a882:	79bb      	ldrb	r3, [r7, #6]
    a884:	2b01      	cmp	r3, #1
    a886:	d106      	bne.n	a896 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    a888:	7cbb      	ldrb	r3, [r7, #18]
    a88a:	4619      	mov	r1, r3
    a88c:	68f8      	ldr	r0, [r7, #12]
    a88e:	4b0d      	ldr	r3, [pc, #52]	; (a8c4 <_usb_d_dev_ep_stall+0x84>)
    a890:	4798      	blx	r3
    a892:	6178      	str	r0, [r7, #20]
    a894:	e00f      	b.n	a8b6 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    a896:	79bb      	ldrb	r3, [r7, #6]
    a898:	2b00      	cmp	r3, #0
    a89a:	d106      	bne.n	a8aa <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a89c:	7cbb      	ldrb	r3, [r7, #18]
    a89e:	4619      	mov	r1, r3
    a8a0:	68f8      	ldr	r0, [r7, #12]
    a8a2:	4b09      	ldr	r3, [pc, #36]	; (a8c8 <_usb_d_dev_ep_stall+0x88>)
    a8a4:	4798      	blx	r3
    a8a6:	6178      	str	r0, [r7, #20]
    a8a8:	e005      	b.n	a8b6 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    a8aa:	7cbb      	ldrb	r3, [r7, #18]
    a8ac:	4619      	mov	r1, r3
    a8ae:	68f8      	ldr	r0, [r7, #12]
    a8b0:	4b06      	ldr	r3, [pc, #24]	; (a8cc <_usb_d_dev_ep_stall+0x8c>)
    a8b2:	4798      	blx	r3
    a8b4:	6178      	str	r0, [r7, #20]
	}
	return rc;
    a8b6:	697b      	ldr	r3, [r7, #20]
}
    a8b8:	4618      	mov	r0, r3
    a8ba:	3718      	adds	r7, #24
    a8bc:	46bd      	mov	sp, r7
    a8be:	bd80      	pop	{r7, pc}
    a8c0:	000092e1 	.word	0x000092e1
    a8c4:	0000a715 	.word	0x0000a715
    a8c8:	0000a765 	.word	0x0000a765
    a8cc:	0000a6e5 	.word	0x0000a6e5

0000a8d0 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    a8d0:	b580      	push	{r7, lr}
    a8d2:	b082      	sub	sp, #8
    a8d4:	af00      	add	r7, sp, #0
    a8d6:	6078      	str	r0, [r7, #4]
    a8d8:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a8da:	687b      	ldr	r3, [r7, #4]
    a8dc:	7c9b      	ldrb	r3, [r3, #18]
    a8de:	2bff      	cmp	r3, #255	; 0xff
    a8e0:	d014      	beq.n	a90c <_usb_d_dev_trans_done+0x3c>
    a8e2:	687b      	ldr	r3, [r7, #4]
    a8e4:	7cdb      	ldrb	r3, [r3, #19]
    a8e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a8ea:	b2db      	uxtb	r3, r3
    a8ec:	2b00      	cmp	r3, #0
    a8ee:	d00d      	beq.n	a90c <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    a8f0:	687a      	ldr	r2, [r7, #4]
    a8f2:	7cd3      	ldrb	r3, [r2, #19]
    a8f4:	f36f 1386 	bfc	r3, #6, #1
    a8f8:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    a8fa:	4b06      	ldr	r3, [pc, #24]	; (a914 <_usb_d_dev_trans_done+0x44>)
    a8fc:	691b      	ldr	r3, [r3, #16]
    a8fe:	687a      	ldr	r2, [r7, #4]
    a900:	7c90      	ldrb	r0, [r2, #18]
    a902:	687a      	ldr	r2, [r7, #4]
    a904:	6892      	ldr	r2, [r2, #8]
    a906:	6839      	ldr	r1, [r7, #0]
    a908:	4798      	blx	r3
    a90a:	e000      	b.n	a90e <_usb_d_dev_trans_done+0x3e>
		return;
    a90c:	bf00      	nop
}
    a90e:	3708      	adds	r7, #8
    a910:	46bd      	mov	sp, r7
    a912:	bd80      	pop	{r7, pc}
    a914:	20000d88 	.word	0x20000d88

0000a918 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    a918:	b580      	push	{r7, lr}
    a91a:	b086      	sub	sp, #24
    a91c:	af00      	add	r7, sp, #0
    a91e:	60f8      	str	r0, [r7, #12]
    a920:	460b      	mov	r3, r1
    a922:	607a      	str	r2, [r7, #4]
    a924:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a926:	68fb      	ldr	r3, [r7, #12]
    a928:	7c9b      	ldrb	r3, [r3, #18]
    a92a:	f003 030f 	and.w	r3, r3, #15
    a92e:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    a930:	4b1f      	ldr	r3, [pc, #124]	; (a9b0 <_usb_d_dev_trans_stop+0x98>)
    a932:	881b      	ldrh	r3, [r3, #0]
    a934:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a936:	68fb      	ldr	r3, [r7, #12]
    a938:	7c9b      	ldrb	r3, [r3, #18]
    a93a:	2bff      	cmp	r3, #255	; 0xff
    a93c:	d033      	beq.n	a9a6 <_usb_d_dev_trans_stop+0x8e>
    a93e:	68fb      	ldr	r3, [r7, #12]
    a940:	7cdb      	ldrb	r3, [r3, #19]
    a942:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a946:	b2db      	uxtb	r3, r3
    a948:	2b00      	cmp	r3, #0
    a94a:	d02c      	beq.n	a9a6 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    a94c:	7afb      	ldrb	r3, [r7, #11]
    a94e:	2b00      	cmp	r3, #0
    a950:	d006      	beq.n	a960 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a952:	7dfb      	ldrb	r3, [r7, #23]
    a954:	2200      	movs	r2, #0
    a956:	2101      	movs	r1, #1
    a958:	4618      	mov	r0, r3
    a95a:	4b16      	ldr	r3, [pc, #88]	; (a9b4 <_usb_d_dev_trans_stop+0x9c>)
    a95c:	4798      	blx	r3
    a95e:	e005      	b.n	a96c <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a960:	7dfb      	ldrb	r3, [r7, #23]
    a962:	2200      	movs	r2, #0
    a964:	2100      	movs	r1, #0
    a966:	4618      	mov	r0, r3
    a968:	4b13      	ldr	r3, [pc, #76]	; (a9b8 <_usb_d_dev_trans_stop+0xa0>)
    a96a:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    a96c:	7afb      	ldrb	r3, [r7, #11]
    a96e:	f107 0218 	add.w	r2, r7, #24
    a972:	4413      	add	r3, r2
    a974:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a978:	461a      	mov	r2, r3
    a97a:	7dfb      	ldrb	r3, [r7, #23]
    a97c:	4611      	mov	r1, r2
    a97e:	4618      	mov	r0, r3
    a980:	4b0e      	ldr	r3, [pc, #56]	; (a9bc <_usb_d_dev_trans_stop+0xa4>)
    a982:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    a984:	7afb      	ldrb	r3, [r7, #11]
    a986:	f107 0218 	add.w	r2, r7, #24
    a98a:	4413      	add	r3, r2
    a98c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a990:	461a      	mov	r2, r3
    a992:	7dfb      	ldrb	r3, [r7, #23]
    a994:	4611      	mov	r1, r2
    a996:	4618      	mov	r0, r3
    a998:	4b09      	ldr	r3, [pc, #36]	; (a9c0 <_usb_d_dev_trans_stop+0xa8>)
    a99a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    a99c:	6879      	ldr	r1, [r7, #4]
    a99e:	68f8      	ldr	r0, [r7, #12]
    a9a0:	4b08      	ldr	r3, [pc, #32]	; (a9c4 <_usb_d_dev_trans_stop+0xac>)
    a9a2:	4798      	blx	r3
    a9a4:	e000      	b.n	a9a8 <_usb_d_dev_trans_stop+0x90>
		return;
    a9a6:	bf00      	nop
}
    a9a8:	3718      	adds	r7, #24
    a9aa:	46bd      	mov	sp, r7
    a9ac:	bd80      	pop	{r7, pc}
    a9ae:	bf00      	nop
    a9b0:	0000f128 	.word	0x0000f128
    a9b4:	000091cd 	.word	0x000091cd
    a9b8:	00009225 	.word	0x00009225
    a9bc:	00008cd5 	.word	0x00008cd5
    a9c0:	00008d25 	.word	0x00008d25
    a9c4:	0000a8d1 	.word	0x0000a8d1

0000a9c8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    a9c8:	b580      	push	{r7, lr}
    a9ca:	b086      	sub	sp, #24
    a9cc:	af00      	add	r7, sp, #0
    a9ce:	4603      	mov	r3, r0
    a9d0:	6039      	str	r1, [r7, #0]
    a9d2:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    a9d4:	79fb      	ldrb	r3, [r7, #7]
    a9d6:	f003 030f 	and.w	r3, r3, #15
    a9da:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    a9dc:	7dfb      	ldrb	r3, [r7, #23]
    a9de:	015b      	lsls	r3, r3, #5
    a9e0:	4a1e      	ldr	r2, [pc, #120]	; (aa5c <_usb_d_dev_ep_read_req+0x94>)
    a9e2:	4413      	add	r3, r2
    a9e4:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    a9e6:	693b      	ldr	r3, [r7, #16]
    a9e8:	681b      	ldr	r3, [r3, #0]
    a9ea:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    a9ec:	693b      	ldr	r3, [r7, #16]
    a9ee:	685b      	ldr	r3, [r3, #4]
    a9f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a9f4:	b29b      	uxth	r3, r3
    a9f6:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    a9f8:	7dfb      	ldrb	r3, [r7, #23]
    a9fa:	2b04      	cmp	r3, #4
    a9fc:	d802      	bhi.n	aa04 <_usb_d_dev_ep_read_req+0x3c>
    a9fe:	683b      	ldr	r3, [r7, #0]
    aa00:	2b00      	cmp	r3, #0
    aa02:	d102      	bne.n	aa0a <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    aa04:	f06f 0311 	mvn.w	r3, #17
    aa08:	e023      	b.n	aa52 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    aa0a:	7dfb      	ldrb	r3, [r7, #23]
    aa0c:	4618      	mov	r0, r3
    aa0e:	4b14      	ldr	r3, [pc, #80]	; (aa60 <_usb_d_dev_ep_read_req+0x98>)
    aa10:	4798      	blx	r3
    aa12:	4603      	mov	r3, r0
    aa14:	f083 0301 	eor.w	r3, r3, #1
    aa18:	b2db      	uxtb	r3, r3
    aa1a:	2b00      	cmp	r3, #0
    aa1c:	d002      	beq.n	aa24 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    aa1e:	f06f 0312 	mvn.w	r3, #18
    aa22:	e016      	b.n	aa52 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    aa24:	7dfb      	ldrb	r3, [r7, #23]
    aa26:	4618      	mov	r0, r3
    aa28:	4b0e      	ldr	r3, [pc, #56]	; (aa64 <_usb_d_dev_ep_read_req+0x9c>)
    aa2a:	4798      	blx	r3
    aa2c:	4603      	mov	r3, r0
    aa2e:	f083 0301 	eor.w	r3, r3, #1
    aa32:	b2db      	uxtb	r3, r3
    aa34:	2b00      	cmp	r3, #0
    aa36:	d001      	beq.n	aa3c <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    aa38:	2300      	movs	r3, #0
    aa3a:	e00a      	b.n	aa52 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    aa3c:	68fb      	ldr	r3, [r7, #12]
    aa3e:	2208      	movs	r2, #8
    aa40:	4619      	mov	r1, r3
    aa42:	6838      	ldr	r0, [r7, #0]
    aa44:	4b08      	ldr	r3, [pc, #32]	; (aa68 <_usb_d_dev_ep_read_req+0xa0>)
    aa46:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    aa48:	7dfb      	ldrb	r3, [r7, #23]
    aa4a:	4618      	mov	r0, r3
    aa4c:	4b07      	ldr	r3, [pc, #28]	; (aa6c <_usb_d_dev_ep_read_req+0xa4>)
    aa4e:	4798      	blx	r3

	return bytes;
    aa50:	897b      	ldrh	r3, [r7, #10]
}
    aa52:	4618      	mov	r0, r3
    aa54:	3718      	adds	r7, #24
    aa56:	46bd      	mov	sp, r7
    aa58:	bd80      	pop	{r7, pc}
    aa5a:	bf00      	nop
    aa5c:	20000e50 	.word	0x20000e50
    aa60:	00008d4d 	.word	0x00008d4d
    aa64:	00008ef9 	.word	0x00008ef9
    aa68:	0000eaa1 	.word	0x0000eaa1
    aa6c:	00008f29 	.word	0x00008f29

0000aa70 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    aa70:	b580      	push	{r7, lr}
    aa72:	b086      	sub	sp, #24
    aa74:	af00      	add	r7, sp, #0
    aa76:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    aa78:	687b      	ldr	r3, [r7, #4]
    aa7a:	7a1b      	ldrb	r3, [r3, #8]
    aa7c:	f003 030f 	and.w	r3, r3, #15
    aa80:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    aa82:	687b      	ldr	r3, [r7, #4]
    aa84:	7a1b      	ldrb	r3, [r3, #8]
    aa86:	f003 0380 	and.w	r3, r3, #128	; 0x80
    aa8a:	2b00      	cmp	r3, #0
    aa8c:	bf14      	ite	ne
    aa8e:	2301      	movne	r3, #1
    aa90:	2300      	moveq	r3, #0
    aa92:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    aa94:	7d7a      	ldrb	r2, [r7, #21]
    aa96:	7dbb      	ldrb	r3, [r7, #22]
    aa98:	4611      	mov	r1, r2
    aa9a:	4618      	mov	r0, r3
    aa9c:	4b5f      	ldr	r3, [pc, #380]	; (ac1c <_usb_d_dev_ep_trans+0x1ac>)
    aa9e:	4798      	blx	r3
    aaa0:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    aaa2:	693b      	ldr	r3, [r7, #16]
    aaa4:	8a1b      	ldrh	r3, [r3, #16]
    aaa6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    aaaa:	4293      	cmp	r3, r2
    aaac:	d004      	beq.n	aab8 <_usb_d_dev_ep_trans+0x48>
    aaae:	693b      	ldr	r3, [r7, #16]
    aab0:	8a1b      	ldrh	r3, [r3, #16]
    aab2:	3b01      	subs	r3, #1
    aab4:	b29b      	uxth	r3, r3
    aab6:	e001      	b.n	aabc <_usb_d_dev_ep_trans+0x4c>
    aab8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    aabc:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    aabe:	687b      	ldr	r3, [r7, #4]
    aac0:	685a      	ldr	r2, [r3, #4]
    aac2:	89fb      	ldrh	r3, [r7, #14]
    aac4:	4013      	ands	r3, r2
    aac6:	2b00      	cmp	r3, #0
    aac8:	bf14      	ite	ne
    aaca:	2301      	movne	r3, #1
    aacc:	2300      	moveq	r3, #0
    aace:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    aad0:	2300      	movs	r3, #0
    aad2:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    aad4:	7dbb      	ldrb	r3, [r7, #22]
    aad6:	2b04      	cmp	r3, #4
    aad8:	d902      	bls.n	aae0 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    aada:	f06f 0311 	mvn.w	r3, #17
    aade:	e098      	b.n	ac12 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    aae0:	687b      	ldr	r3, [r7, #4]
    aae2:	681b      	ldr	r3, [r3, #0]
    aae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    aae8:	d31a      	bcc.n	ab20 <_usb_d_dev_ep_trans+0xb0>
    aaea:	687b      	ldr	r3, [r7, #4]
    aaec:	681b      	ldr	r3, [r3, #0]
    aaee:	461a      	mov	r2, r3
    aaf0:	687b      	ldr	r3, [r7, #4]
    aaf2:	685b      	ldr	r3, [r3, #4]
    aaf4:	4413      	add	r3, r2
    aaf6:	4a4a      	ldr	r2, [pc, #296]	; (ac20 <_usb_d_dev_ep_trans+0x1b0>)
    aaf8:	4293      	cmp	r3, r2
    aafa:	d811      	bhi.n	ab20 <_usb_d_dev_ep_trans+0xb0>
    aafc:	687b      	ldr	r3, [r7, #4]
    aafe:	681b      	ldr	r3, [r3, #0]
    ab00:	f003 0303 	and.w	r3, r3, #3
    ab04:	2b00      	cmp	r3, #0
    ab06:	d10b      	bne.n	ab20 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    ab08:	7d7b      	ldrb	r3, [r7, #21]
    ab0a:	f083 0301 	eor.w	r3, r3, #1
    ab0e:	b2db      	uxtb	r3, r3
    ab10:	2b00      	cmp	r3, #0
    ab12:	d00e      	beq.n	ab32 <_usb_d_dev_ep_trans+0xc2>
    ab14:	687b      	ldr	r3, [r7, #4]
    ab16:	685b      	ldr	r3, [r3, #4]
    ab18:	693a      	ldr	r2, [r7, #16]
    ab1a:	8a12      	ldrh	r2, [r2, #16]
    ab1c:	4293      	cmp	r3, r2
    ab1e:	d208      	bcs.n	ab32 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    ab20:	693b      	ldr	r3, [r7, #16]
    ab22:	68db      	ldr	r3, [r3, #12]
    ab24:	2b00      	cmp	r3, #0
    ab26:	d102      	bne.n	ab2e <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    ab28:	f06f 0312 	mvn.w	r3, #18
    ab2c:	e071      	b.n	ac12 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    ab2e:	2301      	movs	r3, #1
    ab30:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    ab32:	7d7b      	ldrb	r3, [r7, #21]
    ab34:	f083 0301 	eor.w	r3, r3, #1
    ab38:	b2db      	uxtb	r3, r3
    ab3a:	2b00      	cmp	r3, #0
    ab3c:	d009      	beq.n	ab52 <_usb_d_dev_ep_trans+0xe2>
    ab3e:	7b7b      	ldrb	r3, [r7, #13]
    ab40:	2b00      	cmp	r3, #0
    ab42:	d006      	beq.n	ab52 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    ab44:	693b      	ldr	r3, [r7, #16]
    ab46:	68db      	ldr	r3, [r3, #12]
    ab48:	2b00      	cmp	r3, #0
    ab4a:	d102      	bne.n	ab52 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    ab4c:	f06f 0311 	mvn.w	r3, #17
    ab50:	e05f      	b.n	ac12 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    ab52:	693b      	ldr	r3, [r7, #16]
    ab54:	7cdb      	ldrb	r3, [r3, #19]
    ab56:	f003 0308 	and.w	r3, r3, #8
    ab5a:	b2db      	uxtb	r3, r3
    ab5c:	2b00      	cmp	r3, #0
    ab5e:	d001      	beq.n	ab64 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    ab60:	2302      	movs	r3, #2
    ab62:	e056      	b.n	ac12 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    ab64:	f107 0308 	add.w	r3, r7, #8
    ab68:	4618      	mov	r0, r3
    ab6a:	4b2e      	ldr	r3, [pc, #184]	; (ac24 <_usb_d_dev_ep_trans+0x1b4>)
    ab6c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    ab6e:	693b      	ldr	r3, [r7, #16]
    ab70:	7cdb      	ldrb	r3, [r3, #19]
    ab72:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ab76:	b2db      	uxtb	r3, r3
    ab78:	2b00      	cmp	r3, #0
    ab7a:	d006      	beq.n	ab8a <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    ab7c:	f107 0308 	add.w	r3, r7, #8
    ab80:	4618      	mov	r0, r3
    ab82:	4b29      	ldr	r3, [pc, #164]	; (ac28 <_usb_d_dev_ep_trans+0x1b8>)
    ab84:	4798      	blx	r3
		return USB_BUSY;
    ab86:	2301      	movs	r3, #1
    ab88:	e043      	b.n	ac12 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    ab8a:	693a      	ldr	r2, [r7, #16]
    ab8c:	7cd3      	ldrb	r3, [r2, #19]
    ab8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ab92:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    ab94:	f107 0308 	add.w	r3, r7, #8
    ab98:	4618      	mov	r0, r3
    ab9a:	4b23      	ldr	r3, [pc, #140]	; (ac28 <_usb_d_dev_ep_trans+0x1b8>)
    ab9c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    ab9e:	687b      	ldr	r3, [r7, #4]
    aba0:	681a      	ldr	r2, [r3, #0]
    aba2:	693b      	ldr	r3, [r7, #16]
    aba4:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    aba6:	687b      	ldr	r3, [r7, #4]
    aba8:	685a      	ldr	r2, [r3, #4]
    abaa:	693b      	ldr	r3, [r7, #16]
    abac:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    abae:	693b      	ldr	r3, [r7, #16]
    abb0:	2200      	movs	r2, #0
    abb2:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    abb4:	693a      	ldr	r2, [r7, #16]
    abb6:	7cd3      	ldrb	r3, [r2, #19]
    abb8:	7d79      	ldrb	r1, [r7, #21]
    abba:	f361 13c7 	bfi	r3, r1, #7, #1
    abbe:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    abc0:	693a      	ldr	r2, [r7, #16]
    abc2:	7cd3      	ldrb	r3, [r2, #19]
    abc4:	7df9      	ldrb	r1, [r7, #23]
    abc6:	f361 1345 	bfi	r3, r1, #5, #1
    abca:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    abcc:	687b      	ldr	r3, [r7, #4]
    abce:	7a5b      	ldrb	r3, [r3, #9]
    abd0:	2b00      	cmp	r3, #0
    abd2:	d007      	beq.n	abe4 <_usb_d_dev_ep_trans+0x174>
    abd4:	7b7b      	ldrb	r3, [r7, #13]
    abd6:	f083 0301 	eor.w	r3, r3, #1
    abda:	b2db      	uxtb	r3, r3
    abdc:	2b00      	cmp	r3, #0
    abde:	d001      	beq.n	abe4 <_usb_d_dev_ep_trans+0x174>
    abe0:	2301      	movs	r3, #1
    abe2:	e000      	b.n	abe6 <_usb_d_dev_ep_trans+0x176>
    abe4:	2300      	movs	r3, #0
    abe6:	b2db      	uxtb	r3, r3
    abe8:	f003 0301 	and.w	r3, r3, #1
    abec:	b2d9      	uxtb	r1, r3
    abee:	693a      	ldr	r2, [r7, #16]
    abf0:	7cd3      	ldrb	r3, [r2, #19]
    abf2:	f361 1304 	bfi	r3, r1, #4, #1
    abf6:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    abf8:	7d7b      	ldrb	r3, [r7, #21]
    abfa:	2b00      	cmp	r3, #0
    abfc:	d004      	beq.n	ac08 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    abfe:	2100      	movs	r1, #0
    ac00:	6938      	ldr	r0, [r7, #16]
    ac02:	4b0a      	ldr	r3, [pc, #40]	; (ac2c <_usb_d_dev_ep_trans+0x1bc>)
    ac04:	4798      	blx	r3
    ac06:	e003      	b.n	ac10 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    ac08:	2100      	movs	r1, #0
    ac0a:	6938      	ldr	r0, [r7, #16]
    ac0c:	4b08      	ldr	r3, [pc, #32]	; (ac30 <_usb_d_dev_ep_trans+0x1c0>)
    ac0e:	4798      	blx	r3
	}

	return ERR_NONE;
    ac10:	2300      	movs	r3, #0
}
    ac12:	4618      	mov	r0, r3
    ac14:	3718      	adds	r7, #24
    ac16:	46bd      	mov	sp, r7
    ac18:	bd80      	pop	{r7, pc}
    ac1a:	bf00      	nop
    ac1c:	000092e1 	.word	0x000092e1
    ac20:	20041fff 	.word	0x20041fff
    ac24:	0000b43d 	.word	0x0000b43d
    ac28:	0000b463 	.word	0x0000b463
    ac2c:	000095a9 	.word	0x000095a9
    ac30:	000097c1 	.word	0x000097c1

0000ac34 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    ac34:	b580      	push	{r7, lr}
    ac36:	b084      	sub	sp, #16
    ac38:	af00      	add	r7, sp, #0
    ac3a:	4603      	mov	r3, r0
    ac3c:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    ac3e:	79fb      	ldrb	r3, [r7, #7]
    ac40:	f003 030f 	and.w	r3, r3, #15
    ac44:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    ac46:	79fb      	ldrb	r3, [r7, #7]
    ac48:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ac4c:	2b00      	cmp	r3, #0
    ac4e:	bf14      	ite	ne
    ac50:	2301      	movne	r3, #1
    ac52:	2300      	moveq	r3, #0
    ac54:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ac56:	7bba      	ldrb	r2, [r7, #14]
    ac58:	7bfb      	ldrb	r3, [r7, #15]
    ac5a:	4611      	mov	r1, r2
    ac5c:	4618      	mov	r0, r3
    ac5e:	4b08      	ldr	r3, [pc, #32]	; (ac80 <_usb_d_dev_ep_abort+0x4c>)
    ac60:	4798      	blx	r3
    ac62:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    ac64:	7bfb      	ldrb	r3, [r7, #15]
    ac66:	2b04      	cmp	r3, #4
    ac68:	d806      	bhi.n	ac78 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    ac6a:	7bbb      	ldrb	r3, [r7, #14]
    ac6c:	2202      	movs	r2, #2
    ac6e:	4619      	mov	r1, r3
    ac70:	68b8      	ldr	r0, [r7, #8]
    ac72:	4b04      	ldr	r3, [pc, #16]	; (ac84 <_usb_d_dev_ep_abort+0x50>)
    ac74:	4798      	blx	r3
    ac76:	e000      	b.n	ac7a <_usb_d_dev_ep_abort+0x46>
		return;
    ac78:	bf00      	nop
}
    ac7a:	3710      	adds	r7, #16
    ac7c:	46bd      	mov	sp, r7
    ac7e:	bd80      	pop	{r7, pc}
    ac80:	000092e1 	.word	0x000092e1
    ac84:	0000a919 	.word	0x0000a919

0000ac88 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    ac88:	b480      	push	{r7}
    ac8a:	b085      	sub	sp, #20
    ac8c:	af00      	add	r7, sp, #0
    ac8e:	4603      	mov	r3, r0
    ac90:	6039      	str	r1, [r7, #0]
    ac92:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    ac94:	683b      	ldr	r3, [r7, #0]
    ac96:	2b00      	cmp	r3, #0
    ac98:	d001      	beq.n	ac9e <_usb_d_dev_register_callback+0x16>
    ac9a:	683b      	ldr	r3, [r7, #0]
    ac9c:	e000      	b.n	aca0 <_usb_d_dev_register_callback+0x18>
    ac9e:	4b0a      	ldr	r3, [pc, #40]	; (acc8 <_usb_d_dev_register_callback+0x40>)
    aca0:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    aca2:	79fb      	ldrb	r3, [r7, #7]
    aca4:	2b01      	cmp	r3, #1
    aca6:	d103      	bne.n	acb0 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    aca8:	4a08      	ldr	r2, [pc, #32]	; (accc <_usb_d_dev_register_callback+0x44>)
    acaa:	68fb      	ldr	r3, [r7, #12]
    acac:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    acae:	e005      	b.n	acbc <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    acb0:	79fb      	ldrb	r3, [r7, #7]
    acb2:	2b00      	cmp	r3, #0
    acb4:	d102      	bne.n	acbc <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    acb6:	4a05      	ldr	r2, [pc, #20]	; (accc <_usb_d_dev_register_callback+0x44>)
    acb8:	68fb      	ldr	r3, [r7, #12]
    acba:	6013      	str	r3, [r2, #0]
}
    acbc:	bf00      	nop
    acbe:	3714      	adds	r7, #20
    acc0:	46bd      	mov	sp, r7
    acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    acc6:	4770      	bx	lr
    acc8:	00008b69 	.word	0x00008b69
    accc:	20000d88 	.word	0x20000d88

0000acd0 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    acd0:	b480      	push	{r7}
    acd2:	b085      	sub	sp, #20
    acd4:	af00      	add	r7, sp, #0
    acd6:	4603      	mov	r3, r0
    acd8:	6039      	str	r1, [r7, #0]
    acda:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    acdc:	683b      	ldr	r3, [r7, #0]
    acde:	2b00      	cmp	r3, #0
    ace0:	d001      	beq.n	ace6 <_usb_d_dev_register_ep_callback+0x16>
    ace2:	683b      	ldr	r3, [r7, #0]
    ace4:	e000      	b.n	ace8 <_usb_d_dev_register_ep_callback+0x18>
    ace6:	4b0e      	ldr	r3, [pc, #56]	; (ad20 <_usb_d_dev_register_ep_callback+0x50>)
    ace8:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    acea:	79fb      	ldrb	r3, [r7, #7]
    acec:	2b00      	cmp	r3, #0
    acee:	d103      	bne.n	acf8 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    acf0:	4a0c      	ldr	r2, [pc, #48]	; (ad24 <_usb_d_dev_register_ep_callback+0x54>)
    acf2:	68fb      	ldr	r3, [r7, #12]
    acf4:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    acf6:	e00c      	b.n	ad12 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    acf8:	79fb      	ldrb	r3, [r7, #7]
    acfa:	2b01      	cmp	r3, #1
    acfc:	d103      	bne.n	ad06 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    acfe:	4a09      	ldr	r2, [pc, #36]	; (ad24 <_usb_d_dev_register_ep_callback+0x54>)
    ad00:	68fb      	ldr	r3, [r7, #12]
    ad02:	60d3      	str	r3, [r2, #12]
}
    ad04:	e005      	b.n	ad12 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    ad06:	79fb      	ldrb	r3, [r7, #7]
    ad08:	2b02      	cmp	r3, #2
    ad0a:	d102      	bne.n	ad12 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    ad0c:	4a05      	ldr	r2, [pc, #20]	; (ad24 <_usb_d_dev_register_ep_callback+0x54>)
    ad0e:	68fb      	ldr	r3, [r7, #12]
    ad10:	6113      	str	r3, [r2, #16]
}
    ad12:	bf00      	nop
    ad14:	3714      	adds	r7, #20
    ad16:	46bd      	mov	sp, r7
    ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad1c:	4770      	bx	lr
    ad1e:	bf00      	nop
    ad20:	00008b69 	.word	0x00008b69
    ad24:	20000d88 	.word	0x20000d88

0000ad28 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    ad28:	b580      	push	{r7, lr}
    ad2a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ad2c:	4b01      	ldr	r3, [pc, #4]	; (ad34 <USB_0_Handler+0xc>)
    ad2e:	4798      	blx	r3
}
    ad30:	bf00      	nop
    ad32:	bd80      	pop	{r7, pc}
    ad34:	00009f99 	.word	0x00009f99

0000ad38 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    ad38:	b580      	push	{r7, lr}
    ad3a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ad3c:	4b01      	ldr	r3, [pc, #4]	; (ad44 <USB_1_Handler+0xc>)
    ad3e:	4798      	blx	r3
}
    ad40:	bf00      	nop
    ad42:	bd80      	pop	{r7, pc}
    ad44:	00009f99 	.word	0x00009f99

0000ad48 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    ad48:	b580      	push	{r7, lr}
    ad4a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ad4c:	4b01      	ldr	r3, [pc, #4]	; (ad54 <USB_2_Handler+0xc>)
    ad4e:	4798      	blx	r3
}
    ad50:	bf00      	nop
    ad52:	bd80      	pop	{r7, pc}
    ad54:	00009f99 	.word	0x00009f99

0000ad58 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    ad58:	b580      	push	{r7, lr}
    ad5a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ad5c:	4b01      	ldr	r3, [pc, #4]	; (ad64 <USB_3_Handler+0xc>)
    ad5e:	4798      	blx	r3
}
    ad60:	bf00      	nop
    ad62:	bd80      	pop	{r7, pc}
    ad64:	00009f99 	.word	0x00009f99

0000ad68 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    ad68:	b480      	push	{r7}
    ad6a:	b083      	sub	sp, #12
    ad6c:	af00      	add	r7, sp, #0
    ad6e:	6078      	str	r0, [r7, #4]
    ad70:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    ad72:	bf00      	nop
    ad74:	687b      	ldr	r3, [r7, #4]
    ad76:	689a      	ldr	r2, [r3, #8]
    ad78:	683b      	ldr	r3, [r7, #0]
    ad7a:	4013      	ands	r3, r2
    ad7c:	2b00      	cmp	r3, #0
    ad7e:	d1f9      	bne.n	ad74 <hri_wdt_wait_for_sync+0xc>
	};
}
    ad80:	bf00      	nop
    ad82:	370c      	adds	r7, #12
    ad84:	46bd      	mov	sp, r7
    ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad8a:	4770      	bx	lr

0000ad8c <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    ad8c:	b580      	push	{r7, lr}
    ad8e:	b084      	sub	sp, #16
    ad90:	af00      	add	r7, sp, #0
    ad92:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ad94:	210e      	movs	r1, #14
    ad96:	6878      	ldr	r0, [r7, #4]
    ad98:	4b0a      	ldr	r3, [pc, #40]	; (adc4 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    ad9a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ad9c:	687b      	ldr	r3, [r7, #4]
    ad9e:	781b      	ldrb	r3, [r3, #0]
    ada0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    ada2:	7bfb      	ldrb	r3, [r7, #15]
    ada4:	085b      	lsrs	r3, r3, #1
    ada6:	b2db      	uxtb	r3, r3
    ada8:	f003 0301 	and.w	r3, r3, #1
    adac:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    adae:	7bfb      	ldrb	r3, [r7, #15]
    adb0:	2b00      	cmp	r3, #0
    adb2:	bf14      	ite	ne
    adb4:	2301      	movne	r3, #1
    adb6:	2300      	moveq	r3, #0
    adb8:	b2db      	uxtb	r3, r3
}
    adba:	4618      	mov	r0, r3
    adbc:	3710      	adds	r7, #16
    adbe:	46bd      	mov	sp, r7
    adc0:	bd80      	pop	{r7, pc}
    adc2:	bf00      	nop
    adc4:	0000ad69 	.word	0x0000ad69

0000adc8 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    adc8:	b580      	push	{r7, lr}
    adca:	b082      	sub	sp, #8
    adcc:	af00      	add	r7, sp, #0
    adce:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    add0:	687b      	ldr	r3, [r7, #4]
    add2:	781b      	ldrb	r3, [r3, #0]
    add4:	b2db      	uxtb	r3, r3
    add6:	f023 0304 	bic.w	r3, r3, #4
    adda:	b2da      	uxtb	r2, r3
    addc:	687b      	ldr	r3, [r7, #4]
    adde:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ade0:	210e      	movs	r1, #14
    ade2:	6878      	ldr	r0, [r7, #4]
    ade4:	4b02      	ldr	r3, [pc, #8]	; (adf0 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    ade6:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    ade8:	bf00      	nop
    adea:	3708      	adds	r7, #8
    adec:	46bd      	mov	sp, r7
    adee:	bd80      	pop	{r7, pc}
    adf0:	0000ad69 	.word	0x0000ad69

0000adf4 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    adf4:	b580      	push	{r7, lr}
    adf6:	b084      	sub	sp, #16
    adf8:	af00      	add	r7, sp, #0
    adfa:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    adfc:	210e      	movs	r1, #14
    adfe:	6878      	ldr	r0, [r7, #4]
    ae00:	4b08      	ldr	r3, [pc, #32]	; (ae24 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    ae02:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ae04:	687b      	ldr	r3, [r7, #4]
    ae06:	781b      	ldrb	r3, [r3, #0]
    ae08:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    ae0a:	7bfb      	ldrb	r3, [r7, #15]
    ae0c:	09db      	lsrs	r3, r3, #7
    ae0e:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ae10:	7bfb      	ldrb	r3, [r7, #15]
    ae12:	2b00      	cmp	r3, #0
    ae14:	bf14      	ite	ne
    ae16:	2301      	movne	r3, #1
    ae18:	2300      	moveq	r3, #0
    ae1a:	b2db      	uxtb	r3, r3
}
    ae1c:	4618      	mov	r0, r3
    ae1e:	3710      	adds	r7, #16
    ae20:	46bd      	mov	sp, r7
    ae22:	bd80      	pop	{r7, pc}
    ae24:	0000ad69 	.word	0x0000ad69

0000ae28 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    ae28:	b480      	push	{r7}
    ae2a:	b085      	sub	sp, #20
    ae2c:	af00      	add	r7, sp, #0
    ae2e:	6078      	str	r0, [r7, #4]
    ae30:	460b      	mov	r3, r1
    ae32:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    ae34:	687b      	ldr	r3, [r7, #4]
    ae36:	785b      	ldrb	r3, [r3, #1]
    ae38:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    ae3a:	7bfb      	ldrb	r3, [r7, #15]
    ae3c:	f023 030f 	bic.w	r3, r3, #15
    ae40:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    ae42:	78fb      	ldrb	r3, [r7, #3]
    ae44:	f003 030f 	and.w	r3, r3, #15
    ae48:	b2da      	uxtb	r2, r3
    ae4a:	7bfb      	ldrb	r3, [r7, #15]
    ae4c:	4313      	orrs	r3, r2
    ae4e:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    ae50:	687b      	ldr	r3, [r7, #4]
    ae52:	7bfa      	ldrb	r2, [r7, #15]
    ae54:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    ae56:	bf00      	nop
    ae58:	3714      	adds	r7, #20
    ae5a:	46bd      	mov	sp, r7
    ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae60:	4770      	bx	lr
	...

0000ae64 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    ae64:	b580      	push	{r7, lr}
    ae66:	b082      	sub	sp, #8
    ae68:	af00      	add	r7, sp, #0
    ae6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    ae6c:	687b      	ldr	r3, [r7, #4]
    ae6e:	2b00      	cmp	r3, #0
    ae70:	d005      	beq.n	ae7e <_wdt_init+0x1a>
    ae72:	687b      	ldr	r3, [r7, #4]
    ae74:	681b      	ldr	r3, [r3, #0]
    ae76:	2b00      	cmp	r3, #0
    ae78:	d001      	beq.n	ae7e <_wdt_init+0x1a>
    ae7a:	2301      	movs	r3, #1
    ae7c:	e000      	b.n	ae80 <_wdt_init+0x1c>
    ae7e:	2300      	movs	r3, #0
    ae80:	f003 0301 	and.w	r3, r3, #1
    ae84:	b2db      	uxtb	r3, r3
    ae86:	2250      	movs	r2, #80	; 0x50
    ae88:	4913      	ldr	r1, [pc, #76]	; (aed8 <_wdt_init+0x74>)
    ae8a:	4618      	mov	r0, r3
    ae8c:	4b13      	ldr	r3, [pc, #76]	; (aedc <_wdt_init+0x78>)
    ae8e:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    ae90:	687b      	ldr	r3, [r7, #4]
    ae92:	681b      	ldr	r3, [r3, #0]
    ae94:	4618      	mov	r0, r3
    ae96:	4b12      	ldr	r3, [pc, #72]	; (aee0 <_wdt_init+0x7c>)
    ae98:	4798      	blx	r3
    ae9a:	4603      	mov	r3, r0
    ae9c:	2b00      	cmp	r3, #0
    ae9e:	d107      	bne.n	aeb0 <_wdt_init+0x4c>
    aea0:	687b      	ldr	r3, [r7, #4]
    aea2:	681b      	ldr	r3, [r3, #0]
    aea4:	4618      	mov	r0, r3
    aea6:	4b0f      	ldr	r3, [pc, #60]	; (aee4 <_wdt_init+0x80>)
    aea8:	4798      	blx	r3
    aeaa:	4603      	mov	r3, r0
    aeac:	2b00      	cmp	r3, #0
    aeae:	d002      	beq.n	aeb6 <_wdt_init+0x52>
		return ERR_DENIED;
    aeb0:	f06f 0310 	mvn.w	r3, #16
    aeb4:	e00b      	b.n	aece <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    aeb6:	687b      	ldr	r3, [r7, #4]
    aeb8:	681b      	ldr	r3, [r3, #0]
    aeba:	4618      	mov	r0, r3
    aebc:	4b0a      	ldr	r3, [pc, #40]	; (aee8 <_wdt_init+0x84>)
    aebe:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    aec0:	687b      	ldr	r3, [r7, #4]
    aec2:	681b      	ldr	r3, [r3, #0]
    aec4:	210b      	movs	r1, #11
    aec6:	4618      	mov	r0, r3
    aec8:	4b08      	ldr	r3, [pc, #32]	; (aeec <_wdt_init+0x88>)
    aeca:	4798      	blx	r3
	}

	return ERR_NONE;
    aecc:	2300      	movs	r3, #0
}
    aece:	4618      	mov	r0, r3
    aed0:	3708      	adds	r7, #8
    aed2:	46bd      	mov	sp, r7
    aed4:	bd80      	pop	{r7, pc}
    aed6:	bf00      	nop
    aed8:	0000f12c 	.word	0x0000f12c
    aedc:	000038b5 	.word	0x000038b5
    aee0:	0000adf5 	.word	0x0000adf5
    aee4:	0000ad8d 	.word	0x0000ad8d
    aee8:	0000adc9 	.word	0x0000adc9
    aeec:	0000ae29 	.word	0x0000ae29

0000aef0 <hri_port_set_DIR_reg>:
{
    aef0:	b480      	push	{r7}
    aef2:	b085      	sub	sp, #20
    aef4:	af00      	add	r7, sp, #0
    aef6:	60f8      	str	r0, [r7, #12]
    aef8:	460b      	mov	r3, r1
    aefa:	607a      	str	r2, [r7, #4]
    aefc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    aefe:	7afb      	ldrb	r3, [r7, #11]
    af00:	68fa      	ldr	r2, [r7, #12]
    af02:	01db      	lsls	r3, r3, #7
    af04:	4413      	add	r3, r2
    af06:	3308      	adds	r3, #8
    af08:	687a      	ldr	r2, [r7, #4]
    af0a:	601a      	str	r2, [r3, #0]
}
    af0c:	bf00      	nop
    af0e:	3714      	adds	r7, #20
    af10:	46bd      	mov	sp, r7
    af12:	f85d 7b04 	ldr.w	r7, [sp], #4
    af16:	4770      	bx	lr

0000af18 <hri_port_clear_DIR_reg>:
{
    af18:	b480      	push	{r7}
    af1a:	b085      	sub	sp, #20
    af1c:	af00      	add	r7, sp, #0
    af1e:	60f8      	str	r0, [r7, #12]
    af20:	460b      	mov	r3, r1
    af22:	607a      	str	r2, [r7, #4]
    af24:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    af26:	7afb      	ldrb	r3, [r7, #11]
    af28:	68fa      	ldr	r2, [r7, #12]
    af2a:	01db      	lsls	r3, r3, #7
    af2c:	4413      	add	r3, r2
    af2e:	3304      	adds	r3, #4
    af30:	687a      	ldr	r2, [r7, #4]
    af32:	601a      	str	r2, [r3, #0]
}
    af34:	bf00      	nop
    af36:	3714      	adds	r7, #20
    af38:	46bd      	mov	sp, r7
    af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    af3e:	4770      	bx	lr

0000af40 <hri_port_set_OUT_reg>:
{
    af40:	b480      	push	{r7}
    af42:	b085      	sub	sp, #20
    af44:	af00      	add	r7, sp, #0
    af46:	60f8      	str	r0, [r7, #12]
    af48:	460b      	mov	r3, r1
    af4a:	607a      	str	r2, [r7, #4]
    af4c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    af4e:	7afb      	ldrb	r3, [r7, #11]
    af50:	68fa      	ldr	r2, [r7, #12]
    af52:	01db      	lsls	r3, r3, #7
    af54:	4413      	add	r3, r2
    af56:	3318      	adds	r3, #24
    af58:	687a      	ldr	r2, [r7, #4]
    af5a:	601a      	str	r2, [r3, #0]
}
    af5c:	bf00      	nop
    af5e:	3714      	adds	r7, #20
    af60:	46bd      	mov	sp, r7
    af62:	f85d 7b04 	ldr.w	r7, [sp], #4
    af66:	4770      	bx	lr

0000af68 <hri_port_clear_OUT_reg>:
{
    af68:	b480      	push	{r7}
    af6a:	b085      	sub	sp, #20
    af6c:	af00      	add	r7, sp, #0
    af6e:	60f8      	str	r0, [r7, #12]
    af70:	460b      	mov	r3, r1
    af72:	607a      	str	r2, [r7, #4]
    af74:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    af76:	7afb      	ldrb	r3, [r7, #11]
    af78:	68fa      	ldr	r2, [r7, #12]
    af7a:	01db      	lsls	r3, r3, #7
    af7c:	4413      	add	r3, r2
    af7e:	3314      	adds	r3, #20
    af80:	687a      	ldr	r2, [r7, #4]
    af82:	601a      	str	r2, [r3, #0]
}
    af84:	bf00      	nop
    af86:	3714      	adds	r7, #20
    af88:	46bd      	mov	sp, r7
    af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    af8e:	4770      	bx	lr

0000af90 <hri_port_write_PMUX_PMUXE_bf>:
{
    af90:	b480      	push	{r7}
    af92:	b085      	sub	sp, #20
    af94:	af00      	add	r7, sp, #0
    af96:	6078      	str	r0, [r7, #4]
    af98:	4608      	mov	r0, r1
    af9a:	4611      	mov	r1, r2
    af9c:	461a      	mov	r2, r3
    af9e:	4603      	mov	r3, r0
    afa0:	70fb      	strb	r3, [r7, #3]
    afa2:	460b      	mov	r3, r1
    afa4:	70bb      	strb	r3, [r7, #2]
    afa6:	4613      	mov	r3, r2
    afa8:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    afaa:	78fa      	ldrb	r2, [r7, #3]
    afac:	78bb      	ldrb	r3, [r7, #2]
    afae:	6879      	ldr	r1, [r7, #4]
    afb0:	01d2      	lsls	r2, r2, #7
    afb2:	440a      	add	r2, r1
    afb4:	4413      	add	r3, r2
    afb6:	3330      	adds	r3, #48	; 0x30
    afb8:	781b      	ldrb	r3, [r3, #0]
    afba:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    afbc:	7bfb      	ldrb	r3, [r7, #15]
    afbe:	f023 030f 	bic.w	r3, r3, #15
    afc2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    afc4:	787b      	ldrb	r3, [r7, #1]
    afc6:	f003 030f 	and.w	r3, r3, #15
    afca:	b2da      	uxtb	r2, r3
    afcc:	7bfb      	ldrb	r3, [r7, #15]
    afce:	4313      	orrs	r3, r2
    afd0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    afd2:	78fa      	ldrb	r2, [r7, #3]
    afd4:	78bb      	ldrb	r3, [r7, #2]
    afd6:	6879      	ldr	r1, [r7, #4]
    afd8:	01d2      	lsls	r2, r2, #7
    afda:	440a      	add	r2, r1
    afdc:	4413      	add	r3, r2
    afde:	3330      	adds	r3, #48	; 0x30
    afe0:	7bfa      	ldrb	r2, [r7, #15]
    afe2:	701a      	strb	r2, [r3, #0]
}
    afe4:	bf00      	nop
    afe6:	3714      	adds	r7, #20
    afe8:	46bd      	mov	sp, r7
    afea:	f85d 7b04 	ldr.w	r7, [sp], #4
    afee:	4770      	bx	lr

0000aff0 <hri_port_write_PMUX_PMUXO_bf>:
{
    aff0:	b480      	push	{r7}
    aff2:	b085      	sub	sp, #20
    aff4:	af00      	add	r7, sp, #0
    aff6:	6078      	str	r0, [r7, #4]
    aff8:	4608      	mov	r0, r1
    affa:	4611      	mov	r1, r2
    affc:	461a      	mov	r2, r3
    affe:	4603      	mov	r3, r0
    b000:	70fb      	strb	r3, [r7, #3]
    b002:	460b      	mov	r3, r1
    b004:	70bb      	strb	r3, [r7, #2]
    b006:	4613      	mov	r3, r2
    b008:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b00a:	78fa      	ldrb	r2, [r7, #3]
    b00c:	78bb      	ldrb	r3, [r7, #2]
    b00e:	6879      	ldr	r1, [r7, #4]
    b010:	01d2      	lsls	r2, r2, #7
    b012:	440a      	add	r2, r1
    b014:	4413      	add	r3, r2
    b016:	3330      	adds	r3, #48	; 0x30
    b018:	781b      	ldrb	r3, [r3, #0]
    b01a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    b01c:	7bfb      	ldrb	r3, [r7, #15]
    b01e:	f003 030f 	and.w	r3, r3, #15
    b022:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    b024:	787b      	ldrb	r3, [r7, #1]
    b026:	011b      	lsls	r3, r3, #4
    b028:	b2da      	uxtb	r2, r3
    b02a:	7bfb      	ldrb	r3, [r7, #15]
    b02c:	4313      	orrs	r3, r2
    b02e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b030:	78fa      	ldrb	r2, [r7, #3]
    b032:	78bb      	ldrb	r3, [r7, #2]
    b034:	6879      	ldr	r1, [r7, #4]
    b036:	01d2      	lsls	r2, r2, #7
    b038:	440a      	add	r2, r1
    b03a:	4413      	add	r3, r2
    b03c:	3330      	adds	r3, #48	; 0x30
    b03e:	7bfa      	ldrb	r2, [r7, #15]
    b040:	701a      	strb	r2, [r3, #0]
}
    b042:	bf00      	nop
    b044:	3714      	adds	r7, #20
    b046:	46bd      	mov	sp, r7
    b048:	f85d 7b04 	ldr.w	r7, [sp], #4
    b04c:	4770      	bx	lr

0000b04e <hri_port_write_PINCFG_PMUXEN_bit>:
{
    b04e:	b480      	push	{r7}
    b050:	b085      	sub	sp, #20
    b052:	af00      	add	r7, sp, #0
    b054:	6078      	str	r0, [r7, #4]
    b056:	4608      	mov	r0, r1
    b058:	4611      	mov	r1, r2
    b05a:	461a      	mov	r2, r3
    b05c:	4603      	mov	r3, r0
    b05e:	70fb      	strb	r3, [r7, #3]
    b060:	460b      	mov	r3, r1
    b062:	70bb      	strb	r3, [r7, #2]
    b064:	4613      	mov	r3, r2
    b066:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    b068:	78fa      	ldrb	r2, [r7, #3]
    b06a:	78bb      	ldrb	r3, [r7, #2]
    b06c:	6879      	ldr	r1, [r7, #4]
    b06e:	01d2      	lsls	r2, r2, #7
    b070:	440a      	add	r2, r1
    b072:	4413      	add	r3, r2
    b074:	3340      	adds	r3, #64	; 0x40
    b076:	781b      	ldrb	r3, [r3, #0]
    b078:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    b07a:	7bfb      	ldrb	r3, [r7, #15]
    b07c:	f023 0301 	bic.w	r3, r3, #1
    b080:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    b082:	787a      	ldrb	r2, [r7, #1]
    b084:	7bfb      	ldrb	r3, [r7, #15]
    b086:	4313      	orrs	r3, r2
    b088:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    b08a:	78fa      	ldrb	r2, [r7, #3]
    b08c:	78bb      	ldrb	r3, [r7, #2]
    b08e:	6879      	ldr	r1, [r7, #4]
    b090:	01d2      	lsls	r2, r2, #7
    b092:	440a      	add	r2, r1
    b094:	4413      	add	r3, r2
    b096:	3340      	adds	r3, #64	; 0x40
    b098:	7bfa      	ldrb	r2, [r7, #15]
    b09a:	701a      	strb	r2, [r3, #0]
}
    b09c:	bf00      	nop
    b09e:	3714      	adds	r7, #20
    b0a0:	46bd      	mov	sp, r7
    b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0a6:	4770      	bx	lr

0000b0a8 <hri_port_write_WRCONFIG_reg>:
{
    b0a8:	b480      	push	{r7}
    b0aa:	b085      	sub	sp, #20
    b0ac:	af00      	add	r7, sp, #0
    b0ae:	60f8      	str	r0, [r7, #12]
    b0b0:	460b      	mov	r3, r1
    b0b2:	607a      	str	r2, [r7, #4]
    b0b4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    b0b6:	7afb      	ldrb	r3, [r7, #11]
    b0b8:	68fa      	ldr	r2, [r7, #12]
    b0ba:	01db      	lsls	r3, r3, #7
    b0bc:	4413      	add	r3, r2
    b0be:	3328      	adds	r3, #40	; 0x28
    b0c0:	687a      	ldr	r2, [r7, #4]
    b0c2:	601a      	str	r2, [r3, #0]
}
    b0c4:	bf00      	nop
    b0c6:	3714      	adds	r7, #20
    b0c8:	46bd      	mov	sp, r7
    b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0ce:	4770      	bx	lr

0000b0d0 <_gpio_set_direction>:
{
    b0d0:	b580      	push	{r7, lr}
    b0d2:	b082      	sub	sp, #8
    b0d4:	af00      	add	r7, sp, #0
    b0d6:	4603      	mov	r3, r0
    b0d8:	6039      	str	r1, [r7, #0]
    b0da:	71fb      	strb	r3, [r7, #7]
    b0dc:	4613      	mov	r3, r2
    b0de:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    b0e0:	79bb      	ldrb	r3, [r7, #6]
    b0e2:	2b01      	cmp	r3, #1
    b0e4:	d01c      	beq.n	b120 <_gpio_set_direction+0x50>
    b0e6:	2b02      	cmp	r3, #2
    b0e8:	d037      	beq.n	b15a <_gpio_set_direction+0x8a>
    b0ea:	2b00      	cmp	r3, #0
    b0ec:	d14e      	bne.n	b18c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b0ee:	79fb      	ldrb	r3, [r7, #7]
    b0f0:	683a      	ldr	r2, [r7, #0]
    b0f2:	4619      	mov	r1, r3
    b0f4:	482a      	ldr	r0, [pc, #168]	; (b1a0 <_gpio_set_direction+0xd0>)
    b0f6:	4b2b      	ldr	r3, [pc, #172]	; (b1a4 <_gpio_set_direction+0xd4>)
    b0f8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b0fa:	683b      	ldr	r3, [r7, #0]
    b0fc:	b29b      	uxth	r3, r3
    b0fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b102:	79fb      	ldrb	r3, [r7, #7]
    b104:	4619      	mov	r1, r3
    b106:	4826      	ldr	r0, [pc, #152]	; (b1a0 <_gpio_set_direction+0xd0>)
    b108:	4b27      	ldr	r3, [pc, #156]	; (b1a8 <_gpio_set_direction+0xd8>)
    b10a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b10c:	683b      	ldr	r3, [r7, #0]
    b10e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b110:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b114:	79fb      	ldrb	r3, [r7, #7]
    b116:	4619      	mov	r1, r3
    b118:	4821      	ldr	r0, [pc, #132]	; (b1a0 <_gpio_set_direction+0xd0>)
    b11a:	4b23      	ldr	r3, [pc, #140]	; (b1a8 <_gpio_set_direction+0xd8>)
    b11c:	4798      	blx	r3
		break;
    b11e:	e03a      	b.n	b196 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b120:	79fb      	ldrb	r3, [r7, #7]
    b122:	683a      	ldr	r2, [r7, #0]
    b124:	4619      	mov	r1, r3
    b126:	481e      	ldr	r0, [pc, #120]	; (b1a0 <_gpio_set_direction+0xd0>)
    b128:	4b1e      	ldr	r3, [pc, #120]	; (b1a4 <_gpio_set_direction+0xd4>)
    b12a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    b12c:	683b      	ldr	r3, [r7, #0]
    b12e:	b29b      	uxth	r3, r3
    b130:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b138:	79f9      	ldrb	r1, [r7, #7]
    b13a:	461a      	mov	r2, r3
    b13c:	4818      	ldr	r0, [pc, #96]	; (b1a0 <_gpio_set_direction+0xd0>)
    b13e:	4b1a      	ldr	r3, [pc, #104]	; (b1a8 <_gpio_set_direction+0xd8>)
    b140:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    b142:	683b      	ldr	r3, [r7, #0]
    b144:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    b146:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    b14a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b14e:	79f9      	ldrb	r1, [r7, #7]
    b150:	461a      	mov	r2, r3
    b152:	4813      	ldr	r0, [pc, #76]	; (b1a0 <_gpio_set_direction+0xd0>)
    b154:	4b14      	ldr	r3, [pc, #80]	; (b1a8 <_gpio_set_direction+0xd8>)
    b156:	4798      	blx	r3
		break;
    b158:	e01d      	b.n	b196 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    b15a:	79fb      	ldrb	r3, [r7, #7]
    b15c:	683a      	ldr	r2, [r7, #0]
    b15e:	4619      	mov	r1, r3
    b160:	480f      	ldr	r0, [pc, #60]	; (b1a0 <_gpio_set_direction+0xd0>)
    b162:	4b12      	ldr	r3, [pc, #72]	; (b1ac <_gpio_set_direction+0xdc>)
    b164:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b166:	683b      	ldr	r3, [r7, #0]
    b168:	b29b      	uxth	r3, r3
    b16a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b16e:	79fb      	ldrb	r3, [r7, #7]
    b170:	4619      	mov	r1, r3
    b172:	480b      	ldr	r0, [pc, #44]	; (b1a0 <_gpio_set_direction+0xd0>)
    b174:	4b0c      	ldr	r3, [pc, #48]	; (b1a8 <_gpio_set_direction+0xd8>)
    b176:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b178:	683b      	ldr	r3, [r7, #0]
    b17a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b17c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b180:	79fb      	ldrb	r3, [r7, #7]
    b182:	4619      	mov	r1, r3
    b184:	4806      	ldr	r0, [pc, #24]	; (b1a0 <_gpio_set_direction+0xd0>)
    b186:	4b08      	ldr	r3, [pc, #32]	; (b1a8 <_gpio_set_direction+0xd8>)
    b188:	4798      	blx	r3
		break;
    b18a:	e004      	b.n	b196 <_gpio_set_direction+0xc6>
		ASSERT(false);
    b18c:	2246      	movs	r2, #70	; 0x46
    b18e:	4908      	ldr	r1, [pc, #32]	; (b1b0 <_gpio_set_direction+0xe0>)
    b190:	2000      	movs	r0, #0
    b192:	4b08      	ldr	r3, [pc, #32]	; (b1b4 <_gpio_set_direction+0xe4>)
    b194:	4798      	blx	r3
}
    b196:	bf00      	nop
    b198:	3708      	adds	r7, #8
    b19a:	46bd      	mov	sp, r7
    b19c:	bd80      	pop	{r7, pc}
    b19e:	bf00      	nop
    b1a0:	41008000 	.word	0x41008000
    b1a4:	0000af19 	.word	0x0000af19
    b1a8:	0000b0a9 	.word	0x0000b0a9
    b1ac:	0000aef1 	.word	0x0000aef1
    b1b0:	0000f144 	.word	0x0000f144
    b1b4:	000038b5 	.word	0x000038b5

0000b1b8 <_gpio_set_level>:
{
    b1b8:	b580      	push	{r7, lr}
    b1ba:	b082      	sub	sp, #8
    b1bc:	af00      	add	r7, sp, #0
    b1be:	4603      	mov	r3, r0
    b1c0:	6039      	str	r1, [r7, #0]
    b1c2:	71fb      	strb	r3, [r7, #7]
    b1c4:	4613      	mov	r3, r2
    b1c6:	71bb      	strb	r3, [r7, #6]
	if (level) {
    b1c8:	79bb      	ldrb	r3, [r7, #6]
    b1ca:	2b00      	cmp	r3, #0
    b1cc:	d006      	beq.n	b1dc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    b1ce:	79fb      	ldrb	r3, [r7, #7]
    b1d0:	683a      	ldr	r2, [r7, #0]
    b1d2:	4619      	mov	r1, r3
    b1d4:	4806      	ldr	r0, [pc, #24]	; (b1f0 <_gpio_set_level+0x38>)
    b1d6:	4b07      	ldr	r3, [pc, #28]	; (b1f4 <_gpio_set_level+0x3c>)
    b1d8:	4798      	blx	r3
}
    b1da:	e005      	b.n	b1e8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    b1dc:	79fb      	ldrb	r3, [r7, #7]
    b1de:	683a      	ldr	r2, [r7, #0]
    b1e0:	4619      	mov	r1, r3
    b1e2:	4803      	ldr	r0, [pc, #12]	; (b1f0 <_gpio_set_level+0x38>)
    b1e4:	4b04      	ldr	r3, [pc, #16]	; (b1f8 <_gpio_set_level+0x40>)
    b1e6:	4798      	blx	r3
}
    b1e8:	bf00      	nop
    b1ea:	3708      	adds	r7, #8
    b1ec:	46bd      	mov	sp, r7
    b1ee:	bd80      	pop	{r7, pc}
    b1f0:	41008000 	.word	0x41008000
    b1f4:	0000af41 	.word	0x0000af41
    b1f8:	0000af69 	.word	0x0000af69

0000b1fc <_gpio_set_pin_function>:
{
    b1fc:	b590      	push	{r4, r7, lr}
    b1fe:	b085      	sub	sp, #20
    b200:	af00      	add	r7, sp, #0
    b202:	6078      	str	r0, [r7, #4]
    b204:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    b206:	687b      	ldr	r3, [r7, #4]
    b208:	095b      	lsrs	r3, r3, #5
    b20a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    b20c:	687b      	ldr	r3, [r7, #4]
    b20e:	b2db      	uxtb	r3, r3
    b210:	f003 031f 	and.w	r3, r3, #31
    b214:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    b216:	683b      	ldr	r3, [r7, #0]
    b218:	f1b3 3fff 	cmp.w	r3, #4294967295
    b21c:	d106      	bne.n	b22c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    b21e:	7bba      	ldrb	r2, [r7, #14]
    b220:	7bf9      	ldrb	r1, [r7, #15]
    b222:	2300      	movs	r3, #0
    b224:	4812      	ldr	r0, [pc, #72]	; (b270 <_gpio_set_pin_function+0x74>)
    b226:	4c13      	ldr	r4, [pc, #76]	; (b274 <_gpio_set_pin_function+0x78>)
    b228:	47a0      	blx	r4
}
    b22a:	e01d      	b.n	b268 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    b22c:	7bba      	ldrb	r2, [r7, #14]
    b22e:	7bf9      	ldrb	r1, [r7, #15]
    b230:	2301      	movs	r3, #1
    b232:	480f      	ldr	r0, [pc, #60]	; (b270 <_gpio_set_pin_function+0x74>)
    b234:	4c0f      	ldr	r4, [pc, #60]	; (b274 <_gpio_set_pin_function+0x78>)
    b236:	47a0      	blx	r4
		if (pin & 1) {
    b238:	7bbb      	ldrb	r3, [r7, #14]
    b23a:	f003 0301 	and.w	r3, r3, #1
    b23e:	2b00      	cmp	r3, #0
    b240:	d009      	beq.n	b256 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    b242:	7bbb      	ldrb	r3, [r7, #14]
    b244:	085b      	lsrs	r3, r3, #1
    b246:	b2da      	uxtb	r2, r3
    b248:	683b      	ldr	r3, [r7, #0]
    b24a:	b2db      	uxtb	r3, r3
    b24c:	7bf9      	ldrb	r1, [r7, #15]
    b24e:	4808      	ldr	r0, [pc, #32]	; (b270 <_gpio_set_pin_function+0x74>)
    b250:	4c09      	ldr	r4, [pc, #36]	; (b278 <_gpio_set_pin_function+0x7c>)
    b252:	47a0      	blx	r4
}
    b254:	e008      	b.n	b268 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    b256:	7bbb      	ldrb	r3, [r7, #14]
    b258:	085b      	lsrs	r3, r3, #1
    b25a:	b2da      	uxtb	r2, r3
    b25c:	683b      	ldr	r3, [r7, #0]
    b25e:	b2db      	uxtb	r3, r3
    b260:	7bf9      	ldrb	r1, [r7, #15]
    b262:	4803      	ldr	r0, [pc, #12]	; (b270 <_gpio_set_pin_function+0x74>)
    b264:	4c05      	ldr	r4, [pc, #20]	; (b27c <_gpio_set_pin_function+0x80>)
    b266:	47a0      	blx	r4
}
    b268:	bf00      	nop
    b26a:	3714      	adds	r7, #20
    b26c:	46bd      	mov	sp, r7
    b26e:	bd90      	pop	{r4, r7, pc}
    b270:	41008000 	.word	0x41008000
    b274:	0000b04f 	.word	0x0000b04f
    b278:	0000aff1 	.word	0x0000aff1
    b27c:	0000af91 	.word	0x0000af91

0000b280 <gpio_set_pin_function>:
{
    b280:	b580      	push	{r7, lr}
    b282:	b082      	sub	sp, #8
    b284:	af00      	add	r7, sp, #0
    b286:	6078      	str	r0, [r7, #4]
    b288:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    b28a:	6839      	ldr	r1, [r7, #0]
    b28c:	6878      	ldr	r0, [r7, #4]
    b28e:	4b03      	ldr	r3, [pc, #12]	; (b29c <gpio_set_pin_function+0x1c>)
    b290:	4798      	blx	r3
}
    b292:	bf00      	nop
    b294:	3708      	adds	r7, #8
    b296:	46bd      	mov	sp, r7
    b298:	bd80      	pop	{r7, pc}
    b29a:	bf00      	nop
    b29c:	0000b1fd 	.word	0x0000b1fd

0000b2a0 <gpio_set_pin_direction>:
{
    b2a0:	b580      	push	{r7, lr}
    b2a2:	b082      	sub	sp, #8
    b2a4:	af00      	add	r7, sp, #0
    b2a6:	4603      	mov	r3, r0
    b2a8:	460a      	mov	r2, r1
    b2aa:	71fb      	strb	r3, [r7, #7]
    b2ac:	4613      	mov	r3, r2
    b2ae:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    b2b0:	79fb      	ldrb	r3, [r7, #7]
    b2b2:	095b      	lsrs	r3, r3, #5
    b2b4:	b2d8      	uxtb	r0, r3
    b2b6:	79fb      	ldrb	r3, [r7, #7]
    b2b8:	f003 031f 	and.w	r3, r3, #31
    b2bc:	2201      	movs	r2, #1
    b2be:	fa02 f303 	lsl.w	r3, r2, r3
    b2c2:	79ba      	ldrb	r2, [r7, #6]
    b2c4:	4619      	mov	r1, r3
    b2c6:	4b03      	ldr	r3, [pc, #12]	; (b2d4 <gpio_set_pin_direction+0x34>)
    b2c8:	4798      	blx	r3
}
    b2ca:	bf00      	nop
    b2cc:	3708      	adds	r7, #8
    b2ce:	46bd      	mov	sp, r7
    b2d0:	bd80      	pop	{r7, pc}
    b2d2:	bf00      	nop
    b2d4:	0000b0d1 	.word	0x0000b0d1

0000b2d8 <gpio_set_pin_level>:
{
    b2d8:	b580      	push	{r7, lr}
    b2da:	b082      	sub	sp, #8
    b2dc:	af00      	add	r7, sp, #0
    b2de:	4603      	mov	r3, r0
    b2e0:	460a      	mov	r2, r1
    b2e2:	71fb      	strb	r3, [r7, #7]
    b2e4:	4613      	mov	r3, r2
    b2e6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    b2e8:	79fb      	ldrb	r3, [r7, #7]
    b2ea:	095b      	lsrs	r3, r3, #5
    b2ec:	b2d8      	uxtb	r0, r3
    b2ee:	79fb      	ldrb	r3, [r7, #7]
    b2f0:	f003 031f 	and.w	r3, r3, #31
    b2f4:	2201      	movs	r2, #1
    b2f6:	fa02 f303 	lsl.w	r3, r2, r3
    b2fa:	79ba      	ldrb	r2, [r7, #6]
    b2fc:	4619      	mov	r1, r3
    b2fe:	4b03      	ldr	r3, [pc, #12]	; (b30c <gpio_set_pin_level+0x34>)
    b300:	4798      	blx	r3
}
    b302:	bf00      	nop
    b304:	3708      	adds	r7, #8
    b306:	46bd      	mov	sp, r7
    b308:	bd80      	pop	{r7, pc}
    b30a:	bf00      	nop
    b30c:	0000b1b9 	.word	0x0000b1b9

0000b310 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    b310:	b580      	push	{r7, lr}
    b312:	b082      	sub	sp, #8
    b314:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    b316:	2100      	movs	r1, #0
    b318:	2008      	movs	r0, #8
    b31a:	4b24      	ldr	r3, [pc, #144]	; (b3ac <QSPI_N25Q256_exit_xip+0x9c>)
    b31c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    b31e:	2100      	movs	r1, #0
    b320:	202b      	movs	r0, #43	; 0x2b
    b322:	4b22      	ldr	r3, [pc, #136]	; (b3ac <QSPI_N25Q256_exit_xip+0x9c>)
    b324:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    b326:	2100      	movs	r1, #0
    b328:	202a      	movs	r0, #42	; 0x2a
    b32a:	4b20      	ldr	r3, [pc, #128]	; (b3ac <QSPI_N25Q256_exit_xip+0x9c>)
    b32c:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    b32e:	2102      	movs	r1, #2
    b330:	2008      	movs	r0, #8
    b332:	4b1f      	ldr	r3, [pc, #124]	; (b3b0 <QSPI_N25Q256_exit_xip+0xa0>)
    b334:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    b336:	2102      	movs	r1, #2
    b338:	202b      	movs	r0, #43	; 0x2b
    b33a:	4b1d      	ldr	r3, [pc, #116]	; (b3b0 <QSPI_N25Q256_exit_xip+0xa0>)
    b33c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    b33e:	2102      	movs	r1, #2
    b340:	202a      	movs	r0, #42	; 0x2a
    b342:	4b1b      	ldr	r3, [pc, #108]	; (b3b0 <QSPI_N25Q256_exit_xip+0xa0>)
    b344:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    b346:	2101      	movs	r1, #1
    b348:	2008      	movs	r0, #8
    b34a:	4b1a      	ldr	r3, [pc, #104]	; (b3b4 <QSPI_N25Q256_exit_xip+0xa4>)
    b34c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    b34e:	2100      	movs	r1, #0
    b350:	202b      	movs	r0, #43	; 0x2b
    b352:	4b18      	ldr	r3, [pc, #96]	; (b3b4 <QSPI_N25Q256_exit_xip+0xa4>)
    b354:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    b356:	2100      	movs	r1, #0
    b358:	202a      	movs	r0, #42	; 0x2a
    b35a:	4b16      	ldr	r3, [pc, #88]	; (b3b4 <QSPI_N25Q256_exit_xip+0xa4>)
    b35c:	4798      	blx	r3

	delay_us(1);
    b35e:	2001      	movs	r0, #1
    b360:	4b15      	ldr	r3, [pc, #84]	; (b3b8 <QSPI_N25Q256_exit_xip+0xa8>)
    b362:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    b364:	2300      	movs	r3, #0
    b366:	607b      	str	r3, [r7, #4]
    b368:	e010      	b.n	b38c <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    b36a:	2101      	movs	r1, #1
    b36c:	202a      	movs	r0, #42	; 0x2a
    b36e:	4b11      	ldr	r3, [pc, #68]	; (b3b4 <QSPI_N25Q256_exit_xip+0xa4>)
    b370:	4798      	blx	r3
		delay_us(1);
    b372:	2001      	movs	r0, #1
    b374:	4b10      	ldr	r3, [pc, #64]	; (b3b8 <QSPI_N25Q256_exit_xip+0xa8>)
    b376:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    b378:	2100      	movs	r1, #0
    b37a:	202a      	movs	r0, #42	; 0x2a
    b37c:	4b0d      	ldr	r3, [pc, #52]	; (b3b4 <QSPI_N25Q256_exit_xip+0xa4>)
    b37e:	4798      	blx	r3
		delay_us(1);
    b380:	2001      	movs	r0, #1
    b382:	4b0d      	ldr	r3, [pc, #52]	; (b3b8 <QSPI_N25Q256_exit_xip+0xa8>)
    b384:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    b386:	687b      	ldr	r3, [r7, #4]
    b388:	3301      	adds	r3, #1
    b38a:	607b      	str	r3, [r7, #4]
    b38c:	687b      	ldr	r3, [r7, #4]
    b38e:	2b06      	cmp	r3, #6
    b390:	ddeb      	ble.n	b36a <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    b392:	2101      	movs	r1, #1
    b394:	202b      	movs	r0, #43	; 0x2b
    b396:	4b07      	ldr	r3, [pc, #28]	; (b3b4 <QSPI_N25Q256_exit_xip+0xa4>)
    b398:	4798      	blx	r3
	delay_us(1);
    b39a:	2001      	movs	r0, #1
    b39c:	4b06      	ldr	r3, [pc, #24]	; (b3b8 <QSPI_N25Q256_exit_xip+0xa8>)
    b39e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    b3a0:	4b06      	ldr	r3, [pc, #24]	; (b3bc <QSPI_N25Q256_exit_xip+0xac>)
    b3a2:	4798      	blx	r3
}
    b3a4:	bf00      	nop
    b3a6:	3708      	adds	r7, #8
    b3a8:	46bd      	mov	sp, r7
    b3aa:	bd80      	pop	{r7, pc}
    b3ac:	0000b281 	.word	0x0000b281
    b3b0:	0000b2a1 	.word	0x0000b2a1
    b3b4:	0000b2d9 	.word	0x0000b2d9
    b3b8:	00002291 	.word	0x00002291
    b3bc:	000015ed 	.word	0x000015ed

0000b3c0 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    b3c0:	b598      	push	{r3, r4, r7, lr}
    b3c2:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    b3c4:	4806      	ldr	r0, [pc, #24]	; (b3e0 <spi_nor_flash_init+0x20>)
    b3c6:	4b07      	ldr	r3, [pc, #28]	; (b3e4 <spi_nor_flash_init+0x24>)
    b3c8:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    b3ca:	2300      	movs	r3, #0
    b3cc:	4a06      	ldr	r2, [pc, #24]	; (b3e8 <spi_nor_flash_init+0x28>)
    b3ce:	4904      	ldr	r1, [pc, #16]	; (b3e0 <spi_nor_flash_init+0x20>)
    b3d0:	4806      	ldr	r0, [pc, #24]	; (b3ec <spi_nor_flash_init+0x2c>)
    b3d2:	4c07      	ldr	r4, [pc, #28]	; (b3f0 <spi_nor_flash_init+0x30>)
    b3d4:	47a0      	blx	r4
    b3d6:	4602      	mov	r2, r0
    b3d8:	4b06      	ldr	r3, [pc, #24]	; (b3f4 <spi_nor_flash_init+0x34>)
    b3da:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    b3dc:	bf00      	nop
    b3de:	bd98      	pop	{r3, r4, r7, pc}
    b3e0:	20001774 	.word	0x20001774
    b3e4:	0000281d 	.word	0x0000281d
    b3e8:	0000b311 	.word	0x0000b311
    b3ec:	20000ef0 	.word	0x20000ef0
    b3f0:	0000b82d 	.word	0x0000b82d
    b3f4:	20001974 	.word	0x20001974

0000b3f8 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b3f8:	b580      	push	{r7, lr}
    b3fa:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b3fc:	4805      	ldr	r0, [pc, #20]	; (b414 <cdc_device_acm_init+0x1c>)
    b3fe:	4b06      	ldr	r3, [pc, #24]	; (b418 <cdc_device_acm_init+0x20>)
    b400:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b402:	4b06      	ldr	r3, [pc, #24]	; (b41c <cdc_device_acm_init+0x24>)
    b404:	4798      	blx	r3

	usbdc_start(single_desc);
    b406:	4806      	ldr	r0, [pc, #24]	; (b420 <cdc_device_acm_init+0x28>)
    b408:	4b06      	ldr	r3, [pc, #24]	; (b424 <cdc_device_acm_init+0x2c>)
    b40a:	4798      	blx	r3
	usbdc_attach();
    b40c:	4b06      	ldr	r3, [pc, #24]	; (b428 <cdc_device_acm_init+0x30>)
    b40e:	4798      	blx	r3
}
    b410:	bf00      	nop
    b412:	bd80      	pop	{r7, pc}
    b414:	20000f40 	.word	0x20000f40
    b418:	0000cf55 	.word	0x0000cf55
    b41c:	0000c1cd 	.word	0x0000c1cd
    b420:	20000200 	.word	0x20000200
    b424:	0000cff1 	.word	0x0000cff1
    b428:	0000d041 	.word	0x0000d041

0000b42c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    b42c:	b580      	push	{r7, lr}
    b42e:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b430:	4b01      	ldr	r3, [pc, #4]	; (b438 <usb_init+0xc>)
    b432:	4798      	blx	r3
}
    b434:	bf00      	nop
    b436:	bd80      	pop	{r7, pc}
    b438:	0000b3f9 	.word	0x0000b3f9

0000b43c <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    b43c:	b480      	push	{r7}
    b43e:	b085      	sub	sp, #20
    b440:	af00      	add	r7, sp, #0
    b442:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b444:	f3ef 8310 	mrs	r3, PRIMASK
    b448:	60fb      	str	r3, [r7, #12]
  return(result);
    b44a:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    b44c:	687b      	ldr	r3, [r7, #4]
    b44e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    b450:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    b452:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    b456:	bf00      	nop
    b458:	3714      	adds	r7, #20
    b45a:	46bd      	mov	sp, r7
    b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b460:	4770      	bx	lr

0000b462 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    b462:	b480      	push	{r7}
    b464:	b085      	sub	sp, #20
    b466:	af00      	add	r7, sp, #0
    b468:	6078      	str	r0, [r7, #4]
    b46a:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    b46e:	687b      	ldr	r3, [r7, #4]
    b470:	681b      	ldr	r3, [r3, #0]
    b472:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    b474:	68fb      	ldr	r3, [r7, #12]
    b476:	f383 8810 	msr	PRIMASK, r3
}
    b47a:	bf00      	nop
    b47c:	3714      	adds	r7, #20
    b47e:	46bd      	mov	sp, r7
    b480:	f85d 7b04 	ldr.w	r7, [sp], #4
    b484:	4770      	bx	lr
	...

0000b488 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    b488:	b580      	push	{r7, lr}
    b48a:	b08c      	sub	sp, #48	; 0x30
    b48c:	af00      	add	r7, sp, #0
    b48e:	6078      	str	r0, [r7, #4]
    b490:	460b      	mov	r3, r1
    b492:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b494:	687b      	ldr	r3, [r7, #4]
    b496:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b498:	687b      	ldr	r3, [r7, #4]
    b49a:	681b      	ldr	r3, [r3, #0]
    b49c:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    b49e:	f107 030c 	add.w	r3, r7, #12
    b4a2:	2200      	movs	r2, #0
    b4a4:	601a      	str	r2, [r3, #0]
    b4a6:	605a      	str	r2, [r3, #4]
    b4a8:	609a      	str	r2, [r3, #8]
    b4aa:	60da      	str	r2, [r3, #12]
    b4ac:	611a      	str	r2, [r3, #16]
    b4ae:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b4b2:	7b1b      	ldrb	r3, [r3, #12]
    b4b4:	2b00      	cmp	r3, #0
    b4b6:	d001      	beq.n	b4bc <n25q256a_xip_confirm+0x34>
    b4b8:	2206      	movs	r2, #6
    b4ba:	e000      	b.n	b4be <n25q256a_xip_confirm+0x36>
    b4bc:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b4be:	7b3b      	ldrb	r3, [r7, #12]
    b4c0:	f362 0302 	bfi	r3, r2, #0, #3
    b4c4:	733b      	strb	r3, [r7, #12]
    b4c6:	7b3b      	ldrb	r3, [r7, #12]
    b4c8:	f043 0310 	orr.w	r3, r3, #16
    b4cc:	733b      	strb	r3, [r7, #12]
    b4ce:	7b3b      	ldrb	r3, [r7, #12]
    b4d0:	f043 0320 	orr.w	r3, r3, #32
    b4d4:	733b      	strb	r3, [r7, #12]
    b4d6:	7b3b      	ldrb	r3, [r7, #12]
    b4d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b4dc:	733b      	strb	r3, [r7, #12]
    b4de:	7b3b      	ldrb	r3, [r7, #12]
    b4e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b4e4:	733b      	strb	r3, [r7, #12]
    b4e6:	7b7b      	ldrb	r3, [r7, #13]
    b4e8:	f043 0303 	orr.w	r3, r3, #3
    b4ec:	737b      	strb	r3, [r7, #13]
    b4ee:	7b7b      	ldrb	r3, [r7, #13]
    b4f0:	2201      	movs	r2, #1
    b4f2:	f362 1305 	bfi	r3, r2, #4, #2
    b4f6:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    b4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b4fa:	7b1b      	ldrb	r3, [r3, #12]
    b4fc:	2b00      	cmp	r3, #0
    b4fe:	d001      	beq.n	b504 <n25q256a_xip_confirm+0x7c>
    b500:	2208      	movs	r2, #8
    b502:	e000      	b.n	b506 <n25q256a_xip_confirm+0x7e>
    b504:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b506:	7bbb      	ldrb	r3, [r7, #14]
    b508:	f362 0304 	bfi	r3, r2, #0, #5
    b50c:	73bb      	strb	r3, [r7, #14]
    b50e:	230b      	movs	r3, #11
    b510:	743b      	strb	r3, [r7, #16]
    b512:	78fb      	ldrb	r3, [r7, #3]
    b514:	2b00      	cmp	r3, #0
    b516:	d001      	beq.n	b51c <n25q256a_xip_confirm+0x94>
    b518:	2300      	movs	r3, #0
    b51a:	e000      	b.n	b51e <n25q256a_xip_confirm+0x96>
    b51c:	23ff      	movs	r3, #255	; 0xff
    b51e:	747b      	strb	r3, [r7, #17]
    b520:	2301      	movs	r3, #1
    b522:	61bb      	str	r3, [r7, #24]
    b524:	f107 0327 	add.w	r3, r7, #39	; 0x27
    b528:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    b52a:	f107 030c 	add.w	r3, r7, #12
    b52e:	4619      	mov	r1, r3
    b530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b532:	4b07      	ldr	r3, [pc, #28]	; (b550 <n25q256a_xip_confirm+0xc8>)
    b534:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    b536:	78fb      	ldrb	r3, [r7, #3]
    b538:	2b00      	cmp	r3, #0
    b53a:	d001      	beq.n	b540 <n25q256a_xip_confirm+0xb8>
    b53c:	2202      	movs	r2, #2
    b53e:	e000      	b.n	b542 <n25q256a_xip_confirm+0xba>
    b540:	2201      	movs	r2, #1
    b542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b544:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b546:	2300      	movs	r3, #0
}
    b548:	4618      	mov	r0, r3
    b54a:	3730      	adds	r7, #48	; 0x30
    b54c:	46bd      	mov	sp, r7
    b54e:	bd80      	pop	{r7, pc}
    b550:	00002895 	.word	0x00002895

0000b554 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    b554:	b580      	push	{r7, lr}
    b556:	b08c      	sub	sp, #48	; 0x30
    b558:	af00      	add	r7, sp, #0
    b55a:	6078      	str	r0, [r7, #4]
    b55c:	460b      	mov	r3, r1
    b55e:	70fb      	strb	r3, [r7, #3]
    b560:	4613      	mov	r3, r2
    b562:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    b564:	2300      	movs	r3, #0
    b566:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    b568:	687b      	ldr	r3, [r7, #4]
    b56a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    b56c:	687b      	ldr	r3, [r7, #4]
    b56e:	681b      	ldr	r3, [r3, #0]
    b570:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    b572:	f107 030c 	add.w	r3, r7, #12
    b576:	2200      	movs	r2, #0
    b578:	601a      	str	r2, [r3, #0]
    b57a:	605a      	str	r2, [r3, #4]
    b57c:	609a      	str	r2, [r3, #8]
    b57e:	60da      	str	r2, [r3, #12]
    b580:	611a      	str	r2, [r3, #16]
    b582:	615a      	str	r2, [r3, #20]
    b584:	78fb      	ldrb	r3, [r7, #3]
    b586:	f003 0307 	and.w	r3, r3, #7
    b58a:	b2da      	uxtb	r2, r3
    b58c:	7b3b      	ldrb	r3, [r7, #12]
    b58e:	f362 0302 	bfi	r3, r2, #0, #3
    b592:	733b      	strb	r3, [r7, #12]
    b594:	7b3b      	ldrb	r3, [r7, #12]
    b596:	f043 0310 	orr.w	r3, r3, #16
    b59a:	733b      	strb	r3, [r7, #12]
    b59c:	7b3b      	ldrb	r3, [r7, #12]
    b59e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b5a2:	733b      	strb	r3, [r7, #12]
    b5a4:	78bb      	ldrb	r3, [r7, #2]
    b5a6:	743b      	strb	r3, [r7, #16]
    b5a8:	2301      	movs	r3, #1
    b5aa:	61bb      	str	r3, [r7, #24]
    b5ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b5b0:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    b5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b5b4:	7b5b      	ldrb	r3, [r3, #13]
    b5b6:	2b00      	cmp	r3, #0
    b5b8:	d003      	beq.n	b5c2 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    b5ba:	2100      	movs	r1, #0
    b5bc:	6878      	ldr	r0, [r7, #4]
    b5be:	4b0a      	ldr	r3, [pc, #40]	; (b5e8 <n25q256a_read_reg+0x94>)
    b5c0:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b5c2:	f107 030c 	add.w	r3, r7, #12
    b5c6:	4619      	mov	r1, r3
    b5c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b5ca:	4b08      	ldr	r3, [pc, #32]	; (b5ec <n25q256a_read_reg+0x98>)
    b5cc:	4798      	blx	r3
	if (n25q->xip_mode) {
    b5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b5d0:	7b5b      	ldrb	r3, [r3, #13]
    b5d2:	2b00      	cmp	r3, #0
    b5d4:	d003      	beq.n	b5de <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    b5d6:	2101      	movs	r1, #1
    b5d8:	6878      	ldr	r0, [r7, #4]
    b5da:	4b03      	ldr	r3, [pc, #12]	; (b5e8 <n25q256a_read_reg+0x94>)
    b5dc:	4798      	blx	r3
	}
	return status;
    b5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b5e0:	4618      	mov	r0, r3
    b5e2:	3730      	adds	r7, #48	; 0x30
    b5e4:	46bd      	mov	sp, r7
    b5e6:	bd80      	pop	{r7, pc}
    b5e8:	0000b489 	.word	0x0000b489
    b5ec:	00002895 	.word	0x00002895

0000b5f0 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    b5f0:	b580      	push	{r7, lr}
    b5f2:	b08c      	sub	sp, #48	; 0x30
    b5f4:	af00      	add	r7, sp, #0
    b5f6:	60f8      	str	r0, [r7, #12]
    b5f8:	607b      	str	r3, [r7, #4]
    b5fa:	460b      	mov	r3, r1
    b5fc:	72fb      	strb	r3, [r7, #11]
    b5fe:	4613      	mov	r3, r2
    b600:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b602:	68fb      	ldr	r3, [r7, #12]
    b604:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b606:	68fb      	ldr	r3, [r7, #12]
    b608:	681b      	ldr	r3, [r3, #0]
    b60a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    b60c:	f107 0310 	add.w	r3, r7, #16
    b610:	2200      	movs	r2, #0
    b612:	601a      	str	r2, [r3, #0]
    b614:	605a      	str	r2, [r3, #4]
    b616:	609a      	str	r2, [r3, #8]
    b618:	60da      	str	r2, [r3, #12]
    b61a:	611a      	str	r2, [r3, #16]
    b61c:	615a      	str	r2, [r3, #20]
    b61e:	7afb      	ldrb	r3, [r7, #11]
    b620:	f003 0307 	and.w	r3, r3, #7
    b624:	b2da      	uxtb	r2, r3
    b626:	7c3b      	ldrb	r3, [r7, #16]
    b628:	f362 0302 	bfi	r3, r2, #0, #3
    b62c:	743b      	strb	r3, [r7, #16]
    b62e:	7c3b      	ldrb	r3, [r7, #16]
    b630:	f043 0310 	orr.w	r3, r3, #16
    b634:	743b      	strb	r3, [r7, #16]
    b636:	7c3b      	ldrb	r3, [r7, #16]
    b638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b63c:	743b      	strb	r3, [r7, #16]
    b63e:	7c7b      	ldrb	r3, [r7, #17]
    b640:	2202      	movs	r2, #2
    b642:	f362 1305 	bfi	r3, r2, #4, #2
    b646:	747b      	strb	r3, [r7, #17]
    b648:	7abb      	ldrb	r3, [r7, #10]
    b64a:	753b      	strb	r3, [r7, #20]
    b64c:	2301      	movs	r3, #1
    b64e:	61fb      	str	r3, [r7, #28]
    b650:	1d3b      	adds	r3, r7, #4
    b652:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    b654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b656:	7b5b      	ldrb	r3, [r3, #13]
    b658:	2b00      	cmp	r3, #0
    b65a:	d003      	beq.n	b664 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    b65c:	2100      	movs	r1, #0
    b65e:	68f8      	ldr	r0, [r7, #12]
    b660:	4b09      	ldr	r3, [pc, #36]	; (b688 <n25q256a_write_reg+0x98>)
    b662:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b664:	f107 0310 	add.w	r3, r7, #16
    b668:	4619      	mov	r1, r3
    b66a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b66c:	4b07      	ldr	r3, [pc, #28]	; (b68c <n25q256a_write_reg+0x9c>)
    b66e:	4798      	blx	r3
	if (n25q->xip_mode) {
    b670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b672:	7b5b      	ldrb	r3, [r3, #13]
    b674:	2b00      	cmp	r3, #0
    b676:	d003      	beq.n	b680 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    b678:	2101      	movs	r1, #1
    b67a:	68f8      	ldr	r0, [r7, #12]
    b67c:	4b02      	ldr	r3, [pc, #8]	; (b688 <n25q256a_write_reg+0x98>)
    b67e:	4798      	blx	r3
	}
}
    b680:	bf00      	nop
    b682:	3730      	adds	r7, #48	; 0x30
    b684:	46bd      	mov	sp, r7
    b686:	bd80      	pop	{r7, pc}
    b688:	0000b489 	.word	0x0000b489
    b68c:	00002895 	.word	0x00002895

0000b690 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    b690:	b580      	push	{r7, lr}
    b692:	b090      	sub	sp, #64	; 0x40
    b694:	af00      	add	r7, sp, #0
    b696:	6078      	str	r0, [r7, #4]
    b698:	460b      	mov	r3, r1
    b69a:	70fb      	strb	r3, [r7, #3]
    b69c:	4613      	mov	r3, r2
    b69e:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b6a0:	687b      	ldr	r3, [r7, #4]
    b6a2:	681b      	ldr	r3, [r3, #0]
    b6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    b6a6:	78bb      	ldrb	r3, [r7, #2]
    b6a8:	2b00      	cmp	r3, #0
    b6aa:	d001      	beq.n	b6b0 <n25q256a_write_enable+0x20>
    b6ac:	2306      	movs	r3, #6
    b6ae:	e000      	b.n	b6b2 <n25q256a_write_enable+0x22>
    b6b0:	2304      	movs	r3, #4
    b6b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    b6b6:	f107 0320 	add.w	r3, r7, #32
    b6ba:	2200      	movs	r2, #0
    b6bc:	601a      	str	r2, [r3, #0]
    b6be:	605a      	str	r2, [r3, #4]
    b6c0:	609a      	str	r2, [r3, #8]
    b6c2:	60da      	str	r2, [r3, #12]
    b6c4:	611a      	str	r2, [r3, #16]
    b6c6:	615a      	str	r2, [r3, #20]
    b6c8:	78fb      	ldrb	r3, [r7, #3]
    b6ca:	f003 0307 	and.w	r3, r3, #7
    b6ce:	b2da      	uxtb	r2, r3
    b6d0:	f897 3020 	ldrb.w	r3, [r7, #32]
    b6d4:	f362 0302 	bfi	r3, r2, #0, #3
    b6d8:	f887 3020 	strb.w	r3, [r7, #32]
    b6dc:	f897 3020 	ldrb.w	r3, [r7, #32]
    b6e0:	f043 0310 	orr.w	r3, r3, #16
    b6e4:	f887 3020 	strb.w	r3, [r7, #32]
    b6e8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    b6ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    b6f0:	f107 0308 	add.w	r3, r7, #8
    b6f4:	2200      	movs	r2, #0
    b6f6:	601a      	str	r2, [r3, #0]
    b6f8:	605a      	str	r2, [r3, #4]
    b6fa:	609a      	str	r2, [r3, #8]
    b6fc:	60da      	str	r2, [r3, #12]
    b6fe:	611a      	str	r2, [r3, #16]
    b700:	615a      	str	r2, [r3, #20]
    b702:	78fb      	ldrb	r3, [r7, #3]
    b704:	f003 0307 	and.w	r3, r3, #7
    b708:	b2da      	uxtb	r2, r3
    b70a:	7a3b      	ldrb	r3, [r7, #8]
    b70c:	f362 0302 	bfi	r3, r2, #0, #3
    b710:	723b      	strb	r3, [r7, #8]
    b712:	7a3b      	ldrb	r3, [r7, #8]
    b714:	f043 0310 	orr.w	r3, r3, #16
    b718:	723b      	strb	r3, [r7, #8]
    b71a:	7a3b      	ldrb	r3, [r7, #8]
    b71c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b720:	723b      	strb	r3, [r7, #8]
    b722:	2305      	movs	r3, #5
    b724:	733b      	strb	r3, [r7, #12]
    b726:	2301      	movs	r3, #1
    b728:	617b      	str	r3, [r7, #20]
    b72a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    b72e:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    b730:	f107 0320 	add.w	r3, r7, #32
    b734:	4619      	mov	r1, r3
    b736:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b738:	4b08      	ldr	r3, [pc, #32]	; (b75c <n25q256a_write_enable+0xcc>)
    b73a:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    b73c:	f107 0308 	add.w	r3, r7, #8
    b740:	4619      	mov	r1, r3
    b742:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b744:	4b05      	ldr	r3, [pc, #20]	; (b75c <n25q256a_write_enable+0xcc>)
    b746:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    b748:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    b74c:	f003 0302 	and.w	r3, r3, #2
    b750:	2b00      	cmp	r3, #0
    b752:	d0ed      	beq.n	b730 <n25q256a_write_enable+0xa0>
}
    b754:	bf00      	nop
    b756:	3740      	adds	r7, #64	; 0x40
    b758:	46bd      	mov	sp, r7
    b75a:	bd80      	pop	{r7, pc}
    b75c:	00002895 	.word	0x00002895

0000b760 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    b760:	b590      	push	{r4, r7, lr}
    b762:	b087      	sub	sp, #28
    b764:	af00      	add	r7, sp, #0
    b766:	6078      	str	r0, [r7, #4]
    b768:	460b      	mov	r3, r1
    b76a:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    b76c:	687b      	ldr	r3, [r7, #4]
    b76e:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b770:	68fb      	ldr	r3, [r7, #12]
    b772:	7b1b      	ldrb	r3, [r3, #12]
    b774:	2b00      	cmp	r3, #0
    b776:	d001      	beq.n	b77c <n25q256a_switch_mode+0x1c>
    b778:	2306      	movs	r3, #6
    b77a:	e000      	b.n	b77e <n25q256a_switch_mode+0x1e>
    b77c:	2300      	movs	r3, #0
    b77e:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b780:	7afb      	ldrb	r3, [r7, #11]
    b782:	2265      	movs	r2, #101	; 0x65
    b784:	4619      	mov	r1, r3
    b786:	6878      	ldr	r0, [r7, #4]
    b788:	4b25      	ldr	r3, [pc, #148]	; (b820 <n25q256a_switch_mode+0xc0>)
    b78a:	4798      	blx	r3
    b78c:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    b78e:	2300      	movs	r3, #0
    b790:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    b792:	68fb      	ldr	r3, [r7, #12]
    b794:	7b1b      	ldrb	r3, [r3, #12]
    b796:	78fa      	ldrb	r2, [r7, #3]
    b798:	429a      	cmp	r2, r3
    b79a:	d03d      	beq.n	b818 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    b79c:	78fb      	ldrb	r3, [r7, #3]
    b79e:	2b00      	cmp	r3, #0
    b7a0:	d00b      	beq.n	b7ba <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    b7a2:	697b      	ldr	r3, [r7, #20]
    b7a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b7a8:	2b00      	cmp	r3, #0
    b7aa:	d011      	beq.n	b7d0 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    b7ac:	697b      	ldr	r3, [r7, #20]
    b7ae:	f003 031f 	and.w	r3, r3, #31
    b7b2:	617b      	str	r3, [r7, #20]
			modify = 1;
    b7b4:	2301      	movs	r3, #1
    b7b6:	74fb      	strb	r3, [r7, #19]
    b7b8:	e00a      	b.n	b7d0 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    b7ba:	697b      	ldr	r3, [r7, #20]
    b7bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b7c0:	2b00      	cmp	r3, #0
    b7c2:	d105      	bne.n	b7d0 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    b7c4:	697b      	ldr	r3, [r7, #20]
    b7c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b7ca:	617b      	str	r3, [r7, #20]
			modify = 1;
    b7cc:	2301      	movs	r3, #1
    b7ce:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    b7d0:	7cfb      	ldrb	r3, [r7, #19]
    b7d2:	2b00      	cmp	r3, #0
    b7d4:	d021      	beq.n	b81a <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    b7d6:	68fb      	ldr	r3, [r7, #12]
    b7d8:	78fa      	ldrb	r2, [r7, #3]
    b7da:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    b7dc:	7afb      	ldrb	r3, [r7, #11]
    b7de:	2201      	movs	r2, #1
    b7e0:	4619      	mov	r1, r3
    b7e2:	6878      	ldr	r0, [r7, #4]
    b7e4:	4b0f      	ldr	r3, [pc, #60]	; (b824 <n25q256a_switch_mode+0xc4>)
    b7e6:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    b7e8:	7af9      	ldrb	r1, [r7, #11]
    b7ea:	697b      	ldr	r3, [r7, #20]
    b7ec:	2261      	movs	r2, #97	; 0x61
    b7ee:	6878      	ldr	r0, [r7, #4]
    b7f0:	4c0d      	ldr	r4, [pc, #52]	; (b828 <n25q256a_switch_mode+0xc8>)
    b7f2:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b7f4:	78fb      	ldrb	r3, [r7, #3]
    b7f6:	2b00      	cmp	r3, #0
    b7f8:	d001      	beq.n	b7fe <n25q256a_switch_mode+0x9e>
    b7fa:	2306      	movs	r3, #6
    b7fc:	e000      	b.n	b800 <n25q256a_switch_mode+0xa0>
    b7fe:	2300      	movs	r3, #0
    b800:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b802:	7afb      	ldrb	r3, [r7, #11]
    b804:	2265      	movs	r2, #101	; 0x65
    b806:	4619      	mov	r1, r3
    b808:	6878      	ldr	r0, [r7, #4]
    b80a:	4b05      	ldr	r3, [pc, #20]	; (b820 <n25q256a_switch_mode+0xc0>)
    b80c:	4798      	blx	r3
    b80e:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    b810:	68fb      	ldr	r3, [r7, #12]
    b812:	78fa      	ldrb	r2, [r7, #3]
    b814:	731a      	strb	r2, [r3, #12]
    b816:	e000      	b.n	b81a <n25q256a_switch_mode+0xba>
		return;
    b818:	bf00      	nop
	}
}
    b81a:	371c      	adds	r7, #28
    b81c:	46bd      	mov	sp, r7
    b81e:	bd90      	pop	{r4, r7, pc}
    b820:	0000b555 	.word	0x0000b555
    b824:	0000b691 	.word	0x0000b691
    b828:	0000b5f1 	.word	0x0000b5f1

0000b82c <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    b82c:	b580      	push	{r7, lr}
    b82e:	b086      	sub	sp, #24
    b830:	af00      	add	r7, sp, #0
    b832:	60f8      	str	r0, [r7, #12]
    b834:	60b9      	str	r1, [r7, #8]
    b836:	607a      	str	r2, [r7, #4]
    b838:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    b83a:	68fb      	ldr	r3, [r7, #12]
    b83c:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    b83e:	4a0c      	ldr	r2, [pc, #48]	; (b870 <n25q256a_construct+0x44>)
    b840:	68b9      	ldr	r1, [r7, #8]
    b842:	68f8      	ldr	r0, [r7, #12]
    b844:	4b0b      	ldr	r3, [pc, #44]	; (b874 <n25q256a_construct+0x48>)
    b846:	4798      	blx	r3
	n25q->quad_mode    = 0;
    b848:	697b      	ldr	r3, [r7, #20]
    b84a:	2200      	movs	r2, #0
    b84c:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    b84e:	697b      	ldr	r3, [r7, #20]
    b850:	2200      	movs	r2, #0
    b852:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    b854:	697b      	ldr	r3, [r7, #20]
    b856:	687a      	ldr	r2, [r7, #4]
    b858:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    b85a:	78fb      	ldrb	r3, [r7, #3]
    b85c:	4619      	mov	r1, r3
    b85e:	68f8      	ldr	r0, [r7, #12]
    b860:	4b05      	ldr	r3, [pc, #20]	; (b878 <n25q256a_construct+0x4c>)
    b862:	4798      	blx	r3
	return me;
    b864:	68fb      	ldr	r3, [r7, #12]
}
    b866:	4618      	mov	r0, r3
    b868:	3718      	adds	r7, #24
    b86a:	46bd      	mov	sp, r7
    b86c:	bd80      	pop	{r7, pc}
    b86e:	bf00      	nop
    b870:	0000f160 	.word	0x0000f160
    b874:	0000bd09 	.word	0x0000bd09
    b878:	0000b761 	.word	0x0000b761

0000b87c <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b87c:	b580      	push	{r7, lr}
    b87e:	b08c      	sub	sp, #48	; 0x30
    b880:	af00      	add	r7, sp, #0
    b882:	60f8      	str	r0, [r7, #12]
    b884:	60b9      	str	r1, [r7, #8]
    b886:	607a      	str	r2, [r7, #4]
    b888:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b88a:	68fb      	ldr	r3, [r7, #12]
    b88c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b88e:	68fb      	ldr	r3, [r7, #12]
    b890:	681b      	ldr	r3, [r3, #0]
    b892:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    b894:	f107 0310 	add.w	r3, r7, #16
    b898:	2200      	movs	r2, #0
    b89a:	601a      	str	r2, [r3, #0]
    b89c:	605a      	str	r2, [r3, #4]
    b89e:	609a      	str	r2, [r3, #8]
    b8a0:	60da      	str	r2, [r3, #12]
    b8a2:	611a      	str	r2, [r3, #16]
    b8a4:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b8a8:	7b1b      	ldrb	r3, [r3, #12]
    b8aa:	2b00      	cmp	r3, #0
    b8ac:	d001      	beq.n	b8b2 <n25q256a_read+0x36>
    b8ae:	2206      	movs	r2, #6
    b8b0:	e000      	b.n	b8b4 <n25q256a_read+0x38>
    b8b2:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    b8b4:	7c3b      	ldrb	r3, [r7, #16]
    b8b6:	f362 0302 	bfi	r3, r2, #0, #3
    b8ba:	743b      	strb	r3, [r7, #16]
    b8bc:	7c3b      	ldrb	r3, [r7, #16]
    b8be:	f043 0310 	orr.w	r3, r3, #16
    b8c2:	743b      	strb	r3, [r7, #16]
    b8c4:	7c3b      	ldrb	r3, [r7, #16]
    b8c6:	f043 0320 	orr.w	r3, r3, #32
    b8ca:	743b      	strb	r3, [r7, #16]
    b8cc:	7c3b      	ldrb	r3, [r7, #16]
    b8ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b8d2:	743b      	strb	r3, [r7, #16]
    b8d4:	7c7b      	ldrb	r3, [r7, #17]
    b8d6:	2201      	movs	r2, #1
    b8d8:	f362 1305 	bfi	r3, r2, #4, #2
    b8dc:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    b8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b8e0:	7b1b      	ldrb	r3, [r3, #12]
    b8e2:	2b00      	cmp	r3, #0
    b8e4:	d001      	beq.n	b8ea <n25q256a_read+0x6e>
    b8e6:	220a      	movs	r2, #10
    b8e8:	e000      	b.n	b8ec <n25q256a_read+0x70>
    b8ea:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    b8ec:	7cbb      	ldrb	r3, [r7, #18]
    b8ee:	f362 0304 	bfi	r3, r2, #0, #5
    b8f2:	74bb      	strb	r3, [r7, #18]
    b8f4:	230b      	movs	r3, #11
    b8f6:	753b      	strb	r3, [r7, #20]
    b8f8:	687b      	ldr	r3, [r7, #4]
    b8fa:	61bb      	str	r3, [r7, #24]
    b8fc:	683b      	ldr	r3, [r7, #0]
    b8fe:	61fb      	str	r3, [r7, #28]
    b900:	68bb      	ldr	r3, [r7, #8]
    b902:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    b904:	f107 0310 	add.w	r3, r7, #16
    b908:	4619      	mov	r1, r3
    b90a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b90c:	4b03      	ldr	r3, [pc, #12]	; (b91c <n25q256a_read+0xa0>)
    b90e:	4798      	blx	r3
	return ERR_NONE;
    b910:	2300      	movs	r3, #0
}
    b912:	4618      	mov	r0, r3
    b914:	3730      	adds	r7, #48	; 0x30
    b916:	46bd      	mov	sp, r7
    b918:	bd80      	pop	{r7, pc}
    b91a:	bf00      	nop
    b91c:	00002895 	.word	0x00002895

0000b920 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b920:	b580      	push	{r7, lr}
    b922:	b08c      	sub	sp, #48	; 0x30
    b924:	af00      	add	r7, sp, #0
    b926:	60f8      	str	r0, [r7, #12]
    b928:	60b9      	str	r1, [r7, #8]
    b92a:	607a      	str	r2, [r7, #4]
    b92c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b92e:	68fb      	ldr	r3, [r7, #12]
    b930:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b932:	68fb      	ldr	r3, [r7, #12]
    b934:	681b      	ldr	r3, [r3, #0]
    b936:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    b938:	f107 0310 	add.w	r3, r7, #16
    b93c:	2200      	movs	r2, #0
    b93e:	601a      	str	r2, [r3, #0]
    b940:	605a      	str	r2, [r3, #4]
    b942:	609a      	str	r2, [r3, #8]
    b944:	60da      	str	r2, [r3, #12]
    b946:	611a      	str	r2, [r3, #16]
    b948:	615a      	str	r2, [r3, #20]
    b94a:	7c3b      	ldrb	r3, [r7, #16]
    b94c:	f043 0310 	orr.w	r3, r3, #16
    b950:	743b      	strb	r3, [r7, #16]
    b952:	7c3b      	ldrb	r3, [r7, #16]
    b954:	f043 0320 	orr.w	r3, r3, #32
    b958:	743b      	strb	r3, [r7, #16]
    b95a:	7c3b      	ldrb	r3, [r7, #16]
    b95c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b960:	743b      	strb	r3, [r7, #16]
    b962:	7c7b      	ldrb	r3, [r7, #17]
    b964:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    b968:	747b      	strb	r3, [r7, #17]
    b96a:	2302      	movs	r3, #2
    b96c:	753b      	strb	r3, [r7, #20]
    b96e:	687b      	ldr	r3, [r7, #4]
    b970:	61bb      	str	r3, [r7, #24]
    b972:	683b      	ldr	r3, [r7, #0]
    b974:	61fb      	str	r3, [r7, #28]
    b976:	68bb      	ldr	r3, [r7, #8]
    b978:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b97c:	7b1b      	ldrb	r3, [r3, #12]
    b97e:	2b00      	cmp	r3, #0
    b980:	d001      	beq.n	b986 <n25q256a_write+0x66>
    b982:	2206      	movs	r2, #6
    b984:	e000      	b.n	b988 <n25q256a_write+0x68>
    b986:	2200      	movs	r2, #0
    b988:	7c3b      	ldrb	r3, [r7, #16]
    b98a:	f362 0302 	bfi	r3, r2, #0, #3
    b98e:	743b      	strb	r3, [r7, #16]
	while (length) {
    b990:	e035      	b.n	b9fe <n25q256a_write+0xde>
		cmd.address = address;
    b992:	687b      	ldr	r3, [r7, #4]
    b994:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    b996:	683b      	ldr	r3, [r7, #0]
    b998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b99c:	d802      	bhi.n	b9a4 <n25q256a_write+0x84>
			cmd.buf_len = length;
    b99e:	683b      	ldr	r3, [r7, #0]
    b9a0:	61fb      	str	r3, [r7, #28]
    b9a2:	e002      	b.n	b9aa <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    b9a4:	f44f 7380 	mov.w	r3, #256	; 0x100
    b9a8:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b9aa:	7c3b      	ldrb	r3, [r7, #16]
    b9ac:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b9b0:	b2db      	uxtb	r3, r3
    b9b2:	2201      	movs	r2, #1
    b9b4:	4619      	mov	r1, r3
    b9b6:	68f8      	ldr	r0, [r7, #12]
    b9b8:	4b19      	ldr	r3, [pc, #100]	; (ba20 <n25q256a_write+0x100>)
    b9ba:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    b9bc:	f107 0310 	add.w	r3, r7, #16
    b9c0:	4619      	mov	r1, r3
    b9c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b9c4:	4b17      	ldr	r3, [pc, #92]	; (ba24 <n25q256a_write+0x104>)
    b9c6:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b9c8:	bf00      	nop
    b9ca:	7c3b      	ldrb	r3, [r7, #16]
    b9cc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b9d0:	b2db      	uxtb	r3, r3
    b9d2:	2270      	movs	r2, #112	; 0x70
    b9d4:	4619      	mov	r1, r3
    b9d6:	68f8      	ldr	r0, [r7, #12]
    b9d8:	4b13      	ldr	r3, [pc, #76]	; (ba28 <n25q256a_write+0x108>)
    b9da:	4798      	blx	r3
    b9dc:	4603      	mov	r3, r0
    b9de:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b9e2:	2b00      	cmp	r3, #0
    b9e4:	d0f1      	beq.n	b9ca <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    b9e6:	6a3a      	ldr	r2, [r7, #32]
    b9e8:	69fb      	ldr	r3, [r7, #28]
    b9ea:	4413      	add	r3, r2
    b9ec:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    b9ee:	69fb      	ldr	r3, [r7, #28]
    b9f0:	683a      	ldr	r2, [r7, #0]
    b9f2:	1ad3      	subs	r3, r2, r3
    b9f4:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    b9f6:	69fb      	ldr	r3, [r7, #28]
    b9f8:	687a      	ldr	r2, [r7, #4]
    b9fa:	4413      	add	r3, r2
    b9fc:	607b      	str	r3, [r7, #4]
	while (length) {
    b9fe:	683b      	ldr	r3, [r7, #0]
    ba00:	2b00      	cmp	r3, #0
    ba02:	d1c6      	bne.n	b992 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    ba04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba06:	7b5b      	ldrb	r3, [r3, #13]
    ba08:	2b00      	cmp	r3, #0
    ba0a:	d003      	beq.n	ba14 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    ba0c:	2101      	movs	r1, #1
    ba0e:	68f8      	ldr	r0, [r7, #12]
    ba10:	4b06      	ldr	r3, [pc, #24]	; (ba2c <n25q256a_write+0x10c>)
    ba12:	4798      	blx	r3
	}
	return ERR_NONE;
    ba14:	2300      	movs	r3, #0
}
    ba16:	4618      	mov	r0, r3
    ba18:	3730      	adds	r7, #48	; 0x30
    ba1a:	46bd      	mov	sp, r7
    ba1c:	bd80      	pop	{r7, pc}
    ba1e:	bf00      	nop
    ba20:	0000b691 	.word	0x0000b691
    ba24:	00002895 	.word	0x00002895
    ba28:	0000b555 	.word	0x0000b555
    ba2c:	0000b489 	.word	0x0000b489

0000ba30 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    ba30:	b580      	push	{r7, lr}
    ba32:	b090      	sub	sp, #64	; 0x40
    ba34:	af00      	add	r7, sp, #0
    ba36:	60f8      	str	r0, [r7, #12]
    ba38:	60b9      	str	r1, [r7, #8]
    ba3a:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ba3c:	68fb      	ldr	r3, [r7, #12]
    ba3e:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ba40:	68fb      	ldr	r3, [r7, #12]
    ba42:	681b      	ldr	r3, [r3, #0]
    ba44:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    ba46:	f107 0314 	add.w	r3, r7, #20
    ba4a:	2200      	movs	r2, #0
    ba4c:	601a      	str	r2, [r3, #0]
    ba4e:	605a      	str	r2, [r3, #4]
    ba50:	609a      	str	r2, [r3, #8]
    ba52:	60da      	str	r2, [r3, #12]
    ba54:	611a      	str	r2, [r3, #16]
    ba56:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    ba58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ba5a:	7b1b      	ldrb	r3, [r3, #12]
    ba5c:	2b00      	cmp	r3, #0
    ba5e:	d001      	beq.n	ba64 <n25q256a_erase+0x34>
    ba60:	2206      	movs	r2, #6
    ba62:	e000      	b.n	ba66 <n25q256a_erase+0x36>
    ba64:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    ba66:	7d3b      	ldrb	r3, [r7, #20]
    ba68:	f362 0302 	bfi	r3, r2, #0, #3
    ba6c:	753b      	strb	r3, [r7, #20]
    ba6e:	7d3b      	ldrb	r3, [r7, #20]
    ba70:	f043 0310 	orr.w	r3, r3, #16
    ba74:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    ba76:	687b      	ldr	r3, [r7, #4]
    ba78:	4a56      	ldr	r2, [pc, #344]	; (bbd4 <n25q256a_erase+0x1a4>)
    ba7a:	4293      	cmp	r3, r2
    ba7c:	bf94      	ite	ls
    ba7e:	2301      	movls	r3, #1
    ba80:	2300      	movhi	r3, #0
    ba82:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    ba84:	7d3b      	ldrb	r3, [r7, #20]
    ba86:	f362 1345 	bfi	r3, r2, #5, #1
    ba8a:	753b      	strb	r3, [r7, #20]
    ba8c:	7d7b      	ldrb	r3, [r7, #21]
    ba8e:	2202      	movs	r2, #2
    ba90:	f362 1305 	bfi	r3, r2, #4, #2
    ba94:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    ba96:	68bb      	ldr	r3, [r7, #8]
    ba98:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    ba9a:	687b      	ldr	r3, [r7, #4]
    ba9c:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    ba9e:	2300      	movs	r3, #0
    baa0:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    baa2:	687b      	ldr	r3, [r7, #4]
    baa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    baa8:	2b00      	cmp	r3, #0
    baaa:	d104      	bne.n	bab6 <n25q256a_erase+0x86>
    baac:	68bb      	ldr	r3, [r7, #8]
    baae:	f3c3 030b 	ubfx	r3, r3, #0, #12
    bab2:	2b00      	cmp	r3, #0
    bab4:	d002      	beq.n	babc <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    bab6:	f06f 030c 	mvn.w	r3, #12
    baba:	e087      	b.n	bbcc <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    babc:	687b      	ldr	r3, [r7, #4]
    babe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    bac2:	d368      	bcc.n	bb96 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    bac4:	23c7      	movs	r3, #199	; 0xc7
    bac6:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bac8:	7d3b      	ldrb	r3, [r7, #20]
    baca:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bace:	b2db      	uxtb	r3, r3
    bad0:	2201      	movs	r2, #1
    bad2:	4619      	mov	r1, r3
    bad4:	68f8      	ldr	r0, [r7, #12]
    bad6:	4b40      	ldr	r3, [pc, #256]	; (bbd8 <n25q256a_erase+0x1a8>)
    bad8:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    bada:	f107 0314 	add.w	r3, r7, #20
    bade:	4619      	mov	r1, r3
    bae0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bae2:	4b3e      	ldr	r3, [pc, #248]	; (bbdc <n25q256a_erase+0x1ac>)
    bae4:	4798      	blx	r3
    bae6:	e059      	b.n	bb9c <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    bae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    baea:	b29b      	uxth	r3, r3
    baec:	2b00      	cmp	r3, #0
    baee:	d11f      	bne.n	bb30 <n25q256a_erase+0x100>
    baf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    baf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    baf6:	d31b      	bcc.n	bb30 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    baf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bafa:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    bafc:	23d8      	movs	r3, #216	; 0xd8
    bafe:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bb00:	7d3b      	ldrb	r3, [r7, #20]
    bb02:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bb06:	b2db      	uxtb	r3, r3
    bb08:	2201      	movs	r2, #1
    bb0a:	4619      	mov	r1, r3
    bb0c:	68f8      	ldr	r0, [r7, #12]
    bb0e:	4b32      	ldr	r3, [pc, #200]	; (bbd8 <n25q256a_erase+0x1a8>)
    bb10:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    bb12:	f107 0314 	add.w	r3, r7, #20
    bb16:	4619      	mov	r1, r3
    bb18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bb1a:	4b30      	ldr	r3, [pc, #192]	; (bbdc <n25q256a_erase+0x1ac>)
    bb1c:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    bb1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bb20:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    bb24:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    bb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bb28:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    bb2c:	63bb      	str	r3, [r7, #56]	; 0x38
    bb2e:	e023      	b.n	bb78 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    bb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bb32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    bb36:	d31b      	bcc.n	bb70 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    bb38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bb3a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    bb3c:	2320      	movs	r3, #32
    bb3e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bb40:	7d3b      	ldrb	r3, [r7, #20]
    bb42:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bb46:	b2db      	uxtb	r3, r3
    bb48:	2201      	movs	r2, #1
    bb4a:	4619      	mov	r1, r3
    bb4c:	68f8      	ldr	r0, [r7, #12]
    bb4e:	4b22      	ldr	r3, [pc, #136]	; (bbd8 <n25q256a_erase+0x1a8>)
    bb50:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    bb52:	f107 0314 	add.w	r3, r7, #20
    bb56:	4619      	mov	r1, r3
    bb58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bb5a:	4b20      	ldr	r3, [pc, #128]	; (bbdc <n25q256a_erase+0x1ac>)
    bb5c:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    bb5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bb60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    bb64:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    bb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bb68:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    bb6c:	63bb      	str	r3, [r7, #56]	; 0x38
    bb6e:	e003      	b.n	bb78 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    bb70:	f06f 030c 	mvn.w	r3, #12
    bb74:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    bb76:	e011      	b.n	bb9c <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bb78:	bf00      	nop
    bb7a:	7d3b      	ldrb	r3, [r7, #20]
    bb7c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bb80:	b2db      	uxtb	r3, r3
    bb82:	2270      	movs	r2, #112	; 0x70
    bb84:	4619      	mov	r1, r3
    bb86:	68f8      	ldr	r0, [r7, #12]
    bb88:	4b15      	ldr	r3, [pc, #84]	; (bbe0 <n25q256a_erase+0x1b0>)
    bb8a:	4798      	blx	r3
    bb8c:	4603      	mov	r3, r0
    bb8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bb92:	2b00      	cmp	r3, #0
    bb94:	d0f1      	beq.n	bb7a <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    bb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bb98:	2b00      	cmp	r3, #0
    bb9a:	d1a5      	bne.n	bae8 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bb9c:	bf00      	nop
    bb9e:	7d3b      	ldrb	r3, [r7, #20]
    bba0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bba4:	b2db      	uxtb	r3, r3
    bba6:	2270      	movs	r2, #112	; 0x70
    bba8:	4619      	mov	r1, r3
    bbaa:	68f8      	ldr	r0, [r7, #12]
    bbac:	4b0c      	ldr	r3, [pc, #48]	; (bbe0 <n25q256a_erase+0x1b0>)
    bbae:	4798      	blx	r3
    bbb0:	4603      	mov	r3, r0
    bbb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bbb6:	2b00      	cmp	r3, #0
    bbb8:	d0f1      	beq.n	bb9e <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    bbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bbbc:	7b5b      	ldrb	r3, [r3, #13]
    bbbe:	2b00      	cmp	r3, #0
    bbc0:	d003      	beq.n	bbca <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    bbc2:	2101      	movs	r1, #1
    bbc4:	68f8      	ldr	r0, [r7, #12]
    bbc6:	4b07      	ldr	r3, [pc, #28]	; (bbe4 <n25q256a_erase+0x1b4>)
    bbc8:	4798      	blx	r3
	}
	return rc;
    bbca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    bbcc:	4618      	mov	r0, r3
    bbce:	3740      	adds	r7, #64	; 0x40
    bbd0:	46bd      	mov	sp, r7
    bbd2:	bd80      	pop	{r7, pc}
    bbd4:	001fffff 	.word	0x001fffff
    bbd8:	0000b691 	.word	0x0000b691
    bbdc:	00002895 	.word	0x00002895
    bbe0:	0000b555 	.word	0x0000b555
    bbe4:	0000b489 	.word	0x0000b489

0000bbe8 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    bbe8:	b590      	push	{r4, r7, lr}
    bbea:	b085      	sub	sp, #20
    bbec:	af00      	add	r7, sp, #0
    bbee:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    bbf0:	687b      	ldr	r3, [r7, #4]
    bbf2:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bbf4:	68fb      	ldr	r3, [r7, #12]
    bbf6:	7b1b      	ldrb	r3, [r3, #12]
    bbf8:	2b00      	cmp	r3, #0
    bbfa:	d001      	beq.n	bc00 <n25q256a_enable_xip+0x18>
    bbfc:	2306      	movs	r3, #6
    bbfe:	e000      	b.n	bc02 <n25q256a_enable_xip+0x1a>
    bc00:	2300      	movs	r3, #0
    bc02:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    bc04:	68fb      	ldr	r3, [r7, #12]
    bc06:	7b5b      	ldrb	r3, [r3, #13]
    bc08:	2b00      	cmp	r3, #0
    bc0a:	d129      	bne.n	bc60 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    bc0c:	7afb      	ldrb	r3, [r7, #11]
    bc0e:	2285      	movs	r2, #133	; 0x85
    bc10:	4619      	mov	r1, r3
    bc12:	6878      	ldr	r0, [r7, #4]
    bc14:	4b15      	ldr	r3, [pc, #84]	; (bc6c <n25q256a_enable_xip+0x84>)
    bc16:	4798      	blx	r3
    bc18:	4603      	mov	r3, r0
    bc1a:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    bc1c:	7abb      	ldrb	r3, [r7, #10]
    bc1e:	f003 0308 	and.w	r3, r3, #8
    bc22:	2b00      	cmp	r3, #0
    bc24:	d015      	beq.n	bc52 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    bc26:	7abb      	ldrb	r3, [r7, #10]
    bc28:	f023 0308 	bic.w	r3, r3, #8
    bc2c:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    bc2e:	7abb      	ldrb	r3, [r7, #10]
    bc30:	7af9      	ldrb	r1, [r7, #11]
    bc32:	2281      	movs	r2, #129	; 0x81
    bc34:	6878      	ldr	r0, [r7, #4]
    bc36:	4c0e      	ldr	r4, [pc, #56]	; (bc70 <n25q256a_enable_xip+0x88>)
    bc38:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bc3a:	bf00      	nop
    bc3c:	7afb      	ldrb	r3, [r7, #11]
    bc3e:	2270      	movs	r2, #112	; 0x70
    bc40:	4619      	mov	r1, r3
    bc42:	6878      	ldr	r0, [r7, #4]
    bc44:	4b09      	ldr	r3, [pc, #36]	; (bc6c <n25q256a_enable_xip+0x84>)
    bc46:	4798      	blx	r3
    bc48:	4603      	mov	r3, r0
    bc4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bc4e:	2b00      	cmp	r3, #0
    bc50:	d0f4      	beq.n	bc3c <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    bc52:	68fb      	ldr	r3, [r7, #12]
    bc54:	2201      	movs	r2, #1
    bc56:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    bc58:	2101      	movs	r1, #1
    bc5a:	6878      	ldr	r0, [r7, #4]
    bc5c:	4b05      	ldr	r3, [pc, #20]	; (bc74 <n25q256a_enable_xip+0x8c>)
    bc5e:	4798      	blx	r3
	}
	return ERR_NONE;
    bc60:	2300      	movs	r3, #0
}
    bc62:	4618      	mov	r0, r3
    bc64:	3714      	adds	r7, #20
    bc66:	46bd      	mov	sp, r7
    bc68:	bd90      	pop	{r4, r7, pc}
    bc6a:	bf00      	nop
    bc6c:	0000b555 	.word	0x0000b555
    bc70:	0000b5f1 	.word	0x0000b5f1
    bc74:	0000b489 	.word	0x0000b489

0000bc78 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    bc78:	b580      	push	{r7, lr}
    bc7a:	b086      	sub	sp, #24
    bc7c:	af00      	add	r7, sp, #0
    bc7e:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bc80:	687b      	ldr	r3, [r7, #4]
    bc82:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bc84:	687b      	ldr	r3, [r7, #4]
    bc86:	681b      	ldr	r3, [r3, #0]
    bc88:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bc8a:	697b      	ldr	r3, [r7, #20]
    bc8c:	7b1b      	ldrb	r3, [r3, #12]
    bc8e:	2b00      	cmp	r3, #0
    bc90:	d001      	beq.n	bc96 <n25q256a_disable_xip+0x1e>
    bc92:	2306      	movs	r3, #6
    bc94:	e000      	b.n	bc98 <n25q256a_disable_xip+0x20>
    bc96:	2300      	movs	r3, #0
    bc98:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    bc9a:	2100      	movs	r1, #0
    bc9c:	6878      	ldr	r0, [r7, #4]
    bc9e:	4b15      	ldr	r3, [pc, #84]	; (bcf4 <n25q256a_disable_xip+0x7c>)
    bca0:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    bca2:	7bfb      	ldrb	r3, [r7, #15]
    bca4:	2285      	movs	r2, #133	; 0x85
    bca6:	4619      	mov	r1, r3
    bca8:	6878      	ldr	r0, [r7, #4]
    bcaa:	4b13      	ldr	r3, [pc, #76]	; (bcf8 <n25q256a_disable_xip+0x80>)
    bcac:	4798      	blx	r3
    bcae:	4603      	mov	r3, r0
    bcb0:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    bcb2:	7bbb      	ldrb	r3, [r7, #14]
    bcb4:	f003 0308 	and.w	r3, r3, #8
    bcb8:	2b00      	cmp	r3, #0
    bcba:	d113      	bne.n	bce4 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    bcbc:	697b      	ldr	r3, [r7, #20]
    bcbe:	689b      	ldr	r3, [r3, #8]
    bcc0:	2b00      	cmp	r3, #0
    bcc2:	d00f      	beq.n	bce4 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    bcc4:	693b      	ldr	r3, [r7, #16]
    bcc6:	681b      	ldr	r3, [r3, #0]
    bcc8:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    bcca:	6938      	ldr	r0, [r7, #16]
    bccc:	4b0b      	ldr	r3, [pc, #44]	; (bcfc <n25q256a_disable_xip+0x84>)
    bcce:	4798      	blx	r3
			n25q->pin_exit_xip();
    bcd0:	697b      	ldr	r3, [r7, #20]
    bcd2:	689b      	ldr	r3, [r3, #8]
    bcd4:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    bcd6:	68b9      	ldr	r1, [r7, #8]
    bcd8:	6938      	ldr	r0, [r7, #16]
    bcda:	4b09      	ldr	r3, [pc, #36]	; (bd00 <n25q256a_disable_xip+0x88>)
    bcdc:	4798      	blx	r3
			qspi_sync_enable(descr);
    bcde:	6938      	ldr	r0, [r7, #16]
    bce0:	4b08      	ldr	r3, [pc, #32]	; (bd04 <n25q256a_disable_xip+0x8c>)
    bce2:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    bce4:	697b      	ldr	r3, [r7, #20]
    bce6:	2200      	movs	r2, #0
    bce8:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    bcea:	2300      	movs	r3, #0
}
    bcec:	4618      	mov	r0, r3
    bcee:	3718      	adds	r7, #24
    bcf0:	46bd      	mov	sp, r7
    bcf2:	bd80      	pop	{r7, pc}
    bcf4:	0000b489 	.word	0x0000b489
    bcf8:	0000b555 	.word	0x0000b555
    bcfc:	00002859 	.word	0x00002859
    bd00:	000027d1 	.word	0x000027d1
    bd04:	0000281d 	.word	0x0000281d

0000bd08 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    bd08:	b480      	push	{r7}
    bd0a:	b085      	sub	sp, #20
    bd0c:	af00      	add	r7, sp, #0
    bd0e:	60f8      	str	r0, [r7, #12]
    bd10:	60b9      	str	r1, [r7, #8]
    bd12:	607a      	str	r2, [r7, #4]
	me->io        = io;
    bd14:	68fb      	ldr	r3, [r7, #12]
    bd16:	68ba      	ldr	r2, [r7, #8]
    bd18:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    bd1a:	68fb      	ldr	r3, [r7, #12]
    bd1c:	687a      	ldr	r2, [r7, #4]
    bd1e:	605a      	str	r2, [r3, #4]

	return me;
    bd20:	68fb      	ldr	r3, [r7, #12]
}
    bd22:	4618      	mov	r0, r3
    bd24:	3714      	adds	r7, #20
    bd26:	46bd      	mov	sp, r7
    bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd2c:	4770      	bx	lr

0000bd2e <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    bd2e:	b480      	push	{r7}
    bd30:	b083      	sub	sp, #12
    bd32:	af00      	add	r7, sp, #0
    bd34:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    bd36:	687b      	ldr	r3, [r7, #4]
    bd38:	781b      	ldrb	r3, [r3, #0]
    bd3a:	b29a      	uxth	r2, r3
    bd3c:	687b      	ldr	r3, [r7, #4]
    bd3e:	3301      	adds	r3, #1
    bd40:	781b      	ldrb	r3, [r3, #0]
    bd42:	b29b      	uxth	r3, r3
    bd44:	021b      	lsls	r3, r3, #8
    bd46:	b29b      	uxth	r3, r3
    bd48:	4413      	add	r3, r2
    bd4a:	b29b      	uxth	r3, r3
}
    bd4c:	4618      	mov	r0, r3
    bd4e:	370c      	adds	r7, #12
    bd50:	46bd      	mov	sp, r7
    bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd56:	4770      	bx	lr

0000bd58 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    bd58:	b480      	push	{r7}
    bd5a:	b083      	sub	sp, #12
    bd5c:	af00      	add	r7, sp, #0
    bd5e:	6078      	str	r0, [r7, #4]
	return desc[0];
    bd60:	687b      	ldr	r3, [r7, #4]
    bd62:	781b      	ldrb	r3, [r3, #0]
}
    bd64:	4618      	mov	r0, r3
    bd66:	370c      	adds	r7, #12
    bd68:	46bd      	mov	sp, r7
    bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd6e:	4770      	bx	lr

0000bd70 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    bd70:	b580      	push	{r7, lr}
    bd72:	b082      	sub	sp, #8
    bd74:	af00      	add	r7, sp, #0
    bd76:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    bd78:	6878      	ldr	r0, [r7, #4]
    bd7a:	4b05      	ldr	r3, [pc, #20]	; (bd90 <usb_desc_next+0x20>)
    bd7c:	4798      	blx	r3
    bd7e:	4603      	mov	r3, r0
    bd80:	461a      	mov	r2, r3
    bd82:	687b      	ldr	r3, [r7, #4]
    bd84:	4413      	add	r3, r2
}
    bd86:	4618      	mov	r0, r3
    bd88:	3708      	adds	r7, #8
    bd8a:	46bd      	mov	sp, r7
    bd8c:	bd80      	pop	{r7, pc}
    bd8e:	bf00      	nop
    bd90:	0000bd59 	.word	0x0000bd59

0000bd94 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bd94:	b580      	push	{r7, lr}
    bd96:	b08c      	sub	sp, #48	; 0x30
    bd98:	af00      	add	r7, sp, #0
    bd9a:	6078      	str	r0, [r7, #4]
    bd9c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bd9e:	687b      	ldr	r3, [r7, #4]
    bda0:	689b      	ldr	r3, [r3, #8]
    bda2:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    bda4:	683b      	ldr	r3, [r7, #0]
    bda6:	681b      	ldr	r3, [r3, #0]
    bda8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bdaa:	2300      	movs	r3, #0
    bdac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bdb0:	e08f      	b.n	bed2 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    bdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bdb4:	2b00      	cmp	r3, #0
    bdb6:	d102      	bne.n	bdbe <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    bdb8:	f06f 0309 	mvn.w	r3, #9
    bdbc:	e092      	b.n	bee4 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    bdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bdc0:	789b      	ldrb	r3, [r3, #2]
    bdc2:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    bdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bdc6:	795b      	ldrb	r3, [r3, #5]
    bdc8:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    bdca:	7c7b      	ldrb	r3, [r7, #17]
    bdcc:	2b02      	cmp	r3, #2
    bdce:	d002      	beq.n	bdd6 <cdcdf_acm_enable+0x42>
    bdd0:	7c7b      	ldrb	r3, [r7, #17]
    bdd2:	2b0a      	cmp	r3, #10
    bdd4:	d121      	bne.n	be1a <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bdd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bdda:	6a3a      	ldr	r2, [r7, #32]
    bddc:	5cd2      	ldrb	r2, [r2, r3]
    bdde:	7bbb      	ldrb	r3, [r7, #14]
    bde0:	429a      	cmp	r2, r3
    bde2:	d102      	bne.n	bdea <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    bde4:	f06f 0311 	mvn.w	r3, #17
    bde8:	e07c      	b.n	bee4 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    bdea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bdee:	6a3a      	ldr	r2, [r7, #32]
    bdf0:	5cd3      	ldrb	r3, [r2, r3]
    bdf2:	2bff      	cmp	r3, #255	; 0xff
    bdf4:	d002      	beq.n	bdfc <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    bdf6:	f06f 031b 	mvn.w	r3, #27
    bdfa:	e073      	b.n	bee4 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    bdfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    be00:	7bb9      	ldrb	r1, [r7, #14]
    be02:	6a3a      	ldr	r2, [r7, #32]
    be04:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    be06:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    be08:	683b      	ldr	r3, [r7, #0]
    be0a:	685b      	ldr	r3, [r3, #4]
    be0c:	2205      	movs	r2, #5
    be0e:	4619      	mov	r1, r3
    be10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    be12:	4b36      	ldr	r3, [pc, #216]	; (beec <cdcdf_acm_enable+0x158>)
    be14:	4798      	blx	r3
    be16:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    be18:	e047      	b.n	beaa <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    be1a:	f06f 0309 	mvn.w	r3, #9
    be1e:	e061      	b.n	bee4 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    be20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    be22:	789b      	ldrb	r3, [r3, #2]
    be24:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    be26:	6abb      	ldr	r3, [r7, #40]	; 0x28
    be28:	78db      	ldrb	r3, [r3, #3]
    be2a:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    be2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    be2e:	3304      	adds	r3, #4
    be30:	4618      	mov	r0, r3
    be32:	4b2f      	ldr	r3, [pc, #188]	; (bef0 <cdcdf_acm_enable+0x15c>)
    be34:	4798      	blx	r3
    be36:	4603      	mov	r3, r0
    be38:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    be3a:	7ebb      	ldrb	r3, [r7, #26]
    be3c:	7ef9      	ldrb	r1, [r7, #27]
    be3e:	8bba      	ldrh	r2, [r7, #28]
    be40:	4618      	mov	r0, r3
    be42:	4b2c      	ldr	r3, [pc, #176]	; (bef4 <cdcdf_acm_enable+0x160>)
    be44:	4798      	blx	r3
    be46:	4603      	mov	r3, r0
    be48:	2b00      	cmp	r3, #0
    be4a:	d002      	beq.n	be52 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    be4c:	f06f 0313 	mvn.w	r3, #19
    be50:	e048      	b.n	bee4 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    be52:	7ebb      	ldrb	r3, [r7, #26]
    be54:	b25b      	sxtb	r3, r3
    be56:	2b00      	cmp	r3, #0
    be58:	da0f      	bge.n	be7a <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    be5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    be5e:	7eb9      	ldrb	r1, [r7, #26]
    be60:	6a3a      	ldr	r2, [r7, #32]
    be62:	4413      	add	r3, r2
    be64:	460a      	mov	r2, r1
    be66:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    be68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    be6c:	6a3a      	ldr	r2, [r7, #32]
    be6e:	4413      	add	r3, r2
    be70:	789b      	ldrb	r3, [r3, #2]
    be72:	4618      	mov	r0, r3
    be74:	4b20      	ldr	r3, [pc, #128]	; (bef8 <cdcdf_acm_enable+0x164>)
    be76:	4798      	blx	r3
    be78:	e007      	b.n	be8a <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    be7a:	7eba      	ldrb	r2, [r7, #26]
    be7c:	6a3b      	ldr	r3, [r7, #32]
    be7e:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    be80:	6a3b      	ldr	r3, [r7, #32]
    be82:	791b      	ldrb	r3, [r3, #4]
    be84:	4618      	mov	r0, r3
    be86:	4b1c      	ldr	r3, [pc, #112]	; (bef8 <cdcdf_acm_enable+0x164>)
    be88:	4798      	blx	r3
			}
			desc->sod = ep;
    be8a:	683b      	ldr	r3, [r7, #0]
    be8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    be8e:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    be90:	683b      	ldr	r3, [r7, #0]
    be92:	681b      	ldr	r3, [r3, #0]
    be94:	4618      	mov	r0, r3
    be96:	4b19      	ldr	r3, [pc, #100]	; (befc <cdcdf_acm_enable+0x168>)
    be98:	4798      	blx	r3
    be9a:	4602      	mov	r2, r0
    be9c:	683b      	ldr	r3, [r7, #0]
    be9e:	685b      	ldr	r3, [r3, #4]
    bea0:	4619      	mov	r1, r3
    bea2:	4610      	mov	r0, r2
    bea4:	4b16      	ldr	r3, [pc, #88]	; (bf00 <cdcdf_acm_enable+0x16c>)
    bea6:	4798      	blx	r3
    bea8:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    beaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    beac:	2b00      	cmp	r3, #0
    beae:	d1b7      	bne.n	be20 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    beb0:	683b      	ldr	r3, [r7, #0]
    beb2:	681b      	ldr	r3, [r3, #0]
    beb4:	4618      	mov	r0, r3
    beb6:	4b11      	ldr	r3, [pc, #68]	; (befc <cdcdf_acm_enable+0x168>)
    beb8:	4798      	blx	r3
    beba:	683b      	ldr	r3, [r7, #0]
    bebc:	685b      	ldr	r3, [r3, #4]
    bebe:	2204      	movs	r2, #4
    bec0:	4619      	mov	r1, r3
    bec2:	4b0a      	ldr	r3, [pc, #40]	; (beec <cdcdf_acm_enable+0x158>)
    bec4:	4798      	blx	r3
    bec6:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    becc:	3301      	adds	r3, #1
    bece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bed2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bed6:	2b01      	cmp	r3, #1
    bed8:	f67f af6b 	bls.w	bdb2 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    bedc:	4b09      	ldr	r3, [pc, #36]	; (bf04 <cdcdf_acm_enable+0x170>)
    bede:	2201      	movs	r2, #1
    bee0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bee2:	2300      	movs	r3, #0
}
    bee4:	4618      	mov	r0, r3
    bee6:	3730      	adds	r7, #48	; 0x30
    bee8:	46bd      	mov	sp, r7
    beea:	bd80      	pop	{r7, pc}
    beec:	0000d155 	.word	0x0000d155
    bef0:	0000bd2f 	.word	0x0000bd2f
    bef4:	00003449 	.word	0x00003449
    bef8:	00003535 	.word	0x00003535
    befc:	0000bd71 	.word	0x0000bd71
    bf00:	0000d1b1 	.word	0x0000d1b1
    bf04:	20000f8c 	.word	0x20000f8c

0000bf08 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bf08:	b580      	push	{r7, lr}
    bf0a:	b088      	sub	sp, #32
    bf0c:	af00      	add	r7, sp, #0
    bf0e:	6078      	str	r0, [r7, #4]
    bf10:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bf12:	687b      	ldr	r3, [r7, #4]
    bf14:	689b      	ldr	r3, [r3, #8]
    bf16:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    bf18:	683b      	ldr	r3, [r7, #0]
    bf1a:	2b00      	cmp	r3, #0
    bf1c:	d00c      	beq.n	bf38 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    bf1e:	683b      	ldr	r3, [r7, #0]
    bf20:	681b      	ldr	r3, [r3, #0]
    bf22:	795b      	ldrb	r3, [r3, #5]
    bf24:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    bf26:	7c7b      	ldrb	r3, [r7, #17]
    bf28:	2b02      	cmp	r3, #2
    bf2a:	d005      	beq.n	bf38 <cdcdf_acm_disable+0x30>
    bf2c:	7c7b      	ldrb	r3, [r7, #17]
    bf2e:	2b0a      	cmp	r3, #10
    bf30:	d002      	beq.n	bf38 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    bf32:	f06f 0309 	mvn.w	r3, #9
    bf36:	e035      	b.n	bfa4 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    bf38:	2300      	movs	r3, #0
    bf3a:	77fb      	strb	r3, [r7, #31]
    bf3c:	e01f      	b.n	bf7e <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    bf3e:	7ffb      	ldrb	r3, [r7, #31]
    bf40:	69ba      	ldr	r2, [r7, #24]
    bf42:	5cd3      	ldrb	r3, [r2, r3]
    bf44:	2bff      	cmp	r3, #255	; 0xff
    bf46:	d016      	beq.n	bf76 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    bf48:	7ffb      	ldrb	r3, [r7, #31]
    bf4a:	69ba      	ldr	r2, [r7, #24]
    bf4c:	21ff      	movs	r1, #255	; 0xff
    bf4e:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    bf50:	7ffb      	ldrb	r3, [r7, #31]
    bf52:	69ba      	ldr	r2, [r7, #24]
    bf54:	4413      	add	r3, r2
    bf56:	789b      	ldrb	r3, [r3, #2]
    bf58:	2bff      	cmp	r3, #255	; 0xff
    bf5a:	d00d      	beq.n	bf78 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    bf5c:	7ffb      	ldrb	r3, [r7, #31]
    bf5e:	69ba      	ldr	r2, [r7, #24]
    bf60:	4413      	add	r3, r2
    bf62:	789b      	ldrb	r3, [r3, #2]
    bf64:	4618      	mov	r0, r3
    bf66:	4b11      	ldr	r3, [pc, #68]	; (bfac <cdcdf_acm_disable+0xa4>)
    bf68:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    bf6a:	7ffb      	ldrb	r3, [r7, #31]
    bf6c:	69ba      	ldr	r2, [r7, #24]
    bf6e:	4413      	add	r3, r2
    bf70:	22ff      	movs	r2, #255	; 0xff
    bf72:	709a      	strb	r2, [r3, #2]
    bf74:	e000      	b.n	bf78 <cdcdf_acm_disable+0x70>
			continue;
    bf76:	bf00      	nop
	for (i = 0; i < 2; i++) {
    bf78:	7ffb      	ldrb	r3, [r7, #31]
    bf7a:	3301      	adds	r3, #1
    bf7c:	77fb      	strb	r3, [r7, #31]
    bf7e:	7ffb      	ldrb	r3, [r7, #31]
    bf80:	2b01      	cmp	r3, #1
    bf82:	d9dc      	bls.n	bf3e <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    bf84:	69bb      	ldr	r3, [r7, #24]
    bf86:	791b      	ldrb	r3, [r3, #4]
    bf88:	2bff      	cmp	r3, #255	; 0xff
    bf8a:	d007      	beq.n	bf9c <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    bf8c:	69bb      	ldr	r3, [r7, #24]
    bf8e:	791b      	ldrb	r3, [r3, #4]
    bf90:	4618      	mov	r0, r3
    bf92:	4b06      	ldr	r3, [pc, #24]	; (bfac <cdcdf_acm_disable+0xa4>)
    bf94:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    bf96:	69bb      	ldr	r3, [r7, #24]
    bf98:	22ff      	movs	r2, #255	; 0xff
    bf9a:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    bf9c:	4b04      	ldr	r3, [pc, #16]	; (bfb0 <cdcdf_acm_disable+0xa8>)
    bf9e:	2200      	movs	r2, #0
    bfa0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bfa2:	2300      	movs	r3, #0
}
    bfa4:	4618      	mov	r0, r3
    bfa6:	3720      	adds	r7, #32
    bfa8:	46bd      	mov	sp, r7
    bfaa:	bd80      	pop	{r7, pc}
    bfac:	000034e5 	.word	0x000034e5
    bfb0:	20000f8c 	.word	0x20000f8c

0000bfb4 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    bfb4:	b580      	push	{r7, lr}
    bfb6:	b084      	sub	sp, #16
    bfb8:	af00      	add	r7, sp, #0
    bfba:	60f8      	str	r0, [r7, #12]
    bfbc:	460b      	mov	r3, r1
    bfbe:	607a      	str	r2, [r7, #4]
    bfc0:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    bfc2:	7afb      	ldrb	r3, [r7, #11]
    bfc4:	2b01      	cmp	r3, #1
    bfc6:	d009      	beq.n	bfdc <cdcdf_acm_ctrl+0x28>
    bfc8:	2b02      	cmp	r3, #2
    bfca:	d00d      	beq.n	bfe8 <cdcdf_acm_ctrl+0x34>
    bfcc:	2b00      	cmp	r3, #0
    bfce:	d10e      	bne.n	bfee <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    bfd0:	6879      	ldr	r1, [r7, #4]
    bfd2:	68f8      	ldr	r0, [r7, #12]
    bfd4:	4b09      	ldr	r3, [pc, #36]	; (bffc <cdcdf_acm_ctrl+0x48>)
    bfd6:	4798      	blx	r3
    bfd8:	4603      	mov	r3, r0
    bfda:	e00a      	b.n	bff2 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    bfdc:	6879      	ldr	r1, [r7, #4]
    bfde:	68f8      	ldr	r0, [r7, #12]
    bfe0:	4b07      	ldr	r3, [pc, #28]	; (c000 <cdcdf_acm_ctrl+0x4c>)
    bfe2:	4798      	blx	r3
    bfe4:	4603      	mov	r3, r0
    bfe6:	e004      	b.n	bff2 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    bfe8:	f06f 031a 	mvn.w	r3, #26
    bfec:	e001      	b.n	bff2 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    bfee:	f06f 030c 	mvn.w	r3, #12
	}
}
    bff2:	4618      	mov	r0, r3
    bff4:	3710      	adds	r7, #16
    bff6:	46bd      	mov	sp, r7
    bff8:	bd80      	pop	{r7, pc}
    bffa:	bf00      	nop
    bffc:	0000bd95 	.word	0x0000bd95
    c000:	0000bf09 	.word	0x0000bf09

0000c004 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c004:	b590      	push	{r4, r7, lr}
    c006:	b087      	sub	sp, #28
    c008:	af00      	add	r7, sp, #0
    c00a:	4603      	mov	r3, r0
    c00c:	6039      	str	r1, [r7, #0]
    c00e:	71fb      	strb	r3, [r7, #7]
    c010:	4613      	mov	r3, r2
    c012:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    c014:	683b      	ldr	r3, [r7, #0]
    c016:	799a      	ldrb	r2, [r3, #6]
    c018:	79db      	ldrb	r3, [r3, #7]
    c01a:	021b      	lsls	r3, r3, #8
    c01c:	4313      	orrs	r3, r2
    c01e:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c020:	4b2b      	ldr	r3, [pc, #172]	; (c0d0 <cdcdf_acm_set_req+0xcc>)
    c022:	4798      	blx	r3
    c024:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    c026:	683b      	ldr	r3, [r7, #0]
    c028:	785b      	ldrb	r3, [r3, #1]
    c02a:	2b20      	cmp	r3, #32
    c02c:	d002      	beq.n	c034 <cdcdf_acm_set_req+0x30>
    c02e:	2b22      	cmp	r3, #34	; 0x22
    c030:	d034      	beq.n	c09c <cdcdf_acm_set_req+0x98>
    c032:	e046      	b.n	c0c2 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c034:	8afb      	ldrh	r3, [r7, #22]
    c036:	2b07      	cmp	r3, #7
    c038:	d002      	beq.n	c040 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    c03a:	f04f 33ff 	mov.w	r3, #4294967295
    c03e:	e042      	b.n	c0c6 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    c040:	79bb      	ldrb	r3, [r7, #6]
    c042:	2b00      	cmp	r3, #0
    c044:	d107      	bne.n	c056 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c046:	8afa      	ldrh	r2, [r7, #22]
    c048:	79f8      	ldrb	r0, [r7, #7]
    c04a:	2300      	movs	r3, #0
    c04c:	6939      	ldr	r1, [r7, #16]
    c04e:	4c21      	ldr	r4, [pc, #132]	; (c0d4 <cdcdf_acm_set_req+0xd0>)
    c050:	47a0      	blx	r4
    c052:	4603      	mov	r3, r0
    c054:	e037      	b.n	c0c6 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c056:	693a      	ldr	r2, [r7, #16]
    c058:	f107 0308 	add.w	r3, r7, #8
    c05c:	6810      	ldr	r0, [r2, #0]
    c05e:	6018      	str	r0, [r3, #0]
    c060:	8891      	ldrh	r1, [r2, #4]
    c062:	7992      	ldrb	r2, [r2, #6]
    c064:	8099      	strh	r1, [r3, #4]
    c066:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c068:	4b1b      	ldr	r3, [pc, #108]	; (c0d8 <cdcdf_acm_set_req+0xd4>)
    c06a:	681b      	ldr	r3, [r3, #0]
    c06c:	2b00      	cmp	r3, #0
    c06e:	d008      	beq.n	c082 <cdcdf_acm_set_req+0x7e>
    c070:	4b19      	ldr	r3, [pc, #100]	; (c0d8 <cdcdf_acm_set_req+0xd4>)
    c072:	681b      	ldr	r3, [r3, #0]
    c074:	f107 0208 	add.w	r2, r7, #8
    c078:	4610      	mov	r0, r2
    c07a:	4798      	blx	r3
    c07c:	4603      	mov	r3, r0
    c07e:	2b00      	cmp	r3, #0
    c080:	d00a      	beq.n	c098 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c082:	4b16      	ldr	r3, [pc, #88]	; (c0dc <cdcdf_acm_set_req+0xd8>)
    c084:	f107 0208 	add.w	r2, r7, #8
    c088:	e892 0003 	ldmia.w	r2, {r0, r1}
    c08c:	6018      	str	r0, [r3, #0]
    c08e:	3304      	adds	r3, #4
    c090:	8019      	strh	r1, [r3, #0]
    c092:	3302      	adds	r3, #2
    c094:	0c0a      	lsrs	r2, r1, #16
    c096:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    c098:	2300      	movs	r3, #0
    c09a:	e014      	b.n	c0c6 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    c09c:	2300      	movs	r3, #0
    c09e:	2200      	movs	r2, #0
    c0a0:	2100      	movs	r1, #0
    c0a2:	2000      	movs	r0, #0
    c0a4:	4c0b      	ldr	r4, [pc, #44]	; (c0d4 <cdcdf_acm_set_req+0xd0>)
    c0a6:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    c0a8:	4b0d      	ldr	r3, [pc, #52]	; (c0e0 <cdcdf_acm_set_req+0xdc>)
    c0aa:	681b      	ldr	r3, [r3, #0]
    c0ac:	2b00      	cmp	r3, #0
    c0ae:	d006      	beq.n	c0be <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    c0b0:	4b0b      	ldr	r3, [pc, #44]	; (c0e0 <cdcdf_acm_set_req+0xdc>)
    c0b2:	681b      	ldr	r3, [r3, #0]
    c0b4:	683a      	ldr	r2, [r7, #0]
    c0b6:	8852      	ldrh	r2, [r2, #2]
    c0b8:	b292      	uxth	r2, r2
    c0ba:	4610      	mov	r0, r2
    c0bc:	4798      	blx	r3
		}
		return ERR_NONE;
    c0be:	2300      	movs	r3, #0
    c0c0:	e001      	b.n	c0c6 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    c0c2:	f06f 030c 	mvn.w	r3, #12
	}
}
    c0c6:	4618      	mov	r0, r3
    c0c8:	371c      	adds	r7, #28
    c0ca:	46bd      	mov	sp, r7
    c0cc:	bd90      	pop	{r4, r7, pc}
    c0ce:	bf00      	nop
    c0d0:	0000d051 	.word	0x0000d051
    c0d4:	0000cec5 	.word	0x0000cec5
    c0d8:	20000fa0 	.word	0x20000fa0
    c0dc:	20000f94 	.word	0x20000f94
    c0e0:	20000f9c 	.word	0x20000f9c

0000c0e4 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c0e4:	b590      	push	{r4, r7, lr}
    c0e6:	b085      	sub	sp, #20
    c0e8:	af00      	add	r7, sp, #0
    c0ea:	4603      	mov	r3, r0
    c0ec:	6039      	str	r1, [r7, #0]
    c0ee:	71fb      	strb	r3, [r7, #7]
    c0f0:	4613      	mov	r3, r2
    c0f2:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    c0f4:	683b      	ldr	r3, [r7, #0]
    c0f6:	799a      	ldrb	r2, [r3, #6]
    c0f8:	79db      	ldrb	r3, [r3, #7]
    c0fa:	021b      	lsls	r3, r3, #8
    c0fc:	4313      	orrs	r3, r2
    c0fe:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    c100:	79bb      	ldrb	r3, [r7, #6]
    c102:	2b01      	cmp	r3, #1
    c104:	d101      	bne.n	c10a <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    c106:	2300      	movs	r3, #0
    c108:	e013      	b.n	c132 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    c10a:	683b      	ldr	r3, [r7, #0]
    c10c:	785b      	ldrb	r3, [r3, #1]
    c10e:	2b21      	cmp	r3, #33	; 0x21
    c110:	d10d      	bne.n	c12e <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c112:	89fb      	ldrh	r3, [r7, #14]
    c114:	2b07      	cmp	r3, #7
    c116:	d002      	beq.n	c11e <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    c118:	f04f 33ff 	mov.w	r3, #4294967295
    c11c:	e009      	b.n	c132 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c11e:	89fa      	ldrh	r2, [r7, #14]
    c120:	79f8      	ldrb	r0, [r7, #7]
    c122:	2300      	movs	r3, #0
    c124:	4905      	ldr	r1, [pc, #20]	; (c13c <cdcdf_acm_get_req+0x58>)
    c126:	4c06      	ldr	r4, [pc, #24]	; (c140 <cdcdf_acm_get_req+0x5c>)
    c128:	47a0      	blx	r4
    c12a:	4603      	mov	r3, r0
    c12c:	e001      	b.n	c132 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    c12e:	f06f 030c 	mvn.w	r3, #12
	}
}
    c132:	4618      	mov	r0, r3
    c134:	3714      	adds	r7, #20
    c136:	46bd      	mov	sp, r7
    c138:	bd90      	pop	{r4, r7, pc}
    c13a:	bf00      	nop
    c13c:	20000f94 	.word	0x20000f94
    c140:	0000cec5 	.word	0x0000cec5

0000c144 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c144:	b580      	push	{r7, lr}
    c146:	b082      	sub	sp, #8
    c148:	af00      	add	r7, sp, #0
    c14a:	4603      	mov	r3, r0
    c14c:	6039      	str	r1, [r7, #0]
    c14e:	71fb      	strb	r3, [r7, #7]
    c150:	4613      	mov	r3, r2
    c152:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c154:	683b      	ldr	r3, [r7, #0]
    c156:	781b      	ldrb	r3, [r3, #0]
    c158:	095b      	lsrs	r3, r3, #5
    c15a:	b2db      	uxtb	r3, r3
    c15c:	f003 0303 	and.w	r3, r3, #3
    c160:	2b01      	cmp	r3, #1
    c162:	d002      	beq.n	c16a <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    c164:	f06f 0309 	mvn.w	r3, #9
    c168:	e026      	b.n	c1b8 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c16a:	683b      	ldr	r3, [r7, #0]
    c16c:	889b      	ldrh	r3, [r3, #4]
    c16e:	b29a      	uxth	r2, r3
    c170:	4b13      	ldr	r3, [pc, #76]	; (c1c0 <cdcdf_acm_req+0x7c>)
    c172:	781b      	ldrb	r3, [r3, #0]
    c174:	b29b      	uxth	r3, r3
    c176:	429a      	cmp	r2, r3
    c178:	d007      	beq.n	c18a <cdcdf_acm_req+0x46>
    c17a:	683b      	ldr	r3, [r7, #0]
    c17c:	889b      	ldrh	r3, [r3, #4]
    c17e:	b29a      	uxth	r2, r3
    c180:	4b0f      	ldr	r3, [pc, #60]	; (c1c0 <cdcdf_acm_req+0x7c>)
    c182:	785b      	ldrb	r3, [r3, #1]
    c184:	b29b      	uxth	r3, r3
    c186:	429a      	cmp	r2, r3
    c188:	d114      	bne.n	c1b4 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c18a:	683b      	ldr	r3, [r7, #0]
    c18c:	781b      	ldrb	r3, [r3, #0]
    c18e:	b25b      	sxtb	r3, r3
    c190:	2b00      	cmp	r3, #0
    c192:	da07      	bge.n	c1a4 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    c194:	79ba      	ldrb	r2, [r7, #6]
    c196:	79fb      	ldrb	r3, [r7, #7]
    c198:	6839      	ldr	r1, [r7, #0]
    c19a:	4618      	mov	r0, r3
    c19c:	4b09      	ldr	r3, [pc, #36]	; (c1c4 <cdcdf_acm_req+0x80>)
    c19e:	4798      	blx	r3
    c1a0:	4603      	mov	r3, r0
    c1a2:	e009      	b.n	c1b8 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    c1a4:	79ba      	ldrb	r2, [r7, #6]
    c1a6:	79fb      	ldrb	r3, [r7, #7]
    c1a8:	6839      	ldr	r1, [r7, #0]
    c1aa:	4618      	mov	r0, r3
    c1ac:	4b06      	ldr	r3, [pc, #24]	; (c1c8 <cdcdf_acm_req+0x84>)
    c1ae:	4798      	blx	r3
    c1b0:	4603      	mov	r3, r0
    c1b2:	e001      	b.n	c1b8 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    c1b4:	f06f 0309 	mvn.w	r3, #9
	}
}
    c1b8:	4618      	mov	r0, r3
    c1ba:	3708      	adds	r7, #8
    c1bc:	46bd      	mov	sp, r7
    c1be:	bd80      	pop	{r7, pc}
    c1c0:	20000f8c 	.word	0x20000f8c
    c1c4:	0000c0e5 	.word	0x0000c0e5
    c1c8:	0000c005 	.word	0x0000c005

0000c1cc <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c1cc:	b580      	push	{r7, lr}
    c1ce:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    c1d0:	4b0b      	ldr	r3, [pc, #44]	; (c200 <cdcdf_acm_init+0x34>)
    c1d2:	4798      	blx	r3
    c1d4:	4603      	mov	r3, r0
    c1d6:	2b01      	cmp	r3, #1
    c1d8:	d902      	bls.n	c1e0 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    c1da:	f06f 0310 	mvn.w	r3, #16
    c1de:	e00d      	b.n	c1fc <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c1e0:	4b08      	ldr	r3, [pc, #32]	; (c204 <cdcdf_acm_init+0x38>)
    c1e2:	4a09      	ldr	r2, [pc, #36]	; (c208 <cdcdf_acm_init+0x3c>)
    c1e4:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c1e6:	4b07      	ldr	r3, [pc, #28]	; (c204 <cdcdf_acm_init+0x38>)
    c1e8:	4a08      	ldr	r2, [pc, #32]	; (c20c <cdcdf_acm_init+0x40>)
    c1ea:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    c1ec:	4805      	ldr	r0, [pc, #20]	; (c204 <cdcdf_acm_init+0x38>)
    c1ee:	4b08      	ldr	r3, [pc, #32]	; (c210 <cdcdf_acm_init+0x44>)
    c1f0:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c1f2:	4908      	ldr	r1, [pc, #32]	; (c214 <cdcdf_acm_init+0x48>)
    c1f4:	2001      	movs	r0, #1
    c1f6:	4b08      	ldr	r3, [pc, #32]	; (c218 <cdcdf_acm_init+0x4c>)
    c1f8:	4798      	blx	r3
	return ERR_NONE;
    c1fa:	2300      	movs	r3, #0
}
    c1fc:	4618      	mov	r0, r3
    c1fe:	bd80      	pop	{r7, pc}
    c200:	0000d069 	.word	0x0000d069
    c204:	20000f80 	.word	0x20000f80
    c208:	0000bfb5 	.word	0x0000bfb5
    c20c:	20000f8c 	.word	0x20000f8c
    c210:	0000cfd1 	.word	0x0000cfd1
    c214:	20000208 	.word	0x20000208
    c218:	0000cf01 	.word	0x0000cf01

0000c21c <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    c21c:	b590      	push	{r4, r7, lr}
    c21e:	b083      	sub	sp, #12
    c220:	af00      	add	r7, sp, #0
    c222:	6078      	str	r0, [r7, #4]
    c224:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c226:	4b0b      	ldr	r3, [pc, #44]	; (c254 <cdcdf_acm_read+0x38>)
    c228:	4798      	blx	r3
    c22a:	4603      	mov	r3, r0
    c22c:	f083 0301 	eor.w	r3, r3, #1
    c230:	b2db      	uxtb	r3, r3
    c232:	2b00      	cmp	r3, #0
    c234:	d002      	beq.n	c23c <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    c236:	f06f 0310 	mvn.w	r3, #16
    c23a:	e007      	b.n	c24c <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c23c:	4b06      	ldr	r3, [pc, #24]	; (c258 <cdcdf_acm_read+0x3c>)
    c23e:	7918      	ldrb	r0, [r3, #4]
    c240:	2300      	movs	r3, #0
    c242:	683a      	ldr	r2, [r7, #0]
    c244:	6879      	ldr	r1, [r7, #4]
    c246:	4c05      	ldr	r4, [pc, #20]	; (c25c <cdcdf_acm_read+0x40>)
    c248:	47a0      	blx	r4
    c24a:	4603      	mov	r3, r0
}
    c24c:	4618      	mov	r0, r3
    c24e:	370c      	adds	r7, #12
    c250:	46bd      	mov	sp, r7
    c252:	bd90      	pop	{r4, r7, pc}
    c254:	0000c341 	.word	0x0000c341
    c258:	20000f8c 	.word	0x20000f8c
    c25c:	0000cec5 	.word	0x0000cec5

0000c260 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    c260:	b590      	push	{r4, r7, lr}
    c262:	b083      	sub	sp, #12
    c264:	af00      	add	r7, sp, #0
    c266:	6078      	str	r0, [r7, #4]
    c268:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c26a:	4b0b      	ldr	r3, [pc, #44]	; (c298 <cdcdf_acm_write+0x38>)
    c26c:	4798      	blx	r3
    c26e:	4603      	mov	r3, r0
    c270:	f083 0301 	eor.w	r3, r3, #1
    c274:	b2db      	uxtb	r3, r3
    c276:	2b00      	cmp	r3, #0
    c278:	d002      	beq.n	c280 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    c27a:	f06f 0310 	mvn.w	r3, #16
    c27e:	e007      	b.n	c290 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c280:	4b06      	ldr	r3, [pc, #24]	; (c29c <cdcdf_acm_write+0x3c>)
    c282:	78d8      	ldrb	r0, [r3, #3]
    c284:	2301      	movs	r3, #1
    c286:	683a      	ldr	r2, [r7, #0]
    c288:	6879      	ldr	r1, [r7, #4]
    c28a:	4c05      	ldr	r4, [pc, #20]	; (c2a0 <cdcdf_acm_write+0x40>)
    c28c:	47a0      	blx	r4
    c28e:	4603      	mov	r3, r0
}
    c290:	4618      	mov	r0, r3
    c292:	370c      	adds	r7, #12
    c294:	46bd      	mov	sp, r7
    c296:	bd90      	pop	{r4, r7, pc}
    c298:	0000c341 	.word	0x0000c341
    c29c:	20000f8c 	.word	0x20000f8c
    c2a0:	0000cec5 	.word	0x0000cec5

0000c2a4 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    c2a4:	b580      	push	{r7, lr}
    c2a6:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c2a8:	4b05      	ldr	r3, [pc, #20]	; (c2c0 <cdcdf_acm_stop_xfer+0x1c>)
    c2aa:	78db      	ldrb	r3, [r3, #3]
    c2ac:	4618      	mov	r0, r3
    c2ae:	4b05      	ldr	r3, [pc, #20]	; (c2c4 <cdcdf_acm_stop_xfer+0x20>)
    c2b0:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c2b2:	4b03      	ldr	r3, [pc, #12]	; (c2c0 <cdcdf_acm_stop_xfer+0x1c>)
    c2b4:	791b      	ldrb	r3, [r3, #4]
    c2b6:	4618      	mov	r0, r3
    c2b8:	4b02      	ldr	r3, [pc, #8]	; (c2c4 <cdcdf_acm_stop_xfer+0x20>)
    c2ba:	4798      	blx	r3
}
    c2bc:	bf00      	nop
    c2be:	bd80      	pop	{r7, pc}
    c2c0:	20000f8c 	.word	0x20000f8c
    c2c4:	0000370d 	.word	0x0000370d

0000c2c8 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    c2c8:	b580      	push	{r7, lr}
    c2ca:	b082      	sub	sp, #8
    c2cc:	af00      	add	r7, sp, #0
    c2ce:	4603      	mov	r3, r0
    c2d0:	6039      	str	r1, [r7, #0]
    c2d2:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    c2d4:	79fb      	ldrb	r3, [r7, #7]
    c2d6:	2b03      	cmp	r3, #3
    c2d8:	d822      	bhi.n	c320 <cdcdf_acm_register_callback+0x58>
    c2da:	a201      	add	r2, pc, #4	; (adr r2, c2e0 <cdcdf_acm_register_callback+0x18>)
    c2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c2e0:	0000c2f1 	.word	0x0000c2f1
    c2e4:	0000c301 	.word	0x0000c301
    c2e8:	0000c311 	.word	0x0000c311
    c2ec:	0000c319 	.word	0x0000c319
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c2f0:	4b0f      	ldr	r3, [pc, #60]	; (c330 <cdcdf_acm_register_callback+0x68>)
    c2f2:	791b      	ldrb	r3, [r3, #4]
    c2f4:	683a      	ldr	r2, [r7, #0]
    c2f6:	2102      	movs	r1, #2
    c2f8:	4618      	mov	r0, r3
    c2fa:	4b0e      	ldr	r3, [pc, #56]	; (c334 <cdcdf_acm_register_callback+0x6c>)
    c2fc:	4798      	blx	r3
		break;
    c2fe:	e012      	b.n	c326 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c300:	4b0b      	ldr	r3, [pc, #44]	; (c330 <cdcdf_acm_register_callback+0x68>)
    c302:	78db      	ldrb	r3, [r3, #3]
    c304:	683a      	ldr	r2, [r7, #0]
    c306:	2102      	movs	r1, #2
    c308:	4618      	mov	r0, r3
    c30a:	4b0a      	ldr	r3, [pc, #40]	; (c334 <cdcdf_acm_register_callback+0x6c>)
    c30c:	4798      	blx	r3
		break;
    c30e:	e00a      	b.n	c326 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c310:	4a09      	ldr	r2, [pc, #36]	; (c338 <cdcdf_acm_register_callback+0x70>)
    c312:	683b      	ldr	r3, [r7, #0]
    c314:	6013      	str	r3, [r2, #0]
		break;
    c316:	e006      	b.n	c326 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c318:	4a08      	ldr	r2, [pc, #32]	; (c33c <cdcdf_acm_register_callback+0x74>)
    c31a:	683b      	ldr	r3, [r7, #0]
    c31c:	6013      	str	r3, [r2, #0]
		break;
    c31e:	e002      	b.n	c326 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    c320:	f06f 030c 	mvn.w	r3, #12
    c324:	e000      	b.n	c328 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    c326:	2300      	movs	r3, #0
}
    c328:	4618      	mov	r0, r3
    c32a:	3708      	adds	r7, #8
    c32c:	46bd      	mov	sp, r7
    c32e:	bd80      	pop	{r7, pc}
    c330:	20000f8c 	.word	0x20000f8c
    c334:	00003839 	.word	0x00003839
    c338:	20000fa0 	.word	0x20000fa0
    c33c:	20000f9c 	.word	0x20000f9c

0000c340 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    c340:	b480      	push	{r7}
    c342:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    c344:	4b03      	ldr	r3, [pc, #12]	; (c354 <cdcdf_acm_is_enabled+0x14>)
    c346:	795b      	ldrb	r3, [r3, #5]
}
    c348:	4618      	mov	r0, r3
    c34a:	46bd      	mov	sp, r7
    c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c350:	4770      	bx	lr
    c352:	bf00      	nop
    c354:	20000f8c 	.word	0x20000f8c

0000c358 <usb_get_u16>:
{
    c358:	b480      	push	{r7}
    c35a:	b083      	sub	sp, #12
    c35c:	af00      	add	r7, sp, #0
    c35e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c360:	687b      	ldr	r3, [r7, #4]
    c362:	781b      	ldrb	r3, [r3, #0]
    c364:	b29a      	uxth	r2, r3
    c366:	687b      	ldr	r3, [r7, #4]
    c368:	3301      	adds	r3, #1
    c36a:	781b      	ldrb	r3, [r3, #0]
    c36c:	b29b      	uxth	r3, r3
    c36e:	021b      	lsls	r3, r3, #8
    c370:	b29b      	uxth	r3, r3
    c372:	4413      	add	r3, r2
    c374:	b29b      	uxth	r3, r3
}
    c376:	4618      	mov	r0, r3
    c378:	370c      	adds	r7, #12
    c37a:	46bd      	mov	sp, r7
    c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c380:	4770      	bx	lr

0000c382 <usb_desc_len>:
{
    c382:	b480      	push	{r7}
    c384:	b083      	sub	sp, #12
    c386:	af00      	add	r7, sp, #0
    c388:	6078      	str	r0, [r7, #4]
	return desc[0];
    c38a:	687b      	ldr	r3, [r7, #4]
    c38c:	781b      	ldrb	r3, [r3, #0]
}
    c38e:	4618      	mov	r0, r3
    c390:	370c      	adds	r7, #12
    c392:	46bd      	mov	sp, r7
    c394:	f85d 7b04 	ldr.w	r7, [sp], #4
    c398:	4770      	bx	lr
	...

0000c39c <usb_desc_next>:
{
    c39c:	b580      	push	{r7, lr}
    c39e:	b082      	sub	sp, #8
    c3a0:	af00      	add	r7, sp, #0
    c3a2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c3a4:	6878      	ldr	r0, [r7, #4]
    c3a6:	4b05      	ldr	r3, [pc, #20]	; (c3bc <usb_desc_next+0x20>)
    c3a8:	4798      	blx	r3
    c3aa:	4603      	mov	r3, r0
    c3ac:	461a      	mov	r2, r3
    c3ae:	687b      	ldr	r3, [r7, #4]
    c3b0:	4413      	add	r3, r2
}
    c3b2:	4618      	mov	r0, r3
    c3b4:	3708      	adds	r7, #8
    c3b6:	46bd      	mov	sp, r7
    c3b8:	bd80      	pop	{r7, pc}
    c3ba:	bf00      	nop
    c3bc:	0000c383 	.word	0x0000c383

0000c3c0 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    c3c0:	b580      	push	{r7, lr}
    c3c2:	b082      	sub	sp, #8
    c3c4:	af00      	add	r7, sp, #0
    c3c6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c3c8:	687b      	ldr	r3, [r7, #4]
    c3ca:	3302      	adds	r3, #2
    c3cc:	4618      	mov	r0, r3
    c3ce:	4b03      	ldr	r3, [pc, #12]	; (c3dc <usb_cfg_desc_total_len+0x1c>)
    c3d0:	4798      	blx	r3
    c3d2:	4603      	mov	r3, r0
}
    c3d4:	4618      	mov	r0, r3
    c3d6:	3708      	adds	r7, #8
    c3d8:	46bd      	mov	sp, r7
    c3da:	bd80      	pop	{r7, pc}
    c3dc:	0000c359 	.word	0x0000c359

0000c3e0 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    c3e0:	b590      	push	{r4, r7, lr}
    c3e2:	b085      	sub	sp, #20
    c3e4:	af00      	add	r7, sp, #0
    c3e6:	4603      	mov	r3, r0
    c3e8:	6039      	str	r1, [r7, #0]
    c3ea:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    c3ec:	2300      	movs	r3, #0
    c3ee:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    c3f0:	683b      	ldr	r3, [r7, #0]
    c3f2:	799a      	ldrb	r2, [r3, #6]
    c3f4:	79db      	ldrb	r3, [r3, #7]
    c3f6:	021b      	lsls	r3, r3, #8
    c3f8:	4313      	orrs	r3, r2
    c3fa:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    c3fc:	897b      	ldrh	r3, [r7, #10]
    c3fe:	2b12      	cmp	r3, #18
    c400:	d901      	bls.n	c406 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    c402:	2312      	movs	r3, #18
    c404:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    c406:	68fb      	ldr	r3, [r7, #12]
    c408:	2b00      	cmp	r3, #0
    c40a:	d10a      	bne.n	c422 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c40c:	4b0f      	ldr	r3, [pc, #60]	; (c44c <usbdc_get_dev_desc+0x6c>)
    c40e:	681b      	ldr	r3, [r3, #0]
    c410:	6818      	ldr	r0, [r3, #0]
    c412:	4b0e      	ldr	r3, [pc, #56]	; (c44c <usbdc_get_dev_desc+0x6c>)
    c414:	681b      	ldr	r3, [r3, #0]
    c416:	685b      	ldr	r3, [r3, #4]
    c418:	2201      	movs	r2, #1
    c41a:	4619      	mov	r1, r3
    c41c:	4b0c      	ldr	r3, [pc, #48]	; (c450 <usbdc_get_dev_desc+0x70>)
    c41e:	4798      	blx	r3
    c420:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    c422:	68fb      	ldr	r3, [r7, #12]
    c424:	2b00      	cmp	r3, #0
    c426:	d101      	bne.n	c42c <usbdc_get_dev_desc+0x4c>
		return false;
    c428:	2300      	movs	r3, #0
    c42a:	e00b      	b.n	c444 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c42c:	897a      	ldrh	r2, [r7, #10]
    c42e:	79f8      	ldrb	r0, [r7, #7]
    c430:	2300      	movs	r3, #0
    c432:	68f9      	ldr	r1, [r7, #12]
    c434:	4c07      	ldr	r4, [pc, #28]	; (c454 <usbdc_get_dev_desc+0x74>)
    c436:	47a0      	blx	r4
    c438:	4603      	mov	r3, r0
    c43a:	2b00      	cmp	r3, #0
    c43c:	d001      	beq.n	c442 <usbdc_get_dev_desc+0x62>
		return false;
    c43e:	2300      	movs	r3, #0
    c440:	e000      	b.n	c444 <usbdc_get_dev_desc+0x64>
	}
	return true;
    c442:	2301      	movs	r3, #1
}
    c444:	4618      	mov	r0, r3
    c446:	3714      	adds	r7, #20
    c448:	46bd      	mov	sp, r7
    c44a:	bd90      	pop	{r4, r7, pc}
    c44c:	20000fa4 	.word	0x20000fa4
    c450:	0000d155 	.word	0x0000d155
    c454:	0000cec5 	.word	0x0000cec5

0000c458 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    c458:	b590      	push	{r4, r7, lr}
    c45a:	b087      	sub	sp, #28
    c45c:	af00      	add	r7, sp, #0
    c45e:	4603      	mov	r3, r0
    c460:	6039      	str	r1, [r7, #0]
    c462:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    c464:	2300      	movs	r3, #0
    c466:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    c468:	683b      	ldr	r3, [r7, #0]
    c46a:	799a      	ldrb	r2, [r3, #6]
    c46c:	79db      	ldrb	r3, [r3, #7]
    c46e:	021b      	lsls	r3, r3, #8
    c470:	4313      	orrs	r3, r2
    c472:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    c474:	683b      	ldr	r3, [r7, #0]
    c476:	885b      	ldrh	r3, [r3, #2]
    c478:	b29b      	uxth	r3, r3
    c47a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c47c:	8a7a      	ldrh	r2, [r7, #18]
    c47e:	4b1e      	ldr	r3, [pc, #120]	; (c4f8 <usbdc_get_cfg_desc+0xa0>)
    c480:	7f1b      	ldrb	r3, [r3, #28]
    c482:	3b01      	subs	r3, #1
    c484:	4013      	ands	r3, r2
    c486:	2b00      	cmp	r3, #0
    c488:	bf0c      	ite	eq
    c48a:	2301      	moveq	r3, #1
    c48c:	2300      	movne	r3, #0
    c48e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c490:	697b      	ldr	r3, [r7, #20]
    c492:	2b00      	cmp	r3, #0
    c494:	d10c      	bne.n	c4b0 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c496:	4b18      	ldr	r3, [pc, #96]	; (c4f8 <usbdc_get_cfg_desc+0xa0>)
    c498:	681b      	ldr	r3, [r3, #0]
    c49a:	6818      	ldr	r0, [r3, #0]
    c49c:	4b16      	ldr	r3, [pc, #88]	; (c4f8 <usbdc_get_cfg_desc+0xa0>)
    c49e:	681b      	ldr	r3, [r3, #0]
    c4a0:	6859      	ldr	r1, [r3, #4]
    c4a2:	7c3b      	ldrb	r3, [r7, #16]
    c4a4:	3301      	adds	r3, #1
    c4a6:	b2db      	uxtb	r3, r3
    c4a8:	461a      	mov	r2, r3
    c4aa:	4b14      	ldr	r3, [pc, #80]	; (c4fc <usbdc_get_cfg_desc+0xa4>)
    c4ac:	4798      	blx	r3
    c4ae:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    c4b0:	697b      	ldr	r3, [r7, #20]
    c4b2:	2b00      	cmp	r3, #0
    c4b4:	d101      	bne.n	c4ba <usbdc_get_cfg_desc+0x62>
		return false;
    c4b6:	2300      	movs	r3, #0
    c4b8:	e019      	b.n	c4ee <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    c4ba:	6978      	ldr	r0, [r7, #20]
    c4bc:	4b10      	ldr	r3, [pc, #64]	; (c500 <usbdc_get_cfg_desc+0xa8>)
    c4be:	4798      	blx	r3
    c4c0:	4603      	mov	r3, r0
    c4c2:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    c4c4:	8a7a      	ldrh	r2, [r7, #18]
    c4c6:	89fb      	ldrh	r3, [r7, #14]
    c4c8:	429a      	cmp	r2, r3
    c4ca:	d802      	bhi.n	c4d2 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    c4cc:	2300      	movs	r3, #0
    c4ce:	747b      	strb	r3, [r7, #17]
    c4d0:	e001      	b.n	c4d6 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    c4d2:	89fb      	ldrh	r3, [r7, #14]
    c4d4:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c4d6:	8a7a      	ldrh	r2, [r7, #18]
    c4d8:	7c7b      	ldrb	r3, [r7, #17]
    c4da:	79f8      	ldrb	r0, [r7, #7]
    c4dc:	6979      	ldr	r1, [r7, #20]
    c4de:	4c09      	ldr	r4, [pc, #36]	; (c504 <usbdc_get_cfg_desc+0xac>)
    c4e0:	47a0      	blx	r4
    c4e2:	4603      	mov	r3, r0
    c4e4:	2b00      	cmp	r3, #0
    c4e6:	d001      	beq.n	c4ec <usbdc_get_cfg_desc+0x94>
		return false;
    c4e8:	2300      	movs	r3, #0
    c4ea:	e000      	b.n	c4ee <usbdc_get_cfg_desc+0x96>
	}
	return true;
    c4ec:	2301      	movs	r3, #1
}
    c4ee:	4618      	mov	r0, r3
    c4f0:	371c      	adds	r7, #28
    c4f2:	46bd      	mov	sp, r7
    c4f4:	bd90      	pop	{r4, r7, pc}
    c4f6:	bf00      	nop
    c4f8:	20000fa4 	.word	0x20000fa4
    c4fc:	0000d215 	.word	0x0000d215
    c500:	0000c3c1 	.word	0x0000c3c1
    c504:	0000cec5 	.word	0x0000cec5

0000c508 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    c508:	b590      	push	{r4, r7, lr}
    c50a:	b085      	sub	sp, #20
    c50c:	af00      	add	r7, sp, #0
    c50e:	4603      	mov	r3, r0
    c510:	6039      	str	r1, [r7, #0]
    c512:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    c514:	683b      	ldr	r3, [r7, #0]
    c516:	799a      	ldrb	r2, [r3, #6]
    c518:	79db      	ldrb	r3, [r3, #7]
    c51a:	021b      	lsls	r3, r3, #8
    c51c:	4313      	orrs	r3, r2
    c51e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    c520:	683b      	ldr	r3, [r7, #0]
    c522:	885b      	ldrh	r3, [r3, #2]
    c524:	b29b      	uxth	r3, r3
    c526:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c528:	89fa      	ldrh	r2, [r7, #14]
    c52a:	4b1a      	ldr	r3, [pc, #104]	; (c594 <usbdc_get_str_desc+0x8c>)
    c52c:	7f1b      	ldrb	r3, [r3, #28]
    c52e:	3b01      	subs	r3, #1
    c530:	4013      	ands	r3, r2
    c532:	2b00      	cmp	r3, #0
    c534:	bf0c      	ite	eq
    c536:	2301      	moveq	r3, #1
    c538:	2300      	movne	r3, #0
    c53a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c53c:	4b15      	ldr	r3, [pc, #84]	; (c594 <usbdc_get_str_desc+0x8c>)
    c53e:	681b      	ldr	r3, [r3, #0]
    c540:	6818      	ldr	r0, [r3, #0]
    c542:	4b14      	ldr	r3, [pc, #80]	; (c594 <usbdc_get_str_desc+0x8c>)
    c544:	681b      	ldr	r3, [r3, #0]
    c546:	685b      	ldr	r3, [r3, #4]
    c548:	7b3a      	ldrb	r2, [r7, #12]
    c54a:	4619      	mov	r1, r3
    c54c:	4b12      	ldr	r3, [pc, #72]	; (c598 <usbdc_get_str_desc+0x90>)
    c54e:	4798      	blx	r3
    c550:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    c552:	68bb      	ldr	r3, [r7, #8]
    c554:	2b00      	cmp	r3, #0
    c556:	d101      	bne.n	c55c <usbdc_get_str_desc+0x54>
		return false;
    c558:	2300      	movs	r3, #0
    c55a:	e017      	b.n	c58c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    c55c:	68bb      	ldr	r3, [r7, #8]
    c55e:	781b      	ldrb	r3, [r3, #0]
    c560:	b29b      	uxth	r3, r3
    c562:	89fa      	ldrh	r2, [r7, #14]
    c564:	429a      	cmp	r2, r3
    c566:	d802      	bhi.n	c56e <usbdc_get_str_desc+0x66>
		need_zlp = false;
    c568:	2300      	movs	r3, #0
    c56a:	737b      	strb	r3, [r7, #13]
    c56c:	e002      	b.n	c574 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    c56e:	68bb      	ldr	r3, [r7, #8]
    c570:	781b      	ldrb	r3, [r3, #0]
    c572:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c574:	89fa      	ldrh	r2, [r7, #14]
    c576:	7b7b      	ldrb	r3, [r7, #13]
    c578:	79f8      	ldrb	r0, [r7, #7]
    c57a:	68b9      	ldr	r1, [r7, #8]
    c57c:	4c07      	ldr	r4, [pc, #28]	; (c59c <usbdc_get_str_desc+0x94>)
    c57e:	47a0      	blx	r4
    c580:	4603      	mov	r3, r0
    c582:	2b00      	cmp	r3, #0
    c584:	d001      	beq.n	c58a <usbdc_get_str_desc+0x82>
		return false;
    c586:	2300      	movs	r3, #0
    c588:	e000      	b.n	c58c <usbdc_get_str_desc+0x84>
	}
	return true;
    c58a:	2301      	movs	r3, #1
}
    c58c:	4618      	mov	r0, r3
    c58e:	3714      	adds	r7, #20
    c590:	46bd      	mov	sp, r7
    c592:	bd90      	pop	{r4, r7, pc}
    c594:	20000fa4 	.word	0x20000fa4
    c598:	0000d28d 	.word	0x0000d28d
    c59c:	0000cec5 	.word	0x0000cec5

0000c5a0 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    c5a0:	b580      	push	{r7, lr}
    c5a2:	b084      	sub	sp, #16
    c5a4:	af00      	add	r7, sp, #0
    c5a6:	4603      	mov	r3, r0
    c5a8:	6039      	str	r1, [r7, #0]
    c5aa:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c5ac:	683b      	ldr	r3, [r7, #0]
    c5ae:	885b      	ldrh	r3, [r3, #2]
    c5b0:	b29b      	uxth	r3, r3
    c5b2:	0a1b      	lsrs	r3, r3, #8
    c5b4:	b29b      	uxth	r3, r3
    c5b6:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    c5b8:	7bfb      	ldrb	r3, [r7, #15]
    c5ba:	2b02      	cmp	r3, #2
    c5bc:	d00d      	beq.n	c5da <usbdc_get_desc_req+0x3a>
    c5be:	2b03      	cmp	r3, #3
    c5c0:	d012      	beq.n	c5e8 <usbdc_get_desc_req+0x48>
    c5c2:	2b01      	cmp	r3, #1
    c5c4:	d002      	beq.n	c5cc <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    c5c6:	bf00      	nop
	}
	return false;
    c5c8:	2300      	movs	r3, #0
    c5ca:	e013      	b.n	c5f4 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    c5cc:	79fb      	ldrb	r3, [r7, #7]
    c5ce:	6839      	ldr	r1, [r7, #0]
    c5d0:	4618      	mov	r0, r3
    c5d2:	4b0a      	ldr	r3, [pc, #40]	; (c5fc <usbdc_get_desc_req+0x5c>)
    c5d4:	4798      	blx	r3
    c5d6:	4603      	mov	r3, r0
    c5d8:	e00c      	b.n	c5f4 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    c5da:	79fb      	ldrb	r3, [r7, #7]
    c5dc:	6839      	ldr	r1, [r7, #0]
    c5de:	4618      	mov	r0, r3
    c5e0:	4b07      	ldr	r3, [pc, #28]	; (c600 <usbdc_get_desc_req+0x60>)
    c5e2:	4798      	blx	r3
    c5e4:	4603      	mov	r3, r0
    c5e6:	e005      	b.n	c5f4 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    c5e8:	79fb      	ldrb	r3, [r7, #7]
    c5ea:	6839      	ldr	r1, [r7, #0]
    c5ec:	4618      	mov	r0, r3
    c5ee:	4b05      	ldr	r3, [pc, #20]	; (c604 <usbdc_get_desc_req+0x64>)
    c5f0:	4798      	blx	r3
    c5f2:	4603      	mov	r3, r0
}
    c5f4:	4618      	mov	r0, r3
    c5f6:	3710      	adds	r7, #16
    c5f8:	46bd      	mov	sp, r7
    c5fa:	bd80      	pop	{r7, pc}
    c5fc:	0000c3e1 	.word	0x0000c3e1
    c600:	0000c459 	.word	0x0000c459
    c604:	0000c509 	.word	0x0000c509

0000c608 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    c608:	b590      	push	{r4, r7, lr}
    c60a:	b085      	sub	sp, #20
    c60c:	af00      	add	r7, sp, #0
    c60e:	4603      	mov	r3, r0
    c610:	6039      	str	r1, [r7, #0]
    c612:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c614:	683b      	ldr	r3, [r7, #0]
    c616:	781b      	ldrb	r3, [r3, #0]
    c618:	f003 031f 	and.w	r3, r3, #31
    c61c:	2b00      	cmp	r3, #0
    c61e:	db1b      	blt.n	c658 <usbdc_get_status_req+0x50>
    c620:	2b01      	cmp	r3, #1
    c622:	dd02      	ble.n	c62a <usbdc_get_status_req+0x22>
    c624:	2b02      	cmp	r3, #2
    c626:	d003      	beq.n	c630 <usbdc_get_status_req+0x28>
    c628:	e016      	b.n	c658 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    c62a:	2300      	movs	r3, #0
    c62c:	60fb      	str	r3, [r7, #12]
		break;
    c62e:	e015      	b.n	c65c <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c630:	683b      	ldr	r3, [r7, #0]
    c632:	889b      	ldrh	r3, [r3, #4]
    c634:	b29b      	uxth	r3, r3
    c636:	b2db      	uxtb	r3, r3
    c638:	2102      	movs	r1, #2
    c63a:	4618      	mov	r0, r3
    c63c:	4b0f      	ldr	r3, [pc, #60]	; (c67c <usbdc_get_status_req+0x74>)
    c63e:	4798      	blx	r3
    c640:	4603      	mov	r3, r0
    c642:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    c644:	68fb      	ldr	r3, [r7, #12]
    c646:	2b00      	cmp	r3, #0
    c648:	da01      	bge.n	c64e <usbdc_get_status_req+0x46>
			return false;
    c64a:	2300      	movs	r3, #0
    c64c:	e012      	b.n	c674 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    c64e:	68fb      	ldr	r3, [r7, #12]
    c650:	f003 0301 	and.w	r3, r3, #1
    c654:	60fb      	str	r3, [r7, #12]
		break;
    c656:	e001      	b.n	c65c <usbdc_get_status_req+0x54>
	default:
		return false;
    c658:	2300      	movs	r3, #0
    c65a:	e00b      	b.n	c674 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    c65c:	4b08      	ldr	r3, [pc, #32]	; (c680 <usbdc_get_status_req+0x78>)
    c65e:	695b      	ldr	r3, [r3, #20]
    c660:	89ba      	ldrh	r2, [r7, #12]
    c662:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c664:	4b06      	ldr	r3, [pc, #24]	; (c680 <usbdc_get_status_req+0x78>)
    c666:	6959      	ldr	r1, [r3, #20]
    c668:	79f8      	ldrb	r0, [r7, #7]
    c66a:	2300      	movs	r3, #0
    c66c:	2202      	movs	r2, #2
    c66e:	4c05      	ldr	r4, [pc, #20]	; (c684 <usbdc_get_status_req+0x7c>)
    c670:	47a0      	blx	r4
	return true;
    c672:	2301      	movs	r3, #1
}
    c674:	4618      	mov	r0, r3
    c676:	3714      	adds	r7, #20
    c678:	46bd      	mov	sp, r7
    c67a:	bd90      	pop	{r4, r7, pc}
    c67c:	000037e5 	.word	0x000037e5
    c680:	20000fa4 	.word	0x20000fa4
    c684:	0000cec5 	.word	0x0000cec5

0000c688 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    c688:	b590      	push	{r4, r7, lr}
    c68a:	b085      	sub	sp, #20
    c68c:	af00      	add	r7, sp, #0
    c68e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c690:	4b1f      	ldr	r3, [pc, #124]	; (c710 <usbdc_get_interface+0x88>)
    c692:	691b      	ldr	r3, [r3, #16]
    c694:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c696:	4b1e      	ldr	r3, [pc, #120]	; (c710 <usbdc_get_interface+0x88>)
    c698:	7f5b      	ldrb	r3, [r3, #29]
    c69a:	461a      	mov	r2, r3
    c69c:	687b      	ldr	r3, [r7, #4]
    c69e:	889b      	ldrh	r3, [r3, #4]
    c6a0:	b29b      	uxth	r3, r3
    c6a2:	fa42 f303 	asr.w	r3, r2, r3
    c6a6:	f003 0301 	and.w	r3, r3, #1
    c6aa:	2b00      	cmp	r3, #0
    c6ac:	d128      	bne.n	c700 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    c6ae:	4b18      	ldr	r3, [pc, #96]	; (c710 <usbdc_get_interface+0x88>)
    c6b0:	695b      	ldr	r3, [r3, #20]
    c6b2:	2200      	movs	r2, #0
    c6b4:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c6b6:	4b16      	ldr	r3, [pc, #88]	; (c710 <usbdc_get_interface+0x88>)
    c6b8:	6959      	ldr	r1, [r3, #20]
    c6ba:	2300      	movs	r3, #0
    c6bc:	2201      	movs	r2, #1
    c6be:	2000      	movs	r0, #0
    c6c0:	4c14      	ldr	r4, [pc, #80]	; (c714 <usbdc_get_interface+0x8c>)
    c6c2:	47a0      	blx	r4
		return true;
    c6c4:	2301      	movs	r3, #1
    c6c6:	e01f      	b.n	c708 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c6c8:	68fb      	ldr	r3, [r7, #12]
    c6ca:	685b      	ldr	r3, [r3, #4]
    c6cc:	687a      	ldr	r2, [r7, #4]
    c6ce:	2102      	movs	r1, #2
    c6d0:	68f8      	ldr	r0, [r7, #12]
    c6d2:	4798      	blx	r3
    c6d4:	60b8      	str	r0, [r7, #8]
    c6d6:	68bb      	ldr	r3, [r7, #8]
    c6d8:	2b00      	cmp	r3, #0
    c6da:	da03      	bge.n	c6e4 <usbdc_get_interface+0x5c>
			func = func->next;
    c6dc:	68fb      	ldr	r3, [r7, #12]
    c6de:	681b      	ldr	r3, [r3, #0]
    c6e0:	60fb      	str	r3, [r7, #12]
    c6e2:	e00d      	b.n	c700 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c6e4:	4b0a      	ldr	r3, [pc, #40]	; (c710 <usbdc_get_interface+0x88>)
    c6e6:	695b      	ldr	r3, [r3, #20]
    c6e8:	68ba      	ldr	r2, [r7, #8]
    c6ea:	b2d2      	uxtb	r2, r2
    c6ec:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c6ee:	4b08      	ldr	r3, [pc, #32]	; (c710 <usbdc_get_interface+0x88>)
    c6f0:	6959      	ldr	r1, [r3, #20]
    c6f2:	2300      	movs	r3, #0
    c6f4:	2201      	movs	r2, #1
    c6f6:	2000      	movs	r0, #0
    c6f8:	4c06      	ldr	r4, [pc, #24]	; (c714 <usbdc_get_interface+0x8c>)
    c6fa:	47a0      	blx	r4
			return true;
    c6fc:	2301      	movs	r3, #1
    c6fe:	e003      	b.n	c708 <usbdc_get_interface+0x80>
	while (NULL != func) {
    c700:	68fb      	ldr	r3, [r7, #12]
    c702:	2b00      	cmp	r3, #0
    c704:	d1e0      	bne.n	c6c8 <usbdc_get_interface+0x40>
		}
	}
	return false;
    c706:	2300      	movs	r3, #0
}
    c708:	4618      	mov	r0, r3
    c70a:	3714      	adds	r7, #20
    c70c:	46bd      	mov	sp, r7
    c70e:	bd90      	pop	{r4, r7, pc}
    c710:	20000fa4 	.word	0x20000fa4
    c714:	0000cec5 	.word	0x0000cec5

0000c718 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    c718:	b590      	push	{r4, r7, lr}
    c71a:	b083      	sub	sp, #12
    c71c:	af00      	add	r7, sp, #0
    c71e:	4603      	mov	r3, r0
    c720:	6039      	str	r1, [r7, #0]
    c722:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c724:	683b      	ldr	r3, [r7, #0]
    c726:	785b      	ldrb	r3, [r3, #1]
    c728:	2b0a      	cmp	r3, #10
    c72a:	d83a      	bhi.n	c7a2 <usbdc_get_req+0x8a>
    c72c:	a201      	add	r2, pc, #4	; (adr r2, c734 <usbdc_get_req+0x1c>)
    c72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c732:	bf00      	nop
    c734:	0000c78b 	.word	0x0000c78b
    c738:	0000c7a3 	.word	0x0000c7a3
    c73c:	0000c7a3 	.word	0x0000c7a3
    c740:	0000c7a3 	.word	0x0000c7a3
    c744:	0000c7a3 	.word	0x0000c7a3
    c748:	0000c7a3 	.word	0x0000c7a3
    c74c:	0000c761 	.word	0x0000c761
    c750:	0000c7a3 	.word	0x0000c7a3
    c754:	0000c76f 	.word	0x0000c76f
    c758:	0000c7a3 	.word	0x0000c7a3
    c75c:	0000c799 	.word	0x0000c799
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    c760:	79fb      	ldrb	r3, [r7, #7]
    c762:	6839      	ldr	r1, [r7, #0]
    c764:	4618      	mov	r0, r3
    c766:	4b11      	ldr	r3, [pc, #68]	; (c7ac <usbdc_get_req+0x94>)
    c768:	4798      	blx	r3
    c76a:	4603      	mov	r3, r0
    c76c:	e01a      	b.n	c7a4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c76e:	4b10      	ldr	r3, [pc, #64]	; (c7b0 <usbdc_get_req+0x98>)
    c770:	695b      	ldr	r3, [r3, #20]
    c772:	4a0f      	ldr	r2, [pc, #60]	; (c7b0 <usbdc_get_req+0x98>)
    c774:	7ed2      	ldrb	r2, [r2, #27]
    c776:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    c778:	4b0d      	ldr	r3, [pc, #52]	; (c7b0 <usbdc_get_req+0x98>)
    c77a:	6959      	ldr	r1, [r3, #20]
    c77c:	79f8      	ldrb	r0, [r7, #7]
    c77e:	2300      	movs	r3, #0
    c780:	2201      	movs	r2, #1
    c782:	4c0c      	ldr	r4, [pc, #48]	; (c7b4 <usbdc_get_req+0x9c>)
    c784:	47a0      	blx	r4
		return true;
    c786:	2301      	movs	r3, #1
    c788:	e00c      	b.n	c7a4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    c78a:	79fb      	ldrb	r3, [r7, #7]
    c78c:	6839      	ldr	r1, [r7, #0]
    c78e:	4618      	mov	r0, r3
    c790:	4b09      	ldr	r3, [pc, #36]	; (c7b8 <usbdc_get_req+0xa0>)
    c792:	4798      	blx	r3
    c794:	4603      	mov	r3, r0
    c796:	e005      	b.n	c7a4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    c798:	6838      	ldr	r0, [r7, #0]
    c79a:	4b08      	ldr	r3, [pc, #32]	; (c7bc <usbdc_get_req+0xa4>)
    c79c:	4798      	blx	r3
    c79e:	4603      	mov	r3, r0
    c7a0:	e000      	b.n	c7a4 <usbdc_get_req+0x8c>
	default:
		return false;
    c7a2:	2300      	movs	r3, #0
	}
}
    c7a4:	4618      	mov	r0, r3
    c7a6:	370c      	adds	r7, #12
    c7a8:	46bd      	mov	sp, r7
    c7aa:	bd90      	pop	{r4, r7, pc}
    c7ac:	0000c5a1 	.word	0x0000c5a1
    c7b0:	20000fa4 	.word	0x20000fa4
    c7b4:	0000cec5 	.word	0x0000cec5
    c7b8:	0000c609 	.word	0x0000c609
    c7bc:	0000c689 	.word	0x0000c689

0000c7c0 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c7c0:	b590      	push	{r4, r7, lr}
    c7c2:	b083      	sub	sp, #12
    c7c4:	af00      	add	r7, sp, #0
    c7c6:	4603      	mov	r3, r0
    c7c8:	6039      	str	r1, [r7, #0]
    c7ca:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c7cc:	683b      	ldr	r3, [r7, #0]
    c7ce:	781b      	ldrb	r3, [r3, #0]
    c7d0:	f003 031f 	and.w	r3, r3, #31
    c7d4:	2b02      	cmp	r3, #2
    c7d6:	d116      	bne.n	c806 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c7d8:	683b      	ldr	r3, [r7, #0]
    c7da:	88db      	ldrh	r3, [r3, #6]
    c7dc:	b29b      	uxth	r3, r3
    c7de:	2b00      	cmp	r3, #0
    c7e0:	d001      	beq.n	c7e6 <usbdc_clear_ftr_req+0x26>
			return false;
    c7e2:	2300      	movs	r3, #0
    c7e4:	e010      	b.n	c808 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c7e6:	683b      	ldr	r3, [r7, #0]
    c7e8:	889b      	ldrh	r3, [r3, #4]
    c7ea:	b29b      	uxth	r3, r3
    c7ec:	b2db      	uxtb	r3, r3
    c7ee:	2100      	movs	r1, #0
    c7f0:	4618      	mov	r0, r3
    c7f2:	4b07      	ldr	r3, [pc, #28]	; (c810 <usbdc_clear_ftr_req+0x50>)
    c7f4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c7f6:	79f8      	ldrb	r0, [r7, #7]
    c7f8:	2301      	movs	r3, #1
    c7fa:	2200      	movs	r2, #0
    c7fc:	2100      	movs	r1, #0
    c7fe:	4c05      	ldr	r4, [pc, #20]	; (c814 <usbdc_clear_ftr_req+0x54>)
    c800:	47a0      	blx	r4
		return true;
    c802:	2301      	movs	r3, #1
    c804:	e000      	b.n	c808 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    c806:	2300      	movs	r3, #0
	}
}
    c808:	4618      	mov	r0, r3
    c80a:	370c      	adds	r7, #12
    c80c:	46bd      	mov	sp, r7
    c80e:	bd90      	pop	{r4, r7, pc}
    c810:	000037e5 	.word	0x000037e5
    c814:	0000cec5 	.word	0x0000cec5

0000c818 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c818:	b590      	push	{r4, r7, lr}
    c81a:	b083      	sub	sp, #12
    c81c:	af00      	add	r7, sp, #0
    c81e:	4603      	mov	r3, r0
    c820:	6039      	str	r1, [r7, #0]
    c822:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c824:	683b      	ldr	r3, [r7, #0]
    c826:	781b      	ldrb	r3, [r3, #0]
    c828:	f003 031f 	and.w	r3, r3, #31
    c82c:	2b02      	cmp	r3, #2
    c82e:	d116      	bne.n	c85e <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c830:	683b      	ldr	r3, [r7, #0]
    c832:	88db      	ldrh	r3, [r3, #6]
    c834:	b29b      	uxth	r3, r3
    c836:	2b00      	cmp	r3, #0
    c838:	d001      	beq.n	c83e <usbdc_set_ftr_req+0x26>
			return false;
    c83a:	2300      	movs	r3, #0
    c83c:	e010      	b.n	c860 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c83e:	683b      	ldr	r3, [r7, #0]
    c840:	889b      	ldrh	r3, [r3, #4]
    c842:	b29b      	uxth	r3, r3
    c844:	b2db      	uxtb	r3, r3
    c846:	2101      	movs	r1, #1
    c848:	4618      	mov	r0, r3
    c84a:	4b07      	ldr	r3, [pc, #28]	; (c868 <usbdc_set_ftr_req+0x50>)
    c84c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c84e:	79f8      	ldrb	r0, [r7, #7]
    c850:	2301      	movs	r3, #1
    c852:	2200      	movs	r2, #0
    c854:	2100      	movs	r1, #0
    c856:	4c05      	ldr	r4, [pc, #20]	; (c86c <usbdc_set_ftr_req+0x54>)
    c858:	47a0      	blx	r4
		return true;
    c85a:	2301      	movs	r3, #1
    c85c:	e000      	b.n	c860 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    c85e:	2300      	movs	r3, #0
	}
}
    c860:	4618      	mov	r0, r3
    c862:	370c      	adds	r7, #12
    c864:	46bd      	mov	sp, r7
    c866:	bd90      	pop	{r4, r7, pc}
    c868:	000037e5 	.word	0x000037e5
    c86c:	0000cec5 	.word	0x0000cec5

0000c870 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    c870:	b580      	push	{r7, lr}
    c872:	b082      	sub	sp, #8
    c874:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c876:	4b0a      	ldr	r3, [pc, #40]	; (c8a0 <usbdc_unconfig+0x30>)
    c878:	691b      	ldr	r3, [r3, #16]
    c87a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c87c:	e008      	b.n	c890 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c87e:	687b      	ldr	r3, [r7, #4]
    c880:	685b      	ldr	r3, [r3, #4]
    c882:	2200      	movs	r2, #0
    c884:	2101      	movs	r1, #1
    c886:	6878      	ldr	r0, [r7, #4]
    c888:	4798      	blx	r3
		func = func->next;
    c88a:	687b      	ldr	r3, [r7, #4]
    c88c:	681b      	ldr	r3, [r3, #0]
    c88e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c890:	687b      	ldr	r3, [r7, #4]
    c892:	2b00      	cmp	r3, #0
    c894:	d1f3      	bne.n	c87e <usbdc_unconfig+0xe>
	}
}
    c896:	bf00      	nop
    c898:	3708      	adds	r7, #8
    c89a:	46bd      	mov	sp, r7
    c89c:	bd80      	pop	{r7, pc}
    c89e:	bf00      	nop
    c8a0:	20000fa4 	.word	0x20000fa4

0000c8a4 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    c8a4:	b580      	push	{r7, lr}
    c8a6:	b088      	sub	sp, #32
    c8a8:	af00      	add	r7, sp, #0
    c8aa:	4603      	mov	r3, r0
    c8ac:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    c8ae:	2300      	movs	r3, #0
    c8b0:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    c8b2:	23ff      	movs	r3, #255	; 0xff
    c8b4:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    c8b6:	79fb      	ldrb	r3, [r7, #7]
    c8b8:	2b00      	cmp	r3, #0
    c8ba:	d103      	bne.n	c8c4 <usbdc_set_config+0x20>
		usbdc_unconfig();
    c8bc:	4b2e      	ldr	r3, [pc, #184]	; (c978 <usbdc_set_config+0xd4>)
    c8be:	4798      	blx	r3
		return true;
    c8c0:	2301      	movs	r3, #1
    c8c2:	e055      	b.n	c970 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c8c4:	69bb      	ldr	r3, [r7, #24]
    c8c6:	2b00      	cmp	r3, #0
    c8c8:	d10a      	bne.n	c8e0 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c8ca:	4b2c      	ldr	r3, [pc, #176]	; (c97c <usbdc_set_config+0xd8>)
    c8cc:	681b      	ldr	r3, [r3, #0]
    c8ce:	6818      	ldr	r0, [r3, #0]
    c8d0:	4b2a      	ldr	r3, [pc, #168]	; (c97c <usbdc_set_config+0xd8>)
    c8d2:	681b      	ldr	r3, [r3, #0]
    c8d4:	685b      	ldr	r3, [r3, #4]
    c8d6:	79fa      	ldrb	r2, [r7, #7]
    c8d8:	4619      	mov	r1, r3
    c8da:	4b29      	ldr	r3, [pc, #164]	; (c980 <usbdc_set_config+0xdc>)
    c8dc:	4798      	blx	r3
    c8de:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    c8e0:	69bb      	ldr	r3, [r7, #24]
    c8e2:	2b00      	cmp	r3, #0
    c8e4:	d101      	bne.n	c8ea <usbdc_set_config+0x46>
		return false;
    c8e6:	2300      	movs	r3, #0
    c8e8:	e042      	b.n	c970 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    c8ea:	69b8      	ldr	r0, [r7, #24]
    c8ec:	4b25      	ldr	r3, [pc, #148]	; (c984 <usbdc_set_config+0xe0>)
    c8ee:	4798      	blx	r3
    c8f0:	4603      	mov	r3, r0
    c8f2:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    c8f4:	8abb      	ldrh	r3, [r7, #20]
    c8f6:	69ba      	ldr	r2, [r7, #24]
    c8f8:	4413      	add	r3, r2
    c8fa:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c8fc:	693b      	ldr	r3, [r7, #16]
    c8fe:	2204      	movs	r2, #4
    c900:	4619      	mov	r1, r3
    c902:	69b8      	ldr	r0, [r7, #24]
    c904:	4b20      	ldr	r3, [pc, #128]	; (c988 <usbdc_set_config+0xe4>)
    c906:	4798      	blx	r3
    c908:	4603      	mov	r3, r0
    c90a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    c90c:	e02c      	b.n	c968 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c90e:	68fb      	ldr	r3, [r7, #12]
    c910:	3302      	adds	r3, #2
    c912:	781b      	ldrb	r3, [r3, #0]
    c914:	7dfa      	ldrb	r2, [r7, #23]
    c916:	429a      	cmp	r2, r3
    c918:	d018      	beq.n	c94c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    c91a:	68fb      	ldr	r3, [r7, #12]
    c91c:	789b      	ldrb	r3, [r3, #2]
    c91e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c920:	4b16      	ldr	r3, [pc, #88]	; (c97c <usbdc_set_config+0xd8>)
    c922:	691b      	ldr	r3, [r3, #16]
    c924:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c926:	e00c      	b.n	c942 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c928:	69fb      	ldr	r3, [r7, #28]
    c92a:	685b      	ldr	r3, [r3, #4]
    c92c:	f107 020c 	add.w	r2, r7, #12
    c930:	2100      	movs	r1, #0
    c932:	69f8      	ldr	r0, [r7, #28]
    c934:	4798      	blx	r3
    c936:	4603      	mov	r3, r0
    c938:	2b00      	cmp	r3, #0
    c93a:	d006      	beq.n	c94a <usbdc_set_config+0xa6>
					func = func->next;
    c93c:	69fb      	ldr	r3, [r7, #28]
    c93e:	681b      	ldr	r3, [r3, #0]
    c940:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c942:	69fb      	ldr	r3, [r7, #28]
    c944:	2b00      	cmp	r3, #0
    c946:	d1ef      	bne.n	c928 <usbdc_set_config+0x84>
    c948:	e000      	b.n	c94c <usbdc_set_config+0xa8>
				} else {
					break;
    c94a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    c94c:	68fb      	ldr	r3, [r7, #12]
    c94e:	4618      	mov	r0, r3
    c950:	4b0e      	ldr	r3, [pc, #56]	; (c98c <usbdc_set_config+0xe8>)
    c952:	4798      	blx	r3
    c954:	4603      	mov	r3, r0
    c956:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c958:	68fb      	ldr	r3, [r7, #12]
    c95a:	6939      	ldr	r1, [r7, #16]
    c95c:	2204      	movs	r2, #4
    c95e:	4618      	mov	r0, r3
    c960:	4b09      	ldr	r3, [pc, #36]	; (c988 <usbdc_set_config+0xe4>)
    c962:	4798      	blx	r3
    c964:	4603      	mov	r3, r0
    c966:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    c968:	68fb      	ldr	r3, [r7, #12]
    c96a:	2b00      	cmp	r3, #0
    c96c:	d1cf      	bne.n	c90e <usbdc_set_config+0x6a>
	}
	return true;
    c96e:	2301      	movs	r3, #1
}
    c970:	4618      	mov	r0, r3
    c972:	3720      	adds	r7, #32
    c974:	46bd      	mov	sp, r7
    c976:	bd80      	pop	{r7, pc}
    c978:	0000c871 	.word	0x0000c871
    c97c:	20000fa4 	.word	0x20000fa4
    c980:	0000d215 	.word	0x0000d215
    c984:	0000c3c1 	.word	0x0000c3c1
    c988:	0000d155 	.word	0x0000d155
    c98c:	0000c39d 	.word	0x0000c39d

0000c990 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    c990:	b580      	push	{r7, lr}
    c992:	b082      	sub	sp, #8
    c994:	af00      	add	r7, sp, #0
    c996:	4603      	mov	r3, r0
    c998:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    c99a:	79fb      	ldrb	r3, [r7, #7]
    c99c:	4618      	mov	r0, r3
    c99e:	4b03      	ldr	r3, [pc, #12]	; (c9ac <usbdc_set_address+0x1c>)
    c9a0:	4798      	blx	r3
}
    c9a2:	bf00      	nop
    c9a4:	3708      	adds	r7, #8
    c9a6:	46bd      	mov	sp, r7
    c9a8:	bd80      	pop	{r7, pc}
    c9aa:	bf00      	nop
    c9ac:	00003401 	.word	0x00003401

0000c9b0 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    c9b0:	b590      	push	{r4, r7, lr}
    c9b2:	b087      	sub	sp, #28
    c9b4:	af00      	add	r7, sp, #0
    c9b6:	4603      	mov	r3, r0
    c9b8:	460a      	mov	r2, r1
    c9ba:	80fb      	strh	r3, [r7, #6]
    c9bc:	4613      	mov	r3, r2
    c9be:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    c9c0:	2300      	movs	r3, #0
    c9c2:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    c9c4:	693b      	ldr	r3, [r7, #16]
    c9c6:	2b00      	cmp	r3, #0
    c9c8:	d10b      	bne.n	c9e2 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c9ca:	4b43      	ldr	r3, [pc, #268]	; (cad8 <usbdc_set_interface+0x128>)
    c9cc:	681b      	ldr	r3, [r3, #0]
    c9ce:	6818      	ldr	r0, [r3, #0]
    c9d0:	4b41      	ldr	r3, [pc, #260]	; (cad8 <usbdc_set_interface+0x128>)
    c9d2:	681b      	ldr	r3, [r3, #0]
    c9d4:	6859      	ldr	r1, [r3, #4]
    c9d6:	4b40      	ldr	r3, [pc, #256]	; (cad8 <usbdc_set_interface+0x128>)
    c9d8:	7edb      	ldrb	r3, [r3, #27]
    c9da:	461a      	mov	r2, r3
    c9dc:	4b3f      	ldr	r3, [pc, #252]	; (cadc <usbdc_set_interface+0x12c>)
    c9de:	4798      	blx	r3
    c9e0:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    c9e2:	693b      	ldr	r3, [r7, #16]
    c9e4:	2b00      	cmp	r3, #0
    c9e6:	d101      	bne.n	c9ec <usbdc_set_interface+0x3c>
		return false;
    c9e8:	2300      	movs	r3, #0
    c9ea:	e071      	b.n	cad0 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    c9ec:	693b      	ldr	r3, [r7, #16]
    c9ee:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c9f0:	6938      	ldr	r0, [r7, #16]
    c9f2:	4b3b      	ldr	r3, [pc, #236]	; (cae0 <usbdc_set_interface+0x130>)
    c9f4:	4798      	blx	r3
    c9f6:	4603      	mov	r3, r0
    c9f8:	461a      	mov	r2, r3
    c9fa:	693b      	ldr	r3, [r7, #16]
    c9fc:	4413      	add	r3, r2
    c9fe:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    ca00:	68bb      	ldr	r3, [r7, #8]
    ca02:	68f9      	ldr	r1, [r7, #12]
    ca04:	2204      	movs	r2, #4
    ca06:	4618      	mov	r0, r3
    ca08:	4b36      	ldr	r3, [pc, #216]	; (cae4 <usbdc_set_interface+0x134>)
    ca0a:	4798      	blx	r3
    ca0c:	6138      	str	r0, [r7, #16]
    ca0e:	693b      	ldr	r3, [r7, #16]
    ca10:	2b00      	cmp	r3, #0
    ca12:	d113      	bne.n	ca3c <usbdc_set_interface+0x8c>
		return false;
    ca14:	2300      	movs	r3, #0
    ca16:	e05b      	b.n	cad0 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    ca18:	68bb      	ldr	r3, [r7, #8]
    ca1a:	4618      	mov	r0, r3
    ca1c:	4b32      	ldr	r3, [pc, #200]	; (cae8 <usbdc_set_interface+0x138>)
    ca1e:	4798      	blx	r3
    ca20:	4603      	mov	r3, r0
    ca22:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ca24:	68bb      	ldr	r3, [r7, #8]
    ca26:	68f9      	ldr	r1, [r7, #12]
    ca28:	2204      	movs	r2, #4
    ca2a:	4618      	mov	r0, r3
    ca2c:	4b2d      	ldr	r3, [pc, #180]	; (cae4 <usbdc_set_interface+0x134>)
    ca2e:	4798      	blx	r3
    ca30:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    ca32:	693b      	ldr	r3, [r7, #16]
    ca34:	2b00      	cmp	r3, #0
    ca36:	d101      	bne.n	ca3c <usbdc_set_interface+0x8c>
			return false;
    ca38:	2300      	movs	r3, #0
    ca3a:	e049      	b.n	cad0 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    ca3c:	693b      	ldr	r3, [r7, #16]
    ca3e:	3302      	adds	r3, #2
    ca40:	781b      	ldrb	r3, [r3, #0]
    ca42:	b29b      	uxth	r3, r3
    ca44:	88ba      	ldrh	r2, [r7, #4]
    ca46:	429a      	cmp	r2, r3
    ca48:	d1e6      	bne.n	ca18 <usbdc_set_interface+0x68>
    ca4a:	693b      	ldr	r3, [r7, #16]
    ca4c:	3303      	adds	r3, #3
    ca4e:	781b      	ldrb	r3, [r3, #0]
    ca50:	b29b      	uxth	r3, r3
    ca52:	88fa      	ldrh	r2, [r7, #6]
    ca54:	429a      	cmp	r2, r3
    ca56:	d1df      	bne.n	ca18 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    ca58:	693b      	ldr	r3, [r7, #16]
    ca5a:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    ca5c:	4b1e      	ldr	r3, [pc, #120]	; (cad8 <usbdc_set_interface+0x128>)
    ca5e:	691b      	ldr	r3, [r3, #16]
    ca60:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    ca62:	e031      	b.n	cac8 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    ca64:	697b      	ldr	r3, [r7, #20]
    ca66:	685b      	ldr	r3, [r3, #4]
    ca68:	f107 0208 	add.w	r2, r7, #8
    ca6c:	2101      	movs	r1, #1
    ca6e:	6978      	ldr	r0, [r7, #20]
    ca70:	4798      	blx	r3
    ca72:	4603      	mov	r3, r0
    ca74:	2b00      	cmp	r3, #0
    ca76:	d003      	beq.n	ca80 <usbdc_set_interface+0xd0>
			func = func->next;
    ca78:	697b      	ldr	r3, [r7, #20]
    ca7a:	681b      	ldr	r3, [r3, #0]
    ca7c:	617b      	str	r3, [r7, #20]
    ca7e:	e023      	b.n	cac8 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    ca80:	697b      	ldr	r3, [r7, #20]
    ca82:	685b      	ldr	r3, [r3, #4]
    ca84:	f107 0208 	add.w	r2, r7, #8
    ca88:	2100      	movs	r1, #0
    ca8a:	6978      	ldr	r0, [r7, #20]
    ca8c:	4798      	blx	r3
    ca8e:	4603      	mov	r3, r0
    ca90:	2b00      	cmp	r3, #0
    ca92:	d117      	bne.n	cac4 <usbdc_set_interface+0x114>
			if (alt_set) {
    ca94:	88fb      	ldrh	r3, [r7, #6]
    ca96:	2b00      	cmp	r3, #0
    ca98:	d00c      	beq.n	cab4 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    ca9a:	4b0f      	ldr	r3, [pc, #60]	; (cad8 <usbdc_set_interface+0x128>)
    ca9c:	7f5b      	ldrb	r3, [r3, #29]
    ca9e:	b25a      	sxtb	r2, r3
    caa0:	88bb      	ldrh	r3, [r7, #4]
    caa2:	2101      	movs	r1, #1
    caa4:	fa01 f303 	lsl.w	r3, r1, r3
    caa8:	b25b      	sxtb	r3, r3
    caaa:	4313      	orrs	r3, r2
    caac:	b25b      	sxtb	r3, r3
    caae:	b2da      	uxtb	r2, r3
    cab0:	4b09      	ldr	r3, [pc, #36]	; (cad8 <usbdc_set_interface+0x128>)
    cab2:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    cab4:	2300      	movs	r3, #0
    cab6:	2200      	movs	r2, #0
    cab8:	2100      	movs	r1, #0
    caba:	2000      	movs	r0, #0
    cabc:	4c0b      	ldr	r4, [pc, #44]	; (caec <usbdc_set_interface+0x13c>)
    cabe:	47a0      	blx	r4
			return true;
    cac0:	2301      	movs	r3, #1
    cac2:	e005      	b.n	cad0 <usbdc_set_interface+0x120>
		} else {
			return false;
    cac4:	2300      	movs	r3, #0
    cac6:	e003      	b.n	cad0 <usbdc_set_interface+0x120>
	while (NULL != func) {
    cac8:	697b      	ldr	r3, [r7, #20]
    caca:	2b00      	cmp	r3, #0
    cacc:	d1ca      	bne.n	ca64 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    cace:	2300      	movs	r3, #0
}
    cad0:	4618      	mov	r0, r3
    cad2:	371c      	adds	r7, #28
    cad4:	46bd      	mov	sp, r7
    cad6:	bd90      	pop	{r4, r7, pc}
    cad8:	20000fa4 	.word	0x20000fa4
    cadc:	0000d215 	.word	0x0000d215
    cae0:	0000c3c1 	.word	0x0000c3c1
    cae4:	0000d155 	.word	0x0000d155
    cae8:	0000c39d 	.word	0x0000c39d
    caec:	0000cec5 	.word	0x0000cec5

0000caf0 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    caf0:	b590      	push	{r4, r7, lr}
    caf2:	b083      	sub	sp, #12
    caf4:	af00      	add	r7, sp, #0
    caf6:	4603      	mov	r3, r0
    caf8:	6039      	str	r1, [r7, #0]
    cafa:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    cafc:	683b      	ldr	r3, [r7, #0]
    cafe:	785b      	ldrb	r3, [r3, #1]
    cb00:	3b01      	subs	r3, #1
    cb02:	2b0a      	cmp	r3, #10
    cb04:	d85b      	bhi.n	cbbe <usbdc_set_req+0xce>
    cb06:	a201      	add	r2, pc, #4	; (adr r2, cb0c <usbdc_set_req+0x1c>)
    cb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cb0c:	0000cb8b 	.word	0x0000cb8b
    cb10:	0000cbbf 	.word	0x0000cbbf
    cb14:	0000cb99 	.word	0x0000cb99
    cb18:	0000cbbf 	.word	0x0000cbbf
    cb1c:	0000cb39 	.word	0x0000cb39
    cb20:	0000cbbf 	.word	0x0000cbbf
    cb24:	0000cbbf 	.word	0x0000cbbf
    cb28:	0000cbbf 	.word	0x0000cbbf
    cb2c:	0000cb53 	.word	0x0000cb53
    cb30:	0000cbbf 	.word	0x0000cbbf
    cb34:	0000cba7 	.word	0x0000cba7
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cb38:	79f8      	ldrb	r0, [r7, #7]
    cb3a:	2301      	movs	r3, #1
    cb3c:	2200      	movs	r2, #0
    cb3e:	2100      	movs	r1, #0
    cb40:	4c21      	ldr	r4, [pc, #132]	; (cbc8 <usbdc_set_req+0xd8>)
    cb42:	47a0      	blx	r4
    cb44:	4603      	mov	r3, r0
    cb46:	2b00      	cmp	r3, #0
    cb48:	bf0c      	ite	eq
    cb4a:	2301      	moveq	r3, #1
    cb4c:	2300      	movne	r3, #0
    cb4e:	b2db      	uxtb	r3, r3
    cb50:	e036      	b.n	cbc0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    cb52:	683b      	ldr	r3, [r7, #0]
    cb54:	885b      	ldrh	r3, [r3, #2]
    cb56:	b29b      	uxth	r3, r3
    cb58:	b2db      	uxtb	r3, r3
    cb5a:	4618      	mov	r0, r3
    cb5c:	4b1b      	ldr	r3, [pc, #108]	; (cbcc <usbdc_set_req+0xdc>)
    cb5e:	4798      	blx	r3
    cb60:	4603      	mov	r3, r0
    cb62:	f083 0301 	eor.w	r3, r3, #1
    cb66:	b2db      	uxtb	r3, r3
    cb68:	2b00      	cmp	r3, #0
    cb6a:	d001      	beq.n	cb70 <usbdc_set_req+0x80>
			return false;
    cb6c:	2300      	movs	r3, #0
    cb6e:	e027      	b.n	cbc0 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cb70:	79f8      	ldrb	r0, [r7, #7]
    cb72:	2301      	movs	r3, #1
    cb74:	2200      	movs	r2, #0
    cb76:	2100      	movs	r1, #0
    cb78:	4c13      	ldr	r4, [pc, #76]	; (cbc8 <usbdc_set_req+0xd8>)
    cb7a:	47a0      	blx	r4
    cb7c:	4603      	mov	r3, r0
    cb7e:	2b00      	cmp	r3, #0
    cb80:	bf0c      	ite	eq
    cb82:	2301      	moveq	r3, #1
    cb84:	2300      	movne	r3, #0
    cb86:	b2db      	uxtb	r3, r3
    cb88:	e01a      	b.n	cbc0 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    cb8a:	79fb      	ldrb	r3, [r7, #7]
    cb8c:	6839      	ldr	r1, [r7, #0]
    cb8e:	4618      	mov	r0, r3
    cb90:	4b0f      	ldr	r3, [pc, #60]	; (cbd0 <usbdc_set_req+0xe0>)
    cb92:	4798      	blx	r3
    cb94:	4603      	mov	r3, r0
    cb96:	e013      	b.n	cbc0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    cb98:	79fb      	ldrb	r3, [r7, #7]
    cb9a:	6839      	ldr	r1, [r7, #0]
    cb9c:	4618      	mov	r0, r3
    cb9e:	4b0d      	ldr	r3, [pc, #52]	; (cbd4 <usbdc_set_req+0xe4>)
    cba0:	4798      	blx	r3
    cba2:	4603      	mov	r3, r0
    cba4:	e00c      	b.n	cbc0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    cba6:	683b      	ldr	r3, [r7, #0]
    cba8:	885b      	ldrh	r3, [r3, #2]
    cbaa:	b29a      	uxth	r2, r3
    cbac:	683b      	ldr	r3, [r7, #0]
    cbae:	889b      	ldrh	r3, [r3, #4]
    cbb0:	b29b      	uxth	r3, r3
    cbb2:	4619      	mov	r1, r3
    cbb4:	4610      	mov	r0, r2
    cbb6:	4b08      	ldr	r3, [pc, #32]	; (cbd8 <usbdc_set_req+0xe8>)
    cbb8:	4798      	blx	r3
    cbba:	4603      	mov	r3, r0
    cbbc:	e000      	b.n	cbc0 <usbdc_set_req+0xd0>
	default:
		return false;
    cbbe:	2300      	movs	r3, #0
	}
}
    cbc0:	4618      	mov	r0, r3
    cbc2:	370c      	adds	r7, #12
    cbc4:	46bd      	mov	sp, r7
    cbc6:	bd90      	pop	{r4, r7, pc}
    cbc8:	0000cec5 	.word	0x0000cec5
    cbcc:	0000c8a5 	.word	0x0000c8a5
    cbd0:	0000c7c1 	.word	0x0000c7c1
    cbd4:	0000c819 	.word	0x0000c819
    cbd8:	0000c9b1 	.word	0x0000c9b1

0000cbdc <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    cbdc:	b580      	push	{r7, lr}
    cbde:	b082      	sub	sp, #8
    cbe0:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    cbe2:	4b0a      	ldr	r3, [pc, #40]	; (cc0c <usbdc_sof_notify+0x30>)
    cbe4:	685b      	ldr	r3, [r3, #4]
    cbe6:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    cbe8:	e009      	b.n	cbfe <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    cbea:	687b      	ldr	r3, [r7, #4]
    cbec:	685b      	ldr	r3, [r3, #4]
    cbee:	2b00      	cmp	r3, #0
    cbf0:	d002      	beq.n	cbf8 <usbdc_sof_notify+0x1c>
			sof->cb();
    cbf2:	687b      	ldr	r3, [r7, #4]
    cbf4:	685b      	ldr	r3, [r3, #4]
    cbf6:	4798      	blx	r3
		}
		sof = sof->next;
    cbf8:	687b      	ldr	r3, [r7, #4]
    cbfa:	681b      	ldr	r3, [r3, #0]
    cbfc:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    cbfe:	687b      	ldr	r3, [r7, #4]
    cc00:	2b00      	cmp	r3, #0
    cc02:	d1f2      	bne.n	cbea <usbdc_sof_notify+0xe>
	}
}
    cc04:	bf00      	nop
    cc06:	3708      	adds	r7, #8
    cc08:	46bd      	mov	sp, r7
    cc0a:	bd80      	pop	{r7, pc}
    cc0c:	20000fa4 	.word	0x20000fa4

0000cc10 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    cc10:	b580      	push	{r7, lr}
    cc12:	b084      	sub	sp, #16
    cc14:	af00      	add	r7, sp, #0
    cc16:	4603      	mov	r3, r0
    cc18:	6039      	str	r1, [r7, #0]
    cc1a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    cc1c:	4b0b      	ldr	r3, [pc, #44]	; (cc4c <usbdc_change_notify+0x3c>)
    cc1e:	68db      	ldr	r3, [r3, #12]
    cc20:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    cc22:	e00c      	b.n	cc3e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    cc24:	68fb      	ldr	r3, [r7, #12]
    cc26:	685b      	ldr	r3, [r3, #4]
    cc28:	2b00      	cmp	r3, #0
    cc2a:	d005      	beq.n	cc38 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    cc2c:	68fb      	ldr	r3, [r7, #12]
    cc2e:	685b      	ldr	r3, [r3, #4]
    cc30:	79fa      	ldrb	r2, [r7, #7]
    cc32:	6839      	ldr	r1, [r7, #0]
    cc34:	4610      	mov	r0, r2
    cc36:	4798      	blx	r3
		}
		cg = cg->next;
    cc38:	68fb      	ldr	r3, [r7, #12]
    cc3a:	681b      	ldr	r3, [r3, #0]
    cc3c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    cc3e:	68fb      	ldr	r3, [r7, #12]
    cc40:	2b00      	cmp	r3, #0
    cc42:	d1ef      	bne.n	cc24 <usbdc_change_notify+0x14>
	}
}
    cc44:	bf00      	nop
    cc46:	3710      	adds	r7, #16
    cc48:	46bd      	mov	sp, r7
    cc4a:	bd80      	pop	{r7, pc}
    cc4c:	20000fa4 	.word	0x20000fa4

0000cc50 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cc50:	b580      	push	{r7, lr}
    cc52:	b084      	sub	sp, #16
    cc54:	af00      	add	r7, sp, #0
    cc56:	4603      	mov	r3, r0
    cc58:	6039      	str	r1, [r7, #0]
    cc5a:	71fb      	strb	r3, [r7, #7]
    cc5c:	4613      	mov	r3, r2
    cc5e:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    cc60:	4b12      	ldr	r3, [pc, #72]	; (ccac <usbdc_request_handler+0x5c>)
    cc62:	689b      	ldr	r3, [r3, #8]
    cc64:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    cc66:	e019      	b.n	cc9c <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    cc68:	68fb      	ldr	r3, [r7, #12]
    cc6a:	685b      	ldr	r3, [r3, #4]
    cc6c:	2b00      	cmp	r3, #0
    cc6e:	d012      	beq.n	cc96 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    cc70:	68fb      	ldr	r3, [r7, #12]
    cc72:	685b      	ldr	r3, [r3, #4]
    cc74:	79ba      	ldrb	r2, [r7, #6]
    cc76:	79f8      	ldrb	r0, [r7, #7]
    cc78:	6839      	ldr	r1, [r7, #0]
    cc7a:	4798      	blx	r3
    cc7c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    cc7e:	68bb      	ldr	r3, [r7, #8]
    cc80:	2b00      	cmp	r3, #0
    cc82:	d101      	bne.n	cc88 <usbdc_request_handler+0x38>
				return true;
    cc84:	2301      	movs	r3, #1
    cc86:	e00d      	b.n	cca4 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    cc88:	68bb      	ldr	r3, [r7, #8]
    cc8a:	f113 0f0a 	cmn.w	r3, #10
    cc8e:	d002      	beq.n	cc96 <usbdc_request_handler+0x46>
				return -1;
    cc90:	f04f 33ff 	mov.w	r3, #4294967295
    cc94:	e006      	b.n	cca4 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    cc96:	68fb      	ldr	r3, [r7, #12]
    cc98:	681b      	ldr	r3, [r3, #0]
    cc9a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    cc9c:	68fb      	ldr	r3, [r7, #12]
    cc9e:	2b00      	cmp	r3, #0
    cca0:	d1e2      	bne.n	cc68 <usbdc_request_handler+0x18>
	}
	return false;
    cca2:	2300      	movs	r3, #0
}
    cca4:	4618      	mov	r0, r3
    cca6:	3710      	adds	r7, #16
    cca8:	46bd      	mov	sp, r7
    ccaa:	bd80      	pop	{r7, pc}
    ccac:	20000fa4 	.word	0x20000fa4

0000ccb0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    ccb0:	b580      	push	{r7, lr}
    ccb2:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    ccb4:	4b01      	ldr	r3, [pc, #4]	; (ccbc <usbd_sof_cb+0xc>)
    ccb6:	4798      	blx	r3
}
    ccb8:	bf00      	nop
    ccba:	bd80      	pop	{r7, pc}
    ccbc:	0000cbdd 	.word	0x0000cbdd

0000ccc0 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    ccc0:	b580      	push	{r7, lr}
    ccc2:	b082      	sub	sp, #8
    ccc4:	af00      	add	r7, sp, #0
    ccc6:	4603      	mov	r3, r0
    ccc8:	6039      	str	r1, [r7, #0]
    ccca:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    cccc:	79fb      	ldrb	r3, [r7, #7]
    ccce:	2200      	movs	r2, #0
    ccd0:	6839      	ldr	r1, [r7, #0]
    ccd2:	4618      	mov	r0, r3
    ccd4:	4b14      	ldr	r3, [pc, #80]	; (cd28 <usbdc_cb_ctl_req+0x68>)
    ccd6:	4798      	blx	r3
    ccd8:	4603      	mov	r3, r0
    ccda:	f1b3 3fff 	cmp.w	r3, #4294967295
    ccde:	d00b      	beq.n	ccf8 <usbdc_cb_ctl_req+0x38>
    cce0:	2b01      	cmp	r3, #1
    cce2:	d007      	beq.n	ccf4 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    cce4:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    cce6:	683b      	ldr	r3, [r7, #0]
    cce8:	781b      	ldrb	r3, [r3, #0]
    ccea:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    ccee:	2b00      	cmp	r3, #0
    ccf0:	d007      	beq.n	cd02 <usbdc_cb_ctl_req+0x42>
    ccf2:	e003      	b.n	ccfc <usbdc_cb_ctl_req+0x3c>
		return true;
    ccf4:	2301      	movs	r3, #1
    ccf6:	e013      	b.n	cd20 <usbdc_cb_ctl_req+0x60>
		return false;
    ccf8:	2300      	movs	r3, #0
    ccfa:	e011      	b.n	cd20 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    ccfc:	2b80      	cmp	r3, #128	; 0x80
    ccfe:	d007      	beq.n	cd10 <usbdc_cb_ctl_req+0x50>
    cd00:	e00d      	b.n	cd1e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    cd02:	79fb      	ldrb	r3, [r7, #7]
    cd04:	6839      	ldr	r1, [r7, #0]
    cd06:	4618      	mov	r0, r3
    cd08:	4b08      	ldr	r3, [pc, #32]	; (cd2c <usbdc_cb_ctl_req+0x6c>)
    cd0a:	4798      	blx	r3
    cd0c:	4603      	mov	r3, r0
    cd0e:	e007      	b.n	cd20 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    cd10:	79fb      	ldrb	r3, [r7, #7]
    cd12:	6839      	ldr	r1, [r7, #0]
    cd14:	4618      	mov	r0, r3
    cd16:	4b06      	ldr	r3, [pc, #24]	; (cd30 <usbdc_cb_ctl_req+0x70>)
    cd18:	4798      	blx	r3
    cd1a:	4603      	mov	r3, r0
    cd1c:	e000      	b.n	cd20 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    cd1e:	2300      	movs	r3, #0
	}
}
    cd20:	4618      	mov	r0, r3
    cd22:	3708      	adds	r7, #8
    cd24:	46bd      	mov	sp, r7
    cd26:	bd80      	pop	{r7, pc}
    cd28:	0000cc51 	.word	0x0000cc51
    cd2c:	0000caf1 	.word	0x0000caf1
    cd30:	0000c719 	.word	0x0000c719

0000cd34 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    cd34:	b580      	push	{r7, lr}
    cd36:	b082      	sub	sp, #8
    cd38:	af00      	add	r7, sp, #0
    cd3a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    cd3c:	687b      	ldr	r3, [r7, #4]
    cd3e:	781b      	ldrb	r3, [r3, #0]
    cd40:	2b00      	cmp	r3, #0
    cd42:	d135      	bne.n	cdb0 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    cd44:	687b      	ldr	r3, [r7, #4]
    cd46:	785b      	ldrb	r3, [r3, #1]
    cd48:	2b05      	cmp	r3, #5
    cd4a:	d019      	beq.n	cd80 <usbdc_ctrl_status_end+0x4c>
    cd4c:	2b09      	cmp	r3, #9
    cd4e:	d000      	beq.n	cd52 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    cd50:	e02f      	b.n	cdb2 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    cd52:	687b      	ldr	r3, [r7, #4]
    cd54:	885b      	ldrh	r3, [r3, #2]
    cd56:	b29b      	uxth	r3, r3
    cd58:	b2da      	uxtb	r2, r3
    cd5a:	4b17      	ldr	r3, [pc, #92]	; (cdb8 <usbdc_ctrl_status_end+0x84>)
    cd5c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    cd5e:	687b      	ldr	r3, [r7, #4]
    cd60:	885b      	ldrh	r3, [r3, #2]
    cd62:	b29b      	uxth	r3, r3
    cd64:	2b00      	cmp	r3, #0
    cd66:	d001      	beq.n	cd6c <usbdc_ctrl_status_end+0x38>
    cd68:	2204      	movs	r2, #4
    cd6a:	e000      	b.n	cd6e <usbdc_ctrl_status_end+0x3a>
    cd6c:	2203      	movs	r2, #3
    cd6e:	4b12      	ldr	r3, [pc, #72]	; (cdb8 <usbdc_ctrl_status_end+0x84>)
    cd70:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    cd72:	4b11      	ldr	r3, [pc, #68]	; (cdb8 <usbdc_ctrl_status_end+0x84>)
    cd74:	7e9b      	ldrb	r3, [r3, #26]
    cd76:	4619      	mov	r1, r3
    cd78:	2001      	movs	r0, #1
    cd7a:	4b10      	ldr	r3, [pc, #64]	; (cdbc <usbdc_ctrl_status_end+0x88>)
    cd7c:	4798      	blx	r3
		break;
    cd7e:	e018      	b.n	cdb2 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    cd80:	687b      	ldr	r3, [r7, #4]
    cd82:	885b      	ldrh	r3, [r3, #2]
    cd84:	b29b      	uxth	r3, r3
    cd86:	b2db      	uxtb	r3, r3
    cd88:	4618      	mov	r0, r3
    cd8a:	4b0d      	ldr	r3, [pc, #52]	; (cdc0 <usbdc_ctrl_status_end+0x8c>)
    cd8c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    cd8e:	687b      	ldr	r3, [r7, #4]
    cd90:	885b      	ldrh	r3, [r3, #2]
    cd92:	b29b      	uxth	r3, r3
    cd94:	2b00      	cmp	r3, #0
    cd96:	d001      	beq.n	cd9c <usbdc_ctrl_status_end+0x68>
    cd98:	2203      	movs	r2, #3
    cd9a:	e000      	b.n	cd9e <usbdc_ctrl_status_end+0x6a>
    cd9c:	2202      	movs	r2, #2
    cd9e:	4b06      	ldr	r3, [pc, #24]	; (cdb8 <usbdc_ctrl_status_end+0x84>)
    cda0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    cda2:	4b05      	ldr	r3, [pc, #20]	; (cdb8 <usbdc_ctrl_status_end+0x84>)
    cda4:	7e9b      	ldrb	r3, [r3, #26]
    cda6:	4619      	mov	r1, r3
    cda8:	2001      	movs	r0, #1
    cdaa:	4b04      	ldr	r3, [pc, #16]	; (cdbc <usbdc_ctrl_status_end+0x88>)
    cdac:	4798      	blx	r3
		break;
    cdae:	e000      	b.n	cdb2 <usbdc_ctrl_status_end+0x7e>
		return;
    cdb0:	bf00      	nop
	}
}
    cdb2:	3708      	adds	r7, #8
    cdb4:	46bd      	mov	sp, r7
    cdb6:	bd80      	pop	{r7, pc}
    cdb8:	20000fa4 	.word	0x20000fa4
    cdbc:	0000cc11 	.word	0x0000cc11
    cdc0:	0000c991 	.word	0x0000c991

0000cdc4 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    cdc4:	b580      	push	{r7, lr}
    cdc6:	b082      	sub	sp, #8
    cdc8:	af00      	add	r7, sp, #0
    cdca:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    cdcc:	2201      	movs	r2, #1
    cdce:	6879      	ldr	r1, [r7, #4]
    cdd0:	2000      	movs	r0, #0
    cdd2:	4b03      	ldr	r3, [pc, #12]	; (cde0 <usbdc_ctrl_data_end+0x1c>)
    cdd4:	4798      	blx	r3
	return false;
    cdd6:	2300      	movs	r3, #0
}
    cdd8:	4618      	mov	r0, r3
    cdda:	3708      	adds	r7, #8
    cddc:	46bd      	mov	sp, r7
    cdde:	bd80      	pop	{r7, pc}
    cde0:	0000cc51 	.word	0x0000cc51

0000cde4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    cde4:	b580      	push	{r7, lr}
    cde6:	b082      	sub	sp, #8
    cde8:	af00      	add	r7, sp, #0
    cdea:	4603      	mov	r3, r0
    cdec:	603a      	str	r2, [r7, #0]
    cdee:	71fb      	strb	r3, [r7, #7]
    cdf0:	460b      	mov	r3, r1
    cdf2:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    cdf4:	79bb      	ldrb	r3, [r7, #6]
    cdf6:	2b00      	cmp	r3, #0
    cdf8:	d002      	beq.n	ce00 <usbdc_cb_ctl_done+0x1c>
    cdfa:	2b01      	cmp	r3, #1
    cdfc:	d004      	beq.n	ce08 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    cdfe:	e008      	b.n	ce12 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    ce00:	6838      	ldr	r0, [r7, #0]
    ce02:	4b06      	ldr	r3, [pc, #24]	; (ce1c <usbdc_cb_ctl_done+0x38>)
    ce04:	4798      	blx	r3
		break;
    ce06:	e004      	b.n	ce12 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    ce08:	6838      	ldr	r0, [r7, #0]
    ce0a:	4b05      	ldr	r3, [pc, #20]	; (ce20 <usbdc_cb_ctl_done+0x3c>)
    ce0c:	4798      	blx	r3
    ce0e:	4603      	mov	r3, r0
    ce10:	e000      	b.n	ce14 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    ce12:	2300      	movs	r3, #0
}
    ce14:	4618      	mov	r0, r3
    ce16:	3708      	adds	r7, #8
    ce18:	46bd      	mov	sp, r7
    ce1a:	bd80      	pop	{r7, pc}
    ce1c:	0000cd35 	.word	0x0000cd35
    ce20:	0000cdc5 	.word	0x0000cdc5

0000ce24 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    ce24:	b580      	push	{r7, lr}
    ce26:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    ce28:	4b10      	ldr	r3, [pc, #64]	; (ce6c <usbdc_reset+0x48>)
    ce2a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    ce2c:	4b10      	ldr	r3, [pc, #64]	; (ce70 <usbdc_reset+0x4c>)
    ce2e:	2202      	movs	r2, #2
    ce30:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    ce32:	4b0f      	ldr	r3, [pc, #60]	; (ce70 <usbdc_reset+0x4c>)
    ce34:	2200      	movs	r2, #0
    ce36:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    ce38:	4b0d      	ldr	r3, [pc, #52]	; (ce70 <usbdc_reset+0x4c>)
    ce3a:	2200      	movs	r2, #0
    ce3c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    ce3e:	2000      	movs	r0, #0
    ce40:	4b0c      	ldr	r3, [pc, #48]	; (ce74 <usbdc_reset+0x50>)
    ce42:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    ce44:	4b0a      	ldr	r3, [pc, #40]	; (ce70 <usbdc_reset+0x4c>)
    ce46:	7f1b      	ldrb	r3, [r3, #28]
    ce48:	4618      	mov	r0, r3
    ce4a:	4b0b      	ldr	r3, [pc, #44]	; (ce78 <usbdc_reset+0x54>)
    ce4c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    ce4e:	4a0b      	ldr	r2, [pc, #44]	; (ce7c <usbdc_reset+0x58>)
    ce50:	2100      	movs	r1, #0
    ce52:	2000      	movs	r0, #0
    ce54:	4b0a      	ldr	r3, [pc, #40]	; (ce80 <usbdc_reset+0x5c>)
    ce56:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    ce58:	4a0a      	ldr	r2, [pc, #40]	; (ce84 <usbdc_reset+0x60>)
    ce5a:	2102      	movs	r1, #2
    ce5c:	2000      	movs	r0, #0
    ce5e:	4b08      	ldr	r3, [pc, #32]	; (ce80 <usbdc_reset+0x5c>)
    ce60:	4798      	blx	r3
	usb_d_ep_enable(0);
    ce62:	2000      	movs	r0, #0
    ce64:	4b08      	ldr	r3, [pc, #32]	; (ce88 <usbdc_reset+0x64>)
    ce66:	4798      	blx	r3
}
    ce68:	bf00      	nop
    ce6a:	bd80      	pop	{r7, pc}
    ce6c:	0000c871 	.word	0x0000c871
    ce70:	20000fa4 	.word	0x20000fa4
    ce74:	000034e5 	.word	0x000034e5
    ce78:	00003421 	.word	0x00003421
    ce7c:	0000ccc1 	.word	0x0000ccc1
    ce80:	00003839 	.word	0x00003839
    ce84:	0000cde5 	.word	0x0000cde5
    ce88:	00003535 	.word	0x00003535

0000ce8c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    ce8c:	b580      	push	{r7, lr}
    ce8e:	b082      	sub	sp, #8
    ce90:	af00      	add	r7, sp, #0
    ce92:	4603      	mov	r3, r0
    ce94:	6039      	str	r1, [r7, #0]
    ce96:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    ce98:	79fb      	ldrb	r3, [r7, #7]
    ce9a:	2b00      	cmp	r3, #0
    ce9c:	d002      	beq.n	cea4 <usbd_event_cb+0x18>
    ce9e:	2b01      	cmp	r3, #1
    cea0:	d005      	beq.n	ceae <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    cea2:	e007      	b.n	ceb4 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    cea4:	6839      	ldr	r1, [r7, #0]
    cea6:	2000      	movs	r0, #0
    cea8:	4b04      	ldr	r3, [pc, #16]	; (cebc <usbd_event_cb+0x30>)
    ceaa:	4798      	blx	r3
		break;
    ceac:	e002      	b.n	ceb4 <usbd_event_cb+0x28>
		usbdc_reset();
    ceae:	4b04      	ldr	r3, [pc, #16]	; (cec0 <usbd_event_cb+0x34>)
    ceb0:	4798      	blx	r3
		break;
    ceb2:	bf00      	nop
	}
}
    ceb4:	bf00      	nop
    ceb6:	3708      	adds	r7, #8
    ceb8:	46bd      	mov	sp, r7
    ceba:	bd80      	pop	{r7, pc}
    cebc:	0000cc11 	.word	0x0000cc11
    cec0:	0000ce25 	.word	0x0000ce25

0000cec4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    cec4:	b580      	push	{r7, lr}
    cec6:	b088      	sub	sp, #32
    cec8:	af00      	add	r7, sp, #0
    ceca:	60b9      	str	r1, [r7, #8]
    cecc:	607a      	str	r2, [r7, #4]
    cece:	461a      	mov	r2, r3
    ced0:	4603      	mov	r3, r0
    ced2:	73fb      	strb	r3, [r7, #15]
    ced4:	4613      	mov	r3, r2
    ced6:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    ced8:	68bb      	ldr	r3, [r7, #8]
    ceda:	617b      	str	r3, [r7, #20]
    cedc:	687b      	ldr	r3, [r7, #4]
    cede:	61bb      	str	r3, [r7, #24]
    cee0:	7bfb      	ldrb	r3, [r7, #15]
    cee2:	773b      	strb	r3, [r7, #28]
    cee4:	7bbb      	ldrb	r3, [r7, #14]
    cee6:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    cee8:	f107 0314 	add.w	r3, r7, #20
    ceec:	4618      	mov	r0, r3
    ceee:	4b03      	ldr	r3, [pc, #12]	; (cefc <usbdc_xfer+0x38>)
    cef0:	4798      	blx	r3
    cef2:	4603      	mov	r3, r0
}
    cef4:	4618      	mov	r0, r3
    cef6:	3720      	adds	r7, #32
    cef8:	46bd      	mov	sp, r7
    cefa:	bd80      	pop	{r7, pc}
    cefc:	000035a5 	.word	0x000035a5

0000cf00 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    cf00:	b580      	push	{r7, lr}
    cf02:	b082      	sub	sp, #8
    cf04:	af00      	add	r7, sp, #0
    cf06:	4603      	mov	r3, r0
    cf08:	6039      	str	r1, [r7, #0]
    cf0a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    cf0c:	79fb      	ldrb	r3, [r7, #7]
    cf0e:	2b01      	cmp	r3, #1
    cf10:	d009      	beq.n	cf26 <usbdc_register_handler+0x26>
    cf12:	2b02      	cmp	r3, #2
    cf14:	d00c      	beq.n	cf30 <usbdc_register_handler+0x30>
    cf16:	2b00      	cmp	r3, #0
    cf18:	d000      	beq.n	cf1c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    cf1a:	e00e      	b.n	cf3a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    cf1c:	6839      	ldr	r1, [r7, #0]
    cf1e:	4809      	ldr	r0, [pc, #36]	; (cf44 <usbdc_register_handler+0x44>)
    cf20:	4b09      	ldr	r3, [pc, #36]	; (cf48 <usbdc_register_handler+0x48>)
    cf22:	4798      	blx	r3
		break;
    cf24:	e009      	b.n	cf3a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    cf26:	6839      	ldr	r1, [r7, #0]
    cf28:	4808      	ldr	r0, [pc, #32]	; (cf4c <usbdc_register_handler+0x4c>)
    cf2a:	4b07      	ldr	r3, [pc, #28]	; (cf48 <usbdc_register_handler+0x48>)
    cf2c:	4798      	blx	r3
		break;
    cf2e:	e004      	b.n	cf3a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    cf30:	6839      	ldr	r1, [r7, #0]
    cf32:	4807      	ldr	r0, [pc, #28]	; (cf50 <usbdc_register_handler+0x50>)
    cf34:	4b04      	ldr	r3, [pc, #16]	; (cf48 <usbdc_register_handler+0x48>)
    cf36:	4798      	blx	r3
		break;
    cf38:	bf00      	nop
	}
}
    cf3a:	bf00      	nop
    cf3c:	3708      	adds	r7, #8
    cf3e:	46bd      	mov	sp, r7
    cf40:	bd80      	pop	{r7, pc}
    cf42:	bf00      	nop
    cf44:	20000fa8 	.word	0x20000fa8
    cf48:	00003991 	.word	0x00003991
    cf4c:	20000fac 	.word	0x20000fac
    cf50:	20000fb0 	.word	0x20000fb0

0000cf54 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    cf54:	b580      	push	{r7, lr}
    cf56:	b084      	sub	sp, #16
    cf58:	af00      	add	r7, sp, #0
    cf5a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    cf5c:	687b      	ldr	r3, [r7, #4]
    cf5e:	2b00      	cmp	r3, #0
    cf60:	bf14      	ite	ne
    cf62:	2301      	movne	r3, #1
    cf64:	2300      	moveq	r3, #0
    cf66:	b2db      	uxtb	r3, r3
    cf68:	f240 3255 	movw	r2, #853	; 0x355
    cf6c:	4910      	ldr	r1, [pc, #64]	; (cfb0 <usbdc_init+0x5c>)
    cf6e:	4618      	mov	r0, r3
    cf70:	4b10      	ldr	r3, [pc, #64]	; (cfb4 <usbdc_init+0x60>)
    cf72:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    cf74:	4b10      	ldr	r3, [pc, #64]	; (cfb8 <usbdc_init+0x64>)
    cf76:	4798      	blx	r3
    cf78:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    cf7a:	68fb      	ldr	r3, [r7, #12]
    cf7c:	2b00      	cmp	r3, #0
    cf7e:	da01      	bge.n	cf84 <usbdc_init+0x30>
		return rc;
    cf80:	68fb      	ldr	r3, [r7, #12]
    cf82:	e010      	b.n	cfa6 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    cf84:	2220      	movs	r2, #32
    cf86:	2100      	movs	r1, #0
    cf88:	480c      	ldr	r0, [pc, #48]	; (cfbc <usbdc_init+0x68>)
    cf8a:	4b0d      	ldr	r3, [pc, #52]	; (cfc0 <usbdc_init+0x6c>)
    cf8c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    cf8e:	4a0b      	ldr	r2, [pc, #44]	; (cfbc <usbdc_init+0x68>)
    cf90:	687b      	ldr	r3, [r7, #4]
    cf92:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    cf94:	490b      	ldr	r1, [pc, #44]	; (cfc4 <usbdc_init+0x70>)
    cf96:	2000      	movs	r0, #0
    cf98:	4b0b      	ldr	r3, [pc, #44]	; (cfc8 <usbdc_init+0x74>)
    cf9a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    cf9c:	490b      	ldr	r1, [pc, #44]	; (cfcc <usbdc_init+0x78>)
    cf9e:	2001      	movs	r0, #1
    cfa0:	4b09      	ldr	r3, [pc, #36]	; (cfc8 <usbdc_init+0x74>)
    cfa2:	4798      	blx	r3

	return 0;
    cfa4:	2300      	movs	r3, #0
}
    cfa6:	4618      	mov	r0, r3
    cfa8:	3710      	adds	r7, #16
    cfaa:	46bd      	mov	sp, r7
    cfac:	bd80      	pop	{r7, pc}
    cfae:	bf00      	nop
    cfb0:	0000f174 	.word	0x0000f174
    cfb4:	000038b5 	.word	0x000038b5
    cfb8:	0000330d 	.word	0x0000330d
    cfbc:	20000fa4 	.word	0x20000fa4
    cfc0:	0000ebd5 	.word	0x0000ebd5
    cfc4:	0000ccb1 	.word	0x0000ccb1
    cfc8:	000033b9 	.word	0x000033b9
    cfcc:	0000ce8d 	.word	0x0000ce8d

0000cfd0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    cfd0:	b580      	push	{r7, lr}
    cfd2:	b082      	sub	sp, #8
    cfd4:	af00      	add	r7, sp, #0
    cfd6:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    cfd8:	6879      	ldr	r1, [r7, #4]
    cfda:	4803      	ldr	r0, [pc, #12]	; (cfe8 <usbdc_register_function+0x18>)
    cfdc:	4b03      	ldr	r3, [pc, #12]	; (cfec <usbdc_register_function+0x1c>)
    cfde:	4798      	blx	r3
}
    cfe0:	bf00      	nop
    cfe2:	3708      	adds	r7, #8
    cfe4:	46bd      	mov	sp, r7
    cfe6:	bd80      	pop	{r7, pc}
    cfe8:	20000fb4 	.word	0x20000fb4
    cfec:	00003991 	.word	0x00003991

0000cff0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    cff0:	b580      	push	{r7, lr}
    cff2:	b082      	sub	sp, #8
    cff4:	af00      	add	r7, sp, #0
    cff6:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    cff8:	4b0f      	ldr	r3, [pc, #60]	; (d038 <usbdc_start+0x48>)
    cffa:	7e9b      	ldrb	r3, [r3, #26]
    cffc:	2b00      	cmp	r3, #0
    cffe:	d002      	beq.n	d006 <usbdc_start+0x16>
		return ERR_BUSY;
    d000:	f06f 0303 	mvn.w	r3, #3
    d004:	e013      	b.n	d02e <usbdc_start+0x3e>
	}

	if (desces) {
    d006:	687b      	ldr	r3, [r7, #4]
    d008:	2b00      	cmp	r3, #0
    d00a:	d00e      	beq.n	d02a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    d00c:	4a0a      	ldr	r2, [pc, #40]	; (d038 <usbdc_start+0x48>)
    d00e:	687b      	ldr	r3, [r7, #4]
    d010:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d012:	687b      	ldr	r3, [r7, #4]
    d014:	681b      	ldr	r3, [r3, #0]
    d016:	79da      	ldrb	r2, [r3, #7]
    d018:	4b07      	ldr	r3, [pc, #28]	; (d038 <usbdc_start+0x48>)
    d01a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d01c:	4b06      	ldr	r3, [pc, #24]	; (d038 <usbdc_start+0x48>)
    d01e:	2201      	movs	r2, #1
    d020:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d022:	4b06      	ldr	r3, [pc, #24]	; (d03c <usbdc_start+0x4c>)
    d024:	4798      	blx	r3
	return ERR_NONE;
    d026:	2300      	movs	r3, #0
    d028:	e001      	b.n	d02e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    d02a:	f06f 0308 	mvn.w	r3, #8
}
    d02e:	4618      	mov	r0, r3
    d030:	3708      	adds	r7, #8
    d032:	46bd      	mov	sp, r7
    d034:	bd80      	pop	{r7, pc}
    d036:	bf00      	nop
    d038:	20000fa4 	.word	0x20000fa4
    d03c:	000033dd 	.word	0x000033dd

0000d040 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    d040:	b580      	push	{r7, lr}
    d042:	af00      	add	r7, sp, #0
	usb_d_attach();
    d044:	4b01      	ldr	r3, [pc, #4]	; (d04c <usbdc_attach+0xc>)
    d046:	4798      	blx	r3
}
    d048:	bf00      	nop
    d04a:	bd80      	pop	{r7, pc}
    d04c:	000033f1 	.word	0x000033f1

0000d050 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    d050:	b480      	push	{r7}
    d052:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    d054:	4b03      	ldr	r3, [pc, #12]	; (d064 <usbdc_get_ctrl_buffer+0x14>)
    d056:	695b      	ldr	r3, [r3, #20]
}
    d058:	4618      	mov	r0, r3
    d05a:	46bd      	mov	sp, r7
    d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d060:	4770      	bx	lr
    d062:	bf00      	nop
    d064:	20000fa4 	.word	0x20000fa4

0000d068 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    d068:	b480      	push	{r7}
    d06a:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    d06c:	4b07      	ldr	r3, [pc, #28]	; (d08c <usbdc_get_state+0x24>)
    d06e:	7e9b      	ldrb	r3, [r3, #26]
    d070:	f003 0310 	and.w	r3, r3, #16
    d074:	2b00      	cmp	r3, #0
    d076:	d001      	beq.n	d07c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    d078:	2310      	movs	r3, #16
    d07a:	e001      	b.n	d080 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    d07c:	4b03      	ldr	r3, [pc, #12]	; (d08c <usbdc_get_state+0x24>)
    d07e:	7e9b      	ldrb	r3, [r3, #26]
}
    d080:	4618      	mov	r0, r3
    d082:	46bd      	mov	sp, r7
    d084:	f85d 7b04 	ldr.w	r7, [sp], #4
    d088:	4770      	bx	lr
    d08a:	bf00      	nop
    d08c:	20000fa4 	.word	0x20000fa4

0000d090 <usb_get_u16>:
{
    d090:	b480      	push	{r7}
    d092:	b083      	sub	sp, #12
    d094:	af00      	add	r7, sp, #0
    d096:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d098:	687b      	ldr	r3, [r7, #4]
    d09a:	781b      	ldrb	r3, [r3, #0]
    d09c:	b29a      	uxth	r2, r3
    d09e:	687b      	ldr	r3, [r7, #4]
    d0a0:	3301      	adds	r3, #1
    d0a2:	781b      	ldrb	r3, [r3, #0]
    d0a4:	b29b      	uxth	r3, r3
    d0a6:	021b      	lsls	r3, r3, #8
    d0a8:	b29b      	uxth	r3, r3
    d0aa:	4413      	add	r3, r2
    d0ac:	b29b      	uxth	r3, r3
}
    d0ae:	4618      	mov	r0, r3
    d0b0:	370c      	adds	r7, #12
    d0b2:	46bd      	mov	sp, r7
    d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0b8:	4770      	bx	lr

0000d0ba <usb_desc_len>:
{
    d0ba:	b480      	push	{r7}
    d0bc:	b083      	sub	sp, #12
    d0be:	af00      	add	r7, sp, #0
    d0c0:	6078      	str	r0, [r7, #4]
	return desc[0];
    d0c2:	687b      	ldr	r3, [r7, #4]
    d0c4:	781b      	ldrb	r3, [r3, #0]
}
    d0c6:	4618      	mov	r0, r3
    d0c8:	370c      	adds	r7, #12
    d0ca:	46bd      	mov	sp, r7
    d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0d0:	4770      	bx	lr

0000d0d2 <usb_desc_type>:
{
    d0d2:	b480      	push	{r7}
    d0d4:	b083      	sub	sp, #12
    d0d6:	af00      	add	r7, sp, #0
    d0d8:	6078      	str	r0, [r7, #4]
	return desc[1];
    d0da:	687b      	ldr	r3, [r7, #4]
    d0dc:	3301      	adds	r3, #1
    d0de:	781b      	ldrb	r3, [r3, #0]
}
    d0e0:	4618      	mov	r0, r3
    d0e2:	370c      	adds	r7, #12
    d0e4:	46bd      	mov	sp, r7
    d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0ea:	4770      	bx	lr

0000d0ec <usb_desc_next>:
{
    d0ec:	b580      	push	{r7, lr}
    d0ee:	b082      	sub	sp, #8
    d0f0:	af00      	add	r7, sp, #0
    d0f2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d0f4:	6878      	ldr	r0, [r7, #4]
    d0f6:	4b05      	ldr	r3, [pc, #20]	; (d10c <usb_desc_next+0x20>)
    d0f8:	4798      	blx	r3
    d0fa:	4603      	mov	r3, r0
    d0fc:	461a      	mov	r2, r3
    d0fe:	687b      	ldr	r3, [r7, #4]
    d100:	4413      	add	r3, r2
}
    d102:	4618      	mov	r0, r3
    d104:	3708      	adds	r7, #8
    d106:	46bd      	mov	sp, r7
    d108:	bd80      	pop	{r7, pc}
    d10a:	bf00      	nop
    d10c:	0000d0bb 	.word	0x0000d0bb

0000d110 <usb_cfg_desc_total_len>:
{
    d110:	b580      	push	{r7, lr}
    d112:	b082      	sub	sp, #8
    d114:	af00      	add	r7, sp, #0
    d116:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d118:	687b      	ldr	r3, [r7, #4]
    d11a:	3302      	adds	r3, #2
    d11c:	4618      	mov	r0, r3
    d11e:	4b03      	ldr	r3, [pc, #12]	; (d12c <usb_cfg_desc_total_len+0x1c>)
    d120:	4798      	blx	r3
    d122:	4603      	mov	r3, r0
}
    d124:	4618      	mov	r0, r3
    d126:	3708      	adds	r7, #8
    d128:	46bd      	mov	sp, r7
    d12a:	bd80      	pop	{r7, pc}
    d12c:	0000d091 	.word	0x0000d091

0000d130 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    d130:	b580      	push	{r7, lr}
    d132:	b082      	sub	sp, #8
    d134:	af00      	add	r7, sp, #0
    d136:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d138:	6878      	ldr	r0, [r7, #4]
    d13a:	4b05      	ldr	r3, [pc, #20]	; (d150 <usb_cfg_desc_next+0x20>)
    d13c:	4798      	blx	r3
    d13e:	4603      	mov	r3, r0
    d140:	461a      	mov	r2, r3
    d142:	687b      	ldr	r3, [r7, #4]
    d144:	4413      	add	r3, r2
}
    d146:	4618      	mov	r0, r3
    d148:	3708      	adds	r7, #8
    d14a:	46bd      	mov	sp, r7
    d14c:	bd80      	pop	{r7, pc}
    d14e:	bf00      	nop
    d150:	0000d111 	.word	0x0000d111

0000d154 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    d154:	b580      	push	{r7, lr}
    d156:	b084      	sub	sp, #16
    d158:	af00      	add	r7, sp, #0
    d15a:	60f8      	str	r0, [r7, #12]
    d15c:	60b9      	str	r1, [r7, #8]
    d15e:	4613      	mov	r3, r2
    d160:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d162:	e015      	b.n	d190 <usb_find_desc+0x3c>
		_desc_len_check();
    d164:	68f8      	ldr	r0, [r7, #12]
    d166:	4b0f      	ldr	r3, [pc, #60]	; (d1a4 <usb_find_desc+0x50>)
    d168:	4798      	blx	r3
    d16a:	4603      	mov	r3, r0
    d16c:	2b01      	cmp	r3, #1
    d16e:	d801      	bhi.n	d174 <usb_find_desc+0x20>
    d170:	2300      	movs	r3, #0
    d172:	e012      	b.n	d19a <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    d174:	68f8      	ldr	r0, [r7, #12]
    d176:	4b0c      	ldr	r3, [pc, #48]	; (d1a8 <usb_find_desc+0x54>)
    d178:	4798      	blx	r3
    d17a:	4603      	mov	r3, r0
    d17c:	461a      	mov	r2, r3
    d17e:	79fb      	ldrb	r3, [r7, #7]
    d180:	4293      	cmp	r3, r2
    d182:	d101      	bne.n	d188 <usb_find_desc+0x34>
			return desc;
    d184:	68fb      	ldr	r3, [r7, #12]
    d186:	e008      	b.n	d19a <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    d188:	68f8      	ldr	r0, [r7, #12]
    d18a:	4b08      	ldr	r3, [pc, #32]	; (d1ac <usb_find_desc+0x58>)
    d18c:	4798      	blx	r3
    d18e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d190:	68fa      	ldr	r2, [r7, #12]
    d192:	68bb      	ldr	r3, [r7, #8]
    d194:	429a      	cmp	r2, r3
    d196:	d3e5      	bcc.n	d164 <usb_find_desc+0x10>
	}
	return NULL;
    d198:	2300      	movs	r3, #0
}
    d19a:	4618      	mov	r0, r3
    d19c:	3710      	adds	r7, #16
    d19e:	46bd      	mov	sp, r7
    d1a0:	bd80      	pop	{r7, pc}
    d1a2:	bf00      	nop
    d1a4:	0000d0bb 	.word	0x0000d0bb
    d1a8:	0000d0d3 	.word	0x0000d0d3
    d1ac:	0000d0ed 	.word	0x0000d0ed

0000d1b0 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    d1b0:	b580      	push	{r7, lr}
    d1b2:	b082      	sub	sp, #8
    d1b4:	af00      	add	r7, sp, #0
    d1b6:	6078      	str	r0, [r7, #4]
    d1b8:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d1ba:	e019      	b.n	d1f0 <usb_find_ep_desc+0x40>
		_desc_len_check();
    d1bc:	6878      	ldr	r0, [r7, #4]
    d1be:	4b12      	ldr	r3, [pc, #72]	; (d208 <usb_find_ep_desc+0x58>)
    d1c0:	4798      	blx	r3
    d1c2:	4603      	mov	r3, r0
    d1c4:	2b01      	cmp	r3, #1
    d1c6:	d801      	bhi.n	d1cc <usb_find_ep_desc+0x1c>
    d1c8:	2300      	movs	r3, #0
    d1ca:	e018      	b.n	d1fe <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d1cc:	6878      	ldr	r0, [r7, #4]
    d1ce:	4b0f      	ldr	r3, [pc, #60]	; (d20c <usb_find_ep_desc+0x5c>)
    d1d0:	4798      	blx	r3
    d1d2:	4603      	mov	r3, r0
    d1d4:	2b04      	cmp	r3, #4
    d1d6:	d010      	beq.n	d1fa <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d1d8:	6878      	ldr	r0, [r7, #4]
    d1da:	4b0c      	ldr	r3, [pc, #48]	; (d20c <usb_find_ep_desc+0x5c>)
    d1dc:	4798      	blx	r3
    d1de:	4603      	mov	r3, r0
    d1e0:	2b05      	cmp	r3, #5
    d1e2:	d101      	bne.n	d1e8 <usb_find_ep_desc+0x38>
			return desc;
    d1e4:	687b      	ldr	r3, [r7, #4]
    d1e6:	e00a      	b.n	d1fe <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    d1e8:	6878      	ldr	r0, [r7, #4]
    d1ea:	4b09      	ldr	r3, [pc, #36]	; (d210 <usb_find_ep_desc+0x60>)
    d1ec:	4798      	blx	r3
    d1ee:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    d1f0:	687a      	ldr	r2, [r7, #4]
    d1f2:	683b      	ldr	r3, [r7, #0]
    d1f4:	429a      	cmp	r2, r3
    d1f6:	d3e1      	bcc.n	d1bc <usb_find_ep_desc+0xc>
    d1f8:	e000      	b.n	d1fc <usb_find_ep_desc+0x4c>
			break;
    d1fa:	bf00      	nop
	}
	return NULL;
    d1fc:	2300      	movs	r3, #0
}
    d1fe:	4618      	mov	r0, r3
    d200:	3708      	adds	r7, #8
    d202:	46bd      	mov	sp, r7
    d204:	bd80      	pop	{r7, pc}
    d206:	bf00      	nop
    d208:	0000d0bb 	.word	0x0000d0bb
    d20c:	0000d0d3 	.word	0x0000d0d3
    d210:	0000d0ed 	.word	0x0000d0ed

0000d214 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d214:	b580      	push	{r7, lr}
    d216:	b084      	sub	sp, #16
    d218:	af00      	add	r7, sp, #0
    d21a:	60f8      	str	r0, [r7, #12]
    d21c:	60b9      	str	r1, [r7, #8]
    d21e:	4613      	mov	r3, r2
    d220:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    d222:	2202      	movs	r2, #2
    d224:	68b9      	ldr	r1, [r7, #8]
    d226:	68f8      	ldr	r0, [r7, #12]
    d228:	4b15      	ldr	r3, [pc, #84]	; (d280 <usb_find_cfg_desc+0x6c>)
    d22a:	4798      	blx	r3
    d22c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    d22e:	68fb      	ldr	r3, [r7, #12]
    d230:	2b00      	cmp	r3, #0
    d232:	d11a      	bne.n	d26a <usb_find_cfg_desc+0x56>
		return NULL;
    d234:	2300      	movs	r3, #0
    d236:	e01f      	b.n	d278 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    d238:	68f8      	ldr	r0, [r7, #12]
    d23a:	4b12      	ldr	r3, [pc, #72]	; (d284 <usb_find_cfg_desc+0x70>)
    d23c:	4798      	blx	r3
    d23e:	4603      	mov	r3, r0
    d240:	2b01      	cmp	r3, #1
    d242:	d801      	bhi.n	d248 <usb_find_cfg_desc+0x34>
    d244:	2300      	movs	r3, #0
    d246:	e017      	b.n	d278 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    d248:	68fb      	ldr	r3, [r7, #12]
    d24a:	3301      	adds	r3, #1
    d24c:	781b      	ldrb	r3, [r3, #0]
    d24e:	2b02      	cmp	r3, #2
    d250:	d110      	bne.n	d274 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    d252:	68fb      	ldr	r3, [r7, #12]
    d254:	3305      	adds	r3, #5
    d256:	781b      	ldrb	r3, [r3, #0]
    d258:	79fa      	ldrb	r2, [r7, #7]
    d25a:	429a      	cmp	r2, r3
    d25c:	d101      	bne.n	d262 <usb_find_cfg_desc+0x4e>
			return desc;
    d25e:	68fb      	ldr	r3, [r7, #12]
    d260:	e00a      	b.n	d278 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    d262:	68f8      	ldr	r0, [r7, #12]
    d264:	4b08      	ldr	r3, [pc, #32]	; (d288 <usb_find_cfg_desc+0x74>)
    d266:	4798      	blx	r3
    d268:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d26a:	68fa      	ldr	r2, [r7, #12]
    d26c:	68bb      	ldr	r3, [r7, #8]
    d26e:	429a      	cmp	r2, r3
    d270:	d3e2      	bcc.n	d238 <usb_find_cfg_desc+0x24>
    d272:	e000      	b.n	d276 <usb_find_cfg_desc+0x62>
			break;
    d274:	bf00      	nop
	}
	return NULL;
    d276:	2300      	movs	r3, #0
}
    d278:	4618      	mov	r0, r3
    d27a:	3710      	adds	r7, #16
    d27c:	46bd      	mov	sp, r7
    d27e:	bd80      	pop	{r7, pc}
    d280:	0000d155 	.word	0x0000d155
    d284:	0000d0bb 	.word	0x0000d0bb
    d288:	0000d131 	.word	0x0000d131

0000d28c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    d28c:	b580      	push	{r7, lr}
    d28e:	b086      	sub	sp, #24
    d290:	af00      	add	r7, sp, #0
    d292:	60f8      	str	r0, [r7, #12]
    d294:	60b9      	str	r1, [r7, #8]
    d296:	4613      	mov	r3, r2
    d298:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d29a:	2300      	movs	r3, #0
    d29c:	75fb      	strb	r3, [r7, #23]
    d29e:	e020      	b.n	d2e2 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    d2a0:	2203      	movs	r2, #3
    d2a2:	68b9      	ldr	r1, [r7, #8]
    d2a4:	68f8      	ldr	r0, [r7, #12]
    d2a6:	4b13      	ldr	r3, [pc, #76]	; (d2f4 <usb_find_str_desc+0x68>)
    d2a8:	4798      	blx	r3
    d2aa:	60f8      	str	r0, [r7, #12]
		if (desc) {
    d2ac:	68fb      	ldr	r3, [r7, #12]
    d2ae:	2b00      	cmp	r3, #0
    d2b0:	d015      	beq.n	d2de <usb_find_str_desc+0x52>
			_desc_len_check();
    d2b2:	68f8      	ldr	r0, [r7, #12]
    d2b4:	4b10      	ldr	r3, [pc, #64]	; (d2f8 <usb_find_str_desc+0x6c>)
    d2b6:	4798      	blx	r3
    d2b8:	4603      	mov	r3, r0
    d2ba:	2b01      	cmp	r3, #1
    d2bc:	d801      	bhi.n	d2c2 <usb_find_str_desc+0x36>
    d2be:	2300      	movs	r3, #0
    d2c0:	e014      	b.n	d2ec <usb_find_str_desc+0x60>
			if (i == str_index) {
    d2c2:	7dfa      	ldrb	r2, [r7, #23]
    d2c4:	79fb      	ldrb	r3, [r7, #7]
    d2c6:	429a      	cmp	r2, r3
    d2c8:	d101      	bne.n	d2ce <usb_find_str_desc+0x42>
				return desc;
    d2ca:	68fb      	ldr	r3, [r7, #12]
    d2cc:	e00e      	b.n	d2ec <usb_find_str_desc+0x60>
			}
			i++;
    d2ce:	7dfb      	ldrb	r3, [r7, #23]
    d2d0:	3301      	adds	r3, #1
    d2d2:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    d2d4:	68f8      	ldr	r0, [r7, #12]
    d2d6:	4b09      	ldr	r3, [pc, #36]	; (d2fc <usb_find_str_desc+0x70>)
    d2d8:	4798      	blx	r3
    d2da:	60f8      	str	r0, [r7, #12]
    d2dc:	e001      	b.n	d2e2 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    d2de:	2300      	movs	r3, #0
    d2e0:	e004      	b.n	d2ec <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    d2e2:	68fa      	ldr	r2, [r7, #12]
    d2e4:	68bb      	ldr	r3, [r7, #8]
    d2e6:	429a      	cmp	r2, r3
    d2e8:	d3da      	bcc.n	d2a0 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    d2ea:	2300      	movs	r3, #0
}
    d2ec:	4618      	mov	r0, r3
    d2ee:	3718      	adds	r7, #24
    d2f0:	46bd      	mov	sp, r7
    d2f2:	bd80      	pop	{r7, pc}
    d2f4:	0000d155 	.word	0x0000d155
    d2f8:	0000d0bb 	.word	0x0000d0bb
    d2fc:	0000d0ed 	.word	0x0000d0ed

0000d300 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    d300:	b480      	push	{r7}
    d302:	b083      	sub	sp, #12
    d304:	af00      	add	r7, sp, #0
    d306:	6078      	str	r0, [r7, #4]
    d308:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    d30a:	687b      	ldr	r3, [r7, #4]
    d30c:	683a      	ldr	r2, [r7, #0]
    d30e:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    d310:	687b      	ldr	r3, [r7, #4]
    d312:	4618      	mov	r0, r3
    d314:	370c      	adds	r7, #12
    d316:	46bd      	mov	sp, r7
    d318:	bc80      	pop	{r7}
    d31a:	4770      	bx	lr

0000d31c <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    d31c:	b480      	push	{r7}
    d31e:	b083      	sub	sp, #12
    d320:	af00      	add	r7, sp, #0
    d322:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    d324:	687b      	ldr	r3, [r7, #4]
    d326:	4618      	mov	r0, r3
    d328:	370c      	adds	r7, #12
    d32a:	46bd      	mov	sp, r7
    d32c:	bc80      	pop	{r7}
    d32e:	4770      	bx	lr

0000d330 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    d330:	b580      	push	{r7, lr}
    d332:	b082      	sub	sp, #8
    d334:	af00      	add	r7, sp, #0
    d336:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    d338:	687b      	ldr	r3, [r7, #4]
    d33a:	4a23      	ldr	r2, [pc, #140]	; (d3c8 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    d33c:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    d33e:	687b      	ldr	r3, [r7, #4]
    d340:	4a21      	ldr	r2, [pc, #132]	; (d3c8 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    d342:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    d344:	687b      	ldr	r3, [r7, #4]
    d346:	691a      	ldr	r2, [r3, #16]
    d348:	687b      	ldr	r3, [r7, #4]
    d34a:	330c      	adds	r3, #12
    d34c:	4619      	mov	r1, r3
    d34e:	4610      	mov	r0, r2
    d350:	4b1e      	ldr	r3, [pc, #120]	; (d3cc <_ZN14I2C_Sync_Class4InitEv+0x9c>)
    d352:	4798      	blx	r3
	enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    d354:	687b      	ldr	r3, [r7, #4]
    d356:	691b      	ldr	r3, [r3, #16]
    d358:	4618      	mov	r0, r3
    d35a:	4b1d      	ldr	r3, [pc, #116]	; (d3d0 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    d35c:	4798      	blx	r3
    d35e:	4603      	mov	r3, r0
    d360:	b2da      	uxtb	r2, r3
    d362:	687b      	ldr	r3, [r7, #4]
    d364:	751a      	strb	r2, [r3, #20]
	isOK=enabled==0;
    d366:	687b      	ldr	r3, [r7, #4]
    d368:	7d1b      	ldrb	r3, [r3, #20]
    d36a:	2b00      	cmp	r3, #0
    d36c:	bf0c      	ite	eq
    d36e:	2301      	moveq	r3, #1
    d370:	2300      	movne	r3, #0
    d372:	b2da      	uxtb	r2, r3
    d374:	687b      	ldr	r3, [r7, #4]
    d376:	725a      	strb	r2, [r3, #9]
	if (isOK)
    d378:	687b      	ldr	r3, [r7, #4]
    d37a:	7a5b      	ldrb	r3, [r3, #9]
    d37c:	b2db      	uxtb	r3, r3
    d37e:	2b00      	cmp	r3, #0
    d380:	d116      	bne.n	d3b0 <_ZN14I2C_Sync_Class4InitEv+0x80>
	{
		
	} 
	else
	{
		i2c_m_sync_disable(ptrI2CDescr);
    d382:	687b      	ldr	r3, [r7, #4]
    d384:	691b      	ldr	r3, [r3, #16]
    d386:	4618      	mov	r0, r3
    d388:	4b12      	ldr	r3, [pc, #72]	; (d3d4 <_ZN14I2C_Sync_Class4InitEv+0xa4>)
    d38a:	4798      	blx	r3
		enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    d38c:	687b      	ldr	r3, [r7, #4]
    d38e:	691b      	ldr	r3, [r3, #16]
    d390:	4618      	mov	r0, r3
    d392:	4b0f      	ldr	r3, [pc, #60]	; (d3d0 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    d394:	4798      	blx	r3
    d396:	4603      	mov	r3, r0
    d398:	b2da      	uxtb	r2, r3
    d39a:	687b      	ldr	r3, [r7, #4]
    d39c:	751a      	strb	r2, [r3, #20]
		isOK=enabled==0;
    d39e:	687b      	ldr	r3, [r7, #4]
    d3a0:	7d1b      	ldrb	r3, [r3, #20]
    d3a2:	2b00      	cmp	r3, #0
    d3a4:	bf0c      	ite	eq
    d3a6:	2301      	moveq	r3, #1
    d3a8:	2300      	movne	r3, #0
    d3aa:	b2da      	uxtb	r2, r3
    d3ac:	687b      	ldr	r3, [r7, #4]
    d3ae:	725a      	strb	r2, [r3, #9]
	}
	
	initiated=isOK;
    d3b0:	687b      	ldr	r3, [r7, #4]
    d3b2:	7a5b      	ldrb	r3, [r3, #9]
    d3b4:	b2da      	uxtb	r2, r3
    d3b6:	687b      	ldr	r3, [r7, #4]
    d3b8:	721a      	strb	r2, [r3, #8]
	return isOK;
    d3ba:	687b      	ldr	r3, [r7, #4]
    d3bc:	7a5b      	ldrb	r3, [r3, #9]
    d3be:	b2db      	uxtb	r3, r3
	
}
    d3c0:	4618      	mov	r0, r3
    d3c2:	3708      	adds	r7, #8
    d3c4:	46bd      	mov	sp, r7
    d3c6:	bd80      	pop	{r7, pc}
    d3c8:	20000fdc 	.word	0x20000fdc
    d3cc:	000026af 	.word	0x000026af
    d3d0:	00002635 	.word	0x00002635
    d3d4:	00002655 	.word	0x00002655

0000d3d8 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    d3d8:	b580      	push	{r7, lr}
    d3da:	b082      	sub	sp, #8
    d3dc:	af00      	add	r7, sp, #0
    d3de:	6078      	str	r0, [r7, #4]
    d3e0:	460b      	mov	r3, r1
    d3e2:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    d3e4:	687b      	ldr	r3, [r7, #4]
    d3e6:	691b      	ldr	r3, [r3, #16]
    d3e8:	78fa      	ldrb	r2, [r7, #3]
    d3ea:	b211      	sxth	r1, r2
    d3ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
    d3f0:	4618      	mov	r0, r3
    d3f2:	4b03      	ldr	r3, [pc, #12]	; (d400 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    d3f4:	4798      	blx	r3
    d3f6:	4603      	mov	r3, r0
}
    d3f8:	4618      	mov	r0, r3
    d3fa:	3708      	adds	r7, #8
    d3fc:	46bd      	mov	sp, r7
    d3fe:	bd80      	pop	{r7, pc}
    d400:	00002675 	.word	0x00002675

0000d404 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    d404:	b580      	push	{r7, lr}
    d406:	b086      	sub	sp, #24
    d408:	af00      	add	r7, sp, #0
    d40a:	60f8      	str	r0, [r7, #12]
    d40c:	60b9      	str	r1, [r7, #8]
    d40e:	4613      	mov	r3, r2
    d410:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    d412:	68fb      	ldr	r3, [r7, #12]
    d414:	68db      	ldr	r3, [r3, #12]
    d416:	88fa      	ldrh	r2, [r7, #6]
    d418:	68b9      	ldr	r1, [r7, #8]
    d41a:	4618      	mov	r0, r3
    d41c:	4b03      	ldr	r3, [pc, #12]	; (d42c <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    d41e:	4798      	blx	r3
    d420:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    d422:	697b      	ldr	r3, [r7, #20]
}
    d424:	4618      	mov	r0, r3
    d426:	3718      	adds	r7, #24
    d428:	46bd      	mov	sp, r7
    d42a:	bd80      	pop	{r7, pc}
    d42c:	0000e97d 	.word	0x0000e97d

0000d430 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    d430:	b580      	push	{r7, lr}
    d432:	b086      	sub	sp, #24
    d434:	af00      	add	r7, sp, #0
    d436:	60f8      	str	r0, [r7, #12]
    d438:	60b9      	str	r1, [r7, #8]
    d43a:	4613      	mov	r3, r2
    d43c:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    d43e:	68fb      	ldr	r3, [r7, #12]
    d440:	68db      	ldr	r3, [r3, #12]
    d442:	88fa      	ldrh	r2, [r7, #6]
    d444:	68b9      	ldr	r1, [r7, #8]
    d446:	4618      	mov	r0, r3
    d448:	4b03      	ldr	r3, [pc, #12]	; (d458 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    d44a:	4798      	blx	r3
    d44c:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    d44e:	697b      	ldr	r3, [r7, #20]
}
    d450:	4618      	mov	r0, r3
    d452:	3718      	adds	r7, #24
    d454:	46bd      	mov	sp, r7
    d456:	bd80      	pop	{r7, pc}
    d458:	0000e9cd 	.word	0x0000e9cd

0000d45c <_Z41__static_initialization_and_destruction_0ii>:
	__enable_irq();
}
void	I2C_Sync_Class::Irq_Disable(void){
	__DMB();
	__disable_irq();
}
    d45c:	b580      	push	{r7, lr}
    d45e:	b082      	sub	sp, #8
    d460:	af00      	add	r7, sp, #0
    d462:	6078      	str	r0, [r7, #4]
    d464:	6039      	str	r1, [r7, #0]
    d466:	687b      	ldr	r3, [r7, #4]
    d468:	2b01      	cmp	r3, #1
    d46a:	d10d      	bne.n	d488 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d46c:	683b      	ldr	r3, [r7, #0]
    d46e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d472:	4293      	cmp	r3, r2
    d474:	d108      	bne.n	d488 <_Z41__static_initialization_and_destruction_0ii+0x2c>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    d476:	4906      	ldr	r1, [pc, #24]	; (d490 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    d478:	4806      	ldr	r0, [pc, #24]	; (d494 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d47a:	4b07      	ldr	r3, [pc, #28]	; (d498 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    d47c:	4798      	blx	r3
    d47e:	4a07      	ldr	r2, [pc, #28]	; (d49c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    d480:	4907      	ldr	r1, [pc, #28]	; (d4a0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    d482:	4804      	ldr	r0, [pc, #16]	; (d494 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d484:	4b07      	ldr	r3, [pc, #28]	; (d4a4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    d486:	4798      	blx	r3
    d488:	bf00      	nop
    d48a:	3708      	adds	r7, #8
    d48c:	46bd      	mov	sp, r7
    d48e:	bd80      	pop	{r7, pc}
    d490:	20001814 	.word	0x20001814
    d494:	20000fc4 	.word	0x20000fc4
    d498:	0000d301 	.word	0x0000d301
    d49c:	20000000 	.word	0x20000000
    d4a0:	0000d31d 	.word	0x0000d31d
    d4a4:	0000ea1d 	.word	0x0000ea1d

0000d4a8 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev>:
    d4a8:	b580      	push	{r7, lr}
    d4aa:	af00      	add	r7, sp, #0
    d4ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d4b0:	2001      	movs	r0, #1
    d4b2:	4b01      	ldr	r3, [pc, #4]	; (d4b8 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev+0x10>)
    d4b4:	4798      	blx	r3
    d4b6:	bd80      	pop	{r7, pc}
    d4b8:	0000d45d 	.word	0x0000d45d

0000d4bc <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    d4bc:	b480      	push	{r7}
    d4be:	b083      	sub	sp, #12
    d4c0:	af00      	add	r7, sp, #0
    d4c2:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    d4c4:	687b      	ldr	r3, [r7, #4]
    d4c6:	4618      	mov	r0, r3
    d4c8:	370c      	adds	r7, #12
    d4ca:	46bd      	mov	sp, r7
    d4cc:	bc80      	pop	{r7}
    d4ce:	4770      	bx	lr

0000d4d0 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    d4d0:	b480      	push	{r7}
    d4d2:	b083      	sub	sp, #12
    d4d4:	af00      	add	r7, sp, #0
    d4d6:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    d4d8:	687b      	ldr	r3, [r7, #4]
    d4da:	4618      	mov	r0, r3
    d4dc:	370c      	adds	r7, #12
    d4de:	46bd      	mov	sp, r7
    d4e0:	bc80      	pop	{r7}
    d4e2:	4770      	bx	lr

0000d4e4 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    d4e4:	b480      	push	{r7}
    d4e6:	b085      	sub	sp, #20
    d4e8:	af00      	add	r7, sp, #0
    d4ea:	60f8      	str	r0, [r7, #12]
    d4ec:	460b      	mov	r3, r1
    d4ee:	607a      	str	r2, [r7, #4]
    d4f0:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    d4f2:	687b      	ldr	r3, [r7, #4]
    d4f4:	681a      	ldr	r2, [r3, #0]
    d4f6:	68fb      	ldr	r3, [r7, #12]
    d4f8:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
    d4fa:	687b      	ldr	r3, [r7, #4]
    d4fc:	685a      	ldr	r2, [r3, #4]
    d4fe:	68fb      	ldr	r3, [r7, #12]
    d500:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
    d502:	68fb      	ldr	r3, [r7, #12]
    d504:	7afa      	ldrb	r2, [r7, #11]
    d506:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
    d508:	68fb      	ldr	r3, [r7, #12]
    d50a:	687a      	ldr	r2, [r7, #4]
    d50c:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
    d50e:	68fb      	ldr	r3, [r7, #12]
    d510:	68db      	ldr	r3, [r3, #12]
    d512:	7a5b      	ldrb	r3, [r3, #9]
    d514:	b2da      	uxtb	r2, r3
    d516:	68fb      	ldr	r3, [r7, #12]
    d518:	719a      	strb	r2, [r3, #6]
	return isOK;
    d51a:	68fb      	ldr	r3, [r7, #12]
    d51c:	799b      	ldrb	r3, [r3, #6]
    d51e:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    d520:	4618      	mov	r0, r3
    d522:	3714      	adds	r7, #20
    d524:	46bd      	mov	sp, r7
    d526:	bc80      	pop	{r7}
    d528:	4770      	bx	lr

0000d52a <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    d52a:	b480      	push	{r7}
    d52c:	b083      	sub	sp, #12
    d52e:	af00      	add	r7, sp, #0
    d530:	6078      	str	r0, [r7, #4]
    d532:	460b      	mov	r3, r1
    d534:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    d536:	78fb      	ldrb	r3, [r7, #3]
    d538:	f003 0307 	and.w	r3, r3, #7
    d53c:	b2db      	uxtb	r3, r3
}
    d53e:	4618      	mov	r0, r3
    d540:	370c      	adds	r7, #12
    d542:	46bd      	mov	sp, r7
    d544:	bc80      	pop	{r7}
    d546:	4770      	bx	lr

0000d548 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    d548:	b480      	push	{r7}
    d54a:	b083      	sub	sp, #12
    d54c:	af00      	add	r7, sp, #0
    d54e:	6078      	str	r0, [r7, #4]
    d550:	4608      	mov	r0, r1
    d552:	4611      	mov	r1, r2
    d554:	461a      	mov	r2, r3
    d556:	4603      	mov	r3, r0
    d558:	70fb      	strb	r3, [r7, #3]
    d55a:	460b      	mov	r3, r1
    d55c:	70bb      	strb	r3, [r7, #2]
    d55e:	4613      	mov	r3, r2
    d560:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    d562:	78fb      	ldrb	r3, [r7, #3]
    d564:	2b07      	cmp	r3, #7
    d566:	dc01      	bgt.n	d56c <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    d568:	78bb      	ldrb	r3, [r7, #2]
    d56a:	e000      	b.n	d56e <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    d56c:	787b      	ldrb	r3, [r7, #1]
}
    d56e:	4618      	mov	r0, r3
    d570:	370c      	adds	r7, #12
    d572:	46bd      	mov	sp, r7
    d574:	bc80      	pop	{r7}
    d576:	4770      	bx	lr

0000d578 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    d578:	b580      	push	{r7, lr}
    d57a:	b082      	sub	sp, #8
    d57c:	af00      	add	r7, sp, #0
    d57e:	6078      	str	r0, [r7, #4]
    d580:	460b      	mov	r3, r1
    d582:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    d584:	687b      	ldr	r3, [r7, #4]
    d586:	68da      	ldr	r2, [r3, #12]
    d588:	687b      	ldr	r3, [r7, #4]
    d58a:	7a1b      	ldrb	r3, [r3, #8]
    d58c:	4619      	mov	r1, r3
    d58e:	4610      	mov	r0, r2
    d590:	4b0a      	ldr	r3, [pc, #40]	; (d5bc <_ZN14MCP23008_Class12readRegisterEh+0x44>)
    d592:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    d594:	687b      	ldr	r3, [r7, #4]
    d596:	68db      	ldr	r3, [r3, #12]
    d598:	1cf9      	adds	r1, r7, #3
    d59a:	2201      	movs	r2, #1
    d59c:	4618      	mov	r0, r3
    d59e:	4b08      	ldr	r3, [pc, #32]	; (d5c0 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    d5a0:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    d5a2:	687b      	ldr	r3, [r7, #4]
    d5a4:	68db      	ldr	r3, [r3, #12]
    d5a6:	6879      	ldr	r1, [r7, #4]
    d5a8:	2201      	movs	r2, #1
    d5aa:	4618      	mov	r0, r3
    d5ac:	4b05      	ldr	r3, [pc, #20]	; (d5c4 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    d5ae:	4798      	blx	r3

	return registerValue;
    d5b0:	687b      	ldr	r3, [r7, #4]
    d5b2:	781b      	ldrb	r3, [r3, #0]
}
    d5b4:	4618      	mov	r0, r3
    d5b6:	3708      	adds	r7, #8
    d5b8:	46bd      	mov	sp, r7
    d5ba:	bd80      	pop	{r7, pc}
    d5bc:	0000d3d9 	.word	0x0000d3d9
    d5c0:	0000d405 	.word	0x0000d405
    d5c4:	0000d431 	.word	0x0000d431

0000d5c8 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    d5c8:	b580      	push	{r7, lr}
    d5ca:	b084      	sub	sp, #16
    d5cc:	af00      	add	r7, sp, #0
    d5ce:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    d5d0:	687b      	ldr	r3, [r7, #4]
    d5d2:	68da      	ldr	r2, [r3, #12]
    d5d4:	687b      	ldr	r3, [r7, #4]
    d5d6:	7a1b      	ldrb	r3, [r3, #8]
    d5d8:	4619      	mov	r1, r3
    d5da:	4610      	mov	r0, r2
    d5dc:	4b06      	ldr	r3, [pc, #24]	; (d5f8 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    d5de:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
    d5e0:	2109      	movs	r1, #9
    d5e2:	6878      	ldr	r0, [r7, #4]
    d5e4:	4b05      	ldr	r3, [pc, #20]	; (d5fc <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
    d5e6:	4798      	blx	r3
    d5e8:	4603      	mov	r3, r0
    d5ea:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
    d5ec:	7bfb      	ldrb	r3, [r7, #15]
}
    d5ee:	4618      	mov	r0, r3
    d5f0:	3710      	adds	r7, #16
    d5f2:	46bd      	mov	sp, r7
    d5f4:	bd80      	pop	{r7, pc}
    d5f6:	bf00      	nop
    d5f8:	0000d3d9 	.word	0x0000d3d9
    d5fc:	0000d579 	.word	0x0000d579

0000d600 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    d600:	b580      	push	{r7, lr}
    d602:	b084      	sub	sp, #16
    d604:	af00      	add	r7, sp, #0
    d606:	6078      	str	r0, [r7, #4]
    d608:	460b      	mov	r3, r1
    d60a:	70fb      	strb	r3, [r7, #3]
    d60c:	4613      	mov	r3, r2
    d60e:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    d610:	687b      	ldr	r3, [r7, #4]
    d612:	68da      	ldr	r2, [r3, #12]
    d614:	687b      	ldr	r3, [r7, #4]
    d616:	7a1b      	ldrb	r3, [r3, #8]
    d618:	4619      	mov	r1, r3
    d61a:	4610      	mov	r0, r2
    d61c:	4b09      	ldr	r3, [pc, #36]	; (d644 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    d61e:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    d620:	78fb      	ldrb	r3, [r7, #3]
    d622:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    d624:	78bb      	ldrb	r3, [r7, #2]
    d626:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    d628:	687b      	ldr	r3, [r7, #4]
    d62a:	68db      	ldr	r3, [r3, #12]
    d62c:	f107 010c 	add.w	r1, r7, #12
    d630:	2202      	movs	r2, #2
    d632:	4618      	mov	r0, r3
    d634:	4b04      	ldr	r3, [pc, #16]	; (d648 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    d636:	4798      	blx	r3
    d638:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    d63a:	4618      	mov	r0, r3
    d63c:	3710      	adds	r7, #16
    d63e:	46bd      	mov	sp, r7
    d640:	bd80      	pop	{r7, pc}
    d642:	bf00      	nop
    d644:	0000d3d9 	.word	0x0000d3d9
    d648:	0000d405 	.word	0x0000d405

0000d64c <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
    d64c:	b580      	push	{r7, lr}
    d64e:	b082      	sub	sp, #8
    d650:	af00      	add	r7, sp, #0
    d652:	6078      	str	r0, [r7, #4]
    d654:	460b      	mov	r3, r1
    d656:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    d658:	687b      	ldr	r3, [r7, #4]
    d65a:	68da      	ldr	r2, [r3, #12]
    d65c:	687b      	ldr	r3, [r7, #4]
    d65e:	7a1b      	ldrb	r3, [r3, #8]
    d660:	4619      	mov	r1, r3
    d662:	4610      	mov	r0, r2
    d664:	4b06      	ldr	r3, [pc, #24]	; (d680 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
    d666:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
    d668:	78fb      	ldrb	r3, [r7, #3]
    d66a:	461a      	mov	r2, r3
    d66c:	2109      	movs	r1, #9
    d66e:	6878      	ldr	r0, [r7, #4]
    d670:	4b04      	ldr	r3, [pc, #16]	; (d684 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
    d672:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
    d674:	78fb      	ldrb	r3, [r7, #3]
}
    d676:	4618      	mov	r0, r3
    d678:	3708      	adds	r7, #8
    d67a:	46bd      	mov	sp, r7
    d67c:	bd80      	pop	{r7, pc}
    d67e:	bf00      	nop
    d680:	0000d3d9 	.word	0x0000d3d9
    d684:	0000d601 	.word	0x0000d601

0000d688 <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
    d688:	b580      	push	{r7, lr}
    d68a:	b084      	sub	sp, #16
    d68c:	af00      	add	r7, sp, #0
    d68e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    d690:	2300      	movs	r3, #0
    d692:	73fb      	strb	r3, [r7, #15]
    d694:	7bfb      	ldrb	r3, [r7, #15]
    d696:	2b07      	cmp	r3, #7
    d698:	dc0f      	bgt.n	d6ba <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    d69a:	7bfb      	ldrb	r3, [r7, #15]
    d69c:	2201      	movs	r2, #1
    d69e:	4619      	mov	r1, r3
    d6a0:	6878      	ldr	r0, [r7, #4]
    d6a2:	4b08      	ldr	r3, [pc, #32]	; (d6c4 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    d6a4:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    d6a6:	7bfb      	ldrb	r3, [r7, #15]
    d6a8:	2201      	movs	r2, #1
    d6aa:	4619      	mov	r1, r3
    d6ac:	6878      	ldr	r0, [r7, #4]
    d6ae:	4b06      	ldr	r3, [pc, #24]	; (d6c8 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    d6b0:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    d6b2:	7bfb      	ldrb	r3, [r7, #15]
    d6b4:	3301      	adds	r3, #1
    d6b6:	73fb      	strb	r3, [r7, #15]
    d6b8:	e7ec      	b.n	d694 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    d6ba:	bf00      	nop
    d6bc:	3710      	adds	r7, #16
    d6be:	46bd      	mov	sp, r7
    d6c0:	bd80      	pop	{r7, pc}
    d6c2:	bf00      	nop
    d6c4:	0000d849 	.word	0x0000d849
    d6c8:	0000d92d 	.word	0x0000d92d

0000d6cc <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
    d6cc:	b580      	push	{r7, lr}
    d6ce:	b084      	sub	sp, #16
    d6d0:	af00      	add	r7, sp, #0
    d6d2:	6078      	str	r0, [r7, #4]
    d6d4:	460b      	mov	r3, r1
    d6d6:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
    d6d8:	78fb      	ldrb	r3, [r7, #3]
    d6da:	2b00      	cmp	r3, #0
    d6dc:	dd23      	ble.n	d726 <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
    d6de:	2300      	movs	r3, #0
    d6e0:	73fb      	strb	r3, [r7, #15]
    d6e2:	7bfb      	ldrb	r3, [r7, #15]
    d6e4:	2b07      	cmp	r3, #7
    d6e6:	dc21      	bgt.n	d72c <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
    d6e8:	78fa      	ldrb	r2, [r7, #3]
    d6ea:	7bfb      	ldrb	r3, [r7, #15]
    d6ec:	fa42 f303 	asr.w	r3, r2, r3
    d6f0:	f003 0301 	and.w	r3, r3, #1
    d6f4:	2b00      	cmp	r3, #0
    d6f6:	d00c      	beq.n	d712 <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
    d6f8:	7bfb      	ldrb	r3, [r7, #15]
    d6fa:	2201      	movs	r2, #1
    d6fc:	4619      	mov	r1, r3
    d6fe:	6878      	ldr	r0, [r7, #4]
    d700:	4b0c      	ldr	r3, [pc, #48]	; (d734 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    d702:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
    d704:	7bfb      	ldrb	r3, [r7, #15]
    d706:	2201      	movs	r2, #1
    d708:	4619      	mov	r1, r3
    d70a:	6878      	ldr	r0, [r7, #4]
    d70c:	4b0a      	ldr	r3, [pc, #40]	; (d738 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
    d70e:	4798      	blx	r3
    d710:	e005      	b.n	d71e <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
    d712:	7bfb      	ldrb	r3, [r7, #15]
    d714:	2200      	movs	r2, #0
    d716:	4619      	mov	r1, r3
    d718:	6878      	ldr	r0, [r7, #4]
    d71a:	4b06      	ldr	r3, [pc, #24]	; (d734 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    d71c:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
    d71e:	7bfb      	ldrb	r3, [r7, #15]
    d720:	3301      	adds	r3, #1
    d722:	73fb      	strb	r3, [r7, #15]
    d724:	e7dd      	b.n	d6e2 <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
    d726:	6878      	ldr	r0, [r7, #4]
    d728:	4b04      	ldr	r3, [pc, #16]	; (d73c <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
    d72a:	4798      	blx	r3
	}
	
}
    d72c:	bf00      	nop
    d72e:	3710      	adds	r7, #16
    d730:	46bd      	mov	sp, r7
    d732:	bd80      	pop	{r7, pc}
    d734:	0000d849 	.word	0x0000d849
    d738:	0000d92d 	.word	0x0000d92d
    d73c:	0000d741 	.word	0x0000d741

0000d740 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
    d740:	b580      	push	{r7, lr}
    d742:	b084      	sub	sp, #16
    d744:	af00      	add	r7, sp, #0
    d746:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    d748:	2300      	movs	r3, #0
    d74a:	73fb      	strb	r3, [r7, #15]
    d74c:	7bfb      	ldrb	r3, [r7, #15]
    d74e:	2b07      	cmp	r3, #7
    d750:	dc09      	bgt.n	d766 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    d752:	7bfb      	ldrb	r3, [r7, #15]
    d754:	2200      	movs	r2, #0
    d756:	4619      	mov	r1, r3
    d758:	6878      	ldr	r0, [r7, #4]
    d75a:	4b05      	ldr	r3, [pc, #20]	; (d770 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    d75c:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    d75e:	7bfb      	ldrb	r3, [r7, #15]
    d760:	3301      	adds	r3, #1
    d762:	73fb      	strb	r3, [r7, #15]
    d764:	e7f2      	b.n	d74c <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    d766:	bf00      	nop
    d768:	3710      	adds	r7, #16
    d76a:	46bd      	mov	sp, r7
    d76c:	bd80      	pop	{r7, pc}
    d76e:	bf00      	nop
    d770:	0000d849 	.word	0x0000d849

0000d774 <_ZN14MCP23008_Class13SetPortOutputEh>:
void	MCP23008_Class::SetPortOutput(uint8_t out){
    d774:	b580      	push	{r7, lr}
    d776:	b084      	sub	sp, #16
    d778:	af00      	add	r7, sp, #0
    d77a:	6078      	str	r0, [r7, #4]
    d77c:	460b      	mov	r3, r1
    d77e:	70fb      	strb	r3, [r7, #3]
	
	for (uint8_t i=0;i<8;i++)
    d780:	2300      	movs	r3, #0
    d782:	73fb      	strb	r3, [r7, #15]
    d784:	7bfb      	ldrb	r3, [r7, #15]
    d786:	2b07      	cmp	r3, #7
    d788:	dc11      	bgt.n	d7ae <_ZN14MCP23008_Class13SetPortOutputEh+0x3a>
	{
		if (out&(0x01<<i))
    d78a:	78fa      	ldrb	r2, [r7, #3]
    d78c:	7bfb      	ldrb	r3, [r7, #15]
    d78e:	fa42 f303 	asr.w	r3, r2, r3
    d792:	f003 0301 	and.w	r3, r3, #1
    d796:	2b00      	cmp	r3, #0
    d798:	d005      	beq.n	d7a6 <_ZN14MCP23008_Class13SetPortOutputEh+0x32>
		{
			pinMode(i,MCP23008_OUTPUT);
    d79a:	7bfb      	ldrb	r3, [r7, #15]
    d79c:	2200      	movs	r2, #0
    d79e:	4619      	mov	r1, r3
    d7a0:	6878      	ldr	r0, [r7, #4]
    d7a2:	4b05      	ldr	r3, [pc, #20]	; (d7b8 <_ZN14MCP23008_Class13SetPortOutputEh+0x44>)
    d7a4:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    d7a6:	7bfb      	ldrb	r3, [r7, #15]
    d7a8:	3301      	adds	r3, #1
    d7aa:	73fb      	strb	r3, [r7, #15]
    d7ac:	e7ea      	b.n	d784 <_ZN14MCP23008_Class13SetPortOutputEh+0x10>
		}
		
	}
}
    d7ae:	bf00      	nop
    d7b0:	3710      	adds	r7, #16
    d7b2:	46bd      	mov	sp, r7
    d7b4:	bd80      	pop	{r7, pc}
    d7b6:	bf00      	nop
    d7b8:	0000d849 	.word	0x0000d849

0000d7bc <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    d7bc:	b580      	push	{r7, lr}
    d7be:	b084      	sub	sp, #16
    d7c0:	af00      	add	r7, sp, #0
    d7c2:	6078      	str	r0, [r7, #4]
    d7c4:	4608      	mov	r0, r1
    d7c6:	4611      	mov	r1, r2
    d7c8:	461a      	mov	r2, r3
    d7ca:	4603      	mov	r3, r0
    d7cc:	70fb      	strb	r3, [r7, #3]
    d7ce:	460b      	mov	r3, r1
    d7d0:	70bb      	strb	r3, [r7, #2]
    d7d2:	4613      	mov	r3, r2
    d7d4:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    d7d6:	787b      	ldrb	r3, [r7, #1]
    d7d8:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    d7da:	78fb      	ldrb	r3, [r7, #3]
    d7dc:	4619      	mov	r1, r3
    d7de:	6878      	ldr	r0, [r7, #4]
    d7e0:	4b16      	ldr	r3, [pc, #88]	; (d83c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    d7e2:	4798      	blx	r3
    d7e4:	4603      	mov	r3, r0
    d7e6:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    d7e8:	7bfb      	ldrb	r3, [r7, #15]
    d7ea:	4619      	mov	r1, r3
    d7ec:	6878      	ldr	r0, [r7, #4]
    d7ee:	4b14      	ldr	r3, [pc, #80]	; (d840 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    d7f0:	4798      	blx	r3
    d7f2:	4603      	mov	r3, r0
    d7f4:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    d7f6:	78bb      	ldrb	r3, [r7, #2]
    d7f8:	2b00      	cmp	r3, #0
    d7fa:	d009      	beq.n	d810 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    d7fc:	7bba      	ldrb	r2, [r7, #14]
    d7fe:	7b7b      	ldrb	r3, [r7, #13]
    d800:	4619      	mov	r1, r3
    d802:	2301      	movs	r3, #1
    d804:	408b      	lsls	r3, r1
    d806:	b2db      	uxtb	r3, r3
    d808:	4313      	orrs	r3, r2
    d80a:	b2db      	uxtb	r3, r3
    d80c:	73bb      	strb	r3, [r7, #14]
    d80e:	e00a      	b.n	d826 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    d810:	7bba      	ldrb	r2, [r7, #14]
    d812:	7b7b      	ldrb	r3, [r7, #13]
    d814:	4619      	mov	r1, r3
    d816:	2301      	movs	r3, #1
    d818:	408b      	lsls	r3, r1
    d81a:	b2db      	uxtb	r3, r3
    d81c:	43db      	mvns	r3, r3
    d81e:	b2db      	uxtb	r3, r3
    d820:	4013      	ands	r3, r2
    d822:	b2db      	uxtb	r3, r3
    d824:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    d826:	7bba      	ldrb	r2, [r7, #14]
    d828:	7bfb      	ldrb	r3, [r7, #15]
    d82a:	4619      	mov	r1, r3
    d82c:	6878      	ldr	r0, [r7, #4]
    d82e:	4b05      	ldr	r3, [pc, #20]	; (d844 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    d830:	4798      	blx	r3
}
    d832:	bf00      	nop
    d834:	3710      	adds	r7, #16
    d836:	46bd      	mov	sp, r7
    d838:	bd80      	pop	{r7, pc}
    d83a:	bf00      	nop
    d83c:	0000d52b 	.word	0x0000d52b
    d840:	0000d579 	.word	0x0000d579
    d844:	0000d601 	.word	0x0000d601

0000d848 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    d848:	b590      	push	{r4, r7, lr}
    d84a:	b085      	sub	sp, #20
    d84c:	af02      	add	r7, sp, #8
    d84e:	6078      	str	r0, [r7, #4]
    d850:	460b      	mov	r3, r1
    d852:	70fb      	strb	r3, [r7, #3]
    d854:	4613      	mov	r3, r2
    d856:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    d858:	78bb      	ldrb	r3, [r7, #2]
    d85a:	2b01      	cmp	r3, #1
    d85c:	bf0c      	ite	eq
    d85e:	2301      	moveq	r3, #1
    d860:	2300      	movne	r3, #0
    d862:	b2db      	uxtb	r3, r3
    d864:	461a      	mov	r2, r3
    d866:	78f9      	ldrb	r1, [r7, #3]
    d868:	2300      	movs	r3, #0
    d86a:	9300      	str	r3, [sp, #0]
    d86c:	2300      	movs	r3, #0
    d86e:	6878      	ldr	r0, [r7, #4]
    d870:	4c02      	ldr	r4, [pc, #8]	; (d87c <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    d872:	47a0      	blx	r4
}
    d874:	bf00      	nop
    d876:	370c      	adds	r7, #12
    d878:	46bd      	mov	sp, r7
    d87a:	bd90      	pop	{r4, r7, pc}
    d87c:	0000d7bd 	.word	0x0000d7bd

0000d880 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
    d880:	b590      	push	{r4, r7, lr}
    d882:	b085      	sub	sp, #20
    d884:	af00      	add	r7, sp, #0
    d886:	6078      	str	r0, [r7, #4]
    d888:	460b      	mov	r3, r1
    d88a:	70fb      	strb	r3, [r7, #3]
    d88c:	4613      	mov	r3, r2
    d88e:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
    d890:	78fb      	ldrb	r3, [r7, #3]
    d892:	4619      	mov	r1, r3
    d894:	6878      	ldr	r0, [r7, #4]
    d896:	4b21      	ldr	r3, [pc, #132]	; (d91c <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
    d898:	4798      	blx	r3
    d89a:	4603      	mov	r3, r0
    d89c:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
    d89e:	78f9      	ldrb	r1, [r7, #3]
    d8a0:	230a      	movs	r3, #10
    d8a2:	220a      	movs	r2, #10
    d8a4:	6878      	ldr	r0, [r7, #4]
    d8a6:	4c1e      	ldr	r4, [pc, #120]	; (d920 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    d8a8:	47a0      	blx	r4
    d8aa:	4603      	mov	r3, r0
    d8ac:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
    d8ae:	7bfb      	ldrb	r3, [r7, #15]
    d8b0:	4619      	mov	r1, r3
    d8b2:	6878      	ldr	r0, [r7, #4]
    d8b4:	4b1b      	ldr	r3, [pc, #108]	; (d924 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
    d8b6:	4798      	blx	r3
    d8b8:	4603      	mov	r3, r0
    d8ba:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
    d8bc:	78bb      	ldrb	r3, [r7, #2]
    d8be:	2b00      	cmp	r3, #0
    d8c0:	d009      	beq.n	d8d6 <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
    d8c2:	7bba      	ldrb	r2, [r7, #14]
    d8c4:	7b7b      	ldrb	r3, [r7, #13]
    d8c6:	4619      	mov	r1, r3
    d8c8:	2301      	movs	r3, #1
    d8ca:	408b      	lsls	r3, r1
    d8cc:	b2db      	uxtb	r3, r3
    d8ce:	4313      	orrs	r3, r2
    d8d0:	b2db      	uxtb	r3, r3
    d8d2:	73bb      	strb	r3, [r7, #14]
    d8d4:	e00a      	b.n	d8ec <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
    d8d6:	7bba      	ldrb	r2, [r7, #14]
    d8d8:	7b7b      	ldrb	r3, [r7, #13]
    d8da:	4619      	mov	r1, r3
    d8dc:	2301      	movs	r3, #1
    d8de:	408b      	lsls	r3, r1
    d8e0:	b2db      	uxtb	r3, r3
    d8e2:	43db      	mvns	r3, r3
    d8e4:	b2db      	uxtb	r3, r3
    d8e6:	4013      	ands	r3, r2
    d8e8:	b2db      	uxtb	r3, r3
    d8ea:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
    d8ec:	78f9      	ldrb	r1, [r7, #3]
    d8ee:	2309      	movs	r3, #9
    d8f0:	2209      	movs	r2, #9
    d8f2:	6878      	ldr	r0, [r7, #4]
    d8f4:	4c0a      	ldr	r4, [pc, #40]	; (d920 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    d8f6:	47a0      	blx	r4
    d8f8:	4603      	mov	r3, r0
    d8fa:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
    d8fc:	7bba      	ldrb	r2, [r7, #14]
    d8fe:	7bfb      	ldrb	r3, [r7, #15]
    d900:	4619      	mov	r1, r3
    d902:	6878      	ldr	r0, [r7, #4]
    d904:	4b08      	ldr	r3, [pc, #32]	; (d928 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
    d906:	4798      	blx	r3
    d908:	4603      	mov	r3, r0
    d90a:	2b00      	cmp	r3, #0
    d90c:	bf0c      	ite	eq
    d90e:	2301      	moveq	r3, #1
    d910:	2300      	movne	r3, #0
    d912:	b2db      	uxtb	r3, r3
}
    d914:	4618      	mov	r0, r3
    d916:	3714      	adds	r7, #20
    d918:	46bd      	mov	sp, r7
    d91a:	bd90      	pop	{r4, r7, pc}
    d91c:	0000d52b 	.word	0x0000d52b
    d920:	0000d549 	.word	0x0000d549
    d924:	0000d579 	.word	0x0000d579
    d928:	0000d601 	.word	0x0000d601

0000d92c <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    d92c:	b590      	push	{r4, r7, lr}
    d92e:	b085      	sub	sp, #20
    d930:	af02      	add	r7, sp, #8
    d932:	6078      	str	r0, [r7, #4]
    d934:	460b      	mov	r3, r1
    d936:	70fb      	strb	r3, [r7, #3]
    d938:	4613      	mov	r3, r2
    d93a:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    d93c:	78ba      	ldrb	r2, [r7, #2]
    d93e:	78f9      	ldrb	r1, [r7, #3]
    d940:	2306      	movs	r3, #6
    d942:	9300      	str	r3, [sp, #0]
    d944:	2306      	movs	r3, #6
    d946:	6878      	ldr	r0, [r7, #4]
    d948:	4c02      	ldr	r4, [pc, #8]	; (d954 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    d94a:	47a0      	blx	r4
}
    d94c:	bf00      	nop
    d94e:	370c      	adds	r7, #12
    d950:	46bd      	mov	sp, r7
    d952:	bd90      	pop	{r4, r7, pc}
    d954:	0000d7bd 	.word	0x0000d7bd

0000d958 <_Z41__static_initialization_and_destruction_0ii>:
	return MCP23008_INT_ERR;
}
bool	MCP23008_Class::SelfTest(void){

	return isOK;
    d958:	b580      	push	{r7, lr}
    d95a:	b082      	sub	sp, #8
    d95c:	af00      	add	r7, sp, #0
    d95e:	6078      	str	r0, [r7, #4]
    d960:	6039      	str	r1, [r7, #0]
    d962:	687b      	ldr	r3, [r7, #4]
    d964:	2b01      	cmp	r3, #1
    d966:	d10d      	bne.n	d984 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d968:	683b      	ldr	r3, [r7, #0]
    d96a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d96e:	4293      	cmp	r3, r2
    d970:	d108      	bne.n	d984 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d972:	4906      	ldr	r1, [pc, #24]	; (d98c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    d974:	4806      	ldr	r0, [pc, #24]	; (d990 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d976:	4b07      	ldr	r3, [pc, #28]	; (d994 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    d978:	4798      	blx	r3
    d97a:	4a07      	ldr	r2, [pc, #28]	; (d998 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    d97c:	4907      	ldr	r1, [pc, #28]	; (d99c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    d97e:	4804      	ldr	r0, [pc, #16]	; (d990 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d980:	4b07      	ldr	r3, [pc, #28]	; (d9a0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    d982:	4798      	blx	r3
    d984:	bf00      	nop
    d986:	3708      	adds	r7, #8
    d988:	46bd      	mov	sp, r7
    d98a:	bd80      	pop	{r7, pc}
    d98c:	20001814 	.word	0x20001814
    d990:	2000105c 	.word	0x2000105c
    d994:	0000d301 	.word	0x0000d301
    d998:	20000000 	.word	0x20000000
    d99c:	0000d31d 	.word	0x0000d31d
    d9a0:	0000ea1d 	.word	0x0000ea1d

0000d9a4 <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev>:
    d9a4:	b580      	push	{r7, lr}
    d9a6:	af00      	add	r7, sp, #0
    d9a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d9ac:	2001      	movs	r0, #1
    d9ae:	4b01      	ldr	r3, [pc, #4]	; (d9b4 <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev+0x10>)
    d9b0:	4798      	blx	r3
    d9b2:	bd80      	pop	{r7, pc}
    d9b4:	0000d959 	.word	0x0000d959

0000d9b8 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    d9b8:	b480      	push	{r7}
    d9ba:	b083      	sub	sp, #12
    d9bc:	af00      	add	r7, sp, #0
    d9be:	6078      	str	r0, [r7, #4]
    d9c0:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    d9c2:	687b      	ldr	r3, [r7, #4]
    d9c4:	683a      	ldr	r2, [r7, #0]
    d9c6:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
    d9c8:	687b      	ldr	r3, [r7, #4]
    d9ca:	68db      	ldr	r3, [r3, #12]
    d9cc:	2200      	movs	r2, #0
    d9ce:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
    d9d0:	4a06      	ldr	r2, [pc, #24]	; (d9ec <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    d9d2:	687b      	ldr	r3, [r7, #4]
    d9d4:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    d9d6:	687b      	ldr	r3, [r7, #4]
    d9d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d9dc:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    d9de:	687b      	ldr	r3, [r7, #4]
    d9e0:	4618      	mov	r0, r3
    d9e2:	370c      	adds	r7, #12
    d9e4:	46bd      	mov	sp, r7
    d9e6:	bc80      	pop	{r7}
    d9e8:	4770      	bx	lr
    d9ea:	bf00      	nop
    d9ec:	20001174 	.word	0x20001174

0000d9f0 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    d9f0:	b480      	push	{r7}
    d9f2:	b083      	sub	sp, #12
    d9f4:	af00      	add	r7, sp, #0
    d9f6:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    d9f8:	687b      	ldr	r3, [r7, #4]
    d9fa:	2200      	movs	r2, #0
    d9fc:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    d9fe:	687b      	ldr	r3, [r7, #4]
    da00:	4618      	mov	r0, r3
    da02:	370c      	adds	r7, #12
    da04:	46bd      	mov	sp, r7
    da06:	bc80      	pop	{r7}
    da08:	4770      	bx	lr
	...

0000da0c <_ZL9InitArrayv>:


static void InitArray(){
    da0c:	b480      	push	{r7}
    da0e:	b083      	sub	sp, #12
    da10:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    da12:	2301      	movs	r3, #1
    da14:	607b      	str	r3, [r7, #4]
    da16:	687b      	ldr	r3, [r7, #4]
    da18:	2b1f      	cmp	r3, #31
    da1a:	dc34      	bgt.n	da86 <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    da1c:	491e      	ldr	r1, [pc, #120]	; (da98 <_ZL9InitArrayv+0x8c>)
    da1e:	687a      	ldr	r2, [r7, #4]
    da20:	4613      	mov	r3, r2
    da22:	009b      	lsls	r3, r3, #2
    da24:	4413      	add	r3, r2
    da26:	009b      	lsls	r3, r3, #2
    da28:	440b      	add	r3, r1
    da2a:	2200      	movs	r2, #0
    da2c:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    da2e:	491a      	ldr	r1, [pc, #104]	; (da98 <_ZL9InitArrayv+0x8c>)
    da30:	687a      	ldr	r2, [r7, #4]
    da32:	4613      	mov	r3, r2
    da34:	009b      	lsls	r3, r3, #2
    da36:	4413      	add	r3, r2
    da38:	009b      	lsls	r3, r3, #2
    da3a:	440b      	add	r3, r1
    da3c:	330c      	adds	r3, #12
    da3e:	2200      	movs	r2, #0
    da40:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    da42:	687b      	ldr	r3, [r7, #4]
    da44:	1e5a      	subs	r2, r3, #1
    da46:	6879      	ldr	r1, [r7, #4]
    da48:	460b      	mov	r3, r1
    da4a:	009b      	lsls	r3, r3, #2
    da4c:	440b      	add	r3, r1
    da4e:	009b      	lsls	r3, r3, #2
    da50:	4911      	ldr	r1, [pc, #68]	; (da98 <_ZL9InitArrayv+0x8c>)
    da52:	4419      	add	r1, r3
    da54:	4810      	ldr	r0, [pc, #64]	; (da98 <_ZL9InitArrayv+0x8c>)
    da56:	4613      	mov	r3, r2
    da58:	009b      	lsls	r3, r3, #2
    da5a:	4413      	add	r3, r2
    da5c:	009b      	lsls	r3, r3, #2
    da5e:	4403      	add	r3, r0
    da60:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
    da62:	4a0e      	ldr	r2, [pc, #56]	; (da9c <_ZL9InitArrayv+0x90>)
    da64:	687b      	ldr	r3, [r7, #4]
    da66:	2100      	movs	r1, #0
    da68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
    da6c:	687b      	ldr	r3, [r7, #4]
    da6e:	3b01      	subs	r3, #1
    da70:	687a      	ldr	r2, [r7, #4]
    da72:	0092      	lsls	r2, r2, #2
    da74:	4909      	ldr	r1, [pc, #36]	; (da9c <_ZL9InitArrayv+0x90>)
    da76:	440a      	add	r2, r1
    da78:	4908      	ldr	r1, [pc, #32]	; (da9c <_ZL9InitArrayv+0x90>)
    da7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
    da7e:	687b      	ldr	r3, [r7, #4]
    da80:	3301      	adds	r3, #1
    da82:	607b      	str	r3, [r7, #4]
    da84:	e7c7      	b.n	da16 <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
    da86:	4b06      	ldr	r3, [pc, #24]	; (daa0 <_ZL9InitArrayv+0x94>)
    da88:	2201      	movs	r2, #1
    da8a:	701a      	strb	r2, [r3, #0]
		
}
    da8c:	bf00      	nop
    da8e:	370c      	adds	r7, #12
    da90:	46bd      	mov	sp, r7
    da92:	bc80      	pop	{r7}
    da94:	4770      	bx	lr
    da96:	bf00      	nop
    da98:	20001178 	.word	0x20001178
    da9c:	200013f8 	.word	0x200013f8
    daa0:	20001478 	.word	0x20001478

0000daa4 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    daa4:	b580      	push	{r7, lr}
    daa6:	b082      	sub	sp, #8
    daa8:	af00      	add	r7, sp, #0
    daaa:	6078      	str	r0, [r7, #4]
	ticks=0;
    daac:	687b      	ldr	r3, [r7, #4]
    daae:	2200      	movs	r2, #0
    dab0:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    dab2:	4b0d      	ldr	r3, [pc, #52]	; (dae8 <_ZN11Timer_Class4InitEv+0x44>)
    dab4:	781b      	ldrb	r3, [r3, #0]
    dab6:	f083 0301 	eor.w	r3, r3, #1
    daba:	b2db      	uxtb	r3, r3
    dabc:	2b00      	cmp	r3, #0
    dabe:	d001      	beq.n	dac4 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    dac0:	4b0a      	ldr	r3, [pc, #40]	; (daec <_ZN11Timer_Class4InitEv+0x48>)
    dac2:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
    dac4:	6878      	ldr	r0, [r7, #4]
    dac6:	4b0a      	ldr	r3, [pc, #40]	; (daf0 <_ZN11Timer_Class4InitEv+0x4c>)
    dac8:	4798      	blx	r3
    daca:	4603      	mov	r3, r0
    dacc:	2b00      	cmp	r3, #0
    dace:	bf0c      	ite	eq
    dad0:	2301      	moveq	r3, #1
    dad2:	2300      	movne	r3, #0
    dad4:	b2da      	uxtb	r2, r3
    dad6:	687b      	ldr	r3, [r7, #4]
    dad8:	709a      	strb	r2, [r3, #2]
	return isOK;
    dada:	687b      	ldr	r3, [r7, #4]
    dadc:	789b      	ldrb	r3, [r3, #2]
    dade:	b2db      	uxtb	r3, r3
}
    dae0:	4618      	mov	r0, r3
    dae2:	3708      	adds	r7, #8
    dae4:	46bd      	mov	sp, r7
    dae6:	bd80      	pop	{r7, pc}
    dae8:	20001478 	.word	0x20001478
    daec:	0000da0d 	.word	0x0000da0d
    daf0:	0000daf5 	.word	0x0000daf5

0000daf4 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
    daf4:	b580      	push	{r7, lr}
    daf6:	b084      	sub	sp, #16
    daf8:	af00      	add	r7, sp, #0
    dafa:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    dafc:	687b      	ldr	r3, [r7, #4]
    dafe:	68db      	ldr	r3, [r3, #12]
    db00:	4618      	mov	r0, r3
    db02:	4b04      	ldr	r3, [pc, #16]	; (db14 <_ZN11Timer_Class5StartEv+0x20>)
    db04:	4798      	blx	r3
    db06:	60f8      	str	r0, [r7, #12]
	return status;
    db08:	68fb      	ldr	r3, [r7, #12]
	
}
    db0a:	4618      	mov	r0, r3
    db0c:	3710      	adds	r7, #16
    db0e:	46bd      	mov	sp, r7
    db10:	bd80      	pop	{r7, pc}
    db12:	bf00      	nop
    db14:	00002b1d 	.word	0x00002b1d

0000db18 <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
    db18:	b580      	push	{r7, lr}
    db1a:	b084      	sub	sp, #16
    db1c:	af00      	add	r7, sp, #0
    db1e:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    db20:	687b      	ldr	r3, [r7, #4]
    db22:	68db      	ldr	r3, [r3, #12]
    db24:	4618      	mov	r0, r3
    db26:	4b05      	ldr	r3, [pc, #20]	; (db3c <_ZN11Timer_Class4StopEv+0x24>)
    db28:	4798      	blx	r3
    db2a:	60f8      	str	r0, [r7, #12]
	timeout=0;
    db2c:	687b      	ldr	r3, [r7, #4]
    db2e:	2200      	movs	r2, #0
    db30:	705a      	strb	r2, [r3, #1]
	return status;
    db32:	68fb      	ldr	r3, [r7, #12]
}
    db34:	4618      	mov	r0, r3
    db36:	3710      	adds	r7, #16
    db38:	46bd      	mov	sp, r7
    db3a:	bd80      	pop	{r7, pc}
    db3c:	00002b85 	.word	0x00002b85

0000db40 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    db40:	b580      	push	{r7, lr}
    db42:	b086      	sub	sp, #24
    db44:	af00      	add	r7, sp, #0
    db46:	60f8      	str	r0, [r7, #12]
    db48:	60b9      	str	r1, [r7, #8]
    db4a:	607a      	str	r2, [r7, #4]
    db4c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
    db4e:	68b9      	ldr	r1, [r7, #8]
    db50:	68f8      	ldr	r0, [r7, #12]
    db52:	4b0e      	ldr	r3, [pc, #56]	; (db8c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    db54:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
    db56:	68fb      	ldr	r3, [r7, #12]
    db58:	699b      	ldr	r3, [r3, #24]
    db5a:	687a      	ldr	r2, [r7, #4]
    db5c:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    db5e:	68fb      	ldr	r3, [r7, #12]
    db60:	699b      	ldr	r3, [r3, #24]
    db62:	68ba      	ldr	r2, [r7, #8]
    db64:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    db66:	68fb      	ldr	r3, [r7, #12]
    db68:	699b      	ldr	r3, [r3, #24]
    db6a:	78fa      	ldrb	r2, [r7, #3]
    db6c:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    db6e:	68fb      	ldr	r3, [r7, #12]
    db70:	68da      	ldr	r2, [r3, #12]
    db72:	68fb      	ldr	r3, [r7, #12]
    db74:	699b      	ldr	r3, [r3, #24]
    db76:	4619      	mov	r1, r3
    db78:	4610      	mov	r0, r2
    db7a:	4b05      	ldr	r3, [pc, #20]	; (db90 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
    db7c:	4798      	blx	r3
    db7e:	6178      	str	r0, [r7, #20]
	
	return status;
    db80:	697b      	ldr	r3, [r7, #20]
}
    db82:	4618      	mov	r0, r3
    db84:	3718      	adds	r7, #24
    db86:	46bd      	mov	sp, r7
    db88:	bd80      	pop	{r7, pc}
    db8a:	bf00      	nop
    db8c:	0000dd1d 	.word	0x0000dd1d
    db90:	00002bf1 	.word	0x00002bf1

0000db94 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
    db94:	b580      	push	{r7, lr}
    db96:	b086      	sub	sp, #24
    db98:	af00      	add	r7, sp, #0
    db9a:	60f8      	str	r0, [r7, #12]
    db9c:	60b9      	str	r1, [r7, #8]
    db9e:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
    dba0:	687a      	ldr	r2, [r7, #4]
    dba2:	68b9      	ldr	r1, [r7, #8]
    dba4:	68f8      	ldr	r0, [r7, #12]
    dba6:	4b0c      	ldr	r3, [pc, #48]	; (dbd8 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
    dba8:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
    dbaa:	68fb      	ldr	r3, [r7, #12]
    dbac:	68db      	ldr	r3, [r3, #12]
    dbae:	681b      	ldr	r3, [r3, #0]
    dbb0:	699b      	ldr	r3, [r3, #24]
    dbb2:	68fa      	ldr	r2, [r7, #12]
    dbb4:	68d2      	ldr	r2, [r2, #12]
    dbb6:	3204      	adds	r2, #4
    dbb8:	4610      	mov	r0, r2
    dbba:	4798      	blx	r3
    dbbc:	4603      	mov	r3, r0
    dbbe:	2b00      	cmp	r3, #0
    dbc0:	d105      	bne.n	dbce <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
    dbc2:	68fb      	ldr	r3, [r7, #12]
    dbc4:	68db      	ldr	r3, [r3, #12]
    dbc6:	4618      	mov	r0, r3
    dbc8:	4b04      	ldr	r3, [pc, #16]	; (dbdc <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
    dbca:	4798      	blx	r3
    dbcc:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
    dbce:	697b      	ldr	r3, [r7, #20]
}
    dbd0:	4618      	mov	r0, r3
    dbd2:	3718      	adds	r7, #24
    dbd4:	46bd      	mov	sp, r7
    dbd6:	bd80      	pop	{r7, pc}
    dbd8:	0000dbe1 	.word	0x0000dbe1
    dbdc:	00002b1d 	.word	0x00002b1d

0000dbe0 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
		status=timer_start(timer_descr);
	}
	return status;
}

int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    dbe0:	b590      	push	{r4, r7, lr}
    dbe2:	b087      	sub	sp, #28
    dbe4:	af00      	add	r7, sp, #0
    dbe6:	60f8      	str	r0, [r7, #12]
    dbe8:	60b9      	str	r1, [r7, #8]
    dbea:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    dbec:	2301      	movs	r3, #1
    dbee:	687a      	ldr	r2, [r7, #4]
    dbf0:	68b9      	ldr	r1, [r7, #8]
    dbf2:	68f8      	ldr	r0, [r7, #12]
    dbf4:	4c03      	ldr	r4, [pc, #12]	; (dc04 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    dbf6:	47a0      	blx	r4
    dbf8:	6178      	str	r0, [r7, #20]
		return status;
    dbfa:	697b      	ldr	r3, [r7, #20]
}
    dbfc:	4618      	mov	r0, r3
    dbfe:	371c      	adds	r7, #28
    dc00:	46bd      	mov	sp, r7
    dc02:	bd90      	pop	{r4, r7, pc}
    dc04:	0000db41 	.word	0x0000db41

0000dc08 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
    dc08:	b580      	push	{r7, lr}
    dc0a:	b082      	sub	sp, #8
    dc0c:	af00      	add	r7, sp, #0
    dc0e:	6078      	str	r0, [r7, #4]
    dc10:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    dc12:	6839      	ldr	r1, [r7, #0]
    dc14:	6878      	ldr	r0, [r7, #4]
    dc16:	4b0f      	ldr	r3, [pc, #60]	; (dc54 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    dc18:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    dc1a:	687b      	ldr	r3, [r7, #4]
    dc1c:	68db      	ldr	r3, [r3, #12]
    dc1e:	f103 0218 	add.w	r2, r3, #24
    dc22:	687b      	ldr	r3, [r7, #4]
    dc24:	699b      	ldr	r3, [r3, #24]
    dc26:	4619      	mov	r1, r3
    dc28:	4610      	mov	r0, r2
    dc2a:	4b0b      	ldr	r3, [pc, #44]	; (dc58 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    dc2c:	4798      	blx	r3
    dc2e:	4603      	mov	r3, r0
    dc30:	2b00      	cmp	r3, #0
    dc32:	d007      	beq.n	dc44 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    dc34:	687b      	ldr	r3, [r7, #4]
    dc36:	68da      	ldr	r2, [r3, #12]
    dc38:	687b      	ldr	r3, [r7, #4]
    dc3a:	699b      	ldr	r3, [r3, #24]
    dc3c:	4619      	mov	r1, r3
    dc3e:	4610      	mov	r0, r2
    dc40:	4b06      	ldr	r3, [pc, #24]	; (dc5c <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    dc42:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    dc44:	687b      	ldr	r3, [r7, #4]
    dc46:	699b      	ldr	r3, [r3, #24]
    dc48:	2200      	movs	r2, #0
    dc4a:	60da      	str	r2, [r3, #12]
}
    dc4c:	bf00      	nop
    dc4e:	3708      	adds	r7, #8
    dc50:	46bd      	mov	sp, r7
    dc52:	bd80      	pop	{r7, pc}
    dc54:	0000dd9d 	.word	0x0000dd9d
    dc58:	000038dd 	.word	0x000038dd
    dc5c:	00002cf5 	.word	0x00002cf5

0000dc60 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    dc60:	b590      	push	{r4, r7, lr}
    dc62:	b087      	sub	sp, #28
    dc64:	af00      	add	r7, sp, #0
    dc66:	60f8      	str	r0, [r7, #12]
    dc68:	60b9      	str	r1, [r7, #8]
    dc6a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    dc6c:	2300      	movs	r3, #0
    dc6e:	687a      	ldr	r2, [r7, #4]
    dc70:	68b9      	ldr	r1, [r7, #8]
    dc72:	68f8      	ldr	r0, [r7, #12]
    dc74:	4c0c      	ldr	r4, [pc, #48]	; (dca8 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    dc76:	47a0      	blx	r4
    dc78:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    dc7a:	68fb      	ldr	r3, [r7, #12]
    dc7c:	68db      	ldr	r3, [r3, #12]
    dc7e:	681b      	ldr	r3, [r3, #0]
    dc80:	699b      	ldr	r3, [r3, #24]
    dc82:	68fa      	ldr	r2, [r7, #12]
    dc84:	68d2      	ldr	r2, [r2, #12]
    dc86:	3204      	adds	r2, #4
    dc88:	4610      	mov	r0, r2
    dc8a:	4798      	blx	r3
    dc8c:	4603      	mov	r3, r0
    dc8e:	2b00      	cmp	r3, #0
    dc90:	d105      	bne.n	dc9e <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    dc92:	68fb      	ldr	r3, [r7, #12]
    dc94:	68db      	ldr	r3, [r3, #12]
    dc96:	4618      	mov	r0, r3
    dc98:	4b04      	ldr	r3, [pc, #16]	; (dcac <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    dc9a:	4798      	blx	r3
    dc9c:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    dc9e:	697b      	ldr	r3, [r7, #20]
}
    dca0:	4618      	mov	r0, r3
    dca2:	371c      	adds	r7, #28
    dca4:	46bd      	mov	sp, r7
    dca6:	bd90      	pop	{r4, r7, pc}
    dca8:	0000db41 	.word	0x0000db41
    dcac:	00002b1d 	.word	0x00002b1d

0000dcb0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    dcb0:	b480      	push	{r7}
    dcb2:	b085      	sub	sp, #20
    dcb4:	af00      	add	r7, sp, #0
    dcb6:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dcb8:	2300      	movs	r3, #0
    dcba:	73fb      	strb	r3, [r7, #15]
    dcbc:	7bfb      	ldrb	r3, [r7, #15]
    dcbe:	2b1f      	cmp	r3, #31
    dcc0:	dc23      	bgt.n	dd0a <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    dcc2:	687b      	ldr	r3, [r7, #4]
    dcc4:	7f1a      	ldrb	r2, [r3, #28]
    dcc6:	7bfb      	ldrb	r3, [r7, #15]
    dcc8:	4413      	add	r3, r2
    dcca:	b2db      	uxtb	r3, r3
    dccc:	f003 031f 	and.w	r3, r3, #31
    dcd0:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    dcd2:	7bba      	ldrb	r2, [r7, #14]
    dcd4:	4910      	ldr	r1, [pc, #64]	; (dd18 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    dcd6:	4613      	mov	r3, r2
    dcd8:	009b      	lsls	r3, r3, #2
    dcda:	4413      	add	r3, r2
    dcdc:	009b      	lsls	r3, r3, #2
    dcde:	440b      	add	r3, r1
    dce0:	330c      	adds	r3, #12
    dce2:	681b      	ldr	r3, [r3, #0]
    dce4:	2b00      	cmp	r3, #0
    dce6:	d10c      	bne.n	dd02 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
    dce8:	7bba      	ldrb	r2, [r7, #14]
    dcea:	4613      	mov	r3, r2
    dcec:	009b      	lsls	r3, r3, #2
    dcee:	4413      	add	r3, r2
    dcf0:	009b      	lsls	r3, r3, #2
    dcf2:	4a09      	ldr	r2, [pc, #36]	; (dd18 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    dcf4:	441a      	add	r2, r3
    dcf6:	687b      	ldr	r3, [r7, #4]
    dcf8:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    dcfa:	687b      	ldr	r3, [r7, #4]
    dcfc:	7bba      	ldrb	r2, [r7, #14]
    dcfe:	771a      	strb	r2, [r3, #28]
			return;
    dd00:	e006      	b.n	dd10 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dd02:	7bfb      	ldrb	r3, [r7, #15]
    dd04:	3301      	adds	r3, #1
    dd06:	73fb      	strb	r3, [r7, #15]
    dd08:	e7d8      	b.n	dcbc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    dd0a:	687b      	ldr	r3, [r7, #4]
    dd0c:	4a02      	ldr	r2, [pc, #8]	; (dd18 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    dd0e:	619a      	str	r2, [r3, #24]

}
    dd10:	3714      	adds	r7, #20
    dd12:	46bd      	mov	sp, r7
    dd14:	bc80      	pop	{r7}
    dd16:	4770      	bx	lr
    dd18:	20001178 	.word	0x20001178

0000dd1c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
    dd1c:	b580      	push	{r7, lr}
    dd1e:	b084      	sub	sp, #16
    dd20:	af00      	add	r7, sp, #0
    dd22:	6078      	str	r0, [r7, #4]
    dd24:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dd26:	2300      	movs	r3, #0
    dd28:	73fb      	strb	r3, [r7, #15]
    dd2a:	7bfb      	ldrb	r3, [r7, #15]
    dd2c:	2b1f      	cmp	r3, #31
    dd2e:	dc28      	bgt.n	dd82 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    dd30:	687b      	ldr	r3, [r7, #4]
    dd32:	7f1a      	ldrb	r2, [r3, #28]
    dd34:	7bfb      	ldrb	r3, [r7, #15]
    dd36:	4413      	add	r3, r2
    dd38:	b2db      	uxtb	r3, r3
    dd3a:	f003 031f 	and.w	r3, r3, #31
    dd3e:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
    dd40:	7bba      	ldrb	r2, [r7, #14]
    dd42:	4913      	ldr	r1, [pc, #76]	; (dd90 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    dd44:	4613      	mov	r3, r2
    dd46:	009b      	lsls	r3, r3, #2
    dd48:	4413      	add	r3, r2
    dd4a:	009b      	lsls	r3, r3, #2
    dd4c:	440b      	add	r3, r1
    dd4e:	330c      	adds	r3, #12
    dd50:	681a      	ldr	r2, [r3, #0]
    dd52:	683b      	ldr	r3, [r7, #0]
    dd54:	429a      	cmp	r2, r3
    dd56:	d110      	bne.n	dd7a <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
    dd58:	6839      	ldr	r1, [r7, #0]
    dd5a:	6878      	ldr	r0, [r7, #4]
    dd5c:	4b0d      	ldr	r3, [pc, #52]	; (dd94 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
    dd5e:	4798      	blx	r3
			task=&taskArray[j];
    dd60:	7bba      	ldrb	r2, [r7, #14]
    dd62:	4613      	mov	r3, r2
    dd64:	009b      	lsls	r3, r3, #2
    dd66:	4413      	add	r3, r2
    dd68:	009b      	lsls	r3, r3, #2
    dd6a:	4a09      	ldr	r2, [pc, #36]	; (dd90 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    dd6c:	441a      	add	r2, r3
    dd6e:	687b      	ldr	r3, [r7, #4]
    dd70:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    dd72:	687b      	ldr	r3, [r7, #4]
    dd74:	7bba      	ldrb	r2, [r7, #14]
    dd76:	771a      	strb	r2, [r3, #28]
			return;
    dd78:	e006      	b.n	dd88 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dd7a:	7bfb      	ldrb	r3, [r7, #15]
    dd7c:	3301      	adds	r3, #1
    dd7e:	73fb      	strb	r3, [r7, #15]
    dd80:	e7d3      	b.n	dd2a <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
    dd82:	6878      	ldr	r0, [r7, #4]
    dd84:	4b04      	ldr	r3, [pc, #16]	; (dd98 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
    dd86:	4798      	blx	r3
	//task=&taskArray[0];

}
    dd88:	3710      	adds	r7, #16
    dd8a:	46bd      	mov	sp, r7
    dd8c:	bd80      	pop	{r7, pc}
    dd8e:	bf00      	nop
    dd90:	20001178 	.word	0x20001178
    dd94:	0000dc09 	.word	0x0000dc09
    dd98:	0000dcb1 	.word	0x0000dcb1

0000dd9c <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    dd9c:	b480      	push	{r7}
    dd9e:	b085      	sub	sp, #20
    dda0:	af00      	add	r7, sp, #0
    dda2:	6078      	str	r0, [r7, #4]
    dda4:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dda6:	2300      	movs	r3, #0
    dda8:	73fb      	strb	r3, [r7, #15]
    ddaa:	7bfb      	ldrb	r3, [r7, #15]
    ddac:	2b1f      	cmp	r3, #31
    ddae:	dc19      	bgt.n	dde4 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    ddb0:	7bfa      	ldrb	r2, [r7, #15]
    ddb2:	490f      	ldr	r1, [pc, #60]	; (ddf0 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    ddb4:	4613      	mov	r3, r2
    ddb6:	009b      	lsls	r3, r3, #2
    ddb8:	4413      	add	r3, r2
    ddba:	009b      	lsls	r3, r3, #2
    ddbc:	440b      	add	r3, r1
    ddbe:	330c      	adds	r3, #12
    ddc0:	681a      	ldr	r2, [r3, #0]
    ddc2:	683b      	ldr	r3, [r7, #0]
    ddc4:	429a      	cmp	r2, r3
    ddc6:	d109      	bne.n	dddc <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    ddc8:	7bfa      	ldrb	r2, [r7, #15]
    ddca:	4613      	mov	r3, r2
    ddcc:	009b      	lsls	r3, r3, #2
    ddce:	4413      	add	r3, r2
    ddd0:	009b      	lsls	r3, r3, #2
    ddd2:	4a07      	ldr	r2, [pc, #28]	; (ddf0 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    ddd4:	441a      	add	r2, r3
    ddd6:	687b      	ldr	r3, [r7, #4]
    ddd8:	619a      	str	r2, [r3, #24]
			return;
    ddda:	e004      	b.n	dde6 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dddc:	7bfb      	ldrb	r3, [r7, #15]
    ddde:	3301      	adds	r3, #1
    dde0:	73fb      	strb	r3, [r7, #15]
    dde2:	e7e2      	b.n	ddaa <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    dde4:	bf00      	nop
}
    dde6:	3714      	adds	r7, #20
    dde8:	46bd      	mov	sp, r7
    ddea:	bc80      	pop	{r7}
    ddec:	4770      	bx	lr
    ddee:	bf00      	nop
    ddf0:	20001178 	.word	0x20001178

0000ddf4 <_Z41__static_initialization_and_destruction_0ii>:
    ddf4:	b580      	push	{r7, lr}
    ddf6:	b082      	sub	sp, #8
    ddf8:	af00      	add	r7, sp, #0
    ddfa:	6078      	str	r0, [r7, #4]
    ddfc:	6039      	str	r1, [r7, #0]
    ddfe:	687b      	ldr	r3, [r7, #4]
    de00:	2b01      	cmp	r3, #1
    de02:	d14c      	bne.n	de9e <_Z41__static_initialization_and_destruction_0ii+0xaa>
    de04:	683b      	ldr	r3, [r7, #0]
    de06:	f64f 72ff 	movw	r2, #65535	; 0xffff
    de0a:	4293      	cmp	r3, r2
    de0c:	d147      	bne.n	de9e <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    de0e:	4926      	ldr	r1, [pc, #152]	; (dea8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    de10:	4826      	ldr	r0, [pc, #152]	; (deac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    de12:	4b27      	ldr	r3, [pc, #156]	; (deb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    de14:	4798      	blx	r3
    de16:	4a27      	ldr	r2, [pc, #156]	; (deb4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    de18:	4927      	ldr	r1, [pc, #156]	; (deb8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    de1a:	4824      	ldr	r0, [pc, #144]	; (deac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    de1c:	4b27      	ldr	r3, [pc, #156]	; (debc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    de1e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    de20:	4927      	ldr	r1, [pc, #156]	; (dec0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    de22:	4828      	ldr	r0, [pc, #160]	; (dec4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    de24:	4b22      	ldr	r3, [pc, #136]	; (deb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    de26:	4798      	blx	r3
    de28:	4a22      	ldr	r2, [pc, #136]	; (deb4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    de2a:	4923      	ldr	r1, [pc, #140]	; (deb8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    de2c:	4825      	ldr	r0, [pc, #148]	; (dec4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    de2e:	4b23      	ldr	r3, [pc, #140]	; (debc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    de30:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    de32:	4925      	ldr	r1, [pc, #148]	; (dec8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    de34:	4825      	ldr	r0, [pc, #148]	; (decc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    de36:	4b1e      	ldr	r3, [pc, #120]	; (deb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    de38:	4798      	blx	r3
    de3a:	4a1e      	ldr	r2, [pc, #120]	; (deb4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    de3c:	491e      	ldr	r1, [pc, #120]	; (deb8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    de3e:	4823      	ldr	r0, [pc, #140]	; (decc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    de40:	4b1e      	ldr	r3, [pc, #120]	; (debc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    de42:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    de44:	4922      	ldr	r1, [pc, #136]	; (ded0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    de46:	4823      	ldr	r0, [pc, #140]	; (ded4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    de48:	4b19      	ldr	r3, [pc, #100]	; (deb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    de4a:	4798      	blx	r3
    de4c:	4a19      	ldr	r2, [pc, #100]	; (deb4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    de4e:	491a      	ldr	r1, [pc, #104]	; (deb8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    de50:	4820      	ldr	r0, [pc, #128]	; (ded4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    de52:	4b1a      	ldr	r3, [pc, #104]	; (debc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    de54:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    de56:	4920      	ldr	r1, [pc, #128]	; (ded8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    de58:	4820      	ldr	r0, [pc, #128]	; (dedc <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    de5a:	4b15      	ldr	r3, [pc, #84]	; (deb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    de5c:	4798      	blx	r3
    de5e:	4a15      	ldr	r2, [pc, #84]	; (deb4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    de60:	4915      	ldr	r1, [pc, #84]	; (deb8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    de62:	481e      	ldr	r0, [pc, #120]	; (dedc <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    de64:	4b15      	ldr	r3, [pc, #84]	; (debc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    de66:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    de68:	491d      	ldr	r1, [pc, #116]	; (dee0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    de6a:	481e      	ldr	r0, [pc, #120]	; (dee4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    de6c:	4b10      	ldr	r3, [pc, #64]	; (deb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    de6e:	4798      	blx	r3
    de70:	4a10      	ldr	r2, [pc, #64]	; (deb4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    de72:	4911      	ldr	r1, [pc, #68]	; (deb8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    de74:	481b      	ldr	r0, [pc, #108]	; (dee4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    de76:	4b11      	ldr	r3, [pc, #68]	; (debc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    de78:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    de7a:	491b      	ldr	r1, [pc, #108]	; (dee8 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    de7c:	481b      	ldr	r0, [pc, #108]	; (deec <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    de7e:	4b0c      	ldr	r3, [pc, #48]	; (deb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    de80:	4798      	blx	r3
    de82:	4a0c      	ldr	r2, [pc, #48]	; (deb4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    de84:	490c      	ldr	r1, [pc, #48]	; (deb8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    de86:	4819      	ldr	r0, [pc, #100]	; (deec <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    de88:	4b0c      	ldr	r3, [pc, #48]	; (debc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    de8a:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    de8c:	4918      	ldr	r1, [pc, #96]	; (def0 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    de8e:	4819      	ldr	r0, [pc, #100]	; (def4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    de90:	4b07      	ldr	r3, [pc, #28]	; (deb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    de92:	4798      	blx	r3
    de94:	4a07      	ldr	r2, [pc, #28]	; (deb4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    de96:	4908      	ldr	r1, [pc, #32]	; (deb8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    de98:	4816      	ldr	r0, [pc, #88]	; (def4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    de9a:	4b08      	ldr	r3, [pc, #32]	; (debc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    de9c:	4798      	blx	r3
    de9e:	bf00      	nop
    dea0:	3708      	adds	r7, #8
    dea2:	46bd      	mov	sp, r7
    dea4:	bd80      	pop	{r7, pc}
    dea6:	bf00      	nop
    dea8:	200016e4 	.word	0x200016e4
    deac:	20001074 	.word	0x20001074
    deb0:	0000d9b9 	.word	0x0000d9b9
    deb4:	20000000 	.word	0x20000000
    deb8:	0000d9f1 	.word	0x0000d9f1
    debc:	0000ea1d 	.word	0x0000ea1d
    dec0:	20001778 	.word	0x20001778
    dec4:	20001094 	.word	0x20001094
    dec8:	2000189c 	.word	0x2000189c
    decc:	200010b4 	.word	0x200010b4
    ded0:	20001798 	.word	0x20001798
    ded4:	200010d4 	.word	0x200010d4
    ded8:	2000185c 	.word	0x2000185c
    dedc:	200010f4 	.word	0x200010f4
    dee0:	2000187c 	.word	0x2000187c
    dee4:	20001114 	.word	0x20001114
    dee8:	20001754 	.word	0x20001754
    deec:	20001134 	.word	0x20001134
    def0:	200017f4 	.word	0x200017f4
    def4:	20001154 	.word	0x20001154

0000def8 <_GLOBAL__sub_I_ptrTimerClass>:
    def8:	b580      	push	{r7, lr}
    defa:	af00      	add	r7, sp, #0
    defc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    df00:	2001      	movs	r0, #1
    df02:	4b01      	ldr	r3, [pc, #4]	; (df08 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    df04:	4798      	blx	r3
    df06:	bd80      	pop	{r7, pc}
    df08:	0000ddf5 	.word	0x0000ddf5

0000df0c <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    df0c:	b480      	push	{r7}
    df0e:	b083      	sub	sp, #12
    df10:	af00      	add	r7, sp, #0
    df12:	6078      	str	r0, [r7, #4]
    df14:	4a05      	ldr	r2, [pc, #20]	; (df2c <_ZN5PrintC1Ev+0x20>)
    df16:	687b      	ldr	r3, [r7, #4]
    df18:	601a      	str	r2, [r3, #0]
    df1a:	687b      	ldr	r3, [r7, #4]
    df1c:	2200      	movs	r2, #0
    df1e:	605a      	str	r2, [r3, #4]
    df20:	687b      	ldr	r3, [r7, #4]
    df22:	4618      	mov	r0, r3
    df24:	370c      	adds	r7, #12
    df26:	46bd      	mov	sp, r7
    df28:	bc80      	pop	{r7}
    df2a:	4770      	bx	lr
    df2c:	0000f200 	.word	0x0000f200

0000df30 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    df30:	b480      	push	{r7}
    df32:	b083      	sub	sp, #12
    df34:	af00      	add	r7, sp, #0
    df36:	6078      	str	r0, [r7, #4]
    df38:	2300      	movs	r3, #0
    df3a:	4618      	mov	r0, r3
    df3c:	370c      	adds	r7, #12
    df3e:	46bd      	mov	sp, r7
    df40:	bc80      	pop	{r7}
    df42:	4770      	bx	lr

0000df44 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    df44:	b480      	push	{r7}
    df46:	b083      	sub	sp, #12
    df48:	af00      	add	r7, sp, #0
    df4a:	6078      	str	r0, [r7, #4]
    df4c:	bf00      	nop
    df4e:	370c      	adds	r7, #12
    df50:	46bd      	mov	sp, r7
    df52:	bc80      	pop	{r7}
    df54:	4770      	bx	lr
	...

0000df58 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    df58:	b580      	push	{r7, lr}
    df5a:	b082      	sub	sp, #8
    df5c:	af00      	add	r7, sp, #0
    df5e:	6078      	str	r0, [r7, #4]
    df60:	687b      	ldr	r3, [r7, #4]
    df62:	4618      	mov	r0, r3
    df64:	4b06      	ldr	r3, [pc, #24]	; (df80 <_ZN6StreamC1Ev+0x28>)
    df66:	4798      	blx	r3
    df68:	4a06      	ldr	r2, [pc, #24]	; (df84 <_ZN6StreamC1Ev+0x2c>)
    df6a:	687b      	ldr	r3, [r7, #4]
    df6c:	601a      	str	r2, [r3, #0]
    df6e:	687b      	ldr	r3, [r7, #4]
    df70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    df74:	609a      	str	r2, [r3, #8]
    df76:	687b      	ldr	r3, [r7, #4]
    df78:	4618      	mov	r0, r3
    df7a:	3708      	adds	r7, #8
    df7c:	46bd      	mov	sp, r7
    df7e:	bd80      	pop	{r7, pc}
    df80:	0000df0d 	.word	0x0000df0d
    df84:	0000f1c4 	.word	0x0000f1c4

0000df88 <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    df88:	b480      	push	{r7}
    df8a:	b083      	sub	sp, #12
    df8c:	af00      	add	r7, sp, #0
    df8e:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    df90:	4b06      	ldr	r3, [pc, #24]	; (dfac <_ZL10USBTimeoutPK10timer_task+0x24>)
    df92:	681b      	ldr	r3, [r3, #0]
    df94:	2201      	movs	r2, #1
    df96:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    df98:	4b04      	ldr	r3, [pc, #16]	; (dfac <_ZL10USBTimeoutPK10timer_task+0x24>)
    df9a:	681b      	ldr	r3, [r3, #0]
    df9c:	2200      	movs	r2, #0
    df9e:	741a      	strb	r2, [r3, #16]
	
}
    dfa0:	bf00      	nop
    dfa2:	370c      	adds	r7, #12
    dfa4:	46bd      	mov	sp, r7
    dfa6:	bc80      	pop	{r7}
    dfa8:	4770      	bx	lr
    dfaa:	bf00      	nop
    dfac:	2000157c 	.word	0x2000157c

0000dfb0 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    dfb0:	b480      	push	{r7}
    dfb2:	b083      	sub	sp, #12
    dfb4:	af00      	add	r7, sp, #0
    dfb6:	4603      	mov	r3, r0
    dfb8:	603a      	str	r2, [r7, #0]
    dfba:	71fb      	strb	r3, [r7, #7]
    dfbc:	460b      	mov	r3, r1
    dfbe:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    dfc0:	4b08      	ldr	r3, [pc, #32]	; (dfe4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    dfc2:	681b      	ldr	r3, [r3, #0]
    dfc4:	2201      	movs	r2, #1
    dfc6:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    dfc8:	4b06      	ldr	r3, [pc, #24]	; (dfe4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    dfca:	681b      	ldr	r3, [r3, #0]
    dfcc:	2201      	movs	r2, #1
    dfce:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    dfd0:	4b04      	ldr	r3, [pc, #16]	; (dfe4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    dfd2:	681b      	ldr	r3, [r3, #0]
    dfd4:	2201      	movs	r2, #1
    dfd6:	741a      	strb	r2, [r3, #16]


	return false;
    dfd8:	2300      	movs	r3, #0
}
    dfda:	4618      	mov	r0, r3
    dfdc:	370c      	adds	r7, #12
    dfde:	46bd      	mov	sp, r7
    dfe0:	bc80      	pop	{r7}
    dfe2:	4770      	bx	lr
    dfe4:	2000157c 	.word	0x2000157c

0000dfe8 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    dfe8:	b480      	push	{r7}
    dfea:	b083      	sub	sp, #12
    dfec:	af00      	add	r7, sp, #0
    dfee:	4603      	mov	r3, r0
    dff0:	603a      	str	r2, [r7, #0]
    dff2:	71fb      	strb	r3, [r7, #7]
    dff4:	460b      	mov	r3, r1
    dff6:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    dff8:	4b08      	ldr	r3, [pc, #32]	; (e01c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    dffa:	681b      	ldr	r3, [r3, #0]
    dffc:	2201      	movs	r2, #1
    dffe:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    e000:	4b06      	ldr	r3, [pc, #24]	; (e01c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e002:	681b      	ldr	r3, [r3, #0]
    e004:	2201      	movs	r2, #1
    e006:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    e008:	4b04      	ldr	r3, [pc, #16]	; (e01c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e00a:	681b      	ldr	r3, [r3, #0]
    e00c:	2201      	movs	r2, #1
    e00e:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    e010:	2300      	movs	r3, #0
}
    e012:	4618      	mov	r0, r3
    e014:	370c      	adds	r7, #12
    e016:	46bd      	mov	sp, r7
    e018:	bc80      	pop	{r7}
    e01a:	4770      	bx	lr
    e01c:	2000157c 	.word	0x2000157c

0000e020 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    e020:	b580      	push	{r7, lr}
    e022:	b082      	sub	sp, #8
    e024:	af00      	add	r7, sp, #0
    e026:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    e028:	793b      	ldrb	r3, [r7, #4]
    e02a:	f003 0301 	and.w	r3, r3, #1
    e02e:	b2db      	uxtb	r3, r3
    e030:	2b00      	cmp	r3, #0
    e032:	d013      	beq.n	e05c <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    e034:	490c      	ldr	r1, [pc, #48]	; (e068 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    e036:	2000      	movs	r0, #0
    e038:	4b0c      	ldr	r3, [pc, #48]	; (e06c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    e03a:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    e03c:	490c      	ldr	r1, [pc, #48]	; (e070 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    e03e:	2001      	movs	r0, #1
    e040:	4b0a      	ldr	r3, [pc, #40]	; (e06c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    e042:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    e044:	4b0b      	ldr	r3, [pc, #44]	; (e074 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e046:	681b      	ldr	r3, [r3, #0]
    e048:	2201      	movs	r2, #1
    e04a:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    e04c:	4b09      	ldr	r3, [pc, #36]	; (e074 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e04e:	681b      	ldr	r3, [r3, #0]
    e050:	2201      	movs	r2, #1
    e052:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    e054:	4b07      	ldr	r3, [pc, #28]	; (e074 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e056:	681b      	ldr	r3, [r3, #0]
    e058:	2201      	movs	r2, #1
    e05a:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    e05c:	2300      	movs	r3, #0
}
    e05e:	4618      	mov	r0, r3
    e060:	3708      	adds	r7, #8
    e062:	46bd      	mov	sp, r7
    e064:	bd80      	pop	{r7, pc}
    e066:	bf00      	nop
    e068:	0000dfb1 	.word	0x0000dfb1
    e06c:	0000c2c9 	.word	0x0000c2c9
    e070:	0000dfe9 	.word	0x0000dfe9
    e074:	2000157c 	.word	0x2000157c

0000e078 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    e078:	b580      	push	{r7, lr}
    e07a:	b082      	sub	sp, #8
    e07c:	af00      	add	r7, sp, #0
    e07e:	6078      	str	r0, [r7, #4]
    e080:	687b      	ldr	r3, [r7, #4]
    e082:	4618      	mov	r0, r3
    e084:	4b0a      	ldr	r3, [pc, #40]	; (e0b0 <_ZN9CDC_ClassC1Ev+0x38>)
    e086:	4798      	blx	r3
    e088:	687b      	ldr	r3, [r7, #4]
    e08a:	3310      	adds	r3, #16
    e08c:	4618      	mov	r0, r3
    e08e:	4b09      	ldr	r3, [pc, #36]	; (e0b4 <_ZN9CDC_ClassC1Ev+0x3c>)
    e090:	4798      	blx	r3
    e092:	4a09      	ldr	r2, [pc, #36]	; (e0b8 <_ZN9CDC_ClassC1Ev+0x40>)
    e094:	687b      	ldr	r3, [r7, #4]
    e096:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    e098:	687b      	ldr	r3, [r7, #4]
    e09a:	f04f 32ff 	mov.w	r2, #4294967295
    e09e:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    e0a0:	4a06      	ldr	r2, [pc, #24]	; (e0bc <_ZN9CDC_ClassC1Ev+0x44>)
    e0a2:	687b      	ldr	r3, [r7, #4]
    e0a4:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    e0a6:	687b      	ldr	r3, [r7, #4]
    e0a8:	4618      	mov	r0, r3
    e0aa:	3708      	adds	r7, #8
    e0ac:	46bd      	mov	sp, r7
    e0ae:	bd80      	pop	{r7, pc}
    e0b0:	0000df59 	.word	0x0000df59
    e0b4:	0000e765 	.word	0x0000e765
    e0b8:	0000f194 	.word	0x0000f194
    e0bc:	2000157c 	.word	0x2000157c

0000e0c0 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    e0c0:	b580      	push	{r7, lr}
    e0c2:	b082      	sub	sp, #8
    e0c4:	af00      	add	r7, sp, #0
    e0c6:	6078      	str	r0, [r7, #4]
    e0c8:	4a06      	ldr	r2, [pc, #24]	; (e0e4 <_ZN9CDC_ClassD1Ev+0x24>)
    e0ca:	687b      	ldr	r3, [r7, #4]
    e0cc:	601a      	str	r2, [r3, #0]
    e0ce:	687b      	ldr	r3, [r7, #4]
    e0d0:	3310      	adds	r3, #16
    e0d2:	4618      	mov	r0, r3
    e0d4:	4b04      	ldr	r3, [pc, #16]	; (e0e8 <_ZN9CDC_ClassD1Ev+0x28>)
    e0d6:	4798      	blx	r3
{
} //~CDC_Class
    e0d8:	687b      	ldr	r3, [r7, #4]
    e0da:	4618      	mov	r0, r3
    e0dc:	3708      	adds	r7, #8
    e0de:	46bd      	mov	sp, r7
    e0e0:	bd80      	pop	{r7, pc}
    e0e2:	bf00      	nop
    e0e4:	0000f194 	.word	0x0000f194
    e0e8:	0000e785 	.word	0x0000e785

0000e0ec <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    e0ec:	b580      	push	{r7, lr}
    e0ee:	b082      	sub	sp, #8
    e0f0:	af00      	add	r7, sp, #0
    e0f2:	6078      	str	r0, [r7, #4]
	
	OnInit();
    e0f4:	687b      	ldr	r3, [r7, #4]
    e0f6:	3310      	adds	r3, #16
    e0f8:	4618      	mov	r0, r3
    e0fa:	4b09      	ldr	r3, [pc, #36]	; (e120 <_ZN9CDC_Class4InitEv+0x34>)
    e0fc:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    e0fe:	4909      	ldr	r1, [pc, #36]	; (e124 <_ZN9CDC_Class4InitEv+0x38>)
    e100:	2003      	movs	r0, #3
    e102:	4b09      	ldr	r3, [pc, #36]	; (e128 <_ZN9CDC_Class4InitEv+0x3c>)
    e104:	4798      	blx	r3
	delay_ms(100);
    e106:	2064      	movs	r0, #100	; 0x64
    e108:	4b08      	ldr	r3, [pc, #32]	; (e12c <_ZN9CDC_Class4InitEv+0x40>)
    e10a:	4798      	blx	r3
		
	if (connected)
    e10c:	687b      	ldr	r3, [r7, #4]
    e10e:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    e110:	2064      	movs	r0, #100	; 0x64
    e112:	4b06      	ldr	r3, [pc, #24]	; (e12c <_ZN9CDC_Class4InitEv+0x40>)
    e114:	4798      	blx	r3

	

}
    e116:	bf00      	nop
    e118:	3708      	adds	r7, #8
    e11a:	46bd      	mov	sp, r7
    e11c:	bd80      	pop	{r7, pc}
    e11e:	bf00      	nop
    e120:	0000e799 	.word	0x0000e799
    e124:	0000e021 	.word	0x0000e021
    e128:	0000c2c9 	.word	0x0000c2c9
    e12c:	000022c5 	.word	0x000022c5

0000e130 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    e130:	b580      	push	{r7, lr}
    e132:	b082      	sub	sp, #8
    e134:	af00      	add	r7, sp, #0
    e136:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    e138:	4b03      	ldr	r3, [pc, #12]	; (e148 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    e13a:	4798      	blx	r3
    e13c:	4603      	mov	r3, r0
	
}
    e13e:	4618      	mov	r0, r3
    e140:	3708      	adds	r7, #8
    e142:	46bd      	mov	sp, r7
    e144:	bd80      	pop	{r7, pc}
    e146:	bf00      	nop
    e148:	0000c341 	.word	0x0000c341

0000e14c <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    e14c:	b580      	push	{r7, lr}
    e14e:	b084      	sub	sp, #16
    e150:	af00      	add	r7, sp, #0
    e152:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    e154:	687b      	ldr	r3, [r7, #4]
    e156:	699b      	ldr	r3, [r3, #24]
    e158:	f1b3 3fff 	cmp.w	r3, #4294967295
    e15c:	bf14      	ite	ne
    e15e:	2301      	movne	r3, #1
    e160:	2300      	moveq	r3, #0
    e162:	b2db      	uxtb	r3, r3
    e164:	2b00      	cmp	r3, #0
    e166:	d002      	beq.n	e16e <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    e168:	687b      	ldr	r3, [r7, #4]
    e16a:	699b      	ldr	r3, [r3, #24]
    e16c:	e011      	b.n	e192 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    e16e:	687b      	ldr	r3, [r7, #4]
    e170:	681b      	ldr	r3, [r3, #0]
    e172:	331c      	adds	r3, #28
    e174:	681b      	ldr	r3, [r3, #0]
    e176:	f107 010f 	add.w	r1, r7, #15
    e17a:	2201      	movs	r2, #1
    e17c:	6878      	ldr	r0, [r7, #4]
    e17e:	4798      	blx	r3
    e180:	4602      	mov	r2, r0
    e182:	687b      	ldr	r3, [r7, #4]
    e184:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    e186:	7bfb      	ldrb	r3, [r7, #15]
    e188:	461a      	mov	r2, r3
    e18a:	687b      	ldr	r3, [r7, #4]
    e18c:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    e18e:	687b      	ldr	r3, [r7, #4]
    e190:	699b      	ldr	r3, [r3, #24]
}
    e192:	4618      	mov	r0, r3
    e194:	3710      	adds	r7, #16
    e196:	46bd      	mov	sp, r7
    e198:	bd80      	pop	{r7, pc}
	...

0000e19c <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    e19c:	b580      	push	{r7, lr}
    e19e:	b086      	sub	sp, #24
    e1a0:	af00      	add	r7, sp, #0
    e1a2:	60f8      	str	r0, [r7, #12]
    e1a4:	60b9      	str	r1, [r7, #8]
    e1a6:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    e1a8:	68fb      	ldr	r3, [r7, #12]
    e1aa:	7c1b      	ldrb	r3, [r3, #16]
    e1ac:	b2db      	uxtb	r3, r3
    e1ae:	2b00      	cmp	r3, #0
    e1b0:	d02e      	beq.n	e210 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e1b2:	687a      	ldr	r2, [r7, #4]
    e1b4:	4613      	mov	r3, r2
    e1b6:	009b      	lsls	r3, r3, #2
    e1b8:	4413      	add	r3, r2
    e1ba:	005b      	lsls	r3, r3, #1
    e1bc:	461a      	mov	r2, r3
    e1be:	4918      	ldr	r1, [pc, #96]	; (e220 <_ZN9CDC_Class8readDataEPvl+0x84>)
    e1c0:	4818      	ldr	r0, [pc, #96]	; (e224 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e1c2:	4b19      	ldr	r3, [pc, #100]	; (e228 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    e1c4:	4798      	blx	r3
		rxReady=false;
    e1c6:	68fb      	ldr	r3, [r7, #12]
    e1c8:	2200      	movs	r2, #0
    e1ca:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    e1cc:	687b      	ldr	r3, [r7, #4]
    e1ce:	4619      	mov	r1, r3
    e1d0:	68b8      	ldr	r0, [r7, #8]
    e1d2:	4b16      	ldr	r3, [pc, #88]	; (e22c <_ZN9CDC_Class8readDataEPvl+0x90>)
    e1d4:	4798      	blx	r3
    e1d6:	4603      	mov	r3, r0
    e1d8:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    e1da:	68fb      	ldr	r3, [r7, #12]
    e1dc:	7d5b      	ldrb	r3, [r3, #21]
    e1de:	b2db      	uxtb	r3, r3
    e1e0:	f083 0301 	eor.w	r3, r3, #1
    e1e4:	b2db      	uxtb	r3, r3
    e1e6:	2b00      	cmp	r3, #0
    e1e8:	d006      	beq.n	e1f8 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e1ea:	68fb      	ldr	r3, [r7, #12]
    e1ec:	7c1b      	ldrb	r3, [r3, #16]
    e1ee:	b2db      	uxtb	r3, r3
    e1f0:	2b00      	cmp	r3, #0
    e1f2:	d001      	beq.n	e1f8 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e1f4:	2301      	movs	r3, #1
    e1f6:	e000      	b.n	e1fa <_ZN9CDC_Class8readDataEPvl+0x5e>
    e1f8:	2300      	movs	r3, #0
    e1fa:	2b00      	cmp	r3, #0
    e1fc:	d000      	beq.n	e200 <_ZN9CDC_Class8readDataEPvl+0x64>
    e1fe:	e7ec      	b.n	e1da <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    e200:	4808      	ldr	r0, [pc, #32]	; (e224 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e202:	4b0b      	ldr	r3, [pc, #44]	; (e230 <_ZN9CDC_Class8readDataEPvl+0x94>)
    e204:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e206:	4906      	ldr	r1, [pc, #24]	; (e220 <_ZN9CDC_Class8readDataEPvl+0x84>)
    e208:	4806      	ldr	r0, [pc, #24]	; (e224 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e20a:	4b0a      	ldr	r3, [pc, #40]	; (e234 <_ZN9CDC_Class8readDataEPvl+0x98>)
    e20c:	4798      	blx	r3
    e20e:	e001      	b.n	e214 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    e210:	2300      	movs	r3, #0
    e212:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    e214:	7dfb      	ldrb	r3, [r7, #23]
}
    e216:	4618      	mov	r0, r3
    e218:	3718      	adds	r7, #24
    e21a:	46bd      	mov	sp, r7
    e21c:	bd80      	pop	{r7, pc}
    e21e:	bf00      	nop
    e220:	0000df89 	.word	0x0000df89
    e224:	2000151c 	.word	0x2000151c
    e228:	0000dc61 	.word	0x0000dc61
    e22c:	0000c21d 	.word	0x0000c21d
    e230:	0000db19 	.word	0x0000db19
    e234:	0000dc09 	.word	0x0000dc09

0000e238 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    e238:	b580      	push	{r7, lr}
    e23a:	b084      	sub	sp, #16
    e23c:	af00      	add	r7, sp, #0
    e23e:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    e240:	687b      	ldr	r3, [r7, #4]
    e242:	2200      	movs	r2, #0
    e244:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    e246:	f107 030f 	add.w	r3, r7, #15
    e24a:	2101      	movs	r1, #1
    e24c:	4618      	mov	r0, r3
    e24e:	4b08      	ldr	r3, [pc, #32]	; (e270 <_ZN9CDC_Class4readEv+0x38>)
    e250:	4798      	blx	r3
	while(!rxReady);
    e252:	687b      	ldr	r3, [r7, #4]
    e254:	7d5b      	ldrb	r3, [r3, #21]
    e256:	b2db      	uxtb	r3, r3
    e258:	f083 0301 	eor.w	r3, r3, #1
    e25c:	b2db      	uxtb	r3, r3
    e25e:	2b00      	cmp	r3, #0
    e260:	d000      	beq.n	e264 <_ZN9CDC_Class4readEv+0x2c>
    e262:	e7f6      	b.n	e252 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    e264:	7bfb      	ldrb	r3, [r7, #15]
}
    e266:	4618      	mov	r0, r3
    e268:	3710      	adds	r7, #16
    e26a:	46bd      	mov	sp, r7
    e26c:	bd80      	pop	{r7, pc}
    e26e:	bf00      	nop
    e270:	0000c21d 	.word	0x0000c21d

0000e274 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    e274:	b580      	push	{r7, lr}
    e276:	b082      	sub	sp, #8
    e278:	af00      	add	r7, sp, #0
    e27a:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    e27c:	687b      	ldr	r3, [r7, #4]
    e27e:	331c      	adds	r3, #28
    e280:	2140      	movs	r1, #64	; 0x40
    e282:	4618      	mov	r0, r3
    e284:	4b02      	ldr	r3, [pc, #8]	; (e290 <_ZN9CDC_Class5flushEv+0x1c>)
    e286:	4798      	blx	r3
}
    e288:	bf00      	nop
    e28a:	3708      	adds	r7, #8
    e28c:	46bd      	mov	sp, r7
    e28e:	bd80      	pop	{r7, pc}
    e290:	0000c261 	.word	0x0000c261

0000e294 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    e294:	b580      	push	{r7, lr}
    e296:	b082      	sub	sp, #8
    e298:	af00      	add	r7, sp, #0
    e29a:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    e29c:	4b02      	ldr	r3, [pc, #8]	; (e2a8 <_ZN9CDC_Class5clearEv+0x14>)
    e29e:	4798      	blx	r3
}
    e2a0:	bf00      	nop
    e2a2:	3708      	adds	r7, #8
    e2a4:	46bd      	mov	sp, r7
    e2a6:	bd80      	pop	{r7, pc}
    e2a8:	0000c2a5 	.word	0x0000c2a5

0000e2ac <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    e2ac:	b580      	push	{r7, lr}
    e2ae:	b082      	sub	sp, #8
    e2b0:	af00      	add	r7, sp, #0
    e2b2:	6078      	str	r0, [r7, #4]
    e2b4:	460b      	mov	r3, r1
    e2b6:	70fb      	strb	r3, [r7, #3]
	if (connected){
    e2b8:	687b      	ldr	r3, [r7, #4]
    e2ba:	7c1b      	ldrb	r3, [r3, #16]
    e2bc:	b2db      	uxtb	r3, r3
    e2be:	2b00      	cmp	r3, #0
    e2c0:	d012      	beq.n	e2e8 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    e2c2:	687b      	ldr	r3, [r7, #4]
    e2c4:	7d1b      	ldrb	r3, [r3, #20]
    e2c6:	b2db      	uxtb	r3, r3
    e2c8:	f083 0301 	eor.w	r3, r3, #1
    e2cc:	b2db      	uxtb	r3, r3
    e2ce:	2b00      	cmp	r3, #0
    e2d0:	d000      	beq.n	e2d4 <_ZN9CDC_Class5writeEh+0x28>
    e2d2:	e7f6      	b.n	e2c2 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    e2d4:	687b      	ldr	r3, [r7, #4]
    e2d6:	681b      	ldr	r3, [r3, #0]
    e2d8:	3324      	adds	r3, #36	; 0x24
    e2da:	681b      	ldr	r3, [r3, #0]
    e2dc:	1cf9      	adds	r1, r7, #3
    e2de:	2201      	movs	r2, #1
    e2e0:	6878      	ldr	r0, [r7, #4]
    e2e2:	4798      	blx	r3
    e2e4:	4603      	mov	r3, r0
    e2e6:	e000      	b.n	e2ea <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    e2e8:	2300      	movs	r3, #0
	}
		
}
    e2ea:	4618      	mov	r0, r3
    e2ec:	3708      	adds	r7, #8
    e2ee:	46bd      	mov	sp, r7
    e2f0:	bd80      	pop	{r7, pc}
	...

0000e2f4 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    e2f4:	b580      	push	{r7, lr}
    e2f6:	b086      	sub	sp, #24
    e2f8:	af00      	add	r7, sp, #0
    e2fa:	60f8      	str	r0, [r7, #12]
    e2fc:	60b9      	str	r1, [r7, #8]
    e2fe:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    e300:	68fb      	ldr	r3, [r7, #12]
    e302:	7c1b      	ldrb	r3, [r3, #16]
    e304:	b2db      	uxtb	r3, r3
    e306:	2b00      	cmp	r3, #0
    e308:	d02f      	beq.n	e36a <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e30a:	687a      	ldr	r2, [r7, #4]
    e30c:	4613      	mov	r3, r2
    e30e:	009b      	lsls	r3, r3, #2
    e310:	4413      	add	r3, r2
    e312:	005b      	lsls	r3, r3, #1
    e314:	461a      	mov	r2, r3
    e316:	4917      	ldr	r1, [pc, #92]	; (e374 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e318:	4817      	ldr	r0, [pc, #92]	; (e378 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e31a:	4b18      	ldr	r3, [pc, #96]	; (e37c <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    e31c:	4798      	blx	r3
		txReady=false;
    e31e:	68fb      	ldr	r3, [r7, #12]
    e320:	2200      	movs	r2, #0
    e322:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e324:	687b      	ldr	r3, [r7, #4]
    e326:	4619      	mov	r1, r3
    e328:	68b8      	ldr	r0, [r7, #8]
    e32a:	4b15      	ldr	r3, [pc, #84]	; (e380 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    e32c:	4798      	blx	r3
    e32e:	4603      	mov	r3, r0
    e330:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    e332:	68fb      	ldr	r3, [r7, #12]
    e334:	7d1b      	ldrb	r3, [r3, #20]
    e336:	b2db      	uxtb	r3, r3
    e338:	f083 0301 	eor.w	r3, r3, #1
    e33c:	b2db      	uxtb	r3, r3
    e33e:	2b00      	cmp	r3, #0
    e340:	d006      	beq.n	e350 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e342:	68fb      	ldr	r3, [r7, #12]
    e344:	7c1b      	ldrb	r3, [r3, #16]
    e346:	b2db      	uxtb	r3, r3
    e348:	2b00      	cmp	r3, #0
    e34a:	d001      	beq.n	e350 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e34c:	2301      	movs	r3, #1
    e34e:	e000      	b.n	e352 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    e350:	2300      	movs	r3, #0
    e352:	2b00      	cmp	r3, #0
    e354:	d000      	beq.n	e358 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    e356:	e7ec      	b.n	e332 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    e358:	4807      	ldr	r0, [pc, #28]	; (e378 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e35a:	4b0a      	ldr	r3, [pc, #40]	; (e384 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    e35c:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e35e:	4905      	ldr	r1, [pc, #20]	; (e374 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e360:	4805      	ldr	r0, [pc, #20]	; (e378 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e362:	4b09      	ldr	r3, [pc, #36]	; (e388 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    e364:	4798      	blx	r3
		return r;
    e366:	697b      	ldr	r3, [r7, #20]
    e368:	e000      	b.n	e36c <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    e36a:	2300      	movs	r3, #0
	}
	

}
    e36c:	4618      	mov	r0, r3
    e36e:	3718      	adds	r7, #24
    e370:	46bd      	mov	sp, r7
    e372:	bd80      	pop	{r7, pc}
    e374:	0000df89 	.word	0x0000df89
    e378:	2000151c 	.word	0x2000151c
    e37c:	0000dc61 	.word	0x0000dc61
    e380:	0000c261 	.word	0x0000c261
    e384:	0000db19 	.word	0x0000db19
    e388:	0000dc09 	.word	0x0000dc09

0000e38c <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    e38c:	b580      	push	{r7, lr}
    e38e:	b086      	sub	sp, #24
    e390:	af00      	add	r7, sp, #0
    e392:	60f8      	str	r0, [r7, #12]
    e394:	60b9      	str	r1, [r7, #8]
    e396:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    e398:	68fb      	ldr	r3, [r7, #12]
    e39a:	2200      	movs	r2, #0
    e39c:	751a      	strb	r2, [r3, #20]

 	if (connected){
    e39e:	68fb      	ldr	r3, [r7, #12]
    e3a0:	7c1b      	ldrb	r3, [r3, #16]
    e3a2:	b2db      	uxtb	r3, r3
    e3a4:	2b00      	cmp	r3, #0
    e3a6:	d02a      	beq.n	e3fe <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e3a8:	687a      	ldr	r2, [r7, #4]
    e3aa:	4613      	mov	r3, r2
    e3ac:	009b      	lsls	r3, r3, #2
    e3ae:	4413      	add	r3, r2
    e3b0:	005b      	lsls	r3, r3, #1
    e3b2:	461a      	mov	r2, r3
    e3b4:	4915      	ldr	r1, [pc, #84]	; (e40c <_ZN9CDC_Class5writeEPKhj+0x80>)
    e3b6:	4816      	ldr	r0, [pc, #88]	; (e410 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e3b8:	4b16      	ldr	r3, [pc, #88]	; (e414 <_ZN9CDC_Class5writeEPKhj+0x88>)
    e3ba:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e3bc:	6879      	ldr	r1, [r7, #4]
    e3be:	68b8      	ldr	r0, [r7, #8]
    e3c0:	4b15      	ldr	r3, [pc, #84]	; (e418 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    e3c2:	4798      	blx	r3
    e3c4:	4603      	mov	r3, r0
    e3c6:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    e3c8:	68fb      	ldr	r3, [r7, #12]
    e3ca:	7d1b      	ldrb	r3, [r3, #20]
    e3cc:	b2db      	uxtb	r3, r3
    e3ce:	f083 0301 	eor.w	r3, r3, #1
    e3d2:	b2db      	uxtb	r3, r3
    e3d4:	2b00      	cmp	r3, #0
    e3d6:	d006      	beq.n	e3e6 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e3d8:	68fb      	ldr	r3, [r7, #12]
    e3da:	7c1b      	ldrb	r3, [r3, #16]
    e3dc:	b2db      	uxtb	r3, r3
    e3de:	2b00      	cmp	r3, #0
    e3e0:	d001      	beq.n	e3e6 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e3e2:	2301      	movs	r3, #1
    e3e4:	e000      	b.n	e3e8 <_ZN9CDC_Class5writeEPKhj+0x5c>
    e3e6:	2300      	movs	r3, #0
    e3e8:	2b00      	cmp	r3, #0
    e3ea:	d000      	beq.n	e3ee <_ZN9CDC_Class5writeEPKhj+0x62>
    e3ec:	e7ec      	b.n	e3c8 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    e3ee:	4808      	ldr	r0, [pc, #32]	; (e410 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e3f0:	4b0a      	ldr	r3, [pc, #40]	; (e41c <_ZN9CDC_Class5writeEPKhj+0x90>)
    e3f2:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e3f4:	4905      	ldr	r1, [pc, #20]	; (e40c <_ZN9CDC_Class5writeEPKhj+0x80>)
    e3f6:	4806      	ldr	r0, [pc, #24]	; (e410 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e3f8:	4b09      	ldr	r3, [pc, #36]	; (e420 <_ZN9CDC_Class5writeEPKhj+0x94>)
    e3fa:	4798      	blx	r3
    e3fc:	e001      	b.n	e402 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    e3fe:	2300      	movs	r3, #0
    e400:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    e402:	697b      	ldr	r3, [r7, #20]
}
    e404:	4618      	mov	r0, r3
    e406:	3718      	adds	r7, #24
    e408:	46bd      	mov	sp, r7
    e40a:	bd80      	pop	{r7, pc}
    e40c:	0000df89 	.word	0x0000df89
    e410:	2000151c 	.word	0x2000151c
    e414:	0000dc61 	.word	0x0000dc61
    e418:	0000c261 	.word	0x0000c261
    e41c:	0000db19 	.word	0x0000db19
    e420:	0000dc09 	.word	0x0000dc09

0000e424 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    e424:	b480      	push	{r7}
    e426:	b083      	sub	sp, #12
    e428:	af00      	add	r7, sp, #0
    e42a:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    e42c:	687b      	ldr	r3, [r7, #4]
    e42e:	7d5b      	ldrb	r3, [r3, #21]
    e430:	b2db      	uxtb	r3, r3
    e432:	2b00      	cmp	r3, #0
    e434:	d006      	beq.n	e444 <_ZN9CDC_Class9availableEv+0x20>
    e436:	687b      	ldr	r3, [r7, #4]
    e438:	7d1b      	ldrb	r3, [r3, #20]
    e43a:	b2db      	uxtb	r3, r3
    e43c:	2b00      	cmp	r3, #0
    e43e:	d001      	beq.n	e444 <_ZN9CDC_Class9availableEv+0x20>
    e440:	2301      	movs	r3, #1
    e442:	e000      	b.n	e446 <_ZN9CDC_Class9availableEv+0x22>
    e444:	2300      	movs	r3, #0
    e446:	2b00      	cmp	r3, #0
    e448:	d001      	beq.n	e44e <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    e44a:	2301      	movs	r3, #1
    e44c:	e000      	b.n	e450 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    e44e:	2300      	movs	r3, #0
	}
	
}
    e450:	4618      	mov	r0, r3
    e452:	370c      	adds	r7, #12
    e454:	46bd      	mov	sp, r7
    e456:	bc80      	pop	{r7}
    e458:	4770      	bx	lr
	...

0000e45c <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    e45c:	b580      	push	{r7, lr}
    e45e:	b082      	sub	sp, #8
    e460:	af00      	add	r7, sp, #0
    e462:	6078      	str	r0, [r7, #4]
    e464:	6039      	str	r1, [r7, #0]
    e466:	687b      	ldr	r3, [r7, #4]
    e468:	2b01      	cmp	r3, #1
    e46a:	d154      	bne.n	e516 <_Z41__static_initialization_and_destruction_0ii+0xba>
    e46c:	683b      	ldr	r3, [r7, #0]
    e46e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e472:	4293      	cmp	r3, r2
    e474:	d14f      	bne.n	e516 <_Z41__static_initialization_and_destruction_0ii+0xba>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e476:	492a      	ldr	r1, [pc, #168]	; (e520 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e478:	482a      	ldr	r0, [pc, #168]	; (e524 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e47a:	4b2b      	ldr	r3, [pc, #172]	; (e528 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e47c:	4798      	blx	r3
    e47e:	4a2b      	ldr	r2, [pc, #172]	; (e52c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e480:	492b      	ldr	r1, [pc, #172]	; (e530 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e482:	4828      	ldr	r0, [pc, #160]	; (e524 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e484:	4b2b      	ldr	r3, [pc, #172]	; (e534 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e486:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    e488:	492b      	ldr	r1, [pc, #172]	; (e538 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e48a:	482c      	ldr	r0, [pc, #176]	; (e53c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e48c:	4b26      	ldr	r3, [pc, #152]	; (e528 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e48e:	4798      	blx	r3
    e490:	4a26      	ldr	r2, [pc, #152]	; (e52c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e492:	4927      	ldr	r1, [pc, #156]	; (e530 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e494:	4829      	ldr	r0, [pc, #164]	; (e53c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e496:	4b27      	ldr	r3, [pc, #156]	; (e534 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e498:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    e49a:	4929      	ldr	r1, [pc, #164]	; (e540 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e49c:	4829      	ldr	r0, [pc, #164]	; (e544 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e49e:	4b22      	ldr	r3, [pc, #136]	; (e528 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e4a0:	4798      	blx	r3
    e4a2:	4a22      	ldr	r2, [pc, #136]	; (e52c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e4a4:	4922      	ldr	r1, [pc, #136]	; (e530 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e4a6:	4827      	ldr	r0, [pc, #156]	; (e544 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e4a8:	4b22      	ldr	r3, [pc, #136]	; (e534 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e4aa:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e4ac:	4926      	ldr	r1, [pc, #152]	; (e548 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    e4ae:	4827      	ldr	r0, [pc, #156]	; (e54c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e4b0:	4b1d      	ldr	r3, [pc, #116]	; (e528 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e4b2:	4798      	blx	r3
    e4b4:	4a1d      	ldr	r2, [pc, #116]	; (e52c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e4b6:	491e      	ldr	r1, [pc, #120]	; (e530 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e4b8:	4824      	ldr	r0, [pc, #144]	; (e54c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e4ba:	4b1e      	ldr	r3, [pc, #120]	; (e534 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e4bc:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    e4be:	4924      	ldr	r1, [pc, #144]	; (e550 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    e4c0:	4824      	ldr	r0, [pc, #144]	; (e554 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e4c2:	4b19      	ldr	r3, [pc, #100]	; (e528 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e4c4:	4798      	blx	r3
    e4c6:	4a19      	ldr	r2, [pc, #100]	; (e52c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e4c8:	4919      	ldr	r1, [pc, #100]	; (e530 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e4ca:	4822      	ldr	r0, [pc, #136]	; (e554 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e4cc:	4b19      	ldr	r3, [pc, #100]	; (e534 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e4ce:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e4d0:	4921      	ldr	r1, [pc, #132]	; (e558 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    e4d2:	4822      	ldr	r0, [pc, #136]	; (e55c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e4d4:	4b14      	ldr	r3, [pc, #80]	; (e528 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e4d6:	4798      	blx	r3
    e4d8:	4a14      	ldr	r2, [pc, #80]	; (e52c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e4da:	4915      	ldr	r1, [pc, #84]	; (e530 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e4dc:	481f      	ldr	r0, [pc, #124]	; (e55c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e4de:	4b15      	ldr	r3, [pc, #84]	; (e534 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e4e0:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e4e2:	491f      	ldr	r1, [pc, #124]	; (e560 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    e4e4:	481f      	ldr	r0, [pc, #124]	; (e564 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    e4e6:	4b10      	ldr	r3, [pc, #64]	; (e528 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e4e8:	4798      	blx	r3
    e4ea:	4a10      	ldr	r2, [pc, #64]	; (e52c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e4ec:	4910      	ldr	r1, [pc, #64]	; (e530 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e4ee:	481d      	ldr	r0, [pc, #116]	; (e564 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    e4f0:	4b10      	ldr	r3, [pc, #64]	; (e534 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e4f2:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    e4f4:	491c      	ldr	r1, [pc, #112]	; (e568 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    e4f6:	481d      	ldr	r0, [pc, #116]	; (e56c <_Z41__static_initialization_and_destruction_0ii+0x110>)
    e4f8:	4b0b      	ldr	r3, [pc, #44]	; (e528 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e4fa:	4798      	blx	r3
    e4fc:	4a0b      	ldr	r2, [pc, #44]	; (e52c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e4fe:	490c      	ldr	r1, [pc, #48]	; (e530 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e500:	481a      	ldr	r0, [pc, #104]	; (e56c <_Z41__static_initialization_and_destruction_0ii+0x110>)
    e502:	4b0c      	ldr	r3, [pc, #48]	; (e534 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e504:	4798      	blx	r3
    e506:	481a      	ldr	r0, [pc, #104]	; (e570 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    e508:	4b1a      	ldr	r3, [pc, #104]	; (e574 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    e50a:	4798      	blx	r3
    e50c:	4a07      	ldr	r2, [pc, #28]	; (e52c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e50e:	491a      	ldr	r1, [pc, #104]	; (e578 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    e510:	4817      	ldr	r0, [pc, #92]	; (e570 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    e512:	4b08      	ldr	r3, [pc, #32]	; (e534 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e514:	4798      	blx	r3
    e516:	bf00      	nop
    e518:	3708      	adds	r7, #8
    e51a:	46bd      	mov	sp, r7
    e51c:	bd80      	pop	{r7, pc}
    e51e:	bf00      	nop
    e520:	200016e4 	.word	0x200016e4
    e524:	2000147c 	.word	0x2000147c
    e528:	0000d9b9 	.word	0x0000d9b9
    e52c:	20000000 	.word	0x20000000
    e530:	0000d9f1 	.word	0x0000d9f1
    e534:	0000ea1d 	.word	0x0000ea1d
    e538:	20001778 	.word	0x20001778
    e53c:	2000149c 	.word	0x2000149c
    e540:	2000189c 	.word	0x2000189c
    e544:	200014bc 	.word	0x200014bc
    e548:	20001798 	.word	0x20001798
    e54c:	200014dc 	.word	0x200014dc
    e550:	2000185c 	.word	0x2000185c
    e554:	200014fc 	.word	0x200014fc
    e558:	2000187c 	.word	0x2000187c
    e55c:	2000151c 	.word	0x2000151c
    e560:	20001754 	.word	0x20001754
    e564:	2000153c 	.word	0x2000153c
    e568:	200017f4 	.word	0x200017f4
    e56c:	2000155c 	.word	0x2000155c
    e570:	20001580 	.word	0x20001580
    e574:	0000e079 	.word	0x0000e079
    e578:	0000e0c1 	.word	0x0000e0c1

0000e57c <_GLOBAL__sub_I_ptrCDCClass>:
    e57c:	b580      	push	{r7, lr}
    e57e:	af00      	add	r7, sp, #0
    e580:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e584:	2001      	movs	r0, #1
    e586:	4b01      	ldr	r3, [pc, #4]	; (e58c <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    e588:	4798      	blx	r3
    e58a:	bd80      	pop	{r7, pc}
    e58c:	0000e45d 	.word	0x0000e45d

0000e590 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    e590:	b580      	push	{r7, lr}
    e592:	b086      	sub	sp, #24
    e594:	af00      	add	r7, sp, #0
    e596:	60f8      	str	r0, [r7, #12]
    e598:	60b9      	str	r1, [r7, #8]
    e59a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    e59c:	2300      	movs	r3, #0
    e59e:	617b      	str	r3, [r7, #20]
  while (size--) {
    e5a0:	687b      	ldr	r3, [r7, #4]
    e5a2:	1e5a      	subs	r2, r3, #1
    e5a4:	607a      	str	r2, [r7, #4]
    e5a6:	2b00      	cmp	r3, #0
    e5a8:	bf14      	ite	ne
    e5aa:	2301      	movne	r3, #1
    e5ac:	2300      	moveq	r3, #0
    e5ae:	b2db      	uxtb	r3, r3
    e5b0:	2b00      	cmp	r3, #0
    e5b2:	d016      	beq.n	e5e2 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    e5b4:	68fb      	ldr	r3, [r7, #12]
    e5b6:	681b      	ldr	r3, [r3, #0]
    e5b8:	681a      	ldr	r2, [r3, #0]
    e5ba:	68bb      	ldr	r3, [r7, #8]
    e5bc:	1c59      	adds	r1, r3, #1
    e5be:	60b9      	str	r1, [r7, #8]
    e5c0:	781b      	ldrb	r3, [r3, #0]
    e5c2:	4619      	mov	r1, r3
    e5c4:	68f8      	ldr	r0, [r7, #12]
    e5c6:	4790      	blx	r2
    e5c8:	4603      	mov	r3, r0
    e5ca:	2b00      	cmp	r3, #0
    e5cc:	bf14      	ite	ne
    e5ce:	2301      	movne	r3, #1
    e5d0:	2300      	moveq	r3, #0
    e5d2:	b2db      	uxtb	r3, r3
    e5d4:	2b00      	cmp	r3, #0
    e5d6:	d003      	beq.n	e5e0 <_ZN5Print5writeEPKhj+0x50>
    e5d8:	697b      	ldr	r3, [r7, #20]
    e5da:	3301      	adds	r3, #1
    e5dc:	617b      	str	r3, [r7, #20]
  while (size--) {
    e5de:	e7df      	b.n	e5a0 <_ZN5Print5writeEPKhj+0x10>
    else break;
    e5e0:	bf00      	nop
  }
  return n;
    e5e2:	697b      	ldr	r3, [r7, #20]
}
    e5e4:	4618      	mov	r0, r3
    e5e6:	3718      	adds	r7, #24
    e5e8:	46bd      	mov	sp, r7
    e5ea:	bd80      	pop	{r7, pc}

0000e5ec <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    e5ec:	b480      	push	{r7}
    e5ee:	b083      	sub	sp, #12
    e5f0:	af00      	add	r7, sp, #0
    e5f2:	6078      	str	r0, [r7, #4]
    e5f4:	460b      	mov	r3, r1
    e5f6:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    e5f8:	78fb      	ldrb	r3, [r7, #3]
    e5fa:	687a      	ldr	r2, [r7, #4]
    e5fc:	01db      	lsls	r3, r3, #7
    e5fe:	4413      	add	r3, r2
    e600:	681b      	ldr	r3, [r3, #0]
}
    e602:	4618      	mov	r0, r3
    e604:	370c      	adds	r7, #12
    e606:	46bd      	mov	sp, r7
    e608:	bc80      	pop	{r7}
    e60a:	4770      	bx	lr

0000e60c <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    e60c:	b480      	push	{r7}
    e60e:	b083      	sub	sp, #12
    e610:	af00      	add	r7, sp, #0
    e612:	6078      	str	r0, [r7, #4]
    e614:	460b      	mov	r3, r1
    e616:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    e618:	78fb      	ldrb	r3, [r7, #3]
    e61a:	687a      	ldr	r2, [r7, #4]
    e61c:	01db      	lsls	r3, r3, #7
    e61e:	4413      	add	r3, r2
    e620:	3310      	adds	r3, #16
    e622:	681b      	ldr	r3, [r3, #0]
}
    e624:	4618      	mov	r0, r3
    e626:	370c      	adds	r7, #12
    e628:	46bd      	mov	sp, r7
    e62a:	bc80      	pop	{r7}
    e62c:	4770      	bx	lr

0000e62e <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    e62e:	b480      	push	{r7}
    e630:	b083      	sub	sp, #12
    e632:	af00      	add	r7, sp, #0
    e634:	6078      	str	r0, [r7, #4]
    e636:	460b      	mov	r3, r1
    e638:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    e63a:	78fb      	ldrb	r3, [r7, #3]
    e63c:	687a      	ldr	r2, [r7, #4]
    e63e:	01db      	lsls	r3, r3, #7
    e640:	4413      	add	r3, r2
    e642:	3320      	adds	r3, #32
    e644:	681b      	ldr	r3, [r3, #0]
}
    e646:	4618      	mov	r0, r3
    e648:	370c      	adds	r7, #12
    e64a:	46bd      	mov	sp, r7
    e64c:	bc80      	pop	{r7}
    e64e:	4770      	bx	lr

0000e650 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    e650:	b580      	push	{r7, lr}
    e652:	b086      	sub	sp, #24
    e654:	af00      	add	r7, sp, #0
    e656:	4603      	mov	r3, r0
    e658:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    e65a:	f107 030c 	add.w	r3, r7, #12
    e65e:	4618      	mov	r0, r3
    e660:	4b13      	ldr	r3, [pc, #76]	; (e6b0 <_gpio_get_level+0x60>)
    e662:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    e664:	79fb      	ldrb	r3, [r7, #7]
    e666:	4619      	mov	r1, r3
    e668:	4812      	ldr	r0, [pc, #72]	; (e6b4 <_gpio_get_level+0x64>)
    e66a:	4b13      	ldr	r3, [pc, #76]	; (e6b8 <_gpio_get_level+0x68>)
    e66c:	4798      	blx	r3
    e66e:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    e670:	79fb      	ldrb	r3, [r7, #7]
    e672:	4619      	mov	r1, r3
    e674:	480f      	ldr	r0, [pc, #60]	; (e6b4 <_gpio_get_level+0x64>)
    e676:	4b11      	ldr	r3, [pc, #68]	; (e6bc <_gpio_get_level+0x6c>)
    e678:	4798      	blx	r3
    e67a:	4602      	mov	r2, r0
    e67c:	697b      	ldr	r3, [r7, #20]
    e67e:	43db      	mvns	r3, r3
    e680:	4013      	ands	r3, r2
    e682:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    e684:	79fb      	ldrb	r3, [r7, #7]
    e686:	4619      	mov	r1, r3
    e688:	480a      	ldr	r0, [pc, #40]	; (e6b4 <_gpio_get_level+0x64>)
    e68a:	4b0d      	ldr	r3, [pc, #52]	; (e6c0 <_gpio_get_level+0x70>)
    e68c:	4798      	blx	r3
    e68e:	4602      	mov	r2, r0
    e690:	697b      	ldr	r3, [r7, #20]
    e692:	4013      	ands	r3, r2
    e694:	693a      	ldr	r2, [r7, #16]
    e696:	4313      	orrs	r3, r2
    e698:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    e69a:	f107 030c 	add.w	r3, r7, #12
    e69e:	4618      	mov	r0, r3
    e6a0:	4b08      	ldr	r3, [pc, #32]	; (e6c4 <_gpio_get_level+0x74>)
    e6a2:	4798      	blx	r3

	return tmp;
    e6a4:	693b      	ldr	r3, [r7, #16]
}
    e6a6:	4618      	mov	r0, r3
    e6a8:	3718      	adds	r7, #24
    e6aa:	46bd      	mov	sp, r7
    e6ac:	bd80      	pop	{r7, pc}
    e6ae:	bf00      	nop
    e6b0:	0000b43d 	.word	0x0000b43d
    e6b4:	41008000 	.word	0x41008000
    e6b8:	0000e5ed 	.word	0x0000e5ed
    e6bc:	0000e62f 	.word	0x0000e62f
    e6c0:	0000e60d 	.word	0x0000e60d
    e6c4:	0000b463 	.word	0x0000b463

0000e6c8 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    e6c8:	b580      	push	{r7, lr}
    e6ca:	b082      	sub	sp, #8
    e6cc:	af00      	add	r7, sp, #0
    e6ce:	4603      	mov	r3, r0
    e6d0:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    e6d2:	79fb      	ldrb	r3, [r7, #7]
    e6d4:	115b      	asrs	r3, r3, #5
    e6d6:	b2db      	uxtb	r3, r3
    e6d8:	4618      	mov	r0, r3
    e6da:	4b09      	ldr	r3, [pc, #36]	; (e700 <gpio_get_pin_level+0x38>)
    e6dc:	4798      	blx	r3
    e6de:	4601      	mov	r1, r0
    e6e0:	79fb      	ldrb	r3, [r7, #7]
    e6e2:	f003 031f 	and.w	r3, r3, #31
    e6e6:	2201      	movs	r2, #1
    e6e8:	fa02 f303 	lsl.w	r3, r2, r3
    e6ec:	400b      	ands	r3, r1
    e6ee:	2b00      	cmp	r3, #0
    e6f0:	bf14      	ite	ne
    e6f2:	2301      	movne	r3, #1
    e6f4:	2300      	moveq	r3, #0
    e6f6:	b2db      	uxtb	r3, r3
}
    e6f8:	4618      	mov	r0, r3
    e6fa:	3708      	adds	r7, #8
    e6fc:	46bd      	mov	sp, r7
    e6fe:	bd80      	pop	{r7, pc}
    e700:	0000e651 	.word	0x0000e651

0000e704 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    e704:	b480      	push	{r7}
    e706:	b083      	sub	sp, #12
    e708:	af00      	add	r7, sp, #0
    e70a:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    e70c:	4b06      	ldr	r3, [pc, #24]	; (e728 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e70e:	681b      	ldr	r3, [r3, #0]
    e710:	2201      	movs	r2, #1
    e712:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    e714:	4b04      	ldr	r3, [pc, #16]	; (e728 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e716:	681b      	ldr	r3, [r3, #0]
    e718:	2200      	movs	r2, #0
    e71a:	705a      	strb	r2, [r3, #1]
}
    e71c:	bf00      	nop
    e71e:	370c      	adds	r7, #12
    e720:	46bd      	mov	sp, r7
    e722:	bc80      	pop	{r7}
    e724:	4770      	bx	lr
    e726:	bf00      	nop
    e728:	200016e0 	.word	0x200016e0

0000e72c <_ZL10USBPluggedv>:

static void USBPlugged(void){
    e72c:	b580      	push	{r7, lr}
    e72e:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    e730:	2040      	movs	r0, #64	; 0x40
    e732:	4b0a      	ldr	r3, [pc, #40]	; (e75c <_ZL10USBPluggedv+0x30>)
    e734:	4798      	blx	r3
    e736:	4603      	mov	r3, r0
    e738:	2b00      	cmp	r3, #0
    e73a:	d004      	beq.n	e746 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    e73c:	4b08      	ldr	r3, [pc, #32]	; (e760 <_ZL10USBPluggedv+0x34>)
    e73e:	681b      	ldr	r3, [r3, #0]
    e740:	2201      	movs	r2, #1
    e742:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    e744:	e007      	b.n	e756 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    e746:	4b06      	ldr	r3, [pc, #24]	; (e760 <_ZL10USBPluggedv+0x34>)
    e748:	681b      	ldr	r3, [r3, #0]
    e74a:	2200      	movs	r2, #0
    e74c:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    e74e:	4b04      	ldr	r3, [pc, #16]	; (e760 <_ZL10USBPluggedv+0x34>)
    e750:	681b      	ldr	r3, [r3, #0]
    e752:	2200      	movs	r2, #0
    e754:	701a      	strb	r2, [r3, #0]
}
    e756:	bf00      	nop
    e758:	bd80      	pop	{r7, pc}
    e75a:	bf00      	nop
    e75c:	0000e6c9 	.word	0x0000e6c9
    e760:	200016e0 	.word	0x200016e0

0000e764 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    e764:	b480      	push	{r7}
    e766:	b083      	sub	sp, #12
    e768:	af00      	add	r7, sp, #0
    e76a:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    e76c:	4a04      	ldr	r2, [pc, #16]	; (e780 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    e76e:	687b      	ldr	r3, [r7, #4]
    e770:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    e772:	687b      	ldr	r3, [r7, #4]
    e774:	4618      	mov	r0, r3
    e776:	370c      	adds	r7, #12
    e778:	46bd      	mov	sp, r7
    e77a:	bc80      	pop	{r7}
    e77c:	4770      	bx	lr
    e77e:	bf00      	nop
    e780:	200016e0 	.word	0x200016e0

0000e784 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    e784:	b480      	push	{r7}
    e786:	b083      	sub	sp, #12
    e788:	af00      	add	r7, sp, #0
    e78a:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    e78c:	687b      	ldr	r3, [r7, #4]
    e78e:	4618      	mov	r0, r3
    e790:	370c      	adds	r7, #12
    e792:	46bd      	mov	sp, r7
    e794:	bc80      	pop	{r7}
    e796:	4770      	bx	lr

0000e798 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    e798:	b580      	push	{r7, lr}
    e79a:	b082      	sub	sp, #8
    e79c:	af00      	add	r7, sp, #0
    e79e:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    e7a0:	491e      	ldr	r1, [pc, #120]	; (e81c <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    e7a2:	2040      	movs	r0, #64	; 0x40
    e7a4:	4b1e      	ldr	r3, [pc, #120]	; (e820 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    e7a6:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    e7a8:	481e      	ldr	r0, [pc, #120]	; (e824 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e7aa:	4b1f      	ldr	r3, [pc, #124]	; (e828 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e7ac:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    e7ae:	2040      	movs	r0, #64	; 0x40
    e7b0:	4b1e      	ldr	r3, [pc, #120]	; (e82c <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    e7b2:	4798      	blx	r3
    e7b4:	4603      	mov	r3, r0
    e7b6:	461a      	mov	r2, r3
    e7b8:	687b      	ldr	r3, [r7, #4]
    e7ba:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    e7bc:	687b      	ldr	r3, [r7, #4]
    e7be:	78db      	ldrb	r3, [r3, #3]
    e7c0:	2b00      	cmp	r3, #0
    e7c2:	d021      	beq.n	e808 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    e7c4:	687b      	ldr	r3, [r7, #4]
    e7c6:	2200      	movs	r2, #0
    e7c8:	709a      	strb	r2, [r3, #2]
			plugged=true;
    e7ca:	687b      	ldr	r3, [r7, #4]
    e7cc:	2201      	movs	r2, #1
    e7ce:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    e7d0:	f44f 7216 	mov.w	r2, #600	; 0x258
    e7d4:	4916      	ldr	r1, [pc, #88]	; (e830 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    e7d6:	4813      	ldr	r0, [pc, #76]	; (e824 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e7d8:	4b16      	ldr	r3, [pc, #88]	; (e834 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    e7da:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    e7dc:	4816      	ldr	r0, [pc, #88]	; (e838 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    e7de:	4b17      	ldr	r3, [pc, #92]	; (e83c <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    e7e0:	4798      	blx	r3
    e7e2:	4603      	mov	r3, r0
    e7e4:	f083 0301 	eor.w	r3, r3, #1
    e7e8:	b2db      	uxtb	r3, r3
    e7ea:	2b00      	cmp	r3, #0
    e7ec:	d008      	beq.n	e800 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    e7ee:	687b      	ldr	r3, [r7, #4]
    e7f0:	789b      	ldrb	r3, [r3, #2]
    e7f2:	b2db      	uxtb	r3, r3
    e7f4:	2b00      	cmp	r3, #0
    e7f6:	d0f1      	beq.n	e7dc <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    e7f8:	687b      	ldr	r3, [r7, #4]
    e7fa:	2200      	movs	r2, #0
    e7fc:	701a      	strb	r2, [r3, #0]
					return;
    e7fe:	e009      	b.n	e814 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    e800:	4808      	ldr	r0, [pc, #32]	; (e824 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e802:	4b0f      	ldr	r3, [pc, #60]	; (e840 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    e804:	4798      	blx	r3
    e806:	e005      	b.n	e814 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    e808:	687b      	ldr	r3, [r7, #4]
    e80a:	2200      	movs	r2, #0
    e80c:	701a      	strb	r2, [r3, #0]
			plugged=false;
    e80e:	687b      	ldr	r3, [r7, #4]
    e810:	2200      	movs	r2, #0
    e812:	705a      	strb	r2, [r3, #1]
		}
		
}
    e814:	3708      	adds	r7, #8
    e816:	46bd      	mov	sp, r7
    e818:	bd80      	pop	{r7, pc}
    e81a:	bf00      	nop
    e81c:	0000e72d 	.word	0x0000e72d
    e820:	00002359 	.word	0x00002359
    e824:	20001680 	.word	0x20001680
    e828:	0000daa5 	.word	0x0000daa5
    e82c:	0000e6c9 	.word	0x0000e6c9
    e830:	0000e705 	.word	0x0000e705
    e834:	0000dc61 	.word	0x0000dc61
    e838:	20001580 	.word	0x20001580
    e83c:	0000e131 	.word	0x0000e131
    e840:	0000db19 	.word	0x0000db19

0000e844 <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
    e844:	b580      	push	{r7, lr}
    e846:	b082      	sub	sp, #8
    e848:	af00      	add	r7, sp, #0
    e84a:	6078      	str	r0, [r7, #4]
    e84c:	6039      	str	r1, [r7, #0]
    e84e:	687b      	ldr	r3, [r7, #4]
    e850:	2b01      	cmp	r3, #1
    e852:	d14c      	bne.n	e8ee <_Z41__static_initialization_and_destruction_0ii+0xaa>
    e854:	683b      	ldr	r3, [r7, #0]
    e856:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e85a:	4293      	cmp	r3, r2
    e85c:	d147      	bne.n	e8ee <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e85e:	4926      	ldr	r1, [pc, #152]	; (e8f8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    e860:	4826      	ldr	r0, [pc, #152]	; (e8fc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e862:	4b27      	ldr	r3, [pc, #156]	; (e900 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e864:	4798      	blx	r3
    e866:	4a27      	ldr	r2, [pc, #156]	; (e904 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e868:	4927      	ldr	r1, [pc, #156]	; (e908 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e86a:	4824      	ldr	r0, [pc, #144]	; (e8fc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e86c:	4b27      	ldr	r3, [pc, #156]	; (e90c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e86e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    e870:	4927      	ldr	r1, [pc, #156]	; (e910 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e872:	4828      	ldr	r0, [pc, #160]	; (e914 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e874:	4b22      	ldr	r3, [pc, #136]	; (e900 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e876:	4798      	blx	r3
    e878:	4a22      	ldr	r2, [pc, #136]	; (e904 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e87a:	4923      	ldr	r1, [pc, #140]	; (e908 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e87c:	4825      	ldr	r0, [pc, #148]	; (e914 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e87e:	4b23      	ldr	r3, [pc, #140]	; (e90c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e880:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    e882:	4925      	ldr	r1, [pc, #148]	; (e918 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e884:	4825      	ldr	r0, [pc, #148]	; (e91c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e886:	4b1e      	ldr	r3, [pc, #120]	; (e900 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e888:	4798      	blx	r3
    e88a:	4a1e      	ldr	r2, [pc, #120]	; (e904 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e88c:	491e      	ldr	r1, [pc, #120]	; (e908 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e88e:	4823      	ldr	r0, [pc, #140]	; (e91c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e890:	4b1e      	ldr	r3, [pc, #120]	; (e90c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e892:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e894:	4922      	ldr	r1, [pc, #136]	; (e920 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e896:	4823      	ldr	r0, [pc, #140]	; (e924 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e898:	4b19      	ldr	r3, [pc, #100]	; (e900 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e89a:	4798      	blx	r3
    e89c:	4a19      	ldr	r2, [pc, #100]	; (e904 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e89e:	491a      	ldr	r1, [pc, #104]	; (e908 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e8a0:	4820      	ldr	r0, [pc, #128]	; (e924 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e8a2:	4b1a      	ldr	r3, [pc, #104]	; (e90c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e8a4:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    e8a6:	4920      	ldr	r1, [pc, #128]	; (e928 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e8a8:	4820      	ldr	r0, [pc, #128]	; (e92c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e8aa:	4b15      	ldr	r3, [pc, #84]	; (e900 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e8ac:	4798      	blx	r3
    e8ae:	4a15      	ldr	r2, [pc, #84]	; (e904 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e8b0:	4915      	ldr	r1, [pc, #84]	; (e908 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e8b2:	481e      	ldr	r0, [pc, #120]	; (e92c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e8b4:	4b15      	ldr	r3, [pc, #84]	; (e90c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e8b6:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e8b8:	491d      	ldr	r1, [pc, #116]	; (e930 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    e8ba:	481e      	ldr	r0, [pc, #120]	; (e934 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e8bc:	4b10      	ldr	r3, [pc, #64]	; (e900 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e8be:	4798      	blx	r3
    e8c0:	4a10      	ldr	r2, [pc, #64]	; (e904 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e8c2:	4911      	ldr	r1, [pc, #68]	; (e908 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e8c4:	481b      	ldr	r0, [pc, #108]	; (e934 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e8c6:	4b11      	ldr	r3, [pc, #68]	; (e90c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e8c8:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e8ca:	491b      	ldr	r1, [pc, #108]	; (e938 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    e8cc:	481b      	ldr	r0, [pc, #108]	; (e93c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e8ce:	4b0c      	ldr	r3, [pc, #48]	; (e900 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e8d0:	4798      	blx	r3
    e8d2:	4a0c      	ldr	r2, [pc, #48]	; (e904 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e8d4:	490c      	ldr	r1, [pc, #48]	; (e908 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e8d6:	4819      	ldr	r0, [pc, #100]	; (e93c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e8d8:	4b0c      	ldr	r3, [pc, #48]	; (e90c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e8da:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    e8dc:	4918      	ldr	r1, [pc, #96]	; (e940 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    e8de:	4819      	ldr	r0, [pc, #100]	; (e944 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e8e0:	4b07      	ldr	r3, [pc, #28]	; (e900 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e8e2:	4798      	blx	r3
    e8e4:	4a07      	ldr	r2, [pc, #28]	; (e904 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e8e6:	4908      	ldr	r1, [pc, #32]	; (e908 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e8e8:	4816      	ldr	r0, [pc, #88]	; (e944 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e8ea:	4b08      	ldr	r3, [pc, #32]	; (e90c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e8ec:	4798      	blx	r3
    e8ee:	bf00      	nop
    e8f0:	3708      	adds	r7, #8
    e8f2:	46bd      	mov	sp, r7
    e8f4:	bd80      	pop	{r7, pc}
    e8f6:	bf00      	nop
    e8f8:	200016e4 	.word	0x200016e4
    e8fc:	200015e0 	.word	0x200015e0
    e900:	0000d9b9 	.word	0x0000d9b9
    e904:	20000000 	.word	0x20000000
    e908:	0000d9f1 	.word	0x0000d9f1
    e90c:	0000ea1d 	.word	0x0000ea1d
    e910:	20001778 	.word	0x20001778
    e914:	20001600 	.word	0x20001600
    e918:	2000189c 	.word	0x2000189c
    e91c:	20001620 	.word	0x20001620
    e920:	20001798 	.word	0x20001798
    e924:	20001640 	.word	0x20001640
    e928:	2000185c 	.word	0x2000185c
    e92c:	20001660 	.word	0x20001660
    e930:	2000187c 	.word	0x2000187c
    e934:	20001680 	.word	0x20001680
    e938:	20001754 	.word	0x20001754
    e93c:	200016a0 	.word	0x200016a0
    e940:	200017f4 	.word	0x200017f4
    e944:	200016c0 	.word	0x200016c0

0000e948 <_GLOBAL__sub_I_ptrSerialTerminalClass>:
    e948:	b580      	push	{r7, lr}
    e94a:	af00      	add	r7, sp, #0
    e94c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e950:	2001      	movs	r0, #1
    e952:	4b01      	ldr	r3, [pc, #4]	; (e958 <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
    e954:	4798      	blx	r3
    e956:	bd80      	pop	{r7, pc}
    e958:	0000e845 	.word	0x0000e845

0000e95c <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    e95c:	b480      	push	{r7}
    e95e:	b083      	sub	sp, #12
    e960:	af00      	add	r7, sp, #0
    e962:	6078      	str	r0, [r7, #4]
    return (void *)0;
    e964:	2300      	movs	r3, #0
	}
    e966:	4618      	mov	r0, r3
    e968:	370c      	adds	r7, #12
    e96a:	46bd      	mov	sp, r7
    e96c:	bc80      	pop	{r7}
    e96e:	4770      	bx	lr

0000e970 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    e970:	b480      	push	{r7}
    e972:	af00      	add	r7, sp, #0
		}
    e974:	bf00      	nop
    e976:	46bd      	mov	sp, r7
    e978:	bc80      	pop	{r7}
    e97a:	4770      	bx	lr

0000e97c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    e97c:	b580      	push	{r7, lr}
    e97e:	b084      	sub	sp, #16
    e980:	af00      	add	r7, sp, #0
    e982:	60f8      	str	r0, [r7, #12]
    e984:	60b9      	str	r1, [r7, #8]
    e986:	4613      	mov	r3, r2
    e988:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e98a:	68fb      	ldr	r3, [r7, #12]
    e98c:	2b00      	cmp	r3, #0
    e98e:	d004      	beq.n	e99a <io_write+0x1e>
    e990:	68bb      	ldr	r3, [r7, #8]
    e992:	2b00      	cmp	r3, #0
    e994:	d001      	beq.n	e99a <io_write+0x1e>
    e996:	2301      	movs	r3, #1
    e998:	e000      	b.n	e99c <io_write+0x20>
    e99a:	2300      	movs	r3, #0
    e99c:	f003 0301 	and.w	r3, r3, #1
    e9a0:	b2db      	uxtb	r3, r3
    e9a2:	2234      	movs	r2, #52	; 0x34
    e9a4:	4907      	ldr	r1, [pc, #28]	; (e9c4 <io_write+0x48>)
    e9a6:	4618      	mov	r0, r3
    e9a8:	4b07      	ldr	r3, [pc, #28]	; (e9c8 <io_write+0x4c>)
    e9aa:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    e9ac:	68fb      	ldr	r3, [r7, #12]
    e9ae:	681b      	ldr	r3, [r3, #0]
    e9b0:	88fa      	ldrh	r2, [r7, #6]
    e9b2:	68b9      	ldr	r1, [r7, #8]
    e9b4:	68f8      	ldr	r0, [r7, #12]
    e9b6:	4798      	blx	r3
    e9b8:	4603      	mov	r3, r0
}
    e9ba:	4618      	mov	r0, r3
    e9bc:	3710      	adds	r7, #16
    e9be:	46bd      	mov	sp, r7
    e9c0:	bd80      	pop	{r7, pc}
    e9c2:	bf00      	nop
    e9c4:	0000f210 	.word	0x0000f210
    e9c8:	000038b5 	.word	0x000038b5

0000e9cc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    e9cc:	b580      	push	{r7, lr}
    e9ce:	b084      	sub	sp, #16
    e9d0:	af00      	add	r7, sp, #0
    e9d2:	60f8      	str	r0, [r7, #12]
    e9d4:	60b9      	str	r1, [r7, #8]
    e9d6:	4613      	mov	r3, r2
    e9d8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e9da:	68fb      	ldr	r3, [r7, #12]
    e9dc:	2b00      	cmp	r3, #0
    e9de:	d004      	beq.n	e9ea <io_read+0x1e>
    e9e0:	68bb      	ldr	r3, [r7, #8]
    e9e2:	2b00      	cmp	r3, #0
    e9e4:	d001      	beq.n	e9ea <io_read+0x1e>
    e9e6:	2301      	movs	r3, #1
    e9e8:	e000      	b.n	e9ec <io_read+0x20>
    e9ea:	2300      	movs	r3, #0
    e9ec:	f003 0301 	and.w	r3, r3, #1
    e9f0:	b2db      	uxtb	r3, r3
    e9f2:	223d      	movs	r2, #61	; 0x3d
    e9f4:	4907      	ldr	r1, [pc, #28]	; (ea14 <io_read+0x48>)
    e9f6:	4618      	mov	r0, r3
    e9f8:	4b07      	ldr	r3, [pc, #28]	; (ea18 <io_read+0x4c>)
    e9fa:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    e9fc:	68fb      	ldr	r3, [r7, #12]
    e9fe:	685b      	ldr	r3, [r3, #4]
    ea00:	88fa      	ldrh	r2, [r7, #6]
    ea02:	68b9      	ldr	r1, [r7, #8]
    ea04:	68f8      	ldr	r0, [r7, #12]
    ea06:	4798      	blx	r3
    ea08:	4603      	mov	r3, r0
}
    ea0a:	4618      	mov	r0, r3
    ea0c:	3710      	adds	r7, #16
    ea0e:	46bd      	mov	sp, r7
    ea10:	bd80      	pop	{r7, pc}
    ea12:	bf00      	nop
    ea14:	0000f210 	.word	0x0000f210
    ea18:	000038b5 	.word	0x000038b5

0000ea1c <__aeabi_atexit>:
    ea1c:	460b      	mov	r3, r1
    ea1e:	4601      	mov	r1, r0
    ea20:	4618      	mov	r0, r3
    ea22:	f000 b801 	b.w	ea28 <__cxa_atexit>
    ea26:	bf00      	nop

0000ea28 <__cxa_atexit>:
    ea28:	4613      	mov	r3, r2
    ea2a:	460a      	mov	r2, r1
    ea2c:	4601      	mov	r1, r0
    ea2e:	2002      	movs	r0, #2
    ea30:	f000 b91e 	b.w	ec70 <__register_exitproc>

0000ea34 <ffs>:
    ea34:	b140      	cbz	r0, ea48 <ffs+0x14>
    ea36:	2300      	movs	r3, #0
    ea38:	fa40 f103 	asr.w	r1, r0, r3
    ea3c:	1c5a      	adds	r2, r3, #1
    ea3e:	07c9      	lsls	r1, r1, #31
    ea40:	4613      	mov	r3, r2
    ea42:	d5f9      	bpl.n	ea38 <ffs+0x4>
    ea44:	4610      	mov	r0, r2
    ea46:	4770      	bx	lr
    ea48:	4602      	mov	r2, r0
    ea4a:	4610      	mov	r0, r2
    ea4c:	4770      	bx	lr
    ea4e:	bf00      	nop

0000ea50 <__libc_init_array>:
    ea50:	b570      	push	{r4, r5, r6, lr}
    ea52:	4e0f      	ldr	r6, [pc, #60]	; (ea90 <__libc_init_array+0x40>)
    ea54:	4d0f      	ldr	r5, [pc, #60]	; (ea94 <__libc_init_array+0x44>)
    ea56:	1b76      	subs	r6, r6, r5
    ea58:	10b6      	asrs	r6, r6, #2
    ea5a:	bf18      	it	ne
    ea5c:	2400      	movne	r4, #0
    ea5e:	d005      	beq.n	ea6c <__libc_init_array+0x1c>
    ea60:	3401      	adds	r4, #1
    ea62:	f855 3b04 	ldr.w	r3, [r5], #4
    ea66:	4798      	blx	r3
    ea68:	42a6      	cmp	r6, r4
    ea6a:	d1f9      	bne.n	ea60 <__libc_init_array+0x10>
    ea6c:	4e0a      	ldr	r6, [pc, #40]	; (ea98 <__libc_init_array+0x48>)
    ea6e:	4d0b      	ldr	r5, [pc, #44]	; (ea9c <__libc_init_array+0x4c>)
    ea70:	1b76      	subs	r6, r6, r5
    ea72:	f000 fbd9 	bl	f228 <_init>
    ea76:	10b6      	asrs	r6, r6, #2
    ea78:	bf18      	it	ne
    ea7a:	2400      	movne	r4, #0
    ea7c:	d006      	beq.n	ea8c <__libc_init_array+0x3c>
    ea7e:	3401      	adds	r4, #1
    ea80:	f855 3b04 	ldr.w	r3, [r5], #4
    ea84:	4798      	blx	r3
    ea86:	42a6      	cmp	r6, r4
    ea88:	d1f9      	bne.n	ea7e <__libc_init_array+0x2e>
    ea8a:	bd70      	pop	{r4, r5, r6, pc}
    ea8c:	bd70      	pop	{r4, r5, r6, pc}
    ea8e:	bf00      	nop
    ea90:	0000f234 	.word	0x0000f234
    ea94:	0000f234 	.word	0x0000f234
    ea98:	0000f260 	.word	0x0000f260
    ea9c:	0000f234 	.word	0x0000f234

0000eaa0 <memcpy>:
    eaa0:	4684      	mov	ip, r0
    eaa2:	ea41 0300 	orr.w	r3, r1, r0
    eaa6:	f013 0303 	ands.w	r3, r3, #3
    eaaa:	d16d      	bne.n	eb88 <memcpy+0xe8>
    eaac:	3a40      	subs	r2, #64	; 0x40
    eaae:	d341      	bcc.n	eb34 <memcpy+0x94>
    eab0:	f851 3b04 	ldr.w	r3, [r1], #4
    eab4:	f840 3b04 	str.w	r3, [r0], #4
    eab8:	f851 3b04 	ldr.w	r3, [r1], #4
    eabc:	f840 3b04 	str.w	r3, [r0], #4
    eac0:	f851 3b04 	ldr.w	r3, [r1], #4
    eac4:	f840 3b04 	str.w	r3, [r0], #4
    eac8:	f851 3b04 	ldr.w	r3, [r1], #4
    eacc:	f840 3b04 	str.w	r3, [r0], #4
    ead0:	f851 3b04 	ldr.w	r3, [r1], #4
    ead4:	f840 3b04 	str.w	r3, [r0], #4
    ead8:	f851 3b04 	ldr.w	r3, [r1], #4
    eadc:	f840 3b04 	str.w	r3, [r0], #4
    eae0:	f851 3b04 	ldr.w	r3, [r1], #4
    eae4:	f840 3b04 	str.w	r3, [r0], #4
    eae8:	f851 3b04 	ldr.w	r3, [r1], #4
    eaec:	f840 3b04 	str.w	r3, [r0], #4
    eaf0:	f851 3b04 	ldr.w	r3, [r1], #4
    eaf4:	f840 3b04 	str.w	r3, [r0], #4
    eaf8:	f851 3b04 	ldr.w	r3, [r1], #4
    eafc:	f840 3b04 	str.w	r3, [r0], #4
    eb00:	f851 3b04 	ldr.w	r3, [r1], #4
    eb04:	f840 3b04 	str.w	r3, [r0], #4
    eb08:	f851 3b04 	ldr.w	r3, [r1], #4
    eb0c:	f840 3b04 	str.w	r3, [r0], #4
    eb10:	f851 3b04 	ldr.w	r3, [r1], #4
    eb14:	f840 3b04 	str.w	r3, [r0], #4
    eb18:	f851 3b04 	ldr.w	r3, [r1], #4
    eb1c:	f840 3b04 	str.w	r3, [r0], #4
    eb20:	f851 3b04 	ldr.w	r3, [r1], #4
    eb24:	f840 3b04 	str.w	r3, [r0], #4
    eb28:	f851 3b04 	ldr.w	r3, [r1], #4
    eb2c:	f840 3b04 	str.w	r3, [r0], #4
    eb30:	3a40      	subs	r2, #64	; 0x40
    eb32:	d2bd      	bcs.n	eab0 <memcpy+0x10>
    eb34:	3230      	adds	r2, #48	; 0x30
    eb36:	d311      	bcc.n	eb5c <memcpy+0xbc>
    eb38:	f851 3b04 	ldr.w	r3, [r1], #4
    eb3c:	f840 3b04 	str.w	r3, [r0], #4
    eb40:	f851 3b04 	ldr.w	r3, [r1], #4
    eb44:	f840 3b04 	str.w	r3, [r0], #4
    eb48:	f851 3b04 	ldr.w	r3, [r1], #4
    eb4c:	f840 3b04 	str.w	r3, [r0], #4
    eb50:	f851 3b04 	ldr.w	r3, [r1], #4
    eb54:	f840 3b04 	str.w	r3, [r0], #4
    eb58:	3a10      	subs	r2, #16
    eb5a:	d2ed      	bcs.n	eb38 <memcpy+0x98>
    eb5c:	320c      	adds	r2, #12
    eb5e:	d305      	bcc.n	eb6c <memcpy+0xcc>
    eb60:	f851 3b04 	ldr.w	r3, [r1], #4
    eb64:	f840 3b04 	str.w	r3, [r0], #4
    eb68:	3a04      	subs	r2, #4
    eb6a:	d2f9      	bcs.n	eb60 <memcpy+0xc0>
    eb6c:	3204      	adds	r2, #4
    eb6e:	d008      	beq.n	eb82 <memcpy+0xe2>
    eb70:	07d2      	lsls	r2, r2, #31
    eb72:	bf1c      	itt	ne
    eb74:	f811 3b01 	ldrbne.w	r3, [r1], #1
    eb78:	f800 3b01 	strbne.w	r3, [r0], #1
    eb7c:	d301      	bcc.n	eb82 <memcpy+0xe2>
    eb7e:	880b      	ldrh	r3, [r1, #0]
    eb80:	8003      	strh	r3, [r0, #0]
    eb82:	4660      	mov	r0, ip
    eb84:	4770      	bx	lr
    eb86:	bf00      	nop
    eb88:	2a08      	cmp	r2, #8
    eb8a:	d313      	bcc.n	ebb4 <memcpy+0x114>
    eb8c:	078b      	lsls	r3, r1, #30
    eb8e:	d08d      	beq.n	eaac <memcpy+0xc>
    eb90:	f010 0303 	ands.w	r3, r0, #3
    eb94:	d08a      	beq.n	eaac <memcpy+0xc>
    eb96:	f1c3 0304 	rsb	r3, r3, #4
    eb9a:	1ad2      	subs	r2, r2, r3
    eb9c:	07db      	lsls	r3, r3, #31
    eb9e:	bf1c      	itt	ne
    eba0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    eba4:	f800 3b01 	strbne.w	r3, [r0], #1
    eba8:	d380      	bcc.n	eaac <memcpy+0xc>
    ebaa:	f831 3b02 	ldrh.w	r3, [r1], #2
    ebae:	f820 3b02 	strh.w	r3, [r0], #2
    ebb2:	e77b      	b.n	eaac <memcpy+0xc>
    ebb4:	3a04      	subs	r2, #4
    ebb6:	d3d9      	bcc.n	eb6c <memcpy+0xcc>
    ebb8:	3a01      	subs	r2, #1
    ebba:	f811 3b01 	ldrb.w	r3, [r1], #1
    ebbe:	f800 3b01 	strb.w	r3, [r0], #1
    ebc2:	d2f9      	bcs.n	ebb8 <memcpy+0x118>
    ebc4:	780b      	ldrb	r3, [r1, #0]
    ebc6:	7003      	strb	r3, [r0, #0]
    ebc8:	784b      	ldrb	r3, [r1, #1]
    ebca:	7043      	strb	r3, [r0, #1]
    ebcc:	788b      	ldrb	r3, [r1, #2]
    ebce:	7083      	strb	r3, [r0, #2]
    ebd0:	4660      	mov	r0, ip
    ebd2:	4770      	bx	lr

0000ebd4 <memset>:
    ebd4:	b470      	push	{r4, r5, r6}
    ebd6:	0786      	lsls	r6, r0, #30
    ebd8:	d046      	beq.n	ec68 <memset+0x94>
    ebda:	1e54      	subs	r4, r2, #1
    ebdc:	2a00      	cmp	r2, #0
    ebde:	d041      	beq.n	ec64 <memset+0x90>
    ebe0:	b2ca      	uxtb	r2, r1
    ebe2:	4603      	mov	r3, r0
    ebe4:	e002      	b.n	ebec <memset+0x18>
    ebe6:	f114 34ff 	adds.w	r4, r4, #4294967295
    ebea:	d33b      	bcc.n	ec64 <memset+0x90>
    ebec:	f803 2b01 	strb.w	r2, [r3], #1
    ebf0:	079d      	lsls	r5, r3, #30
    ebf2:	d1f8      	bne.n	ebe6 <memset+0x12>
    ebf4:	2c03      	cmp	r4, #3
    ebf6:	d92e      	bls.n	ec56 <memset+0x82>
    ebf8:	b2cd      	uxtb	r5, r1
    ebfa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    ebfe:	2c0f      	cmp	r4, #15
    ec00:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    ec04:	d919      	bls.n	ec3a <memset+0x66>
    ec06:	f103 0210 	add.w	r2, r3, #16
    ec0a:	4626      	mov	r6, r4
    ec0c:	3e10      	subs	r6, #16
    ec0e:	2e0f      	cmp	r6, #15
    ec10:	f842 5c10 	str.w	r5, [r2, #-16]
    ec14:	f842 5c0c 	str.w	r5, [r2, #-12]
    ec18:	f842 5c08 	str.w	r5, [r2, #-8]
    ec1c:	f842 5c04 	str.w	r5, [r2, #-4]
    ec20:	f102 0210 	add.w	r2, r2, #16
    ec24:	d8f2      	bhi.n	ec0c <memset+0x38>
    ec26:	f1a4 0210 	sub.w	r2, r4, #16
    ec2a:	f022 020f 	bic.w	r2, r2, #15
    ec2e:	f004 040f 	and.w	r4, r4, #15
    ec32:	3210      	adds	r2, #16
    ec34:	2c03      	cmp	r4, #3
    ec36:	4413      	add	r3, r2
    ec38:	d90d      	bls.n	ec56 <memset+0x82>
    ec3a:	461e      	mov	r6, r3
    ec3c:	4622      	mov	r2, r4
    ec3e:	3a04      	subs	r2, #4
    ec40:	2a03      	cmp	r2, #3
    ec42:	f846 5b04 	str.w	r5, [r6], #4
    ec46:	d8fa      	bhi.n	ec3e <memset+0x6a>
    ec48:	1f22      	subs	r2, r4, #4
    ec4a:	f022 0203 	bic.w	r2, r2, #3
    ec4e:	3204      	adds	r2, #4
    ec50:	4413      	add	r3, r2
    ec52:	f004 0403 	and.w	r4, r4, #3
    ec56:	b12c      	cbz	r4, ec64 <memset+0x90>
    ec58:	b2c9      	uxtb	r1, r1
    ec5a:	441c      	add	r4, r3
    ec5c:	f803 1b01 	strb.w	r1, [r3], #1
    ec60:	429c      	cmp	r4, r3
    ec62:	d1fb      	bne.n	ec5c <memset+0x88>
    ec64:	bc70      	pop	{r4, r5, r6}
    ec66:	4770      	bx	lr
    ec68:	4614      	mov	r4, r2
    ec6a:	4603      	mov	r3, r0
    ec6c:	e7c2      	b.n	ebf4 <memset+0x20>
    ec6e:	bf00      	nop

0000ec70 <__register_exitproc>:
    ec70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ec74:	4d2c      	ldr	r5, [pc, #176]	; (ed28 <__register_exitproc+0xb8>)
    ec76:	4606      	mov	r6, r0
    ec78:	6828      	ldr	r0, [r5, #0]
    ec7a:	4698      	mov	r8, r3
    ec7c:	460f      	mov	r7, r1
    ec7e:	4691      	mov	r9, r2
    ec80:	f000 f882 	bl	ed88 <__retarget_lock_acquire_recursive>
    ec84:	4b29      	ldr	r3, [pc, #164]	; (ed2c <__register_exitproc+0xbc>)
    ec86:	681c      	ldr	r4, [r3, #0]
    ec88:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ec8c:	2b00      	cmp	r3, #0
    ec8e:	d03e      	beq.n	ed0e <__register_exitproc+0x9e>
    ec90:	685a      	ldr	r2, [r3, #4]
    ec92:	2a1f      	cmp	r2, #31
    ec94:	dc1c      	bgt.n	ecd0 <__register_exitproc+0x60>
    ec96:	f102 0e01 	add.w	lr, r2, #1
    ec9a:	b176      	cbz	r6, ecba <__register_exitproc+0x4a>
    ec9c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    eca0:	2401      	movs	r4, #1
    eca2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    eca6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    ecaa:	4094      	lsls	r4, r2
    ecac:	4320      	orrs	r0, r4
    ecae:	2e02      	cmp	r6, #2
    ecb0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    ecb4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    ecb8:	d023      	beq.n	ed02 <__register_exitproc+0x92>
    ecba:	3202      	adds	r2, #2
    ecbc:	f8c3 e004 	str.w	lr, [r3, #4]
    ecc0:	6828      	ldr	r0, [r5, #0]
    ecc2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    ecc6:	f000 f861 	bl	ed8c <__retarget_lock_release_recursive>
    ecca:	2000      	movs	r0, #0
    eccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ecd0:	4b17      	ldr	r3, [pc, #92]	; (ed30 <__register_exitproc+0xc0>)
    ecd2:	b30b      	cbz	r3, ed18 <__register_exitproc+0xa8>
    ecd4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    ecd8:	f7ff fe40 	bl	e95c <malloc>
    ecdc:	4603      	mov	r3, r0
    ecde:	b1d8      	cbz	r0, ed18 <__register_exitproc+0xa8>
    ece0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    ece4:	6002      	str	r2, [r0, #0]
    ece6:	2100      	movs	r1, #0
    ece8:	6041      	str	r1, [r0, #4]
    ecea:	460a      	mov	r2, r1
    ecec:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    ecf0:	f04f 0e01 	mov.w	lr, #1
    ecf4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    ecf8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    ecfc:	2e00      	cmp	r6, #0
    ecfe:	d0dc      	beq.n	ecba <__register_exitproc+0x4a>
    ed00:	e7cc      	b.n	ec9c <__register_exitproc+0x2c>
    ed02:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    ed06:	430c      	orrs	r4, r1
    ed08:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    ed0c:	e7d5      	b.n	ecba <__register_exitproc+0x4a>
    ed0e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    ed12:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    ed16:	e7bb      	b.n	ec90 <__register_exitproc+0x20>
    ed18:	6828      	ldr	r0, [r5, #0]
    ed1a:	f000 f837 	bl	ed8c <__retarget_lock_release_recursive>
    ed1e:	f04f 30ff 	mov.w	r0, #4294967295
    ed22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ed26:	bf00      	nop
    ed28:	20000638 	.word	0x20000638
    ed2c:	0000f224 	.word	0x0000f224
    ed30:	0000e95d 	.word	0x0000e95d

0000ed34 <register_fini>:
    ed34:	4b02      	ldr	r3, [pc, #8]	; (ed40 <register_fini+0xc>)
    ed36:	b113      	cbz	r3, ed3e <register_fini+0xa>
    ed38:	4802      	ldr	r0, [pc, #8]	; (ed44 <register_fini+0x10>)
    ed3a:	f000 b805 	b.w	ed48 <atexit>
    ed3e:	4770      	bx	lr
    ed40:	00000000 	.word	0x00000000
    ed44:	0000ed55 	.word	0x0000ed55

0000ed48 <atexit>:
    ed48:	2300      	movs	r3, #0
    ed4a:	4601      	mov	r1, r0
    ed4c:	461a      	mov	r2, r3
    ed4e:	4618      	mov	r0, r3
    ed50:	f7ff bf8e 	b.w	ec70 <__register_exitproc>

0000ed54 <__libc_fini_array>:
    ed54:	b538      	push	{r3, r4, r5, lr}
    ed56:	4c0a      	ldr	r4, [pc, #40]	; (ed80 <__libc_fini_array+0x2c>)
    ed58:	4d0a      	ldr	r5, [pc, #40]	; (ed84 <__libc_fini_array+0x30>)
    ed5a:	1b64      	subs	r4, r4, r5
    ed5c:	10a4      	asrs	r4, r4, #2
    ed5e:	d00a      	beq.n	ed76 <__libc_fini_array+0x22>
    ed60:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    ed64:	3b01      	subs	r3, #1
    ed66:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    ed6a:	3c01      	subs	r4, #1
    ed6c:	f855 3904 	ldr.w	r3, [r5], #-4
    ed70:	4798      	blx	r3
    ed72:	2c00      	cmp	r4, #0
    ed74:	d1f9      	bne.n	ed6a <__libc_fini_array+0x16>
    ed76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ed7a:	f000 ba71 	b.w	f260 <_fini>
    ed7e:	bf00      	nop
    ed80:	0000f270 	.word	0x0000f270
    ed84:	0000f26c 	.word	0x0000f26c

0000ed88 <__retarget_lock_acquire_recursive>:
    ed88:	4770      	bx	lr
    ed8a:	bf00      	nop

0000ed8c <__retarget_lock_release_recursive>:
    ed8c:	4770      	bx	lr
    ed8e:	bf00      	nop
    ed90:	682f2e2e 	.word	0x682f2e2e
    ed94:	702f6c70 	.word	0x702f6c70
    ed98:	2f74726f 	.word	0x2f74726f
    ed9c:	5f6c7068 	.word	0x5f6c7068
    eda0:	6f697067 	.word	0x6f697067
    eda4:	7361625f 	.word	0x7361625f
    eda8:	00682e65 	.word	0x00682e65
    edac:	682f2e2e 	.word	0x682f2e2e
    edb0:	692f6c61 	.word	0x692f6c61
    edb4:	756c636e 	.word	0x756c636e
    edb8:	682f6564 	.word	0x682f6564
    edbc:	775f6c61 	.word	0x775f6c61
    edc0:	682e7464 	.word	0x682e7464
    edc4:	00000000 	.word	0x00000000
    edc8:	682f2e2e 	.word	0x682f2e2e
    edcc:	732f6c61 	.word	0x732f6c61
    edd0:	682f6372 	.word	0x682f6372
    edd4:	635f6c61 	.word	0x635f6c61
    edd8:	6e656c61 	.word	0x6e656c61
    eddc:	2e726164 	.word	0x2e726164
    ede0:	00000063 	.word	0x00000063
    ede4:	682f2e2e 	.word	0x682f2e2e
    ede8:	732f6c61 	.word	0x732f6c61
    edec:	682f6372 	.word	0x682f6372
    edf0:	635f6c61 	.word	0x635f6c61
    edf4:	615f6e61 	.word	0x615f6e61
    edf8:	636e7973 	.word	0x636e7973
    edfc:	0000632e 	.word	0x0000632e
    ee00:	682f2e2e 	.word	0x682f2e2e
    ee04:	732f6c61 	.word	0x732f6c61
    ee08:	682f6372 	.word	0x682f6372
    ee0c:	635f6c61 	.word	0x635f6c61
    ee10:	735f6372 	.word	0x735f6372
    ee14:	2e636e79 	.word	0x2e636e79
    ee18:	00000063 	.word	0x00000063
    ee1c:	682f2e2e 	.word	0x682f2e2e
    ee20:	732f6c61 	.word	0x732f6c61
    ee24:	682f6372 	.word	0x682f6372
    ee28:	695f6c61 	.word	0x695f6c61
    ee2c:	6d5f6332 	.word	0x6d5f6332
    ee30:	6e79735f 	.word	0x6e79735f
    ee34:	00632e63 	.word	0x00632e63
    ee38:	682f2e2e 	.word	0x682f2e2e
    ee3c:	732f6c61 	.word	0x732f6c61
    ee40:	682f6372 	.word	0x682f6372
    ee44:	705f6c61 	.word	0x705f6c61
    ee48:	632e6d77 	.word	0x632e6d77
    ee4c:	00000000 	.word	0x00000000
    ee50:	682f2e2e 	.word	0x682f2e2e
    ee54:	732f6c61 	.word	0x732f6c61
    ee58:	682f6372 	.word	0x682f6372
    ee5c:	715f6c61 	.word	0x715f6c61
    ee60:	5f697073 	.word	0x5f697073
    ee64:	636e7973 	.word	0x636e7973
    ee68:	0000632e 	.word	0x0000632e
    ee6c:	682f2e2e 	.word	0x682f2e2e
    ee70:	732f6c61 	.word	0x732f6c61
    ee74:	682f6372 	.word	0x682f6372
    ee78:	735f6c61 	.word	0x735f6c61
    ee7c:	6d5f6970 	.word	0x6d5f6970
    ee80:	6e79735f 	.word	0x6e79735f
    ee84:	00632e63 	.word	0x00632e63
    ee88:	682f2e2e 	.word	0x682f2e2e
    ee8c:	732f6c61 	.word	0x732f6c61
    ee90:	682f6372 	.word	0x682f6372
    ee94:	745f6c61 	.word	0x745f6c61
    ee98:	72656d69 	.word	0x72656d69
    ee9c:	0000632e 	.word	0x0000632e
    eea0:	682f2e2e 	.word	0x682f2e2e
    eea4:	752f6c61 	.word	0x752f6c61
    eea8:	736c6974 	.word	0x736c6974
    eeac:	6372732f 	.word	0x6372732f
    eeb0:	6974752f 	.word	0x6974752f
    eeb4:	6c5f736c 	.word	0x6c5f736c
    eeb8:	2e747369 	.word	0x2e747369
    eebc:	00000063 	.word	0x00000063

0000eec0 <_map>:
    eec0:	00000000 00000040 00000001 00000021     ....@.......!...
    eed0:	00000003 00000003 00000004 00000004     ................
    eee0:	00000005 00000005 00000006 00000056     ............V...
    eef0:	00000007 00000057 00000008 00000028     ....W.......(...
    ef00:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
    ef10:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

0000ef20 <user_mux_confs>:
    ef20:	00020100 00000000 00000000 00000000     ................
	...

0000ef64 <channel_confs>:
    ef64:	0660065f 00000000 00000000 00000000     _.`.............
	...

0000efa4 <interrupt_cfg>:
	...
    f024:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    f034:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    f044:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    f054:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    f064:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    f074:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    f084:	43000400 43000800 43000c00              ...C...C...C

0000f090 <sercomspi_regs>:
    f090:	0020000c 00020000 00000000 01ff0001     .. .............
    f0a0:	30000c04 02000000 00000000 ff001700     ...0............
    f0b0:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    f0c0:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
    f0d0:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
    f0e0:	43001400 43001800                       ...C...C

0000f0e8 <_usb_ep_cfgs>:
    f0e8:	20000b48 00000000 00000040 20000b88     H.. ....@...... 
    f0f8:	20000bc8 00400040 20000c08 20000c48     ... @.@.... H.. 
    f108:	00400040 20000c88 20000cc8 00400040     @.@.... ... @.@.
    f118:	20000d08 20000d48 00400040 00000804     ... H.. @.@.....
    f128:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
    f138:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
    f148:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
    f158:	7361625f 00682e65                       _base.h.

0000f160 <n25q256a_interface>:
    f160:	0000b87d 0000b921 0000ba31 0000bbe9     }...!...1.......
    f170:	0000bc79 752f2e2e 642f6273 63697665     y...../usb/devic
    f180:	73752f65 2e636462 00000063              e/usbdc.c...

0000f18c <_ZTV9CDC_Class>:
	...
    f194:	0000e2ad 0000e38d 0000df31 0000e275     ........1...u...
    f1a4:	0000e425 0000e239 0000e14d 0000e19d     %...9...M.......
    f1b4:	0000e295 0000e2f5                       ........

0000f1bc <_ZTV6Stream>:
	...
    f1c4:	0000e971 0000e591 0000df31 0000df45     q.......1...E...
    f1d4:	0000e971 0000e971 0000e971 2e257830     q...q...q...0x%.
    f1e4:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
    f1f4:	0066766f                                ovf.

0000f1f8 <_ZTV5Print>:
	...
    f200:	0000e971 0000e591 0000df31 0000df45     q.......1...E...
    f210:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    f220:	00632e6f                                o.c.

0000f224 <_global_impure_ptr>:
    f224:	20000210                                ... 

0000f228 <_init>:
    f228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f22a:	bf00      	nop
    f22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f22e:	bc08      	pop	{r3}
    f230:	469e      	mov	lr, r3
    f232:	4770      	bx	lr

0000f234 <__init_array_start>:
    f234:	0000ed35 	.word	0x0000ed35

0000f238 <__frame_dummy_init_array_entry>:
    f238:	00000289 000003ed 000005fd 00000875     ............u...
    f248:	00000a05 0000d4a9 0000d9a5 0000def9     ................
    f258:	0000e57d 0000e949                       }...I...

0000f260 <_fini>:
    f260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f262:	bf00      	nop
    f264:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f266:	bc08      	pop	{r3}
    f268:	469e      	mov	lr, r3
    f26a:	4770      	bx	lr

0000f26c <__fini_array_start>:
    f26c:	00000265 	.word	0x00000265
