
EvaporatorAndCondesatorFan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001088c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001088c  0001088c  0002088c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000060c  20000000  00010894  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003060c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003060c  2**0
                  CONTENTS
  5 .bss          000013dc  2000060c  00010ea0  0003060c  2**2
                  ALLOC
  6 .stack        00010000  200019e8  0001227c  0003060c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003060c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003063a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00086fee  00000000  00000000  00030693  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b91e  00000000  00000000  000b7681  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001eb4a  00000000  00000000  000c2f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000036d8  00000000  00000000  000e1ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003350  00000000  00000000  000e51c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00053b40  00000000  00000000  000e8511  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00043546  00000000  00000000  0013c051  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0014357e  00000000  00000000  0017f597  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e128  00000000  00000000  002c2b18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 19 01 20 a5 03 00 00 a1 03 00 00 a1 03 00 00     ... ............
      10:	a1 03 00 00 a1 03 00 00 a1 03 00 00 00 00 00 00     ................
	...
      2c:	a1 03 00 00 a1 03 00 00 00 00 00 00 a1 03 00 00     ................
      3c:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
      4c:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
      5c:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
      6c:	bd 64 00 00 d9 52 00 00 e9 52 00 00 a1 03 00 00     .d...R...R......
      7c:	f9 52 00 00 09 53 00 00 19 53 00 00 29 53 00 00     .R...S...S..)S..
      8c:	39 53 00 00 49 53 00 00 59 53 00 00 a1 03 00 00     9S..IS..YS......
      9c:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
      ac:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
      bc:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
      cc:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
      dc:	a1 03 00 00 a1 03 00 00 a1 03 00 00 00 00 00 00     ................
	...
      f4:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     104:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     114:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     124:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     134:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     144:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     154:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     164:	a1 03 00 00 f9 79 00 00 15 7a 00 00 31 7a 00 00     .....y...z..1z..
     174:	4d 7a 00 00 a1 03 00 00 1d 47 00 00 41 ba 00 00     Mz.......G..A...
     184:	51 ba 00 00 61 ba 00 00 71 ba 00 00 a1 03 00 00     Q...a...q.......
     194:	5d 84 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ]...............
     1a4:	a1 03 00 00 a1 03 00 00 a1 03 00 00 79 84 00 00     ............y...
     1b4:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     1c4:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     1d4:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     1e4:	a1 03 00 00 a1 03 00 00 3d 91 00 00 a1 03 00 00     ........=.......
     1f4:	59 91 00 00 a1 03 00 00 75 91 00 00 91 91 00 00     Y.......u.......
     204:	ad 91 00 00 c9 91 00 00 a1 03 00 00 a1 03 00 00     ................
     214:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     224:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     234:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     244:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     254:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000060c 	.word	0x2000060c
     280:	00000000 	.word	0x00000000
     284:	00010894 	.word	0x00010894

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00010894 	.word	0x00010894
     2c4:	20000610 	.word	0x20000610
     2c8:	00010894 	.word	0x00010894
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN19CondesatorFan_ClassC1Ev>:
#include "CondesatorFan_Class.h"

// default constructor
CondesatorFan_Class::CondesatorFan_Class()
{
} //CondesatorFan_Class
     2d0:	4770      	bx	lr

000002d2 <_ZN19CondesatorFan_ClassD1Ev>:

// default destructor
CondesatorFan_Class::~CondesatorFan_Class()
{
} //~CondesatorFan_Class
     2d2:	4770      	bx	lr

000002d4 <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
	return isOK;
	
	
}

uint8_t CondesatorFan_Class::InitExpanderArray(MCP23008_Class** expandersArray){
     2d4:	1f0b      	subs	r3, r1, #4
     2d6:	300c      	adds	r0, #12
     2d8:	3118      	adds	r1, #24
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
		{
			expanders[i]=expandersArray[i];
     2da:	f853 2f04 	ldr.w	r2, [r3, #4]!
     2de:	f840 2b04 	str.w	r2, [r0], #4
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
     2e2:	428b      	cmp	r3, r1
     2e4:	d1f9      	bne.n	2da <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
		}
		return 0;
}
     2e6:	2000      	movs	r0, #0
     2e8:	4770      	bx	lr
	...

000002ec <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class>:
bool CondesatorFan_Class::InitCondesator(I2C_Sync_Class* i2cClass,MCP23008_Class** expanderArray){
     2ec:	b510      	push	{r4, lr}
     2ee:	4604      	mov	r4, r0
	i2c=i2cClass;
     2f0:	6081      	str	r1, [r0, #8]
	if (i2c->isOK)
     2f2:	7a4b      	ldrb	r3, [r1, #9]
     2f4:	b90b      	cbnz	r3, 2fa <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
}
     2f6:	78a0      	ldrb	r0, [r4, #2]
     2f8:	bd10      	pop	{r4, pc}
		InitExpanderArray(expanderArray);
     2fa:	4611      	mov	r1, r2
     2fc:	4b03      	ldr	r3, [pc, #12]	; (30c <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x20>)
     2fe:	4798      	blx	r3
		expanders[EVAPORATOR_AND_CONDESATOR_EXPANDERS-1]->SetPortOutput();
     300:	6a60      	ldr	r0, [r4, #36]	; 0x24
     302:	4b03      	ldr	r3, [pc, #12]	; (310 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x24>)
     304:	4798      	blx	r3
		isOK=SelfTest();
     306:	2301      	movs	r3, #1
     308:	70a3      	strb	r3, [r4, #2]
     30a:	e7f4      	b.n	2f6 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xa>
     30c:	000002d5 	.word	0x000002d5
     310:	0000e3b9 	.word	0x0000e3b9

00000314 <_ZN19CondesatorFan_Class10ReadStatusEv>:
	


uint8_t	CondesatorFan_Class::ReadStatus(void){
     314:	b510      	push	{r4, lr}
     316:	4604      	mov	r4, r0
	uint8_t r=expanders[0]->ReadGPIORegister();
     318:	68c0      	ldr	r0, [r0, #12]
     31a:	4b08      	ldr	r3, [pc, #32]	; (33c <_ZN19CondesatorFan_Class10ReadStatusEv+0x28>)
     31c:	4798      	blx	r3
	
	
	condesatorStatus.niAlcCdsFanExtFault=r&(0x01<<(4));
     31e:	f3c0 1100 	ubfx	r1, r0, #4, #1
     322:	78e3      	ldrb	r3, [r4, #3]
     324:	f361 0382 	bfi	r3, r1, #2, #1
	condesatorStatus.niAlcCdsFanEnableFault=r&(0x02<<(4));
     328:	f3c0 1140 	ubfx	r1, r0, #5, #1
     32c:	f361 0341 	bfi	r3, r1, #1, #1
	condesatorStatus.niAlcCdsFanPwmFault=r&(0x04<<(4));
     330:	f3c0 1280 	ubfx	r2, r0, #6, #1
     334:	f362 0300 	bfi	r3, r2, #0, #1
     338:	70e3      	strb	r3, [r4, #3]
	
	return r;
}
     33a:	bd10      	pop	{r4, pc}
     33c:	0000e245 	.word	0x0000e245

00000340 <_ZN19CondesatorFan_Class6EnableEv>:
uint8_t	CondesatorFan_Class::Enable(void){
     340:	b510      	push	{r4, lr}
     342:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(2,true);
     344:	2201      	movs	r2, #1
     346:	2102      	movs	r1, #2
     348:	68c0      	ldr	r0, [r0, #12]
     34a:	4b02      	ldr	r3, [pc, #8]	; (354 <_ZN19CondesatorFan_Class6EnableEv+0x14>)
     34c:	4798      	blx	r3
     34e:	7060      	strb	r0, [r4, #1]
	return uint8_t(enabled);
}
     350:	bd10      	pop	{r4, pc}
     352:	bf00      	nop
     354:	0000e4b1 	.word	0x0000e4b1

00000358 <_ZN19CondesatorFan_Class9SetEnableEb>:
uint8_t	CondesatorFan_Class::SetEnable(bool state){
     358:	b510      	push	{r4, lr}
     35a:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(2,state);
     35c:	460a      	mov	r2, r1
     35e:	2102      	movs	r1, #2
     360:	68c0      	ldr	r0, [r0, #12]
     362:	4b02      	ldr	r3, [pc, #8]	; (36c <_ZN19CondesatorFan_Class9SetEnableEb+0x14>)
     364:	4798      	blx	r3
     366:	7060      	strb	r0, [r4, #1]
	return uint8_t(enabled);
}
     368:	bd10      	pop	{r4, pc}
     36a:	bf00      	nop
     36c:	0000e4b1 	.word	0x0000e4b1

00000370 <_ZN19CondesatorFan_Class7DisableEv>:
uint8_t	CondesatorFan_Class::Disable(void){
     370:	b510      	push	{r4, lr}
     372:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(2,false)?false:true;
     374:	2200      	movs	r2, #0
     376:	2102      	movs	r1, #2
     378:	68c0      	ldr	r0, [r0, #12]
     37a:	4b03      	ldr	r3, [pc, #12]	; (388 <_ZN19CondesatorFan_Class7DisableEv+0x18>)
     37c:	4798      	blx	r3
     37e:	f080 0001 	eor.w	r0, r0, #1
     382:	b2c0      	uxtb	r0, r0
     384:	7060      	strb	r0, [r4, #1]
	return uint8_t(enabled);
}
     386:	bd10      	pop	{r4, pc}
     388:	0000e4b1 	.word	0x0000e4b1

0000038c <_ZN19CondesatorFan_Class6SetPWMEh>:

uint8_t	CondesatorFan_Class::SetPWM(uint8_t pwm){
     38c:	b510      	push	{r4, lr}
     38e:	4604      	mov	r4, r0
	pwmValue= expanders[6]->WriteGPIORegister(pwm);
     390:	6a40      	ldr	r0, [r0, #36]	; 0x24
     392:	4b02      	ldr	r3, [pc, #8]	; (39c <_ZN19CondesatorFan_Class6SetPWMEh+0x10>)
     394:	4798      	blx	r3
     396:	7120      	strb	r0, [r4, #4]
	return pwmValue;
}
     398:	bd10      	pop	{r4, pc}
     39a:	bf00      	nop
     39c:	0000e2c5 	.word	0x0000e2c5

000003a0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     3a0:	e7fe      	b.n	3a0 <Dummy_Handler>
	...

000003a4 <Reset_Handler>:
{
     3a4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     3a6:	4b17      	ldr	r3, [pc, #92]	; (404 <Reset_Handler+0x60>)
     3a8:	4a17      	ldr	r2, [pc, #92]	; (408 <Reset_Handler+0x64>)
     3aa:	429a      	cmp	r2, r3
     3ac:	d010      	beq.n	3d0 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     3ae:	4b17      	ldr	r3, [pc, #92]	; (40c <Reset_Handler+0x68>)
     3b0:	4a14      	ldr	r2, [pc, #80]	; (404 <Reset_Handler+0x60>)
     3b2:	429a      	cmp	r2, r3
     3b4:	d20c      	bcs.n	3d0 <Reset_Handler+0x2c>
     3b6:	3b01      	subs	r3, #1
     3b8:	1a9b      	subs	r3, r3, r2
     3ba:	f023 0303 	bic.w	r3, r3, #3
     3be:	3304      	adds	r3, #4
     3c0:	4413      	add	r3, r2
     3c2:	4911      	ldr	r1, [pc, #68]	; (408 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     3c4:	f851 0b04 	ldr.w	r0, [r1], #4
     3c8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     3cc:	429a      	cmp	r2, r3
     3ce:	d1f9      	bne.n	3c4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     3d0:	4b0f      	ldr	r3, [pc, #60]	; (410 <Reset_Handler+0x6c>)
     3d2:	4a10      	ldr	r2, [pc, #64]	; (414 <Reset_Handler+0x70>)
     3d4:	429a      	cmp	r2, r3
     3d6:	d20a      	bcs.n	3ee <Reset_Handler+0x4a>
     3d8:	3b01      	subs	r3, #1
     3da:	1a9b      	subs	r3, r3, r2
     3dc:	f023 0303 	bic.w	r3, r3, #3
     3e0:	3304      	adds	r3, #4
     3e2:	4413      	add	r3, r2
                *pDest++ = 0;
     3e4:	2100      	movs	r1, #0
     3e6:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     3ea:	4293      	cmp	r3, r2
     3ec:	d1fb      	bne.n	3e6 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     3ee:	4a0a      	ldr	r2, [pc, #40]	; (418 <Reset_Handler+0x74>)
     3f0:	4b0a      	ldr	r3, [pc, #40]	; (41c <Reset_Handler+0x78>)
     3f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     3f6:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     3f8:	4b09      	ldr	r3, [pc, #36]	; (420 <Reset_Handler+0x7c>)
     3fa:	4798      	blx	r3
        main();
     3fc:	4b09      	ldr	r3, [pc, #36]	; (424 <Reset_Handler+0x80>)
     3fe:	4798      	blx	r3
     400:	e7fe      	b.n	400 <Reset_Handler+0x5c>
     402:	bf00      	nop
     404:	20000000 	.word	0x20000000
     408:	00010894 	.word	0x00010894
     40c:	2000060c 	.word	0x2000060c
     410:	200019e8 	.word	0x200019e8
     414:	2000060c 	.word	0x2000060c
     418:	e000ed00 	.word	0xe000ed00
     41c:	00000000 	.word	0x00000000
     420:	0001003d 	.word	0x0001003d
     424:	00000785 	.word	0x00000785

00000428 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev>:
	somethingChanged=false;
	
} //EvaporatorAndCondesatorFans_Class

// default destructor
EvaporatorAndCondesatorFans_Class::~EvaporatorAndCondesatorFans_Class()
     428:	b510      	push	{r4, lr}
     42a:	4604      	mov	r4, r0
     42c:	302c      	adds	r0, #44	; 0x2c
     42e:	4b03      	ldr	r3, [pc, #12]	; (43c <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x14>)
     430:	4798      	blx	r3
     432:	4620      	mov	r0, r4
     434:	4b02      	ldr	r3, [pc, #8]	; (440 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x18>)
     436:	4798      	blx	r3
{
} //~EvaporatorAndCondesatorFans_Class
     438:	4620      	mov	r0, r4
     43a:	bd10      	pop	{r4, pc}
     43c:	000002d3 	.word	0x000002d3
     440:	00000645 	.word	0x00000645

00000444 <__tcf_1>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
     444:	b570      	push	{r4, r5, r6, lr}
     446:	4c05      	ldr	r4, [pc, #20]	; (45c <__tcf_1+0x18>)
     448:	4e05      	ldr	r6, [pc, #20]	; (460 <__tcf_1+0x1c>)
     44a:	f1a4 05c4 	sub.w	r5, r4, #196	; 0xc4
     44e:	3c1c      	subs	r4, #28
     450:	4620      	mov	r0, r4
     452:	47b0      	blx	r6
     454:	42ac      	cmp	r4, r5
     456:	d1fa      	bne.n	44e <__tcf_1+0xa>
     458:	bd70      	pop	{r4, r5, r6, pc}
     45a:	bf00      	nop
     45c:	200006ec 	.word	0x200006ec
     460:	0000e149 	.word	0x0000e149

00000464 <__tcf_0>:
static EvaporatorFan_Class	evaporatorFan[2];
     464:	b510      	push	{r4, lr}
     466:	4803      	ldr	r0, [pc, #12]	; (474 <__tcf_0+0x10>)
     468:	4c03      	ldr	r4, [pc, #12]	; (478 <__tcf_0+0x14>)
     46a:	47a0      	blx	r4
     46c:	4803      	ldr	r0, [pc, #12]	; (47c <__tcf_0+0x18>)
     46e:	47a0      	blx	r4
     470:	bd10      	pop	{r4, pc}
     472:	bf00      	nop
     474:	20000718 	.word	0x20000718
     478:	00000645 	.word	0x00000645
     47c:	200006ec 	.word	0x200006ec

00000480 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev>:
EvaporatorAndCondesatorFans_Class::EvaporatorAndCondesatorFans_Class()
     480:	b510      	push	{r4, lr}
     482:	4604      	mov	r4, r0
     484:	4b0d      	ldr	r3, [pc, #52]	; (4bc <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x3c>)
     486:	4798      	blx	r3
     488:	f104 002c 	add.w	r0, r4, #44	; 0x2c
     48c:	4b0c      	ldr	r3, [pc, #48]	; (4c0 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x40>)
     48e:	4798      	blx	r3
	i2c=&i2cSharedStatic;
     490:	4b0c      	ldr	r3, [pc, #48]	; (4c4 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x44>)
     492:	f503 728e 	add.w	r2, r3, #284	; 0x11c
     496:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	evaporator[0]=&evaporatorFan[0];
     49a:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
     49e:	65e2      	str	r2, [r4, #92]	; 0x5c
	evaporator[1]=&evaporatorFan[1];
     4a0:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
     4a4:	6622      	str	r2, [r4, #96]	; 0x60
	condesator=&condesatorFan;
     4a6:	f503 7298 	add.w	r2, r3, #304	; 0x130
     4aa:	6662      	str	r2, [r4, #100]	; 0x64
	ptrFansClass=this;
     4ac:	f8c3 415c 	str.w	r4, [r3, #348]	; 0x15c
	somethingChanged=false;
     4b0:	2300      	movs	r3, #0
     4b2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
} //EvaporatorAndCondesatorFans_Class
     4b6:	4620      	mov	r0, r4
     4b8:	bd10      	pop	{r4, pc}
     4ba:	bf00      	nop
     4bc:	0000062d 	.word	0x0000062d
     4c0:	000002d1 	.word	0x000002d1
     4c4:	20000628 	.word	0x20000628

000004c8 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv>:
	{
	}
	return isOK;
	
}
uint8_t EvaporatorAndCondesatorFans_Class::InitExpanderArray(void){
     4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     4cc:	4606      	mov	r6, r0
     4ce:	4c0c      	ldr	r4, [pc, #48]	; (500 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x38>)
     4d0:	f100 0768 	add.w	r7, r0, #104	; 0x68
	
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
     4d4:	2500      	movs	r5, #0
	{
		expanders[i]=&expandersStatic[i];
		currentExpander=expanders[i];
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
     4d6:	f8df 802c 	ldr.w	r8, [pc, #44]	; 504 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x3c>
		expanders[i]=&expandersStatic[i];
     4da:	f847 4b04 	str.w	r4, [r7], #4
		currentExpander=expanders[i];
     4de:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
     4e2:	f045 0120 	orr.w	r1, r5, #32
     4e6:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
     4ea:	b2c9      	uxtb	r1, r1
     4ec:	4620      	mov	r0, r4
     4ee:	47c0      	blx	r8
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
     4f0:	3501      	adds	r5, #1
     4f2:	341c      	adds	r4, #28
     4f4:	2d07      	cmp	r5, #7
     4f6:	d1f0      	bne.n	4da <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x12>
	}
	return 0;
}
     4f8:	2000      	movs	r0, #0
     4fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4fe:	bf00      	nop
     500:	20000628 	.word	0x20000628
     504:	0000e15d 	.word	0x0000e15d

00000508 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv>:
bool	EvaporatorAndCondesatorFans_Class::Init(void){
     508:	b570      	push	{r4, r5, r6, lr}
     50a:	4604      	mov	r4, r0
	i2c->Init();
     50c:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
     510:	4b14      	ldr	r3, [pc, #80]	; (564 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x5c>)
     512:	4798      	blx	r3
	if (i2c->isOK)
     514:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     518:	7a5b      	ldrb	r3, [r3, #9]
     51a:	b913      	cbnz	r3, 522 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x1a>
	return isOK;
     51c:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
}
     520:	bd70      	pop	{r4, r5, r6, pc}
		InitExpanderArray();
     522:	4620      	mov	r0, r4
     524:	4b10      	ldr	r3, [pc, #64]	; (568 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x60>)
     526:	4798      	blx	r3
		evaporator[0]->InitEvaporator(0,i2c,expanders);
     528:	f104 0568 	add.w	r5, r4, #104	; 0x68
     52c:	462b      	mov	r3, r5
     52e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
     532:	2100      	movs	r1, #0
     534:	6de0      	ldr	r0, [r4, #92]	; 0x5c
     536:	4e0d      	ldr	r6, [pc, #52]	; (56c <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x64>)
     538:	47b0      	blx	r6
		evaporator[1]->InitEvaporator(1,i2c,expanders);
     53a:	462b      	mov	r3, r5
     53c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
     540:	2101      	movs	r1, #1
     542:	6e20      	ldr	r0, [r4, #96]	; 0x60
     544:	47b0      	blx	r6
		condesator->InitCondesator(i2c,expanders);
     546:	462a      	mov	r2, r5
     548:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
     54c:	6e60      	ldr	r0, [r4, #100]	; 0x64
     54e:	4b08      	ldr	r3, [pc, #32]	; (570 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x68>)
     550:	4798      	blx	r3
		isOK=(evaporator[0]->isOK)&(evaporator[1]->isOK);
     552:	6de3      	ldr	r3, [r4, #92]	; 0x5c
     554:	6e22      	ldr	r2, [r4, #96]	; 0x60
     556:	791b      	ldrb	r3, [r3, #4]
     558:	7912      	ldrb	r2, [r2, #4]
     55a:	4013      	ands	r3, r2
     55c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     560:	e7dc      	b.n	51c <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x14>
     562:	bf00      	nop
     564:	0000e049 	.word	0x0000e049
     568:	000004c9 	.word	0x000004c9
     56c:	0000066d 	.word	0x0000066d
     570:	000002ed 	.word	0x000002ed

00000574 <_GLOBAL__sub_I_ptrFansClass>:

EvaporatorAndCondesatorFans_Class  fans;
     574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
static I2C_Sync_Class	i2cSharedStatic(&I2C_EXPANDER);
     578:	4c1c      	ldr	r4, [pc, #112]	; (5ec <_GLOBAL__sub_I_ptrFansClass+0x78>)
     57a:	f504 758e 	add.w	r5, r4, #284	; 0x11c
     57e:	491c      	ldr	r1, [pc, #112]	; (5f0 <_GLOBAL__sub_I_ptrFansClass+0x7c>)
     580:	4628      	mov	r0, r5
     582:	4b1c      	ldr	r3, [pc, #112]	; (5f4 <_GLOBAL__sub_I_ptrFansClass+0x80>)
     584:	4798      	blx	r3
     586:	4f1c      	ldr	r7, [pc, #112]	; (5f8 <_GLOBAL__sub_I_ptrFansClass+0x84>)
     588:	463a      	mov	r2, r7
     58a:	491c      	ldr	r1, [pc, #112]	; (5fc <_GLOBAL__sub_I_ptrFansClass+0x88>)
     58c:	4628      	mov	r0, r5
     58e:	4e1c      	ldr	r6, [pc, #112]	; (600 <_GLOBAL__sub_I_ptrFansClass+0x8c>)
     590:	47b0      	blx	r6
static EvaporatorFan_Class	evaporatorFan[2];
     592:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
     596:	4628      	mov	r0, r5
     598:	f8df 8088 	ldr.w	r8, [pc, #136]	; 624 <_GLOBAL__sub_I_ptrFansClass+0xb0>
     59c:	47c0      	blx	r8
     59e:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
     5a2:	47c0      	blx	r8
     5a4:	463a      	mov	r2, r7
     5a6:	4917      	ldr	r1, [pc, #92]	; (604 <_GLOBAL__sub_I_ptrFansClass+0x90>)
     5a8:	2000      	movs	r0, #0
     5aa:	47b0      	blx	r6
static CondesatorFan_Class	condesatorFan;
     5ac:	f504 7898 	add.w	r8, r4, #304	; 0x130
     5b0:	4640      	mov	r0, r8
     5b2:	4b15      	ldr	r3, [pc, #84]	; (608 <_GLOBAL__sub_I_ptrFansClass+0x94>)
     5b4:	4798      	blx	r3
     5b6:	463a      	mov	r2, r7
     5b8:	4914      	ldr	r1, [pc, #80]	; (60c <_GLOBAL__sub_I_ptrFansClass+0x98>)
     5ba:	4640      	mov	r0, r8
     5bc:	47b0      	blx	r6
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
     5be:	4e14      	ldr	r6, [pc, #80]	; (610 <_GLOBAL__sub_I_ptrFansClass+0x9c>)
     5c0:	4620      	mov	r0, r4
     5c2:	47b0      	blx	r6
     5c4:	341c      	adds	r4, #28
     5c6:	42a5      	cmp	r5, r4
     5c8:	d1fa      	bne.n	5c0 <_GLOBAL__sub_I_ptrFansClass+0x4c>
     5ca:	4e0b      	ldr	r6, [pc, #44]	; (5f8 <_GLOBAL__sub_I_ptrFansClass+0x84>)
     5cc:	4632      	mov	r2, r6
     5ce:	4911      	ldr	r1, [pc, #68]	; (614 <_GLOBAL__sub_I_ptrFansClass+0xa0>)
     5d0:	2000      	movs	r0, #0
     5d2:	4c0b      	ldr	r4, [pc, #44]	; (600 <_GLOBAL__sub_I_ptrFansClass+0x8c>)
     5d4:	47a0      	blx	r4
EvaporatorAndCondesatorFans_Class  fans;
     5d6:	4d10      	ldr	r5, [pc, #64]	; (618 <_GLOBAL__sub_I_ptrFansClass+0xa4>)
     5d8:	4628      	mov	r0, r5
     5da:	4b10      	ldr	r3, [pc, #64]	; (61c <_GLOBAL__sub_I_ptrFansClass+0xa8>)
     5dc:	4798      	blx	r3
     5de:	4632      	mov	r2, r6
     5e0:	490f      	ldr	r1, [pc, #60]	; (620 <_GLOBAL__sub_I_ptrFansClass+0xac>)
     5e2:	4628      	mov	r0, r5
     5e4:	47a0      	blx	r4
     5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     5ea:	bf00      	nop
     5ec:	20000628 	.word	0x20000628
     5f0:	20001868 	.word	0x20001868
     5f4:	0000e019 	.word	0x0000e019
     5f8:	20000000 	.word	0x20000000
     5fc:	0000e035 	.word	0x0000e035
     600:	00010009 	.word	0x00010009
     604:	00000465 	.word	0x00000465
     608:	000002d1 	.word	0x000002d1
     60c:	000002d3 	.word	0x000002d3
     610:	0000e135 	.word	0x0000e135
     614:	00000445 	.word	0x00000445
     618:	20000788 	.word	0x20000788
     61c:	00000481 	.word	0x00000481
     620:	00000429 	.word	0x00000429
     624:	0000062d 	.word	0x0000062d

00000628 <_ZN29EvaporatorFanDataStruct_ClassC1Ev>:
#include "EvaporatorFanDataStruct_Class.h"

// default constructor
EvaporatorFanDataStruct_Class::EvaporatorFanDataStruct_Class()
{
} //EvaporatorFanDataStruct_Class
     628:	4770      	bx	lr

0000062a <_ZN29EvaporatorFanDataStruct_ClassD1Ev>:

// default destructor
EvaporatorFanDataStruct_Class::~EvaporatorFanDataStruct_Class()
{
} //~EvaporatorFanDataStruct_Class
     62a:	4770      	bx	lr

0000062c <_ZN19EvaporatorFan_ClassC1Ev>:




// default constructor
EvaporatorFan_Class::EvaporatorFan_Class()
     62c:	b510      	push	{r4, lr}
     62e:	4604      	mov	r4, r0
     630:	4b02      	ldr	r3, [pc, #8]	; (63c <_ZN19EvaporatorFan_ClassC1Ev+0x10>)
     632:	4798      	blx	r3
{
	
	ptrEvaFanClass=this;
     634:	4b02      	ldr	r3, [pc, #8]	; (640 <_ZN19EvaporatorFan_ClassC1Ev+0x14>)
     636:	601c      	str	r4, [r3, #0]
	
} //EvaporatorFan_Class
     638:	4620      	mov	r0, r4
     63a:	bd10      	pop	{r4, pc}
     63c:	00000629 	.word	0x00000629
     640:	20000814 	.word	0x20000814

00000644 <_ZN19EvaporatorFan_ClassD1Ev>:

// default destructor
EvaporatorFan_Class::~EvaporatorFan_Class()
     644:	b510      	push	{r4, lr}
     646:	4604      	mov	r4, r0
     648:	4b01      	ldr	r3, [pc, #4]	; (650 <_ZN19EvaporatorFan_ClassD1Ev+0xc>)
     64a:	4798      	blx	r3
{
} //~EvaporatorFan_Class
     64c:	4620      	mov	r0, r4
     64e:	bd10      	pop	{r4, pc}
     650:	0000062b 	.word	0x0000062b

00000654 <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
		}
		return isOK;
	
	
}
uint8_t EvaporatorFan_Class::InitExpanderArray(MCP23008_Class** expanArray){
     654:	1f0b      	subs	r3, r1, #4
     656:	300c      	adds	r0, #12
     658:	3114      	adds	r1, #20
	
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
			{
				expanders[i]=expanArray[i];
     65a:	f853 2f04 	ldr.w	r2, [r3, #4]!
     65e:	f840 2b04 	str.w	r2, [r0], #4
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
     662:	428b      	cmp	r3, r1
     664:	d1f9      	bne.n	65a <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
			}
			return 0;
}
     666:	2000      	movs	r0, #0
     668:	4770      	bx	lr
	...

0000066c <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class>:
bool EvaporatorFan_Class::InitEvaporator(uint8_t number, I2C_Sync_Class* i2cClass,MCP23008_Class** expandersArray){
     66c:	b510      	push	{r4, lr}
     66e:	4604      	mov	r4, r0
	i2c=i2cClass;
     670:	6082      	str	r2, [r0, #8]
	fanNumber=number;
     672:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
		if (i2c->isOK)
     676:	7a52      	ldrb	r2, [r2, #9]
     678:	b90a      	cbnz	r2, 67e <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x12>
}
     67a:	7920      	ldrb	r0, [r4, #4]
     67c:	bd10      	pop	{r4, pc}
			InitExpanderArray(expandersArray);
     67e:	4619      	mov	r1, r3
     680:	4b0b      	ldr	r3, [pc, #44]	; (6b0 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x44>)
     682:	4798      	blx	r3
			if (fanNumber==0)
     684:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     688:	b14b      	cbz	r3, 69e <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x32>
			expanders[4+fanNumber]->SetPortOutput();
     68a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     68e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     692:	69d8      	ldr	r0, [r3, #28]
     694:	4b07      	ldr	r3, [pc, #28]	; (6b4 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x48>)
     696:	4798      	blx	r3
			isOK=SelfTest();
     698:	2301      	movs	r3, #1
     69a:	7123      	strb	r3, [r4, #4]
     69c:	e7ed      	b.n	67a <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
				expanders[0]->SetPortInput(0x70);
     69e:	2170      	movs	r1, #112	; 0x70
     6a0:	68e0      	ldr	r0, [r4, #12]
     6a2:	4b05      	ldr	r3, [pc, #20]	; (6b8 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x4c>)
     6a4:	4798      	blx	r3
				expanders[1]->SetPortInput();
     6a6:	6920      	ldr	r0, [r4, #16]
     6a8:	4b04      	ldr	r3, [pc, #16]	; (6bc <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x50>)
     6aa:	4798      	blx	r3
     6ac:	e7ed      	b.n	68a <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x1e>
     6ae:	bf00      	nop
     6b0:	00000655 	.word	0x00000655
     6b4:	0000e3b9 	.word	0x0000e3b9
     6b8:	0000e345 	.word	0x0000e345
     6bc:	0000e301 	.word	0x0000e301

000006c0 <_ZN19EvaporatorFan_Class10ReadStatusEv>:

uint8_t	EvaporatorFan_Class::ReadStatus(void){
     6c0:	b570      	push	{r4, r5, r6, lr}
     6c2:	4604      	mov	r4, r0
	uint8_t r=expanders[1]->ReadGPIORegister();
     6c4:	6900      	ldr	r0, [r0, #16]
     6c6:	4b0e      	ldr	r3, [pc, #56]	; (700 <_ZN19EvaporatorFan_Class10ReadStatusEv+0x40>)
     6c8:	4798      	blx	r3
     6ca:	4601      	mov	r1, r0
	
	
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanExtFault=r&(0x01<<(4*fanNumber));
     6cc:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
     6d0:	0096      	lsls	r6, r2, #2
     6d2:	fa40 f506 	asr.w	r5, r0, r6
     6d6:	5ca3      	ldrb	r3, [r4, r2]
     6d8:	f365 0382 	bfi	r3, r5, #2, #1
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanEnableFault=r&(0x02<<(4*fanNumber));
     6dc:	2502      	movs	r5, #2
     6de:	40b5      	lsls	r5, r6
     6e0:	4205      	tst	r5, r0
     6e2:	bf14      	ite	ne
     6e4:	2501      	movne	r5, #1
     6e6:	2500      	moveq	r5, #0
     6e8:	f365 0341 	bfi	r3, r5, #1, #1
	evaporatorFansStatus.inputs[fanNumber].iAlcEvaFanPwmFault=r&(0x04<<(4*fanNumber));
     6ec:	2504      	movs	r5, #4
     6ee:	40b5      	lsls	r5, r6
     6f0:	4205      	tst	r5, r0
     6f2:	bf14      	ite	ne
     6f4:	2101      	movne	r1, #1
     6f6:	2100      	moveq	r1, #0
     6f8:	f361 0300 	bfi	r3, r1, #0, #1
     6fc:	54a3      	strb	r3, [r4, r2]
	return r;
		
}
     6fe:	bd70      	pop	{r4, r5, r6, pc}
     700:	0000e245 	.word	0x0000e245

00000704 <_ZN19EvaporatorFan_Class6EnableEv>:
uint8_t	EvaporatorFan_Class::Enable(void){
     704:	b510      	push	{r4, lr}
     706:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(fanNumber,true);
     708:	2201      	movs	r2, #1
     70a:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
     70e:	68c0      	ldr	r0, [r0, #12]
     710:	4b01      	ldr	r3, [pc, #4]	; (718 <_ZN19EvaporatorFan_Class6EnableEv+0x14>)
     712:	4798      	blx	r3
     714:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
     716:	bd10      	pop	{r4, pc}
     718:	0000e4b1 	.word	0x0000e4b1

0000071c <_ZN19EvaporatorFan_Class9SetEnableEb>:
uint8_t	EvaporatorFan_Class::SetEnable(bool state){
     71c:	b510      	push	{r4, lr}
     71e:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(1-fanNumber,!state);
     720:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
     724:	f1c3 0301 	rsb	r3, r3, #1
     728:	f081 0201 	eor.w	r2, r1, #1
     72c:	b2d9      	uxtb	r1, r3
     72e:	68c0      	ldr	r0, [r0, #12]
     730:	4b01      	ldr	r3, [pc, #4]	; (738 <_ZN19EvaporatorFan_Class9SetEnableEb+0x1c>)
     732:	4798      	blx	r3
     734:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
     736:	bd10      	pop	{r4, pc}
     738:	0000e4b1 	.word	0x0000e4b1

0000073c <_ZN19EvaporatorFan_Class7DisableEv>:
uint8_t	EvaporatorFan_Class::Disable(void){
     73c:	b510      	push	{r4, lr}
     73e:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(fanNumber,false)?false:true;
     740:	2200      	movs	r2, #0
     742:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
     746:	68c0      	ldr	r0, [r0, #12]
     748:	4b03      	ldr	r3, [pc, #12]	; (758 <_ZN19EvaporatorFan_Class7DisableEv+0x1c>)
     74a:	4798      	blx	r3
     74c:	f080 0001 	eor.w	r0, r0, #1
     750:	b2c0      	uxtb	r0, r0
     752:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
     754:	bd10      	pop	{r4, pc}
     756:	bf00      	nop
     758:	0000e4b1 	.word	0x0000e4b1

0000075c <_ZN19EvaporatorFan_Class6SetPWMEh>:

uint8_t	EvaporatorFan_Class::SetPWM(uint8_t pwm){
     75c:	b510      	push	{r4, lr}
     75e:	4604      	mov	r4, r0
	pwmValue= expanders[4+fanNumber]->WriteGPIORegister(pwm);
     760:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
     764:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     768:	69d8      	ldr	r0, [r3, #28]
     76a:	4b02      	ldr	r3, [pc, #8]	; (774 <_ZN19EvaporatorFan_Class6SetPWMEh+0x18>)
     76c:	4798      	blx	r3
     76e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	return pwmValue;
}
     772:	bd10      	pop	{r4, pc}
     774:	0000e2c5 	.word	0x0000e2c5

00000778 <_ZL13FirmwareAlivePK10timer_task>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     778:	2280      	movs	r2, #128	; 0x80
     77a:	4b01      	ldr	r3, [pc, #4]	; (780 <_ZL13FirmwareAlivePK10timer_task+0x8>)
     77c:	619a      	str	r2, [r3, #24]
     77e:	4770      	bx	lr
     780:	41008000 	.word	0x41008000

00000784 <main>:
	gpio_set_pin_level(iAlcFwIsAlive,true);
}


int main(void)
{
     784:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	atmel_start_init();
     788:	4b2e      	ldr	r3, [pc, #184]	; (844 <main+0xc0>)
     78a:	4798      	blx	r3
	uint8_t status;

	usb.Init();
     78c:	482e      	ldr	r0, [pc, #184]	; (848 <main+0xc4>)
     78e:	4b2f      	ldr	r3, [pc, #188]	; (84c <main+0xc8>)
     790:	4798      	blx	r3
	delay_ms(100);
     792:	2064      	movs	r0, #100	; 0x64
     794:	4b2e      	ldr	r3, [pc, #184]	; (850 <main+0xcc>)
     796:	4798      	blx	r3
//	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
//	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
	pwm_enable(&LIVE_PULSE);
     798:	482e      	ldr	r0, [pc, #184]	; (854 <main+0xd0>)
     79a:	4b2f      	ldr	r3, [pc, #188]	; (858 <main+0xd4>)
     79c:	4798      	blx	r3
	fans.Init();
     79e:	482f      	ldr	r0, [pc, #188]	; (85c <main+0xd8>)
     7a0:	4b2f      	ldr	r3, [pc, #188]	; (860 <main+0xdc>)
     7a2:	4798      	blx	r3
	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareAlive),250);
     7a4:	22fa      	movs	r2, #250	; 0xfa
     7a6:	492f      	ldr	r1, [pc, #188]	; (864 <main+0xe0>)
     7a8:	482f      	ldr	r0, [pc, #188]	; (868 <main+0xe4>)
     7aa:	4b30      	ldr	r3, [pc, #192]	; (86c <main+0xe8>)
     7ac:	4798      	blx	r3
	toolApp.Init();
     7ae:	4830      	ldr	r0, [pc, #192]	; (870 <main+0xec>)
     7b0:	4b30      	ldr	r3, [pc, #192]	; (874 <main+0xf0>)
     7b2:	4798      	blx	r3
	while (1)
	{
		
		if (toolApp.IsAppConnected())
     7b4:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 870 <main+0xec>
		
		for (uint8_t j = 0; j <0xff; j++)
		{
			for (uint8_t i = 0; i < 2; i++)
			{
				delay_ms(DELAY_TIME_REQUEST);
     7b8:	4e25      	ldr	r6, [pc, #148]	; (850 <main+0xcc>)
		if (toolApp.IsAppConnected())
     7ba:	4648      	mov	r0, r9
     7bc:	4b2e      	ldr	r3, [pc, #184]	; (878 <main+0xf4>)
     7be:	4798      	blx	r3
     7c0:	2800      	cmp	r0, #0
     7c2:	d13a      	bne.n	83a <main+0xb6>
{
     7c4:	2700      	movs	r7, #0
				delay_ms(DELAY_TIME_REQUEST);
     7c6:	2564      	movs	r5, #100	; 0x64
			//	usb<<"Enabling Evaporator Fan: "<<i<<" .\t";
				fans.evaporator[i]->Enable();
     7c8:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8a0 <main+0x11c>
     7cc:	4c2b      	ldr	r4, [pc, #172]	; (87c <main+0xf8>)
     7ce:	f104 0a08 	add.w	sl, r4, #8
				delay_ms(DELAY_TIME_REQUEST);
     7d2:	4628      	mov	r0, r5
     7d4:	47b0      	blx	r6
     7d6:	46a3      	mov	fp, r4
				fans.evaporator[i]->Enable();
     7d8:	6820      	ldr	r0, [r4, #0]
     7da:	47c0      	blx	r8
				delay_ms(DELAY_TIME_REQUEST);
     7dc:	4628      	mov	r0, r5
     7de:	47b0      	blx	r6
				status= fans.evaporator[i]->ReadStatus();
     7e0:	6820      	ldr	r0, [r4, #0]
     7e2:	4b27      	ldr	r3, [pc, #156]	; (880 <main+0xfc>)
     7e4:	4798      	blx	r3
			//	usb<<"Evaporator Fan "<<i<< " Status :"<<status<<" .\t";
				delay_ms(DELAY_TIME_REQUEST);
     7e6:	4628      	mov	r0, r5
     7e8:	47b0      	blx	r6
				status= fans.evaporator[i]->SetPWM(j);
     7ea:	4639      	mov	r1, r7
     7ec:	f854 0b04 	ldr.w	r0, [r4], #4
     7f0:	4b24      	ldr	r3, [pc, #144]	; (884 <main+0x100>)
     7f2:	4798      	blx	r3
			//	usb<<"Evaporator Fan "<<i<< " SetPoint :"<<status<<" .\t";
				delay_ms(DELAY_TIME_REQUEST);
     7f4:	4628      	mov	r0, r5
     7f6:	47b0      	blx	r6
				fans.evaporator[i]->Disable();
     7f8:	f8db 0000 	ldr.w	r0, [fp]
     7fc:	4b22      	ldr	r3, [pc, #136]	; (888 <main+0x104>)
     7fe:	4798      	blx	r3
			for (uint8_t i = 0; i < 2; i++)
     800:	4554      	cmp	r4, sl
     802:	d1e6      	bne.n	7d2 <main+0x4e>
			//	usb<<" EvaporatorFan "<<i<< " Disabled"<<NEWLINE;
			
			}
			delay_ms(DELAY_TIME_REQUEST);
     804:	4628      	mov	r0, r5
     806:	47b0      	blx	r6
		//	usb<<NEWLINE<<"Enabling Condesator .\t";
			fans.condesator->Enable();
     808:	4c14      	ldr	r4, [pc, #80]	; (85c <main+0xd8>)
     80a:	6e60      	ldr	r0, [r4, #100]	; 0x64
     80c:	4b1f      	ldr	r3, [pc, #124]	; (88c <main+0x108>)
     80e:	4798      	blx	r3
			delay_ms(DELAY_TIME_REQUEST);
     810:	4628      	mov	r0, r5
     812:	47b0      	blx	r6
			status= fans.condesator->ReadStatus();
     814:	6e60      	ldr	r0, [r4, #100]	; 0x64
     816:	4b1e      	ldr	r3, [pc, #120]	; (890 <main+0x10c>)
     818:	4798      	blx	r3
		//	usb<<"Condesator  Status :"<<status<<" .\t";
			delay_ms(DELAY_TIME_REQUEST);
     81a:	4628      	mov	r0, r5
     81c:	47b0      	blx	r6
			status= fans.condesator->SetPWM(j);
     81e:	4639      	mov	r1, r7
     820:	6e60      	ldr	r0, [r4, #100]	; 0x64
     822:	4b1c      	ldr	r3, [pc, #112]	; (894 <main+0x110>)
     824:	4798      	blx	r3
		//	usb<<"Condesator SetPoint :"<<status<<" .\t";
			delay_ms(DELAY_TIME_REQUEST);
     826:	4628      	mov	r0, r5
     828:	47b0      	blx	r6
			fans.condesator->Disable();
     82a:	6e60      	ldr	r0, [r4, #100]	; 0x64
     82c:	4b1a      	ldr	r3, [pc, #104]	; (898 <main+0x114>)
     82e:	4798      	blx	r3
		for (uint8_t j = 0; j <0xff; j++)
     830:	3701      	adds	r7, #1
     832:	b2ff      	uxtb	r7, r7
     834:	2fff      	cmp	r7, #255	; 0xff
     836:	d0c0      	beq.n	7ba <main+0x36>
     838:	e7c8      	b.n	7cc <main+0x48>
			if (toolApp.handleCommunication())
     83a:	4648      	mov	r0, r9
     83c:	4b17      	ldr	r3, [pc, #92]	; (89c <main+0x118>)
     83e:	4798      	blx	r3
     840:	e7c0      	b.n	7c4 <main+0x40>
     842:	bf00      	nop
     844:	00001029 	.word	0x00001029
     848:	20001358 	.word	0x20001358
     84c:	0000f0b1 	.word	0x0000f0b1
     850:	00002775 	.word	0x00002775
     854:	200017e4 	.word	0x200017e4
     858:	00002d95 	.word	0x00002d95
     85c:	20000788 	.word	0x20000788
     860:	00000509 	.word	0x00000509
     864:	00000779 	.word	0x00000779
     868:	20001300 	.word	0x20001300
     86c:	0000ed35 	.word	0x0000ed35
     870:	20000818 	.word	0x20000818
     874:	00000c21 	.word	0x00000c21
     878:	00000995 	.word	0x00000995
     87c:	200007e4 	.word	0x200007e4
     880:	000006c1 	.word	0x000006c1
     884:	0000075d 	.word	0x0000075d
     888:	0000073d 	.word	0x0000073d
     88c:	00000341 	.word	0x00000341
     890:	00000315 	.word	0x00000315
     894:	0000038d 	.word	0x0000038d
     898:	00000371 	.word	0x00000371
     89c:	00000f51 	.word	0x00000f51
     8a0:	00000705 	.word	0x00000705

000008a4 <_GLOBAL__sub_I_main>:
		}

		

	}
}
     8a4:	b510      	push	{r4, lr}
static Maintenance_Tool	toolApp;
     8a6:	4c05      	ldr	r4, [pc, #20]	; (8bc <_GLOBAL__sub_I_main+0x18>)
     8a8:	4620      	mov	r0, r4
     8aa:	4b05      	ldr	r3, [pc, #20]	; (8c0 <_GLOBAL__sub_I_main+0x1c>)
     8ac:	4798      	blx	r3
     8ae:	4a05      	ldr	r2, [pc, #20]	; (8c4 <_GLOBAL__sub_I_main+0x20>)
     8b0:	4905      	ldr	r1, [pc, #20]	; (8c8 <_GLOBAL__sub_I_main+0x24>)
     8b2:	4620      	mov	r0, r4
     8b4:	4b05      	ldr	r3, [pc, #20]	; (8cc <_GLOBAL__sub_I_main+0x28>)
     8b6:	4798      	blx	r3
     8b8:	bd10      	pop	{r4, pc}
     8ba:	bf00      	nop
     8bc:	20000818 	.word	0x20000818
     8c0:	00000919 	.word	0x00000919
     8c4:	20000000 	.word	0x20000000
     8c8:	000008f1 	.word	0x000008f1
     8cc:	00010009 	.word	0x00010009

000008d0 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
     8d0:	4b02      	ldr	r3, [pc, #8]	; (8dc <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
     8d2:	681a      	ldr	r2, [r3, #0]
     8d4:	6813      	ldr	r3, [r2, #0]
     8d6:	3301      	adds	r3, #1
     8d8:	6013      	str	r3, [r2, #0]
     8da:	4770      	bx	lr
     8dc:	20000940 	.word	0x20000940

000008e0 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
     8e0:	4b02      	ldr	r3, [pc, #8]	; (8ec <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
     8e2:	681b      	ldr	r3, [r3, #0]
     8e4:	2200      	movs	r2, #0
     8e6:	711a      	strb	r2, [r3, #4]
     8e8:	4770      	bx	lr
     8ea:	bf00      	nop
     8ec:	20000940 	.word	0x20000940

000008f0 <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
     8f0:	b538      	push	{r3, r4, r5, lr}
     8f2:	4604      	mov	r4, r0
{
	ticks=0;
     8f4:	2300      	movs	r3, #0
     8f6:	6003      	str	r3, [r0, #0]
	interfaceTimer.Stop();
     8f8:	4d04      	ldr	r5, [pc, #16]	; (90c <_ZN16Maintenance_ToolD1Ev+0x1c>)
     8fa:	4628      	mov	r0, r5
     8fc:	4b04      	ldr	r3, [pc, #16]	; (910 <_ZN16Maintenance_ToolD1Ev+0x20>)
     8fe:	4798      	blx	r3
	interfaceTimer.Remove_task();
     900:	4628      	mov	r0, r5
     902:	4b04      	ldr	r3, [pc, #16]	; (914 <_ZN16Maintenance_ToolD1Ev+0x24>)
     904:	4798      	blx	r3
	
} //~Maintenance_Tool
     906:	4620      	mov	r0, r4
     908:	bd38      	pop	{r3, r4, r5, pc}
     90a:	bf00      	nop
     90c:	20001430 	.word	0x20001430
     910:	0000f841 	.word	0x0000f841
     914:	0000f959 	.word	0x0000f959

00000918 <_ZN16Maintenance_ToolC1Ev>:
Maintenance_Tool::Maintenance_Tool()
     918:	b470      	push	{r4, r5, r6}
    kGAINCommandSetNSDData,             //!< Editing NSD data
    kGAINCommandSetNSDDataBlock,        //!< Editing NSD data in data blocks (see NSD communication: Data blockes are tranmitted to GNC)
    kGAINCommandSetView,                 //!< Enables simplified view or standard view (only 932/933)
	kGAINNumberOfCommands
	};
 struct __attribute__((__packed__)) HVACMessageHeader
     91a:	2200      	movs	r2, #0
     91c:	2664      	movs	r6, #100	; 0x64
     91e:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
     922:	2563      	movs	r5, #99	; 0x63
     924:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
     928:	2462      	movs	r4, #98	; 0x62
     92a:	f880 4047 	strb.w	r4, [r0, #71]	; 0x47
     92e:	2161      	movs	r1, #97	; 0x61
     930:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
     934:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
     938:	f880 609c 	strb.w	r6, [r0, #156]	; 0x9c
     93c:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
     940:	f880 409e 	strb.w	r4, [r0, #158]	; 0x9e
     944:	f880 109f 	strb.w	r1, [r0, #159]	; 0x9f
     948:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
	ptrMaintenanceTool=this;
     94c:	4904      	ldr	r1, [pc, #16]	; (960 <_ZN16Maintenance_ToolC1Ev+0x48>)
     94e:	6008      	str	r0, [r1, #0]
	maintenanceIsConnected = false;
     950:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
	nextMaintenanceSyncTime = 0;
     954:	64c2      	str	r2, [r0, #76]	; 0x4c
	nextMaintenanceUsageTimerSyncTime = 0;
     956:	6502      	str	r2, [r0, #80]	; 0x50
	ticks=0;
     958:	6002      	str	r2, [r0, #0]
} //Maintenance_Tool
     95a:	bc70      	pop	{r4, r5, r6}
     95c:	4770      	bx	lr
     95e:	bf00      	nop
     960:	20000940 	.word	0x20000940

00000964 <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
     964:	b508      	push	{r3, lr}
		maintenanceIsConnected = isConnected;
     966:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
		if (isConnected)
     96a:	b919      	cbnz	r1, 974 <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
     96c:	4805      	ldr	r0, [pc, #20]	; (984 <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     96e:	4b06      	ldr	r3, [pc, #24]	; (988 <_ZN16Maintenance_Tool12setConnectedEb+0x24>)
     970:	4798      	blx	r3
     972:	bd08      	pop	{r3, pc}
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
     974:	f64e 2260 	movw	r2, #60000	; 0xea60
     978:	4904      	ldr	r1, [pc, #16]	; (98c <_ZN16Maintenance_Tool12setConnectedEb+0x28>)
     97a:	4802      	ldr	r0, [pc, #8]	; (984 <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     97c:	4b04      	ldr	r3, [pc, #16]	; (990 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
     97e:	4798      	blx	r3
     980:	bd08      	pop	{r3, pc}
     982:	bf00      	nop
     984:	20001430 	.word	0x20001430
     988:	0000f841 	.word	0x0000f841
     98c:	000008e1 	.word	0x000008e1
     990:	0000f921 	.word	0x0000f921

00000994 <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
     994:	b510      	push	{r4, lr}
     996:	4604      	mov	r4, r0
	result=false;
     998:	2300      	movs	r3, #0
     99a:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	magic=0;
     99e:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
	if (gotAccess==true)
     9a2:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
     9a6:	b12b      	cbz	r3, 9b4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
     9a8:	2301      	movs	r3, #1
     9aa:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	return	result;
     9ae:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
}
     9b2:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
     9b4:	4b13      	ldr	r3, [pc, #76]	; (a04 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x70>)
     9b6:	7d5b      	ldrb	r3, [r3, #21]
     9b8:	b18b      	cbz	r3, 9de <_ZN16Maintenance_Tool14IsAppConnectedEv+0x4a>
     9ba:	1d43      	adds	r3, r0, #5
     9bc:	3009      	adds	r0, #9
     9be:	2200      	movs	r2, #0
				magic|= localBuffer[i];
     9c0:	f813 1b01 	ldrb.w	r1, [r3], #1
     9c4:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
			for (int i = 0; i < 4; i++)
     9c8:	4283      	cmp	r3, r0
     9ca:	d1f9      	bne.n	9c0 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2c>
     9cc:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
     9d0:	4b0d      	ldr	r3, [pc, #52]	; (a08 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x74>)
     9d2:	ea82 0103 	eor.w	r1, r2, r3
     9d6:	f8c4 111c 	str.w	r1, [r4, #284]	; 0x11c
			if (xorResult==0)
     9da:	429a      	cmp	r2, r3
     9dc:	d005      	beq.n	9ea <_ZN16Maintenance_Tool14IsAppConnectedEv+0x56>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     9de:	2240      	movs	r2, #64	; 0x40
     9e0:	1d61      	adds	r1, r4, #5
     9e2:	4808      	ldr	r0, [pc, #32]	; (a04 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x70>)
     9e4:	4b09      	ldr	r3, [pc, #36]	; (a0c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
     9e6:	4798      	blx	r3
     9e8:	e7e1      	b.n	9ae <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
     9ea:	2101      	movs	r1, #1
     9ec:	f884 1101 	strb.w	r1, [r4, #257]	; 0x101
				result=true;
     9f0:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
				is_MTPC_Beaming=true;
     9f4:	7121      	strb	r1, [r4, #4]
				setConnected(true);
     9f6:	4620      	mov	r0, r4
     9f8:	4b05      	ldr	r3, [pc, #20]	; (a10 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     9fa:	4798      	blx	r3
				return	result;
     9fc:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
     a00:	bd10      	pop	{r4, pc}
     a02:	bf00      	nop
     a04:	20001358 	.word	0x20001358
     a08:	61626364 	.word	0x61626364
     a0c:	0000f1fd 	.word	0x0000f1fd
     a10:	00000965 	.word	0x00000965

00000a14 <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
     a14:	1d02      	adds	r2, r0, #4
     a16:	2301      	movs	r3, #1
	uint8_t i;
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
     a18:	2100      	movs	r1, #0
     a1a:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
     a1e:	b2d8      	uxtb	r0, r3
     a20:	3301      	adds	r3, #1
     a22:	2b41      	cmp	r3, #65	; 0x41
     a24:	d1f9      	bne.n	a1a <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x6>
	}
	return	i;
}
     a26:	4770      	bx	lr

00000a28 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( HVACMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
     a28:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
     a2c:	b92b      	cbnz	r3, a3a <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader+0x12>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
     a2e:	64c3      	str	r3, [r0, #76]	; 0x4c
		maintenanceIsConnected = true;
     a30:	2301      	movs	r3, #1
     a32:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
		bSendNotifications = true;
     a36:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
     a3a:	f890 0100 	ldrb.w	r0, [r0, #256]	; 0x100
     a3e:	4770      	bx	lr

00000a40 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader>:

	uint32_t	w,r;
	
	
	bool	result(header.command == kGAINCommandWriteParameters);
	if (result){
     a40:	790b      	ldrb	r3, [r1, #4]
     a42:	2b47      	cmp	r3, #71	; 0x47
     a44:	d001      	beq.n	a4a <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0xa>
	bool	result(header.command == kGAINCommandWriteParameters);
     a46:	2000      	movs	r0, #0
     a48:	4770      	bx	lr
bool Maintenance_Tool::handleGAINCommandWriteParameters(HVACMessageHeader& header)	{
     a4a:	b570      	push	{r4, r5, r6, lr}
     a4c:	4604      	mov	r4, r0
		int n=sizeof(HVACMessageHeader)+1;
		flash.eraseFlash((uint32_t)&flashLayout->parameters,sizeof(UserParameters));
     a4e:	4e0c      	ldr	r6, [pc, #48]	; (a80 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x40>)
     a50:	6831      	ldr	r1, [r6, #0]
     a52:	4d0c      	ldr	r5, [pc, #48]	; (a84 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x44>)
     a54:	2201      	movs	r2, #1
     a56:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
     a5a:	4628      	mov	r0, r5
     a5c:	4b0a      	ldr	r3, [pc, #40]	; (a88 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x48>)
     a5e:	4798      	blx	r3
			
		memcpy((uint8_t*)&parameters,&localBuffer[n+1],sizeof(UserParameters));
     a60:	7b63      	ldrb	r3, [r4, #13]
     a62:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
		//uint32_t add=(uint32_t)&framMemory->parameters;
		uint32_t add=(uint32_t)&flashLayout->parameters;
     a66:	6832      	ldr	r2, [r6, #0]
		r=flash.WriteAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(UserParameters));
     a68:	2301      	movs	r3, #1
     a6a:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
     a6e:	f504 7184 	add.w	r1, r4, #264	; 0x108
     a72:	4628      	mov	r0, r5
     a74:	4c05      	ldr	r4, [pc, #20]	; (a8c <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x4c>)
     a76:	47a0      	blx	r4
		//	r=fram.WriteAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(UserParameters));
			result=(bool)(r==0);
     a78:	fab0 f080 	clz	r0, r0
     a7c:	0940      	lsrs	r0, r0, #5
     a7e:	bd70      	pop	{r4, r5, r6, pc}
     a80:	2000112c 	.word	0x2000112c
     a84:	20001130 	.word	0x20001130
     a88:	0000e801 	.word	0x0000e801
     a8c:	0000eaa5 	.word	0x0000eaa5

00000a90 <_ZN16Maintenance_Tool17CommandSetHeatersEv>:
	}
	
	return result;
}

bool Maintenance_Tool::CommandSetHeaters(void)	{
     a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	bool powerOn;
	
		memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     a94:	4603      	mov	r3, r0
     a96:	f853 1f05 	ldr.w	r1, [r3, #5]!
     a9a:	f8c0 1045 	str.w	r1, [r0, #69]	; 0x45
     a9e:	8899      	ldrh	r1, [r3, #4]
     aa0:	799b      	ldrb	r3, [r3, #6]
     aa2:	f8a0 1049 	strh.w	r1, [r0, #73]	; 0x49
     aa6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
		
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandSetHeaters);
     aaa:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
     aae:	2b49      	cmp	r3, #73	; 0x49
     ab0:	bf0c      	ite	eq
     ab2:	f04f 0801 	moveq.w	r8, #1
     ab6:	f04f 0800 	movne.w	r8, #0
	if (result){
     aba:	d002      	beq.n	ac2 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x32>
			}
		}
	}
	
	return result;
}
     abc:	4640      	mov	r0, r8
     abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		lastEnableHeaters=enableHeaters;
     ac2:	f890 2125 	ldrb.w	r2, [r0, #293]	; 0x125
     ac6:	f880 2124 	strb.w	r2, [r0, #292]	; 0x124
		enableHeaters=singleTaskMessage.description;
     aca:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
     ace:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
		if (enableHeaters!=lastEnableHeaters)
     ad2:	429a      	cmp	r2, r3
     ad4:	d0f2      	beq.n	abc <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x2c>
     ad6:	4605      	mov	r5, r0
     ad8:	2400      	movs	r4, #0
				heater.SetRelay(i,powerOn);
     ada:	4f07      	ldr	r7, [pc, #28]	; (af8 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x68>)
     adc:	4e07      	ldr	r6, [pc, #28]	; (afc <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x6c>)
				powerOn=enableHeaters&(0x01<<i);
     ade:	f895 2125 	ldrb.w	r2, [r5, #293]	; 0x125
     ae2:	4122      	asrs	r2, r4
				heater.SetRelay(i,powerOn);
     ae4:	f002 0201 	and.w	r2, r2, #1
     ae8:	b2e1      	uxtb	r1, r4
     aea:	4638      	mov	r0, r7
     aec:	47b0      	blx	r6
     aee:	3401      	adds	r4, #1
			for (uint8_t i = 0; i < 4; i++)
     af0:	2c04      	cmp	r4, #4
     af2:	d1f4      	bne.n	ade <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x4e>
     af4:	e7e2      	b.n	abc <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x2c>
     af6:	bf00      	nop
     af8:	200014e4 	.word	0x200014e4
     afc:	0000fce5 	.word	0x0000fce5

00000b00 <_ZN16Maintenance_Tool20CommandSetEnableFansEv>:

bool Maintenance_Tool::CommandSetEnableFans(void){
     b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     b02:	4603      	mov	r3, r0
     b04:	f853 1f05 	ldr.w	r1, [r3, #5]!
     b08:	f8c0 1045 	str.w	r1, [r0, #69]	; 0x45
     b0c:	8899      	ldrh	r1, [r3, #4]
     b0e:	799b      	ldrb	r3, [r3, #6]
     b10:	f8a0 1049 	strh.w	r1, [r0, #73]	; 0x49
     b14:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandSetEnableFans);
     b18:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
     b1c:	2b4b      	cmp	r3, #75	; 0x4b
     b1e:	bf0c      	ite	eq
     b20:	2401      	moveq	r4, #1
     b22:	2400      	movne	r4, #0
	if (result){
     b24:	d001      	beq.n	b2a <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x2a>
	}else{

	}
	
	return result;
}
     b26:	4620      	mov	r0, r4
     b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data=singleTaskMessage.description;
     b2a:	f890 504b 	ldrb.w	r5, [r0, #75]	; 0x4b
		if ((data&(0x07))>3)
     b2e:	f005 0307 	and.w	r3, r5, #7
     b32:	2b03      	cmp	r3, #3
     b34:	dc0a      	bgt.n	b4c <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x4c>
			fans.evaporator[0]->SetEnable(data&0x01);
     b36:	4f09      	ldr	r7, [pc, #36]	; (b5c <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x5c>)
     b38:	f005 0101 	and.w	r1, r5, #1
     b3c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
     b3e:	4e08      	ldr	r6, [pc, #32]	; (b60 <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x60>)
     b40:	47b0      	blx	r6
			fans.evaporator[1]->SetEnable(data&0x02);
     b42:	f3c5 0140 	ubfx	r1, r5, #1, #1
     b46:	6e38      	ldr	r0, [r7, #96]	; 0x60
     b48:	47b0      	blx	r6
     b4a:	e7ec      	b.n	b26 <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x26>
			fans.condesator->SetEnable(data&0x04);
     b4c:	f3c5 0180 	ubfx	r1, r5, #2, #1
     b50:	4b02      	ldr	r3, [pc, #8]	; (b5c <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x5c>)
     b52:	6e58      	ldr	r0, [r3, #100]	; 0x64
     b54:	4b03      	ldr	r3, [pc, #12]	; (b64 <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x64>)
     b56:	4798      	blx	r3
     b58:	e7e5      	b.n	b26 <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x26>
     b5a:	bf00      	nop
     b5c:	20000788 	.word	0x20000788
     b60:	0000071d 	.word	0x0000071d
     b64:	00000359 	.word	0x00000359

00000b68 <_ZN16Maintenance_Tool17CommandSetPWMFansEv>:

bool Maintenance_Tool::CommandSetPWMFans(void){
     b68:	b510      	push	{r4, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     b6a:	4603      	mov	r3, r0
     b6c:	f853 1f05 	ldr.w	r1, [r3, #5]!
     b70:	f8c0 1045 	str.w	r1, [r0, #69]	; 0x45
     b74:	8899      	ldrh	r1, [r3, #4]
     b76:	799b      	ldrb	r3, [r3, #6]
     b78:	f8a0 1049 	strh.w	r1, [r0, #73]	; 0x49
     b7c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandSetPWMFans);
     b80:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
     b84:	2b4c      	cmp	r3, #76	; 0x4c
     b86:	bf0c      	ite	eq
     b88:	2401      	moveq	r4, #1
     b8a:	2400      	movne	r4, #0
	if (result){
     b8c:	d001      	beq.n	b92 <_ZN16Maintenance_Tool17CommandSetPWMFansEv+0x2a>
	}else{

	}
	
	return result;
}
     b8e:	4620      	mov	r0, r4
     b90:	bd10      	pop	{r4, pc}
			fans.evaporator[0]->SetPWM(data);
     b92:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
     b96:	4b02      	ldr	r3, [pc, #8]	; (ba0 <_ZN16Maintenance_Tool17CommandSetPWMFansEv+0x38>)
     b98:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
     b9a:	4b02      	ldr	r3, [pc, #8]	; (ba4 <_ZN16Maintenance_Tool17CommandSetPWMFansEv+0x3c>)
     b9c:	4798      	blx	r3
     b9e:	e7f6      	b.n	b8e <_ZN16Maintenance_Tool17CommandSetPWMFansEv+0x26>
     ba0:	20000788 	.word	0x20000788
     ba4:	0000075d 	.word	0x0000075d

00000ba8 <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
     ba8:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
     baa:	0855      	lsrs	r5, r2, #1
     bac:	d007      	beq.n	bbe <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
     bae:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
     bb0:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
     bb4:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
     bb6:	3401      	adds	r4, #1
     bb8:	b2a4      	uxth	r4, r4
     bba:	42ac      	cmp	r4, r5
     bbc:	dbf8      	blt.n	bb0 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
     bbe:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
     bc2:	bf1d      	ittte	ne
     bc4:	189b      	addne	r3, r3, r2
     bc6:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
     bca:	4048      	eorne	r0, r1
     bcc:	4608      	moveq	r0, r1

	return checksum;
	}
     bce:	bc30      	pop	{r4, r5}
     bd0:	4770      	bx	lr
	...

00000bd4 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader>:
	{
     bd4:	b538      	push	{r3, r4, r5, lr}
     bd6:	4604      	mov	r4, r0
	checksum=0;
     bd8:	2500      	movs	r5, #0
     bda:	f8a0 5104 	strh.w	r5, [r0, #260]	; 0x104
	checksum = calculateChecksum(0, sizeof(header), &header);
     bde:	460b      	mov	r3, r1
     be0:	2206      	movs	r2, #6
     be2:	4629      	mov	r1, r5
     be4:	4d02      	ldr	r5, [pc, #8]	; (bf0 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader+0x1c>)
     be6:	47a8      	blx	r5
     be8:	f8a4 0104 	strh.w	r0, [r4, #260]	; 0x104
	}
     bec:	bd38      	pop	{r3, r4, r5, pc}
     bee:	bf00      	nop
     bf0:	00000ba9 	.word	0x00000ba9

00000bf4 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
{
	uint8_t i;
	uint32_t add=0x41002018;
	for (i = 0; i < 4; i++)
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
     bf4:	4b06      	ldr	r3, [pc, #24]	; (c10 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x1c>)
     bf6:	681b      	ldr	r3, [r3, #0]
     bf8:	600b      	str	r3, [r1, #0]
     bfa:	4b06      	ldr	r3, [pc, #24]	; (c14 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x20>)
     bfc:	681b      	ldr	r3, [r3, #0]
     bfe:	604b      	str	r3, [r1, #4]
     c00:	4b05      	ldr	r3, [pc, #20]	; (c18 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x24>)
     c02:	681b      	ldr	r3, [r3, #0]
     c04:	608b      	str	r3, [r1, #8]
     c06:	4b05      	ldr	r3, [pc, #20]	; (c1c <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x28>)
     c08:	681b      	ldr	r3, [r3, #0]
     c0a:	60cb      	str	r3, [r1, #12]
     c0c:	4770      	bx	lr
     c0e:	bf00      	nop
     c10:	41002018 	.word	0x41002018
     c14:	4100201c 	.word	0x4100201c
     c18:	41002020 	.word	0x41002020
     c1c:	41002024 	.word	0x41002024

00000c20 <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
     c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c22:	4604      	mov	r4, r0
	ticks=0;
     c24:	2600      	movs	r6, #0
     c26:	6006      	str	r6, [r0, #0]
	interfaceTimer.Init();
     c28:	4d12      	ldr	r5, [pc, #72]	; (c74 <_ZN16Maintenance_Tool4InitEv+0x54>)
     c2a:	4628      	mov	r0, r5
     c2c:	4b12      	ldr	r3, [pc, #72]	; (c78 <_ZN16Maintenance_Tool4InitEv+0x58>)
     c2e:	4798      	blx	r3
	interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
     c30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     c34:	4911      	ldr	r1, [pc, #68]	; (c7c <_ZN16Maintenance_Tool4InitEv+0x5c>)
     c36:	4628      	mov	r0, r5
     c38:	4b11      	ldr	r3, [pc, #68]	; (c80 <_ZN16Maintenance_Tool4InitEv+0x60>)
     c3a:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
     c3c:	f504 7585 	add.w	r5, r4, #266	; 0x10a
     c40:	4629      	mov	r1, r5
     c42:	4620      	mov	r0, r4
     c44:	4b0f      	ldr	r3, [pc, #60]	; (c84 <_ZN16Maintenance_Tool4InitEv+0x64>)
     c46:	4798      	blx	r3
	memcpy(localBuffer,cpuSerial,16);
     c48:	f8d4 710a 	ldr.w	r7, [r4, #266]	; 0x10a
     c4c:	f8d4 010e 	ldr.w	r0, [r4, #270]	; 0x10e
     c50:	f8d4 1112 	ldr.w	r1, [r4, #274]	; 0x112
     c54:	f8d4 2116 	ldr.w	r2, [r4, #278]	; 0x116
     c58:	f8c4 7005 	str.w	r7, [r4, #5]
     c5c:	f8c4 0009 	str.w	r0, [r4, #9]
     c60:	f8c4 100d 	str.w	r1, [r4, #13]
     c64:	f8c4 2011 	str.w	r2, [r4, #17]
	gotAccess=false;
     c68:	f884 6101 	strb.w	r6, [r4, #257]	; 0x101
}
     c6c:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
     c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c72:	bf00      	nop
     c74:	20001430 	.word	0x20001430
     c78:	0000f7e5 	.word	0x0000f7e5
     c7c:	000008d1 	.word	0x000008d1
     c80:	0000f8d1 	.word	0x0000f8d1
     c84:	00000bf5 	.word	0x00000bf5

00000c88 <_GLOBAL__sub_I_ptrMaintenanceTool>:
	}

}
     c88:	b510      	push	{r4, lr}
     c8a:	4c05      	ldr	r4, [pc, #20]	; (ca0 <_GLOBAL__sub_I_ptrMaintenanceTool+0x18>)
     c8c:	4620      	mov	r0, r4
     c8e:	4b05      	ldr	r3, [pc, #20]	; (ca4 <_GLOBAL__sub_I_ptrMaintenanceTool+0x1c>)
     c90:	4798      	blx	r3
     c92:	4a05      	ldr	r2, [pc, #20]	; (ca8 <_GLOBAL__sub_I_ptrMaintenanceTool+0x20>)
     c94:	4905      	ldr	r1, [pc, #20]	; (cac <_GLOBAL__sub_I_ptrMaintenanceTool+0x24>)
     c96:	4620      	mov	r0, r4
     c98:	4b05      	ldr	r3, [pc, #20]	; (cb0 <_GLOBAL__sub_I_ptrMaintenanceTool+0x28>)
     c9a:	4798      	blx	r3
     c9c:	bd10      	pop	{r4, pc}
     c9e:	bf00      	nop
     ca0:	20000944 	.word	0x20000944
     ca4:	00000919 	.word	0x00000919
     ca8:	20000000 	.word	0x20000000
     cac:	000008f1 	.word	0x000008f1
     cb0:	00010009 	.word	0x00010009

00000cb4 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb>:
	{
     cb4:	b538      	push	{r3, r4, r5, lr}
     cb6:	4605      	mov	r5, r0
     cb8:	460c      	mov	r4, r1
	checksum = calculateChecksum(header);
     cba:	4b05      	ldr	r3, [pc, #20]	; (cd0 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x1c>)
     cbc:	4798      	blx	r3
     cbe:	f8a5 0104 	strh.w	r0, [r5, #260]	; 0x104
	usb.writeData(&header, sizeof(header));
     cc2:	2206      	movs	r2, #6
     cc4:	4621      	mov	r1, r4
     cc6:	4803      	ldr	r0, [pc, #12]	; (cd4 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x20>)
     cc8:	4b03      	ldr	r3, [pc, #12]	; (cd8 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x24>)
     cca:	4798      	blx	r3
     ccc:	bd38      	pop	{r3, r4, r5, pc}
     cce:	bf00      	nop
     cd0:	00000bd5 	.word	0x00000bd5
     cd4:	20001358 	.word	0x20001358
     cd8:	0000f2e9 	.word	0x0000f2e9

00000cdc <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader>:
bool Maintenance_Tool::handleGAINCommandReadParameters(HVACMessageHeader& header){
     cdc:	b538      	push	{r3, r4, r5, lr}
		if (result){
     cde:	790b      	ldrb	r3, [r1, #4]
     ce0:	2b48      	cmp	r3, #72	; 0x48
     ce2:	d001      	beq.n	ce8 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0xc>
	 	bool	result(header.command == kGAINCommandReadParameters);
     ce4:	2000      	movs	r0, #0
     ce6:	bd38      	pop	{r3, r4, r5, pc}
     ce8:	4604      	mov	r4, r0
			uint32_t add=(uint32_t)&flashLayout->parameters;
     cea:	4b0d      	ldr	r3, [pc, #52]	; (d20 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x44>)
     cec:	681a      	ldr	r2, [r3, #0]
			r=flash.ReadAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(UserParameters));
     cee:	2301      	movs	r3, #1
     cf0:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
     cf4:	f500 7184 	add.w	r1, r0, #264	; 0x108
     cf8:	480a      	ldr	r0, [pc, #40]	; (d24 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x48>)
     cfa:	4d0b      	ldr	r5, [pc, #44]	; (d28 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x4c>)
     cfc:	47a8      	blx	r5
			 if (r>0)
     cfe:	b908      	cbnz	r0, d04 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x28>
	 	bool	result(header.command == kGAINCommandReadParameters);
     d00:	2001      	movs	r0, #1
}
     d02:	bd38      	pop	{r3, r4, r5, pc}
				memcpy((uint8_t*)&localBuffer[n+1],(void*)&parameters,sizeof(UserParameters));
     d04:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
     d08:	7363      	strb	r3, [r4, #13]
				delay_us(1);
     d0a:	2001      	movs	r0, #1
     d0c:	4b07      	ldr	r3, [pc, #28]	; (d2c <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x50>)
     d0e:	4798      	blx	r3
				 usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     d10:	2240      	movs	r2, #64	; 0x40
     d12:	1d61      	adds	r1, r4, #5
     d14:	4806      	ldr	r0, [pc, #24]	; (d30 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x54>)
     d16:	4b07      	ldr	r3, [pc, #28]	; (d34 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x58>)
     d18:	4798      	blx	r3
				 result=w>0;
     d1a:	2000      	movs	r0, #0
     d1c:	bd38      	pop	{r3, r4, r5, pc}
     d1e:	bf00      	nop
     d20:	2000112c 	.word	0x2000112c
     d24:	20001130 	.word	0x20001130
     d28:	0000eb85 	.word	0x0000eb85
     d2c:	00002741 	.word	0x00002741
     d30:	20001358 	.word	0x20001358
     d34:	0000f381 	.word	0x0000f381

00000d38 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv>:
bool Maintenance_Tool::CommandReadHeaterStatus(){
     d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool	result(header.task == kHVACCommandReadHeaterStatus);
     d3a:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
     d3e:	2b4a      	cmp	r3, #74	; 0x4a
     d40:	bf0c      	ite	eq
     d42:	2501      	moveq	r5, #1
     d44:	2500      	movne	r5, #0
	if (result){
     d46:	d001      	beq.n	d4c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x14>
}
     d48:	4628      	mov	r0, r5
     d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d4c:	4604      	mov	r4, r0
			singleTask.description=heater.ReadStatus();
     d4e:	4f10      	ldr	r7, [pc, #64]	; (d90 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x58>)
     d50:	4638      	mov	r0, r7
     d52:	4b10      	ldr	r3, [pc, #64]	; (d94 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x5c>)
     d54:	4798      	blx	r3
     d56:	4606      	mov	r6, r0
			memcpy(localBuffer,(void*)&singleTask,n);
     d58:	4b0f      	ldr	r3, [pc, #60]	; (d98 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x60>)
     d5a:	f8c4 3005 	str.w	r3, [r4, #5]
     d5e:	2300      	movs	r3, #0
     d60:	7263      	strb	r3, [r4, #9]
     d62:	234a      	movs	r3, #74	; 0x4a
     d64:	72a3      	strb	r3, [r4, #10]
     d66:	72e0      	strb	r0, [r4, #11]
			if (!heater.statusChanged)
     d68:	787b      	ldrb	r3, [r7, #1]
     d6a:	b15b      	cbz	r3, d84 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x4c>
			singleTaskMessage=singleTask;
     d6c:	4b0a      	ldr	r3, [pc, #40]	; (d98 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x60>)
     d6e:	f8c4 3045 	str.w	r3, [r4, #69]	; 0x45
     d72:	2300      	movs	r3, #0
     d74:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
     d78:	234a      	movs	r3, #74	; 0x4a
     d7a:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
     d7e:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
     d82:	e7e1      	b.n	d48 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x10>
				usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     d84:	2240      	movs	r2, #64	; 0x40
     d86:	1d61      	adds	r1, r4, #5
     d88:	4804      	ldr	r0, [pc, #16]	; (d9c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x64>)
     d8a:	4b05      	ldr	r3, [pc, #20]	; (da0 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x68>)
     d8c:	4798      	blx	r3
     d8e:	e7ed      	b.n	d6c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x34>
     d90:	200014e4 	.word	0x200014e4
     d94:	0000fc79 	.word	0x0000fc79
     d98:	61626364 	.word	0x61626364
     d9c:	20001358 	.word	0x20001358
     da0:	0000f381 	.word	0x0000f381

00000da4 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv>:
bool Maintenance_Tool::CommandReadTemmperatures(){
     da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool	result(header.task == kHVACCommandReadTemperatures);
     da6:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
     daa:	2b4d      	cmp	r3, #77	; 0x4d
     dac:	bf0c      	ite	eq
     dae:	2501      	moveq	r5, #1
     db0:	2500      	movne	r5, #0
	if (result){
     db2:	d001      	beq.n	db8 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x14>
}
     db4:	4628      	mov	r0, r5
     db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		singleTask.description=temperatures.faultData;
     db8:	4f17      	ldr	r7, [pc, #92]	; (e18 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x74>)
     dba:	f897 609c 	ldrb.w	r6, [r7, #156]	; 0x9c
		memcpy(localBuffer,(void*)&singleTask,n);
     dbe:	4b17      	ldr	r3, [pc, #92]	; (e1c <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x78>)
     dc0:	f8c0 3005 	str.w	r3, [r0, #5]
     dc4:	2300      	movs	r3, #0
     dc6:	7243      	strb	r3, [r0, #9]
     dc8:	234d      	movs	r3, #77	; 0x4d
     dca:	7283      	strb	r3, [r0, #10]
     dcc:	72c6      	strb	r6, [r0, #11]
     dce:	3768      	adds	r7, #104	; 0x68
     dd0:	f100 030c 	add.w	r3, r0, #12
     dd4:	f100 0e3c 	add.w	lr, r0, #60	; 0x3c
     dd8:	f103 0410 	add.w	r4, r3, #16
bool Maintenance_Tool::CommandReadTemmperatures(){
     ddc:	463a      	mov	r2, r7
				memcpy(&localBuffer[n+4*((4*i)+j)],(void*)&temperatures.values[i][j],4);
     dde:	f852 1f04 	ldr.w	r1, [r2, #4]!
     de2:	f843 1b04 	str.w	r1, [r3], #4
			for (int j = 0; j < 4; j++)
     de6:	42a3      	cmp	r3, r4
     de8:	d1f9      	bne.n	dde <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x3a>
     dea:	3710      	adds	r7, #16
     dec:	4623      	mov	r3, r4
		for (int i = 0; i < 3; i++)
     dee:	45a6      	cmp	lr, r4
     df0:	d1f2      	bne.n	dd8 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x34>
     df2:	4604      	mov	r4, r0
		usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     df4:	2240      	movs	r2, #64	; 0x40
     df6:	1d41      	adds	r1, r0, #5
     df8:	4809      	ldr	r0, [pc, #36]	; (e20 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
     dfa:	4b0a      	ldr	r3, [pc, #40]	; (e24 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
     dfc:	4798      	blx	r3
		singleTaskMessage=singleTask;
     dfe:	4b07      	ldr	r3, [pc, #28]	; (e1c <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x78>)
     e00:	f8c4 3045 	str.w	r3, [r4, #69]	; 0x45
     e04:	2300      	movs	r3, #0
     e06:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
     e0a:	234d      	movs	r3, #77	; 0x4d
     e0c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
     e10:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
     e14:	e7ce      	b.n	db4 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x10>
     e16:	bf00      	nop
     e18:	20001518 	.word	0x20001518
     e1c:	61626364 	.word	0x61626364
     e20:	20001358 	.word	0x20001358
     e24:	0000f381 	.word	0x0000f381

00000e28 <_ZN16Maintenance_Tool14handleHVACTaskEv>:
bool Maintenance_Tool::handleHVACTask(void){
     e28:	b570      	push	{r4, r5, r6, lr}
     e2a:	4604      	mov	r4, r0
	memcpy(&header,localBuffer,sizeof(HVACMessageHeader));
     e2c:	f100 059c 	add.w	r5, r0, #156	; 0x9c
     e30:	4601      	mov	r1, r0
     e32:	f851 3f05 	ldr.w	r3, [r1, #5]!
     e36:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
     e3a:	888b      	ldrh	r3, [r1, #4]
     e3c:	80ab      	strh	r3, [r5, #4]
	&& (header.task<kGAINNumberOfCommands))
     e3e:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
     e42:	3b41      	subs	r3, #65	; 0x41
	if ((header.task>=kGAINCommandConnect)
     e44:	b2db      	uxtb	r3, r3
     e46:	2b12      	cmp	r3, #18
     e48:	d815      	bhi.n	e76 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x4e>
		gotTask=true;
     e4a:	2301      	movs	r3, #1
     e4c:	f880 3103 	strb.w	r3, [r0, #259]	; 0x103
		result=gotTask;
     e50:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
		switch (header.task)
     e54:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
     e58:	3b41      	subs	r3, #65	; 0x41
     e5a:	2b12      	cmp	r3, #18
     e5c:	d85e      	bhi.n	f1c <_ZN16Maintenance_Tool14handleHVACTaskEv+0xf4>
     e5e:	e8df f003 	tbb	[pc, r3]
     e62:	221b      	.short	0x221b
     e64:	18182818 	.word	0x18182818
     e68:	453f3831 	.word	0x453f3831
     e6c:	1857514b 	.word	0x1857514b
     e70:	5d5d1818 	.word	0x5d5d1818
     e74:	18          	.byte	0x18
     e75:	00          	.byte	0x00
		gotTask=false;
     e76:	2300      	movs	r3, #0
     e78:	f880 3103 	strb.w	r3, [r0, #259]	; 0x103
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
     e7c:	4e29      	ldr	r6, [pc, #164]	; (f24 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xfc>)
     e7e:	2240      	movs	r2, #64	; 0x40
     e80:	4630      	mov	r0, r6
     e82:	4b29      	ldr	r3, [pc, #164]	; (f28 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x100>)
     e84:	4798      	blx	r3
		result=usb.rxReady;
     e86:	7d73      	ldrb	r3, [r6, #21]
     e88:	b2db      	uxtb	r3, r3
     e8a:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
	if (result)
     e8e:	2b00      	cmp	r3, #0
     e90:	d1e0      	bne.n	e54 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x2c>
	}
     e92:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
     e96:	bd70      	pop	{r4, r5, r6, pc}
				result = handleGAINCommandConnect( header);
     e98:	4629      	mov	r1, r5
     e9a:	4620      	mov	r0, r4
     e9c:	4b23      	ldr	r3, [pc, #140]	; (f2c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x104>)
     e9e:	4798      	blx	r3
     ea0:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     ea4:	e7f5      	b.n	e92 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
	maintenanceIsConnected = false;
     ea6:	2300      	movs	r3, #0
     ea8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
	bSendNotifications = false;
     eac:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
				break;
     eb0:	e7ef      	b.n	e92 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
				notifyGAINCommandReceived( header, result);
     eb2:	2201      	movs	r2, #1
     eb4:	4629      	mov	r1, r5
     eb6:	4620      	mov	r0, r4
     eb8:	4b1d      	ldr	r3, [pc, #116]	; (f30 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x108>)
     eba:	4798      	blx	r3
				result = handleGAINCommandReset(header);
     ebc:	2301      	movs	r3, #1
     ebe:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
				break;
     ec2:	e7e6      	b.n	e92 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
				result = handleGAINCommandWriteParameters( header);
     ec4:	4629      	mov	r1, r5
     ec6:	4620      	mov	r0, r4
     ec8:	4b1a      	ldr	r3, [pc, #104]	; (f34 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x10c>)
     eca:	4798      	blx	r3
     ecc:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     ed0:	e7df      	b.n	e92 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
				result = handleGAINCommandReadParameters( header);
     ed2:	4629      	mov	r1, r5
     ed4:	4620      	mov	r0, r4
     ed6:	4b18      	ldr	r3, [pc, #96]	; (f38 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x110>)
     ed8:	4798      	blx	r3
     eda:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     ede:	e7d8      	b.n	e92 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
				result = CommandSetHeaters();
     ee0:	4620      	mov	r0, r4
     ee2:	4b16      	ldr	r3, [pc, #88]	; (f3c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x114>)
     ee4:	4798      	blx	r3
     ee6:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     eea:	e7d2      	b.n	e92 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
				result = CommandReadHeaterStatus();
     eec:	4620      	mov	r0, r4
     eee:	4b14      	ldr	r3, [pc, #80]	; (f40 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x118>)
     ef0:	4798      	blx	r3
     ef2:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     ef6:	e7cc      	b.n	e92 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
				result = CommandSetEnableFans();
     ef8:	4620      	mov	r0, r4
     efa:	4b12      	ldr	r3, [pc, #72]	; (f44 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x11c>)
     efc:	4798      	blx	r3
     efe:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     f02:	e7c6      	b.n	e92 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
				result = CommandSetPWMFans();
     f04:	4620      	mov	r0, r4
     f06:	4b10      	ldr	r3, [pc, #64]	; (f48 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x120>)
     f08:	4798      	blx	r3
     f0a:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     f0e:	e7c0      	b.n	e92 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
				result = CommandReadTemmperatures();
     f10:	4620      	mov	r0, r4
     f12:	4b0e      	ldr	r3, [pc, #56]	; (f4c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x124>)
     f14:	4798      	blx	r3
     f16:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     f1a:	e7ba      	b.n	e92 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
				result = false;
     f1c:	2300      	movs	r3, #0
     f1e:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
				break;
     f22:	e7b6      	b.n	e92 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6a>
     f24:	20001358 	.word	0x20001358
     f28:	0000f1fd 	.word	0x0000f1fd
     f2c:	00000a29 	.word	0x00000a29
     f30:	00000cb5 	.word	0x00000cb5
     f34:	00000a41 	.word	0x00000a41
     f38:	00000cdd 	.word	0x00000cdd
     f3c:	00000a91 	.word	0x00000a91
     f40:	00000d39 	.word	0x00000d39
     f44:	00000b01 	.word	0x00000b01
     f48:	00000b69 	.word	0x00000b69
     f4c:	00000da5 	.word	0x00000da5

00000f50 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
     f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f52:	4604      	mov	r4, r0
	result=false;
     f54:	2300      	movs	r3, #0
     f56:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	if (gotAccess)
     f5a:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
     f5e:	2b00      	cmp	r3, #0
     f60:	d04c      	beq.n	ffc <_ZN16Maintenance_Tool19handleCommunicationEv+0xac>
		if (usb.rxReady)
     f62:	4b28      	ldr	r3, [pc, #160]	; (1004 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
     f64:	7d5b      	ldrb	r3, [r3, #21]
     f66:	b953      	cbnz	r3, f7e <_ZN16Maintenance_Tool19handleCommunicationEv+0x2e>
			gotCommand=false;
     f68:	2300      	movs	r3, #0
     f6a:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     f6e:	2240      	movs	r2, #64	; 0x40
     f70:	1d61      	adds	r1, r4, #5
     f72:	4824      	ldr	r0, [pc, #144]	; (1004 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
     f74:	4b24      	ldr	r3, [pc, #144]	; (1008 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb8>)
     f76:	4798      	blx	r3
	}
     f78:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
     f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memcpy(&header,localBuffer,sizeMessage);
     f7e:	4603      	mov	r3, r0
     f80:	f853 2f05 	ldr.w	r2, [r3, #5]!
     f84:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
     f88:	889b      	ldrh	r3, [r3, #4]
     f8a:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
			switch (input){
     f8e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
     f92:	2b3d      	cmp	r3, #61	; 0x3d
     f94:	d017      	beq.n	fc6 <_ZN16Maintenance_Tool19handleCommunicationEv+0x76>
     f96:	2b3e      	cmp	r3, #62	; 0x3e
     f98:	d010      	beq.n	fbc <_ZN16Maintenance_Tool19handleCommunicationEv+0x6c>
     f9a:	2b3c      	cmp	r3, #60	; 0x3c
     f9c:	d003      	beq.n	fa6 <_ZN16Maintenance_Tool19handleCommunicationEv+0x56>
					gotCommand=false;
     f9e:	2300      	movs	r3, #0
     fa0:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
				break;
     fa4:	e006      	b.n	fb4 <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
					gotCommand=true;
     fa6:	2301      	movs	r3, #1
     fa8:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
					result = handleHVACTask();
     fac:	4b17      	ldr	r3, [pc, #92]	; (100c <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
     fae:	4798      	blx	r3
     fb0:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
			ClearLocalBuffer();
     fb4:	4620      	mov	r0, r4
     fb6:	4b16      	ldr	r3, [pc, #88]	; (1010 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
     fb8:	4798      	blx	r3
     fba:	e7d8      	b.n	f6e <_ZN16Maintenance_Tool19handleCommunicationEv+0x1e>
					result = handleHVACTask();
     fbc:	4b13      	ldr	r3, [pc, #76]	; (100c <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
     fbe:	4798      	blx	r3
     fc0:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     fc4:	e7f6      	b.n	fb4 <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
					is_MTPC_Beaming=true;
     fc6:	2501      	movs	r5, #1
     fc8:	7105      	strb	r5, [r0, #4]
					interfaceTimer.Stop();
     fca:	4e12      	ldr	r6, [pc, #72]	; (1014 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
     fcc:	4630      	mov	r0, r6
     fce:	4b12      	ldr	r3, [pc, #72]	; (1018 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc8>)
     fd0:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
     fd2:	4f12      	ldr	r7, [pc, #72]	; (101c <_ZN16Maintenance_Tool19handleCommunicationEv+0xcc>)
     fd4:	4639      	mov	r1, r7
     fd6:	4630      	mov	r0, r6
     fd8:	4b11      	ldr	r3, [pc, #68]	; (1020 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd0>)
     fda:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
     fdc:	f242 7210 	movw	r2, #10000	; 0x2710
     fe0:	4639      	mov	r1, r7
     fe2:	4630      	mov	r0, r6
     fe4:	4b0f      	ldr	r3, [pc, #60]	; (1024 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd4>)
     fe6:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
     fe8:	2300      	movs	r3, #0
     fea:	64e3      	str	r3, [r4, #76]	; 0x4c
					maintenanceIsConnected = true;
     fec:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
					bSendNotifications = true;
     ff0:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
					result=is_MTPC_Beaming;
     ff4:	7923      	ldrb	r3, [r4, #4]
     ff6:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
				break;
     ffa:	e7db      	b.n	fb4 <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
		gotCommand=false;
     ffc:	2300      	movs	r3, #0
     ffe:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
    1002:	e7b9      	b.n	f78 <_ZN16Maintenance_Tool19handleCommunicationEv+0x28>
    1004:	20001358 	.word	0x20001358
    1008:	0000f1fd 	.word	0x0000f1fd
    100c:	00000e29 	.word	0x00000e29
    1010:	00000a15 	.word	0x00000a15
    1014:	20001430 	.word	0x20001430
    1018:	0000f841 	.word	0x0000f841
    101c:	000008e1 	.word	0x000008e1
    1020:	0000f985 	.word	0x0000f985
    1024:	0000f921 	.word	0x0000f921

00001028 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    1028:	b580      	push	{r7, lr}
    102a:	af00      	add	r7, sp, #0
	system_init();
    102c:	4b03      	ldr	r3, [pc, #12]	; (103c <atmel_start_init+0x14>)
    102e:	4798      	blx	r3
	usb_init();
    1030:	4b03      	ldr	r3, [pc, #12]	; (1040 <atmel_start_init+0x18>)
    1032:	4798      	blx	r3
	spi_nor_flash_init();
    1034:	4b03      	ldr	r3, [pc, #12]	; (1044 <atmel_start_init+0x1c>)
    1036:	4798      	blx	r3
}
    1038:	bf00      	nop
    103a:	bd80      	pop	{r7, pc}
    103c:	000023b1 	.word	0x000023b1
    1040:	0000c145 	.word	0x0000c145
    1044:	0000c0d9 	.word	0x0000c0d9

00001048 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    1048:	b480      	push	{r7}
    104a:	b085      	sub	sp, #20
    104c:	af00      	add	r7, sp, #0
    104e:	60f8      	str	r0, [r7, #12]
    1050:	460b      	mov	r3, r1
    1052:	607a      	str	r2, [r7, #4]
    1054:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1056:	7afa      	ldrb	r2, [r7, #11]
    1058:	68fb      	ldr	r3, [r7, #12]
    105a:	3220      	adds	r2, #32
    105c:	6879      	ldr	r1, [r7, #4]
    105e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    1062:	bf00      	nop
    1064:	3714      	adds	r7, #20
    1066:	46bd      	mov	sp, r7
    1068:	f85d 7b04 	ldr.w	r7, [sp], #4
    106c:	4770      	bx	lr

0000106e <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    106e:	b480      	push	{r7}
    1070:	b083      	sub	sp, #12
    1072:	af00      	add	r7, sp, #0
    1074:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    1076:	687b      	ldr	r3, [r7, #4]
    1078:	691b      	ldr	r3, [r3, #16]
    107a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    107e:	687b      	ldr	r3, [r7, #4]
    1080:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1082:	bf00      	nop
    1084:	370c      	adds	r7, #12
    1086:	46bd      	mov	sp, r7
    1088:	f85d 7b04 	ldr.w	r7, [sp], #4
    108c:	4770      	bx	lr

0000108e <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    108e:	b480      	push	{r7}
    1090:	b083      	sub	sp, #12
    1092:	af00      	add	r7, sp, #0
    1094:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    1096:	687b      	ldr	r3, [r7, #4]
    1098:	691b      	ldr	r3, [r3, #16]
    109a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    109e:	687b      	ldr	r3, [r7, #4]
    10a0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10a2:	bf00      	nop
    10a4:	370c      	adds	r7, #12
    10a6:	46bd      	mov	sp, r7
    10a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    10ac:	4770      	bx	lr

000010ae <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    10ae:	b480      	push	{r7}
    10b0:	b083      	sub	sp, #12
    10b2:	af00      	add	r7, sp, #0
    10b4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    10b6:	687b      	ldr	r3, [r7, #4]
    10b8:	691b      	ldr	r3, [r3, #16]
    10ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    10be:	687b      	ldr	r3, [r7, #4]
    10c0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10c2:	bf00      	nop
    10c4:	370c      	adds	r7, #12
    10c6:	46bd      	mov	sp, r7
    10c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    10cc:	4770      	bx	lr

000010ce <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    10ce:	b480      	push	{r7}
    10d0:	b083      	sub	sp, #12
    10d2:	af00      	add	r7, sp, #0
    10d4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    10d6:	687b      	ldr	r3, [r7, #4]
    10d8:	691b      	ldr	r3, [r3, #16]
    10da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    10de:	687b      	ldr	r3, [r7, #4]
    10e0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10e2:	bf00      	nop
    10e4:	370c      	adds	r7, #12
    10e6:	46bd      	mov	sp, r7
    10e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    10ec:	4770      	bx	lr

000010ee <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    10ee:	b480      	push	{r7}
    10f0:	b083      	sub	sp, #12
    10f2:	af00      	add	r7, sp, #0
    10f4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    10f6:	687b      	ldr	r3, [r7, #4]
    10f8:	695b      	ldr	r3, [r3, #20]
    10fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    10fe:	687b      	ldr	r3, [r7, #4]
    1100:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1102:	bf00      	nop
    1104:	370c      	adds	r7, #12
    1106:	46bd      	mov	sp, r7
    1108:	f85d 7b04 	ldr.w	r7, [sp], #4
    110c:	4770      	bx	lr

0000110e <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    110e:	b480      	push	{r7}
    1110:	b083      	sub	sp, #12
    1112:	af00      	add	r7, sp, #0
    1114:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    1116:	687b      	ldr	r3, [r7, #4]
    1118:	695b      	ldr	r3, [r3, #20]
    111a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    111e:	687b      	ldr	r3, [r7, #4]
    1120:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1122:	bf00      	nop
    1124:	370c      	adds	r7, #12
    1126:	46bd      	mov	sp, r7
    1128:	f85d 7b04 	ldr.w	r7, [sp], #4
    112c:	4770      	bx	lr

0000112e <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    112e:	b480      	push	{r7}
    1130:	b083      	sub	sp, #12
    1132:	af00      	add	r7, sp, #0
    1134:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    1136:	687b      	ldr	r3, [r7, #4]
    1138:	695b      	ldr	r3, [r3, #20]
    113a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    113e:	687b      	ldr	r3, [r7, #4]
    1140:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1142:	bf00      	nop
    1144:	370c      	adds	r7, #12
    1146:	46bd      	mov	sp, r7
    1148:	f85d 7b04 	ldr.w	r7, [sp], #4
    114c:	4770      	bx	lr

0000114e <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    114e:	b480      	push	{r7}
    1150:	b083      	sub	sp, #12
    1152:	af00      	add	r7, sp, #0
    1154:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    1156:	687b      	ldr	r3, [r7, #4]
    1158:	695b      	ldr	r3, [r3, #20]
    115a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    115e:	687b      	ldr	r3, [r7, #4]
    1160:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1162:	bf00      	nop
    1164:	370c      	adds	r7, #12
    1166:	46bd      	mov	sp, r7
    1168:	f85d 7b04 	ldr.w	r7, [sp], #4
    116c:	4770      	bx	lr

0000116e <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    116e:	b480      	push	{r7}
    1170:	b083      	sub	sp, #12
    1172:	af00      	add	r7, sp, #0
    1174:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1176:	687b      	ldr	r3, [r7, #4]
    1178:	695b      	ldr	r3, [r3, #20]
    117a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    117e:	687b      	ldr	r3, [r7, #4]
    1180:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1182:	bf00      	nop
    1184:	370c      	adds	r7, #12
    1186:	46bd      	mov	sp, r7
    1188:	f85d 7b04 	ldr.w	r7, [sp], #4
    118c:	4770      	bx	lr

0000118e <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    118e:	b480      	push	{r7}
    1190:	b083      	sub	sp, #12
    1192:	af00      	add	r7, sp, #0
    1194:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    1196:	687b      	ldr	r3, [r7, #4]
    1198:	699b      	ldr	r3, [r3, #24]
    119a:	f043 0201 	orr.w	r2, r3, #1
    119e:	687b      	ldr	r3, [r7, #4]
    11a0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    11a2:	bf00      	nop
    11a4:	370c      	adds	r7, #12
    11a6:	46bd      	mov	sp, r7
    11a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    11ac:	4770      	bx	lr

000011ae <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    11ae:	b480      	push	{r7}
    11b0:	b083      	sub	sp, #12
    11b2:	af00      	add	r7, sp, #0
    11b4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    11b6:	687b      	ldr	r3, [r7, #4]
    11b8:	699b      	ldr	r3, [r3, #24]
    11ba:	f043 0202 	orr.w	r2, r3, #2
    11be:	687b      	ldr	r3, [r7, #4]
    11c0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    11c2:	bf00      	nop
    11c4:	370c      	adds	r7, #12
    11c6:	46bd      	mov	sp, r7
    11c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    11cc:	4770      	bx	lr

000011ce <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    11ce:	b480      	push	{r7}
    11d0:	b083      	sub	sp, #12
    11d2:	af00      	add	r7, sp, #0
    11d4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    11d6:	687b      	ldr	r3, [r7, #4]
    11d8:	699b      	ldr	r3, [r3, #24]
    11da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    11de:	687b      	ldr	r3, [r7, #4]
    11e0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    11e2:	bf00      	nop
    11e4:	370c      	adds	r7, #12
    11e6:	46bd      	mov	sp, r7
    11e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    11ec:	4770      	bx	lr

000011ee <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    11ee:	b480      	push	{r7}
    11f0:	b083      	sub	sp, #12
    11f2:	af00      	add	r7, sp, #0
    11f4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    11f6:	687b      	ldr	r3, [r7, #4]
    11f8:	699b      	ldr	r3, [r3, #24]
    11fa:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    11fe:	687b      	ldr	r3, [r7, #4]
    1200:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1202:	bf00      	nop
    1204:	370c      	adds	r7, #12
    1206:	46bd      	mov	sp, r7
    1208:	f85d 7b04 	ldr.w	r7, [sp], #4
    120c:	4770      	bx	lr

0000120e <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    120e:	b480      	push	{r7}
    1210:	b083      	sub	sp, #12
    1212:	af00      	add	r7, sp, #0
    1214:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    1216:	687b      	ldr	r3, [r7, #4]
    1218:	699b      	ldr	r3, [r3, #24]
    121a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    121e:	687b      	ldr	r3, [r7, #4]
    1220:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1222:	bf00      	nop
    1224:	370c      	adds	r7, #12
    1226:	46bd      	mov	sp, r7
    1228:	f85d 7b04 	ldr.w	r7, [sp], #4
    122c:	4770      	bx	lr

0000122e <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    122e:	b480      	push	{r7}
    1230:	b083      	sub	sp, #12
    1232:	af00      	add	r7, sp, #0
    1234:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    1236:	687b      	ldr	r3, [r7, #4]
    1238:	699b      	ldr	r3, [r3, #24]
    123a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    123e:	687b      	ldr	r3, [r7, #4]
    1240:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1242:	bf00      	nop
    1244:	370c      	adds	r7, #12
    1246:	46bd      	mov	sp, r7
    1248:	f85d 7b04 	ldr.w	r7, [sp], #4
    124c:	4770      	bx	lr

0000124e <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    124e:	b480      	push	{r7}
    1250:	b083      	sub	sp, #12
    1252:	af00      	add	r7, sp, #0
    1254:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    1256:	687b      	ldr	r3, [r7, #4]
    1258:	69db      	ldr	r3, [r3, #28]
    125a:	f043 0220 	orr.w	r2, r3, #32
    125e:	687b      	ldr	r3, [r7, #4]
    1260:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1262:	bf00      	nop
    1264:	370c      	adds	r7, #12
    1266:	46bd      	mov	sp, r7
    1268:	f85d 7b04 	ldr.w	r7, [sp], #4
    126c:	4770      	bx	lr

0000126e <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    126e:	b480      	push	{r7}
    1270:	b083      	sub	sp, #12
    1272:	af00      	add	r7, sp, #0
    1274:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    1276:	687b      	ldr	r3, [r7, #4]
    1278:	69db      	ldr	r3, [r3, #28]
    127a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    127e:	687b      	ldr	r3, [r7, #4]
    1280:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1282:	bf00      	nop
    1284:	370c      	adds	r7, #12
    1286:	46bd      	mov	sp, r7
    1288:	f85d 7b04 	ldr.w	r7, [sp], #4
    128c:	4770      	bx	lr

0000128e <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    128e:	b480      	push	{r7}
    1290:	b083      	sub	sp, #12
    1292:	af00      	add	r7, sp, #0
    1294:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    1296:	687b      	ldr	r3, [r7, #4]
    1298:	69db      	ldr	r3, [r3, #28]
    129a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    129e:	687b      	ldr	r3, [r7, #4]
    12a0:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    12a2:	bf00      	nop
    12a4:	370c      	adds	r7, #12
    12a6:	46bd      	mov	sp, r7
    12a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12ac:	4770      	bx	lr

000012ae <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    12ae:	b480      	push	{r7}
    12b0:	b083      	sub	sp, #12
    12b2:	af00      	add	r7, sp, #0
    12b4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    12b6:	687b      	ldr	r3, [r7, #4]
    12b8:	6a1b      	ldr	r3, [r3, #32]
    12ba:	f043 0201 	orr.w	r2, r3, #1
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    12c2:	bf00      	nop
    12c4:	370c      	adds	r7, #12
    12c6:	46bd      	mov	sp, r7
    12c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12cc:	4770      	bx	lr

000012ce <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    12ce:	b480      	push	{r7}
    12d0:	b083      	sub	sp, #12
    12d2:	af00      	add	r7, sp, #0
    12d4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    12d6:	687b      	ldr	r3, [r7, #4]
    12d8:	6a1b      	ldr	r3, [r3, #32]
    12da:	f043 0202 	orr.w	r2, r3, #2
    12de:	687b      	ldr	r3, [r7, #4]
    12e0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    12e2:	bf00      	nop
    12e4:	370c      	adds	r7, #12
    12e6:	46bd      	mov	sp, r7
    12e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12ec:	4770      	bx	lr

000012ee <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    12ee:	b480      	push	{r7}
    12f0:	b083      	sub	sp, #12
    12f2:	af00      	add	r7, sp, #0
    12f4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	6a1b      	ldr	r3, [r3, #32]
    12fa:	f043 0204 	orr.w	r2, r3, #4
    12fe:	687b      	ldr	r3, [r7, #4]
    1300:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1302:	bf00      	nop
    1304:	370c      	adds	r7, #12
    1306:	46bd      	mov	sp, r7
    1308:	f85d 7b04 	ldr.w	r7, [sp], #4
    130c:	4770      	bx	lr

0000130e <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    130e:	b480      	push	{r7}
    1310:	b083      	sub	sp, #12
    1312:	af00      	add	r7, sp, #0
    1314:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    1316:	687b      	ldr	r3, [r7, #4]
    1318:	6a1b      	ldr	r3, [r3, #32]
    131a:	f043 0208 	orr.w	r2, r3, #8
    131e:	687b      	ldr	r3, [r7, #4]
    1320:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1322:	bf00      	nop
    1324:	370c      	adds	r7, #12
    1326:	46bd      	mov	sp, r7
    1328:	f85d 7b04 	ldr.w	r7, [sp], #4
    132c:	4770      	bx	lr

0000132e <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    132e:	b480      	push	{r7}
    1330:	b083      	sub	sp, #12
    1332:	af00      	add	r7, sp, #0
    1334:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    1336:	687b      	ldr	r3, [r7, #4]
    1338:	6a1b      	ldr	r3, [r3, #32]
    133a:	f043 0220 	orr.w	r2, r3, #32
    133e:	687b      	ldr	r3, [r7, #4]
    1340:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1342:	bf00      	nop
    1344:	370c      	adds	r7, #12
    1346:	46bd      	mov	sp, r7
    1348:	f85d 7b04 	ldr.w	r7, [sp], #4
    134c:	4770      	bx	lr

0000134e <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    134e:	b480      	push	{r7}
    1350:	b083      	sub	sp, #12
    1352:	af00      	add	r7, sp, #0
    1354:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    1356:	687b      	ldr	r3, [r7, #4]
    1358:	6a1b      	ldr	r3, [r3, #32]
    135a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    135e:	687b      	ldr	r3, [r7, #4]
    1360:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1362:	bf00      	nop
    1364:	370c      	adds	r7, #12
    1366:	46bd      	mov	sp, r7
    1368:	f85d 7b04 	ldr.w	r7, [sp], #4
    136c:	4770      	bx	lr

0000136e <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    136e:	b480      	push	{r7}
    1370:	b085      	sub	sp, #20
    1372:	af00      	add	r7, sp, #0
    1374:	60f8      	str	r0, [r7, #12]
    1376:	460b      	mov	r3, r1
    1378:	607a      	str	r2, [r7, #4]
    137a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    137c:	7afb      	ldrb	r3, [r7, #11]
    137e:	68fa      	ldr	r2, [r7, #12]
    1380:	01db      	lsls	r3, r3, #7
    1382:	4413      	add	r3, r2
    1384:	3308      	adds	r3, #8
    1386:	687a      	ldr	r2, [r7, #4]
    1388:	601a      	str	r2, [r3, #0]
}
    138a:	bf00      	nop
    138c:	3714      	adds	r7, #20
    138e:	46bd      	mov	sp, r7
    1390:	f85d 7b04 	ldr.w	r7, [sp], #4
    1394:	4770      	bx	lr

00001396 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    1396:	b480      	push	{r7}
    1398:	b085      	sub	sp, #20
    139a:	af00      	add	r7, sp, #0
    139c:	60f8      	str	r0, [r7, #12]
    139e:	460b      	mov	r3, r1
    13a0:	607a      	str	r2, [r7, #4]
    13a2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    13a4:	7afb      	ldrb	r3, [r7, #11]
    13a6:	68fa      	ldr	r2, [r7, #12]
    13a8:	01db      	lsls	r3, r3, #7
    13aa:	4413      	add	r3, r2
    13ac:	3304      	adds	r3, #4
    13ae:	687a      	ldr	r2, [r7, #4]
    13b0:	601a      	str	r2, [r3, #0]
}
    13b2:	bf00      	nop
    13b4:	3714      	adds	r7, #20
    13b6:	46bd      	mov	sp, r7
    13b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    13bc:	4770      	bx	lr

000013be <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    13be:	b480      	push	{r7}
    13c0:	b085      	sub	sp, #20
    13c2:	af00      	add	r7, sp, #0
    13c4:	60f8      	str	r0, [r7, #12]
    13c6:	460b      	mov	r3, r1
    13c8:	607a      	str	r2, [r7, #4]
    13ca:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    13cc:	7afb      	ldrb	r3, [r7, #11]
    13ce:	68fa      	ldr	r2, [r7, #12]
    13d0:	01db      	lsls	r3, r3, #7
    13d2:	4413      	add	r3, r2
    13d4:	3318      	adds	r3, #24
    13d6:	687a      	ldr	r2, [r7, #4]
    13d8:	601a      	str	r2, [r3, #0]
}
    13da:	bf00      	nop
    13dc:	3714      	adds	r7, #20
    13de:	46bd      	mov	sp, r7
    13e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13e4:	4770      	bx	lr

000013e6 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    13e6:	b480      	push	{r7}
    13e8:	b085      	sub	sp, #20
    13ea:	af00      	add	r7, sp, #0
    13ec:	60f8      	str	r0, [r7, #12]
    13ee:	460b      	mov	r3, r1
    13f0:	607a      	str	r2, [r7, #4]
    13f2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    13f4:	7afb      	ldrb	r3, [r7, #11]
    13f6:	68fa      	ldr	r2, [r7, #12]
    13f8:	01db      	lsls	r3, r3, #7
    13fa:	4413      	add	r3, r2
    13fc:	3314      	adds	r3, #20
    13fe:	687a      	ldr	r2, [r7, #4]
    1400:	601a      	str	r2, [r3, #0]
}
    1402:	bf00      	nop
    1404:	3714      	adds	r7, #20
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr

0000140e <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    140e:	b480      	push	{r7}
    1410:	b085      	sub	sp, #20
    1412:	af00      	add	r7, sp, #0
    1414:	6078      	str	r0, [r7, #4]
    1416:	4608      	mov	r0, r1
    1418:	4611      	mov	r1, r2
    141a:	461a      	mov	r2, r3
    141c:	4603      	mov	r3, r0
    141e:	70fb      	strb	r3, [r7, #3]
    1420:	460b      	mov	r3, r1
    1422:	70bb      	strb	r3, [r7, #2]
    1424:	4613      	mov	r3, r2
    1426:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1428:	78fa      	ldrb	r2, [r7, #3]
    142a:	78bb      	ldrb	r3, [r7, #2]
    142c:	6879      	ldr	r1, [r7, #4]
    142e:	01d2      	lsls	r2, r2, #7
    1430:	440a      	add	r2, r1
    1432:	4413      	add	r3, r2
    1434:	3330      	adds	r3, #48	; 0x30
    1436:	781b      	ldrb	r3, [r3, #0]
    1438:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    143a:	7bfb      	ldrb	r3, [r7, #15]
    143c:	f023 030f 	bic.w	r3, r3, #15
    1440:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    1442:	787b      	ldrb	r3, [r7, #1]
    1444:	f003 030f 	and.w	r3, r3, #15
    1448:	b2da      	uxtb	r2, r3
    144a:	7bfb      	ldrb	r3, [r7, #15]
    144c:	4313      	orrs	r3, r2
    144e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1450:	78fa      	ldrb	r2, [r7, #3]
    1452:	78bb      	ldrb	r3, [r7, #2]
    1454:	6879      	ldr	r1, [r7, #4]
    1456:	01d2      	lsls	r2, r2, #7
    1458:	440a      	add	r2, r1
    145a:	4413      	add	r3, r2
    145c:	3330      	adds	r3, #48	; 0x30
    145e:	7bfa      	ldrb	r2, [r7, #15]
    1460:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1462:	bf00      	nop
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr

0000146e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    146e:	b480      	push	{r7}
    1470:	b085      	sub	sp, #20
    1472:	af00      	add	r7, sp, #0
    1474:	6078      	str	r0, [r7, #4]
    1476:	4608      	mov	r0, r1
    1478:	4611      	mov	r1, r2
    147a:	461a      	mov	r2, r3
    147c:	4603      	mov	r3, r0
    147e:	70fb      	strb	r3, [r7, #3]
    1480:	460b      	mov	r3, r1
    1482:	70bb      	strb	r3, [r7, #2]
    1484:	4613      	mov	r3, r2
    1486:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1488:	78fa      	ldrb	r2, [r7, #3]
    148a:	78bb      	ldrb	r3, [r7, #2]
    148c:	6879      	ldr	r1, [r7, #4]
    148e:	01d2      	lsls	r2, r2, #7
    1490:	440a      	add	r2, r1
    1492:	4413      	add	r3, r2
    1494:	3330      	adds	r3, #48	; 0x30
    1496:	781b      	ldrb	r3, [r3, #0]
    1498:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    149a:	7bfb      	ldrb	r3, [r7, #15]
    149c:	f003 030f 	and.w	r3, r3, #15
    14a0:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    14a2:	787b      	ldrb	r3, [r7, #1]
    14a4:	011b      	lsls	r3, r3, #4
    14a6:	b2da      	uxtb	r2, r3
    14a8:	7bfb      	ldrb	r3, [r7, #15]
    14aa:	4313      	orrs	r3, r2
    14ac:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    14ae:	78fa      	ldrb	r2, [r7, #3]
    14b0:	78bb      	ldrb	r3, [r7, #2]
    14b2:	6879      	ldr	r1, [r7, #4]
    14b4:	01d2      	lsls	r2, r2, #7
    14b6:	440a      	add	r2, r1
    14b8:	4413      	add	r3, r2
    14ba:	3330      	adds	r3, #48	; 0x30
    14bc:	7bfa      	ldrb	r2, [r7, #15]
    14be:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    14c0:	bf00      	nop
    14c2:	3714      	adds	r7, #20
    14c4:	46bd      	mov	sp, r7
    14c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ca:	4770      	bx	lr

000014cc <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    14cc:	b480      	push	{r7}
    14ce:	b085      	sub	sp, #20
    14d0:	af00      	add	r7, sp, #0
    14d2:	6078      	str	r0, [r7, #4]
    14d4:	4608      	mov	r0, r1
    14d6:	4611      	mov	r1, r2
    14d8:	461a      	mov	r2, r3
    14da:	4603      	mov	r3, r0
    14dc:	70fb      	strb	r3, [r7, #3]
    14de:	460b      	mov	r3, r1
    14e0:	70bb      	strb	r3, [r7, #2]
    14e2:	4613      	mov	r3, r2
    14e4:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    14e6:	78fa      	ldrb	r2, [r7, #3]
    14e8:	78bb      	ldrb	r3, [r7, #2]
    14ea:	6879      	ldr	r1, [r7, #4]
    14ec:	01d2      	lsls	r2, r2, #7
    14ee:	440a      	add	r2, r1
    14f0:	4413      	add	r3, r2
    14f2:	3340      	adds	r3, #64	; 0x40
    14f4:	781b      	ldrb	r3, [r3, #0]
    14f6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    14f8:	7bfb      	ldrb	r3, [r7, #15]
    14fa:	f023 0301 	bic.w	r3, r3, #1
    14fe:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1500:	787a      	ldrb	r2, [r7, #1]
    1502:	7bfb      	ldrb	r3, [r7, #15]
    1504:	4313      	orrs	r3, r2
    1506:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1508:	78fa      	ldrb	r2, [r7, #3]
    150a:	78bb      	ldrb	r3, [r7, #2]
    150c:	6879      	ldr	r1, [r7, #4]
    150e:	01d2      	lsls	r2, r2, #7
    1510:	440a      	add	r2, r1
    1512:	4413      	add	r3, r2
    1514:	3340      	adds	r3, #64	; 0x40
    1516:	7bfa      	ldrb	r2, [r7, #15]
    1518:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    151a:	bf00      	nop
    151c:	3714      	adds	r7, #20
    151e:	46bd      	mov	sp, r7
    1520:	f85d 7b04 	ldr.w	r7, [sp], #4
    1524:	4770      	bx	lr

00001526 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1526:	b490      	push	{r4, r7}
    1528:	b082      	sub	sp, #8
    152a:	af00      	add	r7, sp, #0
    152c:	6078      	str	r0, [r7, #4]
    152e:	460b      	mov	r3, r1
    1530:	70fb      	strb	r3, [r7, #3]
    1532:	4613      	mov	r3, r2
    1534:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1536:	78fa      	ldrb	r2, [r7, #3]
    1538:	78bb      	ldrb	r3, [r7, #2]
    153a:	78f8      	ldrb	r0, [r7, #3]
    153c:	78b9      	ldrb	r1, [r7, #2]
    153e:	687c      	ldr	r4, [r7, #4]
    1540:	01c0      	lsls	r0, r0, #7
    1542:	4420      	add	r0, r4
    1544:	4401      	add	r1, r0
    1546:	3140      	adds	r1, #64	; 0x40
    1548:	7809      	ldrb	r1, [r1, #0]
    154a:	b2c9      	uxtb	r1, r1
    154c:	f041 0104 	orr.w	r1, r1, #4
    1550:	b2c8      	uxtb	r0, r1
    1552:	6879      	ldr	r1, [r7, #4]
    1554:	01d2      	lsls	r2, r2, #7
    1556:	440a      	add	r2, r1
    1558:	4413      	add	r3, r2
    155a:	3340      	adds	r3, #64	; 0x40
    155c:	4602      	mov	r2, r0
    155e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1560:	bf00      	nop
    1562:	3708      	adds	r7, #8
    1564:	46bd      	mov	sp, r7
    1566:	bc90      	pop	{r4, r7}
    1568:	4770      	bx	lr

0000156a <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    156a:	b490      	push	{r4, r7}
    156c:	b082      	sub	sp, #8
    156e:	af00      	add	r7, sp, #0
    1570:	6078      	str	r0, [r7, #4]
    1572:	460b      	mov	r3, r1
    1574:	70fb      	strb	r3, [r7, #3]
    1576:	4613      	mov	r3, r2
    1578:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    157a:	78fa      	ldrb	r2, [r7, #3]
    157c:	78bb      	ldrb	r3, [r7, #2]
    157e:	78f8      	ldrb	r0, [r7, #3]
    1580:	78b9      	ldrb	r1, [r7, #2]
    1582:	687c      	ldr	r4, [r7, #4]
    1584:	01c0      	lsls	r0, r0, #7
    1586:	4420      	add	r0, r4
    1588:	4401      	add	r1, r0
    158a:	3140      	adds	r1, #64	; 0x40
    158c:	7809      	ldrb	r1, [r1, #0]
    158e:	b2c9      	uxtb	r1, r1
    1590:	f021 0104 	bic.w	r1, r1, #4
    1594:	b2c8      	uxtb	r0, r1
    1596:	6879      	ldr	r1, [r7, #4]
    1598:	01d2      	lsls	r2, r2, #7
    159a:	440a      	add	r2, r1
    159c:	4413      	add	r3, r2
    159e:	3340      	adds	r3, #64	; 0x40
    15a0:	4602      	mov	r2, r0
    15a2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    15a4:	bf00      	nop
    15a6:	3708      	adds	r7, #8
    15a8:	46bd      	mov	sp, r7
    15aa:	bc90      	pop	{r4, r7}
    15ac:	4770      	bx	lr

000015ae <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    15ae:	b480      	push	{r7}
    15b0:	b085      	sub	sp, #20
    15b2:	af00      	add	r7, sp, #0
    15b4:	60f8      	str	r0, [r7, #12]
    15b6:	460b      	mov	r3, r1
    15b8:	607a      	str	r2, [r7, #4]
    15ba:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    15bc:	7afb      	ldrb	r3, [r7, #11]
    15be:	68fa      	ldr	r2, [r7, #12]
    15c0:	01db      	lsls	r3, r3, #7
    15c2:	4413      	add	r3, r2
    15c4:	3328      	adds	r3, #40	; 0x28
    15c6:	687a      	ldr	r2, [r7, #4]
    15c8:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    15ca:	bf00      	nop
    15cc:	3714      	adds	r7, #20
    15ce:	46bd      	mov	sp, r7
    15d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    15d4:	4770      	bx	lr
	...

000015d8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    15d8:	b580      	push	{r7, lr}
    15da:	b082      	sub	sp, #8
    15dc:	af00      	add	r7, sp, #0
    15de:	4603      	mov	r3, r0
    15e0:	6039      	str	r1, [r7, #0]
    15e2:	71fb      	strb	r3, [r7, #7]
    15e4:	4613      	mov	r3, r2
    15e6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    15e8:	79bb      	ldrb	r3, [r7, #6]
    15ea:	2b01      	cmp	r3, #1
    15ec:	d01c      	beq.n	1628 <_gpio_set_direction+0x50>
    15ee:	2b02      	cmp	r3, #2
    15f0:	d037      	beq.n	1662 <_gpio_set_direction+0x8a>
    15f2:	2b00      	cmp	r3, #0
    15f4:	d14e      	bne.n	1694 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    15f6:	79fb      	ldrb	r3, [r7, #7]
    15f8:	683a      	ldr	r2, [r7, #0]
    15fa:	4619      	mov	r1, r3
    15fc:	482a      	ldr	r0, [pc, #168]	; (16a8 <_gpio_set_direction+0xd0>)
    15fe:	4b2b      	ldr	r3, [pc, #172]	; (16ac <_gpio_set_direction+0xd4>)
    1600:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1602:	683b      	ldr	r3, [r7, #0]
    1604:	b29b      	uxth	r3, r3
    1606:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    160a:	79fb      	ldrb	r3, [r7, #7]
    160c:	4619      	mov	r1, r3
    160e:	4826      	ldr	r0, [pc, #152]	; (16a8 <_gpio_set_direction+0xd0>)
    1610:	4b27      	ldr	r3, [pc, #156]	; (16b0 <_gpio_set_direction+0xd8>)
    1612:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1614:	683b      	ldr	r3, [r7, #0]
    1616:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1618:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    161c:	79fb      	ldrb	r3, [r7, #7]
    161e:	4619      	mov	r1, r3
    1620:	4821      	ldr	r0, [pc, #132]	; (16a8 <_gpio_set_direction+0xd0>)
    1622:	4b23      	ldr	r3, [pc, #140]	; (16b0 <_gpio_set_direction+0xd8>)
    1624:	4798      	blx	r3
		break;
    1626:	e03a      	b.n	169e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1628:	79fb      	ldrb	r3, [r7, #7]
    162a:	683a      	ldr	r2, [r7, #0]
    162c:	4619      	mov	r1, r3
    162e:	481e      	ldr	r0, [pc, #120]	; (16a8 <_gpio_set_direction+0xd0>)
    1630:	4b1e      	ldr	r3, [pc, #120]	; (16ac <_gpio_set_direction+0xd4>)
    1632:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1634:	683b      	ldr	r3, [r7, #0]
    1636:	b29b      	uxth	r3, r3
    1638:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    163c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1640:	79f9      	ldrb	r1, [r7, #7]
    1642:	461a      	mov	r2, r3
    1644:	4818      	ldr	r0, [pc, #96]	; (16a8 <_gpio_set_direction+0xd0>)
    1646:	4b1a      	ldr	r3, [pc, #104]	; (16b0 <_gpio_set_direction+0xd8>)
    1648:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    164a:	683b      	ldr	r3, [r7, #0]
    164c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    164e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    1652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1656:	79f9      	ldrb	r1, [r7, #7]
    1658:	461a      	mov	r2, r3
    165a:	4813      	ldr	r0, [pc, #76]	; (16a8 <_gpio_set_direction+0xd0>)
    165c:	4b14      	ldr	r3, [pc, #80]	; (16b0 <_gpio_set_direction+0xd8>)
    165e:	4798      	blx	r3
		break;
    1660:	e01d      	b.n	169e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    1662:	79fb      	ldrb	r3, [r7, #7]
    1664:	683a      	ldr	r2, [r7, #0]
    1666:	4619      	mov	r1, r3
    1668:	480f      	ldr	r0, [pc, #60]	; (16a8 <_gpio_set_direction+0xd0>)
    166a:	4b12      	ldr	r3, [pc, #72]	; (16b4 <_gpio_set_direction+0xdc>)
    166c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    166e:	683b      	ldr	r3, [r7, #0]
    1670:	b29b      	uxth	r3, r3
    1672:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1676:	79fb      	ldrb	r3, [r7, #7]
    1678:	4619      	mov	r1, r3
    167a:	480b      	ldr	r0, [pc, #44]	; (16a8 <_gpio_set_direction+0xd0>)
    167c:	4b0c      	ldr	r3, [pc, #48]	; (16b0 <_gpio_set_direction+0xd8>)
    167e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1680:	683b      	ldr	r3, [r7, #0]
    1682:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1684:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1688:	79fb      	ldrb	r3, [r7, #7]
    168a:	4619      	mov	r1, r3
    168c:	4806      	ldr	r0, [pc, #24]	; (16a8 <_gpio_set_direction+0xd0>)
    168e:	4b08      	ldr	r3, [pc, #32]	; (16b0 <_gpio_set_direction+0xd8>)
    1690:	4798      	blx	r3
		break;
    1692:	e004      	b.n	169e <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    1694:	2246      	movs	r2, #70	; 0x46
    1696:	4908      	ldr	r1, [pc, #32]	; (16b8 <_gpio_set_direction+0xe0>)
    1698:	2000      	movs	r0, #0
    169a:	4b08      	ldr	r3, [pc, #32]	; (16bc <_gpio_set_direction+0xe4>)
    169c:	4798      	blx	r3
	}
}
    169e:	bf00      	nop
    16a0:	3708      	adds	r7, #8
    16a2:	46bd      	mov	sp, r7
    16a4:	bd80      	pop	{r7, pc}
    16a6:	bf00      	nop
    16a8:	41008000 	.word	0x41008000
    16ac:	00001397 	.word	0x00001397
    16b0:	000015af 	.word	0x000015af
    16b4:	0000136f 	.word	0x0000136f
    16b8:	0001037c 	.word	0x0001037c
    16bc:	00003fd5 	.word	0x00003fd5

000016c0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    16c0:	b580      	push	{r7, lr}
    16c2:	b082      	sub	sp, #8
    16c4:	af00      	add	r7, sp, #0
    16c6:	4603      	mov	r3, r0
    16c8:	6039      	str	r1, [r7, #0]
    16ca:	71fb      	strb	r3, [r7, #7]
    16cc:	4613      	mov	r3, r2
    16ce:	71bb      	strb	r3, [r7, #6]
	if (level) {
    16d0:	79bb      	ldrb	r3, [r7, #6]
    16d2:	2b00      	cmp	r3, #0
    16d4:	d006      	beq.n	16e4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    16d6:	79fb      	ldrb	r3, [r7, #7]
    16d8:	683a      	ldr	r2, [r7, #0]
    16da:	4619      	mov	r1, r3
    16dc:	4806      	ldr	r0, [pc, #24]	; (16f8 <_gpio_set_level+0x38>)
    16de:	4b07      	ldr	r3, [pc, #28]	; (16fc <_gpio_set_level+0x3c>)
    16e0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    16e2:	e005      	b.n	16f0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    16e4:	79fb      	ldrb	r3, [r7, #7]
    16e6:	683a      	ldr	r2, [r7, #0]
    16e8:	4619      	mov	r1, r3
    16ea:	4803      	ldr	r0, [pc, #12]	; (16f8 <_gpio_set_level+0x38>)
    16ec:	4b04      	ldr	r3, [pc, #16]	; (1700 <_gpio_set_level+0x40>)
    16ee:	4798      	blx	r3
}
    16f0:	bf00      	nop
    16f2:	3708      	adds	r7, #8
    16f4:	46bd      	mov	sp, r7
    16f6:	bd80      	pop	{r7, pc}
    16f8:	41008000 	.word	0x41008000
    16fc:	000013bf 	.word	0x000013bf
    1700:	000013e7 	.word	0x000013e7

00001704 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    1704:	b580      	push	{r7, lr}
    1706:	b082      	sub	sp, #8
    1708:	af00      	add	r7, sp, #0
    170a:	4603      	mov	r3, r0
    170c:	71fb      	strb	r3, [r7, #7]
    170e:	460b      	mov	r3, r1
    1710:	71bb      	strb	r3, [r7, #6]
    1712:	4613      	mov	r3, r2
    1714:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    1716:	797b      	ldrb	r3, [r7, #5]
    1718:	2b01      	cmp	r3, #1
    171a:	d00a      	beq.n	1732 <_gpio_set_pin_pull_mode+0x2e>
    171c:	2b02      	cmp	r3, #2
    171e:	d01f      	beq.n	1760 <_gpio_set_pin_pull_mode+0x5c>
    1720:	2b00      	cmp	r3, #0
    1722:	d134      	bne.n	178e <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    1724:	79ba      	ldrb	r2, [r7, #6]
    1726:	79fb      	ldrb	r3, [r7, #7]
    1728:	4619      	mov	r1, r3
    172a:	481e      	ldr	r0, [pc, #120]	; (17a4 <_gpio_set_pin_pull_mode+0xa0>)
    172c:	4b1e      	ldr	r3, [pc, #120]	; (17a8 <_gpio_set_pin_pull_mode+0xa4>)
    172e:	4798      	blx	r3
		break;
    1730:	e033      	b.n	179a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1732:	79bb      	ldrb	r3, [r7, #6]
    1734:	2201      	movs	r2, #1
    1736:	409a      	lsls	r2, r3
    1738:	79fb      	ldrb	r3, [r7, #7]
    173a:	4619      	mov	r1, r3
    173c:	4819      	ldr	r0, [pc, #100]	; (17a4 <_gpio_set_pin_pull_mode+0xa0>)
    173e:	4b1b      	ldr	r3, [pc, #108]	; (17ac <_gpio_set_pin_pull_mode+0xa8>)
    1740:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1742:	79ba      	ldrb	r2, [r7, #6]
    1744:	79fb      	ldrb	r3, [r7, #7]
    1746:	4619      	mov	r1, r3
    1748:	4816      	ldr	r0, [pc, #88]	; (17a4 <_gpio_set_pin_pull_mode+0xa0>)
    174a:	4b19      	ldr	r3, [pc, #100]	; (17b0 <_gpio_set_pin_pull_mode+0xac>)
    174c:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    174e:	79bb      	ldrb	r3, [r7, #6]
    1750:	2201      	movs	r2, #1
    1752:	409a      	lsls	r2, r3
    1754:	79fb      	ldrb	r3, [r7, #7]
    1756:	4619      	mov	r1, r3
    1758:	4812      	ldr	r0, [pc, #72]	; (17a4 <_gpio_set_pin_pull_mode+0xa0>)
    175a:	4b16      	ldr	r3, [pc, #88]	; (17b4 <_gpio_set_pin_pull_mode+0xb0>)
    175c:	4798      	blx	r3
		break;
    175e:	e01c      	b.n	179a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1760:	79bb      	ldrb	r3, [r7, #6]
    1762:	2201      	movs	r2, #1
    1764:	409a      	lsls	r2, r3
    1766:	79fb      	ldrb	r3, [r7, #7]
    1768:	4619      	mov	r1, r3
    176a:	480e      	ldr	r0, [pc, #56]	; (17a4 <_gpio_set_pin_pull_mode+0xa0>)
    176c:	4b0f      	ldr	r3, [pc, #60]	; (17ac <_gpio_set_pin_pull_mode+0xa8>)
    176e:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1770:	79ba      	ldrb	r2, [r7, #6]
    1772:	79fb      	ldrb	r3, [r7, #7]
    1774:	4619      	mov	r1, r3
    1776:	480b      	ldr	r0, [pc, #44]	; (17a4 <_gpio_set_pin_pull_mode+0xa0>)
    1778:	4b0d      	ldr	r3, [pc, #52]	; (17b0 <_gpio_set_pin_pull_mode+0xac>)
    177a:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    177c:	79bb      	ldrb	r3, [r7, #6]
    177e:	2201      	movs	r2, #1
    1780:	409a      	lsls	r2, r3
    1782:	79fb      	ldrb	r3, [r7, #7]
    1784:	4619      	mov	r1, r3
    1786:	4807      	ldr	r0, [pc, #28]	; (17a4 <_gpio_set_pin_pull_mode+0xa0>)
    1788:	4b0b      	ldr	r3, [pc, #44]	; (17b8 <_gpio_set_pin_pull_mode+0xb4>)
    178a:	4798      	blx	r3
		break;
    178c:	e005      	b.n	179a <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    178e:	2289      	movs	r2, #137	; 0x89
    1790:	490a      	ldr	r1, [pc, #40]	; (17bc <_gpio_set_pin_pull_mode+0xb8>)
    1792:	2000      	movs	r0, #0
    1794:	4b0a      	ldr	r3, [pc, #40]	; (17c0 <_gpio_set_pin_pull_mode+0xbc>)
    1796:	4798      	blx	r3
		break;
    1798:	bf00      	nop
	}
}
    179a:	bf00      	nop
    179c:	3708      	adds	r7, #8
    179e:	46bd      	mov	sp, r7
    17a0:	bd80      	pop	{r7, pc}
    17a2:	bf00      	nop
    17a4:	41008000 	.word	0x41008000
    17a8:	0000156b 	.word	0x0000156b
    17ac:	00001397 	.word	0x00001397
    17b0:	00001527 	.word	0x00001527
    17b4:	000013bf 	.word	0x000013bf
    17b8:	000013e7 	.word	0x000013e7
    17bc:	0001037c 	.word	0x0001037c
    17c0:	00003fd5 	.word	0x00003fd5

000017c4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    17c4:	b590      	push	{r4, r7, lr}
    17c6:	b085      	sub	sp, #20
    17c8:	af00      	add	r7, sp, #0
    17ca:	6078      	str	r0, [r7, #4]
    17cc:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    17ce:	687b      	ldr	r3, [r7, #4]
    17d0:	095b      	lsrs	r3, r3, #5
    17d2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    17d4:	687b      	ldr	r3, [r7, #4]
    17d6:	b2db      	uxtb	r3, r3
    17d8:	f003 031f 	and.w	r3, r3, #31
    17dc:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    17de:	683b      	ldr	r3, [r7, #0]
    17e0:	f1b3 3fff 	cmp.w	r3, #4294967295
    17e4:	d106      	bne.n	17f4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    17e6:	7bba      	ldrb	r2, [r7, #14]
    17e8:	7bf9      	ldrb	r1, [r7, #15]
    17ea:	2300      	movs	r3, #0
    17ec:	4812      	ldr	r0, [pc, #72]	; (1838 <_gpio_set_pin_function+0x74>)
    17ee:	4c13      	ldr	r4, [pc, #76]	; (183c <_gpio_set_pin_function+0x78>)
    17f0:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    17f2:	e01d      	b.n	1830 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    17f4:	7bba      	ldrb	r2, [r7, #14]
    17f6:	7bf9      	ldrb	r1, [r7, #15]
    17f8:	2301      	movs	r3, #1
    17fa:	480f      	ldr	r0, [pc, #60]	; (1838 <_gpio_set_pin_function+0x74>)
    17fc:	4c0f      	ldr	r4, [pc, #60]	; (183c <_gpio_set_pin_function+0x78>)
    17fe:	47a0      	blx	r4
		if (pin & 1) {
    1800:	7bbb      	ldrb	r3, [r7, #14]
    1802:	f003 0301 	and.w	r3, r3, #1
    1806:	2b00      	cmp	r3, #0
    1808:	d009      	beq.n	181e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    180a:	7bbb      	ldrb	r3, [r7, #14]
    180c:	085b      	lsrs	r3, r3, #1
    180e:	b2da      	uxtb	r2, r3
    1810:	683b      	ldr	r3, [r7, #0]
    1812:	b2db      	uxtb	r3, r3
    1814:	7bf9      	ldrb	r1, [r7, #15]
    1816:	4808      	ldr	r0, [pc, #32]	; (1838 <_gpio_set_pin_function+0x74>)
    1818:	4c09      	ldr	r4, [pc, #36]	; (1840 <_gpio_set_pin_function+0x7c>)
    181a:	47a0      	blx	r4
}
    181c:	e008      	b.n	1830 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    181e:	7bbb      	ldrb	r3, [r7, #14]
    1820:	085b      	lsrs	r3, r3, #1
    1822:	b2da      	uxtb	r2, r3
    1824:	683b      	ldr	r3, [r7, #0]
    1826:	b2db      	uxtb	r3, r3
    1828:	7bf9      	ldrb	r1, [r7, #15]
    182a:	4803      	ldr	r0, [pc, #12]	; (1838 <_gpio_set_pin_function+0x74>)
    182c:	4c05      	ldr	r4, [pc, #20]	; (1844 <_gpio_set_pin_function+0x80>)
    182e:	47a0      	blx	r4
}
    1830:	bf00      	nop
    1832:	3714      	adds	r7, #20
    1834:	46bd      	mov	sp, r7
    1836:	bd90      	pop	{r4, r7, pc}
    1838:	41008000 	.word	0x41008000
    183c:	000014cd 	.word	0x000014cd
    1840:	0000146f 	.word	0x0000146f
    1844:	0000140f 	.word	0x0000140f

00001848 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1848:	b580      	push	{r7, lr}
    184a:	b082      	sub	sp, #8
    184c:	af00      	add	r7, sp, #0
    184e:	4603      	mov	r3, r0
    1850:	460a      	mov	r2, r1
    1852:	71fb      	strb	r3, [r7, #7]
    1854:	4613      	mov	r3, r2
    1856:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1858:	79fb      	ldrb	r3, [r7, #7]
    185a:	095b      	lsrs	r3, r3, #5
    185c:	b2d8      	uxtb	r0, r3
    185e:	79fb      	ldrb	r3, [r7, #7]
    1860:	f003 031f 	and.w	r3, r3, #31
    1864:	b2db      	uxtb	r3, r3
    1866:	79ba      	ldrb	r2, [r7, #6]
    1868:	4619      	mov	r1, r3
    186a:	4b03      	ldr	r3, [pc, #12]	; (1878 <gpio_set_pin_pull_mode+0x30>)
    186c:	4798      	blx	r3
}
    186e:	bf00      	nop
    1870:	3708      	adds	r7, #8
    1872:	46bd      	mov	sp, r7
    1874:	bd80      	pop	{r7, pc}
    1876:	bf00      	nop
    1878:	00001705 	.word	0x00001705

0000187c <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    187c:	b580      	push	{r7, lr}
    187e:	b082      	sub	sp, #8
    1880:	af00      	add	r7, sp, #0
    1882:	6078      	str	r0, [r7, #4]
    1884:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1886:	6839      	ldr	r1, [r7, #0]
    1888:	6878      	ldr	r0, [r7, #4]
    188a:	4b03      	ldr	r3, [pc, #12]	; (1898 <gpio_set_pin_function+0x1c>)
    188c:	4798      	blx	r3
}
    188e:	bf00      	nop
    1890:	3708      	adds	r7, #8
    1892:	46bd      	mov	sp, r7
    1894:	bd80      	pop	{r7, pc}
    1896:	bf00      	nop
    1898:	000017c5 	.word	0x000017c5

0000189c <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    189c:	b580      	push	{r7, lr}
    189e:	b082      	sub	sp, #8
    18a0:	af00      	add	r7, sp, #0
    18a2:	4603      	mov	r3, r0
    18a4:	460a      	mov	r2, r1
    18a6:	71fb      	strb	r3, [r7, #7]
    18a8:	4613      	mov	r3, r2
    18aa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    18ac:	79fb      	ldrb	r3, [r7, #7]
    18ae:	095b      	lsrs	r3, r3, #5
    18b0:	b2d8      	uxtb	r0, r3
    18b2:	79fb      	ldrb	r3, [r7, #7]
    18b4:	f003 031f 	and.w	r3, r3, #31
    18b8:	2201      	movs	r2, #1
    18ba:	fa02 f303 	lsl.w	r3, r2, r3
    18be:	79ba      	ldrb	r2, [r7, #6]
    18c0:	4619      	mov	r1, r3
    18c2:	4b03      	ldr	r3, [pc, #12]	; (18d0 <gpio_set_pin_direction+0x34>)
    18c4:	4798      	blx	r3
}
    18c6:	bf00      	nop
    18c8:	3708      	adds	r7, #8
    18ca:	46bd      	mov	sp, r7
    18cc:	bd80      	pop	{r7, pc}
    18ce:	bf00      	nop
    18d0:	000015d9 	.word	0x000015d9

000018d4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    18d4:	b580      	push	{r7, lr}
    18d6:	b082      	sub	sp, #8
    18d8:	af00      	add	r7, sp, #0
    18da:	4603      	mov	r3, r0
    18dc:	460a      	mov	r2, r1
    18de:	71fb      	strb	r3, [r7, #7]
    18e0:	4613      	mov	r3, r2
    18e2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    18e4:	79fb      	ldrb	r3, [r7, #7]
    18e6:	095b      	lsrs	r3, r3, #5
    18e8:	b2d8      	uxtb	r0, r3
    18ea:	79fb      	ldrb	r3, [r7, #7]
    18ec:	f003 031f 	and.w	r3, r3, #31
    18f0:	2201      	movs	r2, #1
    18f2:	fa02 f303 	lsl.w	r3, r2, r3
    18f6:	79ba      	ldrb	r2, [r7, #6]
    18f8:	4619      	mov	r1, r3
    18fa:	4b03      	ldr	r3, [pc, #12]	; (1908 <gpio_set_pin_level+0x34>)
    18fc:	4798      	blx	r3
}
    18fe:	bf00      	nop
    1900:	3708      	adds	r7, #8
    1902:	46bd      	mov	sp, r7
    1904:	bd80      	pop	{r7, pc}
    1906:	bf00      	nop
    1908:	000016c1 	.word	0x000016c1

0000190c <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    190c:	b580      	push	{r7, lr}
    190e:	af00      	add	r7, sp, #0
	_init_chip();
    1910:	4b01      	ldr	r3, [pc, #4]	; (1918 <init_mcu+0xc>)
    1912:	4798      	blx	r3
}
    1914:	bf00      	nop
    1916:	bd80      	pop	{r7, pc}
    1918:	00004be5 	.word	0x00004be5

0000191c <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    191c:	b580      	push	{r7, lr}
    191e:	b082      	sub	sp, #8
    1920:	af00      	add	r7, sp, #0
    1922:	6078      	str	r0, [r7, #4]
    1924:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    1926:	687b      	ldr	r3, [r7, #4]
    1928:	2b00      	cmp	r3, #0
    192a:	d004      	beq.n	1936 <wdt_init+0x1a>
    192c:	683b      	ldr	r3, [r7, #0]
    192e:	2b00      	cmp	r3, #0
    1930:	d001      	beq.n	1936 <wdt_init+0x1a>
    1932:	2301      	movs	r3, #1
    1934:	e000      	b.n	1938 <wdt_init+0x1c>
    1936:	2300      	movs	r3, #0
    1938:	f003 0301 	and.w	r3, r3, #1
    193c:	b2db      	uxtb	r3, r3
    193e:	2248      	movs	r2, #72	; 0x48
    1940:	4907      	ldr	r1, [pc, #28]	; (1960 <wdt_init+0x44>)
    1942:	4618      	mov	r0, r3
    1944:	4b07      	ldr	r3, [pc, #28]	; (1964 <wdt_init+0x48>)
    1946:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1948:	687b      	ldr	r3, [r7, #4]
    194a:	683a      	ldr	r2, [r7, #0]
    194c:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    194e:	687b      	ldr	r3, [r7, #4]
    1950:	4618      	mov	r0, r3
    1952:	4b05      	ldr	r3, [pc, #20]	; (1968 <wdt_init+0x4c>)
    1954:	4798      	blx	r3
    1956:	4603      	mov	r3, r0
}
    1958:	4618      	mov	r0, r3
    195a:	3708      	adds	r7, #8
    195c:	46bd      	mov	sp, r7
    195e:	bd80      	pop	{r7, pc}
    1960:	00010398 	.word	0x00010398
    1964:	00003fd5 	.word	0x00003fd5
    1968:	0000bb7d 	.word	0x0000bb7d

0000196c <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    196c:	b580      	push	{r7, lr}
    196e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    1970:	4804      	ldr	r0, [pc, #16]	; (1984 <CRC_CALC_init+0x18>)
    1972:	4b05      	ldr	r3, [pc, #20]	; (1988 <CRC_CALC_init+0x1c>)
    1974:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    1976:	4905      	ldr	r1, [pc, #20]	; (198c <CRC_CALC_init+0x20>)
    1978:	4805      	ldr	r0, [pc, #20]	; (1990 <CRC_CALC_init+0x24>)
    197a:	4b06      	ldr	r3, [pc, #24]	; (1994 <CRC_CALC_init+0x28>)
    197c:	4798      	blx	r3
}
    197e:	bf00      	nop
    1980:	bd80      	pop	{r7, pc}
    1982:	bf00      	nop
    1984:	40000800 	.word	0x40000800
    1988:	000011af 	.word	0x000011af
    198c:	41002000 	.word	0x41002000
    1990:	2000192c 	.word	0x2000192c
    1994:	000026f5 	.word	0x000026f5

00001998 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1998:	b580      	push	{r7, lr}
    199a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    199c:	2244      	movs	r2, #68	; 0x44
    199e:	2104      	movs	r1, #4
    19a0:	483f      	ldr	r0, [pc, #252]	; (1aa0 <EXTERNAL_IRQ_0_init+0x108>)
    19a2:	4b40      	ldr	r3, [pc, #256]	; (1aa4 <EXTERNAL_IRQ_0_init+0x10c>)
    19a4:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    19a6:	4840      	ldr	r0, [pc, #256]	; (1aa8 <EXTERNAL_IRQ_0_init+0x110>)
    19a8:	4b40      	ldr	r3, [pc, #256]	; (1aac <EXTERNAL_IRQ_0_init+0x114>)
    19aa:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    19ac:	2101      	movs	r1, #1
    19ae:	2040      	movs	r0, #64	; 0x40
    19b0:	4b3f      	ldr	r3, [pc, #252]	; (1ab0 <EXTERNAL_IRQ_0_init+0x118>)
    19b2:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    19b4:	2100      	movs	r1, #0
    19b6:	2040      	movs	r0, #64	; 0x40
    19b8:	4b3e      	ldr	r3, [pc, #248]	; (1ab4 <EXTERNAL_IRQ_0_init+0x11c>)
    19ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    19bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    19c0:	2040      	movs	r0, #64	; 0x40
    19c2:	4b3d      	ldr	r3, [pc, #244]	; (1ab8 <EXTERNAL_IRQ_0_init+0x120>)
    19c4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    19c6:	2101      	movs	r1, #1
    19c8:	2021      	movs	r0, #33	; 0x21
    19ca:	4b39      	ldr	r3, [pc, #228]	; (1ab0 <EXTERNAL_IRQ_0_init+0x118>)
    19cc:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    19ce:	2100      	movs	r1, #0
    19d0:	2021      	movs	r0, #33	; 0x21
    19d2:	4b38      	ldr	r3, [pc, #224]	; (1ab4 <EXTERNAL_IRQ_0_init+0x11c>)
    19d4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    19d6:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    19da:	2021      	movs	r0, #33	; 0x21
    19dc:	4b36      	ldr	r3, [pc, #216]	; (1ab8 <EXTERNAL_IRQ_0_init+0x120>)
    19de:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    19e0:	2101      	movs	r1, #1
    19e2:	2003      	movs	r0, #3
    19e4:	4b32      	ldr	r3, [pc, #200]	; (1ab0 <EXTERNAL_IRQ_0_init+0x118>)
    19e6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    19e8:	2102      	movs	r1, #2
    19ea:	2003      	movs	r0, #3
    19ec:	4b31      	ldr	r3, [pc, #196]	; (1ab4 <EXTERNAL_IRQ_0_init+0x11c>)
    19ee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    19f0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    19f4:	2003      	movs	r0, #3
    19f6:	4b30      	ldr	r3, [pc, #192]	; (1ab8 <EXTERNAL_IRQ_0_init+0x120>)
    19f8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    19fa:	2101      	movs	r1, #1
    19fc:	2004      	movs	r0, #4
    19fe:	4b2c      	ldr	r3, [pc, #176]	; (1ab0 <EXTERNAL_IRQ_0_init+0x118>)
    1a00:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    1a02:	2102      	movs	r1, #2
    1a04:	2004      	movs	r0, #4
    1a06:	4b2b      	ldr	r3, [pc, #172]	; (1ab4 <EXTERNAL_IRQ_0_init+0x11c>)
    1a08:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    1a0a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1a0e:	2004      	movs	r0, #4
    1a10:	4b29      	ldr	r3, [pc, #164]	; (1ab8 <EXTERNAL_IRQ_0_init+0x120>)
    1a12:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    1a14:	2101      	movs	r1, #1
    1a16:	2005      	movs	r0, #5
    1a18:	4b25      	ldr	r3, [pc, #148]	; (1ab0 <EXTERNAL_IRQ_0_init+0x118>)
    1a1a:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    1a1c:	2102      	movs	r1, #2
    1a1e:	2005      	movs	r0, #5
    1a20:	4b24      	ldr	r3, [pc, #144]	; (1ab4 <EXTERNAL_IRQ_0_init+0x11c>)
    1a22:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    1a24:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    1a28:	2005      	movs	r0, #5
    1a2a:	4b23      	ldr	r3, [pc, #140]	; (1ab8 <EXTERNAL_IRQ_0_init+0x120>)
    1a2c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    1a2e:	2101      	movs	r1, #1
    1a30:	2056      	movs	r0, #86	; 0x56
    1a32:	4b1f      	ldr	r3, [pc, #124]	; (1ab0 <EXTERNAL_IRQ_0_init+0x118>)
    1a34:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    1a36:	2102      	movs	r1, #2
    1a38:	2056      	movs	r0, #86	; 0x56
    1a3a:	4b1e      	ldr	r3, [pc, #120]	; (1ab4 <EXTERNAL_IRQ_0_init+0x11c>)
    1a3c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    1a3e:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    1a42:	2056      	movs	r0, #86	; 0x56
    1a44:	4b1c      	ldr	r3, [pc, #112]	; (1ab8 <EXTERNAL_IRQ_0_init+0x120>)
    1a46:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    1a48:	2101      	movs	r1, #1
    1a4a:	2057      	movs	r0, #87	; 0x57
    1a4c:	4b18      	ldr	r3, [pc, #96]	; (1ab0 <EXTERNAL_IRQ_0_init+0x118>)
    1a4e:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    1a50:	2102      	movs	r1, #2
    1a52:	2057      	movs	r0, #87	; 0x57
    1a54:	4b17      	ldr	r3, [pc, #92]	; (1ab4 <EXTERNAL_IRQ_0_init+0x11c>)
    1a56:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    1a58:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1a5c:	2057      	movs	r0, #87	; 0x57
    1a5e:	4b16      	ldr	r3, [pc, #88]	; (1ab8 <EXTERNAL_IRQ_0_init+0x120>)
    1a60:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    1a62:	2101      	movs	r1, #1
    1a64:	2028      	movs	r0, #40	; 0x28
    1a66:	4b12      	ldr	r3, [pc, #72]	; (1ab0 <EXTERNAL_IRQ_0_init+0x118>)
    1a68:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    1a6a:	2100      	movs	r1, #0
    1a6c:	2028      	movs	r0, #40	; 0x28
    1a6e:	4b11      	ldr	r3, [pc, #68]	; (1ab4 <EXTERNAL_IRQ_0_init+0x11c>)
    1a70:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    1a72:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1a76:	2028      	movs	r0, #40	; 0x28
    1a78:	4b0f      	ldr	r3, [pc, #60]	; (1ab8 <EXTERNAL_IRQ_0_init+0x120>)
    1a7a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    1a7c:	2101      	movs	r1, #1
    1a7e:	2029      	movs	r0, #41	; 0x29
    1a80:	4b0b      	ldr	r3, [pc, #44]	; (1ab0 <EXTERNAL_IRQ_0_init+0x118>)
    1a82:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    1a84:	2100      	movs	r1, #0
    1a86:	2029      	movs	r0, #41	; 0x29
    1a88:	4b0a      	ldr	r3, [pc, #40]	; (1ab4 <EXTERNAL_IRQ_0_init+0x11c>)
    1a8a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    1a8c:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1a90:	2029      	movs	r0, #41	; 0x29
    1a92:	4b09      	ldr	r3, [pc, #36]	; (1ab8 <EXTERNAL_IRQ_0_init+0x120>)
    1a94:	4798      	blx	r3

	ext_irq_init();
    1a96:	4b09      	ldr	r3, [pc, #36]	; (1abc <EXTERNAL_IRQ_0_init+0x124>)
    1a98:	4798      	blx	r3
}
    1a9a:	bf00      	nop
    1a9c:	bd80      	pop	{r7, pc}
    1a9e:	bf00      	nop
    1aa0:	40001c00 	.word	0x40001c00
    1aa4:	00001049 	.word	0x00001049
    1aa8:	40000800 	.word	0x40000800
    1aac:	0000112f 	.word	0x0000112f
    1ab0:	0000189d 	.word	0x0000189d
    1ab4:	00001849 	.word	0x00001849
    1ab8:	0000187d 	.word	0x0000187d
    1abc:	000027bd 	.word	0x000027bd

00001ac0 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1ac0:	b580      	push	{r7, lr}
    1ac2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ac4:	2244      	movs	r2, #68	; 0x44
    1ac6:	210b      	movs	r1, #11
    1ac8:	4807      	ldr	r0, [pc, #28]	; (1ae8 <EVENT_SYSTEM_0_init+0x28>)
    1aca:	4b08      	ldr	r3, [pc, #32]	; (1aec <EVENT_SYSTEM_0_init+0x2c>)
    1acc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ace:	2244      	movs	r2, #68	; 0x44
    1ad0:	210c      	movs	r1, #12
    1ad2:	4805      	ldr	r0, [pc, #20]	; (1ae8 <EVENT_SYSTEM_0_init+0x28>)
    1ad4:	4b05      	ldr	r3, [pc, #20]	; (1aec <EVENT_SYSTEM_0_init+0x2c>)
    1ad6:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1ad8:	4805      	ldr	r0, [pc, #20]	; (1af0 <EVENT_SYSTEM_0_init+0x30>)
    1ada:	4b06      	ldr	r3, [pc, #24]	; (1af4 <EVENT_SYSTEM_0_init+0x34>)
    1adc:	4798      	blx	r3

	event_system_init();
    1ade:	4b06      	ldr	r3, [pc, #24]	; (1af8 <EVENT_SYSTEM_0_init+0x38>)
    1ae0:	4798      	blx	r3
}
    1ae2:	bf00      	nop
    1ae4:	bd80      	pop	{r7, pc}
    1ae6:	bf00      	nop
    1ae8:	40001c00 	.word	0x40001c00
    1aec:	00001049 	.word	0x00001049
    1af0:	40000800 	.word	0x40000800
    1af4:	000011cf 	.word	0x000011cf
    1af8:	000027a9 	.word	0x000027a9

00001afc <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    1afc:	b580      	push	{r7, lr}
    1afe:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    1b00:	2101      	movs	r1, #1
    1b02:	202b      	movs	r0, #43	; 0x2b
    1b04:	4b2b      	ldr	r3, [pc, #172]	; (1bb4 <QSPI_N25Q256_PORT_init+0xb8>)
    1b06:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    1b08:	2100      	movs	r1, #0
    1b0a:	202b      	movs	r0, #43	; 0x2b
    1b0c:	4b2a      	ldr	r3, [pc, #168]	; (1bb8 <QSPI_N25Q256_PORT_init+0xbc>)
    1b0e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    1b10:	492a      	ldr	r1, [pc, #168]	; (1bbc <QSPI_N25Q256_PORT_init+0xc0>)
    1b12:	202b      	movs	r0, #43	; 0x2b
    1b14:	4b2a      	ldr	r3, [pc, #168]	; (1bc0 <QSPI_N25Q256_PORT_init+0xc4>)
    1b16:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1b18:	2102      	movs	r1, #2
    1b1a:	2008      	movs	r0, #8
    1b1c:	4b25      	ldr	r3, [pc, #148]	; (1bb4 <QSPI_N25Q256_PORT_init+0xb8>)
    1b1e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    1b20:	2100      	movs	r1, #0
    1b22:	2008      	movs	r0, #8
    1b24:	4b27      	ldr	r3, [pc, #156]	; (1bc4 <QSPI_N25Q256_PORT_init+0xc8>)
    1b26:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1b28:	2100      	movs	r1, #0
    1b2a:	2008      	movs	r0, #8
    1b2c:	4b22      	ldr	r3, [pc, #136]	; (1bb8 <QSPI_N25Q256_PORT_init+0xbc>)
    1b2e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1b30:	4925      	ldr	r1, [pc, #148]	; (1bc8 <QSPI_N25Q256_PORT_init+0xcc>)
    1b32:	2008      	movs	r0, #8
    1b34:	4b22      	ldr	r3, [pc, #136]	; (1bc0 <QSPI_N25Q256_PORT_init+0xc4>)
    1b36:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1b38:	2102      	movs	r1, #2
    1b3a:	2009      	movs	r0, #9
    1b3c:	4b1d      	ldr	r3, [pc, #116]	; (1bb4 <QSPI_N25Q256_PORT_init+0xb8>)
    1b3e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1b40:	2100      	movs	r1, #0
    1b42:	2009      	movs	r0, #9
    1b44:	4b1f      	ldr	r3, [pc, #124]	; (1bc4 <QSPI_N25Q256_PORT_init+0xc8>)
    1b46:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1b48:	2100      	movs	r1, #0
    1b4a:	2009      	movs	r0, #9
    1b4c:	4b1a      	ldr	r3, [pc, #104]	; (1bb8 <QSPI_N25Q256_PORT_init+0xbc>)
    1b4e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1b50:	491e      	ldr	r1, [pc, #120]	; (1bcc <QSPI_N25Q256_PORT_init+0xd0>)
    1b52:	2009      	movs	r0, #9
    1b54:	4b1a      	ldr	r3, [pc, #104]	; (1bc0 <QSPI_N25Q256_PORT_init+0xc4>)
    1b56:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1b58:	2102      	movs	r1, #2
    1b5a:	200a      	movs	r0, #10
    1b5c:	4b15      	ldr	r3, [pc, #84]	; (1bb4 <QSPI_N25Q256_PORT_init+0xb8>)
    1b5e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1b60:	2100      	movs	r1, #0
    1b62:	200a      	movs	r0, #10
    1b64:	4b17      	ldr	r3, [pc, #92]	; (1bc4 <QSPI_N25Q256_PORT_init+0xc8>)
    1b66:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1b68:	2100      	movs	r1, #0
    1b6a:	200a      	movs	r0, #10
    1b6c:	4b12      	ldr	r3, [pc, #72]	; (1bb8 <QSPI_N25Q256_PORT_init+0xbc>)
    1b6e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1b70:	4917      	ldr	r1, [pc, #92]	; (1bd0 <QSPI_N25Q256_PORT_init+0xd4>)
    1b72:	200a      	movs	r0, #10
    1b74:	4b12      	ldr	r3, [pc, #72]	; (1bc0 <QSPI_N25Q256_PORT_init+0xc4>)
    1b76:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1b78:	2102      	movs	r1, #2
    1b7a:	200b      	movs	r0, #11
    1b7c:	4b0d      	ldr	r3, [pc, #52]	; (1bb4 <QSPI_N25Q256_PORT_init+0xb8>)
    1b7e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1b80:	2100      	movs	r1, #0
    1b82:	200b      	movs	r0, #11
    1b84:	4b0f      	ldr	r3, [pc, #60]	; (1bc4 <QSPI_N25Q256_PORT_init+0xc8>)
    1b86:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1b88:	2100      	movs	r1, #0
    1b8a:	200b      	movs	r0, #11
    1b8c:	4b0a      	ldr	r3, [pc, #40]	; (1bb8 <QSPI_N25Q256_PORT_init+0xbc>)
    1b8e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1b90:	4910      	ldr	r1, [pc, #64]	; (1bd4 <QSPI_N25Q256_PORT_init+0xd8>)
    1b92:	200b      	movs	r0, #11
    1b94:	4b0a      	ldr	r3, [pc, #40]	; (1bc0 <QSPI_N25Q256_PORT_init+0xc4>)
    1b96:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1b98:	2101      	movs	r1, #1
    1b9a:	202a      	movs	r0, #42	; 0x2a
    1b9c:	4b05      	ldr	r3, [pc, #20]	; (1bb4 <QSPI_N25Q256_PORT_init+0xb8>)
    1b9e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1ba0:	2100      	movs	r1, #0
    1ba2:	202a      	movs	r0, #42	; 0x2a
    1ba4:	4b04      	ldr	r3, [pc, #16]	; (1bb8 <QSPI_N25Q256_PORT_init+0xbc>)
    1ba6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1ba8:	490b      	ldr	r1, [pc, #44]	; (1bd8 <QSPI_N25Q256_PORT_init+0xdc>)
    1baa:	202a      	movs	r0, #42	; 0x2a
    1bac:	4b04      	ldr	r3, [pc, #16]	; (1bc0 <QSPI_N25Q256_PORT_init+0xc4>)
    1bae:	4798      	blx	r3
}
    1bb0:	bf00      	nop
    1bb2:	bd80      	pop	{r7, pc}
    1bb4:	0000189d 	.word	0x0000189d
    1bb8:	00001849 	.word	0x00001849
    1bbc:	002b0007 	.word	0x002b0007
    1bc0:	0000187d 	.word	0x0000187d
    1bc4:	000018d5 	.word	0x000018d5
    1bc8:	00080007 	.word	0x00080007
    1bcc:	00090007 	.word	0x00090007
    1bd0:	000a0007 	.word	0x000a0007
    1bd4:	000b0007 	.word	0x000b0007
    1bd8:	002a0007 	.word	0x002a0007

00001bdc <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1bdc:	b580      	push	{r7, lr}
    1bde:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1be0:	4805      	ldr	r0, [pc, #20]	; (1bf8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1be2:	4b06      	ldr	r3, [pc, #24]	; (1bfc <QSPI_N25Q256_CLOCK_init+0x20>)
    1be4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    1be6:	4804      	ldr	r0, [pc, #16]	; (1bf8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1be8:	4b05      	ldr	r3, [pc, #20]	; (1c00 <QSPI_N25Q256_CLOCK_init+0x24>)
    1bea:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1bec:	4802      	ldr	r0, [pc, #8]	; (1bf8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1bee:	4b05      	ldr	r3, [pc, #20]	; (1c04 <QSPI_N25Q256_CLOCK_init+0x28>)
    1bf0:	4798      	blx	r3
}
    1bf2:	bf00      	nop
    1bf4:	bd80      	pop	{r7, pc}
    1bf6:	bf00      	nop
    1bf8:	40000800 	.word	0x40000800
    1bfc:	0000108f 	.word	0x0000108f
    1c00:	000010cf 	.word	0x000010cf
    1c04:	0000128f 	.word	0x0000128f

00001c08 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    1c08:	b580      	push	{r7, lr}
    1c0a:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    1c0c:	4b04      	ldr	r3, [pc, #16]	; (1c20 <QSPI_N25Q256_init+0x18>)
    1c0e:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1c10:	4904      	ldr	r1, [pc, #16]	; (1c24 <QSPI_N25Q256_init+0x1c>)
    1c12:	4805      	ldr	r0, [pc, #20]	; (1c28 <QSPI_N25Q256_init+0x20>)
    1c14:	4b05      	ldr	r3, [pc, #20]	; (1c2c <QSPI_N25Q256_init+0x24>)
    1c16:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1c18:	4b05      	ldr	r3, [pc, #20]	; (1c30 <QSPI_N25Q256_init+0x28>)
    1c1a:	4798      	blx	r3
}
    1c1c:	bf00      	nop
    1c1e:	bd80      	pop	{r7, pc}
    1c20:	00001bdd 	.word	0x00001bdd
    1c24:	42003400 	.word	0x42003400
    1c28:	200017a0 	.word	0x200017a0
    1c2c:	00002e31 	.word	0x00002e31
    1c30:	00001afd 	.word	0x00001afd

00001c34 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1c34:	b580      	push	{r7, lr}
    1c36:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1c38:	4802      	ldr	r0, [pc, #8]	; (1c44 <DATETIME_CLOCK_CLOCK_init+0x10>)
    1c3a:	4b03      	ldr	r3, [pc, #12]	; (1c48 <DATETIME_CLOCK_CLOCK_init+0x14>)
    1c3c:	4798      	blx	r3
}
    1c3e:	bf00      	nop
    1c40:	bd80      	pop	{r7, pc}
    1c42:	bf00      	nop
    1c44:	40000800 	.word	0x40000800
    1c48:	0000110f 	.word	0x0000110f

00001c4c <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1c4c:	b580      	push	{r7, lr}
    1c4e:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1c50:	4b03      	ldr	r3, [pc, #12]	; (1c60 <DATETIME_CLOCK_init+0x14>)
    1c52:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1c54:	4903      	ldr	r1, [pc, #12]	; (1c64 <DATETIME_CLOCK_init+0x18>)
    1c56:	4804      	ldr	r0, [pc, #16]	; (1c68 <DATETIME_CLOCK_init+0x1c>)
    1c58:	4b04      	ldr	r3, [pc, #16]	; (1c6c <DATETIME_CLOCK_init+0x20>)
    1c5a:	4798      	blx	r3
}
    1c5c:	bf00      	nop
    1c5e:	bd80      	pop	{r7, pc}
    1c60:	00001c35 	.word	0x00001c35
    1c64:	40002400 	.word	0x40002400
    1c68:	20001908 	.word	0x20001908
    1c6c:	00002599 	.word	0x00002599

00001c70 <I2C_SHARED_PORT_init>:

void I2C_SHARED_PORT_init(void)
{
    1c70:	b580      	push	{r7, lr}
    1c72:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    1c74:	2100      	movs	r1, #0
    1c76:	2010      	movs	r0, #16
    1c78:	4b07      	ldr	r3, [pc, #28]	; (1c98 <I2C_SHARED_PORT_init+0x28>)
    1c7a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1c7c:	4907      	ldr	r1, [pc, #28]	; (1c9c <I2C_SHARED_PORT_init+0x2c>)
    1c7e:	2010      	movs	r0, #16
    1c80:	4b07      	ldr	r3, [pc, #28]	; (1ca0 <I2C_SHARED_PORT_init+0x30>)
    1c82:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    1c84:	2100      	movs	r1, #0
    1c86:	2011      	movs	r0, #17
    1c88:	4b03      	ldr	r3, [pc, #12]	; (1c98 <I2C_SHARED_PORT_init+0x28>)
    1c8a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1c8c:	4905      	ldr	r1, [pc, #20]	; (1ca4 <I2C_SHARED_PORT_init+0x34>)
    1c8e:	2011      	movs	r0, #17
    1c90:	4b03      	ldr	r3, [pc, #12]	; (1ca0 <I2C_SHARED_PORT_init+0x30>)
    1c92:	4798      	blx	r3
}
    1c94:	bf00      	nop
    1c96:	bd80      	pop	{r7, pc}
    1c98:	00001849 	.word	0x00001849
    1c9c:	00100002 	.word	0x00100002
    1ca0:	0000187d 	.word	0x0000187d
    1ca4:	00110002 	.word	0x00110002

00001ca8 <I2C_SHARED_CLOCK_init>:

void I2C_SHARED_CLOCK_init(void)
{
    1ca8:	b580      	push	{r7, lr}
    1caa:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1cac:	2245      	movs	r2, #69	; 0x45
    1cae:	2108      	movs	r1, #8
    1cb0:	4806      	ldr	r0, [pc, #24]	; (1ccc <I2C_SHARED_CLOCK_init+0x24>)
    1cb2:	4b07      	ldr	r3, [pc, #28]	; (1cd0 <I2C_SHARED_CLOCK_init+0x28>)
    1cb4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1cb6:	224a      	movs	r2, #74	; 0x4a
    1cb8:	2103      	movs	r1, #3
    1cba:	4804      	ldr	r0, [pc, #16]	; (1ccc <I2C_SHARED_CLOCK_init+0x24>)
    1cbc:	4b04      	ldr	r3, [pc, #16]	; (1cd0 <I2C_SHARED_CLOCK_init+0x28>)
    1cbe:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1cc0:	4804      	ldr	r0, [pc, #16]	; (1cd4 <I2C_SHARED_CLOCK_init+0x2c>)
    1cc2:	4b05      	ldr	r3, [pc, #20]	; (1cd8 <I2C_SHARED_CLOCK_init+0x30>)
    1cc4:	4798      	blx	r3
}
    1cc6:	bf00      	nop
    1cc8:	bd80      	pop	{r7, pc}
    1cca:	bf00      	nop
    1ccc:	40001c00 	.word	0x40001c00
    1cd0:	00001049 	.word	0x00001049
    1cd4:	40000800 	.word	0x40000800
    1cd8:	0000114f 	.word	0x0000114f

00001cdc <I2C_SHARED_init>:

void I2C_SHARED_init(void)
{
    1cdc:	b580      	push	{r7, lr}
    1cde:	af00      	add	r7, sp, #0
	I2C_SHARED_CLOCK_init();
    1ce0:	4b04      	ldr	r3, [pc, #16]	; (1cf4 <I2C_SHARED_init+0x18>)
    1ce2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_SHARED, SERCOM1);
    1ce4:	4904      	ldr	r1, [pc, #16]	; (1cf8 <I2C_SHARED_init+0x1c>)
    1ce6:	4805      	ldr	r0, [pc, #20]	; (1cfc <I2C_SHARED_init+0x20>)
    1ce8:	4b05      	ldr	r3, [pc, #20]	; (1d00 <I2C_SHARED_init+0x24>)
    1cea:	4798      	blx	r3
	I2C_SHARED_PORT_init();
    1cec:	4b05      	ldr	r3, [pc, #20]	; (1d04 <I2C_SHARED_init+0x28>)
    1cee:	4798      	blx	r3
}
    1cf0:	bf00      	nop
    1cf2:	bd80      	pop	{r7, pc}
    1cf4:	00001ca9 	.word	0x00001ca9
    1cf8:	40003400 	.word	0x40003400
    1cfc:	20001888 	.word	0x20001888
    1d00:	00002c55 	.word	0x00002c55
    1d04:	00001c71 	.word	0x00001c71

00001d08 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1d08:	b580      	push	{r7, lr}
    1d0a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    1d0c:	2100      	movs	r1, #0
    1d0e:	203b      	movs	r0, #59	; 0x3b
    1d10:	4b11      	ldr	r3, [pc, #68]	; (1d58 <SPI_TEMP_PORT_init+0x50>)
    1d12:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    1d14:	2102      	movs	r1, #2
    1d16:	203b      	movs	r0, #59	; 0x3b
    1d18:	4b10      	ldr	r3, [pc, #64]	; (1d5c <SPI_TEMP_PORT_init+0x54>)
    1d1a:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    1d1c:	4910      	ldr	r1, [pc, #64]	; (1d60 <SPI_TEMP_PORT_init+0x58>)
    1d1e:	203b      	movs	r0, #59	; 0x3b
    1d20:	4b10      	ldr	r3, [pc, #64]	; (1d64 <SPI_TEMP_PORT_init+0x5c>)
    1d22:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    1d24:	2100      	movs	r1, #0
    1d26:	203a      	movs	r0, #58	; 0x3a
    1d28:	4b0b      	ldr	r3, [pc, #44]	; (1d58 <SPI_TEMP_PORT_init+0x50>)
    1d2a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1d2c:	2102      	movs	r1, #2
    1d2e:	203a      	movs	r0, #58	; 0x3a
    1d30:	4b0a      	ldr	r3, [pc, #40]	; (1d5c <SPI_TEMP_PORT_init+0x54>)
    1d32:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    1d34:	490c      	ldr	r1, [pc, #48]	; (1d68 <SPI_TEMP_PORT_init+0x60>)
    1d36:	203a      	movs	r0, #58	; 0x3a
    1d38:	4b0a      	ldr	r3, [pc, #40]	; (1d64 <SPI_TEMP_PORT_init+0x5c>)
    1d3a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1d3c:	2101      	movs	r1, #1
    1d3e:	203c      	movs	r0, #60	; 0x3c
    1d40:	4b06      	ldr	r3, [pc, #24]	; (1d5c <SPI_TEMP_PORT_init+0x54>)
    1d42:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    1d44:	2100      	movs	r1, #0
    1d46:	203c      	movs	r0, #60	; 0x3c
    1d48:	4b08      	ldr	r3, [pc, #32]	; (1d6c <SPI_TEMP_PORT_init+0x64>)
    1d4a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1d4c:	4908      	ldr	r1, [pc, #32]	; (1d70 <SPI_TEMP_PORT_init+0x68>)
    1d4e:	203c      	movs	r0, #60	; 0x3c
    1d50:	4b04      	ldr	r3, [pc, #16]	; (1d64 <SPI_TEMP_PORT_init+0x5c>)
    1d52:	4798      	blx	r3
}
    1d54:	bf00      	nop
    1d56:	bd80      	pop	{r7, pc}
    1d58:	000018d5 	.word	0x000018d5
    1d5c:	0000189d 	.word	0x0000189d
    1d60:	003b0003 	.word	0x003b0003
    1d64:	0000187d 	.word	0x0000187d
    1d68:	003a0003 	.word	0x003a0003
    1d6c:	00001849 	.word	0x00001849
    1d70:	003c0003 	.word	0x003c0003

00001d74 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1d74:	b580      	push	{r7, lr}
    1d76:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d78:	2245      	movs	r2, #69	; 0x45
    1d7a:	2122      	movs	r1, #34	; 0x22
    1d7c:	4806      	ldr	r0, [pc, #24]	; (1d98 <SPI_TEMP_CLOCK_init+0x24>)
    1d7e:	4b07      	ldr	r3, [pc, #28]	; (1d9c <SPI_TEMP_CLOCK_init+0x28>)
    1d80:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d82:	224a      	movs	r2, #74	; 0x4a
    1d84:	2103      	movs	r1, #3
    1d86:	4804      	ldr	r0, [pc, #16]	; (1d98 <SPI_TEMP_CLOCK_init+0x24>)
    1d88:	4b04      	ldr	r3, [pc, #16]	; (1d9c <SPI_TEMP_CLOCK_init+0x28>)
    1d8a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1d8c:	4804      	ldr	r0, [pc, #16]	; (1da0 <SPI_TEMP_CLOCK_init+0x2c>)
    1d8e:	4b05      	ldr	r3, [pc, #20]	; (1da4 <SPI_TEMP_CLOCK_init+0x30>)
    1d90:	4798      	blx	r3
}
    1d92:	bf00      	nop
    1d94:	bd80      	pop	{r7, pc}
    1d96:	bf00      	nop
    1d98:	40001c00 	.word	0x40001c00
    1d9c:	00001049 	.word	0x00001049
    1da0:	40000800 	.word	0x40000800
    1da4:	000012af 	.word	0x000012af

00001da8 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1da8:	b580      	push	{r7, lr}
    1daa:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1dac:	4b05      	ldr	r3, [pc, #20]	; (1dc4 <SPI_TEMP_init+0x1c>)
    1dae:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    1db0:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1db4:	4804      	ldr	r0, [pc, #16]	; (1dc8 <SPI_TEMP_init+0x20>)
    1db6:	4b05      	ldr	r3, [pc, #20]	; (1dcc <SPI_TEMP_init+0x24>)
    1db8:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1dba:	4b05      	ldr	r3, [pc, #20]	; (1dd0 <SPI_TEMP_init+0x28>)
    1dbc:	4798      	blx	r3
}
    1dbe:	bf00      	nop
    1dc0:	bd80      	pop	{r7, pc}
    1dc2:	bf00      	nop
    1dc4:	00001d75 	.word	0x00001d75
    1dc8:	20001768 	.word	0x20001768
    1dcc:	00002f41 	.word	0x00002f41
    1dd0:	00001d09 	.word	0x00001d09

00001dd4 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    1dd4:	b580      	push	{r7, lr}
    1dd6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1dd8:	2100      	movs	r1, #0
    1dda:	2017      	movs	r0, #23
    1ddc:	4b07      	ldr	r3, [pc, #28]	; (1dfc <I2C_EXPANDER_PORT_init+0x28>)
    1dde:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    1de0:	4907      	ldr	r1, [pc, #28]	; (1e00 <I2C_EXPANDER_PORT_init+0x2c>)
    1de2:	2017      	movs	r0, #23
    1de4:	4b07      	ldr	r3, [pc, #28]	; (1e04 <I2C_EXPANDER_PORT_init+0x30>)
    1de6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1de8:	2100      	movs	r1, #0
    1dea:	2016      	movs	r0, #22
    1dec:	4b03      	ldr	r3, [pc, #12]	; (1dfc <I2C_EXPANDER_PORT_init+0x28>)
    1dee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    1df0:	4905      	ldr	r1, [pc, #20]	; (1e08 <I2C_EXPANDER_PORT_init+0x34>)
    1df2:	2016      	movs	r0, #22
    1df4:	4b03      	ldr	r3, [pc, #12]	; (1e04 <I2C_EXPANDER_PORT_init+0x30>)
    1df6:	4798      	blx	r3
}
    1df8:	bf00      	nop
    1dfa:	bd80      	pop	{r7, pc}
    1dfc:	00001849 	.word	0x00001849
    1e00:	00170003 	.word	0x00170003
    1e04:	0000187d 	.word	0x0000187d
    1e08:	00160003 	.word	0x00160003

00001e0c <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    1e0c:	b580      	push	{r7, lr}
    1e0e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e10:	2244      	movs	r2, #68	; 0x44
    1e12:	2123      	movs	r1, #35	; 0x23
    1e14:	4806      	ldr	r0, [pc, #24]	; (1e30 <I2C_EXPANDER_CLOCK_init+0x24>)
    1e16:	4b07      	ldr	r3, [pc, #28]	; (1e34 <I2C_EXPANDER_CLOCK_init+0x28>)
    1e18:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e1a:	224a      	movs	r2, #74	; 0x4a
    1e1c:	2103      	movs	r1, #3
    1e1e:	4804      	ldr	r0, [pc, #16]	; (1e30 <I2C_EXPANDER_CLOCK_init+0x24>)
    1e20:	4b04      	ldr	r3, [pc, #16]	; (1e34 <I2C_EXPANDER_CLOCK_init+0x28>)
    1e22:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    1e24:	4804      	ldr	r0, [pc, #16]	; (1e38 <I2C_EXPANDER_CLOCK_init+0x2c>)
    1e26:	4b05      	ldr	r3, [pc, #20]	; (1e3c <I2C_EXPANDER_CLOCK_init+0x30>)
    1e28:	4798      	blx	r3
}
    1e2a:	bf00      	nop
    1e2c:	bd80      	pop	{r7, pc}
    1e2e:	bf00      	nop
    1e30:	40001c00 	.word	0x40001c00
    1e34:	00001049 	.word	0x00001049
    1e38:	40000800 	.word	0x40000800
    1e3c:	000012cf 	.word	0x000012cf

00001e40 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    1e40:	b580      	push	{r7, lr}
    1e42:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    1e44:	4b04      	ldr	r3, [pc, #16]	; (1e58 <I2C_EXPANDER_init+0x18>)
    1e46:	4798      	blx	r3
	i2c_m_sync_init(&I2C_EXPANDER, SERCOM5);
    1e48:	4904      	ldr	r1, [pc, #16]	; (1e5c <I2C_EXPANDER_init+0x1c>)
    1e4a:	4805      	ldr	r0, [pc, #20]	; (1e60 <I2C_EXPANDER_init+0x20>)
    1e4c:	4b05      	ldr	r3, [pc, #20]	; (1e64 <I2C_EXPANDER_init+0x24>)
    1e4e:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    1e50:	4b05      	ldr	r3, [pc, #20]	; (1e68 <I2C_EXPANDER_init+0x28>)
    1e52:	4798      	blx	r3
}
    1e54:	bf00      	nop
    1e56:	bd80      	pop	{r7, pc}
    1e58:	00001e0d 	.word	0x00001e0d
    1e5c:	43000400 	.word	0x43000400
    1e60:	20001868 	.word	0x20001868
    1e64:	00002c55 	.word	0x00002c55
    1e68:	00001dd5 	.word	0x00001dd5

00001e6c <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1e6c:	b580      	push	{r7, lr}
    1e6e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1e70:	2100      	movs	r1, #0
    1e72:	2044      	movs	r0, #68	; 0x44
    1e74:	4b11      	ldr	r3, [pc, #68]	; (1ebc <SPI_HI3593_PORT_init+0x50>)
    1e76:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1e78:	2102      	movs	r1, #2
    1e7a:	2044      	movs	r0, #68	; 0x44
    1e7c:	4b10      	ldr	r3, [pc, #64]	; (1ec0 <SPI_HI3593_PORT_init+0x54>)
    1e7e:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1e80:	4910      	ldr	r1, [pc, #64]	; (1ec4 <SPI_HI3593_PORT_init+0x58>)
    1e82:	2044      	movs	r0, #68	; 0x44
    1e84:	4b10      	ldr	r3, [pc, #64]	; (1ec8 <SPI_HI3593_PORT_init+0x5c>)
    1e86:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1e88:	2100      	movs	r1, #0
    1e8a:	2045      	movs	r0, #69	; 0x45
    1e8c:	4b0b      	ldr	r3, [pc, #44]	; (1ebc <SPI_HI3593_PORT_init+0x50>)
    1e8e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1e90:	2102      	movs	r1, #2
    1e92:	2045      	movs	r0, #69	; 0x45
    1e94:	4b0a      	ldr	r3, [pc, #40]	; (1ec0 <SPI_HI3593_PORT_init+0x54>)
    1e96:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1e98:	490c      	ldr	r1, [pc, #48]	; (1ecc <SPI_HI3593_PORT_init+0x60>)
    1e9a:	2045      	movs	r0, #69	; 0x45
    1e9c:	4b0a      	ldr	r3, [pc, #40]	; (1ec8 <SPI_HI3593_PORT_init+0x5c>)
    1e9e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1ea0:	2101      	movs	r1, #1
    1ea2:	2047      	movs	r0, #71	; 0x47
    1ea4:	4b06      	ldr	r3, [pc, #24]	; (1ec0 <SPI_HI3593_PORT_init+0x54>)
    1ea6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1ea8:	2100      	movs	r1, #0
    1eaa:	2047      	movs	r0, #71	; 0x47
    1eac:	4b08      	ldr	r3, [pc, #32]	; (1ed0 <SPI_HI3593_PORT_init+0x64>)
    1eae:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    1eb0:	4908      	ldr	r1, [pc, #32]	; (1ed4 <SPI_HI3593_PORT_init+0x68>)
    1eb2:	2047      	movs	r0, #71	; 0x47
    1eb4:	4b04      	ldr	r3, [pc, #16]	; (1ec8 <SPI_HI3593_PORT_init+0x5c>)
    1eb6:	4798      	blx	r3
}
    1eb8:	bf00      	nop
    1eba:	bd80      	pop	{r7, pc}
    1ebc:	000018d5 	.word	0x000018d5
    1ec0:	0000189d 	.word	0x0000189d
    1ec4:	00440002 	.word	0x00440002
    1ec8:	0000187d 	.word	0x0000187d
    1ecc:	00450002 	.word	0x00450002
    1ed0:	00001849 	.word	0x00001849
    1ed4:	00470002 	.word	0x00470002

00001ed8 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1ed8:	b580      	push	{r7, lr}
    1eda:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1edc:	2242      	movs	r2, #66	; 0x42
    1ede:	2124      	movs	r1, #36	; 0x24
    1ee0:	4806      	ldr	r0, [pc, #24]	; (1efc <SPI_HI3593_CLOCK_init+0x24>)
    1ee2:	4b07      	ldr	r3, [pc, #28]	; (1f00 <SPI_HI3593_CLOCK_init+0x28>)
    1ee4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ee6:	224a      	movs	r2, #74	; 0x4a
    1ee8:	2103      	movs	r1, #3
    1eea:	4804      	ldr	r0, [pc, #16]	; (1efc <SPI_HI3593_CLOCK_init+0x24>)
    1eec:	4b04      	ldr	r3, [pc, #16]	; (1f00 <SPI_HI3593_CLOCK_init+0x28>)
    1eee:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1ef0:	4804      	ldr	r0, [pc, #16]	; (1f04 <SPI_HI3593_CLOCK_init+0x2c>)
    1ef2:	4b05      	ldr	r3, [pc, #20]	; (1f08 <SPI_HI3593_CLOCK_init+0x30>)
    1ef4:	4798      	blx	r3
}
    1ef6:	bf00      	nop
    1ef8:	bd80      	pop	{r7, pc}
    1efa:	bf00      	nop
    1efc:	40001c00 	.word	0x40001c00
    1f00:	00001049 	.word	0x00001049
    1f04:	40000800 	.word	0x40000800
    1f08:	000012ef 	.word	0x000012ef

00001f0c <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1f0c:	b580      	push	{r7, lr}
    1f0e:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1f10:	4b04      	ldr	r3, [pc, #16]	; (1f24 <SPI_HI3593_init+0x18>)
    1f12:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1f14:	4904      	ldr	r1, [pc, #16]	; (1f28 <SPI_HI3593_init+0x1c>)
    1f16:	4805      	ldr	r0, [pc, #20]	; (1f2c <SPI_HI3593_init+0x20>)
    1f18:	4b05      	ldr	r3, [pc, #20]	; (1f30 <SPI_HI3593_init+0x24>)
    1f1a:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1f1c:	4b05      	ldr	r3, [pc, #20]	; (1f34 <SPI_HI3593_init+0x28>)
    1f1e:	4798      	blx	r3
}
    1f20:	bf00      	nop
    1f22:	bd80      	pop	{r7, pc}
    1f24:	00001ed9 	.word	0x00001ed9
    1f28:	43000800 	.word	0x43000800
    1f2c:	20001750 	.word	0x20001750
    1f30:	00002f41 	.word	0x00002f41
    1f34:	00001e6d 	.word	0x00001e6d

00001f38 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    1f38:	b580      	push	{r7, lr}
    1f3a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1f3c:	2100      	movs	r1, #0
    1f3e:	2068      	movs	r0, #104	; 0x68
    1f40:	4b07      	ldr	r3, [pc, #28]	; (1f60 <I2C_EEPROM_PORT_init+0x28>)
    1f42:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1f44:	4907      	ldr	r1, [pc, #28]	; (1f64 <I2C_EEPROM_PORT_init+0x2c>)
    1f46:	2068      	movs	r0, #104	; 0x68
    1f48:	4b07      	ldr	r3, [pc, #28]	; (1f68 <I2C_EEPROM_PORT_init+0x30>)
    1f4a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1f4c:	2100      	movs	r1, #0
    1f4e:	2069      	movs	r0, #105	; 0x69
    1f50:	4b03      	ldr	r3, [pc, #12]	; (1f60 <I2C_EEPROM_PORT_init+0x28>)
    1f52:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1f54:	4905      	ldr	r1, [pc, #20]	; (1f6c <I2C_EEPROM_PORT_init+0x34>)
    1f56:	2069      	movs	r0, #105	; 0x69
    1f58:	4b03      	ldr	r3, [pc, #12]	; (1f68 <I2C_EEPROM_PORT_init+0x30>)
    1f5a:	4798      	blx	r3
}
    1f5c:	bf00      	nop
    1f5e:	bd80      	pop	{r7, pc}
    1f60:	00001849 	.word	0x00001849
    1f64:	00680002 	.word	0x00680002
    1f68:	0000187d 	.word	0x0000187d
    1f6c:	00690002 	.word	0x00690002

00001f70 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    1f70:	b580      	push	{r7, lr}
    1f72:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f74:	2248      	movs	r2, #72	; 0x48
    1f76:	2125      	movs	r1, #37	; 0x25
    1f78:	4806      	ldr	r0, [pc, #24]	; (1f94 <I2C_EEPROM_CLOCK_init+0x24>)
    1f7a:	4b07      	ldr	r3, [pc, #28]	; (1f98 <I2C_EEPROM_CLOCK_init+0x28>)
    1f7c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f7e:	224a      	movs	r2, #74	; 0x4a
    1f80:	2103      	movs	r1, #3
    1f82:	4804      	ldr	r0, [pc, #16]	; (1f94 <I2C_EEPROM_CLOCK_init+0x24>)
    1f84:	4b04      	ldr	r3, [pc, #16]	; (1f98 <I2C_EEPROM_CLOCK_init+0x28>)
    1f86:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1f88:	4804      	ldr	r0, [pc, #16]	; (1f9c <I2C_EEPROM_CLOCK_init+0x2c>)
    1f8a:	4b05      	ldr	r3, [pc, #20]	; (1fa0 <I2C_EEPROM_CLOCK_init+0x30>)
    1f8c:	4798      	blx	r3
}
    1f8e:	bf00      	nop
    1f90:	bd80      	pop	{r7, pc}
    1f92:	bf00      	nop
    1f94:	40001c00 	.word	0x40001c00
    1f98:	00001049 	.word	0x00001049
    1f9c:	40000800 	.word	0x40000800
    1fa0:	0000130f 	.word	0x0000130f

00001fa4 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    1fa4:	b580      	push	{r7, lr}
    1fa6:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    1fa8:	4b04      	ldr	r3, [pc, #16]	; (1fbc <I2C_EEPROM_init+0x18>)
    1faa:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    1fac:	4904      	ldr	r1, [pc, #16]	; (1fc0 <I2C_EEPROM_init+0x1c>)
    1fae:	4805      	ldr	r0, [pc, #20]	; (1fc4 <I2C_EEPROM_init+0x20>)
    1fb0:	4b05      	ldr	r3, [pc, #20]	; (1fc8 <I2C_EEPROM_init+0x24>)
    1fb2:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    1fb4:	4b05      	ldr	r3, [pc, #20]	; (1fcc <I2C_EEPROM_init+0x28>)
    1fb6:	4798      	blx	r3
}
    1fb8:	bf00      	nop
    1fba:	bd80      	pop	{r7, pc}
    1fbc:	00001f71 	.word	0x00001f71
    1fc0:	43000c00 	.word	0x43000c00
    1fc4:	200018c8 	.word	0x200018c8
    1fc8:	00002b21 	.word	0x00002b21
    1fcc:	00001f39 	.word	0x00001f39

00001fd0 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1fd0:	b580      	push	{r7, lr}
    1fd2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1fd4:	4808      	ldr	r0, [pc, #32]	; (1ff8 <TIMER_USB_init+0x28>)
    1fd6:	4b09      	ldr	r3, [pc, #36]	; (1ffc <TIMER_USB_init+0x2c>)
    1fd8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1fda:	2243      	movs	r2, #67	; 0x43
    1fdc:	2109      	movs	r1, #9
    1fde:	4808      	ldr	r0, [pc, #32]	; (2000 <TIMER_USB_init+0x30>)
    1fe0:	4b08      	ldr	r3, [pc, #32]	; (2004 <TIMER_USB_init+0x34>)
    1fe2:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    1fe4:	4b08      	ldr	r3, [pc, #32]	; (2008 <TIMER_USB_init+0x38>)
    1fe6:	4798      	blx	r3
    1fe8:	4603      	mov	r3, r0
    1fea:	461a      	mov	r2, r3
    1fec:	4907      	ldr	r1, [pc, #28]	; (200c <TIMER_USB_init+0x3c>)
    1fee:	4808      	ldr	r0, [pc, #32]	; (2010 <TIMER_USB_init+0x40>)
    1ff0:	4b08      	ldr	r3, [pc, #32]	; (2014 <TIMER_USB_init+0x44>)
    1ff2:	4798      	blx	r3
}
    1ff4:	bf00      	nop
    1ff6:	bd80      	pop	{r7, pc}
    1ff8:	40000800 	.word	0x40000800
    1ffc:	0000116f 	.word	0x0000116f
    2000:	40001c00 	.word	0x40001c00
    2004:	00001049 	.word	0x00001049
    2008:	00009015 	.word	0x00009015
    200c:	40003800 	.word	0x40003800
    2010:	20001848 	.word	0x20001848
    2014:	000031d1 	.word	0x000031d1

00002018 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    2018:	b580      	push	{r7, lr}
    201a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    201c:	4808      	ldr	r0, [pc, #32]	; (2040 <TIMER_ARINC_init+0x28>)
    201e:	4b09      	ldr	r3, [pc, #36]	; (2044 <TIMER_ARINC_init+0x2c>)
    2020:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2022:	2244      	movs	r2, #68	; 0x44
    2024:	211a      	movs	r1, #26
    2026:	4808      	ldr	r0, [pc, #32]	; (2048 <TIMER_ARINC_init+0x30>)
    2028:	4b08      	ldr	r3, [pc, #32]	; (204c <TIMER_ARINC_init+0x34>)
    202a:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    202c:	4b08      	ldr	r3, [pc, #32]	; (2050 <TIMER_ARINC_init+0x38>)
    202e:	4798      	blx	r3
    2030:	4603      	mov	r3, r0
    2032:	461a      	mov	r2, r3
    2034:	4907      	ldr	r1, [pc, #28]	; (2054 <TIMER_ARINC_init+0x3c>)
    2036:	4808      	ldr	r0, [pc, #32]	; (2058 <TIMER_ARINC_init+0x40>)
    2038:	4b08      	ldr	r3, [pc, #32]	; (205c <TIMER_ARINC_init+0x44>)
    203a:	4798      	blx	r3
}
    203c:	bf00      	nop
    203e:	bd80      	pop	{r7, pc}
    2040:	40000800 	.word	0x40000800
    2044:	0000122f 	.word	0x0000122f
    2048:	40001c00 	.word	0x40001c00
    204c:	00001049 	.word	0x00001049
    2050:	00009015 	.word	0x00009015
    2054:	4101a000 	.word	0x4101a000
    2058:	20001828 	.word	0x20001828
    205c:	000031d1 	.word	0x000031d1

00002060 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    2060:	b580      	push	{r7, lr}
    2062:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    2064:	4808      	ldr	r0, [pc, #32]	; (2088 <TIMER_MAINTENANCE_init+0x28>)
    2066:	4b09      	ldr	r3, [pc, #36]	; (208c <TIMER_MAINTENANCE_init+0x2c>)
    2068:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    206a:	2246      	movs	r2, #70	; 0x46
    206c:	211e      	movs	r1, #30
    206e:	4808      	ldr	r0, [pc, #32]	; (2090 <TIMER_MAINTENANCE_init+0x30>)
    2070:	4b08      	ldr	r3, [pc, #32]	; (2094 <TIMER_MAINTENANCE_init+0x34>)
    2072:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    2074:	4b08      	ldr	r3, [pc, #32]	; (2098 <TIMER_MAINTENANCE_init+0x38>)
    2076:	4798      	blx	r3
    2078:	4603      	mov	r3, r0
    207a:	461a      	mov	r2, r3
    207c:	4907      	ldr	r1, [pc, #28]	; (209c <TIMER_MAINTENANCE_init+0x3c>)
    207e:	4808      	ldr	r0, [pc, #32]	; (20a0 <TIMER_MAINTENANCE_init+0x40>)
    2080:	4b08      	ldr	r3, [pc, #32]	; (20a4 <TIMER_MAINTENANCE_init+0x44>)
    2082:	4798      	blx	r3
}
    2084:	bf00      	nop
    2086:	bd80      	pop	{r7, pc}
    2088:	40000800 	.word	0x40000800
    208c:	0000124f 	.word	0x0000124f
    2090:	40001c00 	.word	0x40001c00
    2094:	00001049 	.word	0x00001049
    2098:	00009015 	.word	0x00009015
    209c:	42001400 	.word	0x42001400
    20a0:	20001780 	.word	0x20001780
    20a4:	000031d1 	.word	0x000031d1

000020a8 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    20a8:	b580      	push	{r7, lr}
    20aa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    20ac:	4808      	ldr	r0, [pc, #32]	; (20d0 <TIMER_INTERFACE_init+0x28>)
    20ae:	4b09      	ldr	r3, [pc, #36]	; (20d4 <TIMER_INTERFACE_init+0x2c>)
    20b0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    20b2:	2246      	movs	r2, #70	; 0x46
    20b4:	211e      	movs	r1, #30
    20b6:	4808      	ldr	r0, [pc, #32]	; (20d8 <TIMER_INTERFACE_init+0x30>)
    20b8:	4b08      	ldr	r3, [pc, #32]	; (20dc <TIMER_INTERFACE_init+0x34>)
    20ba:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    20bc:	4b08      	ldr	r3, [pc, #32]	; (20e0 <TIMER_INTERFACE_init+0x38>)
    20be:	4798      	blx	r3
    20c0:	4603      	mov	r3, r0
    20c2:	461a      	mov	r2, r3
    20c4:	4907      	ldr	r1, [pc, #28]	; (20e4 <TIMER_INTERFACE_init+0x3c>)
    20c6:	4808      	ldr	r0, [pc, #32]	; (20e8 <TIMER_INTERFACE_init+0x40>)
    20c8:	4b08      	ldr	r3, [pc, #32]	; (20ec <TIMER_INTERFACE_init+0x44>)
    20ca:	4798      	blx	r3
}
    20cc:	bf00      	nop
    20ce:	bd80      	pop	{r7, pc}
    20d0:	40000800 	.word	0x40000800
    20d4:	0000126f 	.word	0x0000126f
    20d8:	40001c00 	.word	0x40001c00
    20dc:	00001049 	.word	0x00001049
    20e0:	00009015 	.word	0x00009015
    20e4:	42001800 	.word	0x42001800
    20e8:	200017c4 	.word	0x200017c4
    20ec:	000031d1 	.word	0x000031d1

000020f0 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    20f0:	b580      	push	{r7, lr}
    20f2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    20f4:	4808      	ldr	r0, [pc, #32]	; (2118 <TIMER_EVENT_init+0x28>)
    20f6:	4b09      	ldr	r3, [pc, #36]	; (211c <TIMER_EVENT_init+0x2c>)
    20f8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    20fa:	2246      	movs	r2, #70	; 0x46
    20fc:	2127      	movs	r1, #39	; 0x27
    20fe:	4808      	ldr	r0, [pc, #32]	; (2120 <TIMER_EVENT_init+0x30>)
    2100:	4b08      	ldr	r3, [pc, #32]	; (2124 <TIMER_EVENT_init+0x34>)
    2102:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    2104:	4b08      	ldr	r3, [pc, #32]	; (2128 <TIMER_EVENT_init+0x38>)
    2106:	4798      	blx	r3
    2108:	4603      	mov	r3, r0
    210a:	461a      	mov	r2, r3
    210c:	4907      	ldr	r1, [pc, #28]	; (212c <TIMER_EVENT_init+0x3c>)
    210e:	4808      	ldr	r0, [pc, #32]	; (2130 <TIMER_EVENT_init+0x40>)
    2110:	4b08      	ldr	r3, [pc, #32]	; (2134 <TIMER_EVENT_init+0x44>)
    2112:	4798      	blx	r3
}
    2114:	bf00      	nop
    2116:	bd80      	pop	{r7, pc}
    2118:	40000800 	.word	0x40000800
    211c:	0000132f 	.word	0x0000132f
    2120:	40001c00 	.word	0x40001c00
    2124:	00001049 	.word	0x00001049
    2128:	00009015 	.word	0x00009015
    212c:	43001400 	.word	0x43001400
    2130:	200017a4 	.word	0x200017a4
    2134:	000031d1 	.word	0x000031d1

00002138 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    2138:	b480      	push	{r7}
    213a:	af00      	add	r7, sp, #0
}
    213c:	bf00      	nop
    213e:	46bd      	mov	sp, r7
    2140:	f85d 7b04 	ldr.w	r7, [sp], #4
    2144:	4770      	bx	lr
	...

00002148 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    2148:	b580      	push	{r7, lr}
    214a:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    214c:	4804      	ldr	r0, [pc, #16]	; (2160 <LIVE_PULSE_CLOCK_init+0x18>)
    214e:	4b05      	ldr	r3, [pc, #20]	; (2164 <LIVE_PULSE_CLOCK_init+0x1c>)
    2150:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2152:	2240      	movs	r2, #64	; 0x40
    2154:	2127      	movs	r1, #39	; 0x27
    2156:	4804      	ldr	r0, [pc, #16]	; (2168 <LIVE_PULSE_CLOCK_init+0x20>)
    2158:	4b04      	ldr	r3, [pc, #16]	; (216c <LIVE_PULSE_CLOCK_init+0x24>)
    215a:	4798      	blx	r3
}
    215c:	bf00      	nop
    215e:	bd80      	pop	{r7, pc}
    2160:	40000800 	.word	0x40000800
    2164:	0000134f 	.word	0x0000134f
    2168:	40001c00 	.word	0x40001c00
    216c:	00001049 	.word	0x00001049

00002170 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    2170:	b580      	push	{r7, lr}
    2172:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    2174:	4b06      	ldr	r3, [pc, #24]	; (2190 <LIVE_PULSE_init+0x20>)
    2176:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    2178:	4b06      	ldr	r3, [pc, #24]	; (2194 <LIVE_PULSE_init+0x24>)
    217a:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    217c:	4b06      	ldr	r3, [pc, #24]	; (2198 <LIVE_PULSE_init+0x28>)
    217e:	4798      	blx	r3
    2180:	4603      	mov	r3, r0
    2182:	461a      	mov	r2, r3
    2184:	4905      	ldr	r1, [pc, #20]	; (219c <LIVE_PULSE_init+0x2c>)
    2186:	4806      	ldr	r0, [pc, #24]	; (21a0 <LIVE_PULSE_init+0x30>)
    2188:	4b06      	ldr	r3, [pc, #24]	; (21a4 <LIVE_PULSE_init+0x34>)
    218a:	4798      	blx	r3
}
    218c:	bf00      	nop
    218e:	bd80      	pop	{r7, pc}
    2190:	00002149 	.word	0x00002149
    2194:	00002139 	.word	0x00002139
    2198:	00009029 	.word	0x00009029
    219c:	43001800 	.word	0x43001800
    21a0:	200017e4 	.word	0x200017e4
    21a4:	00002d31 	.word	0x00002d31

000021a8 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    21a8:	b580      	push	{r7, lr}
    21aa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    21ac:	4804      	ldr	r0, [pc, #16]	; (21c0 <TIMER_HVAC_CLOCK_init+0x18>)
    21ae:	4b05      	ldr	r3, [pc, #20]	; (21c4 <TIMER_HVAC_CLOCK_init+0x1c>)
    21b0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    21b2:	2244      	movs	r2, #68	; 0x44
    21b4:	2119      	movs	r1, #25
    21b6:	4804      	ldr	r0, [pc, #16]	; (21c8 <TIMER_HVAC_CLOCK_init+0x20>)
    21b8:	4b04      	ldr	r3, [pc, #16]	; (21cc <TIMER_HVAC_CLOCK_init+0x24>)
    21ba:	4798      	blx	r3
}
    21bc:	bf00      	nop
    21be:	bd80      	pop	{r7, pc}
    21c0:	40000800 	.word	0x40000800
    21c4:	000011ef 	.word	0x000011ef
    21c8:	40001c00 	.word	0x40001c00
    21cc:	00001049 	.word	0x00001049

000021d0 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    21d0:	b580      	push	{r7, lr}
    21d2:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    21d4:	4b05      	ldr	r3, [pc, #20]	; (21ec <TIMER_HVAC_init+0x1c>)
    21d6:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    21d8:	4b05      	ldr	r3, [pc, #20]	; (21f0 <TIMER_HVAC_init+0x20>)
    21da:	4798      	blx	r3
    21dc:	4603      	mov	r3, r0
    21de:	461a      	mov	r2, r3
    21e0:	4904      	ldr	r1, [pc, #16]	; (21f4 <TIMER_HVAC_init+0x24>)
    21e2:	4805      	ldr	r0, [pc, #20]	; (21f8 <TIMER_HVAC_init+0x28>)
    21e4:	4b05      	ldr	r3, [pc, #20]	; (21fc <TIMER_HVAC_init+0x2c>)
    21e6:	4798      	blx	r3
}
    21e8:	bf00      	nop
    21ea:	bd80      	pop	{r7, pc}
    21ec:	000021a9 	.word	0x000021a9
    21f0:	000083d5 	.word	0x000083d5
    21f4:	41016000 	.word	0x41016000
    21f8:	200018a8 	.word	0x200018a8
    21fc:	000031d1 	.word	0x000031d1

00002200 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    2200:	b580      	push	{r7, lr}
    2202:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    2204:	4804      	ldr	r0, [pc, #16]	; (2218 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    2206:	4b05      	ldr	r3, [pc, #20]	; (221c <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    2208:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    220a:	2244      	movs	r2, #68	; 0x44
    220c:	2119      	movs	r1, #25
    220e:	4804      	ldr	r0, [pc, #16]	; (2220 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    2210:	4b04      	ldr	r3, [pc, #16]	; (2224 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    2212:	4798      	blx	r3
}
    2214:	bf00      	nop
    2216:	bd80      	pop	{r7, pc}
    2218:	40000800 	.word	0x40000800
    221c:	0000120f 	.word	0x0000120f
    2220:	40001c00 	.word	0x40001c00
    2224:	00001049 	.word	0x00001049

00002228 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    2228:	b580      	push	{r7, lr}
    222a:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    222c:	4b05      	ldr	r3, [pc, #20]	; (2244 <TIMER_TEMPERATURES_init+0x1c>)
    222e:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    2230:	4b05      	ldr	r3, [pc, #20]	; (2248 <TIMER_TEMPERATURES_init+0x20>)
    2232:	4798      	blx	r3
    2234:	4603      	mov	r3, r0
    2236:	461a      	mov	r2, r3
    2238:	4904      	ldr	r1, [pc, #16]	; (224c <TIMER_TEMPERATURES_init+0x24>)
    223a:	4805      	ldr	r0, [pc, #20]	; (2250 <TIMER_TEMPERATURES_init+0x28>)
    223c:	4b05      	ldr	r3, [pc, #20]	; (2254 <TIMER_TEMPERATURES_init+0x2c>)
    223e:	4798      	blx	r3
}
    2240:	bf00      	nop
    2242:	bd80      	pop	{r7, pc}
    2244:	00002201 	.word	0x00002201
    2248:	000083d5 	.word	0x000083d5
    224c:	41018000 	.word	0x41018000
    2250:	20001730 	.word	0x20001730
    2254:	000031d1 	.word	0x000031d1

00002258 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    2258:	b580      	push	{r7, lr}
    225a:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    225c:	2102      	movs	r1, #2
    225e:	2018      	movs	r0, #24
    2260:	4b0f      	ldr	r3, [pc, #60]	; (22a0 <CDCUSB_PORT_init+0x48>)
    2262:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    2264:	2100      	movs	r1, #0
    2266:	2018      	movs	r0, #24
    2268:	4b0e      	ldr	r3, [pc, #56]	; (22a4 <CDCUSB_PORT_init+0x4c>)
    226a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    226c:	2100      	movs	r1, #0
    226e:	2018      	movs	r0, #24
    2270:	4b0d      	ldr	r3, [pc, #52]	; (22a8 <CDCUSB_PORT_init+0x50>)
    2272:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    2274:	490d      	ldr	r1, [pc, #52]	; (22ac <CDCUSB_PORT_init+0x54>)
    2276:	2018      	movs	r0, #24
    2278:	4b0d      	ldr	r3, [pc, #52]	; (22b0 <CDCUSB_PORT_init+0x58>)
    227a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    227c:	2102      	movs	r1, #2
    227e:	2019      	movs	r0, #25
    2280:	4b07      	ldr	r3, [pc, #28]	; (22a0 <CDCUSB_PORT_init+0x48>)
    2282:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    2284:	2100      	movs	r1, #0
    2286:	2019      	movs	r0, #25
    2288:	4b06      	ldr	r3, [pc, #24]	; (22a4 <CDCUSB_PORT_init+0x4c>)
    228a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    228c:	2100      	movs	r1, #0
    228e:	2019      	movs	r0, #25
    2290:	4b05      	ldr	r3, [pc, #20]	; (22a8 <CDCUSB_PORT_init+0x50>)
    2292:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    2294:	4907      	ldr	r1, [pc, #28]	; (22b4 <CDCUSB_PORT_init+0x5c>)
    2296:	2019      	movs	r0, #25
    2298:	4b05      	ldr	r3, [pc, #20]	; (22b0 <CDCUSB_PORT_init+0x58>)
    229a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    229c:	bf00      	nop
    229e:	bd80      	pop	{r7, pc}
    22a0:	0000189d 	.word	0x0000189d
    22a4:	000018d5 	.word	0x000018d5
    22a8:	00001849 	.word	0x00001849
    22ac:	00180007 	.word	0x00180007
    22b0:	0000187d 	.word	0x0000187d
    22b4:	00190007 	.word	0x00190007

000022b8 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    22b8:	b580      	push	{r7, lr}
    22ba:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    22bc:	2242      	movs	r2, #66	; 0x42
    22be:	210a      	movs	r1, #10
    22c0:	4805      	ldr	r0, [pc, #20]	; (22d8 <CDCUSB_CLOCK_init+0x20>)
    22c2:	4b06      	ldr	r3, [pc, #24]	; (22dc <CDCUSB_CLOCK_init+0x24>)
    22c4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    22c6:	4806      	ldr	r0, [pc, #24]	; (22e0 <CDCUSB_CLOCK_init+0x28>)
    22c8:	4b06      	ldr	r3, [pc, #24]	; (22e4 <CDCUSB_CLOCK_init+0x2c>)
    22ca:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    22cc:	4804      	ldr	r0, [pc, #16]	; (22e0 <CDCUSB_CLOCK_init+0x28>)
    22ce:	4b06      	ldr	r3, [pc, #24]	; (22e8 <CDCUSB_CLOCK_init+0x30>)
    22d0:	4798      	blx	r3
}
    22d2:	bf00      	nop
    22d4:	bd80      	pop	{r7, pc}
    22d6:	bf00      	nop
    22d8:	40001c00 	.word	0x40001c00
    22dc:	00001049 	.word	0x00001049
    22e0:	40000800 	.word	0x40000800
    22e4:	0000106f 	.word	0x0000106f
    22e8:	0000118f 	.word	0x0000118f

000022ec <CDCUSB_init>:

void CDCUSB_init(void)
{
    22ec:	b580      	push	{r7, lr}
    22ee:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    22f0:	4b03      	ldr	r3, [pc, #12]	; (2300 <CDCUSB_init+0x14>)
    22f2:	4798      	blx	r3
	usb_d_init();
    22f4:	4b03      	ldr	r3, [pc, #12]	; (2304 <CDCUSB_init+0x18>)
    22f6:	4798      	blx	r3
	CDCUSB_PORT_init();
    22f8:	4b03      	ldr	r3, [pc, #12]	; (2308 <CDCUSB_init+0x1c>)
    22fa:	4798      	blx	r3
}
    22fc:	bf00      	nop
    22fe:	bd80      	pop	{r7, pc}
    2300:	000022b9 	.word	0x000022b9
    2304:	00003a2d 	.word	0x00003a2d
    2308:	00002259 	.word	0x00002259

0000230c <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    230c:	b580      	push	{r7, lr}
    230e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    2310:	4802      	ldr	r0, [pc, #8]	; (231c <WATCHDOG_CLOCK_init+0x10>)
    2312:	4b03      	ldr	r3, [pc, #12]	; (2320 <WATCHDOG_CLOCK_init+0x14>)
    2314:	4798      	blx	r3
}
    2316:	bf00      	nop
    2318:	bd80      	pop	{r7, pc}
    231a:	bf00      	nop
    231c:	40000800 	.word	0x40000800
    2320:	000010ef 	.word	0x000010ef

00002324 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    2324:	b580      	push	{r7, lr}
    2326:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    2328:	4b03      	ldr	r3, [pc, #12]	; (2338 <WATCHDOG_init+0x14>)
    232a:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    232c:	4903      	ldr	r1, [pc, #12]	; (233c <WATCHDOG_init+0x18>)
    232e:	4804      	ldr	r0, [pc, #16]	; (2340 <WATCHDOG_init+0x1c>)
    2330:	4b04      	ldr	r3, [pc, #16]	; (2344 <WATCHDOG_init+0x20>)
    2332:	4798      	blx	r3
}
    2334:	bf00      	nop
    2336:	bd80      	pop	{r7, pc}
    2338:	0000230d 	.word	0x0000230d
    233c:	40002000 	.word	0x40002000
    2340:	20001928 	.word	0x20001928
    2344:	0000191d 	.word	0x0000191d

00002348 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    2348:	b580      	push	{r7, lr}
    234a:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    234c:	4904      	ldr	r1, [pc, #16]	; (2360 <CAN_CCU_PORT_init+0x18>)
    234e:	202d      	movs	r0, #45	; 0x2d
    2350:	4b04      	ldr	r3, [pc, #16]	; (2364 <CAN_CCU_PORT_init+0x1c>)
    2352:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    2354:	4904      	ldr	r1, [pc, #16]	; (2368 <CAN_CCU_PORT_init+0x20>)
    2356:	202c      	movs	r0, #44	; 0x2c
    2358:	4b02      	ldr	r3, [pc, #8]	; (2364 <CAN_CCU_PORT_init+0x1c>)
    235a:	4798      	blx	r3
}
    235c:	bf00      	nop
    235e:	bd80      	pop	{r7, pc}
    2360:	002d0007 	.word	0x002d0007
    2364:	0000187d 	.word	0x0000187d
    2368:	002c0007 	.word	0x002c0007

0000236c <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    236c:	b580      	push	{r7, lr}
    236e:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    2370:	4807      	ldr	r0, [pc, #28]	; (2390 <CAN_CCU_init+0x24>)
    2372:	4b08      	ldr	r3, [pc, #32]	; (2394 <CAN_CCU_init+0x28>)
    2374:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2376:	2243      	movs	r2, #67	; 0x43
    2378:	211c      	movs	r1, #28
    237a:	4807      	ldr	r0, [pc, #28]	; (2398 <CAN_CCU_init+0x2c>)
    237c:	4b07      	ldr	r3, [pc, #28]	; (239c <CAN_CCU_init+0x30>)
    237e:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    2380:	4907      	ldr	r1, [pc, #28]	; (23a0 <CAN_CCU_init+0x34>)
    2382:	4808      	ldr	r0, [pc, #32]	; (23a4 <CAN_CCU_init+0x38>)
    2384:	4b08      	ldr	r3, [pc, #32]	; (23a8 <CAN_CCU_init+0x3c>)
    2386:	4798      	blx	r3
	CAN_CCU_PORT_init();
    2388:	4b08      	ldr	r3, [pc, #32]	; (23ac <CAN_CCU_init+0x40>)
    238a:	4798      	blx	r3
}
    238c:	bf00      	nop
    238e:	bd80      	pop	{r7, pc}
    2390:	40000800 	.word	0x40000800
    2394:	000010af 	.word	0x000010af
    2398:	40001c00 	.word	0x40001c00
    239c:	00001049 	.word	0x00001049
    23a0:	42000400 	.word	0x42000400
    23a4:	20001800 	.word	0x20001800
    23a8:	00002609 	.word	0x00002609
    23ac:	00002349 	.word	0x00002349

000023b0 <system_init>:

void system_init(void)
{
    23b0:	b580      	push	{r7, lr}
    23b2:	af00      	add	r7, sp, #0
	init_mcu();
    23b4:	4b5e      	ldr	r3, [pc, #376]	; (2530 <system_init+0x180>)
    23b6:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    23b8:	2100      	movs	r1, #0
    23ba:	2007      	movs	r0, #7
    23bc:	4b5d      	ldr	r3, [pc, #372]	; (2534 <system_init+0x184>)
    23be:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    23c0:	2102      	movs	r1, #2
    23c2:	2007      	movs	r0, #7
    23c4:	4b5c      	ldr	r3, [pc, #368]	; (2538 <system_init+0x188>)
    23c6:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    23c8:	f04f 31ff 	mov.w	r1, #4294967295
    23cc:	2007      	movs	r0, #7
    23ce:	4b5b      	ldr	r3, [pc, #364]	; (253c <system_init+0x18c>)
    23d0:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    23d2:	2101      	movs	r1, #1
    23d4:	200f      	movs	r0, #15
    23d6:	4b57      	ldr	r3, [pc, #348]	; (2534 <system_init+0x184>)
    23d8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    23da:	2102      	movs	r1, #2
    23dc:	200f      	movs	r0, #15
    23de:	4b56      	ldr	r3, [pc, #344]	; (2538 <system_init+0x188>)
    23e0:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    23e2:	f04f 31ff 	mov.w	r1, #4294967295
    23e6:	200f      	movs	r0, #15
    23e8:	4b54      	ldr	r3, [pc, #336]	; (253c <system_init+0x18c>)
    23ea:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    23ec:	2101      	movs	r1, #1
    23ee:	2013      	movs	r0, #19
    23f0:	4b50      	ldr	r3, [pc, #320]	; (2534 <system_init+0x184>)
    23f2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    23f4:	2102      	movs	r1, #2
    23f6:	2013      	movs	r0, #19
    23f8:	4b4f      	ldr	r3, [pc, #316]	; (2538 <system_init+0x188>)
    23fa:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    23fc:	f04f 31ff 	mov.w	r1, #4294967295
    2400:	2013      	movs	r0, #19
    2402:	4b4e      	ldr	r3, [pc, #312]	; (253c <system_init+0x18c>)
    2404:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    2406:	2101      	movs	r1, #1
    2408:	201b      	movs	r0, #27
    240a:	4b4a      	ldr	r3, [pc, #296]	; (2534 <system_init+0x184>)
    240c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    240e:	2102      	movs	r1, #2
    2410:	201b      	movs	r0, #27
    2412:	4b49      	ldr	r3, [pc, #292]	; (2538 <system_init+0x188>)
    2414:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    2416:	f04f 31ff 	mov.w	r1, #4294967295
    241a:	201b      	movs	r0, #27
    241c:	4b47      	ldr	r3, [pc, #284]	; (253c <system_init+0x18c>)
    241e:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    2420:	2101      	movs	r1, #1
    2422:	2027      	movs	r0, #39	; 0x27
    2424:	4b43      	ldr	r3, [pc, #268]	; (2534 <system_init+0x184>)
    2426:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    2428:	2102      	movs	r1, #2
    242a:	2027      	movs	r0, #39	; 0x27
    242c:	4b42      	ldr	r3, [pc, #264]	; (2538 <system_init+0x188>)
    242e:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    2430:	f04f 31ff 	mov.w	r1, #4294967295
    2434:	2027      	movs	r0, #39	; 0x27
    2436:	4b41      	ldr	r3, [pc, #260]	; (253c <system_init+0x18c>)
    2438:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    243a:	2101      	movs	r1, #1
    243c:	203d      	movs	r0, #61	; 0x3d
    243e:	4b3d      	ldr	r3, [pc, #244]	; (2534 <system_init+0x184>)
    2440:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    2442:	2102      	movs	r1, #2
    2444:	203d      	movs	r0, #61	; 0x3d
    2446:	4b3c      	ldr	r3, [pc, #240]	; (2538 <system_init+0x188>)
    2448:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    244a:	f04f 31ff 	mov.w	r1, #4294967295
    244e:	203d      	movs	r0, #61	; 0x3d
    2450:	4b3a      	ldr	r3, [pc, #232]	; (253c <system_init+0x18c>)
    2452:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    2454:	2101      	movs	r1, #1
    2456:	203f      	movs	r0, #63	; 0x3f
    2458:	4b37      	ldr	r3, [pc, #220]	; (2538 <system_init+0x188>)
    245a:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    245c:	2101      	movs	r1, #1
    245e:	203f      	movs	r0, #63	; 0x3f
    2460:	4b37      	ldr	r3, [pc, #220]	; (2540 <system_init+0x190>)
    2462:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    2464:	f04f 31ff 	mov.w	r1, #4294967295
    2468:	203f      	movs	r0, #63	; 0x3f
    246a:	4b34      	ldr	r3, [pc, #208]	; (253c <system_init+0x18c>)
    246c:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    246e:	2100      	movs	r1, #0
    2470:	204d      	movs	r0, #77	; 0x4d
    2472:	4b30      	ldr	r3, [pc, #192]	; (2534 <system_init+0x184>)
    2474:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    2476:	2102      	movs	r1, #2
    2478:	204d      	movs	r0, #77	; 0x4d
    247a:	4b2f      	ldr	r3, [pc, #188]	; (2538 <system_init+0x188>)
    247c:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    247e:	f04f 31ff 	mov.w	r1, #4294967295
    2482:	204d      	movs	r0, #77	; 0x4d
    2484:	4b2d      	ldr	r3, [pc, #180]	; (253c <system_init+0x18c>)
    2486:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    2488:	2101      	movs	r1, #1
    248a:	204e      	movs	r0, #78	; 0x4e
    248c:	4b29      	ldr	r3, [pc, #164]	; (2534 <system_init+0x184>)
    248e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    2490:	2102      	movs	r1, #2
    2492:	204e      	movs	r0, #78	; 0x4e
    2494:	4b28      	ldr	r3, [pc, #160]	; (2538 <system_init+0x188>)
    2496:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    2498:	f04f 31ff 	mov.w	r1, #4294967295
    249c:	204e      	movs	r0, #78	; 0x4e
    249e:	4b27      	ldr	r3, [pc, #156]	; (253c <system_init+0x18c>)
    24a0:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    24a2:	2100      	movs	r1, #0
    24a4:	204f      	movs	r0, #79	; 0x4f
    24a6:	4b23      	ldr	r3, [pc, #140]	; (2534 <system_init+0x184>)
    24a8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    24aa:	2102      	movs	r1, #2
    24ac:	204f      	movs	r0, #79	; 0x4f
    24ae:	4b22      	ldr	r3, [pc, #136]	; (2538 <system_init+0x188>)
    24b0:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    24b2:	f04f 31ff 	mov.w	r1, #4294967295
    24b6:	204f      	movs	r0, #79	; 0x4f
    24b8:	4b20      	ldr	r3, [pc, #128]	; (253c <system_init+0x18c>)
    24ba:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    24bc:	2100      	movs	r1, #0
    24be:	2052      	movs	r0, #82	; 0x52
    24c0:	4b1c      	ldr	r3, [pc, #112]	; (2534 <system_init+0x184>)
    24c2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    24c4:	2102      	movs	r1, #2
    24c6:	2052      	movs	r0, #82	; 0x52
    24c8:	4b1b      	ldr	r3, [pc, #108]	; (2538 <system_init+0x188>)
    24ca:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    24cc:	f04f 31ff 	mov.w	r1, #4294967295
    24d0:	2052      	movs	r0, #82	; 0x52
    24d2:	4b1a      	ldr	r3, [pc, #104]	; (253c <system_init+0x18c>)
    24d4:	4798      	blx	r3

	CRC_CALC_init();
    24d6:	4b1b      	ldr	r3, [pc, #108]	; (2544 <system_init+0x194>)
    24d8:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    24da:	4b1b      	ldr	r3, [pc, #108]	; (2548 <system_init+0x198>)
    24dc:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    24de:	4b1b      	ldr	r3, [pc, #108]	; (254c <system_init+0x19c>)
    24e0:	4798      	blx	r3

	QSPI_N25Q256_init();
    24e2:	4b1b      	ldr	r3, [pc, #108]	; (2550 <system_init+0x1a0>)
    24e4:	4798      	blx	r3

	DATETIME_CLOCK_init();
    24e6:	4b1b      	ldr	r3, [pc, #108]	; (2554 <system_init+0x1a4>)
    24e8:	4798      	blx	r3

	I2C_SHARED_init();
    24ea:	4b1b      	ldr	r3, [pc, #108]	; (2558 <system_init+0x1a8>)
    24ec:	4798      	blx	r3

	SPI_TEMP_init();
    24ee:	4b1b      	ldr	r3, [pc, #108]	; (255c <system_init+0x1ac>)
    24f0:	4798      	blx	r3

	I2C_EXPANDER_init();
    24f2:	4b1b      	ldr	r3, [pc, #108]	; (2560 <system_init+0x1b0>)
    24f4:	4798      	blx	r3

	SPI_HI3593_init();
    24f6:	4b1b      	ldr	r3, [pc, #108]	; (2564 <system_init+0x1b4>)
    24f8:	4798      	blx	r3

	I2C_EEPROM_init();
    24fa:	4b1b      	ldr	r3, [pc, #108]	; (2568 <system_init+0x1b8>)
    24fc:	4798      	blx	r3

	TIMER_USB_init();
    24fe:	4b1b      	ldr	r3, [pc, #108]	; (256c <system_init+0x1bc>)
    2500:	4798      	blx	r3
	TIMER_ARINC_init();
    2502:	4b1b      	ldr	r3, [pc, #108]	; (2570 <system_init+0x1c0>)
    2504:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    2506:	4b1b      	ldr	r3, [pc, #108]	; (2574 <system_init+0x1c4>)
    2508:	4798      	blx	r3
	TIMER_INTERFACE_init();
    250a:	4b1b      	ldr	r3, [pc, #108]	; (2578 <system_init+0x1c8>)
    250c:	4798      	blx	r3
	TIMER_EVENT_init();
    250e:	4b1b      	ldr	r3, [pc, #108]	; (257c <system_init+0x1cc>)
    2510:	4798      	blx	r3
	LIVE_PULSE_init();
    2512:	4b1b      	ldr	r3, [pc, #108]	; (2580 <system_init+0x1d0>)
    2514:	4798      	blx	r3

	TIMER_HVAC_init();
    2516:	4b1b      	ldr	r3, [pc, #108]	; (2584 <system_init+0x1d4>)
    2518:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    251a:	4b1b      	ldr	r3, [pc, #108]	; (2588 <system_init+0x1d8>)
    251c:	4798      	blx	r3

	CDCUSB_init();
    251e:	4b1b      	ldr	r3, [pc, #108]	; (258c <system_init+0x1dc>)
    2520:	4798      	blx	r3

	WATCHDOG_init();
    2522:	4b1b      	ldr	r3, [pc, #108]	; (2590 <system_init+0x1e0>)
    2524:	4798      	blx	r3
	CAN_CCU_init();
    2526:	4b1b      	ldr	r3, [pc, #108]	; (2594 <system_init+0x1e4>)
    2528:	4798      	blx	r3
}
    252a:	bf00      	nop
    252c:	bd80      	pop	{r7, pc}
    252e:	bf00      	nop
    2530:	0000190d 	.word	0x0000190d
    2534:	000018d5 	.word	0x000018d5
    2538:	0000189d 	.word	0x0000189d
    253c:	0000187d 	.word	0x0000187d
    2540:	00001849 	.word	0x00001849
    2544:	0000196d 	.word	0x0000196d
    2548:	00001999 	.word	0x00001999
    254c:	00001ac1 	.word	0x00001ac1
    2550:	00001c09 	.word	0x00001c09
    2554:	00001c4d 	.word	0x00001c4d
    2558:	00001cdd 	.word	0x00001cdd
    255c:	00001da9 	.word	0x00001da9
    2560:	00001e41 	.word	0x00001e41
    2564:	00001f0d 	.word	0x00001f0d
    2568:	00001fa5 	.word	0x00001fa5
    256c:	00001fd1 	.word	0x00001fd1
    2570:	00002019 	.word	0x00002019
    2574:	00002061 	.word	0x00002061
    2578:	000020a9 	.word	0x000020a9
    257c:	000020f1 	.word	0x000020f1
    2580:	00002171 	.word	0x00002171
    2584:	000021d1 	.word	0x000021d1
    2588:	00002229 	.word	0x00002229
    258c:	000022ed 	.word	0x000022ed
    2590:	00002325 	.word	0x00002325
    2594:	0000236d 	.word	0x0000236d

00002598 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    2598:	b580      	push	{r7, lr}
    259a:	b084      	sub	sp, #16
    259c:	af00      	add	r7, sp, #0
    259e:	6078      	str	r0, [r7, #4]
    25a0:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    25a2:	2300      	movs	r3, #0
    25a4:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    25a6:	687b      	ldr	r3, [r7, #4]
    25a8:	2b00      	cmp	r3, #0
    25aa:	bf14      	ite	ne
    25ac:	2301      	movne	r3, #1
    25ae:	2300      	moveq	r3, #0
    25b0:	b2db      	uxtb	r3, r3
    25b2:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    25b6:	4911      	ldr	r1, [pc, #68]	; (25fc <calendar_init+0x64>)
    25b8:	4618      	mov	r0, r3
    25ba:	4b11      	ldr	r3, [pc, #68]	; (2600 <calendar_init+0x68>)
    25bc:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    25be:	687b      	ldr	r3, [r7, #4]
    25c0:	681a      	ldr	r2, [r3, #0]
    25c2:	683b      	ldr	r3, [r7, #0]
    25c4:	429a      	cmp	r2, r3
    25c6:	d101      	bne.n	25cc <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    25c8:	2300      	movs	r3, #0
    25ca:	e013      	b.n	25f4 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    25cc:	687b      	ldr	r3, [r7, #4]
    25ce:	681b      	ldr	r3, [r3, #0]
    25d0:	2b00      	cmp	r3, #0
    25d2:	d002      	beq.n	25da <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    25d4:	f06f 0311 	mvn.w	r3, #17
    25d8:	e00c      	b.n	25f4 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    25da:	687b      	ldr	r3, [r7, #4]
    25dc:	683a      	ldr	r2, [r7, #0]
    25de:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	4618      	mov	r0, r3
    25e4:	4b07      	ldr	r3, [pc, #28]	; (2604 <calendar_init+0x6c>)
    25e6:	4798      	blx	r3
    25e8:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    25ea:	687b      	ldr	r3, [r7, #4]
    25ec:	f240 72b2 	movw	r2, #1970	; 0x7b2
    25f0:	619a      	str	r2, [r3, #24]

	return ret;
    25f2:	68fb      	ldr	r3, [r7, #12]
}
    25f4:	4618      	mov	r0, r3
    25f6:	3710      	adds	r7, #16
    25f8:	46bd      	mov	sp, r7
    25fa:	bd80      	pop	{r7, pc}
    25fc:	000103b4 	.word	0x000103b4
    2600:	00003fd5 	.word	0x00003fd5
    2604:	00006381 	.word	0x00006381

00002608 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    2608:	b580      	push	{r7, lr}
    260a:	b084      	sub	sp, #16
    260c:	af00      	add	r7, sp, #0
    260e:	6078      	str	r0, [r7, #4]
    2610:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    2612:	687b      	ldr	r3, [r7, #4]
    2614:	2b00      	cmp	r3, #0
    2616:	d004      	beq.n	2622 <can_async_init+0x1a>
    2618:	683b      	ldr	r3, [r7, #0]
    261a:	2b00      	cmp	r3, #0
    261c:	d001      	beq.n	2622 <can_async_init+0x1a>
    261e:	2301      	movs	r3, #1
    2620:	e000      	b.n	2624 <can_async_init+0x1c>
    2622:	2300      	movs	r3, #0
    2624:	f003 0301 	and.w	r3, r3, #1
    2628:	b2db      	uxtb	r3, r3
    262a:	2241      	movs	r2, #65	; 0x41
    262c:	490e      	ldr	r1, [pc, #56]	; (2668 <can_async_init+0x60>)
    262e:	4618      	mov	r0, r3
    2630:	4b0e      	ldr	r3, [pc, #56]	; (266c <can_async_init+0x64>)
    2632:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    2634:	687b      	ldr	r3, [r7, #4]
    2636:	6839      	ldr	r1, [r7, #0]
    2638:	4618      	mov	r0, r3
    263a:	4b0d      	ldr	r3, [pc, #52]	; (2670 <can_async_init+0x68>)
    263c:	4798      	blx	r3
    263e:	60f8      	str	r0, [r7, #12]
	if (rc) {
    2640:	68fb      	ldr	r3, [r7, #12]
    2642:	2b00      	cmp	r3, #0
    2644:	d001      	beq.n	264a <can_async_init+0x42>
		return rc;
    2646:	68fb      	ldr	r3, [r7, #12]
    2648:	e009      	b.n	265e <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    264a:	687b      	ldr	r3, [r7, #4]
    264c:	4a09      	ldr	r2, [pc, #36]	; (2674 <can_async_init+0x6c>)
    264e:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    2650:	687b      	ldr	r3, [r7, #4]
    2652:	4a09      	ldr	r2, [pc, #36]	; (2678 <can_async_init+0x70>)
    2654:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    2656:	687b      	ldr	r3, [r7, #4]
    2658:	4a08      	ldr	r2, [pc, #32]	; (267c <can_async_init+0x74>)
    265a:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    265c:	2300      	movs	r3, #0
}
    265e:	4618      	mov	r0, r3
    2660:	3710      	adds	r7, #16
    2662:	46bd      	mov	sp, r7
    2664:	bd80      	pop	{r7, pc}
    2666:	bf00      	nop
    2668:	000103d0 	.word	0x000103d0
    266c:	00003fd5 	.word	0x00003fd5
    2670:	00004531 	.word	0x00004531
    2674:	00002681 	.word	0x00002681
    2678:	000026a5 	.word	0x000026a5
    267c:	000026c9 	.word	0x000026c9

00002680 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    2680:	b580      	push	{r7, lr}
    2682:	b084      	sub	sp, #16
    2684:	af00      	add	r7, sp, #0
    2686:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2688:	687b      	ldr	r3, [r7, #4]
    268a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    268c:	68fb      	ldr	r3, [r7, #12]
    268e:	69db      	ldr	r3, [r3, #28]
    2690:	2b00      	cmp	r3, #0
    2692:	d003      	beq.n	269c <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    2694:	68fb      	ldr	r3, [r7, #12]
    2696:	69db      	ldr	r3, [r3, #28]
    2698:	68f8      	ldr	r0, [r7, #12]
    269a:	4798      	blx	r3
	}
}
    269c:	bf00      	nop
    269e:	3710      	adds	r7, #16
    26a0:	46bd      	mov	sp, r7
    26a2:	bd80      	pop	{r7, pc}

000026a4 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    26a4:	b580      	push	{r7, lr}
    26a6:	b084      	sub	sp, #16
    26a8:	af00      	add	r7, sp, #0
    26aa:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    26ac:	687b      	ldr	r3, [r7, #4]
    26ae:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    26b0:	68fb      	ldr	r3, [r7, #12]
    26b2:	6a1b      	ldr	r3, [r3, #32]
    26b4:	2b00      	cmp	r3, #0
    26b6:	d003      	beq.n	26c0 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    26b8:	68fb      	ldr	r3, [r7, #12]
    26ba:	6a1b      	ldr	r3, [r3, #32]
    26bc:	68f8      	ldr	r0, [r7, #12]
    26be:	4798      	blx	r3
	}
}
    26c0:	bf00      	nop
    26c2:	3710      	adds	r7, #16
    26c4:	46bd      	mov	sp, r7
    26c6:	bd80      	pop	{r7, pc}

000026c8 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    26c8:	b580      	push	{r7, lr}
    26ca:	b084      	sub	sp, #16
    26cc:	af00      	add	r7, sp, #0
    26ce:	6078      	str	r0, [r7, #4]
    26d0:	460b      	mov	r3, r1
    26d2:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    26d4:	687b      	ldr	r3, [r7, #4]
    26d6:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    26d8:	68fb      	ldr	r3, [r7, #12]
    26da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    26dc:	2b00      	cmp	r3, #0
    26de:	d005      	beq.n	26ec <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    26e0:	68fb      	ldr	r3, [r7, #12]
    26e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    26e4:	78fa      	ldrb	r2, [r7, #3]
    26e6:	4611      	mov	r1, r2
    26e8:	68f8      	ldr	r0, [r7, #12]
    26ea:	4798      	blx	r3
	}
}
    26ec:	bf00      	nop
    26ee:	3710      	adds	r7, #16
    26f0:	46bd      	mov	sp, r7
    26f2:	bd80      	pop	{r7, pc}

000026f4 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    26f4:	b580      	push	{r7, lr}
    26f6:	b082      	sub	sp, #8
    26f8:	af00      	add	r7, sp, #0
    26fa:	6078      	str	r0, [r7, #4]
    26fc:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    26fe:	687b      	ldr	r3, [r7, #4]
    2700:	2b00      	cmp	r3, #0
    2702:	d004      	beq.n	270e <crc_sync_init+0x1a>
    2704:	683b      	ldr	r3, [r7, #0]
    2706:	2b00      	cmp	r3, #0
    2708:	d001      	beq.n	270e <crc_sync_init+0x1a>
    270a:	2301      	movs	r3, #1
    270c:	e000      	b.n	2710 <crc_sync_init+0x1c>
    270e:	2300      	movs	r3, #0
    2710:	f003 0301 	and.w	r3, r3, #1
    2714:	b2db      	uxtb	r3, r3
    2716:	222b      	movs	r2, #43	; 0x2b
    2718:	4906      	ldr	r1, [pc, #24]	; (2734 <crc_sync_init+0x40>)
    271a:	4618      	mov	r0, r3
    271c:	4b06      	ldr	r3, [pc, #24]	; (2738 <crc_sync_init+0x44>)
    271e:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    2720:	687b      	ldr	r3, [r7, #4]
    2722:	6839      	ldr	r1, [r7, #0]
    2724:	4618      	mov	r0, r3
    2726:	4b05      	ldr	r3, [pc, #20]	; (273c <crc_sync_init+0x48>)
    2728:	4798      	blx	r3
    272a:	4603      	mov	r3, r0
}
    272c:	4618      	mov	r0, r3
    272e:	3708      	adds	r7, #8
    2730:	46bd      	mov	sp, r7
    2732:	bd80      	pop	{r7, pc}
    2734:	000103ec 	.word	0x000103ec
    2738:	00003fd5 	.word	0x00003fd5
    273c:	00004c39 	.word	0x00004c39

00002740 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    2740:	b590      	push	{r4, r7, lr}
    2742:	b083      	sub	sp, #12
    2744:	af00      	add	r7, sp, #0
    2746:	4603      	mov	r3, r0
    2748:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    274a:	4b07      	ldr	r3, [pc, #28]	; (2768 <delay_us+0x28>)
    274c:	681c      	ldr	r4, [r3, #0]
    274e:	88fb      	ldrh	r3, [r7, #6]
    2750:	4618      	mov	r0, r3
    2752:	4b06      	ldr	r3, [pc, #24]	; (276c <delay_us+0x2c>)
    2754:	4798      	blx	r3
    2756:	4603      	mov	r3, r0
    2758:	4619      	mov	r1, r3
    275a:	4620      	mov	r0, r4
    275c:	4b04      	ldr	r3, [pc, #16]	; (2770 <delay_us+0x30>)
    275e:	4798      	blx	r3
}
    2760:	bf00      	nop
    2762:	370c      	adds	r7, #12
    2764:	46bd      	mov	sp, r7
    2766:	bd90      	pop	{r4, r7, pc}
    2768:	20000a6c 	.word	0x20000a6c
    276c:	00004989 	.word	0x00004989
    2770:	00004b21 	.word	0x00004b21

00002774 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2774:	b590      	push	{r4, r7, lr}
    2776:	b083      	sub	sp, #12
    2778:	af00      	add	r7, sp, #0
    277a:	4603      	mov	r3, r0
    277c:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    277e:	4b07      	ldr	r3, [pc, #28]	; (279c <delay_ms+0x28>)
    2780:	681c      	ldr	r4, [r3, #0]
    2782:	88fb      	ldrh	r3, [r7, #6]
    2784:	4618      	mov	r0, r3
    2786:	4b06      	ldr	r3, [pc, #24]	; (27a0 <delay_ms+0x2c>)
    2788:	4798      	blx	r3
    278a:	4603      	mov	r3, r0
    278c:	4619      	mov	r1, r3
    278e:	4620      	mov	r0, r4
    2790:	4b04      	ldr	r3, [pc, #16]	; (27a4 <delay_ms+0x30>)
    2792:	4798      	blx	r3
}
    2794:	bf00      	nop
    2796:	370c      	adds	r7, #12
    2798:	46bd      	mov	sp, r7
    279a:	bd90      	pop	{r4, r7, pc}
    279c:	20000a6c 	.word	0x20000a6c
    27a0:	00004af5 	.word	0x00004af5
    27a4:	00004b21 	.word	0x00004b21

000027a8 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    27a8:	b580      	push	{r7, lr}
    27aa:	af00      	add	r7, sp, #0
	return _event_system_init();
    27ac:	4b02      	ldr	r3, [pc, #8]	; (27b8 <event_system_init+0x10>)
    27ae:	4798      	blx	r3
    27b0:	4603      	mov	r3, r0
}
    27b2:	4618      	mov	r0, r3
    27b4:	bd80      	pop	{r7, pc}
    27b6:	bf00      	nop
    27b8:	000053f5 	.word	0x000053f5

000027bc <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    27bc:	b580      	push	{r7, lr}
    27be:	b082      	sub	sp, #8
    27c0:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    27c2:	2300      	movs	r3, #0
    27c4:	80fb      	strh	r3, [r7, #6]
    27c6:	e00e      	b.n	27e6 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    27c8:	88fb      	ldrh	r3, [r7, #6]
    27ca:	4a0c      	ldr	r2, [pc, #48]	; (27fc <ext_irq_init+0x40>)
    27cc:	00db      	lsls	r3, r3, #3
    27ce:	4413      	add	r3, r2
    27d0:	f04f 32ff 	mov.w	r2, #4294967295
    27d4:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    27d6:	88fb      	ldrh	r3, [r7, #6]
    27d8:	4a08      	ldr	r2, [pc, #32]	; (27fc <ext_irq_init+0x40>)
    27da:	2100      	movs	r1, #0
    27dc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    27e0:	88fb      	ldrh	r3, [r7, #6]
    27e2:	3301      	adds	r3, #1
    27e4:	80fb      	strh	r3, [r7, #6]
    27e6:	88fb      	ldrh	r3, [r7, #6]
    27e8:	2b08      	cmp	r3, #8
    27ea:	d9ed      	bls.n	27c8 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    27ec:	4804      	ldr	r0, [pc, #16]	; (2800 <ext_irq_init+0x44>)
    27ee:	4b05      	ldr	r3, [pc, #20]	; (2804 <ext_irq_init+0x48>)
    27f0:	4798      	blx	r3
    27f2:	4603      	mov	r3, r0
}
    27f4:	4618      	mov	r0, r3
    27f6:	3708      	adds	r7, #8
    27f8:	46bd      	mov	sp, r7
    27fa:	bd80      	pop	{r7, pc}
    27fc:	20000a70 	.word	0x20000a70
    2800:	00002961 	.word	0x00002961
    2804:	00004f79 	.word	0x00004f79

00002808 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    2808:	b580      	push	{r7, lr}
    280a:	b086      	sub	sp, #24
    280c:	af00      	add	r7, sp, #0
    280e:	6078      	str	r0, [r7, #4]
    2810:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    2812:	2300      	movs	r3, #0
    2814:	75fb      	strb	r3, [r7, #23]
    2816:	2300      	movs	r3, #0
    2818:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    281a:	2300      	movs	r3, #0
    281c:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    281e:	e012      	b.n	2846 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    2820:	7dfb      	ldrb	r3, [r7, #23]
    2822:	4a4d      	ldr	r2, [pc, #308]	; (2958 <ext_irq_register+0x150>)
    2824:	00db      	lsls	r3, r3, #3
    2826:	4413      	add	r3, r2
    2828:	685a      	ldr	r2, [r3, #4]
    282a:	687b      	ldr	r3, [r7, #4]
    282c:	429a      	cmp	r2, r3
    282e:	d107      	bne.n	2840 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    2830:	7dfb      	ldrb	r3, [r7, #23]
    2832:	4949      	ldr	r1, [pc, #292]	; (2958 <ext_irq_register+0x150>)
    2834:	683a      	ldr	r2, [r7, #0]
    2836:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    283a:	2301      	movs	r3, #1
    283c:	757b      	strb	r3, [r7, #21]
			break;
    283e:	e005      	b.n	284c <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2840:	7dfb      	ldrb	r3, [r7, #23]
    2842:	3301      	adds	r3, #1
    2844:	75fb      	strb	r3, [r7, #23]
    2846:	7dfb      	ldrb	r3, [r7, #23]
    2848:	2b08      	cmp	r3, #8
    284a:	d9e9      	bls.n	2820 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    284c:	683b      	ldr	r3, [r7, #0]
    284e:	2b00      	cmp	r3, #0
    2850:	d10e      	bne.n	2870 <ext_irq_register+0x68>
		if (!found) {
    2852:	7d7b      	ldrb	r3, [r7, #21]
    2854:	f083 0301 	eor.w	r3, r3, #1
    2858:	b2db      	uxtb	r3, r3
    285a:	2b00      	cmp	r3, #0
    285c:	d002      	beq.n	2864 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    285e:	f06f 030c 	mvn.w	r3, #12
    2862:	e074      	b.n	294e <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    2864:	2100      	movs	r1, #0
    2866:	6878      	ldr	r0, [r7, #4]
    2868:	4b3c      	ldr	r3, [pc, #240]	; (295c <ext_irq_register+0x154>)
    286a:	4798      	blx	r3
    286c:	4603      	mov	r3, r0
    286e:	e06e      	b.n	294e <ext_irq_register+0x146>
	}

	if (!found) {
    2870:	7d7b      	ldrb	r3, [r7, #21]
    2872:	f083 0301 	eor.w	r3, r3, #1
    2876:	b2db      	uxtb	r3, r3
    2878:	2b00      	cmp	r3, #0
    287a:	d05a      	beq.n	2932 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    287c:	2300      	movs	r3, #0
    287e:	75fb      	strb	r3, [r7, #23]
    2880:	e016      	b.n	28b0 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    2882:	7dfb      	ldrb	r3, [r7, #23]
    2884:	4a34      	ldr	r2, [pc, #208]	; (2958 <ext_irq_register+0x150>)
    2886:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    288a:	2b00      	cmp	r3, #0
    288c:	d10d      	bne.n	28aa <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    288e:	7dfb      	ldrb	r3, [r7, #23]
    2890:	4931      	ldr	r1, [pc, #196]	; (2958 <ext_irq_register+0x150>)
    2892:	683a      	ldr	r2, [r7, #0]
    2894:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    2898:	7dfb      	ldrb	r3, [r7, #23]
    289a:	4a2f      	ldr	r2, [pc, #188]	; (2958 <ext_irq_register+0x150>)
    289c:	00db      	lsls	r3, r3, #3
    289e:	4413      	add	r3, r2
    28a0:	687a      	ldr	r2, [r7, #4]
    28a2:	605a      	str	r2, [r3, #4]
				found           = true;
    28a4:	2301      	movs	r3, #1
    28a6:	757b      	strb	r3, [r7, #21]
				break;
    28a8:	e005      	b.n	28b6 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    28aa:	7dfb      	ldrb	r3, [r7, #23]
    28ac:	3301      	adds	r3, #1
    28ae:	75fb      	strb	r3, [r7, #23]
    28b0:	7dfb      	ldrb	r3, [r7, #23]
    28b2:	2b08      	cmp	r3, #8
    28b4:	d9e5      	bls.n	2882 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    28b6:	e036      	b.n	2926 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    28b8:	7dfb      	ldrb	r3, [r7, #23]
    28ba:	4a27      	ldr	r2, [pc, #156]	; (2958 <ext_irq_register+0x150>)
    28bc:	00db      	lsls	r3, r3, #3
    28be:	4413      	add	r3, r2
    28c0:	685a      	ldr	r2, [r3, #4]
    28c2:	7dbb      	ldrb	r3, [r7, #22]
    28c4:	4924      	ldr	r1, [pc, #144]	; (2958 <ext_irq_register+0x150>)
    28c6:	00db      	lsls	r3, r3, #3
    28c8:	440b      	add	r3, r1
    28ca:	685b      	ldr	r3, [r3, #4]
    28cc:	429a      	cmp	r2, r3
    28ce:	d227      	bcs.n	2920 <ext_irq_register+0x118>
    28d0:	7dbb      	ldrb	r3, [r7, #22]
    28d2:	4a21      	ldr	r2, [pc, #132]	; (2958 <ext_irq_register+0x150>)
    28d4:	00db      	lsls	r3, r3, #3
    28d6:	4413      	add	r3, r2
    28d8:	685b      	ldr	r3, [r3, #4]
    28da:	f1b3 3fff 	cmp.w	r3, #4294967295
    28de:	d01f      	beq.n	2920 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    28e0:	7dbb      	ldrb	r3, [r7, #22]
    28e2:	491d      	ldr	r1, [pc, #116]	; (2958 <ext_irq_register+0x150>)
    28e4:	f107 020c 	add.w	r2, r7, #12
    28e8:	00db      	lsls	r3, r3, #3
    28ea:	440b      	add	r3, r1
    28ec:	e893 0003 	ldmia.w	r3, {r0, r1}
    28f0:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    28f4:	7dbb      	ldrb	r3, [r7, #22]
    28f6:	7dfa      	ldrb	r2, [r7, #23]
    28f8:	4817      	ldr	r0, [pc, #92]	; (2958 <ext_irq_register+0x150>)
    28fa:	4917      	ldr	r1, [pc, #92]	; (2958 <ext_irq_register+0x150>)
    28fc:	00db      	lsls	r3, r3, #3
    28fe:	4403      	add	r3, r0
    2900:	00d2      	lsls	r2, r2, #3
    2902:	440a      	add	r2, r1
    2904:	e892 0003 	ldmia.w	r2, {r0, r1}
    2908:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    290c:	7dfb      	ldrb	r3, [r7, #23]
    290e:	4a12      	ldr	r2, [pc, #72]	; (2958 <ext_irq_register+0x150>)
    2910:	00db      	lsls	r3, r3, #3
    2912:	4413      	add	r3, r2
    2914:	f107 020c 	add.w	r2, r7, #12
    2918:	e892 0003 	ldmia.w	r2, {r0, r1}
    291c:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2920:	7dbb      	ldrb	r3, [r7, #22]
    2922:	3301      	adds	r3, #1
    2924:	75bb      	strb	r3, [r7, #22]
    2926:	7dbb      	ldrb	r3, [r7, #22]
    2928:	2b08      	cmp	r3, #8
    292a:	d802      	bhi.n	2932 <ext_irq_register+0x12a>
    292c:	7dfb      	ldrb	r3, [r7, #23]
    292e:	2b08      	cmp	r3, #8
    2930:	d9c2      	bls.n	28b8 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    2932:	7d7b      	ldrb	r3, [r7, #21]
    2934:	f083 0301 	eor.w	r3, r3, #1
    2938:	b2db      	uxtb	r3, r3
    293a:	2b00      	cmp	r3, #0
    293c:	d002      	beq.n	2944 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    293e:	f06f 030c 	mvn.w	r3, #12
    2942:	e004      	b.n	294e <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    2944:	2101      	movs	r1, #1
    2946:	6878      	ldr	r0, [r7, #4]
    2948:	4b04      	ldr	r3, [pc, #16]	; (295c <ext_irq_register+0x154>)
    294a:	4798      	blx	r3
    294c:	4603      	mov	r3, r0
}
    294e:	4618      	mov	r0, r3
    2950:	3718      	adds	r7, #24
    2952:	46bd      	mov	sp, r7
    2954:	bd80      	pop	{r7, pc}
    2956:	bf00      	nop
    2958:	20000a70 	.word	0x20000a70
    295c:	0000510d 	.word	0x0000510d

00002960 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    2960:	b580      	push	{r7, lr}
    2962:	b084      	sub	sp, #16
    2964:	af00      	add	r7, sp, #0
    2966:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2968:	2300      	movs	r3, #0
    296a:	73fb      	strb	r3, [r7, #15]
    296c:	2309      	movs	r3, #9
    296e:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    2970:	e02a      	b.n	29c8 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    2972:	7bba      	ldrb	r2, [r7, #14]
    2974:	7bfb      	ldrb	r3, [r7, #15]
    2976:	4413      	add	r3, r2
    2978:	105b      	asrs	r3, r3, #1
    297a:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    297c:	7b7b      	ldrb	r3, [r7, #13]
    297e:	2b08      	cmp	r3, #8
    2980:	d827      	bhi.n	29d2 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    2982:	7b7b      	ldrb	r3, [r7, #13]
    2984:	4a16      	ldr	r2, [pc, #88]	; (29e0 <process_ext_irq+0x80>)
    2986:	00db      	lsls	r3, r3, #3
    2988:	4413      	add	r3, r2
    298a:	685a      	ldr	r2, [r3, #4]
    298c:	687b      	ldr	r3, [r7, #4]
    298e:	429a      	cmp	r2, r3
    2990:	d10b      	bne.n	29aa <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    2992:	7b7b      	ldrb	r3, [r7, #13]
    2994:	4a12      	ldr	r2, [pc, #72]	; (29e0 <process_ext_irq+0x80>)
    2996:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    299a:	2b00      	cmp	r3, #0
    299c:	d01b      	beq.n	29d6 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    299e:	7b7b      	ldrb	r3, [r7, #13]
    29a0:	4a0f      	ldr	r2, [pc, #60]	; (29e0 <process_ext_irq+0x80>)
    29a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    29a6:	4798      	blx	r3
			}
			return;
    29a8:	e015      	b.n	29d6 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    29aa:	7b7b      	ldrb	r3, [r7, #13]
    29ac:	4a0c      	ldr	r2, [pc, #48]	; (29e0 <process_ext_irq+0x80>)
    29ae:	00db      	lsls	r3, r3, #3
    29b0:	4413      	add	r3, r2
    29b2:	685a      	ldr	r2, [r3, #4]
    29b4:	687b      	ldr	r3, [r7, #4]
    29b6:	429a      	cmp	r2, r3
    29b8:	d203      	bcs.n	29c2 <process_ext_irq+0x62>
			lower = middle + 1;
    29ba:	7b7b      	ldrb	r3, [r7, #13]
    29bc:	3301      	adds	r3, #1
    29be:	73fb      	strb	r3, [r7, #15]
    29c0:	e002      	b.n	29c8 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    29c2:	7b7b      	ldrb	r3, [r7, #13]
    29c4:	3b01      	subs	r3, #1
    29c6:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    29c8:	7bba      	ldrb	r2, [r7, #14]
    29ca:	7bfb      	ldrb	r3, [r7, #15]
    29cc:	429a      	cmp	r2, r3
    29ce:	d2d0      	bcs.n	2972 <process_ext_irq+0x12>
    29d0:	e002      	b.n	29d8 <process_ext_irq+0x78>
			return;
    29d2:	bf00      	nop
    29d4:	e000      	b.n	29d8 <process_ext_irq+0x78>
			return;
    29d6:	bf00      	nop
		}
	}
}
    29d8:	3710      	adds	r7, #16
    29da:	46bd      	mov	sp, r7
    29dc:	bd80      	pop	{r7, pc}
    29de:	bf00      	nop
    29e0:	20000a70 	.word	0x20000a70

000029e4 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    29e4:	b580      	push	{r7, lr}
    29e6:	b084      	sub	sp, #16
    29e8:	af00      	add	r7, sp, #0
    29ea:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    29ec:	687b      	ldr	r3, [r7, #4]
    29ee:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    29f0:	687b      	ldr	r3, [r7, #4]
    29f2:	885b      	ldrh	r3, [r3, #2]
    29f4:	b29b      	uxth	r3, r3
    29f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    29fa:	2b00      	cmp	r3, #0
    29fc:	d107      	bne.n	2a0e <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    29fe:	68fb      	ldr	r3, [r7, #12]
    2a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2a02:	2b00      	cmp	r3, #0
    2a04:	d003      	beq.n	2a0e <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    2a06:	68fb      	ldr	r3, [r7, #12]
    2a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2a0a:	68f8      	ldr	r0, [r7, #12]
    2a0c:	4798      	blx	r3
		}
	}
}
    2a0e:	bf00      	nop
    2a10:	3710      	adds	r7, #16
    2a12:	46bd      	mov	sp, r7
    2a14:	bd80      	pop	{r7, pc}

00002a16 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    2a16:	b580      	push	{r7, lr}
    2a18:	b084      	sub	sp, #16
    2a1a:	af00      	add	r7, sp, #0
    2a1c:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    2a1e:	687b      	ldr	r3, [r7, #4]
    2a20:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    2a22:	687b      	ldr	r3, [r7, #4]
    2a24:	885b      	ldrh	r3, [r3, #2]
    2a26:	b29b      	uxth	r3, r3
    2a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2a2c:	2b00      	cmp	r3, #0
    2a2e:	d107      	bne.n	2a40 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    2a30:	68fb      	ldr	r3, [r7, #12]
    2a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2a34:	2b00      	cmp	r3, #0
    2a36:	d003      	beq.n	2a40 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    2a38:	68fb      	ldr	r3, [r7, #12]
    2a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2a3c:	68f8      	ldr	r0, [r7, #12]
    2a3e:	4798      	blx	r3
		}
	}
}
    2a40:	bf00      	nop
    2a42:	3710      	adds	r7, #16
    2a44:	46bd      	mov	sp, r7
    2a46:	bd80      	pop	{r7, pc}

00002a48 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    2a48:	b580      	push	{r7, lr}
    2a4a:	b084      	sub	sp, #16
    2a4c:	af00      	add	r7, sp, #0
    2a4e:	6078      	str	r0, [r7, #4]
    2a50:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    2a52:	687b      	ldr	r3, [r7, #4]
    2a54:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    2a56:	687b      	ldr	r3, [r7, #4]
    2a58:	885b      	ldrh	r3, [r3, #2]
    2a5a:	b29b      	uxth	r3, r3
    2a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2a60:	2b00      	cmp	r3, #0
    2a62:	d108      	bne.n	2a76 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    2a64:	68fb      	ldr	r3, [r7, #12]
    2a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2a68:	2b00      	cmp	r3, #0
    2a6a:	d004      	beq.n	2a76 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    2a6c:	68fb      	ldr	r3, [r7, #12]
    2a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2a70:	6839      	ldr	r1, [r7, #0]
    2a72:	68f8      	ldr	r0, [r7, #12]
    2a74:	4798      	blx	r3
		}
	}
}
    2a76:	bf00      	nop
    2a78:	3710      	adds	r7, #16
    2a7a:	46bd      	mov	sp, r7
    2a7c:	bd80      	pop	{r7, pc}
	...

00002a80 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    2a80:	b580      	push	{r7, lr}
    2a82:	b08a      	sub	sp, #40	; 0x28
    2a84:	af00      	add	r7, sp, #0
    2a86:	60f8      	str	r0, [r7, #12]
    2a88:	60b9      	str	r1, [r7, #8]
    2a8a:	4613      	mov	r3, r2
    2a8c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    2a8e:	68fb      	ldr	r3, [r7, #12]
    2a90:	3b28      	subs	r3, #40	; 0x28
    2a92:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    2a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a96:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    2a98:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2a9a:	88fb      	ldrh	r3, [r7, #6]
    2a9c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    2a9e:	f248 0301 	movw	r3, #32769	; 0x8001
    2aa2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2aa4:	68bb      	ldr	r3, [r7, #8]
    2aa6:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    2aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2aaa:	f107 0214 	add.w	r2, r7, #20
    2aae:	4611      	mov	r1, r2
    2ab0:	4618      	mov	r0, r3
    2ab2:	4b06      	ldr	r3, [pc, #24]	; (2acc <i2c_m_async_read+0x4c>)
    2ab4:	4798      	blx	r3
    2ab6:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    2ab8:	6a3b      	ldr	r3, [r7, #32]
    2aba:	2b00      	cmp	r3, #0
    2abc:	d001      	beq.n	2ac2 <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    2abe:	6a3b      	ldr	r3, [r7, #32]
    2ac0:	e000      	b.n	2ac4 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    2ac2:	88fb      	ldrh	r3, [r7, #6]
}
    2ac4:	4618      	mov	r0, r3
    2ac6:	3728      	adds	r7, #40	; 0x28
    2ac8:	46bd      	mov	sp, r7
    2aca:	bd80      	pop	{r7, pc}
    2acc:	000071e1 	.word	0x000071e1

00002ad0 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    2ad0:	b580      	push	{r7, lr}
    2ad2:	b08a      	sub	sp, #40	; 0x28
    2ad4:	af00      	add	r7, sp, #0
    2ad6:	60f8      	str	r0, [r7, #12]
    2ad8:	60b9      	str	r1, [r7, #8]
    2ada:	4613      	mov	r3, r2
    2adc:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    2ade:	68fb      	ldr	r3, [r7, #12]
    2ae0:	3b28      	subs	r3, #40	; 0x28
    2ae2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    2ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ae6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    2ae8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2aea:	88fb      	ldrh	r3, [r7, #6]
    2aec:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    2aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2af2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2af4:	68bb      	ldr	r3, [r7, #8]
    2af6:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    2af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2afa:	f107 0214 	add.w	r2, r7, #20
    2afe:	4611      	mov	r1, r2
    2b00:	4618      	mov	r0, r3
    2b02:	4b06      	ldr	r3, [pc, #24]	; (2b1c <i2c_m_async_write+0x4c>)
    2b04:	4798      	blx	r3
    2b06:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    2b08:	6a3b      	ldr	r3, [r7, #32]
    2b0a:	2b00      	cmp	r3, #0
    2b0c:	d001      	beq.n	2b12 <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    2b0e:	6a3b      	ldr	r3, [r7, #32]
    2b10:	e000      	b.n	2b14 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    2b12:	88fb      	ldrh	r3, [r7, #6]
}
    2b14:	4618      	mov	r0, r3
    2b16:	3728      	adds	r7, #40	; 0x28
    2b18:	46bd      	mov	sp, r7
    2b1a:	bd80      	pop	{r7, pc}
    2b1c:	000071e1 	.word	0x000071e1

00002b20 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    2b20:	b580      	push	{r7, lr}
    2b22:	b084      	sub	sp, #16
    2b24:	af00      	add	r7, sp, #0
    2b26:	6078      	str	r0, [r7, #4]
    2b28:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    2b2a:	687b      	ldr	r3, [r7, #4]
    2b2c:	2b00      	cmp	r3, #0
    2b2e:	bf14      	ite	ne
    2b30:	2301      	movne	r3, #1
    2b32:	2300      	moveq	r3, #0
    2b34:	b2db      	uxtb	r3, r3
    2b36:	2289      	movs	r2, #137	; 0x89
    2b38:	4915      	ldr	r1, [pc, #84]	; (2b90 <i2c_m_async_init+0x70>)
    2b3a:	4618      	mov	r0, r3
    2b3c:	4b15      	ldr	r3, [pc, #84]	; (2b94 <i2c_m_async_init+0x74>)
    2b3e:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    2b40:	687b      	ldr	r3, [r7, #4]
    2b42:	6839      	ldr	r1, [r7, #0]
    2b44:	4618      	mov	r0, r3
    2b46:	4b14      	ldr	r3, [pc, #80]	; (2b98 <i2c_m_async_init+0x78>)
    2b48:	4798      	blx	r3
    2b4a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2b4c:	68fb      	ldr	r3, [r7, #12]
    2b4e:	2b00      	cmp	r3, #0
    2b50:	d001      	beq.n	2b56 <i2c_m_async_init+0x36>
		return init_status;
    2b52:	68fb      	ldr	r3, [r7, #12]
    2b54:	e018      	b.n	2b88 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    2b56:	687b      	ldr	r3, [r7, #4]
    2b58:	4a10      	ldr	r2, [pc, #64]	; (2b9c <i2c_m_async_init+0x7c>)
    2b5a:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    2b5c:	687b      	ldr	r3, [r7, #4]
    2b5e:	4a10      	ldr	r2, [pc, #64]	; (2ba0 <i2c_m_async_init+0x80>)
    2b60:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    2b62:	687b      	ldr	r3, [r7, #4]
    2b64:	4a0f      	ldr	r2, [pc, #60]	; (2ba4 <i2c_m_async_init+0x84>)
    2b66:	2101      	movs	r1, #1
    2b68:	4618      	mov	r0, r3
    2b6a:	4b0f      	ldr	r3, [pc, #60]	; (2ba8 <i2c_m_async_init+0x88>)
    2b6c:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    2b6e:	687b      	ldr	r3, [r7, #4]
    2b70:	4a0e      	ldr	r2, [pc, #56]	; (2bac <i2c_m_async_init+0x8c>)
    2b72:	2102      	movs	r1, #2
    2b74:	4618      	mov	r0, r3
    2b76:	4b0c      	ldr	r3, [pc, #48]	; (2ba8 <i2c_m_async_init+0x88>)
    2b78:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    2b7a:	687b      	ldr	r3, [r7, #4]
    2b7c:	4a0c      	ldr	r2, [pc, #48]	; (2bb0 <i2c_m_async_init+0x90>)
    2b7e:	2100      	movs	r1, #0
    2b80:	4618      	mov	r0, r3
    2b82:	4b09      	ldr	r3, [pc, #36]	; (2ba8 <i2c_m_async_init+0x88>)
    2b84:	4798      	blx	r3

	return ERR_NONE;
    2b86:	2300      	movs	r3, #0
}
    2b88:	4618      	mov	r0, r3
    2b8a:	3710      	adds	r7, #16
    2b8c:	46bd      	mov	sp, r7
    2b8e:	bd80      	pop	{r7, pc}
    2b90:	00010408 	.word	0x00010408
    2b94:	00003fd5 	.word	0x00003fd5
    2b98:	00007031 	.word	0x00007031
    2b9c:	00002a81 	.word	0x00002a81
    2ba0:	00002ad1 	.word	0x00002ad1
    2ba4:	000029e5 	.word	0x000029e5
    2ba8:	000072b5 	.word	0x000072b5
    2bac:	00002a17 	.word	0x00002a17
    2bb0:	00002a49 	.word	0x00002a49

00002bb4 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    2bb4:	b580      	push	{r7, lr}
    2bb6:	b08a      	sub	sp, #40	; 0x28
    2bb8:	af00      	add	r7, sp, #0
    2bba:	60f8      	str	r0, [r7, #12]
    2bbc:	60b9      	str	r1, [r7, #8]
    2bbe:	4613      	mov	r3, r2
    2bc0:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2bc2:	68fb      	ldr	r3, [r7, #12]
    2bc4:	3b14      	subs	r3, #20
    2bc6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2bca:	8b9b      	ldrh	r3, [r3, #28]
    2bcc:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2bce:	88fb      	ldrh	r3, [r7, #6]
    2bd0:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    2bd2:	f248 0301 	movw	r3, #32769	; 0x8001
    2bd6:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2bd8:	68bb      	ldr	r3, [r7, #8]
    2bda:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2bde:	f107 0214 	add.w	r2, r7, #20
    2be2:	4611      	mov	r1, r2
    2be4:	4618      	mov	r0, r3
    2be6:	4b06      	ldr	r3, [pc, #24]	; (2c00 <i2c_m_sync_read+0x4c>)
    2be8:	4798      	blx	r3
    2bea:	6238      	str	r0, [r7, #32]

	if (ret) {
    2bec:	6a3b      	ldr	r3, [r7, #32]
    2bee:	2b00      	cmp	r3, #0
    2bf0:	d001      	beq.n	2bf6 <i2c_m_sync_read+0x42>
		return ret;
    2bf2:	6a3b      	ldr	r3, [r7, #32]
    2bf4:	e000      	b.n	2bf8 <i2c_m_sync_read+0x44>
	}

	return n;
    2bf6:	88fb      	ldrh	r3, [r7, #6]
}
    2bf8:	4618      	mov	r0, r3
    2bfa:	3728      	adds	r7, #40	; 0x28
    2bfc:	46bd      	mov	sp, r7
    2bfe:	bd80      	pop	{r7, pc}
    2c00:	000074fd 	.word	0x000074fd

00002c04 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    2c04:	b580      	push	{r7, lr}
    2c06:	b08a      	sub	sp, #40	; 0x28
    2c08:	af00      	add	r7, sp, #0
    2c0a:	60f8      	str	r0, [r7, #12]
    2c0c:	60b9      	str	r1, [r7, #8]
    2c0e:	4613      	mov	r3, r2
    2c10:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2c12:	68fb      	ldr	r3, [r7, #12]
    2c14:	3b14      	subs	r3, #20
    2c16:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c1a:	8b9b      	ldrh	r3, [r3, #28]
    2c1c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2c1e:	88fb      	ldrh	r3, [r7, #6]
    2c20:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    2c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2c26:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2c28:	68bb      	ldr	r3, [r7, #8]
    2c2a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c2e:	f107 0214 	add.w	r2, r7, #20
    2c32:	4611      	mov	r1, r2
    2c34:	4618      	mov	r0, r3
    2c36:	4b06      	ldr	r3, [pc, #24]	; (2c50 <i2c_m_sync_write+0x4c>)
    2c38:	4798      	blx	r3
    2c3a:	6238      	str	r0, [r7, #32]

	if (ret) {
    2c3c:	6a3b      	ldr	r3, [r7, #32]
    2c3e:	2b00      	cmp	r3, #0
    2c40:	d001      	beq.n	2c46 <i2c_m_sync_write+0x42>
		return ret;
    2c42:	6a3b      	ldr	r3, [r7, #32]
    2c44:	e000      	b.n	2c48 <i2c_m_sync_write+0x44>
	}

	return n;
    2c46:	88fb      	ldrh	r3, [r7, #6]
}
    2c48:	4618      	mov	r0, r3
    2c4a:	3728      	adds	r7, #40	; 0x28
    2c4c:	46bd      	mov	sp, r7
    2c4e:	bd80      	pop	{r7, pc}
    2c50:	000074fd 	.word	0x000074fd

00002c54 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    2c54:	b580      	push	{r7, lr}
    2c56:	b084      	sub	sp, #16
    2c58:	af00      	add	r7, sp, #0
    2c5a:	6078      	str	r0, [r7, #4]
    2c5c:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    2c5e:	687b      	ldr	r3, [r7, #4]
    2c60:	2b00      	cmp	r3, #0
    2c62:	bf14      	ite	ne
    2c64:	2301      	movne	r3, #1
    2c66:	2300      	moveq	r3, #0
    2c68:	b2db      	uxtb	r3, r3
    2c6a:	225e      	movs	r2, #94	; 0x5e
    2c6c:	490c      	ldr	r1, [pc, #48]	; (2ca0 <i2c_m_sync_init+0x4c>)
    2c6e:	4618      	mov	r0, r3
    2c70:	4b0c      	ldr	r3, [pc, #48]	; (2ca4 <i2c_m_sync_init+0x50>)
    2c72:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2c74:	687b      	ldr	r3, [r7, #4]
    2c76:	6839      	ldr	r1, [r7, #0]
    2c78:	4618      	mov	r0, r3
    2c7a:	4b0b      	ldr	r3, [pc, #44]	; (2ca8 <i2c_m_sync_init+0x54>)
    2c7c:	4798      	blx	r3
    2c7e:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2c80:	68fb      	ldr	r3, [r7, #12]
    2c82:	2b00      	cmp	r3, #0
    2c84:	d001      	beq.n	2c8a <i2c_m_sync_init+0x36>
		return init_status;
    2c86:	68fb      	ldr	r3, [r7, #12]
    2c88:	e006      	b.n	2c98 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    2c8a:	687b      	ldr	r3, [r7, #4]
    2c8c:	4a07      	ldr	r2, [pc, #28]	; (2cac <i2c_m_sync_init+0x58>)
    2c8e:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    2c90:	687b      	ldr	r3, [r7, #4]
    2c92:	4a07      	ldr	r2, [pc, #28]	; (2cb0 <i2c_m_sync_init+0x5c>)
    2c94:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    2c96:	2300      	movs	r3, #0
}
    2c98:	4618      	mov	r0, r3
    2c9a:	3710      	adds	r7, #16
    2c9c:	46bd      	mov	sp, r7
    2c9e:	bd80      	pop	{r7, pc}
    2ca0:	00010428 	.word	0x00010428
    2ca4:	00003fd5 	.word	0x00003fd5
    2ca8:	000072f9 	.word	0x000072f9
    2cac:	00002bb5 	.word	0x00002bb5
    2cb0:	00002c05 	.word	0x00002c05

00002cb4 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    2cb4:	b580      	push	{r7, lr}
    2cb6:	b082      	sub	sp, #8
    2cb8:	af00      	add	r7, sp, #0
    2cba:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    2cbc:	687b      	ldr	r3, [r7, #4]
    2cbe:	4618      	mov	r0, r3
    2cc0:	4b03      	ldr	r3, [pc, #12]	; (2cd0 <i2c_m_sync_enable+0x1c>)
    2cc2:	4798      	blx	r3
    2cc4:	4603      	mov	r3, r0
}
    2cc6:	4618      	mov	r0, r3
    2cc8:	3708      	adds	r7, #8
    2cca:	46bd      	mov	sp, r7
    2ccc:	bd80      	pop	{r7, pc}
    2cce:	bf00      	nop
    2cd0:	00007341 	.word	0x00007341

00002cd4 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    2cd4:	b480      	push	{r7}
    2cd6:	b085      	sub	sp, #20
    2cd8:	af00      	add	r7, sp, #0
    2cda:	60f8      	str	r0, [r7, #12]
    2cdc:	460b      	mov	r3, r1
    2cde:	607a      	str	r2, [r7, #4]
    2ce0:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    2ce2:	897b      	ldrh	r3, [r7, #10]
    2ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2ce8:	b21a      	sxth	r2, r3
    2cea:	687b      	ldr	r3, [r7, #4]
    2cec:	b21b      	sxth	r3, r3
    2cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2cf2:	b21b      	sxth	r3, r3
    2cf4:	4313      	orrs	r3, r2
    2cf6:	b21b      	sxth	r3, r3
    2cf8:	b29a      	uxth	r2, r3
    2cfa:	68fb      	ldr	r3, [r7, #12]
    2cfc:	839a      	strh	r2, [r3, #28]
    2cfe:	68fb      	ldr	r3, [r7, #12]
    2d00:	8b9b      	ldrh	r3, [r3, #28]
}
    2d02:	4618      	mov	r0, r3
    2d04:	3714      	adds	r7, #20
    2d06:	46bd      	mov	sp, r7
    2d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d0c:	4770      	bx	lr

00002d0e <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    2d0e:	b480      	push	{r7}
    2d10:	b083      	sub	sp, #12
    2d12:	af00      	add	r7, sp, #0
    2d14:	6078      	str	r0, [r7, #4]
    2d16:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    2d18:	687b      	ldr	r3, [r7, #4]
    2d1a:	f103 0214 	add.w	r2, r3, #20
    2d1e:	683b      	ldr	r3, [r7, #0]
    2d20:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    2d22:	2300      	movs	r3, #0
}
    2d24:	4618      	mov	r0, r3
    2d26:	370c      	adds	r7, #12
    2d28:	46bd      	mov	sp, r7
    2d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d2e:	4770      	bx	lr

00002d30 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    2d30:	b580      	push	{r7, lr}
    2d32:	b084      	sub	sp, #16
    2d34:	af00      	add	r7, sp, #0
    2d36:	60f8      	str	r0, [r7, #12]
    2d38:	60b9      	str	r1, [r7, #8]
    2d3a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2d3c:	68fb      	ldr	r3, [r7, #12]
    2d3e:	2b00      	cmp	r3, #0
    2d40:	d004      	beq.n	2d4c <pwm_init+0x1c>
    2d42:	68bb      	ldr	r3, [r7, #8]
    2d44:	2b00      	cmp	r3, #0
    2d46:	d001      	beq.n	2d4c <pwm_init+0x1c>
    2d48:	2301      	movs	r3, #1
    2d4a:	e000      	b.n	2d4e <pwm_init+0x1e>
    2d4c:	2300      	movs	r3, #0
    2d4e:	f003 0301 	and.w	r3, r3, #1
    2d52:	b2db      	uxtb	r3, r3
    2d54:	2233      	movs	r2, #51	; 0x33
    2d56:	490a      	ldr	r1, [pc, #40]	; (2d80 <pwm_init+0x50>)
    2d58:	4618      	mov	r0, r3
    2d5a:	4b0a      	ldr	r3, [pc, #40]	; (2d84 <pwm_init+0x54>)
    2d5c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    2d5e:	68fb      	ldr	r3, [r7, #12]
    2d60:	68b9      	ldr	r1, [r7, #8]
    2d62:	4618      	mov	r0, r3
    2d64:	4b08      	ldr	r3, [pc, #32]	; (2d88 <pwm_init+0x58>)
    2d66:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2d68:	68fb      	ldr	r3, [r7, #12]
    2d6a:	4a08      	ldr	r2, [pc, #32]	; (2d8c <pwm_init+0x5c>)
    2d6c:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    2d6e:	68fb      	ldr	r3, [r7, #12]
    2d70:	4a07      	ldr	r2, [pc, #28]	; (2d90 <pwm_init+0x60>)
    2d72:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2d74:	2300      	movs	r3, #0
}
    2d76:	4618      	mov	r0, r3
    2d78:	3710      	adds	r7, #16
    2d7a:	46bd      	mov	sp, r7
    2d7c:	bd80      	pop	{r7, pc}
    2d7e:	bf00      	nop
    2d80:	00010444 	.word	0x00010444
    2d84:	00003fd5 	.word	0x00003fd5
    2d88:	00008c05 	.word	0x00008c05
    2d8c:	00002de9 	.word	0x00002de9
    2d90:	00002e0d 	.word	0x00002e0d

00002d94 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    2d94:	b580      	push	{r7, lr}
    2d96:	b082      	sub	sp, #8
    2d98:	af00      	add	r7, sp, #0
    2d9a:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2d9c:	687b      	ldr	r3, [r7, #4]
    2d9e:	2b00      	cmp	r3, #0
    2da0:	bf14      	ite	ne
    2da2:	2301      	movne	r3, #1
    2da4:	2300      	moveq	r3, #0
    2da6:	b2db      	uxtb	r3, r3
    2da8:	224a      	movs	r2, #74	; 0x4a
    2daa:	490b      	ldr	r1, [pc, #44]	; (2dd8 <pwm_enable+0x44>)
    2dac:	4618      	mov	r0, r3
    2dae:	4b0b      	ldr	r3, [pc, #44]	; (2ddc <pwm_enable+0x48>)
    2db0:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    2db2:	687b      	ldr	r3, [r7, #4]
    2db4:	4618      	mov	r0, r3
    2db6:	4b0a      	ldr	r3, [pc, #40]	; (2de0 <pwm_enable+0x4c>)
    2db8:	4798      	blx	r3
    2dba:	4603      	mov	r3, r0
    2dbc:	2b00      	cmp	r3, #0
    2dbe:	d002      	beq.n	2dc6 <pwm_enable+0x32>
		return ERR_DENIED;
    2dc0:	f06f 0310 	mvn.w	r3, #16
    2dc4:	e004      	b.n	2dd0 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    2dc6:	687b      	ldr	r3, [r7, #4]
    2dc8:	4618      	mov	r0, r3
    2dca:	4b06      	ldr	r3, [pc, #24]	; (2de4 <pwm_enable+0x50>)
    2dcc:	4798      	blx	r3

	return ERR_NONE;
    2dce:	2300      	movs	r3, #0
}
    2dd0:	4618      	mov	r0, r3
    2dd2:	3708      	adds	r7, #8
    2dd4:	46bd      	mov	sp, r7
    2dd6:	bd80      	pop	{r7, pc}
    2dd8:	00010444 	.word	0x00010444
    2ddc:	00003fd5 	.word	0x00003fd5
    2de0:	00008ff5 	.word	0x00008ff5
    2de4:	00008eb1 	.word	0x00008eb1

00002de8 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2de8:	b580      	push	{r7, lr}
    2dea:	b084      	sub	sp, #16
    2dec:	af00      	add	r7, sp, #0
    2dee:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2df0:	687b      	ldr	r3, [r7, #4]
    2df2:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    2df4:	68fb      	ldr	r3, [r7, #12]
    2df6:	695b      	ldr	r3, [r3, #20]
    2df8:	2b00      	cmp	r3, #0
    2dfa:	d003      	beq.n	2e04 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2dfc:	68fb      	ldr	r3, [r7, #12]
    2dfe:	695b      	ldr	r3, [r3, #20]
    2e00:	68f8      	ldr	r0, [r7, #12]
    2e02:	4798      	blx	r3
	}
}
    2e04:	bf00      	nop
    2e06:	3710      	adds	r7, #16
    2e08:	46bd      	mov	sp, r7
    2e0a:	bd80      	pop	{r7, pc}

00002e0c <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2e0c:	b580      	push	{r7, lr}
    2e0e:	b084      	sub	sp, #16
    2e10:	af00      	add	r7, sp, #0
    2e12:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2e14:	687b      	ldr	r3, [r7, #4]
    2e16:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2e18:	68fb      	ldr	r3, [r7, #12]
    2e1a:	699b      	ldr	r3, [r3, #24]
    2e1c:	2b00      	cmp	r3, #0
    2e1e:	d003      	beq.n	2e28 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2e20:	68fb      	ldr	r3, [r7, #12]
    2e22:	699b      	ldr	r3, [r3, #24]
    2e24:	68f8      	ldr	r0, [r7, #12]
    2e26:	4798      	blx	r3
	}
}
    2e28:	bf00      	nop
    2e2a:	3710      	adds	r7, #16
    2e2c:	46bd      	mov	sp, r7
    2e2e:	bd80      	pop	{r7, pc}

00002e30 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2e30:	b580      	push	{r7, lr}
    2e32:	b082      	sub	sp, #8
    2e34:	af00      	add	r7, sp, #0
    2e36:	6078      	str	r0, [r7, #4]
    2e38:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2e3a:	687b      	ldr	r3, [r7, #4]
    2e3c:	2b00      	cmp	r3, #0
    2e3e:	d004      	beq.n	2e4a <qspi_sync_init+0x1a>
    2e40:	683b      	ldr	r3, [r7, #0]
    2e42:	2b00      	cmp	r3, #0
    2e44:	d001      	beq.n	2e4a <qspi_sync_init+0x1a>
    2e46:	2301      	movs	r3, #1
    2e48:	e000      	b.n	2e4c <qspi_sync_init+0x1c>
    2e4a:	2300      	movs	r3, #0
    2e4c:	f003 0301 	and.w	r3, r3, #1
    2e50:	b2db      	uxtb	r3, r3
    2e52:	2231      	movs	r2, #49	; 0x31
    2e54:	4906      	ldr	r1, [pc, #24]	; (2e70 <qspi_sync_init+0x40>)
    2e56:	4618      	mov	r0, r3
    2e58:	4b06      	ldr	r3, [pc, #24]	; (2e74 <qspi_sync_init+0x44>)
    2e5a:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2e5c:	687b      	ldr	r3, [r7, #4]
    2e5e:	6839      	ldr	r1, [r7, #0]
    2e60:	4618      	mov	r0, r3
    2e62:	4b05      	ldr	r3, [pc, #20]	; (2e78 <qspi_sync_init+0x48>)
    2e64:	4798      	blx	r3
    2e66:	4603      	mov	r3, r0
}
    2e68:	4618      	mov	r0, r3
    2e6a:	3708      	adds	r7, #8
    2e6c:	46bd      	mov	sp, r7
    2e6e:	bd80      	pop	{r7, pc}
    2e70:	0001045c 	.word	0x0001045c
    2e74:	00003fd5 	.word	0x00003fd5
    2e78:	00005fbd 	.word	0x00005fbd

00002e7c <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2e7c:	b580      	push	{r7, lr}
    2e7e:	b082      	sub	sp, #8
    2e80:	af00      	add	r7, sp, #0
    2e82:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2e84:	687b      	ldr	r3, [r7, #4]
    2e86:	2b00      	cmp	r3, #0
    2e88:	bf14      	ite	ne
    2e8a:	2301      	movne	r3, #1
    2e8c:	2300      	moveq	r3, #0
    2e8e:	b2db      	uxtb	r3, r3
    2e90:	223f      	movs	r2, #63	; 0x3f
    2e92:	4906      	ldr	r1, [pc, #24]	; (2eac <qspi_sync_enable+0x30>)
    2e94:	4618      	mov	r0, r3
    2e96:	4b06      	ldr	r3, [pc, #24]	; (2eb0 <qspi_sync_enable+0x34>)
    2e98:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2e9a:	687b      	ldr	r3, [r7, #4]
    2e9c:	4618      	mov	r0, r3
    2e9e:	4b05      	ldr	r3, [pc, #20]	; (2eb4 <qspi_sync_enable+0x38>)
    2ea0:	4798      	blx	r3
    2ea2:	4603      	mov	r3, r0
}
    2ea4:	4618      	mov	r0, r3
    2ea6:	3708      	adds	r7, #8
    2ea8:	46bd      	mov	sp, r7
    2eaa:	bd80      	pop	{r7, pc}
    2eac:	0001045c 	.word	0x0001045c
    2eb0:	00003fd5 	.word	0x00003fd5
    2eb4:	00006031 	.word	0x00006031

00002eb8 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2eb8:	b580      	push	{r7, lr}
    2eba:	b082      	sub	sp, #8
    2ebc:	af00      	add	r7, sp, #0
    2ebe:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2ec0:	687b      	ldr	r3, [r7, #4]
    2ec2:	2b00      	cmp	r3, #0
    2ec4:	bf14      	ite	ne
    2ec6:	2301      	movne	r3, #1
    2ec8:	2300      	moveq	r3, #0
    2eca:	b2db      	uxtb	r3, r3
    2ecc:	2246      	movs	r2, #70	; 0x46
    2ece:	4906      	ldr	r1, [pc, #24]	; (2ee8 <qspi_sync_disable+0x30>)
    2ed0:	4618      	mov	r0, r3
    2ed2:	4b06      	ldr	r3, [pc, #24]	; (2eec <qspi_sync_disable+0x34>)
    2ed4:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    2ed6:	687b      	ldr	r3, [r7, #4]
    2ed8:	4618      	mov	r0, r3
    2eda:	4b05      	ldr	r3, [pc, #20]	; (2ef0 <qspi_sync_disable+0x38>)
    2edc:	4798      	blx	r3
    2ede:	4603      	mov	r3, r0
}
    2ee0:	4618      	mov	r0, r3
    2ee2:	3708      	adds	r7, #8
    2ee4:	46bd      	mov	sp, r7
    2ee6:	bd80      	pop	{r7, pc}
    2ee8:	0001045c 	.word	0x0001045c
    2eec:	00003fd5 	.word	0x00003fd5
    2ef0:	00006055 	.word	0x00006055

00002ef4 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2ef4:	b580      	push	{r7, lr}
    2ef6:	b082      	sub	sp, #8
    2ef8:	af00      	add	r7, sp, #0
    2efa:	6078      	str	r0, [r7, #4]
    2efc:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2efe:	687b      	ldr	r3, [r7, #4]
    2f00:	2b00      	cmp	r3, #0
    2f02:	d004      	beq.n	2f0e <qspi_sync_serial_run_command+0x1a>
    2f04:	683b      	ldr	r3, [r7, #0]
    2f06:	2b00      	cmp	r3, #0
    2f08:	d001      	beq.n	2f0e <qspi_sync_serial_run_command+0x1a>
    2f0a:	2301      	movs	r3, #1
    2f0c:	e000      	b.n	2f10 <qspi_sync_serial_run_command+0x1c>
    2f0e:	2300      	movs	r3, #0
    2f10:	f003 0301 	and.w	r3, r3, #1
    2f14:	b2db      	uxtb	r3, r3
    2f16:	224d      	movs	r2, #77	; 0x4d
    2f18:	4906      	ldr	r1, [pc, #24]	; (2f34 <qspi_sync_serial_run_command+0x40>)
    2f1a:	4618      	mov	r0, r3
    2f1c:	4b06      	ldr	r3, [pc, #24]	; (2f38 <qspi_sync_serial_run_command+0x44>)
    2f1e:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2f20:	687b      	ldr	r3, [r7, #4]
    2f22:	6839      	ldr	r1, [r7, #0]
    2f24:	4618      	mov	r0, r3
    2f26:	4b05      	ldr	r3, [pc, #20]	; (2f3c <qspi_sync_serial_run_command+0x48>)
    2f28:	4798      	blx	r3
    2f2a:	4603      	mov	r3, r0
}
    2f2c:	4618      	mov	r0, r3
    2f2e:	3708      	adds	r7, #8
    2f30:	46bd      	mov	sp, r7
    2f32:	bd80      	pop	{r7, pc}
    2f34:	0001045c 	.word	0x0001045c
    2f38:	00003fd5 	.word	0x00003fd5
    2f3c:	000061a1 	.word	0x000061a1

00002f40 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2f40:	b580      	push	{r7, lr}
    2f42:	b084      	sub	sp, #16
    2f44:	af00      	add	r7, sp, #0
    2f46:	6078      	str	r0, [r7, #4]
    2f48:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2f4a:	2300      	movs	r3, #0
    2f4c:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2f4e:	687b      	ldr	r3, [r7, #4]
    2f50:	2b00      	cmp	r3, #0
    2f52:	d004      	beq.n	2f5e <spi_m_sync_init+0x1e>
    2f54:	683b      	ldr	r3, [r7, #0]
    2f56:	2b00      	cmp	r3, #0
    2f58:	d001      	beq.n	2f5e <spi_m_sync_init+0x1e>
    2f5a:	2301      	movs	r3, #1
    2f5c:	e000      	b.n	2f60 <spi_m_sync_init+0x20>
    2f5e:	2300      	movs	r3, #0
    2f60:	f003 0301 	and.w	r3, r3, #1
    2f64:	b2db      	uxtb	r3, r3
    2f66:	2240      	movs	r2, #64	; 0x40
    2f68:	4910      	ldr	r1, [pc, #64]	; (2fac <spi_m_sync_init+0x6c>)
    2f6a:	4618      	mov	r0, r3
    2f6c:	4b10      	ldr	r3, [pc, #64]	; (2fb0 <spi_m_sync_init+0x70>)
    2f6e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2f70:	687b      	ldr	r3, [r7, #4]
    2f72:	683a      	ldr	r2, [r7, #0]
    2f74:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2f76:	687b      	ldr	r3, [r7, #4]
    2f78:	3304      	adds	r3, #4
    2f7a:	6839      	ldr	r1, [r7, #0]
    2f7c:	4618      	mov	r0, r3
    2f7e:	4b0d      	ldr	r3, [pc, #52]	; (2fb4 <spi_m_sync_init+0x74>)
    2f80:	4798      	blx	r3
    2f82:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2f84:	68fb      	ldr	r3, [r7, #12]
    2f86:	2b00      	cmp	r3, #0
    2f88:	da01      	bge.n	2f8e <spi_m_sync_init+0x4e>
		return rc;
    2f8a:	68fb      	ldr	r3, [r7, #12]
    2f8c:	e00a      	b.n	2fa4 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2f8e:	687b      	ldr	r3, [r7, #4]
    2f90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2f94:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2f96:	687b      	ldr	r3, [r7, #4]
    2f98:	4a07      	ldr	r2, [pc, #28]	; (2fb8 <spi_m_sync_init+0x78>)
    2f9a:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2f9c:	687b      	ldr	r3, [r7, #4]
    2f9e:	4a07      	ldr	r2, [pc, #28]	; (2fbc <spi_m_sync_init+0x7c>)
    2fa0:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2fa2:	2300      	movs	r3, #0
}
    2fa4:	4618      	mov	r0, r3
    2fa6:	3710      	adds	r7, #16
    2fa8:	46bd      	mov	sp, r7
    2faa:	bd80      	pop	{r7, pc}
    2fac:	00010478 	.word	0x00010478
    2fb0:	00003fd5 	.word	0x00003fd5
    2fb4:	00007a69 	.word	0x00007a69
    2fb8:	00003039 	.word	0x00003039
    2fbc:	00003091 	.word	0x00003091

00002fc0 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    2fc0:	b580      	push	{r7, lr}
    2fc2:	b082      	sub	sp, #8
    2fc4:	af00      	add	r7, sp, #0
    2fc6:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2fc8:	687b      	ldr	r3, [r7, #4]
    2fca:	2b00      	cmp	r3, #0
    2fcc:	bf14      	ite	ne
    2fce:	2301      	movne	r3, #1
    2fd0:	2300      	moveq	r3, #0
    2fd2:	b2db      	uxtb	r3, r3
    2fd4:	2257      	movs	r2, #87	; 0x57
    2fd6:	4906      	ldr	r1, [pc, #24]	; (2ff0 <spi_m_sync_enable+0x30>)
    2fd8:	4618      	mov	r0, r3
    2fda:	4b06      	ldr	r3, [pc, #24]	; (2ff4 <spi_m_sync_enable+0x34>)
    2fdc:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    2fde:	687b      	ldr	r3, [r7, #4]
    2fe0:	3304      	adds	r3, #4
    2fe2:	4618      	mov	r0, r3
    2fe4:	4b04      	ldr	r3, [pc, #16]	; (2ff8 <spi_m_sync_enable+0x38>)
    2fe6:	4798      	blx	r3
}
    2fe8:	bf00      	nop
    2fea:	3708      	adds	r7, #8
    2fec:	46bd      	mov	sp, r7
    2fee:	bd80      	pop	{r7, pc}
    2ff0:	00010478 	.word	0x00010478
    2ff4:	00003fd5 	.word	0x00003fd5
    2ff8:	00007b75 	.word	0x00007b75

00002ffc <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    2ffc:	b580      	push	{r7, lr}
    2ffe:	b082      	sub	sp, #8
    3000:	af00      	add	r7, sp, #0
    3002:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    3004:	687b      	ldr	r3, [r7, #4]
    3006:	2b00      	cmp	r3, #0
    3008:	bf14      	ite	ne
    300a:	2301      	movne	r3, #1
    300c:	2300      	moveq	r3, #0
    300e:	b2db      	uxtb	r3, r3
    3010:	225d      	movs	r2, #93	; 0x5d
    3012:	4906      	ldr	r1, [pc, #24]	; (302c <spi_m_sync_disable+0x30>)
    3014:	4618      	mov	r0, r3
    3016:	4b06      	ldr	r3, [pc, #24]	; (3030 <spi_m_sync_disable+0x34>)
    3018:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    301a:	687b      	ldr	r3, [r7, #4]
    301c:	3304      	adds	r3, #4
    301e:	4618      	mov	r0, r3
    3020:	4b04      	ldr	r3, [pc, #16]	; (3034 <spi_m_sync_disable+0x38>)
    3022:	4798      	blx	r3
}
    3024:	bf00      	nop
    3026:	3708      	adds	r7, #8
    3028:	46bd      	mov	sp, r7
    302a:	bd80      	pop	{r7, pc}
    302c:	00010478 	.word	0x00010478
    3030:	00003fd5 	.word	0x00003fd5
    3034:	00007bc5 	.word	0x00007bc5

00003038 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    3038:	b580      	push	{r7, lr}
    303a:	b088      	sub	sp, #32
    303c:	af00      	add	r7, sp, #0
    303e:	60f8      	str	r0, [r7, #12]
    3040:	60b9      	str	r1, [r7, #8]
    3042:	4613      	mov	r3, r2
    3044:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    3046:	68fb      	ldr	r3, [r7, #12]
    3048:	2b00      	cmp	r3, #0
    304a:	bf14      	ite	ne
    304c:	2301      	movne	r3, #1
    304e:	2300      	moveq	r3, #0
    3050:	b2db      	uxtb	r3, r3
    3052:	2287      	movs	r2, #135	; 0x87
    3054:	490b      	ldr	r1, [pc, #44]	; (3084 <_spi_m_sync_io_read+0x4c>)
    3056:	4618      	mov	r0, r3
    3058:	4b0b      	ldr	r3, [pc, #44]	; (3088 <_spi_m_sync_io_read+0x50>)
    305a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    305c:	68fb      	ldr	r3, [r7, #12]
    305e:	3b0c      	subs	r3, #12
    3060:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    3062:	68bb      	ldr	r3, [r7, #8]
    3064:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    3066:	2300      	movs	r3, #0
    3068:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    306a:	88fb      	ldrh	r3, [r7, #6]
    306c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    306e:	f107 0310 	add.w	r3, r7, #16
    3072:	4619      	mov	r1, r3
    3074:	69f8      	ldr	r0, [r7, #28]
    3076:	4b05      	ldr	r3, [pc, #20]	; (308c <_spi_m_sync_io_read+0x54>)
    3078:	4798      	blx	r3
    307a:	4603      	mov	r3, r0
}
    307c:	4618      	mov	r0, r3
    307e:	3720      	adds	r7, #32
    3080:	46bd      	mov	sp, r7
    3082:	bd80      	pop	{r7, pc}
    3084:	00010478 	.word	0x00010478
    3088:	00003fd5 	.word	0x00003fd5
    308c:	000030e9 	.word	0x000030e9

00003090 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    3090:	b580      	push	{r7, lr}
    3092:	b088      	sub	sp, #32
    3094:	af00      	add	r7, sp, #0
    3096:	60f8      	str	r0, [r7, #12]
    3098:	60b9      	str	r1, [r7, #8]
    309a:	4613      	mov	r3, r2
    309c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    309e:	68fb      	ldr	r3, [r7, #12]
    30a0:	2b00      	cmp	r3, #0
    30a2:	bf14      	ite	ne
    30a4:	2301      	movne	r3, #1
    30a6:	2300      	moveq	r3, #0
    30a8:	b2db      	uxtb	r3, r3
    30aa:	22a3      	movs	r2, #163	; 0xa3
    30ac:	490b      	ldr	r1, [pc, #44]	; (30dc <_spi_m_sync_io_write+0x4c>)
    30ae:	4618      	mov	r0, r3
    30b0:	4b0b      	ldr	r3, [pc, #44]	; (30e0 <_spi_m_sync_io_write+0x50>)
    30b2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    30b4:	68fb      	ldr	r3, [r7, #12]
    30b6:	3b0c      	subs	r3, #12
    30b8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    30ba:	2300      	movs	r3, #0
    30bc:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    30be:	68bb      	ldr	r3, [r7, #8]
    30c0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    30c2:	88fb      	ldrh	r3, [r7, #6]
    30c4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    30c6:	f107 0310 	add.w	r3, r7, #16
    30ca:	4619      	mov	r1, r3
    30cc:	69f8      	ldr	r0, [r7, #28]
    30ce:	4b05      	ldr	r3, [pc, #20]	; (30e4 <_spi_m_sync_io_write+0x54>)
    30d0:	4798      	blx	r3
    30d2:	4603      	mov	r3, r0
}
    30d4:	4618      	mov	r0, r3
    30d6:	3720      	adds	r7, #32
    30d8:	46bd      	mov	sp, r7
    30da:	bd80      	pop	{r7, pc}
    30dc:	00010478 	.word	0x00010478
    30e0:	00003fd5 	.word	0x00003fd5
    30e4:	000030e9 	.word	0x000030e9

000030e8 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    30e8:	b580      	push	{r7, lr}
    30ea:	b086      	sub	sp, #24
    30ec:	af00      	add	r7, sp, #0
    30ee:	6078      	str	r0, [r7, #4]
    30f0:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    30f2:	687b      	ldr	r3, [r7, #4]
    30f4:	2b00      	cmp	r3, #0
    30f6:	d004      	beq.n	3102 <spi_m_sync_transfer+0x1a>
    30f8:	683b      	ldr	r3, [r7, #0]
    30fa:	2b00      	cmp	r3, #0
    30fc:	d001      	beq.n	3102 <spi_m_sync_transfer+0x1a>
    30fe:	2301      	movs	r3, #1
    3100:	e000      	b.n	3104 <spi_m_sync_transfer+0x1c>
    3102:	2300      	movs	r3, #0
    3104:	f003 0301 	and.w	r3, r3, #1
    3108:	b2db      	uxtb	r3, r3
    310a:	22b3      	movs	r2, #179	; 0xb3
    310c:	490c      	ldr	r1, [pc, #48]	; (3140 <spi_m_sync_transfer+0x58>)
    310e:	4618      	mov	r0, r3
    3110:	4b0c      	ldr	r3, [pc, #48]	; (3144 <spi_m_sync_transfer+0x5c>)
    3112:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    3114:	683b      	ldr	r3, [r7, #0]
    3116:	681b      	ldr	r3, [r3, #0]
    3118:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    311a:	683b      	ldr	r3, [r7, #0]
    311c:	685b      	ldr	r3, [r3, #4]
    311e:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    3120:	683b      	ldr	r3, [r7, #0]
    3122:	689b      	ldr	r3, [r3, #8]
    3124:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    3126:	687b      	ldr	r3, [r7, #4]
    3128:	3304      	adds	r3, #4
    312a:	f107 020c 	add.w	r2, r7, #12
    312e:	4611      	mov	r1, r2
    3130:	4618      	mov	r0, r3
    3132:	4b05      	ldr	r3, [pc, #20]	; (3148 <spi_m_sync_transfer+0x60>)
    3134:	4798      	blx	r3
    3136:	4603      	mov	r3, r0
}
    3138:	4618      	mov	r0, r3
    313a:	3718      	adds	r7, #24
    313c:	46bd      	mov	sp, r7
    313e:	bd80      	pop	{r7, pc}
    3140:	00010478 	.word	0x00010478
    3144:	00003fd5 	.word	0x00003fd5
    3148:	00007d69 	.word	0x00007d69

0000314c <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    314c:	b580      	push	{r7, lr}
    314e:	b082      	sub	sp, #8
    3150:	af00      	add	r7, sp, #0
    3152:	6078      	str	r0, [r7, #4]
    3154:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    3156:	687b      	ldr	r3, [r7, #4]
    3158:	2b00      	cmp	r3, #0
    315a:	d004      	beq.n	3166 <spi_m_sync_get_io_descriptor+0x1a>
    315c:	683b      	ldr	r3, [r7, #0]
    315e:	2b00      	cmp	r3, #0
    3160:	d001      	beq.n	3166 <spi_m_sync_get_io_descriptor+0x1a>
    3162:	2301      	movs	r3, #1
    3164:	e000      	b.n	3168 <spi_m_sync_get_io_descriptor+0x1c>
    3166:	2300      	movs	r3, #0
    3168:	f003 0301 	and.w	r3, r3, #1
    316c:	b2db      	uxtb	r3, r3
    316e:	22bd      	movs	r2, #189	; 0xbd
    3170:	4906      	ldr	r1, [pc, #24]	; (318c <spi_m_sync_get_io_descriptor+0x40>)
    3172:	4618      	mov	r0, r3
    3174:	4b06      	ldr	r3, [pc, #24]	; (3190 <spi_m_sync_get_io_descriptor+0x44>)
    3176:	4798      	blx	r3
	*io = &spi->io;
    3178:	687b      	ldr	r3, [r7, #4]
    317a:	f103 020c 	add.w	r2, r3, #12
    317e:	683b      	ldr	r3, [r7, #0]
    3180:	601a      	str	r2, [r3, #0]
	return 0;
    3182:	2300      	movs	r3, #0
}
    3184:	4618      	mov	r0, r3
    3186:	3708      	adds	r7, #8
    3188:	46bd      	mov	sp, r7
    318a:	bd80      	pop	{r7, pc}
    318c:	00010478 	.word	0x00010478
    3190:	00003fd5 	.word	0x00003fd5

00003194 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    3194:	b480      	push	{r7}
    3196:	b083      	sub	sp, #12
    3198:	af00      	add	r7, sp, #0
    319a:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    319c:	687b      	ldr	r3, [r7, #4]
    319e:	681b      	ldr	r3, [r3, #0]
}
    31a0:	4618      	mov	r0, r3
    31a2:	370c      	adds	r7, #12
    31a4:	46bd      	mov	sp, r7
    31a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    31aa:	4770      	bx	lr

000031ac <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    31ac:	b480      	push	{r7}
    31ae:	b083      	sub	sp, #12
    31b0:	af00      	add	r7, sp, #0
    31b2:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    31b4:	687b      	ldr	r3, [r7, #4]
    31b6:	2b00      	cmp	r3, #0
    31b8:	d002      	beq.n	31c0 <list_get_next_element+0x14>
    31ba:	687b      	ldr	r3, [r7, #4]
    31bc:	681b      	ldr	r3, [r3, #0]
    31be:	e000      	b.n	31c2 <list_get_next_element+0x16>
    31c0:	2300      	movs	r3, #0
}
    31c2:	4618      	mov	r0, r3
    31c4:	370c      	adds	r7, #12
    31c6:	46bd      	mov	sp, r7
    31c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    31cc:	4770      	bx	lr
	...

000031d0 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    31d0:	b580      	push	{r7, lr}
    31d2:	b084      	sub	sp, #16
    31d4:	af00      	add	r7, sp, #0
    31d6:	60f8      	str	r0, [r7, #12]
    31d8:	60b9      	str	r1, [r7, #8]
    31da:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    31dc:	68fb      	ldr	r3, [r7, #12]
    31de:	2b00      	cmp	r3, #0
    31e0:	d007      	beq.n	31f2 <timer_init+0x22>
    31e2:	68bb      	ldr	r3, [r7, #8]
    31e4:	2b00      	cmp	r3, #0
    31e6:	d004      	beq.n	31f2 <timer_init+0x22>
    31e8:	687b      	ldr	r3, [r7, #4]
    31ea:	2b00      	cmp	r3, #0
    31ec:	d001      	beq.n	31f2 <timer_init+0x22>
    31ee:	2301      	movs	r3, #1
    31f0:	e000      	b.n	31f4 <timer_init+0x24>
    31f2:	2300      	movs	r3, #0
    31f4:	f003 0301 	and.w	r3, r3, #1
    31f8:	b2db      	uxtb	r3, r3
    31fa:	223b      	movs	r2, #59	; 0x3b
    31fc:	490c      	ldr	r1, [pc, #48]	; (3230 <timer_init+0x60>)
    31fe:	4618      	mov	r0, r3
    3200:	4b0c      	ldr	r3, [pc, #48]	; (3234 <timer_init+0x64>)
    3202:	4798      	blx	r3
	descr->func = func;
    3204:	68fb      	ldr	r3, [r7, #12]
    3206:	687a      	ldr	r2, [r7, #4]
    3208:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    320a:	68fb      	ldr	r3, [r7, #12]
    320c:	681b      	ldr	r3, [r3, #0]
    320e:	681b      	ldr	r3, [r3, #0]
    3210:	68fa      	ldr	r2, [r7, #12]
    3212:	3204      	adds	r2, #4
    3214:	68b9      	ldr	r1, [r7, #8]
    3216:	4610      	mov	r0, r2
    3218:	4798      	blx	r3
	descr->time                           = 0;
    321a:	68fb      	ldr	r3, [r7, #12]
    321c:	2200      	movs	r2, #0
    321e:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    3220:	68fb      	ldr	r3, [r7, #12]
    3222:	4a05      	ldr	r2, [pc, #20]	; (3238 <timer_init+0x68>)
    3224:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    3226:	2300      	movs	r3, #0
}
    3228:	4618      	mov	r0, r3
    322a:	3710      	adds	r7, #16
    322c:	46bd      	mov	sp, r7
    322e:	bd80      	pop	{r7, pc}
    3230:	00010494 	.word	0x00010494
    3234:	00003fd5 	.word	0x00003fd5
    3238:	000035c1 	.word	0x000035c1

0000323c <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    323c:	b580      	push	{r7, lr}
    323e:	b082      	sub	sp, #8
    3240:	af00      	add	r7, sp, #0
    3242:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    3244:	687b      	ldr	r3, [r7, #4]
    3246:	2b00      	cmp	r3, #0
    3248:	d005      	beq.n	3256 <timer_start+0x1a>
    324a:	687b      	ldr	r3, [r7, #4]
    324c:	681b      	ldr	r3, [r3, #0]
    324e:	2b00      	cmp	r3, #0
    3250:	d001      	beq.n	3256 <timer_start+0x1a>
    3252:	2301      	movs	r3, #1
    3254:	e000      	b.n	3258 <timer_start+0x1c>
    3256:	2300      	movs	r3, #0
    3258:	f003 0301 	and.w	r3, r3, #1
    325c:	b2db      	uxtb	r3, r3
    325e:	2254      	movs	r2, #84	; 0x54
    3260:	490e      	ldr	r1, [pc, #56]	; (329c <timer_start+0x60>)
    3262:	4618      	mov	r0, r3
    3264:	4b0e      	ldr	r3, [pc, #56]	; (32a0 <timer_start+0x64>)
    3266:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    3268:	687b      	ldr	r3, [r7, #4]
    326a:	681b      	ldr	r3, [r3, #0]
    326c:	699b      	ldr	r3, [r3, #24]
    326e:	687a      	ldr	r2, [r7, #4]
    3270:	3204      	adds	r2, #4
    3272:	4610      	mov	r0, r2
    3274:	4798      	blx	r3
    3276:	4603      	mov	r3, r0
    3278:	2b00      	cmp	r3, #0
    327a:	d002      	beq.n	3282 <timer_start+0x46>
		return ERR_DENIED;
    327c:	f06f 0310 	mvn.w	r3, #16
    3280:	e007      	b.n	3292 <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    3282:	687b      	ldr	r3, [r7, #4]
    3284:	681b      	ldr	r3, [r3, #0]
    3286:	689b      	ldr	r3, [r3, #8]
    3288:	687a      	ldr	r2, [r7, #4]
    328a:	3204      	adds	r2, #4
    328c:	4610      	mov	r0, r2
    328e:	4798      	blx	r3

	return ERR_NONE;
    3290:	2300      	movs	r3, #0
}
    3292:	4618      	mov	r0, r3
    3294:	3708      	adds	r7, #8
    3296:	46bd      	mov	sp, r7
    3298:	bd80      	pop	{r7, pc}
    329a:	bf00      	nop
    329c:	00010494 	.word	0x00010494
    32a0:	00003fd5 	.word	0x00003fd5

000032a4 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    32a4:	b580      	push	{r7, lr}
    32a6:	b082      	sub	sp, #8
    32a8:	af00      	add	r7, sp, #0
    32aa:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    32ac:	687b      	ldr	r3, [r7, #4]
    32ae:	2b00      	cmp	r3, #0
    32b0:	d005      	beq.n	32be <timer_stop+0x1a>
    32b2:	687b      	ldr	r3, [r7, #4]
    32b4:	681b      	ldr	r3, [r3, #0]
    32b6:	2b00      	cmp	r3, #0
    32b8:	d001      	beq.n	32be <timer_stop+0x1a>
    32ba:	2301      	movs	r3, #1
    32bc:	e000      	b.n	32c0 <timer_stop+0x1c>
    32be:	2300      	movs	r3, #0
    32c0:	f003 0301 	and.w	r3, r3, #1
    32c4:	b2db      	uxtb	r3, r3
    32c6:	2262      	movs	r2, #98	; 0x62
    32c8:	490f      	ldr	r1, [pc, #60]	; (3308 <timer_stop+0x64>)
    32ca:	4618      	mov	r0, r3
    32cc:	4b0f      	ldr	r3, [pc, #60]	; (330c <timer_stop+0x68>)
    32ce:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    32d0:	687b      	ldr	r3, [r7, #4]
    32d2:	681b      	ldr	r3, [r3, #0]
    32d4:	699b      	ldr	r3, [r3, #24]
    32d6:	687a      	ldr	r2, [r7, #4]
    32d8:	3204      	adds	r2, #4
    32da:	4610      	mov	r0, r2
    32dc:	4798      	blx	r3
    32de:	4603      	mov	r3, r0
    32e0:	f083 0301 	eor.w	r3, r3, #1
    32e4:	b2db      	uxtb	r3, r3
    32e6:	2b00      	cmp	r3, #0
    32e8:	d002      	beq.n	32f0 <timer_stop+0x4c>
		return ERR_DENIED;
    32ea:	f06f 0310 	mvn.w	r3, #16
    32ee:	e007      	b.n	3300 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    32f0:	687b      	ldr	r3, [r7, #4]
    32f2:	681b      	ldr	r3, [r3, #0]
    32f4:	68db      	ldr	r3, [r3, #12]
    32f6:	687a      	ldr	r2, [r7, #4]
    32f8:	3204      	adds	r2, #4
    32fa:	4610      	mov	r0, r2
    32fc:	4798      	blx	r3

	return ERR_NONE;
    32fe:	2300      	movs	r3, #0
}
    3300:	4618      	mov	r0, r3
    3302:	3708      	adds	r7, #8
    3304:	46bd      	mov	sp, r7
    3306:	bd80      	pop	{r7, pc}
    3308:	00010494 	.word	0x00010494
    330c:	00003fd5 	.word	0x00003fd5

00003310 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    3310:	b580      	push	{r7, lr}
    3312:	b084      	sub	sp, #16
    3314:	af00      	add	r7, sp, #0
    3316:	6078      	str	r0, [r7, #4]
    3318:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    331a:	687b      	ldr	r3, [r7, #4]
    331c:	2b00      	cmp	r3, #0
    331e:	d008      	beq.n	3332 <timer_add_task+0x22>
    3320:	683b      	ldr	r3, [r7, #0]
    3322:	2b00      	cmp	r3, #0
    3324:	d005      	beq.n	3332 <timer_add_task+0x22>
    3326:	687b      	ldr	r3, [r7, #4]
    3328:	681b      	ldr	r3, [r3, #0]
    332a:	2b00      	cmp	r3, #0
    332c:	d001      	beq.n	3332 <timer_add_task+0x22>
    332e:	2301      	movs	r3, #1
    3330:	e000      	b.n	3334 <timer_add_task+0x24>
    3332:	2300      	movs	r3, #0
    3334:	f003 0301 	and.w	r3, r3, #1
    3338:	b2db      	uxtb	r3, r3
    333a:	227b      	movs	r2, #123	; 0x7b
    333c:	492f      	ldr	r1, [pc, #188]	; (33fc <timer_add_task+0xec>)
    333e:	4618      	mov	r0, r3
    3340:	4b2f      	ldr	r3, [pc, #188]	; (3400 <timer_add_task+0xf0>)
    3342:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3344:	687b      	ldr	r3, [r7, #4]
    3346:	7f1b      	ldrb	r3, [r3, #28]
    3348:	b2db      	uxtb	r3, r3
    334a:	f043 0301 	orr.w	r3, r3, #1
    334e:	b2da      	uxtb	r2, r3
    3350:	687b      	ldr	r3, [r7, #4]
    3352:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    3354:	687b      	ldr	r3, [r7, #4]
    3356:	3318      	adds	r3, #24
    3358:	6839      	ldr	r1, [r7, #0]
    335a:	4618      	mov	r0, r3
    335c:	4b29      	ldr	r3, [pc, #164]	; (3404 <timer_add_task+0xf4>)
    335e:	4798      	blx	r3
    3360:	4603      	mov	r3, r0
    3362:	2b00      	cmp	r3, #0
    3364:	d00f      	beq.n	3386 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3366:	687b      	ldr	r3, [r7, #4]
    3368:	7f1b      	ldrb	r3, [r3, #28]
    336a:	b2db      	uxtb	r3, r3
    336c:	f023 0301 	bic.w	r3, r3, #1
    3370:	b2da      	uxtb	r2, r3
    3372:	687b      	ldr	r3, [r7, #4]
    3374:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    3376:	2280      	movs	r2, #128	; 0x80
    3378:	4920      	ldr	r1, [pc, #128]	; (33fc <timer_add_task+0xec>)
    337a:	2000      	movs	r0, #0
    337c:	4b20      	ldr	r3, [pc, #128]	; (3400 <timer_add_task+0xf0>)
    337e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    3380:	f06f 0311 	mvn.w	r3, #17
    3384:	e035      	b.n	33f2 <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    3386:	687b      	ldr	r3, [r7, #4]
    3388:	695a      	ldr	r2, [r3, #20]
    338a:	683b      	ldr	r3, [r7, #0]
    338c:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    338e:	687b      	ldr	r3, [r7, #4]
    3390:	f103 0018 	add.w	r0, r3, #24
    3394:	687b      	ldr	r3, [r7, #4]
    3396:	695b      	ldr	r3, [r3, #20]
    3398:	461a      	mov	r2, r3
    339a:	6839      	ldr	r1, [r7, #0]
    339c:	4b1a      	ldr	r3, [pc, #104]	; (3408 <timer_add_task+0xf8>)
    339e:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    33a0:	687b      	ldr	r3, [r7, #4]
    33a2:	7f1b      	ldrb	r3, [r3, #28]
    33a4:	b2db      	uxtb	r3, r3
    33a6:	f023 0301 	bic.w	r3, r3, #1
    33aa:	b2da      	uxtb	r2, r3
    33ac:	687b      	ldr	r3, [r7, #4]
    33ae:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    33b0:	687b      	ldr	r3, [r7, #4]
    33b2:	7f1b      	ldrb	r3, [r3, #28]
    33b4:	b2db      	uxtb	r3, r3
    33b6:	f003 0302 	and.w	r3, r3, #2
    33ba:	2b00      	cmp	r3, #0
    33bc:	d018      	beq.n	33f0 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    33be:	f107 030c 	add.w	r3, r7, #12
    33c2:	4618      	mov	r0, r3
    33c4:	4b11      	ldr	r3, [pc, #68]	; (340c <timer_add_task+0xfc>)
    33c6:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    33c8:	687b      	ldr	r3, [r7, #4]
    33ca:	7f1b      	ldrb	r3, [r3, #28]
    33cc:	b2db      	uxtb	r3, r3
    33ce:	f023 0302 	bic.w	r3, r3, #2
    33d2:	b2da      	uxtb	r2, r3
    33d4:	687b      	ldr	r3, [r7, #4]
    33d6:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    33d8:	687b      	ldr	r3, [r7, #4]
    33da:	681b      	ldr	r3, [r3, #0]
    33dc:	69db      	ldr	r3, [r3, #28]
    33de:	687a      	ldr	r2, [r7, #4]
    33e0:	3204      	adds	r2, #4
    33e2:	4610      	mov	r0, r2
    33e4:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    33e6:	f107 030c 	add.w	r3, r7, #12
    33ea:	4618      	mov	r0, r3
    33ec:	4b08      	ldr	r3, [pc, #32]	; (3410 <timer_add_task+0x100>)
    33ee:	4798      	blx	r3
	}

	return ERR_NONE;
    33f0:	2300      	movs	r3, #0
}
    33f2:	4618      	mov	r0, r3
    33f4:	3710      	adds	r7, #16
    33f6:	46bd      	mov	sp, r7
    33f8:	bd80      	pop	{r7, pc}
    33fa:	bf00      	nop
    33fc:	00010494 	.word	0x00010494
    3400:	00003fd5 	.word	0x00003fd5
    3404:	00003ffd 	.word	0x00003ffd
    3408:	00003511 	.word	0x00003511
    340c:	0000c155 	.word	0x0000c155
    3410:	0000c17b 	.word	0x0000c17b

00003414 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    3414:	b580      	push	{r7, lr}
    3416:	b084      	sub	sp, #16
    3418:	af00      	add	r7, sp, #0
    341a:	6078      	str	r0, [r7, #4]
    341c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    341e:	687b      	ldr	r3, [r7, #4]
    3420:	2b00      	cmp	r3, #0
    3422:	d008      	beq.n	3436 <timer_remove_task+0x22>
    3424:	683b      	ldr	r3, [r7, #0]
    3426:	2b00      	cmp	r3, #0
    3428:	d005      	beq.n	3436 <timer_remove_task+0x22>
    342a:	687b      	ldr	r3, [r7, #4]
    342c:	681b      	ldr	r3, [r3, #0]
    342e:	2b00      	cmp	r3, #0
    3430:	d001      	beq.n	3436 <timer_remove_task+0x22>
    3432:	2301      	movs	r3, #1
    3434:	e000      	b.n	3438 <timer_remove_task+0x24>
    3436:	2300      	movs	r3, #0
    3438:	f003 0301 	and.w	r3, r3, #1
    343c:	b2db      	uxtb	r3, r3
    343e:	2296      	movs	r2, #150	; 0x96
    3440:	492d      	ldr	r1, [pc, #180]	; (34f8 <timer_remove_task+0xe4>)
    3442:	4618      	mov	r0, r3
    3444:	4b2d      	ldr	r3, [pc, #180]	; (34fc <timer_remove_task+0xe8>)
    3446:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3448:	687b      	ldr	r3, [r7, #4]
    344a:	7f1b      	ldrb	r3, [r3, #28]
    344c:	b2db      	uxtb	r3, r3
    344e:	f043 0301 	orr.w	r3, r3, #1
    3452:	b2da      	uxtb	r2, r3
    3454:	687b      	ldr	r3, [r7, #4]
    3456:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    3458:	687b      	ldr	r3, [r7, #4]
    345a:	3318      	adds	r3, #24
    345c:	6839      	ldr	r1, [r7, #0]
    345e:	4618      	mov	r0, r3
    3460:	4b27      	ldr	r3, [pc, #156]	; (3500 <timer_remove_task+0xec>)
    3462:	4798      	blx	r3
    3464:	4603      	mov	r3, r0
    3466:	f083 0301 	eor.w	r3, r3, #1
    346a:	b2db      	uxtb	r3, r3
    346c:	2b00      	cmp	r3, #0
    346e:	d00f      	beq.n	3490 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3470:	687b      	ldr	r3, [r7, #4]
    3472:	7f1b      	ldrb	r3, [r3, #28]
    3474:	b2db      	uxtb	r3, r3
    3476:	f023 0301 	bic.w	r3, r3, #1
    347a:	b2da      	uxtb	r2, r3
    347c:	687b      	ldr	r3, [r7, #4]
    347e:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    3480:	229b      	movs	r2, #155	; 0x9b
    3482:	491d      	ldr	r1, [pc, #116]	; (34f8 <timer_remove_task+0xe4>)
    3484:	2000      	movs	r0, #0
    3486:	4b1d      	ldr	r3, [pc, #116]	; (34fc <timer_remove_task+0xe8>)
    3488:	4798      	blx	r3
		return ERR_NOT_FOUND;
    348a:	f06f 0309 	mvn.w	r3, #9
    348e:	e02e      	b.n	34ee <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    3490:	687b      	ldr	r3, [r7, #4]
    3492:	3318      	adds	r3, #24
    3494:	6839      	ldr	r1, [r7, #0]
    3496:	4618      	mov	r0, r3
    3498:	4b1a      	ldr	r3, [pc, #104]	; (3504 <timer_remove_task+0xf0>)
    349a:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    349c:	687b      	ldr	r3, [r7, #4]
    349e:	7f1b      	ldrb	r3, [r3, #28]
    34a0:	b2db      	uxtb	r3, r3
    34a2:	f023 0301 	bic.w	r3, r3, #1
    34a6:	b2da      	uxtb	r2, r3
    34a8:	687b      	ldr	r3, [r7, #4]
    34aa:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    34ac:	687b      	ldr	r3, [r7, #4]
    34ae:	7f1b      	ldrb	r3, [r3, #28]
    34b0:	b2db      	uxtb	r3, r3
    34b2:	f003 0302 	and.w	r3, r3, #2
    34b6:	2b00      	cmp	r3, #0
    34b8:	d018      	beq.n	34ec <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    34ba:	f107 030c 	add.w	r3, r7, #12
    34be:	4618      	mov	r0, r3
    34c0:	4b11      	ldr	r3, [pc, #68]	; (3508 <timer_remove_task+0xf4>)
    34c2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    34c4:	687b      	ldr	r3, [r7, #4]
    34c6:	7f1b      	ldrb	r3, [r3, #28]
    34c8:	b2db      	uxtb	r3, r3
    34ca:	f023 0302 	bic.w	r3, r3, #2
    34ce:	b2da      	uxtb	r2, r3
    34d0:	687b      	ldr	r3, [r7, #4]
    34d2:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    34d4:	687b      	ldr	r3, [r7, #4]
    34d6:	681b      	ldr	r3, [r3, #0]
    34d8:	69db      	ldr	r3, [r3, #28]
    34da:	687a      	ldr	r2, [r7, #4]
    34dc:	3204      	adds	r2, #4
    34de:	4610      	mov	r0, r2
    34e0:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    34e2:	f107 030c 	add.w	r3, r7, #12
    34e6:	4618      	mov	r0, r3
    34e8:	4b08      	ldr	r3, [pc, #32]	; (350c <timer_remove_task+0xf8>)
    34ea:	4798      	blx	r3
	}

	return ERR_NONE;
    34ec:	2300      	movs	r3, #0
}
    34ee:	4618      	mov	r0, r3
    34f0:	3710      	adds	r7, #16
    34f2:	46bd      	mov	sp, r7
    34f4:	bd80      	pop	{r7, pc}
    34f6:	bf00      	nop
    34f8:	00010494 	.word	0x00010494
    34fc:	00003fd5 	.word	0x00003fd5
    3500:	00003ffd 	.word	0x00003ffd
    3504:	0000415f 	.word	0x0000415f
    3508:	0000c155 	.word	0x0000c155
    350c:	0000c17b 	.word	0x0000c17b

00003510 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    3510:	b580      	push	{r7, lr}
    3512:	b088      	sub	sp, #32
    3514:	af00      	add	r7, sp, #0
    3516:	60f8      	str	r0, [r7, #12]
    3518:	60b9      	str	r1, [r7, #8]
    351a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    351c:	2300      	movs	r3, #0
    351e:	61bb      	str	r3, [r7, #24]
    3520:	68f8      	ldr	r0, [r7, #12]
    3522:	4b23      	ldr	r3, [pc, #140]	; (35b0 <timer_add_timer_task+0xa0>)
    3524:	4798      	blx	r3
    3526:	6138      	str	r0, [r7, #16]

	if (!head) {
    3528:	693b      	ldr	r3, [r7, #16]
    352a:	2b00      	cmp	r3, #0
    352c:	d104      	bne.n	3538 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    352e:	68b9      	ldr	r1, [r7, #8]
    3530:	68f8      	ldr	r0, [r7, #12]
    3532:	4b20      	ldr	r3, [pc, #128]	; (35b4 <timer_add_timer_task+0xa4>)
    3534:	4798      	blx	r3
		return;
    3536:	e037      	b.n	35a8 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3538:	693b      	ldr	r3, [r7, #16]
    353a:	61fb      	str	r3, [r7, #28]
    353c:	e022      	b.n	3584 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    353e:	69fb      	ldr	r3, [r7, #28]
    3540:	685a      	ldr	r2, [r3, #4]
    3542:	687b      	ldr	r3, [r7, #4]
    3544:	429a      	cmp	r2, r3
    3546:	d808      	bhi.n	355a <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    3548:	69fb      	ldr	r3, [r7, #28]
    354a:	689a      	ldr	r2, [r3, #8]
    354c:	69fb      	ldr	r3, [r7, #28]
    354e:	6859      	ldr	r1, [r3, #4]
    3550:	687b      	ldr	r3, [r7, #4]
    3552:	1acb      	subs	r3, r1, r3
    3554:	4413      	add	r3, r2
    3556:	617b      	str	r3, [r7, #20]
    3558:	e009      	b.n	356e <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    355a:	69fb      	ldr	r3, [r7, #28]
    355c:	689a      	ldr	r2, [r3, #8]
    355e:	69fb      	ldr	r3, [r7, #28]
    3560:	685b      	ldr	r3, [r3, #4]
    3562:	441a      	add	r2, r3
    3564:	687b      	ldr	r3, [r7, #4]
    3566:	425b      	negs	r3, r3
    3568:	4413      	add	r3, r2
    356a:	3301      	adds	r3, #1
    356c:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    356e:	68bb      	ldr	r3, [r7, #8]
    3570:	689a      	ldr	r2, [r3, #8]
    3572:	697b      	ldr	r3, [r7, #20]
    3574:	429a      	cmp	r2, r3
    3576:	d909      	bls.n	358c <timer_add_timer_task+0x7c>
			break;
		prev = it;
    3578:	69fb      	ldr	r3, [r7, #28]
    357a:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    357c:	69f8      	ldr	r0, [r7, #28]
    357e:	4b0e      	ldr	r3, [pc, #56]	; (35b8 <timer_add_timer_task+0xa8>)
    3580:	4798      	blx	r3
    3582:	61f8      	str	r0, [r7, #28]
    3584:	69fb      	ldr	r3, [r7, #28]
    3586:	2b00      	cmp	r3, #0
    3588:	d1d9      	bne.n	353e <timer_add_timer_task+0x2e>
    358a:	e000      	b.n	358e <timer_add_timer_task+0x7e>
			break;
    358c:	bf00      	nop
	}

	if (it == head) {
    358e:	69fa      	ldr	r2, [r7, #28]
    3590:	693b      	ldr	r3, [r7, #16]
    3592:	429a      	cmp	r2, r3
    3594:	d104      	bne.n	35a0 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    3596:	68b9      	ldr	r1, [r7, #8]
    3598:	68f8      	ldr	r0, [r7, #12]
    359a:	4b06      	ldr	r3, [pc, #24]	; (35b4 <timer_add_timer_task+0xa4>)
    359c:	4798      	blx	r3
    359e:	e003      	b.n	35a8 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    35a0:	68b9      	ldr	r1, [r7, #8]
    35a2:	69b8      	ldr	r0, [r7, #24]
    35a4:	4b05      	ldr	r3, [pc, #20]	; (35bc <timer_add_timer_task+0xac>)
    35a6:	4798      	blx	r3
	}
}
    35a8:	3720      	adds	r7, #32
    35aa:	46bd      	mov	sp, r7
    35ac:	bd80      	pop	{r7, pc}
    35ae:	bf00      	nop
    35b0:	00003195 	.word	0x00003195
    35b4:	00004035 	.word	0x00004035
    35b8:	000031ad 	.word	0x000031ad
    35bc:	0000408d 	.word	0x0000408d

000035c0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    35c0:	b580      	push	{r7, lr}
    35c2:	b086      	sub	sp, #24
    35c4:	af00      	add	r7, sp, #0
    35c6:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    35c8:	687b      	ldr	r3, [r7, #4]
    35ca:	3b04      	subs	r3, #4
    35cc:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    35ce:	693b      	ldr	r3, [r7, #16]
    35d0:	3318      	adds	r3, #24
    35d2:	4618      	mov	r0, r3
    35d4:	4b27      	ldr	r3, [pc, #156]	; (3674 <timer_process_counted+0xb4>)
    35d6:	4798      	blx	r3
    35d8:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    35da:	693b      	ldr	r3, [r7, #16]
    35dc:	695b      	ldr	r3, [r3, #20]
    35de:	1c5a      	adds	r2, r3, #1
    35e0:	693b      	ldr	r3, [r7, #16]
    35e2:	615a      	str	r2, [r3, #20]
    35e4:	693b      	ldr	r3, [r7, #16]
    35e6:	695b      	ldr	r3, [r3, #20]
    35e8:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    35ea:	693b      	ldr	r3, [r7, #16]
    35ec:	7f1b      	ldrb	r3, [r3, #28]
    35ee:	b2db      	uxtb	r3, r3
    35f0:	f003 0301 	and.w	r3, r3, #1
    35f4:	2b00      	cmp	r3, #0
    35f6:	d106      	bne.n	3606 <timer_process_counted+0x46>
    35f8:	693b      	ldr	r3, [r7, #16]
    35fa:	7f1b      	ldrb	r3, [r3, #28]
    35fc:	b2db      	uxtb	r3, r3
    35fe:	f003 0302 	and.w	r3, r3, #2
    3602:	2b00      	cmp	r3, #0
    3604:	d027      	beq.n	3656 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    3606:	693b      	ldr	r3, [r7, #16]
    3608:	7f1b      	ldrb	r3, [r3, #28]
    360a:	b2db      	uxtb	r3, r3
    360c:	f043 0302 	orr.w	r3, r3, #2
    3610:	b2da      	uxtb	r2, r3
    3612:	693b      	ldr	r3, [r7, #16]
    3614:	771a      	strb	r2, [r3, #28]
		return;
    3616:	e029      	b.n	366c <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    3618:	697b      	ldr	r3, [r7, #20]
    361a:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    361c:	693b      	ldr	r3, [r7, #16]
    361e:	3318      	adds	r3, #24
    3620:	4618      	mov	r0, r3
    3622:	4b15      	ldr	r3, [pc, #84]	; (3678 <timer_process_counted+0xb8>)
    3624:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    3626:	68bb      	ldr	r3, [r7, #8]
    3628:	7c1b      	ldrb	r3, [r3, #16]
    362a:	2b01      	cmp	r3, #1
    362c:	d109      	bne.n	3642 <timer_process_counted+0x82>
			tmp->time_label = time;
    362e:	68bb      	ldr	r3, [r7, #8]
    3630:	68fa      	ldr	r2, [r7, #12]
    3632:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    3634:	693b      	ldr	r3, [r7, #16]
    3636:	3318      	adds	r3, #24
    3638:	68fa      	ldr	r2, [r7, #12]
    363a:	68b9      	ldr	r1, [r7, #8]
    363c:	4618      	mov	r0, r3
    363e:	4b0f      	ldr	r3, [pc, #60]	; (367c <timer_process_counted+0xbc>)
    3640:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    3642:	693b      	ldr	r3, [r7, #16]
    3644:	3318      	adds	r3, #24
    3646:	4618      	mov	r0, r3
    3648:	4b0a      	ldr	r3, [pc, #40]	; (3674 <timer_process_counted+0xb4>)
    364a:	4798      	blx	r3
    364c:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    364e:	68bb      	ldr	r3, [r7, #8]
    3650:	68db      	ldr	r3, [r3, #12]
    3652:	68b8      	ldr	r0, [r7, #8]
    3654:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    3656:	697b      	ldr	r3, [r7, #20]
    3658:	2b00      	cmp	r3, #0
    365a:	d007      	beq.n	366c <timer_process_counted+0xac>
    365c:	697b      	ldr	r3, [r7, #20]
    365e:	685b      	ldr	r3, [r3, #4]
    3660:	68fa      	ldr	r2, [r7, #12]
    3662:	1ad2      	subs	r2, r2, r3
    3664:	697b      	ldr	r3, [r7, #20]
    3666:	689b      	ldr	r3, [r3, #8]
    3668:	429a      	cmp	r2, r3
    366a:	d2d5      	bcs.n	3618 <timer_process_counted+0x58>
	}
}
    366c:	3718      	adds	r7, #24
    366e:	46bd      	mov	sp, r7
    3670:	bd80      	pop	{r7, pc}
    3672:	bf00      	nop
    3674:	00003195 	.word	0x00003195
    3678:	0000412d 	.word	0x0000412d
    367c:	00003511 	.word	0x00003511

00003680 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    3680:	b480      	push	{r7}
    3682:	b085      	sub	sp, #20
    3684:	af00      	add	r7, sp, #0
    3686:	4603      	mov	r3, r0
    3688:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    368a:	2300      	movs	r3, #0
    368c:	73fb      	strb	r3, [r7, #15]
    368e:	e029      	b.n	36e4 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    3690:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3694:	4a19      	ldr	r2, [pc, #100]	; (36fc <_usb_d_find_ep+0x7c>)
    3696:	015b      	lsls	r3, r3, #5
    3698:	4413      	add	r3, r2
    369a:	3301      	adds	r3, #1
    369c:	781b      	ldrb	r3, [r3, #0]
    369e:	79fa      	ldrb	r2, [r7, #7]
    36a0:	429a      	cmp	r2, r3
    36a2:	d102      	bne.n	36aa <_usb_d_find_ep+0x2a>
			return i;
    36a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    36a8:	e022      	b.n	36f0 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    36aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    36ae:	4a13      	ldr	r2, [pc, #76]	; (36fc <_usb_d_find_ep+0x7c>)
    36b0:	015b      	lsls	r3, r3, #5
    36b2:	4413      	add	r3, r2
    36b4:	781b      	ldrb	r3, [r3, #0]
    36b6:	2b00      	cmp	r3, #0
    36b8:	d10e      	bne.n	36d8 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    36ba:	79fb      	ldrb	r3, [r7, #7]
    36bc:	f003 030f 	and.w	r3, r3, #15
    36c0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    36c4:	490d      	ldr	r1, [pc, #52]	; (36fc <_usb_d_find_ep+0x7c>)
    36c6:	0152      	lsls	r2, r2, #5
    36c8:	440a      	add	r2, r1
    36ca:	3201      	adds	r2, #1
    36cc:	7812      	ldrb	r2, [r2, #0]
    36ce:	4293      	cmp	r3, r2
    36d0:	d102      	bne.n	36d8 <_usb_d_find_ep+0x58>
			return i;
    36d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    36d6:	e00b      	b.n	36f0 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    36d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    36dc:	b2db      	uxtb	r3, r3
    36de:	3301      	adds	r3, #1
    36e0:	b2db      	uxtb	r3, r3
    36e2:	73fb      	strb	r3, [r7, #15]
    36e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    36e8:	2b03      	cmp	r3, #3
    36ea:	ddd1      	ble.n	3690 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    36ec:	f04f 33ff 	mov.w	r3, #4294967295
}
    36f0:	4618      	mov	r0, r3
    36f2:	3714      	adds	r7, #20
    36f4:	46bd      	mov	sp, r7
    36f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    36fa:	4770      	bx	lr
    36fc:	20000ab8 	.word	0x20000ab8

00003700 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    3700:	b580      	push	{r7, lr}
    3702:	b088      	sub	sp, #32
    3704:	af00      	add	r7, sp, #0
    3706:	60ba      	str	r2, [r7, #8]
    3708:	607b      	str	r3, [r7, #4]
    370a:	4603      	mov	r3, r0
    370c:	73fb      	strb	r3, [r7, #15]
    370e:	460b      	mov	r3, r1
    3710:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    3712:	68bb      	ldr	r3, [r7, #8]
    3714:	617b      	str	r3, [r7, #20]
    3716:	687b      	ldr	r3, [r7, #4]
    3718:	61bb      	str	r3, [r7, #24]
    371a:	7bbb      	ldrb	r3, [r7, #14]
    371c:	2b00      	cmp	r3, #0
    371e:	d004      	beq.n	372a <_usb_d_trans+0x2a>
    3720:	7bfb      	ldrb	r3, [r7, #15]
    3722:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3726:	b2db      	uxtb	r3, r3
    3728:	e003      	b.n	3732 <_usb_d_trans+0x32>
    372a:	7bfb      	ldrb	r3, [r7, #15]
    372c:	f003 030f 	and.w	r3, r3, #15
    3730:	b2db      	uxtb	r3, r3
    3732:	773b      	strb	r3, [r7, #28]
    3734:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3738:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    373a:	f107 0314 	add.w	r3, r7, #20
    373e:	4618      	mov	r0, r3
    3740:	4b03      	ldr	r3, [pc, #12]	; (3750 <_usb_d_trans+0x50>)
    3742:	4798      	blx	r3
    3744:	4603      	mov	r3, r0
}
    3746:	4618      	mov	r0, r3
    3748:	3720      	adds	r7, #32
    374a:	46bd      	mov	sp, r7
    374c:	bd80      	pop	{r7, pc}
    374e:	bf00      	nop
    3750:	0000b789 	.word	0x0000b789

00003754 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    3754:	b480      	push	{r7}
    3756:	b085      	sub	sp, #20
    3758:	af00      	add	r7, sp, #0
    375a:	60f8      	str	r0, [r7, #12]
    375c:	60b9      	str	r1, [r7, #8]
    375e:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    3760:	2300      	movs	r3, #0
}
    3762:	4618      	mov	r0, r3
    3764:	3714      	adds	r7, #20
    3766:	46bd      	mov	sp, r7
    3768:	f85d 7b04 	ldr.w	r7, [sp], #4
    376c:	4770      	bx	lr
	...

00003770 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    3770:	b580      	push	{r7, lr}
    3772:	b086      	sub	sp, #24
    3774:	af00      	add	r7, sp, #0
    3776:	4603      	mov	r3, r0
    3778:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    377a:	79fb      	ldrb	r3, [r7, #7]
    377c:	4618      	mov	r0, r3
    377e:	4b2a      	ldr	r3, [pc, #168]	; (3828 <usb_d_cb_trans_setup+0xb8>)
    3780:	4798      	blx	r3
    3782:	4603      	mov	r3, r0
    3784:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3786:	f997 3017 	ldrsb.w	r3, [r7, #23]
    378a:	015b      	lsls	r3, r3, #5
    378c:	4a27      	ldr	r2, [pc, #156]	; (382c <usb_d_cb_trans_setup+0xbc>)
    378e:	4413      	add	r3, r2
    3790:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    3792:	693b      	ldr	r3, [r7, #16]
    3794:	330c      	adds	r3, #12
    3796:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    3798:	79fb      	ldrb	r3, [r7, #7]
    379a:	68f9      	ldr	r1, [r7, #12]
    379c:	4618      	mov	r0, r3
    379e:	4b24      	ldr	r3, [pc, #144]	; (3830 <usb_d_cb_trans_setup+0xc0>)
    37a0:	4798      	blx	r3
    37a2:	4603      	mov	r3, r0
    37a4:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    37a6:	7afb      	ldrb	r3, [r7, #11]
    37a8:	2b08      	cmp	r3, #8
    37aa:	d00d      	beq.n	37c8 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    37ac:	79fb      	ldrb	r3, [r7, #7]
    37ae:	2101      	movs	r1, #1
    37b0:	4618      	mov	r0, r3
    37b2:	4b20      	ldr	r3, [pc, #128]	; (3834 <usb_d_cb_trans_setup+0xc4>)
    37b4:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    37b6:	79fb      	ldrb	r3, [r7, #7]
    37b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    37bc:	b2db      	uxtb	r3, r3
    37be:	2101      	movs	r1, #1
    37c0:	4618      	mov	r0, r3
    37c2:	4b1c      	ldr	r3, [pc, #112]	; (3834 <usb_d_cb_trans_setup+0xc4>)
    37c4:	4798      	blx	r3
		return;
    37c6:	e02b      	b.n	3820 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    37c8:	79fb      	ldrb	r3, [r7, #7]
    37ca:	2100      	movs	r1, #0
    37cc:	4618      	mov	r0, r3
    37ce:	4b19      	ldr	r3, [pc, #100]	; (3834 <usb_d_cb_trans_setup+0xc4>)
    37d0:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    37d2:	79fb      	ldrb	r3, [r7, #7]
    37d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    37d8:	b2db      	uxtb	r3, r3
    37da:	2100      	movs	r1, #0
    37dc:	4618      	mov	r0, r3
    37de:	4b15      	ldr	r3, [pc, #84]	; (3834 <usb_d_cb_trans_setup+0xc4>)
    37e0:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    37e2:	693b      	ldr	r3, [r7, #16]
    37e4:	2201      	movs	r2, #1
    37e6:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    37e8:	693b      	ldr	r3, [r7, #16]
    37ea:	695b      	ldr	r3, [r3, #20]
    37ec:	79fa      	ldrb	r2, [r7, #7]
    37ee:	68f9      	ldr	r1, [r7, #12]
    37f0:	4610      	mov	r0, r2
    37f2:	4798      	blx	r3
    37f4:	4603      	mov	r3, r0
    37f6:	f083 0301 	eor.w	r3, r3, #1
    37fa:	b2db      	uxtb	r3, r3
    37fc:	2b00      	cmp	r3, #0
    37fe:	d00f      	beq.n	3820 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    3800:	693b      	ldr	r3, [r7, #16]
    3802:	2205      	movs	r2, #5
    3804:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3806:	79fb      	ldrb	r3, [r7, #7]
    3808:	2101      	movs	r1, #1
    380a:	4618      	mov	r0, r3
    380c:	4b09      	ldr	r3, [pc, #36]	; (3834 <usb_d_cb_trans_setup+0xc4>)
    380e:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3810:	79fb      	ldrb	r3, [r7, #7]
    3812:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3816:	b2db      	uxtb	r3, r3
    3818:	2101      	movs	r1, #1
    381a:	4618      	mov	r0, r3
    381c:	4b05      	ldr	r3, [pc, #20]	; (3834 <usb_d_cb_trans_setup+0xc4>)
    381e:	4798      	blx	r3
	}
}
    3820:	3718      	adds	r7, #24
    3822:	46bd      	mov	sp, r7
    3824:	bd80      	pop	{r7, pc}
    3826:	bf00      	nop
    3828:	00003681 	.word	0x00003681
    382c:	20000ab8 	.word	0x20000ab8
    3830:	0000b6e1 	.word	0x0000b6e1
    3834:	0000b559 	.word	0x0000b559

00003838 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3838:	b580      	push	{r7, lr}
    383a:	b084      	sub	sp, #16
    383c:	af00      	add	r7, sp, #0
    383e:	4603      	mov	r3, r0
    3840:	6039      	str	r1, [r7, #0]
    3842:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3844:	79fb      	ldrb	r3, [r7, #7]
    3846:	4618      	mov	r0, r3
    3848:	4b0d      	ldr	r3, [pc, #52]	; (3880 <usb_d_cb_trans_more+0x48>)
    384a:	4798      	blx	r3
    384c:	4603      	mov	r3, r0
    384e:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3850:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3854:	015b      	lsls	r3, r3, #5
    3856:	4a0b      	ldr	r2, [pc, #44]	; (3884 <usb_d_cb_trans_more+0x4c>)
    3858:	4413      	add	r3, r2
    385a:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    385c:	68bb      	ldr	r3, [r7, #8]
    385e:	789b      	ldrb	r3, [r3, #2]
    3860:	2b03      	cmp	r3, #3
    3862:	d107      	bne.n	3874 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    3864:	68bb      	ldr	r3, [r7, #8]
    3866:	699b      	ldr	r3, [r3, #24]
    3868:	79fa      	ldrb	r2, [r7, #7]
    386a:	6839      	ldr	r1, [r7, #0]
    386c:	4610      	mov	r0, r2
    386e:	4798      	blx	r3
    3870:	4603      	mov	r3, r0
    3872:	e000      	b.n	3876 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    3874:	2300      	movs	r3, #0
}
    3876:	4618      	mov	r0, r3
    3878:	3710      	adds	r7, #16
    387a:	46bd      	mov	sp, r7
    387c:	bd80      	pop	{r7, pc}
    387e:	bf00      	nop
    3880:	00003681 	.word	0x00003681
    3884:	20000ab8 	.word	0x20000ab8

00003888 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    3888:	b590      	push	{r4, r7, lr}
    388a:	b087      	sub	sp, #28
    388c:	af02      	add	r7, sp, #8
    388e:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    3890:	687b      	ldr	r3, [r7, #4]
    3892:	789b      	ldrb	r3, [r3, #2]
    3894:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    3896:	687b      	ldr	r3, [r7, #4]
    3898:	7b1b      	ldrb	r3, [r3, #12]
    389a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    389e:	2b00      	cmp	r3, #0
    38a0:	bf14      	ite	ne
    38a2:	2301      	movne	r3, #1
    38a4:	2300      	moveq	r3, #0
    38a6:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    38a8:	7bfb      	ldrb	r3, [r7, #15]
    38aa:	2b03      	cmp	r3, #3
    38ac:	d13a      	bne.n	3924 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    38ae:	687b      	ldr	r3, [r7, #4]
    38b0:	69db      	ldr	r3, [r3, #28]
    38b2:	687a      	ldr	r2, [r7, #4]
    38b4:	7850      	ldrb	r0, [r2, #1]
    38b6:	687a      	ldr	r2, [r7, #4]
    38b8:	320c      	adds	r2, #12
    38ba:	2101      	movs	r1, #1
    38bc:	4798      	blx	r3
    38be:	4603      	mov	r3, r0
    38c0:	737b      	strb	r3, [r7, #13]
		if (err) {
    38c2:	7b7b      	ldrb	r3, [r7, #13]
    38c4:	2b00      	cmp	r3, #0
    38c6:	d015      	beq.n	38f4 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    38c8:	687b      	ldr	r3, [r7, #4]
    38ca:	2205      	movs	r2, #5
    38cc:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    38ce:	687b      	ldr	r3, [r7, #4]
    38d0:	2202      	movs	r2, #2
    38d2:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    38d4:	7bbb      	ldrb	r3, [r7, #14]
    38d6:	2b00      	cmp	r3, #0
    38d8:	d002      	beq.n	38e0 <usb_d_ctrl_trans_done+0x58>
    38da:	687b      	ldr	r3, [r7, #4]
    38dc:	785b      	ldrb	r3, [r3, #1]
    38de:	e004      	b.n	38ea <usb_d_ctrl_trans_done+0x62>
    38e0:	687b      	ldr	r3, [r7, #4]
    38e2:	785b      	ldrb	r3, [r3, #1]
    38e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    38e8:	b2db      	uxtb	r3, r3
    38ea:	2101      	movs	r1, #1
    38ec:	4618      	mov	r0, r3
    38ee:	4b15      	ldr	r3, [pc, #84]	; (3944 <usb_d_ctrl_trans_done+0xbc>)
    38f0:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    38f2:	e022      	b.n	393a <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    38f4:	687b      	ldr	r3, [r7, #4]
    38f6:	2204      	movs	r2, #4
    38f8:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    38fa:	687b      	ldr	r3, [r7, #4]
    38fc:	7858      	ldrb	r0, [r3, #1]
    38fe:	7bbb      	ldrb	r3, [r7, #14]
    3900:	2b00      	cmp	r3, #0
    3902:	bf14      	ite	ne
    3904:	2301      	movne	r3, #1
    3906:	2300      	moveq	r3, #0
    3908:	b2db      	uxtb	r3, r3
    390a:	f083 0301 	eor.w	r3, r3, #1
    390e:	b2db      	uxtb	r3, r3
    3910:	f003 0301 	and.w	r3, r3, #1
    3914:	b2d9      	uxtb	r1, r3
    3916:	2301      	movs	r3, #1
    3918:	9300      	str	r3, [sp, #0]
    391a:	2300      	movs	r3, #0
    391c:	2200      	movs	r2, #0
    391e:	4c0a      	ldr	r4, [pc, #40]	; (3948 <usb_d_ctrl_trans_done+0xc0>)
    3920:	47a0      	blx	r4
}
    3922:	e00a      	b.n	393a <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    3924:	687b      	ldr	r3, [r7, #4]
    3926:	69db      	ldr	r3, [r3, #28]
    3928:	687a      	ldr	r2, [r7, #4]
    392a:	7850      	ldrb	r0, [r2, #1]
    392c:	687a      	ldr	r2, [r7, #4]
    392e:	320c      	adds	r2, #12
    3930:	2100      	movs	r1, #0
    3932:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3934:	687b      	ldr	r3, [r7, #4]
    3936:	2202      	movs	r2, #2
    3938:	709a      	strb	r2, [r3, #2]
}
    393a:	bf00      	nop
    393c:	3714      	adds	r7, #20
    393e:	46bd      	mov	sp, r7
    3940:	bd90      	pop	{r4, r7, pc}
    3942:	bf00      	nop
    3944:	0000b559 	.word	0x0000b559
    3948:	00003701 	.word	0x00003701

0000394c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    394c:	b580      	push	{r7, lr}
    394e:	b086      	sub	sp, #24
    3950:	af00      	add	r7, sp, #0
    3952:	4603      	mov	r3, r0
    3954:	60b9      	str	r1, [r7, #8]
    3956:	607a      	str	r2, [r7, #4]
    3958:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    395a:	7bfb      	ldrb	r3, [r7, #15]
    395c:	4618      	mov	r0, r3
    395e:	4b2f      	ldr	r3, [pc, #188]	; (3a1c <_usb_d_cb_trans_done+0xd0>)
    3960:	4798      	blx	r3
    3962:	4603      	mov	r3, r0
    3964:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3966:	f997 3017 	ldrsb.w	r3, [r7, #23]
    396a:	015b      	lsls	r3, r3, #5
    396c:	4a2c      	ldr	r2, [pc, #176]	; (3a20 <_usb_d_cb_trans_done+0xd4>)
    396e:	4413      	add	r3, r2
    3970:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    3972:	68bb      	ldr	r3, [r7, #8]
    3974:	2b00      	cmp	r3, #0
    3976:	d10e      	bne.n	3996 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3978:	693b      	ldr	r3, [r7, #16]
    397a:	2200      	movs	r2, #0
    397c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    397e:	693b      	ldr	r3, [r7, #16]
    3980:	781b      	ldrb	r3, [r3, #0]
    3982:	2b00      	cmp	r3, #0
    3984:	d103      	bne.n	398e <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    3986:	6938      	ldr	r0, [r7, #16]
    3988:	4b26      	ldr	r3, [pc, #152]	; (3a24 <_usb_d_cb_trans_done+0xd8>)
    398a:	4798      	blx	r3
			return;
    398c:	e043      	b.n	3a16 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    398e:	693b      	ldr	r3, [r7, #16]
    3990:	2201      	movs	r2, #1
    3992:	709a      	strb	r2, [r3, #2]
    3994:	e038      	b.n	3a08 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    3996:	68bb      	ldr	r3, [r7, #8]
    3998:	2b01      	cmp	r3, #1
    399a:	d113      	bne.n	39c4 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    399c:	693b      	ldr	r3, [r7, #16]
    399e:	2202      	movs	r2, #2
    39a0:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    39a2:	693b      	ldr	r3, [r7, #16]
    39a4:	781b      	ldrb	r3, [r3, #0]
    39a6:	2b00      	cmp	r3, #0
    39a8:	d108      	bne.n	39bc <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    39aa:	693b      	ldr	r3, [r7, #16]
    39ac:	2202      	movs	r2, #2
    39ae:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    39b0:	7bfb      	ldrb	r3, [r7, #15]
    39b2:	2100      	movs	r1, #0
    39b4:	4618      	mov	r0, r3
    39b6:	4b1c      	ldr	r3, [pc, #112]	; (3a28 <_usb_d_cb_trans_done+0xdc>)
    39b8:	4798      	blx	r3
    39ba:	e025      	b.n	3a08 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    39bc:	693b      	ldr	r3, [r7, #16]
    39be:	2205      	movs	r2, #5
    39c0:	709a      	strb	r2, [r3, #2]
    39c2:	e021      	b.n	3a08 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    39c4:	68bb      	ldr	r3, [r7, #8]
    39c6:	2b02      	cmp	r3, #2
    39c8:	d10e      	bne.n	39e8 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    39ca:	693b      	ldr	r3, [r7, #16]
    39cc:	2204      	movs	r2, #4
    39ce:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    39d0:	693b      	ldr	r3, [r7, #16]
    39d2:	781b      	ldrb	r3, [r3, #0]
    39d4:	2b00      	cmp	r3, #0
    39d6:	d103      	bne.n	39e0 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    39d8:	693b      	ldr	r3, [r7, #16]
    39da:	2202      	movs	r2, #2
    39dc:	709a      	strb	r2, [r3, #2]
			return;
    39de:	e01a      	b.n	3a16 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    39e0:	693b      	ldr	r3, [r7, #16]
    39e2:	2201      	movs	r2, #1
    39e4:	709a      	strb	r2, [r3, #2]
    39e6:	e00f      	b.n	3a08 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    39e8:	68bb      	ldr	r3, [r7, #8]
    39ea:	2b03      	cmp	r3, #3
    39ec:	d106      	bne.n	39fc <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    39ee:	693b      	ldr	r3, [r7, #16]
    39f0:	2200      	movs	r2, #0
    39f2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    39f4:	693b      	ldr	r3, [r7, #16]
    39f6:	2205      	movs	r2, #5
    39f8:	70da      	strb	r2, [r3, #3]
    39fa:	e005      	b.n	3a08 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    39fc:	693b      	ldr	r3, [r7, #16]
    39fe:	2206      	movs	r2, #6
    3a00:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    3a02:	693b      	ldr	r3, [r7, #16]
    3a04:	2206      	movs	r2, #6
    3a06:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    3a08:	693b      	ldr	r3, [r7, #16]
    3a0a:	69db      	ldr	r3, [r3, #28]
    3a0c:	693a      	ldr	r2, [r7, #16]
    3a0e:	78d1      	ldrb	r1, [r2, #3]
    3a10:	687a      	ldr	r2, [r7, #4]
    3a12:	7bf8      	ldrb	r0, [r7, #15]
    3a14:	4798      	blx	r3
}
    3a16:	3718      	adds	r7, #24
    3a18:	46bd      	mov	sp, r7
    3a1a:	bd80      	pop	{r7, pc}
    3a1c:	00003681 	.word	0x00003681
    3a20:	20000ab8 	.word	0x20000ab8
    3a24:	00003889 	.word	0x00003889
    3a28:	0000b559 	.word	0x0000b559

00003a2c <usb_d_init>:

int32_t usb_d_init(void)
{
    3a2c:	b580      	push	{r7, lr}
    3a2e:	b082      	sub	sp, #8
    3a30:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    3a32:	4b21      	ldr	r3, [pc, #132]	; (3ab8 <usb_d_init+0x8c>)
    3a34:	4798      	blx	r3
    3a36:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3a38:	683b      	ldr	r3, [r7, #0]
    3a3a:	2b00      	cmp	r3, #0
    3a3c:	da01      	bge.n	3a42 <usb_d_init+0x16>
		return rc;
    3a3e:	683b      	ldr	r3, [r7, #0]
    3a40:	e036      	b.n	3ab0 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    3a42:	2280      	movs	r2, #128	; 0x80
    3a44:	2100      	movs	r1, #0
    3a46:	481d      	ldr	r0, [pc, #116]	; (3abc <usb_d_init+0x90>)
    3a48:	4b1d      	ldr	r3, [pc, #116]	; (3ac0 <usb_d_init+0x94>)
    3a4a:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3a4c:	2300      	movs	r3, #0
    3a4e:	71fb      	strb	r3, [r7, #7]
    3a50:	e01e      	b.n	3a90 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    3a52:	79fb      	ldrb	r3, [r7, #7]
    3a54:	4a19      	ldr	r2, [pc, #100]	; (3abc <usb_d_init+0x90>)
    3a56:	015b      	lsls	r3, r3, #5
    3a58:	4413      	add	r3, r2
    3a5a:	3301      	adds	r3, #1
    3a5c:	22ff      	movs	r2, #255	; 0xff
    3a5e:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    3a60:	79fb      	ldrb	r3, [r7, #7]
    3a62:	4a16      	ldr	r2, [pc, #88]	; (3abc <usb_d_init+0x90>)
    3a64:	015b      	lsls	r3, r3, #5
    3a66:	4413      	add	r3, r2
    3a68:	3314      	adds	r3, #20
    3a6a:	4a16      	ldr	r2, [pc, #88]	; (3ac4 <usb_d_init+0x98>)
    3a6c:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    3a6e:	79fb      	ldrb	r3, [r7, #7]
    3a70:	4a12      	ldr	r2, [pc, #72]	; (3abc <usb_d_init+0x90>)
    3a72:	015b      	lsls	r3, r3, #5
    3a74:	4413      	add	r3, r2
    3a76:	3318      	adds	r3, #24
    3a78:	4a12      	ldr	r2, [pc, #72]	; (3ac4 <usb_d_init+0x98>)
    3a7a:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    3a7c:	79fb      	ldrb	r3, [r7, #7]
    3a7e:	4a0f      	ldr	r2, [pc, #60]	; (3abc <usb_d_init+0x90>)
    3a80:	015b      	lsls	r3, r3, #5
    3a82:	4413      	add	r3, r2
    3a84:	331c      	adds	r3, #28
    3a86:	4a0f      	ldr	r2, [pc, #60]	; (3ac4 <usb_d_init+0x98>)
    3a88:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3a8a:	79fb      	ldrb	r3, [r7, #7]
    3a8c:	3301      	adds	r3, #1
    3a8e:	71fb      	strb	r3, [r7, #7]
    3a90:	79fb      	ldrb	r3, [r7, #7]
    3a92:	2b03      	cmp	r3, #3
    3a94:	d9dd      	bls.n	3a52 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    3a96:	490c      	ldr	r1, [pc, #48]	; (3ac8 <usb_d_init+0x9c>)
    3a98:	2000      	movs	r0, #0
    3a9a:	4b0c      	ldr	r3, [pc, #48]	; (3acc <usb_d_init+0xa0>)
    3a9c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    3a9e:	490c      	ldr	r1, [pc, #48]	; (3ad0 <usb_d_init+0xa4>)
    3aa0:	2001      	movs	r0, #1
    3aa2:	4b0a      	ldr	r3, [pc, #40]	; (3acc <usb_d_init+0xa0>)
    3aa4:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    3aa6:	490b      	ldr	r1, [pc, #44]	; (3ad4 <usb_d_init+0xa8>)
    3aa8:	2002      	movs	r0, #2
    3aaa:	4b08      	ldr	r3, [pc, #32]	; (3acc <usb_d_init+0xa0>)
    3aac:	4798      	blx	r3
	return ERR_NONE;
    3aae:	2300      	movs	r3, #0
}
    3ab0:	4618      	mov	r0, r3
    3ab2:	3708      	adds	r7, #8
    3ab4:	46bd      	mov	sp, r7
    3ab6:	bd80      	pop	{r7, pc}
    3ab8:	0000ada1 	.word	0x0000ada1
    3abc:	20000ab8 	.word	0x20000ab8
    3ac0:	000101c1 	.word	0x000101c1
    3ac4:	00003755 	.word	0x00003755
    3ac8:	00003771 	.word	0x00003771
    3acc:	0000b9e9 	.word	0x0000b9e9
    3ad0:	00003839 	.word	0x00003839
    3ad4:	0000394d 	.word	0x0000394d

00003ad8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3ad8:	b580      	push	{r7, lr}
    3ada:	b082      	sub	sp, #8
    3adc:	af00      	add	r7, sp, #0
    3ade:	4603      	mov	r3, r0
    3ae0:	6039      	str	r1, [r7, #0]
    3ae2:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3ae4:	79fb      	ldrb	r3, [r7, #7]
    3ae6:	6839      	ldr	r1, [r7, #0]
    3ae8:	4618      	mov	r0, r3
    3aea:	4b03      	ldr	r3, [pc, #12]	; (3af8 <usb_d_register_callback+0x20>)
    3aec:	4798      	blx	r3
}
    3aee:	bf00      	nop
    3af0:	3708      	adds	r7, #8
    3af2:	46bd      	mov	sp, r7
    3af4:	bd80      	pop	{r7, pc}
    3af6:	bf00      	nop
    3af8:	0000b9a1 	.word	0x0000b9a1

00003afc <usb_d_enable>:

int32_t usb_d_enable(void)
{
    3afc:	b580      	push	{r7, lr}
    3afe:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    3b00:	4b02      	ldr	r3, [pc, #8]	; (3b0c <usb_d_enable+0x10>)
    3b02:	4798      	blx	r3
    3b04:	4603      	mov	r3, r0
}
    3b06:	4618      	mov	r0, r3
    3b08:	bd80      	pop	{r7, pc}
    3b0a:	bf00      	nop
    3b0c:	0000ae91 	.word	0x0000ae91

00003b10 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    3b10:	b580      	push	{r7, lr}
    3b12:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    3b14:	4b01      	ldr	r3, [pc, #4]	; (3b1c <usb_d_attach+0xc>)
    3b16:	4798      	blx	r3
}
    3b18:	bf00      	nop
    3b1a:	bd80      	pop	{r7, pc}
    3b1c:	0000af15 	.word	0x0000af15

00003b20 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    3b20:	b580      	push	{r7, lr}
    3b22:	b082      	sub	sp, #8
    3b24:	af00      	add	r7, sp, #0
    3b26:	4603      	mov	r3, r0
    3b28:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    3b2a:	79fb      	ldrb	r3, [r7, #7]
    3b2c:	4618      	mov	r0, r3
    3b2e:	4b03      	ldr	r3, [pc, #12]	; (3b3c <usb_d_set_address+0x1c>)
    3b30:	4798      	blx	r3
}
    3b32:	bf00      	nop
    3b34:	3708      	adds	r7, #8
    3b36:	46bd      	mov	sp, r7
    3b38:	bd80      	pop	{r7, pc}
    3b3a:	bf00      	nop
    3b3c:	0000af29 	.word	0x0000af29

00003b40 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3b40:	b580      	push	{r7, lr}
    3b42:	b082      	sub	sp, #8
    3b44:	af00      	add	r7, sp, #0
    3b46:	4603      	mov	r3, r0
    3b48:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    3b4a:	79fb      	ldrb	r3, [r7, #7]
    3b4c:	b29b      	uxth	r3, r3
    3b4e:	461a      	mov	r2, r3
    3b50:	2100      	movs	r1, #0
    3b52:	2000      	movs	r0, #0
    3b54:	4b03      	ldr	r3, [pc, #12]	; (3b64 <usb_d_ep0_init+0x24>)
    3b56:	4798      	blx	r3
    3b58:	4603      	mov	r3, r0
}
    3b5a:	4618      	mov	r0, r3
    3b5c:	3708      	adds	r7, #8
    3b5e:	46bd      	mov	sp, r7
    3b60:	bd80      	pop	{r7, pc}
    3b62:	bf00      	nop
    3b64:	00003b69 	.word	0x00003b69

00003b68 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3b68:	b580      	push	{r7, lr}
    3b6a:	b086      	sub	sp, #24
    3b6c:	af00      	add	r7, sp, #0
    3b6e:	4603      	mov	r3, r0
    3b70:	71fb      	strb	r3, [r7, #7]
    3b72:	460b      	mov	r3, r1
    3b74:	71bb      	strb	r3, [r7, #6]
    3b76:	4613      	mov	r3, r2
    3b78:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    3b7a:	79fb      	ldrb	r3, [r7, #7]
    3b7c:	4618      	mov	r0, r3
    3b7e:	4b1e      	ldr	r3, [pc, #120]	; (3bf8 <usb_d_ep_init+0x90>)
    3b80:	4798      	blx	r3
    3b82:	4603      	mov	r3, r0
    3b84:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3b86:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3b8a:	015b      	lsls	r3, r3, #5
    3b8c:	4a1b      	ldr	r2, [pc, #108]	; (3bfc <usb_d_ep_init+0x94>)
    3b8e:	4413      	add	r3, r2
    3b90:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    3b92:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3b96:	2b00      	cmp	r3, #0
    3b98:	db02      	blt.n	3ba0 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    3b9a:	f06f 0313 	mvn.w	r3, #19
    3b9e:	e027      	b.n	3bf0 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    3ba0:	20ff      	movs	r0, #255	; 0xff
    3ba2:	4b15      	ldr	r3, [pc, #84]	; (3bf8 <usb_d_ep_init+0x90>)
    3ba4:	4798      	blx	r3
    3ba6:	4603      	mov	r3, r0
    3ba8:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    3baa:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3bae:	2b00      	cmp	r3, #0
    3bb0:	da02      	bge.n	3bb8 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    3bb2:	f06f 0314 	mvn.w	r3, #20
    3bb6:	e01b      	b.n	3bf0 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3bb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3bbc:	015b      	lsls	r3, r3, #5
    3bbe:	4a0f      	ldr	r2, [pc, #60]	; (3bfc <usb_d_ep_init+0x94>)
    3bc0:	4413      	add	r3, r2
    3bc2:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    3bc4:	88ba      	ldrh	r2, [r7, #4]
    3bc6:	79b9      	ldrb	r1, [r7, #6]
    3bc8:	79fb      	ldrb	r3, [r7, #7]
    3bca:	4618      	mov	r0, r3
    3bcc:	4b0c      	ldr	r3, [pc, #48]	; (3c00 <usb_d_ep_init+0x98>)
    3bce:	4798      	blx	r3
    3bd0:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3bd2:	68fb      	ldr	r3, [r7, #12]
    3bd4:	2b00      	cmp	r3, #0
    3bd6:	da01      	bge.n	3bdc <usb_d_ep_init+0x74>
		return rc;
    3bd8:	68fb      	ldr	r3, [r7, #12]
    3bda:	e009      	b.n	3bf0 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3bdc:	693b      	ldr	r3, [r7, #16]
    3bde:	79fa      	ldrb	r2, [r7, #7]
    3be0:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    3be2:	79bb      	ldrb	r3, [r7, #6]
    3be4:	f003 0303 	and.w	r3, r3, #3
    3be8:	b2da      	uxtb	r2, r3
    3bea:	693b      	ldr	r3, [r7, #16]
    3bec:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    3bee:	2300      	movs	r3, #0
}
    3bf0:	4618      	mov	r0, r3
    3bf2:	3718      	adds	r7, #24
    3bf4:	46bd      	mov	sp, r7
    3bf6:	bd80      	pop	{r7, pc}
    3bf8:	00003681 	.word	0x00003681
    3bfc:	20000ab8 	.word	0x20000ab8
    3c00:	0000afc9 	.word	0x0000afc9

00003c04 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3c04:	b580      	push	{r7, lr}
    3c06:	b084      	sub	sp, #16
    3c08:	af00      	add	r7, sp, #0
    3c0a:	4603      	mov	r3, r0
    3c0c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3c0e:	79fb      	ldrb	r3, [r7, #7]
    3c10:	4618      	mov	r0, r3
    3c12:	4b0d      	ldr	r3, [pc, #52]	; (3c48 <usb_d_ep_deinit+0x44>)
    3c14:	4798      	blx	r3
    3c16:	4603      	mov	r3, r0
    3c18:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3c1e:	015b      	lsls	r3, r3, #5
    3c20:	4a0a      	ldr	r2, [pc, #40]	; (3c4c <usb_d_ep_deinit+0x48>)
    3c22:	4413      	add	r3, r2
    3c24:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3c2a:	2b00      	cmp	r3, #0
    3c2c:	db07      	blt.n	3c3e <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    3c2e:	79fb      	ldrb	r3, [r7, #7]
    3c30:	4618      	mov	r0, r3
    3c32:	4b07      	ldr	r3, [pc, #28]	; (3c50 <usb_d_ep_deinit+0x4c>)
    3c34:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    3c36:	68bb      	ldr	r3, [r7, #8]
    3c38:	22ff      	movs	r2, #255	; 0xff
    3c3a:	705a      	strb	r2, [r3, #1]
    3c3c:	e000      	b.n	3c40 <usb_d_ep_deinit+0x3c>
		return;
    3c3e:	bf00      	nop
}
    3c40:	3710      	adds	r7, #16
    3c42:	46bd      	mov	sp, r7
    3c44:	bd80      	pop	{r7, pc}
    3c46:	bf00      	nop
    3c48:	00003681 	.word	0x00003681
    3c4c:	20000ab8 	.word	0x20000ab8
    3c50:	0000b0fd 	.word	0x0000b0fd

00003c54 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3c54:	b580      	push	{r7, lr}
    3c56:	b086      	sub	sp, #24
    3c58:	af00      	add	r7, sp, #0
    3c5a:	4603      	mov	r3, r0
    3c5c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3c5e:	79fb      	ldrb	r3, [r7, #7]
    3c60:	4618      	mov	r0, r3
    3c62:	4b15      	ldr	r3, [pc, #84]	; (3cb8 <usb_d_ep_enable+0x64>)
    3c64:	4798      	blx	r3
    3c66:	4603      	mov	r3, r0
    3c68:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3c6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3c6e:	015b      	lsls	r3, r3, #5
    3c70:	4a12      	ldr	r2, [pc, #72]	; (3cbc <usb_d_ep_enable+0x68>)
    3c72:	4413      	add	r3, r2
    3c74:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3c76:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3c7a:	2b00      	cmp	r3, #0
    3c7c:	da02      	bge.n	3c84 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    3c7e:	f06f 0311 	mvn.w	r3, #17
    3c82:	e014      	b.n	3cae <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3c84:	693b      	ldr	r3, [r7, #16]
    3c86:	781b      	ldrb	r3, [r3, #0]
    3c88:	2b00      	cmp	r3, #0
    3c8a:	d101      	bne.n	3c90 <usb_d_ep_enable+0x3c>
    3c8c:	2202      	movs	r2, #2
    3c8e:	e000      	b.n	3c92 <usb_d_ep_enable+0x3e>
    3c90:	2201      	movs	r2, #1
    3c92:	693b      	ldr	r3, [r7, #16]
    3c94:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    3c96:	79fb      	ldrb	r3, [r7, #7]
    3c98:	4618      	mov	r0, r3
    3c9a:	4b09      	ldr	r3, [pc, #36]	; (3cc0 <usb_d_ep_enable+0x6c>)
    3c9c:	4798      	blx	r3
    3c9e:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3ca0:	68fb      	ldr	r3, [r7, #12]
    3ca2:	2b00      	cmp	r3, #0
    3ca4:	da02      	bge.n	3cac <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    3ca6:	693b      	ldr	r3, [r7, #16]
    3ca8:	2200      	movs	r2, #0
    3caa:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3cac:	68fb      	ldr	r3, [r7, #12]
}
    3cae:	4618      	mov	r0, r3
    3cb0:	3718      	adds	r7, #24
    3cb2:	46bd      	mov	sp, r7
    3cb4:	bd80      	pop	{r7, pc}
    3cb6:	bf00      	nop
    3cb8:	00003681 	.word	0x00003681
    3cbc:	20000ab8 	.word	0x20000ab8
    3cc0:	0000b1e1 	.word	0x0000b1e1

00003cc4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    3cc4:	b590      	push	{r4, r7, lr}
    3cc6:	b08d      	sub	sp, #52	; 0x34
    3cc8:	af02      	add	r7, sp, #8
    3cca:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3ccc:	687b      	ldr	r3, [r7, #4]
    3cce:	7a1b      	ldrb	r3, [r3, #8]
    3cd0:	4618      	mov	r0, r3
    3cd2:	4b51      	ldr	r3, [pc, #324]	; (3e18 <usb_d_ep_transfer+0x154>)
    3cd4:	4798      	blx	r3
    3cd6:	4603      	mov	r3, r0
    3cd8:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3cda:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3cde:	015b      	lsls	r3, r3, #5
    3ce0:	4a4e      	ldr	r2, [pc, #312]	; (3e1c <usb_d_ep_transfer+0x158>)
    3ce2:	4413      	add	r3, r2
    3ce4:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    3ce6:	687b      	ldr	r3, [r7, #4]
    3ce8:	7a1b      	ldrb	r3, [r3, #8]
    3cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3cee:	2b00      	cmp	r3, #0
    3cf0:	bf14      	ite	ne
    3cf2:	2301      	movne	r3, #1
    3cf4:	2300      	moveq	r3, #0
    3cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3cfa:	687b      	ldr	r3, [r7, #4]
    3cfc:	7a5b      	ldrb	r3, [r3, #9]
    3cfe:	2b00      	cmp	r3, #0
    3d00:	bf14      	ite	ne
    3d02:	2301      	movne	r3, #1
    3d04:	2300      	moveq	r3, #0
    3d06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    3d0a:	687b      	ldr	r3, [r7, #4]
    3d0c:	685b      	ldr	r3, [r3, #4]
    3d0e:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    3d10:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3d14:	2b00      	cmp	r3, #0
    3d16:	da02      	bge.n	3d1e <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3d18:	f06f 0311 	mvn.w	r3, #17
    3d1c:	e077      	b.n	3e0e <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    3d1e:	f107 0308 	add.w	r3, r7, #8
    3d22:	4618      	mov	r0, r3
    3d24:	4b3e      	ldr	r3, [pc, #248]	; (3e20 <usb_d_ep_transfer+0x15c>)
    3d26:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3d28:	69bb      	ldr	r3, [r7, #24]
    3d2a:	789b      	ldrb	r3, [r3, #2]
    3d2c:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    3d2e:	7bfb      	ldrb	r3, [r7, #15]
    3d30:	b2db      	uxtb	r3, r3
    3d32:	2b01      	cmp	r3, #1
    3d34:	d10c      	bne.n	3d50 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3d36:	69bb      	ldr	r3, [r7, #24]
    3d38:	2203      	movs	r2, #3
    3d3a:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3d3c:	f107 0308 	add.w	r3, r7, #8
    3d40:	4618      	mov	r0, r3
    3d42:	4b38      	ldr	r3, [pc, #224]	; (3e24 <usb_d_ep_transfer+0x160>)
    3d44:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3d46:	69bb      	ldr	r3, [r7, #24]
    3d48:	781b      	ldrb	r3, [r3, #0]
    3d4a:	2b00      	cmp	r3, #0
    3d4c:	d151      	bne.n	3df2 <usb_d_ep_transfer+0x12e>
    3d4e:	e017      	b.n	3d80 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3d50:	f107 0308 	add.w	r3, r7, #8
    3d54:	4618      	mov	r0, r3
    3d56:	4b33      	ldr	r3, [pc, #204]	; (3e24 <usb_d_ep_transfer+0x160>)
    3d58:	4798      	blx	r3
		switch (state) {
    3d5a:	7bfb      	ldrb	r3, [r7, #15]
    3d5c:	b2db      	uxtb	r3, r3
    3d5e:	2b05      	cmp	r3, #5
    3d60:	d004      	beq.n	3d6c <usb_d_ep_transfer+0xa8>
    3d62:	2b06      	cmp	r3, #6
    3d64:	d004      	beq.n	3d70 <usb_d_ep_transfer+0xac>
    3d66:	2b00      	cmp	r3, #0
    3d68:	d005      	beq.n	3d76 <usb_d_ep_transfer+0xb2>
    3d6a:	e007      	b.n	3d7c <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3d6c:	2302      	movs	r3, #2
    3d6e:	e04e      	b.n	3e0e <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3d70:	f06f 030f 	mvn.w	r3, #15
    3d74:	e04b      	b.n	3e0e <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    3d76:	f06f 0312 	mvn.w	r3, #18
    3d7a:	e048      	b.n	3e0e <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3d7c:	2301      	movs	r3, #1
    3d7e:	e046      	b.n	3e0e <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3d80:	69bb      	ldr	r3, [r7, #24]
    3d82:	7c9b      	ldrb	r3, [r3, #18]
    3d84:	b29a      	uxth	r2, r3
    3d86:	69bb      	ldr	r3, [r7, #24]
    3d88:	7cdb      	ldrb	r3, [r3, #19]
    3d8a:	b29b      	uxth	r3, r3
    3d8c:	021b      	lsls	r3, r3, #8
    3d8e:	b29b      	uxth	r3, r3
    3d90:	4413      	add	r3, r2
    3d92:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    3d94:	8afb      	ldrh	r3, [r7, #22]
    3d96:	2b00      	cmp	r3, #0
    3d98:	d10b      	bne.n	3db2 <usb_d_ep_transfer+0xee>
			dir                 = true;
    3d9a:	2301      	movs	r3, #1
    3d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    3da0:	2300      	movs	r3, #0
    3da2:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    3da4:	2301      	movs	r3, #1
    3da6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3daa:	69bb      	ldr	r3, [r7, #24]
    3dac:	2204      	movs	r2, #4
    3dae:	709a      	strb	r2, [r3, #2]
    3db0:	e01f      	b.n	3df2 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    3db2:	69bb      	ldr	r3, [r7, #24]
    3db4:	7b1b      	ldrb	r3, [r3, #12]
    3db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3dba:	2b00      	cmp	r3, #0
    3dbc:	bf14      	ite	ne
    3dbe:	2301      	movne	r3, #1
    3dc0:	2300      	moveq	r3, #0
    3dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    3dc6:	8afa      	ldrh	r2, [r7, #22]
    3dc8:	6a3b      	ldr	r3, [r7, #32]
    3dca:	429a      	cmp	r2, r3
    3dcc:	d201      	bcs.n	3dd2 <usb_d_ep_transfer+0x10e>
				len = req_len;
    3dce:	8afb      	ldrh	r3, [r7, #22]
    3dd0:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    3dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3dd6:	2b00      	cmp	r3, #0
    3dd8:	d008      	beq.n	3dec <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3dda:	8afa      	ldrh	r2, [r7, #22]
    3ddc:	6a3b      	ldr	r3, [r7, #32]
    3dde:	429a      	cmp	r2, r3
    3de0:	bf8c      	ite	hi
    3de2:	2301      	movhi	r3, #1
    3de4:	2300      	movls	r3, #0
    3de6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3dea:	e002      	b.n	3df2 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3dec:	2300      	movs	r3, #0
    3dee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    3df2:	687b      	ldr	r3, [r7, #4]
    3df4:	7a18      	ldrb	r0, [r3, #8]
    3df6:	687b      	ldr	r3, [r7, #4]
    3df8:	681a      	ldr	r2, [r3, #0]
    3dfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3dfe:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    3e02:	9300      	str	r3, [sp, #0]
    3e04:	6a3b      	ldr	r3, [r7, #32]
    3e06:	4c08      	ldr	r4, [pc, #32]	; (3e28 <usb_d_ep_transfer+0x164>)
    3e08:	47a0      	blx	r4
    3e0a:	6138      	str	r0, [r7, #16]
	return rc;
    3e0c:	693b      	ldr	r3, [r7, #16]
}
    3e0e:	4618      	mov	r0, r3
    3e10:	372c      	adds	r7, #44	; 0x2c
    3e12:	46bd      	mov	sp, r7
    3e14:	bd90      	pop	{r4, r7, pc}
    3e16:	bf00      	nop
    3e18:	00003681 	.word	0x00003681
    3e1c:	20000ab8 	.word	0x20000ab8
    3e20:	0000c155 	.word	0x0000c155
    3e24:	0000c17b 	.word	0x0000c17b
    3e28:	00003701 	.word	0x00003701

00003e2c <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3e2c:	b580      	push	{r7, lr}
    3e2e:	b084      	sub	sp, #16
    3e30:	af00      	add	r7, sp, #0
    3e32:	4603      	mov	r3, r0
    3e34:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3e36:	79fb      	ldrb	r3, [r7, #7]
    3e38:	4618      	mov	r0, r3
    3e3a:	4b0e      	ldr	r3, [pc, #56]	; (3e74 <usb_d_ep_abort+0x48>)
    3e3c:	4798      	blx	r3
    3e3e:	4603      	mov	r3, r0
    3e40:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3e46:	015b      	lsls	r3, r3, #5
    3e48:	4a0b      	ldr	r2, [pc, #44]	; (3e78 <usb_d_ep_abort+0x4c>)
    3e4a:	4413      	add	r3, r2
    3e4c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3e52:	2b00      	cmp	r3, #0
    3e54:	db0a      	blt.n	3e6c <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    3e56:	79fb      	ldrb	r3, [r7, #7]
    3e58:	4618      	mov	r0, r3
    3e5a:	4b08      	ldr	r3, [pc, #32]	; (3e7c <usb_d_ep_abort+0x50>)
    3e5c:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3e5e:	68bb      	ldr	r3, [r7, #8]
    3e60:	2201      	movs	r2, #1
    3e62:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    3e64:	68bb      	ldr	r3, [r7, #8]
    3e66:	2204      	movs	r2, #4
    3e68:	70da      	strb	r2, [r3, #3]
    3e6a:	e000      	b.n	3e6e <usb_d_ep_abort+0x42>
		return;
    3e6c:	bf00      	nop
}
    3e6e:	3710      	adds	r7, #16
    3e70:	46bd      	mov	sp, r7
    3e72:	bd80      	pop	{r7, pc}
    3e74:	00003681 	.word	0x00003681
    3e78:	20000ab8 	.word	0x20000ab8
    3e7c:	0000b94d 	.word	0x0000b94d

00003e80 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    3e80:	b580      	push	{r7, lr}
    3e82:	b086      	sub	sp, #24
    3e84:	af00      	add	r7, sp, #0
    3e86:	4603      	mov	r3, r0
    3e88:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3e8a:	79fb      	ldrb	r3, [r7, #7]
    3e8c:	4618      	mov	r0, r3
    3e8e:	4b1a      	ldr	r3, [pc, #104]	; (3ef8 <_usb_d_ep_halt_clr+0x78>)
    3e90:	4798      	blx	r3
    3e92:	4603      	mov	r3, r0
    3e94:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3e96:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3e9a:	015b      	lsls	r3, r3, #5
    3e9c:	4a17      	ldr	r2, [pc, #92]	; (3efc <_usb_d_ep_halt_clr+0x7c>)
    3e9e:	4413      	add	r3, r2
    3ea0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	da02      	bge.n	3eb0 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3eaa:	f06f 0311 	mvn.w	r3, #17
    3eae:	e01f      	b.n	3ef0 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3eb0:	79fb      	ldrb	r3, [r7, #7]
    3eb2:	2102      	movs	r1, #2
    3eb4:	4618      	mov	r0, r3
    3eb6:	4b12      	ldr	r3, [pc, #72]	; (3f00 <_usb_d_ep_halt_clr+0x80>)
    3eb8:	4798      	blx	r3
    3eba:	4603      	mov	r3, r0
    3ebc:	2b00      	cmp	r3, #0
    3ebe:	d016      	beq.n	3eee <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3ec0:	79fb      	ldrb	r3, [r7, #7]
    3ec2:	2100      	movs	r1, #0
    3ec4:	4618      	mov	r0, r3
    3ec6:	4b0e      	ldr	r3, [pc, #56]	; (3f00 <_usb_d_ep_halt_clr+0x80>)
    3ec8:	4798      	blx	r3
    3eca:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3ecc:	68fb      	ldr	r3, [r7, #12]
    3ece:	2b00      	cmp	r3, #0
    3ed0:	da01      	bge.n	3ed6 <_usb_d_ep_halt_clr+0x56>
			return rc;
    3ed2:	68fb      	ldr	r3, [r7, #12]
    3ed4:	e00c      	b.n	3ef0 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3ed6:	693b      	ldr	r3, [r7, #16]
    3ed8:	2201      	movs	r2, #1
    3eda:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3edc:	693b      	ldr	r3, [r7, #16]
    3ede:	2203      	movs	r2, #3
    3ee0:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    3ee2:	693b      	ldr	r3, [r7, #16]
    3ee4:	69db      	ldr	r3, [r3, #28]
    3ee6:	79f8      	ldrb	r0, [r7, #7]
    3ee8:	2200      	movs	r2, #0
    3eea:	2103      	movs	r1, #3
    3eec:	4798      	blx	r3
	}
	return ERR_NONE;
    3eee:	2300      	movs	r3, #0
}
    3ef0:	4618      	mov	r0, r3
    3ef2:	3718      	adds	r7, #24
    3ef4:	46bd      	mov	sp, r7
    3ef6:	bd80      	pop	{r7, pc}
    3ef8:	00003681 	.word	0x00003681
    3efc:	20000ab8 	.word	0x20000ab8
    3f00:	0000b559 	.word	0x0000b559

00003f04 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3f04:	b580      	push	{r7, lr}
    3f06:	b082      	sub	sp, #8
    3f08:	af00      	add	r7, sp, #0
    3f0a:	4603      	mov	r3, r0
    3f0c:	460a      	mov	r2, r1
    3f0e:	71fb      	strb	r3, [r7, #7]
    3f10:	4613      	mov	r3, r2
    3f12:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    3f14:	79bb      	ldrb	r3, [r7, #6]
    3f16:	2b00      	cmp	r3, #0
    3f18:	d105      	bne.n	3f26 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    3f1a:	79fb      	ldrb	r3, [r7, #7]
    3f1c:	4618      	mov	r0, r3
    3f1e:	4b0c      	ldr	r3, [pc, #48]	; (3f50 <usb_d_ep_halt+0x4c>)
    3f20:	4798      	blx	r3
    3f22:	4603      	mov	r3, r0
    3f24:	e00f      	b.n	3f46 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    3f26:	79bb      	ldrb	r3, [r7, #6]
    3f28:	2b01      	cmp	r3, #1
    3f2a:	d106      	bne.n	3f3a <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3f2c:	79fb      	ldrb	r3, [r7, #7]
    3f2e:	2101      	movs	r1, #1
    3f30:	4618      	mov	r0, r3
    3f32:	4b08      	ldr	r3, [pc, #32]	; (3f54 <usb_d_ep_halt+0x50>)
    3f34:	4798      	blx	r3
    3f36:	4603      	mov	r3, r0
    3f38:	e005      	b.n	3f46 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3f3a:	79fb      	ldrb	r3, [r7, #7]
    3f3c:	2102      	movs	r1, #2
    3f3e:	4618      	mov	r0, r3
    3f40:	4b04      	ldr	r3, [pc, #16]	; (3f54 <usb_d_ep_halt+0x50>)
    3f42:	4798      	blx	r3
    3f44:	4603      	mov	r3, r0
	}
}
    3f46:	4618      	mov	r0, r3
    3f48:	3708      	adds	r7, #8
    3f4a:	46bd      	mov	sp, r7
    3f4c:	bd80      	pop	{r7, pc}
    3f4e:	bf00      	nop
    3f50:	00003e81 	.word	0x00003e81
    3f54:	0000b559 	.word	0x0000b559

00003f58 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3f58:	b580      	push	{r7, lr}
    3f5a:	b086      	sub	sp, #24
    3f5c:	af00      	add	r7, sp, #0
    3f5e:	4603      	mov	r3, r0
    3f60:	603a      	str	r2, [r7, #0]
    3f62:	71fb      	strb	r3, [r7, #7]
    3f64:	460b      	mov	r3, r1
    3f66:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3f68:	79fb      	ldrb	r3, [r7, #7]
    3f6a:	4618      	mov	r0, r3
    3f6c:	4b16      	ldr	r3, [pc, #88]	; (3fc8 <usb_d_ep_register_callback+0x70>)
    3f6e:	4798      	blx	r3
    3f70:	4603      	mov	r3, r0
    3f72:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3f74:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3f78:	015b      	lsls	r3, r3, #5
    3f7a:	4a14      	ldr	r2, [pc, #80]	; (3fcc <usb_d_ep_register_callback+0x74>)
    3f7c:	4413      	add	r3, r2
    3f7e:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3f80:	683b      	ldr	r3, [r7, #0]
    3f82:	2b00      	cmp	r3, #0
    3f84:	d001      	beq.n	3f8a <usb_d_ep_register_callback+0x32>
    3f86:	683b      	ldr	r3, [r7, #0]
    3f88:	e000      	b.n	3f8c <usb_d_ep_register_callback+0x34>
    3f8a:	4b11      	ldr	r3, [pc, #68]	; (3fd0 <usb_d_ep_register_callback+0x78>)
    3f8c:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    3f8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3f92:	2b00      	cmp	r3, #0
    3f94:	db13      	blt.n	3fbe <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    3f96:	79bb      	ldrb	r3, [r7, #6]
    3f98:	2b01      	cmp	r3, #1
    3f9a:	d008      	beq.n	3fae <usb_d_ep_register_callback+0x56>
    3f9c:	2b02      	cmp	r3, #2
    3f9e:	d00a      	beq.n	3fb6 <usb_d_ep_register_callback+0x5e>
    3fa0:	2b00      	cmp	r3, #0
    3fa2:	d000      	beq.n	3fa6 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    3fa4:	e00c      	b.n	3fc0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    3fa6:	693b      	ldr	r3, [r7, #16]
    3fa8:	68fa      	ldr	r2, [r7, #12]
    3faa:	615a      	str	r2, [r3, #20]
		break;
    3fac:	e008      	b.n	3fc0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3fae:	693b      	ldr	r3, [r7, #16]
    3fb0:	68fa      	ldr	r2, [r7, #12]
    3fb2:	619a      	str	r2, [r3, #24]
		break;
    3fb4:	e004      	b.n	3fc0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    3fb6:	693b      	ldr	r3, [r7, #16]
    3fb8:	68fa      	ldr	r2, [r7, #12]
    3fba:	61da      	str	r2, [r3, #28]
		break;
    3fbc:	e000      	b.n	3fc0 <usb_d_ep_register_callback+0x68>
		return;
    3fbe:	bf00      	nop
	}
}
    3fc0:	3718      	adds	r7, #24
    3fc2:	46bd      	mov	sp, r7
    3fc4:	bd80      	pop	{r7, pc}
    3fc6:	bf00      	nop
    3fc8:	00003681 	.word	0x00003681
    3fcc:	20000ab8 	.word	0x20000ab8
    3fd0:	00003755 	.word	0x00003755

00003fd4 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3fd4:	b480      	push	{r7}
    3fd6:	b085      	sub	sp, #20
    3fd8:	af00      	add	r7, sp, #0
    3fda:	4603      	mov	r3, r0
    3fdc:	60b9      	str	r1, [r7, #8]
    3fde:	607a      	str	r2, [r7, #4]
    3fe0:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    3fe2:	7bfb      	ldrb	r3, [r7, #15]
    3fe4:	f083 0301 	eor.w	r3, r3, #1
    3fe8:	b2db      	uxtb	r3, r3
    3fea:	2b00      	cmp	r3, #0
    3fec:	d000      	beq.n	3ff0 <assert+0x1c>
		__asm("BKPT #0");
    3fee:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3ff0:	bf00      	nop
    3ff2:	3714      	adds	r7, #20
    3ff4:	46bd      	mov	sp, r7
    3ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ffa:	4770      	bx	lr

00003ffc <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3ffc:	b480      	push	{r7}
    3ffe:	b085      	sub	sp, #20
    4000:	af00      	add	r7, sp, #0
    4002:	6078      	str	r0, [r7, #4]
    4004:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    4006:	687b      	ldr	r3, [r7, #4]
    4008:	681b      	ldr	r3, [r3, #0]
    400a:	60fb      	str	r3, [r7, #12]
    400c:	e008      	b.n	4020 <is_list_element+0x24>
		if (it == element) {
    400e:	68fa      	ldr	r2, [r7, #12]
    4010:	683b      	ldr	r3, [r7, #0]
    4012:	429a      	cmp	r2, r3
    4014:	d101      	bne.n	401a <is_list_element+0x1e>
			return true;
    4016:	2301      	movs	r3, #1
    4018:	e006      	b.n	4028 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    401a:	68fb      	ldr	r3, [r7, #12]
    401c:	681b      	ldr	r3, [r3, #0]
    401e:	60fb      	str	r3, [r7, #12]
    4020:	68fb      	ldr	r3, [r7, #12]
    4022:	2b00      	cmp	r3, #0
    4024:	d1f3      	bne.n	400e <is_list_element+0x12>
		}
	}

	return false;
    4026:	2300      	movs	r3, #0
}
    4028:	4618      	mov	r0, r3
    402a:	3714      	adds	r7, #20
    402c:	46bd      	mov	sp, r7
    402e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4032:	4770      	bx	lr

00004034 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    4034:	b580      	push	{r7, lr}
    4036:	b082      	sub	sp, #8
    4038:	af00      	add	r7, sp, #0
    403a:	6078      	str	r0, [r7, #4]
    403c:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    403e:	6839      	ldr	r1, [r7, #0]
    4040:	6878      	ldr	r0, [r7, #4]
    4042:	4b0f      	ldr	r3, [pc, #60]	; (4080 <list_insert_as_head+0x4c>)
    4044:	4798      	blx	r3
    4046:	4603      	mov	r3, r0
    4048:	2b00      	cmp	r3, #0
    404a:	bf14      	ite	ne
    404c:	2301      	movne	r3, #1
    404e:	2300      	moveq	r3, #0
    4050:	b2db      	uxtb	r3, r3
    4052:	f083 0301 	eor.w	r3, r3, #1
    4056:	b2db      	uxtb	r3, r3
    4058:	f003 0301 	and.w	r3, r3, #1
    405c:	b2db      	uxtb	r3, r3
    405e:	2239      	movs	r2, #57	; 0x39
    4060:	4908      	ldr	r1, [pc, #32]	; (4084 <list_insert_as_head+0x50>)
    4062:	4618      	mov	r0, r3
    4064:	4b08      	ldr	r3, [pc, #32]	; (4088 <list_insert_as_head+0x54>)
    4066:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    4068:	687b      	ldr	r3, [r7, #4]
    406a:	681a      	ldr	r2, [r3, #0]
    406c:	683b      	ldr	r3, [r7, #0]
    406e:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    4070:	687b      	ldr	r3, [r7, #4]
    4072:	683a      	ldr	r2, [r7, #0]
    4074:	601a      	str	r2, [r3, #0]
}
    4076:	bf00      	nop
    4078:	3708      	adds	r7, #8
    407a:	46bd      	mov	sp, r7
    407c:	bd80      	pop	{r7, pc}
    407e:	bf00      	nop
    4080:	00003ffd 	.word	0x00003ffd
    4084:	000104ac 	.word	0x000104ac
    4088:	00003fd5 	.word	0x00003fd5

0000408c <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    408c:	b480      	push	{r7}
    408e:	b083      	sub	sp, #12
    4090:	af00      	add	r7, sp, #0
    4092:	6078      	str	r0, [r7, #4]
    4094:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    4096:	687b      	ldr	r3, [r7, #4]
    4098:	681a      	ldr	r2, [r3, #0]
    409a:	683b      	ldr	r3, [r7, #0]
    409c:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    409e:	687b      	ldr	r3, [r7, #4]
    40a0:	683a      	ldr	r2, [r7, #0]
    40a2:	601a      	str	r2, [r3, #0]
}
    40a4:	bf00      	nop
    40a6:	370c      	adds	r7, #12
    40a8:	46bd      	mov	sp, r7
    40aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    40ae:	4770      	bx	lr

000040b0 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    40b0:	b580      	push	{r7, lr}
    40b2:	b084      	sub	sp, #16
    40b4:	af00      	add	r7, sp, #0
    40b6:	6078      	str	r0, [r7, #4]
    40b8:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    40ba:	687b      	ldr	r3, [r7, #4]
    40bc:	681b      	ldr	r3, [r3, #0]
    40be:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    40c0:	6839      	ldr	r1, [r7, #0]
    40c2:	6878      	ldr	r0, [r7, #4]
    40c4:	4b16      	ldr	r3, [pc, #88]	; (4120 <list_insert_at_end+0x70>)
    40c6:	4798      	blx	r3
    40c8:	4603      	mov	r3, r0
    40ca:	2b00      	cmp	r3, #0
    40cc:	bf14      	ite	ne
    40ce:	2301      	movne	r3, #1
    40d0:	2300      	moveq	r3, #0
    40d2:	b2db      	uxtb	r3, r3
    40d4:	f083 0301 	eor.w	r3, r3, #1
    40d8:	b2db      	uxtb	r3, r3
    40da:	f003 0301 	and.w	r3, r3, #1
    40de:	b2db      	uxtb	r3, r3
    40e0:	224f      	movs	r2, #79	; 0x4f
    40e2:	4910      	ldr	r1, [pc, #64]	; (4124 <list_insert_at_end+0x74>)
    40e4:	4618      	mov	r0, r3
    40e6:	4b10      	ldr	r3, [pc, #64]	; (4128 <list_insert_at_end+0x78>)
    40e8:	4798      	blx	r3

	if (!list->head) {
    40ea:	687b      	ldr	r3, [r7, #4]
    40ec:	681b      	ldr	r3, [r3, #0]
    40ee:	2b00      	cmp	r3, #0
    40f0:	d109      	bne.n	4106 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    40f2:	687b      	ldr	r3, [r7, #4]
    40f4:	683a      	ldr	r2, [r7, #0]
    40f6:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    40f8:	683b      	ldr	r3, [r7, #0]
    40fa:	2200      	movs	r2, #0
    40fc:	601a      	str	r2, [r3, #0]
		return;
    40fe:	e00c      	b.n	411a <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    4100:	68fb      	ldr	r3, [r7, #12]
    4102:	681b      	ldr	r3, [r3, #0]
    4104:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    4106:	68fb      	ldr	r3, [r7, #12]
    4108:	681b      	ldr	r3, [r3, #0]
    410a:	2b00      	cmp	r3, #0
    410c:	d1f8      	bne.n	4100 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    410e:	68fb      	ldr	r3, [r7, #12]
    4110:	683a      	ldr	r2, [r7, #0]
    4112:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    4114:	683b      	ldr	r3, [r7, #0]
    4116:	2200      	movs	r2, #0
    4118:	601a      	str	r2, [r3, #0]
}
    411a:	3710      	adds	r7, #16
    411c:	46bd      	mov	sp, r7
    411e:	bd80      	pop	{r7, pc}
    4120:	00003ffd 	.word	0x00003ffd
    4124:	000104ac 	.word	0x000104ac
    4128:	00003fd5 	.word	0x00003fd5

0000412c <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    412c:	b480      	push	{r7}
    412e:	b085      	sub	sp, #20
    4130:	af00      	add	r7, sp, #0
    4132:	6078      	str	r0, [r7, #4]
	if (list->head) {
    4134:	687b      	ldr	r3, [r7, #4]
    4136:	681b      	ldr	r3, [r3, #0]
    4138:	2b00      	cmp	r3, #0
    413a:	d009      	beq.n	4150 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    413c:	687b      	ldr	r3, [r7, #4]
    413e:	681b      	ldr	r3, [r3, #0]
    4140:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    4142:	687b      	ldr	r3, [r7, #4]
    4144:	681b      	ldr	r3, [r3, #0]
    4146:	681a      	ldr	r2, [r3, #0]
    4148:	687b      	ldr	r3, [r7, #4]
    414a:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    414c:	68fb      	ldr	r3, [r7, #12]
    414e:	e000      	b.n	4152 <list_remove_head+0x26>
	}

	return NULL;
    4150:	2300      	movs	r3, #0
}
    4152:	4618      	mov	r0, r3
    4154:	3714      	adds	r7, #20
    4156:	46bd      	mov	sp, r7
    4158:	f85d 7b04 	ldr.w	r7, [sp], #4
    415c:	4770      	bx	lr

0000415e <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    415e:	b480      	push	{r7}
    4160:	b085      	sub	sp, #20
    4162:	af00      	add	r7, sp, #0
    4164:	6078      	str	r0, [r7, #4]
    4166:	6039      	str	r1, [r7, #0]
	if (!element) {
    4168:	683b      	ldr	r3, [r7, #0]
    416a:	2b00      	cmp	r3, #0
    416c:	d101      	bne.n	4172 <list_delete_element+0x14>
		return false;
    416e:	2300      	movs	r3, #0
    4170:	e024      	b.n	41bc <list_delete_element+0x5e>
	}

	if (list->head == element) {
    4172:	687b      	ldr	r3, [r7, #4]
    4174:	681a      	ldr	r2, [r3, #0]
    4176:	683b      	ldr	r3, [r7, #0]
    4178:	429a      	cmp	r2, r3
    417a:	d106      	bne.n	418a <list_delete_element+0x2c>
		list->head = list->head->next;
    417c:	687b      	ldr	r3, [r7, #4]
    417e:	681b      	ldr	r3, [r3, #0]
    4180:	681a      	ldr	r2, [r3, #0]
    4182:	687b      	ldr	r3, [r7, #4]
    4184:	601a      	str	r2, [r3, #0]
		return true;
    4186:	2301      	movs	r3, #1
    4188:	e018      	b.n	41bc <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    418a:	687b      	ldr	r3, [r7, #4]
    418c:	681b      	ldr	r3, [r3, #0]
    418e:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    4190:	e002      	b.n	4198 <list_delete_element+0x3a>
			it = it->next;
    4192:	68fb      	ldr	r3, [r7, #12]
    4194:	681b      	ldr	r3, [r3, #0]
    4196:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    4198:	68fb      	ldr	r3, [r7, #12]
    419a:	2b00      	cmp	r3, #0
    419c:	d004      	beq.n	41a8 <list_delete_element+0x4a>
    419e:	68fb      	ldr	r3, [r7, #12]
    41a0:	681a      	ldr	r2, [r3, #0]
    41a2:	683b      	ldr	r3, [r7, #0]
    41a4:	429a      	cmp	r2, r3
    41a6:	d1f4      	bne.n	4192 <list_delete_element+0x34>
		}
		if (it) {
    41a8:	68fb      	ldr	r3, [r7, #12]
    41aa:	2b00      	cmp	r3, #0
    41ac:	d005      	beq.n	41ba <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    41ae:	683b      	ldr	r3, [r7, #0]
    41b0:	681a      	ldr	r2, [r3, #0]
    41b2:	68fb      	ldr	r3, [r7, #12]
    41b4:	601a      	str	r2, [r3, #0]
			return true;
    41b6:	2301      	movs	r3, #1
    41b8:	e000      	b.n	41bc <list_delete_element+0x5e>
		}
	}

	return false;
    41ba:	2300      	movs	r3, #0
}
    41bc:	4618      	mov	r0, r3
    41be:	3714      	adds	r7, #20
    41c0:	46bd      	mov	sp, r7
    41c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    41c6:	4770      	bx	lr

000041c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    41c8:	b480      	push	{r7}
    41ca:	b083      	sub	sp, #12
    41cc:	af00      	add	r7, sp, #0
    41ce:	4603      	mov	r3, r0
    41d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    41d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    41d6:	2b00      	cmp	r3, #0
    41d8:	db0b      	blt.n	41f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    41da:	4909      	ldr	r1, [pc, #36]	; (4200 <__NVIC_EnableIRQ+0x38>)
    41dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    41e0:	095b      	lsrs	r3, r3, #5
    41e2:	88fa      	ldrh	r2, [r7, #6]
    41e4:	f002 021f 	and.w	r2, r2, #31
    41e8:	2001      	movs	r0, #1
    41ea:	fa00 f202 	lsl.w	r2, r0, r2
    41ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    41f2:	bf00      	nop
    41f4:	370c      	adds	r7, #12
    41f6:	46bd      	mov	sp, r7
    41f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    41fc:	4770      	bx	lr
    41fe:	bf00      	nop
    4200:	e000e100 	.word	0xe000e100

00004204 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    4204:	b480      	push	{r7}
    4206:	b083      	sub	sp, #12
    4208:	af00      	add	r7, sp, #0
    420a:	4603      	mov	r3, r0
    420c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    420e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4212:	2b00      	cmp	r3, #0
    4214:	db10      	blt.n	4238 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4216:	490b      	ldr	r1, [pc, #44]	; (4244 <__NVIC_DisableIRQ+0x40>)
    4218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    421c:	095b      	lsrs	r3, r3, #5
    421e:	88fa      	ldrh	r2, [r7, #6]
    4220:	f002 021f 	and.w	r2, r2, #31
    4224:	2001      	movs	r0, #1
    4226:	fa00 f202 	lsl.w	r2, r0, r2
    422a:	3320      	adds	r3, #32
    422c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4230:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4234:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    4238:	bf00      	nop
    423a:	370c      	adds	r7, #12
    423c:	46bd      	mov	sp, r7
    423e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4242:	4770      	bx	lr
    4244:	e000e100 	.word	0xe000e100

00004248 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    4248:	b480      	push	{r7}
    424a:	b083      	sub	sp, #12
    424c:	af00      	add	r7, sp, #0
    424e:	4603      	mov	r3, r0
    4250:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4256:	2b00      	cmp	r3, #0
    4258:	db0c      	blt.n	4274 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    425a:	4909      	ldr	r1, [pc, #36]	; (4280 <__NVIC_ClearPendingIRQ+0x38>)
    425c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4260:	095b      	lsrs	r3, r3, #5
    4262:	88fa      	ldrh	r2, [r7, #6]
    4264:	f002 021f 	and.w	r2, r2, #31
    4268:	2001      	movs	r0, #1
    426a:	fa00 f202 	lsl.w	r2, r0, r2
    426e:	3360      	adds	r3, #96	; 0x60
    4270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4274:	bf00      	nop
    4276:	370c      	adds	r7, #12
    4278:	46bd      	mov	sp, r7
    427a:	f85d 7b04 	ldr.w	r7, [sp], #4
    427e:	4770      	bx	lr
    4280:	e000e100 	.word	0xe000e100

00004284 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    4284:	b480      	push	{r7}
    4286:	b083      	sub	sp, #12
    4288:	af00      	add	r7, sp, #0
    428a:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    428c:	687b      	ldr	r3, [r7, #4]
    428e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4290:	095b      	lsrs	r3, r3, #5
    4292:	f003 0301 	and.w	r3, r3, #1
    4296:	2b00      	cmp	r3, #0
    4298:	bf14      	ite	ne
    429a:	2301      	movne	r3, #1
    429c:	2300      	moveq	r3, #0
    429e:	b2db      	uxtb	r3, r3
}
    42a0:	4618      	mov	r0, r3
    42a2:	370c      	adds	r7, #12
    42a4:	46bd      	mov	sp, r7
    42a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    42aa:	4770      	bx	lr

000042ac <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    42ac:	b480      	push	{r7}
    42ae:	b083      	sub	sp, #12
    42b0:	af00      	add	r7, sp, #0
    42b2:	6078      	str	r0, [r7, #4]
    42b4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    42b6:	687b      	ldr	r3, [r7, #4]
    42b8:	683a      	ldr	r2, [r7, #0]
    42ba:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    42bc:	bf00      	nop
    42be:	370c      	adds	r7, #12
    42c0:	46bd      	mov	sp, r7
    42c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    42c6:	4770      	bx	lr

000042c8 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    42c8:	b480      	push	{r7}
    42ca:	b083      	sub	sp, #12
    42cc:	af00      	add	r7, sp, #0
    42ce:	6078      	str	r0, [r7, #4]
    42d0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    42d2:	687b      	ldr	r3, [r7, #4]
    42d4:	683a      	ldr	r2, [r7, #0]
    42d6:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    42d8:	bf00      	nop
    42da:	370c      	adds	r7, #12
    42dc:	46bd      	mov	sp, r7
    42de:	f85d 7b04 	ldr.w	r7, [sp], #4
    42e2:	4770      	bx	lr

000042e4 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    42e4:	b480      	push	{r7}
    42e6:	b083      	sub	sp, #12
    42e8:	af00      	add	r7, sp, #0
    42ea:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    42ec:	687b      	ldr	r3, [r7, #4]
    42ee:	699b      	ldr	r3, [r3, #24]
    42f0:	f043 0201 	orr.w	r2, r3, #1
    42f4:	687b      	ldr	r3, [r7, #4]
    42f6:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    42f8:	bf00      	nop
    42fa:	370c      	adds	r7, #12
    42fc:	46bd      	mov	sp, r7
    42fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4302:	4770      	bx	lr

00004304 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    4304:	b480      	push	{r7}
    4306:	b085      	sub	sp, #20
    4308:	af00      	add	r7, sp, #0
    430a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    430c:	687b      	ldr	r3, [r7, #4]
    430e:	699b      	ldr	r3, [r3, #24]
    4310:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    4312:	68fb      	ldr	r3, [r7, #12]
    4314:	f003 0301 	and.w	r3, r3, #1
    4318:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    431a:	68fb      	ldr	r3, [r7, #12]
    431c:	2b00      	cmp	r3, #0
    431e:	bf14      	ite	ne
    4320:	2301      	movne	r3, #1
    4322:	2300      	moveq	r3, #0
    4324:	b2db      	uxtb	r3, r3
}
    4326:	4618      	mov	r0, r3
    4328:	3714      	adds	r7, #20
    432a:	46bd      	mov	sp, r7
    432c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4330:	4770      	bx	lr

00004332 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    4332:	b480      	push	{r7}
    4334:	b083      	sub	sp, #12
    4336:	af00      	add	r7, sp, #0
    4338:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    433a:	687b      	ldr	r3, [r7, #4]
    433c:	699b      	ldr	r3, [r3, #24]
    433e:	f023 0201 	bic.w	r2, r3, #1
    4342:	687b      	ldr	r3, [r7, #4]
    4344:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4346:	bf00      	nop
    4348:	370c      	adds	r7, #12
    434a:	46bd      	mov	sp, r7
    434c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4350:	4770      	bx	lr

00004352 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    4352:	b480      	push	{r7}
    4354:	b083      	sub	sp, #12
    4356:	af00      	add	r7, sp, #0
    4358:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    435a:	687b      	ldr	r3, [r7, #4]
    435c:	699b      	ldr	r3, [r3, #24]
    435e:	f043 0202 	orr.w	r2, r3, #2
    4362:	687b      	ldr	r3, [r7, #4]
    4364:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4366:	bf00      	nop
    4368:	370c      	adds	r7, #12
    436a:	46bd      	mov	sp, r7
    436c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4370:	4770      	bx	lr

00004372 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    4372:	b480      	push	{r7}
    4374:	b083      	sub	sp, #12
    4376:	af00      	add	r7, sp, #0
    4378:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    437a:	687b      	ldr	r3, [r7, #4]
    437c:	699b      	ldr	r3, [r3, #24]
    437e:	f023 0202 	bic.w	r2, r3, #2
    4382:	687b      	ldr	r3, [r7, #4]
    4384:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4386:	bf00      	nop
    4388:	370c      	adds	r7, #12
    438a:	46bd      	mov	sp, r7
    438c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4390:	4770      	bx	lr

00004392 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    4392:	b480      	push	{r7}
    4394:	b083      	sub	sp, #12
    4396:	af00      	add	r7, sp, #0
    4398:	6078      	str	r0, [r7, #4]
    439a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    439c:	687b      	ldr	r3, [r7, #4]
    439e:	699a      	ldr	r2, [r3, #24]
    43a0:	683b      	ldr	r3, [r7, #0]
    43a2:	431a      	orrs	r2, r3
    43a4:	687b      	ldr	r3, [r7, #4]
    43a6:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    43a8:	bf00      	nop
    43aa:	370c      	adds	r7, #12
    43ac:	46bd      	mov	sp, r7
    43ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    43b2:	4770      	bx	lr

000043b4 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    43b4:	b480      	push	{r7}
    43b6:	b083      	sub	sp, #12
    43b8:	af00      	add	r7, sp, #0
    43ba:	6078      	str	r0, [r7, #4]
    43bc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    43be:	687b      	ldr	r3, [r7, #4]
    43c0:	683a      	ldr	r2, [r7, #0]
    43c2:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    43c4:	bf00      	nop
    43c6:	370c      	adds	r7, #12
    43c8:	46bd      	mov	sp, r7
    43ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    43ce:	4770      	bx	lr

000043d0 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    43d0:	b480      	push	{r7}
    43d2:	b083      	sub	sp, #12
    43d4:	af00      	add	r7, sp, #0
    43d6:	6078      	str	r0, [r7, #4]
    43d8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    43da:	687b      	ldr	r3, [r7, #4]
    43dc:	683a      	ldr	r2, [r7, #0]
    43de:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    43e0:	bf00      	nop
    43e2:	370c      	adds	r7, #12
    43e4:	46bd      	mov	sp, r7
    43e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    43ea:	4770      	bx	lr

000043ec <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    43ec:	b480      	push	{r7}
    43ee:	b083      	sub	sp, #12
    43f0:	af00      	add	r7, sp, #0
    43f2:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    43f4:	687b      	ldr	r3, [r7, #4]
    43f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    43f8:	4618      	mov	r0, r3
    43fa:	370c      	adds	r7, #12
    43fc:	46bd      	mov	sp, r7
    43fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4402:	4770      	bx	lr

00004404 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    4404:	b480      	push	{r7}
    4406:	b083      	sub	sp, #12
    4408:	af00      	add	r7, sp, #0
    440a:	6078      	str	r0, [r7, #4]
    440c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    440e:	687b      	ldr	r3, [r7, #4]
    4410:	683a      	ldr	r2, [r7, #0]
    4412:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    4414:	bf00      	nop
    4416:	370c      	adds	r7, #12
    4418:	46bd      	mov	sp, r7
    441a:	f85d 7b04 	ldr.w	r7, [sp], #4
    441e:	4770      	bx	lr

00004420 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    4420:	b480      	push	{r7}
    4422:	b083      	sub	sp, #12
    4424:	af00      	add	r7, sp, #0
    4426:	6078      	str	r0, [r7, #4]
    4428:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    442a:	687b      	ldr	r3, [r7, #4]
    442c:	683a      	ldr	r2, [r7, #0]
    442e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    4432:	bf00      	nop
    4434:	370c      	adds	r7, #12
    4436:	46bd      	mov	sp, r7
    4438:	f85d 7b04 	ldr.w	r7, [sp], #4
    443c:	4770      	bx	lr

0000443e <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    443e:	b480      	push	{r7}
    4440:	b083      	sub	sp, #12
    4442:	af00      	add	r7, sp, #0
    4444:	6078      	str	r0, [r7, #4]
    4446:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    4448:	687b      	ldr	r3, [r7, #4]
    444a:	683a      	ldr	r2, [r7, #0]
    444c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    4450:	bf00      	nop
    4452:	370c      	adds	r7, #12
    4454:	46bd      	mov	sp, r7
    4456:	f85d 7b04 	ldr.w	r7, [sp], #4
    445a:	4770      	bx	lr

0000445c <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    445c:	b480      	push	{r7}
    445e:	b083      	sub	sp, #12
    4460:	af00      	add	r7, sp, #0
    4462:	6078      	str	r0, [r7, #4]
    4464:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    4466:	687b      	ldr	r3, [r7, #4]
    4468:	683a      	ldr	r2, [r7, #0]
    446a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    446e:	bf00      	nop
    4470:	370c      	adds	r7, #12
    4472:	46bd      	mov	sp, r7
    4474:	f85d 7b04 	ldr.w	r7, [sp], #4
    4478:	4770      	bx	lr

0000447a <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    447a:	b480      	push	{r7}
    447c:	b083      	sub	sp, #12
    447e:	af00      	add	r7, sp, #0
    4480:	6078      	str	r0, [r7, #4]
    4482:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    4484:	687b      	ldr	r3, [r7, #4]
    4486:	683a      	ldr	r2, [r7, #0]
    4488:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    448c:	bf00      	nop
    448e:	370c      	adds	r7, #12
    4490:	46bd      	mov	sp, r7
    4492:	f85d 7b04 	ldr.w	r7, [sp], #4
    4496:	4770      	bx	lr

00004498 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    4498:	b480      	push	{r7}
    449a:	b083      	sub	sp, #12
    449c:	af00      	add	r7, sp, #0
    449e:	6078      	str	r0, [r7, #4]
    44a0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    44a2:	687b      	ldr	r3, [r7, #4]
    44a4:	683a      	ldr	r2, [r7, #0]
    44a6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    44aa:	bf00      	nop
    44ac:	370c      	adds	r7, #12
    44ae:	46bd      	mov	sp, r7
    44b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    44b4:	4770      	bx	lr

000044b6 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    44b6:	b480      	push	{r7}
    44b8:	b083      	sub	sp, #12
    44ba:	af00      	add	r7, sp, #0
    44bc:	6078      	str	r0, [r7, #4]
    44be:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    44c0:	687b      	ldr	r3, [r7, #4]
    44c2:	683a      	ldr	r2, [r7, #0]
    44c4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    44c8:	bf00      	nop
    44ca:	370c      	adds	r7, #12
    44cc:	46bd      	mov	sp, r7
    44ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    44d2:	4770      	bx	lr

000044d4 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    44d4:	b480      	push	{r7}
    44d6:	b083      	sub	sp, #12
    44d8:	af00      	add	r7, sp, #0
    44da:	6078      	str	r0, [r7, #4]
    44dc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    44de:	687b      	ldr	r3, [r7, #4]
    44e0:	683a      	ldr	r2, [r7, #0]
    44e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    44e6:	bf00      	nop
    44e8:	370c      	adds	r7, #12
    44ea:	46bd      	mov	sp, r7
    44ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    44f0:	4770      	bx	lr

000044f2 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    44f2:	b480      	push	{r7}
    44f4:	b083      	sub	sp, #12
    44f6:	af00      	add	r7, sp, #0
    44f8:	6078      	str	r0, [r7, #4]
    44fa:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    44fc:	687b      	ldr	r3, [r7, #4]
    44fe:	683a      	ldr	r2, [r7, #0]
    4500:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    4504:	bf00      	nop
    4506:	370c      	adds	r7, #12
    4508:	46bd      	mov	sp, r7
    450a:	f85d 7b04 	ldr.w	r7, [sp], #4
    450e:	4770      	bx	lr

00004510 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    4510:	b480      	push	{r7}
    4512:	b083      	sub	sp, #12
    4514:	af00      	add	r7, sp, #0
    4516:	6078      	str	r0, [r7, #4]
    4518:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    451a:	687b      	ldr	r3, [r7, #4]
    451c:	683a      	ldr	r2, [r7, #0]
    451e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4522:	bf00      	nop
    4524:	370c      	adds	r7, #12
    4526:	46bd      	mov	sp, r7
    4528:	f85d 7b04 	ldr.w	r7, [sp], #4
    452c:	4770      	bx	lr
	...

00004530 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    4530:	b580      	push	{r7, lr}
    4532:	b082      	sub	sp, #8
    4534:	af00      	add	r7, sp, #0
    4536:	6078      	str	r0, [r7, #4]
    4538:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    453a:	687b      	ldr	r3, [r7, #4]
    453c:	683a      	ldr	r2, [r7, #0]
    453e:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    4540:	687b      	ldr	r3, [r7, #4]
    4542:	681b      	ldr	r3, [r3, #0]
    4544:	4618      	mov	r0, r3
    4546:	4b55      	ldr	r3, [pc, #340]	; (469c <_can_async_init+0x16c>)
    4548:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    454a:	bf00      	nop
    454c:	687b      	ldr	r3, [r7, #4]
    454e:	681b      	ldr	r3, [r3, #0]
    4550:	4618      	mov	r0, r3
    4552:	4b53      	ldr	r3, [pc, #332]	; (46a0 <_can_async_init+0x170>)
    4554:	4798      	blx	r3
    4556:	4603      	mov	r3, r0
    4558:	f083 0301 	eor.w	r3, r3, #1
    455c:	b2db      	uxtb	r3, r3
    455e:	2b00      	cmp	r3, #0
    4560:	d1f4      	bne.n	454c <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    4562:	687b      	ldr	r3, [r7, #4]
    4564:	681b      	ldr	r3, [r3, #0]
    4566:	4618      	mov	r0, r3
    4568:	4b4e      	ldr	r3, [pc, #312]	; (46a4 <_can_async_init+0x174>)
    456a:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    456c:	683b      	ldr	r3, [r7, #0]
    456e:	4a4e      	ldr	r2, [pc, #312]	; (46a8 <_can_async_init+0x178>)
    4570:	4293      	cmp	r3, r2
    4572:	d17a      	bne.n	466a <_can_async_init+0x13a>
		_can1_dev    = dev;
    4574:	4a4d      	ldr	r2, [pc, #308]	; (46ac <_can_async_init+0x17c>)
    4576:	687b      	ldr	r3, [r7, #4]
    4578:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    457a:	687b      	ldr	r3, [r7, #4]
    457c:	4a4c      	ldr	r2, [pc, #304]	; (46b0 <_can_async_init+0x180>)
    457e:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    4580:	687b      	ldr	r3, [r7, #4]
    4582:	681b      	ldr	r3, [r3, #0]
    4584:	f44f 7140 	mov.w	r1, #768	; 0x300
    4588:	4618      	mov	r0, r3
    458a:	4b4a      	ldr	r3, [pc, #296]	; (46b4 <_can_async_init+0x184>)
    458c:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    458e:	687b      	ldr	r3, [r7, #4]
    4590:	681b      	ldr	r3, [r3, #0]
    4592:	2102      	movs	r1, #2
    4594:	4618      	mov	r0, r3
    4596:	4b48      	ldr	r3, [pc, #288]	; (46b8 <_can_async_init+0x188>)
    4598:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    459a:	687b      	ldr	r3, [r7, #4]
    459c:	681b      	ldr	r3, [r3, #0]
    459e:	4947      	ldr	r1, [pc, #284]	; (46bc <_can_async_init+0x18c>)
    45a0:	4618      	mov	r0, r3
    45a2:	4b47      	ldr	r3, [pc, #284]	; (46c0 <_can_async_init+0x190>)
    45a4:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    45a6:	687b      	ldr	r3, [r7, #4]
    45a8:	681b      	ldr	r3, [r3, #0]
    45aa:	4946      	ldr	r1, [pc, #280]	; (46c4 <_can_async_init+0x194>)
    45ac:	4618      	mov	r0, r3
    45ae:	4b46      	ldr	r3, [pc, #280]	; (46c8 <_can_async_init+0x198>)
    45b0:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    45b2:	687b      	ldr	r3, [r7, #4]
    45b4:	681a      	ldr	r2, [r3, #0]
    45b6:	4b45      	ldr	r3, [pc, #276]	; (46cc <_can_async_init+0x19c>)
    45b8:	b29b      	uxth	r3, r3
    45ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    45be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    45c2:	4619      	mov	r1, r3
    45c4:	4610      	mov	r0, r2
    45c6:	4b42      	ldr	r3, [pc, #264]	; (46d0 <_can_async_init+0x1a0>)
    45c8:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    45ca:	687b      	ldr	r3, [r7, #4]
    45cc:	681b      	ldr	r3, [r3, #0]
    45ce:	2107      	movs	r1, #7
    45d0:	4618      	mov	r0, r3
    45d2:	4b40      	ldr	r3, [pc, #256]	; (46d4 <_can_async_init+0x1a4>)
    45d4:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    45d6:	687b      	ldr	r3, [r7, #4]
    45d8:	681b      	ldr	r3, [r3, #0]
    45da:	2107      	movs	r1, #7
    45dc:	4618      	mov	r0, r3
    45de:	4b3e      	ldr	r3, [pc, #248]	; (46d8 <_can_async_init+0x1a8>)
    45e0:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    45e2:	687b      	ldr	r3, [r7, #4]
    45e4:	681a      	ldr	r2, [r3, #0]
    45e6:	4b3d      	ldr	r3, [pc, #244]	; (46dc <_can_async_init+0x1ac>)
    45e8:	b29b      	uxth	r3, r3
    45ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    45ee:	4619      	mov	r1, r3
    45f0:	4610      	mov	r0, r2
    45f2:	4b3b      	ldr	r3, [pc, #236]	; (46e0 <_can_async_init+0x1b0>)
    45f4:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    45f6:	687b      	ldr	r3, [r7, #4]
    45f8:	681a      	ldr	r2, [r3, #0]
    45fa:	4b3a      	ldr	r3, [pc, #232]	; (46e4 <_can_async_init+0x1b4>)
    45fc:	b29b      	uxth	r3, r3
    45fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4602:	4619      	mov	r1, r3
    4604:	4610      	mov	r0, r2
    4606:	4b38      	ldr	r3, [pc, #224]	; (46e8 <_can_async_init+0x1b8>)
    4608:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    460a:	687b      	ldr	r3, [r7, #4]
    460c:	681b      	ldr	r3, [r3, #0]
    460e:	2108      	movs	r1, #8
    4610:	4618      	mov	r0, r3
    4612:	4b36      	ldr	r3, [pc, #216]	; (46ec <_can_async_init+0x1bc>)
    4614:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    4616:	687b      	ldr	r3, [r7, #4]
    4618:	681a      	ldr	r2, [r3, #0]
    461a:	4b35      	ldr	r3, [pc, #212]	; (46f0 <_can_async_init+0x1c0>)
    461c:	b29b      	uxth	r3, r3
    461e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    4622:	4619      	mov	r1, r3
    4624:	4610      	mov	r0, r2
    4626:	4b33      	ldr	r3, [pc, #204]	; (46f4 <_can_async_init+0x1c4>)
    4628:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    462a:	687b      	ldr	r3, [r7, #4]
    462c:	681a      	ldr	r2, [r3, #0]
    462e:	4b32      	ldr	r3, [pc, #200]	; (46f8 <_can_async_init+0x1c8>)
    4630:	b29b      	uxth	r3, r3
    4632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4636:	4619      	mov	r1, r3
    4638:	4610      	mov	r0, r2
    463a:	4b30      	ldr	r3, [pc, #192]	; (46fc <_can_async_init+0x1cc>)
    463c:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    463e:	687b      	ldr	r3, [r7, #4]
    4640:	681b      	ldr	r3, [r3, #0]
    4642:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    4646:	4618      	mov	r0, r3
    4648:	4b2d      	ldr	r3, [pc, #180]	; (4700 <_can_async_init+0x1d0>)
    464a:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    464c:	204f      	movs	r0, #79	; 0x4f
    464e:	4b2d      	ldr	r3, [pc, #180]	; (4704 <_can_async_init+0x1d4>)
    4650:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    4652:	204f      	movs	r0, #79	; 0x4f
    4654:	4b2c      	ldr	r3, [pc, #176]	; (4708 <_can_async_init+0x1d8>)
    4656:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    4658:	204f      	movs	r0, #79	; 0x4f
    465a:	4b2c      	ldr	r3, [pc, #176]	; (470c <_can_async_init+0x1dc>)
    465c:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    465e:	687b      	ldr	r3, [r7, #4]
    4660:	681b      	ldr	r3, [r3, #0]
    4662:	2101      	movs	r1, #1
    4664:	4618      	mov	r0, r3
    4666:	4b2a      	ldr	r3, [pc, #168]	; (4710 <_can_async_init+0x1e0>)
    4668:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    466a:	687b      	ldr	r3, [r7, #4]
    466c:	681b      	ldr	r3, [r3, #0]
    466e:	4618      	mov	r0, r3
    4670:	4b28      	ldr	r3, [pc, #160]	; (4714 <_can_async_init+0x1e4>)
    4672:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    4674:	687b      	ldr	r3, [r7, #4]
    4676:	681b      	ldr	r3, [r3, #0]
    4678:	4618      	mov	r0, r3
    467a:	4b27      	ldr	r3, [pc, #156]	; (4718 <_can_async_init+0x1e8>)
    467c:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    467e:	bf00      	nop
    4680:	687b      	ldr	r3, [r7, #4]
    4682:	681b      	ldr	r3, [r3, #0]
    4684:	4618      	mov	r0, r3
    4686:	4b06      	ldr	r3, [pc, #24]	; (46a0 <_can_async_init+0x170>)
    4688:	4798      	blx	r3
    468a:	4603      	mov	r3, r0
    468c:	2b00      	cmp	r3, #0
    468e:	d1f7      	bne.n	4680 <_can_async_init+0x150>
	};

	return ERR_NONE;
    4690:	2300      	movs	r3, #0
}
    4692:	4618      	mov	r0, r3
    4694:	3708      	adds	r7, #8
    4696:	46bd      	mov	sp, r7
    4698:	bd80      	pop	{r7, pc}
    469a:	bf00      	nop
    469c:	000042e5 	.word	0x000042e5
    46a0:	00004305 	.word	0x00004305
    46a4:	00004353 	.word	0x00004353
    46a8:	42000400 	.word	0x42000400
    46ac:	20000bd8 	.word	0x20000bd8
    46b0:	20000004 	.word	0x20000004
    46b4:	00004393 	.word	0x00004393
    46b8:	000042ad 	.word	0x000042ad
    46bc:	00010c01 	.word	0x00010c01
    46c0:	000043b5 	.word	0x000043b5
    46c4:	00010c10 	.word	0x00010c10
    46c8:	000042c9 	.word	0x000042c9
    46cc:	20001978 	.word	0x20001978
    46d0:	00004499 	.word	0x00004499
    46d4:	000044b7 	.word	0x000044b7
    46d8:	000044f3 	.word	0x000044f3
    46dc:	20001930 	.word	0x20001930
    46e0:	000044d5 	.word	0x000044d5
    46e4:	20000b38 	.word	0x20000b38
    46e8:	00004511 	.word	0x00004511
    46ec:	00004421 	.word	0x00004421
    46f0:	20000b48 	.word	0x20000b48
    46f4:	0000443f 	.word	0x0000443f
    46f8:	20000bc8 	.word	0x20000bc8
    46fc:	0000445d 	.word	0x0000445d
    4700:	0000447b 	.word	0x0000447b
    4704:	00004205 	.word	0x00004205
    4708:	00004249 	.word	0x00004249
    470c:	000041c9 	.word	0x000041c9
    4710:	00004405 	.word	0x00004405
    4714:	00004373 	.word	0x00004373
    4718:	00004333 	.word	0x00004333

0000471c <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    471c:	b590      	push	{r4, r7, lr}
    471e:	b083      	sub	sp, #12
    4720:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    4722:	4b2c      	ldr	r3, [pc, #176]	; (47d4 <CAN1_Handler+0xb8>)
    4724:	681b      	ldr	r3, [r3, #0]
    4726:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    4728:	687b      	ldr	r3, [r7, #4]
    472a:	681b      	ldr	r3, [r3, #0]
    472c:	4618      	mov	r0, r3
    472e:	4b2a      	ldr	r3, [pc, #168]	; (47d8 <CAN1_Handler+0xbc>)
    4730:	4798      	blx	r3
    4732:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    4734:	683b      	ldr	r3, [r7, #0]
    4736:	f003 0301 	and.w	r3, r3, #1
    473a:	2b00      	cmp	r3, #0
    473c:	d003      	beq.n	4746 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    473e:	687b      	ldr	r3, [r7, #4]
    4740:	689b      	ldr	r3, [r3, #8]
    4742:	6878      	ldr	r0, [r7, #4]
    4744:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    4746:	683b      	ldr	r3, [r7, #0]
    4748:	f403 7300 	and.w	r3, r3, #512	; 0x200
    474c:	2b00      	cmp	r3, #0
    474e:	d003      	beq.n	4758 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    4750:	687b      	ldr	r3, [r7, #4]
    4752:	685b      	ldr	r3, [r3, #4]
    4754:	6878      	ldr	r0, [r7, #4]
    4756:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    4758:	683b      	ldr	r3, [r7, #0]
    475a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    475e:	2b00      	cmp	r3, #0
    4760:	d004      	beq.n	476c <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    4762:	687b      	ldr	r3, [r7, #4]
    4764:	68db      	ldr	r3, [r3, #12]
    4766:	2103      	movs	r1, #3
    4768:	6878      	ldr	r0, [r7, #4]
    476a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    476c:	683b      	ldr	r3, [r7, #0]
    476e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    4772:	2b00      	cmp	r3, #0
    4774:	d004      	beq.n	4780 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    4776:	687b      	ldr	r3, [r7, #4]
    4778:	68db      	ldr	r3, [r3, #12]
    477a:	2100      	movs	r1, #0
    477c:	6878      	ldr	r0, [r7, #4]
    477e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    4780:	683b      	ldr	r3, [r7, #0]
    4782:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    4786:	2b00      	cmp	r3, #0
    4788:	d00f      	beq.n	47aa <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    478a:	687b      	ldr	r3, [r7, #4]
    478c:	68dc      	ldr	r4, [r3, #12]
    478e:	687b      	ldr	r3, [r7, #4]
    4790:	681b      	ldr	r3, [r3, #0]
    4792:	4618      	mov	r0, r3
    4794:	4b11      	ldr	r3, [pc, #68]	; (47dc <CAN1_Handler+0xc0>)
    4796:	4798      	blx	r3
    4798:	4603      	mov	r3, r0
    479a:	2b00      	cmp	r3, #0
    479c:	d001      	beq.n	47a2 <CAN1_Handler+0x86>
    479e:	2302      	movs	r3, #2
    47a0:	e000      	b.n	47a4 <CAN1_Handler+0x88>
    47a2:	2301      	movs	r3, #1
    47a4:	4619      	mov	r1, r3
    47a6:	6878      	ldr	r0, [r7, #4]
    47a8:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    47aa:	683b      	ldr	r3, [r7, #0]
    47ac:	f003 0308 	and.w	r3, r3, #8
    47b0:	2b00      	cmp	r3, #0
    47b2:	d004      	beq.n	47be <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    47b4:	687b      	ldr	r3, [r7, #4]
    47b6:	68db      	ldr	r3, [r3, #12]
    47b8:	2104      	movs	r1, #4
    47ba:	6878      	ldr	r0, [r7, #4]
    47bc:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    47be:	687b      	ldr	r3, [r7, #4]
    47c0:	681b      	ldr	r3, [r3, #0]
    47c2:	6839      	ldr	r1, [r7, #0]
    47c4:	4618      	mov	r0, r3
    47c6:	4b06      	ldr	r3, [pc, #24]	; (47e0 <CAN1_Handler+0xc4>)
    47c8:	4798      	blx	r3
}
    47ca:	bf00      	nop
    47cc:	370c      	adds	r7, #12
    47ce:	46bd      	mov	sp, r7
    47d0:	bd90      	pop	{r4, r7, pc}
    47d2:	bf00      	nop
    47d4:	20000bd8 	.word	0x20000bd8
    47d8:	000043ed 	.word	0x000043ed
    47dc:	00004285 	.word	0x00004285
    47e0:	000043d1 	.word	0x000043d1

000047e4 <__NVIC_SetPendingIRQ>:
{
    47e4:	b480      	push	{r7}
    47e6:	b083      	sub	sp, #12
    47e8:	af00      	add	r7, sp, #0
    47ea:	4603      	mov	r3, r0
    47ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    47ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    47f2:	2b00      	cmp	r3, #0
    47f4:	db0c      	blt.n	4810 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    47f6:	4909      	ldr	r1, [pc, #36]	; (481c <__NVIC_SetPendingIRQ+0x38>)
    47f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    47fc:	095b      	lsrs	r3, r3, #5
    47fe:	88fa      	ldrh	r2, [r7, #6]
    4800:	f002 021f 	and.w	r2, r2, #31
    4804:	2001      	movs	r0, #1
    4806:	fa00 f202 	lsl.w	r2, r0, r2
    480a:	3340      	adds	r3, #64	; 0x40
    480c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4810:	bf00      	nop
    4812:	370c      	adds	r7, #12
    4814:	46bd      	mov	sp, r7
    4816:	f85d 7b04 	ldr.w	r7, [sp], #4
    481a:	4770      	bx	lr
    481c:	e000e100 	.word	0xe000e100

00004820 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    4820:	b580      	push	{r7, lr}
    4822:	b082      	sub	sp, #8
    4824:	af00      	add	r7, sp, #0
    4826:	4603      	mov	r3, r0
    4828:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    482a:	79fb      	ldrb	r3, [r7, #7]
    482c:	b21b      	sxth	r3, r3
    482e:	4618      	mov	r0, r3
    4830:	4b02      	ldr	r3, [pc, #8]	; (483c <_irq_set+0x1c>)
    4832:	4798      	blx	r3
}
    4834:	bf00      	nop
    4836:	3708      	adds	r7, #8
    4838:	46bd      	mov	sp, r7
    483a:	bd80      	pop	{r7, pc}
    483c:	000047e5 	.word	0x000047e5

00004840 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    4840:	b480      	push	{r7}
    4842:	b083      	sub	sp, #12
    4844:	af00      	add	r7, sp, #0
    4846:	4603      	mov	r3, r0
    4848:	6039      	str	r1, [r7, #0]
    484a:	80fb      	strh	r3, [r7, #6]
    484c:	4613      	mov	r3, r2
    484e:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4850:	797b      	ldrb	r3, [r7, #5]
    4852:	3b04      	subs	r3, #4
    4854:	2b05      	cmp	r3, #5
    4856:	d86b      	bhi.n	4930 <_get_cycles_for_us_internal+0xf0>
    4858:	a201      	add	r2, pc, #4	; (adr r2, 4860 <_get_cycles_for_us_internal+0x20>)
    485a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    485e:	bf00      	nop
    4860:	0000490f 	.word	0x0000490f
    4864:	000048ef 	.word	0x000048ef
    4868:	000048d1 	.word	0x000048d1
    486c:	000048b3 	.word	0x000048b3
    4870:	00004895 	.word	0x00004895
    4874:	00004879 	.word	0x00004879
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    4878:	88fb      	ldrh	r3, [r7, #6]
    487a:	683a      	ldr	r2, [r7, #0]
    487c:	4935      	ldr	r1, [pc, #212]	; (4954 <_get_cycles_for_us_internal+0x114>)
    487e:	fba1 1202 	umull	r1, r2, r1, r2
    4882:	0c92      	lsrs	r2, r2, #18
    4884:	fb02 f303 	mul.w	r3, r2, r3
    4888:	3302      	adds	r3, #2
    488a:	4a33      	ldr	r2, [pc, #204]	; (4958 <_get_cycles_for_us_internal+0x118>)
    488c:	fba2 2303 	umull	r2, r3, r2, r3
    4890:	085b      	lsrs	r3, r3, #1
    4892:	e059      	b.n	4948 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    4894:	88fb      	ldrh	r3, [r7, #6]
    4896:	683a      	ldr	r2, [r7, #0]
    4898:	0952      	lsrs	r2, r2, #5
    489a:	4930      	ldr	r1, [pc, #192]	; (495c <_get_cycles_for_us_internal+0x11c>)
    489c:	fba1 1202 	umull	r1, r2, r1, r2
    48a0:	09d2      	lsrs	r2, r2, #7
    48a2:	fb02 f303 	mul.w	r3, r2, r3
    48a6:	331d      	adds	r3, #29
    48a8:	4a2d      	ldr	r2, [pc, #180]	; (4960 <_get_cycles_for_us_internal+0x120>)
    48aa:	fba2 2303 	umull	r2, r3, r2, r3
    48ae:	091b      	lsrs	r3, r3, #4
    48b0:	e04a      	b.n	4948 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    48b2:	88fb      	ldrh	r3, [r7, #6]
    48b4:	683a      	ldr	r2, [r7, #0]
    48b6:	492b      	ldr	r1, [pc, #172]	; (4964 <_get_cycles_for_us_internal+0x124>)
    48b8:	fba1 1202 	umull	r1, r2, r1, r2
    48bc:	0b52      	lsrs	r2, r2, #13
    48be:	fb02 f303 	mul.w	r3, r2, r3
    48c2:	f203 132b 	addw	r3, r3, #299	; 0x12b
    48c6:	4a28      	ldr	r2, [pc, #160]	; (4968 <_get_cycles_for_us_internal+0x128>)
    48c8:	fba2 2303 	umull	r2, r3, r2, r3
    48cc:	095b      	lsrs	r3, r3, #5
    48ce:	e03b      	b.n	4948 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    48d0:	88fb      	ldrh	r3, [r7, #6]
    48d2:	683a      	ldr	r2, [r7, #0]
    48d4:	4925      	ldr	r1, [pc, #148]	; (496c <_get_cycles_for_us_internal+0x12c>)
    48d6:	fba1 1202 	umull	r1, r2, r1, r2
    48da:	0992      	lsrs	r2, r2, #6
    48dc:	fb02 f303 	mul.w	r3, r2, r3
    48e0:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    48e4:	4a22      	ldr	r2, [pc, #136]	; (4970 <_get_cycles_for_us_internal+0x130>)
    48e6:	fba2 2303 	umull	r2, r3, r2, r3
    48ea:	099b      	lsrs	r3, r3, #6
    48ec:	e02c      	b.n	4948 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    48ee:	88fb      	ldrh	r3, [r7, #6]
    48f0:	683a      	ldr	r2, [r7, #0]
    48f2:	4920      	ldr	r1, [pc, #128]	; (4974 <_get_cycles_for_us_internal+0x134>)
    48f4:	fba1 1202 	umull	r1, r2, r1, r2
    48f8:	0952      	lsrs	r2, r2, #5
    48fa:	fb02 f303 	mul.w	r3, r2, r3
    48fe:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    4902:	332f      	adds	r3, #47	; 0x2f
    4904:	4a1c      	ldr	r2, [pc, #112]	; (4978 <_get_cycles_for_us_internal+0x138>)
    4906:	fba2 2303 	umull	r2, r3, r2, r3
    490a:	0b5b      	lsrs	r3, r3, #13
    490c:	e01c      	b.n	4948 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    490e:	88fb      	ldrh	r3, [r7, #6]
    4910:	683a      	ldr	r2, [r7, #0]
    4912:	491a      	ldr	r1, [pc, #104]	; (497c <_get_cycles_for_us_internal+0x13c>)
    4914:	fba1 1202 	umull	r1, r2, r1, r2
    4918:	08d2      	lsrs	r2, r2, #3
    491a:	fb02 f303 	mul.w	r3, r2, r3
    491e:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    4922:	f203 33df 	addw	r3, r3, #991	; 0x3df
    4926:	4a16      	ldr	r2, [pc, #88]	; (4980 <_get_cycles_for_us_internal+0x140>)
    4928:	fba2 2303 	umull	r2, r3, r2, r3
    492c:	0c5b      	lsrs	r3, r3, #17
    492e:	e00b      	b.n	4948 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    4930:	88fb      	ldrh	r3, [r7, #6]
    4932:	683a      	ldr	r2, [r7, #0]
    4934:	fb02 f303 	mul.w	r3, r2, r3
    4938:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    493c:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    4940:	4a10      	ldr	r2, [pc, #64]	; (4984 <_get_cycles_for_us_internal+0x144>)
    4942:	fba2 2303 	umull	r2, r3, r2, r3
    4946:	0c9b      	lsrs	r3, r3, #18
	}
}
    4948:	4618      	mov	r0, r3
    494a:	370c      	adds	r7, #12
    494c:	46bd      	mov	sp, r7
    494e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4952:	4770      	bx	lr
    4954:	431bde83 	.word	0x431bde83
    4958:	aaaaaaab 	.word	0xaaaaaaab
    495c:	0a7c5ac5 	.word	0x0a7c5ac5
    4960:	88888889 	.word	0x88888889
    4964:	d1b71759 	.word	0xd1b71759
    4968:	1b4e81b5 	.word	0x1b4e81b5
    496c:	10624dd3 	.word	0x10624dd3
    4970:	057619f1 	.word	0x057619f1
    4974:	51eb851f 	.word	0x51eb851f
    4978:	45e7b273 	.word	0x45e7b273
    497c:	cccccccd 	.word	0xcccccccd
    4980:	6fd91d85 	.word	0x6fd91d85
    4984:	165e9f81 	.word	0x165e9f81

00004988 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    4988:	b580      	push	{r7, lr}
    498a:	b082      	sub	sp, #8
    498c:	af00      	add	r7, sp, #0
    498e:	4603      	mov	r3, r0
    4990:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4992:	88fb      	ldrh	r3, [r7, #6]
    4994:	2209      	movs	r2, #9
    4996:	4904      	ldr	r1, [pc, #16]	; (49a8 <_get_cycles_for_us+0x20>)
    4998:	4618      	mov	r0, r3
    499a:	4b04      	ldr	r3, [pc, #16]	; (49ac <_get_cycles_for_us+0x24>)
    499c:	4798      	blx	r3
    499e:	4603      	mov	r3, r0
}
    49a0:	4618      	mov	r0, r3
    49a2:	3708      	adds	r7, #8
    49a4:	46bd      	mov	sp, r7
    49a6:	bd80      	pop	{r7, pc}
    49a8:	07270e00 	.word	0x07270e00
    49ac:	00004841 	.word	0x00004841

000049b0 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    49b0:	b480      	push	{r7}
    49b2:	b083      	sub	sp, #12
    49b4:	af00      	add	r7, sp, #0
    49b6:	4603      	mov	r3, r0
    49b8:	6039      	str	r1, [r7, #0]
    49ba:	80fb      	strh	r3, [r7, #6]
    49bc:	4613      	mov	r3, r2
    49be:	717b      	strb	r3, [r7, #5]
	switch (power) {
    49c0:	797b      	ldrb	r3, [r7, #5]
    49c2:	3b04      	subs	r3, #4
    49c4:	2b05      	cmp	r3, #5
    49c6:	d870      	bhi.n	4aaa <_get_cycles_for_ms_internal+0xfa>
    49c8:	a201      	add	r2, pc, #4	; (adr r2, 49d0 <_get_cycles_for_ms_internal+0x20>)
    49ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    49ce:	bf00      	nop
    49d0:	00004a8d 	.word	0x00004a8d
    49d4:	00004a71 	.word	0x00004a71
    49d8:	00004a55 	.word	0x00004a55
    49dc:	00004a31 	.word	0x00004a31
    49e0:	00004a0d 	.word	0x00004a0d
    49e4:	000049e9 	.word	0x000049e9
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    49e8:	88fb      	ldrh	r3, [r7, #6]
    49ea:	683a      	ldr	r2, [r7, #0]
    49ec:	4937      	ldr	r1, [pc, #220]	; (4acc <_get_cycles_for_ms_internal+0x11c>)
    49ee:	fba1 1202 	umull	r1, r2, r1, r2
    49f2:	0c92      	lsrs	r2, r2, #18
    49f4:	fb02 f303 	mul.w	r3, r2, r3
    49f8:	3302      	adds	r3, #2
    49fa:	4a35      	ldr	r2, [pc, #212]	; (4ad0 <_get_cycles_for_ms_internal+0x120>)
    49fc:	fba2 2303 	umull	r2, r3, r2, r3
    4a00:	085b      	lsrs	r3, r3, #1
    4a02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4a06:	fb02 f303 	mul.w	r3, r2, r3
    4a0a:	e058      	b.n	4abe <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    4a0c:	88fb      	ldrh	r3, [r7, #6]
    4a0e:	683a      	ldr	r2, [r7, #0]
    4a10:	0952      	lsrs	r2, r2, #5
    4a12:	4930      	ldr	r1, [pc, #192]	; (4ad4 <_get_cycles_for_ms_internal+0x124>)
    4a14:	fba1 1202 	umull	r1, r2, r1, r2
    4a18:	09d2      	lsrs	r2, r2, #7
    4a1a:	fb02 f303 	mul.w	r3, r2, r3
    4a1e:	3302      	adds	r3, #2
    4a20:	4a2b      	ldr	r2, [pc, #172]	; (4ad0 <_get_cycles_for_ms_internal+0x120>)
    4a22:	fba2 2303 	umull	r2, r3, r2, r3
    4a26:	085b      	lsrs	r3, r3, #1
    4a28:	2264      	movs	r2, #100	; 0x64
    4a2a:	fb02 f303 	mul.w	r3, r2, r3
    4a2e:	e046      	b.n	4abe <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    4a30:	88fb      	ldrh	r3, [r7, #6]
    4a32:	683a      	ldr	r2, [r7, #0]
    4a34:	4928      	ldr	r1, [pc, #160]	; (4ad8 <_get_cycles_for_ms_internal+0x128>)
    4a36:	fba1 1202 	umull	r1, r2, r1, r2
    4a3a:	0b52      	lsrs	r2, r2, #13
    4a3c:	fb02 f303 	mul.w	r3, r2, r3
    4a40:	3302      	adds	r3, #2
    4a42:	4a23      	ldr	r2, [pc, #140]	; (4ad0 <_get_cycles_for_ms_internal+0x120>)
    4a44:	fba2 2303 	umull	r2, r3, r2, r3
    4a48:	085a      	lsrs	r2, r3, #1
    4a4a:	4613      	mov	r3, r2
    4a4c:	009b      	lsls	r3, r3, #2
    4a4e:	4413      	add	r3, r2
    4a50:	005b      	lsls	r3, r3, #1
    4a52:	e034      	b.n	4abe <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    4a54:	88fb      	ldrh	r3, [r7, #6]
    4a56:	683a      	ldr	r2, [r7, #0]
    4a58:	4920      	ldr	r1, [pc, #128]	; (4adc <_get_cycles_for_ms_internal+0x12c>)
    4a5a:	fba1 1202 	umull	r1, r2, r1, r2
    4a5e:	0992      	lsrs	r2, r2, #6
    4a60:	fb02 f303 	mul.w	r3, r2, r3
    4a64:	3302      	adds	r3, #2
    4a66:	4a1a      	ldr	r2, [pc, #104]	; (4ad0 <_get_cycles_for_ms_internal+0x120>)
    4a68:	fba2 2303 	umull	r2, r3, r2, r3
    4a6c:	085b      	lsrs	r3, r3, #1
    4a6e:	e026      	b.n	4abe <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    4a70:	88fb      	ldrh	r3, [r7, #6]
    4a72:	683a      	ldr	r2, [r7, #0]
    4a74:	491a      	ldr	r1, [pc, #104]	; (4ae0 <_get_cycles_for_ms_internal+0x130>)
    4a76:	fba1 1202 	umull	r1, r2, r1, r2
    4a7a:	0952      	lsrs	r2, r2, #5
    4a7c:	fb02 f303 	mul.w	r3, r2, r3
    4a80:	331d      	adds	r3, #29
    4a82:	4a18      	ldr	r2, [pc, #96]	; (4ae4 <_get_cycles_for_ms_internal+0x134>)
    4a84:	fba2 2303 	umull	r2, r3, r2, r3
    4a88:	091b      	lsrs	r3, r3, #4
    4a8a:	e018      	b.n	4abe <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    4a8c:	88fb      	ldrh	r3, [r7, #6]
    4a8e:	683a      	ldr	r2, [r7, #0]
    4a90:	4915      	ldr	r1, [pc, #84]	; (4ae8 <_get_cycles_for_ms_internal+0x138>)
    4a92:	fba1 1202 	umull	r1, r2, r1, r2
    4a96:	08d2      	lsrs	r2, r2, #3
    4a98:	fb02 f303 	mul.w	r3, r2, r3
    4a9c:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4aa0:	4a12      	ldr	r2, [pc, #72]	; (4aec <_get_cycles_for_ms_internal+0x13c>)
    4aa2:	fba2 2303 	umull	r2, r3, r2, r3
    4aa6:	095b      	lsrs	r3, r3, #5
    4aa8:	e009      	b.n	4abe <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    4aaa:	88fb      	ldrh	r3, [r7, #6]
    4aac:	683a      	ldr	r2, [r7, #0]
    4aae:	fb02 f303 	mul.w	r3, r2, r3
    4ab2:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4ab6:	4a0e      	ldr	r2, [pc, #56]	; (4af0 <_get_cycles_for_ms_internal+0x140>)
    4ab8:	fba2 2303 	umull	r2, r3, r2, r3
    4abc:	099b      	lsrs	r3, r3, #6
	}
}
    4abe:	4618      	mov	r0, r3
    4ac0:	370c      	adds	r7, #12
    4ac2:	46bd      	mov	sp, r7
    4ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ac8:	4770      	bx	lr
    4aca:	bf00      	nop
    4acc:	431bde83 	.word	0x431bde83
    4ad0:	aaaaaaab 	.word	0xaaaaaaab
    4ad4:	0a7c5ac5 	.word	0x0a7c5ac5
    4ad8:	d1b71759 	.word	0xd1b71759
    4adc:	10624dd3 	.word	0x10624dd3
    4ae0:	51eb851f 	.word	0x51eb851f
    4ae4:	88888889 	.word	0x88888889
    4ae8:	cccccccd 	.word	0xcccccccd
    4aec:	1b4e81b5 	.word	0x1b4e81b5
    4af0:	057619f1 	.word	0x057619f1

00004af4 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4af4:	b580      	push	{r7, lr}
    4af6:	b082      	sub	sp, #8
    4af8:	af00      	add	r7, sp, #0
    4afa:	4603      	mov	r3, r0
    4afc:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4afe:	88fb      	ldrh	r3, [r7, #6]
    4b00:	2209      	movs	r2, #9
    4b02:	4904      	ldr	r1, [pc, #16]	; (4b14 <_get_cycles_for_ms+0x20>)
    4b04:	4618      	mov	r0, r3
    4b06:	4b04      	ldr	r3, [pc, #16]	; (4b18 <_get_cycles_for_ms+0x24>)
    4b08:	4798      	blx	r3
    4b0a:	4603      	mov	r3, r0
}
    4b0c:	4618      	mov	r0, r3
    4b0e:	3708      	adds	r7, #8
    4b10:	46bd      	mov	sp, r7
    4b12:	bd80      	pop	{r7, pc}
    4b14:	07270e00 	.word	0x07270e00
    4b18:	000049b1 	.word	0x000049b1
    4b1c:	00000000 	.word	0x00000000

00004b20 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4b20:	b480      	push	{r7}
    4b22:	b083      	sub	sp, #12
    4b24:	af00      	add	r7, sp, #0
    4b26:	6078      	str	r0, [r7, #4]
    4b28:	6039      	str	r1, [r7, #0]
    4b2a:	bf00      	nop
    4b2c:	f3af 8000 	nop.w

00004b30 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4b30:	3901      	subs	r1, #1
    4b32:	d8fd      	bhi.n	4b30 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    4b34:	bf00      	nop
    4b36:	370c      	adds	r7, #12
    4b38:	46bd      	mov	sp, r7
    4b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b3e:	4770      	bx	lr

00004b40 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4b40:	b480      	push	{r7}
    4b42:	b083      	sub	sp, #12
    4b44:	af00      	add	r7, sp, #0
    4b46:	6078      	str	r0, [r7, #4]
    4b48:	460b      	mov	r3, r1
    4b4a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    4b4c:	687b      	ldr	r3, [r7, #4]
    4b4e:	881b      	ldrh	r3, [r3, #0]
    4b50:	b29a      	uxth	r2, r3
    4b52:	887b      	ldrh	r3, [r7, #2]
    4b54:	021b      	lsls	r3, r3, #8
    4b56:	b29b      	uxth	r3, r3
    4b58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    4b5c:	b29b      	uxth	r3, r3
    4b5e:	4313      	orrs	r3, r2
    4b60:	b29a      	uxth	r2, r3
    4b62:	687b      	ldr	r3, [r7, #4]
    4b64:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    4b66:	bf00      	nop
    4b68:	370c      	adds	r7, #12
    4b6a:	46bd      	mov	sp, r7
    4b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b70:	4770      	bx	lr

00004b72 <hri_port_set_EVCTRL_reg>:
{
    4b72:	b480      	push	{r7}
    4b74:	b085      	sub	sp, #20
    4b76:	af00      	add	r7, sp, #0
    4b78:	60f8      	str	r0, [r7, #12]
    4b7a:	460b      	mov	r3, r1
    4b7c:	607a      	str	r2, [r7, #4]
    4b7e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4b80:	7afb      	ldrb	r3, [r7, #11]
    4b82:	7afa      	ldrb	r2, [r7, #11]
    4b84:	68f9      	ldr	r1, [r7, #12]
    4b86:	01d2      	lsls	r2, r2, #7
    4b88:	440a      	add	r2, r1
    4b8a:	322c      	adds	r2, #44	; 0x2c
    4b8c:	6811      	ldr	r1, [r2, #0]
    4b8e:	687a      	ldr	r2, [r7, #4]
    4b90:	430a      	orrs	r2, r1
    4b92:	68f9      	ldr	r1, [r7, #12]
    4b94:	01db      	lsls	r3, r3, #7
    4b96:	440b      	add	r3, r1
    4b98:	332c      	adds	r3, #44	; 0x2c
    4b9a:	601a      	str	r2, [r3, #0]
}
    4b9c:	bf00      	nop
    4b9e:	3714      	adds	r7, #20
    4ba0:	46bd      	mov	sp, r7
    4ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ba6:	4770      	bx	lr

00004ba8 <_port_event_init>:

static inline void _port_event_init()
{
    4ba8:	b580      	push	{r7, lr}
    4baa:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    4bac:	2200      	movs	r2, #0
    4bae:	2100      	movs	r1, #0
    4bb0:	480a      	ldr	r0, [pc, #40]	; (4bdc <_port_event_init+0x34>)
    4bb2:	4b0b      	ldr	r3, [pc, #44]	; (4be0 <_port_event_init+0x38>)
    4bb4:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    4bb6:	2200      	movs	r2, #0
    4bb8:	2101      	movs	r1, #1
    4bba:	4808      	ldr	r0, [pc, #32]	; (4bdc <_port_event_init+0x34>)
    4bbc:	4b08      	ldr	r3, [pc, #32]	; (4be0 <_port_event_init+0x38>)
    4bbe:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4bc0:	f64e 72ef 	movw	r2, #61423	; 0xefef
    4bc4:	2102      	movs	r1, #2
    4bc6:	4805      	ldr	r0, [pc, #20]	; (4bdc <_port_event_init+0x34>)
    4bc8:	4b05      	ldr	r3, [pc, #20]	; (4be0 <_port_event_init+0x38>)
    4bca:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    4bcc:	2200      	movs	r2, #0
    4bce:	2103      	movs	r1, #3
    4bd0:	4802      	ldr	r0, [pc, #8]	; (4bdc <_port_event_init+0x34>)
    4bd2:	4b03      	ldr	r3, [pc, #12]	; (4be0 <_port_event_init+0x38>)
    4bd4:	4798      	blx	r3
}
    4bd6:	bf00      	nop
    4bd8:	bd80      	pop	{r7, pc}
    4bda:	bf00      	nop
    4bdc:	41008000 	.word	0x41008000
    4be0:	00004b73 	.word	0x00004b73

00004be4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4be4:	b580      	push	{r7, lr}
    4be6:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4be8:	2104      	movs	r1, #4
    4bea:	480b      	ldr	r0, [pc, #44]	; (4c18 <_init_chip+0x34>)
    4bec:	4b0b      	ldr	r3, [pc, #44]	; (4c1c <_init_chip+0x38>)
    4bee:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4bf0:	4b0b      	ldr	r3, [pc, #44]	; (4c20 <_init_chip+0x3c>)
    4bf2:	4798      	blx	r3
	_oscctrl_init_sources();
    4bf4:	4b0b      	ldr	r3, [pc, #44]	; (4c24 <_init_chip+0x40>)
    4bf6:	4798      	blx	r3
	_mclk_init();
    4bf8:	4b0b      	ldr	r3, [pc, #44]	; (4c28 <_init_chip+0x44>)
    4bfa:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    4bfc:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4c00:	4b0a      	ldr	r3, [pc, #40]	; (4c2c <_init_chip+0x48>)
    4c02:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    4c04:	4b0a      	ldr	r3, [pc, #40]	; (4c30 <_init_chip+0x4c>)
    4c06:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4c08:	f640 30df 	movw	r0, #3039	; 0xbdf
    4c0c:	4b07      	ldr	r3, [pc, #28]	; (4c2c <_init_chip+0x48>)
    4c0e:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4c10:	4b08      	ldr	r3, [pc, #32]	; (4c34 <_init_chip+0x50>)
    4c12:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    4c14:	bf00      	nop
    4c16:	bd80      	pop	{r7, pc}
    4c18:	41004000 	.word	0x41004000
    4c1c:	00004b41 	.word	0x00004b41
    4c20:	000056f5 	.word	0x000056f5
    4c24:	00005bbd 	.word	0x00005bbd
    4c28:	00005615 	.word	0x00005615
    4c2c:	000054d5 	.word	0x000054d5
    4c30:	00005bfd 	.word	0x00005bfd
    4c34:	00004ba9 	.word	0x00004ba9

00004c38 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4c38:	b480      	push	{r7}
    4c3a:	b083      	sub	sp, #12
    4c3c:	af00      	add	r7, sp, #0
    4c3e:	6078      	str	r0, [r7, #4]
    4c40:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    4c42:	687b      	ldr	r3, [r7, #4]
    4c44:	683a      	ldr	r2, [r7, #0]
    4c46:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4c48:	2300      	movs	r3, #0
}
    4c4a:	4618      	mov	r0, r3
    4c4c:	370c      	adds	r7, #12
    4c4e:	46bd      	mov	sp, r7
    4c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c54:	4770      	bx	lr
	...

00004c58 <__NVIC_EnableIRQ>:
{
    4c58:	b480      	push	{r7}
    4c5a:	b083      	sub	sp, #12
    4c5c:	af00      	add	r7, sp, #0
    4c5e:	4603      	mov	r3, r0
    4c60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4c66:	2b00      	cmp	r3, #0
    4c68:	db0b      	blt.n	4c82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c6a:	4909      	ldr	r1, [pc, #36]	; (4c90 <__NVIC_EnableIRQ+0x38>)
    4c6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4c70:	095b      	lsrs	r3, r3, #5
    4c72:	88fa      	ldrh	r2, [r7, #6]
    4c74:	f002 021f 	and.w	r2, r2, #31
    4c78:	2001      	movs	r0, #1
    4c7a:	fa00 f202 	lsl.w	r2, r0, r2
    4c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4c82:	bf00      	nop
    4c84:	370c      	adds	r7, #12
    4c86:	46bd      	mov	sp, r7
    4c88:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c8c:	4770      	bx	lr
    4c8e:	bf00      	nop
    4c90:	e000e100 	.word	0xe000e100

00004c94 <__NVIC_DisableIRQ>:
{
    4c94:	b480      	push	{r7}
    4c96:	b083      	sub	sp, #12
    4c98:	af00      	add	r7, sp, #0
    4c9a:	4603      	mov	r3, r0
    4c9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4ca2:	2b00      	cmp	r3, #0
    4ca4:	db10      	blt.n	4cc8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4ca6:	490b      	ldr	r1, [pc, #44]	; (4cd4 <__NVIC_DisableIRQ+0x40>)
    4ca8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4cac:	095b      	lsrs	r3, r3, #5
    4cae:	88fa      	ldrh	r2, [r7, #6]
    4cb0:	f002 021f 	and.w	r2, r2, #31
    4cb4:	2001      	movs	r0, #1
    4cb6:	fa00 f202 	lsl.w	r2, r0, r2
    4cba:	3320      	adds	r3, #32
    4cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4cc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4cc4:	f3bf 8f6f 	isb	sy
}
    4cc8:	bf00      	nop
    4cca:	370c      	adds	r7, #12
    4ccc:	46bd      	mov	sp, r7
    4cce:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cd2:	4770      	bx	lr
    4cd4:	e000e100 	.word	0xe000e100

00004cd8 <__NVIC_ClearPendingIRQ>:
{
    4cd8:	b480      	push	{r7}
    4cda:	b083      	sub	sp, #12
    4cdc:	af00      	add	r7, sp, #0
    4cde:	4603      	mov	r3, r0
    4ce0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4ce6:	2b00      	cmp	r3, #0
    4ce8:	db0c      	blt.n	4d04 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4cea:	4909      	ldr	r1, [pc, #36]	; (4d10 <__NVIC_ClearPendingIRQ+0x38>)
    4cec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4cf0:	095b      	lsrs	r3, r3, #5
    4cf2:	88fa      	ldrh	r2, [r7, #6]
    4cf4:	f002 021f 	and.w	r2, r2, #31
    4cf8:	2001      	movs	r0, #1
    4cfa:	fa00 f202 	lsl.w	r2, r0, r2
    4cfe:	3360      	adds	r3, #96	; 0x60
    4d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4d04:	bf00      	nop
    4d06:	370c      	adds	r7, #12
    4d08:	46bd      	mov	sp, r7
    4d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d0e:	4770      	bx	lr
    4d10:	e000e100 	.word	0xe000e100

00004d14 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4d14:	b480      	push	{r7}
    4d16:	b083      	sub	sp, #12
    4d18:	af00      	add	r7, sp, #0
    4d1a:	6078      	str	r0, [r7, #4]
    4d1c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    4d1e:	bf00      	nop
    4d20:	687b      	ldr	r3, [r7, #4]
    4d22:	685a      	ldr	r2, [r3, #4]
    4d24:	683b      	ldr	r3, [r7, #0]
    4d26:	4013      	ands	r3, r2
    4d28:	2b00      	cmp	r3, #0
    4d2a:	d1f9      	bne.n	4d20 <hri_eic_wait_for_sync+0xc>
	};
}
    4d2c:	bf00      	nop
    4d2e:	370c      	adds	r7, #12
    4d30:	46bd      	mov	sp, r7
    4d32:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d36:	4770      	bx	lr

00004d38 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4d38:	b480      	push	{r7}
    4d3a:	b083      	sub	sp, #12
    4d3c:	af00      	add	r7, sp, #0
    4d3e:	6078      	str	r0, [r7, #4]
    4d40:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4d42:	687b      	ldr	r3, [r7, #4]
    4d44:	685a      	ldr	r2, [r3, #4]
    4d46:	683b      	ldr	r3, [r7, #0]
    4d48:	4013      	ands	r3, r2
    4d4a:	2b00      	cmp	r3, #0
    4d4c:	bf14      	ite	ne
    4d4e:	2301      	movne	r3, #1
    4d50:	2300      	moveq	r3, #0
    4d52:	b2db      	uxtb	r3, r3
}
    4d54:	4618      	mov	r0, r3
    4d56:	370c      	adds	r7, #12
    4d58:	46bd      	mov	sp, r7
    4d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d5e:	4770      	bx	lr

00004d60 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4d60:	b480      	push	{r7}
    4d62:	b083      	sub	sp, #12
    4d64:	af00      	add	r7, sp, #0
    4d66:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4d68:	687b      	ldr	r3, [r7, #4]
    4d6a:	695b      	ldr	r3, [r3, #20]
}
    4d6c:	4618      	mov	r0, r3
    4d6e:	370c      	adds	r7, #12
    4d70:	46bd      	mov	sp, r7
    4d72:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d76:	4770      	bx	lr

00004d78 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4d78:	b480      	push	{r7}
    4d7a:	b083      	sub	sp, #12
    4d7c:	af00      	add	r7, sp, #0
    4d7e:	6078      	str	r0, [r7, #4]
    4d80:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    4d82:	687b      	ldr	r3, [r7, #4]
    4d84:	683a      	ldr	r2, [r7, #0]
    4d86:	615a      	str	r2, [r3, #20]
}
    4d88:	bf00      	nop
    4d8a:	370c      	adds	r7, #12
    4d8c:	46bd      	mov	sp, r7
    4d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d92:	4770      	bx	lr

00004d94 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4d94:	b480      	push	{r7}
    4d96:	b083      	sub	sp, #12
    4d98:	af00      	add	r7, sp, #0
    4d9a:	6078      	str	r0, [r7, #4]
    4d9c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    4d9e:	687b      	ldr	r3, [r7, #4]
    4da0:	683a      	ldr	r2, [r7, #0]
    4da2:	611a      	str	r2, [r3, #16]
}
    4da4:	bf00      	nop
    4da6:	370c      	adds	r7, #12
    4da8:	46bd      	mov	sp, r7
    4daa:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dae:	4770      	bx	lr

00004db0 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4db0:	b480      	push	{r7}
    4db2:	b083      	sub	sp, #12
    4db4:	af00      	add	r7, sp, #0
    4db6:	6078      	str	r0, [r7, #4]
    4db8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    4dba:	687b      	ldr	r3, [r7, #4]
    4dbc:	683a      	ldr	r2, [r7, #0]
    4dbe:	60da      	str	r2, [r3, #12]
}
    4dc0:	bf00      	nop
    4dc2:	370c      	adds	r7, #12
    4dc4:	46bd      	mov	sp, r7
    4dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dca:	4770      	bx	lr

00004dcc <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4dcc:	b580      	push	{r7, lr}
    4dce:	b082      	sub	sp, #8
    4dd0:	af00      	add	r7, sp, #0
    4dd2:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4dd4:	687b      	ldr	r3, [r7, #4]
    4dd6:	781b      	ldrb	r3, [r3, #0]
    4dd8:	b2db      	uxtb	r3, r3
    4dda:	f043 0302 	orr.w	r3, r3, #2
    4dde:	b2da      	uxtb	r2, r3
    4de0:	687b      	ldr	r3, [r7, #4]
    4de2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4de4:	2103      	movs	r1, #3
    4de6:	6878      	ldr	r0, [r7, #4]
    4de8:	4b02      	ldr	r3, [pc, #8]	; (4df4 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    4dea:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4dec:	bf00      	nop
    4dee:	3708      	adds	r7, #8
    4df0:	46bd      	mov	sp, r7
    4df2:	bd80      	pop	{r7, pc}
    4df4:	00004d15 	.word	0x00004d15

00004df8 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4df8:	b580      	push	{r7, lr}
    4dfa:	b082      	sub	sp, #8
    4dfc:	af00      	add	r7, sp, #0
    4dfe:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4e00:	687b      	ldr	r3, [r7, #4]
    4e02:	781b      	ldrb	r3, [r3, #0]
    4e04:	b2db      	uxtb	r3, r3
    4e06:	f023 0302 	bic.w	r3, r3, #2
    4e0a:	b2da      	uxtb	r2, r3
    4e0c:	687b      	ldr	r3, [r7, #4]
    4e0e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4e10:	2103      	movs	r1, #3
    4e12:	6878      	ldr	r0, [r7, #4]
    4e14:	4b02      	ldr	r3, [pc, #8]	; (4e20 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4e16:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4e18:	bf00      	nop
    4e1a:	3708      	adds	r7, #8
    4e1c:	46bd      	mov	sp, r7
    4e1e:	bd80      	pop	{r7, pc}
    4e20:	00004d15 	.word	0x00004d15

00004e24 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4e24:	b580      	push	{r7, lr}
    4e26:	b084      	sub	sp, #16
    4e28:	af00      	add	r7, sp, #0
    4e2a:	6078      	str	r0, [r7, #4]
    4e2c:	460b      	mov	r3, r1
    4e2e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4e30:	687b      	ldr	r3, [r7, #4]
    4e32:	781b      	ldrb	r3, [r3, #0]
    4e34:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4e36:	7bfb      	ldrb	r3, [r7, #15]
    4e38:	f023 0310 	bic.w	r3, r3, #16
    4e3c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    4e3e:	78fb      	ldrb	r3, [r7, #3]
    4e40:	011b      	lsls	r3, r3, #4
    4e42:	b25a      	sxtb	r2, r3
    4e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4e48:	4313      	orrs	r3, r2
    4e4a:	b25b      	sxtb	r3, r3
    4e4c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    4e4e:	687b      	ldr	r3, [r7, #4]
    4e50:	7bfa      	ldrb	r2, [r7, #15]
    4e52:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4e54:	2103      	movs	r1, #3
    4e56:	6878      	ldr	r0, [r7, #4]
    4e58:	4b02      	ldr	r3, [pc, #8]	; (4e64 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4e5a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4e5c:	bf00      	nop
    4e5e:	3710      	adds	r7, #16
    4e60:	46bd      	mov	sp, r7
    4e62:	bd80      	pop	{r7, pc}
    4e64:	00004d15 	.word	0x00004d15

00004e68 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4e68:	b580      	push	{r7, lr}
    4e6a:	b084      	sub	sp, #16
    4e6c:	af00      	add	r7, sp, #0
    4e6e:	6078      	str	r0, [r7, #4]
    4e70:	460b      	mov	r3, r1
    4e72:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4e74:	2103      	movs	r1, #3
    4e76:	6878      	ldr	r0, [r7, #4]
    4e78:	4b06      	ldr	r3, [pc, #24]	; (4e94 <hri_eic_get_CTRLA_reg+0x2c>)
    4e7a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4e7c:	687b      	ldr	r3, [r7, #4]
    4e7e:	781b      	ldrb	r3, [r3, #0]
    4e80:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    4e82:	7bfa      	ldrb	r2, [r7, #15]
    4e84:	78fb      	ldrb	r3, [r7, #3]
    4e86:	4013      	ands	r3, r2
    4e88:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4e8a:	7bfb      	ldrb	r3, [r7, #15]
}
    4e8c:	4618      	mov	r0, r3
    4e8e:	3710      	adds	r7, #16
    4e90:	46bd      	mov	sp, r7
    4e92:	bd80      	pop	{r7, pc}
    4e94:	00004d15 	.word	0x00004d15

00004e98 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4e98:	b580      	push	{r7, lr}
    4e9a:	b082      	sub	sp, #8
    4e9c:	af00      	add	r7, sp, #0
    4e9e:	6078      	str	r0, [r7, #4]
    4ea0:	460b      	mov	r3, r1
    4ea2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4ea4:	687b      	ldr	r3, [r7, #4]
    4ea6:	78fa      	ldrb	r2, [r7, #3]
    4ea8:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4eaa:	2103      	movs	r1, #3
    4eac:	6878      	ldr	r0, [r7, #4]
    4eae:	4b03      	ldr	r3, [pc, #12]	; (4ebc <hri_eic_write_CTRLA_reg+0x24>)
    4eb0:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4eb2:	bf00      	nop
    4eb4:	3708      	adds	r7, #8
    4eb6:	46bd      	mov	sp, r7
    4eb8:	bd80      	pop	{r7, pc}
    4eba:	bf00      	nop
    4ebc:	00004d15 	.word	0x00004d15

00004ec0 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4ec0:	b480      	push	{r7}
    4ec2:	b083      	sub	sp, #12
    4ec4:	af00      	add	r7, sp, #0
    4ec6:	6078      	str	r0, [r7, #4]
    4ec8:	460b      	mov	r3, r1
    4eca:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4ecc:	687b      	ldr	r3, [r7, #4]
    4ece:	78fa      	ldrb	r2, [r7, #3]
    4ed0:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4ed2:	bf00      	nop
    4ed4:	370c      	adds	r7, #12
    4ed6:	46bd      	mov	sp, r7
    4ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4edc:	4770      	bx	lr

00004ede <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    4ede:	b480      	push	{r7}
    4ee0:	b083      	sub	sp, #12
    4ee2:	af00      	add	r7, sp, #0
    4ee4:	6078      	str	r0, [r7, #4]
    4ee6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4ee8:	687b      	ldr	r3, [r7, #4]
    4eea:	683a      	ldr	r2, [r7, #0]
    4eec:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4eee:	bf00      	nop
    4ef0:	370c      	adds	r7, #12
    4ef2:	46bd      	mov	sp, r7
    4ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ef8:	4770      	bx	lr

00004efa <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    4efa:	b480      	push	{r7}
    4efc:	b083      	sub	sp, #12
    4efe:	af00      	add	r7, sp, #0
    4f00:	6078      	str	r0, [r7, #4]
    4f02:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4f04:	687b      	ldr	r3, [r7, #4]
    4f06:	683a      	ldr	r2, [r7, #0]
    4f08:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4f0a:	bf00      	nop
    4f0c:	370c      	adds	r7, #12
    4f0e:	46bd      	mov	sp, r7
    4f10:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f14:	4770      	bx	lr

00004f16 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4f16:	b480      	push	{r7}
    4f18:	b085      	sub	sp, #20
    4f1a:	af00      	add	r7, sp, #0
    4f1c:	60f8      	str	r0, [r7, #12]
    4f1e:	460b      	mov	r3, r1
    4f20:	607a      	str	r2, [r7, #4]
    4f22:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4f24:	7afb      	ldrb	r3, [r7, #11]
    4f26:	68fa      	ldr	r2, [r7, #12]
    4f28:	3306      	adds	r3, #6
    4f2a:	009b      	lsls	r3, r3, #2
    4f2c:	4413      	add	r3, r2
    4f2e:	687a      	ldr	r2, [r7, #4]
    4f30:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4f32:	bf00      	nop
    4f34:	3714      	adds	r7, #20
    4f36:	46bd      	mov	sp, r7
    4f38:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f3c:	4770      	bx	lr

00004f3e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    4f3e:	b480      	push	{r7}
    4f40:	b083      	sub	sp, #12
    4f42:	af00      	add	r7, sp, #0
    4f44:	6078      	str	r0, [r7, #4]
    4f46:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4f48:	687b      	ldr	r3, [r7, #4]
    4f4a:	683a      	ldr	r2, [r7, #0]
    4f4c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    4f4e:	bf00      	nop
    4f50:	370c      	adds	r7, #12
    4f52:	46bd      	mov	sp, r7
    4f54:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f58:	4770      	bx	lr

00004f5a <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4f5a:	b480      	push	{r7}
    4f5c:	b083      	sub	sp, #12
    4f5e:	af00      	add	r7, sp, #0
    4f60:	6078      	str	r0, [r7, #4]
    4f62:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4f64:	687b      	ldr	r3, [r7, #4]
    4f66:	683a      	ldr	r2, [r7, #0]
    4f68:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4f6a:	bf00      	nop
    4f6c:	370c      	adds	r7, #12
    4f6e:	46bd      	mov	sp, r7
    4f70:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f74:	4770      	bx	lr
	...

00004f78 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4f78:	b580      	push	{r7, lr}
    4f7a:	b082      	sub	sp, #8
    4f7c:	af00      	add	r7, sp, #0
    4f7e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4f80:	2101      	movs	r1, #1
    4f82:	484f      	ldr	r0, [pc, #316]	; (50c0 <_ext_irq_init+0x148>)
    4f84:	4b4f      	ldr	r3, [pc, #316]	; (50c4 <_ext_irq_init+0x14c>)
    4f86:	4798      	blx	r3
    4f88:	4603      	mov	r3, r0
    4f8a:	f083 0301 	eor.w	r3, r3, #1
    4f8e:	b2db      	uxtb	r3, r3
    4f90:	2b00      	cmp	r3, #0
    4f92:	d011      	beq.n	4fb8 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4f94:	2102      	movs	r1, #2
    4f96:	484a      	ldr	r0, [pc, #296]	; (50c0 <_ext_irq_init+0x148>)
    4f98:	4b4b      	ldr	r3, [pc, #300]	; (50c8 <_ext_irq_init+0x150>)
    4f9a:	4798      	blx	r3
    4f9c:	4603      	mov	r3, r0
    4f9e:	2b00      	cmp	r3, #0
    4fa0:	d006      	beq.n	4fb0 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    4fa2:	4847      	ldr	r0, [pc, #284]	; (50c0 <_ext_irq_init+0x148>)
    4fa4:	4b49      	ldr	r3, [pc, #292]	; (50cc <_ext_irq_init+0x154>)
    4fa6:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4fa8:	2102      	movs	r1, #2
    4faa:	4845      	ldr	r0, [pc, #276]	; (50c0 <_ext_irq_init+0x148>)
    4fac:	4b48      	ldr	r3, [pc, #288]	; (50d0 <_ext_irq_init+0x158>)
    4fae:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4fb0:	2101      	movs	r1, #1
    4fb2:	4843      	ldr	r0, [pc, #268]	; (50c0 <_ext_irq_init+0x148>)
    4fb4:	4b47      	ldr	r3, [pc, #284]	; (50d4 <_ext_irq_init+0x15c>)
    4fb6:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4fb8:	2101      	movs	r1, #1
    4fba:	4841      	ldr	r0, [pc, #260]	; (50c0 <_ext_irq_init+0x148>)
    4fbc:	4b44      	ldr	r3, [pc, #272]	; (50d0 <_ext_irq_init+0x158>)
    4fbe:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4fc0:	2100      	movs	r1, #0
    4fc2:	483f      	ldr	r0, [pc, #252]	; (50c0 <_ext_irq_init+0x148>)
    4fc4:	4b44      	ldr	r3, [pc, #272]	; (50d8 <_ext_irq_init+0x160>)
    4fc6:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4fc8:	2100      	movs	r1, #0
    4fca:	483d      	ldr	r0, [pc, #244]	; (50c0 <_ext_irq_init+0x148>)
    4fcc:	4b43      	ldr	r3, [pc, #268]	; (50dc <_ext_irq_init+0x164>)
    4fce:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4fd0:	2100      	movs	r1, #0
    4fd2:	483b      	ldr	r0, [pc, #236]	; (50c0 <_ext_irq_init+0x148>)
    4fd4:	4b42      	ldr	r3, [pc, #264]	; (50e0 <_ext_irq_init+0x168>)
    4fd6:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4fd8:	f240 31bb 	movw	r1, #955	; 0x3bb
    4fdc:	4838      	ldr	r0, [pc, #224]	; (50c0 <_ext_irq_init+0x148>)
    4fde:	4b41      	ldr	r3, [pc, #260]	; (50e4 <_ext_irq_init+0x16c>)
    4fe0:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4fe2:	f240 313b 	movw	r1, #827	; 0x33b
    4fe6:	4836      	ldr	r0, [pc, #216]	; (50c0 <_ext_irq_init+0x148>)
    4fe8:	4b3f      	ldr	r3, [pc, #252]	; (50e8 <_ext_irq_init+0x170>)
    4fea:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    4fec:	2100      	movs	r1, #0
    4fee:	4834      	ldr	r0, [pc, #208]	; (50c0 <_ext_irq_init+0x148>)
    4ff0:	4b3e      	ldr	r3, [pc, #248]	; (50ec <_ext_irq_init+0x174>)
    4ff2:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4ff4:	4a3e      	ldr	r2, [pc, #248]	; (50f0 <_ext_irq_init+0x178>)
    4ff6:	2100      	movs	r1, #0
    4ff8:	4831      	ldr	r0, [pc, #196]	; (50c0 <_ext_irq_init+0x148>)
    4ffa:	4b3e      	ldr	r3, [pc, #248]	; (50f4 <_ext_irq_init+0x17c>)
    4ffc:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4ffe:	2211      	movs	r2, #17
    5000:	2101      	movs	r1, #1
    5002:	482f      	ldr	r0, [pc, #188]	; (50c0 <_ext_irq_init+0x148>)
    5004:	4b3b      	ldr	r3, [pc, #236]	; (50f4 <_ext_irq_init+0x17c>)
    5006:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    5008:	482d      	ldr	r0, [pc, #180]	; (50c0 <_ext_irq_init+0x148>)
    500a:	4b3b      	ldr	r3, [pc, #236]	; (50f8 <_ext_irq_init+0x180>)
    500c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    500e:	200c      	movs	r0, #12
    5010:	4b3a      	ldr	r3, [pc, #232]	; (50fc <_ext_irq_init+0x184>)
    5012:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    5014:	200c      	movs	r0, #12
    5016:	4b3a      	ldr	r3, [pc, #232]	; (5100 <_ext_irq_init+0x188>)
    5018:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    501a:	200c      	movs	r0, #12
    501c:	4b39      	ldr	r3, [pc, #228]	; (5104 <_ext_irq_init+0x18c>)
    501e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    5020:	200d      	movs	r0, #13
    5022:	4b36      	ldr	r3, [pc, #216]	; (50fc <_ext_irq_init+0x184>)
    5024:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    5026:	200d      	movs	r0, #13
    5028:	4b35      	ldr	r3, [pc, #212]	; (5100 <_ext_irq_init+0x188>)
    502a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    502c:	200d      	movs	r0, #13
    502e:	4b35      	ldr	r3, [pc, #212]	; (5104 <_ext_irq_init+0x18c>)
    5030:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    5032:	200f      	movs	r0, #15
    5034:	4b31      	ldr	r3, [pc, #196]	; (50fc <_ext_irq_init+0x184>)
    5036:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    5038:	200f      	movs	r0, #15
    503a:	4b31      	ldr	r3, [pc, #196]	; (5100 <_ext_irq_init+0x188>)
    503c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    503e:	200f      	movs	r0, #15
    5040:	4b30      	ldr	r3, [pc, #192]	; (5104 <_ext_irq_init+0x18c>)
    5042:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    5044:	2010      	movs	r0, #16
    5046:	4b2d      	ldr	r3, [pc, #180]	; (50fc <_ext_irq_init+0x184>)
    5048:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    504a:	2010      	movs	r0, #16
    504c:	4b2c      	ldr	r3, [pc, #176]	; (5100 <_ext_irq_init+0x188>)
    504e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    5050:	2010      	movs	r0, #16
    5052:	4b2c      	ldr	r3, [pc, #176]	; (5104 <_ext_irq_init+0x18c>)
    5054:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    5056:	2011      	movs	r0, #17
    5058:	4b28      	ldr	r3, [pc, #160]	; (50fc <_ext_irq_init+0x184>)
    505a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    505c:	2011      	movs	r0, #17
    505e:	4b28      	ldr	r3, [pc, #160]	; (5100 <_ext_irq_init+0x188>)
    5060:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    5062:	2011      	movs	r0, #17
    5064:	4b27      	ldr	r3, [pc, #156]	; (5104 <_ext_irq_init+0x18c>)
    5066:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    5068:	2012      	movs	r0, #18
    506a:	4b24      	ldr	r3, [pc, #144]	; (50fc <_ext_irq_init+0x184>)
    506c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    506e:	2012      	movs	r0, #18
    5070:	4b23      	ldr	r3, [pc, #140]	; (5100 <_ext_irq_init+0x188>)
    5072:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    5074:	2012      	movs	r0, #18
    5076:	4b23      	ldr	r3, [pc, #140]	; (5104 <_ext_irq_init+0x18c>)
    5078:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    507a:	2013      	movs	r0, #19
    507c:	4b1f      	ldr	r3, [pc, #124]	; (50fc <_ext_irq_init+0x184>)
    507e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    5080:	2013      	movs	r0, #19
    5082:	4b1f      	ldr	r3, [pc, #124]	; (5100 <_ext_irq_init+0x188>)
    5084:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    5086:	2013      	movs	r0, #19
    5088:	4b1e      	ldr	r3, [pc, #120]	; (5104 <_ext_irq_init+0x18c>)
    508a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    508c:	2014      	movs	r0, #20
    508e:	4b1b      	ldr	r3, [pc, #108]	; (50fc <_ext_irq_init+0x184>)
    5090:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    5092:	2014      	movs	r0, #20
    5094:	4b1a      	ldr	r3, [pc, #104]	; (5100 <_ext_irq_init+0x188>)
    5096:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    5098:	2014      	movs	r0, #20
    509a:	4b1a      	ldr	r3, [pc, #104]	; (5104 <_ext_irq_init+0x18c>)
    509c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    509e:	2015      	movs	r0, #21
    50a0:	4b16      	ldr	r3, [pc, #88]	; (50fc <_ext_irq_init+0x184>)
    50a2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    50a4:	2015      	movs	r0, #21
    50a6:	4b16      	ldr	r3, [pc, #88]	; (5100 <_ext_irq_init+0x188>)
    50a8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    50aa:	2015      	movs	r0, #21
    50ac:	4b15      	ldr	r3, [pc, #84]	; (5104 <_ext_irq_init+0x18c>)
    50ae:	4798      	blx	r3

	callback = cb;
    50b0:	4a15      	ldr	r2, [pc, #84]	; (5108 <_ext_irq_init+0x190>)
    50b2:	687b      	ldr	r3, [r7, #4]
    50b4:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    50b6:	2300      	movs	r3, #0
}
    50b8:	4618      	mov	r0, r3
    50ba:	3708      	adds	r7, #8
    50bc:	46bd      	mov	sp, r7
    50be:	bd80      	pop	{r7, pc}
    50c0:	40002800 	.word	0x40002800
    50c4:	00004d39 	.word	0x00004d39
    50c8:	00004e69 	.word	0x00004e69
    50cc:	00004df9 	.word	0x00004df9
    50d0:	00004d15 	.word	0x00004d15
    50d4:	00004e99 	.word	0x00004e99
    50d8:	00004e25 	.word	0x00004e25
    50dc:	00004ec1 	.word	0x00004ec1
    50e0:	00004edf 	.word	0x00004edf
    50e4:	00004efb 	.word	0x00004efb
    50e8:	00004f3f 	.word	0x00004f3f
    50ec:	00004f5b 	.word	0x00004f5b
    50f0:	90999013 	.word	0x90999013
    50f4:	00004f17 	.word	0x00004f17
    50f8:	00004dcd 	.word	0x00004dcd
    50fc:	00004c95 	.word	0x00004c95
    5100:	00004cd9 	.word	0x00004cd9
    5104:	00004c59 	.word	0x00004c59
    5108:	20000bdc 	.word	0x20000bdc

0000510c <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    510c:	b580      	push	{r7, lr}
    510e:	b084      	sub	sp, #16
    5110:	af00      	add	r7, sp, #0
    5112:	6078      	str	r0, [r7, #4]
    5114:	460b      	mov	r3, r1
    5116:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    5118:	23ff      	movs	r3, #255	; 0xff
    511a:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    511c:	2300      	movs	r3, #0
    511e:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    5120:	e010      	b.n	5144 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    5122:	7bbb      	ldrb	r3, [r7, #14]
    5124:	4a1c      	ldr	r2, [pc, #112]	; (5198 <_ext_irq_enable+0x8c>)
    5126:	00db      	lsls	r3, r3, #3
    5128:	4413      	add	r3, r2
    512a:	685a      	ldr	r2, [r3, #4]
    512c:	687b      	ldr	r3, [r7, #4]
    512e:	429a      	cmp	r2, r3
    5130:	d105      	bne.n	513e <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    5132:	7bbb      	ldrb	r3, [r7, #14]
    5134:	4a18      	ldr	r2, [pc, #96]	; (5198 <_ext_irq_enable+0x8c>)
    5136:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    513a:	73fb      	strb	r3, [r7, #15]
			break;
    513c:	e005      	b.n	514a <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    513e:	7bbb      	ldrb	r3, [r7, #14]
    5140:	3301      	adds	r3, #1
    5142:	73bb      	strb	r3, [r7, #14]
    5144:	7bbb      	ldrb	r3, [r7, #14]
    5146:	2b08      	cmp	r3, #8
    5148:	d9eb      	bls.n	5122 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    514a:	7bfb      	ldrb	r3, [r7, #15]
    514c:	2bff      	cmp	r3, #255	; 0xff
    514e:	d102      	bne.n	5156 <_ext_irq_enable+0x4a>
		return -1;
    5150:	f04f 33ff 	mov.w	r3, #4294967295
    5154:	e01c      	b.n	5190 <_ext_irq_enable+0x84>
	}

	if (enable) {
    5156:	78fb      	ldrb	r3, [r7, #3]
    5158:	2b00      	cmp	r3, #0
    515a:	d008      	beq.n	516e <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    515c:	7bfb      	ldrb	r3, [r7, #15]
    515e:	2201      	movs	r2, #1
    5160:	fa02 f303 	lsl.w	r3, r2, r3
    5164:	4619      	mov	r1, r3
    5166:	480d      	ldr	r0, [pc, #52]	; (519c <_ext_irq_enable+0x90>)
    5168:	4b0d      	ldr	r3, [pc, #52]	; (51a0 <_ext_irq_enable+0x94>)
    516a:	4798      	blx	r3
    516c:	e00f      	b.n	518e <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    516e:	7bfb      	ldrb	r3, [r7, #15]
    5170:	2201      	movs	r2, #1
    5172:	fa02 f303 	lsl.w	r3, r2, r3
    5176:	4619      	mov	r1, r3
    5178:	4808      	ldr	r0, [pc, #32]	; (519c <_ext_irq_enable+0x90>)
    517a:	4b0a      	ldr	r3, [pc, #40]	; (51a4 <_ext_irq_enable+0x98>)
    517c:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    517e:	7bfb      	ldrb	r3, [r7, #15]
    5180:	2201      	movs	r2, #1
    5182:	fa02 f303 	lsl.w	r3, r2, r3
    5186:	4619      	mov	r1, r3
    5188:	4804      	ldr	r0, [pc, #16]	; (519c <_ext_irq_enable+0x90>)
    518a:	4b07      	ldr	r3, [pc, #28]	; (51a8 <_ext_irq_enable+0x9c>)
    518c:	4798      	blx	r3
	}

	return ERR_NONE;
    518e:	2300      	movs	r3, #0
}
    5190:	4618      	mov	r0, r3
    5192:	3710      	adds	r7, #16
    5194:	46bd      	mov	sp, r7
    5196:	bd80      	pop	{r7, pc}
    5198:	000104cc 	.word	0x000104cc
    519c:	40002800 	.word	0x40002800
    51a0:	00004d95 	.word	0x00004d95
    51a4:	00004db1 	.word	0x00004db1
    51a8:	00004d79 	.word	0x00004d79

000051ac <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    51ac:	b580      	push	{r7, lr}
    51ae:	b084      	sub	sp, #16
    51b0:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    51b2:	4841      	ldr	r0, [pc, #260]	; (52b8 <_ext_irq_handler+0x10c>)
    51b4:	4b41      	ldr	r3, [pc, #260]	; (52bc <_ext_irq_handler+0x110>)
    51b6:	4798      	blx	r3
    51b8:	4603      	mov	r3, r0
    51ba:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    51bc:	f04f 33ff 	mov.w	r3, #4294967295
    51c0:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    51c2:	683b      	ldr	r3, [r7, #0]
    51c4:	4619      	mov	r1, r3
    51c6:	483c      	ldr	r0, [pc, #240]	; (52b8 <_ext_irq_handler+0x10c>)
    51c8:	4b3d      	ldr	r3, [pc, #244]	; (52c0 <_ext_irq_handler+0x114>)
    51ca:	4798      	blx	r3

	ASSERT(callback);
    51cc:	4b3d      	ldr	r3, [pc, #244]	; (52c4 <_ext_irq_handler+0x118>)
    51ce:	681b      	ldr	r3, [r3, #0]
    51d0:	2b00      	cmp	r3, #0
    51d2:	bf14      	ite	ne
    51d4:	2301      	movne	r3, #1
    51d6:	2300      	moveq	r3, #0
    51d8:	b2db      	uxtb	r3, r3
    51da:	f44f 7284 	mov.w	r2, #264	; 0x108
    51de:	493a      	ldr	r1, [pc, #232]	; (52c8 <_ext_irq_handler+0x11c>)
    51e0:	4618      	mov	r0, r3
    51e2:	4b3a      	ldr	r3, [pc, #232]	; (52cc <_ext_irq_handler+0x120>)
    51e4:	4798      	blx	r3

	while (flags) {
    51e6:	e060      	b.n	52aa <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    51e8:	683b      	ldr	r3, [r7, #0]
    51ea:	4618      	mov	r0, r3
    51ec:	4b38      	ldr	r3, [pc, #224]	; (52d0 <_ext_irq_handler+0x124>)
    51ee:	4798      	blx	r3
    51f0:	4603      	mov	r3, r0
    51f2:	b2db      	uxtb	r3, r3
    51f4:	3b01      	subs	r3, #1
    51f6:	b2db      	uxtb	r3, r3
    51f8:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    51fa:	e047      	b.n	528c <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    51fc:	2300      	movs	r3, #0
    51fe:	71fb      	strb	r3, [r7, #7]
    5200:	2309      	movs	r3, #9
    5202:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    5204:	e024      	b.n	5250 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    5206:	79ba      	ldrb	r2, [r7, #6]
    5208:	79fb      	ldrb	r3, [r7, #7]
    520a:	4413      	add	r3, r2
    520c:	105b      	asrs	r3, r3, #1
    520e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    5210:	797b      	ldrb	r3, [r7, #5]
    5212:	4a30      	ldr	r2, [pc, #192]	; (52d4 <_ext_irq_handler+0x128>)
    5214:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5218:	461a      	mov	r2, r3
    521a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    521e:	429a      	cmp	r2, r3
    5220:	d106      	bne.n	5230 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    5222:	797b      	ldrb	r3, [r7, #5]
    5224:	4a2b      	ldr	r2, [pc, #172]	; (52d4 <_ext_irq_handler+0x128>)
    5226:	00db      	lsls	r3, r3, #3
    5228:	4413      	add	r3, r2
    522a:	685b      	ldr	r3, [r3, #4]
    522c:	60bb      	str	r3, [r7, #8]
					break;
    522e:	e013      	b.n	5258 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    5230:	797b      	ldrb	r3, [r7, #5]
    5232:	4a28      	ldr	r2, [pc, #160]	; (52d4 <_ext_irq_handler+0x128>)
    5234:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5238:	461a      	mov	r2, r3
    523a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    523e:	429a      	cmp	r2, r3
    5240:	da03      	bge.n	524a <_ext_irq_handler+0x9e>
					lower = middle + 1;
    5242:	797b      	ldrb	r3, [r7, #5]
    5244:	3301      	adds	r3, #1
    5246:	71fb      	strb	r3, [r7, #7]
    5248:	e002      	b.n	5250 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    524a:	797b      	ldrb	r3, [r7, #5]
    524c:	3b01      	subs	r3, #1
    524e:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    5250:	79ba      	ldrb	r2, [r7, #6]
    5252:	79fb      	ldrb	r3, [r7, #7]
    5254:	429a      	cmp	r2, r3
    5256:	d2d6      	bcs.n	5206 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    5258:	68bb      	ldr	r3, [r7, #8]
    525a:	f1b3 3fff 	cmp.w	r3, #4294967295
    525e:	d003      	beq.n	5268 <_ext_irq_handler+0xbc>
				callback(pin);
    5260:	4b18      	ldr	r3, [pc, #96]	; (52c4 <_ext_irq_handler+0x118>)
    5262:	681b      	ldr	r3, [r3, #0]
    5264:	68b8      	ldr	r0, [r7, #8]
    5266:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    5268:	f997 300f 	ldrsb.w	r3, [r7, #15]
    526c:	2201      	movs	r2, #1
    526e:	fa02 f303 	lsl.w	r3, r2, r3
    5272:	43da      	mvns	r2, r3
    5274:	683b      	ldr	r3, [r7, #0]
    5276:	4013      	ands	r3, r2
    5278:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    527a:	683b      	ldr	r3, [r7, #0]
    527c:	4618      	mov	r0, r3
    527e:	4b14      	ldr	r3, [pc, #80]	; (52d0 <_ext_irq_handler+0x124>)
    5280:	4798      	blx	r3
    5282:	4603      	mov	r3, r0
    5284:	b2db      	uxtb	r3, r3
    5286:	3b01      	subs	r3, #1
    5288:	b2db      	uxtb	r3, r3
    528a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    528c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5290:	f1b3 3fff 	cmp.w	r3, #4294967295
    5294:	d1b2      	bne.n	51fc <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    5296:	4808      	ldr	r0, [pc, #32]	; (52b8 <_ext_irq_handler+0x10c>)
    5298:	4b08      	ldr	r3, [pc, #32]	; (52bc <_ext_irq_handler+0x110>)
    529a:	4798      	blx	r3
    529c:	4603      	mov	r3, r0
    529e:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    52a0:	683b      	ldr	r3, [r7, #0]
    52a2:	4619      	mov	r1, r3
    52a4:	4804      	ldr	r0, [pc, #16]	; (52b8 <_ext_irq_handler+0x10c>)
    52a6:	4b06      	ldr	r3, [pc, #24]	; (52c0 <_ext_irq_handler+0x114>)
    52a8:	4798      	blx	r3
	while (flags) {
    52aa:	683b      	ldr	r3, [r7, #0]
    52ac:	2b00      	cmp	r3, #0
    52ae:	d19b      	bne.n	51e8 <_ext_irq_handler+0x3c>
	}
}
    52b0:	bf00      	nop
    52b2:	3710      	adds	r7, #16
    52b4:	46bd      	mov	sp, r7
    52b6:	bd80      	pop	{r7, pc}
    52b8:	40002800 	.word	0x40002800
    52bc:	00004d61 	.word	0x00004d61
    52c0:	00004d79 	.word	0x00004d79
    52c4:	20000bdc 	.word	0x20000bdc
    52c8:	00010514 	.word	0x00010514
    52cc:	00003fd5 	.word	0x00003fd5
    52d0:	00010021 	.word	0x00010021
    52d4:	000104cc 	.word	0x000104cc

000052d8 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    52d8:	b580      	push	{r7, lr}
    52da:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    52dc:	4b01      	ldr	r3, [pc, #4]	; (52e4 <EIC_0_Handler+0xc>)
    52de:	4798      	blx	r3
} /**
    52e0:	bf00      	nop
    52e2:	bd80      	pop	{r7, pc}
    52e4:	000051ad 	.word	0x000051ad

000052e8 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    52e8:	b580      	push	{r7, lr}
    52ea:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    52ec:	4b01      	ldr	r3, [pc, #4]	; (52f4 <EIC_1_Handler+0xc>)
    52ee:	4798      	blx	r3
} /**
    52f0:	bf00      	nop
    52f2:	bd80      	pop	{r7, pc}
    52f4:	000051ad 	.word	0x000051ad

000052f8 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    52f8:	b580      	push	{r7, lr}
    52fa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    52fc:	4b01      	ldr	r3, [pc, #4]	; (5304 <EIC_3_Handler+0xc>)
    52fe:	4798      	blx	r3
} /**
    5300:	bf00      	nop
    5302:	bd80      	pop	{r7, pc}
    5304:	000051ad 	.word	0x000051ad

00005308 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    5308:	b580      	push	{r7, lr}
    530a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    530c:	4b01      	ldr	r3, [pc, #4]	; (5314 <EIC_4_Handler+0xc>)
    530e:	4798      	blx	r3
} /**
    5310:	bf00      	nop
    5312:	bd80      	pop	{r7, pc}
    5314:	000051ad 	.word	0x000051ad

00005318 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    5318:	b580      	push	{r7, lr}
    531a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    531c:	4b01      	ldr	r3, [pc, #4]	; (5324 <EIC_5_Handler+0xc>)
    531e:	4798      	blx	r3
} /**
    5320:	bf00      	nop
    5322:	bd80      	pop	{r7, pc}
    5324:	000051ad 	.word	0x000051ad

00005328 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    5328:	b580      	push	{r7, lr}
    532a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    532c:	4b01      	ldr	r3, [pc, #4]	; (5334 <EIC_6_Handler+0xc>)
    532e:	4798      	blx	r3
} /**
    5330:	bf00      	nop
    5332:	bd80      	pop	{r7, pc}
    5334:	000051ad 	.word	0x000051ad

00005338 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    5338:	b580      	push	{r7, lr}
    533a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    533c:	4b01      	ldr	r3, [pc, #4]	; (5344 <EIC_7_Handler+0xc>)
    533e:	4798      	blx	r3
} /**
    5340:	bf00      	nop
    5342:	bd80      	pop	{r7, pc}
    5344:	000051ad 	.word	0x000051ad

00005348 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    5348:	b580      	push	{r7, lr}
    534a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    534c:	4b01      	ldr	r3, [pc, #4]	; (5354 <EIC_8_Handler+0xc>)
    534e:	4798      	blx	r3
} /**
    5350:	bf00      	nop
    5352:	bd80      	pop	{r7, pc}
    5354:	000051ad 	.word	0x000051ad

00005358 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    5358:	b580      	push	{r7, lr}
    535a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    535c:	4b01      	ldr	r3, [pc, #4]	; (5364 <EIC_9_Handler+0xc>)
    535e:	4798      	blx	r3
}
    5360:	bf00      	nop
    5362:	bd80      	pop	{r7, pc}
    5364:	000051ad 	.word	0x000051ad

00005368 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    5368:	b480      	push	{r7}
    536a:	b085      	sub	sp, #20
    536c:	af00      	add	r7, sp, #0
    536e:	60f8      	str	r0, [r7, #12]
    5370:	460b      	mov	r3, r1
    5372:	607a      	str	r2, [r7, #4]
    5374:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    5376:	7afa      	ldrb	r2, [r7, #11]
    5378:	68fb      	ldr	r3, [r7, #12]
    537a:	3248      	adds	r2, #72	; 0x48
    537c:	6879      	ldr	r1, [r7, #4]
    537e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    5382:	bf00      	nop
    5384:	3714      	adds	r7, #20
    5386:	46bd      	mov	sp, r7
    5388:	f85d 7b04 	ldr.w	r7, [sp], #4
    538c:	4770      	bx	lr

0000538e <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    538e:	b480      	push	{r7}
    5390:	b083      	sub	sp, #12
    5392:	af00      	add	r7, sp, #0
    5394:	6078      	str	r0, [r7, #4]
    5396:	460b      	mov	r3, r1
    5398:	70fb      	strb	r3, [r7, #3]
    539a:	4613      	mov	r3, r2
    539c:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    539e:	78fb      	ldrb	r3, [r7, #3]
    53a0:	687a      	ldr	r2, [r7, #4]
    53a2:	3304      	adds	r3, #4
    53a4:	00db      	lsls	r3, r3, #3
    53a6:	4413      	add	r3, r2
    53a8:	78ba      	ldrb	r2, [r7, #2]
    53aa:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    53ac:	78fb      	ldrb	r3, [r7, #3]
    53ae:	78ba      	ldrb	r2, [r7, #2]
    53b0:	43d2      	mvns	r2, r2
    53b2:	b2d1      	uxtb	r1, r2
    53b4:	687a      	ldr	r2, [r7, #4]
    53b6:	3304      	adds	r3, #4
    53b8:	00db      	lsls	r3, r3, #3
    53ba:	4413      	add	r3, r2
    53bc:	460a      	mov	r2, r1
    53be:	711a      	strb	r2, [r3, #4]
}
    53c0:	bf00      	nop
    53c2:	370c      	adds	r7, #12
    53c4:	46bd      	mov	sp, r7
    53c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    53ca:	4770      	bx	lr

000053cc <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    53cc:	b480      	push	{r7}
    53ce:	b085      	sub	sp, #20
    53d0:	af00      	add	r7, sp, #0
    53d2:	60f8      	str	r0, [r7, #12]
    53d4:	460b      	mov	r3, r1
    53d6:	607a      	str	r2, [r7, #4]
    53d8:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    53da:	7afa      	ldrb	r2, [r7, #11]
    53dc:	68fb      	ldr	r3, [r7, #12]
    53de:	3204      	adds	r2, #4
    53e0:	6879      	ldr	r1, [r7, #4]
    53e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    53e6:	bf00      	nop
    53e8:	3714      	adds	r7, #20
    53ea:	46bd      	mov	sp, r7
    53ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    53f0:	4770      	bx	lr
	...

000053f4 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    53f4:	b580      	push	{r7, lr}
    53f6:	b082      	sub	sp, #8
    53f8:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    53fa:	2300      	movs	r3, #0
    53fc:	71fb      	strb	r3, [r7, #7]
    53fe:	e00b      	b.n	5418 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    5400:	79fb      	ldrb	r3, [r7, #7]
    5402:	4a18      	ldr	r2, [pc, #96]	; (5464 <_event_system_init+0x70>)
    5404:	5cd3      	ldrb	r3, [r2, r3]
    5406:	461a      	mov	r2, r3
    5408:	79fb      	ldrb	r3, [r7, #7]
    540a:	4619      	mov	r1, r3
    540c:	4816      	ldr	r0, [pc, #88]	; (5468 <_event_system_init+0x74>)
    540e:	4b17      	ldr	r3, [pc, #92]	; (546c <_event_system_init+0x78>)
    5410:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    5412:	79fb      	ldrb	r3, [r7, #7]
    5414:	3301      	adds	r3, #1
    5416:	71fb      	strb	r3, [r7, #7]
    5418:	79fb      	ldrb	r3, [r7, #7]
    541a:	2b42      	cmp	r3, #66	; 0x42
    541c:	d9f0      	bls.n	5400 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    541e:	2300      	movs	r3, #0
    5420:	71fb      	strb	r3, [r7, #7]
    5422:	e016      	b.n	5452 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    5424:	79fb      	ldrb	r3, [r7, #7]
    5426:	4a12      	ldr	r2, [pc, #72]	; (5470 <_event_system_init+0x7c>)
    5428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    542c:	461a      	mov	r2, r3
    542e:	79fb      	ldrb	r3, [r7, #7]
    5430:	4619      	mov	r1, r3
    5432:	480d      	ldr	r0, [pc, #52]	; (5468 <_event_system_init+0x74>)
    5434:	4b0f      	ldr	r3, [pc, #60]	; (5474 <_event_system_init+0x80>)
    5436:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    5438:	79fb      	ldrb	r3, [r7, #7]
    543a:	4a0f      	ldr	r2, [pc, #60]	; (5478 <_event_system_init+0x84>)
    543c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5440:	b2da      	uxtb	r2, r3
    5442:	79fb      	ldrb	r3, [r7, #7]
    5444:	4619      	mov	r1, r3
    5446:	4808      	ldr	r0, [pc, #32]	; (5468 <_event_system_init+0x74>)
    5448:	4b0c      	ldr	r3, [pc, #48]	; (547c <_event_system_init+0x88>)
    544a:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    544c:	79fb      	ldrb	r3, [r7, #7]
    544e:	3301      	adds	r3, #1
    5450:	71fb      	strb	r3, [r7, #7]
    5452:	79fb      	ldrb	r3, [r7, #7]
    5454:	2b1f      	cmp	r3, #31
    5456:	d9e5      	bls.n	5424 <_event_system_init+0x30>
	}

	return ERR_NONE;
    5458:	2300      	movs	r3, #0
}
    545a:	4618      	mov	r0, r3
    545c:	3708      	adds	r7, #8
    545e:	46bd      	mov	sp, r7
    5460:	bd80      	pop	{r7, pc}
    5462:	bf00      	nop
    5464:	0001052c 	.word	0x0001052c
    5468:	4100e000 	.word	0x4100e000
    546c:	00005369 	.word	0x00005369
    5470:	00010570 	.word	0x00010570
    5474:	000053cd 	.word	0x000053cd
    5478:	000105b0 	.word	0x000105b0
    547c:	0000538f 	.word	0x0000538f

00005480 <hri_gclk_wait_for_sync>:
{
    5480:	b480      	push	{r7}
    5482:	b083      	sub	sp, #12
    5484:	af00      	add	r7, sp, #0
    5486:	6078      	str	r0, [r7, #4]
    5488:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    548a:	bf00      	nop
    548c:	687b      	ldr	r3, [r7, #4]
    548e:	685a      	ldr	r2, [r3, #4]
    5490:	683b      	ldr	r3, [r7, #0]
    5492:	4013      	ands	r3, r2
    5494:	2b00      	cmp	r3, #0
    5496:	d1f9      	bne.n	548c <hri_gclk_wait_for_sync+0xc>
}
    5498:	bf00      	nop
    549a:	370c      	adds	r7, #12
    549c:	46bd      	mov	sp, r7
    549e:	f85d 7b04 	ldr.w	r7, [sp], #4
    54a2:	4770      	bx	lr

000054a4 <hri_gclk_write_GENCTRL_reg>:
{
    54a4:	b580      	push	{r7, lr}
    54a6:	b084      	sub	sp, #16
    54a8:	af00      	add	r7, sp, #0
    54aa:	60f8      	str	r0, [r7, #12]
    54ac:	460b      	mov	r3, r1
    54ae:	607a      	str	r2, [r7, #4]
    54b0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    54b2:	7afa      	ldrb	r2, [r7, #11]
    54b4:	68fb      	ldr	r3, [r7, #12]
    54b6:	3208      	adds	r2, #8
    54b8:	6879      	ldr	r1, [r7, #4]
    54ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    54be:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    54c2:	68f8      	ldr	r0, [r7, #12]
    54c4:	4b02      	ldr	r3, [pc, #8]	; (54d0 <hri_gclk_write_GENCTRL_reg+0x2c>)
    54c6:	4798      	blx	r3
}
    54c8:	bf00      	nop
    54ca:	3710      	adds	r7, #16
    54cc:	46bd      	mov	sp, r7
    54ce:	bd80      	pop	{r7, pc}
    54d0:	00005481 	.word	0x00005481

000054d4 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    54d4:	b580      	push	{r7, lr}
    54d6:	b082      	sub	sp, #8
    54d8:	af00      	add	r7, sp, #0
    54da:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    54dc:	687b      	ldr	r3, [r7, #4]
    54de:	f003 0301 	and.w	r3, r3, #1
    54e2:	2b00      	cmp	r3, #0
    54e4:	d004      	beq.n	54f0 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    54e6:	4a36      	ldr	r2, [pc, #216]	; (55c0 <_gclk_init_generators_by_fref+0xec>)
    54e8:	2100      	movs	r1, #0
    54ea:	4836      	ldr	r0, [pc, #216]	; (55c4 <_gclk_init_generators_by_fref+0xf0>)
    54ec:	4b36      	ldr	r3, [pc, #216]	; (55c8 <_gclk_init_generators_by_fref+0xf4>)
    54ee:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    54f0:	687b      	ldr	r3, [r7, #4]
    54f2:	f003 0302 	and.w	r3, r3, #2
    54f6:	2b00      	cmp	r3, #0
    54f8:	d004      	beq.n	5504 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    54fa:	4a34      	ldr	r2, [pc, #208]	; (55cc <_gclk_init_generators_by_fref+0xf8>)
    54fc:	2101      	movs	r1, #1
    54fe:	4831      	ldr	r0, [pc, #196]	; (55c4 <_gclk_init_generators_by_fref+0xf0>)
    5500:	4b31      	ldr	r3, [pc, #196]	; (55c8 <_gclk_init_generators_by_fref+0xf4>)
    5502:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    5504:	687b      	ldr	r3, [r7, #4]
    5506:	f003 0304 	and.w	r3, r3, #4
    550a:	2b00      	cmp	r3, #0
    550c:	d004      	beq.n	5518 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    550e:	4a30      	ldr	r2, [pc, #192]	; (55d0 <_gclk_init_generators_by_fref+0xfc>)
    5510:	2102      	movs	r1, #2
    5512:	482c      	ldr	r0, [pc, #176]	; (55c4 <_gclk_init_generators_by_fref+0xf0>)
    5514:	4b2c      	ldr	r3, [pc, #176]	; (55c8 <_gclk_init_generators_by_fref+0xf4>)
    5516:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    5518:	687b      	ldr	r3, [r7, #4]
    551a:	f003 0308 	and.w	r3, r3, #8
    551e:	2b00      	cmp	r3, #0
    5520:	d004      	beq.n	552c <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    5522:	4a2c      	ldr	r2, [pc, #176]	; (55d4 <_gclk_init_generators_by_fref+0x100>)
    5524:	2103      	movs	r1, #3
    5526:	4827      	ldr	r0, [pc, #156]	; (55c4 <_gclk_init_generators_by_fref+0xf0>)
    5528:	4b27      	ldr	r3, [pc, #156]	; (55c8 <_gclk_init_generators_by_fref+0xf4>)
    552a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    552c:	687b      	ldr	r3, [r7, #4]
    552e:	f003 0310 	and.w	r3, r3, #16
    5532:	2b00      	cmp	r3, #0
    5534:	d004      	beq.n	5540 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    5536:	4a28      	ldr	r2, [pc, #160]	; (55d8 <_gclk_init_generators_by_fref+0x104>)
    5538:	2104      	movs	r1, #4
    553a:	4822      	ldr	r0, [pc, #136]	; (55c4 <_gclk_init_generators_by_fref+0xf0>)
    553c:	4b22      	ldr	r3, [pc, #136]	; (55c8 <_gclk_init_generators_by_fref+0xf4>)
    553e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    5540:	687b      	ldr	r3, [r7, #4]
    5542:	f003 0320 	and.w	r3, r3, #32
    5546:	2b00      	cmp	r3, #0
    5548:	d004      	beq.n	5554 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    554a:	4a24      	ldr	r2, [pc, #144]	; (55dc <_gclk_init_generators_by_fref+0x108>)
    554c:	2105      	movs	r1, #5
    554e:	481d      	ldr	r0, [pc, #116]	; (55c4 <_gclk_init_generators_by_fref+0xf0>)
    5550:	4b1d      	ldr	r3, [pc, #116]	; (55c8 <_gclk_init_generators_by_fref+0xf4>)
    5552:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    5554:	687b      	ldr	r3, [r7, #4]
    5556:	f003 0340 	and.w	r3, r3, #64	; 0x40
    555a:	2b00      	cmp	r3, #0
    555c:	d004      	beq.n	5568 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    555e:	4a20      	ldr	r2, [pc, #128]	; (55e0 <_gclk_init_generators_by_fref+0x10c>)
    5560:	2106      	movs	r1, #6
    5562:	4818      	ldr	r0, [pc, #96]	; (55c4 <_gclk_init_generators_by_fref+0xf0>)
    5564:	4b18      	ldr	r3, [pc, #96]	; (55c8 <_gclk_init_generators_by_fref+0xf4>)
    5566:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    5568:	687b      	ldr	r3, [r7, #4]
    556a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    556e:	2b00      	cmp	r3, #0
    5570:	d004      	beq.n	557c <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    5572:	4a1c      	ldr	r2, [pc, #112]	; (55e4 <_gclk_init_generators_by_fref+0x110>)
    5574:	2107      	movs	r1, #7
    5576:	4813      	ldr	r0, [pc, #76]	; (55c4 <_gclk_init_generators_by_fref+0xf0>)
    5578:	4b13      	ldr	r3, [pc, #76]	; (55c8 <_gclk_init_generators_by_fref+0xf4>)
    557a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    557c:	687b      	ldr	r3, [r7, #4]
    557e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5582:	2b00      	cmp	r3, #0
    5584:	d004      	beq.n	5590 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    5586:	4a18      	ldr	r2, [pc, #96]	; (55e8 <_gclk_init_generators_by_fref+0x114>)
    5588:	2108      	movs	r1, #8
    558a:	480e      	ldr	r0, [pc, #56]	; (55c4 <_gclk_init_generators_by_fref+0xf0>)
    558c:	4b0e      	ldr	r3, [pc, #56]	; (55c8 <_gclk_init_generators_by_fref+0xf4>)
    558e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    5590:	687b      	ldr	r3, [r7, #4]
    5592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5596:	2b00      	cmp	r3, #0
    5598:	d004      	beq.n	55a4 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    559a:	4a14      	ldr	r2, [pc, #80]	; (55ec <_gclk_init_generators_by_fref+0x118>)
    559c:	210a      	movs	r1, #10
    559e:	4809      	ldr	r0, [pc, #36]	; (55c4 <_gclk_init_generators_by_fref+0xf0>)
    55a0:	4b09      	ldr	r3, [pc, #36]	; (55c8 <_gclk_init_generators_by_fref+0xf4>)
    55a2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    55a4:	687b      	ldr	r3, [r7, #4]
    55a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    55aa:	2b00      	cmp	r3, #0
    55ac:	d004      	beq.n	55b8 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    55ae:	4a10      	ldr	r2, [pc, #64]	; (55f0 <_gclk_init_generators_by_fref+0x11c>)
    55b0:	210b      	movs	r1, #11
    55b2:	4804      	ldr	r0, [pc, #16]	; (55c4 <_gclk_init_generators_by_fref+0xf0>)
    55b4:	4b04      	ldr	r3, [pc, #16]	; (55c8 <_gclk_init_generators_by_fref+0xf4>)
    55b6:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    55b8:	bf00      	nop
    55ba:	3708      	adds	r7, #8
    55bc:	46bd      	mov	sp, r7
    55be:	bd80      	pop	{r7, pc}
    55c0:	00010107 	.word	0x00010107
    55c4:	40001c00 	.word	0x40001c00
    55c8:	000054a5 	.word	0x000054a5
    55cc:	00010907 	.word	0x00010907
    55d0:	00010906 	.word	0x00010906
    55d4:	00020908 	.word	0x00020908
    55d8:	00010901 	.word	0x00010901
    55dc:	00062901 	.word	0x00062901
    55e0:	000c2901 	.word	0x000c2901
    55e4:	00082908 	.word	0x00082908
    55e8:	00032901 	.word	0x00032901
    55ec:	00010905 	.word	0x00010905
    55f0:	00041905 	.word	0x00041905

000055f4 <hri_mclk_write_CPUDIV_reg>:
{
    55f4:	b480      	push	{r7}
    55f6:	b083      	sub	sp, #12
    55f8:	af00      	add	r7, sp, #0
    55fa:	6078      	str	r0, [r7, #4]
    55fc:	460b      	mov	r3, r1
    55fe:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    5600:	687b      	ldr	r3, [r7, #4]
    5602:	78fa      	ldrb	r2, [r7, #3]
    5604:	715a      	strb	r2, [r3, #5]
}
    5606:	bf00      	nop
    5608:	370c      	adds	r7, #12
    560a:	46bd      	mov	sp, r7
    560c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5610:	4770      	bx	lr
	...

00005614 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    5614:	b580      	push	{r7, lr}
    5616:	b082      	sub	sp, #8
    5618:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    561a:	4b05      	ldr	r3, [pc, #20]	; (5630 <_mclk_init+0x1c>)
    561c:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    561e:	2101      	movs	r1, #1
    5620:	6878      	ldr	r0, [r7, #4]
    5622:	4b04      	ldr	r3, [pc, #16]	; (5634 <_mclk_init+0x20>)
    5624:	4798      	blx	r3
}
    5626:	bf00      	nop
    5628:	3708      	adds	r7, #8
    562a:	46bd      	mov	sp, r7
    562c:	bd80      	pop	{r7, pc}
    562e:	bf00      	nop
    5630:	40000800 	.word	0x40000800
    5634:	000055f5 	.word	0x000055f5

00005638 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    5638:	b480      	push	{r7}
    563a:	b083      	sub	sp, #12
    563c:	af00      	add	r7, sp, #0
    563e:	6078      	str	r0, [r7, #4]
    5640:	460b      	mov	r3, r1
    5642:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    5644:	687b      	ldr	r3, [r7, #4]
    5646:	78fa      	ldrb	r2, [r7, #3]
    5648:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    564a:	bf00      	nop
    564c:	370c      	adds	r7, #12
    564e:	46bd      	mov	sp, r7
    5650:	f85d 7b04 	ldr.w	r7, [sp], #4
    5654:	4770      	bx	lr

00005656 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    5656:	b480      	push	{r7}
    5658:	b083      	sub	sp, #12
    565a:	af00      	add	r7, sp, #0
    565c:	6078      	str	r0, [r7, #4]
    565e:	460b      	mov	r3, r1
    5660:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    5662:	687b      	ldr	r3, [r7, #4]
    5664:	887a      	ldrh	r2, [r7, #2]
    5666:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5668:	bf00      	nop
    566a:	370c      	adds	r7, #12
    566c:	46bd      	mov	sp, r7
    566e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5672:	4770      	bx	lr

00005674 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    5674:	b480      	push	{r7}
    5676:	b083      	sub	sp, #12
    5678:	af00      	add	r7, sp, #0
    567a:	6078      	str	r0, [r7, #4]
    567c:	460b      	mov	r3, r1
    567e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    5680:	687b      	ldr	r3, [r7, #4]
    5682:	78fa      	ldrb	r2, [r7, #3]
    5684:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5686:	bf00      	nop
    5688:	370c      	adds	r7, #12
    568a:	46bd      	mov	sp, r7
    568c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5690:	4770      	bx	lr

00005692 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    5692:	b480      	push	{r7}
    5694:	b083      	sub	sp, #12
    5696:	af00      	add	r7, sp, #0
    5698:	6078      	str	r0, [r7, #4]
    569a:	460b      	mov	r3, r1
    569c:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    569e:	687b      	ldr	r3, [r7, #4]
    56a0:	78fa      	ldrb	r2, [r7, #3]
    56a2:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    56a4:	bf00      	nop
    56a6:	370c      	adds	r7, #12
    56a8:	46bd      	mov	sp, r7
    56aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    56ae:	4770      	bx	lr

000056b0 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    56b0:	b480      	push	{r7}
    56b2:	b085      	sub	sp, #20
    56b4:	af00      	add	r7, sp, #0
    56b6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    56b8:	687b      	ldr	r3, [r7, #4]
    56ba:	69db      	ldr	r3, [r3, #28]
    56bc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    56be:	68fb      	ldr	r3, [r7, #12]
    56c0:	0a1b      	lsrs	r3, r3, #8
    56c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    56c6:	60fb      	str	r3, [r7, #12]
	return tmp;
    56c8:	68fb      	ldr	r3, [r7, #12]
}
    56ca:	4618      	mov	r0, r3
    56cc:	3714      	adds	r7, #20
    56ce:	46bd      	mov	sp, r7
    56d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    56d4:	4770      	bx	lr

000056d6 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    56d6:	b480      	push	{r7}
    56d8:	b083      	sub	sp, #12
    56da:	af00      	add	r7, sp, #0
    56dc:	6078      	str	r0, [r7, #4]
    56de:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    56e0:	687b      	ldr	r3, [r7, #4]
    56e2:	683a      	ldr	r2, [r7, #0]
    56e4:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    56e6:	bf00      	nop
    56e8:	370c      	adds	r7, #12
    56ea:	46bd      	mov	sp, r7
    56ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    56f0:	4770      	bx	lr
	...

000056f4 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    56f4:	b580      	push	{r7, lr}
    56f6:	b082      	sub	sp, #8
    56f8:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    56fa:	4b13      	ldr	r3, [pc, #76]	; (5748 <_osc32kctrl_init_sources+0x54>)
    56fc:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    56fe:	2300      	movs	r3, #0
    5700:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    5702:	f242 018e 	movw	r1, #8334	; 0x208e
    5706:	6878      	ldr	r0, [r7, #4]
    5708:	4b10      	ldr	r3, [pc, #64]	; (574c <_osc32kctrl_init_sources+0x58>)
    570a:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    570c:	2100      	movs	r1, #0
    570e:	6878      	ldr	r0, [r7, #4]
    5710:	4b0f      	ldr	r3, [pc, #60]	; (5750 <_osc32kctrl_init_sources+0x5c>)
    5712:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    5714:	2100      	movs	r1, #0
    5716:	6878      	ldr	r0, [r7, #4]
    5718:	4b0e      	ldr	r3, [pc, #56]	; (5754 <_osc32kctrl_init_sources+0x60>)
    571a:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    571c:	6878      	ldr	r0, [r7, #4]
    571e:	4b0e      	ldr	r3, [pc, #56]	; (5758 <_osc32kctrl_init_sources+0x64>)
    5720:	4798      	blx	r3
    5722:	4603      	mov	r3, r0
    5724:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    5726:	887b      	ldrh	r3, [r7, #2]
    5728:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    572a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    572e:	4619      	mov	r1, r3
    5730:	6878      	ldr	r0, [r7, #4]
    5732:	4b0a      	ldr	r3, [pc, #40]	; (575c <_osc32kctrl_init_sources+0x68>)
    5734:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    5736:	2100      	movs	r1, #0
    5738:	6878      	ldr	r0, [r7, #4]
    573a:	4b09      	ldr	r3, [pc, #36]	; (5760 <_osc32kctrl_init_sources+0x6c>)
    573c:	4798      	blx	r3
	(void)calib;
}
    573e:	bf00      	nop
    5740:	3708      	adds	r7, #8
    5742:	46bd      	mov	sp, r7
    5744:	bd80      	pop	{r7, pc}
    5746:	bf00      	nop
    5748:	40001400 	.word	0x40001400
    574c:	00005657 	.word	0x00005657
    5750:	00005675 	.word	0x00005675
    5754:	00005693 	.word	0x00005693
    5758:	000056b1 	.word	0x000056b1
    575c:	000056d7 	.word	0x000056d7
    5760:	00005639 	.word	0x00005639

00005764 <hri_gclk_wait_for_sync>:
{
    5764:	b480      	push	{r7}
    5766:	b083      	sub	sp, #12
    5768:	af00      	add	r7, sp, #0
    576a:	6078      	str	r0, [r7, #4]
    576c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    576e:	bf00      	nop
    5770:	687b      	ldr	r3, [r7, #4]
    5772:	685a      	ldr	r2, [r3, #4]
    5774:	683b      	ldr	r3, [r7, #0]
    5776:	4013      	ands	r3, r2
    5778:	2b00      	cmp	r3, #0
    577a:	d1f9      	bne.n	5770 <hri_gclk_wait_for_sync+0xc>
}
    577c:	bf00      	nop
    577e:	370c      	adds	r7, #12
    5780:	46bd      	mov	sp, r7
    5782:	f85d 7b04 	ldr.w	r7, [sp], #4
    5786:	4770      	bx	lr

00005788 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    5788:	b480      	push	{r7}
    578a:	b083      	sub	sp, #12
    578c:	af00      	add	r7, sp, #0
    578e:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    5790:	687b      	ldr	r3, [r7, #4]
    5792:	685b      	ldr	r3, [r3, #4]
    5794:	089b      	lsrs	r3, r3, #2
    5796:	f003 0301 	and.w	r3, r3, #1
    579a:	2b00      	cmp	r3, #0
    579c:	bf14      	ite	ne
    579e:	2301      	movne	r3, #1
    57a0:	2300      	moveq	r3, #0
    57a2:	b2db      	uxtb	r3, r3
}
    57a4:	4618      	mov	r0, r3
    57a6:	370c      	adds	r7, #12
    57a8:	46bd      	mov	sp, r7
    57aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    57ae:	4770      	bx	lr

000057b0 <hri_gclk_read_SYNCBUSY_reg>:
{
    57b0:	b480      	push	{r7}
    57b2:	b083      	sub	sp, #12
    57b4:	af00      	add	r7, sp, #0
    57b6:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    57b8:	687b      	ldr	r3, [r7, #4]
    57ba:	685b      	ldr	r3, [r3, #4]
}
    57bc:	4618      	mov	r0, r3
    57be:	370c      	adds	r7, #12
    57c0:	46bd      	mov	sp, r7
    57c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    57c6:	4770      	bx	lr

000057c8 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    57c8:	b580      	push	{r7, lr}
    57ca:	b086      	sub	sp, #24
    57cc:	af00      	add	r7, sp, #0
    57ce:	60f8      	str	r0, [r7, #12]
    57d0:	460b      	mov	r3, r1
    57d2:	607a      	str	r2, [r7, #4]
    57d4:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    57d6:	7afa      	ldrb	r2, [r7, #11]
    57d8:	68fb      	ldr	r3, [r7, #12]
    57da:	3208      	adds	r2, #8
    57dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    57e0:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    57e2:	697b      	ldr	r3, [r7, #20]
    57e4:	f023 030f 	bic.w	r3, r3, #15
    57e8:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    57ea:	687b      	ldr	r3, [r7, #4]
    57ec:	f003 030f 	and.w	r3, r3, #15
    57f0:	697a      	ldr	r2, [r7, #20]
    57f2:	4313      	orrs	r3, r2
    57f4:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    57f6:	7afa      	ldrb	r2, [r7, #11]
    57f8:	68fb      	ldr	r3, [r7, #12]
    57fa:	3208      	adds	r2, #8
    57fc:	6979      	ldr	r1, [r7, #20]
    57fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    5802:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    5806:	68f8      	ldr	r0, [r7, #12]
    5808:	4b02      	ldr	r3, [pc, #8]	; (5814 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    580a:	4798      	blx	r3
}
    580c:	bf00      	nop
    580e:	3718      	adds	r7, #24
    5810:	46bd      	mov	sp, r7
    5812:	bd80      	pop	{r7, pc}
    5814:	00005765 	.word	0x00005765

00005818 <hri_gclk_write_PCHCTRL_reg>:
{
    5818:	b480      	push	{r7}
    581a:	b085      	sub	sp, #20
    581c:	af00      	add	r7, sp, #0
    581e:	60f8      	str	r0, [r7, #12]
    5820:	460b      	mov	r3, r1
    5822:	607a      	str	r2, [r7, #4]
    5824:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    5826:	7afa      	ldrb	r2, [r7, #11]
    5828:	68fb      	ldr	r3, [r7, #12]
    582a:	3220      	adds	r2, #32
    582c:	6879      	ldr	r1, [r7, #4]
    582e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5832:	bf00      	nop
    5834:	3714      	adds	r7, #20
    5836:	46bd      	mov	sp, r7
    5838:	f85d 7b04 	ldr.w	r7, [sp], #4
    583c:	4770      	bx	lr

0000583e <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    583e:	b480      	push	{r7}
    5840:	b085      	sub	sp, #20
    5842:	af00      	add	r7, sp, #0
    5844:	60f8      	str	r0, [r7, #12]
    5846:	460b      	mov	r3, r1
    5848:	607a      	str	r2, [r7, #4]
    584a:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    584c:	bf00      	nop
    584e:	7afa      	ldrb	r2, [r7, #11]
    5850:	68f9      	ldr	r1, [r7, #12]
    5852:	4613      	mov	r3, r2
    5854:	009b      	lsls	r3, r3, #2
    5856:	4413      	add	r3, r2
    5858:	009b      	lsls	r3, r3, #2
    585a:	440b      	add	r3, r1
    585c:	333c      	adds	r3, #60	; 0x3c
    585e:	681a      	ldr	r2, [r3, #0]
    5860:	687b      	ldr	r3, [r7, #4]
    5862:	4013      	ands	r3, r2
    5864:	2b00      	cmp	r3, #0
    5866:	d1f2      	bne.n	584e <hri_oscctrl_wait_for_sync+0x10>
	};
}
    5868:	bf00      	nop
    586a:	3714      	adds	r7, #20
    586c:	46bd      	mov	sp, r7
    586e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5872:	4770      	bx	lr

00005874 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    5874:	b480      	push	{r7}
    5876:	b083      	sub	sp, #12
    5878:	af00      	add	r7, sp, #0
    587a:	6078      	str	r0, [r7, #4]
    587c:	460b      	mov	r3, r1
    587e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    5880:	78fa      	ldrb	r2, [r7, #3]
    5882:	6879      	ldr	r1, [r7, #4]
    5884:	4613      	mov	r3, r2
    5886:	009b      	lsls	r3, r3, #2
    5888:	4413      	add	r3, r2
    588a:	009b      	lsls	r3, r3, #2
    588c:	440b      	add	r3, r1
    588e:	3340      	adds	r3, #64	; 0x40
    5890:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    5892:	f003 0301 	and.w	r3, r3, #1
    5896:	2b00      	cmp	r3, #0
    5898:	bf14      	ite	ne
    589a:	2301      	movne	r3, #1
    589c:	2300      	moveq	r3, #0
    589e:	b2db      	uxtb	r3, r3
}
    58a0:	4618      	mov	r0, r3
    58a2:	370c      	adds	r7, #12
    58a4:	46bd      	mov	sp, r7
    58a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    58aa:	4770      	bx	lr

000058ac <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    58ac:	b480      	push	{r7}
    58ae:	b083      	sub	sp, #12
    58b0:	af00      	add	r7, sp, #0
    58b2:	6078      	str	r0, [r7, #4]
    58b4:	460b      	mov	r3, r1
    58b6:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    58b8:	78fa      	ldrb	r2, [r7, #3]
    58ba:	6879      	ldr	r1, [r7, #4]
    58bc:	4613      	mov	r3, r2
    58be:	009b      	lsls	r3, r3, #2
    58c0:	4413      	add	r3, r2
    58c2:	009b      	lsls	r3, r3, #2
    58c4:	440b      	add	r3, r1
    58c6:	3340      	adds	r3, #64	; 0x40
    58c8:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    58ca:	085b      	lsrs	r3, r3, #1
    58cc:	f003 0301 	and.w	r3, r3, #1
    58d0:	2b00      	cmp	r3, #0
    58d2:	bf14      	ite	ne
    58d4:	2301      	movne	r3, #1
    58d6:	2300      	moveq	r3, #0
    58d8:	b2db      	uxtb	r3, r3
}
    58da:	4618      	mov	r0, r3
    58dc:	370c      	adds	r7, #12
    58de:	46bd      	mov	sp, r7
    58e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    58e4:	4770      	bx	lr
	...

000058e8 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    58e8:	b580      	push	{r7, lr}
    58ea:	b082      	sub	sp, #8
    58ec:	af00      	add	r7, sp, #0
    58ee:	6078      	str	r0, [r7, #4]
    58f0:	460b      	mov	r3, r1
    58f2:	70fb      	strb	r3, [r7, #3]
    58f4:	4613      	mov	r3, r2
    58f6:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    58f8:	78fa      	ldrb	r2, [r7, #3]
    58fa:	6879      	ldr	r1, [r7, #4]
    58fc:	4613      	mov	r3, r2
    58fe:	009b      	lsls	r3, r3, #2
    5900:	4413      	add	r3, r2
    5902:	009b      	lsls	r3, r3, #2
    5904:	440b      	add	r3, r1
    5906:	3330      	adds	r3, #48	; 0x30
    5908:	78ba      	ldrb	r2, [r7, #2]
    590a:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    590c:	78fb      	ldrb	r3, [r7, #3]
    590e:	2202      	movs	r2, #2
    5910:	4619      	mov	r1, r3
    5912:	6878      	ldr	r0, [r7, #4]
    5914:	4b02      	ldr	r3, [pc, #8]	; (5920 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    5916:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5918:	bf00      	nop
    591a:	3708      	adds	r7, #8
    591c:	46bd      	mov	sp, r7
    591e:	bd80      	pop	{r7, pc}
    5920:	0000583f 	.word	0x0000583f

00005924 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    5924:	b580      	push	{r7, lr}
    5926:	b084      	sub	sp, #16
    5928:	af00      	add	r7, sp, #0
    592a:	60f8      	str	r0, [r7, #12]
    592c:	460b      	mov	r3, r1
    592e:	607a      	str	r2, [r7, #4]
    5930:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    5932:	7afa      	ldrb	r2, [r7, #11]
    5934:	68f9      	ldr	r1, [r7, #12]
    5936:	4613      	mov	r3, r2
    5938:	009b      	lsls	r3, r3, #2
    593a:	4413      	add	r3, r2
    593c:	009b      	lsls	r3, r3, #2
    593e:	440b      	add	r3, r1
    5940:	3334      	adds	r3, #52	; 0x34
    5942:	687a      	ldr	r2, [r7, #4]
    5944:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    5946:	7afb      	ldrb	r3, [r7, #11]
    5948:	2206      	movs	r2, #6
    594a:	4619      	mov	r1, r3
    594c:	68f8      	ldr	r0, [r7, #12]
    594e:	4b03      	ldr	r3, [pc, #12]	; (595c <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    5950:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5952:	bf00      	nop
    5954:	3710      	adds	r7, #16
    5956:	46bd      	mov	sp, r7
    5958:	bd80      	pop	{r7, pc}
    595a:	bf00      	nop
    595c:	0000583f 	.word	0x0000583f

00005960 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    5960:	b480      	push	{r7}
    5962:	b085      	sub	sp, #20
    5964:	af00      	add	r7, sp, #0
    5966:	60f8      	str	r0, [r7, #12]
    5968:	460b      	mov	r3, r1
    596a:	607a      	str	r2, [r7, #4]
    596c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    596e:	7afa      	ldrb	r2, [r7, #11]
    5970:	68f9      	ldr	r1, [r7, #12]
    5972:	4613      	mov	r3, r2
    5974:	009b      	lsls	r3, r3, #2
    5976:	4413      	add	r3, r2
    5978:	009b      	lsls	r3, r3, #2
    597a:	440b      	add	r3, r1
    597c:	3338      	adds	r3, #56	; 0x38
    597e:	687a      	ldr	r2, [r7, #4]
    5980:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5982:	bf00      	nop
    5984:	3714      	adds	r7, #20
    5986:	46bd      	mov	sp, r7
    5988:	f85d 7b04 	ldr.w	r7, [sp], #4
    598c:	4770      	bx	lr

0000598e <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    598e:	b480      	push	{r7}
    5990:	b083      	sub	sp, #12
    5992:	af00      	add	r7, sp, #0
    5994:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    5996:	687b      	ldr	r3, [r7, #4]
    5998:	691b      	ldr	r3, [r3, #16]
    599a:	085b      	lsrs	r3, r3, #1
    599c:	f003 0301 	and.w	r3, r3, #1
    59a0:	2b00      	cmp	r3, #0
    59a2:	bf14      	ite	ne
    59a4:	2301      	movne	r3, #1
    59a6:	2300      	moveq	r3, #0
    59a8:	b2db      	uxtb	r3, r3
}
    59aa:	4618      	mov	r0, r3
    59ac:	370c      	adds	r7, #12
    59ae:	46bd      	mov	sp, r7
    59b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    59b4:	4770      	bx	lr

000059b6 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    59b6:	b480      	push	{r7}
    59b8:	b083      	sub	sp, #12
    59ba:	af00      	add	r7, sp, #0
    59bc:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    59be:	687b      	ldr	r3, [r7, #4]
    59c0:	691b      	ldr	r3, [r3, #16]
    59c2:	0a1b      	lsrs	r3, r3, #8
    59c4:	f003 0301 	and.w	r3, r3, #1
    59c8:	2b00      	cmp	r3, #0
    59ca:	bf14      	ite	ne
    59cc:	2301      	movne	r3, #1
    59ce:	2300      	moveq	r3, #0
    59d0:	b2db      	uxtb	r3, r3
}
    59d2:	4618      	mov	r0, r3
    59d4:	370c      	adds	r7, #12
    59d6:	46bd      	mov	sp, r7
    59d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    59dc:	4770      	bx	lr

000059de <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    59de:	b480      	push	{r7}
    59e0:	b085      	sub	sp, #20
    59e2:	af00      	add	r7, sp, #0
    59e4:	6078      	str	r0, [r7, #4]
    59e6:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    59e8:	687b      	ldr	r3, [r7, #4]
    59ea:	691b      	ldr	r3, [r3, #16]
    59ec:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    59ee:	68fa      	ldr	r2, [r7, #12]
    59f0:	683b      	ldr	r3, [r7, #0]
    59f2:	4013      	ands	r3, r2
    59f4:	60fb      	str	r3, [r7, #12]
	return tmp;
    59f6:	68fb      	ldr	r3, [r7, #12]
}
    59f8:	4618      	mov	r0, r3
    59fa:	3714      	adds	r7, #20
    59fc:	46bd      	mov	sp, r7
    59fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a02:	4770      	bx	lr

00005a04 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    5a04:	b480      	push	{r7}
    5a06:	b085      	sub	sp, #20
    5a08:	af00      	add	r7, sp, #0
    5a0a:	60f8      	str	r0, [r7, #12]
    5a0c:	460b      	mov	r3, r1
    5a0e:	607a      	str	r2, [r7, #4]
    5a10:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    5a12:	7afb      	ldrb	r3, [r7, #11]
    5a14:	68fa      	ldr	r2, [r7, #12]
    5a16:	3304      	adds	r3, #4
    5a18:	009b      	lsls	r3, r3, #2
    5a1a:	4413      	add	r3, r2
    5a1c:	687a      	ldr	r2, [r7, #4]
    5a1e:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5a20:	bf00      	nop
    5a22:	3714      	adds	r7, #20
    5a24:	46bd      	mov	sp, r7
    5a26:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a2a:	4770      	bx	lr

00005a2c <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    5a2c:	b480      	push	{r7}
    5a2e:	b083      	sub	sp, #12
    5a30:	af00      	add	r7, sp, #0
    5a32:	6078      	str	r0, [r7, #4]
    5a34:	460b      	mov	r3, r1
    5a36:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5a38:	687b      	ldr	r3, [r7, #4]
    5a3a:	78fa      	ldrb	r2, [r7, #3]
    5a3c:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5a3e:	bf00      	nop
    5a40:	370c      	adds	r7, #12
    5a42:	46bd      	mov	sp, r7
    5a44:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a48:	4770      	bx	lr

00005a4a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    5a4a:	b480      	push	{r7}
    5a4c:	b085      	sub	sp, #20
    5a4e:	af00      	add	r7, sp, #0
    5a50:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5a52:	687b      	ldr	r3, [r7, #4]
    5a54:	f893 3020 	ldrb.w	r3, [r3, #32]
    5a58:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    5a5a:	7bfb      	ldrb	r3, [r7, #15]
    5a5c:	f003 0301 	and.w	r3, r3, #1
    5a60:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5a62:	7bfb      	ldrb	r3, [r7, #15]
    5a64:	2b00      	cmp	r3, #0
    5a66:	bf14      	ite	ne
    5a68:	2301      	movne	r3, #1
    5a6a:	2300      	moveq	r3, #0
    5a6c:	b2db      	uxtb	r3, r3
}
    5a6e:	4618      	mov	r0, r3
    5a70:	3714      	adds	r7, #20
    5a72:	46bd      	mov	sp, r7
    5a74:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a78:	4770      	bx	lr

00005a7a <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    5a7a:	b480      	push	{r7}
    5a7c:	b083      	sub	sp, #12
    5a7e:	af00      	add	r7, sp, #0
    5a80:	6078      	str	r0, [r7, #4]
    5a82:	460b      	mov	r3, r1
    5a84:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    5a86:	687b      	ldr	r3, [r7, #4]
    5a88:	78fa      	ldrb	r2, [r7, #3]
    5a8a:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5a8e:	bf00      	nop
    5a90:	370c      	adds	r7, #12
    5a92:	46bd      	mov	sp, r7
    5a94:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a98:	4770      	bx	lr

00005a9a <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    5a9a:	b480      	push	{r7}
    5a9c:	b083      	sub	sp, #12
    5a9e:	af00      	add	r7, sp, #0
    5aa0:	6078      	str	r0, [r7, #4]
    5aa2:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    5aa4:	687b      	ldr	r3, [r7, #4]
    5aa6:	683a      	ldr	r2, [r7, #0]
    5aa8:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5aaa:	bf00      	nop
    5aac:	370c      	adds	r7, #12
    5aae:	46bd      	mov	sp, r7
    5ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ab4:	4770      	bx	lr

00005ab6 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    5ab6:	b480      	push	{r7}
    5ab8:	b083      	sub	sp, #12
    5aba:	af00      	add	r7, sp, #0
    5abc:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    5abe:	687b      	ldr	r3, [r7, #4]
    5ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5ac2:	4618      	mov	r0, r3
    5ac4:	370c      	adds	r7, #12
    5ac6:	46bd      	mov	sp, r7
    5ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5acc:	4770      	bx	lr

00005ace <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    5ace:	b480      	push	{r7}
    5ad0:	b083      	sub	sp, #12
    5ad2:	af00      	add	r7, sp, #0
    5ad4:	6078      	str	r0, [r7, #4]
    5ad6:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5ad8:	687b      	ldr	r3, [r7, #4]
    5ada:	683a      	ldr	r2, [r7, #0]
    5adc:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5ade:	bf00      	nop
    5ae0:	370c      	adds	r7, #12
    5ae2:	46bd      	mov	sp, r7
    5ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ae8:	4770      	bx	lr

00005aea <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    5aea:	b480      	push	{r7}
    5aec:	b085      	sub	sp, #20
    5aee:	af00      	add	r7, sp, #0
    5af0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5af2:	687b      	ldr	r3, [r7, #4]
    5af4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5af8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    5afa:	7bfb      	ldrb	r3, [r7, #15]
    5afc:	085b      	lsrs	r3, r3, #1
    5afe:	b2db      	uxtb	r3, r3
    5b00:	f003 0301 	and.w	r3, r3, #1
    5b04:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5b06:	7bfb      	ldrb	r3, [r7, #15]
    5b08:	2b00      	cmp	r3, #0
    5b0a:	bf14      	ite	ne
    5b0c:	2301      	movne	r3, #1
    5b0e:	2300      	moveq	r3, #0
    5b10:	b2db      	uxtb	r3, r3
}
    5b12:	4618      	mov	r0, r3
    5b14:	3714      	adds	r7, #20
    5b16:	46bd      	mov	sp, r7
    5b18:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b1c:	4770      	bx	lr

00005b1e <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    5b1e:	b480      	push	{r7}
    5b20:	b085      	sub	sp, #20
    5b22:	af00      	add	r7, sp, #0
    5b24:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5b26:	687b      	ldr	r3, [r7, #4]
    5b28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5b2c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    5b2e:	7bfb      	ldrb	r3, [r7, #15]
    5b30:	089b      	lsrs	r3, r3, #2
    5b32:	b2db      	uxtb	r3, r3
    5b34:	f003 0301 	and.w	r3, r3, #1
    5b38:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5b3a:	7bfb      	ldrb	r3, [r7, #15]
    5b3c:	2b00      	cmp	r3, #0
    5b3e:	bf14      	ite	ne
    5b40:	2301      	movne	r3, #1
    5b42:	2300      	moveq	r3, #0
    5b44:	b2db      	uxtb	r3, r3
}
    5b46:	4618      	mov	r0, r3
    5b48:	3714      	adds	r7, #20
    5b4a:	46bd      	mov	sp, r7
    5b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b50:	4770      	bx	lr

00005b52 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    5b52:	b480      	push	{r7}
    5b54:	b085      	sub	sp, #20
    5b56:	af00      	add	r7, sp, #0
    5b58:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5b5a:	687b      	ldr	r3, [r7, #4]
    5b5c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5b60:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    5b62:	7bfb      	ldrb	r3, [r7, #15]
    5b64:	08db      	lsrs	r3, r3, #3
    5b66:	b2db      	uxtb	r3, r3
    5b68:	f003 0301 	and.w	r3, r3, #1
    5b6c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5b6e:	7bfb      	ldrb	r3, [r7, #15]
    5b70:	2b00      	cmp	r3, #0
    5b72:	bf14      	ite	ne
    5b74:	2301      	movne	r3, #1
    5b76:	2300      	moveq	r3, #0
    5b78:	b2db      	uxtb	r3, r3
}
    5b7a:	4618      	mov	r0, r3
    5b7c:	3714      	adds	r7, #20
    5b7e:	46bd      	mov	sp, r7
    5b80:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b84:	4770      	bx	lr

00005b86 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    5b86:	b480      	push	{r7}
    5b88:	b085      	sub	sp, #20
    5b8a:	af00      	add	r7, sp, #0
    5b8c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5b8e:	687b      	ldr	r3, [r7, #4]
    5b90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5b94:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    5b96:	7bfb      	ldrb	r3, [r7, #15]
    5b98:	091b      	lsrs	r3, r3, #4
    5b9a:	b2db      	uxtb	r3, r3
    5b9c:	f003 0301 	and.w	r3, r3, #1
    5ba0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5ba2:	7bfb      	ldrb	r3, [r7, #15]
    5ba4:	2b00      	cmp	r3, #0
    5ba6:	bf14      	ite	ne
    5ba8:	2301      	movne	r3, #1
    5baa:	2300      	moveq	r3, #0
    5bac:	b2db      	uxtb	r3, r3
}
    5bae:	4618      	mov	r0, r3
    5bb0:	3714      	adds	r7, #20
    5bb2:	46bd      	mov	sp, r7
    5bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bb8:	4770      	bx	lr
	...

00005bbc <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5bbc:	b580      	push	{r7, lr}
    5bbe:	b082      	sub	sp, #8
    5bc0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5bc2:	4b0a      	ldr	r3, [pc, #40]	; (5bec <_oscctrl_init_sources+0x30>)
    5bc4:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    5bc6:	4a0a      	ldr	r2, [pc, #40]	; (5bf0 <_oscctrl_init_sources+0x34>)
    5bc8:	2101      	movs	r1, #1
    5bca:	6878      	ldr	r0, [r7, #4]
    5bcc:	4b09      	ldr	r3, [pc, #36]	; (5bf4 <_oscctrl_init_sources+0x38>)
    5bce:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5bd0:	bf00      	nop
    5bd2:	6878      	ldr	r0, [r7, #4]
    5bd4:	4b08      	ldr	r3, [pc, #32]	; (5bf8 <_oscctrl_init_sources+0x3c>)
    5bd6:	4798      	blx	r3
    5bd8:	4603      	mov	r3, r0
    5bda:	f083 0301 	eor.w	r3, r3, #1
    5bde:	b2db      	uxtb	r3, r3
    5be0:	2b00      	cmp	r3, #0
    5be2:	d1f6      	bne.n	5bd2 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    5be4:	bf00      	nop
    5be6:	3708      	adds	r7, #8
    5be8:	46bd      	mov	sp, r7
    5bea:	bd80      	pop	{r7, pc}
    5bec:	40001000 	.word	0x40001000
    5bf0:	03002646 	.word	0x03002646
    5bf4:	00005a05 	.word	0x00005a05
    5bf8:	0000598f 	.word	0x0000598f

00005bfc <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    5bfc:	b580      	push	{r7, lr}
    5bfe:	b084      	sub	sp, #16
    5c00:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5c02:	4b6b      	ldr	r3, [pc, #428]	; (5db0 <_oscctrl_init_referenced_generators+0x1b4>)
    5c04:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    5c06:	2204      	movs	r2, #4
    5c08:	2100      	movs	r1, #0
    5c0a:	486a      	ldr	r0, [pc, #424]	; (5db4 <_oscctrl_init_referenced_generators+0x1b8>)
    5c0c:	4b6a      	ldr	r3, [pc, #424]	; (5db8 <_oscctrl_init_referenced_generators+0x1bc>)
    5c0e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5c10:	bf00      	nop
    5c12:	4868      	ldr	r0, [pc, #416]	; (5db4 <_oscctrl_init_referenced_generators+0x1b8>)
    5c14:	4b69      	ldr	r3, [pc, #420]	; (5dbc <_oscctrl_init_referenced_generators+0x1c0>)
    5c16:	4798      	blx	r3
    5c18:	4603      	mov	r3, r0
    5c1a:	2b00      	cmp	r3, #0
    5c1c:	d1f9      	bne.n	5c12 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    5c1e:	2100      	movs	r1, #0
    5c20:	68f8      	ldr	r0, [r7, #12]
    5c22:	4b67      	ldr	r3, [pc, #412]	; (5dc0 <_oscctrl_init_referenced_generators+0x1c4>)
    5c24:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    5c26:	4967      	ldr	r1, [pc, #412]	; (5dc4 <_oscctrl_init_referenced_generators+0x1c8>)
    5c28:	68f8      	ldr	r0, [r7, #12]
    5c2a:	4b67      	ldr	r3, [pc, #412]	; (5dc8 <_oscctrl_init_referenced_generators+0x1cc>)
    5c2c:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    5c2e:	bf00      	nop
    5c30:	68f8      	ldr	r0, [r7, #12]
    5c32:	4b66      	ldr	r3, [pc, #408]	; (5dcc <_oscctrl_init_referenced_generators+0x1d0>)
    5c34:	4798      	blx	r3
    5c36:	4603      	mov	r3, r0
    5c38:	2b00      	cmp	r3, #0
    5c3a:	d1f9      	bne.n	5c30 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    5c3c:	2100      	movs	r1, #0
    5c3e:	68f8      	ldr	r0, [r7, #12]
    5c40:	4b63      	ldr	r3, [pc, #396]	; (5dd0 <_oscctrl_init_referenced_generators+0x1d4>)
    5c42:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5c44:	bf00      	nop
    5c46:	68f8      	ldr	r0, [r7, #12]
    5c48:	4b62      	ldr	r3, [pc, #392]	; (5dd4 <_oscctrl_init_referenced_generators+0x1d8>)
    5c4a:	4798      	blx	r3
    5c4c:	4603      	mov	r3, r0
    5c4e:	2b00      	cmp	r3, #0
    5c50:	d1f9      	bne.n	5c46 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    5c52:	2302      	movs	r3, #2
    5c54:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    5c56:	7afb      	ldrb	r3, [r7, #11]
    5c58:	4619      	mov	r1, r3
    5c5a:	68f8      	ldr	r0, [r7, #12]
    5c5c:	4b58      	ldr	r3, [pc, #352]	; (5dc0 <_oscctrl_init_referenced_generators+0x1c4>)
    5c5e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5c60:	bf00      	nop
    5c62:	68f8      	ldr	r0, [r7, #12]
    5c64:	4b5c      	ldr	r3, [pc, #368]	; (5dd8 <_oscctrl_init_referenced_generators+0x1dc>)
    5c66:	4798      	blx	r3
    5c68:	4603      	mov	r3, r0
    5c6a:	2b00      	cmp	r3, #0
    5c6c:	d1f9      	bne.n	5c62 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    5c6e:	68f8      	ldr	r0, [r7, #12]
    5c70:	4b5a      	ldr	r3, [pc, #360]	; (5ddc <_oscctrl_init_referenced_generators+0x1e0>)
    5c72:	4798      	blx	r3
    5c74:	4603      	mov	r3, r0
    5c76:	4619      	mov	r1, r3
    5c78:	68f8      	ldr	r0, [r7, #12]
    5c7a:	4b59      	ldr	r3, [pc, #356]	; (5de0 <_oscctrl_init_referenced_generators+0x1e4>)
    5c7c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5c7e:	bf00      	nop
    5c80:	68f8      	ldr	r0, [r7, #12]
    5c82:	4b58      	ldr	r3, [pc, #352]	; (5de4 <_oscctrl_init_referenced_generators+0x1e8>)
    5c84:	4798      	blx	r3
    5c86:	4603      	mov	r3, r0
    5c88:	2b00      	cmp	r3, #0
    5c8a:	d1f9      	bne.n	5c80 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5c8c:	2319      	movs	r3, #25
    5c8e:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5c90:	7afb      	ldrb	r3, [r7, #11]
    5c92:	4619      	mov	r1, r3
    5c94:	68f8      	ldr	r0, [r7, #12]
    5c96:	4b4e      	ldr	r3, [pc, #312]	; (5dd0 <_oscctrl_init_referenced_generators+0x1d4>)
    5c98:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5c9a:	bf00      	nop
    5c9c:	68f8      	ldr	r0, [r7, #12]
    5c9e:	4b4d      	ldr	r3, [pc, #308]	; (5dd4 <_oscctrl_init_referenced_generators+0x1d8>)
    5ca0:	4798      	blx	r3
    5ca2:	4603      	mov	r3, r0
    5ca4:	2b00      	cmp	r3, #0
    5ca6:	d1f9      	bne.n	5c9c <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5ca8:	2245      	movs	r2, #69	; 0x45
    5caa:	2101      	movs	r1, #1
    5cac:	4841      	ldr	r0, [pc, #260]	; (5db4 <_oscctrl_init_referenced_generators+0x1b8>)
    5cae:	4b4e      	ldr	r3, [pc, #312]	; (5de8 <_oscctrl_init_referenced_generators+0x1ec>)
    5cb0:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5cb2:	223b      	movs	r2, #59	; 0x3b
    5cb4:	2100      	movs	r1, #0
    5cb6:	68f8      	ldr	r0, [r7, #12]
    5cb8:	4b4c      	ldr	r3, [pc, #304]	; (5dec <_oscctrl_init_referenced_generators+0x1f0>)
    5cba:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5cbc:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5cc0:	2100      	movs	r1, #0
    5cc2:	68f8      	ldr	r0, [r7, #12]
    5cc4:	4b4a      	ldr	r3, [pc, #296]	; (5df0 <_oscctrl_init_referenced_generators+0x1f4>)
    5cc6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5cc8:	2242      	movs	r2, #66	; 0x42
    5cca:	2100      	movs	r1, #0
    5ccc:	68f8      	ldr	r0, [r7, #12]
    5cce:	4b49      	ldr	r3, [pc, #292]	; (5df4 <_oscctrl_init_referenced_generators+0x1f8>)
    5cd0:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5cd2:	4a49      	ldr	r2, [pc, #292]	; (5df8 <_oscctrl_init_referenced_generators+0x1fc>)
    5cd4:	2101      	movs	r1, #1
    5cd6:	68f8      	ldr	r0, [r7, #12]
    5cd8:	4b44      	ldr	r3, [pc, #272]	; (5dec <_oscctrl_init_referenced_generators+0x1f0>)
    5cda:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5cdc:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5ce0:	2101      	movs	r1, #1
    5ce2:	68f8      	ldr	r0, [r7, #12]
    5ce4:	4b42      	ldr	r3, [pc, #264]	; (5df0 <_oscctrl_init_referenced_generators+0x1f4>)
    5ce6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5ce8:	2202      	movs	r2, #2
    5cea:	2101      	movs	r1, #1
    5cec:	68f8      	ldr	r0, [r7, #12]
    5cee:	4b41      	ldr	r3, [pc, #260]	; (5df4 <_oscctrl_init_referenced_generators+0x1f8>)
    5cf0:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    5cf2:	68f8      	ldr	r0, [r7, #12]
    5cf4:	4b41      	ldr	r3, [pc, #260]	; (5dfc <_oscctrl_init_referenced_generators+0x200>)
    5cf6:	4798      	blx	r3
    5cf8:	4603      	mov	r3, r0
    5cfa:	2b00      	cmp	r3, #0
    5cfc:	d00c      	beq.n	5d18 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    5cfe:	f44f 6310 	mov.w	r3, #2304	; 0x900
    5d02:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    5d04:	bf00      	nop
    5d06:	6879      	ldr	r1, [r7, #4]
    5d08:	68f8      	ldr	r0, [r7, #12]
    5d0a:	4b3d      	ldr	r3, [pc, #244]	; (5e00 <_oscctrl_init_referenced_generators+0x204>)
    5d0c:	4798      	blx	r3
    5d0e:	4602      	mov	r2, r0
    5d10:	687b      	ldr	r3, [r7, #4]
    5d12:	429a      	cmp	r2, r3
    5d14:	d1f7      	bne.n	5d06 <_oscctrl_init_referenced_generators+0x10a>
    5d16:	e009      	b.n	5d2c <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5d18:	bf00      	nop
    5d1a:	68f8      	ldr	r0, [r7, #12]
    5d1c:	4b39      	ldr	r3, [pc, #228]	; (5e04 <_oscctrl_init_referenced_generators+0x208>)
    5d1e:	4798      	blx	r3
    5d20:	4603      	mov	r3, r0
    5d22:	f083 0301 	eor.w	r3, r3, #1
    5d26:	b2db      	uxtb	r3, r3
    5d28:	2b00      	cmp	r3, #0
    5d2a:	d1f6      	bne.n	5d1a <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    5d2c:	bf00      	nop
    5d2e:	2100      	movs	r1, #0
    5d30:	68f8      	ldr	r0, [r7, #12]
    5d32:	4b35      	ldr	r3, [pc, #212]	; (5e08 <_oscctrl_init_referenced_generators+0x20c>)
    5d34:	4798      	blx	r3
    5d36:	4603      	mov	r3, r0
    5d38:	f083 0301 	eor.w	r3, r3, #1
    5d3c:	b2db      	uxtb	r3, r3
    5d3e:	2b00      	cmp	r3, #0
    5d40:	d009      	beq.n	5d56 <_oscctrl_init_referenced_generators+0x15a>
    5d42:	2100      	movs	r1, #0
    5d44:	68f8      	ldr	r0, [r7, #12]
    5d46:	4b31      	ldr	r3, [pc, #196]	; (5e0c <_oscctrl_init_referenced_generators+0x210>)
    5d48:	4798      	blx	r3
    5d4a:	4603      	mov	r3, r0
    5d4c:	f083 0301 	eor.w	r3, r3, #1
    5d50:	b2db      	uxtb	r3, r3
    5d52:	2b00      	cmp	r3, #0
    5d54:	d1eb      	bne.n	5d2e <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5d56:	bf00      	nop
    5d58:	2101      	movs	r1, #1
    5d5a:	68f8      	ldr	r0, [r7, #12]
    5d5c:	4b2a      	ldr	r3, [pc, #168]	; (5e08 <_oscctrl_init_referenced_generators+0x20c>)
    5d5e:	4798      	blx	r3
    5d60:	4603      	mov	r3, r0
    5d62:	f083 0301 	eor.w	r3, r3, #1
    5d66:	b2db      	uxtb	r3, r3
    5d68:	2b00      	cmp	r3, #0
    5d6a:	d009      	beq.n	5d80 <_oscctrl_init_referenced_generators+0x184>
    5d6c:	2101      	movs	r1, #1
    5d6e:	68f8      	ldr	r0, [r7, #12]
    5d70:	4b26      	ldr	r3, [pc, #152]	; (5e0c <_oscctrl_init_referenced_generators+0x210>)
    5d72:	4798      	blx	r3
    5d74:	4603      	mov	r3, r0
    5d76:	f083 0301 	eor.w	r3, r3, #1
    5d7a:	b2db      	uxtb	r3, r3
    5d7c:	2b00      	cmp	r3, #0
    5d7e:	d1eb      	bne.n	5d58 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5d80:	bf00      	nop
    5d82:	480c      	ldr	r0, [pc, #48]	; (5db4 <_oscctrl_init_referenced_generators+0x1b8>)
    5d84:	4b22      	ldr	r3, [pc, #136]	; (5e10 <_oscctrl_init_referenced_generators+0x214>)
    5d86:	4798      	blx	r3
    5d88:	4603      	mov	r3, r0
    5d8a:	2b00      	cmp	r3, #0
    5d8c:	d1f9      	bne.n	5d82 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5d8e:	2207      	movs	r2, #7
    5d90:	2100      	movs	r1, #0
    5d92:	4808      	ldr	r0, [pc, #32]	; (5db4 <_oscctrl_init_referenced_generators+0x1b8>)
    5d94:	4b08      	ldr	r3, [pc, #32]	; (5db8 <_oscctrl_init_referenced_generators+0x1bc>)
    5d96:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5d98:	bf00      	nop
    5d9a:	4806      	ldr	r0, [pc, #24]	; (5db4 <_oscctrl_init_referenced_generators+0x1b8>)
    5d9c:	4b07      	ldr	r3, [pc, #28]	; (5dbc <_oscctrl_init_referenced_generators+0x1c0>)
    5d9e:	4798      	blx	r3
    5da0:	4603      	mov	r3, r0
    5da2:	2b00      	cmp	r3, #0
    5da4:	d1f9      	bne.n	5d9a <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    5da6:	bf00      	nop
    5da8:	3710      	adds	r7, #16
    5daa:	46bd      	mov	sp, r7
    5dac:	bd80      	pop	{r7, pc}
    5dae:	bf00      	nop
    5db0:	40001000 	.word	0x40001000
    5db4:	40001c00 	.word	0x40001c00
    5db8:	000057c9 	.word	0x000057c9
    5dbc:	00005789 	.word	0x00005789
    5dc0:	00005a2d 	.word	0x00005a2d
    5dc4:	0401bb80 	.word	0x0401bb80
    5dc8:	00005acf 	.word	0x00005acf
    5dcc:	00005b87 	.word	0x00005b87
    5dd0:	00005a7b 	.word	0x00005a7b
    5dd4:	00005b1f 	.word	0x00005b1f
    5dd8:	00005aeb 	.word	0x00005aeb
    5ddc:	00005ab7 	.word	0x00005ab7
    5de0:	00005a9b 	.word	0x00005a9b
    5de4:	00005b53 	.word	0x00005b53
    5de8:	00005819 	.word	0x00005819
    5dec:	00005925 	.word	0x00005925
    5df0:	00005961 	.word	0x00005961
    5df4:	000058e9 	.word	0x000058e9
    5df8:	000407a0 	.word	0x000407a0
    5dfc:	00005a4b 	.word	0x00005a4b
    5e00:	000059df 	.word	0x000059df
    5e04:	000059b7 	.word	0x000059b7
    5e08:	00005875 	.word	0x00005875
    5e0c:	000058ad 	.word	0x000058ad
    5e10:	000057b1 	.word	0x000057b1

00005e14 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    5e14:	b480      	push	{r7}
    5e16:	b083      	sub	sp, #12
    5e18:	af00      	add	r7, sp, #0
    5e1a:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    5e1c:	687b      	ldr	r3, [r7, #4]
    5e1e:	69db      	ldr	r3, [r3, #28]
    5e20:	0a9b      	lsrs	r3, r3, #10
    5e22:	f003 0301 	and.w	r3, r3, #1
    5e26:	2b00      	cmp	r3, #0
    5e28:	bf14      	ite	ne
    5e2a:	2301      	movne	r3, #1
    5e2c:	2300      	moveq	r3, #0
    5e2e:	b2db      	uxtb	r3, r3
}
    5e30:	4618      	mov	r0, r3
    5e32:	370c      	adds	r7, #12
    5e34:	46bd      	mov	sp, r7
    5e36:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e3a:	4770      	bx	lr

00005e3c <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5e3c:	b480      	push	{r7}
    5e3e:	b083      	sub	sp, #12
    5e40:	af00      	add	r7, sp, #0
    5e42:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5e44:	687b      	ldr	r3, [r7, #4]
    5e46:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5e4a:	61da      	str	r2, [r3, #28]
}
    5e4c:	bf00      	nop
    5e4e:	370c      	adds	r7, #12
    5e50:	46bd      	mov	sp, r7
    5e52:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e56:	4770      	bx	lr

00005e58 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5e58:	b480      	push	{r7}
    5e5a:	b083      	sub	sp, #12
    5e5c:	af00      	add	r7, sp, #0
    5e5e:	6078      	str	r0, [r7, #4]
    5e60:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    5e62:	687b      	ldr	r3, [r7, #4]
    5e64:	683a      	ldr	r2, [r7, #0]
    5e66:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5e68:	bf00      	nop
    5e6a:	370c      	adds	r7, #12
    5e6c:	46bd      	mov	sp, r7
    5e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e72:	4770      	bx	lr

00005e74 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5e74:	b480      	push	{r7}
    5e76:	b083      	sub	sp, #12
    5e78:	af00      	add	r7, sp, #0
    5e7a:	6078      	str	r0, [r7, #4]
    5e7c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5e7e:	687b      	ldr	r3, [r7, #4]
    5e80:	683a      	ldr	r2, [r7, #0]
    5e82:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5e84:	bf00      	nop
    5e86:	370c      	adds	r7, #12
    5e88:	46bd      	mov	sp, r7
    5e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e8e:	4770      	bx	lr

00005e90 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5e90:	b480      	push	{r7}
    5e92:	b083      	sub	sp, #12
    5e94:	af00      	add	r7, sp, #0
    5e96:	6078      	str	r0, [r7, #4]
    5e98:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5e9a:	687b      	ldr	r3, [r7, #4]
    5e9c:	683a      	ldr	r2, [r7, #0]
    5e9e:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5ea0:	bf00      	nop
    5ea2:	370c      	adds	r7, #12
    5ea4:	46bd      	mov	sp, r7
    5ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eaa:	4770      	bx	lr

00005eac <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5eac:	b480      	push	{r7}
    5eae:	b083      	sub	sp, #12
    5eb0:	af00      	add	r7, sp, #0
    5eb2:	6078      	str	r0, [r7, #4]
    5eb4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    5eb6:	687b      	ldr	r3, [r7, #4]
    5eb8:	683a      	ldr	r2, [r7, #0]
    5eba:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5ebc:	bf00      	nop
    5ebe:	370c      	adds	r7, #12
    5ec0:	46bd      	mov	sp, r7
    5ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ec6:	4770      	bx	lr

00005ec8 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5ec8:	b480      	push	{r7}
    5eca:	b085      	sub	sp, #20
    5ecc:	af00      	add	r7, sp, #0
    5ece:	6078      	str	r0, [r7, #4]
    5ed0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5ed2:	687b      	ldr	r3, [r7, #4]
    5ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5ed6:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5ed8:	68fb      	ldr	r3, [r7, #12]
    5eda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5ede:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5ee0:	683b      	ldr	r3, [r7, #0]
    5ee2:	b2db      	uxtb	r3, r3
    5ee4:	68fa      	ldr	r2, [r7, #12]
    5ee6:	4313      	orrs	r3, r2
    5ee8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5eea:	687b      	ldr	r3, [r7, #4]
    5eec:	68fa      	ldr	r2, [r7, #12]
    5eee:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5ef0:	bf00      	nop
    5ef2:	3714      	adds	r7, #20
    5ef4:	46bd      	mov	sp, r7
    5ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5efa:	4770      	bx	lr

00005efc <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5efc:	b480      	push	{r7}
    5efe:	b085      	sub	sp, #20
    5f00:	af00      	add	r7, sp, #0
    5f02:	6078      	str	r0, [r7, #4]
    5f04:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5f06:	687b      	ldr	r3, [r7, #4]
    5f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5f0a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    5f0c:	68fb      	ldr	r3, [r7, #12]
    5f0e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    5f12:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    5f14:	683b      	ldr	r3, [r7, #0]
    5f16:	041b      	lsls	r3, r3, #16
    5f18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    5f1c:	68fa      	ldr	r2, [r7, #12]
    5f1e:	4313      	orrs	r3, r2
    5f20:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5f22:	687b      	ldr	r3, [r7, #4]
    5f24:	68fa      	ldr	r2, [r7, #12]
    5f26:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5f28:	bf00      	nop
    5f2a:	3714      	adds	r7, #20
    5f2c:	46bd      	mov	sp, r7
    5f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f32:	4770      	bx	lr

00005f34 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    5f34:	b480      	push	{r7}
    5f36:	b083      	sub	sp, #12
    5f38:	af00      	add	r7, sp, #0
    5f3a:	6078      	str	r0, [r7, #4]
    5f3c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    5f3e:	687b      	ldr	r3, [r7, #4]
    5f40:	683a      	ldr	r2, [r7, #0]
    5f42:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5f44:	bf00      	nop
    5f46:	370c      	adds	r7, #12
    5f48:	46bd      	mov	sp, r7
    5f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f4e:	4770      	bx	lr

00005f50 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5f50:	b480      	push	{r7}
    5f52:	b083      	sub	sp, #12
    5f54:	af00      	add	r7, sp, #0
    5f56:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5f58:	687b      	ldr	r3, [r7, #4]
    5f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5f5c:	4618      	mov	r0, r3
    5f5e:	370c      	adds	r7, #12
    5f60:	46bd      	mov	sp, r7
    5f62:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f66:	4770      	bx	lr

00005f68 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5f68:	b480      	push	{r7}
    5f6a:	b085      	sub	sp, #20
    5f6c:	af00      	add	r7, sp, #0
    5f6e:	60f8      	str	r0, [r7, #12]
    5f70:	60b9      	str	r1, [r7, #8]
    5f72:	607a      	str	r2, [r7, #4]
	while (count--) {
    5f74:	e007      	b.n	5f86 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    5f76:	68fb      	ldr	r3, [r7, #12]
    5f78:	1c5a      	adds	r2, r3, #1
    5f7a:	60fa      	str	r2, [r7, #12]
    5f7c:	68ba      	ldr	r2, [r7, #8]
    5f7e:	1c51      	adds	r1, r2, #1
    5f80:	60b9      	str	r1, [r7, #8]
    5f82:	7812      	ldrb	r2, [r2, #0]
    5f84:	701a      	strb	r2, [r3, #0]
	while (count--) {
    5f86:	687b      	ldr	r3, [r7, #4]
    5f88:	1e5a      	subs	r2, r3, #1
    5f8a:	607a      	str	r2, [r7, #4]
    5f8c:	2b00      	cmp	r3, #0
    5f8e:	d1f2      	bne.n	5f76 <_qspi_memcpy+0xe>
	}
}
    5f90:	bf00      	nop
    5f92:	3714      	adds	r7, #20
    5f94:	46bd      	mov	sp, r7
    5f96:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f9a:	4770      	bx	lr

00005f9c <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5f9c:	b580      	push	{r7, lr}
    5f9e:	b082      	sub	sp, #8
    5fa0:	af00      	add	r7, sp, #0
    5fa2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5fa4:	4903      	ldr	r1, [pc, #12]	; (5fb4 <_qspi_end_transfer+0x18>)
    5fa6:	6878      	ldr	r0, [r7, #4]
    5fa8:	4b03      	ldr	r3, [pc, #12]	; (5fb8 <_qspi_end_transfer+0x1c>)
    5faa:	4798      	blx	r3
}
    5fac:	bf00      	nop
    5fae:	3708      	adds	r7, #8
    5fb0:	46bd      	mov	sp, r7
    5fb2:	bd80      	pop	{r7, pc}
    5fb4:	01000002 	.word	0x01000002
    5fb8:	00005e59 	.word	0x00005e59

00005fbc <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5fbc:	b580      	push	{r7, lr}
    5fbe:	b082      	sub	sp, #8
    5fc0:	af00      	add	r7, sp, #0
    5fc2:	6078      	str	r0, [r7, #4]
    5fc4:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    5fc6:	687b      	ldr	r3, [r7, #4]
    5fc8:	2b00      	cmp	r3, #0
    5fca:	d004      	beq.n	5fd6 <_qspi_sync_init+0x1a>
    5fcc:	683b      	ldr	r3, [r7, #0]
    5fce:	2b00      	cmp	r3, #0
    5fd0:	d001      	beq.n	5fd6 <_qspi_sync_init+0x1a>
    5fd2:	2301      	movs	r3, #1
    5fd4:	e000      	b.n	5fd8 <_qspi_sync_init+0x1c>
    5fd6:	2300      	movs	r3, #0
    5fd8:	f003 0301 	and.w	r3, r3, #1
    5fdc:	b2db      	uxtb	r3, r3
    5fde:	2240      	movs	r2, #64	; 0x40
    5fe0:	490c      	ldr	r1, [pc, #48]	; (6014 <_qspi_sync_init+0x58>)
    5fe2:	4618      	mov	r0, r3
    5fe4:	4b0c      	ldr	r3, [pc, #48]	; (6018 <_qspi_sync_init+0x5c>)
    5fe6:	4798      	blx	r3
	dev->prvt = hw;
    5fe8:	687b      	ldr	r3, [r7, #4]
    5fea:	683a      	ldr	r2, [r7, #0]
    5fec:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    5fee:	687b      	ldr	r3, [r7, #4]
    5ff0:	681b      	ldr	r3, [r3, #0]
    5ff2:	2101      	movs	r1, #1
    5ff4:	4618      	mov	r0, r3
    5ff6:	4b09      	ldr	r3, [pc, #36]	; (601c <_qspi_sync_init+0x60>)
    5ff8:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    5ffa:	4909      	ldr	r1, [pc, #36]	; (6020 <_qspi_sync_init+0x64>)
    5ffc:	6838      	ldr	r0, [r7, #0]
    5ffe:	4b09      	ldr	r3, [pc, #36]	; (6024 <_qspi_sync_init+0x68>)
    6000:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    6002:	4909      	ldr	r1, [pc, #36]	; (6028 <_qspi_sync_init+0x6c>)
    6004:	6838      	ldr	r0, [r7, #0]
    6006:	4b09      	ldr	r3, [pc, #36]	; (602c <_qspi_sync_init+0x70>)
    6008:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    600a:	2300      	movs	r3, #0
}
    600c:	4618      	mov	r0, r3
    600e:	3708      	adds	r7, #8
    6010:	46bd      	mov	sp, r7
    6012:	bd80      	pop	{r7, pc}
    6014:	00010630 	.word	0x00010630
    6018:	00003fd5 	.word	0x00003fd5
    601c:	00005e59 	.word	0x00005e59
    6020:	06000011 	.word	0x06000011
    6024:	00005e75 	.word	0x00005e75
    6028:	00241300 	.word	0x00241300
    602c:	00005e91 	.word	0x00005e91

00006030 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    6030:	b580      	push	{r7, lr}
    6032:	b082      	sub	sp, #8
    6034:	af00      	add	r7, sp, #0
    6036:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    6038:	687b      	ldr	r3, [r7, #4]
    603a:	681b      	ldr	r3, [r3, #0]
    603c:	2102      	movs	r1, #2
    603e:	4618      	mov	r0, r3
    6040:	4b03      	ldr	r3, [pc, #12]	; (6050 <_qspi_sync_enable+0x20>)
    6042:	4798      	blx	r3
	return ERR_NONE;
    6044:	2300      	movs	r3, #0
}
    6046:	4618      	mov	r0, r3
    6048:	3708      	adds	r7, #8
    604a:	46bd      	mov	sp, r7
    604c:	bd80      	pop	{r7, pc}
    604e:	bf00      	nop
    6050:	00005e59 	.word	0x00005e59

00006054 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    6054:	b580      	push	{r7, lr}
    6056:	b082      	sub	sp, #8
    6058:	af00      	add	r7, sp, #0
    605a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    605c:	687b      	ldr	r3, [r7, #4]
    605e:	681b      	ldr	r3, [r3, #0]
    6060:	2100      	movs	r1, #0
    6062:	4618      	mov	r0, r3
    6064:	4b03      	ldr	r3, [pc, #12]	; (6074 <_qspi_sync_disable+0x20>)
    6066:	4798      	blx	r3
	return ERR_NONE;
    6068:	2300      	movs	r3, #0
}
    606a:	4618      	mov	r0, r3
    606c:	3708      	adds	r7, #8
    606e:	46bd      	mov	sp, r7
    6070:	bd80      	pop	{r7, pc}
    6072:	bf00      	nop
    6074:	00005e59 	.word	0x00005e59

00006078 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    6078:	b580      	push	{r7, lr}
    607a:	b084      	sub	sp, #16
    607c:	af00      	add	r7, sp, #0
    607e:	6078      	str	r0, [r7, #4]
    6080:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    6082:	687b      	ldr	r3, [r7, #4]
    6084:	681b      	ldr	r3, [r3, #0]
    6086:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    6088:	683b      	ldr	r3, [r7, #0]
    608a:	781b      	ldrb	r3, [r3, #0]
    608c:	f003 0320 	and.w	r3, r3, #32
    6090:	b2db      	uxtb	r3, r3
    6092:	2b00      	cmp	r3, #0
    6094:	d005      	beq.n	60a2 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    6096:	683b      	ldr	r3, [r7, #0]
    6098:	689b      	ldr	r3, [r3, #8]
    609a:	4619      	mov	r1, r3
    609c:	68f8      	ldr	r0, [r7, #12]
    609e:	4b13      	ldr	r3, [pc, #76]	; (60ec <_qspi_sync_command_set_ifr+0x74>)
    60a0:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    60a2:	683b      	ldr	r3, [r7, #0]
    60a4:	781b      	ldrb	r3, [r3, #0]
    60a6:	f003 0310 	and.w	r3, r3, #16
    60aa:	b2db      	uxtb	r3, r3
    60ac:	2b00      	cmp	r3, #0
    60ae:	d005      	beq.n	60bc <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    60b0:	683b      	ldr	r3, [r7, #0]
    60b2:	791b      	ldrb	r3, [r3, #4]
    60b4:	4619      	mov	r1, r3
    60b6:	68f8      	ldr	r0, [r7, #12]
    60b8:	4b0d      	ldr	r3, [pc, #52]	; (60f0 <_qspi_sync_command_set_ifr+0x78>)
    60ba:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    60bc:	683b      	ldr	r3, [r7, #0]
    60be:	781b      	ldrb	r3, [r3, #0]
    60c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    60c4:	b2db      	uxtb	r3, r3
    60c6:	2b00      	cmp	r3, #0
    60c8:	d005      	beq.n	60d6 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    60ca:	683b      	ldr	r3, [r7, #0]
    60cc:	795b      	ldrb	r3, [r3, #5]
    60ce:	4619      	mov	r1, r3
    60d0:	68f8      	ldr	r0, [r7, #12]
    60d2:	4b08      	ldr	r3, [pc, #32]	; (60f4 <_qspi_sync_command_set_ifr+0x7c>)
    60d4:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    60d6:	683b      	ldr	r3, [r7, #0]
    60d8:	681b      	ldr	r3, [r3, #0]
    60da:	4619      	mov	r1, r3
    60dc:	68f8      	ldr	r0, [r7, #12]
    60de:	4b06      	ldr	r3, [pc, #24]	; (60f8 <_qspi_sync_command_set_ifr+0x80>)
    60e0:	4798      	blx	r3
}
    60e2:	bf00      	nop
    60e4:	3710      	adds	r7, #16
    60e6:	46bd      	mov	sp, r7
    60e8:	bd80      	pop	{r7, pc}
    60ea:	bf00      	nop
    60ec:	00005ead 	.word	0x00005ead
    60f0:	00005ec9 	.word	0x00005ec9
    60f4:	00005efd 	.word	0x00005efd
    60f8:	00005f35 	.word	0x00005f35

000060fc <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    60fc:	b580      	push	{r7, lr}
    60fe:	b084      	sub	sp, #16
    6100:	af00      	add	r7, sp, #0
    6102:	6078      	str	r0, [r7, #4]
    6104:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    6106:	687b      	ldr	r3, [r7, #4]
    6108:	681b      	ldr	r3, [r3, #0]
    610a:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    610c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    6110:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    6112:	683b      	ldr	r3, [r7, #0]
    6114:	781b      	ldrb	r3, [r3, #0]
    6116:	f003 0320 	and.w	r3, r3, #32
    611a:	b2db      	uxtb	r3, r3
    611c:	2b00      	cmp	r3, #0
    611e:	d004      	beq.n	612a <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    6120:	683b      	ldr	r3, [r7, #0]
    6122:	689b      	ldr	r3, [r3, #8]
    6124:	68fa      	ldr	r2, [r7, #12]
    6126:	4413      	add	r3, r2
    6128:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    612a:	68b8      	ldr	r0, [r7, #8]
    612c:	4b18      	ldr	r3, [pc, #96]	; (6190 <_qspi_sync_run_transfer+0x94>)
    612e:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    6130:	683b      	ldr	r3, [r7, #0]
    6132:	691b      	ldr	r3, [r3, #16]
    6134:	2b00      	cmp	r3, #0
    6136:	d103      	bne.n	6140 <_qspi_sync_run_transfer+0x44>
    6138:	683b      	ldr	r3, [r7, #0]
    613a:	695b      	ldr	r3, [r3, #20]
    613c:	2b00      	cmp	r3, #0
    613e:	d001      	beq.n	6144 <_qspi_sync_run_transfer+0x48>
    6140:	2301      	movs	r3, #1
    6142:	e000      	b.n	6146 <_qspi_sync_run_transfer+0x4a>
    6144:	2300      	movs	r3, #0
    6146:	f003 0301 	and.w	r3, r3, #1
    614a:	b2db      	uxtb	r3, r3
    614c:	2282      	movs	r2, #130	; 0x82
    614e:	4911      	ldr	r1, [pc, #68]	; (6194 <_qspi_sync_run_transfer+0x98>)
    6150:	4618      	mov	r0, r3
    6152:	4b11      	ldr	r3, [pc, #68]	; (6198 <_qspi_sync_run_transfer+0x9c>)
    6154:	4798      	blx	r3

	if (cmd->tx_buf) {
    6156:	683b      	ldr	r3, [r7, #0]
    6158:	691b      	ldr	r3, [r3, #16]
    615a:	2b00      	cmp	r3, #0
    615c:	d008      	beq.n	6170 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    615e:	683b      	ldr	r3, [r7, #0]
    6160:	6919      	ldr	r1, [r3, #16]
    6162:	683b      	ldr	r3, [r7, #0]
    6164:	68db      	ldr	r3, [r3, #12]
    6166:	461a      	mov	r2, r3
    6168:	68f8      	ldr	r0, [r7, #12]
    616a:	4b0c      	ldr	r3, [pc, #48]	; (619c <_qspi_sync_run_transfer+0xa0>)
    616c:	4798      	blx	r3
    616e:	e007      	b.n	6180 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    6170:	683b      	ldr	r3, [r7, #0]
    6172:	6958      	ldr	r0, [r3, #20]
    6174:	683b      	ldr	r3, [r7, #0]
    6176:	68db      	ldr	r3, [r3, #12]
    6178:	461a      	mov	r2, r3
    617a:	68f9      	ldr	r1, [r7, #12]
    617c:	4b07      	ldr	r3, [pc, #28]	; (619c <_qspi_sync_run_transfer+0xa0>)
    617e:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    6180:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6184:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    6188:	bf00      	nop
    618a:	3710      	adds	r7, #16
    618c:	46bd      	mov	sp, r7
    618e:	bd80      	pop	{r7, pc}
    6190:	00005f51 	.word	0x00005f51
    6194:	00010630 	.word	0x00010630
    6198:	00003fd5 	.word	0x00003fd5
    619c:	00005f69 	.word	0x00005f69

000061a0 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    61a0:	b580      	push	{r7, lr}
    61a2:	b082      	sub	sp, #8
    61a4:	af00      	add	r7, sp, #0
    61a6:	6078      	str	r0, [r7, #4]
    61a8:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    61aa:	6839      	ldr	r1, [r7, #0]
    61ac:	6878      	ldr	r0, [r7, #4]
    61ae:	4b14      	ldr	r3, [pc, #80]	; (6200 <_qspi_sync_serial_run_command+0x60>)
    61b0:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    61b2:	683b      	ldr	r3, [r7, #0]
    61b4:	781b      	ldrb	r3, [r3, #0]
    61b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    61ba:	b2db      	uxtb	r3, r3
    61bc:	2b00      	cmp	r3, #0
    61be:	d003      	beq.n	61c8 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    61c0:	6839      	ldr	r1, [r7, #0]
    61c2:	6878      	ldr	r0, [r7, #4]
    61c4:	4b0f      	ldr	r3, [pc, #60]	; (6204 <_qspi_sync_serial_run_command+0x64>)
    61c6:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    61c8:	687b      	ldr	r3, [r7, #4]
    61ca:	681b      	ldr	r3, [r3, #0]
    61cc:	4618      	mov	r0, r3
    61ce:	4b0e      	ldr	r3, [pc, #56]	; (6208 <_qspi_sync_serial_run_command+0x68>)
    61d0:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    61d2:	bf00      	nop
    61d4:	687b      	ldr	r3, [r7, #4]
    61d6:	681b      	ldr	r3, [r3, #0]
    61d8:	4618      	mov	r0, r3
    61da:	4b0c      	ldr	r3, [pc, #48]	; (620c <_qspi_sync_serial_run_command+0x6c>)
    61dc:	4798      	blx	r3
    61de:	4603      	mov	r3, r0
    61e0:	f083 0301 	eor.w	r3, r3, #1
    61e4:	b2db      	uxtb	r3, r3
    61e6:	2b00      	cmp	r3, #0
    61e8:	d1f4      	bne.n	61d4 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    61ea:	687b      	ldr	r3, [r7, #4]
    61ec:	681b      	ldr	r3, [r3, #0]
    61ee:	4618      	mov	r0, r3
    61f0:	4b07      	ldr	r3, [pc, #28]	; (6210 <_qspi_sync_serial_run_command+0x70>)
    61f2:	4798      	blx	r3
	return ERR_NONE;
    61f4:	2300      	movs	r3, #0
}
    61f6:	4618      	mov	r0, r3
    61f8:	3708      	adds	r7, #8
    61fa:	46bd      	mov	sp, r7
    61fc:	bd80      	pop	{r7, pc}
    61fe:	bf00      	nop
    6200:	00006079 	.word	0x00006079
    6204:	000060fd 	.word	0x000060fd
    6208:	00005f9d 	.word	0x00005f9d
    620c:	00005e15 	.word	0x00005e15
    6210:	00005e3d 	.word	0x00005e3d

00006214 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    6214:	b480      	push	{r7}
    6216:	b083      	sub	sp, #12
    6218:	af00      	add	r7, sp, #0
    621a:	6078      	str	r0, [r7, #4]
    621c:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    621e:	bf00      	nop
    6220:	687b      	ldr	r3, [r7, #4]
    6222:	691a      	ldr	r2, [r3, #16]
    6224:	683b      	ldr	r3, [r7, #0]
    6226:	4013      	ands	r3, r2
    6228:	2b00      	cmp	r3, #0
    622a:	d1f9      	bne.n	6220 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    622c:	bf00      	nop
    622e:	370c      	adds	r7, #12
    6230:	46bd      	mov	sp, r7
    6232:	f85d 7b04 	ldr.w	r7, [sp], #4
    6236:	4770      	bx	lr

00006238 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    6238:	b480      	push	{r7}
    623a:	b083      	sub	sp, #12
    623c:	af00      	add	r7, sp, #0
    623e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    6240:	687b      	ldr	r3, [r7, #4]
    6242:	f44f 7280 	mov.w	r2, #256	; 0x100
    6246:	819a      	strh	r2, [r3, #12]
}
    6248:	bf00      	nop
    624a:	370c      	adds	r7, #12
    624c:	46bd      	mov	sp, r7
    624e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6252:	4770      	bx	lr

00006254 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    6254:	b480      	push	{r7}
    6256:	b083      	sub	sp, #12
    6258:	af00      	add	r7, sp, #0
    625a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    625c:	687b      	ldr	r3, [r7, #4]
    625e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6262:	819a      	strh	r2, [r3, #12]
}
    6264:	bf00      	nop
    6266:	370c      	adds	r7, #12
    6268:	46bd      	mov	sp, r7
    626a:	f85d 7b04 	ldr.w	r7, [sp], #4
    626e:	4770      	bx	lr

00006270 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    6270:	b480      	push	{r7}
    6272:	b083      	sub	sp, #12
    6274:	af00      	add	r7, sp, #0
    6276:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    6278:	687b      	ldr	r3, [r7, #4]
    627a:	899b      	ldrh	r3, [r3, #12]
    627c:	b29b      	uxth	r3, r3
}
    627e:	4618      	mov	r0, r3
    6280:	370c      	adds	r7, #12
    6282:	46bd      	mov	sp, r7
    6284:	f85d 7b04 	ldr.w	r7, [sp], #4
    6288:	4770      	bx	lr

0000628a <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    628a:	b480      	push	{r7}
    628c:	b083      	sub	sp, #12
    628e:	af00      	add	r7, sp, #0
    6290:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    6292:	687b      	ldr	r3, [r7, #4]
    6294:	895b      	ldrh	r3, [r3, #10]
    6296:	b29b      	uxth	r3, r3
}
    6298:	4618      	mov	r0, r3
    629a:	370c      	adds	r7, #12
    629c:	46bd      	mov	sp, r7
    629e:	f85d 7b04 	ldr.w	r7, [sp], #4
    62a2:	4770      	bx	lr

000062a4 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    62a4:	b580      	push	{r7, lr}
    62a6:	b082      	sub	sp, #8
    62a8:	af00      	add	r7, sp, #0
    62aa:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    62ac:	687b      	ldr	r3, [r7, #4]
    62ae:	881b      	ldrh	r3, [r3, #0]
    62b0:	b29b      	uxth	r3, r3
    62b2:	f043 0301 	orr.w	r3, r3, #1
    62b6:	b29a      	uxth	r2, r3
    62b8:	687b      	ldr	r3, [r7, #4]
    62ba:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    62bc:	2101      	movs	r1, #1
    62be:	6878      	ldr	r0, [r7, #4]
    62c0:	4b02      	ldr	r3, [pc, #8]	; (62cc <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    62c2:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    62c4:	bf00      	nop
    62c6:	3708      	adds	r7, #8
    62c8:	46bd      	mov	sp, r7
    62ca:	bd80      	pop	{r7, pc}
    62cc:	00006215 	.word	0x00006215

000062d0 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    62d0:	b580      	push	{r7, lr}
    62d2:	b084      	sub	sp, #16
    62d4:	af00      	add	r7, sp, #0
    62d6:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    62d8:	f248 0103 	movw	r1, #32771	; 0x8003
    62dc:	6878      	ldr	r0, [r7, #4]
    62de:	4b0a      	ldr	r3, [pc, #40]	; (6308 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    62e0:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    62e2:	687b      	ldr	r3, [r7, #4]
    62e4:	881b      	ldrh	r3, [r3, #0]
    62e6:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    62e8:	89fb      	ldrh	r3, [r7, #14]
    62ea:	085b      	lsrs	r3, r3, #1
    62ec:	b29b      	uxth	r3, r3
    62ee:	f003 0301 	and.w	r3, r3, #1
    62f2:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    62f4:	89fb      	ldrh	r3, [r7, #14]
    62f6:	2b00      	cmp	r3, #0
    62f8:	bf14      	ite	ne
    62fa:	2301      	movne	r3, #1
    62fc:	2300      	moveq	r3, #0
    62fe:	b2db      	uxtb	r3, r3
}
    6300:	4618      	mov	r0, r3
    6302:	3710      	adds	r7, #16
    6304:	46bd      	mov	sp, r7
    6306:	bd80      	pop	{r7, pc}
    6308:	00006215 	.word	0x00006215

0000630c <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    630c:	b580      	push	{r7, lr}
    630e:	b082      	sub	sp, #8
    6310:	af00      	add	r7, sp, #0
    6312:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    6314:	687b      	ldr	r3, [r7, #4]
    6316:	881b      	ldrh	r3, [r3, #0]
    6318:	b29b      	uxth	r3, r3
    631a:	f023 0302 	bic.w	r3, r3, #2
    631e:	b29a      	uxth	r2, r3
    6320:	687b      	ldr	r3, [r7, #4]
    6322:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6324:	f248 0103 	movw	r1, #32771	; 0x8003
    6328:	6878      	ldr	r0, [r7, #4]
    632a:	4b03      	ldr	r3, [pc, #12]	; (6338 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    632c:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    632e:	bf00      	nop
    6330:	3708      	adds	r7, #8
    6332:	46bd      	mov	sp, r7
    6334:	bd80      	pop	{r7, pc}
    6336:	bf00      	nop
    6338:	00006215 	.word	0x00006215

0000633c <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    633c:	b580      	push	{r7, lr}
    633e:	b082      	sub	sp, #8
    6340:	af00      	add	r7, sp, #0
    6342:	6078      	str	r0, [r7, #4]
    6344:	460b      	mov	r3, r1
    6346:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6348:	687b      	ldr	r3, [r7, #4]
    634a:	887a      	ldrh	r2, [r7, #2]
    634c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    634e:	f248 0103 	movw	r1, #32771	; 0x8003
    6352:	6878      	ldr	r0, [r7, #4]
    6354:	4b02      	ldr	r3, [pc, #8]	; (6360 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    6356:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    6358:	bf00      	nop
    635a:	3708      	adds	r7, #8
    635c:	46bd      	mov	sp, r7
    635e:	bd80      	pop	{r7, pc}
    6360:	00006215 	.word	0x00006215

00006364 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    6364:	b480      	push	{r7}
    6366:	b083      	sub	sp, #12
    6368:	af00      	add	r7, sp, #0
    636a:	6078      	str	r0, [r7, #4]
    636c:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    636e:	687b      	ldr	r3, [r7, #4]
    6370:	683a      	ldr	r2, [r7, #0]
    6372:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    6374:	bf00      	nop
    6376:	370c      	adds	r7, #12
    6378:	46bd      	mov	sp, r7
    637a:	f85d 7b04 	ldr.w	r7, [sp], #4
    637e:	4770      	bx	lr

00006380 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    6380:	b580      	push	{r7, lr}
    6382:	b082      	sub	sp, #8
    6384:	af00      	add	r7, sp, #0
    6386:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    6388:	687b      	ldr	r3, [r7, #4]
    638a:	2b00      	cmp	r3, #0
    638c:	d005      	beq.n	639a <_calendar_init+0x1a>
    638e:	687b      	ldr	r3, [r7, #4]
    6390:	681b      	ldr	r3, [r3, #0]
    6392:	2b00      	cmp	r3, #0
    6394:	d001      	beq.n	639a <_calendar_init+0x1a>
    6396:	2301      	movs	r3, #1
    6398:	e000      	b.n	639c <_calendar_init+0x1c>
    639a:	2300      	movs	r3, #0
    639c:	f003 0301 	and.w	r3, r3, #1
    63a0:	b2db      	uxtb	r3, r3
    63a2:	222f      	movs	r2, #47	; 0x2f
    63a4:	491b      	ldr	r1, [pc, #108]	; (6414 <_calendar_init+0x94>)
    63a6:	4618      	mov	r0, r3
    63a8:	4b1b      	ldr	r3, [pc, #108]	; (6418 <_calendar_init+0x98>)
    63aa:	4798      	blx	r3

	_rtc_dev = dev;
    63ac:	4a1b      	ldr	r2, [pc, #108]	; (641c <_calendar_init+0x9c>)
    63ae:	687b      	ldr	r3, [r7, #4]
    63b0:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    63b2:	687b      	ldr	r3, [r7, #4]
    63b4:	681b      	ldr	r3, [r3, #0]
    63b6:	4618      	mov	r0, r3
    63b8:	4b19      	ldr	r3, [pc, #100]	; (6420 <_calendar_init+0xa0>)
    63ba:	4798      	blx	r3
    63bc:	4603      	mov	r3, r0
    63be:	2b00      	cmp	r3, #0
    63c0:	d00a      	beq.n	63d8 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    63c2:	687b      	ldr	r3, [r7, #4]
    63c4:	681b      	ldr	r3, [r3, #0]
    63c6:	4618      	mov	r0, r3
    63c8:	4b16      	ldr	r3, [pc, #88]	; (6424 <_calendar_init+0xa4>)
    63ca:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    63cc:	687b      	ldr	r3, [r7, #4]
    63ce:	681b      	ldr	r3, [r3, #0]
    63d0:	2102      	movs	r1, #2
    63d2:	4618      	mov	r0, r3
    63d4:	4b14      	ldr	r3, [pc, #80]	; (6428 <_calendar_init+0xa8>)
    63d6:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    63d8:	687b      	ldr	r3, [r7, #4]
    63da:	681b      	ldr	r3, [r3, #0]
    63dc:	4618      	mov	r0, r3
    63de:	4b13      	ldr	r3, [pc, #76]	; (642c <_calendar_init+0xac>)
    63e0:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    63e2:	687b      	ldr	r3, [r7, #4]
    63e4:	681b      	ldr	r3, [r3, #0]
    63e6:	2101      	movs	r1, #1
    63e8:	4618      	mov	r0, r3
    63ea:	4b0f      	ldr	r3, [pc, #60]	; (6428 <_calendar_init+0xa8>)
    63ec:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    63ee:	687b      	ldr	r3, [r7, #4]
    63f0:	681b      	ldr	r3, [r3, #0]
    63f2:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    63f6:	4618      	mov	r0, r3
    63f8:	4b0d      	ldr	r3, [pc, #52]	; (6430 <_calendar_init+0xb0>)
    63fa:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    63fc:	687b      	ldr	r3, [r7, #4]
    63fe:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    6400:	2100      	movs	r1, #0
    6402:	4618      	mov	r0, r3
    6404:	4b0b      	ldr	r3, [pc, #44]	; (6434 <_calendar_init+0xb4>)
    6406:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    6408:	2300      	movs	r3, #0
}
    640a:	4618      	mov	r0, r3
    640c:	3708      	adds	r7, #8
    640e:	46bd      	mov	sp, r7
    6410:	bd80      	pop	{r7, pc}
    6412:	bf00      	nop
    6414:	00010648 	.word	0x00010648
    6418:	00003fd5 	.word	0x00003fd5
    641c:	20000be0 	.word	0x20000be0
    6420:	000062d1 	.word	0x000062d1
    6424:	0000630d 	.word	0x0000630d
    6428:	00006215 	.word	0x00006215
    642c:	000062a5 	.word	0x000062a5
    6430:	0000633d 	.word	0x0000633d
    6434:	00006365 	.word	0x00006365

00006438 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    6438:	b580      	push	{r7, lr}
    643a:	b084      	sub	sp, #16
    643c:	af00      	add	r7, sp, #0
    643e:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    6440:	687b      	ldr	r3, [r7, #4]
    6442:	681b      	ldr	r3, [r3, #0]
    6444:	4618      	mov	r0, r3
    6446:	4b19      	ldr	r3, [pc, #100]	; (64ac <_rtc_interrupt_handler+0x74>)
    6448:	4798      	blx	r3
    644a:	4603      	mov	r3, r0
    644c:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    644e:	687b      	ldr	r3, [r7, #4]
    6450:	681b      	ldr	r3, [r3, #0]
    6452:	4618      	mov	r0, r3
    6454:	4b16      	ldr	r3, [pc, #88]	; (64b0 <_rtc_interrupt_handler+0x78>)
    6456:	4798      	blx	r3
    6458:	4603      	mov	r3, r0
    645a:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    645c:	89fa      	ldrh	r2, [r7, #14]
    645e:	89bb      	ldrh	r3, [r7, #12]
    6460:	4013      	ands	r3, r2
    6462:	b29b      	uxth	r3, r3
    6464:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6468:	2b00      	cmp	r3, #0
    646a:	d009      	beq.n	6480 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    646c:	687b      	ldr	r3, [r7, #4]
    646e:	685b      	ldr	r3, [r3, #4]
    6470:	6878      	ldr	r0, [r7, #4]
    6472:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    6474:	687b      	ldr	r3, [r7, #4]
    6476:	681b      	ldr	r3, [r3, #0]
    6478:	4618      	mov	r0, r3
    647a:	4b0e      	ldr	r3, [pc, #56]	; (64b4 <_rtc_interrupt_handler+0x7c>)
    647c:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    647e:	e010      	b.n	64a2 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    6480:	89fa      	ldrh	r2, [r7, #14]
    6482:	89bb      	ldrh	r3, [r7, #12]
    6484:	4013      	ands	r3, r2
    6486:	b29b      	uxth	r3, r3
    6488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    648c:	2b00      	cmp	r3, #0
    648e:	d008      	beq.n	64a2 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    6490:	687b      	ldr	r3, [r7, #4]
    6492:	689b      	ldr	r3, [r3, #8]
    6494:	6878      	ldr	r0, [r7, #4]
    6496:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    6498:	687b      	ldr	r3, [r7, #4]
    649a:	681b      	ldr	r3, [r3, #0]
    649c:	4618      	mov	r0, r3
    649e:	4b06      	ldr	r3, [pc, #24]	; (64b8 <_rtc_interrupt_handler+0x80>)
    64a0:	4798      	blx	r3
}
    64a2:	bf00      	nop
    64a4:	3710      	adds	r7, #16
    64a6:	46bd      	mov	sp, r7
    64a8:	bd80      	pop	{r7, pc}
    64aa:	bf00      	nop
    64ac:	00006271 	.word	0x00006271
    64b0:	0000628b 	.word	0x0000628b
    64b4:	00006239 	.word	0x00006239
    64b8:	00006255 	.word	0x00006255

000064bc <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    64bc:	b580      	push	{r7, lr}
    64be:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    64c0:	4b03      	ldr	r3, [pc, #12]	; (64d0 <RTC_Handler+0x14>)
    64c2:	681b      	ldr	r3, [r3, #0]
    64c4:	4618      	mov	r0, r3
    64c6:	4b03      	ldr	r3, [pc, #12]	; (64d4 <RTC_Handler+0x18>)
    64c8:	4798      	blx	r3
}
    64ca:	bf00      	nop
    64cc:	bd80      	pop	{r7, pc}
    64ce:	bf00      	nop
    64d0:	20000be0 	.word	0x20000be0
    64d4:	00006439 	.word	0x00006439

000064d8 <__NVIC_EnableIRQ>:
{
    64d8:	b480      	push	{r7}
    64da:	b083      	sub	sp, #12
    64dc:	af00      	add	r7, sp, #0
    64de:	4603      	mov	r3, r0
    64e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    64e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    64e6:	2b00      	cmp	r3, #0
    64e8:	db0b      	blt.n	6502 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    64ea:	4909      	ldr	r1, [pc, #36]	; (6510 <__NVIC_EnableIRQ+0x38>)
    64ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    64f0:	095b      	lsrs	r3, r3, #5
    64f2:	88fa      	ldrh	r2, [r7, #6]
    64f4:	f002 021f 	and.w	r2, r2, #31
    64f8:	2001      	movs	r0, #1
    64fa:	fa00 f202 	lsl.w	r2, r0, r2
    64fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6502:	bf00      	nop
    6504:	370c      	adds	r7, #12
    6506:	46bd      	mov	sp, r7
    6508:	f85d 7b04 	ldr.w	r7, [sp], #4
    650c:	4770      	bx	lr
    650e:	bf00      	nop
    6510:	e000e100 	.word	0xe000e100

00006514 <__NVIC_DisableIRQ>:
{
    6514:	b480      	push	{r7}
    6516:	b083      	sub	sp, #12
    6518:	af00      	add	r7, sp, #0
    651a:	4603      	mov	r3, r0
    651c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    651e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6522:	2b00      	cmp	r3, #0
    6524:	db10      	blt.n	6548 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6526:	490b      	ldr	r1, [pc, #44]	; (6554 <__NVIC_DisableIRQ+0x40>)
    6528:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    652c:	095b      	lsrs	r3, r3, #5
    652e:	88fa      	ldrh	r2, [r7, #6]
    6530:	f002 021f 	and.w	r2, r2, #31
    6534:	2001      	movs	r0, #1
    6536:	fa00 f202 	lsl.w	r2, r0, r2
    653a:	3320      	adds	r3, #32
    653c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6540:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6544:	f3bf 8f6f 	isb	sy
}
    6548:	bf00      	nop
    654a:	370c      	adds	r7, #12
    654c:	46bd      	mov	sp, r7
    654e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6552:	4770      	bx	lr
    6554:	e000e100 	.word	0xe000e100

00006558 <__NVIC_ClearPendingIRQ>:
{
    6558:	b480      	push	{r7}
    655a:	b083      	sub	sp, #12
    655c:	af00      	add	r7, sp, #0
    655e:	4603      	mov	r3, r0
    6560:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6566:	2b00      	cmp	r3, #0
    6568:	db0c      	blt.n	6584 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    656a:	4909      	ldr	r1, [pc, #36]	; (6590 <__NVIC_ClearPendingIRQ+0x38>)
    656c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6570:	095b      	lsrs	r3, r3, #5
    6572:	88fa      	ldrh	r2, [r7, #6]
    6574:	f002 021f 	and.w	r2, r2, #31
    6578:	2001      	movs	r0, #1
    657a:	fa00 f202 	lsl.w	r2, r0, r2
    657e:	3360      	adds	r3, #96	; 0x60
    6580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6584:	bf00      	nop
    6586:	370c      	adds	r7, #12
    6588:	46bd      	mov	sp, r7
    658a:	f85d 7b04 	ldr.w	r7, [sp], #4
    658e:	4770      	bx	lr
    6590:	e000e100 	.word	0xe000e100

00006594 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6594:	b480      	push	{r7}
    6596:	b083      	sub	sp, #12
    6598:	af00      	add	r7, sp, #0
    659a:	6078      	str	r0, [r7, #4]
    659c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    659e:	bf00      	nop
    65a0:	687b      	ldr	r3, [r7, #4]
    65a2:	69da      	ldr	r2, [r3, #28]
    65a4:	683b      	ldr	r3, [r7, #0]
    65a6:	4013      	ands	r3, r2
    65a8:	2b00      	cmp	r3, #0
    65aa:	d1f9      	bne.n	65a0 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    65ac:	bf00      	nop
    65ae:	370c      	adds	r7, #12
    65b0:	46bd      	mov	sp, r7
    65b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    65b6:	4770      	bx	lr

000065b8 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    65b8:	b480      	push	{r7}
    65ba:	b083      	sub	sp, #12
    65bc:	af00      	add	r7, sp, #0
    65be:	6078      	str	r0, [r7, #4]
    65c0:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    65c2:	687b      	ldr	r3, [r7, #4]
    65c4:	69da      	ldr	r2, [r3, #28]
    65c6:	683b      	ldr	r3, [r7, #0]
    65c8:	4013      	ands	r3, r2
    65ca:	2b00      	cmp	r3, #0
    65cc:	bf14      	ite	ne
    65ce:	2301      	movne	r3, #1
    65d0:	2300      	moveq	r3, #0
    65d2:	b2db      	uxtb	r3, r3
}
    65d4:	4618      	mov	r0, r3
    65d6:	370c      	adds	r7, #12
    65d8:	46bd      	mov	sp, r7
    65da:	f85d 7b04 	ldr.w	r7, [sp], #4
    65de:	4770      	bx	lr

000065e0 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    65e0:	b480      	push	{r7}
    65e2:	b083      	sub	sp, #12
    65e4:	af00      	add	r7, sp, #0
    65e6:	6078      	str	r0, [r7, #4]
    65e8:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    65ea:	bf00      	nop
    65ec:	687b      	ldr	r3, [r7, #4]
    65ee:	69da      	ldr	r2, [r3, #28]
    65f0:	683b      	ldr	r3, [r7, #0]
    65f2:	4013      	ands	r3, r2
    65f4:	2b00      	cmp	r3, #0
    65f6:	d1f9      	bne.n	65ec <hri_sercomspi_wait_for_sync+0xc>
	};
}
    65f8:	bf00      	nop
    65fa:	370c      	adds	r7, #12
    65fc:	46bd      	mov	sp, r7
    65fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    6602:	4770      	bx	lr

00006604 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    6604:	b480      	push	{r7}
    6606:	b083      	sub	sp, #12
    6608:	af00      	add	r7, sp, #0
    660a:	6078      	str	r0, [r7, #4]
    660c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    660e:	687b      	ldr	r3, [r7, #4]
    6610:	69da      	ldr	r2, [r3, #28]
    6612:	683b      	ldr	r3, [r7, #0]
    6614:	4013      	ands	r3, r2
    6616:	2b00      	cmp	r3, #0
    6618:	bf14      	ite	ne
    661a:	2301      	movne	r3, #1
    661c:	2300      	moveq	r3, #0
    661e:	b2db      	uxtb	r3, r3
}
    6620:	4618      	mov	r0, r3
    6622:	370c      	adds	r7, #12
    6624:	46bd      	mov	sp, r7
    6626:	f85d 7b04 	ldr.w	r7, [sp], #4
    662a:	4770      	bx	lr

0000662c <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    662c:	b480      	push	{r7}
    662e:	b083      	sub	sp, #12
    6630:	af00      	add	r7, sp, #0
    6632:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    6634:	687b      	ldr	r3, [r7, #4]
    6636:	2201      	movs	r2, #1
    6638:	761a      	strb	r2, [r3, #24]
}
    663a:	bf00      	nop
    663c:	370c      	adds	r7, #12
    663e:	46bd      	mov	sp, r7
    6640:	f85d 7b04 	ldr.w	r7, [sp], #4
    6644:	4770      	bx	lr

00006646 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    6646:	b480      	push	{r7}
    6648:	b083      	sub	sp, #12
    664a:	af00      	add	r7, sp, #0
    664c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    664e:	687b      	ldr	r3, [r7, #4]
    6650:	2202      	movs	r2, #2
    6652:	761a      	strb	r2, [r3, #24]
}
    6654:	bf00      	nop
    6656:	370c      	adds	r7, #12
    6658:	46bd      	mov	sp, r7
    665a:	f85d 7b04 	ldr.w	r7, [sp], #4
    665e:	4770      	bx	lr

00006660 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    6660:	b480      	push	{r7}
    6662:	b083      	sub	sp, #12
    6664:	af00      	add	r7, sp, #0
    6666:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    6668:	687b      	ldr	r3, [r7, #4]
    666a:	7e1b      	ldrb	r3, [r3, #24]
    666c:	b2db      	uxtb	r3, r3
}
    666e:	4618      	mov	r0, r3
    6670:	370c      	adds	r7, #12
    6672:	46bd      	mov	sp, r7
    6674:	f85d 7b04 	ldr.w	r7, [sp], #4
    6678:	4770      	bx	lr

0000667a <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    667a:	b480      	push	{r7}
    667c:	b083      	sub	sp, #12
    667e:	af00      	add	r7, sp, #0
    6680:	6078      	str	r0, [r7, #4]
    6682:	460b      	mov	r3, r1
    6684:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    6686:	687b      	ldr	r3, [r7, #4]
    6688:	78fa      	ldrb	r2, [r7, #3]
    668a:	761a      	strb	r2, [r3, #24]
}
    668c:	bf00      	nop
    668e:	370c      	adds	r7, #12
    6690:	46bd      	mov	sp, r7
    6692:	f85d 7b04 	ldr.w	r7, [sp], #4
    6696:	4770      	bx	lr

00006698 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    6698:	b480      	push	{r7}
    669a:	b085      	sub	sp, #20
    669c:	af00      	add	r7, sp, #0
    669e:	6078      	str	r0, [r7, #4]
    66a0:	460b      	mov	r3, r1
    66a2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    66a4:	687b      	ldr	r3, [r7, #4]
    66a6:	7e1b      	ldrb	r3, [r3, #24]
    66a8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    66aa:	7bfa      	ldrb	r2, [r7, #15]
    66ac:	78fb      	ldrb	r3, [r7, #3]
    66ae:	4013      	ands	r3, r2
    66b0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    66b2:	7bfb      	ldrb	r3, [r7, #15]
}
    66b4:	4618      	mov	r0, r3
    66b6:	3714      	adds	r7, #20
    66b8:	46bd      	mov	sp, r7
    66ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    66be:	4770      	bx	lr

000066c0 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    66c0:	b480      	push	{r7}
    66c2:	b083      	sub	sp, #12
    66c4:	af00      	add	r7, sp, #0
    66c6:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    66c8:	687b      	ldr	r3, [r7, #4]
    66ca:	7e1b      	ldrb	r3, [r3, #24]
    66cc:	b2db      	uxtb	r3, r3
}
    66ce:	4618      	mov	r0, r3
    66d0:	370c      	adds	r7, #12
    66d2:	46bd      	mov	sp, r7
    66d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    66d8:	4770      	bx	lr

000066da <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    66da:	b480      	push	{r7}
    66dc:	b083      	sub	sp, #12
    66de:	af00      	add	r7, sp, #0
    66e0:	6078      	str	r0, [r7, #4]
    66e2:	460b      	mov	r3, r1
    66e4:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    66e6:	687b      	ldr	r3, [r7, #4]
    66e8:	78fa      	ldrb	r2, [r7, #3]
    66ea:	761a      	strb	r2, [r3, #24]
}
    66ec:	bf00      	nop
    66ee:	370c      	adds	r7, #12
    66f0:	46bd      	mov	sp, r7
    66f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    66f6:	4770      	bx	lr

000066f8 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    66f8:	b580      	push	{r7, lr}
    66fa:	b082      	sub	sp, #8
    66fc:	af00      	add	r7, sp, #0
    66fe:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    6700:	687b      	ldr	r3, [r7, #4]
    6702:	681b      	ldr	r3, [r3, #0]
    6704:	f043 0202 	orr.w	r2, r3, #2
    6708:	687b      	ldr	r3, [r7, #4]
    670a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    670c:	2103      	movs	r1, #3
    670e:	6878      	ldr	r0, [r7, #4]
    6710:	4b02      	ldr	r3, [pc, #8]	; (671c <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    6712:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6714:	bf00      	nop
    6716:	3708      	adds	r7, #8
    6718:	46bd      	mov	sp, r7
    671a:	bd80      	pop	{r7, pc}
    671c:	00006595 	.word	0x00006595

00006720 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6720:	b580      	push	{r7, lr}
    6722:	b082      	sub	sp, #8
    6724:	af00      	add	r7, sp, #0
    6726:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6728:	687b      	ldr	r3, [r7, #4]
    672a:	681b      	ldr	r3, [r3, #0]
    672c:	f023 0202 	bic.w	r2, r3, #2
    6730:	687b      	ldr	r3, [r7, #4]
    6732:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6734:	2103      	movs	r1, #3
    6736:	6878      	ldr	r0, [r7, #4]
    6738:	4b02      	ldr	r3, [pc, #8]	; (6744 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    673a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    673c:	bf00      	nop
    673e:	3708      	adds	r7, #8
    6740:	46bd      	mov	sp, r7
    6742:	bd80      	pop	{r7, pc}
    6744:	00006595 	.word	0x00006595

00006748 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    6748:	b480      	push	{r7}
    674a:	b085      	sub	sp, #20
    674c:	af00      	add	r7, sp, #0
    674e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6750:	687b      	ldr	r3, [r7, #4]
    6752:	681b      	ldr	r3, [r3, #0]
    6754:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    6756:	68fb      	ldr	r3, [r7, #12]
    6758:	0edb      	lsrs	r3, r3, #27
    675a:	f003 0301 	and.w	r3, r3, #1
    675e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6760:	68fb      	ldr	r3, [r7, #12]
    6762:	2b00      	cmp	r3, #0
    6764:	bf14      	ite	ne
    6766:	2301      	movne	r3, #1
    6768:	2300      	moveq	r3, #0
    676a:	b2db      	uxtb	r3, r3
}
    676c:	4618      	mov	r0, r3
    676e:	3714      	adds	r7, #20
    6770:	46bd      	mov	sp, r7
    6772:	f85d 7b04 	ldr.w	r7, [sp], #4
    6776:	4770      	bx	lr

00006778 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    6778:	b580      	push	{r7, lr}
    677a:	b084      	sub	sp, #16
    677c:	af00      	add	r7, sp, #0
    677e:	6078      	str	r0, [r7, #4]
    6780:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6782:	2103      	movs	r1, #3
    6784:	6878      	ldr	r0, [r7, #4]
    6786:	4b07      	ldr	r3, [pc, #28]	; (67a4 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    6788:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    678a:	687b      	ldr	r3, [r7, #4]
    678c:	681b      	ldr	r3, [r3, #0]
    678e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6790:	68fa      	ldr	r2, [r7, #12]
    6792:	683b      	ldr	r3, [r7, #0]
    6794:	4013      	ands	r3, r2
    6796:	60fb      	str	r3, [r7, #12]
	return tmp;
    6798:	68fb      	ldr	r3, [r7, #12]
}
    679a:	4618      	mov	r0, r3
    679c:	3710      	adds	r7, #16
    679e:	46bd      	mov	sp, r7
    67a0:	bd80      	pop	{r7, pc}
    67a2:	bf00      	nop
    67a4:	00006595 	.word	0x00006595

000067a8 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    67a8:	b580      	push	{r7, lr}
    67aa:	b082      	sub	sp, #8
    67ac:	af00      	add	r7, sp, #0
    67ae:	6078      	str	r0, [r7, #4]
    67b0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    67b2:	687b      	ldr	r3, [r7, #4]
    67b4:	683a      	ldr	r2, [r7, #0]
    67b6:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    67b8:	2103      	movs	r1, #3
    67ba:	6878      	ldr	r0, [r7, #4]
    67bc:	4b02      	ldr	r3, [pc, #8]	; (67c8 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    67be:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    67c0:	bf00      	nop
    67c2:	3708      	adds	r7, #8
    67c4:	46bd      	mov	sp, r7
    67c6:	bd80      	pop	{r7, pc}
    67c8:	00006595 	.word	0x00006595

000067cc <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    67cc:	b580      	push	{r7, lr}
    67ce:	b082      	sub	sp, #8
    67d0:	af00      	add	r7, sp, #0
    67d2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    67d4:	687b      	ldr	r3, [r7, #4]
    67d6:	681b      	ldr	r3, [r3, #0]
    67d8:	f043 0202 	orr.w	r2, r3, #2
    67dc:	687b      	ldr	r3, [r7, #4]
    67de:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    67e0:	2103      	movs	r1, #3
    67e2:	6878      	ldr	r0, [r7, #4]
    67e4:	4b02      	ldr	r3, [pc, #8]	; (67f0 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    67e6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    67e8:	bf00      	nop
    67ea:	3708      	adds	r7, #8
    67ec:	46bd      	mov	sp, r7
    67ee:	bd80      	pop	{r7, pc}
    67f0:	000065e1 	.word	0x000065e1

000067f4 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    67f4:	b580      	push	{r7, lr}
    67f6:	b084      	sub	sp, #16
    67f8:	af00      	add	r7, sp, #0
    67fa:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    67fc:	2103      	movs	r1, #3
    67fe:	6878      	ldr	r0, [r7, #4]
    6800:	4b09      	ldr	r3, [pc, #36]	; (6828 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    6802:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6804:	687b      	ldr	r3, [r7, #4]
    6806:	681b      	ldr	r3, [r3, #0]
    6808:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    680a:	68fb      	ldr	r3, [r7, #12]
    680c:	085b      	lsrs	r3, r3, #1
    680e:	f003 0301 	and.w	r3, r3, #1
    6812:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6814:	68fb      	ldr	r3, [r7, #12]
    6816:	2b00      	cmp	r3, #0
    6818:	bf14      	ite	ne
    681a:	2301      	movne	r3, #1
    681c:	2300      	moveq	r3, #0
    681e:	b2db      	uxtb	r3, r3
}
    6820:	4618      	mov	r0, r3
    6822:	3710      	adds	r7, #16
    6824:	46bd      	mov	sp, r7
    6826:	bd80      	pop	{r7, pc}
    6828:	000065e1 	.word	0x000065e1

0000682c <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    682c:	b580      	push	{r7, lr}
    682e:	b082      	sub	sp, #8
    6830:	af00      	add	r7, sp, #0
    6832:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6834:	687b      	ldr	r3, [r7, #4]
    6836:	681b      	ldr	r3, [r3, #0]
    6838:	f023 0202 	bic.w	r2, r3, #2
    683c:	687b      	ldr	r3, [r7, #4]
    683e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6840:	2103      	movs	r1, #3
    6842:	6878      	ldr	r0, [r7, #4]
    6844:	4b02      	ldr	r3, [pc, #8]	; (6850 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    6846:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6848:	bf00      	nop
    684a:	3708      	adds	r7, #8
    684c:	46bd      	mov	sp, r7
    684e:	bd80      	pop	{r7, pc}
    6850:	000065e1 	.word	0x000065e1

00006854 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    6854:	b580      	push	{r7, lr}
    6856:	b084      	sub	sp, #16
    6858:	af00      	add	r7, sp, #0
    685a:	6078      	str	r0, [r7, #4]
    685c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    685e:	2103      	movs	r1, #3
    6860:	6878      	ldr	r0, [r7, #4]
    6862:	4b07      	ldr	r3, [pc, #28]	; (6880 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    6864:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6866:	687b      	ldr	r3, [r7, #4]
    6868:	681b      	ldr	r3, [r3, #0]
    686a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    686c:	68fa      	ldr	r2, [r7, #12]
    686e:	683b      	ldr	r3, [r7, #0]
    6870:	4013      	ands	r3, r2
    6872:	60fb      	str	r3, [r7, #12]
	return tmp;
    6874:	68fb      	ldr	r3, [r7, #12]
}
    6876:	4618      	mov	r0, r3
    6878:	3710      	adds	r7, #16
    687a:	46bd      	mov	sp, r7
    687c:	bd80      	pop	{r7, pc}
    687e:	bf00      	nop
    6880:	000065e1 	.word	0x000065e1

00006884 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    6884:	b580      	push	{r7, lr}
    6886:	b082      	sub	sp, #8
    6888:	af00      	add	r7, sp, #0
    688a:	6078      	str	r0, [r7, #4]
    688c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    688e:	687b      	ldr	r3, [r7, #4]
    6890:	683a      	ldr	r2, [r7, #0]
    6892:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6894:	2103      	movs	r1, #3
    6896:	6878      	ldr	r0, [r7, #4]
    6898:	4b02      	ldr	r3, [pc, #8]	; (68a4 <hri_sercomspi_write_CTRLA_reg+0x20>)
    689a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    689c:	bf00      	nop
    689e:	3708      	adds	r7, #8
    68a0:	46bd      	mov	sp, r7
    68a2:	bd80      	pop	{r7, pc}
    68a4:	000065e1 	.word	0x000065e1

000068a8 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    68a8:	b580      	push	{r7, lr}
    68aa:	b082      	sub	sp, #8
    68ac:	af00      	add	r7, sp, #0
    68ae:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    68b0:	687b      	ldr	r3, [r7, #4]
    68b2:	685b      	ldr	r3, [r3, #4]
    68b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    68b8:	687b      	ldr	r3, [r7, #4]
    68ba:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    68bc:	2104      	movs	r1, #4
    68be:	6878      	ldr	r0, [r7, #4]
    68c0:	4b02      	ldr	r3, [pc, #8]	; (68cc <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    68c2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    68c4:	bf00      	nop
    68c6:	3708      	adds	r7, #8
    68c8:	46bd      	mov	sp, r7
    68ca:	bd80      	pop	{r7, pc}
    68cc:	00006595 	.word	0x00006595

000068d0 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    68d0:	b580      	push	{r7, lr}
    68d2:	b082      	sub	sp, #8
    68d4:	af00      	add	r7, sp, #0
    68d6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    68d8:	687b      	ldr	r3, [r7, #4]
    68da:	685b      	ldr	r3, [r3, #4]
    68dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    68e0:	687b      	ldr	r3, [r7, #4]
    68e2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    68e4:	2104      	movs	r1, #4
    68e6:	6878      	ldr	r0, [r7, #4]
    68e8:	4b02      	ldr	r3, [pc, #8]	; (68f4 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    68ea:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    68ec:	bf00      	nop
    68ee:	3708      	adds	r7, #8
    68f0:	46bd      	mov	sp, r7
    68f2:	bd80      	pop	{r7, pc}
    68f4:	00006595 	.word	0x00006595

000068f8 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    68f8:	b580      	push	{r7, lr}
    68fa:	b082      	sub	sp, #8
    68fc:	af00      	add	r7, sp, #0
    68fe:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6900:	687b      	ldr	r3, [r7, #4]
    6902:	685b      	ldr	r3, [r3, #4]
    6904:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    6908:	687b      	ldr	r3, [r7, #4]
    690a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    690c:	2104      	movs	r1, #4
    690e:	6878      	ldr	r0, [r7, #4]
    6910:	4b02      	ldr	r3, [pc, #8]	; (691c <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    6912:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6914:	bf00      	nop
    6916:	3708      	adds	r7, #8
    6918:	46bd      	mov	sp, r7
    691a:	bd80      	pop	{r7, pc}
    691c:	00006595 	.word	0x00006595

00006920 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    6920:	b580      	push	{r7, lr}
    6922:	b082      	sub	sp, #8
    6924:	af00      	add	r7, sp, #0
    6926:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6928:	687b      	ldr	r3, [r7, #4]
    692a:	685b      	ldr	r3, [r3, #4]
    692c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    6930:	687b      	ldr	r3, [r7, #4]
    6932:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6934:	2104      	movs	r1, #4
    6936:	6878      	ldr	r0, [r7, #4]
    6938:	4b02      	ldr	r3, [pc, #8]	; (6944 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    693a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    693c:	bf00      	nop
    693e:	3708      	adds	r7, #8
    6940:	46bd      	mov	sp, r7
    6942:	bd80      	pop	{r7, pc}
    6944:	00006595 	.word	0x00006595

00006948 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    6948:	b580      	push	{r7, lr}
    694a:	b082      	sub	sp, #8
    694c:	af00      	add	r7, sp, #0
    694e:	6078      	str	r0, [r7, #4]
    6950:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6952:	687b      	ldr	r3, [r7, #4]
    6954:	685a      	ldr	r2, [r3, #4]
    6956:	683b      	ldr	r3, [r7, #0]
    6958:	041b      	lsls	r3, r3, #16
    695a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    695e:	431a      	orrs	r2, r3
    6960:	687b      	ldr	r3, [r7, #4]
    6962:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6964:	2104      	movs	r1, #4
    6966:	6878      	ldr	r0, [r7, #4]
    6968:	4b02      	ldr	r3, [pc, #8]	; (6974 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    696a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    696c:	bf00      	nop
    696e:	3708      	adds	r7, #8
    6970:	46bd      	mov	sp, r7
    6972:	bd80      	pop	{r7, pc}
    6974:	00006595 	.word	0x00006595

00006978 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    6978:	b580      	push	{r7, lr}
    697a:	b082      	sub	sp, #8
    697c:	af00      	add	r7, sp, #0
    697e:	6078      	str	r0, [r7, #4]
    6980:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    6982:	687b      	ldr	r3, [r7, #4]
    6984:	683a      	ldr	r2, [r7, #0]
    6986:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6988:	2104      	movs	r1, #4
    698a:	6878      	ldr	r0, [r7, #4]
    698c:	4b02      	ldr	r3, [pc, #8]	; (6998 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    698e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6990:	bf00      	nop
    6992:	3708      	adds	r7, #8
    6994:	46bd      	mov	sp, r7
    6996:	bd80      	pop	{r7, pc}
    6998:	00006595 	.word	0x00006595

0000699c <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    699c:	b580      	push	{r7, lr}
    699e:	b082      	sub	sp, #8
    69a0:	af00      	add	r7, sp, #0
    69a2:	6078      	str	r0, [r7, #4]
    69a4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    69a6:	687b      	ldr	r3, [r7, #4]
    69a8:	683a      	ldr	r2, [r7, #0]
    69aa:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    69ac:	2117      	movs	r1, #23
    69ae:	6878      	ldr	r0, [r7, #4]
    69b0:	4b02      	ldr	r3, [pc, #8]	; (69bc <hri_sercomspi_write_CTRLB_reg+0x20>)
    69b2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    69b4:	bf00      	nop
    69b6:	3708      	adds	r7, #8
    69b8:	46bd      	mov	sp, r7
    69ba:	bd80      	pop	{r7, pc}
    69bc:	000065e1 	.word	0x000065e1

000069c0 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    69c0:	b480      	push	{r7}
    69c2:	b083      	sub	sp, #12
    69c4:	af00      	add	r7, sp, #0
    69c6:	6078      	str	r0, [r7, #4]
    69c8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    69ca:	687b      	ldr	r3, [r7, #4]
    69cc:	683a      	ldr	r2, [r7, #0]
    69ce:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    69d0:	bf00      	nop
    69d2:	370c      	adds	r7, #12
    69d4:	46bd      	mov	sp, r7
    69d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    69da:	4770      	bx	lr

000069dc <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    69dc:	b480      	push	{r7}
    69de:	b083      	sub	sp, #12
    69e0:	af00      	add	r7, sp, #0
    69e2:	6078      	str	r0, [r7, #4]
    69e4:	460b      	mov	r3, r1
    69e6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    69e8:	687b      	ldr	r3, [r7, #4]
    69ea:	78fa      	ldrb	r2, [r7, #3]
    69ec:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    69ee:	bf00      	nop
    69f0:	370c      	adds	r7, #12
    69f2:	46bd      	mov	sp, r7
    69f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    69f8:	4770      	bx	lr
	...

000069fc <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    69fc:	b580      	push	{r7, lr}
    69fe:	b084      	sub	sp, #16
    6a00:	af00      	add	r7, sp, #0
    6a02:	6078      	str	r0, [r7, #4]
    6a04:	460b      	mov	r3, r1
    6a06:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6a08:	687b      	ldr	r3, [r7, #4]
    6a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a0c:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    6a0e:	68fb      	ldr	r3, [r7, #12]
    6a10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    6a14:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    6a16:	78fb      	ldrb	r3, [r7, #3]
    6a18:	039b      	lsls	r3, r3, #14
    6a1a:	461a      	mov	r2, r3
    6a1c:	68fb      	ldr	r3, [r7, #12]
    6a1e:	4313      	orrs	r3, r2
    6a20:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    6a22:	687b      	ldr	r3, [r7, #4]
    6a24:	68fa      	ldr	r2, [r7, #12]
    6a26:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6a28:	2104      	movs	r1, #4
    6a2a:	6878      	ldr	r0, [r7, #4]
    6a2c:	4b02      	ldr	r3, [pc, #8]	; (6a38 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    6a2e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a30:	bf00      	nop
    6a32:	3710      	adds	r7, #16
    6a34:	46bd      	mov	sp, r7
    6a36:	bd80      	pop	{r7, pc}
    6a38:	00006595 	.word	0x00006595

00006a3c <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    6a3c:	b580      	push	{r7, lr}
    6a3e:	b082      	sub	sp, #8
    6a40:	af00      	add	r7, sp, #0
    6a42:	6078      	str	r0, [r7, #4]
    6a44:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6a46:	687b      	ldr	r3, [r7, #4]
    6a48:	683a      	ldr	r2, [r7, #0]
    6a4a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6a4c:	2104      	movs	r1, #4
    6a4e:	6878      	ldr	r0, [r7, #4]
    6a50:	4b02      	ldr	r3, [pc, #8]	; (6a5c <hri_sercomi2cm_write_ADDR_reg+0x20>)
    6a52:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a54:	bf00      	nop
    6a56:	3708      	adds	r7, #8
    6a58:	46bd      	mov	sp, r7
    6a5a:	bd80      	pop	{r7, pc}
    6a5c:	00006595 	.word	0x00006595

00006a60 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    6a60:	b580      	push	{r7, lr}
    6a62:	b082      	sub	sp, #8
    6a64:	af00      	add	r7, sp, #0
    6a66:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6a68:	2104      	movs	r1, #4
    6a6a:	6878      	ldr	r0, [r7, #4]
    6a6c:	4b03      	ldr	r3, [pc, #12]	; (6a7c <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    6a6e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6a70:	687b      	ldr	r3, [r7, #4]
    6a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    6a74:	4618      	mov	r0, r3
    6a76:	3708      	adds	r7, #8
    6a78:	46bd      	mov	sp, r7
    6a7a:	bd80      	pop	{r7, pc}
    6a7c:	00006595 	.word	0x00006595

00006a80 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    6a80:	b480      	push	{r7}
    6a82:	b083      	sub	sp, #12
    6a84:	af00      	add	r7, sp, #0
    6a86:	6078      	str	r0, [r7, #4]
    6a88:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    6a8a:	687b      	ldr	r3, [r7, #4]
    6a8c:	683a      	ldr	r2, [r7, #0]
    6a8e:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a90:	bf00      	nop
    6a92:	370c      	adds	r7, #12
    6a94:	46bd      	mov	sp, r7
    6a96:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a9a:	4770      	bx	lr

00006a9c <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    6a9c:	b580      	push	{r7, lr}
    6a9e:	b082      	sub	sp, #8
    6aa0:	af00      	add	r7, sp, #0
    6aa2:	6078      	str	r0, [r7, #4]
    6aa4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6aa6:	687b      	ldr	r3, [r7, #4]
    6aa8:	683a      	ldr	r2, [r7, #0]
    6aaa:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6aac:	2104      	movs	r1, #4
    6aae:	6878      	ldr	r0, [r7, #4]
    6ab0:	4b02      	ldr	r3, [pc, #8]	; (6abc <hri_sercomi2cm_write_DATA_reg+0x20>)
    6ab2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6ab4:	bf00      	nop
    6ab6:	3708      	adds	r7, #8
    6ab8:	46bd      	mov	sp, r7
    6aba:	bd80      	pop	{r7, pc}
    6abc:	00006595 	.word	0x00006595

00006ac0 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6ac0:	b580      	push	{r7, lr}
    6ac2:	b082      	sub	sp, #8
    6ac4:	af00      	add	r7, sp, #0
    6ac6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6ac8:	2104      	movs	r1, #4
    6aca:	6878      	ldr	r0, [r7, #4]
    6acc:	4b03      	ldr	r3, [pc, #12]	; (6adc <hri_sercomi2cm_read_DATA_reg+0x1c>)
    6ace:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6ad0:	687b      	ldr	r3, [r7, #4]
    6ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6ad4:	4618      	mov	r0, r3
    6ad6:	3708      	adds	r7, #8
    6ad8:	46bd      	mov	sp, r7
    6ada:	bd80      	pop	{r7, pc}
    6adc:	00006595 	.word	0x00006595

00006ae0 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6ae0:	b480      	push	{r7}
    6ae2:	b083      	sub	sp, #12
    6ae4:	af00      	add	r7, sp, #0
    6ae6:	6078      	str	r0, [r7, #4]
    6ae8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    6aea:	687b      	ldr	r3, [r7, #4]
    6aec:	683a      	ldr	r2, [r7, #0]
    6aee:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6af0:	bf00      	nop
    6af2:	370c      	adds	r7, #12
    6af4:	46bd      	mov	sp, r7
    6af6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6afa:	4770      	bx	lr

00006afc <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    6afc:	b480      	push	{r7}
    6afe:	b083      	sub	sp, #12
    6b00:	af00      	add	r7, sp, #0
    6b02:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    6b04:	687b      	ldr	r3, [r7, #4]
    6b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6b08:	4618      	mov	r0, r3
    6b0a:	370c      	adds	r7, #12
    6b0c:	46bd      	mov	sp, r7
    6b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b12:	4770      	bx	lr

00006b14 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    6b14:	b480      	push	{r7}
    6b16:	b083      	sub	sp, #12
    6b18:	af00      	add	r7, sp, #0
    6b1a:	6078      	str	r0, [r7, #4]
    6b1c:	460b      	mov	r3, r1
    6b1e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6b20:	687b      	ldr	r3, [r7, #4]
    6b22:	78fa      	ldrb	r2, [r7, #3]
    6b24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6b28:	bf00      	nop
    6b2a:	370c      	adds	r7, #12
    6b2c:	46bd      	mov	sp, r7
    6b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b32:	4770      	bx	lr

00006b34 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    6b34:	b480      	push	{r7}
    6b36:	b083      	sub	sp, #12
    6b38:	af00      	add	r7, sp, #0
    6b3a:	6078      	str	r0, [r7, #4]
    6b3c:	460b      	mov	r3, r1
    6b3e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6b40:	687b      	ldr	r3, [r7, #4]
    6b42:	887a      	ldrh	r2, [r7, #2]
    6b44:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6b46:	bf00      	nop
    6b48:	370c      	adds	r7, #12
    6b4a:	46bd      	mov	sp, r7
    6b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b50:	4770      	bx	lr
	...

00006b54 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    6b54:	b580      	push	{r7, lr}
    6b56:	b082      	sub	sp, #8
    6b58:	af00      	add	r7, sp, #0
    6b5a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6b5c:	2104      	movs	r1, #4
    6b5e:	6878      	ldr	r0, [r7, #4]
    6b60:	4b06      	ldr	r3, [pc, #24]	; (6b7c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    6b62:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    6b64:	687b      	ldr	r3, [r7, #4]
    6b66:	8b5b      	ldrh	r3, [r3, #26]
    6b68:	b29b      	uxth	r3, r3
    6b6a:	091b      	lsrs	r3, r3, #4
    6b6c:	b29b      	uxth	r3, r3
    6b6e:	f003 0303 	and.w	r3, r3, #3
    6b72:	b29b      	uxth	r3, r3
}
    6b74:	4618      	mov	r0, r3
    6b76:	3708      	adds	r7, #8
    6b78:	46bd      	mov	sp, r7
    6b7a:	bd80      	pop	{r7, pc}
    6b7c:	00006595 	.word	0x00006595

00006b80 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6b80:	b580      	push	{r7, lr}
    6b82:	b082      	sub	sp, #8
    6b84:	af00      	add	r7, sp, #0
    6b86:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6b88:	2104      	movs	r1, #4
    6b8a:	6878      	ldr	r0, [r7, #4]
    6b8c:	4b04      	ldr	r3, [pc, #16]	; (6ba0 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    6b8e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6b90:	687b      	ldr	r3, [r7, #4]
    6b92:	8b5b      	ldrh	r3, [r3, #26]
    6b94:	b29b      	uxth	r3, r3
}
    6b96:	4618      	mov	r0, r3
    6b98:	3708      	adds	r7, #8
    6b9a:	46bd      	mov	sp, r7
    6b9c:	bd80      	pop	{r7, pc}
    6b9e:	bf00      	nop
    6ba0:	00006595 	.word	0x00006595

00006ba4 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    6ba4:	b580      	push	{r7, lr}
    6ba6:	b082      	sub	sp, #8
    6ba8:	af00      	add	r7, sp, #0
    6baa:	6078      	str	r0, [r7, #4]
    6bac:	460b      	mov	r3, r1
    6bae:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    6bb0:	687b      	ldr	r3, [r7, #4]
    6bb2:	887a      	ldrh	r2, [r7, #2]
    6bb4:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6bb6:	2104      	movs	r1, #4
    6bb8:	6878      	ldr	r0, [r7, #4]
    6bba:	4b03      	ldr	r3, [pc, #12]	; (6bc8 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    6bbc:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6bbe:	bf00      	nop
    6bc0:	3708      	adds	r7, #8
    6bc2:	46bd      	mov	sp, r7
    6bc4:	bd80      	pop	{r7, pc}
    6bc6:	bf00      	nop
    6bc8:	00006595 	.word	0x00006595

00006bcc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6bcc:	b4b0      	push	{r4, r5, r7}
    6bce:	b08d      	sub	sp, #52	; 0x34
    6bd0:	af00      	add	r7, sp, #0
    6bd2:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6bd4:	4b13      	ldr	r3, [pc, #76]	; (6c24 <_sercom_get_hardware_index+0x58>)
    6bd6:	f107 040c 	add.w	r4, r7, #12
    6bda:	461d      	mov	r5, r3
    6bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6be0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6be4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6be8:	2300      	movs	r3, #0
    6bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    6bec:	e010      	b.n	6c10 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6bf0:	009b      	lsls	r3, r3, #2
    6bf2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    6bf6:	4413      	add	r3, r2
    6bf8:	f853 3c24 	ldr.w	r3, [r3, #-36]
    6bfc:	461a      	mov	r2, r3
    6bfe:	687b      	ldr	r3, [r7, #4]
    6c00:	429a      	cmp	r2, r3
    6c02:	d102      	bne.n	6c0a <_sercom_get_hardware_index+0x3e>
			return i;
    6c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6c06:	b2db      	uxtb	r3, r3
    6c08:	e006      	b.n	6c18 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6c0c:	3301      	adds	r3, #1
    6c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    6c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6c12:	2b07      	cmp	r3, #7
    6c14:	d9eb      	bls.n	6bee <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    6c16:	2300      	movs	r3, #0
}
    6c18:	4618      	mov	r0, r3
    6c1a:	3734      	adds	r7, #52	; 0x34
    6c1c:	46bd      	mov	sp, r7
    6c1e:	bcb0      	pop	{r4, r5, r7}
    6c20:	4770      	bx	lr
    6c22:	bf00      	nop
    6c24:	0001067c 	.word	0x0001067c

00006c28 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    6c28:	b480      	push	{r7}
    6c2a:	b083      	sub	sp, #12
    6c2c:	af00      	add	r7, sp, #0
    6c2e:	6078      	str	r0, [r7, #4]
    6c30:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM7) {
    6c32:	687b      	ldr	r3, [r7, #4]
    6c34:	4a05      	ldr	r2, [pc, #20]	; (6c4c <_sercom_init_irq_param+0x24>)
    6c36:	4293      	cmp	r3, r2
    6c38:	d102      	bne.n	6c40 <_sercom_init_irq_param+0x18>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    6c3a:	4a05      	ldr	r2, [pc, #20]	; (6c50 <_sercom_init_irq_param+0x28>)
    6c3c:	683b      	ldr	r3, [r7, #0]
    6c3e:	6013      	str	r3, [r2, #0]
	}
}
    6c40:	bf00      	nop
    6c42:	370c      	adds	r7, #12
    6c44:	46bd      	mov	sp, r7
    6c46:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c4a:	4770      	bx	lr
    6c4c:	43000c00 	.word	0x43000c00
    6c50:	20000bfc 	.word	0x20000bfc

00006c54 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6c54:	b580      	push	{r7, lr}
    6c56:	b084      	sub	sp, #16
    6c58:	af00      	add	r7, sp, #0
    6c5a:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6c5c:	6878      	ldr	r0, [r7, #4]
    6c5e:	4b13      	ldr	r3, [pc, #76]	; (6cac <_get_i2cm_index+0x58>)
    6c60:	4798      	blx	r3
    6c62:	4603      	mov	r3, r0
    6c64:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6c66:	2300      	movs	r3, #0
    6c68:	73fb      	strb	r3, [r7, #15]
    6c6a:	e010      	b.n	6c8e <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    6c6c:	7bfa      	ldrb	r2, [r7, #15]
    6c6e:	4910      	ldr	r1, [pc, #64]	; (6cb0 <_get_i2cm_index+0x5c>)
    6c70:	4613      	mov	r3, r2
    6c72:	005b      	lsls	r3, r3, #1
    6c74:	4413      	add	r3, r2
    6c76:	00db      	lsls	r3, r3, #3
    6c78:	440b      	add	r3, r1
    6c7a:	781b      	ldrb	r3, [r3, #0]
    6c7c:	7bba      	ldrb	r2, [r7, #14]
    6c7e:	429a      	cmp	r2, r3
    6c80:	d102      	bne.n	6c88 <_get_i2cm_index+0x34>
			return i;
    6c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6c86:	e00d      	b.n	6ca4 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6c88:	7bfb      	ldrb	r3, [r7, #15]
    6c8a:	3301      	adds	r3, #1
    6c8c:	73fb      	strb	r3, [r7, #15]
    6c8e:	7bfb      	ldrb	r3, [r7, #15]
    6c90:	2b02      	cmp	r3, #2
    6c92:	d9eb      	bls.n	6c6c <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6c94:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    6c98:	4906      	ldr	r1, [pc, #24]	; (6cb4 <_get_i2cm_index+0x60>)
    6c9a:	2000      	movs	r0, #0
    6c9c:	4b06      	ldr	r3, [pc, #24]	; (6cb8 <_get_i2cm_index+0x64>)
    6c9e:	4798      	blx	r3
	return -1;
    6ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
    6ca4:	4618      	mov	r0, r3
    6ca6:	3710      	adds	r7, #16
    6ca8:	46bd      	mov	sp, r7
    6caa:	bd80      	pop	{r7, pc}
    6cac:	00006bcd 	.word	0x00006bcd
    6cb0:	20000018 	.word	0x20000018
    6cb4:	00010660 	.word	0x00010660
    6cb8:	00003fd5 	.word	0x00003fd5

00006cbc <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    6cbc:	b580      	push	{r7, lr}
    6cbe:	b082      	sub	sp, #8
    6cc0:	af00      	add	r7, sp, #0
    6cc2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    6cc4:	2103      	movs	r1, #3
    6cc6:	6878      	ldr	r0, [r7, #4]
    6cc8:	4b02      	ldr	r3, [pc, #8]	; (6cd4 <_sercom_i2c_send_stop+0x18>)
    6cca:	4798      	blx	r3
}
    6ccc:	bf00      	nop
    6cce:	3708      	adds	r7, #8
    6cd0:	46bd      	mov	sp, r7
    6cd2:	bd80      	pop	{r7, pc}
    6cd4:	00006949 	.word	0x00006949

00006cd8 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    6cd8:	b590      	push	{r4, r7, lr}
    6cda:	b087      	sub	sp, #28
    6cdc:	af00      	add	r7, sp, #0
    6cde:	60f8      	str	r0, [r7, #12]
    6ce0:	60b9      	str	r1, [r7, #8]
    6ce2:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6ce4:	68f8      	ldr	r0, [r7, #12]
    6ce6:	4b7d      	ldr	r3, [pc, #500]	; (6edc <_sercom_i2c_sync_analyse_flags+0x204>)
    6ce8:	4798      	blx	r3
    6cea:	4603      	mov	r3, r0
    6cec:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    6cee:	68f8      	ldr	r0, [r7, #12]
    6cf0:	4b7b      	ldr	r3, [pc, #492]	; (6ee0 <_sercom_i2c_sync_analyse_flags+0x208>)
    6cf2:	4798      	blx	r3
    6cf4:	4603      	mov	r3, r0
    6cf6:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    6cf8:	68bb      	ldr	r3, [r7, #8]
    6cfa:	f003 0301 	and.w	r3, r3, #1
    6cfe:	2b00      	cmp	r3, #0
    6d00:	f000 8095 	beq.w	6e2e <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6d04:	8a7b      	ldrh	r3, [r7, #18]
    6d06:	f003 0302 	and.w	r3, r3, #2
    6d0a:	2b00      	cmp	r3, #0
    6d0c:	d01d      	beq.n	6d4a <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    6d0e:	68f8      	ldr	r0, [r7, #12]
    6d10:	4b74      	ldr	r3, [pc, #464]	; (6ee4 <_sercom_i2c_sync_analyse_flags+0x20c>)
    6d12:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6d14:	687b      	ldr	r3, [r7, #4]
    6d16:	885b      	ldrh	r3, [r3, #2]
    6d18:	b29b      	uxth	r3, r3
    6d1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6d1e:	b29a      	uxth	r2, r3
    6d20:	687b      	ldr	r3, [r7, #4]
    6d22:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6d24:	687b      	ldr	r3, [r7, #4]
    6d26:	885b      	ldrh	r3, [r3, #2]
    6d28:	b29b      	uxth	r3, r3
    6d2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6d2e:	b29a      	uxth	r2, r3
    6d30:	687b      	ldr	r3, [r7, #4]
    6d32:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6d34:	8a7b      	ldrh	r3, [r7, #18]
    6d36:	f003 0301 	and.w	r3, r3, #1
    6d3a:	2b00      	cmp	r3, #0
    6d3c:	d002      	beq.n	6d44 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    6d3e:	f06f 0304 	mvn.w	r3, #4
    6d42:	e0c6      	b.n	6ed2 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6d44:	f06f 0303 	mvn.w	r3, #3
    6d48:	e0c3      	b.n	6ed2 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6d4a:	8a7b      	ldrh	r3, [r7, #18]
    6d4c:	f003 0304 	and.w	r3, r3, #4
    6d50:	2b00      	cmp	r3, #0
    6d52:	d01f      	beq.n	6d94 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6d54:	687b      	ldr	r3, [r7, #4]
    6d56:	685b      	ldr	r3, [r3, #4]
    6d58:	2b00      	cmp	r3, #0
    6d5a:	dd07      	ble.n	6d6c <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6d5c:	687b      	ldr	r3, [r7, #4]
    6d5e:	885b      	ldrh	r3, [r3, #2]
    6d60:	b29b      	uxth	r3, r3
    6d62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6d66:	b29a      	uxth	r2, r3
    6d68:	687b      	ldr	r3, [r7, #4]
    6d6a:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6d6c:	687b      	ldr	r3, [r7, #4]
    6d6e:	885b      	ldrh	r3, [r3, #2]
    6d70:	b29b      	uxth	r3, r3
    6d72:	b21b      	sxth	r3, r3
    6d74:	2b00      	cmp	r3, #0
    6d76:	da02      	bge.n	6d7e <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6d78:	68f8      	ldr	r0, [r7, #12]
    6d7a:	4b5b      	ldr	r3, [pc, #364]	; (6ee8 <_sercom_i2c_sync_analyse_flags+0x210>)
    6d7c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6d7e:	687b      	ldr	r3, [r7, #4]
    6d80:	885b      	ldrh	r3, [r3, #2]
    6d82:	b29b      	uxth	r3, r3
    6d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6d88:	b29a      	uxth	r2, r3
    6d8a:	687b      	ldr	r3, [r7, #4]
    6d8c:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    6d8e:	f06f 0301 	mvn.w	r3, #1
    6d92:	e09e      	b.n	6ed2 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6d94:	687b      	ldr	r3, [r7, #4]
    6d96:	885b      	ldrh	r3, [r3, #2]
    6d98:	b29b      	uxth	r3, r3
    6d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6d9e:	2b00      	cmp	r3, #0
    6da0:	d01c      	beq.n	6ddc <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6da2:	687b      	ldr	r3, [r7, #4]
    6da4:	881b      	ldrh	r3, [r3, #0]
    6da6:	121b      	asrs	r3, r3, #8
    6da8:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6daa:	f003 0406 	and.w	r4, r3, #6
    6dae:	68f8      	ldr	r0, [r7, #12]
    6db0:	4b4e      	ldr	r3, [pc, #312]	; (6eec <_sercom_i2c_sync_analyse_flags+0x214>)
    6db2:	4798      	blx	r3
    6db4:	4603      	mov	r3, r0
    6db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6dba:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    6dbc:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6dc0:	4619      	mov	r1, r3
    6dc2:	68f8      	ldr	r0, [r7, #12]
    6dc4:	4b4a      	ldr	r3, [pc, #296]	; (6ef0 <_sercom_i2c_sync_analyse_flags+0x218>)
    6dc6:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6dc8:	687b      	ldr	r3, [r7, #4]
    6dca:	885b      	ldrh	r3, [r3, #2]
    6dcc:	b29b      	uxth	r3, r3
    6dce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6dd2:	b29a      	uxth	r2, r3
    6dd4:	687b      	ldr	r3, [r7, #4]
    6dd6:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6dd8:	2300      	movs	r3, #0
    6dda:	e07a      	b.n	6ed2 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6ddc:	687b      	ldr	r3, [r7, #4]
    6dde:	685b      	ldr	r3, [r3, #4]
    6de0:	2b00      	cmp	r3, #0
    6de2:	d111      	bne.n	6e08 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6de4:	687b      	ldr	r3, [r7, #4]
    6de6:	885b      	ldrh	r3, [r3, #2]
    6de8:	b29b      	uxth	r3, r3
    6dea:	b21b      	sxth	r3, r3
    6dec:	2b00      	cmp	r3, #0
    6dee:	da02      	bge.n	6df6 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    6df0:	68f8      	ldr	r0, [r7, #12]
    6df2:	4b3d      	ldr	r3, [pc, #244]	; (6ee8 <_sercom_i2c_sync_analyse_flags+0x210>)
    6df4:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6df6:	687b      	ldr	r3, [r7, #4]
    6df8:	885b      	ldrh	r3, [r3, #2]
    6dfa:	b29b      	uxth	r3, r3
    6dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6e00:	b29a      	uxth	r2, r3
    6e02:	687b      	ldr	r3, [r7, #4]
    6e04:	805a      	strh	r2, [r3, #2]
    6e06:	e010      	b.n	6e2a <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6e08:	687b      	ldr	r3, [r7, #4]
    6e0a:	689b      	ldr	r3, [r3, #8]
    6e0c:	781b      	ldrb	r3, [r3, #0]
    6e0e:	4619      	mov	r1, r3
    6e10:	68f8      	ldr	r0, [r7, #12]
    6e12:	4b38      	ldr	r3, [pc, #224]	; (6ef4 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6e14:	4798      	blx	r3
				msg->buffer++;
    6e16:	687b      	ldr	r3, [r7, #4]
    6e18:	689b      	ldr	r3, [r3, #8]
    6e1a:	1c5a      	adds	r2, r3, #1
    6e1c:	687b      	ldr	r3, [r7, #4]
    6e1e:	609a      	str	r2, [r3, #8]
				msg->len--;
    6e20:	687b      	ldr	r3, [r7, #4]
    6e22:	685b      	ldr	r3, [r3, #4]
    6e24:	1e5a      	subs	r2, r3, #1
    6e26:	687b      	ldr	r3, [r7, #4]
    6e28:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    6e2a:	2300      	movs	r3, #0
    6e2c:	e051      	b.n	6ed2 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    6e2e:	68bb      	ldr	r3, [r7, #8]
    6e30:	f003 0302 	and.w	r3, r3, #2
    6e34:	2b00      	cmp	r3, #0
    6e36:	d04b      	beq.n	6ed0 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6e38:	687b      	ldr	r3, [r7, #4]
    6e3a:	685b      	ldr	r3, [r3, #4]
    6e3c:	2b00      	cmp	r3, #0
    6e3e:	d041      	beq.n	6ec4 <_sercom_i2c_sync_analyse_flags+0x1ec>
    6e40:	8a7b      	ldrh	r3, [r7, #18]
    6e42:	f003 0304 	and.w	r3, r3, #4
    6e46:	2b00      	cmp	r3, #0
    6e48:	d13c      	bne.n	6ec4 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    6e4a:	687b      	ldr	r3, [r7, #4]
    6e4c:	685b      	ldr	r3, [r3, #4]
    6e4e:	1e5a      	subs	r2, r3, #1
    6e50:	687b      	ldr	r3, [r7, #4]
    6e52:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6e54:	687b      	ldr	r3, [r7, #4]
    6e56:	685b      	ldr	r3, [r3, #4]
    6e58:	2b00      	cmp	r3, #0
    6e5a:	d102      	bne.n	6e62 <_sercom_i2c_sync_analyse_flags+0x18a>
    6e5c:	697b      	ldr	r3, [r7, #20]
    6e5e:	2b00      	cmp	r3, #0
    6e60:	d006      	beq.n	6e70 <_sercom_i2c_sync_analyse_flags+0x198>
    6e62:	687b      	ldr	r3, [r7, #4]
    6e64:	685b      	ldr	r3, [r3, #4]
    6e66:	2b01      	cmp	r3, #1
    6e68:	d105      	bne.n	6e76 <_sercom_i2c_sync_analyse_flags+0x19e>
    6e6a:	697b      	ldr	r3, [r7, #20]
    6e6c:	2b00      	cmp	r3, #0
    6e6e:	d002      	beq.n	6e76 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6e70:	68f8      	ldr	r0, [r7, #12]
    6e72:	4b21      	ldr	r3, [pc, #132]	; (6ef8 <_sercom_i2c_sync_analyse_flags+0x220>)
    6e74:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6e76:	687b      	ldr	r3, [r7, #4]
    6e78:	685b      	ldr	r3, [r3, #4]
    6e7a:	2b00      	cmp	r3, #0
    6e7c:	d113      	bne.n	6ea6 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    6e7e:	687b      	ldr	r3, [r7, #4]
    6e80:	885b      	ldrh	r3, [r3, #2]
    6e82:	b29b      	uxth	r3, r3
    6e84:	b21b      	sxth	r3, r3
    6e86:	2b00      	cmp	r3, #0
    6e88:	da05      	bge.n	6e96 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6e8a:	68f8      	ldr	r0, [r7, #12]
    6e8c:	4b1b      	ldr	r3, [pc, #108]	; (6efc <_sercom_i2c_sync_analyse_flags+0x224>)
    6e8e:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6e90:	68f8      	ldr	r0, [r7, #12]
    6e92:	4b15      	ldr	r3, [pc, #84]	; (6ee8 <_sercom_i2c_sync_analyse_flags+0x210>)
    6e94:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6e96:	687b      	ldr	r3, [r7, #4]
    6e98:	885b      	ldrh	r3, [r3, #2]
    6e9a:	b29b      	uxth	r3, r3
    6e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6ea0:	b29a      	uxth	r2, r3
    6ea2:	687b      	ldr	r3, [r7, #4]
    6ea4:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6ea6:	687b      	ldr	r3, [r7, #4]
    6ea8:	689c      	ldr	r4, [r3, #8]
    6eaa:	1c62      	adds	r2, r4, #1
    6eac:	687b      	ldr	r3, [r7, #4]
    6eae:	609a      	str	r2, [r3, #8]
    6eb0:	68f8      	ldr	r0, [r7, #12]
    6eb2:	4b13      	ldr	r3, [pc, #76]	; (6f00 <_sercom_i2c_sync_analyse_flags+0x228>)
    6eb4:	4798      	blx	r3
    6eb6:	4603      	mov	r3, r0
    6eb8:	b2db      	uxtb	r3, r3
    6eba:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6ebc:	68f8      	ldr	r0, [r7, #12]
    6ebe:	4b11      	ldr	r3, [pc, #68]	; (6f04 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6ec0:	4798      	blx	r3
    6ec2:	e005      	b.n	6ed0 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6ec4:	68f8      	ldr	r0, [r7, #12]
    6ec6:	4b0f      	ldr	r3, [pc, #60]	; (6f04 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6ec8:	4798      	blx	r3
			return I2C_NACK;
    6eca:	f06f 0301 	mvn.w	r3, #1
    6ece:	e000      	b.n	6ed2 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    6ed0:	2300      	movs	r3, #0
}
    6ed2:	4618      	mov	r0, r3
    6ed4:	371c      	adds	r7, #28
    6ed6:	46bd      	mov	sp, r7
    6ed8:	bd90      	pop	{r4, r7, pc}
    6eda:	bf00      	nop
    6edc:	00006749 	.word	0x00006749
    6ee0:	00006b81 	.word	0x00006b81
    6ee4:	0000662d 	.word	0x0000662d
    6ee8:	00006cbd 	.word	0x00006cbd
    6eec:	00006a61 	.word	0x00006a61
    6ef0:	00006a3d 	.word	0x00006a3d
    6ef4:	00006a9d 	.word	0x00006a9d
    6ef8:	000068f9 	.word	0x000068f9
    6efc:	000068d1 	.word	0x000068d1
    6f00:	00006ac1 	.word	0x00006ac1
    6f04:	00006647 	.word	0x00006647

00006f08 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    6f08:	b580      	push	{r7, lr}
    6f0a:	b086      	sub	sp, #24
    6f0c:	af00      	add	r7, sp, #0
    6f0e:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    6f10:	687b      	ldr	r3, [r7, #4]
    6f12:	691b      	ldr	r3, [r3, #16]
    6f14:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6f16:	6938      	ldr	r0, [r7, #16]
    6f18:	4b37      	ldr	r3, [pc, #220]	; (6ff8 <_sercom_i2c_m_irq_handler+0xf0>)
    6f1a:	4798      	blx	r3
    6f1c:	4603      	mov	r3, r0
    6f1e:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    6f20:	2300      	movs	r3, #0
    6f22:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    6f24:	687b      	ldr	r3, [r7, #4]
    6f26:	2b00      	cmp	r3, #0
    6f28:	bf14      	ite	ne
    6f2a:	2301      	movne	r3, #1
    6f2c:	2300      	moveq	r3, #0
    6f2e:	b2db      	uxtb	r3, r3
    6f30:	f240 421e 	movw	r2, #1054	; 0x41e
    6f34:	4931      	ldr	r1, [pc, #196]	; (6ffc <_sercom_i2c_m_irq_handler+0xf4>)
    6f36:	4618      	mov	r0, r3
    6f38:	4b31      	ldr	r3, [pc, #196]	; (7000 <_sercom_i2c_m_irq_handler+0xf8>)
    6f3a:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6f3c:	687b      	ldr	r3, [r7, #4]
    6f3e:	691b      	ldr	r3, [r3, #16]
    6f40:	2b00      	cmp	r3, #0
    6f42:	bf14      	ite	ne
    6f44:	2301      	movne	r3, #1
    6f46:	2300      	moveq	r3, #0
    6f48:	b2db      	uxtb	r3, r3
    6f4a:	f240 421f 	movw	r2, #1055	; 0x41f
    6f4e:	492b      	ldr	r1, [pc, #172]	; (6ffc <_sercom_i2c_m_irq_handler+0xf4>)
    6f50:	4618      	mov	r0, r3
    6f52:	4b2b      	ldr	r3, [pc, #172]	; (7000 <_sercom_i2c_m_irq_handler+0xf8>)
    6f54:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    6f56:	bf00      	nop
    6f58:	68fb      	ldr	r3, [r7, #12]
    6f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6f5e:	2b00      	cmp	r3, #0
    6f60:	d126      	bne.n	6fb0 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6f62:	687b      	ldr	r3, [r7, #4]
    6f64:	461a      	mov	r2, r3
    6f66:	68f9      	ldr	r1, [r7, #12]
    6f68:	6938      	ldr	r0, [r7, #16]
    6f6a:	4b26      	ldr	r3, [pc, #152]	; (7004 <_sercom_i2c_m_irq_handler+0xfc>)
    6f6c:	4798      	blx	r3
    6f6e:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    6f70:	697b      	ldr	r3, [r7, #20]
    6f72:	2b00      	cmp	r3, #0
    6f74:	d11b      	bne.n	6fae <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    6f76:	68fb      	ldr	r3, [r7, #12]
    6f78:	f003 0301 	and.w	r3, r3, #1
    6f7c:	2b00      	cmp	r3, #0
    6f7e:	d008      	beq.n	6f92 <_sercom_i2c_m_irq_handler+0x8a>
    6f80:	687b      	ldr	r3, [r7, #4]
    6f82:	699b      	ldr	r3, [r3, #24]
    6f84:	2b00      	cmp	r3, #0
    6f86:	d004      	beq.n	6f92 <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    6f88:	687b      	ldr	r3, [r7, #4]
    6f8a:	699b      	ldr	r3, [r3, #24]
    6f8c:	6878      	ldr	r0, [r7, #4]
    6f8e:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    6f90:	e02e      	b.n	6ff0 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6f92:	68fb      	ldr	r3, [r7, #12]
    6f94:	f003 0302 	and.w	r3, r3, #2
    6f98:	2b00      	cmp	r3, #0
    6f9a:	d029      	beq.n	6ff0 <_sercom_i2c_m_irq_handler+0xe8>
    6f9c:	687b      	ldr	r3, [r7, #4]
    6f9e:	69db      	ldr	r3, [r3, #28]
    6fa0:	2b00      	cmp	r3, #0
    6fa2:	d025      	beq.n	6ff0 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    6fa4:	687b      	ldr	r3, [r7, #4]
    6fa6:	69db      	ldr	r3, [r3, #28]
    6fa8:	6878      	ldr	r0, [r7, #4]
    6faa:	4798      	blx	r3
		return;
    6fac:	e020      	b.n	6ff0 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    6fae:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6fb0:	687b      	ldr	r3, [r7, #4]
    6fb2:	885b      	ldrh	r3, [r3, #2]
    6fb4:	b29b      	uxth	r3, r3
    6fb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6fba:	b29a      	uxth	r2, r3
    6fbc:	687b      	ldr	r3, [r7, #4]
    6fbe:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    6fc0:	687b      	ldr	r3, [r7, #4]
    6fc2:	695b      	ldr	r3, [r3, #20]
    6fc4:	2b00      	cmp	r3, #0
    6fc6:	d014      	beq.n	6ff2 <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    6fc8:	697b      	ldr	r3, [r7, #20]
    6fca:	2b00      	cmp	r3, #0
    6fcc:	d005      	beq.n	6fda <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    6fce:	687b      	ldr	r3, [r7, #4]
    6fd0:	695b      	ldr	r3, [r3, #20]
    6fd2:	6979      	ldr	r1, [r7, #20]
    6fd4:	6878      	ldr	r0, [r7, #4]
    6fd6:	4798      	blx	r3
    6fd8:	e005      	b.n	6fe6 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    6fda:	687b      	ldr	r3, [r7, #4]
    6fdc:	695b      	ldr	r3, [r3, #20]
    6fde:	f06f 0104 	mvn.w	r1, #4
    6fe2:	6878      	ldr	r0, [r7, #4]
    6fe4:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    6fe6:	2180      	movs	r1, #128	; 0x80
    6fe8:	6938      	ldr	r0, [r7, #16]
    6fea:	4b07      	ldr	r3, [pc, #28]	; (7008 <_sercom_i2c_m_irq_handler+0x100>)
    6fec:	4798      	blx	r3
    6fee:	e000      	b.n	6ff2 <_sercom_i2c_m_irq_handler+0xea>
		return;
    6ff0:	bf00      	nop
	}
}
    6ff2:	3718      	adds	r7, #24
    6ff4:	46bd      	mov	sp, r7
    6ff6:	bd80      	pop	{r7, pc}
    6ff8:	00006661 	.word	0x00006661
    6ffc:	00010660 	.word	0x00010660
    7000:	00003fd5 	.word	0x00003fd5
    7004:	00006cd9 	.word	0x00006cd9
    7008:	0000667b 	.word	0x0000667b

0000700c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    700c:	b580      	push	{r7, lr}
    700e:	b082      	sub	sp, #8
    7010:	af00      	add	r7, sp, #0
    7012:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    7014:	6878      	ldr	r0, [r7, #4]
    7016:	4b05      	ldr	r3, [pc, #20]	; (702c <_sercom_get_irq_num+0x20>)
    7018:	4798      	blx	r3
    701a:	4603      	mov	r3, r0
    701c:	009b      	lsls	r3, r3, #2
    701e:	b2db      	uxtb	r3, r3
    7020:	332e      	adds	r3, #46	; 0x2e
    7022:	b2db      	uxtb	r3, r3
}
    7024:	4618      	mov	r0, r3
    7026:	3708      	adds	r7, #8
    7028:	46bd      	mov	sp, r7
    702a:	bd80      	pop	{r7, pc}
    702c:	00006bcd 	.word	0x00006bcd

00007030 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    7030:	b580      	push	{r7, lr}
    7032:	b086      	sub	sp, #24
    7034:	af00      	add	r7, sp, #0
    7036:	6078      	str	r0, [r7, #4]
    7038:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    703a:	687b      	ldr	r3, [r7, #4]
    703c:	2b00      	cmp	r3, #0
    703e:	bf14      	ite	ne
    7040:	2301      	movne	r3, #1
    7042:	2300      	moveq	r3, #0
    7044:	b2db      	uxtb	r3, r3
    7046:	f240 4292 	movw	r2, #1170	; 0x492
    704a:	491d      	ldr	r1, [pc, #116]	; (70c0 <_i2c_m_async_init+0x90>)
    704c:	4618      	mov	r0, r3
    704e:	4b1d      	ldr	r3, [pc, #116]	; (70c4 <_i2c_m_async_init+0x94>)
    7050:	4798      	blx	r3

	i2c_dev->hw = hw;
    7052:	687b      	ldr	r3, [r7, #4]
    7054:	683a      	ldr	r2, [r7, #0]
    7056:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    7058:	687b      	ldr	r3, [r7, #4]
    705a:	6839      	ldr	r1, [r7, #0]
    705c:	4618      	mov	r0, r3
    705e:	4b1a      	ldr	r3, [pc, #104]	; (70c8 <_i2c_m_async_init+0x98>)
    7060:	4798      	blx	r3
    7062:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    7064:	68fb      	ldr	r3, [r7, #12]
    7066:	2b00      	cmp	r3, #0
    7068:	d001      	beq.n	706e <_i2c_m_async_init+0x3e>
		return init_status;
    706a:	68fb      	ldr	r3, [r7, #12]
    706c:	e024      	b.n	70b8 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    706e:	6879      	ldr	r1, [r7, #4]
    7070:	6838      	ldr	r0, [r7, #0]
    7072:	4b16      	ldr	r3, [pc, #88]	; (70cc <_i2c_m_async_init+0x9c>)
    7074:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    7076:	6838      	ldr	r0, [r7, #0]
    7078:	4b15      	ldr	r3, [pc, #84]	; (70d0 <_i2c_m_async_init+0xa0>)
    707a:	4798      	blx	r3
    707c:	4603      	mov	r3, r0
    707e:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    7080:	2300      	movs	r3, #0
    7082:	613b      	str	r3, [r7, #16]
    7084:	e014      	b.n	70b0 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    7086:	7dfb      	ldrb	r3, [r7, #23]
    7088:	b21b      	sxth	r3, r3
    708a:	4618      	mov	r0, r3
    708c:	4b11      	ldr	r3, [pc, #68]	; (70d4 <_i2c_m_async_init+0xa4>)
    708e:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    7090:	7dfb      	ldrb	r3, [r7, #23]
    7092:	b21b      	sxth	r3, r3
    7094:	4618      	mov	r0, r3
    7096:	4b10      	ldr	r3, [pc, #64]	; (70d8 <_i2c_m_async_init+0xa8>)
    7098:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    709a:	7dfb      	ldrb	r3, [r7, #23]
    709c:	b21b      	sxth	r3, r3
    709e:	4618      	mov	r0, r3
    70a0:	4b0e      	ldr	r3, [pc, #56]	; (70dc <_i2c_m_async_init+0xac>)
    70a2:	4798      	blx	r3
		irq++;
    70a4:	7dfb      	ldrb	r3, [r7, #23]
    70a6:	3301      	adds	r3, #1
    70a8:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    70aa:	693b      	ldr	r3, [r7, #16]
    70ac:	3301      	adds	r3, #1
    70ae:	613b      	str	r3, [r7, #16]
    70b0:	693b      	ldr	r3, [r7, #16]
    70b2:	2b03      	cmp	r3, #3
    70b4:	d9e7      	bls.n	7086 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    70b6:	2300      	movs	r3, #0
}
    70b8:	4618      	mov	r0, r3
    70ba:	3718      	adds	r7, #24
    70bc:	46bd      	mov	sp, r7
    70be:	bd80      	pop	{r7, pc}
    70c0:	00010660 	.word	0x00010660
    70c4:	00003fd5 	.word	0x00003fd5
    70c8:	000076b5 	.word	0x000076b5
    70cc:	00006c29 	.word	0x00006c29
    70d0:	0000700d 	.word	0x0000700d
    70d4:	00006515 	.word	0x00006515
    70d8:	00006559 	.word	0x00006559
    70dc:	000064d9 	.word	0x000064d9

000070e0 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    70e0:	b590      	push	{r4, r7, lr}
    70e2:	b087      	sub	sp, #28
    70e4:	af00      	add	r7, sp, #0
    70e6:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    70e8:	687b      	ldr	r3, [r7, #4]
    70ea:	691b      	ldr	r3, [r3, #16]
    70ec:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    70ee:	687b      	ldr	r3, [r7, #4]
    70f0:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    70f2:	6978      	ldr	r0, [r7, #20]
    70f4:	4b33      	ldr	r3, [pc, #204]	; (71c4 <_sercom_i2c_send_address+0xe4>)
    70f6:	4798      	blx	r3
    70f8:	4603      	mov	r3, r0
    70fa:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    70fc:	687b      	ldr	r3, [r7, #4]
    70fe:	2b00      	cmp	r3, #0
    7100:	bf14      	ite	ne
    7102:	2301      	movne	r3, #1
    7104:	2300      	moveq	r3, #0
    7106:	b2db      	uxtb	r3, r3
    7108:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
    710c:	492e      	ldr	r1, [pc, #184]	; (71c8 <_sercom_i2c_send_address+0xe8>)
    710e:	4618      	mov	r0, r3
    7110:	4b2e      	ldr	r3, [pc, #184]	; (71cc <_sercom_i2c_send_address+0xec>)
    7112:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    7114:	693b      	ldr	r3, [r7, #16]
    7116:	685b      	ldr	r3, [r3, #4]
    7118:	2b01      	cmp	r3, #1
    711a:	d106      	bne.n	712a <_sercom_i2c_send_address+0x4a>
    711c:	68fb      	ldr	r3, [r7, #12]
    711e:	2b00      	cmp	r3, #0
    7120:	d003      	beq.n	712a <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    7122:	6978      	ldr	r0, [r7, #20]
    7124:	4b2a      	ldr	r3, [pc, #168]	; (71d0 <_sercom_i2c_send_address+0xf0>)
    7126:	4798      	blx	r3
    7128:	e002      	b.n	7130 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    712a:	6978      	ldr	r0, [r7, #20]
    712c:	4b29      	ldr	r3, [pc, #164]	; (71d4 <_sercom_i2c_send_address+0xf4>)
    712e:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    7130:	693b      	ldr	r3, [r7, #16]
    7132:	881b      	ldrh	r3, [r3, #0]
    7134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    7138:	2b00      	cmp	r3, #0
    713a:	d022      	beq.n	7182 <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    713c:	693b      	ldr	r3, [r7, #16]
    713e:	885b      	ldrh	r3, [r3, #2]
    7140:	b29b      	uxth	r3, r3
    7142:	f003 0301 	and.w	r3, r3, #1
    7146:	2b00      	cmp	r3, #0
    7148:	d007      	beq.n	715a <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    714a:	693b      	ldr	r3, [r7, #16]
    714c:	885b      	ldrh	r3, [r3, #2]
    714e:	b29b      	uxth	r3, r3
    7150:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    7154:	b29a      	uxth	r2, r3
    7156:	693b      	ldr	r3, [r7, #16]
    7158:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    715a:	693b      	ldr	r3, [r7, #16]
    715c:	881b      	ldrh	r3, [r3, #0]
    715e:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7160:	f240 74fe 	movw	r4, #2046	; 0x7fe
    7164:	401c      	ands	r4, r3
    7166:	6978      	ldr	r0, [r7, #20]
    7168:	4b1b      	ldr	r3, [pc, #108]	; (71d8 <_sercom_i2c_send_address+0xf8>)
    716a:	4798      	blx	r3
    716c:	4603      	mov	r3, r0
    716e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    7172:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    7174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    7178:	4619      	mov	r1, r3
    717a:	6978      	ldr	r0, [r7, #20]
    717c:	4b17      	ldr	r3, [pc, #92]	; (71dc <_sercom_i2c_send_address+0xfc>)
    717e:	4798      	blx	r3
    7180:	e01a      	b.n	71b8 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    7182:	693b      	ldr	r3, [r7, #16]
    7184:	881b      	ldrh	r3, [r3, #0]
    7186:	005b      	lsls	r3, r3, #1
    7188:	b2db      	uxtb	r3, r3
    718a:	693a      	ldr	r2, [r7, #16]
    718c:	8852      	ldrh	r2, [r2, #2]
    718e:	b292      	uxth	r2, r2
    7190:	f002 0201 	and.w	r2, r2, #1
    7194:	2a00      	cmp	r2, #0
    7196:	bf14      	ite	ne
    7198:	2201      	movne	r2, #1
    719a:	2200      	moveq	r2, #0
    719c:	b2d2      	uxtb	r2, r2
    719e:	4313      	orrs	r3, r2
    71a0:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    71a2:	6978      	ldr	r0, [r7, #20]
    71a4:	4b0c      	ldr	r3, [pc, #48]	; (71d8 <_sercom_i2c_send_address+0xf8>)
    71a6:	4798      	blx	r3
    71a8:	4603      	mov	r3, r0
    71aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    71ae:	4323      	orrs	r3, r4
    71b0:	4619      	mov	r1, r3
    71b2:	6978      	ldr	r0, [r7, #20]
    71b4:	4b09      	ldr	r3, [pc, #36]	; (71dc <_sercom_i2c_send_address+0xfc>)
    71b6:	4798      	blx	r3
	}

	return ERR_NONE;
    71b8:	2300      	movs	r3, #0
}
    71ba:	4618      	mov	r0, r3
    71bc:	371c      	adds	r7, #28
    71be:	46bd      	mov	sp, r7
    71c0:	bd90      	pop	{r4, r7, pc}
    71c2:	bf00      	nop
    71c4:	00006749 	.word	0x00006749
    71c8:	00010660 	.word	0x00010660
    71cc:	00003fd5 	.word	0x00003fd5
    71d0:	000068f9 	.word	0x000068f9
    71d4:	00006921 	.word	0x00006921
    71d8:	00006a61 	.word	0x00006a61
    71dc:	00006a3d 	.word	0x00006a3d

000071e0 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    71e0:	b580      	push	{r7, lr}
    71e2:	b084      	sub	sp, #16
    71e4:	af00      	add	r7, sp, #0
    71e6:	6078      	str	r0, [r7, #4]
    71e8:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    71ea:	687b      	ldr	r3, [r7, #4]
    71ec:	2b00      	cmp	r3, #0
    71ee:	bf14      	ite	ne
    71f0:	2301      	movne	r3, #1
    71f2:	2300      	moveq	r3, #0
    71f4:	b2db      	uxtb	r3, r3
    71f6:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
    71fa:	492a      	ldr	r1, [pc, #168]	; (72a4 <_i2c_m_async_transfer+0xc4>)
    71fc:	4618      	mov	r0, r3
    71fe:	4b2a      	ldr	r3, [pc, #168]	; (72a8 <_i2c_m_async_transfer+0xc8>)
    7200:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    7202:	687b      	ldr	r3, [r7, #4]
    7204:	691b      	ldr	r3, [r3, #16]
    7206:	2b00      	cmp	r3, #0
    7208:	bf14      	ite	ne
    720a:	2301      	movne	r3, #1
    720c:	2300      	moveq	r3, #0
    720e:	b2db      	uxtb	r3, r3
    7210:	f240 42e9 	movw	r2, #1257	; 0x4e9
    7214:	4923      	ldr	r1, [pc, #140]	; (72a4 <_i2c_m_async_transfer+0xc4>)
    7216:	4618      	mov	r0, r3
    7218:	4b23      	ldr	r3, [pc, #140]	; (72a8 <_i2c_m_async_transfer+0xc8>)
    721a:	4798      	blx	r3
	ASSERT(msg);
    721c:	683b      	ldr	r3, [r7, #0]
    721e:	2b00      	cmp	r3, #0
    7220:	bf14      	ite	ne
    7222:	2301      	movne	r3, #1
    7224:	2300      	moveq	r3, #0
    7226:	b2db      	uxtb	r3, r3
    7228:	f240 42ea 	movw	r2, #1258	; 0x4ea
    722c:	491d      	ldr	r1, [pc, #116]	; (72a4 <_i2c_m_async_transfer+0xc4>)
    722e:	4618      	mov	r0, r3
    7230:	4b1d      	ldr	r3, [pc, #116]	; (72a8 <_i2c_m_async_transfer+0xc8>)
    7232:	4798      	blx	r3

	if (msg->len == 0) {
    7234:	683b      	ldr	r3, [r7, #0]
    7236:	685b      	ldr	r3, [r3, #4]
    7238:	2b00      	cmp	r3, #0
    723a:	d101      	bne.n	7240 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    723c:	2300      	movs	r3, #0
    723e:	e02d      	b.n	729c <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    7240:	687b      	ldr	r3, [r7, #4]
    7242:	885b      	ldrh	r3, [r3, #2]
    7244:	b29b      	uxth	r3, r3
    7246:	f403 7380 	and.w	r3, r3, #256	; 0x100
    724a:	2b00      	cmp	r3, #0
    724c:	d002      	beq.n	7254 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    724e:	f06f 0303 	mvn.w	r3, #3
    7252:	e023      	b.n	729c <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    7254:	683b      	ldr	r3, [r7, #0]
    7256:	885b      	ldrh	r3, [r3, #2]
    7258:	b29b      	uxth	r3, r3
    725a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    725e:	b29a      	uxth	r2, r3
    7260:	683b      	ldr	r3, [r7, #0]
    7262:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    7264:	687b      	ldr	r3, [r7, #4]
    7266:	683a      	ldr	r2, [r7, #0]
    7268:	ca07      	ldmia	r2, {r0, r1, r2}
    726a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    726e:	687b      	ldr	r3, [r7, #4]
    7270:	691b      	ldr	r3, [r3, #16]
    7272:	4618      	mov	r0, r3
    7274:	4b0d      	ldr	r3, [pc, #52]	; (72ac <_i2c_m_async_transfer+0xcc>)
    7276:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    7278:	6878      	ldr	r0, [r7, #4]
    727a:	4b0d      	ldr	r3, [pc, #52]	; (72b0 <_i2c_m_async_transfer+0xd0>)
    727c:	4798      	blx	r3
    727e:	60f8      	str	r0, [r7, #12]

	if (ret) {
    7280:	68fb      	ldr	r3, [r7, #12]
    7282:	2b00      	cmp	r3, #0
    7284:	d009      	beq.n	729a <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7286:	687b      	ldr	r3, [r7, #4]
    7288:	885b      	ldrh	r3, [r3, #2]
    728a:	b29b      	uxth	r3, r3
    728c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7290:	b29a      	uxth	r2, r3
    7292:	687b      	ldr	r3, [r7, #4]
    7294:	805a      	strh	r2, [r3, #2]

		return ret;
    7296:	68fb      	ldr	r3, [r7, #12]
    7298:	e000      	b.n	729c <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    729a:	2300      	movs	r3, #0
}
    729c:	4618      	mov	r0, r3
    729e:	3710      	adds	r7, #16
    72a0:	46bd      	mov	sp, r7
    72a2:	bd80      	pop	{r7, pc}
    72a4:	00010660 	.word	0x00010660
    72a8:	00003fd5 	.word	0x00003fd5
    72ac:	000068a9 	.word	0x000068a9
    72b0:	000070e1 	.word	0x000070e1

000072b4 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    72b4:	b480      	push	{r7}
    72b6:	b085      	sub	sp, #20
    72b8:	af00      	add	r7, sp, #0
    72ba:	60f8      	str	r0, [r7, #12]
    72bc:	460b      	mov	r3, r1
    72be:	607a      	str	r2, [r7, #4]
    72c0:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    72c2:	7afb      	ldrb	r3, [r7, #11]
    72c4:	2b01      	cmp	r3, #1
    72c6:	d008      	beq.n	72da <_i2c_m_async_register_callback+0x26>
    72c8:	2b02      	cmp	r3, #2
    72ca:	d00a      	beq.n	72e2 <_i2c_m_async_register_callback+0x2e>
    72cc:	2b00      	cmp	r3, #0
    72ce:	d000      	beq.n	72d2 <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    72d0:	e00b      	b.n	72ea <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    72d2:	68fb      	ldr	r3, [r7, #12]
    72d4:	687a      	ldr	r2, [r7, #4]
    72d6:	615a      	str	r2, [r3, #20]
		break;
    72d8:	e007      	b.n	72ea <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    72da:	68fb      	ldr	r3, [r7, #12]
    72dc:	687a      	ldr	r2, [r7, #4]
    72de:	619a      	str	r2, [r3, #24]
		break;
    72e0:	e003      	b.n	72ea <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    72e2:	68fb      	ldr	r3, [r7, #12]
    72e4:	687a      	ldr	r2, [r7, #4]
    72e6:	61da      	str	r2, [r3, #28]
		break;
    72e8:	bf00      	nop
	}

	return ERR_NONE;
    72ea:	2300      	movs	r3, #0
}
    72ec:	4618      	mov	r0, r3
    72ee:	3714      	adds	r7, #20
    72f0:	46bd      	mov	sp, r7
    72f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    72f6:	4770      	bx	lr

000072f8 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    72f8:	b580      	push	{r7, lr}
    72fa:	b082      	sub	sp, #8
    72fc:	af00      	add	r7, sp, #0
    72fe:	6078      	str	r0, [r7, #4]
    7300:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    7302:	687b      	ldr	r3, [r7, #4]
    7304:	2b00      	cmp	r3, #0
    7306:	bf14      	ite	ne
    7308:	2301      	movne	r3, #1
    730a:	2300      	moveq	r3, #0
    730c:	b2db      	uxtb	r3, r3
    730e:	f44f 62a9 	mov.w	r2, #1352	; 0x548
    7312:	4908      	ldr	r1, [pc, #32]	; (7334 <_i2c_m_sync_init+0x3c>)
    7314:	4618      	mov	r0, r3
    7316:	4b08      	ldr	r3, [pc, #32]	; (7338 <_i2c_m_sync_init+0x40>)
    7318:	4798      	blx	r3

	i2c_dev->hw = hw;
    731a:	687b      	ldr	r3, [r7, #4]
    731c:	683a      	ldr	r2, [r7, #0]
    731e:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    7320:	687b      	ldr	r3, [r7, #4]
    7322:	6839      	ldr	r1, [r7, #0]
    7324:	4618      	mov	r0, r3
    7326:	4b05      	ldr	r3, [pc, #20]	; (733c <_i2c_m_sync_init+0x44>)
    7328:	4798      	blx	r3
    732a:	4603      	mov	r3, r0
}
    732c:	4618      	mov	r0, r3
    732e:	3708      	adds	r7, #8
    7330:	46bd      	mov	sp, r7
    7332:	bd80      	pop	{r7, pc}
    7334:	00010660 	.word	0x00010660
    7338:	00003fd5 	.word	0x00003fd5
    733c:	000076b5 	.word	0x000076b5

00007340 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    7340:	b580      	push	{r7, lr}
    7342:	b082      	sub	sp, #8
    7344:	af00      	add	r7, sp, #0
    7346:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    7348:	687b      	ldr	r3, [r7, #4]
    734a:	2b00      	cmp	r3, #0
    734c:	bf14      	ite	ne
    734e:	2301      	movne	r3, #1
    7350:	2300      	moveq	r3, #0
    7352:	b2db      	uxtb	r3, r3
    7354:	f240 5265 	movw	r2, #1381	; 0x565
    7358:	4906      	ldr	r1, [pc, #24]	; (7374 <_i2c_m_sync_enable+0x34>)
    735a:	4618      	mov	r0, r3
    735c:	4b06      	ldr	r3, [pc, #24]	; (7378 <_i2c_m_sync_enable+0x38>)
    735e:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    7360:	687b      	ldr	r3, [r7, #4]
    7362:	691b      	ldr	r3, [r3, #16]
    7364:	4618      	mov	r0, r3
    7366:	4b05      	ldr	r3, [pc, #20]	; (737c <_i2c_m_sync_enable+0x3c>)
    7368:	4798      	blx	r3
    736a:	4603      	mov	r3, r0
}
    736c:	4618      	mov	r0, r3
    736e:	3708      	adds	r7, #8
    7370:	46bd      	mov	sp, r7
    7372:	bd80      	pop	{r7, pc}
    7374:	00010660 	.word	0x00010660
    7378:	00003fd5 	.word	0x00003fd5
    737c:	00007629 	.word	0x00007629

00007380 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    7380:	b580      	push	{r7, lr}
    7382:	b084      	sub	sp, #16
    7384:	af00      	add	r7, sp, #0
    7386:	6078      	str	r0, [r7, #4]
    7388:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    738a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    738e:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    7390:	687b      	ldr	r3, [r7, #4]
    7392:	691b      	ldr	r3, [r3, #16]
    7394:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    7396:	68b8      	ldr	r0, [r7, #8]
    7398:	4b0f      	ldr	r3, [pc, #60]	; (73d8 <_sercom_i2c_sync_wait_bus+0x58>)
    739a:	4798      	blx	r3
    739c:	4603      	mov	r3, r0
    739e:	461a      	mov	r2, r3
    73a0:	683b      	ldr	r3, [r7, #0]
    73a2:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    73a4:	68fb      	ldr	r3, [r7, #12]
    73a6:	1e5a      	subs	r2, r3, #1
    73a8:	60fa      	str	r2, [r7, #12]
    73aa:	2b00      	cmp	r3, #0
    73ac:	d102      	bne.n	73b4 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    73ae:	f06f 0304 	mvn.w	r3, #4
    73b2:	e00c      	b.n	73ce <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    73b4:	683b      	ldr	r3, [r7, #0]
    73b6:	681b      	ldr	r3, [r3, #0]
    73b8:	f003 0301 	and.w	r3, r3, #1
    73bc:	2b00      	cmp	r3, #0
    73be:	d105      	bne.n	73cc <_sercom_i2c_sync_wait_bus+0x4c>
    73c0:	683b      	ldr	r3, [r7, #0]
    73c2:	681b      	ldr	r3, [r3, #0]
    73c4:	f003 0302 	and.w	r3, r3, #2
    73c8:	2b00      	cmp	r3, #0
    73ca:	d0e4      	beq.n	7396 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    73cc:	2300      	movs	r3, #0
}
    73ce:	4618      	mov	r0, r3
    73d0:	3710      	adds	r7, #16
    73d2:	46bd      	mov	sp, r7
    73d4:	bd80      	pop	{r7, pc}
    73d6:	bf00      	nop
    73d8:	00006661 	.word	0x00006661

000073dc <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    73dc:	b590      	push	{r4, r7, lr}
    73de:	b087      	sub	sp, #28
    73e0:	af00      	add	r7, sp, #0
    73e2:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    73e4:	687b      	ldr	r3, [r7, #4]
    73e6:	691b      	ldr	r3, [r3, #16]
    73e8:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    73ea:	687b      	ldr	r3, [r7, #4]
    73ec:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    73ee:	6978      	ldr	r0, [r7, #20]
    73f0:	4b39      	ldr	r3, [pc, #228]	; (74d8 <_sercom_i2c_sync_send_address+0xfc>)
    73f2:	4798      	blx	r3
    73f4:	4603      	mov	r3, r0
    73f6:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    73f8:	687b      	ldr	r3, [r7, #4]
    73fa:	2b00      	cmp	r3, #0
    73fc:	bf14      	ite	ne
    73fe:	2301      	movne	r3, #1
    7400:	2300      	moveq	r3, #0
    7402:	b2db      	uxtb	r3, r3
    7404:	f240 52d5 	movw	r2, #1493	; 0x5d5
    7408:	4934      	ldr	r1, [pc, #208]	; (74dc <_sercom_i2c_sync_send_address+0x100>)
    740a:	4618      	mov	r0, r3
    740c:	4b34      	ldr	r3, [pc, #208]	; (74e0 <_sercom_i2c_sync_send_address+0x104>)
    740e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    7410:	693b      	ldr	r3, [r7, #16]
    7412:	685b      	ldr	r3, [r3, #4]
    7414:	2b01      	cmp	r3, #1
    7416:	d106      	bne.n	7426 <_sercom_i2c_sync_send_address+0x4a>
    7418:	68fb      	ldr	r3, [r7, #12]
    741a:	2b00      	cmp	r3, #0
    741c:	d003      	beq.n	7426 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    741e:	6978      	ldr	r0, [r7, #20]
    7420:	4b30      	ldr	r3, [pc, #192]	; (74e4 <_sercom_i2c_sync_send_address+0x108>)
    7422:	4798      	blx	r3
    7424:	e002      	b.n	742c <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    7426:	6978      	ldr	r0, [r7, #20]
    7428:	4b2f      	ldr	r3, [pc, #188]	; (74e8 <_sercom_i2c_sync_send_address+0x10c>)
    742a:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    742c:	693b      	ldr	r3, [r7, #16]
    742e:	881b      	ldrh	r3, [r3, #0]
    7430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    7434:	2b00      	cmp	r3, #0
    7436:	d022      	beq.n	747e <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    7438:	693b      	ldr	r3, [r7, #16]
    743a:	885b      	ldrh	r3, [r3, #2]
    743c:	b29b      	uxth	r3, r3
    743e:	f003 0301 	and.w	r3, r3, #1
    7442:	2b00      	cmp	r3, #0
    7444:	d007      	beq.n	7456 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    7446:	693b      	ldr	r3, [r7, #16]
    7448:	885b      	ldrh	r3, [r3, #2]
    744a:	b29b      	uxth	r3, r3
    744c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    7450:	b29a      	uxth	r2, r3
    7452:	693b      	ldr	r3, [r7, #16]
    7454:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    7456:	693b      	ldr	r3, [r7, #16]
    7458:	881b      	ldrh	r3, [r3, #0]
    745a:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    745c:	f240 74fe 	movw	r4, #2046	; 0x7fe
    7460:	401c      	ands	r4, r3
    7462:	6978      	ldr	r0, [r7, #20]
    7464:	4b21      	ldr	r3, [pc, #132]	; (74ec <_sercom_i2c_sync_send_address+0x110>)
    7466:	4798      	blx	r3
    7468:	4603      	mov	r3, r0
    746a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    746e:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    7470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    7474:	4619      	mov	r1, r3
    7476:	6978      	ldr	r0, [r7, #20]
    7478:	4b1d      	ldr	r3, [pc, #116]	; (74f0 <_sercom_i2c_sync_send_address+0x114>)
    747a:	4798      	blx	r3
    747c:	e01a      	b.n	74b4 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    747e:	693b      	ldr	r3, [r7, #16]
    7480:	881b      	ldrh	r3, [r3, #0]
    7482:	005b      	lsls	r3, r3, #1
    7484:	b2db      	uxtb	r3, r3
    7486:	693a      	ldr	r2, [r7, #16]
    7488:	8852      	ldrh	r2, [r2, #2]
    748a:	b292      	uxth	r2, r2
    748c:	f002 0201 	and.w	r2, r2, #1
    7490:	2a00      	cmp	r2, #0
    7492:	bf14      	ite	ne
    7494:	2201      	movne	r2, #1
    7496:	2200      	moveq	r2, #0
    7498:	b2d2      	uxtb	r2, r2
    749a:	4313      	orrs	r3, r2
    749c:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    749e:	6978      	ldr	r0, [r7, #20]
    74a0:	4b12      	ldr	r3, [pc, #72]	; (74ec <_sercom_i2c_sync_send_address+0x110>)
    74a2:	4798      	blx	r3
    74a4:	4603      	mov	r3, r0
    74a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    74aa:	4323      	orrs	r3, r4
    74ac:	4619      	mov	r1, r3
    74ae:	6978      	ldr	r0, [r7, #20]
    74b0:	4b0f      	ldr	r3, [pc, #60]	; (74f0 <_sercom_i2c_sync_send_address+0x114>)
    74b2:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    74b4:	f107 0308 	add.w	r3, r7, #8
    74b8:	4619      	mov	r1, r3
    74ba:	6878      	ldr	r0, [r7, #4]
    74bc:	4b0d      	ldr	r3, [pc, #52]	; (74f4 <_sercom_i2c_sync_send_address+0x118>)
    74be:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    74c0:	68bb      	ldr	r3, [r7, #8]
    74c2:	693a      	ldr	r2, [r7, #16]
    74c4:	4619      	mov	r1, r3
    74c6:	6978      	ldr	r0, [r7, #20]
    74c8:	4b0b      	ldr	r3, [pc, #44]	; (74f8 <_sercom_i2c_sync_send_address+0x11c>)
    74ca:	4798      	blx	r3
    74cc:	4603      	mov	r3, r0
}
    74ce:	4618      	mov	r0, r3
    74d0:	371c      	adds	r7, #28
    74d2:	46bd      	mov	sp, r7
    74d4:	bd90      	pop	{r4, r7, pc}
    74d6:	bf00      	nop
    74d8:	00006749 	.word	0x00006749
    74dc:	00010660 	.word	0x00010660
    74e0:	00003fd5 	.word	0x00003fd5
    74e4:	000068f9 	.word	0x000068f9
    74e8:	00006921 	.word	0x00006921
    74ec:	00006a61 	.word	0x00006a61
    74f0:	00006a3d 	.word	0x00006a3d
    74f4:	00007381 	.word	0x00007381
    74f8:	00006cd9 	.word	0x00006cd9

000074fc <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    74fc:	b580      	push	{r7, lr}
    74fe:	b086      	sub	sp, #24
    7500:	af00      	add	r7, sp, #0
    7502:	6078      	str	r0, [r7, #4]
    7504:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    7506:	687b      	ldr	r3, [r7, #4]
    7508:	691b      	ldr	r3, [r3, #16]
    750a:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    750c:	687b      	ldr	r3, [r7, #4]
    750e:	2b00      	cmp	r3, #0
    7510:	bf14      	ite	ne
    7512:	2301      	movne	r3, #1
    7514:	2300      	moveq	r3, #0
    7516:	b2db      	uxtb	r3, r3
    7518:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    751c:	493b      	ldr	r1, [pc, #236]	; (760c <_i2c_m_sync_transfer+0x110>)
    751e:	4618      	mov	r0, r3
    7520:	4b3b      	ldr	r3, [pc, #236]	; (7610 <_i2c_m_sync_transfer+0x114>)
    7522:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    7524:	687b      	ldr	r3, [r7, #4]
    7526:	691b      	ldr	r3, [r3, #16]
    7528:	2b00      	cmp	r3, #0
    752a:	bf14      	ite	ne
    752c:	2301      	movne	r3, #1
    752e:	2300      	moveq	r3, #0
    7530:	b2db      	uxtb	r3, r3
    7532:	f240 6201 	movw	r2, #1537	; 0x601
    7536:	4935      	ldr	r1, [pc, #212]	; (760c <_i2c_m_sync_transfer+0x110>)
    7538:	4618      	mov	r0, r3
    753a:	4b35      	ldr	r3, [pc, #212]	; (7610 <_i2c_m_sync_transfer+0x114>)
    753c:	4798      	blx	r3
	ASSERT(msg);
    753e:	683b      	ldr	r3, [r7, #0]
    7540:	2b00      	cmp	r3, #0
    7542:	bf14      	ite	ne
    7544:	2301      	movne	r3, #1
    7546:	2300      	moveq	r3, #0
    7548:	b2db      	uxtb	r3, r3
    754a:	f240 6202 	movw	r2, #1538	; 0x602
    754e:	492f      	ldr	r1, [pc, #188]	; (760c <_i2c_m_sync_transfer+0x110>)
    7550:	4618      	mov	r0, r3
    7552:	4b2f      	ldr	r3, [pc, #188]	; (7610 <_i2c_m_sync_transfer+0x114>)
    7554:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    7556:	687b      	ldr	r3, [r7, #4]
    7558:	885b      	ldrh	r3, [r3, #2]
    755a:	b29b      	uxth	r3, r3
    755c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7560:	2b00      	cmp	r3, #0
    7562:	d002      	beq.n	756a <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    7564:	f06f 0305 	mvn.w	r3, #5
    7568:	e04c      	b.n	7604 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    756a:	683b      	ldr	r3, [r7, #0]
    756c:	885b      	ldrh	r3, [r3, #2]
    756e:	b29b      	uxth	r3, r3
    7570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7574:	b29a      	uxth	r2, r3
    7576:	683b      	ldr	r3, [r7, #0]
    7578:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    757a:	687b      	ldr	r3, [r7, #4]
    757c:	683a      	ldr	r2, [r7, #0]
    757e:	ca07      	ldmia	r2, {r0, r1, r2}
    7580:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    7584:	6938      	ldr	r0, [r7, #16]
    7586:	4b23      	ldr	r3, [pc, #140]	; (7614 <_i2c_m_sync_transfer+0x118>)
    7588:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    758a:	6878      	ldr	r0, [r7, #4]
    758c:	4b22      	ldr	r3, [pc, #136]	; (7618 <_i2c_m_sync_transfer+0x11c>)
    758e:	4798      	blx	r3
    7590:	6178      	str	r0, [r7, #20]

	if (ret) {
    7592:	697b      	ldr	r3, [r7, #20]
    7594:	2b00      	cmp	r3, #0
    7596:	d02d      	beq.n	75f4 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7598:	687b      	ldr	r3, [r7, #4]
    759a:	885b      	ldrh	r3, [r3, #2]
    759c:	b29b      	uxth	r3, r3
    759e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    75a2:	b29a      	uxth	r2, r3
    75a4:	687b      	ldr	r3, [r7, #4]
    75a6:	805a      	strh	r2, [r3, #2]

		return ret;
    75a8:	697b      	ldr	r3, [r7, #20]
    75aa:	e02b      	b.n	7604 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    75ac:	f107 030c 	add.w	r3, r7, #12
    75b0:	4619      	mov	r1, r3
    75b2:	6878      	ldr	r0, [r7, #4]
    75b4:	4b19      	ldr	r3, [pc, #100]	; (761c <_i2c_m_sync_transfer+0x120>)
    75b6:	4798      	blx	r3
    75b8:	6178      	str	r0, [r7, #20]

		if (ret) {
    75ba:	697b      	ldr	r3, [r7, #20]
    75bc:	2b00      	cmp	r3, #0
    75be:	d012      	beq.n	75e6 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    75c0:	683b      	ldr	r3, [r7, #0]
    75c2:	885b      	ldrh	r3, [r3, #2]
    75c4:	b29b      	uxth	r3, r3
    75c6:	b21b      	sxth	r3, r3
    75c8:	2b00      	cmp	r3, #0
    75ca:	da02      	bge.n	75d2 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    75cc:	6938      	ldr	r0, [r7, #16]
    75ce:	4b14      	ldr	r3, [pc, #80]	; (7620 <_i2c_m_sync_transfer+0x124>)
    75d0:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    75d2:	687b      	ldr	r3, [r7, #4]
    75d4:	885b      	ldrh	r3, [r3, #2]
    75d6:	b29b      	uxth	r3, r3
    75d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    75dc:	b29a      	uxth	r2, r3
    75de:	687b      	ldr	r3, [r7, #4]
    75e0:	805a      	strh	r2, [r3, #2]

			return ret;
    75e2:	697b      	ldr	r3, [r7, #20]
    75e4:	e00e      	b.n	7604 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    75e6:	68fb      	ldr	r3, [r7, #12]
    75e8:	687a      	ldr	r2, [r7, #4]
    75ea:	4619      	mov	r1, r3
    75ec:	6938      	ldr	r0, [r7, #16]
    75ee:	4b0d      	ldr	r3, [pc, #52]	; (7624 <_i2c_m_sync_transfer+0x128>)
    75f0:	4798      	blx	r3
    75f2:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    75f4:	687b      	ldr	r3, [r7, #4]
    75f6:	885b      	ldrh	r3, [r3, #2]
    75f8:	b29b      	uxth	r3, r3
    75fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
    75fe:	2b00      	cmp	r3, #0
    7600:	d1d4      	bne.n	75ac <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    7602:	697b      	ldr	r3, [r7, #20]
}
    7604:	4618      	mov	r0, r3
    7606:	3718      	adds	r7, #24
    7608:	46bd      	mov	sp, r7
    760a:	bd80      	pop	{r7, pc}
    760c:	00010660 	.word	0x00010660
    7610:	00003fd5 	.word	0x00003fd5
    7614:	000068a9 	.word	0x000068a9
    7618:	000073dd 	.word	0x000073dd
    761c:	00007381 	.word	0x00007381
    7620:	00006cbd 	.word	0x00006cbd
    7624:	00006cd9 	.word	0x00006cd9

00007628 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    7628:	b580      	push	{r7, lr}
    762a:	b084      	sub	sp, #16
    762c:	af00      	add	r7, sp, #0
    762e:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    7630:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7634:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    7636:	2304      	movs	r3, #4
    7638:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    763a:	687b      	ldr	r3, [r7, #4]
    763c:	2b00      	cmp	r3, #0
    763e:	bf14      	ite	ne
    7640:	2301      	movne	r3, #1
    7642:	2300      	moveq	r3, #0
    7644:	b2db      	uxtb	r3, r3
    7646:	f240 6235 	movw	r2, #1589	; 0x635
    764a:	4915      	ldr	r1, [pc, #84]	; (76a0 <_i2c_m_enable_implementation+0x78>)
    764c:	4618      	mov	r0, r3
    764e:	4b15      	ldr	r3, [pc, #84]	; (76a4 <_i2c_m_enable_implementation+0x7c>)
    7650:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    7652:	6878      	ldr	r0, [r7, #4]
    7654:	4b14      	ldr	r3, [pc, #80]	; (76a8 <_i2c_m_enable_implementation+0x80>)
    7656:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    7658:	e016      	b.n	7688 <_i2c_m_enable_implementation+0x60>
		timeout--;
    765a:	68fb      	ldr	r3, [r7, #12]
    765c:	3b01      	subs	r3, #1
    765e:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    7660:	68fb      	ldr	r3, [r7, #12]
    7662:	2b00      	cmp	r3, #0
    7664:	dc10      	bgt.n	7688 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    7666:	68bb      	ldr	r3, [r7, #8]
    7668:	3b01      	subs	r3, #1
    766a:	60bb      	str	r3, [r7, #8]
    766c:	68bb      	ldr	r3, [r7, #8]
    766e:	2b00      	cmp	r3, #0
    7670:	d007      	beq.n	7682 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    7672:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7676:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    7678:	2110      	movs	r1, #16
    767a:	6878      	ldr	r0, [r7, #4]
    767c:	4b0b      	ldr	r3, [pc, #44]	; (76ac <_i2c_m_enable_implementation+0x84>)
    767e:	4798      	blx	r3
    7680:	e002      	b.n	7688 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    7682:	f06f 0305 	mvn.w	r3, #5
    7686:	e006      	b.n	7696 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    7688:	6878      	ldr	r0, [r7, #4]
    768a:	4b09      	ldr	r3, [pc, #36]	; (76b0 <_i2c_m_enable_implementation+0x88>)
    768c:	4798      	blx	r3
    768e:	4603      	mov	r3, r0
    7690:	2b01      	cmp	r3, #1
    7692:	d1e2      	bne.n	765a <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    7694:	2300      	movs	r3, #0
}
    7696:	4618      	mov	r0, r3
    7698:	3710      	adds	r7, #16
    769a:	46bd      	mov	sp, r7
    769c:	bd80      	pop	{r7, pc}
    769e:	bf00      	nop
    76a0:	00010660 	.word	0x00010660
    76a4:	00003fd5 	.word	0x00003fd5
    76a8:	000066f9 	.word	0x000066f9
    76ac:	00006ba5 	.word	0x00006ba5
    76b0:	00006b55 	.word	0x00006b55

000076b4 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    76b4:	b580      	push	{r7, lr}
    76b6:	b084      	sub	sp, #16
    76b8:	af00      	add	r7, sp, #0
    76ba:	6078      	str	r0, [r7, #4]
    76bc:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    76be:	6838      	ldr	r0, [r7, #0]
    76c0:	4b42      	ldr	r3, [pc, #264]	; (77cc <_i2c_m_sync_init_impl+0x118>)
    76c2:	4798      	blx	r3
    76c4:	4603      	mov	r3, r0
    76c6:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    76c8:	2101      	movs	r1, #1
    76ca:	6838      	ldr	r0, [r7, #0]
    76cc:	4b40      	ldr	r3, [pc, #256]	; (77d0 <_i2c_m_sync_init_impl+0x11c>)
    76ce:	4798      	blx	r3
    76d0:	4603      	mov	r3, r0
    76d2:	f083 0301 	eor.w	r3, r3, #1
    76d6:	b2db      	uxtb	r3, r3
    76d8:	2b00      	cmp	r3, #0
    76da:	d020      	beq.n	771e <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    76dc:	7bfa      	ldrb	r2, [r7, #15]
    76de:	493d      	ldr	r1, [pc, #244]	; (77d4 <_i2c_m_sync_init_impl+0x120>)
    76e0:	4613      	mov	r3, r2
    76e2:	005b      	lsls	r3, r3, #1
    76e4:	4413      	add	r3, r2
    76e6:	00db      	lsls	r3, r3, #3
    76e8:	440b      	add	r3, r1
    76ea:	3304      	adds	r3, #4
    76ec:	681b      	ldr	r3, [r3, #0]
    76ee:	f003 031c 	and.w	r3, r3, #28
    76f2:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    76f4:	2102      	movs	r1, #2
    76f6:	6838      	ldr	r0, [r7, #0]
    76f8:	4b37      	ldr	r3, [pc, #220]	; (77d8 <_i2c_m_sync_init_impl+0x124>)
    76fa:	4798      	blx	r3
    76fc:	4603      	mov	r3, r0
    76fe:	2b00      	cmp	r3, #0
    7700:	d006      	beq.n	7710 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    7702:	6838      	ldr	r0, [r7, #0]
    7704:	4b35      	ldr	r3, [pc, #212]	; (77dc <_i2c_m_sync_init_impl+0x128>)
    7706:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    7708:	2102      	movs	r1, #2
    770a:	6838      	ldr	r0, [r7, #0]
    770c:	4b34      	ldr	r3, [pc, #208]	; (77e0 <_i2c_m_sync_init_impl+0x12c>)
    770e:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    7710:	68bb      	ldr	r3, [r7, #8]
    7712:	f043 0301 	orr.w	r3, r3, #1
    7716:	4619      	mov	r1, r3
    7718:	6838      	ldr	r0, [r7, #0]
    771a:	4b32      	ldr	r3, [pc, #200]	; (77e4 <_i2c_m_sync_init_impl+0x130>)
    771c:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    771e:	2101      	movs	r1, #1
    7720:	6838      	ldr	r0, [r7, #0]
    7722:	4b2f      	ldr	r3, [pc, #188]	; (77e0 <_i2c_m_sync_init_impl+0x12c>)
    7724:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    7726:	7bfa      	ldrb	r2, [r7, #15]
    7728:	492a      	ldr	r1, [pc, #168]	; (77d4 <_i2c_m_sync_init_impl+0x120>)
    772a:	4613      	mov	r3, r2
    772c:	005b      	lsls	r3, r3, #1
    772e:	4413      	add	r3, r2
    7730:	00db      	lsls	r3, r3, #3
    7732:	440b      	add	r3, r1
    7734:	3304      	adds	r3, #4
    7736:	681b      	ldr	r3, [r3, #0]
    7738:	4619      	mov	r1, r3
    773a:	6838      	ldr	r0, [r7, #0]
    773c:	4b29      	ldr	r3, [pc, #164]	; (77e4 <_i2c_m_sync_init_impl+0x130>)
    773e:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    7740:	7bfa      	ldrb	r2, [r7, #15]
    7742:	4924      	ldr	r1, [pc, #144]	; (77d4 <_i2c_m_sync_init_impl+0x120>)
    7744:	4613      	mov	r3, r2
    7746:	005b      	lsls	r3, r3, #1
    7748:	4413      	add	r3, r2
    774a:	00db      	lsls	r3, r3, #3
    774c:	440b      	add	r3, r1
    774e:	3308      	adds	r3, #8
    7750:	681b      	ldr	r3, [r3, #0]
    7752:	4619      	mov	r1, r3
    7754:	6838      	ldr	r0, [r7, #0]
    7756:	4b24      	ldr	r3, [pc, #144]	; (77e8 <_i2c_m_sync_init_impl+0x134>)
    7758:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    775a:	7bfa      	ldrb	r2, [r7, #15]
    775c:	491d      	ldr	r1, [pc, #116]	; (77d4 <_i2c_m_sync_init_impl+0x120>)
    775e:	4613      	mov	r3, r2
    7760:	005b      	lsls	r3, r3, #1
    7762:	4413      	add	r3, r2
    7764:	00db      	lsls	r3, r3, #3
    7766:	440b      	add	r3, r1
    7768:	330c      	adds	r3, #12
    776a:	681b      	ldr	r3, [r3, #0]
    776c:	4619      	mov	r1, r3
    776e:	6838      	ldr	r0, [r7, #0]
    7770:	4b1e      	ldr	r3, [pc, #120]	; (77ec <_i2c_m_sync_init_impl+0x138>)
    7772:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    7774:	7bfa      	ldrb	r2, [r7, #15]
    7776:	4917      	ldr	r1, [pc, #92]	; (77d4 <_i2c_m_sync_init_impl+0x120>)
    7778:	4613      	mov	r3, r2
    777a:	005b      	lsls	r3, r3, #1
    777c:	4413      	add	r3, r2
    777e:	00db      	lsls	r3, r3, #3
    7780:	440b      	add	r3, r1
    7782:	3304      	adds	r3, #4
    7784:	681b      	ldr	r3, [r3, #0]
    7786:	0e1b      	lsrs	r3, r3, #24
    7788:	b29b      	uxth	r3, r3
    778a:	f003 0303 	and.w	r3, r3, #3
    778e:	b29a      	uxth	r2, r3
    7790:	687b      	ldr	r3, [r7, #4]
    7792:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    7794:	687b      	ldr	r3, [r7, #4]
    7796:	899b      	ldrh	r3, [r3, #12]
    7798:	2b01      	cmp	r3, #1
    779a:	bf8c      	ite	hi
    779c:	2301      	movhi	r3, #1
    779e:	2300      	movls	r3, #0
    77a0:	b2db      	uxtb	r3, r3
    77a2:	4619      	mov	r1, r3
    77a4:	6838      	ldr	r0, [r7, #0]
    77a6:	4b12      	ldr	r3, [pc, #72]	; (77f0 <_i2c_m_sync_init_impl+0x13c>)
    77a8:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    77aa:	7bfa      	ldrb	r2, [r7, #15]
    77ac:	4909      	ldr	r1, [pc, #36]	; (77d4 <_i2c_m_sync_init_impl+0x120>)
    77ae:	4613      	mov	r3, r2
    77b0:	005b      	lsls	r3, r3, #1
    77b2:	4413      	add	r3, r2
    77b4:	00db      	lsls	r3, r3, #3
    77b6:	440b      	add	r3, r1
    77b8:	3312      	adds	r3, #18
    77ba:	881a      	ldrh	r2, [r3, #0]
    77bc:	687b      	ldr	r3, [r7, #4]
    77be:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    77c0:	2300      	movs	r3, #0
}
    77c2:	4618      	mov	r0, r3
    77c4:	3710      	adds	r7, #16
    77c6:	46bd      	mov	sp, r7
    77c8:	bd80      	pop	{r7, pc}
    77ca:	bf00      	nop
    77cc:	00006c55 	.word	0x00006c55
    77d0:	000065b9 	.word	0x000065b9
    77d4:	20000018 	.word	0x20000018
    77d8:	00006779 	.word	0x00006779
    77dc:	00006721 	.word	0x00006721
    77e0:	00006595 	.word	0x00006595
    77e4:	000067a9 	.word	0x000067a9
    77e8:	00006979 	.word	0x00006979
    77ec:	000069c1 	.word	0x000069c1
    77f0:	000069fd 	.word	0x000069fd

000077f4 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    77f4:	b580      	push	{r7, lr}
    77f6:	b082      	sub	sp, #8
    77f8:	af00      	add	r7, sp, #0
    77fa:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    77fc:	2101      	movs	r1, #1
    77fe:	6878      	ldr	r0, [r7, #4]
    7800:	4b07      	ldr	r3, [pc, #28]	; (7820 <_spi_sync_enable+0x2c>)
    7802:	4798      	blx	r3
    7804:	4603      	mov	r3, r0
    7806:	2b00      	cmp	r3, #0
    7808:	d002      	beq.n	7810 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    780a:	f06f 0303 	mvn.w	r3, #3
    780e:	e003      	b.n	7818 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    7810:	6878      	ldr	r0, [r7, #4]
    7812:	4b04      	ldr	r3, [pc, #16]	; (7824 <_spi_sync_enable+0x30>)
    7814:	4798      	blx	r3

	return ERR_NONE;
    7816:	2300      	movs	r3, #0
}
    7818:	4618      	mov	r0, r3
    781a:	3708      	adds	r7, #8
    781c:	46bd      	mov	sp, r7
    781e:	bd80      	pop	{r7, pc}
    7820:	00006605 	.word	0x00006605
    7824:	000067cd 	.word	0x000067cd

00007828 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    7828:	b580      	push	{r7, lr}
    782a:	b082      	sub	sp, #8
    782c:	af00      	add	r7, sp, #0
    782e:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7830:	2101      	movs	r1, #1
    7832:	6878      	ldr	r0, [r7, #4]
    7834:	4b07      	ldr	r3, [pc, #28]	; (7854 <_spi_sync_disable+0x2c>)
    7836:	4798      	blx	r3
    7838:	4603      	mov	r3, r0
    783a:	2b00      	cmp	r3, #0
    783c:	d002      	beq.n	7844 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    783e:	f06f 0303 	mvn.w	r3, #3
    7842:	e003      	b.n	784c <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    7844:	6878      	ldr	r0, [r7, #4]
    7846:	4b04      	ldr	r3, [pc, #16]	; (7858 <_spi_sync_disable+0x30>)
    7848:	4798      	blx	r3

	return ERR_NONE;
    784a:	2300      	movs	r3, #0
}
    784c:	4618      	mov	r0, r3
    784e:	3708      	adds	r7, #8
    7850:	46bd      	mov	sp, r7
    7852:	bd80      	pop	{r7, pc}
    7854:	00006605 	.word	0x00006605
    7858:	0000682d 	.word	0x0000682d

0000785c <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    785c:	b580      	push	{r7, lr}
    785e:	b082      	sub	sp, #8
    7860:	af00      	add	r7, sp, #0
    7862:	6078      	str	r0, [r7, #4]
    7864:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    7866:	687b      	ldr	r3, [r7, #4]
    7868:	2b00      	cmp	r3, #0
    786a:	d004      	beq.n	7876 <_spi_load_regs_master+0x1a>
    786c:	683b      	ldr	r3, [r7, #0]
    786e:	2b00      	cmp	r3, #0
    7870:	d001      	beq.n	7876 <_spi_load_regs_master+0x1a>
    7872:	2301      	movs	r3, #1
    7874:	e000      	b.n	7878 <_spi_load_regs_master+0x1c>
    7876:	2300      	movs	r3, #0
    7878:	f003 0301 	and.w	r3, r3, #1
    787c:	b2db      	uxtb	r3, r3
    787e:	f640 1239 	movw	r2, #2361	; 0x939
    7882:	4915      	ldr	r1, [pc, #84]	; (78d8 <_spi_load_regs_master+0x7c>)
    7884:	4618      	mov	r0, r3
    7886:	4b15      	ldr	r3, [pc, #84]	; (78dc <_spi_load_regs_master+0x80>)
    7888:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    788a:	683b      	ldr	r3, [r7, #0]
    788c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    788e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7892:	f023 0301 	bic.w	r3, r3, #1
    7896:	4619      	mov	r1, r3
    7898:	6878      	ldr	r0, [r7, #4]
    789a:	4b11      	ldr	r3, [pc, #68]	; (78e0 <_spi_load_regs_master+0x84>)
    789c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    789e:	683b      	ldr	r3, [r7, #0]
    78a0:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    78a2:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    78a6:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    78aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    78ae:	4619      	mov	r1, r3
    78b0:	6878      	ldr	r0, [r7, #4]
    78b2:	4b0c      	ldr	r3, [pc, #48]	; (78e4 <_spi_load_regs_master+0x88>)
    78b4:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    78b6:	683b      	ldr	r3, [r7, #0]
    78b8:	7b1b      	ldrb	r3, [r3, #12]
    78ba:	4619      	mov	r1, r3
    78bc:	6878      	ldr	r0, [r7, #4]
    78be:	4b0a      	ldr	r3, [pc, #40]	; (78e8 <_spi_load_regs_master+0x8c>)
    78c0:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    78c2:	683b      	ldr	r3, [r7, #0]
    78c4:	7b5b      	ldrb	r3, [r3, #13]
    78c6:	4619      	mov	r1, r3
    78c8:	6878      	ldr	r0, [r7, #4]
    78ca:	4b08      	ldr	r3, [pc, #32]	; (78ec <_spi_load_regs_master+0x90>)
    78cc:	4798      	blx	r3
}
    78ce:	bf00      	nop
    78d0:	3708      	adds	r7, #8
    78d2:	46bd      	mov	sp, r7
    78d4:	bd80      	pop	{r7, pc}
    78d6:	bf00      	nop
    78d8:	00010660 	.word	0x00010660
    78dc:	00003fd5 	.word	0x00003fd5
    78e0:	00006885 	.word	0x00006885
    78e4:	0000699d 	.word	0x0000699d
    78e8:	000069dd 	.word	0x000069dd
    78ec:	00006b15 	.word	0x00006b15

000078f0 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    78f0:	b580      	push	{r7, lr}
    78f2:	b082      	sub	sp, #8
    78f4:	af00      	add	r7, sp, #0
    78f6:	6078      	str	r0, [r7, #4]
    78f8:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    78fa:	687b      	ldr	r3, [r7, #4]
    78fc:	2b00      	cmp	r3, #0
    78fe:	d004      	beq.n	790a <_spi_load_regs_slave+0x1a>
    7900:	683b      	ldr	r3, [r7, #0]
    7902:	2b00      	cmp	r3, #0
    7904:	d001      	beq.n	790a <_spi_load_regs_slave+0x1a>
    7906:	2301      	movs	r3, #1
    7908:	e000      	b.n	790c <_spi_load_regs_slave+0x1c>
    790a:	2300      	movs	r3, #0
    790c:	f003 0301 	and.w	r3, r3, #1
    7910:	b2db      	uxtb	r3, r3
    7912:	f640 124d 	movw	r2, #2381	; 0x94d
    7916:	491a      	ldr	r1, [pc, #104]	; (7980 <_spi_load_regs_slave+0x90>)
    7918:	4618      	mov	r0, r3
    791a:	4b1a      	ldr	r3, [pc, #104]	; (7984 <_spi_load_regs_slave+0x94>)
    791c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    791e:	683b      	ldr	r3, [r7, #0]
    7920:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    7922:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7926:	f023 0301 	bic.w	r3, r3, #1
    792a:	4619      	mov	r1, r3
    792c:	6878      	ldr	r0, [r7, #4]
    792e:	4b16      	ldr	r3, [pc, #88]	; (7988 <_spi_load_regs_slave+0x98>)
    7930:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    7932:	683b      	ldr	r3, [r7, #0]
    7934:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    7936:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    793a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    793e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7942:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    7946:	4619      	mov	r1, r3
    7948:	6878      	ldr	r0, [r7, #4]
    794a:	4b10      	ldr	r3, [pc, #64]	; (798c <_spi_load_regs_slave+0x9c>)
    794c:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    794e:	683b      	ldr	r3, [r7, #0]
    7950:	689b      	ldr	r3, [r3, #8]
    7952:	4619      	mov	r1, r3
    7954:	6878      	ldr	r0, [r7, #4]
    7956:	4b0e      	ldr	r3, [pc, #56]	; (7990 <_spi_load_regs_slave+0xa0>)
    7958:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    795a:	683b      	ldr	r3, [r7, #0]
    795c:	7b5b      	ldrb	r3, [r3, #13]
    795e:	4619      	mov	r1, r3
    7960:	6878      	ldr	r0, [r7, #4]
    7962:	4b0c      	ldr	r3, [pc, #48]	; (7994 <_spi_load_regs_slave+0xa4>)
    7964:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    7966:	bf00      	nop
    7968:	f04f 31ff 	mov.w	r1, #4294967295
    796c:	6878      	ldr	r0, [r7, #4]
    796e:	4b0a      	ldr	r3, [pc, #40]	; (7998 <_spi_load_regs_slave+0xa8>)
    7970:	4798      	blx	r3
    7972:	4603      	mov	r3, r0
    7974:	2b00      	cmp	r3, #0
    7976:	d1f7      	bne.n	7968 <_spi_load_regs_slave+0x78>
		;
}
    7978:	bf00      	nop
    797a:	3708      	adds	r7, #8
    797c:	46bd      	mov	sp, r7
    797e:	bd80      	pop	{r7, pc}
    7980:	00010660 	.word	0x00010660
    7984:	00003fd5 	.word	0x00003fd5
    7988:	00006885 	.word	0x00006885
    798c:	0000699d 	.word	0x0000699d
    7990:	00006a81 	.word	0x00006a81
    7994:	00006b15 	.word	0x00006b15
    7998:	00006605 	.word	0x00006605

0000799c <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    799c:	b580      	push	{r7, lr}
    799e:	b084      	sub	sp, #16
    79a0:	af00      	add	r7, sp, #0
    79a2:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    79a4:	687b      	ldr	r3, [r7, #4]
    79a6:	4618      	mov	r0, r3
    79a8:	4b11      	ldr	r3, [pc, #68]	; (79f0 <_spi_get_regs+0x54>)
    79aa:	4798      	blx	r3
    79ac:	4603      	mov	r3, r0
    79ae:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    79b0:	2300      	movs	r3, #0
    79b2:	73fb      	strb	r3, [r7, #15]
    79b4:	e014      	b.n	79e0 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    79b6:	7bfa      	ldrb	r2, [r7, #15]
    79b8:	490e      	ldr	r1, [pc, #56]	; (79f4 <_spi_get_regs+0x58>)
    79ba:	4613      	mov	r3, r2
    79bc:	011b      	lsls	r3, r3, #4
    79be:	4413      	add	r3, r2
    79c0:	440b      	add	r3, r1
    79c2:	3310      	adds	r3, #16
    79c4:	781b      	ldrb	r3, [r3, #0]
    79c6:	7bba      	ldrb	r2, [r7, #14]
    79c8:	429a      	cmp	r2, r3
    79ca:	d106      	bne.n	79da <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    79cc:	7bfa      	ldrb	r2, [r7, #15]
    79ce:	4613      	mov	r3, r2
    79d0:	011b      	lsls	r3, r3, #4
    79d2:	4413      	add	r3, r2
    79d4:	4a07      	ldr	r2, [pc, #28]	; (79f4 <_spi_get_regs+0x58>)
    79d6:	4413      	add	r3, r2
    79d8:	e006      	b.n	79e8 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    79da:	7bfb      	ldrb	r3, [r7, #15]
    79dc:	3301      	adds	r3, #1
    79de:	73fb      	strb	r3, [r7, #15]
    79e0:	7bfb      	ldrb	r3, [r7, #15]
    79e2:	2b01      	cmp	r3, #1
    79e4:	d9e7      	bls.n	79b6 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    79e6:	2300      	movs	r3, #0
}
    79e8:	4618      	mov	r0, r3
    79ea:	3710      	adds	r7, #16
    79ec:	46bd      	mov	sp, r7
    79ee:	bd80      	pop	{r7, pc}
    79f0:	00006bcd 	.word	0x00006bcd
    79f4:	0001069c 	.word	0x0001069c

000079f8 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    79f8:	b580      	push	{r7, lr}
    79fa:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    79fc:	4b03      	ldr	r3, [pc, #12]	; (7a0c <SERCOM7_0_Handler+0x14>)
    79fe:	681b      	ldr	r3, [r3, #0]
    7a00:	4618      	mov	r0, r3
    7a02:	4b03      	ldr	r3, [pc, #12]	; (7a10 <SERCOM7_0_Handler+0x18>)
    7a04:	4798      	blx	r3
}
    7a06:	bf00      	nop
    7a08:	bd80      	pop	{r7, pc}
    7a0a:	bf00      	nop
    7a0c:	20000bfc 	.word	0x20000bfc
    7a10:	00006f09 	.word	0x00006f09

00007a14 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    7a14:	b580      	push	{r7, lr}
    7a16:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    7a18:	4b03      	ldr	r3, [pc, #12]	; (7a28 <SERCOM7_1_Handler+0x14>)
    7a1a:	681b      	ldr	r3, [r3, #0]
    7a1c:	4618      	mov	r0, r3
    7a1e:	4b03      	ldr	r3, [pc, #12]	; (7a2c <SERCOM7_1_Handler+0x18>)
    7a20:	4798      	blx	r3
}
    7a22:	bf00      	nop
    7a24:	bd80      	pop	{r7, pc}
    7a26:	bf00      	nop
    7a28:	20000bfc 	.word	0x20000bfc
    7a2c:	00006f09 	.word	0x00006f09

00007a30 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    7a30:	b580      	push	{r7, lr}
    7a32:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    7a34:	4b03      	ldr	r3, [pc, #12]	; (7a44 <SERCOM7_2_Handler+0x14>)
    7a36:	681b      	ldr	r3, [r3, #0]
    7a38:	4618      	mov	r0, r3
    7a3a:	4b03      	ldr	r3, [pc, #12]	; (7a48 <SERCOM7_2_Handler+0x18>)
    7a3c:	4798      	blx	r3
}
    7a3e:	bf00      	nop
    7a40:	bd80      	pop	{r7, pc}
    7a42:	bf00      	nop
    7a44:	20000bfc 	.word	0x20000bfc
    7a48:	00006f09 	.word	0x00006f09

00007a4c <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    7a4c:	b580      	push	{r7, lr}
    7a4e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    7a50:	4b03      	ldr	r3, [pc, #12]	; (7a60 <SERCOM7_3_Handler+0x14>)
    7a52:	681b      	ldr	r3, [r3, #0]
    7a54:	4618      	mov	r0, r3
    7a56:	4b03      	ldr	r3, [pc, #12]	; (7a64 <SERCOM7_3_Handler+0x18>)
    7a58:	4798      	blx	r3
}
    7a5a:	bf00      	nop
    7a5c:	bd80      	pop	{r7, pc}
    7a5e:	bf00      	nop
    7a60:	20000bfc 	.word	0x20000bfc
    7a64:	00006f09 	.word	0x00006f09

00007a68 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    7a68:	b580      	push	{r7, lr}
    7a6a:	b084      	sub	sp, #16
    7a6c:	af00      	add	r7, sp, #0
    7a6e:	6078      	str	r0, [r7, #4]
    7a70:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    7a72:	683b      	ldr	r3, [r7, #0]
    7a74:	4618      	mov	r0, r3
    7a76:	4b35      	ldr	r3, [pc, #212]	; (7b4c <_spi_m_sync_init+0xe4>)
    7a78:	4798      	blx	r3
    7a7a:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    7a7c:	687b      	ldr	r3, [r7, #4]
    7a7e:	2b00      	cmp	r3, #0
    7a80:	d004      	beq.n	7a8c <_spi_m_sync_init+0x24>
    7a82:	683b      	ldr	r3, [r7, #0]
    7a84:	2b00      	cmp	r3, #0
    7a86:	d001      	beq.n	7a8c <_spi_m_sync_init+0x24>
    7a88:	2301      	movs	r3, #1
    7a8a:	e000      	b.n	7a8e <_spi_m_sync_init+0x26>
    7a8c:	2300      	movs	r3, #0
    7a8e:	f003 0301 	and.w	r3, r3, #1
    7a92:	b2db      	uxtb	r3, r3
    7a94:	f640 128c 	movw	r2, #2444	; 0x98c
    7a98:	492d      	ldr	r1, [pc, #180]	; (7b50 <_spi_m_sync_init+0xe8>)
    7a9a:	4618      	mov	r0, r3
    7a9c:	4b2d      	ldr	r3, [pc, #180]	; (7b54 <_spi_m_sync_init+0xec>)
    7a9e:	4798      	blx	r3

	if (regs == NULL) {
    7aa0:	68fb      	ldr	r3, [r7, #12]
    7aa2:	2b00      	cmp	r3, #0
    7aa4:	d102      	bne.n	7aac <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    7aa6:	f06f 030c 	mvn.w	r3, #12
    7aaa:	e04a      	b.n	7b42 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7aac:	2101      	movs	r1, #1
    7aae:	6838      	ldr	r0, [r7, #0]
    7ab0:	4b29      	ldr	r3, [pc, #164]	; (7b58 <_spi_m_sync_init+0xf0>)
    7ab2:	4798      	blx	r3
    7ab4:	4603      	mov	r3, r0
    7ab6:	f083 0301 	eor.w	r3, r3, #1
    7aba:	b2db      	uxtb	r3, r3
    7abc:	2b00      	cmp	r3, #0
    7abe:	d019      	beq.n	7af4 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7ac0:	68fb      	ldr	r3, [r7, #12]
    7ac2:	681b      	ldr	r3, [r3, #0]
    7ac4:	f003 031c 	and.w	r3, r3, #28
    7ac8:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7aca:	2102      	movs	r1, #2
    7acc:	6838      	ldr	r0, [r7, #0]
    7ace:	4b23      	ldr	r3, [pc, #140]	; (7b5c <_spi_m_sync_init+0xf4>)
    7ad0:	4798      	blx	r3
    7ad2:	4603      	mov	r3, r0
    7ad4:	2b00      	cmp	r3, #0
    7ad6:	d006      	beq.n	7ae6 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    7ad8:	6838      	ldr	r0, [r7, #0]
    7ada:	4b21      	ldr	r3, [pc, #132]	; (7b60 <_spi_m_sync_init+0xf8>)
    7adc:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    7ade:	2102      	movs	r1, #2
    7ae0:	6838      	ldr	r0, [r7, #0]
    7ae2:	4b20      	ldr	r3, [pc, #128]	; (7b64 <_spi_m_sync_init+0xfc>)
    7ae4:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7ae6:	68bb      	ldr	r3, [r7, #8]
    7ae8:	f043 0301 	orr.w	r3, r3, #1
    7aec:	4619      	mov	r1, r3
    7aee:	6838      	ldr	r0, [r7, #0]
    7af0:	4b1d      	ldr	r3, [pc, #116]	; (7b68 <_spi_m_sync_init+0x100>)
    7af2:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    7af4:	2101      	movs	r1, #1
    7af6:	6838      	ldr	r0, [r7, #0]
    7af8:	4b1a      	ldr	r3, [pc, #104]	; (7b64 <_spi_m_sync_init+0xfc>)
    7afa:	4798      	blx	r3

	dev->prvt = hw;
    7afc:	687b      	ldr	r3, [r7, #4]
    7afe:	683a      	ldr	r2, [r7, #0]
    7b00:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    7b02:	68fb      	ldr	r3, [r7, #12]
    7b04:	681b      	ldr	r3, [r3, #0]
    7b06:	f003 031c 	and.w	r3, r3, #28
    7b0a:	2b08      	cmp	r3, #8
    7b0c:	d104      	bne.n	7b18 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    7b0e:	68f9      	ldr	r1, [r7, #12]
    7b10:	6838      	ldr	r0, [r7, #0]
    7b12:	4b16      	ldr	r3, [pc, #88]	; (7b6c <_spi_m_sync_init+0x104>)
    7b14:	4798      	blx	r3
    7b16:	e003      	b.n	7b20 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    7b18:	68f9      	ldr	r1, [r7, #12]
    7b1a:	6838      	ldr	r0, [r7, #0]
    7b1c:	4b14      	ldr	r3, [pc, #80]	; (7b70 <_spi_m_sync_init+0x108>)
    7b1e:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    7b20:	68fb      	ldr	r3, [r7, #12]
    7b22:	685b      	ldr	r3, [r3, #4]
    7b24:	f003 0307 	and.w	r3, r3, #7
    7b28:	2b00      	cmp	r3, #0
    7b2a:	d101      	bne.n	7b30 <_spi_m_sync_init+0xc8>
    7b2c:	2201      	movs	r2, #1
    7b2e:	e000      	b.n	7b32 <_spi_m_sync_init+0xca>
    7b30:	2202      	movs	r2, #2
    7b32:	687b      	ldr	r3, [r7, #4]
    7b34:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    7b36:	68fb      	ldr	r3, [r7, #12]
    7b38:	89db      	ldrh	r3, [r3, #14]
    7b3a:	b29a      	uxth	r2, r3
    7b3c:	687b      	ldr	r3, [r7, #4]
    7b3e:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    7b40:	2300      	movs	r3, #0
}
    7b42:	4618      	mov	r0, r3
    7b44:	3710      	adds	r7, #16
    7b46:	46bd      	mov	sp, r7
    7b48:	bd80      	pop	{r7, pc}
    7b4a:	bf00      	nop
    7b4c:	0000799d 	.word	0x0000799d
    7b50:	00010660 	.word	0x00010660
    7b54:	00003fd5 	.word	0x00003fd5
    7b58:	00006605 	.word	0x00006605
    7b5c:	00006855 	.word	0x00006855
    7b60:	0000682d 	.word	0x0000682d
    7b64:	000065e1 	.word	0x000065e1
    7b68:	00006885 	.word	0x00006885
    7b6c:	000078f1 	.word	0x000078f1
    7b70:	0000785d 	.word	0x0000785d

00007b74 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    7b74:	b580      	push	{r7, lr}
    7b76:	b082      	sub	sp, #8
    7b78:	af00      	add	r7, sp, #0
    7b7a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7b7c:	687b      	ldr	r3, [r7, #4]
    7b7e:	2b00      	cmp	r3, #0
    7b80:	d005      	beq.n	7b8e <_spi_m_sync_enable+0x1a>
    7b82:	687b      	ldr	r3, [r7, #4]
    7b84:	681b      	ldr	r3, [r3, #0]
    7b86:	2b00      	cmp	r3, #0
    7b88:	d001      	beq.n	7b8e <_spi_m_sync_enable+0x1a>
    7b8a:	2301      	movs	r3, #1
    7b8c:	e000      	b.n	7b90 <_spi_m_sync_enable+0x1c>
    7b8e:	2300      	movs	r3, #0
    7b90:	f003 0301 	and.w	r3, r3, #1
    7b94:	b2db      	uxtb	r3, r3
    7b96:	f640 12eb 	movw	r2, #2539	; 0x9eb
    7b9a:	4907      	ldr	r1, [pc, #28]	; (7bb8 <_spi_m_sync_enable+0x44>)
    7b9c:	4618      	mov	r0, r3
    7b9e:	4b07      	ldr	r3, [pc, #28]	; (7bbc <_spi_m_sync_enable+0x48>)
    7ba0:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    7ba2:	687b      	ldr	r3, [r7, #4]
    7ba4:	681b      	ldr	r3, [r3, #0]
    7ba6:	4618      	mov	r0, r3
    7ba8:	4b05      	ldr	r3, [pc, #20]	; (7bc0 <_spi_m_sync_enable+0x4c>)
    7baa:	4798      	blx	r3
    7bac:	4603      	mov	r3, r0
}
    7bae:	4618      	mov	r0, r3
    7bb0:	3708      	adds	r7, #8
    7bb2:	46bd      	mov	sp, r7
    7bb4:	bd80      	pop	{r7, pc}
    7bb6:	bf00      	nop
    7bb8:	00010660 	.word	0x00010660
    7bbc:	00003fd5 	.word	0x00003fd5
    7bc0:	000077f5 	.word	0x000077f5

00007bc4 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    7bc4:	b580      	push	{r7, lr}
    7bc6:	b082      	sub	sp, #8
    7bc8:	af00      	add	r7, sp, #0
    7bca:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7bcc:	687b      	ldr	r3, [r7, #4]
    7bce:	2b00      	cmp	r3, #0
    7bd0:	d005      	beq.n	7bde <_spi_m_sync_disable+0x1a>
    7bd2:	687b      	ldr	r3, [r7, #4]
    7bd4:	681b      	ldr	r3, [r3, #0]
    7bd6:	2b00      	cmp	r3, #0
    7bd8:	d001      	beq.n	7bde <_spi_m_sync_disable+0x1a>
    7bda:	2301      	movs	r3, #1
    7bdc:	e000      	b.n	7be0 <_spi_m_sync_disable+0x1c>
    7bde:	2300      	movs	r3, #0
    7be0:	f003 0301 	and.w	r3, r3, #1
    7be4:	b2db      	uxtb	r3, r3
    7be6:	f640 2207 	movw	r2, #2567	; 0xa07
    7bea:	4907      	ldr	r1, [pc, #28]	; (7c08 <_spi_m_sync_disable+0x44>)
    7bec:	4618      	mov	r0, r3
    7bee:	4b07      	ldr	r3, [pc, #28]	; (7c0c <_spi_m_sync_disable+0x48>)
    7bf0:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    7bf2:	687b      	ldr	r3, [r7, #4]
    7bf4:	681b      	ldr	r3, [r3, #0]
    7bf6:	4618      	mov	r0, r3
    7bf8:	4b05      	ldr	r3, [pc, #20]	; (7c10 <_spi_m_sync_disable+0x4c>)
    7bfa:	4798      	blx	r3
    7bfc:	4603      	mov	r3, r0
}
    7bfe:	4618      	mov	r0, r3
    7c00:	3708      	adds	r7, #8
    7c02:	46bd      	mov	sp, r7
    7c04:	bd80      	pop	{r7, pc}
    7c06:	bf00      	nop
    7c08:	00010660 	.word	0x00010660
    7c0c:	00003fd5 	.word	0x00003fd5
    7c10:	00007829 	.word	0x00007829

00007c14 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    7c14:	b580      	push	{r7, lr}
    7c16:	b082      	sub	sp, #8
    7c18:	af00      	add	r7, sp, #0
    7c1a:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    7c1c:	bf00      	nop
    7c1e:	2103      	movs	r1, #3
    7c20:	6878      	ldr	r0, [r7, #4]
    7c22:	4b06      	ldr	r3, [pc, #24]	; (7c3c <_spi_wait_bus_idle+0x28>)
    7c24:	4798      	blx	r3
    7c26:	4603      	mov	r3, r0
    7c28:	2b00      	cmp	r3, #0
    7c2a:	d0f8      	beq.n	7c1e <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    7c2c:	2103      	movs	r1, #3
    7c2e:	6878      	ldr	r0, [r7, #4]
    7c30:	4b03      	ldr	r3, [pc, #12]	; (7c40 <_spi_wait_bus_idle+0x2c>)
    7c32:	4798      	blx	r3
}
    7c34:	bf00      	nop
    7c36:	3708      	adds	r7, #8
    7c38:	46bd      	mov	sp, r7
    7c3a:	bd80      	pop	{r7, pc}
    7c3c:	00006699 	.word	0x00006699
    7c40:	000066db 	.word	0x000066db

00007c44 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    7c44:	b580      	push	{r7, lr}
    7c46:	b086      	sub	sp, #24
    7c48:	af00      	add	r7, sp, #0
    7c4a:	60f8      	str	r0, [r7, #12]
    7c4c:	60b9      	str	r1, [r7, #8]
    7c4e:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    7c50:	68bb      	ldr	r3, [r7, #8]
    7c52:	f003 0304 	and.w	r3, r3, #4
    7c56:	2b00      	cmp	r3, #0
    7c58:	d101      	bne.n	7c5e <_spi_rx_check_and_receive+0x1a>
		return false;
    7c5a:	2300      	movs	r3, #0
    7c5c:	e022      	b.n	7ca4 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    7c5e:	68f8      	ldr	r0, [r7, #12]
    7c60:	4b12      	ldr	r3, [pc, #72]	; (7cac <_spi_rx_check_and_receive+0x68>)
    7c62:	4798      	blx	r3
    7c64:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    7c66:	687b      	ldr	r3, [r7, #4]
    7c68:	685b      	ldr	r3, [r3, #4]
    7c6a:	2b00      	cmp	r3, #0
    7c6c:	d014      	beq.n	7c98 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    7c6e:	687b      	ldr	r3, [r7, #4]
    7c70:	685b      	ldr	r3, [r3, #4]
    7c72:	1c59      	adds	r1, r3, #1
    7c74:	687a      	ldr	r2, [r7, #4]
    7c76:	6051      	str	r1, [r2, #4]
    7c78:	697a      	ldr	r2, [r7, #20]
    7c7a:	b2d2      	uxtb	r2, r2
    7c7c:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    7c7e:	687b      	ldr	r3, [r7, #4]
    7c80:	7c1b      	ldrb	r3, [r3, #16]
    7c82:	2b01      	cmp	r3, #1
    7c84:	d908      	bls.n	7c98 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    7c86:	687b      	ldr	r3, [r7, #4]
    7c88:	685b      	ldr	r3, [r3, #4]
    7c8a:	1c59      	adds	r1, r3, #1
    7c8c:	687a      	ldr	r2, [r7, #4]
    7c8e:	6051      	str	r1, [r2, #4]
    7c90:	697a      	ldr	r2, [r7, #20]
    7c92:	0a12      	lsrs	r2, r2, #8
    7c94:	b2d2      	uxtb	r2, r2
    7c96:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    7c98:	687b      	ldr	r3, [r7, #4]
    7c9a:	68db      	ldr	r3, [r3, #12]
    7c9c:	1c5a      	adds	r2, r3, #1
    7c9e:	687b      	ldr	r3, [r7, #4]
    7ca0:	60da      	str	r2, [r3, #12]

	return true;
    7ca2:	2301      	movs	r3, #1
}
    7ca4:	4618      	mov	r0, r3
    7ca6:	3718      	adds	r7, #24
    7ca8:	46bd      	mov	sp, r7
    7caa:	bd80      	pop	{r7, pc}
    7cac:	00006afd 	.word	0x00006afd

00007cb0 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    7cb0:	b580      	push	{r7, lr}
    7cb2:	b086      	sub	sp, #24
    7cb4:	af00      	add	r7, sp, #0
    7cb6:	60f8      	str	r0, [r7, #12]
    7cb8:	60b9      	str	r1, [r7, #8]
    7cba:	607a      	str	r2, [r7, #4]
    7cbc:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    7cbe:	68bb      	ldr	r3, [r7, #8]
    7cc0:	f003 0301 	and.w	r3, r3, #1
    7cc4:	2b00      	cmp	r3, #0
    7cc6:	d028      	beq.n	7d1a <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    7cc8:	687b      	ldr	r3, [r7, #4]
    7cca:	681b      	ldr	r3, [r3, #0]
    7ccc:	2b00      	cmp	r3, #0
    7cce:	d018      	beq.n	7d02 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    7cd0:	687b      	ldr	r3, [r7, #4]
    7cd2:	681b      	ldr	r3, [r3, #0]
    7cd4:	1c59      	adds	r1, r3, #1
    7cd6:	687a      	ldr	r2, [r7, #4]
    7cd8:	6011      	str	r1, [r2, #0]
    7cda:	781b      	ldrb	r3, [r3, #0]
    7cdc:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    7cde:	687b      	ldr	r3, [r7, #4]
    7ce0:	7c1b      	ldrb	r3, [r3, #16]
    7ce2:	2b01      	cmp	r3, #1
    7ce4:	d90f      	bls.n	7d06 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    7ce6:	687b      	ldr	r3, [r7, #4]
    7ce8:	681b      	ldr	r3, [r3, #0]
    7cea:	781b      	ldrb	r3, [r3, #0]
    7cec:	021b      	lsls	r3, r3, #8
    7cee:	461a      	mov	r2, r3
    7cf0:	697b      	ldr	r3, [r7, #20]
    7cf2:	4313      	orrs	r3, r2
    7cf4:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    7cf6:	687b      	ldr	r3, [r7, #4]
    7cf8:	681b      	ldr	r3, [r3, #0]
    7cfa:	1c5a      	adds	r2, r3, #1
    7cfc:	687b      	ldr	r3, [r7, #4]
    7cfe:	601a      	str	r2, [r3, #0]
    7d00:	e001      	b.n	7d06 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    7d02:	887b      	ldrh	r3, [r7, #2]
    7d04:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    7d06:	687b      	ldr	r3, [r7, #4]
    7d08:	689b      	ldr	r3, [r3, #8]
    7d0a:	1c5a      	adds	r2, r3, #1
    7d0c:	687b      	ldr	r3, [r7, #4]
    7d0e:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    7d10:	6979      	ldr	r1, [r7, #20]
    7d12:	68f8      	ldr	r0, [r7, #12]
    7d14:	4b03      	ldr	r3, [pc, #12]	; (7d24 <_spi_tx_check_and_send+0x74>)
    7d16:	4798      	blx	r3
    7d18:	e000      	b.n	7d1c <_spi_tx_check_and_send+0x6c>
		return;
    7d1a:	bf00      	nop
}
    7d1c:	3718      	adds	r7, #24
    7d1e:	46bd      	mov	sp, r7
    7d20:	bd80      	pop	{r7, pc}
    7d22:	bf00      	nop
    7d24:	00006ae1 	.word	0x00006ae1

00007d28 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    7d28:	b580      	push	{r7, lr}
    7d2a:	b082      	sub	sp, #8
    7d2c:	af00      	add	r7, sp, #0
    7d2e:	6078      	str	r0, [r7, #4]
    7d30:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    7d32:	687b      	ldr	r3, [r7, #4]
    7d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7d38:	2b00      	cmp	r3, #0
    7d3a:	d00b      	beq.n	7d54 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    7d3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7d40:	6838      	ldr	r0, [r7, #0]
    7d42:	4b07      	ldr	r3, [pc, #28]	; (7d60 <_spi_err_check+0x38>)
    7d44:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    7d46:	2180      	movs	r1, #128	; 0x80
    7d48:	6838      	ldr	r0, [r7, #0]
    7d4a:	4b06      	ldr	r3, [pc, #24]	; (7d64 <_spi_err_check+0x3c>)
    7d4c:	4798      	blx	r3
		return ERR_OVERFLOW;
    7d4e:	f06f 0312 	mvn.w	r3, #18
    7d52:	e000      	b.n	7d56 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    7d54:	2300      	movs	r3, #0
}
    7d56:	4618      	mov	r0, r3
    7d58:	3708      	adds	r7, #8
    7d5a:	46bd      	mov	sp, r7
    7d5c:	bd80      	pop	{r7, pc}
    7d5e:	bf00      	nop
    7d60:	00006b35 	.word	0x00006b35
    7d64:	000066db 	.word	0x000066db

00007d68 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    7d68:	b590      	push	{r4, r7, lr}
    7d6a:	b08b      	sub	sp, #44	; 0x2c
    7d6c:	af00      	add	r7, sp, #0
    7d6e:	6078      	str	r0, [r7, #4]
    7d70:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    7d72:	687b      	ldr	r3, [r7, #4]
    7d74:	681b      	ldr	r3, [r3, #0]
    7d76:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    7d78:	2300      	movs	r3, #0
    7d7a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    7d7c:	683b      	ldr	r3, [r7, #0]
    7d7e:	681b      	ldr	r3, [r3, #0]
    7d80:	60bb      	str	r3, [r7, #8]
    7d82:	683b      	ldr	r3, [r7, #0]
    7d84:	685b      	ldr	r3, [r3, #4]
    7d86:	60fb      	str	r3, [r7, #12]
    7d88:	2300      	movs	r3, #0
    7d8a:	613b      	str	r3, [r7, #16]
    7d8c:	2300      	movs	r3, #0
    7d8e:	617b      	str	r3, [r7, #20]
    7d90:	687b      	ldr	r3, [r7, #4]
    7d92:	791b      	ldrb	r3, [r3, #4]
    7d94:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    7d96:	687b      	ldr	r3, [r7, #4]
    7d98:	2b00      	cmp	r3, #0
    7d9a:	d004      	beq.n	7da6 <_spi_m_sync_trans+0x3e>
    7d9c:	6a3b      	ldr	r3, [r7, #32]
    7d9e:	2b00      	cmp	r3, #0
    7da0:	d001      	beq.n	7da6 <_spi_m_sync_trans+0x3e>
    7da2:	2301      	movs	r3, #1
    7da4:	e000      	b.n	7da8 <_spi_m_sync_trans+0x40>
    7da6:	2300      	movs	r3, #0
    7da8:	f003 0301 	and.w	r3, r3, #1
    7dac:	b2db      	uxtb	r3, r3
    7dae:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
    7db2:	492b      	ldr	r1, [pc, #172]	; (7e60 <_spi_m_sync_trans+0xf8>)
    7db4:	4618      	mov	r0, r3
    7db6:	4b2b      	ldr	r3, [pc, #172]	; (7e64 <_spi_m_sync_trans+0xfc>)
    7db8:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    7dba:	2107      	movs	r1, #7
    7dbc:	6a38      	ldr	r0, [r7, #32]
    7dbe:	4b2a      	ldr	r3, [pc, #168]	; (7e68 <_spi_m_sync_trans+0x100>)
    7dc0:	4798      	blx	r3
    7dc2:	4603      	mov	r3, r0
    7dc4:	2b00      	cmp	r3, #0
    7dc6:	d002      	beq.n	7dce <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    7dc8:	f06f 0303 	mvn.w	r3, #3
    7dcc:	e043      	b.n	7e56 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    7dce:	6a38      	ldr	r0, [r7, #32]
    7dd0:	4b26      	ldr	r3, [pc, #152]	; (7e6c <_spi_m_sync_trans+0x104>)
    7dd2:	4798      	blx	r3
    7dd4:	4603      	mov	r3, r0
    7dd6:	f083 0301 	eor.w	r3, r3, #1
    7dda:	b2db      	uxtb	r3, r3
    7ddc:	2b00      	cmp	r3, #0
    7dde:	d002      	beq.n	7de6 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    7de0:	f06f 0313 	mvn.w	r3, #19
    7de4:	e037      	b.n	7e56 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    7de6:	6a38      	ldr	r0, [r7, #32]
    7de8:	4b21      	ldr	r3, [pc, #132]	; (7e70 <_spi_m_sync_trans+0x108>)
    7dea:	4798      	blx	r3
    7dec:	4603      	mov	r3, r0
    7dee:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    7df0:	f107 0308 	add.w	r3, r7, #8
    7df4:	461a      	mov	r2, r3
    7df6:	69f9      	ldr	r1, [r7, #28]
    7df8:	6a38      	ldr	r0, [r7, #32]
    7dfa:	4b1e      	ldr	r3, [pc, #120]	; (7e74 <_spi_m_sync_trans+0x10c>)
    7dfc:	4798      	blx	r3
    7dfe:	4603      	mov	r3, r0
    7e00:	f083 0301 	eor.w	r3, r3, #1
    7e04:	b2db      	uxtb	r3, r3
    7e06:	2b00      	cmp	r3, #0
    7e08:	d00b      	beq.n	7e22 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    7e0a:	697a      	ldr	r2, [r7, #20]
    7e0c:	693b      	ldr	r3, [r7, #16]
    7e0e:	429a      	cmp	r2, r3
    7e10:	d307      	bcc.n	7e22 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    7e12:	687b      	ldr	r3, [r7, #4]
    7e14:	88db      	ldrh	r3, [r3, #6]
    7e16:	f107 0208 	add.w	r2, r7, #8
    7e1a:	69f9      	ldr	r1, [r7, #28]
    7e1c:	6a38      	ldr	r0, [r7, #32]
    7e1e:	4c16      	ldr	r4, [pc, #88]	; (7e78 <_spi_m_sync_trans+0x110>)
    7e20:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    7e22:	6a39      	ldr	r1, [r7, #32]
    7e24:	69f8      	ldr	r0, [r7, #28]
    7e26:	4b15      	ldr	r3, [pc, #84]	; (7e7c <_spi_m_sync_trans+0x114>)
    7e28:	4798      	blx	r3
    7e2a:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    7e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7e2e:	2b00      	cmp	r3, #0
    7e30:	db0c      	blt.n	7e4c <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    7e32:	693a      	ldr	r2, [r7, #16]
    7e34:	683b      	ldr	r3, [r7, #0]
    7e36:	689b      	ldr	r3, [r3, #8]
    7e38:	429a      	cmp	r2, r3
    7e3a:	d3d4      	bcc.n	7de6 <_spi_m_sync_trans+0x7e>
    7e3c:	697a      	ldr	r2, [r7, #20]
    7e3e:	683b      	ldr	r3, [r7, #0]
    7e40:	689b      	ldr	r3, [r3, #8]
    7e42:	429a      	cmp	r2, r3
    7e44:	d3cf      	bcc.n	7de6 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    7e46:	693b      	ldr	r3, [r7, #16]
    7e48:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    7e4a:	e000      	b.n	7e4e <_spi_m_sync_trans+0xe6>
			break;
    7e4c:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    7e4e:	6a38      	ldr	r0, [r7, #32]
    7e50:	4b0b      	ldr	r3, [pc, #44]	; (7e80 <_spi_m_sync_trans+0x118>)
    7e52:	4798      	blx	r3

	return rc;
    7e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    7e56:	4618      	mov	r0, r3
    7e58:	372c      	adds	r7, #44	; 0x2c
    7e5a:	46bd      	mov	sp, r7
    7e5c:	bd90      	pop	{r4, r7, pc}
    7e5e:	bf00      	nop
    7e60:	00010660 	.word	0x00010660
    7e64:	00003fd5 	.word	0x00003fd5
    7e68:	00006605 	.word	0x00006605
    7e6c:	000067f5 	.word	0x000067f5
    7e70:	000066c1 	.word	0x000066c1
    7e74:	00007c45 	.word	0x00007c45
    7e78:	00007cb1 	.word	0x00007cb1
    7e7c:	00007d29 	.word	0x00007d29
    7e80:	00007c15 	.word	0x00007c15

00007e84 <__NVIC_EnableIRQ>:
{
    7e84:	b480      	push	{r7}
    7e86:	b083      	sub	sp, #12
    7e88:	af00      	add	r7, sp, #0
    7e8a:	4603      	mov	r3, r0
    7e8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7e92:	2b00      	cmp	r3, #0
    7e94:	db0b      	blt.n	7eae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7e96:	4909      	ldr	r1, [pc, #36]	; (7ebc <__NVIC_EnableIRQ+0x38>)
    7e98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7e9c:	095b      	lsrs	r3, r3, #5
    7e9e:	88fa      	ldrh	r2, [r7, #6]
    7ea0:	f002 021f 	and.w	r2, r2, #31
    7ea4:	2001      	movs	r0, #1
    7ea6:	fa00 f202 	lsl.w	r2, r0, r2
    7eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7eae:	bf00      	nop
    7eb0:	370c      	adds	r7, #12
    7eb2:	46bd      	mov	sp, r7
    7eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7eb8:	4770      	bx	lr
    7eba:	bf00      	nop
    7ebc:	e000e100 	.word	0xe000e100

00007ec0 <__NVIC_DisableIRQ>:
{
    7ec0:	b480      	push	{r7}
    7ec2:	b083      	sub	sp, #12
    7ec4:	af00      	add	r7, sp, #0
    7ec6:	4603      	mov	r3, r0
    7ec8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7ece:	2b00      	cmp	r3, #0
    7ed0:	db10      	blt.n	7ef4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7ed2:	490b      	ldr	r1, [pc, #44]	; (7f00 <__NVIC_DisableIRQ+0x40>)
    7ed4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7ed8:	095b      	lsrs	r3, r3, #5
    7eda:	88fa      	ldrh	r2, [r7, #6]
    7edc:	f002 021f 	and.w	r2, r2, #31
    7ee0:	2001      	movs	r0, #1
    7ee2:	fa00 f202 	lsl.w	r2, r0, r2
    7ee6:	3320      	adds	r3, #32
    7ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7eec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7ef0:	f3bf 8f6f 	isb	sy
}
    7ef4:	bf00      	nop
    7ef6:	370c      	adds	r7, #12
    7ef8:	46bd      	mov	sp, r7
    7efa:	f85d 7b04 	ldr.w	r7, [sp], #4
    7efe:	4770      	bx	lr
    7f00:	e000e100 	.word	0xe000e100

00007f04 <__NVIC_ClearPendingIRQ>:
{
    7f04:	b480      	push	{r7}
    7f06:	b083      	sub	sp, #12
    7f08:	af00      	add	r7, sp, #0
    7f0a:	4603      	mov	r3, r0
    7f0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7f12:	2b00      	cmp	r3, #0
    7f14:	db0c      	blt.n	7f30 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7f16:	4909      	ldr	r1, [pc, #36]	; (7f3c <__NVIC_ClearPendingIRQ+0x38>)
    7f18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7f1c:	095b      	lsrs	r3, r3, #5
    7f1e:	88fa      	ldrh	r2, [r7, #6]
    7f20:	f002 021f 	and.w	r2, r2, #31
    7f24:	2001      	movs	r0, #1
    7f26:	fa00 f202 	lsl.w	r2, r0, r2
    7f2a:	3360      	adds	r3, #96	; 0x60
    7f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7f30:	bf00      	nop
    7f32:	370c      	adds	r7, #12
    7f34:	46bd      	mov	sp, r7
    7f36:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f3a:	4770      	bx	lr
    7f3c:	e000e100 	.word	0xe000e100

00007f40 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7f40:	b480      	push	{r7}
    7f42:	b083      	sub	sp, #12
    7f44:	af00      	add	r7, sp, #0
    7f46:	6078      	str	r0, [r7, #4]
    7f48:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    7f4a:	bf00      	nop
    7f4c:	687b      	ldr	r3, [r7, #4]
    7f4e:	689a      	ldr	r2, [r3, #8]
    7f50:	683b      	ldr	r3, [r7, #0]
    7f52:	4013      	ands	r3, r2
    7f54:	2b00      	cmp	r3, #0
    7f56:	d1f9      	bne.n	7f4c <hri_tcc_wait_for_sync+0xc>
	};
}
    7f58:	bf00      	nop
    7f5a:	370c      	adds	r7, #12
    7f5c:	46bd      	mov	sp, r7
    7f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f62:	4770      	bx	lr

00007f64 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7f64:	b480      	push	{r7}
    7f66:	b083      	sub	sp, #12
    7f68:	af00      	add	r7, sp, #0
    7f6a:	6078      	str	r0, [r7, #4]
    7f6c:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    7f6e:	687b      	ldr	r3, [r7, #4]
    7f70:	689a      	ldr	r2, [r3, #8]
    7f72:	683b      	ldr	r3, [r7, #0]
    7f74:	4013      	ands	r3, r2
    7f76:	2b00      	cmp	r3, #0
    7f78:	bf14      	ite	ne
    7f7a:	2301      	movne	r3, #1
    7f7c:	2300      	moveq	r3, #0
    7f7e:	b2db      	uxtb	r3, r3
}
    7f80:	4618      	mov	r0, r3
    7f82:	370c      	adds	r7, #12
    7f84:	46bd      	mov	sp, r7
    7f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f8a:	4770      	bx	lr

00007f8c <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7f8c:	b480      	push	{r7}
    7f8e:	b083      	sub	sp, #12
    7f90:	af00      	add	r7, sp, #0
    7f92:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    7f94:	687b      	ldr	r3, [r7, #4]
    7f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7f98:	f003 0301 	and.w	r3, r3, #1
    7f9c:	2b00      	cmp	r3, #0
    7f9e:	bf14      	ite	ne
    7fa0:	2301      	movne	r3, #1
    7fa2:	2300      	moveq	r3, #0
    7fa4:	b2db      	uxtb	r3, r3
}
    7fa6:	4618      	mov	r0, r3
    7fa8:	370c      	adds	r7, #12
    7faa:	46bd      	mov	sp, r7
    7fac:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fb0:	4770      	bx	lr

00007fb2 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    7fb2:	b480      	push	{r7}
    7fb4:	b083      	sub	sp, #12
    7fb6:	af00      	add	r7, sp, #0
    7fb8:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    7fba:	687b      	ldr	r3, [r7, #4]
    7fbc:	2201      	movs	r2, #1
    7fbe:	62da      	str	r2, [r3, #44]	; 0x2c
}
    7fc0:	bf00      	nop
    7fc2:	370c      	adds	r7, #12
    7fc4:	46bd      	mov	sp, r7
    7fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fca:	4770      	bx	lr

00007fcc <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    7fcc:	b480      	push	{r7}
    7fce:	b083      	sub	sp, #12
    7fd0:	af00      	add	r7, sp, #0
    7fd2:	6078      	str	r0, [r7, #4]
    7fd4:	460b      	mov	r3, r1
    7fd6:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    7fd8:	687b      	ldr	r3, [r7, #4]
    7fda:	78fa      	ldrb	r2, [r7, #3]
    7fdc:	715a      	strb	r2, [r3, #5]
}
    7fde:	bf00      	nop
    7fe0:	370c      	adds	r7, #12
    7fe2:	46bd      	mov	sp, r7
    7fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fe8:	4770      	bx	lr

00007fea <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    7fea:	b480      	push	{r7}
    7fec:	b083      	sub	sp, #12
    7fee:	af00      	add	r7, sp, #0
    7ff0:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    7ff2:	687b      	ldr	r3, [r7, #4]
    7ff4:	2201      	movs	r2, #1
    7ff6:	629a      	str	r2, [r3, #40]	; 0x28
}
    7ff8:	bf00      	nop
    7ffa:	370c      	adds	r7, #12
    7ffc:	46bd      	mov	sp, r7
    7ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8002:	4770      	bx	lr

00008004 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    8004:	b580      	push	{r7, lr}
    8006:	b082      	sub	sp, #8
    8008:	af00      	add	r7, sp, #0
    800a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    800c:	687b      	ldr	r3, [r7, #4]
    800e:	681b      	ldr	r3, [r3, #0]
    8010:	f043 0201 	orr.w	r2, r3, #1
    8014:	687b      	ldr	r3, [r7, #4]
    8016:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    8018:	2101      	movs	r1, #1
    801a:	6878      	ldr	r0, [r7, #4]
    801c:	4b02      	ldr	r3, [pc, #8]	; (8028 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    801e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    8020:	bf00      	nop
    8022:	3708      	adds	r7, #8
    8024:	46bd      	mov	sp, r7
    8026:	bd80      	pop	{r7, pc}
    8028:	00007f41 	.word	0x00007f41

0000802c <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    802c:	b580      	push	{r7, lr}
    802e:	b082      	sub	sp, #8
    8030:	af00      	add	r7, sp, #0
    8032:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    8034:	687b      	ldr	r3, [r7, #4]
    8036:	681b      	ldr	r3, [r3, #0]
    8038:	f043 0202 	orr.w	r2, r3, #2
    803c:	687b      	ldr	r3, [r7, #4]
    803e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    8040:	2103      	movs	r1, #3
    8042:	6878      	ldr	r0, [r7, #4]
    8044:	4b02      	ldr	r3, [pc, #8]	; (8050 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    8046:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    8048:	bf00      	nop
    804a:	3708      	adds	r7, #8
    804c:	46bd      	mov	sp, r7
    804e:	bd80      	pop	{r7, pc}
    8050:	00007f41 	.word	0x00007f41

00008054 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8054:	b580      	push	{r7, lr}
    8056:	b084      	sub	sp, #16
    8058:	af00      	add	r7, sp, #0
    805a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    805c:	2103      	movs	r1, #3
    805e:	6878      	ldr	r0, [r7, #4]
    8060:	4b09      	ldr	r3, [pc, #36]	; (8088 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    8062:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    8064:	687b      	ldr	r3, [r7, #4]
    8066:	681b      	ldr	r3, [r3, #0]
    8068:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    806a:	68fb      	ldr	r3, [r7, #12]
    806c:	085b      	lsrs	r3, r3, #1
    806e:	f003 0301 	and.w	r3, r3, #1
    8072:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    8074:	68fb      	ldr	r3, [r7, #12]
    8076:	2b00      	cmp	r3, #0
    8078:	bf14      	ite	ne
    807a:	2301      	movne	r3, #1
    807c:	2300      	moveq	r3, #0
    807e:	b2db      	uxtb	r3, r3
}
    8080:	4618      	mov	r0, r3
    8082:	3710      	adds	r7, #16
    8084:	46bd      	mov	sp, r7
    8086:	bd80      	pop	{r7, pc}
    8088:	00007f41 	.word	0x00007f41

0000808c <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    808c:	b580      	push	{r7, lr}
    808e:	b082      	sub	sp, #8
    8090:	af00      	add	r7, sp, #0
    8092:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    8094:	687b      	ldr	r3, [r7, #4]
    8096:	681b      	ldr	r3, [r3, #0]
    8098:	f023 0202 	bic.w	r2, r3, #2
    809c:	687b      	ldr	r3, [r7, #4]
    809e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    80a0:	2103      	movs	r1, #3
    80a2:	6878      	ldr	r0, [r7, #4]
    80a4:	4b02      	ldr	r3, [pc, #8]	; (80b0 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    80a6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    80a8:	bf00      	nop
    80aa:	3708      	adds	r7, #8
    80ac:	46bd      	mov	sp, r7
    80ae:	bd80      	pop	{r7, pc}
    80b0:	00007f41 	.word	0x00007f41

000080b4 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    80b4:	b580      	push	{r7, lr}
    80b6:	b084      	sub	sp, #16
    80b8:	af00      	add	r7, sp, #0
    80ba:	6078      	str	r0, [r7, #4]
    80bc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    80be:	2103      	movs	r1, #3
    80c0:	6878      	ldr	r0, [r7, #4]
    80c2:	4b07      	ldr	r3, [pc, #28]	; (80e0 <hri_tcc_get_CTRLA_reg+0x2c>)
    80c4:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    80c6:	687b      	ldr	r3, [r7, #4]
    80c8:	681b      	ldr	r3, [r3, #0]
    80ca:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    80cc:	68fa      	ldr	r2, [r7, #12]
    80ce:	683b      	ldr	r3, [r7, #0]
    80d0:	4013      	ands	r3, r2
    80d2:	60fb      	str	r3, [r7, #12]
	return tmp;
    80d4:	68fb      	ldr	r3, [r7, #12]
}
    80d6:	4618      	mov	r0, r3
    80d8:	3710      	adds	r7, #16
    80da:	46bd      	mov	sp, r7
    80dc:	bd80      	pop	{r7, pc}
    80de:	bf00      	nop
    80e0:	00007f41 	.word	0x00007f41

000080e4 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    80e4:	b580      	push	{r7, lr}
    80e6:	b082      	sub	sp, #8
    80e8:	af00      	add	r7, sp, #0
    80ea:	6078      	str	r0, [r7, #4]
    80ec:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    80ee:	687b      	ldr	r3, [r7, #4]
    80f0:	683a      	ldr	r2, [r7, #0]
    80f2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    80f4:	2103      	movs	r1, #3
    80f6:	6878      	ldr	r0, [r7, #4]
    80f8:	4b02      	ldr	r3, [pc, #8]	; (8104 <hri_tcc_write_CTRLA_reg+0x20>)
    80fa:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    80fc:	bf00      	nop
    80fe:	3708      	adds	r7, #8
    8100:	46bd      	mov	sp, r7
    8102:	bd80      	pop	{r7, pc}
    8104:	00007f41 	.word	0x00007f41

00008108 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    8108:	b480      	push	{r7}
    810a:	b083      	sub	sp, #12
    810c:	af00      	add	r7, sp, #0
    810e:	6078      	str	r0, [r7, #4]
    8110:	460b      	mov	r3, r1
    8112:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    8114:	687b      	ldr	r3, [r7, #4]
    8116:	78fa      	ldrb	r2, [r7, #3]
    8118:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    811a:	bf00      	nop
    811c:	370c      	adds	r7, #12
    811e:	46bd      	mov	sp, r7
    8120:	f85d 7b04 	ldr.w	r7, [sp], #4
    8124:	4770      	bx	lr

00008126 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    8126:	b480      	push	{r7}
    8128:	b083      	sub	sp, #12
    812a:	af00      	add	r7, sp, #0
    812c:	6078      	str	r0, [r7, #4]
    812e:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    8130:	687b      	ldr	r3, [r7, #4]
    8132:	683a      	ldr	r2, [r7, #0]
    8134:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    8136:	bf00      	nop
    8138:	370c      	adds	r7, #12
    813a:	46bd      	mov	sp, r7
    813c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8140:	4770      	bx	lr
	...

00008144 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    8144:	b580      	push	{r7, lr}
    8146:	b082      	sub	sp, #8
    8148:	af00      	add	r7, sp, #0
    814a:	6078      	str	r0, [r7, #4]
    814c:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    814e:	687b      	ldr	r3, [r7, #4]
    8150:	683a      	ldr	r2, [r7, #0]
    8152:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    8154:	2180      	movs	r1, #128	; 0x80
    8156:	6878      	ldr	r0, [r7, #4]
    8158:	4b02      	ldr	r3, [pc, #8]	; (8164 <hri_tcc_write_PER_reg+0x20>)
    815a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    815c:	bf00      	nop
    815e:	3708      	adds	r7, #8
    8160:	46bd      	mov	sp, r7
    8162:	bd80      	pop	{r7, pc}
    8164:	00007f41 	.word	0x00007f41

00008168 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    8168:	b580      	push	{r7, lr}
    816a:	b082      	sub	sp, #8
    816c:	af00      	add	r7, sp, #0
    816e:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    8170:	2180      	movs	r1, #128	; 0x80
    8172:	6878      	ldr	r0, [r7, #4]
    8174:	4b03      	ldr	r3, [pc, #12]	; (8184 <hri_tcc_read_PER_reg+0x1c>)
    8176:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    8178:	687b      	ldr	r3, [r7, #4]
    817a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    817c:	4618      	mov	r0, r3
    817e:	3708      	adds	r7, #8
    8180:	46bd      	mov	sp, r7
    8182:	bd80      	pop	{r7, pc}
    8184:	00007f41 	.word	0x00007f41

00008188 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    8188:	b480      	push	{r7}
    818a:	b083      	sub	sp, #12
    818c:	af00      	add	r7, sp, #0
    818e:	6078      	str	r0, [r7, #4]
    8190:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    8192:	687b      	ldr	r3, [r7, #4]
    8194:	4a09      	ldr	r2, [pc, #36]	; (81bc <_tcc_init_irq_param+0x34>)
    8196:	4293      	cmp	r3, r2
    8198:	d102      	bne.n	81a0 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    819a:	4a09      	ldr	r2, [pc, #36]	; (81c0 <_tcc_init_irq_param+0x38>)
    819c:	683b      	ldr	r3, [r7, #0]
    819e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    81a0:	687b      	ldr	r3, [r7, #4]
    81a2:	4a08      	ldr	r2, [pc, #32]	; (81c4 <_tcc_init_irq_param+0x3c>)
    81a4:	4293      	cmp	r3, r2
    81a6:	d102      	bne.n	81ae <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    81a8:	4a07      	ldr	r2, [pc, #28]	; (81c8 <_tcc_init_irq_param+0x40>)
    81aa:	683b      	ldr	r3, [r7, #0]
    81ac:	6013      	str	r3, [r2, #0]
	}
}
    81ae:	bf00      	nop
    81b0:	370c      	adds	r7, #12
    81b2:	46bd      	mov	sp, r7
    81b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    81b8:	4770      	bx	lr
    81ba:	bf00      	nop
    81bc:	41016000 	.word	0x41016000
    81c0:	20000c10 	.word	0x20000c10
    81c4:	41018000 	.word	0x41018000
    81c8:	20000c14 	.word	0x20000c14

000081cc <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    81cc:	b580      	push	{r7, lr}
    81ce:	b084      	sub	sp, #16
    81d0:	af00      	add	r7, sp, #0
    81d2:	6078      	str	r0, [r7, #4]
    81d4:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    81d6:	6838      	ldr	r0, [r7, #0]
    81d8:	4b33      	ldr	r3, [pc, #204]	; (82a8 <_tcc_timer_init+0xdc>)
    81da:	4798      	blx	r3
    81dc:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    81de:	68fb      	ldr	r3, [r7, #12]
    81e0:	2b00      	cmp	r3, #0
    81e2:	d102      	bne.n	81ea <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    81e4:	f06f 0309 	mvn.w	r3, #9
    81e8:	e05a      	b.n	82a0 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    81ea:	687b      	ldr	r3, [r7, #4]
    81ec:	683a      	ldr	r2, [r7, #0]
    81ee:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    81f0:	2101      	movs	r1, #1
    81f2:	6838      	ldr	r0, [r7, #0]
    81f4:	4b2d      	ldr	r3, [pc, #180]	; (82ac <_tcc_timer_init+0xe0>)
    81f6:	4798      	blx	r3
    81f8:	4603      	mov	r3, r0
    81fa:	f083 0301 	eor.w	r3, r3, #1
    81fe:	b2db      	uxtb	r3, r3
    8200:	2b00      	cmp	r3, #0
    8202:	d011      	beq.n	8228 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    8204:	2102      	movs	r1, #2
    8206:	6838      	ldr	r0, [r7, #0]
    8208:	4b29      	ldr	r3, [pc, #164]	; (82b0 <_tcc_timer_init+0xe4>)
    820a:	4798      	blx	r3
    820c:	4603      	mov	r3, r0
    820e:	2b00      	cmp	r3, #0
    8210:	d006      	beq.n	8220 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    8212:	6838      	ldr	r0, [r7, #0]
    8214:	4b27      	ldr	r3, [pc, #156]	; (82b4 <_tcc_timer_init+0xe8>)
    8216:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    8218:	2102      	movs	r1, #2
    821a:	6838      	ldr	r0, [r7, #0]
    821c:	4b26      	ldr	r3, [pc, #152]	; (82b8 <_tcc_timer_init+0xec>)
    821e:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    8220:	2101      	movs	r1, #1
    8222:	6838      	ldr	r0, [r7, #0]
    8224:	4b25      	ldr	r3, [pc, #148]	; (82bc <_tcc_timer_init+0xf0>)
    8226:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    8228:	2101      	movs	r1, #1
    822a:	6838      	ldr	r0, [r7, #0]
    822c:	4b22      	ldr	r3, [pc, #136]	; (82b8 <_tcc_timer_init+0xec>)
    822e:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    8230:	68fb      	ldr	r3, [r7, #12]
    8232:	689b      	ldr	r3, [r3, #8]
    8234:	4619      	mov	r1, r3
    8236:	6838      	ldr	r0, [r7, #0]
    8238:	4b20      	ldr	r3, [pc, #128]	; (82bc <_tcc_timer_init+0xf0>)
    823a:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    823c:	68fb      	ldr	r3, [r7, #12]
    823e:	7b1b      	ldrb	r3, [r3, #12]
    8240:	4619      	mov	r1, r3
    8242:	6838      	ldr	r0, [r7, #0]
    8244:	4b1e      	ldr	r3, [pc, #120]	; (82c0 <_tcc_timer_init+0xf4>)
    8246:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    8248:	68fb      	ldr	r3, [r7, #12]
    824a:	7b5b      	ldrb	r3, [r3, #13]
    824c:	4619      	mov	r1, r3
    824e:	6838      	ldr	r0, [r7, #0]
    8250:	4b1c      	ldr	r3, [pc, #112]	; (82c4 <_tcc_timer_init+0xf8>)
    8252:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    8254:	68fb      	ldr	r3, [r7, #12]
    8256:	691b      	ldr	r3, [r3, #16]
    8258:	4619      	mov	r1, r3
    825a:	6838      	ldr	r0, [r7, #0]
    825c:	4b1a      	ldr	r3, [pc, #104]	; (82c8 <_tcc_timer_init+0xfc>)
    825e:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    8260:	68fb      	ldr	r3, [r7, #12]
    8262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8264:	4619      	mov	r1, r3
    8266:	6838      	ldr	r0, [r7, #0]
    8268:	4b18      	ldr	r3, [pc, #96]	; (82cc <_tcc_timer_init+0x100>)
    826a:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    826c:	6838      	ldr	r0, [r7, #0]
    826e:	4b18      	ldr	r3, [pc, #96]	; (82d0 <_tcc_timer_init+0x104>)
    8270:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    8272:	6879      	ldr	r1, [r7, #4]
    8274:	6838      	ldr	r0, [r7, #0]
    8276:	4b17      	ldr	r3, [pc, #92]	; (82d4 <_tcc_timer_init+0x108>)
    8278:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    827a:	68fb      	ldr	r3, [r7, #12]
    827c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8280:	4618      	mov	r0, r3
    8282:	4b15      	ldr	r3, [pc, #84]	; (82d8 <_tcc_timer_init+0x10c>)
    8284:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    8286:	68fb      	ldr	r3, [r7, #12]
    8288:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    828c:	4618      	mov	r0, r3
    828e:	4b13      	ldr	r3, [pc, #76]	; (82dc <_tcc_timer_init+0x110>)
    8290:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    8292:	68fb      	ldr	r3, [r7, #12]
    8294:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8298:	4618      	mov	r0, r3
    829a:	4b11      	ldr	r3, [pc, #68]	; (82e0 <_tcc_timer_init+0x114>)
    829c:	4798      	blx	r3

	return ERR_NONE;
    829e:	2300      	movs	r3, #0
}
    82a0:	4618      	mov	r0, r3
    82a2:	3710      	adds	r7, #16
    82a4:	46bd      	mov	sp, r7
    82a6:	bd80      	pop	{r7, pc}
    82a8:	00008495 	.word	0x00008495
    82ac:	00007f65 	.word	0x00007f65
    82b0:	000080b5 	.word	0x000080b5
    82b4:	0000808d 	.word	0x0000808d
    82b8:	00007f41 	.word	0x00007f41
    82bc:	000080e5 	.word	0x000080e5
    82c0:	00007fcd 	.word	0x00007fcd
    82c4:	00008109 	.word	0x00008109
    82c8:	00008127 	.word	0x00008127
    82cc:	00008145 	.word	0x00008145
    82d0:	00007feb 	.word	0x00007feb
    82d4:	00008189 	.word	0x00008189
    82d8:	00007ec1 	.word	0x00007ec1
    82dc:	00007f05 	.word	0x00007f05
    82e0:	00007e85 	.word	0x00007e85

000082e4 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    82e4:	b580      	push	{r7, lr}
    82e6:	b084      	sub	sp, #16
    82e8:	af00      	add	r7, sp, #0
    82ea:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    82ec:	687b      	ldr	r3, [r7, #4]
    82ee:	68db      	ldr	r3, [r3, #12]
    82f0:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    82f2:	68f8      	ldr	r0, [r7, #12]
    82f4:	4b0a      	ldr	r3, [pc, #40]	; (8320 <_tcc_timer_deinit+0x3c>)
    82f6:	4798      	blx	r3
    82f8:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    82fa:	68bb      	ldr	r3, [r7, #8]
    82fc:	2b00      	cmp	r3, #0
    82fe:	d00b      	beq.n	8318 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    8300:	68bb      	ldr	r3, [r7, #8]
    8302:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8306:	4618      	mov	r0, r3
    8308:	4b06      	ldr	r3, [pc, #24]	; (8324 <_tcc_timer_deinit+0x40>)
    830a:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    830c:	68f8      	ldr	r0, [r7, #12]
    830e:	4b06      	ldr	r3, [pc, #24]	; (8328 <_tcc_timer_deinit+0x44>)
    8310:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    8312:	68f8      	ldr	r0, [r7, #12]
    8314:	4b05      	ldr	r3, [pc, #20]	; (832c <_tcc_timer_deinit+0x48>)
    8316:	4798      	blx	r3
	}
}
    8318:	bf00      	nop
    831a:	3710      	adds	r7, #16
    831c:	46bd      	mov	sp, r7
    831e:	bd80      	pop	{r7, pc}
    8320:	00008495 	.word	0x00008495
    8324:	00007ec1 	.word	0x00007ec1
    8328:	0000808d 	.word	0x0000808d
    832c:	00008005 	.word	0x00008005

00008330 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    8330:	b580      	push	{r7, lr}
    8332:	b082      	sub	sp, #8
    8334:	af00      	add	r7, sp, #0
    8336:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    8338:	687b      	ldr	r3, [r7, #4]
    833a:	68db      	ldr	r3, [r3, #12]
    833c:	4618      	mov	r0, r3
    833e:	4b03      	ldr	r3, [pc, #12]	; (834c <_tcc_timer_start+0x1c>)
    8340:	4798      	blx	r3
}
    8342:	bf00      	nop
    8344:	3708      	adds	r7, #8
    8346:	46bd      	mov	sp, r7
    8348:	bd80      	pop	{r7, pc}
    834a:	bf00      	nop
    834c:	0000802d 	.word	0x0000802d

00008350 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    8350:	b580      	push	{r7, lr}
    8352:	b082      	sub	sp, #8
    8354:	af00      	add	r7, sp, #0
    8356:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    8358:	687b      	ldr	r3, [r7, #4]
    835a:	68db      	ldr	r3, [r3, #12]
    835c:	4618      	mov	r0, r3
    835e:	4b03      	ldr	r3, [pc, #12]	; (836c <_tcc_timer_stop+0x1c>)
    8360:	4798      	blx	r3
}
    8362:	bf00      	nop
    8364:	3708      	adds	r7, #8
    8366:	46bd      	mov	sp, r7
    8368:	bd80      	pop	{r7, pc}
    836a:	bf00      	nop
    836c:	0000808d 	.word	0x0000808d

00008370 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    8370:	b580      	push	{r7, lr}
    8372:	b082      	sub	sp, #8
    8374:	af00      	add	r7, sp, #0
    8376:	6078      	str	r0, [r7, #4]
    8378:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    837a:	687b      	ldr	r3, [r7, #4]
    837c:	68db      	ldr	r3, [r3, #12]
    837e:	6839      	ldr	r1, [r7, #0]
    8380:	4618      	mov	r0, r3
    8382:	4b03      	ldr	r3, [pc, #12]	; (8390 <_tcc_timer_set_period+0x20>)
    8384:	4798      	blx	r3
}
    8386:	bf00      	nop
    8388:	3708      	adds	r7, #8
    838a:	46bd      	mov	sp, r7
    838c:	bd80      	pop	{r7, pc}
    838e:	bf00      	nop
    8390:	00008145 	.word	0x00008145

00008394 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    8394:	b580      	push	{r7, lr}
    8396:	b082      	sub	sp, #8
    8398:	af00      	add	r7, sp, #0
    839a:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    839c:	687b      	ldr	r3, [r7, #4]
    839e:	68db      	ldr	r3, [r3, #12]
    83a0:	4618      	mov	r0, r3
    83a2:	4b03      	ldr	r3, [pc, #12]	; (83b0 <_tcc_timer_get_period+0x1c>)
    83a4:	4798      	blx	r3
    83a6:	4603      	mov	r3, r0
}
    83a8:	4618      	mov	r0, r3
    83aa:	3708      	adds	r7, #8
    83ac:	46bd      	mov	sp, r7
    83ae:	bd80      	pop	{r7, pc}
    83b0:	00008169 	.word	0x00008169

000083b4 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    83b4:	b580      	push	{r7, lr}
    83b6:	b082      	sub	sp, #8
    83b8:	af00      	add	r7, sp, #0
    83ba:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    83bc:	687b      	ldr	r3, [r7, #4]
    83be:	68db      	ldr	r3, [r3, #12]
    83c0:	4618      	mov	r0, r3
    83c2:	4b03      	ldr	r3, [pc, #12]	; (83d0 <_tcc_timer_is_started+0x1c>)
    83c4:	4798      	blx	r3
    83c6:	4603      	mov	r3, r0
}
    83c8:	4618      	mov	r0, r3
    83ca:	3708      	adds	r7, #8
    83cc:	46bd      	mov	sp, r7
    83ce:	bd80      	pop	{r7, pc}
    83d0:	00008055 	.word	0x00008055

000083d4 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    83d4:	b480      	push	{r7}
    83d6:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    83d8:	4b02      	ldr	r3, [pc, #8]	; (83e4 <_tcc_get_timer+0x10>)
}
    83da:	4618      	mov	r0, r3
    83dc:	46bd      	mov	sp, r7
    83de:	f85d 7b04 	ldr.w	r7, [sp], #4
    83e2:	4770      	bx	lr
    83e4:	200000c0 	.word	0x200000c0

000083e8 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    83e8:	b580      	push	{r7, lr}
    83ea:	b084      	sub	sp, #16
    83ec:	af00      	add	r7, sp, #0
    83ee:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    83f0:	687b      	ldr	r3, [r7, #4]
    83f2:	68db      	ldr	r3, [r3, #12]
    83f4:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    83f6:	68f8      	ldr	r0, [r7, #12]
    83f8:	4b08      	ldr	r3, [pc, #32]	; (841c <_tcc_timer_set_irq+0x34>)
    83fa:	4798      	blx	r3
    83fc:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    83fe:	68bb      	ldr	r3, [r7, #8]
    8400:	2b00      	cmp	r3, #0
    8402:	d006      	beq.n	8412 <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    8404:	68bb      	ldr	r3, [r7, #8]
    8406:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    840a:	b2db      	uxtb	r3, r3
    840c:	4618      	mov	r0, r3
    840e:	4b04      	ldr	r3, [pc, #16]	; (8420 <_tcc_timer_set_irq+0x38>)
    8410:	4798      	blx	r3
	}
}
    8412:	bf00      	nop
    8414:	3710      	adds	r7, #16
    8416:	46bd      	mov	sp, r7
    8418:	bd80      	pop	{r7, pc}
    841a:	bf00      	nop
    841c:	00008495 	.word	0x00008495
    8420:	00004821 	.word	0x00004821

00008424 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    8424:	b580      	push	{r7, lr}
    8426:	b084      	sub	sp, #16
    8428:	af00      	add	r7, sp, #0
    842a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    842c:	687b      	ldr	r3, [r7, #4]
    842e:	68db      	ldr	r3, [r3, #12]
    8430:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    8432:	68f8      	ldr	r0, [r7, #12]
    8434:	4b07      	ldr	r3, [pc, #28]	; (8454 <tcc_interrupt_handler+0x30>)
    8436:	4798      	blx	r3
    8438:	4603      	mov	r3, r0
    843a:	2b00      	cmp	r3, #0
    843c:	d006      	beq.n	844c <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    843e:	68f8      	ldr	r0, [r7, #12]
    8440:	4b05      	ldr	r3, [pc, #20]	; (8458 <tcc_interrupt_handler+0x34>)
    8442:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8444:	687b      	ldr	r3, [r7, #4]
    8446:	681b      	ldr	r3, [r3, #0]
    8448:	6878      	ldr	r0, [r7, #4]
    844a:	4798      	blx	r3
	}
}
    844c:	bf00      	nop
    844e:	3710      	adds	r7, #16
    8450:	46bd      	mov	sp, r7
    8452:	bd80      	pop	{r7, pc}
    8454:	00007f8d 	.word	0x00007f8d
    8458:	00007fb3 	.word	0x00007fb3

0000845c <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    845c:	b580      	push	{r7, lr}
    845e:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    8460:	4b03      	ldr	r3, [pc, #12]	; (8470 <TCC0_0_Handler+0x14>)
    8462:	681b      	ldr	r3, [r3, #0]
    8464:	4618      	mov	r0, r3
    8466:	4b03      	ldr	r3, [pc, #12]	; (8474 <TCC0_0_Handler+0x18>)
    8468:	4798      	blx	r3
}
    846a:	bf00      	nop
    846c:	bd80      	pop	{r7, pc}
    846e:	bf00      	nop
    8470:	20000c10 	.word	0x20000c10
    8474:	00008425 	.word	0x00008425

00008478 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    8478:	b580      	push	{r7, lr}
    847a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    847c:	4b03      	ldr	r3, [pc, #12]	; (848c <TCC1_0_Handler+0x14>)
    847e:	681b      	ldr	r3, [r3, #0]
    8480:	4618      	mov	r0, r3
    8482:	4b03      	ldr	r3, [pc, #12]	; (8490 <TCC1_0_Handler+0x18>)
    8484:	4798      	blx	r3
}
    8486:	bf00      	nop
    8488:	bd80      	pop	{r7, pc}
    848a:	bf00      	nop
    848c:	20000c14 	.word	0x20000c14
    8490:	00008425 	.word	0x00008425

00008494 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    8494:	b480      	push	{r7}
    8496:	b085      	sub	sp, #20
    8498:	af00      	add	r7, sp, #0
    849a:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    849c:	2300      	movs	r3, #0
    849e:	73fb      	strb	r3, [r7, #15]
    84a0:	e015      	b.n	84ce <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    84a2:	7bfa      	ldrb	r2, [r7, #15]
    84a4:	490f      	ldr	r1, [pc, #60]	; (84e4 <_get_tcc_cfg+0x50>)
    84a6:	4613      	mov	r3, r2
    84a8:	005b      	lsls	r3, r3, #1
    84aa:	4413      	add	r3, r2
    84ac:	011b      	lsls	r3, r3, #4
    84ae:	440b      	add	r3, r1
    84b0:	681a      	ldr	r2, [r3, #0]
    84b2:	687b      	ldr	r3, [r7, #4]
    84b4:	429a      	cmp	r2, r3
    84b6:	d107      	bne.n	84c8 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    84b8:	7bfa      	ldrb	r2, [r7, #15]
    84ba:	4613      	mov	r3, r2
    84bc:	005b      	lsls	r3, r3, #1
    84be:	4413      	add	r3, r2
    84c0:	011b      	lsls	r3, r3, #4
    84c2:	4a08      	ldr	r2, [pc, #32]	; (84e4 <_get_tcc_cfg+0x50>)
    84c4:	4413      	add	r3, r2
    84c6:	e006      	b.n	84d6 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    84c8:	7bfb      	ldrb	r3, [r7, #15]
    84ca:	3301      	adds	r3, #1
    84cc:	73fb      	strb	r3, [r7, #15]
    84ce:	7bfb      	ldrb	r3, [r7, #15]
    84d0:	2b01      	cmp	r3, #1
    84d2:	d9e6      	bls.n	84a2 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    84d4:	2300      	movs	r3, #0
}
    84d6:	4618      	mov	r0, r3
    84d8:	3714      	adds	r7, #20
    84da:	46bd      	mov	sp, r7
    84dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    84e0:	4770      	bx	lr
    84e2:	bf00      	nop
    84e4:	20000060 	.word	0x20000060

000084e8 <__NVIC_EnableIRQ>:
{
    84e8:	b480      	push	{r7}
    84ea:	b083      	sub	sp, #12
    84ec:	af00      	add	r7, sp, #0
    84ee:	4603      	mov	r3, r0
    84f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    84f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    84f6:	2b00      	cmp	r3, #0
    84f8:	db0b      	blt.n	8512 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    84fa:	4909      	ldr	r1, [pc, #36]	; (8520 <__NVIC_EnableIRQ+0x38>)
    84fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8500:	095b      	lsrs	r3, r3, #5
    8502:	88fa      	ldrh	r2, [r7, #6]
    8504:	f002 021f 	and.w	r2, r2, #31
    8508:	2001      	movs	r0, #1
    850a:	fa00 f202 	lsl.w	r2, r0, r2
    850e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8512:	bf00      	nop
    8514:	370c      	adds	r7, #12
    8516:	46bd      	mov	sp, r7
    8518:	f85d 7b04 	ldr.w	r7, [sp], #4
    851c:	4770      	bx	lr
    851e:	bf00      	nop
    8520:	e000e100 	.word	0xe000e100

00008524 <__NVIC_DisableIRQ>:
{
    8524:	b480      	push	{r7}
    8526:	b083      	sub	sp, #12
    8528:	af00      	add	r7, sp, #0
    852a:	4603      	mov	r3, r0
    852c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    852e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8532:	2b00      	cmp	r3, #0
    8534:	db10      	blt.n	8558 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8536:	490b      	ldr	r1, [pc, #44]	; (8564 <__NVIC_DisableIRQ+0x40>)
    8538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    853c:	095b      	lsrs	r3, r3, #5
    853e:	88fa      	ldrh	r2, [r7, #6]
    8540:	f002 021f 	and.w	r2, r2, #31
    8544:	2001      	movs	r0, #1
    8546:	fa00 f202 	lsl.w	r2, r0, r2
    854a:	3320      	adds	r3, #32
    854c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8550:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8554:	f3bf 8f6f 	isb	sy
}
    8558:	bf00      	nop
    855a:	370c      	adds	r7, #12
    855c:	46bd      	mov	sp, r7
    855e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8562:	4770      	bx	lr
    8564:	e000e100 	.word	0xe000e100

00008568 <__NVIC_ClearPendingIRQ>:
{
    8568:	b480      	push	{r7}
    856a:	b083      	sub	sp, #12
    856c:	af00      	add	r7, sp, #0
    856e:	4603      	mov	r3, r0
    8570:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8576:	2b00      	cmp	r3, #0
    8578:	db0c      	blt.n	8594 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    857a:	4909      	ldr	r1, [pc, #36]	; (85a0 <__NVIC_ClearPendingIRQ+0x38>)
    857c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8580:	095b      	lsrs	r3, r3, #5
    8582:	88fa      	ldrh	r2, [r7, #6]
    8584:	f002 021f 	and.w	r2, r2, #31
    8588:	2001      	movs	r0, #1
    858a:	fa00 f202 	lsl.w	r2, r0, r2
    858e:	3360      	adds	r3, #96	; 0x60
    8590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8594:	bf00      	nop
    8596:	370c      	adds	r7, #12
    8598:	46bd      	mov	sp, r7
    859a:	f85d 7b04 	ldr.w	r7, [sp], #4
    859e:	4770      	bx	lr
    85a0:	e000e100 	.word	0xe000e100

000085a4 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    85a4:	b480      	push	{r7}
    85a6:	b083      	sub	sp, #12
    85a8:	af00      	add	r7, sp, #0
    85aa:	6078      	str	r0, [r7, #4]
    85ac:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    85ae:	bf00      	nop
    85b0:	687b      	ldr	r3, [r7, #4]
    85b2:	691a      	ldr	r2, [r3, #16]
    85b4:	683b      	ldr	r3, [r7, #0]
    85b6:	4013      	ands	r3, r2
    85b8:	2b00      	cmp	r3, #0
    85ba:	d1f9      	bne.n	85b0 <hri_tc_wait_for_sync+0xc>
	};
}
    85bc:	bf00      	nop
    85be:	370c      	adds	r7, #12
    85c0:	46bd      	mov	sp, r7
    85c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    85c6:	4770      	bx	lr

000085c8 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    85c8:	b480      	push	{r7}
    85ca:	b083      	sub	sp, #12
    85cc:	af00      	add	r7, sp, #0
    85ce:	6078      	str	r0, [r7, #4]
    85d0:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    85d2:	687b      	ldr	r3, [r7, #4]
    85d4:	691a      	ldr	r2, [r3, #16]
    85d6:	683b      	ldr	r3, [r7, #0]
    85d8:	4013      	ands	r3, r2
    85da:	2b00      	cmp	r3, #0
    85dc:	bf14      	ite	ne
    85de:	2301      	movne	r3, #1
    85e0:	2300      	moveq	r3, #0
    85e2:	b2db      	uxtb	r3, r3
}
    85e4:	4618      	mov	r0, r3
    85e6:	370c      	adds	r7, #12
    85e8:	46bd      	mov	sp, r7
    85ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    85ee:	4770      	bx	lr

000085f0 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    85f0:	b480      	push	{r7}
    85f2:	b083      	sub	sp, #12
    85f4:	af00      	add	r7, sp, #0
    85f6:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    85f8:	687b      	ldr	r3, [r7, #4]
    85fa:	7a9b      	ldrb	r3, [r3, #10]
    85fc:	b2db      	uxtb	r3, r3
    85fe:	f003 0301 	and.w	r3, r3, #1
    8602:	2b00      	cmp	r3, #0
    8604:	bf14      	ite	ne
    8606:	2301      	movne	r3, #1
    8608:	2300      	moveq	r3, #0
    860a:	b2db      	uxtb	r3, r3
}
    860c:	4618      	mov	r0, r3
    860e:	370c      	adds	r7, #12
    8610:	46bd      	mov	sp, r7
    8612:	f85d 7b04 	ldr.w	r7, [sp], #4
    8616:	4770      	bx	lr

00008618 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    8618:	b480      	push	{r7}
    861a:	b083      	sub	sp, #12
    861c:	af00      	add	r7, sp, #0
    861e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    8620:	687b      	ldr	r3, [r7, #4]
    8622:	2201      	movs	r2, #1
    8624:	729a      	strb	r2, [r3, #10]
}
    8626:	bf00      	nop
    8628:	370c      	adds	r7, #12
    862a:	46bd      	mov	sp, r7
    862c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8630:	4770      	bx	lr

00008632 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    8632:	b480      	push	{r7}
    8634:	b083      	sub	sp, #12
    8636:	af00      	add	r7, sp, #0
    8638:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    863a:	687b      	ldr	r3, [r7, #4]
    863c:	2202      	movs	r2, #2
    863e:	729a      	strb	r2, [r3, #10]
}
    8640:	bf00      	nop
    8642:	370c      	adds	r7, #12
    8644:	46bd      	mov	sp, r7
    8646:	f85d 7b04 	ldr.w	r7, [sp], #4
    864a:	4770      	bx	lr

0000864c <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    864c:	b480      	push	{r7}
    864e:	b083      	sub	sp, #12
    8650:	af00      	add	r7, sp, #0
    8652:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    8654:	687b      	ldr	r3, [r7, #4]
    8656:	2201      	movs	r2, #1
    8658:	725a      	strb	r2, [r3, #9]
}
    865a:	bf00      	nop
    865c:	370c      	adds	r7, #12
    865e:	46bd      	mov	sp, r7
    8660:	f85d 7b04 	ldr.w	r7, [sp], #4
    8664:	4770      	bx	lr

00008666 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    8666:	b480      	push	{r7}
    8668:	b083      	sub	sp, #12
    866a:	af00      	add	r7, sp, #0
    866c:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    866e:	687b      	ldr	r3, [r7, #4]
    8670:	7a5b      	ldrb	r3, [r3, #9]
    8672:	b2db      	uxtb	r3, r3
    8674:	085b      	lsrs	r3, r3, #1
    8676:	f003 0301 	and.w	r3, r3, #1
    867a:	2b00      	cmp	r3, #0
    867c:	bf14      	ite	ne
    867e:	2301      	movne	r3, #1
    8680:	2300      	moveq	r3, #0
    8682:	b2db      	uxtb	r3, r3
}
    8684:	4618      	mov	r0, r3
    8686:	370c      	adds	r7, #12
    8688:	46bd      	mov	sp, r7
    868a:	f85d 7b04 	ldr.w	r7, [sp], #4
    868e:	4770      	bx	lr

00008690 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    8690:	b580      	push	{r7, lr}
    8692:	b082      	sub	sp, #8
    8694:	af00      	add	r7, sp, #0
    8696:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    8698:	687b      	ldr	r3, [r7, #4]
    869a:	681b      	ldr	r3, [r3, #0]
    869c:	f043 0201 	orr.w	r2, r3, #1
    86a0:	687b      	ldr	r3, [r7, #4]
    86a2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    86a4:	2101      	movs	r1, #1
    86a6:	6878      	ldr	r0, [r7, #4]
    86a8:	4b02      	ldr	r3, [pc, #8]	; (86b4 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    86aa:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    86ac:	bf00      	nop
    86ae:	3708      	adds	r7, #8
    86b0:	46bd      	mov	sp, r7
    86b2:	bd80      	pop	{r7, pc}
    86b4:	000085a5 	.word	0x000085a5

000086b8 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    86b8:	b580      	push	{r7, lr}
    86ba:	b082      	sub	sp, #8
    86bc:	af00      	add	r7, sp, #0
    86be:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    86c0:	687b      	ldr	r3, [r7, #4]
    86c2:	681b      	ldr	r3, [r3, #0]
    86c4:	f043 0202 	orr.w	r2, r3, #2
    86c8:	687b      	ldr	r3, [r7, #4]
    86ca:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    86cc:	2103      	movs	r1, #3
    86ce:	6878      	ldr	r0, [r7, #4]
    86d0:	4b02      	ldr	r3, [pc, #8]	; (86dc <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    86d2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    86d4:	bf00      	nop
    86d6:	3708      	adds	r7, #8
    86d8:	46bd      	mov	sp, r7
    86da:	bd80      	pop	{r7, pc}
    86dc:	000085a5 	.word	0x000085a5

000086e0 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    86e0:	b580      	push	{r7, lr}
    86e2:	b084      	sub	sp, #16
    86e4:	af00      	add	r7, sp, #0
    86e6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    86e8:	2103      	movs	r1, #3
    86ea:	6878      	ldr	r0, [r7, #4]
    86ec:	4b09      	ldr	r3, [pc, #36]	; (8714 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    86ee:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    86f0:	687b      	ldr	r3, [r7, #4]
    86f2:	681b      	ldr	r3, [r3, #0]
    86f4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    86f6:	68fb      	ldr	r3, [r7, #12]
    86f8:	085b      	lsrs	r3, r3, #1
    86fa:	f003 0301 	and.w	r3, r3, #1
    86fe:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    8700:	68fb      	ldr	r3, [r7, #12]
    8702:	2b00      	cmp	r3, #0
    8704:	bf14      	ite	ne
    8706:	2301      	movne	r3, #1
    8708:	2300      	moveq	r3, #0
    870a:	b2db      	uxtb	r3, r3
}
    870c:	4618      	mov	r0, r3
    870e:	3710      	adds	r7, #16
    8710:	46bd      	mov	sp, r7
    8712:	bd80      	pop	{r7, pc}
    8714:	000085a5 	.word	0x000085a5

00008718 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8718:	b580      	push	{r7, lr}
    871a:	b082      	sub	sp, #8
    871c:	af00      	add	r7, sp, #0
    871e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    8720:	687b      	ldr	r3, [r7, #4]
    8722:	681b      	ldr	r3, [r3, #0]
    8724:	f023 0202 	bic.w	r2, r3, #2
    8728:	687b      	ldr	r3, [r7, #4]
    872a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    872c:	2103      	movs	r1, #3
    872e:	6878      	ldr	r0, [r7, #4]
    8730:	4b02      	ldr	r3, [pc, #8]	; (873c <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    8732:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8734:	bf00      	nop
    8736:	3708      	adds	r7, #8
    8738:	46bd      	mov	sp, r7
    873a:	bd80      	pop	{r7, pc}
    873c:	000085a5 	.word	0x000085a5

00008740 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    8740:	b480      	push	{r7}
    8742:	b085      	sub	sp, #20
    8744:	af00      	add	r7, sp, #0
    8746:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8748:	687b      	ldr	r3, [r7, #4]
    874a:	681b      	ldr	r3, [r3, #0]
    874c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    874e:	68fb      	ldr	r3, [r7, #12]
    8750:	089b      	lsrs	r3, r3, #2
    8752:	f003 0303 	and.w	r3, r3, #3
    8756:	60fb      	str	r3, [r7, #12]
	return tmp;
    8758:	68fb      	ldr	r3, [r7, #12]
}
    875a:	4618      	mov	r0, r3
    875c:	3714      	adds	r7, #20
    875e:	46bd      	mov	sp, r7
    8760:	f85d 7b04 	ldr.w	r7, [sp], #4
    8764:	4770      	bx	lr
	...

00008768 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    8768:	b580      	push	{r7, lr}
    876a:	b084      	sub	sp, #16
    876c:	af00      	add	r7, sp, #0
    876e:	6078      	str	r0, [r7, #4]
    8770:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8772:	2103      	movs	r1, #3
    8774:	6878      	ldr	r0, [r7, #4]
    8776:	4b07      	ldr	r3, [pc, #28]	; (8794 <hri_tc_get_CTRLA_reg+0x2c>)
    8778:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    877a:	687b      	ldr	r3, [r7, #4]
    877c:	681b      	ldr	r3, [r3, #0]
    877e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8780:	68fa      	ldr	r2, [r7, #12]
    8782:	683b      	ldr	r3, [r7, #0]
    8784:	4013      	ands	r3, r2
    8786:	60fb      	str	r3, [r7, #12]
	return tmp;
    8788:	68fb      	ldr	r3, [r7, #12]
}
    878a:	4618      	mov	r0, r3
    878c:	3710      	adds	r7, #16
    878e:	46bd      	mov	sp, r7
    8790:	bd80      	pop	{r7, pc}
    8792:	bf00      	nop
    8794:	000085a5 	.word	0x000085a5

00008798 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    8798:	b580      	push	{r7, lr}
    879a:	b082      	sub	sp, #8
    879c:	af00      	add	r7, sp, #0
    879e:	6078      	str	r0, [r7, #4]
    87a0:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    87a2:	687b      	ldr	r3, [r7, #4]
    87a4:	683a      	ldr	r2, [r7, #0]
    87a6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    87a8:	2103      	movs	r1, #3
    87aa:	6878      	ldr	r0, [r7, #4]
    87ac:	4b02      	ldr	r3, [pc, #8]	; (87b8 <hri_tc_write_CTRLA_reg+0x20>)
    87ae:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    87b0:	bf00      	nop
    87b2:	3708      	adds	r7, #8
    87b4:	46bd      	mov	sp, r7
    87b6:	bd80      	pop	{r7, pc}
    87b8:	000085a5 	.word	0x000085a5

000087bc <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    87bc:	b480      	push	{r7}
    87be:	b083      	sub	sp, #12
    87c0:	af00      	add	r7, sp, #0
    87c2:	6078      	str	r0, [r7, #4]
    87c4:	460b      	mov	r3, r1
    87c6:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    87c8:	687b      	ldr	r3, [r7, #4]
    87ca:	887a      	ldrh	r2, [r7, #2]
    87cc:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    87ce:	bf00      	nop
    87d0:	370c      	adds	r7, #12
    87d2:	46bd      	mov	sp, r7
    87d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    87d8:	4770      	bx	lr

000087da <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    87da:	b480      	push	{r7}
    87dc:	b083      	sub	sp, #12
    87de:	af00      	add	r7, sp, #0
    87e0:	6078      	str	r0, [r7, #4]
    87e2:	460b      	mov	r3, r1
    87e4:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    87e6:	687b      	ldr	r3, [r7, #4]
    87e8:	78fa      	ldrb	r2, [r7, #3]
    87ea:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    87ec:	bf00      	nop
    87ee:	370c      	adds	r7, #12
    87f0:	46bd      	mov	sp, r7
    87f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    87f6:	4770      	bx	lr

000087f8 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    87f8:	b480      	push	{r7}
    87fa:	b083      	sub	sp, #12
    87fc:	af00      	add	r7, sp, #0
    87fe:	6078      	str	r0, [r7, #4]
    8800:	460b      	mov	r3, r1
    8802:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    8804:	687b      	ldr	r3, [r7, #4]
    8806:	78fa      	ldrb	r2, [r7, #3]
    8808:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    880a:	bf00      	nop
    880c:	370c      	adds	r7, #12
    880e:	46bd      	mov	sp, r7
    8810:	f85d 7b04 	ldr.w	r7, [sp], #4
    8814:	4770      	bx	lr
	...

00008818 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    8818:	b580      	push	{r7, lr}
    881a:	b082      	sub	sp, #8
    881c:	af00      	add	r7, sp, #0
    881e:	6078      	str	r0, [r7, #4]
    8820:	460b      	mov	r3, r1
    8822:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    8824:	687b      	ldr	r3, [r7, #4]
    8826:	78fa      	ldrb	r2, [r7, #3]
    8828:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    882a:	2120      	movs	r1, #32
    882c:	6878      	ldr	r0, [r7, #4]
    882e:	4b03      	ldr	r3, [pc, #12]	; (883c <hri_tccount8_write_PER_reg+0x24>)
    8830:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8832:	bf00      	nop
    8834:	3708      	adds	r7, #8
    8836:	46bd      	mov	sp, r7
    8838:	bd80      	pop	{r7, pc}
    883a:	bf00      	nop
    883c:	000085a5 	.word	0x000085a5

00008840 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    8840:	b580      	push	{r7, lr}
    8842:	b082      	sub	sp, #8
    8844:	af00      	add	r7, sp, #0
    8846:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    8848:	2120      	movs	r1, #32
    884a:	6878      	ldr	r0, [r7, #4]
    884c:	4b04      	ldr	r3, [pc, #16]	; (8860 <hri_tccount8_read_PER_reg+0x20>)
    884e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    8850:	687b      	ldr	r3, [r7, #4]
    8852:	7edb      	ldrb	r3, [r3, #27]
    8854:	b2db      	uxtb	r3, r3
}
    8856:	4618      	mov	r0, r3
    8858:	3708      	adds	r7, #8
    885a:	46bd      	mov	sp, r7
    885c:	bd80      	pop	{r7, pc}
    885e:	bf00      	nop
    8860:	000085a5 	.word	0x000085a5

00008864 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    8864:	b580      	push	{r7, lr}
    8866:	b082      	sub	sp, #8
    8868:	af00      	add	r7, sp, #0
    886a:	6078      	str	r0, [r7, #4]
    886c:	460b      	mov	r3, r1
    886e:	70fb      	strb	r3, [r7, #3]
    8870:	4613      	mov	r3, r2
    8872:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    8874:	78fb      	ldrb	r3, [r7, #3]
    8876:	687a      	ldr	r2, [r7, #4]
    8878:	4413      	add	r3, r2
    887a:	78ba      	ldrb	r2, [r7, #2]
    887c:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    887e:	21c0      	movs	r1, #192	; 0xc0
    8880:	6878      	ldr	r0, [r7, #4]
    8882:	4b03      	ldr	r3, [pc, #12]	; (8890 <hri_tccount8_write_CC_reg+0x2c>)
    8884:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8886:	bf00      	nop
    8888:	3708      	adds	r7, #8
    888a:	46bd      	mov	sp, r7
    888c:	bd80      	pop	{r7, pc}
    888e:	bf00      	nop
    8890:	000085a5 	.word	0x000085a5

00008894 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    8894:	b580      	push	{r7, lr}
    8896:	b082      	sub	sp, #8
    8898:	af00      	add	r7, sp, #0
    889a:	6078      	str	r0, [r7, #4]
    889c:	460b      	mov	r3, r1
    889e:	70fb      	strb	r3, [r7, #3]
    88a0:	4613      	mov	r3, r2
    88a2:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    88a4:	78fb      	ldrb	r3, [r7, #3]
    88a6:	687a      	ldr	r2, [r7, #4]
    88a8:	330c      	adds	r3, #12
    88aa:	005b      	lsls	r3, r3, #1
    88ac:	4413      	add	r3, r2
    88ae:	883a      	ldrh	r2, [r7, #0]
    88b0:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    88b2:	21c0      	movs	r1, #192	; 0xc0
    88b4:	6878      	ldr	r0, [r7, #4]
    88b6:	4b03      	ldr	r3, [pc, #12]	; (88c4 <hri_tccount16_write_CC_reg+0x30>)
    88b8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    88ba:	bf00      	nop
    88bc:	3708      	adds	r7, #8
    88be:	46bd      	mov	sp, r7
    88c0:	bd80      	pop	{r7, pc}
    88c2:	bf00      	nop
    88c4:	000085a5 	.word	0x000085a5

000088c8 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    88c8:	b580      	push	{r7, lr}
    88ca:	b082      	sub	sp, #8
    88cc:	af00      	add	r7, sp, #0
    88ce:	6078      	str	r0, [r7, #4]
    88d0:	460b      	mov	r3, r1
    88d2:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    88d4:	21c0      	movs	r1, #192	; 0xc0
    88d6:	6878      	ldr	r0, [r7, #4]
    88d8:	4b06      	ldr	r3, [pc, #24]	; (88f4 <hri_tccount16_read_CC_reg+0x2c>)
    88da:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    88dc:	78fb      	ldrb	r3, [r7, #3]
    88de:	687a      	ldr	r2, [r7, #4]
    88e0:	330c      	adds	r3, #12
    88e2:	005b      	lsls	r3, r3, #1
    88e4:	4413      	add	r3, r2
    88e6:	889b      	ldrh	r3, [r3, #4]
    88e8:	b29b      	uxth	r3, r3
}
    88ea:	4618      	mov	r0, r3
    88ec:	3708      	adds	r7, #8
    88ee:	46bd      	mov	sp, r7
    88f0:	bd80      	pop	{r7, pc}
    88f2:	bf00      	nop
    88f4:	000085a5 	.word	0x000085a5

000088f8 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    88f8:	b580      	push	{r7, lr}
    88fa:	b084      	sub	sp, #16
    88fc:	af00      	add	r7, sp, #0
    88fe:	60f8      	str	r0, [r7, #12]
    8900:	460b      	mov	r3, r1
    8902:	607a      	str	r2, [r7, #4]
    8904:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    8906:	7afb      	ldrb	r3, [r7, #11]
    8908:	68fa      	ldr	r2, [r7, #12]
    890a:	3306      	adds	r3, #6
    890c:	009b      	lsls	r3, r3, #2
    890e:	4413      	add	r3, r2
    8910:	687a      	ldr	r2, [r7, #4]
    8912:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8914:	21c0      	movs	r1, #192	; 0xc0
    8916:	68f8      	ldr	r0, [r7, #12]
    8918:	4b02      	ldr	r3, [pc, #8]	; (8924 <hri_tccount32_write_CC_reg+0x2c>)
    891a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    891c:	bf00      	nop
    891e:	3710      	adds	r7, #16
    8920:	46bd      	mov	sp, r7
    8922:	bd80      	pop	{r7, pc}
    8924:	000085a5 	.word	0x000085a5

00008928 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    8928:	b580      	push	{r7, lr}
    892a:	b082      	sub	sp, #8
    892c:	af00      	add	r7, sp, #0
    892e:	6078      	str	r0, [r7, #4]
    8930:	460b      	mov	r3, r1
    8932:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8934:	21c0      	movs	r1, #192	; 0xc0
    8936:	6878      	ldr	r0, [r7, #4]
    8938:	4b05      	ldr	r3, [pc, #20]	; (8950 <hri_tccount32_read_CC_reg+0x28>)
    893a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    893c:	78fb      	ldrb	r3, [r7, #3]
    893e:	687a      	ldr	r2, [r7, #4]
    8940:	3306      	adds	r3, #6
    8942:	009b      	lsls	r3, r3, #2
    8944:	4413      	add	r3, r2
    8946:	685b      	ldr	r3, [r3, #4]
}
    8948:	4618      	mov	r0, r3
    894a:	3708      	adds	r7, #8
    894c:	46bd      	mov	sp, r7
    894e:	bd80      	pop	{r7, pc}
    8950:	000085a5 	.word	0x000085a5

00008954 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    8954:	b580      	push	{r7, lr}
    8956:	b084      	sub	sp, #16
    8958:	af00      	add	r7, sp, #0
    895a:	6078      	str	r0, [r7, #4]
    895c:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    895e:	6838      	ldr	r0, [r7, #0]
    8960:	4b93      	ldr	r3, [pc, #588]	; (8bb0 <_tc_timer_init+0x25c>)
    8962:	4798      	blx	r3
    8964:	4603      	mov	r3, r0
    8966:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    8968:	687b      	ldr	r3, [r7, #4]
    896a:	683a      	ldr	r2, [r7, #0]
    896c:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    896e:	22a4      	movs	r2, #164	; 0xa4
    8970:	4990      	ldr	r1, [pc, #576]	; (8bb4 <_tc_timer_init+0x260>)
    8972:	2001      	movs	r0, #1
    8974:	4b90      	ldr	r3, [pc, #576]	; (8bb8 <_tc_timer_init+0x264>)
    8976:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8978:	2101      	movs	r1, #1
    897a:	6838      	ldr	r0, [r7, #0]
    897c:	4b8f      	ldr	r3, [pc, #572]	; (8bbc <_tc_timer_init+0x268>)
    897e:	4798      	blx	r3
    8980:	4603      	mov	r3, r0
    8982:	f083 0301 	eor.w	r3, r3, #1
    8986:	b2db      	uxtb	r3, r3
    8988:	2b00      	cmp	r3, #0
    898a:	d011      	beq.n	89b0 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    898c:	2102      	movs	r1, #2
    898e:	6838      	ldr	r0, [r7, #0]
    8990:	4b8b      	ldr	r3, [pc, #556]	; (8bc0 <_tc_timer_init+0x26c>)
    8992:	4798      	blx	r3
    8994:	4603      	mov	r3, r0
    8996:	2b00      	cmp	r3, #0
    8998:	d006      	beq.n	89a8 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    899a:	6838      	ldr	r0, [r7, #0]
    899c:	4b89      	ldr	r3, [pc, #548]	; (8bc4 <_tc_timer_init+0x270>)
    899e:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    89a0:	2102      	movs	r1, #2
    89a2:	6838      	ldr	r0, [r7, #0]
    89a4:	4b88      	ldr	r3, [pc, #544]	; (8bc8 <_tc_timer_init+0x274>)
    89a6:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    89a8:	2101      	movs	r1, #1
    89aa:	6838      	ldr	r0, [r7, #0]
    89ac:	4b87      	ldr	r3, [pc, #540]	; (8bcc <_tc_timer_init+0x278>)
    89ae:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    89b0:	2101      	movs	r1, #1
    89b2:	6838      	ldr	r0, [r7, #0]
    89b4:	4b84      	ldr	r3, [pc, #528]	; (8bc8 <_tc_timer_init+0x274>)
    89b6:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    89b8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    89bc:	4984      	ldr	r1, [pc, #528]	; (8bd0 <_tc_timer_init+0x27c>)
    89be:	4613      	mov	r3, r2
    89c0:	009b      	lsls	r3, r3, #2
    89c2:	4413      	add	r3, r2
    89c4:	009b      	lsls	r3, r3, #2
    89c6:	440b      	add	r3, r1
    89c8:	3304      	adds	r3, #4
    89ca:	681b      	ldr	r3, [r3, #0]
    89cc:	4619      	mov	r1, r3
    89ce:	6838      	ldr	r0, [r7, #0]
    89d0:	4b7e      	ldr	r3, [pc, #504]	; (8bcc <_tc_timer_init+0x278>)
    89d2:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    89d4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    89d8:	497d      	ldr	r1, [pc, #500]	; (8bd0 <_tc_timer_init+0x27c>)
    89da:	4613      	mov	r3, r2
    89dc:	009b      	lsls	r3, r3, #2
    89de:	4413      	add	r3, r2
    89e0:	009b      	lsls	r3, r3, #2
    89e2:	440b      	add	r3, r1
    89e4:	330a      	adds	r3, #10
    89e6:	781b      	ldrb	r3, [r3, #0]
    89e8:	4619      	mov	r1, r3
    89ea:	6838      	ldr	r0, [r7, #0]
    89ec:	4b79      	ldr	r3, [pc, #484]	; (8bd4 <_tc_timer_init+0x280>)
    89ee:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    89f0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    89f4:	4976      	ldr	r1, [pc, #472]	; (8bd0 <_tc_timer_init+0x27c>)
    89f6:	4613      	mov	r3, r2
    89f8:	009b      	lsls	r3, r3, #2
    89fa:	4413      	add	r3, r2
    89fc:	009b      	lsls	r3, r3, #2
    89fe:	440b      	add	r3, r1
    8a00:	3308      	adds	r3, #8
    8a02:	881b      	ldrh	r3, [r3, #0]
    8a04:	4619      	mov	r1, r3
    8a06:	6838      	ldr	r0, [r7, #0]
    8a08:	4b73      	ldr	r3, [pc, #460]	; (8bd8 <_tc_timer_init+0x284>)
    8a0a:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    8a0c:	2101      	movs	r1, #1
    8a0e:	6838      	ldr	r0, [r7, #0]
    8a10:	4b72      	ldr	r3, [pc, #456]	; (8bdc <_tc_timer_init+0x288>)
    8a12:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8a14:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a18:	496d      	ldr	r1, [pc, #436]	; (8bd0 <_tc_timer_init+0x27c>)
    8a1a:	4613      	mov	r3, r2
    8a1c:	009b      	lsls	r3, r3, #2
    8a1e:	4413      	add	r3, r2
    8a20:	009b      	lsls	r3, r3, #2
    8a22:	440b      	add	r3, r1
    8a24:	3304      	adds	r3, #4
    8a26:	681b      	ldr	r3, [r3, #0]
    8a28:	f003 030c 	and.w	r3, r3, #12
    8a2c:	2b08      	cmp	r3, #8
    8a2e:	d11e      	bne.n	8a6e <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8a30:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a34:	4966      	ldr	r1, [pc, #408]	; (8bd0 <_tc_timer_init+0x27c>)
    8a36:	4613      	mov	r3, r2
    8a38:	009b      	lsls	r3, r3, #2
    8a3a:	4413      	add	r3, r2
    8a3c:	009b      	lsls	r3, r3, #2
    8a3e:	440b      	add	r3, r1
    8a40:	330c      	adds	r3, #12
    8a42:	681b      	ldr	r3, [r3, #0]
    8a44:	461a      	mov	r2, r3
    8a46:	2100      	movs	r1, #0
    8a48:	6838      	ldr	r0, [r7, #0]
    8a4a:	4b65      	ldr	r3, [pc, #404]	; (8be0 <_tc_timer_init+0x28c>)
    8a4c:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    8a4e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a52:	495f      	ldr	r1, [pc, #380]	; (8bd0 <_tc_timer_init+0x27c>)
    8a54:	4613      	mov	r3, r2
    8a56:	009b      	lsls	r3, r3, #2
    8a58:	4413      	add	r3, r2
    8a5a:	009b      	lsls	r3, r3, #2
    8a5c:	440b      	add	r3, r1
    8a5e:	3310      	adds	r3, #16
    8a60:	681b      	ldr	r3, [r3, #0]
    8a62:	461a      	mov	r2, r3
    8a64:	2101      	movs	r1, #1
    8a66:	6838      	ldr	r0, [r7, #0]
    8a68:	4b5d      	ldr	r3, [pc, #372]	; (8be0 <_tc_timer_init+0x28c>)
    8a6a:	4798      	blx	r3
    8a6c:	e06a      	b.n	8b44 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    8a6e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a72:	4957      	ldr	r1, [pc, #348]	; (8bd0 <_tc_timer_init+0x27c>)
    8a74:	4613      	mov	r3, r2
    8a76:	009b      	lsls	r3, r3, #2
    8a78:	4413      	add	r3, r2
    8a7a:	009b      	lsls	r3, r3, #2
    8a7c:	440b      	add	r3, r1
    8a7e:	3304      	adds	r3, #4
    8a80:	681b      	ldr	r3, [r3, #0]
    8a82:	f003 030c 	and.w	r3, r3, #12
    8a86:	2b00      	cmp	r3, #0
    8a88:	d120      	bne.n	8acc <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8a8a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a8e:	4950      	ldr	r1, [pc, #320]	; (8bd0 <_tc_timer_init+0x27c>)
    8a90:	4613      	mov	r3, r2
    8a92:	009b      	lsls	r3, r3, #2
    8a94:	4413      	add	r3, r2
    8a96:	009b      	lsls	r3, r3, #2
    8a98:	440b      	add	r3, r1
    8a9a:	330c      	adds	r3, #12
    8a9c:	681b      	ldr	r3, [r3, #0]
    8a9e:	b29b      	uxth	r3, r3
    8aa0:	461a      	mov	r2, r3
    8aa2:	2100      	movs	r1, #0
    8aa4:	6838      	ldr	r0, [r7, #0]
    8aa6:	4b4f      	ldr	r3, [pc, #316]	; (8be4 <_tc_timer_init+0x290>)
    8aa8:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8aaa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8aae:	4948      	ldr	r1, [pc, #288]	; (8bd0 <_tc_timer_init+0x27c>)
    8ab0:	4613      	mov	r3, r2
    8ab2:	009b      	lsls	r3, r3, #2
    8ab4:	4413      	add	r3, r2
    8ab6:	009b      	lsls	r3, r3, #2
    8ab8:	440b      	add	r3, r1
    8aba:	3310      	adds	r3, #16
    8abc:	681b      	ldr	r3, [r3, #0]
    8abe:	b29b      	uxth	r3, r3
    8ac0:	461a      	mov	r2, r3
    8ac2:	2101      	movs	r1, #1
    8ac4:	6838      	ldr	r0, [r7, #0]
    8ac6:	4b47      	ldr	r3, [pc, #284]	; (8be4 <_tc_timer_init+0x290>)
    8ac8:	4798      	blx	r3
    8aca:	e03b      	b.n	8b44 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    8acc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8ad0:	493f      	ldr	r1, [pc, #252]	; (8bd0 <_tc_timer_init+0x27c>)
    8ad2:	4613      	mov	r3, r2
    8ad4:	009b      	lsls	r3, r3, #2
    8ad6:	4413      	add	r3, r2
    8ad8:	009b      	lsls	r3, r3, #2
    8ada:	440b      	add	r3, r1
    8adc:	3304      	adds	r3, #4
    8ade:	681b      	ldr	r3, [r3, #0]
    8ae0:	f003 030c 	and.w	r3, r3, #12
    8ae4:	2b04      	cmp	r3, #4
    8ae6:	d12d      	bne.n	8b44 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    8ae8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8aec:	4938      	ldr	r1, [pc, #224]	; (8bd0 <_tc_timer_init+0x27c>)
    8aee:	4613      	mov	r3, r2
    8af0:	009b      	lsls	r3, r3, #2
    8af2:	4413      	add	r3, r2
    8af4:	009b      	lsls	r3, r3, #2
    8af6:	440b      	add	r3, r1
    8af8:	330c      	adds	r3, #12
    8afa:	681b      	ldr	r3, [r3, #0]
    8afc:	b2db      	uxtb	r3, r3
    8afe:	461a      	mov	r2, r3
    8b00:	2100      	movs	r1, #0
    8b02:	6838      	ldr	r0, [r7, #0]
    8b04:	4b38      	ldr	r3, [pc, #224]	; (8be8 <_tc_timer_init+0x294>)
    8b06:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    8b08:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b0c:	4930      	ldr	r1, [pc, #192]	; (8bd0 <_tc_timer_init+0x27c>)
    8b0e:	4613      	mov	r3, r2
    8b10:	009b      	lsls	r3, r3, #2
    8b12:	4413      	add	r3, r2
    8b14:	009b      	lsls	r3, r3, #2
    8b16:	440b      	add	r3, r1
    8b18:	3310      	adds	r3, #16
    8b1a:	681b      	ldr	r3, [r3, #0]
    8b1c:	b2db      	uxtb	r3, r3
    8b1e:	461a      	mov	r2, r3
    8b20:	2101      	movs	r1, #1
    8b22:	6838      	ldr	r0, [r7, #0]
    8b24:	4b30      	ldr	r3, [pc, #192]	; (8be8 <_tc_timer_init+0x294>)
    8b26:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    8b28:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b2c:	4928      	ldr	r1, [pc, #160]	; (8bd0 <_tc_timer_init+0x27c>)
    8b2e:	4613      	mov	r3, r2
    8b30:	009b      	lsls	r3, r3, #2
    8b32:	4413      	add	r3, r2
    8b34:	009b      	lsls	r3, r3, #2
    8b36:	440b      	add	r3, r1
    8b38:	330b      	adds	r3, #11
    8b3a:	781b      	ldrb	r3, [r3, #0]
    8b3c:	4619      	mov	r1, r3
    8b3e:	6838      	ldr	r0, [r7, #0]
    8b40:	4b2a      	ldr	r3, [pc, #168]	; (8bec <_tc_timer_init+0x298>)
    8b42:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    8b44:	6838      	ldr	r0, [r7, #0]
    8b46:	4b2a      	ldr	r3, [pc, #168]	; (8bf0 <_tc_timer_init+0x29c>)
    8b48:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    8b4a:	6879      	ldr	r1, [r7, #4]
    8b4c:	6838      	ldr	r0, [r7, #0]
    8b4e:	4b29      	ldr	r3, [pc, #164]	; (8bf4 <_tc_timer_init+0x2a0>)
    8b50:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8b52:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b56:	491e      	ldr	r1, [pc, #120]	; (8bd0 <_tc_timer_init+0x27c>)
    8b58:	4613      	mov	r3, r2
    8b5a:	009b      	lsls	r3, r3, #2
    8b5c:	4413      	add	r3, r2
    8b5e:	009b      	lsls	r3, r3, #2
    8b60:	440b      	add	r3, r1
    8b62:	3302      	adds	r3, #2
    8b64:	f9b3 3000 	ldrsh.w	r3, [r3]
    8b68:	4618      	mov	r0, r3
    8b6a:	4b23      	ldr	r3, [pc, #140]	; (8bf8 <_tc_timer_init+0x2a4>)
    8b6c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8b6e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b72:	4917      	ldr	r1, [pc, #92]	; (8bd0 <_tc_timer_init+0x27c>)
    8b74:	4613      	mov	r3, r2
    8b76:	009b      	lsls	r3, r3, #2
    8b78:	4413      	add	r3, r2
    8b7a:	009b      	lsls	r3, r3, #2
    8b7c:	440b      	add	r3, r1
    8b7e:	3302      	adds	r3, #2
    8b80:	f9b3 3000 	ldrsh.w	r3, [r3]
    8b84:	4618      	mov	r0, r3
    8b86:	4b1d      	ldr	r3, [pc, #116]	; (8bfc <_tc_timer_init+0x2a8>)
    8b88:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8b8a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b8e:	4910      	ldr	r1, [pc, #64]	; (8bd0 <_tc_timer_init+0x27c>)
    8b90:	4613      	mov	r3, r2
    8b92:	009b      	lsls	r3, r3, #2
    8b94:	4413      	add	r3, r2
    8b96:	009b      	lsls	r3, r3, #2
    8b98:	440b      	add	r3, r1
    8b9a:	3302      	adds	r3, #2
    8b9c:	f9b3 3000 	ldrsh.w	r3, [r3]
    8ba0:	4618      	mov	r0, r3
    8ba2:	4b17      	ldr	r3, [pc, #92]	; (8c00 <_tc_timer_init+0x2ac>)
    8ba4:	4798      	blx	r3

	return ERR_NONE;
    8ba6:	2300      	movs	r3, #0
}
    8ba8:	4618      	mov	r0, r3
    8baa:	3710      	adds	r7, #16
    8bac:	46bd      	mov	sp, r7
    8bae:	bd80      	pop	{r7, pc}
    8bb0:	000091e5 	.word	0x000091e5
    8bb4:	000106c0 	.word	0x000106c0
    8bb8:	00003fd5 	.word	0x00003fd5
    8bbc:	000085c9 	.word	0x000085c9
    8bc0:	00008769 	.word	0x00008769
    8bc4:	00008719 	.word	0x00008719
    8bc8:	000085a5 	.word	0x000085a5
    8bcc:	00008799 	.word	0x00008799
    8bd0:	200000e0 	.word	0x200000e0
    8bd4:	000087f9 	.word	0x000087f9
    8bd8:	000087bd 	.word	0x000087bd
    8bdc:	000087db 	.word	0x000087db
    8be0:	000088f9 	.word	0x000088f9
    8be4:	00008895 	.word	0x00008895
    8be8:	00008865 	.word	0x00008865
    8bec:	00008819 	.word	0x00008819
    8bf0:	0000864d 	.word	0x0000864d
    8bf4:	0000924d 	.word	0x0000924d
    8bf8:	00008525 	.word	0x00008525
    8bfc:	00008569 	.word	0x00008569
    8c00:	000084e9 	.word	0x000084e9

00008c04 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    8c04:	b580      	push	{r7, lr}
    8c06:	b084      	sub	sp, #16
    8c08:	af00      	add	r7, sp, #0
    8c0a:	6078      	str	r0, [r7, #4]
    8c0c:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    8c0e:	6838      	ldr	r0, [r7, #0]
    8c10:	4b73      	ldr	r3, [pc, #460]	; (8de0 <_pwm_init+0x1dc>)
    8c12:	4798      	blx	r3
    8c14:	4603      	mov	r3, r0
    8c16:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    8c18:	687b      	ldr	r3, [r7, #4]
    8c1a:	683a      	ldr	r2, [r7, #0]
    8c1c:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8c1e:	2101      	movs	r1, #1
    8c20:	6838      	ldr	r0, [r7, #0]
    8c22:	4b70      	ldr	r3, [pc, #448]	; (8de4 <_pwm_init+0x1e0>)
    8c24:	4798      	blx	r3
    8c26:	4603      	mov	r3, r0
    8c28:	f083 0301 	eor.w	r3, r3, #1
    8c2c:	b2db      	uxtb	r3, r3
    8c2e:	2b00      	cmp	r3, #0
    8c30:	d011      	beq.n	8c56 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8c32:	2102      	movs	r1, #2
    8c34:	6838      	ldr	r0, [r7, #0]
    8c36:	4b6c      	ldr	r3, [pc, #432]	; (8de8 <_pwm_init+0x1e4>)
    8c38:	4798      	blx	r3
    8c3a:	4603      	mov	r3, r0
    8c3c:	2b00      	cmp	r3, #0
    8c3e:	d006      	beq.n	8c4e <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8c40:	6838      	ldr	r0, [r7, #0]
    8c42:	4b6a      	ldr	r3, [pc, #424]	; (8dec <_pwm_init+0x1e8>)
    8c44:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    8c46:	2102      	movs	r1, #2
    8c48:	6838      	ldr	r0, [r7, #0]
    8c4a:	4b69      	ldr	r3, [pc, #420]	; (8df0 <_pwm_init+0x1ec>)
    8c4c:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    8c4e:	2101      	movs	r1, #1
    8c50:	6838      	ldr	r0, [r7, #0]
    8c52:	4b68      	ldr	r3, [pc, #416]	; (8df4 <_pwm_init+0x1f0>)
    8c54:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8c56:	2101      	movs	r1, #1
    8c58:	6838      	ldr	r0, [r7, #0]
    8c5a:	4b65      	ldr	r3, [pc, #404]	; (8df0 <_pwm_init+0x1ec>)
    8c5c:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8c5e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8c62:	4965      	ldr	r1, [pc, #404]	; (8df8 <_pwm_init+0x1f4>)
    8c64:	4613      	mov	r3, r2
    8c66:	009b      	lsls	r3, r3, #2
    8c68:	4413      	add	r3, r2
    8c6a:	009b      	lsls	r3, r3, #2
    8c6c:	440b      	add	r3, r1
    8c6e:	3304      	adds	r3, #4
    8c70:	681b      	ldr	r3, [r3, #0]
    8c72:	4619      	mov	r1, r3
    8c74:	6838      	ldr	r0, [r7, #0]
    8c76:	4b5f      	ldr	r3, [pc, #380]	; (8df4 <_pwm_init+0x1f0>)
    8c78:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8c7a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8c7e:	495e      	ldr	r1, [pc, #376]	; (8df8 <_pwm_init+0x1f4>)
    8c80:	4613      	mov	r3, r2
    8c82:	009b      	lsls	r3, r3, #2
    8c84:	4413      	add	r3, r2
    8c86:	009b      	lsls	r3, r3, #2
    8c88:	440b      	add	r3, r1
    8c8a:	330a      	adds	r3, #10
    8c8c:	781b      	ldrb	r3, [r3, #0]
    8c8e:	4619      	mov	r1, r3
    8c90:	6838      	ldr	r0, [r7, #0]
    8c92:	4b5a      	ldr	r3, [pc, #360]	; (8dfc <_pwm_init+0x1f8>)
    8c94:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8c96:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8c9a:	4957      	ldr	r1, [pc, #348]	; (8df8 <_pwm_init+0x1f4>)
    8c9c:	4613      	mov	r3, r2
    8c9e:	009b      	lsls	r3, r3, #2
    8ca0:	4413      	add	r3, r2
    8ca2:	009b      	lsls	r3, r3, #2
    8ca4:	440b      	add	r3, r1
    8ca6:	3308      	adds	r3, #8
    8ca8:	881b      	ldrh	r3, [r3, #0]
    8caa:	4619      	mov	r1, r3
    8cac:	6838      	ldr	r0, [r7, #0]
    8cae:	4b54      	ldr	r3, [pc, #336]	; (8e00 <_pwm_init+0x1fc>)
    8cb0:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    8cb2:	2103      	movs	r1, #3
    8cb4:	6838      	ldr	r0, [r7, #0]
    8cb6:	4b53      	ldr	r3, [pc, #332]	; (8e04 <_pwm_init+0x200>)
    8cb8:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8cba:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8cbe:	494e      	ldr	r1, [pc, #312]	; (8df8 <_pwm_init+0x1f4>)
    8cc0:	4613      	mov	r3, r2
    8cc2:	009b      	lsls	r3, r3, #2
    8cc4:	4413      	add	r3, r2
    8cc6:	009b      	lsls	r3, r3, #2
    8cc8:	440b      	add	r3, r1
    8cca:	3304      	adds	r3, #4
    8ccc:	681b      	ldr	r3, [r3, #0]
    8cce:	f003 030c 	and.w	r3, r3, #12
    8cd2:	2b08      	cmp	r3, #8
    8cd4:	d11e      	bne.n	8d14 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8cd6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8cda:	4947      	ldr	r1, [pc, #284]	; (8df8 <_pwm_init+0x1f4>)
    8cdc:	4613      	mov	r3, r2
    8cde:	009b      	lsls	r3, r3, #2
    8ce0:	4413      	add	r3, r2
    8ce2:	009b      	lsls	r3, r3, #2
    8ce4:	440b      	add	r3, r1
    8ce6:	330c      	adds	r3, #12
    8ce8:	681b      	ldr	r3, [r3, #0]
    8cea:	461a      	mov	r2, r3
    8cec:	2100      	movs	r1, #0
    8cee:	6838      	ldr	r0, [r7, #0]
    8cf0:	4b45      	ldr	r3, [pc, #276]	; (8e08 <_pwm_init+0x204>)
    8cf2:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    8cf4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8cf8:	493f      	ldr	r1, [pc, #252]	; (8df8 <_pwm_init+0x1f4>)
    8cfa:	4613      	mov	r3, r2
    8cfc:	009b      	lsls	r3, r3, #2
    8cfe:	4413      	add	r3, r2
    8d00:	009b      	lsls	r3, r3, #2
    8d02:	440b      	add	r3, r1
    8d04:	3310      	adds	r3, #16
    8d06:	681b      	ldr	r3, [r3, #0]
    8d08:	461a      	mov	r2, r3
    8d0a:	2101      	movs	r1, #1
    8d0c:	6838      	ldr	r0, [r7, #0]
    8d0e:	4b3e      	ldr	r3, [pc, #248]	; (8e08 <_pwm_init+0x204>)
    8d10:	4798      	blx	r3
    8d12:	e031      	b.n	8d78 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    8d14:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8d18:	4937      	ldr	r1, [pc, #220]	; (8df8 <_pwm_init+0x1f4>)
    8d1a:	4613      	mov	r3, r2
    8d1c:	009b      	lsls	r3, r3, #2
    8d1e:	4413      	add	r3, r2
    8d20:	009b      	lsls	r3, r3, #2
    8d22:	440b      	add	r3, r1
    8d24:	3304      	adds	r3, #4
    8d26:	681b      	ldr	r3, [r3, #0]
    8d28:	f003 030c 	and.w	r3, r3, #12
    8d2c:	2b00      	cmp	r3, #0
    8d2e:	d120      	bne.n	8d72 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8d30:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8d34:	4930      	ldr	r1, [pc, #192]	; (8df8 <_pwm_init+0x1f4>)
    8d36:	4613      	mov	r3, r2
    8d38:	009b      	lsls	r3, r3, #2
    8d3a:	4413      	add	r3, r2
    8d3c:	009b      	lsls	r3, r3, #2
    8d3e:	440b      	add	r3, r1
    8d40:	330c      	adds	r3, #12
    8d42:	681b      	ldr	r3, [r3, #0]
    8d44:	b29b      	uxth	r3, r3
    8d46:	461a      	mov	r2, r3
    8d48:	2100      	movs	r1, #0
    8d4a:	6838      	ldr	r0, [r7, #0]
    8d4c:	4b2f      	ldr	r3, [pc, #188]	; (8e0c <_pwm_init+0x208>)
    8d4e:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8d50:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8d54:	4928      	ldr	r1, [pc, #160]	; (8df8 <_pwm_init+0x1f4>)
    8d56:	4613      	mov	r3, r2
    8d58:	009b      	lsls	r3, r3, #2
    8d5a:	4413      	add	r3, r2
    8d5c:	009b      	lsls	r3, r3, #2
    8d5e:	440b      	add	r3, r1
    8d60:	3310      	adds	r3, #16
    8d62:	681b      	ldr	r3, [r3, #0]
    8d64:	b29b      	uxth	r3, r3
    8d66:	461a      	mov	r2, r3
    8d68:	2101      	movs	r1, #1
    8d6a:	6838      	ldr	r0, [r7, #0]
    8d6c:	4b27      	ldr	r3, [pc, #156]	; (8e0c <_pwm_init+0x208>)
    8d6e:	4798      	blx	r3
    8d70:	e002      	b.n	8d78 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    8d72:	f04f 33ff 	mov.w	r3, #4294967295
    8d76:	e02e      	b.n	8dd6 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    8d78:	6879      	ldr	r1, [r7, #4]
    8d7a:	6838      	ldr	r0, [r7, #0]
    8d7c:	4b24      	ldr	r3, [pc, #144]	; (8e10 <_pwm_init+0x20c>)
    8d7e:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8d80:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8d84:	491c      	ldr	r1, [pc, #112]	; (8df8 <_pwm_init+0x1f4>)
    8d86:	4613      	mov	r3, r2
    8d88:	009b      	lsls	r3, r3, #2
    8d8a:	4413      	add	r3, r2
    8d8c:	009b      	lsls	r3, r3, #2
    8d8e:	440b      	add	r3, r1
    8d90:	3302      	adds	r3, #2
    8d92:	f9b3 3000 	ldrsh.w	r3, [r3]
    8d96:	4618      	mov	r0, r3
    8d98:	4b1e      	ldr	r3, [pc, #120]	; (8e14 <_pwm_init+0x210>)
    8d9a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8d9c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8da0:	4915      	ldr	r1, [pc, #84]	; (8df8 <_pwm_init+0x1f4>)
    8da2:	4613      	mov	r3, r2
    8da4:	009b      	lsls	r3, r3, #2
    8da6:	4413      	add	r3, r2
    8da8:	009b      	lsls	r3, r3, #2
    8daa:	440b      	add	r3, r1
    8dac:	3302      	adds	r3, #2
    8dae:	f9b3 3000 	ldrsh.w	r3, [r3]
    8db2:	4618      	mov	r0, r3
    8db4:	4b18      	ldr	r3, [pc, #96]	; (8e18 <_pwm_init+0x214>)
    8db6:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8db8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8dbc:	490e      	ldr	r1, [pc, #56]	; (8df8 <_pwm_init+0x1f4>)
    8dbe:	4613      	mov	r3, r2
    8dc0:	009b      	lsls	r3, r3, #2
    8dc2:	4413      	add	r3, r2
    8dc4:	009b      	lsls	r3, r3, #2
    8dc6:	440b      	add	r3, r1
    8dc8:	3302      	adds	r3, #2
    8dca:	f9b3 3000 	ldrsh.w	r3, [r3]
    8dce:	4618      	mov	r0, r3
    8dd0:	4b12      	ldr	r3, [pc, #72]	; (8e1c <_pwm_init+0x218>)
    8dd2:	4798      	blx	r3

	return 0;
    8dd4:	2300      	movs	r3, #0
}
    8dd6:	4618      	mov	r0, r3
    8dd8:	3710      	adds	r7, #16
    8dda:	46bd      	mov	sp, r7
    8ddc:	bd80      	pop	{r7, pc}
    8dde:	bf00      	nop
    8de0:	000091e5 	.word	0x000091e5
    8de4:	000085c9 	.word	0x000085c9
    8de8:	00008769 	.word	0x00008769
    8dec:	00008719 	.word	0x00008719
    8df0:	000085a5 	.word	0x000085a5
    8df4:	00008799 	.word	0x00008799
    8df8:	200000e0 	.word	0x200000e0
    8dfc:	000087f9 	.word	0x000087f9
    8e00:	000087bd 	.word	0x000087bd
    8e04:	000087db 	.word	0x000087db
    8e08:	000088f9 	.word	0x000088f9
    8e0c:	00008895 	.word	0x00008895
    8e10:	0000924d 	.word	0x0000924d
    8e14:	00008525 	.word	0x00008525
    8e18:	00008569 	.word	0x00008569
    8e1c:	000084e9 	.word	0x000084e9

00008e20 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    8e20:	b580      	push	{r7, lr}
    8e22:	b084      	sub	sp, #16
    8e24:	af00      	add	r7, sp, #0
    8e26:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8e28:	687b      	ldr	r3, [r7, #4]
    8e2a:	68db      	ldr	r3, [r3, #12]
    8e2c:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8e2e:	68f8      	ldr	r0, [r7, #12]
    8e30:	4b10      	ldr	r3, [pc, #64]	; (8e74 <_tc_timer_deinit+0x54>)
    8e32:	4798      	blx	r3
    8e34:	4603      	mov	r3, r0
    8e36:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8e38:	22f9      	movs	r2, #249	; 0xf9
    8e3a:	490f      	ldr	r1, [pc, #60]	; (8e78 <_tc_timer_deinit+0x58>)
    8e3c:	2001      	movs	r0, #1
    8e3e:	4b0f      	ldr	r3, [pc, #60]	; (8e7c <_tc_timer_deinit+0x5c>)
    8e40:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    8e42:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8e46:	490e      	ldr	r1, [pc, #56]	; (8e80 <_tc_timer_deinit+0x60>)
    8e48:	4613      	mov	r3, r2
    8e4a:	009b      	lsls	r3, r3, #2
    8e4c:	4413      	add	r3, r2
    8e4e:	009b      	lsls	r3, r3, #2
    8e50:	440b      	add	r3, r1
    8e52:	3302      	adds	r3, #2
    8e54:	f9b3 3000 	ldrsh.w	r3, [r3]
    8e58:	4618      	mov	r0, r3
    8e5a:	4b0a      	ldr	r3, [pc, #40]	; (8e84 <_tc_timer_deinit+0x64>)
    8e5c:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8e5e:	68f8      	ldr	r0, [r7, #12]
    8e60:	4b09      	ldr	r3, [pc, #36]	; (8e88 <_tc_timer_deinit+0x68>)
    8e62:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    8e64:	68f8      	ldr	r0, [r7, #12]
    8e66:	4b09      	ldr	r3, [pc, #36]	; (8e8c <_tc_timer_deinit+0x6c>)
    8e68:	4798      	blx	r3
}
    8e6a:	bf00      	nop
    8e6c:	3710      	adds	r7, #16
    8e6e:	46bd      	mov	sp, r7
    8e70:	bd80      	pop	{r7, pc}
    8e72:	bf00      	nop
    8e74:	000091e5 	.word	0x000091e5
    8e78:	000106c0 	.word	0x000106c0
    8e7c:	00003fd5 	.word	0x00003fd5
    8e80:	200000e0 	.word	0x200000e0
    8e84:	00008525 	.word	0x00008525
    8e88:	00008719 	.word	0x00008719
    8e8c:	00008691 	.word	0x00008691

00008e90 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    8e90:	b580      	push	{r7, lr}
    8e92:	b082      	sub	sp, #8
    8e94:	af00      	add	r7, sp, #0
    8e96:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8e98:	687b      	ldr	r3, [r7, #4]
    8e9a:	68db      	ldr	r3, [r3, #12]
    8e9c:	4618      	mov	r0, r3
    8e9e:	4b03      	ldr	r3, [pc, #12]	; (8eac <_tc_timer_start+0x1c>)
    8ea0:	4798      	blx	r3
}
    8ea2:	bf00      	nop
    8ea4:	3708      	adds	r7, #8
    8ea6:	46bd      	mov	sp, r7
    8ea8:	bd80      	pop	{r7, pc}
    8eaa:	bf00      	nop
    8eac:	000086b9 	.word	0x000086b9

00008eb0 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    8eb0:	b580      	push	{r7, lr}
    8eb2:	b082      	sub	sp, #8
    8eb4:	af00      	add	r7, sp, #0
    8eb6:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8eb8:	687b      	ldr	r3, [r7, #4]
    8eba:	691b      	ldr	r3, [r3, #16]
    8ebc:	4618      	mov	r0, r3
    8ebe:	4b03      	ldr	r3, [pc, #12]	; (8ecc <_pwm_enable+0x1c>)
    8ec0:	4798      	blx	r3
}
    8ec2:	bf00      	nop
    8ec4:	3708      	adds	r7, #8
    8ec6:	46bd      	mov	sp, r7
    8ec8:	bd80      	pop	{r7, pc}
    8eca:	bf00      	nop
    8ecc:	000086b9 	.word	0x000086b9

00008ed0 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    8ed0:	b580      	push	{r7, lr}
    8ed2:	b082      	sub	sp, #8
    8ed4:	af00      	add	r7, sp, #0
    8ed6:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8ed8:	687b      	ldr	r3, [r7, #4]
    8eda:	68db      	ldr	r3, [r3, #12]
    8edc:	4618      	mov	r0, r3
    8ede:	4b03      	ldr	r3, [pc, #12]	; (8eec <_tc_timer_stop+0x1c>)
    8ee0:	4798      	blx	r3
}
    8ee2:	bf00      	nop
    8ee4:	3708      	adds	r7, #8
    8ee6:	46bd      	mov	sp, r7
    8ee8:	bd80      	pop	{r7, pc}
    8eea:	bf00      	nop
    8eec:	00008719 	.word	0x00008719

00008ef0 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    8ef0:	b580      	push	{r7, lr}
    8ef2:	b084      	sub	sp, #16
    8ef4:	af00      	add	r7, sp, #0
    8ef6:	6078      	str	r0, [r7, #4]
    8ef8:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    8efa:	687b      	ldr	r3, [r7, #4]
    8efc:	68db      	ldr	r3, [r3, #12]
    8efe:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8f00:	68f8      	ldr	r0, [r7, #12]
    8f02:	4b14      	ldr	r3, [pc, #80]	; (8f54 <_tc_timer_set_period+0x64>)
    8f04:	4798      	blx	r3
    8f06:	4603      	mov	r3, r0
    8f08:	2b02      	cmp	r3, #2
    8f0a:	d105      	bne.n	8f18 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    8f0c:	683a      	ldr	r2, [r7, #0]
    8f0e:	2100      	movs	r1, #0
    8f10:	68f8      	ldr	r0, [r7, #12]
    8f12:	4b11      	ldr	r3, [pc, #68]	; (8f58 <_tc_timer_set_period+0x68>)
    8f14:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    8f16:	e019      	b.n	8f4c <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8f18:	68f8      	ldr	r0, [r7, #12]
    8f1a:	4b0e      	ldr	r3, [pc, #56]	; (8f54 <_tc_timer_set_period+0x64>)
    8f1c:	4798      	blx	r3
    8f1e:	4603      	mov	r3, r0
    8f20:	2b00      	cmp	r3, #0
    8f22:	d107      	bne.n	8f34 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    8f24:	683b      	ldr	r3, [r7, #0]
    8f26:	b29b      	uxth	r3, r3
    8f28:	461a      	mov	r2, r3
    8f2a:	2100      	movs	r1, #0
    8f2c:	68f8      	ldr	r0, [r7, #12]
    8f2e:	4b0b      	ldr	r3, [pc, #44]	; (8f5c <_tc_timer_set_period+0x6c>)
    8f30:	4798      	blx	r3
}
    8f32:	e00b      	b.n	8f4c <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8f34:	68f8      	ldr	r0, [r7, #12]
    8f36:	4b07      	ldr	r3, [pc, #28]	; (8f54 <_tc_timer_set_period+0x64>)
    8f38:	4798      	blx	r3
    8f3a:	4603      	mov	r3, r0
    8f3c:	2b01      	cmp	r3, #1
    8f3e:	d105      	bne.n	8f4c <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    8f40:	683b      	ldr	r3, [r7, #0]
    8f42:	b2db      	uxtb	r3, r3
    8f44:	4619      	mov	r1, r3
    8f46:	68f8      	ldr	r0, [r7, #12]
    8f48:	4b05      	ldr	r3, [pc, #20]	; (8f60 <_tc_timer_set_period+0x70>)
    8f4a:	4798      	blx	r3
}
    8f4c:	bf00      	nop
    8f4e:	3710      	adds	r7, #16
    8f50:	46bd      	mov	sp, r7
    8f52:	bd80      	pop	{r7, pc}
    8f54:	00008741 	.word	0x00008741
    8f58:	000088f9 	.word	0x000088f9
    8f5c:	00008895 	.word	0x00008895
    8f60:	00008819 	.word	0x00008819

00008f64 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    8f64:	b580      	push	{r7, lr}
    8f66:	b084      	sub	sp, #16
    8f68:	af00      	add	r7, sp, #0
    8f6a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8f6c:	687b      	ldr	r3, [r7, #4]
    8f6e:	68db      	ldr	r3, [r3, #12]
    8f70:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8f72:	68f8      	ldr	r0, [r7, #12]
    8f74:	4b13      	ldr	r3, [pc, #76]	; (8fc4 <_tc_timer_get_period+0x60>)
    8f76:	4798      	blx	r3
    8f78:	4603      	mov	r3, r0
    8f7a:	2b02      	cmp	r3, #2
    8f7c:	d105      	bne.n	8f8a <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    8f7e:	2100      	movs	r1, #0
    8f80:	68f8      	ldr	r0, [r7, #12]
    8f82:	4b11      	ldr	r3, [pc, #68]	; (8fc8 <_tc_timer_get_period+0x64>)
    8f84:	4798      	blx	r3
    8f86:	4603      	mov	r3, r0
    8f88:	e017      	b.n	8fba <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8f8a:	68f8      	ldr	r0, [r7, #12]
    8f8c:	4b0d      	ldr	r3, [pc, #52]	; (8fc4 <_tc_timer_get_period+0x60>)
    8f8e:	4798      	blx	r3
    8f90:	4603      	mov	r3, r0
    8f92:	2b00      	cmp	r3, #0
    8f94:	d105      	bne.n	8fa2 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    8f96:	2100      	movs	r1, #0
    8f98:	68f8      	ldr	r0, [r7, #12]
    8f9a:	4b0c      	ldr	r3, [pc, #48]	; (8fcc <_tc_timer_get_period+0x68>)
    8f9c:	4798      	blx	r3
    8f9e:	4603      	mov	r3, r0
    8fa0:	e00b      	b.n	8fba <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8fa2:	68f8      	ldr	r0, [r7, #12]
    8fa4:	4b07      	ldr	r3, [pc, #28]	; (8fc4 <_tc_timer_get_period+0x60>)
    8fa6:	4798      	blx	r3
    8fa8:	4603      	mov	r3, r0
    8faa:	2b01      	cmp	r3, #1
    8fac:	d104      	bne.n	8fb8 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    8fae:	68f8      	ldr	r0, [r7, #12]
    8fb0:	4b07      	ldr	r3, [pc, #28]	; (8fd0 <_tc_timer_get_period+0x6c>)
    8fb2:	4798      	blx	r3
    8fb4:	4603      	mov	r3, r0
    8fb6:	e000      	b.n	8fba <_tc_timer_get_period+0x56>
	}

	return 0;
    8fb8:	2300      	movs	r3, #0
}
    8fba:	4618      	mov	r0, r3
    8fbc:	3710      	adds	r7, #16
    8fbe:	46bd      	mov	sp, r7
    8fc0:	bd80      	pop	{r7, pc}
    8fc2:	bf00      	nop
    8fc4:	00008741 	.word	0x00008741
    8fc8:	00008929 	.word	0x00008929
    8fcc:	000088c9 	.word	0x000088c9
    8fd0:	00008841 	.word	0x00008841

00008fd4 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    8fd4:	b580      	push	{r7, lr}
    8fd6:	b082      	sub	sp, #8
    8fd8:	af00      	add	r7, sp, #0
    8fda:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8fdc:	687b      	ldr	r3, [r7, #4]
    8fde:	68db      	ldr	r3, [r3, #12]
    8fe0:	4618      	mov	r0, r3
    8fe2:	4b03      	ldr	r3, [pc, #12]	; (8ff0 <_tc_timer_is_started+0x1c>)
    8fe4:	4798      	blx	r3
    8fe6:	4603      	mov	r3, r0
}
    8fe8:	4618      	mov	r0, r3
    8fea:	3708      	adds	r7, #8
    8fec:	46bd      	mov	sp, r7
    8fee:	bd80      	pop	{r7, pc}
    8ff0:	000086e1 	.word	0x000086e1

00008ff4 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    8ff4:	b580      	push	{r7, lr}
    8ff6:	b082      	sub	sp, #8
    8ff8:	af00      	add	r7, sp, #0
    8ffa:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8ffc:	687b      	ldr	r3, [r7, #4]
    8ffe:	691b      	ldr	r3, [r3, #16]
    9000:	4618      	mov	r0, r3
    9002:	4b03      	ldr	r3, [pc, #12]	; (9010 <_pwm_is_enabled+0x1c>)
    9004:	4798      	blx	r3
    9006:	4603      	mov	r3, r0
}
    9008:	4618      	mov	r0, r3
    900a:	3708      	adds	r7, #8
    900c:	46bd      	mov	sp, r7
    900e:	bd80      	pop	{r7, pc}
    9010:	000086e1 	.word	0x000086e1

00009014 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    9014:	b480      	push	{r7}
    9016:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    9018:	4b02      	ldr	r3, [pc, #8]	; (9024 <_tc_get_timer+0x10>)
}
    901a:	4618      	mov	r0, r3
    901c:	46bd      	mov	sp, r7
    901e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9022:	4770      	bx	lr
    9024:	20000158 	.word	0x20000158

00009028 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    9028:	b480      	push	{r7}
    902a:	af00      	add	r7, sp, #0
	return NULL;
    902c:	2300      	movs	r3, #0
}
    902e:	4618      	mov	r0, r3
    9030:	46bd      	mov	sp, r7
    9032:	f85d 7b04 	ldr.w	r7, [sp], #4
    9036:	4770      	bx	lr

00009038 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    9038:	b580      	push	{r7, lr}
    903a:	b084      	sub	sp, #16
    903c:	af00      	add	r7, sp, #0
    903e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9040:	687b      	ldr	r3, [r7, #4]
    9042:	68db      	ldr	r3, [r3, #12]
    9044:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    9046:	68f8      	ldr	r0, [r7, #12]
    9048:	4b0e      	ldr	r3, [pc, #56]	; (9084 <_tc_timer_set_irq+0x4c>)
    904a:	4798      	blx	r3
    904c:	4603      	mov	r3, r0
    904e:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    9050:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    9054:	490c      	ldr	r1, [pc, #48]	; (9088 <_tc_timer_set_irq+0x50>)
    9056:	2001      	movs	r0, #1
    9058:	4b0c      	ldr	r3, [pc, #48]	; (908c <_tc_timer_set_irq+0x54>)
    905a:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    905c:	f997 200b 	ldrsb.w	r2, [r7, #11]
    9060:	490b      	ldr	r1, [pc, #44]	; (9090 <_tc_timer_set_irq+0x58>)
    9062:	4613      	mov	r3, r2
    9064:	009b      	lsls	r3, r3, #2
    9066:	4413      	add	r3, r2
    9068:	009b      	lsls	r3, r3, #2
    906a:	440b      	add	r3, r1
    906c:	3302      	adds	r3, #2
    906e:	f9b3 3000 	ldrsh.w	r3, [r3]
    9072:	b2db      	uxtb	r3, r3
    9074:	4618      	mov	r0, r3
    9076:	4b07      	ldr	r3, [pc, #28]	; (9094 <_tc_timer_set_irq+0x5c>)
    9078:	4798      	blx	r3
}
    907a:	bf00      	nop
    907c:	3710      	adds	r7, #16
    907e:	46bd      	mov	sp, r7
    9080:	bd80      	pop	{r7, pc}
    9082:	bf00      	nop
    9084:	000091e5 	.word	0x000091e5
    9088:	000106c0 	.word	0x000106c0
    908c:	00003fd5 	.word	0x00003fd5
    9090:	200000e0 	.word	0x200000e0
    9094:	00004821 	.word	0x00004821

00009098 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    9098:	b580      	push	{r7, lr}
    909a:	b084      	sub	sp, #16
    909c:	af00      	add	r7, sp, #0
    909e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    90a0:	687b      	ldr	r3, [r7, #4]
    90a2:	68db      	ldr	r3, [r3, #12]
    90a4:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    90a6:	68f8      	ldr	r0, [r7, #12]
    90a8:	4b07      	ldr	r3, [pc, #28]	; (90c8 <tc_interrupt_handler+0x30>)
    90aa:	4798      	blx	r3
    90ac:	4603      	mov	r3, r0
    90ae:	2b00      	cmp	r3, #0
    90b0:	d006      	beq.n	90c0 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    90b2:	68f8      	ldr	r0, [r7, #12]
    90b4:	4b05      	ldr	r3, [pc, #20]	; (90cc <tc_interrupt_handler+0x34>)
    90b6:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    90b8:	687b      	ldr	r3, [r7, #4]
    90ba:	681b      	ldr	r3, [r3, #0]
    90bc:	6878      	ldr	r0, [r7, #4]
    90be:	4798      	blx	r3
	}
}
    90c0:	bf00      	nop
    90c2:	3710      	adds	r7, #16
    90c4:	46bd      	mov	sp, r7
    90c6:	bd80      	pop	{r7, pc}
    90c8:	000085f1 	.word	0x000085f1
    90cc:	00008619 	.word	0x00008619

000090d0 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    90d0:	b580      	push	{r7, lr}
    90d2:	b084      	sub	sp, #16
    90d4:	af00      	add	r7, sp, #0
    90d6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    90d8:	687b      	ldr	r3, [r7, #4]
    90da:	691b      	ldr	r3, [r3, #16]
    90dc:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    90de:	68f8      	ldr	r0, [r7, #12]
    90e0:	4b12      	ldr	r3, [pc, #72]	; (912c <tc_pwm_interrupt_handler+0x5c>)
    90e2:	4798      	blx	r3
    90e4:	4603      	mov	r3, r0
    90e6:	2b00      	cmp	r3, #0
    90e8:	d00a      	beq.n	9100 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    90ea:	68f8      	ldr	r0, [r7, #12]
    90ec:	4b10      	ldr	r3, [pc, #64]	; (9130 <tc_pwm_interrupt_handler+0x60>)
    90ee:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    90f0:	687b      	ldr	r3, [r7, #4]
    90f2:	681b      	ldr	r3, [r3, #0]
    90f4:	2b00      	cmp	r3, #0
    90f6:	d003      	beq.n	9100 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    90f8:	687b      	ldr	r3, [r7, #4]
    90fa:	681b      	ldr	r3, [r3, #0]
    90fc:	6878      	ldr	r0, [r7, #4]
    90fe:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    9100:	68f8      	ldr	r0, [r7, #12]
    9102:	4b0c      	ldr	r3, [pc, #48]	; (9134 <tc_pwm_interrupt_handler+0x64>)
    9104:	4798      	blx	r3
    9106:	4603      	mov	r3, r0
    9108:	2b00      	cmp	r3, #0
    910a:	d00a      	beq.n	9122 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    910c:	68f8      	ldr	r0, [r7, #12]
    910e:	4b0a      	ldr	r3, [pc, #40]	; (9138 <tc_pwm_interrupt_handler+0x68>)
    9110:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    9112:	687b      	ldr	r3, [r7, #4]
    9114:	685b      	ldr	r3, [r3, #4]
    9116:	2b00      	cmp	r3, #0
    9118:	d003      	beq.n	9122 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    911a:	687b      	ldr	r3, [r7, #4]
    911c:	685b      	ldr	r3, [r3, #4]
    911e:	6878      	ldr	r0, [r7, #4]
    9120:	4798      	blx	r3
		}
	}
}
    9122:	bf00      	nop
    9124:	3710      	adds	r7, #16
    9126:	46bd      	mov	sp, r7
    9128:	bd80      	pop	{r7, pc}
    912a:	bf00      	nop
    912c:	000085f1 	.word	0x000085f1
    9130:	00008619 	.word	0x00008619
    9134:	00008667 	.word	0x00008667
    9138:	00008633 	.word	0x00008633

0000913c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    913c:	b580      	push	{r7, lr}
    913e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    9140:	4b03      	ldr	r3, [pc, #12]	; (9150 <TC0_Handler+0x14>)
    9142:	681b      	ldr	r3, [r3, #0]
    9144:	4618      	mov	r0, r3
    9146:	4b03      	ldr	r3, [pc, #12]	; (9154 <TC0_Handler+0x18>)
    9148:	4798      	blx	r3
}
    914a:	bf00      	nop
    914c:	bd80      	pop	{r7, pc}
    914e:	bf00      	nop
    9150:	20000c18 	.word	0x20000c18
    9154:	00009099 	.word	0x00009099

00009158 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    9158:	b580      	push	{r7, lr}
    915a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    915c:	4b03      	ldr	r3, [pc, #12]	; (916c <TC2_Handler+0x14>)
    915e:	681b      	ldr	r3, [r3, #0]
    9160:	4618      	mov	r0, r3
    9162:	4b03      	ldr	r3, [pc, #12]	; (9170 <TC2_Handler+0x18>)
    9164:	4798      	blx	r3
}
    9166:	bf00      	nop
    9168:	bd80      	pop	{r7, pc}
    916a:	bf00      	nop
    916c:	20000c1c 	.word	0x20000c1c
    9170:	00009099 	.word	0x00009099

00009174 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    9174:	b580      	push	{r7, lr}
    9176:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    9178:	4b03      	ldr	r3, [pc, #12]	; (9188 <TC4_Handler+0x14>)
    917a:	681b      	ldr	r3, [r3, #0]
    917c:	4618      	mov	r0, r3
    917e:	4b03      	ldr	r3, [pc, #12]	; (918c <TC4_Handler+0x18>)
    9180:	4798      	blx	r3
}
    9182:	bf00      	nop
    9184:	bd80      	pop	{r7, pc}
    9186:	bf00      	nop
    9188:	20000c20 	.word	0x20000c20
    918c:	00009099 	.word	0x00009099

00009190 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    9190:	b580      	push	{r7, lr}
    9192:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    9194:	4b03      	ldr	r3, [pc, #12]	; (91a4 <TC5_Handler+0x14>)
    9196:	681b      	ldr	r3, [r3, #0]
    9198:	4618      	mov	r0, r3
    919a:	4b03      	ldr	r3, [pc, #12]	; (91a8 <TC5_Handler+0x18>)
    919c:	4798      	blx	r3
}
    919e:	bf00      	nop
    91a0:	bd80      	pop	{r7, pc}
    91a2:	bf00      	nop
    91a4:	20000c24 	.word	0x20000c24
    91a8:	00009099 	.word	0x00009099

000091ac <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    91ac:	b580      	push	{r7, lr}
    91ae:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    91b0:	4b03      	ldr	r3, [pc, #12]	; (91c0 <TC6_Handler+0x14>)
    91b2:	681b      	ldr	r3, [r3, #0]
    91b4:	4618      	mov	r0, r3
    91b6:	4b03      	ldr	r3, [pc, #12]	; (91c4 <TC6_Handler+0x18>)
    91b8:	4798      	blx	r3
}
    91ba:	bf00      	nop
    91bc:	bd80      	pop	{r7, pc}
    91be:	bf00      	nop
    91c0:	20000c28 	.word	0x20000c28
    91c4:	00009099 	.word	0x00009099

000091c8 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    91c8:	b580      	push	{r7, lr}
    91ca:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    91cc:	4b03      	ldr	r3, [pc, #12]	; (91dc <TC7_Handler+0x14>)
    91ce:	681b      	ldr	r3, [r3, #0]
    91d0:	4618      	mov	r0, r3
    91d2:	4b03      	ldr	r3, [pc, #12]	; (91e0 <TC7_Handler+0x18>)
    91d4:	4798      	blx	r3
}
    91d6:	bf00      	nop
    91d8:	bd80      	pop	{r7, pc}
    91da:	bf00      	nop
    91dc:	20000c2c 	.word	0x20000c2c
    91e0:	000090d1 	.word	0x000090d1

000091e4 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    91e4:	b580      	push	{r7, lr}
    91e6:	b084      	sub	sp, #16
    91e8:	af00      	add	r7, sp, #0
    91ea:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    91ec:	6878      	ldr	r0, [r7, #4]
    91ee:	4b13      	ldr	r3, [pc, #76]	; (923c <get_tc_index+0x58>)
    91f0:	4798      	blx	r3
    91f2:	4603      	mov	r3, r0
    91f4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    91f6:	2300      	movs	r3, #0
    91f8:	73fb      	strb	r3, [r7, #15]
    91fa:	e010      	b.n	921e <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    91fc:	7bfa      	ldrb	r2, [r7, #15]
    91fe:	4910      	ldr	r1, [pc, #64]	; (9240 <get_tc_index+0x5c>)
    9200:	4613      	mov	r3, r2
    9202:	009b      	lsls	r3, r3, #2
    9204:	4413      	add	r3, r2
    9206:	009b      	lsls	r3, r3, #2
    9208:	440b      	add	r3, r1
    920a:	781b      	ldrb	r3, [r3, #0]
    920c:	7bba      	ldrb	r2, [r7, #14]
    920e:	429a      	cmp	r2, r3
    9210:	d102      	bne.n	9218 <get_tc_index+0x34>
			return i;
    9212:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9216:	e00d      	b.n	9234 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    9218:	7bfb      	ldrb	r3, [r7, #15]
    921a:	3301      	adds	r3, #1
    921c:	73fb      	strb	r3, [r7, #15]
    921e:	7bfb      	ldrb	r3, [r7, #15]
    9220:	2b05      	cmp	r3, #5
    9222:	d9eb      	bls.n	91fc <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    9224:	f240 221d 	movw	r2, #541	; 0x21d
    9228:	4906      	ldr	r1, [pc, #24]	; (9244 <get_tc_index+0x60>)
    922a:	2000      	movs	r0, #0
    922c:	4b06      	ldr	r3, [pc, #24]	; (9248 <get_tc_index+0x64>)
    922e:	4798      	blx	r3
	return -1;
    9230:	f04f 33ff 	mov.w	r3, #4294967295
}
    9234:	4618      	mov	r0, r3
    9236:	3710      	adds	r7, #16
    9238:	46bd      	mov	sp, r7
    923a:	bd80      	pop	{r7, pc}
    923c:	000092e9 	.word	0x000092e9
    9240:	200000e0 	.word	0x200000e0
    9244:	000106c0 	.word	0x000106c0
    9248:	00003fd5 	.word	0x00003fd5

0000924c <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    924c:	b480      	push	{r7}
    924e:	b083      	sub	sp, #12
    9250:	af00      	add	r7, sp, #0
    9252:	6078      	str	r0, [r7, #4]
    9254:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    9256:	687b      	ldr	r3, [r7, #4]
    9258:	4a17      	ldr	r2, [pc, #92]	; (92b8 <_tc_init_irq_param+0x6c>)
    925a:	4293      	cmp	r3, r2
    925c:	d102      	bne.n	9264 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    925e:	4a17      	ldr	r2, [pc, #92]	; (92bc <_tc_init_irq_param+0x70>)
    9260:	683b      	ldr	r3, [r7, #0]
    9262:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    9264:	687b      	ldr	r3, [r7, #4]
    9266:	4a16      	ldr	r2, [pc, #88]	; (92c0 <_tc_init_irq_param+0x74>)
    9268:	4293      	cmp	r3, r2
    926a:	d102      	bne.n	9272 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    926c:	4a15      	ldr	r2, [pc, #84]	; (92c4 <_tc_init_irq_param+0x78>)
    926e:	683b      	ldr	r3, [r7, #0]
    9270:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    9272:	687b      	ldr	r3, [r7, #4]
    9274:	4a14      	ldr	r2, [pc, #80]	; (92c8 <_tc_init_irq_param+0x7c>)
    9276:	4293      	cmp	r3, r2
    9278:	d102      	bne.n	9280 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    927a:	4a14      	ldr	r2, [pc, #80]	; (92cc <_tc_init_irq_param+0x80>)
    927c:	683b      	ldr	r3, [r7, #0]
    927e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    9280:	687b      	ldr	r3, [r7, #4]
    9282:	4a13      	ldr	r2, [pc, #76]	; (92d0 <_tc_init_irq_param+0x84>)
    9284:	4293      	cmp	r3, r2
    9286:	d102      	bne.n	928e <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    9288:	4a12      	ldr	r2, [pc, #72]	; (92d4 <_tc_init_irq_param+0x88>)
    928a:	683b      	ldr	r3, [r7, #0]
    928c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    928e:	687b      	ldr	r3, [r7, #4]
    9290:	4a11      	ldr	r2, [pc, #68]	; (92d8 <_tc_init_irq_param+0x8c>)
    9292:	4293      	cmp	r3, r2
    9294:	d102      	bne.n	929c <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    9296:	4a11      	ldr	r2, [pc, #68]	; (92dc <_tc_init_irq_param+0x90>)
    9298:	683b      	ldr	r3, [r7, #0]
    929a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    929c:	687b      	ldr	r3, [r7, #4]
    929e:	4a10      	ldr	r2, [pc, #64]	; (92e0 <_tc_init_irq_param+0x94>)
    92a0:	4293      	cmp	r3, r2
    92a2:	d102      	bne.n	92aa <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    92a4:	4a0f      	ldr	r2, [pc, #60]	; (92e4 <_tc_init_irq_param+0x98>)
    92a6:	683b      	ldr	r3, [r7, #0]
    92a8:	6013      	str	r3, [r2, #0]
	}
}
    92aa:	bf00      	nop
    92ac:	370c      	adds	r7, #12
    92ae:	46bd      	mov	sp, r7
    92b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    92b4:	4770      	bx	lr
    92b6:	bf00      	nop
    92b8:	40003800 	.word	0x40003800
    92bc:	20000c18 	.word	0x20000c18
    92c0:	4101a000 	.word	0x4101a000
    92c4:	20000c1c 	.word	0x20000c1c
    92c8:	42001400 	.word	0x42001400
    92cc:	20000c20 	.word	0x20000c20
    92d0:	42001800 	.word	0x42001800
    92d4:	20000c24 	.word	0x20000c24
    92d8:	43001400 	.word	0x43001400
    92dc:	20000c28 	.word	0x20000c28
    92e0:	43001800 	.word	0x43001800
    92e4:	20000c2c 	.word	0x20000c2c

000092e8 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    92e8:	b4b0      	push	{r4, r5, r7}
    92ea:	b08d      	sub	sp, #52	; 0x34
    92ec:	af00      	add	r7, sp, #0
    92ee:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    92f0:	4b13      	ldr	r3, [pc, #76]	; (9340 <_get_hardware_offset+0x58>)
    92f2:	f107 040c 	add.w	r4, r7, #12
    92f6:	461d      	mov	r5, r3
    92f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    92fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    92fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    9300:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    9304:	2300      	movs	r3, #0
    9306:	62fb      	str	r3, [r7, #44]	; 0x2c
    9308:	e010      	b.n	932c <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    930a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    930c:	009b      	lsls	r3, r3, #2
    930e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    9312:	4413      	add	r3, r2
    9314:	f853 3c24 	ldr.w	r3, [r3, #-36]
    9318:	461a      	mov	r2, r3
    931a:	687b      	ldr	r3, [r7, #4]
    931c:	429a      	cmp	r2, r3
    931e:	d102      	bne.n	9326 <_get_hardware_offset+0x3e>
			return i;
    9320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9322:	b2db      	uxtb	r3, r3
    9324:	e006      	b.n	9334 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    9326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9328:	3301      	adds	r3, #1
    932a:	62fb      	str	r3, [r7, #44]	; 0x2c
    932c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    932e:	2b07      	cmp	r3, #7
    9330:	d9eb      	bls.n	930a <_get_hardware_offset+0x22>
		}
	}
	return 0;
    9332:	2300      	movs	r3, #0
}
    9334:	4618      	mov	r0, r3
    9336:	3734      	adds	r7, #52	; 0x34
    9338:	46bd      	mov	sp, r7
    933a:	bcb0      	pop	{r4, r5, r7}
    933c:	4770      	bx	lr
    933e:	bf00      	nop
    9340:	000106d4 	.word	0x000106d4

00009344 <__NVIC_EnableIRQ>:
{
    9344:	b480      	push	{r7}
    9346:	b083      	sub	sp, #12
    9348:	af00      	add	r7, sp, #0
    934a:	4603      	mov	r3, r0
    934c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    934e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9352:	2b00      	cmp	r3, #0
    9354:	db0b      	blt.n	936e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9356:	4909      	ldr	r1, [pc, #36]	; (937c <__NVIC_EnableIRQ+0x38>)
    9358:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    935c:	095b      	lsrs	r3, r3, #5
    935e:	88fa      	ldrh	r2, [r7, #6]
    9360:	f002 021f 	and.w	r2, r2, #31
    9364:	2001      	movs	r0, #1
    9366:	fa00 f202 	lsl.w	r2, r0, r2
    936a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    936e:	bf00      	nop
    9370:	370c      	adds	r7, #12
    9372:	46bd      	mov	sp, r7
    9374:	f85d 7b04 	ldr.w	r7, [sp], #4
    9378:	4770      	bx	lr
    937a:	bf00      	nop
    937c:	e000e100 	.word	0xe000e100

00009380 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    9380:	b480      	push	{r7}
    9382:	b087      	sub	sp, #28
    9384:	af00      	add	r7, sp, #0
    9386:	60f8      	str	r0, [r7, #12]
    9388:	460b      	mov	r3, r1
    938a:	607a      	str	r2, [r7, #4]
    938c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    938e:	7afa      	ldrb	r2, [r7, #11]
    9390:	68f9      	ldr	r1, [r7, #12]
    9392:	4613      	mov	r3, r2
    9394:	009b      	lsls	r3, r3, #2
    9396:	4413      	add	r3, r2
    9398:	009b      	lsls	r3, r3, #2
    939a:	440b      	add	r3, r1
    939c:	3340      	adds	r3, #64	; 0x40
    939e:	681b      	ldr	r3, [r3, #0]
    93a0:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    93a2:	697a      	ldr	r2, [r7, #20]
    93a4:	687b      	ldr	r3, [r7, #4]
    93a6:	4013      	ands	r3, r2
    93a8:	617b      	str	r3, [r7, #20]
	return tmp;
    93aa:	697b      	ldr	r3, [r7, #20]
}
    93ac:	4618      	mov	r0, r3
    93ae:	371c      	adds	r7, #28
    93b0:	46bd      	mov	sp, r7
    93b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    93b6:	4770      	bx	lr

000093b8 <hri_oscctrl_get_STATUS_reg>:
{
    93b8:	b480      	push	{r7}
    93ba:	b085      	sub	sp, #20
    93bc:	af00      	add	r7, sp, #0
    93be:	6078      	str	r0, [r7, #4]
    93c0:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    93c2:	687b      	ldr	r3, [r7, #4]
    93c4:	691b      	ldr	r3, [r3, #16]
    93c6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    93c8:	68fa      	ldr	r2, [r7, #12]
    93ca:	683b      	ldr	r3, [r7, #0]
    93cc:	4013      	ands	r3, r2
    93ce:	60fb      	str	r3, [r7, #12]
	return tmp;
    93d0:	68fb      	ldr	r3, [r7, #12]
}
    93d2:	4618      	mov	r0, r3
    93d4:	3714      	adds	r7, #20
    93d6:	46bd      	mov	sp, r7
    93d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    93dc:	4770      	bx	lr

000093de <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    93de:	b480      	push	{r7}
    93e0:	b085      	sub	sp, #20
    93e2:	af00      	add	r7, sp, #0
    93e4:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    93e6:	687b      	ldr	r3, [r7, #4]
    93e8:	f893 3020 	ldrb.w	r3, [r3, #32]
    93ec:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    93ee:	7bfb      	ldrb	r3, [r7, #15]
    93f0:	f003 0301 	and.w	r3, r3, #1
    93f4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    93f6:	7bfb      	ldrb	r3, [r7, #15]
    93f8:	2b00      	cmp	r3, #0
    93fa:	bf14      	ite	ne
    93fc:	2301      	movne	r3, #1
    93fe:	2300      	moveq	r3, #0
    9400:	b2db      	uxtb	r3, r3
}
    9402:	4618      	mov	r0, r3
    9404:	3714      	adds	r7, #20
    9406:	46bd      	mov	sp, r7
    9408:	f85d 7b04 	ldr.w	r7, [sp], #4
    940c:	4770      	bx	lr

0000940e <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    940e:	b480      	push	{r7}
    9410:	b083      	sub	sp, #12
    9412:	af00      	add	r7, sp, #0
    9414:	6078      	str	r0, [r7, #4]
    9416:	460b      	mov	r3, r1
    9418:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    941a:	bf00      	nop
    941c:	687b      	ldr	r3, [r7, #4]
    941e:	789b      	ldrb	r3, [r3, #2]
    9420:	b2da      	uxtb	r2, r3
    9422:	78fb      	ldrb	r3, [r7, #3]
    9424:	4013      	ands	r3, r2
    9426:	b2db      	uxtb	r3, r3
    9428:	2b00      	cmp	r3, #0
    942a:	d1f7      	bne.n	941c <hri_usb_wait_for_sync+0xe>
	};
}
    942c:	bf00      	nop
    942e:	370c      	adds	r7, #12
    9430:	46bd      	mov	sp, r7
    9432:	f85d 7b04 	ldr.w	r7, [sp], #4
    9436:	4770      	bx	lr

00009438 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    9438:	b480      	push	{r7}
    943a:	b083      	sub	sp, #12
    943c:	af00      	add	r7, sp, #0
    943e:	6078      	str	r0, [r7, #4]
    9440:	460b      	mov	r3, r1
    9442:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    9444:	687b      	ldr	r3, [r7, #4]
    9446:	789b      	ldrb	r3, [r3, #2]
    9448:	b2da      	uxtb	r2, r3
    944a:	78fb      	ldrb	r3, [r7, #3]
    944c:	4013      	ands	r3, r2
    944e:	b2db      	uxtb	r3, r3
    9450:	2b00      	cmp	r3, #0
    9452:	bf14      	ite	ne
    9454:	2301      	movne	r3, #1
    9456:	2300      	moveq	r3, #0
    9458:	b2db      	uxtb	r3, r3
}
    945a:	4618      	mov	r0, r3
    945c:	370c      	adds	r7, #12
    945e:	46bd      	mov	sp, r7
    9460:	f85d 7b04 	ldr.w	r7, [sp], #4
    9464:	4770      	bx	lr

00009466 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    9466:	b480      	push	{r7}
    9468:	b085      	sub	sp, #20
    946a:	af00      	add	r7, sp, #0
    946c:	6078      	str	r0, [r7, #4]
    946e:	460b      	mov	r3, r1
    9470:	70fb      	strb	r3, [r7, #3]
    9472:	4613      	mov	r3, r2
    9474:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    9476:	78fb      	ldrb	r3, [r7, #3]
    9478:	687a      	ldr	r2, [r7, #4]
    947a:	3308      	adds	r3, #8
    947c:	015b      	lsls	r3, r3, #5
    947e:	4413      	add	r3, r2
    9480:	3307      	adds	r3, #7
    9482:	781b      	ldrb	r3, [r3, #0]
    9484:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    9486:	7bfa      	ldrb	r2, [r7, #15]
    9488:	78bb      	ldrb	r3, [r7, #2]
    948a:	4013      	ands	r3, r2
    948c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    948e:	7bfb      	ldrb	r3, [r7, #15]
}
    9490:	4618      	mov	r0, r3
    9492:	3714      	adds	r7, #20
    9494:	46bd      	mov	sp, r7
    9496:	f85d 7b04 	ldr.w	r7, [sp], #4
    949a:	4770      	bx	lr

0000949c <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    949c:	b480      	push	{r7}
    949e:	b083      	sub	sp, #12
    94a0:	af00      	add	r7, sp, #0
    94a2:	6078      	str	r0, [r7, #4]
    94a4:	460b      	mov	r3, r1
    94a6:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    94a8:	78fb      	ldrb	r3, [r7, #3]
    94aa:	687a      	ldr	r2, [r7, #4]
    94ac:	3308      	adds	r3, #8
    94ae:	015b      	lsls	r3, r3, #5
    94b0:	4413      	add	r3, r2
    94b2:	3307      	adds	r3, #7
    94b4:	781b      	ldrb	r3, [r3, #0]
    94b6:	b2db      	uxtb	r3, r3
}
    94b8:	4618      	mov	r0, r3
    94ba:	370c      	adds	r7, #12
    94bc:	46bd      	mov	sp, r7
    94be:	f85d 7b04 	ldr.w	r7, [sp], #4
    94c2:	4770      	bx	lr

000094c4 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    94c4:	b480      	push	{r7}
    94c6:	b083      	sub	sp, #12
    94c8:	af00      	add	r7, sp, #0
    94ca:	6078      	str	r0, [r7, #4]
    94cc:	460b      	mov	r3, r1
    94ce:	70fb      	strb	r3, [r7, #3]
    94d0:	4613      	mov	r3, r2
    94d2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    94d4:	78fb      	ldrb	r3, [r7, #3]
    94d6:	687a      	ldr	r2, [r7, #4]
    94d8:	3308      	adds	r3, #8
    94da:	015b      	lsls	r3, r3, #5
    94dc:	4413      	add	r3, r2
    94de:	3307      	adds	r3, #7
    94e0:	78ba      	ldrb	r2, [r7, #2]
    94e2:	701a      	strb	r2, [r3, #0]
}
    94e4:	bf00      	nop
    94e6:	370c      	adds	r7, #12
    94e8:	46bd      	mov	sp, r7
    94ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    94ee:	4770      	bx	lr

000094f0 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    94f0:	b480      	push	{r7}
    94f2:	b083      	sub	sp, #12
    94f4:	af00      	add	r7, sp, #0
    94f6:	6078      	str	r0, [r7, #4]
    94f8:	460b      	mov	r3, r1
    94fa:	70fb      	strb	r3, [r7, #3]
    94fc:	4613      	mov	r3, r2
    94fe:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9500:	78fb      	ldrb	r3, [r7, #3]
    9502:	687a      	ldr	r2, [r7, #4]
    9504:	3308      	adds	r3, #8
    9506:	015b      	lsls	r3, r3, #5
    9508:	4413      	add	r3, r2
    950a:	3305      	adds	r3, #5
    950c:	78ba      	ldrb	r2, [r7, #2]
    950e:	701a      	strb	r2, [r3, #0]
}
    9510:	bf00      	nop
    9512:	370c      	adds	r7, #12
    9514:	46bd      	mov	sp, r7
    9516:	f85d 7b04 	ldr.w	r7, [sp], #4
    951a:	4770      	bx	lr

0000951c <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    951c:	b480      	push	{r7}
    951e:	b083      	sub	sp, #12
    9520:	af00      	add	r7, sp, #0
    9522:	6078      	str	r0, [r7, #4]
    9524:	460b      	mov	r3, r1
    9526:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    9528:	78fb      	ldrb	r3, [r7, #3]
    952a:	687a      	ldr	r2, [r7, #4]
    952c:	3308      	adds	r3, #8
    952e:	015b      	lsls	r3, r3, #5
    9530:	4413      	add	r3, r2
    9532:	3306      	adds	r3, #6
    9534:	781b      	ldrb	r3, [r3, #0]
    9536:	b2db      	uxtb	r3, r3
}
    9538:	4618      	mov	r0, r3
    953a:	370c      	adds	r7, #12
    953c:	46bd      	mov	sp, r7
    953e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9542:	4770      	bx	lr

00009544 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    9544:	b480      	push	{r7}
    9546:	b083      	sub	sp, #12
    9548:	af00      	add	r7, sp, #0
    954a:	6078      	str	r0, [r7, #4]
    954c:	460b      	mov	r3, r1
    954e:	70fb      	strb	r3, [r7, #3]
    9550:	4613      	mov	r3, r2
    9552:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    9554:	78fb      	ldrb	r3, [r7, #3]
    9556:	687a      	ldr	r2, [r7, #4]
    9558:	3308      	adds	r3, #8
    955a:	015b      	lsls	r3, r3, #5
    955c:	4413      	add	r3, r2
    955e:	3304      	adds	r3, #4
    9560:	78ba      	ldrb	r2, [r7, #2]
    9562:	701a      	strb	r2, [r3, #0]
}
    9564:	bf00      	nop
    9566:	370c      	adds	r7, #12
    9568:	46bd      	mov	sp, r7
    956a:	f85d 7b04 	ldr.w	r7, [sp], #4
    956e:	4770      	bx	lr

00009570 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    9570:	b480      	push	{r7}
    9572:	b083      	sub	sp, #12
    9574:	af00      	add	r7, sp, #0
    9576:	6078      	str	r0, [r7, #4]
    9578:	460b      	mov	r3, r1
    957a:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    957c:	78fb      	ldrb	r3, [r7, #3]
    957e:	687a      	ldr	r2, [r7, #4]
    9580:	015b      	lsls	r3, r3, #5
    9582:	4413      	add	r3, r2
    9584:	f503 7384 	add.w	r3, r3, #264	; 0x108
    9588:	2210      	movs	r2, #16
    958a:	701a      	strb	r2, [r3, #0]
}
    958c:	bf00      	nop
    958e:	370c      	adds	r7, #12
    9590:	46bd      	mov	sp, r7
    9592:	f85d 7b04 	ldr.w	r7, [sp], #4
    9596:	4770      	bx	lr

00009598 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    9598:	b480      	push	{r7}
    959a:	b083      	sub	sp, #12
    959c:	af00      	add	r7, sp, #0
    959e:	6078      	str	r0, [r7, #4]
    95a0:	460b      	mov	r3, r1
    95a2:	70fb      	strb	r3, [r7, #3]
    95a4:	4613      	mov	r3, r2
    95a6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    95a8:	78fb      	ldrb	r3, [r7, #3]
    95aa:	687a      	ldr	r2, [r7, #4]
    95ac:	015b      	lsls	r3, r3, #5
    95ae:	4413      	add	r3, r2
    95b0:	f203 1309 	addw	r3, r3, #265	; 0x109
    95b4:	78ba      	ldrb	r2, [r7, #2]
    95b6:	701a      	strb	r2, [r3, #0]
}
    95b8:	bf00      	nop
    95ba:	370c      	adds	r7, #12
    95bc:	46bd      	mov	sp, r7
    95be:	f85d 7b04 	ldr.w	r7, [sp], #4
    95c2:	4770      	bx	lr

000095c4 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    95c4:	b480      	push	{r7}
    95c6:	b083      	sub	sp, #12
    95c8:	af00      	add	r7, sp, #0
    95ca:	6078      	str	r0, [r7, #4]
    95cc:	460b      	mov	r3, r1
    95ce:	70fb      	strb	r3, [r7, #3]
    95d0:	4613      	mov	r3, r2
    95d2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    95d4:	78fb      	ldrb	r3, [r7, #3]
    95d6:	687a      	ldr	r2, [r7, #4]
    95d8:	015b      	lsls	r3, r3, #5
    95da:	4413      	add	r3, r2
    95dc:	f503 7384 	add.w	r3, r3, #264	; 0x108
    95e0:	78ba      	ldrb	r2, [r7, #2]
    95e2:	701a      	strb	r2, [r3, #0]
}
    95e4:	bf00      	nop
    95e6:	370c      	adds	r7, #12
    95e8:	46bd      	mov	sp, r7
    95ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    95ee:	4770      	bx	lr

000095f0 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    95f0:	b480      	push	{r7}
    95f2:	b085      	sub	sp, #20
    95f4:	af00      	add	r7, sp, #0
    95f6:	6078      	str	r0, [r7, #4]
    95f8:	460b      	mov	r3, r1
    95fa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    95fc:	78fb      	ldrb	r3, [r7, #3]
    95fe:	687a      	ldr	r2, [r7, #4]
    9600:	3308      	adds	r3, #8
    9602:	015b      	lsls	r3, r3, #5
    9604:	4413      	add	r3, r2
    9606:	781b      	ldrb	r3, [r3, #0]
    9608:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    960a:	7bfb      	ldrb	r3, [r7, #15]
    960c:	f003 0307 	and.w	r3, r3, #7
    9610:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9612:	7bfb      	ldrb	r3, [r7, #15]
}
    9614:	4618      	mov	r0, r3
    9616:	3714      	adds	r7, #20
    9618:	46bd      	mov	sp, r7
    961a:	f85d 7b04 	ldr.w	r7, [sp], #4
    961e:	4770      	bx	lr

00009620 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    9620:	b480      	push	{r7}
    9622:	b085      	sub	sp, #20
    9624:	af00      	add	r7, sp, #0
    9626:	6078      	str	r0, [r7, #4]
    9628:	460b      	mov	r3, r1
    962a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    962c:	78fb      	ldrb	r3, [r7, #3]
    962e:	687a      	ldr	r2, [r7, #4]
    9630:	3308      	adds	r3, #8
    9632:	015b      	lsls	r3, r3, #5
    9634:	4413      	add	r3, r2
    9636:	781b      	ldrb	r3, [r3, #0]
    9638:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    963a:	7bfb      	ldrb	r3, [r7, #15]
    963c:	091b      	lsrs	r3, r3, #4
    963e:	b2db      	uxtb	r3, r3
    9640:	f003 0307 	and.w	r3, r3, #7
    9644:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9646:	7bfb      	ldrb	r3, [r7, #15]
}
    9648:	4618      	mov	r0, r3
    964a:	3714      	adds	r7, #20
    964c:	46bd      	mov	sp, r7
    964e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9652:	4770      	bx	lr

00009654 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    9654:	b480      	push	{r7}
    9656:	b083      	sub	sp, #12
    9658:	af00      	add	r7, sp, #0
    965a:	6078      	str	r0, [r7, #4]
    965c:	460b      	mov	r3, r1
    965e:	70fb      	strb	r3, [r7, #3]
    9660:	4613      	mov	r3, r2
    9662:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    9664:	78fb      	ldrb	r3, [r7, #3]
    9666:	687a      	ldr	r2, [r7, #4]
    9668:	3308      	adds	r3, #8
    966a:	015b      	lsls	r3, r3, #5
    966c:	4413      	add	r3, r2
    966e:	78ba      	ldrb	r2, [r7, #2]
    9670:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    9672:	bf00      	nop
    9674:	370c      	adds	r7, #12
    9676:	46bd      	mov	sp, r7
    9678:	f85d 7b04 	ldr.w	r7, [sp], #4
    967c:	4770      	bx	lr

0000967e <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    967e:	b480      	push	{r7}
    9680:	b083      	sub	sp, #12
    9682:	af00      	add	r7, sp, #0
    9684:	6078      	str	r0, [r7, #4]
    9686:	460b      	mov	r3, r1
    9688:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    968a:	78fb      	ldrb	r3, [r7, #3]
    968c:	687a      	ldr	r2, [r7, #4]
    968e:	3308      	adds	r3, #8
    9690:	015b      	lsls	r3, r3, #5
    9692:	4413      	add	r3, r2
    9694:	781b      	ldrb	r3, [r3, #0]
    9696:	b2db      	uxtb	r3, r3
}
    9698:	4618      	mov	r0, r3
    969a:	370c      	adds	r7, #12
    969c:	46bd      	mov	sp, r7
    969e:	f85d 7b04 	ldr.w	r7, [sp], #4
    96a2:	4770      	bx	lr

000096a4 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    96a4:	b480      	push	{r7}
    96a6:	b083      	sub	sp, #12
    96a8:	af00      	add	r7, sp, #0
    96aa:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    96ac:	687b      	ldr	r3, [r7, #4]
    96ae:	8b9b      	ldrh	r3, [r3, #28]
    96b0:	b29b      	uxth	r3, r3
}
    96b2:	4618      	mov	r0, r3
    96b4:	370c      	adds	r7, #12
    96b6:	46bd      	mov	sp, r7
    96b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    96bc:	4770      	bx	lr

000096be <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    96be:	b480      	push	{r7}
    96c0:	b083      	sub	sp, #12
    96c2:	af00      	add	r7, sp, #0
    96c4:	6078      	str	r0, [r7, #4]
    96c6:	460b      	mov	r3, r1
    96c8:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    96ca:	687b      	ldr	r3, [r7, #4]
    96cc:	887a      	ldrh	r2, [r7, #2]
    96ce:	839a      	strh	r2, [r3, #28]
}
    96d0:	bf00      	nop
    96d2:	370c      	adds	r7, #12
    96d4:	46bd      	mov	sp, r7
    96d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    96da:	4770      	bx	lr

000096dc <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    96dc:	b480      	push	{r7}
    96de:	b083      	sub	sp, #12
    96e0:	af00      	add	r7, sp, #0
    96e2:	6078      	str	r0, [r7, #4]
    96e4:	460b      	mov	r3, r1
    96e6:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    96e8:	687b      	ldr	r3, [r7, #4]
    96ea:	887a      	ldrh	r2, [r7, #2]
    96ec:	831a      	strh	r2, [r3, #24]
}
    96ee:	bf00      	nop
    96f0:	370c      	adds	r7, #12
    96f2:	46bd      	mov	sp, r7
    96f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    96f8:	4770      	bx	lr

000096fa <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    96fa:	b480      	push	{r7}
    96fc:	b083      	sub	sp, #12
    96fe:	af00      	add	r7, sp, #0
    9700:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    9702:	687b      	ldr	r3, [r7, #4]
    9704:	8b1b      	ldrh	r3, [r3, #24]
    9706:	b29b      	uxth	r3, r3
}
    9708:	4618      	mov	r0, r3
    970a:	370c      	adds	r7, #12
    970c:	46bd      	mov	sp, r7
    970e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9712:	4770      	bx	lr

00009714 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    9714:	b480      	push	{r7}
    9716:	b083      	sub	sp, #12
    9718:	af00      	add	r7, sp, #0
    971a:	6078      	str	r0, [r7, #4]
    971c:	460b      	mov	r3, r1
    971e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    9720:	687b      	ldr	r3, [r7, #4]
    9722:	887a      	ldrh	r2, [r7, #2]
    9724:	829a      	strh	r2, [r3, #20]
}
    9726:	bf00      	nop
    9728:	370c      	adds	r7, #12
    972a:	46bd      	mov	sp, r7
    972c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9730:	4770      	bx	lr

00009732 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    9732:	b480      	push	{r7}
    9734:	b085      	sub	sp, #20
    9736:	af00      	add	r7, sp, #0
    9738:	6078      	str	r0, [r7, #4]
    973a:	460b      	mov	r3, r1
    973c:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    973e:	687b      	ldr	r3, [r7, #4]
    9740:	789b      	ldrb	r3, [r3, #2]
    9742:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    9744:	7bfa      	ldrb	r2, [r7, #15]
    9746:	78fb      	ldrb	r3, [r7, #3]
    9748:	4013      	ands	r3, r2
    974a:	73fb      	strb	r3, [r7, #15]
	return tmp;
    974c:	7bfb      	ldrb	r3, [r7, #15]
}
    974e:	4618      	mov	r0, r3
    9750:	3714      	adds	r7, #20
    9752:	46bd      	mov	sp, r7
    9754:	f85d 7b04 	ldr.w	r7, [sp], #4
    9758:	4770      	bx	lr
	...

0000975c <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    975c:	b580      	push	{r7, lr}
    975e:	b082      	sub	sp, #8
    9760:	af00      	add	r7, sp, #0
    9762:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    9764:	687b      	ldr	r3, [r7, #4]
    9766:	781b      	ldrb	r3, [r3, #0]
    9768:	b2db      	uxtb	r3, r3
    976a:	f023 0302 	bic.w	r3, r3, #2
    976e:	b2da      	uxtb	r2, r3
    9770:	687b      	ldr	r3, [r7, #4]
    9772:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    9774:	2103      	movs	r1, #3
    9776:	6878      	ldr	r0, [r7, #4]
    9778:	4b02      	ldr	r3, [pc, #8]	; (9784 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    977a:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    977c:	bf00      	nop
    977e:	3708      	adds	r7, #8
    9780:	46bd      	mov	sp, r7
    9782:	bd80      	pop	{r7, pc}
    9784:	0000940f 	.word	0x0000940f

00009788 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    9788:	b580      	push	{r7, lr}
    978a:	b084      	sub	sp, #16
    978c:	af00      	add	r7, sp, #0
    978e:	6078      	str	r0, [r7, #4]
    9790:	460b      	mov	r3, r1
    9792:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9794:	2103      	movs	r1, #3
    9796:	6878      	ldr	r0, [r7, #4]
    9798:	4b06      	ldr	r3, [pc, #24]	; (97b4 <hri_usb_get_CTRLA_reg+0x2c>)
    979a:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    979c:	687b      	ldr	r3, [r7, #4]
    979e:	781b      	ldrb	r3, [r3, #0]
    97a0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    97a2:	7bfa      	ldrb	r2, [r7, #15]
    97a4:	78fb      	ldrb	r3, [r7, #3]
    97a6:	4013      	ands	r3, r2
    97a8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    97aa:	7bfb      	ldrb	r3, [r7, #15]
}
    97ac:	4618      	mov	r0, r3
    97ae:	3710      	adds	r7, #16
    97b0:	46bd      	mov	sp, r7
    97b2:	bd80      	pop	{r7, pc}
    97b4:	0000940f 	.word	0x0000940f

000097b8 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    97b8:	b580      	push	{r7, lr}
    97ba:	b082      	sub	sp, #8
    97bc:	af00      	add	r7, sp, #0
    97be:	6078      	str	r0, [r7, #4]
    97c0:	460b      	mov	r3, r1
    97c2:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    97c4:	687b      	ldr	r3, [r7, #4]
    97c6:	78fa      	ldrb	r2, [r7, #3]
    97c8:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    97ca:	2103      	movs	r1, #3
    97cc:	6878      	ldr	r0, [r7, #4]
    97ce:	4b03      	ldr	r3, [pc, #12]	; (97dc <hri_usb_write_CTRLA_reg+0x24>)
    97d0:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    97d2:	bf00      	nop
    97d4:	3708      	adds	r7, #8
    97d6:	46bd      	mov	sp, r7
    97d8:	bd80      	pop	{r7, pc}
    97da:	bf00      	nop
    97dc:	0000940f 	.word	0x0000940f

000097e0 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    97e0:	b580      	push	{r7, lr}
    97e2:	b082      	sub	sp, #8
    97e4:	af00      	add	r7, sp, #0
    97e6:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    97e8:	2103      	movs	r1, #3
    97ea:	6878      	ldr	r0, [r7, #4]
    97ec:	4b04      	ldr	r3, [pc, #16]	; (9800 <hri_usb_read_CTRLA_reg+0x20>)
    97ee:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    97f0:	687b      	ldr	r3, [r7, #4]
    97f2:	781b      	ldrb	r3, [r3, #0]
    97f4:	b2db      	uxtb	r3, r3
}
    97f6:	4618      	mov	r0, r3
    97f8:	3708      	adds	r7, #8
    97fa:	46bd      	mov	sp, r7
    97fc:	bd80      	pop	{r7, pc}
    97fe:	bf00      	nop
    9800:	0000940f 	.word	0x0000940f

00009804 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    9804:	b480      	push	{r7}
    9806:	b083      	sub	sp, #12
    9808:	af00      	add	r7, sp, #0
    980a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    980c:	687b      	ldr	r3, [r7, #4]
    980e:	891b      	ldrh	r3, [r3, #8]
    9810:	b29b      	uxth	r3, r3
    9812:	f023 0301 	bic.w	r3, r3, #1
    9816:	b29a      	uxth	r2, r3
    9818:	687b      	ldr	r3, [r7, #4]
    981a:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    981c:	bf00      	nop
    981e:	370c      	adds	r7, #12
    9820:	46bd      	mov	sp, r7
    9822:	f85d 7b04 	ldr.w	r7, [sp], #4
    9826:	4770      	bx	lr

00009828 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    9828:	b480      	push	{r7}
    982a:	b083      	sub	sp, #12
    982c:	af00      	add	r7, sp, #0
    982e:	6078      	str	r0, [r7, #4]
    9830:	460b      	mov	r3, r1
    9832:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    9834:	687b      	ldr	r3, [r7, #4]
    9836:	887a      	ldrh	r2, [r7, #2]
    9838:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    983a:	bf00      	nop
    983c:	370c      	adds	r7, #12
    983e:	46bd      	mov	sp, r7
    9840:	f85d 7b04 	ldr.w	r7, [sp], #4
    9844:	4770      	bx	lr

00009846 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    9846:	b480      	push	{r7}
    9848:	b083      	sub	sp, #12
    984a:	af00      	add	r7, sp, #0
    984c:	6078      	str	r0, [r7, #4]
    984e:	460b      	mov	r3, r1
    9850:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    9852:	687b      	ldr	r3, [r7, #4]
    9854:	78fa      	ldrb	r2, [r7, #3]
    9856:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    9858:	bf00      	nop
    985a:	370c      	adds	r7, #12
    985c:	46bd      	mov	sp, r7
    985e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9862:	4770      	bx	lr

00009864 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    9864:	b480      	push	{r7}
    9866:	b083      	sub	sp, #12
    9868:	af00      	add	r7, sp, #0
    986a:	6078      	str	r0, [r7, #4]
    986c:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    986e:	687b      	ldr	r3, [r7, #4]
    9870:	683a      	ldr	r2, [r7, #0]
    9872:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    9874:	bf00      	nop
    9876:	370c      	adds	r7, #12
    9878:	46bd      	mov	sp, r7
    987a:	f85d 7b04 	ldr.w	r7, [sp], #4
    987e:	4770      	bx	lr

00009880 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    9880:	b480      	push	{r7}
    9882:	b083      	sub	sp, #12
    9884:	af00      	add	r7, sp, #0
    9886:	6078      	str	r0, [r7, #4]
    9888:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    988a:	2300      	movs	r3, #0
}
    988c:	4618      	mov	r0, r3
    988e:	370c      	adds	r7, #12
    9890:	46bd      	mov	sp, r7
    9892:	f85d 7b04 	ldr.w	r7, [sp], #4
    9896:	4770      	bx	lr

00009898 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    9898:	b480      	push	{r7}
    989a:	b085      	sub	sp, #20
    989c:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    989e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    98a2:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    98a4:	4b28      	ldr	r3, [pc, #160]	; (9948 <_usb_load_calib+0xb0>)
    98a6:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    98a8:	f003 031f 	and.w	r3, r3, #31
    98ac:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    98ae:	4b26      	ldr	r3, [pc, #152]	; (9948 <_usb_load_calib+0xb0>)
    98b0:	681b      	ldr	r3, [r3, #0]
    98b2:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    98b4:	f003 031f 	and.w	r3, r3, #31
    98b8:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    98ba:	4b23      	ldr	r3, [pc, #140]	; (9948 <_usb_load_calib+0xb0>)
    98bc:	681b      	ldr	r3, [r3, #0]
    98be:	0a9b      	lsrs	r3, r3, #10
    98c0:	f003 0307 	and.w	r3, r3, #7
    98c4:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    98c6:	68fb      	ldr	r3, [r7, #12]
    98c8:	2b00      	cmp	r3, #0
    98ca:	d002      	beq.n	98d2 <_usb_load_calib+0x3a>
    98cc:	68fb      	ldr	r3, [r7, #12]
    98ce:	2b1f      	cmp	r3, #31
    98d0:	d101      	bne.n	98d6 <_usb_load_calib+0x3e>
		pad_transn = 9;
    98d2:	2309      	movs	r3, #9
    98d4:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    98d6:	68bb      	ldr	r3, [r7, #8]
    98d8:	2b00      	cmp	r3, #0
    98da:	d002      	beq.n	98e2 <_usb_load_calib+0x4a>
    98dc:	68bb      	ldr	r3, [r7, #8]
    98de:	2b1f      	cmp	r3, #31
    98e0:	d101      	bne.n	98e6 <_usb_load_calib+0x4e>
		pad_transp = 25;
    98e2:	2319      	movs	r3, #25
    98e4:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    98e6:	687b      	ldr	r3, [r7, #4]
    98e8:	2b00      	cmp	r3, #0
    98ea:	d002      	beq.n	98f2 <_usb_load_calib+0x5a>
    98ec:	687b      	ldr	r3, [r7, #4]
    98ee:	2b07      	cmp	r3, #7
    98f0:	d101      	bne.n	98f6 <_usb_load_calib+0x5e>
		pad_trim = 6;
    98f2:	2306      	movs	r3, #6
    98f4:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    98f6:	68fb      	ldr	r3, [r7, #12]
    98f8:	b29b      	uxth	r3, r3
    98fa:	019b      	lsls	r3, r3, #6
    98fc:	b29b      	uxth	r3, r3
    98fe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    9902:	b29a      	uxth	r2, r3
    9904:	68bb      	ldr	r3, [r7, #8]
    9906:	b29b      	uxth	r3, r3
    9908:	f003 031f 	and.w	r3, r3, #31
    990c:	b29b      	uxth	r3, r3
    990e:	4313      	orrs	r3, r2
    9910:	b29a      	uxth	r2, r3
    9912:	687b      	ldr	r3, [r7, #4]
    9914:	b29b      	uxth	r3, r3
    9916:	031b      	lsls	r3, r3, #12
    9918:	b29b      	uxth	r3, r3
    991a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    991e:	b29b      	uxth	r3, r3
    9920:	4313      	orrs	r3, r2
    9922:	b29a      	uxth	r2, r3
    9924:	683b      	ldr	r3, [r7, #0]
    9926:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    9928:	683a      	ldr	r2, [r7, #0]
    992a:	78d3      	ldrb	r3, [r2, #3]
    992c:	f043 0303 	orr.w	r3, r3, #3
    9930:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    9932:	683a      	ldr	r2, [r7, #0]
    9934:	78d3      	ldrb	r3, [r2, #3]
    9936:	f043 030c 	orr.w	r3, r3, #12
    993a:	70d3      	strb	r3, [r2, #3]
}
    993c:	bf00      	nop
    993e:	3714      	adds	r7, #20
    9940:	46bd      	mov	sp, r7
    9942:	f85d 7b04 	ldr.w	r7, [sp], #4
    9946:	4770      	bx	lr
    9948:	00800084 	.word	0x00800084

0000994c <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    994c:	b580      	push	{r7, lr}
    994e:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    9950:	bf00      	nop
    9952:	2203      	movs	r2, #3
    9954:	2100      	movs	r1, #0
    9956:	4804      	ldr	r0, [pc, #16]	; (9968 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    9958:	4b04      	ldr	r3, [pc, #16]	; (996c <_usb_d_dev_wait_dpll_rdy+0x20>)
    995a:	4798      	blx	r3
    995c:	4603      	mov	r3, r0
    995e:	2b03      	cmp	r3, #3
    9960:	d1f7      	bne.n	9952 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    9962:	bf00      	nop
    9964:	bd80      	pop	{r7, pc}
    9966:	bf00      	nop
    9968:	40001000 	.word	0x40001000
    996c:	00009381 	.word	0x00009381

00009970 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    9970:	b580      	push	{r7, lr}
    9972:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    9974:	480e      	ldr	r0, [pc, #56]	; (99b0 <_usb_d_dev_wait_dfll_rdy+0x40>)
    9976:	4b0f      	ldr	r3, [pc, #60]	; (99b4 <_usb_d_dev_wait_dfll_rdy+0x44>)
    9978:	4798      	blx	r3
    997a:	4603      	mov	r3, r0
    997c:	2b00      	cmp	r3, #0
    997e:	d00a      	beq.n	9996 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    9980:	bf00      	nop
    9982:	f44f 6110 	mov.w	r1, #2304	; 0x900
    9986:	480a      	ldr	r0, [pc, #40]	; (99b0 <_usb_d_dev_wait_dfll_rdy+0x40>)
    9988:	4b0b      	ldr	r3, [pc, #44]	; (99b8 <_usb_d_dev_wait_dfll_rdy+0x48>)
    998a:	4798      	blx	r3
    998c:	4603      	mov	r3, r0
    998e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    9992:	d1f6      	bne.n	9982 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    9994:	e009      	b.n	99aa <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    9996:	bf00      	nop
    9998:	f44f 7180 	mov.w	r1, #256	; 0x100
    999c:	4804      	ldr	r0, [pc, #16]	; (99b0 <_usb_d_dev_wait_dfll_rdy+0x40>)
    999e:	4b06      	ldr	r3, [pc, #24]	; (99b8 <_usb_d_dev_wait_dfll_rdy+0x48>)
    99a0:	4798      	blx	r3
    99a2:	4603      	mov	r3, r0
    99a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    99a8:	d1f6      	bne.n	9998 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    99aa:	bf00      	nop
    99ac:	bd80      	pop	{r7, pc}
    99ae:	bf00      	nop
    99b0:	40001000 	.word	0x40001000
    99b4:	000093df 	.word	0x000093df
    99b8:	000093b9 	.word	0x000093b9

000099bc <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    99bc:	b580      	push	{r7, lr}
    99be:	b082      	sub	sp, #8
    99c0:	af00      	add	r7, sp, #0
    99c2:	4603      	mov	r3, r0
    99c4:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    99c6:	79fb      	ldrb	r3, [r7, #7]
    99c8:	2b00      	cmp	r3, #0
    99ca:	d102      	bne.n	99d2 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    99cc:	4b05      	ldr	r3, [pc, #20]	; (99e4 <_usb_d_dev_wait_clk_rdy+0x28>)
    99ce:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    99d0:	e004      	b.n	99dc <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    99d2:	79fb      	ldrb	r3, [r7, #7]
    99d4:	2b01      	cmp	r3, #1
    99d6:	d101      	bne.n	99dc <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    99d8:	4b03      	ldr	r3, [pc, #12]	; (99e8 <_usb_d_dev_wait_clk_rdy+0x2c>)
    99da:	4798      	blx	r3
}
    99dc:	bf00      	nop
    99de:	3708      	adds	r7, #8
    99e0:	46bd      	mov	sp, r7
    99e2:	bd80      	pop	{r7, pc}
    99e4:	00009971 	.word	0x00009971
    99e8:	0000994d 	.word	0x0000994d

000099ec <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    99ec:	b580      	push	{r7, lr}
    99ee:	b082      	sub	sp, #8
    99f0:	af00      	add	r7, sp, #0
    99f2:	4603      	mov	r3, r0
    99f4:	6039      	str	r1, [r7, #0]
    99f6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    99f8:	683b      	ldr	r3, [r7, #0]
    99fa:	b2da      	uxtb	r2, r3
    99fc:	79fb      	ldrb	r3, [r7, #7]
    99fe:	4619      	mov	r1, r3
    9a00:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a04:	4b02      	ldr	r3, [pc, #8]	; (9a10 <_usbd_ep_int_ack+0x24>)
    9a06:	4798      	blx	r3
}
    9a08:	bf00      	nop
    9a0a:	3708      	adds	r7, #8
    9a0c:	46bd      	mov	sp, r7
    9a0e:	bd80      	pop	{r7, pc}
    9a10:	000094c5 	.word	0x000094c5

00009a14 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    9a14:	b580      	push	{r7, lr}
    9a16:	b082      	sub	sp, #8
    9a18:	af00      	add	r7, sp, #0
    9a1a:	4603      	mov	r3, r0
    9a1c:	6039      	str	r1, [r7, #0]
    9a1e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    9a20:	683b      	ldr	r3, [r7, #0]
    9a22:	b2da      	uxtb	r2, r3
    9a24:	79fb      	ldrb	r3, [r7, #7]
    9a26:	4619      	mov	r1, r3
    9a28:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a2c:	4b02      	ldr	r3, [pc, #8]	; (9a38 <_usbd_ep_int_en+0x24>)
    9a2e:	4798      	blx	r3
}
    9a30:	bf00      	nop
    9a32:	3708      	adds	r7, #8
    9a34:	46bd      	mov	sp, r7
    9a36:	bd80      	pop	{r7, pc}
    9a38:	00009599 	.word	0x00009599

00009a3c <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    9a3c:	b580      	push	{r7, lr}
    9a3e:	b082      	sub	sp, #8
    9a40:	af00      	add	r7, sp, #0
    9a42:	4603      	mov	r3, r0
    9a44:	6039      	str	r1, [r7, #0]
    9a46:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    9a48:	683b      	ldr	r3, [r7, #0]
    9a4a:	b2da      	uxtb	r2, r3
    9a4c:	79fb      	ldrb	r3, [r7, #7]
    9a4e:	4619      	mov	r1, r3
    9a50:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a54:	4b02      	ldr	r3, [pc, #8]	; (9a60 <_usbd_ep_int_dis+0x24>)
    9a56:	4798      	blx	r3
}
    9a58:	bf00      	nop
    9a5a:	3708      	adds	r7, #8
    9a5c:	46bd      	mov	sp, r7
    9a5e:	bd80      	pop	{r7, pc}
    9a60:	000095c5 	.word	0x000095c5

00009a64 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    9a64:	b580      	push	{r7, lr}
    9a66:	b082      	sub	sp, #8
    9a68:	af00      	add	r7, sp, #0
    9a6a:	4603      	mov	r3, r0
    9a6c:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    9a6e:	79fb      	ldrb	r3, [r7, #7]
    9a70:	4619      	mov	r1, r3
    9a72:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a76:	4b06      	ldr	r3, [pc, #24]	; (9a90 <_usbd_ep_is_ctrl+0x2c>)
    9a78:	4798      	blx	r3
    9a7a:	4603      	mov	r3, r0
    9a7c:	2b11      	cmp	r3, #17
    9a7e:	bf0c      	ite	eq
    9a80:	2301      	moveq	r3, #1
    9a82:	2300      	movne	r3, #0
    9a84:	b2db      	uxtb	r3, r3
}
    9a86:	4618      	mov	r0, r3
    9a88:	3708      	adds	r7, #8
    9a8a:	46bd      	mov	sp, r7
    9a8c:	bd80      	pop	{r7, pc}
    9a8e:	bf00      	nop
    9a90:	0000967f 	.word	0x0000967f

00009a94 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    9a94:	b580      	push	{r7, lr}
    9a96:	b082      	sub	sp, #8
    9a98:	af00      	add	r7, sp, #0
    9a9a:	4603      	mov	r3, r0
    9a9c:	71fb      	strb	r3, [r7, #7]
    9a9e:	460b      	mov	r3, r1
    9aa0:	71bb      	strb	r3, [r7, #6]
    9aa2:	4613      	mov	r3, r2
    9aa4:	717b      	strb	r3, [r7, #5]
	if (st) {
    9aa6:	797b      	ldrb	r3, [r7, #5]
    9aa8:	2b00      	cmp	r3, #0
    9aaa:	d00b      	beq.n	9ac4 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9aac:	79bb      	ldrb	r3, [r7, #6]
    9aae:	2210      	movs	r2, #16
    9ab0:	fa02 f303 	lsl.w	r3, r2, r3
    9ab4:	b2da      	uxtb	r2, r3
    9ab6:	79fb      	ldrb	r3, [r7, #7]
    9ab8:	4619      	mov	r1, r3
    9aba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9abe:	4b09      	ldr	r3, [pc, #36]	; (9ae4 <_usbd_ep_set_stall+0x50>)
    9ac0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    9ac2:	e00a      	b.n	9ada <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9ac4:	79bb      	ldrb	r3, [r7, #6]
    9ac6:	2210      	movs	r2, #16
    9ac8:	fa02 f303 	lsl.w	r3, r2, r3
    9acc:	b2da      	uxtb	r2, r3
    9ace:	79fb      	ldrb	r3, [r7, #7]
    9ad0:	4619      	mov	r1, r3
    9ad2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ad6:	4b04      	ldr	r3, [pc, #16]	; (9ae8 <_usbd_ep_set_stall+0x54>)
    9ad8:	4798      	blx	r3
}
    9ada:	bf00      	nop
    9adc:	3708      	adds	r7, #8
    9ade:	46bd      	mov	sp, r7
    9ae0:	bd80      	pop	{r7, pc}
    9ae2:	bf00      	nop
    9ae4:	000094f1 	.word	0x000094f1
    9ae8:	00009545 	.word	0x00009545

00009aec <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    9aec:	b580      	push	{r7, lr}
    9aee:	b084      	sub	sp, #16
    9af0:	af00      	add	r7, sp, #0
    9af2:	4603      	mov	r3, r0
    9af4:	460a      	mov	r2, r1
    9af6:	71fb      	strb	r3, [r7, #7]
    9af8:	4613      	mov	r3, r2
    9afa:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    9afc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9b00:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9b02:	79fb      	ldrb	r3, [r7, #7]
    9b04:	4619      	mov	r1, r3
    9b06:	68f8      	ldr	r0, [r7, #12]
    9b08:	4b08      	ldr	r3, [pc, #32]	; (9b2c <_usbd_ep_is_stalled+0x40>)
    9b0a:	4798      	blx	r3
    9b0c:	4603      	mov	r3, r0
    9b0e:	4619      	mov	r1, r3
    9b10:	79bb      	ldrb	r3, [r7, #6]
    9b12:	2210      	movs	r2, #16
    9b14:	fa02 f303 	lsl.w	r3, r2, r3
    9b18:	400b      	ands	r3, r1
    9b1a:	2b00      	cmp	r3, #0
    9b1c:	bf14      	ite	ne
    9b1e:	2301      	movne	r3, #1
    9b20:	2300      	moveq	r3, #0
    9b22:	b2db      	uxtb	r3, r3
}
    9b24:	4618      	mov	r0, r3
    9b26:	3710      	adds	r7, #16
    9b28:	46bd      	mov	sp, r7
    9b2a:	bd80      	pop	{r7, pc}
    9b2c:	0000951d 	.word	0x0000951d

00009b30 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    9b30:	b580      	push	{r7, lr}
    9b32:	b084      	sub	sp, #16
    9b34:	af00      	add	r7, sp, #0
    9b36:	4603      	mov	r3, r0
    9b38:	460a      	mov	r2, r1
    9b3a:	71fb      	strb	r3, [r7, #7]
    9b3c:	4613      	mov	r3, r2
    9b3e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    9b40:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9b44:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    9b46:	79fb      	ldrb	r3, [r7, #7]
    9b48:	4619      	mov	r1, r3
    9b4a:	68f8      	ldr	r0, [r7, #12]
    9b4c:	4b08      	ldr	r3, [pc, #32]	; (9b70 <_usbd_ep_is_stall_sent+0x40>)
    9b4e:	4798      	blx	r3
    9b50:	4603      	mov	r3, r0
    9b52:	4619      	mov	r1, r3
    9b54:	79bb      	ldrb	r3, [r7, #6]
    9b56:	2220      	movs	r2, #32
    9b58:	fa02 f303 	lsl.w	r3, r2, r3
    9b5c:	400b      	ands	r3, r1
    9b5e:	2b00      	cmp	r3, #0
    9b60:	bf14      	ite	ne
    9b62:	2301      	movne	r3, #1
    9b64:	2300      	moveq	r3, #0
    9b66:	b2db      	uxtb	r3, r3
}
    9b68:	4618      	mov	r0, r3
    9b6a:	3710      	adds	r7, #16
    9b6c:	46bd      	mov	sp, r7
    9b6e:	bd80      	pop	{r7, pc}
    9b70:	0000949d 	.word	0x0000949d

00009b74 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    9b74:	b580      	push	{r7, lr}
    9b76:	b082      	sub	sp, #8
    9b78:	af00      	add	r7, sp, #0
    9b7a:	4603      	mov	r3, r0
    9b7c:	460a      	mov	r2, r1
    9b7e:	71fb      	strb	r3, [r7, #7]
    9b80:	4613      	mov	r3, r2
    9b82:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    9b84:	79bb      	ldrb	r3, [r7, #6]
    9b86:	2220      	movs	r2, #32
    9b88:	409a      	lsls	r2, r3
    9b8a:	79fb      	ldrb	r3, [r7, #7]
    9b8c:	4611      	mov	r1, r2
    9b8e:	4618      	mov	r0, r3
    9b90:	4b02      	ldr	r3, [pc, #8]	; (9b9c <_usbd_ep_ack_stall+0x28>)
    9b92:	4798      	blx	r3
}
    9b94:	bf00      	nop
    9b96:	3708      	adds	r7, #8
    9b98:	46bd      	mov	sp, r7
    9b9a:	bd80      	pop	{r7, pc}
    9b9c:	000099ed 	.word	0x000099ed

00009ba0 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    9ba0:	b580      	push	{r7, lr}
    9ba2:	b082      	sub	sp, #8
    9ba4:	af00      	add	r7, sp, #0
    9ba6:	4603      	mov	r3, r0
    9ba8:	71fb      	strb	r3, [r7, #7]
    9baa:	460b      	mov	r3, r1
    9bac:	71bb      	strb	r3, [r7, #6]
    9bae:	4613      	mov	r3, r2
    9bb0:	717b      	strb	r3, [r7, #5]
	if (en) {
    9bb2:	797b      	ldrb	r3, [r7, #5]
    9bb4:	2b00      	cmp	r3, #0
    9bb6:	d008      	beq.n	9bca <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9bb8:	79bb      	ldrb	r3, [r7, #6]
    9bba:	2220      	movs	r2, #32
    9bbc:	409a      	lsls	r2, r3
    9bbe:	79fb      	ldrb	r3, [r7, #7]
    9bc0:	4611      	mov	r1, r2
    9bc2:	4618      	mov	r0, r3
    9bc4:	4b07      	ldr	r3, [pc, #28]	; (9be4 <_usbd_ep_int_stall_en+0x44>)
    9bc6:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    9bc8:	e007      	b.n	9bda <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9bca:	79bb      	ldrb	r3, [r7, #6]
    9bcc:	2220      	movs	r2, #32
    9bce:	409a      	lsls	r2, r3
    9bd0:	79fb      	ldrb	r3, [r7, #7]
    9bd2:	4611      	mov	r1, r2
    9bd4:	4618      	mov	r0, r3
    9bd6:	4b04      	ldr	r3, [pc, #16]	; (9be8 <_usbd_ep_int_stall_en+0x48>)
    9bd8:	4798      	blx	r3
}
    9bda:	bf00      	nop
    9bdc:	3708      	adds	r7, #8
    9bde:	46bd      	mov	sp, r7
    9be0:	bd80      	pop	{r7, pc}
    9be2:	bf00      	nop
    9be4:	00009a15 	.word	0x00009a15
    9be8:	00009a3d 	.word	0x00009a3d

00009bec <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    9bec:	b580      	push	{r7, lr}
    9bee:	b082      	sub	sp, #8
    9bf0:	af00      	add	r7, sp, #0
    9bf2:	4603      	mov	r3, r0
    9bf4:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    9bf6:	79fb      	ldrb	r3, [r7, #7]
    9bf8:	4619      	mov	r1, r3
    9bfa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9bfe:	4b03      	ldr	r3, [pc, #12]	; (9c0c <_usbd_ep_stop_setup+0x20>)
    9c00:	4798      	blx	r3
}
    9c02:	bf00      	nop
    9c04:	3708      	adds	r7, #8
    9c06:	46bd      	mov	sp, r7
    9c08:	bd80      	pop	{r7, pc}
    9c0a:	bf00      	nop
    9c0c:	00009571 	.word	0x00009571

00009c10 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    9c10:	b580      	push	{r7, lr}
    9c12:	b082      	sub	sp, #8
    9c14:	af00      	add	r7, sp, #0
    9c16:	4603      	mov	r3, r0
    9c18:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    9c1a:	79fb      	ldrb	r3, [r7, #7]
    9c1c:	2210      	movs	r2, #16
    9c1e:	4619      	mov	r1, r3
    9c20:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c24:	4b05      	ldr	r3, [pc, #20]	; (9c3c <_usbd_ep_is_setup+0x2c>)
    9c26:	4798      	blx	r3
    9c28:	4603      	mov	r3, r0
    9c2a:	2b00      	cmp	r3, #0
    9c2c:	bf14      	ite	ne
    9c2e:	2301      	movne	r3, #1
    9c30:	2300      	moveq	r3, #0
    9c32:	b2db      	uxtb	r3, r3
}
    9c34:	4618      	mov	r0, r3
    9c36:	3708      	adds	r7, #8
    9c38:	46bd      	mov	sp, r7
    9c3a:	bd80      	pop	{r7, pc}
    9c3c:	00009467 	.word	0x00009467

00009c40 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    9c40:	b580      	push	{r7, lr}
    9c42:	b082      	sub	sp, #8
    9c44:	af00      	add	r7, sp, #0
    9c46:	4603      	mov	r3, r0
    9c48:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    9c4a:	79fb      	ldrb	r3, [r7, #7]
    9c4c:	2110      	movs	r1, #16
    9c4e:	4618      	mov	r0, r3
    9c50:	4b02      	ldr	r3, [pc, #8]	; (9c5c <_usbd_ep_ack_setup+0x1c>)
    9c52:	4798      	blx	r3
}
    9c54:	bf00      	nop
    9c56:	3708      	adds	r7, #8
    9c58:	46bd      	mov	sp, r7
    9c5a:	bd80      	pop	{r7, pc}
    9c5c:	000099ed 	.word	0x000099ed

00009c60 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    9c60:	b580      	push	{r7, lr}
    9c62:	b082      	sub	sp, #8
    9c64:	af00      	add	r7, sp, #0
    9c66:	4603      	mov	r3, r0
    9c68:	71fb      	strb	r3, [r7, #7]
    9c6a:	460b      	mov	r3, r1
    9c6c:	71bb      	strb	r3, [r7, #6]
    9c6e:	4613      	mov	r3, r2
    9c70:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    9c72:	797b      	ldrb	r3, [r7, #5]
    9c74:	2b00      	cmp	r3, #0
    9c76:	d00b      	beq.n	9c90 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9c78:	79bb      	ldrb	r3, [r7, #6]
    9c7a:	2201      	movs	r2, #1
    9c7c:	fa02 f303 	lsl.w	r3, r2, r3
    9c80:	b2da      	uxtb	r2, r3
    9c82:	79fb      	ldrb	r3, [r7, #7]
    9c84:	4619      	mov	r1, r3
    9c86:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c8a:	4b09      	ldr	r3, [pc, #36]	; (9cb0 <_usbd_ep_set_toggle+0x50>)
    9c8c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    9c8e:	e00a      	b.n	9ca6 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9c90:	79bb      	ldrb	r3, [r7, #6]
    9c92:	2201      	movs	r2, #1
    9c94:	fa02 f303 	lsl.w	r3, r2, r3
    9c98:	b2da      	uxtb	r2, r3
    9c9a:	79fb      	ldrb	r3, [r7, #7]
    9c9c:	4619      	mov	r1, r3
    9c9e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ca2:	4b04      	ldr	r3, [pc, #16]	; (9cb4 <_usbd_ep_set_toggle+0x54>)
    9ca4:	4798      	blx	r3
}
    9ca6:	bf00      	nop
    9ca8:	3708      	adds	r7, #8
    9caa:	46bd      	mov	sp, r7
    9cac:	bd80      	pop	{r7, pc}
    9cae:	bf00      	nop
    9cb0:	000094f1 	.word	0x000094f1
    9cb4:	00009545 	.word	0x00009545

00009cb8 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    9cb8:	b580      	push	{r7, lr}
    9cba:	b082      	sub	sp, #8
    9cbc:	af00      	add	r7, sp, #0
    9cbe:	4603      	mov	r3, r0
    9cc0:	460a      	mov	r2, r1
    9cc2:	71fb      	strb	r3, [r7, #7]
    9cc4:	4613      	mov	r3, r2
    9cc6:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    9cc8:	79bb      	ldrb	r3, [r7, #6]
    9cca:	2201      	movs	r2, #1
    9ccc:	409a      	lsls	r2, r3
    9cce:	79fb      	ldrb	r3, [r7, #7]
    9cd0:	4611      	mov	r1, r2
    9cd2:	4618      	mov	r0, r3
    9cd4:	4b02      	ldr	r3, [pc, #8]	; (9ce0 <_usbd_ep_ack_io_cpt+0x28>)
    9cd6:	4798      	blx	r3
}
    9cd8:	bf00      	nop
    9cda:	3708      	adds	r7, #8
    9cdc:	46bd      	mov	sp, r7
    9cde:	bd80      	pop	{r7, pc}
    9ce0:	000099ed 	.word	0x000099ed

00009ce4 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    9ce4:	b480      	push	{r7}
    9ce6:	b085      	sub	sp, #20
    9ce8:	af00      	add	r7, sp, #0
    9cea:	4603      	mov	r3, r0
    9cec:	603a      	str	r2, [r7, #0]
    9cee:	71fb      	strb	r3, [r7, #7]
    9cf0:	460b      	mov	r3, r1
    9cf2:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9cf4:	79fa      	ldrb	r2, [r7, #7]
    9cf6:	79bb      	ldrb	r3, [r7, #6]
    9cf8:	0052      	lsls	r2, r2, #1
    9cfa:	4413      	add	r3, r2
    9cfc:	011b      	lsls	r3, r3, #4
    9cfe:	4a06      	ldr	r2, [pc, #24]	; (9d18 <_usbd_ep_set_buf+0x34>)
    9d00:	4413      	add	r3, r2
    9d02:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    9d04:	68fb      	ldr	r3, [r7, #12]
    9d06:	683a      	ldr	r2, [r7, #0]
    9d08:	601a      	str	r2, [r3, #0]
}
    9d0a:	bf00      	nop
    9d0c:	3714      	adds	r7, #20
    9d0e:	46bd      	mov	sp, r7
    9d10:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d14:	4770      	bx	lr
    9d16:	bf00      	nop
    9d18:	20000f38 	.word	0x20000f38

00009d1c <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9d1c:	b480      	push	{r7}
    9d1e:	b085      	sub	sp, #20
    9d20:	af00      	add	r7, sp, #0
    9d22:	4603      	mov	r3, r0
    9d24:	71fb      	strb	r3, [r7, #7]
    9d26:	460b      	mov	r3, r1
    9d28:	71bb      	strb	r3, [r7, #6]
    9d2a:	4613      	mov	r3, r2
    9d2c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9d2e:	79fa      	ldrb	r2, [r7, #7]
    9d30:	79bb      	ldrb	r3, [r7, #6]
    9d32:	0052      	lsls	r2, r2, #1
    9d34:	4413      	add	r3, r2
    9d36:	011b      	lsls	r3, r3, #4
    9d38:	4a08      	ldr	r2, [pc, #32]	; (9d5c <_usbd_ep_set_in_count+0x40>)
    9d3a:	4413      	add	r3, r2
    9d3c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    9d3e:	88bb      	ldrh	r3, [r7, #4]
    9d40:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9d44:	b299      	uxth	r1, r3
    9d46:	68fa      	ldr	r2, [r7, #12]
    9d48:	6853      	ldr	r3, [r2, #4]
    9d4a:	f361 339b 	bfi	r3, r1, #14, #14
    9d4e:	6053      	str	r3, [r2, #4]
}
    9d50:	bf00      	nop
    9d52:	3714      	adds	r7, #20
    9d54:	46bd      	mov	sp, r7
    9d56:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d5a:	4770      	bx	lr
    9d5c:	20000f38 	.word	0x20000f38

00009d60 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9d60:	b480      	push	{r7}
    9d62:	b085      	sub	sp, #20
    9d64:	af00      	add	r7, sp, #0
    9d66:	4603      	mov	r3, r0
    9d68:	71fb      	strb	r3, [r7, #7]
    9d6a:	460b      	mov	r3, r1
    9d6c:	71bb      	strb	r3, [r7, #6]
    9d6e:	4613      	mov	r3, r2
    9d70:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9d72:	79fa      	ldrb	r2, [r7, #7]
    9d74:	79bb      	ldrb	r3, [r7, #6]
    9d76:	0052      	lsls	r2, r2, #1
    9d78:	4413      	add	r3, r2
    9d7a:	011b      	lsls	r3, r3, #4
    9d7c:	4a08      	ldr	r2, [pc, #32]	; (9da0 <_usbd_ep_set_in_size+0x40>)
    9d7e:	4413      	add	r3, r2
    9d80:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    9d82:	88bb      	ldrh	r3, [r7, #4]
    9d84:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9d88:	b299      	uxth	r1, r3
    9d8a:	68fa      	ldr	r2, [r7, #12]
    9d8c:	6853      	ldr	r3, [r2, #4]
    9d8e:	f361 030d 	bfi	r3, r1, #0, #14
    9d92:	6053      	str	r3, [r2, #4]
}
    9d94:	bf00      	nop
    9d96:	3714      	adds	r7, #20
    9d98:	46bd      	mov	sp, r7
    9d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d9e:	4770      	bx	lr
    9da0:	20000f38 	.word	0x20000f38

00009da4 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9da4:	b480      	push	{r7}
    9da6:	b085      	sub	sp, #20
    9da8:	af00      	add	r7, sp, #0
    9daa:	4603      	mov	r3, r0
    9dac:	71fb      	strb	r3, [r7, #7]
    9dae:	460b      	mov	r3, r1
    9db0:	71bb      	strb	r3, [r7, #6]
    9db2:	4613      	mov	r3, r2
    9db4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9db6:	79fa      	ldrb	r2, [r7, #7]
    9db8:	79bb      	ldrb	r3, [r7, #6]
    9dba:	0052      	lsls	r2, r2, #1
    9dbc:	4413      	add	r3, r2
    9dbe:	011b      	lsls	r3, r3, #4
    9dc0:	4a08      	ldr	r2, [pc, #32]	; (9de4 <_usbd_ep_set_out_count+0x40>)
    9dc2:	4413      	add	r3, r2
    9dc4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    9dc6:	88bb      	ldrh	r3, [r7, #4]
    9dc8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9dcc:	b299      	uxth	r1, r3
    9dce:	68fa      	ldr	r2, [r7, #12]
    9dd0:	6853      	ldr	r3, [r2, #4]
    9dd2:	f361 030d 	bfi	r3, r1, #0, #14
    9dd6:	6053      	str	r3, [r2, #4]
}
    9dd8:	bf00      	nop
    9dda:	3714      	adds	r7, #20
    9ddc:	46bd      	mov	sp, r7
    9dde:	f85d 7b04 	ldr.w	r7, [sp], #4
    9de2:	4770      	bx	lr
    9de4:	20000f38 	.word	0x20000f38

00009de8 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9de8:	b480      	push	{r7}
    9dea:	b085      	sub	sp, #20
    9dec:	af00      	add	r7, sp, #0
    9dee:	4603      	mov	r3, r0
    9df0:	71fb      	strb	r3, [r7, #7]
    9df2:	460b      	mov	r3, r1
    9df4:	71bb      	strb	r3, [r7, #6]
    9df6:	4613      	mov	r3, r2
    9df8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9dfa:	79fa      	ldrb	r2, [r7, #7]
    9dfc:	79bb      	ldrb	r3, [r7, #6]
    9dfe:	0052      	lsls	r2, r2, #1
    9e00:	4413      	add	r3, r2
    9e02:	011b      	lsls	r3, r3, #4
    9e04:	4a08      	ldr	r2, [pc, #32]	; (9e28 <_usbd_ep_set_out_size+0x40>)
    9e06:	4413      	add	r3, r2
    9e08:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    9e0a:	88bb      	ldrh	r3, [r7, #4]
    9e0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9e10:	b299      	uxth	r1, r3
    9e12:	68fa      	ldr	r2, [r7, #12]
    9e14:	6853      	ldr	r3, [r2, #4]
    9e16:	f361 339b 	bfi	r3, r1, #14, #14
    9e1a:	6053      	str	r3, [r2, #4]
}
    9e1c:	bf00      	nop
    9e1e:	3714      	adds	r7, #20
    9e20:	46bd      	mov	sp, r7
    9e22:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e26:	4770      	bx	lr
    9e28:	20000f38 	.word	0x20000f38

00009e2c <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9e2c:	b580      	push	{r7, lr}
    9e2e:	b084      	sub	sp, #16
    9e30:	af00      	add	r7, sp, #0
    9e32:	60ba      	str	r2, [r7, #8]
    9e34:	607b      	str	r3, [r7, #4]
    9e36:	4603      	mov	r3, r0
    9e38:	73fb      	strb	r3, [r7, #15]
    9e3a:	460b      	mov	r3, r1
    9e3c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    9e3e:	68bb      	ldr	r3, [r7, #8]
    9e40:	b29a      	uxth	r2, r3
    9e42:	7bb9      	ldrb	r1, [r7, #14]
    9e44:	7bfb      	ldrb	r3, [r7, #15]
    9e46:	4618      	mov	r0, r3
    9e48:	4b06      	ldr	r3, [pc, #24]	; (9e64 <_usbd_ep_set_in_trans+0x38>)
    9e4a:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    9e4c:	687b      	ldr	r3, [r7, #4]
    9e4e:	b29a      	uxth	r2, r3
    9e50:	7bb9      	ldrb	r1, [r7, #14]
    9e52:	7bfb      	ldrb	r3, [r7, #15]
    9e54:	4618      	mov	r0, r3
    9e56:	4b04      	ldr	r3, [pc, #16]	; (9e68 <_usbd_ep_set_in_trans+0x3c>)
    9e58:	4798      	blx	r3
}
    9e5a:	bf00      	nop
    9e5c:	3710      	adds	r7, #16
    9e5e:	46bd      	mov	sp, r7
    9e60:	bd80      	pop	{r7, pc}
    9e62:	bf00      	nop
    9e64:	00009d61 	.word	0x00009d61
    9e68:	00009d1d 	.word	0x00009d1d

00009e6c <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9e6c:	b580      	push	{r7, lr}
    9e6e:	b084      	sub	sp, #16
    9e70:	af00      	add	r7, sp, #0
    9e72:	60ba      	str	r2, [r7, #8]
    9e74:	607b      	str	r3, [r7, #4]
    9e76:	4603      	mov	r3, r0
    9e78:	73fb      	strb	r3, [r7, #15]
    9e7a:	460b      	mov	r3, r1
    9e7c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    9e7e:	68bb      	ldr	r3, [r7, #8]
    9e80:	b29a      	uxth	r2, r3
    9e82:	7bb9      	ldrb	r1, [r7, #14]
    9e84:	7bfb      	ldrb	r3, [r7, #15]
    9e86:	4618      	mov	r0, r3
    9e88:	4b06      	ldr	r3, [pc, #24]	; (9ea4 <_usbd_ep_set_out_trans+0x38>)
    9e8a:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    9e8c:	687b      	ldr	r3, [r7, #4]
    9e8e:	b29a      	uxth	r2, r3
    9e90:	7bb9      	ldrb	r1, [r7, #14]
    9e92:	7bfb      	ldrb	r3, [r7, #15]
    9e94:	4618      	mov	r0, r3
    9e96:	4b04      	ldr	r3, [pc, #16]	; (9ea8 <_usbd_ep_set_out_trans+0x3c>)
    9e98:	4798      	blx	r3
}
    9e9a:	bf00      	nop
    9e9c:	3710      	adds	r7, #16
    9e9e:	46bd      	mov	sp, r7
    9ea0:	bd80      	pop	{r7, pc}
    9ea2:	bf00      	nop
    9ea4:	00009de9 	.word	0x00009de9
    9ea8:	00009da5 	.word	0x00009da5

00009eac <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    9eac:	b480      	push	{r7}
    9eae:	b085      	sub	sp, #20
    9eb0:	af00      	add	r7, sp, #0
    9eb2:	4603      	mov	r3, r0
    9eb4:	460a      	mov	r2, r1
    9eb6:	71fb      	strb	r3, [r7, #7]
    9eb8:	4613      	mov	r3, r2
    9eba:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9ebc:	79fa      	ldrb	r2, [r7, #7]
    9ebe:	79bb      	ldrb	r3, [r7, #6]
    9ec0:	0052      	lsls	r2, r2, #1
    9ec2:	4413      	add	r3, r2
    9ec4:	011b      	lsls	r3, r3, #4
    9ec6:	4a06      	ldr	r2, [pc, #24]	; (9ee0 <_usbd_ep_clear_bank_status+0x34>)
    9ec8:	4413      	add	r3, r2
    9eca:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    9ecc:	68fb      	ldr	r3, [r7, #12]
    9ece:	2200      	movs	r2, #0
    9ed0:	729a      	strb	r2, [r3, #10]
}
    9ed2:	bf00      	nop
    9ed4:	3714      	adds	r7, #20
    9ed6:	46bd      	mov	sp, r7
    9ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
    9edc:	4770      	bx	lr
    9ede:	bf00      	nop
    9ee0:	20000f38 	.word	0x20000f38

00009ee4 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9ee4:	b580      	push	{r7, lr}
    9ee6:	b082      	sub	sp, #8
    9ee8:	af00      	add	r7, sp, #0
    9eea:	4603      	mov	r3, r0
    9eec:	71fb      	strb	r3, [r7, #7]
    9eee:	460b      	mov	r3, r1
    9ef0:	71bb      	strb	r3, [r7, #6]
    9ef2:	4613      	mov	r3, r2
    9ef4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9ef6:	797b      	ldrb	r3, [r7, #5]
    9ef8:	2b00      	cmp	r3, #0
    9efa:	d00b      	beq.n	9f14 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9efc:	79bb      	ldrb	r3, [r7, #6]
    9efe:	2240      	movs	r2, #64	; 0x40
    9f00:	fa02 f303 	lsl.w	r3, r2, r3
    9f04:	b2da      	uxtb	r2, r3
    9f06:	79fb      	ldrb	r3, [r7, #7]
    9f08:	4619      	mov	r1, r3
    9f0a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f0e:	4b09      	ldr	r3, [pc, #36]	; (9f34 <_usbd_ep_set_in_rdy+0x50>)
    9f10:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9f12:	e00a      	b.n	9f2a <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9f14:	79bb      	ldrb	r3, [r7, #6]
    9f16:	2240      	movs	r2, #64	; 0x40
    9f18:	fa02 f303 	lsl.w	r3, r2, r3
    9f1c:	b2da      	uxtb	r2, r3
    9f1e:	79fb      	ldrb	r3, [r7, #7]
    9f20:	4619      	mov	r1, r3
    9f22:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f26:	4b04      	ldr	r3, [pc, #16]	; (9f38 <_usbd_ep_set_in_rdy+0x54>)
    9f28:	4798      	blx	r3
}
    9f2a:	bf00      	nop
    9f2c:	3708      	adds	r7, #8
    9f2e:	46bd      	mov	sp, r7
    9f30:	bd80      	pop	{r7, pc}
    9f32:	bf00      	nop
    9f34:	000094f1 	.word	0x000094f1
    9f38:	00009545 	.word	0x00009545

00009f3c <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9f3c:	b580      	push	{r7, lr}
    9f3e:	b082      	sub	sp, #8
    9f40:	af00      	add	r7, sp, #0
    9f42:	4603      	mov	r3, r0
    9f44:	71fb      	strb	r3, [r7, #7]
    9f46:	460b      	mov	r3, r1
    9f48:	71bb      	strb	r3, [r7, #6]
    9f4a:	4613      	mov	r3, r2
    9f4c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9f4e:	797b      	ldrb	r3, [r7, #5]
    9f50:	2b00      	cmp	r3, #0
    9f52:	d00b      	beq.n	9f6c <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9f54:	79bb      	ldrb	r3, [r7, #6]
    9f56:	2240      	movs	r2, #64	; 0x40
    9f58:	fa02 f303 	lsl.w	r3, r2, r3
    9f5c:	b2da      	uxtb	r2, r3
    9f5e:	79fb      	ldrb	r3, [r7, #7]
    9f60:	4619      	mov	r1, r3
    9f62:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f66:	4b09      	ldr	r3, [pc, #36]	; (9f8c <_usbd_ep_set_out_rdy+0x50>)
    9f68:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9f6a:	e00a      	b.n	9f82 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9f6c:	79bb      	ldrb	r3, [r7, #6]
    9f6e:	2240      	movs	r2, #64	; 0x40
    9f70:	fa02 f303 	lsl.w	r3, r2, r3
    9f74:	b2da      	uxtb	r2, r3
    9f76:	79fb      	ldrb	r3, [r7, #7]
    9f78:	4619      	mov	r1, r3
    9f7a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f7e:	4b04      	ldr	r3, [pc, #16]	; (9f90 <_usbd_ep_set_out_rdy+0x54>)
    9f80:	4798      	blx	r3
}
    9f82:	bf00      	nop
    9f84:	3708      	adds	r7, #8
    9f86:	46bd      	mov	sp, r7
    9f88:	bd80      	pop	{r7, pc}
    9f8a:	bf00      	nop
    9f8c:	00009545 	.word	0x00009545
    9f90:	000094f1 	.word	0x000094f1

00009f94 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9f94:	b480      	push	{r7}
    9f96:	b083      	sub	sp, #12
    9f98:	af00      	add	r7, sp, #0
    9f9a:	4603      	mov	r3, r0
    9f9c:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9f9e:	88fb      	ldrh	r3, [r7, #6]
    9fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9fa4:	d820      	bhi.n	9fe8 <_usbd_ep_pcksize_size+0x54>
    9fa6:	88fb      	ldrh	r3, [r7, #6]
    9fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9fac:	d81a      	bhi.n	9fe4 <_usbd_ep_pcksize_size+0x50>
    9fae:	88fb      	ldrh	r3, [r7, #6]
    9fb0:	2b80      	cmp	r3, #128	; 0x80
    9fb2:	d815      	bhi.n	9fe0 <_usbd_ep_pcksize_size+0x4c>
    9fb4:	88fb      	ldrh	r3, [r7, #6]
    9fb6:	2b40      	cmp	r3, #64	; 0x40
    9fb8:	d810      	bhi.n	9fdc <_usbd_ep_pcksize_size+0x48>
    9fba:	88fb      	ldrh	r3, [r7, #6]
    9fbc:	2b20      	cmp	r3, #32
    9fbe:	d80b      	bhi.n	9fd8 <_usbd_ep_pcksize_size+0x44>
    9fc0:	88fb      	ldrh	r3, [r7, #6]
    9fc2:	2b10      	cmp	r3, #16
    9fc4:	d806      	bhi.n	9fd4 <_usbd_ep_pcksize_size+0x40>
    9fc6:	88fb      	ldrh	r3, [r7, #6]
    9fc8:	2b08      	cmp	r3, #8
    9fca:	bf8c      	ite	hi
    9fcc:	2301      	movhi	r3, #1
    9fce:	2300      	movls	r3, #0
    9fd0:	b2db      	uxtb	r3, r3
    9fd2:	e00a      	b.n	9fea <_usbd_ep_pcksize_size+0x56>
    9fd4:	2302      	movs	r3, #2
    9fd6:	e008      	b.n	9fea <_usbd_ep_pcksize_size+0x56>
    9fd8:	2303      	movs	r3, #3
    9fda:	e006      	b.n	9fea <_usbd_ep_pcksize_size+0x56>
    9fdc:	2304      	movs	r3, #4
    9fde:	e004      	b.n	9fea <_usbd_ep_pcksize_size+0x56>
    9fe0:	2305      	movs	r3, #5
    9fe2:	e002      	b.n	9fea <_usbd_ep_pcksize_size+0x56>
    9fe4:	2306      	movs	r3, #6
    9fe6:	e000      	b.n	9fea <_usbd_ep_pcksize_size+0x56>
    9fe8:	2307      	movs	r3, #7
}
    9fea:	4618      	mov	r0, r3
    9fec:	370c      	adds	r7, #12
    9fee:	46bd      	mov	sp, r7
    9ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ff4:	4770      	bx	lr
	...

00009ff8 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9ff8:	b480      	push	{r7}
    9ffa:	b085      	sub	sp, #20
    9ffc:	af00      	add	r7, sp, #0
    9ffe:	4603      	mov	r3, r0
    a000:	460a      	mov	r2, r1
    a002:	71fb      	strb	r3, [r7, #7]
    a004:	4613      	mov	r3, r2
    a006:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    a008:	79fb      	ldrb	r3, [r7, #7]
    a00a:	2b00      	cmp	r3, #0
    a00c:	d008      	beq.n	a020 <_usb_d_dev_ept+0x28>
    a00e:	79bb      	ldrb	r3, [r7, #6]
    a010:	2b00      	cmp	r3, #0
    a012:	d003      	beq.n	a01c <_usb_d_dev_ept+0x24>
    a014:	79fb      	ldrb	r3, [r7, #7]
    a016:	3304      	adds	r3, #4
    a018:	b2db      	uxtb	r3, r3
    a01a:	e002      	b.n	a022 <_usb_d_dev_ept+0x2a>
    a01c:	79fb      	ldrb	r3, [r7, #7]
    a01e:	e000      	b.n	a022 <_usb_d_dev_ept+0x2a>
    a020:	2300      	movs	r3, #0
    a022:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    a024:	7bfa      	ldrb	r2, [r7, #15]
    a026:	4613      	mov	r3, r2
    a028:	009b      	lsls	r3, r3, #2
    a02a:	4413      	add	r3, r2
    a02c:	009b      	lsls	r3, r3, #2
    a02e:	3310      	adds	r3, #16
    a030:	4a04      	ldr	r2, [pc, #16]	; (a044 <_usb_d_dev_ept+0x4c>)
    a032:	4413      	add	r3, r2
    a034:	3304      	adds	r3, #4
}
    a036:	4618      	mov	r0, r3
    a038:	3714      	adds	r7, #20
    a03a:	46bd      	mov	sp, r7
    a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a040:	4770      	bx	lr
    a042:	bf00      	nop
    a044:	20000e70 	.word	0x20000e70

0000a048 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    a048:	b580      	push	{r7, lr}
    a04a:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    a04c:	2104      	movs	r1, #4
    a04e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a052:	4b03      	ldr	r3, [pc, #12]	; (a060 <_usb_d_dev_sof+0x18>)
    a054:	4798      	blx	r3
	dev_inst.callbacks.sof();
    a056:	4b03      	ldr	r3, [pc, #12]	; (a064 <_usb_d_dev_sof+0x1c>)
    a058:	681b      	ldr	r3, [r3, #0]
    a05a:	4798      	blx	r3
}
    a05c:	bf00      	nop
    a05e:	bd80      	pop	{r7, pc}
    a060:	000096bf 	.word	0x000096bf
    a064:	20000e70 	.word	0x20000e70

0000a068 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    a068:	b580      	push	{r7, lr}
    a06a:	b084      	sub	sp, #16
    a06c:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    a06e:	2300      	movs	r3, #0
    a070:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a072:	f240 2101 	movw	r1, #513	; 0x201
    a076:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a07a:	4b1a      	ldr	r3, [pc, #104]	; (a0e4 <_usb_d_dev_lpmsusp+0x7c>)
    a07c:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a07e:	f240 2101 	movw	r1, #513	; 0x201
    a082:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a086:	4b18      	ldr	r3, [pc, #96]	; (a0e8 <_usb_d_dev_lpmsusp+0x80>)
    a088:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a08a:	2170      	movs	r1, #112	; 0x70
    a08c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a090:	4b16      	ldr	r3, [pc, #88]	; (a0ec <_usb_d_dev_lpmsusp+0x84>)
    a092:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    a094:	2300      	movs	r3, #0
    a096:	73fb      	strb	r3, [r7, #15]
    a098:	e018      	b.n	a0cc <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    a09a:	7bfb      	ldrb	r3, [r7, #15]
    a09c:	015b      	lsls	r3, r3, #5
    a09e:	4a14      	ldr	r2, [pc, #80]	; (a0f0 <_usb_d_dev_lpmsusp+0x88>)
    a0a0:	4413      	add	r3, r2
    a0a2:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    a0a4:	687b      	ldr	r3, [r7, #4]
    a0a6:	891b      	ldrh	r3, [r3, #8]
    a0a8:	f3c3 0303 	ubfx	r3, r3, #0, #4
    a0ac:	b2db      	uxtb	r3, r3
    a0ae:	2b03      	cmp	r3, #3
    a0b0:	d109      	bne.n	a0c6 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    a0b2:	687b      	ldr	r3, [r7, #4]
    a0b4:	891b      	ldrh	r3, [r3, #8]
    a0b6:	f3c3 130a 	ubfx	r3, r3, #4, #11
    a0ba:	b29b      	uxth	r3, r3
    a0bc:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    a0be:	687b      	ldr	r3, [r7, #4]
    a0c0:	2200      	movs	r2, #0
    a0c2:	811a      	strh	r2, [r3, #8]
			break;
    a0c4:	e005      	b.n	a0d2 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    a0c6:	7bfb      	ldrb	r3, [r7, #15]
    a0c8:	3301      	adds	r3, #1
    a0ca:	73fb      	strb	r3, [r7, #15]
    a0cc:	7bfb      	ldrb	r3, [r7, #15]
    a0ce:	2b03      	cmp	r3, #3
    a0d0:	d9e3      	bls.n	a09a <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    a0d2:	4b08      	ldr	r3, [pc, #32]	; (a0f4 <_usb_d_dev_lpmsusp+0x8c>)
    a0d4:	685b      	ldr	r3, [r3, #4]
    a0d6:	68b9      	ldr	r1, [r7, #8]
    a0d8:	2003      	movs	r0, #3
    a0da:	4798      	blx	r3
}
    a0dc:	bf00      	nop
    a0de:	3710      	adds	r7, #16
    a0e0:	46bd      	mov	sp, r7
    a0e2:	bd80      	pop	{r7, pc}
    a0e4:	000096bf 	.word	0x000096bf
    a0e8:	00009715 	.word	0x00009715
    a0ec:	000096dd 	.word	0x000096dd
    a0f0:	20000f38 	.word	0x20000f38
    a0f4:	20000e70 	.word	0x20000e70

0000a0f8 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    a0f8:	b580      	push	{r7, lr}
    a0fa:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    a0fc:	2180      	movs	r1, #128	; 0x80
    a0fe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a102:	4b04      	ldr	r3, [pc, #16]	; (a114 <_usb_d_dev_ramerr+0x1c>)
    a104:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    a106:	4b04      	ldr	r3, [pc, #16]	; (a118 <_usb_d_dev_ramerr+0x20>)
    a108:	685b      	ldr	r3, [r3, #4]
    a10a:	2100      	movs	r1, #0
    a10c:	2005      	movs	r0, #5
    a10e:	4798      	blx	r3
}
    a110:	bf00      	nop
    a112:	bd80      	pop	{r7, pc}
    a114:	000096bf 	.word	0x000096bf
    a118:	20000e70 	.word	0x20000e70

0000a11c <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    a11c:	b580      	push	{r7, lr}
    a11e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a120:	2170      	movs	r1, #112	; 0x70
    a122:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a126:	4b0b      	ldr	r3, [pc, #44]	; (a154 <_usb_d_dev_wakeup+0x38>)
    a128:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a12a:	2170      	movs	r1, #112	; 0x70
    a12c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a130:	4b09      	ldr	r3, [pc, #36]	; (a158 <_usb_d_dev_wakeup+0x3c>)
    a132:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a134:	f240 2101 	movw	r1, #513	; 0x201
    a138:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a13c:	4b07      	ldr	r3, [pc, #28]	; (a15c <_usb_d_dev_wakeup+0x40>)
    a13e:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    a140:	2000      	movs	r0, #0
    a142:	4b07      	ldr	r3, [pc, #28]	; (a160 <_usb_d_dev_wakeup+0x44>)
    a144:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    a146:	4b07      	ldr	r3, [pc, #28]	; (a164 <_usb_d_dev_wakeup+0x48>)
    a148:	685b      	ldr	r3, [r3, #4]
    a14a:	2100      	movs	r1, #0
    a14c:	2002      	movs	r0, #2
    a14e:	4798      	blx	r3
}
    a150:	bf00      	nop
    a152:	bd80      	pop	{r7, pc}
    a154:	000096bf 	.word	0x000096bf
    a158:	00009715 	.word	0x00009715
    a15c:	000096dd 	.word	0x000096dd
    a160:	000099bd 	.word	0x000099bd
    a164:	20000e70 	.word	0x20000e70

0000a168 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    a168:	b580      	push	{r7, lr}
    a16a:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    a16c:	2200      	movs	r2, #0
    a16e:	2100      	movs	r1, #0
    a170:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a174:	4b0d      	ldr	r3, [pc, #52]	; (a1ac <_usb_d_dev_reset+0x44>)
    a176:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    a178:	2108      	movs	r1, #8
    a17a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a17e:	4b0c      	ldr	r3, [pc, #48]	; (a1b0 <_usb_d_dev_reset+0x48>)
    a180:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a182:	2170      	movs	r1, #112	; 0x70
    a184:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a188:	4b0a      	ldr	r3, [pc, #40]	; (a1b4 <_usb_d_dev_reset+0x4c>)
    a18a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a18c:	f240 2101 	movw	r1, #513	; 0x201
    a190:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a194:	4b08      	ldr	r3, [pc, #32]	; (a1b8 <_usb_d_dev_reset+0x50>)
    a196:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    a198:	4b08      	ldr	r3, [pc, #32]	; (a1bc <_usb_d_dev_reset+0x54>)
    a19a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    a19c:	4b08      	ldr	r3, [pc, #32]	; (a1c0 <_usb_d_dev_reset+0x58>)
    a19e:	685b      	ldr	r3, [r3, #4]
    a1a0:	2100      	movs	r1, #0
    a1a2:	2001      	movs	r0, #1
    a1a4:	4798      	blx	r3
}
    a1a6:	bf00      	nop
    a1a8:	bd80      	pop	{r7, pc}
    a1aa:	bf00      	nop
    a1ac:	00009655 	.word	0x00009655
    a1b0:	000096bf 	.word	0x000096bf
    a1b4:	00009715 	.word	0x00009715
    a1b8:	000096dd 	.word	0x000096dd
    a1bc:	0000ad25 	.word	0x0000ad25
    a1c0:	20000e70 	.word	0x20000e70

0000a1c4 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    a1c4:	b580      	push	{r7, lr}
    a1c6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a1c8:	f240 2101 	movw	r1, #513	; 0x201
    a1cc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a1d0:	4b09      	ldr	r3, [pc, #36]	; (a1f8 <_usb_d_dev_suspend+0x34>)
    a1d2:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a1d4:	f240 2101 	movw	r1, #513	; 0x201
    a1d8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a1dc:	4b07      	ldr	r3, [pc, #28]	; (a1fc <_usb_d_dev_suspend+0x38>)
    a1de:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a1e0:	2170      	movs	r1, #112	; 0x70
    a1e2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a1e6:	4b06      	ldr	r3, [pc, #24]	; (a200 <_usb_d_dev_suspend+0x3c>)
    a1e8:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    a1ea:	4b06      	ldr	r3, [pc, #24]	; (a204 <_usb_d_dev_suspend+0x40>)
    a1ec:	685b      	ldr	r3, [r3, #4]
    a1ee:	2100      	movs	r1, #0
    a1f0:	2004      	movs	r0, #4
    a1f2:	4798      	blx	r3
}
    a1f4:	bf00      	nop
    a1f6:	bd80      	pop	{r7, pc}
    a1f8:	000096bf 	.word	0x000096bf
    a1fc:	00009715 	.word	0x00009715
    a200:	000096dd 	.word	0x000096dd
    a204:	20000e70 	.word	0x20000e70

0000a208 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    a208:	b580      	push	{r7, lr}
    a20a:	b082      	sub	sp, #8
    a20c:	af00      	add	r7, sp, #0
	bool     rc    = true;
    a20e:	2301      	movs	r3, #1
    a210:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    a212:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a216:	4b22      	ldr	r3, [pc, #136]	; (a2a0 <_usb_d_dev_handle_nep+0x98>)
    a218:	4798      	blx	r3
    a21a:	4603      	mov	r3, r0
    a21c:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    a21e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a222:	4b20      	ldr	r3, [pc, #128]	; (a2a4 <_usb_d_dev_handle_nep+0x9c>)
    a224:	4798      	blx	r3
    a226:	4603      	mov	r3, r0
    a228:	461a      	mov	r2, r3
    a22a:	88bb      	ldrh	r3, [r7, #4]
    a22c:	4013      	ands	r3, r2
    a22e:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    a230:	88bb      	ldrh	r3, [r7, #4]
    a232:	f003 0304 	and.w	r3, r3, #4
    a236:	2b00      	cmp	r3, #0
    a238:	d003      	beq.n	a242 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    a23a:	4b1b      	ldr	r3, [pc, #108]	; (a2a8 <_usb_d_dev_handle_nep+0xa0>)
    a23c:	4798      	blx	r3
		return true;
    a23e:	2301      	movs	r3, #1
    a240:	e02a      	b.n	a298 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    a242:	88bb      	ldrh	r3, [r7, #4]
    a244:	f403 7300 	and.w	r3, r3, #512	; 0x200
    a248:	2b00      	cmp	r3, #0
    a24a:	d002      	beq.n	a252 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    a24c:	4b17      	ldr	r3, [pc, #92]	; (a2ac <_usb_d_dev_handle_nep+0xa4>)
    a24e:	4798      	blx	r3
    a250:	e021      	b.n	a296 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    a252:	88bb      	ldrh	r3, [r7, #4]
    a254:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a258:	2b00      	cmp	r3, #0
    a25a:	d002      	beq.n	a262 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    a25c:	4b14      	ldr	r3, [pc, #80]	; (a2b0 <_usb_d_dev_handle_nep+0xa8>)
    a25e:	4798      	blx	r3
    a260:	e019      	b.n	a296 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    a262:	88bb      	ldrh	r3, [r7, #4]
    a264:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a268:	2b00      	cmp	r3, #0
    a26a:	d002      	beq.n	a272 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    a26c:	4b11      	ldr	r3, [pc, #68]	; (a2b4 <_usb_d_dev_handle_nep+0xac>)
    a26e:	4798      	blx	r3
    a270:	e011      	b.n	a296 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    a272:	88bb      	ldrh	r3, [r7, #4]
    a274:	f003 0308 	and.w	r3, r3, #8
    a278:	2b00      	cmp	r3, #0
    a27a:	d002      	beq.n	a282 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    a27c:	4b0e      	ldr	r3, [pc, #56]	; (a2b8 <_usb_d_dev_handle_nep+0xb0>)
    a27e:	4798      	blx	r3
    a280:	e009      	b.n	a296 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    a282:	88bb      	ldrh	r3, [r7, #4]
    a284:	f003 0301 	and.w	r3, r3, #1
    a288:	2b00      	cmp	r3, #0
    a28a:	d002      	beq.n	a292 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    a28c:	4b0b      	ldr	r3, [pc, #44]	; (a2bc <_usb_d_dev_handle_nep+0xb4>)
    a28e:	4798      	blx	r3
    a290:	e001      	b.n	a296 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    a292:	2300      	movs	r3, #0
    a294:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    a296:	79fb      	ldrb	r3, [r7, #7]
}
    a298:	4618      	mov	r0, r3
    a29a:	3708      	adds	r7, #8
    a29c:	46bd      	mov	sp, r7
    a29e:	bd80      	pop	{r7, pc}
    a2a0:	000096a5 	.word	0x000096a5
    a2a4:	000096fb 	.word	0x000096fb
    a2a8:	0000a049 	.word	0x0000a049
    a2ac:	0000a069 	.word	0x0000a069
    a2b0:	0000a0f9 	.word	0x0000a0f9
    a2b4:	0000a11d 	.word	0x0000a11d
    a2b8:	0000a169 	.word	0x0000a169
    a2bc:	0000a1c5 	.word	0x0000a1c5

0000a2c0 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    a2c0:	b590      	push	{r4, r7, lr}
    a2c2:	b089      	sub	sp, #36	; 0x24
    a2c4:	af00      	add	r7, sp, #0
    a2c6:	6078      	str	r0, [r7, #4]
    a2c8:	460b      	mov	r3, r1
    a2ca:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    a2cc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a2d0:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    a2d2:	687b      	ldr	r3, [r7, #4]
    a2d4:	7c9b      	ldrb	r3, [r3, #18]
    a2d6:	f003 030f 	and.w	r3, r3, #15
    a2da:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    a2dc:	7dfb      	ldrb	r3, [r7, #23]
    a2de:	015b      	lsls	r3, r3, #5
    a2e0:	4a73      	ldr	r2, [pc, #460]	; (a4b0 <_usb_d_dev_in_next+0x1f0>)
    a2e2:	4413      	add	r3, r2
    a2e4:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    a2e6:	78fb      	ldrb	r3, [r7, #3]
    a2e8:	2b00      	cmp	r3, #0
    a2ea:	d006      	beq.n	a2fa <_usb_d_dev_in_next+0x3a>
    a2ec:	693b      	ldr	r3, [r7, #16]
    a2ee:	3310      	adds	r3, #16
    a2f0:	685b      	ldr	r3, [r3, #4]
    a2f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a2f6:	b29b      	uxth	r3, r3
    a2f8:	e000      	b.n	a2fc <_usb_d_dev_in_next+0x3c>
    a2fa:	2300      	movs	r3, #0
    a2fc:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    a2fe:	687b      	ldr	r3, [r7, #4]
    a300:	8a1b      	ldrh	r3, [r3, #16]
    a302:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a306:	4293      	cmp	r3, r2
    a308:	d103      	bne.n	a312 <_usb_d_dev_in_next+0x52>
    a30a:	687b      	ldr	r3, [r7, #4]
    a30c:	8a1b      	ldrh	r3, [r3, #16]
    a30e:	b21b      	sxth	r3, r3
    a310:	e004      	b.n	a31c <_usb_d_dev_in_next+0x5c>
    a312:	687b      	ldr	r3, [r7, #4]
    a314:	8a1b      	ldrh	r3, [r3, #16]
    a316:	3b01      	subs	r3, #1
    a318:	b29b      	uxth	r3, r3
    a31a:	b21b      	sxth	r3, r3
    a31c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    a320:	4013      	ands	r3, r2
    a322:	b21b      	sxth	r3, r3
    a324:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    a326:	2300      	movs	r3, #0
    a328:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    a32a:	687b      	ldr	r3, [r7, #4]
    a32c:	7cdb      	ldrb	r3, [r3, #19]
    a32e:	f003 0307 	and.w	r3, r3, #7
    a332:	b2db      	uxtb	r3, r3
    a334:	2b01      	cmp	r3, #1
    a336:	bf0c      	ite	eq
    a338:	2301      	moveq	r3, #1
    a33a:	2300      	movne	r3, #0
    a33c:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    a33e:	78fb      	ldrb	r3, [r7, #3]
    a340:	2b00      	cmp	r3, #0
    a342:	d004      	beq.n	a34e <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    a344:	7dfb      	ldrb	r3, [r7, #23]
    a346:	2101      	movs	r1, #1
    a348:	4618      	mov	r0, r3
    a34a:	4b5a      	ldr	r3, [pc, #360]	; (a4b4 <_usb_d_dev_in_next+0x1f4>)
    a34c:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    a34e:	687b      	ldr	r3, [r7, #4]
    a350:	689a      	ldr	r2, [r3, #8]
    a352:	89fb      	ldrh	r3, [r7, #14]
    a354:	441a      	add	r2, r3
    a356:	687b      	ldr	r3, [r7, #4]
    a358:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    a35a:	687b      	ldr	r3, [r7, #4]
    a35c:	689a      	ldr	r2, [r3, #8]
    a35e:	687b      	ldr	r3, [r7, #4]
    a360:	685b      	ldr	r3, [r3, #4]
    a362:	429a      	cmp	r2, r3
    a364:	d243      	bcs.n	a3ee <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    a366:	687b      	ldr	r3, [r7, #4]
    a368:	685b      	ldr	r3, [r3, #4]
    a36a:	b29a      	uxth	r2, r3
    a36c:	687b      	ldr	r3, [r7, #4]
    a36e:	689b      	ldr	r3, [r3, #8]
    a370:	b29b      	uxth	r3, r3
    a372:	1ad3      	subs	r3, r2, r3
    a374:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    a376:	687b      	ldr	r3, [r7, #4]
    a378:	7cdb      	ldrb	r3, [r3, #19]
    a37a:	f003 0320 	and.w	r3, r3, #32
    a37e:	b2db      	uxtb	r3, r3
    a380:	2b00      	cmp	r3, #0
    a382:	d01b      	beq.n	a3bc <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    a384:	687b      	ldr	r3, [r7, #4]
    a386:	8a1b      	ldrh	r3, [r3, #16]
    a388:	8bfa      	ldrh	r2, [r7, #30]
    a38a:	429a      	cmp	r2, r3
    a38c:	d902      	bls.n	a394 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    a38e:	687b      	ldr	r3, [r7, #4]
    a390:	8a1b      	ldrh	r3, [r3, #16]
    a392:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    a394:	687b      	ldr	r3, [r7, #4]
    a396:	68d8      	ldr	r0, [r3, #12]
    a398:	687b      	ldr	r3, [r7, #4]
    a39a:	681a      	ldr	r2, [r3, #0]
    a39c:	687b      	ldr	r3, [r7, #4]
    a39e:	689b      	ldr	r3, [r3, #8]
    a3a0:	4413      	add	r3, r2
    a3a2:	8bfa      	ldrh	r2, [r7, #30]
    a3a4:	4619      	mov	r1, r3
    a3a6:	4b44      	ldr	r3, [pc, #272]	; (a4b8 <_usb_d_dev_in_next+0x1f8>)
    a3a8:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    a3aa:	687b      	ldr	r3, [r7, #4]
    a3ac:	68db      	ldr	r3, [r3, #12]
    a3ae:	461a      	mov	r2, r3
    a3b0:	7dfb      	ldrb	r3, [r7, #23]
    a3b2:	2101      	movs	r1, #1
    a3b4:	4618      	mov	r0, r3
    a3b6:	4b41      	ldr	r3, [pc, #260]	; (a4bc <_usb_d_dev_in_next+0x1fc>)
    a3b8:	4798      	blx	r3
    a3ba:	e011      	b.n	a3e0 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    a3bc:	8bfb      	ldrh	r3, [r7, #30]
    a3be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    a3c2:	d902      	bls.n	a3ca <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    a3c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a3c8:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a3ca:	687b      	ldr	r3, [r7, #4]
    a3cc:	681a      	ldr	r2, [r3, #0]
    a3ce:	687b      	ldr	r3, [r7, #4]
    a3d0:	689b      	ldr	r3, [r3, #8]
    a3d2:	4413      	add	r3, r2
    a3d4:	461a      	mov	r2, r3
    a3d6:	7dfb      	ldrb	r3, [r7, #23]
    a3d8:	2101      	movs	r1, #1
    a3da:	4618      	mov	r0, r3
    a3dc:	4b37      	ldr	r3, [pc, #220]	; (a4bc <_usb_d_dev_in_next+0x1fc>)
    a3de:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    a3e0:	8bfa      	ldrh	r2, [r7, #30]
    a3e2:	7df8      	ldrb	r0, [r7, #23]
    a3e4:	2300      	movs	r3, #0
    a3e6:	2101      	movs	r1, #1
    a3e8:	4c35      	ldr	r4, [pc, #212]	; (a4c0 <_usb_d_dev_in_next+0x200>)
    a3ea:	47a0      	blx	r4
		goto _in_tx_exec;
    a3ec:	e041      	b.n	a472 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    a3ee:	687b      	ldr	r3, [r7, #4]
    a3f0:	7cdb      	ldrb	r3, [r3, #19]
    a3f2:	f003 0310 	and.w	r3, r3, #16
    a3f6:	b2db      	uxtb	r3, r3
    a3f8:	2b00      	cmp	r3, #0
    a3fa:	d00b      	beq.n	a414 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    a3fc:	687a      	ldr	r2, [r7, #4]
    a3fe:	7cd3      	ldrb	r3, [r2, #19]
    a400:	f36f 1304 	bfc	r3, #4, #1
    a404:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    a406:	7df8      	ldrb	r0, [r7, #23]
    a408:	2300      	movs	r3, #0
    a40a:	2200      	movs	r2, #0
    a40c:	2101      	movs	r1, #1
    a40e:	4c2c      	ldr	r4, [pc, #176]	; (a4c0 <_usb_d_dev_in_next+0x200>)
    a410:	47a0      	blx	r4
		goto _in_tx_exec;
    a412:	e02e      	b.n	a472 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    a414:	7afb      	ldrb	r3, [r7, #11]
    a416:	2b00      	cmp	r3, #0
    a418:	d006      	beq.n	a428 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    a41a:	7dfb      	ldrb	r3, [r7, #23]
    a41c:	224b      	movs	r2, #75	; 0x4b
    a41e:	4619      	mov	r1, r3
    a420:	69b8      	ldr	r0, [r7, #24]
    a422:	4b28      	ldr	r3, [pc, #160]	; (a4c4 <_usb_d_dev_in_next+0x204>)
    a424:	4798      	blx	r3
    a426:	e005      	b.n	a434 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    a428:	7dfb      	ldrb	r3, [r7, #23]
    a42a:	224a      	movs	r2, #74	; 0x4a
    a42c:	4619      	mov	r1, r3
    a42e:	69b8      	ldr	r0, [r7, #24]
    a430:	4b24      	ldr	r3, [pc, #144]	; (a4c4 <_usb_d_dev_in_next+0x204>)
    a432:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    a434:	687b      	ldr	r3, [r7, #4]
    a436:	8a1b      	ldrh	r3, [r3, #16]
    a438:	89ba      	ldrh	r2, [r7, #12]
    a43a:	429a      	cmp	r2, r3
    a43c:	d114      	bne.n	a468 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    a43e:	687a      	ldr	r2, [r7, #4]
    a440:	7cd3      	ldrb	r3, [r2, #19]
    a442:	f36f 1386 	bfc	r3, #6, #1
    a446:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    a448:	4b1f      	ldr	r3, [pc, #124]	; (a4c8 <_usb_d_dev_in_next+0x208>)
    a44a:	68db      	ldr	r3, [r3, #12]
    a44c:	687a      	ldr	r2, [r7, #4]
    a44e:	7c90      	ldrb	r0, [r2, #18]
    a450:	687a      	ldr	r2, [r7, #4]
    a452:	6892      	ldr	r2, [r2, #8]
    a454:	4611      	mov	r1, r2
    a456:	4798      	blx	r3
    a458:	4603      	mov	r3, r0
    a45a:	2b00      	cmp	r3, #0
    a45c:	d124      	bne.n	a4a8 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    a45e:	687a      	ldr	r2, [r7, #4]
    a460:	7cd3      	ldrb	r3, [r2, #19]
    a462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a466:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a468:	2100      	movs	r1, #0
    a46a:	6878      	ldr	r0, [r7, #4]
    a46c:	4b17      	ldr	r3, [pc, #92]	; (a4cc <_usb_d_dev_in_next+0x20c>)
    a46e:	4798      	blx	r3
	return;
    a470:	e01b      	b.n	a4aa <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    a472:	78fb      	ldrb	r3, [r7, #3]
    a474:	f083 0301 	eor.w	r3, r3, #1
    a478:	b2db      	uxtb	r3, r3
    a47a:	2b00      	cmp	r3, #0
    a47c:	d00d      	beq.n	a49a <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    a47e:	7afb      	ldrb	r3, [r7, #11]
    a480:	2b00      	cmp	r3, #0
    a482:	d002      	beq.n	a48a <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    a484:	234e      	movs	r3, #78	; 0x4e
    a486:	777b      	strb	r3, [r7, #29]
    a488:	e001      	b.n	a48e <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    a48a:	234a      	movs	r3, #74	; 0x4a
    a48c:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a48e:	7f7a      	ldrb	r2, [r7, #29]
    a490:	7dfb      	ldrb	r3, [r7, #23]
    a492:	4619      	mov	r1, r3
    a494:	69b8      	ldr	r0, [r7, #24]
    a496:	4b0e      	ldr	r3, [pc, #56]	; (a4d0 <_usb_d_dev_in_next+0x210>)
    a498:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    a49a:	7dfb      	ldrb	r3, [r7, #23]
    a49c:	2201      	movs	r2, #1
    a49e:	2101      	movs	r1, #1
    a4a0:	4618      	mov	r0, r3
    a4a2:	4b0c      	ldr	r3, [pc, #48]	; (a4d4 <_usb_d_dev_in_next+0x214>)
    a4a4:	4798      	blx	r3
    a4a6:	e000      	b.n	a4aa <_usb_d_dev_in_next+0x1ea>
			return;
    a4a8:	bf00      	nop
}
    a4aa:	3724      	adds	r7, #36	; 0x24
    a4ac:	46bd      	mov	sp, r7
    a4ae:	bd90      	pop	{r4, r7, pc}
    a4b0:	20000f38 	.word	0x20000f38
    a4b4:	00009cb9 	.word	0x00009cb9
    a4b8:	0001008d 	.word	0x0001008d
    a4bc:	00009ce5 	.word	0x00009ce5
    a4c0:	00009e2d 	.word	0x00009e2d
    a4c4:	000095c5 	.word	0x000095c5
    a4c8:	20000e70 	.word	0x20000e70
    a4cc:	0000b5e9 	.word	0x0000b5e9
    a4d0:	00009599 	.word	0x00009599
    a4d4:	00009ee5 	.word	0x00009ee5

0000a4d8 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    a4d8:	b590      	push	{r4, r7, lr}
    a4da:	b08b      	sub	sp, #44	; 0x2c
    a4dc:	af00      	add	r7, sp, #0
    a4de:	6078      	str	r0, [r7, #4]
    a4e0:	460b      	mov	r3, r1
    a4e2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    a4e4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a4e8:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    a4ea:	687b      	ldr	r3, [r7, #4]
    a4ec:	7c9b      	ldrb	r3, [r3, #18]
    a4ee:	f003 030f 	and.w	r3, r3, #15
    a4f2:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    a4f4:	7ffb      	ldrb	r3, [r7, #31]
    a4f6:	015b      	lsls	r3, r3, #5
    a4f8:	4a94      	ldr	r2, [pc, #592]	; (a74c <_usb_d_dev_out_next+0x274>)
    a4fa:	4413      	add	r3, r2
    a4fc:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    a4fe:	78fb      	ldrb	r3, [r7, #3]
    a500:	2b00      	cmp	r3, #0
    a502:	d005      	beq.n	a510 <_usb_d_dev_out_next+0x38>
    a504:	69bb      	ldr	r3, [r7, #24]
    a506:	685b      	ldr	r3, [r3, #4]
    a508:	f3c3 338d 	ubfx	r3, r3, #14, #14
    a50c:	b29b      	uxth	r3, r3
    a50e:	e000      	b.n	a512 <_usb_d_dev_out_next+0x3a>
    a510:	2300      	movs	r3, #0
    a512:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    a514:	78fb      	ldrb	r3, [r7, #3]
    a516:	2b00      	cmp	r3, #0
    a518:	d005      	beq.n	a526 <_usb_d_dev_out_next+0x4e>
    a51a:	69bb      	ldr	r3, [r7, #24]
    a51c:	685b      	ldr	r3, [r3, #4]
    a51e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a522:	b29b      	uxth	r3, r3
    a524:	e000      	b.n	a528 <_usb_d_dev_out_next+0x50>
    a526:	2300      	movs	r3, #0
    a528:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a52a:	687b      	ldr	r3, [r7, #4]
    a52c:	8a1b      	ldrh	r3, [r3, #16]
    a52e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a532:	4293      	cmp	r3, r2
    a534:	d004      	beq.n	a540 <_usb_d_dev_out_next+0x68>
    a536:	687b      	ldr	r3, [r7, #4]
    a538:	8a1b      	ldrh	r3, [r3, #16]
    a53a:	3b01      	subs	r3, #1
    a53c:	b29b      	uxth	r3, r3
    a53e:	e001      	b.n	a544 <_usb_d_dev_out_next+0x6c>
    a540:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a544:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    a546:	8aba      	ldrh	r2, [r7, #20]
    a548:	8a7b      	ldrh	r3, [r7, #18]
    a54a:	4013      	ands	r3, r2
    a54c:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a54e:	687b      	ldr	r3, [r7, #4]
    a550:	7cdb      	ldrb	r3, [r3, #19]
    a552:	f003 0307 	and.w	r3, r3, #7
    a556:	b2db      	uxtb	r3, r3
    a558:	2b01      	cmp	r3, #1
    a55a:	bf0c      	ite	eq
    a55c:	2301      	moveq	r3, #1
    a55e:	2300      	movne	r3, #0
    a560:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    a562:	78fb      	ldrb	r3, [r7, #3]
    a564:	2b00      	cmp	r3, #0
    a566:	d004      	beq.n	a572 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    a568:	7ffb      	ldrb	r3, [r7, #31]
    a56a:	2100      	movs	r1, #0
    a56c:	4618      	mov	r0, r3
    a56e:	4b78      	ldr	r3, [pc, #480]	; (a750 <_usb_d_dev_out_next+0x278>)
    a570:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    a572:	687b      	ldr	r3, [r7, #4]
    a574:	7cdb      	ldrb	r3, [r3, #19]
    a576:	f003 0320 	and.w	r3, r3, #32
    a57a:	b2db      	uxtb	r3, r3
    a57c:	2b00      	cmp	r3, #0
    a57e:	d01c      	beq.n	a5ba <_usb_d_dev_out_next+0xe2>
    a580:	687b      	ldr	r3, [r7, #4]
    a582:	685b      	ldr	r3, [r3, #4]
    a584:	2b00      	cmp	r3, #0
    a586:	d018      	beq.n	a5ba <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    a588:	687b      	ldr	r3, [r7, #4]
    a58a:	685b      	ldr	r3, [r3, #4]
    a58c:	b29a      	uxth	r2, r3
    a58e:	687b      	ldr	r3, [r7, #4]
    a590:	689b      	ldr	r3, [r3, #8]
    a592:	b29b      	uxth	r3, r3
    a594:	1ad3      	subs	r3, r2, r3
    a596:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    a598:	687b      	ldr	r3, [r7, #4]
    a59a:	681a      	ldr	r2, [r3, #0]
    a59c:	687b      	ldr	r3, [r7, #4]
    a59e:	689b      	ldr	r3, [r3, #8]
    a5a0:	18d0      	adds	r0, r2, r3
    a5a2:	687b      	ldr	r3, [r7, #4]
    a5a4:	68d9      	ldr	r1, [r3, #12]
    a5a6:	89ba      	ldrh	r2, [r7, #12]
    a5a8:	8a3b      	ldrh	r3, [r7, #16]
    a5aa:	429a      	cmp	r2, r3
    a5ac:	d901      	bls.n	a5b2 <_usb_d_dev_out_next+0xda>
    a5ae:	8a3b      	ldrh	r3, [r7, #16]
    a5b0:	e000      	b.n	a5b4 <_usb_d_dev_out_next+0xdc>
    a5b2:	89bb      	ldrh	r3, [r7, #12]
    a5b4:	461a      	mov	r2, r3
    a5b6:	4b67      	ldr	r3, [pc, #412]	; (a754 <_usb_d_dev_out_next+0x27c>)
    a5b8:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    a5ba:	687b      	ldr	r3, [r7, #4]
    a5bc:	685b      	ldr	r3, [r3, #4]
    a5be:	2b00      	cmp	r3, #0
    a5c0:	d121      	bne.n	a606 <_usb_d_dev_out_next+0x12e>
    a5c2:	687b      	ldr	r3, [r7, #4]
    a5c4:	7cdb      	ldrb	r3, [r3, #19]
    a5c6:	f003 0310 	and.w	r3, r3, #16
    a5ca:	b2db      	uxtb	r3, r3
    a5cc:	2b00      	cmp	r3, #0
    a5ce:	d01a      	beq.n	a606 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    a5d0:	687a      	ldr	r2, [r7, #4]
    a5d2:	7cd3      	ldrb	r3, [r2, #19]
    a5d4:	f36f 1304 	bfc	r3, #4, #1
    a5d8:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    a5da:	687a      	ldr	r2, [r7, #4]
    a5dc:	7cd3      	ldrb	r3, [r2, #19]
    a5de:	f043 0320 	orr.w	r3, r3, #32
    a5e2:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a5e4:	687b      	ldr	r3, [r7, #4]
    a5e6:	68db      	ldr	r3, [r3, #12]
    a5e8:	461a      	mov	r2, r3
    a5ea:	7ffb      	ldrb	r3, [r7, #31]
    a5ec:	2100      	movs	r1, #0
    a5ee:	4618      	mov	r0, r3
    a5f0:	4b59      	ldr	r3, [pc, #356]	; (a758 <_usb_d_dev_out_next+0x280>)
    a5f2:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a5f4:	687b      	ldr	r3, [r7, #4]
    a5f6:	8a1b      	ldrh	r3, [r3, #16]
    a5f8:	461a      	mov	r2, r3
    a5fa:	7ff8      	ldrb	r0, [r7, #31]
    a5fc:	2300      	movs	r3, #0
    a5fe:	2100      	movs	r1, #0
    a600:	4c56      	ldr	r4, [pc, #344]	; (a75c <_usb_d_dev_out_next+0x284>)
    a602:	47a0      	blx	r4
		goto _out_rx_exec;
    a604:	e090      	b.n	a728 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    a606:	78fb      	ldrb	r3, [r7, #3]
    a608:	2b00      	cmp	r3, #0
    a60a:	d010      	beq.n	a62e <_usb_d_dev_out_next+0x156>
    a60c:	687b      	ldr	r3, [r7, #4]
    a60e:	8a1b      	ldrh	r3, [r3, #16]
    a610:	8a3a      	ldrh	r2, [r7, #16]
    a612:	429a      	cmp	r2, r3
    a614:	d20b      	bcs.n	a62e <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    a616:	687a      	ldr	r2, [r7, #4]
    a618:	7cd3      	ldrb	r3, [r2, #19]
    a61a:	f36f 1304 	bfc	r3, #4, #1
    a61e:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    a620:	687b      	ldr	r3, [r7, #4]
    a622:	689a      	ldr	r2, [r3, #8]
    a624:	8abb      	ldrh	r3, [r7, #20]
    a626:	441a      	add	r2, r3
    a628:	687b      	ldr	r3, [r7, #4]
    a62a:	609a      	str	r2, [r3, #8]
    a62c:	e05c      	b.n	a6e8 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    a62e:	687b      	ldr	r3, [r7, #4]
    a630:	689a      	ldr	r2, [r3, #8]
    a632:	8afb      	ldrh	r3, [r7, #22]
    a634:	441a      	add	r2, r3
    a636:	687b      	ldr	r3, [r7, #4]
    a638:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    a63a:	687b      	ldr	r3, [r7, #4]
    a63c:	689a      	ldr	r2, [r3, #8]
    a63e:	687b      	ldr	r3, [r7, #4]
    a640:	685b      	ldr	r3, [r3, #4]
    a642:	429a      	cmp	r2, r3
    a644:	d250      	bcs.n	a6e8 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    a646:	687b      	ldr	r3, [r7, #4]
    a648:	685b      	ldr	r3, [r3, #4]
    a64a:	b29a      	uxth	r2, r3
    a64c:	687b      	ldr	r3, [r7, #4]
    a64e:	689b      	ldr	r3, [r3, #8]
    a650:	b29b      	uxth	r3, r3
    a652:	1ad3      	subs	r3, r2, r3
    a654:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    a656:	687b      	ldr	r3, [r7, #4]
    a658:	7cdb      	ldrb	r3, [r3, #19]
    a65a:	f003 0320 	and.w	r3, r3, #32
    a65e:	b2db      	uxtb	r3, r3
    a660:	2b00      	cmp	r3, #0
    a662:	d010      	beq.n	a686 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    a664:	687b      	ldr	r3, [r7, #4]
    a666:	8a1b      	ldrh	r3, [r3, #16]
    a668:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a66a:	429a      	cmp	r2, r3
    a66c:	d902      	bls.n	a674 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    a66e:	687b      	ldr	r3, [r7, #4]
    a670:	8a1b      	ldrh	r3, [r3, #16]
    a672:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a674:	687b      	ldr	r3, [r7, #4]
    a676:	68db      	ldr	r3, [r3, #12]
    a678:	461a      	mov	r2, r3
    a67a:	7ffb      	ldrb	r3, [r7, #31]
    a67c:	2100      	movs	r1, #0
    a67e:	4618      	mov	r0, r3
    a680:	4b35      	ldr	r3, [pc, #212]	; (a758 <_usb_d_dev_out_next+0x280>)
    a682:	4798      	blx	r3
    a684:	e029      	b.n	a6da <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    a686:	687b      	ldr	r3, [r7, #4]
    a688:	8a1b      	ldrh	r3, [r3, #16]
    a68a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a68c:	429a      	cmp	r2, r3
    a68e:	d90f      	bls.n	a6b0 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    a690:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    a692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    a696:	d903      	bls.n	a6a0 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    a698:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a69c:	84fb      	strh	r3, [r7, #38]	; 0x26
    a69e:	e011      	b.n	a6c4 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    a6a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a6a2:	8a7b      	ldrh	r3, [r7, #18]
    a6a4:	4013      	ands	r3, r2
    a6a6:	b29b      	uxth	r3, r3
    a6a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a6aa:	1ad3      	subs	r3, r2, r3
    a6ac:	84fb      	strh	r3, [r7, #38]	; 0x26
    a6ae:	e009      	b.n	a6c4 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    a6b0:	687b      	ldr	r3, [r7, #4]
    a6b2:	8a1b      	ldrh	r3, [r3, #16]
    a6b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a6b6:	429a      	cmp	r2, r3
    a6b8:	d204      	bcs.n	a6c4 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    a6ba:	687a      	ldr	r2, [r7, #4]
    a6bc:	7cd3      	ldrb	r3, [r2, #19]
    a6be:	f043 0320 	orr.w	r3, r3, #32
    a6c2:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a6c4:	687b      	ldr	r3, [r7, #4]
    a6c6:	681a      	ldr	r2, [r3, #0]
    a6c8:	687b      	ldr	r3, [r7, #4]
    a6ca:	689b      	ldr	r3, [r3, #8]
    a6cc:	4413      	add	r3, r2
    a6ce:	461a      	mov	r2, r3
    a6d0:	7ffb      	ldrb	r3, [r7, #31]
    a6d2:	2100      	movs	r1, #0
    a6d4:	4618      	mov	r0, r3
    a6d6:	4b20      	ldr	r3, [pc, #128]	; (a758 <_usb_d_dev_out_next+0x280>)
    a6d8:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    a6da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a6dc:	7ff8      	ldrb	r0, [r7, #31]
    a6de:	2300      	movs	r3, #0
    a6e0:	2100      	movs	r1, #0
    a6e2:	4c1e      	ldr	r4, [pc, #120]	; (a75c <_usb_d_dev_out_next+0x284>)
    a6e4:	47a0      	blx	r4
			goto _out_rx_exec;
    a6e6:	e01f      	b.n	a728 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    a6e8:	7bfb      	ldrb	r3, [r7, #15]
    a6ea:	2b00      	cmp	r3, #0
    a6ec:	d006      	beq.n	a6fc <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    a6ee:	7ffb      	ldrb	r3, [r7, #31]
    a6f0:	222d      	movs	r2, #45	; 0x2d
    a6f2:	4619      	mov	r1, r3
    a6f4:	6a38      	ldr	r0, [r7, #32]
    a6f6:	4b1a      	ldr	r3, [pc, #104]	; (a760 <_usb_d_dev_out_next+0x288>)
    a6f8:	4798      	blx	r3
    a6fa:	e005      	b.n	a708 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    a6fc:	7ffb      	ldrb	r3, [r7, #31]
    a6fe:	2225      	movs	r2, #37	; 0x25
    a700:	4619      	mov	r1, r3
    a702:	6a38      	ldr	r0, [r7, #32]
    a704:	4b16      	ldr	r3, [pc, #88]	; (a760 <_usb_d_dev_out_next+0x288>)
    a706:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    a708:	7ffb      	ldrb	r3, [r7, #31]
    a70a:	2b00      	cmp	r3, #0
    a70c:	d107      	bne.n	a71e <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a70e:	687b      	ldr	r3, [r7, #4]
    a710:	68db      	ldr	r3, [r3, #12]
    a712:	461a      	mov	r2, r3
    a714:	7ffb      	ldrb	r3, [r7, #31]
    a716:	2100      	movs	r1, #0
    a718:	4618      	mov	r0, r3
    a71a:	4b0f      	ldr	r3, [pc, #60]	; (a758 <_usb_d_dev_out_next+0x280>)
    a71c:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a71e:	2100      	movs	r1, #0
    a720:	6878      	ldr	r0, [r7, #4]
    a722:	4b10      	ldr	r3, [pc, #64]	; (a764 <_usb_d_dev_out_next+0x28c>)
    a724:	4798      	blx	r3
	return;
    a726:	e031      	b.n	a78c <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    a728:	78fb      	ldrb	r3, [r7, #3]
    a72a:	f083 0301 	eor.w	r3, r3, #1
    a72e:	b2db      	uxtb	r3, r3
    a730:	2b00      	cmp	r3, #0
    a732:	d025      	beq.n	a780 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    a734:	7bfb      	ldrb	r3, [r7, #15]
    a736:	2b00      	cmp	r3, #0
    a738:	d018      	beq.n	a76c <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    a73a:	7ffb      	ldrb	r3, [r7, #31]
    a73c:	2101      	movs	r1, #1
    a73e:	4618      	mov	r0, r3
    a740:	4b09      	ldr	r3, [pc, #36]	; (a768 <_usb_d_dev_out_next+0x290>)
    a742:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    a744:	232d      	movs	r3, #45	; 0x2d
    a746:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    a74a:	e012      	b.n	a772 <_usb_d_dev_out_next+0x29a>
    a74c:	20000f38 	.word	0x20000f38
    a750:	00009cb9 	.word	0x00009cb9
    a754:	0001008d 	.word	0x0001008d
    a758:	00009ce5 	.word	0x00009ce5
    a75c:	00009e6d 	.word	0x00009e6d
    a760:	000095c5 	.word	0x000095c5
    a764:	0000b5e9 	.word	0x0000b5e9
    a768:	00009ead 	.word	0x00009ead
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    a76c:	2325      	movs	r3, #37	; 0x25
    a76e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a772:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    a776:	7ffb      	ldrb	r3, [r7, #31]
    a778:	4619      	mov	r1, r3
    a77a:	6a38      	ldr	r0, [r7, #32]
    a77c:	4b05      	ldr	r3, [pc, #20]	; (a794 <_usb_d_dev_out_next+0x2bc>)
    a77e:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    a780:	7ffb      	ldrb	r3, [r7, #31]
    a782:	2201      	movs	r2, #1
    a784:	2100      	movs	r1, #0
    a786:	4618      	mov	r0, r3
    a788:	4b03      	ldr	r3, [pc, #12]	; (a798 <_usb_d_dev_out_next+0x2c0>)
    a78a:	4798      	blx	r3
}
    a78c:	372c      	adds	r7, #44	; 0x2c
    a78e:	46bd      	mov	sp, r7
    a790:	bd90      	pop	{r4, r7, pc}
    a792:	bf00      	nop
    a794:	00009599 	.word	0x00009599
    a798:	00009f3d 	.word	0x00009f3d

0000a79c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    a79c:	b580      	push	{r7, lr}
    a79e:	b084      	sub	sp, #16
    a7a0:	af00      	add	r7, sp, #0
    a7a2:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    a7a4:	687b      	ldr	r3, [r7, #4]
    a7a6:	7c9b      	ldrb	r3, [r3, #18]
    a7a8:	f003 030f 	and.w	r3, r3, #15
    a7ac:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a7ae:	687b      	ldr	r3, [r7, #4]
    a7b0:	7cdb      	ldrb	r3, [r3, #19]
    a7b2:	f003 0307 	and.w	r3, r3, #7
    a7b6:	b2db      	uxtb	r3, r3
    a7b8:	2b01      	cmp	r3, #1
    a7ba:	bf0c      	ite	eq
    a7bc:	2301      	moveq	r3, #1
    a7be:	2300      	movne	r3, #0
    a7c0:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    a7c2:	7bbb      	ldrb	r3, [r7, #14]
    a7c4:	f083 0301 	eor.w	r3, r3, #1
    a7c8:	b2db      	uxtb	r3, r3
    a7ca:	2b00      	cmp	r3, #0
    a7cc:	d008      	beq.n	a7e0 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    a7ce:	7bfb      	ldrb	r3, [r7, #15]
    a7d0:	4618      	mov	r0, r3
    a7d2:	4b20      	ldr	r3, [pc, #128]	; (a854 <_usb_d_dev_handle_setup+0xb8>)
    a7d4:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    a7d6:	7bfb      	ldrb	r3, [r7, #15]
    a7d8:	4618      	mov	r0, r3
    a7da:	4b1f      	ldr	r3, [pc, #124]	; (a858 <_usb_d_dev_handle_setup+0xbc>)
    a7dc:	4798      	blx	r3
		return;
    a7de:	e036      	b.n	a84e <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    a7e0:	687b      	ldr	r3, [r7, #4]
    a7e2:	7cdb      	ldrb	r3, [r3, #19]
    a7e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a7e8:	b2db      	uxtb	r3, r3
    a7ea:	2b00      	cmp	r3, #0
    a7ec:	d010      	beq.n	a810 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    a7ee:	687a      	ldr	r2, [r7, #4]
    a7f0:	7cd3      	ldrb	r3, [r2, #19]
    a7f2:	f36f 1386 	bfc	r3, #6, #1
    a7f6:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a7f8:	7bfb      	ldrb	r3, [r7, #15]
    a7fa:	2200      	movs	r2, #0
    a7fc:	2101      	movs	r1, #1
    a7fe:	4618      	mov	r0, r3
    a800:	4b16      	ldr	r3, [pc, #88]	; (a85c <_usb_d_dev_handle_setup+0xc0>)
    a802:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    a804:	7bfb      	ldrb	r3, [r7, #15]
    a806:	2200      	movs	r2, #0
    a808:	2100      	movs	r1, #0
    a80a:	4618      	mov	r0, r3
    a80c:	4b14      	ldr	r3, [pc, #80]	; (a860 <_usb_d_dev_handle_setup+0xc4>)
    a80e:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    a810:	687a      	ldr	r2, [r7, #4]
    a812:	7cd3      	ldrb	r3, [r2, #19]
    a814:	f36f 03c3 	bfc	r3, #3, #1
    a818:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    a81a:	7bfb      	ldrb	r3, [r7, #15]
    a81c:	2100      	movs	r1, #0
    a81e:	4618      	mov	r0, r3
    a820:	4b10      	ldr	r3, [pc, #64]	; (a864 <_usb_d_dev_handle_setup+0xc8>)
    a822:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    a824:	7bfb      	ldrb	r3, [r7, #15]
    a826:	2101      	movs	r1, #1
    a828:	4618      	mov	r0, r3
    a82a:	4b0e      	ldr	r3, [pc, #56]	; (a864 <_usb_d_dev_handle_setup+0xc8>)
    a82c:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a82e:	7bfb      	ldrb	r3, [r7, #15]
    a830:	216f      	movs	r1, #111	; 0x6f
    a832:	4618      	mov	r0, r3
    a834:	4b0c      	ldr	r3, [pc, #48]	; (a868 <_usb_d_dev_handle_setup+0xcc>)
    a836:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a838:	7bfb      	ldrb	r3, [r7, #15]
    a83a:	216f      	movs	r1, #111	; 0x6f
    a83c:	4618      	mov	r0, r3
    a83e:	4b0b      	ldr	r3, [pc, #44]	; (a86c <_usb_d_dev_handle_setup+0xd0>)
    a840:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    a842:	4b0b      	ldr	r3, [pc, #44]	; (a870 <_usb_d_dev_handle_setup+0xd4>)
    a844:	689b      	ldr	r3, [r3, #8]
    a846:	687a      	ldr	r2, [r7, #4]
    a848:	7c92      	ldrb	r2, [r2, #18]
    a84a:	4610      	mov	r0, r2
    a84c:	4798      	blx	r3
}
    a84e:	3710      	adds	r7, #16
    a850:	46bd      	mov	sp, r7
    a852:	bd80      	pop	{r7, pc}
    a854:	00009c41 	.word	0x00009c41
    a858:	00009bed 	.word	0x00009bed
    a85c:	00009ee5 	.word	0x00009ee5
    a860:	00009f3d 	.word	0x00009f3d
    a864:	00009ead 	.word	0x00009ead
    a868:	000099ed 	.word	0x000099ed
    a86c:	00009a3d 	.word	0x00009a3d
    a870:	20000e70 	.word	0x20000e70

0000a874 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a874:	b580      	push	{r7, lr}
    a876:	b084      	sub	sp, #16
    a878:	af00      	add	r7, sp, #0
    a87a:	6078      	str	r0, [r7, #4]
    a87c:	460b      	mov	r3, r1
    a87e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a880:	687b      	ldr	r3, [r7, #4]
    a882:	7c9b      	ldrb	r3, [r3, #18]
    a884:	f003 030f 	and.w	r3, r3, #15
    a888:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    a88a:	78f9      	ldrb	r1, [r7, #3]
    a88c:	7bfb      	ldrb	r3, [r7, #15]
    a88e:	2200      	movs	r2, #0
    a890:	4618      	mov	r0, r3
    a892:	4b07      	ldr	r3, [pc, #28]	; (a8b0 <_usb_d_dev_handle_stall+0x3c>)
    a894:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    a896:	4b07      	ldr	r3, [pc, #28]	; (a8b4 <_usb_d_dev_handle_stall+0x40>)
    a898:	691b      	ldr	r3, [r3, #16]
    a89a:	687a      	ldr	r2, [r7, #4]
    a89c:	7c90      	ldrb	r0, [r2, #18]
    a89e:	687a      	ldr	r2, [r7, #4]
    a8a0:	6892      	ldr	r2, [r2, #8]
    a8a2:	2101      	movs	r1, #1
    a8a4:	4798      	blx	r3
}
    a8a6:	bf00      	nop
    a8a8:	3710      	adds	r7, #16
    a8aa:	46bd      	mov	sp, r7
    a8ac:	bd80      	pop	{r7, pc}
    a8ae:	bf00      	nop
    a8b0:	00009ba1 	.word	0x00009ba1
    a8b4:	20000e70 	.word	0x20000e70

0000a8b8 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a8b8:	b580      	push	{r7, lr}
    a8ba:	b088      	sub	sp, #32
    a8bc:	af00      	add	r7, sp, #0
    a8be:	6078      	str	r0, [r7, #4]
    a8c0:	460b      	mov	r3, r1
    a8c2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    a8c4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a8c8:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    a8ca:	687b      	ldr	r3, [r7, #4]
    a8cc:	7c9b      	ldrb	r3, [r3, #18]
    a8ce:	f003 030f 	and.w	r3, r3, #15
    a8d2:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    a8d4:	4b61      	ldr	r3, [pc, #388]	; (aa5c <_usb_d_dev_handle_trfail+0x1a4>)
    a8d6:	881b      	ldrh	r3, [r3, #0]
    a8d8:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    a8da:	7efb      	ldrb	r3, [r7, #27]
    a8dc:	015b      	lsls	r3, r3, #5
    a8de:	4a60      	ldr	r2, [pc, #384]	; (aa60 <_usb_d_dev_handle_trfail+0x1a8>)
    a8e0:	4413      	add	r3, r2
    a8e2:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    a8e4:	78fb      	ldrb	r3, [r7, #3]
    a8e6:	2b00      	cmp	r3, #0
    a8e8:	d006      	beq.n	a8f8 <_usb_d_dev_handle_trfail+0x40>
    a8ea:	7efb      	ldrb	r3, [r7, #27]
    a8ec:	4619      	mov	r1, r3
    a8ee:	69f8      	ldr	r0, [r7, #28]
    a8f0:	4b5c      	ldr	r3, [pc, #368]	; (aa64 <_usb_d_dev_handle_trfail+0x1ac>)
    a8f2:	4798      	blx	r3
    a8f4:	4603      	mov	r3, r0
    a8f6:	e005      	b.n	a904 <_usb_d_dev_handle_trfail+0x4c>
    a8f8:	7efb      	ldrb	r3, [r7, #27]
    a8fa:	4619      	mov	r1, r3
    a8fc:	69f8      	ldr	r0, [r7, #28]
    a8fe:	4b5a      	ldr	r3, [pc, #360]	; (aa68 <_usb_d_dev_handle_trfail+0x1b0>)
    a900:	4798      	blx	r3
    a902:	4603      	mov	r3, r0
    a904:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a906:	687b      	ldr	r3, [r7, #4]
    a908:	7cdb      	ldrb	r3, [r3, #19]
    a90a:	f003 0307 	and.w	r3, r3, #7
    a90e:	b2db      	uxtb	r3, r3
    a910:	2b01      	cmp	r3, #1
    a912:	bf0c      	ite	eq
    a914:	2301      	moveq	r3, #1
    a916:	2300      	movne	r3, #0
    a918:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    a91a:	78fb      	ldrb	r3, [r7, #3]
    a91c:	011b      	lsls	r3, r3, #4
    a91e:	697a      	ldr	r2, [r7, #20]
    a920:	4413      	add	r3, r2
    a922:	7a9b      	ldrb	r3, [r3, #10]
    a924:	b2db      	uxtb	r3, r3
    a926:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    a928:	7cfb      	ldrb	r3, [r7, #19]
    a92a:	2b02      	cmp	r3, #2
    a92c:	d12f      	bne.n	a98e <_usb_d_dev_handle_trfail+0xd6>
    a92e:	7b3b      	ldrb	r3, [r7, #12]
    a930:	f003 0301 	and.w	r3, r3, #1
    a934:	b2db      	uxtb	r3, r3
    a936:	2b00      	cmp	r3, #0
    a938:	d029      	beq.n	a98e <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    a93a:	78fb      	ldrb	r3, [r7, #3]
    a93c:	011b      	lsls	r3, r3, #4
    a93e:	697a      	ldr	r2, [r7, #20]
    a940:	441a      	add	r2, r3
    a942:	7a93      	ldrb	r3, [r2, #10]
    a944:	f36f 0300 	bfc	r3, #0, #1
    a948:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a94a:	78fb      	ldrb	r3, [r7, #3]
    a94c:	f107 0220 	add.w	r2, r7, #32
    a950:	4413      	add	r3, r2
    a952:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a956:	7efb      	ldrb	r3, [r7, #27]
    a958:	4619      	mov	r1, r3
    a95a:	69f8      	ldr	r0, [r7, #28]
    a95c:	4b43      	ldr	r3, [pc, #268]	; (aa6c <_usb_d_dev_handle_trfail+0x1b4>)
    a95e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a960:	78fb      	ldrb	r3, [r7, #3]
    a962:	f107 0220 	add.w	r2, r7, #32
    a966:	4413      	add	r3, r2
    a968:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a96c:	7efb      	ldrb	r3, [r7, #27]
    a96e:	4619      	mov	r1, r3
    a970:	69f8      	ldr	r0, [r7, #28]
    a972:	4b3f      	ldr	r3, [pc, #252]	; (aa70 <_usb_d_dev_handle_trfail+0x1b8>)
    a974:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    a976:	78fb      	ldrb	r3, [r7, #3]
    a978:	2b00      	cmp	r3, #0
    a97a:	bf14      	ite	ne
    a97c:	2301      	movne	r3, #1
    a97e:	2300      	moveq	r3, #0
    a980:	b2db      	uxtb	r3, r3
    a982:	2204      	movs	r2, #4
    a984:	4619      	mov	r1, r3
    a986:	6878      	ldr	r0, [r7, #4]
    a988:	4b3a      	ldr	r3, [pc, #232]	; (aa74 <_usb_d_dev_handle_trfail+0x1bc>)
    a98a:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    a98c:	e062      	b.n	aa54 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    a98e:	7b3b      	ldrb	r3, [r7, #12]
    a990:	f003 0302 	and.w	r3, r3, #2
    a994:	b2db      	uxtb	r3, r3
    a996:	2b00      	cmp	r3, #0
    a998:	d040      	beq.n	aa1c <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    a99a:	78fb      	ldrb	r3, [r7, #3]
    a99c:	011b      	lsls	r3, r3, #4
    a99e:	697a      	ldr	r2, [r7, #20]
    a9a0:	441a      	add	r2, r3
    a9a2:	7a93      	ldrb	r3, [r2, #10]
    a9a4:	f36f 0341 	bfc	r3, #1, #1
    a9a8:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a9aa:	78fb      	ldrb	r3, [r7, #3]
    a9ac:	f107 0220 	add.w	r2, r7, #32
    a9b0:	4413      	add	r3, r2
    a9b2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a9b6:	7efb      	ldrb	r3, [r7, #27]
    a9b8:	4619      	mov	r1, r3
    a9ba:	69f8      	ldr	r0, [r7, #28]
    a9bc:	4b2b      	ldr	r3, [pc, #172]	; (aa6c <_usb_d_dev_handle_trfail+0x1b4>)
    a9be:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a9c0:	78fb      	ldrb	r3, [r7, #3]
    a9c2:	f107 0220 	add.w	r2, r7, #32
    a9c6:	4413      	add	r3, r2
    a9c8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a9cc:	7efb      	ldrb	r3, [r7, #27]
    a9ce:	4619      	mov	r1, r3
    a9d0:	69f8      	ldr	r0, [r7, #28]
    a9d2:	4b27      	ldr	r3, [pc, #156]	; (aa70 <_usb_d_dev_handle_trfail+0x1b8>)
    a9d4:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    a9d6:	7cbb      	ldrb	r3, [r7, #18]
    a9d8:	2b00      	cmp	r3, #0
    a9da:	d03b      	beq.n	aa54 <_usb_d_dev_handle_trfail+0x19c>
    a9dc:	687b      	ldr	r3, [r7, #4]
    a9de:	7cdb      	ldrb	r3, [r3, #19]
    a9e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a9e4:	b2db      	uxtb	r3, r3
    a9e6:	2b00      	cmp	r3, #0
    a9e8:	d034      	beq.n	aa54 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    a9ea:	687b      	ldr	r3, [r7, #4]
    a9ec:	7cdb      	ldrb	r3, [r3, #19]
    a9ee:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a9f2:	b2db      	uxtb	r3, r3
    a9f4:	461a      	mov	r2, r3
    a9f6:	78fb      	ldrb	r3, [r7, #3]
    a9f8:	4293      	cmp	r3, r2
    a9fa:	d02b      	beq.n	aa54 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    a9fc:	687b      	ldr	r3, [r7, #4]
    a9fe:	7cdb      	ldrb	r3, [r3, #19]
    aa00:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    aa04:	b2db      	uxtb	r3, r3
    aa06:	2b00      	cmp	r3, #0
    aa08:	bf14      	ite	ne
    aa0a:	2301      	movne	r3, #1
    aa0c:	2300      	moveq	r3, #0
    aa0e:	b2db      	uxtb	r3, r3
    aa10:	2200      	movs	r2, #0
    aa12:	4619      	mov	r1, r3
    aa14:	6878      	ldr	r0, [r7, #4]
    aa16:	4b17      	ldr	r3, [pc, #92]	; (aa74 <_usb_d_dev_handle_trfail+0x1bc>)
    aa18:	4798      	blx	r3
}
    aa1a:	e01b      	b.n	aa54 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    aa1c:	78fa      	ldrb	r2, [r7, #3]
    aa1e:	7efb      	ldrb	r3, [r7, #27]
    aa20:	4611      	mov	r1, r2
    aa22:	4618      	mov	r0, r3
    aa24:	4b14      	ldr	r3, [pc, #80]	; (aa78 <_usb_d_dev_handle_trfail+0x1c0>)
    aa26:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    aa28:	78fb      	ldrb	r3, [r7, #3]
    aa2a:	f107 0220 	add.w	r2, r7, #32
    aa2e:	4413      	add	r3, r2
    aa30:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    aa34:	7efb      	ldrb	r3, [r7, #27]
    aa36:	4619      	mov	r1, r3
    aa38:	69f8      	ldr	r0, [r7, #28]
    aa3a:	4b0c      	ldr	r3, [pc, #48]	; (aa6c <_usb_d_dev_handle_trfail+0x1b4>)
    aa3c:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    aa3e:	78fb      	ldrb	r3, [r7, #3]
    aa40:	f107 0220 	add.w	r2, r7, #32
    aa44:	4413      	add	r3, r2
    aa46:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    aa4a:	7efb      	ldrb	r3, [r7, #27]
    aa4c:	4619      	mov	r1, r3
    aa4e:	69f8      	ldr	r0, [r7, #28]
    aa50:	4b07      	ldr	r3, [pc, #28]	; (aa70 <_usb_d_dev_handle_trfail+0x1b8>)
    aa52:	4798      	blx	r3
}
    aa54:	bf00      	nop
    aa56:	3720      	adds	r7, #32
    aa58:	46bd      	mov	sp, r7
    aa5a:	bd80      	pop	{r7, pc}
    aa5c:	00010730 	.word	0x00010730
    aa60:	20000f38 	.word	0x20000f38
    aa64:	00009621 	.word	0x00009621
    aa68:	000095f1 	.word	0x000095f1
    aa6c:	000094c5 	.word	0x000094c5
    aa70:	000095c5 	.word	0x000095c5
    aa74:	0000b631 	.word	0x0000b631
    aa78:	00009ead 	.word	0x00009ead

0000aa7c <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    aa7c:	b580      	push	{r7, lr}
    aa7e:	b082      	sub	sp, #8
    aa80:	af00      	add	r7, sp, #0
    aa82:	6078      	str	r0, [r7, #4]
    aa84:	460b      	mov	r3, r1
    aa86:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    aa88:	78fb      	ldrb	r3, [r7, #3]
    aa8a:	f003 0310 	and.w	r3, r3, #16
    aa8e:	2b00      	cmp	r3, #0
    aa90:	d003      	beq.n	aa9a <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    aa92:	6878      	ldr	r0, [r7, #4]
    aa94:	4b0c      	ldr	r3, [pc, #48]	; (aac8 <_usb_d_dev_trans_setup_isr+0x4c>)
    aa96:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    aa98:	e012      	b.n	aac0 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    aa9a:	78fb      	ldrb	r3, [r7, #3]
    aa9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    aaa0:	2b00      	cmp	r3, #0
    aaa2:	d004      	beq.n	aaae <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    aaa4:	2101      	movs	r1, #1
    aaa6:	6878      	ldr	r0, [r7, #4]
    aaa8:	4b08      	ldr	r3, [pc, #32]	; (aacc <_usb_d_dev_trans_setup_isr+0x50>)
    aaaa:	4798      	blx	r3
}
    aaac:	e008      	b.n	aac0 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    aaae:	78fb      	ldrb	r3, [r7, #3]
    aab0:	f003 0320 	and.w	r3, r3, #32
    aab4:	2b00      	cmp	r3, #0
    aab6:	d003      	beq.n	aac0 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    aab8:	2100      	movs	r1, #0
    aaba:	6878      	ldr	r0, [r7, #4]
    aabc:	4b03      	ldr	r3, [pc, #12]	; (aacc <_usb_d_dev_trans_setup_isr+0x50>)
    aabe:	4798      	blx	r3
}
    aac0:	bf00      	nop
    aac2:	3708      	adds	r7, #8
    aac4:	46bd      	mov	sp, r7
    aac6:	bd80      	pop	{r7, pc}
    aac8:	0000a79d 	.word	0x0000a79d
    aacc:	0000a875 	.word	0x0000a875

0000aad0 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    aad0:	b580      	push	{r7, lr}
    aad2:	b082      	sub	sp, #8
    aad4:	af00      	add	r7, sp, #0
    aad6:	6078      	str	r0, [r7, #4]
    aad8:	460b      	mov	r3, r1
    aada:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    aadc:	78fb      	ldrb	r3, [r7, #3]
    aade:	f003 0340 	and.w	r3, r3, #64	; 0x40
    aae2:	2b00      	cmp	r3, #0
    aae4:	d004      	beq.n	aaf0 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    aae6:	2101      	movs	r1, #1
    aae8:	6878      	ldr	r0, [r7, #4]
    aaea:	4b1a      	ldr	r3, [pc, #104]	; (ab54 <_usb_d_dev_trans_in_isr+0x84>)
    aaec:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    aaee:	e02c      	b.n	ab4a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    aaf0:	78fb      	ldrb	r3, [r7, #3]
    aaf2:	f003 0308 	and.w	r3, r3, #8
    aaf6:	2b00      	cmp	r3, #0
    aaf8:	d004      	beq.n	ab04 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    aafa:	2101      	movs	r1, #1
    aafc:	6878      	ldr	r0, [r7, #4]
    aafe:	4b16      	ldr	r3, [pc, #88]	; (ab58 <_usb_d_dev_trans_in_isr+0x88>)
    ab00:	4798      	blx	r3
}
    ab02:	e022      	b.n	ab4a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    ab04:	78fb      	ldrb	r3, [r7, #3]
    ab06:	f003 0302 	and.w	r3, r3, #2
    ab0a:	2b00      	cmp	r3, #0
    ab0c:	d004      	beq.n	ab18 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    ab0e:	2101      	movs	r1, #1
    ab10:	6878      	ldr	r0, [r7, #4]
    ab12:	4b12      	ldr	r3, [pc, #72]	; (ab5c <_usb_d_dev_trans_in_isr+0x8c>)
    ab14:	4798      	blx	r3
}
    ab16:	e018      	b.n	ab4a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    ab18:	687b      	ldr	r3, [r7, #4]
    ab1a:	7cdb      	ldrb	r3, [r3, #19]
    ab1c:	f003 0307 	and.w	r3, r3, #7
    ab20:	b2db      	uxtb	r3, r3
    ab22:	2b01      	cmp	r3, #1
    ab24:	d111      	bne.n	ab4a <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    ab26:	78fb      	ldrb	r3, [r7, #3]
    ab28:	f003 0304 	and.w	r3, r3, #4
    ab2c:	2b00      	cmp	r3, #0
    ab2e:	d004      	beq.n	ab3a <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    ab30:	2100      	movs	r1, #0
    ab32:	6878      	ldr	r0, [r7, #4]
    ab34:	4b08      	ldr	r3, [pc, #32]	; (ab58 <_usb_d_dev_trans_in_isr+0x88>)
    ab36:	4798      	blx	r3
}
    ab38:	e007      	b.n	ab4a <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    ab3a:	78fb      	ldrb	r3, [r7, #3]
    ab3c:	f003 0310 	and.w	r3, r3, #16
    ab40:	2b00      	cmp	r3, #0
    ab42:	d002      	beq.n	ab4a <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    ab44:	6878      	ldr	r0, [r7, #4]
    ab46:	4b06      	ldr	r3, [pc, #24]	; (ab60 <_usb_d_dev_trans_in_isr+0x90>)
    ab48:	4798      	blx	r3
}
    ab4a:	bf00      	nop
    ab4c:	3708      	adds	r7, #8
    ab4e:	46bd      	mov	sp, r7
    ab50:	bd80      	pop	{r7, pc}
    ab52:	bf00      	nop
    ab54:	0000a875 	.word	0x0000a875
    ab58:	0000a8b9 	.word	0x0000a8b9
    ab5c:	0000a2c1 	.word	0x0000a2c1
    ab60:	0000a79d 	.word	0x0000a79d

0000ab64 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    ab64:	b580      	push	{r7, lr}
    ab66:	b082      	sub	sp, #8
    ab68:	af00      	add	r7, sp, #0
    ab6a:	6078      	str	r0, [r7, #4]
    ab6c:	460b      	mov	r3, r1
    ab6e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    ab70:	78fb      	ldrb	r3, [r7, #3]
    ab72:	f003 0320 	and.w	r3, r3, #32
    ab76:	2b00      	cmp	r3, #0
    ab78:	d004      	beq.n	ab84 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    ab7a:	2100      	movs	r1, #0
    ab7c:	6878      	ldr	r0, [r7, #4]
    ab7e:	4b1a      	ldr	r3, [pc, #104]	; (abe8 <_usb_d_dev_trans_out_isr+0x84>)
    ab80:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    ab82:	e02c      	b.n	abde <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    ab84:	78fb      	ldrb	r3, [r7, #3]
    ab86:	f003 0304 	and.w	r3, r3, #4
    ab8a:	2b00      	cmp	r3, #0
    ab8c:	d004      	beq.n	ab98 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    ab8e:	2100      	movs	r1, #0
    ab90:	6878      	ldr	r0, [r7, #4]
    ab92:	4b16      	ldr	r3, [pc, #88]	; (abec <_usb_d_dev_trans_out_isr+0x88>)
    ab94:	4798      	blx	r3
}
    ab96:	e022      	b.n	abde <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    ab98:	78fb      	ldrb	r3, [r7, #3]
    ab9a:	f003 0301 	and.w	r3, r3, #1
    ab9e:	2b00      	cmp	r3, #0
    aba0:	d004      	beq.n	abac <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    aba2:	2101      	movs	r1, #1
    aba4:	6878      	ldr	r0, [r7, #4]
    aba6:	4b12      	ldr	r3, [pc, #72]	; (abf0 <_usb_d_dev_trans_out_isr+0x8c>)
    aba8:	4798      	blx	r3
}
    abaa:	e018      	b.n	abde <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    abac:	687b      	ldr	r3, [r7, #4]
    abae:	7cdb      	ldrb	r3, [r3, #19]
    abb0:	f003 0307 	and.w	r3, r3, #7
    abb4:	b2db      	uxtb	r3, r3
    abb6:	2b01      	cmp	r3, #1
    abb8:	d111      	bne.n	abde <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    abba:	78fb      	ldrb	r3, [r7, #3]
    abbc:	f003 0308 	and.w	r3, r3, #8
    abc0:	2b00      	cmp	r3, #0
    abc2:	d004      	beq.n	abce <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    abc4:	2101      	movs	r1, #1
    abc6:	6878      	ldr	r0, [r7, #4]
    abc8:	4b08      	ldr	r3, [pc, #32]	; (abec <_usb_d_dev_trans_out_isr+0x88>)
    abca:	4798      	blx	r3
}
    abcc:	e007      	b.n	abde <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    abce:	78fb      	ldrb	r3, [r7, #3]
    abd0:	f003 0310 	and.w	r3, r3, #16
    abd4:	2b00      	cmp	r3, #0
    abd6:	d002      	beq.n	abde <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    abd8:	6878      	ldr	r0, [r7, #4]
    abda:	4b06      	ldr	r3, [pc, #24]	; (abf4 <_usb_d_dev_trans_out_isr+0x90>)
    abdc:	4798      	blx	r3
}
    abde:	bf00      	nop
    abe0:	3708      	adds	r7, #8
    abe2:	46bd      	mov	sp, r7
    abe4:	bd80      	pop	{r7, pc}
    abe6:	bf00      	nop
    abe8:	0000a875 	.word	0x0000a875
    abec:	0000a8b9 	.word	0x0000a8b9
    abf0:	0000a4d9 	.word	0x0000a4d9
    abf4:	0000a79d 	.word	0x0000a79d

0000abf8 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    abf8:	b580      	push	{r7, lr}
    abfa:	b084      	sub	sp, #16
    abfc:	af00      	add	r7, sp, #0
    abfe:	6078      	str	r0, [r7, #4]
    ac00:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    ac02:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ac06:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ac08:	683b      	ldr	r3, [r7, #0]
    ac0a:	7c9b      	ldrb	r3, [r3, #18]
    ac0c:	f003 030f 	and.w	r3, r3, #15
    ac10:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    ac12:	7afb      	ldrb	r3, [r7, #11]
    ac14:	2201      	movs	r2, #1
    ac16:	409a      	lsls	r2, r3
    ac18:	687b      	ldr	r3, [r7, #4]
    ac1a:	4013      	ands	r3, r2
    ac1c:	2b00      	cmp	r3, #0
    ac1e:	d03d      	beq.n	ac9c <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    ac20:	7afb      	ldrb	r3, [r7, #11]
    ac22:	68fa      	ldr	r2, [r7, #12]
    ac24:	3308      	adds	r3, #8
    ac26:	015b      	lsls	r3, r3, #5
    ac28:	4413      	add	r3, r2
    ac2a:	3307      	adds	r3, #7
    ac2c:	781b      	ldrb	r3, [r3, #0]
    ac2e:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    ac30:	7afb      	ldrb	r3, [r7, #11]
    ac32:	68fa      	ldr	r2, [r7, #12]
    ac34:	015b      	lsls	r3, r3, #5
    ac36:	4413      	add	r3, r2
    ac38:	f203 1309 	addw	r3, r3, #265	; 0x109
    ac3c:	781b      	ldrb	r3, [r3, #0]
    ac3e:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    ac40:	7aba      	ldrb	r2, [r7, #10]
    ac42:	7a7b      	ldrb	r3, [r7, #9]
    ac44:	4013      	ands	r3, r2
    ac46:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    ac48:	7abb      	ldrb	r3, [r7, #10]
    ac4a:	2b00      	cmp	r3, #0
    ac4c:	d027      	beq.n	ac9e <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    ac4e:	683b      	ldr	r3, [r7, #0]
    ac50:	7cdb      	ldrb	r3, [r3, #19]
    ac52:	f003 0307 	and.w	r3, r3, #7
    ac56:	b2db      	uxtb	r3, r3
    ac58:	2b01      	cmp	r3, #1
    ac5a:	d10c      	bne.n	ac76 <_usb_d_dev_handle_eps+0x7e>
    ac5c:	683b      	ldr	r3, [r7, #0]
    ac5e:	7cdb      	ldrb	r3, [r3, #19]
    ac60:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ac64:	b2db      	uxtb	r3, r3
    ac66:	2b00      	cmp	r3, #0
    ac68:	d105      	bne.n	ac76 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    ac6a:	7abb      	ldrb	r3, [r7, #10]
    ac6c:	4619      	mov	r1, r3
    ac6e:	6838      	ldr	r0, [r7, #0]
    ac70:	4b0c      	ldr	r3, [pc, #48]	; (aca4 <_usb_d_dev_handle_eps+0xac>)
    ac72:	4798      	blx	r3
    ac74:	e013      	b.n	ac9e <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    ac76:	683b      	ldr	r3, [r7, #0]
    ac78:	7cdb      	ldrb	r3, [r3, #19]
    ac7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    ac7e:	b2db      	uxtb	r3, r3
    ac80:	2b00      	cmp	r3, #0
    ac82:	d005      	beq.n	ac90 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    ac84:	7abb      	ldrb	r3, [r7, #10]
    ac86:	4619      	mov	r1, r3
    ac88:	6838      	ldr	r0, [r7, #0]
    ac8a:	4b07      	ldr	r3, [pc, #28]	; (aca8 <_usb_d_dev_handle_eps+0xb0>)
    ac8c:	4798      	blx	r3
    ac8e:	e006      	b.n	ac9e <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    ac90:	7abb      	ldrb	r3, [r7, #10]
    ac92:	4619      	mov	r1, r3
    ac94:	6838      	ldr	r0, [r7, #0]
    ac96:	4b05      	ldr	r3, [pc, #20]	; (acac <_usb_d_dev_handle_eps+0xb4>)
    ac98:	4798      	blx	r3
    ac9a:	e000      	b.n	ac9e <_usb_d_dev_handle_eps+0xa6>
		return;
    ac9c:	bf00      	nop
		}
	}
}
    ac9e:	3710      	adds	r7, #16
    aca0:	46bd      	mov	sp, r7
    aca2:	bd80      	pop	{r7, pc}
    aca4:	0000aa7d 	.word	0x0000aa7d
    aca8:	0000aad1 	.word	0x0000aad1
    acac:	0000ab65 	.word	0x0000ab65

0000acb0 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    acb0:	b580      	push	{r7, lr}
    acb2:	b084      	sub	sp, #16
    acb4:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    acb6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    acba:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    acbc:	68bb      	ldr	r3, [r7, #8]
    acbe:	8c1b      	ldrh	r3, [r3, #32]
    acc0:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    acc2:	88fb      	ldrh	r3, [r7, #6]
    acc4:	2b00      	cmp	r3, #0
    acc6:	d104      	bne.n	acd2 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    acc8:	4b13      	ldr	r3, [pc, #76]	; (ad18 <_usb_d_dev_handler+0x68>)
    acca:	4798      	blx	r3
    accc:	4603      	mov	r3, r0
    acce:	2b00      	cmp	r3, #0
    acd0:	d11e      	bne.n	ad10 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    acd2:	2300      	movs	r3, #0
    acd4:	73fb      	strb	r3, [r7, #15]
    acd6:	e017      	b.n	ad08 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    acd8:	7bfa      	ldrb	r2, [r7, #15]
    acda:	4613      	mov	r3, r2
    acdc:	009b      	lsls	r3, r3, #2
    acde:	4413      	add	r3, r2
    ace0:	009b      	lsls	r3, r3, #2
    ace2:	3310      	adds	r3, #16
    ace4:	4a0d      	ldr	r2, [pc, #52]	; (ad1c <_usb_d_dev_handler+0x6c>)
    ace6:	4413      	add	r3, r2
    ace8:	3304      	adds	r3, #4
    acea:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    acec:	683b      	ldr	r3, [r7, #0]
    acee:	7c9b      	ldrb	r3, [r3, #18]
    acf0:	2bff      	cmp	r3, #255	; 0xff
    acf2:	d005      	beq.n	ad00 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    acf4:	88fb      	ldrh	r3, [r7, #6]
    acf6:	6839      	ldr	r1, [r7, #0]
    acf8:	4618      	mov	r0, r3
    acfa:	4b09      	ldr	r3, [pc, #36]	; (ad20 <_usb_d_dev_handler+0x70>)
    acfc:	4798      	blx	r3
    acfe:	e000      	b.n	ad02 <_usb_d_dev_handler+0x52>
			continue;
    ad00:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    ad02:	7bfb      	ldrb	r3, [r7, #15]
    ad04:	3301      	adds	r3, #1
    ad06:	73fb      	strb	r3, [r7, #15]
    ad08:	7bfb      	ldrb	r3, [r7, #15]
    ad0a:	2b08      	cmp	r3, #8
    ad0c:	d9e4      	bls.n	acd8 <_usb_d_dev_handler+0x28>
    ad0e:	e000      	b.n	ad12 <_usb_d_dev_handler+0x62>
			return;
    ad10:	bf00      	nop
	}
}
    ad12:	3710      	adds	r7, #16
    ad14:	46bd      	mov	sp, r7
    ad16:	bd80      	pop	{r7, pc}
    ad18:	0000a209 	.word	0x0000a209
    ad1c:	20000e70 	.word	0x20000e70
    ad20:	0000abf9 	.word	0x0000abf9

0000ad24 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    ad24:	b580      	push	{r7, lr}
    ad26:	b082      	sub	sp, #8
    ad28:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    ad2a:	2300      	movs	r3, #0
    ad2c:	71fb      	strb	r3, [r7, #7]
    ad2e:	e023      	b.n	ad78 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    ad30:	79fa      	ldrb	r2, [r7, #7]
    ad32:	4613      	mov	r3, r2
    ad34:	009b      	lsls	r3, r3, #2
    ad36:	4413      	add	r3, r2
    ad38:	009b      	lsls	r3, r3, #2
    ad3a:	3310      	adds	r3, #16
    ad3c:	4a14      	ldr	r2, [pc, #80]	; (ad90 <_usb_d_dev_reset_epts+0x6c>)
    ad3e:	4413      	add	r3, r2
    ad40:	3304      	adds	r3, #4
    ad42:	2103      	movs	r1, #3
    ad44:	4618      	mov	r0, r3
    ad46:	4b13      	ldr	r3, [pc, #76]	; (ad94 <_usb_d_dev_reset_epts+0x70>)
    ad48:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    ad4a:	79fa      	ldrb	r2, [r7, #7]
    ad4c:	4910      	ldr	r1, [pc, #64]	; (ad90 <_usb_d_dev_reset_epts+0x6c>)
    ad4e:	4613      	mov	r3, r2
    ad50:	009b      	lsls	r3, r3, #2
    ad52:	4413      	add	r3, r2
    ad54:	009b      	lsls	r3, r3, #2
    ad56:	440b      	add	r3, r1
    ad58:	3326      	adds	r3, #38	; 0x26
    ad5a:	22ff      	movs	r2, #255	; 0xff
    ad5c:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    ad5e:	79fa      	ldrb	r2, [r7, #7]
    ad60:	490b      	ldr	r1, [pc, #44]	; (ad90 <_usb_d_dev_reset_epts+0x6c>)
    ad62:	4613      	mov	r3, r2
    ad64:	009b      	lsls	r3, r3, #2
    ad66:	4413      	add	r3, r2
    ad68:	009b      	lsls	r3, r3, #2
    ad6a:	440b      	add	r3, r1
    ad6c:	3327      	adds	r3, #39	; 0x27
    ad6e:	2200      	movs	r2, #0
    ad70:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    ad72:	79fb      	ldrb	r3, [r7, #7]
    ad74:	3301      	adds	r3, #1
    ad76:	71fb      	strb	r3, [r7, #7]
    ad78:	79fb      	ldrb	r3, [r7, #7]
    ad7a:	2b08      	cmp	r3, #8
    ad7c:	d9d8      	bls.n	ad30 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    ad7e:	22a0      	movs	r2, #160	; 0xa0
    ad80:	2100      	movs	r1, #0
    ad82:	4805      	ldr	r0, [pc, #20]	; (ad98 <_usb_d_dev_reset_epts+0x74>)
    ad84:	4b05      	ldr	r3, [pc, #20]	; (ad9c <_usb_d_dev_reset_epts+0x78>)
    ad86:	4798      	blx	r3
}
    ad88:	bf00      	nop
    ad8a:	3708      	adds	r7, #8
    ad8c:	46bd      	mov	sp, r7
    ad8e:	bd80      	pop	{r7, pc}
    ad90:	20000e70 	.word	0x20000e70
    ad94:	0000b5e9 	.word	0x0000b5e9
    ad98:	20000f38 	.word	0x20000f38
    ad9c:	000101c1 	.word	0x000101c1

0000ada0 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    ada0:	b580      	push	{r7, lr}
    ada2:	b084      	sub	sp, #16
    ada4:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    ada6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    adaa:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    adac:	2301      	movs	r3, #1
    adae:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    adb0:	2304      	movs	r3, #4
    adb2:	713b      	strb	r3, [r7, #4]
    adb4:	2300      	movs	r3, #0
    adb6:	717b      	strb	r3, [r7, #5]
    adb8:	2300      	movs	r3, #0
    adba:	71bb      	strb	r3, [r7, #6]
    adbc:	2300      	movs	r3, #0
    adbe:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    adc0:	2101      	movs	r1, #1
    adc2:	68f8      	ldr	r0, [r7, #12]
    adc4:	4b26      	ldr	r3, [pc, #152]	; (ae60 <_usb_d_dev_init+0xc0>)
    adc6:	4798      	blx	r3
    adc8:	4603      	mov	r3, r0
    adca:	f083 0301 	eor.w	r3, r3, #1
    adce:	b2db      	uxtb	r3, r3
    add0:	2b00      	cmp	r3, #0
    add2:	d011      	beq.n	adf8 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    add4:	2102      	movs	r1, #2
    add6:	68f8      	ldr	r0, [r7, #12]
    add8:	4b22      	ldr	r3, [pc, #136]	; (ae64 <_usb_d_dev_init+0xc4>)
    adda:	4798      	blx	r3
    addc:	4603      	mov	r3, r0
    adde:	2b00      	cmp	r3, #0
    ade0:	d006      	beq.n	adf0 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    ade2:	68f8      	ldr	r0, [r7, #12]
    ade4:	4b20      	ldr	r3, [pc, #128]	; (ae68 <_usb_d_dev_init+0xc8>)
    ade6:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    ade8:	2102      	movs	r1, #2
    adea:	68f8      	ldr	r0, [r7, #12]
    adec:	4b1f      	ldr	r3, [pc, #124]	; (ae6c <_usb_d_dev_init+0xcc>)
    adee:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    adf0:	2101      	movs	r1, #1
    adf2:	68f8      	ldr	r0, [r7, #12]
    adf4:	4b1e      	ldr	r3, [pc, #120]	; (ae70 <_usb_d_dev_init+0xd0>)
    adf6:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    adf8:	2101      	movs	r1, #1
    adfa:	68f8      	ldr	r0, [r7, #12]
    adfc:	4b1b      	ldr	r3, [pc, #108]	; (ae6c <_usb_d_dev_init+0xcc>)
    adfe:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    ae00:	4b1c      	ldr	r3, [pc, #112]	; (ae74 <_usb_d_dev_init+0xd4>)
    ae02:	4a1d      	ldr	r2, [pc, #116]	; (ae78 <_usb_d_dev_init+0xd8>)
    ae04:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    ae06:	4b1b      	ldr	r3, [pc, #108]	; (ae74 <_usb_d_dev_init+0xd4>)
    ae08:	4a1b      	ldr	r2, [pc, #108]	; (ae78 <_usb_d_dev_init+0xd8>)
    ae0a:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    ae0c:	4b19      	ldr	r3, [pc, #100]	; (ae74 <_usb_d_dev_init+0xd4>)
    ae0e:	4a1a      	ldr	r2, [pc, #104]	; (ae78 <_usb_d_dev_init+0xd8>)
    ae10:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    ae12:	4b18      	ldr	r3, [pc, #96]	; (ae74 <_usb_d_dev_init+0xd4>)
    ae14:	4a18      	ldr	r2, [pc, #96]	; (ae78 <_usb_d_dev_init+0xd8>)
    ae16:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    ae18:	4b16      	ldr	r3, [pc, #88]	; (ae74 <_usb_d_dev_init+0xd4>)
    ae1a:	4a17      	ldr	r2, [pc, #92]	; (ae78 <_usb_d_dev_init+0xd8>)
    ae1c:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    ae1e:	4b17      	ldr	r3, [pc, #92]	; (ae7c <_usb_d_dev_init+0xdc>)
    ae20:	4798      	blx	r3

	_usb_load_calib();
    ae22:	4b17      	ldr	r3, [pc, #92]	; (ae80 <_usb_d_dev_init+0xe0>)
    ae24:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    ae26:	2104      	movs	r1, #4
    ae28:	68f8      	ldr	r0, [r7, #12]
    ae2a:	4b11      	ldr	r3, [pc, #68]	; (ae70 <_usb_d_dev_init+0xd0>)
    ae2c:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    ae2e:	4b15      	ldr	r3, [pc, #84]	; (ae84 <_usb_d_dev_init+0xe4>)
    ae30:	4619      	mov	r1, r3
    ae32:	68f8      	ldr	r0, [r7, #12]
    ae34:	4b14      	ldr	r3, [pc, #80]	; (ae88 <_usb_d_dev_init+0xe8>)
    ae36:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    ae38:	7afb      	ldrb	r3, [r7, #11]
    ae3a:	f107 0210 	add.w	r2, r7, #16
    ae3e:	4413      	add	r3, r2
    ae40:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    ae44:	f043 0301 	orr.w	r3, r3, #1
    ae48:	b2db      	uxtb	r3, r3
    ae4a:	b29b      	uxth	r3, r3
    ae4c:	4619      	mov	r1, r3
    ae4e:	68f8      	ldr	r0, [r7, #12]
    ae50:	4b0e      	ldr	r3, [pc, #56]	; (ae8c <_usb_d_dev_init+0xec>)
    ae52:	4798      	blx	r3

	return ERR_NONE;
    ae54:	2300      	movs	r3, #0
}
    ae56:	4618      	mov	r0, r3
    ae58:	3710      	adds	r7, #16
    ae5a:	46bd      	mov	sp, r7
    ae5c:	bd80      	pop	{r7, pc}
    ae5e:	bf00      	nop
    ae60:	00009439 	.word	0x00009439
    ae64:	00009789 	.word	0x00009789
    ae68:	0000975d 	.word	0x0000975d
    ae6c:	0000940f 	.word	0x0000940f
    ae70:	000097b9 	.word	0x000097b9
    ae74:	20000e70 	.word	0x20000e70
    ae78:	00009881 	.word	0x00009881
    ae7c:	0000ad25 	.word	0x0000ad25
    ae80:	00009899 	.word	0x00009899
    ae84:	20000f38 	.word	0x20000f38
    ae88:	00009865 	.word	0x00009865
    ae8c:	00009829 	.word	0x00009829

0000ae90 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    ae90:	b580      	push	{r7, lr}
    ae92:	b082      	sub	sp, #8
    ae94:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    ae96:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ae9a:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    ae9c:	2103      	movs	r1, #3
    ae9e:	6878      	ldr	r0, [r7, #4]
    aea0:	4b17      	ldr	r3, [pc, #92]	; (af00 <_usb_d_dev_enable+0x70>)
    aea2:	4798      	blx	r3
    aea4:	4603      	mov	r3, r0
    aea6:	2b00      	cmp	r3, #0
    aea8:	d002      	beq.n	aeb0 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    aeaa:	f06f 0310 	mvn.w	r3, #16
    aeae:	e023      	b.n	aef8 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    aeb0:	6878      	ldr	r0, [r7, #4]
    aeb2:	4b14      	ldr	r3, [pc, #80]	; (af04 <_usb_d_dev_enable+0x74>)
    aeb4:	4798      	blx	r3
    aeb6:	4603      	mov	r3, r0
    aeb8:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    aeba:	78fb      	ldrb	r3, [r7, #3]
    aebc:	f003 0302 	and.w	r3, r3, #2
    aec0:	2b00      	cmp	r3, #0
    aec2:	d107      	bne.n	aed4 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    aec4:	78fb      	ldrb	r3, [r7, #3]
    aec6:	f043 0302 	orr.w	r3, r3, #2
    aeca:	b2db      	uxtb	r3, r3
    aecc:	4619      	mov	r1, r3
    aece:	6878      	ldr	r0, [r7, #4]
    aed0:	4b0d      	ldr	r3, [pc, #52]	; (af08 <_usb_d_dev_enable+0x78>)
    aed2:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    aed4:	2050      	movs	r0, #80	; 0x50
    aed6:	4b0d      	ldr	r3, [pc, #52]	; (af0c <_usb_d_dev_enable+0x7c>)
    aed8:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    aeda:	2051      	movs	r0, #81	; 0x51
    aedc:	4b0b      	ldr	r3, [pc, #44]	; (af0c <_usb_d_dev_enable+0x7c>)
    aede:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    aee0:	2052      	movs	r0, #82	; 0x52
    aee2:	4b0a      	ldr	r3, [pc, #40]	; (af0c <_usb_d_dev_enable+0x7c>)
    aee4:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    aee6:	2053      	movs	r0, #83	; 0x53
    aee8:	4b08      	ldr	r3, [pc, #32]	; (af0c <_usb_d_dev_enable+0x7c>)
    aeea:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    aeec:	f240 218d 	movw	r1, #653	; 0x28d
    aef0:	6878      	ldr	r0, [r7, #4]
    aef2:	4b07      	ldr	r3, [pc, #28]	; (af10 <_usb_d_dev_enable+0x80>)
    aef4:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    aef6:	2300      	movs	r3, #0
}
    aef8:	4618      	mov	r0, r3
    aefa:	3708      	adds	r7, #8
    aefc:	46bd      	mov	sp, r7
    aefe:	bd80      	pop	{r7, pc}
    af00:	00009733 	.word	0x00009733
    af04:	000097e1 	.word	0x000097e1
    af08:	000097b9 	.word	0x000097b9
    af0c:	00009345 	.word	0x00009345
    af10:	000096dd 	.word	0x000096dd

0000af14 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    af14:	b580      	push	{r7, lr}
    af16:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    af18:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af1c:	4b01      	ldr	r3, [pc, #4]	; (af24 <_usb_d_dev_attach+0x10>)
    af1e:	4798      	blx	r3
}
    af20:	bf00      	nop
    af22:	bd80      	pop	{r7, pc}
    af24:	00009805 	.word	0x00009805

0000af28 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    af28:	b580      	push	{r7, lr}
    af2a:	b082      	sub	sp, #8
    af2c:	af00      	add	r7, sp, #0
    af2e:	4603      	mov	r3, r0
    af30:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    af32:	79fb      	ldrb	r3, [r7, #7]
    af34:	f063 037f 	orn	r3, r3, #127	; 0x7f
    af38:	b2db      	uxtb	r3, r3
    af3a:	4619      	mov	r1, r3
    af3c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af40:	4b02      	ldr	r3, [pc, #8]	; (af4c <_usb_d_dev_set_address+0x24>)
    af42:	4798      	blx	r3
}
    af44:	bf00      	nop
    af46:	3708      	adds	r7, #8
    af48:	46bd      	mov	sp, r7
    af4a:	bd80      	pop	{r7, pc}
    af4c:	00009847 	.word	0x00009847

0000af50 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    af50:	b590      	push	{r4, r7, lr}
    af52:	b085      	sub	sp, #20
    af54:	af00      	add	r7, sp, #0
    af56:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    af58:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    af5c:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    af5e:	687b      	ldr	r3, [r7, #4]
    af60:	7c9b      	ldrb	r3, [r3, #18]
    af62:	f003 030f 	and.w	r3, r3, #15
    af66:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    af68:	687b      	ldr	r3, [r7, #4]
    af6a:	68db      	ldr	r3, [r3, #12]
    af6c:	461a      	mov	r2, r3
    af6e:	7afb      	ldrb	r3, [r7, #11]
    af70:	2100      	movs	r1, #0
    af72:	4618      	mov	r0, r3
    af74:	4b0f      	ldr	r3, [pc, #60]	; (afb4 <_usb_d_dev_trans_setup+0x64>)
    af76:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    af78:	687b      	ldr	r3, [r7, #4]
    af7a:	8a1b      	ldrh	r3, [r3, #16]
    af7c:	461a      	mov	r2, r3
    af7e:	7af8      	ldrb	r0, [r7, #11]
    af80:	2300      	movs	r3, #0
    af82:	2100      	movs	r1, #0
    af84:	4c0c      	ldr	r4, [pc, #48]	; (afb8 <_usb_d_dev_trans_setup+0x68>)
    af86:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    af88:	7afb      	ldrb	r3, [r7, #11]
    af8a:	22b0      	movs	r2, #176	; 0xb0
    af8c:	4619      	mov	r1, r3
    af8e:	68f8      	ldr	r0, [r7, #12]
    af90:	4b0a      	ldr	r3, [pc, #40]	; (afbc <_usb_d_dev_trans_setup+0x6c>)
    af92:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    af94:	7afb      	ldrb	r3, [r7, #11]
    af96:	2200      	movs	r2, #0
    af98:	2100      	movs	r1, #0
    af9a:	4618      	mov	r0, r3
    af9c:	4b08      	ldr	r3, [pc, #32]	; (afc0 <_usb_d_dev_trans_setup+0x70>)
    af9e:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    afa0:	7afb      	ldrb	r3, [r7, #11]
    afa2:	2210      	movs	r2, #16
    afa4:	4619      	mov	r1, r3
    afa6:	68f8      	ldr	r0, [r7, #12]
    afa8:	4b06      	ldr	r3, [pc, #24]	; (afc4 <_usb_d_dev_trans_setup+0x74>)
    afaa:	4798      	blx	r3
}
    afac:	bf00      	nop
    afae:	3714      	adds	r7, #20
    afb0:	46bd      	mov	sp, r7
    afb2:	bd90      	pop	{r4, r7, pc}
    afb4:	00009ce5 	.word	0x00009ce5
    afb8:	00009e6d 	.word	0x00009e6d
    afbc:	00009545 	.word	0x00009545
    afc0:	00009f3d 	.word	0x00009f3d
    afc4:	00009599 	.word	0x00009599

0000afc8 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    afc8:	b580      	push	{r7, lr}
    afca:	b088      	sub	sp, #32
    afcc:	af00      	add	r7, sp, #0
    afce:	4603      	mov	r3, r0
    afd0:	71fb      	strb	r3, [r7, #7]
    afd2:	460b      	mov	r3, r1
    afd4:	71bb      	strb	r3, [r7, #6]
    afd6:	4613      	mov	r3, r2
    afd8:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    afda:	79fb      	ldrb	r3, [r7, #7]
    afdc:	f003 030f 	and.w	r3, r3, #15
    afe0:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    afe2:	79fb      	ldrb	r3, [r7, #7]
    afe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    afe8:	2b00      	cmp	r3, #0
    afea:	bf14      	ite	ne
    afec:	2301      	movne	r3, #1
    afee:	2300      	moveq	r3, #0
    aff0:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    aff2:	7fba      	ldrb	r2, [r7, #30]
    aff4:	7ffb      	ldrb	r3, [r7, #31]
    aff6:	4611      	mov	r1, r2
    aff8:	4618      	mov	r0, r3
    affa:	4b3e      	ldr	r3, [pc, #248]	; (b0f4 <_usb_d_dev_ep_init+0x12c>)
    affc:	4798      	blx	r3
    affe:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    b000:	79bb      	ldrb	r3, [r7, #6]
    b002:	f003 0303 	and.w	r3, r3, #3
    b006:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    b008:	7ffa      	ldrb	r2, [r7, #31]
    b00a:	4613      	mov	r3, r2
    b00c:	005b      	lsls	r3, r3, #1
    b00e:	4413      	add	r3, r2
    b010:	009b      	lsls	r3, r3, #2
    b012:	4a39      	ldr	r2, [pc, #228]	; (b0f8 <_usb_d_dev_ep_init+0x130>)
    b014:	4413      	add	r3, r2
    b016:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    b018:	7ffb      	ldrb	r3, [r7, #31]
    b01a:	2b04      	cmp	r3, #4
    b01c:	d902      	bls.n	b024 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    b01e:	f06f 0311 	mvn.w	r3, #17
    b022:	e063      	b.n	b0ec <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    b024:	69bb      	ldr	r3, [r7, #24]
    b026:	7c9b      	ldrb	r3, [r3, #18]
    b028:	2bff      	cmp	r3, #255	; 0xff
    b02a:	d002      	beq.n	b032 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    b02c:	f06f 0313 	mvn.w	r3, #19
    b030:	e05c      	b.n	b0ec <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    b032:	7dfb      	ldrb	r3, [r7, #23]
    b034:	2b00      	cmp	r3, #0
    b036:	d11f      	bne.n	b078 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    b038:	7fbb      	ldrb	r3, [r7, #30]
    b03a:	2b00      	cmp	r3, #0
    b03c:	bf14      	ite	ne
    b03e:	2301      	movne	r3, #1
    b040:	2300      	moveq	r3, #0
    b042:	b2db      	uxtb	r3, r3
    b044:	f083 0301 	eor.w	r3, r3, #1
    b048:	b2db      	uxtb	r3, r3
    b04a:	f003 0301 	and.w	r3, r3, #1
    b04e:	b2da      	uxtb	r2, r3
    b050:	7ffb      	ldrb	r3, [r7, #31]
    b052:	4611      	mov	r1, r2
    b054:	4618      	mov	r0, r3
    b056:	4b27      	ldr	r3, [pc, #156]	; (b0f4 <_usb_d_dev_ep_init+0x12c>)
    b058:	4798      	blx	r3
    b05a:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    b05c:	68fb      	ldr	r3, [r7, #12]
    b05e:	7c9b      	ldrb	r3, [r3, #18]
    b060:	2bff      	cmp	r3, #255	; 0xff
    b062:	d002      	beq.n	b06a <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    b064:	f06f 0313 	mvn.w	r3, #19
    b068:	e040      	b.n	b0ec <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    b06a:	693b      	ldr	r3, [r7, #16]
    b06c:	681b      	ldr	r3, [r3, #0]
    b06e:	2b00      	cmp	r3, #0
    b070:	d102      	bne.n	b078 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    b072:	f06f 0312 	mvn.w	r3, #18
    b076:	e039      	b.n	b0ec <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    b078:	7fbb      	ldrb	r3, [r7, #30]
    b07a:	2b00      	cmp	r3, #0
    b07c:	d007      	beq.n	b08e <_usb_d_dev_ep_init+0xc6>
    b07e:	693b      	ldr	r3, [r7, #16]
    b080:	685b      	ldr	r3, [r3, #4]
    b082:	2b00      	cmp	r3, #0
    b084:	bf14      	ite	ne
    b086:	2301      	movne	r3, #1
    b088:	2300      	moveq	r3, #0
    b08a:	b2db      	uxtb	r3, r3
    b08c:	e006      	b.n	b09c <_usb_d_dev_ep_init+0xd4>
    b08e:	693b      	ldr	r3, [r7, #16]
    b090:	681b      	ldr	r3, [r3, #0]
    b092:	2b00      	cmp	r3, #0
    b094:	bf14      	ite	ne
    b096:	2301      	movne	r3, #1
    b098:	2300      	moveq	r3, #0
    b09a:	b2db      	uxtb	r3, r3
    b09c:	2b00      	cmp	r3, #0
    b09e:	d00f      	beq.n	b0c0 <_usb_d_dev_ep_init+0xf8>
    b0a0:	7fbb      	ldrb	r3, [r7, #30]
    b0a2:	2b00      	cmp	r3, #0
    b0a4:	d003      	beq.n	b0ae <_usb_d_dev_ep_init+0xe6>
    b0a6:	693b      	ldr	r3, [r7, #16]
    b0a8:	895b      	ldrh	r3, [r3, #10]
    b0aa:	461a      	mov	r2, r3
    b0ac:	e002      	b.n	b0b4 <_usb_d_dev_ep_init+0xec>
    b0ae:	693b      	ldr	r3, [r7, #16]
    b0b0:	891b      	ldrh	r3, [r3, #8]
    b0b2:	461a      	mov	r2, r3
    b0b4:	88bb      	ldrh	r3, [r7, #4]
    b0b6:	429a      	cmp	r2, r3
    b0b8:	da02      	bge.n	b0c0 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    b0ba:	f06f 0312 	mvn.w	r3, #18
    b0be:	e015      	b.n	b0ec <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    b0c0:	7fbb      	ldrb	r3, [r7, #30]
    b0c2:	2b00      	cmp	r3, #0
    b0c4:	d002      	beq.n	b0cc <_usb_d_dev_ep_init+0x104>
    b0c6:	693b      	ldr	r3, [r7, #16]
    b0c8:	685b      	ldr	r3, [r3, #4]
    b0ca:	e001      	b.n	b0d0 <_usb_d_dev_ep_init+0x108>
    b0cc:	693b      	ldr	r3, [r7, #16]
    b0ce:	681b      	ldr	r3, [r3, #0]
    b0d0:	69ba      	ldr	r2, [r7, #24]
    b0d2:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    b0d4:	69bb      	ldr	r3, [r7, #24]
    b0d6:	88ba      	ldrh	r2, [r7, #4]
    b0d8:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    b0da:	7dfb      	ldrb	r3, [r7, #23]
    b0dc:	3301      	adds	r3, #1
    b0de:	b2da      	uxtb	r2, r3
    b0e0:	69bb      	ldr	r3, [r7, #24]
    b0e2:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    b0e4:	69bb      	ldr	r3, [r7, #24]
    b0e6:	79fa      	ldrb	r2, [r7, #7]
    b0e8:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    b0ea:	2300      	movs	r3, #0
}
    b0ec:	4618      	mov	r0, r3
    b0ee:	3720      	adds	r7, #32
    b0f0:	46bd      	mov	sp, r7
    b0f2:	bd80      	pop	{r7, pc}
    b0f4:	00009ff9 	.word	0x00009ff9
    b0f8:	000106f4 	.word	0x000106f4

0000b0fc <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    b0fc:	b580      	push	{r7, lr}
    b0fe:	b086      	sub	sp, #24
    b100:	af00      	add	r7, sp, #0
    b102:	4603      	mov	r3, r0
    b104:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    b106:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b10a:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    b10c:	79fb      	ldrb	r3, [r7, #7]
    b10e:	f003 030f 	and.w	r3, r3, #15
    b112:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    b114:	79fb      	ldrb	r3, [r7, #7]
    b116:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b11a:	2b00      	cmp	r3, #0
    b11c:	bf14      	ite	ne
    b11e:	2301      	movne	r3, #1
    b120:	2300      	moveq	r3, #0
    b122:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b124:	7cba      	ldrb	r2, [r7, #18]
    b126:	7cfb      	ldrb	r3, [r7, #19]
    b128:	4611      	mov	r1, r2
    b12a:	4618      	mov	r0, r3
    b12c:	4b2a      	ldr	r3, [pc, #168]	; (b1d8 <_usb_d_dev_ep_deinit+0xdc>)
    b12e:	4798      	blx	r3
    b130:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    b132:	7cfb      	ldrb	r3, [r7, #19]
    b134:	2b04      	cmp	r3, #4
    b136:	d84a      	bhi.n	b1ce <_usb_d_dev_ep_deinit+0xd2>
    b138:	68fb      	ldr	r3, [r7, #12]
    b13a:	7c9b      	ldrb	r3, [r3, #18]
    b13c:	2bff      	cmp	r3, #255	; 0xff
    b13e:	d046      	beq.n	b1ce <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    b140:	7cbb      	ldrb	r3, [r7, #18]
    b142:	2203      	movs	r2, #3
    b144:	4619      	mov	r1, r3
    b146:	68f8      	ldr	r0, [r7, #12]
    b148:	4b24      	ldr	r3, [pc, #144]	; (b1dc <_usb_d_dev_ep_deinit+0xe0>)
    b14a:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    b14c:	68fb      	ldr	r3, [r7, #12]
    b14e:	7cdb      	ldrb	r3, [r3, #19]
    b150:	f003 0307 	and.w	r3, r3, #7
    b154:	b2db      	uxtb	r3, r3
    b156:	2b01      	cmp	r3, #1
    b158:	d107      	bne.n	b16a <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    b15a:	79fb      	ldrb	r3, [r7, #7]
    b15c:	697a      	ldr	r2, [r7, #20]
    b15e:	3308      	adds	r3, #8
    b160:	015b      	lsls	r3, r3, #5
    b162:	4413      	add	r3, r2
    b164:	2200      	movs	r2, #0
    b166:	701a      	strb	r2, [r3, #0]
    b168:	e02a      	b.n	b1c0 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    b16a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    b16e:	2b00      	cmp	r3, #0
    b170:	da15      	bge.n	b19e <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    b172:	79fb      	ldrb	r3, [r7, #7]
    b174:	f003 030f 	and.w	r3, r3, #15
    b178:	79fa      	ldrb	r2, [r7, #7]
    b17a:	f002 020f 	and.w	r2, r2, #15
    b17e:	6979      	ldr	r1, [r7, #20]
    b180:	3208      	adds	r2, #8
    b182:	0152      	lsls	r2, r2, #5
    b184:	440a      	add	r2, r1
    b186:	7812      	ldrb	r2, [r2, #0]
    b188:	b2d2      	uxtb	r2, r2
    b18a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    b18e:	b2d1      	uxtb	r1, r2
    b190:	697a      	ldr	r2, [r7, #20]
    b192:	3308      	adds	r3, #8
    b194:	015b      	lsls	r3, r3, #5
    b196:	4413      	add	r3, r2
    b198:	460a      	mov	r2, r1
    b19a:	701a      	strb	r2, [r3, #0]
    b19c:	e010      	b.n	b1c0 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    b19e:	79fb      	ldrb	r3, [r7, #7]
    b1a0:	79fa      	ldrb	r2, [r7, #7]
    b1a2:	6979      	ldr	r1, [r7, #20]
    b1a4:	3208      	adds	r2, #8
    b1a6:	0152      	lsls	r2, r2, #5
    b1a8:	440a      	add	r2, r1
    b1aa:	7812      	ldrb	r2, [r2, #0]
    b1ac:	b2d2      	uxtb	r2, r2
    b1ae:	f022 0207 	bic.w	r2, r2, #7
    b1b2:	b2d1      	uxtb	r1, r2
    b1b4:	697a      	ldr	r2, [r7, #20]
    b1b6:	3308      	adds	r3, #8
    b1b8:	015b      	lsls	r3, r3, #5
    b1ba:	4413      	add	r3, r2
    b1bc:	460a      	mov	r2, r1
    b1be:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    b1c0:	68fb      	ldr	r3, [r7, #12]
    b1c2:	2200      	movs	r2, #0
    b1c4:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    b1c6:	68fb      	ldr	r3, [r7, #12]
    b1c8:	22ff      	movs	r2, #255	; 0xff
    b1ca:	749a      	strb	r2, [r3, #18]
    b1cc:	e000      	b.n	b1d0 <_usb_d_dev_ep_deinit+0xd4>
		return;
    b1ce:	bf00      	nop
}
    b1d0:	3718      	adds	r7, #24
    b1d2:	46bd      	mov	sp, r7
    b1d4:	bd80      	pop	{r7, pc}
    b1d6:	bf00      	nop
    b1d8:	00009ff9 	.word	0x00009ff9
    b1dc:	0000b631 	.word	0x0000b631

0000b1e0 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    b1e0:	b5b0      	push	{r4, r5, r7, lr}
    b1e2:	b088      	sub	sp, #32
    b1e4:	af00      	add	r7, sp, #0
    b1e6:	4603      	mov	r3, r0
    b1e8:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    b1ea:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b1ee:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    b1f0:	79fb      	ldrb	r3, [r7, #7]
    b1f2:	f003 030f 	and.w	r3, r3, #15
    b1f6:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    b1f8:	79fb      	ldrb	r3, [r7, #7]
    b1fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b1fe:	2b00      	cmp	r3, #0
    b200:	bf14      	ite	ne
    b202:	2301      	movne	r3, #1
    b204:	2300      	moveq	r3, #0
    b206:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    b208:	7eba      	ldrb	r2, [r7, #26]
    b20a:	7efb      	ldrb	r3, [r7, #27]
    b20c:	4611      	mov	r1, r2
    b20e:	4618      	mov	r0, r3
    b210:	4b70      	ldr	r3, [pc, #448]	; (b3d4 <_usb_d_dev_ep_enable+0x1f4>)
    b212:	4798      	blx	r3
    b214:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    b216:	7efb      	ldrb	r3, [r7, #27]
    b218:	4619      	mov	r1, r3
    b21a:	69f8      	ldr	r0, [r7, #28]
    b21c:	4b6e      	ldr	r3, [pc, #440]	; (b3d8 <_usb_d_dev_ep_enable+0x1f8>)
    b21e:	4798      	blx	r3
    b220:	4603      	mov	r3, r0
    b222:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    b224:	7efb      	ldrb	r3, [r7, #27]
    b226:	2b04      	cmp	r3, #4
    b228:	d803      	bhi.n	b232 <_usb_d_dev_ep_enable+0x52>
    b22a:	697b      	ldr	r3, [r7, #20]
    b22c:	7c9b      	ldrb	r3, [r3, #18]
    b22e:	2bff      	cmp	r3, #255	; 0xff
    b230:	d102      	bne.n	b238 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    b232:	f06f 0311 	mvn.w	r3, #17
    b236:	e0c8      	b.n	b3ca <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    b238:	7efb      	ldrb	r3, [r7, #27]
    b23a:	015b      	lsls	r3, r3, #5
    b23c:	4a67      	ldr	r2, [pc, #412]	; (b3dc <_usb_d_dev_ep_enable+0x1fc>)
    b23e:	4413      	add	r3, r2
    b240:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    b242:	697b      	ldr	r3, [r7, #20]
    b244:	7cdb      	ldrb	r3, [r3, #19]
    b246:	f003 0307 	and.w	r3, r3, #7
    b24a:	b2db      	uxtb	r3, r3
    b24c:	2b01      	cmp	r3, #1
    b24e:	d14b      	bne.n	b2e8 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    b250:	7cfb      	ldrb	r3, [r7, #19]
    b252:	f003 0377 	and.w	r3, r3, #119	; 0x77
    b256:	2b00      	cmp	r3, #0
    b258:	d002      	beq.n	b260 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    b25a:	f06f 0313 	mvn.w	r3, #19
    b25e:	e0b4      	b.n	b3ca <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    b260:	7efb      	ldrb	r3, [r7, #27]
    b262:	2211      	movs	r2, #17
    b264:	4619      	mov	r1, r3
    b266:	69f8      	ldr	r0, [r7, #28]
    b268:	4b5d      	ldr	r3, [pc, #372]	; (b3e0 <_usb_d_dev_ep_enable+0x200>)
    b26a:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b26c:	697b      	ldr	r3, [r7, #20]
    b26e:	8a1b      	ldrh	r3, [r3, #16]
    b270:	039b      	lsls	r3, r3, #14
    b272:	4c5c      	ldr	r4, [pc, #368]	; (b3e4 <_usb_d_dev_ep_enable+0x204>)
    b274:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b276:	697b      	ldr	r3, [r7, #20]
    b278:	8a1b      	ldrh	r3, [r3, #16]
    b27a:	4618      	mov	r0, r3
    b27c:	4b5a      	ldr	r3, [pc, #360]	; (b3e8 <_usb_d_dev_ep_enable+0x208>)
    b27e:	4798      	blx	r3
    b280:	4603      	mov	r3, r0
    b282:	071b      	lsls	r3, r3, #28
    b284:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b288:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b28c:	68fb      	ldr	r3, [r7, #12]
    b28e:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    b290:	68fb      	ldr	r3, [r7, #12]
    b292:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b296:	697b      	ldr	r3, [r7, #20]
    b298:	8a1b      	ldrh	r3, [r3, #16]
    b29a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    b29e:	697b      	ldr	r3, [r7, #20]
    b2a0:	8a1b      	ldrh	r3, [r3, #16]
    b2a2:	4618      	mov	r0, r3
    b2a4:	4b50      	ldr	r3, [pc, #320]	; (b3e8 <_usb_d_dev_ep_enable+0x208>)
    b2a6:	4798      	blx	r3
    b2a8:	4603      	mov	r3, r0
    b2aa:	071b      	lsls	r3, r3, #28
    b2ac:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b2b0:	432b      	orrs	r3, r5
    b2b2:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b2b4:	7efb      	ldrb	r3, [r7, #27]
    b2b6:	2200      	movs	r2, #0
    b2b8:	2100      	movs	r1, #0
    b2ba:	4618      	mov	r0, r3
    b2bc:	4b4b      	ldr	r3, [pc, #300]	; (b3ec <_usb_d_dev_ep_enable+0x20c>)
    b2be:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    b2c0:	7efb      	ldrb	r3, [r7, #27]
    b2c2:	2200      	movs	r2, #0
    b2c4:	2101      	movs	r1, #1
    b2c6:	4618      	mov	r0, r3
    b2c8:	4b49      	ldr	r3, [pc, #292]	; (b3f0 <_usb_d_dev_ep_enable+0x210>)
    b2ca:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    b2cc:	7efb      	ldrb	r3, [r7, #27]
    b2ce:	2100      	movs	r1, #0
    b2d0:	4618      	mov	r0, r3
    b2d2:	4b48      	ldr	r3, [pc, #288]	; (b3f4 <_usb_d_dev_ep_enable+0x214>)
    b2d4:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    b2d6:	7efb      	ldrb	r3, [r7, #27]
    b2d8:	2101      	movs	r1, #1
    b2da:	4618      	mov	r0, r3
    b2dc:	4b45      	ldr	r3, [pc, #276]	; (b3f4 <_usb_d_dev_ep_enable+0x214>)
    b2de:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    b2e0:	6978      	ldr	r0, [r7, #20]
    b2e2:	4b45      	ldr	r3, [pc, #276]	; (b3f8 <_usb_d_dev_ep_enable+0x218>)
    b2e4:	4798      	blx	r3
    b2e6:	e06f      	b.n	b3c8 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    b2e8:	7ebb      	ldrb	r3, [r7, #26]
    b2ea:	2b00      	cmp	r3, #0
    b2ec:	d038      	beq.n	b360 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    b2ee:	7cfb      	ldrb	r3, [r7, #19]
    b2f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b2f4:	2b00      	cmp	r3, #0
    b2f6:	d002      	beq.n	b2fe <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    b2f8:	f06f 0313 	mvn.w	r3, #19
    b2fc:	e065      	b.n	b3ca <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    b2fe:	697b      	ldr	r3, [r7, #20]
    b300:	7cdb      	ldrb	r3, [r3, #19]
    b302:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b306:	b2db      	uxtb	r3, r3
    b308:	011b      	lsls	r3, r3, #4
    b30a:	b2db      	uxtb	r3, r3
    b30c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b310:	b2da      	uxtb	r2, r3
    b312:	7cfb      	ldrb	r3, [r7, #19]
    b314:	4313      	orrs	r3, r2
    b316:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    b318:	7cfa      	ldrb	r2, [r7, #19]
    b31a:	7efb      	ldrb	r3, [r7, #27]
    b31c:	4619      	mov	r1, r3
    b31e:	69f8      	ldr	r0, [r7, #28]
    b320:	4b2f      	ldr	r3, [pc, #188]	; (b3e0 <_usb_d_dev_ep_enable+0x200>)
    b322:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    b324:	68fb      	ldr	r3, [r7, #12]
    b326:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b32a:	697b      	ldr	r3, [r7, #20]
    b32c:	8a1b      	ldrh	r3, [r3, #16]
    b32e:	f3c3 050d 	ubfx	r5, r3, #0, #14
    b332:	697b      	ldr	r3, [r7, #20]
    b334:	8a1b      	ldrh	r3, [r3, #16]
    b336:	4618      	mov	r0, r3
    b338:	4b2b      	ldr	r3, [pc, #172]	; (b3e8 <_usb_d_dev_ep_enable+0x208>)
    b33a:	4798      	blx	r3
    b33c:	4603      	mov	r3, r0
    b33e:	071b      	lsls	r3, r3, #28
    b340:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b344:	432b      	orrs	r3, r5
    b346:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b348:	7efb      	ldrb	r3, [r7, #27]
    b34a:	2200      	movs	r2, #0
    b34c:	2101      	movs	r1, #1
    b34e:	4618      	mov	r0, r3
    b350:	4b27      	ldr	r3, [pc, #156]	; (b3f0 <_usb_d_dev_ep_enable+0x210>)
    b352:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    b354:	7efb      	ldrb	r3, [r7, #27]
    b356:	2101      	movs	r1, #1
    b358:	4618      	mov	r0, r3
    b35a:	4b26      	ldr	r3, [pc, #152]	; (b3f4 <_usb_d_dev_ep_enable+0x214>)
    b35c:	4798      	blx	r3
    b35e:	e033      	b.n	b3c8 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    b360:	7cfb      	ldrb	r3, [r7, #19]
    b362:	f003 0307 	and.w	r3, r3, #7
    b366:	2b00      	cmp	r3, #0
    b368:	d002      	beq.n	b370 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    b36a:	f06f 0313 	mvn.w	r3, #19
    b36e:	e02c      	b.n	b3ca <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    b370:	697b      	ldr	r3, [r7, #20]
    b372:	7cdb      	ldrb	r3, [r3, #19]
    b374:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b378:	b2db      	uxtb	r3, r3
    b37a:	461a      	mov	r2, r3
    b37c:	7cfb      	ldrb	r3, [r7, #19]
    b37e:	4313      	orrs	r3, r2
    b380:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    b382:	7cfa      	ldrb	r2, [r7, #19]
    b384:	7efb      	ldrb	r3, [r7, #27]
    b386:	4619      	mov	r1, r3
    b388:	69f8      	ldr	r0, [r7, #28]
    b38a:	4b15      	ldr	r3, [pc, #84]	; (b3e0 <_usb_d_dev_ep_enable+0x200>)
    b38c:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b38e:	697b      	ldr	r3, [r7, #20]
    b390:	8a1b      	ldrh	r3, [r3, #16]
    b392:	039b      	lsls	r3, r3, #14
    b394:	4c13      	ldr	r4, [pc, #76]	; (b3e4 <_usb_d_dev_ep_enable+0x204>)
    b396:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b398:	697b      	ldr	r3, [r7, #20]
    b39a:	8a1b      	ldrh	r3, [r3, #16]
    b39c:	4618      	mov	r0, r3
    b39e:	4b12      	ldr	r3, [pc, #72]	; (b3e8 <_usb_d_dev_ep_enable+0x208>)
    b3a0:	4798      	blx	r3
    b3a2:	4603      	mov	r3, r0
    b3a4:	071b      	lsls	r3, r3, #28
    b3a6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b3aa:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b3ae:	68fb      	ldr	r3, [r7, #12]
    b3b0:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b3b2:	7efb      	ldrb	r3, [r7, #27]
    b3b4:	2200      	movs	r2, #0
    b3b6:	2100      	movs	r1, #0
    b3b8:	4618      	mov	r0, r3
    b3ba:	4b0c      	ldr	r3, [pc, #48]	; (b3ec <_usb_d_dev_ep_enable+0x20c>)
    b3bc:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    b3be:	7efb      	ldrb	r3, [r7, #27]
    b3c0:	2100      	movs	r1, #0
    b3c2:	4618      	mov	r0, r3
    b3c4:	4b0b      	ldr	r3, [pc, #44]	; (b3f4 <_usb_d_dev_ep_enable+0x214>)
    b3c6:	4798      	blx	r3
	}

	return USB_OK;
    b3c8:	2300      	movs	r3, #0
}
    b3ca:	4618      	mov	r0, r3
    b3cc:	3720      	adds	r7, #32
    b3ce:	46bd      	mov	sp, r7
    b3d0:	bdb0      	pop	{r4, r5, r7, pc}
    b3d2:	bf00      	nop
    b3d4:	00009ff9 	.word	0x00009ff9
    b3d8:	0000967f 	.word	0x0000967f
    b3dc:	20000f38 	.word	0x20000f38
    b3e0:	00009655 	.word	0x00009655
    b3e4:	0fffc000 	.word	0x0fffc000
    b3e8:	00009f95 	.word	0x00009f95
    b3ec:	00009f3d 	.word	0x00009f3d
    b3f0:	00009ee5 	.word	0x00009ee5
    b3f4:	00009ead 	.word	0x00009ead
    b3f8:	0000af51 	.word	0x0000af51

0000b3fc <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    b3fc:	b580      	push	{r7, lr}
    b3fe:	b084      	sub	sp, #16
    b400:	af00      	add	r7, sp, #0
    b402:	6078      	str	r0, [r7, #4]
    b404:	460b      	mov	r3, r1
    b406:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b408:	687b      	ldr	r3, [r7, #4]
    b40a:	7c9b      	ldrb	r3, [r3, #18]
    b40c:	f003 030f 	and.w	r3, r3, #15
    b410:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    b412:	78fa      	ldrb	r2, [r7, #3]
    b414:	7bfb      	ldrb	r3, [r7, #15]
    b416:	4611      	mov	r1, r2
    b418:	4618      	mov	r0, r3
    b41a:	4b03      	ldr	r3, [pc, #12]	; (b428 <_usb_d_dev_ep_stall_get+0x2c>)
    b41c:	4798      	blx	r3
    b41e:	4603      	mov	r3, r0
}
    b420:	4618      	mov	r0, r3
    b422:	3710      	adds	r7, #16
    b424:	46bd      	mov	sp, r7
    b426:	bd80      	pop	{r7, pc}
    b428:	00009aed 	.word	0x00009aed

0000b42c <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    b42c:	b580      	push	{r7, lr}
    b42e:	b084      	sub	sp, #16
    b430:	af00      	add	r7, sp, #0
    b432:	6078      	str	r0, [r7, #4]
    b434:	460b      	mov	r3, r1
    b436:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b438:	687b      	ldr	r3, [r7, #4]
    b43a:	7c9b      	ldrb	r3, [r3, #18]
    b43c:	f003 030f 	and.w	r3, r3, #15
    b440:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    b442:	78f9      	ldrb	r1, [r7, #3]
    b444:	7bfb      	ldrb	r3, [r7, #15]
    b446:	2201      	movs	r2, #1
    b448:	4618      	mov	r0, r3
    b44a:	4b0a      	ldr	r3, [pc, #40]	; (b474 <_usb_d_dev_ep_stall_set+0x48>)
    b44c:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b44e:	78fb      	ldrb	r3, [r7, #3]
    b450:	2220      	movs	r2, #32
    b452:	409a      	lsls	r2, r3
    b454:	7bfb      	ldrb	r3, [r7, #15]
    b456:	4611      	mov	r1, r2
    b458:	4618      	mov	r0, r3
    b45a:	4b07      	ldr	r3, [pc, #28]	; (b478 <_usb_d_dev_ep_stall_set+0x4c>)
    b45c:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    b45e:	687a      	ldr	r2, [r7, #4]
    b460:	7cd3      	ldrb	r3, [r2, #19]
    b462:	f043 0308 	orr.w	r3, r3, #8
    b466:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    b468:	2300      	movs	r3, #0
}
    b46a:	4618      	mov	r0, r3
    b46c:	3710      	adds	r7, #16
    b46e:	46bd      	mov	sp, r7
    b470:	bd80      	pop	{r7, pc}
    b472:	bf00      	nop
    b474:	00009a95 	.word	0x00009a95
    b478:	00009a15 	.word	0x00009a15

0000b47c <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    b47c:	b580      	push	{r7, lr}
    b47e:	b084      	sub	sp, #16
    b480:	af00      	add	r7, sp, #0
    b482:	6078      	str	r0, [r7, #4]
    b484:	460b      	mov	r3, r1
    b486:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    b488:	687b      	ldr	r3, [r7, #4]
    b48a:	7c9b      	ldrb	r3, [r3, #18]
    b48c:	f003 030f 	and.w	r3, r3, #15
    b490:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    b492:	78fa      	ldrb	r2, [r7, #3]
    b494:	7bfb      	ldrb	r3, [r7, #15]
    b496:	4611      	mov	r1, r2
    b498:	4618      	mov	r0, r3
    b49a:	4b28      	ldr	r3, [pc, #160]	; (b53c <_usb_d_dev_ep_stall_clr+0xc0>)
    b49c:	4798      	blx	r3
    b49e:	4603      	mov	r3, r0
    b4a0:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    b4a2:	7bbb      	ldrb	r3, [r7, #14]
    b4a4:	f083 0301 	eor.w	r3, r3, #1
    b4a8:	b2db      	uxtb	r3, r3
    b4aa:	2b00      	cmp	r3, #0
    b4ac:	d001      	beq.n	b4b2 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    b4ae:	2300      	movs	r3, #0
    b4b0:	e040      	b.n	b534 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    b4b2:	78f9      	ldrb	r1, [r7, #3]
    b4b4:	7bfb      	ldrb	r3, [r7, #15]
    b4b6:	2200      	movs	r2, #0
    b4b8:	4618      	mov	r0, r3
    b4ba:	4b21      	ldr	r3, [pc, #132]	; (b540 <_usb_d_dev_ep_stall_clr+0xc4>)
    b4bc:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b4be:	78fb      	ldrb	r3, [r7, #3]
    b4c0:	2220      	movs	r2, #32
    b4c2:	409a      	lsls	r2, r3
    b4c4:	7bfb      	ldrb	r3, [r7, #15]
    b4c6:	4611      	mov	r1, r2
    b4c8:	4618      	mov	r0, r3
    b4ca:	4b1e      	ldr	r3, [pc, #120]	; (b544 <_usb_d_dev_ep_stall_clr+0xc8>)
    b4cc:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    b4ce:	78fa      	ldrb	r2, [r7, #3]
    b4d0:	7bfb      	ldrb	r3, [r7, #15]
    b4d2:	4611      	mov	r1, r2
    b4d4:	4618      	mov	r0, r3
    b4d6:	4b1c      	ldr	r3, [pc, #112]	; (b548 <_usb_d_dev_ep_stall_clr+0xcc>)
    b4d8:	4798      	blx	r3
    b4da:	4603      	mov	r3, r0
    b4dc:	2b00      	cmp	r3, #0
    b4de:	d00b      	beq.n	b4f8 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    b4e0:	78fa      	ldrb	r2, [r7, #3]
    b4e2:	7bfb      	ldrb	r3, [r7, #15]
    b4e4:	4611      	mov	r1, r2
    b4e6:	4618      	mov	r0, r3
    b4e8:	4b18      	ldr	r3, [pc, #96]	; (b54c <_usb_d_dev_ep_stall_clr+0xd0>)
    b4ea:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    b4ec:	78f9      	ldrb	r1, [r7, #3]
    b4ee:	7bfb      	ldrb	r3, [r7, #15]
    b4f0:	2200      	movs	r2, #0
    b4f2:	4618      	mov	r0, r3
    b4f4:	4b16      	ldr	r3, [pc, #88]	; (b550 <_usb_d_dev_ep_stall_clr+0xd4>)
    b4f6:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    b4f8:	687b      	ldr	r3, [r7, #4]
    b4fa:	7cdb      	ldrb	r3, [r3, #19]
    b4fc:	f003 0307 	and.w	r3, r3, #7
    b500:	b2db      	uxtb	r3, r3
    b502:	2b01      	cmp	r3, #1
    b504:	d110      	bne.n	b528 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    b506:	7bfb      	ldrb	r3, [r7, #15]
    b508:	4619      	mov	r1, r3
    b50a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b50e:	4b11      	ldr	r3, [pc, #68]	; (b554 <_usb_d_dev_ep_stall_clr+0xd8>)
    b510:	4798      	blx	r3
    b512:	4603      	mov	r3, r0
    b514:	f003 0330 	and.w	r3, r3, #48	; 0x30
    b518:	2b00      	cmp	r3, #0
    b51a:	d10a      	bne.n	b532 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    b51c:	687a      	ldr	r2, [r7, #4]
    b51e:	7cd3      	ldrb	r3, [r2, #19]
    b520:	f36f 03c3 	bfc	r3, #3, #1
    b524:	74d3      	strb	r3, [r2, #19]
    b526:	e004      	b.n	b532 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    b528:	687a      	ldr	r2, [r7, #4]
    b52a:	7cd3      	ldrb	r3, [r2, #19]
    b52c:	f36f 03c3 	bfc	r3, #3, #1
    b530:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    b532:	2300      	movs	r3, #0
}
    b534:	4618      	mov	r0, r3
    b536:	3710      	adds	r7, #16
    b538:	46bd      	mov	sp, r7
    b53a:	bd80      	pop	{r7, pc}
    b53c:	00009aed 	.word	0x00009aed
    b540:	00009a95 	.word	0x00009a95
    b544:	00009a3d 	.word	0x00009a3d
    b548:	00009b31 	.word	0x00009b31
    b54c:	00009b75 	.word	0x00009b75
    b550:	00009c61 	.word	0x00009c61
    b554:	0000951d 	.word	0x0000951d

0000b558 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    b558:	b580      	push	{r7, lr}
    b55a:	b086      	sub	sp, #24
    b55c:	af00      	add	r7, sp, #0
    b55e:	4603      	mov	r3, r0
    b560:	460a      	mov	r2, r1
    b562:	71fb      	strb	r3, [r7, #7]
    b564:	4613      	mov	r3, r2
    b566:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    b568:	79fb      	ldrb	r3, [r7, #7]
    b56a:	f003 030f 	and.w	r3, r3, #15
    b56e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    b570:	79fb      	ldrb	r3, [r7, #7]
    b572:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b576:	2b00      	cmp	r3, #0
    b578:	bf14      	ite	ne
    b57a:	2301      	movne	r3, #1
    b57c:	2300      	moveq	r3, #0
    b57e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b580:	7cba      	ldrb	r2, [r7, #18]
    b582:	7cfb      	ldrb	r3, [r7, #19]
    b584:	4611      	mov	r1, r2
    b586:	4618      	mov	r0, r3
    b588:	4b13      	ldr	r3, [pc, #76]	; (b5d8 <_usb_d_dev_ep_stall+0x80>)
    b58a:	4798      	blx	r3
    b58c:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b58e:	7cfb      	ldrb	r3, [r7, #19]
    b590:	2b04      	cmp	r3, #4
    b592:	d902      	bls.n	b59a <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    b594:	f06f 0311 	mvn.w	r3, #17
    b598:	e01a      	b.n	b5d0 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    b59a:	79bb      	ldrb	r3, [r7, #6]
    b59c:	2b01      	cmp	r3, #1
    b59e:	d106      	bne.n	b5ae <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    b5a0:	7cbb      	ldrb	r3, [r7, #18]
    b5a2:	4619      	mov	r1, r3
    b5a4:	68f8      	ldr	r0, [r7, #12]
    b5a6:	4b0d      	ldr	r3, [pc, #52]	; (b5dc <_usb_d_dev_ep_stall+0x84>)
    b5a8:	4798      	blx	r3
    b5aa:	6178      	str	r0, [r7, #20]
    b5ac:	e00f      	b.n	b5ce <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    b5ae:	79bb      	ldrb	r3, [r7, #6]
    b5b0:	2b00      	cmp	r3, #0
    b5b2:	d106      	bne.n	b5c2 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    b5b4:	7cbb      	ldrb	r3, [r7, #18]
    b5b6:	4619      	mov	r1, r3
    b5b8:	68f8      	ldr	r0, [r7, #12]
    b5ba:	4b09      	ldr	r3, [pc, #36]	; (b5e0 <_usb_d_dev_ep_stall+0x88>)
    b5bc:	4798      	blx	r3
    b5be:	6178      	str	r0, [r7, #20]
    b5c0:	e005      	b.n	b5ce <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    b5c2:	7cbb      	ldrb	r3, [r7, #18]
    b5c4:	4619      	mov	r1, r3
    b5c6:	68f8      	ldr	r0, [r7, #12]
    b5c8:	4b06      	ldr	r3, [pc, #24]	; (b5e4 <_usb_d_dev_ep_stall+0x8c>)
    b5ca:	4798      	blx	r3
    b5cc:	6178      	str	r0, [r7, #20]
	}
	return rc;
    b5ce:	697b      	ldr	r3, [r7, #20]
}
    b5d0:	4618      	mov	r0, r3
    b5d2:	3718      	adds	r7, #24
    b5d4:	46bd      	mov	sp, r7
    b5d6:	bd80      	pop	{r7, pc}
    b5d8:	00009ff9 	.word	0x00009ff9
    b5dc:	0000b42d 	.word	0x0000b42d
    b5e0:	0000b47d 	.word	0x0000b47d
    b5e4:	0000b3fd 	.word	0x0000b3fd

0000b5e8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    b5e8:	b580      	push	{r7, lr}
    b5ea:	b082      	sub	sp, #8
    b5ec:	af00      	add	r7, sp, #0
    b5ee:	6078      	str	r0, [r7, #4]
    b5f0:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b5f2:	687b      	ldr	r3, [r7, #4]
    b5f4:	7c9b      	ldrb	r3, [r3, #18]
    b5f6:	2bff      	cmp	r3, #255	; 0xff
    b5f8:	d014      	beq.n	b624 <_usb_d_dev_trans_done+0x3c>
    b5fa:	687b      	ldr	r3, [r7, #4]
    b5fc:	7cdb      	ldrb	r3, [r3, #19]
    b5fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b602:	b2db      	uxtb	r3, r3
    b604:	2b00      	cmp	r3, #0
    b606:	d00d      	beq.n	b624 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    b608:	687a      	ldr	r2, [r7, #4]
    b60a:	7cd3      	ldrb	r3, [r2, #19]
    b60c:	f36f 1386 	bfc	r3, #6, #1
    b610:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    b612:	4b06      	ldr	r3, [pc, #24]	; (b62c <_usb_d_dev_trans_done+0x44>)
    b614:	691b      	ldr	r3, [r3, #16]
    b616:	687a      	ldr	r2, [r7, #4]
    b618:	7c90      	ldrb	r0, [r2, #18]
    b61a:	687a      	ldr	r2, [r7, #4]
    b61c:	6892      	ldr	r2, [r2, #8]
    b61e:	6839      	ldr	r1, [r7, #0]
    b620:	4798      	blx	r3
    b622:	e000      	b.n	b626 <_usb_d_dev_trans_done+0x3e>
		return;
    b624:	bf00      	nop
}
    b626:	3708      	adds	r7, #8
    b628:	46bd      	mov	sp, r7
    b62a:	bd80      	pop	{r7, pc}
    b62c:	20000e70 	.word	0x20000e70

0000b630 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    b630:	b580      	push	{r7, lr}
    b632:	b086      	sub	sp, #24
    b634:	af00      	add	r7, sp, #0
    b636:	60f8      	str	r0, [r7, #12]
    b638:	460b      	mov	r3, r1
    b63a:	607a      	str	r2, [r7, #4]
    b63c:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b63e:	68fb      	ldr	r3, [r7, #12]
    b640:	7c9b      	ldrb	r3, [r3, #18]
    b642:	f003 030f 	and.w	r3, r3, #15
    b646:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    b648:	4b1f      	ldr	r3, [pc, #124]	; (b6c8 <_usb_d_dev_trans_stop+0x98>)
    b64a:	881b      	ldrh	r3, [r3, #0]
    b64c:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b64e:	68fb      	ldr	r3, [r7, #12]
    b650:	7c9b      	ldrb	r3, [r3, #18]
    b652:	2bff      	cmp	r3, #255	; 0xff
    b654:	d033      	beq.n	b6be <_usb_d_dev_trans_stop+0x8e>
    b656:	68fb      	ldr	r3, [r7, #12]
    b658:	7cdb      	ldrb	r3, [r3, #19]
    b65a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b65e:	b2db      	uxtb	r3, r3
    b660:	2b00      	cmp	r3, #0
    b662:	d02c      	beq.n	b6be <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    b664:	7afb      	ldrb	r3, [r7, #11]
    b666:	2b00      	cmp	r3, #0
    b668:	d006      	beq.n	b678 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b66a:	7dfb      	ldrb	r3, [r7, #23]
    b66c:	2200      	movs	r2, #0
    b66e:	2101      	movs	r1, #1
    b670:	4618      	mov	r0, r3
    b672:	4b16      	ldr	r3, [pc, #88]	; (b6cc <_usb_d_dev_trans_stop+0x9c>)
    b674:	4798      	blx	r3
    b676:	e005      	b.n	b684 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b678:	7dfb      	ldrb	r3, [r7, #23]
    b67a:	2200      	movs	r2, #0
    b67c:	2100      	movs	r1, #0
    b67e:	4618      	mov	r0, r3
    b680:	4b13      	ldr	r3, [pc, #76]	; (b6d0 <_usb_d_dev_trans_stop+0xa0>)
    b682:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    b684:	7afb      	ldrb	r3, [r7, #11]
    b686:	f107 0218 	add.w	r2, r7, #24
    b68a:	4413      	add	r3, r2
    b68c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b690:	461a      	mov	r2, r3
    b692:	7dfb      	ldrb	r3, [r7, #23]
    b694:	4611      	mov	r1, r2
    b696:	4618      	mov	r0, r3
    b698:	4b0e      	ldr	r3, [pc, #56]	; (b6d4 <_usb_d_dev_trans_stop+0xa4>)
    b69a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    b69c:	7afb      	ldrb	r3, [r7, #11]
    b69e:	f107 0218 	add.w	r2, r7, #24
    b6a2:	4413      	add	r3, r2
    b6a4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b6a8:	461a      	mov	r2, r3
    b6aa:	7dfb      	ldrb	r3, [r7, #23]
    b6ac:	4611      	mov	r1, r2
    b6ae:	4618      	mov	r0, r3
    b6b0:	4b09      	ldr	r3, [pc, #36]	; (b6d8 <_usb_d_dev_trans_stop+0xa8>)
    b6b2:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    b6b4:	6879      	ldr	r1, [r7, #4]
    b6b6:	68f8      	ldr	r0, [r7, #12]
    b6b8:	4b08      	ldr	r3, [pc, #32]	; (b6dc <_usb_d_dev_trans_stop+0xac>)
    b6ba:	4798      	blx	r3
    b6bc:	e000      	b.n	b6c0 <_usb_d_dev_trans_stop+0x90>
		return;
    b6be:	bf00      	nop
}
    b6c0:	3718      	adds	r7, #24
    b6c2:	46bd      	mov	sp, r7
    b6c4:	bd80      	pop	{r7, pc}
    b6c6:	bf00      	nop
    b6c8:	00010734 	.word	0x00010734
    b6cc:	00009ee5 	.word	0x00009ee5
    b6d0:	00009f3d 	.word	0x00009f3d
    b6d4:	000099ed 	.word	0x000099ed
    b6d8:	00009a3d 	.word	0x00009a3d
    b6dc:	0000b5e9 	.word	0x0000b5e9

0000b6e0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    b6e0:	b580      	push	{r7, lr}
    b6e2:	b086      	sub	sp, #24
    b6e4:	af00      	add	r7, sp, #0
    b6e6:	4603      	mov	r3, r0
    b6e8:	6039      	str	r1, [r7, #0]
    b6ea:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    b6ec:	79fb      	ldrb	r3, [r7, #7]
    b6ee:	f003 030f 	and.w	r3, r3, #15
    b6f2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    b6f4:	7dfb      	ldrb	r3, [r7, #23]
    b6f6:	015b      	lsls	r3, r3, #5
    b6f8:	4a1e      	ldr	r2, [pc, #120]	; (b774 <_usb_d_dev_ep_read_req+0x94>)
    b6fa:	4413      	add	r3, r2
    b6fc:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    b6fe:	693b      	ldr	r3, [r7, #16]
    b700:	681b      	ldr	r3, [r3, #0]
    b702:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    b704:	693b      	ldr	r3, [r7, #16]
    b706:	685b      	ldr	r3, [r3, #4]
    b708:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b70c:	b29b      	uxth	r3, r3
    b70e:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    b710:	7dfb      	ldrb	r3, [r7, #23]
    b712:	2b04      	cmp	r3, #4
    b714:	d802      	bhi.n	b71c <_usb_d_dev_ep_read_req+0x3c>
    b716:	683b      	ldr	r3, [r7, #0]
    b718:	2b00      	cmp	r3, #0
    b71a:	d102      	bne.n	b722 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    b71c:	f06f 0311 	mvn.w	r3, #17
    b720:	e023      	b.n	b76a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    b722:	7dfb      	ldrb	r3, [r7, #23]
    b724:	4618      	mov	r0, r3
    b726:	4b14      	ldr	r3, [pc, #80]	; (b778 <_usb_d_dev_ep_read_req+0x98>)
    b728:	4798      	blx	r3
    b72a:	4603      	mov	r3, r0
    b72c:	f083 0301 	eor.w	r3, r3, #1
    b730:	b2db      	uxtb	r3, r3
    b732:	2b00      	cmp	r3, #0
    b734:	d002      	beq.n	b73c <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    b736:	f06f 0312 	mvn.w	r3, #18
    b73a:	e016      	b.n	b76a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    b73c:	7dfb      	ldrb	r3, [r7, #23]
    b73e:	4618      	mov	r0, r3
    b740:	4b0e      	ldr	r3, [pc, #56]	; (b77c <_usb_d_dev_ep_read_req+0x9c>)
    b742:	4798      	blx	r3
    b744:	4603      	mov	r3, r0
    b746:	f083 0301 	eor.w	r3, r3, #1
    b74a:	b2db      	uxtb	r3, r3
    b74c:	2b00      	cmp	r3, #0
    b74e:	d001      	beq.n	b754 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    b750:	2300      	movs	r3, #0
    b752:	e00a      	b.n	b76a <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    b754:	68fb      	ldr	r3, [r7, #12]
    b756:	2208      	movs	r2, #8
    b758:	4619      	mov	r1, r3
    b75a:	6838      	ldr	r0, [r7, #0]
    b75c:	4b08      	ldr	r3, [pc, #32]	; (b780 <_usb_d_dev_ep_read_req+0xa0>)
    b75e:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    b760:	7dfb      	ldrb	r3, [r7, #23]
    b762:	4618      	mov	r0, r3
    b764:	4b07      	ldr	r3, [pc, #28]	; (b784 <_usb_d_dev_ep_read_req+0xa4>)
    b766:	4798      	blx	r3

	return bytes;
    b768:	897b      	ldrh	r3, [r7, #10]
}
    b76a:	4618      	mov	r0, r3
    b76c:	3718      	adds	r7, #24
    b76e:	46bd      	mov	sp, r7
    b770:	bd80      	pop	{r7, pc}
    b772:	bf00      	nop
    b774:	20000f38 	.word	0x20000f38
    b778:	00009a65 	.word	0x00009a65
    b77c:	00009c11 	.word	0x00009c11
    b780:	0001008d 	.word	0x0001008d
    b784:	00009c41 	.word	0x00009c41

0000b788 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    b788:	b580      	push	{r7, lr}
    b78a:	b086      	sub	sp, #24
    b78c:	af00      	add	r7, sp, #0
    b78e:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    b790:	687b      	ldr	r3, [r7, #4]
    b792:	7a1b      	ldrb	r3, [r3, #8]
    b794:	f003 030f 	and.w	r3, r3, #15
    b798:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    b79a:	687b      	ldr	r3, [r7, #4]
    b79c:	7a1b      	ldrb	r3, [r3, #8]
    b79e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b7a2:	2b00      	cmp	r3, #0
    b7a4:	bf14      	ite	ne
    b7a6:	2301      	movne	r3, #1
    b7a8:	2300      	moveq	r3, #0
    b7aa:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b7ac:	7d7a      	ldrb	r2, [r7, #21]
    b7ae:	7dbb      	ldrb	r3, [r7, #22]
    b7b0:	4611      	mov	r1, r2
    b7b2:	4618      	mov	r0, r3
    b7b4:	4b5f      	ldr	r3, [pc, #380]	; (b934 <_usb_d_dev_ep_trans+0x1ac>)
    b7b6:	4798      	blx	r3
    b7b8:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b7ba:	693b      	ldr	r3, [r7, #16]
    b7bc:	8a1b      	ldrh	r3, [r3, #16]
    b7be:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b7c2:	4293      	cmp	r3, r2
    b7c4:	d004      	beq.n	b7d0 <_usb_d_dev_ep_trans+0x48>
    b7c6:	693b      	ldr	r3, [r7, #16]
    b7c8:	8a1b      	ldrh	r3, [r3, #16]
    b7ca:	3b01      	subs	r3, #1
    b7cc:	b29b      	uxth	r3, r3
    b7ce:	e001      	b.n	b7d4 <_usb_d_dev_ep_trans+0x4c>
    b7d0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b7d4:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    b7d6:	687b      	ldr	r3, [r7, #4]
    b7d8:	685a      	ldr	r2, [r3, #4]
    b7da:	89fb      	ldrh	r3, [r7, #14]
    b7dc:	4013      	ands	r3, r2
    b7de:	2b00      	cmp	r3, #0
    b7e0:	bf14      	ite	ne
    b7e2:	2301      	movne	r3, #1
    b7e4:	2300      	moveq	r3, #0
    b7e6:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    b7e8:	2300      	movs	r3, #0
    b7ea:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b7ec:	7dbb      	ldrb	r3, [r7, #22]
    b7ee:	2b04      	cmp	r3, #4
    b7f0:	d902      	bls.n	b7f8 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    b7f2:	f06f 0311 	mvn.w	r3, #17
    b7f6:	e098      	b.n	b92a <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    b7f8:	687b      	ldr	r3, [r7, #4]
    b7fa:	681b      	ldr	r3, [r3, #0]
    b7fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    b800:	d31a      	bcc.n	b838 <_usb_d_dev_ep_trans+0xb0>
    b802:	687b      	ldr	r3, [r7, #4]
    b804:	681b      	ldr	r3, [r3, #0]
    b806:	461a      	mov	r2, r3
    b808:	687b      	ldr	r3, [r7, #4]
    b80a:	685b      	ldr	r3, [r3, #4]
    b80c:	4413      	add	r3, r2
    b80e:	4a4a      	ldr	r2, [pc, #296]	; (b938 <_usb_d_dev_ep_trans+0x1b0>)
    b810:	4293      	cmp	r3, r2
    b812:	d811      	bhi.n	b838 <_usb_d_dev_ep_trans+0xb0>
    b814:	687b      	ldr	r3, [r7, #4]
    b816:	681b      	ldr	r3, [r3, #0]
    b818:	f003 0303 	and.w	r3, r3, #3
    b81c:	2b00      	cmp	r3, #0
    b81e:	d10b      	bne.n	b838 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    b820:	7d7b      	ldrb	r3, [r7, #21]
    b822:	f083 0301 	eor.w	r3, r3, #1
    b826:	b2db      	uxtb	r3, r3
    b828:	2b00      	cmp	r3, #0
    b82a:	d00e      	beq.n	b84a <_usb_d_dev_ep_trans+0xc2>
    b82c:	687b      	ldr	r3, [r7, #4]
    b82e:	685b      	ldr	r3, [r3, #4]
    b830:	693a      	ldr	r2, [r7, #16]
    b832:	8a12      	ldrh	r2, [r2, #16]
    b834:	4293      	cmp	r3, r2
    b836:	d208      	bcs.n	b84a <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    b838:	693b      	ldr	r3, [r7, #16]
    b83a:	68db      	ldr	r3, [r3, #12]
    b83c:	2b00      	cmp	r3, #0
    b83e:	d102      	bne.n	b846 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    b840:	f06f 0312 	mvn.w	r3, #18
    b844:	e071      	b.n	b92a <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    b846:	2301      	movs	r3, #1
    b848:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    b84a:	7d7b      	ldrb	r3, [r7, #21]
    b84c:	f083 0301 	eor.w	r3, r3, #1
    b850:	b2db      	uxtb	r3, r3
    b852:	2b00      	cmp	r3, #0
    b854:	d009      	beq.n	b86a <_usb_d_dev_ep_trans+0xe2>
    b856:	7b7b      	ldrb	r3, [r7, #13]
    b858:	2b00      	cmp	r3, #0
    b85a:	d006      	beq.n	b86a <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    b85c:	693b      	ldr	r3, [r7, #16]
    b85e:	68db      	ldr	r3, [r3, #12]
    b860:	2b00      	cmp	r3, #0
    b862:	d102      	bne.n	b86a <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    b864:	f06f 0311 	mvn.w	r3, #17
    b868:	e05f      	b.n	b92a <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    b86a:	693b      	ldr	r3, [r7, #16]
    b86c:	7cdb      	ldrb	r3, [r3, #19]
    b86e:	f003 0308 	and.w	r3, r3, #8
    b872:	b2db      	uxtb	r3, r3
    b874:	2b00      	cmp	r3, #0
    b876:	d001      	beq.n	b87c <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    b878:	2302      	movs	r3, #2
    b87a:	e056      	b.n	b92a <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    b87c:	f107 0308 	add.w	r3, r7, #8
    b880:	4618      	mov	r0, r3
    b882:	4b2e      	ldr	r3, [pc, #184]	; (b93c <_usb_d_dev_ep_trans+0x1b4>)
    b884:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    b886:	693b      	ldr	r3, [r7, #16]
    b888:	7cdb      	ldrb	r3, [r3, #19]
    b88a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b88e:	b2db      	uxtb	r3, r3
    b890:	2b00      	cmp	r3, #0
    b892:	d006      	beq.n	b8a2 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    b894:	f107 0308 	add.w	r3, r7, #8
    b898:	4618      	mov	r0, r3
    b89a:	4b29      	ldr	r3, [pc, #164]	; (b940 <_usb_d_dev_ep_trans+0x1b8>)
    b89c:	4798      	blx	r3
		return USB_BUSY;
    b89e:	2301      	movs	r3, #1
    b8a0:	e043      	b.n	b92a <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    b8a2:	693a      	ldr	r2, [r7, #16]
    b8a4:	7cd3      	ldrb	r3, [r2, #19]
    b8a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b8aa:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    b8ac:	f107 0308 	add.w	r3, r7, #8
    b8b0:	4618      	mov	r0, r3
    b8b2:	4b23      	ldr	r3, [pc, #140]	; (b940 <_usb_d_dev_ep_trans+0x1b8>)
    b8b4:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    b8b6:	687b      	ldr	r3, [r7, #4]
    b8b8:	681a      	ldr	r2, [r3, #0]
    b8ba:	693b      	ldr	r3, [r7, #16]
    b8bc:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    b8be:	687b      	ldr	r3, [r7, #4]
    b8c0:	685a      	ldr	r2, [r3, #4]
    b8c2:	693b      	ldr	r3, [r7, #16]
    b8c4:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    b8c6:	693b      	ldr	r3, [r7, #16]
    b8c8:	2200      	movs	r2, #0
    b8ca:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    b8cc:	693a      	ldr	r2, [r7, #16]
    b8ce:	7cd3      	ldrb	r3, [r2, #19]
    b8d0:	7d79      	ldrb	r1, [r7, #21]
    b8d2:	f361 13c7 	bfi	r3, r1, #7, #1
    b8d6:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    b8d8:	693a      	ldr	r2, [r7, #16]
    b8da:	7cd3      	ldrb	r3, [r2, #19]
    b8dc:	7df9      	ldrb	r1, [r7, #23]
    b8de:	f361 1345 	bfi	r3, r1, #5, #1
    b8e2:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    b8e4:	687b      	ldr	r3, [r7, #4]
    b8e6:	7a5b      	ldrb	r3, [r3, #9]
    b8e8:	2b00      	cmp	r3, #0
    b8ea:	d007      	beq.n	b8fc <_usb_d_dev_ep_trans+0x174>
    b8ec:	7b7b      	ldrb	r3, [r7, #13]
    b8ee:	f083 0301 	eor.w	r3, r3, #1
    b8f2:	b2db      	uxtb	r3, r3
    b8f4:	2b00      	cmp	r3, #0
    b8f6:	d001      	beq.n	b8fc <_usb_d_dev_ep_trans+0x174>
    b8f8:	2301      	movs	r3, #1
    b8fa:	e000      	b.n	b8fe <_usb_d_dev_ep_trans+0x176>
    b8fc:	2300      	movs	r3, #0
    b8fe:	b2db      	uxtb	r3, r3
    b900:	f003 0301 	and.w	r3, r3, #1
    b904:	b2d9      	uxtb	r1, r3
    b906:	693a      	ldr	r2, [r7, #16]
    b908:	7cd3      	ldrb	r3, [r2, #19]
    b90a:	f361 1304 	bfi	r3, r1, #4, #1
    b90e:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    b910:	7d7b      	ldrb	r3, [r7, #21]
    b912:	2b00      	cmp	r3, #0
    b914:	d004      	beq.n	b920 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    b916:	2100      	movs	r1, #0
    b918:	6938      	ldr	r0, [r7, #16]
    b91a:	4b0a      	ldr	r3, [pc, #40]	; (b944 <_usb_d_dev_ep_trans+0x1bc>)
    b91c:	4798      	blx	r3
    b91e:	e003      	b.n	b928 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    b920:	2100      	movs	r1, #0
    b922:	6938      	ldr	r0, [r7, #16]
    b924:	4b08      	ldr	r3, [pc, #32]	; (b948 <_usb_d_dev_ep_trans+0x1c0>)
    b926:	4798      	blx	r3
	}

	return ERR_NONE;
    b928:	2300      	movs	r3, #0
}
    b92a:	4618      	mov	r0, r3
    b92c:	3718      	adds	r7, #24
    b92e:	46bd      	mov	sp, r7
    b930:	bd80      	pop	{r7, pc}
    b932:	bf00      	nop
    b934:	00009ff9 	.word	0x00009ff9
    b938:	20041fff 	.word	0x20041fff
    b93c:	0000c155 	.word	0x0000c155
    b940:	0000c17b 	.word	0x0000c17b
    b944:	0000a2c1 	.word	0x0000a2c1
    b948:	0000a4d9 	.word	0x0000a4d9

0000b94c <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    b94c:	b580      	push	{r7, lr}
    b94e:	b084      	sub	sp, #16
    b950:	af00      	add	r7, sp, #0
    b952:	4603      	mov	r3, r0
    b954:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    b956:	79fb      	ldrb	r3, [r7, #7]
    b958:	f003 030f 	and.w	r3, r3, #15
    b95c:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    b95e:	79fb      	ldrb	r3, [r7, #7]
    b960:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b964:	2b00      	cmp	r3, #0
    b966:	bf14      	ite	ne
    b968:	2301      	movne	r3, #1
    b96a:	2300      	moveq	r3, #0
    b96c:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b96e:	7bba      	ldrb	r2, [r7, #14]
    b970:	7bfb      	ldrb	r3, [r7, #15]
    b972:	4611      	mov	r1, r2
    b974:	4618      	mov	r0, r3
    b976:	4b08      	ldr	r3, [pc, #32]	; (b998 <_usb_d_dev_ep_abort+0x4c>)
    b978:	4798      	blx	r3
    b97a:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    b97c:	7bfb      	ldrb	r3, [r7, #15]
    b97e:	2b04      	cmp	r3, #4
    b980:	d806      	bhi.n	b990 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    b982:	7bbb      	ldrb	r3, [r7, #14]
    b984:	2202      	movs	r2, #2
    b986:	4619      	mov	r1, r3
    b988:	68b8      	ldr	r0, [r7, #8]
    b98a:	4b04      	ldr	r3, [pc, #16]	; (b99c <_usb_d_dev_ep_abort+0x50>)
    b98c:	4798      	blx	r3
    b98e:	e000      	b.n	b992 <_usb_d_dev_ep_abort+0x46>
		return;
    b990:	bf00      	nop
}
    b992:	3710      	adds	r7, #16
    b994:	46bd      	mov	sp, r7
    b996:	bd80      	pop	{r7, pc}
    b998:	00009ff9 	.word	0x00009ff9
    b99c:	0000b631 	.word	0x0000b631

0000b9a0 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    b9a0:	b480      	push	{r7}
    b9a2:	b085      	sub	sp, #20
    b9a4:	af00      	add	r7, sp, #0
    b9a6:	4603      	mov	r3, r0
    b9a8:	6039      	str	r1, [r7, #0]
    b9aa:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b9ac:	683b      	ldr	r3, [r7, #0]
    b9ae:	2b00      	cmp	r3, #0
    b9b0:	d001      	beq.n	b9b6 <_usb_d_dev_register_callback+0x16>
    b9b2:	683b      	ldr	r3, [r7, #0]
    b9b4:	e000      	b.n	b9b8 <_usb_d_dev_register_callback+0x18>
    b9b6:	4b0a      	ldr	r3, [pc, #40]	; (b9e0 <_usb_d_dev_register_callback+0x40>)
    b9b8:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    b9ba:	79fb      	ldrb	r3, [r7, #7]
    b9bc:	2b01      	cmp	r3, #1
    b9be:	d103      	bne.n	b9c8 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    b9c0:	4a08      	ldr	r2, [pc, #32]	; (b9e4 <_usb_d_dev_register_callback+0x44>)
    b9c2:	68fb      	ldr	r3, [r7, #12]
    b9c4:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    b9c6:	e005      	b.n	b9d4 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    b9c8:	79fb      	ldrb	r3, [r7, #7]
    b9ca:	2b00      	cmp	r3, #0
    b9cc:	d102      	bne.n	b9d4 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    b9ce:	4a05      	ldr	r2, [pc, #20]	; (b9e4 <_usb_d_dev_register_callback+0x44>)
    b9d0:	68fb      	ldr	r3, [r7, #12]
    b9d2:	6013      	str	r3, [r2, #0]
}
    b9d4:	bf00      	nop
    b9d6:	3714      	adds	r7, #20
    b9d8:	46bd      	mov	sp, r7
    b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9de:	4770      	bx	lr
    b9e0:	00009881 	.word	0x00009881
    b9e4:	20000e70 	.word	0x20000e70

0000b9e8 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    b9e8:	b480      	push	{r7}
    b9ea:	b085      	sub	sp, #20
    b9ec:	af00      	add	r7, sp, #0
    b9ee:	4603      	mov	r3, r0
    b9f0:	6039      	str	r1, [r7, #0]
    b9f2:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b9f4:	683b      	ldr	r3, [r7, #0]
    b9f6:	2b00      	cmp	r3, #0
    b9f8:	d001      	beq.n	b9fe <_usb_d_dev_register_ep_callback+0x16>
    b9fa:	683b      	ldr	r3, [r7, #0]
    b9fc:	e000      	b.n	ba00 <_usb_d_dev_register_ep_callback+0x18>
    b9fe:	4b0e      	ldr	r3, [pc, #56]	; (ba38 <_usb_d_dev_register_ep_callback+0x50>)
    ba00:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    ba02:	79fb      	ldrb	r3, [r7, #7]
    ba04:	2b00      	cmp	r3, #0
    ba06:	d103      	bne.n	ba10 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    ba08:	4a0c      	ldr	r2, [pc, #48]	; (ba3c <_usb_d_dev_register_ep_callback+0x54>)
    ba0a:	68fb      	ldr	r3, [r7, #12]
    ba0c:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    ba0e:	e00c      	b.n	ba2a <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    ba10:	79fb      	ldrb	r3, [r7, #7]
    ba12:	2b01      	cmp	r3, #1
    ba14:	d103      	bne.n	ba1e <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    ba16:	4a09      	ldr	r2, [pc, #36]	; (ba3c <_usb_d_dev_register_ep_callback+0x54>)
    ba18:	68fb      	ldr	r3, [r7, #12]
    ba1a:	60d3      	str	r3, [r2, #12]
}
    ba1c:	e005      	b.n	ba2a <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    ba1e:	79fb      	ldrb	r3, [r7, #7]
    ba20:	2b02      	cmp	r3, #2
    ba22:	d102      	bne.n	ba2a <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    ba24:	4a05      	ldr	r2, [pc, #20]	; (ba3c <_usb_d_dev_register_ep_callback+0x54>)
    ba26:	68fb      	ldr	r3, [r7, #12]
    ba28:	6113      	str	r3, [r2, #16]
}
    ba2a:	bf00      	nop
    ba2c:	3714      	adds	r7, #20
    ba2e:	46bd      	mov	sp, r7
    ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba34:	4770      	bx	lr
    ba36:	bf00      	nop
    ba38:	00009881 	.word	0x00009881
    ba3c:	20000e70 	.word	0x20000e70

0000ba40 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    ba40:	b580      	push	{r7, lr}
    ba42:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ba44:	4b01      	ldr	r3, [pc, #4]	; (ba4c <USB_0_Handler+0xc>)
    ba46:	4798      	blx	r3
}
    ba48:	bf00      	nop
    ba4a:	bd80      	pop	{r7, pc}
    ba4c:	0000acb1 	.word	0x0000acb1

0000ba50 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    ba50:	b580      	push	{r7, lr}
    ba52:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ba54:	4b01      	ldr	r3, [pc, #4]	; (ba5c <USB_1_Handler+0xc>)
    ba56:	4798      	blx	r3
}
    ba58:	bf00      	nop
    ba5a:	bd80      	pop	{r7, pc}
    ba5c:	0000acb1 	.word	0x0000acb1

0000ba60 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    ba60:	b580      	push	{r7, lr}
    ba62:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ba64:	4b01      	ldr	r3, [pc, #4]	; (ba6c <USB_2_Handler+0xc>)
    ba66:	4798      	blx	r3
}
    ba68:	bf00      	nop
    ba6a:	bd80      	pop	{r7, pc}
    ba6c:	0000acb1 	.word	0x0000acb1

0000ba70 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    ba70:	b580      	push	{r7, lr}
    ba72:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ba74:	4b01      	ldr	r3, [pc, #4]	; (ba7c <USB_3_Handler+0xc>)
    ba76:	4798      	blx	r3
}
    ba78:	bf00      	nop
    ba7a:	bd80      	pop	{r7, pc}
    ba7c:	0000acb1 	.word	0x0000acb1

0000ba80 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    ba80:	b480      	push	{r7}
    ba82:	b083      	sub	sp, #12
    ba84:	af00      	add	r7, sp, #0
    ba86:	6078      	str	r0, [r7, #4]
    ba88:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    ba8a:	bf00      	nop
    ba8c:	687b      	ldr	r3, [r7, #4]
    ba8e:	689a      	ldr	r2, [r3, #8]
    ba90:	683b      	ldr	r3, [r7, #0]
    ba92:	4013      	ands	r3, r2
    ba94:	2b00      	cmp	r3, #0
    ba96:	d1f9      	bne.n	ba8c <hri_wdt_wait_for_sync+0xc>
	};
}
    ba98:	bf00      	nop
    ba9a:	370c      	adds	r7, #12
    ba9c:	46bd      	mov	sp, r7
    ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    baa2:	4770      	bx	lr

0000baa4 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    baa4:	b580      	push	{r7, lr}
    baa6:	b084      	sub	sp, #16
    baa8:	af00      	add	r7, sp, #0
    baaa:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    baac:	210e      	movs	r1, #14
    baae:	6878      	ldr	r0, [r7, #4]
    bab0:	4b0a      	ldr	r3, [pc, #40]	; (badc <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    bab2:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    bab4:	687b      	ldr	r3, [r7, #4]
    bab6:	781b      	ldrb	r3, [r3, #0]
    bab8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    baba:	7bfb      	ldrb	r3, [r7, #15]
    babc:	085b      	lsrs	r3, r3, #1
    babe:	b2db      	uxtb	r3, r3
    bac0:	f003 0301 	and.w	r3, r3, #1
    bac4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    bac6:	7bfb      	ldrb	r3, [r7, #15]
    bac8:	2b00      	cmp	r3, #0
    baca:	bf14      	ite	ne
    bacc:	2301      	movne	r3, #1
    bace:	2300      	moveq	r3, #0
    bad0:	b2db      	uxtb	r3, r3
}
    bad2:	4618      	mov	r0, r3
    bad4:	3710      	adds	r7, #16
    bad6:	46bd      	mov	sp, r7
    bad8:	bd80      	pop	{r7, pc}
    bada:	bf00      	nop
    badc:	0000ba81 	.word	0x0000ba81

0000bae0 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    bae0:	b580      	push	{r7, lr}
    bae2:	b082      	sub	sp, #8
    bae4:	af00      	add	r7, sp, #0
    bae6:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    bae8:	687b      	ldr	r3, [r7, #4]
    baea:	781b      	ldrb	r3, [r3, #0]
    baec:	b2db      	uxtb	r3, r3
    baee:	f023 0304 	bic.w	r3, r3, #4
    baf2:	b2da      	uxtb	r2, r3
    baf4:	687b      	ldr	r3, [r7, #4]
    baf6:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    baf8:	210e      	movs	r1, #14
    bafa:	6878      	ldr	r0, [r7, #4]
    bafc:	4b02      	ldr	r3, [pc, #8]	; (bb08 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    bafe:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    bb00:	bf00      	nop
    bb02:	3708      	adds	r7, #8
    bb04:	46bd      	mov	sp, r7
    bb06:	bd80      	pop	{r7, pc}
    bb08:	0000ba81 	.word	0x0000ba81

0000bb0c <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    bb0c:	b580      	push	{r7, lr}
    bb0e:	b084      	sub	sp, #16
    bb10:	af00      	add	r7, sp, #0
    bb12:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    bb14:	210e      	movs	r1, #14
    bb16:	6878      	ldr	r0, [r7, #4]
    bb18:	4b08      	ldr	r3, [pc, #32]	; (bb3c <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    bb1a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    bb1c:	687b      	ldr	r3, [r7, #4]
    bb1e:	781b      	ldrb	r3, [r3, #0]
    bb20:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    bb22:	7bfb      	ldrb	r3, [r7, #15]
    bb24:	09db      	lsrs	r3, r3, #7
    bb26:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    bb28:	7bfb      	ldrb	r3, [r7, #15]
    bb2a:	2b00      	cmp	r3, #0
    bb2c:	bf14      	ite	ne
    bb2e:	2301      	movne	r3, #1
    bb30:	2300      	moveq	r3, #0
    bb32:	b2db      	uxtb	r3, r3
}
    bb34:	4618      	mov	r0, r3
    bb36:	3710      	adds	r7, #16
    bb38:	46bd      	mov	sp, r7
    bb3a:	bd80      	pop	{r7, pc}
    bb3c:	0000ba81 	.word	0x0000ba81

0000bb40 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    bb40:	b480      	push	{r7}
    bb42:	b085      	sub	sp, #20
    bb44:	af00      	add	r7, sp, #0
    bb46:	6078      	str	r0, [r7, #4]
    bb48:	460b      	mov	r3, r1
    bb4a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    bb4c:	687b      	ldr	r3, [r7, #4]
    bb4e:	785b      	ldrb	r3, [r3, #1]
    bb50:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    bb52:	7bfb      	ldrb	r3, [r7, #15]
    bb54:	f023 030f 	bic.w	r3, r3, #15
    bb58:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    bb5a:	78fb      	ldrb	r3, [r7, #3]
    bb5c:	f003 030f 	and.w	r3, r3, #15
    bb60:	b2da      	uxtb	r2, r3
    bb62:	7bfb      	ldrb	r3, [r7, #15]
    bb64:	4313      	orrs	r3, r2
    bb66:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    bb68:	687b      	ldr	r3, [r7, #4]
    bb6a:	7bfa      	ldrb	r2, [r7, #15]
    bb6c:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    bb6e:	bf00      	nop
    bb70:	3714      	adds	r7, #20
    bb72:	46bd      	mov	sp, r7
    bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb78:	4770      	bx	lr
	...

0000bb7c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    bb7c:	b580      	push	{r7, lr}
    bb7e:	b082      	sub	sp, #8
    bb80:	af00      	add	r7, sp, #0
    bb82:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    bb84:	687b      	ldr	r3, [r7, #4]
    bb86:	2b00      	cmp	r3, #0
    bb88:	d005      	beq.n	bb96 <_wdt_init+0x1a>
    bb8a:	687b      	ldr	r3, [r7, #4]
    bb8c:	681b      	ldr	r3, [r3, #0]
    bb8e:	2b00      	cmp	r3, #0
    bb90:	d001      	beq.n	bb96 <_wdt_init+0x1a>
    bb92:	2301      	movs	r3, #1
    bb94:	e000      	b.n	bb98 <_wdt_init+0x1c>
    bb96:	2300      	movs	r3, #0
    bb98:	f003 0301 	and.w	r3, r3, #1
    bb9c:	b2db      	uxtb	r3, r3
    bb9e:	2250      	movs	r2, #80	; 0x50
    bba0:	4913      	ldr	r1, [pc, #76]	; (bbf0 <_wdt_init+0x74>)
    bba2:	4618      	mov	r0, r3
    bba4:	4b13      	ldr	r3, [pc, #76]	; (bbf4 <_wdt_init+0x78>)
    bba6:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    bba8:	687b      	ldr	r3, [r7, #4]
    bbaa:	681b      	ldr	r3, [r3, #0]
    bbac:	4618      	mov	r0, r3
    bbae:	4b12      	ldr	r3, [pc, #72]	; (bbf8 <_wdt_init+0x7c>)
    bbb0:	4798      	blx	r3
    bbb2:	4603      	mov	r3, r0
    bbb4:	2b00      	cmp	r3, #0
    bbb6:	d107      	bne.n	bbc8 <_wdt_init+0x4c>
    bbb8:	687b      	ldr	r3, [r7, #4]
    bbba:	681b      	ldr	r3, [r3, #0]
    bbbc:	4618      	mov	r0, r3
    bbbe:	4b0f      	ldr	r3, [pc, #60]	; (bbfc <_wdt_init+0x80>)
    bbc0:	4798      	blx	r3
    bbc2:	4603      	mov	r3, r0
    bbc4:	2b00      	cmp	r3, #0
    bbc6:	d002      	beq.n	bbce <_wdt_init+0x52>
		return ERR_DENIED;
    bbc8:	f06f 0310 	mvn.w	r3, #16
    bbcc:	e00b      	b.n	bbe6 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    bbce:	687b      	ldr	r3, [r7, #4]
    bbd0:	681b      	ldr	r3, [r3, #0]
    bbd2:	4618      	mov	r0, r3
    bbd4:	4b0a      	ldr	r3, [pc, #40]	; (bc00 <_wdt_init+0x84>)
    bbd6:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    bbd8:	687b      	ldr	r3, [r7, #4]
    bbda:	681b      	ldr	r3, [r3, #0]
    bbdc:	210b      	movs	r1, #11
    bbde:	4618      	mov	r0, r3
    bbe0:	4b08      	ldr	r3, [pc, #32]	; (bc04 <_wdt_init+0x88>)
    bbe2:	4798      	blx	r3
	}

	return ERR_NONE;
    bbe4:	2300      	movs	r3, #0
}
    bbe6:	4618      	mov	r0, r3
    bbe8:	3708      	adds	r7, #8
    bbea:	46bd      	mov	sp, r7
    bbec:	bd80      	pop	{r7, pc}
    bbee:	bf00      	nop
    bbf0:	00010738 	.word	0x00010738
    bbf4:	00003fd5 	.word	0x00003fd5
    bbf8:	0000bb0d 	.word	0x0000bb0d
    bbfc:	0000baa5 	.word	0x0000baa5
    bc00:	0000bae1 	.word	0x0000bae1
    bc04:	0000bb41 	.word	0x0000bb41

0000bc08 <hri_port_set_DIR_reg>:
{
    bc08:	b480      	push	{r7}
    bc0a:	b085      	sub	sp, #20
    bc0c:	af00      	add	r7, sp, #0
    bc0e:	60f8      	str	r0, [r7, #12]
    bc10:	460b      	mov	r3, r1
    bc12:	607a      	str	r2, [r7, #4]
    bc14:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    bc16:	7afb      	ldrb	r3, [r7, #11]
    bc18:	68fa      	ldr	r2, [r7, #12]
    bc1a:	01db      	lsls	r3, r3, #7
    bc1c:	4413      	add	r3, r2
    bc1e:	3308      	adds	r3, #8
    bc20:	687a      	ldr	r2, [r7, #4]
    bc22:	601a      	str	r2, [r3, #0]
}
    bc24:	bf00      	nop
    bc26:	3714      	adds	r7, #20
    bc28:	46bd      	mov	sp, r7
    bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc2e:	4770      	bx	lr

0000bc30 <hri_port_clear_DIR_reg>:
{
    bc30:	b480      	push	{r7}
    bc32:	b085      	sub	sp, #20
    bc34:	af00      	add	r7, sp, #0
    bc36:	60f8      	str	r0, [r7, #12]
    bc38:	460b      	mov	r3, r1
    bc3a:	607a      	str	r2, [r7, #4]
    bc3c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    bc3e:	7afb      	ldrb	r3, [r7, #11]
    bc40:	68fa      	ldr	r2, [r7, #12]
    bc42:	01db      	lsls	r3, r3, #7
    bc44:	4413      	add	r3, r2
    bc46:	3304      	adds	r3, #4
    bc48:	687a      	ldr	r2, [r7, #4]
    bc4a:	601a      	str	r2, [r3, #0]
}
    bc4c:	bf00      	nop
    bc4e:	3714      	adds	r7, #20
    bc50:	46bd      	mov	sp, r7
    bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc56:	4770      	bx	lr

0000bc58 <hri_port_set_OUT_reg>:
{
    bc58:	b480      	push	{r7}
    bc5a:	b085      	sub	sp, #20
    bc5c:	af00      	add	r7, sp, #0
    bc5e:	60f8      	str	r0, [r7, #12]
    bc60:	460b      	mov	r3, r1
    bc62:	607a      	str	r2, [r7, #4]
    bc64:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    bc66:	7afb      	ldrb	r3, [r7, #11]
    bc68:	68fa      	ldr	r2, [r7, #12]
    bc6a:	01db      	lsls	r3, r3, #7
    bc6c:	4413      	add	r3, r2
    bc6e:	3318      	adds	r3, #24
    bc70:	687a      	ldr	r2, [r7, #4]
    bc72:	601a      	str	r2, [r3, #0]
}
    bc74:	bf00      	nop
    bc76:	3714      	adds	r7, #20
    bc78:	46bd      	mov	sp, r7
    bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc7e:	4770      	bx	lr

0000bc80 <hri_port_clear_OUT_reg>:
{
    bc80:	b480      	push	{r7}
    bc82:	b085      	sub	sp, #20
    bc84:	af00      	add	r7, sp, #0
    bc86:	60f8      	str	r0, [r7, #12]
    bc88:	460b      	mov	r3, r1
    bc8a:	607a      	str	r2, [r7, #4]
    bc8c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    bc8e:	7afb      	ldrb	r3, [r7, #11]
    bc90:	68fa      	ldr	r2, [r7, #12]
    bc92:	01db      	lsls	r3, r3, #7
    bc94:	4413      	add	r3, r2
    bc96:	3314      	adds	r3, #20
    bc98:	687a      	ldr	r2, [r7, #4]
    bc9a:	601a      	str	r2, [r3, #0]
}
    bc9c:	bf00      	nop
    bc9e:	3714      	adds	r7, #20
    bca0:	46bd      	mov	sp, r7
    bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
    bca6:	4770      	bx	lr

0000bca8 <hri_port_write_PMUX_PMUXE_bf>:
{
    bca8:	b480      	push	{r7}
    bcaa:	b085      	sub	sp, #20
    bcac:	af00      	add	r7, sp, #0
    bcae:	6078      	str	r0, [r7, #4]
    bcb0:	4608      	mov	r0, r1
    bcb2:	4611      	mov	r1, r2
    bcb4:	461a      	mov	r2, r3
    bcb6:	4603      	mov	r3, r0
    bcb8:	70fb      	strb	r3, [r7, #3]
    bcba:	460b      	mov	r3, r1
    bcbc:	70bb      	strb	r3, [r7, #2]
    bcbe:	4613      	mov	r3, r2
    bcc0:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    bcc2:	78fa      	ldrb	r2, [r7, #3]
    bcc4:	78bb      	ldrb	r3, [r7, #2]
    bcc6:	6879      	ldr	r1, [r7, #4]
    bcc8:	01d2      	lsls	r2, r2, #7
    bcca:	440a      	add	r2, r1
    bccc:	4413      	add	r3, r2
    bcce:	3330      	adds	r3, #48	; 0x30
    bcd0:	781b      	ldrb	r3, [r3, #0]
    bcd2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    bcd4:	7bfb      	ldrb	r3, [r7, #15]
    bcd6:	f023 030f 	bic.w	r3, r3, #15
    bcda:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    bcdc:	787b      	ldrb	r3, [r7, #1]
    bcde:	f003 030f 	and.w	r3, r3, #15
    bce2:	b2da      	uxtb	r2, r3
    bce4:	7bfb      	ldrb	r3, [r7, #15]
    bce6:	4313      	orrs	r3, r2
    bce8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    bcea:	78fa      	ldrb	r2, [r7, #3]
    bcec:	78bb      	ldrb	r3, [r7, #2]
    bcee:	6879      	ldr	r1, [r7, #4]
    bcf0:	01d2      	lsls	r2, r2, #7
    bcf2:	440a      	add	r2, r1
    bcf4:	4413      	add	r3, r2
    bcf6:	3330      	adds	r3, #48	; 0x30
    bcf8:	7bfa      	ldrb	r2, [r7, #15]
    bcfa:	701a      	strb	r2, [r3, #0]
}
    bcfc:	bf00      	nop
    bcfe:	3714      	adds	r7, #20
    bd00:	46bd      	mov	sp, r7
    bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd06:	4770      	bx	lr

0000bd08 <hri_port_write_PMUX_PMUXO_bf>:
{
    bd08:	b480      	push	{r7}
    bd0a:	b085      	sub	sp, #20
    bd0c:	af00      	add	r7, sp, #0
    bd0e:	6078      	str	r0, [r7, #4]
    bd10:	4608      	mov	r0, r1
    bd12:	4611      	mov	r1, r2
    bd14:	461a      	mov	r2, r3
    bd16:	4603      	mov	r3, r0
    bd18:	70fb      	strb	r3, [r7, #3]
    bd1a:	460b      	mov	r3, r1
    bd1c:	70bb      	strb	r3, [r7, #2]
    bd1e:	4613      	mov	r3, r2
    bd20:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    bd22:	78fa      	ldrb	r2, [r7, #3]
    bd24:	78bb      	ldrb	r3, [r7, #2]
    bd26:	6879      	ldr	r1, [r7, #4]
    bd28:	01d2      	lsls	r2, r2, #7
    bd2a:	440a      	add	r2, r1
    bd2c:	4413      	add	r3, r2
    bd2e:	3330      	adds	r3, #48	; 0x30
    bd30:	781b      	ldrb	r3, [r3, #0]
    bd32:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    bd34:	7bfb      	ldrb	r3, [r7, #15]
    bd36:	f003 030f 	and.w	r3, r3, #15
    bd3a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    bd3c:	787b      	ldrb	r3, [r7, #1]
    bd3e:	011b      	lsls	r3, r3, #4
    bd40:	b2da      	uxtb	r2, r3
    bd42:	7bfb      	ldrb	r3, [r7, #15]
    bd44:	4313      	orrs	r3, r2
    bd46:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    bd48:	78fa      	ldrb	r2, [r7, #3]
    bd4a:	78bb      	ldrb	r3, [r7, #2]
    bd4c:	6879      	ldr	r1, [r7, #4]
    bd4e:	01d2      	lsls	r2, r2, #7
    bd50:	440a      	add	r2, r1
    bd52:	4413      	add	r3, r2
    bd54:	3330      	adds	r3, #48	; 0x30
    bd56:	7bfa      	ldrb	r2, [r7, #15]
    bd58:	701a      	strb	r2, [r3, #0]
}
    bd5a:	bf00      	nop
    bd5c:	3714      	adds	r7, #20
    bd5e:	46bd      	mov	sp, r7
    bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd64:	4770      	bx	lr

0000bd66 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    bd66:	b480      	push	{r7}
    bd68:	b085      	sub	sp, #20
    bd6a:	af00      	add	r7, sp, #0
    bd6c:	6078      	str	r0, [r7, #4]
    bd6e:	4608      	mov	r0, r1
    bd70:	4611      	mov	r1, r2
    bd72:	461a      	mov	r2, r3
    bd74:	4603      	mov	r3, r0
    bd76:	70fb      	strb	r3, [r7, #3]
    bd78:	460b      	mov	r3, r1
    bd7a:	70bb      	strb	r3, [r7, #2]
    bd7c:	4613      	mov	r3, r2
    bd7e:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    bd80:	78fa      	ldrb	r2, [r7, #3]
    bd82:	78bb      	ldrb	r3, [r7, #2]
    bd84:	6879      	ldr	r1, [r7, #4]
    bd86:	01d2      	lsls	r2, r2, #7
    bd88:	440a      	add	r2, r1
    bd8a:	4413      	add	r3, r2
    bd8c:	3340      	adds	r3, #64	; 0x40
    bd8e:	781b      	ldrb	r3, [r3, #0]
    bd90:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    bd92:	7bfb      	ldrb	r3, [r7, #15]
    bd94:	f023 0301 	bic.w	r3, r3, #1
    bd98:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    bd9a:	787a      	ldrb	r2, [r7, #1]
    bd9c:	7bfb      	ldrb	r3, [r7, #15]
    bd9e:	4313      	orrs	r3, r2
    bda0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    bda2:	78fa      	ldrb	r2, [r7, #3]
    bda4:	78bb      	ldrb	r3, [r7, #2]
    bda6:	6879      	ldr	r1, [r7, #4]
    bda8:	01d2      	lsls	r2, r2, #7
    bdaa:	440a      	add	r2, r1
    bdac:	4413      	add	r3, r2
    bdae:	3340      	adds	r3, #64	; 0x40
    bdb0:	7bfa      	ldrb	r2, [r7, #15]
    bdb2:	701a      	strb	r2, [r3, #0]
}
    bdb4:	bf00      	nop
    bdb6:	3714      	adds	r7, #20
    bdb8:	46bd      	mov	sp, r7
    bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
    bdbe:	4770      	bx	lr

0000bdc0 <hri_port_write_WRCONFIG_reg>:
{
    bdc0:	b480      	push	{r7}
    bdc2:	b085      	sub	sp, #20
    bdc4:	af00      	add	r7, sp, #0
    bdc6:	60f8      	str	r0, [r7, #12]
    bdc8:	460b      	mov	r3, r1
    bdca:	607a      	str	r2, [r7, #4]
    bdcc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    bdce:	7afb      	ldrb	r3, [r7, #11]
    bdd0:	68fa      	ldr	r2, [r7, #12]
    bdd2:	01db      	lsls	r3, r3, #7
    bdd4:	4413      	add	r3, r2
    bdd6:	3328      	adds	r3, #40	; 0x28
    bdd8:	687a      	ldr	r2, [r7, #4]
    bdda:	601a      	str	r2, [r3, #0]
}
    bddc:	bf00      	nop
    bdde:	3714      	adds	r7, #20
    bde0:	46bd      	mov	sp, r7
    bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
    bde6:	4770      	bx	lr

0000bde8 <_gpio_set_direction>:
{
    bde8:	b580      	push	{r7, lr}
    bdea:	b082      	sub	sp, #8
    bdec:	af00      	add	r7, sp, #0
    bdee:	4603      	mov	r3, r0
    bdf0:	6039      	str	r1, [r7, #0]
    bdf2:	71fb      	strb	r3, [r7, #7]
    bdf4:	4613      	mov	r3, r2
    bdf6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    bdf8:	79bb      	ldrb	r3, [r7, #6]
    bdfa:	2b01      	cmp	r3, #1
    bdfc:	d01c      	beq.n	be38 <_gpio_set_direction+0x50>
    bdfe:	2b02      	cmp	r3, #2
    be00:	d037      	beq.n	be72 <_gpio_set_direction+0x8a>
    be02:	2b00      	cmp	r3, #0
    be04:	d14e      	bne.n	bea4 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    be06:	79fb      	ldrb	r3, [r7, #7]
    be08:	683a      	ldr	r2, [r7, #0]
    be0a:	4619      	mov	r1, r3
    be0c:	482a      	ldr	r0, [pc, #168]	; (beb8 <_gpio_set_direction+0xd0>)
    be0e:	4b2b      	ldr	r3, [pc, #172]	; (bebc <_gpio_set_direction+0xd4>)
    be10:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    be12:	683b      	ldr	r3, [r7, #0]
    be14:	b29b      	uxth	r3, r3
    be16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    be1a:	79fb      	ldrb	r3, [r7, #7]
    be1c:	4619      	mov	r1, r3
    be1e:	4826      	ldr	r0, [pc, #152]	; (beb8 <_gpio_set_direction+0xd0>)
    be20:	4b27      	ldr	r3, [pc, #156]	; (bec0 <_gpio_set_direction+0xd8>)
    be22:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    be24:	683b      	ldr	r3, [r7, #0]
    be26:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    be28:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    be2c:	79fb      	ldrb	r3, [r7, #7]
    be2e:	4619      	mov	r1, r3
    be30:	4821      	ldr	r0, [pc, #132]	; (beb8 <_gpio_set_direction+0xd0>)
    be32:	4b23      	ldr	r3, [pc, #140]	; (bec0 <_gpio_set_direction+0xd8>)
    be34:	4798      	blx	r3
		break;
    be36:	e03a      	b.n	beae <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    be38:	79fb      	ldrb	r3, [r7, #7]
    be3a:	683a      	ldr	r2, [r7, #0]
    be3c:	4619      	mov	r1, r3
    be3e:	481e      	ldr	r0, [pc, #120]	; (beb8 <_gpio_set_direction+0xd0>)
    be40:	4b1e      	ldr	r3, [pc, #120]	; (bebc <_gpio_set_direction+0xd4>)
    be42:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    be44:	683b      	ldr	r3, [r7, #0]
    be46:	b29b      	uxth	r3, r3
    be48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    be4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    be50:	79f9      	ldrb	r1, [r7, #7]
    be52:	461a      	mov	r2, r3
    be54:	4818      	ldr	r0, [pc, #96]	; (beb8 <_gpio_set_direction+0xd0>)
    be56:	4b1a      	ldr	r3, [pc, #104]	; (bec0 <_gpio_set_direction+0xd8>)
    be58:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    be5a:	683b      	ldr	r3, [r7, #0]
    be5c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    be5e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    be62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    be66:	79f9      	ldrb	r1, [r7, #7]
    be68:	461a      	mov	r2, r3
    be6a:	4813      	ldr	r0, [pc, #76]	; (beb8 <_gpio_set_direction+0xd0>)
    be6c:	4b14      	ldr	r3, [pc, #80]	; (bec0 <_gpio_set_direction+0xd8>)
    be6e:	4798      	blx	r3
		break;
    be70:	e01d      	b.n	beae <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    be72:	79fb      	ldrb	r3, [r7, #7]
    be74:	683a      	ldr	r2, [r7, #0]
    be76:	4619      	mov	r1, r3
    be78:	480f      	ldr	r0, [pc, #60]	; (beb8 <_gpio_set_direction+0xd0>)
    be7a:	4b12      	ldr	r3, [pc, #72]	; (bec4 <_gpio_set_direction+0xdc>)
    be7c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    be7e:	683b      	ldr	r3, [r7, #0]
    be80:	b29b      	uxth	r3, r3
    be82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    be86:	79fb      	ldrb	r3, [r7, #7]
    be88:	4619      	mov	r1, r3
    be8a:	480b      	ldr	r0, [pc, #44]	; (beb8 <_gpio_set_direction+0xd0>)
    be8c:	4b0c      	ldr	r3, [pc, #48]	; (bec0 <_gpio_set_direction+0xd8>)
    be8e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    be90:	683b      	ldr	r3, [r7, #0]
    be92:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    be94:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    be98:	79fb      	ldrb	r3, [r7, #7]
    be9a:	4619      	mov	r1, r3
    be9c:	4806      	ldr	r0, [pc, #24]	; (beb8 <_gpio_set_direction+0xd0>)
    be9e:	4b08      	ldr	r3, [pc, #32]	; (bec0 <_gpio_set_direction+0xd8>)
    bea0:	4798      	blx	r3
		break;
    bea2:	e004      	b.n	beae <_gpio_set_direction+0xc6>
		ASSERT(false);
    bea4:	2246      	movs	r2, #70	; 0x46
    bea6:	4908      	ldr	r1, [pc, #32]	; (bec8 <_gpio_set_direction+0xe0>)
    bea8:	2000      	movs	r0, #0
    beaa:	4b08      	ldr	r3, [pc, #32]	; (becc <_gpio_set_direction+0xe4>)
    beac:	4798      	blx	r3
}
    beae:	bf00      	nop
    beb0:	3708      	adds	r7, #8
    beb2:	46bd      	mov	sp, r7
    beb4:	bd80      	pop	{r7, pc}
    beb6:	bf00      	nop
    beb8:	41008000 	.word	0x41008000
    bebc:	0000bc31 	.word	0x0000bc31
    bec0:	0000bdc1 	.word	0x0000bdc1
    bec4:	0000bc09 	.word	0x0000bc09
    bec8:	00010750 	.word	0x00010750
    becc:	00003fd5 	.word	0x00003fd5

0000bed0 <_gpio_set_level>:
{
    bed0:	b580      	push	{r7, lr}
    bed2:	b082      	sub	sp, #8
    bed4:	af00      	add	r7, sp, #0
    bed6:	4603      	mov	r3, r0
    bed8:	6039      	str	r1, [r7, #0]
    beda:	71fb      	strb	r3, [r7, #7]
    bedc:	4613      	mov	r3, r2
    bede:	71bb      	strb	r3, [r7, #6]
	if (level) {
    bee0:	79bb      	ldrb	r3, [r7, #6]
    bee2:	2b00      	cmp	r3, #0
    bee4:	d006      	beq.n	bef4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    bee6:	79fb      	ldrb	r3, [r7, #7]
    bee8:	683a      	ldr	r2, [r7, #0]
    beea:	4619      	mov	r1, r3
    beec:	4806      	ldr	r0, [pc, #24]	; (bf08 <_gpio_set_level+0x38>)
    beee:	4b07      	ldr	r3, [pc, #28]	; (bf0c <_gpio_set_level+0x3c>)
    bef0:	4798      	blx	r3
}
    bef2:	e005      	b.n	bf00 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    bef4:	79fb      	ldrb	r3, [r7, #7]
    bef6:	683a      	ldr	r2, [r7, #0]
    bef8:	4619      	mov	r1, r3
    befa:	4803      	ldr	r0, [pc, #12]	; (bf08 <_gpio_set_level+0x38>)
    befc:	4b04      	ldr	r3, [pc, #16]	; (bf10 <_gpio_set_level+0x40>)
    befe:	4798      	blx	r3
}
    bf00:	bf00      	nop
    bf02:	3708      	adds	r7, #8
    bf04:	46bd      	mov	sp, r7
    bf06:	bd80      	pop	{r7, pc}
    bf08:	41008000 	.word	0x41008000
    bf0c:	0000bc59 	.word	0x0000bc59
    bf10:	0000bc81 	.word	0x0000bc81

0000bf14 <_gpio_set_pin_function>:
{
    bf14:	b590      	push	{r4, r7, lr}
    bf16:	b085      	sub	sp, #20
    bf18:	af00      	add	r7, sp, #0
    bf1a:	6078      	str	r0, [r7, #4]
    bf1c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    bf1e:	687b      	ldr	r3, [r7, #4]
    bf20:	095b      	lsrs	r3, r3, #5
    bf22:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    bf24:	687b      	ldr	r3, [r7, #4]
    bf26:	b2db      	uxtb	r3, r3
    bf28:	f003 031f 	and.w	r3, r3, #31
    bf2c:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    bf2e:	683b      	ldr	r3, [r7, #0]
    bf30:	f1b3 3fff 	cmp.w	r3, #4294967295
    bf34:	d106      	bne.n	bf44 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    bf36:	7bba      	ldrb	r2, [r7, #14]
    bf38:	7bf9      	ldrb	r1, [r7, #15]
    bf3a:	2300      	movs	r3, #0
    bf3c:	4812      	ldr	r0, [pc, #72]	; (bf88 <_gpio_set_pin_function+0x74>)
    bf3e:	4c13      	ldr	r4, [pc, #76]	; (bf8c <_gpio_set_pin_function+0x78>)
    bf40:	47a0      	blx	r4
}
    bf42:	e01d      	b.n	bf80 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    bf44:	7bba      	ldrb	r2, [r7, #14]
    bf46:	7bf9      	ldrb	r1, [r7, #15]
    bf48:	2301      	movs	r3, #1
    bf4a:	480f      	ldr	r0, [pc, #60]	; (bf88 <_gpio_set_pin_function+0x74>)
    bf4c:	4c0f      	ldr	r4, [pc, #60]	; (bf8c <_gpio_set_pin_function+0x78>)
    bf4e:	47a0      	blx	r4
		if (pin & 1) {
    bf50:	7bbb      	ldrb	r3, [r7, #14]
    bf52:	f003 0301 	and.w	r3, r3, #1
    bf56:	2b00      	cmp	r3, #0
    bf58:	d009      	beq.n	bf6e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    bf5a:	7bbb      	ldrb	r3, [r7, #14]
    bf5c:	085b      	lsrs	r3, r3, #1
    bf5e:	b2da      	uxtb	r2, r3
    bf60:	683b      	ldr	r3, [r7, #0]
    bf62:	b2db      	uxtb	r3, r3
    bf64:	7bf9      	ldrb	r1, [r7, #15]
    bf66:	4808      	ldr	r0, [pc, #32]	; (bf88 <_gpio_set_pin_function+0x74>)
    bf68:	4c09      	ldr	r4, [pc, #36]	; (bf90 <_gpio_set_pin_function+0x7c>)
    bf6a:	47a0      	blx	r4
}
    bf6c:	e008      	b.n	bf80 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    bf6e:	7bbb      	ldrb	r3, [r7, #14]
    bf70:	085b      	lsrs	r3, r3, #1
    bf72:	b2da      	uxtb	r2, r3
    bf74:	683b      	ldr	r3, [r7, #0]
    bf76:	b2db      	uxtb	r3, r3
    bf78:	7bf9      	ldrb	r1, [r7, #15]
    bf7a:	4803      	ldr	r0, [pc, #12]	; (bf88 <_gpio_set_pin_function+0x74>)
    bf7c:	4c05      	ldr	r4, [pc, #20]	; (bf94 <_gpio_set_pin_function+0x80>)
    bf7e:	47a0      	blx	r4
}
    bf80:	bf00      	nop
    bf82:	3714      	adds	r7, #20
    bf84:	46bd      	mov	sp, r7
    bf86:	bd90      	pop	{r4, r7, pc}
    bf88:	41008000 	.word	0x41008000
    bf8c:	0000bd67 	.word	0x0000bd67
    bf90:	0000bd09 	.word	0x0000bd09
    bf94:	0000bca9 	.word	0x0000bca9

0000bf98 <gpio_set_pin_function>:
{
    bf98:	b580      	push	{r7, lr}
    bf9a:	b082      	sub	sp, #8
    bf9c:	af00      	add	r7, sp, #0
    bf9e:	6078      	str	r0, [r7, #4]
    bfa0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    bfa2:	6839      	ldr	r1, [r7, #0]
    bfa4:	6878      	ldr	r0, [r7, #4]
    bfa6:	4b03      	ldr	r3, [pc, #12]	; (bfb4 <gpio_set_pin_function+0x1c>)
    bfa8:	4798      	blx	r3
}
    bfaa:	bf00      	nop
    bfac:	3708      	adds	r7, #8
    bfae:	46bd      	mov	sp, r7
    bfb0:	bd80      	pop	{r7, pc}
    bfb2:	bf00      	nop
    bfb4:	0000bf15 	.word	0x0000bf15

0000bfb8 <gpio_set_pin_direction>:
{
    bfb8:	b580      	push	{r7, lr}
    bfba:	b082      	sub	sp, #8
    bfbc:	af00      	add	r7, sp, #0
    bfbe:	4603      	mov	r3, r0
    bfc0:	460a      	mov	r2, r1
    bfc2:	71fb      	strb	r3, [r7, #7]
    bfc4:	4613      	mov	r3, r2
    bfc6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    bfc8:	79fb      	ldrb	r3, [r7, #7]
    bfca:	095b      	lsrs	r3, r3, #5
    bfcc:	b2d8      	uxtb	r0, r3
    bfce:	79fb      	ldrb	r3, [r7, #7]
    bfd0:	f003 031f 	and.w	r3, r3, #31
    bfd4:	2201      	movs	r2, #1
    bfd6:	fa02 f303 	lsl.w	r3, r2, r3
    bfda:	79ba      	ldrb	r2, [r7, #6]
    bfdc:	4619      	mov	r1, r3
    bfde:	4b03      	ldr	r3, [pc, #12]	; (bfec <gpio_set_pin_direction+0x34>)
    bfe0:	4798      	blx	r3
}
    bfe2:	bf00      	nop
    bfe4:	3708      	adds	r7, #8
    bfe6:	46bd      	mov	sp, r7
    bfe8:	bd80      	pop	{r7, pc}
    bfea:	bf00      	nop
    bfec:	0000bde9 	.word	0x0000bde9

0000bff0 <gpio_set_pin_level>:
{
    bff0:	b580      	push	{r7, lr}
    bff2:	b082      	sub	sp, #8
    bff4:	af00      	add	r7, sp, #0
    bff6:	4603      	mov	r3, r0
    bff8:	460a      	mov	r2, r1
    bffa:	71fb      	strb	r3, [r7, #7]
    bffc:	4613      	mov	r3, r2
    bffe:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    c000:	79fb      	ldrb	r3, [r7, #7]
    c002:	095b      	lsrs	r3, r3, #5
    c004:	b2d8      	uxtb	r0, r3
    c006:	79fb      	ldrb	r3, [r7, #7]
    c008:	f003 031f 	and.w	r3, r3, #31
    c00c:	2201      	movs	r2, #1
    c00e:	fa02 f303 	lsl.w	r3, r2, r3
    c012:	79ba      	ldrb	r2, [r7, #6]
    c014:	4619      	mov	r1, r3
    c016:	4b03      	ldr	r3, [pc, #12]	; (c024 <gpio_set_pin_level+0x34>)
    c018:	4798      	blx	r3
}
    c01a:	bf00      	nop
    c01c:	3708      	adds	r7, #8
    c01e:	46bd      	mov	sp, r7
    c020:	bd80      	pop	{r7, pc}
    c022:	bf00      	nop
    c024:	0000bed1 	.word	0x0000bed1

0000c028 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    c028:	b580      	push	{r7, lr}
    c02a:	b082      	sub	sp, #8
    c02c:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    c02e:	2100      	movs	r1, #0
    c030:	2008      	movs	r0, #8
    c032:	4b24      	ldr	r3, [pc, #144]	; (c0c4 <QSPI_N25Q256_exit_xip+0x9c>)
    c034:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    c036:	2100      	movs	r1, #0
    c038:	202b      	movs	r0, #43	; 0x2b
    c03a:	4b22      	ldr	r3, [pc, #136]	; (c0c4 <QSPI_N25Q256_exit_xip+0x9c>)
    c03c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    c03e:	2100      	movs	r1, #0
    c040:	202a      	movs	r0, #42	; 0x2a
    c042:	4b20      	ldr	r3, [pc, #128]	; (c0c4 <QSPI_N25Q256_exit_xip+0x9c>)
    c044:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    c046:	2102      	movs	r1, #2
    c048:	2008      	movs	r0, #8
    c04a:	4b1f      	ldr	r3, [pc, #124]	; (c0c8 <QSPI_N25Q256_exit_xip+0xa0>)
    c04c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    c04e:	2102      	movs	r1, #2
    c050:	202b      	movs	r0, #43	; 0x2b
    c052:	4b1d      	ldr	r3, [pc, #116]	; (c0c8 <QSPI_N25Q256_exit_xip+0xa0>)
    c054:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    c056:	2102      	movs	r1, #2
    c058:	202a      	movs	r0, #42	; 0x2a
    c05a:	4b1b      	ldr	r3, [pc, #108]	; (c0c8 <QSPI_N25Q256_exit_xip+0xa0>)
    c05c:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    c05e:	2101      	movs	r1, #1
    c060:	2008      	movs	r0, #8
    c062:	4b1a      	ldr	r3, [pc, #104]	; (c0cc <QSPI_N25Q256_exit_xip+0xa4>)
    c064:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    c066:	2100      	movs	r1, #0
    c068:	202b      	movs	r0, #43	; 0x2b
    c06a:	4b18      	ldr	r3, [pc, #96]	; (c0cc <QSPI_N25Q256_exit_xip+0xa4>)
    c06c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    c06e:	2100      	movs	r1, #0
    c070:	202a      	movs	r0, #42	; 0x2a
    c072:	4b16      	ldr	r3, [pc, #88]	; (c0cc <QSPI_N25Q256_exit_xip+0xa4>)
    c074:	4798      	blx	r3

	delay_us(1);
    c076:	2001      	movs	r0, #1
    c078:	4b15      	ldr	r3, [pc, #84]	; (c0d0 <QSPI_N25Q256_exit_xip+0xa8>)
    c07a:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    c07c:	2300      	movs	r3, #0
    c07e:	607b      	str	r3, [r7, #4]
    c080:	e010      	b.n	c0a4 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    c082:	2101      	movs	r1, #1
    c084:	202a      	movs	r0, #42	; 0x2a
    c086:	4b11      	ldr	r3, [pc, #68]	; (c0cc <QSPI_N25Q256_exit_xip+0xa4>)
    c088:	4798      	blx	r3
		delay_us(1);
    c08a:	2001      	movs	r0, #1
    c08c:	4b10      	ldr	r3, [pc, #64]	; (c0d0 <QSPI_N25Q256_exit_xip+0xa8>)
    c08e:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    c090:	2100      	movs	r1, #0
    c092:	202a      	movs	r0, #42	; 0x2a
    c094:	4b0d      	ldr	r3, [pc, #52]	; (c0cc <QSPI_N25Q256_exit_xip+0xa4>)
    c096:	4798      	blx	r3
		delay_us(1);
    c098:	2001      	movs	r0, #1
    c09a:	4b0d      	ldr	r3, [pc, #52]	; (c0d0 <QSPI_N25Q256_exit_xip+0xa8>)
    c09c:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    c09e:	687b      	ldr	r3, [r7, #4]
    c0a0:	3301      	adds	r3, #1
    c0a2:	607b      	str	r3, [r7, #4]
    c0a4:	687b      	ldr	r3, [r7, #4]
    c0a6:	2b06      	cmp	r3, #6
    c0a8:	ddeb      	ble.n	c082 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    c0aa:	2101      	movs	r1, #1
    c0ac:	202b      	movs	r0, #43	; 0x2b
    c0ae:	4b07      	ldr	r3, [pc, #28]	; (c0cc <QSPI_N25Q256_exit_xip+0xa4>)
    c0b0:	4798      	blx	r3
	delay_us(1);
    c0b2:	2001      	movs	r0, #1
    c0b4:	4b06      	ldr	r3, [pc, #24]	; (c0d0 <QSPI_N25Q256_exit_xip+0xa8>)
    c0b6:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    c0b8:	4b06      	ldr	r3, [pc, #24]	; (c0d4 <QSPI_N25Q256_exit_xip+0xac>)
    c0ba:	4798      	blx	r3
}
    c0bc:	bf00      	nop
    c0be:	3708      	adds	r7, #8
    c0c0:	46bd      	mov	sp, r7
    c0c2:	bd80      	pop	{r7, pc}
    c0c4:	0000bf99 	.word	0x0000bf99
    c0c8:	0000bfb9 	.word	0x0000bfb9
    c0cc:	0000bff1 	.word	0x0000bff1
    c0d0:	00002741 	.word	0x00002741
    c0d4:	00001afd 	.word	0x00001afd

0000c0d8 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    c0d8:	b598      	push	{r3, r4, r7, lr}
    c0da:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    c0dc:	4806      	ldr	r0, [pc, #24]	; (c0f8 <spi_nor_flash_init+0x20>)
    c0de:	4b07      	ldr	r3, [pc, #28]	; (c0fc <spi_nor_flash_init+0x24>)
    c0e0:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    c0e2:	2300      	movs	r3, #0
    c0e4:	4a06      	ldr	r2, [pc, #24]	; (c100 <spi_nor_flash_init+0x28>)
    c0e6:	4904      	ldr	r1, [pc, #16]	; (c0f8 <spi_nor_flash_init+0x20>)
    c0e8:	4806      	ldr	r0, [pc, #24]	; (c104 <spi_nor_flash_init+0x2c>)
    c0ea:	4c07      	ldr	r4, [pc, #28]	; (c108 <spi_nor_flash_init+0x30>)
    c0ec:	47a0      	blx	r4
    c0ee:	4602      	mov	r2, r0
    c0f0:	4b06      	ldr	r3, [pc, #24]	; (c10c <spi_nor_flash_init+0x34>)
    c0f2:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    c0f4:	bf00      	nop
    c0f6:	bd98      	pop	{r3, r4, r7, pc}
    c0f8:	200017a0 	.word	0x200017a0
    c0fc:	00002e7d 	.word	0x00002e7d
    c100:	0000c029 	.word	0x0000c029
    c104:	20000fd8 	.word	0x20000fd8
    c108:	0000c545 	.word	0x0000c545
    c10c:	200019c0 	.word	0x200019c0

0000c110 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    c110:	b580      	push	{r7, lr}
    c112:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    c114:	4805      	ldr	r0, [pc, #20]	; (c12c <cdc_device_acm_init+0x1c>)
    c116:	4b06      	ldr	r3, [pc, #24]	; (c130 <cdc_device_acm_init+0x20>)
    c118:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    c11a:	4b06      	ldr	r3, [pc, #24]	; (c134 <cdc_device_acm_init+0x24>)
    c11c:	4798      	blx	r3

	usbdc_start(single_desc);
    c11e:	4806      	ldr	r0, [pc, #24]	; (c138 <cdc_device_acm_init+0x28>)
    c120:	4b06      	ldr	r3, [pc, #24]	; (c13c <cdc_device_acm_init+0x2c>)
    c122:	4798      	blx	r3
	usbdc_attach();
    c124:	4b06      	ldr	r3, [pc, #24]	; (c140 <cdc_device_acm_init+0x30>)
    c126:	4798      	blx	r3
}
    c128:	bf00      	nop
    c12a:	bd80      	pop	{r7, pc}
    c12c:	20001028 	.word	0x20001028
    c130:	0000dc6d 	.word	0x0000dc6d
    c134:	0000cee5 	.word	0x0000cee5
    c138:	200001d0 	.word	0x200001d0
    c13c:	0000dd09 	.word	0x0000dd09
    c140:	0000dd59 	.word	0x0000dd59

0000c144 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    c144:	b580      	push	{r7, lr}
    c146:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    c148:	4b01      	ldr	r3, [pc, #4]	; (c150 <usb_init+0xc>)
    c14a:	4798      	blx	r3
}
    c14c:	bf00      	nop
    c14e:	bd80      	pop	{r7, pc}
    c150:	0000c111 	.word	0x0000c111

0000c154 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    c154:	b480      	push	{r7}
    c156:	b085      	sub	sp, #20
    c158:	af00      	add	r7, sp, #0
    c15a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    c15c:	f3ef 8310 	mrs	r3, PRIMASK
    c160:	60fb      	str	r3, [r7, #12]
  return(result);
    c162:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    c164:	687b      	ldr	r3, [r7, #4]
    c166:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    c168:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    c16a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    c16e:	bf00      	nop
    c170:	3714      	adds	r7, #20
    c172:	46bd      	mov	sp, r7
    c174:	f85d 7b04 	ldr.w	r7, [sp], #4
    c178:	4770      	bx	lr

0000c17a <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    c17a:	b480      	push	{r7}
    c17c:	b085      	sub	sp, #20
    c17e:	af00      	add	r7, sp, #0
    c180:	6078      	str	r0, [r7, #4]
    c182:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    c186:	687b      	ldr	r3, [r7, #4]
    c188:	681b      	ldr	r3, [r3, #0]
    c18a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    c18c:	68fb      	ldr	r3, [r7, #12]
    c18e:	f383 8810 	msr	PRIMASK, r3
}
    c192:	bf00      	nop
    c194:	3714      	adds	r7, #20
    c196:	46bd      	mov	sp, r7
    c198:	f85d 7b04 	ldr.w	r7, [sp], #4
    c19c:	4770      	bx	lr
	...

0000c1a0 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    c1a0:	b580      	push	{r7, lr}
    c1a2:	b08c      	sub	sp, #48	; 0x30
    c1a4:	af00      	add	r7, sp, #0
    c1a6:	6078      	str	r0, [r7, #4]
    c1a8:	460b      	mov	r3, r1
    c1aa:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c1ac:	687b      	ldr	r3, [r7, #4]
    c1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c1b0:	687b      	ldr	r3, [r7, #4]
    c1b2:	681b      	ldr	r3, [r3, #0]
    c1b4:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    c1b6:	f107 030c 	add.w	r3, r7, #12
    c1ba:	2200      	movs	r2, #0
    c1bc:	601a      	str	r2, [r3, #0]
    c1be:	605a      	str	r2, [r3, #4]
    c1c0:	609a      	str	r2, [r3, #8]
    c1c2:	60da      	str	r2, [r3, #12]
    c1c4:	611a      	str	r2, [r3, #16]
    c1c6:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c1ca:	7b1b      	ldrb	r3, [r3, #12]
    c1cc:	2b00      	cmp	r3, #0
    c1ce:	d001      	beq.n	c1d4 <n25q256a_xip_confirm+0x34>
    c1d0:	2206      	movs	r2, #6
    c1d2:	e000      	b.n	c1d6 <n25q256a_xip_confirm+0x36>
    c1d4:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    c1d6:	7b3b      	ldrb	r3, [r7, #12]
    c1d8:	f362 0302 	bfi	r3, r2, #0, #3
    c1dc:	733b      	strb	r3, [r7, #12]
    c1de:	7b3b      	ldrb	r3, [r7, #12]
    c1e0:	f043 0310 	orr.w	r3, r3, #16
    c1e4:	733b      	strb	r3, [r7, #12]
    c1e6:	7b3b      	ldrb	r3, [r7, #12]
    c1e8:	f043 0320 	orr.w	r3, r3, #32
    c1ec:	733b      	strb	r3, [r7, #12]
    c1ee:	7b3b      	ldrb	r3, [r7, #12]
    c1f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c1f4:	733b      	strb	r3, [r7, #12]
    c1f6:	7b3b      	ldrb	r3, [r7, #12]
    c1f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c1fc:	733b      	strb	r3, [r7, #12]
    c1fe:	7b7b      	ldrb	r3, [r7, #13]
    c200:	f043 0303 	orr.w	r3, r3, #3
    c204:	737b      	strb	r3, [r7, #13]
    c206:	7b7b      	ldrb	r3, [r7, #13]
    c208:	2201      	movs	r2, #1
    c20a:	f362 1305 	bfi	r3, r2, #4, #2
    c20e:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    c210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c212:	7b1b      	ldrb	r3, [r3, #12]
    c214:	2b00      	cmp	r3, #0
    c216:	d001      	beq.n	c21c <n25q256a_xip_confirm+0x7c>
    c218:	2208      	movs	r2, #8
    c21a:	e000      	b.n	c21e <n25q256a_xip_confirm+0x7e>
    c21c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    c21e:	7bbb      	ldrb	r3, [r7, #14]
    c220:	f362 0304 	bfi	r3, r2, #0, #5
    c224:	73bb      	strb	r3, [r7, #14]
    c226:	230b      	movs	r3, #11
    c228:	743b      	strb	r3, [r7, #16]
    c22a:	78fb      	ldrb	r3, [r7, #3]
    c22c:	2b00      	cmp	r3, #0
    c22e:	d001      	beq.n	c234 <n25q256a_xip_confirm+0x94>
    c230:	2300      	movs	r3, #0
    c232:	e000      	b.n	c236 <n25q256a_xip_confirm+0x96>
    c234:	23ff      	movs	r3, #255	; 0xff
    c236:	747b      	strb	r3, [r7, #17]
    c238:	2301      	movs	r3, #1
    c23a:	61bb      	str	r3, [r7, #24]
    c23c:	f107 0327 	add.w	r3, r7, #39	; 0x27
    c240:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    c242:	f107 030c 	add.w	r3, r7, #12
    c246:	4619      	mov	r1, r3
    c248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c24a:	4b07      	ldr	r3, [pc, #28]	; (c268 <n25q256a_xip_confirm+0xc8>)
    c24c:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    c24e:	78fb      	ldrb	r3, [r7, #3]
    c250:	2b00      	cmp	r3, #0
    c252:	d001      	beq.n	c258 <n25q256a_xip_confirm+0xb8>
    c254:	2202      	movs	r2, #2
    c256:	e000      	b.n	c25a <n25q256a_xip_confirm+0xba>
    c258:	2201      	movs	r2, #1
    c25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c25c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c25e:	2300      	movs	r3, #0
}
    c260:	4618      	mov	r0, r3
    c262:	3730      	adds	r7, #48	; 0x30
    c264:	46bd      	mov	sp, r7
    c266:	bd80      	pop	{r7, pc}
    c268:	00002ef5 	.word	0x00002ef5

0000c26c <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    c26c:	b580      	push	{r7, lr}
    c26e:	b08c      	sub	sp, #48	; 0x30
    c270:	af00      	add	r7, sp, #0
    c272:	6078      	str	r0, [r7, #4]
    c274:	460b      	mov	r3, r1
    c276:	70fb      	strb	r3, [r7, #3]
    c278:	4613      	mov	r3, r2
    c27a:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    c27c:	2300      	movs	r3, #0
    c27e:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    c280:	687b      	ldr	r3, [r7, #4]
    c282:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    c284:	687b      	ldr	r3, [r7, #4]
    c286:	681b      	ldr	r3, [r3, #0]
    c288:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    c28a:	f107 030c 	add.w	r3, r7, #12
    c28e:	2200      	movs	r2, #0
    c290:	601a      	str	r2, [r3, #0]
    c292:	605a      	str	r2, [r3, #4]
    c294:	609a      	str	r2, [r3, #8]
    c296:	60da      	str	r2, [r3, #12]
    c298:	611a      	str	r2, [r3, #16]
    c29a:	615a      	str	r2, [r3, #20]
    c29c:	78fb      	ldrb	r3, [r7, #3]
    c29e:	f003 0307 	and.w	r3, r3, #7
    c2a2:	b2da      	uxtb	r2, r3
    c2a4:	7b3b      	ldrb	r3, [r7, #12]
    c2a6:	f362 0302 	bfi	r3, r2, #0, #3
    c2aa:	733b      	strb	r3, [r7, #12]
    c2ac:	7b3b      	ldrb	r3, [r7, #12]
    c2ae:	f043 0310 	orr.w	r3, r3, #16
    c2b2:	733b      	strb	r3, [r7, #12]
    c2b4:	7b3b      	ldrb	r3, [r7, #12]
    c2b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c2ba:	733b      	strb	r3, [r7, #12]
    c2bc:	78bb      	ldrb	r3, [r7, #2]
    c2be:	743b      	strb	r3, [r7, #16]
    c2c0:	2301      	movs	r3, #1
    c2c2:	61bb      	str	r3, [r7, #24]
    c2c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
    c2c8:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    c2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c2cc:	7b5b      	ldrb	r3, [r3, #13]
    c2ce:	2b00      	cmp	r3, #0
    c2d0:	d003      	beq.n	c2da <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    c2d2:	2100      	movs	r1, #0
    c2d4:	6878      	ldr	r0, [r7, #4]
    c2d6:	4b0a      	ldr	r3, [pc, #40]	; (c300 <n25q256a_read_reg+0x94>)
    c2d8:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    c2da:	f107 030c 	add.w	r3, r7, #12
    c2de:	4619      	mov	r1, r3
    c2e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c2e2:	4b08      	ldr	r3, [pc, #32]	; (c304 <n25q256a_read_reg+0x98>)
    c2e4:	4798      	blx	r3
	if (n25q->xip_mode) {
    c2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c2e8:	7b5b      	ldrb	r3, [r3, #13]
    c2ea:	2b00      	cmp	r3, #0
    c2ec:	d003      	beq.n	c2f6 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    c2ee:	2101      	movs	r1, #1
    c2f0:	6878      	ldr	r0, [r7, #4]
    c2f2:	4b03      	ldr	r3, [pc, #12]	; (c300 <n25q256a_read_reg+0x94>)
    c2f4:	4798      	blx	r3
	}
	return status;
    c2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c2f8:	4618      	mov	r0, r3
    c2fa:	3730      	adds	r7, #48	; 0x30
    c2fc:	46bd      	mov	sp, r7
    c2fe:	bd80      	pop	{r7, pc}
    c300:	0000c1a1 	.word	0x0000c1a1
    c304:	00002ef5 	.word	0x00002ef5

0000c308 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    c308:	b580      	push	{r7, lr}
    c30a:	b08c      	sub	sp, #48	; 0x30
    c30c:	af00      	add	r7, sp, #0
    c30e:	60f8      	str	r0, [r7, #12]
    c310:	607b      	str	r3, [r7, #4]
    c312:	460b      	mov	r3, r1
    c314:	72fb      	strb	r3, [r7, #11]
    c316:	4613      	mov	r3, r2
    c318:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c31a:	68fb      	ldr	r3, [r7, #12]
    c31c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c31e:	68fb      	ldr	r3, [r7, #12]
    c320:	681b      	ldr	r3, [r3, #0]
    c322:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    c324:	f107 0310 	add.w	r3, r7, #16
    c328:	2200      	movs	r2, #0
    c32a:	601a      	str	r2, [r3, #0]
    c32c:	605a      	str	r2, [r3, #4]
    c32e:	609a      	str	r2, [r3, #8]
    c330:	60da      	str	r2, [r3, #12]
    c332:	611a      	str	r2, [r3, #16]
    c334:	615a      	str	r2, [r3, #20]
    c336:	7afb      	ldrb	r3, [r7, #11]
    c338:	f003 0307 	and.w	r3, r3, #7
    c33c:	b2da      	uxtb	r2, r3
    c33e:	7c3b      	ldrb	r3, [r7, #16]
    c340:	f362 0302 	bfi	r3, r2, #0, #3
    c344:	743b      	strb	r3, [r7, #16]
    c346:	7c3b      	ldrb	r3, [r7, #16]
    c348:	f043 0310 	orr.w	r3, r3, #16
    c34c:	743b      	strb	r3, [r7, #16]
    c34e:	7c3b      	ldrb	r3, [r7, #16]
    c350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c354:	743b      	strb	r3, [r7, #16]
    c356:	7c7b      	ldrb	r3, [r7, #17]
    c358:	2202      	movs	r2, #2
    c35a:	f362 1305 	bfi	r3, r2, #4, #2
    c35e:	747b      	strb	r3, [r7, #17]
    c360:	7abb      	ldrb	r3, [r7, #10]
    c362:	753b      	strb	r3, [r7, #20]
    c364:	2301      	movs	r3, #1
    c366:	61fb      	str	r3, [r7, #28]
    c368:	1d3b      	adds	r3, r7, #4
    c36a:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    c36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c36e:	7b5b      	ldrb	r3, [r3, #13]
    c370:	2b00      	cmp	r3, #0
    c372:	d003      	beq.n	c37c <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    c374:	2100      	movs	r1, #0
    c376:	68f8      	ldr	r0, [r7, #12]
    c378:	4b09      	ldr	r3, [pc, #36]	; (c3a0 <n25q256a_write_reg+0x98>)
    c37a:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    c37c:	f107 0310 	add.w	r3, r7, #16
    c380:	4619      	mov	r1, r3
    c382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c384:	4b07      	ldr	r3, [pc, #28]	; (c3a4 <n25q256a_write_reg+0x9c>)
    c386:	4798      	blx	r3
	if (n25q->xip_mode) {
    c388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c38a:	7b5b      	ldrb	r3, [r3, #13]
    c38c:	2b00      	cmp	r3, #0
    c38e:	d003      	beq.n	c398 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    c390:	2101      	movs	r1, #1
    c392:	68f8      	ldr	r0, [r7, #12]
    c394:	4b02      	ldr	r3, [pc, #8]	; (c3a0 <n25q256a_write_reg+0x98>)
    c396:	4798      	blx	r3
	}
}
    c398:	bf00      	nop
    c39a:	3730      	adds	r7, #48	; 0x30
    c39c:	46bd      	mov	sp, r7
    c39e:	bd80      	pop	{r7, pc}
    c3a0:	0000c1a1 	.word	0x0000c1a1
    c3a4:	00002ef5 	.word	0x00002ef5

0000c3a8 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    c3a8:	b580      	push	{r7, lr}
    c3aa:	b090      	sub	sp, #64	; 0x40
    c3ac:	af00      	add	r7, sp, #0
    c3ae:	6078      	str	r0, [r7, #4]
    c3b0:	460b      	mov	r3, r1
    c3b2:	70fb      	strb	r3, [r7, #3]
    c3b4:	4613      	mov	r3, r2
    c3b6:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c3b8:	687b      	ldr	r3, [r7, #4]
    c3ba:	681b      	ldr	r3, [r3, #0]
    c3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    c3be:	78bb      	ldrb	r3, [r7, #2]
    c3c0:	2b00      	cmp	r3, #0
    c3c2:	d001      	beq.n	c3c8 <n25q256a_write_enable+0x20>
    c3c4:	2306      	movs	r3, #6
    c3c6:	e000      	b.n	c3ca <n25q256a_write_enable+0x22>
    c3c8:	2304      	movs	r3, #4
    c3ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    c3ce:	f107 0320 	add.w	r3, r7, #32
    c3d2:	2200      	movs	r2, #0
    c3d4:	601a      	str	r2, [r3, #0]
    c3d6:	605a      	str	r2, [r3, #4]
    c3d8:	609a      	str	r2, [r3, #8]
    c3da:	60da      	str	r2, [r3, #12]
    c3dc:	611a      	str	r2, [r3, #16]
    c3de:	615a      	str	r2, [r3, #20]
    c3e0:	78fb      	ldrb	r3, [r7, #3]
    c3e2:	f003 0307 	and.w	r3, r3, #7
    c3e6:	b2da      	uxtb	r2, r3
    c3e8:	f897 3020 	ldrb.w	r3, [r7, #32]
    c3ec:	f362 0302 	bfi	r3, r2, #0, #3
    c3f0:	f887 3020 	strb.w	r3, [r7, #32]
    c3f4:	f897 3020 	ldrb.w	r3, [r7, #32]
    c3f8:	f043 0310 	orr.w	r3, r3, #16
    c3fc:	f887 3020 	strb.w	r3, [r7, #32]
    c400:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    c404:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    c408:	f107 0308 	add.w	r3, r7, #8
    c40c:	2200      	movs	r2, #0
    c40e:	601a      	str	r2, [r3, #0]
    c410:	605a      	str	r2, [r3, #4]
    c412:	609a      	str	r2, [r3, #8]
    c414:	60da      	str	r2, [r3, #12]
    c416:	611a      	str	r2, [r3, #16]
    c418:	615a      	str	r2, [r3, #20]
    c41a:	78fb      	ldrb	r3, [r7, #3]
    c41c:	f003 0307 	and.w	r3, r3, #7
    c420:	b2da      	uxtb	r2, r3
    c422:	7a3b      	ldrb	r3, [r7, #8]
    c424:	f362 0302 	bfi	r3, r2, #0, #3
    c428:	723b      	strb	r3, [r7, #8]
    c42a:	7a3b      	ldrb	r3, [r7, #8]
    c42c:	f043 0310 	orr.w	r3, r3, #16
    c430:	723b      	strb	r3, [r7, #8]
    c432:	7a3b      	ldrb	r3, [r7, #8]
    c434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c438:	723b      	strb	r3, [r7, #8]
    c43a:	2305      	movs	r3, #5
    c43c:	733b      	strb	r3, [r7, #12]
    c43e:	2301      	movs	r3, #1
    c440:	617b      	str	r3, [r7, #20]
    c442:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    c446:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    c448:	f107 0320 	add.w	r3, r7, #32
    c44c:	4619      	mov	r1, r3
    c44e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c450:	4b08      	ldr	r3, [pc, #32]	; (c474 <n25q256a_write_enable+0xcc>)
    c452:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    c454:	f107 0308 	add.w	r3, r7, #8
    c458:	4619      	mov	r1, r3
    c45a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c45c:	4b05      	ldr	r3, [pc, #20]	; (c474 <n25q256a_write_enable+0xcc>)
    c45e:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    c460:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    c464:	f003 0302 	and.w	r3, r3, #2
    c468:	2b00      	cmp	r3, #0
    c46a:	d0ed      	beq.n	c448 <n25q256a_write_enable+0xa0>
}
    c46c:	bf00      	nop
    c46e:	3740      	adds	r7, #64	; 0x40
    c470:	46bd      	mov	sp, r7
    c472:	bd80      	pop	{r7, pc}
    c474:	00002ef5 	.word	0x00002ef5

0000c478 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    c478:	b590      	push	{r4, r7, lr}
    c47a:	b087      	sub	sp, #28
    c47c:	af00      	add	r7, sp, #0
    c47e:	6078      	str	r0, [r7, #4]
    c480:	460b      	mov	r3, r1
    c482:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    c484:	687b      	ldr	r3, [r7, #4]
    c486:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c488:	68fb      	ldr	r3, [r7, #12]
    c48a:	7b1b      	ldrb	r3, [r3, #12]
    c48c:	2b00      	cmp	r3, #0
    c48e:	d001      	beq.n	c494 <n25q256a_switch_mode+0x1c>
    c490:	2306      	movs	r3, #6
    c492:	e000      	b.n	c496 <n25q256a_switch_mode+0x1e>
    c494:	2300      	movs	r3, #0
    c496:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c498:	7afb      	ldrb	r3, [r7, #11]
    c49a:	2265      	movs	r2, #101	; 0x65
    c49c:	4619      	mov	r1, r3
    c49e:	6878      	ldr	r0, [r7, #4]
    c4a0:	4b25      	ldr	r3, [pc, #148]	; (c538 <n25q256a_switch_mode+0xc0>)
    c4a2:	4798      	blx	r3
    c4a4:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    c4a6:	2300      	movs	r3, #0
    c4a8:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    c4aa:	68fb      	ldr	r3, [r7, #12]
    c4ac:	7b1b      	ldrb	r3, [r3, #12]
    c4ae:	78fa      	ldrb	r2, [r7, #3]
    c4b0:	429a      	cmp	r2, r3
    c4b2:	d03d      	beq.n	c530 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    c4b4:	78fb      	ldrb	r3, [r7, #3]
    c4b6:	2b00      	cmp	r3, #0
    c4b8:	d00b      	beq.n	c4d2 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    c4ba:	697b      	ldr	r3, [r7, #20]
    c4bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c4c0:	2b00      	cmp	r3, #0
    c4c2:	d011      	beq.n	c4e8 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    c4c4:	697b      	ldr	r3, [r7, #20]
    c4c6:	f003 031f 	and.w	r3, r3, #31
    c4ca:	617b      	str	r3, [r7, #20]
			modify = 1;
    c4cc:	2301      	movs	r3, #1
    c4ce:	74fb      	strb	r3, [r7, #19]
    c4d0:	e00a      	b.n	c4e8 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    c4d2:	697b      	ldr	r3, [r7, #20]
    c4d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c4d8:	2b00      	cmp	r3, #0
    c4da:	d105      	bne.n	c4e8 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    c4dc:	697b      	ldr	r3, [r7, #20]
    c4de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    c4e2:	617b      	str	r3, [r7, #20]
			modify = 1;
    c4e4:	2301      	movs	r3, #1
    c4e6:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    c4e8:	7cfb      	ldrb	r3, [r7, #19]
    c4ea:	2b00      	cmp	r3, #0
    c4ec:	d021      	beq.n	c532 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    c4ee:	68fb      	ldr	r3, [r7, #12]
    c4f0:	78fa      	ldrb	r2, [r7, #3]
    c4f2:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    c4f4:	7afb      	ldrb	r3, [r7, #11]
    c4f6:	2201      	movs	r2, #1
    c4f8:	4619      	mov	r1, r3
    c4fa:	6878      	ldr	r0, [r7, #4]
    c4fc:	4b0f      	ldr	r3, [pc, #60]	; (c53c <n25q256a_switch_mode+0xc4>)
    c4fe:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    c500:	7af9      	ldrb	r1, [r7, #11]
    c502:	697b      	ldr	r3, [r7, #20]
    c504:	2261      	movs	r2, #97	; 0x61
    c506:	6878      	ldr	r0, [r7, #4]
    c508:	4c0d      	ldr	r4, [pc, #52]	; (c540 <n25q256a_switch_mode+0xc8>)
    c50a:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c50c:	78fb      	ldrb	r3, [r7, #3]
    c50e:	2b00      	cmp	r3, #0
    c510:	d001      	beq.n	c516 <n25q256a_switch_mode+0x9e>
    c512:	2306      	movs	r3, #6
    c514:	e000      	b.n	c518 <n25q256a_switch_mode+0xa0>
    c516:	2300      	movs	r3, #0
    c518:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c51a:	7afb      	ldrb	r3, [r7, #11]
    c51c:	2265      	movs	r2, #101	; 0x65
    c51e:	4619      	mov	r1, r3
    c520:	6878      	ldr	r0, [r7, #4]
    c522:	4b05      	ldr	r3, [pc, #20]	; (c538 <n25q256a_switch_mode+0xc0>)
    c524:	4798      	blx	r3
    c526:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    c528:	68fb      	ldr	r3, [r7, #12]
    c52a:	78fa      	ldrb	r2, [r7, #3]
    c52c:	731a      	strb	r2, [r3, #12]
    c52e:	e000      	b.n	c532 <n25q256a_switch_mode+0xba>
		return;
    c530:	bf00      	nop
	}
}
    c532:	371c      	adds	r7, #28
    c534:	46bd      	mov	sp, r7
    c536:	bd90      	pop	{r4, r7, pc}
    c538:	0000c26d 	.word	0x0000c26d
    c53c:	0000c3a9 	.word	0x0000c3a9
    c540:	0000c309 	.word	0x0000c309

0000c544 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    c544:	b580      	push	{r7, lr}
    c546:	b086      	sub	sp, #24
    c548:	af00      	add	r7, sp, #0
    c54a:	60f8      	str	r0, [r7, #12]
    c54c:	60b9      	str	r1, [r7, #8]
    c54e:	607a      	str	r2, [r7, #4]
    c550:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    c552:	68fb      	ldr	r3, [r7, #12]
    c554:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    c556:	4a0c      	ldr	r2, [pc, #48]	; (c588 <n25q256a_construct+0x44>)
    c558:	68b9      	ldr	r1, [r7, #8]
    c55a:	68f8      	ldr	r0, [r7, #12]
    c55c:	4b0b      	ldr	r3, [pc, #44]	; (c58c <n25q256a_construct+0x48>)
    c55e:	4798      	blx	r3
	n25q->quad_mode    = 0;
    c560:	697b      	ldr	r3, [r7, #20]
    c562:	2200      	movs	r2, #0
    c564:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    c566:	697b      	ldr	r3, [r7, #20]
    c568:	2200      	movs	r2, #0
    c56a:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    c56c:	697b      	ldr	r3, [r7, #20]
    c56e:	687a      	ldr	r2, [r7, #4]
    c570:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    c572:	78fb      	ldrb	r3, [r7, #3]
    c574:	4619      	mov	r1, r3
    c576:	68f8      	ldr	r0, [r7, #12]
    c578:	4b05      	ldr	r3, [pc, #20]	; (c590 <n25q256a_construct+0x4c>)
    c57a:	4798      	blx	r3
	return me;
    c57c:	68fb      	ldr	r3, [r7, #12]
}
    c57e:	4618      	mov	r0, r3
    c580:	3718      	adds	r7, #24
    c582:	46bd      	mov	sp, r7
    c584:	bd80      	pop	{r7, pc}
    c586:	bf00      	nop
    c588:	0001076c 	.word	0x0001076c
    c58c:	0000ca21 	.word	0x0000ca21
    c590:	0000c479 	.word	0x0000c479

0000c594 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c594:	b580      	push	{r7, lr}
    c596:	b08c      	sub	sp, #48	; 0x30
    c598:	af00      	add	r7, sp, #0
    c59a:	60f8      	str	r0, [r7, #12]
    c59c:	60b9      	str	r1, [r7, #8]
    c59e:	607a      	str	r2, [r7, #4]
    c5a0:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c5a2:	68fb      	ldr	r3, [r7, #12]
    c5a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c5a6:	68fb      	ldr	r3, [r7, #12]
    c5a8:	681b      	ldr	r3, [r3, #0]
    c5aa:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    c5ac:	f107 0310 	add.w	r3, r7, #16
    c5b0:	2200      	movs	r2, #0
    c5b2:	601a      	str	r2, [r3, #0]
    c5b4:	605a      	str	r2, [r3, #4]
    c5b6:	609a      	str	r2, [r3, #8]
    c5b8:	60da      	str	r2, [r3, #12]
    c5ba:	611a      	str	r2, [r3, #16]
    c5bc:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c5c0:	7b1b      	ldrb	r3, [r3, #12]
    c5c2:	2b00      	cmp	r3, #0
    c5c4:	d001      	beq.n	c5ca <n25q256a_read+0x36>
    c5c6:	2206      	movs	r2, #6
    c5c8:	e000      	b.n	c5cc <n25q256a_read+0x38>
    c5ca:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    c5cc:	7c3b      	ldrb	r3, [r7, #16]
    c5ce:	f362 0302 	bfi	r3, r2, #0, #3
    c5d2:	743b      	strb	r3, [r7, #16]
    c5d4:	7c3b      	ldrb	r3, [r7, #16]
    c5d6:	f043 0310 	orr.w	r3, r3, #16
    c5da:	743b      	strb	r3, [r7, #16]
    c5dc:	7c3b      	ldrb	r3, [r7, #16]
    c5de:	f043 0320 	orr.w	r3, r3, #32
    c5e2:	743b      	strb	r3, [r7, #16]
    c5e4:	7c3b      	ldrb	r3, [r7, #16]
    c5e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c5ea:	743b      	strb	r3, [r7, #16]
    c5ec:	7c7b      	ldrb	r3, [r7, #17]
    c5ee:	2201      	movs	r2, #1
    c5f0:	f362 1305 	bfi	r3, r2, #4, #2
    c5f4:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    c5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c5f8:	7b1b      	ldrb	r3, [r3, #12]
    c5fa:	2b00      	cmp	r3, #0
    c5fc:	d001      	beq.n	c602 <n25q256a_read+0x6e>
    c5fe:	220a      	movs	r2, #10
    c600:	e000      	b.n	c604 <n25q256a_read+0x70>
    c602:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    c604:	7cbb      	ldrb	r3, [r7, #18]
    c606:	f362 0304 	bfi	r3, r2, #0, #5
    c60a:	74bb      	strb	r3, [r7, #18]
    c60c:	230b      	movs	r3, #11
    c60e:	753b      	strb	r3, [r7, #20]
    c610:	687b      	ldr	r3, [r7, #4]
    c612:	61bb      	str	r3, [r7, #24]
    c614:	683b      	ldr	r3, [r7, #0]
    c616:	61fb      	str	r3, [r7, #28]
    c618:	68bb      	ldr	r3, [r7, #8]
    c61a:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    c61c:	f107 0310 	add.w	r3, r7, #16
    c620:	4619      	mov	r1, r3
    c622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c624:	4b03      	ldr	r3, [pc, #12]	; (c634 <n25q256a_read+0xa0>)
    c626:	4798      	blx	r3
	return ERR_NONE;
    c628:	2300      	movs	r3, #0
}
    c62a:	4618      	mov	r0, r3
    c62c:	3730      	adds	r7, #48	; 0x30
    c62e:	46bd      	mov	sp, r7
    c630:	bd80      	pop	{r7, pc}
    c632:	bf00      	nop
    c634:	00002ef5 	.word	0x00002ef5

0000c638 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c638:	b580      	push	{r7, lr}
    c63a:	b08c      	sub	sp, #48	; 0x30
    c63c:	af00      	add	r7, sp, #0
    c63e:	60f8      	str	r0, [r7, #12]
    c640:	60b9      	str	r1, [r7, #8]
    c642:	607a      	str	r2, [r7, #4]
    c644:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c646:	68fb      	ldr	r3, [r7, #12]
    c648:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c64a:	68fb      	ldr	r3, [r7, #12]
    c64c:	681b      	ldr	r3, [r3, #0]
    c64e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    c650:	f107 0310 	add.w	r3, r7, #16
    c654:	2200      	movs	r2, #0
    c656:	601a      	str	r2, [r3, #0]
    c658:	605a      	str	r2, [r3, #4]
    c65a:	609a      	str	r2, [r3, #8]
    c65c:	60da      	str	r2, [r3, #12]
    c65e:	611a      	str	r2, [r3, #16]
    c660:	615a      	str	r2, [r3, #20]
    c662:	7c3b      	ldrb	r3, [r7, #16]
    c664:	f043 0310 	orr.w	r3, r3, #16
    c668:	743b      	strb	r3, [r7, #16]
    c66a:	7c3b      	ldrb	r3, [r7, #16]
    c66c:	f043 0320 	orr.w	r3, r3, #32
    c670:	743b      	strb	r3, [r7, #16]
    c672:	7c3b      	ldrb	r3, [r7, #16]
    c674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c678:	743b      	strb	r3, [r7, #16]
    c67a:	7c7b      	ldrb	r3, [r7, #17]
    c67c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    c680:	747b      	strb	r3, [r7, #17]
    c682:	2302      	movs	r3, #2
    c684:	753b      	strb	r3, [r7, #20]
    c686:	687b      	ldr	r3, [r7, #4]
    c688:	61bb      	str	r3, [r7, #24]
    c68a:	683b      	ldr	r3, [r7, #0]
    c68c:	61fb      	str	r3, [r7, #28]
    c68e:	68bb      	ldr	r3, [r7, #8]
    c690:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c694:	7b1b      	ldrb	r3, [r3, #12]
    c696:	2b00      	cmp	r3, #0
    c698:	d001      	beq.n	c69e <n25q256a_write+0x66>
    c69a:	2206      	movs	r2, #6
    c69c:	e000      	b.n	c6a0 <n25q256a_write+0x68>
    c69e:	2200      	movs	r2, #0
    c6a0:	7c3b      	ldrb	r3, [r7, #16]
    c6a2:	f362 0302 	bfi	r3, r2, #0, #3
    c6a6:	743b      	strb	r3, [r7, #16]
	while (length) {
    c6a8:	e035      	b.n	c716 <n25q256a_write+0xde>
		cmd.address = address;
    c6aa:	687b      	ldr	r3, [r7, #4]
    c6ac:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    c6ae:	683b      	ldr	r3, [r7, #0]
    c6b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c6b4:	d802      	bhi.n	c6bc <n25q256a_write+0x84>
			cmd.buf_len = length;
    c6b6:	683b      	ldr	r3, [r7, #0]
    c6b8:	61fb      	str	r3, [r7, #28]
    c6ba:	e002      	b.n	c6c2 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    c6bc:	f44f 7380 	mov.w	r3, #256	; 0x100
    c6c0:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c6c2:	7c3b      	ldrb	r3, [r7, #16]
    c6c4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c6c8:	b2db      	uxtb	r3, r3
    c6ca:	2201      	movs	r2, #1
    c6cc:	4619      	mov	r1, r3
    c6ce:	68f8      	ldr	r0, [r7, #12]
    c6d0:	4b19      	ldr	r3, [pc, #100]	; (c738 <n25q256a_write+0x100>)
    c6d2:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    c6d4:	f107 0310 	add.w	r3, r7, #16
    c6d8:	4619      	mov	r1, r3
    c6da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c6dc:	4b17      	ldr	r3, [pc, #92]	; (c73c <n25q256a_write+0x104>)
    c6de:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c6e0:	bf00      	nop
    c6e2:	7c3b      	ldrb	r3, [r7, #16]
    c6e4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c6e8:	b2db      	uxtb	r3, r3
    c6ea:	2270      	movs	r2, #112	; 0x70
    c6ec:	4619      	mov	r1, r3
    c6ee:	68f8      	ldr	r0, [r7, #12]
    c6f0:	4b13      	ldr	r3, [pc, #76]	; (c740 <n25q256a_write+0x108>)
    c6f2:	4798      	blx	r3
    c6f4:	4603      	mov	r3, r0
    c6f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c6fa:	2b00      	cmp	r3, #0
    c6fc:	d0f1      	beq.n	c6e2 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    c6fe:	6a3a      	ldr	r2, [r7, #32]
    c700:	69fb      	ldr	r3, [r7, #28]
    c702:	4413      	add	r3, r2
    c704:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    c706:	69fb      	ldr	r3, [r7, #28]
    c708:	683a      	ldr	r2, [r7, #0]
    c70a:	1ad3      	subs	r3, r2, r3
    c70c:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    c70e:	69fb      	ldr	r3, [r7, #28]
    c710:	687a      	ldr	r2, [r7, #4]
    c712:	4413      	add	r3, r2
    c714:	607b      	str	r3, [r7, #4]
	while (length) {
    c716:	683b      	ldr	r3, [r7, #0]
    c718:	2b00      	cmp	r3, #0
    c71a:	d1c6      	bne.n	c6aa <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    c71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c71e:	7b5b      	ldrb	r3, [r3, #13]
    c720:	2b00      	cmp	r3, #0
    c722:	d003      	beq.n	c72c <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    c724:	2101      	movs	r1, #1
    c726:	68f8      	ldr	r0, [r7, #12]
    c728:	4b06      	ldr	r3, [pc, #24]	; (c744 <n25q256a_write+0x10c>)
    c72a:	4798      	blx	r3
	}
	return ERR_NONE;
    c72c:	2300      	movs	r3, #0
}
    c72e:	4618      	mov	r0, r3
    c730:	3730      	adds	r7, #48	; 0x30
    c732:	46bd      	mov	sp, r7
    c734:	bd80      	pop	{r7, pc}
    c736:	bf00      	nop
    c738:	0000c3a9 	.word	0x0000c3a9
    c73c:	00002ef5 	.word	0x00002ef5
    c740:	0000c26d 	.word	0x0000c26d
    c744:	0000c1a1 	.word	0x0000c1a1

0000c748 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    c748:	b580      	push	{r7, lr}
    c74a:	b090      	sub	sp, #64	; 0x40
    c74c:	af00      	add	r7, sp, #0
    c74e:	60f8      	str	r0, [r7, #12]
    c750:	60b9      	str	r1, [r7, #8]
    c752:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c754:	68fb      	ldr	r3, [r7, #12]
    c756:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c758:	68fb      	ldr	r3, [r7, #12]
    c75a:	681b      	ldr	r3, [r3, #0]
    c75c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    c75e:	f107 0314 	add.w	r3, r7, #20
    c762:	2200      	movs	r2, #0
    c764:	601a      	str	r2, [r3, #0]
    c766:	605a      	str	r2, [r3, #4]
    c768:	609a      	str	r2, [r3, #8]
    c76a:	60da      	str	r2, [r3, #12]
    c76c:	611a      	str	r2, [r3, #16]
    c76e:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c772:	7b1b      	ldrb	r3, [r3, #12]
    c774:	2b00      	cmp	r3, #0
    c776:	d001      	beq.n	c77c <n25q256a_erase+0x34>
    c778:	2206      	movs	r2, #6
    c77a:	e000      	b.n	c77e <n25q256a_erase+0x36>
    c77c:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    c77e:	7d3b      	ldrb	r3, [r7, #20]
    c780:	f362 0302 	bfi	r3, r2, #0, #3
    c784:	753b      	strb	r3, [r7, #20]
    c786:	7d3b      	ldrb	r3, [r7, #20]
    c788:	f043 0310 	orr.w	r3, r3, #16
    c78c:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    c78e:	687b      	ldr	r3, [r7, #4]
    c790:	4a56      	ldr	r2, [pc, #344]	; (c8ec <n25q256a_erase+0x1a4>)
    c792:	4293      	cmp	r3, r2
    c794:	bf94      	ite	ls
    c796:	2301      	movls	r3, #1
    c798:	2300      	movhi	r3, #0
    c79a:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    c79c:	7d3b      	ldrb	r3, [r7, #20]
    c79e:	f362 1345 	bfi	r3, r2, #5, #1
    c7a2:	753b      	strb	r3, [r7, #20]
    c7a4:	7d7b      	ldrb	r3, [r7, #21]
    c7a6:	2202      	movs	r2, #2
    c7a8:	f362 1305 	bfi	r3, r2, #4, #2
    c7ac:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    c7ae:	68bb      	ldr	r3, [r7, #8]
    c7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    c7b2:	687b      	ldr	r3, [r7, #4]
    c7b4:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    c7b6:	2300      	movs	r3, #0
    c7b8:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    c7ba:	687b      	ldr	r3, [r7, #4]
    c7bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c7c0:	2b00      	cmp	r3, #0
    c7c2:	d104      	bne.n	c7ce <n25q256a_erase+0x86>
    c7c4:	68bb      	ldr	r3, [r7, #8]
    c7c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c7ca:	2b00      	cmp	r3, #0
    c7cc:	d002      	beq.n	c7d4 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    c7ce:	f06f 030c 	mvn.w	r3, #12
    c7d2:	e087      	b.n	c8e4 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    c7d4:	687b      	ldr	r3, [r7, #4]
    c7d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    c7da:	d368      	bcc.n	c8ae <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    c7dc:	23c7      	movs	r3, #199	; 0xc7
    c7de:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c7e0:	7d3b      	ldrb	r3, [r7, #20]
    c7e2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c7e6:	b2db      	uxtb	r3, r3
    c7e8:	2201      	movs	r2, #1
    c7ea:	4619      	mov	r1, r3
    c7ec:	68f8      	ldr	r0, [r7, #12]
    c7ee:	4b40      	ldr	r3, [pc, #256]	; (c8f0 <n25q256a_erase+0x1a8>)
    c7f0:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    c7f2:	f107 0314 	add.w	r3, r7, #20
    c7f6:	4619      	mov	r1, r3
    c7f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c7fa:	4b3e      	ldr	r3, [pc, #248]	; (c8f4 <n25q256a_erase+0x1ac>)
    c7fc:	4798      	blx	r3
    c7fe:	e059      	b.n	c8b4 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    c800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c802:	b29b      	uxth	r3, r3
    c804:	2b00      	cmp	r3, #0
    c806:	d11f      	bne.n	c848 <n25q256a_erase+0x100>
    c808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c80a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c80e:	d31b      	bcc.n	c848 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    c810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c812:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    c814:	23d8      	movs	r3, #216	; 0xd8
    c816:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c818:	7d3b      	ldrb	r3, [r7, #20]
    c81a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c81e:	b2db      	uxtb	r3, r3
    c820:	2201      	movs	r2, #1
    c822:	4619      	mov	r1, r3
    c824:	68f8      	ldr	r0, [r7, #12]
    c826:	4b32      	ldr	r3, [pc, #200]	; (c8f0 <n25q256a_erase+0x1a8>)
    c828:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c82a:	f107 0314 	add.w	r3, r7, #20
    c82e:	4619      	mov	r1, r3
    c830:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c832:	4b30      	ldr	r3, [pc, #192]	; (c8f4 <n25q256a_erase+0x1ac>)
    c834:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    c836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c838:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    c83c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    c83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c840:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    c844:	63bb      	str	r3, [r7, #56]	; 0x38
    c846:	e023      	b.n	c890 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    c848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c84a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    c84e:	d31b      	bcc.n	c888 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    c850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c852:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    c854:	2320      	movs	r3, #32
    c856:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c858:	7d3b      	ldrb	r3, [r7, #20]
    c85a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c85e:	b2db      	uxtb	r3, r3
    c860:	2201      	movs	r2, #1
    c862:	4619      	mov	r1, r3
    c864:	68f8      	ldr	r0, [r7, #12]
    c866:	4b22      	ldr	r3, [pc, #136]	; (c8f0 <n25q256a_erase+0x1a8>)
    c868:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c86a:	f107 0314 	add.w	r3, r7, #20
    c86e:	4619      	mov	r1, r3
    c870:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c872:	4b20      	ldr	r3, [pc, #128]	; (c8f4 <n25q256a_erase+0x1ac>)
    c874:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    c876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    c87c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    c87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c880:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    c884:	63bb      	str	r3, [r7, #56]	; 0x38
    c886:	e003      	b.n	c890 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    c888:	f06f 030c 	mvn.w	r3, #12
    c88c:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    c88e:	e011      	b.n	c8b4 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c890:	bf00      	nop
    c892:	7d3b      	ldrb	r3, [r7, #20]
    c894:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c898:	b2db      	uxtb	r3, r3
    c89a:	2270      	movs	r2, #112	; 0x70
    c89c:	4619      	mov	r1, r3
    c89e:	68f8      	ldr	r0, [r7, #12]
    c8a0:	4b15      	ldr	r3, [pc, #84]	; (c8f8 <n25q256a_erase+0x1b0>)
    c8a2:	4798      	blx	r3
    c8a4:	4603      	mov	r3, r0
    c8a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c8aa:	2b00      	cmp	r3, #0
    c8ac:	d0f1      	beq.n	c892 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    c8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c8b0:	2b00      	cmp	r3, #0
    c8b2:	d1a5      	bne.n	c800 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c8b4:	bf00      	nop
    c8b6:	7d3b      	ldrb	r3, [r7, #20]
    c8b8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c8bc:	b2db      	uxtb	r3, r3
    c8be:	2270      	movs	r2, #112	; 0x70
    c8c0:	4619      	mov	r1, r3
    c8c2:	68f8      	ldr	r0, [r7, #12]
    c8c4:	4b0c      	ldr	r3, [pc, #48]	; (c8f8 <n25q256a_erase+0x1b0>)
    c8c6:	4798      	blx	r3
    c8c8:	4603      	mov	r3, r0
    c8ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c8ce:	2b00      	cmp	r3, #0
    c8d0:	d0f1      	beq.n	c8b6 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    c8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c8d4:	7b5b      	ldrb	r3, [r3, #13]
    c8d6:	2b00      	cmp	r3, #0
    c8d8:	d003      	beq.n	c8e2 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    c8da:	2101      	movs	r1, #1
    c8dc:	68f8      	ldr	r0, [r7, #12]
    c8de:	4b07      	ldr	r3, [pc, #28]	; (c8fc <n25q256a_erase+0x1b4>)
    c8e0:	4798      	blx	r3
	}
	return rc;
    c8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    c8e4:	4618      	mov	r0, r3
    c8e6:	3740      	adds	r7, #64	; 0x40
    c8e8:	46bd      	mov	sp, r7
    c8ea:	bd80      	pop	{r7, pc}
    c8ec:	001fffff 	.word	0x001fffff
    c8f0:	0000c3a9 	.word	0x0000c3a9
    c8f4:	00002ef5 	.word	0x00002ef5
    c8f8:	0000c26d 	.word	0x0000c26d
    c8fc:	0000c1a1 	.word	0x0000c1a1

0000c900 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    c900:	b590      	push	{r4, r7, lr}
    c902:	b085      	sub	sp, #20
    c904:	af00      	add	r7, sp, #0
    c906:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    c908:	687b      	ldr	r3, [r7, #4]
    c90a:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c90c:	68fb      	ldr	r3, [r7, #12]
    c90e:	7b1b      	ldrb	r3, [r3, #12]
    c910:	2b00      	cmp	r3, #0
    c912:	d001      	beq.n	c918 <n25q256a_enable_xip+0x18>
    c914:	2306      	movs	r3, #6
    c916:	e000      	b.n	c91a <n25q256a_enable_xip+0x1a>
    c918:	2300      	movs	r3, #0
    c91a:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    c91c:	68fb      	ldr	r3, [r7, #12]
    c91e:	7b5b      	ldrb	r3, [r3, #13]
    c920:	2b00      	cmp	r3, #0
    c922:	d129      	bne.n	c978 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c924:	7afb      	ldrb	r3, [r7, #11]
    c926:	2285      	movs	r2, #133	; 0x85
    c928:	4619      	mov	r1, r3
    c92a:	6878      	ldr	r0, [r7, #4]
    c92c:	4b15      	ldr	r3, [pc, #84]	; (c984 <n25q256a_enable_xip+0x84>)
    c92e:	4798      	blx	r3
    c930:	4603      	mov	r3, r0
    c932:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    c934:	7abb      	ldrb	r3, [r7, #10]
    c936:	f003 0308 	and.w	r3, r3, #8
    c93a:	2b00      	cmp	r3, #0
    c93c:	d015      	beq.n	c96a <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    c93e:	7abb      	ldrb	r3, [r7, #10]
    c940:	f023 0308 	bic.w	r3, r3, #8
    c944:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    c946:	7abb      	ldrb	r3, [r7, #10]
    c948:	7af9      	ldrb	r1, [r7, #11]
    c94a:	2281      	movs	r2, #129	; 0x81
    c94c:	6878      	ldr	r0, [r7, #4]
    c94e:	4c0e      	ldr	r4, [pc, #56]	; (c988 <n25q256a_enable_xip+0x88>)
    c950:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c952:	bf00      	nop
    c954:	7afb      	ldrb	r3, [r7, #11]
    c956:	2270      	movs	r2, #112	; 0x70
    c958:	4619      	mov	r1, r3
    c95a:	6878      	ldr	r0, [r7, #4]
    c95c:	4b09      	ldr	r3, [pc, #36]	; (c984 <n25q256a_enable_xip+0x84>)
    c95e:	4798      	blx	r3
    c960:	4603      	mov	r3, r0
    c962:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c966:	2b00      	cmp	r3, #0
    c968:	d0f4      	beq.n	c954 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    c96a:	68fb      	ldr	r3, [r7, #12]
    c96c:	2201      	movs	r2, #1
    c96e:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    c970:	2101      	movs	r1, #1
    c972:	6878      	ldr	r0, [r7, #4]
    c974:	4b05      	ldr	r3, [pc, #20]	; (c98c <n25q256a_enable_xip+0x8c>)
    c976:	4798      	blx	r3
	}
	return ERR_NONE;
    c978:	2300      	movs	r3, #0
}
    c97a:	4618      	mov	r0, r3
    c97c:	3714      	adds	r7, #20
    c97e:	46bd      	mov	sp, r7
    c980:	bd90      	pop	{r4, r7, pc}
    c982:	bf00      	nop
    c984:	0000c26d 	.word	0x0000c26d
    c988:	0000c309 	.word	0x0000c309
    c98c:	0000c1a1 	.word	0x0000c1a1

0000c990 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    c990:	b580      	push	{r7, lr}
    c992:	b086      	sub	sp, #24
    c994:	af00      	add	r7, sp, #0
    c996:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c998:	687b      	ldr	r3, [r7, #4]
    c99a:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c99c:	687b      	ldr	r3, [r7, #4]
    c99e:	681b      	ldr	r3, [r3, #0]
    c9a0:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c9a2:	697b      	ldr	r3, [r7, #20]
    c9a4:	7b1b      	ldrb	r3, [r3, #12]
    c9a6:	2b00      	cmp	r3, #0
    c9a8:	d001      	beq.n	c9ae <n25q256a_disable_xip+0x1e>
    c9aa:	2306      	movs	r3, #6
    c9ac:	e000      	b.n	c9b0 <n25q256a_disable_xip+0x20>
    c9ae:	2300      	movs	r3, #0
    c9b0:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    c9b2:	2100      	movs	r1, #0
    c9b4:	6878      	ldr	r0, [r7, #4]
    c9b6:	4b15      	ldr	r3, [pc, #84]	; (ca0c <n25q256a_disable_xip+0x7c>)
    c9b8:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c9ba:	7bfb      	ldrb	r3, [r7, #15]
    c9bc:	2285      	movs	r2, #133	; 0x85
    c9be:	4619      	mov	r1, r3
    c9c0:	6878      	ldr	r0, [r7, #4]
    c9c2:	4b13      	ldr	r3, [pc, #76]	; (ca10 <n25q256a_disable_xip+0x80>)
    c9c4:	4798      	blx	r3
    c9c6:	4603      	mov	r3, r0
    c9c8:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    c9ca:	7bbb      	ldrb	r3, [r7, #14]
    c9cc:	f003 0308 	and.w	r3, r3, #8
    c9d0:	2b00      	cmp	r3, #0
    c9d2:	d113      	bne.n	c9fc <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    c9d4:	697b      	ldr	r3, [r7, #20]
    c9d6:	689b      	ldr	r3, [r3, #8]
    c9d8:	2b00      	cmp	r3, #0
    c9da:	d00f      	beq.n	c9fc <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    c9dc:	693b      	ldr	r3, [r7, #16]
    c9de:	681b      	ldr	r3, [r3, #0]
    c9e0:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    c9e2:	6938      	ldr	r0, [r7, #16]
    c9e4:	4b0b      	ldr	r3, [pc, #44]	; (ca14 <n25q256a_disable_xip+0x84>)
    c9e6:	4798      	blx	r3
			n25q->pin_exit_xip();
    c9e8:	697b      	ldr	r3, [r7, #20]
    c9ea:	689b      	ldr	r3, [r3, #8]
    c9ec:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    c9ee:	68b9      	ldr	r1, [r7, #8]
    c9f0:	6938      	ldr	r0, [r7, #16]
    c9f2:	4b09      	ldr	r3, [pc, #36]	; (ca18 <n25q256a_disable_xip+0x88>)
    c9f4:	4798      	blx	r3
			qspi_sync_enable(descr);
    c9f6:	6938      	ldr	r0, [r7, #16]
    c9f8:	4b08      	ldr	r3, [pc, #32]	; (ca1c <n25q256a_disable_xip+0x8c>)
    c9fa:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    c9fc:	697b      	ldr	r3, [r7, #20]
    c9fe:	2200      	movs	r2, #0
    ca00:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    ca02:	2300      	movs	r3, #0
}
    ca04:	4618      	mov	r0, r3
    ca06:	3718      	adds	r7, #24
    ca08:	46bd      	mov	sp, r7
    ca0a:	bd80      	pop	{r7, pc}
    ca0c:	0000c1a1 	.word	0x0000c1a1
    ca10:	0000c26d 	.word	0x0000c26d
    ca14:	00002eb9 	.word	0x00002eb9
    ca18:	00002e31 	.word	0x00002e31
    ca1c:	00002e7d 	.word	0x00002e7d

0000ca20 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    ca20:	b480      	push	{r7}
    ca22:	b085      	sub	sp, #20
    ca24:	af00      	add	r7, sp, #0
    ca26:	60f8      	str	r0, [r7, #12]
    ca28:	60b9      	str	r1, [r7, #8]
    ca2a:	607a      	str	r2, [r7, #4]
	me->io        = io;
    ca2c:	68fb      	ldr	r3, [r7, #12]
    ca2e:	68ba      	ldr	r2, [r7, #8]
    ca30:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    ca32:	68fb      	ldr	r3, [r7, #12]
    ca34:	687a      	ldr	r2, [r7, #4]
    ca36:	605a      	str	r2, [r3, #4]

	return me;
    ca38:	68fb      	ldr	r3, [r7, #12]
}
    ca3a:	4618      	mov	r0, r3
    ca3c:	3714      	adds	r7, #20
    ca3e:	46bd      	mov	sp, r7
    ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca44:	4770      	bx	lr

0000ca46 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    ca46:	b480      	push	{r7}
    ca48:	b083      	sub	sp, #12
    ca4a:	af00      	add	r7, sp, #0
    ca4c:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    ca4e:	687b      	ldr	r3, [r7, #4]
    ca50:	781b      	ldrb	r3, [r3, #0]
    ca52:	b29a      	uxth	r2, r3
    ca54:	687b      	ldr	r3, [r7, #4]
    ca56:	3301      	adds	r3, #1
    ca58:	781b      	ldrb	r3, [r3, #0]
    ca5a:	b29b      	uxth	r3, r3
    ca5c:	021b      	lsls	r3, r3, #8
    ca5e:	b29b      	uxth	r3, r3
    ca60:	4413      	add	r3, r2
    ca62:	b29b      	uxth	r3, r3
}
    ca64:	4618      	mov	r0, r3
    ca66:	370c      	adds	r7, #12
    ca68:	46bd      	mov	sp, r7
    ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca6e:	4770      	bx	lr

0000ca70 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    ca70:	b480      	push	{r7}
    ca72:	b083      	sub	sp, #12
    ca74:	af00      	add	r7, sp, #0
    ca76:	6078      	str	r0, [r7, #4]
	return desc[0];
    ca78:	687b      	ldr	r3, [r7, #4]
    ca7a:	781b      	ldrb	r3, [r3, #0]
}
    ca7c:	4618      	mov	r0, r3
    ca7e:	370c      	adds	r7, #12
    ca80:	46bd      	mov	sp, r7
    ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca86:	4770      	bx	lr

0000ca88 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    ca88:	b580      	push	{r7, lr}
    ca8a:	b082      	sub	sp, #8
    ca8c:	af00      	add	r7, sp, #0
    ca8e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    ca90:	6878      	ldr	r0, [r7, #4]
    ca92:	4b05      	ldr	r3, [pc, #20]	; (caa8 <usb_desc_next+0x20>)
    ca94:	4798      	blx	r3
    ca96:	4603      	mov	r3, r0
    ca98:	461a      	mov	r2, r3
    ca9a:	687b      	ldr	r3, [r7, #4]
    ca9c:	4413      	add	r3, r2
}
    ca9e:	4618      	mov	r0, r3
    caa0:	3708      	adds	r7, #8
    caa2:	46bd      	mov	sp, r7
    caa4:	bd80      	pop	{r7, pc}
    caa6:	bf00      	nop
    caa8:	0000ca71 	.word	0x0000ca71

0000caac <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    caac:	b580      	push	{r7, lr}
    caae:	b08c      	sub	sp, #48	; 0x30
    cab0:	af00      	add	r7, sp, #0
    cab2:	6078      	str	r0, [r7, #4]
    cab4:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    cab6:	687b      	ldr	r3, [r7, #4]
    cab8:	689b      	ldr	r3, [r3, #8]
    caba:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    cabc:	683b      	ldr	r3, [r7, #0]
    cabe:	681b      	ldr	r3, [r3, #0]
    cac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    cac2:	2300      	movs	r3, #0
    cac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cac8:	e08f      	b.n	cbea <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    caca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cacc:	2b00      	cmp	r3, #0
    cace:	d102      	bne.n	cad6 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    cad0:	f06f 0309 	mvn.w	r3, #9
    cad4:	e092      	b.n	cbfc <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    cad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cad8:	789b      	ldrb	r3, [r3, #2]
    cada:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    cadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cade:	795b      	ldrb	r3, [r3, #5]
    cae0:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    cae2:	7c7b      	ldrb	r3, [r7, #17]
    cae4:	2b02      	cmp	r3, #2
    cae6:	d002      	beq.n	caee <cdcdf_acm_enable+0x42>
    cae8:	7c7b      	ldrb	r3, [r7, #17]
    caea:	2b0a      	cmp	r3, #10
    caec:	d121      	bne.n	cb32 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    caee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    caf2:	6a3a      	ldr	r2, [r7, #32]
    caf4:	5cd2      	ldrb	r2, [r2, r3]
    caf6:	7bbb      	ldrb	r3, [r7, #14]
    caf8:	429a      	cmp	r2, r3
    cafa:	d102      	bne.n	cb02 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    cafc:	f06f 0311 	mvn.w	r3, #17
    cb00:	e07c      	b.n	cbfc <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    cb02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    cb06:	6a3a      	ldr	r2, [r7, #32]
    cb08:	5cd3      	ldrb	r3, [r2, r3]
    cb0a:	2bff      	cmp	r3, #255	; 0xff
    cb0c:	d002      	beq.n	cb14 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    cb0e:	f06f 031b 	mvn.w	r3, #27
    cb12:	e073      	b.n	cbfc <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    cb14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    cb18:	7bb9      	ldrb	r1, [r7, #14]
    cb1a:	6a3a      	ldr	r2, [r7, #32]
    cb1c:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    cb1e:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    cb20:	683b      	ldr	r3, [r7, #0]
    cb22:	685b      	ldr	r3, [r3, #4]
    cb24:	2205      	movs	r2, #5
    cb26:	4619      	mov	r1, r3
    cb28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    cb2a:	4b36      	ldr	r3, [pc, #216]	; (cc04 <cdcdf_acm_enable+0x158>)
    cb2c:	4798      	blx	r3
    cb2e:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    cb30:	e047      	b.n	cbc2 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    cb32:	f06f 0309 	mvn.w	r3, #9
    cb36:	e061      	b.n	cbfc <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    cb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cb3a:	789b      	ldrb	r3, [r3, #2]
    cb3c:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    cb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cb40:	78db      	ldrb	r3, [r3, #3]
    cb42:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    cb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cb46:	3304      	adds	r3, #4
    cb48:	4618      	mov	r0, r3
    cb4a:	4b2f      	ldr	r3, [pc, #188]	; (cc08 <cdcdf_acm_enable+0x15c>)
    cb4c:	4798      	blx	r3
    cb4e:	4603      	mov	r3, r0
    cb50:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    cb52:	7ebb      	ldrb	r3, [r7, #26]
    cb54:	7ef9      	ldrb	r1, [r7, #27]
    cb56:	8bba      	ldrh	r2, [r7, #28]
    cb58:	4618      	mov	r0, r3
    cb5a:	4b2c      	ldr	r3, [pc, #176]	; (cc0c <cdcdf_acm_enable+0x160>)
    cb5c:	4798      	blx	r3
    cb5e:	4603      	mov	r3, r0
    cb60:	2b00      	cmp	r3, #0
    cb62:	d002      	beq.n	cb6a <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    cb64:	f06f 0313 	mvn.w	r3, #19
    cb68:	e048      	b.n	cbfc <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    cb6a:	7ebb      	ldrb	r3, [r7, #26]
    cb6c:	b25b      	sxtb	r3, r3
    cb6e:	2b00      	cmp	r3, #0
    cb70:	da0f      	bge.n	cb92 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    cb72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    cb76:	7eb9      	ldrb	r1, [r7, #26]
    cb78:	6a3a      	ldr	r2, [r7, #32]
    cb7a:	4413      	add	r3, r2
    cb7c:	460a      	mov	r2, r1
    cb7e:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    cb80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    cb84:	6a3a      	ldr	r2, [r7, #32]
    cb86:	4413      	add	r3, r2
    cb88:	789b      	ldrb	r3, [r3, #2]
    cb8a:	4618      	mov	r0, r3
    cb8c:	4b20      	ldr	r3, [pc, #128]	; (cc10 <cdcdf_acm_enable+0x164>)
    cb8e:	4798      	blx	r3
    cb90:	e007      	b.n	cba2 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    cb92:	7eba      	ldrb	r2, [r7, #26]
    cb94:	6a3b      	ldr	r3, [r7, #32]
    cb96:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    cb98:	6a3b      	ldr	r3, [r7, #32]
    cb9a:	791b      	ldrb	r3, [r3, #4]
    cb9c:	4618      	mov	r0, r3
    cb9e:	4b1c      	ldr	r3, [pc, #112]	; (cc10 <cdcdf_acm_enable+0x164>)
    cba0:	4798      	blx	r3
			}
			desc->sod = ep;
    cba2:	683b      	ldr	r3, [r7, #0]
    cba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cba6:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    cba8:	683b      	ldr	r3, [r7, #0]
    cbaa:	681b      	ldr	r3, [r3, #0]
    cbac:	4618      	mov	r0, r3
    cbae:	4b19      	ldr	r3, [pc, #100]	; (cc14 <cdcdf_acm_enable+0x168>)
    cbb0:	4798      	blx	r3
    cbb2:	4602      	mov	r2, r0
    cbb4:	683b      	ldr	r3, [r7, #0]
    cbb6:	685b      	ldr	r3, [r3, #4]
    cbb8:	4619      	mov	r1, r3
    cbba:	4610      	mov	r0, r2
    cbbc:	4b16      	ldr	r3, [pc, #88]	; (cc18 <cdcdf_acm_enable+0x16c>)
    cbbe:	4798      	blx	r3
    cbc0:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    cbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cbc4:	2b00      	cmp	r3, #0
    cbc6:	d1b7      	bne.n	cb38 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    cbc8:	683b      	ldr	r3, [r7, #0]
    cbca:	681b      	ldr	r3, [r3, #0]
    cbcc:	4618      	mov	r0, r3
    cbce:	4b11      	ldr	r3, [pc, #68]	; (cc14 <cdcdf_acm_enable+0x168>)
    cbd0:	4798      	blx	r3
    cbd2:	683b      	ldr	r3, [r7, #0]
    cbd4:	685b      	ldr	r3, [r3, #4]
    cbd6:	2204      	movs	r2, #4
    cbd8:	4619      	mov	r1, r3
    cbda:	4b0a      	ldr	r3, [pc, #40]	; (cc04 <cdcdf_acm_enable+0x158>)
    cbdc:	4798      	blx	r3
    cbde:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    cbe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    cbe4:	3301      	adds	r3, #1
    cbe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cbea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    cbee:	2b01      	cmp	r3, #1
    cbf0:	f67f af6b 	bls.w	caca <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    cbf4:	4b09      	ldr	r3, [pc, #36]	; (cc1c <cdcdf_acm_enable+0x170>)
    cbf6:	2201      	movs	r2, #1
    cbf8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    cbfa:	2300      	movs	r3, #0
}
    cbfc:	4618      	mov	r0, r3
    cbfe:	3730      	adds	r7, #48	; 0x30
    cc00:	46bd      	mov	sp, r7
    cc02:	bd80      	pop	{r7, pc}
    cc04:	0000de6d 	.word	0x0000de6d
    cc08:	0000ca47 	.word	0x0000ca47
    cc0c:	00003b69 	.word	0x00003b69
    cc10:	00003c55 	.word	0x00003c55
    cc14:	0000ca89 	.word	0x0000ca89
    cc18:	0000dec9 	.word	0x0000dec9
    cc1c:	20001074 	.word	0x20001074

0000cc20 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    cc20:	b580      	push	{r7, lr}
    cc22:	b088      	sub	sp, #32
    cc24:	af00      	add	r7, sp, #0
    cc26:	6078      	str	r0, [r7, #4]
    cc28:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    cc2a:	687b      	ldr	r3, [r7, #4]
    cc2c:	689b      	ldr	r3, [r3, #8]
    cc2e:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    cc30:	683b      	ldr	r3, [r7, #0]
    cc32:	2b00      	cmp	r3, #0
    cc34:	d00c      	beq.n	cc50 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    cc36:	683b      	ldr	r3, [r7, #0]
    cc38:	681b      	ldr	r3, [r3, #0]
    cc3a:	795b      	ldrb	r3, [r3, #5]
    cc3c:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    cc3e:	7c7b      	ldrb	r3, [r7, #17]
    cc40:	2b02      	cmp	r3, #2
    cc42:	d005      	beq.n	cc50 <cdcdf_acm_disable+0x30>
    cc44:	7c7b      	ldrb	r3, [r7, #17]
    cc46:	2b0a      	cmp	r3, #10
    cc48:	d002      	beq.n	cc50 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    cc4a:	f06f 0309 	mvn.w	r3, #9
    cc4e:	e035      	b.n	ccbc <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    cc50:	2300      	movs	r3, #0
    cc52:	77fb      	strb	r3, [r7, #31]
    cc54:	e01f      	b.n	cc96 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    cc56:	7ffb      	ldrb	r3, [r7, #31]
    cc58:	69ba      	ldr	r2, [r7, #24]
    cc5a:	5cd3      	ldrb	r3, [r2, r3]
    cc5c:	2bff      	cmp	r3, #255	; 0xff
    cc5e:	d016      	beq.n	cc8e <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    cc60:	7ffb      	ldrb	r3, [r7, #31]
    cc62:	69ba      	ldr	r2, [r7, #24]
    cc64:	21ff      	movs	r1, #255	; 0xff
    cc66:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    cc68:	7ffb      	ldrb	r3, [r7, #31]
    cc6a:	69ba      	ldr	r2, [r7, #24]
    cc6c:	4413      	add	r3, r2
    cc6e:	789b      	ldrb	r3, [r3, #2]
    cc70:	2bff      	cmp	r3, #255	; 0xff
    cc72:	d00d      	beq.n	cc90 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    cc74:	7ffb      	ldrb	r3, [r7, #31]
    cc76:	69ba      	ldr	r2, [r7, #24]
    cc78:	4413      	add	r3, r2
    cc7a:	789b      	ldrb	r3, [r3, #2]
    cc7c:	4618      	mov	r0, r3
    cc7e:	4b11      	ldr	r3, [pc, #68]	; (ccc4 <cdcdf_acm_disable+0xa4>)
    cc80:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    cc82:	7ffb      	ldrb	r3, [r7, #31]
    cc84:	69ba      	ldr	r2, [r7, #24]
    cc86:	4413      	add	r3, r2
    cc88:	22ff      	movs	r2, #255	; 0xff
    cc8a:	709a      	strb	r2, [r3, #2]
    cc8c:	e000      	b.n	cc90 <cdcdf_acm_disable+0x70>
			continue;
    cc8e:	bf00      	nop
	for (i = 0; i < 2; i++) {
    cc90:	7ffb      	ldrb	r3, [r7, #31]
    cc92:	3301      	adds	r3, #1
    cc94:	77fb      	strb	r3, [r7, #31]
    cc96:	7ffb      	ldrb	r3, [r7, #31]
    cc98:	2b01      	cmp	r3, #1
    cc9a:	d9dc      	bls.n	cc56 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    cc9c:	69bb      	ldr	r3, [r7, #24]
    cc9e:	791b      	ldrb	r3, [r3, #4]
    cca0:	2bff      	cmp	r3, #255	; 0xff
    cca2:	d007      	beq.n	ccb4 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    cca4:	69bb      	ldr	r3, [r7, #24]
    cca6:	791b      	ldrb	r3, [r3, #4]
    cca8:	4618      	mov	r0, r3
    ccaa:	4b06      	ldr	r3, [pc, #24]	; (ccc4 <cdcdf_acm_disable+0xa4>)
    ccac:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    ccae:	69bb      	ldr	r3, [r7, #24]
    ccb0:	22ff      	movs	r2, #255	; 0xff
    ccb2:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    ccb4:	4b04      	ldr	r3, [pc, #16]	; (ccc8 <cdcdf_acm_disable+0xa8>)
    ccb6:	2200      	movs	r2, #0
    ccb8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    ccba:	2300      	movs	r3, #0
}
    ccbc:	4618      	mov	r0, r3
    ccbe:	3720      	adds	r7, #32
    ccc0:	46bd      	mov	sp, r7
    ccc2:	bd80      	pop	{r7, pc}
    ccc4:	00003c05 	.word	0x00003c05
    ccc8:	20001074 	.word	0x20001074

0000cccc <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    cccc:	b580      	push	{r7, lr}
    ccce:	b084      	sub	sp, #16
    ccd0:	af00      	add	r7, sp, #0
    ccd2:	60f8      	str	r0, [r7, #12]
    ccd4:	460b      	mov	r3, r1
    ccd6:	607a      	str	r2, [r7, #4]
    ccd8:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    ccda:	7afb      	ldrb	r3, [r7, #11]
    ccdc:	2b01      	cmp	r3, #1
    ccde:	d009      	beq.n	ccf4 <cdcdf_acm_ctrl+0x28>
    cce0:	2b02      	cmp	r3, #2
    cce2:	d00d      	beq.n	cd00 <cdcdf_acm_ctrl+0x34>
    cce4:	2b00      	cmp	r3, #0
    cce6:	d10e      	bne.n	cd06 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    cce8:	6879      	ldr	r1, [r7, #4]
    ccea:	68f8      	ldr	r0, [r7, #12]
    ccec:	4b09      	ldr	r3, [pc, #36]	; (cd14 <cdcdf_acm_ctrl+0x48>)
    ccee:	4798      	blx	r3
    ccf0:	4603      	mov	r3, r0
    ccf2:	e00a      	b.n	cd0a <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    ccf4:	6879      	ldr	r1, [r7, #4]
    ccf6:	68f8      	ldr	r0, [r7, #12]
    ccf8:	4b07      	ldr	r3, [pc, #28]	; (cd18 <cdcdf_acm_ctrl+0x4c>)
    ccfa:	4798      	blx	r3
    ccfc:	4603      	mov	r3, r0
    ccfe:	e004      	b.n	cd0a <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    cd00:	f06f 031a 	mvn.w	r3, #26
    cd04:	e001      	b.n	cd0a <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    cd06:	f06f 030c 	mvn.w	r3, #12
	}
}
    cd0a:	4618      	mov	r0, r3
    cd0c:	3710      	adds	r7, #16
    cd0e:	46bd      	mov	sp, r7
    cd10:	bd80      	pop	{r7, pc}
    cd12:	bf00      	nop
    cd14:	0000caad 	.word	0x0000caad
    cd18:	0000cc21 	.word	0x0000cc21

0000cd1c <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cd1c:	b590      	push	{r4, r7, lr}
    cd1e:	b087      	sub	sp, #28
    cd20:	af00      	add	r7, sp, #0
    cd22:	4603      	mov	r3, r0
    cd24:	6039      	str	r1, [r7, #0]
    cd26:	71fb      	strb	r3, [r7, #7]
    cd28:	4613      	mov	r3, r2
    cd2a:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    cd2c:	683b      	ldr	r3, [r7, #0]
    cd2e:	799a      	ldrb	r2, [r3, #6]
    cd30:	79db      	ldrb	r3, [r3, #7]
    cd32:	021b      	lsls	r3, r3, #8
    cd34:	4313      	orrs	r3, r2
    cd36:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    cd38:	4b2b      	ldr	r3, [pc, #172]	; (cde8 <cdcdf_acm_set_req+0xcc>)
    cd3a:	4798      	blx	r3
    cd3c:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    cd3e:	683b      	ldr	r3, [r7, #0]
    cd40:	785b      	ldrb	r3, [r3, #1]
    cd42:	2b20      	cmp	r3, #32
    cd44:	d002      	beq.n	cd4c <cdcdf_acm_set_req+0x30>
    cd46:	2b22      	cmp	r3, #34	; 0x22
    cd48:	d034      	beq.n	cdb4 <cdcdf_acm_set_req+0x98>
    cd4a:	e046      	b.n	cdda <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    cd4c:	8afb      	ldrh	r3, [r7, #22]
    cd4e:	2b07      	cmp	r3, #7
    cd50:	d002      	beq.n	cd58 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    cd52:	f04f 33ff 	mov.w	r3, #4294967295
    cd56:	e042      	b.n	cdde <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    cd58:	79bb      	ldrb	r3, [r7, #6]
    cd5a:	2b00      	cmp	r3, #0
    cd5c:	d107      	bne.n	cd6e <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    cd5e:	8afa      	ldrh	r2, [r7, #22]
    cd60:	79f8      	ldrb	r0, [r7, #7]
    cd62:	2300      	movs	r3, #0
    cd64:	6939      	ldr	r1, [r7, #16]
    cd66:	4c21      	ldr	r4, [pc, #132]	; (cdec <cdcdf_acm_set_req+0xd0>)
    cd68:	47a0      	blx	r4
    cd6a:	4603      	mov	r3, r0
    cd6c:	e037      	b.n	cdde <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    cd6e:	693a      	ldr	r2, [r7, #16]
    cd70:	f107 0308 	add.w	r3, r7, #8
    cd74:	6810      	ldr	r0, [r2, #0]
    cd76:	6018      	str	r0, [r3, #0]
    cd78:	8891      	ldrh	r1, [r2, #4]
    cd7a:	7992      	ldrb	r2, [r2, #6]
    cd7c:	8099      	strh	r1, [r3, #4]
    cd7e:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    cd80:	4b1b      	ldr	r3, [pc, #108]	; (cdf0 <cdcdf_acm_set_req+0xd4>)
    cd82:	681b      	ldr	r3, [r3, #0]
    cd84:	2b00      	cmp	r3, #0
    cd86:	d008      	beq.n	cd9a <cdcdf_acm_set_req+0x7e>
    cd88:	4b19      	ldr	r3, [pc, #100]	; (cdf0 <cdcdf_acm_set_req+0xd4>)
    cd8a:	681b      	ldr	r3, [r3, #0]
    cd8c:	f107 0208 	add.w	r2, r7, #8
    cd90:	4610      	mov	r0, r2
    cd92:	4798      	blx	r3
    cd94:	4603      	mov	r3, r0
    cd96:	2b00      	cmp	r3, #0
    cd98:	d00a      	beq.n	cdb0 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    cd9a:	4b16      	ldr	r3, [pc, #88]	; (cdf4 <cdcdf_acm_set_req+0xd8>)
    cd9c:	f107 0208 	add.w	r2, r7, #8
    cda0:	e892 0003 	ldmia.w	r2, {r0, r1}
    cda4:	6018      	str	r0, [r3, #0]
    cda6:	3304      	adds	r3, #4
    cda8:	8019      	strh	r1, [r3, #0]
    cdaa:	3302      	adds	r3, #2
    cdac:	0c0a      	lsrs	r2, r1, #16
    cdae:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    cdb0:	2300      	movs	r3, #0
    cdb2:	e014      	b.n	cdde <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    cdb4:	2300      	movs	r3, #0
    cdb6:	2200      	movs	r2, #0
    cdb8:	2100      	movs	r1, #0
    cdba:	2000      	movs	r0, #0
    cdbc:	4c0b      	ldr	r4, [pc, #44]	; (cdec <cdcdf_acm_set_req+0xd0>)
    cdbe:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    cdc0:	4b0d      	ldr	r3, [pc, #52]	; (cdf8 <cdcdf_acm_set_req+0xdc>)
    cdc2:	681b      	ldr	r3, [r3, #0]
    cdc4:	2b00      	cmp	r3, #0
    cdc6:	d006      	beq.n	cdd6 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    cdc8:	4b0b      	ldr	r3, [pc, #44]	; (cdf8 <cdcdf_acm_set_req+0xdc>)
    cdca:	681b      	ldr	r3, [r3, #0]
    cdcc:	683a      	ldr	r2, [r7, #0]
    cdce:	8852      	ldrh	r2, [r2, #2]
    cdd0:	b292      	uxth	r2, r2
    cdd2:	4610      	mov	r0, r2
    cdd4:	4798      	blx	r3
		}
		return ERR_NONE;
    cdd6:	2300      	movs	r3, #0
    cdd8:	e001      	b.n	cdde <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    cdda:	f06f 030c 	mvn.w	r3, #12
	}
}
    cdde:	4618      	mov	r0, r3
    cde0:	371c      	adds	r7, #28
    cde2:	46bd      	mov	sp, r7
    cde4:	bd90      	pop	{r4, r7, pc}
    cde6:	bf00      	nop
    cde8:	0000dd69 	.word	0x0000dd69
    cdec:	0000dbdd 	.word	0x0000dbdd
    cdf0:	20001088 	.word	0x20001088
    cdf4:	2000107c 	.word	0x2000107c
    cdf8:	20001084 	.word	0x20001084

0000cdfc <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cdfc:	b590      	push	{r4, r7, lr}
    cdfe:	b085      	sub	sp, #20
    ce00:	af00      	add	r7, sp, #0
    ce02:	4603      	mov	r3, r0
    ce04:	6039      	str	r1, [r7, #0]
    ce06:	71fb      	strb	r3, [r7, #7]
    ce08:	4613      	mov	r3, r2
    ce0a:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    ce0c:	683b      	ldr	r3, [r7, #0]
    ce0e:	799a      	ldrb	r2, [r3, #6]
    ce10:	79db      	ldrb	r3, [r3, #7]
    ce12:	021b      	lsls	r3, r3, #8
    ce14:	4313      	orrs	r3, r2
    ce16:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    ce18:	79bb      	ldrb	r3, [r7, #6]
    ce1a:	2b01      	cmp	r3, #1
    ce1c:	d101      	bne.n	ce22 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    ce1e:	2300      	movs	r3, #0
    ce20:	e013      	b.n	ce4a <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    ce22:	683b      	ldr	r3, [r7, #0]
    ce24:	785b      	ldrb	r3, [r3, #1]
    ce26:	2b21      	cmp	r3, #33	; 0x21
    ce28:	d10d      	bne.n	ce46 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    ce2a:	89fb      	ldrh	r3, [r7, #14]
    ce2c:	2b07      	cmp	r3, #7
    ce2e:	d002      	beq.n	ce36 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    ce30:	f04f 33ff 	mov.w	r3, #4294967295
    ce34:	e009      	b.n	ce4a <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    ce36:	89fa      	ldrh	r2, [r7, #14]
    ce38:	79f8      	ldrb	r0, [r7, #7]
    ce3a:	2300      	movs	r3, #0
    ce3c:	4905      	ldr	r1, [pc, #20]	; (ce54 <cdcdf_acm_get_req+0x58>)
    ce3e:	4c06      	ldr	r4, [pc, #24]	; (ce58 <cdcdf_acm_get_req+0x5c>)
    ce40:	47a0      	blx	r4
    ce42:	4603      	mov	r3, r0
    ce44:	e001      	b.n	ce4a <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    ce46:	f06f 030c 	mvn.w	r3, #12
	}
}
    ce4a:	4618      	mov	r0, r3
    ce4c:	3714      	adds	r7, #20
    ce4e:	46bd      	mov	sp, r7
    ce50:	bd90      	pop	{r4, r7, pc}
    ce52:	bf00      	nop
    ce54:	2000107c 	.word	0x2000107c
    ce58:	0000dbdd 	.word	0x0000dbdd

0000ce5c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ce5c:	b580      	push	{r7, lr}
    ce5e:	b082      	sub	sp, #8
    ce60:	af00      	add	r7, sp, #0
    ce62:	4603      	mov	r3, r0
    ce64:	6039      	str	r1, [r7, #0]
    ce66:	71fb      	strb	r3, [r7, #7]
    ce68:	4613      	mov	r3, r2
    ce6a:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    ce6c:	683b      	ldr	r3, [r7, #0]
    ce6e:	781b      	ldrb	r3, [r3, #0]
    ce70:	095b      	lsrs	r3, r3, #5
    ce72:	b2db      	uxtb	r3, r3
    ce74:	f003 0303 	and.w	r3, r3, #3
    ce78:	2b01      	cmp	r3, #1
    ce7a:	d002      	beq.n	ce82 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    ce7c:	f06f 0309 	mvn.w	r3, #9
    ce80:	e026      	b.n	ced0 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    ce82:	683b      	ldr	r3, [r7, #0]
    ce84:	889b      	ldrh	r3, [r3, #4]
    ce86:	b29a      	uxth	r2, r3
    ce88:	4b13      	ldr	r3, [pc, #76]	; (ced8 <cdcdf_acm_req+0x7c>)
    ce8a:	781b      	ldrb	r3, [r3, #0]
    ce8c:	b29b      	uxth	r3, r3
    ce8e:	429a      	cmp	r2, r3
    ce90:	d007      	beq.n	cea2 <cdcdf_acm_req+0x46>
    ce92:	683b      	ldr	r3, [r7, #0]
    ce94:	889b      	ldrh	r3, [r3, #4]
    ce96:	b29a      	uxth	r2, r3
    ce98:	4b0f      	ldr	r3, [pc, #60]	; (ced8 <cdcdf_acm_req+0x7c>)
    ce9a:	785b      	ldrb	r3, [r3, #1]
    ce9c:	b29b      	uxth	r3, r3
    ce9e:	429a      	cmp	r2, r3
    cea0:	d114      	bne.n	cecc <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    cea2:	683b      	ldr	r3, [r7, #0]
    cea4:	781b      	ldrb	r3, [r3, #0]
    cea6:	b25b      	sxtb	r3, r3
    cea8:	2b00      	cmp	r3, #0
    ceaa:	da07      	bge.n	cebc <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    ceac:	79ba      	ldrb	r2, [r7, #6]
    ceae:	79fb      	ldrb	r3, [r7, #7]
    ceb0:	6839      	ldr	r1, [r7, #0]
    ceb2:	4618      	mov	r0, r3
    ceb4:	4b09      	ldr	r3, [pc, #36]	; (cedc <cdcdf_acm_req+0x80>)
    ceb6:	4798      	blx	r3
    ceb8:	4603      	mov	r3, r0
    ceba:	e009      	b.n	ced0 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    cebc:	79ba      	ldrb	r2, [r7, #6]
    cebe:	79fb      	ldrb	r3, [r7, #7]
    cec0:	6839      	ldr	r1, [r7, #0]
    cec2:	4618      	mov	r0, r3
    cec4:	4b06      	ldr	r3, [pc, #24]	; (cee0 <cdcdf_acm_req+0x84>)
    cec6:	4798      	blx	r3
    cec8:	4603      	mov	r3, r0
    ceca:	e001      	b.n	ced0 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    cecc:	f06f 0309 	mvn.w	r3, #9
	}
}
    ced0:	4618      	mov	r0, r3
    ced2:	3708      	adds	r7, #8
    ced4:	46bd      	mov	sp, r7
    ced6:	bd80      	pop	{r7, pc}
    ced8:	20001074 	.word	0x20001074
    cedc:	0000cdfd 	.word	0x0000cdfd
    cee0:	0000cd1d 	.word	0x0000cd1d

0000cee4 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    cee4:	b580      	push	{r7, lr}
    cee6:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    cee8:	4b0b      	ldr	r3, [pc, #44]	; (cf18 <cdcdf_acm_init+0x34>)
    ceea:	4798      	blx	r3
    ceec:	4603      	mov	r3, r0
    ceee:	2b01      	cmp	r3, #1
    cef0:	d902      	bls.n	cef8 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    cef2:	f06f 0310 	mvn.w	r3, #16
    cef6:	e00d      	b.n	cf14 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    cef8:	4b08      	ldr	r3, [pc, #32]	; (cf1c <cdcdf_acm_init+0x38>)
    cefa:	4a09      	ldr	r2, [pc, #36]	; (cf20 <cdcdf_acm_init+0x3c>)
    cefc:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    cefe:	4b07      	ldr	r3, [pc, #28]	; (cf1c <cdcdf_acm_init+0x38>)
    cf00:	4a08      	ldr	r2, [pc, #32]	; (cf24 <cdcdf_acm_init+0x40>)
    cf02:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    cf04:	4805      	ldr	r0, [pc, #20]	; (cf1c <cdcdf_acm_init+0x38>)
    cf06:	4b08      	ldr	r3, [pc, #32]	; (cf28 <cdcdf_acm_init+0x44>)
    cf08:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    cf0a:	4908      	ldr	r1, [pc, #32]	; (cf2c <cdcdf_acm_init+0x48>)
    cf0c:	2001      	movs	r0, #1
    cf0e:	4b08      	ldr	r3, [pc, #32]	; (cf30 <cdcdf_acm_init+0x4c>)
    cf10:	4798      	blx	r3
	return ERR_NONE;
    cf12:	2300      	movs	r3, #0
}
    cf14:	4618      	mov	r0, r3
    cf16:	bd80      	pop	{r7, pc}
    cf18:	0000dd81 	.word	0x0000dd81
    cf1c:	20001068 	.word	0x20001068
    cf20:	0000cccd 	.word	0x0000cccd
    cf24:	20001074 	.word	0x20001074
    cf28:	0000dce9 	.word	0x0000dce9
    cf2c:	200001d8 	.word	0x200001d8
    cf30:	0000dc19 	.word	0x0000dc19

0000cf34 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    cf34:	b590      	push	{r4, r7, lr}
    cf36:	b083      	sub	sp, #12
    cf38:	af00      	add	r7, sp, #0
    cf3a:	6078      	str	r0, [r7, #4]
    cf3c:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    cf3e:	4b0b      	ldr	r3, [pc, #44]	; (cf6c <cdcdf_acm_read+0x38>)
    cf40:	4798      	blx	r3
    cf42:	4603      	mov	r3, r0
    cf44:	f083 0301 	eor.w	r3, r3, #1
    cf48:	b2db      	uxtb	r3, r3
    cf4a:	2b00      	cmp	r3, #0
    cf4c:	d002      	beq.n	cf54 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    cf4e:	f06f 0310 	mvn.w	r3, #16
    cf52:	e007      	b.n	cf64 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    cf54:	4b06      	ldr	r3, [pc, #24]	; (cf70 <cdcdf_acm_read+0x3c>)
    cf56:	7918      	ldrb	r0, [r3, #4]
    cf58:	2300      	movs	r3, #0
    cf5a:	683a      	ldr	r2, [r7, #0]
    cf5c:	6879      	ldr	r1, [r7, #4]
    cf5e:	4c05      	ldr	r4, [pc, #20]	; (cf74 <cdcdf_acm_read+0x40>)
    cf60:	47a0      	blx	r4
    cf62:	4603      	mov	r3, r0
}
    cf64:	4618      	mov	r0, r3
    cf66:	370c      	adds	r7, #12
    cf68:	46bd      	mov	sp, r7
    cf6a:	bd90      	pop	{r4, r7, pc}
    cf6c:	0000d059 	.word	0x0000d059
    cf70:	20001074 	.word	0x20001074
    cf74:	0000dbdd 	.word	0x0000dbdd

0000cf78 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    cf78:	b590      	push	{r4, r7, lr}
    cf7a:	b083      	sub	sp, #12
    cf7c:	af00      	add	r7, sp, #0
    cf7e:	6078      	str	r0, [r7, #4]
    cf80:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    cf82:	4b0b      	ldr	r3, [pc, #44]	; (cfb0 <cdcdf_acm_write+0x38>)
    cf84:	4798      	blx	r3
    cf86:	4603      	mov	r3, r0
    cf88:	f083 0301 	eor.w	r3, r3, #1
    cf8c:	b2db      	uxtb	r3, r3
    cf8e:	2b00      	cmp	r3, #0
    cf90:	d002      	beq.n	cf98 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    cf92:	f06f 0310 	mvn.w	r3, #16
    cf96:	e007      	b.n	cfa8 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    cf98:	4b06      	ldr	r3, [pc, #24]	; (cfb4 <cdcdf_acm_write+0x3c>)
    cf9a:	78d8      	ldrb	r0, [r3, #3]
    cf9c:	2301      	movs	r3, #1
    cf9e:	683a      	ldr	r2, [r7, #0]
    cfa0:	6879      	ldr	r1, [r7, #4]
    cfa2:	4c05      	ldr	r4, [pc, #20]	; (cfb8 <cdcdf_acm_write+0x40>)
    cfa4:	47a0      	blx	r4
    cfa6:	4603      	mov	r3, r0
}
    cfa8:	4618      	mov	r0, r3
    cfaa:	370c      	adds	r7, #12
    cfac:	46bd      	mov	sp, r7
    cfae:	bd90      	pop	{r4, r7, pc}
    cfb0:	0000d059 	.word	0x0000d059
    cfb4:	20001074 	.word	0x20001074
    cfb8:	0000dbdd 	.word	0x0000dbdd

0000cfbc <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    cfbc:	b580      	push	{r7, lr}
    cfbe:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    cfc0:	4b05      	ldr	r3, [pc, #20]	; (cfd8 <cdcdf_acm_stop_xfer+0x1c>)
    cfc2:	78db      	ldrb	r3, [r3, #3]
    cfc4:	4618      	mov	r0, r3
    cfc6:	4b05      	ldr	r3, [pc, #20]	; (cfdc <cdcdf_acm_stop_xfer+0x20>)
    cfc8:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    cfca:	4b03      	ldr	r3, [pc, #12]	; (cfd8 <cdcdf_acm_stop_xfer+0x1c>)
    cfcc:	791b      	ldrb	r3, [r3, #4]
    cfce:	4618      	mov	r0, r3
    cfd0:	4b02      	ldr	r3, [pc, #8]	; (cfdc <cdcdf_acm_stop_xfer+0x20>)
    cfd2:	4798      	blx	r3
}
    cfd4:	bf00      	nop
    cfd6:	bd80      	pop	{r7, pc}
    cfd8:	20001074 	.word	0x20001074
    cfdc:	00003e2d 	.word	0x00003e2d

0000cfe0 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    cfe0:	b580      	push	{r7, lr}
    cfe2:	b082      	sub	sp, #8
    cfe4:	af00      	add	r7, sp, #0
    cfe6:	4603      	mov	r3, r0
    cfe8:	6039      	str	r1, [r7, #0]
    cfea:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    cfec:	79fb      	ldrb	r3, [r7, #7]
    cfee:	2b03      	cmp	r3, #3
    cff0:	d822      	bhi.n	d038 <cdcdf_acm_register_callback+0x58>
    cff2:	a201      	add	r2, pc, #4	; (adr r2, cff8 <cdcdf_acm_register_callback+0x18>)
    cff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cff8:	0000d009 	.word	0x0000d009
    cffc:	0000d019 	.word	0x0000d019
    d000:	0000d029 	.word	0x0000d029
    d004:	0000d031 	.word	0x0000d031
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    d008:	4b0f      	ldr	r3, [pc, #60]	; (d048 <cdcdf_acm_register_callback+0x68>)
    d00a:	791b      	ldrb	r3, [r3, #4]
    d00c:	683a      	ldr	r2, [r7, #0]
    d00e:	2102      	movs	r1, #2
    d010:	4618      	mov	r0, r3
    d012:	4b0e      	ldr	r3, [pc, #56]	; (d04c <cdcdf_acm_register_callback+0x6c>)
    d014:	4798      	blx	r3
		break;
    d016:	e012      	b.n	d03e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    d018:	4b0b      	ldr	r3, [pc, #44]	; (d048 <cdcdf_acm_register_callback+0x68>)
    d01a:	78db      	ldrb	r3, [r3, #3]
    d01c:	683a      	ldr	r2, [r7, #0]
    d01e:	2102      	movs	r1, #2
    d020:	4618      	mov	r0, r3
    d022:	4b0a      	ldr	r3, [pc, #40]	; (d04c <cdcdf_acm_register_callback+0x6c>)
    d024:	4798      	blx	r3
		break;
    d026:	e00a      	b.n	d03e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    d028:	4a09      	ldr	r2, [pc, #36]	; (d050 <cdcdf_acm_register_callback+0x70>)
    d02a:	683b      	ldr	r3, [r7, #0]
    d02c:	6013      	str	r3, [r2, #0]
		break;
    d02e:	e006      	b.n	d03e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    d030:	4a08      	ldr	r2, [pc, #32]	; (d054 <cdcdf_acm_register_callback+0x74>)
    d032:	683b      	ldr	r3, [r7, #0]
    d034:	6013      	str	r3, [r2, #0]
		break;
    d036:	e002      	b.n	d03e <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    d038:	f06f 030c 	mvn.w	r3, #12
    d03c:	e000      	b.n	d040 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    d03e:	2300      	movs	r3, #0
}
    d040:	4618      	mov	r0, r3
    d042:	3708      	adds	r7, #8
    d044:	46bd      	mov	sp, r7
    d046:	bd80      	pop	{r7, pc}
    d048:	20001074 	.word	0x20001074
    d04c:	00003f59 	.word	0x00003f59
    d050:	20001088 	.word	0x20001088
    d054:	20001084 	.word	0x20001084

0000d058 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    d058:	b480      	push	{r7}
    d05a:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    d05c:	4b03      	ldr	r3, [pc, #12]	; (d06c <cdcdf_acm_is_enabled+0x14>)
    d05e:	795b      	ldrb	r3, [r3, #5]
}
    d060:	4618      	mov	r0, r3
    d062:	46bd      	mov	sp, r7
    d064:	f85d 7b04 	ldr.w	r7, [sp], #4
    d068:	4770      	bx	lr
    d06a:	bf00      	nop
    d06c:	20001074 	.word	0x20001074

0000d070 <usb_get_u16>:
{
    d070:	b480      	push	{r7}
    d072:	b083      	sub	sp, #12
    d074:	af00      	add	r7, sp, #0
    d076:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d078:	687b      	ldr	r3, [r7, #4]
    d07a:	781b      	ldrb	r3, [r3, #0]
    d07c:	b29a      	uxth	r2, r3
    d07e:	687b      	ldr	r3, [r7, #4]
    d080:	3301      	adds	r3, #1
    d082:	781b      	ldrb	r3, [r3, #0]
    d084:	b29b      	uxth	r3, r3
    d086:	021b      	lsls	r3, r3, #8
    d088:	b29b      	uxth	r3, r3
    d08a:	4413      	add	r3, r2
    d08c:	b29b      	uxth	r3, r3
}
    d08e:	4618      	mov	r0, r3
    d090:	370c      	adds	r7, #12
    d092:	46bd      	mov	sp, r7
    d094:	f85d 7b04 	ldr.w	r7, [sp], #4
    d098:	4770      	bx	lr

0000d09a <usb_desc_len>:
{
    d09a:	b480      	push	{r7}
    d09c:	b083      	sub	sp, #12
    d09e:	af00      	add	r7, sp, #0
    d0a0:	6078      	str	r0, [r7, #4]
	return desc[0];
    d0a2:	687b      	ldr	r3, [r7, #4]
    d0a4:	781b      	ldrb	r3, [r3, #0]
}
    d0a6:	4618      	mov	r0, r3
    d0a8:	370c      	adds	r7, #12
    d0aa:	46bd      	mov	sp, r7
    d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0b0:	4770      	bx	lr
	...

0000d0b4 <usb_desc_next>:
{
    d0b4:	b580      	push	{r7, lr}
    d0b6:	b082      	sub	sp, #8
    d0b8:	af00      	add	r7, sp, #0
    d0ba:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d0bc:	6878      	ldr	r0, [r7, #4]
    d0be:	4b05      	ldr	r3, [pc, #20]	; (d0d4 <usb_desc_next+0x20>)
    d0c0:	4798      	blx	r3
    d0c2:	4603      	mov	r3, r0
    d0c4:	461a      	mov	r2, r3
    d0c6:	687b      	ldr	r3, [r7, #4]
    d0c8:	4413      	add	r3, r2
}
    d0ca:	4618      	mov	r0, r3
    d0cc:	3708      	adds	r7, #8
    d0ce:	46bd      	mov	sp, r7
    d0d0:	bd80      	pop	{r7, pc}
    d0d2:	bf00      	nop
    d0d4:	0000d09b 	.word	0x0000d09b

0000d0d8 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    d0d8:	b580      	push	{r7, lr}
    d0da:	b082      	sub	sp, #8
    d0dc:	af00      	add	r7, sp, #0
    d0de:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d0e0:	687b      	ldr	r3, [r7, #4]
    d0e2:	3302      	adds	r3, #2
    d0e4:	4618      	mov	r0, r3
    d0e6:	4b03      	ldr	r3, [pc, #12]	; (d0f4 <usb_cfg_desc_total_len+0x1c>)
    d0e8:	4798      	blx	r3
    d0ea:	4603      	mov	r3, r0
}
    d0ec:	4618      	mov	r0, r3
    d0ee:	3708      	adds	r7, #8
    d0f0:	46bd      	mov	sp, r7
    d0f2:	bd80      	pop	{r7, pc}
    d0f4:	0000d071 	.word	0x0000d071

0000d0f8 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    d0f8:	b590      	push	{r4, r7, lr}
    d0fa:	b085      	sub	sp, #20
    d0fc:	af00      	add	r7, sp, #0
    d0fe:	4603      	mov	r3, r0
    d100:	6039      	str	r1, [r7, #0]
    d102:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    d104:	2300      	movs	r3, #0
    d106:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    d108:	683b      	ldr	r3, [r7, #0]
    d10a:	799a      	ldrb	r2, [r3, #6]
    d10c:	79db      	ldrb	r3, [r3, #7]
    d10e:	021b      	lsls	r3, r3, #8
    d110:	4313      	orrs	r3, r2
    d112:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    d114:	897b      	ldrh	r3, [r7, #10]
    d116:	2b12      	cmp	r3, #18
    d118:	d901      	bls.n	d11e <usbdc_get_dev_desc+0x26>
		length = 0x12;
    d11a:	2312      	movs	r3, #18
    d11c:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    d11e:	68fb      	ldr	r3, [r7, #12]
    d120:	2b00      	cmp	r3, #0
    d122:	d10a      	bne.n	d13a <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    d124:	4b0f      	ldr	r3, [pc, #60]	; (d164 <usbdc_get_dev_desc+0x6c>)
    d126:	681b      	ldr	r3, [r3, #0]
    d128:	6818      	ldr	r0, [r3, #0]
    d12a:	4b0e      	ldr	r3, [pc, #56]	; (d164 <usbdc_get_dev_desc+0x6c>)
    d12c:	681b      	ldr	r3, [r3, #0]
    d12e:	685b      	ldr	r3, [r3, #4]
    d130:	2201      	movs	r2, #1
    d132:	4619      	mov	r1, r3
    d134:	4b0c      	ldr	r3, [pc, #48]	; (d168 <usbdc_get_dev_desc+0x70>)
    d136:	4798      	blx	r3
    d138:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    d13a:	68fb      	ldr	r3, [r7, #12]
    d13c:	2b00      	cmp	r3, #0
    d13e:	d101      	bne.n	d144 <usbdc_get_dev_desc+0x4c>
		return false;
    d140:	2300      	movs	r3, #0
    d142:	e00b      	b.n	d15c <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    d144:	897a      	ldrh	r2, [r7, #10]
    d146:	79f8      	ldrb	r0, [r7, #7]
    d148:	2300      	movs	r3, #0
    d14a:	68f9      	ldr	r1, [r7, #12]
    d14c:	4c07      	ldr	r4, [pc, #28]	; (d16c <usbdc_get_dev_desc+0x74>)
    d14e:	47a0      	blx	r4
    d150:	4603      	mov	r3, r0
    d152:	2b00      	cmp	r3, #0
    d154:	d001      	beq.n	d15a <usbdc_get_dev_desc+0x62>
		return false;
    d156:	2300      	movs	r3, #0
    d158:	e000      	b.n	d15c <usbdc_get_dev_desc+0x64>
	}
	return true;
    d15a:	2301      	movs	r3, #1
}
    d15c:	4618      	mov	r0, r3
    d15e:	3714      	adds	r7, #20
    d160:	46bd      	mov	sp, r7
    d162:	bd90      	pop	{r4, r7, pc}
    d164:	2000108c 	.word	0x2000108c
    d168:	0000de6d 	.word	0x0000de6d
    d16c:	0000dbdd 	.word	0x0000dbdd

0000d170 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    d170:	b590      	push	{r4, r7, lr}
    d172:	b087      	sub	sp, #28
    d174:	af00      	add	r7, sp, #0
    d176:	4603      	mov	r3, r0
    d178:	6039      	str	r1, [r7, #0]
    d17a:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    d17c:	2300      	movs	r3, #0
    d17e:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    d180:	683b      	ldr	r3, [r7, #0]
    d182:	799a      	ldrb	r2, [r3, #6]
    d184:	79db      	ldrb	r3, [r3, #7]
    d186:	021b      	lsls	r3, r3, #8
    d188:	4313      	orrs	r3, r2
    d18a:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    d18c:	683b      	ldr	r3, [r7, #0]
    d18e:	885b      	ldrh	r3, [r3, #2]
    d190:	b29b      	uxth	r3, r3
    d192:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d194:	8a7a      	ldrh	r2, [r7, #18]
    d196:	4b1e      	ldr	r3, [pc, #120]	; (d210 <usbdc_get_cfg_desc+0xa0>)
    d198:	7f1b      	ldrb	r3, [r3, #28]
    d19a:	3b01      	subs	r3, #1
    d19c:	4013      	ands	r3, r2
    d19e:	2b00      	cmp	r3, #0
    d1a0:	bf0c      	ite	eq
    d1a2:	2301      	moveq	r3, #1
    d1a4:	2300      	movne	r3, #0
    d1a6:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    d1a8:	697b      	ldr	r3, [r7, #20]
    d1aa:	2b00      	cmp	r3, #0
    d1ac:	d10c      	bne.n	d1c8 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    d1ae:	4b18      	ldr	r3, [pc, #96]	; (d210 <usbdc_get_cfg_desc+0xa0>)
    d1b0:	681b      	ldr	r3, [r3, #0]
    d1b2:	6818      	ldr	r0, [r3, #0]
    d1b4:	4b16      	ldr	r3, [pc, #88]	; (d210 <usbdc_get_cfg_desc+0xa0>)
    d1b6:	681b      	ldr	r3, [r3, #0]
    d1b8:	6859      	ldr	r1, [r3, #4]
    d1ba:	7c3b      	ldrb	r3, [r7, #16]
    d1bc:	3301      	adds	r3, #1
    d1be:	b2db      	uxtb	r3, r3
    d1c0:	461a      	mov	r2, r3
    d1c2:	4b14      	ldr	r3, [pc, #80]	; (d214 <usbdc_get_cfg_desc+0xa4>)
    d1c4:	4798      	blx	r3
    d1c6:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    d1c8:	697b      	ldr	r3, [r7, #20]
    d1ca:	2b00      	cmp	r3, #0
    d1cc:	d101      	bne.n	d1d2 <usbdc_get_cfg_desc+0x62>
		return false;
    d1ce:	2300      	movs	r3, #0
    d1d0:	e019      	b.n	d206 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    d1d2:	6978      	ldr	r0, [r7, #20]
    d1d4:	4b10      	ldr	r3, [pc, #64]	; (d218 <usbdc_get_cfg_desc+0xa8>)
    d1d6:	4798      	blx	r3
    d1d8:	4603      	mov	r3, r0
    d1da:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    d1dc:	8a7a      	ldrh	r2, [r7, #18]
    d1de:	89fb      	ldrh	r3, [r7, #14]
    d1e0:	429a      	cmp	r2, r3
    d1e2:	d802      	bhi.n	d1ea <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    d1e4:	2300      	movs	r3, #0
    d1e6:	747b      	strb	r3, [r7, #17]
    d1e8:	e001      	b.n	d1ee <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    d1ea:	89fb      	ldrh	r3, [r7, #14]
    d1ec:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    d1ee:	8a7a      	ldrh	r2, [r7, #18]
    d1f0:	7c7b      	ldrb	r3, [r7, #17]
    d1f2:	79f8      	ldrb	r0, [r7, #7]
    d1f4:	6979      	ldr	r1, [r7, #20]
    d1f6:	4c09      	ldr	r4, [pc, #36]	; (d21c <usbdc_get_cfg_desc+0xac>)
    d1f8:	47a0      	blx	r4
    d1fa:	4603      	mov	r3, r0
    d1fc:	2b00      	cmp	r3, #0
    d1fe:	d001      	beq.n	d204 <usbdc_get_cfg_desc+0x94>
		return false;
    d200:	2300      	movs	r3, #0
    d202:	e000      	b.n	d206 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    d204:	2301      	movs	r3, #1
}
    d206:	4618      	mov	r0, r3
    d208:	371c      	adds	r7, #28
    d20a:	46bd      	mov	sp, r7
    d20c:	bd90      	pop	{r4, r7, pc}
    d20e:	bf00      	nop
    d210:	2000108c 	.word	0x2000108c
    d214:	0000df2d 	.word	0x0000df2d
    d218:	0000d0d9 	.word	0x0000d0d9
    d21c:	0000dbdd 	.word	0x0000dbdd

0000d220 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    d220:	b590      	push	{r4, r7, lr}
    d222:	b085      	sub	sp, #20
    d224:	af00      	add	r7, sp, #0
    d226:	4603      	mov	r3, r0
    d228:	6039      	str	r1, [r7, #0]
    d22a:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    d22c:	683b      	ldr	r3, [r7, #0]
    d22e:	799a      	ldrb	r2, [r3, #6]
    d230:	79db      	ldrb	r3, [r3, #7]
    d232:	021b      	lsls	r3, r3, #8
    d234:	4313      	orrs	r3, r2
    d236:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    d238:	683b      	ldr	r3, [r7, #0]
    d23a:	885b      	ldrh	r3, [r3, #2]
    d23c:	b29b      	uxth	r3, r3
    d23e:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d240:	89fa      	ldrh	r2, [r7, #14]
    d242:	4b1a      	ldr	r3, [pc, #104]	; (d2ac <usbdc_get_str_desc+0x8c>)
    d244:	7f1b      	ldrb	r3, [r3, #28]
    d246:	3b01      	subs	r3, #1
    d248:	4013      	ands	r3, r2
    d24a:	2b00      	cmp	r3, #0
    d24c:	bf0c      	ite	eq
    d24e:	2301      	moveq	r3, #1
    d250:	2300      	movne	r3, #0
    d252:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    d254:	4b15      	ldr	r3, [pc, #84]	; (d2ac <usbdc_get_str_desc+0x8c>)
    d256:	681b      	ldr	r3, [r3, #0]
    d258:	6818      	ldr	r0, [r3, #0]
    d25a:	4b14      	ldr	r3, [pc, #80]	; (d2ac <usbdc_get_str_desc+0x8c>)
    d25c:	681b      	ldr	r3, [r3, #0]
    d25e:	685b      	ldr	r3, [r3, #4]
    d260:	7b3a      	ldrb	r2, [r7, #12]
    d262:	4619      	mov	r1, r3
    d264:	4b12      	ldr	r3, [pc, #72]	; (d2b0 <usbdc_get_str_desc+0x90>)
    d266:	4798      	blx	r3
    d268:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    d26a:	68bb      	ldr	r3, [r7, #8]
    d26c:	2b00      	cmp	r3, #0
    d26e:	d101      	bne.n	d274 <usbdc_get_str_desc+0x54>
		return false;
    d270:	2300      	movs	r3, #0
    d272:	e017      	b.n	d2a4 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    d274:	68bb      	ldr	r3, [r7, #8]
    d276:	781b      	ldrb	r3, [r3, #0]
    d278:	b29b      	uxth	r3, r3
    d27a:	89fa      	ldrh	r2, [r7, #14]
    d27c:	429a      	cmp	r2, r3
    d27e:	d802      	bhi.n	d286 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    d280:	2300      	movs	r3, #0
    d282:	737b      	strb	r3, [r7, #13]
    d284:	e002      	b.n	d28c <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    d286:	68bb      	ldr	r3, [r7, #8]
    d288:	781b      	ldrb	r3, [r3, #0]
    d28a:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    d28c:	89fa      	ldrh	r2, [r7, #14]
    d28e:	7b7b      	ldrb	r3, [r7, #13]
    d290:	79f8      	ldrb	r0, [r7, #7]
    d292:	68b9      	ldr	r1, [r7, #8]
    d294:	4c07      	ldr	r4, [pc, #28]	; (d2b4 <usbdc_get_str_desc+0x94>)
    d296:	47a0      	blx	r4
    d298:	4603      	mov	r3, r0
    d29a:	2b00      	cmp	r3, #0
    d29c:	d001      	beq.n	d2a2 <usbdc_get_str_desc+0x82>
		return false;
    d29e:	2300      	movs	r3, #0
    d2a0:	e000      	b.n	d2a4 <usbdc_get_str_desc+0x84>
	}
	return true;
    d2a2:	2301      	movs	r3, #1
}
    d2a4:	4618      	mov	r0, r3
    d2a6:	3714      	adds	r7, #20
    d2a8:	46bd      	mov	sp, r7
    d2aa:	bd90      	pop	{r4, r7, pc}
    d2ac:	2000108c 	.word	0x2000108c
    d2b0:	0000dfa5 	.word	0x0000dfa5
    d2b4:	0000dbdd 	.word	0x0000dbdd

0000d2b8 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    d2b8:	b580      	push	{r7, lr}
    d2ba:	b084      	sub	sp, #16
    d2bc:	af00      	add	r7, sp, #0
    d2be:	4603      	mov	r3, r0
    d2c0:	6039      	str	r1, [r7, #0]
    d2c2:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    d2c4:	683b      	ldr	r3, [r7, #0]
    d2c6:	885b      	ldrh	r3, [r3, #2]
    d2c8:	b29b      	uxth	r3, r3
    d2ca:	0a1b      	lsrs	r3, r3, #8
    d2cc:	b29b      	uxth	r3, r3
    d2ce:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    d2d0:	7bfb      	ldrb	r3, [r7, #15]
    d2d2:	2b02      	cmp	r3, #2
    d2d4:	d00d      	beq.n	d2f2 <usbdc_get_desc_req+0x3a>
    d2d6:	2b03      	cmp	r3, #3
    d2d8:	d012      	beq.n	d300 <usbdc_get_desc_req+0x48>
    d2da:	2b01      	cmp	r3, #1
    d2dc:	d002      	beq.n	d2e4 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    d2de:	bf00      	nop
	}
	return false;
    d2e0:	2300      	movs	r3, #0
    d2e2:	e013      	b.n	d30c <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    d2e4:	79fb      	ldrb	r3, [r7, #7]
    d2e6:	6839      	ldr	r1, [r7, #0]
    d2e8:	4618      	mov	r0, r3
    d2ea:	4b0a      	ldr	r3, [pc, #40]	; (d314 <usbdc_get_desc_req+0x5c>)
    d2ec:	4798      	blx	r3
    d2ee:	4603      	mov	r3, r0
    d2f0:	e00c      	b.n	d30c <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    d2f2:	79fb      	ldrb	r3, [r7, #7]
    d2f4:	6839      	ldr	r1, [r7, #0]
    d2f6:	4618      	mov	r0, r3
    d2f8:	4b07      	ldr	r3, [pc, #28]	; (d318 <usbdc_get_desc_req+0x60>)
    d2fa:	4798      	blx	r3
    d2fc:	4603      	mov	r3, r0
    d2fe:	e005      	b.n	d30c <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    d300:	79fb      	ldrb	r3, [r7, #7]
    d302:	6839      	ldr	r1, [r7, #0]
    d304:	4618      	mov	r0, r3
    d306:	4b05      	ldr	r3, [pc, #20]	; (d31c <usbdc_get_desc_req+0x64>)
    d308:	4798      	blx	r3
    d30a:	4603      	mov	r3, r0
}
    d30c:	4618      	mov	r0, r3
    d30e:	3710      	adds	r7, #16
    d310:	46bd      	mov	sp, r7
    d312:	bd80      	pop	{r7, pc}
    d314:	0000d0f9 	.word	0x0000d0f9
    d318:	0000d171 	.word	0x0000d171
    d31c:	0000d221 	.word	0x0000d221

0000d320 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    d320:	b590      	push	{r4, r7, lr}
    d322:	b085      	sub	sp, #20
    d324:	af00      	add	r7, sp, #0
    d326:	4603      	mov	r3, r0
    d328:	6039      	str	r1, [r7, #0]
    d32a:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d32c:	683b      	ldr	r3, [r7, #0]
    d32e:	781b      	ldrb	r3, [r3, #0]
    d330:	f003 031f 	and.w	r3, r3, #31
    d334:	2b00      	cmp	r3, #0
    d336:	db1b      	blt.n	d370 <usbdc_get_status_req+0x50>
    d338:	2b01      	cmp	r3, #1
    d33a:	dd02      	ble.n	d342 <usbdc_get_status_req+0x22>
    d33c:	2b02      	cmp	r3, #2
    d33e:	d003      	beq.n	d348 <usbdc_get_status_req+0x28>
    d340:	e016      	b.n	d370 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    d342:	2300      	movs	r3, #0
    d344:	60fb      	str	r3, [r7, #12]
		break;
    d346:	e015      	b.n	d374 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    d348:	683b      	ldr	r3, [r7, #0]
    d34a:	889b      	ldrh	r3, [r3, #4]
    d34c:	b29b      	uxth	r3, r3
    d34e:	b2db      	uxtb	r3, r3
    d350:	2102      	movs	r1, #2
    d352:	4618      	mov	r0, r3
    d354:	4b0f      	ldr	r3, [pc, #60]	; (d394 <usbdc_get_status_req+0x74>)
    d356:	4798      	blx	r3
    d358:	4603      	mov	r3, r0
    d35a:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    d35c:	68fb      	ldr	r3, [r7, #12]
    d35e:	2b00      	cmp	r3, #0
    d360:	da01      	bge.n	d366 <usbdc_get_status_req+0x46>
			return false;
    d362:	2300      	movs	r3, #0
    d364:	e012      	b.n	d38c <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    d366:	68fb      	ldr	r3, [r7, #12]
    d368:	f003 0301 	and.w	r3, r3, #1
    d36c:	60fb      	str	r3, [r7, #12]
		break;
    d36e:	e001      	b.n	d374 <usbdc_get_status_req+0x54>
	default:
		return false;
    d370:	2300      	movs	r3, #0
    d372:	e00b      	b.n	d38c <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    d374:	4b08      	ldr	r3, [pc, #32]	; (d398 <usbdc_get_status_req+0x78>)
    d376:	695b      	ldr	r3, [r3, #20]
    d378:	89ba      	ldrh	r2, [r7, #12]
    d37a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    d37c:	4b06      	ldr	r3, [pc, #24]	; (d398 <usbdc_get_status_req+0x78>)
    d37e:	6959      	ldr	r1, [r3, #20]
    d380:	79f8      	ldrb	r0, [r7, #7]
    d382:	2300      	movs	r3, #0
    d384:	2202      	movs	r2, #2
    d386:	4c05      	ldr	r4, [pc, #20]	; (d39c <usbdc_get_status_req+0x7c>)
    d388:	47a0      	blx	r4
	return true;
    d38a:	2301      	movs	r3, #1
}
    d38c:	4618      	mov	r0, r3
    d38e:	3714      	adds	r7, #20
    d390:	46bd      	mov	sp, r7
    d392:	bd90      	pop	{r4, r7, pc}
    d394:	00003f05 	.word	0x00003f05
    d398:	2000108c 	.word	0x2000108c
    d39c:	0000dbdd 	.word	0x0000dbdd

0000d3a0 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    d3a0:	b590      	push	{r4, r7, lr}
    d3a2:	b085      	sub	sp, #20
    d3a4:	af00      	add	r7, sp, #0
    d3a6:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d3a8:	4b1f      	ldr	r3, [pc, #124]	; (d428 <usbdc_get_interface+0x88>)
    d3aa:	691b      	ldr	r3, [r3, #16]
    d3ac:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    d3ae:	4b1e      	ldr	r3, [pc, #120]	; (d428 <usbdc_get_interface+0x88>)
    d3b0:	7f5b      	ldrb	r3, [r3, #29]
    d3b2:	461a      	mov	r2, r3
    d3b4:	687b      	ldr	r3, [r7, #4]
    d3b6:	889b      	ldrh	r3, [r3, #4]
    d3b8:	b29b      	uxth	r3, r3
    d3ba:	fa42 f303 	asr.w	r3, r2, r3
    d3be:	f003 0301 	and.w	r3, r3, #1
    d3c2:	2b00      	cmp	r3, #0
    d3c4:	d128      	bne.n	d418 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    d3c6:	4b18      	ldr	r3, [pc, #96]	; (d428 <usbdc_get_interface+0x88>)
    d3c8:	695b      	ldr	r3, [r3, #20]
    d3ca:	2200      	movs	r2, #0
    d3cc:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    d3ce:	4b16      	ldr	r3, [pc, #88]	; (d428 <usbdc_get_interface+0x88>)
    d3d0:	6959      	ldr	r1, [r3, #20]
    d3d2:	2300      	movs	r3, #0
    d3d4:	2201      	movs	r2, #1
    d3d6:	2000      	movs	r0, #0
    d3d8:	4c14      	ldr	r4, [pc, #80]	; (d42c <usbdc_get_interface+0x8c>)
    d3da:	47a0      	blx	r4
		return true;
    d3dc:	2301      	movs	r3, #1
    d3de:	e01f      	b.n	d420 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    d3e0:	68fb      	ldr	r3, [r7, #12]
    d3e2:	685b      	ldr	r3, [r3, #4]
    d3e4:	687a      	ldr	r2, [r7, #4]
    d3e6:	2102      	movs	r1, #2
    d3e8:	68f8      	ldr	r0, [r7, #12]
    d3ea:	4798      	blx	r3
    d3ec:	60b8      	str	r0, [r7, #8]
    d3ee:	68bb      	ldr	r3, [r7, #8]
    d3f0:	2b00      	cmp	r3, #0
    d3f2:	da03      	bge.n	d3fc <usbdc_get_interface+0x5c>
			func = func->next;
    d3f4:	68fb      	ldr	r3, [r7, #12]
    d3f6:	681b      	ldr	r3, [r3, #0]
    d3f8:	60fb      	str	r3, [r7, #12]
    d3fa:	e00d      	b.n	d418 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    d3fc:	4b0a      	ldr	r3, [pc, #40]	; (d428 <usbdc_get_interface+0x88>)
    d3fe:	695b      	ldr	r3, [r3, #20]
    d400:	68ba      	ldr	r2, [r7, #8]
    d402:	b2d2      	uxtb	r2, r2
    d404:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    d406:	4b08      	ldr	r3, [pc, #32]	; (d428 <usbdc_get_interface+0x88>)
    d408:	6959      	ldr	r1, [r3, #20]
    d40a:	2300      	movs	r3, #0
    d40c:	2201      	movs	r2, #1
    d40e:	2000      	movs	r0, #0
    d410:	4c06      	ldr	r4, [pc, #24]	; (d42c <usbdc_get_interface+0x8c>)
    d412:	47a0      	blx	r4
			return true;
    d414:	2301      	movs	r3, #1
    d416:	e003      	b.n	d420 <usbdc_get_interface+0x80>
	while (NULL != func) {
    d418:	68fb      	ldr	r3, [r7, #12]
    d41a:	2b00      	cmp	r3, #0
    d41c:	d1e0      	bne.n	d3e0 <usbdc_get_interface+0x40>
		}
	}
	return false;
    d41e:	2300      	movs	r3, #0
}
    d420:	4618      	mov	r0, r3
    d422:	3714      	adds	r7, #20
    d424:	46bd      	mov	sp, r7
    d426:	bd90      	pop	{r4, r7, pc}
    d428:	2000108c 	.word	0x2000108c
    d42c:	0000dbdd 	.word	0x0000dbdd

0000d430 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    d430:	b590      	push	{r4, r7, lr}
    d432:	b083      	sub	sp, #12
    d434:	af00      	add	r7, sp, #0
    d436:	4603      	mov	r3, r0
    d438:	6039      	str	r1, [r7, #0]
    d43a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d43c:	683b      	ldr	r3, [r7, #0]
    d43e:	785b      	ldrb	r3, [r3, #1]
    d440:	2b0a      	cmp	r3, #10
    d442:	d83a      	bhi.n	d4ba <usbdc_get_req+0x8a>
    d444:	a201      	add	r2, pc, #4	; (adr r2, d44c <usbdc_get_req+0x1c>)
    d446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d44a:	bf00      	nop
    d44c:	0000d4a3 	.word	0x0000d4a3
    d450:	0000d4bb 	.word	0x0000d4bb
    d454:	0000d4bb 	.word	0x0000d4bb
    d458:	0000d4bb 	.word	0x0000d4bb
    d45c:	0000d4bb 	.word	0x0000d4bb
    d460:	0000d4bb 	.word	0x0000d4bb
    d464:	0000d479 	.word	0x0000d479
    d468:	0000d4bb 	.word	0x0000d4bb
    d46c:	0000d487 	.word	0x0000d487
    d470:	0000d4bb 	.word	0x0000d4bb
    d474:	0000d4b1 	.word	0x0000d4b1
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    d478:	79fb      	ldrb	r3, [r7, #7]
    d47a:	6839      	ldr	r1, [r7, #0]
    d47c:	4618      	mov	r0, r3
    d47e:	4b11      	ldr	r3, [pc, #68]	; (d4c4 <usbdc_get_req+0x94>)
    d480:	4798      	blx	r3
    d482:	4603      	mov	r3, r0
    d484:	e01a      	b.n	d4bc <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    d486:	4b10      	ldr	r3, [pc, #64]	; (d4c8 <usbdc_get_req+0x98>)
    d488:	695b      	ldr	r3, [r3, #20]
    d48a:	4a0f      	ldr	r2, [pc, #60]	; (d4c8 <usbdc_get_req+0x98>)
    d48c:	7ed2      	ldrb	r2, [r2, #27]
    d48e:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    d490:	4b0d      	ldr	r3, [pc, #52]	; (d4c8 <usbdc_get_req+0x98>)
    d492:	6959      	ldr	r1, [r3, #20]
    d494:	79f8      	ldrb	r0, [r7, #7]
    d496:	2300      	movs	r3, #0
    d498:	2201      	movs	r2, #1
    d49a:	4c0c      	ldr	r4, [pc, #48]	; (d4cc <usbdc_get_req+0x9c>)
    d49c:	47a0      	blx	r4
		return true;
    d49e:	2301      	movs	r3, #1
    d4a0:	e00c      	b.n	d4bc <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    d4a2:	79fb      	ldrb	r3, [r7, #7]
    d4a4:	6839      	ldr	r1, [r7, #0]
    d4a6:	4618      	mov	r0, r3
    d4a8:	4b09      	ldr	r3, [pc, #36]	; (d4d0 <usbdc_get_req+0xa0>)
    d4aa:	4798      	blx	r3
    d4ac:	4603      	mov	r3, r0
    d4ae:	e005      	b.n	d4bc <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    d4b0:	6838      	ldr	r0, [r7, #0]
    d4b2:	4b08      	ldr	r3, [pc, #32]	; (d4d4 <usbdc_get_req+0xa4>)
    d4b4:	4798      	blx	r3
    d4b6:	4603      	mov	r3, r0
    d4b8:	e000      	b.n	d4bc <usbdc_get_req+0x8c>
	default:
		return false;
    d4ba:	2300      	movs	r3, #0
	}
}
    d4bc:	4618      	mov	r0, r3
    d4be:	370c      	adds	r7, #12
    d4c0:	46bd      	mov	sp, r7
    d4c2:	bd90      	pop	{r4, r7, pc}
    d4c4:	0000d2b9 	.word	0x0000d2b9
    d4c8:	2000108c 	.word	0x2000108c
    d4cc:	0000dbdd 	.word	0x0000dbdd
    d4d0:	0000d321 	.word	0x0000d321
    d4d4:	0000d3a1 	.word	0x0000d3a1

0000d4d8 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d4d8:	b590      	push	{r4, r7, lr}
    d4da:	b083      	sub	sp, #12
    d4dc:	af00      	add	r7, sp, #0
    d4de:	4603      	mov	r3, r0
    d4e0:	6039      	str	r1, [r7, #0]
    d4e2:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d4e4:	683b      	ldr	r3, [r7, #0]
    d4e6:	781b      	ldrb	r3, [r3, #0]
    d4e8:	f003 031f 	and.w	r3, r3, #31
    d4ec:	2b02      	cmp	r3, #2
    d4ee:	d116      	bne.n	d51e <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d4f0:	683b      	ldr	r3, [r7, #0]
    d4f2:	88db      	ldrh	r3, [r3, #6]
    d4f4:	b29b      	uxth	r3, r3
    d4f6:	2b00      	cmp	r3, #0
    d4f8:	d001      	beq.n	d4fe <usbdc_clear_ftr_req+0x26>
			return false;
    d4fa:	2300      	movs	r3, #0
    d4fc:	e010      	b.n	d520 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    d4fe:	683b      	ldr	r3, [r7, #0]
    d500:	889b      	ldrh	r3, [r3, #4]
    d502:	b29b      	uxth	r3, r3
    d504:	b2db      	uxtb	r3, r3
    d506:	2100      	movs	r1, #0
    d508:	4618      	mov	r0, r3
    d50a:	4b07      	ldr	r3, [pc, #28]	; (d528 <usbdc_clear_ftr_req+0x50>)
    d50c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d50e:	79f8      	ldrb	r0, [r7, #7]
    d510:	2301      	movs	r3, #1
    d512:	2200      	movs	r2, #0
    d514:	2100      	movs	r1, #0
    d516:	4c05      	ldr	r4, [pc, #20]	; (d52c <usbdc_clear_ftr_req+0x54>)
    d518:	47a0      	blx	r4
		return true;
    d51a:	2301      	movs	r3, #1
    d51c:	e000      	b.n	d520 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    d51e:	2300      	movs	r3, #0
	}
}
    d520:	4618      	mov	r0, r3
    d522:	370c      	adds	r7, #12
    d524:	46bd      	mov	sp, r7
    d526:	bd90      	pop	{r4, r7, pc}
    d528:	00003f05 	.word	0x00003f05
    d52c:	0000dbdd 	.word	0x0000dbdd

0000d530 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d530:	b590      	push	{r4, r7, lr}
    d532:	b083      	sub	sp, #12
    d534:	af00      	add	r7, sp, #0
    d536:	4603      	mov	r3, r0
    d538:	6039      	str	r1, [r7, #0]
    d53a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d53c:	683b      	ldr	r3, [r7, #0]
    d53e:	781b      	ldrb	r3, [r3, #0]
    d540:	f003 031f 	and.w	r3, r3, #31
    d544:	2b02      	cmp	r3, #2
    d546:	d116      	bne.n	d576 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d548:	683b      	ldr	r3, [r7, #0]
    d54a:	88db      	ldrh	r3, [r3, #6]
    d54c:	b29b      	uxth	r3, r3
    d54e:	2b00      	cmp	r3, #0
    d550:	d001      	beq.n	d556 <usbdc_set_ftr_req+0x26>
			return false;
    d552:	2300      	movs	r3, #0
    d554:	e010      	b.n	d578 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    d556:	683b      	ldr	r3, [r7, #0]
    d558:	889b      	ldrh	r3, [r3, #4]
    d55a:	b29b      	uxth	r3, r3
    d55c:	b2db      	uxtb	r3, r3
    d55e:	2101      	movs	r1, #1
    d560:	4618      	mov	r0, r3
    d562:	4b07      	ldr	r3, [pc, #28]	; (d580 <usbdc_set_ftr_req+0x50>)
    d564:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d566:	79f8      	ldrb	r0, [r7, #7]
    d568:	2301      	movs	r3, #1
    d56a:	2200      	movs	r2, #0
    d56c:	2100      	movs	r1, #0
    d56e:	4c05      	ldr	r4, [pc, #20]	; (d584 <usbdc_set_ftr_req+0x54>)
    d570:	47a0      	blx	r4
		return true;
    d572:	2301      	movs	r3, #1
    d574:	e000      	b.n	d578 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    d576:	2300      	movs	r3, #0
	}
}
    d578:	4618      	mov	r0, r3
    d57a:	370c      	adds	r7, #12
    d57c:	46bd      	mov	sp, r7
    d57e:	bd90      	pop	{r4, r7, pc}
    d580:	00003f05 	.word	0x00003f05
    d584:	0000dbdd 	.word	0x0000dbdd

0000d588 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    d588:	b580      	push	{r7, lr}
    d58a:	b082      	sub	sp, #8
    d58c:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d58e:	4b0a      	ldr	r3, [pc, #40]	; (d5b8 <usbdc_unconfig+0x30>)
    d590:	691b      	ldr	r3, [r3, #16]
    d592:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d594:	e008      	b.n	d5a8 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    d596:	687b      	ldr	r3, [r7, #4]
    d598:	685b      	ldr	r3, [r3, #4]
    d59a:	2200      	movs	r2, #0
    d59c:	2101      	movs	r1, #1
    d59e:	6878      	ldr	r0, [r7, #4]
    d5a0:	4798      	blx	r3
		func = func->next;
    d5a2:	687b      	ldr	r3, [r7, #4]
    d5a4:	681b      	ldr	r3, [r3, #0]
    d5a6:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d5a8:	687b      	ldr	r3, [r7, #4]
    d5aa:	2b00      	cmp	r3, #0
    d5ac:	d1f3      	bne.n	d596 <usbdc_unconfig+0xe>
	}
}
    d5ae:	bf00      	nop
    d5b0:	3708      	adds	r7, #8
    d5b2:	46bd      	mov	sp, r7
    d5b4:	bd80      	pop	{r7, pc}
    d5b6:	bf00      	nop
    d5b8:	2000108c 	.word	0x2000108c

0000d5bc <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    d5bc:	b580      	push	{r7, lr}
    d5be:	b088      	sub	sp, #32
    d5c0:	af00      	add	r7, sp, #0
    d5c2:	4603      	mov	r3, r0
    d5c4:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    d5c6:	2300      	movs	r3, #0
    d5c8:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    d5ca:	23ff      	movs	r3, #255	; 0xff
    d5cc:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    d5ce:	79fb      	ldrb	r3, [r7, #7]
    d5d0:	2b00      	cmp	r3, #0
    d5d2:	d103      	bne.n	d5dc <usbdc_set_config+0x20>
		usbdc_unconfig();
    d5d4:	4b2e      	ldr	r3, [pc, #184]	; (d690 <usbdc_set_config+0xd4>)
    d5d6:	4798      	blx	r3
		return true;
    d5d8:	2301      	movs	r3, #1
    d5da:	e055      	b.n	d688 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    d5dc:	69bb      	ldr	r3, [r7, #24]
    d5de:	2b00      	cmp	r3, #0
    d5e0:	d10a      	bne.n	d5f8 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    d5e2:	4b2c      	ldr	r3, [pc, #176]	; (d694 <usbdc_set_config+0xd8>)
    d5e4:	681b      	ldr	r3, [r3, #0]
    d5e6:	6818      	ldr	r0, [r3, #0]
    d5e8:	4b2a      	ldr	r3, [pc, #168]	; (d694 <usbdc_set_config+0xd8>)
    d5ea:	681b      	ldr	r3, [r3, #0]
    d5ec:	685b      	ldr	r3, [r3, #4]
    d5ee:	79fa      	ldrb	r2, [r7, #7]
    d5f0:	4619      	mov	r1, r3
    d5f2:	4b29      	ldr	r3, [pc, #164]	; (d698 <usbdc_set_config+0xdc>)
    d5f4:	4798      	blx	r3
    d5f6:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    d5f8:	69bb      	ldr	r3, [r7, #24]
    d5fa:	2b00      	cmp	r3, #0
    d5fc:	d101      	bne.n	d602 <usbdc_set_config+0x46>
		return false;
    d5fe:	2300      	movs	r3, #0
    d600:	e042      	b.n	d688 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    d602:	69b8      	ldr	r0, [r7, #24]
    d604:	4b25      	ldr	r3, [pc, #148]	; (d69c <usbdc_set_config+0xe0>)
    d606:	4798      	blx	r3
    d608:	4603      	mov	r3, r0
    d60a:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    d60c:	8abb      	ldrh	r3, [r7, #20]
    d60e:	69ba      	ldr	r2, [r7, #24]
    d610:	4413      	add	r3, r2
    d612:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    d614:	693b      	ldr	r3, [r7, #16]
    d616:	2204      	movs	r2, #4
    d618:	4619      	mov	r1, r3
    d61a:	69b8      	ldr	r0, [r7, #24]
    d61c:	4b20      	ldr	r3, [pc, #128]	; (d6a0 <usbdc_set_config+0xe4>)
    d61e:	4798      	blx	r3
    d620:	4603      	mov	r3, r0
    d622:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    d624:	e02c      	b.n	d680 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    d626:	68fb      	ldr	r3, [r7, #12]
    d628:	3302      	adds	r3, #2
    d62a:	781b      	ldrb	r3, [r3, #0]
    d62c:	7dfa      	ldrb	r2, [r7, #23]
    d62e:	429a      	cmp	r2, r3
    d630:	d018      	beq.n	d664 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    d632:	68fb      	ldr	r3, [r7, #12]
    d634:	789b      	ldrb	r3, [r3, #2]
    d636:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    d638:	4b16      	ldr	r3, [pc, #88]	; (d694 <usbdc_set_config+0xd8>)
    d63a:	691b      	ldr	r3, [r3, #16]
    d63c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d63e:	e00c      	b.n	d65a <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    d640:	69fb      	ldr	r3, [r7, #28]
    d642:	685b      	ldr	r3, [r3, #4]
    d644:	f107 020c 	add.w	r2, r7, #12
    d648:	2100      	movs	r1, #0
    d64a:	69f8      	ldr	r0, [r7, #28]
    d64c:	4798      	blx	r3
    d64e:	4603      	mov	r3, r0
    d650:	2b00      	cmp	r3, #0
    d652:	d006      	beq.n	d662 <usbdc_set_config+0xa6>
					func = func->next;
    d654:	69fb      	ldr	r3, [r7, #28]
    d656:	681b      	ldr	r3, [r3, #0]
    d658:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d65a:	69fb      	ldr	r3, [r7, #28]
    d65c:	2b00      	cmp	r3, #0
    d65e:	d1ef      	bne.n	d640 <usbdc_set_config+0x84>
    d660:	e000      	b.n	d664 <usbdc_set_config+0xa8>
				} else {
					break;
    d662:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    d664:	68fb      	ldr	r3, [r7, #12]
    d666:	4618      	mov	r0, r3
    d668:	4b0e      	ldr	r3, [pc, #56]	; (d6a4 <usbdc_set_config+0xe8>)
    d66a:	4798      	blx	r3
    d66c:	4603      	mov	r3, r0
    d66e:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d670:	68fb      	ldr	r3, [r7, #12]
    d672:	6939      	ldr	r1, [r7, #16]
    d674:	2204      	movs	r2, #4
    d676:	4618      	mov	r0, r3
    d678:	4b09      	ldr	r3, [pc, #36]	; (d6a0 <usbdc_set_config+0xe4>)
    d67a:	4798      	blx	r3
    d67c:	4603      	mov	r3, r0
    d67e:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    d680:	68fb      	ldr	r3, [r7, #12]
    d682:	2b00      	cmp	r3, #0
    d684:	d1cf      	bne.n	d626 <usbdc_set_config+0x6a>
	}
	return true;
    d686:	2301      	movs	r3, #1
}
    d688:	4618      	mov	r0, r3
    d68a:	3720      	adds	r7, #32
    d68c:	46bd      	mov	sp, r7
    d68e:	bd80      	pop	{r7, pc}
    d690:	0000d589 	.word	0x0000d589
    d694:	2000108c 	.word	0x2000108c
    d698:	0000df2d 	.word	0x0000df2d
    d69c:	0000d0d9 	.word	0x0000d0d9
    d6a0:	0000de6d 	.word	0x0000de6d
    d6a4:	0000d0b5 	.word	0x0000d0b5

0000d6a8 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    d6a8:	b580      	push	{r7, lr}
    d6aa:	b082      	sub	sp, #8
    d6ac:	af00      	add	r7, sp, #0
    d6ae:	4603      	mov	r3, r0
    d6b0:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    d6b2:	79fb      	ldrb	r3, [r7, #7]
    d6b4:	4618      	mov	r0, r3
    d6b6:	4b03      	ldr	r3, [pc, #12]	; (d6c4 <usbdc_set_address+0x1c>)
    d6b8:	4798      	blx	r3
}
    d6ba:	bf00      	nop
    d6bc:	3708      	adds	r7, #8
    d6be:	46bd      	mov	sp, r7
    d6c0:	bd80      	pop	{r7, pc}
    d6c2:	bf00      	nop
    d6c4:	00003b21 	.word	0x00003b21

0000d6c8 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    d6c8:	b590      	push	{r4, r7, lr}
    d6ca:	b087      	sub	sp, #28
    d6cc:	af00      	add	r7, sp, #0
    d6ce:	4603      	mov	r3, r0
    d6d0:	460a      	mov	r2, r1
    d6d2:	80fb      	strh	r3, [r7, #6]
    d6d4:	4613      	mov	r3, r2
    d6d6:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    d6d8:	2300      	movs	r3, #0
    d6da:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    d6dc:	693b      	ldr	r3, [r7, #16]
    d6de:	2b00      	cmp	r3, #0
    d6e0:	d10b      	bne.n	d6fa <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    d6e2:	4b43      	ldr	r3, [pc, #268]	; (d7f0 <usbdc_set_interface+0x128>)
    d6e4:	681b      	ldr	r3, [r3, #0]
    d6e6:	6818      	ldr	r0, [r3, #0]
    d6e8:	4b41      	ldr	r3, [pc, #260]	; (d7f0 <usbdc_set_interface+0x128>)
    d6ea:	681b      	ldr	r3, [r3, #0]
    d6ec:	6859      	ldr	r1, [r3, #4]
    d6ee:	4b40      	ldr	r3, [pc, #256]	; (d7f0 <usbdc_set_interface+0x128>)
    d6f0:	7edb      	ldrb	r3, [r3, #27]
    d6f2:	461a      	mov	r2, r3
    d6f4:	4b3f      	ldr	r3, [pc, #252]	; (d7f4 <usbdc_set_interface+0x12c>)
    d6f6:	4798      	blx	r3
    d6f8:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    d6fa:	693b      	ldr	r3, [r7, #16]
    d6fc:	2b00      	cmp	r3, #0
    d6fe:	d101      	bne.n	d704 <usbdc_set_interface+0x3c>
		return false;
    d700:	2300      	movs	r3, #0
    d702:	e071      	b.n	d7e8 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    d704:	693b      	ldr	r3, [r7, #16]
    d706:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    d708:	6938      	ldr	r0, [r7, #16]
    d70a:	4b3b      	ldr	r3, [pc, #236]	; (d7f8 <usbdc_set_interface+0x130>)
    d70c:	4798      	blx	r3
    d70e:	4603      	mov	r3, r0
    d710:	461a      	mov	r2, r3
    d712:	693b      	ldr	r3, [r7, #16]
    d714:	4413      	add	r3, r2
    d716:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    d718:	68bb      	ldr	r3, [r7, #8]
    d71a:	68f9      	ldr	r1, [r7, #12]
    d71c:	2204      	movs	r2, #4
    d71e:	4618      	mov	r0, r3
    d720:	4b36      	ldr	r3, [pc, #216]	; (d7fc <usbdc_set_interface+0x134>)
    d722:	4798      	blx	r3
    d724:	6138      	str	r0, [r7, #16]
    d726:	693b      	ldr	r3, [r7, #16]
    d728:	2b00      	cmp	r3, #0
    d72a:	d113      	bne.n	d754 <usbdc_set_interface+0x8c>
		return false;
    d72c:	2300      	movs	r3, #0
    d72e:	e05b      	b.n	d7e8 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    d730:	68bb      	ldr	r3, [r7, #8]
    d732:	4618      	mov	r0, r3
    d734:	4b32      	ldr	r3, [pc, #200]	; (d800 <usbdc_set_interface+0x138>)
    d736:	4798      	blx	r3
    d738:	4603      	mov	r3, r0
    d73a:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d73c:	68bb      	ldr	r3, [r7, #8]
    d73e:	68f9      	ldr	r1, [r7, #12]
    d740:	2204      	movs	r2, #4
    d742:	4618      	mov	r0, r3
    d744:	4b2d      	ldr	r3, [pc, #180]	; (d7fc <usbdc_set_interface+0x134>)
    d746:	4798      	blx	r3
    d748:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    d74a:	693b      	ldr	r3, [r7, #16]
    d74c:	2b00      	cmp	r3, #0
    d74e:	d101      	bne.n	d754 <usbdc_set_interface+0x8c>
			return false;
    d750:	2300      	movs	r3, #0
    d752:	e049      	b.n	d7e8 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    d754:	693b      	ldr	r3, [r7, #16]
    d756:	3302      	adds	r3, #2
    d758:	781b      	ldrb	r3, [r3, #0]
    d75a:	b29b      	uxth	r3, r3
    d75c:	88ba      	ldrh	r2, [r7, #4]
    d75e:	429a      	cmp	r2, r3
    d760:	d1e6      	bne.n	d730 <usbdc_set_interface+0x68>
    d762:	693b      	ldr	r3, [r7, #16]
    d764:	3303      	adds	r3, #3
    d766:	781b      	ldrb	r3, [r3, #0]
    d768:	b29b      	uxth	r3, r3
    d76a:	88fa      	ldrh	r2, [r7, #6]
    d76c:	429a      	cmp	r2, r3
    d76e:	d1df      	bne.n	d730 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    d770:	693b      	ldr	r3, [r7, #16]
    d772:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    d774:	4b1e      	ldr	r3, [pc, #120]	; (d7f0 <usbdc_set_interface+0x128>)
    d776:	691b      	ldr	r3, [r3, #16]
    d778:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    d77a:	e031      	b.n	d7e0 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    d77c:	697b      	ldr	r3, [r7, #20]
    d77e:	685b      	ldr	r3, [r3, #4]
    d780:	f107 0208 	add.w	r2, r7, #8
    d784:	2101      	movs	r1, #1
    d786:	6978      	ldr	r0, [r7, #20]
    d788:	4798      	blx	r3
    d78a:	4603      	mov	r3, r0
    d78c:	2b00      	cmp	r3, #0
    d78e:	d003      	beq.n	d798 <usbdc_set_interface+0xd0>
			func = func->next;
    d790:	697b      	ldr	r3, [r7, #20]
    d792:	681b      	ldr	r3, [r3, #0]
    d794:	617b      	str	r3, [r7, #20]
    d796:	e023      	b.n	d7e0 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    d798:	697b      	ldr	r3, [r7, #20]
    d79a:	685b      	ldr	r3, [r3, #4]
    d79c:	f107 0208 	add.w	r2, r7, #8
    d7a0:	2100      	movs	r1, #0
    d7a2:	6978      	ldr	r0, [r7, #20]
    d7a4:	4798      	blx	r3
    d7a6:	4603      	mov	r3, r0
    d7a8:	2b00      	cmp	r3, #0
    d7aa:	d117      	bne.n	d7dc <usbdc_set_interface+0x114>
			if (alt_set) {
    d7ac:	88fb      	ldrh	r3, [r7, #6]
    d7ae:	2b00      	cmp	r3, #0
    d7b0:	d00c      	beq.n	d7cc <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    d7b2:	4b0f      	ldr	r3, [pc, #60]	; (d7f0 <usbdc_set_interface+0x128>)
    d7b4:	7f5b      	ldrb	r3, [r3, #29]
    d7b6:	b25a      	sxtb	r2, r3
    d7b8:	88bb      	ldrh	r3, [r7, #4]
    d7ba:	2101      	movs	r1, #1
    d7bc:	fa01 f303 	lsl.w	r3, r1, r3
    d7c0:	b25b      	sxtb	r3, r3
    d7c2:	4313      	orrs	r3, r2
    d7c4:	b25b      	sxtb	r3, r3
    d7c6:	b2da      	uxtb	r2, r3
    d7c8:	4b09      	ldr	r3, [pc, #36]	; (d7f0 <usbdc_set_interface+0x128>)
    d7ca:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    d7cc:	2300      	movs	r3, #0
    d7ce:	2200      	movs	r2, #0
    d7d0:	2100      	movs	r1, #0
    d7d2:	2000      	movs	r0, #0
    d7d4:	4c0b      	ldr	r4, [pc, #44]	; (d804 <usbdc_set_interface+0x13c>)
    d7d6:	47a0      	blx	r4
			return true;
    d7d8:	2301      	movs	r3, #1
    d7da:	e005      	b.n	d7e8 <usbdc_set_interface+0x120>
		} else {
			return false;
    d7dc:	2300      	movs	r3, #0
    d7de:	e003      	b.n	d7e8 <usbdc_set_interface+0x120>
	while (NULL != func) {
    d7e0:	697b      	ldr	r3, [r7, #20]
    d7e2:	2b00      	cmp	r3, #0
    d7e4:	d1ca      	bne.n	d77c <usbdc_set_interface+0xb4>
		}
	}

	return false;
    d7e6:	2300      	movs	r3, #0
}
    d7e8:	4618      	mov	r0, r3
    d7ea:	371c      	adds	r7, #28
    d7ec:	46bd      	mov	sp, r7
    d7ee:	bd90      	pop	{r4, r7, pc}
    d7f0:	2000108c 	.word	0x2000108c
    d7f4:	0000df2d 	.word	0x0000df2d
    d7f8:	0000d0d9 	.word	0x0000d0d9
    d7fc:	0000de6d 	.word	0x0000de6d
    d800:	0000d0b5 	.word	0x0000d0b5
    d804:	0000dbdd 	.word	0x0000dbdd

0000d808 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    d808:	b590      	push	{r4, r7, lr}
    d80a:	b083      	sub	sp, #12
    d80c:	af00      	add	r7, sp, #0
    d80e:	4603      	mov	r3, r0
    d810:	6039      	str	r1, [r7, #0]
    d812:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d814:	683b      	ldr	r3, [r7, #0]
    d816:	785b      	ldrb	r3, [r3, #1]
    d818:	3b01      	subs	r3, #1
    d81a:	2b0a      	cmp	r3, #10
    d81c:	d85b      	bhi.n	d8d6 <usbdc_set_req+0xce>
    d81e:	a201      	add	r2, pc, #4	; (adr r2, d824 <usbdc_set_req+0x1c>)
    d820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d824:	0000d8a3 	.word	0x0000d8a3
    d828:	0000d8d7 	.word	0x0000d8d7
    d82c:	0000d8b1 	.word	0x0000d8b1
    d830:	0000d8d7 	.word	0x0000d8d7
    d834:	0000d851 	.word	0x0000d851
    d838:	0000d8d7 	.word	0x0000d8d7
    d83c:	0000d8d7 	.word	0x0000d8d7
    d840:	0000d8d7 	.word	0x0000d8d7
    d844:	0000d86b 	.word	0x0000d86b
    d848:	0000d8d7 	.word	0x0000d8d7
    d84c:	0000d8bf 	.word	0x0000d8bf
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d850:	79f8      	ldrb	r0, [r7, #7]
    d852:	2301      	movs	r3, #1
    d854:	2200      	movs	r2, #0
    d856:	2100      	movs	r1, #0
    d858:	4c21      	ldr	r4, [pc, #132]	; (d8e0 <usbdc_set_req+0xd8>)
    d85a:	47a0      	blx	r4
    d85c:	4603      	mov	r3, r0
    d85e:	2b00      	cmp	r3, #0
    d860:	bf0c      	ite	eq
    d862:	2301      	moveq	r3, #1
    d864:	2300      	movne	r3, #0
    d866:	b2db      	uxtb	r3, r3
    d868:	e036      	b.n	d8d8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    d86a:	683b      	ldr	r3, [r7, #0]
    d86c:	885b      	ldrh	r3, [r3, #2]
    d86e:	b29b      	uxth	r3, r3
    d870:	b2db      	uxtb	r3, r3
    d872:	4618      	mov	r0, r3
    d874:	4b1b      	ldr	r3, [pc, #108]	; (d8e4 <usbdc_set_req+0xdc>)
    d876:	4798      	blx	r3
    d878:	4603      	mov	r3, r0
    d87a:	f083 0301 	eor.w	r3, r3, #1
    d87e:	b2db      	uxtb	r3, r3
    d880:	2b00      	cmp	r3, #0
    d882:	d001      	beq.n	d888 <usbdc_set_req+0x80>
			return false;
    d884:	2300      	movs	r3, #0
    d886:	e027      	b.n	d8d8 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d888:	79f8      	ldrb	r0, [r7, #7]
    d88a:	2301      	movs	r3, #1
    d88c:	2200      	movs	r2, #0
    d88e:	2100      	movs	r1, #0
    d890:	4c13      	ldr	r4, [pc, #76]	; (d8e0 <usbdc_set_req+0xd8>)
    d892:	47a0      	blx	r4
    d894:	4603      	mov	r3, r0
    d896:	2b00      	cmp	r3, #0
    d898:	bf0c      	ite	eq
    d89a:	2301      	moveq	r3, #1
    d89c:	2300      	movne	r3, #0
    d89e:	b2db      	uxtb	r3, r3
    d8a0:	e01a      	b.n	d8d8 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    d8a2:	79fb      	ldrb	r3, [r7, #7]
    d8a4:	6839      	ldr	r1, [r7, #0]
    d8a6:	4618      	mov	r0, r3
    d8a8:	4b0f      	ldr	r3, [pc, #60]	; (d8e8 <usbdc_set_req+0xe0>)
    d8aa:	4798      	blx	r3
    d8ac:	4603      	mov	r3, r0
    d8ae:	e013      	b.n	d8d8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    d8b0:	79fb      	ldrb	r3, [r7, #7]
    d8b2:	6839      	ldr	r1, [r7, #0]
    d8b4:	4618      	mov	r0, r3
    d8b6:	4b0d      	ldr	r3, [pc, #52]	; (d8ec <usbdc_set_req+0xe4>)
    d8b8:	4798      	blx	r3
    d8ba:	4603      	mov	r3, r0
    d8bc:	e00c      	b.n	d8d8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    d8be:	683b      	ldr	r3, [r7, #0]
    d8c0:	885b      	ldrh	r3, [r3, #2]
    d8c2:	b29a      	uxth	r2, r3
    d8c4:	683b      	ldr	r3, [r7, #0]
    d8c6:	889b      	ldrh	r3, [r3, #4]
    d8c8:	b29b      	uxth	r3, r3
    d8ca:	4619      	mov	r1, r3
    d8cc:	4610      	mov	r0, r2
    d8ce:	4b08      	ldr	r3, [pc, #32]	; (d8f0 <usbdc_set_req+0xe8>)
    d8d0:	4798      	blx	r3
    d8d2:	4603      	mov	r3, r0
    d8d4:	e000      	b.n	d8d8 <usbdc_set_req+0xd0>
	default:
		return false;
    d8d6:	2300      	movs	r3, #0
	}
}
    d8d8:	4618      	mov	r0, r3
    d8da:	370c      	adds	r7, #12
    d8dc:	46bd      	mov	sp, r7
    d8de:	bd90      	pop	{r4, r7, pc}
    d8e0:	0000dbdd 	.word	0x0000dbdd
    d8e4:	0000d5bd 	.word	0x0000d5bd
    d8e8:	0000d4d9 	.word	0x0000d4d9
    d8ec:	0000d531 	.word	0x0000d531
    d8f0:	0000d6c9 	.word	0x0000d6c9

0000d8f4 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    d8f4:	b580      	push	{r7, lr}
    d8f6:	b082      	sub	sp, #8
    d8f8:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d8fa:	4b0a      	ldr	r3, [pc, #40]	; (d924 <usbdc_sof_notify+0x30>)
    d8fc:	685b      	ldr	r3, [r3, #4]
    d8fe:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    d900:	e009      	b.n	d916 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    d902:	687b      	ldr	r3, [r7, #4]
    d904:	685b      	ldr	r3, [r3, #4]
    d906:	2b00      	cmp	r3, #0
    d908:	d002      	beq.n	d910 <usbdc_sof_notify+0x1c>
			sof->cb();
    d90a:	687b      	ldr	r3, [r7, #4]
    d90c:	685b      	ldr	r3, [r3, #4]
    d90e:	4798      	blx	r3
		}
		sof = sof->next;
    d910:	687b      	ldr	r3, [r7, #4]
    d912:	681b      	ldr	r3, [r3, #0]
    d914:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    d916:	687b      	ldr	r3, [r7, #4]
    d918:	2b00      	cmp	r3, #0
    d91a:	d1f2      	bne.n	d902 <usbdc_sof_notify+0xe>
	}
}
    d91c:	bf00      	nop
    d91e:	3708      	adds	r7, #8
    d920:	46bd      	mov	sp, r7
    d922:	bd80      	pop	{r7, pc}
    d924:	2000108c 	.word	0x2000108c

0000d928 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    d928:	b580      	push	{r7, lr}
    d92a:	b084      	sub	sp, #16
    d92c:	af00      	add	r7, sp, #0
    d92e:	4603      	mov	r3, r0
    d930:	6039      	str	r1, [r7, #0]
    d932:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d934:	4b0b      	ldr	r3, [pc, #44]	; (d964 <usbdc_change_notify+0x3c>)
    d936:	68db      	ldr	r3, [r3, #12]
    d938:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    d93a:	e00c      	b.n	d956 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    d93c:	68fb      	ldr	r3, [r7, #12]
    d93e:	685b      	ldr	r3, [r3, #4]
    d940:	2b00      	cmp	r3, #0
    d942:	d005      	beq.n	d950 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    d944:	68fb      	ldr	r3, [r7, #12]
    d946:	685b      	ldr	r3, [r3, #4]
    d948:	79fa      	ldrb	r2, [r7, #7]
    d94a:	6839      	ldr	r1, [r7, #0]
    d94c:	4610      	mov	r0, r2
    d94e:	4798      	blx	r3
		}
		cg = cg->next;
    d950:	68fb      	ldr	r3, [r7, #12]
    d952:	681b      	ldr	r3, [r3, #0]
    d954:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    d956:	68fb      	ldr	r3, [r7, #12]
    d958:	2b00      	cmp	r3, #0
    d95a:	d1ef      	bne.n	d93c <usbdc_change_notify+0x14>
	}
}
    d95c:	bf00      	nop
    d95e:	3710      	adds	r7, #16
    d960:	46bd      	mov	sp, r7
    d962:	bd80      	pop	{r7, pc}
    d964:	2000108c 	.word	0x2000108c

0000d968 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d968:	b580      	push	{r7, lr}
    d96a:	b084      	sub	sp, #16
    d96c:	af00      	add	r7, sp, #0
    d96e:	4603      	mov	r3, r0
    d970:	6039      	str	r1, [r7, #0]
    d972:	71fb      	strb	r3, [r7, #7]
    d974:	4613      	mov	r3, r2
    d976:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d978:	4b12      	ldr	r3, [pc, #72]	; (d9c4 <usbdc_request_handler+0x5c>)
    d97a:	689b      	ldr	r3, [r3, #8]
    d97c:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    d97e:	e019      	b.n	d9b4 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    d980:	68fb      	ldr	r3, [r7, #12]
    d982:	685b      	ldr	r3, [r3, #4]
    d984:	2b00      	cmp	r3, #0
    d986:	d012      	beq.n	d9ae <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    d988:	68fb      	ldr	r3, [r7, #12]
    d98a:	685b      	ldr	r3, [r3, #4]
    d98c:	79ba      	ldrb	r2, [r7, #6]
    d98e:	79f8      	ldrb	r0, [r7, #7]
    d990:	6839      	ldr	r1, [r7, #0]
    d992:	4798      	blx	r3
    d994:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    d996:	68bb      	ldr	r3, [r7, #8]
    d998:	2b00      	cmp	r3, #0
    d99a:	d101      	bne.n	d9a0 <usbdc_request_handler+0x38>
				return true;
    d99c:	2301      	movs	r3, #1
    d99e:	e00d      	b.n	d9bc <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    d9a0:	68bb      	ldr	r3, [r7, #8]
    d9a2:	f113 0f0a 	cmn.w	r3, #10
    d9a6:	d002      	beq.n	d9ae <usbdc_request_handler+0x46>
				return -1;
    d9a8:	f04f 33ff 	mov.w	r3, #4294967295
    d9ac:	e006      	b.n	d9bc <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    d9ae:	68fb      	ldr	r3, [r7, #12]
    d9b0:	681b      	ldr	r3, [r3, #0]
    d9b2:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    d9b4:	68fb      	ldr	r3, [r7, #12]
    d9b6:	2b00      	cmp	r3, #0
    d9b8:	d1e2      	bne.n	d980 <usbdc_request_handler+0x18>
	}
	return false;
    d9ba:	2300      	movs	r3, #0
}
    d9bc:	4618      	mov	r0, r3
    d9be:	3710      	adds	r7, #16
    d9c0:	46bd      	mov	sp, r7
    d9c2:	bd80      	pop	{r7, pc}
    d9c4:	2000108c 	.word	0x2000108c

0000d9c8 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d9c8:	b580      	push	{r7, lr}
    d9ca:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    d9cc:	4b01      	ldr	r3, [pc, #4]	; (d9d4 <usbd_sof_cb+0xc>)
    d9ce:	4798      	blx	r3
}
    d9d0:	bf00      	nop
    d9d2:	bd80      	pop	{r7, pc}
    d9d4:	0000d8f5 	.word	0x0000d8f5

0000d9d8 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    d9d8:	b580      	push	{r7, lr}
    d9da:	b082      	sub	sp, #8
    d9dc:	af00      	add	r7, sp, #0
    d9de:	4603      	mov	r3, r0
    d9e0:	6039      	str	r1, [r7, #0]
    d9e2:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    d9e4:	79fb      	ldrb	r3, [r7, #7]
    d9e6:	2200      	movs	r2, #0
    d9e8:	6839      	ldr	r1, [r7, #0]
    d9ea:	4618      	mov	r0, r3
    d9ec:	4b14      	ldr	r3, [pc, #80]	; (da40 <usbdc_cb_ctl_req+0x68>)
    d9ee:	4798      	blx	r3
    d9f0:	4603      	mov	r3, r0
    d9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
    d9f6:	d00b      	beq.n	da10 <usbdc_cb_ctl_req+0x38>
    d9f8:	2b01      	cmp	r3, #1
    d9fa:	d007      	beq.n	da0c <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    d9fc:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d9fe:	683b      	ldr	r3, [r7, #0]
    da00:	781b      	ldrb	r3, [r3, #0]
    da02:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    da06:	2b00      	cmp	r3, #0
    da08:	d007      	beq.n	da1a <usbdc_cb_ctl_req+0x42>
    da0a:	e003      	b.n	da14 <usbdc_cb_ctl_req+0x3c>
		return true;
    da0c:	2301      	movs	r3, #1
    da0e:	e013      	b.n	da38 <usbdc_cb_ctl_req+0x60>
		return false;
    da10:	2300      	movs	r3, #0
    da12:	e011      	b.n	da38 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    da14:	2b80      	cmp	r3, #128	; 0x80
    da16:	d007      	beq.n	da28 <usbdc_cb_ctl_req+0x50>
    da18:	e00d      	b.n	da36 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    da1a:	79fb      	ldrb	r3, [r7, #7]
    da1c:	6839      	ldr	r1, [r7, #0]
    da1e:	4618      	mov	r0, r3
    da20:	4b08      	ldr	r3, [pc, #32]	; (da44 <usbdc_cb_ctl_req+0x6c>)
    da22:	4798      	blx	r3
    da24:	4603      	mov	r3, r0
    da26:	e007      	b.n	da38 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    da28:	79fb      	ldrb	r3, [r7, #7]
    da2a:	6839      	ldr	r1, [r7, #0]
    da2c:	4618      	mov	r0, r3
    da2e:	4b06      	ldr	r3, [pc, #24]	; (da48 <usbdc_cb_ctl_req+0x70>)
    da30:	4798      	blx	r3
    da32:	4603      	mov	r3, r0
    da34:	e000      	b.n	da38 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    da36:	2300      	movs	r3, #0
	}
}
    da38:	4618      	mov	r0, r3
    da3a:	3708      	adds	r7, #8
    da3c:	46bd      	mov	sp, r7
    da3e:	bd80      	pop	{r7, pc}
    da40:	0000d969 	.word	0x0000d969
    da44:	0000d809 	.word	0x0000d809
    da48:	0000d431 	.word	0x0000d431

0000da4c <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    da4c:	b580      	push	{r7, lr}
    da4e:	b082      	sub	sp, #8
    da50:	af00      	add	r7, sp, #0
    da52:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    da54:	687b      	ldr	r3, [r7, #4]
    da56:	781b      	ldrb	r3, [r3, #0]
    da58:	2b00      	cmp	r3, #0
    da5a:	d135      	bne.n	dac8 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    da5c:	687b      	ldr	r3, [r7, #4]
    da5e:	785b      	ldrb	r3, [r3, #1]
    da60:	2b05      	cmp	r3, #5
    da62:	d019      	beq.n	da98 <usbdc_ctrl_status_end+0x4c>
    da64:	2b09      	cmp	r3, #9
    da66:	d000      	beq.n	da6a <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    da68:	e02f      	b.n	daca <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    da6a:	687b      	ldr	r3, [r7, #4]
    da6c:	885b      	ldrh	r3, [r3, #2]
    da6e:	b29b      	uxth	r3, r3
    da70:	b2da      	uxtb	r2, r3
    da72:	4b17      	ldr	r3, [pc, #92]	; (dad0 <usbdc_ctrl_status_end+0x84>)
    da74:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    da76:	687b      	ldr	r3, [r7, #4]
    da78:	885b      	ldrh	r3, [r3, #2]
    da7a:	b29b      	uxth	r3, r3
    da7c:	2b00      	cmp	r3, #0
    da7e:	d001      	beq.n	da84 <usbdc_ctrl_status_end+0x38>
    da80:	2204      	movs	r2, #4
    da82:	e000      	b.n	da86 <usbdc_ctrl_status_end+0x3a>
    da84:	2203      	movs	r2, #3
    da86:	4b12      	ldr	r3, [pc, #72]	; (dad0 <usbdc_ctrl_status_end+0x84>)
    da88:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    da8a:	4b11      	ldr	r3, [pc, #68]	; (dad0 <usbdc_ctrl_status_end+0x84>)
    da8c:	7e9b      	ldrb	r3, [r3, #26]
    da8e:	4619      	mov	r1, r3
    da90:	2001      	movs	r0, #1
    da92:	4b10      	ldr	r3, [pc, #64]	; (dad4 <usbdc_ctrl_status_end+0x88>)
    da94:	4798      	blx	r3
		break;
    da96:	e018      	b.n	daca <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    da98:	687b      	ldr	r3, [r7, #4]
    da9a:	885b      	ldrh	r3, [r3, #2]
    da9c:	b29b      	uxth	r3, r3
    da9e:	b2db      	uxtb	r3, r3
    daa0:	4618      	mov	r0, r3
    daa2:	4b0d      	ldr	r3, [pc, #52]	; (dad8 <usbdc_ctrl_status_end+0x8c>)
    daa4:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    daa6:	687b      	ldr	r3, [r7, #4]
    daa8:	885b      	ldrh	r3, [r3, #2]
    daaa:	b29b      	uxth	r3, r3
    daac:	2b00      	cmp	r3, #0
    daae:	d001      	beq.n	dab4 <usbdc_ctrl_status_end+0x68>
    dab0:	2203      	movs	r2, #3
    dab2:	e000      	b.n	dab6 <usbdc_ctrl_status_end+0x6a>
    dab4:	2202      	movs	r2, #2
    dab6:	4b06      	ldr	r3, [pc, #24]	; (dad0 <usbdc_ctrl_status_end+0x84>)
    dab8:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    daba:	4b05      	ldr	r3, [pc, #20]	; (dad0 <usbdc_ctrl_status_end+0x84>)
    dabc:	7e9b      	ldrb	r3, [r3, #26]
    dabe:	4619      	mov	r1, r3
    dac0:	2001      	movs	r0, #1
    dac2:	4b04      	ldr	r3, [pc, #16]	; (dad4 <usbdc_ctrl_status_end+0x88>)
    dac4:	4798      	blx	r3
		break;
    dac6:	e000      	b.n	daca <usbdc_ctrl_status_end+0x7e>
		return;
    dac8:	bf00      	nop
	}
}
    daca:	3708      	adds	r7, #8
    dacc:	46bd      	mov	sp, r7
    dace:	bd80      	pop	{r7, pc}
    dad0:	2000108c 	.word	0x2000108c
    dad4:	0000d929 	.word	0x0000d929
    dad8:	0000d6a9 	.word	0x0000d6a9

0000dadc <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    dadc:	b580      	push	{r7, lr}
    dade:	b082      	sub	sp, #8
    dae0:	af00      	add	r7, sp, #0
    dae2:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    dae4:	2201      	movs	r2, #1
    dae6:	6879      	ldr	r1, [r7, #4]
    dae8:	2000      	movs	r0, #0
    daea:	4b03      	ldr	r3, [pc, #12]	; (daf8 <usbdc_ctrl_data_end+0x1c>)
    daec:	4798      	blx	r3
	return false;
    daee:	2300      	movs	r3, #0
}
    daf0:	4618      	mov	r0, r3
    daf2:	3708      	adds	r7, #8
    daf4:	46bd      	mov	sp, r7
    daf6:	bd80      	pop	{r7, pc}
    daf8:	0000d969 	.word	0x0000d969

0000dafc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    dafc:	b580      	push	{r7, lr}
    dafe:	b082      	sub	sp, #8
    db00:	af00      	add	r7, sp, #0
    db02:	4603      	mov	r3, r0
    db04:	603a      	str	r2, [r7, #0]
    db06:	71fb      	strb	r3, [r7, #7]
    db08:	460b      	mov	r3, r1
    db0a:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    db0c:	79bb      	ldrb	r3, [r7, #6]
    db0e:	2b00      	cmp	r3, #0
    db10:	d002      	beq.n	db18 <usbdc_cb_ctl_done+0x1c>
    db12:	2b01      	cmp	r3, #1
    db14:	d004      	beq.n	db20 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    db16:	e008      	b.n	db2a <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    db18:	6838      	ldr	r0, [r7, #0]
    db1a:	4b06      	ldr	r3, [pc, #24]	; (db34 <usbdc_cb_ctl_done+0x38>)
    db1c:	4798      	blx	r3
		break;
    db1e:	e004      	b.n	db2a <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    db20:	6838      	ldr	r0, [r7, #0]
    db22:	4b05      	ldr	r3, [pc, #20]	; (db38 <usbdc_cb_ctl_done+0x3c>)
    db24:	4798      	blx	r3
    db26:	4603      	mov	r3, r0
    db28:	e000      	b.n	db2c <usbdc_cb_ctl_done+0x30>
	}
	return false;
    db2a:	2300      	movs	r3, #0
}
    db2c:	4618      	mov	r0, r3
    db2e:	3708      	adds	r7, #8
    db30:	46bd      	mov	sp, r7
    db32:	bd80      	pop	{r7, pc}
    db34:	0000da4d 	.word	0x0000da4d
    db38:	0000dadd 	.word	0x0000dadd

0000db3c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    db3c:	b580      	push	{r7, lr}
    db3e:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    db40:	4b10      	ldr	r3, [pc, #64]	; (db84 <usbdc_reset+0x48>)
    db42:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    db44:	4b10      	ldr	r3, [pc, #64]	; (db88 <usbdc_reset+0x4c>)
    db46:	2202      	movs	r2, #2
    db48:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    db4a:	4b0f      	ldr	r3, [pc, #60]	; (db88 <usbdc_reset+0x4c>)
    db4c:	2200      	movs	r2, #0
    db4e:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    db50:	4b0d      	ldr	r3, [pc, #52]	; (db88 <usbdc_reset+0x4c>)
    db52:	2200      	movs	r2, #0
    db54:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    db56:	2000      	movs	r0, #0
    db58:	4b0c      	ldr	r3, [pc, #48]	; (db8c <usbdc_reset+0x50>)
    db5a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    db5c:	4b0a      	ldr	r3, [pc, #40]	; (db88 <usbdc_reset+0x4c>)
    db5e:	7f1b      	ldrb	r3, [r3, #28]
    db60:	4618      	mov	r0, r3
    db62:	4b0b      	ldr	r3, [pc, #44]	; (db90 <usbdc_reset+0x54>)
    db64:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    db66:	4a0b      	ldr	r2, [pc, #44]	; (db94 <usbdc_reset+0x58>)
    db68:	2100      	movs	r1, #0
    db6a:	2000      	movs	r0, #0
    db6c:	4b0a      	ldr	r3, [pc, #40]	; (db98 <usbdc_reset+0x5c>)
    db6e:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    db70:	4a0a      	ldr	r2, [pc, #40]	; (db9c <usbdc_reset+0x60>)
    db72:	2102      	movs	r1, #2
    db74:	2000      	movs	r0, #0
    db76:	4b08      	ldr	r3, [pc, #32]	; (db98 <usbdc_reset+0x5c>)
    db78:	4798      	blx	r3
	usb_d_ep_enable(0);
    db7a:	2000      	movs	r0, #0
    db7c:	4b08      	ldr	r3, [pc, #32]	; (dba0 <usbdc_reset+0x64>)
    db7e:	4798      	blx	r3
}
    db80:	bf00      	nop
    db82:	bd80      	pop	{r7, pc}
    db84:	0000d589 	.word	0x0000d589
    db88:	2000108c 	.word	0x2000108c
    db8c:	00003c05 	.word	0x00003c05
    db90:	00003b41 	.word	0x00003b41
    db94:	0000d9d9 	.word	0x0000d9d9
    db98:	00003f59 	.word	0x00003f59
    db9c:	0000dafd 	.word	0x0000dafd
    dba0:	00003c55 	.word	0x00003c55

0000dba4 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    dba4:	b580      	push	{r7, lr}
    dba6:	b082      	sub	sp, #8
    dba8:	af00      	add	r7, sp, #0
    dbaa:	4603      	mov	r3, r0
    dbac:	6039      	str	r1, [r7, #0]
    dbae:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    dbb0:	79fb      	ldrb	r3, [r7, #7]
    dbb2:	2b00      	cmp	r3, #0
    dbb4:	d002      	beq.n	dbbc <usbd_event_cb+0x18>
    dbb6:	2b01      	cmp	r3, #1
    dbb8:	d005      	beq.n	dbc6 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    dbba:	e007      	b.n	dbcc <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    dbbc:	6839      	ldr	r1, [r7, #0]
    dbbe:	2000      	movs	r0, #0
    dbc0:	4b04      	ldr	r3, [pc, #16]	; (dbd4 <usbd_event_cb+0x30>)
    dbc2:	4798      	blx	r3
		break;
    dbc4:	e002      	b.n	dbcc <usbd_event_cb+0x28>
		usbdc_reset();
    dbc6:	4b04      	ldr	r3, [pc, #16]	; (dbd8 <usbd_event_cb+0x34>)
    dbc8:	4798      	blx	r3
		break;
    dbca:	bf00      	nop
	}
}
    dbcc:	bf00      	nop
    dbce:	3708      	adds	r7, #8
    dbd0:	46bd      	mov	sp, r7
    dbd2:	bd80      	pop	{r7, pc}
    dbd4:	0000d929 	.word	0x0000d929
    dbd8:	0000db3d 	.word	0x0000db3d

0000dbdc <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    dbdc:	b580      	push	{r7, lr}
    dbde:	b088      	sub	sp, #32
    dbe0:	af00      	add	r7, sp, #0
    dbe2:	60b9      	str	r1, [r7, #8]
    dbe4:	607a      	str	r2, [r7, #4]
    dbe6:	461a      	mov	r2, r3
    dbe8:	4603      	mov	r3, r0
    dbea:	73fb      	strb	r3, [r7, #15]
    dbec:	4613      	mov	r3, r2
    dbee:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    dbf0:	68bb      	ldr	r3, [r7, #8]
    dbf2:	617b      	str	r3, [r7, #20]
    dbf4:	687b      	ldr	r3, [r7, #4]
    dbf6:	61bb      	str	r3, [r7, #24]
    dbf8:	7bfb      	ldrb	r3, [r7, #15]
    dbfa:	773b      	strb	r3, [r7, #28]
    dbfc:	7bbb      	ldrb	r3, [r7, #14]
    dbfe:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    dc00:	f107 0314 	add.w	r3, r7, #20
    dc04:	4618      	mov	r0, r3
    dc06:	4b03      	ldr	r3, [pc, #12]	; (dc14 <usbdc_xfer+0x38>)
    dc08:	4798      	blx	r3
    dc0a:	4603      	mov	r3, r0
}
    dc0c:	4618      	mov	r0, r3
    dc0e:	3720      	adds	r7, #32
    dc10:	46bd      	mov	sp, r7
    dc12:	bd80      	pop	{r7, pc}
    dc14:	00003cc5 	.word	0x00003cc5

0000dc18 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    dc18:	b580      	push	{r7, lr}
    dc1a:	b082      	sub	sp, #8
    dc1c:	af00      	add	r7, sp, #0
    dc1e:	4603      	mov	r3, r0
    dc20:	6039      	str	r1, [r7, #0]
    dc22:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    dc24:	79fb      	ldrb	r3, [r7, #7]
    dc26:	2b01      	cmp	r3, #1
    dc28:	d009      	beq.n	dc3e <usbdc_register_handler+0x26>
    dc2a:	2b02      	cmp	r3, #2
    dc2c:	d00c      	beq.n	dc48 <usbdc_register_handler+0x30>
    dc2e:	2b00      	cmp	r3, #0
    dc30:	d000      	beq.n	dc34 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    dc32:	e00e      	b.n	dc52 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    dc34:	6839      	ldr	r1, [r7, #0]
    dc36:	4809      	ldr	r0, [pc, #36]	; (dc5c <usbdc_register_handler+0x44>)
    dc38:	4b09      	ldr	r3, [pc, #36]	; (dc60 <usbdc_register_handler+0x48>)
    dc3a:	4798      	blx	r3
		break;
    dc3c:	e009      	b.n	dc52 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    dc3e:	6839      	ldr	r1, [r7, #0]
    dc40:	4808      	ldr	r0, [pc, #32]	; (dc64 <usbdc_register_handler+0x4c>)
    dc42:	4b07      	ldr	r3, [pc, #28]	; (dc60 <usbdc_register_handler+0x48>)
    dc44:	4798      	blx	r3
		break;
    dc46:	e004      	b.n	dc52 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    dc48:	6839      	ldr	r1, [r7, #0]
    dc4a:	4807      	ldr	r0, [pc, #28]	; (dc68 <usbdc_register_handler+0x50>)
    dc4c:	4b04      	ldr	r3, [pc, #16]	; (dc60 <usbdc_register_handler+0x48>)
    dc4e:	4798      	blx	r3
		break;
    dc50:	bf00      	nop
	}
}
    dc52:	bf00      	nop
    dc54:	3708      	adds	r7, #8
    dc56:	46bd      	mov	sp, r7
    dc58:	bd80      	pop	{r7, pc}
    dc5a:	bf00      	nop
    dc5c:	20001090 	.word	0x20001090
    dc60:	000040b1 	.word	0x000040b1
    dc64:	20001094 	.word	0x20001094
    dc68:	20001098 	.word	0x20001098

0000dc6c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    dc6c:	b580      	push	{r7, lr}
    dc6e:	b084      	sub	sp, #16
    dc70:	af00      	add	r7, sp, #0
    dc72:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    dc74:	687b      	ldr	r3, [r7, #4]
    dc76:	2b00      	cmp	r3, #0
    dc78:	bf14      	ite	ne
    dc7a:	2301      	movne	r3, #1
    dc7c:	2300      	moveq	r3, #0
    dc7e:	b2db      	uxtb	r3, r3
    dc80:	f240 3255 	movw	r2, #853	; 0x355
    dc84:	4910      	ldr	r1, [pc, #64]	; (dcc8 <usbdc_init+0x5c>)
    dc86:	4618      	mov	r0, r3
    dc88:	4b10      	ldr	r3, [pc, #64]	; (dccc <usbdc_init+0x60>)
    dc8a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    dc8c:	4b10      	ldr	r3, [pc, #64]	; (dcd0 <usbdc_init+0x64>)
    dc8e:	4798      	blx	r3
    dc90:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    dc92:	68fb      	ldr	r3, [r7, #12]
    dc94:	2b00      	cmp	r3, #0
    dc96:	da01      	bge.n	dc9c <usbdc_init+0x30>
		return rc;
    dc98:	68fb      	ldr	r3, [r7, #12]
    dc9a:	e010      	b.n	dcbe <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    dc9c:	2220      	movs	r2, #32
    dc9e:	2100      	movs	r1, #0
    dca0:	480c      	ldr	r0, [pc, #48]	; (dcd4 <usbdc_init+0x68>)
    dca2:	4b0d      	ldr	r3, [pc, #52]	; (dcd8 <usbdc_init+0x6c>)
    dca4:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    dca6:	4a0b      	ldr	r2, [pc, #44]	; (dcd4 <usbdc_init+0x68>)
    dca8:	687b      	ldr	r3, [r7, #4]
    dcaa:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    dcac:	490b      	ldr	r1, [pc, #44]	; (dcdc <usbdc_init+0x70>)
    dcae:	2000      	movs	r0, #0
    dcb0:	4b0b      	ldr	r3, [pc, #44]	; (dce0 <usbdc_init+0x74>)
    dcb2:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    dcb4:	490b      	ldr	r1, [pc, #44]	; (dce4 <usbdc_init+0x78>)
    dcb6:	2001      	movs	r0, #1
    dcb8:	4b09      	ldr	r3, [pc, #36]	; (dce0 <usbdc_init+0x74>)
    dcba:	4798      	blx	r3

	return 0;
    dcbc:	2300      	movs	r3, #0
}
    dcbe:	4618      	mov	r0, r3
    dcc0:	3710      	adds	r7, #16
    dcc2:	46bd      	mov	sp, r7
    dcc4:	bd80      	pop	{r7, pc}
    dcc6:	bf00      	nop
    dcc8:	00010780 	.word	0x00010780
    dccc:	00003fd5 	.word	0x00003fd5
    dcd0:	00003a2d 	.word	0x00003a2d
    dcd4:	2000108c 	.word	0x2000108c
    dcd8:	000101c1 	.word	0x000101c1
    dcdc:	0000d9c9 	.word	0x0000d9c9
    dce0:	00003ad9 	.word	0x00003ad9
    dce4:	0000dba5 	.word	0x0000dba5

0000dce8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    dce8:	b580      	push	{r7, lr}
    dcea:	b082      	sub	sp, #8
    dcec:	af00      	add	r7, sp, #0
    dcee:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    dcf0:	6879      	ldr	r1, [r7, #4]
    dcf2:	4803      	ldr	r0, [pc, #12]	; (dd00 <usbdc_register_function+0x18>)
    dcf4:	4b03      	ldr	r3, [pc, #12]	; (dd04 <usbdc_register_function+0x1c>)
    dcf6:	4798      	blx	r3
}
    dcf8:	bf00      	nop
    dcfa:	3708      	adds	r7, #8
    dcfc:	46bd      	mov	sp, r7
    dcfe:	bd80      	pop	{r7, pc}
    dd00:	2000109c 	.word	0x2000109c
    dd04:	000040b1 	.word	0x000040b1

0000dd08 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    dd08:	b580      	push	{r7, lr}
    dd0a:	b082      	sub	sp, #8
    dd0c:	af00      	add	r7, sp, #0
    dd0e:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    dd10:	4b0f      	ldr	r3, [pc, #60]	; (dd50 <usbdc_start+0x48>)
    dd12:	7e9b      	ldrb	r3, [r3, #26]
    dd14:	2b00      	cmp	r3, #0
    dd16:	d002      	beq.n	dd1e <usbdc_start+0x16>
		return ERR_BUSY;
    dd18:	f06f 0303 	mvn.w	r3, #3
    dd1c:	e013      	b.n	dd46 <usbdc_start+0x3e>
	}

	if (desces) {
    dd1e:	687b      	ldr	r3, [r7, #4]
    dd20:	2b00      	cmp	r3, #0
    dd22:	d00e      	beq.n	dd42 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    dd24:	4a0a      	ldr	r2, [pc, #40]	; (dd50 <usbdc_start+0x48>)
    dd26:	687b      	ldr	r3, [r7, #4]
    dd28:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    dd2a:	687b      	ldr	r3, [r7, #4]
    dd2c:	681b      	ldr	r3, [r3, #0]
    dd2e:	79da      	ldrb	r2, [r3, #7]
    dd30:	4b07      	ldr	r3, [pc, #28]	; (dd50 <usbdc_start+0x48>)
    dd32:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    dd34:	4b06      	ldr	r3, [pc, #24]	; (dd50 <usbdc_start+0x48>)
    dd36:	2201      	movs	r2, #1
    dd38:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    dd3a:	4b06      	ldr	r3, [pc, #24]	; (dd54 <usbdc_start+0x4c>)
    dd3c:	4798      	blx	r3
	return ERR_NONE;
    dd3e:	2300      	movs	r3, #0
    dd40:	e001      	b.n	dd46 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    dd42:	f06f 0308 	mvn.w	r3, #8
}
    dd46:	4618      	mov	r0, r3
    dd48:	3708      	adds	r7, #8
    dd4a:	46bd      	mov	sp, r7
    dd4c:	bd80      	pop	{r7, pc}
    dd4e:	bf00      	nop
    dd50:	2000108c 	.word	0x2000108c
    dd54:	00003afd 	.word	0x00003afd

0000dd58 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    dd58:	b580      	push	{r7, lr}
    dd5a:	af00      	add	r7, sp, #0
	usb_d_attach();
    dd5c:	4b01      	ldr	r3, [pc, #4]	; (dd64 <usbdc_attach+0xc>)
    dd5e:	4798      	blx	r3
}
    dd60:	bf00      	nop
    dd62:	bd80      	pop	{r7, pc}
    dd64:	00003b11 	.word	0x00003b11

0000dd68 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    dd68:	b480      	push	{r7}
    dd6a:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    dd6c:	4b03      	ldr	r3, [pc, #12]	; (dd7c <usbdc_get_ctrl_buffer+0x14>)
    dd6e:	695b      	ldr	r3, [r3, #20]
}
    dd70:	4618      	mov	r0, r3
    dd72:	46bd      	mov	sp, r7
    dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
    dd78:	4770      	bx	lr
    dd7a:	bf00      	nop
    dd7c:	2000108c 	.word	0x2000108c

0000dd80 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    dd80:	b480      	push	{r7}
    dd82:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    dd84:	4b07      	ldr	r3, [pc, #28]	; (dda4 <usbdc_get_state+0x24>)
    dd86:	7e9b      	ldrb	r3, [r3, #26]
    dd88:	f003 0310 	and.w	r3, r3, #16
    dd8c:	2b00      	cmp	r3, #0
    dd8e:	d001      	beq.n	dd94 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    dd90:	2310      	movs	r3, #16
    dd92:	e001      	b.n	dd98 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    dd94:	4b03      	ldr	r3, [pc, #12]	; (dda4 <usbdc_get_state+0x24>)
    dd96:	7e9b      	ldrb	r3, [r3, #26]
}
    dd98:	4618      	mov	r0, r3
    dd9a:	46bd      	mov	sp, r7
    dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    dda0:	4770      	bx	lr
    dda2:	bf00      	nop
    dda4:	2000108c 	.word	0x2000108c

0000dda8 <usb_get_u16>:
{
    dda8:	b480      	push	{r7}
    ddaa:	b083      	sub	sp, #12
    ddac:	af00      	add	r7, sp, #0
    ddae:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    ddb0:	687b      	ldr	r3, [r7, #4]
    ddb2:	781b      	ldrb	r3, [r3, #0]
    ddb4:	b29a      	uxth	r2, r3
    ddb6:	687b      	ldr	r3, [r7, #4]
    ddb8:	3301      	adds	r3, #1
    ddba:	781b      	ldrb	r3, [r3, #0]
    ddbc:	b29b      	uxth	r3, r3
    ddbe:	021b      	lsls	r3, r3, #8
    ddc0:	b29b      	uxth	r3, r3
    ddc2:	4413      	add	r3, r2
    ddc4:	b29b      	uxth	r3, r3
}
    ddc6:	4618      	mov	r0, r3
    ddc8:	370c      	adds	r7, #12
    ddca:	46bd      	mov	sp, r7
    ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    ddd0:	4770      	bx	lr

0000ddd2 <usb_desc_len>:
{
    ddd2:	b480      	push	{r7}
    ddd4:	b083      	sub	sp, #12
    ddd6:	af00      	add	r7, sp, #0
    ddd8:	6078      	str	r0, [r7, #4]
	return desc[0];
    ddda:	687b      	ldr	r3, [r7, #4]
    dddc:	781b      	ldrb	r3, [r3, #0]
}
    ddde:	4618      	mov	r0, r3
    dde0:	370c      	adds	r7, #12
    dde2:	46bd      	mov	sp, r7
    dde4:	f85d 7b04 	ldr.w	r7, [sp], #4
    dde8:	4770      	bx	lr

0000ddea <usb_desc_type>:
{
    ddea:	b480      	push	{r7}
    ddec:	b083      	sub	sp, #12
    ddee:	af00      	add	r7, sp, #0
    ddf0:	6078      	str	r0, [r7, #4]
	return desc[1];
    ddf2:	687b      	ldr	r3, [r7, #4]
    ddf4:	3301      	adds	r3, #1
    ddf6:	781b      	ldrb	r3, [r3, #0]
}
    ddf8:	4618      	mov	r0, r3
    ddfa:	370c      	adds	r7, #12
    ddfc:	46bd      	mov	sp, r7
    ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    de02:	4770      	bx	lr

0000de04 <usb_desc_next>:
{
    de04:	b580      	push	{r7, lr}
    de06:	b082      	sub	sp, #8
    de08:	af00      	add	r7, sp, #0
    de0a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    de0c:	6878      	ldr	r0, [r7, #4]
    de0e:	4b05      	ldr	r3, [pc, #20]	; (de24 <usb_desc_next+0x20>)
    de10:	4798      	blx	r3
    de12:	4603      	mov	r3, r0
    de14:	461a      	mov	r2, r3
    de16:	687b      	ldr	r3, [r7, #4]
    de18:	4413      	add	r3, r2
}
    de1a:	4618      	mov	r0, r3
    de1c:	3708      	adds	r7, #8
    de1e:	46bd      	mov	sp, r7
    de20:	bd80      	pop	{r7, pc}
    de22:	bf00      	nop
    de24:	0000ddd3 	.word	0x0000ddd3

0000de28 <usb_cfg_desc_total_len>:
{
    de28:	b580      	push	{r7, lr}
    de2a:	b082      	sub	sp, #8
    de2c:	af00      	add	r7, sp, #0
    de2e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    de30:	687b      	ldr	r3, [r7, #4]
    de32:	3302      	adds	r3, #2
    de34:	4618      	mov	r0, r3
    de36:	4b03      	ldr	r3, [pc, #12]	; (de44 <usb_cfg_desc_total_len+0x1c>)
    de38:	4798      	blx	r3
    de3a:	4603      	mov	r3, r0
}
    de3c:	4618      	mov	r0, r3
    de3e:	3708      	adds	r7, #8
    de40:	46bd      	mov	sp, r7
    de42:	bd80      	pop	{r7, pc}
    de44:	0000dda9 	.word	0x0000dda9

0000de48 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    de48:	b580      	push	{r7, lr}
    de4a:	b082      	sub	sp, #8
    de4c:	af00      	add	r7, sp, #0
    de4e:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    de50:	6878      	ldr	r0, [r7, #4]
    de52:	4b05      	ldr	r3, [pc, #20]	; (de68 <usb_cfg_desc_next+0x20>)
    de54:	4798      	blx	r3
    de56:	4603      	mov	r3, r0
    de58:	461a      	mov	r2, r3
    de5a:	687b      	ldr	r3, [r7, #4]
    de5c:	4413      	add	r3, r2
}
    de5e:	4618      	mov	r0, r3
    de60:	3708      	adds	r7, #8
    de62:	46bd      	mov	sp, r7
    de64:	bd80      	pop	{r7, pc}
    de66:	bf00      	nop
    de68:	0000de29 	.word	0x0000de29

0000de6c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    de6c:	b580      	push	{r7, lr}
    de6e:	b084      	sub	sp, #16
    de70:	af00      	add	r7, sp, #0
    de72:	60f8      	str	r0, [r7, #12]
    de74:	60b9      	str	r1, [r7, #8]
    de76:	4613      	mov	r3, r2
    de78:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    de7a:	e015      	b.n	dea8 <usb_find_desc+0x3c>
		_desc_len_check();
    de7c:	68f8      	ldr	r0, [r7, #12]
    de7e:	4b0f      	ldr	r3, [pc, #60]	; (debc <usb_find_desc+0x50>)
    de80:	4798      	blx	r3
    de82:	4603      	mov	r3, r0
    de84:	2b01      	cmp	r3, #1
    de86:	d801      	bhi.n	de8c <usb_find_desc+0x20>
    de88:	2300      	movs	r3, #0
    de8a:	e012      	b.n	deb2 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    de8c:	68f8      	ldr	r0, [r7, #12]
    de8e:	4b0c      	ldr	r3, [pc, #48]	; (dec0 <usb_find_desc+0x54>)
    de90:	4798      	blx	r3
    de92:	4603      	mov	r3, r0
    de94:	461a      	mov	r2, r3
    de96:	79fb      	ldrb	r3, [r7, #7]
    de98:	4293      	cmp	r3, r2
    de9a:	d101      	bne.n	dea0 <usb_find_desc+0x34>
			return desc;
    de9c:	68fb      	ldr	r3, [r7, #12]
    de9e:	e008      	b.n	deb2 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    dea0:	68f8      	ldr	r0, [r7, #12]
    dea2:	4b08      	ldr	r3, [pc, #32]	; (dec4 <usb_find_desc+0x58>)
    dea4:	4798      	blx	r3
    dea6:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    dea8:	68fa      	ldr	r2, [r7, #12]
    deaa:	68bb      	ldr	r3, [r7, #8]
    deac:	429a      	cmp	r2, r3
    deae:	d3e5      	bcc.n	de7c <usb_find_desc+0x10>
	}
	return NULL;
    deb0:	2300      	movs	r3, #0
}
    deb2:	4618      	mov	r0, r3
    deb4:	3710      	adds	r7, #16
    deb6:	46bd      	mov	sp, r7
    deb8:	bd80      	pop	{r7, pc}
    deba:	bf00      	nop
    debc:	0000ddd3 	.word	0x0000ddd3
    dec0:	0000ddeb 	.word	0x0000ddeb
    dec4:	0000de05 	.word	0x0000de05

0000dec8 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    dec8:	b580      	push	{r7, lr}
    deca:	b082      	sub	sp, #8
    decc:	af00      	add	r7, sp, #0
    dece:	6078      	str	r0, [r7, #4]
    ded0:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    ded2:	e019      	b.n	df08 <usb_find_ep_desc+0x40>
		_desc_len_check();
    ded4:	6878      	ldr	r0, [r7, #4]
    ded6:	4b12      	ldr	r3, [pc, #72]	; (df20 <usb_find_ep_desc+0x58>)
    ded8:	4798      	blx	r3
    deda:	4603      	mov	r3, r0
    dedc:	2b01      	cmp	r3, #1
    dede:	d801      	bhi.n	dee4 <usb_find_ep_desc+0x1c>
    dee0:	2300      	movs	r3, #0
    dee2:	e018      	b.n	df16 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    dee4:	6878      	ldr	r0, [r7, #4]
    dee6:	4b0f      	ldr	r3, [pc, #60]	; (df24 <usb_find_ep_desc+0x5c>)
    dee8:	4798      	blx	r3
    deea:	4603      	mov	r3, r0
    deec:	2b04      	cmp	r3, #4
    deee:	d010      	beq.n	df12 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    def0:	6878      	ldr	r0, [r7, #4]
    def2:	4b0c      	ldr	r3, [pc, #48]	; (df24 <usb_find_ep_desc+0x5c>)
    def4:	4798      	blx	r3
    def6:	4603      	mov	r3, r0
    def8:	2b05      	cmp	r3, #5
    defa:	d101      	bne.n	df00 <usb_find_ep_desc+0x38>
			return desc;
    defc:	687b      	ldr	r3, [r7, #4]
    defe:	e00a      	b.n	df16 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    df00:	6878      	ldr	r0, [r7, #4]
    df02:	4b09      	ldr	r3, [pc, #36]	; (df28 <usb_find_ep_desc+0x60>)
    df04:	4798      	blx	r3
    df06:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    df08:	687a      	ldr	r2, [r7, #4]
    df0a:	683b      	ldr	r3, [r7, #0]
    df0c:	429a      	cmp	r2, r3
    df0e:	d3e1      	bcc.n	ded4 <usb_find_ep_desc+0xc>
    df10:	e000      	b.n	df14 <usb_find_ep_desc+0x4c>
			break;
    df12:	bf00      	nop
	}
	return NULL;
    df14:	2300      	movs	r3, #0
}
    df16:	4618      	mov	r0, r3
    df18:	3708      	adds	r7, #8
    df1a:	46bd      	mov	sp, r7
    df1c:	bd80      	pop	{r7, pc}
    df1e:	bf00      	nop
    df20:	0000ddd3 	.word	0x0000ddd3
    df24:	0000ddeb 	.word	0x0000ddeb
    df28:	0000de05 	.word	0x0000de05

0000df2c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    df2c:	b580      	push	{r7, lr}
    df2e:	b084      	sub	sp, #16
    df30:	af00      	add	r7, sp, #0
    df32:	60f8      	str	r0, [r7, #12]
    df34:	60b9      	str	r1, [r7, #8]
    df36:	4613      	mov	r3, r2
    df38:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    df3a:	2202      	movs	r2, #2
    df3c:	68b9      	ldr	r1, [r7, #8]
    df3e:	68f8      	ldr	r0, [r7, #12]
    df40:	4b15      	ldr	r3, [pc, #84]	; (df98 <usb_find_cfg_desc+0x6c>)
    df42:	4798      	blx	r3
    df44:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    df46:	68fb      	ldr	r3, [r7, #12]
    df48:	2b00      	cmp	r3, #0
    df4a:	d11a      	bne.n	df82 <usb_find_cfg_desc+0x56>
		return NULL;
    df4c:	2300      	movs	r3, #0
    df4e:	e01f      	b.n	df90 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    df50:	68f8      	ldr	r0, [r7, #12]
    df52:	4b12      	ldr	r3, [pc, #72]	; (df9c <usb_find_cfg_desc+0x70>)
    df54:	4798      	blx	r3
    df56:	4603      	mov	r3, r0
    df58:	2b01      	cmp	r3, #1
    df5a:	d801      	bhi.n	df60 <usb_find_cfg_desc+0x34>
    df5c:	2300      	movs	r3, #0
    df5e:	e017      	b.n	df90 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    df60:	68fb      	ldr	r3, [r7, #12]
    df62:	3301      	adds	r3, #1
    df64:	781b      	ldrb	r3, [r3, #0]
    df66:	2b02      	cmp	r3, #2
    df68:	d110      	bne.n	df8c <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    df6a:	68fb      	ldr	r3, [r7, #12]
    df6c:	3305      	adds	r3, #5
    df6e:	781b      	ldrb	r3, [r3, #0]
    df70:	79fa      	ldrb	r2, [r7, #7]
    df72:	429a      	cmp	r2, r3
    df74:	d101      	bne.n	df7a <usb_find_cfg_desc+0x4e>
			return desc;
    df76:	68fb      	ldr	r3, [r7, #12]
    df78:	e00a      	b.n	df90 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    df7a:	68f8      	ldr	r0, [r7, #12]
    df7c:	4b08      	ldr	r3, [pc, #32]	; (dfa0 <usb_find_cfg_desc+0x74>)
    df7e:	4798      	blx	r3
    df80:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    df82:	68fa      	ldr	r2, [r7, #12]
    df84:	68bb      	ldr	r3, [r7, #8]
    df86:	429a      	cmp	r2, r3
    df88:	d3e2      	bcc.n	df50 <usb_find_cfg_desc+0x24>
    df8a:	e000      	b.n	df8e <usb_find_cfg_desc+0x62>
			break;
    df8c:	bf00      	nop
	}
	return NULL;
    df8e:	2300      	movs	r3, #0
}
    df90:	4618      	mov	r0, r3
    df92:	3710      	adds	r7, #16
    df94:	46bd      	mov	sp, r7
    df96:	bd80      	pop	{r7, pc}
    df98:	0000de6d 	.word	0x0000de6d
    df9c:	0000ddd3 	.word	0x0000ddd3
    dfa0:	0000de49 	.word	0x0000de49

0000dfa4 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    dfa4:	b580      	push	{r7, lr}
    dfa6:	b086      	sub	sp, #24
    dfa8:	af00      	add	r7, sp, #0
    dfaa:	60f8      	str	r0, [r7, #12]
    dfac:	60b9      	str	r1, [r7, #8]
    dfae:	4613      	mov	r3, r2
    dfb0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    dfb2:	2300      	movs	r3, #0
    dfb4:	75fb      	strb	r3, [r7, #23]
    dfb6:	e020      	b.n	dffa <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    dfb8:	2203      	movs	r2, #3
    dfba:	68b9      	ldr	r1, [r7, #8]
    dfbc:	68f8      	ldr	r0, [r7, #12]
    dfbe:	4b13      	ldr	r3, [pc, #76]	; (e00c <usb_find_str_desc+0x68>)
    dfc0:	4798      	blx	r3
    dfc2:	60f8      	str	r0, [r7, #12]
		if (desc) {
    dfc4:	68fb      	ldr	r3, [r7, #12]
    dfc6:	2b00      	cmp	r3, #0
    dfc8:	d015      	beq.n	dff6 <usb_find_str_desc+0x52>
			_desc_len_check();
    dfca:	68f8      	ldr	r0, [r7, #12]
    dfcc:	4b10      	ldr	r3, [pc, #64]	; (e010 <usb_find_str_desc+0x6c>)
    dfce:	4798      	blx	r3
    dfd0:	4603      	mov	r3, r0
    dfd2:	2b01      	cmp	r3, #1
    dfd4:	d801      	bhi.n	dfda <usb_find_str_desc+0x36>
    dfd6:	2300      	movs	r3, #0
    dfd8:	e014      	b.n	e004 <usb_find_str_desc+0x60>
			if (i == str_index) {
    dfda:	7dfa      	ldrb	r2, [r7, #23]
    dfdc:	79fb      	ldrb	r3, [r7, #7]
    dfde:	429a      	cmp	r2, r3
    dfe0:	d101      	bne.n	dfe6 <usb_find_str_desc+0x42>
				return desc;
    dfe2:	68fb      	ldr	r3, [r7, #12]
    dfe4:	e00e      	b.n	e004 <usb_find_str_desc+0x60>
			}
			i++;
    dfe6:	7dfb      	ldrb	r3, [r7, #23]
    dfe8:	3301      	adds	r3, #1
    dfea:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    dfec:	68f8      	ldr	r0, [r7, #12]
    dfee:	4b09      	ldr	r3, [pc, #36]	; (e014 <usb_find_str_desc+0x70>)
    dff0:	4798      	blx	r3
    dff2:	60f8      	str	r0, [r7, #12]
    dff4:	e001      	b.n	dffa <usb_find_str_desc+0x56>
		} else {
			return NULL;
    dff6:	2300      	movs	r3, #0
    dff8:	e004      	b.n	e004 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    dffa:	68fa      	ldr	r2, [r7, #12]
    dffc:	68bb      	ldr	r3, [r7, #8]
    dffe:	429a      	cmp	r2, r3
    e000:	d3da      	bcc.n	dfb8 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    e002:	2300      	movs	r3, #0
}
    e004:	4618      	mov	r0, r3
    e006:	3718      	adds	r7, #24
    e008:	46bd      	mov	sp, r7
    e00a:	bd80      	pop	{r7, pc}
    e00c:	0000de6d 	.word	0x0000de6d
    e010:	0000ddd3 	.word	0x0000ddd3
    e014:	0000de05 	.word	0x0000de05

0000e018 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:

// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    e018:	b480      	push	{r7}
    e01a:	b083      	sub	sp, #12
    e01c:	af00      	add	r7, sp, #0
    e01e:	6078      	str	r0, [r7, #4]
    e020:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    e022:	687b      	ldr	r3, [r7, #4]
    e024:	683a      	ldr	r2, [r7, #0]
    e026:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    e028:	687b      	ldr	r3, [r7, #4]
    e02a:	4618      	mov	r0, r3
    e02c:	370c      	adds	r7, #12
    e02e:	46bd      	mov	sp, r7
    e030:	bc80      	pop	{r7}
    e032:	4770      	bx	lr

0000e034 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    e034:	b480      	push	{r7}
    e036:	b083      	sub	sp, #12
    e038:	af00      	add	r7, sp, #0
    e03a:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    e03c:	687b      	ldr	r3, [r7, #4]
    e03e:	4618      	mov	r0, r3
    e040:	370c      	adds	r7, #12
    e042:	46bd      	mov	sp, r7
    e044:	bc80      	pop	{r7}
    e046:	4770      	bx	lr

0000e048 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    e048:	b580      	push	{r7, lr}
    e04a:	b084      	sub	sp, #16
    e04c:	af00      	add	r7, sp, #0
    e04e:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    e050:	687b      	ldr	r3, [r7, #4]
    e052:	4a14      	ldr	r2, [pc, #80]	; (e0a4 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    e054:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    e056:	687b      	ldr	r3, [r7, #4]
    e058:	4a12      	ldr	r2, [pc, #72]	; (e0a4 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    e05a:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    e05c:	687b      	ldr	r3, [r7, #4]
    e05e:	691a      	ldr	r2, [r3, #16]
    e060:	687b      	ldr	r3, [r7, #4]
    e062:	330c      	adds	r3, #12
    e064:	4619      	mov	r1, r3
    e066:	4610      	mov	r0, r2
    e068:	4b0f      	ldr	r3, [pc, #60]	; (e0a8 <_ZN14I2C_Sync_Class4InitEv+0x60>)
    e06a:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    e06c:	687b      	ldr	r3, [r7, #4]
    e06e:	691b      	ldr	r3, [r3, #16]
    e070:	4618      	mov	r0, r3
    e072:	4b0e      	ldr	r3, [pc, #56]	; (e0ac <_ZN14I2C_Sync_Class4InitEv+0x64>)
    e074:	4798      	blx	r3
    e076:	4603      	mov	r3, r0
    e078:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
    e07a:	7bfb      	ldrb	r3, [r7, #15]
    e07c:	2b00      	cmp	r3, #0
    e07e:	bf0c      	ite	eq
    e080:	2301      	moveq	r3, #1
    e082:	2300      	movne	r3, #0
    e084:	b2da      	uxtb	r2, r3
    e086:	687b      	ldr	r3, [r7, #4]
    e088:	725a      	strb	r2, [r3, #9]
	initiated=isOK;
    e08a:	687b      	ldr	r3, [r7, #4]
    e08c:	7a5b      	ldrb	r3, [r3, #9]
    e08e:	b2da      	uxtb	r2, r3
    e090:	687b      	ldr	r3, [r7, #4]
    e092:	721a      	strb	r2, [r3, #8]
	return isOK;
    e094:	687b      	ldr	r3, [r7, #4]
    e096:	7a5b      	ldrb	r3, [r3, #9]
    e098:	b2db      	uxtb	r3, r3
	
}
    e09a:	4618      	mov	r0, r3
    e09c:	3710      	adds	r7, #16
    e09e:	46bd      	mov	sp, r7
    e0a0:	bd80      	pop	{r7, pc}
    e0a2:	bf00      	nop
    e0a4:	200010ac 	.word	0x200010ac
    e0a8:	00002d0f 	.word	0x00002d0f
    e0ac:	00002cb5 	.word	0x00002cb5

0000e0b0 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    e0b0:	b580      	push	{r7, lr}
    e0b2:	b082      	sub	sp, #8
    e0b4:	af00      	add	r7, sp, #0
    e0b6:	6078      	str	r0, [r7, #4]
    e0b8:	460b      	mov	r3, r1
    e0ba:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    e0bc:	687b      	ldr	r3, [r7, #4]
    e0be:	691b      	ldr	r3, [r3, #16]
    e0c0:	78fa      	ldrb	r2, [r7, #3]
    e0c2:	b211      	sxth	r1, r2
    e0c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e0c8:	4618      	mov	r0, r3
    e0ca:	4b03      	ldr	r3, [pc, #12]	; (e0d8 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    e0cc:	4798      	blx	r3
    e0ce:	4603      	mov	r3, r0
}
    e0d0:	4618      	mov	r0, r3
    e0d2:	3708      	adds	r7, #8
    e0d4:	46bd      	mov	sp, r7
    e0d6:	bd80      	pop	{r7, pc}
    e0d8:	00002cd5 	.word	0x00002cd5

0000e0dc <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    e0dc:	b580      	push	{r7, lr}
    e0de:	b086      	sub	sp, #24
    e0e0:	af00      	add	r7, sp, #0
    e0e2:	60f8      	str	r0, [r7, #12]
    e0e4:	60b9      	str	r1, [r7, #8]
    e0e6:	4613      	mov	r3, r2
    e0e8:	80fb      	strh	r3, [r7, #6]
	//Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    e0ea:	68fb      	ldr	r3, [r7, #12]
    e0ec:	68db      	ldr	r3, [r3, #12]
    e0ee:	88fa      	ldrh	r2, [r7, #6]
    e0f0:	68b9      	ldr	r1, [r7, #8]
    e0f2:	4618      	mov	r0, r3
    e0f4:	4b03      	ldr	r3, [pc, #12]	; (e104 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    e0f6:	4798      	blx	r3
    e0f8:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    e0fa:	697b      	ldr	r3, [r7, #20]
}
    e0fc:	4618      	mov	r0, r3
    e0fe:	3718      	adds	r7, #24
    e100:	46bd      	mov	sp, r7
    e102:	bd80      	pop	{r7, pc}
    e104:	0000fea9 	.word	0x0000fea9

0000e108 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    e108:	b580      	push	{r7, lr}
    e10a:	b086      	sub	sp, #24
    e10c:	af00      	add	r7, sp, #0
    e10e:	60f8      	str	r0, [r7, #12]
    e110:	60b9      	str	r1, [r7, #8]
    e112:	4613      	mov	r3, r2
    e114:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    e116:	68fb      	ldr	r3, [r7, #12]
    e118:	68db      	ldr	r3, [r3, #12]
    e11a:	88fa      	ldrh	r2, [r7, #6]
    e11c:	68b9      	ldr	r1, [r7, #8]
    e11e:	4618      	mov	r0, r3
    e120:	4b03      	ldr	r3, [pc, #12]	; (e130 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    e122:	4798      	blx	r3
    e124:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    e126:	697b      	ldr	r3, [r7, #20]
}
    e128:	4618      	mov	r0, r3
    e12a:	3718      	adds	r7, #24
    e12c:	46bd      	mov	sp, r7
    e12e:	bd80      	pop	{r7, pc}
    e130:	0000fef9 	.word	0x0000fef9

0000e134 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    e134:	b480      	push	{r7}
    e136:	b083      	sub	sp, #12
    e138:	af00      	add	r7, sp, #0
    e13a:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    e13c:	687b      	ldr	r3, [r7, #4]
    e13e:	4618      	mov	r0, r3
    e140:	370c      	adds	r7, #12
    e142:	46bd      	mov	sp, r7
    e144:	bc80      	pop	{r7}
    e146:	4770      	bx	lr

0000e148 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    e148:	b480      	push	{r7}
    e14a:	b083      	sub	sp, #12
    e14c:	af00      	add	r7, sp, #0
    e14e:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    e150:	687b      	ldr	r3, [r7, #4]
    e152:	4618      	mov	r0, r3
    e154:	370c      	adds	r7, #12
    e156:	46bd      	mov	sp, r7
    e158:	bc80      	pop	{r7}
    e15a:	4770      	bx	lr

0000e15c <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
	//i2cClass=i2c;
	isOK=i2cClass->isOK;
	return isOK;
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    e15c:	b480      	push	{r7}
    e15e:	b085      	sub	sp, #20
    e160:	af00      	add	r7, sp, #0
    e162:	60f8      	str	r0, [r7, #12]
    e164:	460b      	mov	r3, r1
    e166:	607a      	str	r2, [r7, #4]
    e168:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    e16a:	687b      	ldr	r3, [r7, #4]
    e16c:	681a      	ldr	r2, [r3, #0]
    e16e:	68fb      	ldr	r3, [r7, #12]
    e170:	615a      	str	r2, [r3, #20]
	rxBuffer=i2c->rxBuffer;
    e172:	687b      	ldr	r3, [r7, #4]
    e174:	685a      	ldr	r2, [r3, #4]
    e176:	68fb      	ldr	r3, [r7, #12]
    e178:	619a      	str	r2, [r3, #24]
	i2cAddress=addr;
    e17a:	68fb      	ldr	r3, [r7, #12]
    e17c:	7afa      	ldrb	r2, [r7, #11]
    e17e:	731a      	strb	r2, [r3, #12]
	i2cClass=i2c;
    e180:	68fb      	ldr	r3, [r7, #12]
    e182:	687a      	ldr	r2, [r7, #4]
    e184:	611a      	str	r2, [r3, #16]
	isOK=i2cClass->isOK;
    e186:	68fb      	ldr	r3, [r7, #12]
    e188:	691b      	ldr	r3, [r3, #16]
    e18a:	7a5b      	ldrb	r3, [r3, #9]
    e18c:	b2da      	uxtb	r2, r3
    e18e:	68fb      	ldr	r3, [r7, #12]
    e190:	729a      	strb	r2, [r3, #10]
	return isOK;
    e192:	68fb      	ldr	r3, [r7, #12]
    e194:	7a9b      	ldrb	r3, [r3, #10]
    e196:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    e198:	4618      	mov	r0, r3
    e19a:	3714      	adds	r7, #20
    e19c:	46bd      	mov	sp, r7
    e19e:	bc80      	pop	{r7}
    e1a0:	4770      	bx	lr

0000e1a2 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    e1a2:	b480      	push	{r7}
    e1a4:	b083      	sub	sp, #12
    e1a6:	af00      	add	r7, sp, #0
    e1a8:	6078      	str	r0, [r7, #4]
    e1aa:	460b      	mov	r3, r1
    e1ac:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    e1ae:	78fb      	ldrb	r3, [r7, #3]
    e1b0:	f003 0307 	and.w	r3, r3, #7
    e1b4:	b2db      	uxtb	r3, r3
}
    e1b6:	4618      	mov	r0, r3
    e1b8:	370c      	adds	r7, #12
    e1ba:	46bd      	mov	sp, r7
    e1bc:	bc80      	pop	{r7}
    e1be:	4770      	bx	lr

0000e1c0 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    e1c0:	b480      	push	{r7}
    e1c2:	b083      	sub	sp, #12
    e1c4:	af00      	add	r7, sp, #0
    e1c6:	6078      	str	r0, [r7, #4]
    e1c8:	4608      	mov	r0, r1
    e1ca:	4611      	mov	r1, r2
    e1cc:	461a      	mov	r2, r3
    e1ce:	4603      	mov	r3, r0
    e1d0:	70fb      	strb	r3, [r7, #3]
    e1d2:	460b      	mov	r3, r1
    e1d4:	70bb      	strb	r3, [r7, #2]
    e1d6:	4613      	mov	r3, r2
    e1d8:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    e1da:	78fb      	ldrb	r3, [r7, #3]
    e1dc:	2b07      	cmp	r3, #7
    e1de:	dc01      	bgt.n	e1e4 <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    e1e0:	78bb      	ldrb	r3, [r7, #2]
    e1e2:	e000      	b.n	e1e6 <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    e1e4:	787b      	ldrb	r3, [r7, #1]
}
    e1e6:	4618      	mov	r0, r3
    e1e8:	370c      	adds	r7, #12
    e1ea:	46bd      	mov	sp, r7
    e1ec:	bc80      	pop	{r7}
    e1ee:	4770      	bx	lr

0000e1f0 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    e1f0:	b580      	push	{r7, lr}
    e1f2:	b082      	sub	sp, #8
    e1f4:	af00      	add	r7, sp, #0
    e1f6:	6078      	str	r0, [r7, #4]
    e1f8:	460b      	mov	r3, r1
    e1fa:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    e1fc:	687b      	ldr	r3, [r7, #4]
    e1fe:	691a      	ldr	r2, [r3, #16]
    e200:	687b      	ldr	r3, [r7, #4]
    e202:	7b1b      	ldrb	r3, [r3, #12]
    e204:	4619      	mov	r1, r3
    e206:	4610      	mov	r0, r2
    e208:	4b0b      	ldr	r3, [pc, #44]	; (e238 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    e20a:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    e20c:	687b      	ldr	r3, [r7, #4]
    e20e:	691b      	ldr	r3, [r3, #16]
    e210:	1cf9      	adds	r1, r7, #3
    e212:	2201      	movs	r2, #1
    e214:	4618      	mov	r0, r3
    e216:	4b09      	ldr	r3, [pc, #36]	; (e23c <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    e218:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    e21a:	687b      	ldr	r3, [r7, #4]
    e21c:	6918      	ldr	r0, [r3, #16]
    e21e:	687b      	ldr	r3, [r7, #4]
    e220:	3304      	adds	r3, #4
    e222:	2201      	movs	r2, #1
    e224:	4619      	mov	r1, r3
    e226:	4b06      	ldr	r3, [pc, #24]	; (e240 <_ZN14MCP23008_Class12readRegisterEh+0x50>)
    e228:	4798      	blx	r3

	return registerValue;
    e22a:	687b      	ldr	r3, [r7, #4]
    e22c:	791b      	ldrb	r3, [r3, #4]
}
    e22e:	4618      	mov	r0, r3
    e230:	3708      	adds	r7, #8
    e232:	46bd      	mov	sp, r7
    e234:	bd80      	pop	{r7, pc}
    e236:	bf00      	nop
    e238:	0000e0b1 	.word	0x0000e0b1
    e23c:	0000e0dd 	.word	0x0000e0dd
    e240:	0000e109 	.word	0x0000e109

0000e244 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    e244:	b580      	push	{r7, lr}
    e246:	b082      	sub	sp, #8
    e248:	af00      	add	r7, sp, #0
    e24a:	6078      	str	r0, [r7, #4]
	i2cClass->SetSlaveAddress(i2cAddress);
    e24c:	687b      	ldr	r3, [r7, #4]
    e24e:	691a      	ldr	r2, [r3, #16]
    e250:	687b      	ldr	r3, [r7, #4]
    e252:	7b1b      	ldrb	r3, [r3, #12]
    e254:	4619      	mov	r1, r3
    e256:	4610      	mov	r0, r2
    e258:	4b05      	ldr	r3, [pc, #20]	; (e270 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x2c>)
    e25a:	4798      	blx	r3
	return readRegister(MCP23008_GPIOA);
    e25c:	2109      	movs	r1, #9
    e25e:	6878      	ldr	r0, [r7, #4]
    e260:	4b04      	ldr	r3, [pc, #16]	; (e274 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    e262:	4798      	blx	r3
    e264:	4603      	mov	r3, r0
}
    e266:	4618      	mov	r0, r3
    e268:	3708      	adds	r7, #8
    e26a:	46bd      	mov	sp, r7
    e26c:	bd80      	pop	{r7, pc}
    e26e:	bf00      	nop
    e270:	0000e0b1 	.word	0x0000e0b1
    e274:	0000e1f1 	.word	0x0000e1f1

0000e278 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    e278:	b580      	push	{r7, lr}
    e27a:	b084      	sub	sp, #16
    e27c:	af00      	add	r7, sp, #0
    e27e:	6078      	str	r0, [r7, #4]
    e280:	460b      	mov	r3, r1
    e282:	70fb      	strb	r3, [r7, #3]
    e284:	4613      	mov	r3, r2
    e286:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    e288:	687b      	ldr	r3, [r7, #4]
    e28a:	691a      	ldr	r2, [r3, #16]
    e28c:	687b      	ldr	r3, [r7, #4]
    e28e:	7b1b      	ldrb	r3, [r3, #12]
    e290:	4619      	mov	r1, r3
    e292:	4610      	mov	r0, r2
    e294:	4b09      	ldr	r3, [pc, #36]	; (e2bc <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    e296:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    e298:	78fb      	ldrb	r3, [r7, #3]
    e29a:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    e29c:	78bb      	ldrb	r3, [r7, #2]
    e29e:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    e2a0:	687b      	ldr	r3, [r7, #4]
    e2a2:	691b      	ldr	r3, [r3, #16]
    e2a4:	f107 010c 	add.w	r1, r7, #12
    e2a8:	2202      	movs	r2, #2
    e2aa:	4618      	mov	r0, r3
    e2ac:	4b04      	ldr	r3, [pc, #16]	; (e2c0 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    e2ae:	4798      	blx	r3
    e2b0:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    e2b2:	4618      	mov	r0, r3
    e2b4:	3710      	adds	r7, #16
    e2b6:	46bd      	mov	sp, r7
    e2b8:	bd80      	pop	{r7, pc}
    e2ba:	bf00      	nop
    e2bc:	0000e0b1 	.word	0x0000e0b1
    e2c0:	0000e0dd 	.word	0x0000e0dd

0000e2c4 <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
    e2c4:	b580      	push	{r7, lr}
    e2c6:	b082      	sub	sp, #8
    e2c8:	af00      	add	r7, sp, #0
    e2ca:	6078      	str	r0, [r7, #4]
    e2cc:	460b      	mov	r3, r1
    e2ce:	70fb      	strb	r3, [r7, #3]
	i2cClass->SetSlaveAddress(i2cAddress);
    e2d0:	687b      	ldr	r3, [r7, #4]
    e2d2:	691a      	ldr	r2, [r3, #16]
    e2d4:	687b      	ldr	r3, [r7, #4]
    e2d6:	7b1b      	ldrb	r3, [r3, #12]
    e2d8:	4619      	mov	r1, r3
    e2da:	4610      	mov	r0, r2
    e2dc:	4b06      	ldr	r3, [pc, #24]	; (e2f8 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
    e2de:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
    e2e0:	78fb      	ldrb	r3, [r7, #3]
    e2e2:	461a      	mov	r2, r3
    e2e4:	2109      	movs	r1, #9
    e2e6:	6878      	ldr	r0, [r7, #4]
    e2e8:	4b04      	ldr	r3, [pc, #16]	; (e2fc <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
    e2ea:	4798      	blx	r3
	return v;
    e2ec:	78fb      	ldrb	r3, [r7, #3]
}
    e2ee:	4618      	mov	r0, r3
    e2f0:	3708      	adds	r7, #8
    e2f2:	46bd      	mov	sp, r7
    e2f4:	bd80      	pop	{r7, pc}
    e2f6:	bf00      	nop
    e2f8:	0000e0b1 	.word	0x0000e0b1
    e2fc:	0000e279 	.word	0x0000e279

0000e300 <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
    e300:	b580      	push	{r7, lr}
    e302:	b084      	sub	sp, #16
    e304:	af00      	add	r7, sp, #0
    e306:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    e308:	2300      	movs	r3, #0
    e30a:	73fb      	strb	r3, [r7, #15]
    e30c:	7bfb      	ldrb	r3, [r7, #15]
    e30e:	2b07      	cmp	r3, #7
    e310:	dc0f      	bgt.n	e332 <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    e312:	7bfb      	ldrb	r3, [r7, #15]
    e314:	2201      	movs	r2, #1
    e316:	4619      	mov	r1, r3
    e318:	6878      	ldr	r0, [r7, #4]
    e31a:	4b08      	ldr	r3, [pc, #32]	; (e33c <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    e31c:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    e31e:	7bfb      	ldrb	r3, [r7, #15]
    e320:	2201      	movs	r2, #1
    e322:	4619      	mov	r1, r3
    e324:	6878      	ldr	r0, [r7, #4]
    e326:	4b06      	ldr	r3, [pc, #24]	; (e340 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    e328:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    e32a:	7bfb      	ldrb	r3, [r7, #15]
    e32c:	3301      	adds	r3, #1
    e32e:	73fb      	strb	r3, [r7, #15]
    e330:	e7ec      	b.n	e30c <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    e332:	bf00      	nop
    e334:	3710      	adds	r7, #16
    e336:	46bd      	mov	sp, r7
    e338:	bd80      	pop	{r7, pc}
    e33a:	bf00      	nop
    e33c:	0000e479 	.word	0x0000e479
    e340:	0000e55d 	.word	0x0000e55d

0000e344 <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
    e344:	b580      	push	{r7, lr}
    e346:	b084      	sub	sp, #16
    e348:	af00      	add	r7, sp, #0
    e34a:	6078      	str	r0, [r7, #4]
    e34c:	460b      	mov	r3, r1
    e34e:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
    e350:	78fb      	ldrb	r3, [r7, #3]
    e352:	2b00      	cmp	r3, #0
    e354:	dd23      	ble.n	e39e <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
    e356:	2300      	movs	r3, #0
    e358:	73fb      	strb	r3, [r7, #15]
    e35a:	7bfb      	ldrb	r3, [r7, #15]
    e35c:	2b07      	cmp	r3, #7
    e35e:	dc21      	bgt.n	e3a4 <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
    e360:	78fa      	ldrb	r2, [r7, #3]
    e362:	7bfb      	ldrb	r3, [r7, #15]
    e364:	fa42 f303 	asr.w	r3, r2, r3
    e368:	f003 0301 	and.w	r3, r3, #1
    e36c:	2b00      	cmp	r3, #0
    e36e:	d00c      	beq.n	e38a <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
    e370:	7bfb      	ldrb	r3, [r7, #15]
    e372:	2201      	movs	r2, #1
    e374:	4619      	mov	r1, r3
    e376:	6878      	ldr	r0, [r7, #4]
    e378:	4b0c      	ldr	r3, [pc, #48]	; (e3ac <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    e37a:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
    e37c:	7bfb      	ldrb	r3, [r7, #15]
    e37e:	2201      	movs	r2, #1
    e380:	4619      	mov	r1, r3
    e382:	6878      	ldr	r0, [r7, #4]
    e384:	4b0a      	ldr	r3, [pc, #40]	; (e3b0 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
    e386:	4798      	blx	r3
    e388:	e005      	b.n	e396 <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
    e38a:	7bfb      	ldrb	r3, [r7, #15]
    e38c:	2200      	movs	r2, #0
    e38e:	4619      	mov	r1, r3
    e390:	6878      	ldr	r0, [r7, #4]
    e392:	4b06      	ldr	r3, [pc, #24]	; (e3ac <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    e394:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
    e396:	7bfb      	ldrb	r3, [r7, #15]
    e398:	3301      	adds	r3, #1
    e39a:	73fb      	strb	r3, [r7, #15]
    e39c:	e7dd      	b.n	e35a <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
    e39e:	6878      	ldr	r0, [r7, #4]
    e3a0:	4b04      	ldr	r3, [pc, #16]	; (e3b4 <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
    e3a2:	4798      	blx	r3
	}
	
}
    e3a4:	bf00      	nop
    e3a6:	3710      	adds	r7, #16
    e3a8:	46bd      	mov	sp, r7
    e3aa:	bd80      	pop	{r7, pc}
    e3ac:	0000e479 	.word	0x0000e479
    e3b0:	0000e55d 	.word	0x0000e55d
    e3b4:	0000e3b9 	.word	0x0000e3b9

0000e3b8 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
    e3b8:	b580      	push	{r7, lr}
    e3ba:	b084      	sub	sp, #16
    e3bc:	af00      	add	r7, sp, #0
    e3be:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    e3c0:	2300      	movs	r3, #0
    e3c2:	73fb      	strb	r3, [r7, #15]
    e3c4:	7bfb      	ldrb	r3, [r7, #15]
    e3c6:	2b07      	cmp	r3, #7
    e3c8:	dc09      	bgt.n	e3de <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    e3ca:	7bfb      	ldrb	r3, [r7, #15]
    e3cc:	2200      	movs	r2, #0
    e3ce:	4619      	mov	r1, r3
    e3d0:	6878      	ldr	r0, [r7, #4]
    e3d2:	4b05      	ldr	r3, [pc, #20]	; (e3e8 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    e3d4:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    e3d6:	7bfb      	ldrb	r3, [r7, #15]
    e3d8:	3301      	adds	r3, #1
    e3da:	73fb      	strb	r3, [r7, #15]
    e3dc:	e7f2      	b.n	e3c4 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    e3de:	bf00      	nop
    e3e0:	3710      	adds	r7, #16
    e3e2:	46bd      	mov	sp, r7
    e3e4:	bd80      	pop	{r7, pc}
    e3e6:	bf00      	nop
    e3e8:	0000e479 	.word	0x0000e479

0000e3ec <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    e3ec:	b580      	push	{r7, lr}
    e3ee:	b084      	sub	sp, #16
    e3f0:	af00      	add	r7, sp, #0
    e3f2:	6078      	str	r0, [r7, #4]
    e3f4:	4608      	mov	r0, r1
    e3f6:	4611      	mov	r1, r2
    e3f8:	461a      	mov	r2, r3
    e3fa:	4603      	mov	r3, r0
    e3fc:	70fb      	strb	r3, [r7, #3]
    e3fe:	460b      	mov	r3, r1
    e400:	70bb      	strb	r3, [r7, #2]
    e402:	4613      	mov	r3, r2
    e404:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    e406:	787b      	ldrb	r3, [r7, #1]
    e408:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    e40a:	78fb      	ldrb	r3, [r7, #3]
    e40c:	4619      	mov	r1, r3
    e40e:	6878      	ldr	r0, [r7, #4]
    e410:	4b16      	ldr	r3, [pc, #88]	; (e46c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    e412:	4798      	blx	r3
    e414:	4603      	mov	r3, r0
    e416:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    e418:	7bfb      	ldrb	r3, [r7, #15]
    e41a:	4619      	mov	r1, r3
    e41c:	6878      	ldr	r0, [r7, #4]
    e41e:	4b14      	ldr	r3, [pc, #80]	; (e470 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    e420:	4798      	blx	r3
    e422:	4603      	mov	r3, r0
    e424:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    e426:	78bb      	ldrb	r3, [r7, #2]
    e428:	2b00      	cmp	r3, #0
    e42a:	d009      	beq.n	e440 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    e42c:	7bba      	ldrb	r2, [r7, #14]
    e42e:	7b7b      	ldrb	r3, [r7, #13]
    e430:	4619      	mov	r1, r3
    e432:	2301      	movs	r3, #1
    e434:	408b      	lsls	r3, r1
    e436:	b2db      	uxtb	r3, r3
    e438:	4313      	orrs	r3, r2
    e43a:	b2db      	uxtb	r3, r3
    e43c:	73bb      	strb	r3, [r7, #14]
    e43e:	e00a      	b.n	e456 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    e440:	7bba      	ldrb	r2, [r7, #14]
    e442:	7b7b      	ldrb	r3, [r7, #13]
    e444:	4619      	mov	r1, r3
    e446:	2301      	movs	r3, #1
    e448:	408b      	lsls	r3, r1
    e44a:	b2db      	uxtb	r3, r3
    e44c:	43db      	mvns	r3, r3
    e44e:	b2db      	uxtb	r3, r3
    e450:	4013      	ands	r3, r2
    e452:	b2db      	uxtb	r3, r3
    e454:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    e456:	7bba      	ldrb	r2, [r7, #14]
    e458:	7bfb      	ldrb	r3, [r7, #15]
    e45a:	4619      	mov	r1, r3
    e45c:	6878      	ldr	r0, [r7, #4]
    e45e:	4b05      	ldr	r3, [pc, #20]	; (e474 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    e460:	4798      	blx	r3
}
    e462:	bf00      	nop
    e464:	3710      	adds	r7, #16
    e466:	46bd      	mov	sp, r7
    e468:	bd80      	pop	{r7, pc}
    e46a:	bf00      	nop
    e46c:	0000e1a3 	.word	0x0000e1a3
    e470:	0000e1f1 	.word	0x0000e1f1
    e474:	0000e279 	.word	0x0000e279

0000e478 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    e478:	b590      	push	{r4, r7, lr}
    e47a:	b085      	sub	sp, #20
    e47c:	af02      	add	r7, sp, #8
    e47e:	6078      	str	r0, [r7, #4]
    e480:	460b      	mov	r3, r1
    e482:	70fb      	strb	r3, [r7, #3]
    e484:	4613      	mov	r3, r2
    e486:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    e488:	78bb      	ldrb	r3, [r7, #2]
    e48a:	2b01      	cmp	r3, #1
    e48c:	bf0c      	ite	eq
    e48e:	2301      	moveq	r3, #1
    e490:	2300      	movne	r3, #0
    e492:	b2db      	uxtb	r3, r3
    e494:	461a      	mov	r2, r3
    e496:	78f9      	ldrb	r1, [r7, #3]
    e498:	2300      	movs	r3, #0
    e49a:	9300      	str	r3, [sp, #0]
    e49c:	2300      	movs	r3, #0
    e49e:	6878      	ldr	r0, [r7, #4]
    e4a0:	4c02      	ldr	r4, [pc, #8]	; (e4ac <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    e4a2:	47a0      	blx	r4
}
    e4a4:	bf00      	nop
    e4a6:	370c      	adds	r7, #12
    e4a8:	46bd      	mov	sp, r7
    e4aa:	bd90      	pop	{r4, r7, pc}
    e4ac:	0000e3ed 	.word	0x0000e3ed

0000e4b0 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
    e4b0:	b590      	push	{r4, r7, lr}
    e4b2:	b085      	sub	sp, #20
    e4b4:	af00      	add	r7, sp, #0
    e4b6:	6078      	str	r0, [r7, #4]
    e4b8:	460b      	mov	r3, r1
    e4ba:	70fb      	strb	r3, [r7, #3]
    e4bc:	4613      	mov	r3, r2
    e4be:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
    e4c0:	78fb      	ldrb	r3, [r7, #3]
    e4c2:	4619      	mov	r1, r3
    e4c4:	6878      	ldr	r0, [r7, #4]
    e4c6:	4b21      	ldr	r3, [pc, #132]	; (e54c <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
    e4c8:	4798      	blx	r3
    e4ca:	4603      	mov	r3, r0
    e4cc:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
    e4ce:	78f9      	ldrb	r1, [r7, #3]
    e4d0:	230a      	movs	r3, #10
    e4d2:	220a      	movs	r2, #10
    e4d4:	6878      	ldr	r0, [r7, #4]
    e4d6:	4c1e      	ldr	r4, [pc, #120]	; (e550 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    e4d8:	47a0      	blx	r4
    e4da:	4603      	mov	r3, r0
    e4dc:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
    e4de:	7bfb      	ldrb	r3, [r7, #15]
    e4e0:	4619      	mov	r1, r3
    e4e2:	6878      	ldr	r0, [r7, #4]
    e4e4:	4b1b      	ldr	r3, [pc, #108]	; (e554 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
    e4e6:	4798      	blx	r3
    e4e8:	4603      	mov	r3, r0
    e4ea:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
    e4ec:	78bb      	ldrb	r3, [r7, #2]
    e4ee:	2b00      	cmp	r3, #0
    e4f0:	d009      	beq.n	e506 <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
    e4f2:	7bba      	ldrb	r2, [r7, #14]
    e4f4:	7b7b      	ldrb	r3, [r7, #13]
    e4f6:	4619      	mov	r1, r3
    e4f8:	2301      	movs	r3, #1
    e4fa:	408b      	lsls	r3, r1
    e4fc:	b2db      	uxtb	r3, r3
    e4fe:	4313      	orrs	r3, r2
    e500:	b2db      	uxtb	r3, r3
    e502:	73bb      	strb	r3, [r7, #14]
    e504:	e00a      	b.n	e51c <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
    e506:	7bba      	ldrb	r2, [r7, #14]
    e508:	7b7b      	ldrb	r3, [r7, #13]
    e50a:	4619      	mov	r1, r3
    e50c:	2301      	movs	r3, #1
    e50e:	408b      	lsls	r3, r1
    e510:	b2db      	uxtb	r3, r3
    e512:	43db      	mvns	r3, r3
    e514:	b2db      	uxtb	r3, r3
    e516:	4013      	ands	r3, r2
    e518:	b2db      	uxtb	r3, r3
    e51a:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
    e51c:	78f9      	ldrb	r1, [r7, #3]
    e51e:	2309      	movs	r3, #9
    e520:	2209      	movs	r2, #9
    e522:	6878      	ldr	r0, [r7, #4]
    e524:	4c0a      	ldr	r4, [pc, #40]	; (e550 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    e526:	47a0      	blx	r4
    e528:	4603      	mov	r3, r0
    e52a:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
    e52c:	7bba      	ldrb	r2, [r7, #14]
    e52e:	7bfb      	ldrb	r3, [r7, #15]
    e530:	4619      	mov	r1, r3
    e532:	6878      	ldr	r0, [r7, #4]
    e534:	4b08      	ldr	r3, [pc, #32]	; (e558 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
    e536:	4798      	blx	r3
    e538:	4603      	mov	r3, r0
    e53a:	2b00      	cmp	r3, #0
    e53c:	bf0c      	ite	eq
    e53e:	2301      	moveq	r3, #1
    e540:	2300      	movne	r3, #0
    e542:	b2db      	uxtb	r3, r3
}
    e544:	4618      	mov	r0, r3
    e546:	3714      	adds	r7, #20
    e548:	46bd      	mov	sp, r7
    e54a:	bd90      	pop	{r4, r7, pc}
    e54c:	0000e1a3 	.word	0x0000e1a3
    e550:	0000e1c1 	.word	0x0000e1c1
    e554:	0000e1f1 	.word	0x0000e1f1
    e558:	0000e279 	.word	0x0000e279

0000e55c <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    e55c:	b590      	push	{r4, r7, lr}
    e55e:	b085      	sub	sp, #20
    e560:	af02      	add	r7, sp, #8
    e562:	6078      	str	r0, [r7, #4]
    e564:	460b      	mov	r3, r1
    e566:	70fb      	strb	r3, [r7, #3]
    e568:	4613      	mov	r3, r2
    e56a:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    e56c:	78ba      	ldrb	r2, [r7, #2]
    e56e:	78f9      	ldrb	r1, [r7, #3]
    e570:	2306      	movs	r3, #6
    e572:	9300      	str	r3, [sp, #0]
    e574:	2306      	movs	r3, #6
    e576:	6878      	ldr	r0, [r7, #4]
    e578:	4c02      	ldr	r4, [pc, #8]	; (e584 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    e57a:	47a0      	blx	r4
}
    e57c:	bf00      	nop
    e57e:	370c      	adds	r7, #12
    e580:	46bd      	mov	sp, r7
    e582:	bd90      	pop	{r4, r7, pc}
    e584:	0000e3ed 	.word	0x0000e3ed

0000e588 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    e588:	b480      	push	{r7}
    e58a:	b085      	sub	sp, #20
    e58c:	af00      	add	r7, sp, #0
    e58e:	60f8      	str	r0, [r7, #12]
    e590:	460b      	mov	r3, r1
    e592:	607a      	str	r2, [r7, #4]
    e594:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    e596:	7afb      	ldrb	r3, [r7, #11]
    e598:	68fa      	ldr	r2, [r7, #12]
    e59a:	01db      	lsls	r3, r3, #7
    e59c:	4413      	add	r3, r2
    e59e:	3318      	adds	r3, #24
    e5a0:	687a      	ldr	r2, [r7, #4]
    e5a2:	601a      	str	r2, [r3, #0]
}
    e5a4:	bf00      	nop
    e5a6:	3714      	adds	r7, #20
    e5a8:	46bd      	mov	sp, r7
    e5aa:	bc80      	pop	{r7}
    e5ac:	4770      	bx	lr

0000e5ae <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    e5ae:	b480      	push	{r7}
    e5b0:	b085      	sub	sp, #20
    e5b2:	af00      	add	r7, sp, #0
    e5b4:	60f8      	str	r0, [r7, #12]
    e5b6:	460b      	mov	r3, r1
    e5b8:	607a      	str	r2, [r7, #4]
    e5ba:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    e5bc:	7afb      	ldrb	r3, [r7, #11]
    e5be:	68fa      	ldr	r2, [r7, #12]
    e5c0:	01db      	lsls	r3, r3, #7
    e5c2:	4413      	add	r3, r2
    e5c4:	3314      	adds	r3, #20
    e5c6:	687a      	ldr	r2, [r7, #4]
    e5c8:	601a      	str	r2, [r3, #0]
}
    e5ca:	bf00      	nop
    e5cc:	3714      	adds	r7, #20
    e5ce:	46bd      	mov	sp, r7
    e5d0:	bc80      	pop	{r7}
    e5d2:	4770      	bx	lr

0000e5d4 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    e5d4:	b580      	push	{r7, lr}
    e5d6:	b082      	sub	sp, #8
    e5d8:	af00      	add	r7, sp, #0
    e5da:	4603      	mov	r3, r0
    e5dc:	6039      	str	r1, [r7, #0]
    e5de:	71fb      	strb	r3, [r7, #7]
    e5e0:	4613      	mov	r3, r2
    e5e2:	71bb      	strb	r3, [r7, #6]
	if (level) {
    e5e4:	79bb      	ldrb	r3, [r7, #6]
    e5e6:	2b00      	cmp	r3, #0
    e5e8:	d006      	beq.n	e5f8 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    e5ea:	79fb      	ldrb	r3, [r7, #7]
    e5ec:	683a      	ldr	r2, [r7, #0]
    e5ee:	4619      	mov	r1, r3
    e5f0:	4806      	ldr	r0, [pc, #24]	; (e60c <_gpio_set_level+0x38>)
    e5f2:	4b07      	ldr	r3, [pc, #28]	; (e610 <_gpio_set_level+0x3c>)
    e5f4:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    e5f6:	e005      	b.n	e604 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    e5f8:	79fb      	ldrb	r3, [r7, #7]
    e5fa:	683a      	ldr	r2, [r7, #0]
    e5fc:	4619      	mov	r1, r3
    e5fe:	4803      	ldr	r0, [pc, #12]	; (e60c <_gpio_set_level+0x38>)
    e600:	4b04      	ldr	r3, [pc, #16]	; (e614 <_gpio_set_level+0x40>)
    e602:	4798      	blx	r3
}
    e604:	bf00      	nop
    e606:	3708      	adds	r7, #8
    e608:	46bd      	mov	sp, r7
    e60a:	bd80      	pop	{r7, pc}
    e60c:	41008000 	.word	0x41008000
    e610:	0000e589 	.word	0x0000e589
    e614:	0000e5af 	.word	0x0000e5af

0000e618 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    e618:	b580      	push	{r7, lr}
    e61a:	b082      	sub	sp, #8
    e61c:	af00      	add	r7, sp, #0
    e61e:	4603      	mov	r3, r0
    e620:	460a      	mov	r2, r1
    e622:	71fb      	strb	r3, [r7, #7]
    e624:	4613      	mov	r3, r2
    e626:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    e628:	79fb      	ldrb	r3, [r7, #7]
    e62a:	115b      	asrs	r3, r3, #5
    e62c:	b2d8      	uxtb	r0, r3
    e62e:	79fb      	ldrb	r3, [r7, #7]
    e630:	f003 031f 	and.w	r3, r3, #31
    e634:	2201      	movs	r2, #1
    e636:	fa02 f303 	lsl.w	r3, r2, r3
    e63a:	79ba      	ldrb	r2, [r7, #6]
    e63c:	4619      	mov	r1, r3
    e63e:	4b03      	ldr	r3, [pc, #12]	; (e64c <gpio_set_pin_level+0x34>)
    e640:	4798      	blx	r3
}
    e642:	bf00      	nop
    e644:	3708      	adds	r7, #8
    e646:	46bd      	mov	sp, r7
    e648:	bd80      	pop	{r7, pc}
    e64a:	bf00      	nop
    e64c:	0000e5d5 	.word	0x0000e5d5

0000e650 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor>:
{
		appParameters=defaultParameters;
		spiPort=0;
		memoryMap=flashLayout;
} //FlashMemoryClass
FlashMemoryClass::FlashMemoryClass(spi_m_sync_descriptor *spi_des)
    e650:	b580      	push	{r7, lr}
    e652:	b082      	sub	sp, #8
    e654:	af00      	add	r7, sp, #0
    e656:	6078      	str	r0, [r7, #4]
    e658:	6039      	str	r1, [r7, #0]
    e65a:	687b      	ldr	r3, [r7, #4]
    e65c:	3318      	adds	r3, #24
    e65e:	4618      	mov	r0, r3
    e660:	4b08      	ldr	r3, [pc, #32]	; (e684 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x34>)
    e662:	4798      	blx	r3
{
	appParameters=defaultParameters;
    e664:	687b      	ldr	r3, [r7, #4]
    e666:	4a08      	ldr	r2, [pc, #32]	; (e688 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x38>)
    e668:	7812      	ldrb	r2, [r2, #0]
    e66a:	711a      	strb	r2, [r3, #4]
	spi_descriptor=spi_des;
    e66c:	687b      	ldr	r3, [r7, #4]
    e66e:	683a      	ldr	r2, [r7, #0]
    e670:	615a      	str	r2, [r3, #20]
	memoryMap=flashLayout;
    e672:	4b06      	ldr	r3, [pc, #24]	; (e68c <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x3c>)
    e674:	681a      	ldr	r2, [r3, #0]
    e676:	687b      	ldr	r3, [r7, #4]
    e678:	601a      	str	r2, [r3, #0]
} //FlashMemoryClass
    e67a:	687b      	ldr	r3, [r7, #4]
    e67c:	4618      	mov	r0, r3
    e67e:	3708      	adds	r7, #8
    e680:	46bd      	mov	sp, r7
    e682:	bd80      	pop	{r7, pc}
    e684:	0000fb25 	.word	0x0000fb25
    e688:	00010798 	.word	0x00010798
    e68c:	2000112c 	.word	0x2000112c

0000e690 <_ZN16FlashMemoryClassD1Ev>:

// default destructor
FlashMemoryClass::~FlashMemoryClass()
    e690:	b580      	push	{r7, lr}
    e692:	b082      	sub	sp, #8
    e694:	af00      	add	r7, sp, #0
    e696:	6078      	str	r0, [r7, #4]
    e698:	687b      	ldr	r3, [r7, #4]
    e69a:	3318      	adds	r3, #24
    e69c:	4618      	mov	r0, r3
    e69e:	4b03      	ldr	r3, [pc, #12]	; (e6ac <_ZN16FlashMemoryClassD1Ev+0x1c>)
    e6a0:	4798      	blx	r3
{
} //~FlashMemoryClass
    e6a2:	687b      	ldr	r3, [r7, #4]
    e6a4:	4618      	mov	r0, r3
    e6a6:	3708      	adds	r7, #8
    e6a8:	46bd      	mov	sp, r7
    e6aa:	bd80      	pop	{r7, pc}
    e6ac:	0000fb45 	.word	0x0000fb45

0000e6b0 <_ZN16FlashMemoryClass9flashOpenEv>:
}



void FlashMemoryClass::flashOpen(void)
{
    e6b0:	b580      	push	{r7, lr}
    e6b2:	b082      	sub	sp, #8
    e6b4:	af00      	add	r7, sp, #0
    e6b6:	6078      	str	r0, [r7, #4]
	garbage=spi.Enable();
    e6b8:	687b      	ldr	r3, [r7, #4]
    e6ba:	3318      	adds	r3, #24
    e6bc:	4618      	mov	r0, r3
    e6be:	4b05      	ldr	r3, [pc, #20]	; (e6d4 <_ZN16FlashMemoryClass9flashOpenEv+0x24>)
    e6c0:	4798      	blx	r3
    e6c2:	4603      	mov	r3, r0
    e6c4:	461a      	mov	r2, r3
    e6c6:	687b      	ldr	r3, [r7, #4]
    e6c8:	609a      	str	r2, [r3, #8]
	
	
}
    e6ca:	bf00      	nop
    e6cc:	3708      	adds	r7, #8
    e6ce:	46bd      	mov	sp, r7
    e6d0:	bd80      	pop	{r7, pc}
    e6d2:	bf00      	nop
    e6d4:	0000fb59 	.word	0x0000fb59

0000e6d8 <_ZN16FlashMemoryClass12CE_Low_FlashEv>:
	spi.Read((uint8_t *)dest, (uint16_t)size);
	CE_High_Flash();
	return (uint8_t)src;
}
void FlashMemoryClass::CE_Low_Flash(void)
{
    e6d8:	b580      	push	{r7, lr}
    e6da:	b082      	sub	sp, #8
    e6dc:	af00      	add	r7, sp, #0
    e6de:	6078      	str	r0, [r7, #4]
	garbage=0;
    e6e0:	687b      	ldr	r3, [r7, #4]
    e6e2:	2200      	movs	r2, #0
    e6e4:	609a      	str	r2, [r3, #8]
		gpio_set_pin_level(CS_FLASH,
		// <y> Initial level
		// <id> pad_initial_level
		// <false"> Low
		// <true"> High
		false);
    e6e6:	2100      	movs	r1, #0
    e6e8:	200f      	movs	r0, #15
    e6ea:	4b05      	ldr	r3, [pc, #20]	; (e700 <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
    e6ec:	4798      	blx	r3
		gpio_set_pin_level(CS_FRAM,true);
    e6ee:	2101      	movs	r1, #1
    e6f0:	2013      	movs	r0, #19
    e6f2:	4b03      	ldr	r3, [pc, #12]	; (e700 <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
    e6f4:	4798      	blx	r3
}
    e6f6:	bf00      	nop
    e6f8:	3708      	adds	r7, #8
    e6fa:	46bd      	mov	sp, r7
    e6fc:	bd80      	pop	{r7, pc}
    e6fe:	bf00      	nop
    e700:	0000e619 	.word	0x0000e619

0000e704 <_ZN16FlashMemoryClass13CE_High_FlashEv>:

void FlashMemoryClass::CE_High_Flash(void)
{
    e704:	b580      	push	{r7, lr}
    e706:	b082      	sub	sp, #8
    e708:	af00      	add	r7, sp, #0
    e70a:	6078      	str	r0, [r7, #4]
	garbage=0;
    e70c:	687b      	ldr	r3, [r7, #4]
    e70e:	2200      	movs	r2, #0
    e710:	609a      	str	r2, [r3, #8]
	gpio_set_pin_level(CS_FLASH,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
    e712:	2101      	movs	r1, #1
    e714:	200f      	movs	r0, #15
    e716:	4b05      	ldr	r3, [pc, #20]	; (e72c <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
    e718:	4798      	blx	r3
	gpio_set_pin_level(CS_FRAM,true);
    e71a:	2101      	movs	r1, #1
    e71c:	2013      	movs	r0, #19
    e71e:	4b03      	ldr	r3, [pc, #12]	; (e72c <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
    e720:	4798      	blx	r3
}
    e722:	bf00      	nop
    e724:	3708      	adds	r7, #8
    e726:	46bd      	mov	sp, r7
    e728:	bd80      	pop	{r7, pc}
    e72a:	bf00      	nop
    e72c:	0000e619 	.word	0x0000e619

0000e730 <_ZN16FlashMemoryClass9Send_ByteEh>:
uint8_t FlashMemoryClass::Send_Byte(uint8_t byte)
{
    e730:	b580      	push	{r7, lr}
    e732:	b082      	sub	sp, #8
    e734:	af00      	add	r7, sp, #0
    e736:	6078      	str	r0, [r7, #4]
    e738:	460b      	mov	r3, r1
    e73a:	70fb      	strb	r3, [r7, #3]
	//WaitBusy();
	spi.Write(&byte,1);
    e73c:	687b      	ldr	r3, [r7, #4]
    e73e:	3318      	adds	r3, #24
    e740:	1cf9      	adds	r1, r7, #3
    e742:	2201      	movs	r2, #1
    e744:	4618      	mov	r0, r3
    e746:	4b03      	ldr	r3, [pc, #12]	; (e754 <_ZN16FlashMemoryClass9Send_ByteEh+0x24>)
    e748:	4798      	blx	r3
	return byte;
    e74a:	78fb      	ldrb	r3, [r7, #3]
}
    e74c:	4618      	mov	r0, r3
    e74e:	3708      	adds	r7, #8
    e750:	46bd      	mov	sp, r7
    e752:	bd80      	pop	{r7, pc}
    e754:	0000fb95 	.word	0x0000fb95

0000e758 <_ZN16FlashMemoryClass8Get_ByteEv>:

uint8_t FlashMemoryClass::Get_Byte(void)
{
    e758:	b580      	push	{r7, lr}
    e75a:	b084      	sub	sp, #16
    e75c:	af00      	add	r7, sp, #0
    e75e:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	//WaitBusy();
	spi.Read(&byte,1);
    e760:	687b      	ldr	r3, [r7, #4]
    e762:	3318      	adds	r3, #24
    e764:	f107 010f 	add.w	r1, r7, #15
    e768:	2201      	movs	r2, #1
    e76a:	4618      	mov	r0, r3
    e76c:	4b03      	ldr	r3, [pc, #12]	; (e77c <_ZN16FlashMemoryClass8Get_ByteEv+0x24>)
    e76e:	4798      	blx	r3
	
	return byte;
    e770:	7bfb      	ldrb	r3, [r7, #15]
}
    e772:	4618      	mov	r0, r3
    e774:	3710      	adds	r7, #16
    e776:	46bd      	mov	sp, r7
    e778:	bd80      	pop	{r7, pc}
    e77a:	bf00      	nop
    e77c:	0000fbd9 	.word	0x0000fbd9

0000e780 <_ZN16FlashMemoryClass4WRENEv>:

void FlashMemoryClass::WREN(void)
{
    e780:	b580      	push	{r7, lr}
    e782:	b082      	sub	sp, #8
    e784:	af00      	add	r7, sp, #0
    e786:	6078      	str	r0, [r7, #4]
	do
	{
		CE_Low_Flash();			// enable device
    e788:	6878      	ldr	r0, [r7, #4]
    e78a:	4b0d      	ldr	r3, [pc, #52]	; (e7c0 <_ZN16FlashMemoryClass4WRENEv+0x40>)
    e78c:	4798      	blx	r3
		Send_Byte(kFlashWREnable);	// send WREN command
    e78e:	2106      	movs	r1, #6
    e790:	6878      	ldr	r0, [r7, #4]
    e792:	4b0c      	ldr	r3, [pc, #48]	; (e7c4 <_ZN16FlashMemoryClass4WRENEv+0x44>)
    e794:	4798      	blx	r3
		//WaitBusy();
		CE_High_Flash();
    e796:	6878      	ldr	r0, [r7, #4]
    e798:	4b0b      	ldr	r3, [pc, #44]	; (e7c8 <_ZN16FlashMemoryClass4WRENEv+0x48>)
    e79a:	4798      	blx	r3
		status=ReadStatusRegister();
    e79c:	6878      	ldr	r0, [r7, #4]
    e79e:	4b0b      	ldr	r3, [pc, #44]	; (e7cc <_ZN16FlashMemoryClass4WRENEv+0x4c>)
    e7a0:	4798      	blx	r3
    e7a2:	4603      	mov	r3, r0
    e7a4:	461a      	mov	r2, r3
    e7a6:	687b      	ldr	r3, [r7, #4]
    e7a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	} while ((status&&(0x02))==0);
    e7ac:	687b      	ldr	r3, [r7, #4]
    e7ae:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    e7b2:	2b00      	cmp	r3, #0
    e7b4:	d100      	bne.n	e7b8 <_ZN16FlashMemoryClass4WRENEv+0x38>
	do
    e7b6:	e7e7      	b.n	e788 <_ZN16FlashMemoryClass4WRENEv+0x8>

}
    e7b8:	bf00      	nop
    e7ba:	3708      	adds	r7, #8
    e7bc:	46bd      	mov	sp, r7
    e7be:	bd80      	pop	{r7, pc}
    e7c0:	0000e6d9 	.word	0x0000e6d9
    e7c4:	0000e731 	.word	0x0000e731
    e7c8:	0000e705 	.word	0x0000e705
    e7cc:	0000e9ad 	.word	0x0000e9ad

0000e7d0 <_ZN16FlashMemoryClass4WRDIEv>:


void FlashMemoryClass::WRDI(void)
{
    e7d0:	b580      	push	{r7, lr}
    e7d2:	b082      	sub	sp, #8
    e7d4:	af00      	add	r7, sp, #0
    e7d6:	6078      	str	r0, [r7, #4]
	CE_Low_Flash();			// enable device
    e7d8:	6878      	ldr	r0, [r7, #4]
    e7da:	4b06      	ldr	r3, [pc, #24]	; (e7f4 <_ZN16FlashMemoryClass4WRDIEv+0x24>)
    e7dc:	4798      	blx	r3
	Send_Byte(kFlashWRinhibit);	// send WRDI command
    e7de:	2104      	movs	r1, #4
    e7e0:	6878      	ldr	r0, [r7, #4]
    e7e2:	4b05      	ldr	r3, [pc, #20]	; (e7f8 <_ZN16FlashMemoryClass4WRDIEv+0x28>)
    e7e4:	4798      	blx	r3
//	WaitBusy();
	CE_High_Flash();			// disable device
    e7e6:	6878      	ldr	r0, [r7, #4]
    e7e8:	4b04      	ldr	r3, [pc, #16]	; (e7fc <_ZN16FlashMemoryClass4WRDIEv+0x2c>)
    e7ea:	4798      	blx	r3
	
}
    e7ec:	bf00      	nop
    e7ee:	3708      	adds	r7, #8
    e7f0:	46bd      	mov	sp, r7
    e7f2:	bd80      	pop	{r7, pc}
    e7f4:	0000e6d9 	.word	0x0000e6d9
    e7f8:	0000e731 	.word	0x0000e731
    e7fc:	0000e705 	.word	0x0000e705

0000e800 <_ZN16FlashMemoryClass10eraseFlashEmm>:
		return *srcPtr;

	}
	
void FlashMemoryClass::eraseFlash(uint32_t dest, uint32_t size)
	{
    e800:	b580      	push	{r7, lr}
    e802:	b086      	sub	sp, #24
    e804:	af00      	add	r7, sp, #0
    e806:	60f8      	str	r0, [r7, #12]
    e808:	60b9      	str	r1, [r7, #8]
    e80a:	607a      	str	r2, [r7, #4]
	uint32_t	eraseRemaining = size;
    e80c:	687b      	ldr	r3, [r7, #4]
    e80e:	617b      	str	r3, [r7, #20]
	uint32_t	eraseAddress = dest;
    e810:	68bb      	ldr	r3, [r7, #8]
    e812:	613b      	str	r3, [r7, #16]
	flashOpen();
    e814:	68f8      	ldr	r0, [r7, #12]
    e816:	4b21      	ldr	r3, [pc, #132]	; (e89c <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>)
    e818:	4798      	blx	r3
	while (eraseRemaining > 0)
    e81a:	697b      	ldr	r3, [r7, #20]
    e81c:	2b00      	cmp	r3, #0
    e81e:	d035      	beq.n	e88c <_ZN16FlashMemoryClass10eraseFlashEmm+0x8c>
	{
	WREN();
    e820:	68f8      	ldr	r0, [r7, #12]
    e822:	4b1f      	ldr	r3, [pc, #124]	; (e8a0 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa0>)
    e824:	4798      	blx	r3
	if (eraseRemaining <= 4 * 1024)
    e826:	697b      	ldr	r3, [r7, #20]
    e828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    e82c:	d806      	bhi.n	e83c <_ZN16FlashMemoryClass10eraseFlashEmm+0x3c>
		{
		Sector_Erase(eraseAddress);
    e82e:	6939      	ldr	r1, [r7, #16]
    e830:	68f8      	ldr	r0, [r7, #12]
    e832:	4b1c      	ldr	r3, [pc, #112]	; (e8a4 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa4>)
    e834:	4798      	blx	r3
		eraseRemaining = 0;
    e836:	2300      	movs	r3, #0
    e838:	617b      	str	r3, [r7, #20]
    e83a:	e020      	b.n	e87e <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		}
	else if (eraseRemaining < 64 * 1024)
    e83c:	697b      	ldr	r3, [r7, #20]
    e83e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    e842:	d20c      	bcs.n	e85e <_ZN16FlashMemoryClass10eraseFlashEmm+0x5e>
		{
		Sector_Erase(eraseAddress);
    e844:	6939      	ldr	r1, [r7, #16]
    e846:	68f8      	ldr	r0, [r7, #12]
    e848:	4b16      	ldr	r3, [pc, #88]	; (e8a4 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa4>)
    e84a:	4798      	blx	r3
		eraseAddress += (4 * 1024);
    e84c:	693b      	ldr	r3, [r7, #16]
    e84e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    e852:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (4 * 1024);
    e854:	697b      	ldr	r3, [r7, #20]
    e856:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    e85a:	617b      	str	r3, [r7, #20]
    e85c:	e00f      	b.n	e87e <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		}

	else if (eraseRemaining >= 64 * 1024)
    e85e:	697b      	ldr	r3, [r7, #20]
    e860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    e864:	d30b      	bcc.n	e87e <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		{
		Block_Erase_64K(eraseAddress);
    e866:	6939      	ldr	r1, [r7, #16]
    e868:	68f8      	ldr	r0, [r7, #12]
    e86a:	4b0f      	ldr	r3, [pc, #60]	; (e8a8 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa8>)
    e86c:	4798      	blx	r3
		eraseAddress += (64 * 1024);
    e86e:	693b      	ldr	r3, [r7, #16]
    e870:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    e874:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (64 * 1024);
    e876:	697b      	ldr	r3, [r7, #20]
    e878:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    e87c:	617b      	str	r3, [r7, #20]
		Block_Erase_32K(eraseAddress);
		eraseAddress += (32 * 1024);
		eraseRemaining -= (32 * 1024);
		}
*/
	WaitBusy();
    e87e:	68f8      	ldr	r0, [r7, #12]
    e880:	4b0a      	ldr	r3, [pc, #40]	; (e8ac <_ZN16FlashMemoryClass10eraseFlashEmm+0xac>)
    e882:	4798      	blx	r3
	WRDI();
    e884:	68f8      	ldr	r0, [r7, #12]
    e886:	4b0a      	ldr	r3, [pc, #40]	; (e8b0 <_ZN16FlashMemoryClass10eraseFlashEmm+0xb0>)
    e888:	4798      	blx	r3
	while (eraseRemaining > 0)
    e88a:	e7c6      	b.n	e81a <_ZN16FlashMemoryClass10eraseFlashEmm+0x1a>
	}
	flashClose();
    e88c:	68f8      	ldr	r0, [r7, #12]
    e88e:	4b09      	ldr	r3, [pc, #36]	; (e8b4 <_ZN16FlashMemoryClass10eraseFlashEmm+0xb4>)
    e890:	4798      	blx	r3
}
    e892:	bf00      	nop
    e894:	3718      	adds	r7, #24
    e896:	46bd      	mov	sp, r7
    e898:	bd80      	pop	{r7, pc}
    e89a:	bf00      	nop
    e89c:	0000e6b1 	.word	0x0000e6b1
    e8a0:	0000e781 	.word	0x0000e781
    e8a4:	0000ea49 	.word	0x0000ea49
    e8a8:	0000e8b9 	.word	0x0000e8b9
    e8ac:	0000e915 	.word	0x0000e915
    e8b0:	0000e7d1 	.word	0x0000e7d1
    e8b4:	0000ea25 	.word	0x0000ea25

0000e8b8 <_ZN16FlashMemoryClass15Block_Erase_64KEm>:
	
void	FlashMemoryClass::Block_Erase_64K(uint32_t Dst){
    e8b8:	b580      	push	{r7, lr}
    e8ba:	b082      	sub	sp, #8
    e8bc:	af00      	add	r7, sp, #0
    e8be:	6078      	str	r0, [r7, #4]
    e8c0:	6039      	str	r1, [r7, #0]

		CE_Low_Flash();				// enable device
    e8c2:	6878      	ldr	r0, [r7, #4]
    e8c4:	4b10      	ldr	r3, [pc, #64]	; (e908 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x50>)
    e8c6:	4798      	blx	r3
		Send_Byte(kFlash64KBlockErase);		// send Sector Erase command
    e8c8:	21d8      	movs	r1, #216	; 0xd8
    e8ca:	6878      	ldr	r0, [r7, #4]
    e8cc:	4b0f      	ldr	r3, [pc, #60]	; (e90c <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    e8ce:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
    e8d0:	683b      	ldr	r3, [r7, #0]
    e8d2:	0c1b      	lsrs	r3, r3, #16
    e8d4:	b2db      	uxtb	r3, r3
    e8d6:	4619      	mov	r1, r3
    e8d8:	6878      	ldr	r0, [r7, #4]
    e8da:	4b0c      	ldr	r3, [pc, #48]	; (e90c <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    e8dc:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFF) >> 8));
    e8de:	683b      	ldr	r3, [r7, #0]
    e8e0:	0a1b      	lsrs	r3, r3, #8
    e8e2:	b2db      	uxtb	r3, r3
    e8e4:	4619      	mov	r1, r3
    e8e6:	6878      	ldr	r0, [r7, #4]
    e8e8:	4b08      	ldr	r3, [pc, #32]	; (e90c <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    e8ea:	4798      	blx	r3
		Send_Byte(Dst & 0xFF);
    e8ec:	683b      	ldr	r3, [r7, #0]
    e8ee:	b2db      	uxtb	r3, r3
    e8f0:	4619      	mov	r1, r3
    e8f2:	6878      	ldr	r0, [r7, #4]
    e8f4:	4b05      	ldr	r3, [pc, #20]	; (e90c <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    e8f6:	4798      	blx	r3
		CE_High_Flash();				// disable device
    e8f8:	6878      	ldr	r0, [r7, #4]
    e8fa:	4b05      	ldr	r3, [pc, #20]	; (e910 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x58>)
    e8fc:	4798      	blx	r3
		
}
    e8fe:	bf00      	nop
    e900:	3708      	adds	r7, #8
    e902:	46bd      	mov	sp, r7
    e904:	bd80      	pop	{r7, pc}
    e906:	bf00      	nop
    e908:	0000e6d9 	.word	0x0000e6d9
    e90c:	0000e731 	.word	0x0000e731
    e910:	0000e705 	.word	0x0000e705

0000e914 <_ZN16FlashMemoryClass8WaitBusyEv>:
uint8_t  FlashMemoryClass::WaitBusy(void){
    e914:	b580      	push	{r7, lr}
    e916:	b082      	sub	sp, #8
    e918:	af00      	add	r7, sp, #0
    e91a:	6078      	str	r0, [r7, #4]
	status = ReadStatusRegister();
    e91c:	6878      	ldr	r0, [r7, #4]
    e91e:	4b0f      	ldr	r3, [pc, #60]	; (e95c <_ZN16FlashMemoryClass8WaitBusyEv+0x48>)
    e920:	4798      	blx	r3
    e922:	4603      	mov	r3, r0
    e924:	461a      	mov	r2, r3
    e926:	687b      	ldr	r3, [r7, #4]
    e928:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    e92c:	687b      	ldr	r3, [r7, #4]
    e92e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    e932:	f003 0301 	and.w	r3, r3, #1
    e936:	2b00      	cmp	r3, #0
    e938:	d008      	beq.n	e94c <_ZN16FlashMemoryClass8WaitBusyEv+0x38>
			status = ReadStatusRegister();
    e93a:	6878      	ldr	r0, [r7, #4]
    e93c:	4b07      	ldr	r3, [pc, #28]	; (e95c <_ZN16FlashMemoryClass8WaitBusyEv+0x48>)
    e93e:	4798      	blx	r3
    e940:	4603      	mov	r3, r0
    e942:	461a      	mov	r2, r3
    e944:	687b      	ldr	r3, [r7, #4]
    e946:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    e94a:	e7ef      	b.n	e92c <_ZN16FlashMemoryClass8WaitBusyEv+0x18>
		}
		
		return	status;
    e94c:	687b      	ldr	r3, [r7, #4]
    e94e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
    e952:	4618      	mov	r0, r3
    e954:	3708      	adds	r7, #8
    e956:	46bd      	mov	sp, r7
    e958:	bd80      	pop	{r7, pc}
    e95a:	bf00      	nop
    e95c:	0000e9ad 	.word	0x0000e9ad

0000e960 <_ZN16FlashMemoryClass7IsReadyEv>:
bool  FlashMemoryClass::IsReady(void){
    e960:	b580      	push	{r7, lr}
    e962:	b082      	sub	sp, #8
    e964:	af00      	add	r7, sp, #0
    e966:	6078      	str	r0, [r7, #4]
	
	flashOpen();
    e968:	6878      	ldr	r0, [r7, #4]
    e96a:	4b0d      	ldr	r3, [pc, #52]	; (e9a0 <_ZN16FlashMemoryClass7IsReadyEv+0x40>)
    e96c:	4798      	blx	r3
	status = ReadStatusRegister();
    e96e:	6878      	ldr	r0, [r7, #4]
    e970:	4b0c      	ldr	r3, [pc, #48]	; (e9a4 <_ZN16FlashMemoryClass7IsReadyEv+0x44>)
    e972:	4798      	blx	r3
    e974:	4603      	mov	r3, r0
    e976:	461a      	mov	r2, r3
    e978:	687b      	ldr	r3, [r7, #4]
    e97a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	flashClose();
    e97e:	6878      	ldr	r0, [r7, #4]
    e980:	4b09      	ldr	r3, [pc, #36]	; (e9a8 <_ZN16FlashMemoryClass7IsReadyEv+0x48>)
    e982:	4798      	blx	r3
	return	(status&0x01)==0;
    e984:	687b      	ldr	r3, [r7, #4]
    e986:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    e98a:	f003 0301 	and.w	r3, r3, #1
    e98e:	2b00      	cmp	r3, #0
    e990:	bf0c      	ite	eq
    e992:	2301      	moveq	r3, #1
    e994:	2300      	movne	r3, #0
    e996:	b2db      	uxtb	r3, r3
}
    e998:	4618      	mov	r0, r3
    e99a:	3708      	adds	r7, #8
    e99c:	46bd      	mov	sp, r7
    e99e:	bd80      	pop	{r7, pc}
    e9a0:	0000e6b1 	.word	0x0000e6b1
    e9a4:	0000e9ad 	.word	0x0000e9ad
    e9a8:	0000ea25 	.word	0x0000ea25

0000e9ac <_ZN16FlashMemoryClass18ReadStatusRegisterEv>:
uint8_t  FlashMemoryClass::ReadStatusRegister(void){
    e9ac:	b580      	push	{r7, lr}
    e9ae:	b082      	sub	sp, #8
    e9b0:	af00      	add	r7, sp, #0
    e9b2:	6078      	str	r0, [r7, #4]
			status=ReadSingleRegister(kFlashReadSR);
    e9b4:	2105      	movs	r1, #5
    e9b6:	6878      	ldr	r0, [r7, #4]
    e9b8:	4b06      	ldr	r3, [pc, #24]	; (e9d4 <_ZN16FlashMemoryClass18ReadStatusRegisterEv+0x28>)
    e9ba:	4798      	blx	r3
    e9bc:	4603      	mov	r3, r0
    e9be:	461a      	mov	r2, r3
    e9c0:	687b      	ldr	r3, [r7, #4]
    e9c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		return status;
    e9c6:	687b      	ldr	r3, [r7, #4]
    e9c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
    e9cc:	4618      	mov	r0, r3
    e9ce:	3708      	adds	r7, #8
    e9d0:	46bd      	mov	sp, r7
    e9d2:	bd80      	pop	{r7, pc}
    e9d4:	0000e9d9 	.word	0x0000e9d9

0000e9d8 <_ZN16FlashMemoryClass18ReadSingleRegisterEh>:
uint8_t  FlashMemoryClass::ReadFunctionRegister(void){
			// disable device
		return ReadSingleRegister(kFlashReadFunction);
	}
	
uint8_t  FlashMemoryClass::ReadSingleRegister(uint8_t r){
    e9d8:	b580      	push	{r7, lr}
    e9da:	b084      	sub	sp, #16
    e9dc:	af00      	add	r7, sp, #0
    e9de:	6078      	str	r0, [r7, #4]
    e9e0:	460b      	mov	r3, r1
    e9e2:	70fb      	strb	r3, [r7, #3]
	uint8_t b = 0;
    e9e4:	2300      	movs	r3, #0
    e9e6:	73fb      	strb	r3, [r7, #15]
	CE_Low_Flash();			// enable device
    e9e8:	6878      	ldr	r0, [r7, #4]
    e9ea:	4b0a      	ldr	r3, [pc, #40]	; (ea14 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x3c>)
    e9ec:	4798      	blx	r3
	Send_Byte(r);	// send RDSR command
    e9ee:	78fb      	ldrb	r3, [r7, #3]
    e9f0:	4619      	mov	r1, r3
    e9f2:	6878      	ldr	r0, [r7, #4]
    e9f4:	4b08      	ldr	r3, [pc, #32]	; (ea18 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x40>)
    e9f6:	4798      	blx	r3
	b = Get_Byte();		/* receive byte */
    e9f8:	6878      	ldr	r0, [r7, #4]
    e9fa:	4b08      	ldr	r3, [pc, #32]	; (ea1c <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x44>)
    e9fc:	4798      	blx	r3
    e9fe:	4603      	mov	r3, r0
    ea00:	73fb      	strb	r3, [r7, #15]
	CE_High_Flash();			// disable device
    ea02:	6878      	ldr	r0, [r7, #4]
    ea04:	4b06      	ldr	r3, [pc, #24]	; (ea20 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x48>)
    ea06:	4798      	blx	r3
	return b;
    ea08:	7bfb      	ldrb	r3, [r7, #15]
}
    ea0a:	4618      	mov	r0, r3
    ea0c:	3710      	adds	r7, #16
    ea0e:	46bd      	mov	sp, r7
    ea10:	bd80      	pop	{r7, pc}
    ea12:	bf00      	nop
    ea14:	0000e6d9 	.word	0x0000e6d9
    ea18:	0000e731 	.word	0x0000e731
    ea1c:	0000e759 	.word	0x0000e759
    ea20:	0000e705 	.word	0x0000e705

0000ea24 <_ZN16FlashMemoryClass10flashCloseEv>:
	Send_Byte(byte);		/* receive byte */
	CE_High_Flash();			// disable device
	return byte;
}

void FlashMemoryClass::flashClose(void){
    ea24:	b580      	push	{r7, lr}
    ea26:	b082      	sub	sp, #8
    ea28:	af00      	add	r7, sp, #0
    ea2a:	6078      	str	r0, [r7, #4]
	garbage=0;
    ea2c:	687b      	ldr	r3, [r7, #4]
    ea2e:	2200      	movs	r2, #0
    ea30:	609a      	str	r2, [r3, #8]
		spi.Disable();
    ea32:	687b      	ldr	r3, [r7, #4]
    ea34:	3318      	adds	r3, #24
    ea36:	4618      	mov	r0, r3
    ea38:	4b02      	ldr	r3, [pc, #8]	; (ea44 <_ZN16FlashMemoryClass10flashCloseEv+0x20>)
    ea3a:	4798      	blx	r3
	}
    ea3c:	bf00      	nop
    ea3e:	3708      	adds	r7, #8
    ea40:	46bd      	mov	sp, r7
    ea42:	bd80      	pop	{r7, pc}
    ea44:	0000fc1d 	.word	0x0000fc1d

0000ea48 <_ZN16FlashMemoryClass12Sector_EraseEm>:
void FlashMemoryClass::Sector_Erase(uint32_t Dst)
{
    ea48:	b580      	push	{r7, lr}
    ea4a:	b082      	sub	sp, #8
    ea4c:	af00      	add	r7, sp, #0
    ea4e:	6078      	str	r0, [r7, #4]
    ea50:	6039      	str	r1, [r7, #0]
	CE_Low_Flash();				// enable device
    ea52:	6878      	ldr	r0, [r7, #4]
    ea54:	4b10      	ldr	r3, [pc, #64]	; (ea98 <_ZN16FlashMemoryClass12Sector_EraseEm+0x50>)
    ea56:	4798      	blx	r3
	Send_Byte(kFlash4KSectorErase);		// send Sector Erase command
    ea58:	2120      	movs	r1, #32
    ea5a:	6878      	ldr	r0, [r7, #4]
    ea5c:	4b0f      	ldr	r3, [pc, #60]	; (ea9c <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    ea5e:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
    ea60:	683b      	ldr	r3, [r7, #0]
    ea62:	0c1b      	lsrs	r3, r3, #16
    ea64:	b2db      	uxtb	r3, r3
    ea66:	4619      	mov	r1, r3
    ea68:	6878      	ldr	r0, [r7, #4]
    ea6a:	4b0c      	ldr	r3, [pc, #48]	; (ea9c <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    ea6c:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFF) >> 8));
    ea6e:	683b      	ldr	r3, [r7, #0]
    ea70:	0a1b      	lsrs	r3, r3, #8
    ea72:	b2db      	uxtb	r3, r3
    ea74:	4619      	mov	r1, r3
    ea76:	6878      	ldr	r0, [r7, #4]
    ea78:	4b08      	ldr	r3, [pc, #32]	; (ea9c <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    ea7a:	4798      	blx	r3
	Send_Byte(Dst & 0xFF);
    ea7c:	683b      	ldr	r3, [r7, #0]
    ea7e:	b2db      	uxtb	r3, r3
    ea80:	4619      	mov	r1, r3
    ea82:	6878      	ldr	r0, [r7, #4]
    ea84:	4b05      	ldr	r3, [pc, #20]	; (ea9c <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    ea86:	4798      	blx	r3
	CE_High_Flash();				// disable device
    ea88:	6878      	ldr	r0, [r7, #4]
    ea8a:	4b05      	ldr	r3, [pc, #20]	; (eaa0 <_ZN16FlashMemoryClass12Sector_EraseEm+0x58>)
    ea8c:	4798      	blx	r3
}
    ea8e:	bf00      	nop
    ea90:	3708      	adds	r7, #8
    ea92:	46bd      	mov	sp, r7
    ea94:	bd80      	pop	{r7, pc}
    ea96:	bf00      	nop
    ea98:	0000e6d9 	.word	0x0000e6d9
    ea9c:	0000e731 	.word	0x0000e731
    eaa0:	0000e705 	.word	0x0000e705

0000eaa4 <_ZN16FlashMemoryClass12WriteAddressEPhmm>:
	delay_ms(100);
	CE_Low_Flash();
	Send_Byte(0x99);
	CE_High_Flash();				// disable device
}
uint32_t	FlashMemoryClass::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
    eaa4:	b580      	push	{r7, lr}
    eaa6:	b086      	sub	sp, #24
    eaa8:	af00      	add	r7, sp, #0
    eaaa:	60f8      	str	r0, [r7, #12]
    eaac:	60b9      	str	r1, [r7, #8]
    eaae:	607a      	str	r2, [r7, #4]
    eab0:	603b      	str	r3, [r7, #0]
	uint32_t	w;
	while(!IsReady());
    eab2:	68f8      	ldr	r0, [r7, #12]
    eab4:	4b2b      	ldr	r3, [pc, #172]	; (eb64 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc0>)
    eab6:	4798      	blx	r3
    eab8:	4603      	mov	r3, r0
    eaba:	f083 0301 	eor.w	r3, r3, #1
    eabe:	b2db      	uxtb	r3, r3
    eac0:	2b00      	cmp	r3, #0
    eac2:	d000      	beq.n	eac6 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x22>
    eac4:	e7f5      	b.n	eab2 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe>
	flashOpen();
    eac6:	68f8      	ldr	r0, [r7, #12]
    eac8:	4b27      	ldr	r3, [pc, #156]	; (eb68 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc4>)
    eaca:	4798      	blx	r3
	WREN();
    eacc:	68f8      	ldr	r0, [r7, #12]
    eace:	4b27      	ldr	r3, [pc, #156]	; (eb6c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc8>)
    ead0:	4798      	blx	r3
	CE_Low_Flash();
    ead2:	68f8      	ldr	r0, [r7, #12]
    ead4:	4b26      	ldr	r3, [pc, #152]	; (eb70 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xcc>)
    ead6:	4798      	blx	r3
	localBuffer[0]=kFlashByteProgram;
    ead8:	68fb      	ldr	r3, [r7, #12]
    eada:	2202      	movs	r2, #2
    eadc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	localBuffer[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    eae0:	687b      	ldr	r3, [r7, #4]
    eae2:	0c1b      	lsrs	r3, r3, #16
    eae4:	b2da      	uxtb	r2, r3
    eae6:	68fb      	ldr	r3, [r7, #12]
    eae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	localBuffer[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    eaec:	687b      	ldr	r3, [r7, #4]
    eaee:	0a1b      	lsrs	r3, r3, #8
    eaf0:	b2da      	uxtb	r2, r3
    eaf2:	68fb      	ldr	r3, [r7, #12]
    eaf4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	localBuffer[3]=(uint8_t)(addr&0xFF);
    eaf8:	687b      	ldr	r3, [r7, #4]
    eafa:	b2da      	uxtb	r2, r3
    eafc:	68fb      	ldr	r3, [r7, #12]
    eafe:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	for (uint32_t i = 4; i <(size)+4; i++)
    eb02:	2304      	movs	r3, #4
    eb04:	617b      	str	r3, [r7, #20]
    eb06:	683b      	ldr	r3, [r7, #0]
    eb08:	1d1a      	adds	r2, r3, #4
    eb0a:	697b      	ldr	r3, [r7, #20]
    eb0c:	429a      	cmp	r2, r3
    eb0e:	d90e      	bls.n	eb2e <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x8a>
	{
		localBuffer[i]=*p;
    eb10:	68bb      	ldr	r3, [r7, #8]
    eb12:	7819      	ldrb	r1, [r3, #0]
    eb14:	68fa      	ldr	r2, [r7, #12]
    eb16:	697b      	ldr	r3, [r7, #20]
    eb18:	4413      	add	r3, r2
    eb1a:	3334      	adds	r3, #52	; 0x34
    eb1c:	460a      	mov	r2, r1
    eb1e:	701a      	strb	r2, [r3, #0]
		p++;
    eb20:	68bb      	ldr	r3, [r7, #8]
    eb22:	3301      	adds	r3, #1
    eb24:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 4; i <(size)+4; i++)
    eb26:	697b      	ldr	r3, [r7, #20]
    eb28:	3301      	adds	r3, #1
    eb2a:	617b      	str	r3, [r7, #20]
    eb2c:	e7eb      	b.n	eb06 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x62>
	}


	w=spi.Write(&localBuffer[0],size+4);
    eb2e:	68fb      	ldr	r3, [r7, #12]
    eb30:	f103 0018 	add.w	r0, r3, #24
    eb34:	68fb      	ldr	r3, [r7, #12]
    eb36:	f103 0134 	add.w	r1, r3, #52	; 0x34
    eb3a:	683b      	ldr	r3, [r7, #0]
    eb3c:	3304      	adds	r3, #4
    eb3e:	461a      	mov	r2, r3
    eb40:	4b0c      	ldr	r3, [pc, #48]	; (eb74 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd0>)
    eb42:	4798      	blx	r3
    eb44:	4603      	mov	r3, r0
    eb46:	613b      	str	r3, [r7, #16]

	CE_High_Flash();
    eb48:	68f8      	ldr	r0, [r7, #12]
    eb4a:	4b0b      	ldr	r3, [pc, #44]	; (eb78 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd4>)
    eb4c:	4798      	blx	r3
	WRDI();
    eb4e:	68f8      	ldr	r0, [r7, #12]
    eb50:	4b0a      	ldr	r3, [pc, #40]	; (eb7c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd8>)
    eb52:	4798      	blx	r3
	flashClose();
    eb54:	68f8      	ldr	r0, [r7, #12]
    eb56:	4b0a      	ldr	r3, [pc, #40]	; (eb80 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xdc>)
    eb58:	4798      	blx	r3
	return	w;
    eb5a:	693b      	ldr	r3, [r7, #16]
	/*return (uint32_t)writeFlash(addr,(void*)p,size);*/
}
    eb5c:	4618      	mov	r0, r3
    eb5e:	3718      	adds	r7, #24
    eb60:	46bd      	mov	sp, r7
    eb62:	bd80      	pop	{r7, pc}
    eb64:	0000e961 	.word	0x0000e961
    eb68:	0000e6b1 	.word	0x0000e6b1
    eb6c:	0000e781 	.word	0x0000e781
    eb70:	0000e6d9 	.word	0x0000e6d9
    eb74:	0000fb95 	.word	0x0000fb95
    eb78:	0000e705 	.word	0x0000e705
    eb7c:	0000e7d1 	.word	0x0000e7d1
    eb80:	0000ea25 	.word	0x0000ea25

0000eb84 <_ZN16FlashMemoryClass11ReadAddressEPhmm>:
uint32_t	FlashMemoryClass::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
    eb84:	b580      	push	{r7, lr}
    eb86:	b086      	sub	sp, #24
    eb88:	af00      	add	r7, sp, #0
    eb8a:	60f8      	str	r0, [r7, #12]
    eb8c:	60b9      	str	r1, [r7, #8]
    eb8e:	607a      	str	r2, [r7, #4]
    eb90:	603b      	str	r3, [r7, #0]
	uint8_t	dummy;
	while(!IsReady());
    eb92:	68f8      	ldr	r0, [r7, #12]
    eb94:	4b21      	ldr	r3, [pc, #132]	; (ec1c <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x98>)
    eb96:	4798      	blx	r3
    eb98:	4603      	mov	r3, r0
    eb9a:	f083 0301 	eor.w	r3, r3, #1
    eb9e:	b2db      	uxtb	r3, r3
    eba0:	2b00      	cmp	r3, #0
    eba2:	d000      	beq.n	eba6 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x22>
    eba4:	e7f5      	b.n	eb92 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xe>
	flashOpen();
    eba6:	68f8      	ldr	r0, [r7, #12]
    eba8:	4b1d      	ldr	r3, [pc, #116]	; (ec20 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x9c>)
    ebaa:	4798      	blx	r3
	CE_Low_Flash();
    ebac:	68f8      	ldr	r0, [r7, #12]
    ebae:	4b1d      	ldr	r3, [pc, #116]	; (ec24 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa0>)
    ebb0:	4798      	blx	r3
	instruction[0]=kFlashRead;
    ebb2:	68fb      	ldr	r3, [r7, #12]
    ebb4:	2203      	movs	r2, #3
    ebb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	instruction[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    ebba:	687b      	ldr	r3, [r7, #4]
    ebbc:	0c1b      	lsrs	r3, r3, #16
    ebbe:	b2da      	uxtb	r2, r3
    ebc0:	68fb      	ldr	r3, [r7, #12]
    ebc2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	instruction[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    ebc6:	687b      	ldr	r3, [r7, #4]
    ebc8:	0a1b      	lsrs	r3, r3, #8
    ebca:	b2da      	uxtb	r2, r3
    ebcc:	68fb      	ldr	r3, [r7, #12]
    ebce:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	instruction[3]=(uint8_t)(addr&0xFF);
    ebd2:	687b      	ldr	r3, [r7, #4]
    ebd4:	b2da      	uxtb	r2, r3
    ebd6:	68fb      	ldr	r3, [r7, #12]
    ebd8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		
	uint32_t	r=spi.Write(instruction,4);
    ebdc:	68fb      	ldr	r3, [r7, #12]
    ebde:	f103 0018 	add.w	r0, r3, #24
    ebe2:	68fb      	ldr	r3, [r7, #12]
    ebe4:	3348      	adds	r3, #72	; 0x48
    ebe6:	2204      	movs	r2, #4
    ebe8:	4619      	mov	r1, r3
    ebea:	4b0f      	ldr	r3, [pc, #60]	; (ec28 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa4>)
    ebec:	4798      	blx	r3
    ebee:	4603      	mov	r3, r0
    ebf0:	617b      	str	r3, [r7, #20]
	r=spi.Read(p,size);
    ebf2:	68fb      	ldr	r3, [r7, #12]
    ebf4:	3318      	adds	r3, #24
    ebf6:	683a      	ldr	r2, [r7, #0]
    ebf8:	68b9      	ldr	r1, [r7, #8]
    ebfa:	4618      	mov	r0, r3
    ebfc:	4b0b      	ldr	r3, [pc, #44]	; (ec2c <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa8>)
    ebfe:	4798      	blx	r3
    ec00:	4603      	mov	r3, r0
    ec02:	617b      	str	r3, [r7, #20]
	CE_High_Flash();
    ec04:	68f8      	ldr	r0, [r7, #12]
    ec06:	4b0a      	ldr	r3, [pc, #40]	; (ec30 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xac>)
    ec08:	4798      	blx	r3
	flashClose();
    ec0a:	68f8      	ldr	r0, [r7, #12]
    ec0c:	4b09      	ldr	r3, [pc, #36]	; (ec34 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xb0>)
    ec0e:	4798      	blx	r3
	
	return	r;
    ec10:	697b      	ldr	r3, [r7, #20]
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
    ec12:	4618      	mov	r0, r3
    ec14:	3718      	adds	r7, #24
    ec16:	46bd      	mov	sp, r7
    ec18:	bd80      	pop	{r7, pc}
    ec1a:	bf00      	nop
    ec1c:	0000e961 	.word	0x0000e961
    ec20:	0000e6b1 	.word	0x0000e6b1
    ec24:	0000e6d9 	.word	0x0000e6d9
    ec28:	0000fb95 	.word	0x0000fb95
    ec2c:	0000fbd9 	.word	0x0000fbd9
    ec30:	0000e705 	.word	0x0000e705
    ec34:	0000ea25 	.word	0x0000ea25

0000ec38 <_Z41__static_initialization_and_destruction_0ii>:
    ec38:	b580      	push	{r7, lr}
    ec3a:	b082      	sub	sp, #8
    ec3c:	af00      	add	r7, sp, #0
    ec3e:	6078      	str	r0, [r7, #4]
    ec40:	6039      	str	r1, [r7, #0]
    ec42:	687b      	ldr	r3, [r7, #4]
    ec44:	2b01      	cmp	r3, #1
    ec46:	d10d      	bne.n	ec64 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    ec48:	683b      	ldr	r3, [r7, #0]
    ec4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ec4e:	4293      	cmp	r3, r2
    ec50:	d108      	bne.n	ec64 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    ec52:	4906      	ldr	r1, [pc, #24]	; (ec6c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    ec54:	4806      	ldr	r0, [pc, #24]	; (ec70 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    ec56:	4b07      	ldr	r3, [pc, #28]	; (ec74 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    ec58:	4798      	blx	r3
    ec5a:	4a07      	ldr	r2, [pc, #28]	; (ec78 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    ec5c:	4907      	ldr	r1, [pc, #28]	; (ec7c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    ec5e:	4804      	ldr	r0, [pc, #16]	; (ec70 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    ec60:	4b07      	ldr	r3, [pc, #28]	; (ec80 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    ec62:	4798      	blx	r3
    ec64:	bf00      	nop
    ec66:	3708      	adds	r7, #8
    ec68:	46bd      	mov	sp, r7
    ec6a:	bd80      	pop	{r7, pc}
    ec6c:	20001750 	.word	0x20001750
    ec70:	20001130 	.word	0x20001130
    ec74:	0000e651 	.word	0x0000e651
    ec78:	20000000 	.word	0x20000000
    ec7c:	0000e691 	.word	0x0000e691
    ec80:	00010009 	.word	0x00010009

0000ec84 <_GLOBAL__sub_I_flashLayout>:
    ec84:	b580      	push	{r7, lr}
    ec86:	af00      	add	r7, sp, #0
    ec88:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ec8c:	2001      	movs	r0, #1
    ec8e:	4b01      	ldr	r3, [pc, #4]	; (ec94 <_GLOBAL__sub_I_flashLayout+0x10>)
    ec90:	4798      	blx	r3
    ec92:	bd80      	pop	{r7, pc}
    ec94:	0000ec39 	.word	0x0000ec39

0000ec98 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    ec98:	b480      	push	{r7}
    ec9a:	b083      	sub	sp, #12
    ec9c:	af00      	add	r7, sp, #0
    ec9e:	6078      	str	r0, [r7, #4]
    eca0:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    eca2:	687b      	ldr	r3, [r7, #4]
    eca4:	683a      	ldr	r2, [r7, #0]
    eca6:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    eca8:	4a06      	ldr	r2, [pc, #24]	; (ecc4 <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
    ecaa:	687b      	ldr	r3, [r7, #4]
    ecac:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    ecae:	687b      	ldr	r3, [r7, #4]
    ecb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ecb4:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    ecb6:	687b      	ldr	r3, [r7, #4]
    ecb8:	4618      	mov	r0, r3
    ecba:	370c      	adds	r7, #12
    ecbc:	46bd      	mov	sp, r7
    ecbe:	bc80      	pop	{r7}
    ecc0:	4770      	bx	lr
    ecc2:	bf00      	nop
    ecc4:	20001180 	.word	0x20001180

0000ecc8 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    ecc8:	b480      	push	{r7}
    ecca:	b083      	sub	sp, #12
    eccc:	af00      	add	r7, sp, #0
    ecce:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    ecd0:	687b      	ldr	r3, [r7, #4]
    ecd2:	2200      	movs	r2, #0
    ecd4:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    ecd6:	687b      	ldr	r3, [r7, #4]
    ecd8:	4618      	mov	r0, r3
    ecda:	370c      	adds	r7, #12
    ecdc:	46bd      	mov	sp, r7
    ecde:	bc80      	pop	{r7}
    ece0:	4770      	bx	lr
	...

0000ece4 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    ece4:	b580      	push	{r7, lr}
    ece6:	b086      	sub	sp, #24
    ece8:	af00      	add	r7, sp, #0
    ecea:	60f8      	str	r0, [r7, #12]
    ecec:	60b9      	str	r1, [r7, #8]
    ecee:	607a      	str	r2, [r7, #4]
    ecf0:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    ecf2:	68f8      	ldr	r0, [r7, #12]
    ecf4:	4b0d      	ldr	r3, [pc, #52]	; (ed2c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    ecf6:	4798      	blx	r3
	task->interval = interval;
    ecf8:	68fb      	ldr	r3, [r7, #12]
    ecfa:	699b      	ldr	r3, [r3, #24]
    ecfc:	687a      	ldr	r2, [r7, #4]
    ecfe:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    ed00:	68fb      	ldr	r3, [r7, #12]
    ed02:	699b      	ldr	r3, [r3, #24]
    ed04:	68ba      	ldr	r2, [r7, #8]
    ed06:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    ed08:	68fb      	ldr	r3, [r7, #12]
    ed0a:	699b      	ldr	r3, [r3, #24]
    ed0c:	78fa      	ldrb	r2, [r7, #3]
    ed0e:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    ed10:	68fb      	ldr	r3, [r7, #12]
    ed12:	68da      	ldr	r2, [r3, #12]
    ed14:	68fb      	ldr	r3, [r7, #12]
    ed16:	699b      	ldr	r3, [r3, #24]
    ed18:	4619      	mov	r1, r3
    ed1a:	4610      	mov	r0, r2
    ed1c:	4b04      	ldr	r3, [pc, #16]	; (ed30 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    ed1e:	4798      	blx	r3
    ed20:	6178      	str	r0, [r7, #20]
	
	return status;
    ed22:	697b      	ldr	r3, [r7, #20]
}
    ed24:	4618      	mov	r0, r3
    ed26:	3718      	adds	r7, #24
    ed28:	46bd      	mov	sp, r7
    ed2a:	bd80      	pop	{r7, pc}
    ed2c:	0000eda9 	.word	0x0000eda9
    ed30:	00003311 	.word	0x00003311

0000ed34 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
    ed34:	b580      	push	{r7, lr}
    ed36:	b086      	sub	sp, #24
    ed38:	af00      	add	r7, sp, #0
    ed3a:	60f8      	str	r0, [r7, #12]
    ed3c:	60b9      	str	r1, [r7, #8]
    ed3e:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
    ed40:	687a      	ldr	r2, [r7, #4]
    ed42:	68b9      	ldr	r1, [r7, #8]
    ed44:	68f8      	ldr	r0, [r7, #12]
    ed46:	4b0c      	ldr	r3, [pc, #48]	; (ed78 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
    ed48:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
    ed4a:	68fb      	ldr	r3, [r7, #12]
    ed4c:	68db      	ldr	r3, [r3, #12]
    ed4e:	681b      	ldr	r3, [r3, #0]
    ed50:	699b      	ldr	r3, [r3, #24]
    ed52:	68fa      	ldr	r2, [r7, #12]
    ed54:	68d2      	ldr	r2, [r2, #12]
    ed56:	3204      	adds	r2, #4
    ed58:	4610      	mov	r0, r2
    ed5a:	4798      	blx	r3
    ed5c:	4603      	mov	r3, r0
    ed5e:	2b00      	cmp	r3, #0
    ed60:	d105      	bne.n	ed6e <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
    ed62:	68fb      	ldr	r3, [r7, #12]
    ed64:	68db      	ldr	r3, [r3, #12]
    ed66:	4618      	mov	r0, r3
    ed68:	4b04      	ldr	r3, [pc, #16]	; (ed7c <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
    ed6a:	4798      	blx	r3
    ed6c:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
    ed6e:	697b      	ldr	r3, [r7, #20]
}
    ed70:	4618      	mov	r0, r3
    ed72:	3718      	adds	r7, #24
    ed74:	46bd      	mov	sp, r7
    ed76:	bd80      	pop	{r7, pc}
    ed78:	0000ed81 	.word	0x0000ed81
    ed7c:	0000323d 	.word	0x0000323d

0000ed80 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    ed80:	b590      	push	{r4, r7, lr}
    ed82:	b087      	sub	sp, #28
    ed84:	af00      	add	r7, sp, #0
    ed86:	60f8      	str	r0, [r7, #12]
    ed88:	60b9      	str	r1, [r7, #8]
    ed8a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    ed8c:	2301      	movs	r3, #1
    ed8e:	687a      	ldr	r2, [r7, #4]
    ed90:	68b9      	ldr	r1, [r7, #8]
    ed92:	68f8      	ldr	r0, [r7, #12]
    ed94:	4c03      	ldr	r4, [pc, #12]	; (eda4 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    ed96:	47a0      	blx	r4
    ed98:	6178      	str	r0, [r7, #20]
		return status;
    ed9a:	697b      	ldr	r3, [r7, #20]
}
    ed9c:	4618      	mov	r0, r3
    ed9e:	371c      	adds	r7, #28
    eda0:	46bd      	mov	sp, r7
    eda2:	bd90      	pop	{r4, r7, pc}
    eda4:	0000ece5 	.word	0x0000ece5

0000eda8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
		status=timer_start(timer_descr);
	}
	
	return status;
}
void	Timer_Class::ChooseAvailableTimerTask(void){
    eda8:	b480      	push	{r7}
    edaa:	b085      	sub	sp, #20
    edac:	af00      	add	r7, sp, #0
    edae:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    edb0:	2300      	movs	r3, #0
    edb2:	73fb      	strb	r3, [r7, #15]
    edb4:	7bfb      	ldrb	r3, [r7, #15]
    edb6:	2b0f      	cmp	r3, #15
    edb8:	dc1c      	bgt.n	edf4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x4c>
	{	
				
		j=ii%TASK_NUMBER;
    edba:	7bfb      	ldrb	r3, [r7, #15]
    edbc:	f003 030f 	and.w	r3, r3, #15
    edc0:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    edc2:	7bba      	ldrb	r2, [r7, #14]
    edc4:	490f      	ldr	r1, [pc, #60]	; (ee04 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    edc6:	4613      	mov	r3, r2
    edc8:	009b      	lsls	r3, r3, #2
    edca:	4413      	add	r3, r2
    edcc:	009b      	lsls	r3, r3, #2
    edce:	440b      	add	r3, r1
    edd0:	330c      	adds	r3, #12
    edd2:	681b      	ldr	r3, [r3, #0]
    edd4:	2b00      	cmp	r3, #0
    edd6:	d109      	bne.n	edec <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x44>
		{
			
			task=&taskArray[j];
    edd8:	7bba      	ldrb	r2, [r7, #14]
    edda:	4613      	mov	r3, r2
    eddc:	009b      	lsls	r3, r3, #2
    edde:	4413      	add	r3, r2
    ede0:	009b      	lsls	r3, r3, #2
    ede2:	4a08      	ldr	r2, [pc, #32]	; (ee04 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    ede4:	441a      	add	r2, r3
    ede6:	687b      	ldr	r3, [r7, #4]
    ede8:	619a      	str	r2, [r3, #24]
			return;
    edea:	e006      	b.n	edfa <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    edec:	7bfb      	ldrb	r3, [r7, #15]
    edee:	3301      	adds	r3, #1
    edf0:	73fb      	strb	r3, [r7, #15]
    edf2:	e7df      	b.n	edb4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    edf4:	687b      	ldr	r3, [r7, #4]
    edf6:	4a03      	ldr	r2, [pc, #12]	; (ee04 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    edf8:	619a      	str	r2, [r3, #24]

}
    edfa:	3714      	adds	r7, #20
    edfc:	46bd      	mov	sp, r7
    edfe:	bc80      	pop	{r7}
    ee00:	4770      	bx	lr
    ee02:	bf00      	nop
    ee04:	20001184 	.word	0x20001184

0000ee08 <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
Timer_Class arincTimer(&TIMER_ARINC);
    ee08:	b580      	push	{r7, lr}
    ee0a:	b082      	sub	sp, #8
    ee0c:	af00      	add	r7, sp, #0
    ee0e:	6078      	str	r0, [r7, #4]
    ee10:	6039      	str	r1, [r7, #0]
    ee12:	687b      	ldr	r3, [r7, #4]
    ee14:	2b01      	cmp	r3, #1
    ee16:	d131      	bne.n	ee7c <_Z41__static_initialization_and_destruction_0ii+0x74>
    ee18:	683b      	ldr	r3, [r7, #0]
    ee1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ee1e:	4293      	cmp	r3, r2
    ee20:	d12c      	bne.n	ee7c <_Z41__static_initialization_and_destruction_0ii+0x74>
Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    ee22:	4918      	ldr	r1, [pc, #96]	; (ee84 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    ee24:	4818      	ldr	r0, [pc, #96]	; (ee88 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    ee26:	4b19      	ldr	r3, [pc, #100]	; (ee8c <_Z41__static_initialization_and_destruction_0ii+0x84>)
    ee28:	4798      	blx	r3
    ee2a:	4a19      	ldr	r2, [pc, #100]	; (ee90 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    ee2c:	4919      	ldr	r1, [pc, #100]	; (ee94 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    ee2e:	4816      	ldr	r0, [pc, #88]	; (ee88 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    ee30:	4b19      	ldr	r3, [pc, #100]	; (ee98 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    ee32:	4798      	blx	r3
Timer_Class eventTimer(&TIMER_EVENT);
    ee34:	4919      	ldr	r1, [pc, #100]	; (ee9c <_Z41__static_initialization_and_destruction_0ii+0x94>)
    ee36:	481a      	ldr	r0, [pc, #104]	; (eea0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    ee38:	4b14      	ldr	r3, [pc, #80]	; (ee8c <_Z41__static_initialization_and_destruction_0ii+0x84>)
    ee3a:	4798      	blx	r3
    ee3c:	4a14      	ldr	r2, [pc, #80]	; (ee90 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    ee3e:	4915      	ldr	r1, [pc, #84]	; (ee94 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    ee40:	4817      	ldr	r0, [pc, #92]	; (eea0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    ee42:	4b15      	ldr	r3, [pc, #84]	; (ee98 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    ee44:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    ee46:	4917      	ldr	r1, [pc, #92]	; (eea4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
    ee48:	4817      	ldr	r0, [pc, #92]	; (eea8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    ee4a:	4b10      	ldr	r3, [pc, #64]	; (ee8c <_Z41__static_initialization_and_destruction_0ii+0x84>)
    ee4c:	4798      	blx	r3
    ee4e:	4a10      	ldr	r2, [pc, #64]	; (ee90 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    ee50:	4910      	ldr	r1, [pc, #64]	; (ee94 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    ee52:	4815      	ldr	r0, [pc, #84]	; (eea8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    ee54:	4b10      	ldr	r3, [pc, #64]	; (ee98 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    ee56:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
    ee58:	4914      	ldr	r1, [pc, #80]	; (eeac <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    ee5a:	4815      	ldr	r0, [pc, #84]	; (eeb0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    ee5c:	4b0b      	ldr	r3, [pc, #44]	; (ee8c <_Z41__static_initialization_and_destruction_0ii+0x84>)
    ee5e:	4798      	blx	r3
    ee60:	4a0b      	ldr	r2, [pc, #44]	; (ee90 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    ee62:	490c      	ldr	r1, [pc, #48]	; (ee94 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    ee64:	4812      	ldr	r0, [pc, #72]	; (eeb0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    ee66:	4b0c      	ldr	r3, [pc, #48]	; (ee98 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    ee68:	4798      	blx	r3
Timer_Class arincTimer(&TIMER_ARINC);
    ee6a:	4912      	ldr	r1, [pc, #72]	; (eeb4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    ee6c:	4812      	ldr	r0, [pc, #72]	; (eeb8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    ee6e:	4b07      	ldr	r3, [pc, #28]	; (ee8c <_Z41__static_initialization_and_destruction_0ii+0x84>)
    ee70:	4798      	blx	r3
    ee72:	4a07      	ldr	r2, [pc, #28]	; (ee90 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    ee74:	4907      	ldr	r1, [pc, #28]	; (ee94 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    ee76:	4810      	ldr	r0, [pc, #64]	; (eeb8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    ee78:	4b07      	ldr	r3, [pc, #28]	; (ee98 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    ee7a:	4798      	blx	r3
    ee7c:	bf00      	nop
    ee7e:	3708      	adds	r7, #8
    ee80:	46bd      	mov	sp, r7
    ee82:	bd80      	pop	{r7, pc}
    ee84:	20001730 	.word	0x20001730
    ee88:	200012c8 	.word	0x200012c8
    ee8c:	0000ec99 	.word	0x0000ec99
    ee90:	20000000 	.word	0x20000000
    ee94:	0000ecc9 	.word	0x0000ecc9
    ee98:	00010009 	.word	0x00010009
    ee9c:	200017a4 	.word	0x200017a4
    eea0:	200012e4 	.word	0x200012e4
    eea4:	200018a8 	.word	0x200018a8
    eea8:	20001300 	.word	0x20001300
    eeac:	200017c4 	.word	0x200017c4
    eeb0:	2000131c 	.word	0x2000131c
    eeb4:	20001828 	.word	0x20001828
    eeb8:	20001338 	.word	0x20001338

0000eebc <_GLOBAL__sub_I_ptrTimerClass>:
    eebc:	b580      	push	{r7, lr}
    eebe:	af00      	add	r7, sp, #0
    eec0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    eec4:	2001      	movs	r0, #1
    eec6:	4b01      	ldr	r3, [pc, #4]	; (eecc <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    eec8:	4798      	blx	r3
    eeca:	bd80      	pop	{r7, pc}
    eecc:	0000ee09 	.word	0x0000ee09

0000eed0 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    eed0:	b480      	push	{r7}
    eed2:	b083      	sub	sp, #12
    eed4:	af00      	add	r7, sp, #0
    eed6:	6078      	str	r0, [r7, #4]
    eed8:	4a05      	ldr	r2, [pc, #20]	; (eef0 <_ZN5PrintC1Ev+0x20>)
    eeda:	687b      	ldr	r3, [r7, #4]
    eedc:	601a      	str	r2, [r3, #0]
    eede:	687b      	ldr	r3, [r7, #4]
    eee0:	2200      	movs	r2, #0
    eee2:	605a      	str	r2, [r3, #4]
    eee4:	687b      	ldr	r3, [r7, #4]
    eee6:	4618      	mov	r0, r3
    eee8:	370c      	adds	r7, #12
    eeea:	46bd      	mov	sp, r7
    eeec:	bc80      	pop	{r7}
    eeee:	4770      	bx	lr
    eef0:	00010818 	.word	0x00010818

0000eef4 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    eef4:	b480      	push	{r7}
    eef6:	b083      	sub	sp, #12
    eef8:	af00      	add	r7, sp, #0
    eefa:	6078      	str	r0, [r7, #4]
    eefc:	2300      	movs	r3, #0
    eefe:	4618      	mov	r0, r3
    ef00:	370c      	adds	r7, #12
    ef02:	46bd      	mov	sp, r7
    ef04:	bc80      	pop	{r7}
    ef06:	4770      	bx	lr

0000ef08 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    ef08:	b480      	push	{r7}
    ef0a:	b083      	sub	sp, #12
    ef0c:	af00      	add	r7, sp, #0
    ef0e:	6078      	str	r0, [r7, #4]
    ef10:	bf00      	nop
    ef12:	370c      	adds	r7, #12
    ef14:	46bd      	mov	sp, r7
    ef16:	bc80      	pop	{r7}
    ef18:	4770      	bx	lr
	...

0000ef1c <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    ef1c:	b580      	push	{r7, lr}
    ef1e:	b082      	sub	sp, #8
    ef20:	af00      	add	r7, sp, #0
    ef22:	6078      	str	r0, [r7, #4]
    ef24:	687b      	ldr	r3, [r7, #4]
    ef26:	4618      	mov	r0, r3
    ef28:	4b06      	ldr	r3, [pc, #24]	; (ef44 <_ZN6StreamC1Ev+0x28>)
    ef2a:	4798      	blx	r3
    ef2c:	4a06      	ldr	r2, [pc, #24]	; (ef48 <_ZN6StreamC1Ev+0x2c>)
    ef2e:	687b      	ldr	r3, [r7, #4]
    ef30:	601a      	str	r2, [r3, #0]
    ef32:	687b      	ldr	r3, [r7, #4]
    ef34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ef38:	609a      	str	r2, [r3, #8]
    ef3a:	687b      	ldr	r3, [r7, #4]
    ef3c:	4618      	mov	r0, r3
    ef3e:	3708      	adds	r7, #8
    ef40:	46bd      	mov	sp, r7
    ef42:	bd80      	pop	{r7, pc}
    ef44:	0000eed1 	.word	0x0000eed1
    ef48:	000107dc 	.word	0x000107dc

0000ef4c <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    ef4c:	b480      	push	{r7}
    ef4e:	b083      	sub	sp, #12
    ef50:	af00      	add	r7, sp, #0
    ef52:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    ef54:	4b06      	ldr	r3, [pc, #24]	; (ef70 <_ZL10USBTimeoutPK10timer_task+0x24>)
    ef56:	681b      	ldr	r3, [r3, #0]
    ef58:	2201      	movs	r2, #1
    ef5a:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    ef5c:	4b04      	ldr	r3, [pc, #16]	; (ef70 <_ZL10USBTimeoutPK10timer_task+0x24>)
    ef5e:	681b      	ldr	r3, [r3, #0]
    ef60:	2200      	movs	r2, #0
    ef62:	741a      	strb	r2, [r3, #16]
	
}
    ef64:	bf00      	nop
    ef66:	370c      	adds	r7, #12
    ef68:	46bd      	mov	sp, r7
    ef6a:	bc80      	pop	{r7}
    ef6c:	4770      	bx	lr
    ef6e:	bf00      	nop
    ef70:	20001354 	.word	0x20001354

0000ef74 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    ef74:	b480      	push	{r7}
    ef76:	b083      	sub	sp, #12
    ef78:	af00      	add	r7, sp, #0
    ef7a:	4603      	mov	r3, r0
    ef7c:	603a      	str	r2, [r7, #0]
    ef7e:	71fb      	strb	r3, [r7, #7]
    ef80:	460b      	mov	r3, r1
    ef82:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    ef84:	4b08      	ldr	r3, [pc, #32]	; (efa8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ef86:	681b      	ldr	r3, [r3, #0]
    ef88:	2201      	movs	r2, #1
    ef8a:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    ef8c:	4b06      	ldr	r3, [pc, #24]	; (efa8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ef8e:	681b      	ldr	r3, [r3, #0]
    ef90:	2201      	movs	r2, #1
    ef92:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    ef94:	4b04      	ldr	r3, [pc, #16]	; (efa8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ef96:	681b      	ldr	r3, [r3, #0]
    ef98:	2201      	movs	r2, #1
    ef9a:	741a      	strb	r2, [r3, #16]


	return false;
    ef9c:	2300      	movs	r3, #0
}
    ef9e:	4618      	mov	r0, r3
    efa0:	370c      	adds	r7, #12
    efa2:	46bd      	mov	sp, r7
    efa4:	bc80      	pop	{r7}
    efa6:	4770      	bx	lr
    efa8:	20001354 	.word	0x20001354

0000efac <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    efac:	b480      	push	{r7}
    efae:	b083      	sub	sp, #12
    efb0:	af00      	add	r7, sp, #0
    efb2:	4603      	mov	r3, r0
    efb4:	603a      	str	r2, [r7, #0]
    efb6:	71fb      	strb	r3, [r7, #7]
    efb8:	460b      	mov	r3, r1
    efba:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    efbc:	4b08      	ldr	r3, [pc, #32]	; (efe0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    efbe:	681b      	ldr	r3, [r3, #0]
    efc0:	2201      	movs	r2, #1
    efc2:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    efc4:	4b06      	ldr	r3, [pc, #24]	; (efe0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    efc6:	681b      	ldr	r3, [r3, #0]
    efc8:	2201      	movs	r2, #1
    efca:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    efcc:	4b04      	ldr	r3, [pc, #16]	; (efe0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    efce:	681b      	ldr	r3, [r3, #0]
    efd0:	2201      	movs	r2, #1
    efd2:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    efd4:	2300      	movs	r3, #0
}
    efd6:	4618      	mov	r0, r3
    efd8:	370c      	adds	r7, #12
    efda:	46bd      	mov	sp, r7
    efdc:	bc80      	pop	{r7}
    efde:	4770      	bx	lr
    efe0:	20001354 	.word	0x20001354

0000efe4 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    efe4:	b580      	push	{r7, lr}
    efe6:	b082      	sub	sp, #8
    efe8:	af00      	add	r7, sp, #0
    efea:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    efec:	793b      	ldrb	r3, [r7, #4]
    efee:	f003 0301 	and.w	r3, r3, #1
    eff2:	b2db      	uxtb	r3, r3
    eff4:	2b00      	cmp	r3, #0
    eff6:	d013      	beq.n	f020 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    eff8:	490c      	ldr	r1, [pc, #48]	; (f02c <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    effa:	2000      	movs	r0, #0
    effc:	4b0c      	ldr	r3, [pc, #48]	; (f030 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    effe:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    f000:	490c      	ldr	r1, [pc, #48]	; (f034 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    f002:	2001      	movs	r0, #1
    f004:	4b0a      	ldr	r3, [pc, #40]	; (f030 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    f006:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    f008:	4b0b      	ldr	r3, [pc, #44]	; (f038 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    f00a:	681b      	ldr	r3, [r3, #0]
    f00c:	2201      	movs	r2, #1
    f00e:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    f010:	4b09      	ldr	r3, [pc, #36]	; (f038 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    f012:	681b      	ldr	r3, [r3, #0]
    f014:	2201      	movs	r2, #1
    f016:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    f018:	4b07      	ldr	r3, [pc, #28]	; (f038 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    f01a:	681b      	ldr	r3, [r3, #0]
    f01c:	2201      	movs	r2, #1
    f01e:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    f020:	2300      	movs	r3, #0
}
    f022:	4618      	mov	r0, r3
    f024:	3708      	adds	r7, #8
    f026:	46bd      	mov	sp, r7
    f028:	bd80      	pop	{r7, pc}
    f02a:	bf00      	nop
    f02c:	0000ef75 	.word	0x0000ef75
    f030:	0000cfe1 	.word	0x0000cfe1
    f034:	0000efad 	.word	0x0000efad
    f038:	20001354 	.word	0x20001354

0000f03c <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    f03c:	b580      	push	{r7, lr}
    f03e:	b082      	sub	sp, #8
    f040:	af00      	add	r7, sp, #0
    f042:	6078      	str	r0, [r7, #4]
    f044:	687b      	ldr	r3, [r7, #4]
    f046:	4618      	mov	r0, r3
    f048:	4b0a      	ldr	r3, [pc, #40]	; (f074 <_ZN9CDC_ClassC1Ev+0x38>)
    f04a:	4798      	blx	r3
    f04c:	687b      	ldr	r3, [r7, #4]
    f04e:	3310      	adds	r3, #16
    f050:	4618      	mov	r0, r3
    f052:	4b09      	ldr	r3, [pc, #36]	; (f078 <_ZN9CDC_ClassC1Ev+0x3c>)
    f054:	4798      	blx	r3
    f056:	4a09      	ldr	r2, [pc, #36]	; (f07c <_ZN9CDC_ClassC1Ev+0x40>)
    f058:	687b      	ldr	r3, [r7, #4]
    f05a:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    f05c:	687b      	ldr	r3, [r7, #4]
    f05e:	f04f 32ff 	mov.w	r2, #4294967295
    f062:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    f064:	4a06      	ldr	r2, [pc, #24]	; (f080 <_ZN9CDC_ClassC1Ev+0x44>)
    f066:	687b      	ldr	r3, [r7, #4]
    f068:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    f06a:	687b      	ldr	r3, [r7, #4]
    f06c:	4618      	mov	r0, r3
    f06e:	3708      	adds	r7, #8
    f070:	46bd      	mov	sp, r7
    f072:	bd80      	pop	{r7, pc}
    f074:	0000ef1d 	.word	0x0000ef1d
    f078:	0000f681 	.word	0x0000f681
    f07c:	000107ac 	.word	0x000107ac
    f080:	20001354 	.word	0x20001354

0000f084 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    f084:	b580      	push	{r7, lr}
    f086:	b082      	sub	sp, #8
    f088:	af00      	add	r7, sp, #0
    f08a:	6078      	str	r0, [r7, #4]
    f08c:	4a06      	ldr	r2, [pc, #24]	; (f0a8 <_ZN9CDC_ClassD1Ev+0x24>)
    f08e:	687b      	ldr	r3, [r7, #4]
    f090:	601a      	str	r2, [r3, #0]
    f092:	687b      	ldr	r3, [r7, #4]
    f094:	3310      	adds	r3, #16
    f096:	4618      	mov	r0, r3
    f098:	4b04      	ldr	r3, [pc, #16]	; (f0ac <_ZN9CDC_ClassD1Ev+0x28>)
    f09a:	4798      	blx	r3
{
} //~CDC_Class
    f09c:	687b      	ldr	r3, [r7, #4]
    f09e:	4618      	mov	r0, r3
    f0a0:	3708      	adds	r7, #8
    f0a2:	46bd      	mov	sp, r7
    f0a4:	bd80      	pop	{r7, pc}
    f0a6:	bf00      	nop
    f0a8:	000107ac 	.word	0x000107ac
    f0ac:	0000f6a1 	.word	0x0000f6a1

0000f0b0 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    f0b0:	b580      	push	{r7, lr}
    f0b2:	b082      	sub	sp, #8
    f0b4:	af00      	add	r7, sp, #0
    f0b6:	6078      	str	r0, [r7, #4]
	
	OnInit();
    f0b8:	687b      	ldr	r3, [r7, #4]
    f0ba:	3310      	adds	r3, #16
    f0bc:	4618      	mov	r0, r3
    f0be:	4b09      	ldr	r3, [pc, #36]	; (f0e4 <_ZN9CDC_Class4InitEv+0x34>)
    f0c0:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    f0c2:	4909      	ldr	r1, [pc, #36]	; (f0e8 <_ZN9CDC_Class4InitEv+0x38>)
    f0c4:	2003      	movs	r0, #3
    f0c6:	4b09      	ldr	r3, [pc, #36]	; (f0ec <_ZN9CDC_Class4InitEv+0x3c>)
    f0c8:	4798      	blx	r3
	delay_ms(100);
    f0ca:	2064      	movs	r0, #100	; 0x64
    f0cc:	4b08      	ldr	r3, [pc, #32]	; (f0f0 <_ZN9CDC_Class4InitEv+0x40>)
    f0ce:	4798      	blx	r3
		
	if (connected)
    f0d0:	687b      	ldr	r3, [r7, #4]
    f0d2:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    f0d4:	2064      	movs	r0, #100	; 0x64
    f0d6:	4b06      	ldr	r3, [pc, #24]	; (f0f0 <_ZN9CDC_Class4InitEv+0x40>)
    f0d8:	4798      	blx	r3

	

}
    f0da:	bf00      	nop
    f0dc:	3708      	adds	r7, #8
    f0de:	46bd      	mov	sp, r7
    f0e0:	bd80      	pop	{r7, pc}
    f0e2:	bf00      	nop
    f0e4:	0000f6b5 	.word	0x0000f6b5
    f0e8:	0000efe5 	.word	0x0000efe5
    f0ec:	0000cfe1 	.word	0x0000cfe1
    f0f0:	00002775 	.word	0x00002775

0000f0f4 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    f0f4:	b580      	push	{r7, lr}
    f0f6:	b082      	sub	sp, #8
    f0f8:	af00      	add	r7, sp, #0
    f0fa:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    f0fc:	4b03      	ldr	r3, [pc, #12]	; (f10c <_ZN9CDC_Class9IsEnabledEv+0x18>)
    f0fe:	4798      	blx	r3
    f100:	4603      	mov	r3, r0
	
}
    f102:	4618      	mov	r0, r3
    f104:	3708      	adds	r7, #8
    f106:	46bd      	mov	sp, r7
    f108:	bd80      	pop	{r7, pc}
    f10a:	bf00      	nop
    f10c:	0000d059 	.word	0x0000d059

0000f110 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    f110:	b580      	push	{r7, lr}
    f112:	b084      	sub	sp, #16
    f114:	af00      	add	r7, sp, #0
    f116:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    f118:	687b      	ldr	r3, [r7, #4]
    f11a:	699b      	ldr	r3, [r3, #24]
    f11c:	f1b3 3fff 	cmp.w	r3, #4294967295
    f120:	bf14      	ite	ne
    f122:	2301      	movne	r3, #1
    f124:	2300      	moveq	r3, #0
    f126:	b2db      	uxtb	r3, r3
    f128:	2b00      	cmp	r3, #0
    f12a:	d002      	beq.n	f132 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    f12c:	687b      	ldr	r3, [r7, #4]
    f12e:	699b      	ldr	r3, [r3, #24]
    f130:	e011      	b.n	f156 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    f132:	687b      	ldr	r3, [r7, #4]
    f134:	681b      	ldr	r3, [r3, #0]
    f136:	331c      	adds	r3, #28
    f138:	681b      	ldr	r3, [r3, #0]
    f13a:	f107 010f 	add.w	r1, r7, #15
    f13e:	2201      	movs	r2, #1
    f140:	6878      	ldr	r0, [r7, #4]
    f142:	4798      	blx	r3
    f144:	4602      	mov	r2, r0
    f146:	687b      	ldr	r3, [r7, #4]
    f148:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    f14a:	7bfb      	ldrb	r3, [r7, #15]
    f14c:	461a      	mov	r2, r3
    f14e:	687b      	ldr	r3, [r7, #4]
    f150:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    f152:	687b      	ldr	r3, [r7, #4]
    f154:	699b      	ldr	r3, [r3, #24]
}
    f156:	4618      	mov	r0, r3
    f158:	3710      	adds	r7, #16
    f15a:	46bd      	mov	sp, r7
    f15c:	bd80      	pop	{r7, pc}
	...

0000f160 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    f160:	b580      	push	{r7, lr}
    f162:	b086      	sub	sp, #24
    f164:	af00      	add	r7, sp, #0
    f166:	60f8      	str	r0, [r7, #12]
    f168:	60b9      	str	r1, [r7, #8]
    f16a:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    f16c:	68fb      	ldr	r3, [r7, #12]
    f16e:	7c1b      	ldrb	r3, [r3, #16]
    f170:	b2db      	uxtb	r3, r3
    f172:	2b00      	cmp	r3, #0
    f174:	d02e      	beq.n	f1d4 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    f176:	687a      	ldr	r2, [r7, #4]
    f178:	4613      	mov	r3, r2
    f17a:	009b      	lsls	r3, r3, #2
    f17c:	4413      	add	r3, r2
    f17e:	005b      	lsls	r3, r3, #1
    f180:	461a      	mov	r2, r3
    f182:	4918      	ldr	r1, [pc, #96]	; (f1e4 <_ZN9CDC_Class8readDataEPvl+0x84>)
    f184:	4818      	ldr	r0, [pc, #96]	; (f1e8 <_ZN9CDC_Class8readDataEPvl+0x88>)
    f186:	4b19      	ldr	r3, [pc, #100]	; (f1ec <_ZN9CDC_Class8readDataEPvl+0x8c>)
    f188:	4798      	blx	r3
		rxReady=false;
    f18a:	68fb      	ldr	r3, [r7, #12]
    f18c:	2200      	movs	r2, #0
    f18e:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    f190:	687b      	ldr	r3, [r7, #4]
    f192:	4619      	mov	r1, r3
    f194:	68b8      	ldr	r0, [r7, #8]
    f196:	4b16      	ldr	r3, [pc, #88]	; (f1f0 <_ZN9CDC_Class8readDataEPvl+0x90>)
    f198:	4798      	blx	r3
    f19a:	4603      	mov	r3, r0
    f19c:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    f19e:	68fb      	ldr	r3, [r7, #12]
    f1a0:	7d5b      	ldrb	r3, [r3, #21]
    f1a2:	b2db      	uxtb	r3, r3
    f1a4:	f083 0301 	eor.w	r3, r3, #1
    f1a8:	b2db      	uxtb	r3, r3
    f1aa:	2b00      	cmp	r3, #0
    f1ac:	d006      	beq.n	f1bc <_ZN9CDC_Class8readDataEPvl+0x5c>
    f1ae:	68fb      	ldr	r3, [r7, #12]
    f1b0:	7c1b      	ldrb	r3, [r3, #16]
    f1b2:	b2db      	uxtb	r3, r3
    f1b4:	2b00      	cmp	r3, #0
    f1b6:	d001      	beq.n	f1bc <_ZN9CDC_Class8readDataEPvl+0x5c>
    f1b8:	2301      	movs	r3, #1
    f1ba:	e000      	b.n	f1be <_ZN9CDC_Class8readDataEPvl+0x5e>
    f1bc:	2300      	movs	r3, #0
    f1be:	2b00      	cmp	r3, #0
    f1c0:	d000      	beq.n	f1c4 <_ZN9CDC_Class8readDataEPvl+0x64>
    f1c2:	e7ec      	b.n	f19e <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    f1c4:	4808      	ldr	r0, [pc, #32]	; (f1e8 <_ZN9CDC_Class8readDataEPvl+0x88>)
    f1c6:	4b0b      	ldr	r3, [pc, #44]	; (f1f4 <_ZN9CDC_Class8readDataEPvl+0x94>)
    f1c8:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    f1ca:	4906      	ldr	r1, [pc, #24]	; (f1e4 <_ZN9CDC_Class8readDataEPvl+0x84>)
    f1cc:	4806      	ldr	r0, [pc, #24]	; (f1e8 <_ZN9CDC_Class8readDataEPvl+0x88>)
    f1ce:	4b0a      	ldr	r3, [pc, #40]	; (f1f8 <_ZN9CDC_Class8readDataEPvl+0x98>)
    f1d0:	4798      	blx	r3
    f1d2:	e001      	b.n	f1d8 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    f1d4:	2300      	movs	r3, #0
    f1d6:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    f1d8:	7dfb      	ldrb	r3, [r7, #23]
}
    f1da:	4618      	mov	r0, r3
    f1dc:	3718      	adds	r7, #24
    f1de:	46bd      	mov	sp, r7
    f1e0:	bd80      	pop	{r7, pc}
    f1e2:	bf00      	nop
    f1e4:	0000ef4d 	.word	0x0000ef4d
    f1e8:	20001410 	.word	0x20001410
    f1ec:	0000f921 	.word	0x0000f921
    f1f0:	0000cf35 	.word	0x0000cf35
    f1f4:	0000f841 	.word	0x0000f841
    f1f8:	0000f985 	.word	0x0000f985

0000f1fc <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
    f1fc:	b580      	push	{r7, lr}
    f1fe:	b086      	sub	sp, #24
    f200:	af00      	add	r7, sp, #0
    f202:	60f8      	str	r0, [r7, #12]
    f204:	60b9      	str	r1, [r7, #8]
    f206:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
    f208:	68fb      	ldr	r3, [r7, #12]
    f20a:	2200      	movs	r2, #0
    f20c:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    f20e:	687b      	ldr	r3, [r7, #4]
    f210:	4619      	mov	r1, r3
    f212:	68b8      	ldr	r0, [r7, #8]
    f214:	4b04      	ldr	r3, [pc, #16]	; (f228 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
    f216:	4798      	blx	r3
    f218:	4603      	mov	r3, r0
    f21a:	617b      	str	r3, [r7, #20]
	return r;
    f21c:	697b      	ldr	r3, [r7, #20]
}
    f21e:	4618      	mov	r0, r3
    f220:	3718      	adds	r7, #24
    f222:	46bd      	mov	sp, r7
    f224:	bd80      	pop	{r7, pc}
    f226:	bf00      	nop
    f228:	0000cf35 	.word	0x0000cf35

0000f22c <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    f22c:	b580      	push	{r7, lr}
    f22e:	b084      	sub	sp, #16
    f230:	af00      	add	r7, sp, #0
    f232:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    f234:	687b      	ldr	r3, [r7, #4]
    f236:	2200      	movs	r2, #0
    f238:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    f23a:	f107 030f 	add.w	r3, r7, #15
    f23e:	2101      	movs	r1, #1
    f240:	4618      	mov	r0, r3
    f242:	4b08      	ldr	r3, [pc, #32]	; (f264 <_ZN9CDC_Class4readEv+0x38>)
    f244:	4798      	blx	r3
	while(!rxReady);
    f246:	687b      	ldr	r3, [r7, #4]
    f248:	7d5b      	ldrb	r3, [r3, #21]
    f24a:	b2db      	uxtb	r3, r3
    f24c:	f083 0301 	eor.w	r3, r3, #1
    f250:	b2db      	uxtb	r3, r3
    f252:	2b00      	cmp	r3, #0
    f254:	d000      	beq.n	f258 <_ZN9CDC_Class4readEv+0x2c>
    f256:	e7f6      	b.n	f246 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    f258:	7bfb      	ldrb	r3, [r7, #15]
}
    f25a:	4618      	mov	r0, r3
    f25c:	3710      	adds	r7, #16
    f25e:	46bd      	mov	sp, r7
    f260:	bd80      	pop	{r7, pc}
    f262:	bf00      	nop
    f264:	0000cf35 	.word	0x0000cf35

0000f268 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    f268:	b580      	push	{r7, lr}
    f26a:	b082      	sub	sp, #8
    f26c:	af00      	add	r7, sp, #0
    f26e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    f270:	687b      	ldr	r3, [r7, #4]
    f272:	331c      	adds	r3, #28
    f274:	2140      	movs	r1, #64	; 0x40
    f276:	4618      	mov	r0, r3
    f278:	4b02      	ldr	r3, [pc, #8]	; (f284 <_ZN9CDC_Class5flushEv+0x1c>)
    f27a:	4798      	blx	r3
}
    f27c:	bf00      	nop
    f27e:	3708      	adds	r7, #8
    f280:	46bd      	mov	sp, r7
    f282:	bd80      	pop	{r7, pc}
    f284:	0000cf79 	.word	0x0000cf79

0000f288 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    f288:	b580      	push	{r7, lr}
    f28a:	b082      	sub	sp, #8
    f28c:	af00      	add	r7, sp, #0
    f28e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    f290:	4b02      	ldr	r3, [pc, #8]	; (f29c <_ZN9CDC_Class5clearEv+0x14>)
    f292:	4798      	blx	r3
}
    f294:	bf00      	nop
    f296:	3708      	adds	r7, #8
    f298:	46bd      	mov	sp, r7
    f29a:	bd80      	pop	{r7, pc}
    f29c:	0000cfbd 	.word	0x0000cfbd

0000f2a0 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    f2a0:	b580      	push	{r7, lr}
    f2a2:	b082      	sub	sp, #8
    f2a4:	af00      	add	r7, sp, #0
    f2a6:	6078      	str	r0, [r7, #4]
    f2a8:	460b      	mov	r3, r1
    f2aa:	70fb      	strb	r3, [r7, #3]
	if (connected){
    f2ac:	687b      	ldr	r3, [r7, #4]
    f2ae:	7c1b      	ldrb	r3, [r3, #16]
    f2b0:	b2db      	uxtb	r3, r3
    f2b2:	2b00      	cmp	r3, #0
    f2b4:	d012      	beq.n	f2dc <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    f2b6:	687b      	ldr	r3, [r7, #4]
    f2b8:	7d1b      	ldrb	r3, [r3, #20]
    f2ba:	b2db      	uxtb	r3, r3
    f2bc:	f083 0301 	eor.w	r3, r3, #1
    f2c0:	b2db      	uxtb	r3, r3
    f2c2:	2b00      	cmp	r3, #0
    f2c4:	d000      	beq.n	f2c8 <_ZN9CDC_Class5writeEh+0x28>
    f2c6:	e7f6      	b.n	f2b6 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    f2c8:	687b      	ldr	r3, [r7, #4]
    f2ca:	681b      	ldr	r3, [r3, #0]
    f2cc:	3324      	adds	r3, #36	; 0x24
    f2ce:	681b      	ldr	r3, [r3, #0]
    f2d0:	1cf9      	adds	r1, r7, #3
    f2d2:	2201      	movs	r2, #1
    f2d4:	6878      	ldr	r0, [r7, #4]
    f2d6:	4798      	blx	r3
    f2d8:	4603      	mov	r3, r0
    f2da:	e000      	b.n	f2de <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    f2dc:	2300      	movs	r3, #0
	}
		
}
    f2de:	4618      	mov	r0, r3
    f2e0:	3708      	adds	r7, #8
    f2e2:	46bd      	mov	sp, r7
    f2e4:	bd80      	pop	{r7, pc}
	...

0000f2e8 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    f2e8:	b580      	push	{r7, lr}
    f2ea:	b086      	sub	sp, #24
    f2ec:	af00      	add	r7, sp, #0
    f2ee:	60f8      	str	r0, [r7, #12]
    f2f0:	60b9      	str	r1, [r7, #8]
    f2f2:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    f2f4:	68fb      	ldr	r3, [r7, #12]
    f2f6:	7c1b      	ldrb	r3, [r3, #16]
    f2f8:	b2db      	uxtb	r3, r3
    f2fa:	2b00      	cmp	r3, #0
    f2fc:	d02f      	beq.n	f35e <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    f2fe:	687a      	ldr	r2, [r7, #4]
    f300:	4613      	mov	r3, r2
    f302:	009b      	lsls	r3, r3, #2
    f304:	4413      	add	r3, r2
    f306:	005b      	lsls	r3, r3, #1
    f308:	461a      	mov	r2, r3
    f30a:	4917      	ldr	r1, [pc, #92]	; (f368 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    f30c:	4817      	ldr	r0, [pc, #92]	; (f36c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    f30e:	4b18      	ldr	r3, [pc, #96]	; (f370 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    f310:	4798      	blx	r3
		txReady=false;
    f312:	68fb      	ldr	r3, [r7, #12]
    f314:	2200      	movs	r2, #0
    f316:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    f318:	687b      	ldr	r3, [r7, #4]
    f31a:	4619      	mov	r1, r3
    f31c:	68b8      	ldr	r0, [r7, #8]
    f31e:	4b15      	ldr	r3, [pc, #84]	; (f374 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    f320:	4798      	blx	r3
    f322:	4603      	mov	r3, r0
    f324:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    f326:	68fb      	ldr	r3, [r7, #12]
    f328:	7d1b      	ldrb	r3, [r3, #20]
    f32a:	b2db      	uxtb	r3, r3
    f32c:	f083 0301 	eor.w	r3, r3, #1
    f330:	b2db      	uxtb	r3, r3
    f332:	2b00      	cmp	r3, #0
    f334:	d006      	beq.n	f344 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    f336:	68fb      	ldr	r3, [r7, #12]
    f338:	7c1b      	ldrb	r3, [r3, #16]
    f33a:	b2db      	uxtb	r3, r3
    f33c:	2b00      	cmp	r3, #0
    f33e:	d001      	beq.n	f344 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    f340:	2301      	movs	r3, #1
    f342:	e000      	b.n	f346 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    f344:	2300      	movs	r3, #0
    f346:	2b00      	cmp	r3, #0
    f348:	d000      	beq.n	f34c <_ZN9CDC_Class9writeDataEPKvl+0x64>
    f34a:	e7ec      	b.n	f326 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    f34c:	4807      	ldr	r0, [pc, #28]	; (f36c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    f34e:	4b0a      	ldr	r3, [pc, #40]	; (f378 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    f350:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    f352:	4905      	ldr	r1, [pc, #20]	; (f368 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    f354:	4805      	ldr	r0, [pc, #20]	; (f36c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    f356:	4b09      	ldr	r3, [pc, #36]	; (f37c <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    f358:	4798      	blx	r3
		return r;
    f35a:	697b      	ldr	r3, [r7, #20]
    f35c:	e000      	b.n	f360 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    f35e:	2300      	movs	r3, #0
	}
	

}
    f360:	4618      	mov	r0, r3
    f362:	3718      	adds	r7, #24
    f364:	46bd      	mov	sp, r7
    f366:	bd80      	pop	{r7, pc}
    f368:	0000ef4d 	.word	0x0000ef4d
    f36c:	20001410 	.word	0x20001410
    f370:	0000f921 	.word	0x0000f921
    f374:	0000cf79 	.word	0x0000cf79
    f378:	0000f841 	.word	0x0000f841
    f37c:	0000f985 	.word	0x0000f985

0000f380 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    f380:	b580      	push	{r7, lr}
    f382:	b086      	sub	sp, #24
    f384:	af00      	add	r7, sp, #0
    f386:	60f8      	str	r0, [r7, #12]
    f388:	60b9      	str	r1, [r7, #8]
    f38a:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    f38c:	68fb      	ldr	r3, [r7, #12]
    f38e:	2200      	movs	r2, #0
    f390:	751a      	strb	r2, [r3, #20]

 	if (connected){
    f392:	68fb      	ldr	r3, [r7, #12]
    f394:	7c1b      	ldrb	r3, [r3, #16]
    f396:	b2db      	uxtb	r3, r3
    f398:	2b00      	cmp	r3, #0
    f39a:	d02a      	beq.n	f3f2 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    f39c:	687a      	ldr	r2, [r7, #4]
    f39e:	4613      	mov	r3, r2
    f3a0:	009b      	lsls	r3, r3, #2
    f3a2:	4413      	add	r3, r2
    f3a4:	005b      	lsls	r3, r3, #1
    f3a6:	461a      	mov	r2, r3
    f3a8:	4915      	ldr	r1, [pc, #84]	; (f400 <_ZN9CDC_Class5writeEPKhj+0x80>)
    f3aa:	4816      	ldr	r0, [pc, #88]	; (f404 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f3ac:	4b16      	ldr	r3, [pc, #88]	; (f408 <_ZN9CDC_Class5writeEPKhj+0x88>)
    f3ae:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    f3b0:	6879      	ldr	r1, [r7, #4]
    f3b2:	68b8      	ldr	r0, [r7, #8]
    f3b4:	4b15      	ldr	r3, [pc, #84]	; (f40c <_ZN9CDC_Class5writeEPKhj+0x8c>)
    f3b6:	4798      	blx	r3
    f3b8:	4603      	mov	r3, r0
    f3ba:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    f3bc:	68fb      	ldr	r3, [r7, #12]
    f3be:	7d1b      	ldrb	r3, [r3, #20]
    f3c0:	b2db      	uxtb	r3, r3
    f3c2:	f083 0301 	eor.w	r3, r3, #1
    f3c6:	b2db      	uxtb	r3, r3
    f3c8:	2b00      	cmp	r3, #0
    f3ca:	d006      	beq.n	f3da <_ZN9CDC_Class5writeEPKhj+0x5a>
    f3cc:	68fb      	ldr	r3, [r7, #12]
    f3ce:	7c1b      	ldrb	r3, [r3, #16]
    f3d0:	b2db      	uxtb	r3, r3
    f3d2:	2b00      	cmp	r3, #0
    f3d4:	d001      	beq.n	f3da <_ZN9CDC_Class5writeEPKhj+0x5a>
    f3d6:	2301      	movs	r3, #1
    f3d8:	e000      	b.n	f3dc <_ZN9CDC_Class5writeEPKhj+0x5c>
    f3da:	2300      	movs	r3, #0
    f3dc:	2b00      	cmp	r3, #0
    f3de:	d000      	beq.n	f3e2 <_ZN9CDC_Class5writeEPKhj+0x62>
    f3e0:	e7ec      	b.n	f3bc <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    f3e2:	4808      	ldr	r0, [pc, #32]	; (f404 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f3e4:	4b0a      	ldr	r3, [pc, #40]	; (f410 <_ZN9CDC_Class5writeEPKhj+0x90>)
    f3e6:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    f3e8:	4905      	ldr	r1, [pc, #20]	; (f400 <_ZN9CDC_Class5writeEPKhj+0x80>)
    f3ea:	4806      	ldr	r0, [pc, #24]	; (f404 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f3ec:	4b09      	ldr	r3, [pc, #36]	; (f414 <_ZN9CDC_Class5writeEPKhj+0x94>)
    f3ee:	4798      	blx	r3
    f3f0:	e001      	b.n	f3f6 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    f3f2:	2300      	movs	r3, #0
    f3f4:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    f3f6:	697b      	ldr	r3, [r7, #20]
}
    f3f8:	4618      	mov	r0, r3
    f3fa:	3718      	adds	r7, #24
    f3fc:	46bd      	mov	sp, r7
    f3fe:	bd80      	pop	{r7, pc}
    f400:	0000ef4d 	.word	0x0000ef4d
    f404:	20001410 	.word	0x20001410
    f408:	0000f921 	.word	0x0000f921
    f40c:	0000cf79 	.word	0x0000cf79
    f410:	0000f841 	.word	0x0000f841
    f414:	0000f985 	.word	0x0000f985

0000f418 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    f418:	b480      	push	{r7}
    f41a:	b083      	sub	sp, #12
    f41c:	af00      	add	r7, sp, #0
    f41e:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    f420:	687b      	ldr	r3, [r7, #4]
    f422:	7d5b      	ldrb	r3, [r3, #21]
    f424:	b2db      	uxtb	r3, r3
    f426:	2b00      	cmp	r3, #0
    f428:	d006      	beq.n	f438 <_ZN9CDC_Class9availableEv+0x20>
    f42a:	687b      	ldr	r3, [r7, #4]
    f42c:	7d1b      	ldrb	r3, [r3, #20]
    f42e:	b2db      	uxtb	r3, r3
    f430:	2b00      	cmp	r3, #0
    f432:	d001      	beq.n	f438 <_ZN9CDC_Class9availableEv+0x20>
    f434:	2301      	movs	r3, #1
    f436:	e000      	b.n	f43a <_ZN9CDC_Class9availableEv+0x22>
    f438:	2300      	movs	r3, #0
    f43a:	2b00      	cmp	r3, #0
    f43c:	d001      	beq.n	f442 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    f43e:	2301      	movs	r3, #1
    f440:	e000      	b.n	f444 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    f442:	2300      	movs	r3, #0
	}
	
}
    f444:	4618      	mov	r0, r3
    f446:	370c      	adds	r7, #12
    f448:	46bd      	mov	sp, r7
    f44a:	bc80      	pop	{r7}
    f44c:	4770      	bx	lr
	...

0000f450 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    f450:	b580      	push	{r7, lr}
    f452:	b082      	sub	sp, #8
    f454:	af00      	add	r7, sp, #0
    f456:	6078      	str	r0, [r7, #4]
    f458:	6039      	str	r1, [r7, #0]
    f45a:	687b      	ldr	r3, [r7, #4]
    f45c:	2b01      	cmp	r3, #1
    f45e:	d10c      	bne.n	f47a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    f460:	683b      	ldr	r3, [r7, #0]
    f462:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f466:	4293      	cmp	r3, r2
    f468:	d107      	bne.n	f47a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    f46a:	4806      	ldr	r0, [pc, #24]	; (f484 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    f46c:	4b06      	ldr	r3, [pc, #24]	; (f488 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    f46e:	4798      	blx	r3
    f470:	4a06      	ldr	r2, [pc, #24]	; (f48c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    f472:	4907      	ldr	r1, [pc, #28]	; (f490 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    f474:	4803      	ldr	r0, [pc, #12]	; (f484 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    f476:	4b07      	ldr	r3, [pc, #28]	; (f494 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    f478:	4798      	blx	r3
    f47a:	bf00      	nop
    f47c:	3708      	adds	r7, #8
    f47e:	46bd      	mov	sp, r7
    f480:	bd80      	pop	{r7, pc}
    f482:	bf00      	nop
    f484:	20001358 	.word	0x20001358
    f488:	0000f03d 	.word	0x0000f03d
    f48c:	20000000 	.word	0x20000000
    f490:	0000f085 	.word	0x0000f085
    f494:	00010009 	.word	0x00010009

0000f498 <_GLOBAL__sub_I_ptrCDCClass>:
    f498:	b580      	push	{r7, lr}
    f49a:	af00      	add	r7, sp, #0
    f49c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f4a0:	2001      	movs	r0, #1
    f4a2:	4b01      	ldr	r3, [pc, #4]	; (f4a8 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    f4a4:	4798      	blx	r3
    f4a6:	bd80      	pop	{r7, pc}
    f4a8:	0000f451 	.word	0x0000f451

0000f4ac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    f4ac:	b580      	push	{r7, lr}
    f4ae:	b086      	sub	sp, #24
    f4b0:	af00      	add	r7, sp, #0
    f4b2:	60f8      	str	r0, [r7, #12]
    f4b4:	60b9      	str	r1, [r7, #8]
    f4b6:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    f4b8:	2300      	movs	r3, #0
    f4ba:	617b      	str	r3, [r7, #20]
  while (size--) {
    f4bc:	687b      	ldr	r3, [r7, #4]
    f4be:	1e5a      	subs	r2, r3, #1
    f4c0:	607a      	str	r2, [r7, #4]
    f4c2:	2b00      	cmp	r3, #0
    f4c4:	bf14      	ite	ne
    f4c6:	2301      	movne	r3, #1
    f4c8:	2300      	moveq	r3, #0
    f4ca:	b2db      	uxtb	r3, r3
    f4cc:	2b00      	cmp	r3, #0
    f4ce:	d016      	beq.n	f4fe <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    f4d0:	68fb      	ldr	r3, [r7, #12]
    f4d2:	681b      	ldr	r3, [r3, #0]
    f4d4:	681a      	ldr	r2, [r3, #0]
    f4d6:	68bb      	ldr	r3, [r7, #8]
    f4d8:	1c59      	adds	r1, r3, #1
    f4da:	60b9      	str	r1, [r7, #8]
    f4dc:	781b      	ldrb	r3, [r3, #0]
    f4de:	4619      	mov	r1, r3
    f4e0:	68f8      	ldr	r0, [r7, #12]
    f4e2:	4790      	blx	r2
    f4e4:	4603      	mov	r3, r0
    f4e6:	2b00      	cmp	r3, #0
    f4e8:	bf14      	ite	ne
    f4ea:	2301      	movne	r3, #1
    f4ec:	2300      	moveq	r3, #0
    f4ee:	b2db      	uxtb	r3, r3
    f4f0:	2b00      	cmp	r3, #0
    f4f2:	d003      	beq.n	f4fc <_ZN5Print5writeEPKhj+0x50>
    f4f4:	697b      	ldr	r3, [r7, #20]
    f4f6:	3301      	adds	r3, #1
    f4f8:	617b      	str	r3, [r7, #20]
  while (size--) {
    f4fa:	e7df      	b.n	f4bc <_ZN5Print5writeEPKhj+0x10>
    else break;
    f4fc:	bf00      	nop
  }
  return n;
    f4fe:	697b      	ldr	r3, [r7, #20]
}
    f500:	4618      	mov	r0, r3
    f502:	3718      	adds	r7, #24
    f504:	46bd      	mov	sp, r7
    f506:	bd80      	pop	{r7, pc}

0000f508 <hri_port_read_DIR_reg>:
{
    f508:	b480      	push	{r7}
    f50a:	b083      	sub	sp, #12
    f50c:	af00      	add	r7, sp, #0
    f50e:	6078      	str	r0, [r7, #4]
    f510:	460b      	mov	r3, r1
    f512:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    f514:	78fb      	ldrb	r3, [r7, #3]
    f516:	687a      	ldr	r2, [r7, #4]
    f518:	01db      	lsls	r3, r3, #7
    f51a:	4413      	add	r3, r2
    f51c:	681b      	ldr	r3, [r3, #0]
}
    f51e:	4618      	mov	r0, r3
    f520:	370c      	adds	r7, #12
    f522:	46bd      	mov	sp, r7
    f524:	bc80      	pop	{r7}
    f526:	4770      	bx	lr

0000f528 <hri_port_read_OUT_reg>:
{
    f528:	b480      	push	{r7}
    f52a:	b083      	sub	sp, #12
    f52c:	af00      	add	r7, sp, #0
    f52e:	6078      	str	r0, [r7, #4]
    f530:	460b      	mov	r3, r1
    f532:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    f534:	78fb      	ldrb	r3, [r7, #3]
    f536:	687a      	ldr	r2, [r7, #4]
    f538:	01db      	lsls	r3, r3, #7
    f53a:	4413      	add	r3, r2
    f53c:	3310      	adds	r3, #16
    f53e:	681b      	ldr	r3, [r3, #0]
}
    f540:	4618      	mov	r0, r3
    f542:	370c      	adds	r7, #12
    f544:	46bd      	mov	sp, r7
    f546:	bc80      	pop	{r7}
    f548:	4770      	bx	lr

0000f54a <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    f54a:	b480      	push	{r7}
    f54c:	b083      	sub	sp, #12
    f54e:	af00      	add	r7, sp, #0
    f550:	6078      	str	r0, [r7, #4]
    f552:	460b      	mov	r3, r1
    f554:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    f556:	78fb      	ldrb	r3, [r7, #3]
    f558:	687a      	ldr	r2, [r7, #4]
    f55a:	01db      	lsls	r3, r3, #7
    f55c:	4413      	add	r3, r2
    f55e:	3320      	adds	r3, #32
    f560:	681b      	ldr	r3, [r3, #0]
}
    f562:	4618      	mov	r0, r3
    f564:	370c      	adds	r7, #12
    f566:	46bd      	mov	sp, r7
    f568:	bc80      	pop	{r7}
    f56a:	4770      	bx	lr

0000f56c <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    f56c:	b580      	push	{r7, lr}
    f56e:	b086      	sub	sp, #24
    f570:	af00      	add	r7, sp, #0
    f572:	4603      	mov	r3, r0
    f574:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    f576:	f107 030c 	add.w	r3, r7, #12
    f57a:	4618      	mov	r0, r3
    f57c:	4b13      	ldr	r3, [pc, #76]	; (f5cc <_gpio_get_level+0x60>)
    f57e:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    f580:	79fb      	ldrb	r3, [r7, #7]
    f582:	4619      	mov	r1, r3
    f584:	4812      	ldr	r0, [pc, #72]	; (f5d0 <_gpio_get_level+0x64>)
    f586:	4b13      	ldr	r3, [pc, #76]	; (f5d4 <_gpio_get_level+0x68>)
    f588:	4798      	blx	r3
    f58a:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    f58c:	79fb      	ldrb	r3, [r7, #7]
    f58e:	4619      	mov	r1, r3
    f590:	480f      	ldr	r0, [pc, #60]	; (f5d0 <_gpio_get_level+0x64>)
    f592:	4b11      	ldr	r3, [pc, #68]	; (f5d8 <_gpio_get_level+0x6c>)
    f594:	4798      	blx	r3
    f596:	4602      	mov	r2, r0
    f598:	697b      	ldr	r3, [r7, #20]
    f59a:	43db      	mvns	r3, r3
    f59c:	4013      	ands	r3, r2
    f59e:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    f5a0:	79fb      	ldrb	r3, [r7, #7]
    f5a2:	4619      	mov	r1, r3
    f5a4:	480a      	ldr	r0, [pc, #40]	; (f5d0 <_gpio_get_level+0x64>)
    f5a6:	4b0d      	ldr	r3, [pc, #52]	; (f5dc <_gpio_get_level+0x70>)
    f5a8:	4798      	blx	r3
    f5aa:	4602      	mov	r2, r0
    f5ac:	697b      	ldr	r3, [r7, #20]
    f5ae:	4013      	ands	r3, r2
    f5b0:	693a      	ldr	r2, [r7, #16]
    f5b2:	4313      	orrs	r3, r2
    f5b4:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    f5b6:	f107 030c 	add.w	r3, r7, #12
    f5ba:	4618      	mov	r0, r3
    f5bc:	4b08      	ldr	r3, [pc, #32]	; (f5e0 <_gpio_get_level+0x74>)
    f5be:	4798      	blx	r3

	return tmp;
    f5c0:	693b      	ldr	r3, [r7, #16]
}
    f5c2:	4618      	mov	r0, r3
    f5c4:	3718      	adds	r7, #24
    f5c6:	46bd      	mov	sp, r7
    f5c8:	bd80      	pop	{r7, pc}
    f5ca:	bf00      	nop
    f5cc:	0000c155 	.word	0x0000c155
    f5d0:	41008000 	.word	0x41008000
    f5d4:	0000f509 	.word	0x0000f509
    f5d8:	0000f54b 	.word	0x0000f54b
    f5dc:	0000f529 	.word	0x0000f529
    f5e0:	0000c17b 	.word	0x0000c17b

0000f5e4 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    f5e4:	b580      	push	{r7, lr}
    f5e6:	b082      	sub	sp, #8
    f5e8:	af00      	add	r7, sp, #0
    f5ea:	4603      	mov	r3, r0
    f5ec:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    f5ee:	79fb      	ldrb	r3, [r7, #7]
    f5f0:	115b      	asrs	r3, r3, #5
    f5f2:	b2db      	uxtb	r3, r3
    f5f4:	4618      	mov	r0, r3
    f5f6:	4b09      	ldr	r3, [pc, #36]	; (f61c <gpio_get_pin_level+0x38>)
    f5f8:	4798      	blx	r3
    f5fa:	4601      	mov	r1, r0
    f5fc:	79fb      	ldrb	r3, [r7, #7]
    f5fe:	f003 031f 	and.w	r3, r3, #31
    f602:	2201      	movs	r2, #1
    f604:	fa02 f303 	lsl.w	r3, r2, r3
    f608:	400b      	ands	r3, r1
    f60a:	2b00      	cmp	r3, #0
    f60c:	bf14      	ite	ne
    f60e:	2301      	movne	r3, #1
    f610:	2300      	moveq	r3, #0
    f612:	b2db      	uxtb	r3, r3
}
    f614:	4618      	mov	r0, r3
    f616:	3708      	adds	r7, #8
    f618:	46bd      	mov	sp, r7
    f61a:	bd80      	pop	{r7, pc}
    f61c:	0000f56d 	.word	0x0000f56d

0000f620 <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    f620:	b480      	push	{r7}
    f622:	b083      	sub	sp, #12
    f624:	af00      	add	r7, sp, #0
    f626:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    f628:	4b06      	ldr	r3, [pc, #24]	; (f644 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f62a:	681b      	ldr	r3, [r3, #0]
    f62c:	2201      	movs	r2, #1
    f62e:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    f630:	4b04      	ldr	r3, [pc, #16]	; (f644 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f632:	681b      	ldr	r3, [r3, #0]
    f634:	2200      	movs	r2, #0
    f636:	705a      	strb	r2, [r3, #1]
}
    f638:	bf00      	nop
    f63a:	370c      	adds	r7, #12
    f63c:	46bd      	mov	sp, r7
    f63e:	bc80      	pop	{r7}
    f640:	4770      	bx	lr
    f642:	bf00      	nop
    f644:	200013b8 	.word	0x200013b8

0000f648 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    f648:	b580      	push	{r7, lr}
    f64a:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    f64c:	2040      	movs	r0, #64	; 0x40
    f64e:	4b0a      	ldr	r3, [pc, #40]	; (f678 <_ZL10USBPluggedv+0x30>)
    f650:	4798      	blx	r3
    f652:	4603      	mov	r3, r0
    f654:	2b00      	cmp	r3, #0
    f656:	d004      	beq.n	f662 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    f658:	4b08      	ldr	r3, [pc, #32]	; (f67c <_ZL10USBPluggedv+0x34>)
    f65a:	681b      	ldr	r3, [r3, #0]
    f65c:	2201      	movs	r2, #1
    f65e:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    f660:	e007      	b.n	f672 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    f662:	4b06      	ldr	r3, [pc, #24]	; (f67c <_ZL10USBPluggedv+0x34>)
    f664:	681b      	ldr	r3, [r3, #0]
    f666:	2200      	movs	r2, #0
    f668:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    f66a:	4b04      	ldr	r3, [pc, #16]	; (f67c <_ZL10USBPluggedv+0x34>)
    f66c:	681b      	ldr	r3, [r3, #0]
    f66e:	2200      	movs	r2, #0
    f670:	701a      	strb	r2, [r3, #0]
}
    f672:	bf00      	nop
    f674:	bd80      	pop	{r7, pc}
    f676:	bf00      	nop
    f678:	0000f5e5 	.word	0x0000f5e5
    f67c:	200013b8 	.word	0x200013b8

0000f680 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    f680:	b480      	push	{r7}
    f682:	b083      	sub	sp, #12
    f684:	af00      	add	r7, sp, #0
    f686:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    f688:	4a04      	ldr	r2, [pc, #16]	; (f69c <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    f68a:	687b      	ldr	r3, [r7, #4]
    f68c:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    f68e:	687b      	ldr	r3, [r7, #4]
    f690:	4618      	mov	r0, r3
    f692:	370c      	adds	r7, #12
    f694:	46bd      	mov	sp, r7
    f696:	bc80      	pop	{r7}
    f698:	4770      	bx	lr
    f69a:	bf00      	nop
    f69c:	200013b8 	.word	0x200013b8

0000f6a0 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    f6a0:	b480      	push	{r7}
    f6a2:	b083      	sub	sp, #12
    f6a4:	af00      	add	r7, sp, #0
    f6a6:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    f6a8:	687b      	ldr	r3, [r7, #4]
    f6aa:	4618      	mov	r0, r3
    f6ac:	370c      	adds	r7, #12
    f6ae:	46bd      	mov	sp, r7
    f6b0:	bc80      	pop	{r7}
    f6b2:	4770      	bx	lr

0000f6b4 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    f6b4:	b580      	push	{r7, lr}
    f6b6:	b082      	sub	sp, #8
    f6b8:	af00      	add	r7, sp, #0
    f6ba:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    f6bc:	491f      	ldr	r1, [pc, #124]	; (f73c <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    f6be:	2040      	movs	r0, #64	; 0x40
    f6c0:	4b1f      	ldr	r3, [pc, #124]	; (f740 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    f6c2:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    f6c4:	481f      	ldr	r0, [pc, #124]	; (f744 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f6c6:	4b20      	ldr	r3, [pc, #128]	; (f748 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    f6c8:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    f6ca:	2040      	movs	r0, #64	; 0x40
    f6cc:	4b1f      	ldr	r3, [pc, #124]	; (f74c <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    f6ce:	4798      	blx	r3
    f6d0:	4603      	mov	r3, r0
    f6d2:	461a      	mov	r2, r3
    f6d4:	687b      	ldr	r3, [r7, #4]
    f6d6:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    f6d8:	687b      	ldr	r3, [r7, #4]
    f6da:	78db      	ldrb	r3, [r3, #3]
    f6dc:	2b00      	cmp	r3, #0
    f6de:	d024      	beq.n	f72a <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
    f6e0:	687b      	ldr	r3, [r7, #4]
    f6e2:	2200      	movs	r2, #0
    f6e4:	709a      	strb	r2, [r3, #2]
			plugged=true;
    f6e6:	687b      	ldr	r3, [r7, #4]
    f6e8:	2201      	movs	r2, #1
    f6ea:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    f6ec:	f44f 7216 	mov.w	r2, #600	; 0x258
    f6f0:	4917      	ldr	r1, [pc, #92]	; (f750 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    f6f2:	4814      	ldr	r0, [pc, #80]	; (f744 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f6f4:	4b17      	ldr	r3, [pc, #92]	; (f754 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    f6f6:	4798      	blx	r3
			usbTerminalTimer.Start();
    f6f8:	4812      	ldr	r0, [pc, #72]	; (f744 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f6fa:	4b17      	ldr	r3, [pc, #92]	; (f758 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    f6fc:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    f6fe:	4817      	ldr	r0, [pc, #92]	; (f75c <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    f700:	4b17      	ldr	r3, [pc, #92]	; (f760 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
    f702:	4798      	blx	r3
    f704:	4603      	mov	r3, r0
    f706:	f083 0301 	eor.w	r3, r3, #1
    f70a:	b2db      	uxtb	r3, r3
    f70c:	2b00      	cmp	r3, #0
    f70e:	d008      	beq.n	f722 <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
    f710:	687b      	ldr	r3, [r7, #4]
    f712:	789b      	ldrb	r3, [r3, #2]
    f714:	b2db      	uxtb	r3, r3
    f716:	2b00      	cmp	r3, #0
    f718:	d0f1      	beq.n	f6fe <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
    f71a:	687b      	ldr	r3, [r7, #4]
    f71c:	2200      	movs	r2, #0
    f71e:	701a      	strb	r2, [r3, #0]
					return;
    f720:	e009      	b.n	f736 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    f722:	4808      	ldr	r0, [pc, #32]	; (f744 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f724:	4b0f      	ldr	r3, [pc, #60]	; (f764 <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
    f726:	4798      	blx	r3
    f728:	e005      	b.n	f736 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
    f72a:	687b      	ldr	r3, [r7, #4]
    f72c:	2200      	movs	r2, #0
    f72e:	701a      	strb	r2, [r3, #0]
			plugged=false;
    f730:	687b      	ldr	r3, [r7, #4]
    f732:	2200      	movs	r2, #0
    f734:	705a      	strb	r2, [r3, #1]
		}
		
}
    f736:	3708      	adds	r7, #8
    f738:	46bd      	mov	sp, r7
    f73a:	bd80      	pop	{r7, pc}
    f73c:	0000f649 	.word	0x0000f649
    f740:	00002809 	.word	0x00002809
    f744:	20001410 	.word	0x20001410
    f748:	0000f7e5 	.word	0x0000f7e5
    f74c:	0000f5e5 	.word	0x0000f5e5
    f750:	0000f621 	.word	0x0000f621
    f754:	0000f8f9 	.word	0x0000f8f9
    f758:	0000f81d 	.word	0x0000f81d
    f75c:	20001358 	.word	0x20001358
    f760:	0000f0f5 	.word	0x0000f0f5
    f764:	0000f841 	.word	0x0000f841

0000f768 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    f768:	b580      	push	{r7, lr}
    f76a:	b082      	sub	sp, #8
    f76c:	af00      	add	r7, sp, #0
    f76e:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    f770:	4b04      	ldr	r3, [pc, #16]	; (f784 <_ZL7task_cbPK10timer_task+0x1c>)
    f772:	681b      	ldr	r3, [r3, #0]
    f774:	4618      	mov	r0, r3
    f776:	4b04      	ldr	r3, [pc, #16]	; (f788 <_ZL7task_cbPK10timer_task+0x20>)
    f778:	4798      	blx	r3
}
    f77a:	bf00      	nop
    f77c:	3708      	adds	r7, #8
    f77e:	46bd      	mov	sp, r7
    f780:	bd80      	pop	{r7, pc}
    f782:	bf00      	nop
    f784:	200013bc 	.word	0x200013bc
    f788:	0000f869 	.word	0x0000f869

0000f78c <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    f78c:	b480      	push	{r7}
    f78e:	b083      	sub	sp, #12
    f790:	af00      	add	r7, sp, #0
    f792:	6078      	str	r0, [r7, #4]
    f794:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    f796:	687b      	ldr	r3, [r7, #4]
    f798:	683a      	ldr	r2, [r7, #0]
    f79a:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
    f79c:	4a08      	ldr	r2, [pc, #32]	; (f7c0 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    f79e:	687b      	ldr	r3, [r7, #4]
    f7a0:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    f7a2:	687b      	ldr	r3, [r7, #4]
    f7a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f7a8:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
    f7aa:	687b      	ldr	r3, [r7, #4]
    f7ac:	689b      	ldr	r3, [r3, #8]
    f7ae:	4a05      	ldr	r2, [pc, #20]	; (f7c4 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    f7b0:	60da      	str	r2, [r3, #12]
} //Timer_Class
    f7b2:	687b      	ldr	r3, [r7, #4]
    f7b4:	4618      	mov	r0, r3
    f7b6:	370c      	adds	r7, #12
    f7b8:	46bd      	mov	sp, r7
    f7ba:	bc80      	pop	{r7}
    f7bc:	4770      	bx	lr
    f7be:	bf00      	nop
    f7c0:	200013bc 	.word	0x200013bc
    f7c4:	0000f769 	.word	0x0000f769

0000f7c8 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    f7c8:	b480      	push	{r7}
    f7ca:	b083      	sub	sp, #12
    f7cc:	af00      	add	r7, sp, #0
    f7ce:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    f7d0:	687b      	ldr	r3, [r7, #4]
    f7d2:	2200      	movs	r2, #0
    f7d4:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    f7d6:	687b      	ldr	r3, [r7, #4]
    f7d8:	4618      	mov	r0, r3
    f7da:	370c      	adds	r7, #12
    f7dc:	46bd      	mov	sp, r7
    f7de:	bc80      	pop	{r7}
    f7e0:	4770      	bx	lr
	...

0000f7e4 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
    f7e4:	b580      	push	{r7, lr}
    f7e6:	b082      	sub	sp, #8
    f7e8:	af00      	add	r7, sp, #0
    f7ea:	6078      	str	r0, [r7, #4]
	
	ticks=0;
    f7ec:	687b      	ldr	r3, [r7, #4]
    f7ee:	2200      	movs	r2, #0
    f7f0:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
    f7f2:	6878      	ldr	r0, [r7, #4]
    f7f4:	4b08      	ldr	r3, [pc, #32]	; (f818 <_ZN17TimerSerial_Class4InitEv+0x34>)
    f7f6:	4798      	blx	r3
    f7f8:	4603      	mov	r3, r0
    f7fa:	2b00      	cmp	r3, #0
    f7fc:	bf0c      	ite	eq
    f7fe:	2301      	moveq	r3, #1
    f800:	2300      	movne	r3, #0
    f802:	b2da      	uxtb	r2, r3
    f804:	687b      	ldr	r3, [r7, #4]
    f806:	709a      	strb	r2, [r3, #2]
	return isOK;
    f808:	687b      	ldr	r3, [r7, #4]
    f80a:	789b      	ldrb	r3, [r3, #2]
    f80c:	b2db      	uxtb	r3, r3
}
    f80e:	4618      	mov	r0, r3
    f810:	3708      	adds	r7, #8
    f812:	46bd      	mov	sp, r7
    f814:	bd80      	pop	{r7, pc}
    f816:	bf00      	nop
    f818:	0000f81d 	.word	0x0000f81d

0000f81c <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    f81c:	b580      	push	{r7, lr}
    f81e:	b084      	sub	sp, #16
    f820:	af00      	add	r7, sp, #0
    f822:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    f824:	687b      	ldr	r3, [r7, #4]
    f826:	691b      	ldr	r3, [r3, #16]
    f828:	4618      	mov	r0, r3
    f82a:	4b04      	ldr	r3, [pc, #16]	; (f83c <_ZN17TimerSerial_Class5StartEv+0x20>)
    f82c:	4798      	blx	r3
    f82e:	60f8      	str	r0, [r7, #12]
	return status;
    f830:	68fb      	ldr	r3, [r7, #12]
	
}
    f832:	4618      	mov	r0, r3
    f834:	3710      	adds	r7, #16
    f836:	46bd      	mov	sp, r7
    f838:	bd80      	pop	{r7, pc}
    f83a:	bf00      	nop
    f83c:	0000323d 	.word	0x0000323d

0000f840 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    f840:	b580      	push	{r7, lr}
    f842:	b084      	sub	sp, #16
    f844:	af00      	add	r7, sp, #0
    f846:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    f848:	687b      	ldr	r3, [r7, #4]
    f84a:	691b      	ldr	r3, [r3, #16]
    f84c:	4618      	mov	r0, r3
    f84e:	4b05      	ldr	r3, [pc, #20]	; (f864 <_ZN17TimerSerial_Class4StopEv+0x24>)
    f850:	4798      	blx	r3
    f852:	60f8      	str	r0, [r7, #12]
	timeout=0;
    f854:	687b      	ldr	r3, [r7, #4]
    f856:	2200      	movs	r2, #0
    f858:	705a      	strb	r2, [r3, #1]
	return status;
    f85a:	68fb      	ldr	r3, [r7, #12]
}
    f85c:	4618      	mov	r0, r3
    f85e:	3710      	adds	r7, #16
    f860:	46bd      	mov	sp, r7
    f862:	bd80      	pop	{r7, pc}
    f864:	000032a5 	.word	0x000032a5

0000f868 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    f868:	b480      	push	{r7}
    f86a:	b083      	sub	sp, #12
    f86c:	af00      	add	r7, sp, #0
    f86e:	6078      	str	r0, [r7, #4]
	timeout=1;
    f870:	687b      	ldr	r3, [r7, #4]
    f872:	2201      	movs	r2, #1
    f874:	705a      	strb	r2, [r3, #1]
}
    f876:	bf00      	nop
    f878:	370c      	adds	r7, #12
    f87a:	46bd      	mov	sp, r7
    f87c:	bc80      	pop	{r7}
    f87e:	4770      	bx	lr

0000f880 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    f880:	b580      	push	{r7, lr}
    f882:	b086      	sub	sp, #24
    f884:	af00      	add	r7, sp, #0
    f886:	60f8      	str	r0, [r7, #12]
    f888:	60b9      	str	r1, [r7, #8]
    f88a:	607a      	str	r2, [r7, #4]
    f88c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    f88e:	68f8      	ldr	r0, [r7, #12]
    f890:	4b0d      	ldr	r3, [pc, #52]	; (f8c8 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    f892:	4798      	blx	r3
	task->interval = interval;
    f894:	68fb      	ldr	r3, [r7, #12]
    f896:	689b      	ldr	r3, [r3, #8]
    f898:	687a      	ldr	r2, [r7, #4]
    f89a:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    f89c:	68fb      	ldr	r3, [r7, #12]
    f89e:	689b      	ldr	r3, [r3, #8]
    f8a0:	68ba      	ldr	r2, [r7, #8]
    f8a2:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    f8a4:	68fb      	ldr	r3, [r7, #12]
    f8a6:	689b      	ldr	r3, [r3, #8]
    f8a8:	78fa      	ldrb	r2, [r7, #3]
    f8aa:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    f8ac:	68fb      	ldr	r3, [r7, #12]
    f8ae:	691a      	ldr	r2, [r3, #16]
    f8b0:	68fb      	ldr	r3, [r7, #12]
    f8b2:	689b      	ldr	r3, [r3, #8]
    f8b4:	4619      	mov	r1, r3
    f8b6:	4610      	mov	r0, r2
    f8b8:	4b04      	ldr	r3, [pc, #16]	; (f8cc <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    f8ba:	4798      	blx	r3
    f8bc:	6178      	str	r0, [r7, #20]
	
	return status;
    f8be:	697b      	ldr	r3, [r7, #20]
}
    f8c0:	4618      	mov	r0, r3
    f8c2:	3718      	adds	r7, #24
    f8c4:	46bd      	mov	sp, r7
    f8c6:	bd80      	pop	{r7, pc}
    f8c8:	0000f9dd 	.word	0x0000f9dd
    f8cc:	00003311 	.word	0x00003311

0000f8d0 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    f8d0:	b590      	push	{r4, r7, lr}
    f8d2:	b087      	sub	sp, #28
    f8d4:	af00      	add	r7, sp, #0
    f8d6:	60f8      	str	r0, [r7, #12]
    f8d8:	60b9      	str	r1, [r7, #8]
    f8da:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    f8dc:	2301      	movs	r3, #1
    f8de:	687a      	ldr	r2, [r7, #4]
    f8e0:	68b9      	ldr	r1, [r7, #8]
    f8e2:	68f8      	ldr	r0, [r7, #12]
    f8e4:	4c03      	ldr	r4, [pc, #12]	; (f8f4 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm+0x24>)
    f8e6:	47a0      	blx	r4
    f8e8:	6178      	str	r0, [r7, #20]
		return status;
    f8ea:	697b      	ldr	r3, [r7, #20]
}
    f8ec:	4618      	mov	r0, r3
    f8ee:	371c      	adds	r7, #28
    f8f0:	46bd      	mov	sp, r7
    f8f2:	bd90      	pop	{r4, r7, pc}
    f8f4:	0000f881 	.word	0x0000f881

0000f8f8 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    f8f8:	b590      	push	{r4, r7, lr}
    f8fa:	b087      	sub	sp, #28
    f8fc:	af00      	add	r7, sp, #0
    f8fe:	60f8      	str	r0, [r7, #12]
    f900:	60b9      	str	r1, [r7, #8]
    f902:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    f904:	2300      	movs	r3, #0
    f906:	687a      	ldr	r2, [r7, #4]
    f908:	68b9      	ldr	r1, [r7, #8]
    f90a:	68f8      	ldr	r0, [r7, #12]
    f90c:	4c03      	ldr	r4, [pc, #12]	; (f91c <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    f90e:	47a0      	blx	r4
    f910:	6178      	str	r0, [r7, #20]
	return status;
    f912:	697b      	ldr	r3, [r7, #20]
}
    f914:	4618      	mov	r0, r3
    f916:	371c      	adds	r7, #28
    f918:	46bd      	mov	sp, r7
    f91a:	bd90      	pop	{r4, r7, pc}
    f91c:	0000f881 	.word	0x0000f881

0000f920 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    f920:	b590      	push	{r4, r7, lr}
    f922:	b087      	sub	sp, #28
    f924:	af00      	add	r7, sp, #0
    f926:	60f8      	str	r0, [r7, #12]
    f928:	60b9      	str	r1, [r7, #8]
    f92a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    f92c:	2300      	movs	r3, #0
    f92e:	687a      	ldr	r2, [r7, #4]
    f930:	68b9      	ldr	r1, [r7, #8]
    f932:	68f8      	ldr	r0, [r7, #12]
    f934:	4c06      	ldr	r4, [pc, #24]	; (f950 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    f936:	47a0      	blx	r4
    f938:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    f93a:	68fb      	ldr	r3, [r7, #12]
    f93c:	691b      	ldr	r3, [r3, #16]
    f93e:	4618      	mov	r0, r3
    f940:	4b04      	ldr	r3, [pc, #16]	; (f954 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    f942:	4798      	blx	r3
    f944:	6178      	str	r0, [r7, #20]
	return status;
    f946:	697b      	ldr	r3, [r7, #20]
}
    f948:	4618      	mov	r0, r3
    f94a:	371c      	adds	r7, #28
    f94c:	46bd      	mov	sp, r7
    f94e:	bd90      	pop	{r4, r7, pc}
    f950:	0000f881 	.word	0x0000f881
    f954:	0000323d 	.word	0x0000323d

0000f958 <_ZN17TimerSerial_Class11Remove_taskEv>:

void	TimerSerial_Class::Remove_task(void){
    f958:	b580      	push	{r7, lr}
    f95a:	b082      	sub	sp, #8
    f95c:	af00      	add	r7, sp, #0
    f95e:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
    f960:	687b      	ldr	r3, [r7, #4]
    f962:	691a      	ldr	r2, [r3, #16]
    f964:	687b      	ldr	r3, [r7, #4]
    f966:	689b      	ldr	r3, [r3, #8]
    f968:	4619      	mov	r1, r3
    f96a:	4610      	mov	r0, r2
    f96c:	4b04      	ldr	r3, [pc, #16]	; (f980 <_ZN17TimerSerial_Class11Remove_taskEv+0x28>)
    f96e:	4798      	blx	r3
	task->cb=NULL;
    f970:	687b      	ldr	r3, [r7, #4]
    f972:	689b      	ldr	r3, [r3, #8]
    f974:	2200      	movs	r2, #0
    f976:	60da      	str	r2, [r3, #12]
}
    f978:	bf00      	nop
    f97a:	3708      	adds	r7, #8
    f97c:	46bd      	mov	sp, r7
    f97e:	bd80      	pop	{r7, pc}
    f980:	00003415 	.word	0x00003415

0000f984 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    f984:	b580      	push	{r7, lr}
    f986:	b082      	sub	sp, #8
    f988:	af00      	add	r7, sp, #0
    f98a:	6078      	str	r0, [r7, #4]
    f98c:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    f98e:	6839      	ldr	r1, [r7, #0]
    f990:	6878      	ldr	r0, [r7, #4]
    f992:	4b0f      	ldr	r3, [pc, #60]	; (f9d0 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    f994:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    f996:	687b      	ldr	r3, [r7, #4]
    f998:	691b      	ldr	r3, [r3, #16]
    f99a:	f103 0218 	add.w	r2, r3, #24
    f99e:	687b      	ldr	r3, [r7, #4]
    f9a0:	689b      	ldr	r3, [r3, #8]
    f9a2:	4619      	mov	r1, r3
    f9a4:	4610      	mov	r0, r2
    f9a6:	4b0b      	ldr	r3, [pc, #44]	; (f9d4 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    f9a8:	4798      	blx	r3
    f9aa:	4603      	mov	r3, r0
    f9ac:	2b00      	cmp	r3, #0
    f9ae:	d007      	beq.n	f9c0 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    f9b0:	687b      	ldr	r3, [r7, #4]
    f9b2:	691a      	ldr	r2, [r3, #16]
    f9b4:	687b      	ldr	r3, [r7, #4]
    f9b6:	689b      	ldr	r3, [r3, #8]
    f9b8:	4619      	mov	r1, r3
    f9ba:	4610      	mov	r0, r2
    f9bc:	4b06      	ldr	r3, [pc, #24]	; (f9d8 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    f9be:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    f9c0:	687b      	ldr	r3, [r7, #4]
    f9c2:	689b      	ldr	r3, [r3, #8]
    f9c4:	2200      	movs	r2, #0
    f9c6:	60da      	str	r2, [r3, #12]
}
    f9c8:	bf00      	nop
    f9ca:	3708      	adds	r7, #8
    f9cc:	46bd      	mov	sp, r7
    f9ce:	bd80      	pop	{r7, pc}
    f9d0:	0000fa35 	.word	0x0000fa35
    f9d4:	00003ffd 	.word	0x00003ffd
    f9d8:	00003415 	.word	0x00003415

0000f9dc <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    f9dc:	b480      	push	{r7}
    f9de:	b085      	sub	sp, #20
    f9e0:	af00      	add	r7, sp, #0
    f9e2:	6078      	str	r0, [r7, #4]
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    f9e4:	2300      	movs	r3, #0
    f9e6:	73fb      	strb	r3, [r7, #15]
    f9e8:	7bfb      	ldrb	r3, [r7, #15]
    f9ea:	2b03      	cmp	r3, #3
    f9ec:	dc18      	bgt.n	fa20 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x44>
	{
			if (taskArray[ii].cb==NULL)
    f9ee:	7bfa      	ldrb	r2, [r7, #15]
    f9f0:	490f      	ldr	r1, [pc, #60]	; (fa30 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    f9f2:	4613      	mov	r3, r2
    f9f4:	009b      	lsls	r3, r3, #2
    f9f6:	4413      	add	r3, r2
    f9f8:	009b      	lsls	r3, r3, #2
    f9fa:	440b      	add	r3, r1
    f9fc:	330c      	adds	r3, #12
    f9fe:	681b      	ldr	r3, [r3, #0]
    fa00:	2b00      	cmp	r3, #0
    fa02:	d109      	bne.n	fa18 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
			{
				
				task=&taskArray[ii];
    fa04:	7bfa      	ldrb	r2, [r7, #15]
    fa06:	4613      	mov	r3, r2
    fa08:	009b      	lsls	r3, r3, #2
    fa0a:	4413      	add	r3, r2
    fa0c:	009b      	lsls	r3, r3, #2
    fa0e:	4a08      	ldr	r2, [pc, #32]	; (fa30 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    fa10:	441a      	add	r2, r3
    fa12:	687b      	ldr	r3, [r7, #4]
    fa14:	609a      	str	r2, [r3, #8]
			return;
    fa16:	e006      	b.n	fa26 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4a>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    fa18:	7bfb      	ldrb	r3, [r7, #15]
    fa1a:	3301      	adds	r3, #1
    fa1c:	73fb      	strb	r3, [r7, #15]
    fa1e:	e7e3      	b.n	f9e8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xc>
				
			}
	}
	task=&taskArray[0];
    fa20:	687b      	ldr	r3, [r7, #4]
    fa22:	4a03      	ldr	r2, [pc, #12]	; (fa30 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    fa24:	609a      	str	r2, [r3, #8]

}
    fa26:	3714      	adds	r7, #20
    fa28:	46bd      	mov	sp, r7
    fa2a:	bc80      	pop	{r7}
    fa2c:	4770      	bx	lr
    fa2e:	bf00      	nop
    fa30:	200013c0 	.word	0x200013c0

0000fa34 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    fa34:	b480      	push	{r7}
    fa36:	b085      	sub	sp, #20
    fa38:	af00      	add	r7, sp, #0
    fa3a:	6078      	str	r0, [r7, #4]
    fa3c:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    fa3e:	2300      	movs	r3, #0
    fa40:	73fb      	strb	r3, [r7, #15]
    fa42:	7bfb      	ldrb	r3, [r7, #15]
    fa44:	2b03      	cmp	r3, #3
    fa46:	dc19      	bgt.n	fa7c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    fa48:	7bfa      	ldrb	r2, [r7, #15]
    fa4a:	490e      	ldr	r1, [pc, #56]	; (fa84 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    fa4c:	4613      	mov	r3, r2
    fa4e:	009b      	lsls	r3, r3, #2
    fa50:	4413      	add	r3, r2
    fa52:	009b      	lsls	r3, r3, #2
    fa54:	440b      	add	r3, r1
    fa56:	330c      	adds	r3, #12
    fa58:	681a      	ldr	r2, [r3, #0]
    fa5a:	683b      	ldr	r3, [r7, #0]
    fa5c:	429a      	cmp	r2, r3
    fa5e:	d109      	bne.n	fa74 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    fa60:	7bfa      	ldrb	r2, [r7, #15]
    fa62:	4613      	mov	r3, r2
    fa64:	009b      	lsls	r3, r3, #2
    fa66:	4413      	add	r3, r2
    fa68:	009b      	lsls	r3, r3, #2
    fa6a:	4a06      	ldr	r2, [pc, #24]	; (fa84 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    fa6c:	441a      	add	r2, r3
    fa6e:	687b      	ldr	r3, [r7, #4]
    fa70:	609a      	str	r2, [r3, #8]
			return;
    fa72:	e003      	b.n	fa7c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    fa74:	7bfb      	ldrb	r3, [r7, #15]
    fa76:	3301      	adds	r3, #1
    fa78:	73fb      	strb	r3, [r7, #15]
    fa7a:	e7e2      	b.n	fa42 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}


}
    fa7c:	3714      	adds	r7, #20
    fa7e:	46bd      	mov	sp, r7
    fa80:	bc80      	pop	{r7}
    fa82:	4770      	bx	lr
    fa84:	200013c0 	.word	0x200013c0

0000fa88 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    fa88:	b580      	push	{r7, lr}
    fa8a:	b082      	sub	sp, #8
    fa8c:	af00      	add	r7, sp, #0
    fa8e:	6078      	str	r0, [r7, #4]
    fa90:	6039      	str	r1, [r7, #0]
    fa92:	687b      	ldr	r3, [r7, #4]
    fa94:	2b01      	cmp	r3, #1
    fa96:	d116      	bne.n	fac6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
    fa98:	683b      	ldr	r3, [r7, #0]
    fa9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fa9e:	4293      	cmp	r3, r2
    faa0:	d111      	bne.n	fac6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    faa2:	490b      	ldr	r1, [pc, #44]	; (fad0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    faa4:	480b      	ldr	r0, [pc, #44]	; (fad4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    faa6:	4b0c      	ldr	r3, [pc, #48]	; (fad8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    faa8:	4798      	blx	r3
    faaa:	4a0c      	ldr	r2, [pc, #48]	; (fadc <_Z41__static_initialization_and_destruction_0ii+0x54>)
    faac:	490c      	ldr	r1, [pc, #48]	; (fae0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    faae:	4809      	ldr	r0, [pc, #36]	; (fad4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    fab0:	4b0c      	ldr	r3, [pc, #48]	; (fae4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    fab2:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    fab4:	490c      	ldr	r1, [pc, #48]	; (fae8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    fab6:	480d      	ldr	r0, [pc, #52]	; (faec <_Z41__static_initialization_and_destruction_0ii+0x64>)
    fab8:	4b07      	ldr	r3, [pc, #28]	; (fad8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    faba:	4798      	blx	r3
    fabc:	4a07      	ldr	r2, [pc, #28]	; (fadc <_Z41__static_initialization_and_destruction_0ii+0x54>)
    fabe:	4908      	ldr	r1, [pc, #32]	; (fae0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    fac0:	480a      	ldr	r0, [pc, #40]	; (faec <_Z41__static_initialization_and_destruction_0ii+0x64>)
    fac2:	4b08      	ldr	r3, [pc, #32]	; (fae4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    fac4:	4798      	blx	r3
    fac6:	bf00      	nop
    fac8:	3708      	adds	r7, #8
    faca:	46bd      	mov	sp, r7
    facc:	bd80      	pop	{r7, pc}
    face:	bf00      	nop
    fad0:	20001848 	.word	0x20001848
    fad4:	20001410 	.word	0x20001410
    fad8:	0000f78d 	.word	0x0000f78d
    fadc:	20000000 	.word	0x20000000
    fae0:	0000f7c9 	.word	0x0000f7c9
    fae4:	00010009 	.word	0x00010009
    fae8:	20001780 	.word	0x20001780
    faec:	20001430 	.word	0x20001430

0000faf0 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    faf0:	b580      	push	{r7, lr}
    faf2:	af00      	add	r7, sp, #0
    faf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    faf8:	2001      	movs	r0, #1
    fafa:	4b01      	ldr	r3, [pc, #4]	; (fb00 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    fafc:	4798      	blx	r3
    fafe:	bd80      	pop	{r7, pc}
    fb00:	0000fa89 	.word	0x0000fa89

0000fb04 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    fb04:	b480      	push	{r7}
    fb06:	b083      	sub	sp, #12
    fb08:	af00      	add	r7, sp, #0
    fb0a:	6078      	str	r0, [r7, #4]
    return (void *)0;
    fb0c:	2300      	movs	r3, #0
	}
    fb0e:	4618      	mov	r0, r3
    fb10:	370c      	adds	r7, #12
    fb12:	46bd      	mov	sp, r7
    fb14:	bc80      	pop	{r7}
    fb16:	4770      	bx	lr

0000fb18 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    fb18:	b480      	push	{r7}
    fb1a:	af00      	add	r7, sp, #0
		}
    fb1c:	bf00      	nop
    fb1e:	46bd      	mov	sp, r7
    fb20:	bc80      	pop	{r7}
    fb22:	4770      	bx	lr

0000fb24 <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
    fb24:	b480      	push	{r7}
    fb26:	b083      	sub	sp, #12
    fb28:	af00      	add	r7, sp, #0
    fb2a:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
    fb2c:	4a04      	ldr	r2, [pc, #16]	; (fb40 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
    fb2e:	687b      	ldr	r3, [r7, #4]
    fb30:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    fb32:	687b      	ldr	r3, [r7, #4]
    fb34:	4618      	mov	r0, r3
    fb36:	370c      	adds	r7, #12
    fb38:	46bd      	mov	sp, r7
    fb3a:	bc80      	pop	{r7}
    fb3c:	4770      	bx	lr
    fb3e:	bf00      	nop
    fb40:	20001450 	.word	0x20001450

0000fb44 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
    fb44:	b480      	push	{r7}
    fb46:	b083      	sub	sp, #12
    fb48:	af00      	add	r7, sp, #0
    fb4a:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    fb4c:	687b      	ldr	r3, [r7, #4]
    fb4e:	4618      	mov	r0, r3
    fb50:	370c      	adds	r7, #12
    fb52:	46bd      	mov	sp, r7
    fb54:	bc80      	pop	{r7}
    fb56:	4770      	bx	lr

0000fb58 <_ZN13SPI_Syn_Class6EnableEv>:
	ptrSPISync=this;
	SPI=spiDesc;
}


int32_t SPI_Syn_Class::Enable(){
    fb58:	b580      	push	{r7, lr}
    fb5a:	b082      	sub	sp, #8
    fb5c:	af00      	add	r7, sp, #0
    fb5e:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    fb60:	687b      	ldr	r3, [r7, #4]
    fb62:	68da      	ldr	r2, [r3, #12]
    fb64:	687b      	ldr	r3, [r7, #4]
    fb66:	3310      	adds	r3, #16
    fb68:	4619      	mov	r1, r3
    fb6a:	4610      	mov	r0, r2
    fb6c:	4b07      	ldr	r3, [pc, #28]	; (fb8c <_ZN13SPI_Syn_Class6EnableEv+0x34>)
    fb6e:	4798      	blx	r3
	spi_m_sync_enable(SPI);
    fb70:	687b      	ldr	r3, [r7, #4]
    fb72:	68db      	ldr	r3, [r3, #12]
    fb74:	4618      	mov	r0, r3
    fb76:	4b06      	ldr	r3, [pc, #24]	; (fb90 <_ZN13SPI_Syn_Class6EnableEv+0x38>)
    fb78:	4798      	blx	r3
	ready=true;
    fb7a:	687b      	ldr	r3, [r7, #4]
    fb7c:	2201      	movs	r2, #1
    fb7e:	701a      	strb	r2, [r3, #0]
	return 0;
    fb80:	2300      	movs	r3, #0
}
    fb82:	4618      	mov	r0, r3
    fb84:	3708      	adds	r7, #8
    fb86:	46bd      	mov	sp, r7
    fb88:	bd80      	pop	{r7, pc}
    fb8a:	bf00      	nop
    fb8c:	0000314d 	.word	0x0000314d
    fb90:	00002fc1 	.word	0x00002fc1

0000fb94 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
    fb94:	b580      	push	{r7, lr}
    fb96:	b086      	sub	sp, #24
    fb98:	af00      	add	r7, sp, #0
    fb9a:	60f8      	str	r0, [r7, #12]
    fb9c:	60b9      	str	r1, [r7, #8]
    fb9e:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
    fba0:	68fb      	ldr	r3, [r7, #12]
    fba2:	2201      	movs	r2, #1
    fba4:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
    fba6:	68fb      	ldr	r3, [r7, #12]
    fba8:	691b      	ldr	r3, [r3, #16]
    fbaa:	687a      	ldr	r2, [r7, #4]
    fbac:	b292      	uxth	r2, r2
    fbae:	68b9      	ldr	r1, [r7, #8]
    fbb0:	4618      	mov	r0, r3
    fbb2:	4b08      	ldr	r3, [pc, #32]	; (fbd4 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
    fbb4:	4798      	blx	r3
    fbb6:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
    fbb8:	697b      	ldr	r3, [r7, #20]
    fbba:	2b00      	cmp	r3, #0
    fbbc:	bf14      	ite	ne
    fbbe:	2301      	movne	r3, #1
    fbc0:	2300      	moveq	r3, #0
    fbc2:	b2da      	uxtb	r2, r3
    fbc4:	68fb      	ldr	r3, [r7, #12]
    fbc6:	761a      	strb	r2, [r3, #24]
	 return w;
    fbc8:	697b      	ldr	r3, [r7, #20]
	
}
    fbca:	4618      	mov	r0, r3
    fbcc:	3718      	adds	r7, #24
    fbce:	46bd      	mov	sp, r7
    fbd0:	bd80      	pop	{r7, pc}
    fbd2:	bf00      	nop
    fbd4:	0000fea9 	.word	0x0000fea9

0000fbd8 <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
    fbd8:	b580      	push	{r7, lr}
    fbda:	b086      	sub	sp, #24
    fbdc:	af00      	add	r7, sp, #0
    fbde:	60f8      	str	r0, [r7, #12]
    fbe0:	60b9      	str	r1, [r7, #8]
    fbe2:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
    fbe4:	68fb      	ldr	r3, [r7, #12]
    fbe6:	2201      	movs	r2, #1
    fbe8:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
    fbea:	68fb      	ldr	r3, [r7, #12]
    fbec:	691b      	ldr	r3, [r3, #16]
    fbee:	687a      	ldr	r2, [r7, #4]
    fbf0:	b292      	uxth	r2, r2
    fbf2:	68b9      	ldr	r1, [r7, #8]
    fbf4:	4618      	mov	r0, r3
    fbf6:	4b08      	ldr	r3, [pc, #32]	; (fc18 <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
    fbf8:	4798      	blx	r3
    fbfa:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
    fbfc:	697b      	ldr	r3, [r7, #20]
    fbfe:	2b00      	cmp	r3, #0
    fc00:	bf14      	ite	ne
    fc02:	2301      	movne	r3, #1
    fc04:	2300      	moveq	r3, #0
    fc06:	b2da      	uxtb	r2, r3
    fc08:	68fb      	ldr	r3, [r7, #12]
    fc0a:	765a      	strb	r2, [r3, #25]
	return  r;
    fc0c:	697b      	ldr	r3, [r7, #20]
}
    fc0e:	4618      	mov	r0, r3
    fc10:	3718      	adds	r7, #24
    fc12:	46bd      	mov	sp, r7
    fc14:	bd80      	pop	{r7, pc}
    fc16:	bf00      	nop
    fc18:	0000fef9 	.word	0x0000fef9

0000fc1c <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
    fc1c:	b580      	push	{r7, lr}
    fc1e:	b082      	sub	sp, #8
    fc20:	af00      	add	r7, sp, #0
    fc22:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
    fc24:	687b      	ldr	r3, [r7, #4]
    fc26:	68db      	ldr	r3, [r3, #12]
    fc28:	4618      	mov	r0, r3
    fc2a:	4b03      	ldr	r3, [pc, #12]	; (fc38 <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
    fc2c:	4798      	blx	r3
	
}
    fc2e:	bf00      	nop
    fc30:	3708      	adds	r7, #8
    fc32:	46bd      	mov	sp, r7
    fc34:	bd80      	pop	{r7, pc}
    fc36:	bf00      	nop
    fc38:	00002ffd 	.word	0x00002ffd

0000fc3c <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
    fc3c:	b480      	push	{r7}
    fc3e:	b083      	sub	sp, #12
    fc40:	af00      	add	r7, sp, #0
    fc42:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
    fc44:	4a05      	ldr	r2, [pc, #20]	; (fc5c <_ZN18SingleHeater_ClassC1Ev+0x20>)
    fc46:	687b      	ldr	r3, [r7, #4]
    fc48:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
    fc4a:	687b      	ldr	r3, [r7, #4]
    fc4c:	4a04      	ldr	r2, [pc, #16]	; (fc60 <_ZN18SingleHeater_ClassC1Ev+0x24>)
    fc4e:	619a      	str	r2, [r3, #24]
} //SingleHeater_Class
    fc50:	687b      	ldr	r3, [r7, #4]
    fc52:	4618      	mov	r0, r3
    fc54:	370c      	adds	r7, #12
    fc56:	46bd      	mov	sp, r7
    fc58:	bc80      	pop	{r7}
    fc5a:	4770      	bx	lr
    fc5c:	20001494 	.word	0x20001494
    fc60:	20001498 	.word	0x20001498

0000fc64 <_ZN18SingleHeater_ClassD1Ev>:
	statusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
    fc64:	b480      	push	{r7}
    fc66:	b083      	sub	sp, #12
    fc68:	af00      	add	r7, sp, #0
    fc6a:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
    fc6c:	687b      	ldr	r3, [r7, #4]
    fc6e:	4618      	mov	r0, r3
    fc70:	370c      	adds	r7, #12
    fc72:	46bd      	mov	sp, r7
    fc74:	bc80      	pop	{r7}
    fc76:	4770      	bx	lr

0000fc78 <_ZN18SingleHeater_Class10ReadStatusEv>:
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
	}
	
}

uint8_t	SingleHeater_Class::ReadStatus(void){
    fc78:	b580      	push	{r7, lr}
    fc7a:	b084      	sub	sp, #16
    fc7c:	af00      	add	r7, sp, #0
    fc7e:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
    fc80:	687b      	ldr	r3, [r7, #4]
    fc82:	68db      	ldr	r3, [r3, #12]
    fc84:	4618      	mov	r0, r3
    fc86:	4b16      	ldr	r3, [pc, #88]	; (fce0 <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
    fc88:	4798      	blx	r3
    fc8a:	4603      	mov	r3, r0
    fc8c:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
    fc8e:	7bbb      	ldrb	r3, [r7, #14]
    fc90:	f003 0301 	and.w	r3, r3, #1
    fc94:	2b00      	cmp	r3, #0
    fc96:	bf14      	ite	ne
    fc98:	2301      	movne	r3, #1
    fc9a:	2300      	moveq	r3, #0
    fc9c:	b2da      	uxtb	r2, r3
    fc9e:	687b      	ldr	r3, [r7, #4]
    fca0:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
    fca2:	2300      	movs	r3, #0
    fca4:	73fb      	strb	r3, [r7, #15]
    fca6:	7bfb      	ldrb	r3, [r7, #15]
    fca8:	2b03      	cmp	r3, #3
    fcaa:	dc14      	bgt.n	fcd6 <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
    fcac:	7bfb      	ldrb	r3, [r7, #15]
    fcae:	7bb9      	ldrb	r1, [r7, #14]
    fcb0:	7bfa      	ldrb	r2, [r7, #15]
    fcb2:	3201      	adds	r2, #1
    fcb4:	fa41 f202 	asr.w	r2, r1, r2
    fcb8:	f002 0201 	and.w	r2, r2, #1
    fcbc:	2a00      	cmp	r2, #0
    fcbe:	bf14      	ite	ne
    fcc0:	2201      	movne	r2, #1
    fcc2:	2200      	moveq	r2, #0
    fcc4:	b2d1      	uxtb	r1, r2
    fcc6:	687a      	ldr	r2, [r7, #4]
    fcc8:	4413      	add	r3, r2
    fcca:	460a      	mov	r2, r1
    fccc:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
    fcce:	7bfb      	ldrb	r3, [r7, #15]
    fcd0:	3301      	adds	r3, #1
    fcd2:	73fb      	strb	r3, [r7, #15]
    fcd4:	e7e7      	b.n	fca6 <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
    fcd6:	7bbb      	ldrb	r3, [r7, #14]
}
    fcd8:	4618      	mov	r0, r3
    fcda:	3710      	adds	r7, #16
    fcdc:	46bd      	mov	sp, r7
    fcde:	bd80      	pop	{r7, pc}
    fce0:	0000e245 	.word	0x0000e245

0000fce4 <_ZN18SingleHeater_Class8SetRelayEhb>:
uint8_t	SingleHeater_Class::Enable(uint8_t indexHeater){
	enabled=expanders[1]->WriteDigit(indexHeater,false);
	return uint8_t(enabled);
}
uint8_t	SingleHeater_Class::SetRelay(uint8_t indexHeater, bool state){
    fce4:	b580      	push	{r7, lr}
    fce6:	b082      	sub	sp, #8
    fce8:	af00      	add	r7, sp, #0
    fcea:	6078      	str	r0, [r7, #4]
    fcec:	460b      	mov	r3, r1
    fcee:	70fb      	strb	r3, [r7, #3]
    fcf0:	4613      	mov	r3, r2
    fcf2:	70bb      	strb	r3, [r7, #2]
	enabled=expanders[1]->WriteDigit(indexHeater,!state);
    fcf4:	687b      	ldr	r3, [r7, #4]
    fcf6:	6918      	ldr	r0, [r3, #16]
    fcf8:	78bb      	ldrb	r3, [r7, #2]
    fcfa:	f083 0301 	eor.w	r3, r3, #1
    fcfe:	b2da      	uxtb	r2, r3
    fd00:	78fb      	ldrb	r3, [r7, #3]
    fd02:	4619      	mov	r1, r3
    fd04:	4b05      	ldr	r3, [pc, #20]	; (fd1c <_ZN18SingleHeater_Class8SetRelayEhb+0x38>)
    fd06:	4798      	blx	r3
    fd08:	4603      	mov	r3, r0
    fd0a:	461a      	mov	r2, r3
    fd0c:	687b      	ldr	r3, [r7, #4]
    fd0e:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
    fd10:	687b      	ldr	r3, [r7, #4]
    fd12:	7adb      	ldrb	r3, [r3, #11]
}
    fd14:	4618      	mov	r0, r3
    fd16:	3708      	adds	r7, #8
    fd18:	46bd      	mov	sp, r7
    fd1a:	bd80      	pop	{r7, pc}
    fd1c:	0000e4b1 	.word	0x0000e4b1

0000fd20 <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
    fd20:	b590      	push	{r4, r7, lr}
    fd22:	b083      	sub	sp, #12
    fd24:	af00      	add	r7, sp, #0
    fd26:	6078      	str	r0, [r7, #4]
    fd28:	4c05      	ldr	r4, [pc, #20]	; (fd40 <__tcf_0+0x20>)
    fd2a:	4b06      	ldr	r3, [pc, #24]	; (fd44 <__tcf_0+0x24>)
    fd2c:	429c      	cmp	r4, r3
    fd2e:	d004      	beq.n	fd3a <__tcf_0+0x1a>
    fd30:	3c1c      	subs	r4, #28
    fd32:	4620      	mov	r0, r4
    fd34:	4b04      	ldr	r3, [pc, #16]	; (fd48 <__tcf_0+0x28>)
    fd36:	4798      	blx	r3
    fd38:	e7f7      	b.n	fd2a <__tcf_0+0xa>
    fd3a:	370c      	adds	r7, #12
    fd3c:	46bd      	mov	sp, r7
    fd3e:	bd90      	pop	{r4, r7, pc}
    fd40:	200014e4 	.word	0x200014e4
    fd44:	200014ac 	.word	0x200014ac
    fd48:	0000e149 	.word	0x0000e149

0000fd4c <_Z41__static_initialization_and_destruction_0ii>:

bool SingleHeater_Class::SelfTest(void){
	return true;
}

    fd4c:	b5b0      	push	{r4, r5, r7, lr}
    fd4e:	b082      	sub	sp, #8
    fd50:	af00      	add	r7, sp, #0
    fd52:	6078      	str	r0, [r7, #4]
    fd54:	6039      	str	r1, [r7, #0]
    fd56:	687b      	ldr	r3, [r7, #4]
    fd58:	2b01      	cmp	r3, #1
    fd5a:	d125      	bne.n	fda8 <_Z41__static_initialization_and_destruction_0ii+0x5c>
    fd5c:	683b      	ldr	r3, [r7, #0]
    fd5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fd62:	4293      	cmp	r3, r2
    fd64:	d120      	bne.n	fda8 <_Z41__static_initialization_and_destruction_0ii+0x5c>
static I2C_Sync_Class	i2cSharedStatic(&I2C_EXPANDER);
    fd66:	4912      	ldr	r1, [pc, #72]	; (fdb0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    fd68:	4812      	ldr	r0, [pc, #72]	; (fdb4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    fd6a:	4b13      	ldr	r3, [pc, #76]	; (fdb8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    fd6c:	4798      	blx	r3
    fd6e:	4a13      	ldr	r2, [pc, #76]	; (fdbc <_Z41__static_initialization_and_destruction_0ii+0x70>)
    fd70:	4913      	ldr	r1, [pc, #76]	; (fdc0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    fd72:	4810      	ldr	r0, [pc, #64]	; (fdb4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    fd74:	4b13      	ldr	r3, [pc, #76]	; (fdc4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    fd76:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
    fd78:	4b13      	ldr	r3, [pc, #76]	; (fdc8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    fd7a:	2401      	movs	r4, #1
    fd7c:	461d      	mov	r5, r3
    fd7e:	2c00      	cmp	r4, #0
    fd80:	db05      	blt.n	fd8e <_Z41__static_initialization_and_destruction_0ii+0x42>
    fd82:	4628      	mov	r0, r5
    fd84:	4b11      	ldr	r3, [pc, #68]	; (fdcc <_Z41__static_initialization_and_destruction_0ii+0x80>)
    fd86:	4798      	blx	r3
    fd88:	351c      	adds	r5, #28
    fd8a:	3c01      	subs	r4, #1
    fd8c:	e7f7      	b.n	fd7e <_Z41__static_initialization_and_destruction_0ii+0x32>
    fd8e:	4a0b      	ldr	r2, [pc, #44]	; (fdbc <_Z41__static_initialization_and_destruction_0ii+0x70>)
    fd90:	490f      	ldr	r1, [pc, #60]	; (fdd0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    fd92:	2000      	movs	r0, #0
    fd94:	4b0b      	ldr	r3, [pc, #44]	; (fdc4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    fd96:	4798      	blx	r3
    fd98:	480e      	ldr	r0, [pc, #56]	; (fdd4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    fd9a:	4b0f      	ldr	r3, [pc, #60]	; (fdd8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    fd9c:	4798      	blx	r3
    fd9e:	4a07      	ldr	r2, [pc, #28]	; (fdbc <_Z41__static_initialization_and_destruction_0ii+0x70>)
    fda0:	490e      	ldr	r1, [pc, #56]	; (fddc <_Z41__static_initialization_and_destruction_0ii+0x90>)
    fda2:	480c      	ldr	r0, [pc, #48]	; (fdd4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    fda4:	4b07      	ldr	r3, [pc, #28]	; (fdc4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    fda6:	4798      	blx	r3
    fda8:	bf00      	nop
    fdaa:	3708      	adds	r7, #8
    fdac:	46bd      	mov	sp, r7
    fdae:	bdb0      	pop	{r4, r5, r7, pc}
    fdb0:	20001868 	.word	0x20001868
    fdb4:	20001498 	.word	0x20001498
    fdb8:	0000e019 	.word	0x0000e019
    fdbc:	20000000 	.word	0x20000000
    fdc0:	0000e035 	.word	0x0000e035
    fdc4:	00010009 	.word	0x00010009
    fdc8:	200014ac 	.word	0x200014ac
    fdcc:	0000e135 	.word	0x0000e135
    fdd0:	0000fd21 	.word	0x0000fd21
    fdd4:	200014e4 	.word	0x200014e4
    fdd8:	0000fc3d 	.word	0x0000fc3d
    fddc:	0000fc65 	.word	0x0000fc65

0000fde0 <_GLOBAL__sub_I_ptrSingleHeaterClass>:
    fde0:	b580      	push	{r7, lr}
    fde2:	af00      	add	r7, sp, #0
    fde4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fde8:	2001      	movs	r0, #1
    fdea:	4b01      	ldr	r3, [pc, #4]	; (fdf0 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
    fdec:	4798      	blx	r3
    fdee:	bd80      	pop	{r7, pc}
    fdf0:	0000fd4d 	.word	0x0000fd4d

0000fdf4 <_ZN24TemperatureSensors_ClassD1Ev>:
		SPIA=SPI_LTC;
		
} //TemperatureSensors_Class

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
    fdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fdf6:	4607      	mov	r7, r0
    fdf8:	f110 05a8 	adds.w	r5, r0, #168	; 0xa8
    fdfc:	d007      	beq.n	fe0e <_ZN24TemperatureSensors_ClassD1Ev+0x1a>
    fdfe:	f500 74f0 	add.w	r4, r0, #480	; 0x1e0
    fe02:	4e05      	ldr	r6, [pc, #20]	; (fe18 <_ZN24TemperatureSensors_ClassD1Ev+0x24>)
    fe04:	3c68      	subs	r4, #104	; 0x68
    fe06:	4620      	mov	r0, r4
    fe08:	47b0      	blx	r6
    fe0a:	42a5      	cmp	r5, r4
    fe0c:	d1fa      	bne.n	fe04 <_ZN24TemperatureSensors_ClassD1Ev+0x10>
    fe0e:	4638      	mov	r0, r7
    fe10:	4b02      	ldr	r3, [pc, #8]	; (fe1c <_ZN24TemperatureSensors_ClassD1Ev+0x28>)
    fe12:	4798      	blx	r3
{
} //~TemperatureSensors_Class
    fe14:	4638      	mov	r0, r7
    fe16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe18:	0000ff5d 	.word	0x0000ff5d
    fe1c:	0000ff5d 	.word	0x0000ff5d

0000fe20 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor>:
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_sync_descriptor *SPI_LTC)
    fe20:	b570      	push	{r4, r5, r6, lr}
    fe22:	4604      	mov	r4, r0
    fe24:	460e      	mov	r6, r1
    fe26:	4b0a      	ldr	r3, [pc, #40]	; (fe50 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x30>)
    fe28:	4798      	blx	r3
    fe2a:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    fe2e:	4d09      	ldr	r5, [pc, #36]	; (fe54 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x34>)
    fe30:	47a8      	blx	r5
    fe32:	f504 7088 	add.w	r0, r4, #272	; 0x110
    fe36:	47a8      	blx	r5
    fe38:	f504 70bc 	add.w	r0, r4, #376	; 0x178
    fe3c:	47a8      	blx	r5
		spiLite=&ltSPI;
    fe3e:	4b06      	ldr	r3, [pc, #24]	; (fe58 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x38>)
    fe40:	1d1a      	adds	r2, r3, #4
    fe42:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
		ptrTemperaturesClass=this;
    fe46:	601c      	str	r4, [r3, #0]
		SPIA=SPI_LTC;
    fe48:	f8c4 61ec 	str.w	r6, [r4, #492]	; 0x1ec
} //TemperatureSensors_Class
    fe4c:	4620      	mov	r0, r4
    fe4e:	bd70      	pop	{r4, r5, r6, pc}
    fe50:	0000ff49 	.word	0x0000ff49
    fe54:	0000ff49 	.word	0x0000ff49
    fe58:	20001500 	.word	0x20001500

0000fe5c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev>:
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
	module[m].ready=true;
	return module[m].ready;
}

TemperatureSensors_Class temperatures(&SPI_TEMP);
    fe5c:	b570      	push	{r4, r5, r6, lr}
static LT_SPI	ltSPI;
    fe5e:	4c0a      	ldr	r4, [pc, #40]	; (fe88 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x2c>)
    fe60:	1d25      	adds	r5, r4, #4
    fe62:	4628      	mov	r0, r5
    fe64:	4b09      	ldr	r3, [pc, #36]	; (fe8c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x30>)
    fe66:	4798      	blx	r3
    fe68:	4e09      	ldr	r6, [pc, #36]	; (fe90 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x34>)
    fe6a:	4632      	mov	r2, r6
    fe6c:	4909      	ldr	r1, [pc, #36]	; (fe94 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x38>)
    fe6e:	4628      	mov	r0, r5
    fe70:	4d09      	ldr	r5, [pc, #36]	; (fe98 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x3c>)
    fe72:	47a8      	blx	r5
TemperatureSensors_Class temperatures(&SPI_TEMP);
    fe74:	3418      	adds	r4, #24
    fe76:	4909      	ldr	r1, [pc, #36]	; (fe9c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x40>)
    fe78:	4620      	mov	r0, r4
    fe7a:	4b09      	ldr	r3, [pc, #36]	; (fea0 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x44>)
    fe7c:	4798      	blx	r3
    fe7e:	4632      	mov	r2, r6
    fe80:	4908      	ldr	r1, [pc, #32]	; (fea4 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x48>)
    fe82:	4620      	mov	r0, r4
    fe84:	47a8      	blx	r5
    fe86:	bd70      	pop	{r4, r5, r6, pc}
    fe88:	20001500 	.word	0x20001500
    fe8c:	0000ff71 	.word	0x0000ff71
    fe90:	20000000 	.word	0x20000000
    fe94:	0000ff99 	.word	0x0000ff99
    fe98:	00010009 	.word	0x00010009
    fe9c:	20001768 	.word	0x20001768
    fea0:	0000fe21 	.word	0x0000fe21
    fea4:	0000fdf5 	.word	0x0000fdf5

0000fea8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    fea8:	b580      	push	{r7, lr}
    feaa:	b084      	sub	sp, #16
    feac:	af00      	add	r7, sp, #0
    feae:	60f8      	str	r0, [r7, #12]
    feb0:	60b9      	str	r1, [r7, #8]
    feb2:	4613      	mov	r3, r2
    feb4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    feb6:	68fb      	ldr	r3, [r7, #12]
    feb8:	2b00      	cmp	r3, #0
    feba:	d004      	beq.n	fec6 <io_write+0x1e>
    febc:	68bb      	ldr	r3, [r7, #8]
    febe:	2b00      	cmp	r3, #0
    fec0:	d001      	beq.n	fec6 <io_write+0x1e>
    fec2:	2301      	movs	r3, #1
    fec4:	e000      	b.n	fec8 <io_write+0x20>
    fec6:	2300      	movs	r3, #0
    fec8:	f003 0301 	and.w	r3, r3, #1
    fecc:	b2db      	uxtb	r3, r3
    fece:	2234      	movs	r2, #52	; 0x34
    fed0:	4907      	ldr	r1, [pc, #28]	; (fef0 <io_write+0x48>)
    fed2:	4618      	mov	r0, r3
    fed4:	4b07      	ldr	r3, [pc, #28]	; (fef4 <io_write+0x4c>)
    fed6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    fed8:	68fb      	ldr	r3, [r7, #12]
    feda:	681b      	ldr	r3, [r3, #0]
    fedc:	88fa      	ldrh	r2, [r7, #6]
    fede:	68b9      	ldr	r1, [r7, #8]
    fee0:	68f8      	ldr	r0, [r7, #12]
    fee2:	4798      	blx	r3
    fee4:	4603      	mov	r3, r0
}
    fee6:	4618      	mov	r0, r3
    fee8:	3710      	adds	r7, #16
    feea:	46bd      	mov	sp, r7
    feec:	bd80      	pop	{r7, pc}
    feee:	bf00      	nop
    fef0:	00010828 	.word	0x00010828
    fef4:	00003fd5 	.word	0x00003fd5

0000fef8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    fef8:	b580      	push	{r7, lr}
    fefa:	b084      	sub	sp, #16
    fefc:	af00      	add	r7, sp, #0
    fefe:	60f8      	str	r0, [r7, #12]
    ff00:	60b9      	str	r1, [r7, #8]
    ff02:	4613      	mov	r3, r2
    ff04:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    ff06:	68fb      	ldr	r3, [r7, #12]
    ff08:	2b00      	cmp	r3, #0
    ff0a:	d004      	beq.n	ff16 <io_read+0x1e>
    ff0c:	68bb      	ldr	r3, [r7, #8]
    ff0e:	2b00      	cmp	r3, #0
    ff10:	d001      	beq.n	ff16 <io_read+0x1e>
    ff12:	2301      	movs	r3, #1
    ff14:	e000      	b.n	ff18 <io_read+0x20>
    ff16:	2300      	movs	r3, #0
    ff18:	f003 0301 	and.w	r3, r3, #1
    ff1c:	b2db      	uxtb	r3, r3
    ff1e:	223d      	movs	r2, #61	; 0x3d
    ff20:	4907      	ldr	r1, [pc, #28]	; (ff40 <io_read+0x48>)
    ff22:	4618      	mov	r0, r3
    ff24:	4b07      	ldr	r3, [pc, #28]	; (ff44 <io_read+0x4c>)
    ff26:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    ff28:	68fb      	ldr	r3, [r7, #12]
    ff2a:	685b      	ldr	r3, [r3, #4]
    ff2c:	88fa      	ldrh	r2, [r7, #6]
    ff2e:	68b9      	ldr	r1, [r7, #8]
    ff30:	68f8      	ldr	r0, [r7, #12]
    ff32:	4798      	blx	r3
    ff34:	4603      	mov	r3, r0
}
    ff36:	4618      	mov	r0, r3
    ff38:	3710      	adds	r7, #16
    ff3a:	46bd      	mov	sp, r7
    ff3c:	bd80      	pop	{r7, pc}
    ff3e:	bf00      	nop
    ff40:	00010828 	.word	0x00010828
    ff44:	00003fd5 	.word	0x00003fd5

0000ff48 <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
    ff48:	b480      	push	{r7}
    ff4a:	b083      	sub	sp, #12
    ff4c:	af00      	add	r7, sp, #0
    ff4e:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
    ff50:	687b      	ldr	r3, [r7, #4]
    ff52:	4618      	mov	r0, r3
    ff54:	370c      	adds	r7, #12
    ff56:	46bd      	mov	sp, r7
    ff58:	bc80      	pop	{r7}
    ff5a:	4770      	bx	lr

0000ff5c <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
    ff5c:	b480      	push	{r7}
    ff5e:	b083      	sub	sp, #12
    ff60:	af00      	add	r7, sp, #0
    ff62:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
    ff64:	687b      	ldr	r3, [r7, #4]
    ff66:	4618      	mov	r0, r3
    ff68:	370c      	adds	r7, #12
    ff6a:	46bd      	mov	sp, r7
    ff6c:	bc80      	pop	{r7}
    ff6e:	4770      	bx	lr

0000ff70 <_ZN6LT_SPIC1Ev>:
LT_SPI	*ptrLTSPIClass;

static  SPI_Syn_Class spiStaticTemp;

// default constructor
LT_SPI::LT_SPI()
    ff70:	b480      	push	{r7}
    ff72:	b083      	sub	sp, #12
    ff74:	af00      	add	r7, sp, #0
    ff76:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
    ff78:	4a05      	ldr	r2, [pc, #20]	; (ff90 <_ZN6LT_SPIC1Ev+0x20>)
    ff7a:	687b      	ldr	r3, [r7, #4]
    ff7c:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
    ff7e:	687b      	ldr	r3, [r7, #4]
    ff80:	4a04      	ldr	r2, [pc, #16]	; (ff94 <_ZN6LT_SPIC1Ev+0x24>)
    ff82:	605a      	str	r2, [r3, #4]
} //LT_SPI
    ff84:	687b      	ldr	r3, [r7, #4]
    ff86:	4618      	mov	r0, r3
    ff88:	370c      	adds	r7, #12
    ff8a:	46bd      	mov	sp, r7
    ff8c:	bc80      	pop	{r7}
    ff8e:	4770      	bx	lr
    ff90:	20001710 	.word	0x20001710
    ff94:	20001714 	.word	0x20001714

0000ff98 <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
    ff98:	b480      	push	{r7}
    ff9a:	b083      	sub	sp, #12
    ff9c:	af00      	add	r7, sp, #0
    ff9e:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
    ffa0:	687b      	ldr	r3, [r7, #4]
    ffa2:	4618      	mov	r0, r3
    ffa4:	370c      	adds	r7, #12
    ffa6:	46bd      	mov	sp, r7
    ffa8:	bc80      	pop	{r7}
    ffaa:	4770      	bx	lr

0000ffac <_Z41__static_initialization_and_destruction_0ii>:
	delay_us(10);
	gpio_set_pin_level(cs_pin,true);
	__DMB();
	__enable_irq();
	 
    ffac:	b580      	push	{r7, lr}
    ffae:	b082      	sub	sp, #8
    ffb0:	af00      	add	r7, sp, #0
    ffb2:	6078      	str	r0, [r7, #4]
    ffb4:	6039      	str	r1, [r7, #0]
    ffb6:	687b      	ldr	r3, [r7, #4]
    ffb8:	2b01      	cmp	r3, #1
    ffba:	d10c      	bne.n	ffd6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    ffbc:	683b      	ldr	r3, [r7, #0]
    ffbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ffc2:	4293      	cmp	r3, r2
    ffc4:	d107      	bne.n	ffd6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
    ffc6:	4806      	ldr	r0, [pc, #24]	; (ffe0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    ffc8:	4b06      	ldr	r3, [pc, #24]	; (ffe4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    ffca:	4798      	blx	r3
    ffcc:	4a06      	ldr	r2, [pc, #24]	; (ffe8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    ffce:	4907      	ldr	r1, [pc, #28]	; (ffec <_Z41__static_initialization_and_destruction_0ii+0x40>)
    ffd0:	4803      	ldr	r0, [pc, #12]	; (ffe0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    ffd2:	4b07      	ldr	r3, [pc, #28]	; (fff0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    ffd4:	4798      	blx	r3
    ffd6:	bf00      	nop
    ffd8:	3708      	adds	r7, #8
    ffda:	46bd      	mov	sp, r7
    ffdc:	bd80      	pop	{r7, pc}
    ffde:	bf00      	nop
    ffe0:	20001714 	.word	0x20001714
    ffe4:	0000fb25 	.word	0x0000fb25
    ffe8:	20000000 	.word	0x20000000
    ffec:	0000fb45 	.word	0x0000fb45
    fff0:	00010009 	.word	0x00010009

0000fff4 <_GLOBAL__sub_I_ptrLTSPIClass>:
    fff4:	b580      	push	{r7, lr}
    fff6:	af00      	add	r7, sp, #0
    fff8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fffc:	2001      	movs	r0, #1
    fffe:	4b01      	ldr	r3, [pc, #4]	; (10004 <STACK_SIZE+0x4>)
   10000:	4798      	blx	r3
   10002:	bd80      	pop	{r7, pc}
   10004:	0000ffad 	.word	0x0000ffad

00010008 <__aeabi_atexit>:
   10008:	460b      	mov	r3, r1
   1000a:	4601      	mov	r1, r0
   1000c:	4618      	mov	r0, r3
   1000e:	f000 b801 	b.w	10014 <__cxa_atexit>
   10012:	bf00      	nop

00010014 <__cxa_atexit>:
   10014:	4613      	mov	r3, r2
   10016:	460a      	mov	r2, r1
   10018:	4601      	mov	r1, r0
   1001a:	2002      	movs	r0, #2
   1001c:	f000 b91e 	b.w	1025c <__register_exitproc>

00010020 <ffs>:
   10020:	b140      	cbz	r0, 10034 <ffs+0x14>
   10022:	2300      	movs	r3, #0
   10024:	fa40 f103 	asr.w	r1, r0, r3
   10028:	1c5a      	adds	r2, r3, #1
   1002a:	07c9      	lsls	r1, r1, #31
   1002c:	4613      	mov	r3, r2
   1002e:	d5f9      	bpl.n	10024 <ffs+0x4>
   10030:	4610      	mov	r0, r2
   10032:	4770      	bx	lr
   10034:	4602      	mov	r2, r0
   10036:	4610      	mov	r0, r2
   10038:	4770      	bx	lr
   1003a:	bf00      	nop

0001003c <__libc_init_array>:
   1003c:	b570      	push	{r4, r5, r6, lr}
   1003e:	4e0f      	ldr	r6, [pc, #60]	; (1007c <__libc_init_array+0x40>)
   10040:	4d0f      	ldr	r5, [pc, #60]	; (10080 <__libc_init_array+0x44>)
   10042:	1b76      	subs	r6, r6, r5
   10044:	10b6      	asrs	r6, r6, #2
   10046:	bf18      	it	ne
   10048:	2400      	movne	r4, #0
   1004a:	d005      	beq.n	10058 <__libc_init_array+0x1c>
   1004c:	3401      	adds	r4, #1
   1004e:	f855 3b04 	ldr.w	r3, [r5], #4
   10052:	4798      	blx	r3
   10054:	42a6      	cmp	r6, r4
   10056:	d1f9      	bne.n	1004c <__libc_init_array+0x10>
   10058:	4e0a      	ldr	r6, [pc, #40]	; (10084 <__libc_init_array+0x48>)
   1005a:	4d0b      	ldr	r5, [pc, #44]	; (10088 <__libc_init_array+0x4c>)
   1005c:	1b76      	subs	r6, r6, r5
   1005e:	f000 fbef 	bl	10840 <_init>
   10062:	10b6      	asrs	r6, r6, #2
   10064:	bf18      	it	ne
   10066:	2400      	movne	r4, #0
   10068:	d006      	beq.n	10078 <__libc_init_array+0x3c>
   1006a:	3401      	adds	r4, #1
   1006c:	f855 3b04 	ldr.w	r3, [r5], #4
   10070:	4798      	blx	r3
   10072:	42a6      	cmp	r6, r4
   10074:	d1f9      	bne.n	1006a <__libc_init_array+0x2e>
   10076:	bd70      	pop	{r4, r5, r6, pc}
   10078:	bd70      	pop	{r4, r5, r6, pc}
   1007a:	bf00      	nop
   1007c:	0001084c 	.word	0x0001084c
   10080:	0001084c 	.word	0x0001084c
   10084:	0001087c 	.word	0x0001087c
   10088:	0001084c 	.word	0x0001084c

0001008c <memcpy>:
   1008c:	4684      	mov	ip, r0
   1008e:	ea41 0300 	orr.w	r3, r1, r0
   10092:	f013 0303 	ands.w	r3, r3, #3
   10096:	d16d      	bne.n	10174 <memcpy+0xe8>
   10098:	3a40      	subs	r2, #64	; 0x40
   1009a:	d341      	bcc.n	10120 <memcpy+0x94>
   1009c:	f851 3b04 	ldr.w	r3, [r1], #4
   100a0:	f840 3b04 	str.w	r3, [r0], #4
   100a4:	f851 3b04 	ldr.w	r3, [r1], #4
   100a8:	f840 3b04 	str.w	r3, [r0], #4
   100ac:	f851 3b04 	ldr.w	r3, [r1], #4
   100b0:	f840 3b04 	str.w	r3, [r0], #4
   100b4:	f851 3b04 	ldr.w	r3, [r1], #4
   100b8:	f840 3b04 	str.w	r3, [r0], #4
   100bc:	f851 3b04 	ldr.w	r3, [r1], #4
   100c0:	f840 3b04 	str.w	r3, [r0], #4
   100c4:	f851 3b04 	ldr.w	r3, [r1], #4
   100c8:	f840 3b04 	str.w	r3, [r0], #4
   100cc:	f851 3b04 	ldr.w	r3, [r1], #4
   100d0:	f840 3b04 	str.w	r3, [r0], #4
   100d4:	f851 3b04 	ldr.w	r3, [r1], #4
   100d8:	f840 3b04 	str.w	r3, [r0], #4
   100dc:	f851 3b04 	ldr.w	r3, [r1], #4
   100e0:	f840 3b04 	str.w	r3, [r0], #4
   100e4:	f851 3b04 	ldr.w	r3, [r1], #4
   100e8:	f840 3b04 	str.w	r3, [r0], #4
   100ec:	f851 3b04 	ldr.w	r3, [r1], #4
   100f0:	f840 3b04 	str.w	r3, [r0], #4
   100f4:	f851 3b04 	ldr.w	r3, [r1], #4
   100f8:	f840 3b04 	str.w	r3, [r0], #4
   100fc:	f851 3b04 	ldr.w	r3, [r1], #4
   10100:	f840 3b04 	str.w	r3, [r0], #4
   10104:	f851 3b04 	ldr.w	r3, [r1], #4
   10108:	f840 3b04 	str.w	r3, [r0], #4
   1010c:	f851 3b04 	ldr.w	r3, [r1], #4
   10110:	f840 3b04 	str.w	r3, [r0], #4
   10114:	f851 3b04 	ldr.w	r3, [r1], #4
   10118:	f840 3b04 	str.w	r3, [r0], #4
   1011c:	3a40      	subs	r2, #64	; 0x40
   1011e:	d2bd      	bcs.n	1009c <memcpy+0x10>
   10120:	3230      	adds	r2, #48	; 0x30
   10122:	d311      	bcc.n	10148 <memcpy+0xbc>
   10124:	f851 3b04 	ldr.w	r3, [r1], #4
   10128:	f840 3b04 	str.w	r3, [r0], #4
   1012c:	f851 3b04 	ldr.w	r3, [r1], #4
   10130:	f840 3b04 	str.w	r3, [r0], #4
   10134:	f851 3b04 	ldr.w	r3, [r1], #4
   10138:	f840 3b04 	str.w	r3, [r0], #4
   1013c:	f851 3b04 	ldr.w	r3, [r1], #4
   10140:	f840 3b04 	str.w	r3, [r0], #4
   10144:	3a10      	subs	r2, #16
   10146:	d2ed      	bcs.n	10124 <memcpy+0x98>
   10148:	320c      	adds	r2, #12
   1014a:	d305      	bcc.n	10158 <memcpy+0xcc>
   1014c:	f851 3b04 	ldr.w	r3, [r1], #4
   10150:	f840 3b04 	str.w	r3, [r0], #4
   10154:	3a04      	subs	r2, #4
   10156:	d2f9      	bcs.n	1014c <memcpy+0xc0>
   10158:	3204      	adds	r2, #4
   1015a:	d008      	beq.n	1016e <memcpy+0xe2>
   1015c:	07d2      	lsls	r2, r2, #31
   1015e:	bf1c      	itt	ne
   10160:	f811 3b01 	ldrbne.w	r3, [r1], #1
   10164:	f800 3b01 	strbne.w	r3, [r0], #1
   10168:	d301      	bcc.n	1016e <memcpy+0xe2>
   1016a:	880b      	ldrh	r3, [r1, #0]
   1016c:	8003      	strh	r3, [r0, #0]
   1016e:	4660      	mov	r0, ip
   10170:	4770      	bx	lr
   10172:	bf00      	nop
   10174:	2a08      	cmp	r2, #8
   10176:	d313      	bcc.n	101a0 <memcpy+0x114>
   10178:	078b      	lsls	r3, r1, #30
   1017a:	d08d      	beq.n	10098 <memcpy+0xc>
   1017c:	f010 0303 	ands.w	r3, r0, #3
   10180:	d08a      	beq.n	10098 <memcpy+0xc>
   10182:	f1c3 0304 	rsb	r3, r3, #4
   10186:	1ad2      	subs	r2, r2, r3
   10188:	07db      	lsls	r3, r3, #31
   1018a:	bf1c      	itt	ne
   1018c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   10190:	f800 3b01 	strbne.w	r3, [r0], #1
   10194:	d380      	bcc.n	10098 <memcpy+0xc>
   10196:	f831 3b02 	ldrh.w	r3, [r1], #2
   1019a:	f820 3b02 	strh.w	r3, [r0], #2
   1019e:	e77b      	b.n	10098 <memcpy+0xc>
   101a0:	3a04      	subs	r2, #4
   101a2:	d3d9      	bcc.n	10158 <memcpy+0xcc>
   101a4:	3a01      	subs	r2, #1
   101a6:	f811 3b01 	ldrb.w	r3, [r1], #1
   101aa:	f800 3b01 	strb.w	r3, [r0], #1
   101ae:	d2f9      	bcs.n	101a4 <memcpy+0x118>
   101b0:	780b      	ldrb	r3, [r1, #0]
   101b2:	7003      	strb	r3, [r0, #0]
   101b4:	784b      	ldrb	r3, [r1, #1]
   101b6:	7043      	strb	r3, [r0, #1]
   101b8:	788b      	ldrb	r3, [r1, #2]
   101ba:	7083      	strb	r3, [r0, #2]
   101bc:	4660      	mov	r0, ip
   101be:	4770      	bx	lr

000101c0 <memset>:
   101c0:	b470      	push	{r4, r5, r6}
   101c2:	0786      	lsls	r6, r0, #30
   101c4:	d046      	beq.n	10254 <memset+0x94>
   101c6:	1e54      	subs	r4, r2, #1
   101c8:	2a00      	cmp	r2, #0
   101ca:	d041      	beq.n	10250 <memset+0x90>
   101cc:	b2ca      	uxtb	r2, r1
   101ce:	4603      	mov	r3, r0
   101d0:	e002      	b.n	101d8 <memset+0x18>
   101d2:	f114 34ff 	adds.w	r4, r4, #4294967295
   101d6:	d33b      	bcc.n	10250 <memset+0x90>
   101d8:	f803 2b01 	strb.w	r2, [r3], #1
   101dc:	079d      	lsls	r5, r3, #30
   101de:	d1f8      	bne.n	101d2 <memset+0x12>
   101e0:	2c03      	cmp	r4, #3
   101e2:	d92e      	bls.n	10242 <memset+0x82>
   101e4:	b2cd      	uxtb	r5, r1
   101e6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   101ea:	2c0f      	cmp	r4, #15
   101ec:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   101f0:	d919      	bls.n	10226 <memset+0x66>
   101f2:	f103 0210 	add.w	r2, r3, #16
   101f6:	4626      	mov	r6, r4
   101f8:	3e10      	subs	r6, #16
   101fa:	2e0f      	cmp	r6, #15
   101fc:	f842 5c10 	str.w	r5, [r2, #-16]
   10200:	f842 5c0c 	str.w	r5, [r2, #-12]
   10204:	f842 5c08 	str.w	r5, [r2, #-8]
   10208:	f842 5c04 	str.w	r5, [r2, #-4]
   1020c:	f102 0210 	add.w	r2, r2, #16
   10210:	d8f2      	bhi.n	101f8 <memset+0x38>
   10212:	f1a4 0210 	sub.w	r2, r4, #16
   10216:	f022 020f 	bic.w	r2, r2, #15
   1021a:	f004 040f 	and.w	r4, r4, #15
   1021e:	3210      	adds	r2, #16
   10220:	2c03      	cmp	r4, #3
   10222:	4413      	add	r3, r2
   10224:	d90d      	bls.n	10242 <memset+0x82>
   10226:	461e      	mov	r6, r3
   10228:	4622      	mov	r2, r4
   1022a:	3a04      	subs	r2, #4
   1022c:	2a03      	cmp	r2, #3
   1022e:	f846 5b04 	str.w	r5, [r6], #4
   10232:	d8fa      	bhi.n	1022a <memset+0x6a>
   10234:	1f22      	subs	r2, r4, #4
   10236:	f022 0203 	bic.w	r2, r2, #3
   1023a:	3204      	adds	r2, #4
   1023c:	4413      	add	r3, r2
   1023e:	f004 0403 	and.w	r4, r4, #3
   10242:	b12c      	cbz	r4, 10250 <memset+0x90>
   10244:	b2c9      	uxtb	r1, r1
   10246:	441c      	add	r4, r3
   10248:	f803 1b01 	strb.w	r1, [r3], #1
   1024c:	429c      	cmp	r4, r3
   1024e:	d1fb      	bne.n	10248 <memset+0x88>
   10250:	bc70      	pop	{r4, r5, r6}
   10252:	4770      	bx	lr
   10254:	4614      	mov	r4, r2
   10256:	4603      	mov	r3, r0
   10258:	e7c2      	b.n	101e0 <memset+0x20>
   1025a:	bf00      	nop

0001025c <__register_exitproc>:
   1025c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10260:	4d2c      	ldr	r5, [pc, #176]	; (10314 <__register_exitproc+0xb8>)
   10262:	4606      	mov	r6, r0
   10264:	6828      	ldr	r0, [r5, #0]
   10266:	4698      	mov	r8, r3
   10268:	460f      	mov	r7, r1
   1026a:	4691      	mov	r9, r2
   1026c:	f000 f882 	bl	10374 <__retarget_lock_acquire_recursive>
   10270:	4b29      	ldr	r3, [pc, #164]	; (10318 <__register_exitproc+0xbc>)
   10272:	681c      	ldr	r4, [r3, #0]
   10274:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   10278:	2b00      	cmp	r3, #0
   1027a:	d03e      	beq.n	102fa <__register_exitproc+0x9e>
   1027c:	685a      	ldr	r2, [r3, #4]
   1027e:	2a1f      	cmp	r2, #31
   10280:	dc1c      	bgt.n	102bc <__register_exitproc+0x60>
   10282:	f102 0e01 	add.w	lr, r2, #1
   10286:	b176      	cbz	r6, 102a6 <__register_exitproc+0x4a>
   10288:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1028c:	2401      	movs	r4, #1
   1028e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   10292:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   10296:	4094      	lsls	r4, r2
   10298:	4320      	orrs	r0, r4
   1029a:	2e02      	cmp	r6, #2
   1029c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   102a0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   102a4:	d023      	beq.n	102ee <__register_exitproc+0x92>
   102a6:	3202      	adds	r2, #2
   102a8:	f8c3 e004 	str.w	lr, [r3, #4]
   102ac:	6828      	ldr	r0, [r5, #0]
   102ae:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   102b2:	f000 f861 	bl	10378 <__retarget_lock_release_recursive>
   102b6:	2000      	movs	r0, #0
   102b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   102bc:	4b17      	ldr	r3, [pc, #92]	; (1031c <__register_exitproc+0xc0>)
   102be:	b30b      	cbz	r3, 10304 <__register_exitproc+0xa8>
   102c0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   102c4:	f7ff fc1e 	bl	fb04 <malloc>
   102c8:	4603      	mov	r3, r0
   102ca:	b1d8      	cbz	r0, 10304 <__register_exitproc+0xa8>
   102cc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   102d0:	6002      	str	r2, [r0, #0]
   102d2:	2100      	movs	r1, #0
   102d4:	6041      	str	r1, [r0, #4]
   102d6:	460a      	mov	r2, r1
   102d8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   102dc:	f04f 0e01 	mov.w	lr, #1
   102e0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   102e4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   102e8:	2e00      	cmp	r6, #0
   102ea:	d0dc      	beq.n	102a6 <__register_exitproc+0x4a>
   102ec:	e7cc      	b.n	10288 <__register_exitproc+0x2c>
   102ee:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   102f2:	430c      	orrs	r4, r1
   102f4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   102f8:	e7d5      	b.n	102a6 <__register_exitproc+0x4a>
   102fa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   102fe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   10302:	e7bb      	b.n	1027c <__register_exitproc+0x20>
   10304:	6828      	ldr	r0, [r5, #0]
   10306:	f000 f837 	bl	10378 <__retarget_lock_release_recursive>
   1030a:	f04f 30ff 	mov.w	r0, #4294967295
   1030e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10312:	bf00      	nop
   10314:	20000608 	.word	0x20000608
   10318:	0001083c 	.word	0x0001083c
   1031c:	0000fb05 	.word	0x0000fb05

00010320 <register_fini>:
   10320:	4b02      	ldr	r3, [pc, #8]	; (1032c <register_fini+0xc>)
   10322:	b113      	cbz	r3, 1032a <register_fini+0xa>
   10324:	4802      	ldr	r0, [pc, #8]	; (10330 <register_fini+0x10>)
   10326:	f000 b805 	b.w	10334 <atexit>
   1032a:	4770      	bx	lr
   1032c:	00000000 	.word	0x00000000
   10330:	00010341 	.word	0x00010341

00010334 <atexit>:
   10334:	2300      	movs	r3, #0
   10336:	4601      	mov	r1, r0
   10338:	461a      	mov	r2, r3
   1033a:	4618      	mov	r0, r3
   1033c:	f7ff bf8e 	b.w	1025c <__register_exitproc>

00010340 <__libc_fini_array>:
   10340:	b538      	push	{r3, r4, r5, lr}
   10342:	4c0a      	ldr	r4, [pc, #40]	; (1036c <__libc_fini_array+0x2c>)
   10344:	4d0a      	ldr	r5, [pc, #40]	; (10370 <__libc_fini_array+0x30>)
   10346:	1b64      	subs	r4, r4, r5
   10348:	10a4      	asrs	r4, r4, #2
   1034a:	d00a      	beq.n	10362 <__libc_fini_array+0x22>
   1034c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   10350:	3b01      	subs	r3, #1
   10352:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10356:	3c01      	subs	r4, #1
   10358:	f855 3904 	ldr.w	r3, [r5], #-4
   1035c:	4798      	blx	r3
   1035e:	2c00      	cmp	r4, #0
   10360:	d1f9      	bne.n	10356 <__libc_fini_array+0x16>
   10362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10366:	f000 ba89 	b.w	1087c <_fini>
   1036a:	bf00      	nop
   1036c:	0001088c 	.word	0x0001088c
   10370:	00010888 	.word	0x00010888

00010374 <__retarget_lock_acquire_recursive>:
   10374:	4770      	bx	lr
   10376:	bf00      	nop

00010378 <__retarget_lock_release_recursive>:
   10378:	4770      	bx	lr
   1037a:	bf00      	nop
   1037c:	682f2e2e 	.word	0x682f2e2e
   10380:	702f6c70 	.word	0x702f6c70
   10384:	2f74726f 	.word	0x2f74726f
   10388:	5f6c7068 	.word	0x5f6c7068
   1038c:	6f697067 	.word	0x6f697067
   10390:	7361625f 	.word	0x7361625f
   10394:	00682e65 	.word	0x00682e65
   10398:	682f2e2e 	.word	0x682f2e2e
   1039c:	692f6c61 	.word	0x692f6c61
   103a0:	756c636e 	.word	0x756c636e
   103a4:	682f6564 	.word	0x682f6564
   103a8:	775f6c61 	.word	0x775f6c61
   103ac:	682e7464 	.word	0x682e7464
   103b0:	00000000 	.word	0x00000000
   103b4:	682f2e2e 	.word	0x682f2e2e
   103b8:	732f6c61 	.word	0x732f6c61
   103bc:	682f6372 	.word	0x682f6372
   103c0:	635f6c61 	.word	0x635f6c61
   103c4:	6e656c61 	.word	0x6e656c61
   103c8:	2e726164 	.word	0x2e726164
   103cc:	00000063 	.word	0x00000063
   103d0:	682f2e2e 	.word	0x682f2e2e
   103d4:	732f6c61 	.word	0x732f6c61
   103d8:	682f6372 	.word	0x682f6372
   103dc:	635f6c61 	.word	0x635f6c61
   103e0:	615f6e61 	.word	0x615f6e61
   103e4:	636e7973 	.word	0x636e7973
   103e8:	0000632e 	.word	0x0000632e
   103ec:	682f2e2e 	.word	0x682f2e2e
   103f0:	732f6c61 	.word	0x732f6c61
   103f4:	682f6372 	.word	0x682f6372
   103f8:	635f6c61 	.word	0x635f6c61
   103fc:	735f6372 	.word	0x735f6372
   10400:	2e636e79 	.word	0x2e636e79
   10404:	00000063 	.word	0x00000063
   10408:	682f2e2e 	.word	0x682f2e2e
   1040c:	732f6c61 	.word	0x732f6c61
   10410:	682f6372 	.word	0x682f6372
   10414:	695f6c61 	.word	0x695f6c61
   10418:	6d5f6332 	.word	0x6d5f6332
   1041c:	7973615f 	.word	0x7973615f
   10420:	632e636e 	.word	0x632e636e
   10424:	00000000 	.word	0x00000000
   10428:	682f2e2e 	.word	0x682f2e2e
   1042c:	732f6c61 	.word	0x732f6c61
   10430:	682f6372 	.word	0x682f6372
   10434:	695f6c61 	.word	0x695f6c61
   10438:	6d5f6332 	.word	0x6d5f6332
   1043c:	6e79735f 	.word	0x6e79735f
   10440:	00632e63 	.word	0x00632e63
   10444:	682f2e2e 	.word	0x682f2e2e
   10448:	732f6c61 	.word	0x732f6c61
   1044c:	682f6372 	.word	0x682f6372
   10450:	705f6c61 	.word	0x705f6c61
   10454:	632e6d77 	.word	0x632e6d77
   10458:	00000000 	.word	0x00000000
   1045c:	682f2e2e 	.word	0x682f2e2e
   10460:	732f6c61 	.word	0x732f6c61
   10464:	682f6372 	.word	0x682f6372
   10468:	715f6c61 	.word	0x715f6c61
   1046c:	5f697073 	.word	0x5f697073
   10470:	636e7973 	.word	0x636e7973
   10474:	0000632e 	.word	0x0000632e
   10478:	682f2e2e 	.word	0x682f2e2e
   1047c:	732f6c61 	.word	0x732f6c61
   10480:	682f6372 	.word	0x682f6372
   10484:	735f6c61 	.word	0x735f6c61
   10488:	6d5f6970 	.word	0x6d5f6970
   1048c:	6e79735f 	.word	0x6e79735f
   10490:	00632e63 	.word	0x00632e63
   10494:	682f2e2e 	.word	0x682f2e2e
   10498:	732f6c61 	.word	0x732f6c61
   1049c:	682f6372 	.word	0x682f6372
   104a0:	745f6c61 	.word	0x745f6c61
   104a4:	72656d69 	.word	0x72656d69
   104a8:	0000632e 	.word	0x0000632e
   104ac:	682f2e2e 	.word	0x682f2e2e
   104b0:	752f6c61 	.word	0x752f6c61
   104b4:	736c6974 	.word	0x736c6974
   104b8:	6372732f 	.word	0x6372732f
   104bc:	6974752f 	.word	0x6974752f
   104c0:	6c5f736c 	.word	0x6c5f736c
   104c4:	2e747369 	.word	0x2e747369
   104c8:	00000063 	.word	0x00000063

000104cc <_map>:
   104cc:	00000000 00000040 00000001 00000021     ....@.......!...
   104dc:	00000003 00000003 00000004 00000004     ................
   104ec:	00000005 00000005 00000006 00000056     ............V...
   104fc:	00000007 00000057 00000008 00000028     ....W.......(...
   1050c:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   1051c:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

0001052c <user_mux_confs>:
   1052c:	00020100 00000000 00000000 00000000     ................
	...

00010570 <channel_confs>:
   10570:	0660065f 00000000 00000000 00000000     _.`.............
	...

000105b0 <interrupt_cfg>:
	...
   10630:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   10640:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   10650:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   10660:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   10670:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   10680:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   10690:	43000400 43000800 43000c00              ...C...C...C

0001069c <sercomspi_regs>:
   1069c:	0020000c 00020000 00000000 01ff0001     .. .............
   106ac:	30000c04 02000000 00000000 ff00ef00     ...0............
   106bc:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   106cc:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   106dc:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   106ec:	43001400 43001800                       ...C...C

000106f4 <_usb_ep_cfgs>:
   106f4:	20000c30 00000000 00000040 20000c70     0.. ....@...p.. 
   10704:	20000cb0 00400040 20000cf0 20000d30     ... @.@.... 0.. 
   10714:	00400040 20000d70 20000db0 00400040     @.@.p.. ... @.@.
   10724:	20000df0 20000e30 00400040 00000804     ... 0.. @.@.....
   10734:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   10744:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   10754:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   10764:	7361625f 00682e65                       _base.h.

0001076c <n25q256a_interface>:
   1076c:	0000c595 0000c639 0000c749 0000c901     ....9...I.......
   1077c:	0000c991 752f2e2e 642f6273 63697665     ....../usb/devic
   1078c:	73752f65 2e636462 00000063              e/usbdc.c...

00010798 <defaultParameters>:
   10798:	00000040                                @...

0001079c <defaultPreferences>:
   1079c:	000000fa 00000032                       ....2...

000107a4 <_ZTV9CDC_Class>:
	...
   107ac:	0000f2a1 0000f381 0000eef5 0000f269     ............i...
   107bc:	0000f419 0000f22d 0000f111 0000f161     ....-.......a...
   107cc:	0000f289 0000f2e9                       ........

000107d4 <_ZTV6Stream>:
	...
   107dc:	0000fb19 0000f4ad 0000eef5 0000ef09     ................
   107ec:	0000fb19 0000fb19 0000fb19 2e257830     ............0x%.
   107fc:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   1080c:	0066766f                                ovf.

00010810 <_ZTV5Print>:
	...
   10818:	0000fb19 0000f4ad 0000eef5 0000ef09     ................
   10828:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   10838:	00632e6f                                o.c.

0001083c <_global_impure_ptr>:
   1083c:	200001e0                                ... 

00010840 <_init>:
   10840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10842:	bf00      	nop
   10844:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10846:	bc08      	pop	{r3}
   10848:	469e      	mov	lr, r3
   1084a:	4770      	bx	lr

0001084c <__init_array_start>:
   1084c:	00010321 	.word	0x00010321

00010850 <__frame_dummy_init_array_entry>:
   10850:	00000289 00000575 000008a5 00000c89     ....u...........
   10860:	0000ec85 0000eebd 0000f499 0000faf1     ................
   10870:	0000fde1 0000fe5d 0000fff5              ....].......

0001087c <_fini>:
   1087c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1087e:	bf00      	nop
   10880:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10882:	bc08      	pop	{r3}
   10884:	469e      	mov	lr, r3
   10886:	4770      	bx	lr

00010888 <__fini_array_start>:
   10888:	00000265 	.word	0x00000265
