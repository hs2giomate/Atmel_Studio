
EvaporatorAndCondesatorFan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f0a0  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000f0a0  0000f0a0  0001f0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000063c  20000000  0000f0a8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002063c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002063c  2**0
                  CONTENTS
  5 .bss          000012d0  2000063c  0000f6e4  0002063c  2**2
                  ALLOC
  6 .stack        00010004  2000190c  000109b4  0002063c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002063c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002066a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00068616  00000000  00000000  000206c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009174  00000000  00000000  00088cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001a50e  00000000  00000000  00091e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002ef0  00000000  00000000  000ac35b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002c20  00000000  00000000  000af24b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004c9a6  00000000  00000000  000b1e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00036cef  00000000  00000000  000fe811  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013c6fa  00000000  00000000  00135500  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c3b8  00000000  00000000  00271bfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	10 19 01 20 e9 03 00 00 e5 03 00 00 e5 03 00 00     ... ............
      10:	e5 03 00 00 e5 03 00 00 e5 03 00 00 00 00 00 00     ................
	...
      2c:	e5 03 00 00 e5 03 00 00 00 00 00 00 e5 03 00 00     ................
      3c:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................
      4c:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................
      5c:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................
      6c:	f5 5c 00 00 f9 4a 00 00 09 4b 00 00 e5 03 00 00     .\...J...K......
      7c:	19 4b 00 00 29 4b 00 00 39 4b 00 00 49 4b 00 00     .K..)K..9K..IK..
      8c:	59 4b 00 00 69 4b 00 00 79 4b 00 00 e5 03 00 00     YK..iK..yK......
      9c:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................
      ac:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................
      bc:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................
      cc:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................
      dc:	e5 03 00 00 e5 03 00 00 e5 03 00 00 00 00 00 00     ................
	...
      f4:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................
     104:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................
     114:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................
     124:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................
     134:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................
     144:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................
     154:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................
     164:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................
     174:	e5 03 00 00 e5 03 00 00 41 3f 00 00 71 ac 00 00     ........A?..q...
     184:	81 ac 00 00 91 ac 00 00 a1 ac 00 00 e5 03 00 00     ................
     194:	71 76 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     qv..............
     1a4:	e5 03 00 00 e5 03 00 00 e5 03 00 00 8d 76 00 00     .............v..
     1b4:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................
     1c4:	a9 76 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     .v..............
     1d4:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................
     1e4:	e5 03 00 00 e5 03 00 00 6d 83 00 00 e5 03 00 00     ........m.......
     1f4:	89 83 00 00 e5 03 00 00 a5 83 00 00 c1 83 00 00     ................
     204:	dd 83 00 00 f9 83 00 00 e5 03 00 00 e5 03 00 00     ................
     214:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................
     224:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................
     234:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................
     244:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................
     254:	e5 03 00 00 e5 03 00 00 e5 03 00 00 e5 03 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000063c 	.word	0x2000063c
     280:	00000000 	.word	0x00000000
     284:	0000f0a8 	.word	0x0000f0a8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000f0a8 	.word	0x0000f0a8
     2c4:	20000640 	.word	0x20000640
     2c8:	0000f0a8 	.word	0x0000f0a8
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN19CondesatorFan_ClassC1Ev>:
#include "CondesatorFan_Class.h"

// default constructor
CondesatorFan_Class::CondesatorFan_Class()
{
} //CondesatorFan_Class
     2d0:	4770      	bx	lr

000002d2 <_ZN19CondesatorFan_ClassD1Ev>:

// default destructor
CondesatorFan_Class::~CondesatorFan_Class()
{
} //~CondesatorFan_Class
     2d2:	4770      	bx	lr

000002d4 <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
	return isOK;
	
	
}

uint8_t CondesatorFan_Class::InitExpanderArray(MCP23008_Class** expandersArray){
     2d4:	1f0b      	subs	r3, r1, #4
     2d6:	300c      	adds	r0, #12
     2d8:	3118      	adds	r1, #24
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
		{
			expanders[i]=expandersArray[i];
     2da:	f853 2f04 	ldr.w	r2, [r3, #4]!
     2de:	f840 2b04 	str.w	r2, [r0], #4
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
     2e2:	428b      	cmp	r3, r1
     2e4:	d1f9      	bne.n	2da <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
		}
		return 0;
}
     2e6:	2000      	movs	r0, #0
     2e8:	4770      	bx	lr
	...

000002ec <_ZN19CondesatorFan_Class10ReadStatusEv>:
	


uint8_t	CondesatorFan_Class::ReadStatus(void){
     2ec:	b510      	push	{r4, lr}
     2ee:	4604      	mov	r4, r0
	uint8_t r=expanders[0]->ReadGPIORegister();
     2f0:	68c0      	ldr	r0, [r0, #12]
     2f2:	4b08      	ldr	r3, [pc, #32]	; (314 <_ZN19CondesatorFan_Class10ReadStatusEv+0x28>)
     2f4:	4798      	blx	r3
	
	
	condesatorStatus.niAlcCdsFanExtFault=r&(0x01<<(4));
     2f6:	f3c0 1100 	ubfx	r1, r0, #4, #1
     2fa:	78e3      	ldrb	r3, [r4, #3]
     2fc:	f361 0382 	bfi	r3, r1, #2, #1
	condesatorStatus.niAlcCdsFanEnableFault=r&(0x02<<(4));
     300:	f3c0 1140 	ubfx	r1, r0, #5, #1
     304:	f361 0341 	bfi	r3, r1, #1, #1
	condesatorStatus.niAlcCdsFanPwmFault=r&(0x04<<(4));
     308:	f3c0 1280 	ubfx	r2, r0, #6, #1
     30c:	f362 0300 	bfi	r3, r2, #0, #1
     310:	70e3      	strb	r3, [r4, #3]
	
	return r;
}
     312:	bd10      	pop	{r4, pc}
     314:	0000d4b1 	.word	0x0000d4b1

00000318 <_ZN19CondesatorFan_Class6EnableEv>:
uint8_t	CondesatorFan_Class::Enable(void){
     318:	b510      	push	{r4, lr}
     31a:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(2,true);
     31c:	2201      	movs	r2, #1
     31e:	2102      	movs	r1, #2
     320:	68c0      	ldr	r0, [r0, #12]
     322:	4b02      	ldr	r3, [pc, #8]	; (32c <_ZN19CondesatorFan_Class6EnableEv+0x14>)
     324:	4798      	blx	r3
     326:	7060      	strb	r0, [r4, #1]
	return uint8_t(enabled);
}
     328:	bd10      	pop	{r4, pc}
     32a:	bf00      	nop
     32c:	0000d721 	.word	0x0000d721

00000330 <_ZN19CondesatorFan_Class9SetEnableEb>:
uint8_t	CondesatorFan_Class::SetEnable(bool state){
     330:	b510      	push	{r4, lr}
     332:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(0,state);
     334:	460a      	mov	r2, r1
     336:	2100      	movs	r1, #0
     338:	68c0      	ldr	r0, [r0, #12]
     33a:	4b02      	ldr	r3, [pc, #8]	; (344 <_ZN19CondesatorFan_Class9SetEnableEb+0x14>)
     33c:	4798      	blx	r3
     33e:	7060      	strb	r0, [r4, #1]
	
	return uint8_t(enabled);
}
     340:	bd10      	pop	{r4, pc}
     342:	bf00      	nop
     344:	0000d721 	.word	0x0000d721

00000348 <_ZN19CondesatorFan_Class6SetPWMEh>:
	enabled=(value&0x01);
	return enabled;
}


uint8_t	CondesatorFan_Class::SetPWM(uint8_t pwm){
     348:	b510      	push	{r4, lr}
     34a:	4604      	mov	r4, r0
	pwmValue= expanders[6]->WriteGPIORegister(pwm);
     34c:	6a40      	ldr	r0, [r0, #36]	; 0x24
     34e:	4b02      	ldr	r3, [pc, #8]	; (358 <_ZN19CondesatorFan_Class6SetPWMEh+0x10>)
     350:	4798      	blx	r3
     352:	7120      	strb	r0, [r4, #4]
	return pwmValue;
}
     354:	bd10      	pop	{r4, pc}
     356:	bf00      	nop
     358:	0000d535 	.word	0x0000d535

0000035c <_ZN19CondesatorFan_Class8SelfTestEv>:

bool CondesatorFan_Class::SelfTest(void){
     35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     360:	4605      	mov	r5, r0
		bool result;
		SetEnable(false);
     362:	2100      	movs	r1, #0
     364:	4c0f      	ldr	r4, [pc, #60]	; (3a4 <_ZN19CondesatorFan_Class8SelfTestEv+0x48>)
     366:	47a0      	blx	r4
		SetPWM(0xff);
     368:	21ff      	movs	r1, #255	; 0xff
     36a:	4628      	mov	r0, r5
     36c:	4b0e      	ldr	r3, [pc, #56]	; (3a8 <_ZN19CondesatorFan_Class8SelfTestEv+0x4c>)
     36e:	4798      	blx	r3
		SetEnable(true);
     370:	2101      	movs	r1, #1
     372:	4628      	mov	r0, r5
     374:	47a0      	blx	r4
     376:	24ff      	movs	r4, #255	; 0xff
		for (uint8_t i = 0xff; i >CONDESATOR_MINIMUN_FLOW_AIR ; i--)
		{
			SetPWM(i);
     378:	4f0b      	ldr	r7, [pc, #44]	; (3a8 <_ZN19CondesatorFan_Class8SelfTestEv+0x4c>)
			delay_us(10);
     37a:	f04f 080a 	mov.w	r8, #10
     37e:	4e0b      	ldr	r6, [pc, #44]	; (3ac <_ZN19CondesatorFan_Class8SelfTestEv+0x50>)
			SetPWM(i);
     380:	4621      	mov	r1, r4
     382:	4628      	mov	r0, r5
     384:	47b8      	blx	r7
			delay_us(10);
     386:	4640      	mov	r0, r8
     388:	47b0      	blx	r6
		for (uint8_t i = 0xff; i >CONDESATOR_MINIMUN_FLOW_AIR ; i--)
     38a:	3c01      	subs	r4, #1
     38c:	b2e4      	uxtb	r4, r4
     38e:	2c10      	cmp	r4, #16
     390:	d1f6      	bne.n	380 <_ZN19CondesatorFan_Class8SelfTestEv+0x24>
		}

		ReadStatus();
     392:	4628      	mov	r0, r5
     394:	4b06      	ldr	r3, [pc, #24]	; (3b0 <_ZN19CondesatorFan_Class8SelfTestEv+0x54>)
     396:	4798      	blx	r3
// 		delay_ms(6*1000);
// 		SetEnable(false);
		result=condesatorStatus.niAlcCdsFanExtFault;
     398:	78e8      	ldrb	r0, [r5, #3]
		return result;
     39a:	f3c0 0080 	ubfx	r0, r0, #2, #1
     39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     3a2:	bf00      	nop
     3a4:	00000331 	.word	0x00000331
     3a8:	00000349 	.word	0x00000349
     3ac:	000021d9 	.word	0x000021d9
     3b0:	000002ed 	.word	0x000002ed

000003b4 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class>:
bool CondesatorFan_Class::InitCondesator(I2C_Sync_Class* i2cClass,MCP23008_Class** expanderArray){
     3b4:	b510      	push	{r4, lr}
     3b6:	4604      	mov	r4, r0
	i2c=i2cClass;
     3b8:	6081      	str	r1, [r0, #8]
	if (i2c->isOK)
     3ba:	7a4b      	ldrb	r3, [r1, #9]
     3bc:	b90b      	cbnz	r3, 3c2 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
}
     3be:	78a0      	ldrb	r0, [r4, #2]
     3c0:	bd10      	pop	{r4, pc}
		InitExpanderArray(expanderArray);
     3c2:	4611      	mov	r1, r2
     3c4:	4b04      	ldr	r3, [pc, #16]	; (3d8 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x24>)
     3c6:	4798      	blx	r3
		expanders[EVAPORATOR_AND_CONDESATOR_EXPANDERS-1]->SetPortOutput();
     3c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
     3ca:	4b04      	ldr	r3, [pc, #16]	; (3dc <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x28>)
     3cc:	4798      	blx	r3
		isOK=SelfTest();
     3ce:	4620      	mov	r0, r4
     3d0:	4b03      	ldr	r3, [pc, #12]	; (3e0 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x2c>)
     3d2:	4798      	blx	r3
     3d4:	70a0      	strb	r0, [r4, #2]
     3d6:	e7f2      	b.n	3be <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xa>
     3d8:	000002d5 	.word	0x000002d5
     3dc:	0000d629 	.word	0x0000d629
     3e0:	0000035d 	.word	0x0000035d

000003e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     3e4:	e7fe      	b.n	3e4 <Dummy_Handler>
	...

000003e8 <Reset_Handler>:
{
     3e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     3ea:	4b17      	ldr	r3, [pc, #92]	; (448 <Reset_Handler+0x60>)
     3ec:	4a17      	ldr	r2, [pc, #92]	; (44c <Reset_Handler+0x64>)
     3ee:	429a      	cmp	r2, r3
     3f0:	d010      	beq.n	414 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     3f2:	4b17      	ldr	r3, [pc, #92]	; (450 <Reset_Handler+0x68>)
     3f4:	4a14      	ldr	r2, [pc, #80]	; (448 <Reset_Handler+0x60>)
     3f6:	429a      	cmp	r2, r3
     3f8:	d20c      	bcs.n	414 <Reset_Handler+0x2c>
     3fa:	3b01      	subs	r3, #1
     3fc:	1a9b      	subs	r3, r3, r2
     3fe:	f023 0303 	bic.w	r3, r3, #3
     402:	3304      	adds	r3, #4
     404:	4413      	add	r3, r2
     406:	4911      	ldr	r1, [pc, #68]	; (44c <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     408:	f851 0b04 	ldr.w	r0, [r1], #4
     40c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     410:	429a      	cmp	r2, r3
     412:	d1f9      	bne.n	408 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     414:	4b0f      	ldr	r3, [pc, #60]	; (454 <Reset_Handler+0x6c>)
     416:	4a10      	ldr	r2, [pc, #64]	; (458 <Reset_Handler+0x70>)
     418:	429a      	cmp	r2, r3
     41a:	d20a      	bcs.n	432 <Reset_Handler+0x4a>
     41c:	3b01      	subs	r3, #1
     41e:	1a9b      	subs	r3, r3, r2
     420:	f023 0303 	bic.w	r3, r3, #3
     424:	3304      	adds	r3, #4
     426:	4413      	add	r3, r2
                *pDest++ = 0;
     428:	2100      	movs	r1, #0
     42a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     42e:	4293      	cmp	r3, r2
     430:	d1fb      	bne.n	42a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     432:	4a0a      	ldr	r2, [pc, #40]	; (45c <Reset_Handler+0x74>)
     434:	4b0a      	ldr	r3, [pc, #40]	; (460 <Reset_Handler+0x78>)
     436:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     43a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     43c:	4b09      	ldr	r3, [pc, #36]	; (464 <Reset_Handler+0x7c>)
     43e:	4798      	blx	r3
        main();
     440:	4b09      	ldr	r3, [pc, #36]	; (468 <Reset_Handler+0x80>)
     442:	4798      	blx	r3
     444:	e7fe      	b.n	444 <Reset_Handler+0x5c>
     446:	bf00      	nop
     448:	20000000 	.word	0x20000000
     44c:	0000f0a8 	.word	0x0000f0a8
     450:	2000063c 	.word	0x2000063c
     454:	2000190c 	.word	0x2000190c
     458:	2000063c 	.word	0x2000063c
     45c:	e000ed00 	.word	0xe000ed00
     460:	00000000 	.word	0x00000000
     464:	0000e891 	.word	0x0000e891
     468:	00000819 	.word	0x00000819

0000046c <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev>:
	somethingChanged=false;
	
} //EvaporatorAndCondesatorFans_Class

// default destructor
EvaporatorAndCondesatorFans_Class::~EvaporatorAndCondesatorFans_Class()
     46c:	b510      	push	{r4, lr}
     46e:	4604      	mov	r4, r0
     470:	302c      	adds	r0, #44	; 0x2c
     472:	4b03      	ldr	r3, [pc, #12]	; (480 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x14>)
     474:	4798      	blx	r3
     476:	4620      	mov	r0, r4
     478:	4b02      	ldr	r3, [pc, #8]	; (484 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x18>)
     47a:	4798      	blx	r3
{
} //~EvaporatorAndCondesatorFans_Class
     47c:	4620      	mov	r0, r4
     47e:	bd10      	pop	{r4, pc}
     480:	000002d3 	.word	0x000002d3
     484:	00000695 	.word	0x00000695

00000488 <__tcf_1>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
     488:	b570      	push	{r4, r5, r6, lr}
     48a:	4c05      	ldr	r4, [pc, #20]	; (4a0 <__tcf_1+0x18>)
     48c:	4e05      	ldr	r6, [pc, #20]	; (4a4 <__tcf_1+0x1c>)
     48e:	f1a4 05c4 	sub.w	r5, r4, #196	; 0xc4
     492:	3c1c      	subs	r4, #28
     494:	4620      	mov	r0, r4
     496:	47b0      	blx	r6
     498:	42ac      	cmp	r4, r5
     49a:	d1fa      	bne.n	492 <__tcf_1+0xa>
     49c:	bd70      	pop	{r4, r5, r6, pc}
     49e:	bf00      	nop
     4a0:	2000071c 	.word	0x2000071c
     4a4:	0000d3b9 	.word	0x0000d3b9

000004a8 <__tcf_0>:
static EvaporatorFan_Class	evaporatorFan[2];
     4a8:	b510      	push	{r4, lr}
     4aa:	4803      	ldr	r0, [pc, #12]	; (4b8 <__tcf_0+0x10>)
     4ac:	4c03      	ldr	r4, [pc, #12]	; (4bc <__tcf_0+0x14>)
     4ae:	47a0      	blx	r4
     4b0:	4803      	ldr	r0, [pc, #12]	; (4c0 <__tcf_0+0x18>)
     4b2:	47a0      	blx	r4
     4b4:	bd10      	pop	{r4, pc}
     4b6:	bf00      	nop
     4b8:	20000748 	.word	0x20000748
     4bc:	00000695 	.word	0x00000695
     4c0:	2000071c 	.word	0x2000071c

000004c4 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev>:
EvaporatorAndCondesatorFans_Class::EvaporatorAndCondesatorFans_Class()
     4c4:	b510      	push	{r4, lr}
     4c6:	4604      	mov	r4, r0
     4c8:	4b0d      	ldr	r3, [pc, #52]	; (500 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x3c>)
     4ca:	4798      	blx	r3
     4cc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
     4d0:	4b0c      	ldr	r3, [pc, #48]	; (504 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x40>)
     4d2:	4798      	blx	r3
	i2c=&i2cSharedStatic;
     4d4:	4b0c      	ldr	r3, [pc, #48]	; (508 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x44>)
     4d6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
     4da:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	evaporator[0]=&evaporatorFan[0];
     4de:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
     4e2:	65e2      	str	r2, [r4, #92]	; 0x5c
	evaporator[1]=&evaporatorFan[1];
     4e4:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
     4e8:	6622      	str	r2, [r4, #96]	; 0x60
	condesator=&condesatorFan;
     4ea:	f503 729a 	add.w	r2, r3, #308	; 0x134
     4ee:	6662      	str	r2, [r4, #100]	; 0x64
	ptrFansClass=this;
     4f0:	f8c3 4160 	str.w	r4, [r3, #352]	; 0x160
	somethingChanged=false;
     4f4:	2300      	movs	r3, #0
     4f6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
} //EvaporatorAndCondesatorFans_Class
     4fa:	4620      	mov	r0, r4
     4fc:	bd10      	pop	{r4, pc}
     4fe:	bf00      	nop
     500:	0000067d 	.word	0x0000067d
     504:	000002d1 	.word	0x000002d1
     508:	20000658 	.word	0x20000658

0000050c <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv>:
	}
	isOK=i2c->isOK;
	return isOK;
	
}
uint8_t EvaporatorAndCondesatorFans_Class::InitExpanderArray(void){
     50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     510:	4606      	mov	r6, r0
     512:	4c0c      	ldr	r4, [pc, #48]	; (544 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x38>)
     514:	f100 0768 	add.w	r7, r0, #104	; 0x68
	
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
     518:	2500      	movs	r5, #0
	{
		expanders[i]=&expandersStatic[i];
		currentExpander=expanders[i];
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
     51a:	f8df 802c 	ldr.w	r8, [pc, #44]	; 548 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x3c>
		expanders[i]=&expandersStatic[i];
     51e:	f847 4b04 	str.w	r4, [r7], #4
		currentExpander=expanders[i];
     522:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
     526:	f045 0120 	orr.w	r1, r5, #32
     52a:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
     52e:	b2c9      	uxtb	r1, r1
     530:	4620      	mov	r0, r4
     532:	47c0      	blx	r8
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
     534:	3501      	adds	r5, #1
     536:	341c      	adds	r4, #28
     538:	2d07      	cmp	r5, #7
     53a:	d1f0      	bne.n	51e <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x12>
	}
	return 0;
}
     53c:	2000      	movs	r0, #0
     53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     542:	bf00      	nop
     544:	20000658 	.word	0x20000658
     548:	0000d3cd 	.word	0x0000d3cd

0000054c <_ZN33EvaporatorAndCondesatorFans_Class4InitEv>:
bool	EvaporatorAndCondesatorFans_Class::Init(void){
     54c:	b570      	push	{r4, r5, r6, lr}
     54e:	4604      	mov	r4, r0
	i2c->Init();
     550:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
     554:	4b17      	ldr	r3, [pc, #92]	; (5b4 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x68>)
     556:	4798      	blx	r3
	if (i2c->isOK)
     558:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     55c:	7a5b      	ldrb	r3, [r3, #9]
     55e:	b943      	cbnz	r3, 572 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x26>
	isOK=i2c->isOK;
     560:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     564:	7a5b      	ldrb	r3, [r3, #9]
     566:	b2db      	uxtb	r3, r3
     568:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
	return isOK;
     56c:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
}
     570:	bd70      	pop	{r4, r5, r6, pc}
		InitExpanderArray();
     572:	4620      	mov	r0, r4
     574:	4b10      	ldr	r3, [pc, #64]	; (5b8 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x6c>)
     576:	4798      	blx	r3
		evaporator[0]->InitEvaporator(0,i2c,expanders);
     578:	f104 0568 	add.w	r5, r4, #104	; 0x68
     57c:	462b      	mov	r3, r5
     57e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
     582:	2100      	movs	r1, #0
     584:	6de0      	ldr	r0, [r4, #92]	; 0x5c
     586:	4e0d      	ldr	r6, [pc, #52]	; (5bc <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x70>)
     588:	47b0      	blx	r6
		evaporator[1]->InitEvaporator(1,i2c,expanders);
     58a:	462b      	mov	r3, r5
     58c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
     590:	2101      	movs	r1, #1
     592:	6e20      	ldr	r0, [r4, #96]	; 0x60
     594:	47b0      	blx	r6
		condesator->InitCondesator(i2c,expanders);
     596:	462a      	mov	r2, r5
     598:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
     59c:	6e60      	ldr	r0, [r4, #100]	; 0x64
     59e:	4b08      	ldr	r3, [pc, #32]	; (5c0 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x74>)
     5a0:	4798      	blx	r3
		isOK=(evaporator[0]->isOK)&(evaporator[1]->isOK);
     5a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
     5a4:	6e22      	ldr	r2, [r4, #96]	; 0x60
     5a6:	791b      	ldrb	r3, [r3, #4]
     5a8:	7912      	ldrb	r2, [r2, #4]
     5aa:	4013      	ands	r3, r2
     5ac:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     5b0:	e7d6      	b.n	560 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x14>
     5b2:	bf00      	nop
     5b4:	0000d279 	.word	0x0000d279
     5b8:	0000050d 	.word	0x0000050d
     5bc:	000007b1 	.word	0x000007b1
     5c0:	000003b5 	.word	0x000003b5

000005c4 <_GLOBAL__sub_I_ptrFansClass>:
	}
	

}

EvaporatorAndCondesatorFans_Class  fans;
     5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
static I2C_Sync_Class	i2cSharedStatic(&I2C_FANS);
     5c8:	4c1c      	ldr	r4, [pc, #112]	; (63c <_GLOBAL__sub_I_ptrFansClass+0x78>)
     5ca:	f504 758e 	add.w	r5, r4, #284	; 0x11c
     5ce:	491c      	ldr	r1, [pc, #112]	; (640 <_GLOBAL__sub_I_ptrFansClass+0x7c>)
     5d0:	4628      	mov	r0, r5
     5d2:	4b1c      	ldr	r3, [pc, #112]	; (644 <_GLOBAL__sub_I_ptrFansClass+0x80>)
     5d4:	4798      	blx	r3
     5d6:	4f1c      	ldr	r7, [pc, #112]	; (648 <_GLOBAL__sub_I_ptrFansClass+0x84>)
     5d8:	463a      	mov	r2, r7
     5da:	491c      	ldr	r1, [pc, #112]	; (64c <_GLOBAL__sub_I_ptrFansClass+0x88>)
     5dc:	4628      	mov	r0, r5
     5de:	4e1c      	ldr	r6, [pc, #112]	; (650 <_GLOBAL__sub_I_ptrFansClass+0x8c>)
     5e0:	47b0      	blx	r6
static EvaporatorFan_Class	evaporatorFan[2];
     5e2:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
     5e6:	4628      	mov	r0, r5
     5e8:	f8df 8088 	ldr.w	r8, [pc, #136]	; 674 <_GLOBAL__sub_I_ptrFansClass+0xb0>
     5ec:	47c0      	blx	r8
     5ee:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
     5f2:	47c0      	blx	r8
     5f4:	463a      	mov	r2, r7
     5f6:	4917      	ldr	r1, [pc, #92]	; (654 <_GLOBAL__sub_I_ptrFansClass+0x90>)
     5f8:	2000      	movs	r0, #0
     5fa:	47b0      	blx	r6
static CondesatorFan_Class	condesatorFan;
     5fc:	f504 789a 	add.w	r8, r4, #308	; 0x134
     600:	4640      	mov	r0, r8
     602:	4b15      	ldr	r3, [pc, #84]	; (658 <_GLOBAL__sub_I_ptrFansClass+0x94>)
     604:	4798      	blx	r3
     606:	463a      	mov	r2, r7
     608:	4914      	ldr	r1, [pc, #80]	; (65c <_GLOBAL__sub_I_ptrFansClass+0x98>)
     60a:	4640      	mov	r0, r8
     60c:	47b0      	blx	r6
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
     60e:	4e14      	ldr	r6, [pc, #80]	; (660 <_GLOBAL__sub_I_ptrFansClass+0x9c>)
     610:	4620      	mov	r0, r4
     612:	47b0      	blx	r6
     614:	341c      	adds	r4, #28
     616:	42a5      	cmp	r5, r4
     618:	d1fa      	bne.n	610 <_GLOBAL__sub_I_ptrFansClass+0x4c>
     61a:	4e0b      	ldr	r6, [pc, #44]	; (648 <_GLOBAL__sub_I_ptrFansClass+0x84>)
     61c:	4632      	mov	r2, r6
     61e:	4911      	ldr	r1, [pc, #68]	; (664 <_GLOBAL__sub_I_ptrFansClass+0xa0>)
     620:	2000      	movs	r0, #0
     622:	4c0b      	ldr	r4, [pc, #44]	; (650 <_GLOBAL__sub_I_ptrFansClass+0x8c>)
     624:	47a0      	blx	r4
EvaporatorAndCondesatorFans_Class  fans;
     626:	4d10      	ldr	r5, [pc, #64]	; (668 <_GLOBAL__sub_I_ptrFansClass+0xa4>)
     628:	4628      	mov	r0, r5
     62a:	4b10      	ldr	r3, [pc, #64]	; (66c <_GLOBAL__sub_I_ptrFansClass+0xa8>)
     62c:	4798      	blx	r3
     62e:	4632      	mov	r2, r6
     630:	490f      	ldr	r1, [pc, #60]	; (670 <_GLOBAL__sub_I_ptrFansClass+0xac>)
     632:	4628      	mov	r0, r5
     634:	47a0      	blx	r4
     636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     63a:	bf00      	nop
     63c:	20000658 	.word	0x20000658
     640:	200016a4 	.word	0x200016a4
     644:	0000d249 	.word	0x0000d249
     648:	20000000 	.word	0x20000000
     64c:	0000d265 	.word	0x0000d265
     650:	0000e85d 	.word	0x0000e85d
     654:	000004a9 	.word	0x000004a9
     658:	000002d1 	.word	0x000002d1
     65c:	000002d3 	.word	0x000002d3
     660:	0000d3a5 	.word	0x0000d3a5
     664:	00000489 	.word	0x00000489
     668:	200007bc 	.word	0x200007bc
     66c:	000004c5 	.word	0x000004c5
     670:	0000046d 	.word	0x0000046d
     674:	0000067d 	.word	0x0000067d

00000678 <_ZN29EvaporatorFanDataStruct_ClassC1Ev>:
#include "EvaporatorFanDataStruct_Class.h"

// default constructor
EvaporatorFanDataStruct_Class::EvaporatorFanDataStruct_Class()
{
} //EvaporatorFanDataStruct_Class
     678:	4770      	bx	lr

0000067a <_ZN29EvaporatorFanDataStruct_ClassD1Ev>:

// default destructor
EvaporatorFanDataStruct_Class::~EvaporatorFanDataStruct_Class()
{
} //~EvaporatorFanDataStruct_Class
     67a:	4770      	bx	lr

0000067c <_ZN19EvaporatorFan_ClassC1Ev>:




// default constructor
EvaporatorFan_Class::EvaporatorFan_Class()
     67c:	b510      	push	{r4, lr}
     67e:	4604      	mov	r4, r0
     680:	4b02      	ldr	r3, [pc, #8]	; (68c <_ZN19EvaporatorFan_ClassC1Ev+0x10>)
     682:	4798      	blx	r3
{
	
	ptrEvaFanClass=this;
     684:	4b02      	ldr	r3, [pc, #8]	; (690 <_ZN19EvaporatorFan_ClassC1Ev+0x14>)
     686:	601c      	str	r4, [r3, #0]
	
} //EvaporatorFan_Class
     688:	4620      	mov	r0, r4
     68a:	bd10      	pop	{r4, pc}
     68c:	00000679 	.word	0x00000679
     690:	20000848 	.word	0x20000848

00000694 <_ZN19EvaporatorFan_ClassD1Ev>:

// default destructor
EvaporatorFan_Class::~EvaporatorFan_Class()
     694:	b510      	push	{r4, lr}
     696:	4604      	mov	r4, r0
     698:	4b01      	ldr	r3, [pc, #4]	; (6a0 <_ZN19EvaporatorFan_ClassD1Ev+0xc>)
     69a:	4798      	blx	r3
{
} //~EvaporatorFan_Class
     69c:	4620      	mov	r0, r4
     69e:	bd10      	pop	{r4, pc}
     6a0:	0000067b 	.word	0x0000067b

000006a4 <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
		}
		return isOK;
	
	
}
uint8_t EvaporatorFan_Class::InitExpanderArray(MCP23008_Class** expanArray){
     6a4:	1f0b      	subs	r3, r1, #4
     6a6:	300c      	adds	r0, #12
     6a8:	3114      	adds	r1, #20
	
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
			{
				expanders[i]=expanArray[i];
     6aa:	f853 2f04 	ldr.w	r2, [r3, #4]!
     6ae:	f840 2b04 	str.w	r2, [r0], #4
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
     6b2:	428b      	cmp	r3, r1
     6b4:	d1f9      	bne.n	6aa <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
			}
			return 0;
}
     6b6:	2000      	movs	r0, #0
     6b8:	4770      	bx	lr
	...

000006bc <_ZN19EvaporatorFan_Class10ReadStatusEv>:

uint8_t	EvaporatorFan_Class::ReadStatus(void){
     6bc:	b570      	push	{r4, r5, r6, lr}
     6be:	4604      	mov	r4, r0
	uint8_t r=expanders[1]->ReadGPIORegister();
     6c0:	6900      	ldr	r0, [r0, #16]
     6c2:	4b0e      	ldr	r3, [pc, #56]	; (6fc <_ZN19EvaporatorFan_Class10ReadStatusEv+0x40>)
     6c4:	4798      	blx	r3
     6c6:	4601      	mov	r1, r0
	
	
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanExtFault=r&(0x01<<(4*fanNumber));
     6c8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
     6cc:	0096      	lsls	r6, r2, #2
     6ce:	fa40 f506 	asr.w	r5, r0, r6
     6d2:	5ca3      	ldrb	r3, [r4, r2]
     6d4:	f365 0382 	bfi	r3, r5, #2, #1
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanEnableFault=r&(0x02<<(4*fanNumber));
     6d8:	2502      	movs	r5, #2
     6da:	40b5      	lsls	r5, r6
     6dc:	4205      	tst	r5, r0
     6de:	bf14      	ite	ne
     6e0:	2501      	movne	r5, #1
     6e2:	2500      	moveq	r5, #0
     6e4:	f365 0341 	bfi	r3, r5, #1, #1
	evaporatorFansStatus.inputs[fanNumber].iAlcEvaFanPwmFault=r&(0x04<<(4*fanNumber));
     6e8:	2504      	movs	r5, #4
     6ea:	40b5      	lsls	r5, r6
     6ec:	4205      	tst	r5, r0
     6ee:	bf14      	ite	ne
     6f0:	2101      	movne	r1, #1
     6f2:	2100      	moveq	r1, #0
     6f4:	f361 0300 	bfi	r3, r1, #0, #1
     6f8:	54a3      	strb	r3, [r4, r2]
	return r;
		
}
     6fa:	bd70      	pop	{r4, r5, r6, pc}
     6fc:	0000d4b1 	.word	0x0000d4b1

00000700 <_ZN19EvaporatorFan_Class6EnableEv>:
uint8_t	EvaporatorFan_Class::Enable(void){
     700:	b510      	push	{r4, lr}
     702:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(fanNumber,true);
     704:	2201      	movs	r2, #1
     706:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
     70a:	68c0      	ldr	r0, [r0, #12]
     70c:	4b01      	ldr	r3, [pc, #4]	; (714 <_ZN19EvaporatorFan_Class6EnableEv+0x14>)
     70e:	4798      	blx	r3
     710:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
     712:	bd10      	pop	{r4, pc}
     714:	0000d721 	.word	0x0000d721

00000718 <_ZN19EvaporatorFan_Class9SetEnableEb>:
uint8_t	EvaporatorFan_Class::SetEnable(bool state){
     718:	b510      	push	{r4, lr}
     71a:	4604      	mov	r4, r0
	uint8_t fanCorrrection=fanNumber==1?2:1;
     71c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
     720:	2b01      	cmp	r3, #1
	enabled=expanders[0]->WriteDigit(fanCorrrection,!state);
     722:	f081 0201 	eor.w	r2, r1, #1
     726:	bf0c      	ite	eq
     728:	2102      	moveq	r1, #2
     72a:	2101      	movne	r1, #1
     72c:	68c0      	ldr	r0, [r0, #12]
     72e:	4b02      	ldr	r3, [pc, #8]	; (738 <_ZN19EvaporatorFan_Class9SetEnableEb+0x20>)
     730:	4798      	blx	r3
     732:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
     734:	bd10      	pop	{r4, pc}
     736:	bf00      	nop
     738:	0000d721 	.word	0x0000d721

0000073c <_ZN19EvaporatorFan_Class6SetPWMEh>:
uint8_t	EvaporatorFan_Class::Disable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,false)?false:true;
	return uint8_t(enabled);
}

uint8_t	EvaporatorFan_Class::SetPWM(uint8_t pwm){
     73c:	b510      	push	{r4, lr}
     73e:	4604      	mov	r4, r0
	pwmValue= expanders[4+fanNumber]->WriteGPIORegister(pwm);
     740:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
     744:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     748:	69d8      	ldr	r0, [r3, #28]
     74a:	4b02      	ldr	r3, [pc, #8]	; (754 <_ZN19EvaporatorFan_Class6SetPWMEh+0x18>)
     74c:	4798      	blx	r3
     74e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	
	return pwmValue;
}
     752:	bd10      	pop	{r4, pc}
     754:	0000d535 	.word	0x0000d535

00000758 <_ZN19EvaporatorFan_Class8SelfTestEv>:
	uint8_t value=expanders[0]->ReadGPIORegister();
	enabled=!(value&fanCorrrection);
	return enabled;
}

bool EvaporatorFan_Class::SelfTest(void){
     758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     75c:	4605      	mov	r5, r0
	bool result;
	SetEnable(false);
     75e:	2100      	movs	r1, #0
     760:	4c0f      	ldr	r4, [pc, #60]	; (7a0 <_ZN19EvaporatorFan_Class8SelfTestEv+0x48>)
     762:	47a0      	blx	r4
	SetPWM(0xff);
     764:	21ff      	movs	r1, #255	; 0xff
     766:	4628      	mov	r0, r5
     768:	4b0e      	ldr	r3, [pc, #56]	; (7a4 <_ZN19EvaporatorFan_Class8SelfTestEv+0x4c>)
     76a:	4798      	blx	r3
	SetEnable(true);
     76c:	2101      	movs	r1, #1
     76e:	4628      	mov	r0, r5
     770:	47a0      	blx	r4
     772:	24ff      	movs	r4, #255	; 0xff
	for (uint8_t i = 0xff; i >EVAPORATOR_MINIMUN_FLOW_AIR ; i--)
	{
		SetPWM(i);
     774:	4f0b      	ldr	r7, [pc, #44]	; (7a4 <_ZN19EvaporatorFan_Class8SelfTestEv+0x4c>)
		delay_us(10);
     776:	f04f 080a 	mov.w	r8, #10
     77a:	4e0b      	ldr	r6, [pc, #44]	; (7a8 <_ZN19EvaporatorFan_Class8SelfTestEv+0x50>)
		SetPWM(i);
     77c:	4621      	mov	r1, r4
     77e:	4628      	mov	r0, r5
     780:	47b8      	blx	r7
		delay_us(10);
     782:	4640      	mov	r0, r8
     784:	47b0      	blx	r6
	for (uint8_t i = 0xff; i >EVAPORATOR_MINIMUN_FLOW_AIR ; i--)
     786:	3c01      	subs	r4, #1
     788:	b2e4      	uxtb	r4, r4
     78a:	2c0c      	cmp	r4, #12
     78c:	d1f6      	bne.n	77c <_ZN19EvaporatorFan_Class8SelfTestEv+0x24>
	}

	ReadStatus();
     78e:	4628      	mov	r0, r5
     790:	4b06      	ldr	r3, [pc, #24]	; (7ac <_ZN19EvaporatorFan_Class8SelfTestEv+0x54>)
     792:	4798      	blx	r3
	result=evaporatorFansStatus.inputs->niAlcEvaFanExtFault;
     794:	7828      	ldrb	r0, [r5, #0]
	return result;
}
     796:	f3c0 0080 	ubfx	r0, r0, #2, #1
     79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     79e:	bf00      	nop
     7a0:	00000719 	.word	0x00000719
     7a4:	0000073d 	.word	0x0000073d
     7a8:	000021d9 	.word	0x000021d9
     7ac:	000006bd 	.word	0x000006bd

000007b0 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class>:
bool EvaporatorFan_Class::InitEvaporator(uint8_t number, I2C_Sync_Class* i2cClass,MCP23008_Class** expandersArray){
     7b0:	b510      	push	{r4, lr}
     7b2:	4604      	mov	r4, r0
	i2c=i2cClass;
     7b4:	6082      	str	r2, [r0, #8]
	fanNumber=number;
     7b6:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
		if (i2c->isOK)
     7ba:	7a52      	ldrb	r2, [r2, #9]
     7bc:	b90a      	cbnz	r2, 7c2 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x12>
}
     7be:	7920      	ldrb	r0, [r4, #4]
     7c0:	bd10      	pop	{r4, pc}
			InitExpanderArray(expandersArray);
     7c2:	4619      	mov	r1, r3
     7c4:	4b0c      	ldr	r3, [pc, #48]	; (7f8 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x48>)
     7c6:	4798      	blx	r3
			if (fanNumber==0)
     7c8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     7cc:	b15b      	cbz	r3, 7e6 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x36>
			expanders[4+fanNumber]->SetPortOutput();
     7ce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     7d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     7d6:	69d8      	ldr	r0, [r3, #28]
     7d8:	4b08      	ldr	r3, [pc, #32]	; (7fc <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x4c>)
     7da:	4798      	blx	r3
			isOK=SelfTest();
     7dc:	4620      	mov	r0, r4
     7de:	4b08      	ldr	r3, [pc, #32]	; (800 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x50>)
     7e0:	4798      	blx	r3
     7e2:	7120      	strb	r0, [r4, #4]
     7e4:	e7eb      	b.n	7be <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
				expanders[0]->SetPortInput(0x70);
     7e6:	2170      	movs	r1, #112	; 0x70
     7e8:	68e0      	ldr	r0, [r4, #12]
     7ea:	4b06      	ldr	r3, [pc, #24]	; (804 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x54>)
     7ec:	4798      	blx	r3
				expanders[1]->SetPortInput();
     7ee:	6920      	ldr	r0, [r4, #16]
     7f0:	4b05      	ldr	r3, [pc, #20]	; (808 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x58>)
     7f2:	4798      	blx	r3
     7f4:	e7eb      	b.n	7ce <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x1e>
     7f6:	bf00      	nop
     7f8:	000006a5 	.word	0x000006a5
     7fc:	0000d629 	.word	0x0000d629
     800:	00000759 	.word	0x00000759
     804:	0000d5b5 	.word	0x0000d5b5
     808:	0000d571 	.word	0x0000d571

0000080c <_ZL13FirmwareAlivePK10timer_task>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     80c:	2280      	movs	r2, #128	; 0x80
     80e:	4b01      	ldr	r3, [pc, #4]	; (814 <_ZL13FirmwareAlivePK10timer_task+0x8>)
     810:	619a      	str	r2, [r3, #24]
     812:	4770      	bx	lr
     814:	41008000 	.word	0x41008000

00000818 <main>:
	gpio_set_pin_level(iAlcFwIsAlive,true);
}


int main(void)
{
     818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	atmel_start_init();
     81c:	4b41      	ldr	r3, [pc, #260]	; (924 <main+0x10c>)
     81e:	4798      	blx	r3
	uint8_t status;

	usb.Init();
     820:	4841      	ldr	r0, [pc, #260]	; (928 <main+0x110>)
     822:	4b42      	ldr	r3, [pc, #264]	; (92c <main+0x114>)
     824:	4798      	blx	r3
	delay_ms(100);
     826:	2064      	movs	r0, #100	; 0x64
     828:	4b41      	ldr	r3, [pc, #260]	; (930 <main+0x118>)
     82a:	4798      	blx	r3
//	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
//	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
	pwm_enable(&LIVE_PULSE);
     82c:	4841      	ldr	r0, [pc, #260]	; (934 <main+0x11c>)
     82e:	4b42      	ldr	r3, [pc, #264]	; (938 <main+0x120>)
     830:	4798      	blx	r3
	fans.Init();
     832:	4842      	ldr	r0, [pc, #264]	; (93c <main+0x124>)
     834:	4b42      	ldr	r3, [pc, #264]	; (940 <main+0x128>)
     836:	4798      	blx	r3
	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareAlive),250);
     838:	22fa      	movs	r2, #250	; 0xfa
     83a:	4942      	ldr	r1, [pc, #264]	; (944 <main+0x12c>)
     83c:	4842      	ldr	r0, [pc, #264]	; (948 <main+0x130>)
     83e:	4b43      	ldr	r3, [pc, #268]	; (94c <main+0x134>)
     840:	4798      	blx	r3
     842:	f8df 8120 	ldr.w	r8, [pc, #288]	; 964 <main+0x14c>
		
		for (uint8_t j = 0; j <0xff; j++)
		{
			for (uint8_t i = 0; i < 2; i++)
			{
				delay_ms(DELAY_TIME_REQUEST);
     846:	4d3a      	ldr	r5, [pc, #232]	; (930 <main+0x118>)
     848:	f108 0708 	add.w	r7, r8, #8
     84c:	e065      	b.n	91a <main+0x102>
			//	delay_ms(DELAY_TIME_REQUEST);
			//	fans.evaporator[i]->Disable();
			//	usb<<" EvaporatorFan "<<i<< " Disabled"<<NEWLINE;
			
			}
			delay_ms(DELAY_TIME_REQUEST);
     84e:	4648      	mov	r0, r9
     850:	47a8      	blx	r5
		//	usb<<NEWLINE<<"Enabling Condesator .\t";
			fans.condesator->Enable();
     852:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 93c <main+0x124>
     856:	f8da 0064 	ldr.w	r0, [sl, #100]	; 0x64
     85a:	4b3d      	ldr	r3, [pc, #244]	; (950 <main+0x138>)
     85c:	4798      	blx	r3
			delay_ms(DELAY_TIME_REQUEST);
     85e:	4648      	mov	r0, r9
     860:	47a8      	blx	r5
			status= fans.condesator->ReadStatus();
     862:	f8da 0064 	ldr.w	r0, [sl, #100]	; 0x64
     866:	4b3b      	ldr	r3, [pc, #236]	; (954 <main+0x13c>)
     868:	4798      	blx	r3
		//	usb<<"Condesator  Status :"<<status<<" .\t";
			delay_ms(DELAY_TIME_REQUEST);
     86a:	4648      	mov	r0, r9
     86c:	47a8      	blx	r5
			status= fans.condesator->SetPWM(j);
     86e:	4631      	mov	r1, r6
     870:	f8da 0064 	ldr.w	r0, [sl, #100]	; 0x64
     874:	4b38      	ldr	r3, [pc, #224]	; (958 <main+0x140>)
     876:	4798      	blx	r3
		//	usb<<"Condesator SetPoint :"<<status<<" .\t";
			delay_ms(DELAY_TIME_REQUEST);
     878:	4648      	mov	r0, r9
     87a:	47a8      	blx	r5
		for (uint8_t j = 0; j <0xff; j++)
     87c:	3601      	adds	r6, #1
     87e:	b2f6      	uxtb	r6, r6
     880:	2eff      	cmp	r6, #255	; 0xff
     882:	d017      	beq.n	8b4 <main+0x9c>
{
     884:	4644      	mov	r4, r8
				fans.evaporator[i]->Enable();
     886:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 968 <main+0x150>
				delay_ms(DELAY_TIME_REQUEST);
     88a:	4648      	mov	r0, r9
     88c:	47a8      	blx	r5
     88e:	46a3      	mov	fp, r4
				fans.evaporator[i]->Enable();
     890:	6820      	ldr	r0, [r4, #0]
     892:	47d0      	blx	sl
				delay_ms(DELAY_TIME_REQUEST);
     894:	4648      	mov	r0, r9
     896:	47a8      	blx	r5
				status= fans.evaporator[i]->ReadStatus();
     898:	f854 0b04 	ldr.w	r0, [r4], #4
     89c:	4b2f      	ldr	r3, [pc, #188]	; (95c <main+0x144>)
     89e:	4798      	blx	r3
				delay_ms(DELAY_TIME_REQUEST);
     8a0:	4648      	mov	r0, r9
     8a2:	47a8      	blx	r5
				status= fans.evaporator[i]->SetPWM(j);
     8a4:	4631      	mov	r1, r6
     8a6:	f8db 0000 	ldr.w	r0, [fp]
     8aa:	4b2d      	ldr	r3, [pc, #180]	; (960 <main+0x148>)
     8ac:	4798      	blx	r3
			for (uint8_t i = 0; i < 2; i++)
     8ae:	42bc      	cmp	r4, r7
     8b0:	d1eb      	bne.n	88a <main+0x72>
     8b2:	e7cc      	b.n	84e <main+0x36>
		{
			for (uint8_t i = 0; i < 2; i++)
			{
				delay_ms(DELAY_TIME_REQUEST);
				//	usb<<"Enabling Evaporator Fan: "<<i<<" .\t";
				fans.evaporator[i]->Enable();
     8b4:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 968 <main+0x150>
{
     8b8:	46c1      	mov	r9, r8
				delay_ms(DELAY_TIME_REQUEST);
     8ba:	200a      	movs	r0, #10
     8bc:	47a8      	blx	r5
     8be:	46ca      	mov	sl, r9
				fans.evaporator[i]->Enable();
     8c0:	f8d9 0000 	ldr.w	r0, [r9]
     8c4:	47d8      	blx	fp
				delay_ms(DELAY_TIME_REQUEST);
     8c6:	200a      	movs	r0, #10
     8c8:	47a8      	blx	r5
				status= fans.evaporator[i]->ReadStatus();
     8ca:	f859 0b04 	ldr.w	r0, [r9], #4
     8ce:	4b23      	ldr	r3, [pc, #140]	; (95c <main+0x144>)
     8d0:	4798      	blx	r3
				//	usb<<"Evaporator Fan "<<i<< " Status :"<<status<<" .\t";
				delay_ms(DELAY_TIME_REQUEST);
     8d2:	200a      	movs	r0, #10
     8d4:	47a8      	blx	r5
				status= fans.evaporator[i]->SetPWM(j);
     8d6:	4631      	mov	r1, r6
     8d8:	f8da 0000 	ldr.w	r0, [sl]
     8dc:	4b20      	ldr	r3, [pc, #128]	; (960 <main+0x148>)
     8de:	4798      	blx	r3
			for (uint8_t i = 0; i < 2; i++)
     8e0:	454c      	cmp	r4, r9
     8e2:	d1ea      	bne.n	8ba <main+0xa2>
				//	delay_ms(DELAY_TIME_REQUEST);
				//	fans.evaporator[i]->Disable();
				//	usb<<" EvaporatorFan "<<i<< " Disabled"<<NEWLINE;
				
			}
			delay_ms(DELAY_TIME_REQUEST);
     8e4:	200a      	movs	r0, #10
     8e6:	47a8      	blx	r5
			//	usb<<NEWLINE<<"Enabling Condesator .\t";
			fans.condesator->Enable();
     8e8:	f8df 9050 	ldr.w	r9, [pc, #80]	; 93c <main+0x124>
     8ec:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
     8f0:	4b17      	ldr	r3, [pc, #92]	; (950 <main+0x138>)
     8f2:	4798      	blx	r3
			delay_ms(DELAY_TIME_REQUEST);
     8f4:	200a      	movs	r0, #10
     8f6:	47a8      	blx	r5
			status= fans.condesator->ReadStatus();
     8f8:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
     8fc:	4b15      	ldr	r3, [pc, #84]	; (954 <main+0x13c>)
     8fe:	4798      	blx	r3
			//	usb<<"Condesator  Status :"<<status<<" .\t";
			delay_ms(DELAY_TIME_REQUEST);
     900:	200a      	movs	r0, #10
     902:	47a8      	blx	r5
			status= fans.condesator->SetPWM(j);
     904:	4631      	mov	r1, r6
     906:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
     90a:	4b13      	ldr	r3, [pc, #76]	; (958 <main+0x140>)
     90c:	4798      	blx	r3
			//	usb<<"Condesator SetPoint :"<<status<<" .\t";
			delay_ms(DELAY_TIME_REQUEST);
     90e:	200a      	movs	r0, #10
     910:	47a8      	blx	r5
		for (uint8_t j = 0xff; j >0; j--)
     912:	3e01      	subs	r6, #1
     914:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
     918:	d1ce      	bne.n	8b8 <main+0xa0>
{
     91a:	2600      	movs	r6, #0
				delay_ms(DELAY_TIME_REQUEST);
     91c:	f04f 090a 	mov.w	r9, #10
     920:	e7b0      	b.n	884 <main+0x6c>
     922:	bf00      	nop
     924:	00000a41 	.word	0x00000a41
     928:	200014f0 	.word	0x200014f0
     92c:	0000df2d 	.word	0x0000df2d
     930:	0000220d 	.word	0x0000220d
     934:	20001748 	.word	0x20001748
     938:	0000267d 	.word	0x0000267d
     93c:	200007bc 	.word	0x200007bc
     940:	0000054d 	.word	0x0000054d
     944:	0000080d 	.word	0x0000080d
     948:	2000084c 	.word	0x2000084c
     94c:	0000d9d5 	.word	0x0000d9d5
     950:	00000319 	.word	0x00000319
     954:	000002ed 	.word	0x000002ed
     958:	00000349 	.word	0x00000349
     95c:	000006bd 	.word	0x000006bd
     960:	0000073d 	.word	0x0000073d
     964:	20000818 	.word	0x20000818
     968:	00000701 	.word	0x00000701

0000096c <_GLOBAL__sub_I_main>:


		

	}
}
     96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     970:	4c26      	ldr	r4, [pc, #152]	; (a0c <_GLOBAL__sub_I_main+0xa0>)
     972:	f104 0520 	add.w	r5, r4, #32
     976:	4926      	ldr	r1, [pc, #152]	; (a10 <_GLOBAL__sub_I_main+0xa4>)
     978:	4628      	mov	r0, r5
     97a:	4e26      	ldr	r6, [pc, #152]	; (a14 <_GLOBAL__sub_I_main+0xa8>)
     97c:	47b0      	blx	r6
     97e:	4f26      	ldr	r7, [pc, #152]	; (a18 <_GLOBAL__sub_I_main+0xac>)
     980:	f8df 80b8 	ldr.w	r8, [pc, #184]	; a3c <_GLOBAL__sub_I_main+0xd0>
     984:	463a      	mov	r2, r7
     986:	4641      	mov	r1, r8
     988:	4628      	mov	r0, r5
     98a:	4d24      	ldr	r5, [pc, #144]	; (a1c <_GLOBAL__sub_I_main+0xb0>)
     98c:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     98e:	f104 0940 	add.w	r9, r4, #64	; 0x40
     992:	4923      	ldr	r1, [pc, #140]	; (a20 <_GLOBAL__sub_I_main+0xb4>)
     994:	4648      	mov	r0, r9
     996:	47b0      	blx	r6
     998:	463a      	mov	r2, r7
     99a:	4641      	mov	r1, r8
     99c:	4648      	mov	r0, r9
     99e:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     9a0:	4920      	ldr	r1, [pc, #128]	; (a24 <_GLOBAL__sub_I_main+0xb8>)
     9a2:	4620      	mov	r0, r4
     9a4:	47b0      	blx	r6
     9a6:	463a      	mov	r2, r7
     9a8:	4641      	mov	r1, r8
     9aa:	4620      	mov	r0, r4
     9ac:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     9ae:	f104 0960 	add.w	r9, r4, #96	; 0x60
     9b2:	491d      	ldr	r1, [pc, #116]	; (a28 <_GLOBAL__sub_I_main+0xbc>)
     9b4:	4648      	mov	r0, r9
     9b6:	47b0      	blx	r6
     9b8:	463a      	mov	r2, r7
     9ba:	4641      	mov	r1, r8
     9bc:	4648      	mov	r0, r9
     9be:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     9c0:	f104 0980 	add.w	r9, r4, #128	; 0x80
     9c4:	4919      	ldr	r1, [pc, #100]	; (a2c <_GLOBAL__sub_I_main+0xc0>)
     9c6:	4648      	mov	r0, r9
     9c8:	47b0      	blx	r6
     9ca:	463a      	mov	r2, r7
     9cc:	4641      	mov	r1, r8
     9ce:	4648      	mov	r0, r9
     9d0:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     9d2:	f104 09a0 	add.w	r9, r4, #160	; 0xa0
     9d6:	4916      	ldr	r1, [pc, #88]	; (a30 <_GLOBAL__sub_I_main+0xc4>)
     9d8:	4648      	mov	r0, r9
     9da:	47b0      	blx	r6
     9dc:	463a      	mov	r2, r7
     9de:	4641      	mov	r1, r8
     9e0:	4648      	mov	r0, r9
     9e2:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     9e4:	f104 09c0 	add.w	r9, r4, #192	; 0xc0
     9e8:	4912      	ldr	r1, [pc, #72]	; (a34 <_GLOBAL__sub_I_main+0xc8>)
     9ea:	4648      	mov	r0, r9
     9ec:	47b0      	blx	r6
     9ee:	463a      	mov	r2, r7
     9f0:	4641      	mov	r1, r8
     9f2:	4648      	mov	r0, r9
     9f4:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     9f6:	34e0      	adds	r4, #224	; 0xe0
     9f8:	490f      	ldr	r1, [pc, #60]	; (a38 <_GLOBAL__sub_I_main+0xcc>)
     9fa:	4620      	mov	r0, r4
     9fc:	47b0      	blx	r6
     9fe:	463a      	mov	r2, r7
     a00:	4641      	mov	r1, r8
     a02:	4620      	mov	r0, r4
     a04:	47a8      	blx	r5
     a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     a0a:	bf00      	nop
     a0c:	2000084c 	.word	0x2000084c
     a10:	20001654 	.word	0x20001654
     a14:	0000d7f9 	.word	0x0000d7f9
     a18:	20000000 	.word	0x20000000
     a1c:	0000e85d 	.word	0x0000e85d
     a20:	200016e8 	.word	0x200016e8
     a24:	2000180c 	.word	0x2000180c
     a28:	20001708 	.word	0x20001708
     a2c:	200017cc 	.word	0x200017cc
     a30:	200017ec 	.word	0x200017ec
     a34:	200016c4 	.word	0x200016c4
     a38:	20001764 	.word	0x20001764
     a3c:	0000d831 	.word	0x0000d831

00000a40 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     a40:	b580      	push	{r7, lr}
     a42:	af00      	add	r7, sp, #0
	system_init();
     a44:	4b03      	ldr	r3, [pc, #12]	; (a54 <atmel_start_init+0x14>)
     a46:	4798      	blx	r3
	usb_init();
     a48:	4b03      	ldr	r3, [pc, #12]	; (a58 <atmel_start_init+0x18>)
     a4a:	4798      	blx	r3
	spi_nor_flash_init();
     a4c:	4b03      	ldr	r3, [pc, #12]	; (a5c <atmel_start_init+0x1c>)
     a4e:	4798      	blx	r3
}
     a50:	bf00      	nop
     a52:	bd80      	pop	{r7, pc}
     a54:	00001e41 	.word	0x00001e41
     a58:	0000b375 	.word	0x0000b375
     a5c:	0000b309 	.word	0x0000b309

00000a60 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     a60:	b480      	push	{r7}
     a62:	b085      	sub	sp, #20
     a64:	af00      	add	r7, sp, #0
     a66:	60f8      	str	r0, [r7, #12]
     a68:	460b      	mov	r3, r1
     a6a:	607a      	str	r2, [r7, #4]
     a6c:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     a6e:	7afa      	ldrb	r2, [r7, #11]
     a70:	68fb      	ldr	r3, [r7, #12]
     a72:	3220      	adds	r2, #32
     a74:	6879      	ldr	r1, [r7, #4]
     a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     a7a:	bf00      	nop
     a7c:	3714      	adds	r7, #20
     a7e:	46bd      	mov	sp, r7
     a80:	f85d 7b04 	ldr.w	r7, [sp], #4
     a84:	4770      	bx	lr

00000a86 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     a86:	b480      	push	{r7}
     a88:	b083      	sub	sp, #12
     a8a:	af00      	add	r7, sp, #0
     a8c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     a8e:	687b      	ldr	r3, [r7, #4]
     a90:	691b      	ldr	r3, [r3, #16]
     a92:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     a96:	687b      	ldr	r3, [r7, #4]
     a98:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a9a:	bf00      	nop
     a9c:	370c      	adds	r7, #12
     a9e:	46bd      	mov	sp, r7
     aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
     aa4:	4770      	bx	lr

00000aa6 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     aa6:	b480      	push	{r7}
     aa8:	b083      	sub	sp, #12
     aaa:	af00      	add	r7, sp, #0
     aac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     aae:	687b      	ldr	r3, [r7, #4]
     ab0:	691b      	ldr	r3, [r3, #16]
     ab2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     ab6:	687b      	ldr	r3, [r7, #4]
     ab8:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     aba:	bf00      	nop
     abc:	370c      	adds	r7, #12
     abe:	46bd      	mov	sp, r7
     ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ac4:	4770      	bx	lr

00000ac6 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     ac6:	b480      	push	{r7}
     ac8:	b083      	sub	sp, #12
     aca:	af00      	add	r7, sp, #0
     acc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     ace:	687b      	ldr	r3, [r7, #4]
     ad0:	691b      	ldr	r3, [r3, #16]
     ad2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ada:	bf00      	nop
     adc:	370c      	adds	r7, #12
     ade:	46bd      	mov	sp, r7
     ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ae4:	4770      	bx	lr

00000ae6 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     ae6:	b480      	push	{r7}
     ae8:	b083      	sub	sp, #12
     aea:	af00      	add	r7, sp, #0
     aec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     aee:	687b      	ldr	r3, [r7, #4]
     af0:	691b      	ldr	r3, [r3, #16]
     af2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     af6:	687b      	ldr	r3, [r7, #4]
     af8:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     afa:	bf00      	nop
     afc:	370c      	adds	r7, #12
     afe:	46bd      	mov	sp, r7
     b00:	f85d 7b04 	ldr.w	r7, [sp], #4
     b04:	4770      	bx	lr

00000b06 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     b06:	b480      	push	{r7}
     b08:	b083      	sub	sp, #12
     b0a:	af00      	add	r7, sp, #0
     b0c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     b0e:	687b      	ldr	r3, [r7, #4]
     b10:	695b      	ldr	r3, [r3, #20]
     b12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     b16:	687b      	ldr	r3, [r7, #4]
     b18:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b1a:	bf00      	nop
     b1c:	370c      	adds	r7, #12
     b1e:	46bd      	mov	sp, r7
     b20:	f85d 7b04 	ldr.w	r7, [sp], #4
     b24:	4770      	bx	lr

00000b26 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     b26:	b480      	push	{r7}
     b28:	b083      	sub	sp, #12
     b2a:	af00      	add	r7, sp, #0
     b2c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     b2e:	687b      	ldr	r3, [r7, #4]
     b30:	695b      	ldr	r3, [r3, #20]
     b32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     b36:	687b      	ldr	r3, [r7, #4]
     b38:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b3a:	bf00      	nop
     b3c:	370c      	adds	r7, #12
     b3e:	46bd      	mov	sp, r7
     b40:	f85d 7b04 	ldr.w	r7, [sp], #4
     b44:	4770      	bx	lr

00000b46 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     b46:	b480      	push	{r7}
     b48:	b083      	sub	sp, #12
     b4a:	af00      	add	r7, sp, #0
     b4c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     b4e:	687b      	ldr	r3, [r7, #4]
     b50:	695b      	ldr	r3, [r3, #20]
     b52:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     b56:	687b      	ldr	r3, [r7, #4]
     b58:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b5a:	bf00      	nop
     b5c:	370c      	adds	r7, #12
     b5e:	46bd      	mov	sp, r7
     b60:	f85d 7b04 	ldr.w	r7, [sp], #4
     b64:	4770      	bx	lr

00000b66 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     b66:	b480      	push	{r7}
     b68:	b083      	sub	sp, #12
     b6a:	af00      	add	r7, sp, #0
     b6c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     b6e:	687b      	ldr	r3, [r7, #4]
     b70:	695b      	ldr	r3, [r3, #20]
     b72:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     b76:	687b      	ldr	r3, [r7, #4]
     b78:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b7a:	bf00      	nop
     b7c:	370c      	adds	r7, #12
     b7e:	46bd      	mov	sp, r7
     b80:	f85d 7b04 	ldr.w	r7, [sp], #4
     b84:	4770      	bx	lr

00000b86 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     b86:	b480      	push	{r7}
     b88:	b083      	sub	sp, #12
     b8a:	af00      	add	r7, sp, #0
     b8c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     b8e:	687b      	ldr	r3, [r7, #4]
     b90:	695b      	ldr	r3, [r3, #20]
     b92:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     b96:	687b      	ldr	r3, [r7, #4]
     b98:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b9a:	bf00      	nop
     b9c:	370c      	adds	r7, #12
     b9e:	46bd      	mov	sp, r7
     ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ba4:	4770      	bx	lr

00000ba6 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     ba6:	b480      	push	{r7}
     ba8:	b083      	sub	sp, #12
     baa:	af00      	add	r7, sp, #0
     bac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     bae:	687b      	ldr	r3, [r7, #4]
     bb0:	699b      	ldr	r3, [r3, #24]
     bb2:	f043 0201 	orr.w	r2, r3, #1
     bb6:	687b      	ldr	r3, [r7, #4]
     bb8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bba:	bf00      	nop
     bbc:	370c      	adds	r7, #12
     bbe:	46bd      	mov	sp, r7
     bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
     bc4:	4770      	bx	lr

00000bc6 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     bc6:	b480      	push	{r7}
     bc8:	b083      	sub	sp, #12
     bca:	af00      	add	r7, sp, #0
     bcc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     bce:	687b      	ldr	r3, [r7, #4]
     bd0:	699b      	ldr	r3, [r3, #24]
     bd2:	f043 0202 	orr.w	r2, r3, #2
     bd6:	687b      	ldr	r3, [r7, #4]
     bd8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bda:	bf00      	nop
     bdc:	370c      	adds	r7, #12
     bde:	46bd      	mov	sp, r7
     be0:	f85d 7b04 	ldr.w	r7, [sp], #4
     be4:	4770      	bx	lr

00000be6 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     be6:	b480      	push	{r7}
     be8:	b083      	sub	sp, #12
     bea:	af00      	add	r7, sp, #0
     bec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     bee:	687b      	ldr	r3, [r7, #4]
     bf0:	699b      	ldr	r3, [r3, #24]
     bf2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     bf6:	687b      	ldr	r3, [r7, #4]
     bf8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bfa:	bf00      	nop
     bfc:	370c      	adds	r7, #12
     bfe:	46bd      	mov	sp, r7
     c00:	f85d 7b04 	ldr.w	r7, [sp], #4
     c04:	4770      	bx	lr

00000c06 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     c06:	b480      	push	{r7}
     c08:	b083      	sub	sp, #12
     c0a:	af00      	add	r7, sp, #0
     c0c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     c0e:	687b      	ldr	r3, [r7, #4]
     c10:	699b      	ldr	r3, [r3, #24]
     c12:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     c16:	687b      	ldr	r3, [r7, #4]
     c18:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c1a:	bf00      	nop
     c1c:	370c      	adds	r7, #12
     c1e:	46bd      	mov	sp, r7
     c20:	f85d 7b04 	ldr.w	r7, [sp], #4
     c24:	4770      	bx	lr

00000c26 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     c26:	b480      	push	{r7}
     c28:	b083      	sub	sp, #12
     c2a:	af00      	add	r7, sp, #0
     c2c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     c2e:	687b      	ldr	r3, [r7, #4]
     c30:	699b      	ldr	r3, [r3, #24]
     c32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     c36:	687b      	ldr	r3, [r7, #4]
     c38:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c3a:	bf00      	nop
     c3c:	370c      	adds	r7, #12
     c3e:	46bd      	mov	sp, r7
     c40:	f85d 7b04 	ldr.w	r7, [sp], #4
     c44:	4770      	bx	lr

00000c46 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     c46:	b480      	push	{r7}
     c48:	b083      	sub	sp, #12
     c4a:	af00      	add	r7, sp, #0
     c4c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     c4e:	687b      	ldr	r3, [r7, #4]
     c50:	699b      	ldr	r3, [r3, #24]
     c52:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     c56:	687b      	ldr	r3, [r7, #4]
     c58:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c5a:	bf00      	nop
     c5c:	370c      	adds	r7, #12
     c5e:	46bd      	mov	sp, r7
     c60:	f85d 7b04 	ldr.w	r7, [sp], #4
     c64:	4770      	bx	lr

00000c66 <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
     c66:	b480      	push	{r7}
     c68:	b083      	sub	sp, #12
     c6a:	af00      	add	r7, sp, #0
     c6c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
     c6e:	687b      	ldr	r3, [r7, #4]
     c70:	69db      	ldr	r3, [r3, #28]
     c72:	f043 0208 	orr.w	r2, r3, #8
     c76:	687b      	ldr	r3, [r7, #4]
     c78:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c7a:	bf00      	nop
     c7c:	370c      	adds	r7, #12
     c7e:	46bd      	mov	sp, r7
     c80:	f85d 7b04 	ldr.w	r7, [sp], #4
     c84:	4770      	bx	lr

00000c86 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     c86:	b480      	push	{r7}
     c88:	b083      	sub	sp, #12
     c8a:	af00      	add	r7, sp, #0
     c8c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     c8e:	687b      	ldr	r3, [r7, #4]
     c90:	69db      	ldr	r3, [r3, #28]
     c92:	f043 0220 	orr.w	r2, r3, #32
     c96:	687b      	ldr	r3, [r7, #4]
     c98:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c9a:	bf00      	nop
     c9c:	370c      	adds	r7, #12
     c9e:	46bd      	mov	sp, r7
     ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ca4:	4770      	bx	lr

00000ca6 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     ca6:	b480      	push	{r7}
     ca8:	b083      	sub	sp, #12
     caa:	af00      	add	r7, sp, #0
     cac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     cae:	687b      	ldr	r3, [r7, #4]
     cb0:	69db      	ldr	r3, [r3, #28]
     cb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     cb6:	687b      	ldr	r3, [r7, #4]
     cb8:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cba:	bf00      	nop
     cbc:	370c      	adds	r7, #12
     cbe:	46bd      	mov	sp, r7
     cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
     cc4:	4770      	bx	lr

00000cc6 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     cc6:	b480      	push	{r7}
     cc8:	b083      	sub	sp, #12
     cca:	af00      	add	r7, sp, #0
     ccc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     cce:	687b      	ldr	r3, [r7, #4]
     cd0:	69db      	ldr	r3, [r3, #28]
     cd2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     cd6:	687b      	ldr	r3, [r7, #4]
     cd8:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cda:	bf00      	nop
     cdc:	370c      	adds	r7, #12
     cde:	46bd      	mov	sp, r7
     ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ce4:	4770      	bx	lr

00000ce6 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     ce6:	b480      	push	{r7}
     ce8:	b083      	sub	sp, #12
     cea:	af00      	add	r7, sp, #0
     cec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	6a1b      	ldr	r3, [r3, #32]
     cf2:	f043 0201 	orr.w	r2, r3, #1
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cfa:	bf00      	nop
     cfc:	370c      	adds	r7, #12
     cfe:	46bd      	mov	sp, r7
     d00:	f85d 7b04 	ldr.w	r7, [sp], #4
     d04:	4770      	bx	lr

00000d06 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     d06:	b480      	push	{r7}
     d08:	b083      	sub	sp, #12
     d0a:	af00      	add	r7, sp, #0
     d0c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     d0e:	687b      	ldr	r3, [r7, #4]
     d10:	6a1b      	ldr	r3, [r3, #32]
     d12:	f043 0202 	orr.w	r2, r3, #2
     d16:	687b      	ldr	r3, [r7, #4]
     d18:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d1a:	bf00      	nop
     d1c:	370c      	adds	r7, #12
     d1e:	46bd      	mov	sp, r7
     d20:	f85d 7b04 	ldr.w	r7, [sp], #4
     d24:	4770      	bx	lr

00000d26 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     d26:	b480      	push	{r7}
     d28:	b083      	sub	sp, #12
     d2a:	af00      	add	r7, sp, #0
     d2c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     d2e:	687b      	ldr	r3, [r7, #4]
     d30:	6a1b      	ldr	r3, [r3, #32]
     d32:	f043 0204 	orr.w	r2, r3, #4
     d36:	687b      	ldr	r3, [r7, #4]
     d38:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d3a:	bf00      	nop
     d3c:	370c      	adds	r7, #12
     d3e:	46bd      	mov	sp, r7
     d40:	f85d 7b04 	ldr.w	r7, [sp], #4
     d44:	4770      	bx	lr

00000d46 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     d46:	b480      	push	{r7}
     d48:	b083      	sub	sp, #12
     d4a:	af00      	add	r7, sp, #0
     d4c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     d4e:	687b      	ldr	r3, [r7, #4]
     d50:	6a1b      	ldr	r3, [r3, #32]
     d52:	f043 0208 	orr.w	r2, r3, #8
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d5a:	bf00      	nop
     d5c:	370c      	adds	r7, #12
     d5e:	46bd      	mov	sp, r7
     d60:	f85d 7b04 	ldr.w	r7, [sp], #4
     d64:	4770      	bx	lr

00000d66 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     d66:	b480      	push	{r7}
     d68:	b083      	sub	sp, #12
     d6a:	af00      	add	r7, sp, #0
     d6c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     d6e:	687b      	ldr	r3, [r7, #4]
     d70:	6a1b      	ldr	r3, [r3, #32]
     d72:	f043 0220 	orr.w	r2, r3, #32
     d76:	687b      	ldr	r3, [r7, #4]
     d78:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d7a:	bf00      	nop
     d7c:	370c      	adds	r7, #12
     d7e:	46bd      	mov	sp, r7
     d80:	f85d 7b04 	ldr.w	r7, [sp], #4
     d84:	4770      	bx	lr

00000d86 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     d86:	b480      	push	{r7}
     d88:	b083      	sub	sp, #12
     d8a:	af00      	add	r7, sp, #0
     d8c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     d8e:	687b      	ldr	r3, [r7, #4]
     d90:	6a1b      	ldr	r3, [r3, #32]
     d92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     d96:	687b      	ldr	r3, [r7, #4]
     d98:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d9a:	bf00      	nop
     d9c:	370c      	adds	r7, #12
     d9e:	46bd      	mov	sp, r7
     da0:	f85d 7b04 	ldr.w	r7, [sp], #4
     da4:	4770      	bx	lr

00000da6 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     da6:	b480      	push	{r7}
     da8:	b085      	sub	sp, #20
     daa:	af00      	add	r7, sp, #0
     dac:	60f8      	str	r0, [r7, #12]
     dae:	460b      	mov	r3, r1
     db0:	607a      	str	r2, [r7, #4]
     db2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     db4:	7afb      	ldrb	r3, [r7, #11]
     db6:	68fa      	ldr	r2, [r7, #12]
     db8:	01db      	lsls	r3, r3, #7
     dba:	4413      	add	r3, r2
     dbc:	3308      	adds	r3, #8
     dbe:	687a      	ldr	r2, [r7, #4]
     dc0:	601a      	str	r2, [r3, #0]
}
     dc2:	bf00      	nop
     dc4:	3714      	adds	r7, #20
     dc6:	46bd      	mov	sp, r7
     dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
     dcc:	4770      	bx	lr

00000dce <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     dce:	b480      	push	{r7}
     dd0:	b085      	sub	sp, #20
     dd2:	af00      	add	r7, sp, #0
     dd4:	60f8      	str	r0, [r7, #12]
     dd6:	460b      	mov	r3, r1
     dd8:	607a      	str	r2, [r7, #4]
     dda:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     ddc:	7afb      	ldrb	r3, [r7, #11]
     dde:	68fa      	ldr	r2, [r7, #12]
     de0:	01db      	lsls	r3, r3, #7
     de2:	4413      	add	r3, r2
     de4:	3304      	adds	r3, #4
     de6:	687a      	ldr	r2, [r7, #4]
     de8:	601a      	str	r2, [r3, #0]
}
     dea:	bf00      	nop
     dec:	3714      	adds	r7, #20
     dee:	46bd      	mov	sp, r7
     df0:	f85d 7b04 	ldr.w	r7, [sp], #4
     df4:	4770      	bx	lr

00000df6 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     df6:	b480      	push	{r7}
     df8:	b085      	sub	sp, #20
     dfa:	af00      	add	r7, sp, #0
     dfc:	60f8      	str	r0, [r7, #12]
     dfe:	460b      	mov	r3, r1
     e00:	607a      	str	r2, [r7, #4]
     e02:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e04:	7afb      	ldrb	r3, [r7, #11]
     e06:	68fa      	ldr	r2, [r7, #12]
     e08:	01db      	lsls	r3, r3, #7
     e0a:	4413      	add	r3, r2
     e0c:	3318      	adds	r3, #24
     e0e:	687a      	ldr	r2, [r7, #4]
     e10:	601a      	str	r2, [r3, #0]
}
     e12:	bf00      	nop
     e14:	3714      	adds	r7, #20
     e16:	46bd      	mov	sp, r7
     e18:	f85d 7b04 	ldr.w	r7, [sp], #4
     e1c:	4770      	bx	lr

00000e1e <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     e1e:	b480      	push	{r7}
     e20:	b085      	sub	sp, #20
     e22:	af00      	add	r7, sp, #0
     e24:	60f8      	str	r0, [r7, #12]
     e26:	460b      	mov	r3, r1
     e28:	607a      	str	r2, [r7, #4]
     e2a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e2c:	7afb      	ldrb	r3, [r7, #11]
     e2e:	68fa      	ldr	r2, [r7, #12]
     e30:	01db      	lsls	r3, r3, #7
     e32:	4413      	add	r3, r2
     e34:	3314      	adds	r3, #20
     e36:	687a      	ldr	r2, [r7, #4]
     e38:	601a      	str	r2, [r3, #0]
}
     e3a:	bf00      	nop
     e3c:	3714      	adds	r7, #20
     e3e:	46bd      	mov	sp, r7
     e40:	f85d 7b04 	ldr.w	r7, [sp], #4
     e44:	4770      	bx	lr

00000e46 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     e46:	b480      	push	{r7}
     e48:	b085      	sub	sp, #20
     e4a:	af00      	add	r7, sp, #0
     e4c:	6078      	str	r0, [r7, #4]
     e4e:	4608      	mov	r0, r1
     e50:	4611      	mov	r1, r2
     e52:	461a      	mov	r2, r3
     e54:	4603      	mov	r3, r0
     e56:	70fb      	strb	r3, [r7, #3]
     e58:	460b      	mov	r3, r1
     e5a:	70bb      	strb	r3, [r7, #2]
     e5c:	4613      	mov	r3, r2
     e5e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e60:	78fa      	ldrb	r2, [r7, #3]
     e62:	78bb      	ldrb	r3, [r7, #2]
     e64:	6879      	ldr	r1, [r7, #4]
     e66:	01d2      	lsls	r2, r2, #7
     e68:	440a      	add	r2, r1
     e6a:	4413      	add	r3, r2
     e6c:	3330      	adds	r3, #48	; 0x30
     e6e:	781b      	ldrb	r3, [r3, #0]
     e70:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     e72:	7bfb      	ldrb	r3, [r7, #15]
     e74:	f023 030f 	bic.w	r3, r3, #15
     e78:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     e7a:	787b      	ldrb	r3, [r7, #1]
     e7c:	f003 030f 	and.w	r3, r3, #15
     e80:	b2da      	uxtb	r2, r3
     e82:	7bfb      	ldrb	r3, [r7, #15]
     e84:	4313      	orrs	r3, r2
     e86:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e88:	78fa      	ldrb	r2, [r7, #3]
     e8a:	78bb      	ldrb	r3, [r7, #2]
     e8c:	6879      	ldr	r1, [r7, #4]
     e8e:	01d2      	lsls	r2, r2, #7
     e90:	440a      	add	r2, r1
     e92:	4413      	add	r3, r2
     e94:	3330      	adds	r3, #48	; 0x30
     e96:	7bfa      	ldrb	r2, [r7, #15]
     e98:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     e9a:	bf00      	nop
     e9c:	3714      	adds	r7, #20
     e9e:	46bd      	mov	sp, r7
     ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ea4:	4770      	bx	lr

00000ea6 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     ea6:	b480      	push	{r7}
     ea8:	b085      	sub	sp, #20
     eaa:	af00      	add	r7, sp, #0
     eac:	6078      	str	r0, [r7, #4]
     eae:	4608      	mov	r0, r1
     eb0:	4611      	mov	r1, r2
     eb2:	461a      	mov	r2, r3
     eb4:	4603      	mov	r3, r0
     eb6:	70fb      	strb	r3, [r7, #3]
     eb8:	460b      	mov	r3, r1
     eba:	70bb      	strb	r3, [r7, #2]
     ebc:	4613      	mov	r3, r2
     ebe:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ec0:	78fa      	ldrb	r2, [r7, #3]
     ec2:	78bb      	ldrb	r3, [r7, #2]
     ec4:	6879      	ldr	r1, [r7, #4]
     ec6:	01d2      	lsls	r2, r2, #7
     ec8:	440a      	add	r2, r1
     eca:	4413      	add	r3, r2
     ecc:	3330      	adds	r3, #48	; 0x30
     ece:	781b      	ldrb	r3, [r3, #0]
     ed0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ed2:	7bfb      	ldrb	r3, [r7, #15]
     ed4:	f003 030f 	and.w	r3, r3, #15
     ed8:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     eda:	787b      	ldrb	r3, [r7, #1]
     edc:	011b      	lsls	r3, r3, #4
     ede:	b2da      	uxtb	r2, r3
     ee0:	7bfb      	ldrb	r3, [r7, #15]
     ee2:	4313      	orrs	r3, r2
     ee4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ee6:	78fa      	ldrb	r2, [r7, #3]
     ee8:	78bb      	ldrb	r3, [r7, #2]
     eea:	6879      	ldr	r1, [r7, #4]
     eec:	01d2      	lsls	r2, r2, #7
     eee:	440a      	add	r2, r1
     ef0:	4413      	add	r3, r2
     ef2:	3330      	adds	r3, #48	; 0x30
     ef4:	7bfa      	ldrb	r2, [r7, #15]
     ef6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     ef8:	bf00      	nop
     efa:	3714      	adds	r7, #20
     efc:	46bd      	mov	sp, r7
     efe:	f85d 7b04 	ldr.w	r7, [sp], #4
     f02:	4770      	bx	lr

00000f04 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     f04:	b480      	push	{r7}
     f06:	b085      	sub	sp, #20
     f08:	af00      	add	r7, sp, #0
     f0a:	6078      	str	r0, [r7, #4]
     f0c:	4608      	mov	r0, r1
     f0e:	4611      	mov	r1, r2
     f10:	461a      	mov	r2, r3
     f12:	4603      	mov	r3, r0
     f14:	70fb      	strb	r3, [r7, #3]
     f16:	460b      	mov	r3, r1
     f18:	70bb      	strb	r3, [r7, #2]
     f1a:	4613      	mov	r3, r2
     f1c:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f1e:	78fa      	ldrb	r2, [r7, #3]
     f20:	78bb      	ldrb	r3, [r7, #2]
     f22:	6879      	ldr	r1, [r7, #4]
     f24:	01d2      	lsls	r2, r2, #7
     f26:	440a      	add	r2, r1
     f28:	4413      	add	r3, r2
     f2a:	3340      	adds	r3, #64	; 0x40
     f2c:	781b      	ldrb	r3, [r3, #0]
     f2e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     f30:	7bfb      	ldrb	r3, [r7, #15]
     f32:	f023 0301 	bic.w	r3, r3, #1
     f36:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f38:	787a      	ldrb	r2, [r7, #1]
     f3a:	7bfb      	ldrb	r3, [r7, #15]
     f3c:	4313      	orrs	r3, r2
     f3e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f40:	78fa      	ldrb	r2, [r7, #3]
     f42:	78bb      	ldrb	r3, [r7, #2]
     f44:	6879      	ldr	r1, [r7, #4]
     f46:	01d2      	lsls	r2, r2, #7
     f48:	440a      	add	r2, r1
     f4a:	4413      	add	r3, r2
     f4c:	3340      	adds	r3, #64	; 0x40
     f4e:	7bfa      	ldrb	r2, [r7, #15]
     f50:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     f52:	bf00      	nop
     f54:	3714      	adds	r7, #20
     f56:	46bd      	mov	sp, r7
     f58:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5c:	4770      	bx	lr

00000f5e <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     f5e:	b490      	push	{r4, r7}
     f60:	b082      	sub	sp, #8
     f62:	af00      	add	r7, sp, #0
     f64:	6078      	str	r0, [r7, #4]
     f66:	460b      	mov	r3, r1
     f68:	70fb      	strb	r3, [r7, #3]
     f6a:	4613      	mov	r3, r2
     f6c:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     f6e:	78fa      	ldrb	r2, [r7, #3]
     f70:	78bb      	ldrb	r3, [r7, #2]
     f72:	78f8      	ldrb	r0, [r7, #3]
     f74:	78b9      	ldrb	r1, [r7, #2]
     f76:	687c      	ldr	r4, [r7, #4]
     f78:	01c0      	lsls	r0, r0, #7
     f7a:	4420      	add	r0, r4
     f7c:	4401      	add	r1, r0
     f7e:	3140      	adds	r1, #64	; 0x40
     f80:	7809      	ldrb	r1, [r1, #0]
     f82:	b2c9      	uxtb	r1, r1
     f84:	f041 0104 	orr.w	r1, r1, #4
     f88:	b2c8      	uxtb	r0, r1
     f8a:	6879      	ldr	r1, [r7, #4]
     f8c:	01d2      	lsls	r2, r2, #7
     f8e:	440a      	add	r2, r1
     f90:	4413      	add	r3, r2
     f92:	3340      	adds	r3, #64	; 0x40
     f94:	4602      	mov	r2, r0
     f96:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     f98:	bf00      	nop
     f9a:	3708      	adds	r7, #8
     f9c:	46bd      	mov	sp, r7
     f9e:	bc90      	pop	{r4, r7}
     fa0:	4770      	bx	lr

00000fa2 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     fa2:	b490      	push	{r4, r7}
     fa4:	b082      	sub	sp, #8
     fa6:	af00      	add	r7, sp, #0
     fa8:	6078      	str	r0, [r7, #4]
     faa:	460b      	mov	r3, r1
     fac:	70fb      	strb	r3, [r7, #3]
     fae:	4613      	mov	r3, r2
     fb0:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     fb2:	78fa      	ldrb	r2, [r7, #3]
     fb4:	78bb      	ldrb	r3, [r7, #2]
     fb6:	78f8      	ldrb	r0, [r7, #3]
     fb8:	78b9      	ldrb	r1, [r7, #2]
     fba:	687c      	ldr	r4, [r7, #4]
     fbc:	01c0      	lsls	r0, r0, #7
     fbe:	4420      	add	r0, r4
     fc0:	4401      	add	r1, r0
     fc2:	3140      	adds	r1, #64	; 0x40
     fc4:	7809      	ldrb	r1, [r1, #0]
     fc6:	b2c9      	uxtb	r1, r1
     fc8:	f021 0104 	bic.w	r1, r1, #4
     fcc:	b2c8      	uxtb	r0, r1
     fce:	6879      	ldr	r1, [r7, #4]
     fd0:	01d2      	lsls	r2, r2, #7
     fd2:	440a      	add	r2, r1
     fd4:	4413      	add	r3, r2
     fd6:	3340      	adds	r3, #64	; 0x40
     fd8:	4602      	mov	r2, r0
     fda:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     fdc:	bf00      	nop
     fde:	3708      	adds	r7, #8
     fe0:	46bd      	mov	sp, r7
     fe2:	bc90      	pop	{r4, r7}
     fe4:	4770      	bx	lr

00000fe6 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     fe6:	b480      	push	{r7}
     fe8:	b085      	sub	sp, #20
     fea:	af00      	add	r7, sp, #0
     fec:	60f8      	str	r0, [r7, #12]
     fee:	460b      	mov	r3, r1
     ff0:	607a      	str	r2, [r7, #4]
     ff2:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ff4:	7afb      	ldrb	r3, [r7, #11]
     ff6:	68fa      	ldr	r2, [r7, #12]
     ff8:	01db      	lsls	r3, r3, #7
     ffa:	4413      	add	r3, r2
     ffc:	3328      	adds	r3, #40	; 0x28
     ffe:	687a      	ldr	r2, [r7, #4]
    1000:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1002:	bf00      	nop
    1004:	3714      	adds	r7, #20
    1006:	46bd      	mov	sp, r7
    1008:	f85d 7b04 	ldr.w	r7, [sp], #4
    100c:	4770      	bx	lr
	...

00001010 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    1010:	b580      	push	{r7, lr}
    1012:	b082      	sub	sp, #8
    1014:	af00      	add	r7, sp, #0
    1016:	4603      	mov	r3, r0
    1018:	6039      	str	r1, [r7, #0]
    101a:	71fb      	strb	r3, [r7, #7]
    101c:	4613      	mov	r3, r2
    101e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    1020:	79bb      	ldrb	r3, [r7, #6]
    1022:	2b01      	cmp	r3, #1
    1024:	d01c      	beq.n	1060 <_gpio_set_direction+0x50>
    1026:	2b02      	cmp	r3, #2
    1028:	d037      	beq.n	109a <_gpio_set_direction+0x8a>
    102a:	2b00      	cmp	r3, #0
    102c:	d14e      	bne.n	10cc <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    102e:	79fb      	ldrb	r3, [r7, #7]
    1030:	683a      	ldr	r2, [r7, #0]
    1032:	4619      	mov	r1, r3
    1034:	482a      	ldr	r0, [pc, #168]	; (10e0 <_gpio_set_direction+0xd0>)
    1036:	4b2b      	ldr	r3, [pc, #172]	; (10e4 <_gpio_set_direction+0xd4>)
    1038:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    103a:	683b      	ldr	r3, [r7, #0]
    103c:	b29b      	uxth	r3, r3
    103e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1042:	79fb      	ldrb	r3, [r7, #7]
    1044:	4619      	mov	r1, r3
    1046:	4826      	ldr	r0, [pc, #152]	; (10e0 <_gpio_set_direction+0xd0>)
    1048:	4b27      	ldr	r3, [pc, #156]	; (10e8 <_gpio_set_direction+0xd8>)
    104a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    104c:	683b      	ldr	r3, [r7, #0]
    104e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1050:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1054:	79fb      	ldrb	r3, [r7, #7]
    1056:	4619      	mov	r1, r3
    1058:	4821      	ldr	r0, [pc, #132]	; (10e0 <_gpio_set_direction+0xd0>)
    105a:	4b23      	ldr	r3, [pc, #140]	; (10e8 <_gpio_set_direction+0xd8>)
    105c:	4798      	blx	r3
		break;
    105e:	e03a      	b.n	10d6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1060:	79fb      	ldrb	r3, [r7, #7]
    1062:	683a      	ldr	r2, [r7, #0]
    1064:	4619      	mov	r1, r3
    1066:	481e      	ldr	r0, [pc, #120]	; (10e0 <_gpio_set_direction+0xd0>)
    1068:	4b1e      	ldr	r3, [pc, #120]	; (10e4 <_gpio_set_direction+0xd4>)
    106a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    106c:	683b      	ldr	r3, [r7, #0]
    106e:	b29b      	uxth	r3, r3
    1070:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    1074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1078:	79f9      	ldrb	r1, [r7, #7]
    107a:	461a      	mov	r2, r3
    107c:	4818      	ldr	r0, [pc, #96]	; (10e0 <_gpio_set_direction+0xd0>)
    107e:	4b1a      	ldr	r3, [pc, #104]	; (10e8 <_gpio_set_direction+0xd8>)
    1080:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    1082:	683b      	ldr	r3, [r7, #0]
    1084:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    1086:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    108a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    108e:	79f9      	ldrb	r1, [r7, #7]
    1090:	461a      	mov	r2, r3
    1092:	4813      	ldr	r0, [pc, #76]	; (10e0 <_gpio_set_direction+0xd0>)
    1094:	4b14      	ldr	r3, [pc, #80]	; (10e8 <_gpio_set_direction+0xd8>)
    1096:	4798      	blx	r3
		break;
    1098:	e01d      	b.n	10d6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    109a:	79fb      	ldrb	r3, [r7, #7]
    109c:	683a      	ldr	r2, [r7, #0]
    109e:	4619      	mov	r1, r3
    10a0:	480f      	ldr	r0, [pc, #60]	; (10e0 <_gpio_set_direction+0xd0>)
    10a2:	4b12      	ldr	r3, [pc, #72]	; (10ec <_gpio_set_direction+0xdc>)
    10a4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    10a6:	683b      	ldr	r3, [r7, #0]
    10a8:	b29b      	uxth	r3, r3
    10aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    10ae:	79fb      	ldrb	r3, [r7, #7]
    10b0:	4619      	mov	r1, r3
    10b2:	480b      	ldr	r0, [pc, #44]	; (10e0 <_gpio_set_direction+0xd0>)
    10b4:	4b0c      	ldr	r3, [pc, #48]	; (10e8 <_gpio_set_direction+0xd8>)
    10b6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    10b8:	683b      	ldr	r3, [r7, #0]
    10ba:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    10bc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    10c0:	79fb      	ldrb	r3, [r7, #7]
    10c2:	4619      	mov	r1, r3
    10c4:	4806      	ldr	r0, [pc, #24]	; (10e0 <_gpio_set_direction+0xd0>)
    10c6:	4b08      	ldr	r3, [pc, #32]	; (10e8 <_gpio_set_direction+0xd8>)
    10c8:	4798      	blx	r3
		break;
    10ca:	e004      	b.n	10d6 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    10cc:	2246      	movs	r2, #70	; 0x46
    10ce:	4908      	ldr	r1, [pc, #32]	; (10f0 <_gpio_set_direction+0xe0>)
    10d0:	2000      	movs	r0, #0
    10d2:	4b08      	ldr	r3, [pc, #32]	; (10f4 <_gpio_set_direction+0xe4>)
    10d4:	4798      	blx	r3
	}
}
    10d6:	bf00      	nop
    10d8:	3708      	adds	r7, #8
    10da:	46bd      	mov	sp, r7
    10dc:	bd80      	pop	{r7, pc}
    10de:	bf00      	nop
    10e0:	41008000 	.word	0x41008000
    10e4:	00000dcf 	.word	0x00000dcf
    10e8:	00000fe7 	.word	0x00000fe7
    10ec:	00000da7 	.word	0x00000da7
    10f0:	0000ebd0 	.word	0x0000ebd0
    10f4:	000037fd 	.word	0x000037fd

000010f8 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    10f8:	b580      	push	{r7, lr}
    10fa:	b082      	sub	sp, #8
    10fc:	af00      	add	r7, sp, #0
    10fe:	4603      	mov	r3, r0
    1100:	6039      	str	r1, [r7, #0]
    1102:	71fb      	strb	r3, [r7, #7]
    1104:	4613      	mov	r3, r2
    1106:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1108:	79bb      	ldrb	r3, [r7, #6]
    110a:	2b00      	cmp	r3, #0
    110c:	d006      	beq.n	111c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    110e:	79fb      	ldrb	r3, [r7, #7]
    1110:	683a      	ldr	r2, [r7, #0]
    1112:	4619      	mov	r1, r3
    1114:	4806      	ldr	r0, [pc, #24]	; (1130 <_gpio_set_level+0x38>)
    1116:	4b07      	ldr	r3, [pc, #28]	; (1134 <_gpio_set_level+0x3c>)
    1118:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    111a:	e005      	b.n	1128 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    111c:	79fb      	ldrb	r3, [r7, #7]
    111e:	683a      	ldr	r2, [r7, #0]
    1120:	4619      	mov	r1, r3
    1122:	4803      	ldr	r0, [pc, #12]	; (1130 <_gpio_set_level+0x38>)
    1124:	4b04      	ldr	r3, [pc, #16]	; (1138 <_gpio_set_level+0x40>)
    1126:	4798      	blx	r3
}
    1128:	bf00      	nop
    112a:	3708      	adds	r7, #8
    112c:	46bd      	mov	sp, r7
    112e:	bd80      	pop	{r7, pc}
    1130:	41008000 	.word	0x41008000
    1134:	00000df7 	.word	0x00000df7
    1138:	00000e1f 	.word	0x00000e1f

0000113c <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    113c:	b580      	push	{r7, lr}
    113e:	b082      	sub	sp, #8
    1140:	af00      	add	r7, sp, #0
    1142:	4603      	mov	r3, r0
    1144:	71fb      	strb	r3, [r7, #7]
    1146:	460b      	mov	r3, r1
    1148:	71bb      	strb	r3, [r7, #6]
    114a:	4613      	mov	r3, r2
    114c:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    114e:	797b      	ldrb	r3, [r7, #5]
    1150:	2b01      	cmp	r3, #1
    1152:	d00a      	beq.n	116a <_gpio_set_pin_pull_mode+0x2e>
    1154:	2b02      	cmp	r3, #2
    1156:	d01f      	beq.n	1198 <_gpio_set_pin_pull_mode+0x5c>
    1158:	2b00      	cmp	r3, #0
    115a:	d134      	bne.n	11c6 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    115c:	79ba      	ldrb	r2, [r7, #6]
    115e:	79fb      	ldrb	r3, [r7, #7]
    1160:	4619      	mov	r1, r3
    1162:	481e      	ldr	r0, [pc, #120]	; (11dc <_gpio_set_pin_pull_mode+0xa0>)
    1164:	4b1e      	ldr	r3, [pc, #120]	; (11e0 <_gpio_set_pin_pull_mode+0xa4>)
    1166:	4798      	blx	r3
		break;
    1168:	e033      	b.n	11d2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    116a:	79bb      	ldrb	r3, [r7, #6]
    116c:	2201      	movs	r2, #1
    116e:	409a      	lsls	r2, r3
    1170:	79fb      	ldrb	r3, [r7, #7]
    1172:	4619      	mov	r1, r3
    1174:	4819      	ldr	r0, [pc, #100]	; (11dc <_gpio_set_pin_pull_mode+0xa0>)
    1176:	4b1b      	ldr	r3, [pc, #108]	; (11e4 <_gpio_set_pin_pull_mode+0xa8>)
    1178:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    117a:	79ba      	ldrb	r2, [r7, #6]
    117c:	79fb      	ldrb	r3, [r7, #7]
    117e:	4619      	mov	r1, r3
    1180:	4816      	ldr	r0, [pc, #88]	; (11dc <_gpio_set_pin_pull_mode+0xa0>)
    1182:	4b19      	ldr	r3, [pc, #100]	; (11e8 <_gpio_set_pin_pull_mode+0xac>)
    1184:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    1186:	79bb      	ldrb	r3, [r7, #6]
    1188:	2201      	movs	r2, #1
    118a:	409a      	lsls	r2, r3
    118c:	79fb      	ldrb	r3, [r7, #7]
    118e:	4619      	mov	r1, r3
    1190:	4812      	ldr	r0, [pc, #72]	; (11dc <_gpio_set_pin_pull_mode+0xa0>)
    1192:	4b16      	ldr	r3, [pc, #88]	; (11ec <_gpio_set_pin_pull_mode+0xb0>)
    1194:	4798      	blx	r3
		break;
    1196:	e01c      	b.n	11d2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1198:	79bb      	ldrb	r3, [r7, #6]
    119a:	2201      	movs	r2, #1
    119c:	409a      	lsls	r2, r3
    119e:	79fb      	ldrb	r3, [r7, #7]
    11a0:	4619      	mov	r1, r3
    11a2:	480e      	ldr	r0, [pc, #56]	; (11dc <_gpio_set_pin_pull_mode+0xa0>)
    11a4:	4b0f      	ldr	r3, [pc, #60]	; (11e4 <_gpio_set_pin_pull_mode+0xa8>)
    11a6:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    11a8:	79ba      	ldrb	r2, [r7, #6]
    11aa:	79fb      	ldrb	r3, [r7, #7]
    11ac:	4619      	mov	r1, r3
    11ae:	480b      	ldr	r0, [pc, #44]	; (11dc <_gpio_set_pin_pull_mode+0xa0>)
    11b0:	4b0d      	ldr	r3, [pc, #52]	; (11e8 <_gpio_set_pin_pull_mode+0xac>)
    11b2:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    11b4:	79bb      	ldrb	r3, [r7, #6]
    11b6:	2201      	movs	r2, #1
    11b8:	409a      	lsls	r2, r3
    11ba:	79fb      	ldrb	r3, [r7, #7]
    11bc:	4619      	mov	r1, r3
    11be:	4807      	ldr	r0, [pc, #28]	; (11dc <_gpio_set_pin_pull_mode+0xa0>)
    11c0:	4b0b      	ldr	r3, [pc, #44]	; (11f0 <_gpio_set_pin_pull_mode+0xb4>)
    11c2:	4798      	blx	r3
		break;
    11c4:	e005      	b.n	11d2 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    11c6:	2289      	movs	r2, #137	; 0x89
    11c8:	490a      	ldr	r1, [pc, #40]	; (11f4 <_gpio_set_pin_pull_mode+0xb8>)
    11ca:	2000      	movs	r0, #0
    11cc:	4b0a      	ldr	r3, [pc, #40]	; (11f8 <_gpio_set_pin_pull_mode+0xbc>)
    11ce:	4798      	blx	r3
		break;
    11d0:	bf00      	nop
	}
}
    11d2:	bf00      	nop
    11d4:	3708      	adds	r7, #8
    11d6:	46bd      	mov	sp, r7
    11d8:	bd80      	pop	{r7, pc}
    11da:	bf00      	nop
    11dc:	41008000 	.word	0x41008000
    11e0:	00000fa3 	.word	0x00000fa3
    11e4:	00000dcf 	.word	0x00000dcf
    11e8:	00000f5f 	.word	0x00000f5f
    11ec:	00000df7 	.word	0x00000df7
    11f0:	00000e1f 	.word	0x00000e1f
    11f4:	0000ebd0 	.word	0x0000ebd0
    11f8:	000037fd 	.word	0x000037fd

000011fc <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    11fc:	b590      	push	{r4, r7, lr}
    11fe:	b085      	sub	sp, #20
    1200:	af00      	add	r7, sp, #0
    1202:	6078      	str	r0, [r7, #4]
    1204:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1206:	687b      	ldr	r3, [r7, #4]
    1208:	095b      	lsrs	r3, r3, #5
    120a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    120c:	687b      	ldr	r3, [r7, #4]
    120e:	b2db      	uxtb	r3, r3
    1210:	f003 031f 	and.w	r3, r3, #31
    1214:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1216:	683b      	ldr	r3, [r7, #0]
    1218:	f1b3 3fff 	cmp.w	r3, #4294967295
    121c:	d106      	bne.n	122c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    121e:	7bba      	ldrb	r2, [r7, #14]
    1220:	7bf9      	ldrb	r1, [r7, #15]
    1222:	2300      	movs	r3, #0
    1224:	4812      	ldr	r0, [pc, #72]	; (1270 <_gpio_set_pin_function+0x74>)
    1226:	4c13      	ldr	r4, [pc, #76]	; (1274 <_gpio_set_pin_function+0x78>)
    1228:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    122a:	e01d      	b.n	1268 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    122c:	7bba      	ldrb	r2, [r7, #14]
    122e:	7bf9      	ldrb	r1, [r7, #15]
    1230:	2301      	movs	r3, #1
    1232:	480f      	ldr	r0, [pc, #60]	; (1270 <_gpio_set_pin_function+0x74>)
    1234:	4c0f      	ldr	r4, [pc, #60]	; (1274 <_gpio_set_pin_function+0x78>)
    1236:	47a0      	blx	r4
		if (pin & 1) {
    1238:	7bbb      	ldrb	r3, [r7, #14]
    123a:	f003 0301 	and.w	r3, r3, #1
    123e:	2b00      	cmp	r3, #0
    1240:	d009      	beq.n	1256 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    1242:	7bbb      	ldrb	r3, [r7, #14]
    1244:	085b      	lsrs	r3, r3, #1
    1246:	b2da      	uxtb	r2, r3
    1248:	683b      	ldr	r3, [r7, #0]
    124a:	b2db      	uxtb	r3, r3
    124c:	7bf9      	ldrb	r1, [r7, #15]
    124e:	4808      	ldr	r0, [pc, #32]	; (1270 <_gpio_set_pin_function+0x74>)
    1250:	4c09      	ldr	r4, [pc, #36]	; (1278 <_gpio_set_pin_function+0x7c>)
    1252:	47a0      	blx	r4
}
    1254:	e008      	b.n	1268 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    1256:	7bbb      	ldrb	r3, [r7, #14]
    1258:	085b      	lsrs	r3, r3, #1
    125a:	b2da      	uxtb	r2, r3
    125c:	683b      	ldr	r3, [r7, #0]
    125e:	b2db      	uxtb	r3, r3
    1260:	7bf9      	ldrb	r1, [r7, #15]
    1262:	4803      	ldr	r0, [pc, #12]	; (1270 <_gpio_set_pin_function+0x74>)
    1264:	4c05      	ldr	r4, [pc, #20]	; (127c <_gpio_set_pin_function+0x80>)
    1266:	47a0      	blx	r4
}
    1268:	bf00      	nop
    126a:	3714      	adds	r7, #20
    126c:	46bd      	mov	sp, r7
    126e:	bd90      	pop	{r4, r7, pc}
    1270:	41008000 	.word	0x41008000
    1274:	00000f05 	.word	0x00000f05
    1278:	00000ea7 	.word	0x00000ea7
    127c:	00000e47 	.word	0x00000e47

00001280 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1280:	b580      	push	{r7, lr}
    1282:	b082      	sub	sp, #8
    1284:	af00      	add	r7, sp, #0
    1286:	4603      	mov	r3, r0
    1288:	460a      	mov	r2, r1
    128a:	71fb      	strb	r3, [r7, #7]
    128c:	4613      	mov	r3, r2
    128e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1290:	79fb      	ldrb	r3, [r7, #7]
    1292:	095b      	lsrs	r3, r3, #5
    1294:	b2d8      	uxtb	r0, r3
    1296:	79fb      	ldrb	r3, [r7, #7]
    1298:	f003 031f 	and.w	r3, r3, #31
    129c:	b2db      	uxtb	r3, r3
    129e:	79ba      	ldrb	r2, [r7, #6]
    12a0:	4619      	mov	r1, r3
    12a2:	4b03      	ldr	r3, [pc, #12]	; (12b0 <gpio_set_pin_pull_mode+0x30>)
    12a4:	4798      	blx	r3
}
    12a6:	bf00      	nop
    12a8:	3708      	adds	r7, #8
    12aa:	46bd      	mov	sp, r7
    12ac:	bd80      	pop	{r7, pc}
    12ae:	bf00      	nop
    12b0:	0000113d 	.word	0x0000113d

000012b4 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    12b4:	b580      	push	{r7, lr}
    12b6:	b082      	sub	sp, #8
    12b8:	af00      	add	r7, sp, #0
    12ba:	6078      	str	r0, [r7, #4]
    12bc:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    12be:	6839      	ldr	r1, [r7, #0]
    12c0:	6878      	ldr	r0, [r7, #4]
    12c2:	4b03      	ldr	r3, [pc, #12]	; (12d0 <gpio_set_pin_function+0x1c>)
    12c4:	4798      	blx	r3
}
    12c6:	bf00      	nop
    12c8:	3708      	adds	r7, #8
    12ca:	46bd      	mov	sp, r7
    12cc:	bd80      	pop	{r7, pc}
    12ce:	bf00      	nop
    12d0:	000011fd 	.word	0x000011fd

000012d4 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    12d4:	b580      	push	{r7, lr}
    12d6:	b082      	sub	sp, #8
    12d8:	af00      	add	r7, sp, #0
    12da:	4603      	mov	r3, r0
    12dc:	460a      	mov	r2, r1
    12de:	71fb      	strb	r3, [r7, #7]
    12e0:	4613      	mov	r3, r2
    12e2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    12e4:	79fb      	ldrb	r3, [r7, #7]
    12e6:	095b      	lsrs	r3, r3, #5
    12e8:	b2d8      	uxtb	r0, r3
    12ea:	79fb      	ldrb	r3, [r7, #7]
    12ec:	f003 031f 	and.w	r3, r3, #31
    12f0:	2201      	movs	r2, #1
    12f2:	fa02 f303 	lsl.w	r3, r2, r3
    12f6:	79ba      	ldrb	r2, [r7, #6]
    12f8:	4619      	mov	r1, r3
    12fa:	4b03      	ldr	r3, [pc, #12]	; (1308 <gpio_set_pin_direction+0x34>)
    12fc:	4798      	blx	r3
}
    12fe:	bf00      	nop
    1300:	3708      	adds	r7, #8
    1302:	46bd      	mov	sp, r7
    1304:	bd80      	pop	{r7, pc}
    1306:	bf00      	nop
    1308:	00001011 	.word	0x00001011

0000130c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    130c:	b580      	push	{r7, lr}
    130e:	b082      	sub	sp, #8
    1310:	af00      	add	r7, sp, #0
    1312:	4603      	mov	r3, r0
    1314:	460a      	mov	r2, r1
    1316:	71fb      	strb	r3, [r7, #7]
    1318:	4613      	mov	r3, r2
    131a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    131c:	79fb      	ldrb	r3, [r7, #7]
    131e:	095b      	lsrs	r3, r3, #5
    1320:	b2d8      	uxtb	r0, r3
    1322:	79fb      	ldrb	r3, [r7, #7]
    1324:	f003 031f 	and.w	r3, r3, #31
    1328:	2201      	movs	r2, #1
    132a:	fa02 f303 	lsl.w	r3, r2, r3
    132e:	79ba      	ldrb	r2, [r7, #6]
    1330:	4619      	mov	r1, r3
    1332:	4b03      	ldr	r3, [pc, #12]	; (1340 <gpio_set_pin_level+0x34>)
    1334:	4798      	blx	r3
}
    1336:	bf00      	nop
    1338:	3708      	adds	r7, #8
    133a:	46bd      	mov	sp, r7
    133c:	bd80      	pop	{r7, pc}
    133e:	bf00      	nop
    1340:	000010f9 	.word	0x000010f9

00001344 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    1344:	b580      	push	{r7, lr}
    1346:	af00      	add	r7, sp, #0
	_init_chip();
    1348:	4b01      	ldr	r3, [pc, #4]	; (1350 <init_mcu+0xc>)
    134a:	4798      	blx	r3
}
    134c:	bf00      	nop
    134e:	bd80      	pop	{r7, pc}
    1350:	00004405 	.word	0x00004405

00001354 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    1354:	b580      	push	{r7, lr}
    1356:	b082      	sub	sp, #8
    1358:	af00      	add	r7, sp, #0
    135a:	6078      	str	r0, [r7, #4]
    135c:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    135e:	687b      	ldr	r3, [r7, #4]
    1360:	2b00      	cmp	r3, #0
    1362:	d004      	beq.n	136e <wdt_init+0x1a>
    1364:	683b      	ldr	r3, [r7, #0]
    1366:	2b00      	cmp	r3, #0
    1368:	d001      	beq.n	136e <wdt_init+0x1a>
    136a:	2301      	movs	r3, #1
    136c:	e000      	b.n	1370 <wdt_init+0x1c>
    136e:	2300      	movs	r3, #0
    1370:	f003 0301 	and.w	r3, r3, #1
    1374:	b2db      	uxtb	r3, r3
    1376:	2248      	movs	r2, #72	; 0x48
    1378:	4907      	ldr	r1, [pc, #28]	; (1398 <wdt_init+0x44>)
    137a:	4618      	mov	r0, r3
    137c:	4b07      	ldr	r3, [pc, #28]	; (139c <wdt_init+0x48>)
    137e:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1380:	687b      	ldr	r3, [r7, #4]
    1382:	683a      	ldr	r2, [r7, #0]
    1384:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    1386:	687b      	ldr	r3, [r7, #4]
    1388:	4618      	mov	r0, r3
    138a:	4b05      	ldr	r3, [pc, #20]	; (13a0 <wdt_init+0x4c>)
    138c:	4798      	blx	r3
    138e:	4603      	mov	r3, r0
}
    1390:	4618      	mov	r0, r3
    1392:	3708      	adds	r7, #8
    1394:	46bd      	mov	sp, r7
    1396:	bd80      	pop	{r7, pc}
    1398:	0000ebec 	.word	0x0000ebec
    139c:	000037fd 	.word	0x000037fd
    13a0:	0000adad 	.word	0x0000adad

000013a4 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    13a4:	b580      	push	{r7, lr}
    13a6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    13a8:	4804      	ldr	r0, [pc, #16]	; (13bc <CRC_CALC_init+0x18>)
    13aa:	4b05      	ldr	r3, [pc, #20]	; (13c0 <CRC_CALC_init+0x1c>)
    13ac:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    13ae:	4905      	ldr	r1, [pc, #20]	; (13c4 <CRC_CALC_init+0x20>)
    13b0:	4805      	ldr	r0, [pc, #20]	; (13c8 <CRC_CALC_init+0x24>)
    13b2:	4b06      	ldr	r3, [pc, #24]	; (13cc <CRC_CALC_init+0x28>)
    13b4:	4798      	blx	r3
}
    13b6:	bf00      	nop
    13b8:	bd80      	pop	{r7, pc}
    13ba:	bf00      	nop
    13bc:	40000800 	.word	0x40000800
    13c0:	00000bc7 	.word	0x00000bc7
    13c4:	41002000 	.word	0x41002000
    13c8:	20001850 	.word	0x20001850
    13cc:	0000218d 	.word	0x0000218d

000013d0 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    13d0:	b580      	push	{r7, lr}
    13d2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    13d4:	2244      	movs	r2, #68	; 0x44
    13d6:	2104      	movs	r1, #4
    13d8:	483f      	ldr	r0, [pc, #252]	; (14d8 <EXTERNAL_IRQ_0_init+0x108>)
    13da:	4b40      	ldr	r3, [pc, #256]	; (14dc <EXTERNAL_IRQ_0_init+0x10c>)
    13dc:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    13de:	4840      	ldr	r0, [pc, #256]	; (14e0 <EXTERNAL_IRQ_0_init+0x110>)
    13e0:	4b40      	ldr	r3, [pc, #256]	; (14e4 <EXTERNAL_IRQ_0_init+0x114>)
    13e2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    13e4:	2101      	movs	r1, #1
    13e6:	2040      	movs	r0, #64	; 0x40
    13e8:	4b3f      	ldr	r3, [pc, #252]	; (14e8 <EXTERNAL_IRQ_0_init+0x118>)
    13ea:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    13ec:	2100      	movs	r1, #0
    13ee:	2040      	movs	r0, #64	; 0x40
    13f0:	4b3e      	ldr	r3, [pc, #248]	; (14ec <EXTERNAL_IRQ_0_init+0x11c>)
    13f2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    13f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    13f8:	2040      	movs	r0, #64	; 0x40
    13fa:	4b3d      	ldr	r3, [pc, #244]	; (14f0 <EXTERNAL_IRQ_0_init+0x120>)
    13fc:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    13fe:	2101      	movs	r1, #1
    1400:	2021      	movs	r0, #33	; 0x21
    1402:	4b39      	ldr	r3, [pc, #228]	; (14e8 <EXTERNAL_IRQ_0_init+0x118>)
    1404:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    1406:	2100      	movs	r1, #0
    1408:	2021      	movs	r0, #33	; 0x21
    140a:	4b38      	ldr	r3, [pc, #224]	; (14ec <EXTERNAL_IRQ_0_init+0x11c>)
    140c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    140e:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    1412:	2021      	movs	r0, #33	; 0x21
    1414:	4b36      	ldr	r3, [pc, #216]	; (14f0 <EXTERNAL_IRQ_0_init+0x120>)
    1416:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    1418:	2101      	movs	r1, #1
    141a:	2003      	movs	r0, #3
    141c:	4b32      	ldr	r3, [pc, #200]	; (14e8 <EXTERNAL_IRQ_0_init+0x118>)
    141e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    1420:	2102      	movs	r1, #2
    1422:	2003      	movs	r0, #3
    1424:	4b31      	ldr	r3, [pc, #196]	; (14ec <EXTERNAL_IRQ_0_init+0x11c>)
    1426:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    1428:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    142c:	2003      	movs	r0, #3
    142e:	4b30      	ldr	r3, [pc, #192]	; (14f0 <EXTERNAL_IRQ_0_init+0x120>)
    1430:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    1432:	2101      	movs	r1, #1
    1434:	2004      	movs	r0, #4
    1436:	4b2c      	ldr	r3, [pc, #176]	; (14e8 <EXTERNAL_IRQ_0_init+0x118>)
    1438:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    143a:	2102      	movs	r1, #2
    143c:	2004      	movs	r0, #4
    143e:	4b2b      	ldr	r3, [pc, #172]	; (14ec <EXTERNAL_IRQ_0_init+0x11c>)
    1440:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    1442:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1446:	2004      	movs	r0, #4
    1448:	4b29      	ldr	r3, [pc, #164]	; (14f0 <EXTERNAL_IRQ_0_init+0x120>)
    144a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    144c:	2101      	movs	r1, #1
    144e:	2005      	movs	r0, #5
    1450:	4b25      	ldr	r3, [pc, #148]	; (14e8 <EXTERNAL_IRQ_0_init+0x118>)
    1452:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    1454:	2102      	movs	r1, #2
    1456:	2005      	movs	r0, #5
    1458:	4b24      	ldr	r3, [pc, #144]	; (14ec <EXTERNAL_IRQ_0_init+0x11c>)
    145a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    145c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    1460:	2005      	movs	r0, #5
    1462:	4b23      	ldr	r3, [pc, #140]	; (14f0 <EXTERNAL_IRQ_0_init+0x120>)
    1464:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    1466:	2101      	movs	r1, #1
    1468:	2056      	movs	r0, #86	; 0x56
    146a:	4b1f      	ldr	r3, [pc, #124]	; (14e8 <EXTERNAL_IRQ_0_init+0x118>)
    146c:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    146e:	2102      	movs	r1, #2
    1470:	2056      	movs	r0, #86	; 0x56
    1472:	4b1e      	ldr	r3, [pc, #120]	; (14ec <EXTERNAL_IRQ_0_init+0x11c>)
    1474:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    1476:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    147a:	2056      	movs	r0, #86	; 0x56
    147c:	4b1c      	ldr	r3, [pc, #112]	; (14f0 <EXTERNAL_IRQ_0_init+0x120>)
    147e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    1480:	2101      	movs	r1, #1
    1482:	2057      	movs	r0, #87	; 0x57
    1484:	4b18      	ldr	r3, [pc, #96]	; (14e8 <EXTERNAL_IRQ_0_init+0x118>)
    1486:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    1488:	2102      	movs	r1, #2
    148a:	2057      	movs	r0, #87	; 0x57
    148c:	4b17      	ldr	r3, [pc, #92]	; (14ec <EXTERNAL_IRQ_0_init+0x11c>)
    148e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    1490:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1494:	2057      	movs	r0, #87	; 0x57
    1496:	4b16      	ldr	r3, [pc, #88]	; (14f0 <EXTERNAL_IRQ_0_init+0x120>)
    1498:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    149a:	2101      	movs	r1, #1
    149c:	2028      	movs	r0, #40	; 0x28
    149e:	4b12      	ldr	r3, [pc, #72]	; (14e8 <EXTERNAL_IRQ_0_init+0x118>)
    14a0:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    14a2:	2100      	movs	r1, #0
    14a4:	2028      	movs	r0, #40	; 0x28
    14a6:	4b11      	ldr	r3, [pc, #68]	; (14ec <EXTERNAL_IRQ_0_init+0x11c>)
    14a8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    14aa:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    14ae:	2028      	movs	r0, #40	; 0x28
    14b0:	4b0f      	ldr	r3, [pc, #60]	; (14f0 <EXTERNAL_IRQ_0_init+0x120>)
    14b2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    14b4:	2101      	movs	r1, #1
    14b6:	2029      	movs	r0, #41	; 0x29
    14b8:	4b0b      	ldr	r3, [pc, #44]	; (14e8 <EXTERNAL_IRQ_0_init+0x118>)
    14ba:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    14bc:	2100      	movs	r1, #0
    14be:	2029      	movs	r0, #41	; 0x29
    14c0:	4b0a      	ldr	r3, [pc, #40]	; (14ec <EXTERNAL_IRQ_0_init+0x11c>)
    14c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    14c4:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    14c8:	2029      	movs	r0, #41	; 0x29
    14ca:	4b09      	ldr	r3, [pc, #36]	; (14f0 <EXTERNAL_IRQ_0_init+0x120>)
    14cc:	4798      	blx	r3

	ext_irq_init();
    14ce:	4b09      	ldr	r3, [pc, #36]	; (14f4 <EXTERNAL_IRQ_0_init+0x124>)
    14d0:	4798      	blx	r3
}
    14d2:	bf00      	nop
    14d4:	bd80      	pop	{r7, pc}
    14d6:	bf00      	nop
    14d8:	40001c00 	.word	0x40001c00
    14dc:	00000a61 	.word	0x00000a61
    14e0:	40000800 	.word	0x40000800
    14e4:	00000b47 	.word	0x00000b47
    14e8:	000012d5 	.word	0x000012d5
    14ec:	00001281 	.word	0x00001281
    14f0:	000012b5 	.word	0x000012b5
    14f4:	00002255 	.word	0x00002255

000014f8 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    14f8:	b580      	push	{r7, lr}
    14fa:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14fc:	2244      	movs	r2, #68	; 0x44
    14fe:	210b      	movs	r1, #11
    1500:	4807      	ldr	r0, [pc, #28]	; (1520 <EVENT_SYSTEM_0_init+0x28>)
    1502:	4b08      	ldr	r3, [pc, #32]	; (1524 <EVENT_SYSTEM_0_init+0x2c>)
    1504:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1506:	2244      	movs	r2, #68	; 0x44
    1508:	210c      	movs	r1, #12
    150a:	4805      	ldr	r0, [pc, #20]	; (1520 <EVENT_SYSTEM_0_init+0x28>)
    150c:	4b05      	ldr	r3, [pc, #20]	; (1524 <EVENT_SYSTEM_0_init+0x2c>)
    150e:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1510:	4805      	ldr	r0, [pc, #20]	; (1528 <EVENT_SYSTEM_0_init+0x30>)
    1512:	4b06      	ldr	r3, [pc, #24]	; (152c <EVENT_SYSTEM_0_init+0x34>)
    1514:	4798      	blx	r3

	event_system_init();
    1516:	4b06      	ldr	r3, [pc, #24]	; (1530 <EVENT_SYSTEM_0_init+0x38>)
    1518:	4798      	blx	r3
}
    151a:	bf00      	nop
    151c:	bd80      	pop	{r7, pc}
    151e:	bf00      	nop
    1520:	40001c00 	.word	0x40001c00
    1524:	00000a61 	.word	0x00000a61
    1528:	40000800 	.word	0x40000800
    152c:	00000be7 	.word	0x00000be7
    1530:	00002241 	.word	0x00002241

00001534 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    1534:	b580      	push	{r7, lr}
    1536:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    1538:	2101      	movs	r1, #1
    153a:	202b      	movs	r0, #43	; 0x2b
    153c:	4b2b      	ldr	r3, [pc, #172]	; (15ec <QSPI_N25Q256_PORT_init+0xb8>)
    153e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    1540:	2100      	movs	r1, #0
    1542:	202b      	movs	r0, #43	; 0x2b
    1544:	4b2a      	ldr	r3, [pc, #168]	; (15f0 <QSPI_N25Q256_PORT_init+0xbc>)
    1546:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    1548:	492a      	ldr	r1, [pc, #168]	; (15f4 <QSPI_N25Q256_PORT_init+0xc0>)
    154a:	202b      	movs	r0, #43	; 0x2b
    154c:	4b2a      	ldr	r3, [pc, #168]	; (15f8 <QSPI_N25Q256_PORT_init+0xc4>)
    154e:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1550:	2102      	movs	r1, #2
    1552:	2008      	movs	r0, #8
    1554:	4b25      	ldr	r3, [pc, #148]	; (15ec <QSPI_N25Q256_PORT_init+0xb8>)
    1556:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    1558:	2100      	movs	r1, #0
    155a:	2008      	movs	r0, #8
    155c:	4b27      	ldr	r3, [pc, #156]	; (15fc <QSPI_N25Q256_PORT_init+0xc8>)
    155e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1560:	2100      	movs	r1, #0
    1562:	2008      	movs	r0, #8
    1564:	4b22      	ldr	r3, [pc, #136]	; (15f0 <QSPI_N25Q256_PORT_init+0xbc>)
    1566:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1568:	4925      	ldr	r1, [pc, #148]	; (1600 <QSPI_N25Q256_PORT_init+0xcc>)
    156a:	2008      	movs	r0, #8
    156c:	4b22      	ldr	r3, [pc, #136]	; (15f8 <QSPI_N25Q256_PORT_init+0xc4>)
    156e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1570:	2102      	movs	r1, #2
    1572:	2009      	movs	r0, #9
    1574:	4b1d      	ldr	r3, [pc, #116]	; (15ec <QSPI_N25Q256_PORT_init+0xb8>)
    1576:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1578:	2100      	movs	r1, #0
    157a:	2009      	movs	r0, #9
    157c:	4b1f      	ldr	r3, [pc, #124]	; (15fc <QSPI_N25Q256_PORT_init+0xc8>)
    157e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1580:	2100      	movs	r1, #0
    1582:	2009      	movs	r0, #9
    1584:	4b1a      	ldr	r3, [pc, #104]	; (15f0 <QSPI_N25Q256_PORT_init+0xbc>)
    1586:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1588:	491e      	ldr	r1, [pc, #120]	; (1604 <QSPI_N25Q256_PORT_init+0xd0>)
    158a:	2009      	movs	r0, #9
    158c:	4b1a      	ldr	r3, [pc, #104]	; (15f8 <QSPI_N25Q256_PORT_init+0xc4>)
    158e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1590:	2102      	movs	r1, #2
    1592:	200a      	movs	r0, #10
    1594:	4b15      	ldr	r3, [pc, #84]	; (15ec <QSPI_N25Q256_PORT_init+0xb8>)
    1596:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1598:	2100      	movs	r1, #0
    159a:	200a      	movs	r0, #10
    159c:	4b17      	ldr	r3, [pc, #92]	; (15fc <QSPI_N25Q256_PORT_init+0xc8>)
    159e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    15a0:	2100      	movs	r1, #0
    15a2:	200a      	movs	r0, #10
    15a4:	4b12      	ldr	r3, [pc, #72]	; (15f0 <QSPI_N25Q256_PORT_init+0xbc>)
    15a6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    15a8:	4917      	ldr	r1, [pc, #92]	; (1608 <QSPI_N25Q256_PORT_init+0xd4>)
    15aa:	200a      	movs	r0, #10
    15ac:	4b12      	ldr	r3, [pc, #72]	; (15f8 <QSPI_N25Q256_PORT_init+0xc4>)
    15ae:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    15b0:	2102      	movs	r1, #2
    15b2:	200b      	movs	r0, #11
    15b4:	4b0d      	ldr	r3, [pc, #52]	; (15ec <QSPI_N25Q256_PORT_init+0xb8>)
    15b6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    15b8:	2100      	movs	r1, #0
    15ba:	200b      	movs	r0, #11
    15bc:	4b0f      	ldr	r3, [pc, #60]	; (15fc <QSPI_N25Q256_PORT_init+0xc8>)
    15be:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    15c0:	2100      	movs	r1, #0
    15c2:	200b      	movs	r0, #11
    15c4:	4b0a      	ldr	r3, [pc, #40]	; (15f0 <QSPI_N25Q256_PORT_init+0xbc>)
    15c6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    15c8:	4910      	ldr	r1, [pc, #64]	; (160c <QSPI_N25Q256_PORT_init+0xd8>)
    15ca:	200b      	movs	r0, #11
    15cc:	4b0a      	ldr	r3, [pc, #40]	; (15f8 <QSPI_N25Q256_PORT_init+0xc4>)
    15ce:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    15d0:	2101      	movs	r1, #1
    15d2:	202a      	movs	r0, #42	; 0x2a
    15d4:	4b05      	ldr	r3, [pc, #20]	; (15ec <QSPI_N25Q256_PORT_init+0xb8>)
    15d6:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    15d8:	2100      	movs	r1, #0
    15da:	202a      	movs	r0, #42	; 0x2a
    15dc:	4b04      	ldr	r3, [pc, #16]	; (15f0 <QSPI_N25Q256_PORT_init+0xbc>)
    15de:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    15e0:	490b      	ldr	r1, [pc, #44]	; (1610 <QSPI_N25Q256_PORT_init+0xdc>)
    15e2:	202a      	movs	r0, #42	; 0x2a
    15e4:	4b04      	ldr	r3, [pc, #16]	; (15f8 <QSPI_N25Q256_PORT_init+0xc4>)
    15e6:	4798      	blx	r3
}
    15e8:	bf00      	nop
    15ea:	bd80      	pop	{r7, pc}
    15ec:	000012d5 	.word	0x000012d5
    15f0:	00001281 	.word	0x00001281
    15f4:	002b0007 	.word	0x002b0007
    15f8:	000012b5 	.word	0x000012b5
    15fc:	0000130d 	.word	0x0000130d
    1600:	00080007 	.word	0x00080007
    1604:	00090007 	.word	0x00090007
    1608:	000a0007 	.word	0x000a0007
    160c:	000b0007 	.word	0x000b0007
    1610:	002a0007 	.word	0x002a0007

00001614 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1614:	b580      	push	{r7, lr}
    1616:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1618:	4805      	ldr	r0, [pc, #20]	; (1630 <QSPI_N25Q256_CLOCK_init+0x1c>)
    161a:	4b06      	ldr	r3, [pc, #24]	; (1634 <QSPI_N25Q256_CLOCK_init+0x20>)
    161c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    161e:	4804      	ldr	r0, [pc, #16]	; (1630 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1620:	4b05      	ldr	r3, [pc, #20]	; (1638 <QSPI_N25Q256_CLOCK_init+0x24>)
    1622:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1624:	4802      	ldr	r0, [pc, #8]	; (1630 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1626:	4b05      	ldr	r3, [pc, #20]	; (163c <QSPI_N25Q256_CLOCK_init+0x28>)
    1628:	4798      	blx	r3
}
    162a:	bf00      	nop
    162c:	bd80      	pop	{r7, pc}
    162e:	bf00      	nop
    1630:	40000800 	.word	0x40000800
    1634:	00000aa7 	.word	0x00000aa7
    1638:	00000ae7 	.word	0x00000ae7
    163c:	00000cc7 	.word	0x00000cc7

00001640 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    1640:	b580      	push	{r7, lr}
    1642:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    1644:	4b04      	ldr	r3, [pc, #16]	; (1658 <QSPI_N25Q256_init+0x18>)
    1646:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1648:	4904      	ldr	r1, [pc, #16]	; (165c <QSPI_N25Q256_init+0x1c>)
    164a:	4805      	ldr	r0, [pc, #20]	; (1660 <QSPI_N25Q256_init+0x20>)
    164c:	4b05      	ldr	r3, [pc, #20]	; (1664 <QSPI_N25Q256_init+0x24>)
    164e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1650:	4b05      	ldr	r3, [pc, #20]	; (1668 <QSPI_N25Q256_init+0x28>)
    1652:	4798      	blx	r3
}
    1654:	bf00      	nop
    1656:	bd80      	pop	{r7, pc}
    1658:	00001615 	.word	0x00001615
    165c:	42003400 	.word	0x42003400
    1660:	200016e4 	.word	0x200016e4
    1664:	00002719 	.word	0x00002719
    1668:	00001535 	.word	0x00001535

0000166c <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    166c:	b580      	push	{r7, lr}
    166e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1670:	4802      	ldr	r0, [pc, #8]	; (167c <DATETIME_CLOCK_CLOCK_init+0x10>)
    1672:	4b03      	ldr	r3, [pc, #12]	; (1680 <DATETIME_CLOCK_CLOCK_init+0x14>)
    1674:	4798      	blx	r3
}
    1676:	bf00      	nop
    1678:	bd80      	pop	{r7, pc}
    167a:	bf00      	nop
    167c:	40000800 	.word	0x40000800
    1680:	00000b27 	.word	0x00000b27

00001684 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1684:	b580      	push	{r7, lr}
    1686:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1688:	4b03      	ldr	r3, [pc, #12]	; (1698 <DATETIME_CLOCK_init+0x14>)
    168a:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    168c:	4903      	ldr	r1, [pc, #12]	; (169c <DATETIME_CLOCK_init+0x18>)
    168e:	4804      	ldr	r0, [pc, #16]	; (16a0 <DATETIME_CLOCK_init+0x1c>)
    1690:	4b04      	ldr	r3, [pc, #16]	; (16a4 <DATETIME_CLOCK_init+0x20>)
    1692:	4798      	blx	r3
}
    1694:	bf00      	nop
    1696:	bd80      	pop	{r7, pc}
    1698:	0000166d 	.word	0x0000166d
    169c:	40002400 	.word	0x40002400
    16a0:	2000182c 	.word	0x2000182c
    16a4:	00002031 	.word	0x00002031

000016a8 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    16a8:	b580      	push	{r7, lr}
    16aa:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    16ac:	2101      	movs	r1, #1
    16ae:	2010      	movs	r0, #16
    16b0:	4b07      	ldr	r3, [pc, #28]	; (16d0 <I2C_HEATERS_PORT_init+0x28>)
    16b2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    16b4:	4907      	ldr	r1, [pc, #28]	; (16d4 <I2C_HEATERS_PORT_init+0x2c>)
    16b6:	2010      	movs	r0, #16
    16b8:	4b07      	ldr	r3, [pc, #28]	; (16d8 <I2C_HEATERS_PORT_init+0x30>)
    16ba:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    16bc:	2101      	movs	r1, #1
    16be:	2011      	movs	r0, #17
    16c0:	4b03      	ldr	r3, [pc, #12]	; (16d0 <I2C_HEATERS_PORT_init+0x28>)
    16c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    16c4:	4905      	ldr	r1, [pc, #20]	; (16dc <I2C_HEATERS_PORT_init+0x34>)
    16c6:	2011      	movs	r0, #17
    16c8:	4b03      	ldr	r3, [pc, #12]	; (16d8 <I2C_HEATERS_PORT_init+0x30>)
    16ca:	4798      	blx	r3
}
    16cc:	bf00      	nop
    16ce:	bd80      	pop	{r7, pc}
    16d0:	00001281 	.word	0x00001281
    16d4:	00100002 	.word	0x00100002
    16d8:	000012b5 	.word	0x000012b5
    16dc:	00110002 	.word	0x00110002

000016e0 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    16e0:	b580      	push	{r7, lr}
    16e2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    16e4:	2242      	movs	r2, #66	; 0x42
    16e6:	2108      	movs	r1, #8
    16e8:	4806      	ldr	r0, [pc, #24]	; (1704 <I2C_HEATERS_CLOCK_init+0x24>)
    16ea:	4b07      	ldr	r3, [pc, #28]	; (1708 <I2C_HEATERS_CLOCK_init+0x28>)
    16ec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    16ee:	224a      	movs	r2, #74	; 0x4a
    16f0:	2103      	movs	r1, #3
    16f2:	4804      	ldr	r0, [pc, #16]	; (1704 <I2C_HEATERS_CLOCK_init+0x24>)
    16f4:	4b04      	ldr	r3, [pc, #16]	; (1708 <I2C_HEATERS_CLOCK_init+0x28>)
    16f6:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    16f8:	4804      	ldr	r0, [pc, #16]	; (170c <I2C_HEATERS_CLOCK_init+0x2c>)
    16fa:	4b05      	ldr	r3, [pc, #20]	; (1710 <I2C_HEATERS_CLOCK_init+0x30>)
    16fc:	4798      	blx	r3
}
    16fe:	bf00      	nop
    1700:	bd80      	pop	{r7, pc}
    1702:	bf00      	nop
    1704:	40001c00 	.word	0x40001c00
    1708:	00000a61 	.word	0x00000a61
    170c:	40000800 	.word	0x40000800
    1710:	00000b67 	.word	0x00000b67

00001714 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    1714:	b580      	push	{r7, lr}
    1716:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    1718:	4b04      	ldr	r3, [pc, #16]	; (172c <I2C_HEATERS_init+0x18>)
    171a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    171c:	4904      	ldr	r1, [pc, #16]	; (1730 <I2C_HEATERS_init+0x1c>)
    171e:	4805      	ldr	r0, [pc, #20]	; (1734 <I2C_HEATERS_init+0x20>)
    1720:	4b05      	ldr	r3, [pc, #20]	; (1738 <I2C_HEATERS_init+0x24>)
    1722:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    1724:	4b05      	ldr	r3, [pc, #20]	; (173c <I2C_HEATERS_init+0x28>)
    1726:	4798      	blx	r3
}
    1728:	bf00      	nop
    172a:	bd80      	pop	{r7, pc}
    172c:	000016e1 	.word	0x000016e1
    1730:	40003400 	.word	0x40003400
    1734:	20001784 	.word	0x20001784
    1738:	0000251d 	.word	0x0000251d
    173c:	000016a9 	.word	0x000016a9

00001740 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1740:	b580      	push	{r7, lr}
    1742:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    1744:	2100      	movs	r1, #0
    1746:	203b      	movs	r0, #59	; 0x3b
    1748:	4b11      	ldr	r3, [pc, #68]	; (1790 <SPI_TEMP_PORT_init+0x50>)
    174a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    174c:	2102      	movs	r1, #2
    174e:	203b      	movs	r0, #59	; 0x3b
    1750:	4b10      	ldr	r3, [pc, #64]	; (1794 <SPI_TEMP_PORT_init+0x54>)
    1752:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    1754:	4910      	ldr	r1, [pc, #64]	; (1798 <SPI_TEMP_PORT_init+0x58>)
    1756:	203b      	movs	r0, #59	; 0x3b
    1758:	4b10      	ldr	r3, [pc, #64]	; (179c <SPI_TEMP_PORT_init+0x5c>)
    175a:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    175c:	2100      	movs	r1, #0
    175e:	203a      	movs	r0, #58	; 0x3a
    1760:	4b0b      	ldr	r3, [pc, #44]	; (1790 <SPI_TEMP_PORT_init+0x50>)
    1762:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1764:	2102      	movs	r1, #2
    1766:	203a      	movs	r0, #58	; 0x3a
    1768:	4b0a      	ldr	r3, [pc, #40]	; (1794 <SPI_TEMP_PORT_init+0x54>)
    176a:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    176c:	490c      	ldr	r1, [pc, #48]	; (17a0 <SPI_TEMP_PORT_init+0x60>)
    176e:	203a      	movs	r0, #58	; 0x3a
    1770:	4b0a      	ldr	r3, [pc, #40]	; (179c <SPI_TEMP_PORT_init+0x5c>)
    1772:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1774:	2101      	movs	r1, #1
    1776:	203c      	movs	r0, #60	; 0x3c
    1778:	4b06      	ldr	r3, [pc, #24]	; (1794 <SPI_TEMP_PORT_init+0x54>)
    177a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    177c:	2100      	movs	r1, #0
    177e:	203c      	movs	r0, #60	; 0x3c
    1780:	4b08      	ldr	r3, [pc, #32]	; (17a4 <SPI_TEMP_PORT_init+0x64>)
    1782:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1784:	4908      	ldr	r1, [pc, #32]	; (17a8 <SPI_TEMP_PORT_init+0x68>)
    1786:	203c      	movs	r0, #60	; 0x3c
    1788:	4b04      	ldr	r3, [pc, #16]	; (179c <SPI_TEMP_PORT_init+0x5c>)
    178a:	4798      	blx	r3
}
    178c:	bf00      	nop
    178e:	bd80      	pop	{r7, pc}
    1790:	0000130d 	.word	0x0000130d
    1794:	000012d5 	.word	0x000012d5
    1798:	003b0003 	.word	0x003b0003
    179c:	000012b5 	.word	0x000012b5
    17a0:	003a0003 	.word	0x003a0003
    17a4:	00001281 	.word	0x00001281
    17a8:	003c0003 	.word	0x003c0003

000017ac <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    17ac:	b580      	push	{r7, lr}
    17ae:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17b0:	2245      	movs	r2, #69	; 0x45
    17b2:	2122      	movs	r1, #34	; 0x22
    17b4:	4806      	ldr	r0, [pc, #24]	; (17d0 <SPI_TEMP_CLOCK_init+0x24>)
    17b6:	4b07      	ldr	r3, [pc, #28]	; (17d4 <SPI_TEMP_CLOCK_init+0x28>)
    17b8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17ba:	224a      	movs	r2, #74	; 0x4a
    17bc:	2103      	movs	r1, #3
    17be:	4804      	ldr	r0, [pc, #16]	; (17d0 <SPI_TEMP_CLOCK_init+0x24>)
    17c0:	4b04      	ldr	r3, [pc, #16]	; (17d4 <SPI_TEMP_CLOCK_init+0x28>)
    17c2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    17c4:	4804      	ldr	r0, [pc, #16]	; (17d8 <SPI_TEMP_CLOCK_init+0x2c>)
    17c6:	4b05      	ldr	r3, [pc, #20]	; (17dc <SPI_TEMP_CLOCK_init+0x30>)
    17c8:	4798      	blx	r3
}
    17ca:	bf00      	nop
    17cc:	bd80      	pop	{r7, pc}
    17ce:	bf00      	nop
    17d0:	40001c00 	.word	0x40001c00
    17d4:	00000a61 	.word	0x00000a61
    17d8:	40000800 	.word	0x40000800
    17dc:	00000ce7 	.word	0x00000ce7

000017e0 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    17e0:	b580      	push	{r7, lr}
    17e2:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    17e4:	4b05      	ldr	r3, [pc, #20]	; (17fc <SPI_TEMP_init+0x1c>)
    17e6:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    17e8:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    17ec:	4804      	ldr	r0, [pc, #16]	; (1800 <SPI_TEMP_init+0x20>)
    17ee:	4b05      	ldr	r3, [pc, #20]	; (1804 <SPI_TEMP_init+0x24>)
    17f0:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    17f2:	4b05      	ldr	r3, [pc, #20]	; (1808 <SPI_TEMP_init+0x28>)
    17f4:	4798      	blx	r3
}
    17f6:	bf00      	nop
    17f8:	bd80      	pop	{r7, pc}
    17fa:	bf00      	nop
    17fc:	000017ad 	.word	0x000017ad
    1800:	2000168c 	.word	0x2000168c
    1804:	00002829 	.word	0x00002829
    1808:	00001741 	.word	0x00001741

0000180c <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    180c:	b580      	push	{r7, lr}
    180e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1810:	2100      	movs	r1, #0
    1812:	2017      	movs	r0, #23
    1814:	4b07      	ldr	r3, [pc, #28]	; (1834 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    1816:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    1818:	4907      	ldr	r1, [pc, #28]	; (1838 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    181a:	2017      	movs	r0, #23
    181c:	4b07      	ldr	r3, [pc, #28]	; (183c <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    181e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1820:	2100      	movs	r1, #0
    1822:	2016      	movs	r0, #22
    1824:	4b03      	ldr	r3, [pc, #12]	; (1834 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    1826:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    1828:	4905      	ldr	r1, [pc, #20]	; (1840 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    182a:	2016      	movs	r0, #22
    182c:	4b03      	ldr	r3, [pc, #12]	; (183c <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    182e:	4798      	blx	r3
}
    1830:	bf00      	nop
    1832:	bd80      	pop	{r7, pc}
    1834:	00001281 	.word	0x00001281
    1838:	00170003 	.word	0x00170003
    183c:	000012b5 	.word	0x000012b5
    1840:	00160003 	.word	0x00160003

00001844 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    1844:	b580      	push	{r7, lr}
    1846:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1848:	2244      	movs	r2, #68	; 0x44
    184a:	2123      	movs	r1, #35	; 0x23
    184c:	4806      	ldr	r0, [pc, #24]	; (1868 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    184e:	4b07      	ldr	r3, [pc, #28]	; (186c <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    1850:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1852:	224a      	movs	r2, #74	; 0x4a
    1854:	2103      	movs	r1, #3
    1856:	4804      	ldr	r0, [pc, #16]	; (1868 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    1858:	4b04      	ldr	r3, [pc, #16]	; (186c <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    185a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    185c:	4804      	ldr	r0, [pc, #16]	; (1870 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    185e:	4b05      	ldr	r3, [pc, #20]	; (1874 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    1860:	4798      	blx	r3
}
    1862:	bf00      	nop
    1864:	bd80      	pop	{r7, pc}
    1866:	bf00      	nop
    1868:	40001c00 	.word	0x40001c00
    186c:	00000a61 	.word	0x00000a61
    1870:	40000800 	.word	0x40000800
    1874:	00000d07 	.word	0x00000d07

00001878 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    1878:	b580      	push	{r7, lr}
    187a:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    187c:	4b04      	ldr	r3, [pc, #16]	; (1890 <I2C_FLAPPER_VALVE_init+0x18>)
    187e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    1880:	4904      	ldr	r1, [pc, #16]	; (1894 <I2C_FLAPPER_VALVE_init+0x1c>)
    1882:	4805      	ldr	r0, [pc, #20]	; (1898 <I2C_FLAPPER_VALVE_init+0x20>)
    1884:	4b05      	ldr	r3, [pc, #20]	; (189c <I2C_FLAPPER_VALVE_init+0x24>)
    1886:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    1888:	4b05      	ldr	r3, [pc, #20]	; (18a0 <I2C_FLAPPER_VALVE_init+0x28>)
    188a:	4798      	blx	r3
}
    188c:	bf00      	nop
    188e:	bd80      	pop	{r7, pc}
    1890:	00001845 	.word	0x00001845
    1894:	43000400 	.word	0x43000400
    1898:	20001728 	.word	0x20001728
    189c:	0000251d 	.word	0x0000251d
    18a0:	0000180d 	.word	0x0000180d

000018a4 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    18a4:	b580      	push	{r7, lr}
    18a6:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    18a8:	2100      	movs	r1, #0
    18aa:	2044      	movs	r0, #68	; 0x44
    18ac:	4b11      	ldr	r3, [pc, #68]	; (18f4 <SPI_HI3593_PORT_init+0x50>)
    18ae:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    18b0:	2102      	movs	r1, #2
    18b2:	2044      	movs	r0, #68	; 0x44
    18b4:	4b10      	ldr	r3, [pc, #64]	; (18f8 <SPI_HI3593_PORT_init+0x54>)
    18b6:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    18b8:	4910      	ldr	r1, [pc, #64]	; (18fc <SPI_HI3593_PORT_init+0x58>)
    18ba:	2044      	movs	r0, #68	; 0x44
    18bc:	4b10      	ldr	r3, [pc, #64]	; (1900 <SPI_HI3593_PORT_init+0x5c>)
    18be:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    18c0:	2100      	movs	r1, #0
    18c2:	2045      	movs	r0, #69	; 0x45
    18c4:	4b0b      	ldr	r3, [pc, #44]	; (18f4 <SPI_HI3593_PORT_init+0x50>)
    18c6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    18c8:	2102      	movs	r1, #2
    18ca:	2045      	movs	r0, #69	; 0x45
    18cc:	4b0a      	ldr	r3, [pc, #40]	; (18f8 <SPI_HI3593_PORT_init+0x54>)
    18ce:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    18d0:	490c      	ldr	r1, [pc, #48]	; (1904 <SPI_HI3593_PORT_init+0x60>)
    18d2:	2045      	movs	r0, #69	; 0x45
    18d4:	4b0a      	ldr	r3, [pc, #40]	; (1900 <SPI_HI3593_PORT_init+0x5c>)
    18d6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    18d8:	2101      	movs	r1, #1
    18da:	2047      	movs	r0, #71	; 0x47
    18dc:	4b06      	ldr	r3, [pc, #24]	; (18f8 <SPI_HI3593_PORT_init+0x54>)
    18de:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    18e0:	2100      	movs	r1, #0
    18e2:	2047      	movs	r0, #71	; 0x47
    18e4:	4b08      	ldr	r3, [pc, #32]	; (1908 <SPI_HI3593_PORT_init+0x64>)
    18e6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    18e8:	4908      	ldr	r1, [pc, #32]	; (190c <SPI_HI3593_PORT_init+0x68>)
    18ea:	2047      	movs	r0, #71	; 0x47
    18ec:	4b04      	ldr	r3, [pc, #16]	; (1900 <SPI_HI3593_PORT_init+0x5c>)
    18ee:	4798      	blx	r3
}
    18f0:	bf00      	nop
    18f2:	bd80      	pop	{r7, pc}
    18f4:	0000130d 	.word	0x0000130d
    18f8:	000012d5 	.word	0x000012d5
    18fc:	00440002 	.word	0x00440002
    1900:	000012b5 	.word	0x000012b5
    1904:	00450002 	.word	0x00450002
    1908:	00001281 	.word	0x00001281
    190c:	00470002 	.word	0x00470002

00001910 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1910:	b580      	push	{r7, lr}
    1912:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1914:	2242      	movs	r2, #66	; 0x42
    1916:	2124      	movs	r1, #36	; 0x24
    1918:	4806      	ldr	r0, [pc, #24]	; (1934 <SPI_HI3593_CLOCK_init+0x24>)
    191a:	4b07      	ldr	r3, [pc, #28]	; (1938 <SPI_HI3593_CLOCK_init+0x28>)
    191c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    191e:	224a      	movs	r2, #74	; 0x4a
    1920:	2103      	movs	r1, #3
    1922:	4804      	ldr	r0, [pc, #16]	; (1934 <SPI_HI3593_CLOCK_init+0x24>)
    1924:	4b04      	ldr	r3, [pc, #16]	; (1938 <SPI_HI3593_CLOCK_init+0x28>)
    1926:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1928:	4804      	ldr	r0, [pc, #16]	; (193c <SPI_HI3593_CLOCK_init+0x2c>)
    192a:	4b05      	ldr	r3, [pc, #20]	; (1940 <SPI_HI3593_CLOCK_init+0x30>)
    192c:	4798      	blx	r3
}
    192e:	bf00      	nop
    1930:	bd80      	pop	{r7, pc}
    1932:	bf00      	nop
    1934:	40001c00 	.word	0x40001c00
    1938:	00000a61 	.word	0x00000a61
    193c:	40000800 	.word	0x40000800
    1940:	00000d27 	.word	0x00000d27

00001944 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1944:	b580      	push	{r7, lr}
    1946:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1948:	4b04      	ldr	r3, [pc, #16]	; (195c <SPI_HI3593_init+0x18>)
    194a:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    194c:	4904      	ldr	r1, [pc, #16]	; (1960 <SPI_HI3593_init+0x1c>)
    194e:	4805      	ldr	r0, [pc, #20]	; (1964 <SPI_HI3593_init+0x20>)
    1950:	4b05      	ldr	r3, [pc, #20]	; (1968 <SPI_HI3593_init+0x24>)
    1952:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1954:	4b05      	ldr	r3, [pc, #20]	; (196c <SPI_HI3593_init+0x28>)
    1956:	4798      	blx	r3
}
    1958:	bf00      	nop
    195a:	bd80      	pop	{r7, pc}
    195c:	00001911 	.word	0x00001911
    1960:	43000800 	.word	0x43000800
    1964:	20001674 	.word	0x20001674
    1968:	00002829 	.word	0x00002829
    196c:	000018a5 	.word	0x000018a5

00001970 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    1970:	b580      	push	{r7, lr}
    1972:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1974:	2100      	movs	r1, #0
    1976:	2068      	movs	r0, #104	; 0x68
    1978:	4b07      	ldr	r3, [pc, #28]	; (1998 <I2C_FANS_PORT_init+0x28>)
    197a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    197c:	4907      	ldr	r1, [pc, #28]	; (199c <I2C_FANS_PORT_init+0x2c>)
    197e:	2068      	movs	r0, #104	; 0x68
    1980:	4b07      	ldr	r3, [pc, #28]	; (19a0 <I2C_FANS_PORT_init+0x30>)
    1982:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1984:	2100      	movs	r1, #0
    1986:	2069      	movs	r0, #105	; 0x69
    1988:	4b03      	ldr	r3, [pc, #12]	; (1998 <I2C_FANS_PORT_init+0x28>)
    198a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    198c:	4905      	ldr	r1, [pc, #20]	; (19a4 <I2C_FANS_PORT_init+0x34>)
    198e:	2069      	movs	r0, #105	; 0x69
    1990:	4b03      	ldr	r3, [pc, #12]	; (19a0 <I2C_FANS_PORT_init+0x30>)
    1992:	4798      	blx	r3
}
    1994:	bf00      	nop
    1996:	bd80      	pop	{r7, pc}
    1998:	00001281 	.word	0x00001281
    199c:	00680002 	.word	0x00680002
    19a0:	000012b5 	.word	0x000012b5
    19a4:	00690002 	.word	0x00690002

000019a8 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    19a8:	b580      	push	{r7, lr}
    19aa:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19ac:	2244      	movs	r2, #68	; 0x44
    19ae:	2125      	movs	r1, #37	; 0x25
    19b0:	4806      	ldr	r0, [pc, #24]	; (19cc <I2C_FANS_CLOCK_init+0x24>)
    19b2:	4b07      	ldr	r3, [pc, #28]	; (19d0 <I2C_FANS_CLOCK_init+0x28>)
    19b4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19b6:	224a      	movs	r2, #74	; 0x4a
    19b8:	2103      	movs	r1, #3
    19ba:	4804      	ldr	r0, [pc, #16]	; (19cc <I2C_FANS_CLOCK_init+0x24>)
    19bc:	4b04      	ldr	r3, [pc, #16]	; (19d0 <I2C_FANS_CLOCK_init+0x28>)
    19be:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    19c0:	4804      	ldr	r0, [pc, #16]	; (19d4 <I2C_FANS_CLOCK_init+0x2c>)
    19c2:	4b05      	ldr	r3, [pc, #20]	; (19d8 <I2C_FANS_CLOCK_init+0x30>)
    19c4:	4798      	blx	r3
}
    19c6:	bf00      	nop
    19c8:	bd80      	pop	{r7, pc}
    19ca:	bf00      	nop
    19cc:	40001c00 	.word	0x40001c00
    19d0:	00000a61 	.word	0x00000a61
    19d4:	40000800 	.word	0x40000800
    19d8:	00000d47 	.word	0x00000d47

000019dc <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    19dc:	b580      	push	{r7, lr}
    19de:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    19e0:	4b04      	ldr	r3, [pc, #16]	; (19f4 <I2C_FANS_init+0x18>)
    19e2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    19e4:	4904      	ldr	r1, [pc, #16]	; (19f8 <I2C_FANS_init+0x1c>)
    19e6:	4805      	ldr	r0, [pc, #20]	; (19fc <I2C_FANS_init+0x20>)
    19e8:	4b05      	ldr	r3, [pc, #20]	; (1a00 <I2C_FANS_init+0x24>)
    19ea:	4798      	blx	r3
	I2C_FANS_PORT_init();
    19ec:	4b05      	ldr	r3, [pc, #20]	; (1a04 <I2C_FANS_init+0x28>)
    19ee:	4798      	blx	r3
}
    19f0:	bf00      	nop
    19f2:	bd80      	pop	{r7, pc}
    19f4:	000019a9 	.word	0x000019a9
    19f8:	43000c00 	.word	0x43000c00
    19fc:	200016a4 	.word	0x200016a4
    1a00:	0000251d 	.word	0x0000251d
    1a04:	00001971 	.word	0x00001971

00001a08 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1a08:	b580      	push	{r7, lr}
    1a0a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1a0c:	4808      	ldr	r0, [pc, #32]	; (1a30 <TIMER_USB_init+0x28>)
    1a0e:	4b09      	ldr	r3, [pc, #36]	; (1a34 <TIMER_USB_init+0x2c>)
    1a10:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a12:	2243      	movs	r2, #67	; 0x43
    1a14:	2109      	movs	r1, #9
    1a16:	4808      	ldr	r0, [pc, #32]	; (1a38 <TIMER_USB_init+0x30>)
    1a18:	4b08      	ldr	r3, [pc, #32]	; (1a3c <TIMER_USB_init+0x34>)
    1a1a:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    1a1c:	4b08      	ldr	r3, [pc, #32]	; (1a40 <TIMER_USB_init+0x38>)
    1a1e:	4798      	blx	r3
    1a20:	4603      	mov	r3, r0
    1a22:	461a      	mov	r2, r3
    1a24:	4907      	ldr	r1, [pc, #28]	; (1a44 <TIMER_USB_init+0x3c>)
    1a26:	4808      	ldr	r0, [pc, #32]	; (1a48 <TIMER_USB_init+0x40>)
    1a28:	4b08      	ldr	r3, [pc, #32]	; (1a4c <TIMER_USB_init+0x44>)
    1a2a:	4798      	blx	r3
}
    1a2c:	bf00      	nop
    1a2e:	bd80      	pop	{r7, pc}
    1a30:	40000800 	.word	0x40000800
    1a34:	00000b87 	.word	0x00000b87
    1a38:	40001c00 	.word	0x40001c00
    1a3c:	00000a61 	.word	0x00000a61
    1a40:	00008245 	.word	0x00008245
    1a44:	40003800 	.word	0x40003800
    1a48:	200017ec 	.word	0x200017ec
    1a4c:	000029f9 	.word	0x000029f9

00001a50 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1a50:	b580      	push	{r7, lr}
    1a52:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1a54:	4808      	ldr	r0, [pc, #32]	; (1a78 <TIMER_ARINC_init+0x28>)
    1a56:	4b09      	ldr	r3, [pc, #36]	; (1a7c <TIMER_ARINC_init+0x2c>)
    1a58:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a5a:	2244      	movs	r2, #68	; 0x44
    1a5c:	211a      	movs	r1, #26
    1a5e:	4808      	ldr	r0, [pc, #32]	; (1a80 <TIMER_ARINC_init+0x30>)
    1a60:	4b08      	ldr	r3, [pc, #32]	; (1a84 <TIMER_ARINC_init+0x34>)
    1a62:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1a64:	4b08      	ldr	r3, [pc, #32]	; (1a88 <TIMER_ARINC_init+0x38>)
    1a66:	4798      	blx	r3
    1a68:	4603      	mov	r3, r0
    1a6a:	461a      	mov	r2, r3
    1a6c:	4907      	ldr	r1, [pc, #28]	; (1a8c <TIMER_ARINC_init+0x3c>)
    1a6e:	4808      	ldr	r0, [pc, #32]	; (1a90 <TIMER_ARINC_init+0x40>)
    1a70:	4b08      	ldr	r3, [pc, #32]	; (1a94 <TIMER_ARINC_init+0x44>)
    1a72:	4798      	blx	r3
}
    1a74:	bf00      	nop
    1a76:	bd80      	pop	{r7, pc}
    1a78:	40000800 	.word	0x40000800
    1a7c:	00000c47 	.word	0x00000c47
    1a80:	40001c00 	.word	0x40001c00
    1a84:	00000a61 	.word	0x00000a61
    1a88:	00008245 	.word	0x00008245
    1a8c:	4101a000 	.word	0x4101a000
    1a90:	200017cc 	.word	0x200017cc
    1a94:	000029f9 	.word	0x000029f9

00001a98 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    1a98:	b580      	push	{r7, lr}
    1a9a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1a9c:	4808      	ldr	r0, [pc, #32]	; (1ac0 <TIMER_MAINTENANCE_init+0x28>)
    1a9e:	4b09      	ldr	r3, [pc, #36]	; (1ac4 <TIMER_MAINTENANCE_init+0x2c>)
    1aa0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1aa2:	2246      	movs	r2, #70	; 0x46
    1aa4:	211e      	movs	r1, #30
    1aa6:	4808      	ldr	r0, [pc, #32]	; (1ac8 <TIMER_MAINTENANCE_init+0x30>)
    1aa8:	4b08      	ldr	r3, [pc, #32]	; (1acc <TIMER_MAINTENANCE_init+0x34>)
    1aaa:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1aac:	4b08      	ldr	r3, [pc, #32]	; (1ad0 <TIMER_MAINTENANCE_init+0x38>)
    1aae:	4798      	blx	r3
    1ab0:	4603      	mov	r3, r0
    1ab2:	461a      	mov	r2, r3
    1ab4:	4907      	ldr	r1, [pc, #28]	; (1ad4 <TIMER_MAINTENANCE_init+0x3c>)
    1ab6:	4808      	ldr	r0, [pc, #32]	; (1ad8 <TIMER_MAINTENANCE_init+0x40>)
    1ab8:	4b08      	ldr	r3, [pc, #32]	; (1adc <TIMER_MAINTENANCE_init+0x44>)
    1aba:	4798      	blx	r3
}
    1abc:	bf00      	nop
    1abe:	bd80      	pop	{r7, pc}
    1ac0:	40000800 	.word	0x40000800
    1ac4:	00000c87 	.word	0x00000c87
    1ac8:	40001c00 	.word	0x40001c00
    1acc:	00000a61 	.word	0x00000a61
    1ad0:	00008245 	.word	0x00008245
    1ad4:	42001400 	.word	0x42001400
    1ad8:	200016c4 	.word	0x200016c4
    1adc:	000029f9 	.word	0x000029f9

00001ae0 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1ae0:	b580      	push	{r7, lr}
    1ae2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1ae4:	4808      	ldr	r0, [pc, #32]	; (1b08 <TIMER_INTERFACE_init+0x28>)
    1ae6:	4b09      	ldr	r3, [pc, #36]	; (1b0c <TIMER_INTERFACE_init+0x2c>)
    1ae8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1aea:	2246      	movs	r2, #70	; 0x46
    1aec:	211e      	movs	r1, #30
    1aee:	4808      	ldr	r0, [pc, #32]	; (1b10 <TIMER_INTERFACE_init+0x30>)
    1af0:	4b08      	ldr	r3, [pc, #32]	; (1b14 <TIMER_INTERFACE_init+0x34>)
    1af2:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1af4:	4b08      	ldr	r3, [pc, #32]	; (1b18 <TIMER_INTERFACE_init+0x38>)
    1af6:	4798      	blx	r3
    1af8:	4603      	mov	r3, r0
    1afa:	461a      	mov	r2, r3
    1afc:	4907      	ldr	r1, [pc, #28]	; (1b1c <TIMER_INTERFACE_init+0x3c>)
    1afe:	4808      	ldr	r0, [pc, #32]	; (1b20 <TIMER_INTERFACE_init+0x40>)
    1b00:	4b08      	ldr	r3, [pc, #32]	; (1b24 <TIMER_INTERFACE_init+0x44>)
    1b02:	4798      	blx	r3
}
    1b04:	bf00      	nop
    1b06:	bd80      	pop	{r7, pc}
    1b08:	40000800 	.word	0x40000800
    1b0c:	00000ca7 	.word	0x00000ca7
    1b10:	40001c00 	.word	0x40001c00
    1b14:	00000a61 	.word	0x00000a61
    1b18:	00008245 	.word	0x00008245
    1b1c:	42001800 	.word	0x42001800
    1b20:	20001708 	.word	0x20001708
    1b24:	000029f9 	.word	0x000029f9

00001b28 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1b28:	b580      	push	{r7, lr}
    1b2a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    1b2c:	4808      	ldr	r0, [pc, #32]	; (1b50 <TIMER_EVENT_init+0x28>)
    1b2e:	4b09      	ldr	r3, [pc, #36]	; (1b54 <TIMER_EVENT_init+0x2c>)
    1b30:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b32:	2246      	movs	r2, #70	; 0x46
    1b34:	2127      	movs	r1, #39	; 0x27
    1b36:	4808      	ldr	r0, [pc, #32]	; (1b58 <TIMER_EVENT_init+0x30>)
    1b38:	4b08      	ldr	r3, [pc, #32]	; (1b5c <TIMER_EVENT_init+0x34>)
    1b3a:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    1b3c:	4b08      	ldr	r3, [pc, #32]	; (1b60 <TIMER_EVENT_init+0x38>)
    1b3e:	4798      	blx	r3
    1b40:	4603      	mov	r3, r0
    1b42:	461a      	mov	r2, r3
    1b44:	4907      	ldr	r1, [pc, #28]	; (1b64 <TIMER_EVENT_init+0x3c>)
    1b46:	4808      	ldr	r0, [pc, #32]	; (1b68 <TIMER_EVENT_init+0x40>)
    1b48:	4b08      	ldr	r3, [pc, #32]	; (1b6c <TIMER_EVENT_init+0x44>)
    1b4a:	4798      	blx	r3
}
    1b4c:	bf00      	nop
    1b4e:	bd80      	pop	{r7, pc}
    1b50:	40000800 	.word	0x40000800
    1b54:	00000d67 	.word	0x00000d67
    1b58:	40001c00 	.word	0x40001c00
    1b5c:	00000a61 	.word	0x00000a61
    1b60:	00008245 	.word	0x00008245
    1b64:	43001400 	.word	0x43001400
    1b68:	200016e8 	.word	0x200016e8
    1b6c:	000029f9 	.word	0x000029f9

00001b70 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1b70:	b480      	push	{r7}
    1b72:	af00      	add	r7, sp, #0
}
    1b74:	bf00      	nop
    1b76:	46bd      	mov	sp, r7
    1b78:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b7c:	4770      	bx	lr
	...

00001b80 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1b80:	b580      	push	{r7, lr}
    1b82:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1b84:	4804      	ldr	r0, [pc, #16]	; (1b98 <LIVE_PULSE_CLOCK_init+0x18>)
    1b86:	4b05      	ldr	r3, [pc, #20]	; (1b9c <LIVE_PULSE_CLOCK_init+0x1c>)
    1b88:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b8a:	2240      	movs	r2, #64	; 0x40
    1b8c:	2127      	movs	r1, #39	; 0x27
    1b8e:	4804      	ldr	r0, [pc, #16]	; (1ba0 <LIVE_PULSE_CLOCK_init+0x20>)
    1b90:	4b04      	ldr	r3, [pc, #16]	; (1ba4 <LIVE_PULSE_CLOCK_init+0x24>)
    1b92:	4798      	blx	r3
}
    1b94:	bf00      	nop
    1b96:	bd80      	pop	{r7, pc}
    1b98:	40000800 	.word	0x40000800
    1b9c:	00000d87 	.word	0x00000d87
    1ba0:	40001c00 	.word	0x40001c00
    1ba4:	00000a61 	.word	0x00000a61

00001ba8 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1ba8:	b580      	push	{r7, lr}
    1baa:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1bac:	4b06      	ldr	r3, [pc, #24]	; (1bc8 <LIVE_PULSE_init+0x20>)
    1bae:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1bb0:	4b06      	ldr	r3, [pc, #24]	; (1bcc <LIVE_PULSE_init+0x24>)
    1bb2:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1bb4:	4b06      	ldr	r3, [pc, #24]	; (1bd0 <LIVE_PULSE_init+0x28>)
    1bb6:	4798      	blx	r3
    1bb8:	4603      	mov	r3, r0
    1bba:	461a      	mov	r2, r3
    1bbc:	4905      	ldr	r1, [pc, #20]	; (1bd4 <LIVE_PULSE_init+0x2c>)
    1bbe:	4806      	ldr	r0, [pc, #24]	; (1bd8 <LIVE_PULSE_init+0x30>)
    1bc0:	4b06      	ldr	r3, [pc, #24]	; (1bdc <LIVE_PULSE_init+0x34>)
    1bc2:	4798      	blx	r3
}
    1bc4:	bf00      	nop
    1bc6:	bd80      	pop	{r7, pc}
    1bc8:	00001b81 	.word	0x00001b81
    1bcc:	00001b71 	.word	0x00001b71
    1bd0:	00008259 	.word	0x00008259
    1bd4:	43001800 	.word	0x43001800
    1bd8:	20001748 	.word	0x20001748
    1bdc:	00002619 	.word	0x00002619

00001be0 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    1be0:	b580      	push	{r7, lr}
    1be2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    1be4:	4804      	ldr	r0, [pc, #16]	; (1bf8 <TIMER_HVAC_CLOCK_init+0x18>)
    1be6:	4b05      	ldr	r3, [pc, #20]	; (1bfc <TIMER_HVAC_CLOCK_init+0x1c>)
    1be8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1bea:	2244      	movs	r2, #68	; 0x44
    1bec:	2119      	movs	r1, #25
    1bee:	4804      	ldr	r0, [pc, #16]	; (1c00 <TIMER_HVAC_CLOCK_init+0x20>)
    1bf0:	4b04      	ldr	r3, [pc, #16]	; (1c04 <TIMER_HVAC_CLOCK_init+0x24>)
    1bf2:	4798      	blx	r3
}
    1bf4:	bf00      	nop
    1bf6:	bd80      	pop	{r7, pc}
    1bf8:	40000800 	.word	0x40000800
    1bfc:	00000c07 	.word	0x00000c07
    1c00:	40001c00 	.word	0x40001c00
    1c04:	00000a61 	.word	0x00000a61

00001c08 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    1c08:	b580      	push	{r7, lr}
    1c0a:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    1c0c:	4b05      	ldr	r3, [pc, #20]	; (1c24 <TIMER_HVAC_init+0x1c>)
    1c0e:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    1c10:	4b05      	ldr	r3, [pc, #20]	; (1c28 <TIMER_HVAC_init+0x20>)
    1c12:	4798      	blx	r3
    1c14:	4603      	mov	r3, r0
    1c16:	461a      	mov	r2, r3
    1c18:	4904      	ldr	r1, [pc, #16]	; (1c2c <TIMER_HVAC_init+0x24>)
    1c1a:	4805      	ldr	r0, [pc, #20]	; (1c30 <TIMER_HVAC_init+0x28>)
    1c1c:	4b05      	ldr	r3, [pc, #20]	; (1c34 <TIMER_HVAC_init+0x2c>)
    1c1e:	4798      	blx	r3
}
    1c20:	bf00      	nop
    1c22:	bd80      	pop	{r7, pc}
    1c24:	00001be1 	.word	0x00001be1
    1c28:	000075e9 	.word	0x000075e9
    1c2c:	41016000 	.word	0x41016000
    1c30:	2000180c 	.word	0x2000180c
    1c34:	000029f9 	.word	0x000029f9

00001c38 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    1c38:	b580      	push	{r7, lr}
    1c3a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    1c3c:	4804      	ldr	r0, [pc, #16]	; (1c50 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    1c3e:	4b05      	ldr	r3, [pc, #20]	; (1c54 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    1c40:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c42:	2244      	movs	r2, #68	; 0x44
    1c44:	2119      	movs	r1, #25
    1c46:	4804      	ldr	r0, [pc, #16]	; (1c58 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    1c48:	4b04      	ldr	r3, [pc, #16]	; (1c5c <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    1c4a:	4798      	blx	r3
}
    1c4c:	bf00      	nop
    1c4e:	bd80      	pop	{r7, pc}
    1c50:	40000800 	.word	0x40000800
    1c54:	00000c27 	.word	0x00000c27
    1c58:	40001c00 	.word	0x40001c00
    1c5c:	00000a61 	.word	0x00000a61

00001c60 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    1c60:	b580      	push	{r7, lr}
    1c62:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    1c64:	4b05      	ldr	r3, [pc, #20]	; (1c7c <TIMER_TEMPERATURES_init+0x1c>)
    1c66:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    1c68:	4b05      	ldr	r3, [pc, #20]	; (1c80 <TIMER_TEMPERATURES_init+0x20>)
    1c6a:	4798      	blx	r3
    1c6c:	4603      	mov	r3, r0
    1c6e:	461a      	mov	r2, r3
    1c70:	4904      	ldr	r1, [pc, #16]	; (1c84 <TIMER_TEMPERATURES_init+0x24>)
    1c72:	4805      	ldr	r0, [pc, #20]	; (1c88 <TIMER_TEMPERATURES_init+0x28>)
    1c74:	4b05      	ldr	r3, [pc, #20]	; (1c8c <TIMER_TEMPERATURES_init+0x2c>)
    1c76:	4798      	blx	r3
}
    1c78:	bf00      	nop
    1c7a:	bd80      	pop	{r7, pc}
    1c7c:	00001c39 	.word	0x00001c39
    1c80:	000075e9 	.word	0x000075e9
    1c84:	41018000 	.word	0x41018000
    1c88:	20001654 	.word	0x20001654
    1c8c:	000029f9 	.word	0x000029f9

00001c90 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    1c90:	b580      	push	{r7, lr}
    1c92:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    1c94:	4804      	ldr	r0, [pc, #16]	; (1ca8 <TIMER_CCU_CLOCK_init+0x18>)
    1c96:	4b05      	ldr	r3, [pc, #20]	; (1cac <TIMER_CCU_CLOCK_init+0x1c>)
    1c98:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c9a:	2240      	movs	r2, #64	; 0x40
    1c9c:	211d      	movs	r1, #29
    1c9e:	4804      	ldr	r0, [pc, #16]	; (1cb0 <TIMER_CCU_CLOCK_init+0x20>)
    1ca0:	4b04      	ldr	r3, [pc, #16]	; (1cb4 <TIMER_CCU_CLOCK_init+0x24>)
    1ca2:	4798      	blx	r3
}
    1ca4:	bf00      	nop
    1ca6:	bd80      	pop	{r7, pc}
    1ca8:	40000800 	.word	0x40000800
    1cac:	00000c67 	.word	0x00000c67
    1cb0:	40001c00 	.word	0x40001c00
    1cb4:	00000a61 	.word	0x00000a61

00001cb8 <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    1cb8:	b580      	push	{r7, lr}
    1cba:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    1cbc:	4b05      	ldr	r3, [pc, #20]	; (1cd4 <TIMER_CCU_init+0x1c>)
    1cbe:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    1cc0:	4b05      	ldr	r3, [pc, #20]	; (1cd8 <TIMER_CCU_init+0x20>)
    1cc2:	4798      	blx	r3
    1cc4:	4603      	mov	r3, r0
    1cc6:	461a      	mov	r2, r3
    1cc8:	4904      	ldr	r1, [pc, #16]	; (1cdc <TIMER_CCU_init+0x24>)
    1cca:	4805      	ldr	r0, [pc, #20]	; (1ce0 <TIMER_CCU_init+0x28>)
    1ccc:	4b05      	ldr	r3, [pc, #20]	; (1ce4 <TIMER_CCU_init+0x2c>)
    1cce:	4798      	blx	r3
}
    1cd0:	bf00      	nop
    1cd2:	bd80      	pop	{r7, pc}
    1cd4:	00001c91 	.word	0x00001c91
    1cd8:	000075e9 	.word	0x000075e9
    1cdc:	42000c00 	.word	0x42000c00
    1ce0:	20001764 	.word	0x20001764
    1ce4:	000029f9 	.word	0x000029f9

00001ce8 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1ce8:	b580      	push	{r7, lr}
    1cea:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1cec:	2102      	movs	r1, #2
    1cee:	2018      	movs	r0, #24
    1cf0:	4b0f      	ldr	r3, [pc, #60]	; (1d30 <CDCUSB_PORT_init+0x48>)
    1cf2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1cf4:	2100      	movs	r1, #0
    1cf6:	2018      	movs	r0, #24
    1cf8:	4b0e      	ldr	r3, [pc, #56]	; (1d34 <CDCUSB_PORT_init+0x4c>)
    1cfa:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1cfc:	2100      	movs	r1, #0
    1cfe:	2018      	movs	r0, #24
    1d00:	4b0d      	ldr	r3, [pc, #52]	; (1d38 <CDCUSB_PORT_init+0x50>)
    1d02:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1d04:	490d      	ldr	r1, [pc, #52]	; (1d3c <CDCUSB_PORT_init+0x54>)
    1d06:	2018      	movs	r0, #24
    1d08:	4b0d      	ldr	r3, [pc, #52]	; (1d40 <CDCUSB_PORT_init+0x58>)
    1d0a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1d0c:	2102      	movs	r1, #2
    1d0e:	2019      	movs	r0, #25
    1d10:	4b07      	ldr	r3, [pc, #28]	; (1d30 <CDCUSB_PORT_init+0x48>)
    1d12:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1d14:	2100      	movs	r1, #0
    1d16:	2019      	movs	r0, #25
    1d18:	4b06      	ldr	r3, [pc, #24]	; (1d34 <CDCUSB_PORT_init+0x4c>)
    1d1a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1d1c:	2100      	movs	r1, #0
    1d1e:	2019      	movs	r0, #25
    1d20:	4b05      	ldr	r3, [pc, #20]	; (1d38 <CDCUSB_PORT_init+0x50>)
    1d22:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1d24:	4907      	ldr	r1, [pc, #28]	; (1d44 <CDCUSB_PORT_init+0x5c>)
    1d26:	2019      	movs	r0, #25
    1d28:	4b05      	ldr	r3, [pc, #20]	; (1d40 <CDCUSB_PORT_init+0x58>)
    1d2a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1d2c:	bf00      	nop
    1d2e:	bd80      	pop	{r7, pc}
    1d30:	000012d5 	.word	0x000012d5
    1d34:	0000130d 	.word	0x0000130d
    1d38:	00001281 	.word	0x00001281
    1d3c:	00180007 	.word	0x00180007
    1d40:	000012b5 	.word	0x000012b5
    1d44:	00190007 	.word	0x00190007

00001d48 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    1d48:	b580      	push	{r7, lr}
    1d4a:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1d4c:	2242      	movs	r2, #66	; 0x42
    1d4e:	210a      	movs	r1, #10
    1d50:	4805      	ldr	r0, [pc, #20]	; (1d68 <CDCUSB_CLOCK_init+0x20>)
    1d52:	4b06      	ldr	r3, [pc, #24]	; (1d6c <CDCUSB_CLOCK_init+0x24>)
    1d54:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    1d56:	4806      	ldr	r0, [pc, #24]	; (1d70 <CDCUSB_CLOCK_init+0x28>)
    1d58:	4b06      	ldr	r3, [pc, #24]	; (1d74 <CDCUSB_CLOCK_init+0x2c>)
    1d5a:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1d5c:	4804      	ldr	r0, [pc, #16]	; (1d70 <CDCUSB_CLOCK_init+0x28>)
    1d5e:	4b06      	ldr	r3, [pc, #24]	; (1d78 <CDCUSB_CLOCK_init+0x30>)
    1d60:	4798      	blx	r3
}
    1d62:	bf00      	nop
    1d64:	bd80      	pop	{r7, pc}
    1d66:	bf00      	nop
    1d68:	40001c00 	.word	0x40001c00
    1d6c:	00000a61 	.word	0x00000a61
    1d70:	40000800 	.word	0x40000800
    1d74:	00000a87 	.word	0x00000a87
    1d78:	00000ba7 	.word	0x00000ba7

00001d7c <CDCUSB_init>:

void CDCUSB_init(void)
{
    1d7c:	b580      	push	{r7, lr}
    1d7e:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1d80:	4b03      	ldr	r3, [pc, #12]	; (1d90 <CDCUSB_init+0x14>)
    1d82:	4798      	blx	r3
	usb_d_init();
    1d84:	4b03      	ldr	r3, [pc, #12]	; (1d94 <CDCUSB_init+0x18>)
    1d86:	4798      	blx	r3
	CDCUSB_PORT_init();
    1d88:	4b03      	ldr	r3, [pc, #12]	; (1d98 <CDCUSB_init+0x1c>)
    1d8a:	4798      	blx	r3
}
    1d8c:	bf00      	nop
    1d8e:	bd80      	pop	{r7, pc}
    1d90:	00001d49 	.word	0x00001d49
    1d94:	00003255 	.word	0x00003255
    1d98:	00001ce9 	.word	0x00001ce9

00001d9c <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1d9c:	b580      	push	{r7, lr}
    1d9e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1da0:	4802      	ldr	r0, [pc, #8]	; (1dac <WATCHDOG_CLOCK_init+0x10>)
    1da2:	4b03      	ldr	r3, [pc, #12]	; (1db0 <WATCHDOG_CLOCK_init+0x14>)
    1da4:	4798      	blx	r3
}
    1da6:	bf00      	nop
    1da8:	bd80      	pop	{r7, pc}
    1daa:	bf00      	nop
    1dac:	40000800 	.word	0x40000800
    1db0:	00000b07 	.word	0x00000b07

00001db4 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1db4:	b580      	push	{r7, lr}
    1db6:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1db8:	4b03      	ldr	r3, [pc, #12]	; (1dc8 <WATCHDOG_init+0x14>)
    1dba:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1dbc:	4903      	ldr	r1, [pc, #12]	; (1dcc <WATCHDOG_init+0x18>)
    1dbe:	4804      	ldr	r0, [pc, #16]	; (1dd0 <WATCHDOG_init+0x1c>)
    1dc0:	4b04      	ldr	r3, [pc, #16]	; (1dd4 <WATCHDOG_init+0x20>)
    1dc2:	4798      	blx	r3
}
    1dc4:	bf00      	nop
    1dc6:	bd80      	pop	{r7, pc}
    1dc8:	00001d9d 	.word	0x00001d9d
    1dcc:	40002000 	.word	0x40002000
    1dd0:	2000184c 	.word	0x2000184c
    1dd4:	00001355 	.word	0x00001355

00001dd8 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1dd8:	b580      	push	{r7, lr}
    1dda:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1ddc:	4904      	ldr	r1, [pc, #16]	; (1df0 <CAN_CCU_PORT_init+0x18>)
    1dde:	202d      	movs	r0, #45	; 0x2d
    1de0:	4b04      	ldr	r3, [pc, #16]	; (1df4 <CAN_CCU_PORT_init+0x1c>)
    1de2:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1de4:	4904      	ldr	r1, [pc, #16]	; (1df8 <CAN_CCU_PORT_init+0x20>)
    1de6:	202c      	movs	r0, #44	; 0x2c
    1de8:	4b02      	ldr	r3, [pc, #8]	; (1df4 <CAN_CCU_PORT_init+0x1c>)
    1dea:	4798      	blx	r3
}
    1dec:	bf00      	nop
    1dee:	bd80      	pop	{r7, pc}
    1df0:	002d0007 	.word	0x002d0007
    1df4:	000012b5 	.word	0x000012b5
    1df8:	002c0007 	.word	0x002c0007

00001dfc <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1dfc:	b580      	push	{r7, lr}
    1dfe:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1e00:	4807      	ldr	r0, [pc, #28]	; (1e20 <CAN_CCU_init+0x24>)
    1e02:	4b08      	ldr	r3, [pc, #32]	; (1e24 <CAN_CCU_init+0x28>)
    1e04:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e06:	2249      	movs	r2, #73	; 0x49
    1e08:	211c      	movs	r1, #28
    1e0a:	4807      	ldr	r0, [pc, #28]	; (1e28 <CAN_CCU_init+0x2c>)
    1e0c:	4b07      	ldr	r3, [pc, #28]	; (1e2c <CAN_CCU_init+0x30>)
    1e0e:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1e10:	4907      	ldr	r1, [pc, #28]	; (1e30 <CAN_CCU_init+0x34>)
    1e12:	4808      	ldr	r0, [pc, #32]	; (1e34 <CAN_CCU_init+0x38>)
    1e14:	4b08      	ldr	r3, [pc, #32]	; (1e38 <CAN_CCU_init+0x3c>)
    1e16:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1e18:	4b08      	ldr	r3, [pc, #32]	; (1e3c <CAN_CCU_init+0x40>)
    1e1a:	4798      	blx	r3
}
    1e1c:	bf00      	nop
    1e1e:	bd80      	pop	{r7, pc}
    1e20:	40000800 	.word	0x40000800
    1e24:	00000ac7 	.word	0x00000ac7
    1e28:	40001c00 	.word	0x40001c00
    1e2c:	00000a61 	.word	0x00000a61
    1e30:	42000400 	.word	0x42000400
    1e34:	200017a4 	.word	0x200017a4
    1e38:	000020a1 	.word	0x000020a1
    1e3c:	00001dd9 	.word	0x00001dd9

00001e40 <system_init>:

void system_init(void)
{
    1e40:	b580      	push	{r7, lr}
    1e42:	af00      	add	r7, sp, #0
	init_mcu();
    1e44:	4b5f      	ldr	r3, [pc, #380]	; (1fc4 <system_init+0x184>)
    1e46:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    1e48:	2100      	movs	r1, #0
    1e4a:	2007      	movs	r0, #7
    1e4c:	4b5e      	ldr	r3, [pc, #376]	; (1fc8 <system_init+0x188>)
    1e4e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    1e50:	2102      	movs	r1, #2
    1e52:	2007      	movs	r0, #7
    1e54:	4b5d      	ldr	r3, [pc, #372]	; (1fcc <system_init+0x18c>)
    1e56:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    1e58:	f04f 31ff 	mov.w	r1, #4294967295
    1e5c:	2007      	movs	r0, #7
    1e5e:	4b5c      	ldr	r3, [pc, #368]	; (1fd0 <system_init+0x190>)
    1e60:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    1e62:	2101      	movs	r1, #1
    1e64:	200f      	movs	r0, #15
    1e66:	4b58      	ldr	r3, [pc, #352]	; (1fc8 <system_init+0x188>)
    1e68:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1e6a:	2102      	movs	r1, #2
    1e6c:	200f      	movs	r0, #15
    1e6e:	4b57      	ldr	r3, [pc, #348]	; (1fcc <system_init+0x18c>)
    1e70:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1e72:	f04f 31ff 	mov.w	r1, #4294967295
    1e76:	200f      	movs	r0, #15
    1e78:	4b55      	ldr	r3, [pc, #340]	; (1fd0 <system_init+0x190>)
    1e7a:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1e7c:	2101      	movs	r1, #1
    1e7e:	2013      	movs	r0, #19
    1e80:	4b51      	ldr	r3, [pc, #324]	; (1fc8 <system_init+0x188>)
    1e82:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    1e84:	2102      	movs	r1, #2
    1e86:	2013      	movs	r0, #19
    1e88:	4b50      	ldr	r3, [pc, #320]	; (1fcc <system_init+0x18c>)
    1e8a:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1e8c:	f04f 31ff 	mov.w	r1, #4294967295
    1e90:	2013      	movs	r0, #19
    1e92:	4b4f      	ldr	r3, [pc, #316]	; (1fd0 <system_init+0x190>)
    1e94:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    1e96:	2101      	movs	r1, #1
    1e98:	201b      	movs	r0, #27
    1e9a:	4b4b      	ldr	r3, [pc, #300]	; (1fc8 <system_init+0x188>)
    1e9c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    1e9e:	2102      	movs	r1, #2
    1ea0:	201b      	movs	r0, #27
    1ea2:	4b4a      	ldr	r3, [pc, #296]	; (1fcc <system_init+0x18c>)
    1ea4:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    1ea6:	f04f 31ff 	mov.w	r1, #4294967295
    1eaa:	201b      	movs	r0, #27
    1eac:	4b48      	ldr	r3, [pc, #288]	; (1fd0 <system_init+0x190>)
    1eae:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    1eb0:	2101      	movs	r1, #1
    1eb2:	2027      	movs	r0, #39	; 0x27
    1eb4:	4b44      	ldr	r3, [pc, #272]	; (1fc8 <system_init+0x188>)
    1eb6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    1eb8:	2102      	movs	r1, #2
    1eba:	2027      	movs	r0, #39	; 0x27
    1ebc:	4b43      	ldr	r3, [pc, #268]	; (1fcc <system_init+0x18c>)
    1ebe:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    1ec0:	f04f 31ff 	mov.w	r1, #4294967295
    1ec4:	2027      	movs	r0, #39	; 0x27
    1ec6:	4b42      	ldr	r3, [pc, #264]	; (1fd0 <system_init+0x190>)
    1ec8:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    1eca:	2101      	movs	r1, #1
    1ecc:	203d      	movs	r0, #61	; 0x3d
    1ece:	4b3e      	ldr	r3, [pc, #248]	; (1fc8 <system_init+0x188>)
    1ed0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    1ed2:	2102      	movs	r1, #2
    1ed4:	203d      	movs	r0, #61	; 0x3d
    1ed6:	4b3d      	ldr	r3, [pc, #244]	; (1fcc <system_init+0x18c>)
    1ed8:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    1eda:	f04f 31ff 	mov.w	r1, #4294967295
    1ede:	203d      	movs	r0, #61	; 0x3d
    1ee0:	4b3b      	ldr	r3, [pc, #236]	; (1fd0 <system_init+0x190>)
    1ee2:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1ee4:	2101      	movs	r1, #1
    1ee6:	203f      	movs	r0, #63	; 0x3f
    1ee8:	4b38      	ldr	r3, [pc, #224]	; (1fcc <system_init+0x18c>)
    1eea:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1eec:	2101      	movs	r1, #1
    1eee:	203f      	movs	r0, #63	; 0x3f
    1ef0:	4b38      	ldr	r3, [pc, #224]	; (1fd4 <system_init+0x194>)
    1ef2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1ef4:	f04f 31ff 	mov.w	r1, #4294967295
    1ef8:	203f      	movs	r0, #63	; 0x3f
    1efa:	4b35      	ldr	r3, [pc, #212]	; (1fd0 <system_init+0x190>)
    1efc:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1efe:	2100      	movs	r1, #0
    1f00:	204d      	movs	r0, #77	; 0x4d
    1f02:	4b31      	ldr	r3, [pc, #196]	; (1fc8 <system_init+0x188>)
    1f04:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1f06:	2102      	movs	r1, #2
    1f08:	204d      	movs	r0, #77	; 0x4d
    1f0a:	4b30      	ldr	r3, [pc, #192]	; (1fcc <system_init+0x18c>)
    1f0c:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1f0e:	f04f 31ff 	mov.w	r1, #4294967295
    1f12:	204d      	movs	r0, #77	; 0x4d
    1f14:	4b2e      	ldr	r3, [pc, #184]	; (1fd0 <system_init+0x190>)
    1f16:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1f18:	2101      	movs	r1, #1
    1f1a:	204e      	movs	r0, #78	; 0x4e
    1f1c:	4b2a      	ldr	r3, [pc, #168]	; (1fc8 <system_init+0x188>)
    1f1e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    1f20:	2102      	movs	r1, #2
    1f22:	204e      	movs	r0, #78	; 0x4e
    1f24:	4b29      	ldr	r3, [pc, #164]	; (1fcc <system_init+0x18c>)
    1f26:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1f28:	f04f 31ff 	mov.w	r1, #4294967295
    1f2c:	204e      	movs	r0, #78	; 0x4e
    1f2e:	4b28      	ldr	r3, [pc, #160]	; (1fd0 <system_init+0x190>)
    1f30:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1f32:	2100      	movs	r1, #0
    1f34:	204f      	movs	r0, #79	; 0x4f
    1f36:	4b24      	ldr	r3, [pc, #144]	; (1fc8 <system_init+0x188>)
    1f38:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1f3a:	2102      	movs	r1, #2
    1f3c:	204f      	movs	r0, #79	; 0x4f
    1f3e:	4b23      	ldr	r3, [pc, #140]	; (1fcc <system_init+0x18c>)
    1f40:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1f42:	f04f 31ff 	mov.w	r1, #4294967295
    1f46:	204f      	movs	r0, #79	; 0x4f
    1f48:	4b21      	ldr	r3, [pc, #132]	; (1fd0 <system_init+0x190>)
    1f4a:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    1f4c:	2100      	movs	r1, #0
    1f4e:	2052      	movs	r0, #82	; 0x52
    1f50:	4b1d      	ldr	r3, [pc, #116]	; (1fc8 <system_init+0x188>)
    1f52:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1f54:	2102      	movs	r1, #2
    1f56:	2052      	movs	r0, #82	; 0x52
    1f58:	4b1c      	ldr	r3, [pc, #112]	; (1fcc <system_init+0x18c>)
    1f5a:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1f5c:	f04f 31ff 	mov.w	r1, #4294967295
    1f60:	2052      	movs	r0, #82	; 0x52
    1f62:	4b1b      	ldr	r3, [pc, #108]	; (1fd0 <system_init+0x190>)
    1f64:	4798      	blx	r3

	CRC_CALC_init();
    1f66:	4b1c      	ldr	r3, [pc, #112]	; (1fd8 <system_init+0x198>)
    1f68:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1f6a:	4b1c      	ldr	r3, [pc, #112]	; (1fdc <system_init+0x19c>)
    1f6c:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1f6e:	4b1c      	ldr	r3, [pc, #112]	; (1fe0 <system_init+0x1a0>)
    1f70:	4798      	blx	r3

	QSPI_N25Q256_init();
    1f72:	4b1c      	ldr	r3, [pc, #112]	; (1fe4 <system_init+0x1a4>)
    1f74:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1f76:	4b1c      	ldr	r3, [pc, #112]	; (1fe8 <system_init+0x1a8>)
    1f78:	4798      	blx	r3

	I2C_HEATERS_init();
    1f7a:	4b1c      	ldr	r3, [pc, #112]	; (1fec <system_init+0x1ac>)
    1f7c:	4798      	blx	r3

	SPI_TEMP_init();
    1f7e:	4b1c      	ldr	r3, [pc, #112]	; (1ff0 <system_init+0x1b0>)
    1f80:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    1f82:	4b1c      	ldr	r3, [pc, #112]	; (1ff4 <system_init+0x1b4>)
    1f84:	4798      	blx	r3

	SPI_HI3593_init();
    1f86:	4b1c      	ldr	r3, [pc, #112]	; (1ff8 <system_init+0x1b8>)
    1f88:	4798      	blx	r3

	I2C_FANS_init();
    1f8a:	4b1c      	ldr	r3, [pc, #112]	; (1ffc <system_init+0x1bc>)
    1f8c:	4798      	blx	r3

	TIMER_USB_init();
    1f8e:	4b1c      	ldr	r3, [pc, #112]	; (2000 <system_init+0x1c0>)
    1f90:	4798      	blx	r3
	TIMER_ARINC_init();
    1f92:	4b1c      	ldr	r3, [pc, #112]	; (2004 <system_init+0x1c4>)
    1f94:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    1f96:	4b1c      	ldr	r3, [pc, #112]	; (2008 <system_init+0x1c8>)
    1f98:	4798      	blx	r3
	TIMER_INTERFACE_init();
    1f9a:	4b1c      	ldr	r3, [pc, #112]	; (200c <system_init+0x1cc>)
    1f9c:	4798      	blx	r3
	TIMER_EVENT_init();
    1f9e:	4b1c      	ldr	r3, [pc, #112]	; (2010 <system_init+0x1d0>)
    1fa0:	4798      	blx	r3
	LIVE_PULSE_init();
    1fa2:	4b1c      	ldr	r3, [pc, #112]	; (2014 <system_init+0x1d4>)
    1fa4:	4798      	blx	r3

	TIMER_HVAC_init();
    1fa6:	4b1c      	ldr	r3, [pc, #112]	; (2018 <system_init+0x1d8>)
    1fa8:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    1faa:	4b1c      	ldr	r3, [pc, #112]	; (201c <system_init+0x1dc>)
    1fac:	4798      	blx	r3

	TIMER_CCU_init();
    1fae:	4b1c      	ldr	r3, [pc, #112]	; (2020 <system_init+0x1e0>)
    1fb0:	4798      	blx	r3

	CDCUSB_init();
    1fb2:	4b1c      	ldr	r3, [pc, #112]	; (2024 <system_init+0x1e4>)
    1fb4:	4798      	blx	r3

	WATCHDOG_init();
    1fb6:	4b1c      	ldr	r3, [pc, #112]	; (2028 <system_init+0x1e8>)
    1fb8:	4798      	blx	r3
	CAN_CCU_init();
    1fba:	4b1c      	ldr	r3, [pc, #112]	; (202c <system_init+0x1ec>)
    1fbc:	4798      	blx	r3
}
    1fbe:	bf00      	nop
    1fc0:	bd80      	pop	{r7, pc}
    1fc2:	bf00      	nop
    1fc4:	00001345 	.word	0x00001345
    1fc8:	0000130d 	.word	0x0000130d
    1fcc:	000012d5 	.word	0x000012d5
    1fd0:	000012b5 	.word	0x000012b5
    1fd4:	00001281 	.word	0x00001281
    1fd8:	000013a5 	.word	0x000013a5
    1fdc:	000013d1 	.word	0x000013d1
    1fe0:	000014f9 	.word	0x000014f9
    1fe4:	00001641 	.word	0x00001641
    1fe8:	00001685 	.word	0x00001685
    1fec:	00001715 	.word	0x00001715
    1ff0:	000017e1 	.word	0x000017e1
    1ff4:	00001879 	.word	0x00001879
    1ff8:	00001945 	.word	0x00001945
    1ffc:	000019dd 	.word	0x000019dd
    2000:	00001a09 	.word	0x00001a09
    2004:	00001a51 	.word	0x00001a51
    2008:	00001a99 	.word	0x00001a99
    200c:	00001ae1 	.word	0x00001ae1
    2010:	00001b29 	.word	0x00001b29
    2014:	00001ba9 	.word	0x00001ba9
    2018:	00001c09 	.word	0x00001c09
    201c:	00001c61 	.word	0x00001c61
    2020:	00001cb9 	.word	0x00001cb9
    2024:	00001d7d 	.word	0x00001d7d
    2028:	00001db5 	.word	0x00001db5
    202c:	00001dfd 	.word	0x00001dfd

00002030 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    2030:	b580      	push	{r7, lr}
    2032:	b084      	sub	sp, #16
    2034:	af00      	add	r7, sp, #0
    2036:	6078      	str	r0, [r7, #4]
    2038:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    203a:	2300      	movs	r3, #0
    203c:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    203e:	687b      	ldr	r3, [r7, #4]
    2040:	2b00      	cmp	r3, #0
    2042:	bf14      	ite	ne
    2044:	2301      	movne	r3, #1
    2046:	2300      	moveq	r3, #0
    2048:	b2db      	uxtb	r3, r3
    204a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    204e:	4911      	ldr	r1, [pc, #68]	; (2094 <calendar_init+0x64>)
    2050:	4618      	mov	r0, r3
    2052:	4b11      	ldr	r3, [pc, #68]	; (2098 <calendar_init+0x68>)
    2054:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    2056:	687b      	ldr	r3, [r7, #4]
    2058:	681a      	ldr	r2, [r3, #0]
    205a:	683b      	ldr	r3, [r7, #0]
    205c:	429a      	cmp	r2, r3
    205e:	d101      	bne.n	2064 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    2060:	2300      	movs	r3, #0
    2062:	e013      	b.n	208c <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    2064:	687b      	ldr	r3, [r7, #4]
    2066:	681b      	ldr	r3, [r3, #0]
    2068:	2b00      	cmp	r3, #0
    206a:	d002      	beq.n	2072 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    206c:	f06f 0311 	mvn.w	r3, #17
    2070:	e00c      	b.n	208c <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    2072:	687b      	ldr	r3, [r7, #4]
    2074:	683a      	ldr	r2, [r7, #0]
    2076:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    2078:	687b      	ldr	r3, [r7, #4]
    207a:	4618      	mov	r0, r3
    207c:	4b07      	ldr	r3, [pc, #28]	; (209c <calendar_init+0x6c>)
    207e:	4798      	blx	r3
    2080:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	f240 72b2 	movw	r2, #1970	; 0x7b2
    2088:	619a      	str	r2, [r3, #24]

	return ret;
    208a:	68fb      	ldr	r3, [r7, #12]
}
    208c:	4618      	mov	r0, r3
    208e:	3710      	adds	r7, #16
    2090:	46bd      	mov	sp, r7
    2092:	bd80      	pop	{r7, pc}
    2094:	0000ec08 	.word	0x0000ec08
    2098:	000037fd 	.word	0x000037fd
    209c:	00005bb9 	.word	0x00005bb9

000020a0 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    20a0:	b580      	push	{r7, lr}
    20a2:	b084      	sub	sp, #16
    20a4:	af00      	add	r7, sp, #0
    20a6:	6078      	str	r0, [r7, #4]
    20a8:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    20aa:	687b      	ldr	r3, [r7, #4]
    20ac:	2b00      	cmp	r3, #0
    20ae:	d004      	beq.n	20ba <can_async_init+0x1a>
    20b0:	683b      	ldr	r3, [r7, #0]
    20b2:	2b00      	cmp	r3, #0
    20b4:	d001      	beq.n	20ba <can_async_init+0x1a>
    20b6:	2301      	movs	r3, #1
    20b8:	e000      	b.n	20bc <can_async_init+0x1c>
    20ba:	2300      	movs	r3, #0
    20bc:	f003 0301 	and.w	r3, r3, #1
    20c0:	b2db      	uxtb	r3, r3
    20c2:	2241      	movs	r2, #65	; 0x41
    20c4:	490e      	ldr	r1, [pc, #56]	; (2100 <can_async_init+0x60>)
    20c6:	4618      	mov	r0, r3
    20c8:	4b0e      	ldr	r3, [pc, #56]	; (2104 <can_async_init+0x64>)
    20ca:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    20cc:	687b      	ldr	r3, [r7, #4]
    20ce:	6839      	ldr	r1, [r7, #0]
    20d0:	4618      	mov	r0, r3
    20d2:	4b0d      	ldr	r3, [pc, #52]	; (2108 <can_async_init+0x68>)
    20d4:	4798      	blx	r3
    20d6:	60f8      	str	r0, [r7, #12]
	if (rc) {
    20d8:	68fb      	ldr	r3, [r7, #12]
    20da:	2b00      	cmp	r3, #0
    20dc:	d001      	beq.n	20e2 <can_async_init+0x42>
		return rc;
    20de:	68fb      	ldr	r3, [r7, #12]
    20e0:	e009      	b.n	20f6 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    20e2:	687b      	ldr	r3, [r7, #4]
    20e4:	4a09      	ldr	r2, [pc, #36]	; (210c <can_async_init+0x6c>)
    20e6:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    20e8:	687b      	ldr	r3, [r7, #4]
    20ea:	4a09      	ldr	r2, [pc, #36]	; (2110 <can_async_init+0x70>)
    20ec:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    20ee:	687b      	ldr	r3, [r7, #4]
    20f0:	4a08      	ldr	r2, [pc, #32]	; (2114 <can_async_init+0x74>)
    20f2:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    20f4:	2300      	movs	r3, #0
}
    20f6:	4618      	mov	r0, r3
    20f8:	3710      	adds	r7, #16
    20fa:	46bd      	mov	sp, r7
    20fc:	bd80      	pop	{r7, pc}
    20fe:	bf00      	nop
    2100:	0000ec24 	.word	0x0000ec24
    2104:	000037fd 	.word	0x000037fd
    2108:	00003d59 	.word	0x00003d59
    210c:	00002119 	.word	0x00002119
    2110:	0000213d 	.word	0x0000213d
    2114:	00002161 	.word	0x00002161

00002118 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    2118:	b580      	push	{r7, lr}
    211a:	b084      	sub	sp, #16
    211c:	af00      	add	r7, sp, #0
    211e:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2120:	687b      	ldr	r3, [r7, #4]
    2122:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    2124:	68fb      	ldr	r3, [r7, #12]
    2126:	69db      	ldr	r3, [r3, #28]
    2128:	2b00      	cmp	r3, #0
    212a:	d003      	beq.n	2134 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    212c:	68fb      	ldr	r3, [r7, #12]
    212e:	69db      	ldr	r3, [r3, #28]
    2130:	68f8      	ldr	r0, [r7, #12]
    2132:	4798      	blx	r3
	}
}
    2134:	bf00      	nop
    2136:	3710      	adds	r7, #16
    2138:	46bd      	mov	sp, r7
    213a:	bd80      	pop	{r7, pc}

0000213c <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    213c:	b580      	push	{r7, lr}
    213e:	b084      	sub	sp, #16
    2140:	af00      	add	r7, sp, #0
    2142:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2144:	687b      	ldr	r3, [r7, #4]
    2146:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    2148:	68fb      	ldr	r3, [r7, #12]
    214a:	6a1b      	ldr	r3, [r3, #32]
    214c:	2b00      	cmp	r3, #0
    214e:	d003      	beq.n	2158 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    2150:	68fb      	ldr	r3, [r7, #12]
    2152:	6a1b      	ldr	r3, [r3, #32]
    2154:	68f8      	ldr	r0, [r7, #12]
    2156:	4798      	blx	r3
	}
}
    2158:	bf00      	nop
    215a:	3710      	adds	r7, #16
    215c:	46bd      	mov	sp, r7
    215e:	bd80      	pop	{r7, pc}

00002160 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    2160:	b580      	push	{r7, lr}
    2162:	b084      	sub	sp, #16
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
    2168:	460b      	mov	r3, r1
    216a:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    216c:	687b      	ldr	r3, [r7, #4]
    216e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    2170:	68fb      	ldr	r3, [r7, #12]
    2172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2174:	2b00      	cmp	r3, #0
    2176:	d005      	beq.n	2184 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    2178:	68fb      	ldr	r3, [r7, #12]
    217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    217c:	78fa      	ldrb	r2, [r7, #3]
    217e:	4611      	mov	r1, r2
    2180:	68f8      	ldr	r0, [r7, #12]
    2182:	4798      	blx	r3
	}
}
    2184:	bf00      	nop
    2186:	3710      	adds	r7, #16
    2188:	46bd      	mov	sp, r7
    218a:	bd80      	pop	{r7, pc}

0000218c <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    218c:	b580      	push	{r7, lr}
    218e:	b082      	sub	sp, #8
    2190:	af00      	add	r7, sp, #0
    2192:	6078      	str	r0, [r7, #4]
    2194:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    2196:	687b      	ldr	r3, [r7, #4]
    2198:	2b00      	cmp	r3, #0
    219a:	d004      	beq.n	21a6 <crc_sync_init+0x1a>
    219c:	683b      	ldr	r3, [r7, #0]
    219e:	2b00      	cmp	r3, #0
    21a0:	d001      	beq.n	21a6 <crc_sync_init+0x1a>
    21a2:	2301      	movs	r3, #1
    21a4:	e000      	b.n	21a8 <crc_sync_init+0x1c>
    21a6:	2300      	movs	r3, #0
    21a8:	f003 0301 	and.w	r3, r3, #1
    21ac:	b2db      	uxtb	r3, r3
    21ae:	222b      	movs	r2, #43	; 0x2b
    21b0:	4906      	ldr	r1, [pc, #24]	; (21cc <crc_sync_init+0x40>)
    21b2:	4618      	mov	r0, r3
    21b4:	4b06      	ldr	r3, [pc, #24]	; (21d0 <crc_sync_init+0x44>)
    21b6:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    21b8:	687b      	ldr	r3, [r7, #4]
    21ba:	6839      	ldr	r1, [r7, #0]
    21bc:	4618      	mov	r0, r3
    21be:	4b05      	ldr	r3, [pc, #20]	; (21d4 <crc_sync_init+0x48>)
    21c0:	4798      	blx	r3
    21c2:	4603      	mov	r3, r0
}
    21c4:	4618      	mov	r0, r3
    21c6:	3708      	adds	r7, #8
    21c8:	46bd      	mov	sp, r7
    21ca:	bd80      	pop	{r7, pc}
    21cc:	0000ec40 	.word	0x0000ec40
    21d0:	000037fd 	.word	0x000037fd
    21d4:	00004459 	.word	0x00004459

000021d8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    21d8:	b590      	push	{r4, r7, lr}
    21da:	b083      	sub	sp, #12
    21dc:	af00      	add	r7, sp, #0
    21de:	4603      	mov	r3, r0
    21e0:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    21e2:	4b07      	ldr	r3, [pc, #28]	; (2200 <delay_us+0x28>)
    21e4:	681c      	ldr	r4, [r3, #0]
    21e6:	88fb      	ldrh	r3, [r7, #6]
    21e8:	4618      	mov	r0, r3
    21ea:	4b06      	ldr	r3, [pc, #24]	; (2204 <delay_us+0x2c>)
    21ec:	4798      	blx	r3
    21ee:	4603      	mov	r3, r0
    21f0:	4619      	mov	r1, r3
    21f2:	4620      	mov	r0, r4
    21f4:	4b04      	ldr	r3, [pc, #16]	; (2208 <delay_us+0x30>)
    21f6:	4798      	blx	r3
}
    21f8:	bf00      	nop
    21fa:	370c      	adds	r7, #12
    21fc:	46bd      	mov	sp, r7
    21fe:	bd90      	pop	{r4, r7, pc}
    2200:	2000094c 	.word	0x2000094c
    2204:	000041ad 	.word	0x000041ad
    2208:	00004341 	.word	0x00004341

0000220c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    220c:	b590      	push	{r4, r7, lr}
    220e:	b083      	sub	sp, #12
    2210:	af00      	add	r7, sp, #0
    2212:	4603      	mov	r3, r0
    2214:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2216:	4b07      	ldr	r3, [pc, #28]	; (2234 <delay_ms+0x28>)
    2218:	681c      	ldr	r4, [r3, #0]
    221a:	88fb      	ldrh	r3, [r7, #6]
    221c:	4618      	mov	r0, r3
    221e:	4b06      	ldr	r3, [pc, #24]	; (2238 <delay_ms+0x2c>)
    2220:	4798      	blx	r3
    2222:	4603      	mov	r3, r0
    2224:	4619      	mov	r1, r3
    2226:	4620      	mov	r0, r4
    2228:	4b04      	ldr	r3, [pc, #16]	; (223c <delay_ms+0x30>)
    222a:	4798      	blx	r3
}
    222c:	bf00      	nop
    222e:	370c      	adds	r7, #12
    2230:	46bd      	mov	sp, r7
    2232:	bd90      	pop	{r4, r7, pc}
    2234:	2000094c 	.word	0x2000094c
    2238:	00004319 	.word	0x00004319
    223c:	00004341 	.word	0x00004341

00002240 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2240:	b580      	push	{r7, lr}
    2242:	af00      	add	r7, sp, #0
	return _event_system_init();
    2244:	4b02      	ldr	r3, [pc, #8]	; (2250 <event_system_init+0x10>)
    2246:	4798      	blx	r3
    2248:	4603      	mov	r3, r0
}
    224a:	4618      	mov	r0, r3
    224c:	bd80      	pop	{r7, pc}
    224e:	bf00      	nop
    2250:	00004c15 	.word	0x00004c15

00002254 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    2254:	b580      	push	{r7, lr}
    2256:	b082      	sub	sp, #8
    2258:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    225a:	2300      	movs	r3, #0
    225c:	80fb      	strh	r3, [r7, #6]
    225e:	e00e      	b.n	227e <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    2260:	88fb      	ldrh	r3, [r7, #6]
    2262:	4a0c      	ldr	r2, [pc, #48]	; (2294 <ext_irq_init+0x40>)
    2264:	00db      	lsls	r3, r3, #3
    2266:	4413      	add	r3, r2
    2268:	f04f 32ff 	mov.w	r2, #4294967295
    226c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    226e:	88fb      	ldrh	r3, [r7, #6]
    2270:	4a08      	ldr	r2, [pc, #32]	; (2294 <ext_irq_init+0x40>)
    2272:	2100      	movs	r1, #0
    2274:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2278:	88fb      	ldrh	r3, [r7, #6]
    227a:	3301      	adds	r3, #1
    227c:	80fb      	strh	r3, [r7, #6]
    227e:	88fb      	ldrh	r3, [r7, #6]
    2280:	2b08      	cmp	r3, #8
    2282:	d9ed      	bls.n	2260 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    2284:	4804      	ldr	r0, [pc, #16]	; (2298 <ext_irq_init+0x44>)
    2286:	4b05      	ldr	r3, [pc, #20]	; (229c <ext_irq_init+0x48>)
    2288:	4798      	blx	r3
    228a:	4603      	mov	r3, r0
}
    228c:	4618      	mov	r0, r3
    228e:	3708      	adds	r7, #8
    2290:	46bd      	mov	sp, r7
    2292:	bd80      	pop	{r7, pc}
    2294:	20000950 	.word	0x20000950
    2298:	000023f9 	.word	0x000023f9
    229c:	00004799 	.word	0x00004799

000022a0 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    22a0:	b580      	push	{r7, lr}
    22a2:	b086      	sub	sp, #24
    22a4:	af00      	add	r7, sp, #0
    22a6:	6078      	str	r0, [r7, #4]
    22a8:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    22aa:	2300      	movs	r3, #0
    22ac:	75fb      	strb	r3, [r7, #23]
    22ae:	2300      	movs	r3, #0
    22b0:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    22b2:	2300      	movs	r3, #0
    22b4:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    22b6:	e012      	b.n	22de <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    22b8:	7dfb      	ldrb	r3, [r7, #23]
    22ba:	4a4d      	ldr	r2, [pc, #308]	; (23f0 <ext_irq_register+0x150>)
    22bc:	00db      	lsls	r3, r3, #3
    22be:	4413      	add	r3, r2
    22c0:	685a      	ldr	r2, [r3, #4]
    22c2:	687b      	ldr	r3, [r7, #4]
    22c4:	429a      	cmp	r2, r3
    22c6:	d107      	bne.n	22d8 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    22c8:	7dfb      	ldrb	r3, [r7, #23]
    22ca:	4949      	ldr	r1, [pc, #292]	; (23f0 <ext_irq_register+0x150>)
    22cc:	683a      	ldr	r2, [r7, #0]
    22ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    22d2:	2301      	movs	r3, #1
    22d4:	757b      	strb	r3, [r7, #21]
			break;
    22d6:	e005      	b.n	22e4 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    22d8:	7dfb      	ldrb	r3, [r7, #23]
    22da:	3301      	adds	r3, #1
    22dc:	75fb      	strb	r3, [r7, #23]
    22de:	7dfb      	ldrb	r3, [r7, #23]
    22e0:	2b08      	cmp	r3, #8
    22e2:	d9e9      	bls.n	22b8 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    22e4:	683b      	ldr	r3, [r7, #0]
    22e6:	2b00      	cmp	r3, #0
    22e8:	d10e      	bne.n	2308 <ext_irq_register+0x68>
		if (!found) {
    22ea:	7d7b      	ldrb	r3, [r7, #21]
    22ec:	f083 0301 	eor.w	r3, r3, #1
    22f0:	b2db      	uxtb	r3, r3
    22f2:	2b00      	cmp	r3, #0
    22f4:	d002      	beq.n	22fc <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    22f6:	f06f 030c 	mvn.w	r3, #12
    22fa:	e074      	b.n	23e6 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    22fc:	2100      	movs	r1, #0
    22fe:	6878      	ldr	r0, [r7, #4]
    2300:	4b3c      	ldr	r3, [pc, #240]	; (23f4 <ext_irq_register+0x154>)
    2302:	4798      	blx	r3
    2304:	4603      	mov	r3, r0
    2306:	e06e      	b.n	23e6 <ext_irq_register+0x146>
	}

	if (!found) {
    2308:	7d7b      	ldrb	r3, [r7, #21]
    230a:	f083 0301 	eor.w	r3, r3, #1
    230e:	b2db      	uxtb	r3, r3
    2310:	2b00      	cmp	r3, #0
    2312:	d05a      	beq.n	23ca <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2314:	2300      	movs	r3, #0
    2316:	75fb      	strb	r3, [r7, #23]
    2318:	e016      	b.n	2348 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    231a:	7dfb      	ldrb	r3, [r7, #23]
    231c:	4a34      	ldr	r2, [pc, #208]	; (23f0 <ext_irq_register+0x150>)
    231e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2322:	2b00      	cmp	r3, #0
    2324:	d10d      	bne.n	2342 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    2326:	7dfb      	ldrb	r3, [r7, #23]
    2328:	4931      	ldr	r1, [pc, #196]	; (23f0 <ext_irq_register+0x150>)
    232a:	683a      	ldr	r2, [r7, #0]
    232c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    2330:	7dfb      	ldrb	r3, [r7, #23]
    2332:	4a2f      	ldr	r2, [pc, #188]	; (23f0 <ext_irq_register+0x150>)
    2334:	00db      	lsls	r3, r3, #3
    2336:	4413      	add	r3, r2
    2338:	687a      	ldr	r2, [r7, #4]
    233a:	605a      	str	r2, [r3, #4]
				found           = true;
    233c:	2301      	movs	r3, #1
    233e:	757b      	strb	r3, [r7, #21]
				break;
    2340:	e005      	b.n	234e <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2342:	7dfb      	ldrb	r3, [r7, #23]
    2344:	3301      	adds	r3, #1
    2346:	75fb      	strb	r3, [r7, #23]
    2348:	7dfb      	ldrb	r3, [r7, #23]
    234a:	2b08      	cmp	r3, #8
    234c:	d9e5      	bls.n	231a <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    234e:	e036      	b.n	23be <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    2350:	7dfb      	ldrb	r3, [r7, #23]
    2352:	4a27      	ldr	r2, [pc, #156]	; (23f0 <ext_irq_register+0x150>)
    2354:	00db      	lsls	r3, r3, #3
    2356:	4413      	add	r3, r2
    2358:	685a      	ldr	r2, [r3, #4]
    235a:	7dbb      	ldrb	r3, [r7, #22]
    235c:	4924      	ldr	r1, [pc, #144]	; (23f0 <ext_irq_register+0x150>)
    235e:	00db      	lsls	r3, r3, #3
    2360:	440b      	add	r3, r1
    2362:	685b      	ldr	r3, [r3, #4]
    2364:	429a      	cmp	r2, r3
    2366:	d227      	bcs.n	23b8 <ext_irq_register+0x118>
    2368:	7dbb      	ldrb	r3, [r7, #22]
    236a:	4a21      	ldr	r2, [pc, #132]	; (23f0 <ext_irq_register+0x150>)
    236c:	00db      	lsls	r3, r3, #3
    236e:	4413      	add	r3, r2
    2370:	685b      	ldr	r3, [r3, #4]
    2372:	f1b3 3fff 	cmp.w	r3, #4294967295
    2376:	d01f      	beq.n	23b8 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    2378:	7dbb      	ldrb	r3, [r7, #22]
    237a:	491d      	ldr	r1, [pc, #116]	; (23f0 <ext_irq_register+0x150>)
    237c:	f107 020c 	add.w	r2, r7, #12
    2380:	00db      	lsls	r3, r3, #3
    2382:	440b      	add	r3, r1
    2384:	e893 0003 	ldmia.w	r3, {r0, r1}
    2388:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    238c:	7dbb      	ldrb	r3, [r7, #22]
    238e:	7dfa      	ldrb	r2, [r7, #23]
    2390:	4817      	ldr	r0, [pc, #92]	; (23f0 <ext_irq_register+0x150>)
    2392:	4917      	ldr	r1, [pc, #92]	; (23f0 <ext_irq_register+0x150>)
    2394:	00db      	lsls	r3, r3, #3
    2396:	4403      	add	r3, r0
    2398:	00d2      	lsls	r2, r2, #3
    239a:	440a      	add	r2, r1
    239c:	e892 0003 	ldmia.w	r2, {r0, r1}
    23a0:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    23a4:	7dfb      	ldrb	r3, [r7, #23]
    23a6:	4a12      	ldr	r2, [pc, #72]	; (23f0 <ext_irq_register+0x150>)
    23a8:	00db      	lsls	r3, r3, #3
    23aa:	4413      	add	r3, r2
    23ac:	f107 020c 	add.w	r2, r7, #12
    23b0:	e892 0003 	ldmia.w	r2, {r0, r1}
    23b4:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    23b8:	7dbb      	ldrb	r3, [r7, #22]
    23ba:	3301      	adds	r3, #1
    23bc:	75bb      	strb	r3, [r7, #22]
    23be:	7dbb      	ldrb	r3, [r7, #22]
    23c0:	2b08      	cmp	r3, #8
    23c2:	d802      	bhi.n	23ca <ext_irq_register+0x12a>
    23c4:	7dfb      	ldrb	r3, [r7, #23]
    23c6:	2b08      	cmp	r3, #8
    23c8:	d9c2      	bls.n	2350 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    23ca:	7d7b      	ldrb	r3, [r7, #21]
    23cc:	f083 0301 	eor.w	r3, r3, #1
    23d0:	b2db      	uxtb	r3, r3
    23d2:	2b00      	cmp	r3, #0
    23d4:	d002      	beq.n	23dc <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    23d6:	f06f 030c 	mvn.w	r3, #12
    23da:	e004      	b.n	23e6 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    23dc:	2101      	movs	r1, #1
    23de:	6878      	ldr	r0, [r7, #4]
    23e0:	4b04      	ldr	r3, [pc, #16]	; (23f4 <ext_irq_register+0x154>)
    23e2:	4798      	blx	r3
    23e4:	4603      	mov	r3, r0
}
    23e6:	4618      	mov	r0, r3
    23e8:	3718      	adds	r7, #24
    23ea:	46bd      	mov	sp, r7
    23ec:	bd80      	pop	{r7, pc}
    23ee:	bf00      	nop
    23f0:	20000950 	.word	0x20000950
    23f4:	0000492d 	.word	0x0000492d

000023f8 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    23f8:	b580      	push	{r7, lr}
    23fa:	b084      	sub	sp, #16
    23fc:	af00      	add	r7, sp, #0
    23fe:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2400:	2300      	movs	r3, #0
    2402:	73fb      	strb	r3, [r7, #15]
    2404:	2309      	movs	r3, #9
    2406:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    2408:	e02a      	b.n	2460 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    240a:	7bba      	ldrb	r2, [r7, #14]
    240c:	7bfb      	ldrb	r3, [r7, #15]
    240e:	4413      	add	r3, r2
    2410:	105b      	asrs	r3, r3, #1
    2412:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    2414:	7b7b      	ldrb	r3, [r7, #13]
    2416:	2b08      	cmp	r3, #8
    2418:	d827      	bhi.n	246a <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    241a:	7b7b      	ldrb	r3, [r7, #13]
    241c:	4a16      	ldr	r2, [pc, #88]	; (2478 <process_ext_irq+0x80>)
    241e:	00db      	lsls	r3, r3, #3
    2420:	4413      	add	r3, r2
    2422:	685a      	ldr	r2, [r3, #4]
    2424:	687b      	ldr	r3, [r7, #4]
    2426:	429a      	cmp	r2, r3
    2428:	d10b      	bne.n	2442 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    242a:	7b7b      	ldrb	r3, [r7, #13]
    242c:	4a12      	ldr	r2, [pc, #72]	; (2478 <process_ext_irq+0x80>)
    242e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2432:	2b00      	cmp	r3, #0
    2434:	d01b      	beq.n	246e <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    2436:	7b7b      	ldrb	r3, [r7, #13]
    2438:	4a0f      	ldr	r2, [pc, #60]	; (2478 <process_ext_irq+0x80>)
    243a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    243e:	4798      	blx	r3
			}
			return;
    2440:	e015      	b.n	246e <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    2442:	7b7b      	ldrb	r3, [r7, #13]
    2444:	4a0c      	ldr	r2, [pc, #48]	; (2478 <process_ext_irq+0x80>)
    2446:	00db      	lsls	r3, r3, #3
    2448:	4413      	add	r3, r2
    244a:	685a      	ldr	r2, [r3, #4]
    244c:	687b      	ldr	r3, [r7, #4]
    244e:	429a      	cmp	r2, r3
    2450:	d203      	bcs.n	245a <process_ext_irq+0x62>
			lower = middle + 1;
    2452:	7b7b      	ldrb	r3, [r7, #13]
    2454:	3301      	adds	r3, #1
    2456:	73fb      	strb	r3, [r7, #15]
    2458:	e002      	b.n	2460 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    245a:	7b7b      	ldrb	r3, [r7, #13]
    245c:	3b01      	subs	r3, #1
    245e:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    2460:	7bba      	ldrb	r2, [r7, #14]
    2462:	7bfb      	ldrb	r3, [r7, #15]
    2464:	429a      	cmp	r2, r3
    2466:	d2d0      	bcs.n	240a <process_ext_irq+0x12>
    2468:	e002      	b.n	2470 <process_ext_irq+0x78>
			return;
    246a:	bf00      	nop
    246c:	e000      	b.n	2470 <process_ext_irq+0x78>
			return;
    246e:	bf00      	nop
		}
	}
}
    2470:	3710      	adds	r7, #16
    2472:	46bd      	mov	sp, r7
    2474:	bd80      	pop	{r7, pc}
    2476:	bf00      	nop
    2478:	20000950 	.word	0x20000950

0000247c <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    247c:	b580      	push	{r7, lr}
    247e:	b08a      	sub	sp, #40	; 0x28
    2480:	af00      	add	r7, sp, #0
    2482:	60f8      	str	r0, [r7, #12]
    2484:	60b9      	str	r1, [r7, #8]
    2486:	4613      	mov	r3, r2
    2488:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    248a:	68fb      	ldr	r3, [r7, #12]
    248c:	3b14      	subs	r3, #20
    248e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2492:	8b9b      	ldrh	r3, [r3, #28]
    2494:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2496:	88fb      	ldrh	r3, [r7, #6]
    2498:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    249a:	f248 0301 	movw	r3, #32769	; 0x8001
    249e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    24a0:	68bb      	ldr	r3, [r7, #8]
    24a2:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    24a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    24a6:	f107 0214 	add.w	r2, r7, #20
    24aa:	4611      	mov	r1, r2
    24ac:	4618      	mov	r0, r3
    24ae:	4b06      	ldr	r3, [pc, #24]	; (24c8 <i2c_m_sync_read+0x4c>)
    24b0:	4798      	blx	r3
    24b2:	6238      	str	r0, [r7, #32]

	if (ret) {
    24b4:	6a3b      	ldr	r3, [r7, #32]
    24b6:	2b00      	cmp	r3, #0
    24b8:	d001      	beq.n	24be <i2c_m_sync_read+0x42>
		return ret;
    24ba:	6a3b      	ldr	r3, [r7, #32]
    24bc:	e000      	b.n	24c0 <i2c_m_sync_read+0x44>
	}

	return n;
    24be:	88fb      	ldrh	r3, [r7, #6]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3728      	adds	r7, #40	; 0x28
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}
    24c8:	00006875 	.word	0x00006875

000024cc <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    24cc:	b580      	push	{r7, lr}
    24ce:	b08a      	sub	sp, #40	; 0x28
    24d0:	af00      	add	r7, sp, #0
    24d2:	60f8      	str	r0, [r7, #12]
    24d4:	60b9      	str	r1, [r7, #8]
    24d6:	4613      	mov	r3, r2
    24d8:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    24da:	68fb      	ldr	r3, [r7, #12]
    24dc:	3b14      	subs	r3, #20
    24de:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    24e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    24e2:	8b9b      	ldrh	r3, [r3, #28]
    24e4:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    24e6:	88fb      	ldrh	r3, [r7, #6]
    24e8:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    24ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    24ee:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    24f0:	68bb      	ldr	r3, [r7, #8]
    24f2:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    24f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    24f6:	f107 0214 	add.w	r2, r7, #20
    24fa:	4611      	mov	r1, r2
    24fc:	4618      	mov	r0, r3
    24fe:	4b06      	ldr	r3, [pc, #24]	; (2518 <i2c_m_sync_write+0x4c>)
    2500:	4798      	blx	r3
    2502:	6238      	str	r0, [r7, #32]

	if (ret) {
    2504:	6a3b      	ldr	r3, [r7, #32]
    2506:	2b00      	cmp	r3, #0
    2508:	d001      	beq.n	250e <i2c_m_sync_write+0x42>
		return ret;
    250a:	6a3b      	ldr	r3, [r7, #32]
    250c:	e000      	b.n	2510 <i2c_m_sync_write+0x44>
	}

	return n;
    250e:	88fb      	ldrh	r3, [r7, #6]
}
    2510:	4618      	mov	r0, r3
    2512:	3728      	adds	r7, #40	; 0x28
    2514:	46bd      	mov	sp, r7
    2516:	bd80      	pop	{r7, pc}
    2518:	00006875 	.word	0x00006875

0000251c <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    251c:	b580      	push	{r7, lr}
    251e:	b084      	sub	sp, #16
    2520:	af00      	add	r7, sp, #0
    2522:	6078      	str	r0, [r7, #4]
    2524:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    2526:	687b      	ldr	r3, [r7, #4]
    2528:	2b00      	cmp	r3, #0
    252a:	bf14      	ite	ne
    252c:	2301      	movne	r3, #1
    252e:	2300      	moveq	r3, #0
    2530:	b2db      	uxtb	r3, r3
    2532:	225e      	movs	r2, #94	; 0x5e
    2534:	490c      	ldr	r1, [pc, #48]	; (2568 <i2c_m_sync_init+0x4c>)
    2536:	4618      	mov	r0, r3
    2538:	4b0c      	ldr	r3, [pc, #48]	; (256c <i2c_m_sync_init+0x50>)
    253a:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    253c:	687b      	ldr	r3, [r7, #4]
    253e:	6839      	ldr	r1, [r7, #0]
    2540:	4618      	mov	r0, r3
    2542:	4b0b      	ldr	r3, [pc, #44]	; (2570 <i2c_m_sync_init+0x54>)
    2544:	4798      	blx	r3
    2546:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2548:	68fb      	ldr	r3, [r7, #12]
    254a:	2b00      	cmp	r3, #0
    254c:	d001      	beq.n	2552 <i2c_m_sync_init+0x36>
		return init_status;
    254e:	68fb      	ldr	r3, [r7, #12]
    2550:	e006      	b.n	2560 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    2552:	687b      	ldr	r3, [r7, #4]
    2554:	4a07      	ldr	r2, [pc, #28]	; (2574 <i2c_m_sync_init+0x58>)
    2556:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    2558:	687b      	ldr	r3, [r7, #4]
    255a:	4a07      	ldr	r2, [pc, #28]	; (2578 <i2c_m_sync_init+0x5c>)
    255c:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    255e:	2300      	movs	r3, #0
}
    2560:	4618      	mov	r0, r3
    2562:	3710      	adds	r7, #16
    2564:	46bd      	mov	sp, r7
    2566:	bd80      	pop	{r7, pc}
    2568:	0000ec5c 	.word	0x0000ec5c
    256c:	000037fd 	.word	0x000037fd
    2570:	00006615 	.word	0x00006615
    2574:	0000247d 	.word	0x0000247d
    2578:	000024cd 	.word	0x000024cd

0000257c <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    257c:	b580      	push	{r7, lr}
    257e:	b082      	sub	sp, #8
    2580:	af00      	add	r7, sp, #0
    2582:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    2584:	687b      	ldr	r3, [r7, #4]
    2586:	4618      	mov	r0, r3
    2588:	4b03      	ldr	r3, [pc, #12]	; (2598 <i2c_m_sync_enable+0x1c>)
    258a:	4798      	blx	r3
    258c:	4603      	mov	r3, r0
}
    258e:	4618      	mov	r0, r3
    2590:	3708      	adds	r7, #8
    2592:	46bd      	mov	sp, r7
    2594:	bd80      	pop	{r7, pc}
    2596:	bf00      	nop
    2598:	0000665d 	.word	0x0000665d

0000259c <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    259c:	b580      	push	{r7, lr}
    259e:	b082      	sub	sp, #8
    25a0:	af00      	add	r7, sp, #0
    25a2:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_disable(&i2c->device);
    25a4:	687b      	ldr	r3, [r7, #4]
    25a6:	4618      	mov	r0, r3
    25a8:	4b03      	ldr	r3, [pc, #12]	; (25b8 <i2c_m_sync_disable+0x1c>)
    25aa:	4798      	blx	r3
    25ac:	4603      	mov	r3, r0
}
    25ae:	4618      	mov	r0, r3
    25b0:	3708      	adds	r7, #8
    25b2:	46bd      	mov	sp, r7
    25b4:	bd80      	pop	{r7, pc}
    25b6:	bf00      	nop
    25b8:	0000669d 	.word	0x0000669d

000025bc <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    25bc:	b480      	push	{r7}
    25be:	b085      	sub	sp, #20
    25c0:	af00      	add	r7, sp, #0
    25c2:	60f8      	str	r0, [r7, #12]
    25c4:	460b      	mov	r3, r1
    25c6:	607a      	str	r2, [r7, #4]
    25c8:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    25ca:	897b      	ldrh	r3, [r7, #10]
    25cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    25d0:	b21a      	sxth	r2, r3
    25d2:	687b      	ldr	r3, [r7, #4]
    25d4:	b21b      	sxth	r3, r3
    25d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    25da:	b21b      	sxth	r3, r3
    25dc:	4313      	orrs	r3, r2
    25de:	b21b      	sxth	r3, r3
    25e0:	b29a      	uxth	r2, r3
    25e2:	68fb      	ldr	r3, [r7, #12]
    25e4:	839a      	strh	r2, [r3, #28]
    25e6:	68fb      	ldr	r3, [r7, #12]
    25e8:	8b9b      	ldrh	r3, [r3, #28]
}
    25ea:	4618      	mov	r0, r3
    25ec:	3714      	adds	r7, #20
    25ee:	46bd      	mov	sp, r7
    25f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    25f4:	4770      	bx	lr

000025f6 <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    25f6:	b480      	push	{r7}
    25f8:	b083      	sub	sp, #12
    25fa:	af00      	add	r7, sp, #0
    25fc:	6078      	str	r0, [r7, #4]
    25fe:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    2600:	687b      	ldr	r3, [r7, #4]
    2602:	f103 0214 	add.w	r2, r3, #20
    2606:	683b      	ldr	r3, [r7, #0]
    2608:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    260a:	2300      	movs	r3, #0
}
    260c:	4618      	mov	r0, r3
    260e:	370c      	adds	r7, #12
    2610:	46bd      	mov	sp, r7
    2612:	f85d 7b04 	ldr.w	r7, [sp], #4
    2616:	4770      	bx	lr

00002618 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    2618:	b580      	push	{r7, lr}
    261a:	b084      	sub	sp, #16
    261c:	af00      	add	r7, sp, #0
    261e:	60f8      	str	r0, [r7, #12]
    2620:	60b9      	str	r1, [r7, #8]
    2622:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2624:	68fb      	ldr	r3, [r7, #12]
    2626:	2b00      	cmp	r3, #0
    2628:	d004      	beq.n	2634 <pwm_init+0x1c>
    262a:	68bb      	ldr	r3, [r7, #8]
    262c:	2b00      	cmp	r3, #0
    262e:	d001      	beq.n	2634 <pwm_init+0x1c>
    2630:	2301      	movs	r3, #1
    2632:	e000      	b.n	2636 <pwm_init+0x1e>
    2634:	2300      	movs	r3, #0
    2636:	f003 0301 	and.w	r3, r3, #1
    263a:	b2db      	uxtb	r3, r3
    263c:	2233      	movs	r2, #51	; 0x33
    263e:	490a      	ldr	r1, [pc, #40]	; (2668 <pwm_init+0x50>)
    2640:	4618      	mov	r0, r3
    2642:	4b0a      	ldr	r3, [pc, #40]	; (266c <pwm_init+0x54>)
    2644:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    2646:	68fb      	ldr	r3, [r7, #12]
    2648:	68b9      	ldr	r1, [r7, #8]
    264a:	4618      	mov	r0, r3
    264c:	4b08      	ldr	r3, [pc, #32]	; (2670 <pwm_init+0x58>)
    264e:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2650:	68fb      	ldr	r3, [r7, #12]
    2652:	4a08      	ldr	r2, [pc, #32]	; (2674 <pwm_init+0x5c>)
    2654:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    2656:	68fb      	ldr	r3, [r7, #12]
    2658:	4a07      	ldr	r2, [pc, #28]	; (2678 <pwm_init+0x60>)
    265a:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    265c:	2300      	movs	r3, #0
}
    265e:	4618      	mov	r0, r3
    2660:	3710      	adds	r7, #16
    2662:	46bd      	mov	sp, r7
    2664:	bd80      	pop	{r7, pc}
    2666:	bf00      	nop
    2668:	0000ec78 	.word	0x0000ec78
    266c:	000037fd 	.word	0x000037fd
    2670:	00007e35 	.word	0x00007e35
    2674:	000026d1 	.word	0x000026d1
    2678:	000026f5 	.word	0x000026f5

0000267c <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    267c:	b580      	push	{r7, lr}
    267e:	b082      	sub	sp, #8
    2680:	af00      	add	r7, sp, #0
    2682:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2684:	687b      	ldr	r3, [r7, #4]
    2686:	2b00      	cmp	r3, #0
    2688:	bf14      	ite	ne
    268a:	2301      	movne	r3, #1
    268c:	2300      	moveq	r3, #0
    268e:	b2db      	uxtb	r3, r3
    2690:	224a      	movs	r2, #74	; 0x4a
    2692:	490b      	ldr	r1, [pc, #44]	; (26c0 <pwm_enable+0x44>)
    2694:	4618      	mov	r0, r3
    2696:	4b0b      	ldr	r3, [pc, #44]	; (26c4 <pwm_enable+0x48>)
    2698:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    269a:	687b      	ldr	r3, [r7, #4]
    269c:	4618      	mov	r0, r3
    269e:	4b0a      	ldr	r3, [pc, #40]	; (26c8 <pwm_enable+0x4c>)
    26a0:	4798      	blx	r3
    26a2:	4603      	mov	r3, r0
    26a4:	2b00      	cmp	r3, #0
    26a6:	d002      	beq.n	26ae <pwm_enable+0x32>
		return ERR_DENIED;
    26a8:	f06f 0310 	mvn.w	r3, #16
    26ac:	e004      	b.n	26b8 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    26ae:	687b      	ldr	r3, [r7, #4]
    26b0:	4618      	mov	r0, r3
    26b2:	4b06      	ldr	r3, [pc, #24]	; (26cc <pwm_enable+0x50>)
    26b4:	4798      	blx	r3

	return ERR_NONE;
    26b6:	2300      	movs	r3, #0
}
    26b8:	4618      	mov	r0, r3
    26ba:	3708      	adds	r7, #8
    26bc:	46bd      	mov	sp, r7
    26be:	bd80      	pop	{r7, pc}
    26c0:	0000ec78 	.word	0x0000ec78
    26c4:	000037fd 	.word	0x000037fd
    26c8:	00008225 	.word	0x00008225
    26cc:	000080e1 	.word	0x000080e1

000026d0 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    26d0:	b580      	push	{r7, lr}
    26d2:	b084      	sub	sp, #16
    26d4:	af00      	add	r7, sp, #0
    26d6:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    26d8:	687b      	ldr	r3, [r7, #4]
    26da:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    26dc:	68fb      	ldr	r3, [r7, #12]
    26de:	695b      	ldr	r3, [r3, #20]
    26e0:	2b00      	cmp	r3, #0
    26e2:	d003      	beq.n	26ec <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    26e4:	68fb      	ldr	r3, [r7, #12]
    26e6:	695b      	ldr	r3, [r3, #20]
    26e8:	68f8      	ldr	r0, [r7, #12]
    26ea:	4798      	blx	r3
	}
}
    26ec:	bf00      	nop
    26ee:	3710      	adds	r7, #16
    26f0:	46bd      	mov	sp, r7
    26f2:	bd80      	pop	{r7, pc}

000026f4 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    26f4:	b580      	push	{r7, lr}
    26f6:	b084      	sub	sp, #16
    26f8:	af00      	add	r7, sp, #0
    26fa:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    26fc:	687b      	ldr	r3, [r7, #4]
    26fe:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2700:	68fb      	ldr	r3, [r7, #12]
    2702:	699b      	ldr	r3, [r3, #24]
    2704:	2b00      	cmp	r3, #0
    2706:	d003      	beq.n	2710 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2708:	68fb      	ldr	r3, [r7, #12]
    270a:	699b      	ldr	r3, [r3, #24]
    270c:	68f8      	ldr	r0, [r7, #12]
    270e:	4798      	blx	r3
	}
}
    2710:	bf00      	nop
    2712:	3710      	adds	r7, #16
    2714:	46bd      	mov	sp, r7
    2716:	bd80      	pop	{r7, pc}

00002718 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2718:	b580      	push	{r7, lr}
    271a:	b082      	sub	sp, #8
    271c:	af00      	add	r7, sp, #0
    271e:	6078      	str	r0, [r7, #4]
    2720:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2722:	687b      	ldr	r3, [r7, #4]
    2724:	2b00      	cmp	r3, #0
    2726:	d004      	beq.n	2732 <qspi_sync_init+0x1a>
    2728:	683b      	ldr	r3, [r7, #0]
    272a:	2b00      	cmp	r3, #0
    272c:	d001      	beq.n	2732 <qspi_sync_init+0x1a>
    272e:	2301      	movs	r3, #1
    2730:	e000      	b.n	2734 <qspi_sync_init+0x1c>
    2732:	2300      	movs	r3, #0
    2734:	f003 0301 	and.w	r3, r3, #1
    2738:	b2db      	uxtb	r3, r3
    273a:	2231      	movs	r2, #49	; 0x31
    273c:	4906      	ldr	r1, [pc, #24]	; (2758 <qspi_sync_init+0x40>)
    273e:	4618      	mov	r0, r3
    2740:	4b06      	ldr	r3, [pc, #24]	; (275c <qspi_sync_init+0x44>)
    2742:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2744:	687b      	ldr	r3, [r7, #4]
    2746:	6839      	ldr	r1, [r7, #0]
    2748:	4618      	mov	r0, r3
    274a:	4b05      	ldr	r3, [pc, #20]	; (2760 <qspi_sync_init+0x48>)
    274c:	4798      	blx	r3
    274e:	4603      	mov	r3, r0
}
    2750:	4618      	mov	r0, r3
    2752:	3708      	adds	r7, #8
    2754:	46bd      	mov	sp, r7
    2756:	bd80      	pop	{r7, pc}
    2758:	0000ec90 	.word	0x0000ec90
    275c:	000037fd 	.word	0x000037fd
    2760:	000057f5 	.word	0x000057f5

00002764 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2764:	b580      	push	{r7, lr}
    2766:	b082      	sub	sp, #8
    2768:	af00      	add	r7, sp, #0
    276a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    276c:	687b      	ldr	r3, [r7, #4]
    276e:	2b00      	cmp	r3, #0
    2770:	bf14      	ite	ne
    2772:	2301      	movne	r3, #1
    2774:	2300      	moveq	r3, #0
    2776:	b2db      	uxtb	r3, r3
    2778:	223f      	movs	r2, #63	; 0x3f
    277a:	4906      	ldr	r1, [pc, #24]	; (2794 <qspi_sync_enable+0x30>)
    277c:	4618      	mov	r0, r3
    277e:	4b06      	ldr	r3, [pc, #24]	; (2798 <qspi_sync_enable+0x34>)
    2780:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2782:	687b      	ldr	r3, [r7, #4]
    2784:	4618      	mov	r0, r3
    2786:	4b05      	ldr	r3, [pc, #20]	; (279c <qspi_sync_enable+0x38>)
    2788:	4798      	blx	r3
    278a:	4603      	mov	r3, r0
}
    278c:	4618      	mov	r0, r3
    278e:	3708      	adds	r7, #8
    2790:	46bd      	mov	sp, r7
    2792:	bd80      	pop	{r7, pc}
    2794:	0000ec90 	.word	0x0000ec90
    2798:	000037fd 	.word	0x000037fd
    279c:	00005869 	.word	0x00005869

000027a0 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    27a0:	b580      	push	{r7, lr}
    27a2:	b082      	sub	sp, #8
    27a4:	af00      	add	r7, sp, #0
    27a6:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    27a8:	687b      	ldr	r3, [r7, #4]
    27aa:	2b00      	cmp	r3, #0
    27ac:	bf14      	ite	ne
    27ae:	2301      	movne	r3, #1
    27b0:	2300      	moveq	r3, #0
    27b2:	b2db      	uxtb	r3, r3
    27b4:	2246      	movs	r2, #70	; 0x46
    27b6:	4906      	ldr	r1, [pc, #24]	; (27d0 <qspi_sync_disable+0x30>)
    27b8:	4618      	mov	r0, r3
    27ba:	4b06      	ldr	r3, [pc, #24]	; (27d4 <qspi_sync_disable+0x34>)
    27bc:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    27be:	687b      	ldr	r3, [r7, #4]
    27c0:	4618      	mov	r0, r3
    27c2:	4b05      	ldr	r3, [pc, #20]	; (27d8 <qspi_sync_disable+0x38>)
    27c4:	4798      	blx	r3
    27c6:	4603      	mov	r3, r0
}
    27c8:	4618      	mov	r0, r3
    27ca:	3708      	adds	r7, #8
    27cc:	46bd      	mov	sp, r7
    27ce:	bd80      	pop	{r7, pc}
    27d0:	0000ec90 	.word	0x0000ec90
    27d4:	000037fd 	.word	0x000037fd
    27d8:	0000588d 	.word	0x0000588d

000027dc <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    27dc:	b580      	push	{r7, lr}
    27de:	b082      	sub	sp, #8
    27e0:	af00      	add	r7, sp, #0
    27e2:	6078      	str	r0, [r7, #4]
    27e4:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    27e6:	687b      	ldr	r3, [r7, #4]
    27e8:	2b00      	cmp	r3, #0
    27ea:	d004      	beq.n	27f6 <qspi_sync_serial_run_command+0x1a>
    27ec:	683b      	ldr	r3, [r7, #0]
    27ee:	2b00      	cmp	r3, #0
    27f0:	d001      	beq.n	27f6 <qspi_sync_serial_run_command+0x1a>
    27f2:	2301      	movs	r3, #1
    27f4:	e000      	b.n	27f8 <qspi_sync_serial_run_command+0x1c>
    27f6:	2300      	movs	r3, #0
    27f8:	f003 0301 	and.w	r3, r3, #1
    27fc:	b2db      	uxtb	r3, r3
    27fe:	224d      	movs	r2, #77	; 0x4d
    2800:	4906      	ldr	r1, [pc, #24]	; (281c <qspi_sync_serial_run_command+0x40>)
    2802:	4618      	mov	r0, r3
    2804:	4b06      	ldr	r3, [pc, #24]	; (2820 <qspi_sync_serial_run_command+0x44>)
    2806:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2808:	687b      	ldr	r3, [r7, #4]
    280a:	6839      	ldr	r1, [r7, #0]
    280c:	4618      	mov	r0, r3
    280e:	4b05      	ldr	r3, [pc, #20]	; (2824 <qspi_sync_serial_run_command+0x48>)
    2810:	4798      	blx	r3
    2812:	4603      	mov	r3, r0
}
    2814:	4618      	mov	r0, r3
    2816:	3708      	adds	r7, #8
    2818:	46bd      	mov	sp, r7
    281a:	bd80      	pop	{r7, pc}
    281c:	0000ec90 	.word	0x0000ec90
    2820:	000037fd 	.word	0x000037fd
    2824:	000059d9 	.word	0x000059d9

00002828 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2828:	b580      	push	{r7, lr}
    282a:	b084      	sub	sp, #16
    282c:	af00      	add	r7, sp, #0
    282e:	6078      	str	r0, [r7, #4]
    2830:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2832:	2300      	movs	r3, #0
    2834:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2836:	687b      	ldr	r3, [r7, #4]
    2838:	2b00      	cmp	r3, #0
    283a:	d004      	beq.n	2846 <spi_m_sync_init+0x1e>
    283c:	683b      	ldr	r3, [r7, #0]
    283e:	2b00      	cmp	r3, #0
    2840:	d001      	beq.n	2846 <spi_m_sync_init+0x1e>
    2842:	2301      	movs	r3, #1
    2844:	e000      	b.n	2848 <spi_m_sync_init+0x20>
    2846:	2300      	movs	r3, #0
    2848:	f003 0301 	and.w	r3, r3, #1
    284c:	b2db      	uxtb	r3, r3
    284e:	2240      	movs	r2, #64	; 0x40
    2850:	4910      	ldr	r1, [pc, #64]	; (2894 <spi_m_sync_init+0x6c>)
    2852:	4618      	mov	r0, r3
    2854:	4b10      	ldr	r3, [pc, #64]	; (2898 <spi_m_sync_init+0x70>)
    2856:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2858:	687b      	ldr	r3, [r7, #4]
    285a:	683a      	ldr	r2, [r7, #0]
    285c:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    285e:	687b      	ldr	r3, [r7, #4]
    2860:	3304      	adds	r3, #4
    2862:	6839      	ldr	r1, [r7, #0]
    2864:	4618      	mov	r0, r3
    2866:	4b0d      	ldr	r3, [pc, #52]	; (289c <spi_m_sync_init+0x74>)
    2868:	4798      	blx	r3
    286a:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    286c:	68fb      	ldr	r3, [r7, #12]
    286e:	2b00      	cmp	r3, #0
    2870:	da01      	bge.n	2876 <spi_m_sync_init+0x4e>
		return rc;
    2872:	68fb      	ldr	r3, [r7, #12]
    2874:	e00a      	b.n	288c <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2876:	687b      	ldr	r3, [r7, #4]
    2878:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    287c:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    287e:	687b      	ldr	r3, [r7, #4]
    2880:	4a07      	ldr	r2, [pc, #28]	; (28a0 <spi_m_sync_init+0x78>)
    2882:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2884:	687b      	ldr	r3, [r7, #4]
    2886:	4a07      	ldr	r2, [pc, #28]	; (28a4 <spi_m_sync_init+0x7c>)
    2888:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    288a:	2300      	movs	r3, #0
}
    288c:	4618      	mov	r0, r3
    288e:	3710      	adds	r7, #16
    2890:	46bd      	mov	sp, r7
    2892:	bd80      	pop	{r7, pc}
    2894:	0000ecac 	.word	0x0000ecac
    2898:	000037fd 	.word	0x000037fd
    289c:	00006d09 	.word	0x00006d09
    28a0:	000028a9 	.word	0x000028a9
    28a4:	00002901 	.word	0x00002901

000028a8 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    28a8:	b580      	push	{r7, lr}
    28aa:	b088      	sub	sp, #32
    28ac:	af00      	add	r7, sp, #0
    28ae:	60f8      	str	r0, [r7, #12]
    28b0:	60b9      	str	r1, [r7, #8]
    28b2:	4613      	mov	r3, r2
    28b4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    28b6:	68fb      	ldr	r3, [r7, #12]
    28b8:	2b00      	cmp	r3, #0
    28ba:	bf14      	ite	ne
    28bc:	2301      	movne	r3, #1
    28be:	2300      	moveq	r3, #0
    28c0:	b2db      	uxtb	r3, r3
    28c2:	2287      	movs	r2, #135	; 0x87
    28c4:	490b      	ldr	r1, [pc, #44]	; (28f4 <_spi_m_sync_io_read+0x4c>)
    28c6:	4618      	mov	r0, r3
    28c8:	4b0b      	ldr	r3, [pc, #44]	; (28f8 <_spi_m_sync_io_read+0x50>)
    28ca:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    28cc:	68fb      	ldr	r3, [r7, #12]
    28ce:	3b0c      	subs	r3, #12
    28d0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    28d2:	68bb      	ldr	r3, [r7, #8]
    28d4:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    28d6:	2300      	movs	r3, #0
    28d8:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    28da:	88fb      	ldrh	r3, [r7, #6]
    28dc:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    28de:	f107 0310 	add.w	r3, r7, #16
    28e2:	4619      	mov	r1, r3
    28e4:	69f8      	ldr	r0, [r7, #28]
    28e6:	4b05      	ldr	r3, [pc, #20]	; (28fc <_spi_m_sync_io_read+0x54>)
    28e8:	4798      	blx	r3
    28ea:	4603      	mov	r3, r0
}
    28ec:	4618      	mov	r0, r3
    28ee:	3720      	adds	r7, #32
    28f0:	46bd      	mov	sp, r7
    28f2:	bd80      	pop	{r7, pc}
    28f4:	0000ecac 	.word	0x0000ecac
    28f8:	000037fd 	.word	0x000037fd
    28fc:	00002959 	.word	0x00002959

00002900 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2900:	b580      	push	{r7, lr}
    2902:	b088      	sub	sp, #32
    2904:	af00      	add	r7, sp, #0
    2906:	60f8      	str	r0, [r7, #12]
    2908:	60b9      	str	r1, [r7, #8]
    290a:	4613      	mov	r3, r2
    290c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    290e:	68fb      	ldr	r3, [r7, #12]
    2910:	2b00      	cmp	r3, #0
    2912:	bf14      	ite	ne
    2914:	2301      	movne	r3, #1
    2916:	2300      	moveq	r3, #0
    2918:	b2db      	uxtb	r3, r3
    291a:	22a3      	movs	r2, #163	; 0xa3
    291c:	490b      	ldr	r1, [pc, #44]	; (294c <_spi_m_sync_io_write+0x4c>)
    291e:	4618      	mov	r0, r3
    2920:	4b0b      	ldr	r3, [pc, #44]	; (2950 <_spi_m_sync_io_write+0x50>)
    2922:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2924:	68fb      	ldr	r3, [r7, #12]
    2926:	3b0c      	subs	r3, #12
    2928:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    292a:	2300      	movs	r3, #0
    292c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    292e:	68bb      	ldr	r3, [r7, #8]
    2930:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2932:	88fb      	ldrh	r3, [r7, #6]
    2934:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2936:	f107 0310 	add.w	r3, r7, #16
    293a:	4619      	mov	r1, r3
    293c:	69f8      	ldr	r0, [r7, #28]
    293e:	4b05      	ldr	r3, [pc, #20]	; (2954 <_spi_m_sync_io_write+0x54>)
    2940:	4798      	blx	r3
    2942:	4603      	mov	r3, r0
}
    2944:	4618      	mov	r0, r3
    2946:	3720      	adds	r7, #32
    2948:	46bd      	mov	sp, r7
    294a:	bd80      	pop	{r7, pc}
    294c:	0000ecac 	.word	0x0000ecac
    2950:	000037fd 	.word	0x000037fd
    2954:	00002959 	.word	0x00002959

00002958 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2958:	b580      	push	{r7, lr}
    295a:	b086      	sub	sp, #24
    295c:	af00      	add	r7, sp, #0
    295e:	6078      	str	r0, [r7, #4]
    2960:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2962:	687b      	ldr	r3, [r7, #4]
    2964:	2b00      	cmp	r3, #0
    2966:	d004      	beq.n	2972 <spi_m_sync_transfer+0x1a>
    2968:	683b      	ldr	r3, [r7, #0]
    296a:	2b00      	cmp	r3, #0
    296c:	d001      	beq.n	2972 <spi_m_sync_transfer+0x1a>
    296e:	2301      	movs	r3, #1
    2970:	e000      	b.n	2974 <spi_m_sync_transfer+0x1c>
    2972:	2300      	movs	r3, #0
    2974:	f003 0301 	and.w	r3, r3, #1
    2978:	b2db      	uxtb	r3, r3
    297a:	22b3      	movs	r2, #179	; 0xb3
    297c:	490c      	ldr	r1, [pc, #48]	; (29b0 <spi_m_sync_transfer+0x58>)
    297e:	4618      	mov	r0, r3
    2980:	4b0c      	ldr	r3, [pc, #48]	; (29b4 <spi_m_sync_transfer+0x5c>)
    2982:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2984:	683b      	ldr	r3, [r7, #0]
    2986:	681b      	ldr	r3, [r3, #0]
    2988:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    298a:	683b      	ldr	r3, [r7, #0]
    298c:	685b      	ldr	r3, [r3, #4]
    298e:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2990:	683b      	ldr	r3, [r7, #0]
    2992:	689b      	ldr	r3, [r3, #8]
    2994:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2996:	687b      	ldr	r3, [r7, #4]
    2998:	3304      	adds	r3, #4
    299a:	f107 020c 	add.w	r2, r7, #12
    299e:	4611      	mov	r1, r2
    29a0:	4618      	mov	r0, r3
    29a2:	4b05      	ldr	r3, [pc, #20]	; (29b8 <spi_m_sync_transfer+0x60>)
    29a4:	4798      	blx	r3
    29a6:	4603      	mov	r3, r0
}
    29a8:	4618      	mov	r0, r3
    29aa:	3718      	adds	r7, #24
    29ac:	46bd      	mov	sp, r7
    29ae:	bd80      	pop	{r7, pc}
    29b0:	0000ecac 	.word	0x0000ecac
    29b4:	000037fd 	.word	0x000037fd
    29b8:	00006f69 	.word	0x00006f69

000029bc <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    29bc:	b480      	push	{r7}
    29be:	b083      	sub	sp, #12
    29c0:	af00      	add	r7, sp, #0
    29c2:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    29c4:	687b      	ldr	r3, [r7, #4]
    29c6:	681b      	ldr	r3, [r3, #0]
}
    29c8:	4618      	mov	r0, r3
    29ca:	370c      	adds	r7, #12
    29cc:	46bd      	mov	sp, r7
    29ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    29d2:	4770      	bx	lr

000029d4 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    29d4:	b480      	push	{r7}
    29d6:	b083      	sub	sp, #12
    29d8:	af00      	add	r7, sp, #0
    29da:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    29dc:	687b      	ldr	r3, [r7, #4]
    29de:	2b00      	cmp	r3, #0
    29e0:	d002      	beq.n	29e8 <list_get_next_element+0x14>
    29e2:	687b      	ldr	r3, [r7, #4]
    29e4:	681b      	ldr	r3, [r3, #0]
    29e6:	e000      	b.n	29ea <list_get_next_element+0x16>
    29e8:	2300      	movs	r3, #0
}
    29ea:	4618      	mov	r0, r3
    29ec:	370c      	adds	r7, #12
    29ee:	46bd      	mov	sp, r7
    29f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    29f4:	4770      	bx	lr
	...

000029f8 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    29f8:	b580      	push	{r7, lr}
    29fa:	b084      	sub	sp, #16
    29fc:	af00      	add	r7, sp, #0
    29fe:	60f8      	str	r0, [r7, #12]
    2a00:	60b9      	str	r1, [r7, #8]
    2a02:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2a04:	68fb      	ldr	r3, [r7, #12]
    2a06:	2b00      	cmp	r3, #0
    2a08:	d007      	beq.n	2a1a <timer_init+0x22>
    2a0a:	68bb      	ldr	r3, [r7, #8]
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	d004      	beq.n	2a1a <timer_init+0x22>
    2a10:	687b      	ldr	r3, [r7, #4]
    2a12:	2b00      	cmp	r3, #0
    2a14:	d001      	beq.n	2a1a <timer_init+0x22>
    2a16:	2301      	movs	r3, #1
    2a18:	e000      	b.n	2a1c <timer_init+0x24>
    2a1a:	2300      	movs	r3, #0
    2a1c:	f003 0301 	and.w	r3, r3, #1
    2a20:	b2db      	uxtb	r3, r3
    2a22:	223b      	movs	r2, #59	; 0x3b
    2a24:	490c      	ldr	r1, [pc, #48]	; (2a58 <timer_init+0x60>)
    2a26:	4618      	mov	r0, r3
    2a28:	4b0c      	ldr	r3, [pc, #48]	; (2a5c <timer_init+0x64>)
    2a2a:	4798      	blx	r3
	descr->func = func;
    2a2c:	68fb      	ldr	r3, [r7, #12]
    2a2e:	687a      	ldr	r2, [r7, #4]
    2a30:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    2a32:	68fb      	ldr	r3, [r7, #12]
    2a34:	681b      	ldr	r3, [r3, #0]
    2a36:	681b      	ldr	r3, [r3, #0]
    2a38:	68fa      	ldr	r2, [r7, #12]
    2a3a:	3204      	adds	r2, #4
    2a3c:	68b9      	ldr	r1, [r7, #8]
    2a3e:	4610      	mov	r0, r2
    2a40:	4798      	blx	r3
	descr->time                           = 0;
    2a42:	68fb      	ldr	r3, [r7, #12]
    2a44:	2200      	movs	r2, #0
    2a46:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2a48:	68fb      	ldr	r3, [r7, #12]
    2a4a:	4a05      	ldr	r2, [pc, #20]	; (2a60 <timer_init+0x68>)
    2a4c:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    2a4e:	2300      	movs	r3, #0
}
    2a50:	4618      	mov	r0, r3
    2a52:	3710      	adds	r7, #16
    2a54:	46bd      	mov	sp, r7
    2a56:	bd80      	pop	{r7, pc}
    2a58:	0000ecc8 	.word	0x0000ecc8
    2a5c:	000037fd 	.word	0x000037fd
    2a60:	00002de9 	.word	0x00002de9

00002a64 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2a64:	b580      	push	{r7, lr}
    2a66:	b082      	sub	sp, #8
    2a68:	af00      	add	r7, sp, #0
    2a6a:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2a6c:	687b      	ldr	r3, [r7, #4]
    2a6e:	2b00      	cmp	r3, #0
    2a70:	d005      	beq.n	2a7e <timer_start+0x1a>
    2a72:	687b      	ldr	r3, [r7, #4]
    2a74:	681b      	ldr	r3, [r3, #0]
    2a76:	2b00      	cmp	r3, #0
    2a78:	d001      	beq.n	2a7e <timer_start+0x1a>
    2a7a:	2301      	movs	r3, #1
    2a7c:	e000      	b.n	2a80 <timer_start+0x1c>
    2a7e:	2300      	movs	r3, #0
    2a80:	f003 0301 	and.w	r3, r3, #1
    2a84:	b2db      	uxtb	r3, r3
    2a86:	2254      	movs	r2, #84	; 0x54
    2a88:	490e      	ldr	r1, [pc, #56]	; (2ac4 <timer_start+0x60>)
    2a8a:	4618      	mov	r0, r3
    2a8c:	4b0e      	ldr	r3, [pc, #56]	; (2ac8 <timer_start+0x64>)
    2a8e:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    2a90:	687b      	ldr	r3, [r7, #4]
    2a92:	681b      	ldr	r3, [r3, #0]
    2a94:	699b      	ldr	r3, [r3, #24]
    2a96:	687a      	ldr	r2, [r7, #4]
    2a98:	3204      	adds	r2, #4
    2a9a:	4610      	mov	r0, r2
    2a9c:	4798      	blx	r3
    2a9e:	4603      	mov	r3, r0
    2aa0:	2b00      	cmp	r3, #0
    2aa2:	d002      	beq.n	2aaa <timer_start+0x46>
		return ERR_DENIED;
    2aa4:	f06f 0310 	mvn.w	r3, #16
    2aa8:	e007      	b.n	2aba <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    2aaa:	687b      	ldr	r3, [r7, #4]
    2aac:	681b      	ldr	r3, [r3, #0]
    2aae:	689b      	ldr	r3, [r3, #8]
    2ab0:	687a      	ldr	r2, [r7, #4]
    2ab2:	3204      	adds	r2, #4
    2ab4:	4610      	mov	r0, r2
    2ab6:	4798      	blx	r3

	return ERR_NONE;
    2ab8:	2300      	movs	r3, #0
}
    2aba:	4618      	mov	r0, r3
    2abc:	3708      	adds	r7, #8
    2abe:	46bd      	mov	sp, r7
    2ac0:	bd80      	pop	{r7, pc}
    2ac2:	bf00      	nop
    2ac4:	0000ecc8 	.word	0x0000ecc8
    2ac8:	000037fd 	.word	0x000037fd

00002acc <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    2acc:	b580      	push	{r7, lr}
    2ace:	b082      	sub	sp, #8
    2ad0:	af00      	add	r7, sp, #0
    2ad2:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2ad4:	687b      	ldr	r3, [r7, #4]
    2ad6:	2b00      	cmp	r3, #0
    2ad8:	d005      	beq.n	2ae6 <timer_stop+0x1a>
    2ada:	687b      	ldr	r3, [r7, #4]
    2adc:	681b      	ldr	r3, [r3, #0]
    2ade:	2b00      	cmp	r3, #0
    2ae0:	d001      	beq.n	2ae6 <timer_stop+0x1a>
    2ae2:	2301      	movs	r3, #1
    2ae4:	e000      	b.n	2ae8 <timer_stop+0x1c>
    2ae6:	2300      	movs	r3, #0
    2ae8:	f003 0301 	and.w	r3, r3, #1
    2aec:	b2db      	uxtb	r3, r3
    2aee:	2262      	movs	r2, #98	; 0x62
    2af0:	490f      	ldr	r1, [pc, #60]	; (2b30 <timer_stop+0x64>)
    2af2:	4618      	mov	r0, r3
    2af4:	4b0f      	ldr	r3, [pc, #60]	; (2b34 <timer_stop+0x68>)
    2af6:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    2af8:	687b      	ldr	r3, [r7, #4]
    2afa:	681b      	ldr	r3, [r3, #0]
    2afc:	699b      	ldr	r3, [r3, #24]
    2afe:	687a      	ldr	r2, [r7, #4]
    2b00:	3204      	adds	r2, #4
    2b02:	4610      	mov	r0, r2
    2b04:	4798      	blx	r3
    2b06:	4603      	mov	r3, r0
    2b08:	f083 0301 	eor.w	r3, r3, #1
    2b0c:	b2db      	uxtb	r3, r3
    2b0e:	2b00      	cmp	r3, #0
    2b10:	d002      	beq.n	2b18 <timer_stop+0x4c>
		return ERR_DENIED;
    2b12:	f06f 0310 	mvn.w	r3, #16
    2b16:	e007      	b.n	2b28 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    2b18:	687b      	ldr	r3, [r7, #4]
    2b1a:	681b      	ldr	r3, [r3, #0]
    2b1c:	68db      	ldr	r3, [r3, #12]
    2b1e:	687a      	ldr	r2, [r7, #4]
    2b20:	3204      	adds	r2, #4
    2b22:	4610      	mov	r0, r2
    2b24:	4798      	blx	r3

	return ERR_NONE;
    2b26:	2300      	movs	r3, #0
}
    2b28:	4618      	mov	r0, r3
    2b2a:	3708      	adds	r7, #8
    2b2c:	46bd      	mov	sp, r7
    2b2e:	bd80      	pop	{r7, pc}
    2b30:	0000ecc8 	.word	0x0000ecc8
    2b34:	000037fd 	.word	0x000037fd

00002b38 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    2b38:	b580      	push	{r7, lr}
    2b3a:	b084      	sub	sp, #16
    2b3c:	af00      	add	r7, sp, #0
    2b3e:	6078      	str	r0, [r7, #4]
    2b40:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2b42:	687b      	ldr	r3, [r7, #4]
    2b44:	2b00      	cmp	r3, #0
    2b46:	d008      	beq.n	2b5a <timer_add_task+0x22>
    2b48:	683b      	ldr	r3, [r7, #0]
    2b4a:	2b00      	cmp	r3, #0
    2b4c:	d005      	beq.n	2b5a <timer_add_task+0x22>
    2b4e:	687b      	ldr	r3, [r7, #4]
    2b50:	681b      	ldr	r3, [r3, #0]
    2b52:	2b00      	cmp	r3, #0
    2b54:	d001      	beq.n	2b5a <timer_add_task+0x22>
    2b56:	2301      	movs	r3, #1
    2b58:	e000      	b.n	2b5c <timer_add_task+0x24>
    2b5a:	2300      	movs	r3, #0
    2b5c:	f003 0301 	and.w	r3, r3, #1
    2b60:	b2db      	uxtb	r3, r3
    2b62:	227b      	movs	r2, #123	; 0x7b
    2b64:	492f      	ldr	r1, [pc, #188]	; (2c24 <timer_add_task+0xec>)
    2b66:	4618      	mov	r0, r3
    2b68:	4b2f      	ldr	r3, [pc, #188]	; (2c28 <timer_add_task+0xf0>)
    2b6a:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2b6c:	687b      	ldr	r3, [r7, #4]
    2b6e:	7f1b      	ldrb	r3, [r3, #28]
    2b70:	b2db      	uxtb	r3, r3
    2b72:	f043 0301 	orr.w	r3, r3, #1
    2b76:	b2da      	uxtb	r2, r3
    2b78:	687b      	ldr	r3, [r7, #4]
    2b7a:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    2b7c:	687b      	ldr	r3, [r7, #4]
    2b7e:	3318      	adds	r3, #24
    2b80:	6839      	ldr	r1, [r7, #0]
    2b82:	4618      	mov	r0, r3
    2b84:	4b29      	ldr	r3, [pc, #164]	; (2c2c <timer_add_task+0xf4>)
    2b86:	4798      	blx	r3
    2b88:	4603      	mov	r3, r0
    2b8a:	2b00      	cmp	r3, #0
    2b8c:	d00f      	beq.n	2bae <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2b8e:	687b      	ldr	r3, [r7, #4]
    2b90:	7f1b      	ldrb	r3, [r3, #28]
    2b92:	b2db      	uxtb	r3, r3
    2b94:	f023 0301 	bic.w	r3, r3, #1
    2b98:	b2da      	uxtb	r2, r3
    2b9a:	687b      	ldr	r3, [r7, #4]
    2b9c:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2b9e:	2280      	movs	r2, #128	; 0x80
    2ba0:	4920      	ldr	r1, [pc, #128]	; (2c24 <timer_add_task+0xec>)
    2ba2:	2000      	movs	r0, #0
    2ba4:	4b20      	ldr	r3, [pc, #128]	; (2c28 <timer_add_task+0xf0>)
    2ba6:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2ba8:	f06f 0311 	mvn.w	r3, #17
    2bac:	e035      	b.n	2c1a <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    2bae:	687b      	ldr	r3, [r7, #4]
    2bb0:	695a      	ldr	r2, [r3, #20]
    2bb2:	683b      	ldr	r3, [r7, #0]
    2bb4:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2bb6:	687b      	ldr	r3, [r7, #4]
    2bb8:	f103 0018 	add.w	r0, r3, #24
    2bbc:	687b      	ldr	r3, [r7, #4]
    2bbe:	695b      	ldr	r3, [r3, #20]
    2bc0:	461a      	mov	r2, r3
    2bc2:	6839      	ldr	r1, [r7, #0]
    2bc4:	4b1a      	ldr	r3, [pc, #104]	; (2c30 <timer_add_task+0xf8>)
    2bc6:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2bc8:	687b      	ldr	r3, [r7, #4]
    2bca:	7f1b      	ldrb	r3, [r3, #28]
    2bcc:	b2db      	uxtb	r3, r3
    2bce:	f023 0301 	bic.w	r3, r3, #1
    2bd2:	b2da      	uxtb	r2, r3
    2bd4:	687b      	ldr	r3, [r7, #4]
    2bd6:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2bd8:	687b      	ldr	r3, [r7, #4]
    2bda:	7f1b      	ldrb	r3, [r3, #28]
    2bdc:	b2db      	uxtb	r3, r3
    2bde:	f003 0302 	and.w	r3, r3, #2
    2be2:	2b00      	cmp	r3, #0
    2be4:	d018      	beq.n	2c18 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    2be6:	f107 030c 	add.w	r3, r7, #12
    2bea:	4618      	mov	r0, r3
    2bec:	4b11      	ldr	r3, [pc, #68]	; (2c34 <timer_add_task+0xfc>)
    2bee:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2bf0:	687b      	ldr	r3, [r7, #4]
    2bf2:	7f1b      	ldrb	r3, [r3, #28]
    2bf4:	b2db      	uxtb	r3, r3
    2bf6:	f023 0302 	bic.w	r3, r3, #2
    2bfa:	b2da      	uxtb	r2, r3
    2bfc:	687b      	ldr	r3, [r7, #4]
    2bfe:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2c00:	687b      	ldr	r3, [r7, #4]
    2c02:	681b      	ldr	r3, [r3, #0]
    2c04:	69db      	ldr	r3, [r3, #28]
    2c06:	687a      	ldr	r2, [r7, #4]
    2c08:	3204      	adds	r2, #4
    2c0a:	4610      	mov	r0, r2
    2c0c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2c0e:	f107 030c 	add.w	r3, r7, #12
    2c12:	4618      	mov	r0, r3
    2c14:	4b08      	ldr	r3, [pc, #32]	; (2c38 <timer_add_task+0x100>)
    2c16:	4798      	blx	r3
	}

	return ERR_NONE;
    2c18:	2300      	movs	r3, #0
}
    2c1a:	4618      	mov	r0, r3
    2c1c:	3710      	adds	r7, #16
    2c1e:	46bd      	mov	sp, r7
    2c20:	bd80      	pop	{r7, pc}
    2c22:	bf00      	nop
    2c24:	0000ecc8 	.word	0x0000ecc8
    2c28:	000037fd 	.word	0x000037fd
    2c2c:	00003825 	.word	0x00003825
    2c30:	00002d39 	.word	0x00002d39
    2c34:	0000b385 	.word	0x0000b385
    2c38:	0000b3ab 	.word	0x0000b3ab

00002c3c <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    2c3c:	b580      	push	{r7, lr}
    2c3e:	b084      	sub	sp, #16
    2c40:	af00      	add	r7, sp, #0
    2c42:	6078      	str	r0, [r7, #4]
    2c44:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2c46:	687b      	ldr	r3, [r7, #4]
    2c48:	2b00      	cmp	r3, #0
    2c4a:	d008      	beq.n	2c5e <timer_remove_task+0x22>
    2c4c:	683b      	ldr	r3, [r7, #0]
    2c4e:	2b00      	cmp	r3, #0
    2c50:	d005      	beq.n	2c5e <timer_remove_task+0x22>
    2c52:	687b      	ldr	r3, [r7, #4]
    2c54:	681b      	ldr	r3, [r3, #0]
    2c56:	2b00      	cmp	r3, #0
    2c58:	d001      	beq.n	2c5e <timer_remove_task+0x22>
    2c5a:	2301      	movs	r3, #1
    2c5c:	e000      	b.n	2c60 <timer_remove_task+0x24>
    2c5e:	2300      	movs	r3, #0
    2c60:	f003 0301 	and.w	r3, r3, #1
    2c64:	b2db      	uxtb	r3, r3
    2c66:	2296      	movs	r2, #150	; 0x96
    2c68:	492d      	ldr	r1, [pc, #180]	; (2d20 <timer_remove_task+0xe4>)
    2c6a:	4618      	mov	r0, r3
    2c6c:	4b2d      	ldr	r3, [pc, #180]	; (2d24 <timer_remove_task+0xe8>)
    2c6e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2c70:	687b      	ldr	r3, [r7, #4]
    2c72:	7f1b      	ldrb	r3, [r3, #28]
    2c74:	b2db      	uxtb	r3, r3
    2c76:	f043 0301 	orr.w	r3, r3, #1
    2c7a:	b2da      	uxtb	r2, r3
    2c7c:	687b      	ldr	r3, [r7, #4]
    2c7e:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    2c80:	687b      	ldr	r3, [r7, #4]
    2c82:	3318      	adds	r3, #24
    2c84:	6839      	ldr	r1, [r7, #0]
    2c86:	4618      	mov	r0, r3
    2c88:	4b27      	ldr	r3, [pc, #156]	; (2d28 <timer_remove_task+0xec>)
    2c8a:	4798      	blx	r3
    2c8c:	4603      	mov	r3, r0
    2c8e:	f083 0301 	eor.w	r3, r3, #1
    2c92:	b2db      	uxtb	r3, r3
    2c94:	2b00      	cmp	r3, #0
    2c96:	d00f      	beq.n	2cb8 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2c98:	687b      	ldr	r3, [r7, #4]
    2c9a:	7f1b      	ldrb	r3, [r3, #28]
    2c9c:	b2db      	uxtb	r3, r3
    2c9e:	f023 0301 	bic.w	r3, r3, #1
    2ca2:	b2da      	uxtb	r2, r3
    2ca4:	687b      	ldr	r3, [r7, #4]
    2ca6:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2ca8:	229b      	movs	r2, #155	; 0x9b
    2caa:	491d      	ldr	r1, [pc, #116]	; (2d20 <timer_remove_task+0xe4>)
    2cac:	2000      	movs	r0, #0
    2cae:	4b1d      	ldr	r3, [pc, #116]	; (2d24 <timer_remove_task+0xe8>)
    2cb0:	4798      	blx	r3
		return ERR_NOT_FOUND;
    2cb2:	f06f 0309 	mvn.w	r3, #9
    2cb6:	e02e      	b.n	2d16 <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    2cb8:	687b      	ldr	r3, [r7, #4]
    2cba:	3318      	adds	r3, #24
    2cbc:	6839      	ldr	r1, [r7, #0]
    2cbe:	4618      	mov	r0, r3
    2cc0:	4b1a      	ldr	r3, [pc, #104]	; (2d2c <timer_remove_task+0xf0>)
    2cc2:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2cc4:	687b      	ldr	r3, [r7, #4]
    2cc6:	7f1b      	ldrb	r3, [r3, #28]
    2cc8:	b2db      	uxtb	r3, r3
    2cca:	f023 0301 	bic.w	r3, r3, #1
    2cce:	b2da      	uxtb	r2, r3
    2cd0:	687b      	ldr	r3, [r7, #4]
    2cd2:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2cd4:	687b      	ldr	r3, [r7, #4]
    2cd6:	7f1b      	ldrb	r3, [r3, #28]
    2cd8:	b2db      	uxtb	r3, r3
    2cda:	f003 0302 	and.w	r3, r3, #2
    2cde:	2b00      	cmp	r3, #0
    2ce0:	d018      	beq.n	2d14 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    2ce2:	f107 030c 	add.w	r3, r7, #12
    2ce6:	4618      	mov	r0, r3
    2ce8:	4b11      	ldr	r3, [pc, #68]	; (2d30 <timer_remove_task+0xf4>)
    2cea:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2cec:	687b      	ldr	r3, [r7, #4]
    2cee:	7f1b      	ldrb	r3, [r3, #28]
    2cf0:	b2db      	uxtb	r3, r3
    2cf2:	f023 0302 	bic.w	r3, r3, #2
    2cf6:	b2da      	uxtb	r2, r3
    2cf8:	687b      	ldr	r3, [r7, #4]
    2cfa:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2cfc:	687b      	ldr	r3, [r7, #4]
    2cfe:	681b      	ldr	r3, [r3, #0]
    2d00:	69db      	ldr	r3, [r3, #28]
    2d02:	687a      	ldr	r2, [r7, #4]
    2d04:	3204      	adds	r2, #4
    2d06:	4610      	mov	r0, r2
    2d08:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2d0a:	f107 030c 	add.w	r3, r7, #12
    2d0e:	4618      	mov	r0, r3
    2d10:	4b08      	ldr	r3, [pc, #32]	; (2d34 <timer_remove_task+0xf8>)
    2d12:	4798      	blx	r3
	}

	return ERR_NONE;
    2d14:	2300      	movs	r3, #0
}
    2d16:	4618      	mov	r0, r3
    2d18:	3710      	adds	r7, #16
    2d1a:	46bd      	mov	sp, r7
    2d1c:	bd80      	pop	{r7, pc}
    2d1e:	bf00      	nop
    2d20:	0000ecc8 	.word	0x0000ecc8
    2d24:	000037fd 	.word	0x000037fd
    2d28:	00003825 	.word	0x00003825
    2d2c:	00003987 	.word	0x00003987
    2d30:	0000b385 	.word	0x0000b385
    2d34:	0000b3ab 	.word	0x0000b3ab

00002d38 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2d38:	b580      	push	{r7, lr}
    2d3a:	b088      	sub	sp, #32
    2d3c:	af00      	add	r7, sp, #0
    2d3e:	60f8      	str	r0, [r7, #12]
    2d40:	60b9      	str	r1, [r7, #8]
    2d42:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    2d44:	2300      	movs	r3, #0
    2d46:	61bb      	str	r3, [r7, #24]
    2d48:	68f8      	ldr	r0, [r7, #12]
    2d4a:	4b23      	ldr	r3, [pc, #140]	; (2dd8 <timer_add_timer_task+0xa0>)
    2d4c:	4798      	blx	r3
    2d4e:	6138      	str	r0, [r7, #16]

	if (!head) {
    2d50:	693b      	ldr	r3, [r7, #16]
    2d52:	2b00      	cmp	r3, #0
    2d54:	d104      	bne.n	2d60 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2d56:	68b9      	ldr	r1, [r7, #8]
    2d58:	68f8      	ldr	r0, [r7, #12]
    2d5a:	4b20      	ldr	r3, [pc, #128]	; (2ddc <timer_add_timer_task+0xa4>)
    2d5c:	4798      	blx	r3
		return;
    2d5e:	e037      	b.n	2dd0 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2d60:	693b      	ldr	r3, [r7, #16]
    2d62:	61fb      	str	r3, [r7, #28]
    2d64:	e022      	b.n	2dac <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    2d66:	69fb      	ldr	r3, [r7, #28]
    2d68:	685a      	ldr	r2, [r3, #4]
    2d6a:	687b      	ldr	r3, [r7, #4]
    2d6c:	429a      	cmp	r2, r3
    2d6e:	d808      	bhi.n	2d82 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2d70:	69fb      	ldr	r3, [r7, #28]
    2d72:	689a      	ldr	r2, [r3, #8]
    2d74:	69fb      	ldr	r3, [r7, #28]
    2d76:	6859      	ldr	r1, [r3, #4]
    2d78:	687b      	ldr	r3, [r7, #4]
    2d7a:	1acb      	subs	r3, r1, r3
    2d7c:	4413      	add	r3, r2
    2d7e:	617b      	str	r3, [r7, #20]
    2d80:	e009      	b.n	2d96 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2d82:	69fb      	ldr	r3, [r7, #28]
    2d84:	689a      	ldr	r2, [r3, #8]
    2d86:	69fb      	ldr	r3, [r7, #28]
    2d88:	685b      	ldr	r3, [r3, #4]
    2d8a:	441a      	add	r2, r3
    2d8c:	687b      	ldr	r3, [r7, #4]
    2d8e:	425b      	negs	r3, r3
    2d90:	4413      	add	r3, r2
    2d92:	3301      	adds	r3, #1
    2d94:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    2d96:	68bb      	ldr	r3, [r7, #8]
    2d98:	689a      	ldr	r2, [r3, #8]
    2d9a:	697b      	ldr	r3, [r7, #20]
    2d9c:	429a      	cmp	r2, r3
    2d9e:	d909      	bls.n	2db4 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2da0:	69fb      	ldr	r3, [r7, #28]
    2da2:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2da4:	69f8      	ldr	r0, [r7, #28]
    2da6:	4b0e      	ldr	r3, [pc, #56]	; (2de0 <timer_add_timer_task+0xa8>)
    2da8:	4798      	blx	r3
    2daa:	61f8      	str	r0, [r7, #28]
    2dac:	69fb      	ldr	r3, [r7, #28]
    2dae:	2b00      	cmp	r3, #0
    2db0:	d1d9      	bne.n	2d66 <timer_add_timer_task+0x2e>
    2db2:	e000      	b.n	2db6 <timer_add_timer_task+0x7e>
			break;
    2db4:	bf00      	nop
	}

	if (it == head) {
    2db6:	69fa      	ldr	r2, [r7, #28]
    2db8:	693b      	ldr	r3, [r7, #16]
    2dba:	429a      	cmp	r2, r3
    2dbc:	d104      	bne.n	2dc8 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    2dbe:	68b9      	ldr	r1, [r7, #8]
    2dc0:	68f8      	ldr	r0, [r7, #12]
    2dc2:	4b06      	ldr	r3, [pc, #24]	; (2ddc <timer_add_timer_task+0xa4>)
    2dc4:	4798      	blx	r3
    2dc6:	e003      	b.n	2dd0 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2dc8:	68b9      	ldr	r1, [r7, #8]
    2dca:	69b8      	ldr	r0, [r7, #24]
    2dcc:	4b05      	ldr	r3, [pc, #20]	; (2de4 <timer_add_timer_task+0xac>)
    2dce:	4798      	blx	r3
	}
}
    2dd0:	3720      	adds	r7, #32
    2dd2:	46bd      	mov	sp, r7
    2dd4:	bd80      	pop	{r7, pc}
    2dd6:	bf00      	nop
    2dd8:	000029bd 	.word	0x000029bd
    2ddc:	0000385d 	.word	0x0000385d
    2de0:	000029d5 	.word	0x000029d5
    2de4:	000038b5 	.word	0x000038b5

00002de8 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2de8:	b580      	push	{r7, lr}
    2dea:	b086      	sub	sp, #24
    2dec:	af00      	add	r7, sp, #0
    2dee:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2df0:	687b      	ldr	r3, [r7, #4]
    2df2:	3b04      	subs	r3, #4
    2df4:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2df6:	693b      	ldr	r3, [r7, #16]
    2df8:	3318      	adds	r3, #24
    2dfa:	4618      	mov	r0, r3
    2dfc:	4b27      	ldr	r3, [pc, #156]	; (2e9c <timer_process_counted+0xb4>)
    2dfe:	4798      	blx	r3
    2e00:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2e02:	693b      	ldr	r3, [r7, #16]
    2e04:	695b      	ldr	r3, [r3, #20]
    2e06:	1c5a      	adds	r2, r3, #1
    2e08:	693b      	ldr	r3, [r7, #16]
    2e0a:	615a      	str	r2, [r3, #20]
    2e0c:	693b      	ldr	r3, [r7, #16]
    2e0e:	695b      	ldr	r3, [r3, #20]
    2e10:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2e12:	693b      	ldr	r3, [r7, #16]
    2e14:	7f1b      	ldrb	r3, [r3, #28]
    2e16:	b2db      	uxtb	r3, r3
    2e18:	f003 0301 	and.w	r3, r3, #1
    2e1c:	2b00      	cmp	r3, #0
    2e1e:	d106      	bne.n	2e2e <timer_process_counted+0x46>
    2e20:	693b      	ldr	r3, [r7, #16]
    2e22:	7f1b      	ldrb	r3, [r3, #28]
    2e24:	b2db      	uxtb	r3, r3
    2e26:	f003 0302 	and.w	r3, r3, #2
    2e2a:	2b00      	cmp	r3, #0
    2e2c:	d027      	beq.n	2e7e <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2e2e:	693b      	ldr	r3, [r7, #16]
    2e30:	7f1b      	ldrb	r3, [r3, #28]
    2e32:	b2db      	uxtb	r3, r3
    2e34:	f043 0302 	orr.w	r3, r3, #2
    2e38:	b2da      	uxtb	r2, r3
    2e3a:	693b      	ldr	r3, [r7, #16]
    2e3c:	771a      	strb	r2, [r3, #28]
		return;
    2e3e:	e029      	b.n	2e94 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2e40:	697b      	ldr	r3, [r7, #20]
    2e42:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    2e44:	693b      	ldr	r3, [r7, #16]
    2e46:	3318      	adds	r3, #24
    2e48:	4618      	mov	r0, r3
    2e4a:	4b15      	ldr	r3, [pc, #84]	; (2ea0 <timer_process_counted+0xb8>)
    2e4c:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2e4e:	68bb      	ldr	r3, [r7, #8]
    2e50:	7c1b      	ldrb	r3, [r3, #16]
    2e52:	2b01      	cmp	r3, #1
    2e54:	d109      	bne.n	2e6a <timer_process_counted+0x82>
			tmp->time_label = time;
    2e56:	68bb      	ldr	r3, [r7, #8]
    2e58:	68fa      	ldr	r2, [r7, #12]
    2e5a:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2e5c:	693b      	ldr	r3, [r7, #16]
    2e5e:	3318      	adds	r3, #24
    2e60:	68fa      	ldr	r2, [r7, #12]
    2e62:	68b9      	ldr	r1, [r7, #8]
    2e64:	4618      	mov	r0, r3
    2e66:	4b0f      	ldr	r3, [pc, #60]	; (2ea4 <timer_process_counted+0xbc>)
    2e68:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2e6a:	693b      	ldr	r3, [r7, #16]
    2e6c:	3318      	adds	r3, #24
    2e6e:	4618      	mov	r0, r3
    2e70:	4b0a      	ldr	r3, [pc, #40]	; (2e9c <timer_process_counted+0xb4>)
    2e72:	4798      	blx	r3
    2e74:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2e76:	68bb      	ldr	r3, [r7, #8]
    2e78:	68db      	ldr	r3, [r3, #12]
    2e7a:	68b8      	ldr	r0, [r7, #8]
    2e7c:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2e7e:	697b      	ldr	r3, [r7, #20]
    2e80:	2b00      	cmp	r3, #0
    2e82:	d007      	beq.n	2e94 <timer_process_counted+0xac>
    2e84:	697b      	ldr	r3, [r7, #20]
    2e86:	685b      	ldr	r3, [r3, #4]
    2e88:	68fa      	ldr	r2, [r7, #12]
    2e8a:	1ad2      	subs	r2, r2, r3
    2e8c:	697b      	ldr	r3, [r7, #20]
    2e8e:	689b      	ldr	r3, [r3, #8]
    2e90:	429a      	cmp	r2, r3
    2e92:	d2d5      	bcs.n	2e40 <timer_process_counted+0x58>
	}
}
    2e94:	3718      	adds	r7, #24
    2e96:	46bd      	mov	sp, r7
    2e98:	bd80      	pop	{r7, pc}
    2e9a:	bf00      	nop
    2e9c:	000029bd 	.word	0x000029bd
    2ea0:	00003955 	.word	0x00003955
    2ea4:	00002d39 	.word	0x00002d39

00002ea8 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2ea8:	b480      	push	{r7}
    2eaa:	b085      	sub	sp, #20
    2eac:	af00      	add	r7, sp, #0
    2eae:	4603      	mov	r3, r0
    2eb0:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2eb2:	2300      	movs	r3, #0
    2eb4:	73fb      	strb	r3, [r7, #15]
    2eb6:	e029      	b.n	2f0c <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2ebc:	4a19      	ldr	r2, [pc, #100]	; (2f24 <_usb_d_find_ep+0x7c>)
    2ebe:	015b      	lsls	r3, r3, #5
    2ec0:	4413      	add	r3, r2
    2ec2:	3301      	adds	r3, #1
    2ec4:	781b      	ldrb	r3, [r3, #0]
    2ec6:	79fa      	ldrb	r2, [r7, #7]
    2ec8:	429a      	cmp	r2, r3
    2eca:	d102      	bne.n	2ed2 <_usb_d_find_ep+0x2a>
			return i;
    2ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2ed0:	e022      	b.n	2f18 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2ed6:	4a13      	ldr	r2, [pc, #76]	; (2f24 <_usb_d_find_ep+0x7c>)
    2ed8:	015b      	lsls	r3, r3, #5
    2eda:	4413      	add	r3, r2
    2edc:	781b      	ldrb	r3, [r3, #0]
    2ede:	2b00      	cmp	r3, #0
    2ee0:	d10e      	bne.n	2f00 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2ee2:	79fb      	ldrb	r3, [r7, #7]
    2ee4:	f003 030f 	and.w	r3, r3, #15
    2ee8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2eec:	490d      	ldr	r1, [pc, #52]	; (2f24 <_usb_d_find_ep+0x7c>)
    2eee:	0152      	lsls	r2, r2, #5
    2ef0:	440a      	add	r2, r1
    2ef2:	3201      	adds	r2, #1
    2ef4:	7812      	ldrb	r2, [r2, #0]
    2ef6:	4293      	cmp	r3, r2
    2ef8:	d102      	bne.n	2f00 <_usb_d_find_ep+0x58>
			return i;
    2efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2efe:	e00b      	b.n	2f18 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2f04:	b2db      	uxtb	r3, r3
    2f06:	3301      	adds	r3, #1
    2f08:	b2db      	uxtb	r3, r3
    2f0a:	73fb      	strb	r3, [r7, #15]
    2f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2f10:	2b03      	cmp	r3, #3
    2f12:	ddd1      	ble.n	2eb8 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    2f14:	f04f 33ff 	mov.w	r3, #4294967295
}
    2f18:	4618      	mov	r0, r3
    2f1a:	3714      	adds	r7, #20
    2f1c:	46bd      	mov	sp, r7
    2f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f22:	4770      	bx	lr
    2f24:	20000998 	.word	0x20000998

00002f28 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    2f28:	b580      	push	{r7, lr}
    2f2a:	b088      	sub	sp, #32
    2f2c:	af00      	add	r7, sp, #0
    2f2e:	60ba      	str	r2, [r7, #8]
    2f30:	607b      	str	r3, [r7, #4]
    2f32:	4603      	mov	r3, r0
    2f34:	73fb      	strb	r3, [r7, #15]
    2f36:	460b      	mov	r3, r1
    2f38:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    2f3a:	68bb      	ldr	r3, [r7, #8]
    2f3c:	617b      	str	r3, [r7, #20]
    2f3e:	687b      	ldr	r3, [r7, #4]
    2f40:	61bb      	str	r3, [r7, #24]
    2f42:	7bbb      	ldrb	r3, [r7, #14]
    2f44:	2b00      	cmp	r3, #0
    2f46:	d004      	beq.n	2f52 <_usb_d_trans+0x2a>
    2f48:	7bfb      	ldrb	r3, [r7, #15]
    2f4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2f4e:	b2db      	uxtb	r3, r3
    2f50:	e003      	b.n	2f5a <_usb_d_trans+0x32>
    2f52:	7bfb      	ldrb	r3, [r7, #15]
    2f54:	f003 030f 	and.w	r3, r3, #15
    2f58:	b2db      	uxtb	r3, r3
    2f5a:	773b      	strb	r3, [r7, #28]
    2f5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    2f60:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    2f62:	f107 0314 	add.w	r3, r7, #20
    2f66:	4618      	mov	r0, r3
    2f68:	4b03      	ldr	r3, [pc, #12]	; (2f78 <_usb_d_trans+0x50>)
    2f6a:	4798      	blx	r3
    2f6c:	4603      	mov	r3, r0
}
    2f6e:	4618      	mov	r0, r3
    2f70:	3720      	adds	r7, #32
    2f72:	46bd      	mov	sp, r7
    2f74:	bd80      	pop	{r7, pc}
    2f76:	bf00      	nop
    2f78:	0000a9b9 	.word	0x0000a9b9

00002f7c <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    2f7c:	b480      	push	{r7}
    2f7e:	b085      	sub	sp, #20
    2f80:	af00      	add	r7, sp, #0
    2f82:	60f8      	str	r0, [r7, #12]
    2f84:	60b9      	str	r1, [r7, #8]
    2f86:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    2f88:	2300      	movs	r3, #0
}
    2f8a:	4618      	mov	r0, r3
    2f8c:	3714      	adds	r7, #20
    2f8e:	46bd      	mov	sp, r7
    2f90:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f94:	4770      	bx	lr
	...

00002f98 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    2f98:	b580      	push	{r7, lr}
    2f9a:	b086      	sub	sp, #24
    2f9c:	af00      	add	r7, sp, #0
    2f9e:	4603      	mov	r3, r0
    2fa0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2fa2:	79fb      	ldrb	r3, [r7, #7]
    2fa4:	4618      	mov	r0, r3
    2fa6:	4b2a      	ldr	r3, [pc, #168]	; (3050 <usb_d_cb_trans_setup+0xb8>)
    2fa8:	4798      	blx	r3
    2faa:	4603      	mov	r3, r0
    2fac:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2fae:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2fb2:	015b      	lsls	r3, r3, #5
    2fb4:	4a27      	ldr	r2, [pc, #156]	; (3054 <usb_d_cb_trans_setup+0xbc>)
    2fb6:	4413      	add	r3, r2
    2fb8:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    2fba:	693b      	ldr	r3, [r7, #16]
    2fbc:	330c      	adds	r3, #12
    2fbe:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2fc0:	79fb      	ldrb	r3, [r7, #7]
    2fc2:	68f9      	ldr	r1, [r7, #12]
    2fc4:	4618      	mov	r0, r3
    2fc6:	4b24      	ldr	r3, [pc, #144]	; (3058 <usb_d_cb_trans_setup+0xc0>)
    2fc8:	4798      	blx	r3
    2fca:	4603      	mov	r3, r0
    2fcc:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    2fce:	7afb      	ldrb	r3, [r7, #11]
    2fd0:	2b08      	cmp	r3, #8
    2fd2:	d00d      	beq.n	2ff0 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2fd4:	79fb      	ldrb	r3, [r7, #7]
    2fd6:	2101      	movs	r1, #1
    2fd8:	4618      	mov	r0, r3
    2fda:	4b20      	ldr	r3, [pc, #128]	; (305c <usb_d_cb_trans_setup+0xc4>)
    2fdc:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2fde:	79fb      	ldrb	r3, [r7, #7]
    2fe0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2fe4:	b2db      	uxtb	r3, r3
    2fe6:	2101      	movs	r1, #1
    2fe8:	4618      	mov	r0, r3
    2fea:	4b1c      	ldr	r3, [pc, #112]	; (305c <usb_d_cb_trans_setup+0xc4>)
    2fec:	4798      	blx	r3
		return;
    2fee:	e02b      	b.n	3048 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2ff0:	79fb      	ldrb	r3, [r7, #7]
    2ff2:	2100      	movs	r1, #0
    2ff4:	4618      	mov	r0, r3
    2ff6:	4b19      	ldr	r3, [pc, #100]	; (305c <usb_d_cb_trans_setup+0xc4>)
    2ff8:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2ffa:	79fb      	ldrb	r3, [r7, #7]
    2ffc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3000:	b2db      	uxtb	r3, r3
    3002:	2100      	movs	r1, #0
    3004:	4618      	mov	r0, r3
    3006:	4b15      	ldr	r3, [pc, #84]	; (305c <usb_d_cb_trans_setup+0xc4>)
    3008:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    300a:	693b      	ldr	r3, [r7, #16]
    300c:	2201      	movs	r2, #1
    300e:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    3010:	693b      	ldr	r3, [r7, #16]
    3012:	695b      	ldr	r3, [r3, #20]
    3014:	79fa      	ldrb	r2, [r7, #7]
    3016:	68f9      	ldr	r1, [r7, #12]
    3018:	4610      	mov	r0, r2
    301a:	4798      	blx	r3
    301c:	4603      	mov	r3, r0
    301e:	f083 0301 	eor.w	r3, r3, #1
    3022:	b2db      	uxtb	r3, r3
    3024:	2b00      	cmp	r3, #0
    3026:	d00f      	beq.n	3048 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    3028:	693b      	ldr	r3, [r7, #16]
    302a:	2205      	movs	r2, #5
    302c:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    302e:	79fb      	ldrb	r3, [r7, #7]
    3030:	2101      	movs	r1, #1
    3032:	4618      	mov	r0, r3
    3034:	4b09      	ldr	r3, [pc, #36]	; (305c <usb_d_cb_trans_setup+0xc4>)
    3036:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3038:	79fb      	ldrb	r3, [r7, #7]
    303a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    303e:	b2db      	uxtb	r3, r3
    3040:	2101      	movs	r1, #1
    3042:	4618      	mov	r0, r3
    3044:	4b05      	ldr	r3, [pc, #20]	; (305c <usb_d_cb_trans_setup+0xc4>)
    3046:	4798      	blx	r3
	}
}
    3048:	3718      	adds	r7, #24
    304a:	46bd      	mov	sp, r7
    304c:	bd80      	pop	{r7, pc}
    304e:	bf00      	nop
    3050:	00002ea9 	.word	0x00002ea9
    3054:	20000998 	.word	0x20000998
    3058:	0000a911 	.word	0x0000a911
    305c:	0000a789 	.word	0x0000a789

00003060 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3060:	b580      	push	{r7, lr}
    3062:	b084      	sub	sp, #16
    3064:	af00      	add	r7, sp, #0
    3066:	4603      	mov	r3, r0
    3068:	6039      	str	r1, [r7, #0]
    306a:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    306c:	79fb      	ldrb	r3, [r7, #7]
    306e:	4618      	mov	r0, r3
    3070:	4b0d      	ldr	r3, [pc, #52]	; (30a8 <usb_d_cb_trans_more+0x48>)
    3072:	4798      	blx	r3
    3074:	4603      	mov	r3, r0
    3076:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3078:	f997 300f 	ldrsb.w	r3, [r7, #15]
    307c:	015b      	lsls	r3, r3, #5
    307e:	4a0b      	ldr	r2, [pc, #44]	; (30ac <usb_d_cb_trans_more+0x4c>)
    3080:	4413      	add	r3, r2
    3082:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    3084:	68bb      	ldr	r3, [r7, #8]
    3086:	789b      	ldrb	r3, [r3, #2]
    3088:	2b03      	cmp	r3, #3
    308a:	d107      	bne.n	309c <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    308c:	68bb      	ldr	r3, [r7, #8]
    308e:	699b      	ldr	r3, [r3, #24]
    3090:	79fa      	ldrb	r2, [r7, #7]
    3092:	6839      	ldr	r1, [r7, #0]
    3094:	4610      	mov	r0, r2
    3096:	4798      	blx	r3
    3098:	4603      	mov	r3, r0
    309a:	e000      	b.n	309e <usb_d_cb_trans_more+0x3e>
	}
	return false;
    309c:	2300      	movs	r3, #0
}
    309e:	4618      	mov	r0, r3
    30a0:	3710      	adds	r7, #16
    30a2:	46bd      	mov	sp, r7
    30a4:	bd80      	pop	{r7, pc}
    30a6:	bf00      	nop
    30a8:	00002ea9 	.word	0x00002ea9
    30ac:	20000998 	.word	0x20000998

000030b0 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    30b0:	b590      	push	{r4, r7, lr}
    30b2:	b087      	sub	sp, #28
    30b4:	af02      	add	r7, sp, #8
    30b6:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    30b8:	687b      	ldr	r3, [r7, #4]
    30ba:	789b      	ldrb	r3, [r3, #2]
    30bc:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    30be:	687b      	ldr	r3, [r7, #4]
    30c0:	7b1b      	ldrb	r3, [r3, #12]
    30c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    30c6:	2b00      	cmp	r3, #0
    30c8:	bf14      	ite	ne
    30ca:	2301      	movne	r3, #1
    30cc:	2300      	moveq	r3, #0
    30ce:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    30d0:	7bfb      	ldrb	r3, [r7, #15]
    30d2:	2b03      	cmp	r3, #3
    30d4:	d13a      	bne.n	314c <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    30d6:	687b      	ldr	r3, [r7, #4]
    30d8:	69db      	ldr	r3, [r3, #28]
    30da:	687a      	ldr	r2, [r7, #4]
    30dc:	7850      	ldrb	r0, [r2, #1]
    30de:	687a      	ldr	r2, [r7, #4]
    30e0:	320c      	adds	r2, #12
    30e2:	2101      	movs	r1, #1
    30e4:	4798      	blx	r3
    30e6:	4603      	mov	r3, r0
    30e8:	737b      	strb	r3, [r7, #13]
		if (err) {
    30ea:	7b7b      	ldrb	r3, [r7, #13]
    30ec:	2b00      	cmp	r3, #0
    30ee:	d015      	beq.n	311c <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    30f0:	687b      	ldr	r3, [r7, #4]
    30f2:	2205      	movs	r2, #5
    30f4:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    30f6:	687b      	ldr	r3, [r7, #4]
    30f8:	2202      	movs	r2, #2
    30fa:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    30fc:	7bbb      	ldrb	r3, [r7, #14]
    30fe:	2b00      	cmp	r3, #0
    3100:	d002      	beq.n	3108 <usb_d_ctrl_trans_done+0x58>
    3102:	687b      	ldr	r3, [r7, #4]
    3104:	785b      	ldrb	r3, [r3, #1]
    3106:	e004      	b.n	3112 <usb_d_ctrl_trans_done+0x62>
    3108:	687b      	ldr	r3, [r7, #4]
    310a:	785b      	ldrb	r3, [r3, #1]
    310c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3110:	b2db      	uxtb	r3, r3
    3112:	2101      	movs	r1, #1
    3114:	4618      	mov	r0, r3
    3116:	4b15      	ldr	r3, [pc, #84]	; (316c <usb_d_ctrl_trans_done+0xbc>)
    3118:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    311a:	e022      	b.n	3162 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    311c:	687b      	ldr	r3, [r7, #4]
    311e:	2204      	movs	r2, #4
    3120:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    3122:	687b      	ldr	r3, [r7, #4]
    3124:	7858      	ldrb	r0, [r3, #1]
    3126:	7bbb      	ldrb	r3, [r7, #14]
    3128:	2b00      	cmp	r3, #0
    312a:	bf14      	ite	ne
    312c:	2301      	movne	r3, #1
    312e:	2300      	moveq	r3, #0
    3130:	b2db      	uxtb	r3, r3
    3132:	f083 0301 	eor.w	r3, r3, #1
    3136:	b2db      	uxtb	r3, r3
    3138:	f003 0301 	and.w	r3, r3, #1
    313c:	b2d9      	uxtb	r1, r3
    313e:	2301      	movs	r3, #1
    3140:	9300      	str	r3, [sp, #0]
    3142:	2300      	movs	r3, #0
    3144:	2200      	movs	r2, #0
    3146:	4c0a      	ldr	r4, [pc, #40]	; (3170 <usb_d_ctrl_trans_done+0xc0>)
    3148:	47a0      	blx	r4
}
    314a:	e00a      	b.n	3162 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    314c:	687b      	ldr	r3, [r7, #4]
    314e:	69db      	ldr	r3, [r3, #28]
    3150:	687a      	ldr	r2, [r7, #4]
    3152:	7850      	ldrb	r0, [r2, #1]
    3154:	687a      	ldr	r2, [r7, #4]
    3156:	320c      	adds	r2, #12
    3158:	2100      	movs	r1, #0
    315a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    315c:	687b      	ldr	r3, [r7, #4]
    315e:	2202      	movs	r2, #2
    3160:	709a      	strb	r2, [r3, #2]
}
    3162:	bf00      	nop
    3164:	3714      	adds	r7, #20
    3166:	46bd      	mov	sp, r7
    3168:	bd90      	pop	{r4, r7, pc}
    316a:	bf00      	nop
    316c:	0000a789 	.word	0x0000a789
    3170:	00002f29 	.word	0x00002f29

00003174 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    3174:	b580      	push	{r7, lr}
    3176:	b086      	sub	sp, #24
    3178:	af00      	add	r7, sp, #0
    317a:	4603      	mov	r3, r0
    317c:	60b9      	str	r1, [r7, #8]
    317e:	607a      	str	r2, [r7, #4]
    3180:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3182:	7bfb      	ldrb	r3, [r7, #15]
    3184:	4618      	mov	r0, r3
    3186:	4b2f      	ldr	r3, [pc, #188]	; (3244 <_usb_d_cb_trans_done+0xd0>)
    3188:	4798      	blx	r3
    318a:	4603      	mov	r3, r0
    318c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    318e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3192:	015b      	lsls	r3, r3, #5
    3194:	4a2c      	ldr	r2, [pc, #176]	; (3248 <_usb_d_cb_trans_done+0xd4>)
    3196:	4413      	add	r3, r2
    3198:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    319a:	68bb      	ldr	r3, [r7, #8]
    319c:	2b00      	cmp	r3, #0
    319e:	d10e      	bne.n	31be <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    31a0:	693b      	ldr	r3, [r7, #16]
    31a2:	2200      	movs	r2, #0
    31a4:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    31a6:	693b      	ldr	r3, [r7, #16]
    31a8:	781b      	ldrb	r3, [r3, #0]
    31aa:	2b00      	cmp	r3, #0
    31ac:	d103      	bne.n	31b6 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    31ae:	6938      	ldr	r0, [r7, #16]
    31b0:	4b26      	ldr	r3, [pc, #152]	; (324c <_usb_d_cb_trans_done+0xd8>)
    31b2:	4798      	blx	r3
			return;
    31b4:	e043      	b.n	323e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    31b6:	693b      	ldr	r3, [r7, #16]
    31b8:	2201      	movs	r2, #1
    31ba:	709a      	strb	r2, [r3, #2]
    31bc:	e038      	b.n	3230 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    31be:	68bb      	ldr	r3, [r7, #8]
    31c0:	2b01      	cmp	r3, #1
    31c2:	d113      	bne.n	31ec <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    31c4:	693b      	ldr	r3, [r7, #16]
    31c6:	2202      	movs	r2, #2
    31c8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    31ca:	693b      	ldr	r3, [r7, #16]
    31cc:	781b      	ldrb	r3, [r3, #0]
    31ce:	2b00      	cmp	r3, #0
    31d0:	d108      	bne.n	31e4 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    31d2:	693b      	ldr	r3, [r7, #16]
    31d4:	2202      	movs	r2, #2
    31d6:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    31d8:	7bfb      	ldrb	r3, [r7, #15]
    31da:	2100      	movs	r1, #0
    31dc:	4618      	mov	r0, r3
    31de:	4b1c      	ldr	r3, [pc, #112]	; (3250 <_usb_d_cb_trans_done+0xdc>)
    31e0:	4798      	blx	r3
    31e2:	e025      	b.n	3230 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    31e4:	693b      	ldr	r3, [r7, #16]
    31e6:	2205      	movs	r2, #5
    31e8:	709a      	strb	r2, [r3, #2]
    31ea:	e021      	b.n	3230 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    31ec:	68bb      	ldr	r3, [r7, #8]
    31ee:	2b02      	cmp	r3, #2
    31f0:	d10e      	bne.n	3210 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    31f2:	693b      	ldr	r3, [r7, #16]
    31f4:	2204      	movs	r2, #4
    31f6:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    31f8:	693b      	ldr	r3, [r7, #16]
    31fa:	781b      	ldrb	r3, [r3, #0]
    31fc:	2b00      	cmp	r3, #0
    31fe:	d103      	bne.n	3208 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3200:	693b      	ldr	r3, [r7, #16]
    3202:	2202      	movs	r2, #2
    3204:	709a      	strb	r2, [r3, #2]
			return;
    3206:	e01a      	b.n	323e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3208:	693b      	ldr	r3, [r7, #16]
    320a:	2201      	movs	r2, #1
    320c:	709a      	strb	r2, [r3, #2]
    320e:	e00f      	b.n	3230 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    3210:	68bb      	ldr	r3, [r7, #8]
    3212:	2b03      	cmp	r3, #3
    3214:	d106      	bne.n	3224 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    3216:	693b      	ldr	r3, [r7, #16]
    3218:	2200      	movs	r2, #0
    321a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    321c:	693b      	ldr	r3, [r7, #16]
    321e:	2205      	movs	r2, #5
    3220:	70da      	strb	r2, [r3, #3]
    3222:	e005      	b.n	3230 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    3224:	693b      	ldr	r3, [r7, #16]
    3226:	2206      	movs	r2, #6
    3228:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    322a:	693b      	ldr	r3, [r7, #16]
    322c:	2206      	movs	r2, #6
    322e:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    3230:	693b      	ldr	r3, [r7, #16]
    3232:	69db      	ldr	r3, [r3, #28]
    3234:	693a      	ldr	r2, [r7, #16]
    3236:	78d1      	ldrb	r1, [r2, #3]
    3238:	687a      	ldr	r2, [r7, #4]
    323a:	7bf8      	ldrb	r0, [r7, #15]
    323c:	4798      	blx	r3
}
    323e:	3718      	adds	r7, #24
    3240:	46bd      	mov	sp, r7
    3242:	bd80      	pop	{r7, pc}
    3244:	00002ea9 	.word	0x00002ea9
    3248:	20000998 	.word	0x20000998
    324c:	000030b1 	.word	0x000030b1
    3250:	0000a789 	.word	0x0000a789

00003254 <usb_d_init>:

int32_t usb_d_init(void)
{
    3254:	b580      	push	{r7, lr}
    3256:	b082      	sub	sp, #8
    3258:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    325a:	4b21      	ldr	r3, [pc, #132]	; (32e0 <usb_d_init+0x8c>)
    325c:	4798      	blx	r3
    325e:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3260:	683b      	ldr	r3, [r7, #0]
    3262:	2b00      	cmp	r3, #0
    3264:	da01      	bge.n	326a <usb_d_init+0x16>
		return rc;
    3266:	683b      	ldr	r3, [r7, #0]
    3268:	e036      	b.n	32d8 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    326a:	2280      	movs	r2, #128	; 0x80
    326c:	2100      	movs	r1, #0
    326e:	481d      	ldr	r0, [pc, #116]	; (32e4 <usb_d_init+0x90>)
    3270:	4b1d      	ldr	r3, [pc, #116]	; (32e8 <usb_d_init+0x94>)
    3272:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3274:	2300      	movs	r3, #0
    3276:	71fb      	strb	r3, [r7, #7]
    3278:	e01e      	b.n	32b8 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    327a:	79fb      	ldrb	r3, [r7, #7]
    327c:	4a19      	ldr	r2, [pc, #100]	; (32e4 <usb_d_init+0x90>)
    327e:	015b      	lsls	r3, r3, #5
    3280:	4413      	add	r3, r2
    3282:	3301      	adds	r3, #1
    3284:	22ff      	movs	r2, #255	; 0xff
    3286:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    3288:	79fb      	ldrb	r3, [r7, #7]
    328a:	4a16      	ldr	r2, [pc, #88]	; (32e4 <usb_d_init+0x90>)
    328c:	015b      	lsls	r3, r3, #5
    328e:	4413      	add	r3, r2
    3290:	3314      	adds	r3, #20
    3292:	4a16      	ldr	r2, [pc, #88]	; (32ec <usb_d_init+0x98>)
    3294:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    3296:	79fb      	ldrb	r3, [r7, #7]
    3298:	4a12      	ldr	r2, [pc, #72]	; (32e4 <usb_d_init+0x90>)
    329a:	015b      	lsls	r3, r3, #5
    329c:	4413      	add	r3, r2
    329e:	3318      	adds	r3, #24
    32a0:	4a12      	ldr	r2, [pc, #72]	; (32ec <usb_d_init+0x98>)
    32a2:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    32a4:	79fb      	ldrb	r3, [r7, #7]
    32a6:	4a0f      	ldr	r2, [pc, #60]	; (32e4 <usb_d_init+0x90>)
    32a8:	015b      	lsls	r3, r3, #5
    32aa:	4413      	add	r3, r2
    32ac:	331c      	adds	r3, #28
    32ae:	4a0f      	ldr	r2, [pc, #60]	; (32ec <usb_d_init+0x98>)
    32b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    32b2:	79fb      	ldrb	r3, [r7, #7]
    32b4:	3301      	adds	r3, #1
    32b6:	71fb      	strb	r3, [r7, #7]
    32b8:	79fb      	ldrb	r3, [r7, #7]
    32ba:	2b03      	cmp	r3, #3
    32bc:	d9dd      	bls.n	327a <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    32be:	490c      	ldr	r1, [pc, #48]	; (32f0 <usb_d_init+0x9c>)
    32c0:	2000      	movs	r0, #0
    32c2:	4b0c      	ldr	r3, [pc, #48]	; (32f4 <usb_d_init+0xa0>)
    32c4:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    32c6:	490c      	ldr	r1, [pc, #48]	; (32f8 <usb_d_init+0xa4>)
    32c8:	2001      	movs	r0, #1
    32ca:	4b0a      	ldr	r3, [pc, #40]	; (32f4 <usb_d_init+0xa0>)
    32cc:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    32ce:	490b      	ldr	r1, [pc, #44]	; (32fc <usb_d_init+0xa8>)
    32d0:	2002      	movs	r0, #2
    32d2:	4b08      	ldr	r3, [pc, #32]	; (32f4 <usb_d_init+0xa0>)
    32d4:	4798      	blx	r3
	return ERR_NONE;
    32d6:	2300      	movs	r3, #0
}
    32d8:	4618      	mov	r0, r3
    32da:	3708      	adds	r7, #8
    32dc:	46bd      	mov	sp, r7
    32de:	bd80      	pop	{r7, pc}
    32e0:	00009fd1 	.word	0x00009fd1
    32e4:	20000998 	.word	0x20000998
    32e8:	0000ea15 	.word	0x0000ea15
    32ec:	00002f7d 	.word	0x00002f7d
    32f0:	00002f99 	.word	0x00002f99
    32f4:	0000ac19 	.word	0x0000ac19
    32f8:	00003061 	.word	0x00003061
    32fc:	00003175 	.word	0x00003175

00003300 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3300:	b580      	push	{r7, lr}
    3302:	b082      	sub	sp, #8
    3304:	af00      	add	r7, sp, #0
    3306:	4603      	mov	r3, r0
    3308:	6039      	str	r1, [r7, #0]
    330a:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    330c:	79fb      	ldrb	r3, [r7, #7]
    330e:	6839      	ldr	r1, [r7, #0]
    3310:	4618      	mov	r0, r3
    3312:	4b03      	ldr	r3, [pc, #12]	; (3320 <usb_d_register_callback+0x20>)
    3314:	4798      	blx	r3
}
    3316:	bf00      	nop
    3318:	3708      	adds	r7, #8
    331a:	46bd      	mov	sp, r7
    331c:	bd80      	pop	{r7, pc}
    331e:	bf00      	nop
    3320:	0000abd1 	.word	0x0000abd1

00003324 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    3324:	b580      	push	{r7, lr}
    3326:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    3328:	4b02      	ldr	r3, [pc, #8]	; (3334 <usb_d_enable+0x10>)
    332a:	4798      	blx	r3
    332c:	4603      	mov	r3, r0
}
    332e:	4618      	mov	r0, r3
    3330:	bd80      	pop	{r7, pc}
    3332:	bf00      	nop
    3334:	0000a0c1 	.word	0x0000a0c1

00003338 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    3338:	b580      	push	{r7, lr}
    333a:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    333c:	4b01      	ldr	r3, [pc, #4]	; (3344 <usb_d_attach+0xc>)
    333e:	4798      	blx	r3
}
    3340:	bf00      	nop
    3342:	bd80      	pop	{r7, pc}
    3344:	0000a145 	.word	0x0000a145

00003348 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    3348:	b580      	push	{r7, lr}
    334a:	b082      	sub	sp, #8
    334c:	af00      	add	r7, sp, #0
    334e:	4603      	mov	r3, r0
    3350:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    3352:	79fb      	ldrb	r3, [r7, #7]
    3354:	4618      	mov	r0, r3
    3356:	4b03      	ldr	r3, [pc, #12]	; (3364 <usb_d_set_address+0x1c>)
    3358:	4798      	blx	r3
}
    335a:	bf00      	nop
    335c:	3708      	adds	r7, #8
    335e:	46bd      	mov	sp, r7
    3360:	bd80      	pop	{r7, pc}
    3362:	bf00      	nop
    3364:	0000a159 	.word	0x0000a159

00003368 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3368:	b580      	push	{r7, lr}
    336a:	b082      	sub	sp, #8
    336c:	af00      	add	r7, sp, #0
    336e:	4603      	mov	r3, r0
    3370:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    3372:	79fb      	ldrb	r3, [r7, #7]
    3374:	b29b      	uxth	r3, r3
    3376:	461a      	mov	r2, r3
    3378:	2100      	movs	r1, #0
    337a:	2000      	movs	r0, #0
    337c:	4b03      	ldr	r3, [pc, #12]	; (338c <usb_d_ep0_init+0x24>)
    337e:	4798      	blx	r3
    3380:	4603      	mov	r3, r0
}
    3382:	4618      	mov	r0, r3
    3384:	3708      	adds	r7, #8
    3386:	46bd      	mov	sp, r7
    3388:	bd80      	pop	{r7, pc}
    338a:	bf00      	nop
    338c:	00003391 	.word	0x00003391

00003390 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3390:	b580      	push	{r7, lr}
    3392:	b086      	sub	sp, #24
    3394:	af00      	add	r7, sp, #0
    3396:	4603      	mov	r3, r0
    3398:	71fb      	strb	r3, [r7, #7]
    339a:	460b      	mov	r3, r1
    339c:	71bb      	strb	r3, [r7, #6]
    339e:	4613      	mov	r3, r2
    33a0:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    33a2:	79fb      	ldrb	r3, [r7, #7]
    33a4:	4618      	mov	r0, r3
    33a6:	4b1e      	ldr	r3, [pc, #120]	; (3420 <usb_d_ep_init+0x90>)
    33a8:	4798      	blx	r3
    33aa:	4603      	mov	r3, r0
    33ac:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    33ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
    33b2:	015b      	lsls	r3, r3, #5
    33b4:	4a1b      	ldr	r2, [pc, #108]	; (3424 <usb_d_ep_init+0x94>)
    33b6:	4413      	add	r3, r2
    33b8:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    33ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
    33be:	2b00      	cmp	r3, #0
    33c0:	db02      	blt.n	33c8 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    33c2:	f06f 0313 	mvn.w	r3, #19
    33c6:	e027      	b.n	3418 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    33c8:	20ff      	movs	r0, #255	; 0xff
    33ca:	4b15      	ldr	r3, [pc, #84]	; (3420 <usb_d_ep_init+0x90>)
    33cc:	4798      	blx	r3
    33ce:	4603      	mov	r3, r0
    33d0:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    33d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    33d6:	2b00      	cmp	r3, #0
    33d8:	da02      	bge.n	33e0 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    33da:	f06f 0314 	mvn.w	r3, #20
    33de:	e01b      	b.n	3418 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    33e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
    33e4:	015b      	lsls	r3, r3, #5
    33e6:	4a0f      	ldr	r2, [pc, #60]	; (3424 <usb_d_ep_init+0x94>)
    33e8:	4413      	add	r3, r2
    33ea:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    33ec:	88ba      	ldrh	r2, [r7, #4]
    33ee:	79b9      	ldrb	r1, [r7, #6]
    33f0:	79fb      	ldrb	r3, [r7, #7]
    33f2:	4618      	mov	r0, r3
    33f4:	4b0c      	ldr	r3, [pc, #48]	; (3428 <usb_d_ep_init+0x98>)
    33f6:	4798      	blx	r3
    33f8:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    33fa:	68fb      	ldr	r3, [r7, #12]
    33fc:	2b00      	cmp	r3, #0
    33fe:	da01      	bge.n	3404 <usb_d_ep_init+0x74>
		return rc;
    3400:	68fb      	ldr	r3, [r7, #12]
    3402:	e009      	b.n	3418 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3404:	693b      	ldr	r3, [r7, #16]
    3406:	79fa      	ldrb	r2, [r7, #7]
    3408:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    340a:	79bb      	ldrb	r3, [r7, #6]
    340c:	f003 0303 	and.w	r3, r3, #3
    3410:	b2da      	uxtb	r2, r3
    3412:	693b      	ldr	r3, [r7, #16]
    3414:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    3416:	2300      	movs	r3, #0
}
    3418:	4618      	mov	r0, r3
    341a:	3718      	adds	r7, #24
    341c:	46bd      	mov	sp, r7
    341e:	bd80      	pop	{r7, pc}
    3420:	00002ea9 	.word	0x00002ea9
    3424:	20000998 	.word	0x20000998
    3428:	0000a1f9 	.word	0x0000a1f9

0000342c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    342c:	b580      	push	{r7, lr}
    342e:	b084      	sub	sp, #16
    3430:	af00      	add	r7, sp, #0
    3432:	4603      	mov	r3, r0
    3434:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3436:	79fb      	ldrb	r3, [r7, #7]
    3438:	4618      	mov	r0, r3
    343a:	4b0d      	ldr	r3, [pc, #52]	; (3470 <usb_d_ep_deinit+0x44>)
    343c:	4798      	blx	r3
    343e:	4603      	mov	r3, r0
    3440:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3442:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3446:	015b      	lsls	r3, r3, #5
    3448:	4a0a      	ldr	r2, [pc, #40]	; (3474 <usb_d_ep_deinit+0x48>)
    344a:	4413      	add	r3, r2
    344c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    344e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3452:	2b00      	cmp	r3, #0
    3454:	db07      	blt.n	3466 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    3456:	79fb      	ldrb	r3, [r7, #7]
    3458:	4618      	mov	r0, r3
    345a:	4b07      	ldr	r3, [pc, #28]	; (3478 <usb_d_ep_deinit+0x4c>)
    345c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    345e:	68bb      	ldr	r3, [r7, #8]
    3460:	22ff      	movs	r2, #255	; 0xff
    3462:	705a      	strb	r2, [r3, #1]
    3464:	e000      	b.n	3468 <usb_d_ep_deinit+0x3c>
		return;
    3466:	bf00      	nop
}
    3468:	3710      	adds	r7, #16
    346a:	46bd      	mov	sp, r7
    346c:	bd80      	pop	{r7, pc}
    346e:	bf00      	nop
    3470:	00002ea9 	.word	0x00002ea9
    3474:	20000998 	.word	0x20000998
    3478:	0000a32d 	.word	0x0000a32d

0000347c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    347c:	b580      	push	{r7, lr}
    347e:	b086      	sub	sp, #24
    3480:	af00      	add	r7, sp, #0
    3482:	4603      	mov	r3, r0
    3484:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3486:	79fb      	ldrb	r3, [r7, #7]
    3488:	4618      	mov	r0, r3
    348a:	4b15      	ldr	r3, [pc, #84]	; (34e0 <usb_d_ep_enable+0x64>)
    348c:	4798      	blx	r3
    348e:	4603      	mov	r3, r0
    3490:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3492:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3496:	015b      	lsls	r3, r3, #5
    3498:	4a12      	ldr	r2, [pc, #72]	; (34e4 <usb_d_ep_enable+0x68>)
    349a:	4413      	add	r3, r2
    349c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    349e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    34a2:	2b00      	cmp	r3, #0
    34a4:	da02      	bge.n	34ac <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    34a6:	f06f 0311 	mvn.w	r3, #17
    34aa:	e014      	b.n	34d6 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    34ac:	693b      	ldr	r3, [r7, #16]
    34ae:	781b      	ldrb	r3, [r3, #0]
    34b0:	2b00      	cmp	r3, #0
    34b2:	d101      	bne.n	34b8 <usb_d_ep_enable+0x3c>
    34b4:	2202      	movs	r2, #2
    34b6:	e000      	b.n	34ba <usb_d_ep_enable+0x3e>
    34b8:	2201      	movs	r2, #1
    34ba:	693b      	ldr	r3, [r7, #16]
    34bc:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    34be:	79fb      	ldrb	r3, [r7, #7]
    34c0:	4618      	mov	r0, r3
    34c2:	4b09      	ldr	r3, [pc, #36]	; (34e8 <usb_d_ep_enable+0x6c>)
    34c4:	4798      	blx	r3
    34c6:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    34c8:	68fb      	ldr	r3, [r7, #12]
    34ca:	2b00      	cmp	r3, #0
    34cc:	da02      	bge.n	34d4 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    34ce:	693b      	ldr	r3, [r7, #16]
    34d0:	2200      	movs	r2, #0
    34d2:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    34d4:	68fb      	ldr	r3, [r7, #12]
}
    34d6:	4618      	mov	r0, r3
    34d8:	3718      	adds	r7, #24
    34da:	46bd      	mov	sp, r7
    34dc:	bd80      	pop	{r7, pc}
    34de:	bf00      	nop
    34e0:	00002ea9 	.word	0x00002ea9
    34e4:	20000998 	.word	0x20000998
    34e8:	0000a411 	.word	0x0000a411

000034ec <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    34ec:	b590      	push	{r4, r7, lr}
    34ee:	b08d      	sub	sp, #52	; 0x34
    34f0:	af02      	add	r7, sp, #8
    34f2:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    34f4:	687b      	ldr	r3, [r7, #4]
    34f6:	7a1b      	ldrb	r3, [r3, #8]
    34f8:	4618      	mov	r0, r3
    34fa:	4b51      	ldr	r3, [pc, #324]	; (3640 <usb_d_ep_transfer+0x154>)
    34fc:	4798      	blx	r3
    34fe:	4603      	mov	r3, r0
    3500:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3502:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3506:	015b      	lsls	r3, r3, #5
    3508:	4a4e      	ldr	r2, [pc, #312]	; (3644 <usb_d_ep_transfer+0x158>)
    350a:	4413      	add	r3, r2
    350c:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    350e:	687b      	ldr	r3, [r7, #4]
    3510:	7a1b      	ldrb	r3, [r3, #8]
    3512:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3516:	2b00      	cmp	r3, #0
    3518:	bf14      	ite	ne
    351a:	2301      	movne	r3, #1
    351c:	2300      	moveq	r3, #0
    351e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3522:	687b      	ldr	r3, [r7, #4]
    3524:	7a5b      	ldrb	r3, [r3, #9]
    3526:	2b00      	cmp	r3, #0
    3528:	bf14      	ite	ne
    352a:	2301      	movne	r3, #1
    352c:	2300      	moveq	r3, #0
    352e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    3532:	687b      	ldr	r3, [r7, #4]
    3534:	685b      	ldr	r3, [r3, #4]
    3536:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    3538:	f997 301f 	ldrsb.w	r3, [r7, #31]
    353c:	2b00      	cmp	r3, #0
    353e:	da02      	bge.n	3546 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3540:	f06f 0311 	mvn.w	r3, #17
    3544:	e077      	b.n	3636 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    3546:	f107 0308 	add.w	r3, r7, #8
    354a:	4618      	mov	r0, r3
    354c:	4b3e      	ldr	r3, [pc, #248]	; (3648 <usb_d_ep_transfer+0x15c>)
    354e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3550:	69bb      	ldr	r3, [r7, #24]
    3552:	789b      	ldrb	r3, [r3, #2]
    3554:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    3556:	7bfb      	ldrb	r3, [r7, #15]
    3558:	b2db      	uxtb	r3, r3
    355a:	2b01      	cmp	r3, #1
    355c:	d10c      	bne.n	3578 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    355e:	69bb      	ldr	r3, [r7, #24]
    3560:	2203      	movs	r2, #3
    3562:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3564:	f107 0308 	add.w	r3, r7, #8
    3568:	4618      	mov	r0, r3
    356a:	4b38      	ldr	r3, [pc, #224]	; (364c <usb_d_ep_transfer+0x160>)
    356c:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    356e:	69bb      	ldr	r3, [r7, #24]
    3570:	781b      	ldrb	r3, [r3, #0]
    3572:	2b00      	cmp	r3, #0
    3574:	d151      	bne.n	361a <usb_d_ep_transfer+0x12e>
    3576:	e017      	b.n	35a8 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3578:	f107 0308 	add.w	r3, r7, #8
    357c:	4618      	mov	r0, r3
    357e:	4b33      	ldr	r3, [pc, #204]	; (364c <usb_d_ep_transfer+0x160>)
    3580:	4798      	blx	r3
		switch (state) {
    3582:	7bfb      	ldrb	r3, [r7, #15]
    3584:	b2db      	uxtb	r3, r3
    3586:	2b05      	cmp	r3, #5
    3588:	d004      	beq.n	3594 <usb_d_ep_transfer+0xa8>
    358a:	2b06      	cmp	r3, #6
    358c:	d004      	beq.n	3598 <usb_d_ep_transfer+0xac>
    358e:	2b00      	cmp	r3, #0
    3590:	d005      	beq.n	359e <usb_d_ep_transfer+0xb2>
    3592:	e007      	b.n	35a4 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3594:	2302      	movs	r3, #2
    3596:	e04e      	b.n	3636 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3598:	f06f 030f 	mvn.w	r3, #15
    359c:	e04b      	b.n	3636 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    359e:	f06f 0312 	mvn.w	r3, #18
    35a2:	e048      	b.n	3636 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    35a4:	2301      	movs	r3, #1
    35a6:	e046      	b.n	3636 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    35a8:	69bb      	ldr	r3, [r7, #24]
    35aa:	7c9b      	ldrb	r3, [r3, #18]
    35ac:	b29a      	uxth	r2, r3
    35ae:	69bb      	ldr	r3, [r7, #24]
    35b0:	7cdb      	ldrb	r3, [r3, #19]
    35b2:	b29b      	uxth	r3, r3
    35b4:	021b      	lsls	r3, r3, #8
    35b6:	b29b      	uxth	r3, r3
    35b8:	4413      	add	r3, r2
    35ba:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    35bc:	8afb      	ldrh	r3, [r7, #22]
    35be:	2b00      	cmp	r3, #0
    35c0:	d10b      	bne.n	35da <usb_d_ep_transfer+0xee>
			dir                 = true;
    35c2:	2301      	movs	r3, #1
    35c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    35c8:	2300      	movs	r3, #0
    35ca:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    35cc:	2301      	movs	r3, #1
    35ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    35d2:	69bb      	ldr	r3, [r7, #24]
    35d4:	2204      	movs	r2, #4
    35d6:	709a      	strb	r2, [r3, #2]
    35d8:	e01f      	b.n	361a <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    35da:	69bb      	ldr	r3, [r7, #24]
    35dc:	7b1b      	ldrb	r3, [r3, #12]
    35de:	f003 0380 	and.w	r3, r3, #128	; 0x80
    35e2:	2b00      	cmp	r3, #0
    35e4:	bf14      	ite	ne
    35e6:	2301      	movne	r3, #1
    35e8:	2300      	moveq	r3, #0
    35ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    35ee:	8afa      	ldrh	r2, [r7, #22]
    35f0:	6a3b      	ldr	r3, [r7, #32]
    35f2:	429a      	cmp	r2, r3
    35f4:	d201      	bcs.n	35fa <usb_d_ep_transfer+0x10e>
				len = req_len;
    35f6:	8afb      	ldrh	r3, [r7, #22]
    35f8:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    35fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    35fe:	2b00      	cmp	r3, #0
    3600:	d008      	beq.n	3614 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3602:	8afa      	ldrh	r2, [r7, #22]
    3604:	6a3b      	ldr	r3, [r7, #32]
    3606:	429a      	cmp	r2, r3
    3608:	bf8c      	ite	hi
    360a:	2301      	movhi	r3, #1
    360c:	2300      	movls	r3, #0
    360e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3612:	e002      	b.n	361a <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3614:	2300      	movs	r3, #0
    3616:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    361a:	687b      	ldr	r3, [r7, #4]
    361c:	7a18      	ldrb	r0, [r3, #8]
    361e:	687b      	ldr	r3, [r7, #4]
    3620:	681a      	ldr	r2, [r3, #0]
    3622:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3626:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    362a:	9300      	str	r3, [sp, #0]
    362c:	6a3b      	ldr	r3, [r7, #32]
    362e:	4c08      	ldr	r4, [pc, #32]	; (3650 <usb_d_ep_transfer+0x164>)
    3630:	47a0      	blx	r4
    3632:	6138      	str	r0, [r7, #16]
	return rc;
    3634:	693b      	ldr	r3, [r7, #16]
}
    3636:	4618      	mov	r0, r3
    3638:	372c      	adds	r7, #44	; 0x2c
    363a:	46bd      	mov	sp, r7
    363c:	bd90      	pop	{r4, r7, pc}
    363e:	bf00      	nop
    3640:	00002ea9 	.word	0x00002ea9
    3644:	20000998 	.word	0x20000998
    3648:	0000b385 	.word	0x0000b385
    364c:	0000b3ab 	.word	0x0000b3ab
    3650:	00002f29 	.word	0x00002f29

00003654 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3654:	b580      	push	{r7, lr}
    3656:	b084      	sub	sp, #16
    3658:	af00      	add	r7, sp, #0
    365a:	4603      	mov	r3, r0
    365c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    365e:	79fb      	ldrb	r3, [r7, #7]
    3660:	4618      	mov	r0, r3
    3662:	4b0e      	ldr	r3, [pc, #56]	; (369c <usb_d_ep_abort+0x48>)
    3664:	4798      	blx	r3
    3666:	4603      	mov	r3, r0
    3668:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    366a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    366e:	015b      	lsls	r3, r3, #5
    3670:	4a0b      	ldr	r2, [pc, #44]	; (36a0 <usb_d_ep_abort+0x4c>)
    3672:	4413      	add	r3, r2
    3674:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3676:	f997 300f 	ldrsb.w	r3, [r7, #15]
    367a:	2b00      	cmp	r3, #0
    367c:	db0a      	blt.n	3694 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    367e:	79fb      	ldrb	r3, [r7, #7]
    3680:	4618      	mov	r0, r3
    3682:	4b08      	ldr	r3, [pc, #32]	; (36a4 <usb_d_ep_abort+0x50>)
    3684:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3686:	68bb      	ldr	r3, [r7, #8]
    3688:	2201      	movs	r2, #1
    368a:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    368c:	68bb      	ldr	r3, [r7, #8]
    368e:	2204      	movs	r2, #4
    3690:	70da      	strb	r2, [r3, #3]
    3692:	e000      	b.n	3696 <usb_d_ep_abort+0x42>
		return;
    3694:	bf00      	nop
}
    3696:	3710      	adds	r7, #16
    3698:	46bd      	mov	sp, r7
    369a:	bd80      	pop	{r7, pc}
    369c:	00002ea9 	.word	0x00002ea9
    36a0:	20000998 	.word	0x20000998
    36a4:	0000ab7d 	.word	0x0000ab7d

000036a8 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    36a8:	b580      	push	{r7, lr}
    36aa:	b086      	sub	sp, #24
    36ac:	af00      	add	r7, sp, #0
    36ae:	4603      	mov	r3, r0
    36b0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    36b2:	79fb      	ldrb	r3, [r7, #7]
    36b4:	4618      	mov	r0, r3
    36b6:	4b1a      	ldr	r3, [pc, #104]	; (3720 <_usb_d_ep_halt_clr+0x78>)
    36b8:	4798      	blx	r3
    36ba:	4603      	mov	r3, r0
    36bc:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    36be:	f997 3017 	ldrsb.w	r3, [r7, #23]
    36c2:	015b      	lsls	r3, r3, #5
    36c4:	4a17      	ldr	r2, [pc, #92]	; (3724 <_usb_d_ep_halt_clr+0x7c>)
    36c6:	4413      	add	r3, r2
    36c8:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    36ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
    36ce:	2b00      	cmp	r3, #0
    36d0:	da02      	bge.n	36d8 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    36d2:	f06f 0311 	mvn.w	r3, #17
    36d6:	e01f      	b.n	3718 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    36d8:	79fb      	ldrb	r3, [r7, #7]
    36da:	2102      	movs	r1, #2
    36dc:	4618      	mov	r0, r3
    36de:	4b12      	ldr	r3, [pc, #72]	; (3728 <_usb_d_ep_halt_clr+0x80>)
    36e0:	4798      	blx	r3
    36e2:	4603      	mov	r3, r0
    36e4:	2b00      	cmp	r3, #0
    36e6:	d016      	beq.n	3716 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    36e8:	79fb      	ldrb	r3, [r7, #7]
    36ea:	2100      	movs	r1, #0
    36ec:	4618      	mov	r0, r3
    36ee:	4b0e      	ldr	r3, [pc, #56]	; (3728 <_usb_d_ep_halt_clr+0x80>)
    36f0:	4798      	blx	r3
    36f2:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    36f4:	68fb      	ldr	r3, [r7, #12]
    36f6:	2b00      	cmp	r3, #0
    36f8:	da01      	bge.n	36fe <_usb_d_ep_halt_clr+0x56>
			return rc;
    36fa:	68fb      	ldr	r3, [r7, #12]
    36fc:	e00c      	b.n	3718 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    36fe:	693b      	ldr	r3, [r7, #16]
    3700:	2201      	movs	r2, #1
    3702:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3704:	693b      	ldr	r3, [r7, #16]
    3706:	2203      	movs	r2, #3
    3708:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    370a:	693b      	ldr	r3, [r7, #16]
    370c:	69db      	ldr	r3, [r3, #28]
    370e:	79f8      	ldrb	r0, [r7, #7]
    3710:	2200      	movs	r2, #0
    3712:	2103      	movs	r1, #3
    3714:	4798      	blx	r3
	}
	return ERR_NONE;
    3716:	2300      	movs	r3, #0
}
    3718:	4618      	mov	r0, r3
    371a:	3718      	adds	r7, #24
    371c:	46bd      	mov	sp, r7
    371e:	bd80      	pop	{r7, pc}
    3720:	00002ea9 	.word	0x00002ea9
    3724:	20000998 	.word	0x20000998
    3728:	0000a789 	.word	0x0000a789

0000372c <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    372c:	b580      	push	{r7, lr}
    372e:	b082      	sub	sp, #8
    3730:	af00      	add	r7, sp, #0
    3732:	4603      	mov	r3, r0
    3734:	460a      	mov	r2, r1
    3736:	71fb      	strb	r3, [r7, #7]
    3738:	4613      	mov	r3, r2
    373a:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    373c:	79bb      	ldrb	r3, [r7, #6]
    373e:	2b00      	cmp	r3, #0
    3740:	d105      	bne.n	374e <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    3742:	79fb      	ldrb	r3, [r7, #7]
    3744:	4618      	mov	r0, r3
    3746:	4b0c      	ldr	r3, [pc, #48]	; (3778 <usb_d_ep_halt+0x4c>)
    3748:	4798      	blx	r3
    374a:	4603      	mov	r3, r0
    374c:	e00f      	b.n	376e <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    374e:	79bb      	ldrb	r3, [r7, #6]
    3750:	2b01      	cmp	r3, #1
    3752:	d106      	bne.n	3762 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3754:	79fb      	ldrb	r3, [r7, #7]
    3756:	2101      	movs	r1, #1
    3758:	4618      	mov	r0, r3
    375a:	4b08      	ldr	r3, [pc, #32]	; (377c <usb_d_ep_halt+0x50>)
    375c:	4798      	blx	r3
    375e:	4603      	mov	r3, r0
    3760:	e005      	b.n	376e <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3762:	79fb      	ldrb	r3, [r7, #7]
    3764:	2102      	movs	r1, #2
    3766:	4618      	mov	r0, r3
    3768:	4b04      	ldr	r3, [pc, #16]	; (377c <usb_d_ep_halt+0x50>)
    376a:	4798      	blx	r3
    376c:	4603      	mov	r3, r0
	}
}
    376e:	4618      	mov	r0, r3
    3770:	3708      	adds	r7, #8
    3772:	46bd      	mov	sp, r7
    3774:	bd80      	pop	{r7, pc}
    3776:	bf00      	nop
    3778:	000036a9 	.word	0x000036a9
    377c:	0000a789 	.word	0x0000a789

00003780 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3780:	b580      	push	{r7, lr}
    3782:	b086      	sub	sp, #24
    3784:	af00      	add	r7, sp, #0
    3786:	4603      	mov	r3, r0
    3788:	603a      	str	r2, [r7, #0]
    378a:	71fb      	strb	r3, [r7, #7]
    378c:	460b      	mov	r3, r1
    378e:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3790:	79fb      	ldrb	r3, [r7, #7]
    3792:	4618      	mov	r0, r3
    3794:	4b16      	ldr	r3, [pc, #88]	; (37f0 <usb_d_ep_register_callback+0x70>)
    3796:	4798      	blx	r3
    3798:	4603      	mov	r3, r0
    379a:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    379c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    37a0:	015b      	lsls	r3, r3, #5
    37a2:	4a14      	ldr	r2, [pc, #80]	; (37f4 <usb_d_ep_register_callback+0x74>)
    37a4:	4413      	add	r3, r2
    37a6:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    37a8:	683b      	ldr	r3, [r7, #0]
    37aa:	2b00      	cmp	r3, #0
    37ac:	d001      	beq.n	37b2 <usb_d_ep_register_callback+0x32>
    37ae:	683b      	ldr	r3, [r7, #0]
    37b0:	e000      	b.n	37b4 <usb_d_ep_register_callback+0x34>
    37b2:	4b11      	ldr	r3, [pc, #68]	; (37f8 <usb_d_ep_register_callback+0x78>)
    37b4:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    37b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    37ba:	2b00      	cmp	r3, #0
    37bc:	db13      	blt.n	37e6 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    37be:	79bb      	ldrb	r3, [r7, #6]
    37c0:	2b01      	cmp	r3, #1
    37c2:	d008      	beq.n	37d6 <usb_d_ep_register_callback+0x56>
    37c4:	2b02      	cmp	r3, #2
    37c6:	d00a      	beq.n	37de <usb_d_ep_register_callback+0x5e>
    37c8:	2b00      	cmp	r3, #0
    37ca:	d000      	beq.n	37ce <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    37cc:	e00c      	b.n	37e8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    37ce:	693b      	ldr	r3, [r7, #16]
    37d0:	68fa      	ldr	r2, [r7, #12]
    37d2:	615a      	str	r2, [r3, #20]
		break;
    37d4:	e008      	b.n	37e8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    37d6:	693b      	ldr	r3, [r7, #16]
    37d8:	68fa      	ldr	r2, [r7, #12]
    37da:	619a      	str	r2, [r3, #24]
		break;
    37dc:	e004      	b.n	37e8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    37de:	693b      	ldr	r3, [r7, #16]
    37e0:	68fa      	ldr	r2, [r7, #12]
    37e2:	61da      	str	r2, [r3, #28]
		break;
    37e4:	e000      	b.n	37e8 <usb_d_ep_register_callback+0x68>
		return;
    37e6:	bf00      	nop
	}
}
    37e8:	3718      	adds	r7, #24
    37ea:	46bd      	mov	sp, r7
    37ec:	bd80      	pop	{r7, pc}
    37ee:	bf00      	nop
    37f0:	00002ea9 	.word	0x00002ea9
    37f4:	20000998 	.word	0x20000998
    37f8:	00002f7d 	.word	0x00002f7d

000037fc <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    37fc:	b480      	push	{r7}
    37fe:	b085      	sub	sp, #20
    3800:	af00      	add	r7, sp, #0
    3802:	4603      	mov	r3, r0
    3804:	60b9      	str	r1, [r7, #8]
    3806:	607a      	str	r2, [r7, #4]
    3808:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    380a:	7bfb      	ldrb	r3, [r7, #15]
    380c:	f083 0301 	eor.w	r3, r3, #1
    3810:	b2db      	uxtb	r3, r3
    3812:	2b00      	cmp	r3, #0
    3814:	d000      	beq.n	3818 <assert+0x1c>
		__asm("BKPT #0");
    3816:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3818:	bf00      	nop
    381a:	3714      	adds	r7, #20
    381c:	46bd      	mov	sp, r7
    381e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3822:	4770      	bx	lr

00003824 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3824:	b480      	push	{r7}
    3826:	b085      	sub	sp, #20
    3828:	af00      	add	r7, sp, #0
    382a:	6078      	str	r0, [r7, #4]
    382c:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    382e:	687b      	ldr	r3, [r7, #4]
    3830:	681b      	ldr	r3, [r3, #0]
    3832:	60fb      	str	r3, [r7, #12]
    3834:	e008      	b.n	3848 <is_list_element+0x24>
		if (it == element) {
    3836:	68fa      	ldr	r2, [r7, #12]
    3838:	683b      	ldr	r3, [r7, #0]
    383a:	429a      	cmp	r2, r3
    383c:	d101      	bne.n	3842 <is_list_element+0x1e>
			return true;
    383e:	2301      	movs	r3, #1
    3840:	e006      	b.n	3850 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    3842:	68fb      	ldr	r3, [r7, #12]
    3844:	681b      	ldr	r3, [r3, #0]
    3846:	60fb      	str	r3, [r7, #12]
    3848:	68fb      	ldr	r3, [r7, #12]
    384a:	2b00      	cmp	r3, #0
    384c:	d1f3      	bne.n	3836 <is_list_element+0x12>
		}
	}

	return false;
    384e:	2300      	movs	r3, #0
}
    3850:	4618      	mov	r0, r3
    3852:	3714      	adds	r7, #20
    3854:	46bd      	mov	sp, r7
    3856:	f85d 7b04 	ldr.w	r7, [sp], #4
    385a:	4770      	bx	lr

0000385c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    385c:	b580      	push	{r7, lr}
    385e:	b082      	sub	sp, #8
    3860:	af00      	add	r7, sp, #0
    3862:	6078      	str	r0, [r7, #4]
    3864:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    3866:	6839      	ldr	r1, [r7, #0]
    3868:	6878      	ldr	r0, [r7, #4]
    386a:	4b0f      	ldr	r3, [pc, #60]	; (38a8 <list_insert_as_head+0x4c>)
    386c:	4798      	blx	r3
    386e:	4603      	mov	r3, r0
    3870:	2b00      	cmp	r3, #0
    3872:	bf14      	ite	ne
    3874:	2301      	movne	r3, #1
    3876:	2300      	moveq	r3, #0
    3878:	b2db      	uxtb	r3, r3
    387a:	f083 0301 	eor.w	r3, r3, #1
    387e:	b2db      	uxtb	r3, r3
    3880:	f003 0301 	and.w	r3, r3, #1
    3884:	b2db      	uxtb	r3, r3
    3886:	2239      	movs	r2, #57	; 0x39
    3888:	4908      	ldr	r1, [pc, #32]	; (38ac <list_insert_as_head+0x50>)
    388a:	4618      	mov	r0, r3
    388c:	4b08      	ldr	r3, [pc, #32]	; (38b0 <list_insert_as_head+0x54>)
    388e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3890:	687b      	ldr	r3, [r7, #4]
    3892:	681a      	ldr	r2, [r3, #0]
    3894:	683b      	ldr	r3, [r7, #0]
    3896:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3898:	687b      	ldr	r3, [r7, #4]
    389a:	683a      	ldr	r2, [r7, #0]
    389c:	601a      	str	r2, [r3, #0]
}
    389e:	bf00      	nop
    38a0:	3708      	adds	r7, #8
    38a2:	46bd      	mov	sp, r7
    38a4:	bd80      	pop	{r7, pc}
    38a6:	bf00      	nop
    38a8:	00003825 	.word	0x00003825
    38ac:	0000ece0 	.word	0x0000ece0
    38b0:	000037fd 	.word	0x000037fd

000038b4 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    38b4:	b480      	push	{r7}
    38b6:	b083      	sub	sp, #12
    38b8:	af00      	add	r7, sp, #0
    38ba:	6078      	str	r0, [r7, #4]
    38bc:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    38be:	687b      	ldr	r3, [r7, #4]
    38c0:	681a      	ldr	r2, [r3, #0]
    38c2:	683b      	ldr	r3, [r7, #0]
    38c4:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    38c6:	687b      	ldr	r3, [r7, #4]
    38c8:	683a      	ldr	r2, [r7, #0]
    38ca:	601a      	str	r2, [r3, #0]
}
    38cc:	bf00      	nop
    38ce:	370c      	adds	r7, #12
    38d0:	46bd      	mov	sp, r7
    38d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    38d6:	4770      	bx	lr

000038d8 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    38d8:	b580      	push	{r7, lr}
    38da:	b084      	sub	sp, #16
    38dc:	af00      	add	r7, sp, #0
    38de:	6078      	str	r0, [r7, #4]
    38e0:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    38e2:	687b      	ldr	r3, [r7, #4]
    38e4:	681b      	ldr	r3, [r3, #0]
    38e6:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    38e8:	6839      	ldr	r1, [r7, #0]
    38ea:	6878      	ldr	r0, [r7, #4]
    38ec:	4b16      	ldr	r3, [pc, #88]	; (3948 <list_insert_at_end+0x70>)
    38ee:	4798      	blx	r3
    38f0:	4603      	mov	r3, r0
    38f2:	2b00      	cmp	r3, #0
    38f4:	bf14      	ite	ne
    38f6:	2301      	movne	r3, #1
    38f8:	2300      	moveq	r3, #0
    38fa:	b2db      	uxtb	r3, r3
    38fc:	f083 0301 	eor.w	r3, r3, #1
    3900:	b2db      	uxtb	r3, r3
    3902:	f003 0301 	and.w	r3, r3, #1
    3906:	b2db      	uxtb	r3, r3
    3908:	224f      	movs	r2, #79	; 0x4f
    390a:	4910      	ldr	r1, [pc, #64]	; (394c <list_insert_at_end+0x74>)
    390c:	4618      	mov	r0, r3
    390e:	4b10      	ldr	r3, [pc, #64]	; (3950 <list_insert_at_end+0x78>)
    3910:	4798      	blx	r3

	if (!list->head) {
    3912:	687b      	ldr	r3, [r7, #4]
    3914:	681b      	ldr	r3, [r3, #0]
    3916:	2b00      	cmp	r3, #0
    3918:	d109      	bne.n	392e <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    391a:	687b      	ldr	r3, [r7, #4]
    391c:	683a      	ldr	r2, [r7, #0]
    391e:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3920:	683b      	ldr	r3, [r7, #0]
    3922:	2200      	movs	r2, #0
    3924:	601a      	str	r2, [r3, #0]
		return;
    3926:	e00c      	b.n	3942 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3928:	68fb      	ldr	r3, [r7, #12]
    392a:	681b      	ldr	r3, [r3, #0]
    392c:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    392e:	68fb      	ldr	r3, [r7, #12]
    3930:	681b      	ldr	r3, [r3, #0]
    3932:	2b00      	cmp	r3, #0
    3934:	d1f8      	bne.n	3928 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3936:	68fb      	ldr	r3, [r7, #12]
    3938:	683a      	ldr	r2, [r7, #0]
    393a:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    393c:	683b      	ldr	r3, [r7, #0]
    393e:	2200      	movs	r2, #0
    3940:	601a      	str	r2, [r3, #0]
}
    3942:	3710      	adds	r7, #16
    3944:	46bd      	mov	sp, r7
    3946:	bd80      	pop	{r7, pc}
    3948:	00003825 	.word	0x00003825
    394c:	0000ece0 	.word	0x0000ece0
    3950:	000037fd 	.word	0x000037fd

00003954 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3954:	b480      	push	{r7}
    3956:	b085      	sub	sp, #20
    3958:	af00      	add	r7, sp, #0
    395a:	6078      	str	r0, [r7, #4]
	if (list->head) {
    395c:	687b      	ldr	r3, [r7, #4]
    395e:	681b      	ldr	r3, [r3, #0]
    3960:	2b00      	cmp	r3, #0
    3962:	d009      	beq.n	3978 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3964:	687b      	ldr	r3, [r7, #4]
    3966:	681b      	ldr	r3, [r3, #0]
    3968:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    396a:	687b      	ldr	r3, [r7, #4]
    396c:	681b      	ldr	r3, [r3, #0]
    396e:	681a      	ldr	r2, [r3, #0]
    3970:	687b      	ldr	r3, [r7, #4]
    3972:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3974:	68fb      	ldr	r3, [r7, #12]
    3976:	e000      	b.n	397a <list_remove_head+0x26>
	}

	return NULL;
    3978:	2300      	movs	r3, #0
}
    397a:	4618      	mov	r0, r3
    397c:	3714      	adds	r7, #20
    397e:	46bd      	mov	sp, r7
    3980:	f85d 7b04 	ldr.w	r7, [sp], #4
    3984:	4770      	bx	lr

00003986 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3986:	b480      	push	{r7}
    3988:	b085      	sub	sp, #20
    398a:	af00      	add	r7, sp, #0
    398c:	6078      	str	r0, [r7, #4]
    398e:	6039      	str	r1, [r7, #0]
	if (!element) {
    3990:	683b      	ldr	r3, [r7, #0]
    3992:	2b00      	cmp	r3, #0
    3994:	d101      	bne.n	399a <list_delete_element+0x14>
		return false;
    3996:	2300      	movs	r3, #0
    3998:	e024      	b.n	39e4 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    399a:	687b      	ldr	r3, [r7, #4]
    399c:	681a      	ldr	r2, [r3, #0]
    399e:	683b      	ldr	r3, [r7, #0]
    39a0:	429a      	cmp	r2, r3
    39a2:	d106      	bne.n	39b2 <list_delete_element+0x2c>
		list->head = list->head->next;
    39a4:	687b      	ldr	r3, [r7, #4]
    39a6:	681b      	ldr	r3, [r3, #0]
    39a8:	681a      	ldr	r2, [r3, #0]
    39aa:	687b      	ldr	r3, [r7, #4]
    39ac:	601a      	str	r2, [r3, #0]
		return true;
    39ae:	2301      	movs	r3, #1
    39b0:	e018      	b.n	39e4 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    39b2:	687b      	ldr	r3, [r7, #4]
    39b4:	681b      	ldr	r3, [r3, #0]
    39b6:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    39b8:	e002      	b.n	39c0 <list_delete_element+0x3a>
			it = it->next;
    39ba:	68fb      	ldr	r3, [r7, #12]
    39bc:	681b      	ldr	r3, [r3, #0]
    39be:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    39c0:	68fb      	ldr	r3, [r7, #12]
    39c2:	2b00      	cmp	r3, #0
    39c4:	d004      	beq.n	39d0 <list_delete_element+0x4a>
    39c6:	68fb      	ldr	r3, [r7, #12]
    39c8:	681a      	ldr	r2, [r3, #0]
    39ca:	683b      	ldr	r3, [r7, #0]
    39cc:	429a      	cmp	r2, r3
    39ce:	d1f4      	bne.n	39ba <list_delete_element+0x34>
		}
		if (it) {
    39d0:	68fb      	ldr	r3, [r7, #12]
    39d2:	2b00      	cmp	r3, #0
    39d4:	d005      	beq.n	39e2 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    39d6:	683b      	ldr	r3, [r7, #0]
    39d8:	681a      	ldr	r2, [r3, #0]
    39da:	68fb      	ldr	r3, [r7, #12]
    39dc:	601a      	str	r2, [r3, #0]
			return true;
    39de:	2301      	movs	r3, #1
    39e0:	e000      	b.n	39e4 <list_delete_element+0x5e>
		}
	}

	return false;
    39e2:	2300      	movs	r3, #0
}
    39e4:	4618      	mov	r0, r3
    39e6:	3714      	adds	r7, #20
    39e8:	46bd      	mov	sp, r7
    39ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    39ee:	4770      	bx	lr

000039f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    39f0:	b480      	push	{r7}
    39f2:	b083      	sub	sp, #12
    39f4:	af00      	add	r7, sp, #0
    39f6:	4603      	mov	r3, r0
    39f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    39fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    39fe:	2b00      	cmp	r3, #0
    3a00:	db0b      	blt.n	3a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a02:	4909      	ldr	r1, [pc, #36]	; (3a28 <__NVIC_EnableIRQ+0x38>)
    3a04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a08:	095b      	lsrs	r3, r3, #5
    3a0a:	88fa      	ldrh	r2, [r7, #6]
    3a0c:	f002 021f 	and.w	r2, r2, #31
    3a10:	2001      	movs	r0, #1
    3a12:	fa00 f202 	lsl.w	r2, r0, r2
    3a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3a1a:	bf00      	nop
    3a1c:	370c      	adds	r7, #12
    3a1e:	46bd      	mov	sp, r7
    3a20:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a24:	4770      	bx	lr
    3a26:	bf00      	nop
    3a28:	e000e100 	.word	0xe000e100

00003a2c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3a2c:	b480      	push	{r7}
    3a2e:	b083      	sub	sp, #12
    3a30:	af00      	add	r7, sp, #0
    3a32:	4603      	mov	r3, r0
    3a34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a3a:	2b00      	cmp	r3, #0
    3a3c:	db10      	blt.n	3a60 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a3e:	490b      	ldr	r1, [pc, #44]	; (3a6c <__NVIC_DisableIRQ+0x40>)
    3a40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a44:	095b      	lsrs	r3, r3, #5
    3a46:	88fa      	ldrh	r2, [r7, #6]
    3a48:	f002 021f 	and.w	r2, r2, #31
    3a4c:	2001      	movs	r0, #1
    3a4e:	fa00 f202 	lsl.w	r2, r0, r2
    3a52:	3320      	adds	r3, #32
    3a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3a58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a5c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3a60:	bf00      	nop
    3a62:	370c      	adds	r7, #12
    3a64:	46bd      	mov	sp, r7
    3a66:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a6a:	4770      	bx	lr
    3a6c:	e000e100 	.word	0xe000e100

00003a70 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3a70:	b480      	push	{r7}
    3a72:	b083      	sub	sp, #12
    3a74:	af00      	add	r7, sp, #0
    3a76:	4603      	mov	r3, r0
    3a78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a7e:	2b00      	cmp	r3, #0
    3a80:	db0c      	blt.n	3a9c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a82:	4909      	ldr	r1, [pc, #36]	; (3aa8 <__NVIC_ClearPendingIRQ+0x38>)
    3a84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a88:	095b      	lsrs	r3, r3, #5
    3a8a:	88fa      	ldrh	r2, [r7, #6]
    3a8c:	f002 021f 	and.w	r2, r2, #31
    3a90:	2001      	movs	r0, #1
    3a92:	fa00 f202 	lsl.w	r2, r0, r2
    3a96:	3360      	adds	r3, #96	; 0x60
    3a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3a9c:	bf00      	nop
    3a9e:	370c      	adds	r7, #12
    3aa0:	46bd      	mov	sp, r7
    3aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3aa6:	4770      	bx	lr
    3aa8:	e000e100 	.word	0xe000e100

00003aac <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3aac:	b480      	push	{r7}
    3aae:	b083      	sub	sp, #12
    3ab0:	af00      	add	r7, sp, #0
    3ab2:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3ab4:	687b      	ldr	r3, [r7, #4]
    3ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3ab8:	095b      	lsrs	r3, r3, #5
    3aba:	f003 0301 	and.w	r3, r3, #1
    3abe:	2b00      	cmp	r3, #0
    3ac0:	bf14      	ite	ne
    3ac2:	2301      	movne	r3, #1
    3ac4:	2300      	moveq	r3, #0
    3ac6:	b2db      	uxtb	r3, r3
}
    3ac8:	4618      	mov	r0, r3
    3aca:	370c      	adds	r7, #12
    3acc:	46bd      	mov	sp, r7
    3ace:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ad2:	4770      	bx	lr

00003ad4 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3ad4:	b480      	push	{r7}
    3ad6:	b083      	sub	sp, #12
    3ad8:	af00      	add	r7, sp, #0
    3ada:	6078      	str	r0, [r7, #4]
    3adc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    3ade:	687b      	ldr	r3, [r7, #4]
    3ae0:	683a      	ldr	r2, [r7, #0]
    3ae2:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ae4:	bf00      	nop
    3ae6:	370c      	adds	r7, #12
    3ae8:	46bd      	mov	sp, r7
    3aea:	f85d 7b04 	ldr.w	r7, [sp], #4
    3aee:	4770      	bx	lr

00003af0 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3af0:	b480      	push	{r7}
    3af2:	b083      	sub	sp, #12
    3af4:	af00      	add	r7, sp, #0
    3af6:	6078      	str	r0, [r7, #4]
    3af8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3afa:	687b      	ldr	r3, [r7, #4]
    3afc:	683a      	ldr	r2, [r7, #0]
    3afe:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b00:	bf00      	nop
    3b02:	370c      	adds	r7, #12
    3b04:	46bd      	mov	sp, r7
    3b06:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b0a:	4770      	bx	lr

00003b0c <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3b0c:	b480      	push	{r7}
    3b0e:	b083      	sub	sp, #12
    3b10:	af00      	add	r7, sp, #0
    3b12:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3b14:	687b      	ldr	r3, [r7, #4]
    3b16:	699b      	ldr	r3, [r3, #24]
    3b18:	f043 0201 	orr.w	r2, r3, #1
    3b1c:	687b      	ldr	r3, [r7, #4]
    3b1e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b20:	bf00      	nop
    3b22:	370c      	adds	r7, #12
    3b24:	46bd      	mov	sp, r7
    3b26:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b2a:	4770      	bx	lr

00003b2c <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3b2c:	b480      	push	{r7}
    3b2e:	b085      	sub	sp, #20
    3b30:	af00      	add	r7, sp, #0
    3b32:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3b34:	687b      	ldr	r3, [r7, #4]
    3b36:	699b      	ldr	r3, [r3, #24]
    3b38:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3b3a:	68fb      	ldr	r3, [r7, #12]
    3b3c:	f003 0301 	and.w	r3, r3, #1
    3b40:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3b42:	68fb      	ldr	r3, [r7, #12]
    3b44:	2b00      	cmp	r3, #0
    3b46:	bf14      	ite	ne
    3b48:	2301      	movne	r3, #1
    3b4a:	2300      	moveq	r3, #0
    3b4c:	b2db      	uxtb	r3, r3
}
    3b4e:	4618      	mov	r0, r3
    3b50:	3714      	adds	r7, #20
    3b52:	46bd      	mov	sp, r7
    3b54:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b58:	4770      	bx	lr

00003b5a <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    3b5a:	b480      	push	{r7}
    3b5c:	b083      	sub	sp, #12
    3b5e:	af00      	add	r7, sp, #0
    3b60:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3b62:	687b      	ldr	r3, [r7, #4]
    3b64:	699b      	ldr	r3, [r3, #24]
    3b66:	f023 0201 	bic.w	r2, r3, #1
    3b6a:	687b      	ldr	r3, [r7, #4]
    3b6c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b6e:	bf00      	nop
    3b70:	370c      	adds	r7, #12
    3b72:	46bd      	mov	sp, r7
    3b74:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b78:	4770      	bx	lr

00003b7a <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    3b7a:	b480      	push	{r7}
    3b7c:	b083      	sub	sp, #12
    3b7e:	af00      	add	r7, sp, #0
    3b80:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3b82:	687b      	ldr	r3, [r7, #4]
    3b84:	699b      	ldr	r3, [r3, #24]
    3b86:	f043 0202 	orr.w	r2, r3, #2
    3b8a:	687b      	ldr	r3, [r7, #4]
    3b8c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b8e:	bf00      	nop
    3b90:	370c      	adds	r7, #12
    3b92:	46bd      	mov	sp, r7
    3b94:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b98:	4770      	bx	lr

00003b9a <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3b9a:	b480      	push	{r7}
    3b9c:	b083      	sub	sp, #12
    3b9e:	af00      	add	r7, sp, #0
    3ba0:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3ba2:	687b      	ldr	r3, [r7, #4]
    3ba4:	699b      	ldr	r3, [r3, #24]
    3ba6:	f023 0202 	bic.w	r2, r3, #2
    3baa:	687b      	ldr	r3, [r7, #4]
    3bac:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bae:	bf00      	nop
    3bb0:	370c      	adds	r7, #12
    3bb2:	46bd      	mov	sp, r7
    3bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bb8:	4770      	bx	lr

00003bba <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3bba:	b480      	push	{r7}
    3bbc:	b083      	sub	sp, #12
    3bbe:	af00      	add	r7, sp, #0
    3bc0:	6078      	str	r0, [r7, #4]
    3bc2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3bc4:	687b      	ldr	r3, [r7, #4]
    3bc6:	699a      	ldr	r2, [r3, #24]
    3bc8:	683b      	ldr	r3, [r7, #0]
    3bca:	431a      	orrs	r2, r3
    3bcc:	687b      	ldr	r3, [r7, #4]
    3bce:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bd0:	bf00      	nop
    3bd2:	370c      	adds	r7, #12
    3bd4:	46bd      	mov	sp, r7
    3bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bda:	4770      	bx	lr

00003bdc <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3bdc:	b480      	push	{r7}
    3bde:	b083      	sub	sp, #12
    3be0:	af00      	add	r7, sp, #0
    3be2:	6078      	str	r0, [r7, #4]
    3be4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3be6:	687b      	ldr	r3, [r7, #4]
    3be8:	683a      	ldr	r2, [r7, #0]
    3bea:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bec:	bf00      	nop
    3bee:	370c      	adds	r7, #12
    3bf0:	46bd      	mov	sp, r7
    3bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bf6:	4770      	bx	lr

00003bf8 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3bf8:	b480      	push	{r7}
    3bfa:	b083      	sub	sp, #12
    3bfc:	af00      	add	r7, sp, #0
    3bfe:	6078      	str	r0, [r7, #4]
    3c00:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    3c02:	687b      	ldr	r3, [r7, #4]
    3c04:	683a      	ldr	r2, [r7, #0]
    3c06:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c08:	bf00      	nop
    3c0a:	370c      	adds	r7, #12
    3c0c:	46bd      	mov	sp, r7
    3c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c12:	4770      	bx	lr

00003c14 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3c14:	b480      	push	{r7}
    3c16:	b083      	sub	sp, #12
    3c18:	af00      	add	r7, sp, #0
    3c1a:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3c1c:	687b      	ldr	r3, [r7, #4]
    3c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    3c20:	4618      	mov	r0, r3
    3c22:	370c      	adds	r7, #12
    3c24:	46bd      	mov	sp, r7
    3c26:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c2a:	4770      	bx	lr

00003c2c <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3c2c:	b480      	push	{r7}
    3c2e:	b083      	sub	sp, #12
    3c30:	af00      	add	r7, sp, #0
    3c32:	6078      	str	r0, [r7, #4]
    3c34:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3c36:	687b      	ldr	r3, [r7, #4]
    3c38:	683a      	ldr	r2, [r7, #0]
    3c3a:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c3c:	bf00      	nop
    3c3e:	370c      	adds	r7, #12
    3c40:	46bd      	mov	sp, r7
    3c42:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c46:	4770      	bx	lr

00003c48 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3c48:	b480      	push	{r7}
    3c4a:	b083      	sub	sp, #12
    3c4c:	af00      	add	r7, sp, #0
    3c4e:	6078      	str	r0, [r7, #4]
    3c50:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3c52:	687b      	ldr	r3, [r7, #4]
    3c54:	683a      	ldr	r2, [r7, #0]
    3c56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c5a:	bf00      	nop
    3c5c:	370c      	adds	r7, #12
    3c5e:	46bd      	mov	sp, r7
    3c60:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c64:	4770      	bx	lr

00003c66 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3c66:	b480      	push	{r7}
    3c68:	b083      	sub	sp, #12
    3c6a:	af00      	add	r7, sp, #0
    3c6c:	6078      	str	r0, [r7, #4]
    3c6e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    3c70:	687b      	ldr	r3, [r7, #4]
    3c72:	683a      	ldr	r2, [r7, #0]
    3c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c78:	bf00      	nop
    3c7a:	370c      	adds	r7, #12
    3c7c:	46bd      	mov	sp, r7
    3c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c82:	4770      	bx	lr

00003c84 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3c84:	b480      	push	{r7}
    3c86:	b083      	sub	sp, #12
    3c88:	af00      	add	r7, sp, #0
    3c8a:	6078      	str	r0, [r7, #4]
    3c8c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    3c8e:	687b      	ldr	r3, [r7, #4]
    3c90:	683a      	ldr	r2, [r7, #0]
    3c92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c96:	bf00      	nop
    3c98:	370c      	adds	r7, #12
    3c9a:	46bd      	mov	sp, r7
    3c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ca0:	4770      	bx	lr

00003ca2 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    3ca2:	b480      	push	{r7}
    3ca4:	b083      	sub	sp, #12
    3ca6:	af00      	add	r7, sp, #0
    3ca8:	6078      	str	r0, [r7, #4]
    3caa:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    3cac:	687b      	ldr	r3, [r7, #4]
    3cae:	683a      	ldr	r2, [r7, #0]
    3cb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3cb4:	bf00      	nop
    3cb6:	370c      	adds	r7, #12
    3cb8:	46bd      	mov	sp, r7
    3cba:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cbe:	4770      	bx	lr

00003cc0 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    3cc0:	b480      	push	{r7}
    3cc2:	b083      	sub	sp, #12
    3cc4:	af00      	add	r7, sp, #0
    3cc6:	6078      	str	r0, [r7, #4]
    3cc8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3cca:	687b      	ldr	r3, [r7, #4]
    3ccc:	683a      	ldr	r2, [r7, #0]
    3cce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3cd2:	bf00      	nop
    3cd4:	370c      	adds	r7, #12
    3cd6:	46bd      	mov	sp, r7
    3cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cdc:	4770      	bx	lr

00003cde <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    3cde:	b480      	push	{r7}
    3ce0:	b083      	sub	sp, #12
    3ce2:	af00      	add	r7, sp, #0
    3ce4:	6078      	str	r0, [r7, #4]
    3ce6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3ce8:	687b      	ldr	r3, [r7, #4]
    3cea:	683a      	ldr	r2, [r7, #0]
    3cec:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3cf0:	bf00      	nop
    3cf2:	370c      	adds	r7, #12
    3cf4:	46bd      	mov	sp, r7
    3cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cfa:	4770      	bx	lr

00003cfc <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3cfc:	b480      	push	{r7}
    3cfe:	b083      	sub	sp, #12
    3d00:	af00      	add	r7, sp, #0
    3d02:	6078      	str	r0, [r7, #4]
    3d04:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3d06:	687b      	ldr	r3, [r7, #4]
    3d08:	683a      	ldr	r2, [r7, #0]
    3d0a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d0e:	bf00      	nop
    3d10:	370c      	adds	r7, #12
    3d12:	46bd      	mov	sp, r7
    3d14:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d18:	4770      	bx	lr

00003d1a <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    3d1a:	b480      	push	{r7}
    3d1c:	b083      	sub	sp, #12
    3d1e:	af00      	add	r7, sp, #0
    3d20:	6078      	str	r0, [r7, #4]
    3d22:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3d24:	687b      	ldr	r3, [r7, #4]
    3d26:	683a      	ldr	r2, [r7, #0]
    3d28:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d2c:	bf00      	nop
    3d2e:	370c      	adds	r7, #12
    3d30:	46bd      	mov	sp, r7
    3d32:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d36:	4770      	bx	lr

00003d38 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    3d38:	b480      	push	{r7}
    3d3a:	b083      	sub	sp, #12
    3d3c:	af00      	add	r7, sp, #0
    3d3e:	6078      	str	r0, [r7, #4]
    3d40:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    3d42:	687b      	ldr	r3, [r7, #4]
    3d44:	683a      	ldr	r2, [r7, #0]
    3d46:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d4a:	bf00      	nop
    3d4c:	370c      	adds	r7, #12
    3d4e:	46bd      	mov	sp, r7
    3d50:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d54:	4770      	bx	lr
	...

00003d58 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    3d58:	b580      	push	{r7, lr}
    3d5a:	b082      	sub	sp, #8
    3d5c:	af00      	add	r7, sp, #0
    3d5e:	6078      	str	r0, [r7, #4]
    3d60:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    3d62:	687b      	ldr	r3, [r7, #4]
    3d64:	683a      	ldr	r2, [r7, #0]
    3d66:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    3d68:	687b      	ldr	r3, [r7, #4]
    3d6a:	681b      	ldr	r3, [r3, #0]
    3d6c:	4618      	mov	r0, r3
    3d6e:	4b56      	ldr	r3, [pc, #344]	; (3ec8 <_can_async_init+0x170>)
    3d70:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3d72:	bf00      	nop
    3d74:	687b      	ldr	r3, [r7, #4]
    3d76:	681b      	ldr	r3, [r3, #0]
    3d78:	4618      	mov	r0, r3
    3d7a:	4b54      	ldr	r3, [pc, #336]	; (3ecc <_can_async_init+0x174>)
    3d7c:	4798      	blx	r3
    3d7e:	4603      	mov	r3, r0
    3d80:	f083 0301 	eor.w	r3, r3, #1
    3d84:	b2db      	uxtb	r3, r3
    3d86:	2b00      	cmp	r3, #0
    3d88:	d1f4      	bne.n	3d74 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    3d8a:	687b      	ldr	r3, [r7, #4]
    3d8c:	681b      	ldr	r3, [r3, #0]
    3d8e:	4618      	mov	r0, r3
    3d90:	4b4f      	ldr	r3, [pc, #316]	; (3ed0 <_can_async_init+0x178>)
    3d92:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3d94:	683b      	ldr	r3, [r7, #0]
    3d96:	4a4f      	ldr	r2, [pc, #316]	; (3ed4 <_can_async_init+0x17c>)
    3d98:	4293      	cmp	r3, r2
    3d9a:	d17c      	bne.n	3e96 <_can_async_init+0x13e>
		_can1_dev    = dev;
    3d9c:	4a4e      	ldr	r2, [pc, #312]	; (3ed8 <_can_async_init+0x180>)
    3d9e:	687b      	ldr	r3, [r7, #4]
    3da0:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3da2:	687b      	ldr	r3, [r7, #4]
    3da4:	4a4d      	ldr	r2, [pc, #308]	; (3edc <_can_async_init+0x184>)
    3da6:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3da8:	687b      	ldr	r3, [r7, #4]
    3daa:	681b      	ldr	r3, [r3, #0]
    3dac:	f44f 7100 	mov.w	r1, #512	; 0x200
    3db0:	4618      	mov	r0, r3
    3db2:	4b4b      	ldr	r3, [pc, #300]	; (3ee0 <_can_async_init+0x188>)
    3db4:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3db6:	687b      	ldr	r3, [r7, #4]
    3db8:	681b      	ldr	r3, [r3, #0]
    3dba:	2102      	movs	r1, #2
    3dbc:	4618      	mov	r0, r3
    3dbe:	4b49      	ldr	r3, [pc, #292]	; (3ee4 <_can_async_init+0x18c>)
    3dc0:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3dc2:	687b      	ldr	r3, [r7, #4]
    3dc4:	681b      	ldr	r3, [r3, #0]
    3dc6:	f640 2103 	movw	r1, #2563	; 0xa03
    3dca:	4618      	mov	r0, r3
    3dcc:	4b46      	ldr	r3, [pc, #280]	; (3ee8 <_can_async_init+0x190>)
    3dce:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    3dd0:	687b      	ldr	r3, [r7, #4]
    3dd2:	681b      	ldr	r3, [r3, #0]
    3dd4:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    3dd8:	4618      	mov	r0, r3
    3dda:	4b44      	ldr	r3, [pc, #272]	; (3eec <_can_async_init+0x194>)
    3ddc:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    3dde:	687b      	ldr	r3, [r7, #4]
    3de0:	681a      	ldr	r2, [r3, #0]
    3de2:	4b43      	ldr	r3, [pc, #268]	; (3ef0 <_can_async_init+0x198>)
    3de4:	b29b      	uxth	r3, r3
    3de6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3dee:	4619      	mov	r1, r3
    3df0:	4610      	mov	r0, r2
    3df2:	4b40      	ldr	r3, [pc, #256]	; (3ef4 <_can_async_init+0x19c>)
    3df4:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3df6:	687b      	ldr	r3, [r7, #4]
    3df8:	681b      	ldr	r3, [r3, #0]
    3dfa:	2107      	movs	r1, #7
    3dfc:	4618      	mov	r0, r3
    3dfe:	4b3e      	ldr	r3, [pc, #248]	; (3ef8 <_can_async_init+0x1a0>)
    3e00:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    3e02:	687b      	ldr	r3, [r7, #4]
    3e04:	681b      	ldr	r3, [r3, #0]
    3e06:	2107      	movs	r1, #7
    3e08:	4618      	mov	r0, r3
    3e0a:	4b3c      	ldr	r3, [pc, #240]	; (3efc <_can_async_init+0x1a4>)
    3e0c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    3e0e:	687b      	ldr	r3, [r7, #4]
    3e10:	681a      	ldr	r2, [r3, #0]
    3e12:	4b3b      	ldr	r3, [pc, #236]	; (3f00 <_can_async_init+0x1a8>)
    3e14:	b29b      	uxth	r3, r3
    3e16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3e1a:	4619      	mov	r1, r3
    3e1c:	4610      	mov	r0, r2
    3e1e:	4b39      	ldr	r3, [pc, #228]	; (3f04 <_can_async_init+0x1ac>)
    3e20:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    3e22:	687b      	ldr	r3, [r7, #4]
    3e24:	681a      	ldr	r2, [r3, #0]
    3e26:	4b38      	ldr	r3, [pc, #224]	; (3f08 <_can_async_init+0x1b0>)
    3e28:	b29b      	uxth	r3, r3
    3e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3e2e:	4619      	mov	r1, r3
    3e30:	4610      	mov	r0, r2
    3e32:	4b36      	ldr	r3, [pc, #216]	; (3f0c <_can_async_init+0x1b4>)
    3e34:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    3e36:	687b      	ldr	r3, [r7, #4]
    3e38:	681b      	ldr	r3, [r3, #0]
    3e3a:	2108      	movs	r1, #8
    3e3c:	4618      	mov	r0, r3
    3e3e:	4b34      	ldr	r3, [pc, #208]	; (3f10 <_can_async_init+0x1b8>)
    3e40:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    3e42:	687b      	ldr	r3, [r7, #4]
    3e44:	681a      	ldr	r2, [r3, #0]
    3e46:	4b33      	ldr	r3, [pc, #204]	; (3f14 <_can_async_init+0x1bc>)
    3e48:	b29b      	uxth	r3, r3
    3e4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    3e4e:	4619      	mov	r1, r3
    3e50:	4610      	mov	r0, r2
    3e52:	4b31      	ldr	r3, [pc, #196]	; (3f18 <_can_async_init+0x1c0>)
    3e54:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3e56:	687b      	ldr	r3, [r7, #4]
    3e58:	681a      	ldr	r2, [r3, #0]
    3e5a:	4b30      	ldr	r3, [pc, #192]	; (3f1c <_can_async_init+0x1c4>)
    3e5c:	b29b      	uxth	r3, r3
    3e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3e62:	4619      	mov	r1, r3
    3e64:	4610      	mov	r0, r2
    3e66:	4b2e      	ldr	r3, [pc, #184]	; (3f20 <_can_async_init+0x1c8>)
    3e68:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3e6a:	687b      	ldr	r3, [r7, #4]
    3e6c:	681b      	ldr	r3, [r3, #0]
    3e6e:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    3e72:	4618      	mov	r0, r3
    3e74:	4b2b      	ldr	r3, [pc, #172]	; (3f24 <_can_async_init+0x1cc>)
    3e76:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3e78:	204f      	movs	r0, #79	; 0x4f
    3e7a:	4b2b      	ldr	r3, [pc, #172]	; (3f28 <_can_async_init+0x1d0>)
    3e7c:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    3e7e:	204f      	movs	r0, #79	; 0x4f
    3e80:	4b2a      	ldr	r3, [pc, #168]	; (3f2c <_can_async_init+0x1d4>)
    3e82:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3e84:	204f      	movs	r0, #79	; 0x4f
    3e86:	4b2a      	ldr	r3, [pc, #168]	; (3f30 <_can_async_init+0x1d8>)
    3e88:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3e8a:	687b      	ldr	r3, [r7, #4]
    3e8c:	681b      	ldr	r3, [r3, #0]
    3e8e:	2101      	movs	r1, #1
    3e90:	4618      	mov	r0, r3
    3e92:	4b28      	ldr	r3, [pc, #160]	; (3f34 <_can_async_init+0x1dc>)
    3e94:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3e96:	687b      	ldr	r3, [r7, #4]
    3e98:	681b      	ldr	r3, [r3, #0]
    3e9a:	4618      	mov	r0, r3
    3e9c:	4b26      	ldr	r3, [pc, #152]	; (3f38 <_can_async_init+0x1e0>)
    3e9e:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3ea0:	687b      	ldr	r3, [r7, #4]
    3ea2:	681b      	ldr	r3, [r3, #0]
    3ea4:	4618      	mov	r0, r3
    3ea6:	4b25      	ldr	r3, [pc, #148]	; (3f3c <_can_async_init+0x1e4>)
    3ea8:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3eaa:	bf00      	nop
    3eac:	687b      	ldr	r3, [r7, #4]
    3eae:	681b      	ldr	r3, [r3, #0]
    3eb0:	4618      	mov	r0, r3
    3eb2:	4b06      	ldr	r3, [pc, #24]	; (3ecc <_can_async_init+0x174>)
    3eb4:	4798      	blx	r3
    3eb6:	4603      	mov	r3, r0
    3eb8:	2b00      	cmp	r3, #0
    3eba:	d1f7      	bne.n	3eac <_can_async_init+0x154>
	};

	return ERR_NONE;
    3ebc:	2300      	movs	r3, #0
}
    3ebe:	4618      	mov	r0, r3
    3ec0:	3708      	adds	r7, #8
    3ec2:	46bd      	mov	sp, r7
    3ec4:	bd80      	pop	{r7, pc}
    3ec6:	bf00      	nop
    3ec8:	00003b0d 	.word	0x00003b0d
    3ecc:	00003b2d 	.word	0x00003b2d
    3ed0:	00003b7b 	.word	0x00003b7b
    3ed4:	42000400 	.word	0x42000400
    3ed8:	20000ab8 	.word	0x20000ab8
    3edc:	20000004 	.word	0x20000004
    3ee0:	00003bbb 	.word	0x00003bbb
    3ee4:	00003ad5 	.word	0x00003ad5
    3ee8:	00003bdd 	.word	0x00003bdd
    3eec:	00003af1 	.word	0x00003af1
    3ef0:	2000189c 	.word	0x2000189c
    3ef4:	00003cc1 	.word	0x00003cc1
    3ef8:	00003cdf 	.word	0x00003cdf
    3efc:	00003d1b 	.word	0x00003d1b
    3f00:	20001854 	.word	0x20001854
    3f04:	00003cfd 	.word	0x00003cfd
    3f08:	20000a18 	.word	0x20000a18
    3f0c:	00003d39 	.word	0x00003d39
    3f10:	00003c49 	.word	0x00003c49
    3f14:	20000a28 	.word	0x20000a28
    3f18:	00003c67 	.word	0x00003c67
    3f1c:	20000aa8 	.word	0x20000aa8
    3f20:	00003c85 	.word	0x00003c85
    3f24:	00003ca3 	.word	0x00003ca3
    3f28:	00003a2d 	.word	0x00003a2d
    3f2c:	00003a71 	.word	0x00003a71
    3f30:	000039f1 	.word	0x000039f1
    3f34:	00003c2d 	.word	0x00003c2d
    3f38:	00003b9b 	.word	0x00003b9b
    3f3c:	00003b5b 	.word	0x00003b5b

00003f40 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    3f40:	b590      	push	{r4, r7, lr}
    3f42:	b083      	sub	sp, #12
    3f44:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    3f46:	4b2c      	ldr	r3, [pc, #176]	; (3ff8 <CAN1_Handler+0xb8>)
    3f48:	681b      	ldr	r3, [r3, #0]
    3f4a:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    3f4c:	687b      	ldr	r3, [r7, #4]
    3f4e:	681b      	ldr	r3, [r3, #0]
    3f50:	4618      	mov	r0, r3
    3f52:	4b2a      	ldr	r3, [pc, #168]	; (3ffc <CAN1_Handler+0xbc>)
    3f54:	4798      	blx	r3
    3f56:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    3f58:	683b      	ldr	r3, [r7, #0]
    3f5a:	f003 0301 	and.w	r3, r3, #1
    3f5e:	2b00      	cmp	r3, #0
    3f60:	d003      	beq.n	3f6a <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    3f62:	687b      	ldr	r3, [r7, #4]
    3f64:	689b      	ldr	r3, [r3, #8]
    3f66:	6878      	ldr	r0, [r7, #4]
    3f68:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    3f6a:	683b      	ldr	r3, [r7, #0]
    3f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3f70:	2b00      	cmp	r3, #0
    3f72:	d003      	beq.n	3f7c <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    3f74:	687b      	ldr	r3, [r7, #4]
    3f76:	685b      	ldr	r3, [r3, #4]
    3f78:	6878      	ldr	r0, [r7, #4]
    3f7a:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    3f7c:	683b      	ldr	r3, [r7, #0]
    3f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3f82:	2b00      	cmp	r3, #0
    3f84:	d004      	beq.n	3f90 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    3f86:	687b      	ldr	r3, [r7, #4]
    3f88:	68db      	ldr	r3, [r3, #12]
    3f8a:	2103      	movs	r1, #3
    3f8c:	6878      	ldr	r0, [r7, #4]
    3f8e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    3f90:	683b      	ldr	r3, [r7, #0]
    3f92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    3f96:	2b00      	cmp	r3, #0
    3f98:	d004      	beq.n	3fa4 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    3f9a:	687b      	ldr	r3, [r7, #4]
    3f9c:	68db      	ldr	r3, [r3, #12]
    3f9e:	2100      	movs	r1, #0
    3fa0:	6878      	ldr	r0, [r7, #4]
    3fa2:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    3fa4:	683b      	ldr	r3, [r7, #0]
    3fa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    3faa:	2b00      	cmp	r3, #0
    3fac:	d00f      	beq.n	3fce <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    3fae:	687b      	ldr	r3, [r7, #4]
    3fb0:	68dc      	ldr	r4, [r3, #12]
    3fb2:	687b      	ldr	r3, [r7, #4]
    3fb4:	681b      	ldr	r3, [r3, #0]
    3fb6:	4618      	mov	r0, r3
    3fb8:	4b11      	ldr	r3, [pc, #68]	; (4000 <CAN1_Handler+0xc0>)
    3fba:	4798      	blx	r3
    3fbc:	4603      	mov	r3, r0
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d001      	beq.n	3fc6 <CAN1_Handler+0x86>
    3fc2:	2302      	movs	r3, #2
    3fc4:	e000      	b.n	3fc8 <CAN1_Handler+0x88>
    3fc6:	2301      	movs	r3, #1
    3fc8:	4619      	mov	r1, r3
    3fca:	6878      	ldr	r0, [r7, #4]
    3fcc:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    3fce:	683b      	ldr	r3, [r7, #0]
    3fd0:	f003 0308 	and.w	r3, r3, #8
    3fd4:	2b00      	cmp	r3, #0
    3fd6:	d004      	beq.n	3fe2 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    3fd8:	687b      	ldr	r3, [r7, #4]
    3fda:	68db      	ldr	r3, [r3, #12]
    3fdc:	2104      	movs	r1, #4
    3fde:	6878      	ldr	r0, [r7, #4]
    3fe0:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    3fe2:	687b      	ldr	r3, [r7, #4]
    3fe4:	681b      	ldr	r3, [r3, #0]
    3fe6:	6839      	ldr	r1, [r7, #0]
    3fe8:	4618      	mov	r0, r3
    3fea:	4b06      	ldr	r3, [pc, #24]	; (4004 <CAN1_Handler+0xc4>)
    3fec:	4798      	blx	r3
}
    3fee:	bf00      	nop
    3ff0:	370c      	adds	r7, #12
    3ff2:	46bd      	mov	sp, r7
    3ff4:	bd90      	pop	{r4, r7, pc}
    3ff6:	bf00      	nop
    3ff8:	20000ab8 	.word	0x20000ab8
    3ffc:	00003c15 	.word	0x00003c15
    4000:	00003aad 	.word	0x00003aad
    4004:	00003bf9 	.word	0x00003bf9

00004008 <__NVIC_SetPendingIRQ>:
{
    4008:	b480      	push	{r7}
    400a:	b083      	sub	sp, #12
    400c:	af00      	add	r7, sp, #0
    400e:	4603      	mov	r3, r0
    4010:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4016:	2b00      	cmp	r3, #0
    4018:	db0c      	blt.n	4034 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    401a:	4909      	ldr	r1, [pc, #36]	; (4040 <__NVIC_SetPendingIRQ+0x38>)
    401c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4020:	095b      	lsrs	r3, r3, #5
    4022:	88fa      	ldrh	r2, [r7, #6]
    4024:	f002 021f 	and.w	r2, r2, #31
    4028:	2001      	movs	r0, #1
    402a:	fa00 f202 	lsl.w	r2, r0, r2
    402e:	3340      	adds	r3, #64	; 0x40
    4030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4034:	bf00      	nop
    4036:	370c      	adds	r7, #12
    4038:	46bd      	mov	sp, r7
    403a:	f85d 7b04 	ldr.w	r7, [sp], #4
    403e:	4770      	bx	lr
    4040:	e000e100 	.word	0xe000e100

00004044 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    4044:	b580      	push	{r7, lr}
    4046:	b082      	sub	sp, #8
    4048:	af00      	add	r7, sp, #0
    404a:	4603      	mov	r3, r0
    404c:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    404e:	79fb      	ldrb	r3, [r7, #7]
    4050:	b21b      	sxth	r3, r3
    4052:	4618      	mov	r0, r3
    4054:	4b02      	ldr	r3, [pc, #8]	; (4060 <_irq_set+0x1c>)
    4056:	4798      	blx	r3
}
    4058:	bf00      	nop
    405a:	3708      	adds	r7, #8
    405c:	46bd      	mov	sp, r7
    405e:	bd80      	pop	{r7, pc}
    4060:	00004009 	.word	0x00004009

00004064 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    4064:	b480      	push	{r7}
    4066:	b083      	sub	sp, #12
    4068:	af00      	add	r7, sp, #0
    406a:	4603      	mov	r3, r0
    406c:	6039      	str	r1, [r7, #0]
    406e:	80fb      	strh	r3, [r7, #6]
    4070:	4613      	mov	r3, r2
    4072:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4074:	797b      	ldrb	r3, [r7, #5]
    4076:	3b04      	subs	r3, #4
    4078:	2b05      	cmp	r3, #5
    407a:	d86b      	bhi.n	4154 <_get_cycles_for_us_internal+0xf0>
    407c:	a201      	add	r2, pc, #4	; (adr r2, 4084 <_get_cycles_for_us_internal+0x20>)
    407e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4082:	bf00      	nop
    4084:	00004133 	.word	0x00004133
    4088:	00004113 	.word	0x00004113
    408c:	000040f5 	.word	0x000040f5
    4090:	000040d7 	.word	0x000040d7
    4094:	000040b9 	.word	0x000040b9
    4098:	0000409d 	.word	0x0000409d
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    409c:	88fb      	ldrh	r3, [r7, #6]
    409e:	683a      	ldr	r2, [r7, #0]
    40a0:	4935      	ldr	r1, [pc, #212]	; (4178 <_get_cycles_for_us_internal+0x114>)
    40a2:	fba1 1202 	umull	r1, r2, r1, r2
    40a6:	0c92      	lsrs	r2, r2, #18
    40a8:	fb02 f303 	mul.w	r3, r2, r3
    40ac:	3302      	adds	r3, #2
    40ae:	4a33      	ldr	r2, [pc, #204]	; (417c <_get_cycles_for_us_internal+0x118>)
    40b0:	fba2 2303 	umull	r2, r3, r2, r3
    40b4:	085b      	lsrs	r3, r3, #1
    40b6:	e059      	b.n	416c <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    40b8:	88fb      	ldrh	r3, [r7, #6]
    40ba:	683a      	ldr	r2, [r7, #0]
    40bc:	0952      	lsrs	r2, r2, #5
    40be:	4930      	ldr	r1, [pc, #192]	; (4180 <_get_cycles_for_us_internal+0x11c>)
    40c0:	fba1 1202 	umull	r1, r2, r1, r2
    40c4:	09d2      	lsrs	r2, r2, #7
    40c6:	fb02 f303 	mul.w	r3, r2, r3
    40ca:	331d      	adds	r3, #29
    40cc:	4a2d      	ldr	r2, [pc, #180]	; (4184 <_get_cycles_for_us_internal+0x120>)
    40ce:	fba2 2303 	umull	r2, r3, r2, r3
    40d2:	091b      	lsrs	r3, r3, #4
    40d4:	e04a      	b.n	416c <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    40d6:	88fb      	ldrh	r3, [r7, #6]
    40d8:	683a      	ldr	r2, [r7, #0]
    40da:	492b      	ldr	r1, [pc, #172]	; (4188 <_get_cycles_for_us_internal+0x124>)
    40dc:	fba1 1202 	umull	r1, r2, r1, r2
    40e0:	0b52      	lsrs	r2, r2, #13
    40e2:	fb02 f303 	mul.w	r3, r2, r3
    40e6:	f203 132b 	addw	r3, r3, #299	; 0x12b
    40ea:	4a28      	ldr	r2, [pc, #160]	; (418c <_get_cycles_for_us_internal+0x128>)
    40ec:	fba2 2303 	umull	r2, r3, r2, r3
    40f0:	095b      	lsrs	r3, r3, #5
    40f2:	e03b      	b.n	416c <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    40f4:	88fb      	ldrh	r3, [r7, #6]
    40f6:	683a      	ldr	r2, [r7, #0]
    40f8:	4925      	ldr	r1, [pc, #148]	; (4190 <_get_cycles_for_us_internal+0x12c>)
    40fa:	fba1 1202 	umull	r1, r2, r1, r2
    40fe:	0992      	lsrs	r2, r2, #6
    4100:	fb02 f303 	mul.w	r3, r2, r3
    4104:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4108:	4a22      	ldr	r2, [pc, #136]	; (4194 <_get_cycles_for_us_internal+0x130>)
    410a:	fba2 2303 	umull	r2, r3, r2, r3
    410e:	099b      	lsrs	r3, r3, #6
    4110:	e02c      	b.n	416c <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    4112:	88fb      	ldrh	r3, [r7, #6]
    4114:	683a      	ldr	r2, [r7, #0]
    4116:	4920      	ldr	r1, [pc, #128]	; (4198 <_get_cycles_for_us_internal+0x134>)
    4118:	fba1 1202 	umull	r1, r2, r1, r2
    411c:	0952      	lsrs	r2, r2, #5
    411e:	fb02 f303 	mul.w	r3, r2, r3
    4122:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    4126:	332f      	adds	r3, #47	; 0x2f
    4128:	4a1c      	ldr	r2, [pc, #112]	; (419c <_get_cycles_for_us_internal+0x138>)
    412a:	fba2 2303 	umull	r2, r3, r2, r3
    412e:	0b5b      	lsrs	r3, r3, #13
    4130:	e01c      	b.n	416c <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    4132:	88fb      	ldrh	r3, [r7, #6]
    4134:	683a      	ldr	r2, [r7, #0]
    4136:	491a      	ldr	r1, [pc, #104]	; (41a0 <_get_cycles_for_us_internal+0x13c>)
    4138:	fba1 1202 	umull	r1, r2, r1, r2
    413c:	08d2      	lsrs	r2, r2, #3
    413e:	fb02 f303 	mul.w	r3, r2, r3
    4142:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    4146:	f203 33df 	addw	r3, r3, #991	; 0x3df
    414a:	4a16      	ldr	r2, [pc, #88]	; (41a4 <_get_cycles_for_us_internal+0x140>)
    414c:	fba2 2303 	umull	r2, r3, r2, r3
    4150:	0c5b      	lsrs	r3, r3, #17
    4152:	e00b      	b.n	416c <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    4154:	88fb      	ldrh	r3, [r7, #6]
    4156:	683a      	ldr	r2, [r7, #0]
    4158:	fb02 f303 	mul.w	r3, r2, r3
    415c:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    4160:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    4164:	4a10      	ldr	r2, [pc, #64]	; (41a8 <_get_cycles_for_us_internal+0x144>)
    4166:	fba2 2303 	umull	r2, r3, r2, r3
    416a:	0c9b      	lsrs	r3, r3, #18
	}
}
    416c:	4618      	mov	r0, r3
    416e:	370c      	adds	r7, #12
    4170:	46bd      	mov	sp, r7
    4172:	f85d 7b04 	ldr.w	r7, [sp], #4
    4176:	4770      	bx	lr
    4178:	431bde83 	.word	0x431bde83
    417c:	aaaaaaab 	.word	0xaaaaaaab
    4180:	0a7c5ac5 	.word	0x0a7c5ac5
    4184:	88888889 	.word	0x88888889
    4188:	d1b71759 	.word	0xd1b71759
    418c:	1b4e81b5 	.word	0x1b4e81b5
    4190:	10624dd3 	.word	0x10624dd3
    4194:	057619f1 	.word	0x057619f1
    4198:	51eb851f 	.word	0x51eb851f
    419c:	45e7b273 	.word	0x45e7b273
    41a0:	cccccccd 	.word	0xcccccccd
    41a4:	6fd91d85 	.word	0x6fd91d85
    41a8:	165e9f81 	.word	0x165e9f81

000041ac <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    41ac:	b580      	push	{r7, lr}
    41ae:	b082      	sub	sp, #8
    41b0:	af00      	add	r7, sp, #0
    41b2:	4603      	mov	r3, r0
    41b4:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    41b6:	88fb      	ldrh	r3, [r7, #6]
    41b8:	2209      	movs	r2, #9
    41ba:	4904      	ldr	r1, [pc, #16]	; (41cc <_get_cycles_for_us+0x20>)
    41bc:	4618      	mov	r0, r3
    41be:	4b04      	ldr	r3, [pc, #16]	; (41d0 <_get_cycles_for_us+0x24>)
    41c0:	4798      	blx	r3
    41c2:	4603      	mov	r3, r0
}
    41c4:	4618      	mov	r0, r3
    41c6:	3708      	adds	r7, #8
    41c8:	46bd      	mov	sp, r7
    41ca:	bd80      	pop	{r7, pc}
    41cc:	07270e00 	.word	0x07270e00
    41d0:	00004065 	.word	0x00004065

000041d4 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    41d4:	b480      	push	{r7}
    41d6:	b083      	sub	sp, #12
    41d8:	af00      	add	r7, sp, #0
    41da:	4603      	mov	r3, r0
    41dc:	6039      	str	r1, [r7, #0]
    41de:	80fb      	strh	r3, [r7, #6]
    41e0:	4613      	mov	r3, r2
    41e2:	717b      	strb	r3, [r7, #5]
	switch (power) {
    41e4:	797b      	ldrb	r3, [r7, #5]
    41e6:	3b04      	subs	r3, #4
    41e8:	2b05      	cmp	r3, #5
    41ea:	d870      	bhi.n	42ce <_get_cycles_for_ms_internal+0xfa>
    41ec:	a201      	add	r2, pc, #4	; (adr r2, 41f4 <_get_cycles_for_ms_internal+0x20>)
    41ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    41f2:	bf00      	nop
    41f4:	000042b1 	.word	0x000042b1
    41f8:	00004295 	.word	0x00004295
    41fc:	00004279 	.word	0x00004279
    4200:	00004255 	.word	0x00004255
    4204:	00004231 	.word	0x00004231
    4208:	0000420d 	.word	0x0000420d
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    420c:	88fb      	ldrh	r3, [r7, #6]
    420e:	683a      	ldr	r2, [r7, #0]
    4210:	4937      	ldr	r1, [pc, #220]	; (42f0 <_get_cycles_for_ms_internal+0x11c>)
    4212:	fba1 1202 	umull	r1, r2, r1, r2
    4216:	0c92      	lsrs	r2, r2, #18
    4218:	fb02 f303 	mul.w	r3, r2, r3
    421c:	3302      	adds	r3, #2
    421e:	4a35      	ldr	r2, [pc, #212]	; (42f4 <_get_cycles_for_ms_internal+0x120>)
    4220:	fba2 2303 	umull	r2, r3, r2, r3
    4224:	085b      	lsrs	r3, r3, #1
    4226:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    422a:	fb02 f303 	mul.w	r3, r2, r3
    422e:	e058      	b.n	42e2 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    4230:	88fb      	ldrh	r3, [r7, #6]
    4232:	683a      	ldr	r2, [r7, #0]
    4234:	0952      	lsrs	r2, r2, #5
    4236:	4930      	ldr	r1, [pc, #192]	; (42f8 <_get_cycles_for_ms_internal+0x124>)
    4238:	fba1 1202 	umull	r1, r2, r1, r2
    423c:	09d2      	lsrs	r2, r2, #7
    423e:	fb02 f303 	mul.w	r3, r2, r3
    4242:	3302      	adds	r3, #2
    4244:	4a2b      	ldr	r2, [pc, #172]	; (42f4 <_get_cycles_for_ms_internal+0x120>)
    4246:	fba2 2303 	umull	r2, r3, r2, r3
    424a:	085b      	lsrs	r3, r3, #1
    424c:	2264      	movs	r2, #100	; 0x64
    424e:	fb02 f303 	mul.w	r3, r2, r3
    4252:	e046      	b.n	42e2 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    4254:	88fb      	ldrh	r3, [r7, #6]
    4256:	683a      	ldr	r2, [r7, #0]
    4258:	4928      	ldr	r1, [pc, #160]	; (42fc <_get_cycles_for_ms_internal+0x128>)
    425a:	fba1 1202 	umull	r1, r2, r1, r2
    425e:	0b52      	lsrs	r2, r2, #13
    4260:	fb02 f303 	mul.w	r3, r2, r3
    4264:	3302      	adds	r3, #2
    4266:	4a23      	ldr	r2, [pc, #140]	; (42f4 <_get_cycles_for_ms_internal+0x120>)
    4268:	fba2 2303 	umull	r2, r3, r2, r3
    426c:	085a      	lsrs	r2, r3, #1
    426e:	4613      	mov	r3, r2
    4270:	009b      	lsls	r3, r3, #2
    4272:	4413      	add	r3, r2
    4274:	005b      	lsls	r3, r3, #1
    4276:	e034      	b.n	42e2 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    4278:	88fb      	ldrh	r3, [r7, #6]
    427a:	683a      	ldr	r2, [r7, #0]
    427c:	4920      	ldr	r1, [pc, #128]	; (4300 <_get_cycles_for_ms_internal+0x12c>)
    427e:	fba1 1202 	umull	r1, r2, r1, r2
    4282:	0992      	lsrs	r2, r2, #6
    4284:	fb02 f303 	mul.w	r3, r2, r3
    4288:	3302      	adds	r3, #2
    428a:	4a1a      	ldr	r2, [pc, #104]	; (42f4 <_get_cycles_for_ms_internal+0x120>)
    428c:	fba2 2303 	umull	r2, r3, r2, r3
    4290:	085b      	lsrs	r3, r3, #1
    4292:	e026      	b.n	42e2 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    4294:	88fb      	ldrh	r3, [r7, #6]
    4296:	683a      	ldr	r2, [r7, #0]
    4298:	491a      	ldr	r1, [pc, #104]	; (4304 <_get_cycles_for_ms_internal+0x130>)
    429a:	fba1 1202 	umull	r1, r2, r1, r2
    429e:	0952      	lsrs	r2, r2, #5
    42a0:	fb02 f303 	mul.w	r3, r2, r3
    42a4:	331d      	adds	r3, #29
    42a6:	4a18      	ldr	r2, [pc, #96]	; (4308 <_get_cycles_for_ms_internal+0x134>)
    42a8:	fba2 2303 	umull	r2, r3, r2, r3
    42ac:	091b      	lsrs	r3, r3, #4
    42ae:	e018      	b.n	42e2 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    42b0:	88fb      	ldrh	r3, [r7, #6]
    42b2:	683a      	ldr	r2, [r7, #0]
    42b4:	4915      	ldr	r1, [pc, #84]	; (430c <_get_cycles_for_ms_internal+0x138>)
    42b6:	fba1 1202 	umull	r1, r2, r1, r2
    42ba:	08d2      	lsrs	r2, r2, #3
    42bc:	fb02 f303 	mul.w	r3, r2, r3
    42c0:	f203 132b 	addw	r3, r3, #299	; 0x12b
    42c4:	4a12      	ldr	r2, [pc, #72]	; (4310 <_get_cycles_for_ms_internal+0x13c>)
    42c6:	fba2 2303 	umull	r2, r3, r2, r3
    42ca:	095b      	lsrs	r3, r3, #5
    42cc:	e009      	b.n	42e2 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    42ce:	88fb      	ldrh	r3, [r7, #6]
    42d0:	683a      	ldr	r2, [r7, #0]
    42d2:	fb02 f303 	mul.w	r3, r2, r3
    42d6:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    42da:	4a0e      	ldr	r2, [pc, #56]	; (4314 <_get_cycles_for_ms_internal+0x140>)
    42dc:	fba2 2303 	umull	r2, r3, r2, r3
    42e0:	099b      	lsrs	r3, r3, #6
	}
}
    42e2:	4618      	mov	r0, r3
    42e4:	370c      	adds	r7, #12
    42e6:	46bd      	mov	sp, r7
    42e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    42ec:	4770      	bx	lr
    42ee:	bf00      	nop
    42f0:	431bde83 	.word	0x431bde83
    42f4:	aaaaaaab 	.word	0xaaaaaaab
    42f8:	0a7c5ac5 	.word	0x0a7c5ac5
    42fc:	d1b71759 	.word	0xd1b71759
    4300:	10624dd3 	.word	0x10624dd3
    4304:	51eb851f 	.word	0x51eb851f
    4308:	88888889 	.word	0x88888889
    430c:	cccccccd 	.word	0xcccccccd
    4310:	1b4e81b5 	.word	0x1b4e81b5
    4314:	057619f1 	.word	0x057619f1

00004318 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4318:	b580      	push	{r7, lr}
    431a:	b082      	sub	sp, #8
    431c:	af00      	add	r7, sp, #0
    431e:	4603      	mov	r3, r0
    4320:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4322:	88fb      	ldrh	r3, [r7, #6]
    4324:	2209      	movs	r2, #9
    4326:	4904      	ldr	r1, [pc, #16]	; (4338 <_get_cycles_for_ms+0x20>)
    4328:	4618      	mov	r0, r3
    432a:	4b04      	ldr	r3, [pc, #16]	; (433c <_get_cycles_for_ms+0x24>)
    432c:	4798      	blx	r3
    432e:	4603      	mov	r3, r0
}
    4330:	4618      	mov	r0, r3
    4332:	3708      	adds	r7, #8
    4334:	46bd      	mov	sp, r7
    4336:	bd80      	pop	{r7, pc}
    4338:	07270e00 	.word	0x07270e00
    433c:	000041d5 	.word	0x000041d5

00004340 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4340:	b480      	push	{r7}
    4342:	b083      	sub	sp, #12
    4344:	af00      	add	r7, sp, #0
    4346:	6078      	str	r0, [r7, #4]
    4348:	6039      	str	r1, [r7, #0]
    434a:	bf00      	nop
    434c:	f3af 8000 	nop.w

00004350 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4350:	3901      	subs	r1, #1
    4352:	d8fd      	bhi.n	4350 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    4354:	bf00      	nop
    4356:	370c      	adds	r7, #12
    4358:	46bd      	mov	sp, r7
    435a:	f85d 7b04 	ldr.w	r7, [sp], #4
    435e:	4770      	bx	lr

00004360 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4360:	b480      	push	{r7}
    4362:	b083      	sub	sp, #12
    4364:	af00      	add	r7, sp, #0
    4366:	6078      	str	r0, [r7, #4]
    4368:	460b      	mov	r3, r1
    436a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    436c:	687b      	ldr	r3, [r7, #4]
    436e:	881b      	ldrh	r3, [r3, #0]
    4370:	b29a      	uxth	r2, r3
    4372:	887b      	ldrh	r3, [r7, #2]
    4374:	021b      	lsls	r3, r3, #8
    4376:	b29b      	uxth	r3, r3
    4378:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    437c:	b29b      	uxth	r3, r3
    437e:	4313      	orrs	r3, r2
    4380:	b29a      	uxth	r2, r3
    4382:	687b      	ldr	r3, [r7, #4]
    4384:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    4386:	bf00      	nop
    4388:	370c      	adds	r7, #12
    438a:	46bd      	mov	sp, r7
    438c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4390:	4770      	bx	lr

00004392 <hri_port_set_EVCTRL_reg>:
{
    4392:	b480      	push	{r7}
    4394:	b085      	sub	sp, #20
    4396:	af00      	add	r7, sp, #0
    4398:	60f8      	str	r0, [r7, #12]
    439a:	460b      	mov	r3, r1
    439c:	607a      	str	r2, [r7, #4]
    439e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    43a0:	7afb      	ldrb	r3, [r7, #11]
    43a2:	7afa      	ldrb	r2, [r7, #11]
    43a4:	68f9      	ldr	r1, [r7, #12]
    43a6:	01d2      	lsls	r2, r2, #7
    43a8:	440a      	add	r2, r1
    43aa:	322c      	adds	r2, #44	; 0x2c
    43ac:	6811      	ldr	r1, [r2, #0]
    43ae:	687a      	ldr	r2, [r7, #4]
    43b0:	430a      	orrs	r2, r1
    43b2:	68f9      	ldr	r1, [r7, #12]
    43b4:	01db      	lsls	r3, r3, #7
    43b6:	440b      	add	r3, r1
    43b8:	332c      	adds	r3, #44	; 0x2c
    43ba:	601a      	str	r2, [r3, #0]
}
    43bc:	bf00      	nop
    43be:	3714      	adds	r7, #20
    43c0:	46bd      	mov	sp, r7
    43c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    43c6:	4770      	bx	lr

000043c8 <_port_event_init>:

static inline void _port_event_init()
{
    43c8:	b580      	push	{r7, lr}
    43ca:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    43cc:	2200      	movs	r2, #0
    43ce:	2100      	movs	r1, #0
    43d0:	480a      	ldr	r0, [pc, #40]	; (43fc <_port_event_init+0x34>)
    43d2:	4b0b      	ldr	r3, [pc, #44]	; (4400 <_port_event_init+0x38>)
    43d4:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    43d6:	2200      	movs	r2, #0
    43d8:	2101      	movs	r1, #1
    43da:	4808      	ldr	r0, [pc, #32]	; (43fc <_port_event_init+0x34>)
    43dc:	4b08      	ldr	r3, [pc, #32]	; (4400 <_port_event_init+0x38>)
    43de:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    43e0:	f64e 72ef 	movw	r2, #61423	; 0xefef
    43e4:	2102      	movs	r1, #2
    43e6:	4805      	ldr	r0, [pc, #20]	; (43fc <_port_event_init+0x34>)
    43e8:	4b05      	ldr	r3, [pc, #20]	; (4400 <_port_event_init+0x38>)
    43ea:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    43ec:	2200      	movs	r2, #0
    43ee:	2103      	movs	r1, #3
    43f0:	4802      	ldr	r0, [pc, #8]	; (43fc <_port_event_init+0x34>)
    43f2:	4b03      	ldr	r3, [pc, #12]	; (4400 <_port_event_init+0x38>)
    43f4:	4798      	blx	r3
}
    43f6:	bf00      	nop
    43f8:	bd80      	pop	{r7, pc}
    43fa:	bf00      	nop
    43fc:	41008000 	.word	0x41008000
    4400:	00004393 	.word	0x00004393

00004404 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4404:	b580      	push	{r7, lr}
    4406:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4408:	2104      	movs	r1, #4
    440a:	480b      	ldr	r0, [pc, #44]	; (4438 <_init_chip+0x34>)
    440c:	4b0b      	ldr	r3, [pc, #44]	; (443c <_init_chip+0x38>)
    440e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4410:	4b0b      	ldr	r3, [pc, #44]	; (4440 <_init_chip+0x3c>)
    4412:	4798      	blx	r3
	_oscctrl_init_sources();
    4414:	4b0b      	ldr	r3, [pc, #44]	; (4444 <_init_chip+0x40>)
    4416:	4798      	blx	r3
	_mclk_init();
    4418:	4b0b      	ldr	r3, [pc, #44]	; (4448 <_init_chip+0x44>)
    441a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    441c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4420:	4b0a      	ldr	r3, [pc, #40]	; (444c <_init_chip+0x48>)
    4422:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    4424:	4b0a      	ldr	r3, [pc, #40]	; (4450 <_init_chip+0x4c>)
    4426:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4428:	f640 30df 	movw	r0, #3039	; 0xbdf
    442c:	4b07      	ldr	r3, [pc, #28]	; (444c <_init_chip+0x48>)
    442e:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4430:	4b08      	ldr	r3, [pc, #32]	; (4454 <_init_chip+0x50>)
    4432:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    4434:	bf00      	nop
    4436:	bd80      	pop	{r7, pc}
    4438:	41004000 	.word	0x41004000
    443c:	00004361 	.word	0x00004361
    4440:	00004f2d 	.word	0x00004f2d
    4444:	000053f5 	.word	0x000053f5
    4448:	00004e4d 	.word	0x00004e4d
    444c:	00004cf5 	.word	0x00004cf5
    4450:	00005435 	.word	0x00005435
    4454:	000043c9 	.word	0x000043c9

00004458 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4458:	b480      	push	{r7}
    445a:	b083      	sub	sp, #12
    445c:	af00      	add	r7, sp, #0
    445e:	6078      	str	r0, [r7, #4]
    4460:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    4462:	687b      	ldr	r3, [r7, #4]
    4464:	683a      	ldr	r2, [r7, #0]
    4466:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4468:	2300      	movs	r3, #0
}
    446a:	4618      	mov	r0, r3
    446c:	370c      	adds	r7, #12
    446e:	46bd      	mov	sp, r7
    4470:	f85d 7b04 	ldr.w	r7, [sp], #4
    4474:	4770      	bx	lr
	...

00004478 <__NVIC_EnableIRQ>:
{
    4478:	b480      	push	{r7}
    447a:	b083      	sub	sp, #12
    447c:	af00      	add	r7, sp, #0
    447e:	4603      	mov	r3, r0
    4480:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4486:	2b00      	cmp	r3, #0
    4488:	db0b      	blt.n	44a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    448a:	4909      	ldr	r1, [pc, #36]	; (44b0 <__NVIC_EnableIRQ+0x38>)
    448c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4490:	095b      	lsrs	r3, r3, #5
    4492:	88fa      	ldrh	r2, [r7, #6]
    4494:	f002 021f 	and.w	r2, r2, #31
    4498:	2001      	movs	r0, #1
    449a:	fa00 f202 	lsl.w	r2, r0, r2
    449e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    44a2:	bf00      	nop
    44a4:	370c      	adds	r7, #12
    44a6:	46bd      	mov	sp, r7
    44a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    44ac:	4770      	bx	lr
    44ae:	bf00      	nop
    44b0:	e000e100 	.word	0xe000e100

000044b4 <__NVIC_DisableIRQ>:
{
    44b4:	b480      	push	{r7}
    44b6:	b083      	sub	sp, #12
    44b8:	af00      	add	r7, sp, #0
    44ba:	4603      	mov	r3, r0
    44bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    44be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    44c2:	2b00      	cmp	r3, #0
    44c4:	db10      	blt.n	44e8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    44c6:	490b      	ldr	r1, [pc, #44]	; (44f4 <__NVIC_DisableIRQ+0x40>)
    44c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    44cc:	095b      	lsrs	r3, r3, #5
    44ce:	88fa      	ldrh	r2, [r7, #6]
    44d0:	f002 021f 	and.w	r2, r2, #31
    44d4:	2001      	movs	r0, #1
    44d6:	fa00 f202 	lsl.w	r2, r0, r2
    44da:	3320      	adds	r3, #32
    44dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    44e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    44e4:	f3bf 8f6f 	isb	sy
}
    44e8:	bf00      	nop
    44ea:	370c      	adds	r7, #12
    44ec:	46bd      	mov	sp, r7
    44ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    44f2:	4770      	bx	lr
    44f4:	e000e100 	.word	0xe000e100

000044f8 <__NVIC_ClearPendingIRQ>:
{
    44f8:	b480      	push	{r7}
    44fa:	b083      	sub	sp, #12
    44fc:	af00      	add	r7, sp, #0
    44fe:	4603      	mov	r3, r0
    4500:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4506:	2b00      	cmp	r3, #0
    4508:	db0c      	blt.n	4524 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    450a:	4909      	ldr	r1, [pc, #36]	; (4530 <__NVIC_ClearPendingIRQ+0x38>)
    450c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4510:	095b      	lsrs	r3, r3, #5
    4512:	88fa      	ldrh	r2, [r7, #6]
    4514:	f002 021f 	and.w	r2, r2, #31
    4518:	2001      	movs	r0, #1
    451a:	fa00 f202 	lsl.w	r2, r0, r2
    451e:	3360      	adds	r3, #96	; 0x60
    4520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4524:	bf00      	nop
    4526:	370c      	adds	r7, #12
    4528:	46bd      	mov	sp, r7
    452a:	f85d 7b04 	ldr.w	r7, [sp], #4
    452e:	4770      	bx	lr
    4530:	e000e100 	.word	0xe000e100

00004534 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4534:	b480      	push	{r7}
    4536:	b083      	sub	sp, #12
    4538:	af00      	add	r7, sp, #0
    453a:	6078      	str	r0, [r7, #4]
    453c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    453e:	bf00      	nop
    4540:	687b      	ldr	r3, [r7, #4]
    4542:	685a      	ldr	r2, [r3, #4]
    4544:	683b      	ldr	r3, [r7, #0]
    4546:	4013      	ands	r3, r2
    4548:	2b00      	cmp	r3, #0
    454a:	d1f9      	bne.n	4540 <hri_eic_wait_for_sync+0xc>
	};
}
    454c:	bf00      	nop
    454e:	370c      	adds	r7, #12
    4550:	46bd      	mov	sp, r7
    4552:	f85d 7b04 	ldr.w	r7, [sp], #4
    4556:	4770      	bx	lr

00004558 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4558:	b480      	push	{r7}
    455a:	b083      	sub	sp, #12
    455c:	af00      	add	r7, sp, #0
    455e:	6078      	str	r0, [r7, #4]
    4560:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4562:	687b      	ldr	r3, [r7, #4]
    4564:	685a      	ldr	r2, [r3, #4]
    4566:	683b      	ldr	r3, [r7, #0]
    4568:	4013      	ands	r3, r2
    456a:	2b00      	cmp	r3, #0
    456c:	bf14      	ite	ne
    456e:	2301      	movne	r3, #1
    4570:	2300      	moveq	r3, #0
    4572:	b2db      	uxtb	r3, r3
}
    4574:	4618      	mov	r0, r3
    4576:	370c      	adds	r7, #12
    4578:	46bd      	mov	sp, r7
    457a:	f85d 7b04 	ldr.w	r7, [sp], #4
    457e:	4770      	bx	lr

00004580 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4580:	b480      	push	{r7}
    4582:	b083      	sub	sp, #12
    4584:	af00      	add	r7, sp, #0
    4586:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4588:	687b      	ldr	r3, [r7, #4]
    458a:	695b      	ldr	r3, [r3, #20]
}
    458c:	4618      	mov	r0, r3
    458e:	370c      	adds	r7, #12
    4590:	46bd      	mov	sp, r7
    4592:	f85d 7b04 	ldr.w	r7, [sp], #4
    4596:	4770      	bx	lr

00004598 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4598:	b480      	push	{r7}
    459a:	b083      	sub	sp, #12
    459c:	af00      	add	r7, sp, #0
    459e:	6078      	str	r0, [r7, #4]
    45a0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    45a2:	687b      	ldr	r3, [r7, #4]
    45a4:	683a      	ldr	r2, [r7, #0]
    45a6:	615a      	str	r2, [r3, #20]
}
    45a8:	bf00      	nop
    45aa:	370c      	adds	r7, #12
    45ac:	46bd      	mov	sp, r7
    45ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    45b2:	4770      	bx	lr

000045b4 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    45b4:	b480      	push	{r7}
    45b6:	b083      	sub	sp, #12
    45b8:	af00      	add	r7, sp, #0
    45ba:	6078      	str	r0, [r7, #4]
    45bc:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    45be:	687b      	ldr	r3, [r7, #4]
    45c0:	683a      	ldr	r2, [r7, #0]
    45c2:	611a      	str	r2, [r3, #16]
}
    45c4:	bf00      	nop
    45c6:	370c      	adds	r7, #12
    45c8:	46bd      	mov	sp, r7
    45ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    45ce:	4770      	bx	lr

000045d0 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    45d0:	b480      	push	{r7}
    45d2:	b083      	sub	sp, #12
    45d4:	af00      	add	r7, sp, #0
    45d6:	6078      	str	r0, [r7, #4]
    45d8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    45da:	687b      	ldr	r3, [r7, #4]
    45dc:	683a      	ldr	r2, [r7, #0]
    45de:	60da      	str	r2, [r3, #12]
}
    45e0:	bf00      	nop
    45e2:	370c      	adds	r7, #12
    45e4:	46bd      	mov	sp, r7
    45e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    45ea:	4770      	bx	lr

000045ec <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    45ec:	b580      	push	{r7, lr}
    45ee:	b082      	sub	sp, #8
    45f0:	af00      	add	r7, sp, #0
    45f2:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    45f4:	687b      	ldr	r3, [r7, #4]
    45f6:	781b      	ldrb	r3, [r3, #0]
    45f8:	b2db      	uxtb	r3, r3
    45fa:	f043 0302 	orr.w	r3, r3, #2
    45fe:	b2da      	uxtb	r2, r3
    4600:	687b      	ldr	r3, [r7, #4]
    4602:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4604:	2103      	movs	r1, #3
    4606:	6878      	ldr	r0, [r7, #4]
    4608:	4b02      	ldr	r3, [pc, #8]	; (4614 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    460a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    460c:	bf00      	nop
    460e:	3708      	adds	r7, #8
    4610:	46bd      	mov	sp, r7
    4612:	bd80      	pop	{r7, pc}
    4614:	00004535 	.word	0x00004535

00004618 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4618:	b580      	push	{r7, lr}
    461a:	b082      	sub	sp, #8
    461c:	af00      	add	r7, sp, #0
    461e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4620:	687b      	ldr	r3, [r7, #4]
    4622:	781b      	ldrb	r3, [r3, #0]
    4624:	b2db      	uxtb	r3, r3
    4626:	f023 0302 	bic.w	r3, r3, #2
    462a:	b2da      	uxtb	r2, r3
    462c:	687b      	ldr	r3, [r7, #4]
    462e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4630:	2103      	movs	r1, #3
    4632:	6878      	ldr	r0, [r7, #4]
    4634:	4b02      	ldr	r3, [pc, #8]	; (4640 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4636:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4638:	bf00      	nop
    463a:	3708      	adds	r7, #8
    463c:	46bd      	mov	sp, r7
    463e:	bd80      	pop	{r7, pc}
    4640:	00004535 	.word	0x00004535

00004644 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4644:	b580      	push	{r7, lr}
    4646:	b084      	sub	sp, #16
    4648:	af00      	add	r7, sp, #0
    464a:	6078      	str	r0, [r7, #4]
    464c:	460b      	mov	r3, r1
    464e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4650:	687b      	ldr	r3, [r7, #4]
    4652:	781b      	ldrb	r3, [r3, #0]
    4654:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4656:	7bfb      	ldrb	r3, [r7, #15]
    4658:	f023 0310 	bic.w	r3, r3, #16
    465c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    465e:	78fb      	ldrb	r3, [r7, #3]
    4660:	011b      	lsls	r3, r3, #4
    4662:	b25a      	sxtb	r2, r3
    4664:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4668:	4313      	orrs	r3, r2
    466a:	b25b      	sxtb	r3, r3
    466c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    466e:	687b      	ldr	r3, [r7, #4]
    4670:	7bfa      	ldrb	r2, [r7, #15]
    4672:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4674:	2103      	movs	r1, #3
    4676:	6878      	ldr	r0, [r7, #4]
    4678:	4b02      	ldr	r3, [pc, #8]	; (4684 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    467a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    467c:	bf00      	nop
    467e:	3710      	adds	r7, #16
    4680:	46bd      	mov	sp, r7
    4682:	bd80      	pop	{r7, pc}
    4684:	00004535 	.word	0x00004535

00004688 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4688:	b580      	push	{r7, lr}
    468a:	b084      	sub	sp, #16
    468c:	af00      	add	r7, sp, #0
    468e:	6078      	str	r0, [r7, #4]
    4690:	460b      	mov	r3, r1
    4692:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4694:	2103      	movs	r1, #3
    4696:	6878      	ldr	r0, [r7, #4]
    4698:	4b06      	ldr	r3, [pc, #24]	; (46b4 <hri_eic_get_CTRLA_reg+0x2c>)
    469a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    469c:	687b      	ldr	r3, [r7, #4]
    469e:	781b      	ldrb	r3, [r3, #0]
    46a0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    46a2:	7bfa      	ldrb	r2, [r7, #15]
    46a4:	78fb      	ldrb	r3, [r7, #3]
    46a6:	4013      	ands	r3, r2
    46a8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    46aa:	7bfb      	ldrb	r3, [r7, #15]
}
    46ac:	4618      	mov	r0, r3
    46ae:	3710      	adds	r7, #16
    46b0:	46bd      	mov	sp, r7
    46b2:	bd80      	pop	{r7, pc}
    46b4:	00004535 	.word	0x00004535

000046b8 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    46b8:	b580      	push	{r7, lr}
    46ba:	b082      	sub	sp, #8
    46bc:	af00      	add	r7, sp, #0
    46be:	6078      	str	r0, [r7, #4]
    46c0:	460b      	mov	r3, r1
    46c2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    46c4:	687b      	ldr	r3, [r7, #4]
    46c6:	78fa      	ldrb	r2, [r7, #3]
    46c8:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    46ca:	2103      	movs	r1, #3
    46cc:	6878      	ldr	r0, [r7, #4]
    46ce:	4b03      	ldr	r3, [pc, #12]	; (46dc <hri_eic_write_CTRLA_reg+0x24>)
    46d0:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    46d2:	bf00      	nop
    46d4:	3708      	adds	r7, #8
    46d6:	46bd      	mov	sp, r7
    46d8:	bd80      	pop	{r7, pc}
    46da:	bf00      	nop
    46dc:	00004535 	.word	0x00004535

000046e0 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    46e0:	b480      	push	{r7}
    46e2:	b083      	sub	sp, #12
    46e4:	af00      	add	r7, sp, #0
    46e6:	6078      	str	r0, [r7, #4]
    46e8:	460b      	mov	r3, r1
    46ea:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    46ec:	687b      	ldr	r3, [r7, #4]
    46ee:	78fa      	ldrb	r2, [r7, #3]
    46f0:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    46f2:	bf00      	nop
    46f4:	370c      	adds	r7, #12
    46f6:	46bd      	mov	sp, r7
    46f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    46fc:	4770      	bx	lr

000046fe <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    46fe:	b480      	push	{r7}
    4700:	b083      	sub	sp, #12
    4702:	af00      	add	r7, sp, #0
    4704:	6078      	str	r0, [r7, #4]
    4706:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4708:	687b      	ldr	r3, [r7, #4]
    470a:	683a      	ldr	r2, [r7, #0]
    470c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    470e:	bf00      	nop
    4710:	370c      	adds	r7, #12
    4712:	46bd      	mov	sp, r7
    4714:	f85d 7b04 	ldr.w	r7, [sp], #4
    4718:	4770      	bx	lr

0000471a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    471a:	b480      	push	{r7}
    471c:	b083      	sub	sp, #12
    471e:	af00      	add	r7, sp, #0
    4720:	6078      	str	r0, [r7, #4]
    4722:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4724:	687b      	ldr	r3, [r7, #4]
    4726:	683a      	ldr	r2, [r7, #0]
    4728:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    472a:	bf00      	nop
    472c:	370c      	adds	r7, #12
    472e:	46bd      	mov	sp, r7
    4730:	f85d 7b04 	ldr.w	r7, [sp], #4
    4734:	4770      	bx	lr

00004736 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4736:	b480      	push	{r7}
    4738:	b085      	sub	sp, #20
    473a:	af00      	add	r7, sp, #0
    473c:	60f8      	str	r0, [r7, #12]
    473e:	460b      	mov	r3, r1
    4740:	607a      	str	r2, [r7, #4]
    4742:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4744:	7afb      	ldrb	r3, [r7, #11]
    4746:	68fa      	ldr	r2, [r7, #12]
    4748:	3306      	adds	r3, #6
    474a:	009b      	lsls	r3, r3, #2
    474c:	4413      	add	r3, r2
    474e:	687a      	ldr	r2, [r7, #4]
    4750:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4752:	bf00      	nop
    4754:	3714      	adds	r7, #20
    4756:	46bd      	mov	sp, r7
    4758:	f85d 7b04 	ldr.w	r7, [sp], #4
    475c:	4770      	bx	lr

0000475e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    475e:	b480      	push	{r7}
    4760:	b083      	sub	sp, #12
    4762:	af00      	add	r7, sp, #0
    4764:	6078      	str	r0, [r7, #4]
    4766:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4768:	687b      	ldr	r3, [r7, #4]
    476a:	683a      	ldr	r2, [r7, #0]
    476c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    476e:	bf00      	nop
    4770:	370c      	adds	r7, #12
    4772:	46bd      	mov	sp, r7
    4774:	f85d 7b04 	ldr.w	r7, [sp], #4
    4778:	4770      	bx	lr

0000477a <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    477a:	b480      	push	{r7}
    477c:	b083      	sub	sp, #12
    477e:	af00      	add	r7, sp, #0
    4780:	6078      	str	r0, [r7, #4]
    4782:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4784:	687b      	ldr	r3, [r7, #4]
    4786:	683a      	ldr	r2, [r7, #0]
    4788:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    478a:	bf00      	nop
    478c:	370c      	adds	r7, #12
    478e:	46bd      	mov	sp, r7
    4790:	f85d 7b04 	ldr.w	r7, [sp], #4
    4794:	4770      	bx	lr
	...

00004798 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4798:	b580      	push	{r7, lr}
    479a:	b082      	sub	sp, #8
    479c:	af00      	add	r7, sp, #0
    479e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    47a0:	2101      	movs	r1, #1
    47a2:	484f      	ldr	r0, [pc, #316]	; (48e0 <_ext_irq_init+0x148>)
    47a4:	4b4f      	ldr	r3, [pc, #316]	; (48e4 <_ext_irq_init+0x14c>)
    47a6:	4798      	blx	r3
    47a8:	4603      	mov	r3, r0
    47aa:	f083 0301 	eor.w	r3, r3, #1
    47ae:	b2db      	uxtb	r3, r3
    47b0:	2b00      	cmp	r3, #0
    47b2:	d011      	beq.n	47d8 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    47b4:	2102      	movs	r1, #2
    47b6:	484a      	ldr	r0, [pc, #296]	; (48e0 <_ext_irq_init+0x148>)
    47b8:	4b4b      	ldr	r3, [pc, #300]	; (48e8 <_ext_irq_init+0x150>)
    47ba:	4798      	blx	r3
    47bc:	4603      	mov	r3, r0
    47be:	2b00      	cmp	r3, #0
    47c0:	d006      	beq.n	47d0 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    47c2:	4847      	ldr	r0, [pc, #284]	; (48e0 <_ext_irq_init+0x148>)
    47c4:	4b49      	ldr	r3, [pc, #292]	; (48ec <_ext_irq_init+0x154>)
    47c6:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    47c8:	2102      	movs	r1, #2
    47ca:	4845      	ldr	r0, [pc, #276]	; (48e0 <_ext_irq_init+0x148>)
    47cc:	4b48      	ldr	r3, [pc, #288]	; (48f0 <_ext_irq_init+0x158>)
    47ce:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    47d0:	2101      	movs	r1, #1
    47d2:	4843      	ldr	r0, [pc, #268]	; (48e0 <_ext_irq_init+0x148>)
    47d4:	4b47      	ldr	r3, [pc, #284]	; (48f4 <_ext_irq_init+0x15c>)
    47d6:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    47d8:	2101      	movs	r1, #1
    47da:	4841      	ldr	r0, [pc, #260]	; (48e0 <_ext_irq_init+0x148>)
    47dc:	4b44      	ldr	r3, [pc, #272]	; (48f0 <_ext_irq_init+0x158>)
    47de:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    47e0:	2100      	movs	r1, #0
    47e2:	483f      	ldr	r0, [pc, #252]	; (48e0 <_ext_irq_init+0x148>)
    47e4:	4b44      	ldr	r3, [pc, #272]	; (48f8 <_ext_irq_init+0x160>)
    47e6:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    47e8:	2100      	movs	r1, #0
    47ea:	483d      	ldr	r0, [pc, #244]	; (48e0 <_ext_irq_init+0x148>)
    47ec:	4b43      	ldr	r3, [pc, #268]	; (48fc <_ext_irq_init+0x164>)
    47ee:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    47f0:	2100      	movs	r1, #0
    47f2:	483b      	ldr	r0, [pc, #236]	; (48e0 <_ext_irq_init+0x148>)
    47f4:	4b42      	ldr	r3, [pc, #264]	; (4900 <_ext_irq_init+0x168>)
    47f6:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    47f8:	f240 31bb 	movw	r1, #955	; 0x3bb
    47fc:	4838      	ldr	r0, [pc, #224]	; (48e0 <_ext_irq_init+0x148>)
    47fe:	4b41      	ldr	r3, [pc, #260]	; (4904 <_ext_irq_init+0x16c>)
    4800:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4802:	f240 313b 	movw	r1, #827	; 0x33b
    4806:	4836      	ldr	r0, [pc, #216]	; (48e0 <_ext_irq_init+0x148>)
    4808:	4b3f      	ldr	r3, [pc, #252]	; (4908 <_ext_irq_init+0x170>)
    480a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    480c:	2100      	movs	r1, #0
    480e:	4834      	ldr	r0, [pc, #208]	; (48e0 <_ext_irq_init+0x148>)
    4810:	4b3e      	ldr	r3, [pc, #248]	; (490c <_ext_irq_init+0x174>)
    4812:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4814:	4a3e      	ldr	r2, [pc, #248]	; (4910 <_ext_irq_init+0x178>)
    4816:	2100      	movs	r1, #0
    4818:	4831      	ldr	r0, [pc, #196]	; (48e0 <_ext_irq_init+0x148>)
    481a:	4b3e      	ldr	r3, [pc, #248]	; (4914 <_ext_irq_init+0x17c>)
    481c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    481e:	2211      	movs	r2, #17
    4820:	2101      	movs	r1, #1
    4822:	482f      	ldr	r0, [pc, #188]	; (48e0 <_ext_irq_init+0x148>)
    4824:	4b3b      	ldr	r3, [pc, #236]	; (4914 <_ext_irq_init+0x17c>)
    4826:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4828:	482d      	ldr	r0, [pc, #180]	; (48e0 <_ext_irq_init+0x148>)
    482a:	4b3b      	ldr	r3, [pc, #236]	; (4918 <_ext_irq_init+0x180>)
    482c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    482e:	200c      	movs	r0, #12
    4830:	4b3a      	ldr	r3, [pc, #232]	; (491c <_ext_irq_init+0x184>)
    4832:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    4834:	200c      	movs	r0, #12
    4836:	4b3a      	ldr	r3, [pc, #232]	; (4920 <_ext_irq_init+0x188>)
    4838:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    483a:	200c      	movs	r0, #12
    483c:	4b39      	ldr	r3, [pc, #228]	; (4924 <_ext_irq_init+0x18c>)
    483e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    4840:	200d      	movs	r0, #13
    4842:	4b36      	ldr	r3, [pc, #216]	; (491c <_ext_irq_init+0x184>)
    4844:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    4846:	200d      	movs	r0, #13
    4848:	4b35      	ldr	r3, [pc, #212]	; (4920 <_ext_irq_init+0x188>)
    484a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    484c:	200d      	movs	r0, #13
    484e:	4b35      	ldr	r3, [pc, #212]	; (4924 <_ext_irq_init+0x18c>)
    4850:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    4852:	200f      	movs	r0, #15
    4854:	4b31      	ldr	r3, [pc, #196]	; (491c <_ext_irq_init+0x184>)
    4856:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    4858:	200f      	movs	r0, #15
    485a:	4b31      	ldr	r3, [pc, #196]	; (4920 <_ext_irq_init+0x188>)
    485c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    485e:	200f      	movs	r0, #15
    4860:	4b30      	ldr	r3, [pc, #192]	; (4924 <_ext_irq_init+0x18c>)
    4862:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4864:	2010      	movs	r0, #16
    4866:	4b2d      	ldr	r3, [pc, #180]	; (491c <_ext_irq_init+0x184>)
    4868:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    486a:	2010      	movs	r0, #16
    486c:	4b2c      	ldr	r3, [pc, #176]	; (4920 <_ext_irq_init+0x188>)
    486e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4870:	2010      	movs	r0, #16
    4872:	4b2c      	ldr	r3, [pc, #176]	; (4924 <_ext_irq_init+0x18c>)
    4874:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    4876:	2011      	movs	r0, #17
    4878:	4b28      	ldr	r3, [pc, #160]	; (491c <_ext_irq_init+0x184>)
    487a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    487c:	2011      	movs	r0, #17
    487e:	4b28      	ldr	r3, [pc, #160]	; (4920 <_ext_irq_init+0x188>)
    4880:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4882:	2011      	movs	r0, #17
    4884:	4b27      	ldr	r3, [pc, #156]	; (4924 <_ext_irq_init+0x18c>)
    4886:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4888:	2012      	movs	r0, #18
    488a:	4b24      	ldr	r3, [pc, #144]	; (491c <_ext_irq_init+0x184>)
    488c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    488e:	2012      	movs	r0, #18
    4890:	4b23      	ldr	r3, [pc, #140]	; (4920 <_ext_irq_init+0x188>)
    4892:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4894:	2012      	movs	r0, #18
    4896:	4b23      	ldr	r3, [pc, #140]	; (4924 <_ext_irq_init+0x18c>)
    4898:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    489a:	2013      	movs	r0, #19
    489c:	4b1f      	ldr	r3, [pc, #124]	; (491c <_ext_irq_init+0x184>)
    489e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    48a0:	2013      	movs	r0, #19
    48a2:	4b1f      	ldr	r3, [pc, #124]	; (4920 <_ext_irq_init+0x188>)
    48a4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    48a6:	2013      	movs	r0, #19
    48a8:	4b1e      	ldr	r3, [pc, #120]	; (4924 <_ext_irq_init+0x18c>)
    48aa:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    48ac:	2014      	movs	r0, #20
    48ae:	4b1b      	ldr	r3, [pc, #108]	; (491c <_ext_irq_init+0x184>)
    48b0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    48b2:	2014      	movs	r0, #20
    48b4:	4b1a      	ldr	r3, [pc, #104]	; (4920 <_ext_irq_init+0x188>)
    48b6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    48b8:	2014      	movs	r0, #20
    48ba:	4b1a      	ldr	r3, [pc, #104]	; (4924 <_ext_irq_init+0x18c>)
    48bc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    48be:	2015      	movs	r0, #21
    48c0:	4b16      	ldr	r3, [pc, #88]	; (491c <_ext_irq_init+0x184>)
    48c2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    48c4:	2015      	movs	r0, #21
    48c6:	4b16      	ldr	r3, [pc, #88]	; (4920 <_ext_irq_init+0x188>)
    48c8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    48ca:	2015      	movs	r0, #21
    48cc:	4b15      	ldr	r3, [pc, #84]	; (4924 <_ext_irq_init+0x18c>)
    48ce:	4798      	blx	r3

	callback = cb;
    48d0:	4a15      	ldr	r2, [pc, #84]	; (4928 <_ext_irq_init+0x190>)
    48d2:	687b      	ldr	r3, [r7, #4]
    48d4:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    48d6:	2300      	movs	r3, #0
}
    48d8:	4618      	mov	r0, r3
    48da:	3708      	adds	r7, #8
    48dc:	46bd      	mov	sp, r7
    48de:	bd80      	pop	{r7, pc}
    48e0:	40002800 	.word	0x40002800
    48e4:	00004559 	.word	0x00004559
    48e8:	00004689 	.word	0x00004689
    48ec:	00004619 	.word	0x00004619
    48f0:	00004535 	.word	0x00004535
    48f4:	000046b9 	.word	0x000046b9
    48f8:	00004645 	.word	0x00004645
    48fc:	000046e1 	.word	0x000046e1
    4900:	000046ff 	.word	0x000046ff
    4904:	0000471b 	.word	0x0000471b
    4908:	0000475f 	.word	0x0000475f
    490c:	0000477b 	.word	0x0000477b
    4910:	90999013 	.word	0x90999013
    4914:	00004737 	.word	0x00004737
    4918:	000045ed 	.word	0x000045ed
    491c:	000044b5 	.word	0x000044b5
    4920:	000044f9 	.word	0x000044f9
    4924:	00004479 	.word	0x00004479
    4928:	20000abc 	.word	0x20000abc

0000492c <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    492c:	b580      	push	{r7, lr}
    492e:	b084      	sub	sp, #16
    4930:	af00      	add	r7, sp, #0
    4932:	6078      	str	r0, [r7, #4]
    4934:	460b      	mov	r3, r1
    4936:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    4938:	23ff      	movs	r3, #255	; 0xff
    493a:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    493c:	2300      	movs	r3, #0
    493e:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    4940:	e010      	b.n	4964 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    4942:	7bbb      	ldrb	r3, [r7, #14]
    4944:	4a1c      	ldr	r2, [pc, #112]	; (49b8 <_ext_irq_enable+0x8c>)
    4946:	00db      	lsls	r3, r3, #3
    4948:	4413      	add	r3, r2
    494a:	685a      	ldr	r2, [r3, #4]
    494c:	687b      	ldr	r3, [r7, #4]
    494e:	429a      	cmp	r2, r3
    4950:	d105      	bne.n	495e <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    4952:	7bbb      	ldrb	r3, [r7, #14]
    4954:	4a18      	ldr	r2, [pc, #96]	; (49b8 <_ext_irq_enable+0x8c>)
    4956:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    495a:	73fb      	strb	r3, [r7, #15]
			break;
    495c:	e005      	b.n	496a <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    495e:	7bbb      	ldrb	r3, [r7, #14]
    4960:	3301      	adds	r3, #1
    4962:	73bb      	strb	r3, [r7, #14]
    4964:	7bbb      	ldrb	r3, [r7, #14]
    4966:	2b08      	cmp	r3, #8
    4968:	d9eb      	bls.n	4942 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    496a:	7bfb      	ldrb	r3, [r7, #15]
    496c:	2bff      	cmp	r3, #255	; 0xff
    496e:	d102      	bne.n	4976 <_ext_irq_enable+0x4a>
		return -1;
    4970:	f04f 33ff 	mov.w	r3, #4294967295
    4974:	e01c      	b.n	49b0 <_ext_irq_enable+0x84>
	}

	if (enable) {
    4976:	78fb      	ldrb	r3, [r7, #3]
    4978:	2b00      	cmp	r3, #0
    497a:	d008      	beq.n	498e <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    497c:	7bfb      	ldrb	r3, [r7, #15]
    497e:	2201      	movs	r2, #1
    4980:	fa02 f303 	lsl.w	r3, r2, r3
    4984:	4619      	mov	r1, r3
    4986:	480d      	ldr	r0, [pc, #52]	; (49bc <_ext_irq_enable+0x90>)
    4988:	4b0d      	ldr	r3, [pc, #52]	; (49c0 <_ext_irq_enable+0x94>)
    498a:	4798      	blx	r3
    498c:	e00f      	b.n	49ae <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    498e:	7bfb      	ldrb	r3, [r7, #15]
    4990:	2201      	movs	r2, #1
    4992:	fa02 f303 	lsl.w	r3, r2, r3
    4996:	4619      	mov	r1, r3
    4998:	4808      	ldr	r0, [pc, #32]	; (49bc <_ext_irq_enable+0x90>)
    499a:	4b0a      	ldr	r3, [pc, #40]	; (49c4 <_ext_irq_enable+0x98>)
    499c:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    499e:	7bfb      	ldrb	r3, [r7, #15]
    49a0:	2201      	movs	r2, #1
    49a2:	fa02 f303 	lsl.w	r3, r2, r3
    49a6:	4619      	mov	r1, r3
    49a8:	4804      	ldr	r0, [pc, #16]	; (49bc <_ext_irq_enable+0x90>)
    49aa:	4b07      	ldr	r3, [pc, #28]	; (49c8 <_ext_irq_enable+0x9c>)
    49ac:	4798      	blx	r3
	}

	return ERR_NONE;
    49ae:	2300      	movs	r3, #0
}
    49b0:	4618      	mov	r0, r3
    49b2:	3710      	adds	r7, #16
    49b4:	46bd      	mov	sp, r7
    49b6:	bd80      	pop	{r7, pc}
    49b8:	0000ed00 	.word	0x0000ed00
    49bc:	40002800 	.word	0x40002800
    49c0:	000045b5 	.word	0x000045b5
    49c4:	000045d1 	.word	0x000045d1
    49c8:	00004599 	.word	0x00004599

000049cc <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    49cc:	b580      	push	{r7, lr}
    49ce:	b084      	sub	sp, #16
    49d0:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    49d2:	4841      	ldr	r0, [pc, #260]	; (4ad8 <_ext_irq_handler+0x10c>)
    49d4:	4b41      	ldr	r3, [pc, #260]	; (4adc <_ext_irq_handler+0x110>)
    49d6:	4798      	blx	r3
    49d8:	4603      	mov	r3, r0
    49da:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    49dc:	f04f 33ff 	mov.w	r3, #4294967295
    49e0:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    49e2:	683b      	ldr	r3, [r7, #0]
    49e4:	4619      	mov	r1, r3
    49e6:	483c      	ldr	r0, [pc, #240]	; (4ad8 <_ext_irq_handler+0x10c>)
    49e8:	4b3d      	ldr	r3, [pc, #244]	; (4ae0 <_ext_irq_handler+0x114>)
    49ea:	4798      	blx	r3

	ASSERT(callback);
    49ec:	4b3d      	ldr	r3, [pc, #244]	; (4ae4 <_ext_irq_handler+0x118>)
    49ee:	681b      	ldr	r3, [r3, #0]
    49f0:	2b00      	cmp	r3, #0
    49f2:	bf14      	ite	ne
    49f4:	2301      	movne	r3, #1
    49f6:	2300      	moveq	r3, #0
    49f8:	b2db      	uxtb	r3, r3
    49fa:	f44f 7284 	mov.w	r2, #264	; 0x108
    49fe:	493a      	ldr	r1, [pc, #232]	; (4ae8 <_ext_irq_handler+0x11c>)
    4a00:	4618      	mov	r0, r3
    4a02:	4b3a      	ldr	r3, [pc, #232]	; (4aec <_ext_irq_handler+0x120>)
    4a04:	4798      	blx	r3

	while (flags) {
    4a06:	e060      	b.n	4aca <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    4a08:	683b      	ldr	r3, [r7, #0]
    4a0a:	4618      	mov	r0, r3
    4a0c:	4b38      	ldr	r3, [pc, #224]	; (4af0 <_ext_irq_handler+0x124>)
    4a0e:	4798      	blx	r3
    4a10:	4603      	mov	r3, r0
    4a12:	b2db      	uxtb	r3, r3
    4a14:	3b01      	subs	r3, #1
    4a16:	b2db      	uxtb	r3, r3
    4a18:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4a1a:	e047      	b.n	4aac <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4a1c:	2300      	movs	r3, #0
    4a1e:	71fb      	strb	r3, [r7, #7]
    4a20:	2309      	movs	r3, #9
    4a22:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    4a24:	e024      	b.n	4a70 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    4a26:	79ba      	ldrb	r2, [r7, #6]
    4a28:	79fb      	ldrb	r3, [r7, #7]
    4a2a:	4413      	add	r3, r2
    4a2c:	105b      	asrs	r3, r3, #1
    4a2e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4a30:	797b      	ldrb	r3, [r7, #5]
    4a32:	4a30      	ldr	r2, [pc, #192]	; (4af4 <_ext_irq_handler+0x128>)
    4a34:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4a38:	461a      	mov	r2, r3
    4a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4a3e:	429a      	cmp	r2, r3
    4a40:	d106      	bne.n	4a50 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    4a42:	797b      	ldrb	r3, [r7, #5]
    4a44:	4a2b      	ldr	r2, [pc, #172]	; (4af4 <_ext_irq_handler+0x128>)
    4a46:	00db      	lsls	r3, r3, #3
    4a48:	4413      	add	r3, r2
    4a4a:	685b      	ldr	r3, [r3, #4]
    4a4c:	60bb      	str	r3, [r7, #8]
					break;
    4a4e:	e013      	b.n	4a78 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    4a50:	797b      	ldrb	r3, [r7, #5]
    4a52:	4a28      	ldr	r2, [pc, #160]	; (4af4 <_ext_irq_handler+0x128>)
    4a54:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4a58:	461a      	mov	r2, r3
    4a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4a5e:	429a      	cmp	r2, r3
    4a60:	da03      	bge.n	4a6a <_ext_irq_handler+0x9e>
					lower = middle + 1;
    4a62:	797b      	ldrb	r3, [r7, #5]
    4a64:	3301      	adds	r3, #1
    4a66:	71fb      	strb	r3, [r7, #7]
    4a68:	e002      	b.n	4a70 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    4a6a:	797b      	ldrb	r3, [r7, #5]
    4a6c:	3b01      	subs	r3, #1
    4a6e:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4a70:	79ba      	ldrb	r2, [r7, #6]
    4a72:	79fb      	ldrb	r3, [r7, #7]
    4a74:	429a      	cmp	r2, r3
    4a76:	d2d6      	bcs.n	4a26 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4a78:	68bb      	ldr	r3, [r7, #8]
    4a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
    4a7e:	d003      	beq.n	4a88 <_ext_irq_handler+0xbc>
				callback(pin);
    4a80:	4b18      	ldr	r3, [pc, #96]	; (4ae4 <_ext_irq_handler+0x118>)
    4a82:	681b      	ldr	r3, [r3, #0]
    4a84:	68b8      	ldr	r0, [r7, #8]
    4a86:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4a8c:	2201      	movs	r2, #1
    4a8e:	fa02 f303 	lsl.w	r3, r2, r3
    4a92:	43da      	mvns	r2, r3
    4a94:	683b      	ldr	r3, [r7, #0]
    4a96:	4013      	ands	r3, r2
    4a98:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    4a9a:	683b      	ldr	r3, [r7, #0]
    4a9c:	4618      	mov	r0, r3
    4a9e:	4b14      	ldr	r3, [pc, #80]	; (4af0 <_ext_irq_handler+0x124>)
    4aa0:	4798      	blx	r3
    4aa2:	4603      	mov	r3, r0
    4aa4:	b2db      	uxtb	r3, r3
    4aa6:	3b01      	subs	r3, #1
    4aa8:	b2db      	uxtb	r3, r3
    4aaa:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
    4ab4:	d1b2      	bne.n	4a1c <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4ab6:	4808      	ldr	r0, [pc, #32]	; (4ad8 <_ext_irq_handler+0x10c>)
    4ab8:	4b08      	ldr	r3, [pc, #32]	; (4adc <_ext_irq_handler+0x110>)
    4aba:	4798      	blx	r3
    4abc:	4603      	mov	r3, r0
    4abe:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4ac0:	683b      	ldr	r3, [r7, #0]
    4ac2:	4619      	mov	r1, r3
    4ac4:	4804      	ldr	r0, [pc, #16]	; (4ad8 <_ext_irq_handler+0x10c>)
    4ac6:	4b06      	ldr	r3, [pc, #24]	; (4ae0 <_ext_irq_handler+0x114>)
    4ac8:	4798      	blx	r3
	while (flags) {
    4aca:	683b      	ldr	r3, [r7, #0]
    4acc:	2b00      	cmp	r3, #0
    4ace:	d19b      	bne.n	4a08 <_ext_irq_handler+0x3c>
	}
}
    4ad0:	bf00      	nop
    4ad2:	3710      	adds	r7, #16
    4ad4:	46bd      	mov	sp, r7
    4ad6:	bd80      	pop	{r7, pc}
    4ad8:	40002800 	.word	0x40002800
    4adc:	00004581 	.word	0x00004581
    4ae0:	00004599 	.word	0x00004599
    4ae4:	20000abc 	.word	0x20000abc
    4ae8:	0000ed48 	.word	0x0000ed48
    4aec:	000037fd 	.word	0x000037fd
    4af0:	0000e875 	.word	0x0000e875
    4af4:	0000ed00 	.word	0x0000ed00

00004af8 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    4af8:	b580      	push	{r7, lr}
    4afa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4afc:	4b01      	ldr	r3, [pc, #4]	; (4b04 <EIC_0_Handler+0xc>)
    4afe:	4798      	blx	r3
} /**
    4b00:	bf00      	nop
    4b02:	bd80      	pop	{r7, pc}
    4b04:	000049cd 	.word	0x000049cd

00004b08 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    4b08:	b580      	push	{r7, lr}
    4b0a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4b0c:	4b01      	ldr	r3, [pc, #4]	; (4b14 <EIC_1_Handler+0xc>)
    4b0e:	4798      	blx	r3
} /**
    4b10:	bf00      	nop
    4b12:	bd80      	pop	{r7, pc}
    4b14:	000049cd 	.word	0x000049cd

00004b18 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    4b18:	b580      	push	{r7, lr}
    4b1a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4b1c:	4b01      	ldr	r3, [pc, #4]	; (4b24 <EIC_3_Handler+0xc>)
    4b1e:	4798      	blx	r3
} /**
    4b20:	bf00      	nop
    4b22:	bd80      	pop	{r7, pc}
    4b24:	000049cd 	.word	0x000049cd

00004b28 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    4b28:	b580      	push	{r7, lr}
    4b2a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4b2c:	4b01      	ldr	r3, [pc, #4]	; (4b34 <EIC_4_Handler+0xc>)
    4b2e:	4798      	blx	r3
} /**
    4b30:	bf00      	nop
    4b32:	bd80      	pop	{r7, pc}
    4b34:	000049cd 	.word	0x000049cd

00004b38 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4b38:	b580      	push	{r7, lr}
    4b3a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4b3c:	4b01      	ldr	r3, [pc, #4]	; (4b44 <EIC_5_Handler+0xc>)
    4b3e:	4798      	blx	r3
} /**
    4b40:	bf00      	nop
    4b42:	bd80      	pop	{r7, pc}
    4b44:	000049cd 	.word	0x000049cd

00004b48 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4b48:	b580      	push	{r7, lr}
    4b4a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4b4c:	4b01      	ldr	r3, [pc, #4]	; (4b54 <EIC_6_Handler+0xc>)
    4b4e:	4798      	blx	r3
} /**
    4b50:	bf00      	nop
    4b52:	bd80      	pop	{r7, pc}
    4b54:	000049cd 	.word	0x000049cd

00004b58 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4b58:	b580      	push	{r7, lr}
    4b5a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4b5c:	4b01      	ldr	r3, [pc, #4]	; (4b64 <EIC_7_Handler+0xc>)
    4b5e:	4798      	blx	r3
} /**
    4b60:	bf00      	nop
    4b62:	bd80      	pop	{r7, pc}
    4b64:	000049cd 	.word	0x000049cd

00004b68 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    4b68:	b580      	push	{r7, lr}
    4b6a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4b6c:	4b01      	ldr	r3, [pc, #4]	; (4b74 <EIC_8_Handler+0xc>)
    4b6e:	4798      	blx	r3
} /**
    4b70:	bf00      	nop
    4b72:	bd80      	pop	{r7, pc}
    4b74:	000049cd 	.word	0x000049cd

00004b78 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    4b78:	b580      	push	{r7, lr}
    4b7a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4b7c:	4b01      	ldr	r3, [pc, #4]	; (4b84 <EIC_9_Handler+0xc>)
    4b7e:	4798      	blx	r3
}
    4b80:	bf00      	nop
    4b82:	bd80      	pop	{r7, pc}
    4b84:	000049cd 	.word	0x000049cd

00004b88 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4b88:	b480      	push	{r7}
    4b8a:	b085      	sub	sp, #20
    4b8c:	af00      	add	r7, sp, #0
    4b8e:	60f8      	str	r0, [r7, #12]
    4b90:	460b      	mov	r3, r1
    4b92:	607a      	str	r2, [r7, #4]
    4b94:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4b96:	7afa      	ldrb	r2, [r7, #11]
    4b98:	68fb      	ldr	r3, [r7, #12]
    4b9a:	3248      	adds	r2, #72	; 0x48
    4b9c:	6879      	ldr	r1, [r7, #4]
    4b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4ba2:	bf00      	nop
    4ba4:	3714      	adds	r7, #20
    4ba6:	46bd      	mov	sp, r7
    4ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bac:	4770      	bx	lr

00004bae <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    4bae:	b480      	push	{r7}
    4bb0:	b083      	sub	sp, #12
    4bb2:	af00      	add	r7, sp, #0
    4bb4:	6078      	str	r0, [r7, #4]
    4bb6:	460b      	mov	r3, r1
    4bb8:	70fb      	strb	r3, [r7, #3]
    4bba:	4613      	mov	r3, r2
    4bbc:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    4bbe:	78fb      	ldrb	r3, [r7, #3]
    4bc0:	687a      	ldr	r2, [r7, #4]
    4bc2:	3304      	adds	r3, #4
    4bc4:	00db      	lsls	r3, r3, #3
    4bc6:	4413      	add	r3, r2
    4bc8:	78ba      	ldrb	r2, [r7, #2]
    4bca:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4bcc:	78fb      	ldrb	r3, [r7, #3]
    4bce:	78ba      	ldrb	r2, [r7, #2]
    4bd0:	43d2      	mvns	r2, r2
    4bd2:	b2d1      	uxtb	r1, r2
    4bd4:	687a      	ldr	r2, [r7, #4]
    4bd6:	3304      	adds	r3, #4
    4bd8:	00db      	lsls	r3, r3, #3
    4bda:	4413      	add	r3, r2
    4bdc:	460a      	mov	r2, r1
    4bde:	711a      	strb	r2, [r3, #4]
}
    4be0:	bf00      	nop
    4be2:	370c      	adds	r7, #12
    4be4:	46bd      	mov	sp, r7
    4be6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bea:	4770      	bx	lr

00004bec <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4bec:	b480      	push	{r7}
    4bee:	b085      	sub	sp, #20
    4bf0:	af00      	add	r7, sp, #0
    4bf2:	60f8      	str	r0, [r7, #12]
    4bf4:	460b      	mov	r3, r1
    4bf6:	607a      	str	r2, [r7, #4]
    4bf8:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    4bfa:	7afa      	ldrb	r2, [r7, #11]
    4bfc:	68fb      	ldr	r3, [r7, #12]
    4bfe:	3204      	adds	r2, #4
    4c00:	6879      	ldr	r1, [r7, #4]
    4c02:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4c06:	bf00      	nop
    4c08:	3714      	adds	r7, #20
    4c0a:	46bd      	mov	sp, r7
    4c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c10:	4770      	bx	lr
	...

00004c14 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4c14:	b580      	push	{r7, lr}
    4c16:	b082      	sub	sp, #8
    4c18:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    4c1a:	2300      	movs	r3, #0
    4c1c:	71fb      	strb	r3, [r7, #7]
    4c1e:	e00b      	b.n	4c38 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4c20:	79fb      	ldrb	r3, [r7, #7]
    4c22:	4a18      	ldr	r2, [pc, #96]	; (4c84 <_event_system_init+0x70>)
    4c24:	5cd3      	ldrb	r3, [r2, r3]
    4c26:	461a      	mov	r2, r3
    4c28:	79fb      	ldrb	r3, [r7, #7]
    4c2a:	4619      	mov	r1, r3
    4c2c:	4816      	ldr	r0, [pc, #88]	; (4c88 <_event_system_init+0x74>)
    4c2e:	4b17      	ldr	r3, [pc, #92]	; (4c8c <_event_system_init+0x78>)
    4c30:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4c32:	79fb      	ldrb	r3, [r7, #7]
    4c34:	3301      	adds	r3, #1
    4c36:	71fb      	strb	r3, [r7, #7]
    4c38:	79fb      	ldrb	r3, [r7, #7]
    4c3a:	2b42      	cmp	r3, #66	; 0x42
    4c3c:	d9f0      	bls.n	4c20 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4c3e:	2300      	movs	r3, #0
    4c40:	71fb      	strb	r3, [r7, #7]
    4c42:	e016      	b.n	4c72 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4c44:	79fb      	ldrb	r3, [r7, #7]
    4c46:	4a12      	ldr	r2, [pc, #72]	; (4c90 <_event_system_init+0x7c>)
    4c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4c4c:	461a      	mov	r2, r3
    4c4e:	79fb      	ldrb	r3, [r7, #7]
    4c50:	4619      	mov	r1, r3
    4c52:	480d      	ldr	r0, [pc, #52]	; (4c88 <_event_system_init+0x74>)
    4c54:	4b0f      	ldr	r3, [pc, #60]	; (4c94 <_event_system_init+0x80>)
    4c56:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4c58:	79fb      	ldrb	r3, [r7, #7]
    4c5a:	4a0f      	ldr	r2, [pc, #60]	; (4c98 <_event_system_init+0x84>)
    4c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4c60:	b2da      	uxtb	r2, r3
    4c62:	79fb      	ldrb	r3, [r7, #7]
    4c64:	4619      	mov	r1, r3
    4c66:	4808      	ldr	r0, [pc, #32]	; (4c88 <_event_system_init+0x74>)
    4c68:	4b0c      	ldr	r3, [pc, #48]	; (4c9c <_event_system_init+0x88>)
    4c6a:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4c6c:	79fb      	ldrb	r3, [r7, #7]
    4c6e:	3301      	adds	r3, #1
    4c70:	71fb      	strb	r3, [r7, #7]
    4c72:	79fb      	ldrb	r3, [r7, #7]
    4c74:	2b1f      	cmp	r3, #31
    4c76:	d9e5      	bls.n	4c44 <_event_system_init+0x30>
	}

	return ERR_NONE;
    4c78:	2300      	movs	r3, #0
}
    4c7a:	4618      	mov	r0, r3
    4c7c:	3708      	adds	r7, #8
    4c7e:	46bd      	mov	sp, r7
    4c80:	bd80      	pop	{r7, pc}
    4c82:	bf00      	nop
    4c84:	0000ed60 	.word	0x0000ed60
    4c88:	4100e000 	.word	0x4100e000
    4c8c:	00004b89 	.word	0x00004b89
    4c90:	0000eda4 	.word	0x0000eda4
    4c94:	00004bed 	.word	0x00004bed
    4c98:	0000ede4 	.word	0x0000ede4
    4c9c:	00004baf 	.word	0x00004baf

00004ca0 <hri_gclk_wait_for_sync>:
{
    4ca0:	b480      	push	{r7}
    4ca2:	b083      	sub	sp, #12
    4ca4:	af00      	add	r7, sp, #0
    4ca6:	6078      	str	r0, [r7, #4]
    4ca8:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4caa:	bf00      	nop
    4cac:	687b      	ldr	r3, [r7, #4]
    4cae:	685a      	ldr	r2, [r3, #4]
    4cb0:	683b      	ldr	r3, [r7, #0]
    4cb2:	4013      	ands	r3, r2
    4cb4:	2b00      	cmp	r3, #0
    4cb6:	d1f9      	bne.n	4cac <hri_gclk_wait_for_sync+0xc>
}
    4cb8:	bf00      	nop
    4cba:	370c      	adds	r7, #12
    4cbc:	46bd      	mov	sp, r7
    4cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cc2:	4770      	bx	lr

00004cc4 <hri_gclk_write_GENCTRL_reg>:
{
    4cc4:	b580      	push	{r7, lr}
    4cc6:	b084      	sub	sp, #16
    4cc8:	af00      	add	r7, sp, #0
    4cca:	60f8      	str	r0, [r7, #12]
    4ccc:	460b      	mov	r3, r1
    4cce:	607a      	str	r2, [r7, #4]
    4cd0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4cd2:	7afa      	ldrb	r2, [r7, #11]
    4cd4:	68fb      	ldr	r3, [r7, #12]
    4cd6:	3208      	adds	r2, #8
    4cd8:	6879      	ldr	r1, [r7, #4]
    4cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4cde:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4ce2:	68f8      	ldr	r0, [r7, #12]
    4ce4:	4b02      	ldr	r3, [pc, #8]	; (4cf0 <hri_gclk_write_GENCTRL_reg+0x2c>)
    4ce6:	4798      	blx	r3
}
    4ce8:	bf00      	nop
    4cea:	3710      	adds	r7, #16
    4cec:	46bd      	mov	sp, r7
    4cee:	bd80      	pop	{r7, pc}
    4cf0:	00004ca1 	.word	0x00004ca1

00004cf4 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    4cf4:	b580      	push	{r7, lr}
    4cf6:	b082      	sub	sp, #8
    4cf8:	af00      	add	r7, sp, #0
    4cfa:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    4cfc:	687b      	ldr	r3, [r7, #4]
    4cfe:	f003 0301 	and.w	r3, r3, #1
    4d02:	2b00      	cmp	r3, #0
    4d04:	d004      	beq.n	4d10 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    4d06:	4a3b      	ldr	r2, [pc, #236]	; (4df4 <_gclk_init_generators_by_fref+0x100>)
    4d08:	2100      	movs	r1, #0
    4d0a:	483b      	ldr	r0, [pc, #236]	; (4df8 <_gclk_init_generators_by_fref+0x104>)
    4d0c:	4b3b      	ldr	r3, [pc, #236]	; (4dfc <_gclk_init_generators_by_fref+0x108>)
    4d0e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4d10:	687b      	ldr	r3, [r7, #4]
    4d12:	f003 0302 	and.w	r3, r3, #2
    4d16:	2b00      	cmp	r3, #0
    4d18:	d004      	beq.n	4d24 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    4d1a:	4a39      	ldr	r2, [pc, #228]	; (4e00 <_gclk_init_generators_by_fref+0x10c>)
    4d1c:	2101      	movs	r1, #1
    4d1e:	4836      	ldr	r0, [pc, #216]	; (4df8 <_gclk_init_generators_by_fref+0x104>)
    4d20:	4b36      	ldr	r3, [pc, #216]	; (4dfc <_gclk_init_generators_by_fref+0x108>)
    4d22:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4d24:	687b      	ldr	r3, [r7, #4]
    4d26:	f003 0304 	and.w	r3, r3, #4
    4d2a:	2b00      	cmp	r3, #0
    4d2c:	d004      	beq.n	4d38 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    4d2e:	4a35      	ldr	r2, [pc, #212]	; (4e04 <_gclk_init_generators_by_fref+0x110>)
    4d30:	2102      	movs	r1, #2
    4d32:	4831      	ldr	r0, [pc, #196]	; (4df8 <_gclk_init_generators_by_fref+0x104>)
    4d34:	4b31      	ldr	r3, [pc, #196]	; (4dfc <_gclk_init_generators_by_fref+0x108>)
    4d36:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4d38:	687b      	ldr	r3, [r7, #4]
    4d3a:	f003 0308 	and.w	r3, r3, #8
    4d3e:	2b00      	cmp	r3, #0
    4d40:	d004      	beq.n	4d4c <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    4d42:	4a31      	ldr	r2, [pc, #196]	; (4e08 <_gclk_init_generators_by_fref+0x114>)
    4d44:	2103      	movs	r1, #3
    4d46:	482c      	ldr	r0, [pc, #176]	; (4df8 <_gclk_init_generators_by_fref+0x104>)
    4d48:	4b2c      	ldr	r3, [pc, #176]	; (4dfc <_gclk_init_generators_by_fref+0x108>)
    4d4a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4d4c:	687b      	ldr	r3, [r7, #4]
    4d4e:	f003 0310 	and.w	r3, r3, #16
    4d52:	2b00      	cmp	r3, #0
    4d54:	d004      	beq.n	4d60 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4d56:	4a2d      	ldr	r2, [pc, #180]	; (4e0c <_gclk_init_generators_by_fref+0x118>)
    4d58:	2104      	movs	r1, #4
    4d5a:	4827      	ldr	r0, [pc, #156]	; (4df8 <_gclk_init_generators_by_fref+0x104>)
    4d5c:	4b27      	ldr	r3, [pc, #156]	; (4dfc <_gclk_init_generators_by_fref+0x108>)
    4d5e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4d60:	687b      	ldr	r3, [r7, #4]
    4d62:	f003 0320 	and.w	r3, r3, #32
    4d66:	2b00      	cmp	r3, #0
    4d68:	d004      	beq.n	4d74 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    4d6a:	4a29      	ldr	r2, [pc, #164]	; (4e10 <_gclk_init_generators_by_fref+0x11c>)
    4d6c:	2105      	movs	r1, #5
    4d6e:	4822      	ldr	r0, [pc, #136]	; (4df8 <_gclk_init_generators_by_fref+0x104>)
    4d70:	4b22      	ldr	r3, [pc, #136]	; (4dfc <_gclk_init_generators_by_fref+0x108>)
    4d72:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    4d74:	687b      	ldr	r3, [r7, #4]
    4d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4d7a:	2b00      	cmp	r3, #0
    4d7c:	d004      	beq.n	4d88 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    4d7e:	4a25      	ldr	r2, [pc, #148]	; (4e14 <_gclk_init_generators_by_fref+0x120>)
    4d80:	2106      	movs	r1, #6
    4d82:	481d      	ldr	r0, [pc, #116]	; (4df8 <_gclk_init_generators_by_fref+0x104>)
    4d84:	4b1d      	ldr	r3, [pc, #116]	; (4dfc <_gclk_init_generators_by_fref+0x108>)
    4d86:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    4d88:	687b      	ldr	r3, [r7, #4]
    4d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4d8e:	2b00      	cmp	r3, #0
    4d90:	d004      	beq.n	4d9c <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    4d92:	4a21      	ldr	r2, [pc, #132]	; (4e18 <_gclk_init_generators_by_fref+0x124>)
    4d94:	2107      	movs	r1, #7
    4d96:	4818      	ldr	r0, [pc, #96]	; (4df8 <_gclk_init_generators_by_fref+0x104>)
    4d98:	4b18      	ldr	r3, [pc, #96]	; (4dfc <_gclk_init_generators_by_fref+0x108>)
    4d9a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    4d9c:	687b      	ldr	r3, [r7, #4]
    4d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4da2:	2b00      	cmp	r3, #0
    4da4:	d004      	beq.n	4db0 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    4da6:	4a1d      	ldr	r2, [pc, #116]	; (4e1c <_gclk_init_generators_by_fref+0x128>)
    4da8:	2108      	movs	r1, #8
    4daa:	4813      	ldr	r0, [pc, #76]	; (4df8 <_gclk_init_generators_by_fref+0x104>)
    4dac:	4b13      	ldr	r3, [pc, #76]	; (4dfc <_gclk_init_generators_by_fref+0x108>)
    4dae:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    4db0:	687b      	ldr	r3, [r7, #4]
    4db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4db6:	2b00      	cmp	r3, #0
    4db8:	d004      	beq.n	4dc4 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    4dba:	4a19      	ldr	r2, [pc, #100]	; (4e20 <_gclk_init_generators_by_fref+0x12c>)
    4dbc:	2109      	movs	r1, #9
    4dbe:	480e      	ldr	r0, [pc, #56]	; (4df8 <_gclk_init_generators_by_fref+0x104>)
    4dc0:	4b0e      	ldr	r3, [pc, #56]	; (4dfc <_gclk_init_generators_by_fref+0x108>)
    4dc2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4dc4:	687b      	ldr	r3, [r7, #4]
    4dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4dca:	2b00      	cmp	r3, #0
    4dcc:	d004      	beq.n	4dd8 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    4dce:	4a15      	ldr	r2, [pc, #84]	; (4e24 <_gclk_init_generators_by_fref+0x130>)
    4dd0:	210a      	movs	r1, #10
    4dd2:	4809      	ldr	r0, [pc, #36]	; (4df8 <_gclk_init_generators_by_fref+0x104>)
    4dd4:	4b09      	ldr	r3, [pc, #36]	; (4dfc <_gclk_init_generators_by_fref+0x108>)
    4dd6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4dd8:	687b      	ldr	r3, [r7, #4]
    4dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    4dde:	2b00      	cmp	r3, #0
    4de0:	d004      	beq.n	4dec <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    4de2:	4a11      	ldr	r2, [pc, #68]	; (4e28 <_gclk_init_generators_by_fref+0x134>)
    4de4:	210b      	movs	r1, #11
    4de6:	4804      	ldr	r0, [pc, #16]	; (4df8 <_gclk_init_generators_by_fref+0x104>)
    4de8:	4b04      	ldr	r3, [pc, #16]	; (4dfc <_gclk_init_generators_by_fref+0x108>)
    4dea:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4dec:	bf00      	nop
    4dee:	3708      	adds	r7, #8
    4df0:	46bd      	mov	sp, r7
    4df2:	bd80      	pop	{r7, pc}
    4df4:	00010107 	.word	0x00010107
    4df8:	40001c00 	.word	0x40001c00
    4dfc:	00004cc5 	.word	0x00004cc5
    4e00:	00010907 	.word	0x00010907
    4e04:	00010906 	.word	0x00010906
    4e08:	00020908 	.word	0x00020908
    4e0c:	00010901 	.word	0x00010901
    4e10:	00062901 	.word	0x00062901
    4e14:	000c2901 	.word	0x000c2901
    4e18:	00082908 	.word	0x00082908
    4e1c:	00032901 	.word	0x00032901
    4e20:	00011908 	.word	0x00011908
    4e24:	00010905 	.word	0x00010905
    4e28:	00041905 	.word	0x00041905

00004e2c <hri_mclk_write_CPUDIV_reg>:
{
    4e2c:	b480      	push	{r7}
    4e2e:	b083      	sub	sp, #12
    4e30:	af00      	add	r7, sp, #0
    4e32:	6078      	str	r0, [r7, #4]
    4e34:	460b      	mov	r3, r1
    4e36:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    4e38:	687b      	ldr	r3, [r7, #4]
    4e3a:	78fa      	ldrb	r2, [r7, #3]
    4e3c:	715a      	strb	r2, [r3, #5]
}
    4e3e:	bf00      	nop
    4e40:	370c      	adds	r7, #12
    4e42:	46bd      	mov	sp, r7
    4e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e48:	4770      	bx	lr
	...

00004e4c <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    4e4c:	b580      	push	{r7, lr}
    4e4e:	b082      	sub	sp, #8
    4e50:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    4e52:	4b05      	ldr	r3, [pc, #20]	; (4e68 <_mclk_init+0x1c>)
    4e54:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    4e56:	2101      	movs	r1, #1
    4e58:	6878      	ldr	r0, [r7, #4]
    4e5a:	4b04      	ldr	r3, [pc, #16]	; (4e6c <_mclk_init+0x20>)
    4e5c:	4798      	blx	r3
}
    4e5e:	bf00      	nop
    4e60:	3708      	adds	r7, #8
    4e62:	46bd      	mov	sp, r7
    4e64:	bd80      	pop	{r7, pc}
    4e66:	bf00      	nop
    4e68:	40000800 	.word	0x40000800
    4e6c:	00004e2d 	.word	0x00004e2d

00004e70 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4e70:	b480      	push	{r7}
    4e72:	b083      	sub	sp, #12
    4e74:	af00      	add	r7, sp, #0
    4e76:	6078      	str	r0, [r7, #4]
    4e78:	460b      	mov	r3, r1
    4e7a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4e7c:	687b      	ldr	r3, [r7, #4]
    4e7e:	78fa      	ldrb	r2, [r7, #3]
    4e80:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4e82:	bf00      	nop
    4e84:	370c      	adds	r7, #12
    4e86:	46bd      	mov	sp, r7
    4e88:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e8c:	4770      	bx	lr

00004e8e <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4e8e:	b480      	push	{r7}
    4e90:	b083      	sub	sp, #12
    4e92:	af00      	add	r7, sp, #0
    4e94:	6078      	str	r0, [r7, #4]
    4e96:	460b      	mov	r3, r1
    4e98:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4e9a:	687b      	ldr	r3, [r7, #4]
    4e9c:	887a      	ldrh	r2, [r7, #2]
    4e9e:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4ea0:	bf00      	nop
    4ea2:	370c      	adds	r7, #12
    4ea4:	46bd      	mov	sp, r7
    4ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4eaa:	4770      	bx	lr

00004eac <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4eac:	b480      	push	{r7}
    4eae:	b083      	sub	sp, #12
    4eb0:	af00      	add	r7, sp, #0
    4eb2:	6078      	str	r0, [r7, #4]
    4eb4:	460b      	mov	r3, r1
    4eb6:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4eb8:	687b      	ldr	r3, [r7, #4]
    4eba:	78fa      	ldrb	r2, [r7, #3]
    4ebc:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4ebe:	bf00      	nop
    4ec0:	370c      	adds	r7, #12
    4ec2:	46bd      	mov	sp, r7
    4ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ec8:	4770      	bx	lr

00004eca <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4eca:	b480      	push	{r7}
    4ecc:	b083      	sub	sp, #12
    4ece:	af00      	add	r7, sp, #0
    4ed0:	6078      	str	r0, [r7, #4]
    4ed2:	460b      	mov	r3, r1
    4ed4:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    4ed6:	687b      	ldr	r3, [r7, #4]
    4ed8:	78fa      	ldrb	r2, [r7, #3]
    4eda:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4edc:	bf00      	nop
    4ede:	370c      	adds	r7, #12
    4ee0:	46bd      	mov	sp, r7
    4ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ee6:	4770      	bx	lr

00004ee8 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    4ee8:	b480      	push	{r7}
    4eea:	b085      	sub	sp, #20
    4eec:	af00      	add	r7, sp, #0
    4eee:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4ef0:	687b      	ldr	r3, [r7, #4]
    4ef2:	69db      	ldr	r3, [r3, #28]
    4ef4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    4ef6:	68fb      	ldr	r3, [r7, #12]
    4ef8:	0a1b      	lsrs	r3, r3, #8
    4efa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4efe:	60fb      	str	r3, [r7, #12]
	return tmp;
    4f00:	68fb      	ldr	r3, [r7, #12]
}
    4f02:	4618      	mov	r0, r3
    4f04:	3714      	adds	r7, #20
    4f06:	46bd      	mov	sp, r7
    4f08:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f0c:	4770      	bx	lr

00004f0e <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    4f0e:	b480      	push	{r7}
    4f10:	b083      	sub	sp, #12
    4f12:	af00      	add	r7, sp, #0
    4f14:	6078      	str	r0, [r7, #4]
    4f16:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    4f18:	687b      	ldr	r3, [r7, #4]
    4f1a:	683a      	ldr	r2, [r7, #0]
    4f1c:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4f1e:	bf00      	nop
    4f20:	370c      	adds	r7, #12
    4f22:	46bd      	mov	sp, r7
    4f24:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f28:	4770      	bx	lr
	...

00004f2c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    4f2c:	b580      	push	{r7, lr}
    4f2e:	b082      	sub	sp, #8
    4f30:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    4f32:	4b13      	ldr	r3, [pc, #76]	; (4f80 <_osc32kctrl_init_sources+0x54>)
    4f34:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    4f36:	2300      	movs	r3, #0
    4f38:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    4f3a:	f242 018e 	movw	r1, #8334	; 0x208e
    4f3e:	6878      	ldr	r0, [r7, #4]
    4f40:	4b10      	ldr	r3, [pc, #64]	; (4f84 <_osc32kctrl_init_sources+0x58>)
    4f42:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    4f44:	2100      	movs	r1, #0
    4f46:	6878      	ldr	r0, [r7, #4]
    4f48:	4b0f      	ldr	r3, [pc, #60]	; (4f88 <_osc32kctrl_init_sources+0x5c>)
    4f4a:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    4f4c:	2100      	movs	r1, #0
    4f4e:	6878      	ldr	r0, [r7, #4]
    4f50:	4b0e      	ldr	r3, [pc, #56]	; (4f8c <_osc32kctrl_init_sources+0x60>)
    4f52:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    4f54:	6878      	ldr	r0, [r7, #4]
    4f56:	4b0e      	ldr	r3, [pc, #56]	; (4f90 <_osc32kctrl_init_sources+0x64>)
    4f58:	4798      	blx	r3
    4f5a:	4603      	mov	r3, r0
    4f5c:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    4f5e:	887b      	ldrh	r3, [r7, #2]
    4f60:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    4f62:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    4f66:	4619      	mov	r1, r3
    4f68:	6878      	ldr	r0, [r7, #4]
    4f6a:	4b0a      	ldr	r3, [pc, #40]	; (4f94 <_osc32kctrl_init_sources+0x68>)
    4f6c:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4f6e:	2100      	movs	r1, #0
    4f70:	6878      	ldr	r0, [r7, #4]
    4f72:	4b09      	ldr	r3, [pc, #36]	; (4f98 <_osc32kctrl_init_sources+0x6c>)
    4f74:	4798      	blx	r3
	(void)calib;
}
    4f76:	bf00      	nop
    4f78:	3708      	adds	r7, #8
    4f7a:	46bd      	mov	sp, r7
    4f7c:	bd80      	pop	{r7, pc}
    4f7e:	bf00      	nop
    4f80:	40001400 	.word	0x40001400
    4f84:	00004e8f 	.word	0x00004e8f
    4f88:	00004ead 	.word	0x00004ead
    4f8c:	00004ecb 	.word	0x00004ecb
    4f90:	00004ee9 	.word	0x00004ee9
    4f94:	00004f0f 	.word	0x00004f0f
    4f98:	00004e71 	.word	0x00004e71

00004f9c <hri_gclk_wait_for_sync>:
{
    4f9c:	b480      	push	{r7}
    4f9e:	b083      	sub	sp, #12
    4fa0:	af00      	add	r7, sp, #0
    4fa2:	6078      	str	r0, [r7, #4]
    4fa4:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4fa6:	bf00      	nop
    4fa8:	687b      	ldr	r3, [r7, #4]
    4faa:	685a      	ldr	r2, [r3, #4]
    4fac:	683b      	ldr	r3, [r7, #0]
    4fae:	4013      	ands	r3, r2
    4fb0:	2b00      	cmp	r3, #0
    4fb2:	d1f9      	bne.n	4fa8 <hri_gclk_wait_for_sync+0xc>
}
    4fb4:	bf00      	nop
    4fb6:	370c      	adds	r7, #12
    4fb8:	46bd      	mov	sp, r7
    4fba:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fbe:	4770      	bx	lr

00004fc0 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4fc0:	b480      	push	{r7}
    4fc2:	b083      	sub	sp, #12
    4fc4:	af00      	add	r7, sp, #0
    4fc6:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4fc8:	687b      	ldr	r3, [r7, #4]
    4fca:	685b      	ldr	r3, [r3, #4]
    4fcc:	089b      	lsrs	r3, r3, #2
    4fce:	f003 0301 	and.w	r3, r3, #1
    4fd2:	2b00      	cmp	r3, #0
    4fd4:	bf14      	ite	ne
    4fd6:	2301      	movne	r3, #1
    4fd8:	2300      	moveq	r3, #0
    4fda:	b2db      	uxtb	r3, r3
}
    4fdc:	4618      	mov	r0, r3
    4fde:	370c      	adds	r7, #12
    4fe0:	46bd      	mov	sp, r7
    4fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fe6:	4770      	bx	lr

00004fe8 <hri_gclk_read_SYNCBUSY_reg>:
{
    4fe8:	b480      	push	{r7}
    4fea:	b083      	sub	sp, #12
    4fec:	af00      	add	r7, sp, #0
    4fee:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4ff0:	687b      	ldr	r3, [r7, #4]
    4ff2:	685b      	ldr	r3, [r3, #4]
}
    4ff4:	4618      	mov	r0, r3
    4ff6:	370c      	adds	r7, #12
    4ff8:	46bd      	mov	sp, r7
    4ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ffe:	4770      	bx	lr

00005000 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    5000:	b580      	push	{r7, lr}
    5002:	b086      	sub	sp, #24
    5004:	af00      	add	r7, sp, #0
    5006:	60f8      	str	r0, [r7, #12]
    5008:	460b      	mov	r3, r1
    500a:	607a      	str	r2, [r7, #4]
    500c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    500e:	7afa      	ldrb	r2, [r7, #11]
    5010:	68fb      	ldr	r3, [r7, #12]
    5012:	3208      	adds	r2, #8
    5014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5018:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    501a:	697b      	ldr	r3, [r7, #20]
    501c:	f023 030f 	bic.w	r3, r3, #15
    5020:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    5022:	687b      	ldr	r3, [r7, #4]
    5024:	f003 030f 	and.w	r3, r3, #15
    5028:	697a      	ldr	r2, [r7, #20]
    502a:	4313      	orrs	r3, r2
    502c:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    502e:	7afa      	ldrb	r2, [r7, #11]
    5030:	68fb      	ldr	r3, [r7, #12]
    5032:	3208      	adds	r2, #8
    5034:	6979      	ldr	r1, [r7, #20]
    5036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    503a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    503e:	68f8      	ldr	r0, [r7, #12]
    5040:	4b02      	ldr	r3, [pc, #8]	; (504c <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    5042:	4798      	blx	r3
}
    5044:	bf00      	nop
    5046:	3718      	adds	r7, #24
    5048:	46bd      	mov	sp, r7
    504a:	bd80      	pop	{r7, pc}
    504c:	00004f9d 	.word	0x00004f9d

00005050 <hri_gclk_write_PCHCTRL_reg>:
{
    5050:	b480      	push	{r7}
    5052:	b085      	sub	sp, #20
    5054:	af00      	add	r7, sp, #0
    5056:	60f8      	str	r0, [r7, #12]
    5058:	460b      	mov	r3, r1
    505a:	607a      	str	r2, [r7, #4]
    505c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    505e:	7afa      	ldrb	r2, [r7, #11]
    5060:	68fb      	ldr	r3, [r7, #12]
    5062:	3220      	adds	r2, #32
    5064:	6879      	ldr	r1, [r7, #4]
    5066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    506a:	bf00      	nop
    506c:	3714      	adds	r7, #20
    506e:	46bd      	mov	sp, r7
    5070:	f85d 7b04 	ldr.w	r7, [sp], #4
    5074:	4770      	bx	lr

00005076 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    5076:	b480      	push	{r7}
    5078:	b085      	sub	sp, #20
    507a:	af00      	add	r7, sp, #0
    507c:	60f8      	str	r0, [r7, #12]
    507e:	460b      	mov	r3, r1
    5080:	607a      	str	r2, [r7, #4]
    5082:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    5084:	bf00      	nop
    5086:	7afa      	ldrb	r2, [r7, #11]
    5088:	68f9      	ldr	r1, [r7, #12]
    508a:	4613      	mov	r3, r2
    508c:	009b      	lsls	r3, r3, #2
    508e:	4413      	add	r3, r2
    5090:	009b      	lsls	r3, r3, #2
    5092:	440b      	add	r3, r1
    5094:	333c      	adds	r3, #60	; 0x3c
    5096:	681a      	ldr	r2, [r3, #0]
    5098:	687b      	ldr	r3, [r7, #4]
    509a:	4013      	ands	r3, r2
    509c:	2b00      	cmp	r3, #0
    509e:	d1f2      	bne.n	5086 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    50a0:	bf00      	nop
    50a2:	3714      	adds	r7, #20
    50a4:	46bd      	mov	sp, r7
    50a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    50aa:	4770      	bx	lr

000050ac <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    50ac:	b480      	push	{r7}
    50ae:	b083      	sub	sp, #12
    50b0:	af00      	add	r7, sp, #0
    50b2:	6078      	str	r0, [r7, #4]
    50b4:	460b      	mov	r3, r1
    50b6:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    50b8:	78fa      	ldrb	r2, [r7, #3]
    50ba:	6879      	ldr	r1, [r7, #4]
    50bc:	4613      	mov	r3, r2
    50be:	009b      	lsls	r3, r3, #2
    50c0:	4413      	add	r3, r2
    50c2:	009b      	lsls	r3, r3, #2
    50c4:	440b      	add	r3, r1
    50c6:	3340      	adds	r3, #64	; 0x40
    50c8:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    50ca:	f003 0301 	and.w	r3, r3, #1
    50ce:	2b00      	cmp	r3, #0
    50d0:	bf14      	ite	ne
    50d2:	2301      	movne	r3, #1
    50d4:	2300      	moveq	r3, #0
    50d6:	b2db      	uxtb	r3, r3
}
    50d8:	4618      	mov	r0, r3
    50da:	370c      	adds	r7, #12
    50dc:	46bd      	mov	sp, r7
    50de:	f85d 7b04 	ldr.w	r7, [sp], #4
    50e2:	4770      	bx	lr

000050e4 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    50e4:	b480      	push	{r7}
    50e6:	b083      	sub	sp, #12
    50e8:	af00      	add	r7, sp, #0
    50ea:	6078      	str	r0, [r7, #4]
    50ec:	460b      	mov	r3, r1
    50ee:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    50f0:	78fa      	ldrb	r2, [r7, #3]
    50f2:	6879      	ldr	r1, [r7, #4]
    50f4:	4613      	mov	r3, r2
    50f6:	009b      	lsls	r3, r3, #2
    50f8:	4413      	add	r3, r2
    50fa:	009b      	lsls	r3, r3, #2
    50fc:	440b      	add	r3, r1
    50fe:	3340      	adds	r3, #64	; 0x40
    5100:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    5102:	085b      	lsrs	r3, r3, #1
    5104:	f003 0301 	and.w	r3, r3, #1
    5108:	2b00      	cmp	r3, #0
    510a:	bf14      	ite	ne
    510c:	2301      	movne	r3, #1
    510e:	2300      	moveq	r3, #0
    5110:	b2db      	uxtb	r3, r3
}
    5112:	4618      	mov	r0, r3
    5114:	370c      	adds	r7, #12
    5116:	46bd      	mov	sp, r7
    5118:	f85d 7b04 	ldr.w	r7, [sp], #4
    511c:	4770      	bx	lr
	...

00005120 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    5120:	b580      	push	{r7, lr}
    5122:	b082      	sub	sp, #8
    5124:	af00      	add	r7, sp, #0
    5126:	6078      	str	r0, [r7, #4]
    5128:	460b      	mov	r3, r1
    512a:	70fb      	strb	r3, [r7, #3]
    512c:	4613      	mov	r3, r2
    512e:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5130:	78fa      	ldrb	r2, [r7, #3]
    5132:	6879      	ldr	r1, [r7, #4]
    5134:	4613      	mov	r3, r2
    5136:	009b      	lsls	r3, r3, #2
    5138:	4413      	add	r3, r2
    513a:	009b      	lsls	r3, r3, #2
    513c:	440b      	add	r3, r1
    513e:	3330      	adds	r3, #48	; 0x30
    5140:	78ba      	ldrb	r2, [r7, #2]
    5142:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    5144:	78fb      	ldrb	r3, [r7, #3]
    5146:	2202      	movs	r2, #2
    5148:	4619      	mov	r1, r3
    514a:	6878      	ldr	r0, [r7, #4]
    514c:	4b02      	ldr	r3, [pc, #8]	; (5158 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    514e:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5150:	bf00      	nop
    5152:	3708      	adds	r7, #8
    5154:	46bd      	mov	sp, r7
    5156:	bd80      	pop	{r7, pc}
    5158:	00005077 	.word	0x00005077

0000515c <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    515c:	b580      	push	{r7, lr}
    515e:	b084      	sub	sp, #16
    5160:	af00      	add	r7, sp, #0
    5162:	60f8      	str	r0, [r7, #12]
    5164:	460b      	mov	r3, r1
    5166:	607a      	str	r2, [r7, #4]
    5168:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    516a:	7afa      	ldrb	r2, [r7, #11]
    516c:	68f9      	ldr	r1, [r7, #12]
    516e:	4613      	mov	r3, r2
    5170:	009b      	lsls	r3, r3, #2
    5172:	4413      	add	r3, r2
    5174:	009b      	lsls	r3, r3, #2
    5176:	440b      	add	r3, r1
    5178:	3334      	adds	r3, #52	; 0x34
    517a:	687a      	ldr	r2, [r7, #4]
    517c:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    517e:	7afb      	ldrb	r3, [r7, #11]
    5180:	2206      	movs	r2, #6
    5182:	4619      	mov	r1, r3
    5184:	68f8      	ldr	r0, [r7, #12]
    5186:	4b03      	ldr	r3, [pc, #12]	; (5194 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    5188:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    518a:	bf00      	nop
    518c:	3710      	adds	r7, #16
    518e:	46bd      	mov	sp, r7
    5190:	bd80      	pop	{r7, pc}
    5192:	bf00      	nop
    5194:	00005077 	.word	0x00005077

00005198 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    5198:	b480      	push	{r7}
    519a:	b085      	sub	sp, #20
    519c:	af00      	add	r7, sp, #0
    519e:	60f8      	str	r0, [r7, #12]
    51a0:	460b      	mov	r3, r1
    51a2:	607a      	str	r2, [r7, #4]
    51a4:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    51a6:	7afa      	ldrb	r2, [r7, #11]
    51a8:	68f9      	ldr	r1, [r7, #12]
    51aa:	4613      	mov	r3, r2
    51ac:	009b      	lsls	r3, r3, #2
    51ae:	4413      	add	r3, r2
    51b0:	009b      	lsls	r3, r3, #2
    51b2:	440b      	add	r3, r1
    51b4:	3338      	adds	r3, #56	; 0x38
    51b6:	687a      	ldr	r2, [r7, #4]
    51b8:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    51ba:	bf00      	nop
    51bc:	3714      	adds	r7, #20
    51be:	46bd      	mov	sp, r7
    51c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    51c4:	4770      	bx	lr

000051c6 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    51c6:	b480      	push	{r7}
    51c8:	b083      	sub	sp, #12
    51ca:	af00      	add	r7, sp, #0
    51cc:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    51ce:	687b      	ldr	r3, [r7, #4]
    51d0:	691b      	ldr	r3, [r3, #16]
    51d2:	085b      	lsrs	r3, r3, #1
    51d4:	f003 0301 	and.w	r3, r3, #1
    51d8:	2b00      	cmp	r3, #0
    51da:	bf14      	ite	ne
    51dc:	2301      	movne	r3, #1
    51de:	2300      	moveq	r3, #0
    51e0:	b2db      	uxtb	r3, r3
}
    51e2:	4618      	mov	r0, r3
    51e4:	370c      	adds	r7, #12
    51e6:	46bd      	mov	sp, r7
    51e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    51ec:	4770      	bx	lr

000051ee <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    51ee:	b480      	push	{r7}
    51f0:	b083      	sub	sp, #12
    51f2:	af00      	add	r7, sp, #0
    51f4:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    51f6:	687b      	ldr	r3, [r7, #4]
    51f8:	691b      	ldr	r3, [r3, #16]
    51fa:	0a1b      	lsrs	r3, r3, #8
    51fc:	f003 0301 	and.w	r3, r3, #1
    5200:	2b00      	cmp	r3, #0
    5202:	bf14      	ite	ne
    5204:	2301      	movne	r3, #1
    5206:	2300      	moveq	r3, #0
    5208:	b2db      	uxtb	r3, r3
}
    520a:	4618      	mov	r0, r3
    520c:	370c      	adds	r7, #12
    520e:	46bd      	mov	sp, r7
    5210:	f85d 7b04 	ldr.w	r7, [sp], #4
    5214:	4770      	bx	lr

00005216 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    5216:	b480      	push	{r7}
    5218:	b085      	sub	sp, #20
    521a:	af00      	add	r7, sp, #0
    521c:	6078      	str	r0, [r7, #4]
    521e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5220:	687b      	ldr	r3, [r7, #4]
    5222:	691b      	ldr	r3, [r3, #16]
    5224:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5226:	68fa      	ldr	r2, [r7, #12]
    5228:	683b      	ldr	r3, [r7, #0]
    522a:	4013      	ands	r3, r2
    522c:	60fb      	str	r3, [r7, #12]
	return tmp;
    522e:	68fb      	ldr	r3, [r7, #12]
}
    5230:	4618      	mov	r0, r3
    5232:	3714      	adds	r7, #20
    5234:	46bd      	mov	sp, r7
    5236:	f85d 7b04 	ldr.w	r7, [sp], #4
    523a:	4770      	bx	lr

0000523c <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    523c:	b480      	push	{r7}
    523e:	b085      	sub	sp, #20
    5240:	af00      	add	r7, sp, #0
    5242:	60f8      	str	r0, [r7, #12]
    5244:	460b      	mov	r3, r1
    5246:	607a      	str	r2, [r7, #4]
    5248:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    524a:	7afb      	ldrb	r3, [r7, #11]
    524c:	68fa      	ldr	r2, [r7, #12]
    524e:	3304      	adds	r3, #4
    5250:	009b      	lsls	r3, r3, #2
    5252:	4413      	add	r3, r2
    5254:	687a      	ldr	r2, [r7, #4]
    5256:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5258:	bf00      	nop
    525a:	3714      	adds	r7, #20
    525c:	46bd      	mov	sp, r7
    525e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5262:	4770      	bx	lr

00005264 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    5264:	b480      	push	{r7}
    5266:	b083      	sub	sp, #12
    5268:	af00      	add	r7, sp, #0
    526a:	6078      	str	r0, [r7, #4]
    526c:	460b      	mov	r3, r1
    526e:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5270:	687b      	ldr	r3, [r7, #4]
    5272:	78fa      	ldrb	r2, [r7, #3]
    5274:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5276:	bf00      	nop
    5278:	370c      	adds	r7, #12
    527a:	46bd      	mov	sp, r7
    527c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5280:	4770      	bx	lr

00005282 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    5282:	b480      	push	{r7}
    5284:	b085      	sub	sp, #20
    5286:	af00      	add	r7, sp, #0
    5288:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    528a:	687b      	ldr	r3, [r7, #4]
    528c:	f893 3020 	ldrb.w	r3, [r3, #32]
    5290:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    5292:	7bfb      	ldrb	r3, [r7, #15]
    5294:	f003 0301 	and.w	r3, r3, #1
    5298:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    529a:	7bfb      	ldrb	r3, [r7, #15]
    529c:	2b00      	cmp	r3, #0
    529e:	bf14      	ite	ne
    52a0:	2301      	movne	r3, #1
    52a2:	2300      	moveq	r3, #0
    52a4:	b2db      	uxtb	r3, r3
}
    52a6:	4618      	mov	r0, r3
    52a8:	3714      	adds	r7, #20
    52aa:	46bd      	mov	sp, r7
    52ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    52b0:	4770      	bx	lr

000052b2 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    52b2:	b480      	push	{r7}
    52b4:	b083      	sub	sp, #12
    52b6:	af00      	add	r7, sp, #0
    52b8:	6078      	str	r0, [r7, #4]
    52ba:	460b      	mov	r3, r1
    52bc:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    52be:	687b      	ldr	r3, [r7, #4]
    52c0:	78fa      	ldrb	r2, [r7, #3]
    52c2:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    52c6:	bf00      	nop
    52c8:	370c      	adds	r7, #12
    52ca:	46bd      	mov	sp, r7
    52cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    52d0:	4770      	bx	lr

000052d2 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    52d2:	b480      	push	{r7}
    52d4:	b083      	sub	sp, #12
    52d6:	af00      	add	r7, sp, #0
    52d8:	6078      	str	r0, [r7, #4]
    52da:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    52dc:	687b      	ldr	r3, [r7, #4]
    52de:	683a      	ldr	r2, [r7, #0]
    52e0:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    52e2:	bf00      	nop
    52e4:	370c      	adds	r7, #12
    52e6:	46bd      	mov	sp, r7
    52e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    52ec:	4770      	bx	lr

000052ee <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    52ee:	b480      	push	{r7}
    52f0:	b083      	sub	sp, #12
    52f2:	af00      	add	r7, sp, #0
    52f4:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    52f6:	687b      	ldr	r3, [r7, #4]
    52f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    52fa:	4618      	mov	r0, r3
    52fc:	370c      	adds	r7, #12
    52fe:	46bd      	mov	sp, r7
    5300:	f85d 7b04 	ldr.w	r7, [sp], #4
    5304:	4770      	bx	lr

00005306 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    5306:	b480      	push	{r7}
    5308:	b083      	sub	sp, #12
    530a:	af00      	add	r7, sp, #0
    530c:	6078      	str	r0, [r7, #4]
    530e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5310:	687b      	ldr	r3, [r7, #4]
    5312:	683a      	ldr	r2, [r7, #0]
    5314:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5316:	bf00      	nop
    5318:	370c      	adds	r7, #12
    531a:	46bd      	mov	sp, r7
    531c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5320:	4770      	bx	lr

00005322 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    5322:	b480      	push	{r7}
    5324:	b085      	sub	sp, #20
    5326:	af00      	add	r7, sp, #0
    5328:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    532a:	687b      	ldr	r3, [r7, #4]
    532c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5330:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    5332:	7bfb      	ldrb	r3, [r7, #15]
    5334:	085b      	lsrs	r3, r3, #1
    5336:	b2db      	uxtb	r3, r3
    5338:	f003 0301 	and.w	r3, r3, #1
    533c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    533e:	7bfb      	ldrb	r3, [r7, #15]
    5340:	2b00      	cmp	r3, #0
    5342:	bf14      	ite	ne
    5344:	2301      	movne	r3, #1
    5346:	2300      	moveq	r3, #0
    5348:	b2db      	uxtb	r3, r3
}
    534a:	4618      	mov	r0, r3
    534c:	3714      	adds	r7, #20
    534e:	46bd      	mov	sp, r7
    5350:	f85d 7b04 	ldr.w	r7, [sp], #4
    5354:	4770      	bx	lr

00005356 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    5356:	b480      	push	{r7}
    5358:	b085      	sub	sp, #20
    535a:	af00      	add	r7, sp, #0
    535c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    535e:	687b      	ldr	r3, [r7, #4]
    5360:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5364:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    5366:	7bfb      	ldrb	r3, [r7, #15]
    5368:	089b      	lsrs	r3, r3, #2
    536a:	b2db      	uxtb	r3, r3
    536c:	f003 0301 	and.w	r3, r3, #1
    5370:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5372:	7bfb      	ldrb	r3, [r7, #15]
    5374:	2b00      	cmp	r3, #0
    5376:	bf14      	ite	ne
    5378:	2301      	movne	r3, #1
    537a:	2300      	moveq	r3, #0
    537c:	b2db      	uxtb	r3, r3
}
    537e:	4618      	mov	r0, r3
    5380:	3714      	adds	r7, #20
    5382:	46bd      	mov	sp, r7
    5384:	f85d 7b04 	ldr.w	r7, [sp], #4
    5388:	4770      	bx	lr

0000538a <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    538a:	b480      	push	{r7}
    538c:	b085      	sub	sp, #20
    538e:	af00      	add	r7, sp, #0
    5390:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5392:	687b      	ldr	r3, [r7, #4]
    5394:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5398:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    539a:	7bfb      	ldrb	r3, [r7, #15]
    539c:	08db      	lsrs	r3, r3, #3
    539e:	b2db      	uxtb	r3, r3
    53a0:	f003 0301 	and.w	r3, r3, #1
    53a4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    53a6:	7bfb      	ldrb	r3, [r7, #15]
    53a8:	2b00      	cmp	r3, #0
    53aa:	bf14      	ite	ne
    53ac:	2301      	movne	r3, #1
    53ae:	2300      	moveq	r3, #0
    53b0:	b2db      	uxtb	r3, r3
}
    53b2:	4618      	mov	r0, r3
    53b4:	3714      	adds	r7, #20
    53b6:	46bd      	mov	sp, r7
    53b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    53bc:	4770      	bx	lr

000053be <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    53be:	b480      	push	{r7}
    53c0:	b085      	sub	sp, #20
    53c2:	af00      	add	r7, sp, #0
    53c4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    53c6:	687b      	ldr	r3, [r7, #4]
    53c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    53cc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    53ce:	7bfb      	ldrb	r3, [r7, #15]
    53d0:	091b      	lsrs	r3, r3, #4
    53d2:	b2db      	uxtb	r3, r3
    53d4:	f003 0301 	and.w	r3, r3, #1
    53d8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    53da:	7bfb      	ldrb	r3, [r7, #15]
    53dc:	2b00      	cmp	r3, #0
    53de:	bf14      	ite	ne
    53e0:	2301      	movne	r3, #1
    53e2:	2300      	moveq	r3, #0
    53e4:	b2db      	uxtb	r3, r3
}
    53e6:	4618      	mov	r0, r3
    53e8:	3714      	adds	r7, #20
    53ea:	46bd      	mov	sp, r7
    53ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    53f0:	4770      	bx	lr
	...

000053f4 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    53f4:	b580      	push	{r7, lr}
    53f6:	b082      	sub	sp, #8
    53f8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    53fa:	4b0a      	ldr	r3, [pc, #40]	; (5424 <_oscctrl_init_sources+0x30>)
    53fc:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    53fe:	4a0a      	ldr	r2, [pc, #40]	; (5428 <_oscctrl_init_sources+0x34>)
    5400:	2101      	movs	r1, #1
    5402:	6878      	ldr	r0, [r7, #4]
    5404:	4b09      	ldr	r3, [pc, #36]	; (542c <_oscctrl_init_sources+0x38>)
    5406:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5408:	bf00      	nop
    540a:	6878      	ldr	r0, [r7, #4]
    540c:	4b08      	ldr	r3, [pc, #32]	; (5430 <_oscctrl_init_sources+0x3c>)
    540e:	4798      	blx	r3
    5410:	4603      	mov	r3, r0
    5412:	f083 0301 	eor.w	r3, r3, #1
    5416:	b2db      	uxtb	r3, r3
    5418:	2b00      	cmp	r3, #0
    541a:	d1f6      	bne.n	540a <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    541c:	bf00      	nop
    541e:	3708      	adds	r7, #8
    5420:	46bd      	mov	sp, r7
    5422:	bd80      	pop	{r7, pc}
    5424:	40001000 	.word	0x40001000
    5428:	03002646 	.word	0x03002646
    542c:	0000523d 	.word	0x0000523d
    5430:	000051c7 	.word	0x000051c7

00005434 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    5434:	b580      	push	{r7, lr}
    5436:	b084      	sub	sp, #16
    5438:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    543a:	4b6b      	ldr	r3, [pc, #428]	; (55e8 <_oscctrl_init_referenced_generators+0x1b4>)
    543c:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    543e:	2204      	movs	r2, #4
    5440:	2100      	movs	r1, #0
    5442:	486a      	ldr	r0, [pc, #424]	; (55ec <_oscctrl_init_referenced_generators+0x1b8>)
    5444:	4b6a      	ldr	r3, [pc, #424]	; (55f0 <_oscctrl_init_referenced_generators+0x1bc>)
    5446:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5448:	bf00      	nop
    544a:	4868      	ldr	r0, [pc, #416]	; (55ec <_oscctrl_init_referenced_generators+0x1b8>)
    544c:	4b69      	ldr	r3, [pc, #420]	; (55f4 <_oscctrl_init_referenced_generators+0x1c0>)
    544e:	4798      	blx	r3
    5450:	4603      	mov	r3, r0
    5452:	2b00      	cmp	r3, #0
    5454:	d1f9      	bne.n	544a <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    5456:	2100      	movs	r1, #0
    5458:	68f8      	ldr	r0, [r7, #12]
    545a:	4b67      	ldr	r3, [pc, #412]	; (55f8 <_oscctrl_init_referenced_generators+0x1c4>)
    545c:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    545e:	4967      	ldr	r1, [pc, #412]	; (55fc <_oscctrl_init_referenced_generators+0x1c8>)
    5460:	68f8      	ldr	r0, [r7, #12]
    5462:	4b67      	ldr	r3, [pc, #412]	; (5600 <_oscctrl_init_referenced_generators+0x1cc>)
    5464:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    5466:	bf00      	nop
    5468:	68f8      	ldr	r0, [r7, #12]
    546a:	4b66      	ldr	r3, [pc, #408]	; (5604 <_oscctrl_init_referenced_generators+0x1d0>)
    546c:	4798      	blx	r3
    546e:	4603      	mov	r3, r0
    5470:	2b00      	cmp	r3, #0
    5472:	d1f9      	bne.n	5468 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    5474:	2100      	movs	r1, #0
    5476:	68f8      	ldr	r0, [r7, #12]
    5478:	4b63      	ldr	r3, [pc, #396]	; (5608 <_oscctrl_init_referenced_generators+0x1d4>)
    547a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    547c:	bf00      	nop
    547e:	68f8      	ldr	r0, [r7, #12]
    5480:	4b62      	ldr	r3, [pc, #392]	; (560c <_oscctrl_init_referenced_generators+0x1d8>)
    5482:	4798      	blx	r3
    5484:	4603      	mov	r3, r0
    5486:	2b00      	cmp	r3, #0
    5488:	d1f9      	bne.n	547e <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    548a:	2302      	movs	r3, #2
    548c:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    548e:	7afb      	ldrb	r3, [r7, #11]
    5490:	4619      	mov	r1, r3
    5492:	68f8      	ldr	r0, [r7, #12]
    5494:	4b58      	ldr	r3, [pc, #352]	; (55f8 <_oscctrl_init_referenced_generators+0x1c4>)
    5496:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5498:	bf00      	nop
    549a:	68f8      	ldr	r0, [r7, #12]
    549c:	4b5c      	ldr	r3, [pc, #368]	; (5610 <_oscctrl_init_referenced_generators+0x1dc>)
    549e:	4798      	blx	r3
    54a0:	4603      	mov	r3, r0
    54a2:	2b00      	cmp	r3, #0
    54a4:	d1f9      	bne.n	549a <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    54a6:	68f8      	ldr	r0, [r7, #12]
    54a8:	4b5a      	ldr	r3, [pc, #360]	; (5614 <_oscctrl_init_referenced_generators+0x1e0>)
    54aa:	4798      	blx	r3
    54ac:	4603      	mov	r3, r0
    54ae:	4619      	mov	r1, r3
    54b0:	68f8      	ldr	r0, [r7, #12]
    54b2:	4b59      	ldr	r3, [pc, #356]	; (5618 <_oscctrl_init_referenced_generators+0x1e4>)
    54b4:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    54b6:	bf00      	nop
    54b8:	68f8      	ldr	r0, [r7, #12]
    54ba:	4b58      	ldr	r3, [pc, #352]	; (561c <_oscctrl_init_referenced_generators+0x1e8>)
    54bc:	4798      	blx	r3
    54be:	4603      	mov	r3, r0
    54c0:	2b00      	cmp	r3, #0
    54c2:	d1f9      	bne.n	54b8 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    54c4:	2319      	movs	r3, #25
    54c6:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    54c8:	7afb      	ldrb	r3, [r7, #11]
    54ca:	4619      	mov	r1, r3
    54cc:	68f8      	ldr	r0, [r7, #12]
    54ce:	4b4e      	ldr	r3, [pc, #312]	; (5608 <_oscctrl_init_referenced_generators+0x1d4>)
    54d0:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    54d2:	bf00      	nop
    54d4:	68f8      	ldr	r0, [r7, #12]
    54d6:	4b4d      	ldr	r3, [pc, #308]	; (560c <_oscctrl_init_referenced_generators+0x1d8>)
    54d8:	4798      	blx	r3
    54da:	4603      	mov	r3, r0
    54dc:	2b00      	cmp	r3, #0
    54de:	d1f9      	bne.n	54d4 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    54e0:	2245      	movs	r2, #69	; 0x45
    54e2:	2101      	movs	r1, #1
    54e4:	4841      	ldr	r0, [pc, #260]	; (55ec <_oscctrl_init_referenced_generators+0x1b8>)
    54e6:	4b4e      	ldr	r3, [pc, #312]	; (5620 <_oscctrl_init_referenced_generators+0x1ec>)
    54e8:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    54ea:	223b      	movs	r2, #59	; 0x3b
    54ec:	2100      	movs	r1, #0
    54ee:	68f8      	ldr	r0, [r7, #12]
    54f0:	4b4c      	ldr	r3, [pc, #304]	; (5624 <_oscctrl_init_referenced_generators+0x1f0>)
    54f2:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    54f4:	f44f 6201 	mov.w	r2, #2064	; 0x810
    54f8:	2100      	movs	r1, #0
    54fa:	68f8      	ldr	r0, [r7, #12]
    54fc:	4b4a      	ldr	r3, [pc, #296]	; (5628 <_oscctrl_init_referenced_generators+0x1f4>)
    54fe:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5500:	2242      	movs	r2, #66	; 0x42
    5502:	2100      	movs	r1, #0
    5504:	68f8      	ldr	r0, [r7, #12]
    5506:	4b49      	ldr	r3, [pc, #292]	; (562c <_oscctrl_init_referenced_generators+0x1f8>)
    5508:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    550a:	4a49      	ldr	r2, [pc, #292]	; (5630 <_oscctrl_init_referenced_generators+0x1fc>)
    550c:	2101      	movs	r1, #1
    550e:	68f8      	ldr	r0, [r7, #12]
    5510:	4b44      	ldr	r3, [pc, #272]	; (5624 <_oscctrl_init_referenced_generators+0x1f0>)
    5512:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5514:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5518:	2101      	movs	r1, #1
    551a:	68f8      	ldr	r0, [r7, #12]
    551c:	4b42      	ldr	r3, [pc, #264]	; (5628 <_oscctrl_init_referenced_generators+0x1f4>)
    551e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5520:	2202      	movs	r2, #2
    5522:	2101      	movs	r1, #1
    5524:	68f8      	ldr	r0, [r7, #12]
    5526:	4b41      	ldr	r3, [pc, #260]	; (562c <_oscctrl_init_referenced_generators+0x1f8>)
    5528:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    552a:	68f8      	ldr	r0, [r7, #12]
    552c:	4b41      	ldr	r3, [pc, #260]	; (5634 <_oscctrl_init_referenced_generators+0x200>)
    552e:	4798      	blx	r3
    5530:	4603      	mov	r3, r0
    5532:	2b00      	cmp	r3, #0
    5534:	d00c      	beq.n	5550 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    5536:	f44f 6310 	mov.w	r3, #2304	; 0x900
    553a:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    553c:	bf00      	nop
    553e:	6879      	ldr	r1, [r7, #4]
    5540:	68f8      	ldr	r0, [r7, #12]
    5542:	4b3d      	ldr	r3, [pc, #244]	; (5638 <_oscctrl_init_referenced_generators+0x204>)
    5544:	4798      	blx	r3
    5546:	4602      	mov	r2, r0
    5548:	687b      	ldr	r3, [r7, #4]
    554a:	429a      	cmp	r2, r3
    554c:	d1f7      	bne.n	553e <_oscctrl_init_referenced_generators+0x10a>
    554e:	e009      	b.n	5564 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5550:	bf00      	nop
    5552:	68f8      	ldr	r0, [r7, #12]
    5554:	4b39      	ldr	r3, [pc, #228]	; (563c <_oscctrl_init_referenced_generators+0x208>)
    5556:	4798      	blx	r3
    5558:	4603      	mov	r3, r0
    555a:	f083 0301 	eor.w	r3, r3, #1
    555e:	b2db      	uxtb	r3, r3
    5560:	2b00      	cmp	r3, #0
    5562:	d1f6      	bne.n	5552 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    5564:	bf00      	nop
    5566:	2100      	movs	r1, #0
    5568:	68f8      	ldr	r0, [r7, #12]
    556a:	4b35      	ldr	r3, [pc, #212]	; (5640 <_oscctrl_init_referenced_generators+0x20c>)
    556c:	4798      	blx	r3
    556e:	4603      	mov	r3, r0
    5570:	f083 0301 	eor.w	r3, r3, #1
    5574:	b2db      	uxtb	r3, r3
    5576:	2b00      	cmp	r3, #0
    5578:	d009      	beq.n	558e <_oscctrl_init_referenced_generators+0x15a>
    557a:	2100      	movs	r1, #0
    557c:	68f8      	ldr	r0, [r7, #12]
    557e:	4b31      	ldr	r3, [pc, #196]	; (5644 <_oscctrl_init_referenced_generators+0x210>)
    5580:	4798      	blx	r3
    5582:	4603      	mov	r3, r0
    5584:	f083 0301 	eor.w	r3, r3, #1
    5588:	b2db      	uxtb	r3, r3
    558a:	2b00      	cmp	r3, #0
    558c:	d1eb      	bne.n	5566 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    558e:	bf00      	nop
    5590:	2101      	movs	r1, #1
    5592:	68f8      	ldr	r0, [r7, #12]
    5594:	4b2a      	ldr	r3, [pc, #168]	; (5640 <_oscctrl_init_referenced_generators+0x20c>)
    5596:	4798      	blx	r3
    5598:	4603      	mov	r3, r0
    559a:	f083 0301 	eor.w	r3, r3, #1
    559e:	b2db      	uxtb	r3, r3
    55a0:	2b00      	cmp	r3, #0
    55a2:	d009      	beq.n	55b8 <_oscctrl_init_referenced_generators+0x184>
    55a4:	2101      	movs	r1, #1
    55a6:	68f8      	ldr	r0, [r7, #12]
    55a8:	4b26      	ldr	r3, [pc, #152]	; (5644 <_oscctrl_init_referenced_generators+0x210>)
    55aa:	4798      	blx	r3
    55ac:	4603      	mov	r3, r0
    55ae:	f083 0301 	eor.w	r3, r3, #1
    55b2:	b2db      	uxtb	r3, r3
    55b4:	2b00      	cmp	r3, #0
    55b6:	d1eb      	bne.n	5590 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    55b8:	bf00      	nop
    55ba:	480c      	ldr	r0, [pc, #48]	; (55ec <_oscctrl_init_referenced_generators+0x1b8>)
    55bc:	4b22      	ldr	r3, [pc, #136]	; (5648 <_oscctrl_init_referenced_generators+0x214>)
    55be:	4798      	blx	r3
    55c0:	4603      	mov	r3, r0
    55c2:	2b00      	cmp	r3, #0
    55c4:	d1f9      	bne.n	55ba <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    55c6:	2207      	movs	r2, #7
    55c8:	2100      	movs	r1, #0
    55ca:	4808      	ldr	r0, [pc, #32]	; (55ec <_oscctrl_init_referenced_generators+0x1b8>)
    55cc:	4b08      	ldr	r3, [pc, #32]	; (55f0 <_oscctrl_init_referenced_generators+0x1bc>)
    55ce:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    55d0:	bf00      	nop
    55d2:	4806      	ldr	r0, [pc, #24]	; (55ec <_oscctrl_init_referenced_generators+0x1b8>)
    55d4:	4b07      	ldr	r3, [pc, #28]	; (55f4 <_oscctrl_init_referenced_generators+0x1c0>)
    55d6:	4798      	blx	r3
    55d8:	4603      	mov	r3, r0
    55da:	2b00      	cmp	r3, #0
    55dc:	d1f9      	bne.n	55d2 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    55de:	bf00      	nop
    55e0:	3710      	adds	r7, #16
    55e2:	46bd      	mov	sp, r7
    55e4:	bd80      	pop	{r7, pc}
    55e6:	bf00      	nop
    55e8:	40001000 	.word	0x40001000
    55ec:	40001c00 	.word	0x40001c00
    55f0:	00005001 	.word	0x00005001
    55f4:	00004fc1 	.word	0x00004fc1
    55f8:	00005265 	.word	0x00005265
    55fc:	0401bb80 	.word	0x0401bb80
    5600:	00005307 	.word	0x00005307
    5604:	000053bf 	.word	0x000053bf
    5608:	000052b3 	.word	0x000052b3
    560c:	00005357 	.word	0x00005357
    5610:	00005323 	.word	0x00005323
    5614:	000052ef 	.word	0x000052ef
    5618:	000052d3 	.word	0x000052d3
    561c:	0000538b 	.word	0x0000538b
    5620:	00005051 	.word	0x00005051
    5624:	0000515d 	.word	0x0000515d
    5628:	00005199 	.word	0x00005199
    562c:	00005121 	.word	0x00005121
    5630:	000407a0 	.word	0x000407a0
    5634:	00005283 	.word	0x00005283
    5638:	00005217 	.word	0x00005217
    563c:	000051ef 	.word	0x000051ef
    5640:	000050ad 	.word	0x000050ad
    5644:	000050e5 	.word	0x000050e5
    5648:	00004fe9 	.word	0x00004fe9

0000564c <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    564c:	b480      	push	{r7}
    564e:	b083      	sub	sp, #12
    5650:	af00      	add	r7, sp, #0
    5652:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    5654:	687b      	ldr	r3, [r7, #4]
    5656:	69db      	ldr	r3, [r3, #28]
    5658:	0a9b      	lsrs	r3, r3, #10
    565a:	f003 0301 	and.w	r3, r3, #1
    565e:	2b00      	cmp	r3, #0
    5660:	bf14      	ite	ne
    5662:	2301      	movne	r3, #1
    5664:	2300      	moveq	r3, #0
    5666:	b2db      	uxtb	r3, r3
}
    5668:	4618      	mov	r0, r3
    566a:	370c      	adds	r7, #12
    566c:	46bd      	mov	sp, r7
    566e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5672:	4770      	bx	lr

00005674 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5674:	b480      	push	{r7}
    5676:	b083      	sub	sp, #12
    5678:	af00      	add	r7, sp, #0
    567a:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    567c:	687b      	ldr	r3, [r7, #4]
    567e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5682:	61da      	str	r2, [r3, #28]
}
    5684:	bf00      	nop
    5686:	370c      	adds	r7, #12
    5688:	46bd      	mov	sp, r7
    568a:	f85d 7b04 	ldr.w	r7, [sp], #4
    568e:	4770      	bx	lr

00005690 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5690:	b480      	push	{r7}
    5692:	b083      	sub	sp, #12
    5694:	af00      	add	r7, sp, #0
    5696:	6078      	str	r0, [r7, #4]
    5698:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    569a:	687b      	ldr	r3, [r7, #4]
    569c:	683a      	ldr	r2, [r7, #0]
    569e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    56a0:	bf00      	nop
    56a2:	370c      	adds	r7, #12
    56a4:	46bd      	mov	sp, r7
    56a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    56aa:	4770      	bx	lr

000056ac <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    56ac:	b480      	push	{r7}
    56ae:	b083      	sub	sp, #12
    56b0:	af00      	add	r7, sp, #0
    56b2:	6078      	str	r0, [r7, #4]
    56b4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    56b6:	687b      	ldr	r3, [r7, #4]
    56b8:	683a      	ldr	r2, [r7, #0]
    56ba:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    56bc:	bf00      	nop
    56be:	370c      	adds	r7, #12
    56c0:	46bd      	mov	sp, r7
    56c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    56c6:	4770      	bx	lr

000056c8 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    56c8:	b480      	push	{r7}
    56ca:	b083      	sub	sp, #12
    56cc:	af00      	add	r7, sp, #0
    56ce:	6078      	str	r0, [r7, #4]
    56d0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    56d2:	687b      	ldr	r3, [r7, #4]
    56d4:	683a      	ldr	r2, [r7, #0]
    56d6:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    56d8:	bf00      	nop
    56da:	370c      	adds	r7, #12
    56dc:	46bd      	mov	sp, r7
    56de:	f85d 7b04 	ldr.w	r7, [sp], #4
    56e2:	4770      	bx	lr

000056e4 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    56e4:	b480      	push	{r7}
    56e6:	b083      	sub	sp, #12
    56e8:	af00      	add	r7, sp, #0
    56ea:	6078      	str	r0, [r7, #4]
    56ec:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    56ee:	687b      	ldr	r3, [r7, #4]
    56f0:	683a      	ldr	r2, [r7, #0]
    56f2:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    56f4:	bf00      	nop
    56f6:	370c      	adds	r7, #12
    56f8:	46bd      	mov	sp, r7
    56fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    56fe:	4770      	bx	lr

00005700 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5700:	b480      	push	{r7}
    5702:	b085      	sub	sp, #20
    5704:	af00      	add	r7, sp, #0
    5706:	6078      	str	r0, [r7, #4]
    5708:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    570a:	687b      	ldr	r3, [r7, #4]
    570c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    570e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5710:	68fb      	ldr	r3, [r7, #12]
    5712:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5716:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5718:	683b      	ldr	r3, [r7, #0]
    571a:	b2db      	uxtb	r3, r3
    571c:	68fa      	ldr	r2, [r7, #12]
    571e:	4313      	orrs	r3, r2
    5720:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5722:	687b      	ldr	r3, [r7, #4]
    5724:	68fa      	ldr	r2, [r7, #12]
    5726:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5728:	bf00      	nop
    572a:	3714      	adds	r7, #20
    572c:	46bd      	mov	sp, r7
    572e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5732:	4770      	bx	lr

00005734 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5734:	b480      	push	{r7}
    5736:	b085      	sub	sp, #20
    5738:	af00      	add	r7, sp, #0
    573a:	6078      	str	r0, [r7, #4]
    573c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    573e:	687b      	ldr	r3, [r7, #4]
    5740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5742:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    5744:	68fb      	ldr	r3, [r7, #12]
    5746:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    574a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    574c:	683b      	ldr	r3, [r7, #0]
    574e:	041b      	lsls	r3, r3, #16
    5750:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    5754:	68fa      	ldr	r2, [r7, #12]
    5756:	4313      	orrs	r3, r2
    5758:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    575a:	687b      	ldr	r3, [r7, #4]
    575c:	68fa      	ldr	r2, [r7, #12]
    575e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5760:	bf00      	nop
    5762:	3714      	adds	r7, #20
    5764:	46bd      	mov	sp, r7
    5766:	f85d 7b04 	ldr.w	r7, [sp], #4
    576a:	4770      	bx	lr

0000576c <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    576c:	b480      	push	{r7}
    576e:	b083      	sub	sp, #12
    5770:	af00      	add	r7, sp, #0
    5772:	6078      	str	r0, [r7, #4]
    5774:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    5776:	687b      	ldr	r3, [r7, #4]
    5778:	683a      	ldr	r2, [r7, #0]
    577a:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    577c:	bf00      	nop
    577e:	370c      	adds	r7, #12
    5780:	46bd      	mov	sp, r7
    5782:	f85d 7b04 	ldr.w	r7, [sp], #4
    5786:	4770      	bx	lr

00005788 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5788:	b480      	push	{r7}
    578a:	b083      	sub	sp, #12
    578c:	af00      	add	r7, sp, #0
    578e:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5790:	687b      	ldr	r3, [r7, #4]
    5792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5794:	4618      	mov	r0, r3
    5796:	370c      	adds	r7, #12
    5798:	46bd      	mov	sp, r7
    579a:	f85d 7b04 	ldr.w	r7, [sp], #4
    579e:	4770      	bx	lr

000057a0 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    57a0:	b480      	push	{r7}
    57a2:	b085      	sub	sp, #20
    57a4:	af00      	add	r7, sp, #0
    57a6:	60f8      	str	r0, [r7, #12]
    57a8:	60b9      	str	r1, [r7, #8]
    57aa:	607a      	str	r2, [r7, #4]
	while (count--) {
    57ac:	e007      	b.n	57be <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    57ae:	68fb      	ldr	r3, [r7, #12]
    57b0:	1c5a      	adds	r2, r3, #1
    57b2:	60fa      	str	r2, [r7, #12]
    57b4:	68ba      	ldr	r2, [r7, #8]
    57b6:	1c51      	adds	r1, r2, #1
    57b8:	60b9      	str	r1, [r7, #8]
    57ba:	7812      	ldrb	r2, [r2, #0]
    57bc:	701a      	strb	r2, [r3, #0]
	while (count--) {
    57be:	687b      	ldr	r3, [r7, #4]
    57c0:	1e5a      	subs	r2, r3, #1
    57c2:	607a      	str	r2, [r7, #4]
    57c4:	2b00      	cmp	r3, #0
    57c6:	d1f2      	bne.n	57ae <_qspi_memcpy+0xe>
	}
}
    57c8:	bf00      	nop
    57ca:	3714      	adds	r7, #20
    57cc:	46bd      	mov	sp, r7
    57ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    57d2:	4770      	bx	lr

000057d4 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    57d4:	b580      	push	{r7, lr}
    57d6:	b082      	sub	sp, #8
    57d8:	af00      	add	r7, sp, #0
    57da:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    57dc:	4903      	ldr	r1, [pc, #12]	; (57ec <_qspi_end_transfer+0x18>)
    57de:	6878      	ldr	r0, [r7, #4]
    57e0:	4b03      	ldr	r3, [pc, #12]	; (57f0 <_qspi_end_transfer+0x1c>)
    57e2:	4798      	blx	r3
}
    57e4:	bf00      	nop
    57e6:	3708      	adds	r7, #8
    57e8:	46bd      	mov	sp, r7
    57ea:	bd80      	pop	{r7, pc}
    57ec:	01000002 	.word	0x01000002
    57f0:	00005691 	.word	0x00005691

000057f4 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    57f4:	b580      	push	{r7, lr}
    57f6:	b082      	sub	sp, #8
    57f8:	af00      	add	r7, sp, #0
    57fa:	6078      	str	r0, [r7, #4]
    57fc:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    57fe:	687b      	ldr	r3, [r7, #4]
    5800:	2b00      	cmp	r3, #0
    5802:	d004      	beq.n	580e <_qspi_sync_init+0x1a>
    5804:	683b      	ldr	r3, [r7, #0]
    5806:	2b00      	cmp	r3, #0
    5808:	d001      	beq.n	580e <_qspi_sync_init+0x1a>
    580a:	2301      	movs	r3, #1
    580c:	e000      	b.n	5810 <_qspi_sync_init+0x1c>
    580e:	2300      	movs	r3, #0
    5810:	f003 0301 	and.w	r3, r3, #1
    5814:	b2db      	uxtb	r3, r3
    5816:	2240      	movs	r2, #64	; 0x40
    5818:	490c      	ldr	r1, [pc, #48]	; (584c <_qspi_sync_init+0x58>)
    581a:	4618      	mov	r0, r3
    581c:	4b0c      	ldr	r3, [pc, #48]	; (5850 <_qspi_sync_init+0x5c>)
    581e:	4798      	blx	r3
	dev->prvt = hw;
    5820:	687b      	ldr	r3, [r7, #4]
    5822:	683a      	ldr	r2, [r7, #0]
    5824:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    5826:	687b      	ldr	r3, [r7, #4]
    5828:	681b      	ldr	r3, [r3, #0]
    582a:	2101      	movs	r1, #1
    582c:	4618      	mov	r0, r3
    582e:	4b09      	ldr	r3, [pc, #36]	; (5854 <_qspi_sync_init+0x60>)
    5830:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    5832:	4909      	ldr	r1, [pc, #36]	; (5858 <_qspi_sync_init+0x64>)
    5834:	6838      	ldr	r0, [r7, #0]
    5836:	4b09      	ldr	r3, [pc, #36]	; (585c <_qspi_sync_init+0x68>)
    5838:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    583a:	4909      	ldr	r1, [pc, #36]	; (5860 <_qspi_sync_init+0x6c>)
    583c:	6838      	ldr	r0, [r7, #0]
    583e:	4b09      	ldr	r3, [pc, #36]	; (5864 <_qspi_sync_init+0x70>)
    5840:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    5842:	2300      	movs	r3, #0
}
    5844:	4618      	mov	r0, r3
    5846:	3708      	adds	r7, #8
    5848:	46bd      	mov	sp, r7
    584a:	bd80      	pop	{r7, pc}
    584c:	0000ee64 	.word	0x0000ee64
    5850:	000037fd 	.word	0x000037fd
    5854:	00005691 	.word	0x00005691
    5858:	06000011 	.word	0x06000011
    585c:	000056ad 	.word	0x000056ad
    5860:	00241300 	.word	0x00241300
    5864:	000056c9 	.word	0x000056c9

00005868 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    5868:	b580      	push	{r7, lr}
    586a:	b082      	sub	sp, #8
    586c:	af00      	add	r7, sp, #0
    586e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5870:	687b      	ldr	r3, [r7, #4]
    5872:	681b      	ldr	r3, [r3, #0]
    5874:	2102      	movs	r1, #2
    5876:	4618      	mov	r0, r3
    5878:	4b03      	ldr	r3, [pc, #12]	; (5888 <_qspi_sync_enable+0x20>)
    587a:	4798      	blx	r3
	return ERR_NONE;
    587c:	2300      	movs	r3, #0
}
    587e:	4618      	mov	r0, r3
    5880:	3708      	adds	r7, #8
    5882:	46bd      	mov	sp, r7
    5884:	bd80      	pop	{r7, pc}
    5886:	bf00      	nop
    5888:	00005691 	.word	0x00005691

0000588c <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    588c:	b580      	push	{r7, lr}
    588e:	b082      	sub	sp, #8
    5890:	af00      	add	r7, sp, #0
    5892:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5894:	687b      	ldr	r3, [r7, #4]
    5896:	681b      	ldr	r3, [r3, #0]
    5898:	2100      	movs	r1, #0
    589a:	4618      	mov	r0, r3
    589c:	4b03      	ldr	r3, [pc, #12]	; (58ac <_qspi_sync_disable+0x20>)
    589e:	4798      	blx	r3
	return ERR_NONE;
    58a0:	2300      	movs	r3, #0
}
    58a2:	4618      	mov	r0, r3
    58a4:	3708      	adds	r7, #8
    58a6:	46bd      	mov	sp, r7
    58a8:	bd80      	pop	{r7, pc}
    58aa:	bf00      	nop
    58ac:	00005691 	.word	0x00005691

000058b0 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    58b0:	b580      	push	{r7, lr}
    58b2:	b084      	sub	sp, #16
    58b4:	af00      	add	r7, sp, #0
    58b6:	6078      	str	r0, [r7, #4]
    58b8:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    58ba:	687b      	ldr	r3, [r7, #4]
    58bc:	681b      	ldr	r3, [r3, #0]
    58be:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    58c0:	683b      	ldr	r3, [r7, #0]
    58c2:	781b      	ldrb	r3, [r3, #0]
    58c4:	f003 0320 	and.w	r3, r3, #32
    58c8:	b2db      	uxtb	r3, r3
    58ca:	2b00      	cmp	r3, #0
    58cc:	d005      	beq.n	58da <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    58ce:	683b      	ldr	r3, [r7, #0]
    58d0:	689b      	ldr	r3, [r3, #8]
    58d2:	4619      	mov	r1, r3
    58d4:	68f8      	ldr	r0, [r7, #12]
    58d6:	4b13      	ldr	r3, [pc, #76]	; (5924 <_qspi_sync_command_set_ifr+0x74>)
    58d8:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    58da:	683b      	ldr	r3, [r7, #0]
    58dc:	781b      	ldrb	r3, [r3, #0]
    58de:	f003 0310 	and.w	r3, r3, #16
    58e2:	b2db      	uxtb	r3, r3
    58e4:	2b00      	cmp	r3, #0
    58e6:	d005      	beq.n	58f4 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    58e8:	683b      	ldr	r3, [r7, #0]
    58ea:	791b      	ldrb	r3, [r3, #4]
    58ec:	4619      	mov	r1, r3
    58ee:	68f8      	ldr	r0, [r7, #12]
    58f0:	4b0d      	ldr	r3, [pc, #52]	; (5928 <_qspi_sync_command_set_ifr+0x78>)
    58f2:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    58f4:	683b      	ldr	r3, [r7, #0]
    58f6:	781b      	ldrb	r3, [r3, #0]
    58f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    58fc:	b2db      	uxtb	r3, r3
    58fe:	2b00      	cmp	r3, #0
    5900:	d005      	beq.n	590e <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5902:	683b      	ldr	r3, [r7, #0]
    5904:	795b      	ldrb	r3, [r3, #5]
    5906:	4619      	mov	r1, r3
    5908:	68f8      	ldr	r0, [r7, #12]
    590a:	4b08      	ldr	r3, [pc, #32]	; (592c <_qspi_sync_command_set_ifr+0x7c>)
    590c:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    590e:	683b      	ldr	r3, [r7, #0]
    5910:	681b      	ldr	r3, [r3, #0]
    5912:	4619      	mov	r1, r3
    5914:	68f8      	ldr	r0, [r7, #12]
    5916:	4b06      	ldr	r3, [pc, #24]	; (5930 <_qspi_sync_command_set_ifr+0x80>)
    5918:	4798      	blx	r3
}
    591a:	bf00      	nop
    591c:	3710      	adds	r7, #16
    591e:	46bd      	mov	sp, r7
    5920:	bd80      	pop	{r7, pc}
    5922:	bf00      	nop
    5924:	000056e5 	.word	0x000056e5
    5928:	00005701 	.word	0x00005701
    592c:	00005735 	.word	0x00005735
    5930:	0000576d 	.word	0x0000576d

00005934 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5934:	b580      	push	{r7, lr}
    5936:	b084      	sub	sp, #16
    5938:	af00      	add	r7, sp, #0
    593a:	6078      	str	r0, [r7, #4]
    593c:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    593e:	687b      	ldr	r3, [r7, #4]
    5940:	681b      	ldr	r3, [r3, #0]
    5942:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5944:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5948:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    594a:	683b      	ldr	r3, [r7, #0]
    594c:	781b      	ldrb	r3, [r3, #0]
    594e:	f003 0320 	and.w	r3, r3, #32
    5952:	b2db      	uxtb	r3, r3
    5954:	2b00      	cmp	r3, #0
    5956:	d004      	beq.n	5962 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5958:	683b      	ldr	r3, [r7, #0]
    595a:	689b      	ldr	r3, [r3, #8]
    595c:	68fa      	ldr	r2, [r7, #12]
    595e:	4413      	add	r3, r2
    5960:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5962:	68b8      	ldr	r0, [r7, #8]
    5964:	4b18      	ldr	r3, [pc, #96]	; (59c8 <_qspi_sync_run_transfer+0x94>)
    5966:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5968:	683b      	ldr	r3, [r7, #0]
    596a:	691b      	ldr	r3, [r3, #16]
    596c:	2b00      	cmp	r3, #0
    596e:	d103      	bne.n	5978 <_qspi_sync_run_transfer+0x44>
    5970:	683b      	ldr	r3, [r7, #0]
    5972:	695b      	ldr	r3, [r3, #20]
    5974:	2b00      	cmp	r3, #0
    5976:	d001      	beq.n	597c <_qspi_sync_run_transfer+0x48>
    5978:	2301      	movs	r3, #1
    597a:	e000      	b.n	597e <_qspi_sync_run_transfer+0x4a>
    597c:	2300      	movs	r3, #0
    597e:	f003 0301 	and.w	r3, r3, #1
    5982:	b2db      	uxtb	r3, r3
    5984:	2282      	movs	r2, #130	; 0x82
    5986:	4911      	ldr	r1, [pc, #68]	; (59cc <_qspi_sync_run_transfer+0x98>)
    5988:	4618      	mov	r0, r3
    598a:	4b11      	ldr	r3, [pc, #68]	; (59d0 <_qspi_sync_run_transfer+0x9c>)
    598c:	4798      	blx	r3

	if (cmd->tx_buf) {
    598e:	683b      	ldr	r3, [r7, #0]
    5990:	691b      	ldr	r3, [r3, #16]
    5992:	2b00      	cmp	r3, #0
    5994:	d008      	beq.n	59a8 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5996:	683b      	ldr	r3, [r7, #0]
    5998:	6919      	ldr	r1, [r3, #16]
    599a:	683b      	ldr	r3, [r7, #0]
    599c:	68db      	ldr	r3, [r3, #12]
    599e:	461a      	mov	r2, r3
    59a0:	68f8      	ldr	r0, [r7, #12]
    59a2:	4b0c      	ldr	r3, [pc, #48]	; (59d4 <_qspi_sync_run_transfer+0xa0>)
    59a4:	4798      	blx	r3
    59a6:	e007      	b.n	59b8 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    59a8:	683b      	ldr	r3, [r7, #0]
    59aa:	6958      	ldr	r0, [r3, #20]
    59ac:	683b      	ldr	r3, [r7, #0]
    59ae:	68db      	ldr	r3, [r3, #12]
    59b0:	461a      	mov	r2, r3
    59b2:	68f9      	ldr	r1, [r7, #12]
    59b4:	4b07      	ldr	r3, [pc, #28]	; (59d4 <_qspi_sync_run_transfer+0xa0>)
    59b6:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    59b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    59bc:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    59c0:	bf00      	nop
    59c2:	3710      	adds	r7, #16
    59c4:	46bd      	mov	sp, r7
    59c6:	bd80      	pop	{r7, pc}
    59c8:	00005789 	.word	0x00005789
    59cc:	0000ee64 	.word	0x0000ee64
    59d0:	000037fd 	.word	0x000037fd
    59d4:	000057a1 	.word	0x000057a1

000059d8 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    59d8:	b580      	push	{r7, lr}
    59da:	b082      	sub	sp, #8
    59dc:	af00      	add	r7, sp, #0
    59de:	6078      	str	r0, [r7, #4]
    59e0:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    59e2:	6839      	ldr	r1, [r7, #0]
    59e4:	6878      	ldr	r0, [r7, #4]
    59e6:	4b14      	ldr	r3, [pc, #80]	; (5a38 <_qspi_sync_serial_run_command+0x60>)
    59e8:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    59ea:	683b      	ldr	r3, [r7, #0]
    59ec:	781b      	ldrb	r3, [r3, #0]
    59ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    59f2:	b2db      	uxtb	r3, r3
    59f4:	2b00      	cmp	r3, #0
    59f6:	d003      	beq.n	5a00 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    59f8:	6839      	ldr	r1, [r7, #0]
    59fa:	6878      	ldr	r0, [r7, #4]
    59fc:	4b0f      	ldr	r3, [pc, #60]	; (5a3c <_qspi_sync_serial_run_command+0x64>)
    59fe:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5a00:	687b      	ldr	r3, [r7, #4]
    5a02:	681b      	ldr	r3, [r3, #0]
    5a04:	4618      	mov	r0, r3
    5a06:	4b0e      	ldr	r3, [pc, #56]	; (5a40 <_qspi_sync_serial_run_command+0x68>)
    5a08:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    5a0a:	bf00      	nop
    5a0c:	687b      	ldr	r3, [r7, #4]
    5a0e:	681b      	ldr	r3, [r3, #0]
    5a10:	4618      	mov	r0, r3
    5a12:	4b0c      	ldr	r3, [pc, #48]	; (5a44 <_qspi_sync_serial_run_command+0x6c>)
    5a14:	4798      	blx	r3
    5a16:	4603      	mov	r3, r0
    5a18:	f083 0301 	eor.w	r3, r3, #1
    5a1c:	b2db      	uxtb	r3, r3
    5a1e:	2b00      	cmp	r3, #0
    5a20:	d1f4      	bne.n	5a0c <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    5a22:	687b      	ldr	r3, [r7, #4]
    5a24:	681b      	ldr	r3, [r3, #0]
    5a26:	4618      	mov	r0, r3
    5a28:	4b07      	ldr	r3, [pc, #28]	; (5a48 <_qspi_sync_serial_run_command+0x70>)
    5a2a:	4798      	blx	r3
	return ERR_NONE;
    5a2c:	2300      	movs	r3, #0
}
    5a2e:	4618      	mov	r0, r3
    5a30:	3708      	adds	r7, #8
    5a32:	46bd      	mov	sp, r7
    5a34:	bd80      	pop	{r7, pc}
    5a36:	bf00      	nop
    5a38:	000058b1 	.word	0x000058b1
    5a3c:	00005935 	.word	0x00005935
    5a40:	000057d5 	.word	0x000057d5
    5a44:	0000564d 	.word	0x0000564d
    5a48:	00005675 	.word	0x00005675

00005a4c <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    5a4c:	b480      	push	{r7}
    5a4e:	b083      	sub	sp, #12
    5a50:	af00      	add	r7, sp, #0
    5a52:	6078      	str	r0, [r7, #4]
    5a54:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5a56:	bf00      	nop
    5a58:	687b      	ldr	r3, [r7, #4]
    5a5a:	691a      	ldr	r2, [r3, #16]
    5a5c:	683b      	ldr	r3, [r7, #0]
    5a5e:	4013      	ands	r3, r2
    5a60:	2b00      	cmp	r3, #0
    5a62:	d1f9      	bne.n	5a58 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5a64:	bf00      	nop
    5a66:	370c      	adds	r7, #12
    5a68:	46bd      	mov	sp, r7
    5a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a6e:	4770      	bx	lr

00005a70 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5a70:	b480      	push	{r7}
    5a72:	b083      	sub	sp, #12
    5a74:	af00      	add	r7, sp, #0
    5a76:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5a78:	687b      	ldr	r3, [r7, #4]
    5a7a:	f44f 7280 	mov.w	r2, #256	; 0x100
    5a7e:	819a      	strh	r2, [r3, #12]
}
    5a80:	bf00      	nop
    5a82:	370c      	adds	r7, #12
    5a84:	46bd      	mov	sp, r7
    5a86:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a8a:	4770      	bx	lr

00005a8c <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5a8c:	b480      	push	{r7}
    5a8e:	b083      	sub	sp, #12
    5a90:	af00      	add	r7, sp, #0
    5a92:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5a94:	687b      	ldr	r3, [r7, #4]
    5a96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5a9a:	819a      	strh	r2, [r3, #12]
}
    5a9c:	bf00      	nop
    5a9e:	370c      	adds	r7, #12
    5aa0:	46bd      	mov	sp, r7
    5aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aa6:	4770      	bx	lr

00005aa8 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5aa8:	b480      	push	{r7}
    5aaa:	b083      	sub	sp, #12
    5aac:	af00      	add	r7, sp, #0
    5aae:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5ab0:	687b      	ldr	r3, [r7, #4]
    5ab2:	899b      	ldrh	r3, [r3, #12]
    5ab4:	b29b      	uxth	r3, r3
}
    5ab6:	4618      	mov	r0, r3
    5ab8:	370c      	adds	r7, #12
    5aba:	46bd      	mov	sp, r7
    5abc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ac0:	4770      	bx	lr

00005ac2 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    5ac2:	b480      	push	{r7}
    5ac4:	b083      	sub	sp, #12
    5ac6:	af00      	add	r7, sp, #0
    5ac8:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    5aca:	687b      	ldr	r3, [r7, #4]
    5acc:	895b      	ldrh	r3, [r3, #10]
    5ace:	b29b      	uxth	r3, r3
}
    5ad0:	4618      	mov	r0, r3
    5ad2:	370c      	adds	r7, #12
    5ad4:	46bd      	mov	sp, r7
    5ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ada:	4770      	bx	lr

00005adc <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    5adc:	b580      	push	{r7, lr}
    5ade:	b082      	sub	sp, #8
    5ae0:	af00      	add	r7, sp, #0
    5ae2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5ae4:	687b      	ldr	r3, [r7, #4]
    5ae6:	881b      	ldrh	r3, [r3, #0]
    5ae8:	b29b      	uxth	r3, r3
    5aea:	f043 0301 	orr.w	r3, r3, #1
    5aee:	b29a      	uxth	r2, r3
    5af0:	687b      	ldr	r3, [r7, #4]
    5af2:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5af4:	2101      	movs	r1, #1
    5af6:	6878      	ldr	r0, [r7, #4]
    5af8:	4b02      	ldr	r3, [pc, #8]	; (5b04 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    5afa:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5afc:	bf00      	nop
    5afe:	3708      	adds	r7, #8
    5b00:	46bd      	mov	sp, r7
    5b02:	bd80      	pop	{r7, pc}
    5b04:	00005a4d 	.word	0x00005a4d

00005b08 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5b08:	b580      	push	{r7, lr}
    5b0a:	b084      	sub	sp, #16
    5b0c:	af00      	add	r7, sp, #0
    5b0e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5b10:	f248 0103 	movw	r1, #32771	; 0x8003
    5b14:	6878      	ldr	r0, [r7, #4]
    5b16:	4b0a      	ldr	r3, [pc, #40]	; (5b40 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5b18:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5b1a:	687b      	ldr	r3, [r7, #4]
    5b1c:	881b      	ldrh	r3, [r3, #0]
    5b1e:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5b20:	89fb      	ldrh	r3, [r7, #14]
    5b22:	085b      	lsrs	r3, r3, #1
    5b24:	b29b      	uxth	r3, r3
    5b26:	f003 0301 	and.w	r3, r3, #1
    5b2a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    5b2c:	89fb      	ldrh	r3, [r7, #14]
    5b2e:	2b00      	cmp	r3, #0
    5b30:	bf14      	ite	ne
    5b32:	2301      	movne	r3, #1
    5b34:	2300      	moveq	r3, #0
    5b36:	b2db      	uxtb	r3, r3
}
    5b38:	4618      	mov	r0, r3
    5b3a:	3710      	adds	r7, #16
    5b3c:	46bd      	mov	sp, r7
    5b3e:	bd80      	pop	{r7, pc}
    5b40:	00005a4d 	.word	0x00005a4d

00005b44 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5b44:	b580      	push	{r7, lr}
    5b46:	b082      	sub	sp, #8
    5b48:	af00      	add	r7, sp, #0
    5b4a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5b4c:	687b      	ldr	r3, [r7, #4]
    5b4e:	881b      	ldrh	r3, [r3, #0]
    5b50:	b29b      	uxth	r3, r3
    5b52:	f023 0302 	bic.w	r3, r3, #2
    5b56:	b29a      	uxth	r2, r3
    5b58:	687b      	ldr	r3, [r7, #4]
    5b5a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5b5c:	f248 0103 	movw	r1, #32771	; 0x8003
    5b60:	6878      	ldr	r0, [r7, #4]
    5b62:	4b03      	ldr	r3, [pc, #12]	; (5b70 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5b64:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5b66:	bf00      	nop
    5b68:	3708      	adds	r7, #8
    5b6a:	46bd      	mov	sp, r7
    5b6c:	bd80      	pop	{r7, pc}
    5b6e:	bf00      	nop
    5b70:	00005a4d 	.word	0x00005a4d

00005b74 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5b74:	b580      	push	{r7, lr}
    5b76:	b082      	sub	sp, #8
    5b78:	af00      	add	r7, sp, #0
    5b7a:	6078      	str	r0, [r7, #4]
    5b7c:	460b      	mov	r3, r1
    5b7e:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5b80:	687b      	ldr	r3, [r7, #4]
    5b82:	887a      	ldrh	r2, [r7, #2]
    5b84:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5b86:	f248 0103 	movw	r1, #32771	; 0x8003
    5b8a:	6878      	ldr	r0, [r7, #4]
    5b8c:	4b02      	ldr	r3, [pc, #8]	; (5b98 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5b8e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5b90:	bf00      	nop
    5b92:	3708      	adds	r7, #8
    5b94:	46bd      	mov	sp, r7
    5b96:	bd80      	pop	{r7, pc}
    5b98:	00005a4d 	.word	0x00005a4d

00005b9c <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5b9c:	b480      	push	{r7}
    5b9e:	b083      	sub	sp, #12
    5ba0:	af00      	add	r7, sp, #0
    5ba2:	6078      	str	r0, [r7, #4]
    5ba4:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5ba6:	687b      	ldr	r3, [r7, #4]
    5ba8:	683a      	ldr	r2, [r7, #0]
    5baa:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5bac:	bf00      	nop
    5bae:	370c      	adds	r7, #12
    5bb0:	46bd      	mov	sp, r7
    5bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bb6:	4770      	bx	lr

00005bb8 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5bb8:	b580      	push	{r7, lr}
    5bba:	b082      	sub	sp, #8
    5bbc:	af00      	add	r7, sp, #0
    5bbe:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5bc0:	687b      	ldr	r3, [r7, #4]
    5bc2:	2b00      	cmp	r3, #0
    5bc4:	d005      	beq.n	5bd2 <_calendar_init+0x1a>
    5bc6:	687b      	ldr	r3, [r7, #4]
    5bc8:	681b      	ldr	r3, [r3, #0]
    5bca:	2b00      	cmp	r3, #0
    5bcc:	d001      	beq.n	5bd2 <_calendar_init+0x1a>
    5bce:	2301      	movs	r3, #1
    5bd0:	e000      	b.n	5bd4 <_calendar_init+0x1c>
    5bd2:	2300      	movs	r3, #0
    5bd4:	f003 0301 	and.w	r3, r3, #1
    5bd8:	b2db      	uxtb	r3, r3
    5bda:	222f      	movs	r2, #47	; 0x2f
    5bdc:	491b      	ldr	r1, [pc, #108]	; (5c4c <_calendar_init+0x94>)
    5bde:	4618      	mov	r0, r3
    5be0:	4b1b      	ldr	r3, [pc, #108]	; (5c50 <_calendar_init+0x98>)
    5be2:	4798      	blx	r3

	_rtc_dev = dev;
    5be4:	4a1b      	ldr	r2, [pc, #108]	; (5c54 <_calendar_init+0x9c>)
    5be6:	687b      	ldr	r3, [r7, #4]
    5be8:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    5bea:	687b      	ldr	r3, [r7, #4]
    5bec:	681b      	ldr	r3, [r3, #0]
    5bee:	4618      	mov	r0, r3
    5bf0:	4b19      	ldr	r3, [pc, #100]	; (5c58 <_calendar_init+0xa0>)
    5bf2:	4798      	blx	r3
    5bf4:	4603      	mov	r3, r0
    5bf6:	2b00      	cmp	r3, #0
    5bf8:	d00a      	beq.n	5c10 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5bfa:	687b      	ldr	r3, [r7, #4]
    5bfc:	681b      	ldr	r3, [r3, #0]
    5bfe:	4618      	mov	r0, r3
    5c00:	4b16      	ldr	r3, [pc, #88]	; (5c5c <_calendar_init+0xa4>)
    5c02:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    5c04:	687b      	ldr	r3, [r7, #4]
    5c06:	681b      	ldr	r3, [r3, #0]
    5c08:	2102      	movs	r1, #2
    5c0a:	4618      	mov	r0, r3
    5c0c:	4b14      	ldr	r3, [pc, #80]	; (5c60 <_calendar_init+0xa8>)
    5c0e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5c10:	687b      	ldr	r3, [r7, #4]
    5c12:	681b      	ldr	r3, [r3, #0]
    5c14:	4618      	mov	r0, r3
    5c16:	4b13      	ldr	r3, [pc, #76]	; (5c64 <_calendar_init+0xac>)
    5c18:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5c1a:	687b      	ldr	r3, [r7, #4]
    5c1c:	681b      	ldr	r3, [r3, #0]
    5c1e:	2101      	movs	r1, #1
    5c20:	4618      	mov	r0, r3
    5c22:	4b0f      	ldr	r3, [pc, #60]	; (5c60 <_calendar_init+0xa8>)
    5c24:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    5c26:	687b      	ldr	r3, [r7, #4]
    5c28:	681b      	ldr	r3, [r3, #0]
    5c2a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    5c2e:	4618      	mov	r0, r3
    5c30:	4b0d      	ldr	r3, [pc, #52]	; (5c68 <_calendar_init+0xb0>)
    5c32:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    5c34:	687b      	ldr	r3, [r7, #4]
    5c36:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5c38:	2100      	movs	r1, #0
    5c3a:	4618      	mov	r0, r3
    5c3c:	4b0b      	ldr	r3, [pc, #44]	; (5c6c <_calendar_init+0xb4>)
    5c3e:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5c40:	2300      	movs	r3, #0
}
    5c42:	4618      	mov	r0, r3
    5c44:	3708      	adds	r7, #8
    5c46:	46bd      	mov	sp, r7
    5c48:	bd80      	pop	{r7, pc}
    5c4a:	bf00      	nop
    5c4c:	0000ee7c 	.word	0x0000ee7c
    5c50:	000037fd 	.word	0x000037fd
    5c54:	20000ac0 	.word	0x20000ac0
    5c58:	00005b09 	.word	0x00005b09
    5c5c:	00005b45 	.word	0x00005b45
    5c60:	00005a4d 	.word	0x00005a4d
    5c64:	00005add 	.word	0x00005add
    5c68:	00005b75 	.word	0x00005b75
    5c6c:	00005b9d 	.word	0x00005b9d

00005c70 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5c70:	b580      	push	{r7, lr}
    5c72:	b084      	sub	sp, #16
    5c74:	af00      	add	r7, sp, #0
    5c76:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5c78:	687b      	ldr	r3, [r7, #4]
    5c7a:	681b      	ldr	r3, [r3, #0]
    5c7c:	4618      	mov	r0, r3
    5c7e:	4b19      	ldr	r3, [pc, #100]	; (5ce4 <_rtc_interrupt_handler+0x74>)
    5c80:	4798      	blx	r3
    5c82:	4603      	mov	r3, r0
    5c84:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5c86:	687b      	ldr	r3, [r7, #4]
    5c88:	681b      	ldr	r3, [r3, #0]
    5c8a:	4618      	mov	r0, r3
    5c8c:	4b16      	ldr	r3, [pc, #88]	; (5ce8 <_rtc_interrupt_handler+0x78>)
    5c8e:	4798      	blx	r3
    5c90:	4603      	mov	r3, r0
    5c92:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5c94:	89fa      	ldrh	r2, [r7, #14]
    5c96:	89bb      	ldrh	r3, [r7, #12]
    5c98:	4013      	ands	r3, r2
    5c9a:	b29b      	uxth	r3, r3
    5c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	d009      	beq.n	5cb8 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5ca4:	687b      	ldr	r3, [r7, #4]
    5ca6:	685b      	ldr	r3, [r3, #4]
    5ca8:	6878      	ldr	r0, [r7, #4]
    5caa:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    5cac:	687b      	ldr	r3, [r7, #4]
    5cae:	681b      	ldr	r3, [r3, #0]
    5cb0:	4618      	mov	r0, r3
    5cb2:	4b0e      	ldr	r3, [pc, #56]	; (5cec <_rtc_interrupt_handler+0x7c>)
    5cb4:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    5cb6:	e010      	b.n	5cda <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5cb8:	89fa      	ldrh	r2, [r7, #14]
    5cba:	89bb      	ldrh	r3, [r7, #12]
    5cbc:	4013      	ands	r3, r2
    5cbe:	b29b      	uxth	r3, r3
    5cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5cc4:	2b00      	cmp	r3, #0
    5cc6:	d008      	beq.n	5cda <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5cc8:	687b      	ldr	r3, [r7, #4]
    5cca:	689b      	ldr	r3, [r3, #8]
    5ccc:	6878      	ldr	r0, [r7, #4]
    5cce:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5cd0:	687b      	ldr	r3, [r7, #4]
    5cd2:	681b      	ldr	r3, [r3, #0]
    5cd4:	4618      	mov	r0, r3
    5cd6:	4b06      	ldr	r3, [pc, #24]	; (5cf0 <_rtc_interrupt_handler+0x80>)
    5cd8:	4798      	blx	r3
}
    5cda:	bf00      	nop
    5cdc:	3710      	adds	r7, #16
    5cde:	46bd      	mov	sp, r7
    5ce0:	bd80      	pop	{r7, pc}
    5ce2:	bf00      	nop
    5ce4:	00005aa9 	.word	0x00005aa9
    5ce8:	00005ac3 	.word	0x00005ac3
    5cec:	00005a71 	.word	0x00005a71
    5cf0:	00005a8d 	.word	0x00005a8d

00005cf4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5cf4:	b580      	push	{r7, lr}
    5cf6:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5cf8:	4b03      	ldr	r3, [pc, #12]	; (5d08 <RTC_Handler+0x14>)
    5cfa:	681b      	ldr	r3, [r3, #0]
    5cfc:	4618      	mov	r0, r3
    5cfe:	4b03      	ldr	r3, [pc, #12]	; (5d0c <RTC_Handler+0x18>)
    5d00:	4798      	blx	r3
}
    5d02:	bf00      	nop
    5d04:	bd80      	pop	{r7, pc}
    5d06:	bf00      	nop
    5d08:	20000ac0 	.word	0x20000ac0
    5d0c:	00005c71 	.word	0x00005c71

00005d10 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5d10:	b480      	push	{r7}
    5d12:	b083      	sub	sp, #12
    5d14:	af00      	add	r7, sp, #0
    5d16:	6078      	str	r0, [r7, #4]
    5d18:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5d1a:	bf00      	nop
    5d1c:	687b      	ldr	r3, [r7, #4]
    5d1e:	69da      	ldr	r2, [r3, #28]
    5d20:	683b      	ldr	r3, [r7, #0]
    5d22:	4013      	ands	r3, r2
    5d24:	2b00      	cmp	r3, #0
    5d26:	d1f9      	bne.n	5d1c <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5d28:	bf00      	nop
    5d2a:	370c      	adds	r7, #12
    5d2c:	46bd      	mov	sp, r7
    5d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d32:	4770      	bx	lr

00005d34 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5d34:	b480      	push	{r7}
    5d36:	b083      	sub	sp, #12
    5d38:	af00      	add	r7, sp, #0
    5d3a:	6078      	str	r0, [r7, #4]
    5d3c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    5d3e:	687b      	ldr	r3, [r7, #4]
    5d40:	69da      	ldr	r2, [r3, #28]
    5d42:	683b      	ldr	r3, [r7, #0]
    5d44:	4013      	ands	r3, r2
    5d46:	2b00      	cmp	r3, #0
    5d48:	bf14      	ite	ne
    5d4a:	2301      	movne	r3, #1
    5d4c:	2300      	moveq	r3, #0
    5d4e:	b2db      	uxtb	r3, r3
}
    5d50:	4618      	mov	r0, r3
    5d52:	370c      	adds	r7, #12
    5d54:	46bd      	mov	sp, r7
    5d56:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d5a:	4770      	bx	lr

00005d5c <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5d5c:	b480      	push	{r7}
    5d5e:	b083      	sub	sp, #12
    5d60:	af00      	add	r7, sp, #0
    5d62:	6078      	str	r0, [r7, #4]
    5d64:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5d66:	bf00      	nop
    5d68:	687b      	ldr	r3, [r7, #4]
    5d6a:	69da      	ldr	r2, [r3, #28]
    5d6c:	683b      	ldr	r3, [r7, #0]
    5d6e:	4013      	ands	r3, r2
    5d70:	2b00      	cmp	r3, #0
    5d72:	d1f9      	bne.n	5d68 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5d74:	bf00      	nop
    5d76:	370c      	adds	r7, #12
    5d78:	46bd      	mov	sp, r7
    5d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d7e:	4770      	bx	lr

00005d80 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5d80:	b480      	push	{r7}
    5d82:	b083      	sub	sp, #12
    5d84:	af00      	add	r7, sp, #0
    5d86:	6078      	str	r0, [r7, #4]
    5d88:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5d8a:	687b      	ldr	r3, [r7, #4]
    5d8c:	69da      	ldr	r2, [r3, #28]
    5d8e:	683b      	ldr	r3, [r7, #0]
    5d90:	4013      	ands	r3, r2
    5d92:	2b00      	cmp	r3, #0
    5d94:	bf14      	ite	ne
    5d96:	2301      	movne	r3, #1
    5d98:	2300      	moveq	r3, #0
    5d9a:	b2db      	uxtb	r3, r3
}
    5d9c:	4618      	mov	r0, r3
    5d9e:	370c      	adds	r7, #12
    5da0:	46bd      	mov	sp, r7
    5da2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5da6:	4770      	bx	lr

00005da8 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5da8:	b480      	push	{r7}
    5daa:	b083      	sub	sp, #12
    5dac:	af00      	add	r7, sp, #0
    5dae:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5db0:	687b      	ldr	r3, [r7, #4]
    5db2:	2201      	movs	r2, #1
    5db4:	761a      	strb	r2, [r3, #24]
}
    5db6:	bf00      	nop
    5db8:	370c      	adds	r7, #12
    5dba:	46bd      	mov	sp, r7
    5dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dc0:	4770      	bx	lr

00005dc2 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5dc2:	b480      	push	{r7}
    5dc4:	b083      	sub	sp, #12
    5dc6:	af00      	add	r7, sp, #0
    5dc8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5dca:	687b      	ldr	r3, [r7, #4]
    5dcc:	2202      	movs	r2, #2
    5dce:	761a      	strb	r2, [r3, #24]
}
    5dd0:	bf00      	nop
    5dd2:	370c      	adds	r7, #12
    5dd4:	46bd      	mov	sp, r7
    5dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dda:	4770      	bx	lr

00005ddc <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5ddc:	b480      	push	{r7}
    5dde:	b083      	sub	sp, #12
    5de0:	af00      	add	r7, sp, #0
    5de2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5de4:	687b      	ldr	r3, [r7, #4]
    5de6:	7e1b      	ldrb	r3, [r3, #24]
    5de8:	b2db      	uxtb	r3, r3
}
    5dea:	4618      	mov	r0, r3
    5dec:	370c      	adds	r7, #12
    5dee:	46bd      	mov	sp, r7
    5df0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5df4:	4770      	bx	lr

00005df6 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    5df6:	b480      	push	{r7}
    5df8:	b085      	sub	sp, #20
    5dfa:	af00      	add	r7, sp, #0
    5dfc:	6078      	str	r0, [r7, #4]
    5dfe:	460b      	mov	r3, r1
    5e00:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    5e02:	687b      	ldr	r3, [r7, #4]
    5e04:	7e1b      	ldrb	r3, [r3, #24]
    5e06:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5e08:	7bfa      	ldrb	r2, [r7, #15]
    5e0a:	78fb      	ldrb	r3, [r7, #3]
    5e0c:	4013      	ands	r3, r2
    5e0e:	73fb      	strb	r3, [r7, #15]
	return tmp;
    5e10:	7bfb      	ldrb	r3, [r7, #15]
}
    5e12:	4618      	mov	r0, r3
    5e14:	3714      	adds	r7, #20
    5e16:	46bd      	mov	sp, r7
    5e18:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e1c:	4770      	bx	lr

00005e1e <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    5e1e:	b480      	push	{r7}
    5e20:	b083      	sub	sp, #12
    5e22:	af00      	add	r7, sp, #0
    5e24:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    5e26:	687b      	ldr	r3, [r7, #4]
    5e28:	7e1b      	ldrb	r3, [r3, #24]
    5e2a:	b2db      	uxtb	r3, r3
}
    5e2c:	4618      	mov	r0, r3
    5e2e:	370c      	adds	r7, #12
    5e30:	46bd      	mov	sp, r7
    5e32:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e36:	4770      	bx	lr

00005e38 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    5e38:	b480      	push	{r7}
    5e3a:	b083      	sub	sp, #12
    5e3c:	af00      	add	r7, sp, #0
    5e3e:	6078      	str	r0, [r7, #4]
    5e40:	460b      	mov	r3, r1
    5e42:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    5e44:	687b      	ldr	r3, [r7, #4]
    5e46:	78fa      	ldrb	r2, [r7, #3]
    5e48:	761a      	strb	r2, [r3, #24]
}
    5e4a:	bf00      	nop
    5e4c:	370c      	adds	r7, #12
    5e4e:	46bd      	mov	sp, r7
    5e50:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e54:	4770      	bx	lr
	...

00005e58 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5e58:	b580      	push	{r7, lr}
    5e5a:	b082      	sub	sp, #8
    5e5c:	af00      	add	r7, sp, #0
    5e5e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    5e60:	687b      	ldr	r3, [r7, #4]
    5e62:	681b      	ldr	r3, [r3, #0]
    5e64:	f043 0202 	orr.w	r2, r3, #2
    5e68:	687b      	ldr	r3, [r7, #4]
    5e6a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5e6c:	2103      	movs	r1, #3
    5e6e:	6878      	ldr	r0, [r7, #4]
    5e70:	4b02      	ldr	r3, [pc, #8]	; (5e7c <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    5e72:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e74:	bf00      	nop
    5e76:	3708      	adds	r7, #8
    5e78:	46bd      	mov	sp, r7
    5e7a:	bd80      	pop	{r7, pc}
    5e7c:	00005d11 	.word	0x00005d11

00005e80 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5e80:	b580      	push	{r7, lr}
    5e82:	b082      	sub	sp, #8
    5e84:	af00      	add	r7, sp, #0
    5e86:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5e88:	687b      	ldr	r3, [r7, #4]
    5e8a:	681b      	ldr	r3, [r3, #0]
    5e8c:	f023 0202 	bic.w	r2, r3, #2
    5e90:	687b      	ldr	r3, [r7, #4]
    5e92:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5e94:	2103      	movs	r1, #3
    5e96:	6878      	ldr	r0, [r7, #4]
    5e98:	4b02      	ldr	r3, [pc, #8]	; (5ea4 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5e9a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e9c:	bf00      	nop
    5e9e:	3708      	adds	r7, #8
    5ea0:	46bd      	mov	sp, r7
    5ea2:	bd80      	pop	{r7, pc}
    5ea4:	00005d11 	.word	0x00005d11

00005ea8 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5ea8:	b480      	push	{r7}
    5eaa:	b085      	sub	sp, #20
    5eac:	af00      	add	r7, sp, #0
    5eae:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5eb0:	687b      	ldr	r3, [r7, #4]
    5eb2:	681b      	ldr	r3, [r3, #0]
    5eb4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    5eb6:	68fb      	ldr	r3, [r7, #12]
    5eb8:	0edb      	lsrs	r3, r3, #27
    5eba:	f003 0301 	and.w	r3, r3, #1
    5ebe:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5ec0:	68fb      	ldr	r3, [r7, #12]
    5ec2:	2b00      	cmp	r3, #0
    5ec4:	bf14      	ite	ne
    5ec6:	2301      	movne	r3, #1
    5ec8:	2300      	moveq	r3, #0
    5eca:	b2db      	uxtb	r3, r3
}
    5ecc:	4618      	mov	r0, r3
    5ece:	3714      	adds	r7, #20
    5ed0:	46bd      	mov	sp, r7
    5ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ed6:	4770      	bx	lr

00005ed8 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5ed8:	b580      	push	{r7, lr}
    5eda:	b084      	sub	sp, #16
    5edc:	af00      	add	r7, sp, #0
    5ede:	6078      	str	r0, [r7, #4]
    5ee0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5ee2:	2103      	movs	r1, #3
    5ee4:	6878      	ldr	r0, [r7, #4]
    5ee6:	4b07      	ldr	r3, [pc, #28]	; (5f04 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5ee8:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5eea:	687b      	ldr	r3, [r7, #4]
    5eec:	681b      	ldr	r3, [r3, #0]
    5eee:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5ef0:	68fa      	ldr	r2, [r7, #12]
    5ef2:	683b      	ldr	r3, [r7, #0]
    5ef4:	4013      	ands	r3, r2
    5ef6:	60fb      	str	r3, [r7, #12]
	return tmp;
    5ef8:	68fb      	ldr	r3, [r7, #12]
}
    5efa:	4618      	mov	r0, r3
    5efc:	3710      	adds	r7, #16
    5efe:	46bd      	mov	sp, r7
    5f00:	bd80      	pop	{r7, pc}
    5f02:	bf00      	nop
    5f04:	00005d11 	.word	0x00005d11

00005f08 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    5f08:	b580      	push	{r7, lr}
    5f0a:	b082      	sub	sp, #8
    5f0c:	af00      	add	r7, sp, #0
    5f0e:	6078      	str	r0, [r7, #4]
    5f10:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    5f12:	687b      	ldr	r3, [r7, #4]
    5f14:	683a      	ldr	r2, [r7, #0]
    5f16:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5f18:	2103      	movs	r1, #3
    5f1a:	6878      	ldr	r0, [r7, #4]
    5f1c:	4b02      	ldr	r3, [pc, #8]	; (5f28 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    5f1e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f20:	bf00      	nop
    5f22:	3708      	adds	r7, #8
    5f24:	46bd      	mov	sp, r7
    5f26:	bd80      	pop	{r7, pc}
    5f28:	00005d11 	.word	0x00005d11

00005f2c <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5f2c:	b580      	push	{r7, lr}
    5f2e:	b084      	sub	sp, #16
    5f30:	af00      	add	r7, sp, #0
    5f32:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5f34:	2103      	movs	r1, #3
    5f36:	6878      	ldr	r0, [r7, #4]
    5f38:	4b09      	ldr	r3, [pc, #36]	; (5f60 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    5f3a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5f3c:	687b      	ldr	r3, [r7, #4]
    5f3e:	681b      	ldr	r3, [r3, #0]
    5f40:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    5f42:	68fb      	ldr	r3, [r7, #12]
    5f44:	085b      	lsrs	r3, r3, #1
    5f46:	f003 0301 	and.w	r3, r3, #1
    5f4a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5f4c:	68fb      	ldr	r3, [r7, #12]
    5f4e:	2b00      	cmp	r3, #0
    5f50:	bf14      	ite	ne
    5f52:	2301      	movne	r3, #1
    5f54:	2300      	moveq	r3, #0
    5f56:	b2db      	uxtb	r3, r3
}
    5f58:	4618      	mov	r0, r3
    5f5a:	3710      	adds	r7, #16
    5f5c:	46bd      	mov	sp, r7
    5f5e:	bd80      	pop	{r7, pc}
    5f60:	00005d5d 	.word	0x00005d5d

00005f64 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5f64:	b580      	push	{r7, lr}
    5f66:	b082      	sub	sp, #8
    5f68:	af00      	add	r7, sp, #0
    5f6a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5f6c:	687b      	ldr	r3, [r7, #4]
    5f6e:	681b      	ldr	r3, [r3, #0]
    5f70:	f023 0202 	bic.w	r2, r3, #2
    5f74:	687b      	ldr	r3, [r7, #4]
    5f76:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5f78:	2103      	movs	r1, #3
    5f7a:	6878      	ldr	r0, [r7, #4]
    5f7c:	4b02      	ldr	r3, [pc, #8]	; (5f88 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    5f7e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f80:	bf00      	nop
    5f82:	3708      	adds	r7, #8
    5f84:	46bd      	mov	sp, r7
    5f86:	bd80      	pop	{r7, pc}
    5f88:	00005d5d 	.word	0x00005d5d

00005f8c <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    5f8c:	b580      	push	{r7, lr}
    5f8e:	b084      	sub	sp, #16
    5f90:	af00      	add	r7, sp, #0
    5f92:	6078      	str	r0, [r7, #4]
    5f94:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5f96:	2103      	movs	r1, #3
    5f98:	6878      	ldr	r0, [r7, #4]
    5f9a:	4b07      	ldr	r3, [pc, #28]	; (5fb8 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    5f9c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5f9e:	687b      	ldr	r3, [r7, #4]
    5fa0:	681b      	ldr	r3, [r3, #0]
    5fa2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5fa4:	68fa      	ldr	r2, [r7, #12]
    5fa6:	683b      	ldr	r3, [r7, #0]
    5fa8:	4013      	ands	r3, r2
    5faa:	60fb      	str	r3, [r7, #12]
	return tmp;
    5fac:	68fb      	ldr	r3, [r7, #12]
}
    5fae:	4618      	mov	r0, r3
    5fb0:	3710      	adds	r7, #16
    5fb2:	46bd      	mov	sp, r7
    5fb4:	bd80      	pop	{r7, pc}
    5fb6:	bf00      	nop
    5fb8:	00005d5d 	.word	0x00005d5d

00005fbc <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    5fbc:	b580      	push	{r7, lr}
    5fbe:	b082      	sub	sp, #8
    5fc0:	af00      	add	r7, sp, #0
    5fc2:	6078      	str	r0, [r7, #4]
    5fc4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    5fc6:	687b      	ldr	r3, [r7, #4]
    5fc8:	683a      	ldr	r2, [r7, #0]
    5fca:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5fcc:	2103      	movs	r1, #3
    5fce:	6878      	ldr	r0, [r7, #4]
    5fd0:	4b02      	ldr	r3, [pc, #8]	; (5fdc <hri_sercomspi_write_CTRLA_reg+0x20>)
    5fd2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5fd4:	bf00      	nop
    5fd6:	3708      	adds	r7, #8
    5fd8:	46bd      	mov	sp, r7
    5fda:	bd80      	pop	{r7, pc}
    5fdc:	00005d5d 	.word	0x00005d5d

00005fe0 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    5fe0:	b580      	push	{r7, lr}
    5fe2:	b082      	sub	sp, #8
    5fe4:	af00      	add	r7, sp, #0
    5fe6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    5fe8:	687b      	ldr	r3, [r7, #4]
    5fea:	685b      	ldr	r3, [r3, #4]
    5fec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5ff0:	687b      	ldr	r3, [r7, #4]
    5ff2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5ff4:	2104      	movs	r1, #4
    5ff6:	6878      	ldr	r0, [r7, #4]
    5ff8:	4b02      	ldr	r3, [pc, #8]	; (6004 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    5ffa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ffc:	bf00      	nop
    5ffe:	3708      	adds	r7, #8
    6000:	46bd      	mov	sp, r7
    6002:	bd80      	pop	{r7, pc}
    6004:	00005d11 	.word	0x00005d11

00006008 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    6008:	b580      	push	{r7, lr}
    600a:	b082      	sub	sp, #8
    600c:	af00      	add	r7, sp, #0
    600e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6010:	687b      	ldr	r3, [r7, #4]
    6012:	685b      	ldr	r3, [r3, #4]
    6014:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    6018:	687b      	ldr	r3, [r7, #4]
    601a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    601c:	2104      	movs	r1, #4
    601e:	6878      	ldr	r0, [r7, #4]
    6020:	4b02      	ldr	r3, [pc, #8]	; (602c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    6022:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6024:	bf00      	nop
    6026:	3708      	adds	r7, #8
    6028:	46bd      	mov	sp, r7
    602a:	bd80      	pop	{r7, pc}
    602c:	00005d11 	.word	0x00005d11

00006030 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    6030:	b580      	push	{r7, lr}
    6032:	b082      	sub	sp, #8
    6034:	af00      	add	r7, sp, #0
    6036:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6038:	687b      	ldr	r3, [r7, #4]
    603a:	685b      	ldr	r3, [r3, #4]
    603c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    6040:	687b      	ldr	r3, [r7, #4]
    6042:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6044:	2104      	movs	r1, #4
    6046:	6878      	ldr	r0, [r7, #4]
    6048:	4b02      	ldr	r3, [pc, #8]	; (6054 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    604a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    604c:	bf00      	nop
    604e:	3708      	adds	r7, #8
    6050:	46bd      	mov	sp, r7
    6052:	bd80      	pop	{r7, pc}
    6054:	00005d11 	.word	0x00005d11

00006058 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    6058:	b580      	push	{r7, lr}
    605a:	b082      	sub	sp, #8
    605c:	af00      	add	r7, sp, #0
    605e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6060:	687b      	ldr	r3, [r7, #4]
    6062:	685b      	ldr	r3, [r3, #4]
    6064:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    6068:	687b      	ldr	r3, [r7, #4]
    606a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    606c:	2104      	movs	r1, #4
    606e:	6878      	ldr	r0, [r7, #4]
    6070:	4b02      	ldr	r3, [pc, #8]	; (607c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    6072:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6074:	bf00      	nop
    6076:	3708      	adds	r7, #8
    6078:	46bd      	mov	sp, r7
    607a:	bd80      	pop	{r7, pc}
    607c:	00005d11 	.word	0x00005d11

00006080 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    6080:	b580      	push	{r7, lr}
    6082:	b082      	sub	sp, #8
    6084:	af00      	add	r7, sp, #0
    6086:	6078      	str	r0, [r7, #4]
    6088:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    608a:	687b      	ldr	r3, [r7, #4]
    608c:	685a      	ldr	r2, [r3, #4]
    608e:	683b      	ldr	r3, [r7, #0]
    6090:	041b      	lsls	r3, r3, #16
    6092:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    6096:	431a      	orrs	r2, r3
    6098:	687b      	ldr	r3, [r7, #4]
    609a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    609c:	2104      	movs	r1, #4
    609e:	6878      	ldr	r0, [r7, #4]
    60a0:	4b02      	ldr	r3, [pc, #8]	; (60ac <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    60a2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    60a4:	bf00      	nop
    60a6:	3708      	adds	r7, #8
    60a8:	46bd      	mov	sp, r7
    60aa:	bd80      	pop	{r7, pc}
    60ac:	00005d11 	.word	0x00005d11

000060b0 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    60b0:	b580      	push	{r7, lr}
    60b2:	b082      	sub	sp, #8
    60b4:	af00      	add	r7, sp, #0
    60b6:	6078      	str	r0, [r7, #4]
    60b8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    60ba:	687b      	ldr	r3, [r7, #4]
    60bc:	683a      	ldr	r2, [r7, #0]
    60be:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    60c0:	2104      	movs	r1, #4
    60c2:	6878      	ldr	r0, [r7, #4]
    60c4:	4b02      	ldr	r3, [pc, #8]	; (60d0 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    60c6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    60c8:	bf00      	nop
    60ca:	3708      	adds	r7, #8
    60cc:	46bd      	mov	sp, r7
    60ce:	bd80      	pop	{r7, pc}
    60d0:	00005d11 	.word	0x00005d11

000060d4 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    60d4:	b580      	push	{r7, lr}
    60d6:	b082      	sub	sp, #8
    60d8:	af00      	add	r7, sp, #0
    60da:	6078      	str	r0, [r7, #4]
    60dc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    60de:	687b      	ldr	r3, [r7, #4]
    60e0:	683a      	ldr	r2, [r7, #0]
    60e2:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    60e4:	2117      	movs	r1, #23
    60e6:	6878      	ldr	r0, [r7, #4]
    60e8:	4b02      	ldr	r3, [pc, #8]	; (60f4 <hri_sercomspi_write_CTRLB_reg+0x20>)
    60ea:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    60ec:	bf00      	nop
    60ee:	3708      	adds	r7, #8
    60f0:	46bd      	mov	sp, r7
    60f2:	bd80      	pop	{r7, pc}
    60f4:	00005d5d 	.word	0x00005d5d

000060f8 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    60f8:	b480      	push	{r7}
    60fa:	b083      	sub	sp, #12
    60fc:	af00      	add	r7, sp, #0
    60fe:	6078      	str	r0, [r7, #4]
    6100:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6102:	687b      	ldr	r3, [r7, #4]
    6104:	683a      	ldr	r2, [r7, #0]
    6106:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6108:	bf00      	nop
    610a:	370c      	adds	r7, #12
    610c:	46bd      	mov	sp, r7
    610e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6112:	4770      	bx	lr

00006114 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    6114:	b480      	push	{r7}
    6116:	b083      	sub	sp, #12
    6118:	af00      	add	r7, sp, #0
    611a:	6078      	str	r0, [r7, #4]
    611c:	460b      	mov	r3, r1
    611e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6120:	687b      	ldr	r3, [r7, #4]
    6122:	78fa      	ldrb	r2, [r7, #3]
    6124:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6126:	bf00      	nop
    6128:	370c      	adds	r7, #12
    612a:	46bd      	mov	sp, r7
    612c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6130:	4770      	bx	lr
	...

00006134 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    6134:	b580      	push	{r7, lr}
    6136:	b084      	sub	sp, #16
    6138:	af00      	add	r7, sp, #0
    613a:	6078      	str	r0, [r7, #4]
    613c:	460b      	mov	r3, r1
    613e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6140:	687b      	ldr	r3, [r7, #4]
    6142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6144:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    6146:	68fb      	ldr	r3, [r7, #12]
    6148:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    614c:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    614e:	78fb      	ldrb	r3, [r7, #3]
    6150:	039b      	lsls	r3, r3, #14
    6152:	461a      	mov	r2, r3
    6154:	68fb      	ldr	r3, [r7, #12]
    6156:	4313      	orrs	r3, r2
    6158:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    615a:	687b      	ldr	r3, [r7, #4]
    615c:	68fa      	ldr	r2, [r7, #12]
    615e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6160:	2104      	movs	r1, #4
    6162:	6878      	ldr	r0, [r7, #4]
    6164:	4b02      	ldr	r3, [pc, #8]	; (6170 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    6166:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6168:	bf00      	nop
    616a:	3710      	adds	r7, #16
    616c:	46bd      	mov	sp, r7
    616e:	bd80      	pop	{r7, pc}
    6170:	00005d11 	.word	0x00005d11

00006174 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    6174:	b580      	push	{r7, lr}
    6176:	b082      	sub	sp, #8
    6178:	af00      	add	r7, sp, #0
    617a:	6078      	str	r0, [r7, #4]
    617c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    617e:	687b      	ldr	r3, [r7, #4]
    6180:	683a      	ldr	r2, [r7, #0]
    6182:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6184:	2104      	movs	r1, #4
    6186:	6878      	ldr	r0, [r7, #4]
    6188:	4b02      	ldr	r3, [pc, #8]	; (6194 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    618a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    618c:	bf00      	nop
    618e:	3708      	adds	r7, #8
    6190:	46bd      	mov	sp, r7
    6192:	bd80      	pop	{r7, pc}
    6194:	00005d11 	.word	0x00005d11

00006198 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    6198:	b580      	push	{r7, lr}
    619a:	b082      	sub	sp, #8
    619c:	af00      	add	r7, sp, #0
    619e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    61a0:	2104      	movs	r1, #4
    61a2:	6878      	ldr	r0, [r7, #4]
    61a4:	4b03      	ldr	r3, [pc, #12]	; (61b4 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    61a6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    61a8:	687b      	ldr	r3, [r7, #4]
    61aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    61ac:	4618      	mov	r0, r3
    61ae:	3708      	adds	r7, #8
    61b0:	46bd      	mov	sp, r7
    61b2:	bd80      	pop	{r7, pc}
    61b4:	00005d11 	.word	0x00005d11

000061b8 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    61b8:	b480      	push	{r7}
    61ba:	b083      	sub	sp, #12
    61bc:	af00      	add	r7, sp, #0
    61be:	6078      	str	r0, [r7, #4]
    61c0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    61c2:	687b      	ldr	r3, [r7, #4]
    61c4:	683a      	ldr	r2, [r7, #0]
    61c6:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61c8:	bf00      	nop
    61ca:	370c      	adds	r7, #12
    61cc:	46bd      	mov	sp, r7
    61ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    61d2:	4770      	bx	lr

000061d4 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    61d4:	b580      	push	{r7, lr}
    61d6:	b082      	sub	sp, #8
    61d8:	af00      	add	r7, sp, #0
    61da:	6078      	str	r0, [r7, #4]
    61dc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    61de:	687b      	ldr	r3, [r7, #4]
    61e0:	683a      	ldr	r2, [r7, #0]
    61e2:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    61e4:	2104      	movs	r1, #4
    61e6:	6878      	ldr	r0, [r7, #4]
    61e8:	4b02      	ldr	r3, [pc, #8]	; (61f4 <hri_sercomi2cm_write_DATA_reg+0x20>)
    61ea:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61ec:	bf00      	nop
    61ee:	3708      	adds	r7, #8
    61f0:	46bd      	mov	sp, r7
    61f2:	bd80      	pop	{r7, pc}
    61f4:	00005d11 	.word	0x00005d11

000061f8 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    61f8:	b580      	push	{r7, lr}
    61fa:	b082      	sub	sp, #8
    61fc:	af00      	add	r7, sp, #0
    61fe:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6200:	2104      	movs	r1, #4
    6202:	6878      	ldr	r0, [r7, #4]
    6204:	4b03      	ldr	r3, [pc, #12]	; (6214 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    6206:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6208:	687b      	ldr	r3, [r7, #4]
    620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    620c:	4618      	mov	r0, r3
    620e:	3708      	adds	r7, #8
    6210:	46bd      	mov	sp, r7
    6212:	bd80      	pop	{r7, pc}
    6214:	00005d11 	.word	0x00005d11

00006218 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6218:	b480      	push	{r7}
    621a:	b083      	sub	sp, #12
    621c:	af00      	add	r7, sp, #0
    621e:	6078      	str	r0, [r7, #4]
    6220:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    6222:	687b      	ldr	r3, [r7, #4]
    6224:	683a      	ldr	r2, [r7, #0]
    6226:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6228:	bf00      	nop
    622a:	370c      	adds	r7, #12
    622c:	46bd      	mov	sp, r7
    622e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6232:	4770      	bx	lr

00006234 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    6234:	b480      	push	{r7}
    6236:	b083      	sub	sp, #12
    6238:	af00      	add	r7, sp, #0
    623a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    623c:	687b      	ldr	r3, [r7, #4]
    623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6240:	4618      	mov	r0, r3
    6242:	370c      	adds	r7, #12
    6244:	46bd      	mov	sp, r7
    6246:	f85d 7b04 	ldr.w	r7, [sp], #4
    624a:	4770      	bx	lr

0000624c <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    624c:	b480      	push	{r7}
    624e:	b083      	sub	sp, #12
    6250:	af00      	add	r7, sp, #0
    6252:	6078      	str	r0, [r7, #4]
    6254:	460b      	mov	r3, r1
    6256:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6258:	687b      	ldr	r3, [r7, #4]
    625a:	78fa      	ldrb	r2, [r7, #3]
    625c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6260:	bf00      	nop
    6262:	370c      	adds	r7, #12
    6264:	46bd      	mov	sp, r7
    6266:	f85d 7b04 	ldr.w	r7, [sp], #4
    626a:	4770      	bx	lr

0000626c <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    626c:	b480      	push	{r7}
    626e:	b083      	sub	sp, #12
    6270:	af00      	add	r7, sp, #0
    6272:	6078      	str	r0, [r7, #4]
    6274:	460b      	mov	r3, r1
    6276:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6278:	687b      	ldr	r3, [r7, #4]
    627a:	887a      	ldrh	r2, [r7, #2]
    627c:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    627e:	bf00      	nop
    6280:	370c      	adds	r7, #12
    6282:	46bd      	mov	sp, r7
    6284:	f85d 7b04 	ldr.w	r7, [sp], #4
    6288:	4770      	bx	lr
	...

0000628c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    628c:	b580      	push	{r7, lr}
    628e:	b082      	sub	sp, #8
    6290:	af00      	add	r7, sp, #0
    6292:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6294:	2104      	movs	r1, #4
    6296:	6878      	ldr	r0, [r7, #4]
    6298:	4b06      	ldr	r3, [pc, #24]	; (62b4 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    629a:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    629c:	687b      	ldr	r3, [r7, #4]
    629e:	8b5b      	ldrh	r3, [r3, #26]
    62a0:	b29b      	uxth	r3, r3
    62a2:	091b      	lsrs	r3, r3, #4
    62a4:	b29b      	uxth	r3, r3
    62a6:	f003 0303 	and.w	r3, r3, #3
    62aa:	b29b      	uxth	r3, r3
}
    62ac:	4618      	mov	r0, r3
    62ae:	3708      	adds	r7, #8
    62b0:	46bd      	mov	sp, r7
    62b2:	bd80      	pop	{r7, pc}
    62b4:	00005d11 	.word	0x00005d11

000062b8 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    62b8:	b580      	push	{r7, lr}
    62ba:	b082      	sub	sp, #8
    62bc:	af00      	add	r7, sp, #0
    62be:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    62c0:	2104      	movs	r1, #4
    62c2:	6878      	ldr	r0, [r7, #4]
    62c4:	4b04      	ldr	r3, [pc, #16]	; (62d8 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    62c6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    62c8:	687b      	ldr	r3, [r7, #4]
    62ca:	8b5b      	ldrh	r3, [r3, #26]
    62cc:	b29b      	uxth	r3, r3
}
    62ce:	4618      	mov	r0, r3
    62d0:	3708      	adds	r7, #8
    62d2:	46bd      	mov	sp, r7
    62d4:	bd80      	pop	{r7, pc}
    62d6:	bf00      	nop
    62d8:	00005d11 	.word	0x00005d11

000062dc <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    62dc:	b580      	push	{r7, lr}
    62de:	b082      	sub	sp, #8
    62e0:	af00      	add	r7, sp, #0
    62e2:	6078      	str	r0, [r7, #4]
    62e4:	460b      	mov	r3, r1
    62e6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    62e8:	687b      	ldr	r3, [r7, #4]
    62ea:	887a      	ldrh	r2, [r7, #2]
    62ec:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    62ee:	2104      	movs	r1, #4
    62f0:	6878      	ldr	r0, [r7, #4]
    62f2:	4b03      	ldr	r3, [pc, #12]	; (6300 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    62f4:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62f6:	bf00      	nop
    62f8:	3708      	adds	r7, #8
    62fa:	46bd      	mov	sp, r7
    62fc:	bd80      	pop	{r7, pc}
    62fe:	bf00      	nop
    6300:	00005d11 	.word	0x00005d11

00006304 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6304:	b4b0      	push	{r4, r5, r7}
    6306:	b08d      	sub	sp, #52	; 0x34
    6308:	af00      	add	r7, sp, #0
    630a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    630c:	4b13      	ldr	r3, [pc, #76]	; (635c <_sercom_get_hardware_index+0x58>)
    630e:	f107 040c 	add.w	r4, r7, #12
    6312:	461d      	mov	r5, r3
    6314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6318:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    631c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6320:	2300      	movs	r3, #0
    6322:	62fb      	str	r3, [r7, #44]	; 0x2c
    6324:	e010      	b.n	6348 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6328:	009b      	lsls	r3, r3, #2
    632a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    632e:	4413      	add	r3, r2
    6330:	f853 3c24 	ldr.w	r3, [r3, #-36]
    6334:	461a      	mov	r2, r3
    6336:	687b      	ldr	r3, [r7, #4]
    6338:	429a      	cmp	r2, r3
    633a:	d102      	bne.n	6342 <_sercom_get_hardware_index+0x3e>
			return i;
    633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    633e:	b2db      	uxtb	r3, r3
    6340:	e006      	b.n	6350 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6344:	3301      	adds	r3, #1
    6346:	62fb      	str	r3, [r7, #44]	; 0x2c
    6348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    634a:	2b07      	cmp	r3, #7
    634c:	d9eb      	bls.n	6326 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    634e:	2300      	movs	r3, #0
}
    6350:	4618      	mov	r0, r3
    6352:	3734      	adds	r7, #52	; 0x34
    6354:	46bd      	mov	sp, r7
    6356:	bcb0      	pop	{r4, r5, r7}
    6358:	4770      	bx	lr
    635a:	bf00      	nop
    635c:	0000eeb0 	.word	0x0000eeb0

00006360 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6360:	b580      	push	{r7, lr}
    6362:	b084      	sub	sp, #16
    6364:	af00      	add	r7, sp, #0
    6366:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6368:	6878      	ldr	r0, [r7, #4]
    636a:	4b13      	ldr	r3, [pc, #76]	; (63b8 <_get_i2cm_index+0x58>)
    636c:	4798      	blx	r3
    636e:	4603      	mov	r3, r0
    6370:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6372:	2300      	movs	r3, #0
    6374:	73fb      	strb	r3, [r7, #15]
    6376:	e010      	b.n	639a <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    6378:	7bfa      	ldrb	r2, [r7, #15]
    637a:	4910      	ldr	r1, [pc, #64]	; (63bc <_get_i2cm_index+0x5c>)
    637c:	4613      	mov	r3, r2
    637e:	005b      	lsls	r3, r3, #1
    6380:	4413      	add	r3, r2
    6382:	00db      	lsls	r3, r3, #3
    6384:	440b      	add	r3, r1
    6386:	781b      	ldrb	r3, [r3, #0]
    6388:	7bba      	ldrb	r2, [r7, #14]
    638a:	429a      	cmp	r2, r3
    638c:	d102      	bne.n	6394 <_get_i2cm_index+0x34>
			return i;
    638e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6392:	e00d      	b.n	63b0 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6394:	7bfb      	ldrb	r3, [r7, #15]
    6396:	3301      	adds	r3, #1
    6398:	73fb      	strb	r3, [r7, #15]
    639a:	7bfb      	ldrb	r3, [r7, #15]
    639c:	2b02      	cmp	r3, #2
    639e:	d9eb      	bls.n	6378 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    63a0:	f240 32a6 	movw	r2, #934	; 0x3a6
    63a4:	4906      	ldr	r1, [pc, #24]	; (63c0 <_get_i2cm_index+0x60>)
    63a6:	2000      	movs	r0, #0
    63a8:	4b06      	ldr	r3, [pc, #24]	; (63c4 <_get_i2cm_index+0x64>)
    63aa:	4798      	blx	r3
	return -1;
    63ac:	f04f 33ff 	mov.w	r3, #4294967295
}
    63b0:	4618      	mov	r0, r3
    63b2:	3710      	adds	r7, #16
    63b4:	46bd      	mov	sp, r7
    63b6:	bd80      	pop	{r7, pc}
    63b8:	00006305 	.word	0x00006305
    63bc:	20000018 	.word	0x20000018
    63c0:	0000ee94 	.word	0x0000ee94
    63c4:	000037fd 	.word	0x000037fd

000063c8 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    63c8:	b580      	push	{r7, lr}
    63ca:	b082      	sub	sp, #8
    63cc:	af00      	add	r7, sp, #0
    63ce:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    63d0:	2103      	movs	r1, #3
    63d2:	6878      	ldr	r0, [r7, #4]
    63d4:	4b02      	ldr	r3, [pc, #8]	; (63e0 <_sercom_i2c_send_stop+0x18>)
    63d6:	4798      	blx	r3
}
    63d8:	bf00      	nop
    63da:	3708      	adds	r7, #8
    63dc:	46bd      	mov	sp, r7
    63de:	bd80      	pop	{r7, pc}
    63e0:	00006081 	.word	0x00006081

000063e4 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    63e4:	b590      	push	{r4, r7, lr}
    63e6:	b087      	sub	sp, #28
    63e8:	af00      	add	r7, sp, #0
    63ea:	60f8      	str	r0, [r7, #12]
    63ec:	60b9      	str	r1, [r7, #8]
    63ee:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    63f0:	68f8      	ldr	r0, [r7, #12]
    63f2:	4b7d      	ldr	r3, [pc, #500]	; (65e8 <_sercom_i2c_sync_analyse_flags+0x204>)
    63f4:	4798      	blx	r3
    63f6:	4603      	mov	r3, r0
    63f8:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    63fa:	68f8      	ldr	r0, [r7, #12]
    63fc:	4b7b      	ldr	r3, [pc, #492]	; (65ec <_sercom_i2c_sync_analyse_flags+0x208>)
    63fe:	4798      	blx	r3
    6400:	4603      	mov	r3, r0
    6402:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    6404:	68bb      	ldr	r3, [r7, #8]
    6406:	f003 0301 	and.w	r3, r3, #1
    640a:	2b00      	cmp	r3, #0
    640c:	f000 8095 	beq.w	653a <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6410:	8a7b      	ldrh	r3, [r7, #18]
    6412:	f003 0302 	and.w	r3, r3, #2
    6416:	2b00      	cmp	r3, #0
    6418:	d01d      	beq.n	6456 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    641a:	68f8      	ldr	r0, [r7, #12]
    641c:	4b74      	ldr	r3, [pc, #464]	; (65f0 <_sercom_i2c_sync_analyse_flags+0x20c>)
    641e:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6420:	687b      	ldr	r3, [r7, #4]
    6422:	885b      	ldrh	r3, [r3, #2]
    6424:	b29b      	uxth	r3, r3
    6426:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    642a:	b29a      	uxth	r2, r3
    642c:	687b      	ldr	r3, [r7, #4]
    642e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6430:	687b      	ldr	r3, [r7, #4]
    6432:	885b      	ldrh	r3, [r3, #2]
    6434:	b29b      	uxth	r3, r3
    6436:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    643a:	b29a      	uxth	r2, r3
    643c:	687b      	ldr	r3, [r7, #4]
    643e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6440:	8a7b      	ldrh	r3, [r7, #18]
    6442:	f003 0301 	and.w	r3, r3, #1
    6446:	2b00      	cmp	r3, #0
    6448:	d002      	beq.n	6450 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    644a:	f06f 0304 	mvn.w	r3, #4
    644e:	e0c6      	b.n	65de <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6450:	f06f 0303 	mvn.w	r3, #3
    6454:	e0c3      	b.n	65de <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6456:	8a7b      	ldrh	r3, [r7, #18]
    6458:	f003 0304 	and.w	r3, r3, #4
    645c:	2b00      	cmp	r3, #0
    645e:	d01f      	beq.n	64a0 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6460:	687b      	ldr	r3, [r7, #4]
    6462:	685b      	ldr	r3, [r3, #4]
    6464:	2b00      	cmp	r3, #0
    6466:	dd07      	ble.n	6478 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6468:	687b      	ldr	r3, [r7, #4]
    646a:	885b      	ldrh	r3, [r3, #2]
    646c:	b29b      	uxth	r3, r3
    646e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6472:	b29a      	uxth	r2, r3
    6474:	687b      	ldr	r3, [r7, #4]
    6476:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6478:	687b      	ldr	r3, [r7, #4]
    647a:	885b      	ldrh	r3, [r3, #2]
    647c:	b29b      	uxth	r3, r3
    647e:	b21b      	sxth	r3, r3
    6480:	2b00      	cmp	r3, #0
    6482:	da02      	bge.n	648a <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6484:	68f8      	ldr	r0, [r7, #12]
    6486:	4b5b      	ldr	r3, [pc, #364]	; (65f4 <_sercom_i2c_sync_analyse_flags+0x210>)
    6488:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    648a:	687b      	ldr	r3, [r7, #4]
    648c:	885b      	ldrh	r3, [r3, #2]
    648e:	b29b      	uxth	r3, r3
    6490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6494:	b29a      	uxth	r2, r3
    6496:	687b      	ldr	r3, [r7, #4]
    6498:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    649a:	f06f 0301 	mvn.w	r3, #1
    649e:	e09e      	b.n	65de <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    64a0:	687b      	ldr	r3, [r7, #4]
    64a2:	885b      	ldrh	r3, [r3, #2]
    64a4:	b29b      	uxth	r3, r3
    64a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    64aa:	2b00      	cmp	r3, #0
    64ac:	d01c      	beq.n	64e8 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    64ae:	687b      	ldr	r3, [r7, #4]
    64b0:	881b      	ldrh	r3, [r3, #0]
    64b2:	121b      	asrs	r3, r3, #8
    64b4:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    64b6:	f003 0406 	and.w	r4, r3, #6
    64ba:	68f8      	ldr	r0, [r7, #12]
    64bc:	4b4e      	ldr	r3, [pc, #312]	; (65f8 <_sercom_i2c_sync_analyse_flags+0x214>)
    64be:	4798      	blx	r3
    64c0:	4603      	mov	r3, r0
    64c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    64c6:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    64c8:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    64cc:	4619      	mov	r1, r3
    64ce:	68f8      	ldr	r0, [r7, #12]
    64d0:	4b4a      	ldr	r3, [pc, #296]	; (65fc <_sercom_i2c_sync_analyse_flags+0x218>)
    64d2:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    64d4:	687b      	ldr	r3, [r7, #4]
    64d6:	885b      	ldrh	r3, [r3, #2]
    64d8:	b29b      	uxth	r3, r3
    64da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    64de:	b29a      	uxth	r2, r3
    64e0:	687b      	ldr	r3, [r7, #4]
    64e2:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    64e4:	2300      	movs	r3, #0
    64e6:	e07a      	b.n	65de <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    64e8:	687b      	ldr	r3, [r7, #4]
    64ea:	685b      	ldr	r3, [r3, #4]
    64ec:	2b00      	cmp	r3, #0
    64ee:	d111      	bne.n	6514 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    64f0:	687b      	ldr	r3, [r7, #4]
    64f2:	885b      	ldrh	r3, [r3, #2]
    64f4:	b29b      	uxth	r3, r3
    64f6:	b21b      	sxth	r3, r3
    64f8:	2b00      	cmp	r3, #0
    64fa:	da02      	bge.n	6502 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    64fc:	68f8      	ldr	r0, [r7, #12]
    64fe:	4b3d      	ldr	r3, [pc, #244]	; (65f4 <_sercom_i2c_sync_analyse_flags+0x210>)
    6500:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6502:	687b      	ldr	r3, [r7, #4]
    6504:	885b      	ldrh	r3, [r3, #2]
    6506:	b29b      	uxth	r3, r3
    6508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    650c:	b29a      	uxth	r2, r3
    650e:	687b      	ldr	r3, [r7, #4]
    6510:	805a      	strh	r2, [r3, #2]
    6512:	e010      	b.n	6536 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6514:	687b      	ldr	r3, [r7, #4]
    6516:	689b      	ldr	r3, [r3, #8]
    6518:	781b      	ldrb	r3, [r3, #0]
    651a:	4619      	mov	r1, r3
    651c:	68f8      	ldr	r0, [r7, #12]
    651e:	4b38      	ldr	r3, [pc, #224]	; (6600 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6520:	4798      	blx	r3
				msg->buffer++;
    6522:	687b      	ldr	r3, [r7, #4]
    6524:	689b      	ldr	r3, [r3, #8]
    6526:	1c5a      	adds	r2, r3, #1
    6528:	687b      	ldr	r3, [r7, #4]
    652a:	609a      	str	r2, [r3, #8]
				msg->len--;
    652c:	687b      	ldr	r3, [r7, #4]
    652e:	685b      	ldr	r3, [r3, #4]
    6530:	1e5a      	subs	r2, r3, #1
    6532:	687b      	ldr	r3, [r7, #4]
    6534:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    6536:	2300      	movs	r3, #0
    6538:	e051      	b.n	65de <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    653a:	68bb      	ldr	r3, [r7, #8]
    653c:	f003 0302 	and.w	r3, r3, #2
    6540:	2b00      	cmp	r3, #0
    6542:	d04b      	beq.n	65dc <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6544:	687b      	ldr	r3, [r7, #4]
    6546:	685b      	ldr	r3, [r3, #4]
    6548:	2b00      	cmp	r3, #0
    654a:	d041      	beq.n	65d0 <_sercom_i2c_sync_analyse_flags+0x1ec>
    654c:	8a7b      	ldrh	r3, [r7, #18]
    654e:	f003 0304 	and.w	r3, r3, #4
    6552:	2b00      	cmp	r3, #0
    6554:	d13c      	bne.n	65d0 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    6556:	687b      	ldr	r3, [r7, #4]
    6558:	685b      	ldr	r3, [r3, #4]
    655a:	1e5a      	subs	r2, r3, #1
    655c:	687b      	ldr	r3, [r7, #4]
    655e:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6560:	687b      	ldr	r3, [r7, #4]
    6562:	685b      	ldr	r3, [r3, #4]
    6564:	2b00      	cmp	r3, #0
    6566:	d102      	bne.n	656e <_sercom_i2c_sync_analyse_flags+0x18a>
    6568:	697b      	ldr	r3, [r7, #20]
    656a:	2b00      	cmp	r3, #0
    656c:	d006      	beq.n	657c <_sercom_i2c_sync_analyse_flags+0x198>
    656e:	687b      	ldr	r3, [r7, #4]
    6570:	685b      	ldr	r3, [r3, #4]
    6572:	2b01      	cmp	r3, #1
    6574:	d105      	bne.n	6582 <_sercom_i2c_sync_analyse_flags+0x19e>
    6576:	697b      	ldr	r3, [r7, #20]
    6578:	2b00      	cmp	r3, #0
    657a:	d002      	beq.n	6582 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    657c:	68f8      	ldr	r0, [r7, #12]
    657e:	4b21      	ldr	r3, [pc, #132]	; (6604 <_sercom_i2c_sync_analyse_flags+0x220>)
    6580:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6582:	687b      	ldr	r3, [r7, #4]
    6584:	685b      	ldr	r3, [r3, #4]
    6586:	2b00      	cmp	r3, #0
    6588:	d113      	bne.n	65b2 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    658a:	687b      	ldr	r3, [r7, #4]
    658c:	885b      	ldrh	r3, [r3, #2]
    658e:	b29b      	uxth	r3, r3
    6590:	b21b      	sxth	r3, r3
    6592:	2b00      	cmp	r3, #0
    6594:	da05      	bge.n	65a2 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6596:	68f8      	ldr	r0, [r7, #12]
    6598:	4b1b      	ldr	r3, [pc, #108]	; (6608 <_sercom_i2c_sync_analyse_flags+0x224>)
    659a:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    659c:	68f8      	ldr	r0, [r7, #12]
    659e:	4b15      	ldr	r3, [pc, #84]	; (65f4 <_sercom_i2c_sync_analyse_flags+0x210>)
    65a0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    65a2:	687b      	ldr	r3, [r7, #4]
    65a4:	885b      	ldrh	r3, [r3, #2]
    65a6:	b29b      	uxth	r3, r3
    65a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    65ac:	b29a      	uxth	r2, r3
    65ae:	687b      	ldr	r3, [r7, #4]
    65b0:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    65b2:	687b      	ldr	r3, [r7, #4]
    65b4:	689c      	ldr	r4, [r3, #8]
    65b6:	1c62      	adds	r2, r4, #1
    65b8:	687b      	ldr	r3, [r7, #4]
    65ba:	609a      	str	r2, [r3, #8]
    65bc:	68f8      	ldr	r0, [r7, #12]
    65be:	4b13      	ldr	r3, [pc, #76]	; (660c <_sercom_i2c_sync_analyse_flags+0x228>)
    65c0:	4798      	blx	r3
    65c2:	4603      	mov	r3, r0
    65c4:	b2db      	uxtb	r3, r3
    65c6:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    65c8:	68f8      	ldr	r0, [r7, #12]
    65ca:	4b11      	ldr	r3, [pc, #68]	; (6610 <_sercom_i2c_sync_analyse_flags+0x22c>)
    65cc:	4798      	blx	r3
    65ce:	e005      	b.n	65dc <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    65d0:	68f8      	ldr	r0, [r7, #12]
    65d2:	4b0f      	ldr	r3, [pc, #60]	; (6610 <_sercom_i2c_sync_analyse_flags+0x22c>)
    65d4:	4798      	blx	r3
			return I2C_NACK;
    65d6:	f06f 0301 	mvn.w	r3, #1
    65da:	e000      	b.n	65de <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    65dc:	2300      	movs	r3, #0
}
    65de:	4618      	mov	r0, r3
    65e0:	371c      	adds	r7, #28
    65e2:	46bd      	mov	sp, r7
    65e4:	bd90      	pop	{r4, r7, pc}
    65e6:	bf00      	nop
    65e8:	00005ea9 	.word	0x00005ea9
    65ec:	000062b9 	.word	0x000062b9
    65f0:	00005da9 	.word	0x00005da9
    65f4:	000063c9 	.word	0x000063c9
    65f8:	00006199 	.word	0x00006199
    65fc:	00006175 	.word	0x00006175
    6600:	000061d5 	.word	0x000061d5
    6604:	00006031 	.word	0x00006031
    6608:	00006009 	.word	0x00006009
    660c:	000061f9 	.word	0x000061f9
    6610:	00005dc3 	.word	0x00005dc3

00006614 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    6614:	b580      	push	{r7, lr}
    6616:	b082      	sub	sp, #8
    6618:	af00      	add	r7, sp, #0
    661a:	6078      	str	r0, [r7, #4]
    661c:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    661e:	687b      	ldr	r3, [r7, #4]
    6620:	2b00      	cmp	r3, #0
    6622:	bf14      	ite	ne
    6624:	2301      	movne	r3, #1
    6626:	2300      	moveq	r3, #0
    6628:	b2db      	uxtb	r3, r3
    662a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    662e:	4908      	ldr	r1, [pc, #32]	; (6650 <_i2c_m_sync_init+0x3c>)
    6630:	4618      	mov	r0, r3
    6632:	4b08      	ldr	r3, [pc, #32]	; (6654 <_i2c_m_sync_init+0x40>)
    6634:	4798      	blx	r3

	i2c_dev->hw = hw;
    6636:	687b      	ldr	r3, [r7, #4]
    6638:	683a      	ldr	r2, [r7, #0]
    663a:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    663c:	687b      	ldr	r3, [r7, #4]
    663e:	6839      	ldr	r1, [r7, #0]
    6640:	4618      	mov	r0, r3
    6642:	4b05      	ldr	r3, [pc, #20]	; (6658 <_i2c_m_sync_init+0x44>)
    6644:	4798      	blx	r3
    6646:	4603      	mov	r3, r0
}
    6648:	4618      	mov	r0, r3
    664a:	3708      	adds	r7, #8
    664c:	46bd      	mov	sp, r7
    664e:	bd80      	pop	{r7, pc}
    6650:	0000ee94 	.word	0x0000ee94
    6654:	000037fd 	.word	0x000037fd
    6658:	00006a2d 	.word	0x00006a2d

0000665c <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    665c:	b580      	push	{r7, lr}
    665e:	b082      	sub	sp, #8
    6660:	af00      	add	r7, sp, #0
    6662:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    6664:	687b      	ldr	r3, [r7, #4]
    6666:	2b00      	cmp	r3, #0
    6668:	bf14      	ite	ne
    666a:	2301      	movne	r3, #1
    666c:	2300      	moveq	r3, #0
    666e:	b2db      	uxtb	r3, r3
    6670:	f240 5235 	movw	r2, #1333	; 0x535
    6674:	4906      	ldr	r1, [pc, #24]	; (6690 <_i2c_m_sync_enable+0x34>)
    6676:	4618      	mov	r0, r3
    6678:	4b06      	ldr	r3, [pc, #24]	; (6694 <_i2c_m_sync_enable+0x38>)
    667a:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    667c:	687b      	ldr	r3, [r7, #4]
    667e:	691b      	ldr	r3, [r3, #16]
    6680:	4618      	mov	r0, r3
    6682:	4b05      	ldr	r3, [pc, #20]	; (6698 <_i2c_m_sync_enable+0x3c>)
    6684:	4798      	blx	r3
    6686:	4603      	mov	r3, r0
}
    6688:	4618      	mov	r0, r3
    668a:	3708      	adds	r7, #8
    668c:	46bd      	mov	sp, r7
    668e:	bd80      	pop	{r7, pc}
    6690:	0000ee94 	.word	0x0000ee94
    6694:	000037fd 	.word	0x000037fd
    6698:	000069a1 	.word	0x000069a1

0000669c <_i2c_m_sync_disable>:
 * \brief Disable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_disable(struct _i2c_m_sync_device *const i2c_dev)
{
    669c:	b580      	push	{r7, lr}
    669e:	b084      	sub	sp, #16
    66a0:	af00      	add	r7, sp, #0
    66a2:	6078      	str	r0, [r7, #4]
	void *hw = i2c_dev->hw;
    66a4:	687b      	ldr	r3, [r7, #4]
    66a6:	691b      	ldr	r3, [r3, #16]
    66a8:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    66aa:	687b      	ldr	r3, [r7, #4]
    66ac:	2b00      	cmp	r3, #0
    66ae:	bf14      	ite	ne
    66b0:	2301      	movne	r3, #1
    66b2:	2300      	moveq	r3, #0
    66b4:	b2db      	uxtb	r3, r3
    66b6:	f240 5243 	movw	r2, #1347	; 0x543
    66ba:	490c      	ldr	r1, [pc, #48]	; (66ec <_i2c_m_sync_disable+0x50>)
    66bc:	4618      	mov	r0, r3
    66be:	4b0c      	ldr	r3, [pc, #48]	; (66f0 <_i2c_m_sync_disable+0x54>)
    66c0:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    66c2:	687b      	ldr	r3, [r7, #4]
    66c4:	691b      	ldr	r3, [r3, #16]
    66c6:	2b00      	cmp	r3, #0
    66c8:	bf14      	ite	ne
    66ca:	2301      	movne	r3, #1
    66cc:	2300      	moveq	r3, #0
    66ce:	b2db      	uxtb	r3, r3
    66d0:	f240 5244 	movw	r2, #1348	; 0x544
    66d4:	4905      	ldr	r1, [pc, #20]	; (66ec <_i2c_m_sync_disable+0x50>)
    66d6:	4618      	mov	r0, r3
    66d8:	4b05      	ldr	r3, [pc, #20]	; (66f0 <_i2c_m_sync_disable+0x54>)
    66da:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    66dc:	68f8      	ldr	r0, [r7, #12]
    66de:	4b05      	ldr	r3, [pc, #20]	; (66f4 <_i2c_m_sync_disable+0x58>)
    66e0:	4798      	blx	r3

	return ERR_NONE;
    66e2:	2300      	movs	r3, #0
}
    66e4:	4618      	mov	r0, r3
    66e6:	3710      	adds	r7, #16
    66e8:	46bd      	mov	sp, r7
    66ea:	bd80      	pop	{r7, pc}
    66ec:	0000ee94 	.word	0x0000ee94
    66f0:	000037fd 	.word	0x000037fd
    66f4:	00005e81 	.word	0x00005e81

000066f8 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    66f8:	b580      	push	{r7, lr}
    66fa:	b084      	sub	sp, #16
    66fc:	af00      	add	r7, sp, #0
    66fe:	6078      	str	r0, [r7, #4]
    6700:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    6702:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6706:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    6708:	687b      	ldr	r3, [r7, #4]
    670a:	691b      	ldr	r3, [r3, #16]
    670c:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    670e:	68b8      	ldr	r0, [r7, #8]
    6710:	4b0f      	ldr	r3, [pc, #60]	; (6750 <_sercom_i2c_sync_wait_bus+0x58>)
    6712:	4798      	blx	r3
    6714:	4603      	mov	r3, r0
    6716:	461a      	mov	r2, r3
    6718:	683b      	ldr	r3, [r7, #0]
    671a:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    671c:	68fb      	ldr	r3, [r7, #12]
    671e:	1e5a      	subs	r2, r3, #1
    6720:	60fa      	str	r2, [r7, #12]
    6722:	2b00      	cmp	r3, #0
    6724:	d102      	bne.n	672c <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    6726:	f06f 0304 	mvn.w	r3, #4
    672a:	e00c      	b.n	6746 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    672c:	683b      	ldr	r3, [r7, #0]
    672e:	681b      	ldr	r3, [r3, #0]
    6730:	f003 0301 	and.w	r3, r3, #1
    6734:	2b00      	cmp	r3, #0
    6736:	d105      	bne.n	6744 <_sercom_i2c_sync_wait_bus+0x4c>
    6738:	683b      	ldr	r3, [r7, #0]
    673a:	681b      	ldr	r3, [r3, #0]
    673c:	f003 0302 	and.w	r3, r3, #2
    6740:	2b00      	cmp	r3, #0
    6742:	d0e4      	beq.n	670e <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    6744:	2300      	movs	r3, #0
}
    6746:	4618      	mov	r0, r3
    6748:	3710      	adds	r7, #16
    674a:	46bd      	mov	sp, r7
    674c:	bd80      	pop	{r7, pc}
    674e:	bf00      	nop
    6750:	00005ddd 	.word	0x00005ddd

00006754 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    6754:	b590      	push	{r4, r7, lr}
    6756:	b087      	sub	sp, #28
    6758:	af00      	add	r7, sp, #0
    675a:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    675c:	687b      	ldr	r3, [r7, #4]
    675e:	691b      	ldr	r3, [r3, #16]
    6760:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6762:	687b      	ldr	r3, [r7, #4]
    6764:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6766:	6978      	ldr	r0, [r7, #20]
    6768:	4b39      	ldr	r3, [pc, #228]	; (6850 <_sercom_i2c_sync_send_address+0xfc>)
    676a:	4798      	blx	r3
    676c:	4603      	mov	r3, r0
    676e:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    6770:	687b      	ldr	r3, [r7, #4]
    6772:	2b00      	cmp	r3, #0
    6774:	bf14      	ite	ne
    6776:	2301      	movne	r3, #1
    6778:	2300      	moveq	r3, #0
    677a:	b2db      	uxtb	r3, r3
    677c:	f240 52a5 	movw	r2, #1445	; 0x5a5
    6780:	4934      	ldr	r1, [pc, #208]	; (6854 <_sercom_i2c_sync_send_address+0x100>)
    6782:	4618      	mov	r0, r3
    6784:	4b34      	ldr	r3, [pc, #208]	; (6858 <_sercom_i2c_sync_send_address+0x104>)
    6786:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6788:	693b      	ldr	r3, [r7, #16]
    678a:	685b      	ldr	r3, [r3, #4]
    678c:	2b01      	cmp	r3, #1
    678e:	d106      	bne.n	679e <_sercom_i2c_sync_send_address+0x4a>
    6790:	68fb      	ldr	r3, [r7, #12]
    6792:	2b00      	cmp	r3, #0
    6794:	d003      	beq.n	679e <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6796:	6978      	ldr	r0, [r7, #20]
    6798:	4b30      	ldr	r3, [pc, #192]	; (685c <_sercom_i2c_sync_send_address+0x108>)
    679a:	4798      	blx	r3
    679c:	e002      	b.n	67a4 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    679e:	6978      	ldr	r0, [r7, #20]
    67a0:	4b2f      	ldr	r3, [pc, #188]	; (6860 <_sercom_i2c_sync_send_address+0x10c>)
    67a2:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    67a4:	693b      	ldr	r3, [r7, #16]
    67a6:	881b      	ldrh	r3, [r3, #0]
    67a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    67ac:	2b00      	cmp	r3, #0
    67ae:	d022      	beq.n	67f6 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    67b0:	693b      	ldr	r3, [r7, #16]
    67b2:	885b      	ldrh	r3, [r3, #2]
    67b4:	b29b      	uxth	r3, r3
    67b6:	f003 0301 	and.w	r3, r3, #1
    67ba:	2b00      	cmp	r3, #0
    67bc:	d007      	beq.n	67ce <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    67be:	693b      	ldr	r3, [r7, #16]
    67c0:	885b      	ldrh	r3, [r3, #2]
    67c2:	b29b      	uxth	r3, r3
    67c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    67c8:	b29a      	uxth	r2, r3
    67ca:	693b      	ldr	r3, [r7, #16]
    67cc:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    67ce:	693b      	ldr	r3, [r7, #16]
    67d0:	881b      	ldrh	r3, [r3, #0]
    67d2:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    67d4:	f240 74fe 	movw	r4, #2046	; 0x7fe
    67d8:	401c      	ands	r4, r3
    67da:	6978      	ldr	r0, [r7, #20]
    67dc:	4b21      	ldr	r3, [pc, #132]	; (6864 <_sercom_i2c_sync_send_address+0x110>)
    67de:	4798      	blx	r3
    67e0:	4603      	mov	r3, r0
    67e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    67e6:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    67e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    67ec:	4619      	mov	r1, r3
    67ee:	6978      	ldr	r0, [r7, #20]
    67f0:	4b1d      	ldr	r3, [pc, #116]	; (6868 <_sercom_i2c_sync_send_address+0x114>)
    67f2:	4798      	blx	r3
    67f4:	e01a      	b.n	682c <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    67f6:	693b      	ldr	r3, [r7, #16]
    67f8:	881b      	ldrh	r3, [r3, #0]
    67fa:	005b      	lsls	r3, r3, #1
    67fc:	b2db      	uxtb	r3, r3
    67fe:	693a      	ldr	r2, [r7, #16]
    6800:	8852      	ldrh	r2, [r2, #2]
    6802:	b292      	uxth	r2, r2
    6804:	f002 0201 	and.w	r2, r2, #1
    6808:	2a00      	cmp	r2, #0
    680a:	bf14      	ite	ne
    680c:	2201      	movne	r2, #1
    680e:	2200      	moveq	r2, #0
    6810:	b2d2      	uxtb	r2, r2
    6812:	4313      	orrs	r3, r2
    6814:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6816:	6978      	ldr	r0, [r7, #20]
    6818:	4b12      	ldr	r3, [pc, #72]	; (6864 <_sercom_i2c_sync_send_address+0x110>)
    681a:	4798      	blx	r3
    681c:	4603      	mov	r3, r0
    681e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6822:	4323      	orrs	r3, r4
    6824:	4619      	mov	r1, r3
    6826:	6978      	ldr	r0, [r7, #20]
    6828:	4b0f      	ldr	r3, [pc, #60]	; (6868 <_sercom_i2c_sync_send_address+0x114>)
    682a:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    682c:	f107 0308 	add.w	r3, r7, #8
    6830:	4619      	mov	r1, r3
    6832:	6878      	ldr	r0, [r7, #4]
    6834:	4b0d      	ldr	r3, [pc, #52]	; (686c <_sercom_i2c_sync_send_address+0x118>)
    6836:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    6838:	68bb      	ldr	r3, [r7, #8]
    683a:	693a      	ldr	r2, [r7, #16]
    683c:	4619      	mov	r1, r3
    683e:	6978      	ldr	r0, [r7, #20]
    6840:	4b0b      	ldr	r3, [pc, #44]	; (6870 <_sercom_i2c_sync_send_address+0x11c>)
    6842:	4798      	blx	r3
    6844:	4603      	mov	r3, r0
}
    6846:	4618      	mov	r0, r3
    6848:	371c      	adds	r7, #28
    684a:	46bd      	mov	sp, r7
    684c:	bd90      	pop	{r4, r7, pc}
    684e:	bf00      	nop
    6850:	00005ea9 	.word	0x00005ea9
    6854:	0000ee94 	.word	0x0000ee94
    6858:	000037fd 	.word	0x000037fd
    685c:	00006031 	.word	0x00006031
    6860:	00006059 	.word	0x00006059
    6864:	00006199 	.word	0x00006199
    6868:	00006175 	.word	0x00006175
    686c:	000066f9 	.word	0x000066f9
    6870:	000063e5 	.word	0x000063e5

00006874 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    6874:	b580      	push	{r7, lr}
    6876:	b086      	sub	sp, #24
    6878:	af00      	add	r7, sp, #0
    687a:	6078      	str	r0, [r7, #4]
    687c:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    687e:	687b      	ldr	r3, [r7, #4]
    6880:	691b      	ldr	r3, [r3, #16]
    6882:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    6884:	687b      	ldr	r3, [r7, #4]
    6886:	2b00      	cmp	r3, #0
    6888:	bf14      	ite	ne
    688a:	2301      	movne	r3, #1
    688c:	2300      	moveq	r3, #0
    688e:	b2db      	uxtb	r3, r3
    6890:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    6894:	493b      	ldr	r1, [pc, #236]	; (6984 <_i2c_m_sync_transfer+0x110>)
    6896:	4618      	mov	r0, r3
    6898:	4b3b      	ldr	r3, [pc, #236]	; (6988 <_i2c_m_sync_transfer+0x114>)
    689a:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    689c:	687b      	ldr	r3, [r7, #4]
    689e:	691b      	ldr	r3, [r3, #16]
    68a0:	2b00      	cmp	r3, #0
    68a2:	bf14      	ite	ne
    68a4:	2301      	movne	r3, #1
    68a6:	2300      	moveq	r3, #0
    68a8:	b2db      	uxtb	r3, r3
    68aa:	f240 52d1 	movw	r2, #1489	; 0x5d1
    68ae:	4935      	ldr	r1, [pc, #212]	; (6984 <_i2c_m_sync_transfer+0x110>)
    68b0:	4618      	mov	r0, r3
    68b2:	4b35      	ldr	r3, [pc, #212]	; (6988 <_i2c_m_sync_transfer+0x114>)
    68b4:	4798      	blx	r3
	ASSERT(msg);
    68b6:	683b      	ldr	r3, [r7, #0]
    68b8:	2b00      	cmp	r3, #0
    68ba:	bf14      	ite	ne
    68bc:	2301      	movne	r3, #1
    68be:	2300      	moveq	r3, #0
    68c0:	b2db      	uxtb	r3, r3
    68c2:	f240 52d2 	movw	r2, #1490	; 0x5d2
    68c6:	492f      	ldr	r1, [pc, #188]	; (6984 <_i2c_m_sync_transfer+0x110>)
    68c8:	4618      	mov	r0, r3
    68ca:	4b2f      	ldr	r3, [pc, #188]	; (6988 <_i2c_m_sync_transfer+0x114>)
    68cc:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    68ce:	687b      	ldr	r3, [r7, #4]
    68d0:	885b      	ldrh	r3, [r3, #2]
    68d2:	b29b      	uxth	r3, r3
    68d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    68d8:	2b00      	cmp	r3, #0
    68da:	d002      	beq.n	68e2 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    68dc:	f06f 0305 	mvn.w	r3, #5
    68e0:	e04c      	b.n	697c <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    68e2:	683b      	ldr	r3, [r7, #0]
    68e4:	885b      	ldrh	r3, [r3, #2]
    68e6:	b29b      	uxth	r3, r3
    68e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    68ec:	b29a      	uxth	r2, r3
    68ee:	683b      	ldr	r3, [r7, #0]
    68f0:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    68f2:	687b      	ldr	r3, [r7, #4]
    68f4:	683a      	ldr	r2, [r7, #0]
    68f6:	ca07      	ldmia	r2, {r0, r1, r2}
    68f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    68fc:	6938      	ldr	r0, [r7, #16]
    68fe:	4b23      	ldr	r3, [pc, #140]	; (698c <_i2c_m_sync_transfer+0x118>)
    6900:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    6902:	6878      	ldr	r0, [r7, #4]
    6904:	4b22      	ldr	r3, [pc, #136]	; (6990 <_i2c_m_sync_transfer+0x11c>)
    6906:	4798      	blx	r3
    6908:	6178      	str	r0, [r7, #20]

	if (ret) {
    690a:	697b      	ldr	r3, [r7, #20]
    690c:	2b00      	cmp	r3, #0
    690e:	d02d      	beq.n	696c <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6910:	687b      	ldr	r3, [r7, #4]
    6912:	885b      	ldrh	r3, [r3, #2]
    6914:	b29b      	uxth	r3, r3
    6916:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    691a:	b29a      	uxth	r2, r3
    691c:	687b      	ldr	r3, [r7, #4]
    691e:	805a      	strh	r2, [r3, #2]

		return ret;
    6920:	697b      	ldr	r3, [r7, #20]
    6922:	e02b      	b.n	697c <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6924:	f107 030c 	add.w	r3, r7, #12
    6928:	4619      	mov	r1, r3
    692a:	6878      	ldr	r0, [r7, #4]
    692c:	4b19      	ldr	r3, [pc, #100]	; (6994 <_i2c_m_sync_transfer+0x120>)
    692e:	4798      	blx	r3
    6930:	6178      	str	r0, [r7, #20]

		if (ret) {
    6932:	697b      	ldr	r3, [r7, #20]
    6934:	2b00      	cmp	r3, #0
    6936:	d012      	beq.n	695e <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    6938:	683b      	ldr	r3, [r7, #0]
    693a:	885b      	ldrh	r3, [r3, #2]
    693c:	b29b      	uxth	r3, r3
    693e:	b21b      	sxth	r3, r3
    6940:	2b00      	cmp	r3, #0
    6942:	da02      	bge.n	694a <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    6944:	6938      	ldr	r0, [r7, #16]
    6946:	4b14      	ldr	r3, [pc, #80]	; (6998 <_i2c_m_sync_transfer+0x124>)
    6948:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    694a:	687b      	ldr	r3, [r7, #4]
    694c:	885b      	ldrh	r3, [r3, #2]
    694e:	b29b      	uxth	r3, r3
    6950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6954:	b29a      	uxth	r2, r3
    6956:	687b      	ldr	r3, [r7, #4]
    6958:	805a      	strh	r2, [r3, #2]

			return ret;
    695a:	697b      	ldr	r3, [r7, #20]
    695c:	e00e      	b.n	697c <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    695e:	68fb      	ldr	r3, [r7, #12]
    6960:	687a      	ldr	r2, [r7, #4]
    6962:	4619      	mov	r1, r3
    6964:	6938      	ldr	r0, [r7, #16]
    6966:	4b0d      	ldr	r3, [pc, #52]	; (699c <_i2c_m_sync_transfer+0x128>)
    6968:	4798      	blx	r3
    696a:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    696c:	687b      	ldr	r3, [r7, #4]
    696e:	885b      	ldrh	r3, [r3, #2]
    6970:	b29b      	uxth	r3, r3
    6972:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6976:	2b00      	cmp	r3, #0
    6978:	d1d4      	bne.n	6924 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    697a:	697b      	ldr	r3, [r7, #20]
}
    697c:	4618      	mov	r0, r3
    697e:	3718      	adds	r7, #24
    6980:	46bd      	mov	sp, r7
    6982:	bd80      	pop	{r7, pc}
    6984:	0000ee94 	.word	0x0000ee94
    6988:	000037fd 	.word	0x000037fd
    698c:	00005fe1 	.word	0x00005fe1
    6990:	00006755 	.word	0x00006755
    6994:	000066f9 	.word	0x000066f9
    6998:	000063c9 	.word	0x000063c9
    699c:	000063e5 	.word	0x000063e5

000069a0 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    69a0:	b580      	push	{r7, lr}
    69a2:	b084      	sub	sp, #16
    69a4:	af00      	add	r7, sp, #0
    69a6:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    69a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    69ac:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    69ae:	2304      	movs	r3, #4
    69b0:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    69b2:	687b      	ldr	r3, [r7, #4]
    69b4:	2b00      	cmp	r3, #0
    69b6:	bf14      	ite	ne
    69b8:	2301      	movne	r3, #1
    69ba:	2300      	moveq	r3, #0
    69bc:	b2db      	uxtb	r3, r3
    69be:	f240 6205 	movw	r2, #1541	; 0x605
    69c2:	4915      	ldr	r1, [pc, #84]	; (6a18 <_i2c_m_enable_implementation+0x78>)
    69c4:	4618      	mov	r0, r3
    69c6:	4b15      	ldr	r3, [pc, #84]	; (6a1c <_i2c_m_enable_implementation+0x7c>)
    69c8:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    69ca:	6878      	ldr	r0, [r7, #4]
    69cc:	4b14      	ldr	r3, [pc, #80]	; (6a20 <_i2c_m_enable_implementation+0x80>)
    69ce:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    69d0:	e016      	b.n	6a00 <_i2c_m_enable_implementation+0x60>
		timeout--;
    69d2:	68fb      	ldr	r3, [r7, #12]
    69d4:	3b01      	subs	r3, #1
    69d6:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    69d8:	68fb      	ldr	r3, [r7, #12]
    69da:	2b00      	cmp	r3, #0
    69dc:	dc10      	bgt.n	6a00 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    69de:	68bb      	ldr	r3, [r7, #8]
    69e0:	3b01      	subs	r3, #1
    69e2:	60bb      	str	r3, [r7, #8]
    69e4:	68bb      	ldr	r3, [r7, #8]
    69e6:	2b00      	cmp	r3, #0
    69e8:	d007      	beq.n	69fa <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    69ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
    69ee:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    69f0:	2110      	movs	r1, #16
    69f2:	6878      	ldr	r0, [r7, #4]
    69f4:	4b0b      	ldr	r3, [pc, #44]	; (6a24 <_i2c_m_enable_implementation+0x84>)
    69f6:	4798      	blx	r3
    69f8:	e002      	b.n	6a00 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    69fa:	f06f 0305 	mvn.w	r3, #5
    69fe:	e006      	b.n	6a0e <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6a00:	6878      	ldr	r0, [r7, #4]
    6a02:	4b09      	ldr	r3, [pc, #36]	; (6a28 <_i2c_m_enable_implementation+0x88>)
    6a04:	4798      	blx	r3
    6a06:	4603      	mov	r3, r0
    6a08:	2b01      	cmp	r3, #1
    6a0a:	d1e2      	bne.n	69d2 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    6a0c:	2300      	movs	r3, #0
}
    6a0e:	4618      	mov	r0, r3
    6a10:	3710      	adds	r7, #16
    6a12:	46bd      	mov	sp, r7
    6a14:	bd80      	pop	{r7, pc}
    6a16:	bf00      	nop
    6a18:	0000ee94 	.word	0x0000ee94
    6a1c:	000037fd 	.word	0x000037fd
    6a20:	00005e59 	.word	0x00005e59
    6a24:	000062dd 	.word	0x000062dd
    6a28:	0000628d 	.word	0x0000628d

00006a2c <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6a2c:	b580      	push	{r7, lr}
    6a2e:	b084      	sub	sp, #16
    6a30:	af00      	add	r7, sp, #0
    6a32:	6078      	str	r0, [r7, #4]
    6a34:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    6a36:	6838      	ldr	r0, [r7, #0]
    6a38:	4b42      	ldr	r3, [pc, #264]	; (6b44 <_i2c_m_sync_init_impl+0x118>)
    6a3a:	4798      	blx	r3
    6a3c:	4603      	mov	r3, r0
    6a3e:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6a40:	2101      	movs	r1, #1
    6a42:	6838      	ldr	r0, [r7, #0]
    6a44:	4b40      	ldr	r3, [pc, #256]	; (6b48 <_i2c_m_sync_init_impl+0x11c>)
    6a46:	4798      	blx	r3
    6a48:	4603      	mov	r3, r0
    6a4a:	f083 0301 	eor.w	r3, r3, #1
    6a4e:	b2db      	uxtb	r3, r3
    6a50:	2b00      	cmp	r3, #0
    6a52:	d020      	beq.n	6a96 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6a54:	7bfa      	ldrb	r2, [r7, #15]
    6a56:	493d      	ldr	r1, [pc, #244]	; (6b4c <_i2c_m_sync_init_impl+0x120>)
    6a58:	4613      	mov	r3, r2
    6a5a:	005b      	lsls	r3, r3, #1
    6a5c:	4413      	add	r3, r2
    6a5e:	00db      	lsls	r3, r3, #3
    6a60:	440b      	add	r3, r1
    6a62:	3304      	adds	r3, #4
    6a64:	681b      	ldr	r3, [r3, #0]
    6a66:	f003 031c 	and.w	r3, r3, #28
    6a6a:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6a6c:	2102      	movs	r1, #2
    6a6e:	6838      	ldr	r0, [r7, #0]
    6a70:	4b37      	ldr	r3, [pc, #220]	; (6b50 <_i2c_m_sync_init_impl+0x124>)
    6a72:	4798      	blx	r3
    6a74:	4603      	mov	r3, r0
    6a76:	2b00      	cmp	r3, #0
    6a78:	d006      	beq.n	6a88 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    6a7a:	6838      	ldr	r0, [r7, #0]
    6a7c:	4b35      	ldr	r3, [pc, #212]	; (6b54 <_i2c_m_sync_init_impl+0x128>)
    6a7e:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    6a80:	2102      	movs	r1, #2
    6a82:	6838      	ldr	r0, [r7, #0]
    6a84:	4b34      	ldr	r3, [pc, #208]	; (6b58 <_i2c_m_sync_init_impl+0x12c>)
    6a86:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6a88:	68bb      	ldr	r3, [r7, #8]
    6a8a:	f043 0301 	orr.w	r3, r3, #1
    6a8e:	4619      	mov	r1, r3
    6a90:	6838      	ldr	r0, [r7, #0]
    6a92:	4b32      	ldr	r3, [pc, #200]	; (6b5c <_i2c_m_sync_init_impl+0x130>)
    6a94:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    6a96:	2101      	movs	r1, #1
    6a98:	6838      	ldr	r0, [r7, #0]
    6a9a:	4b2f      	ldr	r3, [pc, #188]	; (6b58 <_i2c_m_sync_init_impl+0x12c>)
    6a9c:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6a9e:	7bfa      	ldrb	r2, [r7, #15]
    6aa0:	492a      	ldr	r1, [pc, #168]	; (6b4c <_i2c_m_sync_init_impl+0x120>)
    6aa2:	4613      	mov	r3, r2
    6aa4:	005b      	lsls	r3, r3, #1
    6aa6:	4413      	add	r3, r2
    6aa8:	00db      	lsls	r3, r3, #3
    6aaa:	440b      	add	r3, r1
    6aac:	3304      	adds	r3, #4
    6aae:	681b      	ldr	r3, [r3, #0]
    6ab0:	4619      	mov	r1, r3
    6ab2:	6838      	ldr	r0, [r7, #0]
    6ab4:	4b29      	ldr	r3, [pc, #164]	; (6b5c <_i2c_m_sync_init_impl+0x130>)
    6ab6:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6ab8:	7bfa      	ldrb	r2, [r7, #15]
    6aba:	4924      	ldr	r1, [pc, #144]	; (6b4c <_i2c_m_sync_init_impl+0x120>)
    6abc:	4613      	mov	r3, r2
    6abe:	005b      	lsls	r3, r3, #1
    6ac0:	4413      	add	r3, r2
    6ac2:	00db      	lsls	r3, r3, #3
    6ac4:	440b      	add	r3, r1
    6ac6:	3308      	adds	r3, #8
    6ac8:	681b      	ldr	r3, [r3, #0]
    6aca:	4619      	mov	r1, r3
    6acc:	6838      	ldr	r0, [r7, #0]
    6ace:	4b24      	ldr	r3, [pc, #144]	; (6b60 <_i2c_m_sync_init_impl+0x134>)
    6ad0:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6ad2:	7bfa      	ldrb	r2, [r7, #15]
    6ad4:	491d      	ldr	r1, [pc, #116]	; (6b4c <_i2c_m_sync_init_impl+0x120>)
    6ad6:	4613      	mov	r3, r2
    6ad8:	005b      	lsls	r3, r3, #1
    6ada:	4413      	add	r3, r2
    6adc:	00db      	lsls	r3, r3, #3
    6ade:	440b      	add	r3, r1
    6ae0:	330c      	adds	r3, #12
    6ae2:	681b      	ldr	r3, [r3, #0]
    6ae4:	4619      	mov	r1, r3
    6ae6:	6838      	ldr	r0, [r7, #0]
    6ae8:	4b1e      	ldr	r3, [pc, #120]	; (6b64 <_i2c_m_sync_init_impl+0x138>)
    6aea:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6aec:	7bfa      	ldrb	r2, [r7, #15]
    6aee:	4917      	ldr	r1, [pc, #92]	; (6b4c <_i2c_m_sync_init_impl+0x120>)
    6af0:	4613      	mov	r3, r2
    6af2:	005b      	lsls	r3, r3, #1
    6af4:	4413      	add	r3, r2
    6af6:	00db      	lsls	r3, r3, #3
    6af8:	440b      	add	r3, r1
    6afa:	3304      	adds	r3, #4
    6afc:	681b      	ldr	r3, [r3, #0]
    6afe:	0e1b      	lsrs	r3, r3, #24
    6b00:	b29b      	uxth	r3, r3
    6b02:	f003 0303 	and.w	r3, r3, #3
    6b06:	b29a      	uxth	r2, r3
    6b08:	687b      	ldr	r3, [r7, #4]
    6b0a:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6b0c:	687b      	ldr	r3, [r7, #4]
    6b0e:	899b      	ldrh	r3, [r3, #12]
    6b10:	2b01      	cmp	r3, #1
    6b12:	bf8c      	ite	hi
    6b14:	2301      	movhi	r3, #1
    6b16:	2300      	movls	r3, #0
    6b18:	b2db      	uxtb	r3, r3
    6b1a:	4619      	mov	r1, r3
    6b1c:	6838      	ldr	r0, [r7, #0]
    6b1e:	4b12      	ldr	r3, [pc, #72]	; (6b68 <_i2c_m_sync_init_impl+0x13c>)
    6b20:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    6b22:	7bfa      	ldrb	r2, [r7, #15]
    6b24:	4909      	ldr	r1, [pc, #36]	; (6b4c <_i2c_m_sync_init_impl+0x120>)
    6b26:	4613      	mov	r3, r2
    6b28:	005b      	lsls	r3, r3, #1
    6b2a:	4413      	add	r3, r2
    6b2c:	00db      	lsls	r3, r3, #3
    6b2e:	440b      	add	r3, r1
    6b30:	3312      	adds	r3, #18
    6b32:	881a      	ldrh	r2, [r3, #0]
    6b34:	687b      	ldr	r3, [r7, #4]
    6b36:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6b38:	2300      	movs	r3, #0
}
    6b3a:	4618      	mov	r0, r3
    6b3c:	3710      	adds	r7, #16
    6b3e:	46bd      	mov	sp, r7
    6b40:	bd80      	pop	{r7, pc}
    6b42:	bf00      	nop
    6b44:	00006361 	.word	0x00006361
    6b48:	00005d35 	.word	0x00005d35
    6b4c:	20000018 	.word	0x20000018
    6b50:	00005ed9 	.word	0x00005ed9
    6b54:	00005e81 	.word	0x00005e81
    6b58:	00005d11 	.word	0x00005d11
    6b5c:	00005f09 	.word	0x00005f09
    6b60:	000060b1 	.word	0x000060b1
    6b64:	000060f9 	.word	0x000060f9
    6b68:	00006135 	.word	0x00006135

00006b6c <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6b6c:	b580      	push	{r7, lr}
    6b6e:	b082      	sub	sp, #8
    6b70:	af00      	add	r7, sp, #0
    6b72:	6078      	str	r0, [r7, #4]
    6b74:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6b76:	687b      	ldr	r3, [r7, #4]
    6b78:	2b00      	cmp	r3, #0
    6b7a:	d004      	beq.n	6b86 <_spi_load_regs_master+0x1a>
    6b7c:	683b      	ldr	r3, [r7, #0]
    6b7e:	2b00      	cmp	r3, #0
    6b80:	d001      	beq.n	6b86 <_spi_load_regs_master+0x1a>
    6b82:	2301      	movs	r3, #1
    6b84:	e000      	b.n	6b88 <_spi_load_regs_master+0x1c>
    6b86:	2300      	movs	r3, #0
    6b88:	f003 0301 	and.w	r3, r3, #1
    6b8c:	b2db      	uxtb	r3, r3
    6b8e:	f640 1209 	movw	r2, #2313	; 0x909
    6b92:	4915      	ldr	r1, [pc, #84]	; (6be8 <_spi_load_regs_master+0x7c>)
    6b94:	4618      	mov	r0, r3
    6b96:	4b15      	ldr	r3, [pc, #84]	; (6bec <_spi_load_regs_master+0x80>)
    6b98:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6b9a:	683b      	ldr	r3, [r7, #0]
    6b9c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6b9e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6ba2:	f023 0301 	bic.w	r3, r3, #1
    6ba6:	4619      	mov	r1, r3
    6ba8:	6878      	ldr	r0, [r7, #4]
    6baa:	4b11      	ldr	r3, [pc, #68]	; (6bf0 <_spi_load_regs_master+0x84>)
    6bac:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    6bae:	683b      	ldr	r3, [r7, #0]
    6bb0:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    6bb2:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    6bb6:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    6bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6bbe:	4619      	mov	r1, r3
    6bc0:	6878      	ldr	r0, [r7, #4]
    6bc2:	4b0c      	ldr	r3, [pc, #48]	; (6bf4 <_spi_load_regs_master+0x88>)
    6bc4:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    6bc6:	683b      	ldr	r3, [r7, #0]
    6bc8:	7b1b      	ldrb	r3, [r3, #12]
    6bca:	4619      	mov	r1, r3
    6bcc:	6878      	ldr	r0, [r7, #4]
    6bce:	4b0a      	ldr	r3, [pc, #40]	; (6bf8 <_spi_load_regs_master+0x8c>)
    6bd0:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6bd2:	683b      	ldr	r3, [r7, #0]
    6bd4:	7b5b      	ldrb	r3, [r3, #13]
    6bd6:	4619      	mov	r1, r3
    6bd8:	6878      	ldr	r0, [r7, #4]
    6bda:	4b08      	ldr	r3, [pc, #32]	; (6bfc <_spi_load_regs_master+0x90>)
    6bdc:	4798      	blx	r3
}
    6bde:	bf00      	nop
    6be0:	3708      	adds	r7, #8
    6be2:	46bd      	mov	sp, r7
    6be4:	bd80      	pop	{r7, pc}
    6be6:	bf00      	nop
    6be8:	0000ee94 	.word	0x0000ee94
    6bec:	000037fd 	.word	0x000037fd
    6bf0:	00005fbd 	.word	0x00005fbd
    6bf4:	000060d5 	.word	0x000060d5
    6bf8:	00006115 	.word	0x00006115
    6bfc:	0000624d 	.word	0x0000624d

00006c00 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6c00:	b580      	push	{r7, lr}
    6c02:	b082      	sub	sp, #8
    6c04:	af00      	add	r7, sp, #0
    6c06:	6078      	str	r0, [r7, #4]
    6c08:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6c0a:	687b      	ldr	r3, [r7, #4]
    6c0c:	2b00      	cmp	r3, #0
    6c0e:	d004      	beq.n	6c1a <_spi_load_regs_slave+0x1a>
    6c10:	683b      	ldr	r3, [r7, #0]
    6c12:	2b00      	cmp	r3, #0
    6c14:	d001      	beq.n	6c1a <_spi_load_regs_slave+0x1a>
    6c16:	2301      	movs	r3, #1
    6c18:	e000      	b.n	6c1c <_spi_load_regs_slave+0x1c>
    6c1a:	2300      	movs	r3, #0
    6c1c:	f003 0301 	and.w	r3, r3, #1
    6c20:	b2db      	uxtb	r3, r3
    6c22:	f640 121d 	movw	r2, #2333	; 0x91d
    6c26:	491a      	ldr	r1, [pc, #104]	; (6c90 <_spi_load_regs_slave+0x90>)
    6c28:	4618      	mov	r0, r3
    6c2a:	4b1a      	ldr	r3, [pc, #104]	; (6c94 <_spi_load_regs_slave+0x94>)
    6c2c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6c2e:	683b      	ldr	r3, [r7, #0]
    6c30:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6c32:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6c36:	f023 0301 	bic.w	r3, r3, #1
    6c3a:	4619      	mov	r1, r3
    6c3c:	6878      	ldr	r0, [r7, #4]
    6c3e:	4b16      	ldr	r3, [pc, #88]	; (6c98 <_spi_load_regs_slave+0x98>)
    6c40:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6c42:	683b      	ldr	r3, [r7, #0]
    6c44:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6c46:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6c4a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6c52:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    6c56:	4619      	mov	r1, r3
    6c58:	6878      	ldr	r0, [r7, #4]
    6c5a:	4b10      	ldr	r3, [pc, #64]	; (6c9c <_spi_load_regs_slave+0x9c>)
    6c5c:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6c5e:	683b      	ldr	r3, [r7, #0]
    6c60:	689b      	ldr	r3, [r3, #8]
    6c62:	4619      	mov	r1, r3
    6c64:	6878      	ldr	r0, [r7, #4]
    6c66:	4b0e      	ldr	r3, [pc, #56]	; (6ca0 <_spi_load_regs_slave+0xa0>)
    6c68:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6c6a:	683b      	ldr	r3, [r7, #0]
    6c6c:	7b5b      	ldrb	r3, [r3, #13]
    6c6e:	4619      	mov	r1, r3
    6c70:	6878      	ldr	r0, [r7, #4]
    6c72:	4b0c      	ldr	r3, [pc, #48]	; (6ca4 <_spi_load_regs_slave+0xa4>)
    6c74:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6c76:	bf00      	nop
    6c78:	f04f 31ff 	mov.w	r1, #4294967295
    6c7c:	6878      	ldr	r0, [r7, #4]
    6c7e:	4b0a      	ldr	r3, [pc, #40]	; (6ca8 <_spi_load_regs_slave+0xa8>)
    6c80:	4798      	blx	r3
    6c82:	4603      	mov	r3, r0
    6c84:	2b00      	cmp	r3, #0
    6c86:	d1f7      	bne.n	6c78 <_spi_load_regs_slave+0x78>
		;
}
    6c88:	bf00      	nop
    6c8a:	3708      	adds	r7, #8
    6c8c:	46bd      	mov	sp, r7
    6c8e:	bd80      	pop	{r7, pc}
    6c90:	0000ee94 	.word	0x0000ee94
    6c94:	000037fd 	.word	0x000037fd
    6c98:	00005fbd 	.word	0x00005fbd
    6c9c:	000060d5 	.word	0x000060d5
    6ca0:	000061b9 	.word	0x000061b9
    6ca4:	0000624d 	.word	0x0000624d
    6ca8:	00005d81 	.word	0x00005d81

00006cac <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    6cac:	b580      	push	{r7, lr}
    6cae:	b084      	sub	sp, #16
    6cb0:	af00      	add	r7, sp, #0
    6cb2:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6cb4:	687b      	ldr	r3, [r7, #4]
    6cb6:	4618      	mov	r0, r3
    6cb8:	4b11      	ldr	r3, [pc, #68]	; (6d00 <_spi_get_regs+0x54>)
    6cba:	4798      	blx	r3
    6cbc:	4603      	mov	r3, r0
    6cbe:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6cc0:	2300      	movs	r3, #0
    6cc2:	73fb      	strb	r3, [r7, #15]
    6cc4:	e014      	b.n	6cf0 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    6cc6:	7bfa      	ldrb	r2, [r7, #15]
    6cc8:	490e      	ldr	r1, [pc, #56]	; (6d04 <_spi_get_regs+0x58>)
    6cca:	4613      	mov	r3, r2
    6ccc:	011b      	lsls	r3, r3, #4
    6cce:	4413      	add	r3, r2
    6cd0:	440b      	add	r3, r1
    6cd2:	3310      	adds	r3, #16
    6cd4:	781b      	ldrb	r3, [r3, #0]
    6cd6:	7bba      	ldrb	r2, [r7, #14]
    6cd8:	429a      	cmp	r2, r3
    6cda:	d106      	bne.n	6cea <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6cdc:	7bfa      	ldrb	r2, [r7, #15]
    6cde:	4613      	mov	r3, r2
    6ce0:	011b      	lsls	r3, r3, #4
    6ce2:	4413      	add	r3, r2
    6ce4:	4a07      	ldr	r2, [pc, #28]	; (6d04 <_spi_get_regs+0x58>)
    6ce6:	4413      	add	r3, r2
    6ce8:	e006      	b.n	6cf8 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6cea:	7bfb      	ldrb	r3, [r7, #15]
    6cec:	3301      	adds	r3, #1
    6cee:	73fb      	strb	r3, [r7, #15]
    6cf0:	7bfb      	ldrb	r3, [r7, #15]
    6cf2:	2b01      	cmp	r3, #1
    6cf4:	d9e7      	bls.n	6cc6 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    6cf6:	2300      	movs	r3, #0
}
    6cf8:	4618      	mov	r0, r3
    6cfa:	3710      	adds	r7, #16
    6cfc:	46bd      	mov	sp, r7
    6cfe:	bd80      	pop	{r7, pc}
    6d00:	00006305 	.word	0x00006305
    6d04:	0000eed0 	.word	0x0000eed0

00006d08 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    6d08:	b580      	push	{r7, lr}
    6d0a:	b084      	sub	sp, #16
    6d0c:	af00      	add	r7, sp, #0
    6d0e:	6078      	str	r0, [r7, #4]
    6d10:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    6d12:	683b      	ldr	r3, [r7, #0]
    6d14:	4618      	mov	r0, r3
    6d16:	4b35      	ldr	r3, [pc, #212]	; (6dec <_spi_m_sync_init+0xe4>)
    6d18:	4798      	blx	r3
    6d1a:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    6d1c:	687b      	ldr	r3, [r7, #4]
    6d1e:	2b00      	cmp	r3, #0
    6d20:	d004      	beq.n	6d2c <_spi_m_sync_init+0x24>
    6d22:	683b      	ldr	r3, [r7, #0]
    6d24:	2b00      	cmp	r3, #0
    6d26:	d001      	beq.n	6d2c <_spi_m_sync_init+0x24>
    6d28:	2301      	movs	r3, #1
    6d2a:	e000      	b.n	6d2e <_spi_m_sync_init+0x26>
    6d2c:	2300      	movs	r3, #0
    6d2e:	f003 0301 	and.w	r3, r3, #1
    6d32:	b2db      	uxtb	r3, r3
    6d34:	f640 123f 	movw	r2, #2367	; 0x93f
    6d38:	492d      	ldr	r1, [pc, #180]	; (6df0 <_spi_m_sync_init+0xe8>)
    6d3a:	4618      	mov	r0, r3
    6d3c:	4b2d      	ldr	r3, [pc, #180]	; (6df4 <_spi_m_sync_init+0xec>)
    6d3e:	4798      	blx	r3

	if (regs == NULL) {
    6d40:	68fb      	ldr	r3, [r7, #12]
    6d42:	2b00      	cmp	r3, #0
    6d44:	d102      	bne.n	6d4c <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    6d46:	f06f 030c 	mvn.w	r3, #12
    6d4a:	e04a      	b.n	6de2 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6d4c:	2101      	movs	r1, #1
    6d4e:	6838      	ldr	r0, [r7, #0]
    6d50:	4b29      	ldr	r3, [pc, #164]	; (6df8 <_spi_m_sync_init+0xf0>)
    6d52:	4798      	blx	r3
    6d54:	4603      	mov	r3, r0
    6d56:	f083 0301 	eor.w	r3, r3, #1
    6d5a:	b2db      	uxtb	r3, r3
    6d5c:	2b00      	cmp	r3, #0
    6d5e:	d019      	beq.n	6d94 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6d60:	68fb      	ldr	r3, [r7, #12]
    6d62:	681b      	ldr	r3, [r3, #0]
    6d64:	f003 031c 	and.w	r3, r3, #28
    6d68:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6d6a:	2102      	movs	r1, #2
    6d6c:	6838      	ldr	r0, [r7, #0]
    6d6e:	4b23      	ldr	r3, [pc, #140]	; (6dfc <_spi_m_sync_init+0xf4>)
    6d70:	4798      	blx	r3
    6d72:	4603      	mov	r3, r0
    6d74:	2b00      	cmp	r3, #0
    6d76:	d006      	beq.n	6d86 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6d78:	6838      	ldr	r0, [r7, #0]
    6d7a:	4b21      	ldr	r3, [pc, #132]	; (6e00 <_spi_m_sync_init+0xf8>)
    6d7c:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    6d7e:	2102      	movs	r1, #2
    6d80:	6838      	ldr	r0, [r7, #0]
    6d82:	4b20      	ldr	r3, [pc, #128]	; (6e04 <_spi_m_sync_init+0xfc>)
    6d84:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    6d86:	68bb      	ldr	r3, [r7, #8]
    6d88:	f043 0301 	orr.w	r3, r3, #1
    6d8c:	4619      	mov	r1, r3
    6d8e:	6838      	ldr	r0, [r7, #0]
    6d90:	4b1d      	ldr	r3, [pc, #116]	; (6e08 <_spi_m_sync_init+0x100>)
    6d92:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    6d94:	2101      	movs	r1, #1
    6d96:	6838      	ldr	r0, [r7, #0]
    6d98:	4b1a      	ldr	r3, [pc, #104]	; (6e04 <_spi_m_sync_init+0xfc>)
    6d9a:	4798      	blx	r3

	dev->prvt = hw;
    6d9c:	687b      	ldr	r3, [r7, #4]
    6d9e:	683a      	ldr	r2, [r7, #0]
    6da0:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    6da2:	68fb      	ldr	r3, [r7, #12]
    6da4:	681b      	ldr	r3, [r3, #0]
    6da6:	f003 031c 	and.w	r3, r3, #28
    6daa:	2b08      	cmp	r3, #8
    6dac:	d104      	bne.n	6db8 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    6dae:	68f9      	ldr	r1, [r7, #12]
    6db0:	6838      	ldr	r0, [r7, #0]
    6db2:	4b16      	ldr	r3, [pc, #88]	; (6e0c <_spi_m_sync_init+0x104>)
    6db4:	4798      	blx	r3
    6db6:	e003      	b.n	6dc0 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    6db8:	68f9      	ldr	r1, [r7, #12]
    6dba:	6838      	ldr	r0, [r7, #0]
    6dbc:	4b14      	ldr	r3, [pc, #80]	; (6e10 <_spi_m_sync_init+0x108>)
    6dbe:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6dc0:	68fb      	ldr	r3, [r7, #12]
    6dc2:	685b      	ldr	r3, [r3, #4]
    6dc4:	f003 0307 	and.w	r3, r3, #7
    6dc8:	2b00      	cmp	r3, #0
    6dca:	d101      	bne.n	6dd0 <_spi_m_sync_init+0xc8>
    6dcc:	2201      	movs	r2, #1
    6dce:	e000      	b.n	6dd2 <_spi_m_sync_init+0xca>
    6dd0:	2202      	movs	r2, #2
    6dd2:	687b      	ldr	r3, [r7, #4]
    6dd4:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    6dd6:	68fb      	ldr	r3, [r7, #12]
    6dd8:	89db      	ldrh	r3, [r3, #14]
    6dda:	b29a      	uxth	r2, r3
    6ddc:	687b      	ldr	r3, [r7, #4]
    6dde:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    6de0:	2300      	movs	r3, #0
}
    6de2:	4618      	mov	r0, r3
    6de4:	3710      	adds	r7, #16
    6de6:	46bd      	mov	sp, r7
    6de8:	bd80      	pop	{r7, pc}
    6dea:	bf00      	nop
    6dec:	00006cad 	.word	0x00006cad
    6df0:	0000ee94 	.word	0x0000ee94
    6df4:	000037fd 	.word	0x000037fd
    6df8:	00005d81 	.word	0x00005d81
    6dfc:	00005f8d 	.word	0x00005f8d
    6e00:	00005f65 	.word	0x00005f65
    6e04:	00005d5d 	.word	0x00005d5d
    6e08:	00005fbd 	.word	0x00005fbd
    6e0c:	00006c01 	.word	0x00006c01
    6e10:	00006b6d 	.word	0x00006b6d

00006e14 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    6e14:	b580      	push	{r7, lr}
    6e16:	b082      	sub	sp, #8
    6e18:	af00      	add	r7, sp, #0
    6e1a:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    6e1c:	bf00      	nop
    6e1e:	2103      	movs	r1, #3
    6e20:	6878      	ldr	r0, [r7, #4]
    6e22:	4b06      	ldr	r3, [pc, #24]	; (6e3c <_spi_wait_bus_idle+0x28>)
    6e24:	4798      	blx	r3
    6e26:	4603      	mov	r3, r0
    6e28:	2b00      	cmp	r3, #0
    6e2a:	d0f8      	beq.n	6e1e <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    6e2c:	2103      	movs	r1, #3
    6e2e:	6878      	ldr	r0, [r7, #4]
    6e30:	4b03      	ldr	r3, [pc, #12]	; (6e40 <_spi_wait_bus_idle+0x2c>)
    6e32:	4798      	blx	r3
}
    6e34:	bf00      	nop
    6e36:	3708      	adds	r7, #8
    6e38:	46bd      	mov	sp, r7
    6e3a:	bd80      	pop	{r7, pc}
    6e3c:	00005df7 	.word	0x00005df7
    6e40:	00005e39 	.word	0x00005e39

00006e44 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    6e44:	b580      	push	{r7, lr}
    6e46:	b086      	sub	sp, #24
    6e48:	af00      	add	r7, sp, #0
    6e4a:	60f8      	str	r0, [r7, #12]
    6e4c:	60b9      	str	r1, [r7, #8]
    6e4e:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    6e50:	68bb      	ldr	r3, [r7, #8]
    6e52:	f003 0304 	and.w	r3, r3, #4
    6e56:	2b00      	cmp	r3, #0
    6e58:	d101      	bne.n	6e5e <_spi_rx_check_and_receive+0x1a>
		return false;
    6e5a:	2300      	movs	r3, #0
    6e5c:	e022      	b.n	6ea4 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    6e5e:	68f8      	ldr	r0, [r7, #12]
    6e60:	4b12      	ldr	r3, [pc, #72]	; (6eac <_spi_rx_check_and_receive+0x68>)
    6e62:	4798      	blx	r3
    6e64:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    6e66:	687b      	ldr	r3, [r7, #4]
    6e68:	685b      	ldr	r3, [r3, #4]
    6e6a:	2b00      	cmp	r3, #0
    6e6c:	d014      	beq.n	6e98 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    6e6e:	687b      	ldr	r3, [r7, #4]
    6e70:	685b      	ldr	r3, [r3, #4]
    6e72:	1c59      	adds	r1, r3, #1
    6e74:	687a      	ldr	r2, [r7, #4]
    6e76:	6051      	str	r1, [r2, #4]
    6e78:	697a      	ldr	r2, [r7, #20]
    6e7a:	b2d2      	uxtb	r2, r2
    6e7c:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    6e7e:	687b      	ldr	r3, [r7, #4]
    6e80:	7c1b      	ldrb	r3, [r3, #16]
    6e82:	2b01      	cmp	r3, #1
    6e84:	d908      	bls.n	6e98 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    6e86:	687b      	ldr	r3, [r7, #4]
    6e88:	685b      	ldr	r3, [r3, #4]
    6e8a:	1c59      	adds	r1, r3, #1
    6e8c:	687a      	ldr	r2, [r7, #4]
    6e8e:	6051      	str	r1, [r2, #4]
    6e90:	697a      	ldr	r2, [r7, #20]
    6e92:	0a12      	lsrs	r2, r2, #8
    6e94:	b2d2      	uxtb	r2, r2
    6e96:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    6e98:	687b      	ldr	r3, [r7, #4]
    6e9a:	68db      	ldr	r3, [r3, #12]
    6e9c:	1c5a      	adds	r2, r3, #1
    6e9e:	687b      	ldr	r3, [r7, #4]
    6ea0:	60da      	str	r2, [r3, #12]

	return true;
    6ea2:	2301      	movs	r3, #1
}
    6ea4:	4618      	mov	r0, r3
    6ea6:	3718      	adds	r7, #24
    6ea8:	46bd      	mov	sp, r7
    6eaa:	bd80      	pop	{r7, pc}
    6eac:	00006235 	.word	0x00006235

00006eb0 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    6eb0:	b580      	push	{r7, lr}
    6eb2:	b086      	sub	sp, #24
    6eb4:	af00      	add	r7, sp, #0
    6eb6:	60f8      	str	r0, [r7, #12]
    6eb8:	60b9      	str	r1, [r7, #8]
    6eba:	607a      	str	r2, [r7, #4]
    6ebc:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    6ebe:	68bb      	ldr	r3, [r7, #8]
    6ec0:	f003 0301 	and.w	r3, r3, #1
    6ec4:	2b00      	cmp	r3, #0
    6ec6:	d028      	beq.n	6f1a <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    6ec8:	687b      	ldr	r3, [r7, #4]
    6eca:	681b      	ldr	r3, [r3, #0]
    6ecc:	2b00      	cmp	r3, #0
    6ece:	d018      	beq.n	6f02 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    6ed0:	687b      	ldr	r3, [r7, #4]
    6ed2:	681b      	ldr	r3, [r3, #0]
    6ed4:	1c59      	adds	r1, r3, #1
    6ed6:	687a      	ldr	r2, [r7, #4]
    6ed8:	6011      	str	r1, [r2, #0]
    6eda:	781b      	ldrb	r3, [r3, #0]
    6edc:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    6ede:	687b      	ldr	r3, [r7, #4]
    6ee0:	7c1b      	ldrb	r3, [r3, #16]
    6ee2:	2b01      	cmp	r3, #1
    6ee4:	d90f      	bls.n	6f06 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    6ee6:	687b      	ldr	r3, [r7, #4]
    6ee8:	681b      	ldr	r3, [r3, #0]
    6eea:	781b      	ldrb	r3, [r3, #0]
    6eec:	021b      	lsls	r3, r3, #8
    6eee:	461a      	mov	r2, r3
    6ef0:	697b      	ldr	r3, [r7, #20]
    6ef2:	4313      	orrs	r3, r2
    6ef4:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    6ef6:	687b      	ldr	r3, [r7, #4]
    6ef8:	681b      	ldr	r3, [r3, #0]
    6efa:	1c5a      	adds	r2, r3, #1
    6efc:	687b      	ldr	r3, [r7, #4]
    6efe:	601a      	str	r2, [r3, #0]
    6f00:	e001      	b.n	6f06 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    6f02:	887b      	ldrh	r3, [r7, #2]
    6f04:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    6f06:	687b      	ldr	r3, [r7, #4]
    6f08:	689b      	ldr	r3, [r3, #8]
    6f0a:	1c5a      	adds	r2, r3, #1
    6f0c:	687b      	ldr	r3, [r7, #4]
    6f0e:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    6f10:	6979      	ldr	r1, [r7, #20]
    6f12:	68f8      	ldr	r0, [r7, #12]
    6f14:	4b03      	ldr	r3, [pc, #12]	; (6f24 <_spi_tx_check_and_send+0x74>)
    6f16:	4798      	blx	r3
    6f18:	e000      	b.n	6f1c <_spi_tx_check_and_send+0x6c>
		return;
    6f1a:	bf00      	nop
}
    6f1c:	3718      	adds	r7, #24
    6f1e:	46bd      	mov	sp, r7
    6f20:	bd80      	pop	{r7, pc}
    6f22:	bf00      	nop
    6f24:	00006219 	.word	0x00006219

00006f28 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    6f28:	b580      	push	{r7, lr}
    6f2a:	b082      	sub	sp, #8
    6f2c:	af00      	add	r7, sp, #0
    6f2e:	6078      	str	r0, [r7, #4]
    6f30:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    6f32:	687b      	ldr	r3, [r7, #4]
    6f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6f38:	2b00      	cmp	r3, #0
    6f3a:	d00b      	beq.n	6f54 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    6f3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6f40:	6838      	ldr	r0, [r7, #0]
    6f42:	4b07      	ldr	r3, [pc, #28]	; (6f60 <_spi_err_check+0x38>)
    6f44:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    6f46:	2180      	movs	r1, #128	; 0x80
    6f48:	6838      	ldr	r0, [r7, #0]
    6f4a:	4b06      	ldr	r3, [pc, #24]	; (6f64 <_spi_err_check+0x3c>)
    6f4c:	4798      	blx	r3
		return ERR_OVERFLOW;
    6f4e:	f06f 0312 	mvn.w	r3, #18
    6f52:	e000      	b.n	6f56 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    6f54:	2300      	movs	r3, #0
}
    6f56:	4618      	mov	r0, r3
    6f58:	3708      	adds	r7, #8
    6f5a:	46bd      	mov	sp, r7
    6f5c:	bd80      	pop	{r7, pc}
    6f5e:	bf00      	nop
    6f60:	0000626d 	.word	0x0000626d
    6f64:	00005e39 	.word	0x00005e39

00006f68 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    6f68:	b590      	push	{r4, r7, lr}
    6f6a:	b08b      	sub	sp, #44	; 0x2c
    6f6c:	af00      	add	r7, sp, #0
    6f6e:	6078      	str	r0, [r7, #4]
    6f70:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    6f72:	687b      	ldr	r3, [r7, #4]
    6f74:	681b      	ldr	r3, [r3, #0]
    6f76:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    6f78:	2300      	movs	r3, #0
    6f7a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    6f7c:	683b      	ldr	r3, [r7, #0]
    6f7e:	681b      	ldr	r3, [r3, #0]
    6f80:	60bb      	str	r3, [r7, #8]
    6f82:	683b      	ldr	r3, [r7, #0]
    6f84:	685b      	ldr	r3, [r3, #4]
    6f86:	60fb      	str	r3, [r7, #12]
    6f88:	2300      	movs	r3, #0
    6f8a:	613b      	str	r3, [r7, #16]
    6f8c:	2300      	movs	r3, #0
    6f8e:	617b      	str	r3, [r7, #20]
    6f90:	687b      	ldr	r3, [r7, #4]
    6f92:	791b      	ldrb	r3, [r3, #4]
    6f94:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    6f96:	687b      	ldr	r3, [r7, #4]
    6f98:	2b00      	cmp	r3, #0
    6f9a:	d004      	beq.n	6fa6 <_spi_m_sync_trans+0x3e>
    6f9c:	6a3b      	ldr	r3, [r7, #32]
    6f9e:	2b00      	cmp	r3, #0
    6fa0:	d001      	beq.n	6fa6 <_spi_m_sync_trans+0x3e>
    6fa2:	2301      	movs	r3, #1
    6fa4:	e000      	b.n	6fa8 <_spi_m_sync_trans+0x40>
    6fa6:	2300      	movs	r3, #0
    6fa8:	f003 0301 	and.w	r3, r3, #1
    6fac:	b2db      	uxtb	r3, r3
    6fae:	f640 22a3 	movw	r2, #2723	; 0xaa3
    6fb2:	492b      	ldr	r1, [pc, #172]	; (7060 <_spi_m_sync_trans+0xf8>)
    6fb4:	4618      	mov	r0, r3
    6fb6:	4b2b      	ldr	r3, [pc, #172]	; (7064 <_spi_m_sync_trans+0xfc>)
    6fb8:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    6fba:	2107      	movs	r1, #7
    6fbc:	6a38      	ldr	r0, [r7, #32]
    6fbe:	4b2a      	ldr	r3, [pc, #168]	; (7068 <_spi_m_sync_trans+0x100>)
    6fc0:	4798      	blx	r3
    6fc2:	4603      	mov	r3, r0
    6fc4:	2b00      	cmp	r3, #0
    6fc6:	d002      	beq.n	6fce <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    6fc8:	f06f 0303 	mvn.w	r3, #3
    6fcc:	e043      	b.n	7056 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    6fce:	6a38      	ldr	r0, [r7, #32]
    6fd0:	4b26      	ldr	r3, [pc, #152]	; (706c <_spi_m_sync_trans+0x104>)
    6fd2:	4798      	blx	r3
    6fd4:	4603      	mov	r3, r0
    6fd6:	f083 0301 	eor.w	r3, r3, #1
    6fda:	b2db      	uxtb	r3, r3
    6fdc:	2b00      	cmp	r3, #0
    6fde:	d002      	beq.n	6fe6 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    6fe0:	f06f 0313 	mvn.w	r3, #19
    6fe4:	e037      	b.n	7056 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    6fe6:	6a38      	ldr	r0, [r7, #32]
    6fe8:	4b21      	ldr	r3, [pc, #132]	; (7070 <_spi_m_sync_trans+0x108>)
    6fea:	4798      	blx	r3
    6fec:	4603      	mov	r3, r0
    6fee:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    6ff0:	f107 0308 	add.w	r3, r7, #8
    6ff4:	461a      	mov	r2, r3
    6ff6:	69f9      	ldr	r1, [r7, #28]
    6ff8:	6a38      	ldr	r0, [r7, #32]
    6ffa:	4b1e      	ldr	r3, [pc, #120]	; (7074 <_spi_m_sync_trans+0x10c>)
    6ffc:	4798      	blx	r3
    6ffe:	4603      	mov	r3, r0
    7000:	f083 0301 	eor.w	r3, r3, #1
    7004:	b2db      	uxtb	r3, r3
    7006:	2b00      	cmp	r3, #0
    7008:	d00b      	beq.n	7022 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    700a:	697a      	ldr	r2, [r7, #20]
    700c:	693b      	ldr	r3, [r7, #16]
    700e:	429a      	cmp	r2, r3
    7010:	d307      	bcc.n	7022 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    7012:	687b      	ldr	r3, [r7, #4]
    7014:	88db      	ldrh	r3, [r3, #6]
    7016:	f107 0208 	add.w	r2, r7, #8
    701a:	69f9      	ldr	r1, [r7, #28]
    701c:	6a38      	ldr	r0, [r7, #32]
    701e:	4c16      	ldr	r4, [pc, #88]	; (7078 <_spi_m_sync_trans+0x110>)
    7020:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    7022:	6a39      	ldr	r1, [r7, #32]
    7024:	69f8      	ldr	r0, [r7, #28]
    7026:	4b15      	ldr	r3, [pc, #84]	; (707c <_spi_m_sync_trans+0x114>)
    7028:	4798      	blx	r3
    702a:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    702e:	2b00      	cmp	r3, #0
    7030:	db0c      	blt.n	704c <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    7032:	693a      	ldr	r2, [r7, #16]
    7034:	683b      	ldr	r3, [r7, #0]
    7036:	689b      	ldr	r3, [r3, #8]
    7038:	429a      	cmp	r2, r3
    703a:	d3d4      	bcc.n	6fe6 <_spi_m_sync_trans+0x7e>
    703c:	697a      	ldr	r2, [r7, #20]
    703e:	683b      	ldr	r3, [r7, #0]
    7040:	689b      	ldr	r3, [r3, #8]
    7042:	429a      	cmp	r2, r3
    7044:	d3cf      	bcc.n	6fe6 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    7046:	693b      	ldr	r3, [r7, #16]
    7048:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    704a:	e000      	b.n	704e <_spi_m_sync_trans+0xe6>
			break;
    704c:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    704e:	6a38      	ldr	r0, [r7, #32]
    7050:	4b0b      	ldr	r3, [pc, #44]	; (7080 <_spi_m_sync_trans+0x118>)
    7052:	4798      	blx	r3

	return rc;
    7054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    7056:	4618      	mov	r0, r3
    7058:	372c      	adds	r7, #44	; 0x2c
    705a:	46bd      	mov	sp, r7
    705c:	bd90      	pop	{r4, r7, pc}
    705e:	bf00      	nop
    7060:	0000ee94 	.word	0x0000ee94
    7064:	000037fd 	.word	0x000037fd
    7068:	00005d81 	.word	0x00005d81
    706c:	00005f2d 	.word	0x00005f2d
    7070:	00005e1f 	.word	0x00005e1f
    7074:	00006e45 	.word	0x00006e45
    7078:	00006eb1 	.word	0x00006eb1
    707c:	00006f29 	.word	0x00006f29
    7080:	00006e15 	.word	0x00006e15

00007084 <__NVIC_EnableIRQ>:
{
    7084:	b480      	push	{r7}
    7086:	b083      	sub	sp, #12
    7088:	af00      	add	r7, sp, #0
    708a:	4603      	mov	r3, r0
    708c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    708e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7092:	2b00      	cmp	r3, #0
    7094:	db0b      	blt.n	70ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7096:	4909      	ldr	r1, [pc, #36]	; (70bc <__NVIC_EnableIRQ+0x38>)
    7098:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    709c:	095b      	lsrs	r3, r3, #5
    709e:	88fa      	ldrh	r2, [r7, #6]
    70a0:	f002 021f 	and.w	r2, r2, #31
    70a4:	2001      	movs	r0, #1
    70a6:	fa00 f202 	lsl.w	r2, r0, r2
    70aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    70ae:	bf00      	nop
    70b0:	370c      	adds	r7, #12
    70b2:	46bd      	mov	sp, r7
    70b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    70b8:	4770      	bx	lr
    70ba:	bf00      	nop
    70bc:	e000e100 	.word	0xe000e100

000070c0 <__NVIC_DisableIRQ>:
{
    70c0:	b480      	push	{r7}
    70c2:	b083      	sub	sp, #12
    70c4:	af00      	add	r7, sp, #0
    70c6:	4603      	mov	r3, r0
    70c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    70ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    70ce:	2b00      	cmp	r3, #0
    70d0:	db10      	blt.n	70f4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    70d2:	490b      	ldr	r1, [pc, #44]	; (7100 <__NVIC_DisableIRQ+0x40>)
    70d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    70d8:	095b      	lsrs	r3, r3, #5
    70da:	88fa      	ldrh	r2, [r7, #6]
    70dc:	f002 021f 	and.w	r2, r2, #31
    70e0:	2001      	movs	r0, #1
    70e2:	fa00 f202 	lsl.w	r2, r0, r2
    70e6:	3320      	adds	r3, #32
    70e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    70ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    70f0:	f3bf 8f6f 	isb	sy
}
    70f4:	bf00      	nop
    70f6:	370c      	adds	r7, #12
    70f8:	46bd      	mov	sp, r7
    70fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    70fe:	4770      	bx	lr
    7100:	e000e100 	.word	0xe000e100

00007104 <__NVIC_ClearPendingIRQ>:
{
    7104:	b480      	push	{r7}
    7106:	b083      	sub	sp, #12
    7108:	af00      	add	r7, sp, #0
    710a:	4603      	mov	r3, r0
    710c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    710e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7112:	2b00      	cmp	r3, #0
    7114:	db0c      	blt.n	7130 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7116:	4909      	ldr	r1, [pc, #36]	; (713c <__NVIC_ClearPendingIRQ+0x38>)
    7118:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    711c:	095b      	lsrs	r3, r3, #5
    711e:	88fa      	ldrh	r2, [r7, #6]
    7120:	f002 021f 	and.w	r2, r2, #31
    7124:	2001      	movs	r0, #1
    7126:	fa00 f202 	lsl.w	r2, r0, r2
    712a:	3360      	adds	r3, #96	; 0x60
    712c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7130:	bf00      	nop
    7132:	370c      	adds	r7, #12
    7134:	46bd      	mov	sp, r7
    7136:	f85d 7b04 	ldr.w	r7, [sp], #4
    713a:	4770      	bx	lr
    713c:	e000e100 	.word	0xe000e100

00007140 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7140:	b480      	push	{r7}
    7142:	b083      	sub	sp, #12
    7144:	af00      	add	r7, sp, #0
    7146:	6078      	str	r0, [r7, #4]
    7148:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    714a:	bf00      	nop
    714c:	687b      	ldr	r3, [r7, #4]
    714e:	689a      	ldr	r2, [r3, #8]
    7150:	683b      	ldr	r3, [r7, #0]
    7152:	4013      	ands	r3, r2
    7154:	2b00      	cmp	r3, #0
    7156:	d1f9      	bne.n	714c <hri_tcc_wait_for_sync+0xc>
	};
}
    7158:	bf00      	nop
    715a:	370c      	adds	r7, #12
    715c:	46bd      	mov	sp, r7
    715e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7162:	4770      	bx	lr

00007164 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7164:	b480      	push	{r7}
    7166:	b083      	sub	sp, #12
    7168:	af00      	add	r7, sp, #0
    716a:	6078      	str	r0, [r7, #4]
    716c:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    716e:	687b      	ldr	r3, [r7, #4]
    7170:	689a      	ldr	r2, [r3, #8]
    7172:	683b      	ldr	r3, [r7, #0]
    7174:	4013      	ands	r3, r2
    7176:	2b00      	cmp	r3, #0
    7178:	bf14      	ite	ne
    717a:	2301      	movne	r3, #1
    717c:	2300      	moveq	r3, #0
    717e:	b2db      	uxtb	r3, r3
}
    7180:	4618      	mov	r0, r3
    7182:	370c      	adds	r7, #12
    7184:	46bd      	mov	sp, r7
    7186:	f85d 7b04 	ldr.w	r7, [sp], #4
    718a:	4770      	bx	lr

0000718c <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    718c:	b480      	push	{r7}
    718e:	b083      	sub	sp, #12
    7190:	af00      	add	r7, sp, #0
    7192:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    7194:	687b      	ldr	r3, [r7, #4]
    7196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7198:	f003 0301 	and.w	r3, r3, #1
    719c:	2b00      	cmp	r3, #0
    719e:	bf14      	ite	ne
    71a0:	2301      	movne	r3, #1
    71a2:	2300      	moveq	r3, #0
    71a4:	b2db      	uxtb	r3, r3
}
    71a6:	4618      	mov	r0, r3
    71a8:	370c      	adds	r7, #12
    71aa:	46bd      	mov	sp, r7
    71ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    71b0:	4770      	bx	lr

000071b2 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    71b2:	b480      	push	{r7}
    71b4:	b083      	sub	sp, #12
    71b6:	af00      	add	r7, sp, #0
    71b8:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    71ba:	687b      	ldr	r3, [r7, #4]
    71bc:	2201      	movs	r2, #1
    71be:	62da      	str	r2, [r3, #44]	; 0x2c
}
    71c0:	bf00      	nop
    71c2:	370c      	adds	r7, #12
    71c4:	46bd      	mov	sp, r7
    71c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    71ca:	4770      	bx	lr

000071cc <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    71cc:	b480      	push	{r7}
    71ce:	b083      	sub	sp, #12
    71d0:	af00      	add	r7, sp, #0
    71d2:	6078      	str	r0, [r7, #4]
    71d4:	460b      	mov	r3, r1
    71d6:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    71d8:	687b      	ldr	r3, [r7, #4]
    71da:	78fa      	ldrb	r2, [r7, #3]
    71dc:	715a      	strb	r2, [r3, #5]
}
    71de:	bf00      	nop
    71e0:	370c      	adds	r7, #12
    71e2:	46bd      	mov	sp, r7
    71e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    71e8:	4770      	bx	lr

000071ea <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    71ea:	b480      	push	{r7}
    71ec:	b083      	sub	sp, #12
    71ee:	af00      	add	r7, sp, #0
    71f0:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    71f2:	687b      	ldr	r3, [r7, #4]
    71f4:	2201      	movs	r2, #1
    71f6:	629a      	str	r2, [r3, #40]	; 0x28
}
    71f8:	bf00      	nop
    71fa:	370c      	adds	r7, #12
    71fc:	46bd      	mov	sp, r7
    71fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7202:	4770      	bx	lr

00007204 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7204:	b580      	push	{r7, lr}
    7206:	b082      	sub	sp, #8
    7208:	af00      	add	r7, sp, #0
    720a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    720c:	687b      	ldr	r3, [r7, #4]
    720e:	681b      	ldr	r3, [r3, #0]
    7210:	f043 0201 	orr.w	r2, r3, #1
    7214:	687b      	ldr	r3, [r7, #4]
    7216:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7218:	2101      	movs	r1, #1
    721a:	6878      	ldr	r0, [r7, #4]
    721c:	4b02      	ldr	r3, [pc, #8]	; (7228 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    721e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7220:	bf00      	nop
    7222:	3708      	adds	r7, #8
    7224:	46bd      	mov	sp, r7
    7226:	bd80      	pop	{r7, pc}
    7228:	00007141 	.word	0x00007141

0000722c <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    722c:	b580      	push	{r7, lr}
    722e:	b082      	sub	sp, #8
    7230:	af00      	add	r7, sp, #0
    7232:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7234:	687b      	ldr	r3, [r7, #4]
    7236:	681b      	ldr	r3, [r3, #0]
    7238:	f043 0202 	orr.w	r2, r3, #2
    723c:	687b      	ldr	r3, [r7, #4]
    723e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7240:	2103      	movs	r1, #3
    7242:	6878      	ldr	r0, [r7, #4]
    7244:	4b02      	ldr	r3, [pc, #8]	; (7250 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    7246:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7248:	bf00      	nop
    724a:	3708      	adds	r7, #8
    724c:	46bd      	mov	sp, r7
    724e:	bd80      	pop	{r7, pc}
    7250:	00007141 	.word	0x00007141

00007254 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7254:	b580      	push	{r7, lr}
    7256:	b084      	sub	sp, #16
    7258:	af00      	add	r7, sp, #0
    725a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    725c:	2103      	movs	r1, #3
    725e:	6878      	ldr	r0, [r7, #4]
    7260:	4b09      	ldr	r3, [pc, #36]	; (7288 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    7262:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7264:	687b      	ldr	r3, [r7, #4]
    7266:	681b      	ldr	r3, [r3, #0]
    7268:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    726a:	68fb      	ldr	r3, [r7, #12]
    726c:	085b      	lsrs	r3, r3, #1
    726e:	f003 0301 	and.w	r3, r3, #1
    7272:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7274:	68fb      	ldr	r3, [r7, #12]
    7276:	2b00      	cmp	r3, #0
    7278:	bf14      	ite	ne
    727a:	2301      	movne	r3, #1
    727c:	2300      	moveq	r3, #0
    727e:	b2db      	uxtb	r3, r3
}
    7280:	4618      	mov	r0, r3
    7282:	3710      	adds	r7, #16
    7284:	46bd      	mov	sp, r7
    7286:	bd80      	pop	{r7, pc}
    7288:	00007141 	.word	0x00007141

0000728c <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    728c:	b580      	push	{r7, lr}
    728e:	b082      	sub	sp, #8
    7290:	af00      	add	r7, sp, #0
    7292:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7294:	687b      	ldr	r3, [r7, #4]
    7296:	681b      	ldr	r3, [r3, #0]
    7298:	f023 0202 	bic.w	r2, r3, #2
    729c:	687b      	ldr	r3, [r7, #4]
    729e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    72a0:	2103      	movs	r1, #3
    72a2:	6878      	ldr	r0, [r7, #4]
    72a4:	4b02      	ldr	r3, [pc, #8]	; (72b0 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    72a6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    72a8:	bf00      	nop
    72aa:	3708      	adds	r7, #8
    72ac:	46bd      	mov	sp, r7
    72ae:	bd80      	pop	{r7, pc}
    72b0:	00007141 	.word	0x00007141

000072b4 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    72b4:	b580      	push	{r7, lr}
    72b6:	b084      	sub	sp, #16
    72b8:	af00      	add	r7, sp, #0
    72ba:	6078      	str	r0, [r7, #4]
    72bc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    72be:	2103      	movs	r1, #3
    72c0:	6878      	ldr	r0, [r7, #4]
    72c2:	4b07      	ldr	r3, [pc, #28]	; (72e0 <hri_tcc_get_CTRLA_reg+0x2c>)
    72c4:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    72c6:	687b      	ldr	r3, [r7, #4]
    72c8:	681b      	ldr	r3, [r3, #0]
    72ca:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    72cc:	68fa      	ldr	r2, [r7, #12]
    72ce:	683b      	ldr	r3, [r7, #0]
    72d0:	4013      	ands	r3, r2
    72d2:	60fb      	str	r3, [r7, #12]
	return tmp;
    72d4:	68fb      	ldr	r3, [r7, #12]
}
    72d6:	4618      	mov	r0, r3
    72d8:	3710      	adds	r7, #16
    72da:	46bd      	mov	sp, r7
    72dc:	bd80      	pop	{r7, pc}
    72de:	bf00      	nop
    72e0:	00007141 	.word	0x00007141

000072e4 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    72e4:	b580      	push	{r7, lr}
    72e6:	b082      	sub	sp, #8
    72e8:	af00      	add	r7, sp, #0
    72ea:	6078      	str	r0, [r7, #4]
    72ec:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    72ee:	687b      	ldr	r3, [r7, #4]
    72f0:	683a      	ldr	r2, [r7, #0]
    72f2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    72f4:	2103      	movs	r1, #3
    72f6:	6878      	ldr	r0, [r7, #4]
    72f8:	4b02      	ldr	r3, [pc, #8]	; (7304 <hri_tcc_write_CTRLA_reg+0x20>)
    72fa:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    72fc:	bf00      	nop
    72fe:	3708      	adds	r7, #8
    7300:	46bd      	mov	sp, r7
    7302:	bd80      	pop	{r7, pc}
    7304:	00007141 	.word	0x00007141

00007308 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    7308:	b480      	push	{r7}
    730a:	b083      	sub	sp, #12
    730c:	af00      	add	r7, sp, #0
    730e:	6078      	str	r0, [r7, #4]
    7310:	460b      	mov	r3, r1
    7312:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    7314:	687b      	ldr	r3, [r7, #4]
    7316:	78fa      	ldrb	r2, [r7, #3]
    7318:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    731a:	bf00      	nop
    731c:	370c      	adds	r7, #12
    731e:	46bd      	mov	sp, r7
    7320:	f85d 7b04 	ldr.w	r7, [sp], #4
    7324:	4770      	bx	lr

00007326 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    7326:	b480      	push	{r7}
    7328:	b083      	sub	sp, #12
    732a:	af00      	add	r7, sp, #0
    732c:	6078      	str	r0, [r7, #4]
    732e:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    7330:	687b      	ldr	r3, [r7, #4]
    7332:	683a      	ldr	r2, [r7, #0]
    7334:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7336:	bf00      	nop
    7338:	370c      	adds	r7, #12
    733a:	46bd      	mov	sp, r7
    733c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7340:	4770      	bx	lr
	...

00007344 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    7344:	b580      	push	{r7, lr}
    7346:	b082      	sub	sp, #8
    7348:	af00      	add	r7, sp, #0
    734a:	6078      	str	r0, [r7, #4]
    734c:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    734e:	687b      	ldr	r3, [r7, #4]
    7350:	683a      	ldr	r2, [r7, #0]
    7352:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7354:	2180      	movs	r1, #128	; 0x80
    7356:	6878      	ldr	r0, [r7, #4]
    7358:	4b02      	ldr	r3, [pc, #8]	; (7364 <hri_tcc_write_PER_reg+0x20>)
    735a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    735c:	bf00      	nop
    735e:	3708      	adds	r7, #8
    7360:	46bd      	mov	sp, r7
    7362:	bd80      	pop	{r7, pc}
    7364:	00007141 	.word	0x00007141

00007368 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    7368:	b580      	push	{r7, lr}
    736a:	b082      	sub	sp, #8
    736c:	af00      	add	r7, sp, #0
    736e:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7370:	2180      	movs	r1, #128	; 0x80
    7372:	6878      	ldr	r0, [r7, #4]
    7374:	4b03      	ldr	r3, [pc, #12]	; (7384 <hri_tcc_read_PER_reg+0x1c>)
    7376:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    7378:	687b      	ldr	r3, [r7, #4]
    737a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    737c:	4618      	mov	r0, r3
    737e:	3708      	adds	r7, #8
    7380:	46bd      	mov	sp, r7
    7382:	bd80      	pop	{r7, pc}
    7384:	00007141 	.word	0x00007141

00007388 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7388:	b480      	push	{r7}
    738a:	b083      	sub	sp, #12
    738c:	af00      	add	r7, sp, #0
    738e:	6078      	str	r0, [r7, #4]
    7390:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    7392:	687b      	ldr	r3, [r7, #4]
    7394:	4a0c      	ldr	r2, [pc, #48]	; (73c8 <_tcc_init_irq_param+0x40>)
    7396:	4293      	cmp	r3, r2
    7398:	d102      	bne.n	73a0 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    739a:	4a0c      	ldr	r2, [pc, #48]	; (73cc <_tcc_init_irq_param+0x44>)
    739c:	683b      	ldr	r3, [r7, #0]
    739e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    73a0:	687b      	ldr	r3, [r7, #4]
    73a2:	4a0b      	ldr	r2, [pc, #44]	; (73d0 <_tcc_init_irq_param+0x48>)
    73a4:	4293      	cmp	r3, r2
    73a6:	d102      	bne.n	73ae <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    73a8:	4a0a      	ldr	r2, [pc, #40]	; (73d4 <_tcc_init_irq_param+0x4c>)
    73aa:	683b      	ldr	r3, [r7, #0]
    73ac:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    73ae:	687b      	ldr	r3, [r7, #4]
    73b0:	4a09      	ldr	r2, [pc, #36]	; (73d8 <_tcc_init_irq_param+0x50>)
    73b2:	4293      	cmp	r3, r2
    73b4:	d102      	bne.n	73bc <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    73b6:	4a09      	ldr	r2, [pc, #36]	; (73dc <_tcc_init_irq_param+0x54>)
    73b8:	683b      	ldr	r3, [r7, #0]
    73ba:	6013      	str	r3, [r2, #0]
	}
}
    73bc:	bf00      	nop
    73be:	370c      	adds	r7, #12
    73c0:	46bd      	mov	sp, r7
    73c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    73c6:	4770      	bx	lr
    73c8:	41016000 	.word	0x41016000
    73cc:	20000ac4 	.word	0x20000ac4
    73d0:	41018000 	.word	0x41018000
    73d4:	20000ac8 	.word	0x20000ac8
    73d8:	42000c00 	.word	0x42000c00
    73dc:	20000acc 	.word	0x20000acc

000073e0 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    73e0:	b580      	push	{r7, lr}
    73e2:	b084      	sub	sp, #16
    73e4:	af00      	add	r7, sp, #0
    73e6:	6078      	str	r0, [r7, #4]
    73e8:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    73ea:	6838      	ldr	r0, [r7, #0]
    73ec:	4b33      	ldr	r3, [pc, #204]	; (74bc <_tcc_timer_init+0xdc>)
    73ee:	4798      	blx	r3
    73f0:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    73f2:	68fb      	ldr	r3, [r7, #12]
    73f4:	2b00      	cmp	r3, #0
    73f6:	d102      	bne.n	73fe <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    73f8:	f06f 0309 	mvn.w	r3, #9
    73fc:	e05a      	b.n	74b4 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    73fe:	687b      	ldr	r3, [r7, #4]
    7400:	683a      	ldr	r2, [r7, #0]
    7402:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    7404:	2101      	movs	r1, #1
    7406:	6838      	ldr	r0, [r7, #0]
    7408:	4b2d      	ldr	r3, [pc, #180]	; (74c0 <_tcc_timer_init+0xe0>)
    740a:	4798      	blx	r3
    740c:	4603      	mov	r3, r0
    740e:	f083 0301 	eor.w	r3, r3, #1
    7412:	b2db      	uxtb	r3, r3
    7414:	2b00      	cmp	r3, #0
    7416:	d011      	beq.n	743c <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    7418:	2102      	movs	r1, #2
    741a:	6838      	ldr	r0, [r7, #0]
    741c:	4b29      	ldr	r3, [pc, #164]	; (74c4 <_tcc_timer_init+0xe4>)
    741e:	4798      	blx	r3
    7420:	4603      	mov	r3, r0
    7422:	2b00      	cmp	r3, #0
    7424:	d006      	beq.n	7434 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7426:	6838      	ldr	r0, [r7, #0]
    7428:	4b27      	ldr	r3, [pc, #156]	; (74c8 <_tcc_timer_init+0xe8>)
    742a:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    742c:	2102      	movs	r1, #2
    742e:	6838      	ldr	r0, [r7, #0]
    7430:	4b26      	ldr	r3, [pc, #152]	; (74cc <_tcc_timer_init+0xec>)
    7432:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    7434:	2101      	movs	r1, #1
    7436:	6838      	ldr	r0, [r7, #0]
    7438:	4b25      	ldr	r3, [pc, #148]	; (74d0 <_tcc_timer_init+0xf0>)
    743a:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    743c:	2101      	movs	r1, #1
    743e:	6838      	ldr	r0, [r7, #0]
    7440:	4b22      	ldr	r3, [pc, #136]	; (74cc <_tcc_timer_init+0xec>)
    7442:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    7444:	68fb      	ldr	r3, [r7, #12]
    7446:	689b      	ldr	r3, [r3, #8]
    7448:	4619      	mov	r1, r3
    744a:	6838      	ldr	r0, [r7, #0]
    744c:	4b20      	ldr	r3, [pc, #128]	; (74d0 <_tcc_timer_init+0xf0>)
    744e:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    7450:	68fb      	ldr	r3, [r7, #12]
    7452:	7b1b      	ldrb	r3, [r3, #12]
    7454:	4619      	mov	r1, r3
    7456:	6838      	ldr	r0, [r7, #0]
    7458:	4b1e      	ldr	r3, [pc, #120]	; (74d4 <_tcc_timer_init+0xf4>)
    745a:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    745c:	68fb      	ldr	r3, [r7, #12]
    745e:	7b5b      	ldrb	r3, [r3, #13]
    7460:	4619      	mov	r1, r3
    7462:	6838      	ldr	r0, [r7, #0]
    7464:	4b1c      	ldr	r3, [pc, #112]	; (74d8 <_tcc_timer_init+0xf8>)
    7466:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    7468:	68fb      	ldr	r3, [r7, #12]
    746a:	691b      	ldr	r3, [r3, #16]
    746c:	4619      	mov	r1, r3
    746e:	6838      	ldr	r0, [r7, #0]
    7470:	4b1a      	ldr	r3, [pc, #104]	; (74dc <_tcc_timer_init+0xfc>)
    7472:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    7474:	68fb      	ldr	r3, [r7, #12]
    7476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7478:	4619      	mov	r1, r3
    747a:	6838      	ldr	r0, [r7, #0]
    747c:	4b18      	ldr	r3, [pc, #96]	; (74e0 <_tcc_timer_init+0x100>)
    747e:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    7480:	6838      	ldr	r0, [r7, #0]
    7482:	4b18      	ldr	r3, [pc, #96]	; (74e4 <_tcc_timer_init+0x104>)
    7484:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    7486:	6879      	ldr	r1, [r7, #4]
    7488:	6838      	ldr	r0, [r7, #0]
    748a:	4b17      	ldr	r3, [pc, #92]	; (74e8 <_tcc_timer_init+0x108>)
    748c:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    748e:	68fb      	ldr	r3, [r7, #12]
    7490:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7494:	4618      	mov	r0, r3
    7496:	4b15      	ldr	r3, [pc, #84]	; (74ec <_tcc_timer_init+0x10c>)
    7498:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    749a:	68fb      	ldr	r3, [r7, #12]
    749c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    74a0:	4618      	mov	r0, r3
    74a2:	4b13      	ldr	r3, [pc, #76]	; (74f0 <_tcc_timer_init+0x110>)
    74a4:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    74a6:	68fb      	ldr	r3, [r7, #12]
    74a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    74ac:	4618      	mov	r0, r3
    74ae:	4b11      	ldr	r3, [pc, #68]	; (74f4 <_tcc_timer_init+0x114>)
    74b0:	4798      	blx	r3

	return ERR_NONE;
    74b2:	2300      	movs	r3, #0
}
    74b4:	4618      	mov	r0, r3
    74b6:	3710      	adds	r7, #16
    74b8:	46bd      	mov	sp, r7
    74ba:	bd80      	pop	{r7, pc}
    74bc:	000076c5 	.word	0x000076c5
    74c0:	00007165 	.word	0x00007165
    74c4:	000072b5 	.word	0x000072b5
    74c8:	0000728d 	.word	0x0000728d
    74cc:	00007141 	.word	0x00007141
    74d0:	000072e5 	.word	0x000072e5
    74d4:	000071cd 	.word	0x000071cd
    74d8:	00007309 	.word	0x00007309
    74dc:	00007327 	.word	0x00007327
    74e0:	00007345 	.word	0x00007345
    74e4:	000071eb 	.word	0x000071eb
    74e8:	00007389 	.word	0x00007389
    74ec:	000070c1 	.word	0x000070c1
    74f0:	00007105 	.word	0x00007105
    74f4:	00007085 	.word	0x00007085

000074f8 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    74f8:	b580      	push	{r7, lr}
    74fa:	b084      	sub	sp, #16
    74fc:	af00      	add	r7, sp, #0
    74fe:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7500:	687b      	ldr	r3, [r7, #4]
    7502:	68db      	ldr	r3, [r3, #12]
    7504:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7506:	68f8      	ldr	r0, [r7, #12]
    7508:	4b0a      	ldr	r3, [pc, #40]	; (7534 <_tcc_timer_deinit+0x3c>)
    750a:	4798      	blx	r3
    750c:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    750e:	68bb      	ldr	r3, [r7, #8]
    7510:	2b00      	cmp	r3, #0
    7512:	d00b      	beq.n	752c <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7514:	68bb      	ldr	r3, [r7, #8]
    7516:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    751a:	4618      	mov	r0, r3
    751c:	4b06      	ldr	r3, [pc, #24]	; (7538 <_tcc_timer_deinit+0x40>)
    751e:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7520:	68f8      	ldr	r0, [r7, #12]
    7522:	4b06      	ldr	r3, [pc, #24]	; (753c <_tcc_timer_deinit+0x44>)
    7524:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    7526:	68f8      	ldr	r0, [r7, #12]
    7528:	4b05      	ldr	r3, [pc, #20]	; (7540 <_tcc_timer_deinit+0x48>)
    752a:	4798      	blx	r3
	}
}
    752c:	bf00      	nop
    752e:	3710      	adds	r7, #16
    7530:	46bd      	mov	sp, r7
    7532:	bd80      	pop	{r7, pc}
    7534:	000076c5 	.word	0x000076c5
    7538:	000070c1 	.word	0x000070c1
    753c:	0000728d 	.word	0x0000728d
    7540:	00007205 	.word	0x00007205

00007544 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    7544:	b580      	push	{r7, lr}
    7546:	b082      	sub	sp, #8
    7548:	af00      	add	r7, sp, #0
    754a:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    754c:	687b      	ldr	r3, [r7, #4]
    754e:	68db      	ldr	r3, [r3, #12]
    7550:	4618      	mov	r0, r3
    7552:	4b03      	ldr	r3, [pc, #12]	; (7560 <_tcc_timer_start+0x1c>)
    7554:	4798      	blx	r3
}
    7556:	bf00      	nop
    7558:	3708      	adds	r7, #8
    755a:	46bd      	mov	sp, r7
    755c:	bd80      	pop	{r7, pc}
    755e:	bf00      	nop
    7560:	0000722d 	.word	0x0000722d

00007564 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    7564:	b580      	push	{r7, lr}
    7566:	b082      	sub	sp, #8
    7568:	af00      	add	r7, sp, #0
    756a:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    756c:	687b      	ldr	r3, [r7, #4]
    756e:	68db      	ldr	r3, [r3, #12]
    7570:	4618      	mov	r0, r3
    7572:	4b03      	ldr	r3, [pc, #12]	; (7580 <_tcc_timer_stop+0x1c>)
    7574:	4798      	blx	r3
}
    7576:	bf00      	nop
    7578:	3708      	adds	r7, #8
    757a:	46bd      	mov	sp, r7
    757c:	bd80      	pop	{r7, pc}
    757e:	bf00      	nop
    7580:	0000728d 	.word	0x0000728d

00007584 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7584:	b580      	push	{r7, lr}
    7586:	b082      	sub	sp, #8
    7588:	af00      	add	r7, sp, #0
    758a:	6078      	str	r0, [r7, #4]
    758c:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    758e:	687b      	ldr	r3, [r7, #4]
    7590:	68db      	ldr	r3, [r3, #12]
    7592:	6839      	ldr	r1, [r7, #0]
    7594:	4618      	mov	r0, r3
    7596:	4b03      	ldr	r3, [pc, #12]	; (75a4 <_tcc_timer_set_period+0x20>)
    7598:	4798      	blx	r3
}
    759a:	bf00      	nop
    759c:	3708      	adds	r7, #8
    759e:	46bd      	mov	sp, r7
    75a0:	bd80      	pop	{r7, pc}
    75a2:	bf00      	nop
    75a4:	00007345 	.word	0x00007345

000075a8 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    75a8:	b580      	push	{r7, lr}
    75aa:	b082      	sub	sp, #8
    75ac:	af00      	add	r7, sp, #0
    75ae:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    75b0:	687b      	ldr	r3, [r7, #4]
    75b2:	68db      	ldr	r3, [r3, #12]
    75b4:	4618      	mov	r0, r3
    75b6:	4b03      	ldr	r3, [pc, #12]	; (75c4 <_tcc_timer_get_period+0x1c>)
    75b8:	4798      	blx	r3
    75ba:	4603      	mov	r3, r0
}
    75bc:	4618      	mov	r0, r3
    75be:	3708      	adds	r7, #8
    75c0:	46bd      	mov	sp, r7
    75c2:	bd80      	pop	{r7, pc}
    75c4:	00007369 	.word	0x00007369

000075c8 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    75c8:	b580      	push	{r7, lr}
    75ca:	b082      	sub	sp, #8
    75cc:	af00      	add	r7, sp, #0
    75ce:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    75d0:	687b      	ldr	r3, [r7, #4]
    75d2:	68db      	ldr	r3, [r3, #12]
    75d4:	4618      	mov	r0, r3
    75d6:	4b03      	ldr	r3, [pc, #12]	; (75e4 <_tcc_timer_is_started+0x1c>)
    75d8:	4798      	blx	r3
    75da:	4603      	mov	r3, r0
}
    75dc:	4618      	mov	r0, r3
    75de:	3708      	adds	r7, #8
    75e0:	46bd      	mov	sp, r7
    75e2:	bd80      	pop	{r7, pc}
    75e4:	00007255 	.word	0x00007255

000075e8 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    75e8:	b480      	push	{r7}
    75ea:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    75ec:	4b02      	ldr	r3, [pc, #8]	; (75f8 <_tcc_get_timer+0x10>)
}
    75ee:	4618      	mov	r0, r3
    75f0:	46bd      	mov	sp, r7
    75f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    75f6:	4770      	bx	lr
    75f8:	200000f0 	.word	0x200000f0

000075fc <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    75fc:	b580      	push	{r7, lr}
    75fe:	b084      	sub	sp, #16
    7600:	af00      	add	r7, sp, #0
    7602:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7604:	687b      	ldr	r3, [r7, #4]
    7606:	68db      	ldr	r3, [r3, #12]
    7608:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    760a:	68f8      	ldr	r0, [r7, #12]
    760c:	4b08      	ldr	r3, [pc, #32]	; (7630 <_tcc_timer_set_irq+0x34>)
    760e:	4798      	blx	r3
    7610:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7612:	68bb      	ldr	r3, [r7, #8]
    7614:	2b00      	cmp	r3, #0
    7616:	d006      	beq.n	7626 <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    7618:	68bb      	ldr	r3, [r7, #8]
    761a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    761e:	b2db      	uxtb	r3, r3
    7620:	4618      	mov	r0, r3
    7622:	4b04      	ldr	r3, [pc, #16]	; (7634 <_tcc_timer_set_irq+0x38>)
    7624:	4798      	blx	r3
	}
}
    7626:	bf00      	nop
    7628:	3710      	adds	r7, #16
    762a:	46bd      	mov	sp, r7
    762c:	bd80      	pop	{r7, pc}
    762e:	bf00      	nop
    7630:	000076c5 	.word	0x000076c5
    7634:	00004045 	.word	0x00004045

00007638 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    7638:	b580      	push	{r7, lr}
    763a:	b084      	sub	sp, #16
    763c:	af00      	add	r7, sp, #0
    763e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7640:	687b      	ldr	r3, [r7, #4]
    7642:	68db      	ldr	r3, [r3, #12]
    7644:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    7646:	68f8      	ldr	r0, [r7, #12]
    7648:	4b07      	ldr	r3, [pc, #28]	; (7668 <tcc_interrupt_handler+0x30>)
    764a:	4798      	blx	r3
    764c:	4603      	mov	r3, r0
    764e:	2b00      	cmp	r3, #0
    7650:	d006      	beq.n	7660 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    7652:	68f8      	ldr	r0, [r7, #12]
    7654:	4b05      	ldr	r3, [pc, #20]	; (766c <tcc_interrupt_handler+0x34>)
    7656:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7658:	687b      	ldr	r3, [r7, #4]
    765a:	681b      	ldr	r3, [r3, #0]
    765c:	6878      	ldr	r0, [r7, #4]
    765e:	4798      	blx	r3
	}
}
    7660:	bf00      	nop
    7662:	3710      	adds	r7, #16
    7664:	46bd      	mov	sp, r7
    7666:	bd80      	pop	{r7, pc}
    7668:	0000718d 	.word	0x0000718d
    766c:	000071b3 	.word	0x000071b3

00007670 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    7670:	b580      	push	{r7, lr}
    7672:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    7674:	4b03      	ldr	r3, [pc, #12]	; (7684 <TCC0_0_Handler+0x14>)
    7676:	681b      	ldr	r3, [r3, #0]
    7678:	4618      	mov	r0, r3
    767a:	4b03      	ldr	r3, [pc, #12]	; (7688 <TCC0_0_Handler+0x18>)
    767c:	4798      	blx	r3
}
    767e:	bf00      	nop
    7680:	bd80      	pop	{r7, pc}
    7682:	bf00      	nop
    7684:	20000ac4 	.word	0x20000ac4
    7688:	00007639 	.word	0x00007639

0000768c <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    768c:	b580      	push	{r7, lr}
    768e:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    7690:	4b03      	ldr	r3, [pc, #12]	; (76a0 <TCC1_0_Handler+0x14>)
    7692:	681b      	ldr	r3, [r3, #0]
    7694:	4618      	mov	r0, r3
    7696:	4b03      	ldr	r3, [pc, #12]	; (76a4 <TCC1_0_Handler+0x18>)
    7698:	4798      	blx	r3
}
    769a:	bf00      	nop
    769c:	bd80      	pop	{r7, pc}
    769e:	bf00      	nop
    76a0:	20000ac8 	.word	0x20000ac8
    76a4:	00007639 	.word	0x00007639

000076a8 <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    76a8:	b580      	push	{r7, lr}
    76aa:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    76ac:	4b03      	ldr	r3, [pc, #12]	; (76bc <TCC2_0_Handler+0x14>)
    76ae:	681b      	ldr	r3, [r3, #0]
    76b0:	4618      	mov	r0, r3
    76b2:	4b03      	ldr	r3, [pc, #12]	; (76c0 <TCC2_0_Handler+0x18>)
    76b4:	4798      	blx	r3
}
    76b6:	bf00      	nop
    76b8:	bd80      	pop	{r7, pc}
    76ba:	bf00      	nop
    76bc:	20000acc 	.word	0x20000acc
    76c0:	00007639 	.word	0x00007639

000076c4 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    76c4:	b480      	push	{r7}
    76c6:	b085      	sub	sp, #20
    76c8:	af00      	add	r7, sp, #0
    76ca:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    76cc:	2300      	movs	r3, #0
    76ce:	73fb      	strb	r3, [r7, #15]
    76d0:	e015      	b.n	76fe <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    76d2:	7bfa      	ldrb	r2, [r7, #15]
    76d4:	490f      	ldr	r1, [pc, #60]	; (7714 <_get_tcc_cfg+0x50>)
    76d6:	4613      	mov	r3, r2
    76d8:	005b      	lsls	r3, r3, #1
    76da:	4413      	add	r3, r2
    76dc:	011b      	lsls	r3, r3, #4
    76de:	440b      	add	r3, r1
    76e0:	681a      	ldr	r2, [r3, #0]
    76e2:	687b      	ldr	r3, [r7, #4]
    76e4:	429a      	cmp	r2, r3
    76e6:	d107      	bne.n	76f8 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    76e8:	7bfa      	ldrb	r2, [r7, #15]
    76ea:	4613      	mov	r3, r2
    76ec:	005b      	lsls	r3, r3, #1
    76ee:	4413      	add	r3, r2
    76f0:	011b      	lsls	r3, r3, #4
    76f2:	4a08      	ldr	r2, [pc, #32]	; (7714 <_get_tcc_cfg+0x50>)
    76f4:	4413      	add	r3, r2
    76f6:	e006      	b.n	7706 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    76f8:	7bfb      	ldrb	r3, [r7, #15]
    76fa:	3301      	adds	r3, #1
    76fc:	73fb      	strb	r3, [r7, #15]
    76fe:	7bfb      	ldrb	r3, [r7, #15]
    7700:	2b02      	cmp	r3, #2
    7702:	d9e6      	bls.n	76d2 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    7704:	2300      	movs	r3, #0
}
    7706:	4618      	mov	r0, r3
    7708:	3714      	adds	r7, #20
    770a:	46bd      	mov	sp, r7
    770c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7710:	4770      	bx	lr
    7712:	bf00      	nop
    7714:	20000060 	.word	0x20000060

00007718 <__NVIC_EnableIRQ>:
{
    7718:	b480      	push	{r7}
    771a:	b083      	sub	sp, #12
    771c:	af00      	add	r7, sp, #0
    771e:	4603      	mov	r3, r0
    7720:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7726:	2b00      	cmp	r3, #0
    7728:	db0b      	blt.n	7742 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    772a:	4909      	ldr	r1, [pc, #36]	; (7750 <__NVIC_EnableIRQ+0x38>)
    772c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7730:	095b      	lsrs	r3, r3, #5
    7732:	88fa      	ldrh	r2, [r7, #6]
    7734:	f002 021f 	and.w	r2, r2, #31
    7738:	2001      	movs	r0, #1
    773a:	fa00 f202 	lsl.w	r2, r0, r2
    773e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7742:	bf00      	nop
    7744:	370c      	adds	r7, #12
    7746:	46bd      	mov	sp, r7
    7748:	f85d 7b04 	ldr.w	r7, [sp], #4
    774c:	4770      	bx	lr
    774e:	bf00      	nop
    7750:	e000e100 	.word	0xe000e100

00007754 <__NVIC_DisableIRQ>:
{
    7754:	b480      	push	{r7}
    7756:	b083      	sub	sp, #12
    7758:	af00      	add	r7, sp, #0
    775a:	4603      	mov	r3, r0
    775c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    775e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7762:	2b00      	cmp	r3, #0
    7764:	db10      	blt.n	7788 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7766:	490b      	ldr	r1, [pc, #44]	; (7794 <__NVIC_DisableIRQ+0x40>)
    7768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    776c:	095b      	lsrs	r3, r3, #5
    776e:	88fa      	ldrh	r2, [r7, #6]
    7770:	f002 021f 	and.w	r2, r2, #31
    7774:	2001      	movs	r0, #1
    7776:	fa00 f202 	lsl.w	r2, r0, r2
    777a:	3320      	adds	r3, #32
    777c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7780:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7784:	f3bf 8f6f 	isb	sy
}
    7788:	bf00      	nop
    778a:	370c      	adds	r7, #12
    778c:	46bd      	mov	sp, r7
    778e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7792:	4770      	bx	lr
    7794:	e000e100 	.word	0xe000e100

00007798 <__NVIC_ClearPendingIRQ>:
{
    7798:	b480      	push	{r7}
    779a:	b083      	sub	sp, #12
    779c:	af00      	add	r7, sp, #0
    779e:	4603      	mov	r3, r0
    77a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    77a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    77a6:	2b00      	cmp	r3, #0
    77a8:	db0c      	blt.n	77c4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    77aa:	4909      	ldr	r1, [pc, #36]	; (77d0 <__NVIC_ClearPendingIRQ+0x38>)
    77ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    77b0:	095b      	lsrs	r3, r3, #5
    77b2:	88fa      	ldrh	r2, [r7, #6]
    77b4:	f002 021f 	and.w	r2, r2, #31
    77b8:	2001      	movs	r0, #1
    77ba:	fa00 f202 	lsl.w	r2, r0, r2
    77be:	3360      	adds	r3, #96	; 0x60
    77c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    77c4:	bf00      	nop
    77c6:	370c      	adds	r7, #12
    77c8:	46bd      	mov	sp, r7
    77ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    77ce:	4770      	bx	lr
    77d0:	e000e100 	.word	0xe000e100

000077d4 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    77d4:	b480      	push	{r7}
    77d6:	b083      	sub	sp, #12
    77d8:	af00      	add	r7, sp, #0
    77da:	6078      	str	r0, [r7, #4]
    77dc:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    77de:	bf00      	nop
    77e0:	687b      	ldr	r3, [r7, #4]
    77e2:	691a      	ldr	r2, [r3, #16]
    77e4:	683b      	ldr	r3, [r7, #0]
    77e6:	4013      	ands	r3, r2
    77e8:	2b00      	cmp	r3, #0
    77ea:	d1f9      	bne.n	77e0 <hri_tc_wait_for_sync+0xc>
	};
}
    77ec:	bf00      	nop
    77ee:	370c      	adds	r7, #12
    77f0:	46bd      	mov	sp, r7
    77f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    77f6:	4770      	bx	lr

000077f8 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    77f8:	b480      	push	{r7}
    77fa:	b083      	sub	sp, #12
    77fc:	af00      	add	r7, sp, #0
    77fe:	6078      	str	r0, [r7, #4]
    7800:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    7802:	687b      	ldr	r3, [r7, #4]
    7804:	691a      	ldr	r2, [r3, #16]
    7806:	683b      	ldr	r3, [r7, #0]
    7808:	4013      	ands	r3, r2
    780a:	2b00      	cmp	r3, #0
    780c:	bf14      	ite	ne
    780e:	2301      	movne	r3, #1
    7810:	2300      	moveq	r3, #0
    7812:	b2db      	uxtb	r3, r3
}
    7814:	4618      	mov	r0, r3
    7816:	370c      	adds	r7, #12
    7818:	46bd      	mov	sp, r7
    781a:	f85d 7b04 	ldr.w	r7, [sp], #4
    781e:	4770      	bx	lr

00007820 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    7820:	b480      	push	{r7}
    7822:	b083      	sub	sp, #12
    7824:	af00      	add	r7, sp, #0
    7826:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7828:	687b      	ldr	r3, [r7, #4]
    782a:	7a9b      	ldrb	r3, [r3, #10]
    782c:	b2db      	uxtb	r3, r3
    782e:	f003 0301 	and.w	r3, r3, #1
    7832:	2b00      	cmp	r3, #0
    7834:	bf14      	ite	ne
    7836:	2301      	movne	r3, #1
    7838:	2300      	moveq	r3, #0
    783a:	b2db      	uxtb	r3, r3
}
    783c:	4618      	mov	r0, r3
    783e:	370c      	adds	r7, #12
    7840:	46bd      	mov	sp, r7
    7842:	f85d 7b04 	ldr.w	r7, [sp], #4
    7846:	4770      	bx	lr

00007848 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    7848:	b480      	push	{r7}
    784a:	b083      	sub	sp, #12
    784c:	af00      	add	r7, sp, #0
    784e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7850:	687b      	ldr	r3, [r7, #4]
    7852:	2201      	movs	r2, #1
    7854:	729a      	strb	r2, [r3, #10]
}
    7856:	bf00      	nop
    7858:	370c      	adds	r7, #12
    785a:	46bd      	mov	sp, r7
    785c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7860:	4770      	bx	lr

00007862 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    7862:	b480      	push	{r7}
    7864:	b083      	sub	sp, #12
    7866:	af00      	add	r7, sp, #0
    7868:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    786a:	687b      	ldr	r3, [r7, #4]
    786c:	2202      	movs	r2, #2
    786e:	729a      	strb	r2, [r3, #10]
}
    7870:	bf00      	nop
    7872:	370c      	adds	r7, #12
    7874:	46bd      	mov	sp, r7
    7876:	f85d 7b04 	ldr.w	r7, [sp], #4
    787a:	4770      	bx	lr

0000787c <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    787c:	b480      	push	{r7}
    787e:	b083      	sub	sp, #12
    7880:	af00      	add	r7, sp, #0
    7882:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7884:	687b      	ldr	r3, [r7, #4]
    7886:	2201      	movs	r2, #1
    7888:	725a      	strb	r2, [r3, #9]
}
    788a:	bf00      	nop
    788c:	370c      	adds	r7, #12
    788e:	46bd      	mov	sp, r7
    7890:	f85d 7b04 	ldr.w	r7, [sp], #4
    7894:	4770      	bx	lr

00007896 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    7896:	b480      	push	{r7}
    7898:	b083      	sub	sp, #12
    789a:	af00      	add	r7, sp, #0
    789c:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    789e:	687b      	ldr	r3, [r7, #4]
    78a0:	7a5b      	ldrb	r3, [r3, #9]
    78a2:	b2db      	uxtb	r3, r3
    78a4:	085b      	lsrs	r3, r3, #1
    78a6:	f003 0301 	and.w	r3, r3, #1
    78aa:	2b00      	cmp	r3, #0
    78ac:	bf14      	ite	ne
    78ae:	2301      	movne	r3, #1
    78b0:	2300      	moveq	r3, #0
    78b2:	b2db      	uxtb	r3, r3
}
    78b4:	4618      	mov	r0, r3
    78b6:	370c      	adds	r7, #12
    78b8:	46bd      	mov	sp, r7
    78ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    78be:	4770      	bx	lr

000078c0 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    78c0:	b580      	push	{r7, lr}
    78c2:	b082      	sub	sp, #8
    78c4:	af00      	add	r7, sp, #0
    78c6:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    78c8:	687b      	ldr	r3, [r7, #4]
    78ca:	681b      	ldr	r3, [r3, #0]
    78cc:	f043 0201 	orr.w	r2, r3, #1
    78d0:	687b      	ldr	r3, [r7, #4]
    78d2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    78d4:	2101      	movs	r1, #1
    78d6:	6878      	ldr	r0, [r7, #4]
    78d8:	4b02      	ldr	r3, [pc, #8]	; (78e4 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    78da:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    78dc:	bf00      	nop
    78de:	3708      	adds	r7, #8
    78e0:	46bd      	mov	sp, r7
    78e2:	bd80      	pop	{r7, pc}
    78e4:	000077d5 	.word	0x000077d5

000078e8 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    78e8:	b580      	push	{r7, lr}
    78ea:	b082      	sub	sp, #8
    78ec:	af00      	add	r7, sp, #0
    78ee:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    78f0:	687b      	ldr	r3, [r7, #4]
    78f2:	681b      	ldr	r3, [r3, #0]
    78f4:	f043 0202 	orr.w	r2, r3, #2
    78f8:	687b      	ldr	r3, [r7, #4]
    78fa:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    78fc:	2103      	movs	r1, #3
    78fe:	6878      	ldr	r0, [r7, #4]
    7900:	4b02      	ldr	r3, [pc, #8]	; (790c <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    7902:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7904:	bf00      	nop
    7906:	3708      	adds	r7, #8
    7908:	46bd      	mov	sp, r7
    790a:	bd80      	pop	{r7, pc}
    790c:	000077d5 	.word	0x000077d5

00007910 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7910:	b580      	push	{r7, lr}
    7912:	b084      	sub	sp, #16
    7914:	af00      	add	r7, sp, #0
    7916:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7918:	2103      	movs	r1, #3
    791a:	6878      	ldr	r0, [r7, #4]
    791c:	4b09      	ldr	r3, [pc, #36]	; (7944 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    791e:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7920:	687b      	ldr	r3, [r7, #4]
    7922:	681b      	ldr	r3, [r3, #0]
    7924:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    7926:	68fb      	ldr	r3, [r7, #12]
    7928:	085b      	lsrs	r3, r3, #1
    792a:	f003 0301 	and.w	r3, r3, #1
    792e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7930:	68fb      	ldr	r3, [r7, #12]
    7932:	2b00      	cmp	r3, #0
    7934:	bf14      	ite	ne
    7936:	2301      	movne	r3, #1
    7938:	2300      	moveq	r3, #0
    793a:	b2db      	uxtb	r3, r3
}
    793c:	4618      	mov	r0, r3
    793e:	3710      	adds	r7, #16
    7940:	46bd      	mov	sp, r7
    7942:	bd80      	pop	{r7, pc}
    7944:	000077d5 	.word	0x000077d5

00007948 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7948:	b580      	push	{r7, lr}
    794a:	b082      	sub	sp, #8
    794c:	af00      	add	r7, sp, #0
    794e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7950:	687b      	ldr	r3, [r7, #4]
    7952:	681b      	ldr	r3, [r3, #0]
    7954:	f023 0202 	bic.w	r2, r3, #2
    7958:	687b      	ldr	r3, [r7, #4]
    795a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    795c:	2103      	movs	r1, #3
    795e:	6878      	ldr	r0, [r7, #4]
    7960:	4b02      	ldr	r3, [pc, #8]	; (796c <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    7962:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7964:	bf00      	nop
    7966:	3708      	adds	r7, #8
    7968:	46bd      	mov	sp, r7
    796a:	bd80      	pop	{r7, pc}
    796c:	000077d5 	.word	0x000077d5

00007970 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    7970:	b480      	push	{r7}
    7972:	b085      	sub	sp, #20
    7974:	af00      	add	r7, sp, #0
    7976:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7978:	687b      	ldr	r3, [r7, #4]
    797a:	681b      	ldr	r3, [r3, #0]
    797c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    797e:	68fb      	ldr	r3, [r7, #12]
    7980:	089b      	lsrs	r3, r3, #2
    7982:	f003 0303 	and.w	r3, r3, #3
    7986:	60fb      	str	r3, [r7, #12]
	return tmp;
    7988:	68fb      	ldr	r3, [r7, #12]
}
    798a:	4618      	mov	r0, r3
    798c:	3714      	adds	r7, #20
    798e:	46bd      	mov	sp, r7
    7990:	f85d 7b04 	ldr.w	r7, [sp], #4
    7994:	4770      	bx	lr
	...

00007998 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    7998:	b580      	push	{r7, lr}
    799a:	b084      	sub	sp, #16
    799c:	af00      	add	r7, sp, #0
    799e:	6078      	str	r0, [r7, #4]
    79a0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    79a2:	2103      	movs	r1, #3
    79a4:	6878      	ldr	r0, [r7, #4]
    79a6:	4b07      	ldr	r3, [pc, #28]	; (79c4 <hri_tc_get_CTRLA_reg+0x2c>)
    79a8:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    79aa:	687b      	ldr	r3, [r7, #4]
    79ac:	681b      	ldr	r3, [r3, #0]
    79ae:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    79b0:	68fa      	ldr	r2, [r7, #12]
    79b2:	683b      	ldr	r3, [r7, #0]
    79b4:	4013      	ands	r3, r2
    79b6:	60fb      	str	r3, [r7, #12]
	return tmp;
    79b8:	68fb      	ldr	r3, [r7, #12]
}
    79ba:	4618      	mov	r0, r3
    79bc:	3710      	adds	r7, #16
    79be:	46bd      	mov	sp, r7
    79c0:	bd80      	pop	{r7, pc}
    79c2:	bf00      	nop
    79c4:	000077d5 	.word	0x000077d5

000079c8 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    79c8:	b580      	push	{r7, lr}
    79ca:	b082      	sub	sp, #8
    79cc:	af00      	add	r7, sp, #0
    79ce:	6078      	str	r0, [r7, #4]
    79d0:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    79d2:	687b      	ldr	r3, [r7, #4]
    79d4:	683a      	ldr	r2, [r7, #0]
    79d6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    79d8:	2103      	movs	r1, #3
    79da:	6878      	ldr	r0, [r7, #4]
    79dc:	4b02      	ldr	r3, [pc, #8]	; (79e8 <hri_tc_write_CTRLA_reg+0x20>)
    79de:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    79e0:	bf00      	nop
    79e2:	3708      	adds	r7, #8
    79e4:	46bd      	mov	sp, r7
    79e6:	bd80      	pop	{r7, pc}
    79e8:	000077d5 	.word	0x000077d5

000079ec <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    79ec:	b480      	push	{r7}
    79ee:	b083      	sub	sp, #12
    79f0:	af00      	add	r7, sp, #0
    79f2:	6078      	str	r0, [r7, #4]
    79f4:	460b      	mov	r3, r1
    79f6:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    79f8:	687b      	ldr	r3, [r7, #4]
    79fa:	887a      	ldrh	r2, [r7, #2]
    79fc:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    79fe:	bf00      	nop
    7a00:	370c      	adds	r7, #12
    7a02:	46bd      	mov	sp, r7
    7a04:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a08:	4770      	bx	lr

00007a0a <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    7a0a:	b480      	push	{r7}
    7a0c:	b083      	sub	sp, #12
    7a0e:	af00      	add	r7, sp, #0
    7a10:	6078      	str	r0, [r7, #4]
    7a12:	460b      	mov	r3, r1
    7a14:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    7a16:	687b      	ldr	r3, [r7, #4]
    7a18:	78fa      	ldrb	r2, [r7, #3]
    7a1a:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    7a1c:	bf00      	nop
    7a1e:	370c      	adds	r7, #12
    7a20:	46bd      	mov	sp, r7
    7a22:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a26:	4770      	bx	lr

00007a28 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    7a28:	b480      	push	{r7}
    7a2a:	b083      	sub	sp, #12
    7a2c:	af00      	add	r7, sp, #0
    7a2e:	6078      	str	r0, [r7, #4]
    7a30:	460b      	mov	r3, r1
    7a32:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7a34:	687b      	ldr	r3, [r7, #4]
    7a36:	78fa      	ldrb	r2, [r7, #3]
    7a38:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    7a3a:	bf00      	nop
    7a3c:	370c      	adds	r7, #12
    7a3e:	46bd      	mov	sp, r7
    7a40:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a44:	4770      	bx	lr
	...

00007a48 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    7a48:	b580      	push	{r7, lr}
    7a4a:	b082      	sub	sp, #8
    7a4c:	af00      	add	r7, sp, #0
    7a4e:	6078      	str	r0, [r7, #4]
    7a50:	460b      	mov	r3, r1
    7a52:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    7a54:	687b      	ldr	r3, [r7, #4]
    7a56:	78fa      	ldrb	r2, [r7, #3]
    7a58:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7a5a:	2120      	movs	r1, #32
    7a5c:	6878      	ldr	r0, [r7, #4]
    7a5e:	4b03      	ldr	r3, [pc, #12]	; (7a6c <hri_tccount8_write_PER_reg+0x24>)
    7a60:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7a62:	bf00      	nop
    7a64:	3708      	adds	r7, #8
    7a66:	46bd      	mov	sp, r7
    7a68:	bd80      	pop	{r7, pc}
    7a6a:	bf00      	nop
    7a6c:	000077d5 	.word	0x000077d5

00007a70 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    7a70:	b580      	push	{r7, lr}
    7a72:	b082      	sub	sp, #8
    7a74:	af00      	add	r7, sp, #0
    7a76:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7a78:	2120      	movs	r1, #32
    7a7a:	6878      	ldr	r0, [r7, #4]
    7a7c:	4b04      	ldr	r3, [pc, #16]	; (7a90 <hri_tccount8_read_PER_reg+0x20>)
    7a7e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    7a80:	687b      	ldr	r3, [r7, #4]
    7a82:	7edb      	ldrb	r3, [r3, #27]
    7a84:	b2db      	uxtb	r3, r3
}
    7a86:	4618      	mov	r0, r3
    7a88:	3708      	adds	r7, #8
    7a8a:	46bd      	mov	sp, r7
    7a8c:	bd80      	pop	{r7, pc}
    7a8e:	bf00      	nop
    7a90:	000077d5 	.word	0x000077d5

00007a94 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    7a94:	b580      	push	{r7, lr}
    7a96:	b082      	sub	sp, #8
    7a98:	af00      	add	r7, sp, #0
    7a9a:	6078      	str	r0, [r7, #4]
    7a9c:	460b      	mov	r3, r1
    7a9e:	70fb      	strb	r3, [r7, #3]
    7aa0:	4613      	mov	r3, r2
    7aa2:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7aa4:	78fb      	ldrb	r3, [r7, #3]
    7aa6:	687a      	ldr	r2, [r7, #4]
    7aa8:	4413      	add	r3, r2
    7aaa:	78ba      	ldrb	r2, [r7, #2]
    7aac:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7aae:	21c0      	movs	r1, #192	; 0xc0
    7ab0:	6878      	ldr	r0, [r7, #4]
    7ab2:	4b03      	ldr	r3, [pc, #12]	; (7ac0 <hri_tccount8_write_CC_reg+0x2c>)
    7ab4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7ab6:	bf00      	nop
    7ab8:	3708      	adds	r7, #8
    7aba:	46bd      	mov	sp, r7
    7abc:	bd80      	pop	{r7, pc}
    7abe:	bf00      	nop
    7ac0:	000077d5 	.word	0x000077d5

00007ac4 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    7ac4:	b580      	push	{r7, lr}
    7ac6:	b082      	sub	sp, #8
    7ac8:	af00      	add	r7, sp, #0
    7aca:	6078      	str	r0, [r7, #4]
    7acc:	460b      	mov	r3, r1
    7ace:	70fb      	strb	r3, [r7, #3]
    7ad0:	4613      	mov	r3, r2
    7ad2:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7ad4:	78fb      	ldrb	r3, [r7, #3]
    7ad6:	687a      	ldr	r2, [r7, #4]
    7ad8:	330c      	adds	r3, #12
    7ada:	005b      	lsls	r3, r3, #1
    7adc:	4413      	add	r3, r2
    7ade:	883a      	ldrh	r2, [r7, #0]
    7ae0:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7ae2:	21c0      	movs	r1, #192	; 0xc0
    7ae4:	6878      	ldr	r0, [r7, #4]
    7ae6:	4b03      	ldr	r3, [pc, #12]	; (7af4 <hri_tccount16_write_CC_reg+0x30>)
    7ae8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7aea:	bf00      	nop
    7aec:	3708      	adds	r7, #8
    7aee:	46bd      	mov	sp, r7
    7af0:	bd80      	pop	{r7, pc}
    7af2:	bf00      	nop
    7af4:	000077d5 	.word	0x000077d5

00007af8 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    7af8:	b580      	push	{r7, lr}
    7afa:	b082      	sub	sp, #8
    7afc:	af00      	add	r7, sp, #0
    7afe:	6078      	str	r0, [r7, #4]
    7b00:	460b      	mov	r3, r1
    7b02:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7b04:	21c0      	movs	r1, #192	; 0xc0
    7b06:	6878      	ldr	r0, [r7, #4]
    7b08:	4b06      	ldr	r3, [pc, #24]	; (7b24 <hri_tccount16_read_CC_reg+0x2c>)
    7b0a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    7b0c:	78fb      	ldrb	r3, [r7, #3]
    7b0e:	687a      	ldr	r2, [r7, #4]
    7b10:	330c      	adds	r3, #12
    7b12:	005b      	lsls	r3, r3, #1
    7b14:	4413      	add	r3, r2
    7b16:	889b      	ldrh	r3, [r3, #4]
    7b18:	b29b      	uxth	r3, r3
}
    7b1a:	4618      	mov	r0, r3
    7b1c:	3708      	adds	r7, #8
    7b1e:	46bd      	mov	sp, r7
    7b20:	bd80      	pop	{r7, pc}
    7b22:	bf00      	nop
    7b24:	000077d5 	.word	0x000077d5

00007b28 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    7b28:	b580      	push	{r7, lr}
    7b2a:	b084      	sub	sp, #16
    7b2c:	af00      	add	r7, sp, #0
    7b2e:	60f8      	str	r0, [r7, #12]
    7b30:	460b      	mov	r3, r1
    7b32:	607a      	str	r2, [r7, #4]
    7b34:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7b36:	7afb      	ldrb	r3, [r7, #11]
    7b38:	68fa      	ldr	r2, [r7, #12]
    7b3a:	3306      	adds	r3, #6
    7b3c:	009b      	lsls	r3, r3, #2
    7b3e:	4413      	add	r3, r2
    7b40:	687a      	ldr	r2, [r7, #4]
    7b42:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7b44:	21c0      	movs	r1, #192	; 0xc0
    7b46:	68f8      	ldr	r0, [r7, #12]
    7b48:	4b02      	ldr	r3, [pc, #8]	; (7b54 <hri_tccount32_write_CC_reg+0x2c>)
    7b4a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7b4c:	bf00      	nop
    7b4e:	3710      	adds	r7, #16
    7b50:	46bd      	mov	sp, r7
    7b52:	bd80      	pop	{r7, pc}
    7b54:	000077d5 	.word	0x000077d5

00007b58 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    7b58:	b580      	push	{r7, lr}
    7b5a:	b082      	sub	sp, #8
    7b5c:	af00      	add	r7, sp, #0
    7b5e:	6078      	str	r0, [r7, #4]
    7b60:	460b      	mov	r3, r1
    7b62:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7b64:	21c0      	movs	r1, #192	; 0xc0
    7b66:	6878      	ldr	r0, [r7, #4]
    7b68:	4b05      	ldr	r3, [pc, #20]	; (7b80 <hri_tccount32_read_CC_reg+0x28>)
    7b6a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    7b6c:	78fb      	ldrb	r3, [r7, #3]
    7b6e:	687a      	ldr	r2, [r7, #4]
    7b70:	3306      	adds	r3, #6
    7b72:	009b      	lsls	r3, r3, #2
    7b74:	4413      	add	r3, r2
    7b76:	685b      	ldr	r3, [r3, #4]
}
    7b78:	4618      	mov	r0, r3
    7b7a:	3708      	adds	r7, #8
    7b7c:	46bd      	mov	sp, r7
    7b7e:	bd80      	pop	{r7, pc}
    7b80:	000077d5 	.word	0x000077d5

00007b84 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    7b84:	b580      	push	{r7, lr}
    7b86:	b084      	sub	sp, #16
    7b88:	af00      	add	r7, sp, #0
    7b8a:	6078      	str	r0, [r7, #4]
    7b8c:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    7b8e:	6838      	ldr	r0, [r7, #0]
    7b90:	4b93      	ldr	r3, [pc, #588]	; (7de0 <_tc_timer_init+0x25c>)
    7b92:	4798      	blx	r3
    7b94:	4603      	mov	r3, r0
    7b96:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    7b98:	687b      	ldr	r3, [r7, #4]
    7b9a:	683a      	ldr	r2, [r7, #0]
    7b9c:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7b9e:	22a4      	movs	r2, #164	; 0xa4
    7ba0:	4990      	ldr	r1, [pc, #576]	; (7de4 <_tc_timer_init+0x260>)
    7ba2:	2001      	movs	r0, #1
    7ba4:	4b90      	ldr	r3, [pc, #576]	; (7de8 <_tc_timer_init+0x264>)
    7ba6:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7ba8:	2101      	movs	r1, #1
    7baa:	6838      	ldr	r0, [r7, #0]
    7bac:	4b8f      	ldr	r3, [pc, #572]	; (7dec <_tc_timer_init+0x268>)
    7bae:	4798      	blx	r3
    7bb0:	4603      	mov	r3, r0
    7bb2:	f083 0301 	eor.w	r3, r3, #1
    7bb6:	b2db      	uxtb	r3, r3
    7bb8:	2b00      	cmp	r3, #0
    7bba:	d011      	beq.n	7be0 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7bbc:	2102      	movs	r1, #2
    7bbe:	6838      	ldr	r0, [r7, #0]
    7bc0:	4b8b      	ldr	r3, [pc, #556]	; (7df0 <_tc_timer_init+0x26c>)
    7bc2:	4798      	blx	r3
    7bc4:	4603      	mov	r3, r0
    7bc6:	2b00      	cmp	r3, #0
    7bc8:	d006      	beq.n	7bd8 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7bca:	6838      	ldr	r0, [r7, #0]
    7bcc:	4b89      	ldr	r3, [pc, #548]	; (7df4 <_tc_timer_init+0x270>)
    7bce:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7bd0:	2102      	movs	r1, #2
    7bd2:	6838      	ldr	r0, [r7, #0]
    7bd4:	4b88      	ldr	r3, [pc, #544]	; (7df8 <_tc_timer_init+0x274>)
    7bd6:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7bd8:	2101      	movs	r1, #1
    7bda:	6838      	ldr	r0, [r7, #0]
    7bdc:	4b87      	ldr	r3, [pc, #540]	; (7dfc <_tc_timer_init+0x278>)
    7bde:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7be0:	2101      	movs	r1, #1
    7be2:	6838      	ldr	r0, [r7, #0]
    7be4:	4b84      	ldr	r3, [pc, #528]	; (7df8 <_tc_timer_init+0x274>)
    7be6:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7be8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7bec:	4984      	ldr	r1, [pc, #528]	; (7e00 <_tc_timer_init+0x27c>)
    7bee:	4613      	mov	r3, r2
    7bf0:	009b      	lsls	r3, r3, #2
    7bf2:	4413      	add	r3, r2
    7bf4:	009b      	lsls	r3, r3, #2
    7bf6:	440b      	add	r3, r1
    7bf8:	3304      	adds	r3, #4
    7bfa:	681b      	ldr	r3, [r3, #0]
    7bfc:	4619      	mov	r1, r3
    7bfe:	6838      	ldr	r0, [r7, #0]
    7c00:	4b7e      	ldr	r3, [pc, #504]	; (7dfc <_tc_timer_init+0x278>)
    7c02:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7c04:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c08:	497d      	ldr	r1, [pc, #500]	; (7e00 <_tc_timer_init+0x27c>)
    7c0a:	4613      	mov	r3, r2
    7c0c:	009b      	lsls	r3, r3, #2
    7c0e:	4413      	add	r3, r2
    7c10:	009b      	lsls	r3, r3, #2
    7c12:	440b      	add	r3, r1
    7c14:	330a      	adds	r3, #10
    7c16:	781b      	ldrb	r3, [r3, #0]
    7c18:	4619      	mov	r1, r3
    7c1a:	6838      	ldr	r0, [r7, #0]
    7c1c:	4b79      	ldr	r3, [pc, #484]	; (7e04 <_tc_timer_init+0x280>)
    7c1e:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7c20:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c24:	4976      	ldr	r1, [pc, #472]	; (7e00 <_tc_timer_init+0x27c>)
    7c26:	4613      	mov	r3, r2
    7c28:	009b      	lsls	r3, r3, #2
    7c2a:	4413      	add	r3, r2
    7c2c:	009b      	lsls	r3, r3, #2
    7c2e:	440b      	add	r3, r1
    7c30:	3308      	adds	r3, #8
    7c32:	881b      	ldrh	r3, [r3, #0]
    7c34:	4619      	mov	r1, r3
    7c36:	6838      	ldr	r0, [r7, #0]
    7c38:	4b73      	ldr	r3, [pc, #460]	; (7e08 <_tc_timer_init+0x284>)
    7c3a:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7c3c:	2101      	movs	r1, #1
    7c3e:	6838      	ldr	r0, [r7, #0]
    7c40:	4b72      	ldr	r3, [pc, #456]	; (7e0c <_tc_timer_init+0x288>)
    7c42:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7c44:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c48:	496d      	ldr	r1, [pc, #436]	; (7e00 <_tc_timer_init+0x27c>)
    7c4a:	4613      	mov	r3, r2
    7c4c:	009b      	lsls	r3, r3, #2
    7c4e:	4413      	add	r3, r2
    7c50:	009b      	lsls	r3, r3, #2
    7c52:	440b      	add	r3, r1
    7c54:	3304      	adds	r3, #4
    7c56:	681b      	ldr	r3, [r3, #0]
    7c58:	f003 030c 	and.w	r3, r3, #12
    7c5c:	2b08      	cmp	r3, #8
    7c5e:	d11e      	bne.n	7c9e <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7c60:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c64:	4966      	ldr	r1, [pc, #408]	; (7e00 <_tc_timer_init+0x27c>)
    7c66:	4613      	mov	r3, r2
    7c68:	009b      	lsls	r3, r3, #2
    7c6a:	4413      	add	r3, r2
    7c6c:	009b      	lsls	r3, r3, #2
    7c6e:	440b      	add	r3, r1
    7c70:	330c      	adds	r3, #12
    7c72:	681b      	ldr	r3, [r3, #0]
    7c74:	461a      	mov	r2, r3
    7c76:	2100      	movs	r1, #0
    7c78:	6838      	ldr	r0, [r7, #0]
    7c7a:	4b65      	ldr	r3, [pc, #404]	; (7e10 <_tc_timer_init+0x28c>)
    7c7c:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7c7e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c82:	495f      	ldr	r1, [pc, #380]	; (7e00 <_tc_timer_init+0x27c>)
    7c84:	4613      	mov	r3, r2
    7c86:	009b      	lsls	r3, r3, #2
    7c88:	4413      	add	r3, r2
    7c8a:	009b      	lsls	r3, r3, #2
    7c8c:	440b      	add	r3, r1
    7c8e:	3310      	adds	r3, #16
    7c90:	681b      	ldr	r3, [r3, #0]
    7c92:	461a      	mov	r2, r3
    7c94:	2101      	movs	r1, #1
    7c96:	6838      	ldr	r0, [r7, #0]
    7c98:	4b5d      	ldr	r3, [pc, #372]	; (7e10 <_tc_timer_init+0x28c>)
    7c9a:	4798      	blx	r3
    7c9c:	e06a      	b.n	7d74 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7c9e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ca2:	4957      	ldr	r1, [pc, #348]	; (7e00 <_tc_timer_init+0x27c>)
    7ca4:	4613      	mov	r3, r2
    7ca6:	009b      	lsls	r3, r3, #2
    7ca8:	4413      	add	r3, r2
    7caa:	009b      	lsls	r3, r3, #2
    7cac:	440b      	add	r3, r1
    7cae:	3304      	adds	r3, #4
    7cb0:	681b      	ldr	r3, [r3, #0]
    7cb2:	f003 030c 	and.w	r3, r3, #12
    7cb6:	2b00      	cmp	r3, #0
    7cb8:	d120      	bne.n	7cfc <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7cba:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7cbe:	4950      	ldr	r1, [pc, #320]	; (7e00 <_tc_timer_init+0x27c>)
    7cc0:	4613      	mov	r3, r2
    7cc2:	009b      	lsls	r3, r3, #2
    7cc4:	4413      	add	r3, r2
    7cc6:	009b      	lsls	r3, r3, #2
    7cc8:	440b      	add	r3, r1
    7cca:	330c      	adds	r3, #12
    7ccc:	681b      	ldr	r3, [r3, #0]
    7cce:	b29b      	uxth	r3, r3
    7cd0:	461a      	mov	r2, r3
    7cd2:	2100      	movs	r1, #0
    7cd4:	6838      	ldr	r0, [r7, #0]
    7cd6:	4b4f      	ldr	r3, [pc, #316]	; (7e14 <_tc_timer_init+0x290>)
    7cd8:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7cda:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7cde:	4948      	ldr	r1, [pc, #288]	; (7e00 <_tc_timer_init+0x27c>)
    7ce0:	4613      	mov	r3, r2
    7ce2:	009b      	lsls	r3, r3, #2
    7ce4:	4413      	add	r3, r2
    7ce6:	009b      	lsls	r3, r3, #2
    7ce8:	440b      	add	r3, r1
    7cea:	3310      	adds	r3, #16
    7cec:	681b      	ldr	r3, [r3, #0]
    7cee:	b29b      	uxth	r3, r3
    7cf0:	461a      	mov	r2, r3
    7cf2:	2101      	movs	r1, #1
    7cf4:	6838      	ldr	r0, [r7, #0]
    7cf6:	4b47      	ldr	r3, [pc, #284]	; (7e14 <_tc_timer_init+0x290>)
    7cf8:	4798      	blx	r3
    7cfa:	e03b      	b.n	7d74 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7cfc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d00:	493f      	ldr	r1, [pc, #252]	; (7e00 <_tc_timer_init+0x27c>)
    7d02:	4613      	mov	r3, r2
    7d04:	009b      	lsls	r3, r3, #2
    7d06:	4413      	add	r3, r2
    7d08:	009b      	lsls	r3, r3, #2
    7d0a:	440b      	add	r3, r1
    7d0c:	3304      	adds	r3, #4
    7d0e:	681b      	ldr	r3, [r3, #0]
    7d10:	f003 030c 	and.w	r3, r3, #12
    7d14:	2b04      	cmp	r3, #4
    7d16:	d12d      	bne.n	7d74 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7d18:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d1c:	4938      	ldr	r1, [pc, #224]	; (7e00 <_tc_timer_init+0x27c>)
    7d1e:	4613      	mov	r3, r2
    7d20:	009b      	lsls	r3, r3, #2
    7d22:	4413      	add	r3, r2
    7d24:	009b      	lsls	r3, r3, #2
    7d26:	440b      	add	r3, r1
    7d28:	330c      	adds	r3, #12
    7d2a:	681b      	ldr	r3, [r3, #0]
    7d2c:	b2db      	uxtb	r3, r3
    7d2e:	461a      	mov	r2, r3
    7d30:	2100      	movs	r1, #0
    7d32:	6838      	ldr	r0, [r7, #0]
    7d34:	4b38      	ldr	r3, [pc, #224]	; (7e18 <_tc_timer_init+0x294>)
    7d36:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7d38:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d3c:	4930      	ldr	r1, [pc, #192]	; (7e00 <_tc_timer_init+0x27c>)
    7d3e:	4613      	mov	r3, r2
    7d40:	009b      	lsls	r3, r3, #2
    7d42:	4413      	add	r3, r2
    7d44:	009b      	lsls	r3, r3, #2
    7d46:	440b      	add	r3, r1
    7d48:	3310      	adds	r3, #16
    7d4a:	681b      	ldr	r3, [r3, #0]
    7d4c:	b2db      	uxtb	r3, r3
    7d4e:	461a      	mov	r2, r3
    7d50:	2101      	movs	r1, #1
    7d52:	6838      	ldr	r0, [r7, #0]
    7d54:	4b30      	ldr	r3, [pc, #192]	; (7e18 <_tc_timer_init+0x294>)
    7d56:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7d58:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d5c:	4928      	ldr	r1, [pc, #160]	; (7e00 <_tc_timer_init+0x27c>)
    7d5e:	4613      	mov	r3, r2
    7d60:	009b      	lsls	r3, r3, #2
    7d62:	4413      	add	r3, r2
    7d64:	009b      	lsls	r3, r3, #2
    7d66:	440b      	add	r3, r1
    7d68:	330b      	adds	r3, #11
    7d6a:	781b      	ldrb	r3, [r3, #0]
    7d6c:	4619      	mov	r1, r3
    7d6e:	6838      	ldr	r0, [r7, #0]
    7d70:	4b2a      	ldr	r3, [pc, #168]	; (7e1c <_tc_timer_init+0x298>)
    7d72:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    7d74:	6838      	ldr	r0, [r7, #0]
    7d76:	4b2a      	ldr	r3, [pc, #168]	; (7e20 <_tc_timer_init+0x29c>)
    7d78:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    7d7a:	6879      	ldr	r1, [r7, #4]
    7d7c:	6838      	ldr	r0, [r7, #0]
    7d7e:	4b29      	ldr	r3, [pc, #164]	; (7e24 <_tc_timer_init+0x2a0>)
    7d80:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7d82:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d86:	491e      	ldr	r1, [pc, #120]	; (7e00 <_tc_timer_init+0x27c>)
    7d88:	4613      	mov	r3, r2
    7d8a:	009b      	lsls	r3, r3, #2
    7d8c:	4413      	add	r3, r2
    7d8e:	009b      	lsls	r3, r3, #2
    7d90:	440b      	add	r3, r1
    7d92:	3302      	adds	r3, #2
    7d94:	f9b3 3000 	ldrsh.w	r3, [r3]
    7d98:	4618      	mov	r0, r3
    7d9a:	4b23      	ldr	r3, [pc, #140]	; (7e28 <_tc_timer_init+0x2a4>)
    7d9c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7d9e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7da2:	4917      	ldr	r1, [pc, #92]	; (7e00 <_tc_timer_init+0x27c>)
    7da4:	4613      	mov	r3, r2
    7da6:	009b      	lsls	r3, r3, #2
    7da8:	4413      	add	r3, r2
    7daa:	009b      	lsls	r3, r3, #2
    7dac:	440b      	add	r3, r1
    7dae:	3302      	adds	r3, #2
    7db0:	f9b3 3000 	ldrsh.w	r3, [r3]
    7db4:	4618      	mov	r0, r3
    7db6:	4b1d      	ldr	r3, [pc, #116]	; (7e2c <_tc_timer_init+0x2a8>)
    7db8:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7dba:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7dbe:	4910      	ldr	r1, [pc, #64]	; (7e00 <_tc_timer_init+0x27c>)
    7dc0:	4613      	mov	r3, r2
    7dc2:	009b      	lsls	r3, r3, #2
    7dc4:	4413      	add	r3, r2
    7dc6:	009b      	lsls	r3, r3, #2
    7dc8:	440b      	add	r3, r1
    7dca:	3302      	adds	r3, #2
    7dcc:	f9b3 3000 	ldrsh.w	r3, [r3]
    7dd0:	4618      	mov	r0, r3
    7dd2:	4b17      	ldr	r3, [pc, #92]	; (7e30 <_tc_timer_init+0x2ac>)
    7dd4:	4798      	blx	r3

	return ERR_NONE;
    7dd6:	2300      	movs	r3, #0
}
    7dd8:	4618      	mov	r0, r3
    7dda:	3710      	adds	r7, #16
    7ddc:	46bd      	mov	sp, r7
    7dde:	bd80      	pop	{r7, pc}
    7de0:	00008415 	.word	0x00008415
    7de4:	0000eef4 	.word	0x0000eef4
    7de8:	000037fd 	.word	0x000037fd
    7dec:	000077f9 	.word	0x000077f9
    7df0:	00007999 	.word	0x00007999
    7df4:	00007949 	.word	0x00007949
    7df8:	000077d5 	.word	0x000077d5
    7dfc:	000079c9 	.word	0x000079c9
    7e00:	20000110 	.word	0x20000110
    7e04:	00007a29 	.word	0x00007a29
    7e08:	000079ed 	.word	0x000079ed
    7e0c:	00007a0b 	.word	0x00007a0b
    7e10:	00007b29 	.word	0x00007b29
    7e14:	00007ac5 	.word	0x00007ac5
    7e18:	00007a95 	.word	0x00007a95
    7e1c:	00007a49 	.word	0x00007a49
    7e20:	0000787d 	.word	0x0000787d
    7e24:	0000847d 	.word	0x0000847d
    7e28:	00007755 	.word	0x00007755
    7e2c:	00007799 	.word	0x00007799
    7e30:	00007719 	.word	0x00007719

00007e34 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7e34:	b580      	push	{r7, lr}
    7e36:	b084      	sub	sp, #16
    7e38:	af00      	add	r7, sp, #0
    7e3a:	6078      	str	r0, [r7, #4]
    7e3c:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7e3e:	6838      	ldr	r0, [r7, #0]
    7e40:	4b73      	ldr	r3, [pc, #460]	; (8010 <_pwm_init+0x1dc>)
    7e42:	4798      	blx	r3
    7e44:	4603      	mov	r3, r0
    7e46:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    7e48:	687b      	ldr	r3, [r7, #4]
    7e4a:	683a      	ldr	r2, [r7, #0]
    7e4c:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7e4e:	2101      	movs	r1, #1
    7e50:	6838      	ldr	r0, [r7, #0]
    7e52:	4b70      	ldr	r3, [pc, #448]	; (8014 <_pwm_init+0x1e0>)
    7e54:	4798      	blx	r3
    7e56:	4603      	mov	r3, r0
    7e58:	f083 0301 	eor.w	r3, r3, #1
    7e5c:	b2db      	uxtb	r3, r3
    7e5e:	2b00      	cmp	r3, #0
    7e60:	d011      	beq.n	7e86 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7e62:	2102      	movs	r1, #2
    7e64:	6838      	ldr	r0, [r7, #0]
    7e66:	4b6c      	ldr	r3, [pc, #432]	; (8018 <_pwm_init+0x1e4>)
    7e68:	4798      	blx	r3
    7e6a:	4603      	mov	r3, r0
    7e6c:	2b00      	cmp	r3, #0
    7e6e:	d006      	beq.n	7e7e <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7e70:	6838      	ldr	r0, [r7, #0]
    7e72:	4b6a      	ldr	r3, [pc, #424]	; (801c <_pwm_init+0x1e8>)
    7e74:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7e76:	2102      	movs	r1, #2
    7e78:	6838      	ldr	r0, [r7, #0]
    7e7a:	4b69      	ldr	r3, [pc, #420]	; (8020 <_pwm_init+0x1ec>)
    7e7c:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7e7e:	2101      	movs	r1, #1
    7e80:	6838      	ldr	r0, [r7, #0]
    7e82:	4b68      	ldr	r3, [pc, #416]	; (8024 <_pwm_init+0x1f0>)
    7e84:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7e86:	2101      	movs	r1, #1
    7e88:	6838      	ldr	r0, [r7, #0]
    7e8a:	4b65      	ldr	r3, [pc, #404]	; (8020 <_pwm_init+0x1ec>)
    7e8c:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7e8e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e92:	4965      	ldr	r1, [pc, #404]	; (8028 <_pwm_init+0x1f4>)
    7e94:	4613      	mov	r3, r2
    7e96:	009b      	lsls	r3, r3, #2
    7e98:	4413      	add	r3, r2
    7e9a:	009b      	lsls	r3, r3, #2
    7e9c:	440b      	add	r3, r1
    7e9e:	3304      	adds	r3, #4
    7ea0:	681b      	ldr	r3, [r3, #0]
    7ea2:	4619      	mov	r1, r3
    7ea4:	6838      	ldr	r0, [r7, #0]
    7ea6:	4b5f      	ldr	r3, [pc, #380]	; (8024 <_pwm_init+0x1f0>)
    7ea8:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7eaa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7eae:	495e      	ldr	r1, [pc, #376]	; (8028 <_pwm_init+0x1f4>)
    7eb0:	4613      	mov	r3, r2
    7eb2:	009b      	lsls	r3, r3, #2
    7eb4:	4413      	add	r3, r2
    7eb6:	009b      	lsls	r3, r3, #2
    7eb8:	440b      	add	r3, r1
    7eba:	330a      	adds	r3, #10
    7ebc:	781b      	ldrb	r3, [r3, #0]
    7ebe:	4619      	mov	r1, r3
    7ec0:	6838      	ldr	r0, [r7, #0]
    7ec2:	4b5a      	ldr	r3, [pc, #360]	; (802c <_pwm_init+0x1f8>)
    7ec4:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7ec6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7eca:	4957      	ldr	r1, [pc, #348]	; (8028 <_pwm_init+0x1f4>)
    7ecc:	4613      	mov	r3, r2
    7ece:	009b      	lsls	r3, r3, #2
    7ed0:	4413      	add	r3, r2
    7ed2:	009b      	lsls	r3, r3, #2
    7ed4:	440b      	add	r3, r1
    7ed6:	3308      	adds	r3, #8
    7ed8:	881b      	ldrh	r3, [r3, #0]
    7eda:	4619      	mov	r1, r3
    7edc:	6838      	ldr	r0, [r7, #0]
    7ede:	4b54      	ldr	r3, [pc, #336]	; (8030 <_pwm_init+0x1fc>)
    7ee0:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    7ee2:	2103      	movs	r1, #3
    7ee4:	6838      	ldr	r0, [r7, #0]
    7ee6:	4b53      	ldr	r3, [pc, #332]	; (8034 <_pwm_init+0x200>)
    7ee8:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7eea:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7eee:	494e      	ldr	r1, [pc, #312]	; (8028 <_pwm_init+0x1f4>)
    7ef0:	4613      	mov	r3, r2
    7ef2:	009b      	lsls	r3, r3, #2
    7ef4:	4413      	add	r3, r2
    7ef6:	009b      	lsls	r3, r3, #2
    7ef8:	440b      	add	r3, r1
    7efa:	3304      	adds	r3, #4
    7efc:	681b      	ldr	r3, [r3, #0]
    7efe:	f003 030c 	and.w	r3, r3, #12
    7f02:	2b08      	cmp	r3, #8
    7f04:	d11e      	bne.n	7f44 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7f06:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f0a:	4947      	ldr	r1, [pc, #284]	; (8028 <_pwm_init+0x1f4>)
    7f0c:	4613      	mov	r3, r2
    7f0e:	009b      	lsls	r3, r3, #2
    7f10:	4413      	add	r3, r2
    7f12:	009b      	lsls	r3, r3, #2
    7f14:	440b      	add	r3, r1
    7f16:	330c      	adds	r3, #12
    7f18:	681b      	ldr	r3, [r3, #0]
    7f1a:	461a      	mov	r2, r3
    7f1c:	2100      	movs	r1, #0
    7f1e:	6838      	ldr	r0, [r7, #0]
    7f20:	4b45      	ldr	r3, [pc, #276]	; (8038 <_pwm_init+0x204>)
    7f22:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7f24:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f28:	493f      	ldr	r1, [pc, #252]	; (8028 <_pwm_init+0x1f4>)
    7f2a:	4613      	mov	r3, r2
    7f2c:	009b      	lsls	r3, r3, #2
    7f2e:	4413      	add	r3, r2
    7f30:	009b      	lsls	r3, r3, #2
    7f32:	440b      	add	r3, r1
    7f34:	3310      	adds	r3, #16
    7f36:	681b      	ldr	r3, [r3, #0]
    7f38:	461a      	mov	r2, r3
    7f3a:	2101      	movs	r1, #1
    7f3c:	6838      	ldr	r0, [r7, #0]
    7f3e:	4b3e      	ldr	r3, [pc, #248]	; (8038 <_pwm_init+0x204>)
    7f40:	4798      	blx	r3
    7f42:	e031      	b.n	7fa8 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7f44:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f48:	4937      	ldr	r1, [pc, #220]	; (8028 <_pwm_init+0x1f4>)
    7f4a:	4613      	mov	r3, r2
    7f4c:	009b      	lsls	r3, r3, #2
    7f4e:	4413      	add	r3, r2
    7f50:	009b      	lsls	r3, r3, #2
    7f52:	440b      	add	r3, r1
    7f54:	3304      	adds	r3, #4
    7f56:	681b      	ldr	r3, [r3, #0]
    7f58:	f003 030c 	and.w	r3, r3, #12
    7f5c:	2b00      	cmp	r3, #0
    7f5e:	d120      	bne.n	7fa2 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7f60:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f64:	4930      	ldr	r1, [pc, #192]	; (8028 <_pwm_init+0x1f4>)
    7f66:	4613      	mov	r3, r2
    7f68:	009b      	lsls	r3, r3, #2
    7f6a:	4413      	add	r3, r2
    7f6c:	009b      	lsls	r3, r3, #2
    7f6e:	440b      	add	r3, r1
    7f70:	330c      	adds	r3, #12
    7f72:	681b      	ldr	r3, [r3, #0]
    7f74:	b29b      	uxth	r3, r3
    7f76:	461a      	mov	r2, r3
    7f78:	2100      	movs	r1, #0
    7f7a:	6838      	ldr	r0, [r7, #0]
    7f7c:	4b2f      	ldr	r3, [pc, #188]	; (803c <_pwm_init+0x208>)
    7f7e:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7f80:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f84:	4928      	ldr	r1, [pc, #160]	; (8028 <_pwm_init+0x1f4>)
    7f86:	4613      	mov	r3, r2
    7f88:	009b      	lsls	r3, r3, #2
    7f8a:	4413      	add	r3, r2
    7f8c:	009b      	lsls	r3, r3, #2
    7f8e:	440b      	add	r3, r1
    7f90:	3310      	adds	r3, #16
    7f92:	681b      	ldr	r3, [r3, #0]
    7f94:	b29b      	uxth	r3, r3
    7f96:	461a      	mov	r2, r3
    7f98:	2101      	movs	r1, #1
    7f9a:	6838      	ldr	r0, [r7, #0]
    7f9c:	4b27      	ldr	r3, [pc, #156]	; (803c <_pwm_init+0x208>)
    7f9e:	4798      	blx	r3
    7fa0:	e002      	b.n	7fa8 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    7fa2:	f04f 33ff 	mov.w	r3, #4294967295
    7fa6:	e02e      	b.n	8006 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    7fa8:	6879      	ldr	r1, [r7, #4]
    7faa:	6838      	ldr	r0, [r7, #0]
    7fac:	4b24      	ldr	r3, [pc, #144]	; (8040 <_pwm_init+0x20c>)
    7fae:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7fb0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7fb4:	491c      	ldr	r1, [pc, #112]	; (8028 <_pwm_init+0x1f4>)
    7fb6:	4613      	mov	r3, r2
    7fb8:	009b      	lsls	r3, r3, #2
    7fba:	4413      	add	r3, r2
    7fbc:	009b      	lsls	r3, r3, #2
    7fbe:	440b      	add	r3, r1
    7fc0:	3302      	adds	r3, #2
    7fc2:	f9b3 3000 	ldrsh.w	r3, [r3]
    7fc6:	4618      	mov	r0, r3
    7fc8:	4b1e      	ldr	r3, [pc, #120]	; (8044 <_pwm_init+0x210>)
    7fca:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7fcc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7fd0:	4915      	ldr	r1, [pc, #84]	; (8028 <_pwm_init+0x1f4>)
    7fd2:	4613      	mov	r3, r2
    7fd4:	009b      	lsls	r3, r3, #2
    7fd6:	4413      	add	r3, r2
    7fd8:	009b      	lsls	r3, r3, #2
    7fda:	440b      	add	r3, r1
    7fdc:	3302      	adds	r3, #2
    7fde:	f9b3 3000 	ldrsh.w	r3, [r3]
    7fe2:	4618      	mov	r0, r3
    7fe4:	4b18      	ldr	r3, [pc, #96]	; (8048 <_pwm_init+0x214>)
    7fe6:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7fe8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7fec:	490e      	ldr	r1, [pc, #56]	; (8028 <_pwm_init+0x1f4>)
    7fee:	4613      	mov	r3, r2
    7ff0:	009b      	lsls	r3, r3, #2
    7ff2:	4413      	add	r3, r2
    7ff4:	009b      	lsls	r3, r3, #2
    7ff6:	440b      	add	r3, r1
    7ff8:	3302      	adds	r3, #2
    7ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
    7ffe:	4618      	mov	r0, r3
    8000:	4b12      	ldr	r3, [pc, #72]	; (804c <_pwm_init+0x218>)
    8002:	4798      	blx	r3

	return 0;
    8004:	2300      	movs	r3, #0
}
    8006:	4618      	mov	r0, r3
    8008:	3710      	adds	r7, #16
    800a:	46bd      	mov	sp, r7
    800c:	bd80      	pop	{r7, pc}
    800e:	bf00      	nop
    8010:	00008415 	.word	0x00008415
    8014:	000077f9 	.word	0x000077f9
    8018:	00007999 	.word	0x00007999
    801c:	00007949 	.word	0x00007949
    8020:	000077d5 	.word	0x000077d5
    8024:	000079c9 	.word	0x000079c9
    8028:	20000110 	.word	0x20000110
    802c:	00007a29 	.word	0x00007a29
    8030:	000079ed 	.word	0x000079ed
    8034:	00007a0b 	.word	0x00007a0b
    8038:	00007b29 	.word	0x00007b29
    803c:	00007ac5 	.word	0x00007ac5
    8040:	0000847d 	.word	0x0000847d
    8044:	00007755 	.word	0x00007755
    8048:	00007799 	.word	0x00007799
    804c:	00007719 	.word	0x00007719

00008050 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    8050:	b580      	push	{r7, lr}
    8052:	b084      	sub	sp, #16
    8054:	af00      	add	r7, sp, #0
    8056:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8058:	687b      	ldr	r3, [r7, #4]
    805a:	68db      	ldr	r3, [r3, #12]
    805c:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    805e:	68f8      	ldr	r0, [r7, #12]
    8060:	4b10      	ldr	r3, [pc, #64]	; (80a4 <_tc_timer_deinit+0x54>)
    8062:	4798      	blx	r3
    8064:	4603      	mov	r3, r0
    8066:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8068:	22f9      	movs	r2, #249	; 0xf9
    806a:	490f      	ldr	r1, [pc, #60]	; (80a8 <_tc_timer_deinit+0x58>)
    806c:	2001      	movs	r0, #1
    806e:	4b0f      	ldr	r3, [pc, #60]	; (80ac <_tc_timer_deinit+0x5c>)
    8070:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    8072:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8076:	490e      	ldr	r1, [pc, #56]	; (80b0 <_tc_timer_deinit+0x60>)
    8078:	4613      	mov	r3, r2
    807a:	009b      	lsls	r3, r3, #2
    807c:	4413      	add	r3, r2
    807e:	009b      	lsls	r3, r3, #2
    8080:	440b      	add	r3, r1
    8082:	3302      	adds	r3, #2
    8084:	f9b3 3000 	ldrsh.w	r3, [r3]
    8088:	4618      	mov	r0, r3
    808a:	4b0a      	ldr	r3, [pc, #40]	; (80b4 <_tc_timer_deinit+0x64>)
    808c:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    808e:	68f8      	ldr	r0, [r7, #12]
    8090:	4b09      	ldr	r3, [pc, #36]	; (80b8 <_tc_timer_deinit+0x68>)
    8092:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    8094:	68f8      	ldr	r0, [r7, #12]
    8096:	4b09      	ldr	r3, [pc, #36]	; (80bc <_tc_timer_deinit+0x6c>)
    8098:	4798      	blx	r3
}
    809a:	bf00      	nop
    809c:	3710      	adds	r7, #16
    809e:	46bd      	mov	sp, r7
    80a0:	bd80      	pop	{r7, pc}
    80a2:	bf00      	nop
    80a4:	00008415 	.word	0x00008415
    80a8:	0000eef4 	.word	0x0000eef4
    80ac:	000037fd 	.word	0x000037fd
    80b0:	20000110 	.word	0x20000110
    80b4:	00007755 	.word	0x00007755
    80b8:	00007949 	.word	0x00007949
    80bc:	000078c1 	.word	0x000078c1

000080c0 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    80c0:	b580      	push	{r7, lr}
    80c2:	b082      	sub	sp, #8
    80c4:	af00      	add	r7, sp, #0
    80c6:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    80c8:	687b      	ldr	r3, [r7, #4]
    80ca:	68db      	ldr	r3, [r3, #12]
    80cc:	4618      	mov	r0, r3
    80ce:	4b03      	ldr	r3, [pc, #12]	; (80dc <_tc_timer_start+0x1c>)
    80d0:	4798      	blx	r3
}
    80d2:	bf00      	nop
    80d4:	3708      	adds	r7, #8
    80d6:	46bd      	mov	sp, r7
    80d8:	bd80      	pop	{r7, pc}
    80da:	bf00      	nop
    80dc:	000078e9 	.word	0x000078e9

000080e0 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    80e0:	b580      	push	{r7, lr}
    80e2:	b082      	sub	sp, #8
    80e4:	af00      	add	r7, sp, #0
    80e6:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    80e8:	687b      	ldr	r3, [r7, #4]
    80ea:	691b      	ldr	r3, [r3, #16]
    80ec:	4618      	mov	r0, r3
    80ee:	4b03      	ldr	r3, [pc, #12]	; (80fc <_pwm_enable+0x1c>)
    80f0:	4798      	blx	r3
}
    80f2:	bf00      	nop
    80f4:	3708      	adds	r7, #8
    80f6:	46bd      	mov	sp, r7
    80f8:	bd80      	pop	{r7, pc}
    80fa:	bf00      	nop
    80fc:	000078e9 	.word	0x000078e9

00008100 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    8100:	b580      	push	{r7, lr}
    8102:	b082      	sub	sp, #8
    8104:	af00      	add	r7, sp, #0
    8106:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8108:	687b      	ldr	r3, [r7, #4]
    810a:	68db      	ldr	r3, [r3, #12]
    810c:	4618      	mov	r0, r3
    810e:	4b03      	ldr	r3, [pc, #12]	; (811c <_tc_timer_stop+0x1c>)
    8110:	4798      	blx	r3
}
    8112:	bf00      	nop
    8114:	3708      	adds	r7, #8
    8116:	46bd      	mov	sp, r7
    8118:	bd80      	pop	{r7, pc}
    811a:	bf00      	nop
    811c:	00007949 	.word	0x00007949

00008120 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    8120:	b580      	push	{r7, lr}
    8122:	b084      	sub	sp, #16
    8124:	af00      	add	r7, sp, #0
    8126:	6078      	str	r0, [r7, #4]
    8128:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    812a:	687b      	ldr	r3, [r7, #4]
    812c:	68db      	ldr	r3, [r3, #12]
    812e:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8130:	68f8      	ldr	r0, [r7, #12]
    8132:	4b14      	ldr	r3, [pc, #80]	; (8184 <_tc_timer_set_period+0x64>)
    8134:	4798      	blx	r3
    8136:	4603      	mov	r3, r0
    8138:	2b02      	cmp	r3, #2
    813a:	d105      	bne.n	8148 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    813c:	683a      	ldr	r2, [r7, #0]
    813e:	2100      	movs	r1, #0
    8140:	68f8      	ldr	r0, [r7, #12]
    8142:	4b11      	ldr	r3, [pc, #68]	; (8188 <_tc_timer_set_period+0x68>)
    8144:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    8146:	e019      	b.n	817c <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8148:	68f8      	ldr	r0, [r7, #12]
    814a:	4b0e      	ldr	r3, [pc, #56]	; (8184 <_tc_timer_set_period+0x64>)
    814c:	4798      	blx	r3
    814e:	4603      	mov	r3, r0
    8150:	2b00      	cmp	r3, #0
    8152:	d107      	bne.n	8164 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    8154:	683b      	ldr	r3, [r7, #0]
    8156:	b29b      	uxth	r3, r3
    8158:	461a      	mov	r2, r3
    815a:	2100      	movs	r1, #0
    815c:	68f8      	ldr	r0, [r7, #12]
    815e:	4b0b      	ldr	r3, [pc, #44]	; (818c <_tc_timer_set_period+0x6c>)
    8160:	4798      	blx	r3
}
    8162:	e00b      	b.n	817c <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8164:	68f8      	ldr	r0, [r7, #12]
    8166:	4b07      	ldr	r3, [pc, #28]	; (8184 <_tc_timer_set_period+0x64>)
    8168:	4798      	blx	r3
    816a:	4603      	mov	r3, r0
    816c:	2b01      	cmp	r3, #1
    816e:	d105      	bne.n	817c <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    8170:	683b      	ldr	r3, [r7, #0]
    8172:	b2db      	uxtb	r3, r3
    8174:	4619      	mov	r1, r3
    8176:	68f8      	ldr	r0, [r7, #12]
    8178:	4b05      	ldr	r3, [pc, #20]	; (8190 <_tc_timer_set_period+0x70>)
    817a:	4798      	blx	r3
}
    817c:	bf00      	nop
    817e:	3710      	adds	r7, #16
    8180:	46bd      	mov	sp, r7
    8182:	bd80      	pop	{r7, pc}
    8184:	00007971 	.word	0x00007971
    8188:	00007b29 	.word	0x00007b29
    818c:	00007ac5 	.word	0x00007ac5
    8190:	00007a49 	.word	0x00007a49

00008194 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    8194:	b580      	push	{r7, lr}
    8196:	b084      	sub	sp, #16
    8198:	af00      	add	r7, sp, #0
    819a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    819c:	687b      	ldr	r3, [r7, #4]
    819e:	68db      	ldr	r3, [r3, #12]
    81a0:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    81a2:	68f8      	ldr	r0, [r7, #12]
    81a4:	4b13      	ldr	r3, [pc, #76]	; (81f4 <_tc_timer_get_period+0x60>)
    81a6:	4798      	blx	r3
    81a8:	4603      	mov	r3, r0
    81aa:	2b02      	cmp	r3, #2
    81ac:	d105      	bne.n	81ba <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    81ae:	2100      	movs	r1, #0
    81b0:	68f8      	ldr	r0, [r7, #12]
    81b2:	4b11      	ldr	r3, [pc, #68]	; (81f8 <_tc_timer_get_period+0x64>)
    81b4:	4798      	blx	r3
    81b6:	4603      	mov	r3, r0
    81b8:	e017      	b.n	81ea <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    81ba:	68f8      	ldr	r0, [r7, #12]
    81bc:	4b0d      	ldr	r3, [pc, #52]	; (81f4 <_tc_timer_get_period+0x60>)
    81be:	4798      	blx	r3
    81c0:	4603      	mov	r3, r0
    81c2:	2b00      	cmp	r3, #0
    81c4:	d105      	bne.n	81d2 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    81c6:	2100      	movs	r1, #0
    81c8:	68f8      	ldr	r0, [r7, #12]
    81ca:	4b0c      	ldr	r3, [pc, #48]	; (81fc <_tc_timer_get_period+0x68>)
    81cc:	4798      	blx	r3
    81ce:	4603      	mov	r3, r0
    81d0:	e00b      	b.n	81ea <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    81d2:	68f8      	ldr	r0, [r7, #12]
    81d4:	4b07      	ldr	r3, [pc, #28]	; (81f4 <_tc_timer_get_period+0x60>)
    81d6:	4798      	blx	r3
    81d8:	4603      	mov	r3, r0
    81da:	2b01      	cmp	r3, #1
    81dc:	d104      	bne.n	81e8 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    81de:	68f8      	ldr	r0, [r7, #12]
    81e0:	4b07      	ldr	r3, [pc, #28]	; (8200 <_tc_timer_get_period+0x6c>)
    81e2:	4798      	blx	r3
    81e4:	4603      	mov	r3, r0
    81e6:	e000      	b.n	81ea <_tc_timer_get_period+0x56>
	}

	return 0;
    81e8:	2300      	movs	r3, #0
}
    81ea:	4618      	mov	r0, r3
    81ec:	3710      	adds	r7, #16
    81ee:	46bd      	mov	sp, r7
    81f0:	bd80      	pop	{r7, pc}
    81f2:	bf00      	nop
    81f4:	00007971 	.word	0x00007971
    81f8:	00007b59 	.word	0x00007b59
    81fc:	00007af9 	.word	0x00007af9
    8200:	00007a71 	.word	0x00007a71

00008204 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    8204:	b580      	push	{r7, lr}
    8206:	b082      	sub	sp, #8
    8208:	af00      	add	r7, sp, #0
    820a:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    820c:	687b      	ldr	r3, [r7, #4]
    820e:	68db      	ldr	r3, [r3, #12]
    8210:	4618      	mov	r0, r3
    8212:	4b03      	ldr	r3, [pc, #12]	; (8220 <_tc_timer_is_started+0x1c>)
    8214:	4798      	blx	r3
    8216:	4603      	mov	r3, r0
}
    8218:	4618      	mov	r0, r3
    821a:	3708      	adds	r7, #8
    821c:	46bd      	mov	sp, r7
    821e:	bd80      	pop	{r7, pc}
    8220:	00007911 	.word	0x00007911

00008224 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    8224:	b580      	push	{r7, lr}
    8226:	b082      	sub	sp, #8
    8228:	af00      	add	r7, sp, #0
    822a:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    822c:	687b      	ldr	r3, [r7, #4]
    822e:	691b      	ldr	r3, [r3, #16]
    8230:	4618      	mov	r0, r3
    8232:	4b03      	ldr	r3, [pc, #12]	; (8240 <_pwm_is_enabled+0x1c>)
    8234:	4798      	blx	r3
    8236:	4603      	mov	r3, r0
}
    8238:	4618      	mov	r0, r3
    823a:	3708      	adds	r7, #8
    823c:	46bd      	mov	sp, r7
    823e:	bd80      	pop	{r7, pc}
    8240:	00007911 	.word	0x00007911

00008244 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    8244:	b480      	push	{r7}
    8246:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    8248:	4b02      	ldr	r3, [pc, #8]	; (8254 <_tc_get_timer+0x10>)
}
    824a:	4618      	mov	r0, r3
    824c:	46bd      	mov	sp, r7
    824e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8252:	4770      	bx	lr
    8254:	20000188 	.word	0x20000188

00008258 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    8258:	b480      	push	{r7}
    825a:	af00      	add	r7, sp, #0
	return NULL;
    825c:	2300      	movs	r3, #0
}
    825e:	4618      	mov	r0, r3
    8260:	46bd      	mov	sp, r7
    8262:	f85d 7b04 	ldr.w	r7, [sp], #4
    8266:	4770      	bx	lr

00008268 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    8268:	b580      	push	{r7, lr}
    826a:	b084      	sub	sp, #16
    826c:	af00      	add	r7, sp, #0
    826e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8270:	687b      	ldr	r3, [r7, #4]
    8272:	68db      	ldr	r3, [r3, #12]
    8274:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8276:	68f8      	ldr	r0, [r7, #12]
    8278:	4b0e      	ldr	r3, [pc, #56]	; (82b4 <_tc_timer_set_irq+0x4c>)
    827a:	4798      	blx	r3
    827c:	4603      	mov	r3, r0
    827e:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8280:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    8284:	490c      	ldr	r1, [pc, #48]	; (82b8 <_tc_timer_set_irq+0x50>)
    8286:	2001      	movs	r0, #1
    8288:	4b0c      	ldr	r3, [pc, #48]	; (82bc <_tc_timer_set_irq+0x54>)
    828a:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    828c:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8290:	490b      	ldr	r1, [pc, #44]	; (82c0 <_tc_timer_set_irq+0x58>)
    8292:	4613      	mov	r3, r2
    8294:	009b      	lsls	r3, r3, #2
    8296:	4413      	add	r3, r2
    8298:	009b      	lsls	r3, r3, #2
    829a:	440b      	add	r3, r1
    829c:	3302      	adds	r3, #2
    829e:	f9b3 3000 	ldrsh.w	r3, [r3]
    82a2:	b2db      	uxtb	r3, r3
    82a4:	4618      	mov	r0, r3
    82a6:	4b07      	ldr	r3, [pc, #28]	; (82c4 <_tc_timer_set_irq+0x5c>)
    82a8:	4798      	blx	r3
}
    82aa:	bf00      	nop
    82ac:	3710      	adds	r7, #16
    82ae:	46bd      	mov	sp, r7
    82b0:	bd80      	pop	{r7, pc}
    82b2:	bf00      	nop
    82b4:	00008415 	.word	0x00008415
    82b8:	0000eef4 	.word	0x0000eef4
    82bc:	000037fd 	.word	0x000037fd
    82c0:	20000110 	.word	0x20000110
    82c4:	00004045 	.word	0x00004045

000082c8 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    82c8:	b580      	push	{r7, lr}
    82ca:	b084      	sub	sp, #16
    82cc:	af00      	add	r7, sp, #0
    82ce:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    82d0:	687b      	ldr	r3, [r7, #4]
    82d2:	68db      	ldr	r3, [r3, #12]
    82d4:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    82d6:	68f8      	ldr	r0, [r7, #12]
    82d8:	4b07      	ldr	r3, [pc, #28]	; (82f8 <tc_interrupt_handler+0x30>)
    82da:	4798      	blx	r3
    82dc:	4603      	mov	r3, r0
    82de:	2b00      	cmp	r3, #0
    82e0:	d006      	beq.n	82f0 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    82e2:	68f8      	ldr	r0, [r7, #12]
    82e4:	4b05      	ldr	r3, [pc, #20]	; (82fc <tc_interrupt_handler+0x34>)
    82e6:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    82e8:	687b      	ldr	r3, [r7, #4]
    82ea:	681b      	ldr	r3, [r3, #0]
    82ec:	6878      	ldr	r0, [r7, #4]
    82ee:	4798      	blx	r3
	}
}
    82f0:	bf00      	nop
    82f2:	3710      	adds	r7, #16
    82f4:	46bd      	mov	sp, r7
    82f6:	bd80      	pop	{r7, pc}
    82f8:	00007821 	.word	0x00007821
    82fc:	00007849 	.word	0x00007849

00008300 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8300:	b580      	push	{r7, lr}
    8302:	b084      	sub	sp, #16
    8304:	af00      	add	r7, sp, #0
    8306:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8308:	687b      	ldr	r3, [r7, #4]
    830a:	691b      	ldr	r3, [r3, #16]
    830c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    830e:	68f8      	ldr	r0, [r7, #12]
    8310:	4b12      	ldr	r3, [pc, #72]	; (835c <tc_pwm_interrupt_handler+0x5c>)
    8312:	4798      	blx	r3
    8314:	4603      	mov	r3, r0
    8316:	2b00      	cmp	r3, #0
    8318:	d00a      	beq.n	8330 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    831a:	68f8      	ldr	r0, [r7, #12]
    831c:	4b10      	ldr	r3, [pc, #64]	; (8360 <tc_pwm_interrupt_handler+0x60>)
    831e:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8320:	687b      	ldr	r3, [r7, #4]
    8322:	681b      	ldr	r3, [r3, #0]
    8324:	2b00      	cmp	r3, #0
    8326:	d003      	beq.n	8330 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8328:	687b      	ldr	r3, [r7, #4]
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	6878      	ldr	r0, [r7, #4]
    832e:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    8330:	68f8      	ldr	r0, [r7, #12]
    8332:	4b0c      	ldr	r3, [pc, #48]	; (8364 <tc_pwm_interrupt_handler+0x64>)
    8334:	4798      	blx	r3
    8336:	4603      	mov	r3, r0
    8338:	2b00      	cmp	r3, #0
    833a:	d00a      	beq.n	8352 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    833c:	68f8      	ldr	r0, [r7, #12]
    833e:	4b0a      	ldr	r3, [pc, #40]	; (8368 <tc_pwm_interrupt_handler+0x68>)
    8340:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    8342:	687b      	ldr	r3, [r7, #4]
    8344:	685b      	ldr	r3, [r3, #4]
    8346:	2b00      	cmp	r3, #0
    8348:	d003      	beq.n	8352 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    834a:	687b      	ldr	r3, [r7, #4]
    834c:	685b      	ldr	r3, [r3, #4]
    834e:	6878      	ldr	r0, [r7, #4]
    8350:	4798      	blx	r3
		}
	}
}
    8352:	bf00      	nop
    8354:	3710      	adds	r7, #16
    8356:	46bd      	mov	sp, r7
    8358:	bd80      	pop	{r7, pc}
    835a:	bf00      	nop
    835c:	00007821 	.word	0x00007821
    8360:	00007849 	.word	0x00007849
    8364:	00007897 	.word	0x00007897
    8368:	00007863 	.word	0x00007863

0000836c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    836c:	b580      	push	{r7, lr}
    836e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    8370:	4b03      	ldr	r3, [pc, #12]	; (8380 <TC0_Handler+0x14>)
    8372:	681b      	ldr	r3, [r3, #0]
    8374:	4618      	mov	r0, r3
    8376:	4b03      	ldr	r3, [pc, #12]	; (8384 <TC0_Handler+0x18>)
    8378:	4798      	blx	r3
}
    837a:	bf00      	nop
    837c:	bd80      	pop	{r7, pc}
    837e:	bf00      	nop
    8380:	20000ad0 	.word	0x20000ad0
    8384:	000082c9 	.word	0x000082c9

00008388 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    8388:	b580      	push	{r7, lr}
    838a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    838c:	4b03      	ldr	r3, [pc, #12]	; (839c <TC2_Handler+0x14>)
    838e:	681b      	ldr	r3, [r3, #0]
    8390:	4618      	mov	r0, r3
    8392:	4b03      	ldr	r3, [pc, #12]	; (83a0 <TC2_Handler+0x18>)
    8394:	4798      	blx	r3
}
    8396:	bf00      	nop
    8398:	bd80      	pop	{r7, pc}
    839a:	bf00      	nop
    839c:	20000ad4 	.word	0x20000ad4
    83a0:	000082c9 	.word	0x000082c9

000083a4 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    83a4:	b580      	push	{r7, lr}
    83a6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    83a8:	4b03      	ldr	r3, [pc, #12]	; (83b8 <TC4_Handler+0x14>)
    83aa:	681b      	ldr	r3, [r3, #0]
    83ac:	4618      	mov	r0, r3
    83ae:	4b03      	ldr	r3, [pc, #12]	; (83bc <TC4_Handler+0x18>)
    83b0:	4798      	blx	r3
}
    83b2:	bf00      	nop
    83b4:	bd80      	pop	{r7, pc}
    83b6:	bf00      	nop
    83b8:	20000ad8 	.word	0x20000ad8
    83bc:	000082c9 	.word	0x000082c9

000083c0 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    83c0:	b580      	push	{r7, lr}
    83c2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    83c4:	4b03      	ldr	r3, [pc, #12]	; (83d4 <TC5_Handler+0x14>)
    83c6:	681b      	ldr	r3, [r3, #0]
    83c8:	4618      	mov	r0, r3
    83ca:	4b03      	ldr	r3, [pc, #12]	; (83d8 <TC5_Handler+0x18>)
    83cc:	4798      	blx	r3
}
    83ce:	bf00      	nop
    83d0:	bd80      	pop	{r7, pc}
    83d2:	bf00      	nop
    83d4:	20000adc 	.word	0x20000adc
    83d8:	000082c9 	.word	0x000082c9

000083dc <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    83dc:	b580      	push	{r7, lr}
    83de:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    83e0:	4b03      	ldr	r3, [pc, #12]	; (83f0 <TC6_Handler+0x14>)
    83e2:	681b      	ldr	r3, [r3, #0]
    83e4:	4618      	mov	r0, r3
    83e6:	4b03      	ldr	r3, [pc, #12]	; (83f4 <TC6_Handler+0x18>)
    83e8:	4798      	blx	r3
}
    83ea:	bf00      	nop
    83ec:	bd80      	pop	{r7, pc}
    83ee:	bf00      	nop
    83f0:	20000ae0 	.word	0x20000ae0
    83f4:	000082c9 	.word	0x000082c9

000083f8 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    83f8:	b580      	push	{r7, lr}
    83fa:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    83fc:	4b03      	ldr	r3, [pc, #12]	; (840c <TC7_Handler+0x14>)
    83fe:	681b      	ldr	r3, [r3, #0]
    8400:	4618      	mov	r0, r3
    8402:	4b03      	ldr	r3, [pc, #12]	; (8410 <TC7_Handler+0x18>)
    8404:	4798      	blx	r3
}
    8406:	bf00      	nop
    8408:	bd80      	pop	{r7, pc}
    840a:	bf00      	nop
    840c:	20000ae4 	.word	0x20000ae4
    8410:	00008301 	.word	0x00008301

00008414 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8414:	b580      	push	{r7, lr}
    8416:	b084      	sub	sp, #16
    8418:	af00      	add	r7, sp, #0
    841a:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    841c:	6878      	ldr	r0, [r7, #4]
    841e:	4b13      	ldr	r3, [pc, #76]	; (846c <get_tc_index+0x58>)
    8420:	4798      	blx	r3
    8422:	4603      	mov	r3, r0
    8424:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8426:	2300      	movs	r3, #0
    8428:	73fb      	strb	r3, [r7, #15]
    842a:	e010      	b.n	844e <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    842c:	7bfa      	ldrb	r2, [r7, #15]
    842e:	4910      	ldr	r1, [pc, #64]	; (8470 <get_tc_index+0x5c>)
    8430:	4613      	mov	r3, r2
    8432:	009b      	lsls	r3, r3, #2
    8434:	4413      	add	r3, r2
    8436:	009b      	lsls	r3, r3, #2
    8438:	440b      	add	r3, r1
    843a:	781b      	ldrb	r3, [r3, #0]
    843c:	7bba      	ldrb	r2, [r7, #14]
    843e:	429a      	cmp	r2, r3
    8440:	d102      	bne.n	8448 <get_tc_index+0x34>
			return i;
    8442:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8446:	e00d      	b.n	8464 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8448:	7bfb      	ldrb	r3, [r7, #15]
    844a:	3301      	adds	r3, #1
    844c:	73fb      	strb	r3, [r7, #15]
    844e:	7bfb      	ldrb	r3, [r7, #15]
    8450:	2b05      	cmp	r3, #5
    8452:	d9eb      	bls.n	842c <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    8454:	f240 221d 	movw	r2, #541	; 0x21d
    8458:	4906      	ldr	r1, [pc, #24]	; (8474 <get_tc_index+0x60>)
    845a:	2000      	movs	r0, #0
    845c:	4b06      	ldr	r3, [pc, #24]	; (8478 <get_tc_index+0x64>)
    845e:	4798      	blx	r3
	return -1;
    8460:	f04f 33ff 	mov.w	r3, #4294967295
}
    8464:	4618      	mov	r0, r3
    8466:	3710      	adds	r7, #16
    8468:	46bd      	mov	sp, r7
    846a:	bd80      	pop	{r7, pc}
    846c:	00008519 	.word	0x00008519
    8470:	20000110 	.word	0x20000110
    8474:	0000eef4 	.word	0x0000eef4
    8478:	000037fd 	.word	0x000037fd

0000847c <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    847c:	b480      	push	{r7}
    847e:	b083      	sub	sp, #12
    8480:	af00      	add	r7, sp, #0
    8482:	6078      	str	r0, [r7, #4]
    8484:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    8486:	687b      	ldr	r3, [r7, #4]
    8488:	4a17      	ldr	r2, [pc, #92]	; (84e8 <_tc_init_irq_param+0x6c>)
    848a:	4293      	cmp	r3, r2
    848c:	d102      	bne.n	8494 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    848e:	4a17      	ldr	r2, [pc, #92]	; (84ec <_tc_init_irq_param+0x70>)
    8490:	683b      	ldr	r3, [r7, #0]
    8492:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    8494:	687b      	ldr	r3, [r7, #4]
    8496:	4a16      	ldr	r2, [pc, #88]	; (84f0 <_tc_init_irq_param+0x74>)
    8498:	4293      	cmp	r3, r2
    849a:	d102      	bne.n	84a2 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    849c:	4a15      	ldr	r2, [pc, #84]	; (84f4 <_tc_init_irq_param+0x78>)
    849e:	683b      	ldr	r3, [r7, #0]
    84a0:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    84a2:	687b      	ldr	r3, [r7, #4]
    84a4:	4a14      	ldr	r2, [pc, #80]	; (84f8 <_tc_init_irq_param+0x7c>)
    84a6:	4293      	cmp	r3, r2
    84a8:	d102      	bne.n	84b0 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    84aa:	4a14      	ldr	r2, [pc, #80]	; (84fc <_tc_init_irq_param+0x80>)
    84ac:	683b      	ldr	r3, [r7, #0]
    84ae:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    84b0:	687b      	ldr	r3, [r7, #4]
    84b2:	4a13      	ldr	r2, [pc, #76]	; (8500 <_tc_init_irq_param+0x84>)
    84b4:	4293      	cmp	r3, r2
    84b6:	d102      	bne.n	84be <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    84b8:	4a12      	ldr	r2, [pc, #72]	; (8504 <_tc_init_irq_param+0x88>)
    84ba:	683b      	ldr	r3, [r7, #0]
    84bc:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    84be:	687b      	ldr	r3, [r7, #4]
    84c0:	4a11      	ldr	r2, [pc, #68]	; (8508 <_tc_init_irq_param+0x8c>)
    84c2:	4293      	cmp	r3, r2
    84c4:	d102      	bne.n	84cc <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    84c6:	4a11      	ldr	r2, [pc, #68]	; (850c <_tc_init_irq_param+0x90>)
    84c8:	683b      	ldr	r3, [r7, #0]
    84ca:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    84cc:	687b      	ldr	r3, [r7, #4]
    84ce:	4a10      	ldr	r2, [pc, #64]	; (8510 <_tc_init_irq_param+0x94>)
    84d0:	4293      	cmp	r3, r2
    84d2:	d102      	bne.n	84da <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    84d4:	4a0f      	ldr	r2, [pc, #60]	; (8514 <_tc_init_irq_param+0x98>)
    84d6:	683b      	ldr	r3, [r7, #0]
    84d8:	6013      	str	r3, [r2, #0]
	}
}
    84da:	bf00      	nop
    84dc:	370c      	adds	r7, #12
    84de:	46bd      	mov	sp, r7
    84e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    84e4:	4770      	bx	lr
    84e6:	bf00      	nop
    84e8:	40003800 	.word	0x40003800
    84ec:	20000ad0 	.word	0x20000ad0
    84f0:	4101a000 	.word	0x4101a000
    84f4:	20000ad4 	.word	0x20000ad4
    84f8:	42001400 	.word	0x42001400
    84fc:	20000ad8 	.word	0x20000ad8
    8500:	42001800 	.word	0x42001800
    8504:	20000adc 	.word	0x20000adc
    8508:	43001400 	.word	0x43001400
    850c:	20000ae0 	.word	0x20000ae0
    8510:	43001800 	.word	0x43001800
    8514:	20000ae4 	.word	0x20000ae4

00008518 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    8518:	b4b0      	push	{r4, r5, r7}
    851a:	b08d      	sub	sp, #52	; 0x34
    851c:	af00      	add	r7, sp, #0
    851e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8520:	4b13      	ldr	r3, [pc, #76]	; (8570 <_get_hardware_offset+0x58>)
    8522:	f107 040c 	add.w	r4, r7, #12
    8526:	461d      	mov	r5, r3
    8528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    852a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    852c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8530:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8534:	2300      	movs	r3, #0
    8536:	62fb      	str	r3, [r7, #44]	; 0x2c
    8538:	e010      	b.n	855c <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    853a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    853c:	009b      	lsls	r3, r3, #2
    853e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8542:	4413      	add	r3, r2
    8544:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8548:	461a      	mov	r2, r3
    854a:	687b      	ldr	r3, [r7, #4]
    854c:	429a      	cmp	r2, r3
    854e:	d102      	bne.n	8556 <_get_hardware_offset+0x3e>
			return i;
    8550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8552:	b2db      	uxtb	r3, r3
    8554:	e006      	b.n	8564 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8558:	3301      	adds	r3, #1
    855a:	62fb      	str	r3, [r7, #44]	; 0x2c
    855c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    855e:	2b07      	cmp	r3, #7
    8560:	d9eb      	bls.n	853a <_get_hardware_offset+0x22>
		}
	}
	return 0;
    8562:	2300      	movs	r3, #0
}
    8564:	4618      	mov	r0, r3
    8566:	3734      	adds	r7, #52	; 0x34
    8568:	46bd      	mov	sp, r7
    856a:	bcb0      	pop	{r4, r5, r7}
    856c:	4770      	bx	lr
    856e:	bf00      	nop
    8570:	0000ef08 	.word	0x0000ef08

00008574 <__NVIC_EnableIRQ>:
{
    8574:	b480      	push	{r7}
    8576:	b083      	sub	sp, #12
    8578:	af00      	add	r7, sp, #0
    857a:	4603      	mov	r3, r0
    857c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    857e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8582:	2b00      	cmp	r3, #0
    8584:	db0b      	blt.n	859e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8586:	4909      	ldr	r1, [pc, #36]	; (85ac <__NVIC_EnableIRQ+0x38>)
    8588:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    858c:	095b      	lsrs	r3, r3, #5
    858e:	88fa      	ldrh	r2, [r7, #6]
    8590:	f002 021f 	and.w	r2, r2, #31
    8594:	2001      	movs	r0, #1
    8596:	fa00 f202 	lsl.w	r2, r0, r2
    859a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    859e:	bf00      	nop
    85a0:	370c      	adds	r7, #12
    85a2:	46bd      	mov	sp, r7
    85a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    85a8:	4770      	bx	lr
    85aa:	bf00      	nop
    85ac:	e000e100 	.word	0xe000e100

000085b0 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    85b0:	b480      	push	{r7}
    85b2:	b087      	sub	sp, #28
    85b4:	af00      	add	r7, sp, #0
    85b6:	60f8      	str	r0, [r7, #12]
    85b8:	460b      	mov	r3, r1
    85ba:	607a      	str	r2, [r7, #4]
    85bc:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    85be:	7afa      	ldrb	r2, [r7, #11]
    85c0:	68f9      	ldr	r1, [r7, #12]
    85c2:	4613      	mov	r3, r2
    85c4:	009b      	lsls	r3, r3, #2
    85c6:	4413      	add	r3, r2
    85c8:	009b      	lsls	r3, r3, #2
    85ca:	440b      	add	r3, r1
    85cc:	3340      	adds	r3, #64	; 0x40
    85ce:	681b      	ldr	r3, [r3, #0]
    85d0:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    85d2:	697a      	ldr	r2, [r7, #20]
    85d4:	687b      	ldr	r3, [r7, #4]
    85d6:	4013      	ands	r3, r2
    85d8:	617b      	str	r3, [r7, #20]
	return tmp;
    85da:	697b      	ldr	r3, [r7, #20]
}
    85dc:	4618      	mov	r0, r3
    85de:	371c      	adds	r7, #28
    85e0:	46bd      	mov	sp, r7
    85e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    85e6:	4770      	bx	lr

000085e8 <hri_oscctrl_get_STATUS_reg>:
{
    85e8:	b480      	push	{r7}
    85ea:	b085      	sub	sp, #20
    85ec:	af00      	add	r7, sp, #0
    85ee:	6078      	str	r0, [r7, #4]
    85f0:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    85f2:	687b      	ldr	r3, [r7, #4]
    85f4:	691b      	ldr	r3, [r3, #16]
    85f6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    85f8:	68fa      	ldr	r2, [r7, #12]
    85fa:	683b      	ldr	r3, [r7, #0]
    85fc:	4013      	ands	r3, r2
    85fe:	60fb      	str	r3, [r7, #12]
	return tmp;
    8600:	68fb      	ldr	r3, [r7, #12]
}
    8602:	4618      	mov	r0, r3
    8604:	3714      	adds	r7, #20
    8606:	46bd      	mov	sp, r7
    8608:	f85d 7b04 	ldr.w	r7, [sp], #4
    860c:	4770      	bx	lr

0000860e <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    860e:	b480      	push	{r7}
    8610:	b085      	sub	sp, #20
    8612:	af00      	add	r7, sp, #0
    8614:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8616:	687b      	ldr	r3, [r7, #4]
    8618:	f893 3020 	ldrb.w	r3, [r3, #32]
    861c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    861e:	7bfb      	ldrb	r3, [r7, #15]
    8620:	f003 0301 	and.w	r3, r3, #1
    8624:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8626:	7bfb      	ldrb	r3, [r7, #15]
    8628:	2b00      	cmp	r3, #0
    862a:	bf14      	ite	ne
    862c:	2301      	movne	r3, #1
    862e:	2300      	moveq	r3, #0
    8630:	b2db      	uxtb	r3, r3
}
    8632:	4618      	mov	r0, r3
    8634:	3714      	adds	r7, #20
    8636:	46bd      	mov	sp, r7
    8638:	f85d 7b04 	ldr.w	r7, [sp], #4
    863c:	4770      	bx	lr

0000863e <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    863e:	b480      	push	{r7}
    8640:	b083      	sub	sp, #12
    8642:	af00      	add	r7, sp, #0
    8644:	6078      	str	r0, [r7, #4]
    8646:	460b      	mov	r3, r1
    8648:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    864a:	bf00      	nop
    864c:	687b      	ldr	r3, [r7, #4]
    864e:	789b      	ldrb	r3, [r3, #2]
    8650:	b2da      	uxtb	r2, r3
    8652:	78fb      	ldrb	r3, [r7, #3]
    8654:	4013      	ands	r3, r2
    8656:	b2db      	uxtb	r3, r3
    8658:	2b00      	cmp	r3, #0
    865a:	d1f7      	bne.n	864c <hri_usb_wait_for_sync+0xe>
	};
}
    865c:	bf00      	nop
    865e:	370c      	adds	r7, #12
    8660:	46bd      	mov	sp, r7
    8662:	f85d 7b04 	ldr.w	r7, [sp], #4
    8666:	4770      	bx	lr

00008668 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8668:	b480      	push	{r7}
    866a:	b083      	sub	sp, #12
    866c:	af00      	add	r7, sp, #0
    866e:	6078      	str	r0, [r7, #4]
    8670:	460b      	mov	r3, r1
    8672:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8674:	687b      	ldr	r3, [r7, #4]
    8676:	789b      	ldrb	r3, [r3, #2]
    8678:	b2da      	uxtb	r2, r3
    867a:	78fb      	ldrb	r3, [r7, #3]
    867c:	4013      	ands	r3, r2
    867e:	b2db      	uxtb	r3, r3
    8680:	2b00      	cmp	r3, #0
    8682:	bf14      	ite	ne
    8684:	2301      	movne	r3, #1
    8686:	2300      	moveq	r3, #0
    8688:	b2db      	uxtb	r3, r3
}
    868a:	4618      	mov	r0, r3
    868c:	370c      	adds	r7, #12
    868e:	46bd      	mov	sp, r7
    8690:	f85d 7b04 	ldr.w	r7, [sp], #4
    8694:	4770      	bx	lr

00008696 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    8696:	b480      	push	{r7}
    8698:	b085      	sub	sp, #20
    869a:	af00      	add	r7, sp, #0
    869c:	6078      	str	r0, [r7, #4]
    869e:	460b      	mov	r3, r1
    86a0:	70fb      	strb	r3, [r7, #3]
    86a2:	4613      	mov	r3, r2
    86a4:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    86a6:	78fb      	ldrb	r3, [r7, #3]
    86a8:	687a      	ldr	r2, [r7, #4]
    86aa:	3308      	adds	r3, #8
    86ac:	015b      	lsls	r3, r3, #5
    86ae:	4413      	add	r3, r2
    86b0:	3307      	adds	r3, #7
    86b2:	781b      	ldrb	r3, [r3, #0]
    86b4:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    86b6:	7bfa      	ldrb	r2, [r7, #15]
    86b8:	78bb      	ldrb	r3, [r7, #2]
    86ba:	4013      	ands	r3, r2
    86bc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    86be:	7bfb      	ldrb	r3, [r7, #15]
}
    86c0:	4618      	mov	r0, r3
    86c2:	3714      	adds	r7, #20
    86c4:	46bd      	mov	sp, r7
    86c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    86ca:	4770      	bx	lr

000086cc <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    86cc:	b480      	push	{r7}
    86ce:	b083      	sub	sp, #12
    86d0:	af00      	add	r7, sp, #0
    86d2:	6078      	str	r0, [r7, #4]
    86d4:	460b      	mov	r3, r1
    86d6:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    86d8:	78fb      	ldrb	r3, [r7, #3]
    86da:	687a      	ldr	r2, [r7, #4]
    86dc:	3308      	adds	r3, #8
    86de:	015b      	lsls	r3, r3, #5
    86e0:	4413      	add	r3, r2
    86e2:	3307      	adds	r3, #7
    86e4:	781b      	ldrb	r3, [r3, #0]
    86e6:	b2db      	uxtb	r3, r3
}
    86e8:	4618      	mov	r0, r3
    86ea:	370c      	adds	r7, #12
    86ec:	46bd      	mov	sp, r7
    86ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    86f2:	4770      	bx	lr

000086f4 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    86f4:	b480      	push	{r7}
    86f6:	b083      	sub	sp, #12
    86f8:	af00      	add	r7, sp, #0
    86fa:	6078      	str	r0, [r7, #4]
    86fc:	460b      	mov	r3, r1
    86fe:	70fb      	strb	r3, [r7, #3]
    8700:	4613      	mov	r3, r2
    8702:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8704:	78fb      	ldrb	r3, [r7, #3]
    8706:	687a      	ldr	r2, [r7, #4]
    8708:	3308      	adds	r3, #8
    870a:	015b      	lsls	r3, r3, #5
    870c:	4413      	add	r3, r2
    870e:	3307      	adds	r3, #7
    8710:	78ba      	ldrb	r2, [r7, #2]
    8712:	701a      	strb	r2, [r3, #0]
}
    8714:	bf00      	nop
    8716:	370c      	adds	r7, #12
    8718:	46bd      	mov	sp, r7
    871a:	f85d 7b04 	ldr.w	r7, [sp], #4
    871e:	4770      	bx	lr

00008720 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    8720:	b480      	push	{r7}
    8722:	b083      	sub	sp, #12
    8724:	af00      	add	r7, sp, #0
    8726:	6078      	str	r0, [r7, #4]
    8728:	460b      	mov	r3, r1
    872a:	70fb      	strb	r3, [r7, #3]
    872c:	4613      	mov	r3, r2
    872e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8730:	78fb      	ldrb	r3, [r7, #3]
    8732:	687a      	ldr	r2, [r7, #4]
    8734:	3308      	adds	r3, #8
    8736:	015b      	lsls	r3, r3, #5
    8738:	4413      	add	r3, r2
    873a:	3305      	adds	r3, #5
    873c:	78ba      	ldrb	r2, [r7, #2]
    873e:	701a      	strb	r2, [r3, #0]
}
    8740:	bf00      	nop
    8742:	370c      	adds	r7, #12
    8744:	46bd      	mov	sp, r7
    8746:	f85d 7b04 	ldr.w	r7, [sp], #4
    874a:	4770      	bx	lr

0000874c <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    874c:	b480      	push	{r7}
    874e:	b083      	sub	sp, #12
    8750:	af00      	add	r7, sp, #0
    8752:	6078      	str	r0, [r7, #4]
    8754:	460b      	mov	r3, r1
    8756:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8758:	78fb      	ldrb	r3, [r7, #3]
    875a:	687a      	ldr	r2, [r7, #4]
    875c:	3308      	adds	r3, #8
    875e:	015b      	lsls	r3, r3, #5
    8760:	4413      	add	r3, r2
    8762:	3306      	adds	r3, #6
    8764:	781b      	ldrb	r3, [r3, #0]
    8766:	b2db      	uxtb	r3, r3
}
    8768:	4618      	mov	r0, r3
    876a:	370c      	adds	r7, #12
    876c:	46bd      	mov	sp, r7
    876e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8772:	4770      	bx	lr

00008774 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    8774:	b480      	push	{r7}
    8776:	b083      	sub	sp, #12
    8778:	af00      	add	r7, sp, #0
    877a:	6078      	str	r0, [r7, #4]
    877c:	460b      	mov	r3, r1
    877e:	70fb      	strb	r3, [r7, #3]
    8780:	4613      	mov	r3, r2
    8782:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8784:	78fb      	ldrb	r3, [r7, #3]
    8786:	687a      	ldr	r2, [r7, #4]
    8788:	3308      	adds	r3, #8
    878a:	015b      	lsls	r3, r3, #5
    878c:	4413      	add	r3, r2
    878e:	3304      	adds	r3, #4
    8790:	78ba      	ldrb	r2, [r7, #2]
    8792:	701a      	strb	r2, [r3, #0]
}
    8794:	bf00      	nop
    8796:	370c      	adds	r7, #12
    8798:	46bd      	mov	sp, r7
    879a:	f85d 7b04 	ldr.w	r7, [sp], #4
    879e:	4770      	bx	lr

000087a0 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    87a0:	b480      	push	{r7}
    87a2:	b083      	sub	sp, #12
    87a4:	af00      	add	r7, sp, #0
    87a6:	6078      	str	r0, [r7, #4]
    87a8:	460b      	mov	r3, r1
    87aa:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    87ac:	78fb      	ldrb	r3, [r7, #3]
    87ae:	687a      	ldr	r2, [r7, #4]
    87b0:	015b      	lsls	r3, r3, #5
    87b2:	4413      	add	r3, r2
    87b4:	f503 7384 	add.w	r3, r3, #264	; 0x108
    87b8:	2210      	movs	r2, #16
    87ba:	701a      	strb	r2, [r3, #0]
}
    87bc:	bf00      	nop
    87be:	370c      	adds	r7, #12
    87c0:	46bd      	mov	sp, r7
    87c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    87c6:	4770      	bx	lr

000087c8 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    87c8:	b480      	push	{r7}
    87ca:	b083      	sub	sp, #12
    87cc:	af00      	add	r7, sp, #0
    87ce:	6078      	str	r0, [r7, #4]
    87d0:	460b      	mov	r3, r1
    87d2:	70fb      	strb	r3, [r7, #3]
    87d4:	4613      	mov	r3, r2
    87d6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    87d8:	78fb      	ldrb	r3, [r7, #3]
    87da:	687a      	ldr	r2, [r7, #4]
    87dc:	015b      	lsls	r3, r3, #5
    87de:	4413      	add	r3, r2
    87e0:	f203 1309 	addw	r3, r3, #265	; 0x109
    87e4:	78ba      	ldrb	r2, [r7, #2]
    87e6:	701a      	strb	r2, [r3, #0]
}
    87e8:	bf00      	nop
    87ea:	370c      	adds	r7, #12
    87ec:	46bd      	mov	sp, r7
    87ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    87f2:	4770      	bx	lr

000087f4 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    87f4:	b480      	push	{r7}
    87f6:	b083      	sub	sp, #12
    87f8:	af00      	add	r7, sp, #0
    87fa:	6078      	str	r0, [r7, #4]
    87fc:	460b      	mov	r3, r1
    87fe:	70fb      	strb	r3, [r7, #3]
    8800:	4613      	mov	r3, r2
    8802:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8804:	78fb      	ldrb	r3, [r7, #3]
    8806:	687a      	ldr	r2, [r7, #4]
    8808:	015b      	lsls	r3, r3, #5
    880a:	4413      	add	r3, r2
    880c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8810:	78ba      	ldrb	r2, [r7, #2]
    8812:	701a      	strb	r2, [r3, #0]
}
    8814:	bf00      	nop
    8816:	370c      	adds	r7, #12
    8818:	46bd      	mov	sp, r7
    881a:	f85d 7b04 	ldr.w	r7, [sp], #4
    881e:	4770      	bx	lr

00008820 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8820:	b480      	push	{r7}
    8822:	b085      	sub	sp, #20
    8824:	af00      	add	r7, sp, #0
    8826:	6078      	str	r0, [r7, #4]
    8828:	460b      	mov	r3, r1
    882a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    882c:	78fb      	ldrb	r3, [r7, #3]
    882e:	687a      	ldr	r2, [r7, #4]
    8830:	3308      	adds	r3, #8
    8832:	015b      	lsls	r3, r3, #5
    8834:	4413      	add	r3, r2
    8836:	781b      	ldrb	r3, [r3, #0]
    8838:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    883a:	7bfb      	ldrb	r3, [r7, #15]
    883c:	f003 0307 	and.w	r3, r3, #7
    8840:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8842:	7bfb      	ldrb	r3, [r7, #15]
}
    8844:	4618      	mov	r0, r3
    8846:	3714      	adds	r7, #20
    8848:	46bd      	mov	sp, r7
    884a:	f85d 7b04 	ldr.w	r7, [sp], #4
    884e:	4770      	bx	lr

00008850 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8850:	b480      	push	{r7}
    8852:	b085      	sub	sp, #20
    8854:	af00      	add	r7, sp, #0
    8856:	6078      	str	r0, [r7, #4]
    8858:	460b      	mov	r3, r1
    885a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    885c:	78fb      	ldrb	r3, [r7, #3]
    885e:	687a      	ldr	r2, [r7, #4]
    8860:	3308      	adds	r3, #8
    8862:	015b      	lsls	r3, r3, #5
    8864:	4413      	add	r3, r2
    8866:	781b      	ldrb	r3, [r3, #0]
    8868:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    886a:	7bfb      	ldrb	r3, [r7, #15]
    886c:	091b      	lsrs	r3, r3, #4
    886e:	b2db      	uxtb	r3, r3
    8870:	f003 0307 	and.w	r3, r3, #7
    8874:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8876:	7bfb      	ldrb	r3, [r7, #15]
}
    8878:	4618      	mov	r0, r3
    887a:	3714      	adds	r7, #20
    887c:	46bd      	mov	sp, r7
    887e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8882:	4770      	bx	lr

00008884 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    8884:	b480      	push	{r7}
    8886:	b083      	sub	sp, #12
    8888:	af00      	add	r7, sp, #0
    888a:	6078      	str	r0, [r7, #4]
    888c:	460b      	mov	r3, r1
    888e:	70fb      	strb	r3, [r7, #3]
    8890:	4613      	mov	r3, r2
    8892:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8894:	78fb      	ldrb	r3, [r7, #3]
    8896:	687a      	ldr	r2, [r7, #4]
    8898:	3308      	adds	r3, #8
    889a:	015b      	lsls	r3, r3, #5
    889c:	4413      	add	r3, r2
    889e:	78ba      	ldrb	r2, [r7, #2]
    88a0:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    88a2:	bf00      	nop
    88a4:	370c      	adds	r7, #12
    88a6:	46bd      	mov	sp, r7
    88a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    88ac:	4770      	bx	lr

000088ae <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    88ae:	b480      	push	{r7}
    88b0:	b083      	sub	sp, #12
    88b2:	af00      	add	r7, sp, #0
    88b4:	6078      	str	r0, [r7, #4]
    88b6:	460b      	mov	r3, r1
    88b8:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    88ba:	78fb      	ldrb	r3, [r7, #3]
    88bc:	687a      	ldr	r2, [r7, #4]
    88be:	3308      	adds	r3, #8
    88c0:	015b      	lsls	r3, r3, #5
    88c2:	4413      	add	r3, r2
    88c4:	781b      	ldrb	r3, [r3, #0]
    88c6:	b2db      	uxtb	r3, r3
}
    88c8:	4618      	mov	r0, r3
    88ca:	370c      	adds	r7, #12
    88cc:	46bd      	mov	sp, r7
    88ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    88d2:	4770      	bx	lr

000088d4 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    88d4:	b480      	push	{r7}
    88d6:	b083      	sub	sp, #12
    88d8:	af00      	add	r7, sp, #0
    88da:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    88dc:	687b      	ldr	r3, [r7, #4]
    88de:	8b9b      	ldrh	r3, [r3, #28]
    88e0:	b29b      	uxth	r3, r3
}
    88e2:	4618      	mov	r0, r3
    88e4:	370c      	adds	r7, #12
    88e6:	46bd      	mov	sp, r7
    88e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    88ec:	4770      	bx	lr

000088ee <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    88ee:	b480      	push	{r7}
    88f0:	b083      	sub	sp, #12
    88f2:	af00      	add	r7, sp, #0
    88f4:	6078      	str	r0, [r7, #4]
    88f6:	460b      	mov	r3, r1
    88f8:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    88fa:	687b      	ldr	r3, [r7, #4]
    88fc:	887a      	ldrh	r2, [r7, #2]
    88fe:	839a      	strh	r2, [r3, #28]
}
    8900:	bf00      	nop
    8902:	370c      	adds	r7, #12
    8904:	46bd      	mov	sp, r7
    8906:	f85d 7b04 	ldr.w	r7, [sp], #4
    890a:	4770      	bx	lr

0000890c <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    890c:	b480      	push	{r7}
    890e:	b083      	sub	sp, #12
    8910:	af00      	add	r7, sp, #0
    8912:	6078      	str	r0, [r7, #4]
    8914:	460b      	mov	r3, r1
    8916:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8918:	687b      	ldr	r3, [r7, #4]
    891a:	887a      	ldrh	r2, [r7, #2]
    891c:	831a      	strh	r2, [r3, #24]
}
    891e:	bf00      	nop
    8920:	370c      	adds	r7, #12
    8922:	46bd      	mov	sp, r7
    8924:	f85d 7b04 	ldr.w	r7, [sp], #4
    8928:	4770      	bx	lr

0000892a <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    892a:	b480      	push	{r7}
    892c:	b083      	sub	sp, #12
    892e:	af00      	add	r7, sp, #0
    8930:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8932:	687b      	ldr	r3, [r7, #4]
    8934:	8b1b      	ldrh	r3, [r3, #24]
    8936:	b29b      	uxth	r3, r3
}
    8938:	4618      	mov	r0, r3
    893a:	370c      	adds	r7, #12
    893c:	46bd      	mov	sp, r7
    893e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8942:	4770      	bx	lr

00008944 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8944:	b480      	push	{r7}
    8946:	b083      	sub	sp, #12
    8948:	af00      	add	r7, sp, #0
    894a:	6078      	str	r0, [r7, #4]
    894c:	460b      	mov	r3, r1
    894e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8950:	687b      	ldr	r3, [r7, #4]
    8952:	887a      	ldrh	r2, [r7, #2]
    8954:	829a      	strh	r2, [r3, #20]
}
    8956:	bf00      	nop
    8958:	370c      	adds	r7, #12
    895a:	46bd      	mov	sp, r7
    895c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8960:	4770      	bx	lr

00008962 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    8962:	b480      	push	{r7}
    8964:	b085      	sub	sp, #20
    8966:	af00      	add	r7, sp, #0
    8968:	6078      	str	r0, [r7, #4]
    896a:	460b      	mov	r3, r1
    896c:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    896e:	687b      	ldr	r3, [r7, #4]
    8970:	789b      	ldrb	r3, [r3, #2]
    8972:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8974:	7bfa      	ldrb	r2, [r7, #15]
    8976:	78fb      	ldrb	r3, [r7, #3]
    8978:	4013      	ands	r3, r2
    897a:	73fb      	strb	r3, [r7, #15]
	return tmp;
    897c:	7bfb      	ldrb	r3, [r7, #15]
}
    897e:	4618      	mov	r0, r3
    8980:	3714      	adds	r7, #20
    8982:	46bd      	mov	sp, r7
    8984:	f85d 7b04 	ldr.w	r7, [sp], #4
    8988:	4770      	bx	lr
	...

0000898c <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    898c:	b580      	push	{r7, lr}
    898e:	b082      	sub	sp, #8
    8990:	af00      	add	r7, sp, #0
    8992:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8994:	687b      	ldr	r3, [r7, #4]
    8996:	781b      	ldrb	r3, [r3, #0]
    8998:	b2db      	uxtb	r3, r3
    899a:	f023 0302 	bic.w	r3, r3, #2
    899e:	b2da      	uxtb	r2, r3
    89a0:	687b      	ldr	r3, [r7, #4]
    89a2:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    89a4:	2103      	movs	r1, #3
    89a6:	6878      	ldr	r0, [r7, #4]
    89a8:	4b02      	ldr	r3, [pc, #8]	; (89b4 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    89aa:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    89ac:	bf00      	nop
    89ae:	3708      	adds	r7, #8
    89b0:	46bd      	mov	sp, r7
    89b2:	bd80      	pop	{r7, pc}
    89b4:	0000863f 	.word	0x0000863f

000089b8 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    89b8:	b580      	push	{r7, lr}
    89ba:	b084      	sub	sp, #16
    89bc:	af00      	add	r7, sp, #0
    89be:	6078      	str	r0, [r7, #4]
    89c0:	460b      	mov	r3, r1
    89c2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    89c4:	2103      	movs	r1, #3
    89c6:	6878      	ldr	r0, [r7, #4]
    89c8:	4b06      	ldr	r3, [pc, #24]	; (89e4 <hri_usb_get_CTRLA_reg+0x2c>)
    89ca:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    89cc:	687b      	ldr	r3, [r7, #4]
    89ce:	781b      	ldrb	r3, [r3, #0]
    89d0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    89d2:	7bfa      	ldrb	r2, [r7, #15]
    89d4:	78fb      	ldrb	r3, [r7, #3]
    89d6:	4013      	ands	r3, r2
    89d8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    89da:	7bfb      	ldrb	r3, [r7, #15]
}
    89dc:	4618      	mov	r0, r3
    89de:	3710      	adds	r7, #16
    89e0:	46bd      	mov	sp, r7
    89e2:	bd80      	pop	{r7, pc}
    89e4:	0000863f 	.word	0x0000863f

000089e8 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    89e8:	b580      	push	{r7, lr}
    89ea:	b082      	sub	sp, #8
    89ec:	af00      	add	r7, sp, #0
    89ee:	6078      	str	r0, [r7, #4]
    89f0:	460b      	mov	r3, r1
    89f2:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    89f4:	687b      	ldr	r3, [r7, #4]
    89f6:	78fa      	ldrb	r2, [r7, #3]
    89f8:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    89fa:	2103      	movs	r1, #3
    89fc:	6878      	ldr	r0, [r7, #4]
    89fe:	4b03      	ldr	r3, [pc, #12]	; (8a0c <hri_usb_write_CTRLA_reg+0x24>)
    8a00:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8a02:	bf00      	nop
    8a04:	3708      	adds	r7, #8
    8a06:	46bd      	mov	sp, r7
    8a08:	bd80      	pop	{r7, pc}
    8a0a:	bf00      	nop
    8a0c:	0000863f 	.word	0x0000863f

00008a10 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    8a10:	b580      	push	{r7, lr}
    8a12:	b082      	sub	sp, #8
    8a14:	af00      	add	r7, sp, #0
    8a16:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8a18:	2103      	movs	r1, #3
    8a1a:	6878      	ldr	r0, [r7, #4]
    8a1c:	4b04      	ldr	r3, [pc, #16]	; (8a30 <hri_usb_read_CTRLA_reg+0x20>)
    8a1e:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8a20:	687b      	ldr	r3, [r7, #4]
    8a22:	781b      	ldrb	r3, [r3, #0]
    8a24:	b2db      	uxtb	r3, r3
}
    8a26:	4618      	mov	r0, r3
    8a28:	3708      	adds	r7, #8
    8a2a:	46bd      	mov	sp, r7
    8a2c:	bd80      	pop	{r7, pc}
    8a2e:	bf00      	nop
    8a30:	0000863f 	.word	0x0000863f

00008a34 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    8a34:	b480      	push	{r7}
    8a36:	b083      	sub	sp, #12
    8a38:	af00      	add	r7, sp, #0
    8a3a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8a3c:	687b      	ldr	r3, [r7, #4]
    8a3e:	891b      	ldrh	r3, [r3, #8]
    8a40:	b29b      	uxth	r3, r3
    8a42:	f023 0301 	bic.w	r3, r3, #1
    8a46:	b29a      	uxth	r2, r3
    8a48:	687b      	ldr	r3, [r7, #4]
    8a4a:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8a4c:	bf00      	nop
    8a4e:	370c      	adds	r7, #12
    8a50:	46bd      	mov	sp, r7
    8a52:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a56:	4770      	bx	lr

00008a58 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    8a58:	b480      	push	{r7}
    8a5a:	b083      	sub	sp, #12
    8a5c:	af00      	add	r7, sp, #0
    8a5e:	6078      	str	r0, [r7, #4]
    8a60:	460b      	mov	r3, r1
    8a62:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8a64:	687b      	ldr	r3, [r7, #4]
    8a66:	887a      	ldrh	r2, [r7, #2]
    8a68:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8a6a:	bf00      	nop
    8a6c:	370c      	adds	r7, #12
    8a6e:	46bd      	mov	sp, r7
    8a70:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a74:	4770      	bx	lr

00008a76 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    8a76:	b480      	push	{r7}
    8a78:	b083      	sub	sp, #12
    8a7a:	af00      	add	r7, sp, #0
    8a7c:	6078      	str	r0, [r7, #4]
    8a7e:	460b      	mov	r3, r1
    8a80:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8a82:	687b      	ldr	r3, [r7, #4]
    8a84:	78fa      	ldrb	r2, [r7, #3]
    8a86:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    8a88:	bf00      	nop
    8a8a:	370c      	adds	r7, #12
    8a8c:	46bd      	mov	sp, r7
    8a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a92:	4770      	bx	lr

00008a94 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    8a94:	b480      	push	{r7}
    8a96:	b083      	sub	sp, #12
    8a98:	af00      	add	r7, sp, #0
    8a9a:	6078      	str	r0, [r7, #4]
    8a9c:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    8a9e:	687b      	ldr	r3, [r7, #4]
    8aa0:	683a      	ldr	r2, [r7, #0]
    8aa2:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    8aa4:	bf00      	nop
    8aa6:	370c      	adds	r7, #12
    8aa8:	46bd      	mov	sp, r7
    8aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    8aae:	4770      	bx	lr

00008ab0 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    8ab0:	b480      	push	{r7}
    8ab2:	b083      	sub	sp, #12
    8ab4:	af00      	add	r7, sp, #0
    8ab6:	6078      	str	r0, [r7, #4]
    8ab8:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    8aba:	2300      	movs	r3, #0
}
    8abc:	4618      	mov	r0, r3
    8abe:	370c      	adds	r7, #12
    8ac0:	46bd      	mov	sp, r7
    8ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ac6:	4770      	bx	lr

00008ac8 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    8ac8:	b480      	push	{r7}
    8aca:	b085      	sub	sp, #20
    8acc:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    8ace:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8ad2:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8ad4:	4b28      	ldr	r3, [pc, #160]	; (8b78 <_usb_load_calib+0xb0>)
    8ad6:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    8ad8:	f003 031f 	and.w	r3, r3, #31
    8adc:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    8ade:	4b26      	ldr	r3, [pc, #152]	; (8b78 <_usb_load_calib+0xb0>)
    8ae0:	681b      	ldr	r3, [r3, #0]
    8ae2:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    8ae4:	f003 031f 	and.w	r3, r3, #31
    8ae8:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8aea:	4b23      	ldr	r3, [pc, #140]	; (8b78 <_usb_load_calib+0xb0>)
    8aec:	681b      	ldr	r3, [r3, #0]
    8aee:	0a9b      	lsrs	r3, r3, #10
    8af0:	f003 0307 	and.w	r3, r3, #7
    8af4:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8af6:	68fb      	ldr	r3, [r7, #12]
    8af8:	2b00      	cmp	r3, #0
    8afa:	d002      	beq.n	8b02 <_usb_load_calib+0x3a>
    8afc:	68fb      	ldr	r3, [r7, #12]
    8afe:	2b1f      	cmp	r3, #31
    8b00:	d101      	bne.n	8b06 <_usb_load_calib+0x3e>
		pad_transn = 9;
    8b02:	2309      	movs	r3, #9
    8b04:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8b06:	68bb      	ldr	r3, [r7, #8]
    8b08:	2b00      	cmp	r3, #0
    8b0a:	d002      	beq.n	8b12 <_usb_load_calib+0x4a>
    8b0c:	68bb      	ldr	r3, [r7, #8]
    8b0e:	2b1f      	cmp	r3, #31
    8b10:	d101      	bne.n	8b16 <_usb_load_calib+0x4e>
		pad_transp = 25;
    8b12:	2319      	movs	r3, #25
    8b14:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    8b16:	687b      	ldr	r3, [r7, #4]
    8b18:	2b00      	cmp	r3, #0
    8b1a:	d002      	beq.n	8b22 <_usb_load_calib+0x5a>
    8b1c:	687b      	ldr	r3, [r7, #4]
    8b1e:	2b07      	cmp	r3, #7
    8b20:	d101      	bne.n	8b26 <_usb_load_calib+0x5e>
		pad_trim = 6;
    8b22:	2306      	movs	r3, #6
    8b24:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8b26:	68fb      	ldr	r3, [r7, #12]
    8b28:	b29b      	uxth	r3, r3
    8b2a:	019b      	lsls	r3, r3, #6
    8b2c:	b29b      	uxth	r3, r3
    8b2e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    8b32:	b29a      	uxth	r2, r3
    8b34:	68bb      	ldr	r3, [r7, #8]
    8b36:	b29b      	uxth	r3, r3
    8b38:	f003 031f 	and.w	r3, r3, #31
    8b3c:	b29b      	uxth	r3, r3
    8b3e:	4313      	orrs	r3, r2
    8b40:	b29a      	uxth	r2, r3
    8b42:	687b      	ldr	r3, [r7, #4]
    8b44:	b29b      	uxth	r3, r3
    8b46:	031b      	lsls	r3, r3, #12
    8b48:	b29b      	uxth	r3, r3
    8b4a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    8b4e:	b29b      	uxth	r3, r3
    8b50:	4313      	orrs	r3, r2
    8b52:	b29a      	uxth	r2, r3
    8b54:	683b      	ldr	r3, [r7, #0]
    8b56:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    8b58:	683a      	ldr	r2, [r7, #0]
    8b5a:	78d3      	ldrb	r3, [r2, #3]
    8b5c:	f043 0303 	orr.w	r3, r3, #3
    8b60:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8b62:	683a      	ldr	r2, [r7, #0]
    8b64:	78d3      	ldrb	r3, [r2, #3]
    8b66:	f043 030c 	orr.w	r3, r3, #12
    8b6a:	70d3      	strb	r3, [r2, #3]
}
    8b6c:	bf00      	nop
    8b6e:	3714      	adds	r7, #20
    8b70:	46bd      	mov	sp, r7
    8b72:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b76:	4770      	bx	lr
    8b78:	00800084 	.word	0x00800084

00008b7c <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    8b7c:	b580      	push	{r7, lr}
    8b7e:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    8b80:	bf00      	nop
    8b82:	2203      	movs	r2, #3
    8b84:	2100      	movs	r1, #0
    8b86:	4804      	ldr	r0, [pc, #16]	; (8b98 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    8b88:	4b04      	ldr	r3, [pc, #16]	; (8b9c <_usb_d_dev_wait_dpll_rdy+0x20>)
    8b8a:	4798      	blx	r3
    8b8c:	4603      	mov	r3, r0
    8b8e:	2b03      	cmp	r3, #3
    8b90:	d1f7      	bne.n	8b82 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    8b92:	bf00      	nop
    8b94:	bd80      	pop	{r7, pc}
    8b96:	bf00      	nop
    8b98:	40001000 	.word	0x40001000
    8b9c:	000085b1 	.word	0x000085b1

00008ba0 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    8ba0:	b580      	push	{r7, lr}
    8ba2:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8ba4:	480e      	ldr	r0, [pc, #56]	; (8be0 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8ba6:	4b0f      	ldr	r3, [pc, #60]	; (8be4 <_usb_d_dev_wait_dfll_rdy+0x44>)
    8ba8:	4798      	blx	r3
    8baa:	4603      	mov	r3, r0
    8bac:	2b00      	cmp	r3, #0
    8bae:	d00a      	beq.n	8bc6 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8bb0:	bf00      	nop
    8bb2:	f44f 6110 	mov.w	r1, #2304	; 0x900
    8bb6:	480a      	ldr	r0, [pc, #40]	; (8be0 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8bb8:	4b0b      	ldr	r3, [pc, #44]	; (8be8 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8bba:	4798      	blx	r3
    8bbc:	4603      	mov	r3, r0
    8bbe:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8bc2:	d1f6      	bne.n	8bb2 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    8bc4:	e009      	b.n	8bda <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8bc6:	bf00      	nop
    8bc8:	f44f 7180 	mov.w	r1, #256	; 0x100
    8bcc:	4804      	ldr	r0, [pc, #16]	; (8be0 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8bce:	4b06      	ldr	r3, [pc, #24]	; (8be8 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8bd0:	4798      	blx	r3
    8bd2:	4603      	mov	r3, r0
    8bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8bd8:	d1f6      	bne.n	8bc8 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    8bda:	bf00      	nop
    8bdc:	bd80      	pop	{r7, pc}
    8bde:	bf00      	nop
    8be0:	40001000 	.word	0x40001000
    8be4:	0000860f 	.word	0x0000860f
    8be8:	000085e9 	.word	0x000085e9

00008bec <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    8bec:	b580      	push	{r7, lr}
    8bee:	b082      	sub	sp, #8
    8bf0:	af00      	add	r7, sp, #0
    8bf2:	4603      	mov	r3, r0
    8bf4:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    8bf6:	79fb      	ldrb	r3, [r7, #7]
    8bf8:	2b00      	cmp	r3, #0
    8bfa:	d102      	bne.n	8c02 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    8bfc:	4b05      	ldr	r3, [pc, #20]	; (8c14 <_usb_d_dev_wait_clk_rdy+0x28>)
    8bfe:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8c00:	e004      	b.n	8c0c <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    8c02:	79fb      	ldrb	r3, [r7, #7]
    8c04:	2b01      	cmp	r3, #1
    8c06:	d101      	bne.n	8c0c <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    8c08:	4b03      	ldr	r3, [pc, #12]	; (8c18 <_usb_d_dev_wait_clk_rdy+0x2c>)
    8c0a:	4798      	blx	r3
}
    8c0c:	bf00      	nop
    8c0e:	3708      	adds	r7, #8
    8c10:	46bd      	mov	sp, r7
    8c12:	bd80      	pop	{r7, pc}
    8c14:	00008ba1 	.word	0x00008ba1
    8c18:	00008b7d 	.word	0x00008b7d

00008c1c <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    8c1c:	b580      	push	{r7, lr}
    8c1e:	b082      	sub	sp, #8
    8c20:	af00      	add	r7, sp, #0
    8c22:	4603      	mov	r3, r0
    8c24:	6039      	str	r1, [r7, #0]
    8c26:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    8c28:	683b      	ldr	r3, [r7, #0]
    8c2a:	b2da      	uxtb	r2, r3
    8c2c:	79fb      	ldrb	r3, [r7, #7]
    8c2e:	4619      	mov	r1, r3
    8c30:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c34:	4b02      	ldr	r3, [pc, #8]	; (8c40 <_usbd_ep_int_ack+0x24>)
    8c36:	4798      	blx	r3
}
    8c38:	bf00      	nop
    8c3a:	3708      	adds	r7, #8
    8c3c:	46bd      	mov	sp, r7
    8c3e:	bd80      	pop	{r7, pc}
    8c40:	000086f5 	.word	0x000086f5

00008c44 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    8c44:	b580      	push	{r7, lr}
    8c46:	b082      	sub	sp, #8
    8c48:	af00      	add	r7, sp, #0
    8c4a:	4603      	mov	r3, r0
    8c4c:	6039      	str	r1, [r7, #0]
    8c4e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8c50:	683b      	ldr	r3, [r7, #0]
    8c52:	b2da      	uxtb	r2, r3
    8c54:	79fb      	ldrb	r3, [r7, #7]
    8c56:	4619      	mov	r1, r3
    8c58:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c5c:	4b02      	ldr	r3, [pc, #8]	; (8c68 <_usbd_ep_int_en+0x24>)
    8c5e:	4798      	blx	r3
}
    8c60:	bf00      	nop
    8c62:	3708      	adds	r7, #8
    8c64:	46bd      	mov	sp, r7
    8c66:	bd80      	pop	{r7, pc}
    8c68:	000087c9 	.word	0x000087c9

00008c6c <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    8c6c:	b580      	push	{r7, lr}
    8c6e:	b082      	sub	sp, #8
    8c70:	af00      	add	r7, sp, #0
    8c72:	4603      	mov	r3, r0
    8c74:	6039      	str	r1, [r7, #0]
    8c76:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8c78:	683b      	ldr	r3, [r7, #0]
    8c7a:	b2da      	uxtb	r2, r3
    8c7c:	79fb      	ldrb	r3, [r7, #7]
    8c7e:	4619      	mov	r1, r3
    8c80:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c84:	4b02      	ldr	r3, [pc, #8]	; (8c90 <_usbd_ep_int_dis+0x24>)
    8c86:	4798      	blx	r3
}
    8c88:	bf00      	nop
    8c8a:	3708      	adds	r7, #8
    8c8c:	46bd      	mov	sp, r7
    8c8e:	bd80      	pop	{r7, pc}
    8c90:	000087f5 	.word	0x000087f5

00008c94 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    8c94:	b580      	push	{r7, lr}
    8c96:	b082      	sub	sp, #8
    8c98:	af00      	add	r7, sp, #0
    8c9a:	4603      	mov	r3, r0
    8c9c:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    8c9e:	79fb      	ldrb	r3, [r7, #7]
    8ca0:	4619      	mov	r1, r3
    8ca2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ca6:	4b06      	ldr	r3, [pc, #24]	; (8cc0 <_usbd_ep_is_ctrl+0x2c>)
    8ca8:	4798      	blx	r3
    8caa:	4603      	mov	r3, r0
    8cac:	2b11      	cmp	r3, #17
    8cae:	bf0c      	ite	eq
    8cb0:	2301      	moveq	r3, #1
    8cb2:	2300      	movne	r3, #0
    8cb4:	b2db      	uxtb	r3, r3
}
    8cb6:	4618      	mov	r0, r3
    8cb8:	3708      	adds	r7, #8
    8cba:	46bd      	mov	sp, r7
    8cbc:	bd80      	pop	{r7, pc}
    8cbe:	bf00      	nop
    8cc0:	000088af 	.word	0x000088af

00008cc4 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    8cc4:	b580      	push	{r7, lr}
    8cc6:	b082      	sub	sp, #8
    8cc8:	af00      	add	r7, sp, #0
    8cca:	4603      	mov	r3, r0
    8ccc:	71fb      	strb	r3, [r7, #7]
    8cce:	460b      	mov	r3, r1
    8cd0:	71bb      	strb	r3, [r7, #6]
    8cd2:	4613      	mov	r3, r2
    8cd4:	717b      	strb	r3, [r7, #5]
	if (st) {
    8cd6:	797b      	ldrb	r3, [r7, #5]
    8cd8:	2b00      	cmp	r3, #0
    8cda:	d00b      	beq.n	8cf4 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8cdc:	79bb      	ldrb	r3, [r7, #6]
    8cde:	2210      	movs	r2, #16
    8ce0:	fa02 f303 	lsl.w	r3, r2, r3
    8ce4:	b2da      	uxtb	r2, r3
    8ce6:	79fb      	ldrb	r3, [r7, #7]
    8ce8:	4619      	mov	r1, r3
    8cea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8cee:	4b09      	ldr	r3, [pc, #36]	; (8d14 <_usbd_ep_set_stall+0x50>)
    8cf0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    8cf2:	e00a      	b.n	8d0a <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8cf4:	79bb      	ldrb	r3, [r7, #6]
    8cf6:	2210      	movs	r2, #16
    8cf8:	fa02 f303 	lsl.w	r3, r2, r3
    8cfc:	b2da      	uxtb	r2, r3
    8cfe:	79fb      	ldrb	r3, [r7, #7]
    8d00:	4619      	mov	r1, r3
    8d02:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d06:	4b04      	ldr	r3, [pc, #16]	; (8d18 <_usbd_ep_set_stall+0x54>)
    8d08:	4798      	blx	r3
}
    8d0a:	bf00      	nop
    8d0c:	3708      	adds	r7, #8
    8d0e:	46bd      	mov	sp, r7
    8d10:	bd80      	pop	{r7, pc}
    8d12:	bf00      	nop
    8d14:	00008721 	.word	0x00008721
    8d18:	00008775 	.word	0x00008775

00008d1c <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8d1c:	b580      	push	{r7, lr}
    8d1e:	b084      	sub	sp, #16
    8d20:	af00      	add	r7, sp, #0
    8d22:	4603      	mov	r3, r0
    8d24:	460a      	mov	r2, r1
    8d26:	71fb      	strb	r3, [r7, #7]
    8d28:	4613      	mov	r3, r2
    8d2a:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8d2c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8d30:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8d32:	79fb      	ldrb	r3, [r7, #7]
    8d34:	4619      	mov	r1, r3
    8d36:	68f8      	ldr	r0, [r7, #12]
    8d38:	4b08      	ldr	r3, [pc, #32]	; (8d5c <_usbd_ep_is_stalled+0x40>)
    8d3a:	4798      	blx	r3
    8d3c:	4603      	mov	r3, r0
    8d3e:	4619      	mov	r1, r3
    8d40:	79bb      	ldrb	r3, [r7, #6]
    8d42:	2210      	movs	r2, #16
    8d44:	fa02 f303 	lsl.w	r3, r2, r3
    8d48:	400b      	ands	r3, r1
    8d4a:	2b00      	cmp	r3, #0
    8d4c:	bf14      	ite	ne
    8d4e:	2301      	movne	r3, #1
    8d50:	2300      	moveq	r3, #0
    8d52:	b2db      	uxtb	r3, r3
}
    8d54:	4618      	mov	r0, r3
    8d56:	3710      	adds	r7, #16
    8d58:	46bd      	mov	sp, r7
    8d5a:	bd80      	pop	{r7, pc}
    8d5c:	0000874d 	.word	0x0000874d

00008d60 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    8d60:	b580      	push	{r7, lr}
    8d62:	b084      	sub	sp, #16
    8d64:	af00      	add	r7, sp, #0
    8d66:	4603      	mov	r3, r0
    8d68:	460a      	mov	r2, r1
    8d6a:	71fb      	strb	r3, [r7, #7]
    8d6c:	4613      	mov	r3, r2
    8d6e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8d70:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8d74:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8d76:	79fb      	ldrb	r3, [r7, #7]
    8d78:	4619      	mov	r1, r3
    8d7a:	68f8      	ldr	r0, [r7, #12]
    8d7c:	4b08      	ldr	r3, [pc, #32]	; (8da0 <_usbd_ep_is_stall_sent+0x40>)
    8d7e:	4798      	blx	r3
    8d80:	4603      	mov	r3, r0
    8d82:	4619      	mov	r1, r3
    8d84:	79bb      	ldrb	r3, [r7, #6]
    8d86:	2220      	movs	r2, #32
    8d88:	fa02 f303 	lsl.w	r3, r2, r3
    8d8c:	400b      	ands	r3, r1
    8d8e:	2b00      	cmp	r3, #0
    8d90:	bf14      	ite	ne
    8d92:	2301      	movne	r3, #1
    8d94:	2300      	moveq	r3, #0
    8d96:	b2db      	uxtb	r3, r3
}
    8d98:	4618      	mov	r0, r3
    8d9a:	3710      	adds	r7, #16
    8d9c:	46bd      	mov	sp, r7
    8d9e:	bd80      	pop	{r7, pc}
    8da0:	000086cd 	.word	0x000086cd

00008da4 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    8da4:	b580      	push	{r7, lr}
    8da6:	b082      	sub	sp, #8
    8da8:	af00      	add	r7, sp, #0
    8daa:	4603      	mov	r3, r0
    8dac:	460a      	mov	r2, r1
    8dae:	71fb      	strb	r3, [r7, #7]
    8db0:	4613      	mov	r3, r2
    8db2:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8db4:	79bb      	ldrb	r3, [r7, #6]
    8db6:	2220      	movs	r2, #32
    8db8:	409a      	lsls	r2, r3
    8dba:	79fb      	ldrb	r3, [r7, #7]
    8dbc:	4611      	mov	r1, r2
    8dbe:	4618      	mov	r0, r3
    8dc0:	4b02      	ldr	r3, [pc, #8]	; (8dcc <_usbd_ep_ack_stall+0x28>)
    8dc2:	4798      	blx	r3
}
    8dc4:	bf00      	nop
    8dc6:	3708      	adds	r7, #8
    8dc8:	46bd      	mov	sp, r7
    8dca:	bd80      	pop	{r7, pc}
    8dcc:	00008c1d 	.word	0x00008c1d

00008dd0 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8dd0:	b580      	push	{r7, lr}
    8dd2:	b082      	sub	sp, #8
    8dd4:	af00      	add	r7, sp, #0
    8dd6:	4603      	mov	r3, r0
    8dd8:	71fb      	strb	r3, [r7, #7]
    8dda:	460b      	mov	r3, r1
    8ddc:	71bb      	strb	r3, [r7, #6]
    8dde:	4613      	mov	r3, r2
    8de0:	717b      	strb	r3, [r7, #5]
	if (en) {
    8de2:	797b      	ldrb	r3, [r7, #5]
    8de4:	2b00      	cmp	r3, #0
    8de6:	d008      	beq.n	8dfa <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8de8:	79bb      	ldrb	r3, [r7, #6]
    8dea:	2220      	movs	r2, #32
    8dec:	409a      	lsls	r2, r3
    8dee:	79fb      	ldrb	r3, [r7, #7]
    8df0:	4611      	mov	r1, r2
    8df2:	4618      	mov	r0, r3
    8df4:	4b07      	ldr	r3, [pc, #28]	; (8e14 <_usbd_ep_int_stall_en+0x44>)
    8df6:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8df8:	e007      	b.n	8e0a <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8dfa:	79bb      	ldrb	r3, [r7, #6]
    8dfc:	2220      	movs	r2, #32
    8dfe:	409a      	lsls	r2, r3
    8e00:	79fb      	ldrb	r3, [r7, #7]
    8e02:	4611      	mov	r1, r2
    8e04:	4618      	mov	r0, r3
    8e06:	4b04      	ldr	r3, [pc, #16]	; (8e18 <_usbd_ep_int_stall_en+0x48>)
    8e08:	4798      	blx	r3
}
    8e0a:	bf00      	nop
    8e0c:	3708      	adds	r7, #8
    8e0e:	46bd      	mov	sp, r7
    8e10:	bd80      	pop	{r7, pc}
    8e12:	bf00      	nop
    8e14:	00008c45 	.word	0x00008c45
    8e18:	00008c6d 	.word	0x00008c6d

00008e1c <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8e1c:	b580      	push	{r7, lr}
    8e1e:	b082      	sub	sp, #8
    8e20:	af00      	add	r7, sp, #0
    8e22:	4603      	mov	r3, r0
    8e24:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    8e26:	79fb      	ldrb	r3, [r7, #7]
    8e28:	4619      	mov	r1, r3
    8e2a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e2e:	4b03      	ldr	r3, [pc, #12]	; (8e3c <_usbd_ep_stop_setup+0x20>)
    8e30:	4798      	blx	r3
}
    8e32:	bf00      	nop
    8e34:	3708      	adds	r7, #8
    8e36:	46bd      	mov	sp, r7
    8e38:	bd80      	pop	{r7, pc}
    8e3a:	bf00      	nop
    8e3c:	000087a1 	.word	0x000087a1

00008e40 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8e40:	b580      	push	{r7, lr}
    8e42:	b082      	sub	sp, #8
    8e44:	af00      	add	r7, sp, #0
    8e46:	4603      	mov	r3, r0
    8e48:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8e4a:	79fb      	ldrb	r3, [r7, #7]
    8e4c:	2210      	movs	r2, #16
    8e4e:	4619      	mov	r1, r3
    8e50:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e54:	4b05      	ldr	r3, [pc, #20]	; (8e6c <_usbd_ep_is_setup+0x2c>)
    8e56:	4798      	blx	r3
    8e58:	4603      	mov	r3, r0
    8e5a:	2b00      	cmp	r3, #0
    8e5c:	bf14      	ite	ne
    8e5e:	2301      	movne	r3, #1
    8e60:	2300      	moveq	r3, #0
    8e62:	b2db      	uxtb	r3, r3
}
    8e64:	4618      	mov	r0, r3
    8e66:	3708      	adds	r7, #8
    8e68:	46bd      	mov	sp, r7
    8e6a:	bd80      	pop	{r7, pc}
    8e6c:	00008697 	.word	0x00008697

00008e70 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    8e70:	b580      	push	{r7, lr}
    8e72:	b082      	sub	sp, #8
    8e74:	af00      	add	r7, sp, #0
    8e76:	4603      	mov	r3, r0
    8e78:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8e7a:	79fb      	ldrb	r3, [r7, #7]
    8e7c:	2110      	movs	r1, #16
    8e7e:	4618      	mov	r0, r3
    8e80:	4b02      	ldr	r3, [pc, #8]	; (8e8c <_usbd_ep_ack_setup+0x1c>)
    8e82:	4798      	blx	r3
}
    8e84:	bf00      	nop
    8e86:	3708      	adds	r7, #8
    8e88:	46bd      	mov	sp, r7
    8e8a:	bd80      	pop	{r7, pc}
    8e8c:	00008c1d 	.word	0x00008c1d

00008e90 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    8e90:	b580      	push	{r7, lr}
    8e92:	b082      	sub	sp, #8
    8e94:	af00      	add	r7, sp, #0
    8e96:	4603      	mov	r3, r0
    8e98:	71fb      	strb	r3, [r7, #7]
    8e9a:	460b      	mov	r3, r1
    8e9c:	71bb      	strb	r3, [r7, #6]
    8e9e:	4613      	mov	r3, r2
    8ea0:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    8ea2:	797b      	ldrb	r3, [r7, #5]
    8ea4:	2b00      	cmp	r3, #0
    8ea6:	d00b      	beq.n	8ec0 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8ea8:	79bb      	ldrb	r3, [r7, #6]
    8eaa:	2201      	movs	r2, #1
    8eac:	fa02 f303 	lsl.w	r3, r2, r3
    8eb0:	b2da      	uxtb	r2, r3
    8eb2:	79fb      	ldrb	r3, [r7, #7]
    8eb4:	4619      	mov	r1, r3
    8eb6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8eba:	4b09      	ldr	r3, [pc, #36]	; (8ee0 <_usbd_ep_set_toggle+0x50>)
    8ebc:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    8ebe:	e00a      	b.n	8ed6 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8ec0:	79bb      	ldrb	r3, [r7, #6]
    8ec2:	2201      	movs	r2, #1
    8ec4:	fa02 f303 	lsl.w	r3, r2, r3
    8ec8:	b2da      	uxtb	r2, r3
    8eca:	79fb      	ldrb	r3, [r7, #7]
    8ecc:	4619      	mov	r1, r3
    8ece:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ed2:	4b04      	ldr	r3, [pc, #16]	; (8ee4 <_usbd_ep_set_toggle+0x54>)
    8ed4:	4798      	blx	r3
}
    8ed6:	bf00      	nop
    8ed8:	3708      	adds	r7, #8
    8eda:	46bd      	mov	sp, r7
    8edc:	bd80      	pop	{r7, pc}
    8ede:	bf00      	nop
    8ee0:	00008721 	.word	0x00008721
    8ee4:	00008775 	.word	0x00008775

00008ee8 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    8ee8:	b580      	push	{r7, lr}
    8eea:	b082      	sub	sp, #8
    8eec:	af00      	add	r7, sp, #0
    8eee:	4603      	mov	r3, r0
    8ef0:	460a      	mov	r2, r1
    8ef2:	71fb      	strb	r3, [r7, #7]
    8ef4:	4613      	mov	r3, r2
    8ef6:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    8ef8:	79bb      	ldrb	r3, [r7, #6]
    8efa:	2201      	movs	r2, #1
    8efc:	409a      	lsls	r2, r3
    8efe:	79fb      	ldrb	r3, [r7, #7]
    8f00:	4611      	mov	r1, r2
    8f02:	4618      	mov	r0, r3
    8f04:	4b02      	ldr	r3, [pc, #8]	; (8f10 <_usbd_ep_ack_io_cpt+0x28>)
    8f06:	4798      	blx	r3
}
    8f08:	bf00      	nop
    8f0a:	3708      	adds	r7, #8
    8f0c:	46bd      	mov	sp, r7
    8f0e:	bd80      	pop	{r7, pc}
    8f10:	00008c1d 	.word	0x00008c1d

00008f14 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    8f14:	b480      	push	{r7}
    8f16:	b085      	sub	sp, #20
    8f18:	af00      	add	r7, sp, #0
    8f1a:	4603      	mov	r3, r0
    8f1c:	603a      	str	r2, [r7, #0]
    8f1e:	71fb      	strb	r3, [r7, #7]
    8f20:	460b      	mov	r3, r1
    8f22:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8f24:	79fa      	ldrb	r2, [r7, #7]
    8f26:	79bb      	ldrb	r3, [r7, #6]
    8f28:	0052      	lsls	r2, r2, #1
    8f2a:	4413      	add	r3, r2
    8f2c:	011b      	lsls	r3, r3, #4
    8f2e:	4a06      	ldr	r2, [pc, #24]	; (8f48 <_usbd_ep_set_buf+0x34>)
    8f30:	4413      	add	r3, r2
    8f32:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    8f34:	68fb      	ldr	r3, [r7, #12]
    8f36:	683a      	ldr	r2, [r7, #0]
    8f38:	601a      	str	r2, [r3, #0]
}
    8f3a:	bf00      	nop
    8f3c:	3714      	adds	r7, #20
    8f3e:	46bd      	mov	sp, r7
    8f40:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f44:	4770      	bx	lr
    8f46:	bf00      	nop
    8f48:	20000df0 	.word	0x20000df0

00008f4c <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8f4c:	b480      	push	{r7}
    8f4e:	b085      	sub	sp, #20
    8f50:	af00      	add	r7, sp, #0
    8f52:	4603      	mov	r3, r0
    8f54:	71fb      	strb	r3, [r7, #7]
    8f56:	460b      	mov	r3, r1
    8f58:	71bb      	strb	r3, [r7, #6]
    8f5a:	4613      	mov	r3, r2
    8f5c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8f5e:	79fa      	ldrb	r2, [r7, #7]
    8f60:	79bb      	ldrb	r3, [r7, #6]
    8f62:	0052      	lsls	r2, r2, #1
    8f64:	4413      	add	r3, r2
    8f66:	011b      	lsls	r3, r3, #4
    8f68:	4a08      	ldr	r2, [pc, #32]	; (8f8c <_usbd_ep_set_in_count+0x40>)
    8f6a:	4413      	add	r3, r2
    8f6c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8f6e:	88bb      	ldrh	r3, [r7, #4]
    8f70:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8f74:	b299      	uxth	r1, r3
    8f76:	68fa      	ldr	r2, [r7, #12]
    8f78:	6853      	ldr	r3, [r2, #4]
    8f7a:	f361 339b 	bfi	r3, r1, #14, #14
    8f7e:	6053      	str	r3, [r2, #4]
}
    8f80:	bf00      	nop
    8f82:	3714      	adds	r7, #20
    8f84:	46bd      	mov	sp, r7
    8f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f8a:	4770      	bx	lr
    8f8c:	20000df0 	.word	0x20000df0

00008f90 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8f90:	b480      	push	{r7}
    8f92:	b085      	sub	sp, #20
    8f94:	af00      	add	r7, sp, #0
    8f96:	4603      	mov	r3, r0
    8f98:	71fb      	strb	r3, [r7, #7]
    8f9a:	460b      	mov	r3, r1
    8f9c:	71bb      	strb	r3, [r7, #6]
    8f9e:	4613      	mov	r3, r2
    8fa0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8fa2:	79fa      	ldrb	r2, [r7, #7]
    8fa4:	79bb      	ldrb	r3, [r7, #6]
    8fa6:	0052      	lsls	r2, r2, #1
    8fa8:	4413      	add	r3, r2
    8faa:	011b      	lsls	r3, r3, #4
    8fac:	4a08      	ldr	r2, [pc, #32]	; (8fd0 <_usbd_ep_set_in_size+0x40>)
    8fae:	4413      	add	r3, r2
    8fb0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8fb2:	88bb      	ldrh	r3, [r7, #4]
    8fb4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8fb8:	b299      	uxth	r1, r3
    8fba:	68fa      	ldr	r2, [r7, #12]
    8fbc:	6853      	ldr	r3, [r2, #4]
    8fbe:	f361 030d 	bfi	r3, r1, #0, #14
    8fc2:	6053      	str	r3, [r2, #4]
}
    8fc4:	bf00      	nop
    8fc6:	3714      	adds	r7, #20
    8fc8:	46bd      	mov	sp, r7
    8fca:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fce:	4770      	bx	lr
    8fd0:	20000df0 	.word	0x20000df0

00008fd4 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8fd4:	b480      	push	{r7}
    8fd6:	b085      	sub	sp, #20
    8fd8:	af00      	add	r7, sp, #0
    8fda:	4603      	mov	r3, r0
    8fdc:	71fb      	strb	r3, [r7, #7]
    8fde:	460b      	mov	r3, r1
    8fe0:	71bb      	strb	r3, [r7, #6]
    8fe2:	4613      	mov	r3, r2
    8fe4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8fe6:	79fa      	ldrb	r2, [r7, #7]
    8fe8:	79bb      	ldrb	r3, [r7, #6]
    8fea:	0052      	lsls	r2, r2, #1
    8fec:	4413      	add	r3, r2
    8fee:	011b      	lsls	r3, r3, #4
    8ff0:	4a08      	ldr	r2, [pc, #32]	; (9014 <_usbd_ep_set_out_count+0x40>)
    8ff2:	4413      	add	r3, r2
    8ff4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8ff6:	88bb      	ldrh	r3, [r7, #4]
    8ff8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8ffc:	b299      	uxth	r1, r3
    8ffe:	68fa      	ldr	r2, [r7, #12]
    9000:	6853      	ldr	r3, [r2, #4]
    9002:	f361 030d 	bfi	r3, r1, #0, #14
    9006:	6053      	str	r3, [r2, #4]
}
    9008:	bf00      	nop
    900a:	3714      	adds	r7, #20
    900c:	46bd      	mov	sp, r7
    900e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9012:	4770      	bx	lr
    9014:	20000df0 	.word	0x20000df0

00009018 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9018:	b480      	push	{r7}
    901a:	b085      	sub	sp, #20
    901c:	af00      	add	r7, sp, #0
    901e:	4603      	mov	r3, r0
    9020:	71fb      	strb	r3, [r7, #7]
    9022:	460b      	mov	r3, r1
    9024:	71bb      	strb	r3, [r7, #6]
    9026:	4613      	mov	r3, r2
    9028:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    902a:	79fa      	ldrb	r2, [r7, #7]
    902c:	79bb      	ldrb	r3, [r7, #6]
    902e:	0052      	lsls	r2, r2, #1
    9030:	4413      	add	r3, r2
    9032:	011b      	lsls	r3, r3, #4
    9034:	4a08      	ldr	r2, [pc, #32]	; (9058 <_usbd_ep_set_out_size+0x40>)
    9036:	4413      	add	r3, r2
    9038:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    903a:	88bb      	ldrh	r3, [r7, #4]
    903c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9040:	b299      	uxth	r1, r3
    9042:	68fa      	ldr	r2, [r7, #12]
    9044:	6853      	ldr	r3, [r2, #4]
    9046:	f361 339b 	bfi	r3, r1, #14, #14
    904a:	6053      	str	r3, [r2, #4]
}
    904c:	bf00      	nop
    904e:	3714      	adds	r7, #20
    9050:	46bd      	mov	sp, r7
    9052:	f85d 7b04 	ldr.w	r7, [sp], #4
    9056:	4770      	bx	lr
    9058:	20000df0 	.word	0x20000df0

0000905c <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    905c:	b580      	push	{r7, lr}
    905e:	b084      	sub	sp, #16
    9060:	af00      	add	r7, sp, #0
    9062:	60ba      	str	r2, [r7, #8]
    9064:	607b      	str	r3, [r7, #4]
    9066:	4603      	mov	r3, r0
    9068:	73fb      	strb	r3, [r7, #15]
    906a:	460b      	mov	r3, r1
    906c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    906e:	68bb      	ldr	r3, [r7, #8]
    9070:	b29a      	uxth	r2, r3
    9072:	7bb9      	ldrb	r1, [r7, #14]
    9074:	7bfb      	ldrb	r3, [r7, #15]
    9076:	4618      	mov	r0, r3
    9078:	4b06      	ldr	r3, [pc, #24]	; (9094 <_usbd_ep_set_in_trans+0x38>)
    907a:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    907c:	687b      	ldr	r3, [r7, #4]
    907e:	b29a      	uxth	r2, r3
    9080:	7bb9      	ldrb	r1, [r7, #14]
    9082:	7bfb      	ldrb	r3, [r7, #15]
    9084:	4618      	mov	r0, r3
    9086:	4b04      	ldr	r3, [pc, #16]	; (9098 <_usbd_ep_set_in_trans+0x3c>)
    9088:	4798      	blx	r3
}
    908a:	bf00      	nop
    908c:	3710      	adds	r7, #16
    908e:	46bd      	mov	sp, r7
    9090:	bd80      	pop	{r7, pc}
    9092:	bf00      	nop
    9094:	00008f91 	.word	0x00008f91
    9098:	00008f4d 	.word	0x00008f4d

0000909c <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    909c:	b580      	push	{r7, lr}
    909e:	b084      	sub	sp, #16
    90a0:	af00      	add	r7, sp, #0
    90a2:	60ba      	str	r2, [r7, #8]
    90a4:	607b      	str	r3, [r7, #4]
    90a6:	4603      	mov	r3, r0
    90a8:	73fb      	strb	r3, [r7, #15]
    90aa:	460b      	mov	r3, r1
    90ac:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    90ae:	68bb      	ldr	r3, [r7, #8]
    90b0:	b29a      	uxth	r2, r3
    90b2:	7bb9      	ldrb	r1, [r7, #14]
    90b4:	7bfb      	ldrb	r3, [r7, #15]
    90b6:	4618      	mov	r0, r3
    90b8:	4b06      	ldr	r3, [pc, #24]	; (90d4 <_usbd_ep_set_out_trans+0x38>)
    90ba:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    90bc:	687b      	ldr	r3, [r7, #4]
    90be:	b29a      	uxth	r2, r3
    90c0:	7bb9      	ldrb	r1, [r7, #14]
    90c2:	7bfb      	ldrb	r3, [r7, #15]
    90c4:	4618      	mov	r0, r3
    90c6:	4b04      	ldr	r3, [pc, #16]	; (90d8 <_usbd_ep_set_out_trans+0x3c>)
    90c8:	4798      	blx	r3
}
    90ca:	bf00      	nop
    90cc:	3710      	adds	r7, #16
    90ce:	46bd      	mov	sp, r7
    90d0:	bd80      	pop	{r7, pc}
    90d2:	bf00      	nop
    90d4:	00009019 	.word	0x00009019
    90d8:	00008fd5 	.word	0x00008fd5

000090dc <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    90dc:	b480      	push	{r7}
    90de:	b085      	sub	sp, #20
    90e0:	af00      	add	r7, sp, #0
    90e2:	4603      	mov	r3, r0
    90e4:	460a      	mov	r2, r1
    90e6:	71fb      	strb	r3, [r7, #7]
    90e8:	4613      	mov	r3, r2
    90ea:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    90ec:	79fa      	ldrb	r2, [r7, #7]
    90ee:	79bb      	ldrb	r3, [r7, #6]
    90f0:	0052      	lsls	r2, r2, #1
    90f2:	4413      	add	r3, r2
    90f4:	011b      	lsls	r3, r3, #4
    90f6:	4a06      	ldr	r2, [pc, #24]	; (9110 <_usbd_ep_clear_bank_status+0x34>)
    90f8:	4413      	add	r3, r2
    90fa:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    90fc:	68fb      	ldr	r3, [r7, #12]
    90fe:	2200      	movs	r2, #0
    9100:	729a      	strb	r2, [r3, #10]
}
    9102:	bf00      	nop
    9104:	3714      	adds	r7, #20
    9106:	46bd      	mov	sp, r7
    9108:	f85d 7b04 	ldr.w	r7, [sp], #4
    910c:	4770      	bx	lr
    910e:	bf00      	nop
    9110:	20000df0 	.word	0x20000df0

00009114 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9114:	b580      	push	{r7, lr}
    9116:	b082      	sub	sp, #8
    9118:	af00      	add	r7, sp, #0
    911a:	4603      	mov	r3, r0
    911c:	71fb      	strb	r3, [r7, #7]
    911e:	460b      	mov	r3, r1
    9120:	71bb      	strb	r3, [r7, #6]
    9122:	4613      	mov	r3, r2
    9124:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9126:	797b      	ldrb	r3, [r7, #5]
    9128:	2b00      	cmp	r3, #0
    912a:	d00b      	beq.n	9144 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    912c:	79bb      	ldrb	r3, [r7, #6]
    912e:	2240      	movs	r2, #64	; 0x40
    9130:	fa02 f303 	lsl.w	r3, r2, r3
    9134:	b2da      	uxtb	r2, r3
    9136:	79fb      	ldrb	r3, [r7, #7]
    9138:	4619      	mov	r1, r3
    913a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    913e:	4b09      	ldr	r3, [pc, #36]	; (9164 <_usbd_ep_set_in_rdy+0x50>)
    9140:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9142:	e00a      	b.n	915a <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9144:	79bb      	ldrb	r3, [r7, #6]
    9146:	2240      	movs	r2, #64	; 0x40
    9148:	fa02 f303 	lsl.w	r3, r2, r3
    914c:	b2da      	uxtb	r2, r3
    914e:	79fb      	ldrb	r3, [r7, #7]
    9150:	4619      	mov	r1, r3
    9152:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9156:	4b04      	ldr	r3, [pc, #16]	; (9168 <_usbd_ep_set_in_rdy+0x54>)
    9158:	4798      	blx	r3
}
    915a:	bf00      	nop
    915c:	3708      	adds	r7, #8
    915e:	46bd      	mov	sp, r7
    9160:	bd80      	pop	{r7, pc}
    9162:	bf00      	nop
    9164:	00008721 	.word	0x00008721
    9168:	00008775 	.word	0x00008775

0000916c <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    916c:	b580      	push	{r7, lr}
    916e:	b082      	sub	sp, #8
    9170:	af00      	add	r7, sp, #0
    9172:	4603      	mov	r3, r0
    9174:	71fb      	strb	r3, [r7, #7]
    9176:	460b      	mov	r3, r1
    9178:	71bb      	strb	r3, [r7, #6]
    917a:	4613      	mov	r3, r2
    917c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    917e:	797b      	ldrb	r3, [r7, #5]
    9180:	2b00      	cmp	r3, #0
    9182:	d00b      	beq.n	919c <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9184:	79bb      	ldrb	r3, [r7, #6]
    9186:	2240      	movs	r2, #64	; 0x40
    9188:	fa02 f303 	lsl.w	r3, r2, r3
    918c:	b2da      	uxtb	r2, r3
    918e:	79fb      	ldrb	r3, [r7, #7]
    9190:	4619      	mov	r1, r3
    9192:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9196:	4b09      	ldr	r3, [pc, #36]	; (91bc <_usbd_ep_set_out_rdy+0x50>)
    9198:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    919a:	e00a      	b.n	91b2 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    919c:	79bb      	ldrb	r3, [r7, #6]
    919e:	2240      	movs	r2, #64	; 0x40
    91a0:	fa02 f303 	lsl.w	r3, r2, r3
    91a4:	b2da      	uxtb	r2, r3
    91a6:	79fb      	ldrb	r3, [r7, #7]
    91a8:	4619      	mov	r1, r3
    91aa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91ae:	4b04      	ldr	r3, [pc, #16]	; (91c0 <_usbd_ep_set_out_rdy+0x54>)
    91b0:	4798      	blx	r3
}
    91b2:	bf00      	nop
    91b4:	3708      	adds	r7, #8
    91b6:	46bd      	mov	sp, r7
    91b8:	bd80      	pop	{r7, pc}
    91ba:	bf00      	nop
    91bc:	00008775 	.word	0x00008775
    91c0:	00008721 	.word	0x00008721

000091c4 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    91c4:	b480      	push	{r7}
    91c6:	b083      	sub	sp, #12
    91c8:	af00      	add	r7, sp, #0
    91ca:	4603      	mov	r3, r0
    91cc:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    91ce:	88fb      	ldrh	r3, [r7, #6]
    91d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    91d4:	d820      	bhi.n	9218 <_usbd_ep_pcksize_size+0x54>
    91d6:	88fb      	ldrh	r3, [r7, #6]
    91d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    91dc:	d81a      	bhi.n	9214 <_usbd_ep_pcksize_size+0x50>
    91de:	88fb      	ldrh	r3, [r7, #6]
    91e0:	2b80      	cmp	r3, #128	; 0x80
    91e2:	d815      	bhi.n	9210 <_usbd_ep_pcksize_size+0x4c>
    91e4:	88fb      	ldrh	r3, [r7, #6]
    91e6:	2b40      	cmp	r3, #64	; 0x40
    91e8:	d810      	bhi.n	920c <_usbd_ep_pcksize_size+0x48>
    91ea:	88fb      	ldrh	r3, [r7, #6]
    91ec:	2b20      	cmp	r3, #32
    91ee:	d80b      	bhi.n	9208 <_usbd_ep_pcksize_size+0x44>
    91f0:	88fb      	ldrh	r3, [r7, #6]
    91f2:	2b10      	cmp	r3, #16
    91f4:	d806      	bhi.n	9204 <_usbd_ep_pcksize_size+0x40>
    91f6:	88fb      	ldrh	r3, [r7, #6]
    91f8:	2b08      	cmp	r3, #8
    91fa:	bf8c      	ite	hi
    91fc:	2301      	movhi	r3, #1
    91fe:	2300      	movls	r3, #0
    9200:	b2db      	uxtb	r3, r3
    9202:	e00a      	b.n	921a <_usbd_ep_pcksize_size+0x56>
    9204:	2302      	movs	r3, #2
    9206:	e008      	b.n	921a <_usbd_ep_pcksize_size+0x56>
    9208:	2303      	movs	r3, #3
    920a:	e006      	b.n	921a <_usbd_ep_pcksize_size+0x56>
    920c:	2304      	movs	r3, #4
    920e:	e004      	b.n	921a <_usbd_ep_pcksize_size+0x56>
    9210:	2305      	movs	r3, #5
    9212:	e002      	b.n	921a <_usbd_ep_pcksize_size+0x56>
    9214:	2306      	movs	r3, #6
    9216:	e000      	b.n	921a <_usbd_ep_pcksize_size+0x56>
    9218:	2307      	movs	r3, #7
}
    921a:	4618      	mov	r0, r3
    921c:	370c      	adds	r7, #12
    921e:	46bd      	mov	sp, r7
    9220:	f85d 7b04 	ldr.w	r7, [sp], #4
    9224:	4770      	bx	lr
	...

00009228 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9228:	b480      	push	{r7}
    922a:	b085      	sub	sp, #20
    922c:	af00      	add	r7, sp, #0
    922e:	4603      	mov	r3, r0
    9230:	460a      	mov	r2, r1
    9232:	71fb      	strb	r3, [r7, #7]
    9234:	4613      	mov	r3, r2
    9236:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9238:	79fb      	ldrb	r3, [r7, #7]
    923a:	2b00      	cmp	r3, #0
    923c:	d008      	beq.n	9250 <_usb_d_dev_ept+0x28>
    923e:	79bb      	ldrb	r3, [r7, #6]
    9240:	2b00      	cmp	r3, #0
    9242:	d003      	beq.n	924c <_usb_d_dev_ept+0x24>
    9244:	79fb      	ldrb	r3, [r7, #7]
    9246:	3304      	adds	r3, #4
    9248:	b2db      	uxtb	r3, r3
    924a:	e002      	b.n	9252 <_usb_d_dev_ept+0x2a>
    924c:	79fb      	ldrb	r3, [r7, #7]
    924e:	e000      	b.n	9252 <_usb_d_dev_ept+0x2a>
    9250:	2300      	movs	r3, #0
    9252:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    9254:	7bfa      	ldrb	r2, [r7, #15]
    9256:	4613      	mov	r3, r2
    9258:	009b      	lsls	r3, r3, #2
    925a:	4413      	add	r3, r2
    925c:	009b      	lsls	r3, r3, #2
    925e:	3310      	adds	r3, #16
    9260:	4a04      	ldr	r2, [pc, #16]	; (9274 <_usb_d_dev_ept+0x4c>)
    9262:	4413      	add	r3, r2
    9264:	3304      	adds	r3, #4
}
    9266:	4618      	mov	r0, r3
    9268:	3714      	adds	r7, #20
    926a:	46bd      	mov	sp, r7
    926c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9270:	4770      	bx	lr
    9272:	bf00      	nop
    9274:	20000d28 	.word	0x20000d28

00009278 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    9278:	b580      	push	{r7, lr}
    927a:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    927c:	2104      	movs	r1, #4
    927e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9282:	4b03      	ldr	r3, [pc, #12]	; (9290 <_usb_d_dev_sof+0x18>)
    9284:	4798      	blx	r3
	dev_inst.callbacks.sof();
    9286:	4b03      	ldr	r3, [pc, #12]	; (9294 <_usb_d_dev_sof+0x1c>)
    9288:	681b      	ldr	r3, [r3, #0]
    928a:	4798      	blx	r3
}
    928c:	bf00      	nop
    928e:	bd80      	pop	{r7, pc}
    9290:	000088ef 	.word	0x000088ef
    9294:	20000d28 	.word	0x20000d28

00009298 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    9298:	b580      	push	{r7, lr}
    929a:	b084      	sub	sp, #16
    929c:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    929e:	2300      	movs	r3, #0
    92a0:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    92a2:	f240 2101 	movw	r1, #513	; 0x201
    92a6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92aa:	4b1a      	ldr	r3, [pc, #104]	; (9314 <_usb_d_dev_lpmsusp+0x7c>)
    92ac:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    92ae:	f240 2101 	movw	r1, #513	; 0x201
    92b2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92b6:	4b18      	ldr	r3, [pc, #96]	; (9318 <_usb_d_dev_lpmsusp+0x80>)
    92b8:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    92ba:	2170      	movs	r1, #112	; 0x70
    92bc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92c0:	4b16      	ldr	r3, [pc, #88]	; (931c <_usb_d_dev_lpmsusp+0x84>)
    92c2:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    92c4:	2300      	movs	r3, #0
    92c6:	73fb      	strb	r3, [r7, #15]
    92c8:	e018      	b.n	92fc <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    92ca:	7bfb      	ldrb	r3, [r7, #15]
    92cc:	015b      	lsls	r3, r3, #5
    92ce:	4a14      	ldr	r2, [pc, #80]	; (9320 <_usb_d_dev_lpmsusp+0x88>)
    92d0:	4413      	add	r3, r2
    92d2:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    92d4:	687b      	ldr	r3, [r7, #4]
    92d6:	891b      	ldrh	r3, [r3, #8]
    92d8:	f3c3 0303 	ubfx	r3, r3, #0, #4
    92dc:	b2db      	uxtb	r3, r3
    92de:	2b03      	cmp	r3, #3
    92e0:	d109      	bne.n	92f6 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    92e2:	687b      	ldr	r3, [r7, #4]
    92e4:	891b      	ldrh	r3, [r3, #8]
    92e6:	f3c3 130a 	ubfx	r3, r3, #4, #11
    92ea:	b29b      	uxth	r3, r3
    92ec:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    92ee:	687b      	ldr	r3, [r7, #4]
    92f0:	2200      	movs	r2, #0
    92f2:	811a      	strh	r2, [r3, #8]
			break;
    92f4:	e005      	b.n	9302 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    92f6:	7bfb      	ldrb	r3, [r7, #15]
    92f8:	3301      	adds	r3, #1
    92fa:	73fb      	strb	r3, [r7, #15]
    92fc:	7bfb      	ldrb	r3, [r7, #15]
    92fe:	2b03      	cmp	r3, #3
    9300:	d9e3      	bls.n	92ca <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9302:	4b08      	ldr	r3, [pc, #32]	; (9324 <_usb_d_dev_lpmsusp+0x8c>)
    9304:	685b      	ldr	r3, [r3, #4]
    9306:	68b9      	ldr	r1, [r7, #8]
    9308:	2003      	movs	r0, #3
    930a:	4798      	blx	r3
}
    930c:	bf00      	nop
    930e:	3710      	adds	r7, #16
    9310:	46bd      	mov	sp, r7
    9312:	bd80      	pop	{r7, pc}
    9314:	000088ef 	.word	0x000088ef
    9318:	00008945 	.word	0x00008945
    931c:	0000890d 	.word	0x0000890d
    9320:	20000df0 	.word	0x20000df0
    9324:	20000d28 	.word	0x20000d28

00009328 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9328:	b580      	push	{r7, lr}
    932a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    932c:	2180      	movs	r1, #128	; 0x80
    932e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9332:	4b04      	ldr	r3, [pc, #16]	; (9344 <_usb_d_dev_ramerr+0x1c>)
    9334:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    9336:	4b04      	ldr	r3, [pc, #16]	; (9348 <_usb_d_dev_ramerr+0x20>)
    9338:	685b      	ldr	r3, [r3, #4]
    933a:	2100      	movs	r1, #0
    933c:	2005      	movs	r0, #5
    933e:	4798      	blx	r3
}
    9340:	bf00      	nop
    9342:	bd80      	pop	{r7, pc}
    9344:	000088ef 	.word	0x000088ef
    9348:	20000d28 	.word	0x20000d28

0000934c <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    934c:	b580      	push	{r7, lr}
    934e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9350:	2170      	movs	r1, #112	; 0x70
    9352:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9356:	4b0b      	ldr	r3, [pc, #44]	; (9384 <_usb_d_dev_wakeup+0x38>)
    9358:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    935a:	2170      	movs	r1, #112	; 0x70
    935c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9360:	4b09      	ldr	r3, [pc, #36]	; (9388 <_usb_d_dev_wakeup+0x3c>)
    9362:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9364:	f240 2101 	movw	r1, #513	; 0x201
    9368:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    936c:	4b07      	ldr	r3, [pc, #28]	; (938c <_usb_d_dev_wakeup+0x40>)
    936e:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    9370:	2000      	movs	r0, #0
    9372:	4b07      	ldr	r3, [pc, #28]	; (9390 <_usb_d_dev_wakeup+0x44>)
    9374:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    9376:	4b07      	ldr	r3, [pc, #28]	; (9394 <_usb_d_dev_wakeup+0x48>)
    9378:	685b      	ldr	r3, [r3, #4]
    937a:	2100      	movs	r1, #0
    937c:	2002      	movs	r0, #2
    937e:	4798      	blx	r3
}
    9380:	bf00      	nop
    9382:	bd80      	pop	{r7, pc}
    9384:	000088ef 	.word	0x000088ef
    9388:	00008945 	.word	0x00008945
    938c:	0000890d 	.word	0x0000890d
    9390:	00008bed 	.word	0x00008bed
    9394:	20000d28 	.word	0x20000d28

00009398 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    9398:	b580      	push	{r7, lr}
    939a:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    939c:	2200      	movs	r2, #0
    939e:	2100      	movs	r1, #0
    93a0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    93a4:	4b0d      	ldr	r3, [pc, #52]	; (93dc <_usb_d_dev_reset+0x44>)
    93a6:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    93a8:	2108      	movs	r1, #8
    93aa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    93ae:	4b0c      	ldr	r3, [pc, #48]	; (93e0 <_usb_d_dev_reset+0x48>)
    93b0:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    93b2:	2170      	movs	r1, #112	; 0x70
    93b4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    93b8:	4b0a      	ldr	r3, [pc, #40]	; (93e4 <_usb_d_dev_reset+0x4c>)
    93ba:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    93bc:	f240 2101 	movw	r1, #513	; 0x201
    93c0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    93c4:	4b08      	ldr	r3, [pc, #32]	; (93e8 <_usb_d_dev_reset+0x50>)
    93c6:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    93c8:	4b08      	ldr	r3, [pc, #32]	; (93ec <_usb_d_dev_reset+0x54>)
    93ca:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    93cc:	4b08      	ldr	r3, [pc, #32]	; (93f0 <_usb_d_dev_reset+0x58>)
    93ce:	685b      	ldr	r3, [r3, #4]
    93d0:	2100      	movs	r1, #0
    93d2:	2001      	movs	r0, #1
    93d4:	4798      	blx	r3
}
    93d6:	bf00      	nop
    93d8:	bd80      	pop	{r7, pc}
    93da:	bf00      	nop
    93dc:	00008885 	.word	0x00008885
    93e0:	000088ef 	.word	0x000088ef
    93e4:	00008945 	.word	0x00008945
    93e8:	0000890d 	.word	0x0000890d
    93ec:	00009f55 	.word	0x00009f55
    93f0:	20000d28 	.word	0x20000d28

000093f4 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    93f4:	b580      	push	{r7, lr}
    93f6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    93f8:	f240 2101 	movw	r1, #513	; 0x201
    93fc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9400:	4b09      	ldr	r3, [pc, #36]	; (9428 <_usb_d_dev_suspend+0x34>)
    9402:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9404:	f240 2101 	movw	r1, #513	; 0x201
    9408:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    940c:	4b07      	ldr	r3, [pc, #28]	; (942c <_usb_d_dev_suspend+0x38>)
    940e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9410:	2170      	movs	r1, #112	; 0x70
    9412:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9416:	4b06      	ldr	r3, [pc, #24]	; (9430 <_usb_d_dev_suspend+0x3c>)
    9418:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    941a:	4b06      	ldr	r3, [pc, #24]	; (9434 <_usb_d_dev_suspend+0x40>)
    941c:	685b      	ldr	r3, [r3, #4]
    941e:	2100      	movs	r1, #0
    9420:	2004      	movs	r0, #4
    9422:	4798      	blx	r3
}
    9424:	bf00      	nop
    9426:	bd80      	pop	{r7, pc}
    9428:	000088ef 	.word	0x000088ef
    942c:	00008945 	.word	0x00008945
    9430:	0000890d 	.word	0x0000890d
    9434:	20000d28 	.word	0x20000d28

00009438 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    9438:	b580      	push	{r7, lr}
    943a:	b082      	sub	sp, #8
    943c:	af00      	add	r7, sp, #0
	bool     rc    = true;
    943e:	2301      	movs	r3, #1
    9440:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    9442:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9446:	4b22      	ldr	r3, [pc, #136]	; (94d0 <_usb_d_dev_handle_nep+0x98>)
    9448:	4798      	blx	r3
    944a:	4603      	mov	r3, r0
    944c:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    944e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9452:	4b20      	ldr	r3, [pc, #128]	; (94d4 <_usb_d_dev_handle_nep+0x9c>)
    9454:	4798      	blx	r3
    9456:	4603      	mov	r3, r0
    9458:	461a      	mov	r2, r3
    945a:	88bb      	ldrh	r3, [r7, #4]
    945c:	4013      	ands	r3, r2
    945e:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    9460:	88bb      	ldrh	r3, [r7, #4]
    9462:	f003 0304 	and.w	r3, r3, #4
    9466:	2b00      	cmp	r3, #0
    9468:	d003      	beq.n	9472 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    946a:	4b1b      	ldr	r3, [pc, #108]	; (94d8 <_usb_d_dev_handle_nep+0xa0>)
    946c:	4798      	blx	r3
		return true;
    946e:	2301      	movs	r3, #1
    9470:	e02a      	b.n	94c8 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    9472:	88bb      	ldrh	r3, [r7, #4]
    9474:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9478:	2b00      	cmp	r3, #0
    947a:	d002      	beq.n	9482 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    947c:	4b17      	ldr	r3, [pc, #92]	; (94dc <_usb_d_dev_handle_nep+0xa4>)
    947e:	4798      	blx	r3
    9480:	e021      	b.n	94c6 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    9482:	88bb      	ldrh	r3, [r7, #4]
    9484:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9488:	2b00      	cmp	r3, #0
    948a:	d002      	beq.n	9492 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    948c:	4b14      	ldr	r3, [pc, #80]	; (94e0 <_usb_d_dev_handle_nep+0xa8>)
    948e:	4798      	blx	r3
    9490:	e019      	b.n	94c6 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    9492:	88bb      	ldrh	r3, [r7, #4]
    9494:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9498:	2b00      	cmp	r3, #0
    949a:	d002      	beq.n	94a2 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    949c:	4b11      	ldr	r3, [pc, #68]	; (94e4 <_usb_d_dev_handle_nep+0xac>)
    949e:	4798      	blx	r3
    94a0:	e011      	b.n	94c6 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    94a2:	88bb      	ldrh	r3, [r7, #4]
    94a4:	f003 0308 	and.w	r3, r3, #8
    94a8:	2b00      	cmp	r3, #0
    94aa:	d002      	beq.n	94b2 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    94ac:	4b0e      	ldr	r3, [pc, #56]	; (94e8 <_usb_d_dev_handle_nep+0xb0>)
    94ae:	4798      	blx	r3
    94b0:	e009      	b.n	94c6 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    94b2:	88bb      	ldrh	r3, [r7, #4]
    94b4:	f003 0301 	and.w	r3, r3, #1
    94b8:	2b00      	cmp	r3, #0
    94ba:	d002      	beq.n	94c2 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    94bc:	4b0b      	ldr	r3, [pc, #44]	; (94ec <_usb_d_dev_handle_nep+0xb4>)
    94be:	4798      	blx	r3
    94c0:	e001      	b.n	94c6 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    94c2:	2300      	movs	r3, #0
    94c4:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    94c6:	79fb      	ldrb	r3, [r7, #7]
}
    94c8:	4618      	mov	r0, r3
    94ca:	3708      	adds	r7, #8
    94cc:	46bd      	mov	sp, r7
    94ce:	bd80      	pop	{r7, pc}
    94d0:	000088d5 	.word	0x000088d5
    94d4:	0000892b 	.word	0x0000892b
    94d8:	00009279 	.word	0x00009279
    94dc:	00009299 	.word	0x00009299
    94e0:	00009329 	.word	0x00009329
    94e4:	0000934d 	.word	0x0000934d
    94e8:	00009399 	.word	0x00009399
    94ec:	000093f5 	.word	0x000093f5

000094f0 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    94f0:	b590      	push	{r4, r7, lr}
    94f2:	b089      	sub	sp, #36	; 0x24
    94f4:	af00      	add	r7, sp, #0
    94f6:	6078      	str	r0, [r7, #4]
    94f8:	460b      	mov	r3, r1
    94fa:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    94fc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9500:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9502:	687b      	ldr	r3, [r7, #4]
    9504:	7c9b      	ldrb	r3, [r3, #18]
    9506:	f003 030f 	and.w	r3, r3, #15
    950a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    950c:	7dfb      	ldrb	r3, [r7, #23]
    950e:	015b      	lsls	r3, r3, #5
    9510:	4a73      	ldr	r2, [pc, #460]	; (96e0 <_usb_d_dev_in_next+0x1f0>)
    9512:	4413      	add	r3, r2
    9514:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9516:	78fb      	ldrb	r3, [r7, #3]
    9518:	2b00      	cmp	r3, #0
    951a:	d006      	beq.n	952a <_usb_d_dev_in_next+0x3a>
    951c:	693b      	ldr	r3, [r7, #16]
    951e:	3310      	adds	r3, #16
    9520:	685b      	ldr	r3, [r3, #4]
    9522:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9526:	b29b      	uxth	r3, r3
    9528:	e000      	b.n	952c <_usb_d_dev_in_next+0x3c>
    952a:	2300      	movs	r3, #0
    952c:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    952e:	687b      	ldr	r3, [r7, #4]
    9530:	8a1b      	ldrh	r3, [r3, #16]
    9532:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9536:	4293      	cmp	r3, r2
    9538:	d103      	bne.n	9542 <_usb_d_dev_in_next+0x52>
    953a:	687b      	ldr	r3, [r7, #4]
    953c:	8a1b      	ldrh	r3, [r3, #16]
    953e:	b21b      	sxth	r3, r3
    9540:	e004      	b.n	954c <_usb_d_dev_in_next+0x5c>
    9542:	687b      	ldr	r3, [r7, #4]
    9544:	8a1b      	ldrh	r3, [r3, #16]
    9546:	3b01      	subs	r3, #1
    9548:	b29b      	uxth	r3, r3
    954a:	b21b      	sxth	r3, r3
    954c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9550:	4013      	ands	r3, r2
    9552:	b21b      	sxth	r3, r3
    9554:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    9556:	2300      	movs	r3, #0
    9558:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    955a:	687b      	ldr	r3, [r7, #4]
    955c:	7cdb      	ldrb	r3, [r3, #19]
    955e:	f003 0307 	and.w	r3, r3, #7
    9562:	b2db      	uxtb	r3, r3
    9564:	2b01      	cmp	r3, #1
    9566:	bf0c      	ite	eq
    9568:	2301      	moveq	r3, #1
    956a:	2300      	movne	r3, #0
    956c:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    956e:	78fb      	ldrb	r3, [r7, #3]
    9570:	2b00      	cmp	r3, #0
    9572:	d004      	beq.n	957e <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    9574:	7dfb      	ldrb	r3, [r7, #23]
    9576:	2101      	movs	r1, #1
    9578:	4618      	mov	r0, r3
    957a:	4b5a      	ldr	r3, [pc, #360]	; (96e4 <_usb_d_dev_in_next+0x1f4>)
    957c:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    957e:	687b      	ldr	r3, [r7, #4]
    9580:	689a      	ldr	r2, [r3, #8]
    9582:	89fb      	ldrh	r3, [r7, #14]
    9584:	441a      	add	r2, r3
    9586:	687b      	ldr	r3, [r7, #4]
    9588:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    958a:	687b      	ldr	r3, [r7, #4]
    958c:	689a      	ldr	r2, [r3, #8]
    958e:	687b      	ldr	r3, [r7, #4]
    9590:	685b      	ldr	r3, [r3, #4]
    9592:	429a      	cmp	r2, r3
    9594:	d243      	bcs.n	961e <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    9596:	687b      	ldr	r3, [r7, #4]
    9598:	685b      	ldr	r3, [r3, #4]
    959a:	b29a      	uxth	r2, r3
    959c:	687b      	ldr	r3, [r7, #4]
    959e:	689b      	ldr	r3, [r3, #8]
    95a0:	b29b      	uxth	r3, r3
    95a2:	1ad3      	subs	r3, r2, r3
    95a4:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    95a6:	687b      	ldr	r3, [r7, #4]
    95a8:	7cdb      	ldrb	r3, [r3, #19]
    95aa:	f003 0320 	and.w	r3, r3, #32
    95ae:	b2db      	uxtb	r3, r3
    95b0:	2b00      	cmp	r3, #0
    95b2:	d01b      	beq.n	95ec <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    95b4:	687b      	ldr	r3, [r7, #4]
    95b6:	8a1b      	ldrh	r3, [r3, #16]
    95b8:	8bfa      	ldrh	r2, [r7, #30]
    95ba:	429a      	cmp	r2, r3
    95bc:	d902      	bls.n	95c4 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    95be:	687b      	ldr	r3, [r7, #4]
    95c0:	8a1b      	ldrh	r3, [r3, #16]
    95c2:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    95c4:	687b      	ldr	r3, [r7, #4]
    95c6:	68d8      	ldr	r0, [r3, #12]
    95c8:	687b      	ldr	r3, [r7, #4]
    95ca:	681a      	ldr	r2, [r3, #0]
    95cc:	687b      	ldr	r3, [r7, #4]
    95ce:	689b      	ldr	r3, [r3, #8]
    95d0:	4413      	add	r3, r2
    95d2:	8bfa      	ldrh	r2, [r7, #30]
    95d4:	4619      	mov	r1, r3
    95d6:	4b44      	ldr	r3, [pc, #272]	; (96e8 <_usb_d_dev_in_next+0x1f8>)
    95d8:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    95da:	687b      	ldr	r3, [r7, #4]
    95dc:	68db      	ldr	r3, [r3, #12]
    95de:	461a      	mov	r2, r3
    95e0:	7dfb      	ldrb	r3, [r7, #23]
    95e2:	2101      	movs	r1, #1
    95e4:	4618      	mov	r0, r3
    95e6:	4b41      	ldr	r3, [pc, #260]	; (96ec <_usb_d_dev_in_next+0x1fc>)
    95e8:	4798      	blx	r3
    95ea:	e011      	b.n	9610 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    95ec:	8bfb      	ldrh	r3, [r7, #30]
    95ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    95f2:	d902      	bls.n	95fa <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    95f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    95f8:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    95fa:	687b      	ldr	r3, [r7, #4]
    95fc:	681a      	ldr	r2, [r3, #0]
    95fe:	687b      	ldr	r3, [r7, #4]
    9600:	689b      	ldr	r3, [r3, #8]
    9602:	4413      	add	r3, r2
    9604:	461a      	mov	r2, r3
    9606:	7dfb      	ldrb	r3, [r7, #23]
    9608:	2101      	movs	r1, #1
    960a:	4618      	mov	r0, r3
    960c:	4b37      	ldr	r3, [pc, #220]	; (96ec <_usb_d_dev_in_next+0x1fc>)
    960e:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9610:	8bfa      	ldrh	r2, [r7, #30]
    9612:	7df8      	ldrb	r0, [r7, #23]
    9614:	2300      	movs	r3, #0
    9616:	2101      	movs	r1, #1
    9618:	4c35      	ldr	r4, [pc, #212]	; (96f0 <_usb_d_dev_in_next+0x200>)
    961a:	47a0      	blx	r4
		goto _in_tx_exec;
    961c:	e041      	b.n	96a2 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    961e:	687b      	ldr	r3, [r7, #4]
    9620:	7cdb      	ldrb	r3, [r3, #19]
    9622:	f003 0310 	and.w	r3, r3, #16
    9626:	b2db      	uxtb	r3, r3
    9628:	2b00      	cmp	r3, #0
    962a:	d00b      	beq.n	9644 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    962c:	687a      	ldr	r2, [r7, #4]
    962e:	7cd3      	ldrb	r3, [r2, #19]
    9630:	f36f 1304 	bfc	r3, #4, #1
    9634:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    9636:	7df8      	ldrb	r0, [r7, #23]
    9638:	2300      	movs	r3, #0
    963a:	2200      	movs	r2, #0
    963c:	2101      	movs	r1, #1
    963e:	4c2c      	ldr	r4, [pc, #176]	; (96f0 <_usb_d_dev_in_next+0x200>)
    9640:	47a0      	blx	r4
		goto _in_tx_exec;
    9642:	e02e      	b.n	96a2 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    9644:	7afb      	ldrb	r3, [r7, #11]
    9646:	2b00      	cmp	r3, #0
    9648:	d006      	beq.n	9658 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    964a:	7dfb      	ldrb	r3, [r7, #23]
    964c:	224b      	movs	r2, #75	; 0x4b
    964e:	4619      	mov	r1, r3
    9650:	69b8      	ldr	r0, [r7, #24]
    9652:	4b28      	ldr	r3, [pc, #160]	; (96f4 <_usb_d_dev_in_next+0x204>)
    9654:	4798      	blx	r3
    9656:	e005      	b.n	9664 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    9658:	7dfb      	ldrb	r3, [r7, #23]
    965a:	224a      	movs	r2, #74	; 0x4a
    965c:	4619      	mov	r1, r3
    965e:	69b8      	ldr	r0, [r7, #24]
    9660:	4b24      	ldr	r3, [pc, #144]	; (96f4 <_usb_d_dev_in_next+0x204>)
    9662:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    9664:	687b      	ldr	r3, [r7, #4]
    9666:	8a1b      	ldrh	r3, [r3, #16]
    9668:	89ba      	ldrh	r2, [r7, #12]
    966a:	429a      	cmp	r2, r3
    966c:	d114      	bne.n	9698 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    966e:	687a      	ldr	r2, [r7, #4]
    9670:	7cd3      	ldrb	r3, [r2, #19]
    9672:	f36f 1386 	bfc	r3, #6, #1
    9676:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    9678:	4b1f      	ldr	r3, [pc, #124]	; (96f8 <_usb_d_dev_in_next+0x208>)
    967a:	68db      	ldr	r3, [r3, #12]
    967c:	687a      	ldr	r2, [r7, #4]
    967e:	7c90      	ldrb	r0, [r2, #18]
    9680:	687a      	ldr	r2, [r7, #4]
    9682:	6892      	ldr	r2, [r2, #8]
    9684:	4611      	mov	r1, r2
    9686:	4798      	blx	r3
    9688:	4603      	mov	r3, r0
    968a:	2b00      	cmp	r3, #0
    968c:	d124      	bne.n	96d8 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    968e:	687a      	ldr	r2, [r7, #4]
    9690:	7cd3      	ldrb	r3, [r2, #19]
    9692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9696:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9698:	2100      	movs	r1, #0
    969a:	6878      	ldr	r0, [r7, #4]
    969c:	4b17      	ldr	r3, [pc, #92]	; (96fc <_usb_d_dev_in_next+0x20c>)
    969e:	4798      	blx	r3
	return;
    96a0:	e01b      	b.n	96da <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    96a2:	78fb      	ldrb	r3, [r7, #3]
    96a4:	f083 0301 	eor.w	r3, r3, #1
    96a8:	b2db      	uxtb	r3, r3
    96aa:	2b00      	cmp	r3, #0
    96ac:	d00d      	beq.n	96ca <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    96ae:	7afb      	ldrb	r3, [r7, #11]
    96b0:	2b00      	cmp	r3, #0
    96b2:	d002      	beq.n	96ba <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    96b4:	234e      	movs	r3, #78	; 0x4e
    96b6:	777b      	strb	r3, [r7, #29]
    96b8:	e001      	b.n	96be <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    96ba:	234a      	movs	r3, #74	; 0x4a
    96bc:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    96be:	7f7a      	ldrb	r2, [r7, #29]
    96c0:	7dfb      	ldrb	r3, [r7, #23]
    96c2:	4619      	mov	r1, r3
    96c4:	69b8      	ldr	r0, [r7, #24]
    96c6:	4b0e      	ldr	r3, [pc, #56]	; (9700 <_usb_d_dev_in_next+0x210>)
    96c8:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    96ca:	7dfb      	ldrb	r3, [r7, #23]
    96cc:	2201      	movs	r2, #1
    96ce:	2101      	movs	r1, #1
    96d0:	4618      	mov	r0, r3
    96d2:	4b0c      	ldr	r3, [pc, #48]	; (9704 <_usb_d_dev_in_next+0x214>)
    96d4:	4798      	blx	r3
    96d6:	e000      	b.n	96da <_usb_d_dev_in_next+0x1ea>
			return;
    96d8:	bf00      	nop
}
    96da:	3724      	adds	r7, #36	; 0x24
    96dc:	46bd      	mov	sp, r7
    96de:	bd90      	pop	{r4, r7, pc}
    96e0:	20000df0 	.word	0x20000df0
    96e4:	00008ee9 	.word	0x00008ee9
    96e8:	0000e8e1 	.word	0x0000e8e1
    96ec:	00008f15 	.word	0x00008f15
    96f0:	0000905d 	.word	0x0000905d
    96f4:	000087f5 	.word	0x000087f5
    96f8:	20000d28 	.word	0x20000d28
    96fc:	0000a819 	.word	0x0000a819
    9700:	000087c9 	.word	0x000087c9
    9704:	00009115 	.word	0x00009115

00009708 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9708:	b590      	push	{r4, r7, lr}
    970a:	b08b      	sub	sp, #44	; 0x2c
    970c:	af00      	add	r7, sp, #0
    970e:	6078      	str	r0, [r7, #4]
    9710:	460b      	mov	r3, r1
    9712:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    9714:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9718:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    971a:	687b      	ldr	r3, [r7, #4]
    971c:	7c9b      	ldrb	r3, [r3, #18]
    971e:	f003 030f 	and.w	r3, r3, #15
    9722:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9724:	7ffb      	ldrb	r3, [r7, #31]
    9726:	015b      	lsls	r3, r3, #5
    9728:	4a94      	ldr	r2, [pc, #592]	; (997c <_usb_d_dev_out_next+0x274>)
    972a:	4413      	add	r3, r2
    972c:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    972e:	78fb      	ldrb	r3, [r7, #3]
    9730:	2b00      	cmp	r3, #0
    9732:	d005      	beq.n	9740 <_usb_d_dev_out_next+0x38>
    9734:	69bb      	ldr	r3, [r7, #24]
    9736:	685b      	ldr	r3, [r3, #4]
    9738:	f3c3 338d 	ubfx	r3, r3, #14, #14
    973c:	b29b      	uxth	r3, r3
    973e:	e000      	b.n	9742 <_usb_d_dev_out_next+0x3a>
    9740:	2300      	movs	r3, #0
    9742:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    9744:	78fb      	ldrb	r3, [r7, #3]
    9746:	2b00      	cmp	r3, #0
    9748:	d005      	beq.n	9756 <_usb_d_dev_out_next+0x4e>
    974a:	69bb      	ldr	r3, [r7, #24]
    974c:	685b      	ldr	r3, [r3, #4]
    974e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9752:	b29b      	uxth	r3, r3
    9754:	e000      	b.n	9758 <_usb_d_dev_out_next+0x50>
    9756:	2300      	movs	r3, #0
    9758:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    975a:	687b      	ldr	r3, [r7, #4]
    975c:	8a1b      	ldrh	r3, [r3, #16]
    975e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9762:	4293      	cmp	r3, r2
    9764:	d004      	beq.n	9770 <_usb_d_dev_out_next+0x68>
    9766:	687b      	ldr	r3, [r7, #4]
    9768:	8a1b      	ldrh	r3, [r3, #16]
    976a:	3b01      	subs	r3, #1
    976c:	b29b      	uxth	r3, r3
    976e:	e001      	b.n	9774 <_usb_d_dev_out_next+0x6c>
    9770:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9774:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    9776:	8aba      	ldrh	r2, [r7, #20]
    9778:	8a7b      	ldrh	r3, [r7, #18]
    977a:	4013      	ands	r3, r2
    977c:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    977e:	687b      	ldr	r3, [r7, #4]
    9780:	7cdb      	ldrb	r3, [r3, #19]
    9782:	f003 0307 	and.w	r3, r3, #7
    9786:	b2db      	uxtb	r3, r3
    9788:	2b01      	cmp	r3, #1
    978a:	bf0c      	ite	eq
    978c:	2301      	moveq	r3, #1
    978e:	2300      	movne	r3, #0
    9790:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    9792:	78fb      	ldrb	r3, [r7, #3]
    9794:	2b00      	cmp	r3, #0
    9796:	d004      	beq.n	97a2 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    9798:	7ffb      	ldrb	r3, [r7, #31]
    979a:	2100      	movs	r1, #0
    979c:	4618      	mov	r0, r3
    979e:	4b78      	ldr	r3, [pc, #480]	; (9980 <_usb_d_dev_out_next+0x278>)
    97a0:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    97a2:	687b      	ldr	r3, [r7, #4]
    97a4:	7cdb      	ldrb	r3, [r3, #19]
    97a6:	f003 0320 	and.w	r3, r3, #32
    97aa:	b2db      	uxtb	r3, r3
    97ac:	2b00      	cmp	r3, #0
    97ae:	d01c      	beq.n	97ea <_usb_d_dev_out_next+0xe2>
    97b0:	687b      	ldr	r3, [r7, #4]
    97b2:	685b      	ldr	r3, [r3, #4]
    97b4:	2b00      	cmp	r3, #0
    97b6:	d018      	beq.n	97ea <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    97b8:	687b      	ldr	r3, [r7, #4]
    97ba:	685b      	ldr	r3, [r3, #4]
    97bc:	b29a      	uxth	r2, r3
    97be:	687b      	ldr	r3, [r7, #4]
    97c0:	689b      	ldr	r3, [r3, #8]
    97c2:	b29b      	uxth	r3, r3
    97c4:	1ad3      	subs	r3, r2, r3
    97c6:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    97c8:	687b      	ldr	r3, [r7, #4]
    97ca:	681a      	ldr	r2, [r3, #0]
    97cc:	687b      	ldr	r3, [r7, #4]
    97ce:	689b      	ldr	r3, [r3, #8]
    97d0:	18d0      	adds	r0, r2, r3
    97d2:	687b      	ldr	r3, [r7, #4]
    97d4:	68d9      	ldr	r1, [r3, #12]
    97d6:	89ba      	ldrh	r2, [r7, #12]
    97d8:	8a3b      	ldrh	r3, [r7, #16]
    97da:	429a      	cmp	r2, r3
    97dc:	d901      	bls.n	97e2 <_usb_d_dev_out_next+0xda>
    97de:	8a3b      	ldrh	r3, [r7, #16]
    97e0:	e000      	b.n	97e4 <_usb_d_dev_out_next+0xdc>
    97e2:	89bb      	ldrh	r3, [r7, #12]
    97e4:	461a      	mov	r2, r3
    97e6:	4b67      	ldr	r3, [pc, #412]	; (9984 <_usb_d_dev_out_next+0x27c>)
    97e8:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    97ea:	687b      	ldr	r3, [r7, #4]
    97ec:	685b      	ldr	r3, [r3, #4]
    97ee:	2b00      	cmp	r3, #0
    97f0:	d121      	bne.n	9836 <_usb_d_dev_out_next+0x12e>
    97f2:	687b      	ldr	r3, [r7, #4]
    97f4:	7cdb      	ldrb	r3, [r3, #19]
    97f6:	f003 0310 	and.w	r3, r3, #16
    97fa:	b2db      	uxtb	r3, r3
    97fc:	2b00      	cmp	r3, #0
    97fe:	d01a      	beq.n	9836 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    9800:	687a      	ldr	r2, [r7, #4]
    9802:	7cd3      	ldrb	r3, [r2, #19]
    9804:	f36f 1304 	bfc	r3, #4, #1
    9808:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    980a:	687a      	ldr	r2, [r7, #4]
    980c:	7cd3      	ldrb	r3, [r2, #19]
    980e:	f043 0320 	orr.w	r3, r3, #32
    9812:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9814:	687b      	ldr	r3, [r7, #4]
    9816:	68db      	ldr	r3, [r3, #12]
    9818:	461a      	mov	r2, r3
    981a:	7ffb      	ldrb	r3, [r7, #31]
    981c:	2100      	movs	r1, #0
    981e:	4618      	mov	r0, r3
    9820:	4b59      	ldr	r3, [pc, #356]	; (9988 <_usb_d_dev_out_next+0x280>)
    9822:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9824:	687b      	ldr	r3, [r7, #4]
    9826:	8a1b      	ldrh	r3, [r3, #16]
    9828:	461a      	mov	r2, r3
    982a:	7ff8      	ldrb	r0, [r7, #31]
    982c:	2300      	movs	r3, #0
    982e:	2100      	movs	r1, #0
    9830:	4c56      	ldr	r4, [pc, #344]	; (998c <_usb_d_dev_out_next+0x284>)
    9832:	47a0      	blx	r4
		goto _out_rx_exec;
    9834:	e090      	b.n	9958 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    9836:	78fb      	ldrb	r3, [r7, #3]
    9838:	2b00      	cmp	r3, #0
    983a:	d010      	beq.n	985e <_usb_d_dev_out_next+0x156>
    983c:	687b      	ldr	r3, [r7, #4]
    983e:	8a1b      	ldrh	r3, [r3, #16]
    9840:	8a3a      	ldrh	r2, [r7, #16]
    9842:	429a      	cmp	r2, r3
    9844:	d20b      	bcs.n	985e <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    9846:	687a      	ldr	r2, [r7, #4]
    9848:	7cd3      	ldrb	r3, [r2, #19]
    984a:	f36f 1304 	bfc	r3, #4, #1
    984e:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    9850:	687b      	ldr	r3, [r7, #4]
    9852:	689a      	ldr	r2, [r3, #8]
    9854:	8abb      	ldrh	r3, [r7, #20]
    9856:	441a      	add	r2, r3
    9858:	687b      	ldr	r3, [r7, #4]
    985a:	609a      	str	r2, [r3, #8]
    985c:	e05c      	b.n	9918 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    985e:	687b      	ldr	r3, [r7, #4]
    9860:	689a      	ldr	r2, [r3, #8]
    9862:	8afb      	ldrh	r3, [r7, #22]
    9864:	441a      	add	r2, r3
    9866:	687b      	ldr	r3, [r7, #4]
    9868:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    986a:	687b      	ldr	r3, [r7, #4]
    986c:	689a      	ldr	r2, [r3, #8]
    986e:	687b      	ldr	r3, [r7, #4]
    9870:	685b      	ldr	r3, [r3, #4]
    9872:	429a      	cmp	r2, r3
    9874:	d250      	bcs.n	9918 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    9876:	687b      	ldr	r3, [r7, #4]
    9878:	685b      	ldr	r3, [r3, #4]
    987a:	b29a      	uxth	r2, r3
    987c:	687b      	ldr	r3, [r7, #4]
    987e:	689b      	ldr	r3, [r3, #8]
    9880:	b29b      	uxth	r3, r3
    9882:	1ad3      	subs	r3, r2, r3
    9884:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    9886:	687b      	ldr	r3, [r7, #4]
    9888:	7cdb      	ldrb	r3, [r3, #19]
    988a:	f003 0320 	and.w	r3, r3, #32
    988e:	b2db      	uxtb	r3, r3
    9890:	2b00      	cmp	r3, #0
    9892:	d010      	beq.n	98b6 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    9894:	687b      	ldr	r3, [r7, #4]
    9896:	8a1b      	ldrh	r3, [r3, #16]
    9898:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    989a:	429a      	cmp	r2, r3
    989c:	d902      	bls.n	98a4 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    989e:	687b      	ldr	r3, [r7, #4]
    98a0:	8a1b      	ldrh	r3, [r3, #16]
    98a2:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    98a4:	687b      	ldr	r3, [r7, #4]
    98a6:	68db      	ldr	r3, [r3, #12]
    98a8:	461a      	mov	r2, r3
    98aa:	7ffb      	ldrb	r3, [r7, #31]
    98ac:	2100      	movs	r1, #0
    98ae:	4618      	mov	r0, r3
    98b0:	4b35      	ldr	r3, [pc, #212]	; (9988 <_usb_d_dev_out_next+0x280>)
    98b2:	4798      	blx	r3
    98b4:	e029      	b.n	990a <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    98b6:	687b      	ldr	r3, [r7, #4]
    98b8:	8a1b      	ldrh	r3, [r3, #16]
    98ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    98bc:	429a      	cmp	r2, r3
    98be:	d90f      	bls.n	98e0 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    98c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    98c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    98c6:	d903      	bls.n	98d0 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    98c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    98cc:	84fb      	strh	r3, [r7, #38]	; 0x26
    98ce:	e011      	b.n	98f4 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    98d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    98d2:	8a7b      	ldrh	r3, [r7, #18]
    98d4:	4013      	ands	r3, r2
    98d6:	b29b      	uxth	r3, r3
    98d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    98da:	1ad3      	subs	r3, r2, r3
    98dc:	84fb      	strh	r3, [r7, #38]	; 0x26
    98de:	e009      	b.n	98f4 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    98e0:	687b      	ldr	r3, [r7, #4]
    98e2:	8a1b      	ldrh	r3, [r3, #16]
    98e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    98e6:	429a      	cmp	r2, r3
    98e8:	d204      	bcs.n	98f4 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    98ea:	687a      	ldr	r2, [r7, #4]
    98ec:	7cd3      	ldrb	r3, [r2, #19]
    98ee:	f043 0320 	orr.w	r3, r3, #32
    98f2:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    98f4:	687b      	ldr	r3, [r7, #4]
    98f6:	681a      	ldr	r2, [r3, #0]
    98f8:	687b      	ldr	r3, [r7, #4]
    98fa:	689b      	ldr	r3, [r3, #8]
    98fc:	4413      	add	r3, r2
    98fe:	461a      	mov	r2, r3
    9900:	7ffb      	ldrb	r3, [r7, #31]
    9902:	2100      	movs	r1, #0
    9904:	4618      	mov	r0, r3
    9906:	4b20      	ldr	r3, [pc, #128]	; (9988 <_usb_d_dev_out_next+0x280>)
    9908:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    990a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    990c:	7ff8      	ldrb	r0, [r7, #31]
    990e:	2300      	movs	r3, #0
    9910:	2100      	movs	r1, #0
    9912:	4c1e      	ldr	r4, [pc, #120]	; (998c <_usb_d_dev_out_next+0x284>)
    9914:	47a0      	blx	r4
			goto _out_rx_exec;
    9916:	e01f      	b.n	9958 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    9918:	7bfb      	ldrb	r3, [r7, #15]
    991a:	2b00      	cmp	r3, #0
    991c:	d006      	beq.n	992c <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    991e:	7ffb      	ldrb	r3, [r7, #31]
    9920:	222d      	movs	r2, #45	; 0x2d
    9922:	4619      	mov	r1, r3
    9924:	6a38      	ldr	r0, [r7, #32]
    9926:	4b1a      	ldr	r3, [pc, #104]	; (9990 <_usb_d_dev_out_next+0x288>)
    9928:	4798      	blx	r3
    992a:	e005      	b.n	9938 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    992c:	7ffb      	ldrb	r3, [r7, #31]
    992e:	2225      	movs	r2, #37	; 0x25
    9930:	4619      	mov	r1, r3
    9932:	6a38      	ldr	r0, [r7, #32]
    9934:	4b16      	ldr	r3, [pc, #88]	; (9990 <_usb_d_dev_out_next+0x288>)
    9936:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    9938:	7ffb      	ldrb	r3, [r7, #31]
    993a:	2b00      	cmp	r3, #0
    993c:	d107      	bne.n	994e <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    993e:	687b      	ldr	r3, [r7, #4]
    9940:	68db      	ldr	r3, [r3, #12]
    9942:	461a      	mov	r2, r3
    9944:	7ffb      	ldrb	r3, [r7, #31]
    9946:	2100      	movs	r1, #0
    9948:	4618      	mov	r0, r3
    994a:	4b0f      	ldr	r3, [pc, #60]	; (9988 <_usb_d_dev_out_next+0x280>)
    994c:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    994e:	2100      	movs	r1, #0
    9950:	6878      	ldr	r0, [r7, #4]
    9952:	4b10      	ldr	r3, [pc, #64]	; (9994 <_usb_d_dev_out_next+0x28c>)
    9954:	4798      	blx	r3
	return;
    9956:	e031      	b.n	99bc <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    9958:	78fb      	ldrb	r3, [r7, #3]
    995a:	f083 0301 	eor.w	r3, r3, #1
    995e:	b2db      	uxtb	r3, r3
    9960:	2b00      	cmp	r3, #0
    9962:	d025      	beq.n	99b0 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    9964:	7bfb      	ldrb	r3, [r7, #15]
    9966:	2b00      	cmp	r3, #0
    9968:	d018      	beq.n	999c <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    996a:	7ffb      	ldrb	r3, [r7, #31]
    996c:	2101      	movs	r1, #1
    996e:	4618      	mov	r0, r3
    9970:	4b09      	ldr	r3, [pc, #36]	; (9998 <_usb_d_dev_out_next+0x290>)
    9972:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9974:	232d      	movs	r3, #45	; 0x2d
    9976:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    997a:	e012      	b.n	99a2 <_usb_d_dev_out_next+0x29a>
    997c:	20000df0 	.word	0x20000df0
    9980:	00008ee9 	.word	0x00008ee9
    9984:	0000e8e1 	.word	0x0000e8e1
    9988:	00008f15 	.word	0x00008f15
    998c:	0000909d 	.word	0x0000909d
    9990:	000087f5 	.word	0x000087f5
    9994:	0000a819 	.word	0x0000a819
    9998:	000090dd 	.word	0x000090dd
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    999c:	2325      	movs	r3, #37	; 0x25
    999e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    99a2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    99a6:	7ffb      	ldrb	r3, [r7, #31]
    99a8:	4619      	mov	r1, r3
    99aa:	6a38      	ldr	r0, [r7, #32]
    99ac:	4b05      	ldr	r3, [pc, #20]	; (99c4 <_usb_d_dev_out_next+0x2bc>)
    99ae:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    99b0:	7ffb      	ldrb	r3, [r7, #31]
    99b2:	2201      	movs	r2, #1
    99b4:	2100      	movs	r1, #0
    99b6:	4618      	mov	r0, r3
    99b8:	4b03      	ldr	r3, [pc, #12]	; (99c8 <_usb_d_dev_out_next+0x2c0>)
    99ba:	4798      	blx	r3
}
    99bc:	372c      	adds	r7, #44	; 0x2c
    99be:	46bd      	mov	sp, r7
    99c0:	bd90      	pop	{r4, r7, pc}
    99c2:	bf00      	nop
    99c4:	000087c9 	.word	0x000087c9
    99c8:	0000916d 	.word	0x0000916d

000099cc <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    99cc:	b580      	push	{r7, lr}
    99ce:	b084      	sub	sp, #16
    99d0:	af00      	add	r7, sp, #0
    99d2:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    99d4:	687b      	ldr	r3, [r7, #4]
    99d6:	7c9b      	ldrb	r3, [r3, #18]
    99d8:	f003 030f 	and.w	r3, r3, #15
    99dc:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    99de:	687b      	ldr	r3, [r7, #4]
    99e0:	7cdb      	ldrb	r3, [r3, #19]
    99e2:	f003 0307 	and.w	r3, r3, #7
    99e6:	b2db      	uxtb	r3, r3
    99e8:	2b01      	cmp	r3, #1
    99ea:	bf0c      	ite	eq
    99ec:	2301      	moveq	r3, #1
    99ee:	2300      	movne	r3, #0
    99f0:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    99f2:	7bbb      	ldrb	r3, [r7, #14]
    99f4:	f083 0301 	eor.w	r3, r3, #1
    99f8:	b2db      	uxtb	r3, r3
    99fa:	2b00      	cmp	r3, #0
    99fc:	d008      	beq.n	9a10 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    99fe:	7bfb      	ldrb	r3, [r7, #15]
    9a00:	4618      	mov	r0, r3
    9a02:	4b20      	ldr	r3, [pc, #128]	; (9a84 <_usb_d_dev_handle_setup+0xb8>)
    9a04:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    9a06:	7bfb      	ldrb	r3, [r7, #15]
    9a08:	4618      	mov	r0, r3
    9a0a:	4b1f      	ldr	r3, [pc, #124]	; (9a88 <_usb_d_dev_handle_setup+0xbc>)
    9a0c:	4798      	blx	r3
		return;
    9a0e:	e036      	b.n	9a7e <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9a10:	687b      	ldr	r3, [r7, #4]
    9a12:	7cdb      	ldrb	r3, [r3, #19]
    9a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9a18:	b2db      	uxtb	r3, r3
    9a1a:	2b00      	cmp	r3, #0
    9a1c:	d010      	beq.n	9a40 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    9a1e:	687a      	ldr	r2, [r7, #4]
    9a20:	7cd3      	ldrb	r3, [r2, #19]
    9a22:	f36f 1386 	bfc	r3, #6, #1
    9a26:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9a28:	7bfb      	ldrb	r3, [r7, #15]
    9a2a:	2200      	movs	r2, #0
    9a2c:	2101      	movs	r1, #1
    9a2e:	4618      	mov	r0, r3
    9a30:	4b16      	ldr	r3, [pc, #88]	; (9a8c <_usb_d_dev_handle_setup+0xc0>)
    9a32:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    9a34:	7bfb      	ldrb	r3, [r7, #15]
    9a36:	2200      	movs	r2, #0
    9a38:	2100      	movs	r1, #0
    9a3a:	4618      	mov	r0, r3
    9a3c:	4b14      	ldr	r3, [pc, #80]	; (9a90 <_usb_d_dev_handle_setup+0xc4>)
    9a3e:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    9a40:	687a      	ldr	r2, [r7, #4]
    9a42:	7cd3      	ldrb	r3, [r2, #19]
    9a44:	f36f 03c3 	bfc	r3, #3, #1
    9a48:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    9a4a:	7bfb      	ldrb	r3, [r7, #15]
    9a4c:	2100      	movs	r1, #0
    9a4e:	4618      	mov	r0, r3
    9a50:	4b10      	ldr	r3, [pc, #64]	; (9a94 <_usb_d_dev_handle_setup+0xc8>)
    9a52:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    9a54:	7bfb      	ldrb	r3, [r7, #15]
    9a56:	2101      	movs	r1, #1
    9a58:	4618      	mov	r0, r3
    9a5a:	4b0e      	ldr	r3, [pc, #56]	; (9a94 <_usb_d_dev_handle_setup+0xc8>)
    9a5c:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9a5e:	7bfb      	ldrb	r3, [r7, #15]
    9a60:	216f      	movs	r1, #111	; 0x6f
    9a62:	4618      	mov	r0, r3
    9a64:	4b0c      	ldr	r3, [pc, #48]	; (9a98 <_usb_d_dev_handle_setup+0xcc>)
    9a66:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9a68:	7bfb      	ldrb	r3, [r7, #15]
    9a6a:	216f      	movs	r1, #111	; 0x6f
    9a6c:	4618      	mov	r0, r3
    9a6e:	4b0b      	ldr	r3, [pc, #44]	; (9a9c <_usb_d_dev_handle_setup+0xd0>)
    9a70:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    9a72:	4b0b      	ldr	r3, [pc, #44]	; (9aa0 <_usb_d_dev_handle_setup+0xd4>)
    9a74:	689b      	ldr	r3, [r3, #8]
    9a76:	687a      	ldr	r2, [r7, #4]
    9a78:	7c92      	ldrb	r2, [r2, #18]
    9a7a:	4610      	mov	r0, r2
    9a7c:	4798      	blx	r3
}
    9a7e:	3710      	adds	r7, #16
    9a80:	46bd      	mov	sp, r7
    9a82:	bd80      	pop	{r7, pc}
    9a84:	00008e71 	.word	0x00008e71
    9a88:	00008e1d 	.word	0x00008e1d
    9a8c:	00009115 	.word	0x00009115
    9a90:	0000916d 	.word	0x0000916d
    9a94:	000090dd 	.word	0x000090dd
    9a98:	00008c1d 	.word	0x00008c1d
    9a9c:	00008c6d 	.word	0x00008c6d
    9aa0:	20000d28 	.word	0x20000d28

00009aa4 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9aa4:	b580      	push	{r7, lr}
    9aa6:	b084      	sub	sp, #16
    9aa8:	af00      	add	r7, sp, #0
    9aaa:	6078      	str	r0, [r7, #4]
    9aac:	460b      	mov	r3, r1
    9aae:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9ab0:	687b      	ldr	r3, [r7, #4]
    9ab2:	7c9b      	ldrb	r3, [r3, #18]
    9ab4:	f003 030f 	and.w	r3, r3, #15
    9ab8:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    9aba:	78f9      	ldrb	r1, [r7, #3]
    9abc:	7bfb      	ldrb	r3, [r7, #15]
    9abe:	2200      	movs	r2, #0
    9ac0:	4618      	mov	r0, r3
    9ac2:	4b07      	ldr	r3, [pc, #28]	; (9ae0 <_usb_d_dev_handle_stall+0x3c>)
    9ac4:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    9ac6:	4b07      	ldr	r3, [pc, #28]	; (9ae4 <_usb_d_dev_handle_stall+0x40>)
    9ac8:	691b      	ldr	r3, [r3, #16]
    9aca:	687a      	ldr	r2, [r7, #4]
    9acc:	7c90      	ldrb	r0, [r2, #18]
    9ace:	687a      	ldr	r2, [r7, #4]
    9ad0:	6892      	ldr	r2, [r2, #8]
    9ad2:	2101      	movs	r1, #1
    9ad4:	4798      	blx	r3
}
    9ad6:	bf00      	nop
    9ad8:	3710      	adds	r7, #16
    9ada:	46bd      	mov	sp, r7
    9adc:	bd80      	pop	{r7, pc}
    9ade:	bf00      	nop
    9ae0:	00008dd1 	.word	0x00008dd1
    9ae4:	20000d28 	.word	0x20000d28

00009ae8 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9ae8:	b580      	push	{r7, lr}
    9aea:	b088      	sub	sp, #32
    9aec:	af00      	add	r7, sp, #0
    9aee:	6078      	str	r0, [r7, #4]
    9af0:	460b      	mov	r3, r1
    9af2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    9af4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9af8:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    9afa:	687b      	ldr	r3, [r7, #4]
    9afc:	7c9b      	ldrb	r3, [r3, #18]
    9afe:	f003 030f 	and.w	r3, r3, #15
    9b02:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    9b04:	4b61      	ldr	r3, [pc, #388]	; (9c8c <_usb_d_dev_handle_trfail+0x1a4>)
    9b06:	881b      	ldrh	r3, [r3, #0]
    9b08:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    9b0a:	7efb      	ldrb	r3, [r7, #27]
    9b0c:	015b      	lsls	r3, r3, #5
    9b0e:	4a60      	ldr	r2, [pc, #384]	; (9c90 <_usb_d_dev_handle_trfail+0x1a8>)
    9b10:	4413      	add	r3, r2
    9b12:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    9b14:	78fb      	ldrb	r3, [r7, #3]
    9b16:	2b00      	cmp	r3, #0
    9b18:	d006      	beq.n	9b28 <_usb_d_dev_handle_trfail+0x40>
    9b1a:	7efb      	ldrb	r3, [r7, #27]
    9b1c:	4619      	mov	r1, r3
    9b1e:	69f8      	ldr	r0, [r7, #28]
    9b20:	4b5c      	ldr	r3, [pc, #368]	; (9c94 <_usb_d_dev_handle_trfail+0x1ac>)
    9b22:	4798      	blx	r3
    9b24:	4603      	mov	r3, r0
    9b26:	e005      	b.n	9b34 <_usb_d_dev_handle_trfail+0x4c>
    9b28:	7efb      	ldrb	r3, [r7, #27]
    9b2a:	4619      	mov	r1, r3
    9b2c:	69f8      	ldr	r0, [r7, #28]
    9b2e:	4b5a      	ldr	r3, [pc, #360]	; (9c98 <_usb_d_dev_handle_trfail+0x1b0>)
    9b30:	4798      	blx	r3
    9b32:	4603      	mov	r3, r0
    9b34:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9b36:	687b      	ldr	r3, [r7, #4]
    9b38:	7cdb      	ldrb	r3, [r3, #19]
    9b3a:	f003 0307 	and.w	r3, r3, #7
    9b3e:	b2db      	uxtb	r3, r3
    9b40:	2b01      	cmp	r3, #1
    9b42:	bf0c      	ite	eq
    9b44:	2301      	moveq	r3, #1
    9b46:	2300      	movne	r3, #0
    9b48:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    9b4a:	78fb      	ldrb	r3, [r7, #3]
    9b4c:	011b      	lsls	r3, r3, #4
    9b4e:	697a      	ldr	r2, [r7, #20]
    9b50:	4413      	add	r3, r2
    9b52:	7a9b      	ldrb	r3, [r3, #10]
    9b54:	b2db      	uxtb	r3, r3
    9b56:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    9b58:	7cfb      	ldrb	r3, [r7, #19]
    9b5a:	2b02      	cmp	r3, #2
    9b5c:	d12f      	bne.n	9bbe <_usb_d_dev_handle_trfail+0xd6>
    9b5e:	7b3b      	ldrb	r3, [r7, #12]
    9b60:	f003 0301 	and.w	r3, r3, #1
    9b64:	b2db      	uxtb	r3, r3
    9b66:	2b00      	cmp	r3, #0
    9b68:	d029      	beq.n	9bbe <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    9b6a:	78fb      	ldrb	r3, [r7, #3]
    9b6c:	011b      	lsls	r3, r3, #4
    9b6e:	697a      	ldr	r2, [r7, #20]
    9b70:	441a      	add	r2, r3
    9b72:	7a93      	ldrb	r3, [r2, #10]
    9b74:	f36f 0300 	bfc	r3, #0, #1
    9b78:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9b7a:	78fb      	ldrb	r3, [r7, #3]
    9b7c:	f107 0220 	add.w	r2, r7, #32
    9b80:	4413      	add	r3, r2
    9b82:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9b86:	7efb      	ldrb	r3, [r7, #27]
    9b88:	4619      	mov	r1, r3
    9b8a:	69f8      	ldr	r0, [r7, #28]
    9b8c:	4b43      	ldr	r3, [pc, #268]	; (9c9c <_usb_d_dev_handle_trfail+0x1b4>)
    9b8e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9b90:	78fb      	ldrb	r3, [r7, #3]
    9b92:	f107 0220 	add.w	r2, r7, #32
    9b96:	4413      	add	r3, r2
    9b98:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9b9c:	7efb      	ldrb	r3, [r7, #27]
    9b9e:	4619      	mov	r1, r3
    9ba0:	69f8      	ldr	r0, [r7, #28]
    9ba2:	4b3f      	ldr	r3, [pc, #252]	; (9ca0 <_usb_d_dev_handle_trfail+0x1b8>)
    9ba4:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    9ba6:	78fb      	ldrb	r3, [r7, #3]
    9ba8:	2b00      	cmp	r3, #0
    9baa:	bf14      	ite	ne
    9bac:	2301      	movne	r3, #1
    9bae:	2300      	moveq	r3, #0
    9bb0:	b2db      	uxtb	r3, r3
    9bb2:	2204      	movs	r2, #4
    9bb4:	4619      	mov	r1, r3
    9bb6:	6878      	ldr	r0, [r7, #4]
    9bb8:	4b3a      	ldr	r3, [pc, #232]	; (9ca4 <_usb_d_dev_handle_trfail+0x1bc>)
    9bba:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    9bbc:	e062      	b.n	9c84 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    9bbe:	7b3b      	ldrb	r3, [r7, #12]
    9bc0:	f003 0302 	and.w	r3, r3, #2
    9bc4:	b2db      	uxtb	r3, r3
    9bc6:	2b00      	cmp	r3, #0
    9bc8:	d040      	beq.n	9c4c <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    9bca:	78fb      	ldrb	r3, [r7, #3]
    9bcc:	011b      	lsls	r3, r3, #4
    9bce:	697a      	ldr	r2, [r7, #20]
    9bd0:	441a      	add	r2, r3
    9bd2:	7a93      	ldrb	r3, [r2, #10]
    9bd4:	f36f 0341 	bfc	r3, #1, #1
    9bd8:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9bda:	78fb      	ldrb	r3, [r7, #3]
    9bdc:	f107 0220 	add.w	r2, r7, #32
    9be0:	4413      	add	r3, r2
    9be2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9be6:	7efb      	ldrb	r3, [r7, #27]
    9be8:	4619      	mov	r1, r3
    9bea:	69f8      	ldr	r0, [r7, #28]
    9bec:	4b2b      	ldr	r3, [pc, #172]	; (9c9c <_usb_d_dev_handle_trfail+0x1b4>)
    9bee:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9bf0:	78fb      	ldrb	r3, [r7, #3]
    9bf2:	f107 0220 	add.w	r2, r7, #32
    9bf6:	4413      	add	r3, r2
    9bf8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9bfc:	7efb      	ldrb	r3, [r7, #27]
    9bfe:	4619      	mov	r1, r3
    9c00:	69f8      	ldr	r0, [r7, #28]
    9c02:	4b27      	ldr	r3, [pc, #156]	; (9ca0 <_usb_d_dev_handle_trfail+0x1b8>)
    9c04:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    9c06:	7cbb      	ldrb	r3, [r7, #18]
    9c08:	2b00      	cmp	r3, #0
    9c0a:	d03b      	beq.n	9c84 <_usb_d_dev_handle_trfail+0x19c>
    9c0c:	687b      	ldr	r3, [r7, #4]
    9c0e:	7cdb      	ldrb	r3, [r3, #19]
    9c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9c14:	b2db      	uxtb	r3, r3
    9c16:	2b00      	cmp	r3, #0
    9c18:	d034      	beq.n	9c84 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    9c1a:	687b      	ldr	r3, [r7, #4]
    9c1c:	7cdb      	ldrb	r3, [r3, #19]
    9c1e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9c22:	b2db      	uxtb	r3, r3
    9c24:	461a      	mov	r2, r3
    9c26:	78fb      	ldrb	r3, [r7, #3]
    9c28:	4293      	cmp	r3, r2
    9c2a:	d02b      	beq.n	9c84 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9c2c:	687b      	ldr	r3, [r7, #4]
    9c2e:	7cdb      	ldrb	r3, [r3, #19]
    9c30:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9c34:	b2db      	uxtb	r3, r3
    9c36:	2b00      	cmp	r3, #0
    9c38:	bf14      	ite	ne
    9c3a:	2301      	movne	r3, #1
    9c3c:	2300      	moveq	r3, #0
    9c3e:	b2db      	uxtb	r3, r3
    9c40:	2200      	movs	r2, #0
    9c42:	4619      	mov	r1, r3
    9c44:	6878      	ldr	r0, [r7, #4]
    9c46:	4b17      	ldr	r3, [pc, #92]	; (9ca4 <_usb_d_dev_handle_trfail+0x1bc>)
    9c48:	4798      	blx	r3
}
    9c4a:	e01b      	b.n	9c84 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    9c4c:	78fa      	ldrb	r2, [r7, #3]
    9c4e:	7efb      	ldrb	r3, [r7, #27]
    9c50:	4611      	mov	r1, r2
    9c52:	4618      	mov	r0, r3
    9c54:	4b14      	ldr	r3, [pc, #80]	; (9ca8 <_usb_d_dev_handle_trfail+0x1c0>)
    9c56:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9c58:	78fb      	ldrb	r3, [r7, #3]
    9c5a:	f107 0220 	add.w	r2, r7, #32
    9c5e:	4413      	add	r3, r2
    9c60:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9c64:	7efb      	ldrb	r3, [r7, #27]
    9c66:	4619      	mov	r1, r3
    9c68:	69f8      	ldr	r0, [r7, #28]
    9c6a:	4b0c      	ldr	r3, [pc, #48]	; (9c9c <_usb_d_dev_handle_trfail+0x1b4>)
    9c6c:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9c6e:	78fb      	ldrb	r3, [r7, #3]
    9c70:	f107 0220 	add.w	r2, r7, #32
    9c74:	4413      	add	r3, r2
    9c76:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9c7a:	7efb      	ldrb	r3, [r7, #27]
    9c7c:	4619      	mov	r1, r3
    9c7e:	69f8      	ldr	r0, [r7, #28]
    9c80:	4b07      	ldr	r3, [pc, #28]	; (9ca0 <_usb_d_dev_handle_trfail+0x1b8>)
    9c82:	4798      	blx	r3
}
    9c84:	bf00      	nop
    9c86:	3720      	adds	r7, #32
    9c88:	46bd      	mov	sp, r7
    9c8a:	bd80      	pop	{r7, pc}
    9c8c:	0000ef64 	.word	0x0000ef64
    9c90:	20000df0 	.word	0x20000df0
    9c94:	00008851 	.word	0x00008851
    9c98:	00008821 	.word	0x00008821
    9c9c:	000086f5 	.word	0x000086f5
    9ca0:	000087f5 	.word	0x000087f5
    9ca4:	0000a861 	.word	0x0000a861
    9ca8:	000090dd 	.word	0x000090dd

00009cac <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9cac:	b580      	push	{r7, lr}
    9cae:	b082      	sub	sp, #8
    9cb0:	af00      	add	r7, sp, #0
    9cb2:	6078      	str	r0, [r7, #4]
    9cb4:	460b      	mov	r3, r1
    9cb6:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9cb8:	78fb      	ldrb	r3, [r7, #3]
    9cba:	f003 0310 	and.w	r3, r3, #16
    9cbe:	2b00      	cmp	r3, #0
    9cc0:	d003      	beq.n	9cca <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    9cc2:	6878      	ldr	r0, [r7, #4]
    9cc4:	4b0c      	ldr	r3, [pc, #48]	; (9cf8 <_usb_d_dev_trans_setup_isr+0x4c>)
    9cc6:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9cc8:	e012      	b.n	9cf0 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9cca:	78fb      	ldrb	r3, [r7, #3]
    9ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9cd0:	2b00      	cmp	r3, #0
    9cd2:	d004      	beq.n	9cde <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    9cd4:	2101      	movs	r1, #1
    9cd6:	6878      	ldr	r0, [r7, #4]
    9cd8:	4b08      	ldr	r3, [pc, #32]	; (9cfc <_usb_d_dev_trans_setup_isr+0x50>)
    9cda:	4798      	blx	r3
}
    9cdc:	e008      	b.n	9cf0 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9cde:	78fb      	ldrb	r3, [r7, #3]
    9ce0:	f003 0320 	and.w	r3, r3, #32
    9ce4:	2b00      	cmp	r3, #0
    9ce6:	d003      	beq.n	9cf0 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9ce8:	2100      	movs	r1, #0
    9cea:	6878      	ldr	r0, [r7, #4]
    9cec:	4b03      	ldr	r3, [pc, #12]	; (9cfc <_usb_d_dev_trans_setup_isr+0x50>)
    9cee:	4798      	blx	r3
}
    9cf0:	bf00      	nop
    9cf2:	3708      	adds	r7, #8
    9cf4:	46bd      	mov	sp, r7
    9cf6:	bd80      	pop	{r7, pc}
    9cf8:	000099cd 	.word	0x000099cd
    9cfc:	00009aa5 	.word	0x00009aa5

00009d00 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9d00:	b580      	push	{r7, lr}
    9d02:	b082      	sub	sp, #8
    9d04:	af00      	add	r7, sp, #0
    9d06:	6078      	str	r0, [r7, #4]
    9d08:	460b      	mov	r3, r1
    9d0a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9d0c:	78fb      	ldrb	r3, [r7, #3]
    9d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9d12:	2b00      	cmp	r3, #0
    9d14:	d004      	beq.n	9d20 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    9d16:	2101      	movs	r1, #1
    9d18:	6878      	ldr	r0, [r7, #4]
    9d1a:	4b1a      	ldr	r3, [pc, #104]	; (9d84 <_usb_d_dev_trans_in_isr+0x84>)
    9d1c:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9d1e:	e02c      	b.n	9d7a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9d20:	78fb      	ldrb	r3, [r7, #3]
    9d22:	f003 0308 	and.w	r3, r3, #8
    9d26:	2b00      	cmp	r3, #0
    9d28:	d004      	beq.n	9d34 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    9d2a:	2101      	movs	r1, #1
    9d2c:	6878      	ldr	r0, [r7, #4]
    9d2e:	4b16      	ldr	r3, [pc, #88]	; (9d88 <_usb_d_dev_trans_in_isr+0x88>)
    9d30:	4798      	blx	r3
}
    9d32:	e022      	b.n	9d7a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9d34:	78fb      	ldrb	r3, [r7, #3]
    9d36:	f003 0302 	and.w	r3, r3, #2
    9d3a:	2b00      	cmp	r3, #0
    9d3c:	d004      	beq.n	9d48 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    9d3e:	2101      	movs	r1, #1
    9d40:	6878      	ldr	r0, [r7, #4]
    9d42:	4b12      	ldr	r3, [pc, #72]	; (9d8c <_usb_d_dev_trans_in_isr+0x8c>)
    9d44:	4798      	blx	r3
}
    9d46:	e018      	b.n	9d7a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9d48:	687b      	ldr	r3, [r7, #4]
    9d4a:	7cdb      	ldrb	r3, [r3, #19]
    9d4c:	f003 0307 	and.w	r3, r3, #7
    9d50:	b2db      	uxtb	r3, r3
    9d52:	2b01      	cmp	r3, #1
    9d54:	d111      	bne.n	9d7a <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9d56:	78fb      	ldrb	r3, [r7, #3]
    9d58:	f003 0304 	and.w	r3, r3, #4
    9d5c:	2b00      	cmp	r3, #0
    9d5e:	d004      	beq.n	9d6a <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    9d60:	2100      	movs	r1, #0
    9d62:	6878      	ldr	r0, [r7, #4]
    9d64:	4b08      	ldr	r3, [pc, #32]	; (9d88 <_usb_d_dev_trans_in_isr+0x88>)
    9d66:	4798      	blx	r3
}
    9d68:	e007      	b.n	9d7a <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9d6a:	78fb      	ldrb	r3, [r7, #3]
    9d6c:	f003 0310 	and.w	r3, r3, #16
    9d70:	2b00      	cmp	r3, #0
    9d72:	d002      	beq.n	9d7a <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9d74:	6878      	ldr	r0, [r7, #4]
    9d76:	4b06      	ldr	r3, [pc, #24]	; (9d90 <_usb_d_dev_trans_in_isr+0x90>)
    9d78:	4798      	blx	r3
}
    9d7a:	bf00      	nop
    9d7c:	3708      	adds	r7, #8
    9d7e:	46bd      	mov	sp, r7
    9d80:	bd80      	pop	{r7, pc}
    9d82:	bf00      	nop
    9d84:	00009aa5 	.word	0x00009aa5
    9d88:	00009ae9 	.word	0x00009ae9
    9d8c:	000094f1 	.word	0x000094f1
    9d90:	000099cd 	.word	0x000099cd

00009d94 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9d94:	b580      	push	{r7, lr}
    9d96:	b082      	sub	sp, #8
    9d98:	af00      	add	r7, sp, #0
    9d9a:	6078      	str	r0, [r7, #4]
    9d9c:	460b      	mov	r3, r1
    9d9e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9da0:	78fb      	ldrb	r3, [r7, #3]
    9da2:	f003 0320 	and.w	r3, r3, #32
    9da6:	2b00      	cmp	r3, #0
    9da8:	d004      	beq.n	9db4 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    9daa:	2100      	movs	r1, #0
    9dac:	6878      	ldr	r0, [r7, #4]
    9dae:	4b1a      	ldr	r3, [pc, #104]	; (9e18 <_usb_d_dev_trans_out_isr+0x84>)
    9db0:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9db2:	e02c      	b.n	9e0e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9db4:	78fb      	ldrb	r3, [r7, #3]
    9db6:	f003 0304 	and.w	r3, r3, #4
    9dba:	2b00      	cmp	r3, #0
    9dbc:	d004      	beq.n	9dc8 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    9dbe:	2100      	movs	r1, #0
    9dc0:	6878      	ldr	r0, [r7, #4]
    9dc2:	4b16      	ldr	r3, [pc, #88]	; (9e1c <_usb_d_dev_trans_out_isr+0x88>)
    9dc4:	4798      	blx	r3
}
    9dc6:	e022      	b.n	9e0e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9dc8:	78fb      	ldrb	r3, [r7, #3]
    9dca:	f003 0301 	and.w	r3, r3, #1
    9dce:	2b00      	cmp	r3, #0
    9dd0:	d004      	beq.n	9ddc <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    9dd2:	2101      	movs	r1, #1
    9dd4:	6878      	ldr	r0, [r7, #4]
    9dd6:	4b12      	ldr	r3, [pc, #72]	; (9e20 <_usb_d_dev_trans_out_isr+0x8c>)
    9dd8:	4798      	blx	r3
}
    9dda:	e018      	b.n	9e0e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9ddc:	687b      	ldr	r3, [r7, #4]
    9dde:	7cdb      	ldrb	r3, [r3, #19]
    9de0:	f003 0307 	and.w	r3, r3, #7
    9de4:	b2db      	uxtb	r3, r3
    9de6:	2b01      	cmp	r3, #1
    9de8:	d111      	bne.n	9e0e <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9dea:	78fb      	ldrb	r3, [r7, #3]
    9dec:	f003 0308 	and.w	r3, r3, #8
    9df0:	2b00      	cmp	r3, #0
    9df2:	d004      	beq.n	9dfe <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    9df4:	2101      	movs	r1, #1
    9df6:	6878      	ldr	r0, [r7, #4]
    9df8:	4b08      	ldr	r3, [pc, #32]	; (9e1c <_usb_d_dev_trans_out_isr+0x88>)
    9dfa:	4798      	blx	r3
}
    9dfc:	e007      	b.n	9e0e <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9dfe:	78fb      	ldrb	r3, [r7, #3]
    9e00:	f003 0310 	and.w	r3, r3, #16
    9e04:	2b00      	cmp	r3, #0
    9e06:	d002      	beq.n	9e0e <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9e08:	6878      	ldr	r0, [r7, #4]
    9e0a:	4b06      	ldr	r3, [pc, #24]	; (9e24 <_usb_d_dev_trans_out_isr+0x90>)
    9e0c:	4798      	blx	r3
}
    9e0e:	bf00      	nop
    9e10:	3708      	adds	r7, #8
    9e12:	46bd      	mov	sp, r7
    9e14:	bd80      	pop	{r7, pc}
    9e16:	bf00      	nop
    9e18:	00009aa5 	.word	0x00009aa5
    9e1c:	00009ae9 	.word	0x00009ae9
    9e20:	00009709 	.word	0x00009709
    9e24:	000099cd 	.word	0x000099cd

00009e28 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9e28:	b580      	push	{r7, lr}
    9e2a:	b084      	sub	sp, #16
    9e2c:	af00      	add	r7, sp, #0
    9e2e:	6078      	str	r0, [r7, #4]
    9e30:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    9e32:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9e36:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9e38:	683b      	ldr	r3, [r7, #0]
    9e3a:	7c9b      	ldrb	r3, [r3, #18]
    9e3c:	f003 030f 	and.w	r3, r3, #15
    9e40:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    9e42:	7afb      	ldrb	r3, [r7, #11]
    9e44:	2201      	movs	r2, #1
    9e46:	409a      	lsls	r2, r3
    9e48:	687b      	ldr	r3, [r7, #4]
    9e4a:	4013      	ands	r3, r2
    9e4c:	2b00      	cmp	r3, #0
    9e4e:	d03d      	beq.n	9ecc <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    9e50:	7afb      	ldrb	r3, [r7, #11]
    9e52:	68fa      	ldr	r2, [r7, #12]
    9e54:	3308      	adds	r3, #8
    9e56:	015b      	lsls	r3, r3, #5
    9e58:	4413      	add	r3, r2
    9e5a:	3307      	adds	r3, #7
    9e5c:	781b      	ldrb	r3, [r3, #0]
    9e5e:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    9e60:	7afb      	ldrb	r3, [r7, #11]
    9e62:	68fa      	ldr	r2, [r7, #12]
    9e64:	015b      	lsls	r3, r3, #5
    9e66:	4413      	add	r3, r2
    9e68:	f203 1309 	addw	r3, r3, #265	; 0x109
    9e6c:	781b      	ldrb	r3, [r3, #0]
    9e6e:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    9e70:	7aba      	ldrb	r2, [r7, #10]
    9e72:	7a7b      	ldrb	r3, [r7, #9]
    9e74:	4013      	ands	r3, r2
    9e76:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    9e78:	7abb      	ldrb	r3, [r7, #10]
    9e7a:	2b00      	cmp	r3, #0
    9e7c:	d027      	beq.n	9ece <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    9e7e:	683b      	ldr	r3, [r7, #0]
    9e80:	7cdb      	ldrb	r3, [r3, #19]
    9e82:	f003 0307 	and.w	r3, r3, #7
    9e86:	b2db      	uxtb	r3, r3
    9e88:	2b01      	cmp	r3, #1
    9e8a:	d10c      	bne.n	9ea6 <_usb_d_dev_handle_eps+0x7e>
    9e8c:	683b      	ldr	r3, [r7, #0]
    9e8e:	7cdb      	ldrb	r3, [r3, #19]
    9e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9e94:	b2db      	uxtb	r3, r3
    9e96:	2b00      	cmp	r3, #0
    9e98:	d105      	bne.n	9ea6 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    9e9a:	7abb      	ldrb	r3, [r7, #10]
    9e9c:	4619      	mov	r1, r3
    9e9e:	6838      	ldr	r0, [r7, #0]
    9ea0:	4b0c      	ldr	r3, [pc, #48]	; (9ed4 <_usb_d_dev_handle_eps+0xac>)
    9ea2:	4798      	blx	r3
    9ea4:	e013      	b.n	9ece <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    9ea6:	683b      	ldr	r3, [r7, #0]
    9ea8:	7cdb      	ldrb	r3, [r3, #19]
    9eaa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9eae:	b2db      	uxtb	r3, r3
    9eb0:	2b00      	cmp	r3, #0
    9eb2:	d005      	beq.n	9ec0 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    9eb4:	7abb      	ldrb	r3, [r7, #10]
    9eb6:	4619      	mov	r1, r3
    9eb8:	6838      	ldr	r0, [r7, #0]
    9eba:	4b07      	ldr	r3, [pc, #28]	; (9ed8 <_usb_d_dev_handle_eps+0xb0>)
    9ebc:	4798      	blx	r3
    9ebe:	e006      	b.n	9ece <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    9ec0:	7abb      	ldrb	r3, [r7, #10]
    9ec2:	4619      	mov	r1, r3
    9ec4:	6838      	ldr	r0, [r7, #0]
    9ec6:	4b05      	ldr	r3, [pc, #20]	; (9edc <_usb_d_dev_handle_eps+0xb4>)
    9ec8:	4798      	blx	r3
    9eca:	e000      	b.n	9ece <_usb_d_dev_handle_eps+0xa6>
		return;
    9ecc:	bf00      	nop
		}
	}
}
    9ece:	3710      	adds	r7, #16
    9ed0:	46bd      	mov	sp, r7
    9ed2:	bd80      	pop	{r7, pc}
    9ed4:	00009cad 	.word	0x00009cad
    9ed8:	00009d01 	.word	0x00009d01
    9edc:	00009d95 	.word	0x00009d95

00009ee0 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    9ee0:	b580      	push	{r7, lr}
    9ee2:	b084      	sub	sp, #16
    9ee4:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9ee6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9eea:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    9eec:	68bb      	ldr	r3, [r7, #8]
    9eee:	8c1b      	ldrh	r3, [r3, #32]
    9ef0:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    9ef2:	88fb      	ldrh	r3, [r7, #6]
    9ef4:	2b00      	cmp	r3, #0
    9ef6:	d104      	bne.n	9f02 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    9ef8:	4b13      	ldr	r3, [pc, #76]	; (9f48 <_usb_d_dev_handler+0x68>)
    9efa:	4798      	blx	r3
    9efc:	4603      	mov	r3, r0
    9efe:	2b00      	cmp	r3, #0
    9f00:	d11e      	bne.n	9f40 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    9f02:	2300      	movs	r3, #0
    9f04:	73fb      	strb	r3, [r7, #15]
    9f06:	e017      	b.n	9f38 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    9f08:	7bfa      	ldrb	r2, [r7, #15]
    9f0a:	4613      	mov	r3, r2
    9f0c:	009b      	lsls	r3, r3, #2
    9f0e:	4413      	add	r3, r2
    9f10:	009b      	lsls	r3, r3, #2
    9f12:	3310      	adds	r3, #16
    9f14:	4a0d      	ldr	r2, [pc, #52]	; (9f4c <_usb_d_dev_handler+0x6c>)
    9f16:	4413      	add	r3, r2
    9f18:	3304      	adds	r3, #4
    9f1a:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    9f1c:	683b      	ldr	r3, [r7, #0]
    9f1e:	7c9b      	ldrb	r3, [r3, #18]
    9f20:	2bff      	cmp	r3, #255	; 0xff
    9f22:	d005      	beq.n	9f30 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    9f24:	88fb      	ldrh	r3, [r7, #6]
    9f26:	6839      	ldr	r1, [r7, #0]
    9f28:	4618      	mov	r0, r3
    9f2a:	4b09      	ldr	r3, [pc, #36]	; (9f50 <_usb_d_dev_handler+0x70>)
    9f2c:	4798      	blx	r3
    9f2e:	e000      	b.n	9f32 <_usb_d_dev_handler+0x52>
			continue;
    9f30:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    9f32:	7bfb      	ldrb	r3, [r7, #15]
    9f34:	3301      	adds	r3, #1
    9f36:	73fb      	strb	r3, [r7, #15]
    9f38:	7bfb      	ldrb	r3, [r7, #15]
    9f3a:	2b08      	cmp	r3, #8
    9f3c:	d9e4      	bls.n	9f08 <_usb_d_dev_handler+0x28>
    9f3e:	e000      	b.n	9f42 <_usb_d_dev_handler+0x62>
			return;
    9f40:	bf00      	nop
	}
}
    9f42:	3710      	adds	r7, #16
    9f44:	46bd      	mov	sp, r7
    9f46:	bd80      	pop	{r7, pc}
    9f48:	00009439 	.word	0x00009439
    9f4c:	20000d28 	.word	0x20000d28
    9f50:	00009e29 	.word	0x00009e29

00009f54 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    9f54:	b580      	push	{r7, lr}
    9f56:	b082      	sub	sp, #8
    9f58:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    9f5a:	2300      	movs	r3, #0
    9f5c:	71fb      	strb	r3, [r7, #7]
    9f5e:	e023      	b.n	9fa8 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    9f60:	79fa      	ldrb	r2, [r7, #7]
    9f62:	4613      	mov	r3, r2
    9f64:	009b      	lsls	r3, r3, #2
    9f66:	4413      	add	r3, r2
    9f68:	009b      	lsls	r3, r3, #2
    9f6a:	3310      	adds	r3, #16
    9f6c:	4a14      	ldr	r2, [pc, #80]	; (9fc0 <_usb_d_dev_reset_epts+0x6c>)
    9f6e:	4413      	add	r3, r2
    9f70:	3304      	adds	r3, #4
    9f72:	2103      	movs	r1, #3
    9f74:	4618      	mov	r0, r3
    9f76:	4b13      	ldr	r3, [pc, #76]	; (9fc4 <_usb_d_dev_reset_epts+0x70>)
    9f78:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    9f7a:	79fa      	ldrb	r2, [r7, #7]
    9f7c:	4910      	ldr	r1, [pc, #64]	; (9fc0 <_usb_d_dev_reset_epts+0x6c>)
    9f7e:	4613      	mov	r3, r2
    9f80:	009b      	lsls	r3, r3, #2
    9f82:	4413      	add	r3, r2
    9f84:	009b      	lsls	r3, r3, #2
    9f86:	440b      	add	r3, r1
    9f88:	3326      	adds	r3, #38	; 0x26
    9f8a:	22ff      	movs	r2, #255	; 0xff
    9f8c:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    9f8e:	79fa      	ldrb	r2, [r7, #7]
    9f90:	490b      	ldr	r1, [pc, #44]	; (9fc0 <_usb_d_dev_reset_epts+0x6c>)
    9f92:	4613      	mov	r3, r2
    9f94:	009b      	lsls	r3, r3, #2
    9f96:	4413      	add	r3, r2
    9f98:	009b      	lsls	r3, r3, #2
    9f9a:	440b      	add	r3, r1
    9f9c:	3327      	adds	r3, #39	; 0x27
    9f9e:	2200      	movs	r2, #0
    9fa0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    9fa2:	79fb      	ldrb	r3, [r7, #7]
    9fa4:	3301      	adds	r3, #1
    9fa6:	71fb      	strb	r3, [r7, #7]
    9fa8:	79fb      	ldrb	r3, [r7, #7]
    9faa:	2b08      	cmp	r3, #8
    9fac:	d9d8      	bls.n	9f60 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    9fae:	22a0      	movs	r2, #160	; 0xa0
    9fb0:	2100      	movs	r1, #0
    9fb2:	4805      	ldr	r0, [pc, #20]	; (9fc8 <_usb_d_dev_reset_epts+0x74>)
    9fb4:	4b05      	ldr	r3, [pc, #20]	; (9fcc <_usb_d_dev_reset_epts+0x78>)
    9fb6:	4798      	blx	r3
}
    9fb8:	bf00      	nop
    9fba:	3708      	adds	r7, #8
    9fbc:	46bd      	mov	sp, r7
    9fbe:	bd80      	pop	{r7, pc}
    9fc0:	20000d28 	.word	0x20000d28
    9fc4:	0000a819 	.word	0x0000a819
    9fc8:	20000df0 	.word	0x20000df0
    9fcc:	0000ea15 	.word	0x0000ea15

00009fd0 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9fd0:	b580      	push	{r7, lr}
    9fd2:	b084      	sub	sp, #16
    9fd4:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    9fd6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9fda:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    9fdc:	2301      	movs	r3, #1
    9fde:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9fe0:	2304      	movs	r3, #4
    9fe2:	713b      	strb	r3, [r7, #4]
    9fe4:	2300      	movs	r3, #0
    9fe6:	717b      	strb	r3, [r7, #5]
    9fe8:	2300      	movs	r3, #0
    9fea:	71bb      	strb	r3, [r7, #6]
    9fec:	2300      	movs	r3, #0
    9fee:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9ff0:	2101      	movs	r1, #1
    9ff2:	68f8      	ldr	r0, [r7, #12]
    9ff4:	4b26      	ldr	r3, [pc, #152]	; (a090 <_usb_d_dev_init+0xc0>)
    9ff6:	4798      	blx	r3
    9ff8:	4603      	mov	r3, r0
    9ffa:	f083 0301 	eor.w	r3, r3, #1
    9ffe:	b2db      	uxtb	r3, r3
    a000:	2b00      	cmp	r3, #0
    a002:	d011      	beq.n	a028 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    a004:	2102      	movs	r1, #2
    a006:	68f8      	ldr	r0, [r7, #12]
    a008:	4b22      	ldr	r3, [pc, #136]	; (a094 <_usb_d_dev_init+0xc4>)
    a00a:	4798      	blx	r3
    a00c:	4603      	mov	r3, r0
    a00e:	2b00      	cmp	r3, #0
    a010:	d006      	beq.n	a020 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    a012:	68f8      	ldr	r0, [r7, #12]
    a014:	4b20      	ldr	r3, [pc, #128]	; (a098 <_usb_d_dev_init+0xc8>)
    a016:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    a018:	2102      	movs	r1, #2
    a01a:	68f8      	ldr	r0, [r7, #12]
    a01c:	4b1f      	ldr	r3, [pc, #124]	; (a09c <_usb_d_dev_init+0xcc>)
    a01e:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    a020:	2101      	movs	r1, #1
    a022:	68f8      	ldr	r0, [r7, #12]
    a024:	4b1e      	ldr	r3, [pc, #120]	; (a0a0 <_usb_d_dev_init+0xd0>)
    a026:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    a028:	2101      	movs	r1, #1
    a02a:	68f8      	ldr	r0, [r7, #12]
    a02c:	4b1b      	ldr	r3, [pc, #108]	; (a09c <_usb_d_dev_init+0xcc>)
    a02e:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    a030:	4b1c      	ldr	r3, [pc, #112]	; (a0a4 <_usb_d_dev_init+0xd4>)
    a032:	4a1d      	ldr	r2, [pc, #116]	; (a0a8 <_usb_d_dev_init+0xd8>)
    a034:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    a036:	4b1b      	ldr	r3, [pc, #108]	; (a0a4 <_usb_d_dev_init+0xd4>)
    a038:	4a1b      	ldr	r2, [pc, #108]	; (a0a8 <_usb_d_dev_init+0xd8>)
    a03a:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    a03c:	4b19      	ldr	r3, [pc, #100]	; (a0a4 <_usb_d_dev_init+0xd4>)
    a03e:	4a1a      	ldr	r2, [pc, #104]	; (a0a8 <_usb_d_dev_init+0xd8>)
    a040:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    a042:	4b18      	ldr	r3, [pc, #96]	; (a0a4 <_usb_d_dev_init+0xd4>)
    a044:	4a18      	ldr	r2, [pc, #96]	; (a0a8 <_usb_d_dev_init+0xd8>)
    a046:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    a048:	4b16      	ldr	r3, [pc, #88]	; (a0a4 <_usb_d_dev_init+0xd4>)
    a04a:	4a17      	ldr	r2, [pc, #92]	; (a0a8 <_usb_d_dev_init+0xd8>)
    a04c:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    a04e:	4b17      	ldr	r3, [pc, #92]	; (a0ac <_usb_d_dev_init+0xdc>)
    a050:	4798      	blx	r3

	_usb_load_calib();
    a052:	4b17      	ldr	r3, [pc, #92]	; (a0b0 <_usb_d_dev_init+0xe0>)
    a054:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    a056:	2104      	movs	r1, #4
    a058:	68f8      	ldr	r0, [r7, #12]
    a05a:	4b11      	ldr	r3, [pc, #68]	; (a0a0 <_usb_d_dev_init+0xd0>)
    a05c:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    a05e:	4b15      	ldr	r3, [pc, #84]	; (a0b4 <_usb_d_dev_init+0xe4>)
    a060:	4619      	mov	r1, r3
    a062:	68f8      	ldr	r0, [r7, #12]
    a064:	4b14      	ldr	r3, [pc, #80]	; (a0b8 <_usb_d_dev_init+0xe8>)
    a066:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    a068:	7afb      	ldrb	r3, [r7, #11]
    a06a:	f107 0210 	add.w	r2, r7, #16
    a06e:	4413      	add	r3, r2
    a070:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    a074:	f043 0301 	orr.w	r3, r3, #1
    a078:	b2db      	uxtb	r3, r3
    a07a:	b29b      	uxth	r3, r3
    a07c:	4619      	mov	r1, r3
    a07e:	68f8      	ldr	r0, [r7, #12]
    a080:	4b0e      	ldr	r3, [pc, #56]	; (a0bc <_usb_d_dev_init+0xec>)
    a082:	4798      	blx	r3

	return ERR_NONE;
    a084:	2300      	movs	r3, #0
}
    a086:	4618      	mov	r0, r3
    a088:	3710      	adds	r7, #16
    a08a:	46bd      	mov	sp, r7
    a08c:	bd80      	pop	{r7, pc}
    a08e:	bf00      	nop
    a090:	00008669 	.word	0x00008669
    a094:	000089b9 	.word	0x000089b9
    a098:	0000898d 	.word	0x0000898d
    a09c:	0000863f 	.word	0x0000863f
    a0a0:	000089e9 	.word	0x000089e9
    a0a4:	20000d28 	.word	0x20000d28
    a0a8:	00008ab1 	.word	0x00008ab1
    a0ac:	00009f55 	.word	0x00009f55
    a0b0:	00008ac9 	.word	0x00008ac9
    a0b4:	20000df0 	.word	0x20000df0
    a0b8:	00008a95 	.word	0x00008a95
    a0bc:	00008a59 	.word	0x00008a59

0000a0c0 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    a0c0:	b580      	push	{r7, lr}
    a0c2:	b082      	sub	sp, #8
    a0c4:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a0c6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a0ca:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    a0cc:	2103      	movs	r1, #3
    a0ce:	6878      	ldr	r0, [r7, #4]
    a0d0:	4b17      	ldr	r3, [pc, #92]	; (a130 <_usb_d_dev_enable+0x70>)
    a0d2:	4798      	blx	r3
    a0d4:	4603      	mov	r3, r0
    a0d6:	2b00      	cmp	r3, #0
    a0d8:	d002      	beq.n	a0e0 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    a0da:	f06f 0310 	mvn.w	r3, #16
    a0de:	e023      	b.n	a128 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    a0e0:	6878      	ldr	r0, [r7, #4]
    a0e2:	4b14      	ldr	r3, [pc, #80]	; (a134 <_usb_d_dev_enable+0x74>)
    a0e4:	4798      	blx	r3
    a0e6:	4603      	mov	r3, r0
    a0e8:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    a0ea:	78fb      	ldrb	r3, [r7, #3]
    a0ec:	f003 0302 	and.w	r3, r3, #2
    a0f0:	2b00      	cmp	r3, #0
    a0f2:	d107      	bne.n	a104 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    a0f4:	78fb      	ldrb	r3, [r7, #3]
    a0f6:	f043 0302 	orr.w	r3, r3, #2
    a0fa:	b2db      	uxtb	r3, r3
    a0fc:	4619      	mov	r1, r3
    a0fe:	6878      	ldr	r0, [r7, #4]
    a100:	4b0d      	ldr	r3, [pc, #52]	; (a138 <_usb_d_dev_enable+0x78>)
    a102:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    a104:	2050      	movs	r0, #80	; 0x50
    a106:	4b0d      	ldr	r3, [pc, #52]	; (a13c <_usb_d_dev_enable+0x7c>)
    a108:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    a10a:	2051      	movs	r0, #81	; 0x51
    a10c:	4b0b      	ldr	r3, [pc, #44]	; (a13c <_usb_d_dev_enable+0x7c>)
    a10e:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    a110:	2052      	movs	r0, #82	; 0x52
    a112:	4b0a      	ldr	r3, [pc, #40]	; (a13c <_usb_d_dev_enable+0x7c>)
    a114:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    a116:	2053      	movs	r0, #83	; 0x53
    a118:	4b08      	ldr	r3, [pc, #32]	; (a13c <_usb_d_dev_enable+0x7c>)
    a11a:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    a11c:	f240 218d 	movw	r1, #653	; 0x28d
    a120:	6878      	ldr	r0, [r7, #4]
    a122:	4b07      	ldr	r3, [pc, #28]	; (a140 <_usb_d_dev_enable+0x80>)
    a124:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    a126:	2300      	movs	r3, #0
}
    a128:	4618      	mov	r0, r3
    a12a:	3708      	adds	r7, #8
    a12c:	46bd      	mov	sp, r7
    a12e:	bd80      	pop	{r7, pc}
    a130:	00008963 	.word	0x00008963
    a134:	00008a11 	.word	0x00008a11
    a138:	000089e9 	.word	0x000089e9
    a13c:	00008575 	.word	0x00008575
    a140:	0000890d 	.word	0x0000890d

0000a144 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    a144:	b580      	push	{r7, lr}
    a146:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    a148:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a14c:	4b01      	ldr	r3, [pc, #4]	; (a154 <_usb_d_dev_attach+0x10>)
    a14e:	4798      	blx	r3
}
    a150:	bf00      	nop
    a152:	bd80      	pop	{r7, pc}
    a154:	00008a35 	.word	0x00008a35

0000a158 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    a158:	b580      	push	{r7, lr}
    a15a:	b082      	sub	sp, #8
    a15c:	af00      	add	r7, sp, #0
    a15e:	4603      	mov	r3, r0
    a160:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    a162:	79fb      	ldrb	r3, [r7, #7]
    a164:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a168:	b2db      	uxtb	r3, r3
    a16a:	4619      	mov	r1, r3
    a16c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a170:	4b02      	ldr	r3, [pc, #8]	; (a17c <_usb_d_dev_set_address+0x24>)
    a172:	4798      	blx	r3
}
    a174:	bf00      	nop
    a176:	3708      	adds	r7, #8
    a178:	46bd      	mov	sp, r7
    a17a:	bd80      	pop	{r7, pc}
    a17c:	00008a77 	.word	0x00008a77

0000a180 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    a180:	b590      	push	{r4, r7, lr}
    a182:	b085      	sub	sp, #20
    a184:	af00      	add	r7, sp, #0
    a186:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    a188:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a18c:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a18e:	687b      	ldr	r3, [r7, #4]
    a190:	7c9b      	ldrb	r3, [r3, #18]
    a192:	f003 030f 	and.w	r3, r3, #15
    a196:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a198:	687b      	ldr	r3, [r7, #4]
    a19a:	68db      	ldr	r3, [r3, #12]
    a19c:	461a      	mov	r2, r3
    a19e:	7afb      	ldrb	r3, [r7, #11]
    a1a0:	2100      	movs	r1, #0
    a1a2:	4618      	mov	r0, r3
    a1a4:	4b0f      	ldr	r3, [pc, #60]	; (a1e4 <_usb_d_dev_trans_setup+0x64>)
    a1a6:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a1a8:	687b      	ldr	r3, [r7, #4]
    a1aa:	8a1b      	ldrh	r3, [r3, #16]
    a1ac:	461a      	mov	r2, r3
    a1ae:	7af8      	ldrb	r0, [r7, #11]
    a1b0:	2300      	movs	r3, #0
    a1b2:	2100      	movs	r1, #0
    a1b4:	4c0c      	ldr	r4, [pc, #48]	; (a1e8 <_usb_d_dev_trans_setup+0x68>)
    a1b6:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    a1b8:	7afb      	ldrb	r3, [r7, #11]
    a1ba:	22b0      	movs	r2, #176	; 0xb0
    a1bc:	4619      	mov	r1, r3
    a1be:	68f8      	ldr	r0, [r7, #12]
    a1c0:	4b0a      	ldr	r3, [pc, #40]	; (a1ec <_usb_d_dev_trans_setup+0x6c>)
    a1c2:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    a1c4:	7afb      	ldrb	r3, [r7, #11]
    a1c6:	2200      	movs	r2, #0
    a1c8:	2100      	movs	r1, #0
    a1ca:	4618      	mov	r0, r3
    a1cc:	4b08      	ldr	r3, [pc, #32]	; (a1f0 <_usb_d_dev_trans_setup+0x70>)
    a1ce:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    a1d0:	7afb      	ldrb	r3, [r7, #11]
    a1d2:	2210      	movs	r2, #16
    a1d4:	4619      	mov	r1, r3
    a1d6:	68f8      	ldr	r0, [r7, #12]
    a1d8:	4b06      	ldr	r3, [pc, #24]	; (a1f4 <_usb_d_dev_trans_setup+0x74>)
    a1da:	4798      	blx	r3
}
    a1dc:	bf00      	nop
    a1de:	3714      	adds	r7, #20
    a1e0:	46bd      	mov	sp, r7
    a1e2:	bd90      	pop	{r4, r7, pc}
    a1e4:	00008f15 	.word	0x00008f15
    a1e8:	0000909d 	.word	0x0000909d
    a1ec:	00008775 	.word	0x00008775
    a1f0:	0000916d 	.word	0x0000916d
    a1f4:	000087c9 	.word	0x000087c9

0000a1f8 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    a1f8:	b580      	push	{r7, lr}
    a1fa:	b088      	sub	sp, #32
    a1fc:	af00      	add	r7, sp, #0
    a1fe:	4603      	mov	r3, r0
    a200:	71fb      	strb	r3, [r7, #7]
    a202:	460b      	mov	r3, r1
    a204:	71bb      	strb	r3, [r7, #6]
    a206:	4613      	mov	r3, r2
    a208:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    a20a:	79fb      	ldrb	r3, [r7, #7]
    a20c:	f003 030f 	and.w	r3, r3, #15
    a210:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    a212:	79fb      	ldrb	r3, [r7, #7]
    a214:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a218:	2b00      	cmp	r3, #0
    a21a:	bf14      	ite	ne
    a21c:	2301      	movne	r3, #1
    a21e:	2300      	moveq	r3, #0
    a220:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a222:	7fba      	ldrb	r2, [r7, #30]
    a224:	7ffb      	ldrb	r3, [r7, #31]
    a226:	4611      	mov	r1, r2
    a228:	4618      	mov	r0, r3
    a22a:	4b3e      	ldr	r3, [pc, #248]	; (a324 <_usb_d_dev_ep_init+0x12c>)
    a22c:	4798      	blx	r3
    a22e:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a230:	79bb      	ldrb	r3, [r7, #6]
    a232:	f003 0303 	and.w	r3, r3, #3
    a236:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a238:	7ffa      	ldrb	r2, [r7, #31]
    a23a:	4613      	mov	r3, r2
    a23c:	005b      	lsls	r3, r3, #1
    a23e:	4413      	add	r3, r2
    a240:	009b      	lsls	r3, r3, #2
    a242:	4a39      	ldr	r2, [pc, #228]	; (a328 <_usb_d_dev_ep_init+0x130>)
    a244:	4413      	add	r3, r2
    a246:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    a248:	7ffb      	ldrb	r3, [r7, #31]
    a24a:	2b04      	cmp	r3, #4
    a24c:	d902      	bls.n	a254 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    a24e:	f06f 0311 	mvn.w	r3, #17
    a252:	e063      	b.n	a31c <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    a254:	69bb      	ldr	r3, [r7, #24]
    a256:	7c9b      	ldrb	r3, [r3, #18]
    a258:	2bff      	cmp	r3, #255	; 0xff
    a25a:	d002      	beq.n	a262 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    a25c:	f06f 0313 	mvn.w	r3, #19
    a260:	e05c      	b.n	a31c <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    a262:	7dfb      	ldrb	r3, [r7, #23]
    a264:	2b00      	cmp	r3, #0
    a266:	d11f      	bne.n	a2a8 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    a268:	7fbb      	ldrb	r3, [r7, #30]
    a26a:	2b00      	cmp	r3, #0
    a26c:	bf14      	ite	ne
    a26e:	2301      	movne	r3, #1
    a270:	2300      	moveq	r3, #0
    a272:	b2db      	uxtb	r3, r3
    a274:	f083 0301 	eor.w	r3, r3, #1
    a278:	b2db      	uxtb	r3, r3
    a27a:	f003 0301 	and.w	r3, r3, #1
    a27e:	b2da      	uxtb	r2, r3
    a280:	7ffb      	ldrb	r3, [r7, #31]
    a282:	4611      	mov	r1, r2
    a284:	4618      	mov	r0, r3
    a286:	4b27      	ldr	r3, [pc, #156]	; (a324 <_usb_d_dev_ep_init+0x12c>)
    a288:	4798      	blx	r3
    a28a:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    a28c:	68fb      	ldr	r3, [r7, #12]
    a28e:	7c9b      	ldrb	r3, [r3, #18]
    a290:	2bff      	cmp	r3, #255	; 0xff
    a292:	d002      	beq.n	a29a <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    a294:	f06f 0313 	mvn.w	r3, #19
    a298:	e040      	b.n	a31c <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    a29a:	693b      	ldr	r3, [r7, #16]
    a29c:	681b      	ldr	r3, [r3, #0]
    a29e:	2b00      	cmp	r3, #0
    a2a0:	d102      	bne.n	a2a8 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    a2a2:	f06f 0312 	mvn.w	r3, #18
    a2a6:	e039      	b.n	a31c <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a2a8:	7fbb      	ldrb	r3, [r7, #30]
    a2aa:	2b00      	cmp	r3, #0
    a2ac:	d007      	beq.n	a2be <_usb_d_dev_ep_init+0xc6>
    a2ae:	693b      	ldr	r3, [r7, #16]
    a2b0:	685b      	ldr	r3, [r3, #4]
    a2b2:	2b00      	cmp	r3, #0
    a2b4:	bf14      	ite	ne
    a2b6:	2301      	movne	r3, #1
    a2b8:	2300      	moveq	r3, #0
    a2ba:	b2db      	uxtb	r3, r3
    a2bc:	e006      	b.n	a2cc <_usb_d_dev_ep_init+0xd4>
    a2be:	693b      	ldr	r3, [r7, #16]
    a2c0:	681b      	ldr	r3, [r3, #0]
    a2c2:	2b00      	cmp	r3, #0
    a2c4:	bf14      	ite	ne
    a2c6:	2301      	movne	r3, #1
    a2c8:	2300      	moveq	r3, #0
    a2ca:	b2db      	uxtb	r3, r3
    a2cc:	2b00      	cmp	r3, #0
    a2ce:	d00f      	beq.n	a2f0 <_usb_d_dev_ep_init+0xf8>
    a2d0:	7fbb      	ldrb	r3, [r7, #30]
    a2d2:	2b00      	cmp	r3, #0
    a2d4:	d003      	beq.n	a2de <_usb_d_dev_ep_init+0xe6>
    a2d6:	693b      	ldr	r3, [r7, #16]
    a2d8:	895b      	ldrh	r3, [r3, #10]
    a2da:	461a      	mov	r2, r3
    a2dc:	e002      	b.n	a2e4 <_usb_d_dev_ep_init+0xec>
    a2de:	693b      	ldr	r3, [r7, #16]
    a2e0:	891b      	ldrh	r3, [r3, #8]
    a2e2:	461a      	mov	r2, r3
    a2e4:	88bb      	ldrh	r3, [r7, #4]
    a2e6:	429a      	cmp	r2, r3
    a2e8:	da02      	bge.n	a2f0 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    a2ea:	f06f 0312 	mvn.w	r3, #18
    a2ee:	e015      	b.n	a31c <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a2f0:	7fbb      	ldrb	r3, [r7, #30]
    a2f2:	2b00      	cmp	r3, #0
    a2f4:	d002      	beq.n	a2fc <_usb_d_dev_ep_init+0x104>
    a2f6:	693b      	ldr	r3, [r7, #16]
    a2f8:	685b      	ldr	r3, [r3, #4]
    a2fa:	e001      	b.n	a300 <_usb_d_dev_ep_init+0x108>
    a2fc:	693b      	ldr	r3, [r7, #16]
    a2fe:	681b      	ldr	r3, [r3, #0]
    a300:	69ba      	ldr	r2, [r7, #24]
    a302:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    a304:	69bb      	ldr	r3, [r7, #24]
    a306:	88ba      	ldrh	r2, [r7, #4]
    a308:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    a30a:	7dfb      	ldrb	r3, [r7, #23]
    a30c:	3301      	adds	r3, #1
    a30e:	b2da      	uxtb	r2, r3
    a310:	69bb      	ldr	r3, [r7, #24]
    a312:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    a314:	69bb      	ldr	r3, [r7, #24]
    a316:	79fa      	ldrb	r2, [r7, #7]
    a318:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    a31a:	2300      	movs	r3, #0
}
    a31c:	4618      	mov	r0, r3
    a31e:	3720      	adds	r7, #32
    a320:	46bd      	mov	sp, r7
    a322:	bd80      	pop	{r7, pc}
    a324:	00009229 	.word	0x00009229
    a328:	0000ef28 	.word	0x0000ef28

0000a32c <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    a32c:	b580      	push	{r7, lr}
    a32e:	b086      	sub	sp, #24
    a330:	af00      	add	r7, sp, #0
    a332:	4603      	mov	r3, r0
    a334:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    a336:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a33a:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    a33c:	79fb      	ldrb	r3, [r7, #7]
    a33e:	f003 030f 	and.w	r3, r3, #15
    a342:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a344:	79fb      	ldrb	r3, [r7, #7]
    a346:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a34a:	2b00      	cmp	r3, #0
    a34c:	bf14      	ite	ne
    a34e:	2301      	movne	r3, #1
    a350:	2300      	moveq	r3, #0
    a352:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a354:	7cba      	ldrb	r2, [r7, #18]
    a356:	7cfb      	ldrb	r3, [r7, #19]
    a358:	4611      	mov	r1, r2
    a35a:	4618      	mov	r0, r3
    a35c:	4b2a      	ldr	r3, [pc, #168]	; (a408 <_usb_d_dev_ep_deinit+0xdc>)
    a35e:	4798      	blx	r3
    a360:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a362:	7cfb      	ldrb	r3, [r7, #19]
    a364:	2b04      	cmp	r3, #4
    a366:	d84a      	bhi.n	a3fe <_usb_d_dev_ep_deinit+0xd2>
    a368:	68fb      	ldr	r3, [r7, #12]
    a36a:	7c9b      	ldrb	r3, [r3, #18]
    a36c:	2bff      	cmp	r3, #255	; 0xff
    a36e:	d046      	beq.n	a3fe <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a370:	7cbb      	ldrb	r3, [r7, #18]
    a372:	2203      	movs	r2, #3
    a374:	4619      	mov	r1, r3
    a376:	68f8      	ldr	r0, [r7, #12]
    a378:	4b24      	ldr	r3, [pc, #144]	; (a40c <_usb_d_dev_ep_deinit+0xe0>)
    a37a:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a37c:	68fb      	ldr	r3, [r7, #12]
    a37e:	7cdb      	ldrb	r3, [r3, #19]
    a380:	f003 0307 	and.w	r3, r3, #7
    a384:	b2db      	uxtb	r3, r3
    a386:	2b01      	cmp	r3, #1
    a388:	d107      	bne.n	a39a <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a38a:	79fb      	ldrb	r3, [r7, #7]
    a38c:	697a      	ldr	r2, [r7, #20]
    a38e:	3308      	adds	r3, #8
    a390:	015b      	lsls	r3, r3, #5
    a392:	4413      	add	r3, r2
    a394:	2200      	movs	r2, #0
    a396:	701a      	strb	r2, [r3, #0]
    a398:	e02a      	b.n	a3f0 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    a39a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a39e:	2b00      	cmp	r3, #0
    a3a0:	da15      	bge.n	a3ce <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a3a2:	79fb      	ldrb	r3, [r7, #7]
    a3a4:	f003 030f 	and.w	r3, r3, #15
    a3a8:	79fa      	ldrb	r2, [r7, #7]
    a3aa:	f002 020f 	and.w	r2, r2, #15
    a3ae:	6979      	ldr	r1, [r7, #20]
    a3b0:	3208      	adds	r2, #8
    a3b2:	0152      	lsls	r2, r2, #5
    a3b4:	440a      	add	r2, r1
    a3b6:	7812      	ldrb	r2, [r2, #0]
    a3b8:	b2d2      	uxtb	r2, r2
    a3ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    a3be:	b2d1      	uxtb	r1, r2
    a3c0:	697a      	ldr	r2, [r7, #20]
    a3c2:	3308      	adds	r3, #8
    a3c4:	015b      	lsls	r3, r3, #5
    a3c6:	4413      	add	r3, r2
    a3c8:	460a      	mov	r2, r1
    a3ca:	701a      	strb	r2, [r3, #0]
    a3cc:	e010      	b.n	a3f0 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    a3ce:	79fb      	ldrb	r3, [r7, #7]
    a3d0:	79fa      	ldrb	r2, [r7, #7]
    a3d2:	6979      	ldr	r1, [r7, #20]
    a3d4:	3208      	adds	r2, #8
    a3d6:	0152      	lsls	r2, r2, #5
    a3d8:	440a      	add	r2, r1
    a3da:	7812      	ldrb	r2, [r2, #0]
    a3dc:	b2d2      	uxtb	r2, r2
    a3de:	f022 0207 	bic.w	r2, r2, #7
    a3e2:	b2d1      	uxtb	r1, r2
    a3e4:	697a      	ldr	r2, [r7, #20]
    a3e6:	3308      	adds	r3, #8
    a3e8:	015b      	lsls	r3, r3, #5
    a3ea:	4413      	add	r3, r2
    a3ec:	460a      	mov	r2, r1
    a3ee:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    a3f0:	68fb      	ldr	r3, [r7, #12]
    a3f2:	2200      	movs	r2, #0
    a3f4:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    a3f6:	68fb      	ldr	r3, [r7, #12]
    a3f8:	22ff      	movs	r2, #255	; 0xff
    a3fa:	749a      	strb	r2, [r3, #18]
    a3fc:	e000      	b.n	a400 <_usb_d_dev_ep_deinit+0xd4>
		return;
    a3fe:	bf00      	nop
}
    a400:	3718      	adds	r7, #24
    a402:	46bd      	mov	sp, r7
    a404:	bd80      	pop	{r7, pc}
    a406:	bf00      	nop
    a408:	00009229 	.word	0x00009229
    a40c:	0000a861 	.word	0x0000a861

0000a410 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    a410:	b5b0      	push	{r4, r5, r7, lr}
    a412:	b088      	sub	sp, #32
    a414:	af00      	add	r7, sp, #0
    a416:	4603      	mov	r3, r0
    a418:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    a41a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a41e:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    a420:	79fb      	ldrb	r3, [r7, #7]
    a422:	f003 030f 	and.w	r3, r3, #15
    a426:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    a428:	79fb      	ldrb	r3, [r7, #7]
    a42a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a42e:	2b00      	cmp	r3, #0
    a430:	bf14      	ite	ne
    a432:	2301      	movne	r3, #1
    a434:	2300      	moveq	r3, #0
    a436:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    a438:	7eba      	ldrb	r2, [r7, #26]
    a43a:	7efb      	ldrb	r3, [r7, #27]
    a43c:	4611      	mov	r1, r2
    a43e:	4618      	mov	r0, r3
    a440:	4b70      	ldr	r3, [pc, #448]	; (a604 <_usb_d_dev_ep_enable+0x1f4>)
    a442:	4798      	blx	r3
    a444:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    a446:	7efb      	ldrb	r3, [r7, #27]
    a448:	4619      	mov	r1, r3
    a44a:	69f8      	ldr	r0, [r7, #28]
    a44c:	4b6e      	ldr	r3, [pc, #440]	; (a608 <_usb_d_dev_ep_enable+0x1f8>)
    a44e:	4798      	blx	r3
    a450:	4603      	mov	r3, r0
    a452:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a454:	7efb      	ldrb	r3, [r7, #27]
    a456:	2b04      	cmp	r3, #4
    a458:	d803      	bhi.n	a462 <_usb_d_dev_ep_enable+0x52>
    a45a:	697b      	ldr	r3, [r7, #20]
    a45c:	7c9b      	ldrb	r3, [r3, #18]
    a45e:	2bff      	cmp	r3, #255	; 0xff
    a460:	d102      	bne.n	a468 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    a462:	f06f 0311 	mvn.w	r3, #17
    a466:	e0c8      	b.n	a5fa <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    a468:	7efb      	ldrb	r3, [r7, #27]
    a46a:	015b      	lsls	r3, r3, #5
    a46c:	4a67      	ldr	r2, [pc, #412]	; (a60c <_usb_d_dev_ep_enable+0x1fc>)
    a46e:	4413      	add	r3, r2
    a470:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    a472:	697b      	ldr	r3, [r7, #20]
    a474:	7cdb      	ldrb	r3, [r3, #19]
    a476:	f003 0307 	and.w	r3, r3, #7
    a47a:	b2db      	uxtb	r3, r3
    a47c:	2b01      	cmp	r3, #1
    a47e:	d14b      	bne.n	a518 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a480:	7cfb      	ldrb	r3, [r7, #19]
    a482:	f003 0377 	and.w	r3, r3, #119	; 0x77
    a486:	2b00      	cmp	r3, #0
    a488:	d002      	beq.n	a490 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    a48a:	f06f 0313 	mvn.w	r3, #19
    a48e:	e0b4      	b.n	a5fa <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    a490:	7efb      	ldrb	r3, [r7, #27]
    a492:	2211      	movs	r2, #17
    a494:	4619      	mov	r1, r3
    a496:	69f8      	ldr	r0, [r7, #28]
    a498:	4b5d      	ldr	r3, [pc, #372]	; (a610 <_usb_d_dev_ep_enable+0x200>)
    a49a:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a49c:	697b      	ldr	r3, [r7, #20]
    a49e:	8a1b      	ldrh	r3, [r3, #16]
    a4a0:	039b      	lsls	r3, r3, #14
    a4a2:	4c5c      	ldr	r4, [pc, #368]	; (a614 <_usb_d_dev_ep_enable+0x204>)
    a4a4:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a4a6:	697b      	ldr	r3, [r7, #20]
    a4a8:	8a1b      	ldrh	r3, [r3, #16]
    a4aa:	4618      	mov	r0, r3
    a4ac:	4b5a      	ldr	r3, [pc, #360]	; (a618 <_usb_d_dev_ep_enable+0x208>)
    a4ae:	4798      	blx	r3
    a4b0:	4603      	mov	r3, r0
    a4b2:	071b      	lsls	r3, r3, #28
    a4b4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a4b8:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a4bc:	68fb      	ldr	r3, [r7, #12]
    a4be:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    a4c0:	68fb      	ldr	r3, [r7, #12]
    a4c2:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a4c6:	697b      	ldr	r3, [r7, #20]
    a4c8:	8a1b      	ldrh	r3, [r3, #16]
    a4ca:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a4ce:	697b      	ldr	r3, [r7, #20]
    a4d0:	8a1b      	ldrh	r3, [r3, #16]
    a4d2:	4618      	mov	r0, r3
    a4d4:	4b50      	ldr	r3, [pc, #320]	; (a618 <_usb_d_dev_ep_enable+0x208>)
    a4d6:	4798      	blx	r3
    a4d8:	4603      	mov	r3, r0
    a4da:	071b      	lsls	r3, r3, #28
    a4dc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a4e0:	432b      	orrs	r3, r5
    a4e2:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a4e4:	7efb      	ldrb	r3, [r7, #27]
    a4e6:	2200      	movs	r2, #0
    a4e8:	2100      	movs	r1, #0
    a4ea:	4618      	mov	r0, r3
    a4ec:	4b4b      	ldr	r3, [pc, #300]	; (a61c <_usb_d_dev_ep_enable+0x20c>)
    a4ee:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    a4f0:	7efb      	ldrb	r3, [r7, #27]
    a4f2:	2200      	movs	r2, #0
    a4f4:	2101      	movs	r1, #1
    a4f6:	4618      	mov	r0, r3
    a4f8:	4b49      	ldr	r3, [pc, #292]	; (a620 <_usb_d_dev_ep_enable+0x210>)
    a4fa:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    a4fc:	7efb      	ldrb	r3, [r7, #27]
    a4fe:	2100      	movs	r1, #0
    a500:	4618      	mov	r0, r3
    a502:	4b48      	ldr	r3, [pc, #288]	; (a624 <_usb_d_dev_ep_enable+0x214>)
    a504:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a506:	7efb      	ldrb	r3, [r7, #27]
    a508:	2101      	movs	r1, #1
    a50a:	4618      	mov	r0, r3
    a50c:	4b45      	ldr	r3, [pc, #276]	; (a624 <_usb_d_dev_ep_enable+0x214>)
    a50e:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    a510:	6978      	ldr	r0, [r7, #20]
    a512:	4b45      	ldr	r3, [pc, #276]	; (a628 <_usb_d_dev_ep_enable+0x218>)
    a514:	4798      	blx	r3
    a516:	e06f      	b.n	a5f8 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    a518:	7ebb      	ldrb	r3, [r7, #26]
    a51a:	2b00      	cmp	r3, #0
    a51c:	d038      	beq.n	a590 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a51e:	7cfb      	ldrb	r3, [r7, #19]
    a520:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a524:	2b00      	cmp	r3, #0
    a526:	d002      	beq.n	a52e <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    a528:	f06f 0313 	mvn.w	r3, #19
    a52c:	e065      	b.n	a5fa <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a52e:	697b      	ldr	r3, [r7, #20]
    a530:	7cdb      	ldrb	r3, [r3, #19]
    a532:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a536:	b2db      	uxtb	r3, r3
    a538:	011b      	lsls	r3, r3, #4
    a53a:	b2db      	uxtb	r3, r3
    a53c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a540:	b2da      	uxtb	r2, r3
    a542:	7cfb      	ldrb	r3, [r7, #19]
    a544:	4313      	orrs	r3, r2
    a546:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a548:	7cfa      	ldrb	r2, [r7, #19]
    a54a:	7efb      	ldrb	r3, [r7, #27]
    a54c:	4619      	mov	r1, r3
    a54e:	69f8      	ldr	r0, [r7, #28]
    a550:	4b2f      	ldr	r3, [pc, #188]	; (a610 <_usb_d_dev_ep_enable+0x200>)
    a552:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    a554:	68fb      	ldr	r3, [r7, #12]
    a556:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a55a:	697b      	ldr	r3, [r7, #20]
    a55c:	8a1b      	ldrh	r3, [r3, #16]
    a55e:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a562:	697b      	ldr	r3, [r7, #20]
    a564:	8a1b      	ldrh	r3, [r3, #16]
    a566:	4618      	mov	r0, r3
    a568:	4b2b      	ldr	r3, [pc, #172]	; (a618 <_usb_d_dev_ep_enable+0x208>)
    a56a:	4798      	blx	r3
    a56c:	4603      	mov	r3, r0
    a56e:	071b      	lsls	r3, r3, #28
    a570:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a574:	432b      	orrs	r3, r5
    a576:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a578:	7efb      	ldrb	r3, [r7, #27]
    a57a:	2200      	movs	r2, #0
    a57c:	2101      	movs	r1, #1
    a57e:	4618      	mov	r0, r3
    a580:	4b27      	ldr	r3, [pc, #156]	; (a620 <_usb_d_dev_ep_enable+0x210>)
    a582:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a584:	7efb      	ldrb	r3, [r7, #27]
    a586:	2101      	movs	r1, #1
    a588:	4618      	mov	r0, r3
    a58a:	4b26      	ldr	r3, [pc, #152]	; (a624 <_usb_d_dev_ep_enable+0x214>)
    a58c:	4798      	blx	r3
    a58e:	e033      	b.n	a5f8 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    a590:	7cfb      	ldrb	r3, [r7, #19]
    a592:	f003 0307 	and.w	r3, r3, #7
    a596:	2b00      	cmp	r3, #0
    a598:	d002      	beq.n	a5a0 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    a59a:	f06f 0313 	mvn.w	r3, #19
    a59e:	e02c      	b.n	a5fa <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    a5a0:	697b      	ldr	r3, [r7, #20]
    a5a2:	7cdb      	ldrb	r3, [r3, #19]
    a5a4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a5a8:	b2db      	uxtb	r3, r3
    a5aa:	461a      	mov	r2, r3
    a5ac:	7cfb      	ldrb	r3, [r7, #19]
    a5ae:	4313      	orrs	r3, r2
    a5b0:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a5b2:	7cfa      	ldrb	r2, [r7, #19]
    a5b4:	7efb      	ldrb	r3, [r7, #27]
    a5b6:	4619      	mov	r1, r3
    a5b8:	69f8      	ldr	r0, [r7, #28]
    a5ba:	4b15      	ldr	r3, [pc, #84]	; (a610 <_usb_d_dev_ep_enable+0x200>)
    a5bc:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a5be:	697b      	ldr	r3, [r7, #20]
    a5c0:	8a1b      	ldrh	r3, [r3, #16]
    a5c2:	039b      	lsls	r3, r3, #14
    a5c4:	4c13      	ldr	r4, [pc, #76]	; (a614 <_usb_d_dev_ep_enable+0x204>)
    a5c6:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a5c8:	697b      	ldr	r3, [r7, #20]
    a5ca:	8a1b      	ldrh	r3, [r3, #16]
    a5cc:	4618      	mov	r0, r3
    a5ce:	4b12      	ldr	r3, [pc, #72]	; (a618 <_usb_d_dev_ep_enable+0x208>)
    a5d0:	4798      	blx	r3
    a5d2:	4603      	mov	r3, r0
    a5d4:	071b      	lsls	r3, r3, #28
    a5d6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a5da:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a5de:	68fb      	ldr	r3, [r7, #12]
    a5e0:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a5e2:	7efb      	ldrb	r3, [r7, #27]
    a5e4:	2200      	movs	r2, #0
    a5e6:	2100      	movs	r1, #0
    a5e8:	4618      	mov	r0, r3
    a5ea:	4b0c      	ldr	r3, [pc, #48]	; (a61c <_usb_d_dev_ep_enable+0x20c>)
    a5ec:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    a5ee:	7efb      	ldrb	r3, [r7, #27]
    a5f0:	2100      	movs	r1, #0
    a5f2:	4618      	mov	r0, r3
    a5f4:	4b0b      	ldr	r3, [pc, #44]	; (a624 <_usb_d_dev_ep_enable+0x214>)
    a5f6:	4798      	blx	r3
	}

	return USB_OK;
    a5f8:	2300      	movs	r3, #0
}
    a5fa:	4618      	mov	r0, r3
    a5fc:	3720      	adds	r7, #32
    a5fe:	46bd      	mov	sp, r7
    a600:	bdb0      	pop	{r4, r5, r7, pc}
    a602:	bf00      	nop
    a604:	00009229 	.word	0x00009229
    a608:	000088af 	.word	0x000088af
    a60c:	20000df0 	.word	0x20000df0
    a610:	00008885 	.word	0x00008885
    a614:	0fffc000 	.word	0x0fffc000
    a618:	000091c5 	.word	0x000091c5
    a61c:	0000916d 	.word	0x0000916d
    a620:	00009115 	.word	0x00009115
    a624:	000090dd 	.word	0x000090dd
    a628:	0000a181 	.word	0x0000a181

0000a62c <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    a62c:	b580      	push	{r7, lr}
    a62e:	b084      	sub	sp, #16
    a630:	af00      	add	r7, sp, #0
    a632:	6078      	str	r0, [r7, #4]
    a634:	460b      	mov	r3, r1
    a636:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a638:	687b      	ldr	r3, [r7, #4]
    a63a:	7c9b      	ldrb	r3, [r3, #18]
    a63c:	f003 030f 	and.w	r3, r3, #15
    a640:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    a642:	78fa      	ldrb	r2, [r7, #3]
    a644:	7bfb      	ldrb	r3, [r7, #15]
    a646:	4611      	mov	r1, r2
    a648:	4618      	mov	r0, r3
    a64a:	4b03      	ldr	r3, [pc, #12]	; (a658 <_usb_d_dev_ep_stall_get+0x2c>)
    a64c:	4798      	blx	r3
    a64e:	4603      	mov	r3, r0
}
    a650:	4618      	mov	r0, r3
    a652:	3710      	adds	r7, #16
    a654:	46bd      	mov	sp, r7
    a656:	bd80      	pop	{r7, pc}
    a658:	00008d1d 	.word	0x00008d1d

0000a65c <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    a65c:	b580      	push	{r7, lr}
    a65e:	b084      	sub	sp, #16
    a660:	af00      	add	r7, sp, #0
    a662:	6078      	str	r0, [r7, #4]
    a664:	460b      	mov	r3, r1
    a666:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a668:	687b      	ldr	r3, [r7, #4]
    a66a:	7c9b      	ldrb	r3, [r3, #18]
    a66c:	f003 030f 	and.w	r3, r3, #15
    a670:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    a672:	78f9      	ldrb	r1, [r7, #3]
    a674:	7bfb      	ldrb	r3, [r7, #15]
    a676:	2201      	movs	r2, #1
    a678:	4618      	mov	r0, r3
    a67a:	4b0a      	ldr	r3, [pc, #40]	; (a6a4 <_usb_d_dev_ep_stall_set+0x48>)
    a67c:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a67e:	78fb      	ldrb	r3, [r7, #3]
    a680:	2220      	movs	r2, #32
    a682:	409a      	lsls	r2, r3
    a684:	7bfb      	ldrb	r3, [r7, #15]
    a686:	4611      	mov	r1, r2
    a688:	4618      	mov	r0, r3
    a68a:	4b07      	ldr	r3, [pc, #28]	; (a6a8 <_usb_d_dev_ep_stall_set+0x4c>)
    a68c:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    a68e:	687a      	ldr	r2, [r7, #4]
    a690:	7cd3      	ldrb	r3, [r2, #19]
    a692:	f043 0308 	orr.w	r3, r3, #8
    a696:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    a698:	2300      	movs	r3, #0
}
    a69a:	4618      	mov	r0, r3
    a69c:	3710      	adds	r7, #16
    a69e:	46bd      	mov	sp, r7
    a6a0:	bd80      	pop	{r7, pc}
    a6a2:	bf00      	nop
    a6a4:	00008cc5 	.word	0x00008cc5
    a6a8:	00008c45 	.word	0x00008c45

0000a6ac <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    a6ac:	b580      	push	{r7, lr}
    a6ae:	b084      	sub	sp, #16
    a6b0:	af00      	add	r7, sp, #0
    a6b2:	6078      	str	r0, [r7, #4]
    a6b4:	460b      	mov	r3, r1
    a6b6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    a6b8:	687b      	ldr	r3, [r7, #4]
    a6ba:	7c9b      	ldrb	r3, [r3, #18]
    a6bc:	f003 030f 	and.w	r3, r3, #15
    a6c0:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    a6c2:	78fa      	ldrb	r2, [r7, #3]
    a6c4:	7bfb      	ldrb	r3, [r7, #15]
    a6c6:	4611      	mov	r1, r2
    a6c8:	4618      	mov	r0, r3
    a6ca:	4b28      	ldr	r3, [pc, #160]	; (a76c <_usb_d_dev_ep_stall_clr+0xc0>)
    a6cc:	4798      	blx	r3
    a6ce:	4603      	mov	r3, r0
    a6d0:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    a6d2:	7bbb      	ldrb	r3, [r7, #14]
    a6d4:	f083 0301 	eor.w	r3, r3, #1
    a6d8:	b2db      	uxtb	r3, r3
    a6da:	2b00      	cmp	r3, #0
    a6dc:	d001      	beq.n	a6e2 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    a6de:	2300      	movs	r3, #0
    a6e0:	e040      	b.n	a764 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    a6e2:	78f9      	ldrb	r1, [r7, #3]
    a6e4:	7bfb      	ldrb	r3, [r7, #15]
    a6e6:	2200      	movs	r2, #0
    a6e8:	4618      	mov	r0, r3
    a6ea:	4b21      	ldr	r3, [pc, #132]	; (a770 <_usb_d_dev_ep_stall_clr+0xc4>)
    a6ec:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a6ee:	78fb      	ldrb	r3, [r7, #3]
    a6f0:	2220      	movs	r2, #32
    a6f2:	409a      	lsls	r2, r3
    a6f4:	7bfb      	ldrb	r3, [r7, #15]
    a6f6:	4611      	mov	r1, r2
    a6f8:	4618      	mov	r0, r3
    a6fa:	4b1e      	ldr	r3, [pc, #120]	; (a774 <_usb_d_dev_ep_stall_clr+0xc8>)
    a6fc:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    a6fe:	78fa      	ldrb	r2, [r7, #3]
    a700:	7bfb      	ldrb	r3, [r7, #15]
    a702:	4611      	mov	r1, r2
    a704:	4618      	mov	r0, r3
    a706:	4b1c      	ldr	r3, [pc, #112]	; (a778 <_usb_d_dev_ep_stall_clr+0xcc>)
    a708:	4798      	blx	r3
    a70a:	4603      	mov	r3, r0
    a70c:	2b00      	cmp	r3, #0
    a70e:	d00b      	beq.n	a728 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    a710:	78fa      	ldrb	r2, [r7, #3]
    a712:	7bfb      	ldrb	r3, [r7, #15]
    a714:	4611      	mov	r1, r2
    a716:	4618      	mov	r0, r3
    a718:	4b18      	ldr	r3, [pc, #96]	; (a77c <_usb_d_dev_ep_stall_clr+0xd0>)
    a71a:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    a71c:	78f9      	ldrb	r1, [r7, #3]
    a71e:	7bfb      	ldrb	r3, [r7, #15]
    a720:	2200      	movs	r2, #0
    a722:	4618      	mov	r0, r3
    a724:	4b16      	ldr	r3, [pc, #88]	; (a780 <_usb_d_dev_ep_stall_clr+0xd4>)
    a726:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a728:	687b      	ldr	r3, [r7, #4]
    a72a:	7cdb      	ldrb	r3, [r3, #19]
    a72c:	f003 0307 	and.w	r3, r3, #7
    a730:	b2db      	uxtb	r3, r3
    a732:	2b01      	cmp	r3, #1
    a734:	d110      	bne.n	a758 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    a736:	7bfb      	ldrb	r3, [r7, #15]
    a738:	4619      	mov	r1, r3
    a73a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a73e:	4b11      	ldr	r3, [pc, #68]	; (a784 <_usb_d_dev_ep_stall_clr+0xd8>)
    a740:	4798      	blx	r3
    a742:	4603      	mov	r3, r0
    a744:	f003 0330 	and.w	r3, r3, #48	; 0x30
    a748:	2b00      	cmp	r3, #0
    a74a:	d10a      	bne.n	a762 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    a74c:	687a      	ldr	r2, [r7, #4]
    a74e:	7cd3      	ldrb	r3, [r2, #19]
    a750:	f36f 03c3 	bfc	r3, #3, #1
    a754:	74d3      	strb	r3, [r2, #19]
    a756:	e004      	b.n	a762 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    a758:	687a      	ldr	r2, [r7, #4]
    a75a:	7cd3      	ldrb	r3, [r2, #19]
    a75c:	f36f 03c3 	bfc	r3, #3, #1
    a760:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    a762:	2300      	movs	r3, #0
}
    a764:	4618      	mov	r0, r3
    a766:	3710      	adds	r7, #16
    a768:	46bd      	mov	sp, r7
    a76a:	bd80      	pop	{r7, pc}
    a76c:	00008d1d 	.word	0x00008d1d
    a770:	00008cc5 	.word	0x00008cc5
    a774:	00008c6d 	.word	0x00008c6d
    a778:	00008d61 	.word	0x00008d61
    a77c:	00008da5 	.word	0x00008da5
    a780:	00008e91 	.word	0x00008e91
    a784:	0000874d 	.word	0x0000874d

0000a788 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    a788:	b580      	push	{r7, lr}
    a78a:	b086      	sub	sp, #24
    a78c:	af00      	add	r7, sp, #0
    a78e:	4603      	mov	r3, r0
    a790:	460a      	mov	r2, r1
    a792:	71fb      	strb	r3, [r7, #7]
    a794:	4613      	mov	r3, r2
    a796:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    a798:	79fb      	ldrb	r3, [r7, #7]
    a79a:	f003 030f 	and.w	r3, r3, #15
    a79e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a7a0:	79fb      	ldrb	r3, [r7, #7]
    a7a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a7a6:	2b00      	cmp	r3, #0
    a7a8:	bf14      	ite	ne
    a7aa:	2301      	movne	r3, #1
    a7ac:	2300      	moveq	r3, #0
    a7ae:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a7b0:	7cba      	ldrb	r2, [r7, #18]
    a7b2:	7cfb      	ldrb	r3, [r7, #19]
    a7b4:	4611      	mov	r1, r2
    a7b6:	4618      	mov	r0, r3
    a7b8:	4b13      	ldr	r3, [pc, #76]	; (a808 <_usb_d_dev_ep_stall+0x80>)
    a7ba:	4798      	blx	r3
    a7bc:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a7be:	7cfb      	ldrb	r3, [r7, #19]
    a7c0:	2b04      	cmp	r3, #4
    a7c2:	d902      	bls.n	a7ca <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    a7c4:	f06f 0311 	mvn.w	r3, #17
    a7c8:	e01a      	b.n	a800 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    a7ca:	79bb      	ldrb	r3, [r7, #6]
    a7cc:	2b01      	cmp	r3, #1
    a7ce:	d106      	bne.n	a7de <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    a7d0:	7cbb      	ldrb	r3, [r7, #18]
    a7d2:	4619      	mov	r1, r3
    a7d4:	68f8      	ldr	r0, [r7, #12]
    a7d6:	4b0d      	ldr	r3, [pc, #52]	; (a80c <_usb_d_dev_ep_stall+0x84>)
    a7d8:	4798      	blx	r3
    a7da:	6178      	str	r0, [r7, #20]
    a7dc:	e00f      	b.n	a7fe <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    a7de:	79bb      	ldrb	r3, [r7, #6]
    a7e0:	2b00      	cmp	r3, #0
    a7e2:	d106      	bne.n	a7f2 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a7e4:	7cbb      	ldrb	r3, [r7, #18]
    a7e6:	4619      	mov	r1, r3
    a7e8:	68f8      	ldr	r0, [r7, #12]
    a7ea:	4b09      	ldr	r3, [pc, #36]	; (a810 <_usb_d_dev_ep_stall+0x88>)
    a7ec:	4798      	blx	r3
    a7ee:	6178      	str	r0, [r7, #20]
    a7f0:	e005      	b.n	a7fe <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    a7f2:	7cbb      	ldrb	r3, [r7, #18]
    a7f4:	4619      	mov	r1, r3
    a7f6:	68f8      	ldr	r0, [r7, #12]
    a7f8:	4b06      	ldr	r3, [pc, #24]	; (a814 <_usb_d_dev_ep_stall+0x8c>)
    a7fa:	4798      	blx	r3
    a7fc:	6178      	str	r0, [r7, #20]
	}
	return rc;
    a7fe:	697b      	ldr	r3, [r7, #20]
}
    a800:	4618      	mov	r0, r3
    a802:	3718      	adds	r7, #24
    a804:	46bd      	mov	sp, r7
    a806:	bd80      	pop	{r7, pc}
    a808:	00009229 	.word	0x00009229
    a80c:	0000a65d 	.word	0x0000a65d
    a810:	0000a6ad 	.word	0x0000a6ad
    a814:	0000a62d 	.word	0x0000a62d

0000a818 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    a818:	b580      	push	{r7, lr}
    a81a:	b082      	sub	sp, #8
    a81c:	af00      	add	r7, sp, #0
    a81e:	6078      	str	r0, [r7, #4]
    a820:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a822:	687b      	ldr	r3, [r7, #4]
    a824:	7c9b      	ldrb	r3, [r3, #18]
    a826:	2bff      	cmp	r3, #255	; 0xff
    a828:	d014      	beq.n	a854 <_usb_d_dev_trans_done+0x3c>
    a82a:	687b      	ldr	r3, [r7, #4]
    a82c:	7cdb      	ldrb	r3, [r3, #19]
    a82e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a832:	b2db      	uxtb	r3, r3
    a834:	2b00      	cmp	r3, #0
    a836:	d00d      	beq.n	a854 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    a838:	687a      	ldr	r2, [r7, #4]
    a83a:	7cd3      	ldrb	r3, [r2, #19]
    a83c:	f36f 1386 	bfc	r3, #6, #1
    a840:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    a842:	4b06      	ldr	r3, [pc, #24]	; (a85c <_usb_d_dev_trans_done+0x44>)
    a844:	691b      	ldr	r3, [r3, #16]
    a846:	687a      	ldr	r2, [r7, #4]
    a848:	7c90      	ldrb	r0, [r2, #18]
    a84a:	687a      	ldr	r2, [r7, #4]
    a84c:	6892      	ldr	r2, [r2, #8]
    a84e:	6839      	ldr	r1, [r7, #0]
    a850:	4798      	blx	r3
    a852:	e000      	b.n	a856 <_usb_d_dev_trans_done+0x3e>
		return;
    a854:	bf00      	nop
}
    a856:	3708      	adds	r7, #8
    a858:	46bd      	mov	sp, r7
    a85a:	bd80      	pop	{r7, pc}
    a85c:	20000d28 	.word	0x20000d28

0000a860 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    a860:	b580      	push	{r7, lr}
    a862:	b086      	sub	sp, #24
    a864:	af00      	add	r7, sp, #0
    a866:	60f8      	str	r0, [r7, #12]
    a868:	460b      	mov	r3, r1
    a86a:	607a      	str	r2, [r7, #4]
    a86c:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a86e:	68fb      	ldr	r3, [r7, #12]
    a870:	7c9b      	ldrb	r3, [r3, #18]
    a872:	f003 030f 	and.w	r3, r3, #15
    a876:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    a878:	4b1f      	ldr	r3, [pc, #124]	; (a8f8 <_usb_d_dev_trans_stop+0x98>)
    a87a:	881b      	ldrh	r3, [r3, #0]
    a87c:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a87e:	68fb      	ldr	r3, [r7, #12]
    a880:	7c9b      	ldrb	r3, [r3, #18]
    a882:	2bff      	cmp	r3, #255	; 0xff
    a884:	d033      	beq.n	a8ee <_usb_d_dev_trans_stop+0x8e>
    a886:	68fb      	ldr	r3, [r7, #12]
    a888:	7cdb      	ldrb	r3, [r3, #19]
    a88a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a88e:	b2db      	uxtb	r3, r3
    a890:	2b00      	cmp	r3, #0
    a892:	d02c      	beq.n	a8ee <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    a894:	7afb      	ldrb	r3, [r7, #11]
    a896:	2b00      	cmp	r3, #0
    a898:	d006      	beq.n	a8a8 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a89a:	7dfb      	ldrb	r3, [r7, #23]
    a89c:	2200      	movs	r2, #0
    a89e:	2101      	movs	r1, #1
    a8a0:	4618      	mov	r0, r3
    a8a2:	4b16      	ldr	r3, [pc, #88]	; (a8fc <_usb_d_dev_trans_stop+0x9c>)
    a8a4:	4798      	blx	r3
    a8a6:	e005      	b.n	a8b4 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a8a8:	7dfb      	ldrb	r3, [r7, #23]
    a8aa:	2200      	movs	r2, #0
    a8ac:	2100      	movs	r1, #0
    a8ae:	4618      	mov	r0, r3
    a8b0:	4b13      	ldr	r3, [pc, #76]	; (a900 <_usb_d_dev_trans_stop+0xa0>)
    a8b2:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    a8b4:	7afb      	ldrb	r3, [r7, #11]
    a8b6:	f107 0218 	add.w	r2, r7, #24
    a8ba:	4413      	add	r3, r2
    a8bc:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a8c0:	461a      	mov	r2, r3
    a8c2:	7dfb      	ldrb	r3, [r7, #23]
    a8c4:	4611      	mov	r1, r2
    a8c6:	4618      	mov	r0, r3
    a8c8:	4b0e      	ldr	r3, [pc, #56]	; (a904 <_usb_d_dev_trans_stop+0xa4>)
    a8ca:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    a8cc:	7afb      	ldrb	r3, [r7, #11]
    a8ce:	f107 0218 	add.w	r2, r7, #24
    a8d2:	4413      	add	r3, r2
    a8d4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a8d8:	461a      	mov	r2, r3
    a8da:	7dfb      	ldrb	r3, [r7, #23]
    a8dc:	4611      	mov	r1, r2
    a8de:	4618      	mov	r0, r3
    a8e0:	4b09      	ldr	r3, [pc, #36]	; (a908 <_usb_d_dev_trans_stop+0xa8>)
    a8e2:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    a8e4:	6879      	ldr	r1, [r7, #4]
    a8e6:	68f8      	ldr	r0, [r7, #12]
    a8e8:	4b08      	ldr	r3, [pc, #32]	; (a90c <_usb_d_dev_trans_stop+0xac>)
    a8ea:	4798      	blx	r3
    a8ec:	e000      	b.n	a8f0 <_usb_d_dev_trans_stop+0x90>
		return;
    a8ee:	bf00      	nop
}
    a8f0:	3718      	adds	r7, #24
    a8f2:	46bd      	mov	sp, r7
    a8f4:	bd80      	pop	{r7, pc}
    a8f6:	bf00      	nop
    a8f8:	0000ef68 	.word	0x0000ef68
    a8fc:	00009115 	.word	0x00009115
    a900:	0000916d 	.word	0x0000916d
    a904:	00008c1d 	.word	0x00008c1d
    a908:	00008c6d 	.word	0x00008c6d
    a90c:	0000a819 	.word	0x0000a819

0000a910 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    a910:	b580      	push	{r7, lr}
    a912:	b086      	sub	sp, #24
    a914:	af00      	add	r7, sp, #0
    a916:	4603      	mov	r3, r0
    a918:	6039      	str	r1, [r7, #0]
    a91a:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    a91c:	79fb      	ldrb	r3, [r7, #7]
    a91e:	f003 030f 	and.w	r3, r3, #15
    a922:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    a924:	7dfb      	ldrb	r3, [r7, #23]
    a926:	015b      	lsls	r3, r3, #5
    a928:	4a1e      	ldr	r2, [pc, #120]	; (a9a4 <_usb_d_dev_ep_read_req+0x94>)
    a92a:	4413      	add	r3, r2
    a92c:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    a92e:	693b      	ldr	r3, [r7, #16]
    a930:	681b      	ldr	r3, [r3, #0]
    a932:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    a934:	693b      	ldr	r3, [r7, #16]
    a936:	685b      	ldr	r3, [r3, #4]
    a938:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a93c:	b29b      	uxth	r3, r3
    a93e:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    a940:	7dfb      	ldrb	r3, [r7, #23]
    a942:	2b04      	cmp	r3, #4
    a944:	d802      	bhi.n	a94c <_usb_d_dev_ep_read_req+0x3c>
    a946:	683b      	ldr	r3, [r7, #0]
    a948:	2b00      	cmp	r3, #0
    a94a:	d102      	bne.n	a952 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    a94c:	f06f 0311 	mvn.w	r3, #17
    a950:	e023      	b.n	a99a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    a952:	7dfb      	ldrb	r3, [r7, #23]
    a954:	4618      	mov	r0, r3
    a956:	4b14      	ldr	r3, [pc, #80]	; (a9a8 <_usb_d_dev_ep_read_req+0x98>)
    a958:	4798      	blx	r3
    a95a:	4603      	mov	r3, r0
    a95c:	f083 0301 	eor.w	r3, r3, #1
    a960:	b2db      	uxtb	r3, r3
    a962:	2b00      	cmp	r3, #0
    a964:	d002      	beq.n	a96c <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    a966:	f06f 0312 	mvn.w	r3, #18
    a96a:	e016      	b.n	a99a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    a96c:	7dfb      	ldrb	r3, [r7, #23]
    a96e:	4618      	mov	r0, r3
    a970:	4b0e      	ldr	r3, [pc, #56]	; (a9ac <_usb_d_dev_ep_read_req+0x9c>)
    a972:	4798      	blx	r3
    a974:	4603      	mov	r3, r0
    a976:	f083 0301 	eor.w	r3, r3, #1
    a97a:	b2db      	uxtb	r3, r3
    a97c:	2b00      	cmp	r3, #0
    a97e:	d001      	beq.n	a984 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    a980:	2300      	movs	r3, #0
    a982:	e00a      	b.n	a99a <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    a984:	68fb      	ldr	r3, [r7, #12]
    a986:	2208      	movs	r2, #8
    a988:	4619      	mov	r1, r3
    a98a:	6838      	ldr	r0, [r7, #0]
    a98c:	4b08      	ldr	r3, [pc, #32]	; (a9b0 <_usb_d_dev_ep_read_req+0xa0>)
    a98e:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    a990:	7dfb      	ldrb	r3, [r7, #23]
    a992:	4618      	mov	r0, r3
    a994:	4b07      	ldr	r3, [pc, #28]	; (a9b4 <_usb_d_dev_ep_read_req+0xa4>)
    a996:	4798      	blx	r3

	return bytes;
    a998:	897b      	ldrh	r3, [r7, #10]
}
    a99a:	4618      	mov	r0, r3
    a99c:	3718      	adds	r7, #24
    a99e:	46bd      	mov	sp, r7
    a9a0:	bd80      	pop	{r7, pc}
    a9a2:	bf00      	nop
    a9a4:	20000df0 	.word	0x20000df0
    a9a8:	00008c95 	.word	0x00008c95
    a9ac:	00008e41 	.word	0x00008e41
    a9b0:	0000e8e1 	.word	0x0000e8e1
    a9b4:	00008e71 	.word	0x00008e71

0000a9b8 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    a9b8:	b580      	push	{r7, lr}
    a9ba:	b086      	sub	sp, #24
    a9bc:	af00      	add	r7, sp, #0
    a9be:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    a9c0:	687b      	ldr	r3, [r7, #4]
    a9c2:	7a1b      	ldrb	r3, [r3, #8]
    a9c4:	f003 030f 	and.w	r3, r3, #15
    a9c8:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    a9ca:	687b      	ldr	r3, [r7, #4]
    a9cc:	7a1b      	ldrb	r3, [r3, #8]
    a9ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a9d2:	2b00      	cmp	r3, #0
    a9d4:	bf14      	ite	ne
    a9d6:	2301      	movne	r3, #1
    a9d8:	2300      	moveq	r3, #0
    a9da:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a9dc:	7d7a      	ldrb	r2, [r7, #21]
    a9de:	7dbb      	ldrb	r3, [r7, #22]
    a9e0:	4611      	mov	r1, r2
    a9e2:	4618      	mov	r0, r3
    a9e4:	4b5f      	ldr	r3, [pc, #380]	; (ab64 <_usb_d_dev_ep_trans+0x1ac>)
    a9e6:	4798      	blx	r3
    a9e8:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a9ea:	693b      	ldr	r3, [r7, #16]
    a9ec:	8a1b      	ldrh	r3, [r3, #16]
    a9ee:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a9f2:	4293      	cmp	r3, r2
    a9f4:	d004      	beq.n	aa00 <_usb_d_dev_ep_trans+0x48>
    a9f6:	693b      	ldr	r3, [r7, #16]
    a9f8:	8a1b      	ldrh	r3, [r3, #16]
    a9fa:	3b01      	subs	r3, #1
    a9fc:	b29b      	uxth	r3, r3
    a9fe:	e001      	b.n	aa04 <_usb_d_dev_ep_trans+0x4c>
    aa00:	f240 33ff 	movw	r3, #1023	; 0x3ff
    aa04:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    aa06:	687b      	ldr	r3, [r7, #4]
    aa08:	685a      	ldr	r2, [r3, #4]
    aa0a:	89fb      	ldrh	r3, [r7, #14]
    aa0c:	4013      	ands	r3, r2
    aa0e:	2b00      	cmp	r3, #0
    aa10:	bf14      	ite	ne
    aa12:	2301      	movne	r3, #1
    aa14:	2300      	moveq	r3, #0
    aa16:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    aa18:	2300      	movs	r3, #0
    aa1a:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    aa1c:	7dbb      	ldrb	r3, [r7, #22]
    aa1e:	2b04      	cmp	r3, #4
    aa20:	d902      	bls.n	aa28 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    aa22:	f06f 0311 	mvn.w	r3, #17
    aa26:	e098      	b.n	ab5a <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    aa28:	687b      	ldr	r3, [r7, #4]
    aa2a:	681b      	ldr	r3, [r3, #0]
    aa2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    aa30:	d31a      	bcc.n	aa68 <_usb_d_dev_ep_trans+0xb0>
    aa32:	687b      	ldr	r3, [r7, #4]
    aa34:	681b      	ldr	r3, [r3, #0]
    aa36:	461a      	mov	r2, r3
    aa38:	687b      	ldr	r3, [r7, #4]
    aa3a:	685b      	ldr	r3, [r3, #4]
    aa3c:	4413      	add	r3, r2
    aa3e:	4a4a      	ldr	r2, [pc, #296]	; (ab68 <_usb_d_dev_ep_trans+0x1b0>)
    aa40:	4293      	cmp	r3, r2
    aa42:	d811      	bhi.n	aa68 <_usb_d_dev_ep_trans+0xb0>
    aa44:	687b      	ldr	r3, [r7, #4]
    aa46:	681b      	ldr	r3, [r3, #0]
    aa48:	f003 0303 	and.w	r3, r3, #3
    aa4c:	2b00      	cmp	r3, #0
    aa4e:	d10b      	bne.n	aa68 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    aa50:	7d7b      	ldrb	r3, [r7, #21]
    aa52:	f083 0301 	eor.w	r3, r3, #1
    aa56:	b2db      	uxtb	r3, r3
    aa58:	2b00      	cmp	r3, #0
    aa5a:	d00e      	beq.n	aa7a <_usb_d_dev_ep_trans+0xc2>
    aa5c:	687b      	ldr	r3, [r7, #4]
    aa5e:	685b      	ldr	r3, [r3, #4]
    aa60:	693a      	ldr	r2, [r7, #16]
    aa62:	8a12      	ldrh	r2, [r2, #16]
    aa64:	4293      	cmp	r3, r2
    aa66:	d208      	bcs.n	aa7a <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    aa68:	693b      	ldr	r3, [r7, #16]
    aa6a:	68db      	ldr	r3, [r3, #12]
    aa6c:	2b00      	cmp	r3, #0
    aa6e:	d102      	bne.n	aa76 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    aa70:	f06f 0312 	mvn.w	r3, #18
    aa74:	e071      	b.n	ab5a <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    aa76:	2301      	movs	r3, #1
    aa78:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    aa7a:	7d7b      	ldrb	r3, [r7, #21]
    aa7c:	f083 0301 	eor.w	r3, r3, #1
    aa80:	b2db      	uxtb	r3, r3
    aa82:	2b00      	cmp	r3, #0
    aa84:	d009      	beq.n	aa9a <_usb_d_dev_ep_trans+0xe2>
    aa86:	7b7b      	ldrb	r3, [r7, #13]
    aa88:	2b00      	cmp	r3, #0
    aa8a:	d006      	beq.n	aa9a <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    aa8c:	693b      	ldr	r3, [r7, #16]
    aa8e:	68db      	ldr	r3, [r3, #12]
    aa90:	2b00      	cmp	r3, #0
    aa92:	d102      	bne.n	aa9a <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    aa94:	f06f 0311 	mvn.w	r3, #17
    aa98:	e05f      	b.n	ab5a <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    aa9a:	693b      	ldr	r3, [r7, #16]
    aa9c:	7cdb      	ldrb	r3, [r3, #19]
    aa9e:	f003 0308 	and.w	r3, r3, #8
    aaa2:	b2db      	uxtb	r3, r3
    aaa4:	2b00      	cmp	r3, #0
    aaa6:	d001      	beq.n	aaac <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    aaa8:	2302      	movs	r3, #2
    aaaa:	e056      	b.n	ab5a <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    aaac:	f107 0308 	add.w	r3, r7, #8
    aab0:	4618      	mov	r0, r3
    aab2:	4b2e      	ldr	r3, [pc, #184]	; (ab6c <_usb_d_dev_ep_trans+0x1b4>)
    aab4:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    aab6:	693b      	ldr	r3, [r7, #16]
    aab8:	7cdb      	ldrb	r3, [r3, #19]
    aaba:	f003 0340 	and.w	r3, r3, #64	; 0x40
    aabe:	b2db      	uxtb	r3, r3
    aac0:	2b00      	cmp	r3, #0
    aac2:	d006      	beq.n	aad2 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    aac4:	f107 0308 	add.w	r3, r7, #8
    aac8:	4618      	mov	r0, r3
    aaca:	4b29      	ldr	r3, [pc, #164]	; (ab70 <_usb_d_dev_ep_trans+0x1b8>)
    aacc:	4798      	blx	r3
		return USB_BUSY;
    aace:	2301      	movs	r3, #1
    aad0:	e043      	b.n	ab5a <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    aad2:	693a      	ldr	r2, [r7, #16]
    aad4:	7cd3      	ldrb	r3, [r2, #19]
    aad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aada:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    aadc:	f107 0308 	add.w	r3, r7, #8
    aae0:	4618      	mov	r0, r3
    aae2:	4b23      	ldr	r3, [pc, #140]	; (ab70 <_usb_d_dev_ep_trans+0x1b8>)
    aae4:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    aae6:	687b      	ldr	r3, [r7, #4]
    aae8:	681a      	ldr	r2, [r3, #0]
    aaea:	693b      	ldr	r3, [r7, #16]
    aaec:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    aaee:	687b      	ldr	r3, [r7, #4]
    aaf0:	685a      	ldr	r2, [r3, #4]
    aaf2:	693b      	ldr	r3, [r7, #16]
    aaf4:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    aaf6:	693b      	ldr	r3, [r7, #16]
    aaf8:	2200      	movs	r2, #0
    aafa:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    aafc:	693a      	ldr	r2, [r7, #16]
    aafe:	7cd3      	ldrb	r3, [r2, #19]
    ab00:	7d79      	ldrb	r1, [r7, #21]
    ab02:	f361 13c7 	bfi	r3, r1, #7, #1
    ab06:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    ab08:	693a      	ldr	r2, [r7, #16]
    ab0a:	7cd3      	ldrb	r3, [r2, #19]
    ab0c:	7df9      	ldrb	r1, [r7, #23]
    ab0e:	f361 1345 	bfi	r3, r1, #5, #1
    ab12:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    ab14:	687b      	ldr	r3, [r7, #4]
    ab16:	7a5b      	ldrb	r3, [r3, #9]
    ab18:	2b00      	cmp	r3, #0
    ab1a:	d007      	beq.n	ab2c <_usb_d_dev_ep_trans+0x174>
    ab1c:	7b7b      	ldrb	r3, [r7, #13]
    ab1e:	f083 0301 	eor.w	r3, r3, #1
    ab22:	b2db      	uxtb	r3, r3
    ab24:	2b00      	cmp	r3, #0
    ab26:	d001      	beq.n	ab2c <_usb_d_dev_ep_trans+0x174>
    ab28:	2301      	movs	r3, #1
    ab2a:	e000      	b.n	ab2e <_usb_d_dev_ep_trans+0x176>
    ab2c:	2300      	movs	r3, #0
    ab2e:	b2db      	uxtb	r3, r3
    ab30:	f003 0301 	and.w	r3, r3, #1
    ab34:	b2d9      	uxtb	r1, r3
    ab36:	693a      	ldr	r2, [r7, #16]
    ab38:	7cd3      	ldrb	r3, [r2, #19]
    ab3a:	f361 1304 	bfi	r3, r1, #4, #1
    ab3e:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    ab40:	7d7b      	ldrb	r3, [r7, #21]
    ab42:	2b00      	cmp	r3, #0
    ab44:	d004      	beq.n	ab50 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    ab46:	2100      	movs	r1, #0
    ab48:	6938      	ldr	r0, [r7, #16]
    ab4a:	4b0a      	ldr	r3, [pc, #40]	; (ab74 <_usb_d_dev_ep_trans+0x1bc>)
    ab4c:	4798      	blx	r3
    ab4e:	e003      	b.n	ab58 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    ab50:	2100      	movs	r1, #0
    ab52:	6938      	ldr	r0, [r7, #16]
    ab54:	4b08      	ldr	r3, [pc, #32]	; (ab78 <_usb_d_dev_ep_trans+0x1c0>)
    ab56:	4798      	blx	r3
	}

	return ERR_NONE;
    ab58:	2300      	movs	r3, #0
}
    ab5a:	4618      	mov	r0, r3
    ab5c:	3718      	adds	r7, #24
    ab5e:	46bd      	mov	sp, r7
    ab60:	bd80      	pop	{r7, pc}
    ab62:	bf00      	nop
    ab64:	00009229 	.word	0x00009229
    ab68:	20041fff 	.word	0x20041fff
    ab6c:	0000b385 	.word	0x0000b385
    ab70:	0000b3ab 	.word	0x0000b3ab
    ab74:	000094f1 	.word	0x000094f1
    ab78:	00009709 	.word	0x00009709

0000ab7c <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    ab7c:	b580      	push	{r7, lr}
    ab7e:	b084      	sub	sp, #16
    ab80:	af00      	add	r7, sp, #0
    ab82:	4603      	mov	r3, r0
    ab84:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    ab86:	79fb      	ldrb	r3, [r7, #7]
    ab88:	f003 030f 	and.w	r3, r3, #15
    ab8c:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    ab8e:	79fb      	ldrb	r3, [r7, #7]
    ab90:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ab94:	2b00      	cmp	r3, #0
    ab96:	bf14      	ite	ne
    ab98:	2301      	movne	r3, #1
    ab9a:	2300      	moveq	r3, #0
    ab9c:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ab9e:	7bba      	ldrb	r2, [r7, #14]
    aba0:	7bfb      	ldrb	r3, [r7, #15]
    aba2:	4611      	mov	r1, r2
    aba4:	4618      	mov	r0, r3
    aba6:	4b08      	ldr	r3, [pc, #32]	; (abc8 <_usb_d_dev_ep_abort+0x4c>)
    aba8:	4798      	blx	r3
    abaa:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    abac:	7bfb      	ldrb	r3, [r7, #15]
    abae:	2b04      	cmp	r3, #4
    abb0:	d806      	bhi.n	abc0 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    abb2:	7bbb      	ldrb	r3, [r7, #14]
    abb4:	2202      	movs	r2, #2
    abb6:	4619      	mov	r1, r3
    abb8:	68b8      	ldr	r0, [r7, #8]
    abba:	4b04      	ldr	r3, [pc, #16]	; (abcc <_usb_d_dev_ep_abort+0x50>)
    abbc:	4798      	blx	r3
    abbe:	e000      	b.n	abc2 <_usb_d_dev_ep_abort+0x46>
		return;
    abc0:	bf00      	nop
}
    abc2:	3710      	adds	r7, #16
    abc4:	46bd      	mov	sp, r7
    abc6:	bd80      	pop	{r7, pc}
    abc8:	00009229 	.word	0x00009229
    abcc:	0000a861 	.word	0x0000a861

0000abd0 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    abd0:	b480      	push	{r7}
    abd2:	b085      	sub	sp, #20
    abd4:	af00      	add	r7, sp, #0
    abd6:	4603      	mov	r3, r0
    abd8:	6039      	str	r1, [r7, #0]
    abda:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    abdc:	683b      	ldr	r3, [r7, #0]
    abde:	2b00      	cmp	r3, #0
    abe0:	d001      	beq.n	abe6 <_usb_d_dev_register_callback+0x16>
    abe2:	683b      	ldr	r3, [r7, #0]
    abe4:	e000      	b.n	abe8 <_usb_d_dev_register_callback+0x18>
    abe6:	4b0a      	ldr	r3, [pc, #40]	; (ac10 <_usb_d_dev_register_callback+0x40>)
    abe8:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    abea:	79fb      	ldrb	r3, [r7, #7]
    abec:	2b01      	cmp	r3, #1
    abee:	d103      	bne.n	abf8 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    abf0:	4a08      	ldr	r2, [pc, #32]	; (ac14 <_usb_d_dev_register_callback+0x44>)
    abf2:	68fb      	ldr	r3, [r7, #12]
    abf4:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    abf6:	e005      	b.n	ac04 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    abf8:	79fb      	ldrb	r3, [r7, #7]
    abfa:	2b00      	cmp	r3, #0
    abfc:	d102      	bne.n	ac04 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    abfe:	4a05      	ldr	r2, [pc, #20]	; (ac14 <_usb_d_dev_register_callback+0x44>)
    ac00:	68fb      	ldr	r3, [r7, #12]
    ac02:	6013      	str	r3, [r2, #0]
}
    ac04:	bf00      	nop
    ac06:	3714      	adds	r7, #20
    ac08:	46bd      	mov	sp, r7
    ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac0e:	4770      	bx	lr
    ac10:	00008ab1 	.word	0x00008ab1
    ac14:	20000d28 	.word	0x20000d28

0000ac18 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    ac18:	b480      	push	{r7}
    ac1a:	b085      	sub	sp, #20
    ac1c:	af00      	add	r7, sp, #0
    ac1e:	4603      	mov	r3, r0
    ac20:	6039      	str	r1, [r7, #0]
    ac22:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    ac24:	683b      	ldr	r3, [r7, #0]
    ac26:	2b00      	cmp	r3, #0
    ac28:	d001      	beq.n	ac2e <_usb_d_dev_register_ep_callback+0x16>
    ac2a:	683b      	ldr	r3, [r7, #0]
    ac2c:	e000      	b.n	ac30 <_usb_d_dev_register_ep_callback+0x18>
    ac2e:	4b0e      	ldr	r3, [pc, #56]	; (ac68 <_usb_d_dev_register_ep_callback+0x50>)
    ac30:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    ac32:	79fb      	ldrb	r3, [r7, #7]
    ac34:	2b00      	cmp	r3, #0
    ac36:	d103      	bne.n	ac40 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    ac38:	4a0c      	ldr	r2, [pc, #48]	; (ac6c <_usb_d_dev_register_ep_callback+0x54>)
    ac3a:	68fb      	ldr	r3, [r7, #12]
    ac3c:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    ac3e:	e00c      	b.n	ac5a <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    ac40:	79fb      	ldrb	r3, [r7, #7]
    ac42:	2b01      	cmp	r3, #1
    ac44:	d103      	bne.n	ac4e <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    ac46:	4a09      	ldr	r2, [pc, #36]	; (ac6c <_usb_d_dev_register_ep_callback+0x54>)
    ac48:	68fb      	ldr	r3, [r7, #12]
    ac4a:	60d3      	str	r3, [r2, #12]
}
    ac4c:	e005      	b.n	ac5a <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    ac4e:	79fb      	ldrb	r3, [r7, #7]
    ac50:	2b02      	cmp	r3, #2
    ac52:	d102      	bne.n	ac5a <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    ac54:	4a05      	ldr	r2, [pc, #20]	; (ac6c <_usb_d_dev_register_ep_callback+0x54>)
    ac56:	68fb      	ldr	r3, [r7, #12]
    ac58:	6113      	str	r3, [r2, #16]
}
    ac5a:	bf00      	nop
    ac5c:	3714      	adds	r7, #20
    ac5e:	46bd      	mov	sp, r7
    ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac64:	4770      	bx	lr
    ac66:	bf00      	nop
    ac68:	00008ab1 	.word	0x00008ab1
    ac6c:	20000d28 	.word	0x20000d28

0000ac70 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    ac70:	b580      	push	{r7, lr}
    ac72:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ac74:	4b01      	ldr	r3, [pc, #4]	; (ac7c <USB_0_Handler+0xc>)
    ac76:	4798      	blx	r3
}
    ac78:	bf00      	nop
    ac7a:	bd80      	pop	{r7, pc}
    ac7c:	00009ee1 	.word	0x00009ee1

0000ac80 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    ac80:	b580      	push	{r7, lr}
    ac82:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ac84:	4b01      	ldr	r3, [pc, #4]	; (ac8c <USB_1_Handler+0xc>)
    ac86:	4798      	blx	r3
}
    ac88:	bf00      	nop
    ac8a:	bd80      	pop	{r7, pc}
    ac8c:	00009ee1 	.word	0x00009ee1

0000ac90 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    ac90:	b580      	push	{r7, lr}
    ac92:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ac94:	4b01      	ldr	r3, [pc, #4]	; (ac9c <USB_2_Handler+0xc>)
    ac96:	4798      	blx	r3
}
    ac98:	bf00      	nop
    ac9a:	bd80      	pop	{r7, pc}
    ac9c:	00009ee1 	.word	0x00009ee1

0000aca0 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    aca0:	b580      	push	{r7, lr}
    aca2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    aca4:	4b01      	ldr	r3, [pc, #4]	; (acac <USB_3_Handler+0xc>)
    aca6:	4798      	blx	r3
}
    aca8:	bf00      	nop
    acaa:	bd80      	pop	{r7, pc}
    acac:	00009ee1 	.word	0x00009ee1

0000acb0 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    acb0:	b480      	push	{r7}
    acb2:	b083      	sub	sp, #12
    acb4:	af00      	add	r7, sp, #0
    acb6:	6078      	str	r0, [r7, #4]
    acb8:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    acba:	bf00      	nop
    acbc:	687b      	ldr	r3, [r7, #4]
    acbe:	689a      	ldr	r2, [r3, #8]
    acc0:	683b      	ldr	r3, [r7, #0]
    acc2:	4013      	ands	r3, r2
    acc4:	2b00      	cmp	r3, #0
    acc6:	d1f9      	bne.n	acbc <hri_wdt_wait_for_sync+0xc>
	};
}
    acc8:	bf00      	nop
    acca:	370c      	adds	r7, #12
    accc:	46bd      	mov	sp, r7
    acce:	f85d 7b04 	ldr.w	r7, [sp], #4
    acd2:	4770      	bx	lr

0000acd4 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    acd4:	b580      	push	{r7, lr}
    acd6:	b084      	sub	sp, #16
    acd8:	af00      	add	r7, sp, #0
    acda:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    acdc:	210e      	movs	r1, #14
    acde:	6878      	ldr	r0, [r7, #4]
    ace0:	4b0a      	ldr	r3, [pc, #40]	; (ad0c <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    ace2:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ace4:	687b      	ldr	r3, [r7, #4]
    ace6:	781b      	ldrb	r3, [r3, #0]
    ace8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    acea:	7bfb      	ldrb	r3, [r7, #15]
    acec:	085b      	lsrs	r3, r3, #1
    acee:	b2db      	uxtb	r3, r3
    acf0:	f003 0301 	and.w	r3, r3, #1
    acf4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    acf6:	7bfb      	ldrb	r3, [r7, #15]
    acf8:	2b00      	cmp	r3, #0
    acfa:	bf14      	ite	ne
    acfc:	2301      	movne	r3, #1
    acfe:	2300      	moveq	r3, #0
    ad00:	b2db      	uxtb	r3, r3
}
    ad02:	4618      	mov	r0, r3
    ad04:	3710      	adds	r7, #16
    ad06:	46bd      	mov	sp, r7
    ad08:	bd80      	pop	{r7, pc}
    ad0a:	bf00      	nop
    ad0c:	0000acb1 	.word	0x0000acb1

0000ad10 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    ad10:	b580      	push	{r7, lr}
    ad12:	b082      	sub	sp, #8
    ad14:	af00      	add	r7, sp, #0
    ad16:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    ad18:	687b      	ldr	r3, [r7, #4]
    ad1a:	781b      	ldrb	r3, [r3, #0]
    ad1c:	b2db      	uxtb	r3, r3
    ad1e:	f023 0304 	bic.w	r3, r3, #4
    ad22:	b2da      	uxtb	r2, r3
    ad24:	687b      	ldr	r3, [r7, #4]
    ad26:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ad28:	210e      	movs	r1, #14
    ad2a:	6878      	ldr	r0, [r7, #4]
    ad2c:	4b02      	ldr	r3, [pc, #8]	; (ad38 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    ad2e:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    ad30:	bf00      	nop
    ad32:	3708      	adds	r7, #8
    ad34:	46bd      	mov	sp, r7
    ad36:	bd80      	pop	{r7, pc}
    ad38:	0000acb1 	.word	0x0000acb1

0000ad3c <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    ad3c:	b580      	push	{r7, lr}
    ad3e:	b084      	sub	sp, #16
    ad40:	af00      	add	r7, sp, #0
    ad42:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ad44:	210e      	movs	r1, #14
    ad46:	6878      	ldr	r0, [r7, #4]
    ad48:	4b08      	ldr	r3, [pc, #32]	; (ad6c <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    ad4a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ad4c:	687b      	ldr	r3, [r7, #4]
    ad4e:	781b      	ldrb	r3, [r3, #0]
    ad50:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    ad52:	7bfb      	ldrb	r3, [r7, #15]
    ad54:	09db      	lsrs	r3, r3, #7
    ad56:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ad58:	7bfb      	ldrb	r3, [r7, #15]
    ad5a:	2b00      	cmp	r3, #0
    ad5c:	bf14      	ite	ne
    ad5e:	2301      	movne	r3, #1
    ad60:	2300      	moveq	r3, #0
    ad62:	b2db      	uxtb	r3, r3
}
    ad64:	4618      	mov	r0, r3
    ad66:	3710      	adds	r7, #16
    ad68:	46bd      	mov	sp, r7
    ad6a:	bd80      	pop	{r7, pc}
    ad6c:	0000acb1 	.word	0x0000acb1

0000ad70 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    ad70:	b480      	push	{r7}
    ad72:	b085      	sub	sp, #20
    ad74:	af00      	add	r7, sp, #0
    ad76:	6078      	str	r0, [r7, #4]
    ad78:	460b      	mov	r3, r1
    ad7a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    ad7c:	687b      	ldr	r3, [r7, #4]
    ad7e:	785b      	ldrb	r3, [r3, #1]
    ad80:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    ad82:	7bfb      	ldrb	r3, [r7, #15]
    ad84:	f023 030f 	bic.w	r3, r3, #15
    ad88:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    ad8a:	78fb      	ldrb	r3, [r7, #3]
    ad8c:	f003 030f 	and.w	r3, r3, #15
    ad90:	b2da      	uxtb	r2, r3
    ad92:	7bfb      	ldrb	r3, [r7, #15]
    ad94:	4313      	orrs	r3, r2
    ad96:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    ad98:	687b      	ldr	r3, [r7, #4]
    ad9a:	7bfa      	ldrb	r2, [r7, #15]
    ad9c:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    ad9e:	bf00      	nop
    ada0:	3714      	adds	r7, #20
    ada2:	46bd      	mov	sp, r7
    ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
    ada8:	4770      	bx	lr
	...

0000adac <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    adac:	b580      	push	{r7, lr}
    adae:	b082      	sub	sp, #8
    adb0:	af00      	add	r7, sp, #0
    adb2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    adb4:	687b      	ldr	r3, [r7, #4]
    adb6:	2b00      	cmp	r3, #0
    adb8:	d005      	beq.n	adc6 <_wdt_init+0x1a>
    adba:	687b      	ldr	r3, [r7, #4]
    adbc:	681b      	ldr	r3, [r3, #0]
    adbe:	2b00      	cmp	r3, #0
    adc0:	d001      	beq.n	adc6 <_wdt_init+0x1a>
    adc2:	2301      	movs	r3, #1
    adc4:	e000      	b.n	adc8 <_wdt_init+0x1c>
    adc6:	2300      	movs	r3, #0
    adc8:	f003 0301 	and.w	r3, r3, #1
    adcc:	b2db      	uxtb	r3, r3
    adce:	2250      	movs	r2, #80	; 0x50
    add0:	4913      	ldr	r1, [pc, #76]	; (ae20 <_wdt_init+0x74>)
    add2:	4618      	mov	r0, r3
    add4:	4b13      	ldr	r3, [pc, #76]	; (ae24 <_wdt_init+0x78>)
    add6:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    add8:	687b      	ldr	r3, [r7, #4]
    adda:	681b      	ldr	r3, [r3, #0]
    addc:	4618      	mov	r0, r3
    adde:	4b12      	ldr	r3, [pc, #72]	; (ae28 <_wdt_init+0x7c>)
    ade0:	4798      	blx	r3
    ade2:	4603      	mov	r3, r0
    ade4:	2b00      	cmp	r3, #0
    ade6:	d107      	bne.n	adf8 <_wdt_init+0x4c>
    ade8:	687b      	ldr	r3, [r7, #4]
    adea:	681b      	ldr	r3, [r3, #0]
    adec:	4618      	mov	r0, r3
    adee:	4b0f      	ldr	r3, [pc, #60]	; (ae2c <_wdt_init+0x80>)
    adf0:	4798      	blx	r3
    adf2:	4603      	mov	r3, r0
    adf4:	2b00      	cmp	r3, #0
    adf6:	d002      	beq.n	adfe <_wdt_init+0x52>
		return ERR_DENIED;
    adf8:	f06f 0310 	mvn.w	r3, #16
    adfc:	e00b      	b.n	ae16 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    adfe:	687b      	ldr	r3, [r7, #4]
    ae00:	681b      	ldr	r3, [r3, #0]
    ae02:	4618      	mov	r0, r3
    ae04:	4b0a      	ldr	r3, [pc, #40]	; (ae30 <_wdt_init+0x84>)
    ae06:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    ae08:	687b      	ldr	r3, [r7, #4]
    ae0a:	681b      	ldr	r3, [r3, #0]
    ae0c:	210b      	movs	r1, #11
    ae0e:	4618      	mov	r0, r3
    ae10:	4b08      	ldr	r3, [pc, #32]	; (ae34 <_wdt_init+0x88>)
    ae12:	4798      	blx	r3
	}

	return ERR_NONE;
    ae14:	2300      	movs	r3, #0
}
    ae16:	4618      	mov	r0, r3
    ae18:	3708      	adds	r7, #8
    ae1a:	46bd      	mov	sp, r7
    ae1c:	bd80      	pop	{r7, pc}
    ae1e:	bf00      	nop
    ae20:	0000ef6c 	.word	0x0000ef6c
    ae24:	000037fd 	.word	0x000037fd
    ae28:	0000ad3d 	.word	0x0000ad3d
    ae2c:	0000acd5 	.word	0x0000acd5
    ae30:	0000ad11 	.word	0x0000ad11
    ae34:	0000ad71 	.word	0x0000ad71

0000ae38 <hri_port_set_DIR_reg>:
{
    ae38:	b480      	push	{r7}
    ae3a:	b085      	sub	sp, #20
    ae3c:	af00      	add	r7, sp, #0
    ae3e:	60f8      	str	r0, [r7, #12]
    ae40:	460b      	mov	r3, r1
    ae42:	607a      	str	r2, [r7, #4]
    ae44:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    ae46:	7afb      	ldrb	r3, [r7, #11]
    ae48:	68fa      	ldr	r2, [r7, #12]
    ae4a:	01db      	lsls	r3, r3, #7
    ae4c:	4413      	add	r3, r2
    ae4e:	3308      	adds	r3, #8
    ae50:	687a      	ldr	r2, [r7, #4]
    ae52:	601a      	str	r2, [r3, #0]
}
    ae54:	bf00      	nop
    ae56:	3714      	adds	r7, #20
    ae58:	46bd      	mov	sp, r7
    ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae5e:	4770      	bx	lr

0000ae60 <hri_port_clear_DIR_reg>:
{
    ae60:	b480      	push	{r7}
    ae62:	b085      	sub	sp, #20
    ae64:	af00      	add	r7, sp, #0
    ae66:	60f8      	str	r0, [r7, #12]
    ae68:	460b      	mov	r3, r1
    ae6a:	607a      	str	r2, [r7, #4]
    ae6c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    ae6e:	7afb      	ldrb	r3, [r7, #11]
    ae70:	68fa      	ldr	r2, [r7, #12]
    ae72:	01db      	lsls	r3, r3, #7
    ae74:	4413      	add	r3, r2
    ae76:	3304      	adds	r3, #4
    ae78:	687a      	ldr	r2, [r7, #4]
    ae7a:	601a      	str	r2, [r3, #0]
}
    ae7c:	bf00      	nop
    ae7e:	3714      	adds	r7, #20
    ae80:	46bd      	mov	sp, r7
    ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae86:	4770      	bx	lr

0000ae88 <hri_port_set_OUT_reg>:
{
    ae88:	b480      	push	{r7}
    ae8a:	b085      	sub	sp, #20
    ae8c:	af00      	add	r7, sp, #0
    ae8e:	60f8      	str	r0, [r7, #12]
    ae90:	460b      	mov	r3, r1
    ae92:	607a      	str	r2, [r7, #4]
    ae94:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    ae96:	7afb      	ldrb	r3, [r7, #11]
    ae98:	68fa      	ldr	r2, [r7, #12]
    ae9a:	01db      	lsls	r3, r3, #7
    ae9c:	4413      	add	r3, r2
    ae9e:	3318      	adds	r3, #24
    aea0:	687a      	ldr	r2, [r7, #4]
    aea2:	601a      	str	r2, [r3, #0]
}
    aea4:	bf00      	nop
    aea6:	3714      	adds	r7, #20
    aea8:	46bd      	mov	sp, r7
    aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    aeae:	4770      	bx	lr

0000aeb0 <hri_port_clear_OUT_reg>:
{
    aeb0:	b480      	push	{r7}
    aeb2:	b085      	sub	sp, #20
    aeb4:	af00      	add	r7, sp, #0
    aeb6:	60f8      	str	r0, [r7, #12]
    aeb8:	460b      	mov	r3, r1
    aeba:	607a      	str	r2, [r7, #4]
    aebc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    aebe:	7afb      	ldrb	r3, [r7, #11]
    aec0:	68fa      	ldr	r2, [r7, #12]
    aec2:	01db      	lsls	r3, r3, #7
    aec4:	4413      	add	r3, r2
    aec6:	3314      	adds	r3, #20
    aec8:	687a      	ldr	r2, [r7, #4]
    aeca:	601a      	str	r2, [r3, #0]
}
    aecc:	bf00      	nop
    aece:	3714      	adds	r7, #20
    aed0:	46bd      	mov	sp, r7
    aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
    aed6:	4770      	bx	lr

0000aed8 <hri_port_write_PMUX_PMUXE_bf>:
{
    aed8:	b480      	push	{r7}
    aeda:	b085      	sub	sp, #20
    aedc:	af00      	add	r7, sp, #0
    aede:	6078      	str	r0, [r7, #4]
    aee0:	4608      	mov	r0, r1
    aee2:	4611      	mov	r1, r2
    aee4:	461a      	mov	r2, r3
    aee6:	4603      	mov	r3, r0
    aee8:	70fb      	strb	r3, [r7, #3]
    aeea:	460b      	mov	r3, r1
    aeec:	70bb      	strb	r3, [r7, #2]
    aeee:	4613      	mov	r3, r2
    aef0:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    aef2:	78fa      	ldrb	r2, [r7, #3]
    aef4:	78bb      	ldrb	r3, [r7, #2]
    aef6:	6879      	ldr	r1, [r7, #4]
    aef8:	01d2      	lsls	r2, r2, #7
    aefa:	440a      	add	r2, r1
    aefc:	4413      	add	r3, r2
    aefe:	3330      	adds	r3, #48	; 0x30
    af00:	781b      	ldrb	r3, [r3, #0]
    af02:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    af04:	7bfb      	ldrb	r3, [r7, #15]
    af06:	f023 030f 	bic.w	r3, r3, #15
    af0a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    af0c:	787b      	ldrb	r3, [r7, #1]
    af0e:	f003 030f 	and.w	r3, r3, #15
    af12:	b2da      	uxtb	r2, r3
    af14:	7bfb      	ldrb	r3, [r7, #15]
    af16:	4313      	orrs	r3, r2
    af18:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    af1a:	78fa      	ldrb	r2, [r7, #3]
    af1c:	78bb      	ldrb	r3, [r7, #2]
    af1e:	6879      	ldr	r1, [r7, #4]
    af20:	01d2      	lsls	r2, r2, #7
    af22:	440a      	add	r2, r1
    af24:	4413      	add	r3, r2
    af26:	3330      	adds	r3, #48	; 0x30
    af28:	7bfa      	ldrb	r2, [r7, #15]
    af2a:	701a      	strb	r2, [r3, #0]
}
    af2c:	bf00      	nop
    af2e:	3714      	adds	r7, #20
    af30:	46bd      	mov	sp, r7
    af32:	f85d 7b04 	ldr.w	r7, [sp], #4
    af36:	4770      	bx	lr

0000af38 <hri_port_write_PMUX_PMUXO_bf>:
{
    af38:	b480      	push	{r7}
    af3a:	b085      	sub	sp, #20
    af3c:	af00      	add	r7, sp, #0
    af3e:	6078      	str	r0, [r7, #4]
    af40:	4608      	mov	r0, r1
    af42:	4611      	mov	r1, r2
    af44:	461a      	mov	r2, r3
    af46:	4603      	mov	r3, r0
    af48:	70fb      	strb	r3, [r7, #3]
    af4a:	460b      	mov	r3, r1
    af4c:	70bb      	strb	r3, [r7, #2]
    af4e:	4613      	mov	r3, r2
    af50:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    af52:	78fa      	ldrb	r2, [r7, #3]
    af54:	78bb      	ldrb	r3, [r7, #2]
    af56:	6879      	ldr	r1, [r7, #4]
    af58:	01d2      	lsls	r2, r2, #7
    af5a:	440a      	add	r2, r1
    af5c:	4413      	add	r3, r2
    af5e:	3330      	adds	r3, #48	; 0x30
    af60:	781b      	ldrb	r3, [r3, #0]
    af62:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    af64:	7bfb      	ldrb	r3, [r7, #15]
    af66:	f003 030f 	and.w	r3, r3, #15
    af6a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    af6c:	787b      	ldrb	r3, [r7, #1]
    af6e:	011b      	lsls	r3, r3, #4
    af70:	b2da      	uxtb	r2, r3
    af72:	7bfb      	ldrb	r3, [r7, #15]
    af74:	4313      	orrs	r3, r2
    af76:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    af78:	78fa      	ldrb	r2, [r7, #3]
    af7a:	78bb      	ldrb	r3, [r7, #2]
    af7c:	6879      	ldr	r1, [r7, #4]
    af7e:	01d2      	lsls	r2, r2, #7
    af80:	440a      	add	r2, r1
    af82:	4413      	add	r3, r2
    af84:	3330      	adds	r3, #48	; 0x30
    af86:	7bfa      	ldrb	r2, [r7, #15]
    af88:	701a      	strb	r2, [r3, #0]
}
    af8a:	bf00      	nop
    af8c:	3714      	adds	r7, #20
    af8e:	46bd      	mov	sp, r7
    af90:	f85d 7b04 	ldr.w	r7, [sp], #4
    af94:	4770      	bx	lr

0000af96 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    af96:	b480      	push	{r7}
    af98:	b085      	sub	sp, #20
    af9a:	af00      	add	r7, sp, #0
    af9c:	6078      	str	r0, [r7, #4]
    af9e:	4608      	mov	r0, r1
    afa0:	4611      	mov	r1, r2
    afa2:	461a      	mov	r2, r3
    afa4:	4603      	mov	r3, r0
    afa6:	70fb      	strb	r3, [r7, #3]
    afa8:	460b      	mov	r3, r1
    afaa:	70bb      	strb	r3, [r7, #2]
    afac:	4613      	mov	r3, r2
    afae:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    afb0:	78fa      	ldrb	r2, [r7, #3]
    afb2:	78bb      	ldrb	r3, [r7, #2]
    afb4:	6879      	ldr	r1, [r7, #4]
    afb6:	01d2      	lsls	r2, r2, #7
    afb8:	440a      	add	r2, r1
    afba:	4413      	add	r3, r2
    afbc:	3340      	adds	r3, #64	; 0x40
    afbe:	781b      	ldrb	r3, [r3, #0]
    afc0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    afc2:	7bfb      	ldrb	r3, [r7, #15]
    afc4:	f023 0301 	bic.w	r3, r3, #1
    afc8:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    afca:	787a      	ldrb	r2, [r7, #1]
    afcc:	7bfb      	ldrb	r3, [r7, #15]
    afce:	4313      	orrs	r3, r2
    afd0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    afd2:	78fa      	ldrb	r2, [r7, #3]
    afd4:	78bb      	ldrb	r3, [r7, #2]
    afd6:	6879      	ldr	r1, [r7, #4]
    afd8:	01d2      	lsls	r2, r2, #7
    afda:	440a      	add	r2, r1
    afdc:	4413      	add	r3, r2
    afde:	3340      	adds	r3, #64	; 0x40
    afe0:	7bfa      	ldrb	r2, [r7, #15]
    afe2:	701a      	strb	r2, [r3, #0]
}
    afe4:	bf00      	nop
    afe6:	3714      	adds	r7, #20
    afe8:	46bd      	mov	sp, r7
    afea:	f85d 7b04 	ldr.w	r7, [sp], #4
    afee:	4770      	bx	lr

0000aff0 <hri_port_write_WRCONFIG_reg>:
{
    aff0:	b480      	push	{r7}
    aff2:	b085      	sub	sp, #20
    aff4:	af00      	add	r7, sp, #0
    aff6:	60f8      	str	r0, [r7, #12]
    aff8:	460b      	mov	r3, r1
    affa:	607a      	str	r2, [r7, #4]
    affc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    affe:	7afb      	ldrb	r3, [r7, #11]
    b000:	68fa      	ldr	r2, [r7, #12]
    b002:	01db      	lsls	r3, r3, #7
    b004:	4413      	add	r3, r2
    b006:	3328      	adds	r3, #40	; 0x28
    b008:	687a      	ldr	r2, [r7, #4]
    b00a:	601a      	str	r2, [r3, #0]
}
    b00c:	bf00      	nop
    b00e:	3714      	adds	r7, #20
    b010:	46bd      	mov	sp, r7
    b012:	f85d 7b04 	ldr.w	r7, [sp], #4
    b016:	4770      	bx	lr

0000b018 <_gpio_set_direction>:
{
    b018:	b580      	push	{r7, lr}
    b01a:	b082      	sub	sp, #8
    b01c:	af00      	add	r7, sp, #0
    b01e:	4603      	mov	r3, r0
    b020:	6039      	str	r1, [r7, #0]
    b022:	71fb      	strb	r3, [r7, #7]
    b024:	4613      	mov	r3, r2
    b026:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    b028:	79bb      	ldrb	r3, [r7, #6]
    b02a:	2b01      	cmp	r3, #1
    b02c:	d01c      	beq.n	b068 <_gpio_set_direction+0x50>
    b02e:	2b02      	cmp	r3, #2
    b030:	d037      	beq.n	b0a2 <_gpio_set_direction+0x8a>
    b032:	2b00      	cmp	r3, #0
    b034:	d14e      	bne.n	b0d4 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b036:	79fb      	ldrb	r3, [r7, #7]
    b038:	683a      	ldr	r2, [r7, #0]
    b03a:	4619      	mov	r1, r3
    b03c:	482a      	ldr	r0, [pc, #168]	; (b0e8 <_gpio_set_direction+0xd0>)
    b03e:	4b2b      	ldr	r3, [pc, #172]	; (b0ec <_gpio_set_direction+0xd4>)
    b040:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b042:	683b      	ldr	r3, [r7, #0]
    b044:	b29b      	uxth	r3, r3
    b046:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b04a:	79fb      	ldrb	r3, [r7, #7]
    b04c:	4619      	mov	r1, r3
    b04e:	4826      	ldr	r0, [pc, #152]	; (b0e8 <_gpio_set_direction+0xd0>)
    b050:	4b27      	ldr	r3, [pc, #156]	; (b0f0 <_gpio_set_direction+0xd8>)
    b052:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b054:	683b      	ldr	r3, [r7, #0]
    b056:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b058:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b05c:	79fb      	ldrb	r3, [r7, #7]
    b05e:	4619      	mov	r1, r3
    b060:	4821      	ldr	r0, [pc, #132]	; (b0e8 <_gpio_set_direction+0xd0>)
    b062:	4b23      	ldr	r3, [pc, #140]	; (b0f0 <_gpio_set_direction+0xd8>)
    b064:	4798      	blx	r3
		break;
    b066:	e03a      	b.n	b0de <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b068:	79fb      	ldrb	r3, [r7, #7]
    b06a:	683a      	ldr	r2, [r7, #0]
    b06c:	4619      	mov	r1, r3
    b06e:	481e      	ldr	r0, [pc, #120]	; (b0e8 <_gpio_set_direction+0xd0>)
    b070:	4b1e      	ldr	r3, [pc, #120]	; (b0ec <_gpio_set_direction+0xd4>)
    b072:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    b074:	683b      	ldr	r3, [r7, #0]
    b076:	b29b      	uxth	r3, r3
    b078:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b07c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b080:	79f9      	ldrb	r1, [r7, #7]
    b082:	461a      	mov	r2, r3
    b084:	4818      	ldr	r0, [pc, #96]	; (b0e8 <_gpio_set_direction+0xd0>)
    b086:	4b1a      	ldr	r3, [pc, #104]	; (b0f0 <_gpio_set_direction+0xd8>)
    b088:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    b08a:	683b      	ldr	r3, [r7, #0]
    b08c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    b08e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    b092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b096:	79f9      	ldrb	r1, [r7, #7]
    b098:	461a      	mov	r2, r3
    b09a:	4813      	ldr	r0, [pc, #76]	; (b0e8 <_gpio_set_direction+0xd0>)
    b09c:	4b14      	ldr	r3, [pc, #80]	; (b0f0 <_gpio_set_direction+0xd8>)
    b09e:	4798      	blx	r3
		break;
    b0a0:	e01d      	b.n	b0de <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    b0a2:	79fb      	ldrb	r3, [r7, #7]
    b0a4:	683a      	ldr	r2, [r7, #0]
    b0a6:	4619      	mov	r1, r3
    b0a8:	480f      	ldr	r0, [pc, #60]	; (b0e8 <_gpio_set_direction+0xd0>)
    b0aa:	4b12      	ldr	r3, [pc, #72]	; (b0f4 <_gpio_set_direction+0xdc>)
    b0ac:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b0ae:	683b      	ldr	r3, [r7, #0]
    b0b0:	b29b      	uxth	r3, r3
    b0b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b0b6:	79fb      	ldrb	r3, [r7, #7]
    b0b8:	4619      	mov	r1, r3
    b0ba:	480b      	ldr	r0, [pc, #44]	; (b0e8 <_gpio_set_direction+0xd0>)
    b0bc:	4b0c      	ldr	r3, [pc, #48]	; (b0f0 <_gpio_set_direction+0xd8>)
    b0be:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b0c0:	683b      	ldr	r3, [r7, #0]
    b0c2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b0c4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b0c8:	79fb      	ldrb	r3, [r7, #7]
    b0ca:	4619      	mov	r1, r3
    b0cc:	4806      	ldr	r0, [pc, #24]	; (b0e8 <_gpio_set_direction+0xd0>)
    b0ce:	4b08      	ldr	r3, [pc, #32]	; (b0f0 <_gpio_set_direction+0xd8>)
    b0d0:	4798      	blx	r3
		break;
    b0d2:	e004      	b.n	b0de <_gpio_set_direction+0xc6>
		ASSERT(false);
    b0d4:	2246      	movs	r2, #70	; 0x46
    b0d6:	4908      	ldr	r1, [pc, #32]	; (b0f8 <_gpio_set_direction+0xe0>)
    b0d8:	2000      	movs	r0, #0
    b0da:	4b08      	ldr	r3, [pc, #32]	; (b0fc <_gpio_set_direction+0xe4>)
    b0dc:	4798      	blx	r3
}
    b0de:	bf00      	nop
    b0e0:	3708      	adds	r7, #8
    b0e2:	46bd      	mov	sp, r7
    b0e4:	bd80      	pop	{r7, pc}
    b0e6:	bf00      	nop
    b0e8:	41008000 	.word	0x41008000
    b0ec:	0000ae61 	.word	0x0000ae61
    b0f0:	0000aff1 	.word	0x0000aff1
    b0f4:	0000ae39 	.word	0x0000ae39
    b0f8:	0000ef84 	.word	0x0000ef84
    b0fc:	000037fd 	.word	0x000037fd

0000b100 <_gpio_set_level>:
{
    b100:	b580      	push	{r7, lr}
    b102:	b082      	sub	sp, #8
    b104:	af00      	add	r7, sp, #0
    b106:	4603      	mov	r3, r0
    b108:	6039      	str	r1, [r7, #0]
    b10a:	71fb      	strb	r3, [r7, #7]
    b10c:	4613      	mov	r3, r2
    b10e:	71bb      	strb	r3, [r7, #6]
	if (level) {
    b110:	79bb      	ldrb	r3, [r7, #6]
    b112:	2b00      	cmp	r3, #0
    b114:	d006      	beq.n	b124 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    b116:	79fb      	ldrb	r3, [r7, #7]
    b118:	683a      	ldr	r2, [r7, #0]
    b11a:	4619      	mov	r1, r3
    b11c:	4806      	ldr	r0, [pc, #24]	; (b138 <_gpio_set_level+0x38>)
    b11e:	4b07      	ldr	r3, [pc, #28]	; (b13c <_gpio_set_level+0x3c>)
    b120:	4798      	blx	r3
}
    b122:	e005      	b.n	b130 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    b124:	79fb      	ldrb	r3, [r7, #7]
    b126:	683a      	ldr	r2, [r7, #0]
    b128:	4619      	mov	r1, r3
    b12a:	4803      	ldr	r0, [pc, #12]	; (b138 <_gpio_set_level+0x38>)
    b12c:	4b04      	ldr	r3, [pc, #16]	; (b140 <_gpio_set_level+0x40>)
    b12e:	4798      	blx	r3
}
    b130:	bf00      	nop
    b132:	3708      	adds	r7, #8
    b134:	46bd      	mov	sp, r7
    b136:	bd80      	pop	{r7, pc}
    b138:	41008000 	.word	0x41008000
    b13c:	0000ae89 	.word	0x0000ae89
    b140:	0000aeb1 	.word	0x0000aeb1

0000b144 <_gpio_set_pin_function>:
{
    b144:	b590      	push	{r4, r7, lr}
    b146:	b085      	sub	sp, #20
    b148:	af00      	add	r7, sp, #0
    b14a:	6078      	str	r0, [r7, #4]
    b14c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    b14e:	687b      	ldr	r3, [r7, #4]
    b150:	095b      	lsrs	r3, r3, #5
    b152:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    b154:	687b      	ldr	r3, [r7, #4]
    b156:	b2db      	uxtb	r3, r3
    b158:	f003 031f 	and.w	r3, r3, #31
    b15c:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    b15e:	683b      	ldr	r3, [r7, #0]
    b160:	f1b3 3fff 	cmp.w	r3, #4294967295
    b164:	d106      	bne.n	b174 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    b166:	7bba      	ldrb	r2, [r7, #14]
    b168:	7bf9      	ldrb	r1, [r7, #15]
    b16a:	2300      	movs	r3, #0
    b16c:	4812      	ldr	r0, [pc, #72]	; (b1b8 <_gpio_set_pin_function+0x74>)
    b16e:	4c13      	ldr	r4, [pc, #76]	; (b1bc <_gpio_set_pin_function+0x78>)
    b170:	47a0      	blx	r4
}
    b172:	e01d      	b.n	b1b0 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    b174:	7bba      	ldrb	r2, [r7, #14]
    b176:	7bf9      	ldrb	r1, [r7, #15]
    b178:	2301      	movs	r3, #1
    b17a:	480f      	ldr	r0, [pc, #60]	; (b1b8 <_gpio_set_pin_function+0x74>)
    b17c:	4c0f      	ldr	r4, [pc, #60]	; (b1bc <_gpio_set_pin_function+0x78>)
    b17e:	47a0      	blx	r4
		if (pin & 1) {
    b180:	7bbb      	ldrb	r3, [r7, #14]
    b182:	f003 0301 	and.w	r3, r3, #1
    b186:	2b00      	cmp	r3, #0
    b188:	d009      	beq.n	b19e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    b18a:	7bbb      	ldrb	r3, [r7, #14]
    b18c:	085b      	lsrs	r3, r3, #1
    b18e:	b2da      	uxtb	r2, r3
    b190:	683b      	ldr	r3, [r7, #0]
    b192:	b2db      	uxtb	r3, r3
    b194:	7bf9      	ldrb	r1, [r7, #15]
    b196:	4808      	ldr	r0, [pc, #32]	; (b1b8 <_gpio_set_pin_function+0x74>)
    b198:	4c09      	ldr	r4, [pc, #36]	; (b1c0 <_gpio_set_pin_function+0x7c>)
    b19a:	47a0      	blx	r4
}
    b19c:	e008      	b.n	b1b0 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    b19e:	7bbb      	ldrb	r3, [r7, #14]
    b1a0:	085b      	lsrs	r3, r3, #1
    b1a2:	b2da      	uxtb	r2, r3
    b1a4:	683b      	ldr	r3, [r7, #0]
    b1a6:	b2db      	uxtb	r3, r3
    b1a8:	7bf9      	ldrb	r1, [r7, #15]
    b1aa:	4803      	ldr	r0, [pc, #12]	; (b1b8 <_gpio_set_pin_function+0x74>)
    b1ac:	4c05      	ldr	r4, [pc, #20]	; (b1c4 <_gpio_set_pin_function+0x80>)
    b1ae:	47a0      	blx	r4
}
    b1b0:	bf00      	nop
    b1b2:	3714      	adds	r7, #20
    b1b4:	46bd      	mov	sp, r7
    b1b6:	bd90      	pop	{r4, r7, pc}
    b1b8:	41008000 	.word	0x41008000
    b1bc:	0000af97 	.word	0x0000af97
    b1c0:	0000af39 	.word	0x0000af39
    b1c4:	0000aed9 	.word	0x0000aed9

0000b1c8 <gpio_set_pin_function>:
{
    b1c8:	b580      	push	{r7, lr}
    b1ca:	b082      	sub	sp, #8
    b1cc:	af00      	add	r7, sp, #0
    b1ce:	6078      	str	r0, [r7, #4]
    b1d0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    b1d2:	6839      	ldr	r1, [r7, #0]
    b1d4:	6878      	ldr	r0, [r7, #4]
    b1d6:	4b03      	ldr	r3, [pc, #12]	; (b1e4 <gpio_set_pin_function+0x1c>)
    b1d8:	4798      	blx	r3
}
    b1da:	bf00      	nop
    b1dc:	3708      	adds	r7, #8
    b1de:	46bd      	mov	sp, r7
    b1e0:	bd80      	pop	{r7, pc}
    b1e2:	bf00      	nop
    b1e4:	0000b145 	.word	0x0000b145

0000b1e8 <gpio_set_pin_direction>:
{
    b1e8:	b580      	push	{r7, lr}
    b1ea:	b082      	sub	sp, #8
    b1ec:	af00      	add	r7, sp, #0
    b1ee:	4603      	mov	r3, r0
    b1f0:	460a      	mov	r2, r1
    b1f2:	71fb      	strb	r3, [r7, #7]
    b1f4:	4613      	mov	r3, r2
    b1f6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    b1f8:	79fb      	ldrb	r3, [r7, #7]
    b1fa:	095b      	lsrs	r3, r3, #5
    b1fc:	b2d8      	uxtb	r0, r3
    b1fe:	79fb      	ldrb	r3, [r7, #7]
    b200:	f003 031f 	and.w	r3, r3, #31
    b204:	2201      	movs	r2, #1
    b206:	fa02 f303 	lsl.w	r3, r2, r3
    b20a:	79ba      	ldrb	r2, [r7, #6]
    b20c:	4619      	mov	r1, r3
    b20e:	4b03      	ldr	r3, [pc, #12]	; (b21c <gpio_set_pin_direction+0x34>)
    b210:	4798      	blx	r3
}
    b212:	bf00      	nop
    b214:	3708      	adds	r7, #8
    b216:	46bd      	mov	sp, r7
    b218:	bd80      	pop	{r7, pc}
    b21a:	bf00      	nop
    b21c:	0000b019 	.word	0x0000b019

0000b220 <gpio_set_pin_level>:
{
    b220:	b580      	push	{r7, lr}
    b222:	b082      	sub	sp, #8
    b224:	af00      	add	r7, sp, #0
    b226:	4603      	mov	r3, r0
    b228:	460a      	mov	r2, r1
    b22a:	71fb      	strb	r3, [r7, #7]
    b22c:	4613      	mov	r3, r2
    b22e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    b230:	79fb      	ldrb	r3, [r7, #7]
    b232:	095b      	lsrs	r3, r3, #5
    b234:	b2d8      	uxtb	r0, r3
    b236:	79fb      	ldrb	r3, [r7, #7]
    b238:	f003 031f 	and.w	r3, r3, #31
    b23c:	2201      	movs	r2, #1
    b23e:	fa02 f303 	lsl.w	r3, r2, r3
    b242:	79ba      	ldrb	r2, [r7, #6]
    b244:	4619      	mov	r1, r3
    b246:	4b03      	ldr	r3, [pc, #12]	; (b254 <gpio_set_pin_level+0x34>)
    b248:	4798      	blx	r3
}
    b24a:	bf00      	nop
    b24c:	3708      	adds	r7, #8
    b24e:	46bd      	mov	sp, r7
    b250:	bd80      	pop	{r7, pc}
    b252:	bf00      	nop
    b254:	0000b101 	.word	0x0000b101

0000b258 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    b258:	b580      	push	{r7, lr}
    b25a:	b082      	sub	sp, #8
    b25c:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    b25e:	2100      	movs	r1, #0
    b260:	2008      	movs	r0, #8
    b262:	4b24      	ldr	r3, [pc, #144]	; (b2f4 <QSPI_N25Q256_exit_xip+0x9c>)
    b264:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    b266:	2100      	movs	r1, #0
    b268:	202b      	movs	r0, #43	; 0x2b
    b26a:	4b22      	ldr	r3, [pc, #136]	; (b2f4 <QSPI_N25Q256_exit_xip+0x9c>)
    b26c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    b26e:	2100      	movs	r1, #0
    b270:	202a      	movs	r0, #42	; 0x2a
    b272:	4b20      	ldr	r3, [pc, #128]	; (b2f4 <QSPI_N25Q256_exit_xip+0x9c>)
    b274:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    b276:	2102      	movs	r1, #2
    b278:	2008      	movs	r0, #8
    b27a:	4b1f      	ldr	r3, [pc, #124]	; (b2f8 <QSPI_N25Q256_exit_xip+0xa0>)
    b27c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    b27e:	2102      	movs	r1, #2
    b280:	202b      	movs	r0, #43	; 0x2b
    b282:	4b1d      	ldr	r3, [pc, #116]	; (b2f8 <QSPI_N25Q256_exit_xip+0xa0>)
    b284:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    b286:	2102      	movs	r1, #2
    b288:	202a      	movs	r0, #42	; 0x2a
    b28a:	4b1b      	ldr	r3, [pc, #108]	; (b2f8 <QSPI_N25Q256_exit_xip+0xa0>)
    b28c:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    b28e:	2101      	movs	r1, #1
    b290:	2008      	movs	r0, #8
    b292:	4b1a      	ldr	r3, [pc, #104]	; (b2fc <QSPI_N25Q256_exit_xip+0xa4>)
    b294:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    b296:	2100      	movs	r1, #0
    b298:	202b      	movs	r0, #43	; 0x2b
    b29a:	4b18      	ldr	r3, [pc, #96]	; (b2fc <QSPI_N25Q256_exit_xip+0xa4>)
    b29c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    b29e:	2100      	movs	r1, #0
    b2a0:	202a      	movs	r0, #42	; 0x2a
    b2a2:	4b16      	ldr	r3, [pc, #88]	; (b2fc <QSPI_N25Q256_exit_xip+0xa4>)
    b2a4:	4798      	blx	r3

	delay_us(1);
    b2a6:	2001      	movs	r0, #1
    b2a8:	4b15      	ldr	r3, [pc, #84]	; (b300 <QSPI_N25Q256_exit_xip+0xa8>)
    b2aa:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    b2ac:	2300      	movs	r3, #0
    b2ae:	607b      	str	r3, [r7, #4]
    b2b0:	e010      	b.n	b2d4 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    b2b2:	2101      	movs	r1, #1
    b2b4:	202a      	movs	r0, #42	; 0x2a
    b2b6:	4b11      	ldr	r3, [pc, #68]	; (b2fc <QSPI_N25Q256_exit_xip+0xa4>)
    b2b8:	4798      	blx	r3
		delay_us(1);
    b2ba:	2001      	movs	r0, #1
    b2bc:	4b10      	ldr	r3, [pc, #64]	; (b300 <QSPI_N25Q256_exit_xip+0xa8>)
    b2be:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    b2c0:	2100      	movs	r1, #0
    b2c2:	202a      	movs	r0, #42	; 0x2a
    b2c4:	4b0d      	ldr	r3, [pc, #52]	; (b2fc <QSPI_N25Q256_exit_xip+0xa4>)
    b2c6:	4798      	blx	r3
		delay_us(1);
    b2c8:	2001      	movs	r0, #1
    b2ca:	4b0d      	ldr	r3, [pc, #52]	; (b300 <QSPI_N25Q256_exit_xip+0xa8>)
    b2cc:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    b2ce:	687b      	ldr	r3, [r7, #4]
    b2d0:	3301      	adds	r3, #1
    b2d2:	607b      	str	r3, [r7, #4]
    b2d4:	687b      	ldr	r3, [r7, #4]
    b2d6:	2b06      	cmp	r3, #6
    b2d8:	ddeb      	ble.n	b2b2 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    b2da:	2101      	movs	r1, #1
    b2dc:	202b      	movs	r0, #43	; 0x2b
    b2de:	4b07      	ldr	r3, [pc, #28]	; (b2fc <QSPI_N25Q256_exit_xip+0xa4>)
    b2e0:	4798      	blx	r3
	delay_us(1);
    b2e2:	2001      	movs	r0, #1
    b2e4:	4b06      	ldr	r3, [pc, #24]	; (b300 <QSPI_N25Q256_exit_xip+0xa8>)
    b2e6:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    b2e8:	4b06      	ldr	r3, [pc, #24]	; (b304 <QSPI_N25Q256_exit_xip+0xac>)
    b2ea:	4798      	blx	r3
}
    b2ec:	bf00      	nop
    b2ee:	3708      	adds	r7, #8
    b2f0:	46bd      	mov	sp, r7
    b2f2:	bd80      	pop	{r7, pc}
    b2f4:	0000b1c9 	.word	0x0000b1c9
    b2f8:	0000b1e9 	.word	0x0000b1e9
    b2fc:	0000b221 	.word	0x0000b221
    b300:	000021d9 	.word	0x000021d9
    b304:	00001535 	.word	0x00001535

0000b308 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    b308:	b598      	push	{r3, r4, r7, lr}
    b30a:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    b30c:	4806      	ldr	r0, [pc, #24]	; (b328 <spi_nor_flash_init+0x20>)
    b30e:	4b07      	ldr	r3, [pc, #28]	; (b32c <spi_nor_flash_init+0x24>)
    b310:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    b312:	2300      	movs	r3, #0
    b314:	4a06      	ldr	r2, [pc, #24]	; (b330 <spi_nor_flash_init+0x28>)
    b316:	4904      	ldr	r1, [pc, #16]	; (b328 <spi_nor_flash_init+0x20>)
    b318:	4806      	ldr	r0, [pc, #24]	; (b334 <spi_nor_flash_init+0x2c>)
    b31a:	4c07      	ldr	r4, [pc, #28]	; (b338 <spi_nor_flash_init+0x30>)
    b31c:	47a0      	blx	r4
    b31e:	4602      	mov	r2, r0
    b320:	4b06      	ldr	r3, [pc, #24]	; (b33c <spi_nor_flash_init+0x34>)
    b322:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    b324:	bf00      	nop
    b326:	bd98      	pop	{r3, r4, r7, pc}
    b328:	200016e4 	.word	0x200016e4
    b32c:	00002765 	.word	0x00002765
    b330:	0000b259 	.word	0x0000b259
    b334:	20000e90 	.word	0x20000e90
    b338:	0000b775 	.word	0x0000b775
    b33c:	200018e4 	.word	0x200018e4

0000b340 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b340:	b580      	push	{r7, lr}
    b342:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b344:	4805      	ldr	r0, [pc, #20]	; (b35c <cdc_device_acm_init+0x1c>)
    b346:	4b06      	ldr	r3, [pc, #24]	; (b360 <cdc_device_acm_init+0x20>)
    b348:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b34a:	4b06      	ldr	r3, [pc, #24]	; (b364 <cdc_device_acm_init+0x24>)
    b34c:	4798      	blx	r3

	usbdc_start(single_desc);
    b34e:	4806      	ldr	r0, [pc, #24]	; (b368 <cdc_device_acm_init+0x28>)
    b350:	4b06      	ldr	r3, [pc, #24]	; (b36c <cdc_device_acm_init+0x2c>)
    b352:	4798      	blx	r3
	usbdc_attach();
    b354:	4b06      	ldr	r3, [pc, #24]	; (b370 <cdc_device_acm_init+0x30>)
    b356:	4798      	blx	r3
}
    b358:	bf00      	nop
    b35a:	bd80      	pop	{r7, pc}
    b35c:	20000ee0 	.word	0x20000ee0
    b360:	0000ce9d 	.word	0x0000ce9d
    b364:	0000c115 	.word	0x0000c115
    b368:	20000200 	.word	0x20000200
    b36c:	0000cf39 	.word	0x0000cf39
    b370:	0000cf89 	.word	0x0000cf89

0000b374 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    b374:	b580      	push	{r7, lr}
    b376:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b378:	4b01      	ldr	r3, [pc, #4]	; (b380 <usb_init+0xc>)
    b37a:	4798      	blx	r3
}
    b37c:	bf00      	nop
    b37e:	bd80      	pop	{r7, pc}
    b380:	0000b341 	.word	0x0000b341

0000b384 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    b384:	b480      	push	{r7}
    b386:	b085      	sub	sp, #20
    b388:	af00      	add	r7, sp, #0
    b38a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b38c:	f3ef 8310 	mrs	r3, PRIMASK
    b390:	60fb      	str	r3, [r7, #12]
  return(result);
    b392:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    b394:	687b      	ldr	r3, [r7, #4]
    b396:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    b398:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    b39a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    b39e:	bf00      	nop
    b3a0:	3714      	adds	r7, #20
    b3a2:	46bd      	mov	sp, r7
    b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3a8:	4770      	bx	lr

0000b3aa <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    b3aa:	b480      	push	{r7}
    b3ac:	b085      	sub	sp, #20
    b3ae:	af00      	add	r7, sp, #0
    b3b0:	6078      	str	r0, [r7, #4]
    b3b2:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    b3b6:	687b      	ldr	r3, [r7, #4]
    b3b8:	681b      	ldr	r3, [r3, #0]
    b3ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    b3bc:	68fb      	ldr	r3, [r7, #12]
    b3be:	f383 8810 	msr	PRIMASK, r3
}
    b3c2:	bf00      	nop
    b3c4:	3714      	adds	r7, #20
    b3c6:	46bd      	mov	sp, r7
    b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3cc:	4770      	bx	lr
	...

0000b3d0 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    b3d0:	b580      	push	{r7, lr}
    b3d2:	b08c      	sub	sp, #48	; 0x30
    b3d4:	af00      	add	r7, sp, #0
    b3d6:	6078      	str	r0, [r7, #4]
    b3d8:	460b      	mov	r3, r1
    b3da:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b3dc:	687b      	ldr	r3, [r7, #4]
    b3de:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b3e0:	687b      	ldr	r3, [r7, #4]
    b3e2:	681b      	ldr	r3, [r3, #0]
    b3e4:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    b3e6:	f107 030c 	add.w	r3, r7, #12
    b3ea:	2200      	movs	r2, #0
    b3ec:	601a      	str	r2, [r3, #0]
    b3ee:	605a      	str	r2, [r3, #4]
    b3f0:	609a      	str	r2, [r3, #8]
    b3f2:	60da      	str	r2, [r3, #12]
    b3f4:	611a      	str	r2, [r3, #16]
    b3f6:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b3fa:	7b1b      	ldrb	r3, [r3, #12]
    b3fc:	2b00      	cmp	r3, #0
    b3fe:	d001      	beq.n	b404 <n25q256a_xip_confirm+0x34>
    b400:	2206      	movs	r2, #6
    b402:	e000      	b.n	b406 <n25q256a_xip_confirm+0x36>
    b404:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b406:	7b3b      	ldrb	r3, [r7, #12]
    b408:	f362 0302 	bfi	r3, r2, #0, #3
    b40c:	733b      	strb	r3, [r7, #12]
    b40e:	7b3b      	ldrb	r3, [r7, #12]
    b410:	f043 0310 	orr.w	r3, r3, #16
    b414:	733b      	strb	r3, [r7, #12]
    b416:	7b3b      	ldrb	r3, [r7, #12]
    b418:	f043 0320 	orr.w	r3, r3, #32
    b41c:	733b      	strb	r3, [r7, #12]
    b41e:	7b3b      	ldrb	r3, [r7, #12]
    b420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b424:	733b      	strb	r3, [r7, #12]
    b426:	7b3b      	ldrb	r3, [r7, #12]
    b428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b42c:	733b      	strb	r3, [r7, #12]
    b42e:	7b7b      	ldrb	r3, [r7, #13]
    b430:	f043 0303 	orr.w	r3, r3, #3
    b434:	737b      	strb	r3, [r7, #13]
    b436:	7b7b      	ldrb	r3, [r7, #13]
    b438:	2201      	movs	r2, #1
    b43a:	f362 1305 	bfi	r3, r2, #4, #2
    b43e:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    b440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b442:	7b1b      	ldrb	r3, [r3, #12]
    b444:	2b00      	cmp	r3, #0
    b446:	d001      	beq.n	b44c <n25q256a_xip_confirm+0x7c>
    b448:	2208      	movs	r2, #8
    b44a:	e000      	b.n	b44e <n25q256a_xip_confirm+0x7e>
    b44c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b44e:	7bbb      	ldrb	r3, [r7, #14]
    b450:	f362 0304 	bfi	r3, r2, #0, #5
    b454:	73bb      	strb	r3, [r7, #14]
    b456:	230b      	movs	r3, #11
    b458:	743b      	strb	r3, [r7, #16]
    b45a:	78fb      	ldrb	r3, [r7, #3]
    b45c:	2b00      	cmp	r3, #0
    b45e:	d001      	beq.n	b464 <n25q256a_xip_confirm+0x94>
    b460:	2300      	movs	r3, #0
    b462:	e000      	b.n	b466 <n25q256a_xip_confirm+0x96>
    b464:	23ff      	movs	r3, #255	; 0xff
    b466:	747b      	strb	r3, [r7, #17]
    b468:	2301      	movs	r3, #1
    b46a:	61bb      	str	r3, [r7, #24]
    b46c:	f107 0327 	add.w	r3, r7, #39	; 0x27
    b470:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    b472:	f107 030c 	add.w	r3, r7, #12
    b476:	4619      	mov	r1, r3
    b478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b47a:	4b07      	ldr	r3, [pc, #28]	; (b498 <n25q256a_xip_confirm+0xc8>)
    b47c:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    b47e:	78fb      	ldrb	r3, [r7, #3]
    b480:	2b00      	cmp	r3, #0
    b482:	d001      	beq.n	b488 <n25q256a_xip_confirm+0xb8>
    b484:	2202      	movs	r2, #2
    b486:	e000      	b.n	b48a <n25q256a_xip_confirm+0xba>
    b488:	2201      	movs	r2, #1
    b48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b48c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b48e:	2300      	movs	r3, #0
}
    b490:	4618      	mov	r0, r3
    b492:	3730      	adds	r7, #48	; 0x30
    b494:	46bd      	mov	sp, r7
    b496:	bd80      	pop	{r7, pc}
    b498:	000027dd 	.word	0x000027dd

0000b49c <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    b49c:	b580      	push	{r7, lr}
    b49e:	b08c      	sub	sp, #48	; 0x30
    b4a0:	af00      	add	r7, sp, #0
    b4a2:	6078      	str	r0, [r7, #4]
    b4a4:	460b      	mov	r3, r1
    b4a6:	70fb      	strb	r3, [r7, #3]
    b4a8:	4613      	mov	r3, r2
    b4aa:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    b4ac:	2300      	movs	r3, #0
    b4ae:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    b4b0:	687b      	ldr	r3, [r7, #4]
    b4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    b4b4:	687b      	ldr	r3, [r7, #4]
    b4b6:	681b      	ldr	r3, [r3, #0]
    b4b8:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    b4ba:	f107 030c 	add.w	r3, r7, #12
    b4be:	2200      	movs	r2, #0
    b4c0:	601a      	str	r2, [r3, #0]
    b4c2:	605a      	str	r2, [r3, #4]
    b4c4:	609a      	str	r2, [r3, #8]
    b4c6:	60da      	str	r2, [r3, #12]
    b4c8:	611a      	str	r2, [r3, #16]
    b4ca:	615a      	str	r2, [r3, #20]
    b4cc:	78fb      	ldrb	r3, [r7, #3]
    b4ce:	f003 0307 	and.w	r3, r3, #7
    b4d2:	b2da      	uxtb	r2, r3
    b4d4:	7b3b      	ldrb	r3, [r7, #12]
    b4d6:	f362 0302 	bfi	r3, r2, #0, #3
    b4da:	733b      	strb	r3, [r7, #12]
    b4dc:	7b3b      	ldrb	r3, [r7, #12]
    b4de:	f043 0310 	orr.w	r3, r3, #16
    b4e2:	733b      	strb	r3, [r7, #12]
    b4e4:	7b3b      	ldrb	r3, [r7, #12]
    b4e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b4ea:	733b      	strb	r3, [r7, #12]
    b4ec:	78bb      	ldrb	r3, [r7, #2]
    b4ee:	743b      	strb	r3, [r7, #16]
    b4f0:	2301      	movs	r3, #1
    b4f2:	61bb      	str	r3, [r7, #24]
    b4f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b4f8:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    b4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b4fc:	7b5b      	ldrb	r3, [r3, #13]
    b4fe:	2b00      	cmp	r3, #0
    b500:	d003      	beq.n	b50a <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    b502:	2100      	movs	r1, #0
    b504:	6878      	ldr	r0, [r7, #4]
    b506:	4b0a      	ldr	r3, [pc, #40]	; (b530 <n25q256a_read_reg+0x94>)
    b508:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b50a:	f107 030c 	add.w	r3, r7, #12
    b50e:	4619      	mov	r1, r3
    b510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b512:	4b08      	ldr	r3, [pc, #32]	; (b534 <n25q256a_read_reg+0x98>)
    b514:	4798      	blx	r3
	if (n25q->xip_mode) {
    b516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b518:	7b5b      	ldrb	r3, [r3, #13]
    b51a:	2b00      	cmp	r3, #0
    b51c:	d003      	beq.n	b526 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    b51e:	2101      	movs	r1, #1
    b520:	6878      	ldr	r0, [r7, #4]
    b522:	4b03      	ldr	r3, [pc, #12]	; (b530 <n25q256a_read_reg+0x94>)
    b524:	4798      	blx	r3
	}
	return status;
    b526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b528:	4618      	mov	r0, r3
    b52a:	3730      	adds	r7, #48	; 0x30
    b52c:	46bd      	mov	sp, r7
    b52e:	bd80      	pop	{r7, pc}
    b530:	0000b3d1 	.word	0x0000b3d1
    b534:	000027dd 	.word	0x000027dd

0000b538 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    b538:	b580      	push	{r7, lr}
    b53a:	b08c      	sub	sp, #48	; 0x30
    b53c:	af00      	add	r7, sp, #0
    b53e:	60f8      	str	r0, [r7, #12]
    b540:	607b      	str	r3, [r7, #4]
    b542:	460b      	mov	r3, r1
    b544:	72fb      	strb	r3, [r7, #11]
    b546:	4613      	mov	r3, r2
    b548:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b54a:	68fb      	ldr	r3, [r7, #12]
    b54c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b54e:	68fb      	ldr	r3, [r7, #12]
    b550:	681b      	ldr	r3, [r3, #0]
    b552:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    b554:	f107 0310 	add.w	r3, r7, #16
    b558:	2200      	movs	r2, #0
    b55a:	601a      	str	r2, [r3, #0]
    b55c:	605a      	str	r2, [r3, #4]
    b55e:	609a      	str	r2, [r3, #8]
    b560:	60da      	str	r2, [r3, #12]
    b562:	611a      	str	r2, [r3, #16]
    b564:	615a      	str	r2, [r3, #20]
    b566:	7afb      	ldrb	r3, [r7, #11]
    b568:	f003 0307 	and.w	r3, r3, #7
    b56c:	b2da      	uxtb	r2, r3
    b56e:	7c3b      	ldrb	r3, [r7, #16]
    b570:	f362 0302 	bfi	r3, r2, #0, #3
    b574:	743b      	strb	r3, [r7, #16]
    b576:	7c3b      	ldrb	r3, [r7, #16]
    b578:	f043 0310 	orr.w	r3, r3, #16
    b57c:	743b      	strb	r3, [r7, #16]
    b57e:	7c3b      	ldrb	r3, [r7, #16]
    b580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b584:	743b      	strb	r3, [r7, #16]
    b586:	7c7b      	ldrb	r3, [r7, #17]
    b588:	2202      	movs	r2, #2
    b58a:	f362 1305 	bfi	r3, r2, #4, #2
    b58e:	747b      	strb	r3, [r7, #17]
    b590:	7abb      	ldrb	r3, [r7, #10]
    b592:	753b      	strb	r3, [r7, #20]
    b594:	2301      	movs	r3, #1
    b596:	61fb      	str	r3, [r7, #28]
    b598:	1d3b      	adds	r3, r7, #4
    b59a:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    b59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b59e:	7b5b      	ldrb	r3, [r3, #13]
    b5a0:	2b00      	cmp	r3, #0
    b5a2:	d003      	beq.n	b5ac <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    b5a4:	2100      	movs	r1, #0
    b5a6:	68f8      	ldr	r0, [r7, #12]
    b5a8:	4b09      	ldr	r3, [pc, #36]	; (b5d0 <n25q256a_write_reg+0x98>)
    b5aa:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b5ac:	f107 0310 	add.w	r3, r7, #16
    b5b0:	4619      	mov	r1, r3
    b5b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b5b4:	4b07      	ldr	r3, [pc, #28]	; (b5d4 <n25q256a_write_reg+0x9c>)
    b5b6:	4798      	blx	r3
	if (n25q->xip_mode) {
    b5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b5ba:	7b5b      	ldrb	r3, [r3, #13]
    b5bc:	2b00      	cmp	r3, #0
    b5be:	d003      	beq.n	b5c8 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    b5c0:	2101      	movs	r1, #1
    b5c2:	68f8      	ldr	r0, [r7, #12]
    b5c4:	4b02      	ldr	r3, [pc, #8]	; (b5d0 <n25q256a_write_reg+0x98>)
    b5c6:	4798      	blx	r3
	}
}
    b5c8:	bf00      	nop
    b5ca:	3730      	adds	r7, #48	; 0x30
    b5cc:	46bd      	mov	sp, r7
    b5ce:	bd80      	pop	{r7, pc}
    b5d0:	0000b3d1 	.word	0x0000b3d1
    b5d4:	000027dd 	.word	0x000027dd

0000b5d8 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    b5d8:	b580      	push	{r7, lr}
    b5da:	b090      	sub	sp, #64	; 0x40
    b5dc:	af00      	add	r7, sp, #0
    b5de:	6078      	str	r0, [r7, #4]
    b5e0:	460b      	mov	r3, r1
    b5e2:	70fb      	strb	r3, [r7, #3]
    b5e4:	4613      	mov	r3, r2
    b5e6:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b5e8:	687b      	ldr	r3, [r7, #4]
    b5ea:	681b      	ldr	r3, [r3, #0]
    b5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    b5ee:	78bb      	ldrb	r3, [r7, #2]
    b5f0:	2b00      	cmp	r3, #0
    b5f2:	d001      	beq.n	b5f8 <n25q256a_write_enable+0x20>
    b5f4:	2306      	movs	r3, #6
    b5f6:	e000      	b.n	b5fa <n25q256a_write_enable+0x22>
    b5f8:	2304      	movs	r3, #4
    b5fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    b5fe:	f107 0320 	add.w	r3, r7, #32
    b602:	2200      	movs	r2, #0
    b604:	601a      	str	r2, [r3, #0]
    b606:	605a      	str	r2, [r3, #4]
    b608:	609a      	str	r2, [r3, #8]
    b60a:	60da      	str	r2, [r3, #12]
    b60c:	611a      	str	r2, [r3, #16]
    b60e:	615a      	str	r2, [r3, #20]
    b610:	78fb      	ldrb	r3, [r7, #3]
    b612:	f003 0307 	and.w	r3, r3, #7
    b616:	b2da      	uxtb	r2, r3
    b618:	f897 3020 	ldrb.w	r3, [r7, #32]
    b61c:	f362 0302 	bfi	r3, r2, #0, #3
    b620:	f887 3020 	strb.w	r3, [r7, #32]
    b624:	f897 3020 	ldrb.w	r3, [r7, #32]
    b628:	f043 0310 	orr.w	r3, r3, #16
    b62c:	f887 3020 	strb.w	r3, [r7, #32]
    b630:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    b634:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    b638:	f107 0308 	add.w	r3, r7, #8
    b63c:	2200      	movs	r2, #0
    b63e:	601a      	str	r2, [r3, #0]
    b640:	605a      	str	r2, [r3, #4]
    b642:	609a      	str	r2, [r3, #8]
    b644:	60da      	str	r2, [r3, #12]
    b646:	611a      	str	r2, [r3, #16]
    b648:	615a      	str	r2, [r3, #20]
    b64a:	78fb      	ldrb	r3, [r7, #3]
    b64c:	f003 0307 	and.w	r3, r3, #7
    b650:	b2da      	uxtb	r2, r3
    b652:	7a3b      	ldrb	r3, [r7, #8]
    b654:	f362 0302 	bfi	r3, r2, #0, #3
    b658:	723b      	strb	r3, [r7, #8]
    b65a:	7a3b      	ldrb	r3, [r7, #8]
    b65c:	f043 0310 	orr.w	r3, r3, #16
    b660:	723b      	strb	r3, [r7, #8]
    b662:	7a3b      	ldrb	r3, [r7, #8]
    b664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b668:	723b      	strb	r3, [r7, #8]
    b66a:	2305      	movs	r3, #5
    b66c:	733b      	strb	r3, [r7, #12]
    b66e:	2301      	movs	r3, #1
    b670:	617b      	str	r3, [r7, #20]
    b672:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    b676:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    b678:	f107 0320 	add.w	r3, r7, #32
    b67c:	4619      	mov	r1, r3
    b67e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b680:	4b08      	ldr	r3, [pc, #32]	; (b6a4 <n25q256a_write_enable+0xcc>)
    b682:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    b684:	f107 0308 	add.w	r3, r7, #8
    b688:	4619      	mov	r1, r3
    b68a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b68c:	4b05      	ldr	r3, [pc, #20]	; (b6a4 <n25q256a_write_enable+0xcc>)
    b68e:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    b690:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    b694:	f003 0302 	and.w	r3, r3, #2
    b698:	2b00      	cmp	r3, #0
    b69a:	d0ed      	beq.n	b678 <n25q256a_write_enable+0xa0>
}
    b69c:	bf00      	nop
    b69e:	3740      	adds	r7, #64	; 0x40
    b6a0:	46bd      	mov	sp, r7
    b6a2:	bd80      	pop	{r7, pc}
    b6a4:	000027dd 	.word	0x000027dd

0000b6a8 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    b6a8:	b590      	push	{r4, r7, lr}
    b6aa:	b087      	sub	sp, #28
    b6ac:	af00      	add	r7, sp, #0
    b6ae:	6078      	str	r0, [r7, #4]
    b6b0:	460b      	mov	r3, r1
    b6b2:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    b6b4:	687b      	ldr	r3, [r7, #4]
    b6b6:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b6b8:	68fb      	ldr	r3, [r7, #12]
    b6ba:	7b1b      	ldrb	r3, [r3, #12]
    b6bc:	2b00      	cmp	r3, #0
    b6be:	d001      	beq.n	b6c4 <n25q256a_switch_mode+0x1c>
    b6c0:	2306      	movs	r3, #6
    b6c2:	e000      	b.n	b6c6 <n25q256a_switch_mode+0x1e>
    b6c4:	2300      	movs	r3, #0
    b6c6:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b6c8:	7afb      	ldrb	r3, [r7, #11]
    b6ca:	2265      	movs	r2, #101	; 0x65
    b6cc:	4619      	mov	r1, r3
    b6ce:	6878      	ldr	r0, [r7, #4]
    b6d0:	4b25      	ldr	r3, [pc, #148]	; (b768 <n25q256a_switch_mode+0xc0>)
    b6d2:	4798      	blx	r3
    b6d4:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    b6d6:	2300      	movs	r3, #0
    b6d8:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    b6da:	68fb      	ldr	r3, [r7, #12]
    b6dc:	7b1b      	ldrb	r3, [r3, #12]
    b6de:	78fa      	ldrb	r2, [r7, #3]
    b6e0:	429a      	cmp	r2, r3
    b6e2:	d03d      	beq.n	b760 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    b6e4:	78fb      	ldrb	r3, [r7, #3]
    b6e6:	2b00      	cmp	r3, #0
    b6e8:	d00b      	beq.n	b702 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    b6ea:	697b      	ldr	r3, [r7, #20]
    b6ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b6f0:	2b00      	cmp	r3, #0
    b6f2:	d011      	beq.n	b718 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    b6f4:	697b      	ldr	r3, [r7, #20]
    b6f6:	f003 031f 	and.w	r3, r3, #31
    b6fa:	617b      	str	r3, [r7, #20]
			modify = 1;
    b6fc:	2301      	movs	r3, #1
    b6fe:	74fb      	strb	r3, [r7, #19]
    b700:	e00a      	b.n	b718 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    b702:	697b      	ldr	r3, [r7, #20]
    b704:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b708:	2b00      	cmp	r3, #0
    b70a:	d105      	bne.n	b718 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    b70c:	697b      	ldr	r3, [r7, #20]
    b70e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b712:	617b      	str	r3, [r7, #20]
			modify = 1;
    b714:	2301      	movs	r3, #1
    b716:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    b718:	7cfb      	ldrb	r3, [r7, #19]
    b71a:	2b00      	cmp	r3, #0
    b71c:	d021      	beq.n	b762 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    b71e:	68fb      	ldr	r3, [r7, #12]
    b720:	78fa      	ldrb	r2, [r7, #3]
    b722:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    b724:	7afb      	ldrb	r3, [r7, #11]
    b726:	2201      	movs	r2, #1
    b728:	4619      	mov	r1, r3
    b72a:	6878      	ldr	r0, [r7, #4]
    b72c:	4b0f      	ldr	r3, [pc, #60]	; (b76c <n25q256a_switch_mode+0xc4>)
    b72e:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    b730:	7af9      	ldrb	r1, [r7, #11]
    b732:	697b      	ldr	r3, [r7, #20]
    b734:	2261      	movs	r2, #97	; 0x61
    b736:	6878      	ldr	r0, [r7, #4]
    b738:	4c0d      	ldr	r4, [pc, #52]	; (b770 <n25q256a_switch_mode+0xc8>)
    b73a:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b73c:	78fb      	ldrb	r3, [r7, #3]
    b73e:	2b00      	cmp	r3, #0
    b740:	d001      	beq.n	b746 <n25q256a_switch_mode+0x9e>
    b742:	2306      	movs	r3, #6
    b744:	e000      	b.n	b748 <n25q256a_switch_mode+0xa0>
    b746:	2300      	movs	r3, #0
    b748:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b74a:	7afb      	ldrb	r3, [r7, #11]
    b74c:	2265      	movs	r2, #101	; 0x65
    b74e:	4619      	mov	r1, r3
    b750:	6878      	ldr	r0, [r7, #4]
    b752:	4b05      	ldr	r3, [pc, #20]	; (b768 <n25q256a_switch_mode+0xc0>)
    b754:	4798      	blx	r3
    b756:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    b758:	68fb      	ldr	r3, [r7, #12]
    b75a:	78fa      	ldrb	r2, [r7, #3]
    b75c:	731a      	strb	r2, [r3, #12]
    b75e:	e000      	b.n	b762 <n25q256a_switch_mode+0xba>
		return;
    b760:	bf00      	nop
	}
}
    b762:	371c      	adds	r7, #28
    b764:	46bd      	mov	sp, r7
    b766:	bd90      	pop	{r4, r7, pc}
    b768:	0000b49d 	.word	0x0000b49d
    b76c:	0000b5d9 	.word	0x0000b5d9
    b770:	0000b539 	.word	0x0000b539

0000b774 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    b774:	b580      	push	{r7, lr}
    b776:	b086      	sub	sp, #24
    b778:	af00      	add	r7, sp, #0
    b77a:	60f8      	str	r0, [r7, #12]
    b77c:	60b9      	str	r1, [r7, #8]
    b77e:	607a      	str	r2, [r7, #4]
    b780:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    b782:	68fb      	ldr	r3, [r7, #12]
    b784:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    b786:	4a0c      	ldr	r2, [pc, #48]	; (b7b8 <n25q256a_construct+0x44>)
    b788:	68b9      	ldr	r1, [r7, #8]
    b78a:	68f8      	ldr	r0, [r7, #12]
    b78c:	4b0b      	ldr	r3, [pc, #44]	; (b7bc <n25q256a_construct+0x48>)
    b78e:	4798      	blx	r3
	n25q->quad_mode    = 0;
    b790:	697b      	ldr	r3, [r7, #20]
    b792:	2200      	movs	r2, #0
    b794:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    b796:	697b      	ldr	r3, [r7, #20]
    b798:	2200      	movs	r2, #0
    b79a:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    b79c:	697b      	ldr	r3, [r7, #20]
    b79e:	687a      	ldr	r2, [r7, #4]
    b7a0:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    b7a2:	78fb      	ldrb	r3, [r7, #3]
    b7a4:	4619      	mov	r1, r3
    b7a6:	68f8      	ldr	r0, [r7, #12]
    b7a8:	4b05      	ldr	r3, [pc, #20]	; (b7c0 <n25q256a_construct+0x4c>)
    b7aa:	4798      	blx	r3
	return me;
    b7ac:	68fb      	ldr	r3, [r7, #12]
}
    b7ae:	4618      	mov	r0, r3
    b7b0:	3718      	adds	r7, #24
    b7b2:	46bd      	mov	sp, r7
    b7b4:	bd80      	pop	{r7, pc}
    b7b6:	bf00      	nop
    b7b8:	0000efa0 	.word	0x0000efa0
    b7bc:	0000bc51 	.word	0x0000bc51
    b7c0:	0000b6a9 	.word	0x0000b6a9

0000b7c4 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b7c4:	b580      	push	{r7, lr}
    b7c6:	b08c      	sub	sp, #48	; 0x30
    b7c8:	af00      	add	r7, sp, #0
    b7ca:	60f8      	str	r0, [r7, #12]
    b7cc:	60b9      	str	r1, [r7, #8]
    b7ce:	607a      	str	r2, [r7, #4]
    b7d0:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b7d2:	68fb      	ldr	r3, [r7, #12]
    b7d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b7d6:	68fb      	ldr	r3, [r7, #12]
    b7d8:	681b      	ldr	r3, [r3, #0]
    b7da:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    b7dc:	f107 0310 	add.w	r3, r7, #16
    b7e0:	2200      	movs	r2, #0
    b7e2:	601a      	str	r2, [r3, #0]
    b7e4:	605a      	str	r2, [r3, #4]
    b7e6:	609a      	str	r2, [r3, #8]
    b7e8:	60da      	str	r2, [r3, #12]
    b7ea:	611a      	str	r2, [r3, #16]
    b7ec:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b7f0:	7b1b      	ldrb	r3, [r3, #12]
    b7f2:	2b00      	cmp	r3, #0
    b7f4:	d001      	beq.n	b7fa <n25q256a_read+0x36>
    b7f6:	2206      	movs	r2, #6
    b7f8:	e000      	b.n	b7fc <n25q256a_read+0x38>
    b7fa:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    b7fc:	7c3b      	ldrb	r3, [r7, #16]
    b7fe:	f362 0302 	bfi	r3, r2, #0, #3
    b802:	743b      	strb	r3, [r7, #16]
    b804:	7c3b      	ldrb	r3, [r7, #16]
    b806:	f043 0310 	orr.w	r3, r3, #16
    b80a:	743b      	strb	r3, [r7, #16]
    b80c:	7c3b      	ldrb	r3, [r7, #16]
    b80e:	f043 0320 	orr.w	r3, r3, #32
    b812:	743b      	strb	r3, [r7, #16]
    b814:	7c3b      	ldrb	r3, [r7, #16]
    b816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b81a:	743b      	strb	r3, [r7, #16]
    b81c:	7c7b      	ldrb	r3, [r7, #17]
    b81e:	2201      	movs	r2, #1
    b820:	f362 1305 	bfi	r3, r2, #4, #2
    b824:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    b826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b828:	7b1b      	ldrb	r3, [r3, #12]
    b82a:	2b00      	cmp	r3, #0
    b82c:	d001      	beq.n	b832 <n25q256a_read+0x6e>
    b82e:	220a      	movs	r2, #10
    b830:	e000      	b.n	b834 <n25q256a_read+0x70>
    b832:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    b834:	7cbb      	ldrb	r3, [r7, #18]
    b836:	f362 0304 	bfi	r3, r2, #0, #5
    b83a:	74bb      	strb	r3, [r7, #18]
    b83c:	230b      	movs	r3, #11
    b83e:	753b      	strb	r3, [r7, #20]
    b840:	687b      	ldr	r3, [r7, #4]
    b842:	61bb      	str	r3, [r7, #24]
    b844:	683b      	ldr	r3, [r7, #0]
    b846:	61fb      	str	r3, [r7, #28]
    b848:	68bb      	ldr	r3, [r7, #8]
    b84a:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    b84c:	f107 0310 	add.w	r3, r7, #16
    b850:	4619      	mov	r1, r3
    b852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b854:	4b03      	ldr	r3, [pc, #12]	; (b864 <n25q256a_read+0xa0>)
    b856:	4798      	blx	r3
	return ERR_NONE;
    b858:	2300      	movs	r3, #0
}
    b85a:	4618      	mov	r0, r3
    b85c:	3730      	adds	r7, #48	; 0x30
    b85e:	46bd      	mov	sp, r7
    b860:	bd80      	pop	{r7, pc}
    b862:	bf00      	nop
    b864:	000027dd 	.word	0x000027dd

0000b868 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b868:	b580      	push	{r7, lr}
    b86a:	b08c      	sub	sp, #48	; 0x30
    b86c:	af00      	add	r7, sp, #0
    b86e:	60f8      	str	r0, [r7, #12]
    b870:	60b9      	str	r1, [r7, #8]
    b872:	607a      	str	r2, [r7, #4]
    b874:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b876:	68fb      	ldr	r3, [r7, #12]
    b878:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b87a:	68fb      	ldr	r3, [r7, #12]
    b87c:	681b      	ldr	r3, [r3, #0]
    b87e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    b880:	f107 0310 	add.w	r3, r7, #16
    b884:	2200      	movs	r2, #0
    b886:	601a      	str	r2, [r3, #0]
    b888:	605a      	str	r2, [r3, #4]
    b88a:	609a      	str	r2, [r3, #8]
    b88c:	60da      	str	r2, [r3, #12]
    b88e:	611a      	str	r2, [r3, #16]
    b890:	615a      	str	r2, [r3, #20]
    b892:	7c3b      	ldrb	r3, [r7, #16]
    b894:	f043 0310 	orr.w	r3, r3, #16
    b898:	743b      	strb	r3, [r7, #16]
    b89a:	7c3b      	ldrb	r3, [r7, #16]
    b89c:	f043 0320 	orr.w	r3, r3, #32
    b8a0:	743b      	strb	r3, [r7, #16]
    b8a2:	7c3b      	ldrb	r3, [r7, #16]
    b8a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b8a8:	743b      	strb	r3, [r7, #16]
    b8aa:	7c7b      	ldrb	r3, [r7, #17]
    b8ac:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    b8b0:	747b      	strb	r3, [r7, #17]
    b8b2:	2302      	movs	r3, #2
    b8b4:	753b      	strb	r3, [r7, #20]
    b8b6:	687b      	ldr	r3, [r7, #4]
    b8b8:	61bb      	str	r3, [r7, #24]
    b8ba:	683b      	ldr	r3, [r7, #0]
    b8bc:	61fb      	str	r3, [r7, #28]
    b8be:	68bb      	ldr	r3, [r7, #8]
    b8c0:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b8c4:	7b1b      	ldrb	r3, [r3, #12]
    b8c6:	2b00      	cmp	r3, #0
    b8c8:	d001      	beq.n	b8ce <n25q256a_write+0x66>
    b8ca:	2206      	movs	r2, #6
    b8cc:	e000      	b.n	b8d0 <n25q256a_write+0x68>
    b8ce:	2200      	movs	r2, #0
    b8d0:	7c3b      	ldrb	r3, [r7, #16]
    b8d2:	f362 0302 	bfi	r3, r2, #0, #3
    b8d6:	743b      	strb	r3, [r7, #16]
	while (length) {
    b8d8:	e035      	b.n	b946 <n25q256a_write+0xde>
		cmd.address = address;
    b8da:	687b      	ldr	r3, [r7, #4]
    b8dc:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    b8de:	683b      	ldr	r3, [r7, #0]
    b8e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b8e4:	d802      	bhi.n	b8ec <n25q256a_write+0x84>
			cmd.buf_len = length;
    b8e6:	683b      	ldr	r3, [r7, #0]
    b8e8:	61fb      	str	r3, [r7, #28]
    b8ea:	e002      	b.n	b8f2 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    b8ec:	f44f 7380 	mov.w	r3, #256	; 0x100
    b8f0:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b8f2:	7c3b      	ldrb	r3, [r7, #16]
    b8f4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b8f8:	b2db      	uxtb	r3, r3
    b8fa:	2201      	movs	r2, #1
    b8fc:	4619      	mov	r1, r3
    b8fe:	68f8      	ldr	r0, [r7, #12]
    b900:	4b19      	ldr	r3, [pc, #100]	; (b968 <n25q256a_write+0x100>)
    b902:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    b904:	f107 0310 	add.w	r3, r7, #16
    b908:	4619      	mov	r1, r3
    b90a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b90c:	4b17      	ldr	r3, [pc, #92]	; (b96c <n25q256a_write+0x104>)
    b90e:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b910:	bf00      	nop
    b912:	7c3b      	ldrb	r3, [r7, #16]
    b914:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b918:	b2db      	uxtb	r3, r3
    b91a:	2270      	movs	r2, #112	; 0x70
    b91c:	4619      	mov	r1, r3
    b91e:	68f8      	ldr	r0, [r7, #12]
    b920:	4b13      	ldr	r3, [pc, #76]	; (b970 <n25q256a_write+0x108>)
    b922:	4798      	blx	r3
    b924:	4603      	mov	r3, r0
    b926:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b92a:	2b00      	cmp	r3, #0
    b92c:	d0f1      	beq.n	b912 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    b92e:	6a3a      	ldr	r2, [r7, #32]
    b930:	69fb      	ldr	r3, [r7, #28]
    b932:	4413      	add	r3, r2
    b934:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    b936:	69fb      	ldr	r3, [r7, #28]
    b938:	683a      	ldr	r2, [r7, #0]
    b93a:	1ad3      	subs	r3, r2, r3
    b93c:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    b93e:	69fb      	ldr	r3, [r7, #28]
    b940:	687a      	ldr	r2, [r7, #4]
    b942:	4413      	add	r3, r2
    b944:	607b      	str	r3, [r7, #4]
	while (length) {
    b946:	683b      	ldr	r3, [r7, #0]
    b948:	2b00      	cmp	r3, #0
    b94a:	d1c6      	bne.n	b8da <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    b94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b94e:	7b5b      	ldrb	r3, [r3, #13]
    b950:	2b00      	cmp	r3, #0
    b952:	d003      	beq.n	b95c <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    b954:	2101      	movs	r1, #1
    b956:	68f8      	ldr	r0, [r7, #12]
    b958:	4b06      	ldr	r3, [pc, #24]	; (b974 <n25q256a_write+0x10c>)
    b95a:	4798      	blx	r3
	}
	return ERR_NONE;
    b95c:	2300      	movs	r3, #0
}
    b95e:	4618      	mov	r0, r3
    b960:	3730      	adds	r7, #48	; 0x30
    b962:	46bd      	mov	sp, r7
    b964:	bd80      	pop	{r7, pc}
    b966:	bf00      	nop
    b968:	0000b5d9 	.word	0x0000b5d9
    b96c:	000027dd 	.word	0x000027dd
    b970:	0000b49d 	.word	0x0000b49d
    b974:	0000b3d1 	.word	0x0000b3d1

0000b978 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    b978:	b580      	push	{r7, lr}
    b97a:	b090      	sub	sp, #64	; 0x40
    b97c:	af00      	add	r7, sp, #0
    b97e:	60f8      	str	r0, [r7, #12]
    b980:	60b9      	str	r1, [r7, #8]
    b982:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b984:	68fb      	ldr	r3, [r7, #12]
    b986:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b988:	68fb      	ldr	r3, [r7, #12]
    b98a:	681b      	ldr	r3, [r3, #0]
    b98c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    b98e:	f107 0314 	add.w	r3, r7, #20
    b992:	2200      	movs	r2, #0
    b994:	601a      	str	r2, [r3, #0]
    b996:	605a      	str	r2, [r3, #4]
    b998:	609a      	str	r2, [r3, #8]
    b99a:	60da      	str	r2, [r3, #12]
    b99c:	611a      	str	r2, [r3, #16]
    b99e:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b9a2:	7b1b      	ldrb	r3, [r3, #12]
    b9a4:	2b00      	cmp	r3, #0
    b9a6:	d001      	beq.n	b9ac <n25q256a_erase+0x34>
    b9a8:	2206      	movs	r2, #6
    b9aa:	e000      	b.n	b9ae <n25q256a_erase+0x36>
    b9ac:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    b9ae:	7d3b      	ldrb	r3, [r7, #20]
    b9b0:	f362 0302 	bfi	r3, r2, #0, #3
    b9b4:	753b      	strb	r3, [r7, #20]
    b9b6:	7d3b      	ldrb	r3, [r7, #20]
    b9b8:	f043 0310 	orr.w	r3, r3, #16
    b9bc:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    b9be:	687b      	ldr	r3, [r7, #4]
    b9c0:	4a56      	ldr	r2, [pc, #344]	; (bb1c <n25q256a_erase+0x1a4>)
    b9c2:	4293      	cmp	r3, r2
    b9c4:	bf94      	ite	ls
    b9c6:	2301      	movls	r3, #1
    b9c8:	2300      	movhi	r3, #0
    b9ca:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    b9cc:	7d3b      	ldrb	r3, [r7, #20]
    b9ce:	f362 1345 	bfi	r3, r2, #5, #1
    b9d2:	753b      	strb	r3, [r7, #20]
    b9d4:	7d7b      	ldrb	r3, [r7, #21]
    b9d6:	2202      	movs	r2, #2
    b9d8:	f362 1305 	bfi	r3, r2, #4, #2
    b9dc:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    b9de:	68bb      	ldr	r3, [r7, #8]
    b9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    b9e2:	687b      	ldr	r3, [r7, #4]
    b9e4:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    b9e6:	2300      	movs	r3, #0
    b9e8:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    b9ea:	687b      	ldr	r3, [r7, #4]
    b9ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b9f0:	2b00      	cmp	r3, #0
    b9f2:	d104      	bne.n	b9fe <n25q256a_erase+0x86>
    b9f4:	68bb      	ldr	r3, [r7, #8]
    b9f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b9fa:	2b00      	cmp	r3, #0
    b9fc:	d002      	beq.n	ba04 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    b9fe:	f06f 030c 	mvn.w	r3, #12
    ba02:	e087      	b.n	bb14 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    ba04:	687b      	ldr	r3, [r7, #4]
    ba06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    ba0a:	d368      	bcc.n	bade <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    ba0c:	23c7      	movs	r3, #199	; 0xc7
    ba0e:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ba10:	7d3b      	ldrb	r3, [r7, #20]
    ba12:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ba16:	b2db      	uxtb	r3, r3
    ba18:	2201      	movs	r2, #1
    ba1a:	4619      	mov	r1, r3
    ba1c:	68f8      	ldr	r0, [r7, #12]
    ba1e:	4b40      	ldr	r3, [pc, #256]	; (bb20 <n25q256a_erase+0x1a8>)
    ba20:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    ba22:	f107 0314 	add.w	r3, r7, #20
    ba26:	4619      	mov	r1, r3
    ba28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ba2a:	4b3e      	ldr	r3, [pc, #248]	; (bb24 <n25q256a_erase+0x1ac>)
    ba2c:	4798      	blx	r3
    ba2e:	e059      	b.n	bae4 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    ba30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ba32:	b29b      	uxth	r3, r3
    ba34:	2b00      	cmp	r3, #0
    ba36:	d11f      	bne.n	ba78 <n25q256a_erase+0x100>
    ba38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ba3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    ba3e:	d31b      	bcc.n	ba78 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    ba40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ba42:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    ba44:	23d8      	movs	r3, #216	; 0xd8
    ba46:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ba48:	7d3b      	ldrb	r3, [r7, #20]
    ba4a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ba4e:	b2db      	uxtb	r3, r3
    ba50:	2201      	movs	r2, #1
    ba52:	4619      	mov	r1, r3
    ba54:	68f8      	ldr	r0, [r7, #12]
    ba56:	4b32      	ldr	r3, [pc, #200]	; (bb20 <n25q256a_erase+0x1a8>)
    ba58:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    ba5a:	f107 0314 	add.w	r3, r7, #20
    ba5e:	4619      	mov	r1, r3
    ba60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ba62:	4b30      	ldr	r3, [pc, #192]	; (bb24 <n25q256a_erase+0x1ac>)
    ba64:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    ba66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ba68:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ba6c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    ba6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ba70:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    ba74:	63bb      	str	r3, [r7, #56]	; 0x38
    ba76:	e023      	b.n	bac0 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    ba78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ba7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    ba7e:	d31b      	bcc.n	bab8 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    ba80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ba82:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    ba84:	2320      	movs	r3, #32
    ba86:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ba88:	7d3b      	ldrb	r3, [r7, #20]
    ba8a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ba8e:	b2db      	uxtb	r3, r3
    ba90:	2201      	movs	r2, #1
    ba92:	4619      	mov	r1, r3
    ba94:	68f8      	ldr	r0, [r7, #12]
    ba96:	4b22      	ldr	r3, [pc, #136]	; (bb20 <n25q256a_erase+0x1a8>)
    ba98:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    ba9a:	f107 0314 	add.w	r3, r7, #20
    ba9e:	4619      	mov	r1, r3
    baa0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    baa2:	4b20      	ldr	r3, [pc, #128]	; (bb24 <n25q256a_erase+0x1ac>)
    baa4:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    baa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    baa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    baac:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    baae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bab0:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    bab4:	63bb      	str	r3, [r7, #56]	; 0x38
    bab6:	e003      	b.n	bac0 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    bab8:	f06f 030c 	mvn.w	r3, #12
    babc:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    babe:	e011      	b.n	bae4 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bac0:	bf00      	nop
    bac2:	7d3b      	ldrb	r3, [r7, #20]
    bac4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bac8:	b2db      	uxtb	r3, r3
    baca:	2270      	movs	r2, #112	; 0x70
    bacc:	4619      	mov	r1, r3
    bace:	68f8      	ldr	r0, [r7, #12]
    bad0:	4b15      	ldr	r3, [pc, #84]	; (bb28 <n25q256a_erase+0x1b0>)
    bad2:	4798      	blx	r3
    bad4:	4603      	mov	r3, r0
    bad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bada:	2b00      	cmp	r3, #0
    badc:	d0f1      	beq.n	bac2 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    bade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bae0:	2b00      	cmp	r3, #0
    bae2:	d1a5      	bne.n	ba30 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bae4:	bf00      	nop
    bae6:	7d3b      	ldrb	r3, [r7, #20]
    bae8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    baec:	b2db      	uxtb	r3, r3
    baee:	2270      	movs	r2, #112	; 0x70
    baf0:	4619      	mov	r1, r3
    baf2:	68f8      	ldr	r0, [r7, #12]
    baf4:	4b0c      	ldr	r3, [pc, #48]	; (bb28 <n25q256a_erase+0x1b0>)
    baf6:	4798      	blx	r3
    baf8:	4603      	mov	r3, r0
    bafa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bafe:	2b00      	cmp	r3, #0
    bb00:	d0f1      	beq.n	bae6 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    bb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bb04:	7b5b      	ldrb	r3, [r3, #13]
    bb06:	2b00      	cmp	r3, #0
    bb08:	d003      	beq.n	bb12 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    bb0a:	2101      	movs	r1, #1
    bb0c:	68f8      	ldr	r0, [r7, #12]
    bb0e:	4b07      	ldr	r3, [pc, #28]	; (bb2c <n25q256a_erase+0x1b4>)
    bb10:	4798      	blx	r3
	}
	return rc;
    bb12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    bb14:	4618      	mov	r0, r3
    bb16:	3740      	adds	r7, #64	; 0x40
    bb18:	46bd      	mov	sp, r7
    bb1a:	bd80      	pop	{r7, pc}
    bb1c:	001fffff 	.word	0x001fffff
    bb20:	0000b5d9 	.word	0x0000b5d9
    bb24:	000027dd 	.word	0x000027dd
    bb28:	0000b49d 	.word	0x0000b49d
    bb2c:	0000b3d1 	.word	0x0000b3d1

0000bb30 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    bb30:	b590      	push	{r4, r7, lr}
    bb32:	b085      	sub	sp, #20
    bb34:	af00      	add	r7, sp, #0
    bb36:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    bb38:	687b      	ldr	r3, [r7, #4]
    bb3a:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bb3c:	68fb      	ldr	r3, [r7, #12]
    bb3e:	7b1b      	ldrb	r3, [r3, #12]
    bb40:	2b00      	cmp	r3, #0
    bb42:	d001      	beq.n	bb48 <n25q256a_enable_xip+0x18>
    bb44:	2306      	movs	r3, #6
    bb46:	e000      	b.n	bb4a <n25q256a_enable_xip+0x1a>
    bb48:	2300      	movs	r3, #0
    bb4a:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    bb4c:	68fb      	ldr	r3, [r7, #12]
    bb4e:	7b5b      	ldrb	r3, [r3, #13]
    bb50:	2b00      	cmp	r3, #0
    bb52:	d129      	bne.n	bba8 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    bb54:	7afb      	ldrb	r3, [r7, #11]
    bb56:	2285      	movs	r2, #133	; 0x85
    bb58:	4619      	mov	r1, r3
    bb5a:	6878      	ldr	r0, [r7, #4]
    bb5c:	4b15      	ldr	r3, [pc, #84]	; (bbb4 <n25q256a_enable_xip+0x84>)
    bb5e:	4798      	blx	r3
    bb60:	4603      	mov	r3, r0
    bb62:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    bb64:	7abb      	ldrb	r3, [r7, #10]
    bb66:	f003 0308 	and.w	r3, r3, #8
    bb6a:	2b00      	cmp	r3, #0
    bb6c:	d015      	beq.n	bb9a <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    bb6e:	7abb      	ldrb	r3, [r7, #10]
    bb70:	f023 0308 	bic.w	r3, r3, #8
    bb74:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    bb76:	7abb      	ldrb	r3, [r7, #10]
    bb78:	7af9      	ldrb	r1, [r7, #11]
    bb7a:	2281      	movs	r2, #129	; 0x81
    bb7c:	6878      	ldr	r0, [r7, #4]
    bb7e:	4c0e      	ldr	r4, [pc, #56]	; (bbb8 <n25q256a_enable_xip+0x88>)
    bb80:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bb82:	bf00      	nop
    bb84:	7afb      	ldrb	r3, [r7, #11]
    bb86:	2270      	movs	r2, #112	; 0x70
    bb88:	4619      	mov	r1, r3
    bb8a:	6878      	ldr	r0, [r7, #4]
    bb8c:	4b09      	ldr	r3, [pc, #36]	; (bbb4 <n25q256a_enable_xip+0x84>)
    bb8e:	4798      	blx	r3
    bb90:	4603      	mov	r3, r0
    bb92:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bb96:	2b00      	cmp	r3, #0
    bb98:	d0f4      	beq.n	bb84 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    bb9a:	68fb      	ldr	r3, [r7, #12]
    bb9c:	2201      	movs	r2, #1
    bb9e:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    bba0:	2101      	movs	r1, #1
    bba2:	6878      	ldr	r0, [r7, #4]
    bba4:	4b05      	ldr	r3, [pc, #20]	; (bbbc <n25q256a_enable_xip+0x8c>)
    bba6:	4798      	blx	r3
	}
	return ERR_NONE;
    bba8:	2300      	movs	r3, #0
}
    bbaa:	4618      	mov	r0, r3
    bbac:	3714      	adds	r7, #20
    bbae:	46bd      	mov	sp, r7
    bbb0:	bd90      	pop	{r4, r7, pc}
    bbb2:	bf00      	nop
    bbb4:	0000b49d 	.word	0x0000b49d
    bbb8:	0000b539 	.word	0x0000b539
    bbbc:	0000b3d1 	.word	0x0000b3d1

0000bbc0 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    bbc0:	b580      	push	{r7, lr}
    bbc2:	b086      	sub	sp, #24
    bbc4:	af00      	add	r7, sp, #0
    bbc6:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bbc8:	687b      	ldr	r3, [r7, #4]
    bbca:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bbcc:	687b      	ldr	r3, [r7, #4]
    bbce:	681b      	ldr	r3, [r3, #0]
    bbd0:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bbd2:	697b      	ldr	r3, [r7, #20]
    bbd4:	7b1b      	ldrb	r3, [r3, #12]
    bbd6:	2b00      	cmp	r3, #0
    bbd8:	d001      	beq.n	bbde <n25q256a_disable_xip+0x1e>
    bbda:	2306      	movs	r3, #6
    bbdc:	e000      	b.n	bbe0 <n25q256a_disable_xip+0x20>
    bbde:	2300      	movs	r3, #0
    bbe0:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    bbe2:	2100      	movs	r1, #0
    bbe4:	6878      	ldr	r0, [r7, #4]
    bbe6:	4b15      	ldr	r3, [pc, #84]	; (bc3c <n25q256a_disable_xip+0x7c>)
    bbe8:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    bbea:	7bfb      	ldrb	r3, [r7, #15]
    bbec:	2285      	movs	r2, #133	; 0x85
    bbee:	4619      	mov	r1, r3
    bbf0:	6878      	ldr	r0, [r7, #4]
    bbf2:	4b13      	ldr	r3, [pc, #76]	; (bc40 <n25q256a_disable_xip+0x80>)
    bbf4:	4798      	blx	r3
    bbf6:	4603      	mov	r3, r0
    bbf8:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    bbfa:	7bbb      	ldrb	r3, [r7, #14]
    bbfc:	f003 0308 	and.w	r3, r3, #8
    bc00:	2b00      	cmp	r3, #0
    bc02:	d113      	bne.n	bc2c <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    bc04:	697b      	ldr	r3, [r7, #20]
    bc06:	689b      	ldr	r3, [r3, #8]
    bc08:	2b00      	cmp	r3, #0
    bc0a:	d00f      	beq.n	bc2c <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    bc0c:	693b      	ldr	r3, [r7, #16]
    bc0e:	681b      	ldr	r3, [r3, #0]
    bc10:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    bc12:	6938      	ldr	r0, [r7, #16]
    bc14:	4b0b      	ldr	r3, [pc, #44]	; (bc44 <n25q256a_disable_xip+0x84>)
    bc16:	4798      	blx	r3
			n25q->pin_exit_xip();
    bc18:	697b      	ldr	r3, [r7, #20]
    bc1a:	689b      	ldr	r3, [r3, #8]
    bc1c:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    bc1e:	68b9      	ldr	r1, [r7, #8]
    bc20:	6938      	ldr	r0, [r7, #16]
    bc22:	4b09      	ldr	r3, [pc, #36]	; (bc48 <n25q256a_disable_xip+0x88>)
    bc24:	4798      	blx	r3
			qspi_sync_enable(descr);
    bc26:	6938      	ldr	r0, [r7, #16]
    bc28:	4b08      	ldr	r3, [pc, #32]	; (bc4c <n25q256a_disable_xip+0x8c>)
    bc2a:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    bc2c:	697b      	ldr	r3, [r7, #20]
    bc2e:	2200      	movs	r2, #0
    bc30:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    bc32:	2300      	movs	r3, #0
}
    bc34:	4618      	mov	r0, r3
    bc36:	3718      	adds	r7, #24
    bc38:	46bd      	mov	sp, r7
    bc3a:	bd80      	pop	{r7, pc}
    bc3c:	0000b3d1 	.word	0x0000b3d1
    bc40:	0000b49d 	.word	0x0000b49d
    bc44:	000027a1 	.word	0x000027a1
    bc48:	00002719 	.word	0x00002719
    bc4c:	00002765 	.word	0x00002765

0000bc50 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    bc50:	b480      	push	{r7}
    bc52:	b085      	sub	sp, #20
    bc54:	af00      	add	r7, sp, #0
    bc56:	60f8      	str	r0, [r7, #12]
    bc58:	60b9      	str	r1, [r7, #8]
    bc5a:	607a      	str	r2, [r7, #4]
	me->io        = io;
    bc5c:	68fb      	ldr	r3, [r7, #12]
    bc5e:	68ba      	ldr	r2, [r7, #8]
    bc60:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    bc62:	68fb      	ldr	r3, [r7, #12]
    bc64:	687a      	ldr	r2, [r7, #4]
    bc66:	605a      	str	r2, [r3, #4]

	return me;
    bc68:	68fb      	ldr	r3, [r7, #12]
}
    bc6a:	4618      	mov	r0, r3
    bc6c:	3714      	adds	r7, #20
    bc6e:	46bd      	mov	sp, r7
    bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc74:	4770      	bx	lr

0000bc76 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    bc76:	b480      	push	{r7}
    bc78:	b083      	sub	sp, #12
    bc7a:	af00      	add	r7, sp, #0
    bc7c:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    bc7e:	687b      	ldr	r3, [r7, #4]
    bc80:	781b      	ldrb	r3, [r3, #0]
    bc82:	b29a      	uxth	r2, r3
    bc84:	687b      	ldr	r3, [r7, #4]
    bc86:	3301      	adds	r3, #1
    bc88:	781b      	ldrb	r3, [r3, #0]
    bc8a:	b29b      	uxth	r3, r3
    bc8c:	021b      	lsls	r3, r3, #8
    bc8e:	b29b      	uxth	r3, r3
    bc90:	4413      	add	r3, r2
    bc92:	b29b      	uxth	r3, r3
}
    bc94:	4618      	mov	r0, r3
    bc96:	370c      	adds	r7, #12
    bc98:	46bd      	mov	sp, r7
    bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc9e:	4770      	bx	lr

0000bca0 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    bca0:	b480      	push	{r7}
    bca2:	b083      	sub	sp, #12
    bca4:	af00      	add	r7, sp, #0
    bca6:	6078      	str	r0, [r7, #4]
	return desc[0];
    bca8:	687b      	ldr	r3, [r7, #4]
    bcaa:	781b      	ldrb	r3, [r3, #0]
}
    bcac:	4618      	mov	r0, r3
    bcae:	370c      	adds	r7, #12
    bcb0:	46bd      	mov	sp, r7
    bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    bcb6:	4770      	bx	lr

0000bcb8 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    bcb8:	b580      	push	{r7, lr}
    bcba:	b082      	sub	sp, #8
    bcbc:	af00      	add	r7, sp, #0
    bcbe:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    bcc0:	6878      	ldr	r0, [r7, #4]
    bcc2:	4b05      	ldr	r3, [pc, #20]	; (bcd8 <usb_desc_next+0x20>)
    bcc4:	4798      	blx	r3
    bcc6:	4603      	mov	r3, r0
    bcc8:	461a      	mov	r2, r3
    bcca:	687b      	ldr	r3, [r7, #4]
    bccc:	4413      	add	r3, r2
}
    bcce:	4618      	mov	r0, r3
    bcd0:	3708      	adds	r7, #8
    bcd2:	46bd      	mov	sp, r7
    bcd4:	bd80      	pop	{r7, pc}
    bcd6:	bf00      	nop
    bcd8:	0000bca1 	.word	0x0000bca1

0000bcdc <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bcdc:	b580      	push	{r7, lr}
    bcde:	b08c      	sub	sp, #48	; 0x30
    bce0:	af00      	add	r7, sp, #0
    bce2:	6078      	str	r0, [r7, #4]
    bce4:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bce6:	687b      	ldr	r3, [r7, #4]
    bce8:	689b      	ldr	r3, [r3, #8]
    bcea:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    bcec:	683b      	ldr	r3, [r7, #0]
    bcee:	681b      	ldr	r3, [r3, #0]
    bcf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bcf2:	2300      	movs	r3, #0
    bcf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bcf8:	e08f      	b.n	be1a <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    bcfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bcfc:	2b00      	cmp	r3, #0
    bcfe:	d102      	bne.n	bd06 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    bd00:	f06f 0309 	mvn.w	r3, #9
    bd04:	e092      	b.n	be2c <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    bd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd08:	789b      	ldrb	r3, [r3, #2]
    bd0a:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    bd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd0e:	795b      	ldrb	r3, [r3, #5]
    bd10:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    bd12:	7c7b      	ldrb	r3, [r7, #17]
    bd14:	2b02      	cmp	r3, #2
    bd16:	d002      	beq.n	bd1e <cdcdf_acm_enable+0x42>
    bd18:	7c7b      	ldrb	r3, [r7, #17]
    bd1a:	2b0a      	cmp	r3, #10
    bd1c:	d121      	bne.n	bd62 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bd1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bd22:	6a3a      	ldr	r2, [r7, #32]
    bd24:	5cd2      	ldrb	r2, [r2, r3]
    bd26:	7bbb      	ldrb	r3, [r7, #14]
    bd28:	429a      	cmp	r2, r3
    bd2a:	d102      	bne.n	bd32 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    bd2c:	f06f 0311 	mvn.w	r3, #17
    bd30:	e07c      	b.n	be2c <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    bd32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bd36:	6a3a      	ldr	r2, [r7, #32]
    bd38:	5cd3      	ldrb	r3, [r2, r3]
    bd3a:	2bff      	cmp	r3, #255	; 0xff
    bd3c:	d002      	beq.n	bd44 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    bd3e:	f06f 031b 	mvn.w	r3, #27
    bd42:	e073      	b.n	be2c <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    bd44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bd48:	7bb9      	ldrb	r1, [r7, #14]
    bd4a:	6a3a      	ldr	r2, [r7, #32]
    bd4c:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bd4e:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    bd50:	683b      	ldr	r3, [r7, #0]
    bd52:	685b      	ldr	r3, [r3, #4]
    bd54:	2205      	movs	r2, #5
    bd56:	4619      	mov	r1, r3
    bd58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bd5a:	4b36      	ldr	r3, [pc, #216]	; (be34 <cdcdf_acm_enable+0x158>)
    bd5c:	4798      	blx	r3
    bd5e:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bd60:	e047      	b.n	bdf2 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    bd62:	f06f 0309 	mvn.w	r3, #9
    bd66:	e061      	b.n	be2c <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    bd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bd6a:	789b      	ldrb	r3, [r3, #2]
    bd6c:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    bd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bd70:	78db      	ldrb	r3, [r3, #3]
    bd72:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    bd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bd76:	3304      	adds	r3, #4
    bd78:	4618      	mov	r0, r3
    bd7a:	4b2f      	ldr	r3, [pc, #188]	; (be38 <cdcdf_acm_enable+0x15c>)
    bd7c:	4798      	blx	r3
    bd7e:	4603      	mov	r3, r0
    bd80:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    bd82:	7ebb      	ldrb	r3, [r7, #26]
    bd84:	7ef9      	ldrb	r1, [r7, #27]
    bd86:	8bba      	ldrh	r2, [r7, #28]
    bd88:	4618      	mov	r0, r3
    bd8a:	4b2c      	ldr	r3, [pc, #176]	; (be3c <cdcdf_acm_enable+0x160>)
    bd8c:	4798      	blx	r3
    bd8e:	4603      	mov	r3, r0
    bd90:	2b00      	cmp	r3, #0
    bd92:	d002      	beq.n	bd9a <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    bd94:	f06f 0313 	mvn.w	r3, #19
    bd98:	e048      	b.n	be2c <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    bd9a:	7ebb      	ldrb	r3, [r7, #26]
    bd9c:	b25b      	sxtb	r3, r3
    bd9e:	2b00      	cmp	r3, #0
    bda0:	da0f      	bge.n	bdc2 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    bda2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bda6:	7eb9      	ldrb	r1, [r7, #26]
    bda8:	6a3a      	ldr	r2, [r7, #32]
    bdaa:	4413      	add	r3, r2
    bdac:	460a      	mov	r2, r1
    bdae:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    bdb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bdb4:	6a3a      	ldr	r2, [r7, #32]
    bdb6:	4413      	add	r3, r2
    bdb8:	789b      	ldrb	r3, [r3, #2]
    bdba:	4618      	mov	r0, r3
    bdbc:	4b20      	ldr	r3, [pc, #128]	; (be40 <cdcdf_acm_enable+0x164>)
    bdbe:	4798      	blx	r3
    bdc0:	e007      	b.n	bdd2 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    bdc2:	7eba      	ldrb	r2, [r7, #26]
    bdc4:	6a3b      	ldr	r3, [r7, #32]
    bdc6:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    bdc8:	6a3b      	ldr	r3, [r7, #32]
    bdca:	791b      	ldrb	r3, [r3, #4]
    bdcc:	4618      	mov	r0, r3
    bdce:	4b1c      	ldr	r3, [pc, #112]	; (be40 <cdcdf_acm_enable+0x164>)
    bdd0:	4798      	blx	r3
			}
			desc->sod = ep;
    bdd2:	683b      	ldr	r3, [r7, #0]
    bdd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bdd6:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    bdd8:	683b      	ldr	r3, [r7, #0]
    bdda:	681b      	ldr	r3, [r3, #0]
    bddc:	4618      	mov	r0, r3
    bdde:	4b19      	ldr	r3, [pc, #100]	; (be44 <cdcdf_acm_enable+0x168>)
    bde0:	4798      	blx	r3
    bde2:	4602      	mov	r2, r0
    bde4:	683b      	ldr	r3, [r7, #0]
    bde6:	685b      	ldr	r3, [r3, #4]
    bde8:	4619      	mov	r1, r3
    bdea:	4610      	mov	r0, r2
    bdec:	4b16      	ldr	r3, [pc, #88]	; (be48 <cdcdf_acm_enable+0x16c>)
    bdee:	4798      	blx	r3
    bdf0:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bdf4:	2b00      	cmp	r3, #0
    bdf6:	d1b7      	bne.n	bd68 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    bdf8:	683b      	ldr	r3, [r7, #0]
    bdfa:	681b      	ldr	r3, [r3, #0]
    bdfc:	4618      	mov	r0, r3
    bdfe:	4b11      	ldr	r3, [pc, #68]	; (be44 <cdcdf_acm_enable+0x168>)
    be00:	4798      	blx	r3
    be02:	683b      	ldr	r3, [r7, #0]
    be04:	685b      	ldr	r3, [r3, #4]
    be06:	2204      	movs	r2, #4
    be08:	4619      	mov	r1, r3
    be0a:	4b0a      	ldr	r3, [pc, #40]	; (be34 <cdcdf_acm_enable+0x158>)
    be0c:	4798      	blx	r3
    be0e:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    be10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    be14:	3301      	adds	r3, #1
    be16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    be1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    be1e:	2b01      	cmp	r3, #1
    be20:	f67f af6b 	bls.w	bcfa <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    be24:	4b09      	ldr	r3, [pc, #36]	; (be4c <cdcdf_acm_enable+0x170>)
    be26:	2201      	movs	r2, #1
    be28:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    be2a:	2300      	movs	r3, #0
}
    be2c:	4618      	mov	r0, r3
    be2e:	3730      	adds	r7, #48	; 0x30
    be30:	46bd      	mov	sp, r7
    be32:	bd80      	pop	{r7, pc}
    be34:	0000d09d 	.word	0x0000d09d
    be38:	0000bc77 	.word	0x0000bc77
    be3c:	00003391 	.word	0x00003391
    be40:	0000347d 	.word	0x0000347d
    be44:	0000bcb9 	.word	0x0000bcb9
    be48:	0000d0f9 	.word	0x0000d0f9
    be4c:	20000f2c 	.word	0x20000f2c

0000be50 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    be50:	b580      	push	{r7, lr}
    be52:	b088      	sub	sp, #32
    be54:	af00      	add	r7, sp, #0
    be56:	6078      	str	r0, [r7, #4]
    be58:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    be5a:	687b      	ldr	r3, [r7, #4]
    be5c:	689b      	ldr	r3, [r3, #8]
    be5e:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    be60:	683b      	ldr	r3, [r7, #0]
    be62:	2b00      	cmp	r3, #0
    be64:	d00c      	beq.n	be80 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    be66:	683b      	ldr	r3, [r7, #0]
    be68:	681b      	ldr	r3, [r3, #0]
    be6a:	795b      	ldrb	r3, [r3, #5]
    be6c:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    be6e:	7c7b      	ldrb	r3, [r7, #17]
    be70:	2b02      	cmp	r3, #2
    be72:	d005      	beq.n	be80 <cdcdf_acm_disable+0x30>
    be74:	7c7b      	ldrb	r3, [r7, #17]
    be76:	2b0a      	cmp	r3, #10
    be78:	d002      	beq.n	be80 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    be7a:	f06f 0309 	mvn.w	r3, #9
    be7e:	e035      	b.n	beec <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    be80:	2300      	movs	r3, #0
    be82:	77fb      	strb	r3, [r7, #31]
    be84:	e01f      	b.n	bec6 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    be86:	7ffb      	ldrb	r3, [r7, #31]
    be88:	69ba      	ldr	r2, [r7, #24]
    be8a:	5cd3      	ldrb	r3, [r2, r3]
    be8c:	2bff      	cmp	r3, #255	; 0xff
    be8e:	d016      	beq.n	bebe <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    be90:	7ffb      	ldrb	r3, [r7, #31]
    be92:	69ba      	ldr	r2, [r7, #24]
    be94:	21ff      	movs	r1, #255	; 0xff
    be96:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    be98:	7ffb      	ldrb	r3, [r7, #31]
    be9a:	69ba      	ldr	r2, [r7, #24]
    be9c:	4413      	add	r3, r2
    be9e:	789b      	ldrb	r3, [r3, #2]
    bea0:	2bff      	cmp	r3, #255	; 0xff
    bea2:	d00d      	beq.n	bec0 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    bea4:	7ffb      	ldrb	r3, [r7, #31]
    bea6:	69ba      	ldr	r2, [r7, #24]
    bea8:	4413      	add	r3, r2
    beaa:	789b      	ldrb	r3, [r3, #2]
    beac:	4618      	mov	r0, r3
    beae:	4b11      	ldr	r3, [pc, #68]	; (bef4 <cdcdf_acm_disable+0xa4>)
    beb0:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    beb2:	7ffb      	ldrb	r3, [r7, #31]
    beb4:	69ba      	ldr	r2, [r7, #24]
    beb6:	4413      	add	r3, r2
    beb8:	22ff      	movs	r2, #255	; 0xff
    beba:	709a      	strb	r2, [r3, #2]
    bebc:	e000      	b.n	bec0 <cdcdf_acm_disable+0x70>
			continue;
    bebe:	bf00      	nop
	for (i = 0; i < 2; i++) {
    bec0:	7ffb      	ldrb	r3, [r7, #31]
    bec2:	3301      	adds	r3, #1
    bec4:	77fb      	strb	r3, [r7, #31]
    bec6:	7ffb      	ldrb	r3, [r7, #31]
    bec8:	2b01      	cmp	r3, #1
    beca:	d9dc      	bls.n	be86 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    becc:	69bb      	ldr	r3, [r7, #24]
    bece:	791b      	ldrb	r3, [r3, #4]
    bed0:	2bff      	cmp	r3, #255	; 0xff
    bed2:	d007      	beq.n	bee4 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    bed4:	69bb      	ldr	r3, [r7, #24]
    bed6:	791b      	ldrb	r3, [r3, #4]
    bed8:	4618      	mov	r0, r3
    beda:	4b06      	ldr	r3, [pc, #24]	; (bef4 <cdcdf_acm_disable+0xa4>)
    bedc:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    bede:	69bb      	ldr	r3, [r7, #24]
    bee0:	22ff      	movs	r2, #255	; 0xff
    bee2:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    bee4:	4b04      	ldr	r3, [pc, #16]	; (bef8 <cdcdf_acm_disable+0xa8>)
    bee6:	2200      	movs	r2, #0
    bee8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    beea:	2300      	movs	r3, #0
}
    beec:	4618      	mov	r0, r3
    beee:	3720      	adds	r7, #32
    bef0:	46bd      	mov	sp, r7
    bef2:	bd80      	pop	{r7, pc}
    bef4:	0000342d 	.word	0x0000342d
    bef8:	20000f2c 	.word	0x20000f2c

0000befc <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    befc:	b580      	push	{r7, lr}
    befe:	b084      	sub	sp, #16
    bf00:	af00      	add	r7, sp, #0
    bf02:	60f8      	str	r0, [r7, #12]
    bf04:	460b      	mov	r3, r1
    bf06:	607a      	str	r2, [r7, #4]
    bf08:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    bf0a:	7afb      	ldrb	r3, [r7, #11]
    bf0c:	2b01      	cmp	r3, #1
    bf0e:	d009      	beq.n	bf24 <cdcdf_acm_ctrl+0x28>
    bf10:	2b02      	cmp	r3, #2
    bf12:	d00d      	beq.n	bf30 <cdcdf_acm_ctrl+0x34>
    bf14:	2b00      	cmp	r3, #0
    bf16:	d10e      	bne.n	bf36 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    bf18:	6879      	ldr	r1, [r7, #4]
    bf1a:	68f8      	ldr	r0, [r7, #12]
    bf1c:	4b09      	ldr	r3, [pc, #36]	; (bf44 <cdcdf_acm_ctrl+0x48>)
    bf1e:	4798      	blx	r3
    bf20:	4603      	mov	r3, r0
    bf22:	e00a      	b.n	bf3a <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    bf24:	6879      	ldr	r1, [r7, #4]
    bf26:	68f8      	ldr	r0, [r7, #12]
    bf28:	4b07      	ldr	r3, [pc, #28]	; (bf48 <cdcdf_acm_ctrl+0x4c>)
    bf2a:	4798      	blx	r3
    bf2c:	4603      	mov	r3, r0
    bf2e:	e004      	b.n	bf3a <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    bf30:	f06f 031a 	mvn.w	r3, #26
    bf34:	e001      	b.n	bf3a <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    bf36:	f06f 030c 	mvn.w	r3, #12
	}
}
    bf3a:	4618      	mov	r0, r3
    bf3c:	3710      	adds	r7, #16
    bf3e:	46bd      	mov	sp, r7
    bf40:	bd80      	pop	{r7, pc}
    bf42:	bf00      	nop
    bf44:	0000bcdd 	.word	0x0000bcdd
    bf48:	0000be51 	.word	0x0000be51

0000bf4c <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bf4c:	b590      	push	{r4, r7, lr}
    bf4e:	b087      	sub	sp, #28
    bf50:	af00      	add	r7, sp, #0
    bf52:	4603      	mov	r3, r0
    bf54:	6039      	str	r1, [r7, #0]
    bf56:	71fb      	strb	r3, [r7, #7]
    bf58:	4613      	mov	r3, r2
    bf5a:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    bf5c:	683b      	ldr	r3, [r7, #0]
    bf5e:	799a      	ldrb	r2, [r3, #6]
    bf60:	79db      	ldrb	r3, [r3, #7]
    bf62:	021b      	lsls	r3, r3, #8
    bf64:	4313      	orrs	r3, r2
    bf66:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    bf68:	4b2b      	ldr	r3, [pc, #172]	; (c018 <cdcdf_acm_set_req+0xcc>)
    bf6a:	4798      	blx	r3
    bf6c:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    bf6e:	683b      	ldr	r3, [r7, #0]
    bf70:	785b      	ldrb	r3, [r3, #1]
    bf72:	2b20      	cmp	r3, #32
    bf74:	d002      	beq.n	bf7c <cdcdf_acm_set_req+0x30>
    bf76:	2b22      	cmp	r3, #34	; 0x22
    bf78:	d034      	beq.n	bfe4 <cdcdf_acm_set_req+0x98>
    bf7a:	e046      	b.n	c00a <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    bf7c:	8afb      	ldrh	r3, [r7, #22]
    bf7e:	2b07      	cmp	r3, #7
    bf80:	d002      	beq.n	bf88 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    bf82:	f04f 33ff 	mov.w	r3, #4294967295
    bf86:	e042      	b.n	c00e <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    bf88:	79bb      	ldrb	r3, [r7, #6]
    bf8a:	2b00      	cmp	r3, #0
    bf8c:	d107      	bne.n	bf9e <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    bf8e:	8afa      	ldrh	r2, [r7, #22]
    bf90:	79f8      	ldrb	r0, [r7, #7]
    bf92:	2300      	movs	r3, #0
    bf94:	6939      	ldr	r1, [r7, #16]
    bf96:	4c21      	ldr	r4, [pc, #132]	; (c01c <cdcdf_acm_set_req+0xd0>)
    bf98:	47a0      	blx	r4
    bf9a:	4603      	mov	r3, r0
    bf9c:	e037      	b.n	c00e <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    bf9e:	693a      	ldr	r2, [r7, #16]
    bfa0:	f107 0308 	add.w	r3, r7, #8
    bfa4:	6810      	ldr	r0, [r2, #0]
    bfa6:	6018      	str	r0, [r3, #0]
    bfa8:	8891      	ldrh	r1, [r2, #4]
    bfaa:	7992      	ldrb	r2, [r2, #6]
    bfac:	8099      	strh	r1, [r3, #4]
    bfae:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    bfb0:	4b1b      	ldr	r3, [pc, #108]	; (c020 <cdcdf_acm_set_req+0xd4>)
    bfb2:	681b      	ldr	r3, [r3, #0]
    bfb4:	2b00      	cmp	r3, #0
    bfb6:	d008      	beq.n	bfca <cdcdf_acm_set_req+0x7e>
    bfb8:	4b19      	ldr	r3, [pc, #100]	; (c020 <cdcdf_acm_set_req+0xd4>)
    bfba:	681b      	ldr	r3, [r3, #0]
    bfbc:	f107 0208 	add.w	r2, r7, #8
    bfc0:	4610      	mov	r0, r2
    bfc2:	4798      	blx	r3
    bfc4:	4603      	mov	r3, r0
    bfc6:	2b00      	cmp	r3, #0
    bfc8:	d00a      	beq.n	bfe0 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    bfca:	4b16      	ldr	r3, [pc, #88]	; (c024 <cdcdf_acm_set_req+0xd8>)
    bfcc:	f107 0208 	add.w	r2, r7, #8
    bfd0:	e892 0003 	ldmia.w	r2, {r0, r1}
    bfd4:	6018      	str	r0, [r3, #0]
    bfd6:	3304      	adds	r3, #4
    bfd8:	8019      	strh	r1, [r3, #0]
    bfda:	3302      	adds	r3, #2
    bfdc:	0c0a      	lsrs	r2, r1, #16
    bfde:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    bfe0:	2300      	movs	r3, #0
    bfe2:	e014      	b.n	c00e <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    bfe4:	2300      	movs	r3, #0
    bfe6:	2200      	movs	r2, #0
    bfe8:	2100      	movs	r1, #0
    bfea:	2000      	movs	r0, #0
    bfec:	4c0b      	ldr	r4, [pc, #44]	; (c01c <cdcdf_acm_set_req+0xd0>)
    bfee:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    bff0:	4b0d      	ldr	r3, [pc, #52]	; (c028 <cdcdf_acm_set_req+0xdc>)
    bff2:	681b      	ldr	r3, [r3, #0]
    bff4:	2b00      	cmp	r3, #0
    bff6:	d006      	beq.n	c006 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    bff8:	4b0b      	ldr	r3, [pc, #44]	; (c028 <cdcdf_acm_set_req+0xdc>)
    bffa:	681b      	ldr	r3, [r3, #0]
    bffc:	683a      	ldr	r2, [r7, #0]
    bffe:	8852      	ldrh	r2, [r2, #2]
    c000:	b292      	uxth	r2, r2
    c002:	4610      	mov	r0, r2
    c004:	4798      	blx	r3
		}
		return ERR_NONE;
    c006:	2300      	movs	r3, #0
    c008:	e001      	b.n	c00e <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    c00a:	f06f 030c 	mvn.w	r3, #12
	}
}
    c00e:	4618      	mov	r0, r3
    c010:	371c      	adds	r7, #28
    c012:	46bd      	mov	sp, r7
    c014:	bd90      	pop	{r4, r7, pc}
    c016:	bf00      	nop
    c018:	0000cf99 	.word	0x0000cf99
    c01c:	0000ce0d 	.word	0x0000ce0d
    c020:	20000f40 	.word	0x20000f40
    c024:	20000f34 	.word	0x20000f34
    c028:	20000f3c 	.word	0x20000f3c

0000c02c <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c02c:	b590      	push	{r4, r7, lr}
    c02e:	b085      	sub	sp, #20
    c030:	af00      	add	r7, sp, #0
    c032:	4603      	mov	r3, r0
    c034:	6039      	str	r1, [r7, #0]
    c036:	71fb      	strb	r3, [r7, #7]
    c038:	4613      	mov	r3, r2
    c03a:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    c03c:	683b      	ldr	r3, [r7, #0]
    c03e:	799a      	ldrb	r2, [r3, #6]
    c040:	79db      	ldrb	r3, [r3, #7]
    c042:	021b      	lsls	r3, r3, #8
    c044:	4313      	orrs	r3, r2
    c046:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    c048:	79bb      	ldrb	r3, [r7, #6]
    c04a:	2b01      	cmp	r3, #1
    c04c:	d101      	bne.n	c052 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    c04e:	2300      	movs	r3, #0
    c050:	e013      	b.n	c07a <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    c052:	683b      	ldr	r3, [r7, #0]
    c054:	785b      	ldrb	r3, [r3, #1]
    c056:	2b21      	cmp	r3, #33	; 0x21
    c058:	d10d      	bne.n	c076 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c05a:	89fb      	ldrh	r3, [r7, #14]
    c05c:	2b07      	cmp	r3, #7
    c05e:	d002      	beq.n	c066 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    c060:	f04f 33ff 	mov.w	r3, #4294967295
    c064:	e009      	b.n	c07a <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c066:	89fa      	ldrh	r2, [r7, #14]
    c068:	79f8      	ldrb	r0, [r7, #7]
    c06a:	2300      	movs	r3, #0
    c06c:	4905      	ldr	r1, [pc, #20]	; (c084 <cdcdf_acm_get_req+0x58>)
    c06e:	4c06      	ldr	r4, [pc, #24]	; (c088 <cdcdf_acm_get_req+0x5c>)
    c070:	47a0      	blx	r4
    c072:	4603      	mov	r3, r0
    c074:	e001      	b.n	c07a <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    c076:	f06f 030c 	mvn.w	r3, #12
	}
}
    c07a:	4618      	mov	r0, r3
    c07c:	3714      	adds	r7, #20
    c07e:	46bd      	mov	sp, r7
    c080:	bd90      	pop	{r4, r7, pc}
    c082:	bf00      	nop
    c084:	20000f34 	.word	0x20000f34
    c088:	0000ce0d 	.word	0x0000ce0d

0000c08c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c08c:	b580      	push	{r7, lr}
    c08e:	b082      	sub	sp, #8
    c090:	af00      	add	r7, sp, #0
    c092:	4603      	mov	r3, r0
    c094:	6039      	str	r1, [r7, #0]
    c096:	71fb      	strb	r3, [r7, #7]
    c098:	4613      	mov	r3, r2
    c09a:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c09c:	683b      	ldr	r3, [r7, #0]
    c09e:	781b      	ldrb	r3, [r3, #0]
    c0a0:	095b      	lsrs	r3, r3, #5
    c0a2:	b2db      	uxtb	r3, r3
    c0a4:	f003 0303 	and.w	r3, r3, #3
    c0a8:	2b01      	cmp	r3, #1
    c0aa:	d002      	beq.n	c0b2 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    c0ac:	f06f 0309 	mvn.w	r3, #9
    c0b0:	e026      	b.n	c100 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c0b2:	683b      	ldr	r3, [r7, #0]
    c0b4:	889b      	ldrh	r3, [r3, #4]
    c0b6:	b29a      	uxth	r2, r3
    c0b8:	4b13      	ldr	r3, [pc, #76]	; (c108 <cdcdf_acm_req+0x7c>)
    c0ba:	781b      	ldrb	r3, [r3, #0]
    c0bc:	b29b      	uxth	r3, r3
    c0be:	429a      	cmp	r2, r3
    c0c0:	d007      	beq.n	c0d2 <cdcdf_acm_req+0x46>
    c0c2:	683b      	ldr	r3, [r7, #0]
    c0c4:	889b      	ldrh	r3, [r3, #4]
    c0c6:	b29a      	uxth	r2, r3
    c0c8:	4b0f      	ldr	r3, [pc, #60]	; (c108 <cdcdf_acm_req+0x7c>)
    c0ca:	785b      	ldrb	r3, [r3, #1]
    c0cc:	b29b      	uxth	r3, r3
    c0ce:	429a      	cmp	r2, r3
    c0d0:	d114      	bne.n	c0fc <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c0d2:	683b      	ldr	r3, [r7, #0]
    c0d4:	781b      	ldrb	r3, [r3, #0]
    c0d6:	b25b      	sxtb	r3, r3
    c0d8:	2b00      	cmp	r3, #0
    c0da:	da07      	bge.n	c0ec <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    c0dc:	79ba      	ldrb	r2, [r7, #6]
    c0de:	79fb      	ldrb	r3, [r7, #7]
    c0e0:	6839      	ldr	r1, [r7, #0]
    c0e2:	4618      	mov	r0, r3
    c0e4:	4b09      	ldr	r3, [pc, #36]	; (c10c <cdcdf_acm_req+0x80>)
    c0e6:	4798      	blx	r3
    c0e8:	4603      	mov	r3, r0
    c0ea:	e009      	b.n	c100 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    c0ec:	79ba      	ldrb	r2, [r7, #6]
    c0ee:	79fb      	ldrb	r3, [r7, #7]
    c0f0:	6839      	ldr	r1, [r7, #0]
    c0f2:	4618      	mov	r0, r3
    c0f4:	4b06      	ldr	r3, [pc, #24]	; (c110 <cdcdf_acm_req+0x84>)
    c0f6:	4798      	blx	r3
    c0f8:	4603      	mov	r3, r0
    c0fa:	e001      	b.n	c100 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    c0fc:	f06f 0309 	mvn.w	r3, #9
	}
}
    c100:	4618      	mov	r0, r3
    c102:	3708      	adds	r7, #8
    c104:	46bd      	mov	sp, r7
    c106:	bd80      	pop	{r7, pc}
    c108:	20000f2c 	.word	0x20000f2c
    c10c:	0000c02d 	.word	0x0000c02d
    c110:	0000bf4d 	.word	0x0000bf4d

0000c114 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c114:	b580      	push	{r7, lr}
    c116:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    c118:	4b0b      	ldr	r3, [pc, #44]	; (c148 <cdcdf_acm_init+0x34>)
    c11a:	4798      	blx	r3
    c11c:	4603      	mov	r3, r0
    c11e:	2b01      	cmp	r3, #1
    c120:	d902      	bls.n	c128 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    c122:	f06f 0310 	mvn.w	r3, #16
    c126:	e00d      	b.n	c144 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c128:	4b08      	ldr	r3, [pc, #32]	; (c14c <cdcdf_acm_init+0x38>)
    c12a:	4a09      	ldr	r2, [pc, #36]	; (c150 <cdcdf_acm_init+0x3c>)
    c12c:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c12e:	4b07      	ldr	r3, [pc, #28]	; (c14c <cdcdf_acm_init+0x38>)
    c130:	4a08      	ldr	r2, [pc, #32]	; (c154 <cdcdf_acm_init+0x40>)
    c132:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    c134:	4805      	ldr	r0, [pc, #20]	; (c14c <cdcdf_acm_init+0x38>)
    c136:	4b08      	ldr	r3, [pc, #32]	; (c158 <cdcdf_acm_init+0x44>)
    c138:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c13a:	4908      	ldr	r1, [pc, #32]	; (c15c <cdcdf_acm_init+0x48>)
    c13c:	2001      	movs	r0, #1
    c13e:	4b08      	ldr	r3, [pc, #32]	; (c160 <cdcdf_acm_init+0x4c>)
    c140:	4798      	blx	r3
	return ERR_NONE;
    c142:	2300      	movs	r3, #0
}
    c144:	4618      	mov	r0, r3
    c146:	bd80      	pop	{r7, pc}
    c148:	0000cfb1 	.word	0x0000cfb1
    c14c:	20000f20 	.word	0x20000f20
    c150:	0000befd 	.word	0x0000befd
    c154:	20000f2c 	.word	0x20000f2c
    c158:	0000cf19 	.word	0x0000cf19
    c15c:	20000208 	.word	0x20000208
    c160:	0000ce49 	.word	0x0000ce49

0000c164 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    c164:	b590      	push	{r4, r7, lr}
    c166:	b083      	sub	sp, #12
    c168:	af00      	add	r7, sp, #0
    c16a:	6078      	str	r0, [r7, #4]
    c16c:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c16e:	4b0b      	ldr	r3, [pc, #44]	; (c19c <cdcdf_acm_read+0x38>)
    c170:	4798      	blx	r3
    c172:	4603      	mov	r3, r0
    c174:	f083 0301 	eor.w	r3, r3, #1
    c178:	b2db      	uxtb	r3, r3
    c17a:	2b00      	cmp	r3, #0
    c17c:	d002      	beq.n	c184 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    c17e:	f06f 0310 	mvn.w	r3, #16
    c182:	e007      	b.n	c194 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c184:	4b06      	ldr	r3, [pc, #24]	; (c1a0 <cdcdf_acm_read+0x3c>)
    c186:	7918      	ldrb	r0, [r3, #4]
    c188:	2300      	movs	r3, #0
    c18a:	683a      	ldr	r2, [r7, #0]
    c18c:	6879      	ldr	r1, [r7, #4]
    c18e:	4c05      	ldr	r4, [pc, #20]	; (c1a4 <cdcdf_acm_read+0x40>)
    c190:	47a0      	blx	r4
    c192:	4603      	mov	r3, r0
}
    c194:	4618      	mov	r0, r3
    c196:	370c      	adds	r7, #12
    c198:	46bd      	mov	sp, r7
    c19a:	bd90      	pop	{r4, r7, pc}
    c19c:	0000c289 	.word	0x0000c289
    c1a0:	20000f2c 	.word	0x20000f2c
    c1a4:	0000ce0d 	.word	0x0000ce0d

0000c1a8 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    c1a8:	b590      	push	{r4, r7, lr}
    c1aa:	b083      	sub	sp, #12
    c1ac:	af00      	add	r7, sp, #0
    c1ae:	6078      	str	r0, [r7, #4]
    c1b0:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c1b2:	4b0b      	ldr	r3, [pc, #44]	; (c1e0 <cdcdf_acm_write+0x38>)
    c1b4:	4798      	blx	r3
    c1b6:	4603      	mov	r3, r0
    c1b8:	f083 0301 	eor.w	r3, r3, #1
    c1bc:	b2db      	uxtb	r3, r3
    c1be:	2b00      	cmp	r3, #0
    c1c0:	d002      	beq.n	c1c8 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    c1c2:	f06f 0310 	mvn.w	r3, #16
    c1c6:	e007      	b.n	c1d8 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c1c8:	4b06      	ldr	r3, [pc, #24]	; (c1e4 <cdcdf_acm_write+0x3c>)
    c1ca:	78d8      	ldrb	r0, [r3, #3]
    c1cc:	2301      	movs	r3, #1
    c1ce:	683a      	ldr	r2, [r7, #0]
    c1d0:	6879      	ldr	r1, [r7, #4]
    c1d2:	4c05      	ldr	r4, [pc, #20]	; (c1e8 <cdcdf_acm_write+0x40>)
    c1d4:	47a0      	blx	r4
    c1d6:	4603      	mov	r3, r0
}
    c1d8:	4618      	mov	r0, r3
    c1da:	370c      	adds	r7, #12
    c1dc:	46bd      	mov	sp, r7
    c1de:	bd90      	pop	{r4, r7, pc}
    c1e0:	0000c289 	.word	0x0000c289
    c1e4:	20000f2c 	.word	0x20000f2c
    c1e8:	0000ce0d 	.word	0x0000ce0d

0000c1ec <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    c1ec:	b580      	push	{r7, lr}
    c1ee:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c1f0:	4b05      	ldr	r3, [pc, #20]	; (c208 <cdcdf_acm_stop_xfer+0x1c>)
    c1f2:	78db      	ldrb	r3, [r3, #3]
    c1f4:	4618      	mov	r0, r3
    c1f6:	4b05      	ldr	r3, [pc, #20]	; (c20c <cdcdf_acm_stop_xfer+0x20>)
    c1f8:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c1fa:	4b03      	ldr	r3, [pc, #12]	; (c208 <cdcdf_acm_stop_xfer+0x1c>)
    c1fc:	791b      	ldrb	r3, [r3, #4]
    c1fe:	4618      	mov	r0, r3
    c200:	4b02      	ldr	r3, [pc, #8]	; (c20c <cdcdf_acm_stop_xfer+0x20>)
    c202:	4798      	blx	r3
}
    c204:	bf00      	nop
    c206:	bd80      	pop	{r7, pc}
    c208:	20000f2c 	.word	0x20000f2c
    c20c:	00003655 	.word	0x00003655

0000c210 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    c210:	b580      	push	{r7, lr}
    c212:	b082      	sub	sp, #8
    c214:	af00      	add	r7, sp, #0
    c216:	4603      	mov	r3, r0
    c218:	6039      	str	r1, [r7, #0]
    c21a:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    c21c:	79fb      	ldrb	r3, [r7, #7]
    c21e:	2b03      	cmp	r3, #3
    c220:	d822      	bhi.n	c268 <cdcdf_acm_register_callback+0x58>
    c222:	a201      	add	r2, pc, #4	; (adr r2, c228 <cdcdf_acm_register_callback+0x18>)
    c224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c228:	0000c239 	.word	0x0000c239
    c22c:	0000c249 	.word	0x0000c249
    c230:	0000c259 	.word	0x0000c259
    c234:	0000c261 	.word	0x0000c261
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c238:	4b0f      	ldr	r3, [pc, #60]	; (c278 <cdcdf_acm_register_callback+0x68>)
    c23a:	791b      	ldrb	r3, [r3, #4]
    c23c:	683a      	ldr	r2, [r7, #0]
    c23e:	2102      	movs	r1, #2
    c240:	4618      	mov	r0, r3
    c242:	4b0e      	ldr	r3, [pc, #56]	; (c27c <cdcdf_acm_register_callback+0x6c>)
    c244:	4798      	blx	r3
		break;
    c246:	e012      	b.n	c26e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c248:	4b0b      	ldr	r3, [pc, #44]	; (c278 <cdcdf_acm_register_callback+0x68>)
    c24a:	78db      	ldrb	r3, [r3, #3]
    c24c:	683a      	ldr	r2, [r7, #0]
    c24e:	2102      	movs	r1, #2
    c250:	4618      	mov	r0, r3
    c252:	4b0a      	ldr	r3, [pc, #40]	; (c27c <cdcdf_acm_register_callback+0x6c>)
    c254:	4798      	blx	r3
		break;
    c256:	e00a      	b.n	c26e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c258:	4a09      	ldr	r2, [pc, #36]	; (c280 <cdcdf_acm_register_callback+0x70>)
    c25a:	683b      	ldr	r3, [r7, #0]
    c25c:	6013      	str	r3, [r2, #0]
		break;
    c25e:	e006      	b.n	c26e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c260:	4a08      	ldr	r2, [pc, #32]	; (c284 <cdcdf_acm_register_callback+0x74>)
    c262:	683b      	ldr	r3, [r7, #0]
    c264:	6013      	str	r3, [r2, #0]
		break;
    c266:	e002      	b.n	c26e <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    c268:	f06f 030c 	mvn.w	r3, #12
    c26c:	e000      	b.n	c270 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    c26e:	2300      	movs	r3, #0
}
    c270:	4618      	mov	r0, r3
    c272:	3708      	adds	r7, #8
    c274:	46bd      	mov	sp, r7
    c276:	bd80      	pop	{r7, pc}
    c278:	20000f2c 	.word	0x20000f2c
    c27c:	00003781 	.word	0x00003781
    c280:	20000f40 	.word	0x20000f40
    c284:	20000f3c 	.word	0x20000f3c

0000c288 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    c288:	b480      	push	{r7}
    c28a:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    c28c:	4b03      	ldr	r3, [pc, #12]	; (c29c <cdcdf_acm_is_enabled+0x14>)
    c28e:	795b      	ldrb	r3, [r3, #5]
}
    c290:	4618      	mov	r0, r3
    c292:	46bd      	mov	sp, r7
    c294:	f85d 7b04 	ldr.w	r7, [sp], #4
    c298:	4770      	bx	lr
    c29a:	bf00      	nop
    c29c:	20000f2c 	.word	0x20000f2c

0000c2a0 <usb_get_u16>:
{
    c2a0:	b480      	push	{r7}
    c2a2:	b083      	sub	sp, #12
    c2a4:	af00      	add	r7, sp, #0
    c2a6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c2a8:	687b      	ldr	r3, [r7, #4]
    c2aa:	781b      	ldrb	r3, [r3, #0]
    c2ac:	b29a      	uxth	r2, r3
    c2ae:	687b      	ldr	r3, [r7, #4]
    c2b0:	3301      	adds	r3, #1
    c2b2:	781b      	ldrb	r3, [r3, #0]
    c2b4:	b29b      	uxth	r3, r3
    c2b6:	021b      	lsls	r3, r3, #8
    c2b8:	b29b      	uxth	r3, r3
    c2ba:	4413      	add	r3, r2
    c2bc:	b29b      	uxth	r3, r3
}
    c2be:	4618      	mov	r0, r3
    c2c0:	370c      	adds	r7, #12
    c2c2:	46bd      	mov	sp, r7
    c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2c8:	4770      	bx	lr

0000c2ca <usb_desc_len>:
{
    c2ca:	b480      	push	{r7}
    c2cc:	b083      	sub	sp, #12
    c2ce:	af00      	add	r7, sp, #0
    c2d0:	6078      	str	r0, [r7, #4]
	return desc[0];
    c2d2:	687b      	ldr	r3, [r7, #4]
    c2d4:	781b      	ldrb	r3, [r3, #0]
}
    c2d6:	4618      	mov	r0, r3
    c2d8:	370c      	adds	r7, #12
    c2da:	46bd      	mov	sp, r7
    c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2e0:	4770      	bx	lr
	...

0000c2e4 <usb_desc_next>:
{
    c2e4:	b580      	push	{r7, lr}
    c2e6:	b082      	sub	sp, #8
    c2e8:	af00      	add	r7, sp, #0
    c2ea:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c2ec:	6878      	ldr	r0, [r7, #4]
    c2ee:	4b05      	ldr	r3, [pc, #20]	; (c304 <usb_desc_next+0x20>)
    c2f0:	4798      	blx	r3
    c2f2:	4603      	mov	r3, r0
    c2f4:	461a      	mov	r2, r3
    c2f6:	687b      	ldr	r3, [r7, #4]
    c2f8:	4413      	add	r3, r2
}
    c2fa:	4618      	mov	r0, r3
    c2fc:	3708      	adds	r7, #8
    c2fe:	46bd      	mov	sp, r7
    c300:	bd80      	pop	{r7, pc}
    c302:	bf00      	nop
    c304:	0000c2cb 	.word	0x0000c2cb

0000c308 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    c308:	b580      	push	{r7, lr}
    c30a:	b082      	sub	sp, #8
    c30c:	af00      	add	r7, sp, #0
    c30e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c310:	687b      	ldr	r3, [r7, #4]
    c312:	3302      	adds	r3, #2
    c314:	4618      	mov	r0, r3
    c316:	4b03      	ldr	r3, [pc, #12]	; (c324 <usb_cfg_desc_total_len+0x1c>)
    c318:	4798      	blx	r3
    c31a:	4603      	mov	r3, r0
}
    c31c:	4618      	mov	r0, r3
    c31e:	3708      	adds	r7, #8
    c320:	46bd      	mov	sp, r7
    c322:	bd80      	pop	{r7, pc}
    c324:	0000c2a1 	.word	0x0000c2a1

0000c328 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    c328:	b590      	push	{r4, r7, lr}
    c32a:	b085      	sub	sp, #20
    c32c:	af00      	add	r7, sp, #0
    c32e:	4603      	mov	r3, r0
    c330:	6039      	str	r1, [r7, #0]
    c332:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    c334:	2300      	movs	r3, #0
    c336:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    c338:	683b      	ldr	r3, [r7, #0]
    c33a:	799a      	ldrb	r2, [r3, #6]
    c33c:	79db      	ldrb	r3, [r3, #7]
    c33e:	021b      	lsls	r3, r3, #8
    c340:	4313      	orrs	r3, r2
    c342:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    c344:	897b      	ldrh	r3, [r7, #10]
    c346:	2b12      	cmp	r3, #18
    c348:	d901      	bls.n	c34e <usbdc_get_dev_desc+0x26>
		length = 0x12;
    c34a:	2312      	movs	r3, #18
    c34c:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    c34e:	68fb      	ldr	r3, [r7, #12]
    c350:	2b00      	cmp	r3, #0
    c352:	d10a      	bne.n	c36a <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c354:	4b0f      	ldr	r3, [pc, #60]	; (c394 <usbdc_get_dev_desc+0x6c>)
    c356:	681b      	ldr	r3, [r3, #0]
    c358:	6818      	ldr	r0, [r3, #0]
    c35a:	4b0e      	ldr	r3, [pc, #56]	; (c394 <usbdc_get_dev_desc+0x6c>)
    c35c:	681b      	ldr	r3, [r3, #0]
    c35e:	685b      	ldr	r3, [r3, #4]
    c360:	2201      	movs	r2, #1
    c362:	4619      	mov	r1, r3
    c364:	4b0c      	ldr	r3, [pc, #48]	; (c398 <usbdc_get_dev_desc+0x70>)
    c366:	4798      	blx	r3
    c368:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    c36a:	68fb      	ldr	r3, [r7, #12]
    c36c:	2b00      	cmp	r3, #0
    c36e:	d101      	bne.n	c374 <usbdc_get_dev_desc+0x4c>
		return false;
    c370:	2300      	movs	r3, #0
    c372:	e00b      	b.n	c38c <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c374:	897a      	ldrh	r2, [r7, #10]
    c376:	79f8      	ldrb	r0, [r7, #7]
    c378:	2300      	movs	r3, #0
    c37a:	68f9      	ldr	r1, [r7, #12]
    c37c:	4c07      	ldr	r4, [pc, #28]	; (c39c <usbdc_get_dev_desc+0x74>)
    c37e:	47a0      	blx	r4
    c380:	4603      	mov	r3, r0
    c382:	2b00      	cmp	r3, #0
    c384:	d001      	beq.n	c38a <usbdc_get_dev_desc+0x62>
		return false;
    c386:	2300      	movs	r3, #0
    c388:	e000      	b.n	c38c <usbdc_get_dev_desc+0x64>
	}
	return true;
    c38a:	2301      	movs	r3, #1
}
    c38c:	4618      	mov	r0, r3
    c38e:	3714      	adds	r7, #20
    c390:	46bd      	mov	sp, r7
    c392:	bd90      	pop	{r4, r7, pc}
    c394:	20000f44 	.word	0x20000f44
    c398:	0000d09d 	.word	0x0000d09d
    c39c:	0000ce0d 	.word	0x0000ce0d

0000c3a0 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    c3a0:	b590      	push	{r4, r7, lr}
    c3a2:	b087      	sub	sp, #28
    c3a4:	af00      	add	r7, sp, #0
    c3a6:	4603      	mov	r3, r0
    c3a8:	6039      	str	r1, [r7, #0]
    c3aa:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    c3ac:	2300      	movs	r3, #0
    c3ae:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    c3b0:	683b      	ldr	r3, [r7, #0]
    c3b2:	799a      	ldrb	r2, [r3, #6]
    c3b4:	79db      	ldrb	r3, [r3, #7]
    c3b6:	021b      	lsls	r3, r3, #8
    c3b8:	4313      	orrs	r3, r2
    c3ba:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    c3bc:	683b      	ldr	r3, [r7, #0]
    c3be:	885b      	ldrh	r3, [r3, #2]
    c3c0:	b29b      	uxth	r3, r3
    c3c2:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c3c4:	8a7a      	ldrh	r2, [r7, #18]
    c3c6:	4b1e      	ldr	r3, [pc, #120]	; (c440 <usbdc_get_cfg_desc+0xa0>)
    c3c8:	7f1b      	ldrb	r3, [r3, #28]
    c3ca:	3b01      	subs	r3, #1
    c3cc:	4013      	ands	r3, r2
    c3ce:	2b00      	cmp	r3, #0
    c3d0:	bf0c      	ite	eq
    c3d2:	2301      	moveq	r3, #1
    c3d4:	2300      	movne	r3, #0
    c3d6:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c3d8:	697b      	ldr	r3, [r7, #20]
    c3da:	2b00      	cmp	r3, #0
    c3dc:	d10c      	bne.n	c3f8 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c3de:	4b18      	ldr	r3, [pc, #96]	; (c440 <usbdc_get_cfg_desc+0xa0>)
    c3e0:	681b      	ldr	r3, [r3, #0]
    c3e2:	6818      	ldr	r0, [r3, #0]
    c3e4:	4b16      	ldr	r3, [pc, #88]	; (c440 <usbdc_get_cfg_desc+0xa0>)
    c3e6:	681b      	ldr	r3, [r3, #0]
    c3e8:	6859      	ldr	r1, [r3, #4]
    c3ea:	7c3b      	ldrb	r3, [r7, #16]
    c3ec:	3301      	adds	r3, #1
    c3ee:	b2db      	uxtb	r3, r3
    c3f0:	461a      	mov	r2, r3
    c3f2:	4b14      	ldr	r3, [pc, #80]	; (c444 <usbdc_get_cfg_desc+0xa4>)
    c3f4:	4798      	blx	r3
    c3f6:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    c3f8:	697b      	ldr	r3, [r7, #20]
    c3fa:	2b00      	cmp	r3, #0
    c3fc:	d101      	bne.n	c402 <usbdc_get_cfg_desc+0x62>
		return false;
    c3fe:	2300      	movs	r3, #0
    c400:	e019      	b.n	c436 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    c402:	6978      	ldr	r0, [r7, #20]
    c404:	4b10      	ldr	r3, [pc, #64]	; (c448 <usbdc_get_cfg_desc+0xa8>)
    c406:	4798      	blx	r3
    c408:	4603      	mov	r3, r0
    c40a:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    c40c:	8a7a      	ldrh	r2, [r7, #18]
    c40e:	89fb      	ldrh	r3, [r7, #14]
    c410:	429a      	cmp	r2, r3
    c412:	d802      	bhi.n	c41a <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    c414:	2300      	movs	r3, #0
    c416:	747b      	strb	r3, [r7, #17]
    c418:	e001      	b.n	c41e <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    c41a:	89fb      	ldrh	r3, [r7, #14]
    c41c:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c41e:	8a7a      	ldrh	r2, [r7, #18]
    c420:	7c7b      	ldrb	r3, [r7, #17]
    c422:	79f8      	ldrb	r0, [r7, #7]
    c424:	6979      	ldr	r1, [r7, #20]
    c426:	4c09      	ldr	r4, [pc, #36]	; (c44c <usbdc_get_cfg_desc+0xac>)
    c428:	47a0      	blx	r4
    c42a:	4603      	mov	r3, r0
    c42c:	2b00      	cmp	r3, #0
    c42e:	d001      	beq.n	c434 <usbdc_get_cfg_desc+0x94>
		return false;
    c430:	2300      	movs	r3, #0
    c432:	e000      	b.n	c436 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    c434:	2301      	movs	r3, #1
}
    c436:	4618      	mov	r0, r3
    c438:	371c      	adds	r7, #28
    c43a:	46bd      	mov	sp, r7
    c43c:	bd90      	pop	{r4, r7, pc}
    c43e:	bf00      	nop
    c440:	20000f44 	.word	0x20000f44
    c444:	0000d15d 	.word	0x0000d15d
    c448:	0000c309 	.word	0x0000c309
    c44c:	0000ce0d 	.word	0x0000ce0d

0000c450 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    c450:	b590      	push	{r4, r7, lr}
    c452:	b085      	sub	sp, #20
    c454:	af00      	add	r7, sp, #0
    c456:	4603      	mov	r3, r0
    c458:	6039      	str	r1, [r7, #0]
    c45a:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    c45c:	683b      	ldr	r3, [r7, #0]
    c45e:	799a      	ldrb	r2, [r3, #6]
    c460:	79db      	ldrb	r3, [r3, #7]
    c462:	021b      	lsls	r3, r3, #8
    c464:	4313      	orrs	r3, r2
    c466:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    c468:	683b      	ldr	r3, [r7, #0]
    c46a:	885b      	ldrh	r3, [r3, #2]
    c46c:	b29b      	uxth	r3, r3
    c46e:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c470:	89fa      	ldrh	r2, [r7, #14]
    c472:	4b1a      	ldr	r3, [pc, #104]	; (c4dc <usbdc_get_str_desc+0x8c>)
    c474:	7f1b      	ldrb	r3, [r3, #28]
    c476:	3b01      	subs	r3, #1
    c478:	4013      	ands	r3, r2
    c47a:	2b00      	cmp	r3, #0
    c47c:	bf0c      	ite	eq
    c47e:	2301      	moveq	r3, #1
    c480:	2300      	movne	r3, #0
    c482:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c484:	4b15      	ldr	r3, [pc, #84]	; (c4dc <usbdc_get_str_desc+0x8c>)
    c486:	681b      	ldr	r3, [r3, #0]
    c488:	6818      	ldr	r0, [r3, #0]
    c48a:	4b14      	ldr	r3, [pc, #80]	; (c4dc <usbdc_get_str_desc+0x8c>)
    c48c:	681b      	ldr	r3, [r3, #0]
    c48e:	685b      	ldr	r3, [r3, #4]
    c490:	7b3a      	ldrb	r2, [r7, #12]
    c492:	4619      	mov	r1, r3
    c494:	4b12      	ldr	r3, [pc, #72]	; (c4e0 <usbdc_get_str_desc+0x90>)
    c496:	4798      	blx	r3
    c498:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    c49a:	68bb      	ldr	r3, [r7, #8]
    c49c:	2b00      	cmp	r3, #0
    c49e:	d101      	bne.n	c4a4 <usbdc_get_str_desc+0x54>
		return false;
    c4a0:	2300      	movs	r3, #0
    c4a2:	e017      	b.n	c4d4 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    c4a4:	68bb      	ldr	r3, [r7, #8]
    c4a6:	781b      	ldrb	r3, [r3, #0]
    c4a8:	b29b      	uxth	r3, r3
    c4aa:	89fa      	ldrh	r2, [r7, #14]
    c4ac:	429a      	cmp	r2, r3
    c4ae:	d802      	bhi.n	c4b6 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    c4b0:	2300      	movs	r3, #0
    c4b2:	737b      	strb	r3, [r7, #13]
    c4b4:	e002      	b.n	c4bc <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    c4b6:	68bb      	ldr	r3, [r7, #8]
    c4b8:	781b      	ldrb	r3, [r3, #0]
    c4ba:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c4bc:	89fa      	ldrh	r2, [r7, #14]
    c4be:	7b7b      	ldrb	r3, [r7, #13]
    c4c0:	79f8      	ldrb	r0, [r7, #7]
    c4c2:	68b9      	ldr	r1, [r7, #8]
    c4c4:	4c07      	ldr	r4, [pc, #28]	; (c4e4 <usbdc_get_str_desc+0x94>)
    c4c6:	47a0      	blx	r4
    c4c8:	4603      	mov	r3, r0
    c4ca:	2b00      	cmp	r3, #0
    c4cc:	d001      	beq.n	c4d2 <usbdc_get_str_desc+0x82>
		return false;
    c4ce:	2300      	movs	r3, #0
    c4d0:	e000      	b.n	c4d4 <usbdc_get_str_desc+0x84>
	}
	return true;
    c4d2:	2301      	movs	r3, #1
}
    c4d4:	4618      	mov	r0, r3
    c4d6:	3714      	adds	r7, #20
    c4d8:	46bd      	mov	sp, r7
    c4da:	bd90      	pop	{r4, r7, pc}
    c4dc:	20000f44 	.word	0x20000f44
    c4e0:	0000d1d5 	.word	0x0000d1d5
    c4e4:	0000ce0d 	.word	0x0000ce0d

0000c4e8 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    c4e8:	b580      	push	{r7, lr}
    c4ea:	b084      	sub	sp, #16
    c4ec:	af00      	add	r7, sp, #0
    c4ee:	4603      	mov	r3, r0
    c4f0:	6039      	str	r1, [r7, #0]
    c4f2:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c4f4:	683b      	ldr	r3, [r7, #0]
    c4f6:	885b      	ldrh	r3, [r3, #2]
    c4f8:	b29b      	uxth	r3, r3
    c4fa:	0a1b      	lsrs	r3, r3, #8
    c4fc:	b29b      	uxth	r3, r3
    c4fe:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    c500:	7bfb      	ldrb	r3, [r7, #15]
    c502:	2b02      	cmp	r3, #2
    c504:	d00d      	beq.n	c522 <usbdc_get_desc_req+0x3a>
    c506:	2b03      	cmp	r3, #3
    c508:	d012      	beq.n	c530 <usbdc_get_desc_req+0x48>
    c50a:	2b01      	cmp	r3, #1
    c50c:	d002      	beq.n	c514 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    c50e:	bf00      	nop
	}
	return false;
    c510:	2300      	movs	r3, #0
    c512:	e013      	b.n	c53c <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    c514:	79fb      	ldrb	r3, [r7, #7]
    c516:	6839      	ldr	r1, [r7, #0]
    c518:	4618      	mov	r0, r3
    c51a:	4b0a      	ldr	r3, [pc, #40]	; (c544 <usbdc_get_desc_req+0x5c>)
    c51c:	4798      	blx	r3
    c51e:	4603      	mov	r3, r0
    c520:	e00c      	b.n	c53c <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    c522:	79fb      	ldrb	r3, [r7, #7]
    c524:	6839      	ldr	r1, [r7, #0]
    c526:	4618      	mov	r0, r3
    c528:	4b07      	ldr	r3, [pc, #28]	; (c548 <usbdc_get_desc_req+0x60>)
    c52a:	4798      	blx	r3
    c52c:	4603      	mov	r3, r0
    c52e:	e005      	b.n	c53c <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    c530:	79fb      	ldrb	r3, [r7, #7]
    c532:	6839      	ldr	r1, [r7, #0]
    c534:	4618      	mov	r0, r3
    c536:	4b05      	ldr	r3, [pc, #20]	; (c54c <usbdc_get_desc_req+0x64>)
    c538:	4798      	blx	r3
    c53a:	4603      	mov	r3, r0
}
    c53c:	4618      	mov	r0, r3
    c53e:	3710      	adds	r7, #16
    c540:	46bd      	mov	sp, r7
    c542:	bd80      	pop	{r7, pc}
    c544:	0000c329 	.word	0x0000c329
    c548:	0000c3a1 	.word	0x0000c3a1
    c54c:	0000c451 	.word	0x0000c451

0000c550 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    c550:	b590      	push	{r4, r7, lr}
    c552:	b085      	sub	sp, #20
    c554:	af00      	add	r7, sp, #0
    c556:	4603      	mov	r3, r0
    c558:	6039      	str	r1, [r7, #0]
    c55a:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c55c:	683b      	ldr	r3, [r7, #0]
    c55e:	781b      	ldrb	r3, [r3, #0]
    c560:	f003 031f 	and.w	r3, r3, #31
    c564:	2b00      	cmp	r3, #0
    c566:	db1b      	blt.n	c5a0 <usbdc_get_status_req+0x50>
    c568:	2b01      	cmp	r3, #1
    c56a:	dd02      	ble.n	c572 <usbdc_get_status_req+0x22>
    c56c:	2b02      	cmp	r3, #2
    c56e:	d003      	beq.n	c578 <usbdc_get_status_req+0x28>
    c570:	e016      	b.n	c5a0 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    c572:	2300      	movs	r3, #0
    c574:	60fb      	str	r3, [r7, #12]
		break;
    c576:	e015      	b.n	c5a4 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c578:	683b      	ldr	r3, [r7, #0]
    c57a:	889b      	ldrh	r3, [r3, #4]
    c57c:	b29b      	uxth	r3, r3
    c57e:	b2db      	uxtb	r3, r3
    c580:	2102      	movs	r1, #2
    c582:	4618      	mov	r0, r3
    c584:	4b0f      	ldr	r3, [pc, #60]	; (c5c4 <usbdc_get_status_req+0x74>)
    c586:	4798      	blx	r3
    c588:	4603      	mov	r3, r0
    c58a:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    c58c:	68fb      	ldr	r3, [r7, #12]
    c58e:	2b00      	cmp	r3, #0
    c590:	da01      	bge.n	c596 <usbdc_get_status_req+0x46>
			return false;
    c592:	2300      	movs	r3, #0
    c594:	e012      	b.n	c5bc <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    c596:	68fb      	ldr	r3, [r7, #12]
    c598:	f003 0301 	and.w	r3, r3, #1
    c59c:	60fb      	str	r3, [r7, #12]
		break;
    c59e:	e001      	b.n	c5a4 <usbdc_get_status_req+0x54>
	default:
		return false;
    c5a0:	2300      	movs	r3, #0
    c5a2:	e00b      	b.n	c5bc <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    c5a4:	4b08      	ldr	r3, [pc, #32]	; (c5c8 <usbdc_get_status_req+0x78>)
    c5a6:	695b      	ldr	r3, [r3, #20]
    c5a8:	89ba      	ldrh	r2, [r7, #12]
    c5aa:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c5ac:	4b06      	ldr	r3, [pc, #24]	; (c5c8 <usbdc_get_status_req+0x78>)
    c5ae:	6959      	ldr	r1, [r3, #20]
    c5b0:	79f8      	ldrb	r0, [r7, #7]
    c5b2:	2300      	movs	r3, #0
    c5b4:	2202      	movs	r2, #2
    c5b6:	4c05      	ldr	r4, [pc, #20]	; (c5cc <usbdc_get_status_req+0x7c>)
    c5b8:	47a0      	blx	r4
	return true;
    c5ba:	2301      	movs	r3, #1
}
    c5bc:	4618      	mov	r0, r3
    c5be:	3714      	adds	r7, #20
    c5c0:	46bd      	mov	sp, r7
    c5c2:	bd90      	pop	{r4, r7, pc}
    c5c4:	0000372d 	.word	0x0000372d
    c5c8:	20000f44 	.word	0x20000f44
    c5cc:	0000ce0d 	.word	0x0000ce0d

0000c5d0 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    c5d0:	b590      	push	{r4, r7, lr}
    c5d2:	b085      	sub	sp, #20
    c5d4:	af00      	add	r7, sp, #0
    c5d6:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c5d8:	4b1f      	ldr	r3, [pc, #124]	; (c658 <usbdc_get_interface+0x88>)
    c5da:	691b      	ldr	r3, [r3, #16]
    c5dc:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c5de:	4b1e      	ldr	r3, [pc, #120]	; (c658 <usbdc_get_interface+0x88>)
    c5e0:	7f5b      	ldrb	r3, [r3, #29]
    c5e2:	461a      	mov	r2, r3
    c5e4:	687b      	ldr	r3, [r7, #4]
    c5e6:	889b      	ldrh	r3, [r3, #4]
    c5e8:	b29b      	uxth	r3, r3
    c5ea:	fa42 f303 	asr.w	r3, r2, r3
    c5ee:	f003 0301 	and.w	r3, r3, #1
    c5f2:	2b00      	cmp	r3, #0
    c5f4:	d128      	bne.n	c648 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    c5f6:	4b18      	ldr	r3, [pc, #96]	; (c658 <usbdc_get_interface+0x88>)
    c5f8:	695b      	ldr	r3, [r3, #20]
    c5fa:	2200      	movs	r2, #0
    c5fc:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c5fe:	4b16      	ldr	r3, [pc, #88]	; (c658 <usbdc_get_interface+0x88>)
    c600:	6959      	ldr	r1, [r3, #20]
    c602:	2300      	movs	r3, #0
    c604:	2201      	movs	r2, #1
    c606:	2000      	movs	r0, #0
    c608:	4c14      	ldr	r4, [pc, #80]	; (c65c <usbdc_get_interface+0x8c>)
    c60a:	47a0      	blx	r4
		return true;
    c60c:	2301      	movs	r3, #1
    c60e:	e01f      	b.n	c650 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c610:	68fb      	ldr	r3, [r7, #12]
    c612:	685b      	ldr	r3, [r3, #4]
    c614:	687a      	ldr	r2, [r7, #4]
    c616:	2102      	movs	r1, #2
    c618:	68f8      	ldr	r0, [r7, #12]
    c61a:	4798      	blx	r3
    c61c:	60b8      	str	r0, [r7, #8]
    c61e:	68bb      	ldr	r3, [r7, #8]
    c620:	2b00      	cmp	r3, #0
    c622:	da03      	bge.n	c62c <usbdc_get_interface+0x5c>
			func = func->next;
    c624:	68fb      	ldr	r3, [r7, #12]
    c626:	681b      	ldr	r3, [r3, #0]
    c628:	60fb      	str	r3, [r7, #12]
    c62a:	e00d      	b.n	c648 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c62c:	4b0a      	ldr	r3, [pc, #40]	; (c658 <usbdc_get_interface+0x88>)
    c62e:	695b      	ldr	r3, [r3, #20]
    c630:	68ba      	ldr	r2, [r7, #8]
    c632:	b2d2      	uxtb	r2, r2
    c634:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c636:	4b08      	ldr	r3, [pc, #32]	; (c658 <usbdc_get_interface+0x88>)
    c638:	6959      	ldr	r1, [r3, #20]
    c63a:	2300      	movs	r3, #0
    c63c:	2201      	movs	r2, #1
    c63e:	2000      	movs	r0, #0
    c640:	4c06      	ldr	r4, [pc, #24]	; (c65c <usbdc_get_interface+0x8c>)
    c642:	47a0      	blx	r4
			return true;
    c644:	2301      	movs	r3, #1
    c646:	e003      	b.n	c650 <usbdc_get_interface+0x80>
	while (NULL != func) {
    c648:	68fb      	ldr	r3, [r7, #12]
    c64a:	2b00      	cmp	r3, #0
    c64c:	d1e0      	bne.n	c610 <usbdc_get_interface+0x40>
		}
	}
	return false;
    c64e:	2300      	movs	r3, #0
}
    c650:	4618      	mov	r0, r3
    c652:	3714      	adds	r7, #20
    c654:	46bd      	mov	sp, r7
    c656:	bd90      	pop	{r4, r7, pc}
    c658:	20000f44 	.word	0x20000f44
    c65c:	0000ce0d 	.word	0x0000ce0d

0000c660 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    c660:	b590      	push	{r4, r7, lr}
    c662:	b083      	sub	sp, #12
    c664:	af00      	add	r7, sp, #0
    c666:	4603      	mov	r3, r0
    c668:	6039      	str	r1, [r7, #0]
    c66a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c66c:	683b      	ldr	r3, [r7, #0]
    c66e:	785b      	ldrb	r3, [r3, #1]
    c670:	2b0a      	cmp	r3, #10
    c672:	d83a      	bhi.n	c6ea <usbdc_get_req+0x8a>
    c674:	a201      	add	r2, pc, #4	; (adr r2, c67c <usbdc_get_req+0x1c>)
    c676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c67a:	bf00      	nop
    c67c:	0000c6d3 	.word	0x0000c6d3
    c680:	0000c6eb 	.word	0x0000c6eb
    c684:	0000c6eb 	.word	0x0000c6eb
    c688:	0000c6eb 	.word	0x0000c6eb
    c68c:	0000c6eb 	.word	0x0000c6eb
    c690:	0000c6eb 	.word	0x0000c6eb
    c694:	0000c6a9 	.word	0x0000c6a9
    c698:	0000c6eb 	.word	0x0000c6eb
    c69c:	0000c6b7 	.word	0x0000c6b7
    c6a0:	0000c6eb 	.word	0x0000c6eb
    c6a4:	0000c6e1 	.word	0x0000c6e1
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    c6a8:	79fb      	ldrb	r3, [r7, #7]
    c6aa:	6839      	ldr	r1, [r7, #0]
    c6ac:	4618      	mov	r0, r3
    c6ae:	4b11      	ldr	r3, [pc, #68]	; (c6f4 <usbdc_get_req+0x94>)
    c6b0:	4798      	blx	r3
    c6b2:	4603      	mov	r3, r0
    c6b4:	e01a      	b.n	c6ec <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c6b6:	4b10      	ldr	r3, [pc, #64]	; (c6f8 <usbdc_get_req+0x98>)
    c6b8:	695b      	ldr	r3, [r3, #20]
    c6ba:	4a0f      	ldr	r2, [pc, #60]	; (c6f8 <usbdc_get_req+0x98>)
    c6bc:	7ed2      	ldrb	r2, [r2, #27]
    c6be:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    c6c0:	4b0d      	ldr	r3, [pc, #52]	; (c6f8 <usbdc_get_req+0x98>)
    c6c2:	6959      	ldr	r1, [r3, #20]
    c6c4:	79f8      	ldrb	r0, [r7, #7]
    c6c6:	2300      	movs	r3, #0
    c6c8:	2201      	movs	r2, #1
    c6ca:	4c0c      	ldr	r4, [pc, #48]	; (c6fc <usbdc_get_req+0x9c>)
    c6cc:	47a0      	blx	r4
		return true;
    c6ce:	2301      	movs	r3, #1
    c6d0:	e00c      	b.n	c6ec <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    c6d2:	79fb      	ldrb	r3, [r7, #7]
    c6d4:	6839      	ldr	r1, [r7, #0]
    c6d6:	4618      	mov	r0, r3
    c6d8:	4b09      	ldr	r3, [pc, #36]	; (c700 <usbdc_get_req+0xa0>)
    c6da:	4798      	blx	r3
    c6dc:	4603      	mov	r3, r0
    c6de:	e005      	b.n	c6ec <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    c6e0:	6838      	ldr	r0, [r7, #0]
    c6e2:	4b08      	ldr	r3, [pc, #32]	; (c704 <usbdc_get_req+0xa4>)
    c6e4:	4798      	blx	r3
    c6e6:	4603      	mov	r3, r0
    c6e8:	e000      	b.n	c6ec <usbdc_get_req+0x8c>
	default:
		return false;
    c6ea:	2300      	movs	r3, #0
	}
}
    c6ec:	4618      	mov	r0, r3
    c6ee:	370c      	adds	r7, #12
    c6f0:	46bd      	mov	sp, r7
    c6f2:	bd90      	pop	{r4, r7, pc}
    c6f4:	0000c4e9 	.word	0x0000c4e9
    c6f8:	20000f44 	.word	0x20000f44
    c6fc:	0000ce0d 	.word	0x0000ce0d
    c700:	0000c551 	.word	0x0000c551
    c704:	0000c5d1 	.word	0x0000c5d1

0000c708 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c708:	b590      	push	{r4, r7, lr}
    c70a:	b083      	sub	sp, #12
    c70c:	af00      	add	r7, sp, #0
    c70e:	4603      	mov	r3, r0
    c710:	6039      	str	r1, [r7, #0]
    c712:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c714:	683b      	ldr	r3, [r7, #0]
    c716:	781b      	ldrb	r3, [r3, #0]
    c718:	f003 031f 	and.w	r3, r3, #31
    c71c:	2b02      	cmp	r3, #2
    c71e:	d116      	bne.n	c74e <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c720:	683b      	ldr	r3, [r7, #0]
    c722:	88db      	ldrh	r3, [r3, #6]
    c724:	b29b      	uxth	r3, r3
    c726:	2b00      	cmp	r3, #0
    c728:	d001      	beq.n	c72e <usbdc_clear_ftr_req+0x26>
			return false;
    c72a:	2300      	movs	r3, #0
    c72c:	e010      	b.n	c750 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c72e:	683b      	ldr	r3, [r7, #0]
    c730:	889b      	ldrh	r3, [r3, #4]
    c732:	b29b      	uxth	r3, r3
    c734:	b2db      	uxtb	r3, r3
    c736:	2100      	movs	r1, #0
    c738:	4618      	mov	r0, r3
    c73a:	4b07      	ldr	r3, [pc, #28]	; (c758 <usbdc_clear_ftr_req+0x50>)
    c73c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c73e:	79f8      	ldrb	r0, [r7, #7]
    c740:	2301      	movs	r3, #1
    c742:	2200      	movs	r2, #0
    c744:	2100      	movs	r1, #0
    c746:	4c05      	ldr	r4, [pc, #20]	; (c75c <usbdc_clear_ftr_req+0x54>)
    c748:	47a0      	blx	r4
		return true;
    c74a:	2301      	movs	r3, #1
    c74c:	e000      	b.n	c750 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    c74e:	2300      	movs	r3, #0
	}
}
    c750:	4618      	mov	r0, r3
    c752:	370c      	adds	r7, #12
    c754:	46bd      	mov	sp, r7
    c756:	bd90      	pop	{r4, r7, pc}
    c758:	0000372d 	.word	0x0000372d
    c75c:	0000ce0d 	.word	0x0000ce0d

0000c760 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c760:	b590      	push	{r4, r7, lr}
    c762:	b083      	sub	sp, #12
    c764:	af00      	add	r7, sp, #0
    c766:	4603      	mov	r3, r0
    c768:	6039      	str	r1, [r7, #0]
    c76a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c76c:	683b      	ldr	r3, [r7, #0]
    c76e:	781b      	ldrb	r3, [r3, #0]
    c770:	f003 031f 	and.w	r3, r3, #31
    c774:	2b02      	cmp	r3, #2
    c776:	d116      	bne.n	c7a6 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c778:	683b      	ldr	r3, [r7, #0]
    c77a:	88db      	ldrh	r3, [r3, #6]
    c77c:	b29b      	uxth	r3, r3
    c77e:	2b00      	cmp	r3, #0
    c780:	d001      	beq.n	c786 <usbdc_set_ftr_req+0x26>
			return false;
    c782:	2300      	movs	r3, #0
    c784:	e010      	b.n	c7a8 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c786:	683b      	ldr	r3, [r7, #0]
    c788:	889b      	ldrh	r3, [r3, #4]
    c78a:	b29b      	uxth	r3, r3
    c78c:	b2db      	uxtb	r3, r3
    c78e:	2101      	movs	r1, #1
    c790:	4618      	mov	r0, r3
    c792:	4b07      	ldr	r3, [pc, #28]	; (c7b0 <usbdc_set_ftr_req+0x50>)
    c794:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c796:	79f8      	ldrb	r0, [r7, #7]
    c798:	2301      	movs	r3, #1
    c79a:	2200      	movs	r2, #0
    c79c:	2100      	movs	r1, #0
    c79e:	4c05      	ldr	r4, [pc, #20]	; (c7b4 <usbdc_set_ftr_req+0x54>)
    c7a0:	47a0      	blx	r4
		return true;
    c7a2:	2301      	movs	r3, #1
    c7a4:	e000      	b.n	c7a8 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    c7a6:	2300      	movs	r3, #0
	}
}
    c7a8:	4618      	mov	r0, r3
    c7aa:	370c      	adds	r7, #12
    c7ac:	46bd      	mov	sp, r7
    c7ae:	bd90      	pop	{r4, r7, pc}
    c7b0:	0000372d 	.word	0x0000372d
    c7b4:	0000ce0d 	.word	0x0000ce0d

0000c7b8 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    c7b8:	b580      	push	{r7, lr}
    c7ba:	b082      	sub	sp, #8
    c7bc:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c7be:	4b0a      	ldr	r3, [pc, #40]	; (c7e8 <usbdc_unconfig+0x30>)
    c7c0:	691b      	ldr	r3, [r3, #16]
    c7c2:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c7c4:	e008      	b.n	c7d8 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c7c6:	687b      	ldr	r3, [r7, #4]
    c7c8:	685b      	ldr	r3, [r3, #4]
    c7ca:	2200      	movs	r2, #0
    c7cc:	2101      	movs	r1, #1
    c7ce:	6878      	ldr	r0, [r7, #4]
    c7d0:	4798      	blx	r3
		func = func->next;
    c7d2:	687b      	ldr	r3, [r7, #4]
    c7d4:	681b      	ldr	r3, [r3, #0]
    c7d6:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c7d8:	687b      	ldr	r3, [r7, #4]
    c7da:	2b00      	cmp	r3, #0
    c7dc:	d1f3      	bne.n	c7c6 <usbdc_unconfig+0xe>
	}
}
    c7de:	bf00      	nop
    c7e0:	3708      	adds	r7, #8
    c7e2:	46bd      	mov	sp, r7
    c7e4:	bd80      	pop	{r7, pc}
    c7e6:	bf00      	nop
    c7e8:	20000f44 	.word	0x20000f44

0000c7ec <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    c7ec:	b580      	push	{r7, lr}
    c7ee:	b088      	sub	sp, #32
    c7f0:	af00      	add	r7, sp, #0
    c7f2:	4603      	mov	r3, r0
    c7f4:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    c7f6:	2300      	movs	r3, #0
    c7f8:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    c7fa:	23ff      	movs	r3, #255	; 0xff
    c7fc:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    c7fe:	79fb      	ldrb	r3, [r7, #7]
    c800:	2b00      	cmp	r3, #0
    c802:	d103      	bne.n	c80c <usbdc_set_config+0x20>
		usbdc_unconfig();
    c804:	4b2e      	ldr	r3, [pc, #184]	; (c8c0 <usbdc_set_config+0xd4>)
    c806:	4798      	blx	r3
		return true;
    c808:	2301      	movs	r3, #1
    c80a:	e055      	b.n	c8b8 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c80c:	69bb      	ldr	r3, [r7, #24]
    c80e:	2b00      	cmp	r3, #0
    c810:	d10a      	bne.n	c828 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c812:	4b2c      	ldr	r3, [pc, #176]	; (c8c4 <usbdc_set_config+0xd8>)
    c814:	681b      	ldr	r3, [r3, #0]
    c816:	6818      	ldr	r0, [r3, #0]
    c818:	4b2a      	ldr	r3, [pc, #168]	; (c8c4 <usbdc_set_config+0xd8>)
    c81a:	681b      	ldr	r3, [r3, #0]
    c81c:	685b      	ldr	r3, [r3, #4]
    c81e:	79fa      	ldrb	r2, [r7, #7]
    c820:	4619      	mov	r1, r3
    c822:	4b29      	ldr	r3, [pc, #164]	; (c8c8 <usbdc_set_config+0xdc>)
    c824:	4798      	blx	r3
    c826:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    c828:	69bb      	ldr	r3, [r7, #24]
    c82a:	2b00      	cmp	r3, #0
    c82c:	d101      	bne.n	c832 <usbdc_set_config+0x46>
		return false;
    c82e:	2300      	movs	r3, #0
    c830:	e042      	b.n	c8b8 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    c832:	69b8      	ldr	r0, [r7, #24]
    c834:	4b25      	ldr	r3, [pc, #148]	; (c8cc <usbdc_set_config+0xe0>)
    c836:	4798      	blx	r3
    c838:	4603      	mov	r3, r0
    c83a:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    c83c:	8abb      	ldrh	r3, [r7, #20]
    c83e:	69ba      	ldr	r2, [r7, #24]
    c840:	4413      	add	r3, r2
    c842:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c844:	693b      	ldr	r3, [r7, #16]
    c846:	2204      	movs	r2, #4
    c848:	4619      	mov	r1, r3
    c84a:	69b8      	ldr	r0, [r7, #24]
    c84c:	4b20      	ldr	r3, [pc, #128]	; (c8d0 <usbdc_set_config+0xe4>)
    c84e:	4798      	blx	r3
    c850:	4603      	mov	r3, r0
    c852:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    c854:	e02c      	b.n	c8b0 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c856:	68fb      	ldr	r3, [r7, #12]
    c858:	3302      	adds	r3, #2
    c85a:	781b      	ldrb	r3, [r3, #0]
    c85c:	7dfa      	ldrb	r2, [r7, #23]
    c85e:	429a      	cmp	r2, r3
    c860:	d018      	beq.n	c894 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    c862:	68fb      	ldr	r3, [r7, #12]
    c864:	789b      	ldrb	r3, [r3, #2]
    c866:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c868:	4b16      	ldr	r3, [pc, #88]	; (c8c4 <usbdc_set_config+0xd8>)
    c86a:	691b      	ldr	r3, [r3, #16]
    c86c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c86e:	e00c      	b.n	c88a <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c870:	69fb      	ldr	r3, [r7, #28]
    c872:	685b      	ldr	r3, [r3, #4]
    c874:	f107 020c 	add.w	r2, r7, #12
    c878:	2100      	movs	r1, #0
    c87a:	69f8      	ldr	r0, [r7, #28]
    c87c:	4798      	blx	r3
    c87e:	4603      	mov	r3, r0
    c880:	2b00      	cmp	r3, #0
    c882:	d006      	beq.n	c892 <usbdc_set_config+0xa6>
					func = func->next;
    c884:	69fb      	ldr	r3, [r7, #28]
    c886:	681b      	ldr	r3, [r3, #0]
    c888:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c88a:	69fb      	ldr	r3, [r7, #28]
    c88c:	2b00      	cmp	r3, #0
    c88e:	d1ef      	bne.n	c870 <usbdc_set_config+0x84>
    c890:	e000      	b.n	c894 <usbdc_set_config+0xa8>
				} else {
					break;
    c892:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    c894:	68fb      	ldr	r3, [r7, #12]
    c896:	4618      	mov	r0, r3
    c898:	4b0e      	ldr	r3, [pc, #56]	; (c8d4 <usbdc_set_config+0xe8>)
    c89a:	4798      	blx	r3
    c89c:	4603      	mov	r3, r0
    c89e:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c8a0:	68fb      	ldr	r3, [r7, #12]
    c8a2:	6939      	ldr	r1, [r7, #16]
    c8a4:	2204      	movs	r2, #4
    c8a6:	4618      	mov	r0, r3
    c8a8:	4b09      	ldr	r3, [pc, #36]	; (c8d0 <usbdc_set_config+0xe4>)
    c8aa:	4798      	blx	r3
    c8ac:	4603      	mov	r3, r0
    c8ae:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    c8b0:	68fb      	ldr	r3, [r7, #12]
    c8b2:	2b00      	cmp	r3, #0
    c8b4:	d1cf      	bne.n	c856 <usbdc_set_config+0x6a>
	}
	return true;
    c8b6:	2301      	movs	r3, #1
}
    c8b8:	4618      	mov	r0, r3
    c8ba:	3720      	adds	r7, #32
    c8bc:	46bd      	mov	sp, r7
    c8be:	bd80      	pop	{r7, pc}
    c8c0:	0000c7b9 	.word	0x0000c7b9
    c8c4:	20000f44 	.word	0x20000f44
    c8c8:	0000d15d 	.word	0x0000d15d
    c8cc:	0000c309 	.word	0x0000c309
    c8d0:	0000d09d 	.word	0x0000d09d
    c8d4:	0000c2e5 	.word	0x0000c2e5

0000c8d8 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    c8d8:	b580      	push	{r7, lr}
    c8da:	b082      	sub	sp, #8
    c8dc:	af00      	add	r7, sp, #0
    c8de:	4603      	mov	r3, r0
    c8e0:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    c8e2:	79fb      	ldrb	r3, [r7, #7]
    c8e4:	4618      	mov	r0, r3
    c8e6:	4b03      	ldr	r3, [pc, #12]	; (c8f4 <usbdc_set_address+0x1c>)
    c8e8:	4798      	blx	r3
}
    c8ea:	bf00      	nop
    c8ec:	3708      	adds	r7, #8
    c8ee:	46bd      	mov	sp, r7
    c8f0:	bd80      	pop	{r7, pc}
    c8f2:	bf00      	nop
    c8f4:	00003349 	.word	0x00003349

0000c8f8 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    c8f8:	b590      	push	{r4, r7, lr}
    c8fa:	b087      	sub	sp, #28
    c8fc:	af00      	add	r7, sp, #0
    c8fe:	4603      	mov	r3, r0
    c900:	460a      	mov	r2, r1
    c902:	80fb      	strh	r3, [r7, #6]
    c904:	4613      	mov	r3, r2
    c906:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    c908:	2300      	movs	r3, #0
    c90a:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    c90c:	693b      	ldr	r3, [r7, #16]
    c90e:	2b00      	cmp	r3, #0
    c910:	d10b      	bne.n	c92a <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c912:	4b43      	ldr	r3, [pc, #268]	; (ca20 <usbdc_set_interface+0x128>)
    c914:	681b      	ldr	r3, [r3, #0]
    c916:	6818      	ldr	r0, [r3, #0]
    c918:	4b41      	ldr	r3, [pc, #260]	; (ca20 <usbdc_set_interface+0x128>)
    c91a:	681b      	ldr	r3, [r3, #0]
    c91c:	6859      	ldr	r1, [r3, #4]
    c91e:	4b40      	ldr	r3, [pc, #256]	; (ca20 <usbdc_set_interface+0x128>)
    c920:	7edb      	ldrb	r3, [r3, #27]
    c922:	461a      	mov	r2, r3
    c924:	4b3f      	ldr	r3, [pc, #252]	; (ca24 <usbdc_set_interface+0x12c>)
    c926:	4798      	blx	r3
    c928:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    c92a:	693b      	ldr	r3, [r7, #16]
    c92c:	2b00      	cmp	r3, #0
    c92e:	d101      	bne.n	c934 <usbdc_set_interface+0x3c>
		return false;
    c930:	2300      	movs	r3, #0
    c932:	e071      	b.n	ca18 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    c934:	693b      	ldr	r3, [r7, #16]
    c936:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c938:	6938      	ldr	r0, [r7, #16]
    c93a:	4b3b      	ldr	r3, [pc, #236]	; (ca28 <usbdc_set_interface+0x130>)
    c93c:	4798      	blx	r3
    c93e:	4603      	mov	r3, r0
    c940:	461a      	mov	r2, r3
    c942:	693b      	ldr	r3, [r7, #16]
    c944:	4413      	add	r3, r2
    c946:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c948:	68bb      	ldr	r3, [r7, #8]
    c94a:	68f9      	ldr	r1, [r7, #12]
    c94c:	2204      	movs	r2, #4
    c94e:	4618      	mov	r0, r3
    c950:	4b36      	ldr	r3, [pc, #216]	; (ca2c <usbdc_set_interface+0x134>)
    c952:	4798      	blx	r3
    c954:	6138      	str	r0, [r7, #16]
    c956:	693b      	ldr	r3, [r7, #16]
    c958:	2b00      	cmp	r3, #0
    c95a:	d113      	bne.n	c984 <usbdc_set_interface+0x8c>
		return false;
    c95c:	2300      	movs	r3, #0
    c95e:	e05b      	b.n	ca18 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    c960:	68bb      	ldr	r3, [r7, #8]
    c962:	4618      	mov	r0, r3
    c964:	4b32      	ldr	r3, [pc, #200]	; (ca30 <usbdc_set_interface+0x138>)
    c966:	4798      	blx	r3
    c968:	4603      	mov	r3, r0
    c96a:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c96c:	68bb      	ldr	r3, [r7, #8]
    c96e:	68f9      	ldr	r1, [r7, #12]
    c970:	2204      	movs	r2, #4
    c972:	4618      	mov	r0, r3
    c974:	4b2d      	ldr	r3, [pc, #180]	; (ca2c <usbdc_set_interface+0x134>)
    c976:	4798      	blx	r3
    c978:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    c97a:	693b      	ldr	r3, [r7, #16]
    c97c:	2b00      	cmp	r3, #0
    c97e:	d101      	bne.n	c984 <usbdc_set_interface+0x8c>
			return false;
    c980:	2300      	movs	r3, #0
    c982:	e049      	b.n	ca18 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c984:	693b      	ldr	r3, [r7, #16]
    c986:	3302      	adds	r3, #2
    c988:	781b      	ldrb	r3, [r3, #0]
    c98a:	b29b      	uxth	r3, r3
    c98c:	88ba      	ldrh	r2, [r7, #4]
    c98e:	429a      	cmp	r2, r3
    c990:	d1e6      	bne.n	c960 <usbdc_set_interface+0x68>
    c992:	693b      	ldr	r3, [r7, #16]
    c994:	3303      	adds	r3, #3
    c996:	781b      	ldrb	r3, [r3, #0]
    c998:	b29b      	uxth	r3, r3
    c99a:	88fa      	ldrh	r2, [r7, #6]
    c99c:	429a      	cmp	r2, r3
    c99e:	d1df      	bne.n	c960 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    c9a0:	693b      	ldr	r3, [r7, #16]
    c9a2:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c9a4:	4b1e      	ldr	r3, [pc, #120]	; (ca20 <usbdc_set_interface+0x128>)
    c9a6:	691b      	ldr	r3, [r3, #16]
    c9a8:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    c9aa:	e031      	b.n	ca10 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c9ac:	697b      	ldr	r3, [r7, #20]
    c9ae:	685b      	ldr	r3, [r3, #4]
    c9b0:	f107 0208 	add.w	r2, r7, #8
    c9b4:	2101      	movs	r1, #1
    c9b6:	6978      	ldr	r0, [r7, #20]
    c9b8:	4798      	blx	r3
    c9ba:	4603      	mov	r3, r0
    c9bc:	2b00      	cmp	r3, #0
    c9be:	d003      	beq.n	c9c8 <usbdc_set_interface+0xd0>
			func = func->next;
    c9c0:	697b      	ldr	r3, [r7, #20]
    c9c2:	681b      	ldr	r3, [r3, #0]
    c9c4:	617b      	str	r3, [r7, #20]
    c9c6:	e023      	b.n	ca10 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c9c8:	697b      	ldr	r3, [r7, #20]
    c9ca:	685b      	ldr	r3, [r3, #4]
    c9cc:	f107 0208 	add.w	r2, r7, #8
    c9d0:	2100      	movs	r1, #0
    c9d2:	6978      	ldr	r0, [r7, #20]
    c9d4:	4798      	blx	r3
    c9d6:	4603      	mov	r3, r0
    c9d8:	2b00      	cmp	r3, #0
    c9da:	d117      	bne.n	ca0c <usbdc_set_interface+0x114>
			if (alt_set) {
    c9dc:	88fb      	ldrh	r3, [r7, #6]
    c9de:	2b00      	cmp	r3, #0
    c9e0:	d00c      	beq.n	c9fc <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c9e2:	4b0f      	ldr	r3, [pc, #60]	; (ca20 <usbdc_set_interface+0x128>)
    c9e4:	7f5b      	ldrb	r3, [r3, #29]
    c9e6:	b25a      	sxtb	r2, r3
    c9e8:	88bb      	ldrh	r3, [r7, #4]
    c9ea:	2101      	movs	r1, #1
    c9ec:	fa01 f303 	lsl.w	r3, r1, r3
    c9f0:	b25b      	sxtb	r3, r3
    c9f2:	4313      	orrs	r3, r2
    c9f4:	b25b      	sxtb	r3, r3
    c9f6:	b2da      	uxtb	r2, r3
    c9f8:	4b09      	ldr	r3, [pc, #36]	; (ca20 <usbdc_set_interface+0x128>)
    c9fa:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    c9fc:	2300      	movs	r3, #0
    c9fe:	2200      	movs	r2, #0
    ca00:	2100      	movs	r1, #0
    ca02:	2000      	movs	r0, #0
    ca04:	4c0b      	ldr	r4, [pc, #44]	; (ca34 <usbdc_set_interface+0x13c>)
    ca06:	47a0      	blx	r4
			return true;
    ca08:	2301      	movs	r3, #1
    ca0a:	e005      	b.n	ca18 <usbdc_set_interface+0x120>
		} else {
			return false;
    ca0c:	2300      	movs	r3, #0
    ca0e:	e003      	b.n	ca18 <usbdc_set_interface+0x120>
	while (NULL != func) {
    ca10:	697b      	ldr	r3, [r7, #20]
    ca12:	2b00      	cmp	r3, #0
    ca14:	d1ca      	bne.n	c9ac <usbdc_set_interface+0xb4>
		}
	}

	return false;
    ca16:	2300      	movs	r3, #0
}
    ca18:	4618      	mov	r0, r3
    ca1a:	371c      	adds	r7, #28
    ca1c:	46bd      	mov	sp, r7
    ca1e:	bd90      	pop	{r4, r7, pc}
    ca20:	20000f44 	.word	0x20000f44
    ca24:	0000d15d 	.word	0x0000d15d
    ca28:	0000c309 	.word	0x0000c309
    ca2c:	0000d09d 	.word	0x0000d09d
    ca30:	0000c2e5 	.word	0x0000c2e5
    ca34:	0000ce0d 	.word	0x0000ce0d

0000ca38 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    ca38:	b590      	push	{r4, r7, lr}
    ca3a:	b083      	sub	sp, #12
    ca3c:	af00      	add	r7, sp, #0
    ca3e:	4603      	mov	r3, r0
    ca40:	6039      	str	r1, [r7, #0]
    ca42:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    ca44:	683b      	ldr	r3, [r7, #0]
    ca46:	785b      	ldrb	r3, [r3, #1]
    ca48:	3b01      	subs	r3, #1
    ca4a:	2b0a      	cmp	r3, #10
    ca4c:	d85b      	bhi.n	cb06 <usbdc_set_req+0xce>
    ca4e:	a201      	add	r2, pc, #4	; (adr r2, ca54 <usbdc_set_req+0x1c>)
    ca50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ca54:	0000cad3 	.word	0x0000cad3
    ca58:	0000cb07 	.word	0x0000cb07
    ca5c:	0000cae1 	.word	0x0000cae1
    ca60:	0000cb07 	.word	0x0000cb07
    ca64:	0000ca81 	.word	0x0000ca81
    ca68:	0000cb07 	.word	0x0000cb07
    ca6c:	0000cb07 	.word	0x0000cb07
    ca70:	0000cb07 	.word	0x0000cb07
    ca74:	0000ca9b 	.word	0x0000ca9b
    ca78:	0000cb07 	.word	0x0000cb07
    ca7c:	0000caef 	.word	0x0000caef
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    ca80:	79f8      	ldrb	r0, [r7, #7]
    ca82:	2301      	movs	r3, #1
    ca84:	2200      	movs	r2, #0
    ca86:	2100      	movs	r1, #0
    ca88:	4c21      	ldr	r4, [pc, #132]	; (cb10 <usbdc_set_req+0xd8>)
    ca8a:	47a0      	blx	r4
    ca8c:	4603      	mov	r3, r0
    ca8e:	2b00      	cmp	r3, #0
    ca90:	bf0c      	ite	eq
    ca92:	2301      	moveq	r3, #1
    ca94:	2300      	movne	r3, #0
    ca96:	b2db      	uxtb	r3, r3
    ca98:	e036      	b.n	cb08 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    ca9a:	683b      	ldr	r3, [r7, #0]
    ca9c:	885b      	ldrh	r3, [r3, #2]
    ca9e:	b29b      	uxth	r3, r3
    caa0:	b2db      	uxtb	r3, r3
    caa2:	4618      	mov	r0, r3
    caa4:	4b1b      	ldr	r3, [pc, #108]	; (cb14 <usbdc_set_req+0xdc>)
    caa6:	4798      	blx	r3
    caa8:	4603      	mov	r3, r0
    caaa:	f083 0301 	eor.w	r3, r3, #1
    caae:	b2db      	uxtb	r3, r3
    cab0:	2b00      	cmp	r3, #0
    cab2:	d001      	beq.n	cab8 <usbdc_set_req+0x80>
			return false;
    cab4:	2300      	movs	r3, #0
    cab6:	e027      	b.n	cb08 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cab8:	79f8      	ldrb	r0, [r7, #7]
    caba:	2301      	movs	r3, #1
    cabc:	2200      	movs	r2, #0
    cabe:	2100      	movs	r1, #0
    cac0:	4c13      	ldr	r4, [pc, #76]	; (cb10 <usbdc_set_req+0xd8>)
    cac2:	47a0      	blx	r4
    cac4:	4603      	mov	r3, r0
    cac6:	2b00      	cmp	r3, #0
    cac8:	bf0c      	ite	eq
    caca:	2301      	moveq	r3, #1
    cacc:	2300      	movne	r3, #0
    cace:	b2db      	uxtb	r3, r3
    cad0:	e01a      	b.n	cb08 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    cad2:	79fb      	ldrb	r3, [r7, #7]
    cad4:	6839      	ldr	r1, [r7, #0]
    cad6:	4618      	mov	r0, r3
    cad8:	4b0f      	ldr	r3, [pc, #60]	; (cb18 <usbdc_set_req+0xe0>)
    cada:	4798      	blx	r3
    cadc:	4603      	mov	r3, r0
    cade:	e013      	b.n	cb08 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    cae0:	79fb      	ldrb	r3, [r7, #7]
    cae2:	6839      	ldr	r1, [r7, #0]
    cae4:	4618      	mov	r0, r3
    cae6:	4b0d      	ldr	r3, [pc, #52]	; (cb1c <usbdc_set_req+0xe4>)
    cae8:	4798      	blx	r3
    caea:	4603      	mov	r3, r0
    caec:	e00c      	b.n	cb08 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    caee:	683b      	ldr	r3, [r7, #0]
    caf0:	885b      	ldrh	r3, [r3, #2]
    caf2:	b29a      	uxth	r2, r3
    caf4:	683b      	ldr	r3, [r7, #0]
    caf6:	889b      	ldrh	r3, [r3, #4]
    caf8:	b29b      	uxth	r3, r3
    cafa:	4619      	mov	r1, r3
    cafc:	4610      	mov	r0, r2
    cafe:	4b08      	ldr	r3, [pc, #32]	; (cb20 <usbdc_set_req+0xe8>)
    cb00:	4798      	blx	r3
    cb02:	4603      	mov	r3, r0
    cb04:	e000      	b.n	cb08 <usbdc_set_req+0xd0>
	default:
		return false;
    cb06:	2300      	movs	r3, #0
	}
}
    cb08:	4618      	mov	r0, r3
    cb0a:	370c      	adds	r7, #12
    cb0c:	46bd      	mov	sp, r7
    cb0e:	bd90      	pop	{r4, r7, pc}
    cb10:	0000ce0d 	.word	0x0000ce0d
    cb14:	0000c7ed 	.word	0x0000c7ed
    cb18:	0000c709 	.word	0x0000c709
    cb1c:	0000c761 	.word	0x0000c761
    cb20:	0000c8f9 	.word	0x0000c8f9

0000cb24 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    cb24:	b580      	push	{r7, lr}
    cb26:	b082      	sub	sp, #8
    cb28:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    cb2a:	4b0a      	ldr	r3, [pc, #40]	; (cb54 <usbdc_sof_notify+0x30>)
    cb2c:	685b      	ldr	r3, [r3, #4]
    cb2e:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    cb30:	e009      	b.n	cb46 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    cb32:	687b      	ldr	r3, [r7, #4]
    cb34:	685b      	ldr	r3, [r3, #4]
    cb36:	2b00      	cmp	r3, #0
    cb38:	d002      	beq.n	cb40 <usbdc_sof_notify+0x1c>
			sof->cb();
    cb3a:	687b      	ldr	r3, [r7, #4]
    cb3c:	685b      	ldr	r3, [r3, #4]
    cb3e:	4798      	blx	r3
		}
		sof = sof->next;
    cb40:	687b      	ldr	r3, [r7, #4]
    cb42:	681b      	ldr	r3, [r3, #0]
    cb44:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    cb46:	687b      	ldr	r3, [r7, #4]
    cb48:	2b00      	cmp	r3, #0
    cb4a:	d1f2      	bne.n	cb32 <usbdc_sof_notify+0xe>
	}
}
    cb4c:	bf00      	nop
    cb4e:	3708      	adds	r7, #8
    cb50:	46bd      	mov	sp, r7
    cb52:	bd80      	pop	{r7, pc}
    cb54:	20000f44 	.word	0x20000f44

0000cb58 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    cb58:	b580      	push	{r7, lr}
    cb5a:	b084      	sub	sp, #16
    cb5c:	af00      	add	r7, sp, #0
    cb5e:	4603      	mov	r3, r0
    cb60:	6039      	str	r1, [r7, #0]
    cb62:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    cb64:	4b0b      	ldr	r3, [pc, #44]	; (cb94 <usbdc_change_notify+0x3c>)
    cb66:	68db      	ldr	r3, [r3, #12]
    cb68:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    cb6a:	e00c      	b.n	cb86 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    cb6c:	68fb      	ldr	r3, [r7, #12]
    cb6e:	685b      	ldr	r3, [r3, #4]
    cb70:	2b00      	cmp	r3, #0
    cb72:	d005      	beq.n	cb80 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    cb74:	68fb      	ldr	r3, [r7, #12]
    cb76:	685b      	ldr	r3, [r3, #4]
    cb78:	79fa      	ldrb	r2, [r7, #7]
    cb7a:	6839      	ldr	r1, [r7, #0]
    cb7c:	4610      	mov	r0, r2
    cb7e:	4798      	blx	r3
		}
		cg = cg->next;
    cb80:	68fb      	ldr	r3, [r7, #12]
    cb82:	681b      	ldr	r3, [r3, #0]
    cb84:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    cb86:	68fb      	ldr	r3, [r7, #12]
    cb88:	2b00      	cmp	r3, #0
    cb8a:	d1ef      	bne.n	cb6c <usbdc_change_notify+0x14>
	}
}
    cb8c:	bf00      	nop
    cb8e:	3710      	adds	r7, #16
    cb90:	46bd      	mov	sp, r7
    cb92:	bd80      	pop	{r7, pc}
    cb94:	20000f44 	.word	0x20000f44

0000cb98 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cb98:	b580      	push	{r7, lr}
    cb9a:	b084      	sub	sp, #16
    cb9c:	af00      	add	r7, sp, #0
    cb9e:	4603      	mov	r3, r0
    cba0:	6039      	str	r1, [r7, #0]
    cba2:	71fb      	strb	r3, [r7, #7]
    cba4:	4613      	mov	r3, r2
    cba6:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    cba8:	4b12      	ldr	r3, [pc, #72]	; (cbf4 <usbdc_request_handler+0x5c>)
    cbaa:	689b      	ldr	r3, [r3, #8]
    cbac:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    cbae:	e019      	b.n	cbe4 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    cbb0:	68fb      	ldr	r3, [r7, #12]
    cbb2:	685b      	ldr	r3, [r3, #4]
    cbb4:	2b00      	cmp	r3, #0
    cbb6:	d012      	beq.n	cbde <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    cbb8:	68fb      	ldr	r3, [r7, #12]
    cbba:	685b      	ldr	r3, [r3, #4]
    cbbc:	79ba      	ldrb	r2, [r7, #6]
    cbbe:	79f8      	ldrb	r0, [r7, #7]
    cbc0:	6839      	ldr	r1, [r7, #0]
    cbc2:	4798      	blx	r3
    cbc4:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    cbc6:	68bb      	ldr	r3, [r7, #8]
    cbc8:	2b00      	cmp	r3, #0
    cbca:	d101      	bne.n	cbd0 <usbdc_request_handler+0x38>
				return true;
    cbcc:	2301      	movs	r3, #1
    cbce:	e00d      	b.n	cbec <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    cbd0:	68bb      	ldr	r3, [r7, #8]
    cbd2:	f113 0f0a 	cmn.w	r3, #10
    cbd6:	d002      	beq.n	cbde <usbdc_request_handler+0x46>
				return -1;
    cbd8:	f04f 33ff 	mov.w	r3, #4294967295
    cbdc:	e006      	b.n	cbec <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    cbde:	68fb      	ldr	r3, [r7, #12]
    cbe0:	681b      	ldr	r3, [r3, #0]
    cbe2:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    cbe4:	68fb      	ldr	r3, [r7, #12]
    cbe6:	2b00      	cmp	r3, #0
    cbe8:	d1e2      	bne.n	cbb0 <usbdc_request_handler+0x18>
	}
	return false;
    cbea:	2300      	movs	r3, #0
}
    cbec:	4618      	mov	r0, r3
    cbee:	3710      	adds	r7, #16
    cbf0:	46bd      	mov	sp, r7
    cbf2:	bd80      	pop	{r7, pc}
    cbf4:	20000f44 	.word	0x20000f44

0000cbf8 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    cbf8:	b580      	push	{r7, lr}
    cbfa:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    cbfc:	4b01      	ldr	r3, [pc, #4]	; (cc04 <usbd_sof_cb+0xc>)
    cbfe:	4798      	blx	r3
}
    cc00:	bf00      	nop
    cc02:	bd80      	pop	{r7, pc}
    cc04:	0000cb25 	.word	0x0000cb25

0000cc08 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    cc08:	b580      	push	{r7, lr}
    cc0a:	b082      	sub	sp, #8
    cc0c:	af00      	add	r7, sp, #0
    cc0e:	4603      	mov	r3, r0
    cc10:	6039      	str	r1, [r7, #0]
    cc12:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    cc14:	79fb      	ldrb	r3, [r7, #7]
    cc16:	2200      	movs	r2, #0
    cc18:	6839      	ldr	r1, [r7, #0]
    cc1a:	4618      	mov	r0, r3
    cc1c:	4b14      	ldr	r3, [pc, #80]	; (cc70 <usbdc_cb_ctl_req+0x68>)
    cc1e:	4798      	blx	r3
    cc20:	4603      	mov	r3, r0
    cc22:	f1b3 3fff 	cmp.w	r3, #4294967295
    cc26:	d00b      	beq.n	cc40 <usbdc_cb_ctl_req+0x38>
    cc28:	2b01      	cmp	r3, #1
    cc2a:	d007      	beq.n	cc3c <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    cc2c:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    cc2e:	683b      	ldr	r3, [r7, #0]
    cc30:	781b      	ldrb	r3, [r3, #0]
    cc32:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    cc36:	2b00      	cmp	r3, #0
    cc38:	d007      	beq.n	cc4a <usbdc_cb_ctl_req+0x42>
    cc3a:	e003      	b.n	cc44 <usbdc_cb_ctl_req+0x3c>
		return true;
    cc3c:	2301      	movs	r3, #1
    cc3e:	e013      	b.n	cc68 <usbdc_cb_ctl_req+0x60>
		return false;
    cc40:	2300      	movs	r3, #0
    cc42:	e011      	b.n	cc68 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    cc44:	2b80      	cmp	r3, #128	; 0x80
    cc46:	d007      	beq.n	cc58 <usbdc_cb_ctl_req+0x50>
    cc48:	e00d      	b.n	cc66 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    cc4a:	79fb      	ldrb	r3, [r7, #7]
    cc4c:	6839      	ldr	r1, [r7, #0]
    cc4e:	4618      	mov	r0, r3
    cc50:	4b08      	ldr	r3, [pc, #32]	; (cc74 <usbdc_cb_ctl_req+0x6c>)
    cc52:	4798      	blx	r3
    cc54:	4603      	mov	r3, r0
    cc56:	e007      	b.n	cc68 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    cc58:	79fb      	ldrb	r3, [r7, #7]
    cc5a:	6839      	ldr	r1, [r7, #0]
    cc5c:	4618      	mov	r0, r3
    cc5e:	4b06      	ldr	r3, [pc, #24]	; (cc78 <usbdc_cb_ctl_req+0x70>)
    cc60:	4798      	blx	r3
    cc62:	4603      	mov	r3, r0
    cc64:	e000      	b.n	cc68 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    cc66:	2300      	movs	r3, #0
	}
}
    cc68:	4618      	mov	r0, r3
    cc6a:	3708      	adds	r7, #8
    cc6c:	46bd      	mov	sp, r7
    cc6e:	bd80      	pop	{r7, pc}
    cc70:	0000cb99 	.word	0x0000cb99
    cc74:	0000ca39 	.word	0x0000ca39
    cc78:	0000c661 	.word	0x0000c661

0000cc7c <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    cc7c:	b580      	push	{r7, lr}
    cc7e:	b082      	sub	sp, #8
    cc80:	af00      	add	r7, sp, #0
    cc82:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    cc84:	687b      	ldr	r3, [r7, #4]
    cc86:	781b      	ldrb	r3, [r3, #0]
    cc88:	2b00      	cmp	r3, #0
    cc8a:	d135      	bne.n	ccf8 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    cc8c:	687b      	ldr	r3, [r7, #4]
    cc8e:	785b      	ldrb	r3, [r3, #1]
    cc90:	2b05      	cmp	r3, #5
    cc92:	d019      	beq.n	ccc8 <usbdc_ctrl_status_end+0x4c>
    cc94:	2b09      	cmp	r3, #9
    cc96:	d000      	beq.n	cc9a <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    cc98:	e02f      	b.n	ccfa <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    cc9a:	687b      	ldr	r3, [r7, #4]
    cc9c:	885b      	ldrh	r3, [r3, #2]
    cc9e:	b29b      	uxth	r3, r3
    cca0:	b2da      	uxtb	r2, r3
    cca2:	4b17      	ldr	r3, [pc, #92]	; (cd00 <usbdc_ctrl_status_end+0x84>)
    cca4:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    cca6:	687b      	ldr	r3, [r7, #4]
    cca8:	885b      	ldrh	r3, [r3, #2]
    ccaa:	b29b      	uxth	r3, r3
    ccac:	2b00      	cmp	r3, #0
    ccae:	d001      	beq.n	ccb4 <usbdc_ctrl_status_end+0x38>
    ccb0:	2204      	movs	r2, #4
    ccb2:	e000      	b.n	ccb6 <usbdc_ctrl_status_end+0x3a>
    ccb4:	2203      	movs	r2, #3
    ccb6:	4b12      	ldr	r3, [pc, #72]	; (cd00 <usbdc_ctrl_status_end+0x84>)
    ccb8:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    ccba:	4b11      	ldr	r3, [pc, #68]	; (cd00 <usbdc_ctrl_status_end+0x84>)
    ccbc:	7e9b      	ldrb	r3, [r3, #26]
    ccbe:	4619      	mov	r1, r3
    ccc0:	2001      	movs	r0, #1
    ccc2:	4b10      	ldr	r3, [pc, #64]	; (cd04 <usbdc_ctrl_status_end+0x88>)
    ccc4:	4798      	blx	r3
		break;
    ccc6:	e018      	b.n	ccfa <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    ccc8:	687b      	ldr	r3, [r7, #4]
    ccca:	885b      	ldrh	r3, [r3, #2]
    cccc:	b29b      	uxth	r3, r3
    ccce:	b2db      	uxtb	r3, r3
    ccd0:	4618      	mov	r0, r3
    ccd2:	4b0d      	ldr	r3, [pc, #52]	; (cd08 <usbdc_ctrl_status_end+0x8c>)
    ccd4:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    ccd6:	687b      	ldr	r3, [r7, #4]
    ccd8:	885b      	ldrh	r3, [r3, #2]
    ccda:	b29b      	uxth	r3, r3
    ccdc:	2b00      	cmp	r3, #0
    ccde:	d001      	beq.n	cce4 <usbdc_ctrl_status_end+0x68>
    cce0:	2203      	movs	r2, #3
    cce2:	e000      	b.n	cce6 <usbdc_ctrl_status_end+0x6a>
    cce4:	2202      	movs	r2, #2
    cce6:	4b06      	ldr	r3, [pc, #24]	; (cd00 <usbdc_ctrl_status_end+0x84>)
    cce8:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    ccea:	4b05      	ldr	r3, [pc, #20]	; (cd00 <usbdc_ctrl_status_end+0x84>)
    ccec:	7e9b      	ldrb	r3, [r3, #26]
    ccee:	4619      	mov	r1, r3
    ccf0:	2001      	movs	r0, #1
    ccf2:	4b04      	ldr	r3, [pc, #16]	; (cd04 <usbdc_ctrl_status_end+0x88>)
    ccf4:	4798      	blx	r3
		break;
    ccf6:	e000      	b.n	ccfa <usbdc_ctrl_status_end+0x7e>
		return;
    ccf8:	bf00      	nop
	}
}
    ccfa:	3708      	adds	r7, #8
    ccfc:	46bd      	mov	sp, r7
    ccfe:	bd80      	pop	{r7, pc}
    cd00:	20000f44 	.word	0x20000f44
    cd04:	0000cb59 	.word	0x0000cb59
    cd08:	0000c8d9 	.word	0x0000c8d9

0000cd0c <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    cd0c:	b580      	push	{r7, lr}
    cd0e:	b082      	sub	sp, #8
    cd10:	af00      	add	r7, sp, #0
    cd12:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    cd14:	2201      	movs	r2, #1
    cd16:	6879      	ldr	r1, [r7, #4]
    cd18:	2000      	movs	r0, #0
    cd1a:	4b03      	ldr	r3, [pc, #12]	; (cd28 <usbdc_ctrl_data_end+0x1c>)
    cd1c:	4798      	blx	r3
	return false;
    cd1e:	2300      	movs	r3, #0
}
    cd20:	4618      	mov	r0, r3
    cd22:	3708      	adds	r7, #8
    cd24:	46bd      	mov	sp, r7
    cd26:	bd80      	pop	{r7, pc}
    cd28:	0000cb99 	.word	0x0000cb99

0000cd2c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    cd2c:	b580      	push	{r7, lr}
    cd2e:	b082      	sub	sp, #8
    cd30:	af00      	add	r7, sp, #0
    cd32:	4603      	mov	r3, r0
    cd34:	603a      	str	r2, [r7, #0]
    cd36:	71fb      	strb	r3, [r7, #7]
    cd38:	460b      	mov	r3, r1
    cd3a:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    cd3c:	79bb      	ldrb	r3, [r7, #6]
    cd3e:	2b00      	cmp	r3, #0
    cd40:	d002      	beq.n	cd48 <usbdc_cb_ctl_done+0x1c>
    cd42:	2b01      	cmp	r3, #1
    cd44:	d004      	beq.n	cd50 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    cd46:	e008      	b.n	cd5a <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    cd48:	6838      	ldr	r0, [r7, #0]
    cd4a:	4b06      	ldr	r3, [pc, #24]	; (cd64 <usbdc_cb_ctl_done+0x38>)
    cd4c:	4798      	blx	r3
		break;
    cd4e:	e004      	b.n	cd5a <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    cd50:	6838      	ldr	r0, [r7, #0]
    cd52:	4b05      	ldr	r3, [pc, #20]	; (cd68 <usbdc_cb_ctl_done+0x3c>)
    cd54:	4798      	blx	r3
    cd56:	4603      	mov	r3, r0
    cd58:	e000      	b.n	cd5c <usbdc_cb_ctl_done+0x30>
	}
	return false;
    cd5a:	2300      	movs	r3, #0
}
    cd5c:	4618      	mov	r0, r3
    cd5e:	3708      	adds	r7, #8
    cd60:	46bd      	mov	sp, r7
    cd62:	bd80      	pop	{r7, pc}
    cd64:	0000cc7d 	.word	0x0000cc7d
    cd68:	0000cd0d 	.word	0x0000cd0d

0000cd6c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    cd6c:	b580      	push	{r7, lr}
    cd6e:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    cd70:	4b10      	ldr	r3, [pc, #64]	; (cdb4 <usbdc_reset+0x48>)
    cd72:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    cd74:	4b10      	ldr	r3, [pc, #64]	; (cdb8 <usbdc_reset+0x4c>)
    cd76:	2202      	movs	r2, #2
    cd78:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    cd7a:	4b0f      	ldr	r3, [pc, #60]	; (cdb8 <usbdc_reset+0x4c>)
    cd7c:	2200      	movs	r2, #0
    cd7e:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    cd80:	4b0d      	ldr	r3, [pc, #52]	; (cdb8 <usbdc_reset+0x4c>)
    cd82:	2200      	movs	r2, #0
    cd84:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    cd86:	2000      	movs	r0, #0
    cd88:	4b0c      	ldr	r3, [pc, #48]	; (cdbc <usbdc_reset+0x50>)
    cd8a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    cd8c:	4b0a      	ldr	r3, [pc, #40]	; (cdb8 <usbdc_reset+0x4c>)
    cd8e:	7f1b      	ldrb	r3, [r3, #28]
    cd90:	4618      	mov	r0, r3
    cd92:	4b0b      	ldr	r3, [pc, #44]	; (cdc0 <usbdc_reset+0x54>)
    cd94:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    cd96:	4a0b      	ldr	r2, [pc, #44]	; (cdc4 <usbdc_reset+0x58>)
    cd98:	2100      	movs	r1, #0
    cd9a:	2000      	movs	r0, #0
    cd9c:	4b0a      	ldr	r3, [pc, #40]	; (cdc8 <usbdc_reset+0x5c>)
    cd9e:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    cda0:	4a0a      	ldr	r2, [pc, #40]	; (cdcc <usbdc_reset+0x60>)
    cda2:	2102      	movs	r1, #2
    cda4:	2000      	movs	r0, #0
    cda6:	4b08      	ldr	r3, [pc, #32]	; (cdc8 <usbdc_reset+0x5c>)
    cda8:	4798      	blx	r3
	usb_d_ep_enable(0);
    cdaa:	2000      	movs	r0, #0
    cdac:	4b08      	ldr	r3, [pc, #32]	; (cdd0 <usbdc_reset+0x64>)
    cdae:	4798      	blx	r3
}
    cdb0:	bf00      	nop
    cdb2:	bd80      	pop	{r7, pc}
    cdb4:	0000c7b9 	.word	0x0000c7b9
    cdb8:	20000f44 	.word	0x20000f44
    cdbc:	0000342d 	.word	0x0000342d
    cdc0:	00003369 	.word	0x00003369
    cdc4:	0000cc09 	.word	0x0000cc09
    cdc8:	00003781 	.word	0x00003781
    cdcc:	0000cd2d 	.word	0x0000cd2d
    cdd0:	0000347d 	.word	0x0000347d

0000cdd4 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    cdd4:	b580      	push	{r7, lr}
    cdd6:	b082      	sub	sp, #8
    cdd8:	af00      	add	r7, sp, #0
    cdda:	4603      	mov	r3, r0
    cddc:	6039      	str	r1, [r7, #0]
    cdde:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    cde0:	79fb      	ldrb	r3, [r7, #7]
    cde2:	2b00      	cmp	r3, #0
    cde4:	d002      	beq.n	cdec <usbd_event_cb+0x18>
    cde6:	2b01      	cmp	r3, #1
    cde8:	d005      	beq.n	cdf6 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    cdea:	e007      	b.n	cdfc <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    cdec:	6839      	ldr	r1, [r7, #0]
    cdee:	2000      	movs	r0, #0
    cdf0:	4b04      	ldr	r3, [pc, #16]	; (ce04 <usbd_event_cb+0x30>)
    cdf2:	4798      	blx	r3
		break;
    cdf4:	e002      	b.n	cdfc <usbd_event_cb+0x28>
		usbdc_reset();
    cdf6:	4b04      	ldr	r3, [pc, #16]	; (ce08 <usbd_event_cb+0x34>)
    cdf8:	4798      	blx	r3
		break;
    cdfa:	bf00      	nop
	}
}
    cdfc:	bf00      	nop
    cdfe:	3708      	adds	r7, #8
    ce00:	46bd      	mov	sp, r7
    ce02:	bd80      	pop	{r7, pc}
    ce04:	0000cb59 	.word	0x0000cb59
    ce08:	0000cd6d 	.word	0x0000cd6d

0000ce0c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    ce0c:	b580      	push	{r7, lr}
    ce0e:	b088      	sub	sp, #32
    ce10:	af00      	add	r7, sp, #0
    ce12:	60b9      	str	r1, [r7, #8]
    ce14:	607a      	str	r2, [r7, #4]
    ce16:	461a      	mov	r2, r3
    ce18:	4603      	mov	r3, r0
    ce1a:	73fb      	strb	r3, [r7, #15]
    ce1c:	4613      	mov	r3, r2
    ce1e:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    ce20:	68bb      	ldr	r3, [r7, #8]
    ce22:	617b      	str	r3, [r7, #20]
    ce24:	687b      	ldr	r3, [r7, #4]
    ce26:	61bb      	str	r3, [r7, #24]
    ce28:	7bfb      	ldrb	r3, [r7, #15]
    ce2a:	773b      	strb	r3, [r7, #28]
    ce2c:	7bbb      	ldrb	r3, [r7, #14]
    ce2e:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    ce30:	f107 0314 	add.w	r3, r7, #20
    ce34:	4618      	mov	r0, r3
    ce36:	4b03      	ldr	r3, [pc, #12]	; (ce44 <usbdc_xfer+0x38>)
    ce38:	4798      	blx	r3
    ce3a:	4603      	mov	r3, r0
}
    ce3c:	4618      	mov	r0, r3
    ce3e:	3720      	adds	r7, #32
    ce40:	46bd      	mov	sp, r7
    ce42:	bd80      	pop	{r7, pc}
    ce44:	000034ed 	.word	0x000034ed

0000ce48 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    ce48:	b580      	push	{r7, lr}
    ce4a:	b082      	sub	sp, #8
    ce4c:	af00      	add	r7, sp, #0
    ce4e:	4603      	mov	r3, r0
    ce50:	6039      	str	r1, [r7, #0]
    ce52:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    ce54:	79fb      	ldrb	r3, [r7, #7]
    ce56:	2b01      	cmp	r3, #1
    ce58:	d009      	beq.n	ce6e <usbdc_register_handler+0x26>
    ce5a:	2b02      	cmp	r3, #2
    ce5c:	d00c      	beq.n	ce78 <usbdc_register_handler+0x30>
    ce5e:	2b00      	cmp	r3, #0
    ce60:	d000      	beq.n	ce64 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    ce62:	e00e      	b.n	ce82 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    ce64:	6839      	ldr	r1, [r7, #0]
    ce66:	4809      	ldr	r0, [pc, #36]	; (ce8c <usbdc_register_handler+0x44>)
    ce68:	4b09      	ldr	r3, [pc, #36]	; (ce90 <usbdc_register_handler+0x48>)
    ce6a:	4798      	blx	r3
		break;
    ce6c:	e009      	b.n	ce82 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    ce6e:	6839      	ldr	r1, [r7, #0]
    ce70:	4808      	ldr	r0, [pc, #32]	; (ce94 <usbdc_register_handler+0x4c>)
    ce72:	4b07      	ldr	r3, [pc, #28]	; (ce90 <usbdc_register_handler+0x48>)
    ce74:	4798      	blx	r3
		break;
    ce76:	e004      	b.n	ce82 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    ce78:	6839      	ldr	r1, [r7, #0]
    ce7a:	4807      	ldr	r0, [pc, #28]	; (ce98 <usbdc_register_handler+0x50>)
    ce7c:	4b04      	ldr	r3, [pc, #16]	; (ce90 <usbdc_register_handler+0x48>)
    ce7e:	4798      	blx	r3
		break;
    ce80:	bf00      	nop
	}
}
    ce82:	bf00      	nop
    ce84:	3708      	adds	r7, #8
    ce86:	46bd      	mov	sp, r7
    ce88:	bd80      	pop	{r7, pc}
    ce8a:	bf00      	nop
    ce8c:	20000f48 	.word	0x20000f48
    ce90:	000038d9 	.word	0x000038d9
    ce94:	20000f4c 	.word	0x20000f4c
    ce98:	20000f50 	.word	0x20000f50

0000ce9c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    ce9c:	b580      	push	{r7, lr}
    ce9e:	b084      	sub	sp, #16
    cea0:	af00      	add	r7, sp, #0
    cea2:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    cea4:	687b      	ldr	r3, [r7, #4]
    cea6:	2b00      	cmp	r3, #0
    cea8:	bf14      	ite	ne
    ceaa:	2301      	movne	r3, #1
    ceac:	2300      	moveq	r3, #0
    ceae:	b2db      	uxtb	r3, r3
    ceb0:	f240 3255 	movw	r2, #853	; 0x355
    ceb4:	4910      	ldr	r1, [pc, #64]	; (cef8 <usbdc_init+0x5c>)
    ceb6:	4618      	mov	r0, r3
    ceb8:	4b10      	ldr	r3, [pc, #64]	; (cefc <usbdc_init+0x60>)
    ceba:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    cebc:	4b10      	ldr	r3, [pc, #64]	; (cf00 <usbdc_init+0x64>)
    cebe:	4798      	blx	r3
    cec0:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    cec2:	68fb      	ldr	r3, [r7, #12]
    cec4:	2b00      	cmp	r3, #0
    cec6:	da01      	bge.n	cecc <usbdc_init+0x30>
		return rc;
    cec8:	68fb      	ldr	r3, [r7, #12]
    ceca:	e010      	b.n	ceee <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    cecc:	2220      	movs	r2, #32
    cece:	2100      	movs	r1, #0
    ced0:	480c      	ldr	r0, [pc, #48]	; (cf04 <usbdc_init+0x68>)
    ced2:	4b0d      	ldr	r3, [pc, #52]	; (cf08 <usbdc_init+0x6c>)
    ced4:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    ced6:	4a0b      	ldr	r2, [pc, #44]	; (cf04 <usbdc_init+0x68>)
    ced8:	687b      	ldr	r3, [r7, #4]
    ceda:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    cedc:	490b      	ldr	r1, [pc, #44]	; (cf0c <usbdc_init+0x70>)
    cede:	2000      	movs	r0, #0
    cee0:	4b0b      	ldr	r3, [pc, #44]	; (cf10 <usbdc_init+0x74>)
    cee2:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    cee4:	490b      	ldr	r1, [pc, #44]	; (cf14 <usbdc_init+0x78>)
    cee6:	2001      	movs	r0, #1
    cee8:	4b09      	ldr	r3, [pc, #36]	; (cf10 <usbdc_init+0x74>)
    ceea:	4798      	blx	r3

	return 0;
    ceec:	2300      	movs	r3, #0
}
    ceee:	4618      	mov	r0, r3
    cef0:	3710      	adds	r7, #16
    cef2:	46bd      	mov	sp, r7
    cef4:	bd80      	pop	{r7, pc}
    cef6:	bf00      	nop
    cef8:	0000efb4 	.word	0x0000efb4
    cefc:	000037fd 	.word	0x000037fd
    cf00:	00003255 	.word	0x00003255
    cf04:	20000f44 	.word	0x20000f44
    cf08:	0000ea15 	.word	0x0000ea15
    cf0c:	0000cbf9 	.word	0x0000cbf9
    cf10:	00003301 	.word	0x00003301
    cf14:	0000cdd5 	.word	0x0000cdd5

0000cf18 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    cf18:	b580      	push	{r7, lr}
    cf1a:	b082      	sub	sp, #8
    cf1c:	af00      	add	r7, sp, #0
    cf1e:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    cf20:	6879      	ldr	r1, [r7, #4]
    cf22:	4803      	ldr	r0, [pc, #12]	; (cf30 <usbdc_register_function+0x18>)
    cf24:	4b03      	ldr	r3, [pc, #12]	; (cf34 <usbdc_register_function+0x1c>)
    cf26:	4798      	blx	r3
}
    cf28:	bf00      	nop
    cf2a:	3708      	adds	r7, #8
    cf2c:	46bd      	mov	sp, r7
    cf2e:	bd80      	pop	{r7, pc}
    cf30:	20000f54 	.word	0x20000f54
    cf34:	000038d9 	.word	0x000038d9

0000cf38 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    cf38:	b580      	push	{r7, lr}
    cf3a:	b082      	sub	sp, #8
    cf3c:	af00      	add	r7, sp, #0
    cf3e:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    cf40:	4b0f      	ldr	r3, [pc, #60]	; (cf80 <usbdc_start+0x48>)
    cf42:	7e9b      	ldrb	r3, [r3, #26]
    cf44:	2b00      	cmp	r3, #0
    cf46:	d002      	beq.n	cf4e <usbdc_start+0x16>
		return ERR_BUSY;
    cf48:	f06f 0303 	mvn.w	r3, #3
    cf4c:	e013      	b.n	cf76 <usbdc_start+0x3e>
	}

	if (desces) {
    cf4e:	687b      	ldr	r3, [r7, #4]
    cf50:	2b00      	cmp	r3, #0
    cf52:	d00e      	beq.n	cf72 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    cf54:	4a0a      	ldr	r2, [pc, #40]	; (cf80 <usbdc_start+0x48>)
    cf56:	687b      	ldr	r3, [r7, #4]
    cf58:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    cf5a:	687b      	ldr	r3, [r7, #4]
    cf5c:	681b      	ldr	r3, [r3, #0]
    cf5e:	79da      	ldrb	r2, [r3, #7]
    cf60:	4b07      	ldr	r3, [pc, #28]	; (cf80 <usbdc_start+0x48>)
    cf62:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    cf64:	4b06      	ldr	r3, [pc, #24]	; (cf80 <usbdc_start+0x48>)
    cf66:	2201      	movs	r2, #1
    cf68:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    cf6a:	4b06      	ldr	r3, [pc, #24]	; (cf84 <usbdc_start+0x4c>)
    cf6c:	4798      	blx	r3
	return ERR_NONE;
    cf6e:	2300      	movs	r3, #0
    cf70:	e001      	b.n	cf76 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    cf72:	f06f 0308 	mvn.w	r3, #8
}
    cf76:	4618      	mov	r0, r3
    cf78:	3708      	adds	r7, #8
    cf7a:	46bd      	mov	sp, r7
    cf7c:	bd80      	pop	{r7, pc}
    cf7e:	bf00      	nop
    cf80:	20000f44 	.word	0x20000f44
    cf84:	00003325 	.word	0x00003325

0000cf88 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    cf88:	b580      	push	{r7, lr}
    cf8a:	af00      	add	r7, sp, #0
	usb_d_attach();
    cf8c:	4b01      	ldr	r3, [pc, #4]	; (cf94 <usbdc_attach+0xc>)
    cf8e:	4798      	blx	r3
}
    cf90:	bf00      	nop
    cf92:	bd80      	pop	{r7, pc}
    cf94:	00003339 	.word	0x00003339

0000cf98 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    cf98:	b480      	push	{r7}
    cf9a:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    cf9c:	4b03      	ldr	r3, [pc, #12]	; (cfac <usbdc_get_ctrl_buffer+0x14>)
    cf9e:	695b      	ldr	r3, [r3, #20]
}
    cfa0:	4618      	mov	r0, r3
    cfa2:	46bd      	mov	sp, r7
    cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cfa8:	4770      	bx	lr
    cfaa:	bf00      	nop
    cfac:	20000f44 	.word	0x20000f44

0000cfb0 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    cfb0:	b480      	push	{r7}
    cfb2:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    cfb4:	4b07      	ldr	r3, [pc, #28]	; (cfd4 <usbdc_get_state+0x24>)
    cfb6:	7e9b      	ldrb	r3, [r3, #26]
    cfb8:	f003 0310 	and.w	r3, r3, #16
    cfbc:	2b00      	cmp	r3, #0
    cfbe:	d001      	beq.n	cfc4 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    cfc0:	2310      	movs	r3, #16
    cfc2:	e001      	b.n	cfc8 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    cfc4:	4b03      	ldr	r3, [pc, #12]	; (cfd4 <usbdc_get_state+0x24>)
    cfc6:	7e9b      	ldrb	r3, [r3, #26]
}
    cfc8:	4618      	mov	r0, r3
    cfca:	46bd      	mov	sp, r7
    cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    cfd0:	4770      	bx	lr
    cfd2:	bf00      	nop
    cfd4:	20000f44 	.word	0x20000f44

0000cfd8 <usb_get_u16>:
{
    cfd8:	b480      	push	{r7}
    cfda:	b083      	sub	sp, #12
    cfdc:	af00      	add	r7, sp, #0
    cfde:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    cfe0:	687b      	ldr	r3, [r7, #4]
    cfe2:	781b      	ldrb	r3, [r3, #0]
    cfe4:	b29a      	uxth	r2, r3
    cfe6:	687b      	ldr	r3, [r7, #4]
    cfe8:	3301      	adds	r3, #1
    cfea:	781b      	ldrb	r3, [r3, #0]
    cfec:	b29b      	uxth	r3, r3
    cfee:	021b      	lsls	r3, r3, #8
    cff0:	b29b      	uxth	r3, r3
    cff2:	4413      	add	r3, r2
    cff4:	b29b      	uxth	r3, r3
}
    cff6:	4618      	mov	r0, r3
    cff8:	370c      	adds	r7, #12
    cffa:	46bd      	mov	sp, r7
    cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
    d000:	4770      	bx	lr

0000d002 <usb_desc_len>:
{
    d002:	b480      	push	{r7}
    d004:	b083      	sub	sp, #12
    d006:	af00      	add	r7, sp, #0
    d008:	6078      	str	r0, [r7, #4]
	return desc[0];
    d00a:	687b      	ldr	r3, [r7, #4]
    d00c:	781b      	ldrb	r3, [r3, #0]
}
    d00e:	4618      	mov	r0, r3
    d010:	370c      	adds	r7, #12
    d012:	46bd      	mov	sp, r7
    d014:	f85d 7b04 	ldr.w	r7, [sp], #4
    d018:	4770      	bx	lr

0000d01a <usb_desc_type>:
{
    d01a:	b480      	push	{r7}
    d01c:	b083      	sub	sp, #12
    d01e:	af00      	add	r7, sp, #0
    d020:	6078      	str	r0, [r7, #4]
	return desc[1];
    d022:	687b      	ldr	r3, [r7, #4]
    d024:	3301      	adds	r3, #1
    d026:	781b      	ldrb	r3, [r3, #0]
}
    d028:	4618      	mov	r0, r3
    d02a:	370c      	adds	r7, #12
    d02c:	46bd      	mov	sp, r7
    d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d032:	4770      	bx	lr

0000d034 <usb_desc_next>:
{
    d034:	b580      	push	{r7, lr}
    d036:	b082      	sub	sp, #8
    d038:	af00      	add	r7, sp, #0
    d03a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d03c:	6878      	ldr	r0, [r7, #4]
    d03e:	4b05      	ldr	r3, [pc, #20]	; (d054 <usb_desc_next+0x20>)
    d040:	4798      	blx	r3
    d042:	4603      	mov	r3, r0
    d044:	461a      	mov	r2, r3
    d046:	687b      	ldr	r3, [r7, #4]
    d048:	4413      	add	r3, r2
}
    d04a:	4618      	mov	r0, r3
    d04c:	3708      	adds	r7, #8
    d04e:	46bd      	mov	sp, r7
    d050:	bd80      	pop	{r7, pc}
    d052:	bf00      	nop
    d054:	0000d003 	.word	0x0000d003

0000d058 <usb_cfg_desc_total_len>:
{
    d058:	b580      	push	{r7, lr}
    d05a:	b082      	sub	sp, #8
    d05c:	af00      	add	r7, sp, #0
    d05e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d060:	687b      	ldr	r3, [r7, #4]
    d062:	3302      	adds	r3, #2
    d064:	4618      	mov	r0, r3
    d066:	4b03      	ldr	r3, [pc, #12]	; (d074 <usb_cfg_desc_total_len+0x1c>)
    d068:	4798      	blx	r3
    d06a:	4603      	mov	r3, r0
}
    d06c:	4618      	mov	r0, r3
    d06e:	3708      	adds	r7, #8
    d070:	46bd      	mov	sp, r7
    d072:	bd80      	pop	{r7, pc}
    d074:	0000cfd9 	.word	0x0000cfd9

0000d078 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    d078:	b580      	push	{r7, lr}
    d07a:	b082      	sub	sp, #8
    d07c:	af00      	add	r7, sp, #0
    d07e:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d080:	6878      	ldr	r0, [r7, #4]
    d082:	4b05      	ldr	r3, [pc, #20]	; (d098 <usb_cfg_desc_next+0x20>)
    d084:	4798      	blx	r3
    d086:	4603      	mov	r3, r0
    d088:	461a      	mov	r2, r3
    d08a:	687b      	ldr	r3, [r7, #4]
    d08c:	4413      	add	r3, r2
}
    d08e:	4618      	mov	r0, r3
    d090:	3708      	adds	r7, #8
    d092:	46bd      	mov	sp, r7
    d094:	bd80      	pop	{r7, pc}
    d096:	bf00      	nop
    d098:	0000d059 	.word	0x0000d059

0000d09c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    d09c:	b580      	push	{r7, lr}
    d09e:	b084      	sub	sp, #16
    d0a0:	af00      	add	r7, sp, #0
    d0a2:	60f8      	str	r0, [r7, #12]
    d0a4:	60b9      	str	r1, [r7, #8]
    d0a6:	4613      	mov	r3, r2
    d0a8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d0aa:	e015      	b.n	d0d8 <usb_find_desc+0x3c>
		_desc_len_check();
    d0ac:	68f8      	ldr	r0, [r7, #12]
    d0ae:	4b0f      	ldr	r3, [pc, #60]	; (d0ec <usb_find_desc+0x50>)
    d0b0:	4798      	blx	r3
    d0b2:	4603      	mov	r3, r0
    d0b4:	2b01      	cmp	r3, #1
    d0b6:	d801      	bhi.n	d0bc <usb_find_desc+0x20>
    d0b8:	2300      	movs	r3, #0
    d0ba:	e012      	b.n	d0e2 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    d0bc:	68f8      	ldr	r0, [r7, #12]
    d0be:	4b0c      	ldr	r3, [pc, #48]	; (d0f0 <usb_find_desc+0x54>)
    d0c0:	4798      	blx	r3
    d0c2:	4603      	mov	r3, r0
    d0c4:	461a      	mov	r2, r3
    d0c6:	79fb      	ldrb	r3, [r7, #7]
    d0c8:	4293      	cmp	r3, r2
    d0ca:	d101      	bne.n	d0d0 <usb_find_desc+0x34>
			return desc;
    d0cc:	68fb      	ldr	r3, [r7, #12]
    d0ce:	e008      	b.n	d0e2 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    d0d0:	68f8      	ldr	r0, [r7, #12]
    d0d2:	4b08      	ldr	r3, [pc, #32]	; (d0f4 <usb_find_desc+0x58>)
    d0d4:	4798      	blx	r3
    d0d6:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d0d8:	68fa      	ldr	r2, [r7, #12]
    d0da:	68bb      	ldr	r3, [r7, #8]
    d0dc:	429a      	cmp	r2, r3
    d0de:	d3e5      	bcc.n	d0ac <usb_find_desc+0x10>
	}
	return NULL;
    d0e0:	2300      	movs	r3, #0
}
    d0e2:	4618      	mov	r0, r3
    d0e4:	3710      	adds	r7, #16
    d0e6:	46bd      	mov	sp, r7
    d0e8:	bd80      	pop	{r7, pc}
    d0ea:	bf00      	nop
    d0ec:	0000d003 	.word	0x0000d003
    d0f0:	0000d01b 	.word	0x0000d01b
    d0f4:	0000d035 	.word	0x0000d035

0000d0f8 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    d0f8:	b580      	push	{r7, lr}
    d0fa:	b082      	sub	sp, #8
    d0fc:	af00      	add	r7, sp, #0
    d0fe:	6078      	str	r0, [r7, #4]
    d100:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d102:	e019      	b.n	d138 <usb_find_ep_desc+0x40>
		_desc_len_check();
    d104:	6878      	ldr	r0, [r7, #4]
    d106:	4b12      	ldr	r3, [pc, #72]	; (d150 <usb_find_ep_desc+0x58>)
    d108:	4798      	blx	r3
    d10a:	4603      	mov	r3, r0
    d10c:	2b01      	cmp	r3, #1
    d10e:	d801      	bhi.n	d114 <usb_find_ep_desc+0x1c>
    d110:	2300      	movs	r3, #0
    d112:	e018      	b.n	d146 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d114:	6878      	ldr	r0, [r7, #4]
    d116:	4b0f      	ldr	r3, [pc, #60]	; (d154 <usb_find_ep_desc+0x5c>)
    d118:	4798      	blx	r3
    d11a:	4603      	mov	r3, r0
    d11c:	2b04      	cmp	r3, #4
    d11e:	d010      	beq.n	d142 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d120:	6878      	ldr	r0, [r7, #4]
    d122:	4b0c      	ldr	r3, [pc, #48]	; (d154 <usb_find_ep_desc+0x5c>)
    d124:	4798      	blx	r3
    d126:	4603      	mov	r3, r0
    d128:	2b05      	cmp	r3, #5
    d12a:	d101      	bne.n	d130 <usb_find_ep_desc+0x38>
			return desc;
    d12c:	687b      	ldr	r3, [r7, #4]
    d12e:	e00a      	b.n	d146 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    d130:	6878      	ldr	r0, [r7, #4]
    d132:	4b09      	ldr	r3, [pc, #36]	; (d158 <usb_find_ep_desc+0x60>)
    d134:	4798      	blx	r3
    d136:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    d138:	687a      	ldr	r2, [r7, #4]
    d13a:	683b      	ldr	r3, [r7, #0]
    d13c:	429a      	cmp	r2, r3
    d13e:	d3e1      	bcc.n	d104 <usb_find_ep_desc+0xc>
    d140:	e000      	b.n	d144 <usb_find_ep_desc+0x4c>
			break;
    d142:	bf00      	nop
	}
	return NULL;
    d144:	2300      	movs	r3, #0
}
    d146:	4618      	mov	r0, r3
    d148:	3708      	adds	r7, #8
    d14a:	46bd      	mov	sp, r7
    d14c:	bd80      	pop	{r7, pc}
    d14e:	bf00      	nop
    d150:	0000d003 	.word	0x0000d003
    d154:	0000d01b 	.word	0x0000d01b
    d158:	0000d035 	.word	0x0000d035

0000d15c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d15c:	b580      	push	{r7, lr}
    d15e:	b084      	sub	sp, #16
    d160:	af00      	add	r7, sp, #0
    d162:	60f8      	str	r0, [r7, #12]
    d164:	60b9      	str	r1, [r7, #8]
    d166:	4613      	mov	r3, r2
    d168:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    d16a:	2202      	movs	r2, #2
    d16c:	68b9      	ldr	r1, [r7, #8]
    d16e:	68f8      	ldr	r0, [r7, #12]
    d170:	4b15      	ldr	r3, [pc, #84]	; (d1c8 <usb_find_cfg_desc+0x6c>)
    d172:	4798      	blx	r3
    d174:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    d176:	68fb      	ldr	r3, [r7, #12]
    d178:	2b00      	cmp	r3, #0
    d17a:	d11a      	bne.n	d1b2 <usb_find_cfg_desc+0x56>
		return NULL;
    d17c:	2300      	movs	r3, #0
    d17e:	e01f      	b.n	d1c0 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    d180:	68f8      	ldr	r0, [r7, #12]
    d182:	4b12      	ldr	r3, [pc, #72]	; (d1cc <usb_find_cfg_desc+0x70>)
    d184:	4798      	blx	r3
    d186:	4603      	mov	r3, r0
    d188:	2b01      	cmp	r3, #1
    d18a:	d801      	bhi.n	d190 <usb_find_cfg_desc+0x34>
    d18c:	2300      	movs	r3, #0
    d18e:	e017      	b.n	d1c0 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    d190:	68fb      	ldr	r3, [r7, #12]
    d192:	3301      	adds	r3, #1
    d194:	781b      	ldrb	r3, [r3, #0]
    d196:	2b02      	cmp	r3, #2
    d198:	d110      	bne.n	d1bc <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    d19a:	68fb      	ldr	r3, [r7, #12]
    d19c:	3305      	adds	r3, #5
    d19e:	781b      	ldrb	r3, [r3, #0]
    d1a0:	79fa      	ldrb	r2, [r7, #7]
    d1a2:	429a      	cmp	r2, r3
    d1a4:	d101      	bne.n	d1aa <usb_find_cfg_desc+0x4e>
			return desc;
    d1a6:	68fb      	ldr	r3, [r7, #12]
    d1a8:	e00a      	b.n	d1c0 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    d1aa:	68f8      	ldr	r0, [r7, #12]
    d1ac:	4b08      	ldr	r3, [pc, #32]	; (d1d0 <usb_find_cfg_desc+0x74>)
    d1ae:	4798      	blx	r3
    d1b0:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d1b2:	68fa      	ldr	r2, [r7, #12]
    d1b4:	68bb      	ldr	r3, [r7, #8]
    d1b6:	429a      	cmp	r2, r3
    d1b8:	d3e2      	bcc.n	d180 <usb_find_cfg_desc+0x24>
    d1ba:	e000      	b.n	d1be <usb_find_cfg_desc+0x62>
			break;
    d1bc:	bf00      	nop
	}
	return NULL;
    d1be:	2300      	movs	r3, #0
}
    d1c0:	4618      	mov	r0, r3
    d1c2:	3710      	adds	r7, #16
    d1c4:	46bd      	mov	sp, r7
    d1c6:	bd80      	pop	{r7, pc}
    d1c8:	0000d09d 	.word	0x0000d09d
    d1cc:	0000d003 	.word	0x0000d003
    d1d0:	0000d079 	.word	0x0000d079

0000d1d4 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    d1d4:	b580      	push	{r7, lr}
    d1d6:	b086      	sub	sp, #24
    d1d8:	af00      	add	r7, sp, #0
    d1da:	60f8      	str	r0, [r7, #12]
    d1dc:	60b9      	str	r1, [r7, #8]
    d1de:	4613      	mov	r3, r2
    d1e0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d1e2:	2300      	movs	r3, #0
    d1e4:	75fb      	strb	r3, [r7, #23]
    d1e6:	e020      	b.n	d22a <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    d1e8:	2203      	movs	r2, #3
    d1ea:	68b9      	ldr	r1, [r7, #8]
    d1ec:	68f8      	ldr	r0, [r7, #12]
    d1ee:	4b13      	ldr	r3, [pc, #76]	; (d23c <usb_find_str_desc+0x68>)
    d1f0:	4798      	blx	r3
    d1f2:	60f8      	str	r0, [r7, #12]
		if (desc) {
    d1f4:	68fb      	ldr	r3, [r7, #12]
    d1f6:	2b00      	cmp	r3, #0
    d1f8:	d015      	beq.n	d226 <usb_find_str_desc+0x52>
			_desc_len_check();
    d1fa:	68f8      	ldr	r0, [r7, #12]
    d1fc:	4b10      	ldr	r3, [pc, #64]	; (d240 <usb_find_str_desc+0x6c>)
    d1fe:	4798      	blx	r3
    d200:	4603      	mov	r3, r0
    d202:	2b01      	cmp	r3, #1
    d204:	d801      	bhi.n	d20a <usb_find_str_desc+0x36>
    d206:	2300      	movs	r3, #0
    d208:	e014      	b.n	d234 <usb_find_str_desc+0x60>
			if (i == str_index) {
    d20a:	7dfa      	ldrb	r2, [r7, #23]
    d20c:	79fb      	ldrb	r3, [r7, #7]
    d20e:	429a      	cmp	r2, r3
    d210:	d101      	bne.n	d216 <usb_find_str_desc+0x42>
				return desc;
    d212:	68fb      	ldr	r3, [r7, #12]
    d214:	e00e      	b.n	d234 <usb_find_str_desc+0x60>
			}
			i++;
    d216:	7dfb      	ldrb	r3, [r7, #23]
    d218:	3301      	adds	r3, #1
    d21a:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    d21c:	68f8      	ldr	r0, [r7, #12]
    d21e:	4b09      	ldr	r3, [pc, #36]	; (d244 <usb_find_str_desc+0x70>)
    d220:	4798      	blx	r3
    d222:	60f8      	str	r0, [r7, #12]
    d224:	e001      	b.n	d22a <usb_find_str_desc+0x56>
		} else {
			return NULL;
    d226:	2300      	movs	r3, #0
    d228:	e004      	b.n	d234 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    d22a:	68fa      	ldr	r2, [r7, #12]
    d22c:	68bb      	ldr	r3, [r7, #8]
    d22e:	429a      	cmp	r2, r3
    d230:	d3da      	bcc.n	d1e8 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    d232:	2300      	movs	r3, #0
}
    d234:	4618      	mov	r0, r3
    d236:	3718      	adds	r7, #24
    d238:	46bd      	mov	sp, r7
    d23a:	bd80      	pop	{r7, pc}
    d23c:	0000d09d 	.word	0x0000d09d
    d240:	0000d003 	.word	0x0000d003
    d244:	0000d035 	.word	0x0000d035

0000d248 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	i2c_initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    d248:	b480      	push	{r7}
    d24a:	b083      	sub	sp, #12
    d24c:	af00      	add	r7, sp, #0
    d24e:	6078      	str	r0, [r7, #4]
    d250:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    d252:	687b      	ldr	r3, [r7, #4]
    d254:	683a      	ldr	r2, [r7, #0]
    d256:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    d258:	687b      	ldr	r3, [r7, #4]
    d25a:	4618      	mov	r0, r3
    d25c:	370c      	adds	r7, #12
    d25e:	46bd      	mov	sp, r7
    d260:	bc80      	pop	{r7}
    d262:	4770      	bx	lr

0000d264 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    d264:	b480      	push	{r7}
    d266:	b083      	sub	sp, #12
    d268:	af00      	add	r7, sp, #0
    d26a:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    d26c:	687b      	ldr	r3, [r7, #4]
    d26e:	4618      	mov	r0, r3
    d270:	370c      	adds	r7, #12
    d272:	46bd      	mov	sp, r7
    d274:	bc80      	pop	{r7}
    d276:	4770      	bx	lr

0000d278 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    d278:	b580      	push	{r7, lr}
    d27a:	b082      	sub	sp, #8
    d27c:	af00      	add	r7, sp, #0
    d27e:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    d280:	687b      	ldr	r3, [r7, #4]
    d282:	4a23      	ldr	r2, [pc, #140]	; (d310 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    d284:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    d286:	687b      	ldr	r3, [r7, #4]
    d288:	4a21      	ldr	r2, [pc, #132]	; (d310 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    d28a:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    d28c:	687b      	ldr	r3, [r7, #4]
    d28e:	691a      	ldr	r2, [r3, #16]
    d290:	687b      	ldr	r3, [r7, #4]
    d292:	330c      	adds	r3, #12
    d294:	4619      	mov	r1, r3
    d296:	4610      	mov	r0, r2
    d298:	4b1e      	ldr	r3, [pc, #120]	; (d314 <_ZN14I2C_Sync_Class4InitEv+0x9c>)
    d29a:	4798      	blx	r3
	enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    d29c:	687b      	ldr	r3, [r7, #4]
    d29e:	691b      	ldr	r3, [r3, #16]
    d2a0:	4618      	mov	r0, r3
    d2a2:	4b1d      	ldr	r3, [pc, #116]	; (d318 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    d2a4:	4798      	blx	r3
    d2a6:	4603      	mov	r3, r0
    d2a8:	b2da      	uxtb	r2, r3
    d2aa:	687b      	ldr	r3, [r7, #4]
    d2ac:	751a      	strb	r2, [r3, #20]
	isOK=enabled==0;
    d2ae:	687b      	ldr	r3, [r7, #4]
    d2b0:	7d1b      	ldrb	r3, [r3, #20]
    d2b2:	2b00      	cmp	r3, #0
    d2b4:	bf0c      	ite	eq
    d2b6:	2301      	moveq	r3, #1
    d2b8:	2300      	movne	r3, #0
    d2ba:	b2da      	uxtb	r2, r3
    d2bc:	687b      	ldr	r3, [r7, #4]
    d2be:	725a      	strb	r2, [r3, #9]
	if (isOK)
    d2c0:	687b      	ldr	r3, [r7, #4]
    d2c2:	7a5b      	ldrb	r3, [r3, #9]
    d2c4:	b2db      	uxtb	r3, r3
    d2c6:	2b00      	cmp	r3, #0
    d2c8:	d116      	bne.n	d2f8 <_ZN14I2C_Sync_Class4InitEv+0x80>
	{
		
	} 
	else
	{
		i2c_m_sync_disable(ptrI2CDescr);
    d2ca:	687b      	ldr	r3, [r7, #4]
    d2cc:	691b      	ldr	r3, [r3, #16]
    d2ce:	4618      	mov	r0, r3
    d2d0:	4b12      	ldr	r3, [pc, #72]	; (d31c <_ZN14I2C_Sync_Class4InitEv+0xa4>)
    d2d2:	4798      	blx	r3
		enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    d2d4:	687b      	ldr	r3, [r7, #4]
    d2d6:	691b      	ldr	r3, [r3, #16]
    d2d8:	4618      	mov	r0, r3
    d2da:	4b0f      	ldr	r3, [pc, #60]	; (d318 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    d2dc:	4798      	blx	r3
    d2de:	4603      	mov	r3, r0
    d2e0:	b2da      	uxtb	r2, r3
    d2e2:	687b      	ldr	r3, [r7, #4]
    d2e4:	751a      	strb	r2, [r3, #20]
		isOK=enabled==0;
    d2e6:	687b      	ldr	r3, [r7, #4]
    d2e8:	7d1b      	ldrb	r3, [r3, #20]
    d2ea:	2b00      	cmp	r3, #0
    d2ec:	bf0c      	ite	eq
    d2ee:	2301      	moveq	r3, #1
    d2f0:	2300      	movne	r3, #0
    d2f2:	b2da      	uxtb	r2, r3
    d2f4:	687b      	ldr	r3, [r7, #4]
    d2f6:	725a      	strb	r2, [r3, #9]
	}
	
	i2c_initiated=isOK;
    d2f8:	687b      	ldr	r3, [r7, #4]
    d2fa:	7a5b      	ldrb	r3, [r3, #9]
    d2fc:	b2da      	uxtb	r2, r3
    d2fe:	687b      	ldr	r3, [r7, #4]
    d300:	721a      	strb	r2, [r3, #8]
	return isOK;
    d302:	687b      	ldr	r3, [r7, #4]
    d304:	7a5b      	ldrb	r3, [r3, #9]
    d306:	b2db      	uxtb	r3, r3
	
}
    d308:	4618      	mov	r0, r3
    d30a:	3708      	adds	r7, #8
    d30c:	46bd      	mov	sp, r7
    d30e:	bd80      	pop	{r7, pc}
    d310:	20000f64 	.word	0x20000f64
    d314:	000025f7 	.word	0x000025f7
    d318:	0000257d 	.word	0x0000257d
    d31c:	0000259d 	.word	0x0000259d

0000d320 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    d320:	b580      	push	{r7, lr}
    d322:	b082      	sub	sp, #8
    d324:	af00      	add	r7, sp, #0
    d326:	6078      	str	r0, [r7, #4]
    d328:	460b      	mov	r3, r1
    d32a:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    d32c:	687b      	ldr	r3, [r7, #4]
    d32e:	691b      	ldr	r3, [r3, #16]
    d330:	78fa      	ldrb	r2, [r7, #3]
    d332:	b211      	sxth	r1, r2
    d334:	f44f 6200 	mov.w	r2, #2048	; 0x800
    d338:	4618      	mov	r0, r3
    d33a:	4b03      	ldr	r3, [pc, #12]	; (d348 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    d33c:	4798      	blx	r3
    d33e:	4603      	mov	r3, r0
}
    d340:	4618      	mov	r0, r3
    d342:	3708      	adds	r7, #8
    d344:	46bd      	mov	sp, r7
    d346:	bd80      	pop	{r7, pc}
    d348:	000025bd 	.word	0x000025bd

0000d34c <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    d34c:	b580      	push	{r7, lr}
    d34e:	b086      	sub	sp, #24
    d350:	af00      	add	r7, sp, #0
    d352:	60f8      	str	r0, [r7, #12]
    d354:	60b9      	str	r1, [r7, #8]
    d356:	4613      	mov	r3, r2
    d358:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    d35a:	68fb      	ldr	r3, [r7, #12]
    d35c:	68db      	ldr	r3, [r3, #12]
    d35e:	88fa      	ldrh	r2, [r7, #6]
    d360:	68b9      	ldr	r1, [r7, #8]
    d362:	4618      	mov	r0, r3
    d364:	4b03      	ldr	r3, [pc, #12]	; (d374 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    d366:	4798      	blx	r3
    d368:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    d36a:	697b      	ldr	r3, [r7, #20]
}
    d36c:	4618      	mov	r0, r3
    d36e:	3718      	adds	r7, #24
    d370:	46bd      	mov	sp, r7
    d372:	bd80      	pop	{r7, pc}
    d374:	0000e7bd 	.word	0x0000e7bd

0000d378 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    d378:	b580      	push	{r7, lr}
    d37a:	b086      	sub	sp, #24
    d37c:	af00      	add	r7, sp, #0
    d37e:	60f8      	str	r0, [r7, #12]
    d380:	60b9      	str	r1, [r7, #8]
    d382:	4613      	mov	r3, r2
    d384:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    d386:	68fb      	ldr	r3, [r7, #12]
    d388:	68db      	ldr	r3, [r3, #12]
    d38a:	88fa      	ldrh	r2, [r7, #6]
    d38c:	68b9      	ldr	r1, [r7, #8]
    d38e:	4618      	mov	r0, r3
    d390:	4b03      	ldr	r3, [pc, #12]	; (d3a0 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    d392:	4798      	blx	r3
    d394:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    d396:	697b      	ldr	r3, [r7, #20]
}
    d398:	4618      	mov	r0, r3
    d39a:	3718      	adds	r7, #24
    d39c:	46bd      	mov	sp, r7
    d39e:	bd80      	pop	{r7, pc}
    d3a0:	0000e80d 	.word	0x0000e80d

0000d3a4 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    d3a4:	b480      	push	{r7}
    d3a6:	b083      	sub	sp, #12
    d3a8:	af00      	add	r7, sp, #0
    d3aa:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    d3ac:	687b      	ldr	r3, [r7, #4]
    d3ae:	4618      	mov	r0, r3
    d3b0:	370c      	adds	r7, #12
    d3b2:	46bd      	mov	sp, r7
    d3b4:	bc80      	pop	{r7}
    d3b6:	4770      	bx	lr

0000d3b8 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    d3b8:	b480      	push	{r7}
    d3ba:	b083      	sub	sp, #12
    d3bc:	af00      	add	r7, sp, #0
    d3be:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    d3c0:	687b      	ldr	r3, [r7, #4]
    d3c2:	4618      	mov	r0, r3
    d3c4:	370c      	adds	r7, #12
    d3c6:	46bd      	mov	sp, r7
    d3c8:	bc80      	pop	{r7}
    d3ca:	4770      	bx	lr

0000d3cc <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    d3cc:	b480      	push	{r7}
    d3ce:	b085      	sub	sp, #20
    d3d0:	af00      	add	r7, sp, #0
    d3d2:	60f8      	str	r0, [r7, #12]
    d3d4:	460b      	mov	r3, r1
    d3d6:	607a      	str	r2, [r7, #4]
    d3d8:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    d3da:	687b      	ldr	r3, [r7, #4]
    d3dc:	681a      	ldr	r2, [r3, #0]
    d3de:	68fb      	ldr	r3, [r7, #12]
    d3e0:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
    d3e2:	687b      	ldr	r3, [r7, #4]
    d3e4:	685a      	ldr	r2, [r3, #4]
    d3e6:	68fb      	ldr	r3, [r7, #12]
    d3e8:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
    d3ea:	68fb      	ldr	r3, [r7, #12]
    d3ec:	7afa      	ldrb	r2, [r7, #11]
    d3ee:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
    d3f0:	68fb      	ldr	r3, [r7, #12]
    d3f2:	687a      	ldr	r2, [r7, #4]
    d3f4:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
    d3f6:	68fb      	ldr	r3, [r7, #12]
    d3f8:	68db      	ldr	r3, [r3, #12]
    d3fa:	7a5b      	ldrb	r3, [r3, #9]
    d3fc:	b2da      	uxtb	r2, r3
    d3fe:	68fb      	ldr	r3, [r7, #12]
    d400:	719a      	strb	r2, [r3, #6]
	return isOK;
    d402:	68fb      	ldr	r3, [r7, #12]
    d404:	799b      	ldrb	r3, [r3, #6]
    d406:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    d408:	4618      	mov	r0, r3
    d40a:	3714      	adds	r7, #20
    d40c:	46bd      	mov	sp, r7
    d40e:	bc80      	pop	{r7}
    d410:	4770      	bx	lr

0000d412 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    d412:	b480      	push	{r7}
    d414:	b083      	sub	sp, #12
    d416:	af00      	add	r7, sp, #0
    d418:	6078      	str	r0, [r7, #4]
    d41a:	460b      	mov	r3, r1
    d41c:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    d41e:	78fb      	ldrb	r3, [r7, #3]
    d420:	f003 0307 	and.w	r3, r3, #7
    d424:	b2db      	uxtb	r3, r3
}
    d426:	4618      	mov	r0, r3
    d428:	370c      	adds	r7, #12
    d42a:	46bd      	mov	sp, r7
    d42c:	bc80      	pop	{r7}
    d42e:	4770      	bx	lr

0000d430 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    d430:	b480      	push	{r7}
    d432:	b083      	sub	sp, #12
    d434:	af00      	add	r7, sp, #0
    d436:	6078      	str	r0, [r7, #4]
    d438:	4608      	mov	r0, r1
    d43a:	4611      	mov	r1, r2
    d43c:	461a      	mov	r2, r3
    d43e:	4603      	mov	r3, r0
    d440:	70fb      	strb	r3, [r7, #3]
    d442:	460b      	mov	r3, r1
    d444:	70bb      	strb	r3, [r7, #2]
    d446:	4613      	mov	r3, r2
    d448:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    d44a:	78fb      	ldrb	r3, [r7, #3]
    d44c:	2b07      	cmp	r3, #7
    d44e:	dc01      	bgt.n	d454 <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    d450:	78bb      	ldrb	r3, [r7, #2]
    d452:	e000      	b.n	d456 <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    d454:	787b      	ldrb	r3, [r7, #1]
}
    d456:	4618      	mov	r0, r3
    d458:	370c      	adds	r7, #12
    d45a:	46bd      	mov	sp, r7
    d45c:	bc80      	pop	{r7}
    d45e:	4770      	bx	lr

0000d460 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    d460:	b580      	push	{r7, lr}
    d462:	b082      	sub	sp, #8
    d464:	af00      	add	r7, sp, #0
    d466:	6078      	str	r0, [r7, #4]
    d468:	460b      	mov	r3, r1
    d46a:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    d46c:	687b      	ldr	r3, [r7, #4]
    d46e:	68da      	ldr	r2, [r3, #12]
    d470:	687b      	ldr	r3, [r7, #4]
    d472:	7a1b      	ldrb	r3, [r3, #8]
    d474:	4619      	mov	r1, r3
    d476:	4610      	mov	r0, r2
    d478:	4b0a      	ldr	r3, [pc, #40]	; (d4a4 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
    d47a:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    d47c:	687b      	ldr	r3, [r7, #4]
    d47e:	68db      	ldr	r3, [r3, #12]
    d480:	1cf9      	adds	r1, r7, #3
    d482:	2201      	movs	r2, #1
    d484:	4618      	mov	r0, r3
    d486:	4b08      	ldr	r3, [pc, #32]	; (d4a8 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    d488:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    d48a:	687b      	ldr	r3, [r7, #4]
    d48c:	68db      	ldr	r3, [r3, #12]
    d48e:	6879      	ldr	r1, [r7, #4]
    d490:	2201      	movs	r2, #1
    d492:	4618      	mov	r0, r3
    d494:	4b05      	ldr	r3, [pc, #20]	; (d4ac <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    d496:	4798      	blx	r3

	return registerValue;
    d498:	687b      	ldr	r3, [r7, #4]
    d49a:	781b      	ldrb	r3, [r3, #0]
}
    d49c:	4618      	mov	r0, r3
    d49e:	3708      	adds	r7, #8
    d4a0:	46bd      	mov	sp, r7
    d4a2:	bd80      	pop	{r7, pc}
    d4a4:	0000d321 	.word	0x0000d321
    d4a8:	0000d34d 	.word	0x0000d34d
    d4ac:	0000d379 	.word	0x0000d379

0000d4b0 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    d4b0:	b580      	push	{r7, lr}
    d4b2:	b084      	sub	sp, #16
    d4b4:	af00      	add	r7, sp, #0
    d4b6:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    d4b8:	687b      	ldr	r3, [r7, #4]
    d4ba:	68da      	ldr	r2, [r3, #12]
    d4bc:	687b      	ldr	r3, [r7, #4]
    d4be:	7a1b      	ldrb	r3, [r3, #8]
    d4c0:	4619      	mov	r1, r3
    d4c2:	4610      	mov	r0, r2
    d4c4:	4b06      	ldr	r3, [pc, #24]	; (d4e0 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    d4c6:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
    d4c8:	2109      	movs	r1, #9
    d4ca:	6878      	ldr	r0, [r7, #4]
    d4cc:	4b05      	ldr	r3, [pc, #20]	; (d4e4 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
    d4ce:	4798      	blx	r3
    d4d0:	4603      	mov	r3, r0
    d4d2:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
    d4d4:	7bfb      	ldrb	r3, [r7, #15]
}
    d4d6:	4618      	mov	r0, r3
    d4d8:	3710      	adds	r7, #16
    d4da:	46bd      	mov	sp, r7
    d4dc:	bd80      	pop	{r7, pc}
    d4de:	bf00      	nop
    d4e0:	0000d321 	.word	0x0000d321
    d4e4:	0000d461 	.word	0x0000d461

0000d4e8 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    d4e8:	b580      	push	{r7, lr}
    d4ea:	b084      	sub	sp, #16
    d4ec:	af00      	add	r7, sp, #0
    d4ee:	6078      	str	r0, [r7, #4]
    d4f0:	460b      	mov	r3, r1
    d4f2:	70fb      	strb	r3, [r7, #3]
    d4f4:	4613      	mov	r3, r2
    d4f6:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    d4f8:	687b      	ldr	r3, [r7, #4]
    d4fa:	68da      	ldr	r2, [r3, #12]
    d4fc:	687b      	ldr	r3, [r7, #4]
    d4fe:	7a1b      	ldrb	r3, [r3, #8]
    d500:	4619      	mov	r1, r3
    d502:	4610      	mov	r0, r2
    d504:	4b09      	ldr	r3, [pc, #36]	; (d52c <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    d506:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    d508:	78fb      	ldrb	r3, [r7, #3]
    d50a:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    d50c:	78bb      	ldrb	r3, [r7, #2]
    d50e:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    d510:	687b      	ldr	r3, [r7, #4]
    d512:	68db      	ldr	r3, [r3, #12]
    d514:	f107 010c 	add.w	r1, r7, #12
    d518:	2202      	movs	r2, #2
    d51a:	4618      	mov	r0, r3
    d51c:	4b04      	ldr	r3, [pc, #16]	; (d530 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    d51e:	4798      	blx	r3
    d520:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    d522:	4618      	mov	r0, r3
    d524:	3710      	adds	r7, #16
    d526:	46bd      	mov	sp, r7
    d528:	bd80      	pop	{r7, pc}
    d52a:	bf00      	nop
    d52c:	0000d321 	.word	0x0000d321
    d530:	0000d34d 	.word	0x0000d34d

0000d534 <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
    d534:	b580      	push	{r7, lr}
    d536:	b082      	sub	sp, #8
    d538:	af00      	add	r7, sp, #0
    d53a:	6078      	str	r0, [r7, #4]
    d53c:	460b      	mov	r3, r1
    d53e:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    d540:	687b      	ldr	r3, [r7, #4]
    d542:	68da      	ldr	r2, [r3, #12]
    d544:	687b      	ldr	r3, [r7, #4]
    d546:	7a1b      	ldrb	r3, [r3, #8]
    d548:	4619      	mov	r1, r3
    d54a:	4610      	mov	r0, r2
    d54c:	4b06      	ldr	r3, [pc, #24]	; (d568 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
    d54e:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
    d550:	78fb      	ldrb	r3, [r7, #3]
    d552:	461a      	mov	r2, r3
    d554:	2109      	movs	r1, #9
    d556:	6878      	ldr	r0, [r7, #4]
    d558:	4b04      	ldr	r3, [pc, #16]	; (d56c <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
    d55a:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
    d55c:	78fb      	ldrb	r3, [r7, #3]
}
    d55e:	4618      	mov	r0, r3
    d560:	3708      	adds	r7, #8
    d562:	46bd      	mov	sp, r7
    d564:	bd80      	pop	{r7, pc}
    d566:	bf00      	nop
    d568:	0000d321 	.word	0x0000d321
    d56c:	0000d4e9 	.word	0x0000d4e9

0000d570 <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
    d570:	b580      	push	{r7, lr}
    d572:	b084      	sub	sp, #16
    d574:	af00      	add	r7, sp, #0
    d576:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    d578:	2300      	movs	r3, #0
    d57a:	73fb      	strb	r3, [r7, #15]
    d57c:	7bfb      	ldrb	r3, [r7, #15]
    d57e:	2b07      	cmp	r3, #7
    d580:	dc0f      	bgt.n	d5a2 <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    d582:	7bfb      	ldrb	r3, [r7, #15]
    d584:	2201      	movs	r2, #1
    d586:	4619      	mov	r1, r3
    d588:	6878      	ldr	r0, [r7, #4]
    d58a:	4b08      	ldr	r3, [pc, #32]	; (d5ac <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    d58c:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    d58e:	7bfb      	ldrb	r3, [r7, #15]
    d590:	2201      	movs	r2, #1
    d592:	4619      	mov	r1, r3
    d594:	6878      	ldr	r0, [r7, #4]
    d596:	4b06      	ldr	r3, [pc, #24]	; (d5b0 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    d598:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    d59a:	7bfb      	ldrb	r3, [r7, #15]
    d59c:	3301      	adds	r3, #1
    d59e:	73fb      	strb	r3, [r7, #15]
    d5a0:	e7ec      	b.n	d57c <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    d5a2:	bf00      	nop
    d5a4:	3710      	adds	r7, #16
    d5a6:	46bd      	mov	sp, r7
    d5a8:	bd80      	pop	{r7, pc}
    d5aa:	bf00      	nop
    d5ac:	0000d6e9 	.word	0x0000d6e9
    d5b0:	0000d7cd 	.word	0x0000d7cd

0000d5b4 <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
    d5b4:	b580      	push	{r7, lr}
    d5b6:	b084      	sub	sp, #16
    d5b8:	af00      	add	r7, sp, #0
    d5ba:	6078      	str	r0, [r7, #4]
    d5bc:	460b      	mov	r3, r1
    d5be:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
    d5c0:	78fb      	ldrb	r3, [r7, #3]
    d5c2:	2b00      	cmp	r3, #0
    d5c4:	dd23      	ble.n	d60e <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
    d5c6:	2300      	movs	r3, #0
    d5c8:	73fb      	strb	r3, [r7, #15]
    d5ca:	7bfb      	ldrb	r3, [r7, #15]
    d5cc:	2b07      	cmp	r3, #7
    d5ce:	dc21      	bgt.n	d614 <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
    d5d0:	78fa      	ldrb	r2, [r7, #3]
    d5d2:	7bfb      	ldrb	r3, [r7, #15]
    d5d4:	fa42 f303 	asr.w	r3, r2, r3
    d5d8:	f003 0301 	and.w	r3, r3, #1
    d5dc:	2b00      	cmp	r3, #0
    d5de:	d00c      	beq.n	d5fa <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
    d5e0:	7bfb      	ldrb	r3, [r7, #15]
    d5e2:	2201      	movs	r2, #1
    d5e4:	4619      	mov	r1, r3
    d5e6:	6878      	ldr	r0, [r7, #4]
    d5e8:	4b0c      	ldr	r3, [pc, #48]	; (d61c <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    d5ea:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
    d5ec:	7bfb      	ldrb	r3, [r7, #15]
    d5ee:	2201      	movs	r2, #1
    d5f0:	4619      	mov	r1, r3
    d5f2:	6878      	ldr	r0, [r7, #4]
    d5f4:	4b0a      	ldr	r3, [pc, #40]	; (d620 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
    d5f6:	4798      	blx	r3
    d5f8:	e005      	b.n	d606 <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
    d5fa:	7bfb      	ldrb	r3, [r7, #15]
    d5fc:	2200      	movs	r2, #0
    d5fe:	4619      	mov	r1, r3
    d600:	6878      	ldr	r0, [r7, #4]
    d602:	4b06      	ldr	r3, [pc, #24]	; (d61c <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    d604:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
    d606:	7bfb      	ldrb	r3, [r7, #15]
    d608:	3301      	adds	r3, #1
    d60a:	73fb      	strb	r3, [r7, #15]
    d60c:	e7dd      	b.n	d5ca <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
    d60e:	6878      	ldr	r0, [r7, #4]
    d610:	4b04      	ldr	r3, [pc, #16]	; (d624 <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
    d612:	4798      	blx	r3
	}
	
}
    d614:	bf00      	nop
    d616:	3710      	adds	r7, #16
    d618:	46bd      	mov	sp, r7
    d61a:	bd80      	pop	{r7, pc}
    d61c:	0000d6e9 	.word	0x0000d6e9
    d620:	0000d7cd 	.word	0x0000d7cd
    d624:	0000d629 	.word	0x0000d629

0000d628 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
    d628:	b580      	push	{r7, lr}
    d62a:	b084      	sub	sp, #16
    d62c:	af00      	add	r7, sp, #0
    d62e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    d630:	2300      	movs	r3, #0
    d632:	73fb      	strb	r3, [r7, #15]
    d634:	7bfb      	ldrb	r3, [r7, #15]
    d636:	2b07      	cmp	r3, #7
    d638:	dc09      	bgt.n	d64e <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    d63a:	7bfb      	ldrb	r3, [r7, #15]
    d63c:	2200      	movs	r2, #0
    d63e:	4619      	mov	r1, r3
    d640:	6878      	ldr	r0, [r7, #4]
    d642:	4b05      	ldr	r3, [pc, #20]	; (d658 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    d644:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    d646:	7bfb      	ldrb	r3, [r7, #15]
    d648:	3301      	adds	r3, #1
    d64a:	73fb      	strb	r3, [r7, #15]
    d64c:	e7f2      	b.n	d634 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    d64e:	bf00      	nop
    d650:	3710      	adds	r7, #16
    d652:	46bd      	mov	sp, r7
    d654:	bd80      	pop	{r7, pc}
    d656:	bf00      	nop
    d658:	0000d6e9 	.word	0x0000d6e9

0000d65c <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    d65c:	b580      	push	{r7, lr}
    d65e:	b084      	sub	sp, #16
    d660:	af00      	add	r7, sp, #0
    d662:	6078      	str	r0, [r7, #4]
    d664:	4608      	mov	r0, r1
    d666:	4611      	mov	r1, r2
    d668:	461a      	mov	r2, r3
    d66a:	4603      	mov	r3, r0
    d66c:	70fb      	strb	r3, [r7, #3]
    d66e:	460b      	mov	r3, r1
    d670:	70bb      	strb	r3, [r7, #2]
    d672:	4613      	mov	r3, r2
    d674:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    d676:	787b      	ldrb	r3, [r7, #1]
    d678:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    d67a:	78fb      	ldrb	r3, [r7, #3]
    d67c:	4619      	mov	r1, r3
    d67e:	6878      	ldr	r0, [r7, #4]
    d680:	4b16      	ldr	r3, [pc, #88]	; (d6dc <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    d682:	4798      	blx	r3
    d684:	4603      	mov	r3, r0
    d686:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    d688:	7bfb      	ldrb	r3, [r7, #15]
    d68a:	4619      	mov	r1, r3
    d68c:	6878      	ldr	r0, [r7, #4]
    d68e:	4b14      	ldr	r3, [pc, #80]	; (d6e0 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    d690:	4798      	blx	r3
    d692:	4603      	mov	r3, r0
    d694:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    d696:	78bb      	ldrb	r3, [r7, #2]
    d698:	2b00      	cmp	r3, #0
    d69a:	d009      	beq.n	d6b0 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    d69c:	7bba      	ldrb	r2, [r7, #14]
    d69e:	7b7b      	ldrb	r3, [r7, #13]
    d6a0:	4619      	mov	r1, r3
    d6a2:	2301      	movs	r3, #1
    d6a4:	408b      	lsls	r3, r1
    d6a6:	b2db      	uxtb	r3, r3
    d6a8:	4313      	orrs	r3, r2
    d6aa:	b2db      	uxtb	r3, r3
    d6ac:	73bb      	strb	r3, [r7, #14]
    d6ae:	e00a      	b.n	d6c6 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    d6b0:	7bba      	ldrb	r2, [r7, #14]
    d6b2:	7b7b      	ldrb	r3, [r7, #13]
    d6b4:	4619      	mov	r1, r3
    d6b6:	2301      	movs	r3, #1
    d6b8:	408b      	lsls	r3, r1
    d6ba:	b2db      	uxtb	r3, r3
    d6bc:	43db      	mvns	r3, r3
    d6be:	b2db      	uxtb	r3, r3
    d6c0:	4013      	ands	r3, r2
    d6c2:	b2db      	uxtb	r3, r3
    d6c4:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    d6c6:	7bba      	ldrb	r2, [r7, #14]
    d6c8:	7bfb      	ldrb	r3, [r7, #15]
    d6ca:	4619      	mov	r1, r3
    d6cc:	6878      	ldr	r0, [r7, #4]
    d6ce:	4b05      	ldr	r3, [pc, #20]	; (d6e4 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    d6d0:	4798      	blx	r3
}
    d6d2:	bf00      	nop
    d6d4:	3710      	adds	r7, #16
    d6d6:	46bd      	mov	sp, r7
    d6d8:	bd80      	pop	{r7, pc}
    d6da:	bf00      	nop
    d6dc:	0000d413 	.word	0x0000d413
    d6e0:	0000d461 	.word	0x0000d461
    d6e4:	0000d4e9 	.word	0x0000d4e9

0000d6e8 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    d6e8:	b590      	push	{r4, r7, lr}
    d6ea:	b085      	sub	sp, #20
    d6ec:	af02      	add	r7, sp, #8
    d6ee:	6078      	str	r0, [r7, #4]
    d6f0:	460b      	mov	r3, r1
    d6f2:	70fb      	strb	r3, [r7, #3]
    d6f4:	4613      	mov	r3, r2
    d6f6:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    d6f8:	78bb      	ldrb	r3, [r7, #2]
    d6fa:	2b01      	cmp	r3, #1
    d6fc:	bf0c      	ite	eq
    d6fe:	2301      	moveq	r3, #1
    d700:	2300      	movne	r3, #0
    d702:	b2db      	uxtb	r3, r3
    d704:	461a      	mov	r2, r3
    d706:	78f9      	ldrb	r1, [r7, #3]
    d708:	2300      	movs	r3, #0
    d70a:	9300      	str	r3, [sp, #0]
    d70c:	2300      	movs	r3, #0
    d70e:	6878      	ldr	r0, [r7, #4]
    d710:	4c02      	ldr	r4, [pc, #8]	; (d71c <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    d712:	47a0      	blx	r4
}
    d714:	bf00      	nop
    d716:	370c      	adds	r7, #12
    d718:	46bd      	mov	sp, r7
    d71a:	bd90      	pop	{r4, r7, pc}
    d71c:	0000d65d 	.word	0x0000d65d

0000d720 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
    d720:	b590      	push	{r4, r7, lr}
    d722:	b085      	sub	sp, #20
    d724:	af00      	add	r7, sp, #0
    d726:	6078      	str	r0, [r7, #4]
    d728:	460b      	mov	r3, r1
    d72a:	70fb      	strb	r3, [r7, #3]
    d72c:	4613      	mov	r3, r2
    d72e:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
    d730:	78fb      	ldrb	r3, [r7, #3]
    d732:	4619      	mov	r1, r3
    d734:	6878      	ldr	r0, [r7, #4]
    d736:	4b21      	ldr	r3, [pc, #132]	; (d7bc <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
    d738:	4798      	blx	r3
    d73a:	4603      	mov	r3, r0
    d73c:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
    d73e:	78f9      	ldrb	r1, [r7, #3]
    d740:	230a      	movs	r3, #10
    d742:	220a      	movs	r2, #10
    d744:	6878      	ldr	r0, [r7, #4]
    d746:	4c1e      	ldr	r4, [pc, #120]	; (d7c0 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    d748:	47a0      	blx	r4
    d74a:	4603      	mov	r3, r0
    d74c:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
    d74e:	7bfb      	ldrb	r3, [r7, #15]
    d750:	4619      	mov	r1, r3
    d752:	6878      	ldr	r0, [r7, #4]
    d754:	4b1b      	ldr	r3, [pc, #108]	; (d7c4 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
    d756:	4798      	blx	r3
    d758:	4603      	mov	r3, r0
    d75a:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
    d75c:	78bb      	ldrb	r3, [r7, #2]
    d75e:	2b00      	cmp	r3, #0
    d760:	d009      	beq.n	d776 <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
    d762:	7bba      	ldrb	r2, [r7, #14]
    d764:	7b7b      	ldrb	r3, [r7, #13]
    d766:	4619      	mov	r1, r3
    d768:	2301      	movs	r3, #1
    d76a:	408b      	lsls	r3, r1
    d76c:	b2db      	uxtb	r3, r3
    d76e:	4313      	orrs	r3, r2
    d770:	b2db      	uxtb	r3, r3
    d772:	73bb      	strb	r3, [r7, #14]
    d774:	e00a      	b.n	d78c <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
    d776:	7bba      	ldrb	r2, [r7, #14]
    d778:	7b7b      	ldrb	r3, [r7, #13]
    d77a:	4619      	mov	r1, r3
    d77c:	2301      	movs	r3, #1
    d77e:	408b      	lsls	r3, r1
    d780:	b2db      	uxtb	r3, r3
    d782:	43db      	mvns	r3, r3
    d784:	b2db      	uxtb	r3, r3
    d786:	4013      	ands	r3, r2
    d788:	b2db      	uxtb	r3, r3
    d78a:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
    d78c:	78f9      	ldrb	r1, [r7, #3]
    d78e:	2309      	movs	r3, #9
    d790:	2209      	movs	r2, #9
    d792:	6878      	ldr	r0, [r7, #4]
    d794:	4c0a      	ldr	r4, [pc, #40]	; (d7c0 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    d796:	47a0      	blx	r4
    d798:	4603      	mov	r3, r0
    d79a:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
    d79c:	7bba      	ldrb	r2, [r7, #14]
    d79e:	7bfb      	ldrb	r3, [r7, #15]
    d7a0:	4619      	mov	r1, r3
    d7a2:	6878      	ldr	r0, [r7, #4]
    d7a4:	4b08      	ldr	r3, [pc, #32]	; (d7c8 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
    d7a6:	4798      	blx	r3
    d7a8:	4603      	mov	r3, r0
    d7aa:	2b00      	cmp	r3, #0
    d7ac:	bf0c      	ite	eq
    d7ae:	2301      	moveq	r3, #1
    d7b0:	2300      	movne	r3, #0
    d7b2:	b2db      	uxtb	r3, r3
}
    d7b4:	4618      	mov	r0, r3
    d7b6:	3714      	adds	r7, #20
    d7b8:	46bd      	mov	sp, r7
    d7ba:	bd90      	pop	{r4, r7, pc}
    d7bc:	0000d413 	.word	0x0000d413
    d7c0:	0000d431 	.word	0x0000d431
    d7c4:	0000d461 	.word	0x0000d461
    d7c8:	0000d4e9 	.word	0x0000d4e9

0000d7cc <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    d7cc:	b590      	push	{r4, r7, lr}
    d7ce:	b085      	sub	sp, #20
    d7d0:	af02      	add	r7, sp, #8
    d7d2:	6078      	str	r0, [r7, #4]
    d7d4:	460b      	mov	r3, r1
    d7d6:	70fb      	strb	r3, [r7, #3]
    d7d8:	4613      	mov	r3, r2
    d7da:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    d7dc:	78ba      	ldrb	r2, [r7, #2]
    d7de:	78f9      	ldrb	r1, [r7, #3]
    d7e0:	2306      	movs	r3, #6
    d7e2:	9300      	str	r3, [sp, #0]
    d7e4:	2306      	movs	r3, #6
    d7e6:	6878      	ldr	r0, [r7, #4]
    d7e8:	4c02      	ldr	r4, [pc, #8]	; (d7f4 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    d7ea:	47a0      	blx	r4
}
    d7ec:	bf00      	nop
    d7ee:	370c      	adds	r7, #12
    d7f0:	46bd      	mov	sp, r7
    d7f2:	bd90      	pop	{r4, r7, pc}
    d7f4:	0000d65d 	.word	0x0000d65d

0000d7f8 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    d7f8:	b480      	push	{r7}
    d7fa:	b083      	sub	sp, #12
    d7fc:	af00      	add	r7, sp, #0
    d7fe:	6078      	str	r0, [r7, #4]
    d800:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    d802:	687b      	ldr	r3, [r7, #4]
    d804:	683a      	ldr	r2, [r7, #0]
    d806:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
    d808:	687b      	ldr	r3, [r7, #4]
    d80a:	68db      	ldr	r3, [r3, #12]
    d80c:	2200      	movs	r2, #0
    d80e:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
    d810:	4a06      	ldr	r2, [pc, #24]	; (d82c <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    d812:	687b      	ldr	r3, [r7, #4]
    d814:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    d816:	687b      	ldr	r3, [r7, #4]
    d818:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d81c:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    d81e:	687b      	ldr	r3, [r7, #4]
    d820:	4618      	mov	r0, r3
    d822:	370c      	adds	r7, #12
    d824:	46bd      	mov	sp, r7
    d826:	bc80      	pop	{r7}
    d828:	4770      	bx	lr
    d82a:	bf00      	nop
    d82c:	200010e4 	.word	0x200010e4

0000d830 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    d830:	b480      	push	{r7}
    d832:	b083      	sub	sp, #12
    d834:	af00      	add	r7, sp, #0
    d836:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    d838:	687b      	ldr	r3, [r7, #4]
    d83a:	2200      	movs	r2, #0
    d83c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    d83e:	687b      	ldr	r3, [r7, #4]
    d840:	4618      	mov	r0, r3
    d842:	370c      	adds	r7, #12
    d844:	46bd      	mov	sp, r7
    d846:	bc80      	pop	{r7}
    d848:	4770      	bx	lr
	...

0000d84c <_ZL9InitArrayv>:


static void InitArray(){
    d84c:	b480      	push	{r7}
    d84e:	b083      	sub	sp, #12
    d850:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    d852:	2301      	movs	r3, #1
    d854:	607b      	str	r3, [r7, #4]
    d856:	687b      	ldr	r3, [r7, #4]
    d858:	2b1f      	cmp	r3, #31
    d85a:	dc34      	bgt.n	d8c6 <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    d85c:	491e      	ldr	r1, [pc, #120]	; (d8d8 <_ZL9InitArrayv+0x8c>)
    d85e:	687a      	ldr	r2, [r7, #4]
    d860:	4613      	mov	r3, r2
    d862:	009b      	lsls	r3, r3, #2
    d864:	4413      	add	r3, r2
    d866:	009b      	lsls	r3, r3, #2
    d868:	440b      	add	r3, r1
    d86a:	2200      	movs	r2, #0
    d86c:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    d86e:	491a      	ldr	r1, [pc, #104]	; (d8d8 <_ZL9InitArrayv+0x8c>)
    d870:	687a      	ldr	r2, [r7, #4]
    d872:	4613      	mov	r3, r2
    d874:	009b      	lsls	r3, r3, #2
    d876:	4413      	add	r3, r2
    d878:	009b      	lsls	r3, r3, #2
    d87a:	440b      	add	r3, r1
    d87c:	330c      	adds	r3, #12
    d87e:	2200      	movs	r2, #0
    d880:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    d882:	687b      	ldr	r3, [r7, #4]
    d884:	1e5a      	subs	r2, r3, #1
    d886:	6879      	ldr	r1, [r7, #4]
    d888:	460b      	mov	r3, r1
    d88a:	009b      	lsls	r3, r3, #2
    d88c:	440b      	add	r3, r1
    d88e:	009b      	lsls	r3, r3, #2
    d890:	4911      	ldr	r1, [pc, #68]	; (d8d8 <_ZL9InitArrayv+0x8c>)
    d892:	4419      	add	r1, r3
    d894:	4810      	ldr	r0, [pc, #64]	; (d8d8 <_ZL9InitArrayv+0x8c>)
    d896:	4613      	mov	r3, r2
    d898:	009b      	lsls	r3, r3, #2
    d89a:	4413      	add	r3, r2
    d89c:	009b      	lsls	r3, r3, #2
    d89e:	4403      	add	r3, r0
    d8a0:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
    d8a2:	4a0e      	ldr	r2, [pc, #56]	; (d8dc <_ZL9InitArrayv+0x90>)
    d8a4:	687b      	ldr	r3, [r7, #4]
    d8a6:	2100      	movs	r1, #0
    d8a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
    d8ac:	687b      	ldr	r3, [r7, #4]
    d8ae:	3b01      	subs	r3, #1
    d8b0:	687a      	ldr	r2, [r7, #4]
    d8b2:	0092      	lsls	r2, r2, #2
    d8b4:	4909      	ldr	r1, [pc, #36]	; (d8dc <_ZL9InitArrayv+0x90>)
    d8b6:	440a      	add	r2, r1
    d8b8:	4908      	ldr	r1, [pc, #32]	; (d8dc <_ZL9InitArrayv+0x90>)
    d8ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
    d8be:	687b      	ldr	r3, [r7, #4]
    d8c0:	3301      	adds	r3, #1
    d8c2:	607b      	str	r3, [r7, #4]
    d8c4:	e7c7      	b.n	d856 <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
    d8c6:	4b06      	ldr	r3, [pc, #24]	; (d8e0 <_ZL9InitArrayv+0x94>)
    d8c8:	2201      	movs	r2, #1
    d8ca:	701a      	strb	r2, [r3, #0]
		
}
    d8cc:	bf00      	nop
    d8ce:	370c      	adds	r7, #12
    d8d0:	46bd      	mov	sp, r7
    d8d2:	bc80      	pop	{r7}
    d8d4:	4770      	bx	lr
    d8d6:	bf00      	nop
    d8d8:	200010e8 	.word	0x200010e8
    d8dc:	20001368 	.word	0x20001368
    d8e0:	200013e8 	.word	0x200013e8

0000d8e4 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    d8e4:	b580      	push	{r7, lr}
    d8e6:	b082      	sub	sp, #8
    d8e8:	af00      	add	r7, sp, #0
    d8ea:	6078      	str	r0, [r7, #4]
	ticks=0;
    d8ec:	687b      	ldr	r3, [r7, #4]
    d8ee:	2200      	movs	r2, #0
    d8f0:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    d8f2:	4b0d      	ldr	r3, [pc, #52]	; (d928 <_ZN11Timer_Class4InitEv+0x44>)
    d8f4:	781b      	ldrb	r3, [r3, #0]
    d8f6:	f083 0301 	eor.w	r3, r3, #1
    d8fa:	b2db      	uxtb	r3, r3
    d8fc:	2b00      	cmp	r3, #0
    d8fe:	d001      	beq.n	d904 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    d900:	4b0a      	ldr	r3, [pc, #40]	; (d92c <_ZN11Timer_Class4InitEv+0x48>)
    d902:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
    d904:	6878      	ldr	r0, [r7, #4]
    d906:	4b0a      	ldr	r3, [pc, #40]	; (d930 <_ZN11Timer_Class4InitEv+0x4c>)
    d908:	4798      	blx	r3
    d90a:	4603      	mov	r3, r0
    d90c:	2b00      	cmp	r3, #0
    d90e:	bf0c      	ite	eq
    d910:	2301      	moveq	r3, #1
    d912:	2300      	movne	r3, #0
    d914:	b2da      	uxtb	r2, r3
    d916:	687b      	ldr	r3, [r7, #4]
    d918:	709a      	strb	r2, [r3, #2]
	return isOK;
    d91a:	687b      	ldr	r3, [r7, #4]
    d91c:	789b      	ldrb	r3, [r3, #2]
    d91e:	b2db      	uxtb	r3, r3
}
    d920:	4618      	mov	r0, r3
    d922:	3708      	adds	r7, #8
    d924:	46bd      	mov	sp, r7
    d926:	bd80      	pop	{r7, pc}
    d928:	200013e8 	.word	0x200013e8
    d92c:	0000d84d 	.word	0x0000d84d
    d930:	0000d935 	.word	0x0000d935

0000d934 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
    d934:	b580      	push	{r7, lr}
    d936:	b084      	sub	sp, #16
    d938:	af00      	add	r7, sp, #0
    d93a:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    d93c:	687b      	ldr	r3, [r7, #4]
    d93e:	68db      	ldr	r3, [r3, #12]
    d940:	4618      	mov	r0, r3
    d942:	4b04      	ldr	r3, [pc, #16]	; (d954 <_ZN11Timer_Class5StartEv+0x20>)
    d944:	4798      	blx	r3
    d946:	60f8      	str	r0, [r7, #12]
	return status;
    d948:	68fb      	ldr	r3, [r7, #12]
	
}
    d94a:	4618      	mov	r0, r3
    d94c:	3710      	adds	r7, #16
    d94e:	46bd      	mov	sp, r7
    d950:	bd80      	pop	{r7, pc}
    d952:	bf00      	nop
    d954:	00002a65 	.word	0x00002a65

0000d958 <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
    d958:	b580      	push	{r7, lr}
    d95a:	b084      	sub	sp, #16
    d95c:	af00      	add	r7, sp, #0
    d95e:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    d960:	687b      	ldr	r3, [r7, #4]
    d962:	68db      	ldr	r3, [r3, #12]
    d964:	4618      	mov	r0, r3
    d966:	4b05      	ldr	r3, [pc, #20]	; (d97c <_ZN11Timer_Class4StopEv+0x24>)
    d968:	4798      	blx	r3
    d96a:	60f8      	str	r0, [r7, #12]
	timeout=0;
    d96c:	687b      	ldr	r3, [r7, #4]
    d96e:	2200      	movs	r2, #0
    d970:	705a      	strb	r2, [r3, #1]
	return status;
    d972:	68fb      	ldr	r3, [r7, #12]
}
    d974:	4618      	mov	r0, r3
    d976:	3710      	adds	r7, #16
    d978:	46bd      	mov	sp, r7
    d97a:	bd80      	pop	{r7, pc}
    d97c:	00002acd 	.word	0x00002acd

0000d980 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    d980:	b580      	push	{r7, lr}
    d982:	b086      	sub	sp, #24
    d984:	af00      	add	r7, sp, #0
    d986:	60f8      	str	r0, [r7, #12]
    d988:	60b9      	str	r1, [r7, #8]
    d98a:	607a      	str	r2, [r7, #4]
    d98c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
    d98e:	68b9      	ldr	r1, [r7, #8]
    d990:	68f8      	ldr	r0, [r7, #12]
    d992:	4b0e      	ldr	r3, [pc, #56]	; (d9cc <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    d994:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
    d996:	68fb      	ldr	r3, [r7, #12]
    d998:	699b      	ldr	r3, [r3, #24]
    d99a:	687a      	ldr	r2, [r7, #4]
    d99c:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    d99e:	68fb      	ldr	r3, [r7, #12]
    d9a0:	699b      	ldr	r3, [r3, #24]
    d9a2:	68ba      	ldr	r2, [r7, #8]
    d9a4:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    d9a6:	68fb      	ldr	r3, [r7, #12]
    d9a8:	699b      	ldr	r3, [r3, #24]
    d9aa:	78fa      	ldrb	r2, [r7, #3]
    d9ac:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    d9ae:	68fb      	ldr	r3, [r7, #12]
    d9b0:	68da      	ldr	r2, [r3, #12]
    d9b2:	68fb      	ldr	r3, [r7, #12]
    d9b4:	699b      	ldr	r3, [r3, #24]
    d9b6:	4619      	mov	r1, r3
    d9b8:	4610      	mov	r0, r2
    d9ba:	4b05      	ldr	r3, [pc, #20]	; (d9d0 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
    d9bc:	4798      	blx	r3
    d9be:	6178      	str	r0, [r7, #20]
	
	return status;
    d9c0:	697b      	ldr	r3, [r7, #20]
}
    d9c2:	4618      	mov	r0, r3
    d9c4:	3718      	adds	r7, #24
    d9c6:	46bd      	mov	sp, r7
    d9c8:	bd80      	pop	{r7, pc}
    d9ca:	bf00      	nop
    d9cc:	0000db5d 	.word	0x0000db5d
    d9d0:	00002b39 	.word	0x00002b39

0000d9d4 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
    d9d4:	b580      	push	{r7, lr}
    d9d6:	b086      	sub	sp, #24
    d9d8:	af00      	add	r7, sp, #0
    d9da:	60f8      	str	r0, [r7, #12]
    d9dc:	60b9      	str	r1, [r7, #8]
    d9de:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
    d9e0:	687a      	ldr	r2, [r7, #4]
    d9e2:	68b9      	ldr	r1, [r7, #8]
    d9e4:	68f8      	ldr	r0, [r7, #12]
    d9e6:	4b0c      	ldr	r3, [pc, #48]	; (da18 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
    d9e8:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
    d9ea:	68fb      	ldr	r3, [r7, #12]
    d9ec:	68db      	ldr	r3, [r3, #12]
    d9ee:	681b      	ldr	r3, [r3, #0]
    d9f0:	699b      	ldr	r3, [r3, #24]
    d9f2:	68fa      	ldr	r2, [r7, #12]
    d9f4:	68d2      	ldr	r2, [r2, #12]
    d9f6:	3204      	adds	r2, #4
    d9f8:	4610      	mov	r0, r2
    d9fa:	4798      	blx	r3
    d9fc:	4603      	mov	r3, r0
    d9fe:	2b00      	cmp	r3, #0
    da00:	d105      	bne.n	da0e <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
    da02:	68fb      	ldr	r3, [r7, #12]
    da04:	68db      	ldr	r3, [r3, #12]
    da06:	4618      	mov	r0, r3
    da08:	4b04      	ldr	r3, [pc, #16]	; (da1c <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
    da0a:	4798      	blx	r3
    da0c:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
    da0e:	697b      	ldr	r3, [r7, #20]
}
    da10:	4618      	mov	r0, r3
    da12:	3718      	adds	r7, #24
    da14:	46bd      	mov	sp, r7
    da16:	bd80      	pop	{r7, pc}
    da18:	0000da21 	.word	0x0000da21
    da1c:	00002a65 	.word	0x00002a65

0000da20 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
		status=timer_start(timer_descr);
	}
	return status;
}

int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    da20:	b590      	push	{r4, r7, lr}
    da22:	b087      	sub	sp, #28
    da24:	af00      	add	r7, sp, #0
    da26:	60f8      	str	r0, [r7, #12]
    da28:	60b9      	str	r1, [r7, #8]
    da2a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    da2c:	2301      	movs	r3, #1
    da2e:	687a      	ldr	r2, [r7, #4]
    da30:	68b9      	ldr	r1, [r7, #8]
    da32:	68f8      	ldr	r0, [r7, #12]
    da34:	4c03      	ldr	r4, [pc, #12]	; (da44 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    da36:	47a0      	blx	r4
    da38:	6178      	str	r0, [r7, #20]
		return status;
    da3a:	697b      	ldr	r3, [r7, #20]
}
    da3c:	4618      	mov	r0, r3
    da3e:	371c      	adds	r7, #28
    da40:	46bd      	mov	sp, r7
    da42:	bd90      	pop	{r4, r7, pc}
    da44:	0000d981 	.word	0x0000d981

0000da48 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
    da48:	b580      	push	{r7, lr}
    da4a:	b082      	sub	sp, #8
    da4c:	af00      	add	r7, sp, #0
    da4e:	6078      	str	r0, [r7, #4]
    da50:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    da52:	6839      	ldr	r1, [r7, #0]
    da54:	6878      	ldr	r0, [r7, #4]
    da56:	4b0f      	ldr	r3, [pc, #60]	; (da94 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    da58:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    da5a:	687b      	ldr	r3, [r7, #4]
    da5c:	68db      	ldr	r3, [r3, #12]
    da5e:	f103 0218 	add.w	r2, r3, #24
    da62:	687b      	ldr	r3, [r7, #4]
    da64:	699b      	ldr	r3, [r3, #24]
    da66:	4619      	mov	r1, r3
    da68:	4610      	mov	r0, r2
    da6a:	4b0b      	ldr	r3, [pc, #44]	; (da98 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    da6c:	4798      	blx	r3
    da6e:	4603      	mov	r3, r0
    da70:	2b00      	cmp	r3, #0
    da72:	d007      	beq.n	da84 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    da74:	687b      	ldr	r3, [r7, #4]
    da76:	68da      	ldr	r2, [r3, #12]
    da78:	687b      	ldr	r3, [r7, #4]
    da7a:	699b      	ldr	r3, [r3, #24]
    da7c:	4619      	mov	r1, r3
    da7e:	4610      	mov	r0, r2
    da80:	4b06      	ldr	r3, [pc, #24]	; (da9c <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    da82:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    da84:	687b      	ldr	r3, [r7, #4]
    da86:	699b      	ldr	r3, [r3, #24]
    da88:	2200      	movs	r2, #0
    da8a:	60da      	str	r2, [r3, #12]
}
    da8c:	bf00      	nop
    da8e:	3708      	adds	r7, #8
    da90:	46bd      	mov	sp, r7
    da92:	bd80      	pop	{r7, pc}
    da94:	0000dbdd 	.word	0x0000dbdd
    da98:	00003825 	.word	0x00003825
    da9c:	00002c3d 	.word	0x00002c3d

0000daa0 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    daa0:	b590      	push	{r4, r7, lr}
    daa2:	b087      	sub	sp, #28
    daa4:	af00      	add	r7, sp, #0
    daa6:	60f8      	str	r0, [r7, #12]
    daa8:	60b9      	str	r1, [r7, #8]
    daaa:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    daac:	2300      	movs	r3, #0
    daae:	687a      	ldr	r2, [r7, #4]
    dab0:	68b9      	ldr	r1, [r7, #8]
    dab2:	68f8      	ldr	r0, [r7, #12]
    dab4:	4c0c      	ldr	r4, [pc, #48]	; (dae8 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    dab6:	47a0      	blx	r4
    dab8:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    daba:	68fb      	ldr	r3, [r7, #12]
    dabc:	68db      	ldr	r3, [r3, #12]
    dabe:	681b      	ldr	r3, [r3, #0]
    dac0:	699b      	ldr	r3, [r3, #24]
    dac2:	68fa      	ldr	r2, [r7, #12]
    dac4:	68d2      	ldr	r2, [r2, #12]
    dac6:	3204      	adds	r2, #4
    dac8:	4610      	mov	r0, r2
    daca:	4798      	blx	r3
    dacc:	4603      	mov	r3, r0
    dace:	2b00      	cmp	r3, #0
    dad0:	d105      	bne.n	dade <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    dad2:	68fb      	ldr	r3, [r7, #12]
    dad4:	68db      	ldr	r3, [r3, #12]
    dad6:	4618      	mov	r0, r3
    dad8:	4b04      	ldr	r3, [pc, #16]	; (daec <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    dada:	4798      	blx	r3
    dadc:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    dade:	697b      	ldr	r3, [r7, #20]
}
    dae0:	4618      	mov	r0, r3
    dae2:	371c      	adds	r7, #28
    dae4:	46bd      	mov	sp, r7
    dae6:	bd90      	pop	{r4, r7, pc}
    dae8:	0000d981 	.word	0x0000d981
    daec:	00002a65 	.word	0x00002a65

0000daf0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    daf0:	b480      	push	{r7}
    daf2:	b085      	sub	sp, #20
    daf4:	af00      	add	r7, sp, #0
    daf6:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    daf8:	2300      	movs	r3, #0
    dafa:	73fb      	strb	r3, [r7, #15]
    dafc:	7bfb      	ldrb	r3, [r7, #15]
    dafe:	2b1f      	cmp	r3, #31
    db00:	dc23      	bgt.n	db4a <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    db02:	687b      	ldr	r3, [r7, #4]
    db04:	7f1a      	ldrb	r2, [r3, #28]
    db06:	7bfb      	ldrb	r3, [r7, #15]
    db08:	4413      	add	r3, r2
    db0a:	b2db      	uxtb	r3, r3
    db0c:	f003 031f 	and.w	r3, r3, #31
    db10:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    db12:	7bba      	ldrb	r2, [r7, #14]
    db14:	4910      	ldr	r1, [pc, #64]	; (db58 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    db16:	4613      	mov	r3, r2
    db18:	009b      	lsls	r3, r3, #2
    db1a:	4413      	add	r3, r2
    db1c:	009b      	lsls	r3, r3, #2
    db1e:	440b      	add	r3, r1
    db20:	330c      	adds	r3, #12
    db22:	681b      	ldr	r3, [r3, #0]
    db24:	2b00      	cmp	r3, #0
    db26:	d10c      	bne.n	db42 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
    db28:	7bba      	ldrb	r2, [r7, #14]
    db2a:	4613      	mov	r3, r2
    db2c:	009b      	lsls	r3, r3, #2
    db2e:	4413      	add	r3, r2
    db30:	009b      	lsls	r3, r3, #2
    db32:	4a09      	ldr	r2, [pc, #36]	; (db58 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    db34:	441a      	add	r2, r3
    db36:	687b      	ldr	r3, [r7, #4]
    db38:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    db3a:	687b      	ldr	r3, [r7, #4]
    db3c:	7bba      	ldrb	r2, [r7, #14]
    db3e:	771a      	strb	r2, [r3, #28]
			return;
    db40:	e006      	b.n	db50 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    db42:	7bfb      	ldrb	r3, [r7, #15]
    db44:	3301      	adds	r3, #1
    db46:	73fb      	strb	r3, [r7, #15]
    db48:	e7d8      	b.n	dafc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    db4a:	687b      	ldr	r3, [r7, #4]
    db4c:	4a02      	ldr	r2, [pc, #8]	; (db58 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    db4e:	619a      	str	r2, [r3, #24]

}
    db50:	3714      	adds	r7, #20
    db52:	46bd      	mov	sp, r7
    db54:	bc80      	pop	{r7}
    db56:	4770      	bx	lr
    db58:	200010e8 	.word	0x200010e8

0000db5c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
    db5c:	b580      	push	{r7, lr}
    db5e:	b084      	sub	sp, #16
    db60:	af00      	add	r7, sp, #0
    db62:	6078      	str	r0, [r7, #4]
    db64:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    db66:	2300      	movs	r3, #0
    db68:	73fb      	strb	r3, [r7, #15]
    db6a:	7bfb      	ldrb	r3, [r7, #15]
    db6c:	2b1f      	cmp	r3, #31
    db6e:	dc28      	bgt.n	dbc2 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    db70:	687b      	ldr	r3, [r7, #4]
    db72:	7f1a      	ldrb	r2, [r3, #28]
    db74:	7bfb      	ldrb	r3, [r7, #15]
    db76:	4413      	add	r3, r2
    db78:	b2db      	uxtb	r3, r3
    db7a:	f003 031f 	and.w	r3, r3, #31
    db7e:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
    db80:	7bba      	ldrb	r2, [r7, #14]
    db82:	4913      	ldr	r1, [pc, #76]	; (dbd0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    db84:	4613      	mov	r3, r2
    db86:	009b      	lsls	r3, r3, #2
    db88:	4413      	add	r3, r2
    db8a:	009b      	lsls	r3, r3, #2
    db8c:	440b      	add	r3, r1
    db8e:	330c      	adds	r3, #12
    db90:	681a      	ldr	r2, [r3, #0]
    db92:	683b      	ldr	r3, [r7, #0]
    db94:	429a      	cmp	r2, r3
    db96:	d110      	bne.n	dbba <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
    db98:	6839      	ldr	r1, [r7, #0]
    db9a:	6878      	ldr	r0, [r7, #4]
    db9c:	4b0d      	ldr	r3, [pc, #52]	; (dbd4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
    db9e:	4798      	blx	r3
			task=&taskArray[j];
    dba0:	7bba      	ldrb	r2, [r7, #14]
    dba2:	4613      	mov	r3, r2
    dba4:	009b      	lsls	r3, r3, #2
    dba6:	4413      	add	r3, r2
    dba8:	009b      	lsls	r3, r3, #2
    dbaa:	4a09      	ldr	r2, [pc, #36]	; (dbd0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    dbac:	441a      	add	r2, r3
    dbae:	687b      	ldr	r3, [r7, #4]
    dbb0:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    dbb2:	687b      	ldr	r3, [r7, #4]
    dbb4:	7bba      	ldrb	r2, [r7, #14]
    dbb6:	771a      	strb	r2, [r3, #28]
			return;
    dbb8:	e006      	b.n	dbc8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dbba:	7bfb      	ldrb	r3, [r7, #15]
    dbbc:	3301      	adds	r3, #1
    dbbe:	73fb      	strb	r3, [r7, #15]
    dbc0:	e7d3      	b.n	db6a <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
    dbc2:	6878      	ldr	r0, [r7, #4]
    dbc4:	4b04      	ldr	r3, [pc, #16]	; (dbd8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
    dbc6:	4798      	blx	r3
	//task=&taskArray[0];

}
    dbc8:	3710      	adds	r7, #16
    dbca:	46bd      	mov	sp, r7
    dbcc:	bd80      	pop	{r7, pc}
    dbce:	bf00      	nop
    dbd0:	200010e8 	.word	0x200010e8
    dbd4:	0000da49 	.word	0x0000da49
    dbd8:	0000daf1 	.word	0x0000daf1

0000dbdc <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    dbdc:	b480      	push	{r7}
    dbde:	b085      	sub	sp, #20
    dbe0:	af00      	add	r7, sp, #0
    dbe2:	6078      	str	r0, [r7, #4]
    dbe4:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dbe6:	2300      	movs	r3, #0
    dbe8:	73fb      	strb	r3, [r7, #15]
    dbea:	7bfb      	ldrb	r3, [r7, #15]
    dbec:	2b1f      	cmp	r3, #31
    dbee:	dc19      	bgt.n	dc24 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    dbf0:	7bfa      	ldrb	r2, [r7, #15]
    dbf2:	490f      	ldr	r1, [pc, #60]	; (dc30 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    dbf4:	4613      	mov	r3, r2
    dbf6:	009b      	lsls	r3, r3, #2
    dbf8:	4413      	add	r3, r2
    dbfa:	009b      	lsls	r3, r3, #2
    dbfc:	440b      	add	r3, r1
    dbfe:	330c      	adds	r3, #12
    dc00:	681a      	ldr	r2, [r3, #0]
    dc02:	683b      	ldr	r3, [r7, #0]
    dc04:	429a      	cmp	r2, r3
    dc06:	d109      	bne.n	dc1c <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    dc08:	7bfa      	ldrb	r2, [r7, #15]
    dc0a:	4613      	mov	r3, r2
    dc0c:	009b      	lsls	r3, r3, #2
    dc0e:	4413      	add	r3, r2
    dc10:	009b      	lsls	r3, r3, #2
    dc12:	4a07      	ldr	r2, [pc, #28]	; (dc30 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    dc14:	441a      	add	r2, r3
    dc16:	687b      	ldr	r3, [r7, #4]
    dc18:	619a      	str	r2, [r3, #24]
			return;
    dc1a:	e004      	b.n	dc26 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dc1c:	7bfb      	ldrb	r3, [r7, #15]
    dc1e:	3301      	adds	r3, #1
    dc20:	73fb      	strb	r3, [r7, #15]
    dc22:	e7e2      	b.n	dbea <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    dc24:	bf00      	nop
}
    dc26:	3714      	adds	r7, #20
    dc28:	46bd      	mov	sp, r7
    dc2a:	bc80      	pop	{r7}
    dc2c:	4770      	bx	lr
    dc2e:	bf00      	nop
    dc30:	200010e8 	.word	0x200010e8

0000dc34 <_Z41__static_initialization_and_destruction_0ii>:
    dc34:	b580      	push	{r7, lr}
    dc36:	b082      	sub	sp, #8
    dc38:	af00      	add	r7, sp, #0
    dc3a:	6078      	str	r0, [r7, #4]
    dc3c:	6039      	str	r1, [r7, #0]
    dc3e:	687b      	ldr	r3, [r7, #4]
    dc40:	2b01      	cmp	r3, #1
    dc42:	d14c      	bne.n	dcde <_Z41__static_initialization_and_destruction_0ii+0xaa>
    dc44:	683b      	ldr	r3, [r7, #0]
    dc46:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dc4a:	4293      	cmp	r3, r2
    dc4c:	d147      	bne.n	dcde <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    dc4e:	4926      	ldr	r1, [pc, #152]	; (dce8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    dc50:	4826      	ldr	r0, [pc, #152]	; (dcec <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    dc52:	4b27      	ldr	r3, [pc, #156]	; (dcf0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dc54:	4798      	blx	r3
    dc56:	4a27      	ldr	r2, [pc, #156]	; (dcf4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dc58:	4927      	ldr	r1, [pc, #156]	; (dcf8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dc5a:	4824      	ldr	r0, [pc, #144]	; (dcec <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    dc5c:	4b27      	ldr	r3, [pc, #156]	; (dcfc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dc5e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    dc60:	4927      	ldr	r1, [pc, #156]	; (dd00 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    dc62:	4828      	ldr	r0, [pc, #160]	; (dd04 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dc64:	4b22      	ldr	r3, [pc, #136]	; (dcf0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dc66:	4798      	blx	r3
    dc68:	4a22      	ldr	r2, [pc, #136]	; (dcf4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dc6a:	4923      	ldr	r1, [pc, #140]	; (dcf8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dc6c:	4825      	ldr	r0, [pc, #148]	; (dd04 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dc6e:	4b23      	ldr	r3, [pc, #140]	; (dcfc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dc70:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    dc72:	4925      	ldr	r1, [pc, #148]	; (dd08 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    dc74:	4825      	ldr	r0, [pc, #148]	; (dd0c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    dc76:	4b1e      	ldr	r3, [pc, #120]	; (dcf0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dc78:	4798      	blx	r3
    dc7a:	4a1e      	ldr	r2, [pc, #120]	; (dcf4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dc7c:	491e      	ldr	r1, [pc, #120]	; (dcf8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dc7e:	4823      	ldr	r0, [pc, #140]	; (dd0c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    dc80:	4b1e      	ldr	r3, [pc, #120]	; (dcfc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dc82:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    dc84:	4922      	ldr	r1, [pc, #136]	; (dd10 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    dc86:	4823      	ldr	r0, [pc, #140]	; (dd14 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    dc88:	4b19      	ldr	r3, [pc, #100]	; (dcf0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dc8a:	4798      	blx	r3
    dc8c:	4a19      	ldr	r2, [pc, #100]	; (dcf4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dc8e:	491a      	ldr	r1, [pc, #104]	; (dcf8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dc90:	4820      	ldr	r0, [pc, #128]	; (dd14 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    dc92:	4b1a      	ldr	r3, [pc, #104]	; (dcfc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dc94:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    dc96:	4920      	ldr	r1, [pc, #128]	; (dd18 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    dc98:	4820      	ldr	r0, [pc, #128]	; (dd1c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    dc9a:	4b15      	ldr	r3, [pc, #84]	; (dcf0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dc9c:	4798      	blx	r3
    dc9e:	4a15      	ldr	r2, [pc, #84]	; (dcf4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dca0:	4915      	ldr	r1, [pc, #84]	; (dcf8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dca2:	481e      	ldr	r0, [pc, #120]	; (dd1c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    dca4:	4b15      	ldr	r3, [pc, #84]	; (dcfc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dca6:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    dca8:	491d      	ldr	r1, [pc, #116]	; (dd20 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    dcaa:	481e      	ldr	r0, [pc, #120]	; (dd24 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    dcac:	4b10      	ldr	r3, [pc, #64]	; (dcf0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dcae:	4798      	blx	r3
    dcb0:	4a10      	ldr	r2, [pc, #64]	; (dcf4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dcb2:	4911      	ldr	r1, [pc, #68]	; (dcf8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dcb4:	481b      	ldr	r0, [pc, #108]	; (dd24 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    dcb6:	4b11      	ldr	r3, [pc, #68]	; (dcfc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dcb8:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    dcba:	491b      	ldr	r1, [pc, #108]	; (dd28 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    dcbc:	481b      	ldr	r0, [pc, #108]	; (dd2c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    dcbe:	4b0c      	ldr	r3, [pc, #48]	; (dcf0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dcc0:	4798      	blx	r3
    dcc2:	4a0c      	ldr	r2, [pc, #48]	; (dcf4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dcc4:	490c      	ldr	r1, [pc, #48]	; (dcf8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dcc6:	4819      	ldr	r0, [pc, #100]	; (dd2c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    dcc8:	4b0c      	ldr	r3, [pc, #48]	; (dcfc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dcca:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    dccc:	4918      	ldr	r1, [pc, #96]	; (dd30 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    dcce:	4819      	ldr	r0, [pc, #100]	; (dd34 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    dcd0:	4b07      	ldr	r3, [pc, #28]	; (dcf0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dcd2:	4798      	blx	r3
    dcd4:	4a07      	ldr	r2, [pc, #28]	; (dcf4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dcd6:	4908      	ldr	r1, [pc, #32]	; (dcf8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dcd8:	4816      	ldr	r0, [pc, #88]	; (dd34 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    dcda:	4b08      	ldr	r3, [pc, #32]	; (dcfc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dcdc:	4798      	blx	r3
    dcde:	bf00      	nop
    dce0:	3708      	adds	r7, #8
    dce2:	46bd      	mov	sp, r7
    dce4:	bd80      	pop	{r7, pc}
    dce6:	bf00      	nop
    dce8:	20001654 	.word	0x20001654
    dcec:	20000fe4 	.word	0x20000fe4
    dcf0:	0000d7f9 	.word	0x0000d7f9
    dcf4:	20000000 	.word	0x20000000
    dcf8:	0000d831 	.word	0x0000d831
    dcfc:	0000e85d 	.word	0x0000e85d
    dd00:	200016e8 	.word	0x200016e8
    dd04:	20001004 	.word	0x20001004
    dd08:	2000180c 	.word	0x2000180c
    dd0c:	20001024 	.word	0x20001024
    dd10:	20001708 	.word	0x20001708
    dd14:	20001044 	.word	0x20001044
    dd18:	200017cc 	.word	0x200017cc
    dd1c:	20001064 	.word	0x20001064
    dd20:	200017ec 	.word	0x200017ec
    dd24:	20001084 	.word	0x20001084
    dd28:	200016c4 	.word	0x200016c4
    dd2c:	200010a4 	.word	0x200010a4
    dd30:	20001764 	.word	0x20001764
    dd34:	200010c4 	.word	0x200010c4

0000dd38 <_GLOBAL__sub_I_ptrTimerClass>:
    dd38:	b580      	push	{r7, lr}
    dd3a:	af00      	add	r7, sp, #0
    dd3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dd40:	2001      	movs	r0, #1
    dd42:	4b01      	ldr	r3, [pc, #4]	; (dd48 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    dd44:	4798      	blx	r3
    dd46:	bd80      	pop	{r7, pc}
    dd48:	0000dc35 	.word	0x0000dc35

0000dd4c <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    dd4c:	b480      	push	{r7}
    dd4e:	b083      	sub	sp, #12
    dd50:	af00      	add	r7, sp, #0
    dd52:	6078      	str	r0, [r7, #4]
    dd54:	4a05      	ldr	r2, [pc, #20]	; (dd6c <_ZN5PrintC1Ev+0x20>)
    dd56:	687b      	ldr	r3, [r7, #4]
    dd58:	601a      	str	r2, [r3, #0]
    dd5a:	687b      	ldr	r3, [r7, #4]
    dd5c:	2200      	movs	r2, #0
    dd5e:	605a      	str	r2, [r3, #4]
    dd60:	687b      	ldr	r3, [r7, #4]
    dd62:	4618      	mov	r0, r3
    dd64:	370c      	adds	r7, #12
    dd66:	46bd      	mov	sp, r7
    dd68:	bc80      	pop	{r7}
    dd6a:	4770      	bx	lr
    dd6c:	0000f040 	.word	0x0000f040

0000dd70 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    dd70:	b480      	push	{r7}
    dd72:	b083      	sub	sp, #12
    dd74:	af00      	add	r7, sp, #0
    dd76:	6078      	str	r0, [r7, #4]
    dd78:	2300      	movs	r3, #0
    dd7a:	4618      	mov	r0, r3
    dd7c:	370c      	adds	r7, #12
    dd7e:	46bd      	mov	sp, r7
    dd80:	bc80      	pop	{r7}
    dd82:	4770      	bx	lr

0000dd84 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    dd84:	b480      	push	{r7}
    dd86:	b083      	sub	sp, #12
    dd88:	af00      	add	r7, sp, #0
    dd8a:	6078      	str	r0, [r7, #4]
    dd8c:	bf00      	nop
    dd8e:	370c      	adds	r7, #12
    dd90:	46bd      	mov	sp, r7
    dd92:	bc80      	pop	{r7}
    dd94:	4770      	bx	lr
	...

0000dd98 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    dd98:	b580      	push	{r7, lr}
    dd9a:	b082      	sub	sp, #8
    dd9c:	af00      	add	r7, sp, #0
    dd9e:	6078      	str	r0, [r7, #4]
    dda0:	687b      	ldr	r3, [r7, #4]
    dda2:	4618      	mov	r0, r3
    dda4:	4b06      	ldr	r3, [pc, #24]	; (ddc0 <_ZN6StreamC1Ev+0x28>)
    dda6:	4798      	blx	r3
    dda8:	4a06      	ldr	r2, [pc, #24]	; (ddc4 <_ZN6StreamC1Ev+0x2c>)
    ddaa:	687b      	ldr	r3, [r7, #4]
    ddac:	601a      	str	r2, [r3, #0]
    ddae:	687b      	ldr	r3, [r7, #4]
    ddb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ddb4:	609a      	str	r2, [r3, #8]
    ddb6:	687b      	ldr	r3, [r7, #4]
    ddb8:	4618      	mov	r0, r3
    ddba:	3708      	adds	r7, #8
    ddbc:	46bd      	mov	sp, r7
    ddbe:	bd80      	pop	{r7, pc}
    ddc0:	0000dd4d 	.word	0x0000dd4d
    ddc4:	0000f004 	.word	0x0000f004

0000ddc8 <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    ddc8:	b480      	push	{r7}
    ddca:	b083      	sub	sp, #12
    ddcc:	af00      	add	r7, sp, #0
    ddce:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    ddd0:	4b06      	ldr	r3, [pc, #24]	; (ddec <_ZL10USBTimeoutPK10timer_task+0x24>)
    ddd2:	681b      	ldr	r3, [r3, #0]
    ddd4:	2201      	movs	r2, #1
    ddd6:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    ddd8:	4b04      	ldr	r3, [pc, #16]	; (ddec <_ZL10USBTimeoutPK10timer_task+0x24>)
    ddda:	681b      	ldr	r3, [r3, #0]
    dddc:	2200      	movs	r2, #0
    ddde:	741a      	strb	r2, [r3, #16]
	
}
    dde0:	bf00      	nop
    dde2:	370c      	adds	r7, #12
    dde4:	46bd      	mov	sp, r7
    dde6:	bc80      	pop	{r7}
    dde8:	4770      	bx	lr
    ddea:	bf00      	nop
    ddec:	200014ec 	.word	0x200014ec

0000ddf0 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    ddf0:	b480      	push	{r7}
    ddf2:	b083      	sub	sp, #12
    ddf4:	af00      	add	r7, sp, #0
    ddf6:	4603      	mov	r3, r0
    ddf8:	603a      	str	r2, [r7, #0]
    ddfa:	71fb      	strb	r3, [r7, #7]
    ddfc:	460b      	mov	r3, r1
    ddfe:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    de00:	4b08      	ldr	r3, [pc, #32]	; (de24 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    de02:	681b      	ldr	r3, [r3, #0]
    de04:	2201      	movs	r2, #1
    de06:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    de08:	4b06      	ldr	r3, [pc, #24]	; (de24 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    de0a:	681b      	ldr	r3, [r3, #0]
    de0c:	2201      	movs	r2, #1
    de0e:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    de10:	4b04      	ldr	r3, [pc, #16]	; (de24 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    de12:	681b      	ldr	r3, [r3, #0]
    de14:	2201      	movs	r2, #1
    de16:	741a      	strb	r2, [r3, #16]


	return false;
    de18:	2300      	movs	r3, #0
}
    de1a:	4618      	mov	r0, r3
    de1c:	370c      	adds	r7, #12
    de1e:	46bd      	mov	sp, r7
    de20:	bc80      	pop	{r7}
    de22:	4770      	bx	lr
    de24:	200014ec 	.word	0x200014ec

0000de28 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    de28:	b480      	push	{r7}
    de2a:	b083      	sub	sp, #12
    de2c:	af00      	add	r7, sp, #0
    de2e:	4603      	mov	r3, r0
    de30:	603a      	str	r2, [r7, #0]
    de32:	71fb      	strb	r3, [r7, #7]
    de34:	460b      	mov	r3, r1
    de36:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    de38:	4b08      	ldr	r3, [pc, #32]	; (de5c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    de3a:	681b      	ldr	r3, [r3, #0]
    de3c:	2201      	movs	r2, #1
    de3e:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    de40:	4b06      	ldr	r3, [pc, #24]	; (de5c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    de42:	681b      	ldr	r3, [r3, #0]
    de44:	2201      	movs	r2, #1
    de46:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    de48:	4b04      	ldr	r3, [pc, #16]	; (de5c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    de4a:	681b      	ldr	r3, [r3, #0]
    de4c:	2201      	movs	r2, #1
    de4e:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    de50:	2300      	movs	r3, #0
}
    de52:	4618      	mov	r0, r3
    de54:	370c      	adds	r7, #12
    de56:	46bd      	mov	sp, r7
    de58:	bc80      	pop	{r7}
    de5a:	4770      	bx	lr
    de5c:	200014ec 	.word	0x200014ec

0000de60 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    de60:	b580      	push	{r7, lr}
    de62:	b082      	sub	sp, #8
    de64:	af00      	add	r7, sp, #0
    de66:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    de68:	793b      	ldrb	r3, [r7, #4]
    de6a:	f003 0301 	and.w	r3, r3, #1
    de6e:	b2db      	uxtb	r3, r3
    de70:	2b00      	cmp	r3, #0
    de72:	d013      	beq.n	de9c <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    de74:	490c      	ldr	r1, [pc, #48]	; (dea8 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    de76:	2000      	movs	r0, #0
    de78:	4b0c      	ldr	r3, [pc, #48]	; (deac <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    de7a:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    de7c:	490c      	ldr	r1, [pc, #48]	; (deb0 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    de7e:	2001      	movs	r0, #1
    de80:	4b0a      	ldr	r3, [pc, #40]	; (deac <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    de82:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    de84:	4b0b      	ldr	r3, [pc, #44]	; (deb4 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    de86:	681b      	ldr	r3, [r3, #0]
    de88:	2201      	movs	r2, #1
    de8a:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    de8c:	4b09      	ldr	r3, [pc, #36]	; (deb4 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    de8e:	681b      	ldr	r3, [r3, #0]
    de90:	2201      	movs	r2, #1
    de92:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    de94:	4b07      	ldr	r3, [pc, #28]	; (deb4 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    de96:	681b      	ldr	r3, [r3, #0]
    de98:	2201      	movs	r2, #1
    de9a:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    de9c:	2300      	movs	r3, #0
}
    de9e:	4618      	mov	r0, r3
    dea0:	3708      	adds	r7, #8
    dea2:	46bd      	mov	sp, r7
    dea4:	bd80      	pop	{r7, pc}
    dea6:	bf00      	nop
    dea8:	0000ddf1 	.word	0x0000ddf1
    deac:	0000c211 	.word	0x0000c211
    deb0:	0000de29 	.word	0x0000de29
    deb4:	200014ec 	.word	0x200014ec

0000deb8 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    deb8:	b580      	push	{r7, lr}
    deba:	b082      	sub	sp, #8
    debc:	af00      	add	r7, sp, #0
    debe:	6078      	str	r0, [r7, #4]
    dec0:	687b      	ldr	r3, [r7, #4]
    dec2:	4618      	mov	r0, r3
    dec4:	4b0a      	ldr	r3, [pc, #40]	; (def0 <_ZN9CDC_ClassC1Ev+0x38>)
    dec6:	4798      	blx	r3
    dec8:	687b      	ldr	r3, [r7, #4]
    deca:	3310      	adds	r3, #16
    decc:	4618      	mov	r0, r3
    dece:	4b09      	ldr	r3, [pc, #36]	; (def4 <_ZN9CDC_ClassC1Ev+0x3c>)
    ded0:	4798      	blx	r3
    ded2:	4a09      	ldr	r2, [pc, #36]	; (def8 <_ZN9CDC_ClassC1Ev+0x40>)
    ded4:	687b      	ldr	r3, [r7, #4]
    ded6:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    ded8:	687b      	ldr	r3, [r7, #4]
    deda:	f04f 32ff 	mov.w	r2, #4294967295
    dede:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    dee0:	4a06      	ldr	r2, [pc, #24]	; (defc <_ZN9CDC_ClassC1Ev+0x44>)
    dee2:	687b      	ldr	r3, [r7, #4]
    dee4:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    dee6:	687b      	ldr	r3, [r7, #4]
    dee8:	4618      	mov	r0, r3
    deea:	3708      	adds	r7, #8
    deec:	46bd      	mov	sp, r7
    deee:	bd80      	pop	{r7, pc}
    def0:	0000dd99 	.word	0x0000dd99
    def4:	0000e5a5 	.word	0x0000e5a5
    def8:	0000efd4 	.word	0x0000efd4
    defc:	200014ec 	.word	0x200014ec

0000df00 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    df00:	b580      	push	{r7, lr}
    df02:	b082      	sub	sp, #8
    df04:	af00      	add	r7, sp, #0
    df06:	6078      	str	r0, [r7, #4]
    df08:	4a06      	ldr	r2, [pc, #24]	; (df24 <_ZN9CDC_ClassD1Ev+0x24>)
    df0a:	687b      	ldr	r3, [r7, #4]
    df0c:	601a      	str	r2, [r3, #0]
    df0e:	687b      	ldr	r3, [r7, #4]
    df10:	3310      	adds	r3, #16
    df12:	4618      	mov	r0, r3
    df14:	4b04      	ldr	r3, [pc, #16]	; (df28 <_ZN9CDC_ClassD1Ev+0x28>)
    df16:	4798      	blx	r3
{
} //~CDC_Class
    df18:	687b      	ldr	r3, [r7, #4]
    df1a:	4618      	mov	r0, r3
    df1c:	3708      	adds	r7, #8
    df1e:	46bd      	mov	sp, r7
    df20:	bd80      	pop	{r7, pc}
    df22:	bf00      	nop
    df24:	0000efd4 	.word	0x0000efd4
    df28:	0000e5c5 	.word	0x0000e5c5

0000df2c <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    df2c:	b580      	push	{r7, lr}
    df2e:	b082      	sub	sp, #8
    df30:	af00      	add	r7, sp, #0
    df32:	6078      	str	r0, [r7, #4]
	
	OnInit();
    df34:	687b      	ldr	r3, [r7, #4]
    df36:	3310      	adds	r3, #16
    df38:	4618      	mov	r0, r3
    df3a:	4b09      	ldr	r3, [pc, #36]	; (df60 <_ZN9CDC_Class4InitEv+0x34>)
    df3c:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    df3e:	4909      	ldr	r1, [pc, #36]	; (df64 <_ZN9CDC_Class4InitEv+0x38>)
    df40:	2003      	movs	r0, #3
    df42:	4b09      	ldr	r3, [pc, #36]	; (df68 <_ZN9CDC_Class4InitEv+0x3c>)
    df44:	4798      	blx	r3
	delay_ms(100);
    df46:	2064      	movs	r0, #100	; 0x64
    df48:	4b08      	ldr	r3, [pc, #32]	; (df6c <_ZN9CDC_Class4InitEv+0x40>)
    df4a:	4798      	blx	r3
		
	if (connected)
    df4c:	687b      	ldr	r3, [r7, #4]
    df4e:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    df50:	2064      	movs	r0, #100	; 0x64
    df52:	4b06      	ldr	r3, [pc, #24]	; (df6c <_ZN9CDC_Class4InitEv+0x40>)
    df54:	4798      	blx	r3

	

}
    df56:	bf00      	nop
    df58:	3708      	adds	r7, #8
    df5a:	46bd      	mov	sp, r7
    df5c:	bd80      	pop	{r7, pc}
    df5e:	bf00      	nop
    df60:	0000e5d9 	.word	0x0000e5d9
    df64:	0000de61 	.word	0x0000de61
    df68:	0000c211 	.word	0x0000c211
    df6c:	0000220d 	.word	0x0000220d

0000df70 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    df70:	b580      	push	{r7, lr}
    df72:	b082      	sub	sp, #8
    df74:	af00      	add	r7, sp, #0
    df76:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    df78:	4b03      	ldr	r3, [pc, #12]	; (df88 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    df7a:	4798      	blx	r3
    df7c:	4603      	mov	r3, r0
	
}
    df7e:	4618      	mov	r0, r3
    df80:	3708      	adds	r7, #8
    df82:	46bd      	mov	sp, r7
    df84:	bd80      	pop	{r7, pc}
    df86:	bf00      	nop
    df88:	0000c289 	.word	0x0000c289

0000df8c <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    df8c:	b580      	push	{r7, lr}
    df8e:	b084      	sub	sp, #16
    df90:	af00      	add	r7, sp, #0
    df92:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    df94:	687b      	ldr	r3, [r7, #4]
    df96:	699b      	ldr	r3, [r3, #24]
    df98:	f1b3 3fff 	cmp.w	r3, #4294967295
    df9c:	bf14      	ite	ne
    df9e:	2301      	movne	r3, #1
    dfa0:	2300      	moveq	r3, #0
    dfa2:	b2db      	uxtb	r3, r3
    dfa4:	2b00      	cmp	r3, #0
    dfa6:	d002      	beq.n	dfae <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    dfa8:	687b      	ldr	r3, [r7, #4]
    dfaa:	699b      	ldr	r3, [r3, #24]
    dfac:	e011      	b.n	dfd2 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    dfae:	687b      	ldr	r3, [r7, #4]
    dfb0:	681b      	ldr	r3, [r3, #0]
    dfb2:	331c      	adds	r3, #28
    dfb4:	681b      	ldr	r3, [r3, #0]
    dfb6:	f107 010f 	add.w	r1, r7, #15
    dfba:	2201      	movs	r2, #1
    dfbc:	6878      	ldr	r0, [r7, #4]
    dfbe:	4798      	blx	r3
    dfc0:	4602      	mov	r2, r0
    dfc2:	687b      	ldr	r3, [r7, #4]
    dfc4:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    dfc6:	7bfb      	ldrb	r3, [r7, #15]
    dfc8:	461a      	mov	r2, r3
    dfca:	687b      	ldr	r3, [r7, #4]
    dfcc:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    dfce:	687b      	ldr	r3, [r7, #4]
    dfd0:	699b      	ldr	r3, [r3, #24]
}
    dfd2:	4618      	mov	r0, r3
    dfd4:	3710      	adds	r7, #16
    dfd6:	46bd      	mov	sp, r7
    dfd8:	bd80      	pop	{r7, pc}
	...

0000dfdc <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    dfdc:	b580      	push	{r7, lr}
    dfde:	b086      	sub	sp, #24
    dfe0:	af00      	add	r7, sp, #0
    dfe2:	60f8      	str	r0, [r7, #12]
    dfe4:	60b9      	str	r1, [r7, #8]
    dfe6:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    dfe8:	68fb      	ldr	r3, [r7, #12]
    dfea:	7c1b      	ldrb	r3, [r3, #16]
    dfec:	b2db      	uxtb	r3, r3
    dfee:	2b00      	cmp	r3, #0
    dff0:	d02e      	beq.n	e050 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    dff2:	687a      	ldr	r2, [r7, #4]
    dff4:	4613      	mov	r3, r2
    dff6:	009b      	lsls	r3, r3, #2
    dff8:	4413      	add	r3, r2
    dffa:	005b      	lsls	r3, r3, #1
    dffc:	461a      	mov	r2, r3
    dffe:	4918      	ldr	r1, [pc, #96]	; (e060 <_ZN9CDC_Class8readDataEPvl+0x84>)
    e000:	4818      	ldr	r0, [pc, #96]	; (e064 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e002:	4b19      	ldr	r3, [pc, #100]	; (e068 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    e004:	4798      	blx	r3
		rxReady=false;
    e006:	68fb      	ldr	r3, [r7, #12]
    e008:	2200      	movs	r2, #0
    e00a:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    e00c:	687b      	ldr	r3, [r7, #4]
    e00e:	4619      	mov	r1, r3
    e010:	68b8      	ldr	r0, [r7, #8]
    e012:	4b16      	ldr	r3, [pc, #88]	; (e06c <_ZN9CDC_Class8readDataEPvl+0x90>)
    e014:	4798      	blx	r3
    e016:	4603      	mov	r3, r0
    e018:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    e01a:	68fb      	ldr	r3, [r7, #12]
    e01c:	7d5b      	ldrb	r3, [r3, #21]
    e01e:	b2db      	uxtb	r3, r3
    e020:	f083 0301 	eor.w	r3, r3, #1
    e024:	b2db      	uxtb	r3, r3
    e026:	2b00      	cmp	r3, #0
    e028:	d006      	beq.n	e038 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e02a:	68fb      	ldr	r3, [r7, #12]
    e02c:	7c1b      	ldrb	r3, [r3, #16]
    e02e:	b2db      	uxtb	r3, r3
    e030:	2b00      	cmp	r3, #0
    e032:	d001      	beq.n	e038 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e034:	2301      	movs	r3, #1
    e036:	e000      	b.n	e03a <_ZN9CDC_Class8readDataEPvl+0x5e>
    e038:	2300      	movs	r3, #0
    e03a:	2b00      	cmp	r3, #0
    e03c:	d000      	beq.n	e040 <_ZN9CDC_Class8readDataEPvl+0x64>
    e03e:	e7ec      	b.n	e01a <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    e040:	4808      	ldr	r0, [pc, #32]	; (e064 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e042:	4b0b      	ldr	r3, [pc, #44]	; (e070 <_ZN9CDC_Class8readDataEPvl+0x94>)
    e044:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e046:	4906      	ldr	r1, [pc, #24]	; (e060 <_ZN9CDC_Class8readDataEPvl+0x84>)
    e048:	4806      	ldr	r0, [pc, #24]	; (e064 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e04a:	4b0a      	ldr	r3, [pc, #40]	; (e074 <_ZN9CDC_Class8readDataEPvl+0x98>)
    e04c:	4798      	blx	r3
    e04e:	e001      	b.n	e054 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    e050:	2300      	movs	r3, #0
    e052:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    e054:	7dfb      	ldrb	r3, [r7, #23]
}
    e056:	4618      	mov	r0, r3
    e058:	3718      	adds	r7, #24
    e05a:	46bd      	mov	sp, r7
    e05c:	bd80      	pop	{r7, pc}
    e05e:	bf00      	nop
    e060:	0000ddc9 	.word	0x0000ddc9
    e064:	2000148c 	.word	0x2000148c
    e068:	0000daa1 	.word	0x0000daa1
    e06c:	0000c165 	.word	0x0000c165
    e070:	0000d959 	.word	0x0000d959
    e074:	0000da49 	.word	0x0000da49

0000e078 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    e078:	b580      	push	{r7, lr}
    e07a:	b084      	sub	sp, #16
    e07c:	af00      	add	r7, sp, #0
    e07e:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    e080:	687b      	ldr	r3, [r7, #4]
    e082:	2200      	movs	r2, #0
    e084:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    e086:	f107 030f 	add.w	r3, r7, #15
    e08a:	2101      	movs	r1, #1
    e08c:	4618      	mov	r0, r3
    e08e:	4b08      	ldr	r3, [pc, #32]	; (e0b0 <_ZN9CDC_Class4readEv+0x38>)
    e090:	4798      	blx	r3
	while(!rxReady);
    e092:	687b      	ldr	r3, [r7, #4]
    e094:	7d5b      	ldrb	r3, [r3, #21]
    e096:	b2db      	uxtb	r3, r3
    e098:	f083 0301 	eor.w	r3, r3, #1
    e09c:	b2db      	uxtb	r3, r3
    e09e:	2b00      	cmp	r3, #0
    e0a0:	d000      	beq.n	e0a4 <_ZN9CDC_Class4readEv+0x2c>
    e0a2:	e7f6      	b.n	e092 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    e0a4:	7bfb      	ldrb	r3, [r7, #15]
}
    e0a6:	4618      	mov	r0, r3
    e0a8:	3710      	adds	r7, #16
    e0aa:	46bd      	mov	sp, r7
    e0ac:	bd80      	pop	{r7, pc}
    e0ae:	bf00      	nop
    e0b0:	0000c165 	.word	0x0000c165

0000e0b4 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    e0b4:	b580      	push	{r7, lr}
    e0b6:	b082      	sub	sp, #8
    e0b8:	af00      	add	r7, sp, #0
    e0ba:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    e0bc:	687b      	ldr	r3, [r7, #4]
    e0be:	331c      	adds	r3, #28
    e0c0:	2140      	movs	r1, #64	; 0x40
    e0c2:	4618      	mov	r0, r3
    e0c4:	4b02      	ldr	r3, [pc, #8]	; (e0d0 <_ZN9CDC_Class5flushEv+0x1c>)
    e0c6:	4798      	blx	r3
}
    e0c8:	bf00      	nop
    e0ca:	3708      	adds	r7, #8
    e0cc:	46bd      	mov	sp, r7
    e0ce:	bd80      	pop	{r7, pc}
    e0d0:	0000c1a9 	.word	0x0000c1a9

0000e0d4 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    e0d4:	b580      	push	{r7, lr}
    e0d6:	b082      	sub	sp, #8
    e0d8:	af00      	add	r7, sp, #0
    e0da:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    e0dc:	4b02      	ldr	r3, [pc, #8]	; (e0e8 <_ZN9CDC_Class5clearEv+0x14>)
    e0de:	4798      	blx	r3
}
    e0e0:	bf00      	nop
    e0e2:	3708      	adds	r7, #8
    e0e4:	46bd      	mov	sp, r7
    e0e6:	bd80      	pop	{r7, pc}
    e0e8:	0000c1ed 	.word	0x0000c1ed

0000e0ec <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    e0ec:	b580      	push	{r7, lr}
    e0ee:	b082      	sub	sp, #8
    e0f0:	af00      	add	r7, sp, #0
    e0f2:	6078      	str	r0, [r7, #4]
    e0f4:	460b      	mov	r3, r1
    e0f6:	70fb      	strb	r3, [r7, #3]
	if (connected){
    e0f8:	687b      	ldr	r3, [r7, #4]
    e0fa:	7c1b      	ldrb	r3, [r3, #16]
    e0fc:	b2db      	uxtb	r3, r3
    e0fe:	2b00      	cmp	r3, #0
    e100:	d012      	beq.n	e128 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    e102:	687b      	ldr	r3, [r7, #4]
    e104:	7d1b      	ldrb	r3, [r3, #20]
    e106:	b2db      	uxtb	r3, r3
    e108:	f083 0301 	eor.w	r3, r3, #1
    e10c:	b2db      	uxtb	r3, r3
    e10e:	2b00      	cmp	r3, #0
    e110:	d000      	beq.n	e114 <_ZN9CDC_Class5writeEh+0x28>
    e112:	e7f6      	b.n	e102 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    e114:	687b      	ldr	r3, [r7, #4]
    e116:	681b      	ldr	r3, [r3, #0]
    e118:	3324      	adds	r3, #36	; 0x24
    e11a:	681b      	ldr	r3, [r3, #0]
    e11c:	1cf9      	adds	r1, r7, #3
    e11e:	2201      	movs	r2, #1
    e120:	6878      	ldr	r0, [r7, #4]
    e122:	4798      	blx	r3
    e124:	4603      	mov	r3, r0
    e126:	e000      	b.n	e12a <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    e128:	2300      	movs	r3, #0
	}
		
}
    e12a:	4618      	mov	r0, r3
    e12c:	3708      	adds	r7, #8
    e12e:	46bd      	mov	sp, r7
    e130:	bd80      	pop	{r7, pc}
	...

0000e134 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    e134:	b580      	push	{r7, lr}
    e136:	b086      	sub	sp, #24
    e138:	af00      	add	r7, sp, #0
    e13a:	60f8      	str	r0, [r7, #12]
    e13c:	60b9      	str	r1, [r7, #8]
    e13e:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    e140:	68fb      	ldr	r3, [r7, #12]
    e142:	7c1b      	ldrb	r3, [r3, #16]
    e144:	b2db      	uxtb	r3, r3
    e146:	2b00      	cmp	r3, #0
    e148:	d02f      	beq.n	e1aa <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e14a:	687a      	ldr	r2, [r7, #4]
    e14c:	4613      	mov	r3, r2
    e14e:	009b      	lsls	r3, r3, #2
    e150:	4413      	add	r3, r2
    e152:	005b      	lsls	r3, r3, #1
    e154:	461a      	mov	r2, r3
    e156:	4917      	ldr	r1, [pc, #92]	; (e1b4 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e158:	4817      	ldr	r0, [pc, #92]	; (e1b8 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e15a:	4b18      	ldr	r3, [pc, #96]	; (e1bc <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    e15c:	4798      	blx	r3
		txReady=false;
    e15e:	68fb      	ldr	r3, [r7, #12]
    e160:	2200      	movs	r2, #0
    e162:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e164:	687b      	ldr	r3, [r7, #4]
    e166:	4619      	mov	r1, r3
    e168:	68b8      	ldr	r0, [r7, #8]
    e16a:	4b15      	ldr	r3, [pc, #84]	; (e1c0 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    e16c:	4798      	blx	r3
    e16e:	4603      	mov	r3, r0
    e170:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    e172:	68fb      	ldr	r3, [r7, #12]
    e174:	7d1b      	ldrb	r3, [r3, #20]
    e176:	b2db      	uxtb	r3, r3
    e178:	f083 0301 	eor.w	r3, r3, #1
    e17c:	b2db      	uxtb	r3, r3
    e17e:	2b00      	cmp	r3, #0
    e180:	d006      	beq.n	e190 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e182:	68fb      	ldr	r3, [r7, #12]
    e184:	7c1b      	ldrb	r3, [r3, #16]
    e186:	b2db      	uxtb	r3, r3
    e188:	2b00      	cmp	r3, #0
    e18a:	d001      	beq.n	e190 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e18c:	2301      	movs	r3, #1
    e18e:	e000      	b.n	e192 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    e190:	2300      	movs	r3, #0
    e192:	2b00      	cmp	r3, #0
    e194:	d000      	beq.n	e198 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    e196:	e7ec      	b.n	e172 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    e198:	4807      	ldr	r0, [pc, #28]	; (e1b8 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e19a:	4b0a      	ldr	r3, [pc, #40]	; (e1c4 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    e19c:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e19e:	4905      	ldr	r1, [pc, #20]	; (e1b4 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e1a0:	4805      	ldr	r0, [pc, #20]	; (e1b8 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e1a2:	4b09      	ldr	r3, [pc, #36]	; (e1c8 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    e1a4:	4798      	blx	r3
		return r;
    e1a6:	697b      	ldr	r3, [r7, #20]
    e1a8:	e000      	b.n	e1ac <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    e1aa:	2300      	movs	r3, #0
	}
	

}
    e1ac:	4618      	mov	r0, r3
    e1ae:	3718      	adds	r7, #24
    e1b0:	46bd      	mov	sp, r7
    e1b2:	bd80      	pop	{r7, pc}
    e1b4:	0000ddc9 	.word	0x0000ddc9
    e1b8:	2000148c 	.word	0x2000148c
    e1bc:	0000daa1 	.word	0x0000daa1
    e1c0:	0000c1a9 	.word	0x0000c1a9
    e1c4:	0000d959 	.word	0x0000d959
    e1c8:	0000da49 	.word	0x0000da49

0000e1cc <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    e1cc:	b580      	push	{r7, lr}
    e1ce:	b086      	sub	sp, #24
    e1d0:	af00      	add	r7, sp, #0
    e1d2:	60f8      	str	r0, [r7, #12]
    e1d4:	60b9      	str	r1, [r7, #8]
    e1d6:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    e1d8:	68fb      	ldr	r3, [r7, #12]
    e1da:	2200      	movs	r2, #0
    e1dc:	751a      	strb	r2, [r3, #20]

 	if (connected){
    e1de:	68fb      	ldr	r3, [r7, #12]
    e1e0:	7c1b      	ldrb	r3, [r3, #16]
    e1e2:	b2db      	uxtb	r3, r3
    e1e4:	2b00      	cmp	r3, #0
    e1e6:	d02a      	beq.n	e23e <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e1e8:	687a      	ldr	r2, [r7, #4]
    e1ea:	4613      	mov	r3, r2
    e1ec:	009b      	lsls	r3, r3, #2
    e1ee:	4413      	add	r3, r2
    e1f0:	005b      	lsls	r3, r3, #1
    e1f2:	461a      	mov	r2, r3
    e1f4:	4915      	ldr	r1, [pc, #84]	; (e24c <_ZN9CDC_Class5writeEPKhj+0x80>)
    e1f6:	4816      	ldr	r0, [pc, #88]	; (e250 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e1f8:	4b16      	ldr	r3, [pc, #88]	; (e254 <_ZN9CDC_Class5writeEPKhj+0x88>)
    e1fa:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e1fc:	6879      	ldr	r1, [r7, #4]
    e1fe:	68b8      	ldr	r0, [r7, #8]
    e200:	4b15      	ldr	r3, [pc, #84]	; (e258 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    e202:	4798      	blx	r3
    e204:	4603      	mov	r3, r0
    e206:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    e208:	68fb      	ldr	r3, [r7, #12]
    e20a:	7d1b      	ldrb	r3, [r3, #20]
    e20c:	b2db      	uxtb	r3, r3
    e20e:	f083 0301 	eor.w	r3, r3, #1
    e212:	b2db      	uxtb	r3, r3
    e214:	2b00      	cmp	r3, #0
    e216:	d006      	beq.n	e226 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e218:	68fb      	ldr	r3, [r7, #12]
    e21a:	7c1b      	ldrb	r3, [r3, #16]
    e21c:	b2db      	uxtb	r3, r3
    e21e:	2b00      	cmp	r3, #0
    e220:	d001      	beq.n	e226 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e222:	2301      	movs	r3, #1
    e224:	e000      	b.n	e228 <_ZN9CDC_Class5writeEPKhj+0x5c>
    e226:	2300      	movs	r3, #0
    e228:	2b00      	cmp	r3, #0
    e22a:	d000      	beq.n	e22e <_ZN9CDC_Class5writeEPKhj+0x62>
    e22c:	e7ec      	b.n	e208 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    e22e:	4808      	ldr	r0, [pc, #32]	; (e250 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e230:	4b0a      	ldr	r3, [pc, #40]	; (e25c <_ZN9CDC_Class5writeEPKhj+0x90>)
    e232:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e234:	4905      	ldr	r1, [pc, #20]	; (e24c <_ZN9CDC_Class5writeEPKhj+0x80>)
    e236:	4806      	ldr	r0, [pc, #24]	; (e250 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e238:	4b09      	ldr	r3, [pc, #36]	; (e260 <_ZN9CDC_Class5writeEPKhj+0x94>)
    e23a:	4798      	blx	r3
    e23c:	e001      	b.n	e242 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    e23e:	2300      	movs	r3, #0
    e240:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    e242:	697b      	ldr	r3, [r7, #20]
}
    e244:	4618      	mov	r0, r3
    e246:	3718      	adds	r7, #24
    e248:	46bd      	mov	sp, r7
    e24a:	bd80      	pop	{r7, pc}
    e24c:	0000ddc9 	.word	0x0000ddc9
    e250:	2000148c 	.word	0x2000148c
    e254:	0000daa1 	.word	0x0000daa1
    e258:	0000c1a9 	.word	0x0000c1a9
    e25c:	0000d959 	.word	0x0000d959
    e260:	0000da49 	.word	0x0000da49

0000e264 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    e264:	b480      	push	{r7}
    e266:	b083      	sub	sp, #12
    e268:	af00      	add	r7, sp, #0
    e26a:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    e26c:	687b      	ldr	r3, [r7, #4]
    e26e:	7d5b      	ldrb	r3, [r3, #21]
    e270:	b2db      	uxtb	r3, r3
    e272:	2b00      	cmp	r3, #0
    e274:	d006      	beq.n	e284 <_ZN9CDC_Class9availableEv+0x20>
    e276:	687b      	ldr	r3, [r7, #4]
    e278:	7d1b      	ldrb	r3, [r3, #20]
    e27a:	b2db      	uxtb	r3, r3
    e27c:	2b00      	cmp	r3, #0
    e27e:	d001      	beq.n	e284 <_ZN9CDC_Class9availableEv+0x20>
    e280:	2301      	movs	r3, #1
    e282:	e000      	b.n	e286 <_ZN9CDC_Class9availableEv+0x22>
    e284:	2300      	movs	r3, #0
    e286:	2b00      	cmp	r3, #0
    e288:	d001      	beq.n	e28e <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    e28a:	2301      	movs	r3, #1
    e28c:	e000      	b.n	e290 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    e28e:	2300      	movs	r3, #0
	}
	
}
    e290:	4618      	mov	r0, r3
    e292:	370c      	adds	r7, #12
    e294:	46bd      	mov	sp, r7
    e296:	bc80      	pop	{r7}
    e298:	4770      	bx	lr
	...

0000e29c <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    e29c:	b580      	push	{r7, lr}
    e29e:	b082      	sub	sp, #8
    e2a0:	af00      	add	r7, sp, #0
    e2a2:	6078      	str	r0, [r7, #4]
    e2a4:	6039      	str	r1, [r7, #0]
    e2a6:	687b      	ldr	r3, [r7, #4]
    e2a8:	2b01      	cmp	r3, #1
    e2aa:	d154      	bne.n	e356 <_Z41__static_initialization_and_destruction_0ii+0xba>
    e2ac:	683b      	ldr	r3, [r7, #0]
    e2ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e2b2:	4293      	cmp	r3, r2
    e2b4:	d14f      	bne.n	e356 <_Z41__static_initialization_and_destruction_0ii+0xba>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e2b6:	492a      	ldr	r1, [pc, #168]	; (e360 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e2b8:	482a      	ldr	r0, [pc, #168]	; (e364 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e2ba:	4b2b      	ldr	r3, [pc, #172]	; (e368 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e2bc:	4798      	blx	r3
    e2be:	4a2b      	ldr	r2, [pc, #172]	; (e36c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e2c0:	492b      	ldr	r1, [pc, #172]	; (e370 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e2c2:	4828      	ldr	r0, [pc, #160]	; (e364 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e2c4:	4b2b      	ldr	r3, [pc, #172]	; (e374 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e2c6:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    e2c8:	492b      	ldr	r1, [pc, #172]	; (e378 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e2ca:	482c      	ldr	r0, [pc, #176]	; (e37c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e2cc:	4b26      	ldr	r3, [pc, #152]	; (e368 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e2ce:	4798      	blx	r3
    e2d0:	4a26      	ldr	r2, [pc, #152]	; (e36c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e2d2:	4927      	ldr	r1, [pc, #156]	; (e370 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e2d4:	4829      	ldr	r0, [pc, #164]	; (e37c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e2d6:	4b27      	ldr	r3, [pc, #156]	; (e374 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e2d8:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    e2da:	4929      	ldr	r1, [pc, #164]	; (e380 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e2dc:	4829      	ldr	r0, [pc, #164]	; (e384 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e2de:	4b22      	ldr	r3, [pc, #136]	; (e368 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e2e0:	4798      	blx	r3
    e2e2:	4a22      	ldr	r2, [pc, #136]	; (e36c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e2e4:	4922      	ldr	r1, [pc, #136]	; (e370 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e2e6:	4827      	ldr	r0, [pc, #156]	; (e384 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e2e8:	4b22      	ldr	r3, [pc, #136]	; (e374 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e2ea:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e2ec:	4926      	ldr	r1, [pc, #152]	; (e388 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    e2ee:	4827      	ldr	r0, [pc, #156]	; (e38c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e2f0:	4b1d      	ldr	r3, [pc, #116]	; (e368 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e2f2:	4798      	blx	r3
    e2f4:	4a1d      	ldr	r2, [pc, #116]	; (e36c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e2f6:	491e      	ldr	r1, [pc, #120]	; (e370 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e2f8:	4824      	ldr	r0, [pc, #144]	; (e38c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e2fa:	4b1e      	ldr	r3, [pc, #120]	; (e374 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e2fc:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    e2fe:	4924      	ldr	r1, [pc, #144]	; (e390 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    e300:	4824      	ldr	r0, [pc, #144]	; (e394 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e302:	4b19      	ldr	r3, [pc, #100]	; (e368 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e304:	4798      	blx	r3
    e306:	4a19      	ldr	r2, [pc, #100]	; (e36c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e308:	4919      	ldr	r1, [pc, #100]	; (e370 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e30a:	4822      	ldr	r0, [pc, #136]	; (e394 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e30c:	4b19      	ldr	r3, [pc, #100]	; (e374 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e30e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e310:	4921      	ldr	r1, [pc, #132]	; (e398 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    e312:	4822      	ldr	r0, [pc, #136]	; (e39c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e314:	4b14      	ldr	r3, [pc, #80]	; (e368 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e316:	4798      	blx	r3
    e318:	4a14      	ldr	r2, [pc, #80]	; (e36c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e31a:	4915      	ldr	r1, [pc, #84]	; (e370 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e31c:	481f      	ldr	r0, [pc, #124]	; (e39c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e31e:	4b15      	ldr	r3, [pc, #84]	; (e374 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e320:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e322:	491f      	ldr	r1, [pc, #124]	; (e3a0 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    e324:	481f      	ldr	r0, [pc, #124]	; (e3a4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    e326:	4b10      	ldr	r3, [pc, #64]	; (e368 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e328:	4798      	blx	r3
    e32a:	4a10      	ldr	r2, [pc, #64]	; (e36c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e32c:	4910      	ldr	r1, [pc, #64]	; (e370 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e32e:	481d      	ldr	r0, [pc, #116]	; (e3a4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    e330:	4b10      	ldr	r3, [pc, #64]	; (e374 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e332:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    e334:	491c      	ldr	r1, [pc, #112]	; (e3a8 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    e336:	481d      	ldr	r0, [pc, #116]	; (e3ac <_Z41__static_initialization_and_destruction_0ii+0x110>)
    e338:	4b0b      	ldr	r3, [pc, #44]	; (e368 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e33a:	4798      	blx	r3
    e33c:	4a0b      	ldr	r2, [pc, #44]	; (e36c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e33e:	490c      	ldr	r1, [pc, #48]	; (e370 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e340:	481a      	ldr	r0, [pc, #104]	; (e3ac <_Z41__static_initialization_and_destruction_0ii+0x110>)
    e342:	4b0c      	ldr	r3, [pc, #48]	; (e374 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e344:	4798      	blx	r3
    e346:	481a      	ldr	r0, [pc, #104]	; (e3b0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    e348:	4b1a      	ldr	r3, [pc, #104]	; (e3b4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    e34a:	4798      	blx	r3
    e34c:	4a07      	ldr	r2, [pc, #28]	; (e36c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e34e:	491a      	ldr	r1, [pc, #104]	; (e3b8 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    e350:	4817      	ldr	r0, [pc, #92]	; (e3b0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    e352:	4b08      	ldr	r3, [pc, #32]	; (e374 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e354:	4798      	blx	r3
    e356:	bf00      	nop
    e358:	3708      	adds	r7, #8
    e35a:	46bd      	mov	sp, r7
    e35c:	bd80      	pop	{r7, pc}
    e35e:	bf00      	nop
    e360:	20001654 	.word	0x20001654
    e364:	200013ec 	.word	0x200013ec
    e368:	0000d7f9 	.word	0x0000d7f9
    e36c:	20000000 	.word	0x20000000
    e370:	0000d831 	.word	0x0000d831
    e374:	0000e85d 	.word	0x0000e85d
    e378:	200016e8 	.word	0x200016e8
    e37c:	2000140c 	.word	0x2000140c
    e380:	2000180c 	.word	0x2000180c
    e384:	2000142c 	.word	0x2000142c
    e388:	20001708 	.word	0x20001708
    e38c:	2000144c 	.word	0x2000144c
    e390:	200017cc 	.word	0x200017cc
    e394:	2000146c 	.word	0x2000146c
    e398:	200017ec 	.word	0x200017ec
    e39c:	2000148c 	.word	0x2000148c
    e3a0:	200016c4 	.word	0x200016c4
    e3a4:	200014ac 	.word	0x200014ac
    e3a8:	20001764 	.word	0x20001764
    e3ac:	200014cc 	.word	0x200014cc
    e3b0:	200014f0 	.word	0x200014f0
    e3b4:	0000deb9 	.word	0x0000deb9
    e3b8:	0000df01 	.word	0x0000df01

0000e3bc <_GLOBAL__sub_I_ptrCDCClass>:
    e3bc:	b580      	push	{r7, lr}
    e3be:	af00      	add	r7, sp, #0
    e3c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e3c4:	2001      	movs	r0, #1
    e3c6:	4b01      	ldr	r3, [pc, #4]	; (e3cc <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    e3c8:	4798      	blx	r3
    e3ca:	bd80      	pop	{r7, pc}
    e3cc:	0000e29d 	.word	0x0000e29d

0000e3d0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    e3d0:	b580      	push	{r7, lr}
    e3d2:	b086      	sub	sp, #24
    e3d4:	af00      	add	r7, sp, #0
    e3d6:	60f8      	str	r0, [r7, #12]
    e3d8:	60b9      	str	r1, [r7, #8]
    e3da:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    e3dc:	2300      	movs	r3, #0
    e3de:	617b      	str	r3, [r7, #20]
  while (size--) {
    e3e0:	687b      	ldr	r3, [r7, #4]
    e3e2:	1e5a      	subs	r2, r3, #1
    e3e4:	607a      	str	r2, [r7, #4]
    e3e6:	2b00      	cmp	r3, #0
    e3e8:	bf14      	ite	ne
    e3ea:	2301      	movne	r3, #1
    e3ec:	2300      	moveq	r3, #0
    e3ee:	b2db      	uxtb	r3, r3
    e3f0:	2b00      	cmp	r3, #0
    e3f2:	d016      	beq.n	e422 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    e3f4:	68fb      	ldr	r3, [r7, #12]
    e3f6:	681b      	ldr	r3, [r3, #0]
    e3f8:	681a      	ldr	r2, [r3, #0]
    e3fa:	68bb      	ldr	r3, [r7, #8]
    e3fc:	1c59      	adds	r1, r3, #1
    e3fe:	60b9      	str	r1, [r7, #8]
    e400:	781b      	ldrb	r3, [r3, #0]
    e402:	4619      	mov	r1, r3
    e404:	68f8      	ldr	r0, [r7, #12]
    e406:	4790      	blx	r2
    e408:	4603      	mov	r3, r0
    e40a:	2b00      	cmp	r3, #0
    e40c:	bf14      	ite	ne
    e40e:	2301      	movne	r3, #1
    e410:	2300      	moveq	r3, #0
    e412:	b2db      	uxtb	r3, r3
    e414:	2b00      	cmp	r3, #0
    e416:	d003      	beq.n	e420 <_ZN5Print5writeEPKhj+0x50>
    e418:	697b      	ldr	r3, [r7, #20]
    e41a:	3301      	adds	r3, #1
    e41c:	617b      	str	r3, [r7, #20]
  while (size--) {
    e41e:	e7df      	b.n	e3e0 <_ZN5Print5writeEPKhj+0x10>
    else break;
    e420:	bf00      	nop
  }
  return n;
    e422:	697b      	ldr	r3, [r7, #20]
}
    e424:	4618      	mov	r0, r3
    e426:	3718      	adds	r7, #24
    e428:	46bd      	mov	sp, r7
    e42a:	bd80      	pop	{r7, pc}

0000e42c <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    e42c:	b480      	push	{r7}
    e42e:	b083      	sub	sp, #12
    e430:	af00      	add	r7, sp, #0
    e432:	6078      	str	r0, [r7, #4]
    e434:	460b      	mov	r3, r1
    e436:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    e438:	78fb      	ldrb	r3, [r7, #3]
    e43a:	687a      	ldr	r2, [r7, #4]
    e43c:	01db      	lsls	r3, r3, #7
    e43e:	4413      	add	r3, r2
    e440:	681b      	ldr	r3, [r3, #0]
}
    e442:	4618      	mov	r0, r3
    e444:	370c      	adds	r7, #12
    e446:	46bd      	mov	sp, r7
    e448:	bc80      	pop	{r7}
    e44a:	4770      	bx	lr

0000e44c <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    e44c:	b480      	push	{r7}
    e44e:	b083      	sub	sp, #12
    e450:	af00      	add	r7, sp, #0
    e452:	6078      	str	r0, [r7, #4]
    e454:	460b      	mov	r3, r1
    e456:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    e458:	78fb      	ldrb	r3, [r7, #3]
    e45a:	687a      	ldr	r2, [r7, #4]
    e45c:	01db      	lsls	r3, r3, #7
    e45e:	4413      	add	r3, r2
    e460:	3310      	adds	r3, #16
    e462:	681b      	ldr	r3, [r3, #0]
}
    e464:	4618      	mov	r0, r3
    e466:	370c      	adds	r7, #12
    e468:	46bd      	mov	sp, r7
    e46a:	bc80      	pop	{r7}
    e46c:	4770      	bx	lr

0000e46e <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    e46e:	b480      	push	{r7}
    e470:	b083      	sub	sp, #12
    e472:	af00      	add	r7, sp, #0
    e474:	6078      	str	r0, [r7, #4]
    e476:	460b      	mov	r3, r1
    e478:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    e47a:	78fb      	ldrb	r3, [r7, #3]
    e47c:	687a      	ldr	r2, [r7, #4]
    e47e:	01db      	lsls	r3, r3, #7
    e480:	4413      	add	r3, r2
    e482:	3320      	adds	r3, #32
    e484:	681b      	ldr	r3, [r3, #0]
}
    e486:	4618      	mov	r0, r3
    e488:	370c      	adds	r7, #12
    e48a:	46bd      	mov	sp, r7
    e48c:	bc80      	pop	{r7}
    e48e:	4770      	bx	lr

0000e490 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    e490:	b580      	push	{r7, lr}
    e492:	b086      	sub	sp, #24
    e494:	af00      	add	r7, sp, #0
    e496:	4603      	mov	r3, r0
    e498:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    e49a:	f107 030c 	add.w	r3, r7, #12
    e49e:	4618      	mov	r0, r3
    e4a0:	4b13      	ldr	r3, [pc, #76]	; (e4f0 <_gpio_get_level+0x60>)
    e4a2:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    e4a4:	79fb      	ldrb	r3, [r7, #7]
    e4a6:	4619      	mov	r1, r3
    e4a8:	4812      	ldr	r0, [pc, #72]	; (e4f4 <_gpio_get_level+0x64>)
    e4aa:	4b13      	ldr	r3, [pc, #76]	; (e4f8 <_gpio_get_level+0x68>)
    e4ac:	4798      	blx	r3
    e4ae:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    e4b0:	79fb      	ldrb	r3, [r7, #7]
    e4b2:	4619      	mov	r1, r3
    e4b4:	480f      	ldr	r0, [pc, #60]	; (e4f4 <_gpio_get_level+0x64>)
    e4b6:	4b11      	ldr	r3, [pc, #68]	; (e4fc <_gpio_get_level+0x6c>)
    e4b8:	4798      	blx	r3
    e4ba:	4602      	mov	r2, r0
    e4bc:	697b      	ldr	r3, [r7, #20]
    e4be:	43db      	mvns	r3, r3
    e4c0:	4013      	ands	r3, r2
    e4c2:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    e4c4:	79fb      	ldrb	r3, [r7, #7]
    e4c6:	4619      	mov	r1, r3
    e4c8:	480a      	ldr	r0, [pc, #40]	; (e4f4 <_gpio_get_level+0x64>)
    e4ca:	4b0d      	ldr	r3, [pc, #52]	; (e500 <_gpio_get_level+0x70>)
    e4cc:	4798      	blx	r3
    e4ce:	4602      	mov	r2, r0
    e4d0:	697b      	ldr	r3, [r7, #20]
    e4d2:	4013      	ands	r3, r2
    e4d4:	693a      	ldr	r2, [r7, #16]
    e4d6:	4313      	orrs	r3, r2
    e4d8:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    e4da:	f107 030c 	add.w	r3, r7, #12
    e4de:	4618      	mov	r0, r3
    e4e0:	4b08      	ldr	r3, [pc, #32]	; (e504 <_gpio_get_level+0x74>)
    e4e2:	4798      	blx	r3

	return tmp;
    e4e4:	693b      	ldr	r3, [r7, #16]
}
    e4e6:	4618      	mov	r0, r3
    e4e8:	3718      	adds	r7, #24
    e4ea:	46bd      	mov	sp, r7
    e4ec:	bd80      	pop	{r7, pc}
    e4ee:	bf00      	nop
    e4f0:	0000b385 	.word	0x0000b385
    e4f4:	41008000 	.word	0x41008000
    e4f8:	0000e42d 	.word	0x0000e42d
    e4fc:	0000e46f 	.word	0x0000e46f
    e500:	0000e44d 	.word	0x0000e44d
    e504:	0000b3ab 	.word	0x0000b3ab

0000e508 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    e508:	b580      	push	{r7, lr}
    e50a:	b082      	sub	sp, #8
    e50c:	af00      	add	r7, sp, #0
    e50e:	4603      	mov	r3, r0
    e510:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    e512:	79fb      	ldrb	r3, [r7, #7]
    e514:	115b      	asrs	r3, r3, #5
    e516:	b2db      	uxtb	r3, r3
    e518:	4618      	mov	r0, r3
    e51a:	4b09      	ldr	r3, [pc, #36]	; (e540 <gpio_get_pin_level+0x38>)
    e51c:	4798      	blx	r3
    e51e:	4601      	mov	r1, r0
    e520:	79fb      	ldrb	r3, [r7, #7]
    e522:	f003 031f 	and.w	r3, r3, #31
    e526:	2201      	movs	r2, #1
    e528:	fa02 f303 	lsl.w	r3, r2, r3
    e52c:	400b      	ands	r3, r1
    e52e:	2b00      	cmp	r3, #0
    e530:	bf14      	ite	ne
    e532:	2301      	movne	r3, #1
    e534:	2300      	moveq	r3, #0
    e536:	b2db      	uxtb	r3, r3
}
    e538:	4618      	mov	r0, r3
    e53a:	3708      	adds	r7, #8
    e53c:	46bd      	mov	sp, r7
    e53e:	bd80      	pop	{r7, pc}
    e540:	0000e491 	.word	0x0000e491

0000e544 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    e544:	b480      	push	{r7}
    e546:	b083      	sub	sp, #12
    e548:	af00      	add	r7, sp, #0
    e54a:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    e54c:	4b06      	ldr	r3, [pc, #24]	; (e568 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e54e:	681b      	ldr	r3, [r3, #0]
    e550:	2201      	movs	r2, #1
    e552:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    e554:	4b04      	ldr	r3, [pc, #16]	; (e568 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e556:	681b      	ldr	r3, [r3, #0]
    e558:	2200      	movs	r2, #0
    e55a:	705a      	strb	r2, [r3, #1]
}
    e55c:	bf00      	nop
    e55e:	370c      	adds	r7, #12
    e560:	46bd      	mov	sp, r7
    e562:	bc80      	pop	{r7}
    e564:	4770      	bx	lr
    e566:	bf00      	nop
    e568:	20001650 	.word	0x20001650

0000e56c <_ZL10USBPluggedv>:

static void USBPlugged(void){
    e56c:	b580      	push	{r7, lr}
    e56e:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    e570:	2040      	movs	r0, #64	; 0x40
    e572:	4b0a      	ldr	r3, [pc, #40]	; (e59c <_ZL10USBPluggedv+0x30>)
    e574:	4798      	blx	r3
    e576:	4603      	mov	r3, r0
    e578:	2b00      	cmp	r3, #0
    e57a:	d004      	beq.n	e586 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    e57c:	4b08      	ldr	r3, [pc, #32]	; (e5a0 <_ZL10USBPluggedv+0x34>)
    e57e:	681b      	ldr	r3, [r3, #0]
    e580:	2201      	movs	r2, #1
    e582:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    e584:	e007      	b.n	e596 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    e586:	4b06      	ldr	r3, [pc, #24]	; (e5a0 <_ZL10USBPluggedv+0x34>)
    e588:	681b      	ldr	r3, [r3, #0]
    e58a:	2200      	movs	r2, #0
    e58c:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    e58e:	4b04      	ldr	r3, [pc, #16]	; (e5a0 <_ZL10USBPluggedv+0x34>)
    e590:	681b      	ldr	r3, [r3, #0]
    e592:	2200      	movs	r2, #0
    e594:	701a      	strb	r2, [r3, #0]
}
    e596:	bf00      	nop
    e598:	bd80      	pop	{r7, pc}
    e59a:	bf00      	nop
    e59c:	0000e509 	.word	0x0000e509
    e5a0:	20001650 	.word	0x20001650

0000e5a4 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    e5a4:	b480      	push	{r7}
    e5a6:	b083      	sub	sp, #12
    e5a8:	af00      	add	r7, sp, #0
    e5aa:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    e5ac:	4a04      	ldr	r2, [pc, #16]	; (e5c0 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    e5ae:	687b      	ldr	r3, [r7, #4]
    e5b0:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    e5b2:	687b      	ldr	r3, [r7, #4]
    e5b4:	4618      	mov	r0, r3
    e5b6:	370c      	adds	r7, #12
    e5b8:	46bd      	mov	sp, r7
    e5ba:	bc80      	pop	{r7}
    e5bc:	4770      	bx	lr
    e5be:	bf00      	nop
    e5c0:	20001650 	.word	0x20001650

0000e5c4 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    e5c4:	b480      	push	{r7}
    e5c6:	b083      	sub	sp, #12
    e5c8:	af00      	add	r7, sp, #0
    e5ca:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    e5cc:	687b      	ldr	r3, [r7, #4]
    e5ce:	4618      	mov	r0, r3
    e5d0:	370c      	adds	r7, #12
    e5d2:	46bd      	mov	sp, r7
    e5d4:	bc80      	pop	{r7}
    e5d6:	4770      	bx	lr

0000e5d8 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    e5d8:	b580      	push	{r7, lr}
    e5da:	b082      	sub	sp, #8
    e5dc:	af00      	add	r7, sp, #0
    e5de:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    e5e0:	491e      	ldr	r1, [pc, #120]	; (e65c <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    e5e2:	2040      	movs	r0, #64	; 0x40
    e5e4:	4b1e      	ldr	r3, [pc, #120]	; (e660 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    e5e6:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    e5e8:	481e      	ldr	r0, [pc, #120]	; (e664 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e5ea:	4b1f      	ldr	r3, [pc, #124]	; (e668 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e5ec:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    e5ee:	2040      	movs	r0, #64	; 0x40
    e5f0:	4b1e      	ldr	r3, [pc, #120]	; (e66c <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    e5f2:	4798      	blx	r3
    e5f4:	4603      	mov	r3, r0
    e5f6:	461a      	mov	r2, r3
    e5f8:	687b      	ldr	r3, [r7, #4]
    e5fa:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    e5fc:	687b      	ldr	r3, [r7, #4]
    e5fe:	78db      	ldrb	r3, [r3, #3]
    e600:	2b00      	cmp	r3, #0
    e602:	d021      	beq.n	e648 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    e604:	687b      	ldr	r3, [r7, #4]
    e606:	2200      	movs	r2, #0
    e608:	709a      	strb	r2, [r3, #2]
			plugged=true;
    e60a:	687b      	ldr	r3, [r7, #4]
    e60c:	2201      	movs	r2, #1
    e60e:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    e610:	f44f 7216 	mov.w	r2, #600	; 0x258
    e614:	4916      	ldr	r1, [pc, #88]	; (e670 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    e616:	4813      	ldr	r0, [pc, #76]	; (e664 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e618:	4b16      	ldr	r3, [pc, #88]	; (e674 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    e61a:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    e61c:	4816      	ldr	r0, [pc, #88]	; (e678 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    e61e:	4b17      	ldr	r3, [pc, #92]	; (e67c <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    e620:	4798      	blx	r3
    e622:	4603      	mov	r3, r0
    e624:	f083 0301 	eor.w	r3, r3, #1
    e628:	b2db      	uxtb	r3, r3
    e62a:	2b00      	cmp	r3, #0
    e62c:	d008      	beq.n	e640 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    e62e:	687b      	ldr	r3, [r7, #4]
    e630:	789b      	ldrb	r3, [r3, #2]
    e632:	b2db      	uxtb	r3, r3
    e634:	2b00      	cmp	r3, #0
    e636:	d0f1      	beq.n	e61c <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    e638:	687b      	ldr	r3, [r7, #4]
    e63a:	2200      	movs	r2, #0
    e63c:	701a      	strb	r2, [r3, #0]
					return;
    e63e:	e009      	b.n	e654 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    e640:	4808      	ldr	r0, [pc, #32]	; (e664 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e642:	4b0f      	ldr	r3, [pc, #60]	; (e680 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    e644:	4798      	blx	r3
    e646:	e005      	b.n	e654 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    e648:	687b      	ldr	r3, [r7, #4]
    e64a:	2200      	movs	r2, #0
    e64c:	701a      	strb	r2, [r3, #0]
			plugged=false;
    e64e:	687b      	ldr	r3, [r7, #4]
    e650:	2200      	movs	r2, #0
    e652:	705a      	strb	r2, [r3, #1]
		}
		
}
    e654:	3708      	adds	r7, #8
    e656:	46bd      	mov	sp, r7
    e658:	bd80      	pop	{r7, pc}
    e65a:	bf00      	nop
    e65c:	0000e56d 	.word	0x0000e56d
    e660:	000022a1 	.word	0x000022a1
    e664:	200015f0 	.word	0x200015f0
    e668:	0000d8e5 	.word	0x0000d8e5
    e66c:	0000e509 	.word	0x0000e509
    e670:	0000e545 	.word	0x0000e545
    e674:	0000daa1 	.word	0x0000daa1
    e678:	200014f0 	.word	0x200014f0
    e67c:	0000df71 	.word	0x0000df71
    e680:	0000d959 	.word	0x0000d959

0000e684 <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
    e684:	b580      	push	{r7, lr}
    e686:	b082      	sub	sp, #8
    e688:	af00      	add	r7, sp, #0
    e68a:	6078      	str	r0, [r7, #4]
    e68c:	6039      	str	r1, [r7, #0]
    e68e:	687b      	ldr	r3, [r7, #4]
    e690:	2b01      	cmp	r3, #1
    e692:	d14c      	bne.n	e72e <_Z41__static_initialization_and_destruction_0ii+0xaa>
    e694:	683b      	ldr	r3, [r7, #0]
    e696:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e69a:	4293      	cmp	r3, r2
    e69c:	d147      	bne.n	e72e <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e69e:	4926      	ldr	r1, [pc, #152]	; (e738 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    e6a0:	4826      	ldr	r0, [pc, #152]	; (e73c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e6a2:	4b27      	ldr	r3, [pc, #156]	; (e740 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e6a4:	4798      	blx	r3
    e6a6:	4a27      	ldr	r2, [pc, #156]	; (e744 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e6a8:	4927      	ldr	r1, [pc, #156]	; (e748 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e6aa:	4824      	ldr	r0, [pc, #144]	; (e73c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e6ac:	4b27      	ldr	r3, [pc, #156]	; (e74c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e6ae:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    e6b0:	4927      	ldr	r1, [pc, #156]	; (e750 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e6b2:	4828      	ldr	r0, [pc, #160]	; (e754 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e6b4:	4b22      	ldr	r3, [pc, #136]	; (e740 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e6b6:	4798      	blx	r3
    e6b8:	4a22      	ldr	r2, [pc, #136]	; (e744 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e6ba:	4923      	ldr	r1, [pc, #140]	; (e748 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e6bc:	4825      	ldr	r0, [pc, #148]	; (e754 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e6be:	4b23      	ldr	r3, [pc, #140]	; (e74c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e6c0:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    e6c2:	4925      	ldr	r1, [pc, #148]	; (e758 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e6c4:	4825      	ldr	r0, [pc, #148]	; (e75c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e6c6:	4b1e      	ldr	r3, [pc, #120]	; (e740 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e6c8:	4798      	blx	r3
    e6ca:	4a1e      	ldr	r2, [pc, #120]	; (e744 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e6cc:	491e      	ldr	r1, [pc, #120]	; (e748 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e6ce:	4823      	ldr	r0, [pc, #140]	; (e75c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e6d0:	4b1e      	ldr	r3, [pc, #120]	; (e74c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e6d2:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e6d4:	4922      	ldr	r1, [pc, #136]	; (e760 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e6d6:	4823      	ldr	r0, [pc, #140]	; (e764 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e6d8:	4b19      	ldr	r3, [pc, #100]	; (e740 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e6da:	4798      	blx	r3
    e6dc:	4a19      	ldr	r2, [pc, #100]	; (e744 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e6de:	491a      	ldr	r1, [pc, #104]	; (e748 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e6e0:	4820      	ldr	r0, [pc, #128]	; (e764 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e6e2:	4b1a      	ldr	r3, [pc, #104]	; (e74c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e6e4:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    e6e6:	4920      	ldr	r1, [pc, #128]	; (e768 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e6e8:	4820      	ldr	r0, [pc, #128]	; (e76c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e6ea:	4b15      	ldr	r3, [pc, #84]	; (e740 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e6ec:	4798      	blx	r3
    e6ee:	4a15      	ldr	r2, [pc, #84]	; (e744 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e6f0:	4915      	ldr	r1, [pc, #84]	; (e748 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e6f2:	481e      	ldr	r0, [pc, #120]	; (e76c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e6f4:	4b15      	ldr	r3, [pc, #84]	; (e74c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e6f6:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e6f8:	491d      	ldr	r1, [pc, #116]	; (e770 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    e6fa:	481e      	ldr	r0, [pc, #120]	; (e774 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e6fc:	4b10      	ldr	r3, [pc, #64]	; (e740 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e6fe:	4798      	blx	r3
    e700:	4a10      	ldr	r2, [pc, #64]	; (e744 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e702:	4911      	ldr	r1, [pc, #68]	; (e748 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e704:	481b      	ldr	r0, [pc, #108]	; (e774 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e706:	4b11      	ldr	r3, [pc, #68]	; (e74c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e708:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e70a:	491b      	ldr	r1, [pc, #108]	; (e778 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    e70c:	481b      	ldr	r0, [pc, #108]	; (e77c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e70e:	4b0c      	ldr	r3, [pc, #48]	; (e740 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e710:	4798      	blx	r3
    e712:	4a0c      	ldr	r2, [pc, #48]	; (e744 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e714:	490c      	ldr	r1, [pc, #48]	; (e748 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e716:	4819      	ldr	r0, [pc, #100]	; (e77c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e718:	4b0c      	ldr	r3, [pc, #48]	; (e74c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e71a:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    e71c:	4918      	ldr	r1, [pc, #96]	; (e780 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    e71e:	4819      	ldr	r0, [pc, #100]	; (e784 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e720:	4b07      	ldr	r3, [pc, #28]	; (e740 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e722:	4798      	blx	r3
    e724:	4a07      	ldr	r2, [pc, #28]	; (e744 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e726:	4908      	ldr	r1, [pc, #32]	; (e748 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e728:	4816      	ldr	r0, [pc, #88]	; (e784 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e72a:	4b08      	ldr	r3, [pc, #32]	; (e74c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e72c:	4798      	blx	r3
    e72e:	bf00      	nop
    e730:	3708      	adds	r7, #8
    e732:	46bd      	mov	sp, r7
    e734:	bd80      	pop	{r7, pc}
    e736:	bf00      	nop
    e738:	20001654 	.word	0x20001654
    e73c:	20001550 	.word	0x20001550
    e740:	0000d7f9 	.word	0x0000d7f9
    e744:	20000000 	.word	0x20000000
    e748:	0000d831 	.word	0x0000d831
    e74c:	0000e85d 	.word	0x0000e85d
    e750:	200016e8 	.word	0x200016e8
    e754:	20001570 	.word	0x20001570
    e758:	2000180c 	.word	0x2000180c
    e75c:	20001590 	.word	0x20001590
    e760:	20001708 	.word	0x20001708
    e764:	200015b0 	.word	0x200015b0
    e768:	200017cc 	.word	0x200017cc
    e76c:	200015d0 	.word	0x200015d0
    e770:	200017ec 	.word	0x200017ec
    e774:	200015f0 	.word	0x200015f0
    e778:	200016c4 	.word	0x200016c4
    e77c:	20001610 	.word	0x20001610
    e780:	20001764 	.word	0x20001764
    e784:	20001630 	.word	0x20001630

0000e788 <_GLOBAL__sub_I_ptrSerialTerminalClass>:
    e788:	b580      	push	{r7, lr}
    e78a:	af00      	add	r7, sp, #0
    e78c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e790:	2001      	movs	r0, #1
    e792:	4b01      	ldr	r3, [pc, #4]	; (e798 <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
    e794:	4798      	blx	r3
    e796:	bd80      	pop	{r7, pc}
    e798:	0000e685 	.word	0x0000e685

0000e79c <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    e79c:	b480      	push	{r7}
    e79e:	b083      	sub	sp, #12
    e7a0:	af00      	add	r7, sp, #0
    e7a2:	6078      	str	r0, [r7, #4]
    return (void *)0;
    e7a4:	2300      	movs	r3, #0
	}
    e7a6:	4618      	mov	r0, r3
    e7a8:	370c      	adds	r7, #12
    e7aa:	46bd      	mov	sp, r7
    e7ac:	bc80      	pop	{r7}
    e7ae:	4770      	bx	lr

0000e7b0 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    e7b0:	b480      	push	{r7}
    e7b2:	af00      	add	r7, sp, #0
		}
    e7b4:	bf00      	nop
    e7b6:	46bd      	mov	sp, r7
    e7b8:	bc80      	pop	{r7}
    e7ba:	4770      	bx	lr

0000e7bc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    e7bc:	b580      	push	{r7, lr}
    e7be:	b084      	sub	sp, #16
    e7c0:	af00      	add	r7, sp, #0
    e7c2:	60f8      	str	r0, [r7, #12]
    e7c4:	60b9      	str	r1, [r7, #8]
    e7c6:	4613      	mov	r3, r2
    e7c8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e7ca:	68fb      	ldr	r3, [r7, #12]
    e7cc:	2b00      	cmp	r3, #0
    e7ce:	d004      	beq.n	e7da <io_write+0x1e>
    e7d0:	68bb      	ldr	r3, [r7, #8]
    e7d2:	2b00      	cmp	r3, #0
    e7d4:	d001      	beq.n	e7da <io_write+0x1e>
    e7d6:	2301      	movs	r3, #1
    e7d8:	e000      	b.n	e7dc <io_write+0x20>
    e7da:	2300      	movs	r3, #0
    e7dc:	f003 0301 	and.w	r3, r3, #1
    e7e0:	b2db      	uxtb	r3, r3
    e7e2:	2234      	movs	r2, #52	; 0x34
    e7e4:	4907      	ldr	r1, [pc, #28]	; (e804 <io_write+0x48>)
    e7e6:	4618      	mov	r0, r3
    e7e8:	4b07      	ldr	r3, [pc, #28]	; (e808 <io_write+0x4c>)
    e7ea:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    e7ec:	68fb      	ldr	r3, [r7, #12]
    e7ee:	681b      	ldr	r3, [r3, #0]
    e7f0:	88fa      	ldrh	r2, [r7, #6]
    e7f2:	68b9      	ldr	r1, [r7, #8]
    e7f4:	68f8      	ldr	r0, [r7, #12]
    e7f6:	4798      	blx	r3
    e7f8:	4603      	mov	r3, r0
}
    e7fa:	4618      	mov	r0, r3
    e7fc:	3710      	adds	r7, #16
    e7fe:	46bd      	mov	sp, r7
    e800:	bd80      	pop	{r7, pc}
    e802:	bf00      	nop
    e804:	0000f050 	.word	0x0000f050
    e808:	000037fd 	.word	0x000037fd

0000e80c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    e80c:	b580      	push	{r7, lr}
    e80e:	b084      	sub	sp, #16
    e810:	af00      	add	r7, sp, #0
    e812:	60f8      	str	r0, [r7, #12]
    e814:	60b9      	str	r1, [r7, #8]
    e816:	4613      	mov	r3, r2
    e818:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e81a:	68fb      	ldr	r3, [r7, #12]
    e81c:	2b00      	cmp	r3, #0
    e81e:	d004      	beq.n	e82a <io_read+0x1e>
    e820:	68bb      	ldr	r3, [r7, #8]
    e822:	2b00      	cmp	r3, #0
    e824:	d001      	beq.n	e82a <io_read+0x1e>
    e826:	2301      	movs	r3, #1
    e828:	e000      	b.n	e82c <io_read+0x20>
    e82a:	2300      	movs	r3, #0
    e82c:	f003 0301 	and.w	r3, r3, #1
    e830:	b2db      	uxtb	r3, r3
    e832:	223d      	movs	r2, #61	; 0x3d
    e834:	4907      	ldr	r1, [pc, #28]	; (e854 <io_read+0x48>)
    e836:	4618      	mov	r0, r3
    e838:	4b07      	ldr	r3, [pc, #28]	; (e858 <io_read+0x4c>)
    e83a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    e83c:	68fb      	ldr	r3, [r7, #12]
    e83e:	685b      	ldr	r3, [r3, #4]
    e840:	88fa      	ldrh	r2, [r7, #6]
    e842:	68b9      	ldr	r1, [r7, #8]
    e844:	68f8      	ldr	r0, [r7, #12]
    e846:	4798      	blx	r3
    e848:	4603      	mov	r3, r0
}
    e84a:	4618      	mov	r0, r3
    e84c:	3710      	adds	r7, #16
    e84e:	46bd      	mov	sp, r7
    e850:	bd80      	pop	{r7, pc}
    e852:	bf00      	nop
    e854:	0000f050 	.word	0x0000f050
    e858:	000037fd 	.word	0x000037fd

0000e85c <__aeabi_atexit>:
    e85c:	460b      	mov	r3, r1
    e85e:	4601      	mov	r1, r0
    e860:	4618      	mov	r0, r3
    e862:	f000 b801 	b.w	e868 <__cxa_atexit>
    e866:	bf00      	nop

0000e868 <__cxa_atexit>:
    e868:	4613      	mov	r3, r2
    e86a:	460a      	mov	r2, r1
    e86c:	4601      	mov	r1, r0
    e86e:	2002      	movs	r0, #2
    e870:	f000 b91e 	b.w	eab0 <__register_exitproc>

0000e874 <ffs>:
    e874:	b140      	cbz	r0, e888 <ffs+0x14>
    e876:	2300      	movs	r3, #0
    e878:	fa40 f103 	asr.w	r1, r0, r3
    e87c:	1c5a      	adds	r2, r3, #1
    e87e:	07c9      	lsls	r1, r1, #31
    e880:	4613      	mov	r3, r2
    e882:	d5f9      	bpl.n	e878 <ffs+0x4>
    e884:	4610      	mov	r0, r2
    e886:	4770      	bx	lr
    e888:	4602      	mov	r2, r0
    e88a:	4610      	mov	r0, r2
    e88c:	4770      	bx	lr
    e88e:	bf00      	nop

0000e890 <__libc_init_array>:
    e890:	b570      	push	{r4, r5, r6, lr}
    e892:	4e0f      	ldr	r6, [pc, #60]	; (e8d0 <__libc_init_array+0x40>)
    e894:	4d0f      	ldr	r5, [pc, #60]	; (e8d4 <__libc_init_array+0x44>)
    e896:	1b76      	subs	r6, r6, r5
    e898:	10b6      	asrs	r6, r6, #2
    e89a:	bf18      	it	ne
    e89c:	2400      	movne	r4, #0
    e89e:	d005      	beq.n	e8ac <__libc_init_array+0x1c>
    e8a0:	3401      	adds	r4, #1
    e8a2:	f855 3b04 	ldr.w	r3, [r5], #4
    e8a6:	4798      	blx	r3
    e8a8:	42a6      	cmp	r6, r4
    e8aa:	d1f9      	bne.n	e8a0 <__libc_init_array+0x10>
    e8ac:	4e0a      	ldr	r6, [pc, #40]	; (e8d8 <__libc_init_array+0x48>)
    e8ae:	4d0b      	ldr	r5, [pc, #44]	; (e8dc <__libc_init_array+0x4c>)
    e8b0:	1b76      	subs	r6, r6, r5
    e8b2:	f000 fbd9 	bl	f068 <_init>
    e8b6:	10b6      	asrs	r6, r6, #2
    e8b8:	bf18      	it	ne
    e8ba:	2400      	movne	r4, #0
    e8bc:	d006      	beq.n	e8cc <__libc_init_array+0x3c>
    e8be:	3401      	adds	r4, #1
    e8c0:	f855 3b04 	ldr.w	r3, [r5], #4
    e8c4:	4798      	blx	r3
    e8c6:	42a6      	cmp	r6, r4
    e8c8:	d1f9      	bne.n	e8be <__libc_init_array+0x2e>
    e8ca:	bd70      	pop	{r4, r5, r6, pc}
    e8cc:	bd70      	pop	{r4, r5, r6, pc}
    e8ce:	bf00      	nop
    e8d0:	0000f074 	.word	0x0000f074
    e8d4:	0000f074 	.word	0x0000f074
    e8d8:	0000f090 	.word	0x0000f090
    e8dc:	0000f074 	.word	0x0000f074

0000e8e0 <memcpy>:
    e8e0:	4684      	mov	ip, r0
    e8e2:	ea41 0300 	orr.w	r3, r1, r0
    e8e6:	f013 0303 	ands.w	r3, r3, #3
    e8ea:	d16d      	bne.n	e9c8 <memcpy+0xe8>
    e8ec:	3a40      	subs	r2, #64	; 0x40
    e8ee:	d341      	bcc.n	e974 <memcpy+0x94>
    e8f0:	f851 3b04 	ldr.w	r3, [r1], #4
    e8f4:	f840 3b04 	str.w	r3, [r0], #4
    e8f8:	f851 3b04 	ldr.w	r3, [r1], #4
    e8fc:	f840 3b04 	str.w	r3, [r0], #4
    e900:	f851 3b04 	ldr.w	r3, [r1], #4
    e904:	f840 3b04 	str.w	r3, [r0], #4
    e908:	f851 3b04 	ldr.w	r3, [r1], #4
    e90c:	f840 3b04 	str.w	r3, [r0], #4
    e910:	f851 3b04 	ldr.w	r3, [r1], #4
    e914:	f840 3b04 	str.w	r3, [r0], #4
    e918:	f851 3b04 	ldr.w	r3, [r1], #4
    e91c:	f840 3b04 	str.w	r3, [r0], #4
    e920:	f851 3b04 	ldr.w	r3, [r1], #4
    e924:	f840 3b04 	str.w	r3, [r0], #4
    e928:	f851 3b04 	ldr.w	r3, [r1], #4
    e92c:	f840 3b04 	str.w	r3, [r0], #4
    e930:	f851 3b04 	ldr.w	r3, [r1], #4
    e934:	f840 3b04 	str.w	r3, [r0], #4
    e938:	f851 3b04 	ldr.w	r3, [r1], #4
    e93c:	f840 3b04 	str.w	r3, [r0], #4
    e940:	f851 3b04 	ldr.w	r3, [r1], #4
    e944:	f840 3b04 	str.w	r3, [r0], #4
    e948:	f851 3b04 	ldr.w	r3, [r1], #4
    e94c:	f840 3b04 	str.w	r3, [r0], #4
    e950:	f851 3b04 	ldr.w	r3, [r1], #4
    e954:	f840 3b04 	str.w	r3, [r0], #4
    e958:	f851 3b04 	ldr.w	r3, [r1], #4
    e95c:	f840 3b04 	str.w	r3, [r0], #4
    e960:	f851 3b04 	ldr.w	r3, [r1], #4
    e964:	f840 3b04 	str.w	r3, [r0], #4
    e968:	f851 3b04 	ldr.w	r3, [r1], #4
    e96c:	f840 3b04 	str.w	r3, [r0], #4
    e970:	3a40      	subs	r2, #64	; 0x40
    e972:	d2bd      	bcs.n	e8f0 <memcpy+0x10>
    e974:	3230      	adds	r2, #48	; 0x30
    e976:	d311      	bcc.n	e99c <memcpy+0xbc>
    e978:	f851 3b04 	ldr.w	r3, [r1], #4
    e97c:	f840 3b04 	str.w	r3, [r0], #4
    e980:	f851 3b04 	ldr.w	r3, [r1], #4
    e984:	f840 3b04 	str.w	r3, [r0], #4
    e988:	f851 3b04 	ldr.w	r3, [r1], #4
    e98c:	f840 3b04 	str.w	r3, [r0], #4
    e990:	f851 3b04 	ldr.w	r3, [r1], #4
    e994:	f840 3b04 	str.w	r3, [r0], #4
    e998:	3a10      	subs	r2, #16
    e99a:	d2ed      	bcs.n	e978 <memcpy+0x98>
    e99c:	320c      	adds	r2, #12
    e99e:	d305      	bcc.n	e9ac <memcpy+0xcc>
    e9a0:	f851 3b04 	ldr.w	r3, [r1], #4
    e9a4:	f840 3b04 	str.w	r3, [r0], #4
    e9a8:	3a04      	subs	r2, #4
    e9aa:	d2f9      	bcs.n	e9a0 <memcpy+0xc0>
    e9ac:	3204      	adds	r2, #4
    e9ae:	d008      	beq.n	e9c2 <memcpy+0xe2>
    e9b0:	07d2      	lsls	r2, r2, #31
    e9b2:	bf1c      	itt	ne
    e9b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    e9b8:	f800 3b01 	strbne.w	r3, [r0], #1
    e9bc:	d301      	bcc.n	e9c2 <memcpy+0xe2>
    e9be:	880b      	ldrh	r3, [r1, #0]
    e9c0:	8003      	strh	r3, [r0, #0]
    e9c2:	4660      	mov	r0, ip
    e9c4:	4770      	bx	lr
    e9c6:	bf00      	nop
    e9c8:	2a08      	cmp	r2, #8
    e9ca:	d313      	bcc.n	e9f4 <memcpy+0x114>
    e9cc:	078b      	lsls	r3, r1, #30
    e9ce:	d08d      	beq.n	e8ec <memcpy+0xc>
    e9d0:	f010 0303 	ands.w	r3, r0, #3
    e9d4:	d08a      	beq.n	e8ec <memcpy+0xc>
    e9d6:	f1c3 0304 	rsb	r3, r3, #4
    e9da:	1ad2      	subs	r2, r2, r3
    e9dc:	07db      	lsls	r3, r3, #31
    e9de:	bf1c      	itt	ne
    e9e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    e9e4:	f800 3b01 	strbne.w	r3, [r0], #1
    e9e8:	d380      	bcc.n	e8ec <memcpy+0xc>
    e9ea:	f831 3b02 	ldrh.w	r3, [r1], #2
    e9ee:	f820 3b02 	strh.w	r3, [r0], #2
    e9f2:	e77b      	b.n	e8ec <memcpy+0xc>
    e9f4:	3a04      	subs	r2, #4
    e9f6:	d3d9      	bcc.n	e9ac <memcpy+0xcc>
    e9f8:	3a01      	subs	r2, #1
    e9fa:	f811 3b01 	ldrb.w	r3, [r1], #1
    e9fe:	f800 3b01 	strb.w	r3, [r0], #1
    ea02:	d2f9      	bcs.n	e9f8 <memcpy+0x118>
    ea04:	780b      	ldrb	r3, [r1, #0]
    ea06:	7003      	strb	r3, [r0, #0]
    ea08:	784b      	ldrb	r3, [r1, #1]
    ea0a:	7043      	strb	r3, [r0, #1]
    ea0c:	788b      	ldrb	r3, [r1, #2]
    ea0e:	7083      	strb	r3, [r0, #2]
    ea10:	4660      	mov	r0, ip
    ea12:	4770      	bx	lr

0000ea14 <memset>:
    ea14:	b470      	push	{r4, r5, r6}
    ea16:	0786      	lsls	r6, r0, #30
    ea18:	d046      	beq.n	eaa8 <memset+0x94>
    ea1a:	1e54      	subs	r4, r2, #1
    ea1c:	2a00      	cmp	r2, #0
    ea1e:	d041      	beq.n	eaa4 <memset+0x90>
    ea20:	b2ca      	uxtb	r2, r1
    ea22:	4603      	mov	r3, r0
    ea24:	e002      	b.n	ea2c <memset+0x18>
    ea26:	f114 34ff 	adds.w	r4, r4, #4294967295
    ea2a:	d33b      	bcc.n	eaa4 <memset+0x90>
    ea2c:	f803 2b01 	strb.w	r2, [r3], #1
    ea30:	079d      	lsls	r5, r3, #30
    ea32:	d1f8      	bne.n	ea26 <memset+0x12>
    ea34:	2c03      	cmp	r4, #3
    ea36:	d92e      	bls.n	ea96 <memset+0x82>
    ea38:	b2cd      	uxtb	r5, r1
    ea3a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    ea3e:	2c0f      	cmp	r4, #15
    ea40:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    ea44:	d919      	bls.n	ea7a <memset+0x66>
    ea46:	f103 0210 	add.w	r2, r3, #16
    ea4a:	4626      	mov	r6, r4
    ea4c:	3e10      	subs	r6, #16
    ea4e:	2e0f      	cmp	r6, #15
    ea50:	f842 5c10 	str.w	r5, [r2, #-16]
    ea54:	f842 5c0c 	str.w	r5, [r2, #-12]
    ea58:	f842 5c08 	str.w	r5, [r2, #-8]
    ea5c:	f842 5c04 	str.w	r5, [r2, #-4]
    ea60:	f102 0210 	add.w	r2, r2, #16
    ea64:	d8f2      	bhi.n	ea4c <memset+0x38>
    ea66:	f1a4 0210 	sub.w	r2, r4, #16
    ea6a:	f022 020f 	bic.w	r2, r2, #15
    ea6e:	f004 040f 	and.w	r4, r4, #15
    ea72:	3210      	adds	r2, #16
    ea74:	2c03      	cmp	r4, #3
    ea76:	4413      	add	r3, r2
    ea78:	d90d      	bls.n	ea96 <memset+0x82>
    ea7a:	461e      	mov	r6, r3
    ea7c:	4622      	mov	r2, r4
    ea7e:	3a04      	subs	r2, #4
    ea80:	2a03      	cmp	r2, #3
    ea82:	f846 5b04 	str.w	r5, [r6], #4
    ea86:	d8fa      	bhi.n	ea7e <memset+0x6a>
    ea88:	1f22      	subs	r2, r4, #4
    ea8a:	f022 0203 	bic.w	r2, r2, #3
    ea8e:	3204      	adds	r2, #4
    ea90:	4413      	add	r3, r2
    ea92:	f004 0403 	and.w	r4, r4, #3
    ea96:	b12c      	cbz	r4, eaa4 <memset+0x90>
    ea98:	b2c9      	uxtb	r1, r1
    ea9a:	441c      	add	r4, r3
    ea9c:	f803 1b01 	strb.w	r1, [r3], #1
    eaa0:	429c      	cmp	r4, r3
    eaa2:	d1fb      	bne.n	ea9c <memset+0x88>
    eaa4:	bc70      	pop	{r4, r5, r6}
    eaa6:	4770      	bx	lr
    eaa8:	4614      	mov	r4, r2
    eaaa:	4603      	mov	r3, r0
    eaac:	e7c2      	b.n	ea34 <memset+0x20>
    eaae:	bf00      	nop

0000eab0 <__register_exitproc>:
    eab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eab4:	4d2c      	ldr	r5, [pc, #176]	; (eb68 <__register_exitproc+0xb8>)
    eab6:	4606      	mov	r6, r0
    eab8:	6828      	ldr	r0, [r5, #0]
    eaba:	4698      	mov	r8, r3
    eabc:	460f      	mov	r7, r1
    eabe:	4691      	mov	r9, r2
    eac0:	f000 f882 	bl	ebc8 <__retarget_lock_acquire_recursive>
    eac4:	4b29      	ldr	r3, [pc, #164]	; (eb6c <__register_exitproc+0xbc>)
    eac6:	681c      	ldr	r4, [r3, #0]
    eac8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    eacc:	2b00      	cmp	r3, #0
    eace:	d03e      	beq.n	eb4e <__register_exitproc+0x9e>
    ead0:	685a      	ldr	r2, [r3, #4]
    ead2:	2a1f      	cmp	r2, #31
    ead4:	dc1c      	bgt.n	eb10 <__register_exitproc+0x60>
    ead6:	f102 0e01 	add.w	lr, r2, #1
    eada:	b176      	cbz	r6, eafa <__register_exitproc+0x4a>
    eadc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    eae0:	2401      	movs	r4, #1
    eae2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    eae6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    eaea:	4094      	lsls	r4, r2
    eaec:	4320      	orrs	r0, r4
    eaee:	2e02      	cmp	r6, #2
    eaf0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    eaf4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    eaf8:	d023      	beq.n	eb42 <__register_exitproc+0x92>
    eafa:	3202      	adds	r2, #2
    eafc:	f8c3 e004 	str.w	lr, [r3, #4]
    eb00:	6828      	ldr	r0, [r5, #0]
    eb02:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    eb06:	f000 f861 	bl	ebcc <__retarget_lock_release_recursive>
    eb0a:	2000      	movs	r0, #0
    eb0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eb10:	4b17      	ldr	r3, [pc, #92]	; (eb70 <__register_exitproc+0xc0>)
    eb12:	b30b      	cbz	r3, eb58 <__register_exitproc+0xa8>
    eb14:	f44f 70c8 	mov.w	r0, #400	; 0x190
    eb18:	f7ff fe40 	bl	e79c <malloc>
    eb1c:	4603      	mov	r3, r0
    eb1e:	b1d8      	cbz	r0, eb58 <__register_exitproc+0xa8>
    eb20:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    eb24:	6002      	str	r2, [r0, #0]
    eb26:	2100      	movs	r1, #0
    eb28:	6041      	str	r1, [r0, #4]
    eb2a:	460a      	mov	r2, r1
    eb2c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    eb30:	f04f 0e01 	mov.w	lr, #1
    eb34:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    eb38:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    eb3c:	2e00      	cmp	r6, #0
    eb3e:	d0dc      	beq.n	eafa <__register_exitproc+0x4a>
    eb40:	e7cc      	b.n	eadc <__register_exitproc+0x2c>
    eb42:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    eb46:	430c      	orrs	r4, r1
    eb48:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    eb4c:	e7d5      	b.n	eafa <__register_exitproc+0x4a>
    eb4e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    eb52:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    eb56:	e7bb      	b.n	ead0 <__register_exitproc+0x20>
    eb58:	6828      	ldr	r0, [r5, #0]
    eb5a:	f000 f837 	bl	ebcc <__retarget_lock_release_recursive>
    eb5e:	f04f 30ff 	mov.w	r0, #4294967295
    eb62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eb66:	bf00      	nop
    eb68:	20000638 	.word	0x20000638
    eb6c:	0000f064 	.word	0x0000f064
    eb70:	0000e79d 	.word	0x0000e79d

0000eb74 <register_fini>:
    eb74:	4b02      	ldr	r3, [pc, #8]	; (eb80 <register_fini+0xc>)
    eb76:	b113      	cbz	r3, eb7e <register_fini+0xa>
    eb78:	4802      	ldr	r0, [pc, #8]	; (eb84 <register_fini+0x10>)
    eb7a:	f000 b805 	b.w	eb88 <atexit>
    eb7e:	4770      	bx	lr
    eb80:	00000000 	.word	0x00000000
    eb84:	0000eb95 	.word	0x0000eb95

0000eb88 <atexit>:
    eb88:	2300      	movs	r3, #0
    eb8a:	4601      	mov	r1, r0
    eb8c:	461a      	mov	r2, r3
    eb8e:	4618      	mov	r0, r3
    eb90:	f7ff bf8e 	b.w	eab0 <__register_exitproc>

0000eb94 <__libc_fini_array>:
    eb94:	b538      	push	{r3, r4, r5, lr}
    eb96:	4c0a      	ldr	r4, [pc, #40]	; (ebc0 <__libc_fini_array+0x2c>)
    eb98:	4d0a      	ldr	r5, [pc, #40]	; (ebc4 <__libc_fini_array+0x30>)
    eb9a:	1b64      	subs	r4, r4, r5
    eb9c:	10a4      	asrs	r4, r4, #2
    eb9e:	d00a      	beq.n	ebb6 <__libc_fini_array+0x22>
    eba0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    eba4:	3b01      	subs	r3, #1
    eba6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    ebaa:	3c01      	subs	r4, #1
    ebac:	f855 3904 	ldr.w	r3, [r5], #-4
    ebb0:	4798      	blx	r3
    ebb2:	2c00      	cmp	r4, #0
    ebb4:	d1f9      	bne.n	ebaa <__libc_fini_array+0x16>
    ebb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ebba:	f000 ba69 	b.w	f090 <_fini>
    ebbe:	bf00      	nop
    ebc0:	0000f0a0 	.word	0x0000f0a0
    ebc4:	0000f09c 	.word	0x0000f09c

0000ebc8 <__retarget_lock_acquire_recursive>:
    ebc8:	4770      	bx	lr
    ebca:	bf00      	nop

0000ebcc <__retarget_lock_release_recursive>:
    ebcc:	4770      	bx	lr
    ebce:	bf00      	nop
    ebd0:	682f2e2e 	.word	0x682f2e2e
    ebd4:	702f6c70 	.word	0x702f6c70
    ebd8:	2f74726f 	.word	0x2f74726f
    ebdc:	5f6c7068 	.word	0x5f6c7068
    ebe0:	6f697067 	.word	0x6f697067
    ebe4:	7361625f 	.word	0x7361625f
    ebe8:	00682e65 	.word	0x00682e65
    ebec:	682f2e2e 	.word	0x682f2e2e
    ebf0:	692f6c61 	.word	0x692f6c61
    ebf4:	756c636e 	.word	0x756c636e
    ebf8:	682f6564 	.word	0x682f6564
    ebfc:	775f6c61 	.word	0x775f6c61
    ec00:	682e7464 	.word	0x682e7464
    ec04:	00000000 	.word	0x00000000
    ec08:	682f2e2e 	.word	0x682f2e2e
    ec0c:	732f6c61 	.word	0x732f6c61
    ec10:	682f6372 	.word	0x682f6372
    ec14:	635f6c61 	.word	0x635f6c61
    ec18:	6e656c61 	.word	0x6e656c61
    ec1c:	2e726164 	.word	0x2e726164
    ec20:	00000063 	.word	0x00000063
    ec24:	682f2e2e 	.word	0x682f2e2e
    ec28:	732f6c61 	.word	0x732f6c61
    ec2c:	682f6372 	.word	0x682f6372
    ec30:	635f6c61 	.word	0x635f6c61
    ec34:	615f6e61 	.word	0x615f6e61
    ec38:	636e7973 	.word	0x636e7973
    ec3c:	0000632e 	.word	0x0000632e
    ec40:	682f2e2e 	.word	0x682f2e2e
    ec44:	732f6c61 	.word	0x732f6c61
    ec48:	682f6372 	.word	0x682f6372
    ec4c:	635f6c61 	.word	0x635f6c61
    ec50:	735f6372 	.word	0x735f6372
    ec54:	2e636e79 	.word	0x2e636e79
    ec58:	00000063 	.word	0x00000063
    ec5c:	682f2e2e 	.word	0x682f2e2e
    ec60:	732f6c61 	.word	0x732f6c61
    ec64:	682f6372 	.word	0x682f6372
    ec68:	695f6c61 	.word	0x695f6c61
    ec6c:	6d5f6332 	.word	0x6d5f6332
    ec70:	6e79735f 	.word	0x6e79735f
    ec74:	00632e63 	.word	0x00632e63
    ec78:	682f2e2e 	.word	0x682f2e2e
    ec7c:	732f6c61 	.word	0x732f6c61
    ec80:	682f6372 	.word	0x682f6372
    ec84:	705f6c61 	.word	0x705f6c61
    ec88:	632e6d77 	.word	0x632e6d77
    ec8c:	00000000 	.word	0x00000000
    ec90:	682f2e2e 	.word	0x682f2e2e
    ec94:	732f6c61 	.word	0x732f6c61
    ec98:	682f6372 	.word	0x682f6372
    ec9c:	715f6c61 	.word	0x715f6c61
    eca0:	5f697073 	.word	0x5f697073
    eca4:	636e7973 	.word	0x636e7973
    eca8:	0000632e 	.word	0x0000632e
    ecac:	682f2e2e 	.word	0x682f2e2e
    ecb0:	732f6c61 	.word	0x732f6c61
    ecb4:	682f6372 	.word	0x682f6372
    ecb8:	735f6c61 	.word	0x735f6c61
    ecbc:	6d5f6970 	.word	0x6d5f6970
    ecc0:	6e79735f 	.word	0x6e79735f
    ecc4:	00632e63 	.word	0x00632e63
    ecc8:	682f2e2e 	.word	0x682f2e2e
    eccc:	732f6c61 	.word	0x732f6c61
    ecd0:	682f6372 	.word	0x682f6372
    ecd4:	745f6c61 	.word	0x745f6c61
    ecd8:	72656d69 	.word	0x72656d69
    ecdc:	0000632e 	.word	0x0000632e
    ece0:	682f2e2e 	.word	0x682f2e2e
    ece4:	752f6c61 	.word	0x752f6c61
    ece8:	736c6974 	.word	0x736c6974
    ecec:	6372732f 	.word	0x6372732f
    ecf0:	6974752f 	.word	0x6974752f
    ecf4:	6c5f736c 	.word	0x6c5f736c
    ecf8:	2e747369 	.word	0x2e747369
    ecfc:	00000063 	.word	0x00000063

0000ed00 <_map>:
    ed00:	00000000 00000040 00000001 00000021     ....@.......!...
    ed10:	00000003 00000003 00000004 00000004     ................
    ed20:	00000005 00000005 00000006 00000056     ............V...
    ed30:	00000007 00000057 00000008 00000028     ....W.......(...
    ed40:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
    ed50:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

0000ed60 <user_mux_confs>:
    ed60:	00020100 00000000 00000000 00000000     ................
	...

0000eda4 <channel_confs>:
    eda4:	0660065f 00000000 00000000 00000000     _.`.............
	...

0000ede4 <interrupt_cfg>:
	...
    ee64:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    ee74:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    ee84:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    ee94:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    eea4:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    eeb4:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    eec4:	43000400 43000800 43000c00              ...C...C...C

0000eed0 <sercomspi_regs>:
    eed0:	0020000c 00020000 00000000 01ff0001     .. .............
    eee0:	30000c04 02000000 00000000 ff001700     ...0............
    eef0:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    ef00:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
    ef10:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
    ef20:	43001400 43001800                       ...C...C

0000ef28 <_usb_ep_cfgs>:
    ef28:	20000ae8 00000000 00000040 20000b28     ... ....@...(.. 
    ef38:	20000b68 00400040 20000ba8 20000be8     h.. @.@.... ... 
    ef48:	00400040 20000c28 20000c68 00400040     @.@.(.. h.. @.@.
    ef58:	20000ca8 20000ce8 00400040 00000804     ... ... @.@.....
    ef68:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
    ef78:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
    ef88:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
    ef98:	7361625f 00682e65                       _base.h.

0000efa0 <n25q256a_interface>:
    efa0:	0000b7c5 0000b869 0000b979 0000bb31     ....i...y...1...
    efb0:	0000bbc1 752f2e2e 642f6273 63697665     ....../usb/devic
    efc0:	73752f65 2e636462 00000063              e/usbdc.c...

0000efcc <_ZTV9CDC_Class>:
	...
    efd4:	0000e0ed 0000e1cd 0000dd71 0000e0b5     ........q.......
    efe4:	0000e265 0000e079 0000df8d 0000dfdd     e...y...........
    eff4:	0000e0d5 0000e135                       ....5...

0000effc <_ZTV6Stream>:
	...
    f004:	0000e7b1 0000e3d1 0000dd71 0000dd85     ........q.......
    f014:	0000e7b1 0000e7b1 0000e7b1 2e257830     ............0x%.
    f024:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
    f034:	0066766f                                ovf.

0000f038 <_ZTV5Print>:
	...
    f040:	0000e7b1 0000e3d1 0000dd71 0000dd85     ........q.......
    f050:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    f060:	00632e6f                                o.c.

0000f064 <_global_impure_ptr>:
    f064:	20000210                                ... 

0000f068 <_init>:
    f068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f06a:	bf00      	nop
    f06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f06e:	bc08      	pop	{r3}
    f070:	469e      	mov	lr, r3
    f072:	4770      	bx	lr

0000f074 <__init_array_start>:
    f074:	0000eb75 	.word	0x0000eb75

0000f078 <__frame_dummy_init_array_entry>:
    f078:	00000289 000005c5 0000096d 0000dd39     ........m...9...
    f088:	0000e3bd 0000e789                       ........

0000f090 <_fini>:
    f090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f092:	bf00      	nop
    f094:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f096:	bc08      	pop	{r3}
    f098:	469e      	mov	lr, r3
    f09a:	4770      	bx	lr

0000f09c <__fini_array_start>:
    f09c:	00000265 	.word	0x00000265
