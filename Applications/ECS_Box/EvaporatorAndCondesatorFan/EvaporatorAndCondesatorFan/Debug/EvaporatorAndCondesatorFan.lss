
EvaporatorAndCondesatorFan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010434  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00010434  00010434  00020434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000060c  20000000  0001043c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003060c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003060c  2**0
                  CONTENTS
  5 .bss          000011a4  2000060c  00010a48  0003060c  2**2
                  ALLOC
  6 .stack        00010000  200017b0  00011bec  0003060c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003060c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003063a  2**0
                  CONTENTS, READONLY
  9 .debug_info   0007c977  00000000  00000000  00030693  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000aab7  00000000  00000000  000ad00a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001d4fc  00000000  00000000  000b7ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003468  00000000  00000000  000d4fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000030e0  00000000  00000000  000d8425  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0005165f  00000000  00000000  000db505  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003f4d5  00000000  00000000  0012cb64  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013f3b4  00000000  00000000  0016c039  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000d780  00000000  00000000  002ab3f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 17 01 20 31 03 00 00 2d 03 00 00 2d 03 00 00     ... 1...-...-...
      10:	2d 03 00 00 2d 03 00 00 2d 03 00 00 00 00 00 00     -...-...-.......
	...
      2c:	2d 03 00 00 2d 03 00 00 00 00 00 00 2d 03 00 00     -...-.......-...
      3c:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...
      4c:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...
      5c:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...
      6c:	25 62 00 00 51 50 00 00 2d 03 00 00 2d 03 00 00     %b..QP..-...-...
      7c:	61 50 00 00 71 50 00 00 81 50 00 00 91 50 00 00     aP..qP...P...P..
      8c:	a1 50 00 00 b1 50 00 00 c1 50 00 00 2d 03 00 00     .P...P...P..-...
      9c:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...
      ac:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...
      bc:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...
      cc:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...
      dc:	2d 03 00 00 2d 03 00 00 2d 03 00 00 00 00 00 00     -...-...-.......
	...
      f4:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...
     104:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...
     114:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...
     124:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...
     134:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...
     144:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...
     154:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...
     164:	2d 03 00 00 61 77 00 00 7d 77 00 00 99 77 00 00     -...aw..}w...w..
     174:	b5 77 00 00 2d 03 00 00 a9 44 00 00 a9 b7 00 00     .w..-....D......
     184:	b9 b7 00 00 c9 b7 00 00 d9 b7 00 00 2d 03 00 00     ............-...
     194:	c5 81 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     ....-...-...-...
     1a4:	2d 03 00 00 2d 03 00 00 2d 03 00 00 e1 81 00 00     -...-...-.......
     1b4:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...
     1c4:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...
     1d4:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...
     1e4:	2d 03 00 00 2d 03 00 00 a5 8e 00 00 2d 03 00 00     -...-.......-...
     1f4:	c1 8e 00 00 2d 03 00 00 dd 8e 00 00 f9 8e 00 00     ....-...........
     204:	15 8f 00 00 31 8f 00 00 2d 03 00 00 2d 03 00 00     ....1...-...-...
     214:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...
     224:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...
     234:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...
     244:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...
     254:	2d 03 00 00 2d 03 00 00 2d 03 00 00 2d 03 00 00     -...-...-...-...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000060c 	.word	0x2000060c
     280:	00000000 	.word	0x00000000
     284:	0001043c 	.word	0x0001043c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0001043c 	.word	0x0001043c
     2c4:	20000610 	.word	0x20000610
     2c8:	0001043c 	.word	0x0001043c
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN19CondesatorFan_ClassC1Ev>:
#include "CondesatorFan_Class.h"

// default constructor
CondesatorFan_Class::CondesatorFan_Class()
{
} //CondesatorFan_Class
     2d0:	4770      	bx	lr

000002d2 <_ZN19CondesatorFan_ClassD1Ev>:

// default destructor
CondesatorFan_Class::~CondesatorFan_Class()
{
} //~CondesatorFan_Class
     2d2:	4770      	bx	lr

000002d4 <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
	return isOK;
	
	
}

uint8_t CondesatorFan_Class::InitExpanderArray(MCP23008_Class** expandersArray){
     2d4:	1f0b      	subs	r3, r1, #4
     2d6:	300c      	adds	r0, #12
     2d8:	3118      	adds	r1, #24
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
		{
			expanders[i]=expandersArray[i];
     2da:	f853 2f04 	ldr.w	r2, [r3, #4]!
     2de:	f840 2b04 	str.w	r2, [r0], #4
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
     2e2:	428b      	cmp	r3, r1
     2e4:	d1f9      	bne.n	2da <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
		}
		return 0;
}
     2e6:	2000      	movs	r0, #0
     2e8:	4770      	bx	lr
	...

000002ec <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class>:
bool CondesatorFan_Class::InitCondesator(I2C_Sync_Class* i2cClass,MCP23008_Class** expanderArray){
     2ec:	b510      	push	{r4, lr}
     2ee:	4604      	mov	r4, r0
	i2c=i2cClass;
     2f0:	6081      	str	r1, [r0, #8]
	if (i2c->isOK)
     2f2:	7a4b      	ldrb	r3, [r1, #9]
     2f4:	b90b      	cbnz	r3, 2fa <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
}
     2f6:	78a0      	ldrb	r0, [r4, #2]
     2f8:	bd10      	pop	{r4, pc}
		InitExpanderArray(expanderArray);
     2fa:	4611      	mov	r1, r2
     2fc:	4b03      	ldr	r3, [pc, #12]	; (30c <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x20>)
     2fe:	4798      	blx	r3
		expanders[EVAPORATOR_AND_CONDESATOR_EXPANDERS-1]->SetPortOutput();
     300:	6a60      	ldr	r0, [r4, #36]	; 0x24
     302:	4b03      	ldr	r3, [pc, #12]	; (310 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x24>)
     304:	4798      	blx	r3
		isOK=SelfTest();
     306:	2301      	movs	r3, #1
     308:	70a3      	strb	r3, [r4, #2]
     30a:	e7f4      	b.n	2f6 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xa>
     30c:	000002d5 	.word	0x000002d5
     310:	0000e121 	.word	0x0000e121

00000314 <_ZN19CondesatorFan_Class9SetEnableEb>:
}
uint8_t	CondesatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(2,true);
	return uint8_t(enabled);
}
uint8_t	CondesatorFan_Class::SetEnable(bool state){
     314:	b510      	push	{r4, lr}
     316:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(2,state);
     318:	460a      	mov	r2, r1
     31a:	2102      	movs	r1, #2
     31c:	68c0      	ldr	r0, [r0, #12]
     31e:	4b02      	ldr	r3, [pc, #8]	; (328 <_ZN19CondesatorFan_Class9SetEnableEb+0x14>)
     320:	4798      	blx	r3
     322:	7060      	strb	r0, [r4, #1]
	return uint8_t(enabled);
}
     324:	bd10      	pop	{r4, pc}
     326:	bf00      	nop
     328:	0000e219 	.word	0x0000e219

0000032c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     32c:	e7fe      	b.n	32c <Dummy_Handler>
	...

00000330 <Reset_Handler>:
{
     330:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     332:	4b17      	ldr	r3, [pc, #92]	; (390 <Reset_Handler+0x60>)
     334:	4a17      	ldr	r2, [pc, #92]	; (394 <Reset_Handler+0x64>)
     336:	429a      	cmp	r2, r3
     338:	d010      	beq.n	35c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     33a:	4b17      	ldr	r3, [pc, #92]	; (398 <Reset_Handler+0x68>)
     33c:	4a14      	ldr	r2, [pc, #80]	; (390 <Reset_Handler+0x60>)
     33e:	429a      	cmp	r2, r3
     340:	d20c      	bcs.n	35c <Reset_Handler+0x2c>
     342:	3b01      	subs	r3, #1
     344:	1a9b      	subs	r3, r3, r2
     346:	f023 0303 	bic.w	r3, r3, #3
     34a:	3304      	adds	r3, #4
     34c:	4413      	add	r3, r2
     34e:	4911      	ldr	r1, [pc, #68]	; (394 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     350:	f851 0b04 	ldr.w	r0, [r1], #4
     354:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     358:	429a      	cmp	r2, r3
     35a:	d1f9      	bne.n	350 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     35c:	4b0f      	ldr	r3, [pc, #60]	; (39c <Reset_Handler+0x6c>)
     35e:	4a10      	ldr	r2, [pc, #64]	; (3a0 <Reset_Handler+0x70>)
     360:	429a      	cmp	r2, r3
     362:	d20a      	bcs.n	37a <Reset_Handler+0x4a>
     364:	3b01      	subs	r3, #1
     366:	1a9b      	subs	r3, r3, r2
     368:	f023 0303 	bic.w	r3, r3, #3
     36c:	3304      	adds	r3, #4
     36e:	4413      	add	r3, r2
                *pDest++ = 0;
     370:	2100      	movs	r1, #0
     372:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     376:	4293      	cmp	r3, r2
     378:	d1fb      	bne.n	372 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     37a:	4a0a      	ldr	r2, [pc, #40]	; (3a4 <Reset_Handler+0x74>)
     37c:	4b0a      	ldr	r3, [pc, #40]	; (3a8 <Reset_Handler+0x78>)
     37e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     382:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     384:	4b09      	ldr	r3, [pc, #36]	; (3ac <Reset_Handler+0x7c>)
     386:	4798      	blx	r3
        main();
     388:	4b09      	ldr	r3, [pc, #36]	; (3b0 <Reset_Handler+0x80>)
     38a:	4798      	blx	r3
     38c:	e7fe      	b.n	38c <Reset_Handler+0x5c>
     38e:	bf00      	nop
     390:	20000000 	.word	0x20000000
     394:	0001043c 	.word	0x0001043c
     398:	2000060c 	.word	0x2000060c
     39c:	200017b0 	.word	0x200017b0
     3a0:	2000060c 	.word	0x2000060c
     3a4:	e000ed00 	.word	0xe000ed00
     3a8:	00000000 	.word	0x00000000
     3ac:	0000fbf5 	.word	0x0000fbf5
     3b0:	00000699 	.word	0x00000699

000003b4 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev>:
	somethingChanged=false;
	
} //EvaporatorAndCondesatorFans_Class

// default destructor
EvaporatorAndCondesatorFans_Class::~EvaporatorAndCondesatorFans_Class()
     3b4:	b510      	push	{r4, lr}
     3b6:	4604      	mov	r4, r0
     3b8:	302c      	adds	r0, #44	; 0x2c
     3ba:	4b03      	ldr	r3, [pc, #12]	; (3c8 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x14>)
     3bc:	4798      	blx	r3
     3be:	4620      	mov	r0, r4
     3c0:	4b02      	ldr	r3, [pc, #8]	; (3cc <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x18>)
     3c2:	4798      	blx	r3
{
} //~EvaporatorAndCondesatorFans_Class
     3c4:	4620      	mov	r0, r4
     3c6:	bd10      	pop	{r4, pc}
     3c8:	000002d3 	.word	0x000002d3
     3cc:	000005d1 	.word	0x000005d1

000003d0 <__tcf_1>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
     3d0:	b570      	push	{r4, r5, r6, lr}
     3d2:	4c05      	ldr	r4, [pc, #20]	; (3e8 <__tcf_1+0x18>)
     3d4:	4e05      	ldr	r6, [pc, #20]	; (3ec <__tcf_1+0x1c>)
     3d6:	f1a4 05c4 	sub.w	r5, r4, #196	; 0xc4
     3da:	3c1c      	subs	r4, #28
     3dc:	4620      	mov	r0, r4
     3de:	47b0      	blx	r6
     3e0:	42ac      	cmp	r4, r5
     3e2:	d1fa      	bne.n	3da <__tcf_1+0xa>
     3e4:	bd70      	pop	{r4, r5, r6, pc}
     3e6:	bf00      	nop
     3e8:	200006ec 	.word	0x200006ec
     3ec:	0000deb1 	.word	0x0000deb1

000003f0 <__tcf_0>:
static EvaporatorFan_Class	evaporatorFan[2];
     3f0:	b510      	push	{r4, lr}
     3f2:	4803      	ldr	r0, [pc, #12]	; (400 <__tcf_0+0x10>)
     3f4:	4c03      	ldr	r4, [pc, #12]	; (404 <__tcf_0+0x14>)
     3f6:	47a0      	blx	r4
     3f8:	4803      	ldr	r0, [pc, #12]	; (408 <__tcf_0+0x18>)
     3fa:	47a0      	blx	r4
     3fc:	bd10      	pop	{r4, pc}
     3fe:	bf00      	nop
     400:	20000718 	.word	0x20000718
     404:	000005d1 	.word	0x000005d1
     408:	200006ec 	.word	0x200006ec

0000040c <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev>:
EvaporatorAndCondesatorFans_Class::EvaporatorAndCondesatorFans_Class()
     40c:	b510      	push	{r4, lr}
     40e:	4604      	mov	r4, r0
     410:	4b0d      	ldr	r3, [pc, #52]	; (448 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x3c>)
     412:	4798      	blx	r3
     414:	f104 002c 	add.w	r0, r4, #44	; 0x2c
     418:	4b0c      	ldr	r3, [pc, #48]	; (44c <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x40>)
     41a:	4798      	blx	r3
	i2c=&i2cSharedStatic;
     41c:	4b0c      	ldr	r3, [pc, #48]	; (450 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x44>)
     41e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
     422:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	evaporator[0]=&evaporatorFan[0];
     426:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
     42a:	65e2      	str	r2, [r4, #92]	; 0x5c
	evaporator[1]=&evaporatorFan[1];
     42c:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
     430:	6622      	str	r2, [r4, #96]	; 0x60
	condesator=&condesatorFan;
     432:	f503 7298 	add.w	r2, r3, #304	; 0x130
     436:	6662      	str	r2, [r4, #100]	; 0x64
	ptrFansClass=this;
     438:	f8c3 415c 	str.w	r4, [r3, #348]	; 0x15c
	somethingChanged=false;
     43c:	2300      	movs	r3, #0
     43e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
} //EvaporatorAndCondesatorFans_Class
     442:	4620      	mov	r0, r4
     444:	bd10      	pop	{r4, pc}
     446:	bf00      	nop
     448:	000005b9 	.word	0x000005b9
     44c:	000002d1 	.word	0x000002d1
     450:	20000628 	.word	0x20000628

00000454 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv>:
	{
	}
	return isOK;
	
}
uint8_t EvaporatorAndCondesatorFans_Class::InitExpanderArray(void){
     454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     458:	4606      	mov	r6, r0
     45a:	4c0c      	ldr	r4, [pc, #48]	; (48c <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x38>)
     45c:	f100 0768 	add.w	r7, r0, #104	; 0x68
	
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
     460:	2500      	movs	r5, #0
	{
		expanders[i]=&expandersStatic[i];
		currentExpander=expanders[i];
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
     462:	f8df 802c 	ldr.w	r8, [pc, #44]	; 490 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x3c>
		expanders[i]=&expandersStatic[i];
     466:	f847 4b04 	str.w	r4, [r7], #4
		currentExpander=expanders[i];
     46a:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
     46e:	f045 0120 	orr.w	r1, r5, #32
     472:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
     476:	b2c9      	uxtb	r1, r1
     478:	4620      	mov	r0, r4
     47a:	47c0      	blx	r8
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
     47c:	3501      	adds	r5, #1
     47e:	341c      	adds	r4, #28
     480:	2d07      	cmp	r5, #7
     482:	d1f0      	bne.n	466 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x12>
	}
	return 0;
}
     484:	2000      	movs	r0, #0
     486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     48a:	bf00      	nop
     48c:	20000628 	.word	0x20000628
     490:	0000dec5 	.word	0x0000dec5

00000494 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv>:
bool	EvaporatorAndCondesatorFans_Class::Init(void){
     494:	b570      	push	{r4, r5, r6, lr}
     496:	4604      	mov	r4, r0
	i2c->Init();
     498:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
     49c:	4b14      	ldr	r3, [pc, #80]	; (4f0 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x5c>)
     49e:	4798      	blx	r3
	if (i2c->isOK)
     4a0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     4a4:	7a5b      	ldrb	r3, [r3, #9]
     4a6:	b913      	cbnz	r3, 4ae <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x1a>
	return isOK;
     4a8:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
}
     4ac:	bd70      	pop	{r4, r5, r6, pc}
		InitExpanderArray();
     4ae:	4620      	mov	r0, r4
     4b0:	4b10      	ldr	r3, [pc, #64]	; (4f4 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x60>)
     4b2:	4798      	blx	r3
		evaporator[0]->InitEvaporator(0,i2c,expanders);
     4b4:	f104 0568 	add.w	r5, r4, #104	; 0x68
     4b8:	462b      	mov	r3, r5
     4ba:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
     4be:	2100      	movs	r1, #0
     4c0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
     4c2:	4e0d      	ldr	r6, [pc, #52]	; (4f8 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x64>)
     4c4:	47b0      	blx	r6
		evaporator[1]->InitEvaporator(1,i2c,expanders);
     4c6:	462b      	mov	r3, r5
     4c8:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
     4cc:	2101      	movs	r1, #1
     4ce:	6e20      	ldr	r0, [r4, #96]	; 0x60
     4d0:	47b0      	blx	r6
		condesator->InitCondesator(i2c,expanders);
     4d2:	462a      	mov	r2, r5
     4d4:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
     4d8:	6e60      	ldr	r0, [r4, #100]	; 0x64
     4da:	4b08      	ldr	r3, [pc, #32]	; (4fc <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x68>)
     4dc:	4798      	blx	r3
		isOK=(evaporator[0]->isOK)&(evaporator[1]->isOK);
     4de:	6de3      	ldr	r3, [r4, #92]	; 0x5c
     4e0:	6e22      	ldr	r2, [r4, #96]	; 0x60
     4e2:	791b      	ldrb	r3, [r3, #4]
     4e4:	7912      	ldrb	r2, [r2, #4]
     4e6:	4013      	ands	r3, r2
     4e8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     4ec:	e7dc      	b.n	4a8 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x14>
     4ee:	bf00      	nop
     4f0:	0000ddb1 	.word	0x0000ddb1
     4f4:	00000455 	.word	0x00000455
     4f8:	000005f9 	.word	0x000005f9
     4fc:	000002ed 	.word	0x000002ed

00000500 <_GLOBAL__sub_I_ptrFansClass>:

EvaporatorAndCondesatorFans_Class  fans;
     500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
static I2C_Sync_Class	i2cSharedStatic(&I2C_EXPANDER);
     504:	4c1c      	ldr	r4, [pc, #112]	; (578 <_GLOBAL__sub_I_ptrFansClass+0x78>)
     506:	f504 758e 	add.w	r5, r4, #284	; 0x11c
     50a:	491c      	ldr	r1, [pc, #112]	; (57c <_GLOBAL__sub_I_ptrFansClass+0x7c>)
     50c:	4628      	mov	r0, r5
     50e:	4b1c      	ldr	r3, [pc, #112]	; (580 <_GLOBAL__sub_I_ptrFansClass+0x80>)
     510:	4798      	blx	r3
     512:	4f1c      	ldr	r7, [pc, #112]	; (584 <_GLOBAL__sub_I_ptrFansClass+0x84>)
     514:	463a      	mov	r2, r7
     516:	491c      	ldr	r1, [pc, #112]	; (588 <_GLOBAL__sub_I_ptrFansClass+0x88>)
     518:	4628      	mov	r0, r5
     51a:	4e1c      	ldr	r6, [pc, #112]	; (58c <_GLOBAL__sub_I_ptrFansClass+0x8c>)
     51c:	47b0      	blx	r6
static EvaporatorFan_Class	evaporatorFan[2];
     51e:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
     522:	4628      	mov	r0, r5
     524:	f8df 8088 	ldr.w	r8, [pc, #136]	; 5b0 <_GLOBAL__sub_I_ptrFansClass+0xb0>
     528:	47c0      	blx	r8
     52a:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
     52e:	47c0      	blx	r8
     530:	463a      	mov	r2, r7
     532:	4917      	ldr	r1, [pc, #92]	; (590 <_GLOBAL__sub_I_ptrFansClass+0x90>)
     534:	2000      	movs	r0, #0
     536:	47b0      	blx	r6
static CondesatorFan_Class	condesatorFan;
     538:	f504 7898 	add.w	r8, r4, #304	; 0x130
     53c:	4640      	mov	r0, r8
     53e:	4b15      	ldr	r3, [pc, #84]	; (594 <_GLOBAL__sub_I_ptrFansClass+0x94>)
     540:	4798      	blx	r3
     542:	463a      	mov	r2, r7
     544:	4914      	ldr	r1, [pc, #80]	; (598 <_GLOBAL__sub_I_ptrFansClass+0x98>)
     546:	4640      	mov	r0, r8
     548:	47b0      	blx	r6
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
     54a:	4e14      	ldr	r6, [pc, #80]	; (59c <_GLOBAL__sub_I_ptrFansClass+0x9c>)
     54c:	4620      	mov	r0, r4
     54e:	47b0      	blx	r6
     550:	341c      	adds	r4, #28
     552:	42a5      	cmp	r5, r4
     554:	d1fa      	bne.n	54c <_GLOBAL__sub_I_ptrFansClass+0x4c>
     556:	4e0b      	ldr	r6, [pc, #44]	; (584 <_GLOBAL__sub_I_ptrFansClass+0x84>)
     558:	4632      	mov	r2, r6
     55a:	4911      	ldr	r1, [pc, #68]	; (5a0 <_GLOBAL__sub_I_ptrFansClass+0xa0>)
     55c:	2000      	movs	r0, #0
     55e:	4c0b      	ldr	r4, [pc, #44]	; (58c <_GLOBAL__sub_I_ptrFansClass+0x8c>)
     560:	47a0      	blx	r4
EvaporatorAndCondesatorFans_Class  fans;
     562:	4d10      	ldr	r5, [pc, #64]	; (5a4 <_GLOBAL__sub_I_ptrFansClass+0xa4>)
     564:	4628      	mov	r0, r5
     566:	4b10      	ldr	r3, [pc, #64]	; (5a8 <_GLOBAL__sub_I_ptrFansClass+0xa8>)
     568:	4798      	blx	r3
     56a:	4632      	mov	r2, r6
     56c:	490f      	ldr	r1, [pc, #60]	; (5ac <_GLOBAL__sub_I_ptrFansClass+0xac>)
     56e:	4628      	mov	r0, r5
     570:	47a0      	blx	r4
     572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     576:	bf00      	nop
     578:	20000628 	.word	0x20000628
     57c:	20001630 	.word	0x20001630
     580:	0000dd81 	.word	0x0000dd81
     584:	20000000 	.word	0x20000000
     588:	0000dd9d 	.word	0x0000dd9d
     58c:	0000fbc1 	.word	0x0000fbc1
     590:	000003f1 	.word	0x000003f1
     594:	000002d1 	.word	0x000002d1
     598:	000002d3 	.word	0x000002d3
     59c:	0000de9d 	.word	0x0000de9d
     5a0:	000003d1 	.word	0x000003d1
     5a4:	20000788 	.word	0x20000788
     5a8:	0000040d 	.word	0x0000040d
     5ac:	000003b5 	.word	0x000003b5
     5b0:	000005b9 	.word	0x000005b9

000005b4 <_ZN29EvaporatorFanDataStruct_ClassC1Ev>:
#include "EvaporatorFanDataStruct_Class.h"

// default constructor
EvaporatorFanDataStruct_Class::EvaporatorFanDataStruct_Class()
{
} //EvaporatorFanDataStruct_Class
     5b4:	4770      	bx	lr

000005b6 <_ZN29EvaporatorFanDataStruct_ClassD1Ev>:

// default destructor
EvaporatorFanDataStruct_Class::~EvaporatorFanDataStruct_Class()
{
} //~EvaporatorFanDataStruct_Class
     5b6:	4770      	bx	lr

000005b8 <_ZN19EvaporatorFan_ClassC1Ev>:




// default constructor
EvaporatorFan_Class::EvaporatorFan_Class()
     5b8:	b510      	push	{r4, lr}
     5ba:	4604      	mov	r4, r0
     5bc:	4b02      	ldr	r3, [pc, #8]	; (5c8 <_ZN19EvaporatorFan_ClassC1Ev+0x10>)
     5be:	4798      	blx	r3
{
	
	ptrEvaFanClass=this;
     5c0:	4b02      	ldr	r3, [pc, #8]	; (5cc <_ZN19EvaporatorFan_ClassC1Ev+0x14>)
     5c2:	601c      	str	r4, [r3, #0]
	
} //EvaporatorFan_Class
     5c4:	4620      	mov	r0, r4
     5c6:	bd10      	pop	{r4, pc}
     5c8:	000005b5 	.word	0x000005b5
     5cc:	20000814 	.word	0x20000814

000005d0 <_ZN19EvaporatorFan_ClassD1Ev>:

// default destructor
EvaporatorFan_Class::~EvaporatorFan_Class()
     5d0:	b510      	push	{r4, lr}
     5d2:	4604      	mov	r4, r0
     5d4:	4b01      	ldr	r3, [pc, #4]	; (5dc <_ZN19EvaporatorFan_ClassD1Ev+0xc>)
     5d6:	4798      	blx	r3
{
} //~EvaporatorFan_Class
     5d8:	4620      	mov	r0, r4
     5da:	bd10      	pop	{r4, pc}
     5dc:	000005b7 	.word	0x000005b7

000005e0 <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
		}
		return isOK;
	
	
}
uint8_t EvaporatorFan_Class::InitExpanderArray(MCP23008_Class** expanArray){
     5e0:	1f0b      	subs	r3, r1, #4
     5e2:	300c      	adds	r0, #12
     5e4:	3114      	adds	r1, #20
	
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
			{
				expanders[i]=expanArray[i];
     5e6:	f853 2f04 	ldr.w	r2, [r3, #4]!
     5ea:	f840 2b04 	str.w	r2, [r0], #4
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
     5ee:	428b      	cmp	r3, r1
     5f0:	d1f9      	bne.n	5e6 <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
			}
			return 0;
}
     5f2:	2000      	movs	r0, #0
     5f4:	4770      	bx	lr
	...

000005f8 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class>:
bool EvaporatorFan_Class::InitEvaporator(uint8_t number, I2C_Sync_Class* i2cClass,MCP23008_Class** expandersArray){
     5f8:	b510      	push	{r4, lr}
     5fa:	4604      	mov	r4, r0
	i2c=i2cClass;
     5fc:	6082      	str	r2, [r0, #8]
	fanNumber=number;
     5fe:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
		if (i2c->isOK)
     602:	7a52      	ldrb	r2, [r2, #9]
     604:	b90a      	cbnz	r2, 60a <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x12>
}
     606:	7920      	ldrb	r0, [r4, #4]
     608:	bd10      	pop	{r4, pc}
			InitExpanderArray(expandersArray);
     60a:	4619      	mov	r1, r3
     60c:	4b0b      	ldr	r3, [pc, #44]	; (63c <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x44>)
     60e:	4798      	blx	r3
			if (fanNumber==0)
     610:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     614:	b14b      	cbz	r3, 62a <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x32>
			expanders[4+fanNumber]->SetPortOutput();
     616:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     61a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     61e:	69d8      	ldr	r0, [r3, #28]
     620:	4b07      	ldr	r3, [pc, #28]	; (640 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x48>)
     622:	4798      	blx	r3
			isOK=SelfTest();
     624:	2301      	movs	r3, #1
     626:	7123      	strb	r3, [r4, #4]
     628:	e7ed      	b.n	606 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
				expanders[0]->SetPortInput(0x70);
     62a:	2170      	movs	r1, #112	; 0x70
     62c:	68e0      	ldr	r0, [r4, #12]
     62e:	4b05      	ldr	r3, [pc, #20]	; (644 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x4c>)
     630:	4798      	blx	r3
				expanders[1]->SetPortInput();
     632:	6920      	ldr	r0, [r4, #16]
     634:	4b04      	ldr	r3, [pc, #16]	; (648 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x50>)
     636:	4798      	blx	r3
     638:	e7ed      	b.n	616 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x1e>
     63a:	bf00      	nop
     63c:	000005e1 	.word	0x000005e1
     640:	0000e121 	.word	0x0000e121
     644:	0000e0ad 	.word	0x0000e0ad
     648:	0000e069 	.word	0x0000e069

0000064c <_ZN19EvaporatorFan_Class9SetEnableEb>:
}
uint8_t	EvaporatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,true);
	return uint8_t(enabled);
}
uint8_t	EvaporatorFan_Class::SetEnable(bool state){
     64c:	b510      	push	{r4, lr}
     64e:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(1-fanNumber,!state);
     650:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
     654:	f1c3 0301 	rsb	r3, r3, #1
     658:	f081 0201 	eor.w	r2, r1, #1
     65c:	b2d9      	uxtb	r1, r3
     65e:	68c0      	ldr	r0, [r0, #12]
     660:	4b01      	ldr	r3, [pc, #4]	; (668 <_ZN19EvaporatorFan_Class9SetEnableEb+0x1c>)
     662:	4798      	blx	r3
     664:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
     666:	bd10      	pop	{r4, pc}
     668:	0000e219 	.word	0x0000e219

0000066c <_ZN19EvaporatorFan_Class6SetPWMEh>:
uint8_t	EvaporatorFan_Class::Disable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,false)?false:true;
	return uint8_t(enabled);
}

uint8_t	EvaporatorFan_Class::SetPWM(uint8_t pwm){
     66c:	b510      	push	{r4, lr}
     66e:	4604      	mov	r4, r0
	pwmValue= expanders[4+fanNumber]->WriteGPIORegister(0xff-pwm);
     670:	43c9      	mvns	r1, r1
     672:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
     676:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     67a:	b2c9      	uxtb	r1, r1
     67c:	69d8      	ldr	r0, [r3, #28]
     67e:	4b02      	ldr	r3, [pc, #8]	; (688 <_ZN19EvaporatorFan_Class6SetPWMEh+0x1c>)
     680:	4798      	blx	r3
     682:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	return pwmValue;
}
     686:	bd10      	pop	{r4, pc}
     688:	0000e02d 	.word	0x0000e02d

0000068c <_ZL13FirmwareAlivePK10timer_task>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     68c:	2280      	movs	r2, #128	; 0x80
     68e:	4b01      	ldr	r3, [pc, #4]	; (694 <_ZL13FirmwareAlivePK10timer_task+0x8>)
     690:	619a      	str	r2, [r3, #24]
     692:	4770      	bx	lr
     694:	41008000 	.word	0x41008000

00000698 <main>:
	gpio_set_pin_level(iAlcFwIsAlive,true);
}


int main(void)
{
     698:	b508      	push	{r3, lr}
	atmel_start_init();
     69a:	4b10      	ldr	r3, [pc, #64]	; (6dc <main+0x44>)
     69c:	4798      	blx	r3
	uint8_t status;

	usb.Init();
     69e:	4810      	ldr	r0, [pc, #64]	; (6e0 <main+0x48>)
     6a0:	4b10      	ldr	r3, [pc, #64]	; (6e4 <main+0x4c>)
     6a2:	4798      	blx	r3
	delay_ms(100);
     6a4:	2064      	movs	r0, #100	; 0x64
     6a6:	4b10      	ldr	r3, [pc, #64]	; (6e8 <main+0x50>)
     6a8:	4798      	blx	r3
//	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
//	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
	pwm_enable(&LIVE_PULSE);
     6aa:	4810      	ldr	r0, [pc, #64]	; (6ec <main+0x54>)
     6ac:	4b10      	ldr	r3, [pc, #64]	; (6f0 <main+0x58>)
     6ae:	4798      	blx	r3
	fans.Init();
     6b0:	4810      	ldr	r0, [pc, #64]	; (6f4 <main+0x5c>)
     6b2:	4b11      	ldr	r3, [pc, #68]	; (6f8 <main+0x60>)
     6b4:	4798      	blx	r3
	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareAlive),250);
     6b6:	22fa      	movs	r2, #250	; 0xfa
     6b8:	4910      	ldr	r1, [pc, #64]	; (6fc <main+0x64>)
     6ba:	4811      	ldr	r0, [pc, #68]	; (700 <main+0x68>)
     6bc:	4b11      	ldr	r3, [pc, #68]	; (704 <main+0x6c>)
     6be:	4798      	blx	r3
	toolApp.Init();
     6c0:	4811      	ldr	r0, [pc, #68]	; (708 <main+0x70>)
     6c2:	4b12      	ldr	r3, [pc, #72]	; (70c <main+0x74>)
     6c4:	4798      	blx	r3
	while (1)
	{
		
		if (toolApp.IsAppConnected())
     6c6:	4c10      	ldr	r4, [pc, #64]	; (708 <main+0x70>)
     6c8:	4d11      	ldr	r5, [pc, #68]	; (710 <main+0x78>)
		{
			if (toolApp.handleCommunication())
     6ca:	4e12      	ldr	r6, [pc, #72]	; (714 <main+0x7c>)
		if (toolApp.IsAppConnected())
     6cc:	4620      	mov	r0, r4
     6ce:	47a8      	blx	r5
     6d0:	2800      	cmp	r0, #0
     6d2:	d0fb      	beq.n	6cc <main+0x34>
			if (toolApp.handleCommunication())
     6d4:	4620      	mov	r0, r4
     6d6:	47b0      	blx	r6
     6d8:	e7f8      	b.n	6cc <main+0x34>
     6da:	bf00      	nop
     6dc:	00000dc9 	.word	0x00000dc9
     6e0:	20001350 	.word	0x20001350
     6e4:	0000ee19 	.word	0x0000ee19
     6e8:	00002501 	.word	0x00002501
     6ec:	200015ac 	.word	0x200015ac
     6f0:	00002b21 	.word	0x00002b21
     6f4:	20000788 	.word	0x20000788
     6f8:	00000495 	.word	0x00000495
     6fc:	0000068d 	.word	0x0000068d
     700:	200012f8 	.word	0x200012f8
     704:	0000ea9d 	.word	0x0000ea9d
     708:	20000818 	.word	0x20000818
     70c:	00000a55 	.word	0x00000a55
     710:	00000809 	.word	0x00000809
     714:	00000cf1 	.word	0x00000cf1

00000718 <_GLOBAL__sub_I_main>:
// 		}

		

	}
}
     718:	b510      	push	{r4, lr}
static Maintenance_Tool	toolApp;
     71a:	4c05      	ldr	r4, [pc, #20]	; (730 <_GLOBAL__sub_I_main+0x18>)
     71c:	4620      	mov	r0, r4
     71e:	4b05      	ldr	r3, [pc, #20]	; (734 <_GLOBAL__sub_I_main+0x1c>)
     720:	4798      	blx	r3
     722:	4a05      	ldr	r2, [pc, #20]	; (738 <_GLOBAL__sub_I_main+0x20>)
     724:	4905      	ldr	r1, [pc, #20]	; (73c <_GLOBAL__sub_I_main+0x24>)
     726:	4620      	mov	r0, r4
     728:	4b05      	ldr	r3, [pc, #20]	; (740 <_GLOBAL__sub_I_main+0x28>)
     72a:	4798      	blx	r3
     72c:	bd10      	pop	{r4, pc}
     72e:	bf00      	nop
     730:	20000818 	.word	0x20000818
     734:	0000078d 	.word	0x0000078d
     738:	20000000 	.word	0x20000000
     73c:	00000765 	.word	0x00000765
     740:	0000fbc1 	.word	0x0000fbc1

00000744 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
     744:	4b02      	ldr	r3, [pc, #8]	; (750 <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
     746:	681a      	ldr	r2, [r3, #0]
     748:	6813      	ldr	r3, [r2, #0]
     74a:	3301      	adds	r3, #1
     74c:	6013      	str	r3, [r2, #0]
     74e:	4770      	bx	lr
     750:	20000940 	.word	0x20000940

00000754 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
     754:	4b02      	ldr	r3, [pc, #8]	; (760 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
     756:	681b      	ldr	r3, [r3, #0]
     758:	2200      	movs	r2, #0
     75a:	711a      	strb	r2, [r3, #4]
     75c:	4770      	bx	lr
     75e:	bf00      	nop
     760:	20000940 	.word	0x20000940

00000764 <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
     764:	b538      	push	{r3, r4, r5, lr}
     766:	4604      	mov	r4, r0
{
	ticks=0;
     768:	2300      	movs	r3, #0
     76a:	6003      	str	r3, [r0, #0]
	interfaceTimer.Stop();
     76c:	4d04      	ldr	r5, [pc, #16]	; (780 <_ZN16Maintenance_ToolD1Ev+0x1c>)
     76e:	4628      	mov	r0, r5
     770:	4b04      	ldr	r3, [pc, #16]	; (784 <_ZN16Maintenance_ToolD1Ev+0x20>)
     772:	4798      	blx	r3
	interfaceTimer.Remove_task();
     774:	4628      	mov	r0, r5
     776:	4b04      	ldr	r3, [pc, #16]	; (788 <_ZN16Maintenance_ToolD1Ev+0x24>)
     778:	4798      	blx	r3
	
} //~Maintenance_Tool
     77a:	4620      	mov	r0, r4
     77c:	bd38      	pop	{r3, r4, r5, pc}
     77e:	bf00      	nop
     780:	20001428 	.word	0x20001428
     784:	0000f5a9 	.word	0x0000f5a9
     788:	0000f6c1 	.word	0x0000f6c1

0000078c <_ZN16Maintenance_ToolC1Ev>:
Maintenance_Tool::Maintenance_Tool()
     78c:	b470      	push	{r4, r5, r6}
    kGAINCommandSetNSDData,             //!< Editing NSD data
    kGAINCommandSetNSDDataBlock,        //!< Editing NSD data in data blocks (see NSD communication: Data blockes are tranmitted to GNC)
    kGAINCommandSetView,                 //!< Enables simplified view or standard view (only 932/933)
	kGAINNumberOfCommands
	};
 struct __attribute__((__packed__)) HVACMessageHeader
     78e:	2200      	movs	r2, #0
     790:	2664      	movs	r6, #100	; 0x64
     792:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
     796:	2563      	movs	r5, #99	; 0x63
     798:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
     79c:	2462      	movs	r4, #98	; 0x62
     79e:	f880 4047 	strb.w	r4, [r0, #71]	; 0x47
     7a2:	2161      	movs	r1, #97	; 0x61
     7a4:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
     7a8:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
     7ac:	f880 609c 	strb.w	r6, [r0, #156]	; 0x9c
     7b0:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
     7b4:	f880 409e 	strb.w	r4, [r0, #158]	; 0x9e
     7b8:	f880 109f 	strb.w	r1, [r0, #159]	; 0x9f
     7bc:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
	ptrMaintenanceTool=this;
     7c0:	4904      	ldr	r1, [pc, #16]	; (7d4 <_ZN16Maintenance_ToolC1Ev+0x48>)
     7c2:	6008      	str	r0, [r1, #0]
	maintenanceIsConnected = false;
     7c4:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
	nextMaintenanceSyncTime = 0;
     7c8:	64c2      	str	r2, [r0, #76]	; 0x4c
	nextMaintenanceUsageTimerSyncTime = 0;
     7ca:	6502      	str	r2, [r0, #80]	; 0x50
	ticks=0;
     7cc:	6002      	str	r2, [r0, #0]
} //Maintenance_Tool
     7ce:	bc70      	pop	{r4, r5, r6}
     7d0:	4770      	bx	lr
     7d2:	bf00      	nop
     7d4:	20000940 	.word	0x20000940

000007d8 <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
     7d8:	b508      	push	{r3, lr}
		maintenanceIsConnected = isConnected;
     7da:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
		if (isConnected)
     7de:	b919      	cbnz	r1, 7e8 <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
     7e0:	4805      	ldr	r0, [pc, #20]	; (7f8 <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     7e2:	4b06      	ldr	r3, [pc, #24]	; (7fc <_ZN16Maintenance_Tool12setConnectedEb+0x24>)
     7e4:	4798      	blx	r3
     7e6:	bd08      	pop	{r3, pc}
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
     7e8:	f64e 2260 	movw	r2, #60000	; 0xea60
     7ec:	4904      	ldr	r1, [pc, #16]	; (800 <_ZN16Maintenance_Tool12setConnectedEb+0x28>)
     7ee:	4802      	ldr	r0, [pc, #8]	; (7f8 <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     7f0:	4b04      	ldr	r3, [pc, #16]	; (804 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
     7f2:	4798      	blx	r3
     7f4:	bd08      	pop	{r3, pc}
     7f6:	bf00      	nop
     7f8:	20001428 	.word	0x20001428
     7fc:	0000f5a9 	.word	0x0000f5a9
     800:	00000755 	.word	0x00000755
     804:	0000f689 	.word	0x0000f689

00000808 <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
     808:	b510      	push	{r4, lr}
     80a:	4604      	mov	r4, r0
	result=false;
     80c:	2300      	movs	r3, #0
     80e:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	magic=0;
     812:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
	if (gotAccess==true)
     816:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
     81a:	b12b      	cbz	r3, 828 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
     81c:	2301      	movs	r3, #1
     81e:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	return	result;
     822:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
}
     826:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
     828:	4b13      	ldr	r3, [pc, #76]	; (878 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x70>)
     82a:	7d5b      	ldrb	r3, [r3, #21]
     82c:	b18b      	cbz	r3, 852 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x4a>
     82e:	1d43      	adds	r3, r0, #5
     830:	3009      	adds	r0, #9
     832:	2200      	movs	r2, #0
				magic|= localBuffer[i];
     834:	f813 1b01 	ldrb.w	r1, [r3], #1
     838:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
			for (int i = 0; i < 4; i++)
     83c:	4283      	cmp	r3, r0
     83e:	d1f9      	bne.n	834 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2c>
     840:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
     844:	4b0d      	ldr	r3, [pc, #52]	; (87c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x74>)
     846:	ea82 0103 	eor.w	r1, r2, r3
     84a:	f8c4 111c 	str.w	r1, [r4, #284]	; 0x11c
			if (xorResult==0)
     84e:	429a      	cmp	r2, r3
     850:	d005      	beq.n	85e <_ZN16Maintenance_Tool14IsAppConnectedEv+0x56>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     852:	2240      	movs	r2, #64	; 0x40
     854:	1d61      	adds	r1, r4, #5
     856:	4808      	ldr	r0, [pc, #32]	; (878 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x70>)
     858:	4b09      	ldr	r3, [pc, #36]	; (880 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
     85a:	4798      	blx	r3
     85c:	e7e1      	b.n	822 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
     85e:	2101      	movs	r1, #1
     860:	f884 1101 	strb.w	r1, [r4, #257]	; 0x101
				result=true;
     864:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
				is_MTPC_Beaming=true;
     868:	7121      	strb	r1, [r4, #4]
				setConnected(true);
     86a:	4620      	mov	r0, r4
     86c:	4b05      	ldr	r3, [pc, #20]	; (884 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     86e:	4798      	blx	r3
				return	result;
     870:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
     874:	bd10      	pop	{r4, pc}
     876:	bf00      	nop
     878:	20001350 	.word	0x20001350
     87c:	61626364 	.word	0x61626364
     880:	0000ef65 	.word	0x0000ef65
     884:	000007d9 	.word	0x000007d9

00000888 <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
     888:	b410      	push	{r4}
     88a:	1d02      	adds	r2, r0, #4
     88c:	2301      	movs	r3, #1
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
     88e:	2400      	movs	r4, #0
     890:	f802 4f01 	strb.w	r4, [r2, #1]!
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
     894:	b2d9      	uxtb	r1, r3
     896:	3301      	adds	r3, #1
     898:	2b41      	cmp	r3, #65	; 0x41
     89a:	d1f9      	bne.n	890 <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x8>
     89c:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
	}
	return	i;
}
     8a0:	4608      	mov	r0, r1
     8a2:	bc10      	pop	{r4}
     8a4:	4770      	bx	lr

000008a6 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( HVACMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
     8a6:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
     8aa:	b92b      	cbnz	r3, 8b8 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader+0x12>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
     8ac:	64c3      	str	r3, [r0, #76]	; 0x4c
		maintenanceIsConnected = true;
     8ae:	2301      	movs	r3, #1
     8b0:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
		bSendNotifications = true;
     8b4:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
     8b8:	f890 0100 	ldrb.w	r0, [r0, #256]	; 0x100
     8bc:	4770      	bx	lr
	...

000008c0 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader>:

	uint32_t	w,r;
	
	
	bool	result(header.command == kGAINCommandWriteParameters);
	if (result){
     8c0:	790b      	ldrb	r3, [r1, #4]
     8c2:	2b47      	cmp	r3, #71	; 0x47
     8c4:	d001      	beq.n	8ca <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0xa>
	bool	result(header.command == kGAINCommandWriteParameters);
     8c6:	2000      	movs	r0, #0
     8c8:	4770      	bx	lr
bool Maintenance_Tool::handleGAINCommandWriteParameters(HVACMessageHeader& header)	{
     8ca:	b570      	push	{r4, r5, r6, lr}
     8cc:	4604      	mov	r4, r0
		int n=sizeof(HVACMessageHeader)+1;
		flash.eraseFlash((uint32_t)&flashLayout->parameters,sizeof(UserParameters));
     8ce:	4e0c      	ldr	r6, [pc, #48]	; (900 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x40>)
     8d0:	6831      	ldr	r1, [r6, #0]
     8d2:	4d0c      	ldr	r5, [pc, #48]	; (904 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x44>)
     8d4:	2201      	movs	r2, #1
     8d6:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
     8da:	4628      	mov	r0, r5
     8dc:	4b0a      	ldr	r3, [pc, #40]	; (908 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x48>)
     8de:	4798      	blx	r3
			
		memcpy((uint8_t*)&parameters,&localBuffer[n+1],sizeof(UserParameters));
     8e0:	7b63      	ldrb	r3, [r4, #13]
     8e2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
		//uint32_t add=(uint32_t)&framMemory->parameters;
		uint32_t add=(uint32_t)&flashLayout->parameters;
     8e6:	6832      	ldr	r2, [r6, #0]
		r=flash.WriteAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(UserParameters));
     8e8:	2301      	movs	r3, #1
     8ea:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
     8ee:	f504 7184 	add.w	r1, r4, #264	; 0x108
     8f2:	4628      	mov	r0, r5
     8f4:	4c05      	ldr	r4, [pc, #20]	; (90c <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x4c>)
     8f6:	47a0      	blx	r4
		//	r=fram.WriteAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(UserParameters));
			result=(bool)(r==0);
     8f8:	fab0 f080 	clz	r0, r0
     8fc:	0940      	lsrs	r0, r0, #5
     8fe:	bd70      	pop	{r4, r5, r6, pc}
     900:	20001124 	.word	0x20001124
     904:	20001128 	.word	0x20001128
     908:	0000e569 	.word	0x0000e569
     90c:	0000e80d 	.word	0x0000e80d

00000910 <_ZN16Maintenance_Tool17CommandSetHeatersEv>:
bool Maintenance_Tool::CommandSetHeaters(void)	{

	uint32_t	w,r;
	uint8_t	data=0;
	
		memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     910:	4603      	mov	r3, r0
     912:	f853 1f05 	ldr.w	r1, [r3, #5]!
     916:	f8c0 1045 	str.w	r1, [r0, #69]	; 0x45
     91a:	8899      	ldrh	r1, [r3, #4]
     91c:	799b      	ldrb	r3, [r3, #6]
     91e:	f8a0 1049 	strh.w	r1, [r0, #73]	; 0x49
     922:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
		
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandSetHeaters);
     926:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
		// 		 		for (i=0; i<header.dataSize; i++)
		// 		 			io >> ch;
	}
	
	return result;
}
     92a:	2849      	cmp	r0, #73	; 0x49
     92c:	bf14      	ite	ne
     92e:	2000      	movne	r0, #0
     930:	2001      	moveq	r0, #1
     932:	4770      	bx	lr

00000934 <_ZN16Maintenance_Tool20CommandSetEnableFansEv>:

bool Maintenance_Tool::CommandSetEnableFans(void){
     934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     936:	4603      	mov	r3, r0
     938:	f853 1f05 	ldr.w	r1, [r3, #5]!
     93c:	f8c0 1045 	str.w	r1, [r0, #69]	; 0x45
     940:	8899      	ldrh	r1, [r3, #4]
     942:	799b      	ldrb	r3, [r3, #6]
     944:	f8a0 1049 	strh.w	r1, [r0, #73]	; 0x49
     948:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandSetEnableFans);
     94c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
     950:	2b4b      	cmp	r3, #75	; 0x4b
     952:	bf0c      	ite	eq
     954:	2401      	moveq	r4, #1
     956:	2400      	movne	r4, #0
	if (result){
     958:	d001      	beq.n	95e <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x2a>
	}else{

	}
	
	return result;
}
     95a:	4620      	mov	r0, r4
     95c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data=singleTaskMessage.description;
     95e:	f890 504b 	ldrb.w	r5, [r0, #75]	; 0x4b
		if ((data&(0x07))>3)
     962:	f005 0307 	and.w	r3, r5, #7
     966:	2b03      	cmp	r3, #3
     968:	dc0a      	bgt.n	980 <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x4c>
			fans.evaporator[0]->SetEnable(data&0x01);
     96a:	4f09      	ldr	r7, [pc, #36]	; (990 <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x5c>)
     96c:	f005 0101 	and.w	r1, r5, #1
     970:	6df8      	ldr	r0, [r7, #92]	; 0x5c
     972:	4e08      	ldr	r6, [pc, #32]	; (994 <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x60>)
     974:	47b0      	blx	r6
			fans.evaporator[1]->SetEnable(data&0x02);
     976:	f3c5 0140 	ubfx	r1, r5, #1, #1
     97a:	6e38      	ldr	r0, [r7, #96]	; 0x60
     97c:	47b0      	blx	r6
     97e:	e7ec      	b.n	95a <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x26>
			fans.condesator->SetEnable(data&0x04);
     980:	f3c5 0180 	ubfx	r1, r5, #2, #1
     984:	4b02      	ldr	r3, [pc, #8]	; (990 <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x5c>)
     986:	6e58      	ldr	r0, [r3, #100]	; 0x64
     988:	4b03      	ldr	r3, [pc, #12]	; (998 <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x64>)
     98a:	4798      	blx	r3
     98c:	e7e5      	b.n	95a <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x26>
     98e:	bf00      	nop
     990:	20000788 	.word	0x20000788
     994:	0000064d 	.word	0x0000064d
     998:	00000315 	.word	0x00000315

0000099c <_ZN16Maintenance_Tool17CommandSetPWMFansEv>:

bool Maintenance_Tool::CommandSetPWMFans(void){
     99c:	b510      	push	{r4, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     99e:	4603      	mov	r3, r0
     9a0:	f853 1f05 	ldr.w	r1, [r3, #5]!
     9a4:	f8c0 1045 	str.w	r1, [r0, #69]	; 0x45
     9a8:	8899      	ldrh	r1, [r3, #4]
     9aa:	799b      	ldrb	r3, [r3, #6]
     9ac:	f8a0 1049 	strh.w	r1, [r0, #73]	; 0x49
     9b0:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandSetPWMFans);
     9b4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
     9b8:	2b4c      	cmp	r3, #76	; 0x4c
     9ba:	bf0c      	ite	eq
     9bc:	2401      	moveq	r4, #1
     9be:	2400      	movne	r4, #0
	if (result){
     9c0:	d001      	beq.n	9c6 <_ZN16Maintenance_Tool17CommandSetPWMFansEv+0x2a>
	}else{

	}
	
	return result;
}
     9c2:	4620      	mov	r0, r4
     9c4:	bd10      	pop	{r4, pc}
			fans.evaporator[0]->SetPWM(data);
     9c6:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
     9ca:	4b02      	ldr	r3, [pc, #8]	; (9d4 <_ZN16Maintenance_Tool17CommandSetPWMFansEv+0x38>)
     9cc:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
     9ce:	4b02      	ldr	r3, [pc, #8]	; (9d8 <_ZN16Maintenance_Tool17CommandSetPWMFansEv+0x3c>)
     9d0:	4798      	blx	r3
     9d2:	e7f6      	b.n	9c2 <_ZN16Maintenance_Tool17CommandSetPWMFansEv+0x26>
     9d4:	20000788 	.word	0x20000788
     9d8:	0000066d 	.word	0x0000066d

000009dc <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
     9dc:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
     9de:	0855      	lsrs	r5, r2, #1
     9e0:	d007      	beq.n	9f2 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
     9e2:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
     9e4:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
     9e8:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
     9ea:	3401      	adds	r4, #1
     9ec:	b2a4      	uxth	r4, r4
     9ee:	42ac      	cmp	r4, r5
     9f0:	dbf8      	blt.n	9e4 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
     9f2:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
     9f6:	bf1d      	ittte	ne
     9f8:	189b      	addne	r3, r3, r2
     9fa:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
     9fe:	4048      	eorne	r0, r1
     a00:	4608      	moveq	r0, r1

	return checksum;
	}
     a02:	bc30      	pop	{r4, r5}
     a04:	4770      	bx	lr
	...

00000a08 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader>:
	{
     a08:	b538      	push	{r3, r4, r5, lr}
     a0a:	4604      	mov	r4, r0
	checksum=0;
     a0c:	2500      	movs	r5, #0
     a0e:	f8a0 5104 	strh.w	r5, [r0, #260]	; 0x104
	checksum = calculateChecksum(0, sizeof(header), &header);
     a12:	460b      	mov	r3, r1
     a14:	2206      	movs	r2, #6
     a16:	4629      	mov	r1, r5
     a18:	4d02      	ldr	r5, [pc, #8]	; (a24 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader+0x1c>)
     a1a:	47a8      	blx	r5
     a1c:	f8a4 0104 	strh.w	r0, [r4, #260]	; 0x104
	}
     a20:	bd38      	pop	{r3, r4, r5, pc}
     a22:	bf00      	nop
     a24:	000009dd 	.word	0x000009dd

00000a28 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
	}
	return	ticks;
}

void Maintenance_Tool::GetCPUSerialNumber(uint8_t* buffer)
{
     a28:	b410      	push	{r4}
	uint32_t add=0x41002018;
	for (i = 0; i < 4; i++)
     a2a:	2200      	movs	r2, #0
     a2c:	f880 2124 	strb.w	r2, [r0, #292]	; 0x124
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
     a30:	4c07      	ldr	r4, [pc, #28]	; (a50 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x28>)
     a32:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
     a36:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for (i = 0; i < 4; i++)
     a3a:	f890 3124 	ldrb.w	r3, [r0, #292]	; 0x124
     a3e:	3301      	adds	r3, #1
     a40:	b2db      	uxtb	r3, r3
     a42:	f880 3124 	strb.w	r3, [r0, #292]	; 0x124
     a46:	461a      	mov	r2, r3
     a48:	2b03      	cmp	r3, #3
     a4a:	ddf2      	ble.n	a32 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0xa>
	}

}
     a4c:	bc10      	pop	{r4}
     a4e:	4770      	bx	lr
     a50:	41002018 	.word	0x41002018

00000a54 <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
     a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a56:	4604      	mov	r4, r0
	ticks=0;
     a58:	2600      	movs	r6, #0
     a5a:	6006      	str	r6, [r0, #0]
	interfaceTimer.Init();
     a5c:	4d12      	ldr	r5, [pc, #72]	; (aa8 <_ZN16Maintenance_Tool4InitEv+0x54>)
     a5e:	4628      	mov	r0, r5
     a60:	4b12      	ldr	r3, [pc, #72]	; (aac <_ZN16Maintenance_Tool4InitEv+0x58>)
     a62:	4798      	blx	r3
	interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
     a64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     a68:	4911      	ldr	r1, [pc, #68]	; (ab0 <_ZN16Maintenance_Tool4InitEv+0x5c>)
     a6a:	4628      	mov	r0, r5
     a6c:	4b11      	ldr	r3, [pc, #68]	; (ab4 <_ZN16Maintenance_Tool4InitEv+0x60>)
     a6e:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
     a70:	f504 7585 	add.w	r5, r4, #266	; 0x10a
     a74:	4629      	mov	r1, r5
     a76:	4620      	mov	r0, r4
     a78:	4b0f      	ldr	r3, [pc, #60]	; (ab8 <_ZN16Maintenance_Tool4InitEv+0x64>)
     a7a:	4798      	blx	r3
	memcpy(localBuffer,cpuSerial,16);
     a7c:	f8d4 710a 	ldr.w	r7, [r4, #266]	; 0x10a
     a80:	f8d4 010e 	ldr.w	r0, [r4, #270]	; 0x10e
     a84:	f8d4 1112 	ldr.w	r1, [r4, #274]	; 0x112
     a88:	f8d4 2116 	ldr.w	r2, [r4, #278]	; 0x116
     a8c:	f8c4 7005 	str.w	r7, [r4, #5]
     a90:	f8c4 0009 	str.w	r0, [r4, #9]
     a94:	f8c4 100d 	str.w	r1, [r4, #13]
     a98:	f8c4 2011 	str.w	r2, [r4, #17]
	gotAccess=false;
     a9c:	f884 6101 	strb.w	r6, [r4, #257]	; 0x101
}
     aa0:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
     aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     aa6:	bf00      	nop
     aa8:	20001428 	.word	0x20001428
     aac:	0000f54d 	.word	0x0000f54d
     ab0:	00000745 	.word	0x00000745
     ab4:	0000f639 	.word	0x0000f639
     ab8:	00000a29 	.word	0x00000a29

00000abc <_GLOBAL__sub_I_ptrMaintenanceTool>:
     abc:	b510      	push	{r4, lr}
     abe:	4c05      	ldr	r4, [pc, #20]	; (ad4 <_GLOBAL__sub_I_ptrMaintenanceTool+0x18>)
     ac0:	4620      	mov	r0, r4
     ac2:	4b05      	ldr	r3, [pc, #20]	; (ad8 <_GLOBAL__sub_I_ptrMaintenanceTool+0x1c>)
     ac4:	4798      	blx	r3
     ac6:	4a05      	ldr	r2, [pc, #20]	; (adc <_GLOBAL__sub_I_ptrMaintenanceTool+0x20>)
     ac8:	4905      	ldr	r1, [pc, #20]	; (ae0 <_GLOBAL__sub_I_ptrMaintenanceTool+0x24>)
     aca:	4620      	mov	r0, r4
     acc:	4b05      	ldr	r3, [pc, #20]	; (ae4 <_GLOBAL__sub_I_ptrMaintenanceTool+0x28>)
     ace:	4798      	blx	r3
     ad0:	bd10      	pop	{r4, pc}
     ad2:	bf00      	nop
     ad4:	20000944 	.word	0x20000944
     ad8:	0000078d 	.word	0x0000078d
     adc:	20000000 	.word	0x20000000
     ae0:	00000765 	.word	0x00000765
     ae4:	0000fbc1 	.word	0x0000fbc1

00000ae8 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb>:
	{
     ae8:	b538      	push	{r3, r4, r5, lr}
     aea:	4605      	mov	r5, r0
     aec:	460c      	mov	r4, r1
	checksum = calculateChecksum(header);
     aee:	4b05      	ldr	r3, [pc, #20]	; (b04 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x1c>)
     af0:	4798      	blx	r3
     af2:	f8a5 0104 	strh.w	r0, [r5, #260]	; 0x104
	usb.writeData(&header, sizeof(header));
     af6:	2206      	movs	r2, #6
     af8:	4621      	mov	r1, r4
     afa:	4803      	ldr	r0, [pc, #12]	; (b08 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x20>)
     afc:	4b03      	ldr	r3, [pc, #12]	; (b0c <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x24>)
     afe:	4798      	blx	r3
     b00:	bd38      	pop	{r3, r4, r5, pc}
     b02:	bf00      	nop
     b04:	00000a09 	.word	0x00000a09
     b08:	20001350 	.word	0x20001350
     b0c:	0000f051 	.word	0x0000f051

00000b10 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader>:
bool Maintenance_Tool::handleGAINCommandReadParameters(HVACMessageHeader& header){
     b10:	b538      	push	{r3, r4, r5, lr}
		if (result){
     b12:	790b      	ldrb	r3, [r1, #4]
     b14:	2b48      	cmp	r3, #72	; 0x48
     b16:	d001      	beq.n	b1c <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0xc>
	 	bool	result(header.command == kGAINCommandReadParameters);
     b18:	2000      	movs	r0, #0
     b1a:	bd38      	pop	{r3, r4, r5, pc}
     b1c:	4604      	mov	r4, r0
			uint32_t add=(uint32_t)&flashLayout->parameters;
     b1e:	4b0d      	ldr	r3, [pc, #52]	; (b54 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x44>)
     b20:	681a      	ldr	r2, [r3, #0]
			r=flash.ReadAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(UserParameters));
     b22:	2301      	movs	r3, #1
     b24:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
     b28:	f500 7184 	add.w	r1, r0, #264	; 0x108
     b2c:	480a      	ldr	r0, [pc, #40]	; (b58 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x48>)
     b2e:	4d0b      	ldr	r5, [pc, #44]	; (b5c <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x4c>)
     b30:	47a8      	blx	r5
			 if (r>0)
     b32:	b908      	cbnz	r0, b38 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x28>
	 	bool	result(header.command == kGAINCommandReadParameters);
     b34:	2001      	movs	r0, #1
}
     b36:	bd38      	pop	{r3, r4, r5, pc}
				memcpy((uint8_t*)&localBuffer[n+1],(void*)&parameters,sizeof(UserParameters));
     b38:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
     b3c:	7363      	strb	r3, [r4, #13]
				delay_us(1);
     b3e:	2001      	movs	r0, #1
     b40:	4b07      	ldr	r3, [pc, #28]	; (b60 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x50>)
     b42:	4798      	blx	r3
				 usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     b44:	2240      	movs	r2, #64	; 0x40
     b46:	1d61      	adds	r1, r4, #5
     b48:	4806      	ldr	r0, [pc, #24]	; (b64 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x54>)
     b4a:	4b07      	ldr	r3, [pc, #28]	; (b68 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x58>)
     b4c:	4798      	blx	r3
				 result=w>0;
     b4e:	2000      	movs	r0, #0
     b50:	bd38      	pop	{r3, r4, r5, pc}
     b52:	bf00      	nop
     b54:	20001124 	.word	0x20001124
     b58:	20001128 	.word	0x20001128
     b5c:	0000e8ed 	.word	0x0000e8ed
     b60:	000024cd 	.word	0x000024cd
     b64:	20001350 	.word	0x20001350
     b68:	0000f0e9 	.word	0x0000f0e9

00000b6c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv>:
bool Maintenance_Tool::CommandReadHeaterStatus(){
     b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool	result(header.task == kHVACCommandReadHeaterStatus);
     b6e:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
     b72:	2b4a      	cmp	r3, #74	; 0x4a
     b74:	bf0c      	ite	eq
     b76:	2501      	moveq	r5, #1
     b78:	2500      	movne	r5, #0
	if (result){
     b7a:	d001      	beq.n	b80 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x14>
}
     b7c:	4628      	mov	r0, r5
     b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b80:	4604      	mov	r4, r0
			singleTask.description=heater.ReadStatus();
     b82:	4f10      	ldr	r7, [pc, #64]	; (bc4 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x58>)
     b84:	4638      	mov	r0, r7
     b86:	4b10      	ldr	r3, [pc, #64]	; (bc8 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x5c>)
     b88:	4798      	blx	r3
     b8a:	4606      	mov	r6, r0
			memcpy(localBuffer,(void*)&singleTask,n);
     b8c:	4b0f      	ldr	r3, [pc, #60]	; (bcc <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x60>)
     b8e:	f8c4 3005 	str.w	r3, [r4, #5]
     b92:	2300      	movs	r3, #0
     b94:	7263      	strb	r3, [r4, #9]
     b96:	234a      	movs	r3, #74	; 0x4a
     b98:	72a3      	strb	r3, [r4, #10]
     b9a:	72e0      	strb	r0, [r4, #11]
			if (!heater.statusChanged)
     b9c:	787b      	ldrb	r3, [r7, #1]
     b9e:	b15b      	cbz	r3, bb8 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x4c>
			singleTaskMessage=singleTask;
     ba0:	4b0a      	ldr	r3, [pc, #40]	; (bcc <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x60>)
     ba2:	f8c4 3045 	str.w	r3, [r4, #69]	; 0x45
     ba6:	2300      	movs	r3, #0
     ba8:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
     bac:	234a      	movs	r3, #74	; 0x4a
     bae:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
     bb2:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
     bb6:	e7e1      	b.n	b7c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x10>
				usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     bb8:	2240      	movs	r2, #64	; 0x40
     bba:	1d61      	adds	r1, r4, #5
     bbc:	4804      	ldr	r0, [pc, #16]	; (bd0 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x64>)
     bbe:	4b05      	ldr	r3, [pc, #20]	; (bd4 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x68>)
     bc0:	4798      	blx	r3
     bc2:	e7ed      	b.n	ba0 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x34>
     bc4:	200014dc 	.word	0x200014dc
     bc8:	0000f9e1 	.word	0x0000f9e1
     bcc:	61626364 	.word	0x61626364
     bd0:	20001350 	.word	0x20001350
     bd4:	0000f0e9 	.word	0x0000f0e9

00000bd8 <_ZN16Maintenance_Tool14handleHVACTaskEv>:
bool Maintenance_Tool::handleHVACTask(void){
     bd8:	b570      	push	{r4, r5, r6, lr}
     bda:	4604      	mov	r4, r0
	memcpy(&header,localBuffer,sizeof(HVACMessageHeader));
     bdc:	f100 059c 	add.w	r5, r0, #156	; 0x9c
     be0:	4601      	mov	r1, r0
     be2:	f851 3f05 	ldr.w	r3, [r1, #5]!
     be6:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
     bea:	888b      	ldrh	r3, [r1, #4]
     bec:	80ab      	strh	r3, [r5, #4]
	&& (header.task<kGAINNumberOfCommands))
     bee:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
     bf2:	3b41      	subs	r3, #65	; 0x41
	if ((header.task>=kGAINCommandConnect)
     bf4:	b2db      	uxtb	r3, r3
     bf6:	2b11      	cmp	r3, #17
     bf8:	d814      	bhi.n	c24 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x4c>
		gotTask=true;
     bfa:	2301      	movs	r3, #1
     bfc:	f880 3103 	strb.w	r3, [r0, #259]	; 0x103
		result=gotTask;
     c00:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
		switch (header.task)
     c04:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
     c08:	3b41      	subs	r3, #65	; 0x41
     c0a:	2b11      	cmp	r3, #17
     c0c:	d857      	bhi.n	cbe <_ZN16Maintenance_Tool14handleHVACTaskEv+0xe6>
     c0e:	e8df f003 	tbb	[pc, r3]
     c12:	211a      	.short	0x211a
     c14:	17172717 	.word	0x17172717
     c18:	443e3730 	.word	0x443e3730
     c1c:	1717504a 	.word	0x1717504a
     c20:	17565617 	.word	0x17565617
		gotTask=false;
     c24:	2300      	movs	r3, #0
     c26:	f880 3103 	strb.w	r3, [r0, #259]	; 0x103
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
     c2a:	4e27      	ldr	r6, [pc, #156]	; (cc8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xf0>)
     c2c:	2240      	movs	r2, #64	; 0x40
     c2e:	4630      	mov	r0, r6
     c30:	4b26      	ldr	r3, [pc, #152]	; (ccc <_ZN16Maintenance_Tool14handleHVACTaskEv+0xf4>)
     c32:	4798      	blx	r3
		result=usb.rxReady;
     c34:	7d73      	ldrb	r3, [r6, #21]
     c36:	b2db      	uxtb	r3, r3
     c38:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
	if (result)
     c3c:	2b00      	cmp	r3, #0
     c3e:	d1e1      	bne.n	c04 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x2c>
	}
     c40:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
     c44:	bd70      	pop	{r4, r5, r6, pc}
				result = handleGAINCommandConnect( header);
     c46:	4629      	mov	r1, r5
     c48:	4620      	mov	r0, r4
     c4a:	4b21      	ldr	r3, [pc, #132]	; (cd0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xf8>)
     c4c:	4798      	blx	r3
     c4e:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     c52:	e7f5      	b.n	c40 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
	maintenanceIsConnected = false;
     c54:	2300      	movs	r3, #0
     c56:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
	bSendNotifications = false;
     c5a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
				break;
     c5e:	e7ef      	b.n	c40 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
				notifyGAINCommandReceived( header, result);
     c60:	2201      	movs	r2, #1
     c62:	4629      	mov	r1, r5
     c64:	4620      	mov	r0, r4
     c66:	4b1b      	ldr	r3, [pc, #108]	; (cd4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xfc>)
     c68:	4798      	blx	r3
				result = handleGAINCommandReset(header);
     c6a:	2301      	movs	r3, #1
     c6c:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
				break;
     c70:	e7e6      	b.n	c40 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
				result = handleGAINCommandWriteParameters( header);
     c72:	4629      	mov	r1, r5
     c74:	4620      	mov	r0, r4
     c76:	4b18      	ldr	r3, [pc, #96]	; (cd8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x100>)
     c78:	4798      	blx	r3
     c7a:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     c7e:	e7df      	b.n	c40 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
				result = handleGAINCommandReadParameters( header);
     c80:	4629      	mov	r1, r5
     c82:	4620      	mov	r0, r4
     c84:	4b15      	ldr	r3, [pc, #84]	; (cdc <_ZN16Maintenance_Tool14handleHVACTaskEv+0x104>)
     c86:	4798      	blx	r3
     c88:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     c8c:	e7d8      	b.n	c40 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
				result = CommandSetHeaters();
     c8e:	4620      	mov	r0, r4
     c90:	4b13      	ldr	r3, [pc, #76]	; (ce0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x108>)
     c92:	4798      	blx	r3
     c94:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     c98:	e7d2      	b.n	c40 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
				result = CommandReadHeaterStatus();
     c9a:	4620      	mov	r0, r4
     c9c:	4b11      	ldr	r3, [pc, #68]	; (ce4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x10c>)
     c9e:	4798      	blx	r3
     ca0:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     ca4:	e7cc      	b.n	c40 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
				result = CommandSetEnableFans();
     ca6:	4620      	mov	r0, r4
     ca8:	4b0f      	ldr	r3, [pc, #60]	; (ce8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x110>)
     caa:	4798      	blx	r3
     cac:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     cb0:	e7c6      	b.n	c40 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
				result = CommandSetPWMFans();
     cb2:	4620      	mov	r0, r4
     cb4:	4b0d      	ldr	r3, [pc, #52]	; (cec <_ZN16Maintenance_Tool14handleHVACTaskEv+0x114>)
     cb6:	4798      	blx	r3
     cb8:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     cbc:	e7c0      	b.n	c40 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
				result = false;
     cbe:	2300      	movs	r3, #0
     cc0:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
				break;
     cc4:	e7bc      	b.n	c40 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
     cc6:	bf00      	nop
     cc8:	20001350 	.word	0x20001350
     ccc:	0000ef65 	.word	0x0000ef65
     cd0:	000008a7 	.word	0x000008a7
     cd4:	00000ae9 	.word	0x00000ae9
     cd8:	000008c1 	.word	0x000008c1
     cdc:	00000b11 	.word	0x00000b11
     ce0:	00000911 	.word	0x00000911
     ce4:	00000b6d 	.word	0x00000b6d
     ce8:	00000935 	.word	0x00000935
     cec:	0000099d 	.word	0x0000099d

00000cf0 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
     cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cf2:	4604      	mov	r4, r0
	result=false;
     cf4:	2300      	movs	r3, #0
     cf6:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	if (gotAccess)
     cfa:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
     cfe:	2b00      	cmp	r3, #0
     d00:	d04c      	beq.n	d9c <_ZN16Maintenance_Tool19handleCommunicationEv+0xac>
		if (usb.rxReady)
     d02:	4b28      	ldr	r3, [pc, #160]	; (da4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
     d04:	7d5b      	ldrb	r3, [r3, #21]
     d06:	b953      	cbnz	r3, d1e <_ZN16Maintenance_Tool19handleCommunicationEv+0x2e>
			gotCommand=false;
     d08:	2300      	movs	r3, #0
     d0a:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     d0e:	2240      	movs	r2, #64	; 0x40
     d10:	1d61      	adds	r1, r4, #5
     d12:	4824      	ldr	r0, [pc, #144]	; (da4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
     d14:	4b24      	ldr	r3, [pc, #144]	; (da8 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb8>)
     d16:	4798      	blx	r3
	}
     d18:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
     d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memcpy(&header,localBuffer,sizeMessage);
     d1e:	4603      	mov	r3, r0
     d20:	f853 2f05 	ldr.w	r2, [r3, #5]!
     d24:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
     d28:	889b      	ldrh	r3, [r3, #4]
     d2a:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
			switch (input){
     d2e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
     d32:	2b3d      	cmp	r3, #61	; 0x3d
     d34:	d017      	beq.n	d66 <_ZN16Maintenance_Tool19handleCommunicationEv+0x76>
     d36:	2b3e      	cmp	r3, #62	; 0x3e
     d38:	d010      	beq.n	d5c <_ZN16Maintenance_Tool19handleCommunicationEv+0x6c>
     d3a:	2b3c      	cmp	r3, #60	; 0x3c
     d3c:	d003      	beq.n	d46 <_ZN16Maintenance_Tool19handleCommunicationEv+0x56>
					gotCommand=false;
     d3e:	2300      	movs	r3, #0
     d40:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
				break;
     d44:	e006      	b.n	d54 <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
					gotCommand=true;
     d46:	2301      	movs	r3, #1
     d48:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
					result = handleHVACTask();
     d4c:	4b17      	ldr	r3, [pc, #92]	; (dac <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
     d4e:	4798      	blx	r3
     d50:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
			ClearLocalBuffer();
     d54:	4620      	mov	r0, r4
     d56:	4b16      	ldr	r3, [pc, #88]	; (db0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
     d58:	4798      	blx	r3
     d5a:	e7d8      	b.n	d0e <_ZN16Maintenance_Tool19handleCommunicationEv+0x1e>
					result = handleHVACTask();
     d5c:	4b13      	ldr	r3, [pc, #76]	; (dac <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
     d5e:	4798      	blx	r3
     d60:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     d64:	e7f6      	b.n	d54 <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
					is_MTPC_Beaming=true;
     d66:	2501      	movs	r5, #1
     d68:	7105      	strb	r5, [r0, #4]
					interfaceTimer.Stop();
     d6a:	4e12      	ldr	r6, [pc, #72]	; (db4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
     d6c:	4630      	mov	r0, r6
     d6e:	4b12      	ldr	r3, [pc, #72]	; (db8 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc8>)
     d70:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
     d72:	4f12      	ldr	r7, [pc, #72]	; (dbc <_ZN16Maintenance_Tool19handleCommunicationEv+0xcc>)
     d74:	4639      	mov	r1, r7
     d76:	4630      	mov	r0, r6
     d78:	4b11      	ldr	r3, [pc, #68]	; (dc0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd0>)
     d7a:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
     d7c:	f242 7210 	movw	r2, #10000	; 0x2710
     d80:	4639      	mov	r1, r7
     d82:	4630      	mov	r0, r6
     d84:	4b0f      	ldr	r3, [pc, #60]	; (dc4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd4>)
     d86:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
     d88:	2300      	movs	r3, #0
     d8a:	64e3      	str	r3, [r4, #76]	; 0x4c
					maintenanceIsConnected = true;
     d8c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
					bSendNotifications = true;
     d90:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
					result=is_MTPC_Beaming;
     d94:	7923      	ldrb	r3, [r4, #4]
     d96:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
				break;
     d9a:	e7db      	b.n	d54 <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
		gotCommand=false;
     d9c:	2300      	movs	r3, #0
     d9e:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
     da2:	e7b9      	b.n	d18 <_ZN16Maintenance_Tool19handleCommunicationEv+0x28>
     da4:	20001350 	.word	0x20001350
     da8:	0000ef65 	.word	0x0000ef65
     dac:	00000bd9 	.word	0x00000bd9
     db0:	00000889 	.word	0x00000889
     db4:	20001428 	.word	0x20001428
     db8:	0000f5a9 	.word	0x0000f5a9
     dbc:	00000755 	.word	0x00000755
     dc0:	0000f6ed 	.word	0x0000f6ed
     dc4:	0000f689 	.word	0x0000f689

00000dc8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     dc8:	b580      	push	{r7, lr}
     dca:	af00      	add	r7, sp, #0
	system_init();
     dcc:	4b03      	ldr	r3, [pc, #12]	; (ddc <atmel_start_init+0x14>)
     dce:	4798      	blx	r3
	usb_init();
     dd0:	4b03      	ldr	r3, [pc, #12]	; (de0 <atmel_start_init+0x18>)
     dd2:	4798      	blx	r3
	spi_nor_flash_init();
     dd4:	4b03      	ldr	r3, [pc, #12]	; (de4 <atmel_start_init+0x1c>)
     dd6:	4798      	blx	r3
}
     dd8:	bf00      	nop
     dda:	bd80      	pop	{r7, pc}
     ddc:	0000213d 	.word	0x0000213d
     de0:	0000bead 	.word	0x0000bead
     de4:	0000be41 	.word	0x0000be41

00000de8 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     de8:	b480      	push	{r7}
     dea:	b085      	sub	sp, #20
     dec:	af00      	add	r7, sp, #0
     dee:	60f8      	str	r0, [r7, #12]
     df0:	460b      	mov	r3, r1
     df2:	607a      	str	r2, [r7, #4]
     df4:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     df6:	7afa      	ldrb	r2, [r7, #11]
     df8:	68fb      	ldr	r3, [r7, #12]
     dfa:	3220      	adds	r2, #32
     dfc:	6879      	ldr	r1, [r7, #4]
     dfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     e02:	bf00      	nop
     e04:	3714      	adds	r7, #20
     e06:	46bd      	mov	sp, r7
     e08:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0c:	4770      	bx	lr

00000e0e <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     e0e:	b480      	push	{r7}
     e10:	b083      	sub	sp, #12
     e12:	af00      	add	r7, sp, #0
     e14:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	691b      	ldr	r3, [r3, #16]
     e1a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     e1e:	687b      	ldr	r3, [r7, #4]
     e20:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e22:	bf00      	nop
     e24:	370c      	adds	r7, #12
     e26:	46bd      	mov	sp, r7
     e28:	f85d 7b04 	ldr.w	r7, [sp], #4
     e2c:	4770      	bx	lr

00000e2e <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     e2e:	b480      	push	{r7}
     e30:	b083      	sub	sp, #12
     e32:	af00      	add	r7, sp, #0
     e34:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     e36:	687b      	ldr	r3, [r7, #4]
     e38:	691b      	ldr	r3, [r3, #16]
     e3a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e42:	bf00      	nop
     e44:	370c      	adds	r7, #12
     e46:	46bd      	mov	sp, r7
     e48:	f85d 7b04 	ldr.w	r7, [sp], #4
     e4c:	4770      	bx	lr

00000e4e <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     e4e:	b480      	push	{r7}
     e50:	b083      	sub	sp, #12
     e52:	af00      	add	r7, sp, #0
     e54:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     e56:	687b      	ldr	r3, [r7, #4]
     e58:	691b      	ldr	r3, [r3, #16]
     e5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     e5e:	687b      	ldr	r3, [r7, #4]
     e60:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e62:	bf00      	nop
     e64:	370c      	adds	r7, #12
     e66:	46bd      	mov	sp, r7
     e68:	f85d 7b04 	ldr.w	r7, [sp], #4
     e6c:	4770      	bx	lr

00000e6e <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     e6e:	b480      	push	{r7}
     e70:	b083      	sub	sp, #12
     e72:	af00      	add	r7, sp, #0
     e74:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     e76:	687b      	ldr	r3, [r7, #4]
     e78:	691b      	ldr	r3, [r3, #16]
     e7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     e7e:	687b      	ldr	r3, [r7, #4]
     e80:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e82:	bf00      	nop
     e84:	370c      	adds	r7, #12
     e86:	46bd      	mov	sp, r7
     e88:	f85d 7b04 	ldr.w	r7, [sp], #4
     e8c:	4770      	bx	lr

00000e8e <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     e8e:	b480      	push	{r7}
     e90:	b083      	sub	sp, #12
     e92:	af00      	add	r7, sp, #0
     e94:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     e96:	687b      	ldr	r3, [r7, #4]
     e98:	695b      	ldr	r3, [r3, #20]
     e9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     e9e:	687b      	ldr	r3, [r7, #4]
     ea0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ea2:	bf00      	nop
     ea4:	370c      	adds	r7, #12
     ea6:	46bd      	mov	sp, r7
     ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
     eac:	4770      	bx	lr

00000eae <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     eae:	b480      	push	{r7}
     eb0:	b083      	sub	sp, #12
     eb2:	af00      	add	r7, sp, #0
     eb4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     eb6:	687b      	ldr	r3, [r7, #4]
     eb8:	695b      	ldr	r3, [r3, #20]
     eba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     ebe:	687b      	ldr	r3, [r7, #4]
     ec0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ec2:	bf00      	nop
     ec4:	370c      	adds	r7, #12
     ec6:	46bd      	mov	sp, r7
     ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
     ecc:	4770      	bx	lr

00000ece <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     ece:	b480      	push	{r7}
     ed0:	b083      	sub	sp, #12
     ed2:	af00      	add	r7, sp, #0
     ed4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     ed6:	687b      	ldr	r3, [r7, #4]
     ed8:	695b      	ldr	r3, [r3, #20]
     eda:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     ede:	687b      	ldr	r3, [r7, #4]
     ee0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ee2:	bf00      	nop
     ee4:	370c      	adds	r7, #12
     ee6:	46bd      	mov	sp, r7
     ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
     eec:	4770      	bx	lr

00000eee <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     eee:	b480      	push	{r7}
     ef0:	b083      	sub	sp, #12
     ef2:	af00      	add	r7, sp, #0
     ef4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     ef6:	687b      	ldr	r3, [r7, #4]
     ef8:	695b      	ldr	r3, [r3, #20]
     efa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     efe:	687b      	ldr	r3, [r7, #4]
     f00:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f02:	bf00      	nop
     f04:	370c      	adds	r7, #12
     f06:	46bd      	mov	sp, r7
     f08:	f85d 7b04 	ldr.w	r7, [sp], #4
     f0c:	4770      	bx	lr

00000f0e <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     f0e:	b480      	push	{r7}
     f10:	b083      	sub	sp, #12
     f12:	af00      	add	r7, sp, #0
     f14:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     f16:	687b      	ldr	r3, [r7, #4]
     f18:	695b      	ldr	r3, [r3, #20]
     f1a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     f1e:	687b      	ldr	r3, [r7, #4]
     f20:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f22:	bf00      	nop
     f24:	370c      	adds	r7, #12
     f26:	46bd      	mov	sp, r7
     f28:	f85d 7b04 	ldr.w	r7, [sp], #4
     f2c:	4770      	bx	lr

00000f2e <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     f2e:	b480      	push	{r7}
     f30:	b083      	sub	sp, #12
     f32:	af00      	add	r7, sp, #0
     f34:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     f36:	687b      	ldr	r3, [r7, #4]
     f38:	699b      	ldr	r3, [r3, #24]
     f3a:	f043 0201 	orr.w	r2, r3, #1
     f3e:	687b      	ldr	r3, [r7, #4]
     f40:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f42:	bf00      	nop
     f44:	370c      	adds	r7, #12
     f46:	46bd      	mov	sp, r7
     f48:	f85d 7b04 	ldr.w	r7, [sp], #4
     f4c:	4770      	bx	lr

00000f4e <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     f4e:	b480      	push	{r7}
     f50:	b083      	sub	sp, #12
     f52:	af00      	add	r7, sp, #0
     f54:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     f56:	687b      	ldr	r3, [r7, #4]
     f58:	699b      	ldr	r3, [r3, #24]
     f5a:	f043 0202 	orr.w	r2, r3, #2
     f5e:	687b      	ldr	r3, [r7, #4]
     f60:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f62:	bf00      	nop
     f64:	370c      	adds	r7, #12
     f66:	46bd      	mov	sp, r7
     f68:	f85d 7b04 	ldr.w	r7, [sp], #4
     f6c:	4770      	bx	lr

00000f6e <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     f6e:	b480      	push	{r7}
     f70:	b083      	sub	sp, #12
     f72:	af00      	add	r7, sp, #0
     f74:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     f76:	687b      	ldr	r3, [r7, #4]
     f78:	699b      	ldr	r3, [r3, #24]
     f7a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     f7e:	687b      	ldr	r3, [r7, #4]
     f80:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f82:	bf00      	nop
     f84:	370c      	adds	r7, #12
     f86:	46bd      	mov	sp, r7
     f88:	f85d 7b04 	ldr.w	r7, [sp], #4
     f8c:	4770      	bx	lr

00000f8e <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     f8e:	b480      	push	{r7}
     f90:	b083      	sub	sp, #12
     f92:	af00      	add	r7, sp, #0
     f94:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     f96:	687b      	ldr	r3, [r7, #4]
     f98:	699b      	ldr	r3, [r3, #24]
     f9a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     f9e:	687b      	ldr	r3, [r7, #4]
     fa0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     fa2:	bf00      	nop
     fa4:	370c      	adds	r7, #12
     fa6:	46bd      	mov	sp, r7
     fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
     fac:	4770      	bx	lr

00000fae <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     fae:	b480      	push	{r7}
     fb0:	b083      	sub	sp, #12
     fb2:	af00      	add	r7, sp, #0
     fb4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     fb6:	687b      	ldr	r3, [r7, #4]
     fb8:	699b      	ldr	r3, [r3, #24]
     fba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     fbe:	687b      	ldr	r3, [r7, #4]
     fc0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     fc2:	bf00      	nop
     fc4:	370c      	adds	r7, #12
     fc6:	46bd      	mov	sp, r7
     fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
     fcc:	4770      	bx	lr

00000fce <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     fce:	b480      	push	{r7}
     fd0:	b083      	sub	sp, #12
     fd2:	af00      	add	r7, sp, #0
     fd4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     fd6:	687b      	ldr	r3, [r7, #4]
     fd8:	699b      	ldr	r3, [r3, #24]
     fda:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     fde:	687b      	ldr	r3, [r7, #4]
     fe0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     fe2:	bf00      	nop
     fe4:	370c      	adds	r7, #12
     fe6:	46bd      	mov	sp, r7
     fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
     fec:	4770      	bx	lr

00000fee <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     fee:	b480      	push	{r7}
     ff0:	b083      	sub	sp, #12
     ff2:	af00      	add	r7, sp, #0
     ff4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     ff6:	687b      	ldr	r3, [r7, #4]
     ff8:	69db      	ldr	r3, [r3, #28]
     ffa:	f043 0220 	orr.w	r2, r3, #32
     ffe:	687b      	ldr	r3, [r7, #4]
    1000:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1002:	bf00      	nop
    1004:	370c      	adds	r7, #12
    1006:	46bd      	mov	sp, r7
    1008:	f85d 7b04 	ldr.w	r7, [sp], #4
    100c:	4770      	bx	lr

0000100e <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    100e:	b480      	push	{r7}
    1010:	b083      	sub	sp, #12
    1012:	af00      	add	r7, sp, #0
    1014:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    1016:	687b      	ldr	r3, [r7, #4]
    1018:	69db      	ldr	r3, [r3, #28]
    101a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    101e:	687b      	ldr	r3, [r7, #4]
    1020:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1022:	bf00      	nop
    1024:	370c      	adds	r7, #12
    1026:	46bd      	mov	sp, r7
    1028:	f85d 7b04 	ldr.w	r7, [sp], #4
    102c:	4770      	bx	lr

0000102e <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    102e:	b480      	push	{r7}
    1030:	b083      	sub	sp, #12
    1032:	af00      	add	r7, sp, #0
    1034:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    1036:	687b      	ldr	r3, [r7, #4]
    1038:	69db      	ldr	r3, [r3, #28]
    103a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    103e:	687b      	ldr	r3, [r7, #4]
    1040:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1042:	bf00      	nop
    1044:	370c      	adds	r7, #12
    1046:	46bd      	mov	sp, r7
    1048:	f85d 7b04 	ldr.w	r7, [sp], #4
    104c:	4770      	bx	lr

0000104e <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    104e:	b480      	push	{r7}
    1050:	b083      	sub	sp, #12
    1052:	af00      	add	r7, sp, #0
    1054:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    1056:	687b      	ldr	r3, [r7, #4]
    1058:	6a1b      	ldr	r3, [r3, #32]
    105a:	f043 0201 	orr.w	r2, r3, #1
    105e:	687b      	ldr	r3, [r7, #4]
    1060:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1062:	bf00      	nop
    1064:	370c      	adds	r7, #12
    1066:	46bd      	mov	sp, r7
    1068:	f85d 7b04 	ldr.w	r7, [sp], #4
    106c:	4770      	bx	lr

0000106e <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    106e:	b480      	push	{r7}
    1070:	b083      	sub	sp, #12
    1072:	af00      	add	r7, sp, #0
    1074:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    1076:	687b      	ldr	r3, [r7, #4]
    1078:	6a1b      	ldr	r3, [r3, #32]
    107a:	f043 0202 	orr.w	r2, r3, #2
    107e:	687b      	ldr	r3, [r7, #4]
    1080:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1082:	bf00      	nop
    1084:	370c      	adds	r7, #12
    1086:	46bd      	mov	sp, r7
    1088:	f85d 7b04 	ldr.w	r7, [sp], #4
    108c:	4770      	bx	lr

0000108e <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    108e:	b480      	push	{r7}
    1090:	b083      	sub	sp, #12
    1092:	af00      	add	r7, sp, #0
    1094:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    1096:	687b      	ldr	r3, [r7, #4]
    1098:	6a1b      	ldr	r3, [r3, #32]
    109a:	f043 0204 	orr.w	r2, r3, #4
    109e:	687b      	ldr	r3, [r7, #4]
    10a0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10a2:	bf00      	nop
    10a4:	370c      	adds	r7, #12
    10a6:	46bd      	mov	sp, r7
    10a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    10ac:	4770      	bx	lr

000010ae <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    10ae:	b480      	push	{r7}
    10b0:	b083      	sub	sp, #12
    10b2:	af00      	add	r7, sp, #0
    10b4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    10b6:	687b      	ldr	r3, [r7, #4]
    10b8:	6a1b      	ldr	r3, [r3, #32]
    10ba:	f043 0208 	orr.w	r2, r3, #8
    10be:	687b      	ldr	r3, [r7, #4]
    10c0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10c2:	bf00      	nop
    10c4:	370c      	adds	r7, #12
    10c6:	46bd      	mov	sp, r7
    10c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    10cc:	4770      	bx	lr

000010ce <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    10ce:	b480      	push	{r7}
    10d0:	b083      	sub	sp, #12
    10d2:	af00      	add	r7, sp, #0
    10d4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    10d6:	687b      	ldr	r3, [r7, #4]
    10d8:	6a1b      	ldr	r3, [r3, #32]
    10da:	f043 0220 	orr.w	r2, r3, #32
    10de:	687b      	ldr	r3, [r7, #4]
    10e0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10e2:	bf00      	nop
    10e4:	370c      	adds	r7, #12
    10e6:	46bd      	mov	sp, r7
    10e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    10ec:	4770      	bx	lr

000010ee <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    10ee:	b480      	push	{r7}
    10f0:	b083      	sub	sp, #12
    10f2:	af00      	add	r7, sp, #0
    10f4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    10f6:	687b      	ldr	r3, [r7, #4]
    10f8:	6a1b      	ldr	r3, [r3, #32]
    10fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    10fe:	687b      	ldr	r3, [r7, #4]
    1100:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1102:	bf00      	nop
    1104:	370c      	adds	r7, #12
    1106:	46bd      	mov	sp, r7
    1108:	f85d 7b04 	ldr.w	r7, [sp], #4
    110c:	4770      	bx	lr

0000110e <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    110e:	b480      	push	{r7}
    1110:	b085      	sub	sp, #20
    1112:	af00      	add	r7, sp, #0
    1114:	60f8      	str	r0, [r7, #12]
    1116:	460b      	mov	r3, r1
    1118:	607a      	str	r2, [r7, #4]
    111a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    111c:	7afb      	ldrb	r3, [r7, #11]
    111e:	68fa      	ldr	r2, [r7, #12]
    1120:	01db      	lsls	r3, r3, #7
    1122:	4413      	add	r3, r2
    1124:	3308      	adds	r3, #8
    1126:	687a      	ldr	r2, [r7, #4]
    1128:	601a      	str	r2, [r3, #0]
}
    112a:	bf00      	nop
    112c:	3714      	adds	r7, #20
    112e:	46bd      	mov	sp, r7
    1130:	f85d 7b04 	ldr.w	r7, [sp], #4
    1134:	4770      	bx	lr

00001136 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    1136:	b480      	push	{r7}
    1138:	b085      	sub	sp, #20
    113a:	af00      	add	r7, sp, #0
    113c:	60f8      	str	r0, [r7, #12]
    113e:	460b      	mov	r3, r1
    1140:	607a      	str	r2, [r7, #4]
    1142:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1144:	7afb      	ldrb	r3, [r7, #11]
    1146:	68fa      	ldr	r2, [r7, #12]
    1148:	01db      	lsls	r3, r3, #7
    114a:	4413      	add	r3, r2
    114c:	3304      	adds	r3, #4
    114e:	687a      	ldr	r2, [r7, #4]
    1150:	601a      	str	r2, [r3, #0]
}
    1152:	bf00      	nop
    1154:	3714      	adds	r7, #20
    1156:	46bd      	mov	sp, r7
    1158:	f85d 7b04 	ldr.w	r7, [sp], #4
    115c:	4770      	bx	lr

0000115e <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    115e:	b480      	push	{r7}
    1160:	b085      	sub	sp, #20
    1162:	af00      	add	r7, sp, #0
    1164:	60f8      	str	r0, [r7, #12]
    1166:	460b      	mov	r3, r1
    1168:	607a      	str	r2, [r7, #4]
    116a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    116c:	7afb      	ldrb	r3, [r7, #11]
    116e:	68fa      	ldr	r2, [r7, #12]
    1170:	01db      	lsls	r3, r3, #7
    1172:	4413      	add	r3, r2
    1174:	3318      	adds	r3, #24
    1176:	687a      	ldr	r2, [r7, #4]
    1178:	601a      	str	r2, [r3, #0]
}
    117a:	bf00      	nop
    117c:	3714      	adds	r7, #20
    117e:	46bd      	mov	sp, r7
    1180:	f85d 7b04 	ldr.w	r7, [sp], #4
    1184:	4770      	bx	lr

00001186 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1186:	b480      	push	{r7}
    1188:	b085      	sub	sp, #20
    118a:	af00      	add	r7, sp, #0
    118c:	60f8      	str	r0, [r7, #12]
    118e:	460b      	mov	r3, r1
    1190:	607a      	str	r2, [r7, #4]
    1192:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1194:	7afb      	ldrb	r3, [r7, #11]
    1196:	68fa      	ldr	r2, [r7, #12]
    1198:	01db      	lsls	r3, r3, #7
    119a:	4413      	add	r3, r2
    119c:	3314      	adds	r3, #20
    119e:	687a      	ldr	r2, [r7, #4]
    11a0:	601a      	str	r2, [r3, #0]
}
    11a2:	bf00      	nop
    11a4:	3714      	adds	r7, #20
    11a6:	46bd      	mov	sp, r7
    11a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    11ac:	4770      	bx	lr

000011ae <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    11ae:	b480      	push	{r7}
    11b0:	b085      	sub	sp, #20
    11b2:	af00      	add	r7, sp, #0
    11b4:	6078      	str	r0, [r7, #4]
    11b6:	4608      	mov	r0, r1
    11b8:	4611      	mov	r1, r2
    11ba:	461a      	mov	r2, r3
    11bc:	4603      	mov	r3, r0
    11be:	70fb      	strb	r3, [r7, #3]
    11c0:	460b      	mov	r3, r1
    11c2:	70bb      	strb	r3, [r7, #2]
    11c4:	4613      	mov	r3, r2
    11c6:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    11c8:	78fa      	ldrb	r2, [r7, #3]
    11ca:	78bb      	ldrb	r3, [r7, #2]
    11cc:	6879      	ldr	r1, [r7, #4]
    11ce:	01d2      	lsls	r2, r2, #7
    11d0:	440a      	add	r2, r1
    11d2:	4413      	add	r3, r2
    11d4:	3330      	adds	r3, #48	; 0x30
    11d6:	781b      	ldrb	r3, [r3, #0]
    11d8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    11da:	7bfb      	ldrb	r3, [r7, #15]
    11dc:	f023 030f 	bic.w	r3, r3, #15
    11e0:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    11e2:	787b      	ldrb	r3, [r7, #1]
    11e4:	f003 030f 	and.w	r3, r3, #15
    11e8:	b2da      	uxtb	r2, r3
    11ea:	7bfb      	ldrb	r3, [r7, #15]
    11ec:	4313      	orrs	r3, r2
    11ee:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    11f0:	78fa      	ldrb	r2, [r7, #3]
    11f2:	78bb      	ldrb	r3, [r7, #2]
    11f4:	6879      	ldr	r1, [r7, #4]
    11f6:	01d2      	lsls	r2, r2, #7
    11f8:	440a      	add	r2, r1
    11fa:	4413      	add	r3, r2
    11fc:	3330      	adds	r3, #48	; 0x30
    11fe:	7bfa      	ldrb	r2, [r7, #15]
    1200:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1202:	bf00      	nop
    1204:	3714      	adds	r7, #20
    1206:	46bd      	mov	sp, r7
    1208:	f85d 7b04 	ldr.w	r7, [sp], #4
    120c:	4770      	bx	lr

0000120e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    120e:	b480      	push	{r7}
    1210:	b085      	sub	sp, #20
    1212:	af00      	add	r7, sp, #0
    1214:	6078      	str	r0, [r7, #4]
    1216:	4608      	mov	r0, r1
    1218:	4611      	mov	r1, r2
    121a:	461a      	mov	r2, r3
    121c:	4603      	mov	r3, r0
    121e:	70fb      	strb	r3, [r7, #3]
    1220:	460b      	mov	r3, r1
    1222:	70bb      	strb	r3, [r7, #2]
    1224:	4613      	mov	r3, r2
    1226:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1228:	78fa      	ldrb	r2, [r7, #3]
    122a:	78bb      	ldrb	r3, [r7, #2]
    122c:	6879      	ldr	r1, [r7, #4]
    122e:	01d2      	lsls	r2, r2, #7
    1230:	440a      	add	r2, r1
    1232:	4413      	add	r3, r2
    1234:	3330      	adds	r3, #48	; 0x30
    1236:	781b      	ldrb	r3, [r3, #0]
    1238:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    123a:	7bfb      	ldrb	r3, [r7, #15]
    123c:	f003 030f 	and.w	r3, r3, #15
    1240:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    1242:	787b      	ldrb	r3, [r7, #1]
    1244:	011b      	lsls	r3, r3, #4
    1246:	b2da      	uxtb	r2, r3
    1248:	7bfb      	ldrb	r3, [r7, #15]
    124a:	4313      	orrs	r3, r2
    124c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    124e:	78fa      	ldrb	r2, [r7, #3]
    1250:	78bb      	ldrb	r3, [r7, #2]
    1252:	6879      	ldr	r1, [r7, #4]
    1254:	01d2      	lsls	r2, r2, #7
    1256:	440a      	add	r2, r1
    1258:	4413      	add	r3, r2
    125a:	3330      	adds	r3, #48	; 0x30
    125c:	7bfa      	ldrb	r2, [r7, #15]
    125e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1260:	bf00      	nop
    1262:	3714      	adds	r7, #20
    1264:	46bd      	mov	sp, r7
    1266:	f85d 7b04 	ldr.w	r7, [sp], #4
    126a:	4770      	bx	lr

0000126c <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    126c:	b480      	push	{r7}
    126e:	b085      	sub	sp, #20
    1270:	af00      	add	r7, sp, #0
    1272:	6078      	str	r0, [r7, #4]
    1274:	4608      	mov	r0, r1
    1276:	4611      	mov	r1, r2
    1278:	461a      	mov	r2, r3
    127a:	4603      	mov	r3, r0
    127c:	70fb      	strb	r3, [r7, #3]
    127e:	460b      	mov	r3, r1
    1280:	70bb      	strb	r3, [r7, #2]
    1282:	4613      	mov	r3, r2
    1284:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1286:	78fa      	ldrb	r2, [r7, #3]
    1288:	78bb      	ldrb	r3, [r7, #2]
    128a:	6879      	ldr	r1, [r7, #4]
    128c:	01d2      	lsls	r2, r2, #7
    128e:	440a      	add	r2, r1
    1290:	4413      	add	r3, r2
    1292:	3340      	adds	r3, #64	; 0x40
    1294:	781b      	ldrb	r3, [r3, #0]
    1296:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1298:	7bfb      	ldrb	r3, [r7, #15]
    129a:	f023 0301 	bic.w	r3, r3, #1
    129e:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    12a0:	787a      	ldrb	r2, [r7, #1]
    12a2:	7bfb      	ldrb	r3, [r7, #15]
    12a4:	4313      	orrs	r3, r2
    12a6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12a8:	78fa      	ldrb	r2, [r7, #3]
    12aa:	78bb      	ldrb	r3, [r7, #2]
    12ac:	6879      	ldr	r1, [r7, #4]
    12ae:	01d2      	lsls	r2, r2, #7
    12b0:	440a      	add	r2, r1
    12b2:	4413      	add	r3, r2
    12b4:	3340      	adds	r3, #64	; 0x40
    12b6:	7bfa      	ldrb	r2, [r7, #15]
    12b8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    12ba:	bf00      	nop
    12bc:	3714      	adds	r7, #20
    12be:	46bd      	mov	sp, r7
    12c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    12c4:	4770      	bx	lr

000012c6 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    12c6:	b490      	push	{r4, r7}
    12c8:	b082      	sub	sp, #8
    12ca:	af00      	add	r7, sp, #0
    12cc:	6078      	str	r0, [r7, #4]
    12ce:	460b      	mov	r3, r1
    12d0:	70fb      	strb	r3, [r7, #3]
    12d2:	4613      	mov	r3, r2
    12d4:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    12d6:	78fa      	ldrb	r2, [r7, #3]
    12d8:	78bb      	ldrb	r3, [r7, #2]
    12da:	78f8      	ldrb	r0, [r7, #3]
    12dc:	78b9      	ldrb	r1, [r7, #2]
    12de:	687c      	ldr	r4, [r7, #4]
    12e0:	01c0      	lsls	r0, r0, #7
    12e2:	4420      	add	r0, r4
    12e4:	4401      	add	r1, r0
    12e6:	3140      	adds	r1, #64	; 0x40
    12e8:	7809      	ldrb	r1, [r1, #0]
    12ea:	b2c9      	uxtb	r1, r1
    12ec:	f041 0104 	orr.w	r1, r1, #4
    12f0:	b2c8      	uxtb	r0, r1
    12f2:	6879      	ldr	r1, [r7, #4]
    12f4:	01d2      	lsls	r2, r2, #7
    12f6:	440a      	add	r2, r1
    12f8:	4413      	add	r3, r2
    12fa:	3340      	adds	r3, #64	; 0x40
    12fc:	4602      	mov	r2, r0
    12fe:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1300:	bf00      	nop
    1302:	3708      	adds	r7, #8
    1304:	46bd      	mov	sp, r7
    1306:	bc90      	pop	{r4, r7}
    1308:	4770      	bx	lr

0000130a <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    130a:	b490      	push	{r4, r7}
    130c:	b082      	sub	sp, #8
    130e:	af00      	add	r7, sp, #0
    1310:	6078      	str	r0, [r7, #4]
    1312:	460b      	mov	r3, r1
    1314:	70fb      	strb	r3, [r7, #3]
    1316:	4613      	mov	r3, r2
    1318:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    131a:	78fa      	ldrb	r2, [r7, #3]
    131c:	78bb      	ldrb	r3, [r7, #2]
    131e:	78f8      	ldrb	r0, [r7, #3]
    1320:	78b9      	ldrb	r1, [r7, #2]
    1322:	687c      	ldr	r4, [r7, #4]
    1324:	01c0      	lsls	r0, r0, #7
    1326:	4420      	add	r0, r4
    1328:	4401      	add	r1, r0
    132a:	3140      	adds	r1, #64	; 0x40
    132c:	7809      	ldrb	r1, [r1, #0]
    132e:	b2c9      	uxtb	r1, r1
    1330:	f021 0104 	bic.w	r1, r1, #4
    1334:	b2c8      	uxtb	r0, r1
    1336:	6879      	ldr	r1, [r7, #4]
    1338:	01d2      	lsls	r2, r2, #7
    133a:	440a      	add	r2, r1
    133c:	4413      	add	r3, r2
    133e:	3340      	adds	r3, #64	; 0x40
    1340:	4602      	mov	r2, r0
    1342:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1344:	bf00      	nop
    1346:	3708      	adds	r7, #8
    1348:	46bd      	mov	sp, r7
    134a:	bc90      	pop	{r4, r7}
    134c:	4770      	bx	lr

0000134e <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    134e:	b480      	push	{r7}
    1350:	b085      	sub	sp, #20
    1352:	af00      	add	r7, sp, #0
    1354:	60f8      	str	r0, [r7, #12]
    1356:	460b      	mov	r3, r1
    1358:	607a      	str	r2, [r7, #4]
    135a:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    135c:	7afb      	ldrb	r3, [r7, #11]
    135e:	68fa      	ldr	r2, [r7, #12]
    1360:	01db      	lsls	r3, r3, #7
    1362:	4413      	add	r3, r2
    1364:	3328      	adds	r3, #40	; 0x28
    1366:	687a      	ldr	r2, [r7, #4]
    1368:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    136a:	bf00      	nop
    136c:	3714      	adds	r7, #20
    136e:	46bd      	mov	sp, r7
    1370:	f85d 7b04 	ldr.w	r7, [sp], #4
    1374:	4770      	bx	lr
	...

00001378 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    1378:	b580      	push	{r7, lr}
    137a:	b082      	sub	sp, #8
    137c:	af00      	add	r7, sp, #0
    137e:	4603      	mov	r3, r0
    1380:	6039      	str	r1, [r7, #0]
    1382:	71fb      	strb	r3, [r7, #7]
    1384:	4613      	mov	r3, r2
    1386:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    1388:	79bb      	ldrb	r3, [r7, #6]
    138a:	2b01      	cmp	r3, #1
    138c:	d01c      	beq.n	13c8 <_gpio_set_direction+0x50>
    138e:	2b02      	cmp	r3, #2
    1390:	d037      	beq.n	1402 <_gpio_set_direction+0x8a>
    1392:	2b00      	cmp	r3, #0
    1394:	d14e      	bne.n	1434 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1396:	79fb      	ldrb	r3, [r7, #7]
    1398:	683a      	ldr	r2, [r7, #0]
    139a:	4619      	mov	r1, r3
    139c:	482a      	ldr	r0, [pc, #168]	; (1448 <_gpio_set_direction+0xd0>)
    139e:	4b2b      	ldr	r3, [pc, #172]	; (144c <_gpio_set_direction+0xd4>)
    13a0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    13a2:	683b      	ldr	r3, [r7, #0]
    13a4:	b29b      	uxth	r3, r3
    13a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    13aa:	79fb      	ldrb	r3, [r7, #7]
    13ac:	4619      	mov	r1, r3
    13ae:	4826      	ldr	r0, [pc, #152]	; (1448 <_gpio_set_direction+0xd0>)
    13b0:	4b27      	ldr	r3, [pc, #156]	; (1450 <_gpio_set_direction+0xd8>)
    13b2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    13b4:	683b      	ldr	r3, [r7, #0]
    13b6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    13b8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    13bc:	79fb      	ldrb	r3, [r7, #7]
    13be:	4619      	mov	r1, r3
    13c0:	4821      	ldr	r0, [pc, #132]	; (1448 <_gpio_set_direction+0xd0>)
    13c2:	4b23      	ldr	r3, [pc, #140]	; (1450 <_gpio_set_direction+0xd8>)
    13c4:	4798      	blx	r3
		break;
    13c6:	e03a      	b.n	143e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    13c8:	79fb      	ldrb	r3, [r7, #7]
    13ca:	683a      	ldr	r2, [r7, #0]
    13cc:	4619      	mov	r1, r3
    13ce:	481e      	ldr	r0, [pc, #120]	; (1448 <_gpio_set_direction+0xd0>)
    13d0:	4b1e      	ldr	r3, [pc, #120]	; (144c <_gpio_set_direction+0xd4>)
    13d2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    13d4:	683b      	ldr	r3, [r7, #0]
    13d6:	b29b      	uxth	r3, r3
    13d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    13dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    13e0:	79f9      	ldrb	r1, [r7, #7]
    13e2:	461a      	mov	r2, r3
    13e4:	4818      	ldr	r0, [pc, #96]	; (1448 <_gpio_set_direction+0xd0>)
    13e6:	4b1a      	ldr	r3, [pc, #104]	; (1450 <_gpio_set_direction+0xd8>)
    13e8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    13ea:	683b      	ldr	r3, [r7, #0]
    13ec:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    13ee:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    13f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    13f6:	79f9      	ldrb	r1, [r7, #7]
    13f8:	461a      	mov	r2, r3
    13fa:	4813      	ldr	r0, [pc, #76]	; (1448 <_gpio_set_direction+0xd0>)
    13fc:	4b14      	ldr	r3, [pc, #80]	; (1450 <_gpio_set_direction+0xd8>)
    13fe:	4798      	blx	r3
		break;
    1400:	e01d      	b.n	143e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    1402:	79fb      	ldrb	r3, [r7, #7]
    1404:	683a      	ldr	r2, [r7, #0]
    1406:	4619      	mov	r1, r3
    1408:	480f      	ldr	r0, [pc, #60]	; (1448 <_gpio_set_direction+0xd0>)
    140a:	4b12      	ldr	r3, [pc, #72]	; (1454 <_gpio_set_direction+0xdc>)
    140c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    140e:	683b      	ldr	r3, [r7, #0]
    1410:	b29b      	uxth	r3, r3
    1412:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1416:	79fb      	ldrb	r3, [r7, #7]
    1418:	4619      	mov	r1, r3
    141a:	480b      	ldr	r0, [pc, #44]	; (1448 <_gpio_set_direction+0xd0>)
    141c:	4b0c      	ldr	r3, [pc, #48]	; (1450 <_gpio_set_direction+0xd8>)
    141e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1420:	683b      	ldr	r3, [r7, #0]
    1422:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1424:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1428:	79fb      	ldrb	r3, [r7, #7]
    142a:	4619      	mov	r1, r3
    142c:	4806      	ldr	r0, [pc, #24]	; (1448 <_gpio_set_direction+0xd0>)
    142e:	4b08      	ldr	r3, [pc, #32]	; (1450 <_gpio_set_direction+0xd8>)
    1430:	4798      	blx	r3
		break;
    1432:	e004      	b.n	143e <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    1434:	2246      	movs	r2, #70	; 0x46
    1436:	4908      	ldr	r1, [pc, #32]	; (1458 <_gpio_set_direction+0xe0>)
    1438:	2000      	movs	r0, #0
    143a:	4b08      	ldr	r3, [pc, #32]	; (145c <_gpio_set_direction+0xe4>)
    143c:	4798      	blx	r3
	}
}
    143e:	bf00      	nop
    1440:	3708      	adds	r7, #8
    1442:	46bd      	mov	sp, r7
    1444:	bd80      	pop	{r7, pc}
    1446:	bf00      	nop
    1448:	41008000 	.word	0x41008000
    144c:	00001137 	.word	0x00001137
    1450:	0000134f 	.word	0x0000134f
    1454:	0000110f 	.word	0x0000110f
    1458:	0000ff34 	.word	0x0000ff34
    145c:	00003d61 	.word	0x00003d61

00001460 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1460:	b580      	push	{r7, lr}
    1462:	b082      	sub	sp, #8
    1464:	af00      	add	r7, sp, #0
    1466:	4603      	mov	r3, r0
    1468:	6039      	str	r1, [r7, #0]
    146a:	71fb      	strb	r3, [r7, #7]
    146c:	4613      	mov	r3, r2
    146e:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1470:	79bb      	ldrb	r3, [r7, #6]
    1472:	2b00      	cmp	r3, #0
    1474:	d006      	beq.n	1484 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    1476:	79fb      	ldrb	r3, [r7, #7]
    1478:	683a      	ldr	r2, [r7, #0]
    147a:	4619      	mov	r1, r3
    147c:	4806      	ldr	r0, [pc, #24]	; (1498 <_gpio_set_level+0x38>)
    147e:	4b07      	ldr	r3, [pc, #28]	; (149c <_gpio_set_level+0x3c>)
    1480:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    1482:	e005      	b.n	1490 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1484:	79fb      	ldrb	r3, [r7, #7]
    1486:	683a      	ldr	r2, [r7, #0]
    1488:	4619      	mov	r1, r3
    148a:	4803      	ldr	r0, [pc, #12]	; (1498 <_gpio_set_level+0x38>)
    148c:	4b04      	ldr	r3, [pc, #16]	; (14a0 <_gpio_set_level+0x40>)
    148e:	4798      	blx	r3
}
    1490:	bf00      	nop
    1492:	3708      	adds	r7, #8
    1494:	46bd      	mov	sp, r7
    1496:	bd80      	pop	{r7, pc}
    1498:	41008000 	.word	0x41008000
    149c:	0000115f 	.word	0x0000115f
    14a0:	00001187 	.word	0x00001187

000014a4 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    14a4:	b580      	push	{r7, lr}
    14a6:	b082      	sub	sp, #8
    14a8:	af00      	add	r7, sp, #0
    14aa:	4603      	mov	r3, r0
    14ac:	71fb      	strb	r3, [r7, #7]
    14ae:	460b      	mov	r3, r1
    14b0:	71bb      	strb	r3, [r7, #6]
    14b2:	4613      	mov	r3, r2
    14b4:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    14b6:	797b      	ldrb	r3, [r7, #5]
    14b8:	2b01      	cmp	r3, #1
    14ba:	d00a      	beq.n	14d2 <_gpio_set_pin_pull_mode+0x2e>
    14bc:	2b02      	cmp	r3, #2
    14be:	d01f      	beq.n	1500 <_gpio_set_pin_pull_mode+0x5c>
    14c0:	2b00      	cmp	r3, #0
    14c2:	d134      	bne.n	152e <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    14c4:	79ba      	ldrb	r2, [r7, #6]
    14c6:	79fb      	ldrb	r3, [r7, #7]
    14c8:	4619      	mov	r1, r3
    14ca:	481e      	ldr	r0, [pc, #120]	; (1544 <_gpio_set_pin_pull_mode+0xa0>)
    14cc:	4b1e      	ldr	r3, [pc, #120]	; (1548 <_gpio_set_pin_pull_mode+0xa4>)
    14ce:	4798      	blx	r3
		break;
    14d0:	e033      	b.n	153a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    14d2:	79bb      	ldrb	r3, [r7, #6]
    14d4:	2201      	movs	r2, #1
    14d6:	409a      	lsls	r2, r3
    14d8:	79fb      	ldrb	r3, [r7, #7]
    14da:	4619      	mov	r1, r3
    14dc:	4819      	ldr	r0, [pc, #100]	; (1544 <_gpio_set_pin_pull_mode+0xa0>)
    14de:	4b1b      	ldr	r3, [pc, #108]	; (154c <_gpio_set_pin_pull_mode+0xa8>)
    14e0:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    14e2:	79ba      	ldrb	r2, [r7, #6]
    14e4:	79fb      	ldrb	r3, [r7, #7]
    14e6:	4619      	mov	r1, r3
    14e8:	4816      	ldr	r0, [pc, #88]	; (1544 <_gpio_set_pin_pull_mode+0xa0>)
    14ea:	4b19      	ldr	r3, [pc, #100]	; (1550 <_gpio_set_pin_pull_mode+0xac>)
    14ec:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    14ee:	79bb      	ldrb	r3, [r7, #6]
    14f0:	2201      	movs	r2, #1
    14f2:	409a      	lsls	r2, r3
    14f4:	79fb      	ldrb	r3, [r7, #7]
    14f6:	4619      	mov	r1, r3
    14f8:	4812      	ldr	r0, [pc, #72]	; (1544 <_gpio_set_pin_pull_mode+0xa0>)
    14fa:	4b16      	ldr	r3, [pc, #88]	; (1554 <_gpio_set_pin_pull_mode+0xb0>)
    14fc:	4798      	blx	r3
		break;
    14fe:	e01c      	b.n	153a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1500:	79bb      	ldrb	r3, [r7, #6]
    1502:	2201      	movs	r2, #1
    1504:	409a      	lsls	r2, r3
    1506:	79fb      	ldrb	r3, [r7, #7]
    1508:	4619      	mov	r1, r3
    150a:	480e      	ldr	r0, [pc, #56]	; (1544 <_gpio_set_pin_pull_mode+0xa0>)
    150c:	4b0f      	ldr	r3, [pc, #60]	; (154c <_gpio_set_pin_pull_mode+0xa8>)
    150e:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1510:	79ba      	ldrb	r2, [r7, #6]
    1512:	79fb      	ldrb	r3, [r7, #7]
    1514:	4619      	mov	r1, r3
    1516:	480b      	ldr	r0, [pc, #44]	; (1544 <_gpio_set_pin_pull_mode+0xa0>)
    1518:	4b0d      	ldr	r3, [pc, #52]	; (1550 <_gpio_set_pin_pull_mode+0xac>)
    151a:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    151c:	79bb      	ldrb	r3, [r7, #6]
    151e:	2201      	movs	r2, #1
    1520:	409a      	lsls	r2, r3
    1522:	79fb      	ldrb	r3, [r7, #7]
    1524:	4619      	mov	r1, r3
    1526:	4807      	ldr	r0, [pc, #28]	; (1544 <_gpio_set_pin_pull_mode+0xa0>)
    1528:	4b0b      	ldr	r3, [pc, #44]	; (1558 <_gpio_set_pin_pull_mode+0xb4>)
    152a:	4798      	blx	r3
		break;
    152c:	e005      	b.n	153a <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    152e:	2289      	movs	r2, #137	; 0x89
    1530:	490a      	ldr	r1, [pc, #40]	; (155c <_gpio_set_pin_pull_mode+0xb8>)
    1532:	2000      	movs	r0, #0
    1534:	4b0a      	ldr	r3, [pc, #40]	; (1560 <_gpio_set_pin_pull_mode+0xbc>)
    1536:	4798      	blx	r3
		break;
    1538:	bf00      	nop
	}
}
    153a:	bf00      	nop
    153c:	3708      	adds	r7, #8
    153e:	46bd      	mov	sp, r7
    1540:	bd80      	pop	{r7, pc}
    1542:	bf00      	nop
    1544:	41008000 	.word	0x41008000
    1548:	0000130b 	.word	0x0000130b
    154c:	00001137 	.word	0x00001137
    1550:	000012c7 	.word	0x000012c7
    1554:	0000115f 	.word	0x0000115f
    1558:	00001187 	.word	0x00001187
    155c:	0000ff34 	.word	0x0000ff34
    1560:	00003d61 	.word	0x00003d61

00001564 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    1564:	b590      	push	{r4, r7, lr}
    1566:	b085      	sub	sp, #20
    1568:	af00      	add	r7, sp, #0
    156a:	6078      	str	r0, [r7, #4]
    156c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    156e:	687b      	ldr	r3, [r7, #4]
    1570:	095b      	lsrs	r3, r3, #5
    1572:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    1574:	687b      	ldr	r3, [r7, #4]
    1576:	b2db      	uxtb	r3, r3
    1578:	f003 031f 	and.w	r3, r3, #31
    157c:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    157e:	683b      	ldr	r3, [r7, #0]
    1580:	f1b3 3fff 	cmp.w	r3, #4294967295
    1584:	d106      	bne.n	1594 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    1586:	7bba      	ldrb	r2, [r7, #14]
    1588:	7bf9      	ldrb	r1, [r7, #15]
    158a:	2300      	movs	r3, #0
    158c:	4812      	ldr	r0, [pc, #72]	; (15d8 <_gpio_set_pin_function+0x74>)
    158e:	4c13      	ldr	r4, [pc, #76]	; (15dc <_gpio_set_pin_function+0x78>)
    1590:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    1592:	e01d      	b.n	15d0 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    1594:	7bba      	ldrb	r2, [r7, #14]
    1596:	7bf9      	ldrb	r1, [r7, #15]
    1598:	2301      	movs	r3, #1
    159a:	480f      	ldr	r0, [pc, #60]	; (15d8 <_gpio_set_pin_function+0x74>)
    159c:	4c0f      	ldr	r4, [pc, #60]	; (15dc <_gpio_set_pin_function+0x78>)
    159e:	47a0      	blx	r4
		if (pin & 1) {
    15a0:	7bbb      	ldrb	r3, [r7, #14]
    15a2:	f003 0301 	and.w	r3, r3, #1
    15a6:	2b00      	cmp	r3, #0
    15a8:	d009      	beq.n	15be <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    15aa:	7bbb      	ldrb	r3, [r7, #14]
    15ac:	085b      	lsrs	r3, r3, #1
    15ae:	b2da      	uxtb	r2, r3
    15b0:	683b      	ldr	r3, [r7, #0]
    15b2:	b2db      	uxtb	r3, r3
    15b4:	7bf9      	ldrb	r1, [r7, #15]
    15b6:	4808      	ldr	r0, [pc, #32]	; (15d8 <_gpio_set_pin_function+0x74>)
    15b8:	4c09      	ldr	r4, [pc, #36]	; (15e0 <_gpio_set_pin_function+0x7c>)
    15ba:	47a0      	blx	r4
}
    15bc:	e008      	b.n	15d0 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    15be:	7bbb      	ldrb	r3, [r7, #14]
    15c0:	085b      	lsrs	r3, r3, #1
    15c2:	b2da      	uxtb	r2, r3
    15c4:	683b      	ldr	r3, [r7, #0]
    15c6:	b2db      	uxtb	r3, r3
    15c8:	7bf9      	ldrb	r1, [r7, #15]
    15ca:	4803      	ldr	r0, [pc, #12]	; (15d8 <_gpio_set_pin_function+0x74>)
    15cc:	4c05      	ldr	r4, [pc, #20]	; (15e4 <_gpio_set_pin_function+0x80>)
    15ce:	47a0      	blx	r4
}
    15d0:	bf00      	nop
    15d2:	3714      	adds	r7, #20
    15d4:	46bd      	mov	sp, r7
    15d6:	bd90      	pop	{r4, r7, pc}
    15d8:	41008000 	.word	0x41008000
    15dc:	0000126d 	.word	0x0000126d
    15e0:	0000120f 	.word	0x0000120f
    15e4:	000011af 	.word	0x000011af

000015e8 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    15e8:	b580      	push	{r7, lr}
    15ea:	b082      	sub	sp, #8
    15ec:	af00      	add	r7, sp, #0
    15ee:	4603      	mov	r3, r0
    15f0:	460a      	mov	r2, r1
    15f2:	71fb      	strb	r3, [r7, #7]
    15f4:	4613      	mov	r3, r2
    15f6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    15f8:	79fb      	ldrb	r3, [r7, #7]
    15fa:	095b      	lsrs	r3, r3, #5
    15fc:	b2d8      	uxtb	r0, r3
    15fe:	79fb      	ldrb	r3, [r7, #7]
    1600:	f003 031f 	and.w	r3, r3, #31
    1604:	b2db      	uxtb	r3, r3
    1606:	79ba      	ldrb	r2, [r7, #6]
    1608:	4619      	mov	r1, r3
    160a:	4b03      	ldr	r3, [pc, #12]	; (1618 <gpio_set_pin_pull_mode+0x30>)
    160c:	4798      	blx	r3
}
    160e:	bf00      	nop
    1610:	3708      	adds	r7, #8
    1612:	46bd      	mov	sp, r7
    1614:	bd80      	pop	{r7, pc}
    1616:	bf00      	nop
    1618:	000014a5 	.word	0x000014a5

0000161c <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    161c:	b580      	push	{r7, lr}
    161e:	b082      	sub	sp, #8
    1620:	af00      	add	r7, sp, #0
    1622:	6078      	str	r0, [r7, #4]
    1624:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1626:	6839      	ldr	r1, [r7, #0]
    1628:	6878      	ldr	r0, [r7, #4]
    162a:	4b03      	ldr	r3, [pc, #12]	; (1638 <gpio_set_pin_function+0x1c>)
    162c:	4798      	blx	r3
}
    162e:	bf00      	nop
    1630:	3708      	adds	r7, #8
    1632:	46bd      	mov	sp, r7
    1634:	bd80      	pop	{r7, pc}
    1636:	bf00      	nop
    1638:	00001565 	.word	0x00001565

0000163c <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    163c:	b580      	push	{r7, lr}
    163e:	b082      	sub	sp, #8
    1640:	af00      	add	r7, sp, #0
    1642:	4603      	mov	r3, r0
    1644:	460a      	mov	r2, r1
    1646:	71fb      	strb	r3, [r7, #7]
    1648:	4613      	mov	r3, r2
    164a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    164c:	79fb      	ldrb	r3, [r7, #7]
    164e:	095b      	lsrs	r3, r3, #5
    1650:	b2d8      	uxtb	r0, r3
    1652:	79fb      	ldrb	r3, [r7, #7]
    1654:	f003 031f 	and.w	r3, r3, #31
    1658:	2201      	movs	r2, #1
    165a:	fa02 f303 	lsl.w	r3, r2, r3
    165e:	79ba      	ldrb	r2, [r7, #6]
    1660:	4619      	mov	r1, r3
    1662:	4b03      	ldr	r3, [pc, #12]	; (1670 <gpio_set_pin_direction+0x34>)
    1664:	4798      	blx	r3
}
    1666:	bf00      	nop
    1668:	3708      	adds	r7, #8
    166a:	46bd      	mov	sp, r7
    166c:	bd80      	pop	{r7, pc}
    166e:	bf00      	nop
    1670:	00001379 	.word	0x00001379

00001674 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1674:	b580      	push	{r7, lr}
    1676:	b082      	sub	sp, #8
    1678:	af00      	add	r7, sp, #0
    167a:	4603      	mov	r3, r0
    167c:	460a      	mov	r2, r1
    167e:	71fb      	strb	r3, [r7, #7]
    1680:	4613      	mov	r3, r2
    1682:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1684:	79fb      	ldrb	r3, [r7, #7]
    1686:	095b      	lsrs	r3, r3, #5
    1688:	b2d8      	uxtb	r0, r3
    168a:	79fb      	ldrb	r3, [r7, #7]
    168c:	f003 031f 	and.w	r3, r3, #31
    1690:	2201      	movs	r2, #1
    1692:	fa02 f303 	lsl.w	r3, r2, r3
    1696:	79ba      	ldrb	r2, [r7, #6]
    1698:	4619      	mov	r1, r3
    169a:	4b03      	ldr	r3, [pc, #12]	; (16a8 <gpio_set_pin_level+0x34>)
    169c:	4798      	blx	r3
}
    169e:	bf00      	nop
    16a0:	3708      	adds	r7, #8
    16a2:	46bd      	mov	sp, r7
    16a4:	bd80      	pop	{r7, pc}
    16a6:	bf00      	nop
    16a8:	00001461 	.word	0x00001461

000016ac <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    16ac:	b580      	push	{r7, lr}
    16ae:	af00      	add	r7, sp, #0
	_init_chip();
    16b0:	4b01      	ldr	r3, [pc, #4]	; (16b8 <init_mcu+0xc>)
    16b2:	4798      	blx	r3
}
    16b4:	bf00      	nop
    16b6:	bd80      	pop	{r7, pc}
    16b8:	0000496d 	.word	0x0000496d

000016bc <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    16bc:	b580      	push	{r7, lr}
    16be:	b082      	sub	sp, #8
    16c0:	af00      	add	r7, sp, #0
    16c2:	6078      	str	r0, [r7, #4]
    16c4:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    16c6:	687b      	ldr	r3, [r7, #4]
    16c8:	2b00      	cmp	r3, #0
    16ca:	d004      	beq.n	16d6 <wdt_init+0x1a>
    16cc:	683b      	ldr	r3, [r7, #0]
    16ce:	2b00      	cmp	r3, #0
    16d0:	d001      	beq.n	16d6 <wdt_init+0x1a>
    16d2:	2301      	movs	r3, #1
    16d4:	e000      	b.n	16d8 <wdt_init+0x1c>
    16d6:	2300      	movs	r3, #0
    16d8:	f003 0301 	and.w	r3, r3, #1
    16dc:	b2db      	uxtb	r3, r3
    16de:	2248      	movs	r2, #72	; 0x48
    16e0:	4907      	ldr	r1, [pc, #28]	; (1700 <wdt_init+0x44>)
    16e2:	4618      	mov	r0, r3
    16e4:	4b07      	ldr	r3, [pc, #28]	; (1704 <wdt_init+0x48>)
    16e6:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    16e8:	687b      	ldr	r3, [r7, #4]
    16ea:	683a      	ldr	r2, [r7, #0]
    16ec:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    16ee:	687b      	ldr	r3, [r7, #4]
    16f0:	4618      	mov	r0, r3
    16f2:	4b05      	ldr	r3, [pc, #20]	; (1708 <wdt_init+0x4c>)
    16f4:	4798      	blx	r3
    16f6:	4603      	mov	r3, r0
}
    16f8:	4618      	mov	r0, r3
    16fa:	3708      	adds	r7, #8
    16fc:	46bd      	mov	sp, r7
    16fe:	bd80      	pop	{r7, pc}
    1700:	0000ff50 	.word	0x0000ff50
    1704:	00003d61 	.word	0x00003d61
    1708:	0000b8e5 	.word	0x0000b8e5

0000170c <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    170c:	b580      	push	{r7, lr}
    170e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    1710:	4804      	ldr	r0, [pc, #16]	; (1724 <CRC_CALC_init+0x18>)
    1712:	4b05      	ldr	r3, [pc, #20]	; (1728 <CRC_CALC_init+0x1c>)
    1714:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    1716:	4905      	ldr	r1, [pc, #20]	; (172c <CRC_CALC_init+0x20>)
    1718:	4805      	ldr	r0, [pc, #20]	; (1730 <CRC_CALC_init+0x24>)
    171a:	4b06      	ldr	r3, [pc, #24]	; (1734 <CRC_CALC_init+0x28>)
    171c:	4798      	blx	r3
}
    171e:	bf00      	nop
    1720:	bd80      	pop	{r7, pc}
    1722:	bf00      	nop
    1724:	40000800 	.word	0x40000800
    1728:	00000f4f 	.word	0x00000f4f
    172c:	41002000 	.word	0x41002000
    1730:	200016f4 	.word	0x200016f4
    1734:	00002481 	.word	0x00002481

00001738 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1738:	b580      	push	{r7, lr}
    173a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    173c:	2244      	movs	r2, #68	; 0x44
    173e:	2104      	movs	r1, #4
    1740:	4838      	ldr	r0, [pc, #224]	; (1824 <EXTERNAL_IRQ_0_init+0xec>)
    1742:	4b39      	ldr	r3, [pc, #228]	; (1828 <EXTERNAL_IRQ_0_init+0xf0>)
    1744:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    1746:	4839      	ldr	r0, [pc, #228]	; (182c <EXTERNAL_IRQ_0_init+0xf4>)
    1748:	4b39      	ldr	r3, [pc, #228]	; (1830 <EXTERNAL_IRQ_0_init+0xf8>)
    174a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    174c:	2101      	movs	r1, #1
    174e:	2040      	movs	r0, #64	; 0x40
    1750:	4b38      	ldr	r3, [pc, #224]	; (1834 <EXTERNAL_IRQ_0_init+0xfc>)
    1752:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1754:	2100      	movs	r1, #0
    1756:	2040      	movs	r0, #64	; 0x40
    1758:	4b37      	ldr	r3, [pc, #220]	; (1838 <EXTERNAL_IRQ_0_init+0x100>)
    175a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    175c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    1760:	2040      	movs	r0, #64	; 0x40
    1762:	4b36      	ldr	r3, [pc, #216]	; (183c <EXTERNAL_IRQ_0_init+0x104>)
    1764:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    1766:	2101      	movs	r1, #1
    1768:	2003      	movs	r0, #3
    176a:	4b32      	ldr	r3, [pc, #200]	; (1834 <EXTERNAL_IRQ_0_init+0xfc>)
    176c:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    176e:	2102      	movs	r1, #2
    1770:	2003      	movs	r0, #3
    1772:	4b31      	ldr	r3, [pc, #196]	; (1838 <EXTERNAL_IRQ_0_init+0x100>)
    1774:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    1776:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    177a:	2003      	movs	r0, #3
    177c:	4b2f      	ldr	r3, [pc, #188]	; (183c <EXTERNAL_IRQ_0_init+0x104>)
    177e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    1780:	2101      	movs	r1, #1
    1782:	2004      	movs	r0, #4
    1784:	4b2b      	ldr	r3, [pc, #172]	; (1834 <EXTERNAL_IRQ_0_init+0xfc>)
    1786:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    1788:	2102      	movs	r1, #2
    178a:	2004      	movs	r0, #4
    178c:	4b2a      	ldr	r3, [pc, #168]	; (1838 <EXTERNAL_IRQ_0_init+0x100>)
    178e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    1790:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1794:	2004      	movs	r0, #4
    1796:	4b29      	ldr	r3, [pc, #164]	; (183c <EXTERNAL_IRQ_0_init+0x104>)
    1798:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    179a:	2101      	movs	r1, #1
    179c:	2005      	movs	r0, #5
    179e:	4b25      	ldr	r3, [pc, #148]	; (1834 <EXTERNAL_IRQ_0_init+0xfc>)
    17a0:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    17a2:	2102      	movs	r1, #2
    17a4:	2005      	movs	r0, #5
    17a6:	4b24      	ldr	r3, [pc, #144]	; (1838 <EXTERNAL_IRQ_0_init+0x100>)
    17a8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    17aa:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    17ae:	2005      	movs	r0, #5
    17b0:	4b22      	ldr	r3, [pc, #136]	; (183c <EXTERNAL_IRQ_0_init+0x104>)
    17b2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    17b4:	2101      	movs	r1, #1
    17b6:	2056      	movs	r0, #86	; 0x56
    17b8:	4b1e      	ldr	r3, [pc, #120]	; (1834 <EXTERNAL_IRQ_0_init+0xfc>)
    17ba:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    17bc:	2102      	movs	r1, #2
    17be:	2056      	movs	r0, #86	; 0x56
    17c0:	4b1d      	ldr	r3, [pc, #116]	; (1838 <EXTERNAL_IRQ_0_init+0x100>)
    17c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    17c4:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    17c8:	2056      	movs	r0, #86	; 0x56
    17ca:	4b1c      	ldr	r3, [pc, #112]	; (183c <EXTERNAL_IRQ_0_init+0x104>)
    17cc:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    17ce:	2101      	movs	r1, #1
    17d0:	2057      	movs	r0, #87	; 0x57
    17d2:	4b18      	ldr	r3, [pc, #96]	; (1834 <EXTERNAL_IRQ_0_init+0xfc>)
    17d4:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    17d6:	2102      	movs	r1, #2
    17d8:	2057      	movs	r0, #87	; 0x57
    17da:	4b17      	ldr	r3, [pc, #92]	; (1838 <EXTERNAL_IRQ_0_init+0x100>)
    17dc:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    17de:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    17e2:	2057      	movs	r0, #87	; 0x57
    17e4:	4b15      	ldr	r3, [pc, #84]	; (183c <EXTERNAL_IRQ_0_init+0x104>)
    17e6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    17e8:	2101      	movs	r1, #1
    17ea:	2028      	movs	r0, #40	; 0x28
    17ec:	4b11      	ldr	r3, [pc, #68]	; (1834 <EXTERNAL_IRQ_0_init+0xfc>)
    17ee:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    17f0:	2100      	movs	r1, #0
    17f2:	2028      	movs	r0, #40	; 0x28
    17f4:	4b10      	ldr	r3, [pc, #64]	; (1838 <EXTERNAL_IRQ_0_init+0x100>)
    17f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    17f8:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    17fc:	2028      	movs	r0, #40	; 0x28
    17fe:	4b0f      	ldr	r3, [pc, #60]	; (183c <EXTERNAL_IRQ_0_init+0x104>)
    1800:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    1802:	2101      	movs	r1, #1
    1804:	2029      	movs	r0, #41	; 0x29
    1806:	4b0b      	ldr	r3, [pc, #44]	; (1834 <EXTERNAL_IRQ_0_init+0xfc>)
    1808:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    180a:	2100      	movs	r1, #0
    180c:	2029      	movs	r0, #41	; 0x29
    180e:	4b0a      	ldr	r3, [pc, #40]	; (1838 <EXTERNAL_IRQ_0_init+0x100>)
    1810:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    1812:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1816:	2029      	movs	r0, #41	; 0x29
    1818:	4b08      	ldr	r3, [pc, #32]	; (183c <EXTERNAL_IRQ_0_init+0x104>)
    181a:	4798      	blx	r3

	ext_irq_init();
    181c:	4b08      	ldr	r3, [pc, #32]	; (1840 <EXTERNAL_IRQ_0_init+0x108>)
    181e:	4798      	blx	r3
}
    1820:	bf00      	nop
    1822:	bd80      	pop	{r7, pc}
    1824:	40001c00 	.word	0x40001c00
    1828:	00000de9 	.word	0x00000de9
    182c:	40000800 	.word	0x40000800
    1830:	00000ecf 	.word	0x00000ecf
    1834:	0000163d 	.word	0x0000163d
    1838:	000015e9 	.word	0x000015e9
    183c:	0000161d 	.word	0x0000161d
    1840:	00002549 	.word	0x00002549

00001844 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1844:	b580      	push	{r7, lr}
    1846:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1848:	2244      	movs	r2, #68	; 0x44
    184a:	210b      	movs	r1, #11
    184c:	4807      	ldr	r0, [pc, #28]	; (186c <EVENT_SYSTEM_0_init+0x28>)
    184e:	4b08      	ldr	r3, [pc, #32]	; (1870 <EVENT_SYSTEM_0_init+0x2c>)
    1850:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1852:	2244      	movs	r2, #68	; 0x44
    1854:	210c      	movs	r1, #12
    1856:	4805      	ldr	r0, [pc, #20]	; (186c <EVENT_SYSTEM_0_init+0x28>)
    1858:	4b05      	ldr	r3, [pc, #20]	; (1870 <EVENT_SYSTEM_0_init+0x2c>)
    185a:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    185c:	4805      	ldr	r0, [pc, #20]	; (1874 <EVENT_SYSTEM_0_init+0x30>)
    185e:	4b06      	ldr	r3, [pc, #24]	; (1878 <EVENT_SYSTEM_0_init+0x34>)
    1860:	4798      	blx	r3

	event_system_init();
    1862:	4b06      	ldr	r3, [pc, #24]	; (187c <EVENT_SYSTEM_0_init+0x38>)
    1864:	4798      	blx	r3
}
    1866:	bf00      	nop
    1868:	bd80      	pop	{r7, pc}
    186a:	bf00      	nop
    186c:	40001c00 	.word	0x40001c00
    1870:	00000de9 	.word	0x00000de9
    1874:	40000800 	.word	0x40000800
    1878:	00000f6f 	.word	0x00000f6f
    187c:	00002535 	.word	0x00002535

00001880 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    1880:	b580      	push	{r7, lr}
    1882:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    1884:	2101      	movs	r1, #1
    1886:	202b      	movs	r0, #43	; 0x2b
    1888:	4b2b      	ldr	r3, [pc, #172]	; (1938 <QSPI_N25Q256_PORT_init+0xb8>)
    188a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    188c:	2100      	movs	r1, #0
    188e:	202b      	movs	r0, #43	; 0x2b
    1890:	4b2a      	ldr	r3, [pc, #168]	; (193c <QSPI_N25Q256_PORT_init+0xbc>)
    1892:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    1894:	492a      	ldr	r1, [pc, #168]	; (1940 <QSPI_N25Q256_PORT_init+0xc0>)
    1896:	202b      	movs	r0, #43	; 0x2b
    1898:	4b2a      	ldr	r3, [pc, #168]	; (1944 <QSPI_N25Q256_PORT_init+0xc4>)
    189a:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    189c:	2102      	movs	r1, #2
    189e:	2008      	movs	r0, #8
    18a0:	4b25      	ldr	r3, [pc, #148]	; (1938 <QSPI_N25Q256_PORT_init+0xb8>)
    18a2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    18a4:	2100      	movs	r1, #0
    18a6:	2008      	movs	r0, #8
    18a8:	4b27      	ldr	r3, [pc, #156]	; (1948 <QSPI_N25Q256_PORT_init+0xc8>)
    18aa:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    18ac:	2100      	movs	r1, #0
    18ae:	2008      	movs	r0, #8
    18b0:	4b22      	ldr	r3, [pc, #136]	; (193c <QSPI_N25Q256_PORT_init+0xbc>)
    18b2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    18b4:	4925      	ldr	r1, [pc, #148]	; (194c <QSPI_N25Q256_PORT_init+0xcc>)
    18b6:	2008      	movs	r0, #8
    18b8:	4b22      	ldr	r3, [pc, #136]	; (1944 <QSPI_N25Q256_PORT_init+0xc4>)
    18ba:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    18bc:	2102      	movs	r1, #2
    18be:	2009      	movs	r0, #9
    18c0:	4b1d      	ldr	r3, [pc, #116]	; (1938 <QSPI_N25Q256_PORT_init+0xb8>)
    18c2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    18c4:	2100      	movs	r1, #0
    18c6:	2009      	movs	r0, #9
    18c8:	4b1f      	ldr	r3, [pc, #124]	; (1948 <QSPI_N25Q256_PORT_init+0xc8>)
    18ca:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    18cc:	2100      	movs	r1, #0
    18ce:	2009      	movs	r0, #9
    18d0:	4b1a      	ldr	r3, [pc, #104]	; (193c <QSPI_N25Q256_PORT_init+0xbc>)
    18d2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    18d4:	491e      	ldr	r1, [pc, #120]	; (1950 <QSPI_N25Q256_PORT_init+0xd0>)
    18d6:	2009      	movs	r0, #9
    18d8:	4b1a      	ldr	r3, [pc, #104]	; (1944 <QSPI_N25Q256_PORT_init+0xc4>)
    18da:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    18dc:	2102      	movs	r1, #2
    18de:	200a      	movs	r0, #10
    18e0:	4b15      	ldr	r3, [pc, #84]	; (1938 <QSPI_N25Q256_PORT_init+0xb8>)
    18e2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    18e4:	2100      	movs	r1, #0
    18e6:	200a      	movs	r0, #10
    18e8:	4b17      	ldr	r3, [pc, #92]	; (1948 <QSPI_N25Q256_PORT_init+0xc8>)
    18ea:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    18ec:	2100      	movs	r1, #0
    18ee:	200a      	movs	r0, #10
    18f0:	4b12      	ldr	r3, [pc, #72]	; (193c <QSPI_N25Q256_PORT_init+0xbc>)
    18f2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    18f4:	4917      	ldr	r1, [pc, #92]	; (1954 <QSPI_N25Q256_PORT_init+0xd4>)
    18f6:	200a      	movs	r0, #10
    18f8:	4b12      	ldr	r3, [pc, #72]	; (1944 <QSPI_N25Q256_PORT_init+0xc4>)
    18fa:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    18fc:	2102      	movs	r1, #2
    18fe:	200b      	movs	r0, #11
    1900:	4b0d      	ldr	r3, [pc, #52]	; (1938 <QSPI_N25Q256_PORT_init+0xb8>)
    1902:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1904:	2100      	movs	r1, #0
    1906:	200b      	movs	r0, #11
    1908:	4b0f      	ldr	r3, [pc, #60]	; (1948 <QSPI_N25Q256_PORT_init+0xc8>)
    190a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    190c:	2100      	movs	r1, #0
    190e:	200b      	movs	r0, #11
    1910:	4b0a      	ldr	r3, [pc, #40]	; (193c <QSPI_N25Q256_PORT_init+0xbc>)
    1912:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1914:	4910      	ldr	r1, [pc, #64]	; (1958 <QSPI_N25Q256_PORT_init+0xd8>)
    1916:	200b      	movs	r0, #11
    1918:	4b0a      	ldr	r3, [pc, #40]	; (1944 <QSPI_N25Q256_PORT_init+0xc4>)
    191a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    191c:	2101      	movs	r1, #1
    191e:	202a      	movs	r0, #42	; 0x2a
    1920:	4b05      	ldr	r3, [pc, #20]	; (1938 <QSPI_N25Q256_PORT_init+0xb8>)
    1922:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1924:	2100      	movs	r1, #0
    1926:	202a      	movs	r0, #42	; 0x2a
    1928:	4b04      	ldr	r3, [pc, #16]	; (193c <QSPI_N25Q256_PORT_init+0xbc>)
    192a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    192c:	490b      	ldr	r1, [pc, #44]	; (195c <QSPI_N25Q256_PORT_init+0xdc>)
    192e:	202a      	movs	r0, #42	; 0x2a
    1930:	4b04      	ldr	r3, [pc, #16]	; (1944 <QSPI_N25Q256_PORT_init+0xc4>)
    1932:	4798      	blx	r3
}
    1934:	bf00      	nop
    1936:	bd80      	pop	{r7, pc}
    1938:	0000163d 	.word	0x0000163d
    193c:	000015e9 	.word	0x000015e9
    1940:	002b0007 	.word	0x002b0007
    1944:	0000161d 	.word	0x0000161d
    1948:	00001675 	.word	0x00001675
    194c:	00080007 	.word	0x00080007
    1950:	00090007 	.word	0x00090007
    1954:	000a0007 	.word	0x000a0007
    1958:	000b0007 	.word	0x000b0007
    195c:	002a0007 	.word	0x002a0007

00001960 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1960:	b580      	push	{r7, lr}
    1962:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1964:	4805      	ldr	r0, [pc, #20]	; (197c <QSPI_N25Q256_CLOCK_init+0x1c>)
    1966:	4b06      	ldr	r3, [pc, #24]	; (1980 <QSPI_N25Q256_CLOCK_init+0x20>)
    1968:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    196a:	4804      	ldr	r0, [pc, #16]	; (197c <QSPI_N25Q256_CLOCK_init+0x1c>)
    196c:	4b05      	ldr	r3, [pc, #20]	; (1984 <QSPI_N25Q256_CLOCK_init+0x24>)
    196e:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1970:	4802      	ldr	r0, [pc, #8]	; (197c <QSPI_N25Q256_CLOCK_init+0x1c>)
    1972:	4b05      	ldr	r3, [pc, #20]	; (1988 <QSPI_N25Q256_CLOCK_init+0x28>)
    1974:	4798      	blx	r3
}
    1976:	bf00      	nop
    1978:	bd80      	pop	{r7, pc}
    197a:	bf00      	nop
    197c:	40000800 	.word	0x40000800
    1980:	00000e2f 	.word	0x00000e2f
    1984:	00000e6f 	.word	0x00000e6f
    1988:	0000102f 	.word	0x0000102f

0000198c <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    198c:	b580      	push	{r7, lr}
    198e:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    1990:	4b04      	ldr	r3, [pc, #16]	; (19a4 <QSPI_N25Q256_init+0x18>)
    1992:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1994:	4904      	ldr	r1, [pc, #16]	; (19a8 <QSPI_N25Q256_init+0x1c>)
    1996:	4805      	ldr	r0, [pc, #20]	; (19ac <QSPI_N25Q256_init+0x20>)
    1998:	4b05      	ldr	r3, [pc, #20]	; (19b0 <QSPI_N25Q256_init+0x24>)
    199a:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    199c:	4b05      	ldr	r3, [pc, #20]	; (19b4 <QSPI_N25Q256_init+0x28>)
    199e:	4798      	blx	r3
}
    19a0:	bf00      	nop
    19a2:	bd80      	pop	{r7, pc}
    19a4:	00001961 	.word	0x00001961
    19a8:	42003400 	.word	0x42003400
    19ac:	20001568 	.word	0x20001568
    19b0:	00002bbd 	.word	0x00002bbd
    19b4:	00001881 	.word	0x00001881

000019b8 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    19b8:	b580      	push	{r7, lr}
    19ba:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    19bc:	4802      	ldr	r0, [pc, #8]	; (19c8 <DATETIME_CLOCK_CLOCK_init+0x10>)
    19be:	4b03      	ldr	r3, [pc, #12]	; (19cc <DATETIME_CLOCK_CLOCK_init+0x14>)
    19c0:	4798      	blx	r3
}
    19c2:	bf00      	nop
    19c4:	bd80      	pop	{r7, pc}
    19c6:	bf00      	nop
    19c8:	40000800 	.word	0x40000800
    19cc:	00000eaf 	.word	0x00000eaf

000019d0 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    19d0:	b580      	push	{r7, lr}
    19d2:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    19d4:	4b03      	ldr	r3, [pc, #12]	; (19e4 <DATETIME_CLOCK_init+0x14>)
    19d6:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    19d8:	4903      	ldr	r1, [pc, #12]	; (19e8 <DATETIME_CLOCK_init+0x18>)
    19da:	4804      	ldr	r0, [pc, #16]	; (19ec <DATETIME_CLOCK_init+0x1c>)
    19dc:	4b04      	ldr	r3, [pc, #16]	; (19f0 <DATETIME_CLOCK_init+0x20>)
    19de:	4798      	blx	r3
}
    19e0:	bf00      	nop
    19e2:	bd80      	pop	{r7, pc}
    19e4:	000019b9 	.word	0x000019b9
    19e8:	40002400 	.word	0x40002400
    19ec:	200016d0 	.word	0x200016d0
    19f0:	00002325 	.word	0x00002325

000019f4 <I2C_SHARED_PORT_init>:

void I2C_SHARED_PORT_init(void)
{
    19f4:	b580      	push	{r7, lr}
    19f6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    19f8:	2100      	movs	r1, #0
    19fa:	2010      	movs	r0, #16
    19fc:	4b07      	ldr	r3, [pc, #28]	; (1a1c <I2C_SHARED_PORT_init+0x28>)
    19fe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1a00:	4907      	ldr	r1, [pc, #28]	; (1a20 <I2C_SHARED_PORT_init+0x2c>)
    1a02:	2010      	movs	r0, #16
    1a04:	4b07      	ldr	r3, [pc, #28]	; (1a24 <I2C_SHARED_PORT_init+0x30>)
    1a06:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    1a08:	2100      	movs	r1, #0
    1a0a:	2011      	movs	r0, #17
    1a0c:	4b03      	ldr	r3, [pc, #12]	; (1a1c <I2C_SHARED_PORT_init+0x28>)
    1a0e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1a10:	4905      	ldr	r1, [pc, #20]	; (1a28 <I2C_SHARED_PORT_init+0x34>)
    1a12:	2011      	movs	r0, #17
    1a14:	4b03      	ldr	r3, [pc, #12]	; (1a24 <I2C_SHARED_PORT_init+0x30>)
    1a16:	4798      	blx	r3
}
    1a18:	bf00      	nop
    1a1a:	bd80      	pop	{r7, pc}
    1a1c:	000015e9 	.word	0x000015e9
    1a20:	00100002 	.word	0x00100002
    1a24:	0000161d 	.word	0x0000161d
    1a28:	00110002 	.word	0x00110002

00001a2c <I2C_SHARED_CLOCK_init>:

void I2C_SHARED_CLOCK_init(void)
{
    1a2c:	b580      	push	{r7, lr}
    1a2e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a30:	2245      	movs	r2, #69	; 0x45
    1a32:	2108      	movs	r1, #8
    1a34:	4806      	ldr	r0, [pc, #24]	; (1a50 <I2C_SHARED_CLOCK_init+0x24>)
    1a36:	4b07      	ldr	r3, [pc, #28]	; (1a54 <I2C_SHARED_CLOCK_init+0x28>)
    1a38:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a3a:	224a      	movs	r2, #74	; 0x4a
    1a3c:	2103      	movs	r1, #3
    1a3e:	4804      	ldr	r0, [pc, #16]	; (1a50 <I2C_SHARED_CLOCK_init+0x24>)
    1a40:	4b04      	ldr	r3, [pc, #16]	; (1a54 <I2C_SHARED_CLOCK_init+0x28>)
    1a42:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1a44:	4804      	ldr	r0, [pc, #16]	; (1a58 <I2C_SHARED_CLOCK_init+0x2c>)
    1a46:	4b05      	ldr	r3, [pc, #20]	; (1a5c <I2C_SHARED_CLOCK_init+0x30>)
    1a48:	4798      	blx	r3
}
    1a4a:	bf00      	nop
    1a4c:	bd80      	pop	{r7, pc}
    1a4e:	bf00      	nop
    1a50:	40001c00 	.word	0x40001c00
    1a54:	00000de9 	.word	0x00000de9
    1a58:	40000800 	.word	0x40000800
    1a5c:	00000eef 	.word	0x00000eef

00001a60 <I2C_SHARED_init>:

void I2C_SHARED_init(void)
{
    1a60:	b580      	push	{r7, lr}
    1a62:	af00      	add	r7, sp, #0
	I2C_SHARED_CLOCK_init();
    1a64:	4b04      	ldr	r3, [pc, #16]	; (1a78 <I2C_SHARED_init+0x18>)
    1a66:	4798      	blx	r3
	i2c_m_sync_init(&I2C_SHARED, SERCOM1);
    1a68:	4904      	ldr	r1, [pc, #16]	; (1a7c <I2C_SHARED_init+0x1c>)
    1a6a:	4805      	ldr	r0, [pc, #20]	; (1a80 <I2C_SHARED_init+0x20>)
    1a6c:	4b05      	ldr	r3, [pc, #20]	; (1a84 <I2C_SHARED_init+0x24>)
    1a6e:	4798      	blx	r3
	I2C_SHARED_PORT_init();
    1a70:	4b05      	ldr	r3, [pc, #20]	; (1a88 <I2C_SHARED_init+0x28>)
    1a72:	4798      	blx	r3
}
    1a74:	bf00      	nop
    1a76:	bd80      	pop	{r7, pc}
    1a78:	00001a2d 	.word	0x00001a2d
    1a7c:	40003400 	.word	0x40003400
    1a80:	20001650 	.word	0x20001650
    1a84:	000029e1 	.word	0x000029e1
    1a88:	000019f5 	.word	0x000019f5

00001a8c <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1a8c:	b580      	push	{r7, lr}
    1a8e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    1a90:	2100      	movs	r1, #0
    1a92:	203b      	movs	r0, #59	; 0x3b
    1a94:	4b11      	ldr	r3, [pc, #68]	; (1adc <SPI_TEMP_PORT_init+0x50>)
    1a96:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    1a98:	2102      	movs	r1, #2
    1a9a:	203b      	movs	r0, #59	; 0x3b
    1a9c:	4b10      	ldr	r3, [pc, #64]	; (1ae0 <SPI_TEMP_PORT_init+0x54>)
    1a9e:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    1aa0:	4910      	ldr	r1, [pc, #64]	; (1ae4 <SPI_TEMP_PORT_init+0x58>)
    1aa2:	203b      	movs	r0, #59	; 0x3b
    1aa4:	4b10      	ldr	r3, [pc, #64]	; (1ae8 <SPI_TEMP_PORT_init+0x5c>)
    1aa6:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    1aa8:	2100      	movs	r1, #0
    1aaa:	203a      	movs	r0, #58	; 0x3a
    1aac:	4b0b      	ldr	r3, [pc, #44]	; (1adc <SPI_TEMP_PORT_init+0x50>)
    1aae:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1ab0:	2102      	movs	r1, #2
    1ab2:	203a      	movs	r0, #58	; 0x3a
    1ab4:	4b0a      	ldr	r3, [pc, #40]	; (1ae0 <SPI_TEMP_PORT_init+0x54>)
    1ab6:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    1ab8:	490c      	ldr	r1, [pc, #48]	; (1aec <SPI_TEMP_PORT_init+0x60>)
    1aba:	203a      	movs	r0, #58	; 0x3a
    1abc:	4b0a      	ldr	r3, [pc, #40]	; (1ae8 <SPI_TEMP_PORT_init+0x5c>)
    1abe:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1ac0:	2101      	movs	r1, #1
    1ac2:	203c      	movs	r0, #60	; 0x3c
    1ac4:	4b06      	ldr	r3, [pc, #24]	; (1ae0 <SPI_TEMP_PORT_init+0x54>)
    1ac6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    1ac8:	2100      	movs	r1, #0
    1aca:	203c      	movs	r0, #60	; 0x3c
    1acc:	4b08      	ldr	r3, [pc, #32]	; (1af0 <SPI_TEMP_PORT_init+0x64>)
    1ace:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1ad0:	4908      	ldr	r1, [pc, #32]	; (1af4 <SPI_TEMP_PORT_init+0x68>)
    1ad2:	203c      	movs	r0, #60	; 0x3c
    1ad4:	4b04      	ldr	r3, [pc, #16]	; (1ae8 <SPI_TEMP_PORT_init+0x5c>)
    1ad6:	4798      	blx	r3
}
    1ad8:	bf00      	nop
    1ada:	bd80      	pop	{r7, pc}
    1adc:	00001675 	.word	0x00001675
    1ae0:	0000163d 	.word	0x0000163d
    1ae4:	003b0003 	.word	0x003b0003
    1ae8:	0000161d 	.word	0x0000161d
    1aec:	003a0003 	.word	0x003a0003
    1af0:	000015e9 	.word	0x000015e9
    1af4:	003c0003 	.word	0x003c0003

00001af8 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1af8:	b580      	push	{r7, lr}
    1afa:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1afc:	2245      	movs	r2, #69	; 0x45
    1afe:	2122      	movs	r1, #34	; 0x22
    1b00:	4806      	ldr	r0, [pc, #24]	; (1b1c <SPI_TEMP_CLOCK_init+0x24>)
    1b02:	4b07      	ldr	r3, [pc, #28]	; (1b20 <SPI_TEMP_CLOCK_init+0x28>)
    1b04:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b06:	224a      	movs	r2, #74	; 0x4a
    1b08:	2103      	movs	r1, #3
    1b0a:	4804      	ldr	r0, [pc, #16]	; (1b1c <SPI_TEMP_CLOCK_init+0x24>)
    1b0c:	4b04      	ldr	r3, [pc, #16]	; (1b20 <SPI_TEMP_CLOCK_init+0x28>)
    1b0e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1b10:	4804      	ldr	r0, [pc, #16]	; (1b24 <SPI_TEMP_CLOCK_init+0x2c>)
    1b12:	4b05      	ldr	r3, [pc, #20]	; (1b28 <SPI_TEMP_CLOCK_init+0x30>)
    1b14:	4798      	blx	r3
}
    1b16:	bf00      	nop
    1b18:	bd80      	pop	{r7, pc}
    1b1a:	bf00      	nop
    1b1c:	40001c00 	.word	0x40001c00
    1b20:	00000de9 	.word	0x00000de9
    1b24:	40000800 	.word	0x40000800
    1b28:	0000104f 	.word	0x0000104f

00001b2c <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1b2c:	b580      	push	{r7, lr}
    1b2e:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1b30:	4b05      	ldr	r3, [pc, #20]	; (1b48 <SPI_TEMP_init+0x1c>)
    1b32:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    1b34:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1b38:	4804      	ldr	r0, [pc, #16]	; (1b4c <SPI_TEMP_init+0x20>)
    1b3a:	4b05      	ldr	r3, [pc, #20]	; (1b50 <SPI_TEMP_init+0x24>)
    1b3c:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1b3e:	4b05      	ldr	r3, [pc, #20]	; (1b54 <SPI_TEMP_init+0x28>)
    1b40:	4798      	blx	r3
}
    1b42:	bf00      	nop
    1b44:	bd80      	pop	{r7, pc}
    1b46:	bf00      	nop
    1b48:	00001af9 	.word	0x00001af9
    1b4c:	20001530 	.word	0x20001530
    1b50:	00002ccd 	.word	0x00002ccd
    1b54:	00001a8d 	.word	0x00001a8d

00001b58 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    1b58:	b580      	push	{r7, lr}
    1b5a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1b5c:	2100      	movs	r1, #0
    1b5e:	2017      	movs	r0, #23
    1b60:	4b07      	ldr	r3, [pc, #28]	; (1b80 <I2C_EXPANDER_PORT_init+0x28>)
    1b62:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    1b64:	4907      	ldr	r1, [pc, #28]	; (1b84 <I2C_EXPANDER_PORT_init+0x2c>)
    1b66:	2017      	movs	r0, #23
    1b68:	4b07      	ldr	r3, [pc, #28]	; (1b88 <I2C_EXPANDER_PORT_init+0x30>)
    1b6a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1b6c:	2100      	movs	r1, #0
    1b6e:	2016      	movs	r0, #22
    1b70:	4b03      	ldr	r3, [pc, #12]	; (1b80 <I2C_EXPANDER_PORT_init+0x28>)
    1b72:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    1b74:	4905      	ldr	r1, [pc, #20]	; (1b8c <I2C_EXPANDER_PORT_init+0x34>)
    1b76:	2016      	movs	r0, #22
    1b78:	4b03      	ldr	r3, [pc, #12]	; (1b88 <I2C_EXPANDER_PORT_init+0x30>)
    1b7a:	4798      	blx	r3
}
    1b7c:	bf00      	nop
    1b7e:	bd80      	pop	{r7, pc}
    1b80:	000015e9 	.word	0x000015e9
    1b84:	00170003 	.word	0x00170003
    1b88:	0000161d 	.word	0x0000161d
    1b8c:	00160003 	.word	0x00160003

00001b90 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    1b90:	b580      	push	{r7, lr}
    1b92:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b94:	2244      	movs	r2, #68	; 0x44
    1b96:	2123      	movs	r1, #35	; 0x23
    1b98:	4806      	ldr	r0, [pc, #24]	; (1bb4 <I2C_EXPANDER_CLOCK_init+0x24>)
    1b9a:	4b07      	ldr	r3, [pc, #28]	; (1bb8 <I2C_EXPANDER_CLOCK_init+0x28>)
    1b9c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b9e:	224a      	movs	r2, #74	; 0x4a
    1ba0:	2103      	movs	r1, #3
    1ba2:	4804      	ldr	r0, [pc, #16]	; (1bb4 <I2C_EXPANDER_CLOCK_init+0x24>)
    1ba4:	4b04      	ldr	r3, [pc, #16]	; (1bb8 <I2C_EXPANDER_CLOCK_init+0x28>)
    1ba6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    1ba8:	4804      	ldr	r0, [pc, #16]	; (1bbc <I2C_EXPANDER_CLOCK_init+0x2c>)
    1baa:	4b05      	ldr	r3, [pc, #20]	; (1bc0 <I2C_EXPANDER_CLOCK_init+0x30>)
    1bac:	4798      	blx	r3
}
    1bae:	bf00      	nop
    1bb0:	bd80      	pop	{r7, pc}
    1bb2:	bf00      	nop
    1bb4:	40001c00 	.word	0x40001c00
    1bb8:	00000de9 	.word	0x00000de9
    1bbc:	40000800 	.word	0x40000800
    1bc0:	0000106f 	.word	0x0000106f

00001bc4 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    1bc4:	b580      	push	{r7, lr}
    1bc6:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    1bc8:	4b04      	ldr	r3, [pc, #16]	; (1bdc <I2C_EXPANDER_init+0x18>)
    1bca:	4798      	blx	r3
	i2c_m_sync_init(&I2C_EXPANDER, SERCOM5);
    1bcc:	4904      	ldr	r1, [pc, #16]	; (1be0 <I2C_EXPANDER_init+0x1c>)
    1bce:	4805      	ldr	r0, [pc, #20]	; (1be4 <I2C_EXPANDER_init+0x20>)
    1bd0:	4b05      	ldr	r3, [pc, #20]	; (1be8 <I2C_EXPANDER_init+0x24>)
    1bd2:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    1bd4:	4b05      	ldr	r3, [pc, #20]	; (1bec <I2C_EXPANDER_init+0x28>)
    1bd6:	4798      	blx	r3
}
    1bd8:	bf00      	nop
    1bda:	bd80      	pop	{r7, pc}
    1bdc:	00001b91 	.word	0x00001b91
    1be0:	43000400 	.word	0x43000400
    1be4:	20001630 	.word	0x20001630
    1be8:	000029e1 	.word	0x000029e1
    1bec:	00001b59 	.word	0x00001b59

00001bf0 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1bf0:	b580      	push	{r7, lr}
    1bf2:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1bf4:	2100      	movs	r1, #0
    1bf6:	2044      	movs	r0, #68	; 0x44
    1bf8:	4b11      	ldr	r3, [pc, #68]	; (1c40 <SPI_HI3593_PORT_init+0x50>)
    1bfa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1bfc:	2102      	movs	r1, #2
    1bfe:	2044      	movs	r0, #68	; 0x44
    1c00:	4b10      	ldr	r3, [pc, #64]	; (1c44 <SPI_HI3593_PORT_init+0x54>)
    1c02:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1c04:	4910      	ldr	r1, [pc, #64]	; (1c48 <SPI_HI3593_PORT_init+0x58>)
    1c06:	2044      	movs	r0, #68	; 0x44
    1c08:	4b10      	ldr	r3, [pc, #64]	; (1c4c <SPI_HI3593_PORT_init+0x5c>)
    1c0a:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1c0c:	2100      	movs	r1, #0
    1c0e:	2045      	movs	r0, #69	; 0x45
    1c10:	4b0b      	ldr	r3, [pc, #44]	; (1c40 <SPI_HI3593_PORT_init+0x50>)
    1c12:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1c14:	2102      	movs	r1, #2
    1c16:	2045      	movs	r0, #69	; 0x45
    1c18:	4b0a      	ldr	r3, [pc, #40]	; (1c44 <SPI_HI3593_PORT_init+0x54>)
    1c1a:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1c1c:	490c      	ldr	r1, [pc, #48]	; (1c50 <SPI_HI3593_PORT_init+0x60>)
    1c1e:	2045      	movs	r0, #69	; 0x45
    1c20:	4b0a      	ldr	r3, [pc, #40]	; (1c4c <SPI_HI3593_PORT_init+0x5c>)
    1c22:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1c24:	2101      	movs	r1, #1
    1c26:	2047      	movs	r0, #71	; 0x47
    1c28:	4b06      	ldr	r3, [pc, #24]	; (1c44 <SPI_HI3593_PORT_init+0x54>)
    1c2a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1c2c:	2100      	movs	r1, #0
    1c2e:	2047      	movs	r0, #71	; 0x47
    1c30:	4b08      	ldr	r3, [pc, #32]	; (1c54 <SPI_HI3593_PORT_init+0x64>)
    1c32:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    1c34:	4908      	ldr	r1, [pc, #32]	; (1c58 <SPI_HI3593_PORT_init+0x68>)
    1c36:	2047      	movs	r0, #71	; 0x47
    1c38:	4b04      	ldr	r3, [pc, #16]	; (1c4c <SPI_HI3593_PORT_init+0x5c>)
    1c3a:	4798      	blx	r3
}
    1c3c:	bf00      	nop
    1c3e:	bd80      	pop	{r7, pc}
    1c40:	00001675 	.word	0x00001675
    1c44:	0000163d 	.word	0x0000163d
    1c48:	00440002 	.word	0x00440002
    1c4c:	0000161d 	.word	0x0000161d
    1c50:	00450002 	.word	0x00450002
    1c54:	000015e9 	.word	0x000015e9
    1c58:	00470002 	.word	0x00470002

00001c5c <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1c5c:	b580      	push	{r7, lr}
    1c5e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c60:	2242      	movs	r2, #66	; 0x42
    1c62:	2124      	movs	r1, #36	; 0x24
    1c64:	4806      	ldr	r0, [pc, #24]	; (1c80 <SPI_HI3593_CLOCK_init+0x24>)
    1c66:	4b07      	ldr	r3, [pc, #28]	; (1c84 <SPI_HI3593_CLOCK_init+0x28>)
    1c68:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c6a:	224a      	movs	r2, #74	; 0x4a
    1c6c:	2103      	movs	r1, #3
    1c6e:	4804      	ldr	r0, [pc, #16]	; (1c80 <SPI_HI3593_CLOCK_init+0x24>)
    1c70:	4b04      	ldr	r3, [pc, #16]	; (1c84 <SPI_HI3593_CLOCK_init+0x28>)
    1c72:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1c74:	4804      	ldr	r0, [pc, #16]	; (1c88 <SPI_HI3593_CLOCK_init+0x2c>)
    1c76:	4b05      	ldr	r3, [pc, #20]	; (1c8c <SPI_HI3593_CLOCK_init+0x30>)
    1c78:	4798      	blx	r3
}
    1c7a:	bf00      	nop
    1c7c:	bd80      	pop	{r7, pc}
    1c7e:	bf00      	nop
    1c80:	40001c00 	.word	0x40001c00
    1c84:	00000de9 	.word	0x00000de9
    1c88:	40000800 	.word	0x40000800
    1c8c:	0000108f 	.word	0x0000108f

00001c90 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1c90:	b580      	push	{r7, lr}
    1c92:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1c94:	4b04      	ldr	r3, [pc, #16]	; (1ca8 <SPI_HI3593_init+0x18>)
    1c96:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1c98:	4904      	ldr	r1, [pc, #16]	; (1cac <SPI_HI3593_init+0x1c>)
    1c9a:	4805      	ldr	r0, [pc, #20]	; (1cb0 <SPI_HI3593_init+0x20>)
    1c9c:	4b05      	ldr	r3, [pc, #20]	; (1cb4 <SPI_HI3593_init+0x24>)
    1c9e:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1ca0:	4b05      	ldr	r3, [pc, #20]	; (1cb8 <SPI_HI3593_init+0x28>)
    1ca2:	4798      	blx	r3
}
    1ca4:	bf00      	nop
    1ca6:	bd80      	pop	{r7, pc}
    1ca8:	00001c5d 	.word	0x00001c5d
    1cac:	43000800 	.word	0x43000800
    1cb0:	20001518 	.word	0x20001518
    1cb4:	00002ccd 	.word	0x00002ccd
    1cb8:	00001bf1 	.word	0x00001bf1

00001cbc <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    1cbc:	b580      	push	{r7, lr}
    1cbe:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1cc0:	2100      	movs	r1, #0
    1cc2:	2068      	movs	r0, #104	; 0x68
    1cc4:	4b07      	ldr	r3, [pc, #28]	; (1ce4 <I2C_EEPROM_PORT_init+0x28>)
    1cc6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1cc8:	4907      	ldr	r1, [pc, #28]	; (1ce8 <I2C_EEPROM_PORT_init+0x2c>)
    1cca:	2068      	movs	r0, #104	; 0x68
    1ccc:	4b07      	ldr	r3, [pc, #28]	; (1cec <I2C_EEPROM_PORT_init+0x30>)
    1cce:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1cd0:	2100      	movs	r1, #0
    1cd2:	2069      	movs	r0, #105	; 0x69
    1cd4:	4b03      	ldr	r3, [pc, #12]	; (1ce4 <I2C_EEPROM_PORT_init+0x28>)
    1cd6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1cd8:	4905      	ldr	r1, [pc, #20]	; (1cf0 <I2C_EEPROM_PORT_init+0x34>)
    1cda:	2069      	movs	r0, #105	; 0x69
    1cdc:	4b03      	ldr	r3, [pc, #12]	; (1cec <I2C_EEPROM_PORT_init+0x30>)
    1cde:	4798      	blx	r3
}
    1ce0:	bf00      	nop
    1ce2:	bd80      	pop	{r7, pc}
    1ce4:	000015e9 	.word	0x000015e9
    1ce8:	00680002 	.word	0x00680002
    1cec:	0000161d 	.word	0x0000161d
    1cf0:	00690002 	.word	0x00690002

00001cf4 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    1cf4:	b580      	push	{r7, lr}
    1cf6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1cf8:	2248      	movs	r2, #72	; 0x48
    1cfa:	2125      	movs	r1, #37	; 0x25
    1cfc:	4806      	ldr	r0, [pc, #24]	; (1d18 <I2C_EEPROM_CLOCK_init+0x24>)
    1cfe:	4b07      	ldr	r3, [pc, #28]	; (1d1c <I2C_EEPROM_CLOCK_init+0x28>)
    1d00:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d02:	224a      	movs	r2, #74	; 0x4a
    1d04:	2103      	movs	r1, #3
    1d06:	4804      	ldr	r0, [pc, #16]	; (1d18 <I2C_EEPROM_CLOCK_init+0x24>)
    1d08:	4b04      	ldr	r3, [pc, #16]	; (1d1c <I2C_EEPROM_CLOCK_init+0x28>)
    1d0a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1d0c:	4804      	ldr	r0, [pc, #16]	; (1d20 <I2C_EEPROM_CLOCK_init+0x2c>)
    1d0e:	4b05      	ldr	r3, [pc, #20]	; (1d24 <I2C_EEPROM_CLOCK_init+0x30>)
    1d10:	4798      	blx	r3
}
    1d12:	bf00      	nop
    1d14:	bd80      	pop	{r7, pc}
    1d16:	bf00      	nop
    1d18:	40001c00 	.word	0x40001c00
    1d1c:	00000de9 	.word	0x00000de9
    1d20:	40000800 	.word	0x40000800
    1d24:	000010af 	.word	0x000010af

00001d28 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    1d28:	b580      	push	{r7, lr}
    1d2a:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    1d2c:	4b04      	ldr	r3, [pc, #16]	; (1d40 <I2C_EEPROM_init+0x18>)
    1d2e:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    1d30:	4904      	ldr	r1, [pc, #16]	; (1d44 <I2C_EEPROM_init+0x1c>)
    1d32:	4805      	ldr	r0, [pc, #20]	; (1d48 <I2C_EEPROM_init+0x20>)
    1d34:	4b05      	ldr	r3, [pc, #20]	; (1d4c <I2C_EEPROM_init+0x24>)
    1d36:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    1d38:	4b05      	ldr	r3, [pc, #20]	; (1d50 <I2C_EEPROM_init+0x28>)
    1d3a:	4798      	blx	r3
}
    1d3c:	bf00      	nop
    1d3e:	bd80      	pop	{r7, pc}
    1d40:	00001cf5 	.word	0x00001cf5
    1d44:	43000c00 	.word	0x43000c00
    1d48:	20001690 	.word	0x20001690
    1d4c:	000028ad 	.word	0x000028ad
    1d50:	00001cbd 	.word	0x00001cbd

00001d54 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1d54:	b580      	push	{r7, lr}
    1d56:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1d58:	4808      	ldr	r0, [pc, #32]	; (1d7c <TIMER_USB_init+0x28>)
    1d5a:	4b09      	ldr	r3, [pc, #36]	; (1d80 <TIMER_USB_init+0x2c>)
    1d5c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d5e:	2243      	movs	r2, #67	; 0x43
    1d60:	2109      	movs	r1, #9
    1d62:	4808      	ldr	r0, [pc, #32]	; (1d84 <TIMER_USB_init+0x30>)
    1d64:	4b08      	ldr	r3, [pc, #32]	; (1d88 <TIMER_USB_init+0x34>)
    1d66:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    1d68:	4b08      	ldr	r3, [pc, #32]	; (1d8c <TIMER_USB_init+0x38>)
    1d6a:	4798      	blx	r3
    1d6c:	4603      	mov	r3, r0
    1d6e:	461a      	mov	r2, r3
    1d70:	4907      	ldr	r1, [pc, #28]	; (1d90 <TIMER_USB_init+0x3c>)
    1d72:	4808      	ldr	r0, [pc, #32]	; (1d94 <TIMER_USB_init+0x40>)
    1d74:	4b08      	ldr	r3, [pc, #32]	; (1d98 <TIMER_USB_init+0x44>)
    1d76:	4798      	blx	r3
}
    1d78:	bf00      	nop
    1d7a:	bd80      	pop	{r7, pc}
    1d7c:	40000800 	.word	0x40000800
    1d80:	00000f0f 	.word	0x00000f0f
    1d84:	40001c00 	.word	0x40001c00
    1d88:	00000de9 	.word	0x00000de9
    1d8c:	00008d7d 	.word	0x00008d7d
    1d90:	40003800 	.word	0x40003800
    1d94:	20001610 	.word	0x20001610
    1d98:	00002f5d 	.word	0x00002f5d

00001d9c <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1d9c:	b580      	push	{r7, lr}
    1d9e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1da0:	4808      	ldr	r0, [pc, #32]	; (1dc4 <TIMER_ARINC_init+0x28>)
    1da2:	4b09      	ldr	r3, [pc, #36]	; (1dc8 <TIMER_ARINC_init+0x2c>)
    1da4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1da6:	2244      	movs	r2, #68	; 0x44
    1da8:	211a      	movs	r1, #26
    1daa:	4808      	ldr	r0, [pc, #32]	; (1dcc <TIMER_ARINC_init+0x30>)
    1dac:	4b08      	ldr	r3, [pc, #32]	; (1dd0 <TIMER_ARINC_init+0x34>)
    1dae:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1db0:	4b08      	ldr	r3, [pc, #32]	; (1dd4 <TIMER_ARINC_init+0x38>)
    1db2:	4798      	blx	r3
    1db4:	4603      	mov	r3, r0
    1db6:	461a      	mov	r2, r3
    1db8:	4907      	ldr	r1, [pc, #28]	; (1dd8 <TIMER_ARINC_init+0x3c>)
    1dba:	4808      	ldr	r0, [pc, #32]	; (1ddc <TIMER_ARINC_init+0x40>)
    1dbc:	4b08      	ldr	r3, [pc, #32]	; (1de0 <TIMER_ARINC_init+0x44>)
    1dbe:	4798      	blx	r3
}
    1dc0:	bf00      	nop
    1dc2:	bd80      	pop	{r7, pc}
    1dc4:	40000800 	.word	0x40000800
    1dc8:	00000fcf 	.word	0x00000fcf
    1dcc:	40001c00 	.word	0x40001c00
    1dd0:	00000de9 	.word	0x00000de9
    1dd4:	00008d7d 	.word	0x00008d7d
    1dd8:	4101a000 	.word	0x4101a000
    1ddc:	200015f0 	.word	0x200015f0
    1de0:	00002f5d 	.word	0x00002f5d

00001de4 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    1de4:	b580      	push	{r7, lr}
    1de6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1de8:	4808      	ldr	r0, [pc, #32]	; (1e0c <TIMER_MAINTENANCE_init+0x28>)
    1dea:	4b09      	ldr	r3, [pc, #36]	; (1e10 <TIMER_MAINTENANCE_init+0x2c>)
    1dec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1dee:	2246      	movs	r2, #70	; 0x46
    1df0:	211e      	movs	r1, #30
    1df2:	4808      	ldr	r0, [pc, #32]	; (1e14 <TIMER_MAINTENANCE_init+0x30>)
    1df4:	4b08      	ldr	r3, [pc, #32]	; (1e18 <TIMER_MAINTENANCE_init+0x34>)
    1df6:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1df8:	4b08      	ldr	r3, [pc, #32]	; (1e1c <TIMER_MAINTENANCE_init+0x38>)
    1dfa:	4798      	blx	r3
    1dfc:	4603      	mov	r3, r0
    1dfe:	461a      	mov	r2, r3
    1e00:	4907      	ldr	r1, [pc, #28]	; (1e20 <TIMER_MAINTENANCE_init+0x3c>)
    1e02:	4808      	ldr	r0, [pc, #32]	; (1e24 <TIMER_MAINTENANCE_init+0x40>)
    1e04:	4b08      	ldr	r3, [pc, #32]	; (1e28 <TIMER_MAINTENANCE_init+0x44>)
    1e06:	4798      	blx	r3
}
    1e08:	bf00      	nop
    1e0a:	bd80      	pop	{r7, pc}
    1e0c:	40000800 	.word	0x40000800
    1e10:	00000fef 	.word	0x00000fef
    1e14:	40001c00 	.word	0x40001c00
    1e18:	00000de9 	.word	0x00000de9
    1e1c:	00008d7d 	.word	0x00008d7d
    1e20:	42001400 	.word	0x42001400
    1e24:	20001548 	.word	0x20001548
    1e28:	00002f5d 	.word	0x00002f5d

00001e2c <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1e2c:	b580      	push	{r7, lr}
    1e2e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1e30:	4808      	ldr	r0, [pc, #32]	; (1e54 <TIMER_INTERFACE_init+0x28>)
    1e32:	4b09      	ldr	r3, [pc, #36]	; (1e58 <TIMER_INTERFACE_init+0x2c>)
    1e34:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e36:	2246      	movs	r2, #70	; 0x46
    1e38:	211e      	movs	r1, #30
    1e3a:	4808      	ldr	r0, [pc, #32]	; (1e5c <TIMER_INTERFACE_init+0x30>)
    1e3c:	4b08      	ldr	r3, [pc, #32]	; (1e60 <TIMER_INTERFACE_init+0x34>)
    1e3e:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1e40:	4b08      	ldr	r3, [pc, #32]	; (1e64 <TIMER_INTERFACE_init+0x38>)
    1e42:	4798      	blx	r3
    1e44:	4603      	mov	r3, r0
    1e46:	461a      	mov	r2, r3
    1e48:	4907      	ldr	r1, [pc, #28]	; (1e68 <TIMER_INTERFACE_init+0x3c>)
    1e4a:	4808      	ldr	r0, [pc, #32]	; (1e6c <TIMER_INTERFACE_init+0x40>)
    1e4c:	4b08      	ldr	r3, [pc, #32]	; (1e70 <TIMER_INTERFACE_init+0x44>)
    1e4e:	4798      	blx	r3
}
    1e50:	bf00      	nop
    1e52:	bd80      	pop	{r7, pc}
    1e54:	40000800 	.word	0x40000800
    1e58:	0000100f 	.word	0x0000100f
    1e5c:	40001c00 	.word	0x40001c00
    1e60:	00000de9 	.word	0x00000de9
    1e64:	00008d7d 	.word	0x00008d7d
    1e68:	42001800 	.word	0x42001800
    1e6c:	2000158c 	.word	0x2000158c
    1e70:	00002f5d 	.word	0x00002f5d

00001e74 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1e74:	b580      	push	{r7, lr}
    1e76:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    1e78:	4808      	ldr	r0, [pc, #32]	; (1e9c <TIMER_EVENT_init+0x28>)
    1e7a:	4b09      	ldr	r3, [pc, #36]	; (1ea0 <TIMER_EVENT_init+0x2c>)
    1e7c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e7e:	2246      	movs	r2, #70	; 0x46
    1e80:	2127      	movs	r1, #39	; 0x27
    1e82:	4808      	ldr	r0, [pc, #32]	; (1ea4 <TIMER_EVENT_init+0x30>)
    1e84:	4b08      	ldr	r3, [pc, #32]	; (1ea8 <TIMER_EVENT_init+0x34>)
    1e86:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    1e88:	4b08      	ldr	r3, [pc, #32]	; (1eac <TIMER_EVENT_init+0x38>)
    1e8a:	4798      	blx	r3
    1e8c:	4603      	mov	r3, r0
    1e8e:	461a      	mov	r2, r3
    1e90:	4907      	ldr	r1, [pc, #28]	; (1eb0 <TIMER_EVENT_init+0x3c>)
    1e92:	4808      	ldr	r0, [pc, #32]	; (1eb4 <TIMER_EVENT_init+0x40>)
    1e94:	4b08      	ldr	r3, [pc, #32]	; (1eb8 <TIMER_EVENT_init+0x44>)
    1e96:	4798      	blx	r3
}
    1e98:	bf00      	nop
    1e9a:	bd80      	pop	{r7, pc}
    1e9c:	40000800 	.word	0x40000800
    1ea0:	000010cf 	.word	0x000010cf
    1ea4:	40001c00 	.word	0x40001c00
    1ea8:	00000de9 	.word	0x00000de9
    1eac:	00008d7d 	.word	0x00008d7d
    1eb0:	43001400 	.word	0x43001400
    1eb4:	2000156c 	.word	0x2000156c
    1eb8:	00002f5d 	.word	0x00002f5d

00001ebc <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1ebc:	b580      	push	{r7, lr}
    1ebe:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB01, PINMUX_PB01E_TC7_WO1);
    1ec0:	4902      	ldr	r1, [pc, #8]	; (1ecc <LIVE_PULSE_PORT_init+0x10>)
    1ec2:	2021      	movs	r0, #33	; 0x21
    1ec4:	4b02      	ldr	r3, [pc, #8]	; (1ed0 <LIVE_PULSE_PORT_init+0x14>)
    1ec6:	4798      	blx	r3
}
    1ec8:	bf00      	nop
    1eca:	bd80      	pop	{r7, pc}
    1ecc:	00210004 	.word	0x00210004
    1ed0:	0000161d 	.word	0x0000161d

00001ed4 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1ed4:	b580      	push	{r7, lr}
    1ed6:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1ed8:	4804      	ldr	r0, [pc, #16]	; (1eec <LIVE_PULSE_CLOCK_init+0x18>)
    1eda:	4b05      	ldr	r3, [pc, #20]	; (1ef0 <LIVE_PULSE_CLOCK_init+0x1c>)
    1edc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ede:	2240      	movs	r2, #64	; 0x40
    1ee0:	2127      	movs	r1, #39	; 0x27
    1ee2:	4804      	ldr	r0, [pc, #16]	; (1ef4 <LIVE_PULSE_CLOCK_init+0x20>)
    1ee4:	4b04      	ldr	r3, [pc, #16]	; (1ef8 <LIVE_PULSE_CLOCK_init+0x24>)
    1ee6:	4798      	blx	r3
}
    1ee8:	bf00      	nop
    1eea:	bd80      	pop	{r7, pc}
    1eec:	40000800 	.word	0x40000800
    1ef0:	000010ef 	.word	0x000010ef
    1ef4:	40001c00 	.word	0x40001c00
    1ef8:	00000de9 	.word	0x00000de9

00001efc <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1efc:	b580      	push	{r7, lr}
    1efe:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1f00:	4b06      	ldr	r3, [pc, #24]	; (1f1c <LIVE_PULSE_init+0x20>)
    1f02:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1f04:	4b06      	ldr	r3, [pc, #24]	; (1f20 <LIVE_PULSE_init+0x24>)
    1f06:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1f08:	4b06      	ldr	r3, [pc, #24]	; (1f24 <LIVE_PULSE_init+0x28>)
    1f0a:	4798      	blx	r3
    1f0c:	4603      	mov	r3, r0
    1f0e:	461a      	mov	r2, r3
    1f10:	4905      	ldr	r1, [pc, #20]	; (1f28 <LIVE_PULSE_init+0x2c>)
    1f12:	4806      	ldr	r0, [pc, #24]	; (1f2c <LIVE_PULSE_init+0x30>)
    1f14:	4b06      	ldr	r3, [pc, #24]	; (1f30 <LIVE_PULSE_init+0x34>)
    1f16:	4798      	blx	r3
}
    1f18:	bf00      	nop
    1f1a:	bd80      	pop	{r7, pc}
    1f1c:	00001ed5 	.word	0x00001ed5
    1f20:	00001ebd 	.word	0x00001ebd
    1f24:	00008d91 	.word	0x00008d91
    1f28:	43001800 	.word	0x43001800
    1f2c:	200015ac 	.word	0x200015ac
    1f30:	00002abd 	.word	0x00002abd

00001f34 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    1f34:	b580      	push	{r7, lr}
    1f36:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    1f38:	4804      	ldr	r0, [pc, #16]	; (1f4c <TIMER_HVAC_CLOCK_init+0x18>)
    1f3a:	4b05      	ldr	r3, [pc, #20]	; (1f50 <TIMER_HVAC_CLOCK_init+0x1c>)
    1f3c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f3e:	2244      	movs	r2, #68	; 0x44
    1f40:	2119      	movs	r1, #25
    1f42:	4804      	ldr	r0, [pc, #16]	; (1f54 <TIMER_HVAC_CLOCK_init+0x20>)
    1f44:	4b04      	ldr	r3, [pc, #16]	; (1f58 <TIMER_HVAC_CLOCK_init+0x24>)
    1f46:	4798      	blx	r3
}
    1f48:	bf00      	nop
    1f4a:	bd80      	pop	{r7, pc}
    1f4c:	40000800 	.word	0x40000800
    1f50:	00000f8f 	.word	0x00000f8f
    1f54:	40001c00 	.word	0x40001c00
    1f58:	00000de9 	.word	0x00000de9

00001f5c <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    1f5c:	b580      	push	{r7, lr}
    1f5e:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    1f60:	4b05      	ldr	r3, [pc, #20]	; (1f78 <TIMER_HVAC_init+0x1c>)
    1f62:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    1f64:	4b05      	ldr	r3, [pc, #20]	; (1f7c <TIMER_HVAC_init+0x20>)
    1f66:	4798      	blx	r3
    1f68:	4603      	mov	r3, r0
    1f6a:	461a      	mov	r2, r3
    1f6c:	4904      	ldr	r1, [pc, #16]	; (1f80 <TIMER_HVAC_init+0x24>)
    1f6e:	4805      	ldr	r0, [pc, #20]	; (1f84 <TIMER_HVAC_init+0x28>)
    1f70:	4b05      	ldr	r3, [pc, #20]	; (1f88 <TIMER_HVAC_init+0x2c>)
    1f72:	4798      	blx	r3
}
    1f74:	bf00      	nop
    1f76:	bd80      	pop	{r7, pc}
    1f78:	00001f35 	.word	0x00001f35
    1f7c:	0000813d 	.word	0x0000813d
    1f80:	41016000 	.word	0x41016000
    1f84:	20001670 	.word	0x20001670
    1f88:	00002f5d 	.word	0x00002f5d

00001f8c <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    1f8c:	b580      	push	{r7, lr}
    1f8e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    1f90:	4804      	ldr	r0, [pc, #16]	; (1fa4 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    1f92:	4b05      	ldr	r3, [pc, #20]	; (1fa8 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    1f94:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f96:	2244      	movs	r2, #68	; 0x44
    1f98:	2119      	movs	r1, #25
    1f9a:	4804      	ldr	r0, [pc, #16]	; (1fac <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    1f9c:	4b04      	ldr	r3, [pc, #16]	; (1fb0 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    1f9e:	4798      	blx	r3
}
    1fa0:	bf00      	nop
    1fa2:	bd80      	pop	{r7, pc}
    1fa4:	40000800 	.word	0x40000800
    1fa8:	00000faf 	.word	0x00000faf
    1fac:	40001c00 	.word	0x40001c00
    1fb0:	00000de9 	.word	0x00000de9

00001fb4 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    1fb4:	b580      	push	{r7, lr}
    1fb6:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    1fb8:	4b05      	ldr	r3, [pc, #20]	; (1fd0 <TIMER_TEMPERATURES_init+0x1c>)
    1fba:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    1fbc:	4b05      	ldr	r3, [pc, #20]	; (1fd4 <TIMER_TEMPERATURES_init+0x20>)
    1fbe:	4798      	blx	r3
    1fc0:	4603      	mov	r3, r0
    1fc2:	461a      	mov	r2, r3
    1fc4:	4904      	ldr	r1, [pc, #16]	; (1fd8 <TIMER_TEMPERATURES_init+0x24>)
    1fc6:	4805      	ldr	r0, [pc, #20]	; (1fdc <TIMER_TEMPERATURES_init+0x28>)
    1fc8:	4b05      	ldr	r3, [pc, #20]	; (1fe0 <TIMER_TEMPERATURES_init+0x2c>)
    1fca:	4798      	blx	r3
}
    1fcc:	bf00      	nop
    1fce:	bd80      	pop	{r7, pc}
    1fd0:	00001f8d 	.word	0x00001f8d
    1fd4:	0000813d 	.word	0x0000813d
    1fd8:	41018000 	.word	0x41018000
    1fdc:	200014f8 	.word	0x200014f8
    1fe0:	00002f5d 	.word	0x00002f5d

00001fe4 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1fe4:	b580      	push	{r7, lr}
    1fe6:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1fe8:	2102      	movs	r1, #2
    1fea:	2018      	movs	r0, #24
    1fec:	4b0f      	ldr	r3, [pc, #60]	; (202c <CDCUSB_PORT_init+0x48>)
    1fee:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1ff0:	2100      	movs	r1, #0
    1ff2:	2018      	movs	r0, #24
    1ff4:	4b0e      	ldr	r3, [pc, #56]	; (2030 <CDCUSB_PORT_init+0x4c>)
    1ff6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1ff8:	2100      	movs	r1, #0
    1ffa:	2018      	movs	r0, #24
    1ffc:	4b0d      	ldr	r3, [pc, #52]	; (2034 <CDCUSB_PORT_init+0x50>)
    1ffe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    2000:	490d      	ldr	r1, [pc, #52]	; (2038 <CDCUSB_PORT_init+0x54>)
    2002:	2018      	movs	r0, #24
    2004:	4b0d      	ldr	r3, [pc, #52]	; (203c <CDCUSB_PORT_init+0x58>)
    2006:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    2008:	2102      	movs	r1, #2
    200a:	2019      	movs	r0, #25
    200c:	4b07      	ldr	r3, [pc, #28]	; (202c <CDCUSB_PORT_init+0x48>)
    200e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    2010:	2100      	movs	r1, #0
    2012:	2019      	movs	r0, #25
    2014:	4b06      	ldr	r3, [pc, #24]	; (2030 <CDCUSB_PORT_init+0x4c>)
    2016:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    2018:	2100      	movs	r1, #0
    201a:	2019      	movs	r0, #25
    201c:	4b05      	ldr	r3, [pc, #20]	; (2034 <CDCUSB_PORT_init+0x50>)
    201e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    2020:	4907      	ldr	r1, [pc, #28]	; (2040 <CDCUSB_PORT_init+0x5c>)
    2022:	2019      	movs	r0, #25
    2024:	4b05      	ldr	r3, [pc, #20]	; (203c <CDCUSB_PORT_init+0x58>)
    2026:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    2028:	bf00      	nop
    202a:	bd80      	pop	{r7, pc}
    202c:	0000163d 	.word	0x0000163d
    2030:	00001675 	.word	0x00001675
    2034:	000015e9 	.word	0x000015e9
    2038:	00180007 	.word	0x00180007
    203c:	0000161d 	.word	0x0000161d
    2040:	00190007 	.word	0x00190007

00002044 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    2044:	b580      	push	{r7, lr}
    2046:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    2048:	2242      	movs	r2, #66	; 0x42
    204a:	210a      	movs	r1, #10
    204c:	4805      	ldr	r0, [pc, #20]	; (2064 <CDCUSB_CLOCK_init+0x20>)
    204e:	4b06      	ldr	r3, [pc, #24]	; (2068 <CDCUSB_CLOCK_init+0x24>)
    2050:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    2052:	4806      	ldr	r0, [pc, #24]	; (206c <CDCUSB_CLOCK_init+0x28>)
    2054:	4b06      	ldr	r3, [pc, #24]	; (2070 <CDCUSB_CLOCK_init+0x2c>)
    2056:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    2058:	4804      	ldr	r0, [pc, #16]	; (206c <CDCUSB_CLOCK_init+0x28>)
    205a:	4b06      	ldr	r3, [pc, #24]	; (2074 <CDCUSB_CLOCK_init+0x30>)
    205c:	4798      	blx	r3
}
    205e:	bf00      	nop
    2060:	bd80      	pop	{r7, pc}
    2062:	bf00      	nop
    2064:	40001c00 	.word	0x40001c00
    2068:	00000de9 	.word	0x00000de9
    206c:	40000800 	.word	0x40000800
    2070:	00000e0f 	.word	0x00000e0f
    2074:	00000f2f 	.word	0x00000f2f

00002078 <CDCUSB_init>:

void CDCUSB_init(void)
{
    2078:	b580      	push	{r7, lr}
    207a:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    207c:	4b03      	ldr	r3, [pc, #12]	; (208c <CDCUSB_init+0x14>)
    207e:	4798      	blx	r3
	usb_d_init();
    2080:	4b03      	ldr	r3, [pc, #12]	; (2090 <CDCUSB_init+0x18>)
    2082:	4798      	blx	r3
	CDCUSB_PORT_init();
    2084:	4b03      	ldr	r3, [pc, #12]	; (2094 <CDCUSB_init+0x1c>)
    2086:	4798      	blx	r3
}
    2088:	bf00      	nop
    208a:	bd80      	pop	{r7, pc}
    208c:	00002045 	.word	0x00002045
    2090:	000037b9 	.word	0x000037b9
    2094:	00001fe5 	.word	0x00001fe5

00002098 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    2098:	b580      	push	{r7, lr}
    209a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    209c:	4802      	ldr	r0, [pc, #8]	; (20a8 <WATCHDOG_CLOCK_init+0x10>)
    209e:	4b03      	ldr	r3, [pc, #12]	; (20ac <WATCHDOG_CLOCK_init+0x14>)
    20a0:	4798      	blx	r3
}
    20a2:	bf00      	nop
    20a4:	bd80      	pop	{r7, pc}
    20a6:	bf00      	nop
    20a8:	40000800 	.word	0x40000800
    20ac:	00000e8f 	.word	0x00000e8f

000020b0 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    20b0:	b580      	push	{r7, lr}
    20b2:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    20b4:	4b03      	ldr	r3, [pc, #12]	; (20c4 <WATCHDOG_init+0x14>)
    20b6:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    20b8:	4903      	ldr	r1, [pc, #12]	; (20c8 <WATCHDOG_init+0x18>)
    20ba:	4804      	ldr	r0, [pc, #16]	; (20cc <WATCHDOG_init+0x1c>)
    20bc:	4b04      	ldr	r3, [pc, #16]	; (20d0 <WATCHDOG_init+0x20>)
    20be:	4798      	blx	r3
}
    20c0:	bf00      	nop
    20c2:	bd80      	pop	{r7, pc}
    20c4:	00002099 	.word	0x00002099
    20c8:	40002000 	.word	0x40002000
    20cc:	200016f0 	.word	0x200016f0
    20d0:	000016bd 	.word	0x000016bd

000020d4 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    20d4:	b580      	push	{r7, lr}
    20d6:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    20d8:	4904      	ldr	r1, [pc, #16]	; (20ec <CAN_CCU_PORT_init+0x18>)
    20da:	202d      	movs	r0, #45	; 0x2d
    20dc:	4b04      	ldr	r3, [pc, #16]	; (20f0 <CAN_CCU_PORT_init+0x1c>)
    20de:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    20e0:	4904      	ldr	r1, [pc, #16]	; (20f4 <CAN_CCU_PORT_init+0x20>)
    20e2:	202c      	movs	r0, #44	; 0x2c
    20e4:	4b02      	ldr	r3, [pc, #8]	; (20f0 <CAN_CCU_PORT_init+0x1c>)
    20e6:	4798      	blx	r3
}
    20e8:	bf00      	nop
    20ea:	bd80      	pop	{r7, pc}
    20ec:	002d0007 	.word	0x002d0007
    20f0:	0000161d 	.word	0x0000161d
    20f4:	002c0007 	.word	0x002c0007

000020f8 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    20f8:	b580      	push	{r7, lr}
    20fa:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    20fc:	4807      	ldr	r0, [pc, #28]	; (211c <CAN_CCU_init+0x24>)
    20fe:	4b08      	ldr	r3, [pc, #32]	; (2120 <CAN_CCU_init+0x28>)
    2100:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2102:	2243      	movs	r2, #67	; 0x43
    2104:	211c      	movs	r1, #28
    2106:	4807      	ldr	r0, [pc, #28]	; (2124 <CAN_CCU_init+0x2c>)
    2108:	4b07      	ldr	r3, [pc, #28]	; (2128 <CAN_CCU_init+0x30>)
    210a:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    210c:	4907      	ldr	r1, [pc, #28]	; (212c <CAN_CCU_init+0x34>)
    210e:	4808      	ldr	r0, [pc, #32]	; (2130 <CAN_CCU_init+0x38>)
    2110:	4b08      	ldr	r3, [pc, #32]	; (2134 <CAN_CCU_init+0x3c>)
    2112:	4798      	blx	r3
	CAN_CCU_PORT_init();
    2114:	4b08      	ldr	r3, [pc, #32]	; (2138 <CAN_CCU_init+0x40>)
    2116:	4798      	blx	r3
}
    2118:	bf00      	nop
    211a:	bd80      	pop	{r7, pc}
    211c:	40000800 	.word	0x40000800
    2120:	00000e4f 	.word	0x00000e4f
    2124:	40001c00 	.word	0x40001c00
    2128:	00000de9 	.word	0x00000de9
    212c:	42000400 	.word	0x42000400
    2130:	200015c8 	.word	0x200015c8
    2134:	00002395 	.word	0x00002395
    2138:	000020d5 	.word	0x000020d5

0000213c <system_init>:

void system_init(void)
{
    213c:	b580      	push	{r7, lr}
    213e:	af00      	add	r7, sp, #0
	init_mcu();
    2140:	4b5e      	ldr	r3, [pc, #376]	; (22bc <system_init+0x180>)
    2142:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    2144:	2100      	movs	r1, #0
    2146:	2007      	movs	r0, #7
    2148:	4b5d      	ldr	r3, [pc, #372]	; (22c0 <system_init+0x184>)
    214a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    214c:	2102      	movs	r1, #2
    214e:	2007      	movs	r0, #7
    2150:	4b5c      	ldr	r3, [pc, #368]	; (22c4 <system_init+0x188>)
    2152:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    2154:	f04f 31ff 	mov.w	r1, #4294967295
    2158:	2007      	movs	r0, #7
    215a:	4b5b      	ldr	r3, [pc, #364]	; (22c8 <system_init+0x18c>)
    215c:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    215e:	2101      	movs	r1, #1
    2160:	200f      	movs	r0, #15
    2162:	4b57      	ldr	r3, [pc, #348]	; (22c0 <system_init+0x184>)
    2164:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    2166:	2102      	movs	r1, #2
    2168:	200f      	movs	r0, #15
    216a:	4b56      	ldr	r3, [pc, #344]	; (22c4 <system_init+0x188>)
    216c:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    216e:	f04f 31ff 	mov.w	r1, #4294967295
    2172:	200f      	movs	r0, #15
    2174:	4b54      	ldr	r3, [pc, #336]	; (22c8 <system_init+0x18c>)
    2176:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    2178:	2101      	movs	r1, #1
    217a:	2013      	movs	r0, #19
    217c:	4b50      	ldr	r3, [pc, #320]	; (22c0 <system_init+0x184>)
    217e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    2180:	2102      	movs	r1, #2
    2182:	2013      	movs	r0, #19
    2184:	4b4f      	ldr	r3, [pc, #316]	; (22c4 <system_init+0x188>)
    2186:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    2188:	f04f 31ff 	mov.w	r1, #4294967295
    218c:	2013      	movs	r0, #19
    218e:	4b4e      	ldr	r3, [pc, #312]	; (22c8 <system_init+0x18c>)
    2190:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    2192:	2101      	movs	r1, #1
    2194:	201b      	movs	r0, #27
    2196:	4b4a      	ldr	r3, [pc, #296]	; (22c0 <system_init+0x184>)
    2198:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    219a:	2102      	movs	r1, #2
    219c:	201b      	movs	r0, #27
    219e:	4b49      	ldr	r3, [pc, #292]	; (22c4 <system_init+0x188>)
    21a0:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    21a2:	f04f 31ff 	mov.w	r1, #4294967295
    21a6:	201b      	movs	r0, #27
    21a8:	4b47      	ldr	r3, [pc, #284]	; (22c8 <system_init+0x18c>)
    21aa:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    21ac:	2101      	movs	r1, #1
    21ae:	2027      	movs	r0, #39	; 0x27
    21b0:	4b44      	ldr	r3, [pc, #272]	; (22c4 <system_init+0x188>)
    21b2:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    21b4:	2102      	movs	r1, #2
    21b6:	2027      	movs	r0, #39	; 0x27
    21b8:	4b44      	ldr	r3, [pc, #272]	; (22cc <system_init+0x190>)
    21ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    21bc:	f04f 31ff 	mov.w	r1, #4294967295
    21c0:	2027      	movs	r0, #39	; 0x27
    21c2:	4b41      	ldr	r3, [pc, #260]	; (22c8 <system_init+0x18c>)
    21c4:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    21c6:	2101      	movs	r1, #1
    21c8:	203d      	movs	r0, #61	; 0x3d
    21ca:	4b3d      	ldr	r3, [pc, #244]	; (22c0 <system_init+0x184>)
    21cc:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    21ce:	2102      	movs	r1, #2
    21d0:	203d      	movs	r0, #61	; 0x3d
    21d2:	4b3c      	ldr	r3, [pc, #240]	; (22c4 <system_init+0x188>)
    21d4:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    21d6:	f04f 31ff 	mov.w	r1, #4294967295
    21da:	203d      	movs	r0, #61	; 0x3d
    21dc:	4b3a      	ldr	r3, [pc, #232]	; (22c8 <system_init+0x18c>)
    21de:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    21e0:	2101      	movs	r1, #1
    21e2:	203f      	movs	r0, #63	; 0x3f
    21e4:	4b37      	ldr	r3, [pc, #220]	; (22c4 <system_init+0x188>)
    21e6:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    21e8:	2101      	movs	r1, #1
    21ea:	203f      	movs	r0, #63	; 0x3f
    21ec:	4b37      	ldr	r3, [pc, #220]	; (22cc <system_init+0x190>)
    21ee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    21f0:	f04f 31ff 	mov.w	r1, #4294967295
    21f4:	203f      	movs	r0, #63	; 0x3f
    21f6:	4b34      	ldr	r3, [pc, #208]	; (22c8 <system_init+0x18c>)
    21f8:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    21fa:	2100      	movs	r1, #0
    21fc:	204d      	movs	r0, #77	; 0x4d
    21fe:	4b30      	ldr	r3, [pc, #192]	; (22c0 <system_init+0x184>)
    2200:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    2202:	2102      	movs	r1, #2
    2204:	204d      	movs	r0, #77	; 0x4d
    2206:	4b2f      	ldr	r3, [pc, #188]	; (22c4 <system_init+0x188>)
    2208:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    220a:	f04f 31ff 	mov.w	r1, #4294967295
    220e:	204d      	movs	r0, #77	; 0x4d
    2210:	4b2d      	ldr	r3, [pc, #180]	; (22c8 <system_init+0x18c>)
    2212:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    2214:	2101      	movs	r1, #1
    2216:	204e      	movs	r0, #78	; 0x4e
    2218:	4b29      	ldr	r3, [pc, #164]	; (22c0 <system_init+0x184>)
    221a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    221c:	2102      	movs	r1, #2
    221e:	204e      	movs	r0, #78	; 0x4e
    2220:	4b28      	ldr	r3, [pc, #160]	; (22c4 <system_init+0x188>)
    2222:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    2224:	f04f 31ff 	mov.w	r1, #4294967295
    2228:	204e      	movs	r0, #78	; 0x4e
    222a:	4b27      	ldr	r3, [pc, #156]	; (22c8 <system_init+0x18c>)
    222c:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    222e:	2100      	movs	r1, #0
    2230:	204f      	movs	r0, #79	; 0x4f
    2232:	4b23      	ldr	r3, [pc, #140]	; (22c0 <system_init+0x184>)
    2234:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    2236:	2102      	movs	r1, #2
    2238:	204f      	movs	r0, #79	; 0x4f
    223a:	4b22      	ldr	r3, [pc, #136]	; (22c4 <system_init+0x188>)
    223c:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    223e:	f04f 31ff 	mov.w	r1, #4294967295
    2242:	204f      	movs	r0, #79	; 0x4f
    2244:	4b20      	ldr	r3, [pc, #128]	; (22c8 <system_init+0x18c>)
    2246:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    2248:	2100      	movs	r1, #0
    224a:	2052      	movs	r0, #82	; 0x52
    224c:	4b1c      	ldr	r3, [pc, #112]	; (22c0 <system_init+0x184>)
    224e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    2250:	2102      	movs	r1, #2
    2252:	2052      	movs	r0, #82	; 0x52
    2254:	4b1b      	ldr	r3, [pc, #108]	; (22c4 <system_init+0x188>)
    2256:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    2258:	f04f 31ff 	mov.w	r1, #4294967295
    225c:	2052      	movs	r0, #82	; 0x52
    225e:	4b1a      	ldr	r3, [pc, #104]	; (22c8 <system_init+0x18c>)
    2260:	4798      	blx	r3

	CRC_CALC_init();
    2262:	4b1b      	ldr	r3, [pc, #108]	; (22d0 <system_init+0x194>)
    2264:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    2266:	4b1b      	ldr	r3, [pc, #108]	; (22d4 <system_init+0x198>)
    2268:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    226a:	4b1b      	ldr	r3, [pc, #108]	; (22d8 <system_init+0x19c>)
    226c:	4798      	blx	r3

	QSPI_N25Q256_init();
    226e:	4b1b      	ldr	r3, [pc, #108]	; (22dc <system_init+0x1a0>)
    2270:	4798      	blx	r3

	DATETIME_CLOCK_init();
    2272:	4b1b      	ldr	r3, [pc, #108]	; (22e0 <system_init+0x1a4>)
    2274:	4798      	blx	r3

	I2C_SHARED_init();
    2276:	4b1b      	ldr	r3, [pc, #108]	; (22e4 <system_init+0x1a8>)
    2278:	4798      	blx	r3

	SPI_TEMP_init();
    227a:	4b1b      	ldr	r3, [pc, #108]	; (22e8 <system_init+0x1ac>)
    227c:	4798      	blx	r3

	I2C_EXPANDER_init();
    227e:	4b1b      	ldr	r3, [pc, #108]	; (22ec <system_init+0x1b0>)
    2280:	4798      	blx	r3

	SPI_HI3593_init();
    2282:	4b1b      	ldr	r3, [pc, #108]	; (22f0 <system_init+0x1b4>)
    2284:	4798      	blx	r3

	I2C_EEPROM_init();
    2286:	4b1b      	ldr	r3, [pc, #108]	; (22f4 <system_init+0x1b8>)
    2288:	4798      	blx	r3

	TIMER_USB_init();
    228a:	4b1b      	ldr	r3, [pc, #108]	; (22f8 <system_init+0x1bc>)
    228c:	4798      	blx	r3
	TIMER_ARINC_init();
    228e:	4b1b      	ldr	r3, [pc, #108]	; (22fc <system_init+0x1c0>)
    2290:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    2292:	4b1b      	ldr	r3, [pc, #108]	; (2300 <system_init+0x1c4>)
    2294:	4798      	blx	r3
	TIMER_INTERFACE_init();
    2296:	4b1b      	ldr	r3, [pc, #108]	; (2304 <system_init+0x1c8>)
    2298:	4798      	blx	r3
	TIMER_EVENT_init();
    229a:	4b1b      	ldr	r3, [pc, #108]	; (2308 <system_init+0x1cc>)
    229c:	4798      	blx	r3
	LIVE_PULSE_init();
    229e:	4b1b      	ldr	r3, [pc, #108]	; (230c <system_init+0x1d0>)
    22a0:	4798      	blx	r3

	TIMER_HVAC_init();
    22a2:	4b1b      	ldr	r3, [pc, #108]	; (2310 <system_init+0x1d4>)
    22a4:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    22a6:	4b1b      	ldr	r3, [pc, #108]	; (2314 <system_init+0x1d8>)
    22a8:	4798      	blx	r3

	CDCUSB_init();
    22aa:	4b1b      	ldr	r3, [pc, #108]	; (2318 <system_init+0x1dc>)
    22ac:	4798      	blx	r3

	WATCHDOG_init();
    22ae:	4b1b      	ldr	r3, [pc, #108]	; (231c <system_init+0x1e0>)
    22b0:	4798      	blx	r3
	CAN_CCU_init();
    22b2:	4b1b      	ldr	r3, [pc, #108]	; (2320 <system_init+0x1e4>)
    22b4:	4798      	blx	r3
}
    22b6:	bf00      	nop
    22b8:	bd80      	pop	{r7, pc}
    22ba:	bf00      	nop
    22bc:	000016ad 	.word	0x000016ad
    22c0:	00001675 	.word	0x00001675
    22c4:	0000163d 	.word	0x0000163d
    22c8:	0000161d 	.word	0x0000161d
    22cc:	000015e9 	.word	0x000015e9
    22d0:	0000170d 	.word	0x0000170d
    22d4:	00001739 	.word	0x00001739
    22d8:	00001845 	.word	0x00001845
    22dc:	0000198d 	.word	0x0000198d
    22e0:	000019d1 	.word	0x000019d1
    22e4:	00001a61 	.word	0x00001a61
    22e8:	00001b2d 	.word	0x00001b2d
    22ec:	00001bc5 	.word	0x00001bc5
    22f0:	00001c91 	.word	0x00001c91
    22f4:	00001d29 	.word	0x00001d29
    22f8:	00001d55 	.word	0x00001d55
    22fc:	00001d9d 	.word	0x00001d9d
    2300:	00001de5 	.word	0x00001de5
    2304:	00001e2d 	.word	0x00001e2d
    2308:	00001e75 	.word	0x00001e75
    230c:	00001efd 	.word	0x00001efd
    2310:	00001f5d 	.word	0x00001f5d
    2314:	00001fb5 	.word	0x00001fb5
    2318:	00002079 	.word	0x00002079
    231c:	000020b1 	.word	0x000020b1
    2320:	000020f9 	.word	0x000020f9

00002324 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    2324:	b580      	push	{r7, lr}
    2326:	b084      	sub	sp, #16
    2328:	af00      	add	r7, sp, #0
    232a:	6078      	str	r0, [r7, #4]
    232c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    232e:	2300      	movs	r3, #0
    2330:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    2332:	687b      	ldr	r3, [r7, #4]
    2334:	2b00      	cmp	r3, #0
    2336:	bf14      	ite	ne
    2338:	2301      	movne	r3, #1
    233a:	2300      	moveq	r3, #0
    233c:	b2db      	uxtb	r3, r3
    233e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    2342:	4911      	ldr	r1, [pc, #68]	; (2388 <calendar_init+0x64>)
    2344:	4618      	mov	r0, r3
    2346:	4b11      	ldr	r3, [pc, #68]	; (238c <calendar_init+0x68>)
    2348:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    234a:	687b      	ldr	r3, [r7, #4]
    234c:	681a      	ldr	r2, [r3, #0]
    234e:	683b      	ldr	r3, [r7, #0]
    2350:	429a      	cmp	r2, r3
    2352:	d101      	bne.n	2358 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    2354:	2300      	movs	r3, #0
    2356:	e013      	b.n	2380 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    2358:	687b      	ldr	r3, [r7, #4]
    235a:	681b      	ldr	r3, [r3, #0]
    235c:	2b00      	cmp	r3, #0
    235e:	d002      	beq.n	2366 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    2360:	f06f 0311 	mvn.w	r3, #17
    2364:	e00c      	b.n	2380 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    2366:	687b      	ldr	r3, [r7, #4]
    2368:	683a      	ldr	r2, [r7, #0]
    236a:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    236c:	687b      	ldr	r3, [r7, #4]
    236e:	4618      	mov	r0, r3
    2370:	4b07      	ldr	r3, [pc, #28]	; (2390 <calendar_init+0x6c>)
    2372:	4798      	blx	r3
    2374:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    2376:	687b      	ldr	r3, [r7, #4]
    2378:	f240 72b2 	movw	r2, #1970	; 0x7b2
    237c:	619a      	str	r2, [r3, #24]

	return ret;
    237e:	68fb      	ldr	r3, [r7, #12]
}
    2380:	4618      	mov	r0, r3
    2382:	3710      	adds	r7, #16
    2384:	46bd      	mov	sp, r7
    2386:	bd80      	pop	{r7, pc}
    2388:	0000ff6c 	.word	0x0000ff6c
    238c:	00003d61 	.word	0x00003d61
    2390:	000060e9 	.word	0x000060e9

00002394 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    2394:	b580      	push	{r7, lr}
    2396:	b084      	sub	sp, #16
    2398:	af00      	add	r7, sp, #0
    239a:	6078      	str	r0, [r7, #4]
    239c:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    239e:	687b      	ldr	r3, [r7, #4]
    23a0:	2b00      	cmp	r3, #0
    23a2:	d004      	beq.n	23ae <can_async_init+0x1a>
    23a4:	683b      	ldr	r3, [r7, #0]
    23a6:	2b00      	cmp	r3, #0
    23a8:	d001      	beq.n	23ae <can_async_init+0x1a>
    23aa:	2301      	movs	r3, #1
    23ac:	e000      	b.n	23b0 <can_async_init+0x1c>
    23ae:	2300      	movs	r3, #0
    23b0:	f003 0301 	and.w	r3, r3, #1
    23b4:	b2db      	uxtb	r3, r3
    23b6:	2241      	movs	r2, #65	; 0x41
    23b8:	490e      	ldr	r1, [pc, #56]	; (23f4 <can_async_init+0x60>)
    23ba:	4618      	mov	r0, r3
    23bc:	4b0e      	ldr	r3, [pc, #56]	; (23f8 <can_async_init+0x64>)
    23be:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    23c0:	687b      	ldr	r3, [r7, #4]
    23c2:	6839      	ldr	r1, [r7, #0]
    23c4:	4618      	mov	r0, r3
    23c6:	4b0d      	ldr	r3, [pc, #52]	; (23fc <can_async_init+0x68>)
    23c8:	4798      	blx	r3
    23ca:	60f8      	str	r0, [r7, #12]
	if (rc) {
    23cc:	68fb      	ldr	r3, [r7, #12]
    23ce:	2b00      	cmp	r3, #0
    23d0:	d001      	beq.n	23d6 <can_async_init+0x42>
		return rc;
    23d2:	68fb      	ldr	r3, [r7, #12]
    23d4:	e009      	b.n	23ea <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    23d6:	687b      	ldr	r3, [r7, #4]
    23d8:	4a09      	ldr	r2, [pc, #36]	; (2400 <can_async_init+0x6c>)
    23da:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    23dc:	687b      	ldr	r3, [r7, #4]
    23de:	4a09      	ldr	r2, [pc, #36]	; (2404 <can_async_init+0x70>)
    23e0:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    23e2:	687b      	ldr	r3, [r7, #4]
    23e4:	4a08      	ldr	r2, [pc, #32]	; (2408 <can_async_init+0x74>)
    23e6:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    23e8:	2300      	movs	r3, #0
}
    23ea:	4618      	mov	r0, r3
    23ec:	3710      	adds	r7, #16
    23ee:	46bd      	mov	sp, r7
    23f0:	bd80      	pop	{r7, pc}
    23f2:	bf00      	nop
    23f4:	0000ff88 	.word	0x0000ff88
    23f8:	00003d61 	.word	0x00003d61
    23fc:	000042bd 	.word	0x000042bd
    2400:	0000240d 	.word	0x0000240d
    2404:	00002431 	.word	0x00002431
    2408:	00002455 	.word	0x00002455

0000240c <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    240c:	b580      	push	{r7, lr}
    240e:	b084      	sub	sp, #16
    2410:	af00      	add	r7, sp, #0
    2412:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2414:	687b      	ldr	r3, [r7, #4]
    2416:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    2418:	68fb      	ldr	r3, [r7, #12]
    241a:	69db      	ldr	r3, [r3, #28]
    241c:	2b00      	cmp	r3, #0
    241e:	d003      	beq.n	2428 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    2420:	68fb      	ldr	r3, [r7, #12]
    2422:	69db      	ldr	r3, [r3, #28]
    2424:	68f8      	ldr	r0, [r7, #12]
    2426:	4798      	blx	r3
	}
}
    2428:	bf00      	nop
    242a:	3710      	adds	r7, #16
    242c:	46bd      	mov	sp, r7
    242e:	bd80      	pop	{r7, pc}

00002430 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    2430:	b580      	push	{r7, lr}
    2432:	b084      	sub	sp, #16
    2434:	af00      	add	r7, sp, #0
    2436:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2438:	687b      	ldr	r3, [r7, #4]
    243a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    243c:	68fb      	ldr	r3, [r7, #12]
    243e:	6a1b      	ldr	r3, [r3, #32]
    2440:	2b00      	cmp	r3, #0
    2442:	d003      	beq.n	244c <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    2444:	68fb      	ldr	r3, [r7, #12]
    2446:	6a1b      	ldr	r3, [r3, #32]
    2448:	68f8      	ldr	r0, [r7, #12]
    244a:	4798      	blx	r3
	}
}
    244c:	bf00      	nop
    244e:	3710      	adds	r7, #16
    2450:	46bd      	mov	sp, r7
    2452:	bd80      	pop	{r7, pc}

00002454 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    2454:	b580      	push	{r7, lr}
    2456:	b084      	sub	sp, #16
    2458:	af00      	add	r7, sp, #0
    245a:	6078      	str	r0, [r7, #4]
    245c:	460b      	mov	r3, r1
    245e:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2460:	687b      	ldr	r3, [r7, #4]
    2462:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    2464:	68fb      	ldr	r3, [r7, #12]
    2466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2468:	2b00      	cmp	r3, #0
    246a:	d005      	beq.n	2478 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    246c:	68fb      	ldr	r3, [r7, #12]
    246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2470:	78fa      	ldrb	r2, [r7, #3]
    2472:	4611      	mov	r1, r2
    2474:	68f8      	ldr	r0, [r7, #12]
    2476:	4798      	blx	r3
	}
}
    2478:	bf00      	nop
    247a:	3710      	adds	r7, #16
    247c:	46bd      	mov	sp, r7
    247e:	bd80      	pop	{r7, pc}

00002480 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    2480:	b580      	push	{r7, lr}
    2482:	b082      	sub	sp, #8
    2484:	af00      	add	r7, sp, #0
    2486:	6078      	str	r0, [r7, #4]
    2488:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    248a:	687b      	ldr	r3, [r7, #4]
    248c:	2b00      	cmp	r3, #0
    248e:	d004      	beq.n	249a <crc_sync_init+0x1a>
    2490:	683b      	ldr	r3, [r7, #0]
    2492:	2b00      	cmp	r3, #0
    2494:	d001      	beq.n	249a <crc_sync_init+0x1a>
    2496:	2301      	movs	r3, #1
    2498:	e000      	b.n	249c <crc_sync_init+0x1c>
    249a:	2300      	movs	r3, #0
    249c:	f003 0301 	and.w	r3, r3, #1
    24a0:	b2db      	uxtb	r3, r3
    24a2:	222b      	movs	r2, #43	; 0x2b
    24a4:	4906      	ldr	r1, [pc, #24]	; (24c0 <crc_sync_init+0x40>)
    24a6:	4618      	mov	r0, r3
    24a8:	4b06      	ldr	r3, [pc, #24]	; (24c4 <crc_sync_init+0x44>)
    24aa:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    24ac:	687b      	ldr	r3, [r7, #4]
    24ae:	6839      	ldr	r1, [r7, #0]
    24b0:	4618      	mov	r0, r3
    24b2:	4b05      	ldr	r3, [pc, #20]	; (24c8 <crc_sync_init+0x48>)
    24b4:	4798      	blx	r3
    24b6:	4603      	mov	r3, r0
}
    24b8:	4618      	mov	r0, r3
    24ba:	3708      	adds	r7, #8
    24bc:	46bd      	mov	sp, r7
    24be:	bd80      	pop	{r7, pc}
    24c0:	0000ffa4 	.word	0x0000ffa4
    24c4:	00003d61 	.word	0x00003d61
    24c8:	000049c1 	.word	0x000049c1

000024cc <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    24cc:	b590      	push	{r4, r7, lr}
    24ce:	b083      	sub	sp, #12
    24d0:	af00      	add	r7, sp, #0
    24d2:	4603      	mov	r3, r0
    24d4:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    24d6:	4b07      	ldr	r3, [pc, #28]	; (24f4 <delay_us+0x28>)
    24d8:	681c      	ldr	r4, [r3, #0]
    24da:	88fb      	ldrh	r3, [r7, #6]
    24dc:	4618      	mov	r0, r3
    24de:	4b06      	ldr	r3, [pc, #24]	; (24f8 <delay_us+0x2c>)
    24e0:	4798      	blx	r3
    24e2:	4603      	mov	r3, r0
    24e4:	4619      	mov	r1, r3
    24e6:	4620      	mov	r0, r4
    24e8:	4b04      	ldr	r3, [pc, #16]	; (24fc <delay_us+0x30>)
    24ea:	4798      	blx	r3
}
    24ec:	bf00      	nop
    24ee:	370c      	adds	r7, #12
    24f0:	46bd      	mov	sp, r7
    24f2:	bd90      	pop	{r4, r7, pc}
    24f4:	20000a6c 	.word	0x20000a6c
    24f8:	00004715 	.word	0x00004715
    24fc:	000048a9 	.word	0x000048a9

00002500 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2500:	b590      	push	{r4, r7, lr}
    2502:	b083      	sub	sp, #12
    2504:	af00      	add	r7, sp, #0
    2506:	4603      	mov	r3, r0
    2508:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    250a:	4b07      	ldr	r3, [pc, #28]	; (2528 <delay_ms+0x28>)
    250c:	681c      	ldr	r4, [r3, #0]
    250e:	88fb      	ldrh	r3, [r7, #6]
    2510:	4618      	mov	r0, r3
    2512:	4b06      	ldr	r3, [pc, #24]	; (252c <delay_ms+0x2c>)
    2514:	4798      	blx	r3
    2516:	4603      	mov	r3, r0
    2518:	4619      	mov	r1, r3
    251a:	4620      	mov	r0, r4
    251c:	4b04      	ldr	r3, [pc, #16]	; (2530 <delay_ms+0x30>)
    251e:	4798      	blx	r3
}
    2520:	bf00      	nop
    2522:	370c      	adds	r7, #12
    2524:	46bd      	mov	sp, r7
    2526:	bd90      	pop	{r4, r7, pc}
    2528:	20000a6c 	.word	0x20000a6c
    252c:	00004881 	.word	0x00004881
    2530:	000048a9 	.word	0x000048a9

00002534 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2534:	b580      	push	{r7, lr}
    2536:	af00      	add	r7, sp, #0
	return _event_system_init();
    2538:	4b02      	ldr	r3, [pc, #8]	; (2544 <event_system_init+0x10>)
    253a:	4798      	blx	r3
    253c:	4603      	mov	r3, r0
}
    253e:	4618      	mov	r0, r3
    2540:	bd80      	pop	{r7, pc}
    2542:	bf00      	nop
    2544:	0000515d 	.word	0x0000515d

00002548 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    2548:	b580      	push	{r7, lr}
    254a:	b082      	sub	sp, #8
    254c:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    254e:	2300      	movs	r3, #0
    2550:	80fb      	strh	r3, [r7, #6]
    2552:	e00e      	b.n	2572 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    2554:	88fb      	ldrh	r3, [r7, #6]
    2556:	4a0c      	ldr	r2, [pc, #48]	; (2588 <ext_irq_init+0x40>)
    2558:	00db      	lsls	r3, r3, #3
    255a:	4413      	add	r3, r2
    255c:	f04f 32ff 	mov.w	r2, #4294967295
    2560:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    2562:	88fb      	ldrh	r3, [r7, #6]
    2564:	4a08      	ldr	r2, [pc, #32]	; (2588 <ext_irq_init+0x40>)
    2566:	2100      	movs	r1, #0
    2568:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    256c:	88fb      	ldrh	r3, [r7, #6]
    256e:	3301      	adds	r3, #1
    2570:	80fb      	strh	r3, [r7, #6]
    2572:	88fb      	ldrh	r3, [r7, #6]
    2574:	2b07      	cmp	r3, #7
    2576:	d9ed      	bls.n	2554 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    2578:	4804      	ldr	r0, [pc, #16]	; (258c <ext_irq_init+0x44>)
    257a:	4b05      	ldr	r3, [pc, #20]	; (2590 <ext_irq_init+0x48>)
    257c:	4798      	blx	r3
    257e:	4603      	mov	r3, r0
}
    2580:	4618      	mov	r0, r3
    2582:	3708      	adds	r7, #8
    2584:	46bd      	mov	sp, r7
    2586:	bd80      	pop	{r7, pc}
    2588:	20000a70 	.word	0x20000a70
    258c:	000026ed 	.word	0x000026ed
    2590:	00004d01 	.word	0x00004d01

00002594 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    2594:	b580      	push	{r7, lr}
    2596:	b086      	sub	sp, #24
    2598:	af00      	add	r7, sp, #0
    259a:	6078      	str	r0, [r7, #4]
    259c:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    259e:	2300      	movs	r3, #0
    25a0:	75fb      	strb	r3, [r7, #23]
    25a2:	2300      	movs	r3, #0
    25a4:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    25a6:	2300      	movs	r3, #0
    25a8:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    25aa:	e012      	b.n	25d2 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    25ac:	7dfb      	ldrb	r3, [r7, #23]
    25ae:	4a4d      	ldr	r2, [pc, #308]	; (26e4 <ext_irq_register+0x150>)
    25b0:	00db      	lsls	r3, r3, #3
    25b2:	4413      	add	r3, r2
    25b4:	685a      	ldr	r2, [r3, #4]
    25b6:	687b      	ldr	r3, [r7, #4]
    25b8:	429a      	cmp	r2, r3
    25ba:	d107      	bne.n	25cc <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    25bc:	7dfb      	ldrb	r3, [r7, #23]
    25be:	4949      	ldr	r1, [pc, #292]	; (26e4 <ext_irq_register+0x150>)
    25c0:	683a      	ldr	r2, [r7, #0]
    25c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    25c6:	2301      	movs	r3, #1
    25c8:	757b      	strb	r3, [r7, #21]
			break;
    25ca:	e005      	b.n	25d8 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    25cc:	7dfb      	ldrb	r3, [r7, #23]
    25ce:	3301      	adds	r3, #1
    25d0:	75fb      	strb	r3, [r7, #23]
    25d2:	7dfb      	ldrb	r3, [r7, #23]
    25d4:	2b07      	cmp	r3, #7
    25d6:	d9e9      	bls.n	25ac <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    25d8:	683b      	ldr	r3, [r7, #0]
    25da:	2b00      	cmp	r3, #0
    25dc:	d10e      	bne.n	25fc <ext_irq_register+0x68>
		if (!found) {
    25de:	7d7b      	ldrb	r3, [r7, #21]
    25e0:	f083 0301 	eor.w	r3, r3, #1
    25e4:	b2db      	uxtb	r3, r3
    25e6:	2b00      	cmp	r3, #0
    25e8:	d002      	beq.n	25f0 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    25ea:	f06f 030c 	mvn.w	r3, #12
    25ee:	e074      	b.n	26da <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    25f0:	2100      	movs	r1, #0
    25f2:	6878      	ldr	r0, [r7, #4]
    25f4:	4b3c      	ldr	r3, [pc, #240]	; (26e8 <ext_irq_register+0x154>)
    25f6:	4798      	blx	r3
    25f8:	4603      	mov	r3, r0
    25fa:	e06e      	b.n	26da <ext_irq_register+0x146>
	}

	if (!found) {
    25fc:	7d7b      	ldrb	r3, [r7, #21]
    25fe:	f083 0301 	eor.w	r3, r3, #1
    2602:	b2db      	uxtb	r3, r3
    2604:	2b00      	cmp	r3, #0
    2606:	d05a      	beq.n	26be <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2608:	2300      	movs	r3, #0
    260a:	75fb      	strb	r3, [r7, #23]
    260c:	e016      	b.n	263c <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    260e:	7dfb      	ldrb	r3, [r7, #23]
    2610:	4a34      	ldr	r2, [pc, #208]	; (26e4 <ext_irq_register+0x150>)
    2612:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2616:	2b00      	cmp	r3, #0
    2618:	d10d      	bne.n	2636 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    261a:	7dfb      	ldrb	r3, [r7, #23]
    261c:	4931      	ldr	r1, [pc, #196]	; (26e4 <ext_irq_register+0x150>)
    261e:	683a      	ldr	r2, [r7, #0]
    2620:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    2624:	7dfb      	ldrb	r3, [r7, #23]
    2626:	4a2f      	ldr	r2, [pc, #188]	; (26e4 <ext_irq_register+0x150>)
    2628:	00db      	lsls	r3, r3, #3
    262a:	4413      	add	r3, r2
    262c:	687a      	ldr	r2, [r7, #4]
    262e:	605a      	str	r2, [r3, #4]
				found           = true;
    2630:	2301      	movs	r3, #1
    2632:	757b      	strb	r3, [r7, #21]
				break;
    2634:	e005      	b.n	2642 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2636:	7dfb      	ldrb	r3, [r7, #23]
    2638:	3301      	adds	r3, #1
    263a:	75fb      	strb	r3, [r7, #23]
    263c:	7dfb      	ldrb	r3, [r7, #23]
    263e:	2b07      	cmp	r3, #7
    2640:	d9e5      	bls.n	260e <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2642:	e036      	b.n	26b2 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    2644:	7dfb      	ldrb	r3, [r7, #23]
    2646:	4a27      	ldr	r2, [pc, #156]	; (26e4 <ext_irq_register+0x150>)
    2648:	00db      	lsls	r3, r3, #3
    264a:	4413      	add	r3, r2
    264c:	685a      	ldr	r2, [r3, #4]
    264e:	7dbb      	ldrb	r3, [r7, #22]
    2650:	4924      	ldr	r1, [pc, #144]	; (26e4 <ext_irq_register+0x150>)
    2652:	00db      	lsls	r3, r3, #3
    2654:	440b      	add	r3, r1
    2656:	685b      	ldr	r3, [r3, #4]
    2658:	429a      	cmp	r2, r3
    265a:	d227      	bcs.n	26ac <ext_irq_register+0x118>
    265c:	7dbb      	ldrb	r3, [r7, #22]
    265e:	4a21      	ldr	r2, [pc, #132]	; (26e4 <ext_irq_register+0x150>)
    2660:	00db      	lsls	r3, r3, #3
    2662:	4413      	add	r3, r2
    2664:	685b      	ldr	r3, [r3, #4]
    2666:	f1b3 3fff 	cmp.w	r3, #4294967295
    266a:	d01f      	beq.n	26ac <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    266c:	7dbb      	ldrb	r3, [r7, #22]
    266e:	491d      	ldr	r1, [pc, #116]	; (26e4 <ext_irq_register+0x150>)
    2670:	f107 020c 	add.w	r2, r7, #12
    2674:	00db      	lsls	r3, r3, #3
    2676:	440b      	add	r3, r1
    2678:	e893 0003 	ldmia.w	r3, {r0, r1}
    267c:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    2680:	7dbb      	ldrb	r3, [r7, #22]
    2682:	7dfa      	ldrb	r2, [r7, #23]
    2684:	4817      	ldr	r0, [pc, #92]	; (26e4 <ext_irq_register+0x150>)
    2686:	4917      	ldr	r1, [pc, #92]	; (26e4 <ext_irq_register+0x150>)
    2688:	00db      	lsls	r3, r3, #3
    268a:	4403      	add	r3, r0
    268c:	00d2      	lsls	r2, r2, #3
    268e:	440a      	add	r2, r1
    2690:	e892 0003 	ldmia.w	r2, {r0, r1}
    2694:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    2698:	7dfb      	ldrb	r3, [r7, #23]
    269a:	4a12      	ldr	r2, [pc, #72]	; (26e4 <ext_irq_register+0x150>)
    269c:	00db      	lsls	r3, r3, #3
    269e:	4413      	add	r3, r2
    26a0:	f107 020c 	add.w	r2, r7, #12
    26a4:	e892 0003 	ldmia.w	r2, {r0, r1}
    26a8:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    26ac:	7dbb      	ldrb	r3, [r7, #22]
    26ae:	3301      	adds	r3, #1
    26b0:	75bb      	strb	r3, [r7, #22]
    26b2:	7dbb      	ldrb	r3, [r7, #22]
    26b4:	2b07      	cmp	r3, #7
    26b6:	d802      	bhi.n	26be <ext_irq_register+0x12a>
    26b8:	7dfb      	ldrb	r3, [r7, #23]
    26ba:	2b07      	cmp	r3, #7
    26bc:	d9c2      	bls.n	2644 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    26be:	7d7b      	ldrb	r3, [r7, #21]
    26c0:	f083 0301 	eor.w	r3, r3, #1
    26c4:	b2db      	uxtb	r3, r3
    26c6:	2b00      	cmp	r3, #0
    26c8:	d002      	beq.n	26d0 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    26ca:	f06f 030c 	mvn.w	r3, #12
    26ce:	e004      	b.n	26da <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    26d0:	2101      	movs	r1, #1
    26d2:	6878      	ldr	r0, [r7, #4]
    26d4:	4b04      	ldr	r3, [pc, #16]	; (26e8 <ext_irq_register+0x154>)
    26d6:	4798      	blx	r3
    26d8:	4603      	mov	r3, r0
}
    26da:	4618      	mov	r0, r3
    26dc:	3718      	adds	r7, #24
    26de:	46bd      	mov	sp, r7
    26e0:	bd80      	pop	{r7, pc}
    26e2:	bf00      	nop
    26e4:	20000a70 	.word	0x20000a70
    26e8:	00004e85 	.word	0x00004e85

000026ec <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    26ec:	b580      	push	{r7, lr}
    26ee:	b084      	sub	sp, #16
    26f0:	af00      	add	r7, sp, #0
    26f2:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    26f4:	2300      	movs	r3, #0
    26f6:	73fb      	strb	r3, [r7, #15]
    26f8:	2308      	movs	r3, #8
    26fa:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    26fc:	e02a      	b.n	2754 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    26fe:	7bba      	ldrb	r2, [r7, #14]
    2700:	7bfb      	ldrb	r3, [r7, #15]
    2702:	4413      	add	r3, r2
    2704:	105b      	asrs	r3, r3, #1
    2706:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    2708:	7b7b      	ldrb	r3, [r7, #13]
    270a:	2b07      	cmp	r3, #7
    270c:	d827      	bhi.n	275e <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    270e:	7b7b      	ldrb	r3, [r7, #13]
    2710:	4a16      	ldr	r2, [pc, #88]	; (276c <process_ext_irq+0x80>)
    2712:	00db      	lsls	r3, r3, #3
    2714:	4413      	add	r3, r2
    2716:	685a      	ldr	r2, [r3, #4]
    2718:	687b      	ldr	r3, [r7, #4]
    271a:	429a      	cmp	r2, r3
    271c:	d10b      	bne.n	2736 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    271e:	7b7b      	ldrb	r3, [r7, #13]
    2720:	4a12      	ldr	r2, [pc, #72]	; (276c <process_ext_irq+0x80>)
    2722:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2726:	2b00      	cmp	r3, #0
    2728:	d01b      	beq.n	2762 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    272a:	7b7b      	ldrb	r3, [r7, #13]
    272c:	4a0f      	ldr	r2, [pc, #60]	; (276c <process_ext_irq+0x80>)
    272e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2732:	4798      	blx	r3
			}
			return;
    2734:	e015      	b.n	2762 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    2736:	7b7b      	ldrb	r3, [r7, #13]
    2738:	4a0c      	ldr	r2, [pc, #48]	; (276c <process_ext_irq+0x80>)
    273a:	00db      	lsls	r3, r3, #3
    273c:	4413      	add	r3, r2
    273e:	685a      	ldr	r2, [r3, #4]
    2740:	687b      	ldr	r3, [r7, #4]
    2742:	429a      	cmp	r2, r3
    2744:	d203      	bcs.n	274e <process_ext_irq+0x62>
			lower = middle + 1;
    2746:	7b7b      	ldrb	r3, [r7, #13]
    2748:	3301      	adds	r3, #1
    274a:	73fb      	strb	r3, [r7, #15]
    274c:	e002      	b.n	2754 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    274e:	7b7b      	ldrb	r3, [r7, #13]
    2750:	3b01      	subs	r3, #1
    2752:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    2754:	7bba      	ldrb	r2, [r7, #14]
    2756:	7bfb      	ldrb	r3, [r7, #15]
    2758:	429a      	cmp	r2, r3
    275a:	d2d0      	bcs.n	26fe <process_ext_irq+0x12>
    275c:	e002      	b.n	2764 <process_ext_irq+0x78>
			return;
    275e:	bf00      	nop
    2760:	e000      	b.n	2764 <process_ext_irq+0x78>
			return;
    2762:	bf00      	nop
		}
	}
}
    2764:	3710      	adds	r7, #16
    2766:	46bd      	mov	sp, r7
    2768:	bd80      	pop	{r7, pc}
    276a:	bf00      	nop
    276c:	20000a70 	.word	0x20000a70

00002770 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    2770:	b580      	push	{r7, lr}
    2772:	b084      	sub	sp, #16
    2774:	af00      	add	r7, sp, #0
    2776:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    2778:	687b      	ldr	r3, [r7, #4]
    277a:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    277c:	687b      	ldr	r3, [r7, #4]
    277e:	885b      	ldrh	r3, [r3, #2]
    2780:	b29b      	uxth	r3, r3
    2782:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2786:	2b00      	cmp	r3, #0
    2788:	d107      	bne.n	279a <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    278a:	68fb      	ldr	r3, [r7, #12]
    278c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    278e:	2b00      	cmp	r3, #0
    2790:	d003      	beq.n	279a <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    2792:	68fb      	ldr	r3, [r7, #12]
    2794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2796:	68f8      	ldr	r0, [r7, #12]
    2798:	4798      	blx	r3
		}
	}
}
    279a:	bf00      	nop
    279c:	3710      	adds	r7, #16
    279e:	46bd      	mov	sp, r7
    27a0:	bd80      	pop	{r7, pc}

000027a2 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    27a2:	b580      	push	{r7, lr}
    27a4:	b084      	sub	sp, #16
    27a6:	af00      	add	r7, sp, #0
    27a8:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    27aa:	687b      	ldr	r3, [r7, #4]
    27ac:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    27ae:	687b      	ldr	r3, [r7, #4]
    27b0:	885b      	ldrh	r3, [r3, #2]
    27b2:	b29b      	uxth	r3, r3
    27b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    27b8:	2b00      	cmp	r3, #0
    27ba:	d107      	bne.n	27cc <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    27bc:	68fb      	ldr	r3, [r7, #12]
    27be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    27c0:	2b00      	cmp	r3, #0
    27c2:	d003      	beq.n	27cc <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    27c4:	68fb      	ldr	r3, [r7, #12]
    27c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    27c8:	68f8      	ldr	r0, [r7, #12]
    27ca:	4798      	blx	r3
		}
	}
}
    27cc:	bf00      	nop
    27ce:	3710      	adds	r7, #16
    27d0:	46bd      	mov	sp, r7
    27d2:	bd80      	pop	{r7, pc}

000027d4 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    27d4:	b580      	push	{r7, lr}
    27d6:	b084      	sub	sp, #16
    27d8:	af00      	add	r7, sp, #0
    27da:	6078      	str	r0, [r7, #4]
    27dc:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    27de:	687b      	ldr	r3, [r7, #4]
    27e0:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    27e2:	687b      	ldr	r3, [r7, #4]
    27e4:	885b      	ldrh	r3, [r3, #2]
    27e6:	b29b      	uxth	r3, r3
    27e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
    27ec:	2b00      	cmp	r3, #0
    27ee:	d108      	bne.n	2802 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    27f0:	68fb      	ldr	r3, [r7, #12]
    27f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    27f4:	2b00      	cmp	r3, #0
    27f6:	d004      	beq.n	2802 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    27f8:	68fb      	ldr	r3, [r7, #12]
    27fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    27fc:	6839      	ldr	r1, [r7, #0]
    27fe:	68f8      	ldr	r0, [r7, #12]
    2800:	4798      	blx	r3
		}
	}
}
    2802:	bf00      	nop
    2804:	3710      	adds	r7, #16
    2806:	46bd      	mov	sp, r7
    2808:	bd80      	pop	{r7, pc}
	...

0000280c <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    280c:	b580      	push	{r7, lr}
    280e:	b08a      	sub	sp, #40	; 0x28
    2810:	af00      	add	r7, sp, #0
    2812:	60f8      	str	r0, [r7, #12]
    2814:	60b9      	str	r1, [r7, #8]
    2816:	4613      	mov	r3, r2
    2818:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    281a:	68fb      	ldr	r3, [r7, #12]
    281c:	3b28      	subs	r3, #40	; 0x28
    281e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    2820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2822:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    2824:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2826:	88fb      	ldrh	r3, [r7, #6]
    2828:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    282a:	f248 0301 	movw	r3, #32769	; 0x8001
    282e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2830:	68bb      	ldr	r3, [r7, #8]
    2832:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    2834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2836:	f107 0214 	add.w	r2, r7, #20
    283a:	4611      	mov	r1, r2
    283c:	4618      	mov	r0, r3
    283e:	4b06      	ldr	r3, [pc, #24]	; (2858 <i2c_m_async_read+0x4c>)
    2840:	4798      	blx	r3
    2842:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    2844:	6a3b      	ldr	r3, [r7, #32]
    2846:	2b00      	cmp	r3, #0
    2848:	d001      	beq.n	284e <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    284a:	6a3b      	ldr	r3, [r7, #32]
    284c:	e000      	b.n	2850 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    284e:	88fb      	ldrh	r3, [r7, #6]
}
    2850:	4618      	mov	r0, r3
    2852:	3728      	adds	r7, #40	; 0x28
    2854:	46bd      	mov	sp, r7
    2856:	bd80      	pop	{r7, pc}
    2858:	00006f49 	.word	0x00006f49

0000285c <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    285c:	b580      	push	{r7, lr}
    285e:	b08a      	sub	sp, #40	; 0x28
    2860:	af00      	add	r7, sp, #0
    2862:	60f8      	str	r0, [r7, #12]
    2864:	60b9      	str	r1, [r7, #8]
    2866:	4613      	mov	r3, r2
    2868:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    286a:	68fb      	ldr	r3, [r7, #12]
    286c:	3b28      	subs	r3, #40	; 0x28
    286e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    2870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2872:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    2874:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2876:	88fb      	ldrh	r3, [r7, #6]
    2878:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    287a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    287e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2880:	68bb      	ldr	r3, [r7, #8]
    2882:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    2884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2886:	f107 0214 	add.w	r2, r7, #20
    288a:	4611      	mov	r1, r2
    288c:	4618      	mov	r0, r3
    288e:	4b06      	ldr	r3, [pc, #24]	; (28a8 <i2c_m_async_write+0x4c>)
    2890:	4798      	blx	r3
    2892:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    2894:	6a3b      	ldr	r3, [r7, #32]
    2896:	2b00      	cmp	r3, #0
    2898:	d001      	beq.n	289e <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    289a:	6a3b      	ldr	r3, [r7, #32]
    289c:	e000      	b.n	28a0 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    289e:	88fb      	ldrh	r3, [r7, #6]
}
    28a0:	4618      	mov	r0, r3
    28a2:	3728      	adds	r7, #40	; 0x28
    28a4:	46bd      	mov	sp, r7
    28a6:	bd80      	pop	{r7, pc}
    28a8:	00006f49 	.word	0x00006f49

000028ac <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    28ac:	b580      	push	{r7, lr}
    28ae:	b084      	sub	sp, #16
    28b0:	af00      	add	r7, sp, #0
    28b2:	6078      	str	r0, [r7, #4]
    28b4:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    28b6:	687b      	ldr	r3, [r7, #4]
    28b8:	2b00      	cmp	r3, #0
    28ba:	bf14      	ite	ne
    28bc:	2301      	movne	r3, #1
    28be:	2300      	moveq	r3, #0
    28c0:	b2db      	uxtb	r3, r3
    28c2:	2289      	movs	r2, #137	; 0x89
    28c4:	4915      	ldr	r1, [pc, #84]	; (291c <i2c_m_async_init+0x70>)
    28c6:	4618      	mov	r0, r3
    28c8:	4b15      	ldr	r3, [pc, #84]	; (2920 <i2c_m_async_init+0x74>)
    28ca:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    28cc:	687b      	ldr	r3, [r7, #4]
    28ce:	6839      	ldr	r1, [r7, #0]
    28d0:	4618      	mov	r0, r3
    28d2:	4b14      	ldr	r3, [pc, #80]	; (2924 <i2c_m_async_init+0x78>)
    28d4:	4798      	blx	r3
    28d6:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    28d8:	68fb      	ldr	r3, [r7, #12]
    28da:	2b00      	cmp	r3, #0
    28dc:	d001      	beq.n	28e2 <i2c_m_async_init+0x36>
		return init_status;
    28de:	68fb      	ldr	r3, [r7, #12]
    28e0:	e018      	b.n	2914 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    28e2:	687b      	ldr	r3, [r7, #4]
    28e4:	4a10      	ldr	r2, [pc, #64]	; (2928 <i2c_m_async_init+0x7c>)
    28e6:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    28e8:	687b      	ldr	r3, [r7, #4]
    28ea:	4a10      	ldr	r2, [pc, #64]	; (292c <i2c_m_async_init+0x80>)
    28ec:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    28ee:	687b      	ldr	r3, [r7, #4]
    28f0:	4a0f      	ldr	r2, [pc, #60]	; (2930 <i2c_m_async_init+0x84>)
    28f2:	2101      	movs	r1, #1
    28f4:	4618      	mov	r0, r3
    28f6:	4b0f      	ldr	r3, [pc, #60]	; (2934 <i2c_m_async_init+0x88>)
    28f8:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    28fa:	687b      	ldr	r3, [r7, #4]
    28fc:	4a0e      	ldr	r2, [pc, #56]	; (2938 <i2c_m_async_init+0x8c>)
    28fe:	2102      	movs	r1, #2
    2900:	4618      	mov	r0, r3
    2902:	4b0c      	ldr	r3, [pc, #48]	; (2934 <i2c_m_async_init+0x88>)
    2904:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    2906:	687b      	ldr	r3, [r7, #4]
    2908:	4a0c      	ldr	r2, [pc, #48]	; (293c <i2c_m_async_init+0x90>)
    290a:	2100      	movs	r1, #0
    290c:	4618      	mov	r0, r3
    290e:	4b09      	ldr	r3, [pc, #36]	; (2934 <i2c_m_async_init+0x88>)
    2910:	4798      	blx	r3

	return ERR_NONE;
    2912:	2300      	movs	r3, #0
}
    2914:	4618      	mov	r0, r3
    2916:	3710      	adds	r7, #16
    2918:	46bd      	mov	sp, r7
    291a:	bd80      	pop	{r7, pc}
    291c:	0000ffc0 	.word	0x0000ffc0
    2920:	00003d61 	.word	0x00003d61
    2924:	00006d99 	.word	0x00006d99
    2928:	0000280d 	.word	0x0000280d
    292c:	0000285d 	.word	0x0000285d
    2930:	00002771 	.word	0x00002771
    2934:	0000701d 	.word	0x0000701d
    2938:	000027a3 	.word	0x000027a3
    293c:	000027d5 	.word	0x000027d5

00002940 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    2940:	b580      	push	{r7, lr}
    2942:	b08a      	sub	sp, #40	; 0x28
    2944:	af00      	add	r7, sp, #0
    2946:	60f8      	str	r0, [r7, #12]
    2948:	60b9      	str	r1, [r7, #8]
    294a:	4613      	mov	r3, r2
    294c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    294e:	68fb      	ldr	r3, [r7, #12]
    2950:	3b14      	subs	r3, #20
    2952:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2956:	8b9b      	ldrh	r3, [r3, #28]
    2958:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    295a:	88fb      	ldrh	r3, [r7, #6]
    295c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    295e:	f248 0301 	movw	r3, #32769	; 0x8001
    2962:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2964:	68bb      	ldr	r3, [r7, #8]
    2966:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    296a:	f107 0214 	add.w	r2, r7, #20
    296e:	4611      	mov	r1, r2
    2970:	4618      	mov	r0, r3
    2972:	4b06      	ldr	r3, [pc, #24]	; (298c <i2c_m_sync_read+0x4c>)
    2974:	4798      	blx	r3
    2976:	6238      	str	r0, [r7, #32]

	if (ret) {
    2978:	6a3b      	ldr	r3, [r7, #32]
    297a:	2b00      	cmp	r3, #0
    297c:	d001      	beq.n	2982 <i2c_m_sync_read+0x42>
		return ret;
    297e:	6a3b      	ldr	r3, [r7, #32]
    2980:	e000      	b.n	2984 <i2c_m_sync_read+0x44>
	}

	return n;
    2982:	88fb      	ldrh	r3, [r7, #6]
}
    2984:	4618      	mov	r0, r3
    2986:	3728      	adds	r7, #40	; 0x28
    2988:	46bd      	mov	sp, r7
    298a:	bd80      	pop	{r7, pc}
    298c:	00007265 	.word	0x00007265

00002990 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    2990:	b580      	push	{r7, lr}
    2992:	b08a      	sub	sp, #40	; 0x28
    2994:	af00      	add	r7, sp, #0
    2996:	60f8      	str	r0, [r7, #12]
    2998:	60b9      	str	r1, [r7, #8]
    299a:	4613      	mov	r3, r2
    299c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    299e:	68fb      	ldr	r3, [r7, #12]
    29a0:	3b14      	subs	r3, #20
    29a2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    29a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    29a6:	8b9b      	ldrh	r3, [r3, #28]
    29a8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    29aa:	88fb      	ldrh	r3, [r7, #6]
    29ac:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    29ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    29b2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    29b4:	68bb      	ldr	r3, [r7, #8]
    29b6:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    29b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    29ba:	f107 0214 	add.w	r2, r7, #20
    29be:	4611      	mov	r1, r2
    29c0:	4618      	mov	r0, r3
    29c2:	4b06      	ldr	r3, [pc, #24]	; (29dc <i2c_m_sync_write+0x4c>)
    29c4:	4798      	blx	r3
    29c6:	6238      	str	r0, [r7, #32]

	if (ret) {
    29c8:	6a3b      	ldr	r3, [r7, #32]
    29ca:	2b00      	cmp	r3, #0
    29cc:	d001      	beq.n	29d2 <i2c_m_sync_write+0x42>
		return ret;
    29ce:	6a3b      	ldr	r3, [r7, #32]
    29d0:	e000      	b.n	29d4 <i2c_m_sync_write+0x44>
	}

	return n;
    29d2:	88fb      	ldrh	r3, [r7, #6]
}
    29d4:	4618      	mov	r0, r3
    29d6:	3728      	adds	r7, #40	; 0x28
    29d8:	46bd      	mov	sp, r7
    29da:	bd80      	pop	{r7, pc}
    29dc:	00007265 	.word	0x00007265

000029e0 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    29e0:	b580      	push	{r7, lr}
    29e2:	b084      	sub	sp, #16
    29e4:	af00      	add	r7, sp, #0
    29e6:	6078      	str	r0, [r7, #4]
    29e8:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    29ea:	687b      	ldr	r3, [r7, #4]
    29ec:	2b00      	cmp	r3, #0
    29ee:	bf14      	ite	ne
    29f0:	2301      	movne	r3, #1
    29f2:	2300      	moveq	r3, #0
    29f4:	b2db      	uxtb	r3, r3
    29f6:	225e      	movs	r2, #94	; 0x5e
    29f8:	490c      	ldr	r1, [pc, #48]	; (2a2c <i2c_m_sync_init+0x4c>)
    29fa:	4618      	mov	r0, r3
    29fc:	4b0c      	ldr	r3, [pc, #48]	; (2a30 <i2c_m_sync_init+0x50>)
    29fe:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2a00:	687b      	ldr	r3, [r7, #4]
    2a02:	6839      	ldr	r1, [r7, #0]
    2a04:	4618      	mov	r0, r3
    2a06:	4b0b      	ldr	r3, [pc, #44]	; (2a34 <i2c_m_sync_init+0x54>)
    2a08:	4798      	blx	r3
    2a0a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2a0c:	68fb      	ldr	r3, [r7, #12]
    2a0e:	2b00      	cmp	r3, #0
    2a10:	d001      	beq.n	2a16 <i2c_m_sync_init+0x36>
		return init_status;
    2a12:	68fb      	ldr	r3, [r7, #12]
    2a14:	e006      	b.n	2a24 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    2a16:	687b      	ldr	r3, [r7, #4]
    2a18:	4a07      	ldr	r2, [pc, #28]	; (2a38 <i2c_m_sync_init+0x58>)
    2a1a:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    2a1c:	687b      	ldr	r3, [r7, #4]
    2a1e:	4a07      	ldr	r2, [pc, #28]	; (2a3c <i2c_m_sync_init+0x5c>)
    2a20:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    2a22:	2300      	movs	r3, #0
}
    2a24:	4618      	mov	r0, r3
    2a26:	3710      	adds	r7, #16
    2a28:	46bd      	mov	sp, r7
    2a2a:	bd80      	pop	{r7, pc}
    2a2c:	0000ffe0 	.word	0x0000ffe0
    2a30:	00003d61 	.word	0x00003d61
    2a34:	00007061 	.word	0x00007061
    2a38:	00002941 	.word	0x00002941
    2a3c:	00002991 	.word	0x00002991

00002a40 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    2a40:	b580      	push	{r7, lr}
    2a42:	b082      	sub	sp, #8
    2a44:	af00      	add	r7, sp, #0
    2a46:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    2a48:	687b      	ldr	r3, [r7, #4]
    2a4a:	4618      	mov	r0, r3
    2a4c:	4b03      	ldr	r3, [pc, #12]	; (2a5c <i2c_m_sync_enable+0x1c>)
    2a4e:	4798      	blx	r3
    2a50:	4603      	mov	r3, r0
}
    2a52:	4618      	mov	r0, r3
    2a54:	3708      	adds	r7, #8
    2a56:	46bd      	mov	sp, r7
    2a58:	bd80      	pop	{r7, pc}
    2a5a:	bf00      	nop
    2a5c:	000070a9 	.word	0x000070a9

00002a60 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    2a60:	b480      	push	{r7}
    2a62:	b085      	sub	sp, #20
    2a64:	af00      	add	r7, sp, #0
    2a66:	60f8      	str	r0, [r7, #12]
    2a68:	460b      	mov	r3, r1
    2a6a:	607a      	str	r2, [r7, #4]
    2a6c:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    2a6e:	897b      	ldrh	r3, [r7, #10]
    2a70:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2a74:	b21a      	sxth	r2, r3
    2a76:	687b      	ldr	r3, [r7, #4]
    2a78:	b21b      	sxth	r3, r3
    2a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2a7e:	b21b      	sxth	r3, r3
    2a80:	4313      	orrs	r3, r2
    2a82:	b21b      	sxth	r3, r3
    2a84:	b29a      	uxth	r2, r3
    2a86:	68fb      	ldr	r3, [r7, #12]
    2a88:	839a      	strh	r2, [r3, #28]
    2a8a:	68fb      	ldr	r3, [r7, #12]
    2a8c:	8b9b      	ldrh	r3, [r3, #28]
}
    2a8e:	4618      	mov	r0, r3
    2a90:	3714      	adds	r7, #20
    2a92:	46bd      	mov	sp, r7
    2a94:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a98:	4770      	bx	lr

00002a9a <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    2a9a:	b480      	push	{r7}
    2a9c:	b083      	sub	sp, #12
    2a9e:	af00      	add	r7, sp, #0
    2aa0:	6078      	str	r0, [r7, #4]
    2aa2:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    2aa4:	687b      	ldr	r3, [r7, #4]
    2aa6:	f103 0214 	add.w	r2, r3, #20
    2aaa:	683b      	ldr	r3, [r7, #0]
    2aac:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    2aae:	2300      	movs	r3, #0
}
    2ab0:	4618      	mov	r0, r3
    2ab2:	370c      	adds	r7, #12
    2ab4:	46bd      	mov	sp, r7
    2ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2aba:	4770      	bx	lr

00002abc <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    2abc:	b580      	push	{r7, lr}
    2abe:	b084      	sub	sp, #16
    2ac0:	af00      	add	r7, sp, #0
    2ac2:	60f8      	str	r0, [r7, #12]
    2ac4:	60b9      	str	r1, [r7, #8]
    2ac6:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2ac8:	68fb      	ldr	r3, [r7, #12]
    2aca:	2b00      	cmp	r3, #0
    2acc:	d004      	beq.n	2ad8 <pwm_init+0x1c>
    2ace:	68bb      	ldr	r3, [r7, #8]
    2ad0:	2b00      	cmp	r3, #0
    2ad2:	d001      	beq.n	2ad8 <pwm_init+0x1c>
    2ad4:	2301      	movs	r3, #1
    2ad6:	e000      	b.n	2ada <pwm_init+0x1e>
    2ad8:	2300      	movs	r3, #0
    2ada:	f003 0301 	and.w	r3, r3, #1
    2ade:	b2db      	uxtb	r3, r3
    2ae0:	2233      	movs	r2, #51	; 0x33
    2ae2:	490a      	ldr	r1, [pc, #40]	; (2b0c <pwm_init+0x50>)
    2ae4:	4618      	mov	r0, r3
    2ae6:	4b0a      	ldr	r3, [pc, #40]	; (2b10 <pwm_init+0x54>)
    2ae8:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    2aea:	68fb      	ldr	r3, [r7, #12]
    2aec:	68b9      	ldr	r1, [r7, #8]
    2aee:	4618      	mov	r0, r3
    2af0:	4b08      	ldr	r3, [pc, #32]	; (2b14 <pwm_init+0x58>)
    2af2:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2af4:	68fb      	ldr	r3, [r7, #12]
    2af6:	4a08      	ldr	r2, [pc, #32]	; (2b18 <pwm_init+0x5c>)
    2af8:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    2afa:	68fb      	ldr	r3, [r7, #12]
    2afc:	4a07      	ldr	r2, [pc, #28]	; (2b1c <pwm_init+0x60>)
    2afe:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2b00:	2300      	movs	r3, #0
}
    2b02:	4618      	mov	r0, r3
    2b04:	3710      	adds	r7, #16
    2b06:	46bd      	mov	sp, r7
    2b08:	bd80      	pop	{r7, pc}
    2b0a:	bf00      	nop
    2b0c:	0000fffc 	.word	0x0000fffc
    2b10:	00003d61 	.word	0x00003d61
    2b14:	0000896d 	.word	0x0000896d
    2b18:	00002b75 	.word	0x00002b75
    2b1c:	00002b99 	.word	0x00002b99

00002b20 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    2b20:	b580      	push	{r7, lr}
    2b22:	b082      	sub	sp, #8
    2b24:	af00      	add	r7, sp, #0
    2b26:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2b28:	687b      	ldr	r3, [r7, #4]
    2b2a:	2b00      	cmp	r3, #0
    2b2c:	bf14      	ite	ne
    2b2e:	2301      	movne	r3, #1
    2b30:	2300      	moveq	r3, #0
    2b32:	b2db      	uxtb	r3, r3
    2b34:	224a      	movs	r2, #74	; 0x4a
    2b36:	490b      	ldr	r1, [pc, #44]	; (2b64 <pwm_enable+0x44>)
    2b38:	4618      	mov	r0, r3
    2b3a:	4b0b      	ldr	r3, [pc, #44]	; (2b68 <pwm_enable+0x48>)
    2b3c:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    2b3e:	687b      	ldr	r3, [r7, #4]
    2b40:	4618      	mov	r0, r3
    2b42:	4b0a      	ldr	r3, [pc, #40]	; (2b6c <pwm_enable+0x4c>)
    2b44:	4798      	blx	r3
    2b46:	4603      	mov	r3, r0
    2b48:	2b00      	cmp	r3, #0
    2b4a:	d002      	beq.n	2b52 <pwm_enable+0x32>
		return ERR_DENIED;
    2b4c:	f06f 0310 	mvn.w	r3, #16
    2b50:	e004      	b.n	2b5c <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    2b52:	687b      	ldr	r3, [r7, #4]
    2b54:	4618      	mov	r0, r3
    2b56:	4b06      	ldr	r3, [pc, #24]	; (2b70 <pwm_enable+0x50>)
    2b58:	4798      	blx	r3

	return ERR_NONE;
    2b5a:	2300      	movs	r3, #0
}
    2b5c:	4618      	mov	r0, r3
    2b5e:	3708      	adds	r7, #8
    2b60:	46bd      	mov	sp, r7
    2b62:	bd80      	pop	{r7, pc}
    2b64:	0000fffc 	.word	0x0000fffc
    2b68:	00003d61 	.word	0x00003d61
    2b6c:	00008d5d 	.word	0x00008d5d
    2b70:	00008c19 	.word	0x00008c19

00002b74 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2b74:	b580      	push	{r7, lr}
    2b76:	b084      	sub	sp, #16
    2b78:	af00      	add	r7, sp, #0
    2b7a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2b7c:	687b      	ldr	r3, [r7, #4]
    2b7e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    2b80:	68fb      	ldr	r3, [r7, #12]
    2b82:	695b      	ldr	r3, [r3, #20]
    2b84:	2b00      	cmp	r3, #0
    2b86:	d003      	beq.n	2b90 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2b88:	68fb      	ldr	r3, [r7, #12]
    2b8a:	695b      	ldr	r3, [r3, #20]
    2b8c:	68f8      	ldr	r0, [r7, #12]
    2b8e:	4798      	blx	r3
	}
}
    2b90:	bf00      	nop
    2b92:	3710      	adds	r7, #16
    2b94:	46bd      	mov	sp, r7
    2b96:	bd80      	pop	{r7, pc}

00002b98 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2b98:	b580      	push	{r7, lr}
    2b9a:	b084      	sub	sp, #16
    2b9c:	af00      	add	r7, sp, #0
    2b9e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2ba0:	687b      	ldr	r3, [r7, #4]
    2ba2:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2ba4:	68fb      	ldr	r3, [r7, #12]
    2ba6:	699b      	ldr	r3, [r3, #24]
    2ba8:	2b00      	cmp	r3, #0
    2baa:	d003      	beq.n	2bb4 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2bac:	68fb      	ldr	r3, [r7, #12]
    2bae:	699b      	ldr	r3, [r3, #24]
    2bb0:	68f8      	ldr	r0, [r7, #12]
    2bb2:	4798      	blx	r3
	}
}
    2bb4:	bf00      	nop
    2bb6:	3710      	adds	r7, #16
    2bb8:	46bd      	mov	sp, r7
    2bba:	bd80      	pop	{r7, pc}

00002bbc <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2bbc:	b580      	push	{r7, lr}
    2bbe:	b082      	sub	sp, #8
    2bc0:	af00      	add	r7, sp, #0
    2bc2:	6078      	str	r0, [r7, #4]
    2bc4:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2bc6:	687b      	ldr	r3, [r7, #4]
    2bc8:	2b00      	cmp	r3, #0
    2bca:	d004      	beq.n	2bd6 <qspi_sync_init+0x1a>
    2bcc:	683b      	ldr	r3, [r7, #0]
    2bce:	2b00      	cmp	r3, #0
    2bd0:	d001      	beq.n	2bd6 <qspi_sync_init+0x1a>
    2bd2:	2301      	movs	r3, #1
    2bd4:	e000      	b.n	2bd8 <qspi_sync_init+0x1c>
    2bd6:	2300      	movs	r3, #0
    2bd8:	f003 0301 	and.w	r3, r3, #1
    2bdc:	b2db      	uxtb	r3, r3
    2bde:	2231      	movs	r2, #49	; 0x31
    2be0:	4906      	ldr	r1, [pc, #24]	; (2bfc <qspi_sync_init+0x40>)
    2be2:	4618      	mov	r0, r3
    2be4:	4b06      	ldr	r3, [pc, #24]	; (2c00 <qspi_sync_init+0x44>)
    2be6:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2be8:	687b      	ldr	r3, [r7, #4]
    2bea:	6839      	ldr	r1, [r7, #0]
    2bec:	4618      	mov	r0, r3
    2bee:	4b05      	ldr	r3, [pc, #20]	; (2c04 <qspi_sync_init+0x48>)
    2bf0:	4798      	blx	r3
    2bf2:	4603      	mov	r3, r0
}
    2bf4:	4618      	mov	r0, r3
    2bf6:	3708      	adds	r7, #8
    2bf8:	46bd      	mov	sp, r7
    2bfa:	bd80      	pop	{r7, pc}
    2bfc:	00010014 	.word	0x00010014
    2c00:	00003d61 	.word	0x00003d61
    2c04:	00005d25 	.word	0x00005d25

00002c08 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2c08:	b580      	push	{r7, lr}
    2c0a:	b082      	sub	sp, #8
    2c0c:	af00      	add	r7, sp, #0
    2c0e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2c10:	687b      	ldr	r3, [r7, #4]
    2c12:	2b00      	cmp	r3, #0
    2c14:	bf14      	ite	ne
    2c16:	2301      	movne	r3, #1
    2c18:	2300      	moveq	r3, #0
    2c1a:	b2db      	uxtb	r3, r3
    2c1c:	223f      	movs	r2, #63	; 0x3f
    2c1e:	4906      	ldr	r1, [pc, #24]	; (2c38 <qspi_sync_enable+0x30>)
    2c20:	4618      	mov	r0, r3
    2c22:	4b06      	ldr	r3, [pc, #24]	; (2c3c <qspi_sync_enable+0x34>)
    2c24:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2c26:	687b      	ldr	r3, [r7, #4]
    2c28:	4618      	mov	r0, r3
    2c2a:	4b05      	ldr	r3, [pc, #20]	; (2c40 <qspi_sync_enable+0x38>)
    2c2c:	4798      	blx	r3
    2c2e:	4603      	mov	r3, r0
}
    2c30:	4618      	mov	r0, r3
    2c32:	3708      	adds	r7, #8
    2c34:	46bd      	mov	sp, r7
    2c36:	bd80      	pop	{r7, pc}
    2c38:	00010014 	.word	0x00010014
    2c3c:	00003d61 	.word	0x00003d61
    2c40:	00005d99 	.word	0x00005d99

00002c44 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2c44:	b580      	push	{r7, lr}
    2c46:	b082      	sub	sp, #8
    2c48:	af00      	add	r7, sp, #0
    2c4a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2c4c:	687b      	ldr	r3, [r7, #4]
    2c4e:	2b00      	cmp	r3, #0
    2c50:	bf14      	ite	ne
    2c52:	2301      	movne	r3, #1
    2c54:	2300      	moveq	r3, #0
    2c56:	b2db      	uxtb	r3, r3
    2c58:	2246      	movs	r2, #70	; 0x46
    2c5a:	4906      	ldr	r1, [pc, #24]	; (2c74 <qspi_sync_disable+0x30>)
    2c5c:	4618      	mov	r0, r3
    2c5e:	4b06      	ldr	r3, [pc, #24]	; (2c78 <qspi_sync_disable+0x34>)
    2c60:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    2c62:	687b      	ldr	r3, [r7, #4]
    2c64:	4618      	mov	r0, r3
    2c66:	4b05      	ldr	r3, [pc, #20]	; (2c7c <qspi_sync_disable+0x38>)
    2c68:	4798      	blx	r3
    2c6a:	4603      	mov	r3, r0
}
    2c6c:	4618      	mov	r0, r3
    2c6e:	3708      	adds	r7, #8
    2c70:	46bd      	mov	sp, r7
    2c72:	bd80      	pop	{r7, pc}
    2c74:	00010014 	.word	0x00010014
    2c78:	00003d61 	.word	0x00003d61
    2c7c:	00005dbd 	.word	0x00005dbd

00002c80 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2c80:	b580      	push	{r7, lr}
    2c82:	b082      	sub	sp, #8
    2c84:	af00      	add	r7, sp, #0
    2c86:	6078      	str	r0, [r7, #4]
    2c88:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2c8a:	687b      	ldr	r3, [r7, #4]
    2c8c:	2b00      	cmp	r3, #0
    2c8e:	d004      	beq.n	2c9a <qspi_sync_serial_run_command+0x1a>
    2c90:	683b      	ldr	r3, [r7, #0]
    2c92:	2b00      	cmp	r3, #0
    2c94:	d001      	beq.n	2c9a <qspi_sync_serial_run_command+0x1a>
    2c96:	2301      	movs	r3, #1
    2c98:	e000      	b.n	2c9c <qspi_sync_serial_run_command+0x1c>
    2c9a:	2300      	movs	r3, #0
    2c9c:	f003 0301 	and.w	r3, r3, #1
    2ca0:	b2db      	uxtb	r3, r3
    2ca2:	224d      	movs	r2, #77	; 0x4d
    2ca4:	4906      	ldr	r1, [pc, #24]	; (2cc0 <qspi_sync_serial_run_command+0x40>)
    2ca6:	4618      	mov	r0, r3
    2ca8:	4b06      	ldr	r3, [pc, #24]	; (2cc4 <qspi_sync_serial_run_command+0x44>)
    2caa:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2cac:	687b      	ldr	r3, [r7, #4]
    2cae:	6839      	ldr	r1, [r7, #0]
    2cb0:	4618      	mov	r0, r3
    2cb2:	4b05      	ldr	r3, [pc, #20]	; (2cc8 <qspi_sync_serial_run_command+0x48>)
    2cb4:	4798      	blx	r3
    2cb6:	4603      	mov	r3, r0
}
    2cb8:	4618      	mov	r0, r3
    2cba:	3708      	adds	r7, #8
    2cbc:	46bd      	mov	sp, r7
    2cbe:	bd80      	pop	{r7, pc}
    2cc0:	00010014 	.word	0x00010014
    2cc4:	00003d61 	.word	0x00003d61
    2cc8:	00005f09 	.word	0x00005f09

00002ccc <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2ccc:	b580      	push	{r7, lr}
    2cce:	b084      	sub	sp, #16
    2cd0:	af00      	add	r7, sp, #0
    2cd2:	6078      	str	r0, [r7, #4]
    2cd4:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2cd6:	2300      	movs	r3, #0
    2cd8:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2cda:	687b      	ldr	r3, [r7, #4]
    2cdc:	2b00      	cmp	r3, #0
    2cde:	d004      	beq.n	2cea <spi_m_sync_init+0x1e>
    2ce0:	683b      	ldr	r3, [r7, #0]
    2ce2:	2b00      	cmp	r3, #0
    2ce4:	d001      	beq.n	2cea <spi_m_sync_init+0x1e>
    2ce6:	2301      	movs	r3, #1
    2ce8:	e000      	b.n	2cec <spi_m_sync_init+0x20>
    2cea:	2300      	movs	r3, #0
    2cec:	f003 0301 	and.w	r3, r3, #1
    2cf0:	b2db      	uxtb	r3, r3
    2cf2:	2240      	movs	r2, #64	; 0x40
    2cf4:	4910      	ldr	r1, [pc, #64]	; (2d38 <spi_m_sync_init+0x6c>)
    2cf6:	4618      	mov	r0, r3
    2cf8:	4b10      	ldr	r3, [pc, #64]	; (2d3c <spi_m_sync_init+0x70>)
    2cfa:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2cfc:	687b      	ldr	r3, [r7, #4]
    2cfe:	683a      	ldr	r2, [r7, #0]
    2d00:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2d02:	687b      	ldr	r3, [r7, #4]
    2d04:	3304      	adds	r3, #4
    2d06:	6839      	ldr	r1, [r7, #0]
    2d08:	4618      	mov	r0, r3
    2d0a:	4b0d      	ldr	r3, [pc, #52]	; (2d40 <spi_m_sync_init+0x74>)
    2d0c:	4798      	blx	r3
    2d0e:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2d10:	68fb      	ldr	r3, [r7, #12]
    2d12:	2b00      	cmp	r3, #0
    2d14:	da01      	bge.n	2d1a <spi_m_sync_init+0x4e>
		return rc;
    2d16:	68fb      	ldr	r3, [r7, #12]
    2d18:	e00a      	b.n	2d30 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2d1a:	687b      	ldr	r3, [r7, #4]
    2d1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2d20:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2d22:	687b      	ldr	r3, [r7, #4]
    2d24:	4a07      	ldr	r2, [pc, #28]	; (2d44 <spi_m_sync_init+0x78>)
    2d26:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2d28:	687b      	ldr	r3, [r7, #4]
    2d2a:	4a07      	ldr	r2, [pc, #28]	; (2d48 <spi_m_sync_init+0x7c>)
    2d2c:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2d2e:	2300      	movs	r3, #0
}
    2d30:	4618      	mov	r0, r3
    2d32:	3710      	adds	r7, #16
    2d34:	46bd      	mov	sp, r7
    2d36:	bd80      	pop	{r7, pc}
    2d38:	00010030 	.word	0x00010030
    2d3c:	00003d61 	.word	0x00003d61
    2d40:	000077d1 	.word	0x000077d1
    2d44:	00002dc5 	.word	0x00002dc5
    2d48:	00002e1d 	.word	0x00002e1d

00002d4c <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    2d4c:	b580      	push	{r7, lr}
    2d4e:	b082      	sub	sp, #8
    2d50:	af00      	add	r7, sp, #0
    2d52:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2d54:	687b      	ldr	r3, [r7, #4]
    2d56:	2b00      	cmp	r3, #0
    2d58:	bf14      	ite	ne
    2d5a:	2301      	movne	r3, #1
    2d5c:	2300      	moveq	r3, #0
    2d5e:	b2db      	uxtb	r3, r3
    2d60:	2257      	movs	r2, #87	; 0x57
    2d62:	4906      	ldr	r1, [pc, #24]	; (2d7c <spi_m_sync_enable+0x30>)
    2d64:	4618      	mov	r0, r3
    2d66:	4b06      	ldr	r3, [pc, #24]	; (2d80 <spi_m_sync_enable+0x34>)
    2d68:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    2d6a:	687b      	ldr	r3, [r7, #4]
    2d6c:	3304      	adds	r3, #4
    2d6e:	4618      	mov	r0, r3
    2d70:	4b04      	ldr	r3, [pc, #16]	; (2d84 <spi_m_sync_enable+0x38>)
    2d72:	4798      	blx	r3
}
    2d74:	bf00      	nop
    2d76:	3708      	adds	r7, #8
    2d78:	46bd      	mov	sp, r7
    2d7a:	bd80      	pop	{r7, pc}
    2d7c:	00010030 	.word	0x00010030
    2d80:	00003d61 	.word	0x00003d61
    2d84:	000078dd 	.word	0x000078dd

00002d88 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    2d88:	b580      	push	{r7, lr}
    2d8a:	b082      	sub	sp, #8
    2d8c:	af00      	add	r7, sp, #0
    2d8e:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2d90:	687b      	ldr	r3, [r7, #4]
    2d92:	2b00      	cmp	r3, #0
    2d94:	bf14      	ite	ne
    2d96:	2301      	movne	r3, #1
    2d98:	2300      	moveq	r3, #0
    2d9a:	b2db      	uxtb	r3, r3
    2d9c:	225d      	movs	r2, #93	; 0x5d
    2d9e:	4906      	ldr	r1, [pc, #24]	; (2db8 <spi_m_sync_disable+0x30>)
    2da0:	4618      	mov	r0, r3
    2da2:	4b06      	ldr	r3, [pc, #24]	; (2dbc <spi_m_sync_disable+0x34>)
    2da4:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    2da6:	687b      	ldr	r3, [r7, #4]
    2da8:	3304      	adds	r3, #4
    2daa:	4618      	mov	r0, r3
    2dac:	4b04      	ldr	r3, [pc, #16]	; (2dc0 <spi_m_sync_disable+0x38>)
    2dae:	4798      	blx	r3
}
    2db0:	bf00      	nop
    2db2:	3708      	adds	r7, #8
    2db4:	46bd      	mov	sp, r7
    2db6:	bd80      	pop	{r7, pc}
    2db8:	00010030 	.word	0x00010030
    2dbc:	00003d61 	.word	0x00003d61
    2dc0:	0000792d 	.word	0x0000792d

00002dc4 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2dc4:	b580      	push	{r7, lr}
    2dc6:	b088      	sub	sp, #32
    2dc8:	af00      	add	r7, sp, #0
    2dca:	60f8      	str	r0, [r7, #12]
    2dcc:	60b9      	str	r1, [r7, #8]
    2dce:	4613      	mov	r3, r2
    2dd0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2dd2:	68fb      	ldr	r3, [r7, #12]
    2dd4:	2b00      	cmp	r3, #0
    2dd6:	bf14      	ite	ne
    2dd8:	2301      	movne	r3, #1
    2dda:	2300      	moveq	r3, #0
    2ddc:	b2db      	uxtb	r3, r3
    2dde:	2287      	movs	r2, #135	; 0x87
    2de0:	490b      	ldr	r1, [pc, #44]	; (2e10 <_spi_m_sync_io_read+0x4c>)
    2de2:	4618      	mov	r0, r3
    2de4:	4b0b      	ldr	r3, [pc, #44]	; (2e14 <_spi_m_sync_io_read+0x50>)
    2de6:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2de8:	68fb      	ldr	r3, [r7, #12]
    2dea:	3b0c      	subs	r3, #12
    2dec:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    2dee:	68bb      	ldr	r3, [r7, #8]
    2df0:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    2df2:	2300      	movs	r3, #0
    2df4:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2df6:	88fb      	ldrh	r3, [r7, #6]
    2df8:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2dfa:	f107 0310 	add.w	r3, r7, #16
    2dfe:	4619      	mov	r1, r3
    2e00:	69f8      	ldr	r0, [r7, #28]
    2e02:	4b05      	ldr	r3, [pc, #20]	; (2e18 <_spi_m_sync_io_read+0x54>)
    2e04:	4798      	blx	r3
    2e06:	4603      	mov	r3, r0
}
    2e08:	4618      	mov	r0, r3
    2e0a:	3720      	adds	r7, #32
    2e0c:	46bd      	mov	sp, r7
    2e0e:	bd80      	pop	{r7, pc}
    2e10:	00010030 	.word	0x00010030
    2e14:	00003d61 	.word	0x00003d61
    2e18:	00002e75 	.word	0x00002e75

00002e1c <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2e1c:	b580      	push	{r7, lr}
    2e1e:	b088      	sub	sp, #32
    2e20:	af00      	add	r7, sp, #0
    2e22:	60f8      	str	r0, [r7, #12]
    2e24:	60b9      	str	r1, [r7, #8]
    2e26:	4613      	mov	r3, r2
    2e28:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2e2a:	68fb      	ldr	r3, [r7, #12]
    2e2c:	2b00      	cmp	r3, #0
    2e2e:	bf14      	ite	ne
    2e30:	2301      	movne	r3, #1
    2e32:	2300      	moveq	r3, #0
    2e34:	b2db      	uxtb	r3, r3
    2e36:	22a3      	movs	r2, #163	; 0xa3
    2e38:	490b      	ldr	r1, [pc, #44]	; (2e68 <_spi_m_sync_io_write+0x4c>)
    2e3a:	4618      	mov	r0, r3
    2e3c:	4b0b      	ldr	r3, [pc, #44]	; (2e6c <_spi_m_sync_io_write+0x50>)
    2e3e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2e40:	68fb      	ldr	r3, [r7, #12]
    2e42:	3b0c      	subs	r3, #12
    2e44:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2e46:	2300      	movs	r3, #0
    2e48:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2e4a:	68bb      	ldr	r3, [r7, #8]
    2e4c:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2e4e:	88fb      	ldrh	r3, [r7, #6]
    2e50:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2e52:	f107 0310 	add.w	r3, r7, #16
    2e56:	4619      	mov	r1, r3
    2e58:	69f8      	ldr	r0, [r7, #28]
    2e5a:	4b05      	ldr	r3, [pc, #20]	; (2e70 <_spi_m_sync_io_write+0x54>)
    2e5c:	4798      	blx	r3
    2e5e:	4603      	mov	r3, r0
}
    2e60:	4618      	mov	r0, r3
    2e62:	3720      	adds	r7, #32
    2e64:	46bd      	mov	sp, r7
    2e66:	bd80      	pop	{r7, pc}
    2e68:	00010030 	.word	0x00010030
    2e6c:	00003d61 	.word	0x00003d61
    2e70:	00002e75 	.word	0x00002e75

00002e74 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2e74:	b580      	push	{r7, lr}
    2e76:	b086      	sub	sp, #24
    2e78:	af00      	add	r7, sp, #0
    2e7a:	6078      	str	r0, [r7, #4]
    2e7c:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2e7e:	687b      	ldr	r3, [r7, #4]
    2e80:	2b00      	cmp	r3, #0
    2e82:	d004      	beq.n	2e8e <spi_m_sync_transfer+0x1a>
    2e84:	683b      	ldr	r3, [r7, #0]
    2e86:	2b00      	cmp	r3, #0
    2e88:	d001      	beq.n	2e8e <spi_m_sync_transfer+0x1a>
    2e8a:	2301      	movs	r3, #1
    2e8c:	e000      	b.n	2e90 <spi_m_sync_transfer+0x1c>
    2e8e:	2300      	movs	r3, #0
    2e90:	f003 0301 	and.w	r3, r3, #1
    2e94:	b2db      	uxtb	r3, r3
    2e96:	22b3      	movs	r2, #179	; 0xb3
    2e98:	490c      	ldr	r1, [pc, #48]	; (2ecc <spi_m_sync_transfer+0x58>)
    2e9a:	4618      	mov	r0, r3
    2e9c:	4b0c      	ldr	r3, [pc, #48]	; (2ed0 <spi_m_sync_transfer+0x5c>)
    2e9e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2ea0:	683b      	ldr	r3, [r7, #0]
    2ea2:	681b      	ldr	r3, [r3, #0]
    2ea4:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2ea6:	683b      	ldr	r3, [r7, #0]
    2ea8:	685b      	ldr	r3, [r3, #4]
    2eaa:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2eac:	683b      	ldr	r3, [r7, #0]
    2eae:	689b      	ldr	r3, [r3, #8]
    2eb0:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2eb2:	687b      	ldr	r3, [r7, #4]
    2eb4:	3304      	adds	r3, #4
    2eb6:	f107 020c 	add.w	r2, r7, #12
    2eba:	4611      	mov	r1, r2
    2ebc:	4618      	mov	r0, r3
    2ebe:	4b05      	ldr	r3, [pc, #20]	; (2ed4 <spi_m_sync_transfer+0x60>)
    2ec0:	4798      	blx	r3
    2ec2:	4603      	mov	r3, r0
}
    2ec4:	4618      	mov	r0, r3
    2ec6:	3718      	adds	r7, #24
    2ec8:	46bd      	mov	sp, r7
    2eca:	bd80      	pop	{r7, pc}
    2ecc:	00010030 	.word	0x00010030
    2ed0:	00003d61 	.word	0x00003d61
    2ed4:	00007ad1 	.word	0x00007ad1

00002ed8 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    2ed8:	b580      	push	{r7, lr}
    2eda:	b082      	sub	sp, #8
    2edc:	af00      	add	r7, sp, #0
    2ede:	6078      	str	r0, [r7, #4]
    2ee0:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    2ee2:	687b      	ldr	r3, [r7, #4]
    2ee4:	2b00      	cmp	r3, #0
    2ee6:	d004      	beq.n	2ef2 <spi_m_sync_get_io_descriptor+0x1a>
    2ee8:	683b      	ldr	r3, [r7, #0]
    2eea:	2b00      	cmp	r3, #0
    2eec:	d001      	beq.n	2ef2 <spi_m_sync_get_io_descriptor+0x1a>
    2eee:	2301      	movs	r3, #1
    2ef0:	e000      	b.n	2ef4 <spi_m_sync_get_io_descriptor+0x1c>
    2ef2:	2300      	movs	r3, #0
    2ef4:	f003 0301 	and.w	r3, r3, #1
    2ef8:	b2db      	uxtb	r3, r3
    2efa:	22bd      	movs	r2, #189	; 0xbd
    2efc:	4906      	ldr	r1, [pc, #24]	; (2f18 <spi_m_sync_get_io_descriptor+0x40>)
    2efe:	4618      	mov	r0, r3
    2f00:	4b06      	ldr	r3, [pc, #24]	; (2f1c <spi_m_sync_get_io_descriptor+0x44>)
    2f02:	4798      	blx	r3
	*io = &spi->io;
    2f04:	687b      	ldr	r3, [r7, #4]
    2f06:	f103 020c 	add.w	r2, r3, #12
    2f0a:	683b      	ldr	r3, [r7, #0]
    2f0c:	601a      	str	r2, [r3, #0]
	return 0;
    2f0e:	2300      	movs	r3, #0
}
    2f10:	4618      	mov	r0, r3
    2f12:	3708      	adds	r7, #8
    2f14:	46bd      	mov	sp, r7
    2f16:	bd80      	pop	{r7, pc}
    2f18:	00010030 	.word	0x00010030
    2f1c:	00003d61 	.word	0x00003d61

00002f20 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2f20:	b480      	push	{r7}
    2f22:	b083      	sub	sp, #12
    2f24:	af00      	add	r7, sp, #0
    2f26:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2f28:	687b      	ldr	r3, [r7, #4]
    2f2a:	681b      	ldr	r3, [r3, #0]
}
    2f2c:	4618      	mov	r0, r3
    2f2e:	370c      	adds	r7, #12
    2f30:	46bd      	mov	sp, r7
    2f32:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f36:	4770      	bx	lr

00002f38 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2f38:	b480      	push	{r7}
    2f3a:	b083      	sub	sp, #12
    2f3c:	af00      	add	r7, sp, #0
    2f3e:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2f40:	687b      	ldr	r3, [r7, #4]
    2f42:	2b00      	cmp	r3, #0
    2f44:	d002      	beq.n	2f4c <list_get_next_element+0x14>
    2f46:	687b      	ldr	r3, [r7, #4]
    2f48:	681b      	ldr	r3, [r3, #0]
    2f4a:	e000      	b.n	2f4e <list_get_next_element+0x16>
    2f4c:	2300      	movs	r3, #0
}
    2f4e:	4618      	mov	r0, r3
    2f50:	370c      	adds	r7, #12
    2f52:	46bd      	mov	sp, r7
    2f54:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f58:	4770      	bx	lr
	...

00002f5c <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2f5c:	b580      	push	{r7, lr}
    2f5e:	b084      	sub	sp, #16
    2f60:	af00      	add	r7, sp, #0
    2f62:	60f8      	str	r0, [r7, #12]
    2f64:	60b9      	str	r1, [r7, #8]
    2f66:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2f68:	68fb      	ldr	r3, [r7, #12]
    2f6a:	2b00      	cmp	r3, #0
    2f6c:	d007      	beq.n	2f7e <timer_init+0x22>
    2f6e:	68bb      	ldr	r3, [r7, #8]
    2f70:	2b00      	cmp	r3, #0
    2f72:	d004      	beq.n	2f7e <timer_init+0x22>
    2f74:	687b      	ldr	r3, [r7, #4]
    2f76:	2b00      	cmp	r3, #0
    2f78:	d001      	beq.n	2f7e <timer_init+0x22>
    2f7a:	2301      	movs	r3, #1
    2f7c:	e000      	b.n	2f80 <timer_init+0x24>
    2f7e:	2300      	movs	r3, #0
    2f80:	f003 0301 	and.w	r3, r3, #1
    2f84:	b2db      	uxtb	r3, r3
    2f86:	223b      	movs	r2, #59	; 0x3b
    2f88:	490c      	ldr	r1, [pc, #48]	; (2fbc <timer_init+0x60>)
    2f8a:	4618      	mov	r0, r3
    2f8c:	4b0c      	ldr	r3, [pc, #48]	; (2fc0 <timer_init+0x64>)
    2f8e:	4798      	blx	r3
	descr->func = func;
    2f90:	68fb      	ldr	r3, [r7, #12]
    2f92:	687a      	ldr	r2, [r7, #4]
    2f94:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    2f96:	68fb      	ldr	r3, [r7, #12]
    2f98:	681b      	ldr	r3, [r3, #0]
    2f9a:	681b      	ldr	r3, [r3, #0]
    2f9c:	68fa      	ldr	r2, [r7, #12]
    2f9e:	3204      	adds	r2, #4
    2fa0:	68b9      	ldr	r1, [r7, #8]
    2fa2:	4610      	mov	r0, r2
    2fa4:	4798      	blx	r3
	descr->time                           = 0;
    2fa6:	68fb      	ldr	r3, [r7, #12]
    2fa8:	2200      	movs	r2, #0
    2faa:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2fac:	68fb      	ldr	r3, [r7, #12]
    2fae:	4a05      	ldr	r2, [pc, #20]	; (2fc4 <timer_init+0x68>)
    2fb0:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    2fb2:	2300      	movs	r3, #0
}
    2fb4:	4618      	mov	r0, r3
    2fb6:	3710      	adds	r7, #16
    2fb8:	46bd      	mov	sp, r7
    2fba:	bd80      	pop	{r7, pc}
    2fbc:	0001004c 	.word	0x0001004c
    2fc0:	00003d61 	.word	0x00003d61
    2fc4:	0000334d 	.word	0x0000334d

00002fc8 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2fc8:	b580      	push	{r7, lr}
    2fca:	b082      	sub	sp, #8
    2fcc:	af00      	add	r7, sp, #0
    2fce:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2fd0:	687b      	ldr	r3, [r7, #4]
    2fd2:	2b00      	cmp	r3, #0
    2fd4:	d005      	beq.n	2fe2 <timer_start+0x1a>
    2fd6:	687b      	ldr	r3, [r7, #4]
    2fd8:	681b      	ldr	r3, [r3, #0]
    2fda:	2b00      	cmp	r3, #0
    2fdc:	d001      	beq.n	2fe2 <timer_start+0x1a>
    2fde:	2301      	movs	r3, #1
    2fe0:	e000      	b.n	2fe4 <timer_start+0x1c>
    2fe2:	2300      	movs	r3, #0
    2fe4:	f003 0301 	and.w	r3, r3, #1
    2fe8:	b2db      	uxtb	r3, r3
    2fea:	2254      	movs	r2, #84	; 0x54
    2fec:	490e      	ldr	r1, [pc, #56]	; (3028 <timer_start+0x60>)
    2fee:	4618      	mov	r0, r3
    2ff0:	4b0e      	ldr	r3, [pc, #56]	; (302c <timer_start+0x64>)
    2ff2:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    2ff4:	687b      	ldr	r3, [r7, #4]
    2ff6:	681b      	ldr	r3, [r3, #0]
    2ff8:	699b      	ldr	r3, [r3, #24]
    2ffa:	687a      	ldr	r2, [r7, #4]
    2ffc:	3204      	adds	r2, #4
    2ffe:	4610      	mov	r0, r2
    3000:	4798      	blx	r3
    3002:	4603      	mov	r3, r0
    3004:	2b00      	cmp	r3, #0
    3006:	d002      	beq.n	300e <timer_start+0x46>
		return ERR_DENIED;
    3008:	f06f 0310 	mvn.w	r3, #16
    300c:	e007      	b.n	301e <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    300e:	687b      	ldr	r3, [r7, #4]
    3010:	681b      	ldr	r3, [r3, #0]
    3012:	689b      	ldr	r3, [r3, #8]
    3014:	687a      	ldr	r2, [r7, #4]
    3016:	3204      	adds	r2, #4
    3018:	4610      	mov	r0, r2
    301a:	4798      	blx	r3

	return ERR_NONE;
    301c:	2300      	movs	r3, #0
}
    301e:	4618      	mov	r0, r3
    3020:	3708      	adds	r7, #8
    3022:	46bd      	mov	sp, r7
    3024:	bd80      	pop	{r7, pc}
    3026:	bf00      	nop
    3028:	0001004c 	.word	0x0001004c
    302c:	00003d61 	.word	0x00003d61

00003030 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    3030:	b580      	push	{r7, lr}
    3032:	b082      	sub	sp, #8
    3034:	af00      	add	r7, sp, #0
    3036:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    3038:	687b      	ldr	r3, [r7, #4]
    303a:	2b00      	cmp	r3, #0
    303c:	d005      	beq.n	304a <timer_stop+0x1a>
    303e:	687b      	ldr	r3, [r7, #4]
    3040:	681b      	ldr	r3, [r3, #0]
    3042:	2b00      	cmp	r3, #0
    3044:	d001      	beq.n	304a <timer_stop+0x1a>
    3046:	2301      	movs	r3, #1
    3048:	e000      	b.n	304c <timer_stop+0x1c>
    304a:	2300      	movs	r3, #0
    304c:	f003 0301 	and.w	r3, r3, #1
    3050:	b2db      	uxtb	r3, r3
    3052:	2262      	movs	r2, #98	; 0x62
    3054:	490f      	ldr	r1, [pc, #60]	; (3094 <timer_stop+0x64>)
    3056:	4618      	mov	r0, r3
    3058:	4b0f      	ldr	r3, [pc, #60]	; (3098 <timer_stop+0x68>)
    305a:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    305c:	687b      	ldr	r3, [r7, #4]
    305e:	681b      	ldr	r3, [r3, #0]
    3060:	699b      	ldr	r3, [r3, #24]
    3062:	687a      	ldr	r2, [r7, #4]
    3064:	3204      	adds	r2, #4
    3066:	4610      	mov	r0, r2
    3068:	4798      	blx	r3
    306a:	4603      	mov	r3, r0
    306c:	f083 0301 	eor.w	r3, r3, #1
    3070:	b2db      	uxtb	r3, r3
    3072:	2b00      	cmp	r3, #0
    3074:	d002      	beq.n	307c <timer_stop+0x4c>
		return ERR_DENIED;
    3076:	f06f 0310 	mvn.w	r3, #16
    307a:	e007      	b.n	308c <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    307c:	687b      	ldr	r3, [r7, #4]
    307e:	681b      	ldr	r3, [r3, #0]
    3080:	68db      	ldr	r3, [r3, #12]
    3082:	687a      	ldr	r2, [r7, #4]
    3084:	3204      	adds	r2, #4
    3086:	4610      	mov	r0, r2
    3088:	4798      	blx	r3

	return ERR_NONE;
    308a:	2300      	movs	r3, #0
}
    308c:	4618      	mov	r0, r3
    308e:	3708      	adds	r7, #8
    3090:	46bd      	mov	sp, r7
    3092:	bd80      	pop	{r7, pc}
    3094:	0001004c 	.word	0x0001004c
    3098:	00003d61 	.word	0x00003d61

0000309c <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    309c:	b580      	push	{r7, lr}
    309e:	b084      	sub	sp, #16
    30a0:	af00      	add	r7, sp, #0
    30a2:	6078      	str	r0, [r7, #4]
    30a4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    30a6:	687b      	ldr	r3, [r7, #4]
    30a8:	2b00      	cmp	r3, #0
    30aa:	d008      	beq.n	30be <timer_add_task+0x22>
    30ac:	683b      	ldr	r3, [r7, #0]
    30ae:	2b00      	cmp	r3, #0
    30b0:	d005      	beq.n	30be <timer_add_task+0x22>
    30b2:	687b      	ldr	r3, [r7, #4]
    30b4:	681b      	ldr	r3, [r3, #0]
    30b6:	2b00      	cmp	r3, #0
    30b8:	d001      	beq.n	30be <timer_add_task+0x22>
    30ba:	2301      	movs	r3, #1
    30bc:	e000      	b.n	30c0 <timer_add_task+0x24>
    30be:	2300      	movs	r3, #0
    30c0:	f003 0301 	and.w	r3, r3, #1
    30c4:	b2db      	uxtb	r3, r3
    30c6:	227b      	movs	r2, #123	; 0x7b
    30c8:	492f      	ldr	r1, [pc, #188]	; (3188 <timer_add_task+0xec>)
    30ca:	4618      	mov	r0, r3
    30cc:	4b2f      	ldr	r3, [pc, #188]	; (318c <timer_add_task+0xf0>)
    30ce:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    30d0:	687b      	ldr	r3, [r7, #4]
    30d2:	7f1b      	ldrb	r3, [r3, #28]
    30d4:	b2db      	uxtb	r3, r3
    30d6:	f043 0301 	orr.w	r3, r3, #1
    30da:	b2da      	uxtb	r2, r3
    30dc:	687b      	ldr	r3, [r7, #4]
    30de:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    30e0:	687b      	ldr	r3, [r7, #4]
    30e2:	3318      	adds	r3, #24
    30e4:	6839      	ldr	r1, [r7, #0]
    30e6:	4618      	mov	r0, r3
    30e8:	4b29      	ldr	r3, [pc, #164]	; (3190 <timer_add_task+0xf4>)
    30ea:	4798      	blx	r3
    30ec:	4603      	mov	r3, r0
    30ee:	2b00      	cmp	r3, #0
    30f0:	d00f      	beq.n	3112 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    30f2:	687b      	ldr	r3, [r7, #4]
    30f4:	7f1b      	ldrb	r3, [r3, #28]
    30f6:	b2db      	uxtb	r3, r3
    30f8:	f023 0301 	bic.w	r3, r3, #1
    30fc:	b2da      	uxtb	r2, r3
    30fe:	687b      	ldr	r3, [r7, #4]
    3100:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    3102:	2280      	movs	r2, #128	; 0x80
    3104:	4920      	ldr	r1, [pc, #128]	; (3188 <timer_add_task+0xec>)
    3106:	2000      	movs	r0, #0
    3108:	4b20      	ldr	r3, [pc, #128]	; (318c <timer_add_task+0xf0>)
    310a:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    310c:	f06f 0311 	mvn.w	r3, #17
    3110:	e035      	b.n	317e <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    3112:	687b      	ldr	r3, [r7, #4]
    3114:	695a      	ldr	r2, [r3, #20]
    3116:	683b      	ldr	r3, [r7, #0]
    3118:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    311a:	687b      	ldr	r3, [r7, #4]
    311c:	f103 0018 	add.w	r0, r3, #24
    3120:	687b      	ldr	r3, [r7, #4]
    3122:	695b      	ldr	r3, [r3, #20]
    3124:	461a      	mov	r2, r3
    3126:	6839      	ldr	r1, [r7, #0]
    3128:	4b1a      	ldr	r3, [pc, #104]	; (3194 <timer_add_task+0xf8>)
    312a:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    312c:	687b      	ldr	r3, [r7, #4]
    312e:	7f1b      	ldrb	r3, [r3, #28]
    3130:	b2db      	uxtb	r3, r3
    3132:	f023 0301 	bic.w	r3, r3, #1
    3136:	b2da      	uxtb	r2, r3
    3138:	687b      	ldr	r3, [r7, #4]
    313a:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    313c:	687b      	ldr	r3, [r7, #4]
    313e:	7f1b      	ldrb	r3, [r3, #28]
    3140:	b2db      	uxtb	r3, r3
    3142:	f003 0302 	and.w	r3, r3, #2
    3146:	2b00      	cmp	r3, #0
    3148:	d018      	beq.n	317c <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    314a:	f107 030c 	add.w	r3, r7, #12
    314e:	4618      	mov	r0, r3
    3150:	4b11      	ldr	r3, [pc, #68]	; (3198 <timer_add_task+0xfc>)
    3152:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    3154:	687b      	ldr	r3, [r7, #4]
    3156:	7f1b      	ldrb	r3, [r3, #28]
    3158:	b2db      	uxtb	r3, r3
    315a:	f023 0302 	bic.w	r3, r3, #2
    315e:	b2da      	uxtb	r2, r3
    3160:	687b      	ldr	r3, [r7, #4]
    3162:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    3164:	687b      	ldr	r3, [r7, #4]
    3166:	681b      	ldr	r3, [r3, #0]
    3168:	69db      	ldr	r3, [r3, #28]
    316a:	687a      	ldr	r2, [r7, #4]
    316c:	3204      	adds	r2, #4
    316e:	4610      	mov	r0, r2
    3170:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    3172:	f107 030c 	add.w	r3, r7, #12
    3176:	4618      	mov	r0, r3
    3178:	4b08      	ldr	r3, [pc, #32]	; (319c <timer_add_task+0x100>)
    317a:	4798      	blx	r3
	}

	return ERR_NONE;
    317c:	2300      	movs	r3, #0
}
    317e:	4618      	mov	r0, r3
    3180:	3710      	adds	r7, #16
    3182:	46bd      	mov	sp, r7
    3184:	bd80      	pop	{r7, pc}
    3186:	bf00      	nop
    3188:	0001004c 	.word	0x0001004c
    318c:	00003d61 	.word	0x00003d61
    3190:	00003d89 	.word	0x00003d89
    3194:	0000329d 	.word	0x0000329d
    3198:	0000bebd 	.word	0x0000bebd
    319c:	0000bee3 	.word	0x0000bee3

000031a0 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    31a0:	b580      	push	{r7, lr}
    31a2:	b084      	sub	sp, #16
    31a4:	af00      	add	r7, sp, #0
    31a6:	6078      	str	r0, [r7, #4]
    31a8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    31aa:	687b      	ldr	r3, [r7, #4]
    31ac:	2b00      	cmp	r3, #0
    31ae:	d008      	beq.n	31c2 <timer_remove_task+0x22>
    31b0:	683b      	ldr	r3, [r7, #0]
    31b2:	2b00      	cmp	r3, #0
    31b4:	d005      	beq.n	31c2 <timer_remove_task+0x22>
    31b6:	687b      	ldr	r3, [r7, #4]
    31b8:	681b      	ldr	r3, [r3, #0]
    31ba:	2b00      	cmp	r3, #0
    31bc:	d001      	beq.n	31c2 <timer_remove_task+0x22>
    31be:	2301      	movs	r3, #1
    31c0:	e000      	b.n	31c4 <timer_remove_task+0x24>
    31c2:	2300      	movs	r3, #0
    31c4:	f003 0301 	and.w	r3, r3, #1
    31c8:	b2db      	uxtb	r3, r3
    31ca:	2296      	movs	r2, #150	; 0x96
    31cc:	492d      	ldr	r1, [pc, #180]	; (3284 <timer_remove_task+0xe4>)
    31ce:	4618      	mov	r0, r3
    31d0:	4b2d      	ldr	r3, [pc, #180]	; (3288 <timer_remove_task+0xe8>)
    31d2:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    31d4:	687b      	ldr	r3, [r7, #4]
    31d6:	7f1b      	ldrb	r3, [r3, #28]
    31d8:	b2db      	uxtb	r3, r3
    31da:	f043 0301 	orr.w	r3, r3, #1
    31de:	b2da      	uxtb	r2, r3
    31e0:	687b      	ldr	r3, [r7, #4]
    31e2:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    31e4:	687b      	ldr	r3, [r7, #4]
    31e6:	3318      	adds	r3, #24
    31e8:	6839      	ldr	r1, [r7, #0]
    31ea:	4618      	mov	r0, r3
    31ec:	4b27      	ldr	r3, [pc, #156]	; (328c <timer_remove_task+0xec>)
    31ee:	4798      	blx	r3
    31f0:	4603      	mov	r3, r0
    31f2:	f083 0301 	eor.w	r3, r3, #1
    31f6:	b2db      	uxtb	r3, r3
    31f8:	2b00      	cmp	r3, #0
    31fa:	d00f      	beq.n	321c <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    31fc:	687b      	ldr	r3, [r7, #4]
    31fe:	7f1b      	ldrb	r3, [r3, #28]
    3200:	b2db      	uxtb	r3, r3
    3202:	f023 0301 	bic.w	r3, r3, #1
    3206:	b2da      	uxtb	r2, r3
    3208:	687b      	ldr	r3, [r7, #4]
    320a:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    320c:	229b      	movs	r2, #155	; 0x9b
    320e:	491d      	ldr	r1, [pc, #116]	; (3284 <timer_remove_task+0xe4>)
    3210:	2000      	movs	r0, #0
    3212:	4b1d      	ldr	r3, [pc, #116]	; (3288 <timer_remove_task+0xe8>)
    3214:	4798      	blx	r3
		return ERR_NOT_FOUND;
    3216:	f06f 0309 	mvn.w	r3, #9
    321a:	e02e      	b.n	327a <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    321c:	687b      	ldr	r3, [r7, #4]
    321e:	3318      	adds	r3, #24
    3220:	6839      	ldr	r1, [r7, #0]
    3222:	4618      	mov	r0, r3
    3224:	4b1a      	ldr	r3, [pc, #104]	; (3290 <timer_remove_task+0xf0>)
    3226:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3228:	687b      	ldr	r3, [r7, #4]
    322a:	7f1b      	ldrb	r3, [r3, #28]
    322c:	b2db      	uxtb	r3, r3
    322e:	f023 0301 	bic.w	r3, r3, #1
    3232:	b2da      	uxtb	r2, r3
    3234:	687b      	ldr	r3, [r7, #4]
    3236:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    3238:	687b      	ldr	r3, [r7, #4]
    323a:	7f1b      	ldrb	r3, [r3, #28]
    323c:	b2db      	uxtb	r3, r3
    323e:	f003 0302 	and.w	r3, r3, #2
    3242:	2b00      	cmp	r3, #0
    3244:	d018      	beq.n	3278 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    3246:	f107 030c 	add.w	r3, r7, #12
    324a:	4618      	mov	r0, r3
    324c:	4b11      	ldr	r3, [pc, #68]	; (3294 <timer_remove_task+0xf4>)
    324e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    3250:	687b      	ldr	r3, [r7, #4]
    3252:	7f1b      	ldrb	r3, [r3, #28]
    3254:	b2db      	uxtb	r3, r3
    3256:	f023 0302 	bic.w	r3, r3, #2
    325a:	b2da      	uxtb	r2, r3
    325c:	687b      	ldr	r3, [r7, #4]
    325e:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    3260:	687b      	ldr	r3, [r7, #4]
    3262:	681b      	ldr	r3, [r3, #0]
    3264:	69db      	ldr	r3, [r3, #28]
    3266:	687a      	ldr	r2, [r7, #4]
    3268:	3204      	adds	r2, #4
    326a:	4610      	mov	r0, r2
    326c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    326e:	f107 030c 	add.w	r3, r7, #12
    3272:	4618      	mov	r0, r3
    3274:	4b08      	ldr	r3, [pc, #32]	; (3298 <timer_remove_task+0xf8>)
    3276:	4798      	blx	r3
	}

	return ERR_NONE;
    3278:	2300      	movs	r3, #0
}
    327a:	4618      	mov	r0, r3
    327c:	3710      	adds	r7, #16
    327e:	46bd      	mov	sp, r7
    3280:	bd80      	pop	{r7, pc}
    3282:	bf00      	nop
    3284:	0001004c 	.word	0x0001004c
    3288:	00003d61 	.word	0x00003d61
    328c:	00003d89 	.word	0x00003d89
    3290:	00003eeb 	.word	0x00003eeb
    3294:	0000bebd 	.word	0x0000bebd
    3298:	0000bee3 	.word	0x0000bee3

0000329c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    329c:	b580      	push	{r7, lr}
    329e:	b088      	sub	sp, #32
    32a0:	af00      	add	r7, sp, #0
    32a2:	60f8      	str	r0, [r7, #12]
    32a4:	60b9      	str	r1, [r7, #8]
    32a6:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    32a8:	2300      	movs	r3, #0
    32aa:	61bb      	str	r3, [r7, #24]
    32ac:	68f8      	ldr	r0, [r7, #12]
    32ae:	4b23      	ldr	r3, [pc, #140]	; (333c <timer_add_timer_task+0xa0>)
    32b0:	4798      	blx	r3
    32b2:	6138      	str	r0, [r7, #16]

	if (!head) {
    32b4:	693b      	ldr	r3, [r7, #16]
    32b6:	2b00      	cmp	r3, #0
    32b8:	d104      	bne.n	32c4 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    32ba:	68b9      	ldr	r1, [r7, #8]
    32bc:	68f8      	ldr	r0, [r7, #12]
    32be:	4b20      	ldr	r3, [pc, #128]	; (3340 <timer_add_timer_task+0xa4>)
    32c0:	4798      	blx	r3
		return;
    32c2:	e037      	b.n	3334 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    32c4:	693b      	ldr	r3, [r7, #16]
    32c6:	61fb      	str	r3, [r7, #28]
    32c8:	e022      	b.n	3310 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    32ca:	69fb      	ldr	r3, [r7, #28]
    32cc:	685a      	ldr	r2, [r3, #4]
    32ce:	687b      	ldr	r3, [r7, #4]
    32d0:	429a      	cmp	r2, r3
    32d2:	d808      	bhi.n	32e6 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    32d4:	69fb      	ldr	r3, [r7, #28]
    32d6:	689a      	ldr	r2, [r3, #8]
    32d8:	69fb      	ldr	r3, [r7, #28]
    32da:	6859      	ldr	r1, [r3, #4]
    32dc:	687b      	ldr	r3, [r7, #4]
    32de:	1acb      	subs	r3, r1, r3
    32e0:	4413      	add	r3, r2
    32e2:	617b      	str	r3, [r7, #20]
    32e4:	e009      	b.n	32fa <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    32e6:	69fb      	ldr	r3, [r7, #28]
    32e8:	689a      	ldr	r2, [r3, #8]
    32ea:	69fb      	ldr	r3, [r7, #28]
    32ec:	685b      	ldr	r3, [r3, #4]
    32ee:	441a      	add	r2, r3
    32f0:	687b      	ldr	r3, [r7, #4]
    32f2:	425b      	negs	r3, r3
    32f4:	4413      	add	r3, r2
    32f6:	3301      	adds	r3, #1
    32f8:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    32fa:	68bb      	ldr	r3, [r7, #8]
    32fc:	689a      	ldr	r2, [r3, #8]
    32fe:	697b      	ldr	r3, [r7, #20]
    3300:	429a      	cmp	r2, r3
    3302:	d909      	bls.n	3318 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    3304:	69fb      	ldr	r3, [r7, #28]
    3306:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3308:	69f8      	ldr	r0, [r7, #28]
    330a:	4b0e      	ldr	r3, [pc, #56]	; (3344 <timer_add_timer_task+0xa8>)
    330c:	4798      	blx	r3
    330e:	61f8      	str	r0, [r7, #28]
    3310:	69fb      	ldr	r3, [r7, #28]
    3312:	2b00      	cmp	r3, #0
    3314:	d1d9      	bne.n	32ca <timer_add_timer_task+0x2e>
    3316:	e000      	b.n	331a <timer_add_timer_task+0x7e>
			break;
    3318:	bf00      	nop
	}

	if (it == head) {
    331a:	69fa      	ldr	r2, [r7, #28]
    331c:	693b      	ldr	r3, [r7, #16]
    331e:	429a      	cmp	r2, r3
    3320:	d104      	bne.n	332c <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    3322:	68b9      	ldr	r1, [r7, #8]
    3324:	68f8      	ldr	r0, [r7, #12]
    3326:	4b06      	ldr	r3, [pc, #24]	; (3340 <timer_add_timer_task+0xa4>)
    3328:	4798      	blx	r3
    332a:	e003      	b.n	3334 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    332c:	68b9      	ldr	r1, [r7, #8]
    332e:	69b8      	ldr	r0, [r7, #24]
    3330:	4b05      	ldr	r3, [pc, #20]	; (3348 <timer_add_timer_task+0xac>)
    3332:	4798      	blx	r3
	}
}
    3334:	3720      	adds	r7, #32
    3336:	46bd      	mov	sp, r7
    3338:	bd80      	pop	{r7, pc}
    333a:	bf00      	nop
    333c:	00002f21 	.word	0x00002f21
    3340:	00003dc1 	.word	0x00003dc1
    3344:	00002f39 	.word	0x00002f39
    3348:	00003e19 	.word	0x00003e19

0000334c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    334c:	b580      	push	{r7, lr}
    334e:	b086      	sub	sp, #24
    3350:	af00      	add	r7, sp, #0
    3352:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    3354:	687b      	ldr	r3, [r7, #4]
    3356:	3b04      	subs	r3, #4
    3358:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    335a:	693b      	ldr	r3, [r7, #16]
    335c:	3318      	adds	r3, #24
    335e:	4618      	mov	r0, r3
    3360:	4b27      	ldr	r3, [pc, #156]	; (3400 <timer_process_counted+0xb4>)
    3362:	4798      	blx	r3
    3364:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    3366:	693b      	ldr	r3, [r7, #16]
    3368:	695b      	ldr	r3, [r3, #20]
    336a:	1c5a      	adds	r2, r3, #1
    336c:	693b      	ldr	r3, [r7, #16]
    336e:	615a      	str	r2, [r3, #20]
    3370:	693b      	ldr	r3, [r7, #16]
    3372:	695b      	ldr	r3, [r3, #20]
    3374:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    3376:	693b      	ldr	r3, [r7, #16]
    3378:	7f1b      	ldrb	r3, [r3, #28]
    337a:	b2db      	uxtb	r3, r3
    337c:	f003 0301 	and.w	r3, r3, #1
    3380:	2b00      	cmp	r3, #0
    3382:	d106      	bne.n	3392 <timer_process_counted+0x46>
    3384:	693b      	ldr	r3, [r7, #16]
    3386:	7f1b      	ldrb	r3, [r3, #28]
    3388:	b2db      	uxtb	r3, r3
    338a:	f003 0302 	and.w	r3, r3, #2
    338e:	2b00      	cmp	r3, #0
    3390:	d027      	beq.n	33e2 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    3392:	693b      	ldr	r3, [r7, #16]
    3394:	7f1b      	ldrb	r3, [r3, #28]
    3396:	b2db      	uxtb	r3, r3
    3398:	f043 0302 	orr.w	r3, r3, #2
    339c:	b2da      	uxtb	r2, r3
    339e:	693b      	ldr	r3, [r7, #16]
    33a0:	771a      	strb	r2, [r3, #28]
		return;
    33a2:	e029      	b.n	33f8 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    33a4:	697b      	ldr	r3, [r7, #20]
    33a6:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    33a8:	693b      	ldr	r3, [r7, #16]
    33aa:	3318      	adds	r3, #24
    33ac:	4618      	mov	r0, r3
    33ae:	4b15      	ldr	r3, [pc, #84]	; (3404 <timer_process_counted+0xb8>)
    33b0:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    33b2:	68bb      	ldr	r3, [r7, #8]
    33b4:	7c1b      	ldrb	r3, [r3, #16]
    33b6:	2b01      	cmp	r3, #1
    33b8:	d109      	bne.n	33ce <timer_process_counted+0x82>
			tmp->time_label = time;
    33ba:	68bb      	ldr	r3, [r7, #8]
    33bc:	68fa      	ldr	r2, [r7, #12]
    33be:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    33c0:	693b      	ldr	r3, [r7, #16]
    33c2:	3318      	adds	r3, #24
    33c4:	68fa      	ldr	r2, [r7, #12]
    33c6:	68b9      	ldr	r1, [r7, #8]
    33c8:	4618      	mov	r0, r3
    33ca:	4b0f      	ldr	r3, [pc, #60]	; (3408 <timer_process_counted+0xbc>)
    33cc:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    33ce:	693b      	ldr	r3, [r7, #16]
    33d0:	3318      	adds	r3, #24
    33d2:	4618      	mov	r0, r3
    33d4:	4b0a      	ldr	r3, [pc, #40]	; (3400 <timer_process_counted+0xb4>)
    33d6:	4798      	blx	r3
    33d8:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    33da:	68bb      	ldr	r3, [r7, #8]
    33dc:	68db      	ldr	r3, [r3, #12]
    33de:	68b8      	ldr	r0, [r7, #8]
    33e0:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    33e2:	697b      	ldr	r3, [r7, #20]
    33e4:	2b00      	cmp	r3, #0
    33e6:	d007      	beq.n	33f8 <timer_process_counted+0xac>
    33e8:	697b      	ldr	r3, [r7, #20]
    33ea:	685b      	ldr	r3, [r3, #4]
    33ec:	68fa      	ldr	r2, [r7, #12]
    33ee:	1ad2      	subs	r2, r2, r3
    33f0:	697b      	ldr	r3, [r7, #20]
    33f2:	689b      	ldr	r3, [r3, #8]
    33f4:	429a      	cmp	r2, r3
    33f6:	d2d5      	bcs.n	33a4 <timer_process_counted+0x58>
	}
}
    33f8:	3718      	adds	r7, #24
    33fa:	46bd      	mov	sp, r7
    33fc:	bd80      	pop	{r7, pc}
    33fe:	bf00      	nop
    3400:	00002f21 	.word	0x00002f21
    3404:	00003eb9 	.word	0x00003eb9
    3408:	0000329d 	.word	0x0000329d

0000340c <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    340c:	b480      	push	{r7}
    340e:	b085      	sub	sp, #20
    3410:	af00      	add	r7, sp, #0
    3412:	4603      	mov	r3, r0
    3414:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3416:	2300      	movs	r3, #0
    3418:	73fb      	strb	r3, [r7, #15]
    341a:	e029      	b.n	3470 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    341c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3420:	4a19      	ldr	r2, [pc, #100]	; (3488 <_usb_d_find_ep+0x7c>)
    3422:	015b      	lsls	r3, r3, #5
    3424:	4413      	add	r3, r2
    3426:	3301      	adds	r3, #1
    3428:	781b      	ldrb	r3, [r3, #0]
    342a:	79fa      	ldrb	r2, [r7, #7]
    342c:	429a      	cmp	r2, r3
    342e:	d102      	bne.n	3436 <_usb_d_find_ep+0x2a>
			return i;
    3430:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3434:	e022      	b.n	347c <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    3436:	f997 300f 	ldrsb.w	r3, [r7, #15]
    343a:	4a13      	ldr	r2, [pc, #76]	; (3488 <_usb_d_find_ep+0x7c>)
    343c:	015b      	lsls	r3, r3, #5
    343e:	4413      	add	r3, r2
    3440:	781b      	ldrb	r3, [r3, #0]
    3442:	2b00      	cmp	r3, #0
    3444:	d10e      	bne.n	3464 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    3446:	79fb      	ldrb	r3, [r7, #7]
    3448:	f003 030f 	and.w	r3, r3, #15
    344c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3450:	490d      	ldr	r1, [pc, #52]	; (3488 <_usb_d_find_ep+0x7c>)
    3452:	0152      	lsls	r2, r2, #5
    3454:	440a      	add	r2, r1
    3456:	3201      	adds	r2, #1
    3458:	7812      	ldrb	r2, [r2, #0]
    345a:	4293      	cmp	r3, r2
    345c:	d102      	bne.n	3464 <_usb_d_find_ep+0x58>
			return i;
    345e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3462:	e00b      	b.n	347c <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3464:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3468:	b2db      	uxtb	r3, r3
    346a:	3301      	adds	r3, #1
    346c:	b2db      	uxtb	r3, r3
    346e:	73fb      	strb	r3, [r7, #15]
    3470:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3474:	2b03      	cmp	r3, #3
    3476:	ddd1      	ble.n	341c <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    3478:	f04f 33ff 	mov.w	r3, #4294967295
}
    347c:	4618      	mov	r0, r3
    347e:	3714      	adds	r7, #20
    3480:	46bd      	mov	sp, r7
    3482:	f85d 7b04 	ldr.w	r7, [sp], #4
    3486:	4770      	bx	lr
    3488:	20000ab0 	.word	0x20000ab0

0000348c <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    348c:	b580      	push	{r7, lr}
    348e:	b088      	sub	sp, #32
    3490:	af00      	add	r7, sp, #0
    3492:	60ba      	str	r2, [r7, #8]
    3494:	607b      	str	r3, [r7, #4]
    3496:	4603      	mov	r3, r0
    3498:	73fb      	strb	r3, [r7, #15]
    349a:	460b      	mov	r3, r1
    349c:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    349e:	68bb      	ldr	r3, [r7, #8]
    34a0:	617b      	str	r3, [r7, #20]
    34a2:	687b      	ldr	r3, [r7, #4]
    34a4:	61bb      	str	r3, [r7, #24]
    34a6:	7bbb      	ldrb	r3, [r7, #14]
    34a8:	2b00      	cmp	r3, #0
    34aa:	d004      	beq.n	34b6 <_usb_d_trans+0x2a>
    34ac:	7bfb      	ldrb	r3, [r7, #15]
    34ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
    34b2:	b2db      	uxtb	r3, r3
    34b4:	e003      	b.n	34be <_usb_d_trans+0x32>
    34b6:	7bfb      	ldrb	r3, [r7, #15]
    34b8:	f003 030f 	and.w	r3, r3, #15
    34bc:	b2db      	uxtb	r3, r3
    34be:	773b      	strb	r3, [r7, #28]
    34c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    34c4:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    34c6:	f107 0314 	add.w	r3, r7, #20
    34ca:	4618      	mov	r0, r3
    34cc:	4b03      	ldr	r3, [pc, #12]	; (34dc <_usb_d_trans+0x50>)
    34ce:	4798      	blx	r3
    34d0:	4603      	mov	r3, r0
}
    34d2:	4618      	mov	r0, r3
    34d4:	3720      	adds	r7, #32
    34d6:	46bd      	mov	sp, r7
    34d8:	bd80      	pop	{r7, pc}
    34da:	bf00      	nop
    34dc:	0000b4f1 	.word	0x0000b4f1

000034e0 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    34e0:	b480      	push	{r7}
    34e2:	b085      	sub	sp, #20
    34e4:	af00      	add	r7, sp, #0
    34e6:	60f8      	str	r0, [r7, #12]
    34e8:	60b9      	str	r1, [r7, #8]
    34ea:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    34ec:	2300      	movs	r3, #0
}
    34ee:	4618      	mov	r0, r3
    34f0:	3714      	adds	r7, #20
    34f2:	46bd      	mov	sp, r7
    34f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    34f8:	4770      	bx	lr
	...

000034fc <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    34fc:	b580      	push	{r7, lr}
    34fe:	b086      	sub	sp, #24
    3500:	af00      	add	r7, sp, #0
    3502:	4603      	mov	r3, r0
    3504:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3506:	79fb      	ldrb	r3, [r7, #7]
    3508:	4618      	mov	r0, r3
    350a:	4b2a      	ldr	r3, [pc, #168]	; (35b4 <usb_d_cb_trans_setup+0xb8>)
    350c:	4798      	blx	r3
    350e:	4603      	mov	r3, r0
    3510:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3512:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3516:	015b      	lsls	r3, r3, #5
    3518:	4a27      	ldr	r2, [pc, #156]	; (35b8 <usb_d_cb_trans_setup+0xbc>)
    351a:	4413      	add	r3, r2
    351c:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    351e:	693b      	ldr	r3, [r7, #16]
    3520:	330c      	adds	r3, #12
    3522:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    3524:	79fb      	ldrb	r3, [r7, #7]
    3526:	68f9      	ldr	r1, [r7, #12]
    3528:	4618      	mov	r0, r3
    352a:	4b24      	ldr	r3, [pc, #144]	; (35bc <usb_d_cb_trans_setup+0xc0>)
    352c:	4798      	blx	r3
    352e:	4603      	mov	r3, r0
    3530:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    3532:	7afb      	ldrb	r3, [r7, #11]
    3534:	2b08      	cmp	r3, #8
    3536:	d00d      	beq.n	3554 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3538:	79fb      	ldrb	r3, [r7, #7]
    353a:	2101      	movs	r1, #1
    353c:	4618      	mov	r0, r3
    353e:	4b20      	ldr	r3, [pc, #128]	; (35c0 <usb_d_cb_trans_setup+0xc4>)
    3540:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3542:	79fb      	ldrb	r3, [r7, #7]
    3544:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3548:	b2db      	uxtb	r3, r3
    354a:	2101      	movs	r1, #1
    354c:	4618      	mov	r0, r3
    354e:	4b1c      	ldr	r3, [pc, #112]	; (35c0 <usb_d_cb_trans_setup+0xc4>)
    3550:	4798      	blx	r3
		return;
    3552:	e02b      	b.n	35ac <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3554:	79fb      	ldrb	r3, [r7, #7]
    3556:	2100      	movs	r1, #0
    3558:	4618      	mov	r0, r3
    355a:	4b19      	ldr	r3, [pc, #100]	; (35c0 <usb_d_cb_trans_setup+0xc4>)
    355c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    355e:	79fb      	ldrb	r3, [r7, #7]
    3560:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3564:	b2db      	uxtb	r3, r3
    3566:	2100      	movs	r1, #0
    3568:	4618      	mov	r0, r3
    356a:	4b15      	ldr	r3, [pc, #84]	; (35c0 <usb_d_cb_trans_setup+0xc4>)
    356c:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    356e:	693b      	ldr	r3, [r7, #16]
    3570:	2201      	movs	r2, #1
    3572:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    3574:	693b      	ldr	r3, [r7, #16]
    3576:	695b      	ldr	r3, [r3, #20]
    3578:	79fa      	ldrb	r2, [r7, #7]
    357a:	68f9      	ldr	r1, [r7, #12]
    357c:	4610      	mov	r0, r2
    357e:	4798      	blx	r3
    3580:	4603      	mov	r3, r0
    3582:	f083 0301 	eor.w	r3, r3, #1
    3586:	b2db      	uxtb	r3, r3
    3588:	2b00      	cmp	r3, #0
    358a:	d00f      	beq.n	35ac <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    358c:	693b      	ldr	r3, [r7, #16]
    358e:	2205      	movs	r2, #5
    3590:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3592:	79fb      	ldrb	r3, [r7, #7]
    3594:	2101      	movs	r1, #1
    3596:	4618      	mov	r0, r3
    3598:	4b09      	ldr	r3, [pc, #36]	; (35c0 <usb_d_cb_trans_setup+0xc4>)
    359a:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    359c:	79fb      	ldrb	r3, [r7, #7]
    359e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    35a2:	b2db      	uxtb	r3, r3
    35a4:	2101      	movs	r1, #1
    35a6:	4618      	mov	r0, r3
    35a8:	4b05      	ldr	r3, [pc, #20]	; (35c0 <usb_d_cb_trans_setup+0xc4>)
    35aa:	4798      	blx	r3
	}
}
    35ac:	3718      	adds	r7, #24
    35ae:	46bd      	mov	sp, r7
    35b0:	bd80      	pop	{r7, pc}
    35b2:	bf00      	nop
    35b4:	0000340d 	.word	0x0000340d
    35b8:	20000ab0 	.word	0x20000ab0
    35bc:	0000b449 	.word	0x0000b449
    35c0:	0000b2c1 	.word	0x0000b2c1

000035c4 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    35c4:	b580      	push	{r7, lr}
    35c6:	b084      	sub	sp, #16
    35c8:	af00      	add	r7, sp, #0
    35ca:	4603      	mov	r3, r0
    35cc:	6039      	str	r1, [r7, #0]
    35ce:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    35d0:	79fb      	ldrb	r3, [r7, #7]
    35d2:	4618      	mov	r0, r3
    35d4:	4b0d      	ldr	r3, [pc, #52]	; (360c <usb_d_cb_trans_more+0x48>)
    35d6:	4798      	blx	r3
    35d8:	4603      	mov	r3, r0
    35da:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    35dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    35e0:	015b      	lsls	r3, r3, #5
    35e2:	4a0b      	ldr	r2, [pc, #44]	; (3610 <usb_d_cb_trans_more+0x4c>)
    35e4:	4413      	add	r3, r2
    35e6:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    35e8:	68bb      	ldr	r3, [r7, #8]
    35ea:	789b      	ldrb	r3, [r3, #2]
    35ec:	2b03      	cmp	r3, #3
    35ee:	d107      	bne.n	3600 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    35f0:	68bb      	ldr	r3, [r7, #8]
    35f2:	699b      	ldr	r3, [r3, #24]
    35f4:	79fa      	ldrb	r2, [r7, #7]
    35f6:	6839      	ldr	r1, [r7, #0]
    35f8:	4610      	mov	r0, r2
    35fa:	4798      	blx	r3
    35fc:	4603      	mov	r3, r0
    35fe:	e000      	b.n	3602 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    3600:	2300      	movs	r3, #0
}
    3602:	4618      	mov	r0, r3
    3604:	3710      	adds	r7, #16
    3606:	46bd      	mov	sp, r7
    3608:	bd80      	pop	{r7, pc}
    360a:	bf00      	nop
    360c:	0000340d 	.word	0x0000340d
    3610:	20000ab0 	.word	0x20000ab0

00003614 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    3614:	b590      	push	{r4, r7, lr}
    3616:	b087      	sub	sp, #28
    3618:	af02      	add	r7, sp, #8
    361a:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    361c:	687b      	ldr	r3, [r7, #4]
    361e:	789b      	ldrb	r3, [r3, #2]
    3620:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    3622:	687b      	ldr	r3, [r7, #4]
    3624:	7b1b      	ldrb	r3, [r3, #12]
    3626:	f003 0380 	and.w	r3, r3, #128	; 0x80
    362a:	2b00      	cmp	r3, #0
    362c:	bf14      	ite	ne
    362e:	2301      	movne	r3, #1
    3630:	2300      	moveq	r3, #0
    3632:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    3634:	7bfb      	ldrb	r3, [r7, #15]
    3636:	2b03      	cmp	r3, #3
    3638:	d13a      	bne.n	36b0 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    363a:	687b      	ldr	r3, [r7, #4]
    363c:	69db      	ldr	r3, [r3, #28]
    363e:	687a      	ldr	r2, [r7, #4]
    3640:	7850      	ldrb	r0, [r2, #1]
    3642:	687a      	ldr	r2, [r7, #4]
    3644:	320c      	adds	r2, #12
    3646:	2101      	movs	r1, #1
    3648:	4798      	blx	r3
    364a:	4603      	mov	r3, r0
    364c:	737b      	strb	r3, [r7, #13]
		if (err) {
    364e:	7b7b      	ldrb	r3, [r7, #13]
    3650:	2b00      	cmp	r3, #0
    3652:	d015      	beq.n	3680 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    3654:	687b      	ldr	r3, [r7, #4]
    3656:	2205      	movs	r2, #5
    3658:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    365a:	687b      	ldr	r3, [r7, #4]
    365c:	2202      	movs	r2, #2
    365e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    3660:	7bbb      	ldrb	r3, [r7, #14]
    3662:	2b00      	cmp	r3, #0
    3664:	d002      	beq.n	366c <usb_d_ctrl_trans_done+0x58>
    3666:	687b      	ldr	r3, [r7, #4]
    3668:	785b      	ldrb	r3, [r3, #1]
    366a:	e004      	b.n	3676 <usb_d_ctrl_trans_done+0x62>
    366c:	687b      	ldr	r3, [r7, #4]
    366e:	785b      	ldrb	r3, [r3, #1]
    3670:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3674:	b2db      	uxtb	r3, r3
    3676:	2101      	movs	r1, #1
    3678:	4618      	mov	r0, r3
    367a:	4b15      	ldr	r3, [pc, #84]	; (36d0 <usb_d_ctrl_trans_done+0xbc>)
    367c:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    367e:	e022      	b.n	36c6 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3680:	687b      	ldr	r3, [r7, #4]
    3682:	2204      	movs	r2, #4
    3684:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    3686:	687b      	ldr	r3, [r7, #4]
    3688:	7858      	ldrb	r0, [r3, #1]
    368a:	7bbb      	ldrb	r3, [r7, #14]
    368c:	2b00      	cmp	r3, #0
    368e:	bf14      	ite	ne
    3690:	2301      	movne	r3, #1
    3692:	2300      	moveq	r3, #0
    3694:	b2db      	uxtb	r3, r3
    3696:	f083 0301 	eor.w	r3, r3, #1
    369a:	b2db      	uxtb	r3, r3
    369c:	f003 0301 	and.w	r3, r3, #1
    36a0:	b2d9      	uxtb	r1, r3
    36a2:	2301      	movs	r3, #1
    36a4:	9300      	str	r3, [sp, #0]
    36a6:	2300      	movs	r3, #0
    36a8:	2200      	movs	r2, #0
    36aa:	4c0a      	ldr	r4, [pc, #40]	; (36d4 <usb_d_ctrl_trans_done+0xc0>)
    36ac:	47a0      	blx	r4
}
    36ae:	e00a      	b.n	36c6 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    36b0:	687b      	ldr	r3, [r7, #4]
    36b2:	69db      	ldr	r3, [r3, #28]
    36b4:	687a      	ldr	r2, [r7, #4]
    36b6:	7850      	ldrb	r0, [r2, #1]
    36b8:	687a      	ldr	r2, [r7, #4]
    36ba:	320c      	adds	r2, #12
    36bc:	2100      	movs	r1, #0
    36be:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    36c0:	687b      	ldr	r3, [r7, #4]
    36c2:	2202      	movs	r2, #2
    36c4:	709a      	strb	r2, [r3, #2]
}
    36c6:	bf00      	nop
    36c8:	3714      	adds	r7, #20
    36ca:	46bd      	mov	sp, r7
    36cc:	bd90      	pop	{r4, r7, pc}
    36ce:	bf00      	nop
    36d0:	0000b2c1 	.word	0x0000b2c1
    36d4:	0000348d 	.word	0x0000348d

000036d8 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    36d8:	b580      	push	{r7, lr}
    36da:	b086      	sub	sp, #24
    36dc:	af00      	add	r7, sp, #0
    36de:	4603      	mov	r3, r0
    36e0:	60b9      	str	r1, [r7, #8]
    36e2:	607a      	str	r2, [r7, #4]
    36e4:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    36e6:	7bfb      	ldrb	r3, [r7, #15]
    36e8:	4618      	mov	r0, r3
    36ea:	4b2f      	ldr	r3, [pc, #188]	; (37a8 <_usb_d_cb_trans_done+0xd0>)
    36ec:	4798      	blx	r3
    36ee:	4603      	mov	r3, r0
    36f0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    36f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    36f6:	015b      	lsls	r3, r3, #5
    36f8:	4a2c      	ldr	r2, [pc, #176]	; (37ac <_usb_d_cb_trans_done+0xd4>)
    36fa:	4413      	add	r3, r2
    36fc:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    36fe:	68bb      	ldr	r3, [r7, #8]
    3700:	2b00      	cmp	r3, #0
    3702:	d10e      	bne.n	3722 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3704:	693b      	ldr	r3, [r7, #16]
    3706:	2200      	movs	r2, #0
    3708:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    370a:	693b      	ldr	r3, [r7, #16]
    370c:	781b      	ldrb	r3, [r3, #0]
    370e:	2b00      	cmp	r3, #0
    3710:	d103      	bne.n	371a <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    3712:	6938      	ldr	r0, [r7, #16]
    3714:	4b26      	ldr	r3, [pc, #152]	; (37b0 <_usb_d_cb_trans_done+0xd8>)
    3716:	4798      	blx	r3
			return;
    3718:	e043      	b.n	37a2 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    371a:	693b      	ldr	r3, [r7, #16]
    371c:	2201      	movs	r2, #1
    371e:	709a      	strb	r2, [r3, #2]
    3720:	e038      	b.n	3794 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    3722:	68bb      	ldr	r3, [r7, #8]
    3724:	2b01      	cmp	r3, #1
    3726:	d113      	bne.n	3750 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    3728:	693b      	ldr	r3, [r7, #16]
    372a:	2202      	movs	r2, #2
    372c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    372e:	693b      	ldr	r3, [r7, #16]
    3730:	781b      	ldrb	r3, [r3, #0]
    3732:	2b00      	cmp	r3, #0
    3734:	d108      	bne.n	3748 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3736:	693b      	ldr	r3, [r7, #16]
    3738:	2202      	movs	r2, #2
    373a:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    373c:	7bfb      	ldrb	r3, [r7, #15]
    373e:	2100      	movs	r1, #0
    3740:	4618      	mov	r0, r3
    3742:	4b1c      	ldr	r3, [pc, #112]	; (37b4 <_usb_d_cb_trans_done+0xdc>)
    3744:	4798      	blx	r3
    3746:	e025      	b.n	3794 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    3748:	693b      	ldr	r3, [r7, #16]
    374a:	2205      	movs	r2, #5
    374c:	709a      	strb	r2, [r3, #2]
    374e:	e021      	b.n	3794 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    3750:	68bb      	ldr	r3, [r7, #8]
    3752:	2b02      	cmp	r3, #2
    3754:	d10e      	bne.n	3774 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    3756:	693b      	ldr	r3, [r7, #16]
    3758:	2204      	movs	r2, #4
    375a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    375c:	693b      	ldr	r3, [r7, #16]
    375e:	781b      	ldrb	r3, [r3, #0]
    3760:	2b00      	cmp	r3, #0
    3762:	d103      	bne.n	376c <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3764:	693b      	ldr	r3, [r7, #16]
    3766:	2202      	movs	r2, #2
    3768:	709a      	strb	r2, [r3, #2]
			return;
    376a:	e01a      	b.n	37a2 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    376c:	693b      	ldr	r3, [r7, #16]
    376e:	2201      	movs	r2, #1
    3770:	709a      	strb	r2, [r3, #2]
    3772:	e00f      	b.n	3794 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    3774:	68bb      	ldr	r3, [r7, #8]
    3776:	2b03      	cmp	r3, #3
    3778:	d106      	bne.n	3788 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    377a:	693b      	ldr	r3, [r7, #16]
    377c:	2200      	movs	r2, #0
    377e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    3780:	693b      	ldr	r3, [r7, #16]
    3782:	2205      	movs	r2, #5
    3784:	70da      	strb	r2, [r3, #3]
    3786:	e005      	b.n	3794 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    3788:	693b      	ldr	r3, [r7, #16]
    378a:	2206      	movs	r2, #6
    378c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    378e:	693b      	ldr	r3, [r7, #16]
    3790:	2206      	movs	r2, #6
    3792:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    3794:	693b      	ldr	r3, [r7, #16]
    3796:	69db      	ldr	r3, [r3, #28]
    3798:	693a      	ldr	r2, [r7, #16]
    379a:	78d1      	ldrb	r1, [r2, #3]
    379c:	687a      	ldr	r2, [r7, #4]
    379e:	7bf8      	ldrb	r0, [r7, #15]
    37a0:	4798      	blx	r3
}
    37a2:	3718      	adds	r7, #24
    37a4:	46bd      	mov	sp, r7
    37a6:	bd80      	pop	{r7, pc}
    37a8:	0000340d 	.word	0x0000340d
    37ac:	20000ab0 	.word	0x20000ab0
    37b0:	00003615 	.word	0x00003615
    37b4:	0000b2c1 	.word	0x0000b2c1

000037b8 <usb_d_init>:

int32_t usb_d_init(void)
{
    37b8:	b580      	push	{r7, lr}
    37ba:	b082      	sub	sp, #8
    37bc:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    37be:	4b21      	ldr	r3, [pc, #132]	; (3844 <usb_d_init+0x8c>)
    37c0:	4798      	blx	r3
    37c2:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    37c4:	683b      	ldr	r3, [r7, #0]
    37c6:	2b00      	cmp	r3, #0
    37c8:	da01      	bge.n	37ce <usb_d_init+0x16>
		return rc;
    37ca:	683b      	ldr	r3, [r7, #0]
    37cc:	e036      	b.n	383c <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    37ce:	2280      	movs	r2, #128	; 0x80
    37d0:	2100      	movs	r1, #0
    37d2:	481d      	ldr	r0, [pc, #116]	; (3848 <usb_d_init+0x90>)
    37d4:	4b1d      	ldr	r3, [pc, #116]	; (384c <usb_d_init+0x94>)
    37d6:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    37d8:	2300      	movs	r3, #0
    37da:	71fb      	strb	r3, [r7, #7]
    37dc:	e01e      	b.n	381c <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    37de:	79fb      	ldrb	r3, [r7, #7]
    37e0:	4a19      	ldr	r2, [pc, #100]	; (3848 <usb_d_init+0x90>)
    37e2:	015b      	lsls	r3, r3, #5
    37e4:	4413      	add	r3, r2
    37e6:	3301      	adds	r3, #1
    37e8:	22ff      	movs	r2, #255	; 0xff
    37ea:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    37ec:	79fb      	ldrb	r3, [r7, #7]
    37ee:	4a16      	ldr	r2, [pc, #88]	; (3848 <usb_d_init+0x90>)
    37f0:	015b      	lsls	r3, r3, #5
    37f2:	4413      	add	r3, r2
    37f4:	3314      	adds	r3, #20
    37f6:	4a16      	ldr	r2, [pc, #88]	; (3850 <usb_d_init+0x98>)
    37f8:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    37fa:	79fb      	ldrb	r3, [r7, #7]
    37fc:	4a12      	ldr	r2, [pc, #72]	; (3848 <usb_d_init+0x90>)
    37fe:	015b      	lsls	r3, r3, #5
    3800:	4413      	add	r3, r2
    3802:	3318      	adds	r3, #24
    3804:	4a12      	ldr	r2, [pc, #72]	; (3850 <usb_d_init+0x98>)
    3806:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    3808:	79fb      	ldrb	r3, [r7, #7]
    380a:	4a0f      	ldr	r2, [pc, #60]	; (3848 <usb_d_init+0x90>)
    380c:	015b      	lsls	r3, r3, #5
    380e:	4413      	add	r3, r2
    3810:	331c      	adds	r3, #28
    3812:	4a0f      	ldr	r2, [pc, #60]	; (3850 <usb_d_init+0x98>)
    3814:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3816:	79fb      	ldrb	r3, [r7, #7]
    3818:	3301      	adds	r3, #1
    381a:	71fb      	strb	r3, [r7, #7]
    381c:	79fb      	ldrb	r3, [r7, #7]
    381e:	2b03      	cmp	r3, #3
    3820:	d9dd      	bls.n	37de <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    3822:	490c      	ldr	r1, [pc, #48]	; (3854 <usb_d_init+0x9c>)
    3824:	2000      	movs	r0, #0
    3826:	4b0c      	ldr	r3, [pc, #48]	; (3858 <usb_d_init+0xa0>)
    3828:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    382a:	490c      	ldr	r1, [pc, #48]	; (385c <usb_d_init+0xa4>)
    382c:	2001      	movs	r0, #1
    382e:	4b0a      	ldr	r3, [pc, #40]	; (3858 <usb_d_init+0xa0>)
    3830:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    3832:	490b      	ldr	r1, [pc, #44]	; (3860 <usb_d_init+0xa8>)
    3834:	2002      	movs	r0, #2
    3836:	4b08      	ldr	r3, [pc, #32]	; (3858 <usb_d_init+0xa0>)
    3838:	4798      	blx	r3
	return ERR_NONE;
    383a:	2300      	movs	r3, #0
}
    383c:	4618      	mov	r0, r3
    383e:	3708      	adds	r7, #8
    3840:	46bd      	mov	sp, r7
    3842:	bd80      	pop	{r7, pc}
    3844:	0000ab09 	.word	0x0000ab09
    3848:	20000ab0 	.word	0x20000ab0
    384c:	0000fd79 	.word	0x0000fd79
    3850:	000034e1 	.word	0x000034e1
    3854:	000034fd 	.word	0x000034fd
    3858:	0000b751 	.word	0x0000b751
    385c:	000035c5 	.word	0x000035c5
    3860:	000036d9 	.word	0x000036d9

00003864 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3864:	b580      	push	{r7, lr}
    3866:	b082      	sub	sp, #8
    3868:	af00      	add	r7, sp, #0
    386a:	4603      	mov	r3, r0
    386c:	6039      	str	r1, [r7, #0]
    386e:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3870:	79fb      	ldrb	r3, [r7, #7]
    3872:	6839      	ldr	r1, [r7, #0]
    3874:	4618      	mov	r0, r3
    3876:	4b03      	ldr	r3, [pc, #12]	; (3884 <usb_d_register_callback+0x20>)
    3878:	4798      	blx	r3
}
    387a:	bf00      	nop
    387c:	3708      	adds	r7, #8
    387e:	46bd      	mov	sp, r7
    3880:	bd80      	pop	{r7, pc}
    3882:	bf00      	nop
    3884:	0000b709 	.word	0x0000b709

00003888 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    3888:	b580      	push	{r7, lr}
    388a:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    388c:	4b02      	ldr	r3, [pc, #8]	; (3898 <usb_d_enable+0x10>)
    388e:	4798      	blx	r3
    3890:	4603      	mov	r3, r0
}
    3892:	4618      	mov	r0, r3
    3894:	bd80      	pop	{r7, pc}
    3896:	bf00      	nop
    3898:	0000abf9 	.word	0x0000abf9

0000389c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    389c:	b580      	push	{r7, lr}
    389e:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    38a0:	4b01      	ldr	r3, [pc, #4]	; (38a8 <usb_d_attach+0xc>)
    38a2:	4798      	blx	r3
}
    38a4:	bf00      	nop
    38a6:	bd80      	pop	{r7, pc}
    38a8:	0000ac7d 	.word	0x0000ac7d

000038ac <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    38ac:	b580      	push	{r7, lr}
    38ae:	b082      	sub	sp, #8
    38b0:	af00      	add	r7, sp, #0
    38b2:	4603      	mov	r3, r0
    38b4:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    38b6:	79fb      	ldrb	r3, [r7, #7]
    38b8:	4618      	mov	r0, r3
    38ba:	4b03      	ldr	r3, [pc, #12]	; (38c8 <usb_d_set_address+0x1c>)
    38bc:	4798      	blx	r3
}
    38be:	bf00      	nop
    38c0:	3708      	adds	r7, #8
    38c2:	46bd      	mov	sp, r7
    38c4:	bd80      	pop	{r7, pc}
    38c6:	bf00      	nop
    38c8:	0000ac91 	.word	0x0000ac91

000038cc <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    38cc:	b580      	push	{r7, lr}
    38ce:	b082      	sub	sp, #8
    38d0:	af00      	add	r7, sp, #0
    38d2:	4603      	mov	r3, r0
    38d4:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    38d6:	79fb      	ldrb	r3, [r7, #7]
    38d8:	b29b      	uxth	r3, r3
    38da:	461a      	mov	r2, r3
    38dc:	2100      	movs	r1, #0
    38de:	2000      	movs	r0, #0
    38e0:	4b03      	ldr	r3, [pc, #12]	; (38f0 <usb_d_ep0_init+0x24>)
    38e2:	4798      	blx	r3
    38e4:	4603      	mov	r3, r0
}
    38e6:	4618      	mov	r0, r3
    38e8:	3708      	adds	r7, #8
    38ea:	46bd      	mov	sp, r7
    38ec:	bd80      	pop	{r7, pc}
    38ee:	bf00      	nop
    38f0:	000038f5 	.word	0x000038f5

000038f4 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    38f4:	b580      	push	{r7, lr}
    38f6:	b086      	sub	sp, #24
    38f8:	af00      	add	r7, sp, #0
    38fa:	4603      	mov	r3, r0
    38fc:	71fb      	strb	r3, [r7, #7]
    38fe:	460b      	mov	r3, r1
    3900:	71bb      	strb	r3, [r7, #6]
    3902:	4613      	mov	r3, r2
    3904:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    3906:	79fb      	ldrb	r3, [r7, #7]
    3908:	4618      	mov	r0, r3
    390a:	4b1e      	ldr	r3, [pc, #120]	; (3984 <usb_d_ep_init+0x90>)
    390c:	4798      	blx	r3
    390e:	4603      	mov	r3, r0
    3910:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3912:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3916:	015b      	lsls	r3, r3, #5
    3918:	4a1b      	ldr	r2, [pc, #108]	; (3988 <usb_d_ep_init+0x94>)
    391a:	4413      	add	r3, r2
    391c:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    391e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3922:	2b00      	cmp	r3, #0
    3924:	db02      	blt.n	392c <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    3926:	f06f 0313 	mvn.w	r3, #19
    392a:	e027      	b.n	397c <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    392c:	20ff      	movs	r0, #255	; 0xff
    392e:	4b15      	ldr	r3, [pc, #84]	; (3984 <usb_d_ep_init+0x90>)
    3930:	4798      	blx	r3
    3932:	4603      	mov	r3, r0
    3934:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    3936:	f997 3017 	ldrsb.w	r3, [r7, #23]
    393a:	2b00      	cmp	r3, #0
    393c:	da02      	bge.n	3944 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    393e:	f06f 0314 	mvn.w	r3, #20
    3942:	e01b      	b.n	397c <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3944:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3948:	015b      	lsls	r3, r3, #5
    394a:	4a0f      	ldr	r2, [pc, #60]	; (3988 <usb_d_ep_init+0x94>)
    394c:	4413      	add	r3, r2
    394e:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    3950:	88ba      	ldrh	r2, [r7, #4]
    3952:	79b9      	ldrb	r1, [r7, #6]
    3954:	79fb      	ldrb	r3, [r7, #7]
    3956:	4618      	mov	r0, r3
    3958:	4b0c      	ldr	r3, [pc, #48]	; (398c <usb_d_ep_init+0x98>)
    395a:	4798      	blx	r3
    395c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    395e:	68fb      	ldr	r3, [r7, #12]
    3960:	2b00      	cmp	r3, #0
    3962:	da01      	bge.n	3968 <usb_d_ep_init+0x74>
		return rc;
    3964:	68fb      	ldr	r3, [r7, #12]
    3966:	e009      	b.n	397c <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3968:	693b      	ldr	r3, [r7, #16]
    396a:	79fa      	ldrb	r2, [r7, #7]
    396c:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    396e:	79bb      	ldrb	r3, [r7, #6]
    3970:	f003 0303 	and.w	r3, r3, #3
    3974:	b2da      	uxtb	r2, r3
    3976:	693b      	ldr	r3, [r7, #16]
    3978:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    397a:	2300      	movs	r3, #0
}
    397c:	4618      	mov	r0, r3
    397e:	3718      	adds	r7, #24
    3980:	46bd      	mov	sp, r7
    3982:	bd80      	pop	{r7, pc}
    3984:	0000340d 	.word	0x0000340d
    3988:	20000ab0 	.word	0x20000ab0
    398c:	0000ad31 	.word	0x0000ad31

00003990 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3990:	b580      	push	{r7, lr}
    3992:	b084      	sub	sp, #16
    3994:	af00      	add	r7, sp, #0
    3996:	4603      	mov	r3, r0
    3998:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    399a:	79fb      	ldrb	r3, [r7, #7]
    399c:	4618      	mov	r0, r3
    399e:	4b0d      	ldr	r3, [pc, #52]	; (39d4 <usb_d_ep_deinit+0x44>)
    39a0:	4798      	blx	r3
    39a2:	4603      	mov	r3, r0
    39a4:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    39a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    39aa:	015b      	lsls	r3, r3, #5
    39ac:	4a0a      	ldr	r2, [pc, #40]	; (39d8 <usb_d_ep_deinit+0x48>)
    39ae:	4413      	add	r3, r2
    39b0:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    39b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    39b6:	2b00      	cmp	r3, #0
    39b8:	db07      	blt.n	39ca <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    39ba:	79fb      	ldrb	r3, [r7, #7]
    39bc:	4618      	mov	r0, r3
    39be:	4b07      	ldr	r3, [pc, #28]	; (39dc <usb_d_ep_deinit+0x4c>)
    39c0:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    39c2:	68bb      	ldr	r3, [r7, #8]
    39c4:	22ff      	movs	r2, #255	; 0xff
    39c6:	705a      	strb	r2, [r3, #1]
    39c8:	e000      	b.n	39cc <usb_d_ep_deinit+0x3c>
		return;
    39ca:	bf00      	nop
}
    39cc:	3710      	adds	r7, #16
    39ce:	46bd      	mov	sp, r7
    39d0:	bd80      	pop	{r7, pc}
    39d2:	bf00      	nop
    39d4:	0000340d 	.word	0x0000340d
    39d8:	20000ab0 	.word	0x20000ab0
    39dc:	0000ae65 	.word	0x0000ae65

000039e0 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    39e0:	b580      	push	{r7, lr}
    39e2:	b086      	sub	sp, #24
    39e4:	af00      	add	r7, sp, #0
    39e6:	4603      	mov	r3, r0
    39e8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    39ea:	79fb      	ldrb	r3, [r7, #7]
    39ec:	4618      	mov	r0, r3
    39ee:	4b15      	ldr	r3, [pc, #84]	; (3a44 <usb_d_ep_enable+0x64>)
    39f0:	4798      	blx	r3
    39f2:	4603      	mov	r3, r0
    39f4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    39f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    39fa:	015b      	lsls	r3, r3, #5
    39fc:	4a12      	ldr	r2, [pc, #72]	; (3a48 <usb_d_ep_enable+0x68>)
    39fe:	4413      	add	r3, r2
    3a00:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3a02:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3a06:	2b00      	cmp	r3, #0
    3a08:	da02      	bge.n	3a10 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    3a0a:	f06f 0311 	mvn.w	r3, #17
    3a0e:	e014      	b.n	3a3a <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3a10:	693b      	ldr	r3, [r7, #16]
    3a12:	781b      	ldrb	r3, [r3, #0]
    3a14:	2b00      	cmp	r3, #0
    3a16:	d101      	bne.n	3a1c <usb_d_ep_enable+0x3c>
    3a18:	2202      	movs	r2, #2
    3a1a:	e000      	b.n	3a1e <usb_d_ep_enable+0x3e>
    3a1c:	2201      	movs	r2, #1
    3a1e:	693b      	ldr	r3, [r7, #16]
    3a20:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    3a22:	79fb      	ldrb	r3, [r7, #7]
    3a24:	4618      	mov	r0, r3
    3a26:	4b09      	ldr	r3, [pc, #36]	; (3a4c <usb_d_ep_enable+0x6c>)
    3a28:	4798      	blx	r3
    3a2a:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3a2c:	68fb      	ldr	r3, [r7, #12]
    3a2e:	2b00      	cmp	r3, #0
    3a30:	da02      	bge.n	3a38 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    3a32:	693b      	ldr	r3, [r7, #16]
    3a34:	2200      	movs	r2, #0
    3a36:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3a38:	68fb      	ldr	r3, [r7, #12]
}
    3a3a:	4618      	mov	r0, r3
    3a3c:	3718      	adds	r7, #24
    3a3e:	46bd      	mov	sp, r7
    3a40:	bd80      	pop	{r7, pc}
    3a42:	bf00      	nop
    3a44:	0000340d 	.word	0x0000340d
    3a48:	20000ab0 	.word	0x20000ab0
    3a4c:	0000af49 	.word	0x0000af49

00003a50 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    3a50:	b590      	push	{r4, r7, lr}
    3a52:	b08d      	sub	sp, #52	; 0x34
    3a54:	af02      	add	r7, sp, #8
    3a56:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3a58:	687b      	ldr	r3, [r7, #4]
    3a5a:	7a1b      	ldrb	r3, [r3, #8]
    3a5c:	4618      	mov	r0, r3
    3a5e:	4b51      	ldr	r3, [pc, #324]	; (3ba4 <usb_d_ep_transfer+0x154>)
    3a60:	4798      	blx	r3
    3a62:	4603      	mov	r3, r0
    3a64:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3a66:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3a6a:	015b      	lsls	r3, r3, #5
    3a6c:	4a4e      	ldr	r2, [pc, #312]	; (3ba8 <usb_d_ep_transfer+0x158>)
    3a6e:	4413      	add	r3, r2
    3a70:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    3a72:	687b      	ldr	r3, [r7, #4]
    3a74:	7a1b      	ldrb	r3, [r3, #8]
    3a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3a7a:	2b00      	cmp	r3, #0
    3a7c:	bf14      	ite	ne
    3a7e:	2301      	movne	r3, #1
    3a80:	2300      	moveq	r3, #0
    3a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3a86:	687b      	ldr	r3, [r7, #4]
    3a88:	7a5b      	ldrb	r3, [r3, #9]
    3a8a:	2b00      	cmp	r3, #0
    3a8c:	bf14      	ite	ne
    3a8e:	2301      	movne	r3, #1
    3a90:	2300      	moveq	r3, #0
    3a92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    3a96:	687b      	ldr	r3, [r7, #4]
    3a98:	685b      	ldr	r3, [r3, #4]
    3a9a:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    3a9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3aa0:	2b00      	cmp	r3, #0
    3aa2:	da02      	bge.n	3aaa <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3aa4:	f06f 0311 	mvn.w	r3, #17
    3aa8:	e077      	b.n	3b9a <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    3aaa:	f107 0308 	add.w	r3, r7, #8
    3aae:	4618      	mov	r0, r3
    3ab0:	4b3e      	ldr	r3, [pc, #248]	; (3bac <usb_d_ep_transfer+0x15c>)
    3ab2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3ab4:	69bb      	ldr	r3, [r7, #24]
    3ab6:	789b      	ldrb	r3, [r3, #2]
    3ab8:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    3aba:	7bfb      	ldrb	r3, [r7, #15]
    3abc:	b2db      	uxtb	r3, r3
    3abe:	2b01      	cmp	r3, #1
    3ac0:	d10c      	bne.n	3adc <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3ac2:	69bb      	ldr	r3, [r7, #24]
    3ac4:	2203      	movs	r2, #3
    3ac6:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3ac8:	f107 0308 	add.w	r3, r7, #8
    3acc:	4618      	mov	r0, r3
    3ace:	4b38      	ldr	r3, [pc, #224]	; (3bb0 <usb_d_ep_transfer+0x160>)
    3ad0:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3ad2:	69bb      	ldr	r3, [r7, #24]
    3ad4:	781b      	ldrb	r3, [r3, #0]
    3ad6:	2b00      	cmp	r3, #0
    3ad8:	d151      	bne.n	3b7e <usb_d_ep_transfer+0x12e>
    3ada:	e017      	b.n	3b0c <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3adc:	f107 0308 	add.w	r3, r7, #8
    3ae0:	4618      	mov	r0, r3
    3ae2:	4b33      	ldr	r3, [pc, #204]	; (3bb0 <usb_d_ep_transfer+0x160>)
    3ae4:	4798      	blx	r3
		switch (state) {
    3ae6:	7bfb      	ldrb	r3, [r7, #15]
    3ae8:	b2db      	uxtb	r3, r3
    3aea:	2b05      	cmp	r3, #5
    3aec:	d004      	beq.n	3af8 <usb_d_ep_transfer+0xa8>
    3aee:	2b06      	cmp	r3, #6
    3af0:	d004      	beq.n	3afc <usb_d_ep_transfer+0xac>
    3af2:	2b00      	cmp	r3, #0
    3af4:	d005      	beq.n	3b02 <usb_d_ep_transfer+0xb2>
    3af6:	e007      	b.n	3b08 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3af8:	2302      	movs	r3, #2
    3afa:	e04e      	b.n	3b9a <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3afc:	f06f 030f 	mvn.w	r3, #15
    3b00:	e04b      	b.n	3b9a <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    3b02:	f06f 0312 	mvn.w	r3, #18
    3b06:	e048      	b.n	3b9a <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3b08:	2301      	movs	r3, #1
    3b0a:	e046      	b.n	3b9a <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3b0c:	69bb      	ldr	r3, [r7, #24]
    3b0e:	7c9b      	ldrb	r3, [r3, #18]
    3b10:	b29a      	uxth	r2, r3
    3b12:	69bb      	ldr	r3, [r7, #24]
    3b14:	7cdb      	ldrb	r3, [r3, #19]
    3b16:	b29b      	uxth	r3, r3
    3b18:	021b      	lsls	r3, r3, #8
    3b1a:	b29b      	uxth	r3, r3
    3b1c:	4413      	add	r3, r2
    3b1e:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    3b20:	8afb      	ldrh	r3, [r7, #22]
    3b22:	2b00      	cmp	r3, #0
    3b24:	d10b      	bne.n	3b3e <usb_d_ep_transfer+0xee>
			dir                 = true;
    3b26:	2301      	movs	r3, #1
    3b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    3b2c:	2300      	movs	r3, #0
    3b2e:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    3b30:	2301      	movs	r3, #1
    3b32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3b36:	69bb      	ldr	r3, [r7, #24]
    3b38:	2204      	movs	r2, #4
    3b3a:	709a      	strb	r2, [r3, #2]
    3b3c:	e01f      	b.n	3b7e <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    3b3e:	69bb      	ldr	r3, [r7, #24]
    3b40:	7b1b      	ldrb	r3, [r3, #12]
    3b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3b46:	2b00      	cmp	r3, #0
    3b48:	bf14      	ite	ne
    3b4a:	2301      	movne	r3, #1
    3b4c:	2300      	moveq	r3, #0
    3b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    3b52:	8afa      	ldrh	r2, [r7, #22]
    3b54:	6a3b      	ldr	r3, [r7, #32]
    3b56:	429a      	cmp	r2, r3
    3b58:	d201      	bcs.n	3b5e <usb_d_ep_transfer+0x10e>
				len = req_len;
    3b5a:	8afb      	ldrh	r3, [r7, #22]
    3b5c:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    3b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3b62:	2b00      	cmp	r3, #0
    3b64:	d008      	beq.n	3b78 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3b66:	8afa      	ldrh	r2, [r7, #22]
    3b68:	6a3b      	ldr	r3, [r7, #32]
    3b6a:	429a      	cmp	r2, r3
    3b6c:	bf8c      	ite	hi
    3b6e:	2301      	movhi	r3, #1
    3b70:	2300      	movls	r3, #0
    3b72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3b76:	e002      	b.n	3b7e <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3b78:	2300      	movs	r3, #0
    3b7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    3b7e:	687b      	ldr	r3, [r7, #4]
    3b80:	7a18      	ldrb	r0, [r3, #8]
    3b82:	687b      	ldr	r3, [r7, #4]
    3b84:	681a      	ldr	r2, [r3, #0]
    3b86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3b8a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    3b8e:	9300      	str	r3, [sp, #0]
    3b90:	6a3b      	ldr	r3, [r7, #32]
    3b92:	4c08      	ldr	r4, [pc, #32]	; (3bb4 <usb_d_ep_transfer+0x164>)
    3b94:	47a0      	blx	r4
    3b96:	6138      	str	r0, [r7, #16]
	return rc;
    3b98:	693b      	ldr	r3, [r7, #16]
}
    3b9a:	4618      	mov	r0, r3
    3b9c:	372c      	adds	r7, #44	; 0x2c
    3b9e:	46bd      	mov	sp, r7
    3ba0:	bd90      	pop	{r4, r7, pc}
    3ba2:	bf00      	nop
    3ba4:	0000340d 	.word	0x0000340d
    3ba8:	20000ab0 	.word	0x20000ab0
    3bac:	0000bebd 	.word	0x0000bebd
    3bb0:	0000bee3 	.word	0x0000bee3
    3bb4:	0000348d 	.word	0x0000348d

00003bb8 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3bb8:	b580      	push	{r7, lr}
    3bba:	b084      	sub	sp, #16
    3bbc:	af00      	add	r7, sp, #0
    3bbe:	4603      	mov	r3, r0
    3bc0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3bc2:	79fb      	ldrb	r3, [r7, #7]
    3bc4:	4618      	mov	r0, r3
    3bc6:	4b0e      	ldr	r3, [pc, #56]	; (3c00 <usb_d_ep_abort+0x48>)
    3bc8:	4798      	blx	r3
    3bca:	4603      	mov	r3, r0
    3bcc:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3bd2:	015b      	lsls	r3, r3, #5
    3bd4:	4a0b      	ldr	r2, [pc, #44]	; (3c04 <usb_d_ep_abort+0x4c>)
    3bd6:	4413      	add	r3, r2
    3bd8:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3bde:	2b00      	cmp	r3, #0
    3be0:	db0a      	blt.n	3bf8 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    3be2:	79fb      	ldrb	r3, [r7, #7]
    3be4:	4618      	mov	r0, r3
    3be6:	4b08      	ldr	r3, [pc, #32]	; (3c08 <usb_d_ep_abort+0x50>)
    3be8:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3bea:	68bb      	ldr	r3, [r7, #8]
    3bec:	2201      	movs	r2, #1
    3bee:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    3bf0:	68bb      	ldr	r3, [r7, #8]
    3bf2:	2204      	movs	r2, #4
    3bf4:	70da      	strb	r2, [r3, #3]
    3bf6:	e000      	b.n	3bfa <usb_d_ep_abort+0x42>
		return;
    3bf8:	bf00      	nop
}
    3bfa:	3710      	adds	r7, #16
    3bfc:	46bd      	mov	sp, r7
    3bfe:	bd80      	pop	{r7, pc}
    3c00:	0000340d 	.word	0x0000340d
    3c04:	20000ab0 	.word	0x20000ab0
    3c08:	0000b6b5 	.word	0x0000b6b5

00003c0c <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    3c0c:	b580      	push	{r7, lr}
    3c0e:	b086      	sub	sp, #24
    3c10:	af00      	add	r7, sp, #0
    3c12:	4603      	mov	r3, r0
    3c14:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3c16:	79fb      	ldrb	r3, [r7, #7]
    3c18:	4618      	mov	r0, r3
    3c1a:	4b1a      	ldr	r3, [pc, #104]	; (3c84 <_usb_d_ep_halt_clr+0x78>)
    3c1c:	4798      	blx	r3
    3c1e:	4603      	mov	r3, r0
    3c20:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3c26:	015b      	lsls	r3, r3, #5
    3c28:	4a17      	ldr	r2, [pc, #92]	; (3c88 <_usb_d_ep_halt_clr+0x7c>)
    3c2a:	4413      	add	r3, r2
    3c2c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3c2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3c32:	2b00      	cmp	r3, #0
    3c34:	da02      	bge.n	3c3c <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3c36:	f06f 0311 	mvn.w	r3, #17
    3c3a:	e01f      	b.n	3c7c <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3c3c:	79fb      	ldrb	r3, [r7, #7]
    3c3e:	2102      	movs	r1, #2
    3c40:	4618      	mov	r0, r3
    3c42:	4b12      	ldr	r3, [pc, #72]	; (3c8c <_usb_d_ep_halt_clr+0x80>)
    3c44:	4798      	blx	r3
    3c46:	4603      	mov	r3, r0
    3c48:	2b00      	cmp	r3, #0
    3c4a:	d016      	beq.n	3c7a <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3c4c:	79fb      	ldrb	r3, [r7, #7]
    3c4e:	2100      	movs	r1, #0
    3c50:	4618      	mov	r0, r3
    3c52:	4b0e      	ldr	r3, [pc, #56]	; (3c8c <_usb_d_ep_halt_clr+0x80>)
    3c54:	4798      	blx	r3
    3c56:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3c58:	68fb      	ldr	r3, [r7, #12]
    3c5a:	2b00      	cmp	r3, #0
    3c5c:	da01      	bge.n	3c62 <_usb_d_ep_halt_clr+0x56>
			return rc;
    3c5e:	68fb      	ldr	r3, [r7, #12]
    3c60:	e00c      	b.n	3c7c <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3c62:	693b      	ldr	r3, [r7, #16]
    3c64:	2201      	movs	r2, #1
    3c66:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3c68:	693b      	ldr	r3, [r7, #16]
    3c6a:	2203      	movs	r2, #3
    3c6c:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    3c6e:	693b      	ldr	r3, [r7, #16]
    3c70:	69db      	ldr	r3, [r3, #28]
    3c72:	79f8      	ldrb	r0, [r7, #7]
    3c74:	2200      	movs	r2, #0
    3c76:	2103      	movs	r1, #3
    3c78:	4798      	blx	r3
	}
	return ERR_NONE;
    3c7a:	2300      	movs	r3, #0
}
    3c7c:	4618      	mov	r0, r3
    3c7e:	3718      	adds	r7, #24
    3c80:	46bd      	mov	sp, r7
    3c82:	bd80      	pop	{r7, pc}
    3c84:	0000340d 	.word	0x0000340d
    3c88:	20000ab0 	.word	0x20000ab0
    3c8c:	0000b2c1 	.word	0x0000b2c1

00003c90 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3c90:	b580      	push	{r7, lr}
    3c92:	b082      	sub	sp, #8
    3c94:	af00      	add	r7, sp, #0
    3c96:	4603      	mov	r3, r0
    3c98:	460a      	mov	r2, r1
    3c9a:	71fb      	strb	r3, [r7, #7]
    3c9c:	4613      	mov	r3, r2
    3c9e:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    3ca0:	79bb      	ldrb	r3, [r7, #6]
    3ca2:	2b00      	cmp	r3, #0
    3ca4:	d105      	bne.n	3cb2 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    3ca6:	79fb      	ldrb	r3, [r7, #7]
    3ca8:	4618      	mov	r0, r3
    3caa:	4b0c      	ldr	r3, [pc, #48]	; (3cdc <usb_d_ep_halt+0x4c>)
    3cac:	4798      	blx	r3
    3cae:	4603      	mov	r3, r0
    3cb0:	e00f      	b.n	3cd2 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    3cb2:	79bb      	ldrb	r3, [r7, #6]
    3cb4:	2b01      	cmp	r3, #1
    3cb6:	d106      	bne.n	3cc6 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3cb8:	79fb      	ldrb	r3, [r7, #7]
    3cba:	2101      	movs	r1, #1
    3cbc:	4618      	mov	r0, r3
    3cbe:	4b08      	ldr	r3, [pc, #32]	; (3ce0 <usb_d_ep_halt+0x50>)
    3cc0:	4798      	blx	r3
    3cc2:	4603      	mov	r3, r0
    3cc4:	e005      	b.n	3cd2 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3cc6:	79fb      	ldrb	r3, [r7, #7]
    3cc8:	2102      	movs	r1, #2
    3cca:	4618      	mov	r0, r3
    3ccc:	4b04      	ldr	r3, [pc, #16]	; (3ce0 <usb_d_ep_halt+0x50>)
    3cce:	4798      	blx	r3
    3cd0:	4603      	mov	r3, r0
	}
}
    3cd2:	4618      	mov	r0, r3
    3cd4:	3708      	adds	r7, #8
    3cd6:	46bd      	mov	sp, r7
    3cd8:	bd80      	pop	{r7, pc}
    3cda:	bf00      	nop
    3cdc:	00003c0d 	.word	0x00003c0d
    3ce0:	0000b2c1 	.word	0x0000b2c1

00003ce4 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3ce4:	b580      	push	{r7, lr}
    3ce6:	b086      	sub	sp, #24
    3ce8:	af00      	add	r7, sp, #0
    3cea:	4603      	mov	r3, r0
    3cec:	603a      	str	r2, [r7, #0]
    3cee:	71fb      	strb	r3, [r7, #7]
    3cf0:	460b      	mov	r3, r1
    3cf2:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3cf4:	79fb      	ldrb	r3, [r7, #7]
    3cf6:	4618      	mov	r0, r3
    3cf8:	4b16      	ldr	r3, [pc, #88]	; (3d54 <usb_d_ep_register_callback+0x70>)
    3cfa:	4798      	blx	r3
    3cfc:	4603      	mov	r3, r0
    3cfe:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3d00:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3d04:	015b      	lsls	r3, r3, #5
    3d06:	4a14      	ldr	r2, [pc, #80]	; (3d58 <usb_d_ep_register_callback+0x74>)
    3d08:	4413      	add	r3, r2
    3d0a:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3d0c:	683b      	ldr	r3, [r7, #0]
    3d0e:	2b00      	cmp	r3, #0
    3d10:	d001      	beq.n	3d16 <usb_d_ep_register_callback+0x32>
    3d12:	683b      	ldr	r3, [r7, #0]
    3d14:	e000      	b.n	3d18 <usb_d_ep_register_callback+0x34>
    3d16:	4b11      	ldr	r3, [pc, #68]	; (3d5c <usb_d_ep_register_callback+0x78>)
    3d18:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    3d1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3d1e:	2b00      	cmp	r3, #0
    3d20:	db13      	blt.n	3d4a <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    3d22:	79bb      	ldrb	r3, [r7, #6]
    3d24:	2b01      	cmp	r3, #1
    3d26:	d008      	beq.n	3d3a <usb_d_ep_register_callback+0x56>
    3d28:	2b02      	cmp	r3, #2
    3d2a:	d00a      	beq.n	3d42 <usb_d_ep_register_callback+0x5e>
    3d2c:	2b00      	cmp	r3, #0
    3d2e:	d000      	beq.n	3d32 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    3d30:	e00c      	b.n	3d4c <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    3d32:	693b      	ldr	r3, [r7, #16]
    3d34:	68fa      	ldr	r2, [r7, #12]
    3d36:	615a      	str	r2, [r3, #20]
		break;
    3d38:	e008      	b.n	3d4c <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3d3a:	693b      	ldr	r3, [r7, #16]
    3d3c:	68fa      	ldr	r2, [r7, #12]
    3d3e:	619a      	str	r2, [r3, #24]
		break;
    3d40:	e004      	b.n	3d4c <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    3d42:	693b      	ldr	r3, [r7, #16]
    3d44:	68fa      	ldr	r2, [r7, #12]
    3d46:	61da      	str	r2, [r3, #28]
		break;
    3d48:	e000      	b.n	3d4c <usb_d_ep_register_callback+0x68>
		return;
    3d4a:	bf00      	nop
	}
}
    3d4c:	3718      	adds	r7, #24
    3d4e:	46bd      	mov	sp, r7
    3d50:	bd80      	pop	{r7, pc}
    3d52:	bf00      	nop
    3d54:	0000340d 	.word	0x0000340d
    3d58:	20000ab0 	.word	0x20000ab0
    3d5c:	000034e1 	.word	0x000034e1

00003d60 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3d60:	b480      	push	{r7}
    3d62:	b085      	sub	sp, #20
    3d64:	af00      	add	r7, sp, #0
    3d66:	4603      	mov	r3, r0
    3d68:	60b9      	str	r1, [r7, #8]
    3d6a:	607a      	str	r2, [r7, #4]
    3d6c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    3d6e:	7bfb      	ldrb	r3, [r7, #15]
    3d70:	f083 0301 	eor.w	r3, r3, #1
    3d74:	b2db      	uxtb	r3, r3
    3d76:	2b00      	cmp	r3, #0
    3d78:	d000      	beq.n	3d7c <assert+0x1c>
		__asm("BKPT #0");
    3d7a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3d7c:	bf00      	nop
    3d7e:	3714      	adds	r7, #20
    3d80:	46bd      	mov	sp, r7
    3d82:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d86:	4770      	bx	lr

00003d88 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3d88:	b480      	push	{r7}
    3d8a:	b085      	sub	sp, #20
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	6078      	str	r0, [r7, #4]
    3d90:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    3d92:	687b      	ldr	r3, [r7, #4]
    3d94:	681b      	ldr	r3, [r3, #0]
    3d96:	60fb      	str	r3, [r7, #12]
    3d98:	e008      	b.n	3dac <is_list_element+0x24>
		if (it == element) {
    3d9a:	68fa      	ldr	r2, [r7, #12]
    3d9c:	683b      	ldr	r3, [r7, #0]
    3d9e:	429a      	cmp	r2, r3
    3da0:	d101      	bne.n	3da6 <is_list_element+0x1e>
			return true;
    3da2:	2301      	movs	r3, #1
    3da4:	e006      	b.n	3db4 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    3da6:	68fb      	ldr	r3, [r7, #12]
    3da8:	681b      	ldr	r3, [r3, #0]
    3daa:	60fb      	str	r3, [r7, #12]
    3dac:	68fb      	ldr	r3, [r7, #12]
    3dae:	2b00      	cmp	r3, #0
    3db0:	d1f3      	bne.n	3d9a <is_list_element+0x12>
		}
	}

	return false;
    3db2:	2300      	movs	r3, #0
}
    3db4:	4618      	mov	r0, r3
    3db6:	3714      	adds	r7, #20
    3db8:	46bd      	mov	sp, r7
    3dba:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dbe:	4770      	bx	lr

00003dc0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3dc0:	b580      	push	{r7, lr}
    3dc2:	b082      	sub	sp, #8
    3dc4:	af00      	add	r7, sp, #0
    3dc6:	6078      	str	r0, [r7, #4]
    3dc8:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    3dca:	6839      	ldr	r1, [r7, #0]
    3dcc:	6878      	ldr	r0, [r7, #4]
    3dce:	4b0f      	ldr	r3, [pc, #60]	; (3e0c <list_insert_as_head+0x4c>)
    3dd0:	4798      	blx	r3
    3dd2:	4603      	mov	r3, r0
    3dd4:	2b00      	cmp	r3, #0
    3dd6:	bf14      	ite	ne
    3dd8:	2301      	movne	r3, #1
    3dda:	2300      	moveq	r3, #0
    3ddc:	b2db      	uxtb	r3, r3
    3dde:	f083 0301 	eor.w	r3, r3, #1
    3de2:	b2db      	uxtb	r3, r3
    3de4:	f003 0301 	and.w	r3, r3, #1
    3de8:	b2db      	uxtb	r3, r3
    3dea:	2239      	movs	r2, #57	; 0x39
    3dec:	4908      	ldr	r1, [pc, #32]	; (3e10 <list_insert_as_head+0x50>)
    3dee:	4618      	mov	r0, r3
    3df0:	4b08      	ldr	r3, [pc, #32]	; (3e14 <list_insert_as_head+0x54>)
    3df2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3df4:	687b      	ldr	r3, [r7, #4]
    3df6:	681a      	ldr	r2, [r3, #0]
    3df8:	683b      	ldr	r3, [r7, #0]
    3dfa:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3dfc:	687b      	ldr	r3, [r7, #4]
    3dfe:	683a      	ldr	r2, [r7, #0]
    3e00:	601a      	str	r2, [r3, #0]
}
    3e02:	bf00      	nop
    3e04:	3708      	adds	r7, #8
    3e06:	46bd      	mov	sp, r7
    3e08:	bd80      	pop	{r7, pc}
    3e0a:	bf00      	nop
    3e0c:	00003d89 	.word	0x00003d89
    3e10:	00010064 	.word	0x00010064
    3e14:	00003d61 	.word	0x00003d61

00003e18 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3e18:	b480      	push	{r7}
    3e1a:	b083      	sub	sp, #12
    3e1c:	af00      	add	r7, sp, #0
    3e1e:	6078      	str	r0, [r7, #4]
    3e20:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    3e22:	687b      	ldr	r3, [r7, #4]
    3e24:	681a      	ldr	r2, [r3, #0]
    3e26:	683b      	ldr	r3, [r7, #0]
    3e28:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3e2a:	687b      	ldr	r3, [r7, #4]
    3e2c:	683a      	ldr	r2, [r7, #0]
    3e2e:	601a      	str	r2, [r3, #0]
}
    3e30:	bf00      	nop
    3e32:	370c      	adds	r7, #12
    3e34:	46bd      	mov	sp, r7
    3e36:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e3a:	4770      	bx	lr

00003e3c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3e3c:	b580      	push	{r7, lr}
    3e3e:	b084      	sub	sp, #16
    3e40:	af00      	add	r7, sp, #0
    3e42:	6078      	str	r0, [r7, #4]
    3e44:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    3e46:	687b      	ldr	r3, [r7, #4]
    3e48:	681b      	ldr	r3, [r3, #0]
    3e4a:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3e4c:	6839      	ldr	r1, [r7, #0]
    3e4e:	6878      	ldr	r0, [r7, #4]
    3e50:	4b16      	ldr	r3, [pc, #88]	; (3eac <list_insert_at_end+0x70>)
    3e52:	4798      	blx	r3
    3e54:	4603      	mov	r3, r0
    3e56:	2b00      	cmp	r3, #0
    3e58:	bf14      	ite	ne
    3e5a:	2301      	movne	r3, #1
    3e5c:	2300      	moveq	r3, #0
    3e5e:	b2db      	uxtb	r3, r3
    3e60:	f083 0301 	eor.w	r3, r3, #1
    3e64:	b2db      	uxtb	r3, r3
    3e66:	f003 0301 	and.w	r3, r3, #1
    3e6a:	b2db      	uxtb	r3, r3
    3e6c:	224f      	movs	r2, #79	; 0x4f
    3e6e:	4910      	ldr	r1, [pc, #64]	; (3eb0 <list_insert_at_end+0x74>)
    3e70:	4618      	mov	r0, r3
    3e72:	4b10      	ldr	r3, [pc, #64]	; (3eb4 <list_insert_at_end+0x78>)
    3e74:	4798      	blx	r3

	if (!list->head) {
    3e76:	687b      	ldr	r3, [r7, #4]
    3e78:	681b      	ldr	r3, [r3, #0]
    3e7a:	2b00      	cmp	r3, #0
    3e7c:	d109      	bne.n	3e92 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    3e7e:	687b      	ldr	r3, [r7, #4]
    3e80:	683a      	ldr	r2, [r7, #0]
    3e82:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3e84:	683b      	ldr	r3, [r7, #0]
    3e86:	2200      	movs	r2, #0
    3e88:	601a      	str	r2, [r3, #0]
		return;
    3e8a:	e00c      	b.n	3ea6 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3e8c:	68fb      	ldr	r3, [r7, #12]
    3e8e:	681b      	ldr	r3, [r3, #0]
    3e90:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    3e92:	68fb      	ldr	r3, [r7, #12]
    3e94:	681b      	ldr	r3, [r3, #0]
    3e96:	2b00      	cmp	r3, #0
    3e98:	d1f8      	bne.n	3e8c <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3e9a:	68fb      	ldr	r3, [r7, #12]
    3e9c:	683a      	ldr	r2, [r7, #0]
    3e9e:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3ea0:	683b      	ldr	r3, [r7, #0]
    3ea2:	2200      	movs	r2, #0
    3ea4:	601a      	str	r2, [r3, #0]
}
    3ea6:	3710      	adds	r7, #16
    3ea8:	46bd      	mov	sp, r7
    3eaa:	bd80      	pop	{r7, pc}
    3eac:	00003d89 	.word	0x00003d89
    3eb0:	00010064 	.word	0x00010064
    3eb4:	00003d61 	.word	0x00003d61

00003eb8 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3eb8:	b480      	push	{r7}
    3eba:	b085      	sub	sp, #20
    3ebc:	af00      	add	r7, sp, #0
    3ebe:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3ec0:	687b      	ldr	r3, [r7, #4]
    3ec2:	681b      	ldr	r3, [r3, #0]
    3ec4:	2b00      	cmp	r3, #0
    3ec6:	d009      	beq.n	3edc <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3ec8:	687b      	ldr	r3, [r7, #4]
    3eca:	681b      	ldr	r3, [r3, #0]
    3ecc:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3ece:	687b      	ldr	r3, [r7, #4]
    3ed0:	681b      	ldr	r3, [r3, #0]
    3ed2:	681a      	ldr	r2, [r3, #0]
    3ed4:	687b      	ldr	r3, [r7, #4]
    3ed6:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3ed8:	68fb      	ldr	r3, [r7, #12]
    3eda:	e000      	b.n	3ede <list_remove_head+0x26>
	}

	return NULL;
    3edc:	2300      	movs	r3, #0
}
    3ede:	4618      	mov	r0, r3
    3ee0:	3714      	adds	r7, #20
    3ee2:	46bd      	mov	sp, r7
    3ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ee8:	4770      	bx	lr

00003eea <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3eea:	b480      	push	{r7}
    3eec:	b085      	sub	sp, #20
    3eee:	af00      	add	r7, sp, #0
    3ef0:	6078      	str	r0, [r7, #4]
    3ef2:	6039      	str	r1, [r7, #0]
	if (!element) {
    3ef4:	683b      	ldr	r3, [r7, #0]
    3ef6:	2b00      	cmp	r3, #0
    3ef8:	d101      	bne.n	3efe <list_delete_element+0x14>
		return false;
    3efa:	2300      	movs	r3, #0
    3efc:	e024      	b.n	3f48 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    3efe:	687b      	ldr	r3, [r7, #4]
    3f00:	681a      	ldr	r2, [r3, #0]
    3f02:	683b      	ldr	r3, [r7, #0]
    3f04:	429a      	cmp	r2, r3
    3f06:	d106      	bne.n	3f16 <list_delete_element+0x2c>
		list->head = list->head->next;
    3f08:	687b      	ldr	r3, [r7, #4]
    3f0a:	681b      	ldr	r3, [r3, #0]
    3f0c:	681a      	ldr	r2, [r3, #0]
    3f0e:	687b      	ldr	r3, [r7, #4]
    3f10:	601a      	str	r2, [r3, #0]
		return true;
    3f12:	2301      	movs	r3, #1
    3f14:	e018      	b.n	3f48 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    3f16:	687b      	ldr	r3, [r7, #4]
    3f18:	681b      	ldr	r3, [r3, #0]
    3f1a:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3f1c:	e002      	b.n	3f24 <list_delete_element+0x3a>
			it = it->next;
    3f1e:	68fb      	ldr	r3, [r7, #12]
    3f20:	681b      	ldr	r3, [r3, #0]
    3f22:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    3f24:	68fb      	ldr	r3, [r7, #12]
    3f26:	2b00      	cmp	r3, #0
    3f28:	d004      	beq.n	3f34 <list_delete_element+0x4a>
    3f2a:	68fb      	ldr	r3, [r7, #12]
    3f2c:	681a      	ldr	r2, [r3, #0]
    3f2e:	683b      	ldr	r3, [r7, #0]
    3f30:	429a      	cmp	r2, r3
    3f32:	d1f4      	bne.n	3f1e <list_delete_element+0x34>
		}
		if (it) {
    3f34:	68fb      	ldr	r3, [r7, #12]
    3f36:	2b00      	cmp	r3, #0
    3f38:	d005      	beq.n	3f46 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    3f3a:	683b      	ldr	r3, [r7, #0]
    3f3c:	681a      	ldr	r2, [r3, #0]
    3f3e:	68fb      	ldr	r3, [r7, #12]
    3f40:	601a      	str	r2, [r3, #0]
			return true;
    3f42:	2301      	movs	r3, #1
    3f44:	e000      	b.n	3f48 <list_delete_element+0x5e>
		}
	}

	return false;
    3f46:	2300      	movs	r3, #0
}
    3f48:	4618      	mov	r0, r3
    3f4a:	3714      	adds	r7, #20
    3f4c:	46bd      	mov	sp, r7
    3f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f52:	4770      	bx	lr

00003f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3f54:	b480      	push	{r7}
    3f56:	b083      	sub	sp, #12
    3f58:	af00      	add	r7, sp, #0
    3f5a:	4603      	mov	r3, r0
    3f5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3f62:	2b00      	cmp	r3, #0
    3f64:	db0b      	blt.n	3f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3f66:	4909      	ldr	r1, [pc, #36]	; (3f8c <__NVIC_EnableIRQ+0x38>)
    3f68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3f6c:	095b      	lsrs	r3, r3, #5
    3f6e:	88fa      	ldrh	r2, [r7, #6]
    3f70:	f002 021f 	and.w	r2, r2, #31
    3f74:	2001      	movs	r0, #1
    3f76:	fa00 f202 	lsl.w	r2, r0, r2
    3f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3f7e:	bf00      	nop
    3f80:	370c      	adds	r7, #12
    3f82:	46bd      	mov	sp, r7
    3f84:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f88:	4770      	bx	lr
    3f8a:	bf00      	nop
    3f8c:	e000e100 	.word	0xe000e100

00003f90 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3f90:	b480      	push	{r7}
    3f92:	b083      	sub	sp, #12
    3f94:	af00      	add	r7, sp, #0
    3f96:	4603      	mov	r3, r0
    3f98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3f9e:	2b00      	cmp	r3, #0
    3fa0:	db10      	blt.n	3fc4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3fa2:	490b      	ldr	r1, [pc, #44]	; (3fd0 <__NVIC_DisableIRQ+0x40>)
    3fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3fa8:	095b      	lsrs	r3, r3, #5
    3faa:	88fa      	ldrh	r2, [r7, #6]
    3fac:	f002 021f 	and.w	r2, r2, #31
    3fb0:	2001      	movs	r0, #1
    3fb2:	fa00 f202 	lsl.w	r2, r0, r2
    3fb6:	3320      	adds	r3, #32
    3fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3fbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3fc0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3fc4:	bf00      	nop
    3fc6:	370c      	adds	r7, #12
    3fc8:	46bd      	mov	sp, r7
    3fca:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fce:	4770      	bx	lr
    3fd0:	e000e100 	.word	0xe000e100

00003fd4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3fd4:	b480      	push	{r7}
    3fd6:	b083      	sub	sp, #12
    3fd8:	af00      	add	r7, sp, #0
    3fda:	4603      	mov	r3, r0
    3fdc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3fe2:	2b00      	cmp	r3, #0
    3fe4:	db0c      	blt.n	4000 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3fe6:	4909      	ldr	r1, [pc, #36]	; (400c <__NVIC_ClearPendingIRQ+0x38>)
    3fe8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3fec:	095b      	lsrs	r3, r3, #5
    3fee:	88fa      	ldrh	r2, [r7, #6]
    3ff0:	f002 021f 	and.w	r2, r2, #31
    3ff4:	2001      	movs	r0, #1
    3ff6:	fa00 f202 	lsl.w	r2, r0, r2
    3ffa:	3360      	adds	r3, #96	; 0x60
    3ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4000:	bf00      	nop
    4002:	370c      	adds	r7, #12
    4004:	46bd      	mov	sp, r7
    4006:	f85d 7b04 	ldr.w	r7, [sp], #4
    400a:	4770      	bx	lr
    400c:	e000e100 	.word	0xe000e100

00004010 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    4010:	b480      	push	{r7}
    4012:	b083      	sub	sp, #12
    4014:	af00      	add	r7, sp, #0
    4016:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    4018:	687b      	ldr	r3, [r7, #4]
    401a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    401c:	095b      	lsrs	r3, r3, #5
    401e:	f003 0301 	and.w	r3, r3, #1
    4022:	2b00      	cmp	r3, #0
    4024:	bf14      	ite	ne
    4026:	2301      	movne	r3, #1
    4028:	2300      	moveq	r3, #0
    402a:	b2db      	uxtb	r3, r3
}
    402c:	4618      	mov	r0, r3
    402e:	370c      	adds	r7, #12
    4030:	46bd      	mov	sp, r7
    4032:	f85d 7b04 	ldr.w	r7, [sp], #4
    4036:	4770      	bx	lr

00004038 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    4038:	b480      	push	{r7}
    403a:	b083      	sub	sp, #12
    403c:	af00      	add	r7, sp, #0
    403e:	6078      	str	r0, [r7, #4]
    4040:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    4042:	687b      	ldr	r3, [r7, #4]
    4044:	683a      	ldr	r2, [r7, #0]
    4046:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4048:	bf00      	nop
    404a:	370c      	adds	r7, #12
    404c:	46bd      	mov	sp, r7
    404e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4052:	4770      	bx	lr

00004054 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    4054:	b480      	push	{r7}
    4056:	b083      	sub	sp, #12
    4058:	af00      	add	r7, sp, #0
    405a:	6078      	str	r0, [r7, #4]
    405c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    405e:	687b      	ldr	r3, [r7, #4]
    4060:	683a      	ldr	r2, [r7, #0]
    4062:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4064:	bf00      	nop
    4066:	370c      	adds	r7, #12
    4068:	46bd      	mov	sp, r7
    406a:	f85d 7b04 	ldr.w	r7, [sp], #4
    406e:	4770      	bx	lr

00004070 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    4070:	b480      	push	{r7}
    4072:	b083      	sub	sp, #12
    4074:	af00      	add	r7, sp, #0
    4076:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    4078:	687b      	ldr	r3, [r7, #4]
    407a:	699b      	ldr	r3, [r3, #24]
    407c:	f043 0201 	orr.w	r2, r3, #1
    4080:	687b      	ldr	r3, [r7, #4]
    4082:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4084:	bf00      	nop
    4086:	370c      	adds	r7, #12
    4088:	46bd      	mov	sp, r7
    408a:	f85d 7b04 	ldr.w	r7, [sp], #4
    408e:	4770      	bx	lr

00004090 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    4090:	b480      	push	{r7}
    4092:	b085      	sub	sp, #20
    4094:	af00      	add	r7, sp, #0
    4096:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    4098:	687b      	ldr	r3, [r7, #4]
    409a:	699b      	ldr	r3, [r3, #24]
    409c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    409e:	68fb      	ldr	r3, [r7, #12]
    40a0:	f003 0301 	and.w	r3, r3, #1
    40a4:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    40a6:	68fb      	ldr	r3, [r7, #12]
    40a8:	2b00      	cmp	r3, #0
    40aa:	bf14      	ite	ne
    40ac:	2301      	movne	r3, #1
    40ae:	2300      	moveq	r3, #0
    40b0:	b2db      	uxtb	r3, r3
}
    40b2:	4618      	mov	r0, r3
    40b4:	3714      	adds	r7, #20
    40b6:	46bd      	mov	sp, r7
    40b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    40bc:	4770      	bx	lr

000040be <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    40be:	b480      	push	{r7}
    40c0:	b083      	sub	sp, #12
    40c2:	af00      	add	r7, sp, #0
    40c4:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    40c6:	687b      	ldr	r3, [r7, #4]
    40c8:	699b      	ldr	r3, [r3, #24]
    40ca:	f023 0201 	bic.w	r2, r3, #1
    40ce:	687b      	ldr	r3, [r7, #4]
    40d0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    40d2:	bf00      	nop
    40d4:	370c      	adds	r7, #12
    40d6:	46bd      	mov	sp, r7
    40d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    40dc:	4770      	bx	lr

000040de <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    40de:	b480      	push	{r7}
    40e0:	b083      	sub	sp, #12
    40e2:	af00      	add	r7, sp, #0
    40e4:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    40e6:	687b      	ldr	r3, [r7, #4]
    40e8:	699b      	ldr	r3, [r3, #24]
    40ea:	f043 0202 	orr.w	r2, r3, #2
    40ee:	687b      	ldr	r3, [r7, #4]
    40f0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    40f2:	bf00      	nop
    40f4:	370c      	adds	r7, #12
    40f6:	46bd      	mov	sp, r7
    40f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    40fc:	4770      	bx	lr

000040fe <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    40fe:	b480      	push	{r7}
    4100:	b083      	sub	sp, #12
    4102:	af00      	add	r7, sp, #0
    4104:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    4106:	687b      	ldr	r3, [r7, #4]
    4108:	699b      	ldr	r3, [r3, #24]
    410a:	f023 0202 	bic.w	r2, r3, #2
    410e:	687b      	ldr	r3, [r7, #4]
    4110:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4112:	bf00      	nop
    4114:	370c      	adds	r7, #12
    4116:	46bd      	mov	sp, r7
    4118:	f85d 7b04 	ldr.w	r7, [sp], #4
    411c:	4770      	bx	lr

0000411e <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    411e:	b480      	push	{r7}
    4120:	b083      	sub	sp, #12
    4122:	af00      	add	r7, sp, #0
    4124:	6078      	str	r0, [r7, #4]
    4126:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    4128:	687b      	ldr	r3, [r7, #4]
    412a:	699a      	ldr	r2, [r3, #24]
    412c:	683b      	ldr	r3, [r7, #0]
    412e:	431a      	orrs	r2, r3
    4130:	687b      	ldr	r3, [r7, #4]
    4132:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4134:	bf00      	nop
    4136:	370c      	adds	r7, #12
    4138:	46bd      	mov	sp, r7
    413a:	f85d 7b04 	ldr.w	r7, [sp], #4
    413e:	4770      	bx	lr

00004140 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    4140:	b480      	push	{r7}
    4142:	b083      	sub	sp, #12
    4144:	af00      	add	r7, sp, #0
    4146:	6078      	str	r0, [r7, #4]
    4148:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    414a:	687b      	ldr	r3, [r7, #4]
    414c:	683a      	ldr	r2, [r7, #0]
    414e:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4150:	bf00      	nop
    4152:	370c      	adds	r7, #12
    4154:	46bd      	mov	sp, r7
    4156:	f85d 7b04 	ldr.w	r7, [sp], #4
    415a:	4770      	bx	lr

0000415c <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    415c:	b480      	push	{r7}
    415e:	b083      	sub	sp, #12
    4160:	af00      	add	r7, sp, #0
    4162:	6078      	str	r0, [r7, #4]
    4164:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    4166:	687b      	ldr	r3, [r7, #4]
    4168:	683a      	ldr	r2, [r7, #0]
    416a:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    416c:	bf00      	nop
    416e:	370c      	adds	r7, #12
    4170:	46bd      	mov	sp, r7
    4172:	f85d 7b04 	ldr.w	r7, [sp], #4
    4176:	4770      	bx	lr

00004178 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    4178:	b480      	push	{r7}
    417a:	b083      	sub	sp, #12
    417c:	af00      	add	r7, sp, #0
    417e:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    4184:	4618      	mov	r0, r3
    4186:	370c      	adds	r7, #12
    4188:	46bd      	mov	sp, r7
    418a:	f85d 7b04 	ldr.w	r7, [sp], #4
    418e:	4770      	bx	lr

00004190 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    4190:	b480      	push	{r7}
    4192:	b083      	sub	sp, #12
    4194:	af00      	add	r7, sp, #0
    4196:	6078      	str	r0, [r7, #4]
    4198:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    419a:	687b      	ldr	r3, [r7, #4]
    419c:	683a      	ldr	r2, [r7, #0]
    419e:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    41a0:	bf00      	nop
    41a2:	370c      	adds	r7, #12
    41a4:	46bd      	mov	sp, r7
    41a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    41aa:	4770      	bx	lr

000041ac <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    41ac:	b480      	push	{r7}
    41ae:	b083      	sub	sp, #12
    41b0:	af00      	add	r7, sp, #0
    41b2:	6078      	str	r0, [r7, #4]
    41b4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    41b6:	687b      	ldr	r3, [r7, #4]
    41b8:	683a      	ldr	r2, [r7, #0]
    41ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    41be:	bf00      	nop
    41c0:	370c      	adds	r7, #12
    41c2:	46bd      	mov	sp, r7
    41c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    41c8:	4770      	bx	lr

000041ca <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    41ca:	b480      	push	{r7}
    41cc:	b083      	sub	sp, #12
    41ce:	af00      	add	r7, sp, #0
    41d0:	6078      	str	r0, [r7, #4]
    41d2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    41d4:	687b      	ldr	r3, [r7, #4]
    41d6:	683a      	ldr	r2, [r7, #0]
    41d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    41dc:	bf00      	nop
    41de:	370c      	adds	r7, #12
    41e0:	46bd      	mov	sp, r7
    41e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    41e6:	4770      	bx	lr

000041e8 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    41e8:	b480      	push	{r7}
    41ea:	b083      	sub	sp, #12
    41ec:	af00      	add	r7, sp, #0
    41ee:	6078      	str	r0, [r7, #4]
    41f0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    41f2:	687b      	ldr	r3, [r7, #4]
    41f4:	683a      	ldr	r2, [r7, #0]
    41f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    41fa:	bf00      	nop
    41fc:	370c      	adds	r7, #12
    41fe:	46bd      	mov	sp, r7
    4200:	f85d 7b04 	ldr.w	r7, [sp], #4
    4204:	4770      	bx	lr

00004206 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    4206:	b480      	push	{r7}
    4208:	b083      	sub	sp, #12
    420a:	af00      	add	r7, sp, #0
    420c:	6078      	str	r0, [r7, #4]
    420e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    4210:	687b      	ldr	r3, [r7, #4]
    4212:	683a      	ldr	r2, [r7, #0]
    4214:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    4218:	bf00      	nop
    421a:	370c      	adds	r7, #12
    421c:	46bd      	mov	sp, r7
    421e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4222:	4770      	bx	lr

00004224 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    4224:	b480      	push	{r7}
    4226:	b083      	sub	sp, #12
    4228:	af00      	add	r7, sp, #0
    422a:	6078      	str	r0, [r7, #4]
    422c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    422e:	687b      	ldr	r3, [r7, #4]
    4230:	683a      	ldr	r2, [r7, #0]
    4232:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4236:	bf00      	nop
    4238:	370c      	adds	r7, #12
    423a:	46bd      	mov	sp, r7
    423c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4240:	4770      	bx	lr

00004242 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    4242:	b480      	push	{r7}
    4244:	b083      	sub	sp, #12
    4246:	af00      	add	r7, sp, #0
    4248:	6078      	str	r0, [r7, #4]
    424a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    424c:	687b      	ldr	r3, [r7, #4]
    424e:	683a      	ldr	r2, [r7, #0]
    4250:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    4254:	bf00      	nop
    4256:	370c      	adds	r7, #12
    4258:	46bd      	mov	sp, r7
    425a:	f85d 7b04 	ldr.w	r7, [sp], #4
    425e:	4770      	bx	lr

00004260 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    4260:	b480      	push	{r7}
    4262:	b083      	sub	sp, #12
    4264:	af00      	add	r7, sp, #0
    4266:	6078      	str	r0, [r7, #4]
    4268:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    426a:	687b      	ldr	r3, [r7, #4]
    426c:	683a      	ldr	r2, [r7, #0]
    426e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4272:	bf00      	nop
    4274:	370c      	adds	r7, #12
    4276:	46bd      	mov	sp, r7
    4278:	f85d 7b04 	ldr.w	r7, [sp], #4
    427c:	4770      	bx	lr

0000427e <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    427e:	b480      	push	{r7}
    4280:	b083      	sub	sp, #12
    4282:	af00      	add	r7, sp, #0
    4284:	6078      	str	r0, [r7, #4]
    4286:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    4288:	687b      	ldr	r3, [r7, #4]
    428a:	683a      	ldr	r2, [r7, #0]
    428c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    4290:	bf00      	nop
    4292:	370c      	adds	r7, #12
    4294:	46bd      	mov	sp, r7
    4296:	f85d 7b04 	ldr.w	r7, [sp], #4
    429a:	4770      	bx	lr

0000429c <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    429c:	b480      	push	{r7}
    429e:	b083      	sub	sp, #12
    42a0:	af00      	add	r7, sp, #0
    42a2:	6078      	str	r0, [r7, #4]
    42a4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    42a6:	687b      	ldr	r3, [r7, #4]
    42a8:	683a      	ldr	r2, [r7, #0]
    42aa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    42ae:	bf00      	nop
    42b0:	370c      	adds	r7, #12
    42b2:	46bd      	mov	sp, r7
    42b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    42b8:	4770      	bx	lr
	...

000042bc <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    42bc:	b580      	push	{r7, lr}
    42be:	b082      	sub	sp, #8
    42c0:	af00      	add	r7, sp, #0
    42c2:	6078      	str	r0, [r7, #4]
    42c4:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    42c6:	687b      	ldr	r3, [r7, #4]
    42c8:	683a      	ldr	r2, [r7, #0]
    42ca:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    42cc:	687b      	ldr	r3, [r7, #4]
    42ce:	681b      	ldr	r3, [r3, #0]
    42d0:	4618      	mov	r0, r3
    42d2:	4b55      	ldr	r3, [pc, #340]	; (4428 <_can_async_init+0x16c>)
    42d4:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    42d6:	bf00      	nop
    42d8:	687b      	ldr	r3, [r7, #4]
    42da:	681b      	ldr	r3, [r3, #0]
    42dc:	4618      	mov	r0, r3
    42de:	4b53      	ldr	r3, [pc, #332]	; (442c <_can_async_init+0x170>)
    42e0:	4798      	blx	r3
    42e2:	4603      	mov	r3, r0
    42e4:	f083 0301 	eor.w	r3, r3, #1
    42e8:	b2db      	uxtb	r3, r3
    42ea:	2b00      	cmp	r3, #0
    42ec:	d1f4      	bne.n	42d8 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    42ee:	687b      	ldr	r3, [r7, #4]
    42f0:	681b      	ldr	r3, [r3, #0]
    42f2:	4618      	mov	r0, r3
    42f4:	4b4e      	ldr	r3, [pc, #312]	; (4430 <_can_async_init+0x174>)
    42f6:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    42f8:	683b      	ldr	r3, [r7, #0]
    42fa:	4a4e      	ldr	r2, [pc, #312]	; (4434 <_can_async_init+0x178>)
    42fc:	4293      	cmp	r3, r2
    42fe:	d17a      	bne.n	43f6 <_can_async_init+0x13a>
		_can1_dev    = dev;
    4300:	4a4d      	ldr	r2, [pc, #308]	; (4438 <_can_async_init+0x17c>)
    4302:	687b      	ldr	r3, [r7, #4]
    4304:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    4306:	687b      	ldr	r3, [r7, #4]
    4308:	4a4c      	ldr	r2, [pc, #304]	; (443c <_can_async_init+0x180>)
    430a:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    430c:	687b      	ldr	r3, [r7, #4]
    430e:	681b      	ldr	r3, [r3, #0]
    4310:	f44f 7140 	mov.w	r1, #768	; 0x300
    4314:	4618      	mov	r0, r3
    4316:	4b4a      	ldr	r3, [pc, #296]	; (4440 <_can_async_init+0x184>)
    4318:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    431a:	687b      	ldr	r3, [r7, #4]
    431c:	681b      	ldr	r3, [r3, #0]
    431e:	2102      	movs	r1, #2
    4320:	4618      	mov	r0, r3
    4322:	4b48      	ldr	r3, [pc, #288]	; (4444 <_can_async_init+0x188>)
    4324:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    4326:	687b      	ldr	r3, [r7, #4]
    4328:	681b      	ldr	r3, [r3, #0]
    432a:	4947      	ldr	r1, [pc, #284]	; (4448 <_can_async_init+0x18c>)
    432c:	4618      	mov	r0, r3
    432e:	4b47      	ldr	r3, [pc, #284]	; (444c <_can_async_init+0x190>)
    4330:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    4332:	687b      	ldr	r3, [r7, #4]
    4334:	681b      	ldr	r3, [r3, #0]
    4336:	4946      	ldr	r1, [pc, #280]	; (4450 <_can_async_init+0x194>)
    4338:	4618      	mov	r0, r3
    433a:	4b46      	ldr	r3, [pc, #280]	; (4454 <_can_async_init+0x198>)
    433c:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    433e:	687b      	ldr	r3, [r7, #4]
    4340:	681a      	ldr	r2, [r3, #0]
    4342:	4b45      	ldr	r3, [pc, #276]	; (4458 <_can_async_init+0x19c>)
    4344:	b29b      	uxth	r3, r3
    4346:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    434a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    434e:	4619      	mov	r1, r3
    4350:	4610      	mov	r0, r2
    4352:	4b42      	ldr	r3, [pc, #264]	; (445c <_can_async_init+0x1a0>)
    4354:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    4356:	687b      	ldr	r3, [r7, #4]
    4358:	681b      	ldr	r3, [r3, #0]
    435a:	2107      	movs	r1, #7
    435c:	4618      	mov	r0, r3
    435e:	4b40      	ldr	r3, [pc, #256]	; (4460 <_can_async_init+0x1a4>)
    4360:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    4362:	687b      	ldr	r3, [r7, #4]
    4364:	681b      	ldr	r3, [r3, #0]
    4366:	2107      	movs	r1, #7
    4368:	4618      	mov	r0, r3
    436a:	4b3e      	ldr	r3, [pc, #248]	; (4464 <_can_async_init+0x1a8>)
    436c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    436e:	687b      	ldr	r3, [r7, #4]
    4370:	681a      	ldr	r2, [r3, #0]
    4372:	4b3d      	ldr	r3, [pc, #244]	; (4468 <_can_async_init+0x1ac>)
    4374:	b29b      	uxth	r3, r3
    4376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    437a:	4619      	mov	r1, r3
    437c:	4610      	mov	r0, r2
    437e:	4b3b      	ldr	r3, [pc, #236]	; (446c <_can_async_init+0x1b0>)
    4380:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    4382:	687b      	ldr	r3, [r7, #4]
    4384:	681a      	ldr	r2, [r3, #0]
    4386:	4b3a      	ldr	r3, [pc, #232]	; (4470 <_can_async_init+0x1b4>)
    4388:	b29b      	uxth	r3, r3
    438a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    438e:	4619      	mov	r1, r3
    4390:	4610      	mov	r0, r2
    4392:	4b38      	ldr	r3, [pc, #224]	; (4474 <_can_async_init+0x1b8>)
    4394:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    4396:	687b      	ldr	r3, [r7, #4]
    4398:	681b      	ldr	r3, [r3, #0]
    439a:	2108      	movs	r1, #8
    439c:	4618      	mov	r0, r3
    439e:	4b36      	ldr	r3, [pc, #216]	; (4478 <_can_async_init+0x1bc>)
    43a0:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    43a2:	687b      	ldr	r3, [r7, #4]
    43a4:	681a      	ldr	r2, [r3, #0]
    43a6:	4b35      	ldr	r3, [pc, #212]	; (447c <_can_async_init+0x1c0>)
    43a8:	b29b      	uxth	r3, r3
    43aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    43ae:	4619      	mov	r1, r3
    43b0:	4610      	mov	r0, r2
    43b2:	4b33      	ldr	r3, [pc, #204]	; (4480 <_can_async_init+0x1c4>)
    43b4:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    43b6:	687b      	ldr	r3, [r7, #4]
    43b8:	681a      	ldr	r2, [r3, #0]
    43ba:	4b32      	ldr	r3, [pc, #200]	; (4484 <_can_async_init+0x1c8>)
    43bc:	b29b      	uxth	r3, r3
    43be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    43c2:	4619      	mov	r1, r3
    43c4:	4610      	mov	r0, r2
    43c6:	4b30      	ldr	r3, [pc, #192]	; (4488 <_can_async_init+0x1cc>)
    43c8:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    43ca:	687b      	ldr	r3, [r7, #4]
    43cc:	681b      	ldr	r3, [r3, #0]
    43ce:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    43d2:	4618      	mov	r0, r3
    43d4:	4b2d      	ldr	r3, [pc, #180]	; (448c <_can_async_init+0x1d0>)
    43d6:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    43d8:	204f      	movs	r0, #79	; 0x4f
    43da:	4b2d      	ldr	r3, [pc, #180]	; (4490 <_can_async_init+0x1d4>)
    43dc:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    43de:	204f      	movs	r0, #79	; 0x4f
    43e0:	4b2c      	ldr	r3, [pc, #176]	; (4494 <_can_async_init+0x1d8>)
    43e2:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    43e4:	204f      	movs	r0, #79	; 0x4f
    43e6:	4b2c      	ldr	r3, [pc, #176]	; (4498 <_can_async_init+0x1dc>)
    43e8:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    43ea:	687b      	ldr	r3, [r7, #4]
    43ec:	681b      	ldr	r3, [r3, #0]
    43ee:	2101      	movs	r1, #1
    43f0:	4618      	mov	r0, r3
    43f2:	4b2a      	ldr	r3, [pc, #168]	; (449c <_can_async_init+0x1e0>)
    43f4:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    43f6:	687b      	ldr	r3, [r7, #4]
    43f8:	681b      	ldr	r3, [r3, #0]
    43fa:	4618      	mov	r0, r3
    43fc:	4b28      	ldr	r3, [pc, #160]	; (44a0 <_can_async_init+0x1e4>)
    43fe:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    4400:	687b      	ldr	r3, [r7, #4]
    4402:	681b      	ldr	r3, [r3, #0]
    4404:	4618      	mov	r0, r3
    4406:	4b27      	ldr	r3, [pc, #156]	; (44a4 <_can_async_init+0x1e8>)
    4408:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    440a:	bf00      	nop
    440c:	687b      	ldr	r3, [r7, #4]
    440e:	681b      	ldr	r3, [r3, #0]
    4410:	4618      	mov	r0, r3
    4412:	4b06      	ldr	r3, [pc, #24]	; (442c <_can_async_init+0x170>)
    4414:	4798      	blx	r3
    4416:	4603      	mov	r3, r0
    4418:	2b00      	cmp	r3, #0
    441a:	d1f7      	bne.n	440c <_can_async_init+0x150>
	};

	return ERR_NONE;
    441c:	2300      	movs	r3, #0
}
    441e:	4618      	mov	r0, r3
    4420:	3708      	adds	r7, #8
    4422:	46bd      	mov	sp, r7
    4424:	bd80      	pop	{r7, pc}
    4426:	bf00      	nop
    4428:	00004071 	.word	0x00004071
    442c:	00004091 	.word	0x00004091
    4430:	000040df 	.word	0x000040df
    4434:	42000400 	.word	0x42000400
    4438:	20000bd0 	.word	0x20000bd0
    443c:	20000004 	.word	0x20000004
    4440:	0000411f 	.word	0x0000411f
    4444:	00004039 	.word	0x00004039
    4448:	00010c01 	.word	0x00010c01
    444c:	00004141 	.word	0x00004141
    4450:	00010c10 	.word	0x00010c10
    4454:	00004055 	.word	0x00004055
    4458:	20001740 	.word	0x20001740
    445c:	00004225 	.word	0x00004225
    4460:	00004243 	.word	0x00004243
    4464:	0000427f 	.word	0x0000427f
    4468:	200016f8 	.word	0x200016f8
    446c:	00004261 	.word	0x00004261
    4470:	20000b30 	.word	0x20000b30
    4474:	0000429d 	.word	0x0000429d
    4478:	000041ad 	.word	0x000041ad
    447c:	20000b40 	.word	0x20000b40
    4480:	000041cb 	.word	0x000041cb
    4484:	20000bc0 	.word	0x20000bc0
    4488:	000041e9 	.word	0x000041e9
    448c:	00004207 	.word	0x00004207
    4490:	00003f91 	.word	0x00003f91
    4494:	00003fd5 	.word	0x00003fd5
    4498:	00003f55 	.word	0x00003f55
    449c:	00004191 	.word	0x00004191
    44a0:	000040ff 	.word	0x000040ff
    44a4:	000040bf 	.word	0x000040bf

000044a8 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    44a8:	b590      	push	{r4, r7, lr}
    44aa:	b083      	sub	sp, #12
    44ac:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    44ae:	4b2c      	ldr	r3, [pc, #176]	; (4560 <CAN1_Handler+0xb8>)
    44b0:	681b      	ldr	r3, [r3, #0]
    44b2:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    44b4:	687b      	ldr	r3, [r7, #4]
    44b6:	681b      	ldr	r3, [r3, #0]
    44b8:	4618      	mov	r0, r3
    44ba:	4b2a      	ldr	r3, [pc, #168]	; (4564 <CAN1_Handler+0xbc>)
    44bc:	4798      	blx	r3
    44be:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    44c0:	683b      	ldr	r3, [r7, #0]
    44c2:	f003 0301 	and.w	r3, r3, #1
    44c6:	2b00      	cmp	r3, #0
    44c8:	d003      	beq.n	44d2 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    44ca:	687b      	ldr	r3, [r7, #4]
    44cc:	689b      	ldr	r3, [r3, #8]
    44ce:	6878      	ldr	r0, [r7, #4]
    44d0:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    44d2:	683b      	ldr	r3, [r7, #0]
    44d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
    44d8:	2b00      	cmp	r3, #0
    44da:	d003      	beq.n	44e4 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    44dc:	687b      	ldr	r3, [r7, #4]
    44de:	685b      	ldr	r3, [r3, #4]
    44e0:	6878      	ldr	r0, [r7, #4]
    44e2:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    44e4:	683b      	ldr	r3, [r7, #0]
    44e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    44ea:	2b00      	cmp	r3, #0
    44ec:	d004      	beq.n	44f8 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    44ee:	687b      	ldr	r3, [r7, #4]
    44f0:	68db      	ldr	r3, [r3, #12]
    44f2:	2103      	movs	r1, #3
    44f4:	6878      	ldr	r0, [r7, #4]
    44f6:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    44f8:	683b      	ldr	r3, [r7, #0]
    44fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    44fe:	2b00      	cmp	r3, #0
    4500:	d004      	beq.n	450c <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    4502:	687b      	ldr	r3, [r7, #4]
    4504:	68db      	ldr	r3, [r3, #12]
    4506:	2100      	movs	r1, #0
    4508:	6878      	ldr	r0, [r7, #4]
    450a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    450c:	683b      	ldr	r3, [r7, #0]
    450e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    4512:	2b00      	cmp	r3, #0
    4514:	d00f      	beq.n	4536 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    4516:	687b      	ldr	r3, [r7, #4]
    4518:	68dc      	ldr	r4, [r3, #12]
    451a:	687b      	ldr	r3, [r7, #4]
    451c:	681b      	ldr	r3, [r3, #0]
    451e:	4618      	mov	r0, r3
    4520:	4b11      	ldr	r3, [pc, #68]	; (4568 <CAN1_Handler+0xc0>)
    4522:	4798      	blx	r3
    4524:	4603      	mov	r3, r0
    4526:	2b00      	cmp	r3, #0
    4528:	d001      	beq.n	452e <CAN1_Handler+0x86>
    452a:	2302      	movs	r3, #2
    452c:	e000      	b.n	4530 <CAN1_Handler+0x88>
    452e:	2301      	movs	r3, #1
    4530:	4619      	mov	r1, r3
    4532:	6878      	ldr	r0, [r7, #4]
    4534:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    4536:	683b      	ldr	r3, [r7, #0]
    4538:	f003 0308 	and.w	r3, r3, #8
    453c:	2b00      	cmp	r3, #0
    453e:	d004      	beq.n	454a <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    4540:	687b      	ldr	r3, [r7, #4]
    4542:	68db      	ldr	r3, [r3, #12]
    4544:	2104      	movs	r1, #4
    4546:	6878      	ldr	r0, [r7, #4]
    4548:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    454a:	687b      	ldr	r3, [r7, #4]
    454c:	681b      	ldr	r3, [r3, #0]
    454e:	6839      	ldr	r1, [r7, #0]
    4550:	4618      	mov	r0, r3
    4552:	4b06      	ldr	r3, [pc, #24]	; (456c <CAN1_Handler+0xc4>)
    4554:	4798      	blx	r3
}
    4556:	bf00      	nop
    4558:	370c      	adds	r7, #12
    455a:	46bd      	mov	sp, r7
    455c:	bd90      	pop	{r4, r7, pc}
    455e:	bf00      	nop
    4560:	20000bd0 	.word	0x20000bd0
    4564:	00004179 	.word	0x00004179
    4568:	00004011 	.word	0x00004011
    456c:	0000415d 	.word	0x0000415d

00004570 <__NVIC_SetPendingIRQ>:
{
    4570:	b480      	push	{r7}
    4572:	b083      	sub	sp, #12
    4574:	af00      	add	r7, sp, #0
    4576:	4603      	mov	r3, r0
    4578:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    457a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    457e:	2b00      	cmp	r3, #0
    4580:	db0c      	blt.n	459c <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4582:	4909      	ldr	r1, [pc, #36]	; (45a8 <__NVIC_SetPendingIRQ+0x38>)
    4584:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4588:	095b      	lsrs	r3, r3, #5
    458a:	88fa      	ldrh	r2, [r7, #6]
    458c:	f002 021f 	and.w	r2, r2, #31
    4590:	2001      	movs	r0, #1
    4592:	fa00 f202 	lsl.w	r2, r0, r2
    4596:	3340      	adds	r3, #64	; 0x40
    4598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    459c:	bf00      	nop
    459e:	370c      	adds	r7, #12
    45a0:	46bd      	mov	sp, r7
    45a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    45a6:	4770      	bx	lr
    45a8:	e000e100 	.word	0xe000e100

000045ac <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    45ac:	b580      	push	{r7, lr}
    45ae:	b082      	sub	sp, #8
    45b0:	af00      	add	r7, sp, #0
    45b2:	4603      	mov	r3, r0
    45b4:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    45b6:	79fb      	ldrb	r3, [r7, #7]
    45b8:	b21b      	sxth	r3, r3
    45ba:	4618      	mov	r0, r3
    45bc:	4b02      	ldr	r3, [pc, #8]	; (45c8 <_irq_set+0x1c>)
    45be:	4798      	blx	r3
}
    45c0:	bf00      	nop
    45c2:	3708      	adds	r7, #8
    45c4:	46bd      	mov	sp, r7
    45c6:	bd80      	pop	{r7, pc}
    45c8:	00004571 	.word	0x00004571

000045cc <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    45cc:	b480      	push	{r7}
    45ce:	b083      	sub	sp, #12
    45d0:	af00      	add	r7, sp, #0
    45d2:	4603      	mov	r3, r0
    45d4:	6039      	str	r1, [r7, #0]
    45d6:	80fb      	strh	r3, [r7, #6]
    45d8:	4613      	mov	r3, r2
    45da:	717b      	strb	r3, [r7, #5]
	switch (power) {
    45dc:	797b      	ldrb	r3, [r7, #5]
    45de:	3b04      	subs	r3, #4
    45e0:	2b05      	cmp	r3, #5
    45e2:	d86b      	bhi.n	46bc <_get_cycles_for_us_internal+0xf0>
    45e4:	a201      	add	r2, pc, #4	; (adr r2, 45ec <_get_cycles_for_us_internal+0x20>)
    45e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    45ea:	bf00      	nop
    45ec:	0000469b 	.word	0x0000469b
    45f0:	0000467b 	.word	0x0000467b
    45f4:	0000465d 	.word	0x0000465d
    45f8:	0000463f 	.word	0x0000463f
    45fc:	00004621 	.word	0x00004621
    4600:	00004605 	.word	0x00004605
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    4604:	88fb      	ldrh	r3, [r7, #6]
    4606:	683a      	ldr	r2, [r7, #0]
    4608:	4935      	ldr	r1, [pc, #212]	; (46e0 <_get_cycles_for_us_internal+0x114>)
    460a:	fba1 1202 	umull	r1, r2, r1, r2
    460e:	0c92      	lsrs	r2, r2, #18
    4610:	fb02 f303 	mul.w	r3, r2, r3
    4614:	3302      	adds	r3, #2
    4616:	4a33      	ldr	r2, [pc, #204]	; (46e4 <_get_cycles_for_us_internal+0x118>)
    4618:	fba2 2303 	umull	r2, r3, r2, r3
    461c:	085b      	lsrs	r3, r3, #1
    461e:	e059      	b.n	46d4 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    4620:	88fb      	ldrh	r3, [r7, #6]
    4622:	683a      	ldr	r2, [r7, #0]
    4624:	0952      	lsrs	r2, r2, #5
    4626:	4930      	ldr	r1, [pc, #192]	; (46e8 <_get_cycles_for_us_internal+0x11c>)
    4628:	fba1 1202 	umull	r1, r2, r1, r2
    462c:	09d2      	lsrs	r2, r2, #7
    462e:	fb02 f303 	mul.w	r3, r2, r3
    4632:	331d      	adds	r3, #29
    4634:	4a2d      	ldr	r2, [pc, #180]	; (46ec <_get_cycles_for_us_internal+0x120>)
    4636:	fba2 2303 	umull	r2, r3, r2, r3
    463a:	091b      	lsrs	r3, r3, #4
    463c:	e04a      	b.n	46d4 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    463e:	88fb      	ldrh	r3, [r7, #6]
    4640:	683a      	ldr	r2, [r7, #0]
    4642:	492b      	ldr	r1, [pc, #172]	; (46f0 <_get_cycles_for_us_internal+0x124>)
    4644:	fba1 1202 	umull	r1, r2, r1, r2
    4648:	0b52      	lsrs	r2, r2, #13
    464a:	fb02 f303 	mul.w	r3, r2, r3
    464e:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4652:	4a28      	ldr	r2, [pc, #160]	; (46f4 <_get_cycles_for_us_internal+0x128>)
    4654:	fba2 2303 	umull	r2, r3, r2, r3
    4658:	095b      	lsrs	r3, r3, #5
    465a:	e03b      	b.n	46d4 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    465c:	88fb      	ldrh	r3, [r7, #6]
    465e:	683a      	ldr	r2, [r7, #0]
    4660:	4925      	ldr	r1, [pc, #148]	; (46f8 <_get_cycles_for_us_internal+0x12c>)
    4662:	fba1 1202 	umull	r1, r2, r1, r2
    4666:	0992      	lsrs	r2, r2, #6
    4668:	fb02 f303 	mul.w	r3, r2, r3
    466c:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4670:	4a22      	ldr	r2, [pc, #136]	; (46fc <_get_cycles_for_us_internal+0x130>)
    4672:	fba2 2303 	umull	r2, r3, r2, r3
    4676:	099b      	lsrs	r3, r3, #6
    4678:	e02c      	b.n	46d4 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    467a:	88fb      	ldrh	r3, [r7, #6]
    467c:	683a      	ldr	r2, [r7, #0]
    467e:	4920      	ldr	r1, [pc, #128]	; (4700 <_get_cycles_for_us_internal+0x134>)
    4680:	fba1 1202 	umull	r1, r2, r1, r2
    4684:	0952      	lsrs	r2, r2, #5
    4686:	fb02 f303 	mul.w	r3, r2, r3
    468a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    468e:	332f      	adds	r3, #47	; 0x2f
    4690:	4a1c      	ldr	r2, [pc, #112]	; (4704 <_get_cycles_for_us_internal+0x138>)
    4692:	fba2 2303 	umull	r2, r3, r2, r3
    4696:	0b5b      	lsrs	r3, r3, #13
    4698:	e01c      	b.n	46d4 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    469a:	88fb      	ldrh	r3, [r7, #6]
    469c:	683a      	ldr	r2, [r7, #0]
    469e:	491a      	ldr	r1, [pc, #104]	; (4708 <_get_cycles_for_us_internal+0x13c>)
    46a0:	fba1 1202 	umull	r1, r2, r1, r2
    46a4:	08d2      	lsrs	r2, r2, #3
    46a6:	fb02 f303 	mul.w	r3, r2, r3
    46aa:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    46ae:	f203 33df 	addw	r3, r3, #991	; 0x3df
    46b2:	4a16      	ldr	r2, [pc, #88]	; (470c <_get_cycles_for_us_internal+0x140>)
    46b4:	fba2 2303 	umull	r2, r3, r2, r3
    46b8:	0c5b      	lsrs	r3, r3, #17
    46ba:	e00b      	b.n	46d4 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    46bc:	88fb      	ldrh	r3, [r7, #6]
    46be:	683a      	ldr	r2, [r7, #0]
    46c0:	fb02 f303 	mul.w	r3, r2, r3
    46c4:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    46c8:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    46cc:	4a10      	ldr	r2, [pc, #64]	; (4710 <_get_cycles_for_us_internal+0x144>)
    46ce:	fba2 2303 	umull	r2, r3, r2, r3
    46d2:	0c9b      	lsrs	r3, r3, #18
	}
}
    46d4:	4618      	mov	r0, r3
    46d6:	370c      	adds	r7, #12
    46d8:	46bd      	mov	sp, r7
    46da:	f85d 7b04 	ldr.w	r7, [sp], #4
    46de:	4770      	bx	lr
    46e0:	431bde83 	.word	0x431bde83
    46e4:	aaaaaaab 	.word	0xaaaaaaab
    46e8:	0a7c5ac5 	.word	0x0a7c5ac5
    46ec:	88888889 	.word	0x88888889
    46f0:	d1b71759 	.word	0xd1b71759
    46f4:	1b4e81b5 	.word	0x1b4e81b5
    46f8:	10624dd3 	.word	0x10624dd3
    46fc:	057619f1 	.word	0x057619f1
    4700:	51eb851f 	.word	0x51eb851f
    4704:	45e7b273 	.word	0x45e7b273
    4708:	cccccccd 	.word	0xcccccccd
    470c:	6fd91d85 	.word	0x6fd91d85
    4710:	165e9f81 	.word	0x165e9f81

00004714 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    4714:	b580      	push	{r7, lr}
    4716:	b082      	sub	sp, #8
    4718:	af00      	add	r7, sp, #0
    471a:	4603      	mov	r3, r0
    471c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    471e:	88fb      	ldrh	r3, [r7, #6]
    4720:	2209      	movs	r2, #9
    4722:	4904      	ldr	r1, [pc, #16]	; (4734 <_get_cycles_for_us+0x20>)
    4724:	4618      	mov	r0, r3
    4726:	4b04      	ldr	r3, [pc, #16]	; (4738 <_get_cycles_for_us+0x24>)
    4728:	4798      	blx	r3
    472a:	4603      	mov	r3, r0
}
    472c:	4618      	mov	r0, r3
    472e:	3708      	adds	r7, #8
    4730:	46bd      	mov	sp, r7
    4732:	bd80      	pop	{r7, pc}
    4734:	07270e00 	.word	0x07270e00
    4738:	000045cd 	.word	0x000045cd

0000473c <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    473c:	b480      	push	{r7}
    473e:	b083      	sub	sp, #12
    4740:	af00      	add	r7, sp, #0
    4742:	4603      	mov	r3, r0
    4744:	6039      	str	r1, [r7, #0]
    4746:	80fb      	strh	r3, [r7, #6]
    4748:	4613      	mov	r3, r2
    474a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    474c:	797b      	ldrb	r3, [r7, #5]
    474e:	3b04      	subs	r3, #4
    4750:	2b05      	cmp	r3, #5
    4752:	d870      	bhi.n	4836 <_get_cycles_for_ms_internal+0xfa>
    4754:	a201      	add	r2, pc, #4	; (adr r2, 475c <_get_cycles_for_ms_internal+0x20>)
    4756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    475a:	bf00      	nop
    475c:	00004819 	.word	0x00004819
    4760:	000047fd 	.word	0x000047fd
    4764:	000047e1 	.word	0x000047e1
    4768:	000047bd 	.word	0x000047bd
    476c:	00004799 	.word	0x00004799
    4770:	00004775 	.word	0x00004775
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    4774:	88fb      	ldrh	r3, [r7, #6]
    4776:	683a      	ldr	r2, [r7, #0]
    4778:	4937      	ldr	r1, [pc, #220]	; (4858 <_get_cycles_for_ms_internal+0x11c>)
    477a:	fba1 1202 	umull	r1, r2, r1, r2
    477e:	0c92      	lsrs	r2, r2, #18
    4780:	fb02 f303 	mul.w	r3, r2, r3
    4784:	3302      	adds	r3, #2
    4786:	4a35      	ldr	r2, [pc, #212]	; (485c <_get_cycles_for_ms_internal+0x120>)
    4788:	fba2 2303 	umull	r2, r3, r2, r3
    478c:	085b      	lsrs	r3, r3, #1
    478e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4792:	fb02 f303 	mul.w	r3, r2, r3
    4796:	e058      	b.n	484a <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    4798:	88fb      	ldrh	r3, [r7, #6]
    479a:	683a      	ldr	r2, [r7, #0]
    479c:	0952      	lsrs	r2, r2, #5
    479e:	4930      	ldr	r1, [pc, #192]	; (4860 <_get_cycles_for_ms_internal+0x124>)
    47a0:	fba1 1202 	umull	r1, r2, r1, r2
    47a4:	09d2      	lsrs	r2, r2, #7
    47a6:	fb02 f303 	mul.w	r3, r2, r3
    47aa:	3302      	adds	r3, #2
    47ac:	4a2b      	ldr	r2, [pc, #172]	; (485c <_get_cycles_for_ms_internal+0x120>)
    47ae:	fba2 2303 	umull	r2, r3, r2, r3
    47b2:	085b      	lsrs	r3, r3, #1
    47b4:	2264      	movs	r2, #100	; 0x64
    47b6:	fb02 f303 	mul.w	r3, r2, r3
    47ba:	e046      	b.n	484a <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    47bc:	88fb      	ldrh	r3, [r7, #6]
    47be:	683a      	ldr	r2, [r7, #0]
    47c0:	4928      	ldr	r1, [pc, #160]	; (4864 <_get_cycles_for_ms_internal+0x128>)
    47c2:	fba1 1202 	umull	r1, r2, r1, r2
    47c6:	0b52      	lsrs	r2, r2, #13
    47c8:	fb02 f303 	mul.w	r3, r2, r3
    47cc:	3302      	adds	r3, #2
    47ce:	4a23      	ldr	r2, [pc, #140]	; (485c <_get_cycles_for_ms_internal+0x120>)
    47d0:	fba2 2303 	umull	r2, r3, r2, r3
    47d4:	085a      	lsrs	r2, r3, #1
    47d6:	4613      	mov	r3, r2
    47d8:	009b      	lsls	r3, r3, #2
    47da:	4413      	add	r3, r2
    47dc:	005b      	lsls	r3, r3, #1
    47de:	e034      	b.n	484a <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    47e0:	88fb      	ldrh	r3, [r7, #6]
    47e2:	683a      	ldr	r2, [r7, #0]
    47e4:	4920      	ldr	r1, [pc, #128]	; (4868 <_get_cycles_for_ms_internal+0x12c>)
    47e6:	fba1 1202 	umull	r1, r2, r1, r2
    47ea:	0992      	lsrs	r2, r2, #6
    47ec:	fb02 f303 	mul.w	r3, r2, r3
    47f0:	3302      	adds	r3, #2
    47f2:	4a1a      	ldr	r2, [pc, #104]	; (485c <_get_cycles_for_ms_internal+0x120>)
    47f4:	fba2 2303 	umull	r2, r3, r2, r3
    47f8:	085b      	lsrs	r3, r3, #1
    47fa:	e026      	b.n	484a <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    47fc:	88fb      	ldrh	r3, [r7, #6]
    47fe:	683a      	ldr	r2, [r7, #0]
    4800:	491a      	ldr	r1, [pc, #104]	; (486c <_get_cycles_for_ms_internal+0x130>)
    4802:	fba1 1202 	umull	r1, r2, r1, r2
    4806:	0952      	lsrs	r2, r2, #5
    4808:	fb02 f303 	mul.w	r3, r2, r3
    480c:	331d      	adds	r3, #29
    480e:	4a18      	ldr	r2, [pc, #96]	; (4870 <_get_cycles_for_ms_internal+0x134>)
    4810:	fba2 2303 	umull	r2, r3, r2, r3
    4814:	091b      	lsrs	r3, r3, #4
    4816:	e018      	b.n	484a <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    4818:	88fb      	ldrh	r3, [r7, #6]
    481a:	683a      	ldr	r2, [r7, #0]
    481c:	4915      	ldr	r1, [pc, #84]	; (4874 <_get_cycles_for_ms_internal+0x138>)
    481e:	fba1 1202 	umull	r1, r2, r1, r2
    4822:	08d2      	lsrs	r2, r2, #3
    4824:	fb02 f303 	mul.w	r3, r2, r3
    4828:	f203 132b 	addw	r3, r3, #299	; 0x12b
    482c:	4a12      	ldr	r2, [pc, #72]	; (4878 <_get_cycles_for_ms_internal+0x13c>)
    482e:	fba2 2303 	umull	r2, r3, r2, r3
    4832:	095b      	lsrs	r3, r3, #5
    4834:	e009      	b.n	484a <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    4836:	88fb      	ldrh	r3, [r7, #6]
    4838:	683a      	ldr	r2, [r7, #0]
    483a:	fb02 f303 	mul.w	r3, r2, r3
    483e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4842:	4a0e      	ldr	r2, [pc, #56]	; (487c <_get_cycles_for_ms_internal+0x140>)
    4844:	fba2 2303 	umull	r2, r3, r2, r3
    4848:	099b      	lsrs	r3, r3, #6
	}
}
    484a:	4618      	mov	r0, r3
    484c:	370c      	adds	r7, #12
    484e:	46bd      	mov	sp, r7
    4850:	f85d 7b04 	ldr.w	r7, [sp], #4
    4854:	4770      	bx	lr
    4856:	bf00      	nop
    4858:	431bde83 	.word	0x431bde83
    485c:	aaaaaaab 	.word	0xaaaaaaab
    4860:	0a7c5ac5 	.word	0x0a7c5ac5
    4864:	d1b71759 	.word	0xd1b71759
    4868:	10624dd3 	.word	0x10624dd3
    486c:	51eb851f 	.word	0x51eb851f
    4870:	88888889 	.word	0x88888889
    4874:	cccccccd 	.word	0xcccccccd
    4878:	1b4e81b5 	.word	0x1b4e81b5
    487c:	057619f1 	.word	0x057619f1

00004880 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4880:	b580      	push	{r7, lr}
    4882:	b082      	sub	sp, #8
    4884:	af00      	add	r7, sp, #0
    4886:	4603      	mov	r3, r0
    4888:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    488a:	88fb      	ldrh	r3, [r7, #6]
    488c:	2209      	movs	r2, #9
    488e:	4904      	ldr	r1, [pc, #16]	; (48a0 <_get_cycles_for_ms+0x20>)
    4890:	4618      	mov	r0, r3
    4892:	4b04      	ldr	r3, [pc, #16]	; (48a4 <_get_cycles_for_ms+0x24>)
    4894:	4798      	blx	r3
    4896:	4603      	mov	r3, r0
}
    4898:	4618      	mov	r0, r3
    489a:	3708      	adds	r7, #8
    489c:	46bd      	mov	sp, r7
    489e:	bd80      	pop	{r7, pc}
    48a0:	07270e00 	.word	0x07270e00
    48a4:	0000473d 	.word	0x0000473d

000048a8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    48a8:	b480      	push	{r7}
    48aa:	b083      	sub	sp, #12
    48ac:	af00      	add	r7, sp, #0
    48ae:	6078      	str	r0, [r7, #4]
    48b0:	6039      	str	r1, [r7, #0]
    48b2:	bf00      	nop
    48b4:	f3af 8000 	nop.w

000048b8 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    48b8:	3901      	subs	r1, #1
    48ba:	d8fd      	bhi.n	48b8 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    48bc:	bf00      	nop
    48be:	370c      	adds	r7, #12
    48c0:	46bd      	mov	sp, r7
    48c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    48c6:	4770      	bx	lr

000048c8 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    48c8:	b480      	push	{r7}
    48ca:	b083      	sub	sp, #12
    48cc:	af00      	add	r7, sp, #0
    48ce:	6078      	str	r0, [r7, #4]
    48d0:	460b      	mov	r3, r1
    48d2:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    48d4:	687b      	ldr	r3, [r7, #4]
    48d6:	881b      	ldrh	r3, [r3, #0]
    48d8:	b29a      	uxth	r2, r3
    48da:	887b      	ldrh	r3, [r7, #2]
    48dc:	021b      	lsls	r3, r3, #8
    48de:	b29b      	uxth	r3, r3
    48e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    48e4:	b29b      	uxth	r3, r3
    48e6:	4313      	orrs	r3, r2
    48e8:	b29a      	uxth	r2, r3
    48ea:	687b      	ldr	r3, [r7, #4]
    48ec:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    48ee:	bf00      	nop
    48f0:	370c      	adds	r7, #12
    48f2:	46bd      	mov	sp, r7
    48f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    48f8:	4770      	bx	lr

000048fa <hri_port_set_EVCTRL_reg>:
{
    48fa:	b480      	push	{r7}
    48fc:	b085      	sub	sp, #20
    48fe:	af00      	add	r7, sp, #0
    4900:	60f8      	str	r0, [r7, #12]
    4902:	460b      	mov	r3, r1
    4904:	607a      	str	r2, [r7, #4]
    4906:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4908:	7afb      	ldrb	r3, [r7, #11]
    490a:	7afa      	ldrb	r2, [r7, #11]
    490c:	68f9      	ldr	r1, [r7, #12]
    490e:	01d2      	lsls	r2, r2, #7
    4910:	440a      	add	r2, r1
    4912:	322c      	adds	r2, #44	; 0x2c
    4914:	6811      	ldr	r1, [r2, #0]
    4916:	687a      	ldr	r2, [r7, #4]
    4918:	430a      	orrs	r2, r1
    491a:	68f9      	ldr	r1, [r7, #12]
    491c:	01db      	lsls	r3, r3, #7
    491e:	440b      	add	r3, r1
    4920:	332c      	adds	r3, #44	; 0x2c
    4922:	601a      	str	r2, [r3, #0]
}
    4924:	bf00      	nop
    4926:	3714      	adds	r7, #20
    4928:	46bd      	mov	sp, r7
    492a:	f85d 7b04 	ldr.w	r7, [sp], #4
    492e:	4770      	bx	lr

00004930 <_port_event_init>:

static inline void _port_event_init()
{
    4930:	b580      	push	{r7, lr}
    4932:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    4934:	2200      	movs	r2, #0
    4936:	2100      	movs	r1, #0
    4938:	480a      	ldr	r0, [pc, #40]	; (4964 <_port_event_init+0x34>)
    493a:	4b0b      	ldr	r3, [pc, #44]	; (4968 <_port_event_init+0x38>)
    493c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    493e:	2200      	movs	r2, #0
    4940:	2101      	movs	r1, #1
    4942:	4808      	ldr	r0, [pc, #32]	; (4964 <_port_event_init+0x34>)
    4944:	4b08      	ldr	r3, [pc, #32]	; (4968 <_port_event_init+0x38>)
    4946:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4948:	f64e 72ef 	movw	r2, #61423	; 0xefef
    494c:	2102      	movs	r1, #2
    494e:	4805      	ldr	r0, [pc, #20]	; (4964 <_port_event_init+0x34>)
    4950:	4b05      	ldr	r3, [pc, #20]	; (4968 <_port_event_init+0x38>)
    4952:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    4954:	2200      	movs	r2, #0
    4956:	2103      	movs	r1, #3
    4958:	4802      	ldr	r0, [pc, #8]	; (4964 <_port_event_init+0x34>)
    495a:	4b03      	ldr	r3, [pc, #12]	; (4968 <_port_event_init+0x38>)
    495c:	4798      	blx	r3
}
    495e:	bf00      	nop
    4960:	bd80      	pop	{r7, pc}
    4962:	bf00      	nop
    4964:	41008000 	.word	0x41008000
    4968:	000048fb 	.word	0x000048fb

0000496c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    496c:	b580      	push	{r7, lr}
    496e:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4970:	2104      	movs	r1, #4
    4972:	480b      	ldr	r0, [pc, #44]	; (49a0 <_init_chip+0x34>)
    4974:	4b0b      	ldr	r3, [pc, #44]	; (49a4 <_init_chip+0x38>)
    4976:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4978:	4b0b      	ldr	r3, [pc, #44]	; (49a8 <_init_chip+0x3c>)
    497a:	4798      	blx	r3
	_oscctrl_init_sources();
    497c:	4b0b      	ldr	r3, [pc, #44]	; (49ac <_init_chip+0x40>)
    497e:	4798      	blx	r3
	_mclk_init();
    4980:	4b0b      	ldr	r3, [pc, #44]	; (49b0 <_init_chip+0x44>)
    4982:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    4984:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4988:	4b0a      	ldr	r3, [pc, #40]	; (49b4 <_init_chip+0x48>)
    498a:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    498c:	4b0a      	ldr	r3, [pc, #40]	; (49b8 <_init_chip+0x4c>)
    498e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4990:	f640 30df 	movw	r0, #3039	; 0xbdf
    4994:	4b07      	ldr	r3, [pc, #28]	; (49b4 <_init_chip+0x48>)
    4996:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4998:	4b08      	ldr	r3, [pc, #32]	; (49bc <_init_chip+0x50>)
    499a:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    499c:	bf00      	nop
    499e:	bd80      	pop	{r7, pc}
    49a0:	41004000 	.word	0x41004000
    49a4:	000048c9 	.word	0x000048c9
    49a8:	0000545d 	.word	0x0000545d
    49ac:	00005925 	.word	0x00005925
    49b0:	0000537d 	.word	0x0000537d
    49b4:	0000523d 	.word	0x0000523d
    49b8:	00005965 	.word	0x00005965
    49bc:	00004931 	.word	0x00004931

000049c0 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    49c0:	b480      	push	{r7}
    49c2:	b083      	sub	sp, #12
    49c4:	af00      	add	r7, sp, #0
    49c6:	6078      	str	r0, [r7, #4]
    49c8:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    49ca:	687b      	ldr	r3, [r7, #4]
    49cc:	683a      	ldr	r2, [r7, #0]
    49ce:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    49d0:	2300      	movs	r3, #0
}
    49d2:	4618      	mov	r0, r3
    49d4:	370c      	adds	r7, #12
    49d6:	46bd      	mov	sp, r7
    49d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    49dc:	4770      	bx	lr
	...

000049e0 <__NVIC_EnableIRQ>:
{
    49e0:	b480      	push	{r7}
    49e2:	b083      	sub	sp, #12
    49e4:	af00      	add	r7, sp, #0
    49e6:	4603      	mov	r3, r0
    49e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    49ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    49ee:	2b00      	cmp	r3, #0
    49f0:	db0b      	blt.n	4a0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    49f2:	4909      	ldr	r1, [pc, #36]	; (4a18 <__NVIC_EnableIRQ+0x38>)
    49f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    49f8:	095b      	lsrs	r3, r3, #5
    49fa:	88fa      	ldrh	r2, [r7, #6]
    49fc:	f002 021f 	and.w	r2, r2, #31
    4a00:	2001      	movs	r0, #1
    4a02:	fa00 f202 	lsl.w	r2, r0, r2
    4a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4a0a:	bf00      	nop
    4a0c:	370c      	adds	r7, #12
    4a0e:	46bd      	mov	sp, r7
    4a10:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a14:	4770      	bx	lr
    4a16:	bf00      	nop
    4a18:	e000e100 	.word	0xe000e100

00004a1c <__NVIC_DisableIRQ>:
{
    4a1c:	b480      	push	{r7}
    4a1e:	b083      	sub	sp, #12
    4a20:	af00      	add	r7, sp, #0
    4a22:	4603      	mov	r3, r0
    4a24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4a2a:	2b00      	cmp	r3, #0
    4a2c:	db10      	blt.n	4a50 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4a2e:	490b      	ldr	r1, [pc, #44]	; (4a5c <__NVIC_DisableIRQ+0x40>)
    4a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4a34:	095b      	lsrs	r3, r3, #5
    4a36:	88fa      	ldrh	r2, [r7, #6]
    4a38:	f002 021f 	and.w	r2, r2, #31
    4a3c:	2001      	movs	r0, #1
    4a3e:	fa00 f202 	lsl.w	r2, r0, r2
    4a42:	3320      	adds	r3, #32
    4a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4a48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4a4c:	f3bf 8f6f 	isb	sy
}
    4a50:	bf00      	nop
    4a52:	370c      	adds	r7, #12
    4a54:	46bd      	mov	sp, r7
    4a56:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a5a:	4770      	bx	lr
    4a5c:	e000e100 	.word	0xe000e100

00004a60 <__NVIC_ClearPendingIRQ>:
{
    4a60:	b480      	push	{r7}
    4a62:	b083      	sub	sp, #12
    4a64:	af00      	add	r7, sp, #0
    4a66:	4603      	mov	r3, r0
    4a68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4a6e:	2b00      	cmp	r3, #0
    4a70:	db0c      	blt.n	4a8c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4a72:	4909      	ldr	r1, [pc, #36]	; (4a98 <__NVIC_ClearPendingIRQ+0x38>)
    4a74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4a78:	095b      	lsrs	r3, r3, #5
    4a7a:	88fa      	ldrh	r2, [r7, #6]
    4a7c:	f002 021f 	and.w	r2, r2, #31
    4a80:	2001      	movs	r0, #1
    4a82:	fa00 f202 	lsl.w	r2, r0, r2
    4a86:	3360      	adds	r3, #96	; 0x60
    4a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4a8c:	bf00      	nop
    4a8e:	370c      	adds	r7, #12
    4a90:	46bd      	mov	sp, r7
    4a92:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a96:	4770      	bx	lr
    4a98:	e000e100 	.word	0xe000e100

00004a9c <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4a9c:	b480      	push	{r7}
    4a9e:	b083      	sub	sp, #12
    4aa0:	af00      	add	r7, sp, #0
    4aa2:	6078      	str	r0, [r7, #4]
    4aa4:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    4aa6:	bf00      	nop
    4aa8:	687b      	ldr	r3, [r7, #4]
    4aaa:	685a      	ldr	r2, [r3, #4]
    4aac:	683b      	ldr	r3, [r7, #0]
    4aae:	4013      	ands	r3, r2
    4ab0:	2b00      	cmp	r3, #0
    4ab2:	d1f9      	bne.n	4aa8 <hri_eic_wait_for_sync+0xc>
	};
}
    4ab4:	bf00      	nop
    4ab6:	370c      	adds	r7, #12
    4ab8:	46bd      	mov	sp, r7
    4aba:	f85d 7b04 	ldr.w	r7, [sp], #4
    4abe:	4770      	bx	lr

00004ac0 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4ac0:	b480      	push	{r7}
    4ac2:	b083      	sub	sp, #12
    4ac4:	af00      	add	r7, sp, #0
    4ac6:	6078      	str	r0, [r7, #4]
    4ac8:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4aca:	687b      	ldr	r3, [r7, #4]
    4acc:	685a      	ldr	r2, [r3, #4]
    4ace:	683b      	ldr	r3, [r7, #0]
    4ad0:	4013      	ands	r3, r2
    4ad2:	2b00      	cmp	r3, #0
    4ad4:	bf14      	ite	ne
    4ad6:	2301      	movne	r3, #1
    4ad8:	2300      	moveq	r3, #0
    4ada:	b2db      	uxtb	r3, r3
}
    4adc:	4618      	mov	r0, r3
    4ade:	370c      	adds	r7, #12
    4ae0:	46bd      	mov	sp, r7
    4ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ae6:	4770      	bx	lr

00004ae8 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4ae8:	b480      	push	{r7}
    4aea:	b083      	sub	sp, #12
    4aec:	af00      	add	r7, sp, #0
    4aee:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4af0:	687b      	ldr	r3, [r7, #4]
    4af2:	695b      	ldr	r3, [r3, #20]
}
    4af4:	4618      	mov	r0, r3
    4af6:	370c      	adds	r7, #12
    4af8:	46bd      	mov	sp, r7
    4afa:	f85d 7b04 	ldr.w	r7, [sp], #4
    4afe:	4770      	bx	lr

00004b00 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4b00:	b480      	push	{r7}
    4b02:	b083      	sub	sp, #12
    4b04:	af00      	add	r7, sp, #0
    4b06:	6078      	str	r0, [r7, #4]
    4b08:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    4b0a:	687b      	ldr	r3, [r7, #4]
    4b0c:	683a      	ldr	r2, [r7, #0]
    4b0e:	615a      	str	r2, [r3, #20]
}
    4b10:	bf00      	nop
    4b12:	370c      	adds	r7, #12
    4b14:	46bd      	mov	sp, r7
    4b16:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b1a:	4770      	bx	lr

00004b1c <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4b1c:	b480      	push	{r7}
    4b1e:	b083      	sub	sp, #12
    4b20:	af00      	add	r7, sp, #0
    4b22:	6078      	str	r0, [r7, #4]
    4b24:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    4b26:	687b      	ldr	r3, [r7, #4]
    4b28:	683a      	ldr	r2, [r7, #0]
    4b2a:	611a      	str	r2, [r3, #16]
}
    4b2c:	bf00      	nop
    4b2e:	370c      	adds	r7, #12
    4b30:	46bd      	mov	sp, r7
    4b32:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b36:	4770      	bx	lr

00004b38 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4b38:	b480      	push	{r7}
    4b3a:	b083      	sub	sp, #12
    4b3c:	af00      	add	r7, sp, #0
    4b3e:	6078      	str	r0, [r7, #4]
    4b40:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    4b42:	687b      	ldr	r3, [r7, #4]
    4b44:	683a      	ldr	r2, [r7, #0]
    4b46:	60da      	str	r2, [r3, #12]
}
    4b48:	bf00      	nop
    4b4a:	370c      	adds	r7, #12
    4b4c:	46bd      	mov	sp, r7
    4b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b52:	4770      	bx	lr

00004b54 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4b54:	b580      	push	{r7, lr}
    4b56:	b082      	sub	sp, #8
    4b58:	af00      	add	r7, sp, #0
    4b5a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4b5c:	687b      	ldr	r3, [r7, #4]
    4b5e:	781b      	ldrb	r3, [r3, #0]
    4b60:	b2db      	uxtb	r3, r3
    4b62:	f043 0302 	orr.w	r3, r3, #2
    4b66:	b2da      	uxtb	r2, r3
    4b68:	687b      	ldr	r3, [r7, #4]
    4b6a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4b6c:	2103      	movs	r1, #3
    4b6e:	6878      	ldr	r0, [r7, #4]
    4b70:	4b02      	ldr	r3, [pc, #8]	; (4b7c <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    4b72:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4b74:	bf00      	nop
    4b76:	3708      	adds	r7, #8
    4b78:	46bd      	mov	sp, r7
    4b7a:	bd80      	pop	{r7, pc}
    4b7c:	00004a9d 	.word	0x00004a9d

00004b80 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4b80:	b580      	push	{r7, lr}
    4b82:	b082      	sub	sp, #8
    4b84:	af00      	add	r7, sp, #0
    4b86:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4b88:	687b      	ldr	r3, [r7, #4]
    4b8a:	781b      	ldrb	r3, [r3, #0]
    4b8c:	b2db      	uxtb	r3, r3
    4b8e:	f023 0302 	bic.w	r3, r3, #2
    4b92:	b2da      	uxtb	r2, r3
    4b94:	687b      	ldr	r3, [r7, #4]
    4b96:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4b98:	2103      	movs	r1, #3
    4b9a:	6878      	ldr	r0, [r7, #4]
    4b9c:	4b02      	ldr	r3, [pc, #8]	; (4ba8 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4b9e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4ba0:	bf00      	nop
    4ba2:	3708      	adds	r7, #8
    4ba4:	46bd      	mov	sp, r7
    4ba6:	bd80      	pop	{r7, pc}
    4ba8:	00004a9d 	.word	0x00004a9d

00004bac <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4bac:	b580      	push	{r7, lr}
    4bae:	b084      	sub	sp, #16
    4bb0:	af00      	add	r7, sp, #0
    4bb2:	6078      	str	r0, [r7, #4]
    4bb4:	460b      	mov	r3, r1
    4bb6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4bb8:	687b      	ldr	r3, [r7, #4]
    4bba:	781b      	ldrb	r3, [r3, #0]
    4bbc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4bbe:	7bfb      	ldrb	r3, [r7, #15]
    4bc0:	f023 0310 	bic.w	r3, r3, #16
    4bc4:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    4bc6:	78fb      	ldrb	r3, [r7, #3]
    4bc8:	011b      	lsls	r3, r3, #4
    4bca:	b25a      	sxtb	r2, r3
    4bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4bd0:	4313      	orrs	r3, r2
    4bd2:	b25b      	sxtb	r3, r3
    4bd4:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    4bd6:	687b      	ldr	r3, [r7, #4]
    4bd8:	7bfa      	ldrb	r2, [r7, #15]
    4bda:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4bdc:	2103      	movs	r1, #3
    4bde:	6878      	ldr	r0, [r7, #4]
    4be0:	4b02      	ldr	r3, [pc, #8]	; (4bec <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4be2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4be4:	bf00      	nop
    4be6:	3710      	adds	r7, #16
    4be8:	46bd      	mov	sp, r7
    4bea:	bd80      	pop	{r7, pc}
    4bec:	00004a9d 	.word	0x00004a9d

00004bf0 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4bf0:	b580      	push	{r7, lr}
    4bf2:	b084      	sub	sp, #16
    4bf4:	af00      	add	r7, sp, #0
    4bf6:	6078      	str	r0, [r7, #4]
    4bf8:	460b      	mov	r3, r1
    4bfa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4bfc:	2103      	movs	r1, #3
    4bfe:	6878      	ldr	r0, [r7, #4]
    4c00:	4b06      	ldr	r3, [pc, #24]	; (4c1c <hri_eic_get_CTRLA_reg+0x2c>)
    4c02:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4c04:	687b      	ldr	r3, [r7, #4]
    4c06:	781b      	ldrb	r3, [r3, #0]
    4c08:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    4c0a:	7bfa      	ldrb	r2, [r7, #15]
    4c0c:	78fb      	ldrb	r3, [r7, #3]
    4c0e:	4013      	ands	r3, r2
    4c10:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4c12:	7bfb      	ldrb	r3, [r7, #15]
}
    4c14:	4618      	mov	r0, r3
    4c16:	3710      	adds	r7, #16
    4c18:	46bd      	mov	sp, r7
    4c1a:	bd80      	pop	{r7, pc}
    4c1c:	00004a9d 	.word	0x00004a9d

00004c20 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4c20:	b580      	push	{r7, lr}
    4c22:	b082      	sub	sp, #8
    4c24:	af00      	add	r7, sp, #0
    4c26:	6078      	str	r0, [r7, #4]
    4c28:	460b      	mov	r3, r1
    4c2a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4c2c:	687b      	ldr	r3, [r7, #4]
    4c2e:	78fa      	ldrb	r2, [r7, #3]
    4c30:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4c32:	2103      	movs	r1, #3
    4c34:	6878      	ldr	r0, [r7, #4]
    4c36:	4b03      	ldr	r3, [pc, #12]	; (4c44 <hri_eic_write_CTRLA_reg+0x24>)
    4c38:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4c3a:	bf00      	nop
    4c3c:	3708      	adds	r7, #8
    4c3e:	46bd      	mov	sp, r7
    4c40:	bd80      	pop	{r7, pc}
    4c42:	bf00      	nop
    4c44:	00004a9d 	.word	0x00004a9d

00004c48 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4c48:	b480      	push	{r7}
    4c4a:	b083      	sub	sp, #12
    4c4c:	af00      	add	r7, sp, #0
    4c4e:	6078      	str	r0, [r7, #4]
    4c50:	460b      	mov	r3, r1
    4c52:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4c54:	687b      	ldr	r3, [r7, #4]
    4c56:	78fa      	ldrb	r2, [r7, #3]
    4c58:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4c5a:	bf00      	nop
    4c5c:	370c      	adds	r7, #12
    4c5e:	46bd      	mov	sp, r7
    4c60:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c64:	4770      	bx	lr

00004c66 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    4c66:	b480      	push	{r7}
    4c68:	b083      	sub	sp, #12
    4c6a:	af00      	add	r7, sp, #0
    4c6c:	6078      	str	r0, [r7, #4]
    4c6e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4c70:	687b      	ldr	r3, [r7, #4]
    4c72:	683a      	ldr	r2, [r7, #0]
    4c74:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4c76:	bf00      	nop
    4c78:	370c      	adds	r7, #12
    4c7a:	46bd      	mov	sp, r7
    4c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c80:	4770      	bx	lr

00004c82 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    4c82:	b480      	push	{r7}
    4c84:	b083      	sub	sp, #12
    4c86:	af00      	add	r7, sp, #0
    4c88:	6078      	str	r0, [r7, #4]
    4c8a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4c8c:	687b      	ldr	r3, [r7, #4]
    4c8e:	683a      	ldr	r2, [r7, #0]
    4c90:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4c92:	bf00      	nop
    4c94:	370c      	adds	r7, #12
    4c96:	46bd      	mov	sp, r7
    4c98:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c9c:	4770      	bx	lr

00004c9e <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4c9e:	b480      	push	{r7}
    4ca0:	b085      	sub	sp, #20
    4ca2:	af00      	add	r7, sp, #0
    4ca4:	60f8      	str	r0, [r7, #12]
    4ca6:	460b      	mov	r3, r1
    4ca8:	607a      	str	r2, [r7, #4]
    4caa:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4cac:	7afb      	ldrb	r3, [r7, #11]
    4cae:	68fa      	ldr	r2, [r7, #12]
    4cb0:	3306      	adds	r3, #6
    4cb2:	009b      	lsls	r3, r3, #2
    4cb4:	4413      	add	r3, r2
    4cb6:	687a      	ldr	r2, [r7, #4]
    4cb8:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4cba:	bf00      	nop
    4cbc:	3714      	adds	r7, #20
    4cbe:	46bd      	mov	sp, r7
    4cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cc4:	4770      	bx	lr

00004cc6 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    4cc6:	b480      	push	{r7}
    4cc8:	b083      	sub	sp, #12
    4cca:	af00      	add	r7, sp, #0
    4ccc:	6078      	str	r0, [r7, #4]
    4cce:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4cd0:	687b      	ldr	r3, [r7, #4]
    4cd2:	683a      	ldr	r2, [r7, #0]
    4cd4:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    4cd6:	bf00      	nop
    4cd8:	370c      	adds	r7, #12
    4cda:	46bd      	mov	sp, r7
    4cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ce0:	4770      	bx	lr

00004ce2 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4ce2:	b480      	push	{r7}
    4ce4:	b083      	sub	sp, #12
    4ce6:	af00      	add	r7, sp, #0
    4ce8:	6078      	str	r0, [r7, #4]
    4cea:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4cec:	687b      	ldr	r3, [r7, #4]
    4cee:	683a      	ldr	r2, [r7, #0]
    4cf0:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4cf2:	bf00      	nop
    4cf4:	370c      	adds	r7, #12
    4cf6:	46bd      	mov	sp, r7
    4cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cfc:	4770      	bx	lr
	...

00004d00 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4d00:	b580      	push	{r7, lr}
    4d02:	b082      	sub	sp, #8
    4d04:	af00      	add	r7, sp, #0
    4d06:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4d08:	2101      	movs	r1, #1
    4d0a:	484b      	ldr	r0, [pc, #300]	; (4e38 <_ext_irq_init+0x138>)
    4d0c:	4b4b      	ldr	r3, [pc, #300]	; (4e3c <_ext_irq_init+0x13c>)
    4d0e:	4798      	blx	r3
    4d10:	4603      	mov	r3, r0
    4d12:	f083 0301 	eor.w	r3, r3, #1
    4d16:	b2db      	uxtb	r3, r3
    4d18:	2b00      	cmp	r3, #0
    4d1a:	d011      	beq.n	4d40 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4d1c:	2102      	movs	r1, #2
    4d1e:	4846      	ldr	r0, [pc, #280]	; (4e38 <_ext_irq_init+0x138>)
    4d20:	4b47      	ldr	r3, [pc, #284]	; (4e40 <_ext_irq_init+0x140>)
    4d22:	4798      	blx	r3
    4d24:	4603      	mov	r3, r0
    4d26:	2b00      	cmp	r3, #0
    4d28:	d006      	beq.n	4d38 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    4d2a:	4843      	ldr	r0, [pc, #268]	; (4e38 <_ext_irq_init+0x138>)
    4d2c:	4b45      	ldr	r3, [pc, #276]	; (4e44 <_ext_irq_init+0x144>)
    4d2e:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4d30:	2102      	movs	r1, #2
    4d32:	4841      	ldr	r0, [pc, #260]	; (4e38 <_ext_irq_init+0x138>)
    4d34:	4b44      	ldr	r3, [pc, #272]	; (4e48 <_ext_irq_init+0x148>)
    4d36:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4d38:	2101      	movs	r1, #1
    4d3a:	483f      	ldr	r0, [pc, #252]	; (4e38 <_ext_irq_init+0x138>)
    4d3c:	4b43      	ldr	r3, [pc, #268]	; (4e4c <_ext_irq_init+0x14c>)
    4d3e:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4d40:	2101      	movs	r1, #1
    4d42:	483d      	ldr	r0, [pc, #244]	; (4e38 <_ext_irq_init+0x138>)
    4d44:	4b40      	ldr	r3, [pc, #256]	; (4e48 <_ext_irq_init+0x148>)
    4d46:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4d48:	2100      	movs	r1, #0
    4d4a:	483b      	ldr	r0, [pc, #236]	; (4e38 <_ext_irq_init+0x138>)
    4d4c:	4b40      	ldr	r3, [pc, #256]	; (4e50 <_ext_irq_init+0x150>)
    4d4e:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4d50:	2100      	movs	r1, #0
    4d52:	4839      	ldr	r0, [pc, #228]	; (4e38 <_ext_irq_init+0x138>)
    4d54:	4b3f      	ldr	r3, [pc, #252]	; (4e54 <_ext_irq_init+0x154>)
    4d56:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4d58:	2100      	movs	r1, #0
    4d5a:	4837      	ldr	r0, [pc, #220]	; (4e38 <_ext_irq_init+0x138>)
    4d5c:	4b3e      	ldr	r3, [pc, #248]	; (4e58 <_ext_irq_init+0x158>)
    4d5e:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4d60:	f240 31b9 	movw	r1, #953	; 0x3b9
    4d64:	4834      	ldr	r0, [pc, #208]	; (4e38 <_ext_irq_init+0x138>)
    4d66:	4b3d      	ldr	r3, [pc, #244]	; (4e5c <_ext_irq_init+0x15c>)
    4d68:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4d6a:	f240 3139 	movw	r1, #825	; 0x339
    4d6e:	4832      	ldr	r0, [pc, #200]	; (4e38 <_ext_irq_init+0x138>)
    4d70:	4b3b      	ldr	r3, [pc, #236]	; (4e60 <_ext_irq_init+0x160>)
    4d72:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    4d74:	2100      	movs	r1, #0
    4d76:	4830      	ldr	r0, [pc, #192]	; (4e38 <_ext_irq_init+0x138>)
    4d78:	4b3a      	ldr	r3, [pc, #232]	; (4e64 <_ext_irq_init+0x164>)
    4d7a:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4d7c:	4a3a      	ldr	r2, [pc, #232]	; (4e68 <_ext_irq_init+0x168>)
    4d7e:	2100      	movs	r1, #0
    4d80:	482d      	ldr	r0, [pc, #180]	; (4e38 <_ext_irq_init+0x138>)
    4d82:	4b3a      	ldr	r3, [pc, #232]	; (4e6c <_ext_irq_init+0x16c>)
    4d84:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4d86:	2211      	movs	r2, #17
    4d88:	2101      	movs	r1, #1
    4d8a:	482b      	ldr	r0, [pc, #172]	; (4e38 <_ext_irq_init+0x138>)
    4d8c:	4b37      	ldr	r3, [pc, #220]	; (4e6c <_ext_irq_init+0x16c>)
    4d8e:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4d90:	4829      	ldr	r0, [pc, #164]	; (4e38 <_ext_irq_init+0x138>)
    4d92:	4b37      	ldr	r3, [pc, #220]	; (4e70 <_ext_irq_init+0x170>)
    4d94:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    4d96:	200c      	movs	r0, #12
    4d98:	4b36      	ldr	r3, [pc, #216]	; (4e74 <_ext_irq_init+0x174>)
    4d9a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    4d9c:	200c      	movs	r0, #12
    4d9e:	4b36      	ldr	r3, [pc, #216]	; (4e78 <_ext_irq_init+0x178>)
    4da0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    4da2:	200c      	movs	r0, #12
    4da4:	4b35      	ldr	r3, [pc, #212]	; (4e7c <_ext_irq_init+0x17c>)
    4da6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    4da8:	200f      	movs	r0, #15
    4daa:	4b32      	ldr	r3, [pc, #200]	; (4e74 <_ext_irq_init+0x174>)
    4dac:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    4dae:	200f      	movs	r0, #15
    4db0:	4b31      	ldr	r3, [pc, #196]	; (4e78 <_ext_irq_init+0x178>)
    4db2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    4db4:	200f      	movs	r0, #15
    4db6:	4b31      	ldr	r3, [pc, #196]	; (4e7c <_ext_irq_init+0x17c>)
    4db8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4dba:	2010      	movs	r0, #16
    4dbc:	4b2d      	ldr	r3, [pc, #180]	; (4e74 <_ext_irq_init+0x174>)
    4dbe:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    4dc0:	2010      	movs	r0, #16
    4dc2:	4b2d      	ldr	r3, [pc, #180]	; (4e78 <_ext_irq_init+0x178>)
    4dc4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4dc6:	2010      	movs	r0, #16
    4dc8:	4b2c      	ldr	r3, [pc, #176]	; (4e7c <_ext_irq_init+0x17c>)
    4dca:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    4dcc:	2011      	movs	r0, #17
    4dce:	4b29      	ldr	r3, [pc, #164]	; (4e74 <_ext_irq_init+0x174>)
    4dd0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4dd2:	2011      	movs	r0, #17
    4dd4:	4b28      	ldr	r3, [pc, #160]	; (4e78 <_ext_irq_init+0x178>)
    4dd6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4dd8:	2011      	movs	r0, #17
    4dda:	4b28      	ldr	r3, [pc, #160]	; (4e7c <_ext_irq_init+0x17c>)
    4ddc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4dde:	2012      	movs	r0, #18
    4de0:	4b24      	ldr	r3, [pc, #144]	; (4e74 <_ext_irq_init+0x174>)
    4de2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4de4:	2012      	movs	r0, #18
    4de6:	4b24      	ldr	r3, [pc, #144]	; (4e78 <_ext_irq_init+0x178>)
    4de8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4dea:	2012      	movs	r0, #18
    4dec:	4b23      	ldr	r3, [pc, #140]	; (4e7c <_ext_irq_init+0x17c>)
    4dee:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    4df0:	2013      	movs	r0, #19
    4df2:	4b20      	ldr	r3, [pc, #128]	; (4e74 <_ext_irq_init+0x174>)
    4df4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4df6:	2013      	movs	r0, #19
    4df8:	4b1f      	ldr	r3, [pc, #124]	; (4e78 <_ext_irq_init+0x178>)
    4dfa:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    4dfc:	2013      	movs	r0, #19
    4dfe:	4b1f      	ldr	r3, [pc, #124]	; (4e7c <_ext_irq_init+0x17c>)
    4e00:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    4e02:	2014      	movs	r0, #20
    4e04:	4b1b      	ldr	r3, [pc, #108]	; (4e74 <_ext_irq_init+0x174>)
    4e06:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    4e08:	2014      	movs	r0, #20
    4e0a:	4b1b      	ldr	r3, [pc, #108]	; (4e78 <_ext_irq_init+0x178>)
    4e0c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    4e0e:	2014      	movs	r0, #20
    4e10:	4b1a      	ldr	r3, [pc, #104]	; (4e7c <_ext_irq_init+0x17c>)
    4e12:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    4e14:	2015      	movs	r0, #21
    4e16:	4b17      	ldr	r3, [pc, #92]	; (4e74 <_ext_irq_init+0x174>)
    4e18:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    4e1a:	2015      	movs	r0, #21
    4e1c:	4b16      	ldr	r3, [pc, #88]	; (4e78 <_ext_irq_init+0x178>)
    4e1e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    4e20:	2015      	movs	r0, #21
    4e22:	4b16      	ldr	r3, [pc, #88]	; (4e7c <_ext_irq_init+0x17c>)
    4e24:	4798      	blx	r3

	callback = cb;
    4e26:	4a16      	ldr	r2, [pc, #88]	; (4e80 <_ext_irq_init+0x180>)
    4e28:	687b      	ldr	r3, [r7, #4]
    4e2a:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4e2c:	2300      	movs	r3, #0
}
    4e2e:	4618      	mov	r0, r3
    4e30:	3708      	adds	r7, #8
    4e32:	46bd      	mov	sp, r7
    4e34:	bd80      	pop	{r7, pc}
    4e36:	bf00      	nop
    4e38:	40002800 	.word	0x40002800
    4e3c:	00004ac1 	.word	0x00004ac1
    4e40:	00004bf1 	.word	0x00004bf1
    4e44:	00004b81 	.word	0x00004b81
    4e48:	00004a9d 	.word	0x00004a9d
    4e4c:	00004c21 	.word	0x00004c21
    4e50:	00004bad 	.word	0x00004bad
    4e54:	00004c49 	.word	0x00004c49
    4e58:	00004c67 	.word	0x00004c67
    4e5c:	00004c83 	.word	0x00004c83
    4e60:	00004cc7 	.word	0x00004cc7
    4e64:	00004ce3 	.word	0x00004ce3
    4e68:	90999003 	.word	0x90999003
    4e6c:	00004c9f 	.word	0x00004c9f
    4e70:	00004b55 	.word	0x00004b55
    4e74:	00004a1d 	.word	0x00004a1d
    4e78:	00004a61 	.word	0x00004a61
    4e7c:	000049e1 	.word	0x000049e1
    4e80:	20000bd4 	.word	0x20000bd4

00004e84 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    4e84:	b580      	push	{r7, lr}
    4e86:	b084      	sub	sp, #16
    4e88:	af00      	add	r7, sp, #0
    4e8a:	6078      	str	r0, [r7, #4]
    4e8c:	460b      	mov	r3, r1
    4e8e:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    4e90:	23ff      	movs	r3, #255	; 0xff
    4e92:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    4e94:	2300      	movs	r3, #0
    4e96:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    4e98:	e010      	b.n	4ebc <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    4e9a:	7bbb      	ldrb	r3, [r7, #14]
    4e9c:	4a1c      	ldr	r2, [pc, #112]	; (4f10 <_ext_irq_enable+0x8c>)
    4e9e:	00db      	lsls	r3, r3, #3
    4ea0:	4413      	add	r3, r2
    4ea2:	685a      	ldr	r2, [r3, #4]
    4ea4:	687b      	ldr	r3, [r7, #4]
    4ea6:	429a      	cmp	r2, r3
    4ea8:	d105      	bne.n	4eb6 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    4eaa:	7bbb      	ldrb	r3, [r7, #14]
    4eac:	4a18      	ldr	r2, [pc, #96]	; (4f10 <_ext_irq_enable+0x8c>)
    4eae:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4eb2:	73fb      	strb	r3, [r7, #15]
			break;
    4eb4:	e005      	b.n	4ec2 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    4eb6:	7bbb      	ldrb	r3, [r7, #14]
    4eb8:	3301      	adds	r3, #1
    4eba:	73bb      	strb	r3, [r7, #14]
    4ebc:	7bbb      	ldrb	r3, [r7, #14]
    4ebe:	2b07      	cmp	r3, #7
    4ec0:	d9eb      	bls.n	4e9a <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    4ec2:	7bfb      	ldrb	r3, [r7, #15]
    4ec4:	2bff      	cmp	r3, #255	; 0xff
    4ec6:	d102      	bne.n	4ece <_ext_irq_enable+0x4a>
		return -1;
    4ec8:	f04f 33ff 	mov.w	r3, #4294967295
    4ecc:	e01c      	b.n	4f08 <_ext_irq_enable+0x84>
	}

	if (enable) {
    4ece:	78fb      	ldrb	r3, [r7, #3]
    4ed0:	2b00      	cmp	r3, #0
    4ed2:	d008      	beq.n	4ee6 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    4ed4:	7bfb      	ldrb	r3, [r7, #15]
    4ed6:	2201      	movs	r2, #1
    4ed8:	fa02 f303 	lsl.w	r3, r2, r3
    4edc:	4619      	mov	r1, r3
    4ede:	480d      	ldr	r0, [pc, #52]	; (4f14 <_ext_irq_enable+0x90>)
    4ee0:	4b0d      	ldr	r3, [pc, #52]	; (4f18 <_ext_irq_enable+0x94>)
    4ee2:	4798      	blx	r3
    4ee4:	e00f      	b.n	4f06 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    4ee6:	7bfb      	ldrb	r3, [r7, #15]
    4ee8:	2201      	movs	r2, #1
    4eea:	fa02 f303 	lsl.w	r3, r2, r3
    4eee:	4619      	mov	r1, r3
    4ef0:	4808      	ldr	r0, [pc, #32]	; (4f14 <_ext_irq_enable+0x90>)
    4ef2:	4b0a      	ldr	r3, [pc, #40]	; (4f1c <_ext_irq_enable+0x98>)
    4ef4:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    4ef6:	7bfb      	ldrb	r3, [r7, #15]
    4ef8:	2201      	movs	r2, #1
    4efa:	fa02 f303 	lsl.w	r3, r2, r3
    4efe:	4619      	mov	r1, r3
    4f00:	4804      	ldr	r0, [pc, #16]	; (4f14 <_ext_irq_enable+0x90>)
    4f02:	4b07      	ldr	r3, [pc, #28]	; (4f20 <_ext_irq_enable+0x9c>)
    4f04:	4798      	blx	r3
	}

	return ERR_NONE;
    4f06:	2300      	movs	r3, #0
}
    4f08:	4618      	mov	r0, r3
    4f0a:	3710      	adds	r7, #16
    4f0c:	46bd      	mov	sp, r7
    4f0e:	bd80      	pop	{r7, pc}
    4f10:	00010084 	.word	0x00010084
    4f14:	40002800 	.word	0x40002800
    4f18:	00004b1d 	.word	0x00004b1d
    4f1c:	00004b39 	.word	0x00004b39
    4f20:	00004b01 	.word	0x00004b01

00004f24 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4f24:	b580      	push	{r7, lr}
    4f26:	b084      	sub	sp, #16
    4f28:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    4f2a:	4841      	ldr	r0, [pc, #260]	; (5030 <_ext_irq_handler+0x10c>)
    4f2c:	4b41      	ldr	r3, [pc, #260]	; (5034 <_ext_irq_handler+0x110>)
    4f2e:	4798      	blx	r3
    4f30:	4603      	mov	r3, r0
    4f32:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4f34:	f04f 33ff 	mov.w	r3, #4294967295
    4f38:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4f3a:	683b      	ldr	r3, [r7, #0]
    4f3c:	4619      	mov	r1, r3
    4f3e:	483c      	ldr	r0, [pc, #240]	; (5030 <_ext_irq_handler+0x10c>)
    4f40:	4b3d      	ldr	r3, [pc, #244]	; (5038 <_ext_irq_handler+0x114>)
    4f42:	4798      	blx	r3

	ASSERT(callback);
    4f44:	4b3d      	ldr	r3, [pc, #244]	; (503c <_ext_irq_handler+0x118>)
    4f46:	681b      	ldr	r3, [r3, #0]
    4f48:	2b00      	cmp	r3, #0
    4f4a:	bf14      	ite	ne
    4f4c:	2301      	movne	r3, #1
    4f4e:	2300      	moveq	r3, #0
    4f50:	b2db      	uxtb	r3, r3
    4f52:	f44f 7282 	mov.w	r2, #260	; 0x104
    4f56:	493a      	ldr	r1, [pc, #232]	; (5040 <_ext_irq_handler+0x11c>)
    4f58:	4618      	mov	r0, r3
    4f5a:	4b3a      	ldr	r3, [pc, #232]	; (5044 <_ext_irq_handler+0x120>)
    4f5c:	4798      	blx	r3

	while (flags) {
    4f5e:	e060      	b.n	5022 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    4f60:	683b      	ldr	r3, [r7, #0]
    4f62:	4618      	mov	r0, r3
    4f64:	4b38      	ldr	r3, [pc, #224]	; (5048 <_ext_irq_handler+0x124>)
    4f66:	4798      	blx	r3
    4f68:	4603      	mov	r3, r0
    4f6a:	b2db      	uxtb	r3, r3
    4f6c:	3b01      	subs	r3, #1
    4f6e:	b2db      	uxtb	r3, r3
    4f70:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4f72:	e047      	b.n	5004 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4f74:	2300      	movs	r3, #0
    4f76:	71fb      	strb	r3, [r7, #7]
    4f78:	2308      	movs	r3, #8
    4f7a:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    4f7c:	e024      	b.n	4fc8 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    4f7e:	79ba      	ldrb	r2, [r7, #6]
    4f80:	79fb      	ldrb	r3, [r7, #7]
    4f82:	4413      	add	r3, r2
    4f84:	105b      	asrs	r3, r3, #1
    4f86:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4f88:	797b      	ldrb	r3, [r7, #5]
    4f8a:	4a30      	ldr	r2, [pc, #192]	; (504c <_ext_irq_handler+0x128>)
    4f8c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4f90:	461a      	mov	r2, r3
    4f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4f96:	429a      	cmp	r2, r3
    4f98:	d106      	bne.n	4fa8 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    4f9a:	797b      	ldrb	r3, [r7, #5]
    4f9c:	4a2b      	ldr	r2, [pc, #172]	; (504c <_ext_irq_handler+0x128>)
    4f9e:	00db      	lsls	r3, r3, #3
    4fa0:	4413      	add	r3, r2
    4fa2:	685b      	ldr	r3, [r3, #4]
    4fa4:	60bb      	str	r3, [r7, #8]
					break;
    4fa6:	e013      	b.n	4fd0 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    4fa8:	797b      	ldrb	r3, [r7, #5]
    4faa:	4a28      	ldr	r2, [pc, #160]	; (504c <_ext_irq_handler+0x128>)
    4fac:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4fb0:	461a      	mov	r2, r3
    4fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4fb6:	429a      	cmp	r2, r3
    4fb8:	da03      	bge.n	4fc2 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    4fba:	797b      	ldrb	r3, [r7, #5]
    4fbc:	3301      	adds	r3, #1
    4fbe:	71fb      	strb	r3, [r7, #7]
    4fc0:	e002      	b.n	4fc8 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    4fc2:	797b      	ldrb	r3, [r7, #5]
    4fc4:	3b01      	subs	r3, #1
    4fc6:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4fc8:	79ba      	ldrb	r2, [r7, #6]
    4fca:	79fb      	ldrb	r3, [r7, #7]
    4fcc:	429a      	cmp	r2, r3
    4fce:	d2d6      	bcs.n	4f7e <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4fd0:	68bb      	ldr	r3, [r7, #8]
    4fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
    4fd6:	d003      	beq.n	4fe0 <_ext_irq_handler+0xbc>
				callback(pin);
    4fd8:	4b18      	ldr	r3, [pc, #96]	; (503c <_ext_irq_handler+0x118>)
    4fda:	681b      	ldr	r3, [r3, #0]
    4fdc:	68b8      	ldr	r0, [r7, #8]
    4fde:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4fe4:	2201      	movs	r2, #1
    4fe6:	fa02 f303 	lsl.w	r3, r2, r3
    4fea:	43da      	mvns	r2, r3
    4fec:	683b      	ldr	r3, [r7, #0]
    4fee:	4013      	ands	r3, r2
    4ff0:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    4ff2:	683b      	ldr	r3, [r7, #0]
    4ff4:	4618      	mov	r0, r3
    4ff6:	4b14      	ldr	r3, [pc, #80]	; (5048 <_ext_irq_handler+0x124>)
    4ff8:	4798      	blx	r3
    4ffa:	4603      	mov	r3, r0
    4ffc:	b2db      	uxtb	r3, r3
    4ffe:	3b01      	subs	r3, #1
    5000:	b2db      	uxtb	r3, r3
    5002:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    5004:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5008:	f1b3 3fff 	cmp.w	r3, #4294967295
    500c:	d1b2      	bne.n	4f74 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    500e:	4808      	ldr	r0, [pc, #32]	; (5030 <_ext_irq_handler+0x10c>)
    5010:	4b08      	ldr	r3, [pc, #32]	; (5034 <_ext_irq_handler+0x110>)
    5012:	4798      	blx	r3
    5014:	4603      	mov	r3, r0
    5016:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    5018:	683b      	ldr	r3, [r7, #0]
    501a:	4619      	mov	r1, r3
    501c:	4804      	ldr	r0, [pc, #16]	; (5030 <_ext_irq_handler+0x10c>)
    501e:	4b06      	ldr	r3, [pc, #24]	; (5038 <_ext_irq_handler+0x114>)
    5020:	4798      	blx	r3
	while (flags) {
    5022:	683b      	ldr	r3, [r7, #0]
    5024:	2b00      	cmp	r3, #0
    5026:	d19b      	bne.n	4f60 <_ext_irq_handler+0x3c>
	}
}
    5028:	bf00      	nop
    502a:	3710      	adds	r7, #16
    502c:	46bd      	mov	sp, r7
    502e:	bd80      	pop	{r7, pc}
    5030:	40002800 	.word	0x40002800
    5034:	00004ae9 	.word	0x00004ae9
    5038:	00004b01 	.word	0x00004b01
    503c:	20000bd4 	.word	0x20000bd4
    5040:	000100c4 	.word	0x000100c4
    5044:	00003d61 	.word	0x00003d61
    5048:	0000fbd9 	.word	0x0000fbd9
    504c:	00010084 	.word	0x00010084

00005050 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    5050:	b580      	push	{r7, lr}
    5052:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5054:	4b01      	ldr	r3, [pc, #4]	; (505c <EIC_0_Handler+0xc>)
    5056:	4798      	blx	r3
} /**
    5058:	bf00      	nop
    505a:	bd80      	pop	{r7, pc}
    505c:	00004f25 	.word	0x00004f25

00005060 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    5060:	b580      	push	{r7, lr}
    5062:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5064:	4b01      	ldr	r3, [pc, #4]	; (506c <EIC_3_Handler+0xc>)
    5066:	4798      	blx	r3
} /**
    5068:	bf00      	nop
    506a:	bd80      	pop	{r7, pc}
    506c:	00004f25 	.word	0x00004f25

00005070 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    5070:	b580      	push	{r7, lr}
    5072:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5074:	4b01      	ldr	r3, [pc, #4]	; (507c <EIC_4_Handler+0xc>)
    5076:	4798      	blx	r3
} /**
    5078:	bf00      	nop
    507a:	bd80      	pop	{r7, pc}
    507c:	00004f25 	.word	0x00004f25

00005080 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    5080:	b580      	push	{r7, lr}
    5082:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5084:	4b01      	ldr	r3, [pc, #4]	; (508c <EIC_5_Handler+0xc>)
    5086:	4798      	blx	r3
} /**
    5088:	bf00      	nop
    508a:	bd80      	pop	{r7, pc}
    508c:	00004f25 	.word	0x00004f25

00005090 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    5090:	b580      	push	{r7, lr}
    5092:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5094:	4b01      	ldr	r3, [pc, #4]	; (509c <EIC_6_Handler+0xc>)
    5096:	4798      	blx	r3
} /**
    5098:	bf00      	nop
    509a:	bd80      	pop	{r7, pc}
    509c:	00004f25 	.word	0x00004f25

000050a0 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    50a0:	b580      	push	{r7, lr}
    50a2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    50a4:	4b01      	ldr	r3, [pc, #4]	; (50ac <EIC_7_Handler+0xc>)
    50a6:	4798      	blx	r3
} /**
    50a8:	bf00      	nop
    50aa:	bd80      	pop	{r7, pc}
    50ac:	00004f25 	.word	0x00004f25

000050b0 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    50b0:	b580      	push	{r7, lr}
    50b2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    50b4:	4b01      	ldr	r3, [pc, #4]	; (50bc <EIC_8_Handler+0xc>)
    50b6:	4798      	blx	r3
} /**
    50b8:	bf00      	nop
    50ba:	bd80      	pop	{r7, pc}
    50bc:	00004f25 	.word	0x00004f25

000050c0 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    50c0:	b580      	push	{r7, lr}
    50c2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    50c4:	4b01      	ldr	r3, [pc, #4]	; (50cc <EIC_9_Handler+0xc>)
    50c6:	4798      	blx	r3
}
    50c8:	bf00      	nop
    50ca:	bd80      	pop	{r7, pc}
    50cc:	00004f25 	.word	0x00004f25

000050d0 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    50d0:	b480      	push	{r7}
    50d2:	b085      	sub	sp, #20
    50d4:	af00      	add	r7, sp, #0
    50d6:	60f8      	str	r0, [r7, #12]
    50d8:	460b      	mov	r3, r1
    50da:	607a      	str	r2, [r7, #4]
    50dc:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    50de:	7afa      	ldrb	r2, [r7, #11]
    50e0:	68fb      	ldr	r3, [r7, #12]
    50e2:	3248      	adds	r2, #72	; 0x48
    50e4:	6879      	ldr	r1, [r7, #4]
    50e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    50ea:	bf00      	nop
    50ec:	3714      	adds	r7, #20
    50ee:	46bd      	mov	sp, r7
    50f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    50f4:	4770      	bx	lr

000050f6 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    50f6:	b480      	push	{r7}
    50f8:	b083      	sub	sp, #12
    50fa:	af00      	add	r7, sp, #0
    50fc:	6078      	str	r0, [r7, #4]
    50fe:	460b      	mov	r3, r1
    5100:	70fb      	strb	r3, [r7, #3]
    5102:	4613      	mov	r3, r2
    5104:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    5106:	78fb      	ldrb	r3, [r7, #3]
    5108:	687a      	ldr	r2, [r7, #4]
    510a:	3304      	adds	r3, #4
    510c:	00db      	lsls	r3, r3, #3
    510e:	4413      	add	r3, r2
    5110:	78ba      	ldrb	r2, [r7, #2]
    5112:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    5114:	78fb      	ldrb	r3, [r7, #3]
    5116:	78ba      	ldrb	r2, [r7, #2]
    5118:	43d2      	mvns	r2, r2
    511a:	b2d1      	uxtb	r1, r2
    511c:	687a      	ldr	r2, [r7, #4]
    511e:	3304      	adds	r3, #4
    5120:	00db      	lsls	r3, r3, #3
    5122:	4413      	add	r3, r2
    5124:	460a      	mov	r2, r1
    5126:	711a      	strb	r2, [r3, #4]
}
    5128:	bf00      	nop
    512a:	370c      	adds	r7, #12
    512c:	46bd      	mov	sp, r7
    512e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5132:	4770      	bx	lr

00005134 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    5134:	b480      	push	{r7}
    5136:	b085      	sub	sp, #20
    5138:	af00      	add	r7, sp, #0
    513a:	60f8      	str	r0, [r7, #12]
    513c:	460b      	mov	r3, r1
    513e:	607a      	str	r2, [r7, #4]
    5140:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    5142:	7afa      	ldrb	r2, [r7, #11]
    5144:	68fb      	ldr	r3, [r7, #12]
    5146:	3204      	adds	r2, #4
    5148:	6879      	ldr	r1, [r7, #4]
    514a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    514e:	bf00      	nop
    5150:	3714      	adds	r7, #20
    5152:	46bd      	mov	sp, r7
    5154:	f85d 7b04 	ldr.w	r7, [sp], #4
    5158:	4770      	bx	lr
	...

0000515c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    515c:	b580      	push	{r7, lr}
    515e:	b082      	sub	sp, #8
    5160:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    5162:	2300      	movs	r3, #0
    5164:	71fb      	strb	r3, [r7, #7]
    5166:	e00b      	b.n	5180 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    5168:	79fb      	ldrb	r3, [r7, #7]
    516a:	4a18      	ldr	r2, [pc, #96]	; (51cc <_event_system_init+0x70>)
    516c:	5cd3      	ldrb	r3, [r2, r3]
    516e:	461a      	mov	r2, r3
    5170:	79fb      	ldrb	r3, [r7, #7]
    5172:	4619      	mov	r1, r3
    5174:	4816      	ldr	r0, [pc, #88]	; (51d0 <_event_system_init+0x74>)
    5176:	4b17      	ldr	r3, [pc, #92]	; (51d4 <_event_system_init+0x78>)
    5178:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    517a:	79fb      	ldrb	r3, [r7, #7]
    517c:	3301      	adds	r3, #1
    517e:	71fb      	strb	r3, [r7, #7]
    5180:	79fb      	ldrb	r3, [r7, #7]
    5182:	2b42      	cmp	r3, #66	; 0x42
    5184:	d9f0      	bls.n	5168 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    5186:	2300      	movs	r3, #0
    5188:	71fb      	strb	r3, [r7, #7]
    518a:	e016      	b.n	51ba <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    518c:	79fb      	ldrb	r3, [r7, #7]
    518e:	4a12      	ldr	r2, [pc, #72]	; (51d8 <_event_system_init+0x7c>)
    5190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    5194:	461a      	mov	r2, r3
    5196:	79fb      	ldrb	r3, [r7, #7]
    5198:	4619      	mov	r1, r3
    519a:	480d      	ldr	r0, [pc, #52]	; (51d0 <_event_system_init+0x74>)
    519c:	4b0f      	ldr	r3, [pc, #60]	; (51dc <_event_system_init+0x80>)
    519e:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    51a0:	79fb      	ldrb	r3, [r7, #7]
    51a2:	4a0f      	ldr	r2, [pc, #60]	; (51e0 <_event_system_init+0x84>)
    51a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    51a8:	b2da      	uxtb	r2, r3
    51aa:	79fb      	ldrb	r3, [r7, #7]
    51ac:	4619      	mov	r1, r3
    51ae:	4808      	ldr	r0, [pc, #32]	; (51d0 <_event_system_init+0x74>)
    51b0:	4b0c      	ldr	r3, [pc, #48]	; (51e4 <_event_system_init+0x88>)
    51b2:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    51b4:	79fb      	ldrb	r3, [r7, #7]
    51b6:	3301      	adds	r3, #1
    51b8:	71fb      	strb	r3, [r7, #7]
    51ba:	79fb      	ldrb	r3, [r7, #7]
    51bc:	2b1f      	cmp	r3, #31
    51be:	d9e5      	bls.n	518c <_event_system_init+0x30>
	}

	return ERR_NONE;
    51c0:	2300      	movs	r3, #0
}
    51c2:	4618      	mov	r0, r3
    51c4:	3708      	adds	r7, #8
    51c6:	46bd      	mov	sp, r7
    51c8:	bd80      	pop	{r7, pc}
    51ca:	bf00      	nop
    51cc:	000100dc 	.word	0x000100dc
    51d0:	4100e000 	.word	0x4100e000
    51d4:	000050d1 	.word	0x000050d1
    51d8:	00010120 	.word	0x00010120
    51dc:	00005135 	.word	0x00005135
    51e0:	00010160 	.word	0x00010160
    51e4:	000050f7 	.word	0x000050f7

000051e8 <hri_gclk_wait_for_sync>:
{
    51e8:	b480      	push	{r7}
    51ea:	b083      	sub	sp, #12
    51ec:	af00      	add	r7, sp, #0
    51ee:	6078      	str	r0, [r7, #4]
    51f0:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    51f2:	bf00      	nop
    51f4:	687b      	ldr	r3, [r7, #4]
    51f6:	685a      	ldr	r2, [r3, #4]
    51f8:	683b      	ldr	r3, [r7, #0]
    51fa:	4013      	ands	r3, r2
    51fc:	2b00      	cmp	r3, #0
    51fe:	d1f9      	bne.n	51f4 <hri_gclk_wait_for_sync+0xc>
}
    5200:	bf00      	nop
    5202:	370c      	adds	r7, #12
    5204:	46bd      	mov	sp, r7
    5206:	f85d 7b04 	ldr.w	r7, [sp], #4
    520a:	4770      	bx	lr

0000520c <hri_gclk_write_GENCTRL_reg>:
{
    520c:	b580      	push	{r7, lr}
    520e:	b084      	sub	sp, #16
    5210:	af00      	add	r7, sp, #0
    5212:	60f8      	str	r0, [r7, #12]
    5214:	460b      	mov	r3, r1
    5216:	607a      	str	r2, [r7, #4]
    5218:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    521a:	7afa      	ldrb	r2, [r7, #11]
    521c:	68fb      	ldr	r3, [r7, #12]
    521e:	3208      	adds	r2, #8
    5220:	6879      	ldr	r1, [r7, #4]
    5222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    5226:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    522a:	68f8      	ldr	r0, [r7, #12]
    522c:	4b02      	ldr	r3, [pc, #8]	; (5238 <hri_gclk_write_GENCTRL_reg+0x2c>)
    522e:	4798      	blx	r3
}
    5230:	bf00      	nop
    5232:	3710      	adds	r7, #16
    5234:	46bd      	mov	sp, r7
    5236:	bd80      	pop	{r7, pc}
    5238:	000051e9 	.word	0x000051e9

0000523c <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    523c:	b580      	push	{r7, lr}
    523e:	b082      	sub	sp, #8
    5240:	af00      	add	r7, sp, #0
    5242:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    5244:	687b      	ldr	r3, [r7, #4]
    5246:	f003 0301 	and.w	r3, r3, #1
    524a:	2b00      	cmp	r3, #0
    524c:	d004      	beq.n	5258 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    524e:	4a36      	ldr	r2, [pc, #216]	; (5328 <_gclk_init_generators_by_fref+0xec>)
    5250:	2100      	movs	r1, #0
    5252:	4836      	ldr	r0, [pc, #216]	; (532c <_gclk_init_generators_by_fref+0xf0>)
    5254:	4b36      	ldr	r3, [pc, #216]	; (5330 <_gclk_init_generators_by_fref+0xf4>)
    5256:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    5258:	687b      	ldr	r3, [r7, #4]
    525a:	f003 0302 	and.w	r3, r3, #2
    525e:	2b00      	cmp	r3, #0
    5260:	d004      	beq.n	526c <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    5262:	4a34      	ldr	r2, [pc, #208]	; (5334 <_gclk_init_generators_by_fref+0xf8>)
    5264:	2101      	movs	r1, #1
    5266:	4831      	ldr	r0, [pc, #196]	; (532c <_gclk_init_generators_by_fref+0xf0>)
    5268:	4b31      	ldr	r3, [pc, #196]	; (5330 <_gclk_init_generators_by_fref+0xf4>)
    526a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    526c:	687b      	ldr	r3, [r7, #4]
    526e:	f003 0304 	and.w	r3, r3, #4
    5272:	2b00      	cmp	r3, #0
    5274:	d004      	beq.n	5280 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    5276:	4a30      	ldr	r2, [pc, #192]	; (5338 <_gclk_init_generators_by_fref+0xfc>)
    5278:	2102      	movs	r1, #2
    527a:	482c      	ldr	r0, [pc, #176]	; (532c <_gclk_init_generators_by_fref+0xf0>)
    527c:	4b2c      	ldr	r3, [pc, #176]	; (5330 <_gclk_init_generators_by_fref+0xf4>)
    527e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    5280:	687b      	ldr	r3, [r7, #4]
    5282:	f003 0308 	and.w	r3, r3, #8
    5286:	2b00      	cmp	r3, #0
    5288:	d004      	beq.n	5294 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    528a:	4a2c      	ldr	r2, [pc, #176]	; (533c <_gclk_init_generators_by_fref+0x100>)
    528c:	2103      	movs	r1, #3
    528e:	4827      	ldr	r0, [pc, #156]	; (532c <_gclk_init_generators_by_fref+0xf0>)
    5290:	4b27      	ldr	r3, [pc, #156]	; (5330 <_gclk_init_generators_by_fref+0xf4>)
    5292:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    5294:	687b      	ldr	r3, [r7, #4]
    5296:	f003 0310 	and.w	r3, r3, #16
    529a:	2b00      	cmp	r3, #0
    529c:	d004      	beq.n	52a8 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    529e:	4a28      	ldr	r2, [pc, #160]	; (5340 <_gclk_init_generators_by_fref+0x104>)
    52a0:	2104      	movs	r1, #4
    52a2:	4822      	ldr	r0, [pc, #136]	; (532c <_gclk_init_generators_by_fref+0xf0>)
    52a4:	4b22      	ldr	r3, [pc, #136]	; (5330 <_gclk_init_generators_by_fref+0xf4>)
    52a6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    52a8:	687b      	ldr	r3, [r7, #4]
    52aa:	f003 0320 	and.w	r3, r3, #32
    52ae:	2b00      	cmp	r3, #0
    52b0:	d004      	beq.n	52bc <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    52b2:	4a24      	ldr	r2, [pc, #144]	; (5344 <_gclk_init_generators_by_fref+0x108>)
    52b4:	2105      	movs	r1, #5
    52b6:	481d      	ldr	r0, [pc, #116]	; (532c <_gclk_init_generators_by_fref+0xf0>)
    52b8:	4b1d      	ldr	r3, [pc, #116]	; (5330 <_gclk_init_generators_by_fref+0xf4>)
    52ba:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    52bc:	687b      	ldr	r3, [r7, #4]
    52be:	f003 0340 	and.w	r3, r3, #64	; 0x40
    52c2:	2b00      	cmp	r3, #0
    52c4:	d004      	beq.n	52d0 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    52c6:	4a20      	ldr	r2, [pc, #128]	; (5348 <_gclk_init_generators_by_fref+0x10c>)
    52c8:	2106      	movs	r1, #6
    52ca:	4818      	ldr	r0, [pc, #96]	; (532c <_gclk_init_generators_by_fref+0xf0>)
    52cc:	4b18      	ldr	r3, [pc, #96]	; (5330 <_gclk_init_generators_by_fref+0xf4>)
    52ce:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    52d0:	687b      	ldr	r3, [r7, #4]
    52d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    52d6:	2b00      	cmp	r3, #0
    52d8:	d004      	beq.n	52e4 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    52da:	4a1c      	ldr	r2, [pc, #112]	; (534c <_gclk_init_generators_by_fref+0x110>)
    52dc:	2107      	movs	r1, #7
    52de:	4813      	ldr	r0, [pc, #76]	; (532c <_gclk_init_generators_by_fref+0xf0>)
    52e0:	4b13      	ldr	r3, [pc, #76]	; (5330 <_gclk_init_generators_by_fref+0xf4>)
    52e2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    52e4:	687b      	ldr	r3, [r7, #4]
    52e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    52ea:	2b00      	cmp	r3, #0
    52ec:	d004      	beq.n	52f8 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    52ee:	4a18      	ldr	r2, [pc, #96]	; (5350 <_gclk_init_generators_by_fref+0x114>)
    52f0:	2108      	movs	r1, #8
    52f2:	480e      	ldr	r0, [pc, #56]	; (532c <_gclk_init_generators_by_fref+0xf0>)
    52f4:	4b0e      	ldr	r3, [pc, #56]	; (5330 <_gclk_init_generators_by_fref+0xf4>)
    52f6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    52f8:	687b      	ldr	r3, [r7, #4]
    52fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    52fe:	2b00      	cmp	r3, #0
    5300:	d004      	beq.n	530c <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    5302:	4a14      	ldr	r2, [pc, #80]	; (5354 <_gclk_init_generators_by_fref+0x118>)
    5304:	210a      	movs	r1, #10
    5306:	4809      	ldr	r0, [pc, #36]	; (532c <_gclk_init_generators_by_fref+0xf0>)
    5308:	4b09      	ldr	r3, [pc, #36]	; (5330 <_gclk_init_generators_by_fref+0xf4>)
    530a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    530c:	687b      	ldr	r3, [r7, #4]
    530e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    5312:	2b00      	cmp	r3, #0
    5314:	d004      	beq.n	5320 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    5316:	4a10      	ldr	r2, [pc, #64]	; (5358 <_gclk_init_generators_by_fref+0x11c>)
    5318:	210b      	movs	r1, #11
    531a:	4804      	ldr	r0, [pc, #16]	; (532c <_gclk_init_generators_by_fref+0xf0>)
    531c:	4b04      	ldr	r3, [pc, #16]	; (5330 <_gclk_init_generators_by_fref+0xf4>)
    531e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    5320:	bf00      	nop
    5322:	3708      	adds	r7, #8
    5324:	46bd      	mov	sp, r7
    5326:	bd80      	pop	{r7, pc}
    5328:	00010107 	.word	0x00010107
    532c:	40001c00 	.word	0x40001c00
    5330:	0000520d 	.word	0x0000520d
    5334:	00010907 	.word	0x00010907
    5338:	00010906 	.word	0x00010906
    533c:	00020908 	.word	0x00020908
    5340:	00010901 	.word	0x00010901
    5344:	00062901 	.word	0x00062901
    5348:	000c2901 	.word	0x000c2901
    534c:	00082908 	.word	0x00082908
    5350:	00032901 	.word	0x00032901
    5354:	00010905 	.word	0x00010905
    5358:	00041905 	.word	0x00041905

0000535c <hri_mclk_write_CPUDIV_reg>:
{
    535c:	b480      	push	{r7}
    535e:	b083      	sub	sp, #12
    5360:	af00      	add	r7, sp, #0
    5362:	6078      	str	r0, [r7, #4]
    5364:	460b      	mov	r3, r1
    5366:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    5368:	687b      	ldr	r3, [r7, #4]
    536a:	78fa      	ldrb	r2, [r7, #3]
    536c:	715a      	strb	r2, [r3, #5]
}
    536e:	bf00      	nop
    5370:	370c      	adds	r7, #12
    5372:	46bd      	mov	sp, r7
    5374:	f85d 7b04 	ldr.w	r7, [sp], #4
    5378:	4770      	bx	lr
	...

0000537c <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    537c:	b580      	push	{r7, lr}
    537e:	b082      	sub	sp, #8
    5380:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    5382:	4b05      	ldr	r3, [pc, #20]	; (5398 <_mclk_init+0x1c>)
    5384:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    5386:	2101      	movs	r1, #1
    5388:	6878      	ldr	r0, [r7, #4]
    538a:	4b04      	ldr	r3, [pc, #16]	; (539c <_mclk_init+0x20>)
    538c:	4798      	blx	r3
}
    538e:	bf00      	nop
    5390:	3708      	adds	r7, #8
    5392:	46bd      	mov	sp, r7
    5394:	bd80      	pop	{r7, pc}
    5396:	bf00      	nop
    5398:	40000800 	.word	0x40000800
    539c:	0000535d 	.word	0x0000535d

000053a0 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    53a0:	b480      	push	{r7}
    53a2:	b083      	sub	sp, #12
    53a4:	af00      	add	r7, sp, #0
    53a6:	6078      	str	r0, [r7, #4]
    53a8:	460b      	mov	r3, r1
    53aa:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    53ac:	687b      	ldr	r3, [r7, #4]
    53ae:	78fa      	ldrb	r2, [r7, #3]
    53b0:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    53b2:	bf00      	nop
    53b4:	370c      	adds	r7, #12
    53b6:	46bd      	mov	sp, r7
    53b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    53bc:	4770      	bx	lr

000053be <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    53be:	b480      	push	{r7}
    53c0:	b083      	sub	sp, #12
    53c2:	af00      	add	r7, sp, #0
    53c4:	6078      	str	r0, [r7, #4]
    53c6:	460b      	mov	r3, r1
    53c8:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    53ca:	687b      	ldr	r3, [r7, #4]
    53cc:	887a      	ldrh	r2, [r7, #2]
    53ce:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    53d0:	bf00      	nop
    53d2:	370c      	adds	r7, #12
    53d4:	46bd      	mov	sp, r7
    53d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    53da:	4770      	bx	lr

000053dc <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    53dc:	b480      	push	{r7}
    53de:	b083      	sub	sp, #12
    53e0:	af00      	add	r7, sp, #0
    53e2:	6078      	str	r0, [r7, #4]
    53e4:	460b      	mov	r3, r1
    53e6:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    53e8:	687b      	ldr	r3, [r7, #4]
    53ea:	78fa      	ldrb	r2, [r7, #3]
    53ec:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    53ee:	bf00      	nop
    53f0:	370c      	adds	r7, #12
    53f2:	46bd      	mov	sp, r7
    53f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    53f8:	4770      	bx	lr

000053fa <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    53fa:	b480      	push	{r7}
    53fc:	b083      	sub	sp, #12
    53fe:	af00      	add	r7, sp, #0
    5400:	6078      	str	r0, [r7, #4]
    5402:	460b      	mov	r3, r1
    5404:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    5406:	687b      	ldr	r3, [r7, #4]
    5408:	78fa      	ldrb	r2, [r7, #3]
    540a:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    540c:	bf00      	nop
    540e:	370c      	adds	r7, #12
    5410:	46bd      	mov	sp, r7
    5412:	f85d 7b04 	ldr.w	r7, [sp], #4
    5416:	4770      	bx	lr

00005418 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    5418:	b480      	push	{r7}
    541a:	b085      	sub	sp, #20
    541c:	af00      	add	r7, sp, #0
    541e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    5420:	687b      	ldr	r3, [r7, #4]
    5422:	69db      	ldr	r3, [r3, #28]
    5424:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    5426:	68fb      	ldr	r3, [r7, #12]
    5428:	0a1b      	lsrs	r3, r3, #8
    542a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    542e:	60fb      	str	r3, [r7, #12]
	return tmp;
    5430:	68fb      	ldr	r3, [r7, #12]
}
    5432:	4618      	mov	r0, r3
    5434:	3714      	adds	r7, #20
    5436:	46bd      	mov	sp, r7
    5438:	f85d 7b04 	ldr.w	r7, [sp], #4
    543c:	4770      	bx	lr

0000543e <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    543e:	b480      	push	{r7}
    5440:	b083      	sub	sp, #12
    5442:	af00      	add	r7, sp, #0
    5444:	6078      	str	r0, [r7, #4]
    5446:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    5448:	687b      	ldr	r3, [r7, #4]
    544a:	683a      	ldr	r2, [r7, #0]
    544c:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    544e:	bf00      	nop
    5450:	370c      	adds	r7, #12
    5452:	46bd      	mov	sp, r7
    5454:	f85d 7b04 	ldr.w	r7, [sp], #4
    5458:	4770      	bx	lr
	...

0000545c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    545c:	b580      	push	{r7, lr}
    545e:	b082      	sub	sp, #8
    5460:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    5462:	4b13      	ldr	r3, [pc, #76]	; (54b0 <_osc32kctrl_init_sources+0x54>)
    5464:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    5466:	2300      	movs	r3, #0
    5468:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    546a:	f242 018e 	movw	r1, #8334	; 0x208e
    546e:	6878      	ldr	r0, [r7, #4]
    5470:	4b10      	ldr	r3, [pc, #64]	; (54b4 <_osc32kctrl_init_sources+0x58>)
    5472:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    5474:	2100      	movs	r1, #0
    5476:	6878      	ldr	r0, [r7, #4]
    5478:	4b0f      	ldr	r3, [pc, #60]	; (54b8 <_osc32kctrl_init_sources+0x5c>)
    547a:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    547c:	2100      	movs	r1, #0
    547e:	6878      	ldr	r0, [r7, #4]
    5480:	4b0e      	ldr	r3, [pc, #56]	; (54bc <_osc32kctrl_init_sources+0x60>)
    5482:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    5484:	6878      	ldr	r0, [r7, #4]
    5486:	4b0e      	ldr	r3, [pc, #56]	; (54c0 <_osc32kctrl_init_sources+0x64>)
    5488:	4798      	blx	r3
    548a:	4603      	mov	r3, r0
    548c:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    548e:	887b      	ldrh	r3, [r7, #2]
    5490:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    5492:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    5496:	4619      	mov	r1, r3
    5498:	6878      	ldr	r0, [r7, #4]
    549a:	4b0a      	ldr	r3, [pc, #40]	; (54c4 <_osc32kctrl_init_sources+0x68>)
    549c:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    549e:	2100      	movs	r1, #0
    54a0:	6878      	ldr	r0, [r7, #4]
    54a2:	4b09      	ldr	r3, [pc, #36]	; (54c8 <_osc32kctrl_init_sources+0x6c>)
    54a4:	4798      	blx	r3
	(void)calib;
}
    54a6:	bf00      	nop
    54a8:	3708      	adds	r7, #8
    54aa:	46bd      	mov	sp, r7
    54ac:	bd80      	pop	{r7, pc}
    54ae:	bf00      	nop
    54b0:	40001400 	.word	0x40001400
    54b4:	000053bf 	.word	0x000053bf
    54b8:	000053dd 	.word	0x000053dd
    54bc:	000053fb 	.word	0x000053fb
    54c0:	00005419 	.word	0x00005419
    54c4:	0000543f 	.word	0x0000543f
    54c8:	000053a1 	.word	0x000053a1

000054cc <hri_gclk_wait_for_sync>:
{
    54cc:	b480      	push	{r7}
    54ce:	b083      	sub	sp, #12
    54d0:	af00      	add	r7, sp, #0
    54d2:	6078      	str	r0, [r7, #4]
    54d4:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    54d6:	bf00      	nop
    54d8:	687b      	ldr	r3, [r7, #4]
    54da:	685a      	ldr	r2, [r3, #4]
    54dc:	683b      	ldr	r3, [r7, #0]
    54de:	4013      	ands	r3, r2
    54e0:	2b00      	cmp	r3, #0
    54e2:	d1f9      	bne.n	54d8 <hri_gclk_wait_for_sync+0xc>
}
    54e4:	bf00      	nop
    54e6:	370c      	adds	r7, #12
    54e8:	46bd      	mov	sp, r7
    54ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    54ee:	4770      	bx	lr

000054f0 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    54f0:	b480      	push	{r7}
    54f2:	b083      	sub	sp, #12
    54f4:	af00      	add	r7, sp, #0
    54f6:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    54f8:	687b      	ldr	r3, [r7, #4]
    54fa:	685b      	ldr	r3, [r3, #4]
    54fc:	089b      	lsrs	r3, r3, #2
    54fe:	f003 0301 	and.w	r3, r3, #1
    5502:	2b00      	cmp	r3, #0
    5504:	bf14      	ite	ne
    5506:	2301      	movne	r3, #1
    5508:	2300      	moveq	r3, #0
    550a:	b2db      	uxtb	r3, r3
}
    550c:	4618      	mov	r0, r3
    550e:	370c      	adds	r7, #12
    5510:	46bd      	mov	sp, r7
    5512:	f85d 7b04 	ldr.w	r7, [sp], #4
    5516:	4770      	bx	lr

00005518 <hri_gclk_read_SYNCBUSY_reg>:
{
    5518:	b480      	push	{r7}
    551a:	b083      	sub	sp, #12
    551c:	af00      	add	r7, sp, #0
    551e:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    5520:	687b      	ldr	r3, [r7, #4]
    5522:	685b      	ldr	r3, [r3, #4]
}
    5524:	4618      	mov	r0, r3
    5526:	370c      	adds	r7, #12
    5528:	46bd      	mov	sp, r7
    552a:	f85d 7b04 	ldr.w	r7, [sp], #4
    552e:	4770      	bx	lr

00005530 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    5530:	b580      	push	{r7, lr}
    5532:	b086      	sub	sp, #24
    5534:	af00      	add	r7, sp, #0
    5536:	60f8      	str	r0, [r7, #12]
    5538:	460b      	mov	r3, r1
    553a:	607a      	str	r2, [r7, #4]
    553c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    553e:	7afa      	ldrb	r2, [r7, #11]
    5540:	68fb      	ldr	r3, [r7, #12]
    5542:	3208      	adds	r2, #8
    5544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5548:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    554a:	697b      	ldr	r3, [r7, #20]
    554c:	f023 030f 	bic.w	r3, r3, #15
    5550:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    5552:	687b      	ldr	r3, [r7, #4]
    5554:	f003 030f 	and.w	r3, r3, #15
    5558:	697a      	ldr	r2, [r7, #20]
    555a:	4313      	orrs	r3, r2
    555c:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    555e:	7afa      	ldrb	r2, [r7, #11]
    5560:	68fb      	ldr	r3, [r7, #12]
    5562:	3208      	adds	r2, #8
    5564:	6979      	ldr	r1, [r7, #20]
    5566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    556a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    556e:	68f8      	ldr	r0, [r7, #12]
    5570:	4b02      	ldr	r3, [pc, #8]	; (557c <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    5572:	4798      	blx	r3
}
    5574:	bf00      	nop
    5576:	3718      	adds	r7, #24
    5578:	46bd      	mov	sp, r7
    557a:	bd80      	pop	{r7, pc}
    557c:	000054cd 	.word	0x000054cd

00005580 <hri_gclk_write_PCHCTRL_reg>:
{
    5580:	b480      	push	{r7}
    5582:	b085      	sub	sp, #20
    5584:	af00      	add	r7, sp, #0
    5586:	60f8      	str	r0, [r7, #12]
    5588:	460b      	mov	r3, r1
    558a:	607a      	str	r2, [r7, #4]
    558c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    558e:	7afa      	ldrb	r2, [r7, #11]
    5590:	68fb      	ldr	r3, [r7, #12]
    5592:	3220      	adds	r2, #32
    5594:	6879      	ldr	r1, [r7, #4]
    5596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    559a:	bf00      	nop
    559c:	3714      	adds	r7, #20
    559e:	46bd      	mov	sp, r7
    55a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    55a4:	4770      	bx	lr

000055a6 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    55a6:	b480      	push	{r7}
    55a8:	b085      	sub	sp, #20
    55aa:	af00      	add	r7, sp, #0
    55ac:	60f8      	str	r0, [r7, #12]
    55ae:	460b      	mov	r3, r1
    55b0:	607a      	str	r2, [r7, #4]
    55b2:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    55b4:	bf00      	nop
    55b6:	7afa      	ldrb	r2, [r7, #11]
    55b8:	68f9      	ldr	r1, [r7, #12]
    55ba:	4613      	mov	r3, r2
    55bc:	009b      	lsls	r3, r3, #2
    55be:	4413      	add	r3, r2
    55c0:	009b      	lsls	r3, r3, #2
    55c2:	440b      	add	r3, r1
    55c4:	333c      	adds	r3, #60	; 0x3c
    55c6:	681a      	ldr	r2, [r3, #0]
    55c8:	687b      	ldr	r3, [r7, #4]
    55ca:	4013      	ands	r3, r2
    55cc:	2b00      	cmp	r3, #0
    55ce:	d1f2      	bne.n	55b6 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    55d0:	bf00      	nop
    55d2:	3714      	adds	r7, #20
    55d4:	46bd      	mov	sp, r7
    55d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    55da:	4770      	bx	lr

000055dc <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    55dc:	b480      	push	{r7}
    55de:	b083      	sub	sp, #12
    55e0:	af00      	add	r7, sp, #0
    55e2:	6078      	str	r0, [r7, #4]
    55e4:	460b      	mov	r3, r1
    55e6:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    55e8:	78fa      	ldrb	r2, [r7, #3]
    55ea:	6879      	ldr	r1, [r7, #4]
    55ec:	4613      	mov	r3, r2
    55ee:	009b      	lsls	r3, r3, #2
    55f0:	4413      	add	r3, r2
    55f2:	009b      	lsls	r3, r3, #2
    55f4:	440b      	add	r3, r1
    55f6:	3340      	adds	r3, #64	; 0x40
    55f8:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    55fa:	f003 0301 	and.w	r3, r3, #1
    55fe:	2b00      	cmp	r3, #0
    5600:	bf14      	ite	ne
    5602:	2301      	movne	r3, #1
    5604:	2300      	moveq	r3, #0
    5606:	b2db      	uxtb	r3, r3
}
    5608:	4618      	mov	r0, r3
    560a:	370c      	adds	r7, #12
    560c:	46bd      	mov	sp, r7
    560e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5612:	4770      	bx	lr

00005614 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    5614:	b480      	push	{r7}
    5616:	b083      	sub	sp, #12
    5618:	af00      	add	r7, sp, #0
    561a:	6078      	str	r0, [r7, #4]
    561c:	460b      	mov	r3, r1
    561e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5620:	78fa      	ldrb	r2, [r7, #3]
    5622:	6879      	ldr	r1, [r7, #4]
    5624:	4613      	mov	r3, r2
    5626:	009b      	lsls	r3, r3, #2
    5628:	4413      	add	r3, r2
    562a:	009b      	lsls	r3, r3, #2
    562c:	440b      	add	r3, r1
    562e:	3340      	adds	r3, #64	; 0x40
    5630:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    5632:	085b      	lsrs	r3, r3, #1
    5634:	f003 0301 	and.w	r3, r3, #1
    5638:	2b00      	cmp	r3, #0
    563a:	bf14      	ite	ne
    563c:	2301      	movne	r3, #1
    563e:	2300      	moveq	r3, #0
    5640:	b2db      	uxtb	r3, r3
}
    5642:	4618      	mov	r0, r3
    5644:	370c      	adds	r7, #12
    5646:	46bd      	mov	sp, r7
    5648:	f85d 7b04 	ldr.w	r7, [sp], #4
    564c:	4770      	bx	lr
	...

00005650 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    5650:	b580      	push	{r7, lr}
    5652:	b082      	sub	sp, #8
    5654:	af00      	add	r7, sp, #0
    5656:	6078      	str	r0, [r7, #4]
    5658:	460b      	mov	r3, r1
    565a:	70fb      	strb	r3, [r7, #3]
    565c:	4613      	mov	r3, r2
    565e:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5660:	78fa      	ldrb	r2, [r7, #3]
    5662:	6879      	ldr	r1, [r7, #4]
    5664:	4613      	mov	r3, r2
    5666:	009b      	lsls	r3, r3, #2
    5668:	4413      	add	r3, r2
    566a:	009b      	lsls	r3, r3, #2
    566c:	440b      	add	r3, r1
    566e:	3330      	adds	r3, #48	; 0x30
    5670:	78ba      	ldrb	r2, [r7, #2]
    5672:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    5674:	78fb      	ldrb	r3, [r7, #3]
    5676:	2202      	movs	r2, #2
    5678:	4619      	mov	r1, r3
    567a:	6878      	ldr	r0, [r7, #4]
    567c:	4b02      	ldr	r3, [pc, #8]	; (5688 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    567e:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5680:	bf00      	nop
    5682:	3708      	adds	r7, #8
    5684:	46bd      	mov	sp, r7
    5686:	bd80      	pop	{r7, pc}
    5688:	000055a7 	.word	0x000055a7

0000568c <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    568c:	b580      	push	{r7, lr}
    568e:	b084      	sub	sp, #16
    5690:	af00      	add	r7, sp, #0
    5692:	60f8      	str	r0, [r7, #12]
    5694:	460b      	mov	r3, r1
    5696:	607a      	str	r2, [r7, #4]
    5698:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    569a:	7afa      	ldrb	r2, [r7, #11]
    569c:	68f9      	ldr	r1, [r7, #12]
    569e:	4613      	mov	r3, r2
    56a0:	009b      	lsls	r3, r3, #2
    56a2:	4413      	add	r3, r2
    56a4:	009b      	lsls	r3, r3, #2
    56a6:	440b      	add	r3, r1
    56a8:	3334      	adds	r3, #52	; 0x34
    56aa:	687a      	ldr	r2, [r7, #4]
    56ac:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    56ae:	7afb      	ldrb	r3, [r7, #11]
    56b0:	2206      	movs	r2, #6
    56b2:	4619      	mov	r1, r3
    56b4:	68f8      	ldr	r0, [r7, #12]
    56b6:	4b03      	ldr	r3, [pc, #12]	; (56c4 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    56b8:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    56ba:	bf00      	nop
    56bc:	3710      	adds	r7, #16
    56be:	46bd      	mov	sp, r7
    56c0:	bd80      	pop	{r7, pc}
    56c2:	bf00      	nop
    56c4:	000055a7 	.word	0x000055a7

000056c8 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    56c8:	b480      	push	{r7}
    56ca:	b085      	sub	sp, #20
    56cc:	af00      	add	r7, sp, #0
    56ce:	60f8      	str	r0, [r7, #12]
    56d0:	460b      	mov	r3, r1
    56d2:	607a      	str	r2, [r7, #4]
    56d4:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    56d6:	7afa      	ldrb	r2, [r7, #11]
    56d8:	68f9      	ldr	r1, [r7, #12]
    56da:	4613      	mov	r3, r2
    56dc:	009b      	lsls	r3, r3, #2
    56de:	4413      	add	r3, r2
    56e0:	009b      	lsls	r3, r3, #2
    56e2:	440b      	add	r3, r1
    56e4:	3338      	adds	r3, #56	; 0x38
    56e6:	687a      	ldr	r2, [r7, #4]
    56e8:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    56ea:	bf00      	nop
    56ec:	3714      	adds	r7, #20
    56ee:	46bd      	mov	sp, r7
    56f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    56f4:	4770      	bx	lr

000056f6 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    56f6:	b480      	push	{r7}
    56f8:	b083      	sub	sp, #12
    56fa:	af00      	add	r7, sp, #0
    56fc:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    56fe:	687b      	ldr	r3, [r7, #4]
    5700:	691b      	ldr	r3, [r3, #16]
    5702:	085b      	lsrs	r3, r3, #1
    5704:	f003 0301 	and.w	r3, r3, #1
    5708:	2b00      	cmp	r3, #0
    570a:	bf14      	ite	ne
    570c:	2301      	movne	r3, #1
    570e:	2300      	moveq	r3, #0
    5710:	b2db      	uxtb	r3, r3
}
    5712:	4618      	mov	r0, r3
    5714:	370c      	adds	r7, #12
    5716:	46bd      	mov	sp, r7
    5718:	f85d 7b04 	ldr.w	r7, [sp], #4
    571c:	4770      	bx	lr

0000571e <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    571e:	b480      	push	{r7}
    5720:	b083      	sub	sp, #12
    5722:	af00      	add	r7, sp, #0
    5724:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    5726:	687b      	ldr	r3, [r7, #4]
    5728:	691b      	ldr	r3, [r3, #16]
    572a:	0a1b      	lsrs	r3, r3, #8
    572c:	f003 0301 	and.w	r3, r3, #1
    5730:	2b00      	cmp	r3, #0
    5732:	bf14      	ite	ne
    5734:	2301      	movne	r3, #1
    5736:	2300      	moveq	r3, #0
    5738:	b2db      	uxtb	r3, r3
}
    573a:	4618      	mov	r0, r3
    573c:	370c      	adds	r7, #12
    573e:	46bd      	mov	sp, r7
    5740:	f85d 7b04 	ldr.w	r7, [sp], #4
    5744:	4770      	bx	lr

00005746 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    5746:	b480      	push	{r7}
    5748:	b085      	sub	sp, #20
    574a:	af00      	add	r7, sp, #0
    574c:	6078      	str	r0, [r7, #4]
    574e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5750:	687b      	ldr	r3, [r7, #4]
    5752:	691b      	ldr	r3, [r3, #16]
    5754:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5756:	68fa      	ldr	r2, [r7, #12]
    5758:	683b      	ldr	r3, [r7, #0]
    575a:	4013      	ands	r3, r2
    575c:	60fb      	str	r3, [r7, #12]
	return tmp;
    575e:	68fb      	ldr	r3, [r7, #12]
}
    5760:	4618      	mov	r0, r3
    5762:	3714      	adds	r7, #20
    5764:	46bd      	mov	sp, r7
    5766:	f85d 7b04 	ldr.w	r7, [sp], #4
    576a:	4770      	bx	lr

0000576c <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    576c:	b480      	push	{r7}
    576e:	b085      	sub	sp, #20
    5770:	af00      	add	r7, sp, #0
    5772:	60f8      	str	r0, [r7, #12]
    5774:	460b      	mov	r3, r1
    5776:	607a      	str	r2, [r7, #4]
    5778:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    577a:	7afb      	ldrb	r3, [r7, #11]
    577c:	68fa      	ldr	r2, [r7, #12]
    577e:	3304      	adds	r3, #4
    5780:	009b      	lsls	r3, r3, #2
    5782:	4413      	add	r3, r2
    5784:	687a      	ldr	r2, [r7, #4]
    5786:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5788:	bf00      	nop
    578a:	3714      	adds	r7, #20
    578c:	46bd      	mov	sp, r7
    578e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5792:	4770      	bx	lr

00005794 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    5794:	b480      	push	{r7}
    5796:	b083      	sub	sp, #12
    5798:	af00      	add	r7, sp, #0
    579a:	6078      	str	r0, [r7, #4]
    579c:	460b      	mov	r3, r1
    579e:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    57a0:	687b      	ldr	r3, [r7, #4]
    57a2:	78fa      	ldrb	r2, [r7, #3]
    57a4:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    57a6:	bf00      	nop
    57a8:	370c      	adds	r7, #12
    57aa:	46bd      	mov	sp, r7
    57ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    57b0:	4770      	bx	lr

000057b2 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    57b2:	b480      	push	{r7}
    57b4:	b085      	sub	sp, #20
    57b6:	af00      	add	r7, sp, #0
    57b8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    57ba:	687b      	ldr	r3, [r7, #4]
    57bc:	f893 3020 	ldrb.w	r3, [r3, #32]
    57c0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    57c2:	7bfb      	ldrb	r3, [r7, #15]
    57c4:	f003 0301 	and.w	r3, r3, #1
    57c8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    57ca:	7bfb      	ldrb	r3, [r7, #15]
    57cc:	2b00      	cmp	r3, #0
    57ce:	bf14      	ite	ne
    57d0:	2301      	movne	r3, #1
    57d2:	2300      	moveq	r3, #0
    57d4:	b2db      	uxtb	r3, r3
}
    57d6:	4618      	mov	r0, r3
    57d8:	3714      	adds	r7, #20
    57da:	46bd      	mov	sp, r7
    57dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    57e0:	4770      	bx	lr

000057e2 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    57e2:	b480      	push	{r7}
    57e4:	b083      	sub	sp, #12
    57e6:	af00      	add	r7, sp, #0
    57e8:	6078      	str	r0, [r7, #4]
    57ea:	460b      	mov	r3, r1
    57ec:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    57ee:	687b      	ldr	r3, [r7, #4]
    57f0:	78fa      	ldrb	r2, [r7, #3]
    57f2:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    57f6:	bf00      	nop
    57f8:	370c      	adds	r7, #12
    57fa:	46bd      	mov	sp, r7
    57fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5800:	4770      	bx	lr

00005802 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    5802:	b480      	push	{r7}
    5804:	b083      	sub	sp, #12
    5806:	af00      	add	r7, sp, #0
    5808:	6078      	str	r0, [r7, #4]
    580a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    580c:	687b      	ldr	r3, [r7, #4]
    580e:	683a      	ldr	r2, [r7, #0]
    5810:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5812:	bf00      	nop
    5814:	370c      	adds	r7, #12
    5816:	46bd      	mov	sp, r7
    5818:	f85d 7b04 	ldr.w	r7, [sp], #4
    581c:	4770      	bx	lr

0000581e <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    581e:	b480      	push	{r7}
    5820:	b083      	sub	sp, #12
    5822:	af00      	add	r7, sp, #0
    5824:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    5826:	687b      	ldr	r3, [r7, #4]
    5828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    582a:	4618      	mov	r0, r3
    582c:	370c      	adds	r7, #12
    582e:	46bd      	mov	sp, r7
    5830:	f85d 7b04 	ldr.w	r7, [sp], #4
    5834:	4770      	bx	lr

00005836 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    5836:	b480      	push	{r7}
    5838:	b083      	sub	sp, #12
    583a:	af00      	add	r7, sp, #0
    583c:	6078      	str	r0, [r7, #4]
    583e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5840:	687b      	ldr	r3, [r7, #4]
    5842:	683a      	ldr	r2, [r7, #0]
    5844:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5846:	bf00      	nop
    5848:	370c      	adds	r7, #12
    584a:	46bd      	mov	sp, r7
    584c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5850:	4770      	bx	lr

00005852 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    5852:	b480      	push	{r7}
    5854:	b085      	sub	sp, #20
    5856:	af00      	add	r7, sp, #0
    5858:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    585a:	687b      	ldr	r3, [r7, #4]
    585c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5860:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    5862:	7bfb      	ldrb	r3, [r7, #15]
    5864:	085b      	lsrs	r3, r3, #1
    5866:	b2db      	uxtb	r3, r3
    5868:	f003 0301 	and.w	r3, r3, #1
    586c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    586e:	7bfb      	ldrb	r3, [r7, #15]
    5870:	2b00      	cmp	r3, #0
    5872:	bf14      	ite	ne
    5874:	2301      	movne	r3, #1
    5876:	2300      	moveq	r3, #0
    5878:	b2db      	uxtb	r3, r3
}
    587a:	4618      	mov	r0, r3
    587c:	3714      	adds	r7, #20
    587e:	46bd      	mov	sp, r7
    5880:	f85d 7b04 	ldr.w	r7, [sp], #4
    5884:	4770      	bx	lr

00005886 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    5886:	b480      	push	{r7}
    5888:	b085      	sub	sp, #20
    588a:	af00      	add	r7, sp, #0
    588c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    588e:	687b      	ldr	r3, [r7, #4]
    5890:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5894:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    5896:	7bfb      	ldrb	r3, [r7, #15]
    5898:	089b      	lsrs	r3, r3, #2
    589a:	b2db      	uxtb	r3, r3
    589c:	f003 0301 	and.w	r3, r3, #1
    58a0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    58a2:	7bfb      	ldrb	r3, [r7, #15]
    58a4:	2b00      	cmp	r3, #0
    58a6:	bf14      	ite	ne
    58a8:	2301      	movne	r3, #1
    58aa:	2300      	moveq	r3, #0
    58ac:	b2db      	uxtb	r3, r3
}
    58ae:	4618      	mov	r0, r3
    58b0:	3714      	adds	r7, #20
    58b2:	46bd      	mov	sp, r7
    58b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    58b8:	4770      	bx	lr

000058ba <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    58ba:	b480      	push	{r7}
    58bc:	b085      	sub	sp, #20
    58be:	af00      	add	r7, sp, #0
    58c0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    58c2:	687b      	ldr	r3, [r7, #4]
    58c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    58c8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    58ca:	7bfb      	ldrb	r3, [r7, #15]
    58cc:	08db      	lsrs	r3, r3, #3
    58ce:	b2db      	uxtb	r3, r3
    58d0:	f003 0301 	and.w	r3, r3, #1
    58d4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    58d6:	7bfb      	ldrb	r3, [r7, #15]
    58d8:	2b00      	cmp	r3, #0
    58da:	bf14      	ite	ne
    58dc:	2301      	movne	r3, #1
    58de:	2300      	moveq	r3, #0
    58e0:	b2db      	uxtb	r3, r3
}
    58e2:	4618      	mov	r0, r3
    58e4:	3714      	adds	r7, #20
    58e6:	46bd      	mov	sp, r7
    58e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    58ec:	4770      	bx	lr

000058ee <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    58ee:	b480      	push	{r7}
    58f0:	b085      	sub	sp, #20
    58f2:	af00      	add	r7, sp, #0
    58f4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    58f6:	687b      	ldr	r3, [r7, #4]
    58f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    58fc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    58fe:	7bfb      	ldrb	r3, [r7, #15]
    5900:	091b      	lsrs	r3, r3, #4
    5902:	b2db      	uxtb	r3, r3
    5904:	f003 0301 	and.w	r3, r3, #1
    5908:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    590a:	7bfb      	ldrb	r3, [r7, #15]
    590c:	2b00      	cmp	r3, #0
    590e:	bf14      	ite	ne
    5910:	2301      	movne	r3, #1
    5912:	2300      	moveq	r3, #0
    5914:	b2db      	uxtb	r3, r3
}
    5916:	4618      	mov	r0, r3
    5918:	3714      	adds	r7, #20
    591a:	46bd      	mov	sp, r7
    591c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5920:	4770      	bx	lr
	...

00005924 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5924:	b580      	push	{r7, lr}
    5926:	b082      	sub	sp, #8
    5928:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    592a:	4b0a      	ldr	r3, [pc, #40]	; (5954 <_oscctrl_init_sources+0x30>)
    592c:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    592e:	4a0a      	ldr	r2, [pc, #40]	; (5958 <_oscctrl_init_sources+0x34>)
    5930:	2101      	movs	r1, #1
    5932:	6878      	ldr	r0, [r7, #4]
    5934:	4b09      	ldr	r3, [pc, #36]	; (595c <_oscctrl_init_sources+0x38>)
    5936:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5938:	bf00      	nop
    593a:	6878      	ldr	r0, [r7, #4]
    593c:	4b08      	ldr	r3, [pc, #32]	; (5960 <_oscctrl_init_sources+0x3c>)
    593e:	4798      	blx	r3
    5940:	4603      	mov	r3, r0
    5942:	f083 0301 	eor.w	r3, r3, #1
    5946:	b2db      	uxtb	r3, r3
    5948:	2b00      	cmp	r3, #0
    594a:	d1f6      	bne.n	593a <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    594c:	bf00      	nop
    594e:	3708      	adds	r7, #8
    5950:	46bd      	mov	sp, r7
    5952:	bd80      	pop	{r7, pc}
    5954:	40001000 	.word	0x40001000
    5958:	03002646 	.word	0x03002646
    595c:	0000576d 	.word	0x0000576d
    5960:	000056f7 	.word	0x000056f7

00005964 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    5964:	b580      	push	{r7, lr}
    5966:	b084      	sub	sp, #16
    5968:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    596a:	4b6b      	ldr	r3, [pc, #428]	; (5b18 <_oscctrl_init_referenced_generators+0x1b4>)
    596c:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    596e:	2204      	movs	r2, #4
    5970:	2100      	movs	r1, #0
    5972:	486a      	ldr	r0, [pc, #424]	; (5b1c <_oscctrl_init_referenced_generators+0x1b8>)
    5974:	4b6a      	ldr	r3, [pc, #424]	; (5b20 <_oscctrl_init_referenced_generators+0x1bc>)
    5976:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5978:	bf00      	nop
    597a:	4868      	ldr	r0, [pc, #416]	; (5b1c <_oscctrl_init_referenced_generators+0x1b8>)
    597c:	4b69      	ldr	r3, [pc, #420]	; (5b24 <_oscctrl_init_referenced_generators+0x1c0>)
    597e:	4798      	blx	r3
    5980:	4603      	mov	r3, r0
    5982:	2b00      	cmp	r3, #0
    5984:	d1f9      	bne.n	597a <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    5986:	2100      	movs	r1, #0
    5988:	68f8      	ldr	r0, [r7, #12]
    598a:	4b67      	ldr	r3, [pc, #412]	; (5b28 <_oscctrl_init_referenced_generators+0x1c4>)
    598c:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    598e:	4967      	ldr	r1, [pc, #412]	; (5b2c <_oscctrl_init_referenced_generators+0x1c8>)
    5990:	68f8      	ldr	r0, [r7, #12]
    5992:	4b67      	ldr	r3, [pc, #412]	; (5b30 <_oscctrl_init_referenced_generators+0x1cc>)
    5994:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    5996:	bf00      	nop
    5998:	68f8      	ldr	r0, [r7, #12]
    599a:	4b66      	ldr	r3, [pc, #408]	; (5b34 <_oscctrl_init_referenced_generators+0x1d0>)
    599c:	4798      	blx	r3
    599e:	4603      	mov	r3, r0
    59a0:	2b00      	cmp	r3, #0
    59a2:	d1f9      	bne.n	5998 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    59a4:	2100      	movs	r1, #0
    59a6:	68f8      	ldr	r0, [r7, #12]
    59a8:	4b63      	ldr	r3, [pc, #396]	; (5b38 <_oscctrl_init_referenced_generators+0x1d4>)
    59aa:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    59ac:	bf00      	nop
    59ae:	68f8      	ldr	r0, [r7, #12]
    59b0:	4b62      	ldr	r3, [pc, #392]	; (5b3c <_oscctrl_init_referenced_generators+0x1d8>)
    59b2:	4798      	blx	r3
    59b4:	4603      	mov	r3, r0
    59b6:	2b00      	cmp	r3, #0
    59b8:	d1f9      	bne.n	59ae <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    59ba:	2302      	movs	r3, #2
    59bc:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    59be:	7afb      	ldrb	r3, [r7, #11]
    59c0:	4619      	mov	r1, r3
    59c2:	68f8      	ldr	r0, [r7, #12]
    59c4:	4b58      	ldr	r3, [pc, #352]	; (5b28 <_oscctrl_init_referenced_generators+0x1c4>)
    59c6:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    59c8:	bf00      	nop
    59ca:	68f8      	ldr	r0, [r7, #12]
    59cc:	4b5c      	ldr	r3, [pc, #368]	; (5b40 <_oscctrl_init_referenced_generators+0x1dc>)
    59ce:	4798      	blx	r3
    59d0:	4603      	mov	r3, r0
    59d2:	2b00      	cmp	r3, #0
    59d4:	d1f9      	bne.n	59ca <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    59d6:	68f8      	ldr	r0, [r7, #12]
    59d8:	4b5a      	ldr	r3, [pc, #360]	; (5b44 <_oscctrl_init_referenced_generators+0x1e0>)
    59da:	4798      	blx	r3
    59dc:	4603      	mov	r3, r0
    59de:	4619      	mov	r1, r3
    59e0:	68f8      	ldr	r0, [r7, #12]
    59e2:	4b59      	ldr	r3, [pc, #356]	; (5b48 <_oscctrl_init_referenced_generators+0x1e4>)
    59e4:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    59e6:	bf00      	nop
    59e8:	68f8      	ldr	r0, [r7, #12]
    59ea:	4b58      	ldr	r3, [pc, #352]	; (5b4c <_oscctrl_init_referenced_generators+0x1e8>)
    59ec:	4798      	blx	r3
    59ee:	4603      	mov	r3, r0
    59f0:	2b00      	cmp	r3, #0
    59f2:	d1f9      	bne.n	59e8 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    59f4:	2319      	movs	r3, #25
    59f6:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    59f8:	7afb      	ldrb	r3, [r7, #11]
    59fa:	4619      	mov	r1, r3
    59fc:	68f8      	ldr	r0, [r7, #12]
    59fe:	4b4e      	ldr	r3, [pc, #312]	; (5b38 <_oscctrl_init_referenced_generators+0x1d4>)
    5a00:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5a02:	bf00      	nop
    5a04:	68f8      	ldr	r0, [r7, #12]
    5a06:	4b4d      	ldr	r3, [pc, #308]	; (5b3c <_oscctrl_init_referenced_generators+0x1d8>)
    5a08:	4798      	blx	r3
    5a0a:	4603      	mov	r3, r0
    5a0c:	2b00      	cmp	r3, #0
    5a0e:	d1f9      	bne.n	5a04 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5a10:	2245      	movs	r2, #69	; 0x45
    5a12:	2101      	movs	r1, #1
    5a14:	4841      	ldr	r0, [pc, #260]	; (5b1c <_oscctrl_init_referenced_generators+0x1b8>)
    5a16:	4b4e      	ldr	r3, [pc, #312]	; (5b50 <_oscctrl_init_referenced_generators+0x1ec>)
    5a18:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5a1a:	223b      	movs	r2, #59	; 0x3b
    5a1c:	2100      	movs	r1, #0
    5a1e:	68f8      	ldr	r0, [r7, #12]
    5a20:	4b4c      	ldr	r3, [pc, #304]	; (5b54 <_oscctrl_init_referenced_generators+0x1f0>)
    5a22:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5a24:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5a28:	2100      	movs	r1, #0
    5a2a:	68f8      	ldr	r0, [r7, #12]
    5a2c:	4b4a      	ldr	r3, [pc, #296]	; (5b58 <_oscctrl_init_referenced_generators+0x1f4>)
    5a2e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5a30:	2242      	movs	r2, #66	; 0x42
    5a32:	2100      	movs	r1, #0
    5a34:	68f8      	ldr	r0, [r7, #12]
    5a36:	4b49      	ldr	r3, [pc, #292]	; (5b5c <_oscctrl_init_referenced_generators+0x1f8>)
    5a38:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5a3a:	4a49      	ldr	r2, [pc, #292]	; (5b60 <_oscctrl_init_referenced_generators+0x1fc>)
    5a3c:	2101      	movs	r1, #1
    5a3e:	68f8      	ldr	r0, [r7, #12]
    5a40:	4b44      	ldr	r3, [pc, #272]	; (5b54 <_oscctrl_init_referenced_generators+0x1f0>)
    5a42:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5a44:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5a48:	2101      	movs	r1, #1
    5a4a:	68f8      	ldr	r0, [r7, #12]
    5a4c:	4b42      	ldr	r3, [pc, #264]	; (5b58 <_oscctrl_init_referenced_generators+0x1f4>)
    5a4e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5a50:	2202      	movs	r2, #2
    5a52:	2101      	movs	r1, #1
    5a54:	68f8      	ldr	r0, [r7, #12]
    5a56:	4b41      	ldr	r3, [pc, #260]	; (5b5c <_oscctrl_init_referenced_generators+0x1f8>)
    5a58:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    5a5a:	68f8      	ldr	r0, [r7, #12]
    5a5c:	4b41      	ldr	r3, [pc, #260]	; (5b64 <_oscctrl_init_referenced_generators+0x200>)
    5a5e:	4798      	blx	r3
    5a60:	4603      	mov	r3, r0
    5a62:	2b00      	cmp	r3, #0
    5a64:	d00c      	beq.n	5a80 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    5a66:	f44f 6310 	mov.w	r3, #2304	; 0x900
    5a6a:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    5a6c:	bf00      	nop
    5a6e:	6879      	ldr	r1, [r7, #4]
    5a70:	68f8      	ldr	r0, [r7, #12]
    5a72:	4b3d      	ldr	r3, [pc, #244]	; (5b68 <_oscctrl_init_referenced_generators+0x204>)
    5a74:	4798      	blx	r3
    5a76:	4602      	mov	r2, r0
    5a78:	687b      	ldr	r3, [r7, #4]
    5a7a:	429a      	cmp	r2, r3
    5a7c:	d1f7      	bne.n	5a6e <_oscctrl_init_referenced_generators+0x10a>
    5a7e:	e009      	b.n	5a94 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5a80:	bf00      	nop
    5a82:	68f8      	ldr	r0, [r7, #12]
    5a84:	4b39      	ldr	r3, [pc, #228]	; (5b6c <_oscctrl_init_referenced_generators+0x208>)
    5a86:	4798      	blx	r3
    5a88:	4603      	mov	r3, r0
    5a8a:	f083 0301 	eor.w	r3, r3, #1
    5a8e:	b2db      	uxtb	r3, r3
    5a90:	2b00      	cmp	r3, #0
    5a92:	d1f6      	bne.n	5a82 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    5a94:	bf00      	nop
    5a96:	2100      	movs	r1, #0
    5a98:	68f8      	ldr	r0, [r7, #12]
    5a9a:	4b35      	ldr	r3, [pc, #212]	; (5b70 <_oscctrl_init_referenced_generators+0x20c>)
    5a9c:	4798      	blx	r3
    5a9e:	4603      	mov	r3, r0
    5aa0:	f083 0301 	eor.w	r3, r3, #1
    5aa4:	b2db      	uxtb	r3, r3
    5aa6:	2b00      	cmp	r3, #0
    5aa8:	d009      	beq.n	5abe <_oscctrl_init_referenced_generators+0x15a>
    5aaa:	2100      	movs	r1, #0
    5aac:	68f8      	ldr	r0, [r7, #12]
    5aae:	4b31      	ldr	r3, [pc, #196]	; (5b74 <_oscctrl_init_referenced_generators+0x210>)
    5ab0:	4798      	blx	r3
    5ab2:	4603      	mov	r3, r0
    5ab4:	f083 0301 	eor.w	r3, r3, #1
    5ab8:	b2db      	uxtb	r3, r3
    5aba:	2b00      	cmp	r3, #0
    5abc:	d1eb      	bne.n	5a96 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5abe:	bf00      	nop
    5ac0:	2101      	movs	r1, #1
    5ac2:	68f8      	ldr	r0, [r7, #12]
    5ac4:	4b2a      	ldr	r3, [pc, #168]	; (5b70 <_oscctrl_init_referenced_generators+0x20c>)
    5ac6:	4798      	blx	r3
    5ac8:	4603      	mov	r3, r0
    5aca:	f083 0301 	eor.w	r3, r3, #1
    5ace:	b2db      	uxtb	r3, r3
    5ad0:	2b00      	cmp	r3, #0
    5ad2:	d009      	beq.n	5ae8 <_oscctrl_init_referenced_generators+0x184>
    5ad4:	2101      	movs	r1, #1
    5ad6:	68f8      	ldr	r0, [r7, #12]
    5ad8:	4b26      	ldr	r3, [pc, #152]	; (5b74 <_oscctrl_init_referenced_generators+0x210>)
    5ada:	4798      	blx	r3
    5adc:	4603      	mov	r3, r0
    5ade:	f083 0301 	eor.w	r3, r3, #1
    5ae2:	b2db      	uxtb	r3, r3
    5ae4:	2b00      	cmp	r3, #0
    5ae6:	d1eb      	bne.n	5ac0 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5ae8:	bf00      	nop
    5aea:	480c      	ldr	r0, [pc, #48]	; (5b1c <_oscctrl_init_referenced_generators+0x1b8>)
    5aec:	4b22      	ldr	r3, [pc, #136]	; (5b78 <_oscctrl_init_referenced_generators+0x214>)
    5aee:	4798      	blx	r3
    5af0:	4603      	mov	r3, r0
    5af2:	2b00      	cmp	r3, #0
    5af4:	d1f9      	bne.n	5aea <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5af6:	2207      	movs	r2, #7
    5af8:	2100      	movs	r1, #0
    5afa:	4808      	ldr	r0, [pc, #32]	; (5b1c <_oscctrl_init_referenced_generators+0x1b8>)
    5afc:	4b08      	ldr	r3, [pc, #32]	; (5b20 <_oscctrl_init_referenced_generators+0x1bc>)
    5afe:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5b00:	bf00      	nop
    5b02:	4806      	ldr	r0, [pc, #24]	; (5b1c <_oscctrl_init_referenced_generators+0x1b8>)
    5b04:	4b07      	ldr	r3, [pc, #28]	; (5b24 <_oscctrl_init_referenced_generators+0x1c0>)
    5b06:	4798      	blx	r3
    5b08:	4603      	mov	r3, r0
    5b0a:	2b00      	cmp	r3, #0
    5b0c:	d1f9      	bne.n	5b02 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    5b0e:	bf00      	nop
    5b10:	3710      	adds	r7, #16
    5b12:	46bd      	mov	sp, r7
    5b14:	bd80      	pop	{r7, pc}
    5b16:	bf00      	nop
    5b18:	40001000 	.word	0x40001000
    5b1c:	40001c00 	.word	0x40001c00
    5b20:	00005531 	.word	0x00005531
    5b24:	000054f1 	.word	0x000054f1
    5b28:	00005795 	.word	0x00005795
    5b2c:	0401bb80 	.word	0x0401bb80
    5b30:	00005837 	.word	0x00005837
    5b34:	000058ef 	.word	0x000058ef
    5b38:	000057e3 	.word	0x000057e3
    5b3c:	00005887 	.word	0x00005887
    5b40:	00005853 	.word	0x00005853
    5b44:	0000581f 	.word	0x0000581f
    5b48:	00005803 	.word	0x00005803
    5b4c:	000058bb 	.word	0x000058bb
    5b50:	00005581 	.word	0x00005581
    5b54:	0000568d 	.word	0x0000568d
    5b58:	000056c9 	.word	0x000056c9
    5b5c:	00005651 	.word	0x00005651
    5b60:	000407a0 	.word	0x000407a0
    5b64:	000057b3 	.word	0x000057b3
    5b68:	00005747 	.word	0x00005747
    5b6c:	0000571f 	.word	0x0000571f
    5b70:	000055dd 	.word	0x000055dd
    5b74:	00005615 	.word	0x00005615
    5b78:	00005519 	.word	0x00005519

00005b7c <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    5b7c:	b480      	push	{r7}
    5b7e:	b083      	sub	sp, #12
    5b80:	af00      	add	r7, sp, #0
    5b82:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    5b84:	687b      	ldr	r3, [r7, #4]
    5b86:	69db      	ldr	r3, [r3, #28]
    5b88:	0a9b      	lsrs	r3, r3, #10
    5b8a:	f003 0301 	and.w	r3, r3, #1
    5b8e:	2b00      	cmp	r3, #0
    5b90:	bf14      	ite	ne
    5b92:	2301      	movne	r3, #1
    5b94:	2300      	moveq	r3, #0
    5b96:	b2db      	uxtb	r3, r3
}
    5b98:	4618      	mov	r0, r3
    5b9a:	370c      	adds	r7, #12
    5b9c:	46bd      	mov	sp, r7
    5b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ba2:	4770      	bx	lr

00005ba4 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5ba4:	b480      	push	{r7}
    5ba6:	b083      	sub	sp, #12
    5ba8:	af00      	add	r7, sp, #0
    5baa:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5bac:	687b      	ldr	r3, [r7, #4]
    5bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5bb2:	61da      	str	r2, [r3, #28]
}
    5bb4:	bf00      	nop
    5bb6:	370c      	adds	r7, #12
    5bb8:	46bd      	mov	sp, r7
    5bba:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bbe:	4770      	bx	lr

00005bc0 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5bc0:	b480      	push	{r7}
    5bc2:	b083      	sub	sp, #12
    5bc4:	af00      	add	r7, sp, #0
    5bc6:	6078      	str	r0, [r7, #4]
    5bc8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    5bca:	687b      	ldr	r3, [r7, #4]
    5bcc:	683a      	ldr	r2, [r7, #0]
    5bce:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5bd0:	bf00      	nop
    5bd2:	370c      	adds	r7, #12
    5bd4:	46bd      	mov	sp, r7
    5bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bda:	4770      	bx	lr

00005bdc <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5bdc:	b480      	push	{r7}
    5bde:	b083      	sub	sp, #12
    5be0:	af00      	add	r7, sp, #0
    5be2:	6078      	str	r0, [r7, #4]
    5be4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5be6:	687b      	ldr	r3, [r7, #4]
    5be8:	683a      	ldr	r2, [r7, #0]
    5bea:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5bec:	bf00      	nop
    5bee:	370c      	adds	r7, #12
    5bf0:	46bd      	mov	sp, r7
    5bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bf6:	4770      	bx	lr

00005bf8 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5bf8:	b480      	push	{r7}
    5bfa:	b083      	sub	sp, #12
    5bfc:	af00      	add	r7, sp, #0
    5bfe:	6078      	str	r0, [r7, #4]
    5c00:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5c02:	687b      	ldr	r3, [r7, #4]
    5c04:	683a      	ldr	r2, [r7, #0]
    5c06:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5c08:	bf00      	nop
    5c0a:	370c      	adds	r7, #12
    5c0c:	46bd      	mov	sp, r7
    5c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c12:	4770      	bx	lr

00005c14 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5c14:	b480      	push	{r7}
    5c16:	b083      	sub	sp, #12
    5c18:	af00      	add	r7, sp, #0
    5c1a:	6078      	str	r0, [r7, #4]
    5c1c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    5c1e:	687b      	ldr	r3, [r7, #4]
    5c20:	683a      	ldr	r2, [r7, #0]
    5c22:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5c24:	bf00      	nop
    5c26:	370c      	adds	r7, #12
    5c28:	46bd      	mov	sp, r7
    5c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c2e:	4770      	bx	lr

00005c30 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5c30:	b480      	push	{r7}
    5c32:	b085      	sub	sp, #20
    5c34:	af00      	add	r7, sp, #0
    5c36:	6078      	str	r0, [r7, #4]
    5c38:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5c3a:	687b      	ldr	r3, [r7, #4]
    5c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5c3e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5c40:	68fb      	ldr	r3, [r7, #12]
    5c42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5c46:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5c48:	683b      	ldr	r3, [r7, #0]
    5c4a:	b2db      	uxtb	r3, r3
    5c4c:	68fa      	ldr	r2, [r7, #12]
    5c4e:	4313      	orrs	r3, r2
    5c50:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5c52:	687b      	ldr	r3, [r7, #4]
    5c54:	68fa      	ldr	r2, [r7, #12]
    5c56:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5c58:	bf00      	nop
    5c5a:	3714      	adds	r7, #20
    5c5c:	46bd      	mov	sp, r7
    5c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c62:	4770      	bx	lr

00005c64 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5c64:	b480      	push	{r7}
    5c66:	b085      	sub	sp, #20
    5c68:	af00      	add	r7, sp, #0
    5c6a:	6078      	str	r0, [r7, #4]
    5c6c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5c6e:	687b      	ldr	r3, [r7, #4]
    5c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5c72:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    5c74:	68fb      	ldr	r3, [r7, #12]
    5c76:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    5c7a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    5c7c:	683b      	ldr	r3, [r7, #0]
    5c7e:	041b      	lsls	r3, r3, #16
    5c80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    5c84:	68fa      	ldr	r2, [r7, #12]
    5c86:	4313      	orrs	r3, r2
    5c88:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5c8a:	687b      	ldr	r3, [r7, #4]
    5c8c:	68fa      	ldr	r2, [r7, #12]
    5c8e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5c90:	bf00      	nop
    5c92:	3714      	adds	r7, #20
    5c94:	46bd      	mov	sp, r7
    5c96:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c9a:	4770      	bx	lr

00005c9c <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    5c9c:	b480      	push	{r7}
    5c9e:	b083      	sub	sp, #12
    5ca0:	af00      	add	r7, sp, #0
    5ca2:	6078      	str	r0, [r7, #4]
    5ca4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    5ca6:	687b      	ldr	r3, [r7, #4]
    5ca8:	683a      	ldr	r2, [r7, #0]
    5caa:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5cac:	bf00      	nop
    5cae:	370c      	adds	r7, #12
    5cb0:	46bd      	mov	sp, r7
    5cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cb6:	4770      	bx	lr

00005cb8 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5cb8:	b480      	push	{r7}
    5cba:	b083      	sub	sp, #12
    5cbc:	af00      	add	r7, sp, #0
    5cbe:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5cc0:	687b      	ldr	r3, [r7, #4]
    5cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5cc4:	4618      	mov	r0, r3
    5cc6:	370c      	adds	r7, #12
    5cc8:	46bd      	mov	sp, r7
    5cca:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cce:	4770      	bx	lr

00005cd0 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5cd0:	b480      	push	{r7}
    5cd2:	b085      	sub	sp, #20
    5cd4:	af00      	add	r7, sp, #0
    5cd6:	60f8      	str	r0, [r7, #12]
    5cd8:	60b9      	str	r1, [r7, #8]
    5cda:	607a      	str	r2, [r7, #4]
	while (count--) {
    5cdc:	e007      	b.n	5cee <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    5cde:	68fb      	ldr	r3, [r7, #12]
    5ce0:	1c5a      	adds	r2, r3, #1
    5ce2:	60fa      	str	r2, [r7, #12]
    5ce4:	68ba      	ldr	r2, [r7, #8]
    5ce6:	1c51      	adds	r1, r2, #1
    5ce8:	60b9      	str	r1, [r7, #8]
    5cea:	7812      	ldrb	r2, [r2, #0]
    5cec:	701a      	strb	r2, [r3, #0]
	while (count--) {
    5cee:	687b      	ldr	r3, [r7, #4]
    5cf0:	1e5a      	subs	r2, r3, #1
    5cf2:	607a      	str	r2, [r7, #4]
    5cf4:	2b00      	cmp	r3, #0
    5cf6:	d1f2      	bne.n	5cde <_qspi_memcpy+0xe>
	}
}
    5cf8:	bf00      	nop
    5cfa:	3714      	adds	r7, #20
    5cfc:	46bd      	mov	sp, r7
    5cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d02:	4770      	bx	lr

00005d04 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5d04:	b580      	push	{r7, lr}
    5d06:	b082      	sub	sp, #8
    5d08:	af00      	add	r7, sp, #0
    5d0a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5d0c:	4903      	ldr	r1, [pc, #12]	; (5d1c <_qspi_end_transfer+0x18>)
    5d0e:	6878      	ldr	r0, [r7, #4]
    5d10:	4b03      	ldr	r3, [pc, #12]	; (5d20 <_qspi_end_transfer+0x1c>)
    5d12:	4798      	blx	r3
}
    5d14:	bf00      	nop
    5d16:	3708      	adds	r7, #8
    5d18:	46bd      	mov	sp, r7
    5d1a:	bd80      	pop	{r7, pc}
    5d1c:	01000002 	.word	0x01000002
    5d20:	00005bc1 	.word	0x00005bc1

00005d24 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5d24:	b580      	push	{r7, lr}
    5d26:	b082      	sub	sp, #8
    5d28:	af00      	add	r7, sp, #0
    5d2a:	6078      	str	r0, [r7, #4]
    5d2c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    5d2e:	687b      	ldr	r3, [r7, #4]
    5d30:	2b00      	cmp	r3, #0
    5d32:	d004      	beq.n	5d3e <_qspi_sync_init+0x1a>
    5d34:	683b      	ldr	r3, [r7, #0]
    5d36:	2b00      	cmp	r3, #0
    5d38:	d001      	beq.n	5d3e <_qspi_sync_init+0x1a>
    5d3a:	2301      	movs	r3, #1
    5d3c:	e000      	b.n	5d40 <_qspi_sync_init+0x1c>
    5d3e:	2300      	movs	r3, #0
    5d40:	f003 0301 	and.w	r3, r3, #1
    5d44:	b2db      	uxtb	r3, r3
    5d46:	2240      	movs	r2, #64	; 0x40
    5d48:	490c      	ldr	r1, [pc, #48]	; (5d7c <_qspi_sync_init+0x58>)
    5d4a:	4618      	mov	r0, r3
    5d4c:	4b0c      	ldr	r3, [pc, #48]	; (5d80 <_qspi_sync_init+0x5c>)
    5d4e:	4798      	blx	r3
	dev->prvt = hw;
    5d50:	687b      	ldr	r3, [r7, #4]
    5d52:	683a      	ldr	r2, [r7, #0]
    5d54:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    5d56:	687b      	ldr	r3, [r7, #4]
    5d58:	681b      	ldr	r3, [r3, #0]
    5d5a:	2101      	movs	r1, #1
    5d5c:	4618      	mov	r0, r3
    5d5e:	4b09      	ldr	r3, [pc, #36]	; (5d84 <_qspi_sync_init+0x60>)
    5d60:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    5d62:	4909      	ldr	r1, [pc, #36]	; (5d88 <_qspi_sync_init+0x64>)
    5d64:	6838      	ldr	r0, [r7, #0]
    5d66:	4b09      	ldr	r3, [pc, #36]	; (5d8c <_qspi_sync_init+0x68>)
    5d68:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    5d6a:	4909      	ldr	r1, [pc, #36]	; (5d90 <_qspi_sync_init+0x6c>)
    5d6c:	6838      	ldr	r0, [r7, #0]
    5d6e:	4b09      	ldr	r3, [pc, #36]	; (5d94 <_qspi_sync_init+0x70>)
    5d70:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    5d72:	2300      	movs	r3, #0
}
    5d74:	4618      	mov	r0, r3
    5d76:	3708      	adds	r7, #8
    5d78:	46bd      	mov	sp, r7
    5d7a:	bd80      	pop	{r7, pc}
    5d7c:	000101e0 	.word	0x000101e0
    5d80:	00003d61 	.word	0x00003d61
    5d84:	00005bc1 	.word	0x00005bc1
    5d88:	06000011 	.word	0x06000011
    5d8c:	00005bdd 	.word	0x00005bdd
    5d90:	00241300 	.word	0x00241300
    5d94:	00005bf9 	.word	0x00005bf9

00005d98 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    5d98:	b580      	push	{r7, lr}
    5d9a:	b082      	sub	sp, #8
    5d9c:	af00      	add	r7, sp, #0
    5d9e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5da0:	687b      	ldr	r3, [r7, #4]
    5da2:	681b      	ldr	r3, [r3, #0]
    5da4:	2102      	movs	r1, #2
    5da6:	4618      	mov	r0, r3
    5da8:	4b03      	ldr	r3, [pc, #12]	; (5db8 <_qspi_sync_enable+0x20>)
    5daa:	4798      	blx	r3
	return ERR_NONE;
    5dac:	2300      	movs	r3, #0
}
    5dae:	4618      	mov	r0, r3
    5db0:	3708      	adds	r7, #8
    5db2:	46bd      	mov	sp, r7
    5db4:	bd80      	pop	{r7, pc}
    5db6:	bf00      	nop
    5db8:	00005bc1 	.word	0x00005bc1

00005dbc <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5dbc:	b580      	push	{r7, lr}
    5dbe:	b082      	sub	sp, #8
    5dc0:	af00      	add	r7, sp, #0
    5dc2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5dc4:	687b      	ldr	r3, [r7, #4]
    5dc6:	681b      	ldr	r3, [r3, #0]
    5dc8:	2100      	movs	r1, #0
    5dca:	4618      	mov	r0, r3
    5dcc:	4b03      	ldr	r3, [pc, #12]	; (5ddc <_qspi_sync_disable+0x20>)
    5dce:	4798      	blx	r3
	return ERR_NONE;
    5dd0:	2300      	movs	r3, #0
}
    5dd2:	4618      	mov	r0, r3
    5dd4:	3708      	adds	r7, #8
    5dd6:	46bd      	mov	sp, r7
    5dd8:	bd80      	pop	{r7, pc}
    5dda:	bf00      	nop
    5ddc:	00005bc1 	.word	0x00005bc1

00005de0 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5de0:	b580      	push	{r7, lr}
    5de2:	b084      	sub	sp, #16
    5de4:	af00      	add	r7, sp, #0
    5de6:	6078      	str	r0, [r7, #4]
    5de8:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    5dea:	687b      	ldr	r3, [r7, #4]
    5dec:	681b      	ldr	r3, [r3, #0]
    5dee:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5df0:	683b      	ldr	r3, [r7, #0]
    5df2:	781b      	ldrb	r3, [r3, #0]
    5df4:	f003 0320 	and.w	r3, r3, #32
    5df8:	b2db      	uxtb	r3, r3
    5dfa:	2b00      	cmp	r3, #0
    5dfc:	d005      	beq.n	5e0a <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    5dfe:	683b      	ldr	r3, [r7, #0]
    5e00:	689b      	ldr	r3, [r3, #8]
    5e02:	4619      	mov	r1, r3
    5e04:	68f8      	ldr	r0, [r7, #12]
    5e06:	4b13      	ldr	r3, [pc, #76]	; (5e54 <_qspi_sync_command_set_ifr+0x74>)
    5e08:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    5e0a:	683b      	ldr	r3, [r7, #0]
    5e0c:	781b      	ldrb	r3, [r3, #0]
    5e0e:	f003 0310 	and.w	r3, r3, #16
    5e12:	b2db      	uxtb	r3, r3
    5e14:	2b00      	cmp	r3, #0
    5e16:	d005      	beq.n	5e24 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5e18:	683b      	ldr	r3, [r7, #0]
    5e1a:	791b      	ldrb	r3, [r3, #4]
    5e1c:	4619      	mov	r1, r3
    5e1e:	68f8      	ldr	r0, [r7, #12]
    5e20:	4b0d      	ldr	r3, [pc, #52]	; (5e58 <_qspi_sync_command_set_ifr+0x78>)
    5e22:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5e24:	683b      	ldr	r3, [r7, #0]
    5e26:	781b      	ldrb	r3, [r3, #0]
    5e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5e2c:	b2db      	uxtb	r3, r3
    5e2e:	2b00      	cmp	r3, #0
    5e30:	d005      	beq.n	5e3e <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5e32:	683b      	ldr	r3, [r7, #0]
    5e34:	795b      	ldrb	r3, [r3, #5]
    5e36:	4619      	mov	r1, r3
    5e38:	68f8      	ldr	r0, [r7, #12]
    5e3a:	4b08      	ldr	r3, [pc, #32]	; (5e5c <_qspi_sync_command_set_ifr+0x7c>)
    5e3c:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5e3e:	683b      	ldr	r3, [r7, #0]
    5e40:	681b      	ldr	r3, [r3, #0]
    5e42:	4619      	mov	r1, r3
    5e44:	68f8      	ldr	r0, [r7, #12]
    5e46:	4b06      	ldr	r3, [pc, #24]	; (5e60 <_qspi_sync_command_set_ifr+0x80>)
    5e48:	4798      	blx	r3
}
    5e4a:	bf00      	nop
    5e4c:	3710      	adds	r7, #16
    5e4e:	46bd      	mov	sp, r7
    5e50:	bd80      	pop	{r7, pc}
    5e52:	bf00      	nop
    5e54:	00005c15 	.word	0x00005c15
    5e58:	00005c31 	.word	0x00005c31
    5e5c:	00005c65 	.word	0x00005c65
    5e60:	00005c9d 	.word	0x00005c9d

00005e64 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5e64:	b580      	push	{r7, lr}
    5e66:	b084      	sub	sp, #16
    5e68:	af00      	add	r7, sp, #0
    5e6a:	6078      	str	r0, [r7, #4]
    5e6c:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    5e6e:	687b      	ldr	r3, [r7, #4]
    5e70:	681b      	ldr	r3, [r3, #0]
    5e72:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5e74:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5e78:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    5e7a:	683b      	ldr	r3, [r7, #0]
    5e7c:	781b      	ldrb	r3, [r3, #0]
    5e7e:	f003 0320 	and.w	r3, r3, #32
    5e82:	b2db      	uxtb	r3, r3
    5e84:	2b00      	cmp	r3, #0
    5e86:	d004      	beq.n	5e92 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5e88:	683b      	ldr	r3, [r7, #0]
    5e8a:	689b      	ldr	r3, [r3, #8]
    5e8c:	68fa      	ldr	r2, [r7, #12]
    5e8e:	4413      	add	r3, r2
    5e90:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5e92:	68b8      	ldr	r0, [r7, #8]
    5e94:	4b18      	ldr	r3, [pc, #96]	; (5ef8 <_qspi_sync_run_transfer+0x94>)
    5e96:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5e98:	683b      	ldr	r3, [r7, #0]
    5e9a:	691b      	ldr	r3, [r3, #16]
    5e9c:	2b00      	cmp	r3, #0
    5e9e:	d103      	bne.n	5ea8 <_qspi_sync_run_transfer+0x44>
    5ea0:	683b      	ldr	r3, [r7, #0]
    5ea2:	695b      	ldr	r3, [r3, #20]
    5ea4:	2b00      	cmp	r3, #0
    5ea6:	d001      	beq.n	5eac <_qspi_sync_run_transfer+0x48>
    5ea8:	2301      	movs	r3, #1
    5eaa:	e000      	b.n	5eae <_qspi_sync_run_transfer+0x4a>
    5eac:	2300      	movs	r3, #0
    5eae:	f003 0301 	and.w	r3, r3, #1
    5eb2:	b2db      	uxtb	r3, r3
    5eb4:	2282      	movs	r2, #130	; 0x82
    5eb6:	4911      	ldr	r1, [pc, #68]	; (5efc <_qspi_sync_run_transfer+0x98>)
    5eb8:	4618      	mov	r0, r3
    5eba:	4b11      	ldr	r3, [pc, #68]	; (5f00 <_qspi_sync_run_transfer+0x9c>)
    5ebc:	4798      	blx	r3

	if (cmd->tx_buf) {
    5ebe:	683b      	ldr	r3, [r7, #0]
    5ec0:	691b      	ldr	r3, [r3, #16]
    5ec2:	2b00      	cmp	r3, #0
    5ec4:	d008      	beq.n	5ed8 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5ec6:	683b      	ldr	r3, [r7, #0]
    5ec8:	6919      	ldr	r1, [r3, #16]
    5eca:	683b      	ldr	r3, [r7, #0]
    5ecc:	68db      	ldr	r3, [r3, #12]
    5ece:	461a      	mov	r2, r3
    5ed0:	68f8      	ldr	r0, [r7, #12]
    5ed2:	4b0c      	ldr	r3, [pc, #48]	; (5f04 <_qspi_sync_run_transfer+0xa0>)
    5ed4:	4798      	blx	r3
    5ed6:	e007      	b.n	5ee8 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5ed8:	683b      	ldr	r3, [r7, #0]
    5eda:	6958      	ldr	r0, [r3, #20]
    5edc:	683b      	ldr	r3, [r7, #0]
    5ede:	68db      	ldr	r3, [r3, #12]
    5ee0:	461a      	mov	r2, r3
    5ee2:	68f9      	ldr	r1, [r7, #12]
    5ee4:	4b07      	ldr	r3, [pc, #28]	; (5f04 <_qspi_sync_run_transfer+0xa0>)
    5ee6:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5ee8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5eec:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5ef0:	bf00      	nop
    5ef2:	3710      	adds	r7, #16
    5ef4:	46bd      	mov	sp, r7
    5ef6:	bd80      	pop	{r7, pc}
    5ef8:	00005cb9 	.word	0x00005cb9
    5efc:	000101e0 	.word	0x000101e0
    5f00:	00003d61 	.word	0x00003d61
    5f04:	00005cd1 	.word	0x00005cd1

00005f08 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5f08:	b580      	push	{r7, lr}
    5f0a:	b082      	sub	sp, #8
    5f0c:	af00      	add	r7, sp, #0
    5f0e:	6078      	str	r0, [r7, #4]
    5f10:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5f12:	6839      	ldr	r1, [r7, #0]
    5f14:	6878      	ldr	r0, [r7, #4]
    5f16:	4b14      	ldr	r3, [pc, #80]	; (5f68 <_qspi_sync_serial_run_command+0x60>)
    5f18:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    5f1a:	683b      	ldr	r3, [r7, #0]
    5f1c:	781b      	ldrb	r3, [r3, #0]
    5f1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5f22:	b2db      	uxtb	r3, r3
    5f24:	2b00      	cmp	r3, #0
    5f26:	d003      	beq.n	5f30 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5f28:	6839      	ldr	r1, [r7, #0]
    5f2a:	6878      	ldr	r0, [r7, #4]
    5f2c:	4b0f      	ldr	r3, [pc, #60]	; (5f6c <_qspi_sync_serial_run_command+0x64>)
    5f2e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5f30:	687b      	ldr	r3, [r7, #4]
    5f32:	681b      	ldr	r3, [r3, #0]
    5f34:	4618      	mov	r0, r3
    5f36:	4b0e      	ldr	r3, [pc, #56]	; (5f70 <_qspi_sync_serial_run_command+0x68>)
    5f38:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    5f3a:	bf00      	nop
    5f3c:	687b      	ldr	r3, [r7, #4]
    5f3e:	681b      	ldr	r3, [r3, #0]
    5f40:	4618      	mov	r0, r3
    5f42:	4b0c      	ldr	r3, [pc, #48]	; (5f74 <_qspi_sync_serial_run_command+0x6c>)
    5f44:	4798      	blx	r3
    5f46:	4603      	mov	r3, r0
    5f48:	f083 0301 	eor.w	r3, r3, #1
    5f4c:	b2db      	uxtb	r3, r3
    5f4e:	2b00      	cmp	r3, #0
    5f50:	d1f4      	bne.n	5f3c <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    5f52:	687b      	ldr	r3, [r7, #4]
    5f54:	681b      	ldr	r3, [r3, #0]
    5f56:	4618      	mov	r0, r3
    5f58:	4b07      	ldr	r3, [pc, #28]	; (5f78 <_qspi_sync_serial_run_command+0x70>)
    5f5a:	4798      	blx	r3
	return ERR_NONE;
    5f5c:	2300      	movs	r3, #0
}
    5f5e:	4618      	mov	r0, r3
    5f60:	3708      	adds	r7, #8
    5f62:	46bd      	mov	sp, r7
    5f64:	bd80      	pop	{r7, pc}
    5f66:	bf00      	nop
    5f68:	00005de1 	.word	0x00005de1
    5f6c:	00005e65 	.word	0x00005e65
    5f70:	00005d05 	.word	0x00005d05
    5f74:	00005b7d 	.word	0x00005b7d
    5f78:	00005ba5 	.word	0x00005ba5

00005f7c <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    5f7c:	b480      	push	{r7}
    5f7e:	b083      	sub	sp, #12
    5f80:	af00      	add	r7, sp, #0
    5f82:	6078      	str	r0, [r7, #4]
    5f84:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5f86:	bf00      	nop
    5f88:	687b      	ldr	r3, [r7, #4]
    5f8a:	691a      	ldr	r2, [r3, #16]
    5f8c:	683b      	ldr	r3, [r7, #0]
    5f8e:	4013      	ands	r3, r2
    5f90:	2b00      	cmp	r3, #0
    5f92:	d1f9      	bne.n	5f88 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5f94:	bf00      	nop
    5f96:	370c      	adds	r7, #12
    5f98:	46bd      	mov	sp, r7
    5f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f9e:	4770      	bx	lr

00005fa0 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5fa0:	b480      	push	{r7}
    5fa2:	b083      	sub	sp, #12
    5fa4:	af00      	add	r7, sp, #0
    5fa6:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5fa8:	687b      	ldr	r3, [r7, #4]
    5faa:	f44f 7280 	mov.w	r2, #256	; 0x100
    5fae:	819a      	strh	r2, [r3, #12]
}
    5fb0:	bf00      	nop
    5fb2:	370c      	adds	r7, #12
    5fb4:	46bd      	mov	sp, r7
    5fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fba:	4770      	bx	lr

00005fbc <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5fbc:	b480      	push	{r7}
    5fbe:	b083      	sub	sp, #12
    5fc0:	af00      	add	r7, sp, #0
    5fc2:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5fc4:	687b      	ldr	r3, [r7, #4]
    5fc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5fca:	819a      	strh	r2, [r3, #12]
}
    5fcc:	bf00      	nop
    5fce:	370c      	adds	r7, #12
    5fd0:	46bd      	mov	sp, r7
    5fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fd6:	4770      	bx	lr

00005fd8 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5fd8:	b480      	push	{r7}
    5fda:	b083      	sub	sp, #12
    5fdc:	af00      	add	r7, sp, #0
    5fde:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5fe0:	687b      	ldr	r3, [r7, #4]
    5fe2:	899b      	ldrh	r3, [r3, #12]
    5fe4:	b29b      	uxth	r3, r3
}
    5fe6:	4618      	mov	r0, r3
    5fe8:	370c      	adds	r7, #12
    5fea:	46bd      	mov	sp, r7
    5fec:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ff0:	4770      	bx	lr

00005ff2 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    5ff2:	b480      	push	{r7}
    5ff4:	b083      	sub	sp, #12
    5ff6:	af00      	add	r7, sp, #0
    5ff8:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    5ffa:	687b      	ldr	r3, [r7, #4]
    5ffc:	895b      	ldrh	r3, [r3, #10]
    5ffe:	b29b      	uxth	r3, r3
}
    6000:	4618      	mov	r0, r3
    6002:	370c      	adds	r7, #12
    6004:	46bd      	mov	sp, r7
    6006:	f85d 7b04 	ldr.w	r7, [sp], #4
    600a:	4770      	bx	lr

0000600c <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    600c:	b580      	push	{r7, lr}
    600e:	b082      	sub	sp, #8
    6010:	af00      	add	r7, sp, #0
    6012:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    6014:	687b      	ldr	r3, [r7, #4]
    6016:	881b      	ldrh	r3, [r3, #0]
    6018:	b29b      	uxth	r3, r3
    601a:	f043 0301 	orr.w	r3, r3, #1
    601e:	b29a      	uxth	r2, r3
    6020:	687b      	ldr	r3, [r7, #4]
    6022:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    6024:	2101      	movs	r1, #1
    6026:	6878      	ldr	r0, [r7, #4]
    6028:	4b02      	ldr	r3, [pc, #8]	; (6034 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    602a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    602c:	bf00      	nop
    602e:	3708      	adds	r7, #8
    6030:	46bd      	mov	sp, r7
    6032:	bd80      	pop	{r7, pc}
    6034:	00005f7d 	.word	0x00005f7d

00006038 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6038:	b580      	push	{r7, lr}
    603a:	b084      	sub	sp, #16
    603c:	af00      	add	r7, sp, #0
    603e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6040:	f248 0103 	movw	r1, #32771	; 0x8003
    6044:	6878      	ldr	r0, [r7, #4]
    6046:	4b0a      	ldr	r3, [pc, #40]	; (6070 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    6048:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    604a:	687b      	ldr	r3, [r7, #4]
    604c:	881b      	ldrh	r3, [r3, #0]
    604e:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    6050:	89fb      	ldrh	r3, [r7, #14]
    6052:	085b      	lsrs	r3, r3, #1
    6054:	b29b      	uxth	r3, r3
    6056:	f003 0301 	and.w	r3, r3, #1
    605a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    605c:	89fb      	ldrh	r3, [r7, #14]
    605e:	2b00      	cmp	r3, #0
    6060:	bf14      	ite	ne
    6062:	2301      	movne	r3, #1
    6064:	2300      	moveq	r3, #0
    6066:	b2db      	uxtb	r3, r3
}
    6068:	4618      	mov	r0, r3
    606a:	3710      	adds	r7, #16
    606c:	46bd      	mov	sp, r7
    606e:	bd80      	pop	{r7, pc}
    6070:	00005f7d 	.word	0x00005f7d

00006074 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6074:	b580      	push	{r7, lr}
    6076:	b082      	sub	sp, #8
    6078:	af00      	add	r7, sp, #0
    607a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    607c:	687b      	ldr	r3, [r7, #4]
    607e:	881b      	ldrh	r3, [r3, #0]
    6080:	b29b      	uxth	r3, r3
    6082:	f023 0302 	bic.w	r3, r3, #2
    6086:	b29a      	uxth	r2, r3
    6088:	687b      	ldr	r3, [r7, #4]
    608a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    608c:	f248 0103 	movw	r1, #32771	; 0x8003
    6090:	6878      	ldr	r0, [r7, #4]
    6092:	4b03      	ldr	r3, [pc, #12]	; (60a0 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    6094:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    6096:	bf00      	nop
    6098:	3708      	adds	r7, #8
    609a:	46bd      	mov	sp, r7
    609c:	bd80      	pop	{r7, pc}
    609e:	bf00      	nop
    60a0:	00005f7d 	.word	0x00005f7d

000060a4 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    60a4:	b580      	push	{r7, lr}
    60a6:	b082      	sub	sp, #8
    60a8:	af00      	add	r7, sp, #0
    60aa:	6078      	str	r0, [r7, #4]
    60ac:	460b      	mov	r3, r1
    60ae:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    60b0:	687b      	ldr	r3, [r7, #4]
    60b2:	887a      	ldrh	r2, [r7, #2]
    60b4:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    60b6:	f248 0103 	movw	r1, #32771	; 0x8003
    60ba:	6878      	ldr	r0, [r7, #4]
    60bc:	4b02      	ldr	r3, [pc, #8]	; (60c8 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    60be:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    60c0:	bf00      	nop
    60c2:	3708      	adds	r7, #8
    60c4:	46bd      	mov	sp, r7
    60c6:	bd80      	pop	{r7, pc}
    60c8:	00005f7d 	.word	0x00005f7d

000060cc <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    60cc:	b480      	push	{r7}
    60ce:	b083      	sub	sp, #12
    60d0:	af00      	add	r7, sp, #0
    60d2:	6078      	str	r0, [r7, #4]
    60d4:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    60d6:	687b      	ldr	r3, [r7, #4]
    60d8:	683a      	ldr	r2, [r7, #0]
    60da:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    60dc:	bf00      	nop
    60de:	370c      	adds	r7, #12
    60e0:	46bd      	mov	sp, r7
    60e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    60e6:	4770      	bx	lr

000060e8 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    60e8:	b580      	push	{r7, lr}
    60ea:	b082      	sub	sp, #8
    60ec:	af00      	add	r7, sp, #0
    60ee:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    60f0:	687b      	ldr	r3, [r7, #4]
    60f2:	2b00      	cmp	r3, #0
    60f4:	d005      	beq.n	6102 <_calendar_init+0x1a>
    60f6:	687b      	ldr	r3, [r7, #4]
    60f8:	681b      	ldr	r3, [r3, #0]
    60fa:	2b00      	cmp	r3, #0
    60fc:	d001      	beq.n	6102 <_calendar_init+0x1a>
    60fe:	2301      	movs	r3, #1
    6100:	e000      	b.n	6104 <_calendar_init+0x1c>
    6102:	2300      	movs	r3, #0
    6104:	f003 0301 	and.w	r3, r3, #1
    6108:	b2db      	uxtb	r3, r3
    610a:	222f      	movs	r2, #47	; 0x2f
    610c:	491b      	ldr	r1, [pc, #108]	; (617c <_calendar_init+0x94>)
    610e:	4618      	mov	r0, r3
    6110:	4b1b      	ldr	r3, [pc, #108]	; (6180 <_calendar_init+0x98>)
    6112:	4798      	blx	r3

	_rtc_dev = dev;
    6114:	4a1b      	ldr	r2, [pc, #108]	; (6184 <_calendar_init+0x9c>)
    6116:	687b      	ldr	r3, [r7, #4]
    6118:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    611a:	687b      	ldr	r3, [r7, #4]
    611c:	681b      	ldr	r3, [r3, #0]
    611e:	4618      	mov	r0, r3
    6120:	4b19      	ldr	r3, [pc, #100]	; (6188 <_calendar_init+0xa0>)
    6122:	4798      	blx	r3
    6124:	4603      	mov	r3, r0
    6126:	2b00      	cmp	r3, #0
    6128:	d00a      	beq.n	6140 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    612a:	687b      	ldr	r3, [r7, #4]
    612c:	681b      	ldr	r3, [r3, #0]
    612e:	4618      	mov	r0, r3
    6130:	4b16      	ldr	r3, [pc, #88]	; (618c <_calendar_init+0xa4>)
    6132:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    6134:	687b      	ldr	r3, [r7, #4]
    6136:	681b      	ldr	r3, [r3, #0]
    6138:	2102      	movs	r1, #2
    613a:	4618      	mov	r0, r3
    613c:	4b14      	ldr	r3, [pc, #80]	; (6190 <_calendar_init+0xa8>)
    613e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    6140:	687b      	ldr	r3, [r7, #4]
    6142:	681b      	ldr	r3, [r3, #0]
    6144:	4618      	mov	r0, r3
    6146:	4b13      	ldr	r3, [pc, #76]	; (6194 <_calendar_init+0xac>)
    6148:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    614a:	687b      	ldr	r3, [r7, #4]
    614c:	681b      	ldr	r3, [r3, #0]
    614e:	2101      	movs	r1, #1
    6150:	4618      	mov	r0, r3
    6152:	4b0f      	ldr	r3, [pc, #60]	; (6190 <_calendar_init+0xa8>)
    6154:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    6156:	687b      	ldr	r3, [r7, #4]
    6158:	681b      	ldr	r3, [r3, #0]
    615a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    615e:	4618      	mov	r0, r3
    6160:	4b0d      	ldr	r3, [pc, #52]	; (6198 <_calendar_init+0xb0>)
    6162:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    6164:	687b      	ldr	r3, [r7, #4]
    6166:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    6168:	2100      	movs	r1, #0
    616a:	4618      	mov	r0, r3
    616c:	4b0b      	ldr	r3, [pc, #44]	; (619c <_calendar_init+0xb4>)
    616e:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    6170:	2300      	movs	r3, #0
}
    6172:	4618      	mov	r0, r3
    6174:	3708      	adds	r7, #8
    6176:	46bd      	mov	sp, r7
    6178:	bd80      	pop	{r7, pc}
    617a:	bf00      	nop
    617c:	000101f8 	.word	0x000101f8
    6180:	00003d61 	.word	0x00003d61
    6184:	20000bd8 	.word	0x20000bd8
    6188:	00006039 	.word	0x00006039
    618c:	00006075 	.word	0x00006075
    6190:	00005f7d 	.word	0x00005f7d
    6194:	0000600d 	.word	0x0000600d
    6198:	000060a5 	.word	0x000060a5
    619c:	000060cd 	.word	0x000060cd

000061a0 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    61a0:	b580      	push	{r7, lr}
    61a2:	b084      	sub	sp, #16
    61a4:	af00      	add	r7, sp, #0
    61a6:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    61a8:	687b      	ldr	r3, [r7, #4]
    61aa:	681b      	ldr	r3, [r3, #0]
    61ac:	4618      	mov	r0, r3
    61ae:	4b19      	ldr	r3, [pc, #100]	; (6214 <_rtc_interrupt_handler+0x74>)
    61b0:	4798      	blx	r3
    61b2:	4603      	mov	r3, r0
    61b4:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    61b6:	687b      	ldr	r3, [r7, #4]
    61b8:	681b      	ldr	r3, [r3, #0]
    61ba:	4618      	mov	r0, r3
    61bc:	4b16      	ldr	r3, [pc, #88]	; (6218 <_rtc_interrupt_handler+0x78>)
    61be:	4798      	blx	r3
    61c0:	4603      	mov	r3, r0
    61c2:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    61c4:	89fa      	ldrh	r2, [r7, #14]
    61c6:	89bb      	ldrh	r3, [r7, #12]
    61c8:	4013      	ands	r3, r2
    61ca:	b29b      	uxth	r3, r3
    61cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
    61d0:	2b00      	cmp	r3, #0
    61d2:	d009      	beq.n	61e8 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    61d4:	687b      	ldr	r3, [r7, #4]
    61d6:	685b      	ldr	r3, [r3, #4]
    61d8:	6878      	ldr	r0, [r7, #4]
    61da:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    61dc:	687b      	ldr	r3, [r7, #4]
    61de:	681b      	ldr	r3, [r3, #0]
    61e0:	4618      	mov	r0, r3
    61e2:	4b0e      	ldr	r3, [pc, #56]	; (621c <_rtc_interrupt_handler+0x7c>)
    61e4:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    61e6:	e010      	b.n	620a <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    61e8:	89fa      	ldrh	r2, [r7, #14]
    61ea:	89bb      	ldrh	r3, [r7, #12]
    61ec:	4013      	ands	r3, r2
    61ee:	b29b      	uxth	r3, r3
    61f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    61f4:	2b00      	cmp	r3, #0
    61f6:	d008      	beq.n	620a <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    61f8:	687b      	ldr	r3, [r7, #4]
    61fa:	689b      	ldr	r3, [r3, #8]
    61fc:	6878      	ldr	r0, [r7, #4]
    61fe:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    6200:	687b      	ldr	r3, [r7, #4]
    6202:	681b      	ldr	r3, [r3, #0]
    6204:	4618      	mov	r0, r3
    6206:	4b06      	ldr	r3, [pc, #24]	; (6220 <_rtc_interrupt_handler+0x80>)
    6208:	4798      	blx	r3
}
    620a:	bf00      	nop
    620c:	3710      	adds	r7, #16
    620e:	46bd      	mov	sp, r7
    6210:	bd80      	pop	{r7, pc}
    6212:	bf00      	nop
    6214:	00005fd9 	.word	0x00005fd9
    6218:	00005ff3 	.word	0x00005ff3
    621c:	00005fa1 	.word	0x00005fa1
    6220:	00005fbd 	.word	0x00005fbd

00006224 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    6224:	b580      	push	{r7, lr}
    6226:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    6228:	4b03      	ldr	r3, [pc, #12]	; (6238 <RTC_Handler+0x14>)
    622a:	681b      	ldr	r3, [r3, #0]
    622c:	4618      	mov	r0, r3
    622e:	4b03      	ldr	r3, [pc, #12]	; (623c <RTC_Handler+0x18>)
    6230:	4798      	blx	r3
}
    6232:	bf00      	nop
    6234:	bd80      	pop	{r7, pc}
    6236:	bf00      	nop
    6238:	20000bd8 	.word	0x20000bd8
    623c:	000061a1 	.word	0x000061a1

00006240 <__NVIC_EnableIRQ>:
{
    6240:	b480      	push	{r7}
    6242:	b083      	sub	sp, #12
    6244:	af00      	add	r7, sp, #0
    6246:	4603      	mov	r3, r0
    6248:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    624a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    624e:	2b00      	cmp	r3, #0
    6250:	db0b      	blt.n	626a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6252:	4909      	ldr	r1, [pc, #36]	; (6278 <__NVIC_EnableIRQ+0x38>)
    6254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6258:	095b      	lsrs	r3, r3, #5
    625a:	88fa      	ldrh	r2, [r7, #6]
    625c:	f002 021f 	and.w	r2, r2, #31
    6260:	2001      	movs	r0, #1
    6262:	fa00 f202 	lsl.w	r2, r0, r2
    6266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    626a:	bf00      	nop
    626c:	370c      	adds	r7, #12
    626e:	46bd      	mov	sp, r7
    6270:	f85d 7b04 	ldr.w	r7, [sp], #4
    6274:	4770      	bx	lr
    6276:	bf00      	nop
    6278:	e000e100 	.word	0xe000e100

0000627c <__NVIC_DisableIRQ>:
{
    627c:	b480      	push	{r7}
    627e:	b083      	sub	sp, #12
    6280:	af00      	add	r7, sp, #0
    6282:	4603      	mov	r3, r0
    6284:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    628a:	2b00      	cmp	r3, #0
    628c:	db10      	blt.n	62b0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    628e:	490b      	ldr	r1, [pc, #44]	; (62bc <__NVIC_DisableIRQ+0x40>)
    6290:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6294:	095b      	lsrs	r3, r3, #5
    6296:	88fa      	ldrh	r2, [r7, #6]
    6298:	f002 021f 	and.w	r2, r2, #31
    629c:	2001      	movs	r0, #1
    629e:	fa00 f202 	lsl.w	r2, r0, r2
    62a2:	3320      	adds	r3, #32
    62a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    62a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    62ac:	f3bf 8f6f 	isb	sy
}
    62b0:	bf00      	nop
    62b2:	370c      	adds	r7, #12
    62b4:	46bd      	mov	sp, r7
    62b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    62ba:	4770      	bx	lr
    62bc:	e000e100 	.word	0xe000e100

000062c0 <__NVIC_ClearPendingIRQ>:
{
    62c0:	b480      	push	{r7}
    62c2:	b083      	sub	sp, #12
    62c4:	af00      	add	r7, sp, #0
    62c6:	4603      	mov	r3, r0
    62c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    62ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    62ce:	2b00      	cmp	r3, #0
    62d0:	db0c      	blt.n	62ec <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    62d2:	4909      	ldr	r1, [pc, #36]	; (62f8 <__NVIC_ClearPendingIRQ+0x38>)
    62d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    62d8:	095b      	lsrs	r3, r3, #5
    62da:	88fa      	ldrh	r2, [r7, #6]
    62dc:	f002 021f 	and.w	r2, r2, #31
    62e0:	2001      	movs	r0, #1
    62e2:	fa00 f202 	lsl.w	r2, r0, r2
    62e6:	3360      	adds	r3, #96	; 0x60
    62e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    62ec:	bf00      	nop
    62ee:	370c      	adds	r7, #12
    62f0:	46bd      	mov	sp, r7
    62f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    62f6:	4770      	bx	lr
    62f8:	e000e100 	.word	0xe000e100

000062fc <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    62fc:	b480      	push	{r7}
    62fe:	b083      	sub	sp, #12
    6300:	af00      	add	r7, sp, #0
    6302:	6078      	str	r0, [r7, #4]
    6304:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6306:	bf00      	nop
    6308:	687b      	ldr	r3, [r7, #4]
    630a:	69da      	ldr	r2, [r3, #28]
    630c:	683b      	ldr	r3, [r7, #0]
    630e:	4013      	ands	r3, r2
    6310:	2b00      	cmp	r3, #0
    6312:	d1f9      	bne.n	6308 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    6314:	bf00      	nop
    6316:	370c      	adds	r7, #12
    6318:	46bd      	mov	sp, r7
    631a:	f85d 7b04 	ldr.w	r7, [sp], #4
    631e:	4770      	bx	lr

00006320 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6320:	b480      	push	{r7}
    6322:	b083      	sub	sp, #12
    6324:	af00      	add	r7, sp, #0
    6326:	6078      	str	r0, [r7, #4]
    6328:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    632a:	687b      	ldr	r3, [r7, #4]
    632c:	69da      	ldr	r2, [r3, #28]
    632e:	683b      	ldr	r3, [r7, #0]
    6330:	4013      	ands	r3, r2
    6332:	2b00      	cmp	r3, #0
    6334:	bf14      	ite	ne
    6336:	2301      	movne	r3, #1
    6338:	2300      	moveq	r3, #0
    633a:	b2db      	uxtb	r3, r3
}
    633c:	4618      	mov	r0, r3
    633e:	370c      	adds	r7, #12
    6340:	46bd      	mov	sp, r7
    6342:	f85d 7b04 	ldr.w	r7, [sp], #4
    6346:	4770      	bx	lr

00006348 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    6348:	b480      	push	{r7}
    634a:	b083      	sub	sp, #12
    634c:	af00      	add	r7, sp, #0
    634e:	6078      	str	r0, [r7, #4]
    6350:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6352:	bf00      	nop
    6354:	687b      	ldr	r3, [r7, #4]
    6356:	69da      	ldr	r2, [r3, #28]
    6358:	683b      	ldr	r3, [r7, #0]
    635a:	4013      	ands	r3, r2
    635c:	2b00      	cmp	r3, #0
    635e:	d1f9      	bne.n	6354 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    6360:	bf00      	nop
    6362:	370c      	adds	r7, #12
    6364:	46bd      	mov	sp, r7
    6366:	f85d 7b04 	ldr.w	r7, [sp], #4
    636a:	4770      	bx	lr

0000636c <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    636c:	b480      	push	{r7}
    636e:	b083      	sub	sp, #12
    6370:	af00      	add	r7, sp, #0
    6372:	6078      	str	r0, [r7, #4]
    6374:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6376:	687b      	ldr	r3, [r7, #4]
    6378:	69da      	ldr	r2, [r3, #28]
    637a:	683b      	ldr	r3, [r7, #0]
    637c:	4013      	ands	r3, r2
    637e:	2b00      	cmp	r3, #0
    6380:	bf14      	ite	ne
    6382:	2301      	movne	r3, #1
    6384:	2300      	moveq	r3, #0
    6386:	b2db      	uxtb	r3, r3
}
    6388:	4618      	mov	r0, r3
    638a:	370c      	adds	r7, #12
    638c:	46bd      	mov	sp, r7
    638e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6392:	4770      	bx	lr

00006394 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    6394:	b480      	push	{r7}
    6396:	b083      	sub	sp, #12
    6398:	af00      	add	r7, sp, #0
    639a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    639c:	687b      	ldr	r3, [r7, #4]
    639e:	2201      	movs	r2, #1
    63a0:	761a      	strb	r2, [r3, #24]
}
    63a2:	bf00      	nop
    63a4:	370c      	adds	r7, #12
    63a6:	46bd      	mov	sp, r7
    63a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    63ac:	4770      	bx	lr

000063ae <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    63ae:	b480      	push	{r7}
    63b0:	b083      	sub	sp, #12
    63b2:	af00      	add	r7, sp, #0
    63b4:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    63b6:	687b      	ldr	r3, [r7, #4]
    63b8:	2202      	movs	r2, #2
    63ba:	761a      	strb	r2, [r3, #24]
}
    63bc:	bf00      	nop
    63be:	370c      	adds	r7, #12
    63c0:	46bd      	mov	sp, r7
    63c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    63c6:	4770      	bx	lr

000063c8 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    63c8:	b480      	push	{r7}
    63ca:	b083      	sub	sp, #12
    63cc:	af00      	add	r7, sp, #0
    63ce:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    63d0:	687b      	ldr	r3, [r7, #4]
    63d2:	7e1b      	ldrb	r3, [r3, #24]
    63d4:	b2db      	uxtb	r3, r3
}
    63d6:	4618      	mov	r0, r3
    63d8:	370c      	adds	r7, #12
    63da:	46bd      	mov	sp, r7
    63dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    63e0:	4770      	bx	lr

000063e2 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    63e2:	b480      	push	{r7}
    63e4:	b083      	sub	sp, #12
    63e6:	af00      	add	r7, sp, #0
    63e8:	6078      	str	r0, [r7, #4]
    63ea:	460b      	mov	r3, r1
    63ec:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    63ee:	687b      	ldr	r3, [r7, #4]
    63f0:	78fa      	ldrb	r2, [r7, #3]
    63f2:	761a      	strb	r2, [r3, #24]
}
    63f4:	bf00      	nop
    63f6:	370c      	adds	r7, #12
    63f8:	46bd      	mov	sp, r7
    63fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    63fe:	4770      	bx	lr

00006400 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    6400:	b480      	push	{r7}
    6402:	b085      	sub	sp, #20
    6404:	af00      	add	r7, sp, #0
    6406:	6078      	str	r0, [r7, #4]
    6408:	460b      	mov	r3, r1
    640a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    640c:	687b      	ldr	r3, [r7, #4]
    640e:	7e1b      	ldrb	r3, [r3, #24]
    6410:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    6412:	7bfa      	ldrb	r2, [r7, #15]
    6414:	78fb      	ldrb	r3, [r7, #3]
    6416:	4013      	ands	r3, r2
    6418:	73fb      	strb	r3, [r7, #15]
	return tmp;
    641a:	7bfb      	ldrb	r3, [r7, #15]
}
    641c:	4618      	mov	r0, r3
    641e:	3714      	adds	r7, #20
    6420:	46bd      	mov	sp, r7
    6422:	f85d 7b04 	ldr.w	r7, [sp], #4
    6426:	4770      	bx	lr

00006428 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    6428:	b480      	push	{r7}
    642a:	b083      	sub	sp, #12
    642c:	af00      	add	r7, sp, #0
    642e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    6430:	687b      	ldr	r3, [r7, #4]
    6432:	7e1b      	ldrb	r3, [r3, #24]
    6434:	b2db      	uxtb	r3, r3
}
    6436:	4618      	mov	r0, r3
    6438:	370c      	adds	r7, #12
    643a:	46bd      	mov	sp, r7
    643c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6440:	4770      	bx	lr

00006442 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    6442:	b480      	push	{r7}
    6444:	b083      	sub	sp, #12
    6446:	af00      	add	r7, sp, #0
    6448:	6078      	str	r0, [r7, #4]
    644a:	460b      	mov	r3, r1
    644c:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    644e:	687b      	ldr	r3, [r7, #4]
    6450:	78fa      	ldrb	r2, [r7, #3]
    6452:	761a      	strb	r2, [r3, #24]
}
    6454:	bf00      	nop
    6456:	370c      	adds	r7, #12
    6458:	46bd      	mov	sp, r7
    645a:	f85d 7b04 	ldr.w	r7, [sp], #4
    645e:	4770      	bx	lr

00006460 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6460:	b580      	push	{r7, lr}
    6462:	b082      	sub	sp, #8
    6464:	af00      	add	r7, sp, #0
    6466:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    6468:	687b      	ldr	r3, [r7, #4]
    646a:	681b      	ldr	r3, [r3, #0]
    646c:	f043 0202 	orr.w	r2, r3, #2
    6470:	687b      	ldr	r3, [r7, #4]
    6472:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6474:	2103      	movs	r1, #3
    6476:	6878      	ldr	r0, [r7, #4]
    6478:	4b02      	ldr	r3, [pc, #8]	; (6484 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    647a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    647c:	bf00      	nop
    647e:	3708      	adds	r7, #8
    6480:	46bd      	mov	sp, r7
    6482:	bd80      	pop	{r7, pc}
    6484:	000062fd 	.word	0x000062fd

00006488 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6488:	b580      	push	{r7, lr}
    648a:	b082      	sub	sp, #8
    648c:	af00      	add	r7, sp, #0
    648e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6490:	687b      	ldr	r3, [r7, #4]
    6492:	681b      	ldr	r3, [r3, #0]
    6494:	f023 0202 	bic.w	r2, r3, #2
    6498:	687b      	ldr	r3, [r7, #4]
    649a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    649c:	2103      	movs	r1, #3
    649e:	6878      	ldr	r0, [r7, #4]
    64a0:	4b02      	ldr	r3, [pc, #8]	; (64ac <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    64a2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    64a4:	bf00      	nop
    64a6:	3708      	adds	r7, #8
    64a8:	46bd      	mov	sp, r7
    64aa:	bd80      	pop	{r7, pc}
    64ac:	000062fd 	.word	0x000062fd

000064b0 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    64b0:	b480      	push	{r7}
    64b2:	b085      	sub	sp, #20
    64b4:	af00      	add	r7, sp, #0
    64b6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    64b8:	687b      	ldr	r3, [r7, #4]
    64ba:	681b      	ldr	r3, [r3, #0]
    64bc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    64be:	68fb      	ldr	r3, [r7, #12]
    64c0:	0edb      	lsrs	r3, r3, #27
    64c2:	f003 0301 	and.w	r3, r3, #1
    64c6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    64c8:	68fb      	ldr	r3, [r7, #12]
    64ca:	2b00      	cmp	r3, #0
    64cc:	bf14      	ite	ne
    64ce:	2301      	movne	r3, #1
    64d0:	2300      	moveq	r3, #0
    64d2:	b2db      	uxtb	r3, r3
}
    64d4:	4618      	mov	r0, r3
    64d6:	3714      	adds	r7, #20
    64d8:	46bd      	mov	sp, r7
    64da:	f85d 7b04 	ldr.w	r7, [sp], #4
    64de:	4770      	bx	lr

000064e0 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    64e0:	b580      	push	{r7, lr}
    64e2:	b084      	sub	sp, #16
    64e4:	af00      	add	r7, sp, #0
    64e6:	6078      	str	r0, [r7, #4]
    64e8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    64ea:	2103      	movs	r1, #3
    64ec:	6878      	ldr	r0, [r7, #4]
    64ee:	4b07      	ldr	r3, [pc, #28]	; (650c <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    64f0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    64f2:	687b      	ldr	r3, [r7, #4]
    64f4:	681b      	ldr	r3, [r3, #0]
    64f6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    64f8:	68fa      	ldr	r2, [r7, #12]
    64fa:	683b      	ldr	r3, [r7, #0]
    64fc:	4013      	ands	r3, r2
    64fe:	60fb      	str	r3, [r7, #12]
	return tmp;
    6500:	68fb      	ldr	r3, [r7, #12]
}
    6502:	4618      	mov	r0, r3
    6504:	3710      	adds	r7, #16
    6506:	46bd      	mov	sp, r7
    6508:	bd80      	pop	{r7, pc}
    650a:	bf00      	nop
    650c:	000062fd 	.word	0x000062fd

00006510 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    6510:	b580      	push	{r7, lr}
    6512:	b082      	sub	sp, #8
    6514:	af00      	add	r7, sp, #0
    6516:	6078      	str	r0, [r7, #4]
    6518:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    651a:	687b      	ldr	r3, [r7, #4]
    651c:	683a      	ldr	r2, [r7, #0]
    651e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6520:	2103      	movs	r1, #3
    6522:	6878      	ldr	r0, [r7, #4]
    6524:	4b02      	ldr	r3, [pc, #8]	; (6530 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    6526:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6528:	bf00      	nop
    652a:	3708      	adds	r7, #8
    652c:	46bd      	mov	sp, r7
    652e:	bd80      	pop	{r7, pc}
    6530:	000062fd 	.word	0x000062fd

00006534 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6534:	b580      	push	{r7, lr}
    6536:	b082      	sub	sp, #8
    6538:	af00      	add	r7, sp, #0
    653a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    653c:	687b      	ldr	r3, [r7, #4]
    653e:	681b      	ldr	r3, [r3, #0]
    6540:	f043 0202 	orr.w	r2, r3, #2
    6544:	687b      	ldr	r3, [r7, #4]
    6546:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6548:	2103      	movs	r1, #3
    654a:	6878      	ldr	r0, [r7, #4]
    654c:	4b02      	ldr	r3, [pc, #8]	; (6558 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    654e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6550:	bf00      	nop
    6552:	3708      	adds	r7, #8
    6554:	46bd      	mov	sp, r7
    6556:	bd80      	pop	{r7, pc}
    6558:	00006349 	.word	0x00006349

0000655c <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    655c:	b580      	push	{r7, lr}
    655e:	b084      	sub	sp, #16
    6560:	af00      	add	r7, sp, #0
    6562:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6564:	2103      	movs	r1, #3
    6566:	6878      	ldr	r0, [r7, #4]
    6568:	4b09      	ldr	r3, [pc, #36]	; (6590 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    656a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    656c:	687b      	ldr	r3, [r7, #4]
    656e:	681b      	ldr	r3, [r3, #0]
    6570:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    6572:	68fb      	ldr	r3, [r7, #12]
    6574:	085b      	lsrs	r3, r3, #1
    6576:	f003 0301 	and.w	r3, r3, #1
    657a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    657c:	68fb      	ldr	r3, [r7, #12]
    657e:	2b00      	cmp	r3, #0
    6580:	bf14      	ite	ne
    6582:	2301      	movne	r3, #1
    6584:	2300      	moveq	r3, #0
    6586:	b2db      	uxtb	r3, r3
}
    6588:	4618      	mov	r0, r3
    658a:	3710      	adds	r7, #16
    658c:	46bd      	mov	sp, r7
    658e:	bd80      	pop	{r7, pc}
    6590:	00006349 	.word	0x00006349

00006594 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6594:	b580      	push	{r7, lr}
    6596:	b082      	sub	sp, #8
    6598:	af00      	add	r7, sp, #0
    659a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    659c:	687b      	ldr	r3, [r7, #4]
    659e:	681b      	ldr	r3, [r3, #0]
    65a0:	f023 0202 	bic.w	r2, r3, #2
    65a4:	687b      	ldr	r3, [r7, #4]
    65a6:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    65a8:	2103      	movs	r1, #3
    65aa:	6878      	ldr	r0, [r7, #4]
    65ac:	4b02      	ldr	r3, [pc, #8]	; (65b8 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    65ae:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    65b0:	bf00      	nop
    65b2:	3708      	adds	r7, #8
    65b4:	46bd      	mov	sp, r7
    65b6:	bd80      	pop	{r7, pc}
    65b8:	00006349 	.word	0x00006349

000065bc <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    65bc:	b580      	push	{r7, lr}
    65be:	b084      	sub	sp, #16
    65c0:	af00      	add	r7, sp, #0
    65c2:	6078      	str	r0, [r7, #4]
    65c4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    65c6:	2103      	movs	r1, #3
    65c8:	6878      	ldr	r0, [r7, #4]
    65ca:	4b07      	ldr	r3, [pc, #28]	; (65e8 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    65cc:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    65ce:	687b      	ldr	r3, [r7, #4]
    65d0:	681b      	ldr	r3, [r3, #0]
    65d2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    65d4:	68fa      	ldr	r2, [r7, #12]
    65d6:	683b      	ldr	r3, [r7, #0]
    65d8:	4013      	ands	r3, r2
    65da:	60fb      	str	r3, [r7, #12]
	return tmp;
    65dc:	68fb      	ldr	r3, [r7, #12]
}
    65de:	4618      	mov	r0, r3
    65e0:	3710      	adds	r7, #16
    65e2:	46bd      	mov	sp, r7
    65e4:	bd80      	pop	{r7, pc}
    65e6:	bf00      	nop
    65e8:	00006349 	.word	0x00006349

000065ec <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    65ec:	b580      	push	{r7, lr}
    65ee:	b082      	sub	sp, #8
    65f0:	af00      	add	r7, sp, #0
    65f2:	6078      	str	r0, [r7, #4]
    65f4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    65f6:	687b      	ldr	r3, [r7, #4]
    65f8:	683a      	ldr	r2, [r7, #0]
    65fa:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    65fc:	2103      	movs	r1, #3
    65fe:	6878      	ldr	r0, [r7, #4]
    6600:	4b02      	ldr	r3, [pc, #8]	; (660c <hri_sercomspi_write_CTRLA_reg+0x20>)
    6602:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6604:	bf00      	nop
    6606:	3708      	adds	r7, #8
    6608:	46bd      	mov	sp, r7
    660a:	bd80      	pop	{r7, pc}
    660c:	00006349 	.word	0x00006349

00006610 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    6610:	b580      	push	{r7, lr}
    6612:	b082      	sub	sp, #8
    6614:	af00      	add	r7, sp, #0
    6616:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    6618:	687b      	ldr	r3, [r7, #4]
    661a:	685b      	ldr	r3, [r3, #4]
    661c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6620:	687b      	ldr	r3, [r7, #4]
    6622:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6624:	2104      	movs	r1, #4
    6626:	6878      	ldr	r0, [r7, #4]
    6628:	4b02      	ldr	r3, [pc, #8]	; (6634 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    662a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    662c:	bf00      	nop
    662e:	3708      	adds	r7, #8
    6630:	46bd      	mov	sp, r7
    6632:	bd80      	pop	{r7, pc}
    6634:	000062fd 	.word	0x000062fd

00006638 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    6638:	b580      	push	{r7, lr}
    663a:	b082      	sub	sp, #8
    663c:	af00      	add	r7, sp, #0
    663e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6640:	687b      	ldr	r3, [r7, #4]
    6642:	685b      	ldr	r3, [r3, #4]
    6644:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    6648:	687b      	ldr	r3, [r7, #4]
    664a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    664c:	2104      	movs	r1, #4
    664e:	6878      	ldr	r0, [r7, #4]
    6650:	4b02      	ldr	r3, [pc, #8]	; (665c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    6652:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6654:	bf00      	nop
    6656:	3708      	adds	r7, #8
    6658:	46bd      	mov	sp, r7
    665a:	bd80      	pop	{r7, pc}
    665c:	000062fd 	.word	0x000062fd

00006660 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    6660:	b580      	push	{r7, lr}
    6662:	b082      	sub	sp, #8
    6664:	af00      	add	r7, sp, #0
    6666:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6668:	687b      	ldr	r3, [r7, #4]
    666a:	685b      	ldr	r3, [r3, #4]
    666c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    6670:	687b      	ldr	r3, [r7, #4]
    6672:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6674:	2104      	movs	r1, #4
    6676:	6878      	ldr	r0, [r7, #4]
    6678:	4b02      	ldr	r3, [pc, #8]	; (6684 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    667a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    667c:	bf00      	nop
    667e:	3708      	adds	r7, #8
    6680:	46bd      	mov	sp, r7
    6682:	bd80      	pop	{r7, pc}
    6684:	000062fd 	.word	0x000062fd

00006688 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    6688:	b580      	push	{r7, lr}
    668a:	b082      	sub	sp, #8
    668c:	af00      	add	r7, sp, #0
    668e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6690:	687b      	ldr	r3, [r7, #4]
    6692:	685b      	ldr	r3, [r3, #4]
    6694:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    6698:	687b      	ldr	r3, [r7, #4]
    669a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    669c:	2104      	movs	r1, #4
    669e:	6878      	ldr	r0, [r7, #4]
    66a0:	4b02      	ldr	r3, [pc, #8]	; (66ac <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    66a2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    66a4:	bf00      	nop
    66a6:	3708      	adds	r7, #8
    66a8:	46bd      	mov	sp, r7
    66aa:	bd80      	pop	{r7, pc}
    66ac:	000062fd 	.word	0x000062fd

000066b0 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    66b0:	b580      	push	{r7, lr}
    66b2:	b082      	sub	sp, #8
    66b4:	af00      	add	r7, sp, #0
    66b6:	6078      	str	r0, [r7, #4]
    66b8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    66ba:	687b      	ldr	r3, [r7, #4]
    66bc:	685a      	ldr	r2, [r3, #4]
    66be:	683b      	ldr	r3, [r7, #0]
    66c0:	041b      	lsls	r3, r3, #16
    66c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    66c6:	431a      	orrs	r2, r3
    66c8:	687b      	ldr	r3, [r7, #4]
    66ca:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    66cc:	2104      	movs	r1, #4
    66ce:	6878      	ldr	r0, [r7, #4]
    66d0:	4b02      	ldr	r3, [pc, #8]	; (66dc <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    66d2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    66d4:	bf00      	nop
    66d6:	3708      	adds	r7, #8
    66d8:	46bd      	mov	sp, r7
    66da:	bd80      	pop	{r7, pc}
    66dc:	000062fd 	.word	0x000062fd

000066e0 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    66e0:	b580      	push	{r7, lr}
    66e2:	b082      	sub	sp, #8
    66e4:	af00      	add	r7, sp, #0
    66e6:	6078      	str	r0, [r7, #4]
    66e8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    66ea:	687b      	ldr	r3, [r7, #4]
    66ec:	683a      	ldr	r2, [r7, #0]
    66ee:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    66f0:	2104      	movs	r1, #4
    66f2:	6878      	ldr	r0, [r7, #4]
    66f4:	4b02      	ldr	r3, [pc, #8]	; (6700 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    66f6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    66f8:	bf00      	nop
    66fa:	3708      	adds	r7, #8
    66fc:	46bd      	mov	sp, r7
    66fe:	bd80      	pop	{r7, pc}
    6700:	000062fd 	.word	0x000062fd

00006704 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    6704:	b580      	push	{r7, lr}
    6706:	b082      	sub	sp, #8
    6708:	af00      	add	r7, sp, #0
    670a:	6078      	str	r0, [r7, #4]
    670c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    670e:	687b      	ldr	r3, [r7, #4]
    6710:	683a      	ldr	r2, [r7, #0]
    6712:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    6714:	2117      	movs	r1, #23
    6716:	6878      	ldr	r0, [r7, #4]
    6718:	4b02      	ldr	r3, [pc, #8]	; (6724 <hri_sercomspi_write_CTRLB_reg+0x20>)
    671a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    671c:	bf00      	nop
    671e:	3708      	adds	r7, #8
    6720:	46bd      	mov	sp, r7
    6722:	bd80      	pop	{r7, pc}
    6724:	00006349 	.word	0x00006349

00006728 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    6728:	b480      	push	{r7}
    672a:	b083      	sub	sp, #12
    672c:	af00      	add	r7, sp, #0
    672e:	6078      	str	r0, [r7, #4]
    6730:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6732:	687b      	ldr	r3, [r7, #4]
    6734:	683a      	ldr	r2, [r7, #0]
    6736:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6738:	bf00      	nop
    673a:	370c      	adds	r7, #12
    673c:	46bd      	mov	sp, r7
    673e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6742:	4770      	bx	lr

00006744 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    6744:	b480      	push	{r7}
    6746:	b083      	sub	sp, #12
    6748:	af00      	add	r7, sp, #0
    674a:	6078      	str	r0, [r7, #4]
    674c:	460b      	mov	r3, r1
    674e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6750:	687b      	ldr	r3, [r7, #4]
    6752:	78fa      	ldrb	r2, [r7, #3]
    6754:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6756:	bf00      	nop
    6758:	370c      	adds	r7, #12
    675a:	46bd      	mov	sp, r7
    675c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6760:	4770      	bx	lr
	...

00006764 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    6764:	b580      	push	{r7, lr}
    6766:	b084      	sub	sp, #16
    6768:	af00      	add	r7, sp, #0
    676a:	6078      	str	r0, [r7, #4]
    676c:	460b      	mov	r3, r1
    676e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6770:	687b      	ldr	r3, [r7, #4]
    6772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6774:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    6776:	68fb      	ldr	r3, [r7, #12]
    6778:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    677c:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    677e:	78fb      	ldrb	r3, [r7, #3]
    6780:	039b      	lsls	r3, r3, #14
    6782:	461a      	mov	r2, r3
    6784:	68fb      	ldr	r3, [r7, #12]
    6786:	4313      	orrs	r3, r2
    6788:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    678a:	687b      	ldr	r3, [r7, #4]
    678c:	68fa      	ldr	r2, [r7, #12]
    678e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6790:	2104      	movs	r1, #4
    6792:	6878      	ldr	r0, [r7, #4]
    6794:	4b02      	ldr	r3, [pc, #8]	; (67a0 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    6796:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6798:	bf00      	nop
    679a:	3710      	adds	r7, #16
    679c:	46bd      	mov	sp, r7
    679e:	bd80      	pop	{r7, pc}
    67a0:	000062fd 	.word	0x000062fd

000067a4 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    67a4:	b580      	push	{r7, lr}
    67a6:	b082      	sub	sp, #8
    67a8:	af00      	add	r7, sp, #0
    67aa:	6078      	str	r0, [r7, #4]
    67ac:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    67ae:	687b      	ldr	r3, [r7, #4]
    67b0:	683a      	ldr	r2, [r7, #0]
    67b2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    67b4:	2104      	movs	r1, #4
    67b6:	6878      	ldr	r0, [r7, #4]
    67b8:	4b02      	ldr	r3, [pc, #8]	; (67c4 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    67ba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    67bc:	bf00      	nop
    67be:	3708      	adds	r7, #8
    67c0:	46bd      	mov	sp, r7
    67c2:	bd80      	pop	{r7, pc}
    67c4:	000062fd 	.word	0x000062fd

000067c8 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    67c8:	b580      	push	{r7, lr}
    67ca:	b082      	sub	sp, #8
    67cc:	af00      	add	r7, sp, #0
    67ce:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    67d0:	2104      	movs	r1, #4
    67d2:	6878      	ldr	r0, [r7, #4]
    67d4:	4b03      	ldr	r3, [pc, #12]	; (67e4 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    67d6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    67d8:	687b      	ldr	r3, [r7, #4]
    67da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    67dc:	4618      	mov	r0, r3
    67de:	3708      	adds	r7, #8
    67e0:	46bd      	mov	sp, r7
    67e2:	bd80      	pop	{r7, pc}
    67e4:	000062fd 	.word	0x000062fd

000067e8 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    67e8:	b480      	push	{r7}
    67ea:	b083      	sub	sp, #12
    67ec:	af00      	add	r7, sp, #0
    67ee:	6078      	str	r0, [r7, #4]
    67f0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    67f2:	687b      	ldr	r3, [r7, #4]
    67f4:	683a      	ldr	r2, [r7, #0]
    67f6:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    67f8:	bf00      	nop
    67fa:	370c      	adds	r7, #12
    67fc:	46bd      	mov	sp, r7
    67fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    6802:	4770      	bx	lr

00006804 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    6804:	b580      	push	{r7, lr}
    6806:	b082      	sub	sp, #8
    6808:	af00      	add	r7, sp, #0
    680a:	6078      	str	r0, [r7, #4]
    680c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    680e:	687b      	ldr	r3, [r7, #4]
    6810:	683a      	ldr	r2, [r7, #0]
    6812:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6814:	2104      	movs	r1, #4
    6816:	6878      	ldr	r0, [r7, #4]
    6818:	4b02      	ldr	r3, [pc, #8]	; (6824 <hri_sercomi2cm_write_DATA_reg+0x20>)
    681a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    681c:	bf00      	nop
    681e:	3708      	adds	r7, #8
    6820:	46bd      	mov	sp, r7
    6822:	bd80      	pop	{r7, pc}
    6824:	000062fd 	.word	0x000062fd

00006828 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6828:	b580      	push	{r7, lr}
    682a:	b082      	sub	sp, #8
    682c:	af00      	add	r7, sp, #0
    682e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6830:	2104      	movs	r1, #4
    6832:	6878      	ldr	r0, [r7, #4]
    6834:	4b03      	ldr	r3, [pc, #12]	; (6844 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    6836:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6838:	687b      	ldr	r3, [r7, #4]
    683a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    683c:	4618      	mov	r0, r3
    683e:	3708      	adds	r7, #8
    6840:	46bd      	mov	sp, r7
    6842:	bd80      	pop	{r7, pc}
    6844:	000062fd 	.word	0x000062fd

00006848 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6848:	b480      	push	{r7}
    684a:	b083      	sub	sp, #12
    684c:	af00      	add	r7, sp, #0
    684e:	6078      	str	r0, [r7, #4]
    6850:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    6852:	687b      	ldr	r3, [r7, #4]
    6854:	683a      	ldr	r2, [r7, #0]
    6856:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6858:	bf00      	nop
    685a:	370c      	adds	r7, #12
    685c:	46bd      	mov	sp, r7
    685e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6862:	4770      	bx	lr

00006864 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    6864:	b480      	push	{r7}
    6866:	b083      	sub	sp, #12
    6868:	af00      	add	r7, sp, #0
    686a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    686c:	687b      	ldr	r3, [r7, #4]
    686e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6870:	4618      	mov	r0, r3
    6872:	370c      	adds	r7, #12
    6874:	46bd      	mov	sp, r7
    6876:	f85d 7b04 	ldr.w	r7, [sp], #4
    687a:	4770      	bx	lr

0000687c <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    687c:	b480      	push	{r7}
    687e:	b083      	sub	sp, #12
    6880:	af00      	add	r7, sp, #0
    6882:	6078      	str	r0, [r7, #4]
    6884:	460b      	mov	r3, r1
    6886:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6888:	687b      	ldr	r3, [r7, #4]
    688a:	78fa      	ldrb	r2, [r7, #3]
    688c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6890:	bf00      	nop
    6892:	370c      	adds	r7, #12
    6894:	46bd      	mov	sp, r7
    6896:	f85d 7b04 	ldr.w	r7, [sp], #4
    689a:	4770      	bx	lr

0000689c <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    689c:	b480      	push	{r7}
    689e:	b083      	sub	sp, #12
    68a0:	af00      	add	r7, sp, #0
    68a2:	6078      	str	r0, [r7, #4]
    68a4:	460b      	mov	r3, r1
    68a6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    68a8:	687b      	ldr	r3, [r7, #4]
    68aa:	887a      	ldrh	r2, [r7, #2]
    68ac:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    68ae:	bf00      	nop
    68b0:	370c      	adds	r7, #12
    68b2:	46bd      	mov	sp, r7
    68b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    68b8:	4770      	bx	lr
	...

000068bc <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    68bc:	b580      	push	{r7, lr}
    68be:	b082      	sub	sp, #8
    68c0:	af00      	add	r7, sp, #0
    68c2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    68c4:	2104      	movs	r1, #4
    68c6:	6878      	ldr	r0, [r7, #4]
    68c8:	4b06      	ldr	r3, [pc, #24]	; (68e4 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    68ca:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    68cc:	687b      	ldr	r3, [r7, #4]
    68ce:	8b5b      	ldrh	r3, [r3, #26]
    68d0:	b29b      	uxth	r3, r3
    68d2:	091b      	lsrs	r3, r3, #4
    68d4:	b29b      	uxth	r3, r3
    68d6:	f003 0303 	and.w	r3, r3, #3
    68da:	b29b      	uxth	r3, r3
}
    68dc:	4618      	mov	r0, r3
    68de:	3708      	adds	r7, #8
    68e0:	46bd      	mov	sp, r7
    68e2:	bd80      	pop	{r7, pc}
    68e4:	000062fd 	.word	0x000062fd

000068e8 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    68e8:	b580      	push	{r7, lr}
    68ea:	b082      	sub	sp, #8
    68ec:	af00      	add	r7, sp, #0
    68ee:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    68f0:	2104      	movs	r1, #4
    68f2:	6878      	ldr	r0, [r7, #4]
    68f4:	4b04      	ldr	r3, [pc, #16]	; (6908 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    68f6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    68f8:	687b      	ldr	r3, [r7, #4]
    68fa:	8b5b      	ldrh	r3, [r3, #26]
    68fc:	b29b      	uxth	r3, r3
}
    68fe:	4618      	mov	r0, r3
    6900:	3708      	adds	r7, #8
    6902:	46bd      	mov	sp, r7
    6904:	bd80      	pop	{r7, pc}
    6906:	bf00      	nop
    6908:	000062fd 	.word	0x000062fd

0000690c <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    690c:	b580      	push	{r7, lr}
    690e:	b082      	sub	sp, #8
    6910:	af00      	add	r7, sp, #0
    6912:	6078      	str	r0, [r7, #4]
    6914:	460b      	mov	r3, r1
    6916:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    6918:	687b      	ldr	r3, [r7, #4]
    691a:	887a      	ldrh	r2, [r7, #2]
    691c:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    691e:	2104      	movs	r1, #4
    6920:	6878      	ldr	r0, [r7, #4]
    6922:	4b03      	ldr	r3, [pc, #12]	; (6930 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    6924:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6926:	bf00      	nop
    6928:	3708      	adds	r7, #8
    692a:	46bd      	mov	sp, r7
    692c:	bd80      	pop	{r7, pc}
    692e:	bf00      	nop
    6930:	000062fd 	.word	0x000062fd

00006934 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6934:	b4b0      	push	{r4, r5, r7}
    6936:	b08d      	sub	sp, #52	; 0x34
    6938:	af00      	add	r7, sp, #0
    693a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    693c:	4b13      	ldr	r3, [pc, #76]	; (698c <_sercom_get_hardware_index+0x58>)
    693e:	f107 040c 	add.w	r4, r7, #12
    6942:	461d      	mov	r5, r3
    6944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6948:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    694c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6950:	2300      	movs	r3, #0
    6952:	62fb      	str	r3, [r7, #44]	; 0x2c
    6954:	e010      	b.n	6978 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6958:	009b      	lsls	r3, r3, #2
    695a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    695e:	4413      	add	r3, r2
    6960:	f853 3c24 	ldr.w	r3, [r3, #-36]
    6964:	461a      	mov	r2, r3
    6966:	687b      	ldr	r3, [r7, #4]
    6968:	429a      	cmp	r2, r3
    696a:	d102      	bne.n	6972 <_sercom_get_hardware_index+0x3e>
			return i;
    696c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    696e:	b2db      	uxtb	r3, r3
    6970:	e006      	b.n	6980 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6974:	3301      	adds	r3, #1
    6976:	62fb      	str	r3, [r7, #44]	; 0x2c
    6978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    697a:	2b07      	cmp	r3, #7
    697c:	d9eb      	bls.n	6956 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    697e:	2300      	movs	r3, #0
}
    6980:	4618      	mov	r0, r3
    6982:	3734      	adds	r7, #52	; 0x34
    6984:	46bd      	mov	sp, r7
    6986:	bcb0      	pop	{r4, r5, r7}
    6988:	4770      	bx	lr
    698a:	bf00      	nop
    698c:	0001022c 	.word	0x0001022c

00006990 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    6990:	b480      	push	{r7}
    6992:	b083      	sub	sp, #12
    6994:	af00      	add	r7, sp, #0
    6996:	6078      	str	r0, [r7, #4]
    6998:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM7) {
    699a:	687b      	ldr	r3, [r7, #4]
    699c:	4a05      	ldr	r2, [pc, #20]	; (69b4 <_sercom_init_irq_param+0x24>)
    699e:	4293      	cmp	r3, r2
    69a0:	d102      	bne.n	69a8 <_sercom_init_irq_param+0x18>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    69a2:	4a05      	ldr	r2, [pc, #20]	; (69b8 <_sercom_init_irq_param+0x28>)
    69a4:	683b      	ldr	r3, [r7, #0]
    69a6:	6013      	str	r3, [r2, #0]
	}
}
    69a8:	bf00      	nop
    69aa:	370c      	adds	r7, #12
    69ac:	46bd      	mov	sp, r7
    69ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    69b2:	4770      	bx	lr
    69b4:	43000c00 	.word	0x43000c00
    69b8:	20000bf4 	.word	0x20000bf4

000069bc <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    69bc:	b580      	push	{r7, lr}
    69be:	b084      	sub	sp, #16
    69c0:	af00      	add	r7, sp, #0
    69c2:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    69c4:	6878      	ldr	r0, [r7, #4]
    69c6:	4b13      	ldr	r3, [pc, #76]	; (6a14 <_get_i2cm_index+0x58>)
    69c8:	4798      	blx	r3
    69ca:	4603      	mov	r3, r0
    69cc:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    69ce:	2300      	movs	r3, #0
    69d0:	73fb      	strb	r3, [r7, #15]
    69d2:	e010      	b.n	69f6 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    69d4:	7bfa      	ldrb	r2, [r7, #15]
    69d6:	4910      	ldr	r1, [pc, #64]	; (6a18 <_get_i2cm_index+0x5c>)
    69d8:	4613      	mov	r3, r2
    69da:	005b      	lsls	r3, r3, #1
    69dc:	4413      	add	r3, r2
    69de:	00db      	lsls	r3, r3, #3
    69e0:	440b      	add	r3, r1
    69e2:	781b      	ldrb	r3, [r3, #0]
    69e4:	7bba      	ldrb	r2, [r7, #14]
    69e6:	429a      	cmp	r2, r3
    69e8:	d102      	bne.n	69f0 <_get_i2cm_index+0x34>
			return i;
    69ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
    69ee:	e00d      	b.n	6a0c <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    69f0:	7bfb      	ldrb	r3, [r7, #15]
    69f2:	3301      	adds	r3, #1
    69f4:	73fb      	strb	r3, [r7, #15]
    69f6:	7bfb      	ldrb	r3, [r7, #15]
    69f8:	2b02      	cmp	r3, #2
    69fa:	d9eb      	bls.n	69d4 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    69fc:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    6a00:	4906      	ldr	r1, [pc, #24]	; (6a1c <_get_i2cm_index+0x60>)
    6a02:	2000      	movs	r0, #0
    6a04:	4b06      	ldr	r3, [pc, #24]	; (6a20 <_get_i2cm_index+0x64>)
    6a06:	4798      	blx	r3
	return -1;
    6a08:	f04f 33ff 	mov.w	r3, #4294967295
}
    6a0c:	4618      	mov	r0, r3
    6a0e:	3710      	adds	r7, #16
    6a10:	46bd      	mov	sp, r7
    6a12:	bd80      	pop	{r7, pc}
    6a14:	00006935 	.word	0x00006935
    6a18:	20000018 	.word	0x20000018
    6a1c:	00010210 	.word	0x00010210
    6a20:	00003d61 	.word	0x00003d61

00006a24 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    6a24:	b580      	push	{r7, lr}
    6a26:	b082      	sub	sp, #8
    6a28:	af00      	add	r7, sp, #0
    6a2a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    6a2c:	2103      	movs	r1, #3
    6a2e:	6878      	ldr	r0, [r7, #4]
    6a30:	4b02      	ldr	r3, [pc, #8]	; (6a3c <_sercom_i2c_send_stop+0x18>)
    6a32:	4798      	blx	r3
}
    6a34:	bf00      	nop
    6a36:	3708      	adds	r7, #8
    6a38:	46bd      	mov	sp, r7
    6a3a:	bd80      	pop	{r7, pc}
    6a3c:	000066b1 	.word	0x000066b1

00006a40 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    6a40:	b590      	push	{r4, r7, lr}
    6a42:	b087      	sub	sp, #28
    6a44:	af00      	add	r7, sp, #0
    6a46:	60f8      	str	r0, [r7, #12]
    6a48:	60b9      	str	r1, [r7, #8]
    6a4a:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6a4c:	68f8      	ldr	r0, [r7, #12]
    6a4e:	4b7d      	ldr	r3, [pc, #500]	; (6c44 <_sercom_i2c_sync_analyse_flags+0x204>)
    6a50:	4798      	blx	r3
    6a52:	4603      	mov	r3, r0
    6a54:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    6a56:	68f8      	ldr	r0, [r7, #12]
    6a58:	4b7b      	ldr	r3, [pc, #492]	; (6c48 <_sercom_i2c_sync_analyse_flags+0x208>)
    6a5a:	4798      	blx	r3
    6a5c:	4603      	mov	r3, r0
    6a5e:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    6a60:	68bb      	ldr	r3, [r7, #8]
    6a62:	f003 0301 	and.w	r3, r3, #1
    6a66:	2b00      	cmp	r3, #0
    6a68:	f000 8095 	beq.w	6b96 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6a6c:	8a7b      	ldrh	r3, [r7, #18]
    6a6e:	f003 0302 	and.w	r3, r3, #2
    6a72:	2b00      	cmp	r3, #0
    6a74:	d01d      	beq.n	6ab2 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    6a76:	68f8      	ldr	r0, [r7, #12]
    6a78:	4b74      	ldr	r3, [pc, #464]	; (6c4c <_sercom_i2c_sync_analyse_flags+0x20c>)
    6a7a:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6a7c:	687b      	ldr	r3, [r7, #4]
    6a7e:	885b      	ldrh	r3, [r3, #2]
    6a80:	b29b      	uxth	r3, r3
    6a82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6a86:	b29a      	uxth	r2, r3
    6a88:	687b      	ldr	r3, [r7, #4]
    6a8a:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6a8c:	687b      	ldr	r3, [r7, #4]
    6a8e:	885b      	ldrh	r3, [r3, #2]
    6a90:	b29b      	uxth	r3, r3
    6a92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6a96:	b29a      	uxth	r2, r3
    6a98:	687b      	ldr	r3, [r7, #4]
    6a9a:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6a9c:	8a7b      	ldrh	r3, [r7, #18]
    6a9e:	f003 0301 	and.w	r3, r3, #1
    6aa2:	2b00      	cmp	r3, #0
    6aa4:	d002      	beq.n	6aac <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    6aa6:	f06f 0304 	mvn.w	r3, #4
    6aaa:	e0c6      	b.n	6c3a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6aac:	f06f 0303 	mvn.w	r3, #3
    6ab0:	e0c3      	b.n	6c3a <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6ab2:	8a7b      	ldrh	r3, [r7, #18]
    6ab4:	f003 0304 	and.w	r3, r3, #4
    6ab8:	2b00      	cmp	r3, #0
    6aba:	d01f      	beq.n	6afc <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6abc:	687b      	ldr	r3, [r7, #4]
    6abe:	685b      	ldr	r3, [r3, #4]
    6ac0:	2b00      	cmp	r3, #0
    6ac2:	dd07      	ble.n	6ad4 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6ac4:	687b      	ldr	r3, [r7, #4]
    6ac6:	885b      	ldrh	r3, [r3, #2]
    6ac8:	b29b      	uxth	r3, r3
    6aca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6ace:	b29a      	uxth	r2, r3
    6ad0:	687b      	ldr	r3, [r7, #4]
    6ad2:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6ad4:	687b      	ldr	r3, [r7, #4]
    6ad6:	885b      	ldrh	r3, [r3, #2]
    6ad8:	b29b      	uxth	r3, r3
    6ada:	b21b      	sxth	r3, r3
    6adc:	2b00      	cmp	r3, #0
    6ade:	da02      	bge.n	6ae6 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6ae0:	68f8      	ldr	r0, [r7, #12]
    6ae2:	4b5b      	ldr	r3, [pc, #364]	; (6c50 <_sercom_i2c_sync_analyse_flags+0x210>)
    6ae4:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6ae6:	687b      	ldr	r3, [r7, #4]
    6ae8:	885b      	ldrh	r3, [r3, #2]
    6aea:	b29b      	uxth	r3, r3
    6aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6af0:	b29a      	uxth	r2, r3
    6af2:	687b      	ldr	r3, [r7, #4]
    6af4:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    6af6:	f06f 0301 	mvn.w	r3, #1
    6afa:	e09e      	b.n	6c3a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6afc:	687b      	ldr	r3, [r7, #4]
    6afe:	885b      	ldrh	r3, [r3, #2]
    6b00:	b29b      	uxth	r3, r3
    6b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6b06:	2b00      	cmp	r3, #0
    6b08:	d01c      	beq.n	6b44 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6b0a:	687b      	ldr	r3, [r7, #4]
    6b0c:	881b      	ldrh	r3, [r3, #0]
    6b0e:	121b      	asrs	r3, r3, #8
    6b10:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6b12:	f003 0406 	and.w	r4, r3, #6
    6b16:	68f8      	ldr	r0, [r7, #12]
    6b18:	4b4e      	ldr	r3, [pc, #312]	; (6c54 <_sercom_i2c_sync_analyse_flags+0x214>)
    6b1a:	4798      	blx	r3
    6b1c:	4603      	mov	r3, r0
    6b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6b22:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    6b24:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6b28:	4619      	mov	r1, r3
    6b2a:	68f8      	ldr	r0, [r7, #12]
    6b2c:	4b4a      	ldr	r3, [pc, #296]	; (6c58 <_sercom_i2c_sync_analyse_flags+0x218>)
    6b2e:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6b30:	687b      	ldr	r3, [r7, #4]
    6b32:	885b      	ldrh	r3, [r3, #2]
    6b34:	b29b      	uxth	r3, r3
    6b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6b3a:	b29a      	uxth	r2, r3
    6b3c:	687b      	ldr	r3, [r7, #4]
    6b3e:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6b40:	2300      	movs	r3, #0
    6b42:	e07a      	b.n	6c3a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6b44:	687b      	ldr	r3, [r7, #4]
    6b46:	685b      	ldr	r3, [r3, #4]
    6b48:	2b00      	cmp	r3, #0
    6b4a:	d111      	bne.n	6b70 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6b4c:	687b      	ldr	r3, [r7, #4]
    6b4e:	885b      	ldrh	r3, [r3, #2]
    6b50:	b29b      	uxth	r3, r3
    6b52:	b21b      	sxth	r3, r3
    6b54:	2b00      	cmp	r3, #0
    6b56:	da02      	bge.n	6b5e <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    6b58:	68f8      	ldr	r0, [r7, #12]
    6b5a:	4b3d      	ldr	r3, [pc, #244]	; (6c50 <_sercom_i2c_sync_analyse_flags+0x210>)
    6b5c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6b5e:	687b      	ldr	r3, [r7, #4]
    6b60:	885b      	ldrh	r3, [r3, #2]
    6b62:	b29b      	uxth	r3, r3
    6b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6b68:	b29a      	uxth	r2, r3
    6b6a:	687b      	ldr	r3, [r7, #4]
    6b6c:	805a      	strh	r2, [r3, #2]
    6b6e:	e010      	b.n	6b92 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6b70:	687b      	ldr	r3, [r7, #4]
    6b72:	689b      	ldr	r3, [r3, #8]
    6b74:	781b      	ldrb	r3, [r3, #0]
    6b76:	4619      	mov	r1, r3
    6b78:	68f8      	ldr	r0, [r7, #12]
    6b7a:	4b38      	ldr	r3, [pc, #224]	; (6c5c <_sercom_i2c_sync_analyse_flags+0x21c>)
    6b7c:	4798      	blx	r3
				msg->buffer++;
    6b7e:	687b      	ldr	r3, [r7, #4]
    6b80:	689b      	ldr	r3, [r3, #8]
    6b82:	1c5a      	adds	r2, r3, #1
    6b84:	687b      	ldr	r3, [r7, #4]
    6b86:	609a      	str	r2, [r3, #8]
				msg->len--;
    6b88:	687b      	ldr	r3, [r7, #4]
    6b8a:	685b      	ldr	r3, [r3, #4]
    6b8c:	1e5a      	subs	r2, r3, #1
    6b8e:	687b      	ldr	r3, [r7, #4]
    6b90:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    6b92:	2300      	movs	r3, #0
    6b94:	e051      	b.n	6c3a <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    6b96:	68bb      	ldr	r3, [r7, #8]
    6b98:	f003 0302 	and.w	r3, r3, #2
    6b9c:	2b00      	cmp	r3, #0
    6b9e:	d04b      	beq.n	6c38 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6ba0:	687b      	ldr	r3, [r7, #4]
    6ba2:	685b      	ldr	r3, [r3, #4]
    6ba4:	2b00      	cmp	r3, #0
    6ba6:	d041      	beq.n	6c2c <_sercom_i2c_sync_analyse_flags+0x1ec>
    6ba8:	8a7b      	ldrh	r3, [r7, #18]
    6baa:	f003 0304 	and.w	r3, r3, #4
    6bae:	2b00      	cmp	r3, #0
    6bb0:	d13c      	bne.n	6c2c <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    6bb2:	687b      	ldr	r3, [r7, #4]
    6bb4:	685b      	ldr	r3, [r3, #4]
    6bb6:	1e5a      	subs	r2, r3, #1
    6bb8:	687b      	ldr	r3, [r7, #4]
    6bba:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6bbc:	687b      	ldr	r3, [r7, #4]
    6bbe:	685b      	ldr	r3, [r3, #4]
    6bc0:	2b00      	cmp	r3, #0
    6bc2:	d102      	bne.n	6bca <_sercom_i2c_sync_analyse_flags+0x18a>
    6bc4:	697b      	ldr	r3, [r7, #20]
    6bc6:	2b00      	cmp	r3, #0
    6bc8:	d006      	beq.n	6bd8 <_sercom_i2c_sync_analyse_flags+0x198>
    6bca:	687b      	ldr	r3, [r7, #4]
    6bcc:	685b      	ldr	r3, [r3, #4]
    6bce:	2b01      	cmp	r3, #1
    6bd0:	d105      	bne.n	6bde <_sercom_i2c_sync_analyse_flags+0x19e>
    6bd2:	697b      	ldr	r3, [r7, #20]
    6bd4:	2b00      	cmp	r3, #0
    6bd6:	d002      	beq.n	6bde <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6bd8:	68f8      	ldr	r0, [r7, #12]
    6bda:	4b21      	ldr	r3, [pc, #132]	; (6c60 <_sercom_i2c_sync_analyse_flags+0x220>)
    6bdc:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6bde:	687b      	ldr	r3, [r7, #4]
    6be0:	685b      	ldr	r3, [r3, #4]
    6be2:	2b00      	cmp	r3, #0
    6be4:	d113      	bne.n	6c0e <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    6be6:	687b      	ldr	r3, [r7, #4]
    6be8:	885b      	ldrh	r3, [r3, #2]
    6bea:	b29b      	uxth	r3, r3
    6bec:	b21b      	sxth	r3, r3
    6bee:	2b00      	cmp	r3, #0
    6bf0:	da05      	bge.n	6bfe <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6bf2:	68f8      	ldr	r0, [r7, #12]
    6bf4:	4b1b      	ldr	r3, [pc, #108]	; (6c64 <_sercom_i2c_sync_analyse_flags+0x224>)
    6bf6:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6bf8:	68f8      	ldr	r0, [r7, #12]
    6bfa:	4b15      	ldr	r3, [pc, #84]	; (6c50 <_sercom_i2c_sync_analyse_flags+0x210>)
    6bfc:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6bfe:	687b      	ldr	r3, [r7, #4]
    6c00:	885b      	ldrh	r3, [r3, #2]
    6c02:	b29b      	uxth	r3, r3
    6c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6c08:	b29a      	uxth	r2, r3
    6c0a:	687b      	ldr	r3, [r7, #4]
    6c0c:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6c0e:	687b      	ldr	r3, [r7, #4]
    6c10:	689c      	ldr	r4, [r3, #8]
    6c12:	1c62      	adds	r2, r4, #1
    6c14:	687b      	ldr	r3, [r7, #4]
    6c16:	609a      	str	r2, [r3, #8]
    6c18:	68f8      	ldr	r0, [r7, #12]
    6c1a:	4b13      	ldr	r3, [pc, #76]	; (6c68 <_sercom_i2c_sync_analyse_flags+0x228>)
    6c1c:	4798      	blx	r3
    6c1e:	4603      	mov	r3, r0
    6c20:	b2db      	uxtb	r3, r3
    6c22:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6c24:	68f8      	ldr	r0, [r7, #12]
    6c26:	4b11      	ldr	r3, [pc, #68]	; (6c6c <_sercom_i2c_sync_analyse_flags+0x22c>)
    6c28:	4798      	blx	r3
    6c2a:	e005      	b.n	6c38 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6c2c:	68f8      	ldr	r0, [r7, #12]
    6c2e:	4b0f      	ldr	r3, [pc, #60]	; (6c6c <_sercom_i2c_sync_analyse_flags+0x22c>)
    6c30:	4798      	blx	r3
			return I2C_NACK;
    6c32:	f06f 0301 	mvn.w	r3, #1
    6c36:	e000      	b.n	6c3a <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    6c38:	2300      	movs	r3, #0
}
    6c3a:	4618      	mov	r0, r3
    6c3c:	371c      	adds	r7, #28
    6c3e:	46bd      	mov	sp, r7
    6c40:	bd90      	pop	{r4, r7, pc}
    6c42:	bf00      	nop
    6c44:	000064b1 	.word	0x000064b1
    6c48:	000068e9 	.word	0x000068e9
    6c4c:	00006395 	.word	0x00006395
    6c50:	00006a25 	.word	0x00006a25
    6c54:	000067c9 	.word	0x000067c9
    6c58:	000067a5 	.word	0x000067a5
    6c5c:	00006805 	.word	0x00006805
    6c60:	00006661 	.word	0x00006661
    6c64:	00006639 	.word	0x00006639
    6c68:	00006829 	.word	0x00006829
    6c6c:	000063af 	.word	0x000063af

00006c70 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    6c70:	b580      	push	{r7, lr}
    6c72:	b086      	sub	sp, #24
    6c74:	af00      	add	r7, sp, #0
    6c76:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    6c78:	687b      	ldr	r3, [r7, #4]
    6c7a:	691b      	ldr	r3, [r3, #16]
    6c7c:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6c7e:	6938      	ldr	r0, [r7, #16]
    6c80:	4b37      	ldr	r3, [pc, #220]	; (6d60 <_sercom_i2c_m_irq_handler+0xf0>)
    6c82:	4798      	blx	r3
    6c84:	4603      	mov	r3, r0
    6c86:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    6c88:	2300      	movs	r3, #0
    6c8a:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    6c8c:	687b      	ldr	r3, [r7, #4]
    6c8e:	2b00      	cmp	r3, #0
    6c90:	bf14      	ite	ne
    6c92:	2301      	movne	r3, #1
    6c94:	2300      	moveq	r3, #0
    6c96:	b2db      	uxtb	r3, r3
    6c98:	f240 421e 	movw	r2, #1054	; 0x41e
    6c9c:	4931      	ldr	r1, [pc, #196]	; (6d64 <_sercom_i2c_m_irq_handler+0xf4>)
    6c9e:	4618      	mov	r0, r3
    6ca0:	4b31      	ldr	r3, [pc, #196]	; (6d68 <_sercom_i2c_m_irq_handler+0xf8>)
    6ca2:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6ca4:	687b      	ldr	r3, [r7, #4]
    6ca6:	691b      	ldr	r3, [r3, #16]
    6ca8:	2b00      	cmp	r3, #0
    6caa:	bf14      	ite	ne
    6cac:	2301      	movne	r3, #1
    6cae:	2300      	moveq	r3, #0
    6cb0:	b2db      	uxtb	r3, r3
    6cb2:	f240 421f 	movw	r2, #1055	; 0x41f
    6cb6:	492b      	ldr	r1, [pc, #172]	; (6d64 <_sercom_i2c_m_irq_handler+0xf4>)
    6cb8:	4618      	mov	r0, r3
    6cba:	4b2b      	ldr	r3, [pc, #172]	; (6d68 <_sercom_i2c_m_irq_handler+0xf8>)
    6cbc:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    6cbe:	bf00      	nop
    6cc0:	68fb      	ldr	r3, [r7, #12]
    6cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6cc6:	2b00      	cmp	r3, #0
    6cc8:	d126      	bne.n	6d18 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6cca:	687b      	ldr	r3, [r7, #4]
    6ccc:	461a      	mov	r2, r3
    6cce:	68f9      	ldr	r1, [r7, #12]
    6cd0:	6938      	ldr	r0, [r7, #16]
    6cd2:	4b26      	ldr	r3, [pc, #152]	; (6d6c <_sercom_i2c_m_irq_handler+0xfc>)
    6cd4:	4798      	blx	r3
    6cd6:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    6cd8:	697b      	ldr	r3, [r7, #20]
    6cda:	2b00      	cmp	r3, #0
    6cdc:	d11b      	bne.n	6d16 <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    6cde:	68fb      	ldr	r3, [r7, #12]
    6ce0:	f003 0301 	and.w	r3, r3, #1
    6ce4:	2b00      	cmp	r3, #0
    6ce6:	d008      	beq.n	6cfa <_sercom_i2c_m_irq_handler+0x8a>
    6ce8:	687b      	ldr	r3, [r7, #4]
    6cea:	699b      	ldr	r3, [r3, #24]
    6cec:	2b00      	cmp	r3, #0
    6cee:	d004      	beq.n	6cfa <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    6cf0:	687b      	ldr	r3, [r7, #4]
    6cf2:	699b      	ldr	r3, [r3, #24]
    6cf4:	6878      	ldr	r0, [r7, #4]
    6cf6:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    6cf8:	e02e      	b.n	6d58 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6cfa:	68fb      	ldr	r3, [r7, #12]
    6cfc:	f003 0302 	and.w	r3, r3, #2
    6d00:	2b00      	cmp	r3, #0
    6d02:	d029      	beq.n	6d58 <_sercom_i2c_m_irq_handler+0xe8>
    6d04:	687b      	ldr	r3, [r7, #4]
    6d06:	69db      	ldr	r3, [r3, #28]
    6d08:	2b00      	cmp	r3, #0
    6d0a:	d025      	beq.n	6d58 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    6d0c:	687b      	ldr	r3, [r7, #4]
    6d0e:	69db      	ldr	r3, [r3, #28]
    6d10:	6878      	ldr	r0, [r7, #4]
    6d12:	4798      	blx	r3
		return;
    6d14:	e020      	b.n	6d58 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    6d16:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6d18:	687b      	ldr	r3, [r7, #4]
    6d1a:	885b      	ldrh	r3, [r3, #2]
    6d1c:	b29b      	uxth	r3, r3
    6d1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6d22:	b29a      	uxth	r2, r3
    6d24:	687b      	ldr	r3, [r7, #4]
    6d26:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    6d28:	687b      	ldr	r3, [r7, #4]
    6d2a:	695b      	ldr	r3, [r3, #20]
    6d2c:	2b00      	cmp	r3, #0
    6d2e:	d014      	beq.n	6d5a <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    6d30:	697b      	ldr	r3, [r7, #20]
    6d32:	2b00      	cmp	r3, #0
    6d34:	d005      	beq.n	6d42 <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    6d36:	687b      	ldr	r3, [r7, #4]
    6d38:	695b      	ldr	r3, [r3, #20]
    6d3a:	6979      	ldr	r1, [r7, #20]
    6d3c:	6878      	ldr	r0, [r7, #4]
    6d3e:	4798      	blx	r3
    6d40:	e005      	b.n	6d4e <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    6d42:	687b      	ldr	r3, [r7, #4]
    6d44:	695b      	ldr	r3, [r3, #20]
    6d46:	f06f 0104 	mvn.w	r1, #4
    6d4a:	6878      	ldr	r0, [r7, #4]
    6d4c:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    6d4e:	2180      	movs	r1, #128	; 0x80
    6d50:	6938      	ldr	r0, [r7, #16]
    6d52:	4b07      	ldr	r3, [pc, #28]	; (6d70 <_sercom_i2c_m_irq_handler+0x100>)
    6d54:	4798      	blx	r3
    6d56:	e000      	b.n	6d5a <_sercom_i2c_m_irq_handler+0xea>
		return;
    6d58:	bf00      	nop
	}
}
    6d5a:	3718      	adds	r7, #24
    6d5c:	46bd      	mov	sp, r7
    6d5e:	bd80      	pop	{r7, pc}
    6d60:	000063c9 	.word	0x000063c9
    6d64:	00010210 	.word	0x00010210
    6d68:	00003d61 	.word	0x00003d61
    6d6c:	00006a41 	.word	0x00006a41
    6d70:	000063e3 	.word	0x000063e3

00006d74 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    6d74:	b580      	push	{r7, lr}
    6d76:	b082      	sub	sp, #8
    6d78:	af00      	add	r7, sp, #0
    6d7a:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    6d7c:	6878      	ldr	r0, [r7, #4]
    6d7e:	4b05      	ldr	r3, [pc, #20]	; (6d94 <_sercom_get_irq_num+0x20>)
    6d80:	4798      	blx	r3
    6d82:	4603      	mov	r3, r0
    6d84:	009b      	lsls	r3, r3, #2
    6d86:	b2db      	uxtb	r3, r3
    6d88:	332e      	adds	r3, #46	; 0x2e
    6d8a:	b2db      	uxtb	r3, r3
}
    6d8c:	4618      	mov	r0, r3
    6d8e:	3708      	adds	r7, #8
    6d90:	46bd      	mov	sp, r7
    6d92:	bd80      	pop	{r7, pc}
    6d94:	00006935 	.word	0x00006935

00006d98 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    6d98:	b580      	push	{r7, lr}
    6d9a:	b086      	sub	sp, #24
    6d9c:	af00      	add	r7, sp, #0
    6d9e:	6078      	str	r0, [r7, #4]
    6da0:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    6da2:	687b      	ldr	r3, [r7, #4]
    6da4:	2b00      	cmp	r3, #0
    6da6:	bf14      	ite	ne
    6da8:	2301      	movne	r3, #1
    6daa:	2300      	moveq	r3, #0
    6dac:	b2db      	uxtb	r3, r3
    6dae:	f240 4292 	movw	r2, #1170	; 0x492
    6db2:	491d      	ldr	r1, [pc, #116]	; (6e28 <_i2c_m_async_init+0x90>)
    6db4:	4618      	mov	r0, r3
    6db6:	4b1d      	ldr	r3, [pc, #116]	; (6e2c <_i2c_m_async_init+0x94>)
    6db8:	4798      	blx	r3

	i2c_dev->hw = hw;
    6dba:	687b      	ldr	r3, [r7, #4]
    6dbc:	683a      	ldr	r2, [r7, #0]
    6dbe:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6dc0:	687b      	ldr	r3, [r7, #4]
    6dc2:	6839      	ldr	r1, [r7, #0]
    6dc4:	4618      	mov	r0, r3
    6dc6:	4b1a      	ldr	r3, [pc, #104]	; (6e30 <_i2c_m_async_init+0x98>)
    6dc8:	4798      	blx	r3
    6dca:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    6dcc:	68fb      	ldr	r3, [r7, #12]
    6dce:	2b00      	cmp	r3, #0
    6dd0:	d001      	beq.n	6dd6 <_i2c_m_async_init+0x3e>
		return init_status;
    6dd2:	68fb      	ldr	r3, [r7, #12]
    6dd4:	e024      	b.n	6e20 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    6dd6:	6879      	ldr	r1, [r7, #4]
    6dd8:	6838      	ldr	r0, [r7, #0]
    6dda:	4b16      	ldr	r3, [pc, #88]	; (6e34 <_i2c_m_async_init+0x9c>)
    6ddc:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6dde:	6838      	ldr	r0, [r7, #0]
    6de0:	4b15      	ldr	r3, [pc, #84]	; (6e38 <_i2c_m_async_init+0xa0>)
    6de2:	4798      	blx	r3
    6de4:	4603      	mov	r3, r0
    6de6:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6de8:	2300      	movs	r3, #0
    6dea:	613b      	str	r3, [r7, #16]
    6dec:	e014      	b.n	6e18 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    6dee:	7dfb      	ldrb	r3, [r7, #23]
    6df0:	b21b      	sxth	r3, r3
    6df2:	4618      	mov	r0, r3
    6df4:	4b11      	ldr	r3, [pc, #68]	; (6e3c <_i2c_m_async_init+0xa4>)
    6df6:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    6df8:	7dfb      	ldrb	r3, [r7, #23]
    6dfa:	b21b      	sxth	r3, r3
    6dfc:	4618      	mov	r0, r3
    6dfe:	4b10      	ldr	r3, [pc, #64]	; (6e40 <_i2c_m_async_init+0xa8>)
    6e00:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    6e02:	7dfb      	ldrb	r3, [r7, #23]
    6e04:	b21b      	sxth	r3, r3
    6e06:	4618      	mov	r0, r3
    6e08:	4b0e      	ldr	r3, [pc, #56]	; (6e44 <_i2c_m_async_init+0xac>)
    6e0a:	4798      	blx	r3
		irq++;
    6e0c:	7dfb      	ldrb	r3, [r7, #23]
    6e0e:	3301      	adds	r3, #1
    6e10:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6e12:	693b      	ldr	r3, [r7, #16]
    6e14:	3301      	adds	r3, #1
    6e16:	613b      	str	r3, [r7, #16]
    6e18:	693b      	ldr	r3, [r7, #16]
    6e1a:	2b03      	cmp	r3, #3
    6e1c:	d9e7      	bls.n	6dee <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    6e1e:	2300      	movs	r3, #0
}
    6e20:	4618      	mov	r0, r3
    6e22:	3718      	adds	r7, #24
    6e24:	46bd      	mov	sp, r7
    6e26:	bd80      	pop	{r7, pc}
    6e28:	00010210 	.word	0x00010210
    6e2c:	00003d61 	.word	0x00003d61
    6e30:	0000741d 	.word	0x0000741d
    6e34:	00006991 	.word	0x00006991
    6e38:	00006d75 	.word	0x00006d75
    6e3c:	0000627d 	.word	0x0000627d
    6e40:	000062c1 	.word	0x000062c1
    6e44:	00006241 	.word	0x00006241

00006e48 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    6e48:	b590      	push	{r4, r7, lr}
    6e4a:	b087      	sub	sp, #28
    6e4c:	af00      	add	r7, sp, #0
    6e4e:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6e50:	687b      	ldr	r3, [r7, #4]
    6e52:	691b      	ldr	r3, [r3, #16]
    6e54:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6e56:	687b      	ldr	r3, [r7, #4]
    6e58:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6e5a:	6978      	ldr	r0, [r7, #20]
    6e5c:	4b33      	ldr	r3, [pc, #204]	; (6f2c <_sercom_i2c_send_address+0xe4>)
    6e5e:	4798      	blx	r3
    6e60:	4603      	mov	r3, r0
    6e62:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    6e64:	687b      	ldr	r3, [r7, #4]
    6e66:	2b00      	cmp	r3, #0
    6e68:	bf14      	ite	ne
    6e6a:	2301      	movne	r3, #1
    6e6c:	2300      	moveq	r3, #0
    6e6e:	b2db      	uxtb	r3, r3
    6e70:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
    6e74:	492e      	ldr	r1, [pc, #184]	; (6f30 <_sercom_i2c_send_address+0xe8>)
    6e76:	4618      	mov	r0, r3
    6e78:	4b2e      	ldr	r3, [pc, #184]	; (6f34 <_sercom_i2c_send_address+0xec>)
    6e7a:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6e7c:	693b      	ldr	r3, [r7, #16]
    6e7e:	685b      	ldr	r3, [r3, #4]
    6e80:	2b01      	cmp	r3, #1
    6e82:	d106      	bne.n	6e92 <_sercom_i2c_send_address+0x4a>
    6e84:	68fb      	ldr	r3, [r7, #12]
    6e86:	2b00      	cmp	r3, #0
    6e88:	d003      	beq.n	6e92 <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6e8a:	6978      	ldr	r0, [r7, #20]
    6e8c:	4b2a      	ldr	r3, [pc, #168]	; (6f38 <_sercom_i2c_send_address+0xf0>)
    6e8e:	4798      	blx	r3
    6e90:	e002      	b.n	6e98 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6e92:	6978      	ldr	r0, [r7, #20]
    6e94:	4b29      	ldr	r3, [pc, #164]	; (6f3c <_sercom_i2c_send_address+0xf4>)
    6e96:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6e98:	693b      	ldr	r3, [r7, #16]
    6e9a:	881b      	ldrh	r3, [r3, #0]
    6e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6ea0:	2b00      	cmp	r3, #0
    6ea2:	d022      	beq.n	6eea <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6ea4:	693b      	ldr	r3, [r7, #16]
    6ea6:	885b      	ldrh	r3, [r3, #2]
    6ea8:	b29b      	uxth	r3, r3
    6eaa:	f003 0301 	and.w	r3, r3, #1
    6eae:	2b00      	cmp	r3, #0
    6eb0:	d007      	beq.n	6ec2 <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6eb2:	693b      	ldr	r3, [r7, #16]
    6eb4:	885b      	ldrh	r3, [r3, #2]
    6eb6:	b29b      	uxth	r3, r3
    6eb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6ebc:	b29a      	uxth	r2, r3
    6ebe:	693b      	ldr	r3, [r7, #16]
    6ec0:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    6ec2:	693b      	ldr	r3, [r7, #16]
    6ec4:	881b      	ldrh	r3, [r3, #0]
    6ec6:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6ec8:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6ecc:	401c      	ands	r4, r3
    6ece:	6978      	ldr	r0, [r7, #20]
    6ed0:	4b1b      	ldr	r3, [pc, #108]	; (6f40 <_sercom_i2c_send_address+0xf8>)
    6ed2:	4798      	blx	r3
    6ed4:	4603      	mov	r3, r0
    6ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6eda:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6ee0:	4619      	mov	r1, r3
    6ee2:	6978      	ldr	r0, [r7, #20]
    6ee4:	4b17      	ldr	r3, [pc, #92]	; (6f44 <_sercom_i2c_send_address+0xfc>)
    6ee6:	4798      	blx	r3
    6ee8:	e01a      	b.n	6f20 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6eea:	693b      	ldr	r3, [r7, #16]
    6eec:	881b      	ldrh	r3, [r3, #0]
    6eee:	005b      	lsls	r3, r3, #1
    6ef0:	b2db      	uxtb	r3, r3
    6ef2:	693a      	ldr	r2, [r7, #16]
    6ef4:	8852      	ldrh	r2, [r2, #2]
    6ef6:	b292      	uxth	r2, r2
    6ef8:	f002 0201 	and.w	r2, r2, #1
    6efc:	2a00      	cmp	r2, #0
    6efe:	bf14      	ite	ne
    6f00:	2201      	movne	r2, #1
    6f02:	2200      	moveq	r2, #0
    6f04:	b2d2      	uxtb	r2, r2
    6f06:	4313      	orrs	r3, r2
    6f08:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6f0a:	6978      	ldr	r0, [r7, #20]
    6f0c:	4b0c      	ldr	r3, [pc, #48]	; (6f40 <_sercom_i2c_send_address+0xf8>)
    6f0e:	4798      	blx	r3
    6f10:	4603      	mov	r3, r0
    6f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6f16:	4323      	orrs	r3, r4
    6f18:	4619      	mov	r1, r3
    6f1a:	6978      	ldr	r0, [r7, #20]
    6f1c:	4b09      	ldr	r3, [pc, #36]	; (6f44 <_sercom_i2c_send_address+0xfc>)
    6f1e:	4798      	blx	r3
	}

	return ERR_NONE;
    6f20:	2300      	movs	r3, #0
}
    6f22:	4618      	mov	r0, r3
    6f24:	371c      	adds	r7, #28
    6f26:	46bd      	mov	sp, r7
    6f28:	bd90      	pop	{r4, r7, pc}
    6f2a:	bf00      	nop
    6f2c:	000064b1 	.word	0x000064b1
    6f30:	00010210 	.word	0x00010210
    6f34:	00003d61 	.word	0x00003d61
    6f38:	00006661 	.word	0x00006661
    6f3c:	00006689 	.word	0x00006689
    6f40:	000067c9 	.word	0x000067c9
    6f44:	000067a5 	.word	0x000067a5

00006f48 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    6f48:	b580      	push	{r7, lr}
    6f4a:	b084      	sub	sp, #16
    6f4c:	af00      	add	r7, sp, #0
    6f4e:	6078      	str	r0, [r7, #4]
    6f50:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    6f52:	687b      	ldr	r3, [r7, #4]
    6f54:	2b00      	cmp	r3, #0
    6f56:	bf14      	ite	ne
    6f58:	2301      	movne	r3, #1
    6f5a:	2300      	moveq	r3, #0
    6f5c:	b2db      	uxtb	r3, r3
    6f5e:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
    6f62:	492a      	ldr	r1, [pc, #168]	; (700c <_i2c_m_async_transfer+0xc4>)
    6f64:	4618      	mov	r0, r3
    6f66:	4b2a      	ldr	r3, [pc, #168]	; (7010 <_i2c_m_async_transfer+0xc8>)
    6f68:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6f6a:	687b      	ldr	r3, [r7, #4]
    6f6c:	691b      	ldr	r3, [r3, #16]
    6f6e:	2b00      	cmp	r3, #0
    6f70:	bf14      	ite	ne
    6f72:	2301      	movne	r3, #1
    6f74:	2300      	moveq	r3, #0
    6f76:	b2db      	uxtb	r3, r3
    6f78:	f240 42e9 	movw	r2, #1257	; 0x4e9
    6f7c:	4923      	ldr	r1, [pc, #140]	; (700c <_i2c_m_async_transfer+0xc4>)
    6f7e:	4618      	mov	r0, r3
    6f80:	4b23      	ldr	r3, [pc, #140]	; (7010 <_i2c_m_async_transfer+0xc8>)
    6f82:	4798      	blx	r3
	ASSERT(msg);
    6f84:	683b      	ldr	r3, [r7, #0]
    6f86:	2b00      	cmp	r3, #0
    6f88:	bf14      	ite	ne
    6f8a:	2301      	movne	r3, #1
    6f8c:	2300      	moveq	r3, #0
    6f8e:	b2db      	uxtb	r3, r3
    6f90:	f240 42ea 	movw	r2, #1258	; 0x4ea
    6f94:	491d      	ldr	r1, [pc, #116]	; (700c <_i2c_m_async_transfer+0xc4>)
    6f96:	4618      	mov	r0, r3
    6f98:	4b1d      	ldr	r3, [pc, #116]	; (7010 <_i2c_m_async_transfer+0xc8>)
    6f9a:	4798      	blx	r3

	if (msg->len == 0) {
    6f9c:	683b      	ldr	r3, [r7, #0]
    6f9e:	685b      	ldr	r3, [r3, #4]
    6fa0:	2b00      	cmp	r3, #0
    6fa2:	d101      	bne.n	6fa8 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    6fa4:	2300      	movs	r3, #0
    6fa6:	e02d      	b.n	7004 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6fa8:	687b      	ldr	r3, [r7, #4]
    6faa:	885b      	ldrh	r3, [r3, #2]
    6fac:	b29b      	uxth	r3, r3
    6fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6fb2:	2b00      	cmp	r3, #0
    6fb4:	d002      	beq.n	6fbc <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    6fb6:	f06f 0303 	mvn.w	r3, #3
    6fba:	e023      	b.n	7004 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    6fbc:	683b      	ldr	r3, [r7, #0]
    6fbe:	885b      	ldrh	r3, [r3, #2]
    6fc0:	b29b      	uxth	r3, r3
    6fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6fc6:	b29a      	uxth	r2, r3
    6fc8:	683b      	ldr	r3, [r7, #0]
    6fca:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6fcc:	687b      	ldr	r3, [r7, #4]
    6fce:	683a      	ldr	r2, [r7, #0]
    6fd0:	ca07      	ldmia	r2, {r0, r1, r2}
    6fd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    6fd6:	687b      	ldr	r3, [r7, #4]
    6fd8:	691b      	ldr	r3, [r3, #16]
    6fda:	4618      	mov	r0, r3
    6fdc:	4b0d      	ldr	r3, [pc, #52]	; (7014 <_i2c_m_async_transfer+0xcc>)
    6fde:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    6fe0:	6878      	ldr	r0, [r7, #4]
    6fe2:	4b0d      	ldr	r3, [pc, #52]	; (7018 <_i2c_m_async_transfer+0xd0>)
    6fe4:	4798      	blx	r3
    6fe6:	60f8      	str	r0, [r7, #12]

	if (ret) {
    6fe8:	68fb      	ldr	r3, [r7, #12]
    6fea:	2b00      	cmp	r3, #0
    6fec:	d009      	beq.n	7002 <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6fee:	687b      	ldr	r3, [r7, #4]
    6ff0:	885b      	ldrh	r3, [r3, #2]
    6ff2:	b29b      	uxth	r3, r3
    6ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6ff8:	b29a      	uxth	r2, r3
    6ffa:	687b      	ldr	r3, [r7, #4]
    6ffc:	805a      	strh	r2, [r3, #2]

		return ret;
    6ffe:	68fb      	ldr	r3, [r7, #12]
    7000:	e000      	b.n	7004 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    7002:	2300      	movs	r3, #0
}
    7004:	4618      	mov	r0, r3
    7006:	3710      	adds	r7, #16
    7008:	46bd      	mov	sp, r7
    700a:	bd80      	pop	{r7, pc}
    700c:	00010210 	.word	0x00010210
    7010:	00003d61 	.word	0x00003d61
    7014:	00006611 	.word	0x00006611
    7018:	00006e49 	.word	0x00006e49

0000701c <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    701c:	b480      	push	{r7}
    701e:	b085      	sub	sp, #20
    7020:	af00      	add	r7, sp, #0
    7022:	60f8      	str	r0, [r7, #12]
    7024:	460b      	mov	r3, r1
    7026:	607a      	str	r2, [r7, #4]
    7028:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    702a:	7afb      	ldrb	r3, [r7, #11]
    702c:	2b01      	cmp	r3, #1
    702e:	d008      	beq.n	7042 <_i2c_m_async_register_callback+0x26>
    7030:	2b02      	cmp	r3, #2
    7032:	d00a      	beq.n	704a <_i2c_m_async_register_callback+0x2e>
    7034:	2b00      	cmp	r3, #0
    7036:	d000      	beq.n	703a <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    7038:	e00b      	b.n	7052 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    703a:	68fb      	ldr	r3, [r7, #12]
    703c:	687a      	ldr	r2, [r7, #4]
    703e:	615a      	str	r2, [r3, #20]
		break;
    7040:	e007      	b.n	7052 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    7042:	68fb      	ldr	r3, [r7, #12]
    7044:	687a      	ldr	r2, [r7, #4]
    7046:	619a      	str	r2, [r3, #24]
		break;
    7048:	e003      	b.n	7052 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    704a:	68fb      	ldr	r3, [r7, #12]
    704c:	687a      	ldr	r2, [r7, #4]
    704e:	61da      	str	r2, [r3, #28]
		break;
    7050:	bf00      	nop
	}

	return ERR_NONE;
    7052:	2300      	movs	r3, #0
}
    7054:	4618      	mov	r0, r3
    7056:	3714      	adds	r7, #20
    7058:	46bd      	mov	sp, r7
    705a:	f85d 7b04 	ldr.w	r7, [sp], #4
    705e:	4770      	bx	lr

00007060 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    7060:	b580      	push	{r7, lr}
    7062:	b082      	sub	sp, #8
    7064:	af00      	add	r7, sp, #0
    7066:	6078      	str	r0, [r7, #4]
    7068:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    706a:	687b      	ldr	r3, [r7, #4]
    706c:	2b00      	cmp	r3, #0
    706e:	bf14      	ite	ne
    7070:	2301      	movne	r3, #1
    7072:	2300      	moveq	r3, #0
    7074:	b2db      	uxtb	r3, r3
    7076:	f44f 62a9 	mov.w	r2, #1352	; 0x548
    707a:	4908      	ldr	r1, [pc, #32]	; (709c <_i2c_m_sync_init+0x3c>)
    707c:	4618      	mov	r0, r3
    707e:	4b08      	ldr	r3, [pc, #32]	; (70a0 <_i2c_m_sync_init+0x40>)
    7080:	4798      	blx	r3

	i2c_dev->hw = hw;
    7082:	687b      	ldr	r3, [r7, #4]
    7084:	683a      	ldr	r2, [r7, #0]
    7086:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    7088:	687b      	ldr	r3, [r7, #4]
    708a:	6839      	ldr	r1, [r7, #0]
    708c:	4618      	mov	r0, r3
    708e:	4b05      	ldr	r3, [pc, #20]	; (70a4 <_i2c_m_sync_init+0x44>)
    7090:	4798      	blx	r3
    7092:	4603      	mov	r3, r0
}
    7094:	4618      	mov	r0, r3
    7096:	3708      	adds	r7, #8
    7098:	46bd      	mov	sp, r7
    709a:	bd80      	pop	{r7, pc}
    709c:	00010210 	.word	0x00010210
    70a0:	00003d61 	.word	0x00003d61
    70a4:	0000741d 	.word	0x0000741d

000070a8 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    70a8:	b580      	push	{r7, lr}
    70aa:	b082      	sub	sp, #8
    70ac:	af00      	add	r7, sp, #0
    70ae:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    70b0:	687b      	ldr	r3, [r7, #4]
    70b2:	2b00      	cmp	r3, #0
    70b4:	bf14      	ite	ne
    70b6:	2301      	movne	r3, #1
    70b8:	2300      	moveq	r3, #0
    70ba:	b2db      	uxtb	r3, r3
    70bc:	f240 5265 	movw	r2, #1381	; 0x565
    70c0:	4906      	ldr	r1, [pc, #24]	; (70dc <_i2c_m_sync_enable+0x34>)
    70c2:	4618      	mov	r0, r3
    70c4:	4b06      	ldr	r3, [pc, #24]	; (70e0 <_i2c_m_sync_enable+0x38>)
    70c6:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    70c8:	687b      	ldr	r3, [r7, #4]
    70ca:	691b      	ldr	r3, [r3, #16]
    70cc:	4618      	mov	r0, r3
    70ce:	4b05      	ldr	r3, [pc, #20]	; (70e4 <_i2c_m_sync_enable+0x3c>)
    70d0:	4798      	blx	r3
    70d2:	4603      	mov	r3, r0
}
    70d4:	4618      	mov	r0, r3
    70d6:	3708      	adds	r7, #8
    70d8:	46bd      	mov	sp, r7
    70da:	bd80      	pop	{r7, pc}
    70dc:	00010210 	.word	0x00010210
    70e0:	00003d61 	.word	0x00003d61
    70e4:	00007391 	.word	0x00007391

000070e8 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    70e8:	b580      	push	{r7, lr}
    70ea:	b084      	sub	sp, #16
    70ec:	af00      	add	r7, sp, #0
    70ee:	6078      	str	r0, [r7, #4]
    70f0:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    70f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    70f6:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    70f8:	687b      	ldr	r3, [r7, #4]
    70fa:	691b      	ldr	r3, [r3, #16]
    70fc:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    70fe:	68b8      	ldr	r0, [r7, #8]
    7100:	4b0f      	ldr	r3, [pc, #60]	; (7140 <_sercom_i2c_sync_wait_bus+0x58>)
    7102:	4798      	blx	r3
    7104:	4603      	mov	r3, r0
    7106:	461a      	mov	r2, r3
    7108:	683b      	ldr	r3, [r7, #0]
    710a:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    710c:	68fb      	ldr	r3, [r7, #12]
    710e:	1e5a      	subs	r2, r3, #1
    7110:	60fa      	str	r2, [r7, #12]
    7112:	2b00      	cmp	r3, #0
    7114:	d102      	bne.n	711c <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    7116:	f06f 0304 	mvn.w	r3, #4
    711a:	e00c      	b.n	7136 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    711c:	683b      	ldr	r3, [r7, #0]
    711e:	681b      	ldr	r3, [r3, #0]
    7120:	f003 0301 	and.w	r3, r3, #1
    7124:	2b00      	cmp	r3, #0
    7126:	d105      	bne.n	7134 <_sercom_i2c_sync_wait_bus+0x4c>
    7128:	683b      	ldr	r3, [r7, #0]
    712a:	681b      	ldr	r3, [r3, #0]
    712c:	f003 0302 	and.w	r3, r3, #2
    7130:	2b00      	cmp	r3, #0
    7132:	d0e4      	beq.n	70fe <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    7134:	2300      	movs	r3, #0
}
    7136:	4618      	mov	r0, r3
    7138:	3710      	adds	r7, #16
    713a:	46bd      	mov	sp, r7
    713c:	bd80      	pop	{r7, pc}
    713e:	bf00      	nop
    7140:	000063c9 	.word	0x000063c9

00007144 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    7144:	b590      	push	{r4, r7, lr}
    7146:	b087      	sub	sp, #28
    7148:	af00      	add	r7, sp, #0
    714a:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    714c:	687b      	ldr	r3, [r7, #4]
    714e:	691b      	ldr	r3, [r3, #16]
    7150:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    7152:	687b      	ldr	r3, [r7, #4]
    7154:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    7156:	6978      	ldr	r0, [r7, #20]
    7158:	4b39      	ldr	r3, [pc, #228]	; (7240 <_sercom_i2c_sync_send_address+0xfc>)
    715a:	4798      	blx	r3
    715c:	4603      	mov	r3, r0
    715e:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    7160:	687b      	ldr	r3, [r7, #4]
    7162:	2b00      	cmp	r3, #0
    7164:	bf14      	ite	ne
    7166:	2301      	movne	r3, #1
    7168:	2300      	moveq	r3, #0
    716a:	b2db      	uxtb	r3, r3
    716c:	f240 52d5 	movw	r2, #1493	; 0x5d5
    7170:	4934      	ldr	r1, [pc, #208]	; (7244 <_sercom_i2c_sync_send_address+0x100>)
    7172:	4618      	mov	r0, r3
    7174:	4b34      	ldr	r3, [pc, #208]	; (7248 <_sercom_i2c_sync_send_address+0x104>)
    7176:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    7178:	693b      	ldr	r3, [r7, #16]
    717a:	685b      	ldr	r3, [r3, #4]
    717c:	2b01      	cmp	r3, #1
    717e:	d106      	bne.n	718e <_sercom_i2c_sync_send_address+0x4a>
    7180:	68fb      	ldr	r3, [r7, #12]
    7182:	2b00      	cmp	r3, #0
    7184:	d003      	beq.n	718e <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    7186:	6978      	ldr	r0, [r7, #20]
    7188:	4b30      	ldr	r3, [pc, #192]	; (724c <_sercom_i2c_sync_send_address+0x108>)
    718a:	4798      	blx	r3
    718c:	e002      	b.n	7194 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    718e:	6978      	ldr	r0, [r7, #20]
    7190:	4b2f      	ldr	r3, [pc, #188]	; (7250 <_sercom_i2c_sync_send_address+0x10c>)
    7192:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    7194:	693b      	ldr	r3, [r7, #16]
    7196:	881b      	ldrh	r3, [r3, #0]
    7198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    719c:	2b00      	cmp	r3, #0
    719e:	d022      	beq.n	71e6 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    71a0:	693b      	ldr	r3, [r7, #16]
    71a2:	885b      	ldrh	r3, [r3, #2]
    71a4:	b29b      	uxth	r3, r3
    71a6:	f003 0301 	and.w	r3, r3, #1
    71aa:	2b00      	cmp	r3, #0
    71ac:	d007      	beq.n	71be <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    71ae:	693b      	ldr	r3, [r7, #16]
    71b0:	885b      	ldrh	r3, [r3, #2]
    71b2:	b29b      	uxth	r3, r3
    71b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    71b8:	b29a      	uxth	r2, r3
    71ba:	693b      	ldr	r3, [r7, #16]
    71bc:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    71be:	693b      	ldr	r3, [r7, #16]
    71c0:	881b      	ldrh	r3, [r3, #0]
    71c2:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    71c4:	f240 74fe 	movw	r4, #2046	; 0x7fe
    71c8:	401c      	ands	r4, r3
    71ca:	6978      	ldr	r0, [r7, #20]
    71cc:	4b21      	ldr	r3, [pc, #132]	; (7254 <_sercom_i2c_sync_send_address+0x110>)
    71ce:	4798      	blx	r3
    71d0:	4603      	mov	r3, r0
    71d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    71d6:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    71d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    71dc:	4619      	mov	r1, r3
    71de:	6978      	ldr	r0, [r7, #20]
    71e0:	4b1d      	ldr	r3, [pc, #116]	; (7258 <_sercom_i2c_sync_send_address+0x114>)
    71e2:	4798      	blx	r3
    71e4:	e01a      	b.n	721c <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    71e6:	693b      	ldr	r3, [r7, #16]
    71e8:	881b      	ldrh	r3, [r3, #0]
    71ea:	005b      	lsls	r3, r3, #1
    71ec:	b2db      	uxtb	r3, r3
    71ee:	693a      	ldr	r2, [r7, #16]
    71f0:	8852      	ldrh	r2, [r2, #2]
    71f2:	b292      	uxth	r2, r2
    71f4:	f002 0201 	and.w	r2, r2, #1
    71f8:	2a00      	cmp	r2, #0
    71fa:	bf14      	ite	ne
    71fc:	2201      	movne	r2, #1
    71fe:	2200      	moveq	r2, #0
    7200:	b2d2      	uxtb	r2, r2
    7202:	4313      	orrs	r3, r2
    7204:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7206:	6978      	ldr	r0, [r7, #20]
    7208:	4b12      	ldr	r3, [pc, #72]	; (7254 <_sercom_i2c_sync_send_address+0x110>)
    720a:	4798      	blx	r3
    720c:	4603      	mov	r3, r0
    720e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    7212:	4323      	orrs	r3, r4
    7214:	4619      	mov	r1, r3
    7216:	6978      	ldr	r0, [r7, #20]
    7218:	4b0f      	ldr	r3, [pc, #60]	; (7258 <_sercom_i2c_sync_send_address+0x114>)
    721a:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    721c:	f107 0308 	add.w	r3, r7, #8
    7220:	4619      	mov	r1, r3
    7222:	6878      	ldr	r0, [r7, #4]
    7224:	4b0d      	ldr	r3, [pc, #52]	; (725c <_sercom_i2c_sync_send_address+0x118>)
    7226:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    7228:	68bb      	ldr	r3, [r7, #8]
    722a:	693a      	ldr	r2, [r7, #16]
    722c:	4619      	mov	r1, r3
    722e:	6978      	ldr	r0, [r7, #20]
    7230:	4b0b      	ldr	r3, [pc, #44]	; (7260 <_sercom_i2c_sync_send_address+0x11c>)
    7232:	4798      	blx	r3
    7234:	4603      	mov	r3, r0
}
    7236:	4618      	mov	r0, r3
    7238:	371c      	adds	r7, #28
    723a:	46bd      	mov	sp, r7
    723c:	bd90      	pop	{r4, r7, pc}
    723e:	bf00      	nop
    7240:	000064b1 	.word	0x000064b1
    7244:	00010210 	.word	0x00010210
    7248:	00003d61 	.word	0x00003d61
    724c:	00006661 	.word	0x00006661
    7250:	00006689 	.word	0x00006689
    7254:	000067c9 	.word	0x000067c9
    7258:	000067a5 	.word	0x000067a5
    725c:	000070e9 	.word	0x000070e9
    7260:	00006a41 	.word	0x00006a41

00007264 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    7264:	b580      	push	{r7, lr}
    7266:	b086      	sub	sp, #24
    7268:	af00      	add	r7, sp, #0
    726a:	6078      	str	r0, [r7, #4]
    726c:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    726e:	687b      	ldr	r3, [r7, #4]
    7270:	691b      	ldr	r3, [r3, #16]
    7272:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    7274:	687b      	ldr	r3, [r7, #4]
    7276:	2b00      	cmp	r3, #0
    7278:	bf14      	ite	ne
    727a:	2301      	movne	r3, #1
    727c:	2300      	moveq	r3, #0
    727e:	b2db      	uxtb	r3, r3
    7280:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    7284:	493b      	ldr	r1, [pc, #236]	; (7374 <_i2c_m_sync_transfer+0x110>)
    7286:	4618      	mov	r0, r3
    7288:	4b3b      	ldr	r3, [pc, #236]	; (7378 <_i2c_m_sync_transfer+0x114>)
    728a:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    728c:	687b      	ldr	r3, [r7, #4]
    728e:	691b      	ldr	r3, [r3, #16]
    7290:	2b00      	cmp	r3, #0
    7292:	bf14      	ite	ne
    7294:	2301      	movne	r3, #1
    7296:	2300      	moveq	r3, #0
    7298:	b2db      	uxtb	r3, r3
    729a:	f240 6201 	movw	r2, #1537	; 0x601
    729e:	4935      	ldr	r1, [pc, #212]	; (7374 <_i2c_m_sync_transfer+0x110>)
    72a0:	4618      	mov	r0, r3
    72a2:	4b35      	ldr	r3, [pc, #212]	; (7378 <_i2c_m_sync_transfer+0x114>)
    72a4:	4798      	blx	r3
	ASSERT(msg);
    72a6:	683b      	ldr	r3, [r7, #0]
    72a8:	2b00      	cmp	r3, #0
    72aa:	bf14      	ite	ne
    72ac:	2301      	movne	r3, #1
    72ae:	2300      	moveq	r3, #0
    72b0:	b2db      	uxtb	r3, r3
    72b2:	f240 6202 	movw	r2, #1538	; 0x602
    72b6:	492f      	ldr	r1, [pc, #188]	; (7374 <_i2c_m_sync_transfer+0x110>)
    72b8:	4618      	mov	r0, r3
    72ba:	4b2f      	ldr	r3, [pc, #188]	; (7378 <_i2c_m_sync_transfer+0x114>)
    72bc:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    72be:	687b      	ldr	r3, [r7, #4]
    72c0:	885b      	ldrh	r3, [r3, #2]
    72c2:	b29b      	uxth	r3, r3
    72c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    72c8:	2b00      	cmp	r3, #0
    72ca:	d002      	beq.n	72d2 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    72cc:	f06f 0305 	mvn.w	r3, #5
    72d0:	e04c      	b.n	736c <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    72d2:	683b      	ldr	r3, [r7, #0]
    72d4:	885b      	ldrh	r3, [r3, #2]
    72d6:	b29b      	uxth	r3, r3
    72d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    72dc:	b29a      	uxth	r2, r3
    72de:	683b      	ldr	r3, [r7, #0]
    72e0:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    72e2:	687b      	ldr	r3, [r7, #4]
    72e4:	683a      	ldr	r2, [r7, #0]
    72e6:	ca07      	ldmia	r2, {r0, r1, r2}
    72e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    72ec:	6938      	ldr	r0, [r7, #16]
    72ee:	4b23      	ldr	r3, [pc, #140]	; (737c <_i2c_m_sync_transfer+0x118>)
    72f0:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    72f2:	6878      	ldr	r0, [r7, #4]
    72f4:	4b22      	ldr	r3, [pc, #136]	; (7380 <_i2c_m_sync_transfer+0x11c>)
    72f6:	4798      	blx	r3
    72f8:	6178      	str	r0, [r7, #20]

	if (ret) {
    72fa:	697b      	ldr	r3, [r7, #20]
    72fc:	2b00      	cmp	r3, #0
    72fe:	d02d      	beq.n	735c <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7300:	687b      	ldr	r3, [r7, #4]
    7302:	885b      	ldrh	r3, [r3, #2]
    7304:	b29b      	uxth	r3, r3
    7306:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    730a:	b29a      	uxth	r2, r3
    730c:	687b      	ldr	r3, [r7, #4]
    730e:	805a      	strh	r2, [r3, #2]

		return ret;
    7310:	697b      	ldr	r3, [r7, #20]
    7312:	e02b      	b.n	736c <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    7314:	f107 030c 	add.w	r3, r7, #12
    7318:	4619      	mov	r1, r3
    731a:	6878      	ldr	r0, [r7, #4]
    731c:	4b19      	ldr	r3, [pc, #100]	; (7384 <_i2c_m_sync_transfer+0x120>)
    731e:	4798      	blx	r3
    7320:	6178      	str	r0, [r7, #20]

		if (ret) {
    7322:	697b      	ldr	r3, [r7, #20]
    7324:	2b00      	cmp	r3, #0
    7326:	d012      	beq.n	734e <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    7328:	683b      	ldr	r3, [r7, #0]
    732a:	885b      	ldrh	r3, [r3, #2]
    732c:	b29b      	uxth	r3, r3
    732e:	b21b      	sxth	r3, r3
    7330:	2b00      	cmp	r3, #0
    7332:	da02      	bge.n	733a <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    7334:	6938      	ldr	r0, [r7, #16]
    7336:	4b14      	ldr	r3, [pc, #80]	; (7388 <_i2c_m_sync_transfer+0x124>)
    7338:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    733a:	687b      	ldr	r3, [r7, #4]
    733c:	885b      	ldrh	r3, [r3, #2]
    733e:	b29b      	uxth	r3, r3
    7340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7344:	b29a      	uxth	r2, r3
    7346:	687b      	ldr	r3, [r7, #4]
    7348:	805a      	strh	r2, [r3, #2]

			return ret;
    734a:	697b      	ldr	r3, [r7, #20]
    734c:	e00e      	b.n	736c <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    734e:	68fb      	ldr	r3, [r7, #12]
    7350:	687a      	ldr	r2, [r7, #4]
    7352:	4619      	mov	r1, r3
    7354:	6938      	ldr	r0, [r7, #16]
    7356:	4b0d      	ldr	r3, [pc, #52]	; (738c <_i2c_m_sync_transfer+0x128>)
    7358:	4798      	blx	r3
    735a:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    735c:	687b      	ldr	r3, [r7, #4]
    735e:	885b      	ldrh	r3, [r3, #2]
    7360:	b29b      	uxth	r3, r3
    7362:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7366:	2b00      	cmp	r3, #0
    7368:	d1d4      	bne.n	7314 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    736a:	697b      	ldr	r3, [r7, #20]
}
    736c:	4618      	mov	r0, r3
    736e:	3718      	adds	r7, #24
    7370:	46bd      	mov	sp, r7
    7372:	bd80      	pop	{r7, pc}
    7374:	00010210 	.word	0x00010210
    7378:	00003d61 	.word	0x00003d61
    737c:	00006611 	.word	0x00006611
    7380:	00007145 	.word	0x00007145
    7384:	000070e9 	.word	0x000070e9
    7388:	00006a25 	.word	0x00006a25
    738c:	00006a41 	.word	0x00006a41

00007390 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    7390:	b580      	push	{r7, lr}
    7392:	b084      	sub	sp, #16
    7394:	af00      	add	r7, sp, #0
    7396:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    7398:	f64f 73ff 	movw	r3, #65535	; 0xffff
    739c:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    739e:	2304      	movs	r3, #4
    73a0:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    73a2:	687b      	ldr	r3, [r7, #4]
    73a4:	2b00      	cmp	r3, #0
    73a6:	bf14      	ite	ne
    73a8:	2301      	movne	r3, #1
    73aa:	2300      	moveq	r3, #0
    73ac:	b2db      	uxtb	r3, r3
    73ae:	f240 6235 	movw	r2, #1589	; 0x635
    73b2:	4915      	ldr	r1, [pc, #84]	; (7408 <_i2c_m_enable_implementation+0x78>)
    73b4:	4618      	mov	r0, r3
    73b6:	4b15      	ldr	r3, [pc, #84]	; (740c <_i2c_m_enable_implementation+0x7c>)
    73b8:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    73ba:	6878      	ldr	r0, [r7, #4]
    73bc:	4b14      	ldr	r3, [pc, #80]	; (7410 <_i2c_m_enable_implementation+0x80>)
    73be:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    73c0:	e016      	b.n	73f0 <_i2c_m_enable_implementation+0x60>
		timeout--;
    73c2:	68fb      	ldr	r3, [r7, #12]
    73c4:	3b01      	subs	r3, #1
    73c6:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    73c8:	68fb      	ldr	r3, [r7, #12]
    73ca:	2b00      	cmp	r3, #0
    73cc:	dc10      	bgt.n	73f0 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    73ce:	68bb      	ldr	r3, [r7, #8]
    73d0:	3b01      	subs	r3, #1
    73d2:	60bb      	str	r3, [r7, #8]
    73d4:	68bb      	ldr	r3, [r7, #8]
    73d6:	2b00      	cmp	r3, #0
    73d8:	d007      	beq.n	73ea <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    73da:	f64f 73ff 	movw	r3, #65535	; 0xffff
    73de:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    73e0:	2110      	movs	r1, #16
    73e2:	6878      	ldr	r0, [r7, #4]
    73e4:	4b0b      	ldr	r3, [pc, #44]	; (7414 <_i2c_m_enable_implementation+0x84>)
    73e6:	4798      	blx	r3
    73e8:	e002      	b.n	73f0 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    73ea:	f06f 0305 	mvn.w	r3, #5
    73ee:	e006      	b.n	73fe <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    73f0:	6878      	ldr	r0, [r7, #4]
    73f2:	4b09      	ldr	r3, [pc, #36]	; (7418 <_i2c_m_enable_implementation+0x88>)
    73f4:	4798      	blx	r3
    73f6:	4603      	mov	r3, r0
    73f8:	2b01      	cmp	r3, #1
    73fa:	d1e2      	bne.n	73c2 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    73fc:	2300      	movs	r3, #0
}
    73fe:	4618      	mov	r0, r3
    7400:	3710      	adds	r7, #16
    7402:	46bd      	mov	sp, r7
    7404:	bd80      	pop	{r7, pc}
    7406:	bf00      	nop
    7408:	00010210 	.word	0x00010210
    740c:	00003d61 	.word	0x00003d61
    7410:	00006461 	.word	0x00006461
    7414:	0000690d 	.word	0x0000690d
    7418:	000068bd 	.word	0x000068bd

0000741c <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    741c:	b580      	push	{r7, lr}
    741e:	b084      	sub	sp, #16
    7420:	af00      	add	r7, sp, #0
    7422:	6078      	str	r0, [r7, #4]
    7424:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    7426:	6838      	ldr	r0, [r7, #0]
    7428:	4b42      	ldr	r3, [pc, #264]	; (7534 <_i2c_m_sync_init_impl+0x118>)
    742a:	4798      	blx	r3
    742c:	4603      	mov	r3, r0
    742e:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    7430:	2101      	movs	r1, #1
    7432:	6838      	ldr	r0, [r7, #0]
    7434:	4b40      	ldr	r3, [pc, #256]	; (7538 <_i2c_m_sync_init_impl+0x11c>)
    7436:	4798      	blx	r3
    7438:	4603      	mov	r3, r0
    743a:	f083 0301 	eor.w	r3, r3, #1
    743e:	b2db      	uxtb	r3, r3
    7440:	2b00      	cmp	r3, #0
    7442:	d020      	beq.n	7486 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    7444:	7bfa      	ldrb	r2, [r7, #15]
    7446:	493d      	ldr	r1, [pc, #244]	; (753c <_i2c_m_sync_init_impl+0x120>)
    7448:	4613      	mov	r3, r2
    744a:	005b      	lsls	r3, r3, #1
    744c:	4413      	add	r3, r2
    744e:	00db      	lsls	r3, r3, #3
    7450:	440b      	add	r3, r1
    7452:	3304      	adds	r3, #4
    7454:	681b      	ldr	r3, [r3, #0]
    7456:	f003 031c 	and.w	r3, r3, #28
    745a:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    745c:	2102      	movs	r1, #2
    745e:	6838      	ldr	r0, [r7, #0]
    7460:	4b37      	ldr	r3, [pc, #220]	; (7540 <_i2c_m_sync_init_impl+0x124>)
    7462:	4798      	blx	r3
    7464:	4603      	mov	r3, r0
    7466:	2b00      	cmp	r3, #0
    7468:	d006      	beq.n	7478 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    746a:	6838      	ldr	r0, [r7, #0]
    746c:	4b35      	ldr	r3, [pc, #212]	; (7544 <_i2c_m_sync_init_impl+0x128>)
    746e:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    7470:	2102      	movs	r1, #2
    7472:	6838      	ldr	r0, [r7, #0]
    7474:	4b34      	ldr	r3, [pc, #208]	; (7548 <_i2c_m_sync_init_impl+0x12c>)
    7476:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    7478:	68bb      	ldr	r3, [r7, #8]
    747a:	f043 0301 	orr.w	r3, r3, #1
    747e:	4619      	mov	r1, r3
    7480:	6838      	ldr	r0, [r7, #0]
    7482:	4b32      	ldr	r3, [pc, #200]	; (754c <_i2c_m_sync_init_impl+0x130>)
    7484:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    7486:	2101      	movs	r1, #1
    7488:	6838      	ldr	r0, [r7, #0]
    748a:	4b2f      	ldr	r3, [pc, #188]	; (7548 <_i2c_m_sync_init_impl+0x12c>)
    748c:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    748e:	7bfa      	ldrb	r2, [r7, #15]
    7490:	492a      	ldr	r1, [pc, #168]	; (753c <_i2c_m_sync_init_impl+0x120>)
    7492:	4613      	mov	r3, r2
    7494:	005b      	lsls	r3, r3, #1
    7496:	4413      	add	r3, r2
    7498:	00db      	lsls	r3, r3, #3
    749a:	440b      	add	r3, r1
    749c:	3304      	adds	r3, #4
    749e:	681b      	ldr	r3, [r3, #0]
    74a0:	4619      	mov	r1, r3
    74a2:	6838      	ldr	r0, [r7, #0]
    74a4:	4b29      	ldr	r3, [pc, #164]	; (754c <_i2c_m_sync_init_impl+0x130>)
    74a6:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    74a8:	7bfa      	ldrb	r2, [r7, #15]
    74aa:	4924      	ldr	r1, [pc, #144]	; (753c <_i2c_m_sync_init_impl+0x120>)
    74ac:	4613      	mov	r3, r2
    74ae:	005b      	lsls	r3, r3, #1
    74b0:	4413      	add	r3, r2
    74b2:	00db      	lsls	r3, r3, #3
    74b4:	440b      	add	r3, r1
    74b6:	3308      	adds	r3, #8
    74b8:	681b      	ldr	r3, [r3, #0]
    74ba:	4619      	mov	r1, r3
    74bc:	6838      	ldr	r0, [r7, #0]
    74be:	4b24      	ldr	r3, [pc, #144]	; (7550 <_i2c_m_sync_init_impl+0x134>)
    74c0:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    74c2:	7bfa      	ldrb	r2, [r7, #15]
    74c4:	491d      	ldr	r1, [pc, #116]	; (753c <_i2c_m_sync_init_impl+0x120>)
    74c6:	4613      	mov	r3, r2
    74c8:	005b      	lsls	r3, r3, #1
    74ca:	4413      	add	r3, r2
    74cc:	00db      	lsls	r3, r3, #3
    74ce:	440b      	add	r3, r1
    74d0:	330c      	adds	r3, #12
    74d2:	681b      	ldr	r3, [r3, #0]
    74d4:	4619      	mov	r1, r3
    74d6:	6838      	ldr	r0, [r7, #0]
    74d8:	4b1e      	ldr	r3, [pc, #120]	; (7554 <_i2c_m_sync_init_impl+0x138>)
    74da:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    74dc:	7bfa      	ldrb	r2, [r7, #15]
    74de:	4917      	ldr	r1, [pc, #92]	; (753c <_i2c_m_sync_init_impl+0x120>)
    74e0:	4613      	mov	r3, r2
    74e2:	005b      	lsls	r3, r3, #1
    74e4:	4413      	add	r3, r2
    74e6:	00db      	lsls	r3, r3, #3
    74e8:	440b      	add	r3, r1
    74ea:	3304      	adds	r3, #4
    74ec:	681b      	ldr	r3, [r3, #0]
    74ee:	0e1b      	lsrs	r3, r3, #24
    74f0:	b29b      	uxth	r3, r3
    74f2:	f003 0303 	and.w	r3, r3, #3
    74f6:	b29a      	uxth	r2, r3
    74f8:	687b      	ldr	r3, [r7, #4]
    74fa:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    74fc:	687b      	ldr	r3, [r7, #4]
    74fe:	899b      	ldrh	r3, [r3, #12]
    7500:	2b01      	cmp	r3, #1
    7502:	bf8c      	ite	hi
    7504:	2301      	movhi	r3, #1
    7506:	2300      	movls	r3, #0
    7508:	b2db      	uxtb	r3, r3
    750a:	4619      	mov	r1, r3
    750c:	6838      	ldr	r0, [r7, #0]
    750e:	4b12      	ldr	r3, [pc, #72]	; (7558 <_i2c_m_sync_init_impl+0x13c>)
    7510:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    7512:	7bfa      	ldrb	r2, [r7, #15]
    7514:	4909      	ldr	r1, [pc, #36]	; (753c <_i2c_m_sync_init_impl+0x120>)
    7516:	4613      	mov	r3, r2
    7518:	005b      	lsls	r3, r3, #1
    751a:	4413      	add	r3, r2
    751c:	00db      	lsls	r3, r3, #3
    751e:	440b      	add	r3, r1
    7520:	3312      	adds	r3, #18
    7522:	881a      	ldrh	r2, [r3, #0]
    7524:	687b      	ldr	r3, [r7, #4]
    7526:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    7528:	2300      	movs	r3, #0
}
    752a:	4618      	mov	r0, r3
    752c:	3710      	adds	r7, #16
    752e:	46bd      	mov	sp, r7
    7530:	bd80      	pop	{r7, pc}
    7532:	bf00      	nop
    7534:	000069bd 	.word	0x000069bd
    7538:	00006321 	.word	0x00006321
    753c:	20000018 	.word	0x20000018
    7540:	000064e1 	.word	0x000064e1
    7544:	00006489 	.word	0x00006489
    7548:	000062fd 	.word	0x000062fd
    754c:	00006511 	.word	0x00006511
    7550:	000066e1 	.word	0x000066e1
    7554:	00006729 	.word	0x00006729
    7558:	00006765 	.word	0x00006765

0000755c <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    755c:	b580      	push	{r7, lr}
    755e:	b082      	sub	sp, #8
    7560:	af00      	add	r7, sp, #0
    7562:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7564:	2101      	movs	r1, #1
    7566:	6878      	ldr	r0, [r7, #4]
    7568:	4b07      	ldr	r3, [pc, #28]	; (7588 <_spi_sync_enable+0x2c>)
    756a:	4798      	blx	r3
    756c:	4603      	mov	r3, r0
    756e:	2b00      	cmp	r3, #0
    7570:	d002      	beq.n	7578 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    7572:	f06f 0303 	mvn.w	r3, #3
    7576:	e003      	b.n	7580 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    7578:	6878      	ldr	r0, [r7, #4]
    757a:	4b04      	ldr	r3, [pc, #16]	; (758c <_spi_sync_enable+0x30>)
    757c:	4798      	blx	r3

	return ERR_NONE;
    757e:	2300      	movs	r3, #0
}
    7580:	4618      	mov	r0, r3
    7582:	3708      	adds	r7, #8
    7584:	46bd      	mov	sp, r7
    7586:	bd80      	pop	{r7, pc}
    7588:	0000636d 	.word	0x0000636d
    758c:	00006535 	.word	0x00006535

00007590 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    7590:	b580      	push	{r7, lr}
    7592:	b082      	sub	sp, #8
    7594:	af00      	add	r7, sp, #0
    7596:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7598:	2101      	movs	r1, #1
    759a:	6878      	ldr	r0, [r7, #4]
    759c:	4b07      	ldr	r3, [pc, #28]	; (75bc <_spi_sync_disable+0x2c>)
    759e:	4798      	blx	r3
    75a0:	4603      	mov	r3, r0
    75a2:	2b00      	cmp	r3, #0
    75a4:	d002      	beq.n	75ac <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    75a6:	f06f 0303 	mvn.w	r3, #3
    75aa:	e003      	b.n	75b4 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    75ac:	6878      	ldr	r0, [r7, #4]
    75ae:	4b04      	ldr	r3, [pc, #16]	; (75c0 <_spi_sync_disable+0x30>)
    75b0:	4798      	blx	r3

	return ERR_NONE;
    75b2:	2300      	movs	r3, #0
}
    75b4:	4618      	mov	r0, r3
    75b6:	3708      	adds	r7, #8
    75b8:	46bd      	mov	sp, r7
    75ba:	bd80      	pop	{r7, pc}
    75bc:	0000636d 	.word	0x0000636d
    75c0:	00006595 	.word	0x00006595

000075c4 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    75c4:	b580      	push	{r7, lr}
    75c6:	b082      	sub	sp, #8
    75c8:	af00      	add	r7, sp, #0
    75ca:	6078      	str	r0, [r7, #4]
    75cc:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    75ce:	687b      	ldr	r3, [r7, #4]
    75d0:	2b00      	cmp	r3, #0
    75d2:	d004      	beq.n	75de <_spi_load_regs_master+0x1a>
    75d4:	683b      	ldr	r3, [r7, #0]
    75d6:	2b00      	cmp	r3, #0
    75d8:	d001      	beq.n	75de <_spi_load_regs_master+0x1a>
    75da:	2301      	movs	r3, #1
    75dc:	e000      	b.n	75e0 <_spi_load_regs_master+0x1c>
    75de:	2300      	movs	r3, #0
    75e0:	f003 0301 	and.w	r3, r3, #1
    75e4:	b2db      	uxtb	r3, r3
    75e6:	f640 1239 	movw	r2, #2361	; 0x939
    75ea:	4915      	ldr	r1, [pc, #84]	; (7640 <_spi_load_regs_master+0x7c>)
    75ec:	4618      	mov	r0, r3
    75ee:	4b15      	ldr	r3, [pc, #84]	; (7644 <_spi_load_regs_master+0x80>)
    75f0:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    75f2:	683b      	ldr	r3, [r7, #0]
    75f4:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    75f6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    75fa:	f023 0301 	bic.w	r3, r3, #1
    75fe:	4619      	mov	r1, r3
    7600:	6878      	ldr	r0, [r7, #4]
    7602:	4b11      	ldr	r3, [pc, #68]	; (7648 <_spi_load_regs_master+0x84>)
    7604:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    7606:	683b      	ldr	r3, [r7, #0]
    7608:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    760a:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    760e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    7612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7616:	4619      	mov	r1, r3
    7618:	6878      	ldr	r0, [r7, #4]
    761a:	4b0c      	ldr	r3, [pc, #48]	; (764c <_spi_load_regs_master+0x88>)
    761c:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    761e:	683b      	ldr	r3, [r7, #0]
    7620:	7b1b      	ldrb	r3, [r3, #12]
    7622:	4619      	mov	r1, r3
    7624:	6878      	ldr	r0, [r7, #4]
    7626:	4b0a      	ldr	r3, [pc, #40]	; (7650 <_spi_load_regs_master+0x8c>)
    7628:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    762a:	683b      	ldr	r3, [r7, #0]
    762c:	7b5b      	ldrb	r3, [r3, #13]
    762e:	4619      	mov	r1, r3
    7630:	6878      	ldr	r0, [r7, #4]
    7632:	4b08      	ldr	r3, [pc, #32]	; (7654 <_spi_load_regs_master+0x90>)
    7634:	4798      	blx	r3
}
    7636:	bf00      	nop
    7638:	3708      	adds	r7, #8
    763a:	46bd      	mov	sp, r7
    763c:	bd80      	pop	{r7, pc}
    763e:	bf00      	nop
    7640:	00010210 	.word	0x00010210
    7644:	00003d61 	.word	0x00003d61
    7648:	000065ed 	.word	0x000065ed
    764c:	00006705 	.word	0x00006705
    7650:	00006745 	.word	0x00006745
    7654:	0000687d 	.word	0x0000687d

00007658 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    7658:	b580      	push	{r7, lr}
    765a:	b082      	sub	sp, #8
    765c:	af00      	add	r7, sp, #0
    765e:	6078      	str	r0, [r7, #4]
    7660:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    7662:	687b      	ldr	r3, [r7, #4]
    7664:	2b00      	cmp	r3, #0
    7666:	d004      	beq.n	7672 <_spi_load_regs_slave+0x1a>
    7668:	683b      	ldr	r3, [r7, #0]
    766a:	2b00      	cmp	r3, #0
    766c:	d001      	beq.n	7672 <_spi_load_regs_slave+0x1a>
    766e:	2301      	movs	r3, #1
    7670:	e000      	b.n	7674 <_spi_load_regs_slave+0x1c>
    7672:	2300      	movs	r3, #0
    7674:	f003 0301 	and.w	r3, r3, #1
    7678:	b2db      	uxtb	r3, r3
    767a:	f640 124d 	movw	r2, #2381	; 0x94d
    767e:	491a      	ldr	r1, [pc, #104]	; (76e8 <_spi_load_regs_slave+0x90>)
    7680:	4618      	mov	r0, r3
    7682:	4b1a      	ldr	r3, [pc, #104]	; (76ec <_spi_load_regs_slave+0x94>)
    7684:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7686:	683b      	ldr	r3, [r7, #0]
    7688:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    768a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    768e:	f023 0301 	bic.w	r3, r3, #1
    7692:	4619      	mov	r1, r3
    7694:	6878      	ldr	r0, [r7, #4]
    7696:	4b16      	ldr	r3, [pc, #88]	; (76f0 <_spi_load_regs_slave+0x98>)
    7698:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    769a:	683b      	ldr	r3, [r7, #0]
    769c:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    769e:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    76a2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    76a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    76aa:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    76ae:	4619      	mov	r1, r3
    76b0:	6878      	ldr	r0, [r7, #4]
    76b2:	4b10      	ldr	r3, [pc, #64]	; (76f4 <_spi_load_regs_slave+0x9c>)
    76b4:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    76b6:	683b      	ldr	r3, [r7, #0]
    76b8:	689b      	ldr	r3, [r3, #8]
    76ba:	4619      	mov	r1, r3
    76bc:	6878      	ldr	r0, [r7, #4]
    76be:	4b0e      	ldr	r3, [pc, #56]	; (76f8 <_spi_load_regs_slave+0xa0>)
    76c0:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    76c2:	683b      	ldr	r3, [r7, #0]
    76c4:	7b5b      	ldrb	r3, [r3, #13]
    76c6:	4619      	mov	r1, r3
    76c8:	6878      	ldr	r0, [r7, #4]
    76ca:	4b0c      	ldr	r3, [pc, #48]	; (76fc <_spi_load_regs_slave+0xa4>)
    76cc:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    76ce:	bf00      	nop
    76d0:	f04f 31ff 	mov.w	r1, #4294967295
    76d4:	6878      	ldr	r0, [r7, #4]
    76d6:	4b0a      	ldr	r3, [pc, #40]	; (7700 <_spi_load_regs_slave+0xa8>)
    76d8:	4798      	blx	r3
    76da:	4603      	mov	r3, r0
    76dc:	2b00      	cmp	r3, #0
    76de:	d1f7      	bne.n	76d0 <_spi_load_regs_slave+0x78>
		;
}
    76e0:	bf00      	nop
    76e2:	3708      	adds	r7, #8
    76e4:	46bd      	mov	sp, r7
    76e6:	bd80      	pop	{r7, pc}
    76e8:	00010210 	.word	0x00010210
    76ec:	00003d61 	.word	0x00003d61
    76f0:	000065ed 	.word	0x000065ed
    76f4:	00006705 	.word	0x00006705
    76f8:	000067e9 	.word	0x000067e9
    76fc:	0000687d 	.word	0x0000687d
    7700:	0000636d 	.word	0x0000636d

00007704 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    7704:	b580      	push	{r7, lr}
    7706:	b084      	sub	sp, #16
    7708:	af00      	add	r7, sp, #0
    770a:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    770c:	687b      	ldr	r3, [r7, #4]
    770e:	4618      	mov	r0, r3
    7710:	4b11      	ldr	r3, [pc, #68]	; (7758 <_spi_get_regs+0x54>)
    7712:	4798      	blx	r3
    7714:	4603      	mov	r3, r0
    7716:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7718:	2300      	movs	r3, #0
    771a:	73fb      	strb	r3, [r7, #15]
    771c:	e014      	b.n	7748 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    771e:	7bfa      	ldrb	r2, [r7, #15]
    7720:	490e      	ldr	r1, [pc, #56]	; (775c <_spi_get_regs+0x58>)
    7722:	4613      	mov	r3, r2
    7724:	011b      	lsls	r3, r3, #4
    7726:	4413      	add	r3, r2
    7728:	440b      	add	r3, r1
    772a:	3310      	adds	r3, #16
    772c:	781b      	ldrb	r3, [r3, #0]
    772e:	7bba      	ldrb	r2, [r7, #14]
    7730:	429a      	cmp	r2, r3
    7732:	d106      	bne.n	7742 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    7734:	7bfa      	ldrb	r2, [r7, #15]
    7736:	4613      	mov	r3, r2
    7738:	011b      	lsls	r3, r3, #4
    773a:	4413      	add	r3, r2
    773c:	4a07      	ldr	r2, [pc, #28]	; (775c <_spi_get_regs+0x58>)
    773e:	4413      	add	r3, r2
    7740:	e006      	b.n	7750 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7742:	7bfb      	ldrb	r3, [r7, #15]
    7744:	3301      	adds	r3, #1
    7746:	73fb      	strb	r3, [r7, #15]
    7748:	7bfb      	ldrb	r3, [r7, #15]
    774a:	2b01      	cmp	r3, #1
    774c:	d9e7      	bls.n	771e <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    774e:	2300      	movs	r3, #0
}
    7750:	4618      	mov	r0, r3
    7752:	3710      	adds	r7, #16
    7754:	46bd      	mov	sp, r7
    7756:	bd80      	pop	{r7, pc}
    7758:	00006935 	.word	0x00006935
    775c:	0001024c 	.word	0x0001024c

00007760 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    7760:	b580      	push	{r7, lr}
    7762:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    7764:	4b03      	ldr	r3, [pc, #12]	; (7774 <SERCOM7_0_Handler+0x14>)
    7766:	681b      	ldr	r3, [r3, #0]
    7768:	4618      	mov	r0, r3
    776a:	4b03      	ldr	r3, [pc, #12]	; (7778 <SERCOM7_0_Handler+0x18>)
    776c:	4798      	blx	r3
}
    776e:	bf00      	nop
    7770:	bd80      	pop	{r7, pc}
    7772:	bf00      	nop
    7774:	20000bf4 	.word	0x20000bf4
    7778:	00006c71 	.word	0x00006c71

0000777c <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    777c:	b580      	push	{r7, lr}
    777e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    7780:	4b03      	ldr	r3, [pc, #12]	; (7790 <SERCOM7_1_Handler+0x14>)
    7782:	681b      	ldr	r3, [r3, #0]
    7784:	4618      	mov	r0, r3
    7786:	4b03      	ldr	r3, [pc, #12]	; (7794 <SERCOM7_1_Handler+0x18>)
    7788:	4798      	blx	r3
}
    778a:	bf00      	nop
    778c:	bd80      	pop	{r7, pc}
    778e:	bf00      	nop
    7790:	20000bf4 	.word	0x20000bf4
    7794:	00006c71 	.word	0x00006c71

00007798 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    7798:	b580      	push	{r7, lr}
    779a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    779c:	4b03      	ldr	r3, [pc, #12]	; (77ac <SERCOM7_2_Handler+0x14>)
    779e:	681b      	ldr	r3, [r3, #0]
    77a0:	4618      	mov	r0, r3
    77a2:	4b03      	ldr	r3, [pc, #12]	; (77b0 <SERCOM7_2_Handler+0x18>)
    77a4:	4798      	blx	r3
}
    77a6:	bf00      	nop
    77a8:	bd80      	pop	{r7, pc}
    77aa:	bf00      	nop
    77ac:	20000bf4 	.word	0x20000bf4
    77b0:	00006c71 	.word	0x00006c71

000077b4 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    77b4:	b580      	push	{r7, lr}
    77b6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    77b8:	4b03      	ldr	r3, [pc, #12]	; (77c8 <SERCOM7_3_Handler+0x14>)
    77ba:	681b      	ldr	r3, [r3, #0]
    77bc:	4618      	mov	r0, r3
    77be:	4b03      	ldr	r3, [pc, #12]	; (77cc <SERCOM7_3_Handler+0x18>)
    77c0:	4798      	blx	r3
}
    77c2:	bf00      	nop
    77c4:	bd80      	pop	{r7, pc}
    77c6:	bf00      	nop
    77c8:	20000bf4 	.word	0x20000bf4
    77cc:	00006c71 	.word	0x00006c71

000077d0 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    77d0:	b580      	push	{r7, lr}
    77d2:	b084      	sub	sp, #16
    77d4:	af00      	add	r7, sp, #0
    77d6:	6078      	str	r0, [r7, #4]
    77d8:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    77da:	683b      	ldr	r3, [r7, #0]
    77dc:	4618      	mov	r0, r3
    77de:	4b35      	ldr	r3, [pc, #212]	; (78b4 <_spi_m_sync_init+0xe4>)
    77e0:	4798      	blx	r3
    77e2:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    77e4:	687b      	ldr	r3, [r7, #4]
    77e6:	2b00      	cmp	r3, #0
    77e8:	d004      	beq.n	77f4 <_spi_m_sync_init+0x24>
    77ea:	683b      	ldr	r3, [r7, #0]
    77ec:	2b00      	cmp	r3, #0
    77ee:	d001      	beq.n	77f4 <_spi_m_sync_init+0x24>
    77f0:	2301      	movs	r3, #1
    77f2:	e000      	b.n	77f6 <_spi_m_sync_init+0x26>
    77f4:	2300      	movs	r3, #0
    77f6:	f003 0301 	and.w	r3, r3, #1
    77fa:	b2db      	uxtb	r3, r3
    77fc:	f640 128c 	movw	r2, #2444	; 0x98c
    7800:	492d      	ldr	r1, [pc, #180]	; (78b8 <_spi_m_sync_init+0xe8>)
    7802:	4618      	mov	r0, r3
    7804:	4b2d      	ldr	r3, [pc, #180]	; (78bc <_spi_m_sync_init+0xec>)
    7806:	4798      	blx	r3

	if (regs == NULL) {
    7808:	68fb      	ldr	r3, [r7, #12]
    780a:	2b00      	cmp	r3, #0
    780c:	d102      	bne.n	7814 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    780e:	f06f 030c 	mvn.w	r3, #12
    7812:	e04a      	b.n	78aa <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7814:	2101      	movs	r1, #1
    7816:	6838      	ldr	r0, [r7, #0]
    7818:	4b29      	ldr	r3, [pc, #164]	; (78c0 <_spi_m_sync_init+0xf0>)
    781a:	4798      	blx	r3
    781c:	4603      	mov	r3, r0
    781e:	f083 0301 	eor.w	r3, r3, #1
    7822:	b2db      	uxtb	r3, r3
    7824:	2b00      	cmp	r3, #0
    7826:	d019      	beq.n	785c <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7828:	68fb      	ldr	r3, [r7, #12]
    782a:	681b      	ldr	r3, [r3, #0]
    782c:	f003 031c 	and.w	r3, r3, #28
    7830:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7832:	2102      	movs	r1, #2
    7834:	6838      	ldr	r0, [r7, #0]
    7836:	4b23      	ldr	r3, [pc, #140]	; (78c4 <_spi_m_sync_init+0xf4>)
    7838:	4798      	blx	r3
    783a:	4603      	mov	r3, r0
    783c:	2b00      	cmp	r3, #0
    783e:	d006      	beq.n	784e <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    7840:	6838      	ldr	r0, [r7, #0]
    7842:	4b21      	ldr	r3, [pc, #132]	; (78c8 <_spi_m_sync_init+0xf8>)
    7844:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    7846:	2102      	movs	r1, #2
    7848:	6838      	ldr	r0, [r7, #0]
    784a:	4b20      	ldr	r3, [pc, #128]	; (78cc <_spi_m_sync_init+0xfc>)
    784c:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    784e:	68bb      	ldr	r3, [r7, #8]
    7850:	f043 0301 	orr.w	r3, r3, #1
    7854:	4619      	mov	r1, r3
    7856:	6838      	ldr	r0, [r7, #0]
    7858:	4b1d      	ldr	r3, [pc, #116]	; (78d0 <_spi_m_sync_init+0x100>)
    785a:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    785c:	2101      	movs	r1, #1
    785e:	6838      	ldr	r0, [r7, #0]
    7860:	4b1a      	ldr	r3, [pc, #104]	; (78cc <_spi_m_sync_init+0xfc>)
    7862:	4798      	blx	r3

	dev->prvt = hw;
    7864:	687b      	ldr	r3, [r7, #4]
    7866:	683a      	ldr	r2, [r7, #0]
    7868:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    786a:	68fb      	ldr	r3, [r7, #12]
    786c:	681b      	ldr	r3, [r3, #0]
    786e:	f003 031c 	and.w	r3, r3, #28
    7872:	2b08      	cmp	r3, #8
    7874:	d104      	bne.n	7880 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    7876:	68f9      	ldr	r1, [r7, #12]
    7878:	6838      	ldr	r0, [r7, #0]
    787a:	4b16      	ldr	r3, [pc, #88]	; (78d4 <_spi_m_sync_init+0x104>)
    787c:	4798      	blx	r3
    787e:	e003      	b.n	7888 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    7880:	68f9      	ldr	r1, [r7, #12]
    7882:	6838      	ldr	r0, [r7, #0]
    7884:	4b14      	ldr	r3, [pc, #80]	; (78d8 <_spi_m_sync_init+0x108>)
    7886:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    7888:	68fb      	ldr	r3, [r7, #12]
    788a:	685b      	ldr	r3, [r3, #4]
    788c:	f003 0307 	and.w	r3, r3, #7
    7890:	2b00      	cmp	r3, #0
    7892:	d101      	bne.n	7898 <_spi_m_sync_init+0xc8>
    7894:	2201      	movs	r2, #1
    7896:	e000      	b.n	789a <_spi_m_sync_init+0xca>
    7898:	2202      	movs	r2, #2
    789a:	687b      	ldr	r3, [r7, #4]
    789c:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    789e:	68fb      	ldr	r3, [r7, #12]
    78a0:	89db      	ldrh	r3, [r3, #14]
    78a2:	b29a      	uxth	r2, r3
    78a4:	687b      	ldr	r3, [r7, #4]
    78a6:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    78a8:	2300      	movs	r3, #0
}
    78aa:	4618      	mov	r0, r3
    78ac:	3710      	adds	r7, #16
    78ae:	46bd      	mov	sp, r7
    78b0:	bd80      	pop	{r7, pc}
    78b2:	bf00      	nop
    78b4:	00007705 	.word	0x00007705
    78b8:	00010210 	.word	0x00010210
    78bc:	00003d61 	.word	0x00003d61
    78c0:	0000636d 	.word	0x0000636d
    78c4:	000065bd 	.word	0x000065bd
    78c8:	00006595 	.word	0x00006595
    78cc:	00006349 	.word	0x00006349
    78d0:	000065ed 	.word	0x000065ed
    78d4:	00007659 	.word	0x00007659
    78d8:	000075c5 	.word	0x000075c5

000078dc <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    78dc:	b580      	push	{r7, lr}
    78de:	b082      	sub	sp, #8
    78e0:	af00      	add	r7, sp, #0
    78e2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    78e4:	687b      	ldr	r3, [r7, #4]
    78e6:	2b00      	cmp	r3, #0
    78e8:	d005      	beq.n	78f6 <_spi_m_sync_enable+0x1a>
    78ea:	687b      	ldr	r3, [r7, #4]
    78ec:	681b      	ldr	r3, [r3, #0]
    78ee:	2b00      	cmp	r3, #0
    78f0:	d001      	beq.n	78f6 <_spi_m_sync_enable+0x1a>
    78f2:	2301      	movs	r3, #1
    78f4:	e000      	b.n	78f8 <_spi_m_sync_enable+0x1c>
    78f6:	2300      	movs	r3, #0
    78f8:	f003 0301 	and.w	r3, r3, #1
    78fc:	b2db      	uxtb	r3, r3
    78fe:	f640 12eb 	movw	r2, #2539	; 0x9eb
    7902:	4907      	ldr	r1, [pc, #28]	; (7920 <_spi_m_sync_enable+0x44>)
    7904:	4618      	mov	r0, r3
    7906:	4b07      	ldr	r3, [pc, #28]	; (7924 <_spi_m_sync_enable+0x48>)
    7908:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    790a:	687b      	ldr	r3, [r7, #4]
    790c:	681b      	ldr	r3, [r3, #0]
    790e:	4618      	mov	r0, r3
    7910:	4b05      	ldr	r3, [pc, #20]	; (7928 <_spi_m_sync_enable+0x4c>)
    7912:	4798      	blx	r3
    7914:	4603      	mov	r3, r0
}
    7916:	4618      	mov	r0, r3
    7918:	3708      	adds	r7, #8
    791a:	46bd      	mov	sp, r7
    791c:	bd80      	pop	{r7, pc}
    791e:	bf00      	nop
    7920:	00010210 	.word	0x00010210
    7924:	00003d61 	.word	0x00003d61
    7928:	0000755d 	.word	0x0000755d

0000792c <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    792c:	b580      	push	{r7, lr}
    792e:	b082      	sub	sp, #8
    7930:	af00      	add	r7, sp, #0
    7932:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7934:	687b      	ldr	r3, [r7, #4]
    7936:	2b00      	cmp	r3, #0
    7938:	d005      	beq.n	7946 <_spi_m_sync_disable+0x1a>
    793a:	687b      	ldr	r3, [r7, #4]
    793c:	681b      	ldr	r3, [r3, #0]
    793e:	2b00      	cmp	r3, #0
    7940:	d001      	beq.n	7946 <_spi_m_sync_disable+0x1a>
    7942:	2301      	movs	r3, #1
    7944:	e000      	b.n	7948 <_spi_m_sync_disable+0x1c>
    7946:	2300      	movs	r3, #0
    7948:	f003 0301 	and.w	r3, r3, #1
    794c:	b2db      	uxtb	r3, r3
    794e:	f640 2207 	movw	r2, #2567	; 0xa07
    7952:	4907      	ldr	r1, [pc, #28]	; (7970 <_spi_m_sync_disable+0x44>)
    7954:	4618      	mov	r0, r3
    7956:	4b07      	ldr	r3, [pc, #28]	; (7974 <_spi_m_sync_disable+0x48>)
    7958:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    795a:	687b      	ldr	r3, [r7, #4]
    795c:	681b      	ldr	r3, [r3, #0]
    795e:	4618      	mov	r0, r3
    7960:	4b05      	ldr	r3, [pc, #20]	; (7978 <_spi_m_sync_disable+0x4c>)
    7962:	4798      	blx	r3
    7964:	4603      	mov	r3, r0
}
    7966:	4618      	mov	r0, r3
    7968:	3708      	adds	r7, #8
    796a:	46bd      	mov	sp, r7
    796c:	bd80      	pop	{r7, pc}
    796e:	bf00      	nop
    7970:	00010210 	.word	0x00010210
    7974:	00003d61 	.word	0x00003d61
    7978:	00007591 	.word	0x00007591

0000797c <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    797c:	b580      	push	{r7, lr}
    797e:	b082      	sub	sp, #8
    7980:	af00      	add	r7, sp, #0
    7982:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    7984:	bf00      	nop
    7986:	2103      	movs	r1, #3
    7988:	6878      	ldr	r0, [r7, #4]
    798a:	4b06      	ldr	r3, [pc, #24]	; (79a4 <_spi_wait_bus_idle+0x28>)
    798c:	4798      	blx	r3
    798e:	4603      	mov	r3, r0
    7990:	2b00      	cmp	r3, #0
    7992:	d0f8      	beq.n	7986 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    7994:	2103      	movs	r1, #3
    7996:	6878      	ldr	r0, [r7, #4]
    7998:	4b03      	ldr	r3, [pc, #12]	; (79a8 <_spi_wait_bus_idle+0x2c>)
    799a:	4798      	blx	r3
}
    799c:	bf00      	nop
    799e:	3708      	adds	r7, #8
    79a0:	46bd      	mov	sp, r7
    79a2:	bd80      	pop	{r7, pc}
    79a4:	00006401 	.word	0x00006401
    79a8:	00006443 	.word	0x00006443

000079ac <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    79ac:	b580      	push	{r7, lr}
    79ae:	b086      	sub	sp, #24
    79b0:	af00      	add	r7, sp, #0
    79b2:	60f8      	str	r0, [r7, #12]
    79b4:	60b9      	str	r1, [r7, #8]
    79b6:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    79b8:	68bb      	ldr	r3, [r7, #8]
    79ba:	f003 0304 	and.w	r3, r3, #4
    79be:	2b00      	cmp	r3, #0
    79c0:	d101      	bne.n	79c6 <_spi_rx_check_and_receive+0x1a>
		return false;
    79c2:	2300      	movs	r3, #0
    79c4:	e022      	b.n	7a0c <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    79c6:	68f8      	ldr	r0, [r7, #12]
    79c8:	4b12      	ldr	r3, [pc, #72]	; (7a14 <_spi_rx_check_and_receive+0x68>)
    79ca:	4798      	blx	r3
    79cc:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    79ce:	687b      	ldr	r3, [r7, #4]
    79d0:	685b      	ldr	r3, [r3, #4]
    79d2:	2b00      	cmp	r3, #0
    79d4:	d014      	beq.n	7a00 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    79d6:	687b      	ldr	r3, [r7, #4]
    79d8:	685b      	ldr	r3, [r3, #4]
    79da:	1c59      	adds	r1, r3, #1
    79dc:	687a      	ldr	r2, [r7, #4]
    79de:	6051      	str	r1, [r2, #4]
    79e0:	697a      	ldr	r2, [r7, #20]
    79e2:	b2d2      	uxtb	r2, r2
    79e4:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    79e6:	687b      	ldr	r3, [r7, #4]
    79e8:	7c1b      	ldrb	r3, [r3, #16]
    79ea:	2b01      	cmp	r3, #1
    79ec:	d908      	bls.n	7a00 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    79ee:	687b      	ldr	r3, [r7, #4]
    79f0:	685b      	ldr	r3, [r3, #4]
    79f2:	1c59      	adds	r1, r3, #1
    79f4:	687a      	ldr	r2, [r7, #4]
    79f6:	6051      	str	r1, [r2, #4]
    79f8:	697a      	ldr	r2, [r7, #20]
    79fa:	0a12      	lsrs	r2, r2, #8
    79fc:	b2d2      	uxtb	r2, r2
    79fe:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    7a00:	687b      	ldr	r3, [r7, #4]
    7a02:	68db      	ldr	r3, [r3, #12]
    7a04:	1c5a      	adds	r2, r3, #1
    7a06:	687b      	ldr	r3, [r7, #4]
    7a08:	60da      	str	r2, [r3, #12]

	return true;
    7a0a:	2301      	movs	r3, #1
}
    7a0c:	4618      	mov	r0, r3
    7a0e:	3718      	adds	r7, #24
    7a10:	46bd      	mov	sp, r7
    7a12:	bd80      	pop	{r7, pc}
    7a14:	00006865 	.word	0x00006865

00007a18 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    7a18:	b580      	push	{r7, lr}
    7a1a:	b086      	sub	sp, #24
    7a1c:	af00      	add	r7, sp, #0
    7a1e:	60f8      	str	r0, [r7, #12]
    7a20:	60b9      	str	r1, [r7, #8]
    7a22:	607a      	str	r2, [r7, #4]
    7a24:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    7a26:	68bb      	ldr	r3, [r7, #8]
    7a28:	f003 0301 	and.w	r3, r3, #1
    7a2c:	2b00      	cmp	r3, #0
    7a2e:	d028      	beq.n	7a82 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    7a30:	687b      	ldr	r3, [r7, #4]
    7a32:	681b      	ldr	r3, [r3, #0]
    7a34:	2b00      	cmp	r3, #0
    7a36:	d018      	beq.n	7a6a <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    7a38:	687b      	ldr	r3, [r7, #4]
    7a3a:	681b      	ldr	r3, [r3, #0]
    7a3c:	1c59      	adds	r1, r3, #1
    7a3e:	687a      	ldr	r2, [r7, #4]
    7a40:	6011      	str	r1, [r2, #0]
    7a42:	781b      	ldrb	r3, [r3, #0]
    7a44:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    7a46:	687b      	ldr	r3, [r7, #4]
    7a48:	7c1b      	ldrb	r3, [r3, #16]
    7a4a:	2b01      	cmp	r3, #1
    7a4c:	d90f      	bls.n	7a6e <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    7a4e:	687b      	ldr	r3, [r7, #4]
    7a50:	681b      	ldr	r3, [r3, #0]
    7a52:	781b      	ldrb	r3, [r3, #0]
    7a54:	021b      	lsls	r3, r3, #8
    7a56:	461a      	mov	r2, r3
    7a58:	697b      	ldr	r3, [r7, #20]
    7a5a:	4313      	orrs	r3, r2
    7a5c:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    7a5e:	687b      	ldr	r3, [r7, #4]
    7a60:	681b      	ldr	r3, [r3, #0]
    7a62:	1c5a      	adds	r2, r3, #1
    7a64:	687b      	ldr	r3, [r7, #4]
    7a66:	601a      	str	r2, [r3, #0]
    7a68:	e001      	b.n	7a6e <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    7a6a:	887b      	ldrh	r3, [r7, #2]
    7a6c:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    7a6e:	687b      	ldr	r3, [r7, #4]
    7a70:	689b      	ldr	r3, [r3, #8]
    7a72:	1c5a      	adds	r2, r3, #1
    7a74:	687b      	ldr	r3, [r7, #4]
    7a76:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    7a78:	6979      	ldr	r1, [r7, #20]
    7a7a:	68f8      	ldr	r0, [r7, #12]
    7a7c:	4b03      	ldr	r3, [pc, #12]	; (7a8c <_spi_tx_check_and_send+0x74>)
    7a7e:	4798      	blx	r3
    7a80:	e000      	b.n	7a84 <_spi_tx_check_and_send+0x6c>
		return;
    7a82:	bf00      	nop
}
    7a84:	3718      	adds	r7, #24
    7a86:	46bd      	mov	sp, r7
    7a88:	bd80      	pop	{r7, pc}
    7a8a:	bf00      	nop
    7a8c:	00006849 	.word	0x00006849

00007a90 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    7a90:	b580      	push	{r7, lr}
    7a92:	b082      	sub	sp, #8
    7a94:	af00      	add	r7, sp, #0
    7a96:	6078      	str	r0, [r7, #4]
    7a98:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    7a9a:	687b      	ldr	r3, [r7, #4]
    7a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7aa0:	2b00      	cmp	r3, #0
    7aa2:	d00b      	beq.n	7abc <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    7aa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7aa8:	6838      	ldr	r0, [r7, #0]
    7aaa:	4b07      	ldr	r3, [pc, #28]	; (7ac8 <_spi_err_check+0x38>)
    7aac:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    7aae:	2180      	movs	r1, #128	; 0x80
    7ab0:	6838      	ldr	r0, [r7, #0]
    7ab2:	4b06      	ldr	r3, [pc, #24]	; (7acc <_spi_err_check+0x3c>)
    7ab4:	4798      	blx	r3
		return ERR_OVERFLOW;
    7ab6:	f06f 0312 	mvn.w	r3, #18
    7aba:	e000      	b.n	7abe <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    7abc:	2300      	movs	r3, #0
}
    7abe:	4618      	mov	r0, r3
    7ac0:	3708      	adds	r7, #8
    7ac2:	46bd      	mov	sp, r7
    7ac4:	bd80      	pop	{r7, pc}
    7ac6:	bf00      	nop
    7ac8:	0000689d 	.word	0x0000689d
    7acc:	00006443 	.word	0x00006443

00007ad0 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    7ad0:	b590      	push	{r4, r7, lr}
    7ad2:	b08b      	sub	sp, #44	; 0x2c
    7ad4:	af00      	add	r7, sp, #0
    7ad6:	6078      	str	r0, [r7, #4]
    7ad8:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    7ada:	687b      	ldr	r3, [r7, #4]
    7adc:	681b      	ldr	r3, [r3, #0]
    7ade:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    7ae0:	2300      	movs	r3, #0
    7ae2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    7ae4:	683b      	ldr	r3, [r7, #0]
    7ae6:	681b      	ldr	r3, [r3, #0]
    7ae8:	60bb      	str	r3, [r7, #8]
    7aea:	683b      	ldr	r3, [r7, #0]
    7aec:	685b      	ldr	r3, [r3, #4]
    7aee:	60fb      	str	r3, [r7, #12]
    7af0:	2300      	movs	r3, #0
    7af2:	613b      	str	r3, [r7, #16]
    7af4:	2300      	movs	r3, #0
    7af6:	617b      	str	r3, [r7, #20]
    7af8:	687b      	ldr	r3, [r7, #4]
    7afa:	791b      	ldrb	r3, [r3, #4]
    7afc:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    7afe:	687b      	ldr	r3, [r7, #4]
    7b00:	2b00      	cmp	r3, #0
    7b02:	d004      	beq.n	7b0e <_spi_m_sync_trans+0x3e>
    7b04:	6a3b      	ldr	r3, [r7, #32]
    7b06:	2b00      	cmp	r3, #0
    7b08:	d001      	beq.n	7b0e <_spi_m_sync_trans+0x3e>
    7b0a:	2301      	movs	r3, #1
    7b0c:	e000      	b.n	7b10 <_spi_m_sync_trans+0x40>
    7b0e:	2300      	movs	r3, #0
    7b10:	f003 0301 	and.w	r3, r3, #1
    7b14:	b2db      	uxtb	r3, r3
    7b16:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
    7b1a:	492b      	ldr	r1, [pc, #172]	; (7bc8 <_spi_m_sync_trans+0xf8>)
    7b1c:	4618      	mov	r0, r3
    7b1e:	4b2b      	ldr	r3, [pc, #172]	; (7bcc <_spi_m_sync_trans+0xfc>)
    7b20:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    7b22:	2107      	movs	r1, #7
    7b24:	6a38      	ldr	r0, [r7, #32]
    7b26:	4b2a      	ldr	r3, [pc, #168]	; (7bd0 <_spi_m_sync_trans+0x100>)
    7b28:	4798      	blx	r3
    7b2a:	4603      	mov	r3, r0
    7b2c:	2b00      	cmp	r3, #0
    7b2e:	d002      	beq.n	7b36 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    7b30:	f06f 0303 	mvn.w	r3, #3
    7b34:	e043      	b.n	7bbe <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    7b36:	6a38      	ldr	r0, [r7, #32]
    7b38:	4b26      	ldr	r3, [pc, #152]	; (7bd4 <_spi_m_sync_trans+0x104>)
    7b3a:	4798      	blx	r3
    7b3c:	4603      	mov	r3, r0
    7b3e:	f083 0301 	eor.w	r3, r3, #1
    7b42:	b2db      	uxtb	r3, r3
    7b44:	2b00      	cmp	r3, #0
    7b46:	d002      	beq.n	7b4e <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    7b48:	f06f 0313 	mvn.w	r3, #19
    7b4c:	e037      	b.n	7bbe <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    7b4e:	6a38      	ldr	r0, [r7, #32]
    7b50:	4b21      	ldr	r3, [pc, #132]	; (7bd8 <_spi_m_sync_trans+0x108>)
    7b52:	4798      	blx	r3
    7b54:	4603      	mov	r3, r0
    7b56:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    7b58:	f107 0308 	add.w	r3, r7, #8
    7b5c:	461a      	mov	r2, r3
    7b5e:	69f9      	ldr	r1, [r7, #28]
    7b60:	6a38      	ldr	r0, [r7, #32]
    7b62:	4b1e      	ldr	r3, [pc, #120]	; (7bdc <_spi_m_sync_trans+0x10c>)
    7b64:	4798      	blx	r3
    7b66:	4603      	mov	r3, r0
    7b68:	f083 0301 	eor.w	r3, r3, #1
    7b6c:	b2db      	uxtb	r3, r3
    7b6e:	2b00      	cmp	r3, #0
    7b70:	d00b      	beq.n	7b8a <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    7b72:	697a      	ldr	r2, [r7, #20]
    7b74:	693b      	ldr	r3, [r7, #16]
    7b76:	429a      	cmp	r2, r3
    7b78:	d307      	bcc.n	7b8a <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    7b7a:	687b      	ldr	r3, [r7, #4]
    7b7c:	88db      	ldrh	r3, [r3, #6]
    7b7e:	f107 0208 	add.w	r2, r7, #8
    7b82:	69f9      	ldr	r1, [r7, #28]
    7b84:	6a38      	ldr	r0, [r7, #32]
    7b86:	4c16      	ldr	r4, [pc, #88]	; (7be0 <_spi_m_sync_trans+0x110>)
    7b88:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    7b8a:	6a39      	ldr	r1, [r7, #32]
    7b8c:	69f8      	ldr	r0, [r7, #28]
    7b8e:	4b15      	ldr	r3, [pc, #84]	; (7be4 <_spi_m_sync_trans+0x114>)
    7b90:	4798      	blx	r3
    7b92:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    7b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7b96:	2b00      	cmp	r3, #0
    7b98:	db0c      	blt.n	7bb4 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    7b9a:	693a      	ldr	r2, [r7, #16]
    7b9c:	683b      	ldr	r3, [r7, #0]
    7b9e:	689b      	ldr	r3, [r3, #8]
    7ba0:	429a      	cmp	r2, r3
    7ba2:	d3d4      	bcc.n	7b4e <_spi_m_sync_trans+0x7e>
    7ba4:	697a      	ldr	r2, [r7, #20]
    7ba6:	683b      	ldr	r3, [r7, #0]
    7ba8:	689b      	ldr	r3, [r3, #8]
    7baa:	429a      	cmp	r2, r3
    7bac:	d3cf      	bcc.n	7b4e <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    7bae:	693b      	ldr	r3, [r7, #16]
    7bb0:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    7bb2:	e000      	b.n	7bb6 <_spi_m_sync_trans+0xe6>
			break;
    7bb4:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    7bb6:	6a38      	ldr	r0, [r7, #32]
    7bb8:	4b0b      	ldr	r3, [pc, #44]	; (7be8 <_spi_m_sync_trans+0x118>)
    7bba:	4798      	blx	r3

	return rc;
    7bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    7bbe:	4618      	mov	r0, r3
    7bc0:	372c      	adds	r7, #44	; 0x2c
    7bc2:	46bd      	mov	sp, r7
    7bc4:	bd90      	pop	{r4, r7, pc}
    7bc6:	bf00      	nop
    7bc8:	00010210 	.word	0x00010210
    7bcc:	00003d61 	.word	0x00003d61
    7bd0:	0000636d 	.word	0x0000636d
    7bd4:	0000655d 	.word	0x0000655d
    7bd8:	00006429 	.word	0x00006429
    7bdc:	000079ad 	.word	0x000079ad
    7be0:	00007a19 	.word	0x00007a19
    7be4:	00007a91 	.word	0x00007a91
    7be8:	0000797d 	.word	0x0000797d

00007bec <__NVIC_EnableIRQ>:
{
    7bec:	b480      	push	{r7}
    7bee:	b083      	sub	sp, #12
    7bf0:	af00      	add	r7, sp, #0
    7bf2:	4603      	mov	r3, r0
    7bf4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7bfa:	2b00      	cmp	r3, #0
    7bfc:	db0b      	blt.n	7c16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7bfe:	4909      	ldr	r1, [pc, #36]	; (7c24 <__NVIC_EnableIRQ+0x38>)
    7c00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7c04:	095b      	lsrs	r3, r3, #5
    7c06:	88fa      	ldrh	r2, [r7, #6]
    7c08:	f002 021f 	and.w	r2, r2, #31
    7c0c:	2001      	movs	r0, #1
    7c0e:	fa00 f202 	lsl.w	r2, r0, r2
    7c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7c16:	bf00      	nop
    7c18:	370c      	adds	r7, #12
    7c1a:	46bd      	mov	sp, r7
    7c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c20:	4770      	bx	lr
    7c22:	bf00      	nop
    7c24:	e000e100 	.word	0xe000e100

00007c28 <__NVIC_DisableIRQ>:
{
    7c28:	b480      	push	{r7}
    7c2a:	b083      	sub	sp, #12
    7c2c:	af00      	add	r7, sp, #0
    7c2e:	4603      	mov	r3, r0
    7c30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7c32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7c36:	2b00      	cmp	r3, #0
    7c38:	db10      	blt.n	7c5c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7c3a:	490b      	ldr	r1, [pc, #44]	; (7c68 <__NVIC_DisableIRQ+0x40>)
    7c3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7c40:	095b      	lsrs	r3, r3, #5
    7c42:	88fa      	ldrh	r2, [r7, #6]
    7c44:	f002 021f 	and.w	r2, r2, #31
    7c48:	2001      	movs	r0, #1
    7c4a:	fa00 f202 	lsl.w	r2, r0, r2
    7c4e:	3320      	adds	r3, #32
    7c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7c54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7c58:	f3bf 8f6f 	isb	sy
}
    7c5c:	bf00      	nop
    7c5e:	370c      	adds	r7, #12
    7c60:	46bd      	mov	sp, r7
    7c62:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c66:	4770      	bx	lr
    7c68:	e000e100 	.word	0xe000e100

00007c6c <__NVIC_ClearPendingIRQ>:
{
    7c6c:	b480      	push	{r7}
    7c6e:	b083      	sub	sp, #12
    7c70:	af00      	add	r7, sp, #0
    7c72:	4603      	mov	r3, r0
    7c74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7c7a:	2b00      	cmp	r3, #0
    7c7c:	db0c      	blt.n	7c98 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7c7e:	4909      	ldr	r1, [pc, #36]	; (7ca4 <__NVIC_ClearPendingIRQ+0x38>)
    7c80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7c84:	095b      	lsrs	r3, r3, #5
    7c86:	88fa      	ldrh	r2, [r7, #6]
    7c88:	f002 021f 	and.w	r2, r2, #31
    7c8c:	2001      	movs	r0, #1
    7c8e:	fa00 f202 	lsl.w	r2, r0, r2
    7c92:	3360      	adds	r3, #96	; 0x60
    7c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7c98:	bf00      	nop
    7c9a:	370c      	adds	r7, #12
    7c9c:	46bd      	mov	sp, r7
    7c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ca2:	4770      	bx	lr
    7ca4:	e000e100 	.word	0xe000e100

00007ca8 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7ca8:	b480      	push	{r7}
    7caa:	b083      	sub	sp, #12
    7cac:	af00      	add	r7, sp, #0
    7cae:	6078      	str	r0, [r7, #4]
    7cb0:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    7cb2:	bf00      	nop
    7cb4:	687b      	ldr	r3, [r7, #4]
    7cb6:	689a      	ldr	r2, [r3, #8]
    7cb8:	683b      	ldr	r3, [r7, #0]
    7cba:	4013      	ands	r3, r2
    7cbc:	2b00      	cmp	r3, #0
    7cbe:	d1f9      	bne.n	7cb4 <hri_tcc_wait_for_sync+0xc>
	};
}
    7cc0:	bf00      	nop
    7cc2:	370c      	adds	r7, #12
    7cc4:	46bd      	mov	sp, r7
    7cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cca:	4770      	bx	lr

00007ccc <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7ccc:	b480      	push	{r7}
    7cce:	b083      	sub	sp, #12
    7cd0:	af00      	add	r7, sp, #0
    7cd2:	6078      	str	r0, [r7, #4]
    7cd4:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    7cd6:	687b      	ldr	r3, [r7, #4]
    7cd8:	689a      	ldr	r2, [r3, #8]
    7cda:	683b      	ldr	r3, [r7, #0]
    7cdc:	4013      	ands	r3, r2
    7cde:	2b00      	cmp	r3, #0
    7ce0:	bf14      	ite	ne
    7ce2:	2301      	movne	r3, #1
    7ce4:	2300      	moveq	r3, #0
    7ce6:	b2db      	uxtb	r3, r3
}
    7ce8:	4618      	mov	r0, r3
    7cea:	370c      	adds	r7, #12
    7cec:	46bd      	mov	sp, r7
    7cee:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cf2:	4770      	bx	lr

00007cf4 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7cf4:	b480      	push	{r7}
    7cf6:	b083      	sub	sp, #12
    7cf8:	af00      	add	r7, sp, #0
    7cfa:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    7cfc:	687b      	ldr	r3, [r7, #4]
    7cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7d00:	f003 0301 	and.w	r3, r3, #1
    7d04:	2b00      	cmp	r3, #0
    7d06:	bf14      	ite	ne
    7d08:	2301      	movne	r3, #1
    7d0a:	2300      	moveq	r3, #0
    7d0c:	b2db      	uxtb	r3, r3
}
    7d0e:	4618      	mov	r0, r3
    7d10:	370c      	adds	r7, #12
    7d12:	46bd      	mov	sp, r7
    7d14:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d18:	4770      	bx	lr

00007d1a <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    7d1a:	b480      	push	{r7}
    7d1c:	b083      	sub	sp, #12
    7d1e:	af00      	add	r7, sp, #0
    7d20:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    7d22:	687b      	ldr	r3, [r7, #4]
    7d24:	2201      	movs	r2, #1
    7d26:	62da      	str	r2, [r3, #44]	; 0x2c
}
    7d28:	bf00      	nop
    7d2a:	370c      	adds	r7, #12
    7d2c:	46bd      	mov	sp, r7
    7d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d32:	4770      	bx	lr

00007d34 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    7d34:	b480      	push	{r7}
    7d36:	b083      	sub	sp, #12
    7d38:	af00      	add	r7, sp, #0
    7d3a:	6078      	str	r0, [r7, #4]
    7d3c:	460b      	mov	r3, r1
    7d3e:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    7d40:	687b      	ldr	r3, [r7, #4]
    7d42:	78fa      	ldrb	r2, [r7, #3]
    7d44:	715a      	strb	r2, [r3, #5]
}
    7d46:	bf00      	nop
    7d48:	370c      	adds	r7, #12
    7d4a:	46bd      	mov	sp, r7
    7d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d50:	4770      	bx	lr

00007d52 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    7d52:	b480      	push	{r7}
    7d54:	b083      	sub	sp, #12
    7d56:	af00      	add	r7, sp, #0
    7d58:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    7d5a:	687b      	ldr	r3, [r7, #4]
    7d5c:	2201      	movs	r2, #1
    7d5e:	629a      	str	r2, [r3, #40]	; 0x28
}
    7d60:	bf00      	nop
    7d62:	370c      	adds	r7, #12
    7d64:	46bd      	mov	sp, r7
    7d66:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d6a:	4770      	bx	lr

00007d6c <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7d6c:	b580      	push	{r7, lr}
    7d6e:	b082      	sub	sp, #8
    7d70:	af00      	add	r7, sp, #0
    7d72:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    7d74:	687b      	ldr	r3, [r7, #4]
    7d76:	681b      	ldr	r3, [r3, #0]
    7d78:	f043 0201 	orr.w	r2, r3, #1
    7d7c:	687b      	ldr	r3, [r7, #4]
    7d7e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7d80:	2101      	movs	r1, #1
    7d82:	6878      	ldr	r0, [r7, #4]
    7d84:	4b02      	ldr	r3, [pc, #8]	; (7d90 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    7d86:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7d88:	bf00      	nop
    7d8a:	3708      	adds	r7, #8
    7d8c:	46bd      	mov	sp, r7
    7d8e:	bd80      	pop	{r7, pc}
    7d90:	00007ca9 	.word	0x00007ca9

00007d94 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7d94:	b580      	push	{r7, lr}
    7d96:	b082      	sub	sp, #8
    7d98:	af00      	add	r7, sp, #0
    7d9a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7d9c:	687b      	ldr	r3, [r7, #4]
    7d9e:	681b      	ldr	r3, [r3, #0]
    7da0:	f043 0202 	orr.w	r2, r3, #2
    7da4:	687b      	ldr	r3, [r7, #4]
    7da6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7da8:	2103      	movs	r1, #3
    7daa:	6878      	ldr	r0, [r7, #4]
    7dac:	4b02      	ldr	r3, [pc, #8]	; (7db8 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    7dae:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7db0:	bf00      	nop
    7db2:	3708      	adds	r7, #8
    7db4:	46bd      	mov	sp, r7
    7db6:	bd80      	pop	{r7, pc}
    7db8:	00007ca9 	.word	0x00007ca9

00007dbc <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7dbc:	b580      	push	{r7, lr}
    7dbe:	b084      	sub	sp, #16
    7dc0:	af00      	add	r7, sp, #0
    7dc2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7dc4:	2103      	movs	r1, #3
    7dc6:	6878      	ldr	r0, [r7, #4]
    7dc8:	4b09      	ldr	r3, [pc, #36]	; (7df0 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    7dca:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7dcc:	687b      	ldr	r3, [r7, #4]
    7dce:	681b      	ldr	r3, [r3, #0]
    7dd0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    7dd2:	68fb      	ldr	r3, [r7, #12]
    7dd4:	085b      	lsrs	r3, r3, #1
    7dd6:	f003 0301 	and.w	r3, r3, #1
    7dda:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7ddc:	68fb      	ldr	r3, [r7, #12]
    7dde:	2b00      	cmp	r3, #0
    7de0:	bf14      	ite	ne
    7de2:	2301      	movne	r3, #1
    7de4:	2300      	moveq	r3, #0
    7de6:	b2db      	uxtb	r3, r3
}
    7de8:	4618      	mov	r0, r3
    7dea:	3710      	adds	r7, #16
    7dec:	46bd      	mov	sp, r7
    7dee:	bd80      	pop	{r7, pc}
    7df0:	00007ca9 	.word	0x00007ca9

00007df4 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7df4:	b580      	push	{r7, lr}
    7df6:	b082      	sub	sp, #8
    7df8:	af00      	add	r7, sp, #0
    7dfa:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7dfc:	687b      	ldr	r3, [r7, #4]
    7dfe:	681b      	ldr	r3, [r3, #0]
    7e00:	f023 0202 	bic.w	r2, r3, #2
    7e04:	687b      	ldr	r3, [r7, #4]
    7e06:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7e08:	2103      	movs	r1, #3
    7e0a:	6878      	ldr	r0, [r7, #4]
    7e0c:	4b02      	ldr	r3, [pc, #8]	; (7e18 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    7e0e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7e10:	bf00      	nop
    7e12:	3708      	adds	r7, #8
    7e14:	46bd      	mov	sp, r7
    7e16:	bd80      	pop	{r7, pc}
    7e18:	00007ca9 	.word	0x00007ca9

00007e1c <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    7e1c:	b580      	push	{r7, lr}
    7e1e:	b084      	sub	sp, #16
    7e20:	af00      	add	r7, sp, #0
    7e22:	6078      	str	r0, [r7, #4]
    7e24:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7e26:	2103      	movs	r1, #3
    7e28:	6878      	ldr	r0, [r7, #4]
    7e2a:	4b07      	ldr	r3, [pc, #28]	; (7e48 <hri_tcc_get_CTRLA_reg+0x2c>)
    7e2c:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7e2e:	687b      	ldr	r3, [r7, #4]
    7e30:	681b      	ldr	r3, [r3, #0]
    7e32:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7e34:	68fa      	ldr	r2, [r7, #12]
    7e36:	683b      	ldr	r3, [r7, #0]
    7e38:	4013      	ands	r3, r2
    7e3a:	60fb      	str	r3, [r7, #12]
	return tmp;
    7e3c:	68fb      	ldr	r3, [r7, #12]
}
    7e3e:	4618      	mov	r0, r3
    7e40:	3710      	adds	r7, #16
    7e42:	46bd      	mov	sp, r7
    7e44:	bd80      	pop	{r7, pc}
    7e46:	bf00      	nop
    7e48:	00007ca9 	.word	0x00007ca9

00007e4c <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    7e4c:	b580      	push	{r7, lr}
    7e4e:	b082      	sub	sp, #8
    7e50:	af00      	add	r7, sp, #0
    7e52:	6078      	str	r0, [r7, #4]
    7e54:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    7e56:	687b      	ldr	r3, [r7, #4]
    7e58:	683a      	ldr	r2, [r7, #0]
    7e5a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7e5c:	2103      	movs	r1, #3
    7e5e:	6878      	ldr	r0, [r7, #4]
    7e60:	4b02      	ldr	r3, [pc, #8]	; (7e6c <hri_tcc_write_CTRLA_reg+0x20>)
    7e62:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7e64:	bf00      	nop
    7e66:	3708      	adds	r7, #8
    7e68:	46bd      	mov	sp, r7
    7e6a:	bd80      	pop	{r7, pc}
    7e6c:	00007ca9 	.word	0x00007ca9

00007e70 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    7e70:	b480      	push	{r7}
    7e72:	b083      	sub	sp, #12
    7e74:	af00      	add	r7, sp, #0
    7e76:	6078      	str	r0, [r7, #4]
    7e78:	460b      	mov	r3, r1
    7e7a:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    7e7c:	687b      	ldr	r3, [r7, #4]
    7e7e:	78fa      	ldrb	r2, [r7, #3]
    7e80:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7e82:	bf00      	nop
    7e84:	370c      	adds	r7, #12
    7e86:	46bd      	mov	sp, r7
    7e88:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e8c:	4770      	bx	lr

00007e8e <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    7e8e:	b480      	push	{r7}
    7e90:	b083      	sub	sp, #12
    7e92:	af00      	add	r7, sp, #0
    7e94:	6078      	str	r0, [r7, #4]
    7e96:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    7e98:	687b      	ldr	r3, [r7, #4]
    7e9a:	683a      	ldr	r2, [r7, #0]
    7e9c:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7e9e:	bf00      	nop
    7ea0:	370c      	adds	r7, #12
    7ea2:	46bd      	mov	sp, r7
    7ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ea8:	4770      	bx	lr
	...

00007eac <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    7eac:	b580      	push	{r7, lr}
    7eae:	b082      	sub	sp, #8
    7eb0:	af00      	add	r7, sp, #0
    7eb2:	6078      	str	r0, [r7, #4]
    7eb4:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    7eb6:	687b      	ldr	r3, [r7, #4]
    7eb8:	683a      	ldr	r2, [r7, #0]
    7eba:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7ebc:	2180      	movs	r1, #128	; 0x80
    7ebe:	6878      	ldr	r0, [r7, #4]
    7ec0:	4b02      	ldr	r3, [pc, #8]	; (7ecc <hri_tcc_write_PER_reg+0x20>)
    7ec2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7ec4:	bf00      	nop
    7ec6:	3708      	adds	r7, #8
    7ec8:	46bd      	mov	sp, r7
    7eca:	bd80      	pop	{r7, pc}
    7ecc:	00007ca9 	.word	0x00007ca9

00007ed0 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    7ed0:	b580      	push	{r7, lr}
    7ed2:	b082      	sub	sp, #8
    7ed4:	af00      	add	r7, sp, #0
    7ed6:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7ed8:	2180      	movs	r1, #128	; 0x80
    7eda:	6878      	ldr	r0, [r7, #4]
    7edc:	4b03      	ldr	r3, [pc, #12]	; (7eec <hri_tcc_read_PER_reg+0x1c>)
    7ede:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    7ee0:	687b      	ldr	r3, [r7, #4]
    7ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    7ee4:	4618      	mov	r0, r3
    7ee6:	3708      	adds	r7, #8
    7ee8:	46bd      	mov	sp, r7
    7eea:	bd80      	pop	{r7, pc}
    7eec:	00007ca9 	.word	0x00007ca9

00007ef0 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7ef0:	b480      	push	{r7}
    7ef2:	b083      	sub	sp, #12
    7ef4:	af00      	add	r7, sp, #0
    7ef6:	6078      	str	r0, [r7, #4]
    7ef8:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    7efa:	687b      	ldr	r3, [r7, #4]
    7efc:	4a09      	ldr	r2, [pc, #36]	; (7f24 <_tcc_init_irq_param+0x34>)
    7efe:	4293      	cmp	r3, r2
    7f00:	d102      	bne.n	7f08 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    7f02:	4a09      	ldr	r2, [pc, #36]	; (7f28 <_tcc_init_irq_param+0x38>)
    7f04:	683b      	ldr	r3, [r7, #0]
    7f06:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7f08:	687b      	ldr	r3, [r7, #4]
    7f0a:	4a08      	ldr	r2, [pc, #32]	; (7f2c <_tcc_init_irq_param+0x3c>)
    7f0c:	4293      	cmp	r3, r2
    7f0e:	d102      	bne.n	7f16 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    7f10:	4a07      	ldr	r2, [pc, #28]	; (7f30 <_tcc_init_irq_param+0x40>)
    7f12:	683b      	ldr	r3, [r7, #0]
    7f14:	6013      	str	r3, [r2, #0]
	}
}
    7f16:	bf00      	nop
    7f18:	370c      	adds	r7, #12
    7f1a:	46bd      	mov	sp, r7
    7f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f20:	4770      	bx	lr
    7f22:	bf00      	nop
    7f24:	41016000 	.word	0x41016000
    7f28:	20000c08 	.word	0x20000c08
    7f2c:	41018000 	.word	0x41018000
    7f30:	20000c0c 	.word	0x20000c0c

00007f34 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    7f34:	b580      	push	{r7, lr}
    7f36:	b084      	sub	sp, #16
    7f38:	af00      	add	r7, sp, #0
    7f3a:	6078      	str	r0, [r7, #4]
    7f3c:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7f3e:	6838      	ldr	r0, [r7, #0]
    7f40:	4b33      	ldr	r3, [pc, #204]	; (8010 <_tcc_timer_init+0xdc>)
    7f42:	4798      	blx	r3
    7f44:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    7f46:	68fb      	ldr	r3, [r7, #12]
    7f48:	2b00      	cmp	r3, #0
    7f4a:	d102      	bne.n	7f52 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    7f4c:	f06f 0309 	mvn.w	r3, #9
    7f50:	e05a      	b.n	8008 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    7f52:	687b      	ldr	r3, [r7, #4]
    7f54:	683a      	ldr	r2, [r7, #0]
    7f56:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    7f58:	2101      	movs	r1, #1
    7f5a:	6838      	ldr	r0, [r7, #0]
    7f5c:	4b2d      	ldr	r3, [pc, #180]	; (8014 <_tcc_timer_init+0xe0>)
    7f5e:	4798      	blx	r3
    7f60:	4603      	mov	r3, r0
    7f62:	f083 0301 	eor.w	r3, r3, #1
    7f66:	b2db      	uxtb	r3, r3
    7f68:	2b00      	cmp	r3, #0
    7f6a:	d011      	beq.n	7f90 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    7f6c:	2102      	movs	r1, #2
    7f6e:	6838      	ldr	r0, [r7, #0]
    7f70:	4b29      	ldr	r3, [pc, #164]	; (8018 <_tcc_timer_init+0xe4>)
    7f72:	4798      	blx	r3
    7f74:	4603      	mov	r3, r0
    7f76:	2b00      	cmp	r3, #0
    7f78:	d006      	beq.n	7f88 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7f7a:	6838      	ldr	r0, [r7, #0]
    7f7c:	4b27      	ldr	r3, [pc, #156]	; (801c <_tcc_timer_init+0xe8>)
    7f7e:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    7f80:	2102      	movs	r1, #2
    7f82:	6838      	ldr	r0, [r7, #0]
    7f84:	4b26      	ldr	r3, [pc, #152]	; (8020 <_tcc_timer_init+0xec>)
    7f86:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    7f88:	2101      	movs	r1, #1
    7f8a:	6838      	ldr	r0, [r7, #0]
    7f8c:	4b25      	ldr	r3, [pc, #148]	; (8024 <_tcc_timer_init+0xf0>)
    7f8e:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7f90:	2101      	movs	r1, #1
    7f92:	6838      	ldr	r0, [r7, #0]
    7f94:	4b22      	ldr	r3, [pc, #136]	; (8020 <_tcc_timer_init+0xec>)
    7f96:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    7f98:	68fb      	ldr	r3, [r7, #12]
    7f9a:	689b      	ldr	r3, [r3, #8]
    7f9c:	4619      	mov	r1, r3
    7f9e:	6838      	ldr	r0, [r7, #0]
    7fa0:	4b20      	ldr	r3, [pc, #128]	; (8024 <_tcc_timer_init+0xf0>)
    7fa2:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    7fa4:	68fb      	ldr	r3, [r7, #12]
    7fa6:	7b1b      	ldrb	r3, [r3, #12]
    7fa8:	4619      	mov	r1, r3
    7faa:	6838      	ldr	r0, [r7, #0]
    7fac:	4b1e      	ldr	r3, [pc, #120]	; (8028 <_tcc_timer_init+0xf4>)
    7fae:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    7fb0:	68fb      	ldr	r3, [r7, #12]
    7fb2:	7b5b      	ldrb	r3, [r3, #13]
    7fb4:	4619      	mov	r1, r3
    7fb6:	6838      	ldr	r0, [r7, #0]
    7fb8:	4b1c      	ldr	r3, [pc, #112]	; (802c <_tcc_timer_init+0xf8>)
    7fba:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    7fbc:	68fb      	ldr	r3, [r7, #12]
    7fbe:	691b      	ldr	r3, [r3, #16]
    7fc0:	4619      	mov	r1, r3
    7fc2:	6838      	ldr	r0, [r7, #0]
    7fc4:	4b1a      	ldr	r3, [pc, #104]	; (8030 <_tcc_timer_init+0xfc>)
    7fc6:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    7fc8:	68fb      	ldr	r3, [r7, #12]
    7fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7fcc:	4619      	mov	r1, r3
    7fce:	6838      	ldr	r0, [r7, #0]
    7fd0:	4b18      	ldr	r3, [pc, #96]	; (8034 <_tcc_timer_init+0x100>)
    7fd2:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    7fd4:	6838      	ldr	r0, [r7, #0]
    7fd6:	4b18      	ldr	r3, [pc, #96]	; (8038 <_tcc_timer_init+0x104>)
    7fd8:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    7fda:	6879      	ldr	r1, [r7, #4]
    7fdc:	6838      	ldr	r0, [r7, #0]
    7fde:	4b17      	ldr	r3, [pc, #92]	; (803c <_tcc_timer_init+0x108>)
    7fe0:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7fe2:	68fb      	ldr	r3, [r7, #12]
    7fe4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7fe8:	4618      	mov	r0, r3
    7fea:	4b15      	ldr	r3, [pc, #84]	; (8040 <_tcc_timer_init+0x10c>)
    7fec:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    7fee:	68fb      	ldr	r3, [r7, #12]
    7ff0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7ff4:	4618      	mov	r0, r3
    7ff6:	4b13      	ldr	r3, [pc, #76]	; (8044 <_tcc_timer_init+0x110>)
    7ff8:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    7ffa:	68fb      	ldr	r3, [r7, #12]
    7ffc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8000:	4618      	mov	r0, r3
    8002:	4b11      	ldr	r3, [pc, #68]	; (8048 <_tcc_timer_init+0x114>)
    8004:	4798      	blx	r3

	return ERR_NONE;
    8006:	2300      	movs	r3, #0
}
    8008:	4618      	mov	r0, r3
    800a:	3710      	adds	r7, #16
    800c:	46bd      	mov	sp, r7
    800e:	bd80      	pop	{r7, pc}
    8010:	000081fd 	.word	0x000081fd
    8014:	00007ccd 	.word	0x00007ccd
    8018:	00007e1d 	.word	0x00007e1d
    801c:	00007df5 	.word	0x00007df5
    8020:	00007ca9 	.word	0x00007ca9
    8024:	00007e4d 	.word	0x00007e4d
    8028:	00007d35 	.word	0x00007d35
    802c:	00007e71 	.word	0x00007e71
    8030:	00007e8f 	.word	0x00007e8f
    8034:	00007ead 	.word	0x00007ead
    8038:	00007d53 	.word	0x00007d53
    803c:	00007ef1 	.word	0x00007ef1
    8040:	00007c29 	.word	0x00007c29
    8044:	00007c6d 	.word	0x00007c6d
    8048:	00007bed 	.word	0x00007bed

0000804c <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    804c:	b580      	push	{r7, lr}
    804e:	b084      	sub	sp, #16
    8050:	af00      	add	r7, sp, #0
    8052:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    8054:	687b      	ldr	r3, [r7, #4]
    8056:	68db      	ldr	r3, [r3, #12]
    8058:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    805a:	68f8      	ldr	r0, [r7, #12]
    805c:	4b0a      	ldr	r3, [pc, #40]	; (8088 <_tcc_timer_deinit+0x3c>)
    805e:	4798      	blx	r3
    8060:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    8062:	68bb      	ldr	r3, [r7, #8]
    8064:	2b00      	cmp	r3, #0
    8066:	d00b      	beq.n	8080 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    8068:	68bb      	ldr	r3, [r7, #8]
    806a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    806e:	4618      	mov	r0, r3
    8070:	4b06      	ldr	r3, [pc, #24]	; (808c <_tcc_timer_deinit+0x40>)
    8072:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    8074:	68f8      	ldr	r0, [r7, #12]
    8076:	4b06      	ldr	r3, [pc, #24]	; (8090 <_tcc_timer_deinit+0x44>)
    8078:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    807a:	68f8      	ldr	r0, [r7, #12]
    807c:	4b05      	ldr	r3, [pc, #20]	; (8094 <_tcc_timer_deinit+0x48>)
    807e:	4798      	blx	r3
	}
}
    8080:	bf00      	nop
    8082:	3710      	adds	r7, #16
    8084:	46bd      	mov	sp, r7
    8086:	bd80      	pop	{r7, pc}
    8088:	000081fd 	.word	0x000081fd
    808c:	00007c29 	.word	0x00007c29
    8090:	00007df5 	.word	0x00007df5
    8094:	00007d6d 	.word	0x00007d6d

00008098 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    8098:	b580      	push	{r7, lr}
    809a:	b082      	sub	sp, #8
    809c:	af00      	add	r7, sp, #0
    809e:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    80a0:	687b      	ldr	r3, [r7, #4]
    80a2:	68db      	ldr	r3, [r3, #12]
    80a4:	4618      	mov	r0, r3
    80a6:	4b03      	ldr	r3, [pc, #12]	; (80b4 <_tcc_timer_start+0x1c>)
    80a8:	4798      	blx	r3
}
    80aa:	bf00      	nop
    80ac:	3708      	adds	r7, #8
    80ae:	46bd      	mov	sp, r7
    80b0:	bd80      	pop	{r7, pc}
    80b2:	bf00      	nop
    80b4:	00007d95 	.word	0x00007d95

000080b8 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    80b8:	b580      	push	{r7, lr}
    80ba:	b082      	sub	sp, #8
    80bc:	af00      	add	r7, sp, #0
    80be:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    80c0:	687b      	ldr	r3, [r7, #4]
    80c2:	68db      	ldr	r3, [r3, #12]
    80c4:	4618      	mov	r0, r3
    80c6:	4b03      	ldr	r3, [pc, #12]	; (80d4 <_tcc_timer_stop+0x1c>)
    80c8:	4798      	blx	r3
}
    80ca:	bf00      	nop
    80cc:	3708      	adds	r7, #8
    80ce:	46bd      	mov	sp, r7
    80d0:	bd80      	pop	{r7, pc}
    80d2:	bf00      	nop
    80d4:	00007df5 	.word	0x00007df5

000080d8 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    80d8:	b580      	push	{r7, lr}
    80da:	b082      	sub	sp, #8
    80dc:	af00      	add	r7, sp, #0
    80de:	6078      	str	r0, [r7, #4]
    80e0:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    80e2:	687b      	ldr	r3, [r7, #4]
    80e4:	68db      	ldr	r3, [r3, #12]
    80e6:	6839      	ldr	r1, [r7, #0]
    80e8:	4618      	mov	r0, r3
    80ea:	4b03      	ldr	r3, [pc, #12]	; (80f8 <_tcc_timer_set_period+0x20>)
    80ec:	4798      	blx	r3
}
    80ee:	bf00      	nop
    80f0:	3708      	adds	r7, #8
    80f2:	46bd      	mov	sp, r7
    80f4:	bd80      	pop	{r7, pc}
    80f6:	bf00      	nop
    80f8:	00007ead 	.word	0x00007ead

000080fc <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    80fc:	b580      	push	{r7, lr}
    80fe:	b082      	sub	sp, #8
    8100:	af00      	add	r7, sp, #0
    8102:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    8104:	687b      	ldr	r3, [r7, #4]
    8106:	68db      	ldr	r3, [r3, #12]
    8108:	4618      	mov	r0, r3
    810a:	4b03      	ldr	r3, [pc, #12]	; (8118 <_tcc_timer_get_period+0x1c>)
    810c:	4798      	blx	r3
    810e:	4603      	mov	r3, r0
}
    8110:	4618      	mov	r0, r3
    8112:	3708      	adds	r7, #8
    8114:	46bd      	mov	sp, r7
    8116:	bd80      	pop	{r7, pc}
    8118:	00007ed1 	.word	0x00007ed1

0000811c <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    811c:	b580      	push	{r7, lr}
    811e:	b082      	sub	sp, #8
    8120:	af00      	add	r7, sp, #0
    8122:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    8124:	687b      	ldr	r3, [r7, #4]
    8126:	68db      	ldr	r3, [r3, #12]
    8128:	4618      	mov	r0, r3
    812a:	4b03      	ldr	r3, [pc, #12]	; (8138 <_tcc_timer_is_started+0x1c>)
    812c:	4798      	blx	r3
    812e:	4603      	mov	r3, r0
}
    8130:	4618      	mov	r0, r3
    8132:	3708      	adds	r7, #8
    8134:	46bd      	mov	sp, r7
    8136:	bd80      	pop	{r7, pc}
    8138:	00007dbd 	.word	0x00007dbd

0000813c <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    813c:	b480      	push	{r7}
    813e:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    8140:	4b02      	ldr	r3, [pc, #8]	; (814c <_tcc_get_timer+0x10>)
}
    8142:	4618      	mov	r0, r3
    8144:	46bd      	mov	sp, r7
    8146:	f85d 7b04 	ldr.w	r7, [sp], #4
    814a:	4770      	bx	lr
    814c:	200000c0 	.word	0x200000c0

00008150 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    8150:	b580      	push	{r7, lr}
    8152:	b084      	sub	sp, #16
    8154:	af00      	add	r7, sp, #0
    8156:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    8158:	687b      	ldr	r3, [r7, #4]
    815a:	68db      	ldr	r3, [r3, #12]
    815c:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    815e:	68f8      	ldr	r0, [r7, #12]
    8160:	4b08      	ldr	r3, [pc, #32]	; (8184 <_tcc_timer_set_irq+0x34>)
    8162:	4798      	blx	r3
    8164:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    8166:	68bb      	ldr	r3, [r7, #8]
    8168:	2b00      	cmp	r3, #0
    816a:	d006      	beq.n	817a <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    816c:	68bb      	ldr	r3, [r7, #8]
    816e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8172:	b2db      	uxtb	r3, r3
    8174:	4618      	mov	r0, r3
    8176:	4b04      	ldr	r3, [pc, #16]	; (8188 <_tcc_timer_set_irq+0x38>)
    8178:	4798      	blx	r3
	}
}
    817a:	bf00      	nop
    817c:	3710      	adds	r7, #16
    817e:	46bd      	mov	sp, r7
    8180:	bd80      	pop	{r7, pc}
    8182:	bf00      	nop
    8184:	000081fd 	.word	0x000081fd
    8188:	000045ad 	.word	0x000045ad

0000818c <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    818c:	b580      	push	{r7, lr}
    818e:	b084      	sub	sp, #16
    8190:	af00      	add	r7, sp, #0
    8192:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8194:	687b      	ldr	r3, [r7, #4]
    8196:	68db      	ldr	r3, [r3, #12]
    8198:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    819a:	68f8      	ldr	r0, [r7, #12]
    819c:	4b07      	ldr	r3, [pc, #28]	; (81bc <tcc_interrupt_handler+0x30>)
    819e:	4798      	blx	r3
    81a0:	4603      	mov	r3, r0
    81a2:	2b00      	cmp	r3, #0
    81a4:	d006      	beq.n	81b4 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    81a6:	68f8      	ldr	r0, [r7, #12]
    81a8:	4b05      	ldr	r3, [pc, #20]	; (81c0 <tcc_interrupt_handler+0x34>)
    81aa:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    81ac:	687b      	ldr	r3, [r7, #4]
    81ae:	681b      	ldr	r3, [r3, #0]
    81b0:	6878      	ldr	r0, [r7, #4]
    81b2:	4798      	blx	r3
	}
}
    81b4:	bf00      	nop
    81b6:	3710      	adds	r7, #16
    81b8:	46bd      	mov	sp, r7
    81ba:	bd80      	pop	{r7, pc}
    81bc:	00007cf5 	.word	0x00007cf5
    81c0:	00007d1b 	.word	0x00007d1b

000081c4 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    81c4:	b580      	push	{r7, lr}
    81c6:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    81c8:	4b03      	ldr	r3, [pc, #12]	; (81d8 <TCC0_0_Handler+0x14>)
    81ca:	681b      	ldr	r3, [r3, #0]
    81cc:	4618      	mov	r0, r3
    81ce:	4b03      	ldr	r3, [pc, #12]	; (81dc <TCC0_0_Handler+0x18>)
    81d0:	4798      	blx	r3
}
    81d2:	bf00      	nop
    81d4:	bd80      	pop	{r7, pc}
    81d6:	bf00      	nop
    81d8:	20000c08 	.word	0x20000c08
    81dc:	0000818d 	.word	0x0000818d

000081e0 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    81e0:	b580      	push	{r7, lr}
    81e2:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    81e4:	4b03      	ldr	r3, [pc, #12]	; (81f4 <TCC1_0_Handler+0x14>)
    81e6:	681b      	ldr	r3, [r3, #0]
    81e8:	4618      	mov	r0, r3
    81ea:	4b03      	ldr	r3, [pc, #12]	; (81f8 <TCC1_0_Handler+0x18>)
    81ec:	4798      	blx	r3
}
    81ee:	bf00      	nop
    81f0:	bd80      	pop	{r7, pc}
    81f2:	bf00      	nop
    81f4:	20000c0c 	.word	0x20000c0c
    81f8:	0000818d 	.word	0x0000818d

000081fc <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    81fc:	b480      	push	{r7}
    81fe:	b085      	sub	sp, #20
    8200:	af00      	add	r7, sp, #0
    8202:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    8204:	2300      	movs	r3, #0
    8206:	73fb      	strb	r3, [r7, #15]
    8208:	e015      	b.n	8236 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    820a:	7bfa      	ldrb	r2, [r7, #15]
    820c:	490f      	ldr	r1, [pc, #60]	; (824c <_get_tcc_cfg+0x50>)
    820e:	4613      	mov	r3, r2
    8210:	005b      	lsls	r3, r3, #1
    8212:	4413      	add	r3, r2
    8214:	011b      	lsls	r3, r3, #4
    8216:	440b      	add	r3, r1
    8218:	681a      	ldr	r2, [r3, #0]
    821a:	687b      	ldr	r3, [r7, #4]
    821c:	429a      	cmp	r2, r3
    821e:	d107      	bne.n	8230 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    8220:	7bfa      	ldrb	r2, [r7, #15]
    8222:	4613      	mov	r3, r2
    8224:	005b      	lsls	r3, r3, #1
    8226:	4413      	add	r3, r2
    8228:	011b      	lsls	r3, r3, #4
    822a:	4a08      	ldr	r2, [pc, #32]	; (824c <_get_tcc_cfg+0x50>)
    822c:	4413      	add	r3, r2
    822e:	e006      	b.n	823e <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    8230:	7bfb      	ldrb	r3, [r7, #15]
    8232:	3301      	adds	r3, #1
    8234:	73fb      	strb	r3, [r7, #15]
    8236:	7bfb      	ldrb	r3, [r7, #15]
    8238:	2b01      	cmp	r3, #1
    823a:	d9e6      	bls.n	820a <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    823c:	2300      	movs	r3, #0
}
    823e:	4618      	mov	r0, r3
    8240:	3714      	adds	r7, #20
    8242:	46bd      	mov	sp, r7
    8244:	f85d 7b04 	ldr.w	r7, [sp], #4
    8248:	4770      	bx	lr
    824a:	bf00      	nop
    824c:	20000060 	.word	0x20000060

00008250 <__NVIC_EnableIRQ>:
{
    8250:	b480      	push	{r7}
    8252:	b083      	sub	sp, #12
    8254:	af00      	add	r7, sp, #0
    8256:	4603      	mov	r3, r0
    8258:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    825a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    825e:	2b00      	cmp	r3, #0
    8260:	db0b      	blt.n	827a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8262:	4909      	ldr	r1, [pc, #36]	; (8288 <__NVIC_EnableIRQ+0x38>)
    8264:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8268:	095b      	lsrs	r3, r3, #5
    826a:	88fa      	ldrh	r2, [r7, #6]
    826c:	f002 021f 	and.w	r2, r2, #31
    8270:	2001      	movs	r0, #1
    8272:	fa00 f202 	lsl.w	r2, r0, r2
    8276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    827a:	bf00      	nop
    827c:	370c      	adds	r7, #12
    827e:	46bd      	mov	sp, r7
    8280:	f85d 7b04 	ldr.w	r7, [sp], #4
    8284:	4770      	bx	lr
    8286:	bf00      	nop
    8288:	e000e100 	.word	0xe000e100

0000828c <__NVIC_DisableIRQ>:
{
    828c:	b480      	push	{r7}
    828e:	b083      	sub	sp, #12
    8290:	af00      	add	r7, sp, #0
    8292:	4603      	mov	r3, r0
    8294:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    829a:	2b00      	cmp	r3, #0
    829c:	db10      	blt.n	82c0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    829e:	490b      	ldr	r1, [pc, #44]	; (82cc <__NVIC_DisableIRQ+0x40>)
    82a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    82a4:	095b      	lsrs	r3, r3, #5
    82a6:	88fa      	ldrh	r2, [r7, #6]
    82a8:	f002 021f 	and.w	r2, r2, #31
    82ac:	2001      	movs	r0, #1
    82ae:	fa00 f202 	lsl.w	r2, r0, r2
    82b2:	3320      	adds	r3, #32
    82b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    82b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    82bc:	f3bf 8f6f 	isb	sy
}
    82c0:	bf00      	nop
    82c2:	370c      	adds	r7, #12
    82c4:	46bd      	mov	sp, r7
    82c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    82ca:	4770      	bx	lr
    82cc:	e000e100 	.word	0xe000e100

000082d0 <__NVIC_ClearPendingIRQ>:
{
    82d0:	b480      	push	{r7}
    82d2:	b083      	sub	sp, #12
    82d4:	af00      	add	r7, sp, #0
    82d6:	4603      	mov	r3, r0
    82d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    82da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    82de:	2b00      	cmp	r3, #0
    82e0:	db0c      	blt.n	82fc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    82e2:	4909      	ldr	r1, [pc, #36]	; (8308 <__NVIC_ClearPendingIRQ+0x38>)
    82e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    82e8:	095b      	lsrs	r3, r3, #5
    82ea:	88fa      	ldrh	r2, [r7, #6]
    82ec:	f002 021f 	and.w	r2, r2, #31
    82f0:	2001      	movs	r0, #1
    82f2:	fa00 f202 	lsl.w	r2, r0, r2
    82f6:	3360      	adds	r3, #96	; 0x60
    82f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    82fc:	bf00      	nop
    82fe:	370c      	adds	r7, #12
    8300:	46bd      	mov	sp, r7
    8302:	f85d 7b04 	ldr.w	r7, [sp], #4
    8306:	4770      	bx	lr
    8308:	e000e100 	.word	0xe000e100

0000830c <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    830c:	b480      	push	{r7}
    830e:	b083      	sub	sp, #12
    8310:	af00      	add	r7, sp, #0
    8312:	6078      	str	r0, [r7, #4]
    8314:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8316:	bf00      	nop
    8318:	687b      	ldr	r3, [r7, #4]
    831a:	691a      	ldr	r2, [r3, #16]
    831c:	683b      	ldr	r3, [r7, #0]
    831e:	4013      	ands	r3, r2
    8320:	2b00      	cmp	r3, #0
    8322:	d1f9      	bne.n	8318 <hri_tc_wait_for_sync+0xc>
	};
}
    8324:	bf00      	nop
    8326:	370c      	adds	r7, #12
    8328:	46bd      	mov	sp, r7
    832a:	f85d 7b04 	ldr.w	r7, [sp], #4
    832e:	4770      	bx	lr

00008330 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    8330:	b480      	push	{r7}
    8332:	b083      	sub	sp, #12
    8334:	af00      	add	r7, sp, #0
    8336:	6078      	str	r0, [r7, #4]
    8338:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    833a:	687b      	ldr	r3, [r7, #4]
    833c:	691a      	ldr	r2, [r3, #16]
    833e:	683b      	ldr	r3, [r7, #0]
    8340:	4013      	ands	r3, r2
    8342:	2b00      	cmp	r3, #0
    8344:	bf14      	ite	ne
    8346:	2301      	movne	r3, #1
    8348:	2300      	moveq	r3, #0
    834a:	b2db      	uxtb	r3, r3
}
    834c:	4618      	mov	r0, r3
    834e:	370c      	adds	r7, #12
    8350:	46bd      	mov	sp, r7
    8352:	f85d 7b04 	ldr.w	r7, [sp], #4
    8356:	4770      	bx	lr

00008358 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    8358:	b480      	push	{r7}
    835a:	b083      	sub	sp, #12
    835c:	af00      	add	r7, sp, #0
    835e:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    8360:	687b      	ldr	r3, [r7, #4]
    8362:	7a9b      	ldrb	r3, [r3, #10]
    8364:	b2db      	uxtb	r3, r3
    8366:	f003 0301 	and.w	r3, r3, #1
    836a:	2b00      	cmp	r3, #0
    836c:	bf14      	ite	ne
    836e:	2301      	movne	r3, #1
    8370:	2300      	moveq	r3, #0
    8372:	b2db      	uxtb	r3, r3
}
    8374:	4618      	mov	r0, r3
    8376:	370c      	adds	r7, #12
    8378:	46bd      	mov	sp, r7
    837a:	f85d 7b04 	ldr.w	r7, [sp], #4
    837e:	4770      	bx	lr

00008380 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    8380:	b480      	push	{r7}
    8382:	b083      	sub	sp, #12
    8384:	af00      	add	r7, sp, #0
    8386:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    8388:	687b      	ldr	r3, [r7, #4]
    838a:	2201      	movs	r2, #1
    838c:	729a      	strb	r2, [r3, #10]
}
    838e:	bf00      	nop
    8390:	370c      	adds	r7, #12
    8392:	46bd      	mov	sp, r7
    8394:	f85d 7b04 	ldr.w	r7, [sp], #4
    8398:	4770      	bx	lr

0000839a <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    839a:	b480      	push	{r7}
    839c:	b083      	sub	sp, #12
    839e:	af00      	add	r7, sp, #0
    83a0:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    83a2:	687b      	ldr	r3, [r7, #4]
    83a4:	2202      	movs	r2, #2
    83a6:	729a      	strb	r2, [r3, #10]
}
    83a8:	bf00      	nop
    83aa:	370c      	adds	r7, #12
    83ac:	46bd      	mov	sp, r7
    83ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    83b2:	4770      	bx	lr

000083b4 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    83b4:	b480      	push	{r7}
    83b6:	b083      	sub	sp, #12
    83b8:	af00      	add	r7, sp, #0
    83ba:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    83bc:	687b      	ldr	r3, [r7, #4]
    83be:	2201      	movs	r2, #1
    83c0:	725a      	strb	r2, [r3, #9]
}
    83c2:	bf00      	nop
    83c4:	370c      	adds	r7, #12
    83c6:	46bd      	mov	sp, r7
    83c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    83cc:	4770      	bx	lr

000083ce <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    83ce:	b480      	push	{r7}
    83d0:	b083      	sub	sp, #12
    83d2:	af00      	add	r7, sp, #0
    83d4:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    83d6:	687b      	ldr	r3, [r7, #4]
    83d8:	7a5b      	ldrb	r3, [r3, #9]
    83da:	b2db      	uxtb	r3, r3
    83dc:	085b      	lsrs	r3, r3, #1
    83de:	f003 0301 	and.w	r3, r3, #1
    83e2:	2b00      	cmp	r3, #0
    83e4:	bf14      	ite	ne
    83e6:	2301      	movne	r3, #1
    83e8:	2300      	moveq	r3, #0
    83ea:	b2db      	uxtb	r3, r3
}
    83ec:	4618      	mov	r0, r3
    83ee:	370c      	adds	r7, #12
    83f0:	46bd      	mov	sp, r7
    83f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    83f6:	4770      	bx	lr

000083f8 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    83f8:	b580      	push	{r7, lr}
    83fa:	b082      	sub	sp, #8
    83fc:	af00      	add	r7, sp, #0
    83fe:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    8400:	687b      	ldr	r3, [r7, #4]
    8402:	681b      	ldr	r3, [r3, #0]
    8404:	f043 0201 	orr.w	r2, r3, #1
    8408:	687b      	ldr	r3, [r7, #4]
    840a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    840c:	2101      	movs	r1, #1
    840e:	6878      	ldr	r0, [r7, #4]
    8410:	4b02      	ldr	r3, [pc, #8]	; (841c <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    8412:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8414:	bf00      	nop
    8416:	3708      	adds	r7, #8
    8418:	46bd      	mov	sp, r7
    841a:	bd80      	pop	{r7, pc}
    841c:	0000830d 	.word	0x0000830d

00008420 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8420:	b580      	push	{r7, lr}
    8422:	b082      	sub	sp, #8
    8424:	af00      	add	r7, sp, #0
    8426:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    8428:	687b      	ldr	r3, [r7, #4]
    842a:	681b      	ldr	r3, [r3, #0]
    842c:	f043 0202 	orr.w	r2, r3, #2
    8430:	687b      	ldr	r3, [r7, #4]
    8432:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8434:	2103      	movs	r1, #3
    8436:	6878      	ldr	r0, [r7, #4]
    8438:	4b02      	ldr	r3, [pc, #8]	; (8444 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    843a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    843c:	bf00      	nop
    843e:	3708      	adds	r7, #8
    8440:	46bd      	mov	sp, r7
    8442:	bd80      	pop	{r7, pc}
    8444:	0000830d 	.word	0x0000830d

00008448 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8448:	b580      	push	{r7, lr}
    844a:	b084      	sub	sp, #16
    844c:	af00      	add	r7, sp, #0
    844e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8450:	2103      	movs	r1, #3
    8452:	6878      	ldr	r0, [r7, #4]
    8454:	4b09      	ldr	r3, [pc, #36]	; (847c <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    8456:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8458:	687b      	ldr	r3, [r7, #4]
    845a:	681b      	ldr	r3, [r3, #0]
    845c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    845e:	68fb      	ldr	r3, [r7, #12]
    8460:	085b      	lsrs	r3, r3, #1
    8462:	f003 0301 	and.w	r3, r3, #1
    8466:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    8468:	68fb      	ldr	r3, [r7, #12]
    846a:	2b00      	cmp	r3, #0
    846c:	bf14      	ite	ne
    846e:	2301      	movne	r3, #1
    8470:	2300      	moveq	r3, #0
    8472:	b2db      	uxtb	r3, r3
}
    8474:	4618      	mov	r0, r3
    8476:	3710      	adds	r7, #16
    8478:	46bd      	mov	sp, r7
    847a:	bd80      	pop	{r7, pc}
    847c:	0000830d 	.word	0x0000830d

00008480 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8480:	b580      	push	{r7, lr}
    8482:	b082      	sub	sp, #8
    8484:	af00      	add	r7, sp, #0
    8486:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    8488:	687b      	ldr	r3, [r7, #4]
    848a:	681b      	ldr	r3, [r3, #0]
    848c:	f023 0202 	bic.w	r2, r3, #2
    8490:	687b      	ldr	r3, [r7, #4]
    8492:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8494:	2103      	movs	r1, #3
    8496:	6878      	ldr	r0, [r7, #4]
    8498:	4b02      	ldr	r3, [pc, #8]	; (84a4 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    849a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    849c:	bf00      	nop
    849e:	3708      	adds	r7, #8
    84a0:	46bd      	mov	sp, r7
    84a2:	bd80      	pop	{r7, pc}
    84a4:	0000830d 	.word	0x0000830d

000084a8 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    84a8:	b480      	push	{r7}
    84aa:	b085      	sub	sp, #20
    84ac:	af00      	add	r7, sp, #0
    84ae:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    84b0:	687b      	ldr	r3, [r7, #4]
    84b2:	681b      	ldr	r3, [r3, #0]
    84b4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    84b6:	68fb      	ldr	r3, [r7, #12]
    84b8:	089b      	lsrs	r3, r3, #2
    84ba:	f003 0303 	and.w	r3, r3, #3
    84be:	60fb      	str	r3, [r7, #12]
	return tmp;
    84c0:	68fb      	ldr	r3, [r7, #12]
}
    84c2:	4618      	mov	r0, r3
    84c4:	3714      	adds	r7, #20
    84c6:	46bd      	mov	sp, r7
    84c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    84cc:	4770      	bx	lr
	...

000084d0 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    84d0:	b580      	push	{r7, lr}
    84d2:	b084      	sub	sp, #16
    84d4:	af00      	add	r7, sp, #0
    84d6:	6078      	str	r0, [r7, #4]
    84d8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    84da:	2103      	movs	r1, #3
    84dc:	6878      	ldr	r0, [r7, #4]
    84de:	4b07      	ldr	r3, [pc, #28]	; (84fc <hri_tc_get_CTRLA_reg+0x2c>)
    84e0:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    84e2:	687b      	ldr	r3, [r7, #4]
    84e4:	681b      	ldr	r3, [r3, #0]
    84e6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    84e8:	68fa      	ldr	r2, [r7, #12]
    84ea:	683b      	ldr	r3, [r7, #0]
    84ec:	4013      	ands	r3, r2
    84ee:	60fb      	str	r3, [r7, #12]
	return tmp;
    84f0:	68fb      	ldr	r3, [r7, #12]
}
    84f2:	4618      	mov	r0, r3
    84f4:	3710      	adds	r7, #16
    84f6:	46bd      	mov	sp, r7
    84f8:	bd80      	pop	{r7, pc}
    84fa:	bf00      	nop
    84fc:	0000830d 	.word	0x0000830d

00008500 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    8500:	b580      	push	{r7, lr}
    8502:	b082      	sub	sp, #8
    8504:	af00      	add	r7, sp, #0
    8506:	6078      	str	r0, [r7, #4]
    8508:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    850a:	687b      	ldr	r3, [r7, #4]
    850c:	683a      	ldr	r2, [r7, #0]
    850e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8510:	2103      	movs	r1, #3
    8512:	6878      	ldr	r0, [r7, #4]
    8514:	4b02      	ldr	r3, [pc, #8]	; (8520 <hri_tc_write_CTRLA_reg+0x20>)
    8516:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8518:	bf00      	nop
    851a:	3708      	adds	r7, #8
    851c:	46bd      	mov	sp, r7
    851e:	bd80      	pop	{r7, pc}
    8520:	0000830d 	.word	0x0000830d

00008524 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    8524:	b480      	push	{r7}
    8526:	b083      	sub	sp, #12
    8528:	af00      	add	r7, sp, #0
    852a:	6078      	str	r0, [r7, #4]
    852c:	460b      	mov	r3, r1
    852e:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    8530:	687b      	ldr	r3, [r7, #4]
    8532:	887a      	ldrh	r2, [r7, #2]
    8534:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    8536:	bf00      	nop
    8538:	370c      	adds	r7, #12
    853a:	46bd      	mov	sp, r7
    853c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8540:	4770      	bx	lr

00008542 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    8542:	b480      	push	{r7}
    8544:	b083      	sub	sp, #12
    8546:	af00      	add	r7, sp, #0
    8548:	6078      	str	r0, [r7, #4]
    854a:	460b      	mov	r3, r1
    854c:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    854e:	687b      	ldr	r3, [r7, #4]
    8550:	78fa      	ldrb	r2, [r7, #3]
    8552:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    8554:	bf00      	nop
    8556:	370c      	adds	r7, #12
    8558:	46bd      	mov	sp, r7
    855a:	f85d 7b04 	ldr.w	r7, [sp], #4
    855e:	4770      	bx	lr

00008560 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    8560:	b480      	push	{r7}
    8562:	b083      	sub	sp, #12
    8564:	af00      	add	r7, sp, #0
    8566:	6078      	str	r0, [r7, #4]
    8568:	460b      	mov	r3, r1
    856a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    856c:	687b      	ldr	r3, [r7, #4]
    856e:	78fa      	ldrb	r2, [r7, #3]
    8570:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    8572:	bf00      	nop
    8574:	370c      	adds	r7, #12
    8576:	46bd      	mov	sp, r7
    8578:	f85d 7b04 	ldr.w	r7, [sp], #4
    857c:	4770      	bx	lr
	...

00008580 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    8580:	b580      	push	{r7, lr}
    8582:	b082      	sub	sp, #8
    8584:	af00      	add	r7, sp, #0
    8586:	6078      	str	r0, [r7, #4]
    8588:	460b      	mov	r3, r1
    858a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    858c:	687b      	ldr	r3, [r7, #4]
    858e:	78fa      	ldrb	r2, [r7, #3]
    8590:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    8592:	2120      	movs	r1, #32
    8594:	6878      	ldr	r0, [r7, #4]
    8596:	4b03      	ldr	r3, [pc, #12]	; (85a4 <hri_tccount8_write_PER_reg+0x24>)
    8598:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    859a:	bf00      	nop
    859c:	3708      	adds	r7, #8
    859e:	46bd      	mov	sp, r7
    85a0:	bd80      	pop	{r7, pc}
    85a2:	bf00      	nop
    85a4:	0000830d 	.word	0x0000830d

000085a8 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    85a8:	b580      	push	{r7, lr}
    85aa:	b082      	sub	sp, #8
    85ac:	af00      	add	r7, sp, #0
    85ae:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    85b0:	2120      	movs	r1, #32
    85b2:	6878      	ldr	r0, [r7, #4]
    85b4:	4b04      	ldr	r3, [pc, #16]	; (85c8 <hri_tccount8_read_PER_reg+0x20>)
    85b6:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    85b8:	687b      	ldr	r3, [r7, #4]
    85ba:	7edb      	ldrb	r3, [r3, #27]
    85bc:	b2db      	uxtb	r3, r3
}
    85be:	4618      	mov	r0, r3
    85c0:	3708      	adds	r7, #8
    85c2:	46bd      	mov	sp, r7
    85c4:	bd80      	pop	{r7, pc}
    85c6:	bf00      	nop
    85c8:	0000830d 	.word	0x0000830d

000085cc <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    85cc:	b580      	push	{r7, lr}
    85ce:	b082      	sub	sp, #8
    85d0:	af00      	add	r7, sp, #0
    85d2:	6078      	str	r0, [r7, #4]
    85d4:	460b      	mov	r3, r1
    85d6:	70fb      	strb	r3, [r7, #3]
    85d8:	4613      	mov	r3, r2
    85da:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    85dc:	78fb      	ldrb	r3, [r7, #3]
    85de:	687a      	ldr	r2, [r7, #4]
    85e0:	4413      	add	r3, r2
    85e2:	78ba      	ldrb	r2, [r7, #2]
    85e4:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    85e6:	21c0      	movs	r1, #192	; 0xc0
    85e8:	6878      	ldr	r0, [r7, #4]
    85ea:	4b03      	ldr	r3, [pc, #12]	; (85f8 <hri_tccount8_write_CC_reg+0x2c>)
    85ec:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    85ee:	bf00      	nop
    85f0:	3708      	adds	r7, #8
    85f2:	46bd      	mov	sp, r7
    85f4:	bd80      	pop	{r7, pc}
    85f6:	bf00      	nop
    85f8:	0000830d 	.word	0x0000830d

000085fc <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    85fc:	b580      	push	{r7, lr}
    85fe:	b082      	sub	sp, #8
    8600:	af00      	add	r7, sp, #0
    8602:	6078      	str	r0, [r7, #4]
    8604:	460b      	mov	r3, r1
    8606:	70fb      	strb	r3, [r7, #3]
    8608:	4613      	mov	r3, r2
    860a:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    860c:	78fb      	ldrb	r3, [r7, #3]
    860e:	687a      	ldr	r2, [r7, #4]
    8610:	330c      	adds	r3, #12
    8612:	005b      	lsls	r3, r3, #1
    8614:	4413      	add	r3, r2
    8616:	883a      	ldrh	r2, [r7, #0]
    8618:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    861a:	21c0      	movs	r1, #192	; 0xc0
    861c:	6878      	ldr	r0, [r7, #4]
    861e:	4b03      	ldr	r3, [pc, #12]	; (862c <hri_tccount16_write_CC_reg+0x30>)
    8620:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8622:	bf00      	nop
    8624:	3708      	adds	r7, #8
    8626:	46bd      	mov	sp, r7
    8628:	bd80      	pop	{r7, pc}
    862a:	bf00      	nop
    862c:	0000830d 	.word	0x0000830d

00008630 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    8630:	b580      	push	{r7, lr}
    8632:	b082      	sub	sp, #8
    8634:	af00      	add	r7, sp, #0
    8636:	6078      	str	r0, [r7, #4]
    8638:	460b      	mov	r3, r1
    863a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    863c:	21c0      	movs	r1, #192	; 0xc0
    863e:	6878      	ldr	r0, [r7, #4]
    8640:	4b06      	ldr	r3, [pc, #24]	; (865c <hri_tccount16_read_CC_reg+0x2c>)
    8642:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    8644:	78fb      	ldrb	r3, [r7, #3]
    8646:	687a      	ldr	r2, [r7, #4]
    8648:	330c      	adds	r3, #12
    864a:	005b      	lsls	r3, r3, #1
    864c:	4413      	add	r3, r2
    864e:	889b      	ldrh	r3, [r3, #4]
    8650:	b29b      	uxth	r3, r3
}
    8652:	4618      	mov	r0, r3
    8654:	3708      	adds	r7, #8
    8656:	46bd      	mov	sp, r7
    8658:	bd80      	pop	{r7, pc}
    865a:	bf00      	nop
    865c:	0000830d 	.word	0x0000830d

00008660 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    8660:	b580      	push	{r7, lr}
    8662:	b084      	sub	sp, #16
    8664:	af00      	add	r7, sp, #0
    8666:	60f8      	str	r0, [r7, #12]
    8668:	460b      	mov	r3, r1
    866a:	607a      	str	r2, [r7, #4]
    866c:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    866e:	7afb      	ldrb	r3, [r7, #11]
    8670:	68fa      	ldr	r2, [r7, #12]
    8672:	3306      	adds	r3, #6
    8674:	009b      	lsls	r3, r3, #2
    8676:	4413      	add	r3, r2
    8678:	687a      	ldr	r2, [r7, #4]
    867a:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    867c:	21c0      	movs	r1, #192	; 0xc0
    867e:	68f8      	ldr	r0, [r7, #12]
    8680:	4b02      	ldr	r3, [pc, #8]	; (868c <hri_tccount32_write_CC_reg+0x2c>)
    8682:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8684:	bf00      	nop
    8686:	3710      	adds	r7, #16
    8688:	46bd      	mov	sp, r7
    868a:	bd80      	pop	{r7, pc}
    868c:	0000830d 	.word	0x0000830d

00008690 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    8690:	b580      	push	{r7, lr}
    8692:	b082      	sub	sp, #8
    8694:	af00      	add	r7, sp, #0
    8696:	6078      	str	r0, [r7, #4]
    8698:	460b      	mov	r3, r1
    869a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    869c:	21c0      	movs	r1, #192	; 0xc0
    869e:	6878      	ldr	r0, [r7, #4]
    86a0:	4b05      	ldr	r3, [pc, #20]	; (86b8 <hri_tccount32_read_CC_reg+0x28>)
    86a2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    86a4:	78fb      	ldrb	r3, [r7, #3]
    86a6:	687a      	ldr	r2, [r7, #4]
    86a8:	3306      	adds	r3, #6
    86aa:	009b      	lsls	r3, r3, #2
    86ac:	4413      	add	r3, r2
    86ae:	685b      	ldr	r3, [r3, #4]
}
    86b0:	4618      	mov	r0, r3
    86b2:	3708      	adds	r7, #8
    86b4:	46bd      	mov	sp, r7
    86b6:	bd80      	pop	{r7, pc}
    86b8:	0000830d 	.word	0x0000830d

000086bc <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    86bc:	b580      	push	{r7, lr}
    86be:	b084      	sub	sp, #16
    86c0:	af00      	add	r7, sp, #0
    86c2:	6078      	str	r0, [r7, #4]
    86c4:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    86c6:	6838      	ldr	r0, [r7, #0]
    86c8:	4b93      	ldr	r3, [pc, #588]	; (8918 <_tc_timer_init+0x25c>)
    86ca:	4798      	blx	r3
    86cc:	4603      	mov	r3, r0
    86ce:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    86d0:	687b      	ldr	r3, [r7, #4]
    86d2:	683a      	ldr	r2, [r7, #0]
    86d4:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    86d6:	22a4      	movs	r2, #164	; 0xa4
    86d8:	4990      	ldr	r1, [pc, #576]	; (891c <_tc_timer_init+0x260>)
    86da:	2001      	movs	r0, #1
    86dc:	4b90      	ldr	r3, [pc, #576]	; (8920 <_tc_timer_init+0x264>)
    86de:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    86e0:	2101      	movs	r1, #1
    86e2:	6838      	ldr	r0, [r7, #0]
    86e4:	4b8f      	ldr	r3, [pc, #572]	; (8924 <_tc_timer_init+0x268>)
    86e6:	4798      	blx	r3
    86e8:	4603      	mov	r3, r0
    86ea:	f083 0301 	eor.w	r3, r3, #1
    86ee:	b2db      	uxtb	r3, r3
    86f0:	2b00      	cmp	r3, #0
    86f2:	d011      	beq.n	8718 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    86f4:	2102      	movs	r1, #2
    86f6:	6838      	ldr	r0, [r7, #0]
    86f8:	4b8b      	ldr	r3, [pc, #556]	; (8928 <_tc_timer_init+0x26c>)
    86fa:	4798      	blx	r3
    86fc:	4603      	mov	r3, r0
    86fe:	2b00      	cmp	r3, #0
    8700:	d006      	beq.n	8710 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8702:	6838      	ldr	r0, [r7, #0]
    8704:	4b89      	ldr	r3, [pc, #548]	; (892c <_tc_timer_init+0x270>)
    8706:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    8708:	2102      	movs	r1, #2
    870a:	6838      	ldr	r0, [r7, #0]
    870c:	4b88      	ldr	r3, [pc, #544]	; (8930 <_tc_timer_init+0x274>)
    870e:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    8710:	2101      	movs	r1, #1
    8712:	6838      	ldr	r0, [r7, #0]
    8714:	4b87      	ldr	r3, [pc, #540]	; (8934 <_tc_timer_init+0x278>)
    8716:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8718:	2101      	movs	r1, #1
    871a:	6838      	ldr	r0, [r7, #0]
    871c:	4b84      	ldr	r3, [pc, #528]	; (8930 <_tc_timer_init+0x274>)
    871e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8720:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8724:	4984      	ldr	r1, [pc, #528]	; (8938 <_tc_timer_init+0x27c>)
    8726:	4613      	mov	r3, r2
    8728:	009b      	lsls	r3, r3, #2
    872a:	4413      	add	r3, r2
    872c:	009b      	lsls	r3, r3, #2
    872e:	440b      	add	r3, r1
    8730:	3304      	adds	r3, #4
    8732:	681b      	ldr	r3, [r3, #0]
    8734:	4619      	mov	r1, r3
    8736:	6838      	ldr	r0, [r7, #0]
    8738:	4b7e      	ldr	r3, [pc, #504]	; (8934 <_tc_timer_init+0x278>)
    873a:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    873c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8740:	497d      	ldr	r1, [pc, #500]	; (8938 <_tc_timer_init+0x27c>)
    8742:	4613      	mov	r3, r2
    8744:	009b      	lsls	r3, r3, #2
    8746:	4413      	add	r3, r2
    8748:	009b      	lsls	r3, r3, #2
    874a:	440b      	add	r3, r1
    874c:	330a      	adds	r3, #10
    874e:	781b      	ldrb	r3, [r3, #0]
    8750:	4619      	mov	r1, r3
    8752:	6838      	ldr	r0, [r7, #0]
    8754:	4b79      	ldr	r3, [pc, #484]	; (893c <_tc_timer_init+0x280>)
    8756:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8758:	f997 200f 	ldrsb.w	r2, [r7, #15]
    875c:	4976      	ldr	r1, [pc, #472]	; (8938 <_tc_timer_init+0x27c>)
    875e:	4613      	mov	r3, r2
    8760:	009b      	lsls	r3, r3, #2
    8762:	4413      	add	r3, r2
    8764:	009b      	lsls	r3, r3, #2
    8766:	440b      	add	r3, r1
    8768:	3308      	adds	r3, #8
    876a:	881b      	ldrh	r3, [r3, #0]
    876c:	4619      	mov	r1, r3
    876e:	6838      	ldr	r0, [r7, #0]
    8770:	4b73      	ldr	r3, [pc, #460]	; (8940 <_tc_timer_init+0x284>)
    8772:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    8774:	2101      	movs	r1, #1
    8776:	6838      	ldr	r0, [r7, #0]
    8778:	4b72      	ldr	r3, [pc, #456]	; (8944 <_tc_timer_init+0x288>)
    877a:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    877c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8780:	496d      	ldr	r1, [pc, #436]	; (8938 <_tc_timer_init+0x27c>)
    8782:	4613      	mov	r3, r2
    8784:	009b      	lsls	r3, r3, #2
    8786:	4413      	add	r3, r2
    8788:	009b      	lsls	r3, r3, #2
    878a:	440b      	add	r3, r1
    878c:	3304      	adds	r3, #4
    878e:	681b      	ldr	r3, [r3, #0]
    8790:	f003 030c 	and.w	r3, r3, #12
    8794:	2b08      	cmp	r3, #8
    8796:	d11e      	bne.n	87d6 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8798:	f997 200f 	ldrsb.w	r2, [r7, #15]
    879c:	4966      	ldr	r1, [pc, #408]	; (8938 <_tc_timer_init+0x27c>)
    879e:	4613      	mov	r3, r2
    87a0:	009b      	lsls	r3, r3, #2
    87a2:	4413      	add	r3, r2
    87a4:	009b      	lsls	r3, r3, #2
    87a6:	440b      	add	r3, r1
    87a8:	330c      	adds	r3, #12
    87aa:	681b      	ldr	r3, [r3, #0]
    87ac:	461a      	mov	r2, r3
    87ae:	2100      	movs	r1, #0
    87b0:	6838      	ldr	r0, [r7, #0]
    87b2:	4b65      	ldr	r3, [pc, #404]	; (8948 <_tc_timer_init+0x28c>)
    87b4:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    87b6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    87ba:	495f      	ldr	r1, [pc, #380]	; (8938 <_tc_timer_init+0x27c>)
    87bc:	4613      	mov	r3, r2
    87be:	009b      	lsls	r3, r3, #2
    87c0:	4413      	add	r3, r2
    87c2:	009b      	lsls	r3, r3, #2
    87c4:	440b      	add	r3, r1
    87c6:	3310      	adds	r3, #16
    87c8:	681b      	ldr	r3, [r3, #0]
    87ca:	461a      	mov	r2, r3
    87cc:	2101      	movs	r1, #1
    87ce:	6838      	ldr	r0, [r7, #0]
    87d0:	4b5d      	ldr	r3, [pc, #372]	; (8948 <_tc_timer_init+0x28c>)
    87d2:	4798      	blx	r3
    87d4:	e06a      	b.n	88ac <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    87d6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    87da:	4957      	ldr	r1, [pc, #348]	; (8938 <_tc_timer_init+0x27c>)
    87dc:	4613      	mov	r3, r2
    87de:	009b      	lsls	r3, r3, #2
    87e0:	4413      	add	r3, r2
    87e2:	009b      	lsls	r3, r3, #2
    87e4:	440b      	add	r3, r1
    87e6:	3304      	adds	r3, #4
    87e8:	681b      	ldr	r3, [r3, #0]
    87ea:	f003 030c 	and.w	r3, r3, #12
    87ee:	2b00      	cmp	r3, #0
    87f0:	d120      	bne.n	8834 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    87f2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    87f6:	4950      	ldr	r1, [pc, #320]	; (8938 <_tc_timer_init+0x27c>)
    87f8:	4613      	mov	r3, r2
    87fa:	009b      	lsls	r3, r3, #2
    87fc:	4413      	add	r3, r2
    87fe:	009b      	lsls	r3, r3, #2
    8800:	440b      	add	r3, r1
    8802:	330c      	adds	r3, #12
    8804:	681b      	ldr	r3, [r3, #0]
    8806:	b29b      	uxth	r3, r3
    8808:	461a      	mov	r2, r3
    880a:	2100      	movs	r1, #0
    880c:	6838      	ldr	r0, [r7, #0]
    880e:	4b4f      	ldr	r3, [pc, #316]	; (894c <_tc_timer_init+0x290>)
    8810:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8812:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8816:	4948      	ldr	r1, [pc, #288]	; (8938 <_tc_timer_init+0x27c>)
    8818:	4613      	mov	r3, r2
    881a:	009b      	lsls	r3, r3, #2
    881c:	4413      	add	r3, r2
    881e:	009b      	lsls	r3, r3, #2
    8820:	440b      	add	r3, r1
    8822:	3310      	adds	r3, #16
    8824:	681b      	ldr	r3, [r3, #0]
    8826:	b29b      	uxth	r3, r3
    8828:	461a      	mov	r2, r3
    882a:	2101      	movs	r1, #1
    882c:	6838      	ldr	r0, [r7, #0]
    882e:	4b47      	ldr	r3, [pc, #284]	; (894c <_tc_timer_init+0x290>)
    8830:	4798      	blx	r3
    8832:	e03b      	b.n	88ac <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    8834:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8838:	493f      	ldr	r1, [pc, #252]	; (8938 <_tc_timer_init+0x27c>)
    883a:	4613      	mov	r3, r2
    883c:	009b      	lsls	r3, r3, #2
    883e:	4413      	add	r3, r2
    8840:	009b      	lsls	r3, r3, #2
    8842:	440b      	add	r3, r1
    8844:	3304      	adds	r3, #4
    8846:	681b      	ldr	r3, [r3, #0]
    8848:	f003 030c 	and.w	r3, r3, #12
    884c:	2b04      	cmp	r3, #4
    884e:	d12d      	bne.n	88ac <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    8850:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8854:	4938      	ldr	r1, [pc, #224]	; (8938 <_tc_timer_init+0x27c>)
    8856:	4613      	mov	r3, r2
    8858:	009b      	lsls	r3, r3, #2
    885a:	4413      	add	r3, r2
    885c:	009b      	lsls	r3, r3, #2
    885e:	440b      	add	r3, r1
    8860:	330c      	adds	r3, #12
    8862:	681b      	ldr	r3, [r3, #0]
    8864:	b2db      	uxtb	r3, r3
    8866:	461a      	mov	r2, r3
    8868:	2100      	movs	r1, #0
    886a:	6838      	ldr	r0, [r7, #0]
    886c:	4b38      	ldr	r3, [pc, #224]	; (8950 <_tc_timer_init+0x294>)
    886e:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    8870:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8874:	4930      	ldr	r1, [pc, #192]	; (8938 <_tc_timer_init+0x27c>)
    8876:	4613      	mov	r3, r2
    8878:	009b      	lsls	r3, r3, #2
    887a:	4413      	add	r3, r2
    887c:	009b      	lsls	r3, r3, #2
    887e:	440b      	add	r3, r1
    8880:	3310      	adds	r3, #16
    8882:	681b      	ldr	r3, [r3, #0]
    8884:	b2db      	uxtb	r3, r3
    8886:	461a      	mov	r2, r3
    8888:	2101      	movs	r1, #1
    888a:	6838      	ldr	r0, [r7, #0]
    888c:	4b30      	ldr	r3, [pc, #192]	; (8950 <_tc_timer_init+0x294>)
    888e:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    8890:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8894:	4928      	ldr	r1, [pc, #160]	; (8938 <_tc_timer_init+0x27c>)
    8896:	4613      	mov	r3, r2
    8898:	009b      	lsls	r3, r3, #2
    889a:	4413      	add	r3, r2
    889c:	009b      	lsls	r3, r3, #2
    889e:	440b      	add	r3, r1
    88a0:	330b      	adds	r3, #11
    88a2:	781b      	ldrb	r3, [r3, #0]
    88a4:	4619      	mov	r1, r3
    88a6:	6838      	ldr	r0, [r7, #0]
    88a8:	4b2a      	ldr	r3, [pc, #168]	; (8954 <_tc_timer_init+0x298>)
    88aa:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    88ac:	6838      	ldr	r0, [r7, #0]
    88ae:	4b2a      	ldr	r3, [pc, #168]	; (8958 <_tc_timer_init+0x29c>)
    88b0:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    88b2:	6879      	ldr	r1, [r7, #4]
    88b4:	6838      	ldr	r0, [r7, #0]
    88b6:	4b29      	ldr	r3, [pc, #164]	; (895c <_tc_timer_init+0x2a0>)
    88b8:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    88ba:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88be:	491e      	ldr	r1, [pc, #120]	; (8938 <_tc_timer_init+0x27c>)
    88c0:	4613      	mov	r3, r2
    88c2:	009b      	lsls	r3, r3, #2
    88c4:	4413      	add	r3, r2
    88c6:	009b      	lsls	r3, r3, #2
    88c8:	440b      	add	r3, r1
    88ca:	3302      	adds	r3, #2
    88cc:	f9b3 3000 	ldrsh.w	r3, [r3]
    88d0:	4618      	mov	r0, r3
    88d2:	4b23      	ldr	r3, [pc, #140]	; (8960 <_tc_timer_init+0x2a4>)
    88d4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    88d6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88da:	4917      	ldr	r1, [pc, #92]	; (8938 <_tc_timer_init+0x27c>)
    88dc:	4613      	mov	r3, r2
    88de:	009b      	lsls	r3, r3, #2
    88e0:	4413      	add	r3, r2
    88e2:	009b      	lsls	r3, r3, #2
    88e4:	440b      	add	r3, r1
    88e6:	3302      	adds	r3, #2
    88e8:	f9b3 3000 	ldrsh.w	r3, [r3]
    88ec:	4618      	mov	r0, r3
    88ee:	4b1d      	ldr	r3, [pc, #116]	; (8964 <_tc_timer_init+0x2a8>)
    88f0:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    88f2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88f6:	4910      	ldr	r1, [pc, #64]	; (8938 <_tc_timer_init+0x27c>)
    88f8:	4613      	mov	r3, r2
    88fa:	009b      	lsls	r3, r3, #2
    88fc:	4413      	add	r3, r2
    88fe:	009b      	lsls	r3, r3, #2
    8900:	440b      	add	r3, r1
    8902:	3302      	adds	r3, #2
    8904:	f9b3 3000 	ldrsh.w	r3, [r3]
    8908:	4618      	mov	r0, r3
    890a:	4b17      	ldr	r3, [pc, #92]	; (8968 <_tc_timer_init+0x2ac>)
    890c:	4798      	blx	r3

	return ERR_NONE;
    890e:	2300      	movs	r3, #0
}
    8910:	4618      	mov	r0, r3
    8912:	3710      	adds	r7, #16
    8914:	46bd      	mov	sp, r7
    8916:	bd80      	pop	{r7, pc}
    8918:	00008f4d 	.word	0x00008f4d
    891c:	00010270 	.word	0x00010270
    8920:	00003d61 	.word	0x00003d61
    8924:	00008331 	.word	0x00008331
    8928:	000084d1 	.word	0x000084d1
    892c:	00008481 	.word	0x00008481
    8930:	0000830d 	.word	0x0000830d
    8934:	00008501 	.word	0x00008501
    8938:	200000e0 	.word	0x200000e0
    893c:	00008561 	.word	0x00008561
    8940:	00008525 	.word	0x00008525
    8944:	00008543 	.word	0x00008543
    8948:	00008661 	.word	0x00008661
    894c:	000085fd 	.word	0x000085fd
    8950:	000085cd 	.word	0x000085cd
    8954:	00008581 	.word	0x00008581
    8958:	000083b5 	.word	0x000083b5
    895c:	00008fb5 	.word	0x00008fb5
    8960:	0000828d 	.word	0x0000828d
    8964:	000082d1 	.word	0x000082d1
    8968:	00008251 	.word	0x00008251

0000896c <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    896c:	b580      	push	{r7, lr}
    896e:	b084      	sub	sp, #16
    8970:	af00      	add	r7, sp, #0
    8972:	6078      	str	r0, [r7, #4]
    8974:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    8976:	6838      	ldr	r0, [r7, #0]
    8978:	4b73      	ldr	r3, [pc, #460]	; (8b48 <_pwm_init+0x1dc>)
    897a:	4798      	blx	r3
    897c:	4603      	mov	r3, r0
    897e:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    8980:	687b      	ldr	r3, [r7, #4]
    8982:	683a      	ldr	r2, [r7, #0]
    8984:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8986:	2101      	movs	r1, #1
    8988:	6838      	ldr	r0, [r7, #0]
    898a:	4b70      	ldr	r3, [pc, #448]	; (8b4c <_pwm_init+0x1e0>)
    898c:	4798      	blx	r3
    898e:	4603      	mov	r3, r0
    8990:	f083 0301 	eor.w	r3, r3, #1
    8994:	b2db      	uxtb	r3, r3
    8996:	2b00      	cmp	r3, #0
    8998:	d011      	beq.n	89be <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    899a:	2102      	movs	r1, #2
    899c:	6838      	ldr	r0, [r7, #0]
    899e:	4b6c      	ldr	r3, [pc, #432]	; (8b50 <_pwm_init+0x1e4>)
    89a0:	4798      	blx	r3
    89a2:	4603      	mov	r3, r0
    89a4:	2b00      	cmp	r3, #0
    89a6:	d006      	beq.n	89b6 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    89a8:	6838      	ldr	r0, [r7, #0]
    89aa:	4b6a      	ldr	r3, [pc, #424]	; (8b54 <_pwm_init+0x1e8>)
    89ac:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    89ae:	2102      	movs	r1, #2
    89b0:	6838      	ldr	r0, [r7, #0]
    89b2:	4b69      	ldr	r3, [pc, #420]	; (8b58 <_pwm_init+0x1ec>)
    89b4:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    89b6:	2101      	movs	r1, #1
    89b8:	6838      	ldr	r0, [r7, #0]
    89ba:	4b68      	ldr	r3, [pc, #416]	; (8b5c <_pwm_init+0x1f0>)
    89bc:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    89be:	2101      	movs	r1, #1
    89c0:	6838      	ldr	r0, [r7, #0]
    89c2:	4b65      	ldr	r3, [pc, #404]	; (8b58 <_pwm_init+0x1ec>)
    89c4:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    89c6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    89ca:	4965      	ldr	r1, [pc, #404]	; (8b60 <_pwm_init+0x1f4>)
    89cc:	4613      	mov	r3, r2
    89ce:	009b      	lsls	r3, r3, #2
    89d0:	4413      	add	r3, r2
    89d2:	009b      	lsls	r3, r3, #2
    89d4:	440b      	add	r3, r1
    89d6:	3304      	adds	r3, #4
    89d8:	681b      	ldr	r3, [r3, #0]
    89da:	4619      	mov	r1, r3
    89dc:	6838      	ldr	r0, [r7, #0]
    89de:	4b5f      	ldr	r3, [pc, #380]	; (8b5c <_pwm_init+0x1f0>)
    89e0:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    89e2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    89e6:	495e      	ldr	r1, [pc, #376]	; (8b60 <_pwm_init+0x1f4>)
    89e8:	4613      	mov	r3, r2
    89ea:	009b      	lsls	r3, r3, #2
    89ec:	4413      	add	r3, r2
    89ee:	009b      	lsls	r3, r3, #2
    89f0:	440b      	add	r3, r1
    89f2:	330a      	adds	r3, #10
    89f4:	781b      	ldrb	r3, [r3, #0]
    89f6:	4619      	mov	r1, r3
    89f8:	6838      	ldr	r0, [r7, #0]
    89fa:	4b5a      	ldr	r3, [pc, #360]	; (8b64 <_pwm_init+0x1f8>)
    89fc:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    89fe:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a02:	4957      	ldr	r1, [pc, #348]	; (8b60 <_pwm_init+0x1f4>)
    8a04:	4613      	mov	r3, r2
    8a06:	009b      	lsls	r3, r3, #2
    8a08:	4413      	add	r3, r2
    8a0a:	009b      	lsls	r3, r3, #2
    8a0c:	440b      	add	r3, r1
    8a0e:	3308      	adds	r3, #8
    8a10:	881b      	ldrh	r3, [r3, #0]
    8a12:	4619      	mov	r1, r3
    8a14:	6838      	ldr	r0, [r7, #0]
    8a16:	4b54      	ldr	r3, [pc, #336]	; (8b68 <_pwm_init+0x1fc>)
    8a18:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    8a1a:	2103      	movs	r1, #3
    8a1c:	6838      	ldr	r0, [r7, #0]
    8a1e:	4b53      	ldr	r3, [pc, #332]	; (8b6c <_pwm_init+0x200>)
    8a20:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8a22:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a26:	494e      	ldr	r1, [pc, #312]	; (8b60 <_pwm_init+0x1f4>)
    8a28:	4613      	mov	r3, r2
    8a2a:	009b      	lsls	r3, r3, #2
    8a2c:	4413      	add	r3, r2
    8a2e:	009b      	lsls	r3, r3, #2
    8a30:	440b      	add	r3, r1
    8a32:	3304      	adds	r3, #4
    8a34:	681b      	ldr	r3, [r3, #0]
    8a36:	f003 030c 	and.w	r3, r3, #12
    8a3a:	2b08      	cmp	r3, #8
    8a3c:	d11e      	bne.n	8a7c <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8a3e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a42:	4947      	ldr	r1, [pc, #284]	; (8b60 <_pwm_init+0x1f4>)
    8a44:	4613      	mov	r3, r2
    8a46:	009b      	lsls	r3, r3, #2
    8a48:	4413      	add	r3, r2
    8a4a:	009b      	lsls	r3, r3, #2
    8a4c:	440b      	add	r3, r1
    8a4e:	330c      	adds	r3, #12
    8a50:	681b      	ldr	r3, [r3, #0]
    8a52:	461a      	mov	r2, r3
    8a54:	2100      	movs	r1, #0
    8a56:	6838      	ldr	r0, [r7, #0]
    8a58:	4b45      	ldr	r3, [pc, #276]	; (8b70 <_pwm_init+0x204>)
    8a5a:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    8a5c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a60:	493f      	ldr	r1, [pc, #252]	; (8b60 <_pwm_init+0x1f4>)
    8a62:	4613      	mov	r3, r2
    8a64:	009b      	lsls	r3, r3, #2
    8a66:	4413      	add	r3, r2
    8a68:	009b      	lsls	r3, r3, #2
    8a6a:	440b      	add	r3, r1
    8a6c:	3310      	adds	r3, #16
    8a6e:	681b      	ldr	r3, [r3, #0]
    8a70:	461a      	mov	r2, r3
    8a72:	2101      	movs	r1, #1
    8a74:	6838      	ldr	r0, [r7, #0]
    8a76:	4b3e      	ldr	r3, [pc, #248]	; (8b70 <_pwm_init+0x204>)
    8a78:	4798      	blx	r3
    8a7a:	e031      	b.n	8ae0 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    8a7c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a80:	4937      	ldr	r1, [pc, #220]	; (8b60 <_pwm_init+0x1f4>)
    8a82:	4613      	mov	r3, r2
    8a84:	009b      	lsls	r3, r3, #2
    8a86:	4413      	add	r3, r2
    8a88:	009b      	lsls	r3, r3, #2
    8a8a:	440b      	add	r3, r1
    8a8c:	3304      	adds	r3, #4
    8a8e:	681b      	ldr	r3, [r3, #0]
    8a90:	f003 030c 	and.w	r3, r3, #12
    8a94:	2b00      	cmp	r3, #0
    8a96:	d120      	bne.n	8ada <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8a98:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a9c:	4930      	ldr	r1, [pc, #192]	; (8b60 <_pwm_init+0x1f4>)
    8a9e:	4613      	mov	r3, r2
    8aa0:	009b      	lsls	r3, r3, #2
    8aa2:	4413      	add	r3, r2
    8aa4:	009b      	lsls	r3, r3, #2
    8aa6:	440b      	add	r3, r1
    8aa8:	330c      	adds	r3, #12
    8aaa:	681b      	ldr	r3, [r3, #0]
    8aac:	b29b      	uxth	r3, r3
    8aae:	461a      	mov	r2, r3
    8ab0:	2100      	movs	r1, #0
    8ab2:	6838      	ldr	r0, [r7, #0]
    8ab4:	4b2f      	ldr	r3, [pc, #188]	; (8b74 <_pwm_init+0x208>)
    8ab6:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8ab8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8abc:	4928      	ldr	r1, [pc, #160]	; (8b60 <_pwm_init+0x1f4>)
    8abe:	4613      	mov	r3, r2
    8ac0:	009b      	lsls	r3, r3, #2
    8ac2:	4413      	add	r3, r2
    8ac4:	009b      	lsls	r3, r3, #2
    8ac6:	440b      	add	r3, r1
    8ac8:	3310      	adds	r3, #16
    8aca:	681b      	ldr	r3, [r3, #0]
    8acc:	b29b      	uxth	r3, r3
    8ace:	461a      	mov	r2, r3
    8ad0:	2101      	movs	r1, #1
    8ad2:	6838      	ldr	r0, [r7, #0]
    8ad4:	4b27      	ldr	r3, [pc, #156]	; (8b74 <_pwm_init+0x208>)
    8ad6:	4798      	blx	r3
    8ad8:	e002      	b.n	8ae0 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    8ada:	f04f 33ff 	mov.w	r3, #4294967295
    8ade:	e02e      	b.n	8b3e <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    8ae0:	6879      	ldr	r1, [r7, #4]
    8ae2:	6838      	ldr	r0, [r7, #0]
    8ae4:	4b24      	ldr	r3, [pc, #144]	; (8b78 <_pwm_init+0x20c>)
    8ae6:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8ae8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8aec:	491c      	ldr	r1, [pc, #112]	; (8b60 <_pwm_init+0x1f4>)
    8aee:	4613      	mov	r3, r2
    8af0:	009b      	lsls	r3, r3, #2
    8af2:	4413      	add	r3, r2
    8af4:	009b      	lsls	r3, r3, #2
    8af6:	440b      	add	r3, r1
    8af8:	3302      	adds	r3, #2
    8afa:	f9b3 3000 	ldrsh.w	r3, [r3]
    8afe:	4618      	mov	r0, r3
    8b00:	4b1e      	ldr	r3, [pc, #120]	; (8b7c <_pwm_init+0x210>)
    8b02:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8b04:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b08:	4915      	ldr	r1, [pc, #84]	; (8b60 <_pwm_init+0x1f4>)
    8b0a:	4613      	mov	r3, r2
    8b0c:	009b      	lsls	r3, r3, #2
    8b0e:	4413      	add	r3, r2
    8b10:	009b      	lsls	r3, r3, #2
    8b12:	440b      	add	r3, r1
    8b14:	3302      	adds	r3, #2
    8b16:	f9b3 3000 	ldrsh.w	r3, [r3]
    8b1a:	4618      	mov	r0, r3
    8b1c:	4b18      	ldr	r3, [pc, #96]	; (8b80 <_pwm_init+0x214>)
    8b1e:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8b20:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b24:	490e      	ldr	r1, [pc, #56]	; (8b60 <_pwm_init+0x1f4>)
    8b26:	4613      	mov	r3, r2
    8b28:	009b      	lsls	r3, r3, #2
    8b2a:	4413      	add	r3, r2
    8b2c:	009b      	lsls	r3, r3, #2
    8b2e:	440b      	add	r3, r1
    8b30:	3302      	adds	r3, #2
    8b32:	f9b3 3000 	ldrsh.w	r3, [r3]
    8b36:	4618      	mov	r0, r3
    8b38:	4b12      	ldr	r3, [pc, #72]	; (8b84 <_pwm_init+0x218>)
    8b3a:	4798      	blx	r3

	return 0;
    8b3c:	2300      	movs	r3, #0
}
    8b3e:	4618      	mov	r0, r3
    8b40:	3710      	adds	r7, #16
    8b42:	46bd      	mov	sp, r7
    8b44:	bd80      	pop	{r7, pc}
    8b46:	bf00      	nop
    8b48:	00008f4d 	.word	0x00008f4d
    8b4c:	00008331 	.word	0x00008331
    8b50:	000084d1 	.word	0x000084d1
    8b54:	00008481 	.word	0x00008481
    8b58:	0000830d 	.word	0x0000830d
    8b5c:	00008501 	.word	0x00008501
    8b60:	200000e0 	.word	0x200000e0
    8b64:	00008561 	.word	0x00008561
    8b68:	00008525 	.word	0x00008525
    8b6c:	00008543 	.word	0x00008543
    8b70:	00008661 	.word	0x00008661
    8b74:	000085fd 	.word	0x000085fd
    8b78:	00008fb5 	.word	0x00008fb5
    8b7c:	0000828d 	.word	0x0000828d
    8b80:	000082d1 	.word	0x000082d1
    8b84:	00008251 	.word	0x00008251

00008b88 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    8b88:	b580      	push	{r7, lr}
    8b8a:	b084      	sub	sp, #16
    8b8c:	af00      	add	r7, sp, #0
    8b8e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8b90:	687b      	ldr	r3, [r7, #4]
    8b92:	68db      	ldr	r3, [r3, #12]
    8b94:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8b96:	68f8      	ldr	r0, [r7, #12]
    8b98:	4b10      	ldr	r3, [pc, #64]	; (8bdc <_tc_timer_deinit+0x54>)
    8b9a:	4798      	blx	r3
    8b9c:	4603      	mov	r3, r0
    8b9e:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8ba0:	22f9      	movs	r2, #249	; 0xf9
    8ba2:	490f      	ldr	r1, [pc, #60]	; (8be0 <_tc_timer_deinit+0x58>)
    8ba4:	2001      	movs	r0, #1
    8ba6:	4b0f      	ldr	r3, [pc, #60]	; (8be4 <_tc_timer_deinit+0x5c>)
    8ba8:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    8baa:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8bae:	490e      	ldr	r1, [pc, #56]	; (8be8 <_tc_timer_deinit+0x60>)
    8bb0:	4613      	mov	r3, r2
    8bb2:	009b      	lsls	r3, r3, #2
    8bb4:	4413      	add	r3, r2
    8bb6:	009b      	lsls	r3, r3, #2
    8bb8:	440b      	add	r3, r1
    8bba:	3302      	adds	r3, #2
    8bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
    8bc0:	4618      	mov	r0, r3
    8bc2:	4b0a      	ldr	r3, [pc, #40]	; (8bec <_tc_timer_deinit+0x64>)
    8bc4:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8bc6:	68f8      	ldr	r0, [r7, #12]
    8bc8:	4b09      	ldr	r3, [pc, #36]	; (8bf0 <_tc_timer_deinit+0x68>)
    8bca:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    8bcc:	68f8      	ldr	r0, [r7, #12]
    8bce:	4b09      	ldr	r3, [pc, #36]	; (8bf4 <_tc_timer_deinit+0x6c>)
    8bd0:	4798      	blx	r3
}
    8bd2:	bf00      	nop
    8bd4:	3710      	adds	r7, #16
    8bd6:	46bd      	mov	sp, r7
    8bd8:	bd80      	pop	{r7, pc}
    8bda:	bf00      	nop
    8bdc:	00008f4d 	.word	0x00008f4d
    8be0:	00010270 	.word	0x00010270
    8be4:	00003d61 	.word	0x00003d61
    8be8:	200000e0 	.word	0x200000e0
    8bec:	0000828d 	.word	0x0000828d
    8bf0:	00008481 	.word	0x00008481
    8bf4:	000083f9 	.word	0x000083f9

00008bf8 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    8bf8:	b580      	push	{r7, lr}
    8bfa:	b082      	sub	sp, #8
    8bfc:	af00      	add	r7, sp, #0
    8bfe:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8c00:	687b      	ldr	r3, [r7, #4]
    8c02:	68db      	ldr	r3, [r3, #12]
    8c04:	4618      	mov	r0, r3
    8c06:	4b03      	ldr	r3, [pc, #12]	; (8c14 <_tc_timer_start+0x1c>)
    8c08:	4798      	blx	r3
}
    8c0a:	bf00      	nop
    8c0c:	3708      	adds	r7, #8
    8c0e:	46bd      	mov	sp, r7
    8c10:	bd80      	pop	{r7, pc}
    8c12:	bf00      	nop
    8c14:	00008421 	.word	0x00008421

00008c18 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    8c18:	b580      	push	{r7, lr}
    8c1a:	b082      	sub	sp, #8
    8c1c:	af00      	add	r7, sp, #0
    8c1e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8c20:	687b      	ldr	r3, [r7, #4]
    8c22:	691b      	ldr	r3, [r3, #16]
    8c24:	4618      	mov	r0, r3
    8c26:	4b03      	ldr	r3, [pc, #12]	; (8c34 <_pwm_enable+0x1c>)
    8c28:	4798      	blx	r3
}
    8c2a:	bf00      	nop
    8c2c:	3708      	adds	r7, #8
    8c2e:	46bd      	mov	sp, r7
    8c30:	bd80      	pop	{r7, pc}
    8c32:	bf00      	nop
    8c34:	00008421 	.word	0x00008421

00008c38 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    8c38:	b580      	push	{r7, lr}
    8c3a:	b082      	sub	sp, #8
    8c3c:	af00      	add	r7, sp, #0
    8c3e:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8c40:	687b      	ldr	r3, [r7, #4]
    8c42:	68db      	ldr	r3, [r3, #12]
    8c44:	4618      	mov	r0, r3
    8c46:	4b03      	ldr	r3, [pc, #12]	; (8c54 <_tc_timer_stop+0x1c>)
    8c48:	4798      	blx	r3
}
    8c4a:	bf00      	nop
    8c4c:	3708      	adds	r7, #8
    8c4e:	46bd      	mov	sp, r7
    8c50:	bd80      	pop	{r7, pc}
    8c52:	bf00      	nop
    8c54:	00008481 	.word	0x00008481

00008c58 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    8c58:	b580      	push	{r7, lr}
    8c5a:	b084      	sub	sp, #16
    8c5c:	af00      	add	r7, sp, #0
    8c5e:	6078      	str	r0, [r7, #4]
    8c60:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    8c62:	687b      	ldr	r3, [r7, #4]
    8c64:	68db      	ldr	r3, [r3, #12]
    8c66:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8c68:	68f8      	ldr	r0, [r7, #12]
    8c6a:	4b14      	ldr	r3, [pc, #80]	; (8cbc <_tc_timer_set_period+0x64>)
    8c6c:	4798      	blx	r3
    8c6e:	4603      	mov	r3, r0
    8c70:	2b02      	cmp	r3, #2
    8c72:	d105      	bne.n	8c80 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    8c74:	683a      	ldr	r2, [r7, #0]
    8c76:	2100      	movs	r1, #0
    8c78:	68f8      	ldr	r0, [r7, #12]
    8c7a:	4b11      	ldr	r3, [pc, #68]	; (8cc0 <_tc_timer_set_period+0x68>)
    8c7c:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    8c7e:	e019      	b.n	8cb4 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8c80:	68f8      	ldr	r0, [r7, #12]
    8c82:	4b0e      	ldr	r3, [pc, #56]	; (8cbc <_tc_timer_set_period+0x64>)
    8c84:	4798      	blx	r3
    8c86:	4603      	mov	r3, r0
    8c88:	2b00      	cmp	r3, #0
    8c8a:	d107      	bne.n	8c9c <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    8c8c:	683b      	ldr	r3, [r7, #0]
    8c8e:	b29b      	uxth	r3, r3
    8c90:	461a      	mov	r2, r3
    8c92:	2100      	movs	r1, #0
    8c94:	68f8      	ldr	r0, [r7, #12]
    8c96:	4b0b      	ldr	r3, [pc, #44]	; (8cc4 <_tc_timer_set_period+0x6c>)
    8c98:	4798      	blx	r3
}
    8c9a:	e00b      	b.n	8cb4 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8c9c:	68f8      	ldr	r0, [r7, #12]
    8c9e:	4b07      	ldr	r3, [pc, #28]	; (8cbc <_tc_timer_set_period+0x64>)
    8ca0:	4798      	blx	r3
    8ca2:	4603      	mov	r3, r0
    8ca4:	2b01      	cmp	r3, #1
    8ca6:	d105      	bne.n	8cb4 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    8ca8:	683b      	ldr	r3, [r7, #0]
    8caa:	b2db      	uxtb	r3, r3
    8cac:	4619      	mov	r1, r3
    8cae:	68f8      	ldr	r0, [r7, #12]
    8cb0:	4b05      	ldr	r3, [pc, #20]	; (8cc8 <_tc_timer_set_period+0x70>)
    8cb2:	4798      	blx	r3
}
    8cb4:	bf00      	nop
    8cb6:	3710      	adds	r7, #16
    8cb8:	46bd      	mov	sp, r7
    8cba:	bd80      	pop	{r7, pc}
    8cbc:	000084a9 	.word	0x000084a9
    8cc0:	00008661 	.word	0x00008661
    8cc4:	000085fd 	.word	0x000085fd
    8cc8:	00008581 	.word	0x00008581

00008ccc <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    8ccc:	b580      	push	{r7, lr}
    8cce:	b084      	sub	sp, #16
    8cd0:	af00      	add	r7, sp, #0
    8cd2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8cd4:	687b      	ldr	r3, [r7, #4]
    8cd6:	68db      	ldr	r3, [r3, #12]
    8cd8:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8cda:	68f8      	ldr	r0, [r7, #12]
    8cdc:	4b13      	ldr	r3, [pc, #76]	; (8d2c <_tc_timer_get_period+0x60>)
    8cde:	4798      	blx	r3
    8ce0:	4603      	mov	r3, r0
    8ce2:	2b02      	cmp	r3, #2
    8ce4:	d105      	bne.n	8cf2 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    8ce6:	2100      	movs	r1, #0
    8ce8:	68f8      	ldr	r0, [r7, #12]
    8cea:	4b11      	ldr	r3, [pc, #68]	; (8d30 <_tc_timer_get_period+0x64>)
    8cec:	4798      	blx	r3
    8cee:	4603      	mov	r3, r0
    8cf0:	e017      	b.n	8d22 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8cf2:	68f8      	ldr	r0, [r7, #12]
    8cf4:	4b0d      	ldr	r3, [pc, #52]	; (8d2c <_tc_timer_get_period+0x60>)
    8cf6:	4798      	blx	r3
    8cf8:	4603      	mov	r3, r0
    8cfa:	2b00      	cmp	r3, #0
    8cfc:	d105      	bne.n	8d0a <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    8cfe:	2100      	movs	r1, #0
    8d00:	68f8      	ldr	r0, [r7, #12]
    8d02:	4b0c      	ldr	r3, [pc, #48]	; (8d34 <_tc_timer_get_period+0x68>)
    8d04:	4798      	blx	r3
    8d06:	4603      	mov	r3, r0
    8d08:	e00b      	b.n	8d22 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8d0a:	68f8      	ldr	r0, [r7, #12]
    8d0c:	4b07      	ldr	r3, [pc, #28]	; (8d2c <_tc_timer_get_period+0x60>)
    8d0e:	4798      	blx	r3
    8d10:	4603      	mov	r3, r0
    8d12:	2b01      	cmp	r3, #1
    8d14:	d104      	bne.n	8d20 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    8d16:	68f8      	ldr	r0, [r7, #12]
    8d18:	4b07      	ldr	r3, [pc, #28]	; (8d38 <_tc_timer_get_period+0x6c>)
    8d1a:	4798      	blx	r3
    8d1c:	4603      	mov	r3, r0
    8d1e:	e000      	b.n	8d22 <_tc_timer_get_period+0x56>
	}

	return 0;
    8d20:	2300      	movs	r3, #0
}
    8d22:	4618      	mov	r0, r3
    8d24:	3710      	adds	r7, #16
    8d26:	46bd      	mov	sp, r7
    8d28:	bd80      	pop	{r7, pc}
    8d2a:	bf00      	nop
    8d2c:	000084a9 	.word	0x000084a9
    8d30:	00008691 	.word	0x00008691
    8d34:	00008631 	.word	0x00008631
    8d38:	000085a9 	.word	0x000085a9

00008d3c <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    8d3c:	b580      	push	{r7, lr}
    8d3e:	b082      	sub	sp, #8
    8d40:	af00      	add	r7, sp, #0
    8d42:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8d44:	687b      	ldr	r3, [r7, #4]
    8d46:	68db      	ldr	r3, [r3, #12]
    8d48:	4618      	mov	r0, r3
    8d4a:	4b03      	ldr	r3, [pc, #12]	; (8d58 <_tc_timer_is_started+0x1c>)
    8d4c:	4798      	blx	r3
    8d4e:	4603      	mov	r3, r0
}
    8d50:	4618      	mov	r0, r3
    8d52:	3708      	adds	r7, #8
    8d54:	46bd      	mov	sp, r7
    8d56:	bd80      	pop	{r7, pc}
    8d58:	00008449 	.word	0x00008449

00008d5c <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    8d5c:	b580      	push	{r7, lr}
    8d5e:	b082      	sub	sp, #8
    8d60:	af00      	add	r7, sp, #0
    8d62:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8d64:	687b      	ldr	r3, [r7, #4]
    8d66:	691b      	ldr	r3, [r3, #16]
    8d68:	4618      	mov	r0, r3
    8d6a:	4b03      	ldr	r3, [pc, #12]	; (8d78 <_pwm_is_enabled+0x1c>)
    8d6c:	4798      	blx	r3
    8d6e:	4603      	mov	r3, r0
}
    8d70:	4618      	mov	r0, r3
    8d72:	3708      	adds	r7, #8
    8d74:	46bd      	mov	sp, r7
    8d76:	bd80      	pop	{r7, pc}
    8d78:	00008449 	.word	0x00008449

00008d7c <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    8d7c:	b480      	push	{r7}
    8d7e:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    8d80:	4b02      	ldr	r3, [pc, #8]	; (8d8c <_tc_get_timer+0x10>)
}
    8d82:	4618      	mov	r0, r3
    8d84:	46bd      	mov	sp, r7
    8d86:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d8a:	4770      	bx	lr
    8d8c:	20000158 	.word	0x20000158

00008d90 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    8d90:	b480      	push	{r7}
    8d92:	af00      	add	r7, sp, #0
	return NULL;
    8d94:	2300      	movs	r3, #0
}
    8d96:	4618      	mov	r0, r3
    8d98:	46bd      	mov	sp, r7
    8d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d9e:	4770      	bx	lr

00008da0 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    8da0:	b580      	push	{r7, lr}
    8da2:	b084      	sub	sp, #16
    8da4:	af00      	add	r7, sp, #0
    8da6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8da8:	687b      	ldr	r3, [r7, #4]
    8daa:	68db      	ldr	r3, [r3, #12]
    8dac:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8dae:	68f8      	ldr	r0, [r7, #12]
    8db0:	4b0e      	ldr	r3, [pc, #56]	; (8dec <_tc_timer_set_irq+0x4c>)
    8db2:	4798      	blx	r3
    8db4:	4603      	mov	r3, r0
    8db6:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8db8:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    8dbc:	490c      	ldr	r1, [pc, #48]	; (8df0 <_tc_timer_set_irq+0x50>)
    8dbe:	2001      	movs	r0, #1
    8dc0:	4b0c      	ldr	r3, [pc, #48]	; (8df4 <_tc_timer_set_irq+0x54>)
    8dc2:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    8dc4:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8dc8:	490b      	ldr	r1, [pc, #44]	; (8df8 <_tc_timer_set_irq+0x58>)
    8dca:	4613      	mov	r3, r2
    8dcc:	009b      	lsls	r3, r3, #2
    8dce:	4413      	add	r3, r2
    8dd0:	009b      	lsls	r3, r3, #2
    8dd2:	440b      	add	r3, r1
    8dd4:	3302      	adds	r3, #2
    8dd6:	f9b3 3000 	ldrsh.w	r3, [r3]
    8dda:	b2db      	uxtb	r3, r3
    8ddc:	4618      	mov	r0, r3
    8dde:	4b07      	ldr	r3, [pc, #28]	; (8dfc <_tc_timer_set_irq+0x5c>)
    8de0:	4798      	blx	r3
}
    8de2:	bf00      	nop
    8de4:	3710      	adds	r7, #16
    8de6:	46bd      	mov	sp, r7
    8de8:	bd80      	pop	{r7, pc}
    8dea:	bf00      	nop
    8dec:	00008f4d 	.word	0x00008f4d
    8df0:	00010270 	.word	0x00010270
    8df4:	00003d61 	.word	0x00003d61
    8df8:	200000e0 	.word	0x200000e0
    8dfc:	000045ad 	.word	0x000045ad

00008e00 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8e00:	b580      	push	{r7, lr}
    8e02:	b084      	sub	sp, #16
    8e04:	af00      	add	r7, sp, #0
    8e06:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8e08:	687b      	ldr	r3, [r7, #4]
    8e0a:	68db      	ldr	r3, [r3, #12]
    8e0c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8e0e:	68f8      	ldr	r0, [r7, #12]
    8e10:	4b07      	ldr	r3, [pc, #28]	; (8e30 <tc_interrupt_handler+0x30>)
    8e12:	4798      	blx	r3
    8e14:	4603      	mov	r3, r0
    8e16:	2b00      	cmp	r3, #0
    8e18:	d006      	beq.n	8e28 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8e1a:	68f8      	ldr	r0, [r7, #12]
    8e1c:	4b05      	ldr	r3, [pc, #20]	; (8e34 <tc_interrupt_handler+0x34>)
    8e1e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8e20:	687b      	ldr	r3, [r7, #4]
    8e22:	681b      	ldr	r3, [r3, #0]
    8e24:	6878      	ldr	r0, [r7, #4]
    8e26:	4798      	blx	r3
	}
}
    8e28:	bf00      	nop
    8e2a:	3710      	adds	r7, #16
    8e2c:	46bd      	mov	sp, r7
    8e2e:	bd80      	pop	{r7, pc}
    8e30:	00008359 	.word	0x00008359
    8e34:	00008381 	.word	0x00008381

00008e38 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8e38:	b580      	push	{r7, lr}
    8e3a:	b084      	sub	sp, #16
    8e3c:	af00      	add	r7, sp, #0
    8e3e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8e40:	687b      	ldr	r3, [r7, #4]
    8e42:	691b      	ldr	r3, [r3, #16]
    8e44:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8e46:	68f8      	ldr	r0, [r7, #12]
    8e48:	4b12      	ldr	r3, [pc, #72]	; (8e94 <tc_pwm_interrupt_handler+0x5c>)
    8e4a:	4798      	blx	r3
    8e4c:	4603      	mov	r3, r0
    8e4e:	2b00      	cmp	r3, #0
    8e50:	d00a      	beq.n	8e68 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8e52:	68f8      	ldr	r0, [r7, #12]
    8e54:	4b10      	ldr	r3, [pc, #64]	; (8e98 <tc_pwm_interrupt_handler+0x60>)
    8e56:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8e58:	687b      	ldr	r3, [r7, #4]
    8e5a:	681b      	ldr	r3, [r3, #0]
    8e5c:	2b00      	cmp	r3, #0
    8e5e:	d003      	beq.n	8e68 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8e60:	687b      	ldr	r3, [r7, #4]
    8e62:	681b      	ldr	r3, [r3, #0]
    8e64:	6878      	ldr	r0, [r7, #4]
    8e66:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    8e68:	68f8      	ldr	r0, [r7, #12]
    8e6a:	4b0c      	ldr	r3, [pc, #48]	; (8e9c <tc_pwm_interrupt_handler+0x64>)
    8e6c:	4798      	blx	r3
    8e6e:	4603      	mov	r3, r0
    8e70:	2b00      	cmp	r3, #0
    8e72:	d00a      	beq.n	8e8a <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    8e74:	68f8      	ldr	r0, [r7, #12]
    8e76:	4b0a      	ldr	r3, [pc, #40]	; (8ea0 <tc_pwm_interrupt_handler+0x68>)
    8e78:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    8e7a:	687b      	ldr	r3, [r7, #4]
    8e7c:	685b      	ldr	r3, [r3, #4]
    8e7e:	2b00      	cmp	r3, #0
    8e80:	d003      	beq.n	8e8a <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    8e82:	687b      	ldr	r3, [r7, #4]
    8e84:	685b      	ldr	r3, [r3, #4]
    8e86:	6878      	ldr	r0, [r7, #4]
    8e88:	4798      	blx	r3
		}
	}
}
    8e8a:	bf00      	nop
    8e8c:	3710      	adds	r7, #16
    8e8e:	46bd      	mov	sp, r7
    8e90:	bd80      	pop	{r7, pc}
    8e92:	bf00      	nop
    8e94:	00008359 	.word	0x00008359
    8e98:	00008381 	.word	0x00008381
    8e9c:	000083cf 	.word	0x000083cf
    8ea0:	0000839b 	.word	0x0000839b

00008ea4 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    8ea4:	b580      	push	{r7, lr}
    8ea6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    8ea8:	4b03      	ldr	r3, [pc, #12]	; (8eb8 <TC0_Handler+0x14>)
    8eaa:	681b      	ldr	r3, [r3, #0]
    8eac:	4618      	mov	r0, r3
    8eae:	4b03      	ldr	r3, [pc, #12]	; (8ebc <TC0_Handler+0x18>)
    8eb0:	4798      	blx	r3
}
    8eb2:	bf00      	nop
    8eb4:	bd80      	pop	{r7, pc}
    8eb6:	bf00      	nop
    8eb8:	20000c10 	.word	0x20000c10
    8ebc:	00008e01 	.word	0x00008e01

00008ec0 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    8ec0:	b580      	push	{r7, lr}
    8ec2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    8ec4:	4b03      	ldr	r3, [pc, #12]	; (8ed4 <TC2_Handler+0x14>)
    8ec6:	681b      	ldr	r3, [r3, #0]
    8ec8:	4618      	mov	r0, r3
    8eca:	4b03      	ldr	r3, [pc, #12]	; (8ed8 <TC2_Handler+0x18>)
    8ecc:	4798      	blx	r3
}
    8ece:	bf00      	nop
    8ed0:	bd80      	pop	{r7, pc}
    8ed2:	bf00      	nop
    8ed4:	20000c14 	.word	0x20000c14
    8ed8:	00008e01 	.word	0x00008e01

00008edc <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    8edc:	b580      	push	{r7, lr}
    8ede:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8ee0:	4b03      	ldr	r3, [pc, #12]	; (8ef0 <TC4_Handler+0x14>)
    8ee2:	681b      	ldr	r3, [r3, #0]
    8ee4:	4618      	mov	r0, r3
    8ee6:	4b03      	ldr	r3, [pc, #12]	; (8ef4 <TC4_Handler+0x18>)
    8ee8:	4798      	blx	r3
}
    8eea:	bf00      	nop
    8eec:	bd80      	pop	{r7, pc}
    8eee:	bf00      	nop
    8ef0:	20000c18 	.word	0x20000c18
    8ef4:	00008e01 	.word	0x00008e01

00008ef8 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8ef8:	b580      	push	{r7, lr}
    8efa:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    8efc:	4b03      	ldr	r3, [pc, #12]	; (8f0c <TC5_Handler+0x14>)
    8efe:	681b      	ldr	r3, [r3, #0]
    8f00:	4618      	mov	r0, r3
    8f02:	4b03      	ldr	r3, [pc, #12]	; (8f10 <TC5_Handler+0x18>)
    8f04:	4798      	blx	r3
}
    8f06:	bf00      	nop
    8f08:	bd80      	pop	{r7, pc}
    8f0a:	bf00      	nop
    8f0c:	20000c1c 	.word	0x20000c1c
    8f10:	00008e01 	.word	0x00008e01

00008f14 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    8f14:	b580      	push	{r7, lr}
    8f16:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8f18:	4b03      	ldr	r3, [pc, #12]	; (8f28 <TC6_Handler+0x14>)
    8f1a:	681b      	ldr	r3, [r3, #0]
    8f1c:	4618      	mov	r0, r3
    8f1e:	4b03      	ldr	r3, [pc, #12]	; (8f2c <TC6_Handler+0x18>)
    8f20:	4798      	blx	r3
}
    8f22:	bf00      	nop
    8f24:	bd80      	pop	{r7, pc}
    8f26:	bf00      	nop
    8f28:	20000c20 	.word	0x20000c20
    8f2c:	00008e01 	.word	0x00008e01

00008f30 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8f30:	b580      	push	{r7, lr}
    8f32:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    8f34:	4b03      	ldr	r3, [pc, #12]	; (8f44 <TC7_Handler+0x14>)
    8f36:	681b      	ldr	r3, [r3, #0]
    8f38:	4618      	mov	r0, r3
    8f3a:	4b03      	ldr	r3, [pc, #12]	; (8f48 <TC7_Handler+0x18>)
    8f3c:	4798      	blx	r3
}
    8f3e:	bf00      	nop
    8f40:	bd80      	pop	{r7, pc}
    8f42:	bf00      	nop
    8f44:	20000c24 	.word	0x20000c24
    8f48:	00008e39 	.word	0x00008e39

00008f4c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8f4c:	b580      	push	{r7, lr}
    8f4e:	b084      	sub	sp, #16
    8f50:	af00      	add	r7, sp, #0
    8f52:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    8f54:	6878      	ldr	r0, [r7, #4]
    8f56:	4b13      	ldr	r3, [pc, #76]	; (8fa4 <get_tc_index+0x58>)
    8f58:	4798      	blx	r3
    8f5a:	4603      	mov	r3, r0
    8f5c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8f5e:	2300      	movs	r3, #0
    8f60:	73fb      	strb	r3, [r7, #15]
    8f62:	e010      	b.n	8f86 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    8f64:	7bfa      	ldrb	r2, [r7, #15]
    8f66:	4910      	ldr	r1, [pc, #64]	; (8fa8 <get_tc_index+0x5c>)
    8f68:	4613      	mov	r3, r2
    8f6a:	009b      	lsls	r3, r3, #2
    8f6c:	4413      	add	r3, r2
    8f6e:	009b      	lsls	r3, r3, #2
    8f70:	440b      	add	r3, r1
    8f72:	781b      	ldrb	r3, [r3, #0]
    8f74:	7bba      	ldrb	r2, [r7, #14]
    8f76:	429a      	cmp	r2, r3
    8f78:	d102      	bne.n	8f80 <get_tc_index+0x34>
			return i;
    8f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8f7e:	e00d      	b.n	8f9c <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8f80:	7bfb      	ldrb	r3, [r7, #15]
    8f82:	3301      	adds	r3, #1
    8f84:	73fb      	strb	r3, [r7, #15]
    8f86:	7bfb      	ldrb	r3, [r7, #15]
    8f88:	2b05      	cmp	r3, #5
    8f8a:	d9eb      	bls.n	8f64 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    8f8c:	f240 221d 	movw	r2, #541	; 0x21d
    8f90:	4906      	ldr	r1, [pc, #24]	; (8fac <get_tc_index+0x60>)
    8f92:	2000      	movs	r0, #0
    8f94:	4b06      	ldr	r3, [pc, #24]	; (8fb0 <get_tc_index+0x64>)
    8f96:	4798      	blx	r3
	return -1;
    8f98:	f04f 33ff 	mov.w	r3, #4294967295
}
    8f9c:	4618      	mov	r0, r3
    8f9e:	3710      	adds	r7, #16
    8fa0:	46bd      	mov	sp, r7
    8fa2:	bd80      	pop	{r7, pc}
    8fa4:	00009051 	.word	0x00009051
    8fa8:	200000e0 	.word	0x200000e0
    8fac:	00010270 	.word	0x00010270
    8fb0:	00003d61 	.word	0x00003d61

00008fb4 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    8fb4:	b480      	push	{r7}
    8fb6:	b083      	sub	sp, #12
    8fb8:	af00      	add	r7, sp, #0
    8fba:	6078      	str	r0, [r7, #4]
    8fbc:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    8fbe:	687b      	ldr	r3, [r7, #4]
    8fc0:	4a17      	ldr	r2, [pc, #92]	; (9020 <_tc_init_irq_param+0x6c>)
    8fc2:	4293      	cmp	r3, r2
    8fc4:	d102      	bne.n	8fcc <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    8fc6:	4a17      	ldr	r2, [pc, #92]	; (9024 <_tc_init_irq_param+0x70>)
    8fc8:	683b      	ldr	r3, [r7, #0]
    8fca:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    8fcc:	687b      	ldr	r3, [r7, #4]
    8fce:	4a16      	ldr	r2, [pc, #88]	; (9028 <_tc_init_irq_param+0x74>)
    8fd0:	4293      	cmp	r3, r2
    8fd2:	d102      	bne.n	8fda <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    8fd4:	4a15      	ldr	r2, [pc, #84]	; (902c <_tc_init_irq_param+0x78>)
    8fd6:	683b      	ldr	r3, [r7, #0]
    8fd8:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    8fda:	687b      	ldr	r3, [r7, #4]
    8fdc:	4a14      	ldr	r2, [pc, #80]	; (9030 <_tc_init_irq_param+0x7c>)
    8fde:	4293      	cmp	r3, r2
    8fe0:	d102      	bne.n	8fe8 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    8fe2:	4a14      	ldr	r2, [pc, #80]	; (9034 <_tc_init_irq_param+0x80>)
    8fe4:	683b      	ldr	r3, [r7, #0]
    8fe6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8fe8:	687b      	ldr	r3, [r7, #4]
    8fea:	4a13      	ldr	r2, [pc, #76]	; (9038 <_tc_init_irq_param+0x84>)
    8fec:	4293      	cmp	r3, r2
    8fee:	d102      	bne.n	8ff6 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8ff0:	4a12      	ldr	r2, [pc, #72]	; (903c <_tc_init_irq_param+0x88>)
    8ff2:	683b      	ldr	r3, [r7, #0]
    8ff4:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    8ff6:	687b      	ldr	r3, [r7, #4]
    8ff8:	4a11      	ldr	r2, [pc, #68]	; (9040 <_tc_init_irq_param+0x8c>)
    8ffa:	4293      	cmp	r3, r2
    8ffc:	d102      	bne.n	9004 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    8ffe:	4a11      	ldr	r2, [pc, #68]	; (9044 <_tc_init_irq_param+0x90>)
    9000:	683b      	ldr	r3, [r7, #0]
    9002:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    9004:	687b      	ldr	r3, [r7, #4]
    9006:	4a10      	ldr	r2, [pc, #64]	; (9048 <_tc_init_irq_param+0x94>)
    9008:	4293      	cmp	r3, r2
    900a:	d102      	bne.n	9012 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    900c:	4a0f      	ldr	r2, [pc, #60]	; (904c <_tc_init_irq_param+0x98>)
    900e:	683b      	ldr	r3, [r7, #0]
    9010:	6013      	str	r3, [r2, #0]
	}
}
    9012:	bf00      	nop
    9014:	370c      	adds	r7, #12
    9016:	46bd      	mov	sp, r7
    9018:	f85d 7b04 	ldr.w	r7, [sp], #4
    901c:	4770      	bx	lr
    901e:	bf00      	nop
    9020:	40003800 	.word	0x40003800
    9024:	20000c10 	.word	0x20000c10
    9028:	4101a000 	.word	0x4101a000
    902c:	20000c14 	.word	0x20000c14
    9030:	42001400 	.word	0x42001400
    9034:	20000c18 	.word	0x20000c18
    9038:	42001800 	.word	0x42001800
    903c:	20000c1c 	.word	0x20000c1c
    9040:	43001400 	.word	0x43001400
    9044:	20000c20 	.word	0x20000c20
    9048:	43001800 	.word	0x43001800
    904c:	20000c24 	.word	0x20000c24

00009050 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    9050:	b4b0      	push	{r4, r5, r7}
    9052:	b08d      	sub	sp, #52	; 0x34
    9054:	af00      	add	r7, sp, #0
    9056:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    9058:	4b13      	ldr	r3, [pc, #76]	; (90a8 <_get_hardware_offset+0x58>)
    905a:	f107 040c 	add.w	r4, r7, #12
    905e:	461d      	mov	r5, r3
    9060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9064:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    9068:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    906c:	2300      	movs	r3, #0
    906e:	62fb      	str	r3, [r7, #44]	; 0x2c
    9070:	e010      	b.n	9094 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    9072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9074:	009b      	lsls	r3, r3, #2
    9076:	f107 0230 	add.w	r2, r7, #48	; 0x30
    907a:	4413      	add	r3, r2
    907c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    9080:	461a      	mov	r2, r3
    9082:	687b      	ldr	r3, [r7, #4]
    9084:	429a      	cmp	r2, r3
    9086:	d102      	bne.n	908e <_get_hardware_offset+0x3e>
			return i;
    9088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    908a:	b2db      	uxtb	r3, r3
    908c:	e006      	b.n	909c <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    908e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9090:	3301      	adds	r3, #1
    9092:	62fb      	str	r3, [r7, #44]	; 0x2c
    9094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9096:	2b07      	cmp	r3, #7
    9098:	d9eb      	bls.n	9072 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    909a:	2300      	movs	r3, #0
}
    909c:	4618      	mov	r0, r3
    909e:	3734      	adds	r7, #52	; 0x34
    90a0:	46bd      	mov	sp, r7
    90a2:	bcb0      	pop	{r4, r5, r7}
    90a4:	4770      	bx	lr
    90a6:	bf00      	nop
    90a8:	00010284 	.word	0x00010284

000090ac <__NVIC_EnableIRQ>:
{
    90ac:	b480      	push	{r7}
    90ae:	b083      	sub	sp, #12
    90b0:	af00      	add	r7, sp, #0
    90b2:	4603      	mov	r3, r0
    90b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    90b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    90ba:	2b00      	cmp	r3, #0
    90bc:	db0b      	blt.n	90d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    90be:	4909      	ldr	r1, [pc, #36]	; (90e4 <__NVIC_EnableIRQ+0x38>)
    90c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    90c4:	095b      	lsrs	r3, r3, #5
    90c6:	88fa      	ldrh	r2, [r7, #6]
    90c8:	f002 021f 	and.w	r2, r2, #31
    90cc:	2001      	movs	r0, #1
    90ce:	fa00 f202 	lsl.w	r2, r0, r2
    90d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    90d6:	bf00      	nop
    90d8:	370c      	adds	r7, #12
    90da:	46bd      	mov	sp, r7
    90dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    90e0:	4770      	bx	lr
    90e2:	bf00      	nop
    90e4:	e000e100 	.word	0xe000e100

000090e8 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    90e8:	b480      	push	{r7}
    90ea:	b087      	sub	sp, #28
    90ec:	af00      	add	r7, sp, #0
    90ee:	60f8      	str	r0, [r7, #12]
    90f0:	460b      	mov	r3, r1
    90f2:	607a      	str	r2, [r7, #4]
    90f4:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    90f6:	7afa      	ldrb	r2, [r7, #11]
    90f8:	68f9      	ldr	r1, [r7, #12]
    90fa:	4613      	mov	r3, r2
    90fc:	009b      	lsls	r3, r3, #2
    90fe:	4413      	add	r3, r2
    9100:	009b      	lsls	r3, r3, #2
    9102:	440b      	add	r3, r1
    9104:	3340      	adds	r3, #64	; 0x40
    9106:	681b      	ldr	r3, [r3, #0]
    9108:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    910a:	697a      	ldr	r2, [r7, #20]
    910c:	687b      	ldr	r3, [r7, #4]
    910e:	4013      	ands	r3, r2
    9110:	617b      	str	r3, [r7, #20]
	return tmp;
    9112:	697b      	ldr	r3, [r7, #20]
}
    9114:	4618      	mov	r0, r3
    9116:	371c      	adds	r7, #28
    9118:	46bd      	mov	sp, r7
    911a:	f85d 7b04 	ldr.w	r7, [sp], #4
    911e:	4770      	bx	lr

00009120 <hri_oscctrl_get_STATUS_reg>:
{
    9120:	b480      	push	{r7}
    9122:	b085      	sub	sp, #20
    9124:	af00      	add	r7, sp, #0
    9126:	6078      	str	r0, [r7, #4]
    9128:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    912a:	687b      	ldr	r3, [r7, #4]
    912c:	691b      	ldr	r3, [r3, #16]
    912e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9130:	68fa      	ldr	r2, [r7, #12]
    9132:	683b      	ldr	r3, [r7, #0]
    9134:	4013      	ands	r3, r2
    9136:	60fb      	str	r3, [r7, #12]
	return tmp;
    9138:	68fb      	ldr	r3, [r7, #12]
}
    913a:	4618      	mov	r0, r3
    913c:	3714      	adds	r7, #20
    913e:	46bd      	mov	sp, r7
    9140:	f85d 7b04 	ldr.w	r7, [sp], #4
    9144:	4770      	bx	lr

00009146 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    9146:	b480      	push	{r7}
    9148:	b085      	sub	sp, #20
    914a:	af00      	add	r7, sp, #0
    914c:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    914e:	687b      	ldr	r3, [r7, #4]
    9150:	f893 3020 	ldrb.w	r3, [r3, #32]
    9154:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    9156:	7bfb      	ldrb	r3, [r7, #15]
    9158:	f003 0301 	and.w	r3, r3, #1
    915c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    915e:	7bfb      	ldrb	r3, [r7, #15]
    9160:	2b00      	cmp	r3, #0
    9162:	bf14      	ite	ne
    9164:	2301      	movne	r3, #1
    9166:	2300      	moveq	r3, #0
    9168:	b2db      	uxtb	r3, r3
}
    916a:	4618      	mov	r0, r3
    916c:	3714      	adds	r7, #20
    916e:	46bd      	mov	sp, r7
    9170:	f85d 7b04 	ldr.w	r7, [sp], #4
    9174:	4770      	bx	lr

00009176 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    9176:	b480      	push	{r7}
    9178:	b083      	sub	sp, #12
    917a:	af00      	add	r7, sp, #0
    917c:	6078      	str	r0, [r7, #4]
    917e:	460b      	mov	r3, r1
    9180:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    9182:	bf00      	nop
    9184:	687b      	ldr	r3, [r7, #4]
    9186:	789b      	ldrb	r3, [r3, #2]
    9188:	b2da      	uxtb	r2, r3
    918a:	78fb      	ldrb	r3, [r7, #3]
    918c:	4013      	ands	r3, r2
    918e:	b2db      	uxtb	r3, r3
    9190:	2b00      	cmp	r3, #0
    9192:	d1f7      	bne.n	9184 <hri_usb_wait_for_sync+0xe>
	};
}
    9194:	bf00      	nop
    9196:	370c      	adds	r7, #12
    9198:	46bd      	mov	sp, r7
    919a:	f85d 7b04 	ldr.w	r7, [sp], #4
    919e:	4770      	bx	lr

000091a0 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    91a0:	b480      	push	{r7}
    91a2:	b083      	sub	sp, #12
    91a4:	af00      	add	r7, sp, #0
    91a6:	6078      	str	r0, [r7, #4]
    91a8:	460b      	mov	r3, r1
    91aa:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    91ac:	687b      	ldr	r3, [r7, #4]
    91ae:	789b      	ldrb	r3, [r3, #2]
    91b0:	b2da      	uxtb	r2, r3
    91b2:	78fb      	ldrb	r3, [r7, #3]
    91b4:	4013      	ands	r3, r2
    91b6:	b2db      	uxtb	r3, r3
    91b8:	2b00      	cmp	r3, #0
    91ba:	bf14      	ite	ne
    91bc:	2301      	movne	r3, #1
    91be:	2300      	moveq	r3, #0
    91c0:	b2db      	uxtb	r3, r3
}
    91c2:	4618      	mov	r0, r3
    91c4:	370c      	adds	r7, #12
    91c6:	46bd      	mov	sp, r7
    91c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    91cc:	4770      	bx	lr

000091ce <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    91ce:	b480      	push	{r7}
    91d0:	b085      	sub	sp, #20
    91d2:	af00      	add	r7, sp, #0
    91d4:	6078      	str	r0, [r7, #4]
    91d6:	460b      	mov	r3, r1
    91d8:	70fb      	strb	r3, [r7, #3]
    91da:	4613      	mov	r3, r2
    91dc:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    91de:	78fb      	ldrb	r3, [r7, #3]
    91e0:	687a      	ldr	r2, [r7, #4]
    91e2:	3308      	adds	r3, #8
    91e4:	015b      	lsls	r3, r3, #5
    91e6:	4413      	add	r3, r2
    91e8:	3307      	adds	r3, #7
    91ea:	781b      	ldrb	r3, [r3, #0]
    91ec:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    91ee:	7bfa      	ldrb	r2, [r7, #15]
    91f0:	78bb      	ldrb	r3, [r7, #2]
    91f2:	4013      	ands	r3, r2
    91f4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    91f6:	7bfb      	ldrb	r3, [r7, #15]
}
    91f8:	4618      	mov	r0, r3
    91fa:	3714      	adds	r7, #20
    91fc:	46bd      	mov	sp, r7
    91fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    9202:	4770      	bx	lr

00009204 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    9204:	b480      	push	{r7}
    9206:	b083      	sub	sp, #12
    9208:	af00      	add	r7, sp, #0
    920a:	6078      	str	r0, [r7, #4]
    920c:	460b      	mov	r3, r1
    920e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    9210:	78fb      	ldrb	r3, [r7, #3]
    9212:	687a      	ldr	r2, [r7, #4]
    9214:	3308      	adds	r3, #8
    9216:	015b      	lsls	r3, r3, #5
    9218:	4413      	add	r3, r2
    921a:	3307      	adds	r3, #7
    921c:	781b      	ldrb	r3, [r3, #0]
    921e:	b2db      	uxtb	r3, r3
}
    9220:	4618      	mov	r0, r3
    9222:	370c      	adds	r7, #12
    9224:	46bd      	mov	sp, r7
    9226:	f85d 7b04 	ldr.w	r7, [sp], #4
    922a:	4770      	bx	lr

0000922c <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    922c:	b480      	push	{r7}
    922e:	b083      	sub	sp, #12
    9230:	af00      	add	r7, sp, #0
    9232:	6078      	str	r0, [r7, #4]
    9234:	460b      	mov	r3, r1
    9236:	70fb      	strb	r3, [r7, #3]
    9238:	4613      	mov	r3, r2
    923a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    923c:	78fb      	ldrb	r3, [r7, #3]
    923e:	687a      	ldr	r2, [r7, #4]
    9240:	3308      	adds	r3, #8
    9242:	015b      	lsls	r3, r3, #5
    9244:	4413      	add	r3, r2
    9246:	3307      	adds	r3, #7
    9248:	78ba      	ldrb	r2, [r7, #2]
    924a:	701a      	strb	r2, [r3, #0]
}
    924c:	bf00      	nop
    924e:	370c      	adds	r7, #12
    9250:	46bd      	mov	sp, r7
    9252:	f85d 7b04 	ldr.w	r7, [sp], #4
    9256:	4770      	bx	lr

00009258 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    9258:	b480      	push	{r7}
    925a:	b083      	sub	sp, #12
    925c:	af00      	add	r7, sp, #0
    925e:	6078      	str	r0, [r7, #4]
    9260:	460b      	mov	r3, r1
    9262:	70fb      	strb	r3, [r7, #3]
    9264:	4613      	mov	r3, r2
    9266:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9268:	78fb      	ldrb	r3, [r7, #3]
    926a:	687a      	ldr	r2, [r7, #4]
    926c:	3308      	adds	r3, #8
    926e:	015b      	lsls	r3, r3, #5
    9270:	4413      	add	r3, r2
    9272:	3305      	adds	r3, #5
    9274:	78ba      	ldrb	r2, [r7, #2]
    9276:	701a      	strb	r2, [r3, #0]
}
    9278:	bf00      	nop
    927a:	370c      	adds	r7, #12
    927c:	46bd      	mov	sp, r7
    927e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9282:	4770      	bx	lr

00009284 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    9284:	b480      	push	{r7}
    9286:	b083      	sub	sp, #12
    9288:	af00      	add	r7, sp, #0
    928a:	6078      	str	r0, [r7, #4]
    928c:	460b      	mov	r3, r1
    928e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    9290:	78fb      	ldrb	r3, [r7, #3]
    9292:	687a      	ldr	r2, [r7, #4]
    9294:	3308      	adds	r3, #8
    9296:	015b      	lsls	r3, r3, #5
    9298:	4413      	add	r3, r2
    929a:	3306      	adds	r3, #6
    929c:	781b      	ldrb	r3, [r3, #0]
    929e:	b2db      	uxtb	r3, r3
}
    92a0:	4618      	mov	r0, r3
    92a2:	370c      	adds	r7, #12
    92a4:	46bd      	mov	sp, r7
    92a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    92aa:	4770      	bx	lr

000092ac <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    92ac:	b480      	push	{r7}
    92ae:	b083      	sub	sp, #12
    92b0:	af00      	add	r7, sp, #0
    92b2:	6078      	str	r0, [r7, #4]
    92b4:	460b      	mov	r3, r1
    92b6:	70fb      	strb	r3, [r7, #3]
    92b8:	4613      	mov	r3, r2
    92ba:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    92bc:	78fb      	ldrb	r3, [r7, #3]
    92be:	687a      	ldr	r2, [r7, #4]
    92c0:	3308      	adds	r3, #8
    92c2:	015b      	lsls	r3, r3, #5
    92c4:	4413      	add	r3, r2
    92c6:	3304      	adds	r3, #4
    92c8:	78ba      	ldrb	r2, [r7, #2]
    92ca:	701a      	strb	r2, [r3, #0]
}
    92cc:	bf00      	nop
    92ce:	370c      	adds	r7, #12
    92d0:	46bd      	mov	sp, r7
    92d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    92d6:	4770      	bx	lr

000092d8 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    92d8:	b480      	push	{r7}
    92da:	b083      	sub	sp, #12
    92dc:	af00      	add	r7, sp, #0
    92de:	6078      	str	r0, [r7, #4]
    92e0:	460b      	mov	r3, r1
    92e2:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    92e4:	78fb      	ldrb	r3, [r7, #3]
    92e6:	687a      	ldr	r2, [r7, #4]
    92e8:	015b      	lsls	r3, r3, #5
    92ea:	4413      	add	r3, r2
    92ec:	f503 7384 	add.w	r3, r3, #264	; 0x108
    92f0:	2210      	movs	r2, #16
    92f2:	701a      	strb	r2, [r3, #0]
}
    92f4:	bf00      	nop
    92f6:	370c      	adds	r7, #12
    92f8:	46bd      	mov	sp, r7
    92fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    92fe:	4770      	bx	lr

00009300 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    9300:	b480      	push	{r7}
    9302:	b083      	sub	sp, #12
    9304:	af00      	add	r7, sp, #0
    9306:	6078      	str	r0, [r7, #4]
    9308:	460b      	mov	r3, r1
    930a:	70fb      	strb	r3, [r7, #3]
    930c:	4613      	mov	r3, r2
    930e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    9310:	78fb      	ldrb	r3, [r7, #3]
    9312:	687a      	ldr	r2, [r7, #4]
    9314:	015b      	lsls	r3, r3, #5
    9316:	4413      	add	r3, r2
    9318:	f203 1309 	addw	r3, r3, #265	; 0x109
    931c:	78ba      	ldrb	r2, [r7, #2]
    931e:	701a      	strb	r2, [r3, #0]
}
    9320:	bf00      	nop
    9322:	370c      	adds	r7, #12
    9324:	46bd      	mov	sp, r7
    9326:	f85d 7b04 	ldr.w	r7, [sp], #4
    932a:	4770      	bx	lr

0000932c <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    932c:	b480      	push	{r7}
    932e:	b083      	sub	sp, #12
    9330:	af00      	add	r7, sp, #0
    9332:	6078      	str	r0, [r7, #4]
    9334:	460b      	mov	r3, r1
    9336:	70fb      	strb	r3, [r7, #3]
    9338:	4613      	mov	r3, r2
    933a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    933c:	78fb      	ldrb	r3, [r7, #3]
    933e:	687a      	ldr	r2, [r7, #4]
    9340:	015b      	lsls	r3, r3, #5
    9342:	4413      	add	r3, r2
    9344:	f503 7384 	add.w	r3, r3, #264	; 0x108
    9348:	78ba      	ldrb	r2, [r7, #2]
    934a:	701a      	strb	r2, [r3, #0]
}
    934c:	bf00      	nop
    934e:	370c      	adds	r7, #12
    9350:	46bd      	mov	sp, r7
    9352:	f85d 7b04 	ldr.w	r7, [sp], #4
    9356:	4770      	bx	lr

00009358 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    9358:	b480      	push	{r7}
    935a:	b085      	sub	sp, #20
    935c:	af00      	add	r7, sp, #0
    935e:	6078      	str	r0, [r7, #4]
    9360:	460b      	mov	r3, r1
    9362:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9364:	78fb      	ldrb	r3, [r7, #3]
    9366:	687a      	ldr	r2, [r7, #4]
    9368:	3308      	adds	r3, #8
    936a:	015b      	lsls	r3, r3, #5
    936c:	4413      	add	r3, r2
    936e:	781b      	ldrb	r3, [r3, #0]
    9370:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    9372:	7bfb      	ldrb	r3, [r7, #15]
    9374:	f003 0307 	and.w	r3, r3, #7
    9378:	73fb      	strb	r3, [r7, #15]
	return tmp;
    937a:	7bfb      	ldrb	r3, [r7, #15]
}
    937c:	4618      	mov	r0, r3
    937e:	3714      	adds	r7, #20
    9380:	46bd      	mov	sp, r7
    9382:	f85d 7b04 	ldr.w	r7, [sp], #4
    9386:	4770      	bx	lr

00009388 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    9388:	b480      	push	{r7}
    938a:	b085      	sub	sp, #20
    938c:	af00      	add	r7, sp, #0
    938e:	6078      	str	r0, [r7, #4]
    9390:	460b      	mov	r3, r1
    9392:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9394:	78fb      	ldrb	r3, [r7, #3]
    9396:	687a      	ldr	r2, [r7, #4]
    9398:	3308      	adds	r3, #8
    939a:	015b      	lsls	r3, r3, #5
    939c:	4413      	add	r3, r2
    939e:	781b      	ldrb	r3, [r3, #0]
    93a0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    93a2:	7bfb      	ldrb	r3, [r7, #15]
    93a4:	091b      	lsrs	r3, r3, #4
    93a6:	b2db      	uxtb	r3, r3
    93a8:	f003 0307 	and.w	r3, r3, #7
    93ac:	73fb      	strb	r3, [r7, #15]
	return tmp;
    93ae:	7bfb      	ldrb	r3, [r7, #15]
}
    93b0:	4618      	mov	r0, r3
    93b2:	3714      	adds	r7, #20
    93b4:	46bd      	mov	sp, r7
    93b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    93ba:	4770      	bx	lr

000093bc <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    93bc:	b480      	push	{r7}
    93be:	b083      	sub	sp, #12
    93c0:	af00      	add	r7, sp, #0
    93c2:	6078      	str	r0, [r7, #4]
    93c4:	460b      	mov	r3, r1
    93c6:	70fb      	strb	r3, [r7, #3]
    93c8:	4613      	mov	r3, r2
    93ca:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    93cc:	78fb      	ldrb	r3, [r7, #3]
    93ce:	687a      	ldr	r2, [r7, #4]
    93d0:	3308      	adds	r3, #8
    93d2:	015b      	lsls	r3, r3, #5
    93d4:	4413      	add	r3, r2
    93d6:	78ba      	ldrb	r2, [r7, #2]
    93d8:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    93da:	bf00      	nop
    93dc:	370c      	adds	r7, #12
    93de:	46bd      	mov	sp, r7
    93e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    93e4:	4770      	bx	lr

000093e6 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    93e6:	b480      	push	{r7}
    93e8:	b083      	sub	sp, #12
    93ea:	af00      	add	r7, sp, #0
    93ec:	6078      	str	r0, [r7, #4]
    93ee:	460b      	mov	r3, r1
    93f0:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    93f2:	78fb      	ldrb	r3, [r7, #3]
    93f4:	687a      	ldr	r2, [r7, #4]
    93f6:	3308      	adds	r3, #8
    93f8:	015b      	lsls	r3, r3, #5
    93fa:	4413      	add	r3, r2
    93fc:	781b      	ldrb	r3, [r3, #0]
    93fe:	b2db      	uxtb	r3, r3
}
    9400:	4618      	mov	r0, r3
    9402:	370c      	adds	r7, #12
    9404:	46bd      	mov	sp, r7
    9406:	f85d 7b04 	ldr.w	r7, [sp], #4
    940a:	4770      	bx	lr

0000940c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    940c:	b480      	push	{r7}
    940e:	b083      	sub	sp, #12
    9410:	af00      	add	r7, sp, #0
    9412:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    9414:	687b      	ldr	r3, [r7, #4]
    9416:	8b9b      	ldrh	r3, [r3, #28]
    9418:	b29b      	uxth	r3, r3
}
    941a:	4618      	mov	r0, r3
    941c:	370c      	adds	r7, #12
    941e:	46bd      	mov	sp, r7
    9420:	f85d 7b04 	ldr.w	r7, [sp], #4
    9424:	4770      	bx	lr

00009426 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    9426:	b480      	push	{r7}
    9428:	b083      	sub	sp, #12
    942a:	af00      	add	r7, sp, #0
    942c:	6078      	str	r0, [r7, #4]
    942e:	460b      	mov	r3, r1
    9430:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    9432:	687b      	ldr	r3, [r7, #4]
    9434:	887a      	ldrh	r2, [r7, #2]
    9436:	839a      	strh	r2, [r3, #28]
}
    9438:	bf00      	nop
    943a:	370c      	adds	r7, #12
    943c:	46bd      	mov	sp, r7
    943e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9442:	4770      	bx	lr

00009444 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    9444:	b480      	push	{r7}
    9446:	b083      	sub	sp, #12
    9448:	af00      	add	r7, sp, #0
    944a:	6078      	str	r0, [r7, #4]
    944c:	460b      	mov	r3, r1
    944e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    9450:	687b      	ldr	r3, [r7, #4]
    9452:	887a      	ldrh	r2, [r7, #2]
    9454:	831a      	strh	r2, [r3, #24]
}
    9456:	bf00      	nop
    9458:	370c      	adds	r7, #12
    945a:	46bd      	mov	sp, r7
    945c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9460:	4770      	bx	lr

00009462 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    9462:	b480      	push	{r7}
    9464:	b083      	sub	sp, #12
    9466:	af00      	add	r7, sp, #0
    9468:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    946a:	687b      	ldr	r3, [r7, #4]
    946c:	8b1b      	ldrh	r3, [r3, #24]
    946e:	b29b      	uxth	r3, r3
}
    9470:	4618      	mov	r0, r3
    9472:	370c      	adds	r7, #12
    9474:	46bd      	mov	sp, r7
    9476:	f85d 7b04 	ldr.w	r7, [sp], #4
    947a:	4770      	bx	lr

0000947c <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    947c:	b480      	push	{r7}
    947e:	b083      	sub	sp, #12
    9480:	af00      	add	r7, sp, #0
    9482:	6078      	str	r0, [r7, #4]
    9484:	460b      	mov	r3, r1
    9486:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    9488:	687b      	ldr	r3, [r7, #4]
    948a:	887a      	ldrh	r2, [r7, #2]
    948c:	829a      	strh	r2, [r3, #20]
}
    948e:	bf00      	nop
    9490:	370c      	adds	r7, #12
    9492:	46bd      	mov	sp, r7
    9494:	f85d 7b04 	ldr.w	r7, [sp], #4
    9498:	4770      	bx	lr

0000949a <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    949a:	b480      	push	{r7}
    949c:	b085      	sub	sp, #20
    949e:	af00      	add	r7, sp, #0
    94a0:	6078      	str	r0, [r7, #4]
    94a2:	460b      	mov	r3, r1
    94a4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    94a6:	687b      	ldr	r3, [r7, #4]
    94a8:	789b      	ldrb	r3, [r3, #2]
    94aa:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    94ac:	7bfa      	ldrb	r2, [r7, #15]
    94ae:	78fb      	ldrb	r3, [r7, #3]
    94b0:	4013      	ands	r3, r2
    94b2:	73fb      	strb	r3, [r7, #15]
	return tmp;
    94b4:	7bfb      	ldrb	r3, [r7, #15]
}
    94b6:	4618      	mov	r0, r3
    94b8:	3714      	adds	r7, #20
    94ba:	46bd      	mov	sp, r7
    94bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    94c0:	4770      	bx	lr
	...

000094c4 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    94c4:	b580      	push	{r7, lr}
    94c6:	b082      	sub	sp, #8
    94c8:	af00      	add	r7, sp, #0
    94ca:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    94cc:	687b      	ldr	r3, [r7, #4]
    94ce:	781b      	ldrb	r3, [r3, #0]
    94d0:	b2db      	uxtb	r3, r3
    94d2:	f023 0302 	bic.w	r3, r3, #2
    94d6:	b2da      	uxtb	r2, r3
    94d8:	687b      	ldr	r3, [r7, #4]
    94da:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    94dc:	2103      	movs	r1, #3
    94de:	6878      	ldr	r0, [r7, #4]
    94e0:	4b02      	ldr	r3, [pc, #8]	; (94ec <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    94e2:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    94e4:	bf00      	nop
    94e6:	3708      	adds	r7, #8
    94e8:	46bd      	mov	sp, r7
    94ea:	bd80      	pop	{r7, pc}
    94ec:	00009177 	.word	0x00009177

000094f0 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    94f0:	b580      	push	{r7, lr}
    94f2:	b084      	sub	sp, #16
    94f4:	af00      	add	r7, sp, #0
    94f6:	6078      	str	r0, [r7, #4]
    94f8:	460b      	mov	r3, r1
    94fa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    94fc:	2103      	movs	r1, #3
    94fe:	6878      	ldr	r0, [r7, #4]
    9500:	4b06      	ldr	r3, [pc, #24]	; (951c <hri_usb_get_CTRLA_reg+0x2c>)
    9502:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    9504:	687b      	ldr	r3, [r7, #4]
    9506:	781b      	ldrb	r3, [r3, #0]
    9508:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    950a:	7bfa      	ldrb	r2, [r7, #15]
    950c:	78fb      	ldrb	r3, [r7, #3]
    950e:	4013      	ands	r3, r2
    9510:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9512:	7bfb      	ldrb	r3, [r7, #15]
}
    9514:	4618      	mov	r0, r3
    9516:	3710      	adds	r7, #16
    9518:	46bd      	mov	sp, r7
    951a:	bd80      	pop	{r7, pc}
    951c:	00009177 	.word	0x00009177

00009520 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    9520:	b580      	push	{r7, lr}
    9522:	b082      	sub	sp, #8
    9524:	af00      	add	r7, sp, #0
    9526:	6078      	str	r0, [r7, #4]
    9528:	460b      	mov	r3, r1
    952a:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    952c:	687b      	ldr	r3, [r7, #4]
    952e:	78fa      	ldrb	r2, [r7, #3]
    9530:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9532:	2103      	movs	r1, #3
    9534:	6878      	ldr	r0, [r7, #4]
    9536:	4b03      	ldr	r3, [pc, #12]	; (9544 <hri_usb_write_CTRLA_reg+0x24>)
    9538:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    953a:	bf00      	nop
    953c:	3708      	adds	r7, #8
    953e:	46bd      	mov	sp, r7
    9540:	bd80      	pop	{r7, pc}
    9542:	bf00      	nop
    9544:	00009177 	.word	0x00009177

00009548 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    9548:	b580      	push	{r7, lr}
    954a:	b082      	sub	sp, #8
    954c:	af00      	add	r7, sp, #0
    954e:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9550:	2103      	movs	r1, #3
    9552:	6878      	ldr	r0, [r7, #4]
    9554:	4b04      	ldr	r3, [pc, #16]	; (9568 <hri_usb_read_CTRLA_reg+0x20>)
    9556:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    9558:	687b      	ldr	r3, [r7, #4]
    955a:	781b      	ldrb	r3, [r3, #0]
    955c:	b2db      	uxtb	r3, r3
}
    955e:	4618      	mov	r0, r3
    9560:	3708      	adds	r7, #8
    9562:	46bd      	mov	sp, r7
    9564:	bd80      	pop	{r7, pc}
    9566:	bf00      	nop
    9568:	00009177 	.word	0x00009177

0000956c <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    956c:	b480      	push	{r7}
    956e:	b083      	sub	sp, #12
    9570:	af00      	add	r7, sp, #0
    9572:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    9574:	687b      	ldr	r3, [r7, #4]
    9576:	891b      	ldrh	r3, [r3, #8]
    9578:	b29b      	uxth	r3, r3
    957a:	f023 0301 	bic.w	r3, r3, #1
    957e:	b29a      	uxth	r2, r3
    9580:	687b      	ldr	r3, [r7, #4]
    9582:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    9584:	bf00      	nop
    9586:	370c      	adds	r7, #12
    9588:	46bd      	mov	sp, r7
    958a:	f85d 7b04 	ldr.w	r7, [sp], #4
    958e:	4770      	bx	lr

00009590 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    9590:	b480      	push	{r7}
    9592:	b083      	sub	sp, #12
    9594:	af00      	add	r7, sp, #0
    9596:	6078      	str	r0, [r7, #4]
    9598:	460b      	mov	r3, r1
    959a:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    959c:	687b      	ldr	r3, [r7, #4]
    959e:	887a      	ldrh	r2, [r7, #2]
    95a0:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    95a2:	bf00      	nop
    95a4:	370c      	adds	r7, #12
    95a6:	46bd      	mov	sp, r7
    95a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    95ac:	4770      	bx	lr

000095ae <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    95ae:	b480      	push	{r7}
    95b0:	b083      	sub	sp, #12
    95b2:	af00      	add	r7, sp, #0
    95b4:	6078      	str	r0, [r7, #4]
    95b6:	460b      	mov	r3, r1
    95b8:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    95ba:	687b      	ldr	r3, [r7, #4]
    95bc:	78fa      	ldrb	r2, [r7, #3]
    95be:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    95c0:	bf00      	nop
    95c2:	370c      	adds	r7, #12
    95c4:	46bd      	mov	sp, r7
    95c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    95ca:	4770      	bx	lr

000095cc <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    95cc:	b480      	push	{r7}
    95ce:	b083      	sub	sp, #12
    95d0:	af00      	add	r7, sp, #0
    95d2:	6078      	str	r0, [r7, #4]
    95d4:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    95d6:	687b      	ldr	r3, [r7, #4]
    95d8:	683a      	ldr	r2, [r7, #0]
    95da:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    95dc:	bf00      	nop
    95de:	370c      	adds	r7, #12
    95e0:	46bd      	mov	sp, r7
    95e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    95e6:	4770      	bx	lr

000095e8 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    95e8:	b480      	push	{r7}
    95ea:	b083      	sub	sp, #12
    95ec:	af00      	add	r7, sp, #0
    95ee:	6078      	str	r0, [r7, #4]
    95f0:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    95f2:	2300      	movs	r3, #0
}
    95f4:	4618      	mov	r0, r3
    95f6:	370c      	adds	r7, #12
    95f8:	46bd      	mov	sp, r7
    95fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    95fe:	4770      	bx	lr

00009600 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    9600:	b480      	push	{r7}
    9602:	b085      	sub	sp, #20
    9604:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    9606:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    960a:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    960c:	4b28      	ldr	r3, [pc, #160]	; (96b0 <_usb_load_calib+0xb0>)
    960e:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    9610:	f003 031f 	and.w	r3, r3, #31
    9614:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    9616:	4b26      	ldr	r3, [pc, #152]	; (96b0 <_usb_load_calib+0xb0>)
    9618:	681b      	ldr	r3, [r3, #0]
    961a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    961c:	f003 031f 	and.w	r3, r3, #31
    9620:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    9622:	4b23      	ldr	r3, [pc, #140]	; (96b0 <_usb_load_calib+0xb0>)
    9624:	681b      	ldr	r3, [r3, #0]
    9626:	0a9b      	lsrs	r3, r3, #10
    9628:	f003 0307 	and.w	r3, r3, #7
    962c:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    962e:	68fb      	ldr	r3, [r7, #12]
    9630:	2b00      	cmp	r3, #0
    9632:	d002      	beq.n	963a <_usb_load_calib+0x3a>
    9634:	68fb      	ldr	r3, [r7, #12]
    9636:	2b1f      	cmp	r3, #31
    9638:	d101      	bne.n	963e <_usb_load_calib+0x3e>
		pad_transn = 9;
    963a:	2309      	movs	r3, #9
    963c:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    963e:	68bb      	ldr	r3, [r7, #8]
    9640:	2b00      	cmp	r3, #0
    9642:	d002      	beq.n	964a <_usb_load_calib+0x4a>
    9644:	68bb      	ldr	r3, [r7, #8]
    9646:	2b1f      	cmp	r3, #31
    9648:	d101      	bne.n	964e <_usb_load_calib+0x4e>
		pad_transp = 25;
    964a:	2319      	movs	r3, #25
    964c:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    964e:	687b      	ldr	r3, [r7, #4]
    9650:	2b00      	cmp	r3, #0
    9652:	d002      	beq.n	965a <_usb_load_calib+0x5a>
    9654:	687b      	ldr	r3, [r7, #4]
    9656:	2b07      	cmp	r3, #7
    9658:	d101      	bne.n	965e <_usb_load_calib+0x5e>
		pad_trim = 6;
    965a:	2306      	movs	r3, #6
    965c:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    965e:	68fb      	ldr	r3, [r7, #12]
    9660:	b29b      	uxth	r3, r3
    9662:	019b      	lsls	r3, r3, #6
    9664:	b29b      	uxth	r3, r3
    9666:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    966a:	b29a      	uxth	r2, r3
    966c:	68bb      	ldr	r3, [r7, #8]
    966e:	b29b      	uxth	r3, r3
    9670:	f003 031f 	and.w	r3, r3, #31
    9674:	b29b      	uxth	r3, r3
    9676:	4313      	orrs	r3, r2
    9678:	b29a      	uxth	r2, r3
    967a:	687b      	ldr	r3, [r7, #4]
    967c:	b29b      	uxth	r3, r3
    967e:	031b      	lsls	r3, r3, #12
    9680:	b29b      	uxth	r3, r3
    9682:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    9686:	b29b      	uxth	r3, r3
    9688:	4313      	orrs	r3, r2
    968a:	b29a      	uxth	r2, r3
    968c:	683b      	ldr	r3, [r7, #0]
    968e:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    9690:	683a      	ldr	r2, [r7, #0]
    9692:	78d3      	ldrb	r3, [r2, #3]
    9694:	f043 0303 	orr.w	r3, r3, #3
    9698:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    969a:	683a      	ldr	r2, [r7, #0]
    969c:	78d3      	ldrb	r3, [r2, #3]
    969e:	f043 030c 	orr.w	r3, r3, #12
    96a2:	70d3      	strb	r3, [r2, #3]
}
    96a4:	bf00      	nop
    96a6:	3714      	adds	r7, #20
    96a8:	46bd      	mov	sp, r7
    96aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    96ae:	4770      	bx	lr
    96b0:	00800084 	.word	0x00800084

000096b4 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    96b4:	b580      	push	{r7, lr}
    96b6:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    96b8:	bf00      	nop
    96ba:	2203      	movs	r2, #3
    96bc:	2100      	movs	r1, #0
    96be:	4804      	ldr	r0, [pc, #16]	; (96d0 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    96c0:	4b04      	ldr	r3, [pc, #16]	; (96d4 <_usb_d_dev_wait_dpll_rdy+0x20>)
    96c2:	4798      	blx	r3
    96c4:	4603      	mov	r3, r0
    96c6:	2b03      	cmp	r3, #3
    96c8:	d1f7      	bne.n	96ba <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    96ca:	bf00      	nop
    96cc:	bd80      	pop	{r7, pc}
    96ce:	bf00      	nop
    96d0:	40001000 	.word	0x40001000
    96d4:	000090e9 	.word	0x000090e9

000096d8 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    96d8:	b580      	push	{r7, lr}
    96da:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    96dc:	480e      	ldr	r0, [pc, #56]	; (9718 <_usb_d_dev_wait_dfll_rdy+0x40>)
    96de:	4b0f      	ldr	r3, [pc, #60]	; (971c <_usb_d_dev_wait_dfll_rdy+0x44>)
    96e0:	4798      	blx	r3
    96e2:	4603      	mov	r3, r0
    96e4:	2b00      	cmp	r3, #0
    96e6:	d00a      	beq.n	96fe <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    96e8:	bf00      	nop
    96ea:	f44f 6110 	mov.w	r1, #2304	; 0x900
    96ee:	480a      	ldr	r0, [pc, #40]	; (9718 <_usb_d_dev_wait_dfll_rdy+0x40>)
    96f0:	4b0b      	ldr	r3, [pc, #44]	; (9720 <_usb_d_dev_wait_dfll_rdy+0x48>)
    96f2:	4798      	blx	r3
    96f4:	4603      	mov	r3, r0
    96f6:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    96fa:	d1f6      	bne.n	96ea <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    96fc:	e009      	b.n	9712 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    96fe:	bf00      	nop
    9700:	f44f 7180 	mov.w	r1, #256	; 0x100
    9704:	4804      	ldr	r0, [pc, #16]	; (9718 <_usb_d_dev_wait_dfll_rdy+0x40>)
    9706:	4b06      	ldr	r3, [pc, #24]	; (9720 <_usb_d_dev_wait_dfll_rdy+0x48>)
    9708:	4798      	blx	r3
    970a:	4603      	mov	r3, r0
    970c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9710:	d1f6      	bne.n	9700 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    9712:	bf00      	nop
    9714:	bd80      	pop	{r7, pc}
    9716:	bf00      	nop
    9718:	40001000 	.word	0x40001000
    971c:	00009147 	.word	0x00009147
    9720:	00009121 	.word	0x00009121

00009724 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    9724:	b580      	push	{r7, lr}
    9726:	b082      	sub	sp, #8
    9728:	af00      	add	r7, sp, #0
    972a:	4603      	mov	r3, r0
    972c:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    972e:	79fb      	ldrb	r3, [r7, #7]
    9730:	2b00      	cmp	r3, #0
    9732:	d102      	bne.n	973a <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    9734:	4b05      	ldr	r3, [pc, #20]	; (974c <_usb_d_dev_wait_clk_rdy+0x28>)
    9736:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    9738:	e004      	b.n	9744 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    973a:	79fb      	ldrb	r3, [r7, #7]
    973c:	2b01      	cmp	r3, #1
    973e:	d101      	bne.n	9744 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    9740:	4b03      	ldr	r3, [pc, #12]	; (9750 <_usb_d_dev_wait_clk_rdy+0x2c>)
    9742:	4798      	blx	r3
}
    9744:	bf00      	nop
    9746:	3708      	adds	r7, #8
    9748:	46bd      	mov	sp, r7
    974a:	bd80      	pop	{r7, pc}
    974c:	000096d9 	.word	0x000096d9
    9750:	000096b5 	.word	0x000096b5

00009754 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    9754:	b580      	push	{r7, lr}
    9756:	b082      	sub	sp, #8
    9758:	af00      	add	r7, sp, #0
    975a:	4603      	mov	r3, r0
    975c:	6039      	str	r1, [r7, #0]
    975e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    9760:	683b      	ldr	r3, [r7, #0]
    9762:	b2da      	uxtb	r2, r3
    9764:	79fb      	ldrb	r3, [r7, #7]
    9766:	4619      	mov	r1, r3
    9768:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    976c:	4b02      	ldr	r3, [pc, #8]	; (9778 <_usbd_ep_int_ack+0x24>)
    976e:	4798      	blx	r3
}
    9770:	bf00      	nop
    9772:	3708      	adds	r7, #8
    9774:	46bd      	mov	sp, r7
    9776:	bd80      	pop	{r7, pc}
    9778:	0000922d 	.word	0x0000922d

0000977c <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    977c:	b580      	push	{r7, lr}
    977e:	b082      	sub	sp, #8
    9780:	af00      	add	r7, sp, #0
    9782:	4603      	mov	r3, r0
    9784:	6039      	str	r1, [r7, #0]
    9786:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    9788:	683b      	ldr	r3, [r7, #0]
    978a:	b2da      	uxtb	r2, r3
    978c:	79fb      	ldrb	r3, [r7, #7]
    978e:	4619      	mov	r1, r3
    9790:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9794:	4b02      	ldr	r3, [pc, #8]	; (97a0 <_usbd_ep_int_en+0x24>)
    9796:	4798      	blx	r3
}
    9798:	bf00      	nop
    979a:	3708      	adds	r7, #8
    979c:	46bd      	mov	sp, r7
    979e:	bd80      	pop	{r7, pc}
    97a0:	00009301 	.word	0x00009301

000097a4 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    97a4:	b580      	push	{r7, lr}
    97a6:	b082      	sub	sp, #8
    97a8:	af00      	add	r7, sp, #0
    97aa:	4603      	mov	r3, r0
    97ac:	6039      	str	r1, [r7, #0]
    97ae:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    97b0:	683b      	ldr	r3, [r7, #0]
    97b2:	b2da      	uxtb	r2, r3
    97b4:	79fb      	ldrb	r3, [r7, #7]
    97b6:	4619      	mov	r1, r3
    97b8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97bc:	4b02      	ldr	r3, [pc, #8]	; (97c8 <_usbd_ep_int_dis+0x24>)
    97be:	4798      	blx	r3
}
    97c0:	bf00      	nop
    97c2:	3708      	adds	r7, #8
    97c4:	46bd      	mov	sp, r7
    97c6:	bd80      	pop	{r7, pc}
    97c8:	0000932d 	.word	0x0000932d

000097cc <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    97cc:	b580      	push	{r7, lr}
    97ce:	b082      	sub	sp, #8
    97d0:	af00      	add	r7, sp, #0
    97d2:	4603      	mov	r3, r0
    97d4:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    97d6:	79fb      	ldrb	r3, [r7, #7]
    97d8:	4619      	mov	r1, r3
    97da:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97de:	4b06      	ldr	r3, [pc, #24]	; (97f8 <_usbd_ep_is_ctrl+0x2c>)
    97e0:	4798      	blx	r3
    97e2:	4603      	mov	r3, r0
    97e4:	2b11      	cmp	r3, #17
    97e6:	bf0c      	ite	eq
    97e8:	2301      	moveq	r3, #1
    97ea:	2300      	movne	r3, #0
    97ec:	b2db      	uxtb	r3, r3
}
    97ee:	4618      	mov	r0, r3
    97f0:	3708      	adds	r7, #8
    97f2:	46bd      	mov	sp, r7
    97f4:	bd80      	pop	{r7, pc}
    97f6:	bf00      	nop
    97f8:	000093e7 	.word	0x000093e7

000097fc <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    97fc:	b580      	push	{r7, lr}
    97fe:	b082      	sub	sp, #8
    9800:	af00      	add	r7, sp, #0
    9802:	4603      	mov	r3, r0
    9804:	71fb      	strb	r3, [r7, #7]
    9806:	460b      	mov	r3, r1
    9808:	71bb      	strb	r3, [r7, #6]
    980a:	4613      	mov	r3, r2
    980c:	717b      	strb	r3, [r7, #5]
	if (st) {
    980e:	797b      	ldrb	r3, [r7, #5]
    9810:	2b00      	cmp	r3, #0
    9812:	d00b      	beq.n	982c <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9814:	79bb      	ldrb	r3, [r7, #6]
    9816:	2210      	movs	r2, #16
    9818:	fa02 f303 	lsl.w	r3, r2, r3
    981c:	b2da      	uxtb	r2, r3
    981e:	79fb      	ldrb	r3, [r7, #7]
    9820:	4619      	mov	r1, r3
    9822:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9826:	4b09      	ldr	r3, [pc, #36]	; (984c <_usbd_ep_set_stall+0x50>)
    9828:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    982a:	e00a      	b.n	9842 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    982c:	79bb      	ldrb	r3, [r7, #6]
    982e:	2210      	movs	r2, #16
    9830:	fa02 f303 	lsl.w	r3, r2, r3
    9834:	b2da      	uxtb	r2, r3
    9836:	79fb      	ldrb	r3, [r7, #7]
    9838:	4619      	mov	r1, r3
    983a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    983e:	4b04      	ldr	r3, [pc, #16]	; (9850 <_usbd_ep_set_stall+0x54>)
    9840:	4798      	blx	r3
}
    9842:	bf00      	nop
    9844:	3708      	adds	r7, #8
    9846:	46bd      	mov	sp, r7
    9848:	bd80      	pop	{r7, pc}
    984a:	bf00      	nop
    984c:	00009259 	.word	0x00009259
    9850:	000092ad 	.word	0x000092ad

00009854 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    9854:	b580      	push	{r7, lr}
    9856:	b084      	sub	sp, #16
    9858:	af00      	add	r7, sp, #0
    985a:	4603      	mov	r3, r0
    985c:	460a      	mov	r2, r1
    985e:	71fb      	strb	r3, [r7, #7]
    9860:	4613      	mov	r3, r2
    9862:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    9864:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9868:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    986a:	79fb      	ldrb	r3, [r7, #7]
    986c:	4619      	mov	r1, r3
    986e:	68f8      	ldr	r0, [r7, #12]
    9870:	4b08      	ldr	r3, [pc, #32]	; (9894 <_usbd_ep_is_stalled+0x40>)
    9872:	4798      	blx	r3
    9874:	4603      	mov	r3, r0
    9876:	4619      	mov	r1, r3
    9878:	79bb      	ldrb	r3, [r7, #6]
    987a:	2210      	movs	r2, #16
    987c:	fa02 f303 	lsl.w	r3, r2, r3
    9880:	400b      	ands	r3, r1
    9882:	2b00      	cmp	r3, #0
    9884:	bf14      	ite	ne
    9886:	2301      	movne	r3, #1
    9888:	2300      	moveq	r3, #0
    988a:	b2db      	uxtb	r3, r3
}
    988c:	4618      	mov	r0, r3
    988e:	3710      	adds	r7, #16
    9890:	46bd      	mov	sp, r7
    9892:	bd80      	pop	{r7, pc}
    9894:	00009285 	.word	0x00009285

00009898 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    9898:	b580      	push	{r7, lr}
    989a:	b084      	sub	sp, #16
    989c:	af00      	add	r7, sp, #0
    989e:	4603      	mov	r3, r0
    98a0:	460a      	mov	r2, r1
    98a2:	71fb      	strb	r3, [r7, #7]
    98a4:	4613      	mov	r3, r2
    98a6:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    98a8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    98ac:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    98ae:	79fb      	ldrb	r3, [r7, #7]
    98b0:	4619      	mov	r1, r3
    98b2:	68f8      	ldr	r0, [r7, #12]
    98b4:	4b08      	ldr	r3, [pc, #32]	; (98d8 <_usbd_ep_is_stall_sent+0x40>)
    98b6:	4798      	blx	r3
    98b8:	4603      	mov	r3, r0
    98ba:	4619      	mov	r1, r3
    98bc:	79bb      	ldrb	r3, [r7, #6]
    98be:	2220      	movs	r2, #32
    98c0:	fa02 f303 	lsl.w	r3, r2, r3
    98c4:	400b      	ands	r3, r1
    98c6:	2b00      	cmp	r3, #0
    98c8:	bf14      	ite	ne
    98ca:	2301      	movne	r3, #1
    98cc:	2300      	moveq	r3, #0
    98ce:	b2db      	uxtb	r3, r3
}
    98d0:	4618      	mov	r0, r3
    98d2:	3710      	adds	r7, #16
    98d4:	46bd      	mov	sp, r7
    98d6:	bd80      	pop	{r7, pc}
    98d8:	00009205 	.word	0x00009205

000098dc <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    98dc:	b580      	push	{r7, lr}
    98de:	b082      	sub	sp, #8
    98e0:	af00      	add	r7, sp, #0
    98e2:	4603      	mov	r3, r0
    98e4:	460a      	mov	r2, r1
    98e6:	71fb      	strb	r3, [r7, #7]
    98e8:	4613      	mov	r3, r2
    98ea:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    98ec:	79bb      	ldrb	r3, [r7, #6]
    98ee:	2220      	movs	r2, #32
    98f0:	409a      	lsls	r2, r3
    98f2:	79fb      	ldrb	r3, [r7, #7]
    98f4:	4611      	mov	r1, r2
    98f6:	4618      	mov	r0, r3
    98f8:	4b02      	ldr	r3, [pc, #8]	; (9904 <_usbd_ep_ack_stall+0x28>)
    98fa:	4798      	blx	r3
}
    98fc:	bf00      	nop
    98fe:	3708      	adds	r7, #8
    9900:	46bd      	mov	sp, r7
    9902:	bd80      	pop	{r7, pc}
    9904:	00009755 	.word	0x00009755

00009908 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    9908:	b580      	push	{r7, lr}
    990a:	b082      	sub	sp, #8
    990c:	af00      	add	r7, sp, #0
    990e:	4603      	mov	r3, r0
    9910:	71fb      	strb	r3, [r7, #7]
    9912:	460b      	mov	r3, r1
    9914:	71bb      	strb	r3, [r7, #6]
    9916:	4613      	mov	r3, r2
    9918:	717b      	strb	r3, [r7, #5]
	if (en) {
    991a:	797b      	ldrb	r3, [r7, #5]
    991c:	2b00      	cmp	r3, #0
    991e:	d008      	beq.n	9932 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9920:	79bb      	ldrb	r3, [r7, #6]
    9922:	2220      	movs	r2, #32
    9924:	409a      	lsls	r2, r3
    9926:	79fb      	ldrb	r3, [r7, #7]
    9928:	4611      	mov	r1, r2
    992a:	4618      	mov	r0, r3
    992c:	4b07      	ldr	r3, [pc, #28]	; (994c <_usbd_ep_int_stall_en+0x44>)
    992e:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    9930:	e007      	b.n	9942 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9932:	79bb      	ldrb	r3, [r7, #6]
    9934:	2220      	movs	r2, #32
    9936:	409a      	lsls	r2, r3
    9938:	79fb      	ldrb	r3, [r7, #7]
    993a:	4611      	mov	r1, r2
    993c:	4618      	mov	r0, r3
    993e:	4b04      	ldr	r3, [pc, #16]	; (9950 <_usbd_ep_int_stall_en+0x48>)
    9940:	4798      	blx	r3
}
    9942:	bf00      	nop
    9944:	3708      	adds	r7, #8
    9946:	46bd      	mov	sp, r7
    9948:	bd80      	pop	{r7, pc}
    994a:	bf00      	nop
    994c:	0000977d 	.word	0x0000977d
    9950:	000097a5 	.word	0x000097a5

00009954 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    9954:	b580      	push	{r7, lr}
    9956:	b082      	sub	sp, #8
    9958:	af00      	add	r7, sp, #0
    995a:	4603      	mov	r3, r0
    995c:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    995e:	79fb      	ldrb	r3, [r7, #7]
    9960:	4619      	mov	r1, r3
    9962:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9966:	4b03      	ldr	r3, [pc, #12]	; (9974 <_usbd_ep_stop_setup+0x20>)
    9968:	4798      	blx	r3
}
    996a:	bf00      	nop
    996c:	3708      	adds	r7, #8
    996e:	46bd      	mov	sp, r7
    9970:	bd80      	pop	{r7, pc}
    9972:	bf00      	nop
    9974:	000092d9 	.word	0x000092d9

00009978 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    9978:	b580      	push	{r7, lr}
    997a:	b082      	sub	sp, #8
    997c:	af00      	add	r7, sp, #0
    997e:	4603      	mov	r3, r0
    9980:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    9982:	79fb      	ldrb	r3, [r7, #7]
    9984:	2210      	movs	r2, #16
    9986:	4619      	mov	r1, r3
    9988:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    998c:	4b05      	ldr	r3, [pc, #20]	; (99a4 <_usbd_ep_is_setup+0x2c>)
    998e:	4798      	blx	r3
    9990:	4603      	mov	r3, r0
    9992:	2b00      	cmp	r3, #0
    9994:	bf14      	ite	ne
    9996:	2301      	movne	r3, #1
    9998:	2300      	moveq	r3, #0
    999a:	b2db      	uxtb	r3, r3
}
    999c:	4618      	mov	r0, r3
    999e:	3708      	adds	r7, #8
    99a0:	46bd      	mov	sp, r7
    99a2:	bd80      	pop	{r7, pc}
    99a4:	000091cf 	.word	0x000091cf

000099a8 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    99a8:	b580      	push	{r7, lr}
    99aa:	b082      	sub	sp, #8
    99ac:	af00      	add	r7, sp, #0
    99ae:	4603      	mov	r3, r0
    99b0:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    99b2:	79fb      	ldrb	r3, [r7, #7]
    99b4:	2110      	movs	r1, #16
    99b6:	4618      	mov	r0, r3
    99b8:	4b02      	ldr	r3, [pc, #8]	; (99c4 <_usbd_ep_ack_setup+0x1c>)
    99ba:	4798      	blx	r3
}
    99bc:	bf00      	nop
    99be:	3708      	adds	r7, #8
    99c0:	46bd      	mov	sp, r7
    99c2:	bd80      	pop	{r7, pc}
    99c4:	00009755 	.word	0x00009755

000099c8 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    99c8:	b580      	push	{r7, lr}
    99ca:	b082      	sub	sp, #8
    99cc:	af00      	add	r7, sp, #0
    99ce:	4603      	mov	r3, r0
    99d0:	71fb      	strb	r3, [r7, #7]
    99d2:	460b      	mov	r3, r1
    99d4:	71bb      	strb	r3, [r7, #6]
    99d6:	4613      	mov	r3, r2
    99d8:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    99da:	797b      	ldrb	r3, [r7, #5]
    99dc:	2b00      	cmp	r3, #0
    99de:	d00b      	beq.n	99f8 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    99e0:	79bb      	ldrb	r3, [r7, #6]
    99e2:	2201      	movs	r2, #1
    99e4:	fa02 f303 	lsl.w	r3, r2, r3
    99e8:	b2da      	uxtb	r2, r3
    99ea:	79fb      	ldrb	r3, [r7, #7]
    99ec:	4619      	mov	r1, r3
    99ee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    99f2:	4b09      	ldr	r3, [pc, #36]	; (9a18 <_usbd_ep_set_toggle+0x50>)
    99f4:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    99f6:	e00a      	b.n	9a0e <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    99f8:	79bb      	ldrb	r3, [r7, #6]
    99fa:	2201      	movs	r2, #1
    99fc:	fa02 f303 	lsl.w	r3, r2, r3
    9a00:	b2da      	uxtb	r2, r3
    9a02:	79fb      	ldrb	r3, [r7, #7]
    9a04:	4619      	mov	r1, r3
    9a06:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a0a:	4b04      	ldr	r3, [pc, #16]	; (9a1c <_usbd_ep_set_toggle+0x54>)
    9a0c:	4798      	blx	r3
}
    9a0e:	bf00      	nop
    9a10:	3708      	adds	r7, #8
    9a12:	46bd      	mov	sp, r7
    9a14:	bd80      	pop	{r7, pc}
    9a16:	bf00      	nop
    9a18:	00009259 	.word	0x00009259
    9a1c:	000092ad 	.word	0x000092ad

00009a20 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    9a20:	b580      	push	{r7, lr}
    9a22:	b082      	sub	sp, #8
    9a24:	af00      	add	r7, sp, #0
    9a26:	4603      	mov	r3, r0
    9a28:	460a      	mov	r2, r1
    9a2a:	71fb      	strb	r3, [r7, #7]
    9a2c:	4613      	mov	r3, r2
    9a2e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    9a30:	79bb      	ldrb	r3, [r7, #6]
    9a32:	2201      	movs	r2, #1
    9a34:	409a      	lsls	r2, r3
    9a36:	79fb      	ldrb	r3, [r7, #7]
    9a38:	4611      	mov	r1, r2
    9a3a:	4618      	mov	r0, r3
    9a3c:	4b02      	ldr	r3, [pc, #8]	; (9a48 <_usbd_ep_ack_io_cpt+0x28>)
    9a3e:	4798      	blx	r3
}
    9a40:	bf00      	nop
    9a42:	3708      	adds	r7, #8
    9a44:	46bd      	mov	sp, r7
    9a46:	bd80      	pop	{r7, pc}
    9a48:	00009755 	.word	0x00009755

00009a4c <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    9a4c:	b480      	push	{r7}
    9a4e:	b085      	sub	sp, #20
    9a50:	af00      	add	r7, sp, #0
    9a52:	4603      	mov	r3, r0
    9a54:	603a      	str	r2, [r7, #0]
    9a56:	71fb      	strb	r3, [r7, #7]
    9a58:	460b      	mov	r3, r1
    9a5a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9a5c:	79fa      	ldrb	r2, [r7, #7]
    9a5e:	79bb      	ldrb	r3, [r7, #6]
    9a60:	0052      	lsls	r2, r2, #1
    9a62:	4413      	add	r3, r2
    9a64:	011b      	lsls	r3, r3, #4
    9a66:	4a06      	ldr	r2, [pc, #24]	; (9a80 <_usbd_ep_set_buf+0x34>)
    9a68:	4413      	add	r3, r2
    9a6a:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    9a6c:	68fb      	ldr	r3, [r7, #12]
    9a6e:	683a      	ldr	r2, [r7, #0]
    9a70:	601a      	str	r2, [r3, #0]
}
    9a72:	bf00      	nop
    9a74:	3714      	adds	r7, #20
    9a76:	46bd      	mov	sp, r7
    9a78:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a7c:	4770      	bx	lr
    9a7e:	bf00      	nop
    9a80:	20000f30 	.word	0x20000f30

00009a84 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9a84:	b480      	push	{r7}
    9a86:	b085      	sub	sp, #20
    9a88:	af00      	add	r7, sp, #0
    9a8a:	4603      	mov	r3, r0
    9a8c:	71fb      	strb	r3, [r7, #7]
    9a8e:	460b      	mov	r3, r1
    9a90:	71bb      	strb	r3, [r7, #6]
    9a92:	4613      	mov	r3, r2
    9a94:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9a96:	79fa      	ldrb	r2, [r7, #7]
    9a98:	79bb      	ldrb	r3, [r7, #6]
    9a9a:	0052      	lsls	r2, r2, #1
    9a9c:	4413      	add	r3, r2
    9a9e:	011b      	lsls	r3, r3, #4
    9aa0:	4a08      	ldr	r2, [pc, #32]	; (9ac4 <_usbd_ep_set_in_count+0x40>)
    9aa2:	4413      	add	r3, r2
    9aa4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    9aa6:	88bb      	ldrh	r3, [r7, #4]
    9aa8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9aac:	b299      	uxth	r1, r3
    9aae:	68fa      	ldr	r2, [r7, #12]
    9ab0:	6853      	ldr	r3, [r2, #4]
    9ab2:	f361 339b 	bfi	r3, r1, #14, #14
    9ab6:	6053      	str	r3, [r2, #4]
}
    9ab8:	bf00      	nop
    9aba:	3714      	adds	r7, #20
    9abc:	46bd      	mov	sp, r7
    9abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ac2:	4770      	bx	lr
    9ac4:	20000f30 	.word	0x20000f30

00009ac8 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9ac8:	b480      	push	{r7}
    9aca:	b085      	sub	sp, #20
    9acc:	af00      	add	r7, sp, #0
    9ace:	4603      	mov	r3, r0
    9ad0:	71fb      	strb	r3, [r7, #7]
    9ad2:	460b      	mov	r3, r1
    9ad4:	71bb      	strb	r3, [r7, #6]
    9ad6:	4613      	mov	r3, r2
    9ad8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9ada:	79fa      	ldrb	r2, [r7, #7]
    9adc:	79bb      	ldrb	r3, [r7, #6]
    9ade:	0052      	lsls	r2, r2, #1
    9ae0:	4413      	add	r3, r2
    9ae2:	011b      	lsls	r3, r3, #4
    9ae4:	4a08      	ldr	r2, [pc, #32]	; (9b08 <_usbd_ep_set_in_size+0x40>)
    9ae6:	4413      	add	r3, r2
    9ae8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    9aea:	88bb      	ldrh	r3, [r7, #4]
    9aec:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9af0:	b299      	uxth	r1, r3
    9af2:	68fa      	ldr	r2, [r7, #12]
    9af4:	6853      	ldr	r3, [r2, #4]
    9af6:	f361 030d 	bfi	r3, r1, #0, #14
    9afa:	6053      	str	r3, [r2, #4]
}
    9afc:	bf00      	nop
    9afe:	3714      	adds	r7, #20
    9b00:	46bd      	mov	sp, r7
    9b02:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b06:	4770      	bx	lr
    9b08:	20000f30 	.word	0x20000f30

00009b0c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9b0c:	b480      	push	{r7}
    9b0e:	b085      	sub	sp, #20
    9b10:	af00      	add	r7, sp, #0
    9b12:	4603      	mov	r3, r0
    9b14:	71fb      	strb	r3, [r7, #7]
    9b16:	460b      	mov	r3, r1
    9b18:	71bb      	strb	r3, [r7, #6]
    9b1a:	4613      	mov	r3, r2
    9b1c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9b1e:	79fa      	ldrb	r2, [r7, #7]
    9b20:	79bb      	ldrb	r3, [r7, #6]
    9b22:	0052      	lsls	r2, r2, #1
    9b24:	4413      	add	r3, r2
    9b26:	011b      	lsls	r3, r3, #4
    9b28:	4a08      	ldr	r2, [pc, #32]	; (9b4c <_usbd_ep_set_out_count+0x40>)
    9b2a:	4413      	add	r3, r2
    9b2c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    9b2e:	88bb      	ldrh	r3, [r7, #4]
    9b30:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9b34:	b299      	uxth	r1, r3
    9b36:	68fa      	ldr	r2, [r7, #12]
    9b38:	6853      	ldr	r3, [r2, #4]
    9b3a:	f361 030d 	bfi	r3, r1, #0, #14
    9b3e:	6053      	str	r3, [r2, #4]
}
    9b40:	bf00      	nop
    9b42:	3714      	adds	r7, #20
    9b44:	46bd      	mov	sp, r7
    9b46:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b4a:	4770      	bx	lr
    9b4c:	20000f30 	.word	0x20000f30

00009b50 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9b50:	b480      	push	{r7}
    9b52:	b085      	sub	sp, #20
    9b54:	af00      	add	r7, sp, #0
    9b56:	4603      	mov	r3, r0
    9b58:	71fb      	strb	r3, [r7, #7]
    9b5a:	460b      	mov	r3, r1
    9b5c:	71bb      	strb	r3, [r7, #6]
    9b5e:	4613      	mov	r3, r2
    9b60:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9b62:	79fa      	ldrb	r2, [r7, #7]
    9b64:	79bb      	ldrb	r3, [r7, #6]
    9b66:	0052      	lsls	r2, r2, #1
    9b68:	4413      	add	r3, r2
    9b6a:	011b      	lsls	r3, r3, #4
    9b6c:	4a08      	ldr	r2, [pc, #32]	; (9b90 <_usbd_ep_set_out_size+0x40>)
    9b6e:	4413      	add	r3, r2
    9b70:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    9b72:	88bb      	ldrh	r3, [r7, #4]
    9b74:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9b78:	b299      	uxth	r1, r3
    9b7a:	68fa      	ldr	r2, [r7, #12]
    9b7c:	6853      	ldr	r3, [r2, #4]
    9b7e:	f361 339b 	bfi	r3, r1, #14, #14
    9b82:	6053      	str	r3, [r2, #4]
}
    9b84:	bf00      	nop
    9b86:	3714      	adds	r7, #20
    9b88:	46bd      	mov	sp, r7
    9b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b8e:	4770      	bx	lr
    9b90:	20000f30 	.word	0x20000f30

00009b94 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9b94:	b580      	push	{r7, lr}
    9b96:	b084      	sub	sp, #16
    9b98:	af00      	add	r7, sp, #0
    9b9a:	60ba      	str	r2, [r7, #8]
    9b9c:	607b      	str	r3, [r7, #4]
    9b9e:	4603      	mov	r3, r0
    9ba0:	73fb      	strb	r3, [r7, #15]
    9ba2:	460b      	mov	r3, r1
    9ba4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    9ba6:	68bb      	ldr	r3, [r7, #8]
    9ba8:	b29a      	uxth	r2, r3
    9baa:	7bb9      	ldrb	r1, [r7, #14]
    9bac:	7bfb      	ldrb	r3, [r7, #15]
    9bae:	4618      	mov	r0, r3
    9bb0:	4b06      	ldr	r3, [pc, #24]	; (9bcc <_usbd_ep_set_in_trans+0x38>)
    9bb2:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    9bb4:	687b      	ldr	r3, [r7, #4]
    9bb6:	b29a      	uxth	r2, r3
    9bb8:	7bb9      	ldrb	r1, [r7, #14]
    9bba:	7bfb      	ldrb	r3, [r7, #15]
    9bbc:	4618      	mov	r0, r3
    9bbe:	4b04      	ldr	r3, [pc, #16]	; (9bd0 <_usbd_ep_set_in_trans+0x3c>)
    9bc0:	4798      	blx	r3
}
    9bc2:	bf00      	nop
    9bc4:	3710      	adds	r7, #16
    9bc6:	46bd      	mov	sp, r7
    9bc8:	bd80      	pop	{r7, pc}
    9bca:	bf00      	nop
    9bcc:	00009ac9 	.word	0x00009ac9
    9bd0:	00009a85 	.word	0x00009a85

00009bd4 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9bd4:	b580      	push	{r7, lr}
    9bd6:	b084      	sub	sp, #16
    9bd8:	af00      	add	r7, sp, #0
    9bda:	60ba      	str	r2, [r7, #8]
    9bdc:	607b      	str	r3, [r7, #4]
    9bde:	4603      	mov	r3, r0
    9be0:	73fb      	strb	r3, [r7, #15]
    9be2:	460b      	mov	r3, r1
    9be4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    9be6:	68bb      	ldr	r3, [r7, #8]
    9be8:	b29a      	uxth	r2, r3
    9bea:	7bb9      	ldrb	r1, [r7, #14]
    9bec:	7bfb      	ldrb	r3, [r7, #15]
    9bee:	4618      	mov	r0, r3
    9bf0:	4b06      	ldr	r3, [pc, #24]	; (9c0c <_usbd_ep_set_out_trans+0x38>)
    9bf2:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    9bf4:	687b      	ldr	r3, [r7, #4]
    9bf6:	b29a      	uxth	r2, r3
    9bf8:	7bb9      	ldrb	r1, [r7, #14]
    9bfa:	7bfb      	ldrb	r3, [r7, #15]
    9bfc:	4618      	mov	r0, r3
    9bfe:	4b04      	ldr	r3, [pc, #16]	; (9c10 <_usbd_ep_set_out_trans+0x3c>)
    9c00:	4798      	blx	r3
}
    9c02:	bf00      	nop
    9c04:	3710      	adds	r7, #16
    9c06:	46bd      	mov	sp, r7
    9c08:	bd80      	pop	{r7, pc}
    9c0a:	bf00      	nop
    9c0c:	00009b51 	.word	0x00009b51
    9c10:	00009b0d 	.word	0x00009b0d

00009c14 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    9c14:	b480      	push	{r7}
    9c16:	b085      	sub	sp, #20
    9c18:	af00      	add	r7, sp, #0
    9c1a:	4603      	mov	r3, r0
    9c1c:	460a      	mov	r2, r1
    9c1e:	71fb      	strb	r3, [r7, #7]
    9c20:	4613      	mov	r3, r2
    9c22:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9c24:	79fa      	ldrb	r2, [r7, #7]
    9c26:	79bb      	ldrb	r3, [r7, #6]
    9c28:	0052      	lsls	r2, r2, #1
    9c2a:	4413      	add	r3, r2
    9c2c:	011b      	lsls	r3, r3, #4
    9c2e:	4a06      	ldr	r2, [pc, #24]	; (9c48 <_usbd_ep_clear_bank_status+0x34>)
    9c30:	4413      	add	r3, r2
    9c32:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    9c34:	68fb      	ldr	r3, [r7, #12]
    9c36:	2200      	movs	r2, #0
    9c38:	729a      	strb	r2, [r3, #10]
}
    9c3a:	bf00      	nop
    9c3c:	3714      	adds	r7, #20
    9c3e:	46bd      	mov	sp, r7
    9c40:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c44:	4770      	bx	lr
    9c46:	bf00      	nop
    9c48:	20000f30 	.word	0x20000f30

00009c4c <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9c4c:	b580      	push	{r7, lr}
    9c4e:	b082      	sub	sp, #8
    9c50:	af00      	add	r7, sp, #0
    9c52:	4603      	mov	r3, r0
    9c54:	71fb      	strb	r3, [r7, #7]
    9c56:	460b      	mov	r3, r1
    9c58:	71bb      	strb	r3, [r7, #6]
    9c5a:	4613      	mov	r3, r2
    9c5c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9c5e:	797b      	ldrb	r3, [r7, #5]
    9c60:	2b00      	cmp	r3, #0
    9c62:	d00b      	beq.n	9c7c <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9c64:	79bb      	ldrb	r3, [r7, #6]
    9c66:	2240      	movs	r2, #64	; 0x40
    9c68:	fa02 f303 	lsl.w	r3, r2, r3
    9c6c:	b2da      	uxtb	r2, r3
    9c6e:	79fb      	ldrb	r3, [r7, #7]
    9c70:	4619      	mov	r1, r3
    9c72:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c76:	4b09      	ldr	r3, [pc, #36]	; (9c9c <_usbd_ep_set_in_rdy+0x50>)
    9c78:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9c7a:	e00a      	b.n	9c92 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9c7c:	79bb      	ldrb	r3, [r7, #6]
    9c7e:	2240      	movs	r2, #64	; 0x40
    9c80:	fa02 f303 	lsl.w	r3, r2, r3
    9c84:	b2da      	uxtb	r2, r3
    9c86:	79fb      	ldrb	r3, [r7, #7]
    9c88:	4619      	mov	r1, r3
    9c8a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c8e:	4b04      	ldr	r3, [pc, #16]	; (9ca0 <_usbd_ep_set_in_rdy+0x54>)
    9c90:	4798      	blx	r3
}
    9c92:	bf00      	nop
    9c94:	3708      	adds	r7, #8
    9c96:	46bd      	mov	sp, r7
    9c98:	bd80      	pop	{r7, pc}
    9c9a:	bf00      	nop
    9c9c:	00009259 	.word	0x00009259
    9ca0:	000092ad 	.word	0x000092ad

00009ca4 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9ca4:	b580      	push	{r7, lr}
    9ca6:	b082      	sub	sp, #8
    9ca8:	af00      	add	r7, sp, #0
    9caa:	4603      	mov	r3, r0
    9cac:	71fb      	strb	r3, [r7, #7]
    9cae:	460b      	mov	r3, r1
    9cb0:	71bb      	strb	r3, [r7, #6]
    9cb2:	4613      	mov	r3, r2
    9cb4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9cb6:	797b      	ldrb	r3, [r7, #5]
    9cb8:	2b00      	cmp	r3, #0
    9cba:	d00b      	beq.n	9cd4 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9cbc:	79bb      	ldrb	r3, [r7, #6]
    9cbe:	2240      	movs	r2, #64	; 0x40
    9cc0:	fa02 f303 	lsl.w	r3, r2, r3
    9cc4:	b2da      	uxtb	r2, r3
    9cc6:	79fb      	ldrb	r3, [r7, #7]
    9cc8:	4619      	mov	r1, r3
    9cca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9cce:	4b09      	ldr	r3, [pc, #36]	; (9cf4 <_usbd_ep_set_out_rdy+0x50>)
    9cd0:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9cd2:	e00a      	b.n	9cea <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9cd4:	79bb      	ldrb	r3, [r7, #6]
    9cd6:	2240      	movs	r2, #64	; 0x40
    9cd8:	fa02 f303 	lsl.w	r3, r2, r3
    9cdc:	b2da      	uxtb	r2, r3
    9cde:	79fb      	ldrb	r3, [r7, #7]
    9ce0:	4619      	mov	r1, r3
    9ce2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ce6:	4b04      	ldr	r3, [pc, #16]	; (9cf8 <_usbd_ep_set_out_rdy+0x54>)
    9ce8:	4798      	blx	r3
}
    9cea:	bf00      	nop
    9cec:	3708      	adds	r7, #8
    9cee:	46bd      	mov	sp, r7
    9cf0:	bd80      	pop	{r7, pc}
    9cf2:	bf00      	nop
    9cf4:	000092ad 	.word	0x000092ad
    9cf8:	00009259 	.word	0x00009259

00009cfc <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9cfc:	b480      	push	{r7}
    9cfe:	b083      	sub	sp, #12
    9d00:	af00      	add	r7, sp, #0
    9d02:	4603      	mov	r3, r0
    9d04:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9d06:	88fb      	ldrh	r3, [r7, #6]
    9d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9d0c:	d820      	bhi.n	9d50 <_usbd_ep_pcksize_size+0x54>
    9d0e:	88fb      	ldrh	r3, [r7, #6]
    9d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9d14:	d81a      	bhi.n	9d4c <_usbd_ep_pcksize_size+0x50>
    9d16:	88fb      	ldrh	r3, [r7, #6]
    9d18:	2b80      	cmp	r3, #128	; 0x80
    9d1a:	d815      	bhi.n	9d48 <_usbd_ep_pcksize_size+0x4c>
    9d1c:	88fb      	ldrh	r3, [r7, #6]
    9d1e:	2b40      	cmp	r3, #64	; 0x40
    9d20:	d810      	bhi.n	9d44 <_usbd_ep_pcksize_size+0x48>
    9d22:	88fb      	ldrh	r3, [r7, #6]
    9d24:	2b20      	cmp	r3, #32
    9d26:	d80b      	bhi.n	9d40 <_usbd_ep_pcksize_size+0x44>
    9d28:	88fb      	ldrh	r3, [r7, #6]
    9d2a:	2b10      	cmp	r3, #16
    9d2c:	d806      	bhi.n	9d3c <_usbd_ep_pcksize_size+0x40>
    9d2e:	88fb      	ldrh	r3, [r7, #6]
    9d30:	2b08      	cmp	r3, #8
    9d32:	bf8c      	ite	hi
    9d34:	2301      	movhi	r3, #1
    9d36:	2300      	movls	r3, #0
    9d38:	b2db      	uxtb	r3, r3
    9d3a:	e00a      	b.n	9d52 <_usbd_ep_pcksize_size+0x56>
    9d3c:	2302      	movs	r3, #2
    9d3e:	e008      	b.n	9d52 <_usbd_ep_pcksize_size+0x56>
    9d40:	2303      	movs	r3, #3
    9d42:	e006      	b.n	9d52 <_usbd_ep_pcksize_size+0x56>
    9d44:	2304      	movs	r3, #4
    9d46:	e004      	b.n	9d52 <_usbd_ep_pcksize_size+0x56>
    9d48:	2305      	movs	r3, #5
    9d4a:	e002      	b.n	9d52 <_usbd_ep_pcksize_size+0x56>
    9d4c:	2306      	movs	r3, #6
    9d4e:	e000      	b.n	9d52 <_usbd_ep_pcksize_size+0x56>
    9d50:	2307      	movs	r3, #7
}
    9d52:	4618      	mov	r0, r3
    9d54:	370c      	adds	r7, #12
    9d56:	46bd      	mov	sp, r7
    9d58:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d5c:	4770      	bx	lr
	...

00009d60 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9d60:	b480      	push	{r7}
    9d62:	b085      	sub	sp, #20
    9d64:	af00      	add	r7, sp, #0
    9d66:	4603      	mov	r3, r0
    9d68:	460a      	mov	r2, r1
    9d6a:	71fb      	strb	r3, [r7, #7]
    9d6c:	4613      	mov	r3, r2
    9d6e:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9d70:	79fb      	ldrb	r3, [r7, #7]
    9d72:	2b00      	cmp	r3, #0
    9d74:	d008      	beq.n	9d88 <_usb_d_dev_ept+0x28>
    9d76:	79bb      	ldrb	r3, [r7, #6]
    9d78:	2b00      	cmp	r3, #0
    9d7a:	d003      	beq.n	9d84 <_usb_d_dev_ept+0x24>
    9d7c:	79fb      	ldrb	r3, [r7, #7]
    9d7e:	3304      	adds	r3, #4
    9d80:	b2db      	uxtb	r3, r3
    9d82:	e002      	b.n	9d8a <_usb_d_dev_ept+0x2a>
    9d84:	79fb      	ldrb	r3, [r7, #7]
    9d86:	e000      	b.n	9d8a <_usb_d_dev_ept+0x2a>
    9d88:	2300      	movs	r3, #0
    9d8a:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    9d8c:	7bfa      	ldrb	r2, [r7, #15]
    9d8e:	4613      	mov	r3, r2
    9d90:	009b      	lsls	r3, r3, #2
    9d92:	4413      	add	r3, r2
    9d94:	009b      	lsls	r3, r3, #2
    9d96:	3310      	adds	r3, #16
    9d98:	4a04      	ldr	r2, [pc, #16]	; (9dac <_usb_d_dev_ept+0x4c>)
    9d9a:	4413      	add	r3, r2
    9d9c:	3304      	adds	r3, #4
}
    9d9e:	4618      	mov	r0, r3
    9da0:	3714      	adds	r7, #20
    9da2:	46bd      	mov	sp, r7
    9da4:	f85d 7b04 	ldr.w	r7, [sp], #4
    9da8:	4770      	bx	lr
    9daa:	bf00      	nop
    9dac:	20000e68 	.word	0x20000e68

00009db0 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    9db0:	b580      	push	{r7, lr}
    9db2:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    9db4:	2104      	movs	r1, #4
    9db6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9dba:	4b03      	ldr	r3, [pc, #12]	; (9dc8 <_usb_d_dev_sof+0x18>)
    9dbc:	4798      	blx	r3
	dev_inst.callbacks.sof();
    9dbe:	4b03      	ldr	r3, [pc, #12]	; (9dcc <_usb_d_dev_sof+0x1c>)
    9dc0:	681b      	ldr	r3, [r3, #0]
    9dc2:	4798      	blx	r3
}
    9dc4:	bf00      	nop
    9dc6:	bd80      	pop	{r7, pc}
    9dc8:	00009427 	.word	0x00009427
    9dcc:	20000e68 	.word	0x20000e68

00009dd0 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    9dd0:	b580      	push	{r7, lr}
    9dd2:	b084      	sub	sp, #16
    9dd4:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    9dd6:	2300      	movs	r3, #0
    9dd8:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9dda:	f240 2101 	movw	r1, #513	; 0x201
    9dde:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9de2:	4b1a      	ldr	r3, [pc, #104]	; (9e4c <_usb_d_dev_lpmsusp+0x7c>)
    9de4:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9de6:	f240 2101 	movw	r1, #513	; 0x201
    9dea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9dee:	4b18      	ldr	r3, [pc, #96]	; (9e50 <_usb_d_dev_lpmsusp+0x80>)
    9df0:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9df2:	2170      	movs	r1, #112	; 0x70
    9df4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9df8:	4b16      	ldr	r3, [pc, #88]	; (9e54 <_usb_d_dev_lpmsusp+0x84>)
    9dfa:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9dfc:	2300      	movs	r3, #0
    9dfe:	73fb      	strb	r3, [r7, #15]
    9e00:	e018      	b.n	9e34 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9e02:	7bfb      	ldrb	r3, [r7, #15]
    9e04:	015b      	lsls	r3, r3, #5
    9e06:	4a14      	ldr	r2, [pc, #80]	; (9e58 <_usb_d_dev_lpmsusp+0x88>)
    9e08:	4413      	add	r3, r2
    9e0a:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9e0c:	687b      	ldr	r3, [r7, #4]
    9e0e:	891b      	ldrh	r3, [r3, #8]
    9e10:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9e14:	b2db      	uxtb	r3, r3
    9e16:	2b03      	cmp	r3, #3
    9e18:	d109      	bne.n	9e2e <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9e1a:	687b      	ldr	r3, [r7, #4]
    9e1c:	891b      	ldrh	r3, [r3, #8]
    9e1e:	f3c3 130a 	ubfx	r3, r3, #4, #11
    9e22:	b29b      	uxth	r3, r3
    9e24:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    9e26:	687b      	ldr	r3, [r7, #4]
    9e28:	2200      	movs	r2, #0
    9e2a:	811a      	strh	r2, [r3, #8]
			break;
    9e2c:	e005      	b.n	9e3a <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9e2e:	7bfb      	ldrb	r3, [r7, #15]
    9e30:	3301      	adds	r3, #1
    9e32:	73fb      	strb	r3, [r7, #15]
    9e34:	7bfb      	ldrb	r3, [r7, #15]
    9e36:	2b03      	cmp	r3, #3
    9e38:	d9e3      	bls.n	9e02 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9e3a:	4b08      	ldr	r3, [pc, #32]	; (9e5c <_usb_d_dev_lpmsusp+0x8c>)
    9e3c:	685b      	ldr	r3, [r3, #4]
    9e3e:	68b9      	ldr	r1, [r7, #8]
    9e40:	2003      	movs	r0, #3
    9e42:	4798      	blx	r3
}
    9e44:	bf00      	nop
    9e46:	3710      	adds	r7, #16
    9e48:	46bd      	mov	sp, r7
    9e4a:	bd80      	pop	{r7, pc}
    9e4c:	00009427 	.word	0x00009427
    9e50:	0000947d 	.word	0x0000947d
    9e54:	00009445 	.word	0x00009445
    9e58:	20000f30 	.word	0x20000f30
    9e5c:	20000e68 	.word	0x20000e68

00009e60 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9e60:	b580      	push	{r7, lr}
    9e62:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    9e64:	2180      	movs	r1, #128	; 0x80
    9e66:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9e6a:	4b04      	ldr	r3, [pc, #16]	; (9e7c <_usb_d_dev_ramerr+0x1c>)
    9e6c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    9e6e:	4b04      	ldr	r3, [pc, #16]	; (9e80 <_usb_d_dev_ramerr+0x20>)
    9e70:	685b      	ldr	r3, [r3, #4]
    9e72:	2100      	movs	r1, #0
    9e74:	2005      	movs	r0, #5
    9e76:	4798      	blx	r3
}
    9e78:	bf00      	nop
    9e7a:	bd80      	pop	{r7, pc}
    9e7c:	00009427 	.word	0x00009427
    9e80:	20000e68 	.word	0x20000e68

00009e84 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    9e84:	b580      	push	{r7, lr}
    9e86:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9e88:	2170      	movs	r1, #112	; 0x70
    9e8a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9e8e:	4b0b      	ldr	r3, [pc, #44]	; (9ebc <_usb_d_dev_wakeup+0x38>)
    9e90:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9e92:	2170      	movs	r1, #112	; 0x70
    9e94:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9e98:	4b09      	ldr	r3, [pc, #36]	; (9ec0 <_usb_d_dev_wakeup+0x3c>)
    9e9a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9e9c:	f240 2101 	movw	r1, #513	; 0x201
    9ea0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ea4:	4b07      	ldr	r3, [pc, #28]	; (9ec4 <_usb_d_dev_wakeup+0x40>)
    9ea6:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    9ea8:	2000      	movs	r0, #0
    9eaa:	4b07      	ldr	r3, [pc, #28]	; (9ec8 <_usb_d_dev_wakeup+0x44>)
    9eac:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    9eae:	4b07      	ldr	r3, [pc, #28]	; (9ecc <_usb_d_dev_wakeup+0x48>)
    9eb0:	685b      	ldr	r3, [r3, #4]
    9eb2:	2100      	movs	r1, #0
    9eb4:	2002      	movs	r0, #2
    9eb6:	4798      	blx	r3
}
    9eb8:	bf00      	nop
    9eba:	bd80      	pop	{r7, pc}
    9ebc:	00009427 	.word	0x00009427
    9ec0:	0000947d 	.word	0x0000947d
    9ec4:	00009445 	.word	0x00009445
    9ec8:	00009725 	.word	0x00009725
    9ecc:	20000e68 	.word	0x20000e68

00009ed0 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    9ed0:	b580      	push	{r7, lr}
    9ed2:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    9ed4:	2200      	movs	r2, #0
    9ed6:	2100      	movs	r1, #0
    9ed8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9edc:	4b0d      	ldr	r3, [pc, #52]	; (9f14 <_usb_d_dev_reset+0x44>)
    9ede:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    9ee0:	2108      	movs	r1, #8
    9ee2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ee6:	4b0c      	ldr	r3, [pc, #48]	; (9f18 <_usb_d_dev_reset+0x48>)
    9ee8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9eea:	2170      	movs	r1, #112	; 0x70
    9eec:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ef0:	4b0a      	ldr	r3, [pc, #40]	; (9f1c <_usb_d_dev_reset+0x4c>)
    9ef2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9ef4:	f240 2101 	movw	r1, #513	; 0x201
    9ef8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9efc:	4b08      	ldr	r3, [pc, #32]	; (9f20 <_usb_d_dev_reset+0x50>)
    9efe:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9f00:	4b08      	ldr	r3, [pc, #32]	; (9f24 <_usb_d_dev_reset+0x54>)
    9f02:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9f04:	4b08      	ldr	r3, [pc, #32]	; (9f28 <_usb_d_dev_reset+0x58>)
    9f06:	685b      	ldr	r3, [r3, #4]
    9f08:	2100      	movs	r1, #0
    9f0a:	2001      	movs	r0, #1
    9f0c:	4798      	blx	r3
}
    9f0e:	bf00      	nop
    9f10:	bd80      	pop	{r7, pc}
    9f12:	bf00      	nop
    9f14:	000093bd 	.word	0x000093bd
    9f18:	00009427 	.word	0x00009427
    9f1c:	0000947d 	.word	0x0000947d
    9f20:	00009445 	.word	0x00009445
    9f24:	0000aa8d 	.word	0x0000aa8d
    9f28:	20000e68 	.word	0x20000e68

00009f2c <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    9f2c:	b580      	push	{r7, lr}
    9f2e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9f30:	f240 2101 	movw	r1, #513	; 0x201
    9f34:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f38:	4b09      	ldr	r3, [pc, #36]	; (9f60 <_usb_d_dev_suspend+0x34>)
    9f3a:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9f3c:	f240 2101 	movw	r1, #513	; 0x201
    9f40:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f44:	4b07      	ldr	r3, [pc, #28]	; (9f64 <_usb_d_dev_suspend+0x38>)
    9f46:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9f48:	2170      	movs	r1, #112	; 0x70
    9f4a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f4e:	4b06      	ldr	r3, [pc, #24]	; (9f68 <_usb_d_dev_suspend+0x3c>)
    9f50:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    9f52:	4b06      	ldr	r3, [pc, #24]	; (9f6c <_usb_d_dev_suspend+0x40>)
    9f54:	685b      	ldr	r3, [r3, #4]
    9f56:	2100      	movs	r1, #0
    9f58:	2004      	movs	r0, #4
    9f5a:	4798      	blx	r3
}
    9f5c:	bf00      	nop
    9f5e:	bd80      	pop	{r7, pc}
    9f60:	00009427 	.word	0x00009427
    9f64:	0000947d 	.word	0x0000947d
    9f68:	00009445 	.word	0x00009445
    9f6c:	20000e68 	.word	0x20000e68

00009f70 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    9f70:	b580      	push	{r7, lr}
    9f72:	b082      	sub	sp, #8
    9f74:	af00      	add	r7, sp, #0
	bool     rc    = true;
    9f76:	2301      	movs	r3, #1
    9f78:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    9f7a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f7e:	4b22      	ldr	r3, [pc, #136]	; (a008 <_usb_d_dev_handle_nep+0x98>)
    9f80:	4798      	blx	r3
    9f82:	4603      	mov	r3, r0
    9f84:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    9f86:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f8a:	4b20      	ldr	r3, [pc, #128]	; (a00c <_usb_d_dev_handle_nep+0x9c>)
    9f8c:	4798      	blx	r3
    9f8e:	4603      	mov	r3, r0
    9f90:	461a      	mov	r2, r3
    9f92:	88bb      	ldrh	r3, [r7, #4]
    9f94:	4013      	ands	r3, r2
    9f96:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    9f98:	88bb      	ldrh	r3, [r7, #4]
    9f9a:	f003 0304 	and.w	r3, r3, #4
    9f9e:	2b00      	cmp	r3, #0
    9fa0:	d003      	beq.n	9faa <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    9fa2:	4b1b      	ldr	r3, [pc, #108]	; (a010 <_usb_d_dev_handle_nep+0xa0>)
    9fa4:	4798      	blx	r3
		return true;
    9fa6:	2301      	movs	r3, #1
    9fa8:	e02a      	b.n	a000 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    9faa:	88bb      	ldrh	r3, [r7, #4]
    9fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9fb0:	2b00      	cmp	r3, #0
    9fb2:	d002      	beq.n	9fba <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    9fb4:	4b17      	ldr	r3, [pc, #92]	; (a014 <_usb_d_dev_handle_nep+0xa4>)
    9fb6:	4798      	blx	r3
    9fb8:	e021      	b.n	9ffe <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    9fba:	88bb      	ldrh	r3, [r7, #4]
    9fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9fc0:	2b00      	cmp	r3, #0
    9fc2:	d002      	beq.n	9fca <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    9fc4:	4b14      	ldr	r3, [pc, #80]	; (a018 <_usb_d_dev_handle_nep+0xa8>)
    9fc6:	4798      	blx	r3
    9fc8:	e019      	b.n	9ffe <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    9fca:	88bb      	ldrh	r3, [r7, #4]
    9fcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9fd0:	2b00      	cmp	r3, #0
    9fd2:	d002      	beq.n	9fda <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    9fd4:	4b11      	ldr	r3, [pc, #68]	; (a01c <_usb_d_dev_handle_nep+0xac>)
    9fd6:	4798      	blx	r3
    9fd8:	e011      	b.n	9ffe <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    9fda:	88bb      	ldrh	r3, [r7, #4]
    9fdc:	f003 0308 	and.w	r3, r3, #8
    9fe0:	2b00      	cmp	r3, #0
    9fe2:	d002      	beq.n	9fea <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    9fe4:	4b0e      	ldr	r3, [pc, #56]	; (a020 <_usb_d_dev_handle_nep+0xb0>)
    9fe6:	4798      	blx	r3
    9fe8:	e009      	b.n	9ffe <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    9fea:	88bb      	ldrh	r3, [r7, #4]
    9fec:	f003 0301 	and.w	r3, r3, #1
    9ff0:	2b00      	cmp	r3, #0
    9ff2:	d002      	beq.n	9ffa <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    9ff4:	4b0b      	ldr	r3, [pc, #44]	; (a024 <_usb_d_dev_handle_nep+0xb4>)
    9ff6:	4798      	blx	r3
    9ff8:	e001      	b.n	9ffe <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    9ffa:	2300      	movs	r3, #0
    9ffc:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    9ffe:	79fb      	ldrb	r3, [r7, #7]
}
    a000:	4618      	mov	r0, r3
    a002:	3708      	adds	r7, #8
    a004:	46bd      	mov	sp, r7
    a006:	bd80      	pop	{r7, pc}
    a008:	0000940d 	.word	0x0000940d
    a00c:	00009463 	.word	0x00009463
    a010:	00009db1 	.word	0x00009db1
    a014:	00009dd1 	.word	0x00009dd1
    a018:	00009e61 	.word	0x00009e61
    a01c:	00009e85 	.word	0x00009e85
    a020:	00009ed1 	.word	0x00009ed1
    a024:	00009f2d 	.word	0x00009f2d

0000a028 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    a028:	b590      	push	{r4, r7, lr}
    a02a:	b089      	sub	sp, #36	; 0x24
    a02c:	af00      	add	r7, sp, #0
    a02e:	6078      	str	r0, [r7, #4]
    a030:	460b      	mov	r3, r1
    a032:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    a034:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a038:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    a03a:	687b      	ldr	r3, [r7, #4]
    a03c:	7c9b      	ldrb	r3, [r3, #18]
    a03e:	f003 030f 	and.w	r3, r3, #15
    a042:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    a044:	7dfb      	ldrb	r3, [r7, #23]
    a046:	015b      	lsls	r3, r3, #5
    a048:	4a73      	ldr	r2, [pc, #460]	; (a218 <_usb_d_dev_in_next+0x1f0>)
    a04a:	4413      	add	r3, r2
    a04c:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    a04e:	78fb      	ldrb	r3, [r7, #3]
    a050:	2b00      	cmp	r3, #0
    a052:	d006      	beq.n	a062 <_usb_d_dev_in_next+0x3a>
    a054:	693b      	ldr	r3, [r7, #16]
    a056:	3310      	adds	r3, #16
    a058:	685b      	ldr	r3, [r3, #4]
    a05a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a05e:	b29b      	uxth	r3, r3
    a060:	e000      	b.n	a064 <_usb_d_dev_in_next+0x3c>
    a062:	2300      	movs	r3, #0
    a064:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    a066:	687b      	ldr	r3, [r7, #4]
    a068:	8a1b      	ldrh	r3, [r3, #16]
    a06a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a06e:	4293      	cmp	r3, r2
    a070:	d103      	bne.n	a07a <_usb_d_dev_in_next+0x52>
    a072:	687b      	ldr	r3, [r7, #4]
    a074:	8a1b      	ldrh	r3, [r3, #16]
    a076:	b21b      	sxth	r3, r3
    a078:	e004      	b.n	a084 <_usb_d_dev_in_next+0x5c>
    a07a:	687b      	ldr	r3, [r7, #4]
    a07c:	8a1b      	ldrh	r3, [r3, #16]
    a07e:	3b01      	subs	r3, #1
    a080:	b29b      	uxth	r3, r3
    a082:	b21b      	sxth	r3, r3
    a084:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    a088:	4013      	ands	r3, r2
    a08a:	b21b      	sxth	r3, r3
    a08c:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    a08e:	2300      	movs	r3, #0
    a090:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    a092:	687b      	ldr	r3, [r7, #4]
    a094:	7cdb      	ldrb	r3, [r3, #19]
    a096:	f003 0307 	and.w	r3, r3, #7
    a09a:	b2db      	uxtb	r3, r3
    a09c:	2b01      	cmp	r3, #1
    a09e:	bf0c      	ite	eq
    a0a0:	2301      	moveq	r3, #1
    a0a2:	2300      	movne	r3, #0
    a0a4:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    a0a6:	78fb      	ldrb	r3, [r7, #3]
    a0a8:	2b00      	cmp	r3, #0
    a0aa:	d004      	beq.n	a0b6 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    a0ac:	7dfb      	ldrb	r3, [r7, #23]
    a0ae:	2101      	movs	r1, #1
    a0b0:	4618      	mov	r0, r3
    a0b2:	4b5a      	ldr	r3, [pc, #360]	; (a21c <_usb_d_dev_in_next+0x1f4>)
    a0b4:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    a0b6:	687b      	ldr	r3, [r7, #4]
    a0b8:	689a      	ldr	r2, [r3, #8]
    a0ba:	89fb      	ldrh	r3, [r7, #14]
    a0bc:	441a      	add	r2, r3
    a0be:	687b      	ldr	r3, [r7, #4]
    a0c0:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    a0c2:	687b      	ldr	r3, [r7, #4]
    a0c4:	689a      	ldr	r2, [r3, #8]
    a0c6:	687b      	ldr	r3, [r7, #4]
    a0c8:	685b      	ldr	r3, [r3, #4]
    a0ca:	429a      	cmp	r2, r3
    a0cc:	d243      	bcs.n	a156 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    a0ce:	687b      	ldr	r3, [r7, #4]
    a0d0:	685b      	ldr	r3, [r3, #4]
    a0d2:	b29a      	uxth	r2, r3
    a0d4:	687b      	ldr	r3, [r7, #4]
    a0d6:	689b      	ldr	r3, [r3, #8]
    a0d8:	b29b      	uxth	r3, r3
    a0da:	1ad3      	subs	r3, r2, r3
    a0dc:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    a0de:	687b      	ldr	r3, [r7, #4]
    a0e0:	7cdb      	ldrb	r3, [r3, #19]
    a0e2:	f003 0320 	and.w	r3, r3, #32
    a0e6:	b2db      	uxtb	r3, r3
    a0e8:	2b00      	cmp	r3, #0
    a0ea:	d01b      	beq.n	a124 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    a0ec:	687b      	ldr	r3, [r7, #4]
    a0ee:	8a1b      	ldrh	r3, [r3, #16]
    a0f0:	8bfa      	ldrh	r2, [r7, #30]
    a0f2:	429a      	cmp	r2, r3
    a0f4:	d902      	bls.n	a0fc <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    a0f6:	687b      	ldr	r3, [r7, #4]
    a0f8:	8a1b      	ldrh	r3, [r3, #16]
    a0fa:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    a0fc:	687b      	ldr	r3, [r7, #4]
    a0fe:	68d8      	ldr	r0, [r3, #12]
    a100:	687b      	ldr	r3, [r7, #4]
    a102:	681a      	ldr	r2, [r3, #0]
    a104:	687b      	ldr	r3, [r7, #4]
    a106:	689b      	ldr	r3, [r3, #8]
    a108:	4413      	add	r3, r2
    a10a:	8bfa      	ldrh	r2, [r7, #30]
    a10c:	4619      	mov	r1, r3
    a10e:	4b44      	ldr	r3, [pc, #272]	; (a220 <_usb_d_dev_in_next+0x1f8>)
    a110:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    a112:	687b      	ldr	r3, [r7, #4]
    a114:	68db      	ldr	r3, [r3, #12]
    a116:	461a      	mov	r2, r3
    a118:	7dfb      	ldrb	r3, [r7, #23]
    a11a:	2101      	movs	r1, #1
    a11c:	4618      	mov	r0, r3
    a11e:	4b41      	ldr	r3, [pc, #260]	; (a224 <_usb_d_dev_in_next+0x1fc>)
    a120:	4798      	blx	r3
    a122:	e011      	b.n	a148 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    a124:	8bfb      	ldrh	r3, [r7, #30]
    a126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    a12a:	d902      	bls.n	a132 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    a12c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a130:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a132:	687b      	ldr	r3, [r7, #4]
    a134:	681a      	ldr	r2, [r3, #0]
    a136:	687b      	ldr	r3, [r7, #4]
    a138:	689b      	ldr	r3, [r3, #8]
    a13a:	4413      	add	r3, r2
    a13c:	461a      	mov	r2, r3
    a13e:	7dfb      	ldrb	r3, [r7, #23]
    a140:	2101      	movs	r1, #1
    a142:	4618      	mov	r0, r3
    a144:	4b37      	ldr	r3, [pc, #220]	; (a224 <_usb_d_dev_in_next+0x1fc>)
    a146:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    a148:	8bfa      	ldrh	r2, [r7, #30]
    a14a:	7df8      	ldrb	r0, [r7, #23]
    a14c:	2300      	movs	r3, #0
    a14e:	2101      	movs	r1, #1
    a150:	4c35      	ldr	r4, [pc, #212]	; (a228 <_usb_d_dev_in_next+0x200>)
    a152:	47a0      	blx	r4
		goto _in_tx_exec;
    a154:	e041      	b.n	a1da <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    a156:	687b      	ldr	r3, [r7, #4]
    a158:	7cdb      	ldrb	r3, [r3, #19]
    a15a:	f003 0310 	and.w	r3, r3, #16
    a15e:	b2db      	uxtb	r3, r3
    a160:	2b00      	cmp	r3, #0
    a162:	d00b      	beq.n	a17c <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    a164:	687a      	ldr	r2, [r7, #4]
    a166:	7cd3      	ldrb	r3, [r2, #19]
    a168:	f36f 1304 	bfc	r3, #4, #1
    a16c:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    a16e:	7df8      	ldrb	r0, [r7, #23]
    a170:	2300      	movs	r3, #0
    a172:	2200      	movs	r2, #0
    a174:	2101      	movs	r1, #1
    a176:	4c2c      	ldr	r4, [pc, #176]	; (a228 <_usb_d_dev_in_next+0x200>)
    a178:	47a0      	blx	r4
		goto _in_tx_exec;
    a17a:	e02e      	b.n	a1da <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    a17c:	7afb      	ldrb	r3, [r7, #11]
    a17e:	2b00      	cmp	r3, #0
    a180:	d006      	beq.n	a190 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    a182:	7dfb      	ldrb	r3, [r7, #23]
    a184:	224b      	movs	r2, #75	; 0x4b
    a186:	4619      	mov	r1, r3
    a188:	69b8      	ldr	r0, [r7, #24]
    a18a:	4b28      	ldr	r3, [pc, #160]	; (a22c <_usb_d_dev_in_next+0x204>)
    a18c:	4798      	blx	r3
    a18e:	e005      	b.n	a19c <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    a190:	7dfb      	ldrb	r3, [r7, #23]
    a192:	224a      	movs	r2, #74	; 0x4a
    a194:	4619      	mov	r1, r3
    a196:	69b8      	ldr	r0, [r7, #24]
    a198:	4b24      	ldr	r3, [pc, #144]	; (a22c <_usb_d_dev_in_next+0x204>)
    a19a:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    a19c:	687b      	ldr	r3, [r7, #4]
    a19e:	8a1b      	ldrh	r3, [r3, #16]
    a1a0:	89ba      	ldrh	r2, [r7, #12]
    a1a2:	429a      	cmp	r2, r3
    a1a4:	d114      	bne.n	a1d0 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    a1a6:	687a      	ldr	r2, [r7, #4]
    a1a8:	7cd3      	ldrb	r3, [r2, #19]
    a1aa:	f36f 1386 	bfc	r3, #6, #1
    a1ae:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    a1b0:	4b1f      	ldr	r3, [pc, #124]	; (a230 <_usb_d_dev_in_next+0x208>)
    a1b2:	68db      	ldr	r3, [r3, #12]
    a1b4:	687a      	ldr	r2, [r7, #4]
    a1b6:	7c90      	ldrb	r0, [r2, #18]
    a1b8:	687a      	ldr	r2, [r7, #4]
    a1ba:	6892      	ldr	r2, [r2, #8]
    a1bc:	4611      	mov	r1, r2
    a1be:	4798      	blx	r3
    a1c0:	4603      	mov	r3, r0
    a1c2:	2b00      	cmp	r3, #0
    a1c4:	d124      	bne.n	a210 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    a1c6:	687a      	ldr	r2, [r7, #4]
    a1c8:	7cd3      	ldrb	r3, [r2, #19]
    a1ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a1ce:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a1d0:	2100      	movs	r1, #0
    a1d2:	6878      	ldr	r0, [r7, #4]
    a1d4:	4b17      	ldr	r3, [pc, #92]	; (a234 <_usb_d_dev_in_next+0x20c>)
    a1d6:	4798      	blx	r3
	return;
    a1d8:	e01b      	b.n	a212 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    a1da:	78fb      	ldrb	r3, [r7, #3]
    a1dc:	f083 0301 	eor.w	r3, r3, #1
    a1e0:	b2db      	uxtb	r3, r3
    a1e2:	2b00      	cmp	r3, #0
    a1e4:	d00d      	beq.n	a202 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    a1e6:	7afb      	ldrb	r3, [r7, #11]
    a1e8:	2b00      	cmp	r3, #0
    a1ea:	d002      	beq.n	a1f2 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    a1ec:	234e      	movs	r3, #78	; 0x4e
    a1ee:	777b      	strb	r3, [r7, #29]
    a1f0:	e001      	b.n	a1f6 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    a1f2:	234a      	movs	r3, #74	; 0x4a
    a1f4:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a1f6:	7f7a      	ldrb	r2, [r7, #29]
    a1f8:	7dfb      	ldrb	r3, [r7, #23]
    a1fa:	4619      	mov	r1, r3
    a1fc:	69b8      	ldr	r0, [r7, #24]
    a1fe:	4b0e      	ldr	r3, [pc, #56]	; (a238 <_usb_d_dev_in_next+0x210>)
    a200:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    a202:	7dfb      	ldrb	r3, [r7, #23]
    a204:	2201      	movs	r2, #1
    a206:	2101      	movs	r1, #1
    a208:	4618      	mov	r0, r3
    a20a:	4b0c      	ldr	r3, [pc, #48]	; (a23c <_usb_d_dev_in_next+0x214>)
    a20c:	4798      	blx	r3
    a20e:	e000      	b.n	a212 <_usb_d_dev_in_next+0x1ea>
			return;
    a210:	bf00      	nop
}
    a212:	3724      	adds	r7, #36	; 0x24
    a214:	46bd      	mov	sp, r7
    a216:	bd90      	pop	{r4, r7, pc}
    a218:	20000f30 	.word	0x20000f30
    a21c:	00009a21 	.word	0x00009a21
    a220:	0000fc45 	.word	0x0000fc45
    a224:	00009a4d 	.word	0x00009a4d
    a228:	00009b95 	.word	0x00009b95
    a22c:	0000932d 	.word	0x0000932d
    a230:	20000e68 	.word	0x20000e68
    a234:	0000b351 	.word	0x0000b351
    a238:	00009301 	.word	0x00009301
    a23c:	00009c4d 	.word	0x00009c4d

0000a240 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    a240:	b590      	push	{r4, r7, lr}
    a242:	b08b      	sub	sp, #44	; 0x2c
    a244:	af00      	add	r7, sp, #0
    a246:	6078      	str	r0, [r7, #4]
    a248:	460b      	mov	r3, r1
    a24a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    a24c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a250:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    a252:	687b      	ldr	r3, [r7, #4]
    a254:	7c9b      	ldrb	r3, [r3, #18]
    a256:	f003 030f 	and.w	r3, r3, #15
    a25a:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    a25c:	7ffb      	ldrb	r3, [r7, #31]
    a25e:	015b      	lsls	r3, r3, #5
    a260:	4a94      	ldr	r2, [pc, #592]	; (a4b4 <_usb_d_dev_out_next+0x274>)
    a262:	4413      	add	r3, r2
    a264:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    a266:	78fb      	ldrb	r3, [r7, #3]
    a268:	2b00      	cmp	r3, #0
    a26a:	d005      	beq.n	a278 <_usb_d_dev_out_next+0x38>
    a26c:	69bb      	ldr	r3, [r7, #24]
    a26e:	685b      	ldr	r3, [r3, #4]
    a270:	f3c3 338d 	ubfx	r3, r3, #14, #14
    a274:	b29b      	uxth	r3, r3
    a276:	e000      	b.n	a27a <_usb_d_dev_out_next+0x3a>
    a278:	2300      	movs	r3, #0
    a27a:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    a27c:	78fb      	ldrb	r3, [r7, #3]
    a27e:	2b00      	cmp	r3, #0
    a280:	d005      	beq.n	a28e <_usb_d_dev_out_next+0x4e>
    a282:	69bb      	ldr	r3, [r7, #24]
    a284:	685b      	ldr	r3, [r3, #4]
    a286:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a28a:	b29b      	uxth	r3, r3
    a28c:	e000      	b.n	a290 <_usb_d_dev_out_next+0x50>
    a28e:	2300      	movs	r3, #0
    a290:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a292:	687b      	ldr	r3, [r7, #4]
    a294:	8a1b      	ldrh	r3, [r3, #16]
    a296:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a29a:	4293      	cmp	r3, r2
    a29c:	d004      	beq.n	a2a8 <_usb_d_dev_out_next+0x68>
    a29e:	687b      	ldr	r3, [r7, #4]
    a2a0:	8a1b      	ldrh	r3, [r3, #16]
    a2a2:	3b01      	subs	r3, #1
    a2a4:	b29b      	uxth	r3, r3
    a2a6:	e001      	b.n	a2ac <_usb_d_dev_out_next+0x6c>
    a2a8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a2ac:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    a2ae:	8aba      	ldrh	r2, [r7, #20]
    a2b0:	8a7b      	ldrh	r3, [r7, #18]
    a2b2:	4013      	ands	r3, r2
    a2b4:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a2b6:	687b      	ldr	r3, [r7, #4]
    a2b8:	7cdb      	ldrb	r3, [r3, #19]
    a2ba:	f003 0307 	and.w	r3, r3, #7
    a2be:	b2db      	uxtb	r3, r3
    a2c0:	2b01      	cmp	r3, #1
    a2c2:	bf0c      	ite	eq
    a2c4:	2301      	moveq	r3, #1
    a2c6:	2300      	movne	r3, #0
    a2c8:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    a2ca:	78fb      	ldrb	r3, [r7, #3]
    a2cc:	2b00      	cmp	r3, #0
    a2ce:	d004      	beq.n	a2da <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    a2d0:	7ffb      	ldrb	r3, [r7, #31]
    a2d2:	2100      	movs	r1, #0
    a2d4:	4618      	mov	r0, r3
    a2d6:	4b78      	ldr	r3, [pc, #480]	; (a4b8 <_usb_d_dev_out_next+0x278>)
    a2d8:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    a2da:	687b      	ldr	r3, [r7, #4]
    a2dc:	7cdb      	ldrb	r3, [r3, #19]
    a2de:	f003 0320 	and.w	r3, r3, #32
    a2e2:	b2db      	uxtb	r3, r3
    a2e4:	2b00      	cmp	r3, #0
    a2e6:	d01c      	beq.n	a322 <_usb_d_dev_out_next+0xe2>
    a2e8:	687b      	ldr	r3, [r7, #4]
    a2ea:	685b      	ldr	r3, [r3, #4]
    a2ec:	2b00      	cmp	r3, #0
    a2ee:	d018      	beq.n	a322 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    a2f0:	687b      	ldr	r3, [r7, #4]
    a2f2:	685b      	ldr	r3, [r3, #4]
    a2f4:	b29a      	uxth	r2, r3
    a2f6:	687b      	ldr	r3, [r7, #4]
    a2f8:	689b      	ldr	r3, [r3, #8]
    a2fa:	b29b      	uxth	r3, r3
    a2fc:	1ad3      	subs	r3, r2, r3
    a2fe:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    a300:	687b      	ldr	r3, [r7, #4]
    a302:	681a      	ldr	r2, [r3, #0]
    a304:	687b      	ldr	r3, [r7, #4]
    a306:	689b      	ldr	r3, [r3, #8]
    a308:	18d0      	adds	r0, r2, r3
    a30a:	687b      	ldr	r3, [r7, #4]
    a30c:	68d9      	ldr	r1, [r3, #12]
    a30e:	89ba      	ldrh	r2, [r7, #12]
    a310:	8a3b      	ldrh	r3, [r7, #16]
    a312:	429a      	cmp	r2, r3
    a314:	d901      	bls.n	a31a <_usb_d_dev_out_next+0xda>
    a316:	8a3b      	ldrh	r3, [r7, #16]
    a318:	e000      	b.n	a31c <_usb_d_dev_out_next+0xdc>
    a31a:	89bb      	ldrh	r3, [r7, #12]
    a31c:	461a      	mov	r2, r3
    a31e:	4b67      	ldr	r3, [pc, #412]	; (a4bc <_usb_d_dev_out_next+0x27c>)
    a320:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    a322:	687b      	ldr	r3, [r7, #4]
    a324:	685b      	ldr	r3, [r3, #4]
    a326:	2b00      	cmp	r3, #0
    a328:	d121      	bne.n	a36e <_usb_d_dev_out_next+0x12e>
    a32a:	687b      	ldr	r3, [r7, #4]
    a32c:	7cdb      	ldrb	r3, [r3, #19]
    a32e:	f003 0310 	and.w	r3, r3, #16
    a332:	b2db      	uxtb	r3, r3
    a334:	2b00      	cmp	r3, #0
    a336:	d01a      	beq.n	a36e <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    a338:	687a      	ldr	r2, [r7, #4]
    a33a:	7cd3      	ldrb	r3, [r2, #19]
    a33c:	f36f 1304 	bfc	r3, #4, #1
    a340:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    a342:	687a      	ldr	r2, [r7, #4]
    a344:	7cd3      	ldrb	r3, [r2, #19]
    a346:	f043 0320 	orr.w	r3, r3, #32
    a34a:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a34c:	687b      	ldr	r3, [r7, #4]
    a34e:	68db      	ldr	r3, [r3, #12]
    a350:	461a      	mov	r2, r3
    a352:	7ffb      	ldrb	r3, [r7, #31]
    a354:	2100      	movs	r1, #0
    a356:	4618      	mov	r0, r3
    a358:	4b59      	ldr	r3, [pc, #356]	; (a4c0 <_usb_d_dev_out_next+0x280>)
    a35a:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a35c:	687b      	ldr	r3, [r7, #4]
    a35e:	8a1b      	ldrh	r3, [r3, #16]
    a360:	461a      	mov	r2, r3
    a362:	7ff8      	ldrb	r0, [r7, #31]
    a364:	2300      	movs	r3, #0
    a366:	2100      	movs	r1, #0
    a368:	4c56      	ldr	r4, [pc, #344]	; (a4c4 <_usb_d_dev_out_next+0x284>)
    a36a:	47a0      	blx	r4
		goto _out_rx_exec;
    a36c:	e090      	b.n	a490 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    a36e:	78fb      	ldrb	r3, [r7, #3]
    a370:	2b00      	cmp	r3, #0
    a372:	d010      	beq.n	a396 <_usb_d_dev_out_next+0x156>
    a374:	687b      	ldr	r3, [r7, #4]
    a376:	8a1b      	ldrh	r3, [r3, #16]
    a378:	8a3a      	ldrh	r2, [r7, #16]
    a37a:	429a      	cmp	r2, r3
    a37c:	d20b      	bcs.n	a396 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    a37e:	687a      	ldr	r2, [r7, #4]
    a380:	7cd3      	ldrb	r3, [r2, #19]
    a382:	f36f 1304 	bfc	r3, #4, #1
    a386:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    a388:	687b      	ldr	r3, [r7, #4]
    a38a:	689a      	ldr	r2, [r3, #8]
    a38c:	8abb      	ldrh	r3, [r7, #20]
    a38e:	441a      	add	r2, r3
    a390:	687b      	ldr	r3, [r7, #4]
    a392:	609a      	str	r2, [r3, #8]
    a394:	e05c      	b.n	a450 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    a396:	687b      	ldr	r3, [r7, #4]
    a398:	689a      	ldr	r2, [r3, #8]
    a39a:	8afb      	ldrh	r3, [r7, #22]
    a39c:	441a      	add	r2, r3
    a39e:	687b      	ldr	r3, [r7, #4]
    a3a0:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    a3a2:	687b      	ldr	r3, [r7, #4]
    a3a4:	689a      	ldr	r2, [r3, #8]
    a3a6:	687b      	ldr	r3, [r7, #4]
    a3a8:	685b      	ldr	r3, [r3, #4]
    a3aa:	429a      	cmp	r2, r3
    a3ac:	d250      	bcs.n	a450 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    a3ae:	687b      	ldr	r3, [r7, #4]
    a3b0:	685b      	ldr	r3, [r3, #4]
    a3b2:	b29a      	uxth	r2, r3
    a3b4:	687b      	ldr	r3, [r7, #4]
    a3b6:	689b      	ldr	r3, [r3, #8]
    a3b8:	b29b      	uxth	r3, r3
    a3ba:	1ad3      	subs	r3, r2, r3
    a3bc:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    a3be:	687b      	ldr	r3, [r7, #4]
    a3c0:	7cdb      	ldrb	r3, [r3, #19]
    a3c2:	f003 0320 	and.w	r3, r3, #32
    a3c6:	b2db      	uxtb	r3, r3
    a3c8:	2b00      	cmp	r3, #0
    a3ca:	d010      	beq.n	a3ee <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    a3cc:	687b      	ldr	r3, [r7, #4]
    a3ce:	8a1b      	ldrh	r3, [r3, #16]
    a3d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a3d2:	429a      	cmp	r2, r3
    a3d4:	d902      	bls.n	a3dc <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    a3d6:	687b      	ldr	r3, [r7, #4]
    a3d8:	8a1b      	ldrh	r3, [r3, #16]
    a3da:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a3dc:	687b      	ldr	r3, [r7, #4]
    a3de:	68db      	ldr	r3, [r3, #12]
    a3e0:	461a      	mov	r2, r3
    a3e2:	7ffb      	ldrb	r3, [r7, #31]
    a3e4:	2100      	movs	r1, #0
    a3e6:	4618      	mov	r0, r3
    a3e8:	4b35      	ldr	r3, [pc, #212]	; (a4c0 <_usb_d_dev_out_next+0x280>)
    a3ea:	4798      	blx	r3
    a3ec:	e029      	b.n	a442 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    a3ee:	687b      	ldr	r3, [r7, #4]
    a3f0:	8a1b      	ldrh	r3, [r3, #16]
    a3f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a3f4:	429a      	cmp	r2, r3
    a3f6:	d90f      	bls.n	a418 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    a3f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    a3fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    a3fe:	d903      	bls.n	a408 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    a400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a404:	84fb      	strh	r3, [r7, #38]	; 0x26
    a406:	e011      	b.n	a42c <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    a408:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a40a:	8a7b      	ldrh	r3, [r7, #18]
    a40c:	4013      	ands	r3, r2
    a40e:	b29b      	uxth	r3, r3
    a410:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a412:	1ad3      	subs	r3, r2, r3
    a414:	84fb      	strh	r3, [r7, #38]	; 0x26
    a416:	e009      	b.n	a42c <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    a418:	687b      	ldr	r3, [r7, #4]
    a41a:	8a1b      	ldrh	r3, [r3, #16]
    a41c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a41e:	429a      	cmp	r2, r3
    a420:	d204      	bcs.n	a42c <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    a422:	687a      	ldr	r2, [r7, #4]
    a424:	7cd3      	ldrb	r3, [r2, #19]
    a426:	f043 0320 	orr.w	r3, r3, #32
    a42a:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a42c:	687b      	ldr	r3, [r7, #4]
    a42e:	681a      	ldr	r2, [r3, #0]
    a430:	687b      	ldr	r3, [r7, #4]
    a432:	689b      	ldr	r3, [r3, #8]
    a434:	4413      	add	r3, r2
    a436:	461a      	mov	r2, r3
    a438:	7ffb      	ldrb	r3, [r7, #31]
    a43a:	2100      	movs	r1, #0
    a43c:	4618      	mov	r0, r3
    a43e:	4b20      	ldr	r3, [pc, #128]	; (a4c0 <_usb_d_dev_out_next+0x280>)
    a440:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    a442:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a444:	7ff8      	ldrb	r0, [r7, #31]
    a446:	2300      	movs	r3, #0
    a448:	2100      	movs	r1, #0
    a44a:	4c1e      	ldr	r4, [pc, #120]	; (a4c4 <_usb_d_dev_out_next+0x284>)
    a44c:	47a0      	blx	r4
			goto _out_rx_exec;
    a44e:	e01f      	b.n	a490 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    a450:	7bfb      	ldrb	r3, [r7, #15]
    a452:	2b00      	cmp	r3, #0
    a454:	d006      	beq.n	a464 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    a456:	7ffb      	ldrb	r3, [r7, #31]
    a458:	222d      	movs	r2, #45	; 0x2d
    a45a:	4619      	mov	r1, r3
    a45c:	6a38      	ldr	r0, [r7, #32]
    a45e:	4b1a      	ldr	r3, [pc, #104]	; (a4c8 <_usb_d_dev_out_next+0x288>)
    a460:	4798      	blx	r3
    a462:	e005      	b.n	a470 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    a464:	7ffb      	ldrb	r3, [r7, #31]
    a466:	2225      	movs	r2, #37	; 0x25
    a468:	4619      	mov	r1, r3
    a46a:	6a38      	ldr	r0, [r7, #32]
    a46c:	4b16      	ldr	r3, [pc, #88]	; (a4c8 <_usb_d_dev_out_next+0x288>)
    a46e:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    a470:	7ffb      	ldrb	r3, [r7, #31]
    a472:	2b00      	cmp	r3, #0
    a474:	d107      	bne.n	a486 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a476:	687b      	ldr	r3, [r7, #4]
    a478:	68db      	ldr	r3, [r3, #12]
    a47a:	461a      	mov	r2, r3
    a47c:	7ffb      	ldrb	r3, [r7, #31]
    a47e:	2100      	movs	r1, #0
    a480:	4618      	mov	r0, r3
    a482:	4b0f      	ldr	r3, [pc, #60]	; (a4c0 <_usb_d_dev_out_next+0x280>)
    a484:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a486:	2100      	movs	r1, #0
    a488:	6878      	ldr	r0, [r7, #4]
    a48a:	4b10      	ldr	r3, [pc, #64]	; (a4cc <_usb_d_dev_out_next+0x28c>)
    a48c:	4798      	blx	r3
	return;
    a48e:	e031      	b.n	a4f4 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    a490:	78fb      	ldrb	r3, [r7, #3]
    a492:	f083 0301 	eor.w	r3, r3, #1
    a496:	b2db      	uxtb	r3, r3
    a498:	2b00      	cmp	r3, #0
    a49a:	d025      	beq.n	a4e8 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    a49c:	7bfb      	ldrb	r3, [r7, #15]
    a49e:	2b00      	cmp	r3, #0
    a4a0:	d018      	beq.n	a4d4 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    a4a2:	7ffb      	ldrb	r3, [r7, #31]
    a4a4:	2101      	movs	r1, #1
    a4a6:	4618      	mov	r0, r3
    a4a8:	4b09      	ldr	r3, [pc, #36]	; (a4d0 <_usb_d_dev_out_next+0x290>)
    a4aa:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    a4ac:	232d      	movs	r3, #45	; 0x2d
    a4ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    a4b2:	e012      	b.n	a4da <_usb_d_dev_out_next+0x29a>
    a4b4:	20000f30 	.word	0x20000f30
    a4b8:	00009a21 	.word	0x00009a21
    a4bc:	0000fc45 	.word	0x0000fc45
    a4c0:	00009a4d 	.word	0x00009a4d
    a4c4:	00009bd5 	.word	0x00009bd5
    a4c8:	0000932d 	.word	0x0000932d
    a4cc:	0000b351 	.word	0x0000b351
    a4d0:	00009c15 	.word	0x00009c15
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    a4d4:	2325      	movs	r3, #37	; 0x25
    a4d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a4da:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    a4de:	7ffb      	ldrb	r3, [r7, #31]
    a4e0:	4619      	mov	r1, r3
    a4e2:	6a38      	ldr	r0, [r7, #32]
    a4e4:	4b05      	ldr	r3, [pc, #20]	; (a4fc <_usb_d_dev_out_next+0x2bc>)
    a4e6:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    a4e8:	7ffb      	ldrb	r3, [r7, #31]
    a4ea:	2201      	movs	r2, #1
    a4ec:	2100      	movs	r1, #0
    a4ee:	4618      	mov	r0, r3
    a4f0:	4b03      	ldr	r3, [pc, #12]	; (a500 <_usb_d_dev_out_next+0x2c0>)
    a4f2:	4798      	blx	r3
}
    a4f4:	372c      	adds	r7, #44	; 0x2c
    a4f6:	46bd      	mov	sp, r7
    a4f8:	bd90      	pop	{r4, r7, pc}
    a4fa:	bf00      	nop
    a4fc:	00009301 	.word	0x00009301
    a500:	00009ca5 	.word	0x00009ca5

0000a504 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    a504:	b580      	push	{r7, lr}
    a506:	b084      	sub	sp, #16
    a508:	af00      	add	r7, sp, #0
    a50a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    a50c:	687b      	ldr	r3, [r7, #4]
    a50e:	7c9b      	ldrb	r3, [r3, #18]
    a510:	f003 030f 	and.w	r3, r3, #15
    a514:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a516:	687b      	ldr	r3, [r7, #4]
    a518:	7cdb      	ldrb	r3, [r3, #19]
    a51a:	f003 0307 	and.w	r3, r3, #7
    a51e:	b2db      	uxtb	r3, r3
    a520:	2b01      	cmp	r3, #1
    a522:	bf0c      	ite	eq
    a524:	2301      	moveq	r3, #1
    a526:	2300      	movne	r3, #0
    a528:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    a52a:	7bbb      	ldrb	r3, [r7, #14]
    a52c:	f083 0301 	eor.w	r3, r3, #1
    a530:	b2db      	uxtb	r3, r3
    a532:	2b00      	cmp	r3, #0
    a534:	d008      	beq.n	a548 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    a536:	7bfb      	ldrb	r3, [r7, #15]
    a538:	4618      	mov	r0, r3
    a53a:	4b20      	ldr	r3, [pc, #128]	; (a5bc <_usb_d_dev_handle_setup+0xb8>)
    a53c:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    a53e:	7bfb      	ldrb	r3, [r7, #15]
    a540:	4618      	mov	r0, r3
    a542:	4b1f      	ldr	r3, [pc, #124]	; (a5c0 <_usb_d_dev_handle_setup+0xbc>)
    a544:	4798      	blx	r3
		return;
    a546:	e036      	b.n	a5b6 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    a548:	687b      	ldr	r3, [r7, #4]
    a54a:	7cdb      	ldrb	r3, [r3, #19]
    a54c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a550:	b2db      	uxtb	r3, r3
    a552:	2b00      	cmp	r3, #0
    a554:	d010      	beq.n	a578 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    a556:	687a      	ldr	r2, [r7, #4]
    a558:	7cd3      	ldrb	r3, [r2, #19]
    a55a:	f36f 1386 	bfc	r3, #6, #1
    a55e:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a560:	7bfb      	ldrb	r3, [r7, #15]
    a562:	2200      	movs	r2, #0
    a564:	2101      	movs	r1, #1
    a566:	4618      	mov	r0, r3
    a568:	4b16      	ldr	r3, [pc, #88]	; (a5c4 <_usb_d_dev_handle_setup+0xc0>)
    a56a:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    a56c:	7bfb      	ldrb	r3, [r7, #15]
    a56e:	2200      	movs	r2, #0
    a570:	2100      	movs	r1, #0
    a572:	4618      	mov	r0, r3
    a574:	4b14      	ldr	r3, [pc, #80]	; (a5c8 <_usb_d_dev_handle_setup+0xc4>)
    a576:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    a578:	687a      	ldr	r2, [r7, #4]
    a57a:	7cd3      	ldrb	r3, [r2, #19]
    a57c:	f36f 03c3 	bfc	r3, #3, #1
    a580:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    a582:	7bfb      	ldrb	r3, [r7, #15]
    a584:	2100      	movs	r1, #0
    a586:	4618      	mov	r0, r3
    a588:	4b10      	ldr	r3, [pc, #64]	; (a5cc <_usb_d_dev_handle_setup+0xc8>)
    a58a:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    a58c:	7bfb      	ldrb	r3, [r7, #15]
    a58e:	2101      	movs	r1, #1
    a590:	4618      	mov	r0, r3
    a592:	4b0e      	ldr	r3, [pc, #56]	; (a5cc <_usb_d_dev_handle_setup+0xc8>)
    a594:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a596:	7bfb      	ldrb	r3, [r7, #15]
    a598:	216f      	movs	r1, #111	; 0x6f
    a59a:	4618      	mov	r0, r3
    a59c:	4b0c      	ldr	r3, [pc, #48]	; (a5d0 <_usb_d_dev_handle_setup+0xcc>)
    a59e:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a5a0:	7bfb      	ldrb	r3, [r7, #15]
    a5a2:	216f      	movs	r1, #111	; 0x6f
    a5a4:	4618      	mov	r0, r3
    a5a6:	4b0b      	ldr	r3, [pc, #44]	; (a5d4 <_usb_d_dev_handle_setup+0xd0>)
    a5a8:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    a5aa:	4b0b      	ldr	r3, [pc, #44]	; (a5d8 <_usb_d_dev_handle_setup+0xd4>)
    a5ac:	689b      	ldr	r3, [r3, #8]
    a5ae:	687a      	ldr	r2, [r7, #4]
    a5b0:	7c92      	ldrb	r2, [r2, #18]
    a5b2:	4610      	mov	r0, r2
    a5b4:	4798      	blx	r3
}
    a5b6:	3710      	adds	r7, #16
    a5b8:	46bd      	mov	sp, r7
    a5ba:	bd80      	pop	{r7, pc}
    a5bc:	000099a9 	.word	0x000099a9
    a5c0:	00009955 	.word	0x00009955
    a5c4:	00009c4d 	.word	0x00009c4d
    a5c8:	00009ca5 	.word	0x00009ca5
    a5cc:	00009c15 	.word	0x00009c15
    a5d0:	00009755 	.word	0x00009755
    a5d4:	000097a5 	.word	0x000097a5
    a5d8:	20000e68 	.word	0x20000e68

0000a5dc <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a5dc:	b580      	push	{r7, lr}
    a5de:	b084      	sub	sp, #16
    a5e0:	af00      	add	r7, sp, #0
    a5e2:	6078      	str	r0, [r7, #4]
    a5e4:	460b      	mov	r3, r1
    a5e6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a5e8:	687b      	ldr	r3, [r7, #4]
    a5ea:	7c9b      	ldrb	r3, [r3, #18]
    a5ec:	f003 030f 	and.w	r3, r3, #15
    a5f0:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    a5f2:	78f9      	ldrb	r1, [r7, #3]
    a5f4:	7bfb      	ldrb	r3, [r7, #15]
    a5f6:	2200      	movs	r2, #0
    a5f8:	4618      	mov	r0, r3
    a5fa:	4b07      	ldr	r3, [pc, #28]	; (a618 <_usb_d_dev_handle_stall+0x3c>)
    a5fc:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    a5fe:	4b07      	ldr	r3, [pc, #28]	; (a61c <_usb_d_dev_handle_stall+0x40>)
    a600:	691b      	ldr	r3, [r3, #16]
    a602:	687a      	ldr	r2, [r7, #4]
    a604:	7c90      	ldrb	r0, [r2, #18]
    a606:	687a      	ldr	r2, [r7, #4]
    a608:	6892      	ldr	r2, [r2, #8]
    a60a:	2101      	movs	r1, #1
    a60c:	4798      	blx	r3
}
    a60e:	bf00      	nop
    a610:	3710      	adds	r7, #16
    a612:	46bd      	mov	sp, r7
    a614:	bd80      	pop	{r7, pc}
    a616:	bf00      	nop
    a618:	00009909 	.word	0x00009909
    a61c:	20000e68 	.word	0x20000e68

0000a620 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a620:	b580      	push	{r7, lr}
    a622:	b088      	sub	sp, #32
    a624:	af00      	add	r7, sp, #0
    a626:	6078      	str	r0, [r7, #4]
    a628:	460b      	mov	r3, r1
    a62a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    a62c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a630:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    a632:	687b      	ldr	r3, [r7, #4]
    a634:	7c9b      	ldrb	r3, [r3, #18]
    a636:	f003 030f 	and.w	r3, r3, #15
    a63a:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    a63c:	4b61      	ldr	r3, [pc, #388]	; (a7c4 <_usb_d_dev_handle_trfail+0x1a4>)
    a63e:	881b      	ldrh	r3, [r3, #0]
    a640:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    a642:	7efb      	ldrb	r3, [r7, #27]
    a644:	015b      	lsls	r3, r3, #5
    a646:	4a60      	ldr	r2, [pc, #384]	; (a7c8 <_usb_d_dev_handle_trfail+0x1a8>)
    a648:	4413      	add	r3, r2
    a64a:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    a64c:	78fb      	ldrb	r3, [r7, #3]
    a64e:	2b00      	cmp	r3, #0
    a650:	d006      	beq.n	a660 <_usb_d_dev_handle_trfail+0x40>
    a652:	7efb      	ldrb	r3, [r7, #27]
    a654:	4619      	mov	r1, r3
    a656:	69f8      	ldr	r0, [r7, #28]
    a658:	4b5c      	ldr	r3, [pc, #368]	; (a7cc <_usb_d_dev_handle_trfail+0x1ac>)
    a65a:	4798      	blx	r3
    a65c:	4603      	mov	r3, r0
    a65e:	e005      	b.n	a66c <_usb_d_dev_handle_trfail+0x4c>
    a660:	7efb      	ldrb	r3, [r7, #27]
    a662:	4619      	mov	r1, r3
    a664:	69f8      	ldr	r0, [r7, #28]
    a666:	4b5a      	ldr	r3, [pc, #360]	; (a7d0 <_usb_d_dev_handle_trfail+0x1b0>)
    a668:	4798      	blx	r3
    a66a:	4603      	mov	r3, r0
    a66c:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a66e:	687b      	ldr	r3, [r7, #4]
    a670:	7cdb      	ldrb	r3, [r3, #19]
    a672:	f003 0307 	and.w	r3, r3, #7
    a676:	b2db      	uxtb	r3, r3
    a678:	2b01      	cmp	r3, #1
    a67a:	bf0c      	ite	eq
    a67c:	2301      	moveq	r3, #1
    a67e:	2300      	movne	r3, #0
    a680:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    a682:	78fb      	ldrb	r3, [r7, #3]
    a684:	011b      	lsls	r3, r3, #4
    a686:	697a      	ldr	r2, [r7, #20]
    a688:	4413      	add	r3, r2
    a68a:	7a9b      	ldrb	r3, [r3, #10]
    a68c:	b2db      	uxtb	r3, r3
    a68e:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    a690:	7cfb      	ldrb	r3, [r7, #19]
    a692:	2b02      	cmp	r3, #2
    a694:	d12f      	bne.n	a6f6 <_usb_d_dev_handle_trfail+0xd6>
    a696:	7b3b      	ldrb	r3, [r7, #12]
    a698:	f003 0301 	and.w	r3, r3, #1
    a69c:	b2db      	uxtb	r3, r3
    a69e:	2b00      	cmp	r3, #0
    a6a0:	d029      	beq.n	a6f6 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    a6a2:	78fb      	ldrb	r3, [r7, #3]
    a6a4:	011b      	lsls	r3, r3, #4
    a6a6:	697a      	ldr	r2, [r7, #20]
    a6a8:	441a      	add	r2, r3
    a6aa:	7a93      	ldrb	r3, [r2, #10]
    a6ac:	f36f 0300 	bfc	r3, #0, #1
    a6b0:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a6b2:	78fb      	ldrb	r3, [r7, #3]
    a6b4:	f107 0220 	add.w	r2, r7, #32
    a6b8:	4413      	add	r3, r2
    a6ba:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a6be:	7efb      	ldrb	r3, [r7, #27]
    a6c0:	4619      	mov	r1, r3
    a6c2:	69f8      	ldr	r0, [r7, #28]
    a6c4:	4b43      	ldr	r3, [pc, #268]	; (a7d4 <_usb_d_dev_handle_trfail+0x1b4>)
    a6c6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a6c8:	78fb      	ldrb	r3, [r7, #3]
    a6ca:	f107 0220 	add.w	r2, r7, #32
    a6ce:	4413      	add	r3, r2
    a6d0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a6d4:	7efb      	ldrb	r3, [r7, #27]
    a6d6:	4619      	mov	r1, r3
    a6d8:	69f8      	ldr	r0, [r7, #28]
    a6da:	4b3f      	ldr	r3, [pc, #252]	; (a7d8 <_usb_d_dev_handle_trfail+0x1b8>)
    a6dc:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    a6de:	78fb      	ldrb	r3, [r7, #3]
    a6e0:	2b00      	cmp	r3, #0
    a6e2:	bf14      	ite	ne
    a6e4:	2301      	movne	r3, #1
    a6e6:	2300      	moveq	r3, #0
    a6e8:	b2db      	uxtb	r3, r3
    a6ea:	2204      	movs	r2, #4
    a6ec:	4619      	mov	r1, r3
    a6ee:	6878      	ldr	r0, [r7, #4]
    a6f0:	4b3a      	ldr	r3, [pc, #232]	; (a7dc <_usb_d_dev_handle_trfail+0x1bc>)
    a6f2:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    a6f4:	e062      	b.n	a7bc <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    a6f6:	7b3b      	ldrb	r3, [r7, #12]
    a6f8:	f003 0302 	and.w	r3, r3, #2
    a6fc:	b2db      	uxtb	r3, r3
    a6fe:	2b00      	cmp	r3, #0
    a700:	d040      	beq.n	a784 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    a702:	78fb      	ldrb	r3, [r7, #3]
    a704:	011b      	lsls	r3, r3, #4
    a706:	697a      	ldr	r2, [r7, #20]
    a708:	441a      	add	r2, r3
    a70a:	7a93      	ldrb	r3, [r2, #10]
    a70c:	f36f 0341 	bfc	r3, #1, #1
    a710:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a712:	78fb      	ldrb	r3, [r7, #3]
    a714:	f107 0220 	add.w	r2, r7, #32
    a718:	4413      	add	r3, r2
    a71a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a71e:	7efb      	ldrb	r3, [r7, #27]
    a720:	4619      	mov	r1, r3
    a722:	69f8      	ldr	r0, [r7, #28]
    a724:	4b2b      	ldr	r3, [pc, #172]	; (a7d4 <_usb_d_dev_handle_trfail+0x1b4>)
    a726:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a728:	78fb      	ldrb	r3, [r7, #3]
    a72a:	f107 0220 	add.w	r2, r7, #32
    a72e:	4413      	add	r3, r2
    a730:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a734:	7efb      	ldrb	r3, [r7, #27]
    a736:	4619      	mov	r1, r3
    a738:	69f8      	ldr	r0, [r7, #28]
    a73a:	4b27      	ldr	r3, [pc, #156]	; (a7d8 <_usb_d_dev_handle_trfail+0x1b8>)
    a73c:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    a73e:	7cbb      	ldrb	r3, [r7, #18]
    a740:	2b00      	cmp	r3, #0
    a742:	d03b      	beq.n	a7bc <_usb_d_dev_handle_trfail+0x19c>
    a744:	687b      	ldr	r3, [r7, #4]
    a746:	7cdb      	ldrb	r3, [r3, #19]
    a748:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a74c:	b2db      	uxtb	r3, r3
    a74e:	2b00      	cmp	r3, #0
    a750:	d034      	beq.n	a7bc <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    a752:	687b      	ldr	r3, [r7, #4]
    a754:	7cdb      	ldrb	r3, [r3, #19]
    a756:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a75a:	b2db      	uxtb	r3, r3
    a75c:	461a      	mov	r2, r3
    a75e:	78fb      	ldrb	r3, [r7, #3]
    a760:	4293      	cmp	r3, r2
    a762:	d02b      	beq.n	a7bc <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    a764:	687b      	ldr	r3, [r7, #4]
    a766:	7cdb      	ldrb	r3, [r3, #19]
    a768:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a76c:	b2db      	uxtb	r3, r3
    a76e:	2b00      	cmp	r3, #0
    a770:	bf14      	ite	ne
    a772:	2301      	movne	r3, #1
    a774:	2300      	moveq	r3, #0
    a776:	b2db      	uxtb	r3, r3
    a778:	2200      	movs	r2, #0
    a77a:	4619      	mov	r1, r3
    a77c:	6878      	ldr	r0, [r7, #4]
    a77e:	4b17      	ldr	r3, [pc, #92]	; (a7dc <_usb_d_dev_handle_trfail+0x1bc>)
    a780:	4798      	blx	r3
}
    a782:	e01b      	b.n	a7bc <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    a784:	78fa      	ldrb	r2, [r7, #3]
    a786:	7efb      	ldrb	r3, [r7, #27]
    a788:	4611      	mov	r1, r2
    a78a:	4618      	mov	r0, r3
    a78c:	4b14      	ldr	r3, [pc, #80]	; (a7e0 <_usb_d_dev_handle_trfail+0x1c0>)
    a78e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a790:	78fb      	ldrb	r3, [r7, #3]
    a792:	f107 0220 	add.w	r2, r7, #32
    a796:	4413      	add	r3, r2
    a798:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a79c:	7efb      	ldrb	r3, [r7, #27]
    a79e:	4619      	mov	r1, r3
    a7a0:	69f8      	ldr	r0, [r7, #28]
    a7a2:	4b0c      	ldr	r3, [pc, #48]	; (a7d4 <_usb_d_dev_handle_trfail+0x1b4>)
    a7a4:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a7a6:	78fb      	ldrb	r3, [r7, #3]
    a7a8:	f107 0220 	add.w	r2, r7, #32
    a7ac:	4413      	add	r3, r2
    a7ae:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a7b2:	7efb      	ldrb	r3, [r7, #27]
    a7b4:	4619      	mov	r1, r3
    a7b6:	69f8      	ldr	r0, [r7, #28]
    a7b8:	4b07      	ldr	r3, [pc, #28]	; (a7d8 <_usb_d_dev_handle_trfail+0x1b8>)
    a7ba:	4798      	blx	r3
}
    a7bc:	bf00      	nop
    a7be:	3720      	adds	r7, #32
    a7c0:	46bd      	mov	sp, r7
    a7c2:	bd80      	pop	{r7, pc}
    a7c4:	000102e0 	.word	0x000102e0
    a7c8:	20000f30 	.word	0x20000f30
    a7cc:	00009389 	.word	0x00009389
    a7d0:	00009359 	.word	0x00009359
    a7d4:	0000922d 	.word	0x0000922d
    a7d8:	0000932d 	.word	0x0000932d
    a7dc:	0000b399 	.word	0x0000b399
    a7e0:	00009c15 	.word	0x00009c15

0000a7e4 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a7e4:	b580      	push	{r7, lr}
    a7e6:	b082      	sub	sp, #8
    a7e8:	af00      	add	r7, sp, #0
    a7ea:	6078      	str	r0, [r7, #4]
    a7ec:	460b      	mov	r3, r1
    a7ee:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a7f0:	78fb      	ldrb	r3, [r7, #3]
    a7f2:	f003 0310 	and.w	r3, r3, #16
    a7f6:	2b00      	cmp	r3, #0
    a7f8:	d003      	beq.n	a802 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    a7fa:	6878      	ldr	r0, [r7, #4]
    a7fc:	4b0c      	ldr	r3, [pc, #48]	; (a830 <_usb_d_dev_trans_setup_isr+0x4c>)
    a7fe:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    a800:	e012      	b.n	a828 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a802:	78fb      	ldrb	r3, [r7, #3]
    a804:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a808:	2b00      	cmp	r3, #0
    a80a:	d004      	beq.n	a816 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    a80c:	2101      	movs	r1, #1
    a80e:	6878      	ldr	r0, [r7, #4]
    a810:	4b08      	ldr	r3, [pc, #32]	; (a834 <_usb_d_dev_trans_setup_isr+0x50>)
    a812:	4798      	blx	r3
}
    a814:	e008      	b.n	a828 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a816:	78fb      	ldrb	r3, [r7, #3]
    a818:	f003 0320 	and.w	r3, r3, #32
    a81c:	2b00      	cmp	r3, #0
    a81e:	d003      	beq.n	a828 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    a820:	2100      	movs	r1, #0
    a822:	6878      	ldr	r0, [r7, #4]
    a824:	4b03      	ldr	r3, [pc, #12]	; (a834 <_usb_d_dev_trans_setup_isr+0x50>)
    a826:	4798      	blx	r3
}
    a828:	bf00      	nop
    a82a:	3708      	adds	r7, #8
    a82c:	46bd      	mov	sp, r7
    a82e:	bd80      	pop	{r7, pc}
    a830:	0000a505 	.word	0x0000a505
    a834:	0000a5dd 	.word	0x0000a5dd

0000a838 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a838:	b580      	push	{r7, lr}
    a83a:	b082      	sub	sp, #8
    a83c:	af00      	add	r7, sp, #0
    a83e:	6078      	str	r0, [r7, #4]
    a840:	460b      	mov	r3, r1
    a842:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a844:	78fb      	ldrb	r3, [r7, #3]
    a846:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a84a:	2b00      	cmp	r3, #0
    a84c:	d004      	beq.n	a858 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    a84e:	2101      	movs	r1, #1
    a850:	6878      	ldr	r0, [r7, #4]
    a852:	4b1a      	ldr	r3, [pc, #104]	; (a8bc <_usb_d_dev_trans_in_isr+0x84>)
    a854:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a856:	e02c      	b.n	a8b2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a858:	78fb      	ldrb	r3, [r7, #3]
    a85a:	f003 0308 	and.w	r3, r3, #8
    a85e:	2b00      	cmp	r3, #0
    a860:	d004      	beq.n	a86c <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    a862:	2101      	movs	r1, #1
    a864:	6878      	ldr	r0, [r7, #4]
    a866:	4b16      	ldr	r3, [pc, #88]	; (a8c0 <_usb_d_dev_trans_in_isr+0x88>)
    a868:	4798      	blx	r3
}
    a86a:	e022      	b.n	a8b2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a86c:	78fb      	ldrb	r3, [r7, #3]
    a86e:	f003 0302 	and.w	r3, r3, #2
    a872:	2b00      	cmp	r3, #0
    a874:	d004      	beq.n	a880 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    a876:	2101      	movs	r1, #1
    a878:	6878      	ldr	r0, [r7, #4]
    a87a:	4b12      	ldr	r3, [pc, #72]	; (a8c4 <_usb_d_dev_trans_in_isr+0x8c>)
    a87c:	4798      	blx	r3
}
    a87e:	e018      	b.n	a8b2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a880:	687b      	ldr	r3, [r7, #4]
    a882:	7cdb      	ldrb	r3, [r3, #19]
    a884:	f003 0307 	and.w	r3, r3, #7
    a888:	b2db      	uxtb	r3, r3
    a88a:	2b01      	cmp	r3, #1
    a88c:	d111      	bne.n	a8b2 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a88e:	78fb      	ldrb	r3, [r7, #3]
    a890:	f003 0304 	and.w	r3, r3, #4
    a894:	2b00      	cmp	r3, #0
    a896:	d004      	beq.n	a8a2 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    a898:	2100      	movs	r1, #0
    a89a:	6878      	ldr	r0, [r7, #4]
    a89c:	4b08      	ldr	r3, [pc, #32]	; (a8c0 <_usb_d_dev_trans_in_isr+0x88>)
    a89e:	4798      	blx	r3
}
    a8a0:	e007      	b.n	a8b2 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a8a2:	78fb      	ldrb	r3, [r7, #3]
    a8a4:	f003 0310 	and.w	r3, r3, #16
    a8a8:	2b00      	cmp	r3, #0
    a8aa:	d002      	beq.n	a8b2 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a8ac:	6878      	ldr	r0, [r7, #4]
    a8ae:	4b06      	ldr	r3, [pc, #24]	; (a8c8 <_usb_d_dev_trans_in_isr+0x90>)
    a8b0:	4798      	blx	r3
}
    a8b2:	bf00      	nop
    a8b4:	3708      	adds	r7, #8
    a8b6:	46bd      	mov	sp, r7
    a8b8:	bd80      	pop	{r7, pc}
    a8ba:	bf00      	nop
    a8bc:	0000a5dd 	.word	0x0000a5dd
    a8c0:	0000a621 	.word	0x0000a621
    a8c4:	0000a029 	.word	0x0000a029
    a8c8:	0000a505 	.word	0x0000a505

0000a8cc <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a8cc:	b580      	push	{r7, lr}
    a8ce:	b082      	sub	sp, #8
    a8d0:	af00      	add	r7, sp, #0
    a8d2:	6078      	str	r0, [r7, #4]
    a8d4:	460b      	mov	r3, r1
    a8d6:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a8d8:	78fb      	ldrb	r3, [r7, #3]
    a8da:	f003 0320 	and.w	r3, r3, #32
    a8de:	2b00      	cmp	r3, #0
    a8e0:	d004      	beq.n	a8ec <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    a8e2:	2100      	movs	r1, #0
    a8e4:	6878      	ldr	r0, [r7, #4]
    a8e6:	4b1a      	ldr	r3, [pc, #104]	; (a950 <_usb_d_dev_trans_out_isr+0x84>)
    a8e8:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a8ea:	e02c      	b.n	a946 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a8ec:	78fb      	ldrb	r3, [r7, #3]
    a8ee:	f003 0304 	and.w	r3, r3, #4
    a8f2:	2b00      	cmp	r3, #0
    a8f4:	d004      	beq.n	a900 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    a8f6:	2100      	movs	r1, #0
    a8f8:	6878      	ldr	r0, [r7, #4]
    a8fa:	4b16      	ldr	r3, [pc, #88]	; (a954 <_usb_d_dev_trans_out_isr+0x88>)
    a8fc:	4798      	blx	r3
}
    a8fe:	e022      	b.n	a946 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    a900:	78fb      	ldrb	r3, [r7, #3]
    a902:	f003 0301 	and.w	r3, r3, #1
    a906:	2b00      	cmp	r3, #0
    a908:	d004      	beq.n	a914 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    a90a:	2101      	movs	r1, #1
    a90c:	6878      	ldr	r0, [r7, #4]
    a90e:	4b12      	ldr	r3, [pc, #72]	; (a958 <_usb_d_dev_trans_out_isr+0x8c>)
    a910:	4798      	blx	r3
}
    a912:	e018      	b.n	a946 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a914:	687b      	ldr	r3, [r7, #4]
    a916:	7cdb      	ldrb	r3, [r3, #19]
    a918:	f003 0307 	and.w	r3, r3, #7
    a91c:	b2db      	uxtb	r3, r3
    a91e:	2b01      	cmp	r3, #1
    a920:	d111      	bne.n	a946 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a922:	78fb      	ldrb	r3, [r7, #3]
    a924:	f003 0308 	and.w	r3, r3, #8
    a928:	2b00      	cmp	r3, #0
    a92a:	d004      	beq.n	a936 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    a92c:	2101      	movs	r1, #1
    a92e:	6878      	ldr	r0, [r7, #4]
    a930:	4b08      	ldr	r3, [pc, #32]	; (a954 <_usb_d_dev_trans_out_isr+0x88>)
    a932:	4798      	blx	r3
}
    a934:	e007      	b.n	a946 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a936:	78fb      	ldrb	r3, [r7, #3]
    a938:	f003 0310 	and.w	r3, r3, #16
    a93c:	2b00      	cmp	r3, #0
    a93e:	d002      	beq.n	a946 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a940:	6878      	ldr	r0, [r7, #4]
    a942:	4b06      	ldr	r3, [pc, #24]	; (a95c <_usb_d_dev_trans_out_isr+0x90>)
    a944:	4798      	blx	r3
}
    a946:	bf00      	nop
    a948:	3708      	adds	r7, #8
    a94a:	46bd      	mov	sp, r7
    a94c:	bd80      	pop	{r7, pc}
    a94e:	bf00      	nop
    a950:	0000a5dd 	.word	0x0000a5dd
    a954:	0000a621 	.word	0x0000a621
    a958:	0000a241 	.word	0x0000a241
    a95c:	0000a505 	.word	0x0000a505

0000a960 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    a960:	b580      	push	{r7, lr}
    a962:	b084      	sub	sp, #16
    a964:	af00      	add	r7, sp, #0
    a966:	6078      	str	r0, [r7, #4]
    a968:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    a96a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a96e:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a970:	683b      	ldr	r3, [r7, #0]
    a972:	7c9b      	ldrb	r3, [r3, #18]
    a974:	f003 030f 	and.w	r3, r3, #15
    a978:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    a97a:	7afb      	ldrb	r3, [r7, #11]
    a97c:	2201      	movs	r2, #1
    a97e:	409a      	lsls	r2, r3
    a980:	687b      	ldr	r3, [r7, #4]
    a982:	4013      	ands	r3, r2
    a984:	2b00      	cmp	r3, #0
    a986:	d03d      	beq.n	aa04 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    a988:	7afb      	ldrb	r3, [r7, #11]
    a98a:	68fa      	ldr	r2, [r7, #12]
    a98c:	3308      	adds	r3, #8
    a98e:	015b      	lsls	r3, r3, #5
    a990:	4413      	add	r3, r2
    a992:	3307      	adds	r3, #7
    a994:	781b      	ldrb	r3, [r3, #0]
    a996:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    a998:	7afb      	ldrb	r3, [r7, #11]
    a99a:	68fa      	ldr	r2, [r7, #12]
    a99c:	015b      	lsls	r3, r3, #5
    a99e:	4413      	add	r3, r2
    a9a0:	f203 1309 	addw	r3, r3, #265	; 0x109
    a9a4:	781b      	ldrb	r3, [r3, #0]
    a9a6:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    a9a8:	7aba      	ldrb	r2, [r7, #10]
    a9aa:	7a7b      	ldrb	r3, [r7, #9]
    a9ac:	4013      	ands	r3, r2
    a9ae:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    a9b0:	7abb      	ldrb	r3, [r7, #10]
    a9b2:	2b00      	cmp	r3, #0
    a9b4:	d027      	beq.n	aa06 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    a9b6:	683b      	ldr	r3, [r7, #0]
    a9b8:	7cdb      	ldrb	r3, [r3, #19]
    a9ba:	f003 0307 	and.w	r3, r3, #7
    a9be:	b2db      	uxtb	r3, r3
    a9c0:	2b01      	cmp	r3, #1
    a9c2:	d10c      	bne.n	a9de <_usb_d_dev_handle_eps+0x7e>
    a9c4:	683b      	ldr	r3, [r7, #0]
    a9c6:	7cdb      	ldrb	r3, [r3, #19]
    a9c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a9cc:	b2db      	uxtb	r3, r3
    a9ce:	2b00      	cmp	r3, #0
    a9d0:	d105      	bne.n	a9de <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    a9d2:	7abb      	ldrb	r3, [r7, #10]
    a9d4:	4619      	mov	r1, r3
    a9d6:	6838      	ldr	r0, [r7, #0]
    a9d8:	4b0c      	ldr	r3, [pc, #48]	; (aa0c <_usb_d_dev_handle_eps+0xac>)
    a9da:	4798      	blx	r3
    a9dc:	e013      	b.n	aa06 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    a9de:	683b      	ldr	r3, [r7, #0]
    a9e0:	7cdb      	ldrb	r3, [r3, #19]
    a9e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a9e6:	b2db      	uxtb	r3, r3
    a9e8:	2b00      	cmp	r3, #0
    a9ea:	d005      	beq.n	a9f8 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    a9ec:	7abb      	ldrb	r3, [r7, #10]
    a9ee:	4619      	mov	r1, r3
    a9f0:	6838      	ldr	r0, [r7, #0]
    a9f2:	4b07      	ldr	r3, [pc, #28]	; (aa10 <_usb_d_dev_handle_eps+0xb0>)
    a9f4:	4798      	blx	r3
    a9f6:	e006      	b.n	aa06 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    a9f8:	7abb      	ldrb	r3, [r7, #10]
    a9fa:	4619      	mov	r1, r3
    a9fc:	6838      	ldr	r0, [r7, #0]
    a9fe:	4b05      	ldr	r3, [pc, #20]	; (aa14 <_usb_d_dev_handle_eps+0xb4>)
    aa00:	4798      	blx	r3
    aa02:	e000      	b.n	aa06 <_usb_d_dev_handle_eps+0xa6>
		return;
    aa04:	bf00      	nop
		}
	}
}
    aa06:	3710      	adds	r7, #16
    aa08:	46bd      	mov	sp, r7
    aa0a:	bd80      	pop	{r7, pc}
    aa0c:	0000a7e5 	.word	0x0000a7e5
    aa10:	0000a839 	.word	0x0000a839
    aa14:	0000a8cd 	.word	0x0000a8cd

0000aa18 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    aa18:	b580      	push	{r7, lr}
    aa1a:	b084      	sub	sp, #16
    aa1c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    aa1e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    aa22:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    aa24:	68bb      	ldr	r3, [r7, #8]
    aa26:	8c1b      	ldrh	r3, [r3, #32]
    aa28:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    aa2a:	88fb      	ldrh	r3, [r7, #6]
    aa2c:	2b00      	cmp	r3, #0
    aa2e:	d104      	bne.n	aa3a <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    aa30:	4b13      	ldr	r3, [pc, #76]	; (aa80 <_usb_d_dev_handler+0x68>)
    aa32:	4798      	blx	r3
    aa34:	4603      	mov	r3, r0
    aa36:	2b00      	cmp	r3, #0
    aa38:	d11e      	bne.n	aa78 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    aa3a:	2300      	movs	r3, #0
    aa3c:	73fb      	strb	r3, [r7, #15]
    aa3e:	e017      	b.n	aa70 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    aa40:	7bfa      	ldrb	r2, [r7, #15]
    aa42:	4613      	mov	r3, r2
    aa44:	009b      	lsls	r3, r3, #2
    aa46:	4413      	add	r3, r2
    aa48:	009b      	lsls	r3, r3, #2
    aa4a:	3310      	adds	r3, #16
    aa4c:	4a0d      	ldr	r2, [pc, #52]	; (aa84 <_usb_d_dev_handler+0x6c>)
    aa4e:	4413      	add	r3, r2
    aa50:	3304      	adds	r3, #4
    aa52:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    aa54:	683b      	ldr	r3, [r7, #0]
    aa56:	7c9b      	ldrb	r3, [r3, #18]
    aa58:	2bff      	cmp	r3, #255	; 0xff
    aa5a:	d005      	beq.n	aa68 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    aa5c:	88fb      	ldrh	r3, [r7, #6]
    aa5e:	6839      	ldr	r1, [r7, #0]
    aa60:	4618      	mov	r0, r3
    aa62:	4b09      	ldr	r3, [pc, #36]	; (aa88 <_usb_d_dev_handler+0x70>)
    aa64:	4798      	blx	r3
    aa66:	e000      	b.n	aa6a <_usb_d_dev_handler+0x52>
			continue;
    aa68:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    aa6a:	7bfb      	ldrb	r3, [r7, #15]
    aa6c:	3301      	adds	r3, #1
    aa6e:	73fb      	strb	r3, [r7, #15]
    aa70:	7bfb      	ldrb	r3, [r7, #15]
    aa72:	2b08      	cmp	r3, #8
    aa74:	d9e4      	bls.n	aa40 <_usb_d_dev_handler+0x28>
    aa76:	e000      	b.n	aa7a <_usb_d_dev_handler+0x62>
			return;
    aa78:	bf00      	nop
	}
}
    aa7a:	3710      	adds	r7, #16
    aa7c:	46bd      	mov	sp, r7
    aa7e:	bd80      	pop	{r7, pc}
    aa80:	00009f71 	.word	0x00009f71
    aa84:	20000e68 	.word	0x20000e68
    aa88:	0000a961 	.word	0x0000a961

0000aa8c <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    aa8c:	b580      	push	{r7, lr}
    aa8e:	b082      	sub	sp, #8
    aa90:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    aa92:	2300      	movs	r3, #0
    aa94:	71fb      	strb	r3, [r7, #7]
    aa96:	e023      	b.n	aae0 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    aa98:	79fa      	ldrb	r2, [r7, #7]
    aa9a:	4613      	mov	r3, r2
    aa9c:	009b      	lsls	r3, r3, #2
    aa9e:	4413      	add	r3, r2
    aaa0:	009b      	lsls	r3, r3, #2
    aaa2:	3310      	adds	r3, #16
    aaa4:	4a14      	ldr	r2, [pc, #80]	; (aaf8 <_usb_d_dev_reset_epts+0x6c>)
    aaa6:	4413      	add	r3, r2
    aaa8:	3304      	adds	r3, #4
    aaaa:	2103      	movs	r1, #3
    aaac:	4618      	mov	r0, r3
    aaae:	4b13      	ldr	r3, [pc, #76]	; (aafc <_usb_d_dev_reset_epts+0x70>)
    aab0:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    aab2:	79fa      	ldrb	r2, [r7, #7]
    aab4:	4910      	ldr	r1, [pc, #64]	; (aaf8 <_usb_d_dev_reset_epts+0x6c>)
    aab6:	4613      	mov	r3, r2
    aab8:	009b      	lsls	r3, r3, #2
    aaba:	4413      	add	r3, r2
    aabc:	009b      	lsls	r3, r3, #2
    aabe:	440b      	add	r3, r1
    aac0:	3326      	adds	r3, #38	; 0x26
    aac2:	22ff      	movs	r2, #255	; 0xff
    aac4:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    aac6:	79fa      	ldrb	r2, [r7, #7]
    aac8:	490b      	ldr	r1, [pc, #44]	; (aaf8 <_usb_d_dev_reset_epts+0x6c>)
    aaca:	4613      	mov	r3, r2
    aacc:	009b      	lsls	r3, r3, #2
    aace:	4413      	add	r3, r2
    aad0:	009b      	lsls	r3, r3, #2
    aad2:	440b      	add	r3, r1
    aad4:	3327      	adds	r3, #39	; 0x27
    aad6:	2200      	movs	r2, #0
    aad8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    aada:	79fb      	ldrb	r3, [r7, #7]
    aadc:	3301      	adds	r3, #1
    aade:	71fb      	strb	r3, [r7, #7]
    aae0:	79fb      	ldrb	r3, [r7, #7]
    aae2:	2b08      	cmp	r3, #8
    aae4:	d9d8      	bls.n	aa98 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    aae6:	22a0      	movs	r2, #160	; 0xa0
    aae8:	2100      	movs	r1, #0
    aaea:	4805      	ldr	r0, [pc, #20]	; (ab00 <_usb_d_dev_reset_epts+0x74>)
    aaec:	4b05      	ldr	r3, [pc, #20]	; (ab04 <_usb_d_dev_reset_epts+0x78>)
    aaee:	4798      	blx	r3
}
    aaf0:	bf00      	nop
    aaf2:	3708      	adds	r7, #8
    aaf4:	46bd      	mov	sp, r7
    aaf6:	bd80      	pop	{r7, pc}
    aaf8:	20000e68 	.word	0x20000e68
    aafc:	0000b351 	.word	0x0000b351
    ab00:	20000f30 	.word	0x20000f30
    ab04:	0000fd79 	.word	0x0000fd79

0000ab08 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    ab08:	b580      	push	{r7, lr}
    ab0a:	b084      	sub	sp, #16
    ab0c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    ab0e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ab12:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    ab14:	2301      	movs	r3, #1
    ab16:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    ab18:	2304      	movs	r3, #4
    ab1a:	713b      	strb	r3, [r7, #4]
    ab1c:	2300      	movs	r3, #0
    ab1e:	717b      	strb	r3, [r7, #5]
    ab20:	2300      	movs	r3, #0
    ab22:	71bb      	strb	r3, [r7, #6]
    ab24:	2300      	movs	r3, #0
    ab26:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    ab28:	2101      	movs	r1, #1
    ab2a:	68f8      	ldr	r0, [r7, #12]
    ab2c:	4b26      	ldr	r3, [pc, #152]	; (abc8 <_usb_d_dev_init+0xc0>)
    ab2e:	4798      	blx	r3
    ab30:	4603      	mov	r3, r0
    ab32:	f083 0301 	eor.w	r3, r3, #1
    ab36:	b2db      	uxtb	r3, r3
    ab38:	2b00      	cmp	r3, #0
    ab3a:	d011      	beq.n	ab60 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    ab3c:	2102      	movs	r1, #2
    ab3e:	68f8      	ldr	r0, [r7, #12]
    ab40:	4b22      	ldr	r3, [pc, #136]	; (abcc <_usb_d_dev_init+0xc4>)
    ab42:	4798      	blx	r3
    ab44:	4603      	mov	r3, r0
    ab46:	2b00      	cmp	r3, #0
    ab48:	d006      	beq.n	ab58 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    ab4a:	68f8      	ldr	r0, [r7, #12]
    ab4c:	4b20      	ldr	r3, [pc, #128]	; (abd0 <_usb_d_dev_init+0xc8>)
    ab4e:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    ab50:	2102      	movs	r1, #2
    ab52:	68f8      	ldr	r0, [r7, #12]
    ab54:	4b1f      	ldr	r3, [pc, #124]	; (abd4 <_usb_d_dev_init+0xcc>)
    ab56:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    ab58:	2101      	movs	r1, #1
    ab5a:	68f8      	ldr	r0, [r7, #12]
    ab5c:	4b1e      	ldr	r3, [pc, #120]	; (abd8 <_usb_d_dev_init+0xd0>)
    ab5e:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    ab60:	2101      	movs	r1, #1
    ab62:	68f8      	ldr	r0, [r7, #12]
    ab64:	4b1b      	ldr	r3, [pc, #108]	; (abd4 <_usb_d_dev_init+0xcc>)
    ab66:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    ab68:	4b1c      	ldr	r3, [pc, #112]	; (abdc <_usb_d_dev_init+0xd4>)
    ab6a:	4a1d      	ldr	r2, [pc, #116]	; (abe0 <_usb_d_dev_init+0xd8>)
    ab6c:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    ab6e:	4b1b      	ldr	r3, [pc, #108]	; (abdc <_usb_d_dev_init+0xd4>)
    ab70:	4a1b      	ldr	r2, [pc, #108]	; (abe0 <_usb_d_dev_init+0xd8>)
    ab72:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    ab74:	4b19      	ldr	r3, [pc, #100]	; (abdc <_usb_d_dev_init+0xd4>)
    ab76:	4a1a      	ldr	r2, [pc, #104]	; (abe0 <_usb_d_dev_init+0xd8>)
    ab78:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    ab7a:	4b18      	ldr	r3, [pc, #96]	; (abdc <_usb_d_dev_init+0xd4>)
    ab7c:	4a18      	ldr	r2, [pc, #96]	; (abe0 <_usb_d_dev_init+0xd8>)
    ab7e:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    ab80:	4b16      	ldr	r3, [pc, #88]	; (abdc <_usb_d_dev_init+0xd4>)
    ab82:	4a17      	ldr	r2, [pc, #92]	; (abe0 <_usb_d_dev_init+0xd8>)
    ab84:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    ab86:	4b17      	ldr	r3, [pc, #92]	; (abe4 <_usb_d_dev_init+0xdc>)
    ab88:	4798      	blx	r3

	_usb_load_calib();
    ab8a:	4b17      	ldr	r3, [pc, #92]	; (abe8 <_usb_d_dev_init+0xe0>)
    ab8c:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    ab8e:	2104      	movs	r1, #4
    ab90:	68f8      	ldr	r0, [r7, #12]
    ab92:	4b11      	ldr	r3, [pc, #68]	; (abd8 <_usb_d_dev_init+0xd0>)
    ab94:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    ab96:	4b15      	ldr	r3, [pc, #84]	; (abec <_usb_d_dev_init+0xe4>)
    ab98:	4619      	mov	r1, r3
    ab9a:	68f8      	ldr	r0, [r7, #12]
    ab9c:	4b14      	ldr	r3, [pc, #80]	; (abf0 <_usb_d_dev_init+0xe8>)
    ab9e:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    aba0:	7afb      	ldrb	r3, [r7, #11]
    aba2:	f107 0210 	add.w	r2, r7, #16
    aba6:	4413      	add	r3, r2
    aba8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    abac:	f043 0301 	orr.w	r3, r3, #1
    abb0:	b2db      	uxtb	r3, r3
    abb2:	b29b      	uxth	r3, r3
    abb4:	4619      	mov	r1, r3
    abb6:	68f8      	ldr	r0, [r7, #12]
    abb8:	4b0e      	ldr	r3, [pc, #56]	; (abf4 <_usb_d_dev_init+0xec>)
    abba:	4798      	blx	r3

	return ERR_NONE;
    abbc:	2300      	movs	r3, #0
}
    abbe:	4618      	mov	r0, r3
    abc0:	3710      	adds	r7, #16
    abc2:	46bd      	mov	sp, r7
    abc4:	bd80      	pop	{r7, pc}
    abc6:	bf00      	nop
    abc8:	000091a1 	.word	0x000091a1
    abcc:	000094f1 	.word	0x000094f1
    abd0:	000094c5 	.word	0x000094c5
    abd4:	00009177 	.word	0x00009177
    abd8:	00009521 	.word	0x00009521
    abdc:	20000e68 	.word	0x20000e68
    abe0:	000095e9 	.word	0x000095e9
    abe4:	0000aa8d 	.word	0x0000aa8d
    abe8:	00009601 	.word	0x00009601
    abec:	20000f30 	.word	0x20000f30
    abf0:	000095cd 	.word	0x000095cd
    abf4:	00009591 	.word	0x00009591

0000abf8 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    abf8:	b580      	push	{r7, lr}
    abfa:	b082      	sub	sp, #8
    abfc:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    abfe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ac02:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    ac04:	2103      	movs	r1, #3
    ac06:	6878      	ldr	r0, [r7, #4]
    ac08:	4b17      	ldr	r3, [pc, #92]	; (ac68 <_usb_d_dev_enable+0x70>)
    ac0a:	4798      	blx	r3
    ac0c:	4603      	mov	r3, r0
    ac0e:	2b00      	cmp	r3, #0
    ac10:	d002      	beq.n	ac18 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    ac12:	f06f 0310 	mvn.w	r3, #16
    ac16:	e023      	b.n	ac60 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    ac18:	6878      	ldr	r0, [r7, #4]
    ac1a:	4b14      	ldr	r3, [pc, #80]	; (ac6c <_usb_d_dev_enable+0x74>)
    ac1c:	4798      	blx	r3
    ac1e:	4603      	mov	r3, r0
    ac20:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    ac22:	78fb      	ldrb	r3, [r7, #3]
    ac24:	f003 0302 	and.w	r3, r3, #2
    ac28:	2b00      	cmp	r3, #0
    ac2a:	d107      	bne.n	ac3c <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    ac2c:	78fb      	ldrb	r3, [r7, #3]
    ac2e:	f043 0302 	orr.w	r3, r3, #2
    ac32:	b2db      	uxtb	r3, r3
    ac34:	4619      	mov	r1, r3
    ac36:	6878      	ldr	r0, [r7, #4]
    ac38:	4b0d      	ldr	r3, [pc, #52]	; (ac70 <_usb_d_dev_enable+0x78>)
    ac3a:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    ac3c:	2050      	movs	r0, #80	; 0x50
    ac3e:	4b0d      	ldr	r3, [pc, #52]	; (ac74 <_usb_d_dev_enable+0x7c>)
    ac40:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    ac42:	2051      	movs	r0, #81	; 0x51
    ac44:	4b0b      	ldr	r3, [pc, #44]	; (ac74 <_usb_d_dev_enable+0x7c>)
    ac46:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    ac48:	2052      	movs	r0, #82	; 0x52
    ac4a:	4b0a      	ldr	r3, [pc, #40]	; (ac74 <_usb_d_dev_enable+0x7c>)
    ac4c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    ac4e:	2053      	movs	r0, #83	; 0x53
    ac50:	4b08      	ldr	r3, [pc, #32]	; (ac74 <_usb_d_dev_enable+0x7c>)
    ac52:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    ac54:	f240 218d 	movw	r1, #653	; 0x28d
    ac58:	6878      	ldr	r0, [r7, #4]
    ac5a:	4b07      	ldr	r3, [pc, #28]	; (ac78 <_usb_d_dev_enable+0x80>)
    ac5c:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    ac5e:	2300      	movs	r3, #0
}
    ac60:	4618      	mov	r0, r3
    ac62:	3708      	adds	r7, #8
    ac64:	46bd      	mov	sp, r7
    ac66:	bd80      	pop	{r7, pc}
    ac68:	0000949b 	.word	0x0000949b
    ac6c:	00009549 	.word	0x00009549
    ac70:	00009521 	.word	0x00009521
    ac74:	000090ad 	.word	0x000090ad
    ac78:	00009445 	.word	0x00009445

0000ac7c <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    ac7c:	b580      	push	{r7, lr}
    ac7e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    ac80:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ac84:	4b01      	ldr	r3, [pc, #4]	; (ac8c <_usb_d_dev_attach+0x10>)
    ac86:	4798      	blx	r3
}
    ac88:	bf00      	nop
    ac8a:	bd80      	pop	{r7, pc}
    ac8c:	0000956d 	.word	0x0000956d

0000ac90 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    ac90:	b580      	push	{r7, lr}
    ac92:	b082      	sub	sp, #8
    ac94:	af00      	add	r7, sp, #0
    ac96:	4603      	mov	r3, r0
    ac98:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    ac9a:	79fb      	ldrb	r3, [r7, #7]
    ac9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    aca0:	b2db      	uxtb	r3, r3
    aca2:	4619      	mov	r1, r3
    aca4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aca8:	4b02      	ldr	r3, [pc, #8]	; (acb4 <_usb_d_dev_set_address+0x24>)
    acaa:	4798      	blx	r3
}
    acac:	bf00      	nop
    acae:	3708      	adds	r7, #8
    acb0:	46bd      	mov	sp, r7
    acb2:	bd80      	pop	{r7, pc}
    acb4:	000095af 	.word	0x000095af

0000acb8 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    acb8:	b590      	push	{r4, r7, lr}
    acba:	b085      	sub	sp, #20
    acbc:	af00      	add	r7, sp, #0
    acbe:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    acc0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    acc4:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    acc6:	687b      	ldr	r3, [r7, #4]
    acc8:	7c9b      	ldrb	r3, [r3, #18]
    acca:	f003 030f 	and.w	r3, r3, #15
    acce:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    acd0:	687b      	ldr	r3, [r7, #4]
    acd2:	68db      	ldr	r3, [r3, #12]
    acd4:	461a      	mov	r2, r3
    acd6:	7afb      	ldrb	r3, [r7, #11]
    acd8:	2100      	movs	r1, #0
    acda:	4618      	mov	r0, r3
    acdc:	4b0f      	ldr	r3, [pc, #60]	; (ad1c <_usb_d_dev_trans_setup+0x64>)
    acde:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    ace0:	687b      	ldr	r3, [r7, #4]
    ace2:	8a1b      	ldrh	r3, [r3, #16]
    ace4:	461a      	mov	r2, r3
    ace6:	7af8      	ldrb	r0, [r7, #11]
    ace8:	2300      	movs	r3, #0
    acea:	2100      	movs	r1, #0
    acec:	4c0c      	ldr	r4, [pc, #48]	; (ad20 <_usb_d_dev_trans_setup+0x68>)
    acee:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    acf0:	7afb      	ldrb	r3, [r7, #11]
    acf2:	22b0      	movs	r2, #176	; 0xb0
    acf4:	4619      	mov	r1, r3
    acf6:	68f8      	ldr	r0, [r7, #12]
    acf8:	4b0a      	ldr	r3, [pc, #40]	; (ad24 <_usb_d_dev_trans_setup+0x6c>)
    acfa:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    acfc:	7afb      	ldrb	r3, [r7, #11]
    acfe:	2200      	movs	r2, #0
    ad00:	2100      	movs	r1, #0
    ad02:	4618      	mov	r0, r3
    ad04:	4b08      	ldr	r3, [pc, #32]	; (ad28 <_usb_d_dev_trans_setup+0x70>)
    ad06:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    ad08:	7afb      	ldrb	r3, [r7, #11]
    ad0a:	2210      	movs	r2, #16
    ad0c:	4619      	mov	r1, r3
    ad0e:	68f8      	ldr	r0, [r7, #12]
    ad10:	4b06      	ldr	r3, [pc, #24]	; (ad2c <_usb_d_dev_trans_setup+0x74>)
    ad12:	4798      	blx	r3
}
    ad14:	bf00      	nop
    ad16:	3714      	adds	r7, #20
    ad18:	46bd      	mov	sp, r7
    ad1a:	bd90      	pop	{r4, r7, pc}
    ad1c:	00009a4d 	.word	0x00009a4d
    ad20:	00009bd5 	.word	0x00009bd5
    ad24:	000092ad 	.word	0x000092ad
    ad28:	00009ca5 	.word	0x00009ca5
    ad2c:	00009301 	.word	0x00009301

0000ad30 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    ad30:	b580      	push	{r7, lr}
    ad32:	b088      	sub	sp, #32
    ad34:	af00      	add	r7, sp, #0
    ad36:	4603      	mov	r3, r0
    ad38:	71fb      	strb	r3, [r7, #7]
    ad3a:	460b      	mov	r3, r1
    ad3c:	71bb      	strb	r3, [r7, #6]
    ad3e:	4613      	mov	r3, r2
    ad40:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    ad42:	79fb      	ldrb	r3, [r7, #7]
    ad44:	f003 030f 	and.w	r3, r3, #15
    ad48:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    ad4a:	79fb      	ldrb	r3, [r7, #7]
    ad4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ad50:	2b00      	cmp	r3, #0
    ad52:	bf14      	ite	ne
    ad54:	2301      	movne	r3, #1
    ad56:	2300      	moveq	r3, #0
    ad58:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ad5a:	7fba      	ldrb	r2, [r7, #30]
    ad5c:	7ffb      	ldrb	r3, [r7, #31]
    ad5e:	4611      	mov	r1, r2
    ad60:	4618      	mov	r0, r3
    ad62:	4b3e      	ldr	r3, [pc, #248]	; (ae5c <_usb_d_dev_ep_init+0x12c>)
    ad64:	4798      	blx	r3
    ad66:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    ad68:	79bb      	ldrb	r3, [r7, #6]
    ad6a:	f003 0303 	and.w	r3, r3, #3
    ad6e:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    ad70:	7ffa      	ldrb	r2, [r7, #31]
    ad72:	4613      	mov	r3, r2
    ad74:	005b      	lsls	r3, r3, #1
    ad76:	4413      	add	r3, r2
    ad78:	009b      	lsls	r3, r3, #2
    ad7a:	4a39      	ldr	r2, [pc, #228]	; (ae60 <_usb_d_dev_ep_init+0x130>)
    ad7c:	4413      	add	r3, r2
    ad7e:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    ad80:	7ffb      	ldrb	r3, [r7, #31]
    ad82:	2b04      	cmp	r3, #4
    ad84:	d902      	bls.n	ad8c <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    ad86:	f06f 0311 	mvn.w	r3, #17
    ad8a:	e063      	b.n	ae54 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    ad8c:	69bb      	ldr	r3, [r7, #24]
    ad8e:	7c9b      	ldrb	r3, [r3, #18]
    ad90:	2bff      	cmp	r3, #255	; 0xff
    ad92:	d002      	beq.n	ad9a <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    ad94:	f06f 0313 	mvn.w	r3, #19
    ad98:	e05c      	b.n	ae54 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    ad9a:	7dfb      	ldrb	r3, [r7, #23]
    ad9c:	2b00      	cmp	r3, #0
    ad9e:	d11f      	bne.n	ade0 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    ada0:	7fbb      	ldrb	r3, [r7, #30]
    ada2:	2b00      	cmp	r3, #0
    ada4:	bf14      	ite	ne
    ada6:	2301      	movne	r3, #1
    ada8:	2300      	moveq	r3, #0
    adaa:	b2db      	uxtb	r3, r3
    adac:	f083 0301 	eor.w	r3, r3, #1
    adb0:	b2db      	uxtb	r3, r3
    adb2:	f003 0301 	and.w	r3, r3, #1
    adb6:	b2da      	uxtb	r2, r3
    adb8:	7ffb      	ldrb	r3, [r7, #31]
    adba:	4611      	mov	r1, r2
    adbc:	4618      	mov	r0, r3
    adbe:	4b27      	ldr	r3, [pc, #156]	; (ae5c <_usb_d_dev_ep_init+0x12c>)
    adc0:	4798      	blx	r3
    adc2:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    adc4:	68fb      	ldr	r3, [r7, #12]
    adc6:	7c9b      	ldrb	r3, [r3, #18]
    adc8:	2bff      	cmp	r3, #255	; 0xff
    adca:	d002      	beq.n	add2 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    adcc:	f06f 0313 	mvn.w	r3, #19
    add0:	e040      	b.n	ae54 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    add2:	693b      	ldr	r3, [r7, #16]
    add4:	681b      	ldr	r3, [r3, #0]
    add6:	2b00      	cmp	r3, #0
    add8:	d102      	bne.n	ade0 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    adda:	f06f 0312 	mvn.w	r3, #18
    adde:	e039      	b.n	ae54 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    ade0:	7fbb      	ldrb	r3, [r7, #30]
    ade2:	2b00      	cmp	r3, #0
    ade4:	d007      	beq.n	adf6 <_usb_d_dev_ep_init+0xc6>
    ade6:	693b      	ldr	r3, [r7, #16]
    ade8:	685b      	ldr	r3, [r3, #4]
    adea:	2b00      	cmp	r3, #0
    adec:	bf14      	ite	ne
    adee:	2301      	movne	r3, #1
    adf0:	2300      	moveq	r3, #0
    adf2:	b2db      	uxtb	r3, r3
    adf4:	e006      	b.n	ae04 <_usb_d_dev_ep_init+0xd4>
    adf6:	693b      	ldr	r3, [r7, #16]
    adf8:	681b      	ldr	r3, [r3, #0]
    adfa:	2b00      	cmp	r3, #0
    adfc:	bf14      	ite	ne
    adfe:	2301      	movne	r3, #1
    ae00:	2300      	moveq	r3, #0
    ae02:	b2db      	uxtb	r3, r3
    ae04:	2b00      	cmp	r3, #0
    ae06:	d00f      	beq.n	ae28 <_usb_d_dev_ep_init+0xf8>
    ae08:	7fbb      	ldrb	r3, [r7, #30]
    ae0a:	2b00      	cmp	r3, #0
    ae0c:	d003      	beq.n	ae16 <_usb_d_dev_ep_init+0xe6>
    ae0e:	693b      	ldr	r3, [r7, #16]
    ae10:	895b      	ldrh	r3, [r3, #10]
    ae12:	461a      	mov	r2, r3
    ae14:	e002      	b.n	ae1c <_usb_d_dev_ep_init+0xec>
    ae16:	693b      	ldr	r3, [r7, #16]
    ae18:	891b      	ldrh	r3, [r3, #8]
    ae1a:	461a      	mov	r2, r3
    ae1c:	88bb      	ldrh	r3, [r7, #4]
    ae1e:	429a      	cmp	r2, r3
    ae20:	da02      	bge.n	ae28 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    ae22:	f06f 0312 	mvn.w	r3, #18
    ae26:	e015      	b.n	ae54 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    ae28:	7fbb      	ldrb	r3, [r7, #30]
    ae2a:	2b00      	cmp	r3, #0
    ae2c:	d002      	beq.n	ae34 <_usb_d_dev_ep_init+0x104>
    ae2e:	693b      	ldr	r3, [r7, #16]
    ae30:	685b      	ldr	r3, [r3, #4]
    ae32:	e001      	b.n	ae38 <_usb_d_dev_ep_init+0x108>
    ae34:	693b      	ldr	r3, [r7, #16]
    ae36:	681b      	ldr	r3, [r3, #0]
    ae38:	69ba      	ldr	r2, [r7, #24]
    ae3a:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    ae3c:	69bb      	ldr	r3, [r7, #24]
    ae3e:	88ba      	ldrh	r2, [r7, #4]
    ae40:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    ae42:	7dfb      	ldrb	r3, [r7, #23]
    ae44:	3301      	adds	r3, #1
    ae46:	b2da      	uxtb	r2, r3
    ae48:	69bb      	ldr	r3, [r7, #24]
    ae4a:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    ae4c:	69bb      	ldr	r3, [r7, #24]
    ae4e:	79fa      	ldrb	r2, [r7, #7]
    ae50:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    ae52:	2300      	movs	r3, #0
}
    ae54:	4618      	mov	r0, r3
    ae56:	3720      	adds	r7, #32
    ae58:	46bd      	mov	sp, r7
    ae5a:	bd80      	pop	{r7, pc}
    ae5c:	00009d61 	.word	0x00009d61
    ae60:	000102a4 	.word	0x000102a4

0000ae64 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    ae64:	b580      	push	{r7, lr}
    ae66:	b086      	sub	sp, #24
    ae68:	af00      	add	r7, sp, #0
    ae6a:	4603      	mov	r3, r0
    ae6c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    ae6e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ae72:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    ae74:	79fb      	ldrb	r3, [r7, #7]
    ae76:	f003 030f 	and.w	r3, r3, #15
    ae7a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    ae7c:	79fb      	ldrb	r3, [r7, #7]
    ae7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ae82:	2b00      	cmp	r3, #0
    ae84:	bf14      	ite	ne
    ae86:	2301      	movne	r3, #1
    ae88:	2300      	moveq	r3, #0
    ae8a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ae8c:	7cba      	ldrb	r2, [r7, #18]
    ae8e:	7cfb      	ldrb	r3, [r7, #19]
    ae90:	4611      	mov	r1, r2
    ae92:	4618      	mov	r0, r3
    ae94:	4b2a      	ldr	r3, [pc, #168]	; (af40 <_usb_d_dev_ep_deinit+0xdc>)
    ae96:	4798      	blx	r3
    ae98:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    ae9a:	7cfb      	ldrb	r3, [r7, #19]
    ae9c:	2b04      	cmp	r3, #4
    ae9e:	d84a      	bhi.n	af36 <_usb_d_dev_ep_deinit+0xd2>
    aea0:	68fb      	ldr	r3, [r7, #12]
    aea2:	7c9b      	ldrb	r3, [r3, #18]
    aea4:	2bff      	cmp	r3, #255	; 0xff
    aea6:	d046      	beq.n	af36 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    aea8:	7cbb      	ldrb	r3, [r7, #18]
    aeaa:	2203      	movs	r2, #3
    aeac:	4619      	mov	r1, r3
    aeae:	68f8      	ldr	r0, [r7, #12]
    aeb0:	4b24      	ldr	r3, [pc, #144]	; (af44 <_usb_d_dev_ep_deinit+0xe0>)
    aeb2:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    aeb4:	68fb      	ldr	r3, [r7, #12]
    aeb6:	7cdb      	ldrb	r3, [r3, #19]
    aeb8:	f003 0307 	and.w	r3, r3, #7
    aebc:	b2db      	uxtb	r3, r3
    aebe:	2b01      	cmp	r3, #1
    aec0:	d107      	bne.n	aed2 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    aec2:	79fb      	ldrb	r3, [r7, #7]
    aec4:	697a      	ldr	r2, [r7, #20]
    aec6:	3308      	adds	r3, #8
    aec8:	015b      	lsls	r3, r3, #5
    aeca:	4413      	add	r3, r2
    aecc:	2200      	movs	r2, #0
    aece:	701a      	strb	r2, [r3, #0]
    aed0:	e02a      	b.n	af28 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    aed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    aed6:	2b00      	cmp	r3, #0
    aed8:	da15      	bge.n	af06 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    aeda:	79fb      	ldrb	r3, [r7, #7]
    aedc:	f003 030f 	and.w	r3, r3, #15
    aee0:	79fa      	ldrb	r2, [r7, #7]
    aee2:	f002 020f 	and.w	r2, r2, #15
    aee6:	6979      	ldr	r1, [r7, #20]
    aee8:	3208      	adds	r2, #8
    aeea:	0152      	lsls	r2, r2, #5
    aeec:	440a      	add	r2, r1
    aeee:	7812      	ldrb	r2, [r2, #0]
    aef0:	b2d2      	uxtb	r2, r2
    aef2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    aef6:	b2d1      	uxtb	r1, r2
    aef8:	697a      	ldr	r2, [r7, #20]
    aefa:	3308      	adds	r3, #8
    aefc:	015b      	lsls	r3, r3, #5
    aefe:	4413      	add	r3, r2
    af00:	460a      	mov	r2, r1
    af02:	701a      	strb	r2, [r3, #0]
    af04:	e010      	b.n	af28 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    af06:	79fb      	ldrb	r3, [r7, #7]
    af08:	79fa      	ldrb	r2, [r7, #7]
    af0a:	6979      	ldr	r1, [r7, #20]
    af0c:	3208      	adds	r2, #8
    af0e:	0152      	lsls	r2, r2, #5
    af10:	440a      	add	r2, r1
    af12:	7812      	ldrb	r2, [r2, #0]
    af14:	b2d2      	uxtb	r2, r2
    af16:	f022 0207 	bic.w	r2, r2, #7
    af1a:	b2d1      	uxtb	r1, r2
    af1c:	697a      	ldr	r2, [r7, #20]
    af1e:	3308      	adds	r3, #8
    af20:	015b      	lsls	r3, r3, #5
    af22:	4413      	add	r3, r2
    af24:	460a      	mov	r2, r1
    af26:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    af28:	68fb      	ldr	r3, [r7, #12]
    af2a:	2200      	movs	r2, #0
    af2c:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    af2e:	68fb      	ldr	r3, [r7, #12]
    af30:	22ff      	movs	r2, #255	; 0xff
    af32:	749a      	strb	r2, [r3, #18]
    af34:	e000      	b.n	af38 <_usb_d_dev_ep_deinit+0xd4>
		return;
    af36:	bf00      	nop
}
    af38:	3718      	adds	r7, #24
    af3a:	46bd      	mov	sp, r7
    af3c:	bd80      	pop	{r7, pc}
    af3e:	bf00      	nop
    af40:	00009d61 	.word	0x00009d61
    af44:	0000b399 	.word	0x0000b399

0000af48 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    af48:	b5b0      	push	{r4, r5, r7, lr}
    af4a:	b088      	sub	sp, #32
    af4c:	af00      	add	r7, sp, #0
    af4e:	4603      	mov	r3, r0
    af50:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    af52:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    af56:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    af58:	79fb      	ldrb	r3, [r7, #7]
    af5a:	f003 030f 	and.w	r3, r3, #15
    af5e:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    af60:	79fb      	ldrb	r3, [r7, #7]
    af62:	f003 0380 	and.w	r3, r3, #128	; 0x80
    af66:	2b00      	cmp	r3, #0
    af68:	bf14      	ite	ne
    af6a:	2301      	movne	r3, #1
    af6c:	2300      	moveq	r3, #0
    af6e:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    af70:	7eba      	ldrb	r2, [r7, #26]
    af72:	7efb      	ldrb	r3, [r7, #27]
    af74:	4611      	mov	r1, r2
    af76:	4618      	mov	r0, r3
    af78:	4b70      	ldr	r3, [pc, #448]	; (b13c <_usb_d_dev_ep_enable+0x1f4>)
    af7a:	4798      	blx	r3
    af7c:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    af7e:	7efb      	ldrb	r3, [r7, #27]
    af80:	4619      	mov	r1, r3
    af82:	69f8      	ldr	r0, [r7, #28]
    af84:	4b6e      	ldr	r3, [pc, #440]	; (b140 <_usb_d_dev_ep_enable+0x1f8>)
    af86:	4798      	blx	r3
    af88:	4603      	mov	r3, r0
    af8a:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    af8c:	7efb      	ldrb	r3, [r7, #27]
    af8e:	2b04      	cmp	r3, #4
    af90:	d803      	bhi.n	af9a <_usb_d_dev_ep_enable+0x52>
    af92:	697b      	ldr	r3, [r7, #20]
    af94:	7c9b      	ldrb	r3, [r3, #18]
    af96:	2bff      	cmp	r3, #255	; 0xff
    af98:	d102      	bne.n	afa0 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    af9a:	f06f 0311 	mvn.w	r3, #17
    af9e:	e0c8      	b.n	b132 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    afa0:	7efb      	ldrb	r3, [r7, #27]
    afa2:	015b      	lsls	r3, r3, #5
    afa4:	4a67      	ldr	r2, [pc, #412]	; (b144 <_usb_d_dev_ep_enable+0x1fc>)
    afa6:	4413      	add	r3, r2
    afa8:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    afaa:	697b      	ldr	r3, [r7, #20]
    afac:	7cdb      	ldrb	r3, [r3, #19]
    afae:	f003 0307 	and.w	r3, r3, #7
    afb2:	b2db      	uxtb	r3, r3
    afb4:	2b01      	cmp	r3, #1
    afb6:	d14b      	bne.n	b050 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    afb8:	7cfb      	ldrb	r3, [r7, #19]
    afba:	f003 0377 	and.w	r3, r3, #119	; 0x77
    afbe:	2b00      	cmp	r3, #0
    afc0:	d002      	beq.n	afc8 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    afc2:	f06f 0313 	mvn.w	r3, #19
    afc6:	e0b4      	b.n	b132 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    afc8:	7efb      	ldrb	r3, [r7, #27]
    afca:	2211      	movs	r2, #17
    afcc:	4619      	mov	r1, r3
    afce:	69f8      	ldr	r0, [r7, #28]
    afd0:	4b5d      	ldr	r3, [pc, #372]	; (b148 <_usb_d_dev_ep_enable+0x200>)
    afd2:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    afd4:	697b      	ldr	r3, [r7, #20]
    afd6:	8a1b      	ldrh	r3, [r3, #16]
    afd8:	039b      	lsls	r3, r3, #14
    afda:	4c5c      	ldr	r4, [pc, #368]	; (b14c <_usb_d_dev_ep_enable+0x204>)
    afdc:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    afde:	697b      	ldr	r3, [r7, #20]
    afe0:	8a1b      	ldrh	r3, [r3, #16]
    afe2:	4618      	mov	r0, r3
    afe4:	4b5a      	ldr	r3, [pc, #360]	; (b150 <_usb_d_dev_ep_enable+0x208>)
    afe6:	4798      	blx	r3
    afe8:	4603      	mov	r3, r0
    afea:	071b      	lsls	r3, r3, #28
    afec:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    aff0:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    aff4:	68fb      	ldr	r3, [r7, #12]
    aff6:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    aff8:	68fb      	ldr	r3, [r7, #12]
    affa:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    affe:	697b      	ldr	r3, [r7, #20]
    b000:	8a1b      	ldrh	r3, [r3, #16]
    b002:	f3c3 050d 	ubfx	r5, r3, #0, #14
    b006:	697b      	ldr	r3, [r7, #20]
    b008:	8a1b      	ldrh	r3, [r3, #16]
    b00a:	4618      	mov	r0, r3
    b00c:	4b50      	ldr	r3, [pc, #320]	; (b150 <_usb_d_dev_ep_enable+0x208>)
    b00e:	4798      	blx	r3
    b010:	4603      	mov	r3, r0
    b012:	071b      	lsls	r3, r3, #28
    b014:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b018:	432b      	orrs	r3, r5
    b01a:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b01c:	7efb      	ldrb	r3, [r7, #27]
    b01e:	2200      	movs	r2, #0
    b020:	2100      	movs	r1, #0
    b022:	4618      	mov	r0, r3
    b024:	4b4b      	ldr	r3, [pc, #300]	; (b154 <_usb_d_dev_ep_enable+0x20c>)
    b026:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    b028:	7efb      	ldrb	r3, [r7, #27]
    b02a:	2200      	movs	r2, #0
    b02c:	2101      	movs	r1, #1
    b02e:	4618      	mov	r0, r3
    b030:	4b49      	ldr	r3, [pc, #292]	; (b158 <_usb_d_dev_ep_enable+0x210>)
    b032:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    b034:	7efb      	ldrb	r3, [r7, #27]
    b036:	2100      	movs	r1, #0
    b038:	4618      	mov	r0, r3
    b03a:	4b48      	ldr	r3, [pc, #288]	; (b15c <_usb_d_dev_ep_enable+0x214>)
    b03c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    b03e:	7efb      	ldrb	r3, [r7, #27]
    b040:	2101      	movs	r1, #1
    b042:	4618      	mov	r0, r3
    b044:	4b45      	ldr	r3, [pc, #276]	; (b15c <_usb_d_dev_ep_enable+0x214>)
    b046:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    b048:	6978      	ldr	r0, [r7, #20]
    b04a:	4b45      	ldr	r3, [pc, #276]	; (b160 <_usb_d_dev_ep_enable+0x218>)
    b04c:	4798      	blx	r3
    b04e:	e06f      	b.n	b130 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    b050:	7ebb      	ldrb	r3, [r7, #26]
    b052:	2b00      	cmp	r3, #0
    b054:	d038      	beq.n	b0c8 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    b056:	7cfb      	ldrb	r3, [r7, #19]
    b058:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b05c:	2b00      	cmp	r3, #0
    b05e:	d002      	beq.n	b066 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    b060:	f06f 0313 	mvn.w	r3, #19
    b064:	e065      	b.n	b132 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    b066:	697b      	ldr	r3, [r7, #20]
    b068:	7cdb      	ldrb	r3, [r3, #19]
    b06a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b06e:	b2db      	uxtb	r3, r3
    b070:	011b      	lsls	r3, r3, #4
    b072:	b2db      	uxtb	r3, r3
    b074:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b078:	b2da      	uxtb	r2, r3
    b07a:	7cfb      	ldrb	r3, [r7, #19]
    b07c:	4313      	orrs	r3, r2
    b07e:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    b080:	7cfa      	ldrb	r2, [r7, #19]
    b082:	7efb      	ldrb	r3, [r7, #27]
    b084:	4619      	mov	r1, r3
    b086:	69f8      	ldr	r0, [r7, #28]
    b088:	4b2f      	ldr	r3, [pc, #188]	; (b148 <_usb_d_dev_ep_enable+0x200>)
    b08a:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    b08c:	68fb      	ldr	r3, [r7, #12]
    b08e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b092:	697b      	ldr	r3, [r7, #20]
    b094:	8a1b      	ldrh	r3, [r3, #16]
    b096:	f3c3 050d 	ubfx	r5, r3, #0, #14
    b09a:	697b      	ldr	r3, [r7, #20]
    b09c:	8a1b      	ldrh	r3, [r3, #16]
    b09e:	4618      	mov	r0, r3
    b0a0:	4b2b      	ldr	r3, [pc, #172]	; (b150 <_usb_d_dev_ep_enable+0x208>)
    b0a2:	4798      	blx	r3
    b0a4:	4603      	mov	r3, r0
    b0a6:	071b      	lsls	r3, r3, #28
    b0a8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b0ac:	432b      	orrs	r3, r5
    b0ae:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b0b0:	7efb      	ldrb	r3, [r7, #27]
    b0b2:	2200      	movs	r2, #0
    b0b4:	2101      	movs	r1, #1
    b0b6:	4618      	mov	r0, r3
    b0b8:	4b27      	ldr	r3, [pc, #156]	; (b158 <_usb_d_dev_ep_enable+0x210>)
    b0ba:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    b0bc:	7efb      	ldrb	r3, [r7, #27]
    b0be:	2101      	movs	r1, #1
    b0c0:	4618      	mov	r0, r3
    b0c2:	4b26      	ldr	r3, [pc, #152]	; (b15c <_usb_d_dev_ep_enable+0x214>)
    b0c4:	4798      	blx	r3
    b0c6:	e033      	b.n	b130 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    b0c8:	7cfb      	ldrb	r3, [r7, #19]
    b0ca:	f003 0307 	and.w	r3, r3, #7
    b0ce:	2b00      	cmp	r3, #0
    b0d0:	d002      	beq.n	b0d8 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    b0d2:	f06f 0313 	mvn.w	r3, #19
    b0d6:	e02c      	b.n	b132 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    b0d8:	697b      	ldr	r3, [r7, #20]
    b0da:	7cdb      	ldrb	r3, [r3, #19]
    b0dc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b0e0:	b2db      	uxtb	r3, r3
    b0e2:	461a      	mov	r2, r3
    b0e4:	7cfb      	ldrb	r3, [r7, #19]
    b0e6:	4313      	orrs	r3, r2
    b0e8:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    b0ea:	7cfa      	ldrb	r2, [r7, #19]
    b0ec:	7efb      	ldrb	r3, [r7, #27]
    b0ee:	4619      	mov	r1, r3
    b0f0:	69f8      	ldr	r0, [r7, #28]
    b0f2:	4b15      	ldr	r3, [pc, #84]	; (b148 <_usb_d_dev_ep_enable+0x200>)
    b0f4:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b0f6:	697b      	ldr	r3, [r7, #20]
    b0f8:	8a1b      	ldrh	r3, [r3, #16]
    b0fa:	039b      	lsls	r3, r3, #14
    b0fc:	4c13      	ldr	r4, [pc, #76]	; (b14c <_usb_d_dev_ep_enable+0x204>)
    b0fe:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b100:	697b      	ldr	r3, [r7, #20]
    b102:	8a1b      	ldrh	r3, [r3, #16]
    b104:	4618      	mov	r0, r3
    b106:	4b12      	ldr	r3, [pc, #72]	; (b150 <_usb_d_dev_ep_enable+0x208>)
    b108:	4798      	blx	r3
    b10a:	4603      	mov	r3, r0
    b10c:	071b      	lsls	r3, r3, #28
    b10e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b112:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b116:	68fb      	ldr	r3, [r7, #12]
    b118:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b11a:	7efb      	ldrb	r3, [r7, #27]
    b11c:	2200      	movs	r2, #0
    b11e:	2100      	movs	r1, #0
    b120:	4618      	mov	r0, r3
    b122:	4b0c      	ldr	r3, [pc, #48]	; (b154 <_usb_d_dev_ep_enable+0x20c>)
    b124:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    b126:	7efb      	ldrb	r3, [r7, #27]
    b128:	2100      	movs	r1, #0
    b12a:	4618      	mov	r0, r3
    b12c:	4b0b      	ldr	r3, [pc, #44]	; (b15c <_usb_d_dev_ep_enable+0x214>)
    b12e:	4798      	blx	r3
	}

	return USB_OK;
    b130:	2300      	movs	r3, #0
}
    b132:	4618      	mov	r0, r3
    b134:	3720      	adds	r7, #32
    b136:	46bd      	mov	sp, r7
    b138:	bdb0      	pop	{r4, r5, r7, pc}
    b13a:	bf00      	nop
    b13c:	00009d61 	.word	0x00009d61
    b140:	000093e7 	.word	0x000093e7
    b144:	20000f30 	.word	0x20000f30
    b148:	000093bd 	.word	0x000093bd
    b14c:	0fffc000 	.word	0x0fffc000
    b150:	00009cfd 	.word	0x00009cfd
    b154:	00009ca5 	.word	0x00009ca5
    b158:	00009c4d 	.word	0x00009c4d
    b15c:	00009c15 	.word	0x00009c15
    b160:	0000acb9 	.word	0x0000acb9

0000b164 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    b164:	b580      	push	{r7, lr}
    b166:	b084      	sub	sp, #16
    b168:	af00      	add	r7, sp, #0
    b16a:	6078      	str	r0, [r7, #4]
    b16c:	460b      	mov	r3, r1
    b16e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b170:	687b      	ldr	r3, [r7, #4]
    b172:	7c9b      	ldrb	r3, [r3, #18]
    b174:	f003 030f 	and.w	r3, r3, #15
    b178:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    b17a:	78fa      	ldrb	r2, [r7, #3]
    b17c:	7bfb      	ldrb	r3, [r7, #15]
    b17e:	4611      	mov	r1, r2
    b180:	4618      	mov	r0, r3
    b182:	4b03      	ldr	r3, [pc, #12]	; (b190 <_usb_d_dev_ep_stall_get+0x2c>)
    b184:	4798      	blx	r3
    b186:	4603      	mov	r3, r0
}
    b188:	4618      	mov	r0, r3
    b18a:	3710      	adds	r7, #16
    b18c:	46bd      	mov	sp, r7
    b18e:	bd80      	pop	{r7, pc}
    b190:	00009855 	.word	0x00009855

0000b194 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    b194:	b580      	push	{r7, lr}
    b196:	b084      	sub	sp, #16
    b198:	af00      	add	r7, sp, #0
    b19a:	6078      	str	r0, [r7, #4]
    b19c:	460b      	mov	r3, r1
    b19e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b1a0:	687b      	ldr	r3, [r7, #4]
    b1a2:	7c9b      	ldrb	r3, [r3, #18]
    b1a4:	f003 030f 	and.w	r3, r3, #15
    b1a8:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    b1aa:	78f9      	ldrb	r1, [r7, #3]
    b1ac:	7bfb      	ldrb	r3, [r7, #15]
    b1ae:	2201      	movs	r2, #1
    b1b0:	4618      	mov	r0, r3
    b1b2:	4b0a      	ldr	r3, [pc, #40]	; (b1dc <_usb_d_dev_ep_stall_set+0x48>)
    b1b4:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b1b6:	78fb      	ldrb	r3, [r7, #3]
    b1b8:	2220      	movs	r2, #32
    b1ba:	409a      	lsls	r2, r3
    b1bc:	7bfb      	ldrb	r3, [r7, #15]
    b1be:	4611      	mov	r1, r2
    b1c0:	4618      	mov	r0, r3
    b1c2:	4b07      	ldr	r3, [pc, #28]	; (b1e0 <_usb_d_dev_ep_stall_set+0x4c>)
    b1c4:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    b1c6:	687a      	ldr	r2, [r7, #4]
    b1c8:	7cd3      	ldrb	r3, [r2, #19]
    b1ca:	f043 0308 	orr.w	r3, r3, #8
    b1ce:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    b1d0:	2300      	movs	r3, #0
}
    b1d2:	4618      	mov	r0, r3
    b1d4:	3710      	adds	r7, #16
    b1d6:	46bd      	mov	sp, r7
    b1d8:	bd80      	pop	{r7, pc}
    b1da:	bf00      	nop
    b1dc:	000097fd 	.word	0x000097fd
    b1e0:	0000977d 	.word	0x0000977d

0000b1e4 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    b1e4:	b580      	push	{r7, lr}
    b1e6:	b084      	sub	sp, #16
    b1e8:	af00      	add	r7, sp, #0
    b1ea:	6078      	str	r0, [r7, #4]
    b1ec:	460b      	mov	r3, r1
    b1ee:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    b1f0:	687b      	ldr	r3, [r7, #4]
    b1f2:	7c9b      	ldrb	r3, [r3, #18]
    b1f4:	f003 030f 	and.w	r3, r3, #15
    b1f8:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    b1fa:	78fa      	ldrb	r2, [r7, #3]
    b1fc:	7bfb      	ldrb	r3, [r7, #15]
    b1fe:	4611      	mov	r1, r2
    b200:	4618      	mov	r0, r3
    b202:	4b28      	ldr	r3, [pc, #160]	; (b2a4 <_usb_d_dev_ep_stall_clr+0xc0>)
    b204:	4798      	blx	r3
    b206:	4603      	mov	r3, r0
    b208:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    b20a:	7bbb      	ldrb	r3, [r7, #14]
    b20c:	f083 0301 	eor.w	r3, r3, #1
    b210:	b2db      	uxtb	r3, r3
    b212:	2b00      	cmp	r3, #0
    b214:	d001      	beq.n	b21a <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    b216:	2300      	movs	r3, #0
    b218:	e040      	b.n	b29c <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    b21a:	78f9      	ldrb	r1, [r7, #3]
    b21c:	7bfb      	ldrb	r3, [r7, #15]
    b21e:	2200      	movs	r2, #0
    b220:	4618      	mov	r0, r3
    b222:	4b21      	ldr	r3, [pc, #132]	; (b2a8 <_usb_d_dev_ep_stall_clr+0xc4>)
    b224:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b226:	78fb      	ldrb	r3, [r7, #3]
    b228:	2220      	movs	r2, #32
    b22a:	409a      	lsls	r2, r3
    b22c:	7bfb      	ldrb	r3, [r7, #15]
    b22e:	4611      	mov	r1, r2
    b230:	4618      	mov	r0, r3
    b232:	4b1e      	ldr	r3, [pc, #120]	; (b2ac <_usb_d_dev_ep_stall_clr+0xc8>)
    b234:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    b236:	78fa      	ldrb	r2, [r7, #3]
    b238:	7bfb      	ldrb	r3, [r7, #15]
    b23a:	4611      	mov	r1, r2
    b23c:	4618      	mov	r0, r3
    b23e:	4b1c      	ldr	r3, [pc, #112]	; (b2b0 <_usb_d_dev_ep_stall_clr+0xcc>)
    b240:	4798      	blx	r3
    b242:	4603      	mov	r3, r0
    b244:	2b00      	cmp	r3, #0
    b246:	d00b      	beq.n	b260 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    b248:	78fa      	ldrb	r2, [r7, #3]
    b24a:	7bfb      	ldrb	r3, [r7, #15]
    b24c:	4611      	mov	r1, r2
    b24e:	4618      	mov	r0, r3
    b250:	4b18      	ldr	r3, [pc, #96]	; (b2b4 <_usb_d_dev_ep_stall_clr+0xd0>)
    b252:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    b254:	78f9      	ldrb	r1, [r7, #3]
    b256:	7bfb      	ldrb	r3, [r7, #15]
    b258:	2200      	movs	r2, #0
    b25a:	4618      	mov	r0, r3
    b25c:	4b16      	ldr	r3, [pc, #88]	; (b2b8 <_usb_d_dev_ep_stall_clr+0xd4>)
    b25e:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    b260:	687b      	ldr	r3, [r7, #4]
    b262:	7cdb      	ldrb	r3, [r3, #19]
    b264:	f003 0307 	and.w	r3, r3, #7
    b268:	b2db      	uxtb	r3, r3
    b26a:	2b01      	cmp	r3, #1
    b26c:	d110      	bne.n	b290 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    b26e:	7bfb      	ldrb	r3, [r7, #15]
    b270:	4619      	mov	r1, r3
    b272:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b276:	4b11      	ldr	r3, [pc, #68]	; (b2bc <_usb_d_dev_ep_stall_clr+0xd8>)
    b278:	4798      	blx	r3
    b27a:	4603      	mov	r3, r0
    b27c:	f003 0330 	and.w	r3, r3, #48	; 0x30
    b280:	2b00      	cmp	r3, #0
    b282:	d10a      	bne.n	b29a <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    b284:	687a      	ldr	r2, [r7, #4]
    b286:	7cd3      	ldrb	r3, [r2, #19]
    b288:	f36f 03c3 	bfc	r3, #3, #1
    b28c:	74d3      	strb	r3, [r2, #19]
    b28e:	e004      	b.n	b29a <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    b290:	687a      	ldr	r2, [r7, #4]
    b292:	7cd3      	ldrb	r3, [r2, #19]
    b294:	f36f 03c3 	bfc	r3, #3, #1
    b298:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    b29a:	2300      	movs	r3, #0
}
    b29c:	4618      	mov	r0, r3
    b29e:	3710      	adds	r7, #16
    b2a0:	46bd      	mov	sp, r7
    b2a2:	bd80      	pop	{r7, pc}
    b2a4:	00009855 	.word	0x00009855
    b2a8:	000097fd 	.word	0x000097fd
    b2ac:	000097a5 	.word	0x000097a5
    b2b0:	00009899 	.word	0x00009899
    b2b4:	000098dd 	.word	0x000098dd
    b2b8:	000099c9 	.word	0x000099c9
    b2bc:	00009285 	.word	0x00009285

0000b2c0 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    b2c0:	b580      	push	{r7, lr}
    b2c2:	b086      	sub	sp, #24
    b2c4:	af00      	add	r7, sp, #0
    b2c6:	4603      	mov	r3, r0
    b2c8:	460a      	mov	r2, r1
    b2ca:	71fb      	strb	r3, [r7, #7]
    b2cc:	4613      	mov	r3, r2
    b2ce:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    b2d0:	79fb      	ldrb	r3, [r7, #7]
    b2d2:	f003 030f 	and.w	r3, r3, #15
    b2d6:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    b2d8:	79fb      	ldrb	r3, [r7, #7]
    b2da:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b2de:	2b00      	cmp	r3, #0
    b2e0:	bf14      	ite	ne
    b2e2:	2301      	movne	r3, #1
    b2e4:	2300      	moveq	r3, #0
    b2e6:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b2e8:	7cba      	ldrb	r2, [r7, #18]
    b2ea:	7cfb      	ldrb	r3, [r7, #19]
    b2ec:	4611      	mov	r1, r2
    b2ee:	4618      	mov	r0, r3
    b2f0:	4b13      	ldr	r3, [pc, #76]	; (b340 <_usb_d_dev_ep_stall+0x80>)
    b2f2:	4798      	blx	r3
    b2f4:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b2f6:	7cfb      	ldrb	r3, [r7, #19]
    b2f8:	2b04      	cmp	r3, #4
    b2fa:	d902      	bls.n	b302 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    b2fc:	f06f 0311 	mvn.w	r3, #17
    b300:	e01a      	b.n	b338 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    b302:	79bb      	ldrb	r3, [r7, #6]
    b304:	2b01      	cmp	r3, #1
    b306:	d106      	bne.n	b316 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    b308:	7cbb      	ldrb	r3, [r7, #18]
    b30a:	4619      	mov	r1, r3
    b30c:	68f8      	ldr	r0, [r7, #12]
    b30e:	4b0d      	ldr	r3, [pc, #52]	; (b344 <_usb_d_dev_ep_stall+0x84>)
    b310:	4798      	blx	r3
    b312:	6178      	str	r0, [r7, #20]
    b314:	e00f      	b.n	b336 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    b316:	79bb      	ldrb	r3, [r7, #6]
    b318:	2b00      	cmp	r3, #0
    b31a:	d106      	bne.n	b32a <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    b31c:	7cbb      	ldrb	r3, [r7, #18]
    b31e:	4619      	mov	r1, r3
    b320:	68f8      	ldr	r0, [r7, #12]
    b322:	4b09      	ldr	r3, [pc, #36]	; (b348 <_usb_d_dev_ep_stall+0x88>)
    b324:	4798      	blx	r3
    b326:	6178      	str	r0, [r7, #20]
    b328:	e005      	b.n	b336 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    b32a:	7cbb      	ldrb	r3, [r7, #18]
    b32c:	4619      	mov	r1, r3
    b32e:	68f8      	ldr	r0, [r7, #12]
    b330:	4b06      	ldr	r3, [pc, #24]	; (b34c <_usb_d_dev_ep_stall+0x8c>)
    b332:	4798      	blx	r3
    b334:	6178      	str	r0, [r7, #20]
	}
	return rc;
    b336:	697b      	ldr	r3, [r7, #20]
}
    b338:	4618      	mov	r0, r3
    b33a:	3718      	adds	r7, #24
    b33c:	46bd      	mov	sp, r7
    b33e:	bd80      	pop	{r7, pc}
    b340:	00009d61 	.word	0x00009d61
    b344:	0000b195 	.word	0x0000b195
    b348:	0000b1e5 	.word	0x0000b1e5
    b34c:	0000b165 	.word	0x0000b165

0000b350 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    b350:	b580      	push	{r7, lr}
    b352:	b082      	sub	sp, #8
    b354:	af00      	add	r7, sp, #0
    b356:	6078      	str	r0, [r7, #4]
    b358:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b35a:	687b      	ldr	r3, [r7, #4]
    b35c:	7c9b      	ldrb	r3, [r3, #18]
    b35e:	2bff      	cmp	r3, #255	; 0xff
    b360:	d014      	beq.n	b38c <_usb_d_dev_trans_done+0x3c>
    b362:	687b      	ldr	r3, [r7, #4]
    b364:	7cdb      	ldrb	r3, [r3, #19]
    b366:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b36a:	b2db      	uxtb	r3, r3
    b36c:	2b00      	cmp	r3, #0
    b36e:	d00d      	beq.n	b38c <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    b370:	687a      	ldr	r2, [r7, #4]
    b372:	7cd3      	ldrb	r3, [r2, #19]
    b374:	f36f 1386 	bfc	r3, #6, #1
    b378:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    b37a:	4b06      	ldr	r3, [pc, #24]	; (b394 <_usb_d_dev_trans_done+0x44>)
    b37c:	691b      	ldr	r3, [r3, #16]
    b37e:	687a      	ldr	r2, [r7, #4]
    b380:	7c90      	ldrb	r0, [r2, #18]
    b382:	687a      	ldr	r2, [r7, #4]
    b384:	6892      	ldr	r2, [r2, #8]
    b386:	6839      	ldr	r1, [r7, #0]
    b388:	4798      	blx	r3
    b38a:	e000      	b.n	b38e <_usb_d_dev_trans_done+0x3e>
		return;
    b38c:	bf00      	nop
}
    b38e:	3708      	adds	r7, #8
    b390:	46bd      	mov	sp, r7
    b392:	bd80      	pop	{r7, pc}
    b394:	20000e68 	.word	0x20000e68

0000b398 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    b398:	b580      	push	{r7, lr}
    b39a:	b086      	sub	sp, #24
    b39c:	af00      	add	r7, sp, #0
    b39e:	60f8      	str	r0, [r7, #12]
    b3a0:	460b      	mov	r3, r1
    b3a2:	607a      	str	r2, [r7, #4]
    b3a4:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b3a6:	68fb      	ldr	r3, [r7, #12]
    b3a8:	7c9b      	ldrb	r3, [r3, #18]
    b3aa:	f003 030f 	and.w	r3, r3, #15
    b3ae:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    b3b0:	4b1f      	ldr	r3, [pc, #124]	; (b430 <_usb_d_dev_trans_stop+0x98>)
    b3b2:	881b      	ldrh	r3, [r3, #0]
    b3b4:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b3b6:	68fb      	ldr	r3, [r7, #12]
    b3b8:	7c9b      	ldrb	r3, [r3, #18]
    b3ba:	2bff      	cmp	r3, #255	; 0xff
    b3bc:	d033      	beq.n	b426 <_usb_d_dev_trans_stop+0x8e>
    b3be:	68fb      	ldr	r3, [r7, #12]
    b3c0:	7cdb      	ldrb	r3, [r3, #19]
    b3c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b3c6:	b2db      	uxtb	r3, r3
    b3c8:	2b00      	cmp	r3, #0
    b3ca:	d02c      	beq.n	b426 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    b3cc:	7afb      	ldrb	r3, [r7, #11]
    b3ce:	2b00      	cmp	r3, #0
    b3d0:	d006      	beq.n	b3e0 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b3d2:	7dfb      	ldrb	r3, [r7, #23]
    b3d4:	2200      	movs	r2, #0
    b3d6:	2101      	movs	r1, #1
    b3d8:	4618      	mov	r0, r3
    b3da:	4b16      	ldr	r3, [pc, #88]	; (b434 <_usb_d_dev_trans_stop+0x9c>)
    b3dc:	4798      	blx	r3
    b3de:	e005      	b.n	b3ec <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b3e0:	7dfb      	ldrb	r3, [r7, #23]
    b3e2:	2200      	movs	r2, #0
    b3e4:	2100      	movs	r1, #0
    b3e6:	4618      	mov	r0, r3
    b3e8:	4b13      	ldr	r3, [pc, #76]	; (b438 <_usb_d_dev_trans_stop+0xa0>)
    b3ea:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    b3ec:	7afb      	ldrb	r3, [r7, #11]
    b3ee:	f107 0218 	add.w	r2, r7, #24
    b3f2:	4413      	add	r3, r2
    b3f4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b3f8:	461a      	mov	r2, r3
    b3fa:	7dfb      	ldrb	r3, [r7, #23]
    b3fc:	4611      	mov	r1, r2
    b3fe:	4618      	mov	r0, r3
    b400:	4b0e      	ldr	r3, [pc, #56]	; (b43c <_usb_d_dev_trans_stop+0xa4>)
    b402:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    b404:	7afb      	ldrb	r3, [r7, #11]
    b406:	f107 0218 	add.w	r2, r7, #24
    b40a:	4413      	add	r3, r2
    b40c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b410:	461a      	mov	r2, r3
    b412:	7dfb      	ldrb	r3, [r7, #23]
    b414:	4611      	mov	r1, r2
    b416:	4618      	mov	r0, r3
    b418:	4b09      	ldr	r3, [pc, #36]	; (b440 <_usb_d_dev_trans_stop+0xa8>)
    b41a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    b41c:	6879      	ldr	r1, [r7, #4]
    b41e:	68f8      	ldr	r0, [r7, #12]
    b420:	4b08      	ldr	r3, [pc, #32]	; (b444 <_usb_d_dev_trans_stop+0xac>)
    b422:	4798      	blx	r3
    b424:	e000      	b.n	b428 <_usb_d_dev_trans_stop+0x90>
		return;
    b426:	bf00      	nop
}
    b428:	3718      	adds	r7, #24
    b42a:	46bd      	mov	sp, r7
    b42c:	bd80      	pop	{r7, pc}
    b42e:	bf00      	nop
    b430:	000102e4 	.word	0x000102e4
    b434:	00009c4d 	.word	0x00009c4d
    b438:	00009ca5 	.word	0x00009ca5
    b43c:	00009755 	.word	0x00009755
    b440:	000097a5 	.word	0x000097a5
    b444:	0000b351 	.word	0x0000b351

0000b448 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    b448:	b580      	push	{r7, lr}
    b44a:	b086      	sub	sp, #24
    b44c:	af00      	add	r7, sp, #0
    b44e:	4603      	mov	r3, r0
    b450:	6039      	str	r1, [r7, #0]
    b452:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    b454:	79fb      	ldrb	r3, [r7, #7]
    b456:	f003 030f 	and.w	r3, r3, #15
    b45a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    b45c:	7dfb      	ldrb	r3, [r7, #23]
    b45e:	015b      	lsls	r3, r3, #5
    b460:	4a1e      	ldr	r2, [pc, #120]	; (b4dc <_usb_d_dev_ep_read_req+0x94>)
    b462:	4413      	add	r3, r2
    b464:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    b466:	693b      	ldr	r3, [r7, #16]
    b468:	681b      	ldr	r3, [r3, #0]
    b46a:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    b46c:	693b      	ldr	r3, [r7, #16]
    b46e:	685b      	ldr	r3, [r3, #4]
    b470:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b474:	b29b      	uxth	r3, r3
    b476:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    b478:	7dfb      	ldrb	r3, [r7, #23]
    b47a:	2b04      	cmp	r3, #4
    b47c:	d802      	bhi.n	b484 <_usb_d_dev_ep_read_req+0x3c>
    b47e:	683b      	ldr	r3, [r7, #0]
    b480:	2b00      	cmp	r3, #0
    b482:	d102      	bne.n	b48a <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    b484:	f06f 0311 	mvn.w	r3, #17
    b488:	e023      	b.n	b4d2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    b48a:	7dfb      	ldrb	r3, [r7, #23]
    b48c:	4618      	mov	r0, r3
    b48e:	4b14      	ldr	r3, [pc, #80]	; (b4e0 <_usb_d_dev_ep_read_req+0x98>)
    b490:	4798      	blx	r3
    b492:	4603      	mov	r3, r0
    b494:	f083 0301 	eor.w	r3, r3, #1
    b498:	b2db      	uxtb	r3, r3
    b49a:	2b00      	cmp	r3, #0
    b49c:	d002      	beq.n	b4a4 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    b49e:	f06f 0312 	mvn.w	r3, #18
    b4a2:	e016      	b.n	b4d2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    b4a4:	7dfb      	ldrb	r3, [r7, #23]
    b4a6:	4618      	mov	r0, r3
    b4a8:	4b0e      	ldr	r3, [pc, #56]	; (b4e4 <_usb_d_dev_ep_read_req+0x9c>)
    b4aa:	4798      	blx	r3
    b4ac:	4603      	mov	r3, r0
    b4ae:	f083 0301 	eor.w	r3, r3, #1
    b4b2:	b2db      	uxtb	r3, r3
    b4b4:	2b00      	cmp	r3, #0
    b4b6:	d001      	beq.n	b4bc <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    b4b8:	2300      	movs	r3, #0
    b4ba:	e00a      	b.n	b4d2 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    b4bc:	68fb      	ldr	r3, [r7, #12]
    b4be:	2208      	movs	r2, #8
    b4c0:	4619      	mov	r1, r3
    b4c2:	6838      	ldr	r0, [r7, #0]
    b4c4:	4b08      	ldr	r3, [pc, #32]	; (b4e8 <_usb_d_dev_ep_read_req+0xa0>)
    b4c6:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    b4c8:	7dfb      	ldrb	r3, [r7, #23]
    b4ca:	4618      	mov	r0, r3
    b4cc:	4b07      	ldr	r3, [pc, #28]	; (b4ec <_usb_d_dev_ep_read_req+0xa4>)
    b4ce:	4798      	blx	r3

	return bytes;
    b4d0:	897b      	ldrh	r3, [r7, #10]
}
    b4d2:	4618      	mov	r0, r3
    b4d4:	3718      	adds	r7, #24
    b4d6:	46bd      	mov	sp, r7
    b4d8:	bd80      	pop	{r7, pc}
    b4da:	bf00      	nop
    b4dc:	20000f30 	.word	0x20000f30
    b4e0:	000097cd 	.word	0x000097cd
    b4e4:	00009979 	.word	0x00009979
    b4e8:	0000fc45 	.word	0x0000fc45
    b4ec:	000099a9 	.word	0x000099a9

0000b4f0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    b4f0:	b580      	push	{r7, lr}
    b4f2:	b086      	sub	sp, #24
    b4f4:	af00      	add	r7, sp, #0
    b4f6:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    b4f8:	687b      	ldr	r3, [r7, #4]
    b4fa:	7a1b      	ldrb	r3, [r3, #8]
    b4fc:	f003 030f 	and.w	r3, r3, #15
    b500:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    b502:	687b      	ldr	r3, [r7, #4]
    b504:	7a1b      	ldrb	r3, [r3, #8]
    b506:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b50a:	2b00      	cmp	r3, #0
    b50c:	bf14      	ite	ne
    b50e:	2301      	movne	r3, #1
    b510:	2300      	moveq	r3, #0
    b512:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b514:	7d7a      	ldrb	r2, [r7, #21]
    b516:	7dbb      	ldrb	r3, [r7, #22]
    b518:	4611      	mov	r1, r2
    b51a:	4618      	mov	r0, r3
    b51c:	4b5f      	ldr	r3, [pc, #380]	; (b69c <_usb_d_dev_ep_trans+0x1ac>)
    b51e:	4798      	blx	r3
    b520:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b522:	693b      	ldr	r3, [r7, #16]
    b524:	8a1b      	ldrh	r3, [r3, #16]
    b526:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b52a:	4293      	cmp	r3, r2
    b52c:	d004      	beq.n	b538 <_usb_d_dev_ep_trans+0x48>
    b52e:	693b      	ldr	r3, [r7, #16]
    b530:	8a1b      	ldrh	r3, [r3, #16]
    b532:	3b01      	subs	r3, #1
    b534:	b29b      	uxth	r3, r3
    b536:	e001      	b.n	b53c <_usb_d_dev_ep_trans+0x4c>
    b538:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b53c:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    b53e:	687b      	ldr	r3, [r7, #4]
    b540:	685a      	ldr	r2, [r3, #4]
    b542:	89fb      	ldrh	r3, [r7, #14]
    b544:	4013      	ands	r3, r2
    b546:	2b00      	cmp	r3, #0
    b548:	bf14      	ite	ne
    b54a:	2301      	movne	r3, #1
    b54c:	2300      	moveq	r3, #0
    b54e:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    b550:	2300      	movs	r3, #0
    b552:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b554:	7dbb      	ldrb	r3, [r7, #22]
    b556:	2b04      	cmp	r3, #4
    b558:	d902      	bls.n	b560 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    b55a:	f06f 0311 	mvn.w	r3, #17
    b55e:	e098      	b.n	b692 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    b560:	687b      	ldr	r3, [r7, #4]
    b562:	681b      	ldr	r3, [r3, #0]
    b564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    b568:	d31a      	bcc.n	b5a0 <_usb_d_dev_ep_trans+0xb0>
    b56a:	687b      	ldr	r3, [r7, #4]
    b56c:	681b      	ldr	r3, [r3, #0]
    b56e:	461a      	mov	r2, r3
    b570:	687b      	ldr	r3, [r7, #4]
    b572:	685b      	ldr	r3, [r3, #4]
    b574:	4413      	add	r3, r2
    b576:	4a4a      	ldr	r2, [pc, #296]	; (b6a0 <_usb_d_dev_ep_trans+0x1b0>)
    b578:	4293      	cmp	r3, r2
    b57a:	d811      	bhi.n	b5a0 <_usb_d_dev_ep_trans+0xb0>
    b57c:	687b      	ldr	r3, [r7, #4]
    b57e:	681b      	ldr	r3, [r3, #0]
    b580:	f003 0303 	and.w	r3, r3, #3
    b584:	2b00      	cmp	r3, #0
    b586:	d10b      	bne.n	b5a0 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    b588:	7d7b      	ldrb	r3, [r7, #21]
    b58a:	f083 0301 	eor.w	r3, r3, #1
    b58e:	b2db      	uxtb	r3, r3
    b590:	2b00      	cmp	r3, #0
    b592:	d00e      	beq.n	b5b2 <_usb_d_dev_ep_trans+0xc2>
    b594:	687b      	ldr	r3, [r7, #4]
    b596:	685b      	ldr	r3, [r3, #4]
    b598:	693a      	ldr	r2, [r7, #16]
    b59a:	8a12      	ldrh	r2, [r2, #16]
    b59c:	4293      	cmp	r3, r2
    b59e:	d208      	bcs.n	b5b2 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    b5a0:	693b      	ldr	r3, [r7, #16]
    b5a2:	68db      	ldr	r3, [r3, #12]
    b5a4:	2b00      	cmp	r3, #0
    b5a6:	d102      	bne.n	b5ae <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    b5a8:	f06f 0312 	mvn.w	r3, #18
    b5ac:	e071      	b.n	b692 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    b5ae:	2301      	movs	r3, #1
    b5b0:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    b5b2:	7d7b      	ldrb	r3, [r7, #21]
    b5b4:	f083 0301 	eor.w	r3, r3, #1
    b5b8:	b2db      	uxtb	r3, r3
    b5ba:	2b00      	cmp	r3, #0
    b5bc:	d009      	beq.n	b5d2 <_usb_d_dev_ep_trans+0xe2>
    b5be:	7b7b      	ldrb	r3, [r7, #13]
    b5c0:	2b00      	cmp	r3, #0
    b5c2:	d006      	beq.n	b5d2 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    b5c4:	693b      	ldr	r3, [r7, #16]
    b5c6:	68db      	ldr	r3, [r3, #12]
    b5c8:	2b00      	cmp	r3, #0
    b5ca:	d102      	bne.n	b5d2 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    b5cc:	f06f 0311 	mvn.w	r3, #17
    b5d0:	e05f      	b.n	b692 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    b5d2:	693b      	ldr	r3, [r7, #16]
    b5d4:	7cdb      	ldrb	r3, [r3, #19]
    b5d6:	f003 0308 	and.w	r3, r3, #8
    b5da:	b2db      	uxtb	r3, r3
    b5dc:	2b00      	cmp	r3, #0
    b5de:	d001      	beq.n	b5e4 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    b5e0:	2302      	movs	r3, #2
    b5e2:	e056      	b.n	b692 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    b5e4:	f107 0308 	add.w	r3, r7, #8
    b5e8:	4618      	mov	r0, r3
    b5ea:	4b2e      	ldr	r3, [pc, #184]	; (b6a4 <_usb_d_dev_ep_trans+0x1b4>)
    b5ec:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    b5ee:	693b      	ldr	r3, [r7, #16]
    b5f0:	7cdb      	ldrb	r3, [r3, #19]
    b5f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b5f6:	b2db      	uxtb	r3, r3
    b5f8:	2b00      	cmp	r3, #0
    b5fa:	d006      	beq.n	b60a <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    b5fc:	f107 0308 	add.w	r3, r7, #8
    b600:	4618      	mov	r0, r3
    b602:	4b29      	ldr	r3, [pc, #164]	; (b6a8 <_usb_d_dev_ep_trans+0x1b8>)
    b604:	4798      	blx	r3
		return USB_BUSY;
    b606:	2301      	movs	r3, #1
    b608:	e043      	b.n	b692 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    b60a:	693a      	ldr	r2, [r7, #16]
    b60c:	7cd3      	ldrb	r3, [r2, #19]
    b60e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b612:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    b614:	f107 0308 	add.w	r3, r7, #8
    b618:	4618      	mov	r0, r3
    b61a:	4b23      	ldr	r3, [pc, #140]	; (b6a8 <_usb_d_dev_ep_trans+0x1b8>)
    b61c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    b61e:	687b      	ldr	r3, [r7, #4]
    b620:	681a      	ldr	r2, [r3, #0]
    b622:	693b      	ldr	r3, [r7, #16]
    b624:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    b626:	687b      	ldr	r3, [r7, #4]
    b628:	685a      	ldr	r2, [r3, #4]
    b62a:	693b      	ldr	r3, [r7, #16]
    b62c:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    b62e:	693b      	ldr	r3, [r7, #16]
    b630:	2200      	movs	r2, #0
    b632:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    b634:	693a      	ldr	r2, [r7, #16]
    b636:	7cd3      	ldrb	r3, [r2, #19]
    b638:	7d79      	ldrb	r1, [r7, #21]
    b63a:	f361 13c7 	bfi	r3, r1, #7, #1
    b63e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    b640:	693a      	ldr	r2, [r7, #16]
    b642:	7cd3      	ldrb	r3, [r2, #19]
    b644:	7df9      	ldrb	r1, [r7, #23]
    b646:	f361 1345 	bfi	r3, r1, #5, #1
    b64a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    b64c:	687b      	ldr	r3, [r7, #4]
    b64e:	7a5b      	ldrb	r3, [r3, #9]
    b650:	2b00      	cmp	r3, #0
    b652:	d007      	beq.n	b664 <_usb_d_dev_ep_trans+0x174>
    b654:	7b7b      	ldrb	r3, [r7, #13]
    b656:	f083 0301 	eor.w	r3, r3, #1
    b65a:	b2db      	uxtb	r3, r3
    b65c:	2b00      	cmp	r3, #0
    b65e:	d001      	beq.n	b664 <_usb_d_dev_ep_trans+0x174>
    b660:	2301      	movs	r3, #1
    b662:	e000      	b.n	b666 <_usb_d_dev_ep_trans+0x176>
    b664:	2300      	movs	r3, #0
    b666:	b2db      	uxtb	r3, r3
    b668:	f003 0301 	and.w	r3, r3, #1
    b66c:	b2d9      	uxtb	r1, r3
    b66e:	693a      	ldr	r2, [r7, #16]
    b670:	7cd3      	ldrb	r3, [r2, #19]
    b672:	f361 1304 	bfi	r3, r1, #4, #1
    b676:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    b678:	7d7b      	ldrb	r3, [r7, #21]
    b67a:	2b00      	cmp	r3, #0
    b67c:	d004      	beq.n	b688 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    b67e:	2100      	movs	r1, #0
    b680:	6938      	ldr	r0, [r7, #16]
    b682:	4b0a      	ldr	r3, [pc, #40]	; (b6ac <_usb_d_dev_ep_trans+0x1bc>)
    b684:	4798      	blx	r3
    b686:	e003      	b.n	b690 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    b688:	2100      	movs	r1, #0
    b68a:	6938      	ldr	r0, [r7, #16]
    b68c:	4b08      	ldr	r3, [pc, #32]	; (b6b0 <_usb_d_dev_ep_trans+0x1c0>)
    b68e:	4798      	blx	r3
	}

	return ERR_NONE;
    b690:	2300      	movs	r3, #0
}
    b692:	4618      	mov	r0, r3
    b694:	3718      	adds	r7, #24
    b696:	46bd      	mov	sp, r7
    b698:	bd80      	pop	{r7, pc}
    b69a:	bf00      	nop
    b69c:	00009d61 	.word	0x00009d61
    b6a0:	20041fff 	.word	0x20041fff
    b6a4:	0000bebd 	.word	0x0000bebd
    b6a8:	0000bee3 	.word	0x0000bee3
    b6ac:	0000a029 	.word	0x0000a029
    b6b0:	0000a241 	.word	0x0000a241

0000b6b4 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    b6b4:	b580      	push	{r7, lr}
    b6b6:	b084      	sub	sp, #16
    b6b8:	af00      	add	r7, sp, #0
    b6ba:	4603      	mov	r3, r0
    b6bc:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    b6be:	79fb      	ldrb	r3, [r7, #7]
    b6c0:	f003 030f 	and.w	r3, r3, #15
    b6c4:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    b6c6:	79fb      	ldrb	r3, [r7, #7]
    b6c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b6cc:	2b00      	cmp	r3, #0
    b6ce:	bf14      	ite	ne
    b6d0:	2301      	movne	r3, #1
    b6d2:	2300      	moveq	r3, #0
    b6d4:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b6d6:	7bba      	ldrb	r2, [r7, #14]
    b6d8:	7bfb      	ldrb	r3, [r7, #15]
    b6da:	4611      	mov	r1, r2
    b6dc:	4618      	mov	r0, r3
    b6de:	4b08      	ldr	r3, [pc, #32]	; (b700 <_usb_d_dev_ep_abort+0x4c>)
    b6e0:	4798      	blx	r3
    b6e2:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    b6e4:	7bfb      	ldrb	r3, [r7, #15]
    b6e6:	2b04      	cmp	r3, #4
    b6e8:	d806      	bhi.n	b6f8 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    b6ea:	7bbb      	ldrb	r3, [r7, #14]
    b6ec:	2202      	movs	r2, #2
    b6ee:	4619      	mov	r1, r3
    b6f0:	68b8      	ldr	r0, [r7, #8]
    b6f2:	4b04      	ldr	r3, [pc, #16]	; (b704 <_usb_d_dev_ep_abort+0x50>)
    b6f4:	4798      	blx	r3
    b6f6:	e000      	b.n	b6fa <_usb_d_dev_ep_abort+0x46>
		return;
    b6f8:	bf00      	nop
}
    b6fa:	3710      	adds	r7, #16
    b6fc:	46bd      	mov	sp, r7
    b6fe:	bd80      	pop	{r7, pc}
    b700:	00009d61 	.word	0x00009d61
    b704:	0000b399 	.word	0x0000b399

0000b708 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    b708:	b480      	push	{r7}
    b70a:	b085      	sub	sp, #20
    b70c:	af00      	add	r7, sp, #0
    b70e:	4603      	mov	r3, r0
    b710:	6039      	str	r1, [r7, #0]
    b712:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b714:	683b      	ldr	r3, [r7, #0]
    b716:	2b00      	cmp	r3, #0
    b718:	d001      	beq.n	b71e <_usb_d_dev_register_callback+0x16>
    b71a:	683b      	ldr	r3, [r7, #0]
    b71c:	e000      	b.n	b720 <_usb_d_dev_register_callback+0x18>
    b71e:	4b0a      	ldr	r3, [pc, #40]	; (b748 <_usb_d_dev_register_callback+0x40>)
    b720:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    b722:	79fb      	ldrb	r3, [r7, #7]
    b724:	2b01      	cmp	r3, #1
    b726:	d103      	bne.n	b730 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    b728:	4a08      	ldr	r2, [pc, #32]	; (b74c <_usb_d_dev_register_callback+0x44>)
    b72a:	68fb      	ldr	r3, [r7, #12]
    b72c:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    b72e:	e005      	b.n	b73c <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    b730:	79fb      	ldrb	r3, [r7, #7]
    b732:	2b00      	cmp	r3, #0
    b734:	d102      	bne.n	b73c <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    b736:	4a05      	ldr	r2, [pc, #20]	; (b74c <_usb_d_dev_register_callback+0x44>)
    b738:	68fb      	ldr	r3, [r7, #12]
    b73a:	6013      	str	r3, [r2, #0]
}
    b73c:	bf00      	nop
    b73e:	3714      	adds	r7, #20
    b740:	46bd      	mov	sp, r7
    b742:	f85d 7b04 	ldr.w	r7, [sp], #4
    b746:	4770      	bx	lr
    b748:	000095e9 	.word	0x000095e9
    b74c:	20000e68 	.word	0x20000e68

0000b750 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    b750:	b480      	push	{r7}
    b752:	b085      	sub	sp, #20
    b754:	af00      	add	r7, sp, #0
    b756:	4603      	mov	r3, r0
    b758:	6039      	str	r1, [r7, #0]
    b75a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b75c:	683b      	ldr	r3, [r7, #0]
    b75e:	2b00      	cmp	r3, #0
    b760:	d001      	beq.n	b766 <_usb_d_dev_register_ep_callback+0x16>
    b762:	683b      	ldr	r3, [r7, #0]
    b764:	e000      	b.n	b768 <_usb_d_dev_register_ep_callback+0x18>
    b766:	4b0e      	ldr	r3, [pc, #56]	; (b7a0 <_usb_d_dev_register_ep_callback+0x50>)
    b768:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    b76a:	79fb      	ldrb	r3, [r7, #7]
    b76c:	2b00      	cmp	r3, #0
    b76e:	d103      	bne.n	b778 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    b770:	4a0c      	ldr	r2, [pc, #48]	; (b7a4 <_usb_d_dev_register_ep_callback+0x54>)
    b772:	68fb      	ldr	r3, [r7, #12]
    b774:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    b776:	e00c      	b.n	b792 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    b778:	79fb      	ldrb	r3, [r7, #7]
    b77a:	2b01      	cmp	r3, #1
    b77c:	d103      	bne.n	b786 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    b77e:	4a09      	ldr	r2, [pc, #36]	; (b7a4 <_usb_d_dev_register_ep_callback+0x54>)
    b780:	68fb      	ldr	r3, [r7, #12]
    b782:	60d3      	str	r3, [r2, #12]
}
    b784:	e005      	b.n	b792 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    b786:	79fb      	ldrb	r3, [r7, #7]
    b788:	2b02      	cmp	r3, #2
    b78a:	d102      	bne.n	b792 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    b78c:	4a05      	ldr	r2, [pc, #20]	; (b7a4 <_usb_d_dev_register_ep_callback+0x54>)
    b78e:	68fb      	ldr	r3, [r7, #12]
    b790:	6113      	str	r3, [r2, #16]
}
    b792:	bf00      	nop
    b794:	3714      	adds	r7, #20
    b796:	46bd      	mov	sp, r7
    b798:	f85d 7b04 	ldr.w	r7, [sp], #4
    b79c:	4770      	bx	lr
    b79e:	bf00      	nop
    b7a0:	000095e9 	.word	0x000095e9
    b7a4:	20000e68 	.word	0x20000e68

0000b7a8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    b7a8:	b580      	push	{r7, lr}
    b7aa:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b7ac:	4b01      	ldr	r3, [pc, #4]	; (b7b4 <USB_0_Handler+0xc>)
    b7ae:	4798      	blx	r3
}
    b7b0:	bf00      	nop
    b7b2:	bd80      	pop	{r7, pc}
    b7b4:	0000aa19 	.word	0x0000aa19

0000b7b8 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    b7b8:	b580      	push	{r7, lr}
    b7ba:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b7bc:	4b01      	ldr	r3, [pc, #4]	; (b7c4 <USB_1_Handler+0xc>)
    b7be:	4798      	blx	r3
}
    b7c0:	bf00      	nop
    b7c2:	bd80      	pop	{r7, pc}
    b7c4:	0000aa19 	.word	0x0000aa19

0000b7c8 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    b7c8:	b580      	push	{r7, lr}
    b7ca:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b7cc:	4b01      	ldr	r3, [pc, #4]	; (b7d4 <USB_2_Handler+0xc>)
    b7ce:	4798      	blx	r3
}
    b7d0:	bf00      	nop
    b7d2:	bd80      	pop	{r7, pc}
    b7d4:	0000aa19 	.word	0x0000aa19

0000b7d8 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    b7d8:	b580      	push	{r7, lr}
    b7da:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b7dc:	4b01      	ldr	r3, [pc, #4]	; (b7e4 <USB_3_Handler+0xc>)
    b7de:	4798      	blx	r3
}
    b7e0:	bf00      	nop
    b7e2:	bd80      	pop	{r7, pc}
    b7e4:	0000aa19 	.word	0x0000aa19

0000b7e8 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    b7e8:	b480      	push	{r7}
    b7ea:	b083      	sub	sp, #12
    b7ec:	af00      	add	r7, sp, #0
    b7ee:	6078      	str	r0, [r7, #4]
    b7f0:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b7f2:	bf00      	nop
    b7f4:	687b      	ldr	r3, [r7, #4]
    b7f6:	689a      	ldr	r2, [r3, #8]
    b7f8:	683b      	ldr	r3, [r7, #0]
    b7fa:	4013      	ands	r3, r2
    b7fc:	2b00      	cmp	r3, #0
    b7fe:	d1f9      	bne.n	b7f4 <hri_wdt_wait_for_sync+0xc>
	};
}
    b800:	bf00      	nop
    b802:	370c      	adds	r7, #12
    b804:	46bd      	mov	sp, r7
    b806:	f85d 7b04 	ldr.w	r7, [sp], #4
    b80a:	4770      	bx	lr

0000b80c <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b80c:	b580      	push	{r7, lr}
    b80e:	b084      	sub	sp, #16
    b810:	af00      	add	r7, sp, #0
    b812:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b814:	210e      	movs	r1, #14
    b816:	6878      	ldr	r0, [r7, #4]
    b818:	4b0a      	ldr	r3, [pc, #40]	; (b844 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    b81a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b81c:	687b      	ldr	r3, [r7, #4]
    b81e:	781b      	ldrb	r3, [r3, #0]
    b820:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    b822:	7bfb      	ldrb	r3, [r7, #15]
    b824:	085b      	lsrs	r3, r3, #1
    b826:	b2db      	uxtb	r3, r3
    b828:	f003 0301 	and.w	r3, r3, #1
    b82c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b82e:	7bfb      	ldrb	r3, [r7, #15]
    b830:	2b00      	cmp	r3, #0
    b832:	bf14      	ite	ne
    b834:	2301      	movne	r3, #1
    b836:	2300      	moveq	r3, #0
    b838:	b2db      	uxtb	r3, r3
}
    b83a:	4618      	mov	r0, r3
    b83c:	3710      	adds	r7, #16
    b83e:	46bd      	mov	sp, r7
    b840:	bd80      	pop	{r7, pc}
    b842:	bf00      	nop
    b844:	0000b7e9 	.word	0x0000b7e9

0000b848 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    b848:	b580      	push	{r7, lr}
    b84a:	b082      	sub	sp, #8
    b84c:	af00      	add	r7, sp, #0
    b84e:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    b850:	687b      	ldr	r3, [r7, #4]
    b852:	781b      	ldrb	r3, [r3, #0]
    b854:	b2db      	uxtb	r3, r3
    b856:	f023 0304 	bic.w	r3, r3, #4
    b85a:	b2da      	uxtb	r2, r3
    b85c:	687b      	ldr	r3, [r7, #4]
    b85e:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b860:	210e      	movs	r1, #14
    b862:	6878      	ldr	r0, [r7, #4]
    b864:	4b02      	ldr	r3, [pc, #8]	; (b870 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    b866:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    b868:	bf00      	nop
    b86a:	3708      	adds	r7, #8
    b86c:	46bd      	mov	sp, r7
    b86e:	bd80      	pop	{r7, pc}
    b870:	0000b7e9 	.word	0x0000b7e9

0000b874 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    b874:	b580      	push	{r7, lr}
    b876:	b084      	sub	sp, #16
    b878:	af00      	add	r7, sp, #0
    b87a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b87c:	210e      	movs	r1, #14
    b87e:	6878      	ldr	r0, [r7, #4]
    b880:	4b08      	ldr	r3, [pc, #32]	; (b8a4 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    b882:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b884:	687b      	ldr	r3, [r7, #4]
    b886:	781b      	ldrb	r3, [r3, #0]
    b888:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    b88a:	7bfb      	ldrb	r3, [r7, #15]
    b88c:	09db      	lsrs	r3, r3, #7
    b88e:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b890:	7bfb      	ldrb	r3, [r7, #15]
    b892:	2b00      	cmp	r3, #0
    b894:	bf14      	ite	ne
    b896:	2301      	movne	r3, #1
    b898:	2300      	moveq	r3, #0
    b89a:	b2db      	uxtb	r3, r3
}
    b89c:	4618      	mov	r0, r3
    b89e:	3710      	adds	r7, #16
    b8a0:	46bd      	mov	sp, r7
    b8a2:	bd80      	pop	{r7, pc}
    b8a4:	0000b7e9 	.word	0x0000b7e9

0000b8a8 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    b8a8:	b480      	push	{r7}
    b8aa:	b085      	sub	sp, #20
    b8ac:	af00      	add	r7, sp, #0
    b8ae:	6078      	str	r0, [r7, #4]
    b8b0:	460b      	mov	r3, r1
    b8b2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    b8b4:	687b      	ldr	r3, [r7, #4]
    b8b6:	785b      	ldrb	r3, [r3, #1]
    b8b8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    b8ba:	7bfb      	ldrb	r3, [r7, #15]
    b8bc:	f023 030f 	bic.w	r3, r3, #15
    b8c0:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    b8c2:	78fb      	ldrb	r3, [r7, #3]
    b8c4:	f003 030f 	and.w	r3, r3, #15
    b8c8:	b2da      	uxtb	r2, r3
    b8ca:	7bfb      	ldrb	r3, [r7, #15]
    b8cc:	4313      	orrs	r3, r2
    b8ce:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    b8d0:	687b      	ldr	r3, [r7, #4]
    b8d2:	7bfa      	ldrb	r2, [r7, #15]
    b8d4:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    b8d6:	bf00      	nop
    b8d8:	3714      	adds	r7, #20
    b8da:	46bd      	mov	sp, r7
    b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8e0:	4770      	bx	lr
	...

0000b8e4 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    b8e4:	b580      	push	{r7, lr}
    b8e6:	b082      	sub	sp, #8
    b8e8:	af00      	add	r7, sp, #0
    b8ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    b8ec:	687b      	ldr	r3, [r7, #4]
    b8ee:	2b00      	cmp	r3, #0
    b8f0:	d005      	beq.n	b8fe <_wdt_init+0x1a>
    b8f2:	687b      	ldr	r3, [r7, #4]
    b8f4:	681b      	ldr	r3, [r3, #0]
    b8f6:	2b00      	cmp	r3, #0
    b8f8:	d001      	beq.n	b8fe <_wdt_init+0x1a>
    b8fa:	2301      	movs	r3, #1
    b8fc:	e000      	b.n	b900 <_wdt_init+0x1c>
    b8fe:	2300      	movs	r3, #0
    b900:	f003 0301 	and.w	r3, r3, #1
    b904:	b2db      	uxtb	r3, r3
    b906:	2250      	movs	r2, #80	; 0x50
    b908:	4913      	ldr	r1, [pc, #76]	; (b958 <_wdt_init+0x74>)
    b90a:	4618      	mov	r0, r3
    b90c:	4b13      	ldr	r3, [pc, #76]	; (b95c <_wdt_init+0x78>)
    b90e:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    b910:	687b      	ldr	r3, [r7, #4]
    b912:	681b      	ldr	r3, [r3, #0]
    b914:	4618      	mov	r0, r3
    b916:	4b12      	ldr	r3, [pc, #72]	; (b960 <_wdt_init+0x7c>)
    b918:	4798      	blx	r3
    b91a:	4603      	mov	r3, r0
    b91c:	2b00      	cmp	r3, #0
    b91e:	d107      	bne.n	b930 <_wdt_init+0x4c>
    b920:	687b      	ldr	r3, [r7, #4]
    b922:	681b      	ldr	r3, [r3, #0]
    b924:	4618      	mov	r0, r3
    b926:	4b0f      	ldr	r3, [pc, #60]	; (b964 <_wdt_init+0x80>)
    b928:	4798      	blx	r3
    b92a:	4603      	mov	r3, r0
    b92c:	2b00      	cmp	r3, #0
    b92e:	d002      	beq.n	b936 <_wdt_init+0x52>
		return ERR_DENIED;
    b930:	f06f 0310 	mvn.w	r3, #16
    b934:	e00b      	b.n	b94e <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    b936:	687b      	ldr	r3, [r7, #4]
    b938:	681b      	ldr	r3, [r3, #0]
    b93a:	4618      	mov	r0, r3
    b93c:	4b0a      	ldr	r3, [pc, #40]	; (b968 <_wdt_init+0x84>)
    b93e:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    b940:	687b      	ldr	r3, [r7, #4]
    b942:	681b      	ldr	r3, [r3, #0]
    b944:	210b      	movs	r1, #11
    b946:	4618      	mov	r0, r3
    b948:	4b08      	ldr	r3, [pc, #32]	; (b96c <_wdt_init+0x88>)
    b94a:	4798      	blx	r3
	}

	return ERR_NONE;
    b94c:	2300      	movs	r3, #0
}
    b94e:	4618      	mov	r0, r3
    b950:	3708      	adds	r7, #8
    b952:	46bd      	mov	sp, r7
    b954:	bd80      	pop	{r7, pc}
    b956:	bf00      	nop
    b958:	000102e8 	.word	0x000102e8
    b95c:	00003d61 	.word	0x00003d61
    b960:	0000b875 	.word	0x0000b875
    b964:	0000b80d 	.word	0x0000b80d
    b968:	0000b849 	.word	0x0000b849
    b96c:	0000b8a9 	.word	0x0000b8a9

0000b970 <hri_port_set_DIR_reg>:
{
    b970:	b480      	push	{r7}
    b972:	b085      	sub	sp, #20
    b974:	af00      	add	r7, sp, #0
    b976:	60f8      	str	r0, [r7, #12]
    b978:	460b      	mov	r3, r1
    b97a:	607a      	str	r2, [r7, #4]
    b97c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    b97e:	7afb      	ldrb	r3, [r7, #11]
    b980:	68fa      	ldr	r2, [r7, #12]
    b982:	01db      	lsls	r3, r3, #7
    b984:	4413      	add	r3, r2
    b986:	3308      	adds	r3, #8
    b988:	687a      	ldr	r2, [r7, #4]
    b98a:	601a      	str	r2, [r3, #0]
}
    b98c:	bf00      	nop
    b98e:	3714      	adds	r7, #20
    b990:	46bd      	mov	sp, r7
    b992:	f85d 7b04 	ldr.w	r7, [sp], #4
    b996:	4770      	bx	lr

0000b998 <hri_port_clear_DIR_reg>:
{
    b998:	b480      	push	{r7}
    b99a:	b085      	sub	sp, #20
    b99c:	af00      	add	r7, sp, #0
    b99e:	60f8      	str	r0, [r7, #12]
    b9a0:	460b      	mov	r3, r1
    b9a2:	607a      	str	r2, [r7, #4]
    b9a4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    b9a6:	7afb      	ldrb	r3, [r7, #11]
    b9a8:	68fa      	ldr	r2, [r7, #12]
    b9aa:	01db      	lsls	r3, r3, #7
    b9ac:	4413      	add	r3, r2
    b9ae:	3304      	adds	r3, #4
    b9b0:	687a      	ldr	r2, [r7, #4]
    b9b2:	601a      	str	r2, [r3, #0]
}
    b9b4:	bf00      	nop
    b9b6:	3714      	adds	r7, #20
    b9b8:	46bd      	mov	sp, r7
    b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9be:	4770      	bx	lr

0000b9c0 <hri_port_set_OUT_reg>:
{
    b9c0:	b480      	push	{r7}
    b9c2:	b085      	sub	sp, #20
    b9c4:	af00      	add	r7, sp, #0
    b9c6:	60f8      	str	r0, [r7, #12]
    b9c8:	460b      	mov	r3, r1
    b9ca:	607a      	str	r2, [r7, #4]
    b9cc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b9ce:	7afb      	ldrb	r3, [r7, #11]
    b9d0:	68fa      	ldr	r2, [r7, #12]
    b9d2:	01db      	lsls	r3, r3, #7
    b9d4:	4413      	add	r3, r2
    b9d6:	3318      	adds	r3, #24
    b9d8:	687a      	ldr	r2, [r7, #4]
    b9da:	601a      	str	r2, [r3, #0]
}
    b9dc:	bf00      	nop
    b9de:	3714      	adds	r7, #20
    b9e0:	46bd      	mov	sp, r7
    b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9e6:	4770      	bx	lr

0000b9e8 <hri_port_clear_OUT_reg>:
{
    b9e8:	b480      	push	{r7}
    b9ea:	b085      	sub	sp, #20
    b9ec:	af00      	add	r7, sp, #0
    b9ee:	60f8      	str	r0, [r7, #12]
    b9f0:	460b      	mov	r3, r1
    b9f2:	607a      	str	r2, [r7, #4]
    b9f4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b9f6:	7afb      	ldrb	r3, [r7, #11]
    b9f8:	68fa      	ldr	r2, [r7, #12]
    b9fa:	01db      	lsls	r3, r3, #7
    b9fc:	4413      	add	r3, r2
    b9fe:	3314      	adds	r3, #20
    ba00:	687a      	ldr	r2, [r7, #4]
    ba02:	601a      	str	r2, [r3, #0]
}
    ba04:	bf00      	nop
    ba06:	3714      	adds	r7, #20
    ba08:	46bd      	mov	sp, r7
    ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba0e:	4770      	bx	lr

0000ba10 <hri_port_write_PMUX_PMUXE_bf>:
{
    ba10:	b480      	push	{r7}
    ba12:	b085      	sub	sp, #20
    ba14:	af00      	add	r7, sp, #0
    ba16:	6078      	str	r0, [r7, #4]
    ba18:	4608      	mov	r0, r1
    ba1a:	4611      	mov	r1, r2
    ba1c:	461a      	mov	r2, r3
    ba1e:	4603      	mov	r3, r0
    ba20:	70fb      	strb	r3, [r7, #3]
    ba22:	460b      	mov	r3, r1
    ba24:	70bb      	strb	r3, [r7, #2]
    ba26:	4613      	mov	r3, r2
    ba28:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ba2a:	78fa      	ldrb	r2, [r7, #3]
    ba2c:	78bb      	ldrb	r3, [r7, #2]
    ba2e:	6879      	ldr	r1, [r7, #4]
    ba30:	01d2      	lsls	r2, r2, #7
    ba32:	440a      	add	r2, r1
    ba34:	4413      	add	r3, r2
    ba36:	3330      	adds	r3, #48	; 0x30
    ba38:	781b      	ldrb	r3, [r3, #0]
    ba3a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    ba3c:	7bfb      	ldrb	r3, [r7, #15]
    ba3e:	f023 030f 	bic.w	r3, r3, #15
    ba42:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    ba44:	787b      	ldrb	r3, [r7, #1]
    ba46:	f003 030f 	and.w	r3, r3, #15
    ba4a:	b2da      	uxtb	r2, r3
    ba4c:	7bfb      	ldrb	r3, [r7, #15]
    ba4e:	4313      	orrs	r3, r2
    ba50:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ba52:	78fa      	ldrb	r2, [r7, #3]
    ba54:	78bb      	ldrb	r3, [r7, #2]
    ba56:	6879      	ldr	r1, [r7, #4]
    ba58:	01d2      	lsls	r2, r2, #7
    ba5a:	440a      	add	r2, r1
    ba5c:	4413      	add	r3, r2
    ba5e:	3330      	adds	r3, #48	; 0x30
    ba60:	7bfa      	ldrb	r2, [r7, #15]
    ba62:	701a      	strb	r2, [r3, #0]
}
    ba64:	bf00      	nop
    ba66:	3714      	adds	r7, #20
    ba68:	46bd      	mov	sp, r7
    ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba6e:	4770      	bx	lr

0000ba70 <hri_port_write_PMUX_PMUXO_bf>:
{
    ba70:	b480      	push	{r7}
    ba72:	b085      	sub	sp, #20
    ba74:	af00      	add	r7, sp, #0
    ba76:	6078      	str	r0, [r7, #4]
    ba78:	4608      	mov	r0, r1
    ba7a:	4611      	mov	r1, r2
    ba7c:	461a      	mov	r2, r3
    ba7e:	4603      	mov	r3, r0
    ba80:	70fb      	strb	r3, [r7, #3]
    ba82:	460b      	mov	r3, r1
    ba84:	70bb      	strb	r3, [r7, #2]
    ba86:	4613      	mov	r3, r2
    ba88:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ba8a:	78fa      	ldrb	r2, [r7, #3]
    ba8c:	78bb      	ldrb	r3, [r7, #2]
    ba8e:	6879      	ldr	r1, [r7, #4]
    ba90:	01d2      	lsls	r2, r2, #7
    ba92:	440a      	add	r2, r1
    ba94:	4413      	add	r3, r2
    ba96:	3330      	adds	r3, #48	; 0x30
    ba98:	781b      	ldrb	r3, [r3, #0]
    ba9a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    ba9c:	7bfb      	ldrb	r3, [r7, #15]
    ba9e:	f003 030f 	and.w	r3, r3, #15
    baa2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    baa4:	787b      	ldrb	r3, [r7, #1]
    baa6:	011b      	lsls	r3, r3, #4
    baa8:	b2da      	uxtb	r2, r3
    baaa:	7bfb      	ldrb	r3, [r7, #15]
    baac:	4313      	orrs	r3, r2
    baae:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    bab0:	78fa      	ldrb	r2, [r7, #3]
    bab2:	78bb      	ldrb	r3, [r7, #2]
    bab4:	6879      	ldr	r1, [r7, #4]
    bab6:	01d2      	lsls	r2, r2, #7
    bab8:	440a      	add	r2, r1
    baba:	4413      	add	r3, r2
    babc:	3330      	adds	r3, #48	; 0x30
    babe:	7bfa      	ldrb	r2, [r7, #15]
    bac0:	701a      	strb	r2, [r3, #0]
}
    bac2:	bf00      	nop
    bac4:	3714      	adds	r7, #20
    bac6:	46bd      	mov	sp, r7
    bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
    bacc:	4770      	bx	lr

0000bace <hri_port_write_PINCFG_PMUXEN_bit>:
{
    bace:	b480      	push	{r7}
    bad0:	b085      	sub	sp, #20
    bad2:	af00      	add	r7, sp, #0
    bad4:	6078      	str	r0, [r7, #4]
    bad6:	4608      	mov	r0, r1
    bad8:	4611      	mov	r1, r2
    bada:	461a      	mov	r2, r3
    badc:	4603      	mov	r3, r0
    bade:	70fb      	strb	r3, [r7, #3]
    bae0:	460b      	mov	r3, r1
    bae2:	70bb      	strb	r3, [r7, #2]
    bae4:	4613      	mov	r3, r2
    bae6:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    bae8:	78fa      	ldrb	r2, [r7, #3]
    baea:	78bb      	ldrb	r3, [r7, #2]
    baec:	6879      	ldr	r1, [r7, #4]
    baee:	01d2      	lsls	r2, r2, #7
    baf0:	440a      	add	r2, r1
    baf2:	4413      	add	r3, r2
    baf4:	3340      	adds	r3, #64	; 0x40
    baf6:	781b      	ldrb	r3, [r3, #0]
    baf8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    bafa:	7bfb      	ldrb	r3, [r7, #15]
    bafc:	f023 0301 	bic.w	r3, r3, #1
    bb00:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    bb02:	787a      	ldrb	r2, [r7, #1]
    bb04:	7bfb      	ldrb	r3, [r7, #15]
    bb06:	4313      	orrs	r3, r2
    bb08:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    bb0a:	78fa      	ldrb	r2, [r7, #3]
    bb0c:	78bb      	ldrb	r3, [r7, #2]
    bb0e:	6879      	ldr	r1, [r7, #4]
    bb10:	01d2      	lsls	r2, r2, #7
    bb12:	440a      	add	r2, r1
    bb14:	4413      	add	r3, r2
    bb16:	3340      	adds	r3, #64	; 0x40
    bb18:	7bfa      	ldrb	r2, [r7, #15]
    bb1a:	701a      	strb	r2, [r3, #0]
}
    bb1c:	bf00      	nop
    bb1e:	3714      	adds	r7, #20
    bb20:	46bd      	mov	sp, r7
    bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb26:	4770      	bx	lr

0000bb28 <hri_port_write_WRCONFIG_reg>:
{
    bb28:	b480      	push	{r7}
    bb2a:	b085      	sub	sp, #20
    bb2c:	af00      	add	r7, sp, #0
    bb2e:	60f8      	str	r0, [r7, #12]
    bb30:	460b      	mov	r3, r1
    bb32:	607a      	str	r2, [r7, #4]
    bb34:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    bb36:	7afb      	ldrb	r3, [r7, #11]
    bb38:	68fa      	ldr	r2, [r7, #12]
    bb3a:	01db      	lsls	r3, r3, #7
    bb3c:	4413      	add	r3, r2
    bb3e:	3328      	adds	r3, #40	; 0x28
    bb40:	687a      	ldr	r2, [r7, #4]
    bb42:	601a      	str	r2, [r3, #0]
}
    bb44:	bf00      	nop
    bb46:	3714      	adds	r7, #20
    bb48:	46bd      	mov	sp, r7
    bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb4e:	4770      	bx	lr

0000bb50 <_gpio_set_direction>:
{
    bb50:	b580      	push	{r7, lr}
    bb52:	b082      	sub	sp, #8
    bb54:	af00      	add	r7, sp, #0
    bb56:	4603      	mov	r3, r0
    bb58:	6039      	str	r1, [r7, #0]
    bb5a:	71fb      	strb	r3, [r7, #7]
    bb5c:	4613      	mov	r3, r2
    bb5e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    bb60:	79bb      	ldrb	r3, [r7, #6]
    bb62:	2b01      	cmp	r3, #1
    bb64:	d01c      	beq.n	bba0 <_gpio_set_direction+0x50>
    bb66:	2b02      	cmp	r3, #2
    bb68:	d037      	beq.n	bbda <_gpio_set_direction+0x8a>
    bb6a:	2b00      	cmp	r3, #0
    bb6c:	d14e      	bne.n	bc0c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    bb6e:	79fb      	ldrb	r3, [r7, #7]
    bb70:	683a      	ldr	r2, [r7, #0]
    bb72:	4619      	mov	r1, r3
    bb74:	482a      	ldr	r0, [pc, #168]	; (bc20 <_gpio_set_direction+0xd0>)
    bb76:	4b2b      	ldr	r3, [pc, #172]	; (bc24 <_gpio_set_direction+0xd4>)
    bb78:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    bb7a:	683b      	ldr	r3, [r7, #0]
    bb7c:	b29b      	uxth	r3, r3
    bb7e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    bb82:	79fb      	ldrb	r3, [r7, #7]
    bb84:	4619      	mov	r1, r3
    bb86:	4826      	ldr	r0, [pc, #152]	; (bc20 <_gpio_set_direction+0xd0>)
    bb88:	4b27      	ldr	r3, [pc, #156]	; (bc28 <_gpio_set_direction+0xd8>)
    bb8a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    bb8c:	683b      	ldr	r3, [r7, #0]
    bb8e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    bb90:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    bb94:	79fb      	ldrb	r3, [r7, #7]
    bb96:	4619      	mov	r1, r3
    bb98:	4821      	ldr	r0, [pc, #132]	; (bc20 <_gpio_set_direction+0xd0>)
    bb9a:	4b23      	ldr	r3, [pc, #140]	; (bc28 <_gpio_set_direction+0xd8>)
    bb9c:	4798      	blx	r3
		break;
    bb9e:	e03a      	b.n	bc16 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    bba0:	79fb      	ldrb	r3, [r7, #7]
    bba2:	683a      	ldr	r2, [r7, #0]
    bba4:	4619      	mov	r1, r3
    bba6:	481e      	ldr	r0, [pc, #120]	; (bc20 <_gpio_set_direction+0xd0>)
    bba8:	4b1e      	ldr	r3, [pc, #120]	; (bc24 <_gpio_set_direction+0xd4>)
    bbaa:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    bbac:	683b      	ldr	r3, [r7, #0]
    bbae:	b29b      	uxth	r3, r3
    bbb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    bbb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    bbb8:	79f9      	ldrb	r1, [r7, #7]
    bbba:	461a      	mov	r2, r3
    bbbc:	4818      	ldr	r0, [pc, #96]	; (bc20 <_gpio_set_direction+0xd0>)
    bbbe:	4b1a      	ldr	r3, [pc, #104]	; (bc28 <_gpio_set_direction+0xd8>)
    bbc0:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    bbc2:	683b      	ldr	r3, [r7, #0]
    bbc4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    bbc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    bbca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    bbce:	79f9      	ldrb	r1, [r7, #7]
    bbd0:	461a      	mov	r2, r3
    bbd2:	4813      	ldr	r0, [pc, #76]	; (bc20 <_gpio_set_direction+0xd0>)
    bbd4:	4b14      	ldr	r3, [pc, #80]	; (bc28 <_gpio_set_direction+0xd8>)
    bbd6:	4798      	blx	r3
		break;
    bbd8:	e01d      	b.n	bc16 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    bbda:	79fb      	ldrb	r3, [r7, #7]
    bbdc:	683a      	ldr	r2, [r7, #0]
    bbde:	4619      	mov	r1, r3
    bbe0:	480f      	ldr	r0, [pc, #60]	; (bc20 <_gpio_set_direction+0xd0>)
    bbe2:	4b12      	ldr	r3, [pc, #72]	; (bc2c <_gpio_set_direction+0xdc>)
    bbe4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    bbe6:	683b      	ldr	r3, [r7, #0]
    bbe8:	b29b      	uxth	r3, r3
    bbea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    bbee:	79fb      	ldrb	r3, [r7, #7]
    bbf0:	4619      	mov	r1, r3
    bbf2:	480b      	ldr	r0, [pc, #44]	; (bc20 <_gpio_set_direction+0xd0>)
    bbf4:	4b0c      	ldr	r3, [pc, #48]	; (bc28 <_gpio_set_direction+0xd8>)
    bbf6:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    bbf8:	683b      	ldr	r3, [r7, #0]
    bbfa:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    bbfc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    bc00:	79fb      	ldrb	r3, [r7, #7]
    bc02:	4619      	mov	r1, r3
    bc04:	4806      	ldr	r0, [pc, #24]	; (bc20 <_gpio_set_direction+0xd0>)
    bc06:	4b08      	ldr	r3, [pc, #32]	; (bc28 <_gpio_set_direction+0xd8>)
    bc08:	4798      	blx	r3
		break;
    bc0a:	e004      	b.n	bc16 <_gpio_set_direction+0xc6>
		ASSERT(false);
    bc0c:	2246      	movs	r2, #70	; 0x46
    bc0e:	4908      	ldr	r1, [pc, #32]	; (bc30 <_gpio_set_direction+0xe0>)
    bc10:	2000      	movs	r0, #0
    bc12:	4b08      	ldr	r3, [pc, #32]	; (bc34 <_gpio_set_direction+0xe4>)
    bc14:	4798      	blx	r3
}
    bc16:	bf00      	nop
    bc18:	3708      	adds	r7, #8
    bc1a:	46bd      	mov	sp, r7
    bc1c:	bd80      	pop	{r7, pc}
    bc1e:	bf00      	nop
    bc20:	41008000 	.word	0x41008000
    bc24:	0000b999 	.word	0x0000b999
    bc28:	0000bb29 	.word	0x0000bb29
    bc2c:	0000b971 	.word	0x0000b971
    bc30:	00010300 	.word	0x00010300
    bc34:	00003d61 	.word	0x00003d61

0000bc38 <_gpio_set_level>:
{
    bc38:	b580      	push	{r7, lr}
    bc3a:	b082      	sub	sp, #8
    bc3c:	af00      	add	r7, sp, #0
    bc3e:	4603      	mov	r3, r0
    bc40:	6039      	str	r1, [r7, #0]
    bc42:	71fb      	strb	r3, [r7, #7]
    bc44:	4613      	mov	r3, r2
    bc46:	71bb      	strb	r3, [r7, #6]
	if (level) {
    bc48:	79bb      	ldrb	r3, [r7, #6]
    bc4a:	2b00      	cmp	r3, #0
    bc4c:	d006      	beq.n	bc5c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    bc4e:	79fb      	ldrb	r3, [r7, #7]
    bc50:	683a      	ldr	r2, [r7, #0]
    bc52:	4619      	mov	r1, r3
    bc54:	4806      	ldr	r0, [pc, #24]	; (bc70 <_gpio_set_level+0x38>)
    bc56:	4b07      	ldr	r3, [pc, #28]	; (bc74 <_gpio_set_level+0x3c>)
    bc58:	4798      	blx	r3
}
    bc5a:	e005      	b.n	bc68 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    bc5c:	79fb      	ldrb	r3, [r7, #7]
    bc5e:	683a      	ldr	r2, [r7, #0]
    bc60:	4619      	mov	r1, r3
    bc62:	4803      	ldr	r0, [pc, #12]	; (bc70 <_gpio_set_level+0x38>)
    bc64:	4b04      	ldr	r3, [pc, #16]	; (bc78 <_gpio_set_level+0x40>)
    bc66:	4798      	blx	r3
}
    bc68:	bf00      	nop
    bc6a:	3708      	adds	r7, #8
    bc6c:	46bd      	mov	sp, r7
    bc6e:	bd80      	pop	{r7, pc}
    bc70:	41008000 	.word	0x41008000
    bc74:	0000b9c1 	.word	0x0000b9c1
    bc78:	0000b9e9 	.word	0x0000b9e9

0000bc7c <_gpio_set_pin_function>:
{
    bc7c:	b590      	push	{r4, r7, lr}
    bc7e:	b085      	sub	sp, #20
    bc80:	af00      	add	r7, sp, #0
    bc82:	6078      	str	r0, [r7, #4]
    bc84:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    bc86:	687b      	ldr	r3, [r7, #4]
    bc88:	095b      	lsrs	r3, r3, #5
    bc8a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    bc8c:	687b      	ldr	r3, [r7, #4]
    bc8e:	b2db      	uxtb	r3, r3
    bc90:	f003 031f 	and.w	r3, r3, #31
    bc94:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    bc96:	683b      	ldr	r3, [r7, #0]
    bc98:	f1b3 3fff 	cmp.w	r3, #4294967295
    bc9c:	d106      	bne.n	bcac <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    bc9e:	7bba      	ldrb	r2, [r7, #14]
    bca0:	7bf9      	ldrb	r1, [r7, #15]
    bca2:	2300      	movs	r3, #0
    bca4:	4812      	ldr	r0, [pc, #72]	; (bcf0 <_gpio_set_pin_function+0x74>)
    bca6:	4c13      	ldr	r4, [pc, #76]	; (bcf4 <_gpio_set_pin_function+0x78>)
    bca8:	47a0      	blx	r4
}
    bcaa:	e01d      	b.n	bce8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    bcac:	7bba      	ldrb	r2, [r7, #14]
    bcae:	7bf9      	ldrb	r1, [r7, #15]
    bcb0:	2301      	movs	r3, #1
    bcb2:	480f      	ldr	r0, [pc, #60]	; (bcf0 <_gpio_set_pin_function+0x74>)
    bcb4:	4c0f      	ldr	r4, [pc, #60]	; (bcf4 <_gpio_set_pin_function+0x78>)
    bcb6:	47a0      	blx	r4
		if (pin & 1) {
    bcb8:	7bbb      	ldrb	r3, [r7, #14]
    bcba:	f003 0301 	and.w	r3, r3, #1
    bcbe:	2b00      	cmp	r3, #0
    bcc0:	d009      	beq.n	bcd6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    bcc2:	7bbb      	ldrb	r3, [r7, #14]
    bcc4:	085b      	lsrs	r3, r3, #1
    bcc6:	b2da      	uxtb	r2, r3
    bcc8:	683b      	ldr	r3, [r7, #0]
    bcca:	b2db      	uxtb	r3, r3
    bccc:	7bf9      	ldrb	r1, [r7, #15]
    bcce:	4808      	ldr	r0, [pc, #32]	; (bcf0 <_gpio_set_pin_function+0x74>)
    bcd0:	4c09      	ldr	r4, [pc, #36]	; (bcf8 <_gpio_set_pin_function+0x7c>)
    bcd2:	47a0      	blx	r4
}
    bcd4:	e008      	b.n	bce8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    bcd6:	7bbb      	ldrb	r3, [r7, #14]
    bcd8:	085b      	lsrs	r3, r3, #1
    bcda:	b2da      	uxtb	r2, r3
    bcdc:	683b      	ldr	r3, [r7, #0]
    bcde:	b2db      	uxtb	r3, r3
    bce0:	7bf9      	ldrb	r1, [r7, #15]
    bce2:	4803      	ldr	r0, [pc, #12]	; (bcf0 <_gpio_set_pin_function+0x74>)
    bce4:	4c05      	ldr	r4, [pc, #20]	; (bcfc <_gpio_set_pin_function+0x80>)
    bce6:	47a0      	blx	r4
}
    bce8:	bf00      	nop
    bcea:	3714      	adds	r7, #20
    bcec:	46bd      	mov	sp, r7
    bcee:	bd90      	pop	{r4, r7, pc}
    bcf0:	41008000 	.word	0x41008000
    bcf4:	0000bacf 	.word	0x0000bacf
    bcf8:	0000ba71 	.word	0x0000ba71
    bcfc:	0000ba11 	.word	0x0000ba11

0000bd00 <gpio_set_pin_function>:
{
    bd00:	b580      	push	{r7, lr}
    bd02:	b082      	sub	sp, #8
    bd04:	af00      	add	r7, sp, #0
    bd06:	6078      	str	r0, [r7, #4]
    bd08:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    bd0a:	6839      	ldr	r1, [r7, #0]
    bd0c:	6878      	ldr	r0, [r7, #4]
    bd0e:	4b03      	ldr	r3, [pc, #12]	; (bd1c <gpio_set_pin_function+0x1c>)
    bd10:	4798      	blx	r3
}
    bd12:	bf00      	nop
    bd14:	3708      	adds	r7, #8
    bd16:	46bd      	mov	sp, r7
    bd18:	bd80      	pop	{r7, pc}
    bd1a:	bf00      	nop
    bd1c:	0000bc7d 	.word	0x0000bc7d

0000bd20 <gpio_set_pin_direction>:
{
    bd20:	b580      	push	{r7, lr}
    bd22:	b082      	sub	sp, #8
    bd24:	af00      	add	r7, sp, #0
    bd26:	4603      	mov	r3, r0
    bd28:	460a      	mov	r2, r1
    bd2a:	71fb      	strb	r3, [r7, #7]
    bd2c:	4613      	mov	r3, r2
    bd2e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    bd30:	79fb      	ldrb	r3, [r7, #7]
    bd32:	095b      	lsrs	r3, r3, #5
    bd34:	b2d8      	uxtb	r0, r3
    bd36:	79fb      	ldrb	r3, [r7, #7]
    bd38:	f003 031f 	and.w	r3, r3, #31
    bd3c:	2201      	movs	r2, #1
    bd3e:	fa02 f303 	lsl.w	r3, r2, r3
    bd42:	79ba      	ldrb	r2, [r7, #6]
    bd44:	4619      	mov	r1, r3
    bd46:	4b03      	ldr	r3, [pc, #12]	; (bd54 <gpio_set_pin_direction+0x34>)
    bd48:	4798      	blx	r3
}
    bd4a:	bf00      	nop
    bd4c:	3708      	adds	r7, #8
    bd4e:	46bd      	mov	sp, r7
    bd50:	bd80      	pop	{r7, pc}
    bd52:	bf00      	nop
    bd54:	0000bb51 	.word	0x0000bb51

0000bd58 <gpio_set_pin_level>:
{
    bd58:	b580      	push	{r7, lr}
    bd5a:	b082      	sub	sp, #8
    bd5c:	af00      	add	r7, sp, #0
    bd5e:	4603      	mov	r3, r0
    bd60:	460a      	mov	r2, r1
    bd62:	71fb      	strb	r3, [r7, #7]
    bd64:	4613      	mov	r3, r2
    bd66:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    bd68:	79fb      	ldrb	r3, [r7, #7]
    bd6a:	095b      	lsrs	r3, r3, #5
    bd6c:	b2d8      	uxtb	r0, r3
    bd6e:	79fb      	ldrb	r3, [r7, #7]
    bd70:	f003 031f 	and.w	r3, r3, #31
    bd74:	2201      	movs	r2, #1
    bd76:	fa02 f303 	lsl.w	r3, r2, r3
    bd7a:	79ba      	ldrb	r2, [r7, #6]
    bd7c:	4619      	mov	r1, r3
    bd7e:	4b03      	ldr	r3, [pc, #12]	; (bd8c <gpio_set_pin_level+0x34>)
    bd80:	4798      	blx	r3
}
    bd82:	bf00      	nop
    bd84:	3708      	adds	r7, #8
    bd86:	46bd      	mov	sp, r7
    bd88:	bd80      	pop	{r7, pc}
    bd8a:	bf00      	nop
    bd8c:	0000bc39 	.word	0x0000bc39

0000bd90 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    bd90:	b580      	push	{r7, lr}
    bd92:	b082      	sub	sp, #8
    bd94:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    bd96:	2100      	movs	r1, #0
    bd98:	2008      	movs	r0, #8
    bd9a:	4b24      	ldr	r3, [pc, #144]	; (be2c <QSPI_N25Q256_exit_xip+0x9c>)
    bd9c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    bd9e:	2100      	movs	r1, #0
    bda0:	202b      	movs	r0, #43	; 0x2b
    bda2:	4b22      	ldr	r3, [pc, #136]	; (be2c <QSPI_N25Q256_exit_xip+0x9c>)
    bda4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    bda6:	2100      	movs	r1, #0
    bda8:	202a      	movs	r0, #42	; 0x2a
    bdaa:	4b20      	ldr	r3, [pc, #128]	; (be2c <QSPI_N25Q256_exit_xip+0x9c>)
    bdac:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    bdae:	2102      	movs	r1, #2
    bdb0:	2008      	movs	r0, #8
    bdb2:	4b1f      	ldr	r3, [pc, #124]	; (be30 <QSPI_N25Q256_exit_xip+0xa0>)
    bdb4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    bdb6:	2102      	movs	r1, #2
    bdb8:	202b      	movs	r0, #43	; 0x2b
    bdba:	4b1d      	ldr	r3, [pc, #116]	; (be30 <QSPI_N25Q256_exit_xip+0xa0>)
    bdbc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    bdbe:	2102      	movs	r1, #2
    bdc0:	202a      	movs	r0, #42	; 0x2a
    bdc2:	4b1b      	ldr	r3, [pc, #108]	; (be30 <QSPI_N25Q256_exit_xip+0xa0>)
    bdc4:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    bdc6:	2101      	movs	r1, #1
    bdc8:	2008      	movs	r0, #8
    bdca:	4b1a      	ldr	r3, [pc, #104]	; (be34 <QSPI_N25Q256_exit_xip+0xa4>)
    bdcc:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    bdce:	2100      	movs	r1, #0
    bdd0:	202b      	movs	r0, #43	; 0x2b
    bdd2:	4b18      	ldr	r3, [pc, #96]	; (be34 <QSPI_N25Q256_exit_xip+0xa4>)
    bdd4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    bdd6:	2100      	movs	r1, #0
    bdd8:	202a      	movs	r0, #42	; 0x2a
    bdda:	4b16      	ldr	r3, [pc, #88]	; (be34 <QSPI_N25Q256_exit_xip+0xa4>)
    bddc:	4798      	blx	r3

	delay_us(1);
    bdde:	2001      	movs	r0, #1
    bde0:	4b15      	ldr	r3, [pc, #84]	; (be38 <QSPI_N25Q256_exit_xip+0xa8>)
    bde2:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    bde4:	2300      	movs	r3, #0
    bde6:	607b      	str	r3, [r7, #4]
    bde8:	e010      	b.n	be0c <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    bdea:	2101      	movs	r1, #1
    bdec:	202a      	movs	r0, #42	; 0x2a
    bdee:	4b11      	ldr	r3, [pc, #68]	; (be34 <QSPI_N25Q256_exit_xip+0xa4>)
    bdf0:	4798      	blx	r3
		delay_us(1);
    bdf2:	2001      	movs	r0, #1
    bdf4:	4b10      	ldr	r3, [pc, #64]	; (be38 <QSPI_N25Q256_exit_xip+0xa8>)
    bdf6:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    bdf8:	2100      	movs	r1, #0
    bdfa:	202a      	movs	r0, #42	; 0x2a
    bdfc:	4b0d      	ldr	r3, [pc, #52]	; (be34 <QSPI_N25Q256_exit_xip+0xa4>)
    bdfe:	4798      	blx	r3
		delay_us(1);
    be00:	2001      	movs	r0, #1
    be02:	4b0d      	ldr	r3, [pc, #52]	; (be38 <QSPI_N25Q256_exit_xip+0xa8>)
    be04:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    be06:	687b      	ldr	r3, [r7, #4]
    be08:	3301      	adds	r3, #1
    be0a:	607b      	str	r3, [r7, #4]
    be0c:	687b      	ldr	r3, [r7, #4]
    be0e:	2b06      	cmp	r3, #6
    be10:	ddeb      	ble.n	bdea <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    be12:	2101      	movs	r1, #1
    be14:	202b      	movs	r0, #43	; 0x2b
    be16:	4b07      	ldr	r3, [pc, #28]	; (be34 <QSPI_N25Q256_exit_xip+0xa4>)
    be18:	4798      	blx	r3
	delay_us(1);
    be1a:	2001      	movs	r0, #1
    be1c:	4b06      	ldr	r3, [pc, #24]	; (be38 <QSPI_N25Q256_exit_xip+0xa8>)
    be1e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    be20:	4b06      	ldr	r3, [pc, #24]	; (be3c <QSPI_N25Q256_exit_xip+0xac>)
    be22:	4798      	blx	r3
}
    be24:	bf00      	nop
    be26:	3708      	adds	r7, #8
    be28:	46bd      	mov	sp, r7
    be2a:	bd80      	pop	{r7, pc}
    be2c:	0000bd01 	.word	0x0000bd01
    be30:	0000bd21 	.word	0x0000bd21
    be34:	0000bd59 	.word	0x0000bd59
    be38:	000024cd 	.word	0x000024cd
    be3c:	00001881 	.word	0x00001881

0000be40 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    be40:	b598      	push	{r3, r4, r7, lr}
    be42:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    be44:	4806      	ldr	r0, [pc, #24]	; (be60 <spi_nor_flash_init+0x20>)
    be46:	4b07      	ldr	r3, [pc, #28]	; (be64 <spi_nor_flash_init+0x24>)
    be48:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    be4a:	2300      	movs	r3, #0
    be4c:	4a06      	ldr	r2, [pc, #24]	; (be68 <spi_nor_flash_init+0x28>)
    be4e:	4904      	ldr	r1, [pc, #16]	; (be60 <spi_nor_flash_init+0x20>)
    be50:	4806      	ldr	r0, [pc, #24]	; (be6c <spi_nor_flash_init+0x2c>)
    be52:	4c07      	ldr	r4, [pc, #28]	; (be70 <spi_nor_flash_init+0x30>)
    be54:	47a0      	blx	r4
    be56:	4602      	mov	r2, r0
    be58:	4b06      	ldr	r3, [pc, #24]	; (be74 <spi_nor_flash_init+0x34>)
    be5a:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    be5c:	bf00      	nop
    be5e:	bd98      	pop	{r3, r4, r7, pc}
    be60:	20001568 	.word	0x20001568
    be64:	00002c09 	.word	0x00002c09
    be68:	0000bd91 	.word	0x0000bd91
    be6c:	20000fd0 	.word	0x20000fd0
    be70:	0000c2ad 	.word	0x0000c2ad
    be74:	20001788 	.word	0x20001788

0000be78 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    be78:	b580      	push	{r7, lr}
    be7a:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    be7c:	4805      	ldr	r0, [pc, #20]	; (be94 <cdc_device_acm_init+0x1c>)
    be7e:	4b06      	ldr	r3, [pc, #24]	; (be98 <cdc_device_acm_init+0x20>)
    be80:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    be82:	4b06      	ldr	r3, [pc, #24]	; (be9c <cdc_device_acm_init+0x24>)
    be84:	4798      	blx	r3

	usbdc_start(single_desc);
    be86:	4806      	ldr	r0, [pc, #24]	; (bea0 <cdc_device_acm_init+0x28>)
    be88:	4b06      	ldr	r3, [pc, #24]	; (bea4 <cdc_device_acm_init+0x2c>)
    be8a:	4798      	blx	r3
	usbdc_attach();
    be8c:	4b06      	ldr	r3, [pc, #24]	; (bea8 <cdc_device_acm_init+0x30>)
    be8e:	4798      	blx	r3
}
    be90:	bf00      	nop
    be92:	bd80      	pop	{r7, pc}
    be94:	20001020 	.word	0x20001020
    be98:	0000d9d5 	.word	0x0000d9d5
    be9c:	0000cc4d 	.word	0x0000cc4d
    bea0:	200001d0 	.word	0x200001d0
    bea4:	0000da71 	.word	0x0000da71
    bea8:	0000dac1 	.word	0x0000dac1

0000beac <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    beac:	b580      	push	{r7, lr}
    beae:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    beb0:	4b01      	ldr	r3, [pc, #4]	; (beb8 <usb_init+0xc>)
    beb2:	4798      	blx	r3
}
    beb4:	bf00      	nop
    beb6:	bd80      	pop	{r7, pc}
    beb8:	0000be79 	.word	0x0000be79

0000bebc <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    bebc:	b480      	push	{r7}
    bebe:	b085      	sub	sp, #20
    bec0:	af00      	add	r7, sp, #0
    bec2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    bec4:	f3ef 8310 	mrs	r3, PRIMASK
    bec8:	60fb      	str	r3, [r7, #12]
  return(result);
    beca:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    becc:	687b      	ldr	r3, [r7, #4]
    bece:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    bed0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    bed2:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    bed6:	bf00      	nop
    bed8:	3714      	adds	r7, #20
    beda:	46bd      	mov	sp, r7
    bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
    bee0:	4770      	bx	lr

0000bee2 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    bee2:	b480      	push	{r7}
    bee4:	b085      	sub	sp, #20
    bee6:	af00      	add	r7, sp, #0
    bee8:	6078      	str	r0, [r7, #4]
    beea:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    beee:	687b      	ldr	r3, [r7, #4]
    bef0:	681b      	ldr	r3, [r3, #0]
    bef2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    bef4:	68fb      	ldr	r3, [r7, #12]
    bef6:	f383 8810 	msr	PRIMASK, r3
}
    befa:	bf00      	nop
    befc:	3714      	adds	r7, #20
    befe:	46bd      	mov	sp, r7
    bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
    bf04:	4770      	bx	lr
	...

0000bf08 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    bf08:	b580      	push	{r7, lr}
    bf0a:	b08c      	sub	sp, #48	; 0x30
    bf0c:	af00      	add	r7, sp, #0
    bf0e:	6078      	str	r0, [r7, #4]
    bf10:	460b      	mov	r3, r1
    bf12:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bf14:	687b      	ldr	r3, [r7, #4]
    bf16:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bf18:	687b      	ldr	r3, [r7, #4]
    bf1a:	681b      	ldr	r3, [r3, #0]
    bf1c:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    bf1e:	f107 030c 	add.w	r3, r7, #12
    bf22:	2200      	movs	r2, #0
    bf24:	601a      	str	r2, [r3, #0]
    bf26:	605a      	str	r2, [r3, #4]
    bf28:	609a      	str	r2, [r3, #8]
    bf2a:	60da      	str	r2, [r3, #12]
    bf2c:	611a      	str	r2, [r3, #16]
    bf2e:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bf30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bf32:	7b1b      	ldrb	r3, [r3, #12]
    bf34:	2b00      	cmp	r3, #0
    bf36:	d001      	beq.n	bf3c <n25q256a_xip_confirm+0x34>
    bf38:	2206      	movs	r2, #6
    bf3a:	e000      	b.n	bf3e <n25q256a_xip_confirm+0x36>
    bf3c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    bf3e:	7b3b      	ldrb	r3, [r7, #12]
    bf40:	f362 0302 	bfi	r3, r2, #0, #3
    bf44:	733b      	strb	r3, [r7, #12]
    bf46:	7b3b      	ldrb	r3, [r7, #12]
    bf48:	f043 0310 	orr.w	r3, r3, #16
    bf4c:	733b      	strb	r3, [r7, #12]
    bf4e:	7b3b      	ldrb	r3, [r7, #12]
    bf50:	f043 0320 	orr.w	r3, r3, #32
    bf54:	733b      	strb	r3, [r7, #12]
    bf56:	7b3b      	ldrb	r3, [r7, #12]
    bf58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bf5c:	733b      	strb	r3, [r7, #12]
    bf5e:	7b3b      	ldrb	r3, [r7, #12]
    bf60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bf64:	733b      	strb	r3, [r7, #12]
    bf66:	7b7b      	ldrb	r3, [r7, #13]
    bf68:	f043 0303 	orr.w	r3, r3, #3
    bf6c:	737b      	strb	r3, [r7, #13]
    bf6e:	7b7b      	ldrb	r3, [r7, #13]
    bf70:	2201      	movs	r2, #1
    bf72:	f362 1305 	bfi	r3, r2, #4, #2
    bf76:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    bf78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bf7a:	7b1b      	ldrb	r3, [r3, #12]
    bf7c:	2b00      	cmp	r3, #0
    bf7e:	d001      	beq.n	bf84 <n25q256a_xip_confirm+0x7c>
    bf80:	2208      	movs	r2, #8
    bf82:	e000      	b.n	bf86 <n25q256a_xip_confirm+0x7e>
    bf84:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    bf86:	7bbb      	ldrb	r3, [r7, #14]
    bf88:	f362 0304 	bfi	r3, r2, #0, #5
    bf8c:	73bb      	strb	r3, [r7, #14]
    bf8e:	230b      	movs	r3, #11
    bf90:	743b      	strb	r3, [r7, #16]
    bf92:	78fb      	ldrb	r3, [r7, #3]
    bf94:	2b00      	cmp	r3, #0
    bf96:	d001      	beq.n	bf9c <n25q256a_xip_confirm+0x94>
    bf98:	2300      	movs	r3, #0
    bf9a:	e000      	b.n	bf9e <n25q256a_xip_confirm+0x96>
    bf9c:	23ff      	movs	r3, #255	; 0xff
    bf9e:	747b      	strb	r3, [r7, #17]
    bfa0:	2301      	movs	r3, #1
    bfa2:	61bb      	str	r3, [r7, #24]
    bfa4:	f107 0327 	add.w	r3, r7, #39	; 0x27
    bfa8:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    bfaa:	f107 030c 	add.w	r3, r7, #12
    bfae:	4619      	mov	r1, r3
    bfb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bfb2:	4b07      	ldr	r3, [pc, #28]	; (bfd0 <n25q256a_xip_confirm+0xc8>)
    bfb4:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    bfb6:	78fb      	ldrb	r3, [r7, #3]
    bfb8:	2b00      	cmp	r3, #0
    bfba:	d001      	beq.n	bfc0 <n25q256a_xip_confirm+0xb8>
    bfbc:	2202      	movs	r2, #2
    bfbe:	e000      	b.n	bfc2 <n25q256a_xip_confirm+0xba>
    bfc0:	2201      	movs	r2, #1
    bfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bfc4:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    bfc6:	2300      	movs	r3, #0
}
    bfc8:	4618      	mov	r0, r3
    bfca:	3730      	adds	r7, #48	; 0x30
    bfcc:	46bd      	mov	sp, r7
    bfce:	bd80      	pop	{r7, pc}
    bfd0:	00002c81 	.word	0x00002c81

0000bfd4 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    bfd4:	b580      	push	{r7, lr}
    bfd6:	b08c      	sub	sp, #48	; 0x30
    bfd8:	af00      	add	r7, sp, #0
    bfda:	6078      	str	r0, [r7, #4]
    bfdc:	460b      	mov	r3, r1
    bfde:	70fb      	strb	r3, [r7, #3]
    bfe0:	4613      	mov	r3, r2
    bfe2:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    bfe4:	2300      	movs	r3, #0
    bfe6:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    bfe8:	687b      	ldr	r3, [r7, #4]
    bfea:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    bfec:	687b      	ldr	r3, [r7, #4]
    bfee:	681b      	ldr	r3, [r3, #0]
    bff0:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    bff2:	f107 030c 	add.w	r3, r7, #12
    bff6:	2200      	movs	r2, #0
    bff8:	601a      	str	r2, [r3, #0]
    bffa:	605a      	str	r2, [r3, #4]
    bffc:	609a      	str	r2, [r3, #8]
    bffe:	60da      	str	r2, [r3, #12]
    c000:	611a      	str	r2, [r3, #16]
    c002:	615a      	str	r2, [r3, #20]
    c004:	78fb      	ldrb	r3, [r7, #3]
    c006:	f003 0307 	and.w	r3, r3, #7
    c00a:	b2da      	uxtb	r2, r3
    c00c:	7b3b      	ldrb	r3, [r7, #12]
    c00e:	f362 0302 	bfi	r3, r2, #0, #3
    c012:	733b      	strb	r3, [r7, #12]
    c014:	7b3b      	ldrb	r3, [r7, #12]
    c016:	f043 0310 	orr.w	r3, r3, #16
    c01a:	733b      	strb	r3, [r7, #12]
    c01c:	7b3b      	ldrb	r3, [r7, #12]
    c01e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c022:	733b      	strb	r3, [r7, #12]
    c024:	78bb      	ldrb	r3, [r7, #2]
    c026:	743b      	strb	r3, [r7, #16]
    c028:	2301      	movs	r3, #1
    c02a:	61bb      	str	r3, [r7, #24]
    c02c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    c030:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    c032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c034:	7b5b      	ldrb	r3, [r3, #13]
    c036:	2b00      	cmp	r3, #0
    c038:	d003      	beq.n	c042 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    c03a:	2100      	movs	r1, #0
    c03c:	6878      	ldr	r0, [r7, #4]
    c03e:	4b0a      	ldr	r3, [pc, #40]	; (c068 <n25q256a_read_reg+0x94>)
    c040:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    c042:	f107 030c 	add.w	r3, r7, #12
    c046:	4619      	mov	r1, r3
    c048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c04a:	4b08      	ldr	r3, [pc, #32]	; (c06c <n25q256a_read_reg+0x98>)
    c04c:	4798      	blx	r3
	if (n25q->xip_mode) {
    c04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c050:	7b5b      	ldrb	r3, [r3, #13]
    c052:	2b00      	cmp	r3, #0
    c054:	d003      	beq.n	c05e <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    c056:	2101      	movs	r1, #1
    c058:	6878      	ldr	r0, [r7, #4]
    c05a:	4b03      	ldr	r3, [pc, #12]	; (c068 <n25q256a_read_reg+0x94>)
    c05c:	4798      	blx	r3
	}
	return status;
    c05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c060:	4618      	mov	r0, r3
    c062:	3730      	adds	r7, #48	; 0x30
    c064:	46bd      	mov	sp, r7
    c066:	bd80      	pop	{r7, pc}
    c068:	0000bf09 	.word	0x0000bf09
    c06c:	00002c81 	.word	0x00002c81

0000c070 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    c070:	b580      	push	{r7, lr}
    c072:	b08c      	sub	sp, #48	; 0x30
    c074:	af00      	add	r7, sp, #0
    c076:	60f8      	str	r0, [r7, #12]
    c078:	607b      	str	r3, [r7, #4]
    c07a:	460b      	mov	r3, r1
    c07c:	72fb      	strb	r3, [r7, #11]
    c07e:	4613      	mov	r3, r2
    c080:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c082:	68fb      	ldr	r3, [r7, #12]
    c084:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c086:	68fb      	ldr	r3, [r7, #12]
    c088:	681b      	ldr	r3, [r3, #0]
    c08a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    c08c:	f107 0310 	add.w	r3, r7, #16
    c090:	2200      	movs	r2, #0
    c092:	601a      	str	r2, [r3, #0]
    c094:	605a      	str	r2, [r3, #4]
    c096:	609a      	str	r2, [r3, #8]
    c098:	60da      	str	r2, [r3, #12]
    c09a:	611a      	str	r2, [r3, #16]
    c09c:	615a      	str	r2, [r3, #20]
    c09e:	7afb      	ldrb	r3, [r7, #11]
    c0a0:	f003 0307 	and.w	r3, r3, #7
    c0a4:	b2da      	uxtb	r2, r3
    c0a6:	7c3b      	ldrb	r3, [r7, #16]
    c0a8:	f362 0302 	bfi	r3, r2, #0, #3
    c0ac:	743b      	strb	r3, [r7, #16]
    c0ae:	7c3b      	ldrb	r3, [r7, #16]
    c0b0:	f043 0310 	orr.w	r3, r3, #16
    c0b4:	743b      	strb	r3, [r7, #16]
    c0b6:	7c3b      	ldrb	r3, [r7, #16]
    c0b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c0bc:	743b      	strb	r3, [r7, #16]
    c0be:	7c7b      	ldrb	r3, [r7, #17]
    c0c0:	2202      	movs	r2, #2
    c0c2:	f362 1305 	bfi	r3, r2, #4, #2
    c0c6:	747b      	strb	r3, [r7, #17]
    c0c8:	7abb      	ldrb	r3, [r7, #10]
    c0ca:	753b      	strb	r3, [r7, #20]
    c0cc:	2301      	movs	r3, #1
    c0ce:	61fb      	str	r3, [r7, #28]
    c0d0:	1d3b      	adds	r3, r7, #4
    c0d2:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    c0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c0d6:	7b5b      	ldrb	r3, [r3, #13]
    c0d8:	2b00      	cmp	r3, #0
    c0da:	d003      	beq.n	c0e4 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    c0dc:	2100      	movs	r1, #0
    c0de:	68f8      	ldr	r0, [r7, #12]
    c0e0:	4b09      	ldr	r3, [pc, #36]	; (c108 <n25q256a_write_reg+0x98>)
    c0e2:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    c0e4:	f107 0310 	add.w	r3, r7, #16
    c0e8:	4619      	mov	r1, r3
    c0ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c0ec:	4b07      	ldr	r3, [pc, #28]	; (c10c <n25q256a_write_reg+0x9c>)
    c0ee:	4798      	blx	r3
	if (n25q->xip_mode) {
    c0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c0f2:	7b5b      	ldrb	r3, [r3, #13]
    c0f4:	2b00      	cmp	r3, #0
    c0f6:	d003      	beq.n	c100 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    c0f8:	2101      	movs	r1, #1
    c0fa:	68f8      	ldr	r0, [r7, #12]
    c0fc:	4b02      	ldr	r3, [pc, #8]	; (c108 <n25q256a_write_reg+0x98>)
    c0fe:	4798      	blx	r3
	}
}
    c100:	bf00      	nop
    c102:	3730      	adds	r7, #48	; 0x30
    c104:	46bd      	mov	sp, r7
    c106:	bd80      	pop	{r7, pc}
    c108:	0000bf09 	.word	0x0000bf09
    c10c:	00002c81 	.word	0x00002c81

0000c110 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    c110:	b580      	push	{r7, lr}
    c112:	b090      	sub	sp, #64	; 0x40
    c114:	af00      	add	r7, sp, #0
    c116:	6078      	str	r0, [r7, #4]
    c118:	460b      	mov	r3, r1
    c11a:	70fb      	strb	r3, [r7, #3]
    c11c:	4613      	mov	r3, r2
    c11e:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c120:	687b      	ldr	r3, [r7, #4]
    c122:	681b      	ldr	r3, [r3, #0]
    c124:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    c126:	78bb      	ldrb	r3, [r7, #2]
    c128:	2b00      	cmp	r3, #0
    c12a:	d001      	beq.n	c130 <n25q256a_write_enable+0x20>
    c12c:	2306      	movs	r3, #6
    c12e:	e000      	b.n	c132 <n25q256a_write_enable+0x22>
    c130:	2304      	movs	r3, #4
    c132:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    c136:	f107 0320 	add.w	r3, r7, #32
    c13a:	2200      	movs	r2, #0
    c13c:	601a      	str	r2, [r3, #0]
    c13e:	605a      	str	r2, [r3, #4]
    c140:	609a      	str	r2, [r3, #8]
    c142:	60da      	str	r2, [r3, #12]
    c144:	611a      	str	r2, [r3, #16]
    c146:	615a      	str	r2, [r3, #20]
    c148:	78fb      	ldrb	r3, [r7, #3]
    c14a:	f003 0307 	and.w	r3, r3, #7
    c14e:	b2da      	uxtb	r2, r3
    c150:	f897 3020 	ldrb.w	r3, [r7, #32]
    c154:	f362 0302 	bfi	r3, r2, #0, #3
    c158:	f887 3020 	strb.w	r3, [r7, #32]
    c15c:	f897 3020 	ldrb.w	r3, [r7, #32]
    c160:	f043 0310 	orr.w	r3, r3, #16
    c164:	f887 3020 	strb.w	r3, [r7, #32]
    c168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    c16c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    c170:	f107 0308 	add.w	r3, r7, #8
    c174:	2200      	movs	r2, #0
    c176:	601a      	str	r2, [r3, #0]
    c178:	605a      	str	r2, [r3, #4]
    c17a:	609a      	str	r2, [r3, #8]
    c17c:	60da      	str	r2, [r3, #12]
    c17e:	611a      	str	r2, [r3, #16]
    c180:	615a      	str	r2, [r3, #20]
    c182:	78fb      	ldrb	r3, [r7, #3]
    c184:	f003 0307 	and.w	r3, r3, #7
    c188:	b2da      	uxtb	r2, r3
    c18a:	7a3b      	ldrb	r3, [r7, #8]
    c18c:	f362 0302 	bfi	r3, r2, #0, #3
    c190:	723b      	strb	r3, [r7, #8]
    c192:	7a3b      	ldrb	r3, [r7, #8]
    c194:	f043 0310 	orr.w	r3, r3, #16
    c198:	723b      	strb	r3, [r7, #8]
    c19a:	7a3b      	ldrb	r3, [r7, #8]
    c19c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c1a0:	723b      	strb	r3, [r7, #8]
    c1a2:	2305      	movs	r3, #5
    c1a4:	733b      	strb	r3, [r7, #12]
    c1a6:	2301      	movs	r3, #1
    c1a8:	617b      	str	r3, [r7, #20]
    c1aa:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    c1ae:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    c1b0:	f107 0320 	add.w	r3, r7, #32
    c1b4:	4619      	mov	r1, r3
    c1b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c1b8:	4b08      	ldr	r3, [pc, #32]	; (c1dc <n25q256a_write_enable+0xcc>)
    c1ba:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    c1bc:	f107 0308 	add.w	r3, r7, #8
    c1c0:	4619      	mov	r1, r3
    c1c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c1c4:	4b05      	ldr	r3, [pc, #20]	; (c1dc <n25q256a_write_enable+0xcc>)
    c1c6:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    c1c8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    c1cc:	f003 0302 	and.w	r3, r3, #2
    c1d0:	2b00      	cmp	r3, #0
    c1d2:	d0ed      	beq.n	c1b0 <n25q256a_write_enable+0xa0>
}
    c1d4:	bf00      	nop
    c1d6:	3740      	adds	r7, #64	; 0x40
    c1d8:	46bd      	mov	sp, r7
    c1da:	bd80      	pop	{r7, pc}
    c1dc:	00002c81 	.word	0x00002c81

0000c1e0 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    c1e0:	b590      	push	{r4, r7, lr}
    c1e2:	b087      	sub	sp, #28
    c1e4:	af00      	add	r7, sp, #0
    c1e6:	6078      	str	r0, [r7, #4]
    c1e8:	460b      	mov	r3, r1
    c1ea:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    c1ec:	687b      	ldr	r3, [r7, #4]
    c1ee:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c1f0:	68fb      	ldr	r3, [r7, #12]
    c1f2:	7b1b      	ldrb	r3, [r3, #12]
    c1f4:	2b00      	cmp	r3, #0
    c1f6:	d001      	beq.n	c1fc <n25q256a_switch_mode+0x1c>
    c1f8:	2306      	movs	r3, #6
    c1fa:	e000      	b.n	c1fe <n25q256a_switch_mode+0x1e>
    c1fc:	2300      	movs	r3, #0
    c1fe:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c200:	7afb      	ldrb	r3, [r7, #11]
    c202:	2265      	movs	r2, #101	; 0x65
    c204:	4619      	mov	r1, r3
    c206:	6878      	ldr	r0, [r7, #4]
    c208:	4b25      	ldr	r3, [pc, #148]	; (c2a0 <n25q256a_switch_mode+0xc0>)
    c20a:	4798      	blx	r3
    c20c:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    c20e:	2300      	movs	r3, #0
    c210:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    c212:	68fb      	ldr	r3, [r7, #12]
    c214:	7b1b      	ldrb	r3, [r3, #12]
    c216:	78fa      	ldrb	r2, [r7, #3]
    c218:	429a      	cmp	r2, r3
    c21a:	d03d      	beq.n	c298 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    c21c:	78fb      	ldrb	r3, [r7, #3]
    c21e:	2b00      	cmp	r3, #0
    c220:	d00b      	beq.n	c23a <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    c222:	697b      	ldr	r3, [r7, #20]
    c224:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c228:	2b00      	cmp	r3, #0
    c22a:	d011      	beq.n	c250 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    c22c:	697b      	ldr	r3, [r7, #20]
    c22e:	f003 031f 	and.w	r3, r3, #31
    c232:	617b      	str	r3, [r7, #20]
			modify = 1;
    c234:	2301      	movs	r3, #1
    c236:	74fb      	strb	r3, [r7, #19]
    c238:	e00a      	b.n	c250 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    c23a:	697b      	ldr	r3, [r7, #20]
    c23c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c240:	2b00      	cmp	r3, #0
    c242:	d105      	bne.n	c250 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    c244:	697b      	ldr	r3, [r7, #20]
    c246:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    c24a:	617b      	str	r3, [r7, #20]
			modify = 1;
    c24c:	2301      	movs	r3, #1
    c24e:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    c250:	7cfb      	ldrb	r3, [r7, #19]
    c252:	2b00      	cmp	r3, #0
    c254:	d021      	beq.n	c29a <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    c256:	68fb      	ldr	r3, [r7, #12]
    c258:	78fa      	ldrb	r2, [r7, #3]
    c25a:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    c25c:	7afb      	ldrb	r3, [r7, #11]
    c25e:	2201      	movs	r2, #1
    c260:	4619      	mov	r1, r3
    c262:	6878      	ldr	r0, [r7, #4]
    c264:	4b0f      	ldr	r3, [pc, #60]	; (c2a4 <n25q256a_switch_mode+0xc4>)
    c266:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    c268:	7af9      	ldrb	r1, [r7, #11]
    c26a:	697b      	ldr	r3, [r7, #20]
    c26c:	2261      	movs	r2, #97	; 0x61
    c26e:	6878      	ldr	r0, [r7, #4]
    c270:	4c0d      	ldr	r4, [pc, #52]	; (c2a8 <n25q256a_switch_mode+0xc8>)
    c272:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c274:	78fb      	ldrb	r3, [r7, #3]
    c276:	2b00      	cmp	r3, #0
    c278:	d001      	beq.n	c27e <n25q256a_switch_mode+0x9e>
    c27a:	2306      	movs	r3, #6
    c27c:	e000      	b.n	c280 <n25q256a_switch_mode+0xa0>
    c27e:	2300      	movs	r3, #0
    c280:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c282:	7afb      	ldrb	r3, [r7, #11]
    c284:	2265      	movs	r2, #101	; 0x65
    c286:	4619      	mov	r1, r3
    c288:	6878      	ldr	r0, [r7, #4]
    c28a:	4b05      	ldr	r3, [pc, #20]	; (c2a0 <n25q256a_switch_mode+0xc0>)
    c28c:	4798      	blx	r3
    c28e:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    c290:	68fb      	ldr	r3, [r7, #12]
    c292:	78fa      	ldrb	r2, [r7, #3]
    c294:	731a      	strb	r2, [r3, #12]
    c296:	e000      	b.n	c29a <n25q256a_switch_mode+0xba>
		return;
    c298:	bf00      	nop
	}
}
    c29a:	371c      	adds	r7, #28
    c29c:	46bd      	mov	sp, r7
    c29e:	bd90      	pop	{r4, r7, pc}
    c2a0:	0000bfd5 	.word	0x0000bfd5
    c2a4:	0000c111 	.word	0x0000c111
    c2a8:	0000c071 	.word	0x0000c071

0000c2ac <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    c2ac:	b580      	push	{r7, lr}
    c2ae:	b086      	sub	sp, #24
    c2b0:	af00      	add	r7, sp, #0
    c2b2:	60f8      	str	r0, [r7, #12]
    c2b4:	60b9      	str	r1, [r7, #8]
    c2b6:	607a      	str	r2, [r7, #4]
    c2b8:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    c2ba:	68fb      	ldr	r3, [r7, #12]
    c2bc:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    c2be:	4a0c      	ldr	r2, [pc, #48]	; (c2f0 <n25q256a_construct+0x44>)
    c2c0:	68b9      	ldr	r1, [r7, #8]
    c2c2:	68f8      	ldr	r0, [r7, #12]
    c2c4:	4b0b      	ldr	r3, [pc, #44]	; (c2f4 <n25q256a_construct+0x48>)
    c2c6:	4798      	blx	r3
	n25q->quad_mode    = 0;
    c2c8:	697b      	ldr	r3, [r7, #20]
    c2ca:	2200      	movs	r2, #0
    c2cc:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    c2ce:	697b      	ldr	r3, [r7, #20]
    c2d0:	2200      	movs	r2, #0
    c2d2:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    c2d4:	697b      	ldr	r3, [r7, #20]
    c2d6:	687a      	ldr	r2, [r7, #4]
    c2d8:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    c2da:	78fb      	ldrb	r3, [r7, #3]
    c2dc:	4619      	mov	r1, r3
    c2de:	68f8      	ldr	r0, [r7, #12]
    c2e0:	4b05      	ldr	r3, [pc, #20]	; (c2f8 <n25q256a_construct+0x4c>)
    c2e2:	4798      	blx	r3
	return me;
    c2e4:	68fb      	ldr	r3, [r7, #12]
}
    c2e6:	4618      	mov	r0, r3
    c2e8:	3718      	adds	r7, #24
    c2ea:	46bd      	mov	sp, r7
    c2ec:	bd80      	pop	{r7, pc}
    c2ee:	bf00      	nop
    c2f0:	0001031c 	.word	0x0001031c
    c2f4:	0000c789 	.word	0x0000c789
    c2f8:	0000c1e1 	.word	0x0000c1e1

0000c2fc <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c2fc:	b580      	push	{r7, lr}
    c2fe:	b08c      	sub	sp, #48	; 0x30
    c300:	af00      	add	r7, sp, #0
    c302:	60f8      	str	r0, [r7, #12]
    c304:	60b9      	str	r1, [r7, #8]
    c306:	607a      	str	r2, [r7, #4]
    c308:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c30a:	68fb      	ldr	r3, [r7, #12]
    c30c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c30e:	68fb      	ldr	r3, [r7, #12]
    c310:	681b      	ldr	r3, [r3, #0]
    c312:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    c314:	f107 0310 	add.w	r3, r7, #16
    c318:	2200      	movs	r2, #0
    c31a:	601a      	str	r2, [r3, #0]
    c31c:	605a      	str	r2, [r3, #4]
    c31e:	609a      	str	r2, [r3, #8]
    c320:	60da      	str	r2, [r3, #12]
    c322:	611a      	str	r2, [r3, #16]
    c324:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c328:	7b1b      	ldrb	r3, [r3, #12]
    c32a:	2b00      	cmp	r3, #0
    c32c:	d001      	beq.n	c332 <n25q256a_read+0x36>
    c32e:	2206      	movs	r2, #6
    c330:	e000      	b.n	c334 <n25q256a_read+0x38>
    c332:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    c334:	7c3b      	ldrb	r3, [r7, #16]
    c336:	f362 0302 	bfi	r3, r2, #0, #3
    c33a:	743b      	strb	r3, [r7, #16]
    c33c:	7c3b      	ldrb	r3, [r7, #16]
    c33e:	f043 0310 	orr.w	r3, r3, #16
    c342:	743b      	strb	r3, [r7, #16]
    c344:	7c3b      	ldrb	r3, [r7, #16]
    c346:	f043 0320 	orr.w	r3, r3, #32
    c34a:	743b      	strb	r3, [r7, #16]
    c34c:	7c3b      	ldrb	r3, [r7, #16]
    c34e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c352:	743b      	strb	r3, [r7, #16]
    c354:	7c7b      	ldrb	r3, [r7, #17]
    c356:	2201      	movs	r2, #1
    c358:	f362 1305 	bfi	r3, r2, #4, #2
    c35c:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    c35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c360:	7b1b      	ldrb	r3, [r3, #12]
    c362:	2b00      	cmp	r3, #0
    c364:	d001      	beq.n	c36a <n25q256a_read+0x6e>
    c366:	220a      	movs	r2, #10
    c368:	e000      	b.n	c36c <n25q256a_read+0x70>
    c36a:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    c36c:	7cbb      	ldrb	r3, [r7, #18]
    c36e:	f362 0304 	bfi	r3, r2, #0, #5
    c372:	74bb      	strb	r3, [r7, #18]
    c374:	230b      	movs	r3, #11
    c376:	753b      	strb	r3, [r7, #20]
    c378:	687b      	ldr	r3, [r7, #4]
    c37a:	61bb      	str	r3, [r7, #24]
    c37c:	683b      	ldr	r3, [r7, #0]
    c37e:	61fb      	str	r3, [r7, #28]
    c380:	68bb      	ldr	r3, [r7, #8]
    c382:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    c384:	f107 0310 	add.w	r3, r7, #16
    c388:	4619      	mov	r1, r3
    c38a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c38c:	4b03      	ldr	r3, [pc, #12]	; (c39c <n25q256a_read+0xa0>)
    c38e:	4798      	blx	r3
	return ERR_NONE;
    c390:	2300      	movs	r3, #0
}
    c392:	4618      	mov	r0, r3
    c394:	3730      	adds	r7, #48	; 0x30
    c396:	46bd      	mov	sp, r7
    c398:	bd80      	pop	{r7, pc}
    c39a:	bf00      	nop
    c39c:	00002c81 	.word	0x00002c81

0000c3a0 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c3a0:	b580      	push	{r7, lr}
    c3a2:	b08c      	sub	sp, #48	; 0x30
    c3a4:	af00      	add	r7, sp, #0
    c3a6:	60f8      	str	r0, [r7, #12]
    c3a8:	60b9      	str	r1, [r7, #8]
    c3aa:	607a      	str	r2, [r7, #4]
    c3ac:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c3ae:	68fb      	ldr	r3, [r7, #12]
    c3b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c3b2:	68fb      	ldr	r3, [r7, #12]
    c3b4:	681b      	ldr	r3, [r3, #0]
    c3b6:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    c3b8:	f107 0310 	add.w	r3, r7, #16
    c3bc:	2200      	movs	r2, #0
    c3be:	601a      	str	r2, [r3, #0]
    c3c0:	605a      	str	r2, [r3, #4]
    c3c2:	609a      	str	r2, [r3, #8]
    c3c4:	60da      	str	r2, [r3, #12]
    c3c6:	611a      	str	r2, [r3, #16]
    c3c8:	615a      	str	r2, [r3, #20]
    c3ca:	7c3b      	ldrb	r3, [r7, #16]
    c3cc:	f043 0310 	orr.w	r3, r3, #16
    c3d0:	743b      	strb	r3, [r7, #16]
    c3d2:	7c3b      	ldrb	r3, [r7, #16]
    c3d4:	f043 0320 	orr.w	r3, r3, #32
    c3d8:	743b      	strb	r3, [r7, #16]
    c3da:	7c3b      	ldrb	r3, [r7, #16]
    c3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c3e0:	743b      	strb	r3, [r7, #16]
    c3e2:	7c7b      	ldrb	r3, [r7, #17]
    c3e4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    c3e8:	747b      	strb	r3, [r7, #17]
    c3ea:	2302      	movs	r3, #2
    c3ec:	753b      	strb	r3, [r7, #20]
    c3ee:	687b      	ldr	r3, [r7, #4]
    c3f0:	61bb      	str	r3, [r7, #24]
    c3f2:	683b      	ldr	r3, [r7, #0]
    c3f4:	61fb      	str	r3, [r7, #28]
    c3f6:	68bb      	ldr	r3, [r7, #8]
    c3f8:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c3fc:	7b1b      	ldrb	r3, [r3, #12]
    c3fe:	2b00      	cmp	r3, #0
    c400:	d001      	beq.n	c406 <n25q256a_write+0x66>
    c402:	2206      	movs	r2, #6
    c404:	e000      	b.n	c408 <n25q256a_write+0x68>
    c406:	2200      	movs	r2, #0
    c408:	7c3b      	ldrb	r3, [r7, #16]
    c40a:	f362 0302 	bfi	r3, r2, #0, #3
    c40e:	743b      	strb	r3, [r7, #16]
	while (length) {
    c410:	e035      	b.n	c47e <n25q256a_write+0xde>
		cmd.address = address;
    c412:	687b      	ldr	r3, [r7, #4]
    c414:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    c416:	683b      	ldr	r3, [r7, #0]
    c418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c41c:	d802      	bhi.n	c424 <n25q256a_write+0x84>
			cmd.buf_len = length;
    c41e:	683b      	ldr	r3, [r7, #0]
    c420:	61fb      	str	r3, [r7, #28]
    c422:	e002      	b.n	c42a <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    c424:	f44f 7380 	mov.w	r3, #256	; 0x100
    c428:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c42a:	7c3b      	ldrb	r3, [r7, #16]
    c42c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c430:	b2db      	uxtb	r3, r3
    c432:	2201      	movs	r2, #1
    c434:	4619      	mov	r1, r3
    c436:	68f8      	ldr	r0, [r7, #12]
    c438:	4b19      	ldr	r3, [pc, #100]	; (c4a0 <n25q256a_write+0x100>)
    c43a:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    c43c:	f107 0310 	add.w	r3, r7, #16
    c440:	4619      	mov	r1, r3
    c442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c444:	4b17      	ldr	r3, [pc, #92]	; (c4a4 <n25q256a_write+0x104>)
    c446:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c448:	bf00      	nop
    c44a:	7c3b      	ldrb	r3, [r7, #16]
    c44c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c450:	b2db      	uxtb	r3, r3
    c452:	2270      	movs	r2, #112	; 0x70
    c454:	4619      	mov	r1, r3
    c456:	68f8      	ldr	r0, [r7, #12]
    c458:	4b13      	ldr	r3, [pc, #76]	; (c4a8 <n25q256a_write+0x108>)
    c45a:	4798      	blx	r3
    c45c:	4603      	mov	r3, r0
    c45e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c462:	2b00      	cmp	r3, #0
    c464:	d0f1      	beq.n	c44a <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    c466:	6a3a      	ldr	r2, [r7, #32]
    c468:	69fb      	ldr	r3, [r7, #28]
    c46a:	4413      	add	r3, r2
    c46c:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    c46e:	69fb      	ldr	r3, [r7, #28]
    c470:	683a      	ldr	r2, [r7, #0]
    c472:	1ad3      	subs	r3, r2, r3
    c474:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    c476:	69fb      	ldr	r3, [r7, #28]
    c478:	687a      	ldr	r2, [r7, #4]
    c47a:	4413      	add	r3, r2
    c47c:	607b      	str	r3, [r7, #4]
	while (length) {
    c47e:	683b      	ldr	r3, [r7, #0]
    c480:	2b00      	cmp	r3, #0
    c482:	d1c6      	bne.n	c412 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    c484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c486:	7b5b      	ldrb	r3, [r3, #13]
    c488:	2b00      	cmp	r3, #0
    c48a:	d003      	beq.n	c494 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    c48c:	2101      	movs	r1, #1
    c48e:	68f8      	ldr	r0, [r7, #12]
    c490:	4b06      	ldr	r3, [pc, #24]	; (c4ac <n25q256a_write+0x10c>)
    c492:	4798      	blx	r3
	}
	return ERR_NONE;
    c494:	2300      	movs	r3, #0
}
    c496:	4618      	mov	r0, r3
    c498:	3730      	adds	r7, #48	; 0x30
    c49a:	46bd      	mov	sp, r7
    c49c:	bd80      	pop	{r7, pc}
    c49e:	bf00      	nop
    c4a0:	0000c111 	.word	0x0000c111
    c4a4:	00002c81 	.word	0x00002c81
    c4a8:	0000bfd5 	.word	0x0000bfd5
    c4ac:	0000bf09 	.word	0x0000bf09

0000c4b0 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    c4b0:	b580      	push	{r7, lr}
    c4b2:	b090      	sub	sp, #64	; 0x40
    c4b4:	af00      	add	r7, sp, #0
    c4b6:	60f8      	str	r0, [r7, #12]
    c4b8:	60b9      	str	r1, [r7, #8]
    c4ba:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c4bc:	68fb      	ldr	r3, [r7, #12]
    c4be:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c4c0:	68fb      	ldr	r3, [r7, #12]
    c4c2:	681b      	ldr	r3, [r3, #0]
    c4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    c4c6:	f107 0314 	add.w	r3, r7, #20
    c4ca:	2200      	movs	r2, #0
    c4cc:	601a      	str	r2, [r3, #0]
    c4ce:	605a      	str	r2, [r3, #4]
    c4d0:	609a      	str	r2, [r3, #8]
    c4d2:	60da      	str	r2, [r3, #12]
    c4d4:	611a      	str	r2, [r3, #16]
    c4d6:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c4da:	7b1b      	ldrb	r3, [r3, #12]
    c4dc:	2b00      	cmp	r3, #0
    c4de:	d001      	beq.n	c4e4 <n25q256a_erase+0x34>
    c4e0:	2206      	movs	r2, #6
    c4e2:	e000      	b.n	c4e6 <n25q256a_erase+0x36>
    c4e4:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    c4e6:	7d3b      	ldrb	r3, [r7, #20]
    c4e8:	f362 0302 	bfi	r3, r2, #0, #3
    c4ec:	753b      	strb	r3, [r7, #20]
    c4ee:	7d3b      	ldrb	r3, [r7, #20]
    c4f0:	f043 0310 	orr.w	r3, r3, #16
    c4f4:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    c4f6:	687b      	ldr	r3, [r7, #4]
    c4f8:	4a56      	ldr	r2, [pc, #344]	; (c654 <n25q256a_erase+0x1a4>)
    c4fa:	4293      	cmp	r3, r2
    c4fc:	bf94      	ite	ls
    c4fe:	2301      	movls	r3, #1
    c500:	2300      	movhi	r3, #0
    c502:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    c504:	7d3b      	ldrb	r3, [r7, #20]
    c506:	f362 1345 	bfi	r3, r2, #5, #1
    c50a:	753b      	strb	r3, [r7, #20]
    c50c:	7d7b      	ldrb	r3, [r7, #21]
    c50e:	2202      	movs	r2, #2
    c510:	f362 1305 	bfi	r3, r2, #4, #2
    c514:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    c516:	68bb      	ldr	r3, [r7, #8]
    c518:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    c51a:	687b      	ldr	r3, [r7, #4]
    c51c:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    c51e:	2300      	movs	r3, #0
    c520:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    c522:	687b      	ldr	r3, [r7, #4]
    c524:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c528:	2b00      	cmp	r3, #0
    c52a:	d104      	bne.n	c536 <n25q256a_erase+0x86>
    c52c:	68bb      	ldr	r3, [r7, #8]
    c52e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c532:	2b00      	cmp	r3, #0
    c534:	d002      	beq.n	c53c <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    c536:	f06f 030c 	mvn.w	r3, #12
    c53a:	e087      	b.n	c64c <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    c53c:	687b      	ldr	r3, [r7, #4]
    c53e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    c542:	d368      	bcc.n	c616 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    c544:	23c7      	movs	r3, #199	; 0xc7
    c546:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c548:	7d3b      	ldrb	r3, [r7, #20]
    c54a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c54e:	b2db      	uxtb	r3, r3
    c550:	2201      	movs	r2, #1
    c552:	4619      	mov	r1, r3
    c554:	68f8      	ldr	r0, [r7, #12]
    c556:	4b40      	ldr	r3, [pc, #256]	; (c658 <n25q256a_erase+0x1a8>)
    c558:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    c55a:	f107 0314 	add.w	r3, r7, #20
    c55e:	4619      	mov	r1, r3
    c560:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c562:	4b3e      	ldr	r3, [pc, #248]	; (c65c <n25q256a_erase+0x1ac>)
    c564:	4798      	blx	r3
    c566:	e059      	b.n	c61c <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    c568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c56a:	b29b      	uxth	r3, r3
    c56c:	2b00      	cmp	r3, #0
    c56e:	d11f      	bne.n	c5b0 <n25q256a_erase+0x100>
    c570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c576:	d31b      	bcc.n	c5b0 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    c578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c57a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    c57c:	23d8      	movs	r3, #216	; 0xd8
    c57e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c580:	7d3b      	ldrb	r3, [r7, #20]
    c582:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c586:	b2db      	uxtb	r3, r3
    c588:	2201      	movs	r2, #1
    c58a:	4619      	mov	r1, r3
    c58c:	68f8      	ldr	r0, [r7, #12]
    c58e:	4b32      	ldr	r3, [pc, #200]	; (c658 <n25q256a_erase+0x1a8>)
    c590:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c592:	f107 0314 	add.w	r3, r7, #20
    c596:	4619      	mov	r1, r3
    c598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c59a:	4b30      	ldr	r3, [pc, #192]	; (c65c <n25q256a_erase+0x1ac>)
    c59c:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    c59e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c5a0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    c5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    c5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c5a8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    c5ac:	63bb      	str	r3, [r7, #56]	; 0x38
    c5ae:	e023      	b.n	c5f8 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    c5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c5b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    c5b6:	d31b      	bcc.n	c5f0 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    c5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c5ba:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    c5bc:	2320      	movs	r3, #32
    c5be:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c5c0:	7d3b      	ldrb	r3, [r7, #20]
    c5c2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c5c6:	b2db      	uxtb	r3, r3
    c5c8:	2201      	movs	r2, #1
    c5ca:	4619      	mov	r1, r3
    c5cc:	68f8      	ldr	r0, [r7, #12]
    c5ce:	4b22      	ldr	r3, [pc, #136]	; (c658 <n25q256a_erase+0x1a8>)
    c5d0:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c5d2:	f107 0314 	add.w	r3, r7, #20
    c5d6:	4619      	mov	r1, r3
    c5d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c5da:	4b20      	ldr	r3, [pc, #128]	; (c65c <n25q256a_erase+0x1ac>)
    c5dc:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    c5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c5e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    c5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    c5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c5e8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    c5ec:	63bb      	str	r3, [r7, #56]	; 0x38
    c5ee:	e003      	b.n	c5f8 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    c5f0:	f06f 030c 	mvn.w	r3, #12
    c5f4:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    c5f6:	e011      	b.n	c61c <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c5f8:	bf00      	nop
    c5fa:	7d3b      	ldrb	r3, [r7, #20]
    c5fc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c600:	b2db      	uxtb	r3, r3
    c602:	2270      	movs	r2, #112	; 0x70
    c604:	4619      	mov	r1, r3
    c606:	68f8      	ldr	r0, [r7, #12]
    c608:	4b15      	ldr	r3, [pc, #84]	; (c660 <n25q256a_erase+0x1b0>)
    c60a:	4798      	blx	r3
    c60c:	4603      	mov	r3, r0
    c60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c612:	2b00      	cmp	r3, #0
    c614:	d0f1      	beq.n	c5fa <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    c616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c618:	2b00      	cmp	r3, #0
    c61a:	d1a5      	bne.n	c568 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c61c:	bf00      	nop
    c61e:	7d3b      	ldrb	r3, [r7, #20]
    c620:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c624:	b2db      	uxtb	r3, r3
    c626:	2270      	movs	r2, #112	; 0x70
    c628:	4619      	mov	r1, r3
    c62a:	68f8      	ldr	r0, [r7, #12]
    c62c:	4b0c      	ldr	r3, [pc, #48]	; (c660 <n25q256a_erase+0x1b0>)
    c62e:	4798      	blx	r3
    c630:	4603      	mov	r3, r0
    c632:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c636:	2b00      	cmp	r3, #0
    c638:	d0f1      	beq.n	c61e <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    c63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c63c:	7b5b      	ldrb	r3, [r3, #13]
    c63e:	2b00      	cmp	r3, #0
    c640:	d003      	beq.n	c64a <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    c642:	2101      	movs	r1, #1
    c644:	68f8      	ldr	r0, [r7, #12]
    c646:	4b07      	ldr	r3, [pc, #28]	; (c664 <n25q256a_erase+0x1b4>)
    c648:	4798      	blx	r3
	}
	return rc;
    c64a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    c64c:	4618      	mov	r0, r3
    c64e:	3740      	adds	r7, #64	; 0x40
    c650:	46bd      	mov	sp, r7
    c652:	bd80      	pop	{r7, pc}
    c654:	001fffff 	.word	0x001fffff
    c658:	0000c111 	.word	0x0000c111
    c65c:	00002c81 	.word	0x00002c81
    c660:	0000bfd5 	.word	0x0000bfd5
    c664:	0000bf09 	.word	0x0000bf09

0000c668 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    c668:	b590      	push	{r4, r7, lr}
    c66a:	b085      	sub	sp, #20
    c66c:	af00      	add	r7, sp, #0
    c66e:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    c670:	687b      	ldr	r3, [r7, #4]
    c672:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c674:	68fb      	ldr	r3, [r7, #12]
    c676:	7b1b      	ldrb	r3, [r3, #12]
    c678:	2b00      	cmp	r3, #0
    c67a:	d001      	beq.n	c680 <n25q256a_enable_xip+0x18>
    c67c:	2306      	movs	r3, #6
    c67e:	e000      	b.n	c682 <n25q256a_enable_xip+0x1a>
    c680:	2300      	movs	r3, #0
    c682:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    c684:	68fb      	ldr	r3, [r7, #12]
    c686:	7b5b      	ldrb	r3, [r3, #13]
    c688:	2b00      	cmp	r3, #0
    c68a:	d129      	bne.n	c6e0 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c68c:	7afb      	ldrb	r3, [r7, #11]
    c68e:	2285      	movs	r2, #133	; 0x85
    c690:	4619      	mov	r1, r3
    c692:	6878      	ldr	r0, [r7, #4]
    c694:	4b15      	ldr	r3, [pc, #84]	; (c6ec <n25q256a_enable_xip+0x84>)
    c696:	4798      	blx	r3
    c698:	4603      	mov	r3, r0
    c69a:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    c69c:	7abb      	ldrb	r3, [r7, #10]
    c69e:	f003 0308 	and.w	r3, r3, #8
    c6a2:	2b00      	cmp	r3, #0
    c6a4:	d015      	beq.n	c6d2 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    c6a6:	7abb      	ldrb	r3, [r7, #10]
    c6a8:	f023 0308 	bic.w	r3, r3, #8
    c6ac:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    c6ae:	7abb      	ldrb	r3, [r7, #10]
    c6b0:	7af9      	ldrb	r1, [r7, #11]
    c6b2:	2281      	movs	r2, #129	; 0x81
    c6b4:	6878      	ldr	r0, [r7, #4]
    c6b6:	4c0e      	ldr	r4, [pc, #56]	; (c6f0 <n25q256a_enable_xip+0x88>)
    c6b8:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c6ba:	bf00      	nop
    c6bc:	7afb      	ldrb	r3, [r7, #11]
    c6be:	2270      	movs	r2, #112	; 0x70
    c6c0:	4619      	mov	r1, r3
    c6c2:	6878      	ldr	r0, [r7, #4]
    c6c4:	4b09      	ldr	r3, [pc, #36]	; (c6ec <n25q256a_enable_xip+0x84>)
    c6c6:	4798      	blx	r3
    c6c8:	4603      	mov	r3, r0
    c6ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c6ce:	2b00      	cmp	r3, #0
    c6d0:	d0f4      	beq.n	c6bc <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    c6d2:	68fb      	ldr	r3, [r7, #12]
    c6d4:	2201      	movs	r2, #1
    c6d6:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    c6d8:	2101      	movs	r1, #1
    c6da:	6878      	ldr	r0, [r7, #4]
    c6dc:	4b05      	ldr	r3, [pc, #20]	; (c6f4 <n25q256a_enable_xip+0x8c>)
    c6de:	4798      	blx	r3
	}
	return ERR_NONE;
    c6e0:	2300      	movs	r3, #0
}
    c6e2:	4618      	mov	r0, r3
    c6e4:	3714      	adds	r7, #20
    c6e6:	46bd      	mov	sp, r7
    c6e8:	bd90      	pop	{r4, r7, pc}
    c6ea:	bf00      	nop
    c6ec:	0000bfd5 	.word	0x0000bfd5
    c6f0:	0000c071 	.word	0x0000c071
    c6f4:	0000bf09 	.word	0x0000bf09

0000c6f8 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    c6f8:	b580      	push	{r7, lr}
    c6fa:	b086      	sub	sp, #24
    c6fc:	af00      	add	r7, sp, #0
    c6fe:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c700:	687b      	ldr	r3, [r7, #4]
    c702:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c704:	687b      	ldr	r3, [r7, #4]
    c706:	681b      	ldr	r3, [r3, #0]
    c708:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c70a:	697b      	ldr	r3, [r7, #20]
    c70c:	7b1b      	ldrb	r3, [r3, #12]
    c70e:	2b00      	cmp	r3, #0
    c710:	d001      	beq.n	c716 <n25q256a_disable_xip+0x1e>
    c712:	2306      	movs	r3, #6
    c714:	e000      	b.n	c718 <n25q256a_disable_xip+0x20>
    c716:	2300      	movs	r3, #0
    c718:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    c71a:	2100      	movs	r1, #0
    c71c:	6878      	ldr	r0, [r7, #4]
    c71e:	4b15      	ldr	r3, [pc, #84]	; (c774 <n25q256a_disable_xip+0x7c>)
    c720:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c722:	7bfb      	ldrb	r3, [r7, #15]
    c724:	2285      	movs	r2, #133	; 0x85
    c726:	4619      	mov	r1, r3
    c728:	6878      	ldr	r0, [r7, #4]
    c72a:	4b13      	ldr	r3, [pc, #76]	; (c778 <n25q256a_disable_xip+0x80>)
    c72c:	4798      	blx	r3
    c72e:	4603      	mov	r3, r0
    c730:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    c732:	7bbb      	ldrb	r3, [r7, #14]
    c734:	f003 0308 	and.w	r3, r3, #8
    c738:	2b00      	cmp	r3, #0
    c73a:	d113      	bne.n	c764 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    c73c:	697b      	ldr	r3, [r7, #20]
    c73e:	689b      	ldr	r3, [r3, #8]
    c740:	2b00      	cmp	r3, #0
    c742:	d00f      	beq.n	c764 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    c744:	693b      	ldr	r3, [r7, #16]
    c746:	681b      	ldr	r3, [r3, #0]
    c748:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    c74a:	6938      	ldr	r0, [r7, #16]
    c74c:	4b0b      	ldr	r3, [pc, #44]	; (c77c <n25q256a_disable_xip+0x84>)
    c74e:	4798      	blx	r3
			n25q->pin_exit_xip();
    c750:	697b      	ldr	r3, [r7, #20]
    c752:	689b      	ldr	r3, [r3, #8]
    c754:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    c756:	68b9      	ldr	r1, [r7, #8]
    c758:	6938      	ldr	r0, [r7, #16]
    c75a:	4b09      	ldr	r3, [pc, #36]	; (c780 <n25q256a_disable_xip+0x88>)
    c75c:	4798      	blx	r3
			qspi_sync_enable(descr);
    c75e:	6938      	ldr	r0, [r7, #16]
    c760:	4b08      	ldr	r3, [pc, #32]	; (c784 <n25q256a_disable_xip+0x8c>)
    c762:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    c764:	697b      	ldr	r3, [r7, #20]
    c766:	2200      	movs	r2, #0
    c768:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c76a:	2300      	movs	r3, #0
}
    c76c:	4618      	mov	r0, r3
    c76e:	3718      	adds	r7, #24
    c770:	46bd      	mov	sp, r7
    c772:	bd80      	pop	{r7, pc}
    c774:	0000bf09 	.word	0x0000bf09
    c778:	0000bfd5 	.word	0x0000bfd5
    c77c:	00002c45 	.word	0x00002c45
    c780:	00002bbd 	.word	0x00002bbd
    c784:	00002c09 	.word	0x00002c09

0000c788 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    c788:	b480      	push	{r7}
    c78a:	b085      	sub	sp, #20
    c78c:	af00      	add	r7, sp, #0
    c78e:	60f8      	str	r0, [r7, #12]
    c790:	60b9      	str	r1, [r7, #8]
    c792:	607a      	str	r2, [r7, #4]
	me->io        = io;
    c794:	68fb      	ldr	r3, [r7, #12]
    c796:	68ba      	ldr	r2, [r7, #8]
    c798:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    c79a:	68fb      	ldr	r3, [r7, #12]
    c79c:	687a      	ldr	r2, [r7, #4]
    c79e:	605a      	str	r2, [r3, #4]

	return me;
    c7a0:	68fb      	ldr	r3, [r7, #12]
}
    c7a2:	4618      	mov	r0, r3
    c7a4:	3714      	adds	r7, #20
    c7a6:	46bd      	mov	sp, r7
    c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7ac:	4770      	bx	lr

0000c7ae <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    c7ae:	b480      	push	{r7}
    c7b0:	b083      	sub	sp, #12
    c7b2:	af00      	add	r7, sp, #0
    c7b4:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c7b6:	687b      	ldr	r3, [r7, #4]
    c7b8:	781b      	ldrb	r3, [r3, #0]
    c7ba:	b29a      	uxth	r2, r3
    c7bc:	687b      	ldr	r3, [r7, #4]
    c7be:	3301      	adds	r3, #1
    c7c0:	781b      	ldrb	r3, [r3, #0]
    c7c2:	b29b      	uxth	r3, r3
    c7c4:	021b      	lsls	r3, r3, #8
    c7c6:	b29b      	uxth	r3, r3
    c7c8:	4413      	add	r3, r2
    c7ca:	b29b      	uxth	r3, r3
}
    c7cc:	4618      	mov	r0, r3
    c7ce:	370c      	adds	r7, #12
    c7d0:	46bd      	mov	sp, r7
    c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7d6:	4770      	bx	lr

0000c7d8 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    c7d8:	b480      	push	{r7}
    c7da:	b083      	sub	sp, #12
    c7dc:	af00      	add	r7, sp, #0
    c7de:	6078      	str	r0, [r7, #4]
	return desc[0];
    c7e0:	687b      	ldr	r3, [r7, #4]
    c7e2:	781b      	ldrb	r3, [r3, #0]
}
    c7e4:	4618      	mov	r0, r3
    c7e6:	370c      	adds	r7, #12
    c7e8:	46bd      	mov	sp, r7
    c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7ee:	4770      	bx	lr

0000c7f0 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    c7f0:	b580      	push	{r7, lr}
    c7f2:	b082      	sub	sp, #8
    c7f4:	af00      	add	r7, sp, #0
    c7f6:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c7f8:	6878      	ldr	r0, [r7, #4]
    c7fa:	4b05      	ldr	r3, [pc, #20]	; (c810 <usb_desc_next+0x20>)
    c7fc:	4798      	blx	r3
    c7fe:	4603      	mov	r3, r0
    c800:	461a      	mov	r2, r3
    c802:	687b      	ldr	r3, [r7, #4]
    c804:	4413      	add	r3, r2
}
    c806:	4618      	mov	r0, r3
    c808:	3708      	adds	r7, #8
    c80a:	46bd      	mov	sp, r7
    c80c:	bd80      	pop	{r7, pc}
    c80e:	bf00      	nop
    c810:	0000c7d9 	.word	0x0000c7d9

0000c814 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c814:	b580      	push	{r7, lr}
    c816:	b08c      	sub	sp, #48	; 0x30
    c818:	af00      	add	r7, sp, #0
    c81a:	6078      	str	r0, [r7, #4]
    c81c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c81e:	687b      	ldr	r3, [r7, #4]
    c820:	689b      	ldr	r3, [r3, #8]
    c822:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    c824:	683b      	ldr	r3, [r7, #0]
    c826:	681b      	ldr	r3, [r3, #0]
    c828:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c82a:	2300      	movs	r3, #0
    c82c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c830:	e08f      	b.n	c952 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    c832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c834:	2b00      	cmp	r3, #0
    c836:	d102      	bne.n	c83e <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    c838:	f06f 0309 	mvn.w	r3, #9
    c83c:	e092      	b.n	c964 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    c83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c840:	789b      	ldrb	r3, [r3, #2]
    c842:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    c844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c846:	795b      	ldrb	r3, [r3, #5]
    c848:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c84a:	7c7b      	ldrb	r3, [r7, #17]
    c84c:	2b02      	cmp	r3, #2
    c84e:	d002      	beq.n	c856 <cdcdf_acm_enable+0x42>
    c850:	7c7b      	ldrb	r3, [r7, #17]
    c852:	2b0a      	cmp	r3, #10
    c854:	d121      	bne.n	c89a <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c85a:	6a3a      	ldr	r2, [r7, #32]
    c85c:	5cd2      	ldrb	r2, [r2, r3]
    c85e:	7bbb      	ldrb	r3, [r7, #14]
    c860:	429a      	cmp	r2, r3
    c862:	d102      	bne.n	c86a <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    c864:	f06f 0311 	mvn.w	r3, #17
    c868:	e07c      	b.n	c964 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c86a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c86e:	6a3a      	ldr	r2, [r7, #32]
    c870:	5cd3      	ldrb	r3, [r2, r3]
    c872:	2bff      	cmp	r3, #255	; 0xff
    c874:	d002      	beq.n	c87c <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    c876:	f06f 031b 	mvn.w	r3, #27
    c87a:	e073      	b.n	c964 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c87c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c880:	7bb9      	ldrb	r1, [r7, #14]
    c882:	6a3a      	ldr	r2, [r7, #32]
    c884:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c886:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c888:	683b      	ldr	r3, [r7, #0]
    c88a:	685b      	ldr	r3, [r3, #4]
    c88c:	2205      	movs	r2, #5
    c88e:	4619      	mov	r1, r3
    c890:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c892:	4b36      	ldr	r3, [pc, #216]	; (c96c <cdcdf_acm_enable+0x158>)
    c894:	4798      	blx	r3
    c896:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c898:	e047      	b.n	c92a <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    c89a:	f06f 0309 	mvn.w	r3, #9
    c89e:	e061      	b.n	c964 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    c8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c8a2:	789b      	ldrb	r3, [r3, #2]
    c8a4:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    c8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c8a8:	78db      	ldrb	r3, [r3, #3]
    c8aa:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    c8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c8ae:	3304      	adds	r3, #4
    c8b0:	4618      	mov	r0, r3
    c8b2:	4b2f      	ldr	r3, [pc, #188]	; (c970 <cdcdf_acm_enable+0x15c>)
    c8b4:	4798      	blx	r3
    c8b6:	4603      	mov	r3, r0
    c8b8:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c8ba:	7ebb      	ldrb	r3, [r7, #26]
    c8bc:	7ef9      	ldrb	r1, [r7, #27]
    c8be:	8bba      	ldrh	r2, [r7, #28]
    c8c0:	4618      	mov	r0, r3
    c8c2:	4b2c      	ldr	r3, [pc, #176]	; (c974 <cdcdf_acm_enable+0x160>)
    c8c4:	4798      	blx	r3
    c8c6:	4603      	mov	r3, r0
    c8c8:	2b00      	cmp	r3, #0
    c8ca:	d002      	beq.n	c8d2 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    c8cc:	f06f 0313 	mvn.w	r3, #19
    c8d0:	e048      	b.n	c964 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c8d2:	7ebb      	ldrb	r3, [r7, #26]
    c8d4:	b25b      	sxtb	r3, r3
    c8d6:	2b00      	cmp	r3, #0
    c8d8:	da0f      	bge.n	c8fa <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c8da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c8de:	7eb9      	ldrb	r1, [r7, #26]
    c8e0:	6a3a      	ldr	r2, [r7, #32]
    c8e2:	4413      	add	r3, r2
    c8e4:	460a      	mov	r2, r1
    c8e6:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    c8e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c8ec:	6a3a      	ldr	r2, [r7, #32]
    c8ee:	4413      	add	r3, r2
    c8f0:	789b      	ldrb	r3, [r3, #2]
    c8f2:	4618      	mov	r0, r3
    c8f4:	4b20      	ldr	r3, [pc, #128]	; (c978 <cdcdf_acm_enable+0x164>)
    c8f6:	4798      	blx	r3
    c8f8:	e007      	b.n	c90a <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c8fa:	7eba      	ldrb	r2, [r7, #26]
    c8fc:	6a3b      	ldr	r3, [r7, #32]
    c8fe:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c900:	6a3b      	ldr	r3, [r7, #32]
    c902:	791b      	ldrb	r3, [r3, #4]
    c904:	4618      	mov	r0, r3
    c906:	4b1c      	ldr	r3, [pc, #112]	; (c978 <cdcdf_acm_enable+0x164>)
    c908:	4798      	blx	r3
			}
			desc->sod = ep;
    c90a:	683b      	ldr	r3, [r7, #0]
    c90c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c90e:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c910:	683b      	ldr	r3, [r7, #0]
    c912:	681b      	ldr	r3, [r3, #0]
    c914:	4618      	mov	r0, r3
    c916:	4b19      	ldr	r3, [pc, #100]	; (c97c <cdcdf_acm_enable+0x168>)
    c918:	4798      	blx	r3
    c91a:	4602      	mov	r2, r0
    c91c:	683b      	ldr	r3, [r7, #0]
    c91e:	685b      	ldr	r3, [r3, #4]
    c920:	4619      	mov	r1, r3
    c922:	4610      	mov	r0, r2
    c924:	4b16      	ldr	r3, [pc, #88]	; (c980 <cdcdf_acm_enable+0x16c>)
    c926:	4798      	blx	r3
    c928:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c92c:	2b00      	cmp	r3, #0
    c92e:	d1b7      	bne.n	c8a0 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c930:	683b      	ldr	r3, [r7, #0]
    c932:	681b      	ldr	r3, [r3, #0]
    c934:	4618      	mov	r0, r3
    c936:	4b11      	ldr	r3, [pc, #68]	; (c97c <cdcdf_acm_enable+0x168>)
    c938:	4798      	blx	r3
    c93a:	683b      	ldr	r3, [r7, #0]
    c93c:	685b      	ldr	r3, [r3, #4]
    c93e:	2204      	movs	r2, #4
    c940:	4619      	mov	r1, r3
    c942:	4b0a      	ldr	r3, [pc, #40]	; (c96c <cdcdf_acm_enable+0x158>)
    c944:	4798      	blx	r3
    c946:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c94c:	3301      	adds	r3, #1
    c94e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c956:	2b01      	cmp	r3, #1
    c958:	f67f af6b 	bls.w	c832 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    c95c:	4b09      	ldr	r3, [pc, #36]	; (c984 <cdcdf_acm_enable+0x170>)
    c95e:	2201      	movs	r2, #1
    c960:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c962:	2300      	movs	r3, #0
}
    c964:	4618      	mov	r0, r3
    c966:	3730      	adds	r7, #48	; 0x30
    c968:	46bd      	mov	sp, r7
    c96a:	bd80      	pop	{r7, pc}
    c96c:	0000dbd5 	.word	0x0000dbd5
    c970:	0000c7af 	.word	0x0000c7af
    c974:	000038f5 	.word	0x000038f5
    c978:	000039e1 	.word	0x000039e1
    c97c:	0000c7f1 	.word	0x0000c7f1
    c980:	0000dc31 	.word	0x0000dc31
    c984:	2000106c 	.word	0x2000106c

0000c988 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c988:	b580      	push	{r7, lr}
    c98a:	b088      	sub	sp, #32
    c98c:	af00      	add	r7, sp, #0
    c98e:	6078      	str	r0, [r7, #4]
    c990:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c992:	687b      	ldr	r3, [r7, #4]
    c994:	689b      	ldr	r3, [r3, #8]
    c996:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    c998:	683b      	ldr	r3, [r7, #0]
    c99a:	2b00      	cmp	r3, #0
    c99c:	d00c      	beq.n	c9b8 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c99e:	683b      	ldr	r3, [r7, #0]
    c9a0:	681b      	ldr	r3, [r3, #0]
    c9a2:	795b      	ldrb	r3, [r3, #5]
    c9a4:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c9a6:	7c7b      	ldrb	r3, [r7, #17]
    c9a8:	2b02      	cmp	r3, #2
    c9aa:	d005      	beq.n	c9b8 <cdcdf_acm_disable+0x30>
    c9ac:	7c7b      	ldrb	r3, [r7, #17]
    c9ae:	2b0a      	cmp	r3, #10
    c9b0:	d002      	beq.n	c9b8 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    c9b2:	f06f 0309 	mvn.w	r3, #9
    c9b6:	e035      	b.n	ca24 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    c9b8:	2300      	movs	r3, #0
    c9ba:	77fb      	strb	r3, [r7, #31]
    c9bc:	e01f      	b.n	c9fe <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    c9be:	7ffb      	ldrb	r3, [r7, #31]
    c9c0:	69ba      	ldr	r2, [r7, #24]
    c9c2:	5cd3      	ldrb	r3, [r2, r3]
    c9c4:	2bff      	cmp	r3, #255	; 0xff
    c9c6:	d016      	beq.n	c9f6 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    c9c8:	7ffb      	ldrb	r3, [r7, #31]
    c9ca:	69ba      	ldr	r2, [r7, #24]
    c9cc:	21ff      	movs	r1, #255	; 0xff
    c9ce:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    c9d0:	7ffb      	ldrb	r3, [r7, #31]
    c9d2:	69ba      	ldr	r2, [r7, #24]
    c9d4:	4413      	add	r3, r2
    c9d6:	789b      	ldrb	r3, [r3, #2]
    c9d8:	2bff      	cmp	r3, #255	; 0xff
    c9da:	d00d      	beq.n	c9f8 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c9dc:	7ffb      	ldrb	r3, [r7, #31]
    c9de:	69ba      	ldr	r2, [r7, #24]
    c9e0:	4413      	add	r3, r2
    c9e2:	789b      	ldrb	r3, [r3, #2]
    c9e4:	4618      	mov	r0, r3
    c9e6:	4b11      	ldr	r3, [pc, #68]	; (ca2c <cdcdf_acm_disable+0xa4>)
    c9e8:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    c9ea:	7ffb      	ldrb	r3, [r7, #31]
    c9ec:	69ba      	ldr	r2, [r7, #24]
    c9ee:	4413      	add	r3, r2
    c9f0:	22ff      	movs	r2, #255	; 0xff
    c9f2:	709a      	strb	r2, [r3, #2]
    c9f4:	e000      	b.n	c9f8 <cdcdf_acm_disable+0x70>
			continue;
    c9f6:	bf00      	nop
	for (i = 0; i < 2; i++) {
    c9f8:	7ffb      	ldrb	r3, [r7, #31]
    c9fa:	3301      	adds	r3, #1
    c9fc:	77fb      	strb	r3, [r7, #31]
    c9fe:	7ffb      	ldrb	r3, [r7, #31]
    ca00:	2b01      	cmp	r3, #1
    ca02:	d9dc      	bls.n	c9be <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    ca04:	69bb      	ldr	r3, [r7, #24]
    ca06:	791b      	ldrb	r3, [r3, #4]
    ca08:	2bff      	cmp	r3, #255	; 0xff
    ca0a:	d007      	beq.n	ca1c <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    ca0c:	69bb      	ldr	r3, [r7, #24]
    ca0e:	791b      	ldrb	r3, [r3, #4]
    ca10:	4618      	mov	r0, r3
    ca12:	4b06      	ldr	r3, [pc, #24]	; (ca2c <cdcdf_acm_disable+0xa4>)
    ca14:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    ca16:	69bb      	ldr	r3, [r7, #24]
    ca18:	22ff      	movs	r2, #255	; 0xff
    ca1a:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    ca1c:	4b04      	ldr	r3, [pc, #16]	; (ca30 <cdcdf_acm_disable+0xa8>)
    ca1e:	2200      	movs	r2, #0
    ca20:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    ca22:	2300      	movs	r3, #0
}
    ca24:	4618      	mov	r0, r3
    ca26:	3720      	adds	r7, #32
    ca28:	46bd      	mov	sp, r7
    ca2a:	bd80      	pop	{r7, pc}
    ca2c:	00003991 	.word	0x00003991
    ca30:	2000106c 	.word	0x2000106c

0000ca34 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    ca34:	b580      	push	{r7, lr}
    ca36:	b084      	sub	sp, #16
    ca38:	af00      	add	r7, sp, #0
    ca3a:	60f8      	str	r0, [r7, #12]
    ca3c:	460b      	mov	r3, r1
    ca3e:	607a      	str	r2, [r7, #4]
    ca40:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    ca42:	7afb      	ldrb	r3, [r7, #11]
    ca44:	2b01      	cmp	r3, #1
    ca46:	d009      	beq.n	ca5c <cdcdf_acm_ctrl+0x28>
    ca48:	2b02      	cmp	r3, #2
    ca4a:	d00d      	beq.n	ca68 <cdcdf_acm_ctrl+0x34>
    ca4c:	2b00      	cmp	r3, #0
    ca4e:	d10e      	bne.n	ca6e <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    ca50:	6879      	ldr	r1, [r7, #4]
    ca52:	68f8      	ldr	r0, [r7, #12]
    ca54:	4b09      	ldr	r3, [pc, #36]	; (ca7c <cdcdf_acm_ctrl+0x48>)
    ca56:	4798      	blx	r3
    ca58:	4603      	mov	r3, r0
    ca5a:	e00a      	b.n	ca72 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    ca5c:	6879      	ldr	r1, [r7, #4]
    ca5e:	68f8      	ldr	r0, [r7, #12]
    ca60:	4b07      	ldr	r3, [pc, #28]	; (ca80 <cdcdf_acm_ctrl+0x4c>)
    ca62:	4798      	blx	r3
    ca64:	4603      	mov	r3, r0
    ca66:	e004      	b.n	ca72 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    ca68:	f06f 031a 	mvn.w	r3, #26
    ca6c:	e001      	b.n	ca72 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    ca6e:	f06f 030c 	mvn.w	r3, #12
	}
}
    ca72:	4618      	mov	r0, r3
    ca74:	3710      	adds	r7, #16
    ca76:	46bd      	mov	sp, r7
    ca78:	bd80      	pop	{r7, pc}
    ca7a:	bf00      	nop
    ca7c:	0000c815 	.word	0x0000c815
    ca80:	0000c989 	.word	0x0000c989

0000ca84 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ca84:	b590      	push	{r4, r7, lr}
    ca86:	b087      	sub	sp, #28
    ca88:	af00      	add	r7, sp, #0
    ca8a:	4603      	mov	r3, r0
    ca8c:	6039      	str	r1, [r7, #0]
    ca8e:	71fb      	strb	r3, [r7, #7]
    ca90:	4613      	mov	r3, r2
    ca92:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    ca94:	683b      	ldr	r3, [r7, #0]
    ca96:	799a      	ldrb	r2, [r3, #6]
    ca98:	79db      	ldrb	r3, [r3, #7]
    ca9a:	021b      	lsls	r3, r3, #8
    ca9c:	4313      	orrs	r3, r2
    ca9e:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    caa0:	4b2b      	ldr	r3, [pc, #172]	; (cb50 <cdcdf_acm_set_req+0xcc>)
    caa2:	4798      	blx	r3
    caa4:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    caa6:	683b      	ldr	r3, [r7, #0]
    caa8:	785b      	ldrb	r3, [r3, #1]
    caaa:	2b20      	cmp	r3, #32
    caac:	d002      	beq.n	cab4 <cdcdf_acm_set_req+0x30>
    caae:	2b22      	cmp	r3, #34	; 0x22
    cab0:	d034      	beq.n	cb1c <cdcdf_acm_set_req+0x98>
    cab2:	e046      	b.n	cb42 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    cab4:	8afb      	ldrh	r3, [r7, #22]
    cab6:	2b07      	cmp	r3, #7
    cab8:	d002      	beq.n	cac0 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    caba:	f04f 33ff 	mov.w	r3, #4294967295
    cabe:	e042      	b.n	cb46 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    cac0:	79bb      	ldrb	r3, [r7, #6]
    cac2:	2b00      	cmp	r3, #0
    cac4:	d107      	bne.n	cad6 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    cac6:	8afa      	ldrh	r2, [r7, #22]
    cac8:	79f8      	ldrb	r0, [r7, #7]
    caca:	2300      	movs	r3, #0
    cacc:	6939      	ldr	r1, [r7, #16]
    cace:	4c21      	ldr	r4, [pc, #132]	; (cb54 <cdcdf_acm_set_req+0xd0>)
    cad0:	47a0      	blx	r4
    cad2:	4603      	mov	r3, r0
    cad4:	e037      	b.n	cb46 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    cad6:	693a      	ldr	r2, [r7, #16]
    cad8:	f107 0308 	add.w	r3, r7, #8
    cadc:	6810      	ldr	r0, [r2, #0]
    cade:	6018      	str	r0, [r3, #0]
    cae0:	8891      	ldrh	r1, [r2, #4]
    cae2:	7992      	ldrb	r2, [r2, #6]
    cae4:	8099      	strh	r1, [r3, #4]
    cae6:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    cae8:	4b1b      	ldr	r3, [pc, #108]	; (cb58 <cdcdf_acm_set_req+0xd4>)
    caea:	681b      	ldr	r3, [r3, #0]
    caec:	2b00      	cmp	r3, #0
    caee:	d008      	beq.n	cb02 <cdcdf_acm_set_req+0x7e>
    caf0:	4b19      	ldr	r3, [pc, #100]	; (cb58 <cdcdf_acm_set_req+0xd4>)
    caf2:	681b      	ldr	r3, [r3, #0]
    caf4:	f107 0208 	add.w	r2, r7, #8
    caf8:	4610      	mov	r0, r2
    cafa:	4798      	blx	r3
    cafc:	4603      	mov	r3, r0
    cafe:	2b00      	cmp	r3, #0
    cb00:	d00a      	beq.n	cb18 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    cb02:	4b16      	ldr	r3, [pc, #88]	; (cb5c <cdcdf_acm_set_req+0xd8>)
    cb04:	f107 0208 	add.w	r2, r7, #8
    cb08:	e892 0003 	ldmia.w	r2, {r0, r1}
    cb0c:	6018      	str	r0, [r3, #0]
    cb0e:	3304      	adds	r3, #4
    cb10:	8019      	strh	r1, [r3, #0]
    cb12:	3302      	adds	r3, #2
    cb14:	0c0a      	lsrs	r2, r1, #16
    cb16:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    cb18:	2300      	movs	r3, #0
    cb1a:	e014      	b.n	cb46 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    cb1c:	2300      	movs	r3, #0
    cb1e:	2200      	movs	r2, #0
    cb20:	2100      	movs	r1, #0
    cb22:	2000      	movs	r0, #0
    cb24:	4c0b      	ldr	r4, [pc, #44]	; (cb54 <cdcdf_acm_set_req+0xd0>)
    cb26:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    cb28:	4b0d      	ldr	r3, [pc, #52]	; (cb60 <cdcdf_acm_set_req+0xdc>)
    cb2a:	681b      	ldr	r3, [r3, #0]
    cb2c:	2b00      	cmp	r3, #0
    cb2e:	d006      	beq.n	cb3e <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    cb30:	4b0b      	ldr	r3, [pc, #44]	; (cb60 <cdcdf_acm_set_req+0xdc>)
    cb32:	681b      	ldr	r3, [r3, #0]
    cb34:	683a      	ldr	r2, [r7, #0]
    cb36:	8852      	ldrh	r2, [r2, #2]
    cb38:	b292      	uxth	r2, r2
    cb3a:	4610      	mov	r0, r2
    cb3c:	4798      	blx	r3
		}
		return ERR_NONE;
    cb3e:	2300      	movs	r3, #0
    cb40:	e001      	b.n	cb46 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    cb42:	f06f 030c 	mvn.w	r3, #12
	}
}
    cb46:	4618      	mov	r0, r3
    cb48:	371c      	adds	r7, #28
    cb4a:	46bd      	mov	sp, r7
    cb4c:	bd90      	pop	{r4, r7, pc}
    cb4e:	bf00      	nop
    cb50:	0000dad1 	.word	0x0000dad1
    cb54:	0000d945 	.word	0x0000d945
    cb58:	20001080 	.word	0x20001080
    cb5c:	20001074 	.word	0x20001074
    cb60:	2000107c 	.word	0x2000107c

0000cb64 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cb64:	b590      	push	{r4, r7, lr}
    cb66:	b085      	sub	sp, #20
    cb68:	af00      	add	r7, sp, #0
    cb6a:	4603      	mov	r3, r0
    cb6c:	6039      	str	r1, [r7, #0]
    cb6e:	71fb      	strb	r3, [r7, #7]
    cb70:	4613      	mov	r3, r2
    cb72:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    cb74:	683b      	ldr	r3, [r7, #0]
    cb76:	799a      	ldrb	r2, [r3, #6]
    cb78:	79db      	ldrb	r3, [r3, #7]
    cb7a:	021b      	lsls	r3, r3, #8
    cb7c:	4313      	orrs	r3, r2
    cb7e:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    cb80:	79bb      	ldrb	r3, [r7, #6]
    cb82:	2b01      	cmp	r3, #1
    cb84:	d101      	bne.n	cb8a <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    cb86:	2300      	movs	r3, #0
    cb88:	e013      	b.n	cbb2 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    cb8a:	683b      	ldr	r3, [r7, #0]
    cb8c:	785b      	ldrb	r3, [r3, #1]
    cb8e:	2b21      	cmp	r3, #33	; 0x21
    cb90:	d10d      	bne.n	cbae <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    cb92:	89fb      	ldrh	r3, [r7, #14]
    cb94:	2b07      	cmp	r3, #7
    cb96:	d002      	beq.n	cb9e <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    cb98:	f04f 33ff 	mov.w	r3, #4294967295
    cb9c:	e009      	b.n	cbb2 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    cb9e:	89fa      	ldrh	r2, [r7, #14]
    cba0:	79f8      	ldrb	r0, [r7, #7]
    cba2:	2300      	movs	r3, #0
    cba4:	4905      	ldr	r1, [pc, #20]	; (cbbc <cdcdf_acm_get_req+0x58>)
    cba6:	4c06      	ldr	r4, [pc, #24]	; (cbc0 <cdcdf_acm_get_req+0x5c>)
    cba8:	47a0      	blx	r4
    cbaa:	4603      	mov	r3, r0
    cbac:	e001      	b.n	cbb2 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    cbae:	f06f 030c 	mvn.w	r3, #12
	}
}
    cbb2:	4618      	mov	r0, r3
    cbb4:	3714      	adds	r7, #20
    cbb6:	46bd      	mov	sp, r7
    cbb8:	bd90      	pop	{r4, r7, pc}
    cbba:	bf00      	nop
    cbbc:	20001074 	.word	0x20001074
    cbc0:	0000d945 	.word	0x0000d945

0000cbc4 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cbc4:	b580      	push	{r7, lr}
    cbc6:	b082      	sub	sp, #8
    cbc8:	af00      	add	r7, sp, #0
    cbca:	4603      	mov	r3, r0
    cbcc:	6039      	str	r1, [r7, #0]
    cbce:	71fb      	strb	r3, [r7, #7]
    cbd0:	4613      	mov	r3, r2
    cbd2:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    cbd4:	683b      	ldr	r3, [r7, #0]
    cbd6:	781b      	ldrb	r3, [r3, #0]
    cbd8:	095b      	lsrs	r3, r3, #5
    cbda:	b2db      	uxtb	r3, r3
    cbdc:	f003 0303 	and.w	r3, r3, #3
    cbe0:	2b01      	cmp	r3, #1
    cbe2:	d002      	beq.n	cbea <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    cbe4:	f06f 0309 	mvn.w	r3, #9
    cbe8:	e026      	b.n	cc38 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    cbea:	683b      	ldr	r3, [r7, #0]
    cbec:	889b      	ldrh	r3, [r3, #4]
    cbee:	b29a      	uxth	r2, r3
    cbf0:	4b13      	ldr	r3, [pc, #76]	; (cc40 <cdcdf_acm_req+0x7c>)
    cbf2:	781b      	ldrb	r3, [r3, #0]
    cbf4:	b29b      	uxth	r3, r3
    cbf6:	429a      	cmp	r2, r3
    cbf8:	d007      	beq.n	cc0a <cdcdf_acm_req+0x46>
    cbfa:	683b      	ldr	r3, [r7, #0]
    cbfc:	889b      	ldrh	r3, [r3, #4]
    cbfe:	b29a      	uxth	r2, r3
    cc00:	4b0f      	ldr	r3, [pc, #60]	; (cc40 <cdcdf_acm_req+0x7c>)
    cc02:	785b      	ldrb	r3, [r3, #1]
    cc04:	b29b      	uxth	r3, r3
    cc06:	429a      	cmp	r2, r3
    cc08:	d114      	bne.n	cc34 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    cc0a:	683b      	ldr	r3, [r7, #0]
    cc0c:	781b      	ldrb	r3, [r3, #0]
    cc0e:	b25b      	sxtb	r3, r3
    cc10:	2b00      	cmp	r3, #0
    cc12:	da07      	bge.n	cc24 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    cc14:	79ba      	ldrb	r2, [r7, #6]
    cc16:	79fb      	ldrb	r3, [r7, #7]
    cc18:	6839      	ldr	r1, [r7, #0]
    cc1a:	4618      	mov	r0, r3
    cc1c:	4b09      	ldr	r3, [pc, #36]	; (cc44 <cdcdf_acm_req+0x80>)
    cc1e:	4798      	blx	r3
    cc20:	4603      	mov	r3, r0
    cc22:	e009      	b.n	cc38 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    cc24:	79ba      	ldrb	r2, [r7, #6]
    cc26:	79fb      	ldrb	r3, [r7, #7]
    cc28:	6839      	ldr	r1, [r7, #0]
    cc2a:	4618      	mov	r0, r3
    cc2c:	4b06      	ldr	r3, [pc, #24]	; (cc48 <cdcdf_acm_req+0x84>)
    cc2e:	4798      	blx	r3
    cc30:	4603      	mov	r3, r0
    cc32:	e001      	b.n	cc38 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    cc34:	f06f 0309 	mvn.w	r3, #9
	}
}
    cc38:	4618      	mov	r0, r3
    cc3a:	3708      	adds	r7, #8
    cc3c:	46bd      	mov	sp, r7
    cc3e:	bd80      	pop	{r7, pc}
    cc40:	2000106c 	.word	0x2000106c
    cc44:	0000cb65 	.word	0x0000cb65
    cc48:	0000ca85 	.word	0x0000ca85

0000cc4c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    cc4c:	b580      	push	{r7, lr}
    cc4e:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    cc50:	4b0b      	ldr	r3, [pc, #44]	; (cc80 <cdcdf_acm_init+0x34>)
    cc52:	4798      	blx	r3
    cc54:	4603      	mov	r3, r0
    cc56:	2b01      	cmp	r3, #1
    cc58:	d902      	bls.n	cc60 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    cc5a:	f06f 0310 	mvn.w	r3, #16
    cc5e:	e00d      	b.n	cc7c <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    cc60:	4b08      	ldr	r3, [pc, #32]	; (cc84 <cdcdf_acm_init+0x38>)
    cc62:	4a09      	ldr	r2, [pc, #36]	; (cc88 <cdcdf_acm_init+0x3c>)
    cc64:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    cc66:	4b07      	ldr	r3, [pc, #28]	; (cc84 <cdcdf_acm_init+0x38>)
    cc68:	4a08      	ldr	r2, [pc, #32]	; (cc8c <cdcdf_acm_init+0x40>)
    cc6a:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    cc6c:	4805      	ldr	r0, [pc, #20]	; (cc84 <cdcdf_acm_init+0x38>)
    cc6e:	4b08      	ldr	r3, [pc, #32]	; (cc90 <cdcdf_acm_init+0x44>)
    cc70:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    cc72:	4908      	ldr	r1, [pc, #32]	; (cc94 <cdcdf_acm_init+0x48>)
    cc74:	2001      	movs	r0, #1
    cc76:	4b08      	ldr	r3, [pc, #32]	; (cc98 <cdcdf_acm_init+0x4c>)
    cc78:	4798      	blx	r3
	return ERR_NONE;
    cc7a:	2300      	movs	r3, #0
}
    cc7c:	4618      	mov	r0, r3
    cc7e:	bd80      	pop	{r7, pc}
    cc80:	0000dae9 	.word	0x0000dae9
    cc84:	20001060 	.word	0x20001060
    cc88:	0000ca35 	.word	0x0000ca35
    cc8c:	2000106c 	.word	0x2000106c
    cc90:	0000da51 	.word	0x0000da51
    cc94:	200001d8 	.word	0x200001d8
    cc98:	0000d981 	.word	0x0000d981

0000cc9c <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    cc9c:	b590      	push	{r4, r7, lr}
    cc9e:	b083      	sub	sp, #12
    cca0:	af00      	add	r7, sp, #0
    cca2:	6078      	str	r0, [r7, #4]
    cca4:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    cca6:	4b0b      	ldr	r3, [pc, #44]	; (ccd4 <cdcdf_acm_read+0x38>)
    cca8:	4798      	blx	r3
    ccaa:	4603      	mov	r3, r0
    ccac:	f083 0301 	eor.w	r3, r3, #1
    ccb0:	b2db      	uxtb	r3, r3
    ccb2:	2b00      	cmp	r3, #0
    ccb4:	d002      	beq.n	ccbc <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    ccb6:	f06f 0310 	mvn.w	r3, #16
    ccba:	e007      	b.n	cccc <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    ccbc:	4b06      	ldr	r3, [pc, #24]	; (ccd8 <cdcdf_acm_read+0x3c>)
    ccbe:	7918      	ldrb	r0, [r3, #4]
    ccc0:	2300      	movs	r3, #0
    ccc2:	683a      	ldr	r2, [r7, #0]
    ccc4:	6879      	ldr	r1, [r7, #4]
    ccc6:	4c05      	ldr	r4, [pc, #20]	; (ccdc <cdcdf_acm_read+0x40>)
    ccc8:	47a0      	blx	r4
    ccca:	4603      	mov	r3, r0
}
    cccc:	4618      	mov	r0, r3
    ccce:	370c      	adds	r7, #12
    ccd0:	46bd      	mov	sp, r7
    ccd2:	bd90      	pop	{r4, r7, pc}
    ccd4:	0000cdc1 	.word	0x0000cdc1
    ccd8:	2000106c 	.word	0x2000106c
    ccdc:	0000d945 	.word	0x0000d945

0000cce0 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    cce0:	b590      	push	{r4, r7, lr}
    cce2:	b083      	sub	sp, #12
    cce4:	af00      	add	r7, sp, #0
    cce6:	6078      	str	r0, [r7, #4]
    cce8:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    ccea:	4b0b      	ldr	r3, [pc, #44]	; (cd18 <cdcdf_acm_write+0x38>)
    ccec:	4798      	blx	r3
    ccee:	4603      	mov	r3, r0
    ccf0:	f083 0301 	eor.w	r3, r3, #1
    ccf4:	b2db      	uxtb	r3, r3
    ccf6:	2b00      	cmp	r3, #0
    ccf8:	d002      	beq.n	cd00 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    ccfa:	f06f 0310 	mvn.w	r3, #16
    ccfe:	e007      	b.n	cd10 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    cd00:	4b06      	ldr	r3, [pc, #24]	; (cd1c <cdcdf_acm_write+0x3c>)
    cd02:	78d8      	ldrb	r0, [r3, #3]
    cd04:	2301      	movs	r3, #1
    cd06:	683a      	ldr	r2, [r7, #0]
    cd08:	6879      	ldr	r1, [r7, #4]
    cd0a:	4c05      	ldr	r4, [pc, #20]	; (cd20 <cdcdf_acm_write+0x40>)
    cd0c:	47a0      	blx	r4
    cd0e:	4603      	mov	r3, r0
}
    cd10:	4618      	mov	r0, r3
    cd12:	370c      	adds	r7, #12
    cd14:	46bd      	mov	sp, r7
    cd16:	bd90      	pop	{r4, r7, pc}
    cd18:	0000cdc1 	.word	0x0000cdc1
    cd1c:	2000106c 	.word	0x2000106c
    cd20:	0000d945 	.word	0x0000d945

0000cd24 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    cd24:	b580      	push	{r7, lr}
    cd26:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    cd28:	4b05      	ldr	r3, [pc, #20]	; (cd40 <cdcdf_acm_stop_xfer+0x1c>)
    cd2a:	78db      	ldrb	r3, [r3, #3]
    cd2c:	4618      	mov	r0, r3
    cd2e:	4b05      	ldr	r3, [pc, #20]	; (cd44 <cdcdf_acm_stop_xfer+0x20>)
    cd30:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    cd32:	4b03      	ldr	r3, [pc, #12]	; (cd40 <cdcdf_acm_stop_xfer+0x1c>)
    cd34:	791b      	ldrb	r3, [r3, #4]
    cd36:	4618      	mov	r0, r3
    cd38:	4b02      	ldr	r3, [pc, #8]	; (cd44 <cdcdf_acm_stop_xfer+0x20>)
    cd3a:	4798      	blx	r3
}
    cd3c:	bf00      	nop
    cd3e:	bd80      	pop	{r7, pc}
    cd40:	2000106c 	.word	0x2000106c
    cd44:	00003bb9 	.word	0x00003bb9

0000cd48 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    cd48:	b580      	push	{r7, lr}
    cd4a:	b082      	sub	sp, #8
    cd4c:	af00      	add	r7, sp, #0
    cd4e:	4603      	mov	r3, r0
    cd50:	6039      	str	r1, [r7, #0]
    cd52:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    cd54:	79fb      	ldrb	r3, [r7, #7]
    cd56:	2b03      	cmp	r3, #3
    cd58:	d822      	bhi.n	cda0 <cdcdf_acm_register_callback+0x58>
    cd5a:	a201      	add	r2, pc, #4	; (adr r2, cd60 <cdcdf_acm_register_callback+0x18>)
    cd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cd60:	0000cd71 	.word	0x0000cd71
    cd64:	0000cd81 	.word	0x0000cd81
    cd68:	0000cd91 	.word	0x0000cd91
    cd6c:	0000cd99 	.word	0x0000cd99
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    cd70:	4b0f      	ldr	r3, [pc, #60]	; (cdb0 <cdcdf_acm_register_callback+0x68>)
    cd72:	791b      	ldrb	r3, [r3, #4]
    cd74:	683a      	ldr	r2, [r7, #0]
    cd76:	2102      	movs	r1, #2
    cd78:	4618      	mov	r0, r3
    cd7a:	4b0e      	ldr	r3, [pc, #56]	; (cdb4 <cdcdf_acm_register_callback+0x6c>)
    cd7c:	4798      	blx	r3
		break;
    cd7e:	e012      	b.n	cda6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    cd80:	4b0b      	ldr	r3, [pc, #44]	; (cdb0 <cdcdf_acm_register_callback+0x68>)
    cd82:	78db      	ldrb	r3, [r3, #3]
    cd84:	683a      	ldr	r2, [r7, #0]
    cd86:	2102      	movs	r1, #2
    cd88:	4618      	mov	r0, r3
    cd8a:	4b0a      	ldr	r3, [pc, #40]	; (cdb4 <cdcdf_acm_register_callback+0x6c>)
    cd8c:	4798      	blx	r3
		break;
    cd8e:	e00a      	b.n	cda6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    cd90:	4a09      	ldr	r2, [pc, #36]	; (cdb8 <cdcdf_acm_register_callback+0x70>)
    cd92:	683b      	ldr	r3, [r7, #0]
    cd94:	6013      	str	r3, [r2, #0]
		break;
    cd96:	e006      	b.n	cda6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    cd98:	4a08      	ldr	r2, [pc, #32]	; (cdbc <cdcdf_acm_register_callback+0x74>)
    cd9a:	683b      	ldr	r3, [r7, #0]
    cd9c:	6013      	str	r3, [r2, #0]
		break;
    cd9e:	e002      	b.n	cda6 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    cda0:	f06f 030c 	mvn.w	r3, #12
    cda4:	e000      	b.n	cda8 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    cda6:	2300      	movs	r3, #0
}
    cda8:	4618      	mov	r0, r3
    cdaa:	3708      	adds	r7, #8
    cdac:	46bd      	mov	sp, r7
    cdae:	bd80      	pop	{r7, pc}
    cdb0:	2000106c 	.word	0x2000106c
    cdb4:	00003ce5 	.word	0x00003ce5
    cdb8:	20001080 	.word	0x20001080
    cdbc:	2000107c 	.word	0x2000107c

0000cdc0 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    cdc0:	b480      	push	{r7}
    cdc2:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    cdc4:	4b03      	ldr	r3, [pc, #12]	; (cdd4 <cdcdf_acm_is_enabled+0x14>)
    cdc6:	795b      	ldrb	r3, [r3, #5]
}
    cdc8:	4618      	mov	r0, r3
    cdca:	46bd      	mov	sp, r7
    cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    cdd0:	4770      	bx	lr
    cdd2:	bf00      	nop
    cdd4:	2000106c 	.word	0x2000106c

0000cdd8 <usb_get_u16>:
{
    cdd8:	b480      	push	{r7}
    cdda:	b083      	sub	sp, #12
    cddc:	af00      	add	r7, sp, #0
    cdde:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    cde0:	687b      	ldr	r3, [r7, #4]
    cde2:	781b      	ldrb	r3, [r3, #0]
    cde4:	b29a      	uxth	r2, r3
    cde6:	687b      	ldr	r3, [r7, #4]
    cde8:	3301      	adds	r3, #1
    cdea:	781b      	ldrb	r3, [r3, #0]
    cdec:	b29b      	uxth	r3, r3
    cdee:	021b      	lsls	r3, r3, #8
    cdf0:	b29b      	uxth	r3, r3
    cdf2:	4413      	add	r3, r2
    cdf4:	b29b      	uxth	r3, r3
}
    cdf6:	4618      	mov	r0, r3
    cdf8:	370c      	adds	r7, #12
    cdfa:	46bd      	mov	sp, r7
    cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce00:	4770      	bx	lr

0000ce02 <usb_desc_len>:
{
    ce02:	b480      	push	{r7}
    ce04:	b083      	sub	sp, #12
    ce06:	af00      	add	r7, sp, #0
    ce08:	6078      	str	r0, [r7, #4]
	return desc[0];
    ce0a:	687b      	ldr	r3, [r7, #4]
    ce0c:	781b      	ldrb	r3, [r3, #0]
}
    ce0e:	4618      	mov	r0, r3
    ce10:	370c      	adds	r7, #12
    ce12:	46bd      	mov	sp, r7
    ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce18:	4770      	bx	lr
	...

0000ce1c <usb_desc_next>:
{
    ce1c:	b580      	push	{r7, lr}
    ce1e:	b082      	sub	sp, #8
    ce20:	af00      	add	r7, sp, #0
    ce22:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    ce24:	6878      	ldr	r0, [r7, #4]
    ce26:	4b05      	ldr	r3, [pc, #20]	; (ce3c <usb_desc_next+0x20>)
    ce28:	4798      	blx	r3
    ce2a:	4603      	mov	r3, r0
    ce2c:	461a      	mov	r2, r3
    ce2e:	687b      	ldr	r3, [r7, #4]
    ce30:	4413      	add	r3, r2
}
    ce32:	4618      	mov	r0, r3
    ce34:	3708      	adds	r7, #8
    ce36:	46bd      	mov	sp, r7
    ce38:	bd80      	pop	{r7, pc}
    ce3a:	bf00      	nop
    ce3c:	0000ce03 	.word	0x0000ce03

0000ce40 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    ce40:	b580      	push	{r7, lr}
    ce42:	b082      	sub	sp, #8
    ce44:	af00      	add	r7, sp, #0
    ce46:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    ce48:	687b      	ldr	r3, [r7, #4]
    ce4a:	3302      	adds	r3, #2
    ce4c:	4618      	mov	r0, r3
    ce4e:	4b03      	ldr	r3, [pc, #12]	; (ce5c <usb_cfg_desc_total_len+0x1c>)
    ce50:	4798      	blx	r3
    ce52:	4603      	mov	r3, r0
}
    ce54:	4618      	mov	r0, r3
    ce56:	3708      	adds	r7, #8
    ce58:	46bd      	mov	sp, r7
    ce5a:	bd80      	pop	{r7, pc}
    ce5c:	0000cdd9 	.word	0x0000cdd9

0000ce60 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    ce60:	b590      	push	{r4, r7, lr}
    ce62:	b085      	sub	sp, #20
    ce64:	af00      	add	r7, sp, #0
    ce66:	4603      	mov	r3, r0
    ce68:	6039      	str	r1, [r7, #0]
    ce6a:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    ce6c:	2300      	movs	r3, #0
    ce6e:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    ce70:	683b      	ldr	r3, [r7, #0]
    ce72:	799a      	ldrb	r2, [r3, #6]
    ce74:	79db      	ldrb	r3, [r3, #7]
    ce76:	021b      	lsls	r3, r3, #8
    ce78:	4313      	orrs	r3, r2
    ce7a:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    ce7c:	897b      	ldrh	r3, [r7, #10]
    ce7e:	2b12      	cmp	r3, #18
    ce80:	d901      	bls.n	ce86 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    ce82:	2312      	movs	r3, #18
    ce84:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    ce86:	68fb      	ldr	r3, [r7, #12]
    ce88:	2b00      	cmp	r3, #0
    ce8a:	d10a      	bne.n	cea2 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    ce8c:	4b0f      	ldr	r3, [pc, #60]	; (cecc <usbdc_get_dev_desc+0x6c>)
    ce8e:	681b      	ldr	r3, [r3, #0]
    ce90:	6818      	ldr	r0, [r3, #0]
    ce92:	4b0e      	ldr	r3, [pc, #56]	; (cecc <usbdc_get_dev_desc+0x6c>)
    ce94:	681b      	ldr	r3, [r3, #0]
    ce96:	685b      	ldr	r3, [r3, #4]
    ce98:	2201      	movs	r2, #1
    ce9a:	4619      	mov	r1, r3
    ce9c:	4b0c      	ldr	r3, [pc, #48]	; (ced0 <usbdc_get_dev_desc+0x70>)
    ce9e:	4798      	blx	r3
    cea0:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    cea2:	68fb      	ldr	r3, [r7, #12]
    cea4:	2b00      	cmp	r3, #0
    cea6:	d101      	bne.n	ceac <usbdc_get_dev_desc+0x4c>
		return false;
    cea8:	2300      	movs	r3, #0
    ceaa:	e00b      	b.n	cec4 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    ceac:	897a      	ldrh	r2, [r7, #10]
    ceae:	79f8      	ldrb	r0, [r7, #7]
    ceb0:	2300      	movs	r3, #0
    ceb2:	68f9      	ldr	r1, [r7, #12]
    ceb4:	4c07      	ldr	r4, [pc, #28]	; (ced4 <usbdc_get_dev_desc+0x74>)
    ceb6:	47a0      	blx	r4
    ceb8:	4603      	mov	r3, r0
    ceba:	2b00      	cmp	r3, #0
    cebc:	d001      	beq.n	cec2 <usbdc_get_dev_desc+0x62>
		return false;
    cebe:	2300      	movs	r3, #0
    cec0:	e000      	b.n	cec4 <usbdc_get_dev_desc+0x64>
	}
	return true;
    cec2:	2301      	movs	r3, #1
}
    cec4:	4618      	mov	r0, r3
    cec6:	3714      	adds	r7, #20
    cec8:	46bd      	mov	sp, r7
    ceca:	bd90      	pop	{r4, r7, pc}
    cecc:	20001084 	.word	0x20001084
    ced0:	0000dbd5 	.word	0x0000dbd5
    ced4:	0000d945 	.word	0x0000d945

0000ced8 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    ced8:	b590      	push	{r4, r7, lr}
    ceda:	b087      	sub	sp, #28
    cedc:	af00      	add	r7, sp, #0
    cede:	4603      	mov	r3, r0
    cee0:	6039      	str	r1, [r7, #0]
    cee2:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    cee4:	2300      	movs	r3, #0
    cee6:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    cee8:	683b      	ldr	r3, [r7, #0]
    ceea:	799a      	ldrb	r2, [r3, #6]
    ceec:	79db      	ldrb	r3, [r3, #7]
    ceee:	021b      	lsls	r3, r3, #8
    cef0:	4313      	orrs	r3, r2
    cef2:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    cef4:	683b      	ldr	r3, [r7, #0]
    cef6:	885b      	ldrh	r3, [r3, #2]
    cef8:	b29b      	uxth	r3, r3
    cefa:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    cefc:	8a7a      	ldrh	r2, [r7, #18]
    cefe:	4b1e      	ldr	r3, [pc, #120]	; (cf78 <usbdc_get_cfg_desc+0xa0>)
    cf00:	7f1b      	ldrb	r3, [r3, #28]
    cf02:	3b01      	subs	r3, #1
    cf04:	4013      	ands	r3, r2
    cf06:	2b00      	cmp	r3, #0
    cf08:	bf0c      	ite	eq
    cf0a:	2301      	moveq	r3, #1
    cf0c:	2300      	movne	r3, #0
    cf0e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    cf10:	697b      	ldr	r3, [r7, #20]
    cf12:	2b00      	cmp	r3, #0
    cf14:	d10c      	bne.n	cf30 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    cf16:	4b18      	ldr	r3, [pc, #96]	; (cf78 <usbdc_get_cfg_desc+0xa0>)
    cf18:	681b      	ldr	r3, [r3, #0]
    cf1a:	6818      	ldr	r0, [r3, #0]
    cf1c:	4b16      	ldr	r3, [pc, #88]	; (cf78 <usbdc_get_cfg_desc+0xa0>)
    cf1e:	681b      	ldr	r3, [r3, #0]
    cf20:	6859      	ldr	r1, [r3, #4]
    cf22:	7c3b      	ldrb	r3, [r7, #16]
    cf24:	3301      	adds	r3, #1
    cf26:	b2db      	uxtb	r3, r3
    cf28:	461a      	mov	r2, r3
    cf2a:	4b14      	ldr	r3, [pc, #80]	; (cf7c <usbdc_get_cfg_desc+0xa4>)
    cf2c:	4798      	blx	r3
    cf2e:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    cf30:	697b      	ldr	r3, [r7, #20]
    cf32:	2b00      	cmp	r3, #0
    cf34:	d101      	bne.n	cf3a <usbdc_get_cfg_desc+0x62>
		return false;
    cf36:	2300      	movs	r3, #0
    cf38:	e019      	b.n	cf6e <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    cf3a:	6978      	ldr	r0, [r7, #20]
    cf3c:	4b10      	ldr	r3, [pc, #64]	; (cf80 <usbdc_get_cfg_desc+0xa8>)
    cf3e:	4798      	blx	r3
    cf40:	4603      	mov	r3, r0
    cf42:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    cf44:	8a7a      	ldrh	r2, [r7, #18]
    cf46:	89fb      	ldrh	r3, [r7, #14]
    cf48:	429a      	cmp	r2, r3
    cf4a:	d802      	bhi.n	cf52 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    cf4c:	2300      	movs	r3, #0
    cf4e:	747b      	strb	r3, [r7, #17]
    cf50:	e001      	b.n	cf56 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    cf52:	89fb      	ldrh	r3, [r7, #14]
    cf54:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    cf56:	8a7a      	ldrh	r2, [r7, #18]
    cf58:	7c7b      	ldrb	r3, [r7, #17]
    cf5a:	79f8      	ldrb	r0, [r7, #7]
    cf5c:	6979      	ldr	r1, [r7, #20]
    cf5e:	4c09      	ldr	r4, [pc, #36]	; (cf84 <usbdc_get_cfg_desc+0xac>)
    cf60:	47a0      	blx	r4
    cf62:	4603      	mov	r3, r0
    cf64:	2b00      	cmp	r3, #0
    cf66:	d001      	beq.n	cf6c <usbdc_get_cfg_desc+0x94>
		return false;
    cf68:	2300      	movs	r3, #0
    cf6a:	e000      	b.n	cf6e <usbdc_get_cfg_desc+0x96>
	}
	return true;
    cf6c:	2301      	movs	r3, #1
}
    cf6e:	4618      	mov	r0, r3
    cf70:	371c      	adds	r7, #28
    cf72:	46bd      	mov	sp, r7
    cf74:	bd90      	pop	{r4, r7, pc}
    cf76:	bf00      	nop
    cf78:	20001084 	.word	0x20001084
    cf7c:	0000dc95 	.word	0x0000dc95
    cf80:	0000ce41 	.word	0x0000ce41
    cf84:	0000d945 	.word	0x0000d945

0000cf88 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    cf88:	b590      	push	{r4, r7, lr}
    cf8a:	b085      	sub	sp, #20
    cf8c:	af00      	add	r7, sp, #0
    cf8e:	4603      	mov	r3, r0
    cf90:	6039      	str	r1, [r7, #0]
    cf92:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    cf94:	683b      	ldr	r3, [r7, #0]
    cf96:	799a      	ldrb	r2, [r3, #6]
    cf98:	79db      	ldrb	r3, [r3, #7]
    cf9a:	021b      	lsls	r3, r3, #8
    cf9c:	4313      	orrs	r3, r2
    cf9e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    cfa0:	683b      	ldr	r3, [r7, #0]
    cfa2:	885b      	ldrh	r3, [r3, #2]
    cfa4:	b29b      	uxth	r3, r3
    cfa6:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    cfa8:	89fa      	ldrh	r2, [r7, #14]
    cfaa:	4b1a      	ldr	r3, [pc, #104]	; (d014 <usbdc_get_str_desc+0x8c>)
    cfac:	7f1b      	ldrb	r3, [r3, #28]
    cfae:	3b01      	subs	r3, #1
    cfb0:	4013      	ands	r3, r2
    cfb2:	2b00      	cmp	r3, #0
    cfb4:	bf0c      	ite	eq
    cfb6:	2301      	moveq	r3, #1
    cfb8:	2300      	movne	r3, #0
    cfba:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    cfbc:	4b15      	ldr	r3, [pc, #84]	; (d014 <usbdc_get_str_desc+0x8c>)
    cfbe:	681b      	ldr	r3, [r3, #0]
    cfc0:	6818      	ldr	r0, [r3, #0]
    cfc2:	4b14      	ldr	r3, [pc, #80]	; (d014 <usbdc_get_str_desc+0x8c>)
    cfc4:	681b      	ldr	r3, [r3, #0]
    cfc6:	685b      	ldr	r3, [r3, #4]
    cfc8:	7b3a      	ldrb	r2, [r7, #12]
    cfca:	4619      	mov	r1, r3
    cfcc:	4b12      	ldr	r3, [pc, #72]	; (d018 <usbdc_get_str_desc+0x90>)
    cfce:	4798      	blx	r3
    cfd0:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    cfd2:	68bb      	ldr	r3, [r7, #8]
    cfd4:	2b00      	cmp	r3, #0
    cfd6:	d101      	bne.n	cfdc <usbdc_get_str_desc+0x54>
		return false;
    cfd8:	2300      	movs	r3, #0
    cfda:	e017      	b.n	d00c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    cfdc:	68bb      	ldr	r3, [r7, #8]
    cfde:	781b      	ldrb	r3, [r3, #0]
    cfe0:	b29b      	uxth	r3, r3
    cfe2:	89fa      	ldrh	r2, [r7, #14]
    cfe4:	429a      	cmp	r2, r3
    cfe6:	d802      	bhi.n	cfee <usbdc_get_str_desc+0x66>
		need_zlp = false;
    cfe8:	2300      	movs	r3, #0
    cfea:	737b      	strb	r3, [r7, #13]
    cfec:	e002      	b.n	cff4 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    cfee:	68bb      	ldr	r3, [r7, #8]
    cff0:	781b      	ldrb	r3, [r3, #0]
    cff2:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    cff4:	89fa      	ldrh	r2, [r7, #14]
    cff6:	7b7b      	ldrb	r3, [r7, #13]
    cff8:	79f8      	ldrb	r0, [r7, #7]
    cffa:	68b9      	ldr	r1, [r7, #8]
    cffc:	4c07      	ldr	r4, [pc, #28]	; (d01c <usbdc_get_str_desc+0x94>)
    cffe:	47a0      	blx	r4
    d000:	4603      	mov	r3, r0
    d002:	2b00      	cmp	r3, #0
    d004:	d001      	beq.n	d00a <usbdc_get_str_desc+0x82>
		return false;
    d006:	2300      	movs	r3, #0
    d008:	e000      	b.n	d00c <usbdc_get_str_desc+0x84>
	}
	return true;
    d00a:	2301      	movs	r3, #1
}
    d00c:	4618      	mov	r0, r3
    d00e:	3714      	adds	r7, #20
    d010:	46bd      	mov	sp, r7
    d012:	bd90      	pop	{r4, r7, pc}
    d014:	20001084 	.word	0x20001084
    d018:	0000dd0d 	.word	0x0000dd0d
    d01c:	0000d945 	.word	0x0000d945

0000d020 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    d020:	b580      	push	{r7, lr}
    d022:	b084      	sub	sp, #16
    d024:	af00      	add	r7, sp, #0
    d026:	4603      	mov	r3, r0
    d028:	6039      	str	r1, [r7, #0]
    d02a:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    d02c:	683b      	ldr	r3, [r7, #0]
    d02e:	885b      	ldrh	r3, [r3, #2]
    d030:	b29b      	uxth	r3, r3
    d032:	0a1b      	lsrs	r3, r3, #8
    d034:	b29b      	uxth	r3, r3
    d036:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    d038:	7bfb      	ldrb	r3, [r7, #15]
    d03a:	2b02      	cmp	r3, #2
    d03c:	d00d      	beq.n	d05a <usbdc_get_desc_req+0x3a>
    d03e:	2b03      	cmp	r3, #3
    d040:	d012      	beq.n	d068 <usbdc_get_desc_req+0x48>
    d042:	2b01      	cmp	r3, #1
    d044:	d002      	beq.n	d04c <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    d046:	bf00      	nop
	}
	return false;
    d048:	2300      	movs	r3, #0
    d04a:	e013      	b.n	d074 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    d04c:	79fb      	ldrb	r3, [r7, #7]
    d04e:	6839      	ldr	r1, [r7, #0]
    d050:	4618      	mov	r0, r3
    d052:	4b0a      	ldr	r3, [pc, #40]	; (d07c <usbdc_get_desc_req+0x5c>)
    d054:	4798      	blx	r3
    d056:	4603      	mov	r3, r0
    d058:	e00c      	b.n	d074 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    d05a:	79fb      	ldrb	r3, [r7, #7]
    d05c:	6839      	ldr	r1, [r7, #0]
    d05e:	4618      	mov	r0, r3
    d060:	4b07      	ldr	r3, [pc, #28]	; (d080 <usbdc_get_desc_req+0x60>)
    d062:	4798      	blx	r3
    d064:	4603      	mov	r3, r0
    d066:	e005      	b.n	d074 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    d068:	79fb      	ldrb	r3, [r7, #7]
    d06a:	6839      	ldr	r1, [r7, #0]
    d06c:	4618      	mov	r0, r3
    d06e:	4b05      	ldr	r3, [pc, #20]	; (d084 <usbdc_get_desc_req+0x64>)
    d070:	4798      	blx	r3
    d072:	4603      	mov	r3, r0
}
    d074:	4618      	mov	r0, r3
    d076:	3710      	adds	r7, #16
    d078:	46bd      	mov	sp, r7
    d07a:	bd80      	pop	{r7, pc}
    d07c:	0000ce61 	.word	0x0000ce61
    d080:	0000ced9 	.word	0x0000ced9
    d084:	0000cf89 	.word	0x0000cf89

0000d088 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    d088:	b590      	push	{r4, r7, lr}
    d08a:	b085      	sub	sp, #20
    d08c:	af00      	add	r7, sp, #0
    d08e:	4603      	mov	r3, r0
    d090:	6039      	str	r1, [r7, #0]
    d092:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d094:	683b      	ldr	r3, [r7, #0]
    d096:	781b      	ldrb	r3, [r3, #0]
    d098:	f003 031f 	and.w	r3, r3, #31
    d09c:	2b00      	cmp	r3, #0
    d09e:	db1b      	blt.n	d0d8 <usbdc_get_status_req+0x50>
    d0a0:	2b01      	cmp	r3, #1
    d0a2:	dd02      	ble.n	d0aa <usbdc_get_status_req+0x22>
    d0a4:	2b02      	cmp	r3, #2
    d0a6:	d003      	beq.n	d0b0 <usbdc_get_status_req+0x28>
    d0a8:	e016      	b.n	d0d8 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    d0aa:	2300      	movs	r3, #0
    d0ac:	60fb      	str	r3, [r7, #12]
		break;
    d0ae:	e015      	b.n	d0dc <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    d0b0:	683b      	ldr	r3, [r7, #0]
    d0b2:	889b      	ldrh	r3, [r3, #4]
    d0b4:	b29b      	uxth	r3, r3
    d0b6:	b2db      	uxtb	r3, r3
    d0b8:	2102      	movs	r1, #2
    d0ba:	4618      	mov	r0, r3
    d0bc:	4b0f      	ldr	r3, [pc, #60]	; (d0fc <usbdc_get_status_req+0x74>)
    d0be:	4798      	blx	r3
    d0c0:	4603      	mov	r3, r0
    d0c2:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    d0c4:	68fb      	ldr	r3, [r7, #12]
    d0c6:	2b00      	cmp	r3, #0
    d0c8:	da01      	bge.n	d0ce <usbdc_get_status_req+0x46>
			return false;
    d0ca:	2300      	movs	r3, #0
    d0cc:	e012      	b.n	d0f4 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    d0ce:	68fb      	ldr	r3, [r7, #12]
    d0d0:	f003 0301 	and.w	r3, r3, #1
    d0d4:	60fb      	str	r3, [r7, #12]
		break;
    d0d6:	e001      	b.n	d0dc <usbdc_get_status_req+0x54>
	default:
		return false;
    d0d8:	2300      	movs	r3, #0
    d0da:	e00b      	b.n	d0f4 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    d0dc:	4b08      	ldr	r3, [pc, #32]	; (d100 <usbdc_get_status_req+0x78>)
    d0de:	695b      	ldr	r3, [r3, #20]
    d0e0:	89ba      	ldrh	r2, [r7, #12]
    d0e2:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    d0e4:	4b06      	ldr	r3, [pc, #24]	; (d100 <usbdc_get_status_req+0x78>)
    d0e6:	6959      	ldr	r1, [r3, #20]
    d0e8:	79f8      	ldrb	r0, [r7, #7]
    d0ea:	2300      	movs	r3, #0
    d0ec:	2202      	movs	r2, #2
    d0ee:	4c05      	ldr	r4, [pc, #20]	; (d104 <usbdc_get_status_req+0x7c>)
    d0f0:	47a0      	blx	r4
	return true;
    d0f2:	2301      	movs	r3, #1
}
    d0f4:	4618      	mov	r0, r3
    d0f6:	3714      	adds	r7, #20
    d0f8:	46bd      	mov	sp, r7
    d0fa:	bd90      	pop	{r4, r7, pc}
    d0fc:	00003c91 	.word	0x00003c91
    d100:	20001084 	.word	0x20001084
    d104:	0000d945 	.word	0x0000d945

0000d108 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    d108:	b590      	push	{r4, r7, lr}
    d10a:	b085      	sub	sp, #20
    d10c:	af00      	add	r7, sp, #0
    d10e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d110:	4b1f      	ldr	r3, [pc, #124]	; (d190 <usbdc_get_interface+0x88>)
    d112:	691b      	ldr	r3, [r3, #16]
    d114:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    d116:	4b1e      	ldr	r3, [pc, #120]	; (d190 <usbdc_get_interface+0x88>)
    d118:	7f5b      	ldrb	r3, [r3, #29]
    d11a:	461a      	mov	r2, r3
    d11c:	687b      	ldr	r3, [r7, #4]
    d11e:	889b      	ldrh	r3, [r3, #4]
    d120:	b29b      	uxth	r3, r3
    d122:	fa42 f303 	asr.w	r3, r2, r3
    d126:	f003 0301 	and.w	r3, r3, #1
    d12a:	2b00      	cmp	r3, #0
    d12c:	d128      	bne.n	d180 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    d12e:	4b18      	ldr	r3, [pc, #96]	; (d190 <usbdc_get_interface+0x88>)
    d130:	695b      	ldr	r3, [r3, #20]
    d132:	2200      	movs	r2, #0
    d134:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    d136:	4b16      	ldr	r3, [pc, #88]	; (d190 <usbdc_get_interface+0x88>)
    d138:	6959      	ldr	r1, [r3, #20]
    d13a:	2300      	movs	r3, #0
    d13c:	2201      	movs	r2, #1
    d13e:	2000      	movs	r0, #0
    d140:	4c14      	ldr	r4, [pc, #80]	; (d194 <usbdc_get_interface+0x8c>)
    d142:	47a0      	blx	r4
		return true;
    d144:	2301      	movs	r3, #1
    d146:	e01f      	b.n	d188 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    d148:	68fb      	ldr	r3, [r7, #12]
    d14a:	685b      	ldr	r3, [r3, #4]
    d14c:	687a      	ldr	r2, [r7, #4]
    d14e:	2102      	movs	r1, #2
    d150:	68f8      	ldr	r0, [r7, #12]
    d152:	4798      	blx	r3
    d154:	60b8      	str	r0, [r7, #8]
    d156:	68bb      	ldr	r3, [r7, #8]
    d158:	2b00      	cmp	r3, #0
    d15a:	da03      	bge.n	d164 <usbdc_get_interface+0x5c>
			func = func->next;
    d15c:	68fb      	ldr	r3, [r7, #12]
    d15e:	681b      	ldr	r3, [r3, #0]
    d160:	60fb      	str	r3, [r7, #12]
    d162:	e00d      	b.n	d180 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    d164:	4b0a      	ldr	r3, [pc, #40]	; (d190 <usbdc_get_interface+0x88>)
    d166:	695b      	ldr	r3, [r3, #20]
    d168:	68ba      	ldr	r2, [r7, #8]
    d16a:	b2d2      	uxtb	r2, r2
    d16c:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    d16e:	4b08      	ldr	r3, [pc, #32]	; (d190 <usbdc_get_interface+0x88>)
    d170:	6959      	ldr	r1, [r3, #20]
    d172:	2300      	movs	r3, #0
    d174:	2201      	movs	r2, #1
    d176:	2000      	movs	r0, #0
    d178:	4c06      	ldr	r4, [pc, #24]	; (d194 <usbdc_get_interface+0x8c>)
    d17a:	47a0      	blx	r4
			return true;
    d17c:	2301      	movs	r3, #1
    d17e:	e003      	b.n	d188 <usbdc_get_interface+0x80>
	while (NULL != func) {
    d180:	68fb      	ldr	r3, [r7, #12]
    d182:	2b00      	cmp	r3, #0
    d184:	d1e0      	bne.n	d148 <usbdc_get_interface+0x40>
		}
	}
	return false;
    d186:	2300      	movs	r3, #0
}
    d188:	4618      	mov	r0, r3
    d18a:	3714      	adds	r7, #20
    d18c:	46bd      	mov	sp, r7
    d18e:	bd90      	pop	{r4, r7, pc}
    d190:	20001084 	.word	0x20001084
    d194:	0000d945 	.word	0x0000d945

0000d198 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    d198:	b590      	push	{r4, r7, lr}
    d19a:	b083      	sub	sp, #12
    d19c:	af00      	add	r7, sp, #0
    d19e:	4603      	mov	r3, r0
    d1a0:	6039      	str	r1, [r7, #0]
    d1a2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d1a4:	683b      	ldr	r3, [r7, #0]
    d1a6:	785b      	ldrb	r3, [r3, #1]
    d1a8:	2b0a      	cmp	r3, #10
    d1aa:	d83a      	bhi.n	d222 <usbdc_get_req+0x8a>
    d1ac:	a201      	add	r2, pc, #4	; (adr r2, d1b4 <usbdc_get_req+0x1c>)
    d1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d1b2:	bf00      	nop
    d1b4:	0000d20b 	.word	0x0000d20b
    d1b8:	0000d223 	.word	0x0000d223
    d1bc:	0000d223 	.word	0x0000d223
    d1c0:	0000d223 	.word	0x0000d223
    d1c4:	0000d223 	.word	0x0000d223
    d1c8:	0000d223 	.word	0x0000d223
    d1cc:	0000d1e1 	.word	0x0000d1e1
    d1d0:	0000d223 	.word	0x0000d223
    d1d4:	0000d1ef 	.word	0x0000d1ef
    d1d8:	0000d223 	.word	0x0000d223
    d1dc:	0000d219 	.word	0x0000d219
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    d1e0:	79fb      	ldrb	r3, [r7, #7]
    d1e2:	6839      	ldr	r1, [r7, #0]
    d1e4:	4618      	mov	r0, r3
    d1e6:	4b11      	ldr	r3, [pc, #68]	; (d22c <usbdc_get_req+0x94>)
    d1e8:	4798      	blx	r3
    d1ea:	4603      	mov	r3, r0
    d1ec:	e01a      	b.n	d224 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    d1ee:	4b10      	ldr	r3, [pc, #64]	; (d230 <usbdc_get_req+0x98>)
    d1f0:	695b      	ldr	r3, [r3, #20]
    d1f2:	4a0f      	ldr	r2, [pc, #60]	; (d230 <usbdc_get_req+0x98>)
    d1f4:	7ed2      	ldrb	r2, [r2, #27]
    d1f6:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    d1f8:	4b0d      	ldr	r3, [pc, #52]	; (d230 <usbdc_get_req+0x98>)
    d1fa:	6959      	ldr	r1, [r3, #20]
    d1fc:	79f8      	ldrb	r0, [r7, #7]
    d1fe:	2300      	movs	r3, #0
    d200:	2201      	movs	r2, #1
    d202:	4c0c      	ldr	r4, [pc, #48]	; (d234 <usbdc_get_req+0x9c>)
    d204:	47a0      	blx	r4
		return true;
    d206:	2301      	movs	r3, #1
    d208:	e00c      	b.n	d224 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    d20a:	79fb      	ldrb	r3, [r7, #7]
    d20c:	6839      	ldr	r1, [r7, #0]
    d20e:	4618      	mov	r0, r3
    d210:	4b09      	ldr	r3, [pc, #36]	; (d238 <usbdc_get_req+0xa0>)
    d212:	4798      	blx	r3
    d214:	4603      	mov	r3, r0
    d216:	e005      	b.n	d224 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    d218:	6838      	ldr	r0, [r7, #0]
    d21a:	4b08      	ldr	r3, [pc, #32]	; (d23c <usbdc_get_req+0xa4>)
    d21c:	4798      	blx	r3
    d21e:	4603      	mov	r3, r0
    d220:	e000      	b.n	d224 <usbdc_get_req+0x8c>
	default:
		return false;
    d222:	2300      	movs	r3, #0
	}
}
    d224:	4618      	mov	r0, r3
    d226:	370c      	adds	r7, #12
    d228:	46bd      	mov	sp, r7
    d22a:	bd90      	pop	{r4, r7, pc}
    d22c:	0000d021 	.word	0x0000d021
    d230:	20001084 	.word	0x20001084
    d234:	0000d945 	.word	0x0000d945
    d238:	0000d089 	.word	0x0000d089
    d23c:	0000d109 	.word	0x0000d109

0000d240 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d240:	b590      	push	{r4, r7, lr}
    d242:	b083      	sub	sp, #12
    d244:	af00      	add	r7, sp, #0
    d246:	4603      	mov	r3, r0
    d248:	6039      	str	r1, [r7, #0]
    d24a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d24c:	683b      	ldr	r3, [r7, #0]
    d24e:	781b      	ldrb	r3, [r3, #0]
    d250:	f003 031f 	and.w	r3, r3, #31
    d254:	2b02      	cmp	r3, #2
    d256:	d116      	bne.n	d286 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d258:	683b      	ldr	r3, [r7, #0]
    d25a:	88db      	ldrh	r3, [r3, #6]
    d25c:	b29b      	uxth	r3, r3
    d25e:	2b00      	cmp	r3, #0
    d260:	d001      	beq.n	d266 <usbdc_clear_ftr_req+0x26>
			return false;
    d262:	2300      	movs	r3, #0
    d264:	e010      	b.n	d288 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    d266:	683b      	ldr	r3, [r7, #0]
    d268:	889b      	ldrh	r3, [r3, #4]
    d26a:	b29b      	uxth	r3, r3
    d26c:	b2db      	uxtb	r3, r3
    d26e:	2100      	movs	r1, #0
    d270:	4618      	mov	r0, r3
    d272:	4b07      	ldr	r3, [pc, #28]	; (d290 <usbdc_clear_ftr_req+0x50>)
    d274:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d276:	79f8      	ldrb	r0, [r7, #7]
    d278:	2301      	movs	r3, #1
    d27a:	2200      	movs	r2, #0
    d27c:	2100      	movs	r1, #0
    d27e:	4c05      	ldr	r4, [pc, #20]	; (d294 <usbdc_clear_ftr_req+0x54>)
    d280:	47a0      	blx	r4
		return true;
    d282:	2301      	movs	r3, #1
    d284:	e000      	b.n	d288 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    d286:	2300      	movs	r3, #0
	}
}
    d288:	4618      	mov	r0, r3
    d28a:	370c      	adds	r7, #12
    d28c:	46bd      	mov	sp, r7
    d28e:	bd90      	pop	{r4, r7, pc}
    d290:	00003c91 	.word	0x00003c91
    d294:	0000d945 	.word	0x0000d945

0000d298 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d298:	b590      	push	{r4, r7, lr}
    d29a:	b083      	sub	sp, #12
    d29c:	af00      	add	r7, sp, #0
    d29e:	4603      	mov	r3, r0
    d2a0:	6039      	str	r1, [r7, #0]
    d2a2:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d2a4:	683b      	ldr	r3, [r7, #0]
    d2a6:	781b      	ldrb	r3, [r3, #0]
    d2a8:	f003 031f 	and.w	r3, r3, #31
    d2ac:	2b02      	cmp	r3, #2
    d2ae:	d116      	bne.n	d2de <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d2b0:	683b      	ldr	r3, [r7, #0]
    d2b2:	88db      	ldrh	r3, [r3, #6]
    d2b4:	b29b      	uxth	r3, r3
    d2b6:	2b00      	cmp	r3, #0
    d2b8:	d001      	beq.n	d2be <usbdc_set_ftr_req+0x26>
			return false;
    d2ba:	2300      	movs	r3, #0
    d2bc:	e010      	b.n	d2e0 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    d2be:	683b      	ldr	r3, [r7, #0]
    d2c0:	889b      	ldrh	r3, [r3, #4]
    d2c2:	b29b      	uxth	r3, r3
    d2c4:	b2db      	uxtb	r3, r3
    d2c6:	2101      	movs	r1, #1
    d2c8:	4618      	mov	r0, r3
    d2ca:	4b07      	ldr	r3, [pc, #28]	; (d2e8 <usbdc_set_ftr_req+0x50>)
    d2cc:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d2ce:	79f8      	ldrb	r0, [r7, #7]
    d2d0:	2301      	movs	r3, #1
    d2d2:	2200      	movs	r2, #0
    d2d4:	2100      	movs	r1, #0
    d2d6:	4c05      	ldr	r4, [pc, #20]	; (d2ec <usbdc_set_ftr_req+0x54>)
    d2d8:	47a0      	blx	r4
		return true;
    d2da:	2301      	movs	r3, #1
    d2dc:	e000      	b.n	d2e0 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    d2de:	2300      	movs	r3, #0
	}
}
    d2e0:	4618      	mov	r0, r3
    d2e2:	370c      	adds	r7, #12
    d2e4:	46bd      	mov	sp, r7
    d2e6:	bd90      	pop	{r4, r7, pc}
    d2e8:	00003c91 	.word	0x00003c91
    d2ec:	0000d945 	.word	0x0000d945

0000d2f0 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    d2f0:	b580      	push	{r7, lr}
    d2f2:	b082      	sub	sp, #8
    d2f4:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d2f6:	4b0a      	ldr	r3, [pc, #40]	; (d320 <usbdc_unconfig+0x30>)
    d2f8:	691b      	ldr	r3, [r3, #16]
    d2fa:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d2fc:	e008      	b.n	d310 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    d2fe:	687b      	ldr	r3, [r7, #4]
    d300:	685b      	ldr	r3, [r3, #4]
    d302:	2200      	movs	r2, #0
    d304:	2101      	movs	r1, #1
    d306:	6878      	ldr	r0, [r7, #4]
    d308:	4798      	blx	r3
		func = func->next;
    d30a:	687b      	ldr	r3, [r7, #4]
    d30c:	681b      	ldr	r3, [r3, #0]
    d30e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d310:	687b      	ldr	r3, [r7, #4]
    d312:	2b00      	cmp	r3, #0
    d314:	d1f3      	bne.n	d2fe <usbdc_unconfig+0xe>
	}
}
    d316:	bf00      	nop
    d318:	3708      	adds	r7, #8
    d31a:	46bd      	mov	sp, r7
    d31c:	bd80      	pop	{r7, pc}
    d31e:	bf00      	nop
    d320:	20001084 	.word	0x20001084

0000d324 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    d324:	b580      	push	{r7, lr}
    d326:	b088      	sub	sp, #32
    d328:	af00      	add	r7, sp, #0
    d32a:	4603      	mov	r3, r0
    d32c:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    d32e:	2300      	movs	r3, #0
    d330:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    d332:	23ff      	movs	r3, #255	; 0xff
    d334:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    d336:	79fb      	ldrb	r3, [r7, #7]
    d338:	2b00      	cmp	r3, #0
    d33a:	d103      	bne.n	d344 <usbdc_set_config+0x20>
		usbdc_unconfig();
    d33c:	4b2e      	ldr	r3, [pc, #184]	; (d3f8 <usbdc_set_config+0xd4>)
    d33e:	4798      	blx	r3
		return true;
    d340:	2301      	movs	r3, #1
    d342:	e055      	b.n	d3f0 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    d344:	69bb      	ldr	r3, [r7, #24]
    d346:	2b00      	cmp	r3, #0
    d348:	d10a      	bne.n	d360 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    d34a:	4b2c      	ldr	r3, [pc, #176]	; (d3fc <usbdc_set_config+0xd8>)
    d34c:	681b      	ldr	r3, [r3, #0]
    d34e:	6818      	ldr	r0, [r3, #0]
    d350:	4b2a      	ldr	r3, [pc, #168]	; (d3fc <usbdc_set_config+0xd8>)
    d352:	681b      	ldr	r3, [r3, #0]
    d354:	685b      	ldr	r3, [r3, #4]
    d356:	79fa      	ldrb	r2, [r7, #7]
    d358:	4619      	mov	r1, r3
    d35a:	4b29      	ldr	r3, [pc, #164]	; (d400 <usbdc_set_config+0xdc>)
    d35c:	4798      	blx	r3
    d35e:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    d360:	69bb      	ldr	r3, [r7, #24]
    d362:	2b00      	cmp	r3, #0
    d364:	d101      	bne.n	d36a <usbdc_set_config+0x46>
		return false;
    d366:	2300      	movs	r3, #0
    d368:	e042      	b.n	d3f0 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    d36a:	69b8      	ldr	r0, [r7, #24]
    d36c:	4b25      	ldr	r3, [pc, #148]	; (d404 <usbdc_set_config+0xe0>)
    d36e:	4798      	blx	r3
    d370:	4603      	mov	r3, r0
    d372:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    d374:	8abb      	ldrh	r3, [r7, #20]
    d376:	69ba      	ldr	r2, [r7, #24]
    d378:	4413      	add	r3, r2
    d37a:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    d37c:	693b      	ldr	r3, [r7, #16]
    d37e:	2204      	movs	r2, #4
    d380:	4619      	mov	r1, r3
    d382:	69b8      	ldr	r0, [r7, #24]
    d384:	4b20      	ldr	r3, [pc, #128]	; (d408 <usbdc_set_config+0xe4>)
    d386:	4798      	blx	r3
    d388:	4603      	mov	r3, r0
    d38a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    d38c:	e02c      	b.n	d3e8 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    d38e:	68fb      	ldr	r3, [r7, #12]
    d390:	3302      	adds	r3, #2
    d392:	781b      	ldrb	r3, [r3, #0]
    d394:	7dfa      	ldrb	r2, [r7, #23]
    d396:	429a      	cmp	r2, r3
    d398:	d018      	beq.n	d3cc <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    d39a:	68fb      	ldr	r3, [r7, #12]
    d39c:	789b      	ldrb	r3, [r3, #2]
    d39e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    d3a0:	4b16      	ldr	r3, [pc, #88]	; (d3fc <usbdc_set_config+0xd8>)
    d3a2:	691b      	ldr	r3, [r3, #16]
    d3a4:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d3a6:	e00c      	b.n	d3c2 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    d3a8:	69fb      	ldr	r3, [r7, #28]
    d3aa:	685b      	ldr	r3, [r3, #4]
    d3ac:	f107 020c 	add.w	r2, r7, #12
    d3b0:	2100      	movs	r1, #0
    d3b2:	69f8      	ldr	r0, [r7, #28]
    d3b4:	4798      	blx	r3
    d3b6:	4603      	mov	r3, r0
    d3b8:	2b00      	cmp	r3, #0
    d3ba:	d006      	beq.n	d3ca <usbdc_set_config+0xa6>
					func = func->next;
    d3bc:	69fb      	ldr	r3, [r7, #28]
    d3be:	681b      	ldr	r3, [r3, #0]
    d3c0:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d3c2:	69fb      	ldr	r3, [r7, #28]
    d3c4:	2b00      	cmp	r3, #0
    d3c6:	d1ef      	bne.n	d3a8 <usbdc_set_config+0x84>
    d3c8:	e000      	b.n	d3cc <usbdc_set_config+0xa8>
				} else {
					break;
    d3ca:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    d3cc:	68fb      	ldr	r3, [r7, #12]
    d3ce:	4618      	mov	r0, r3
    d3d0:	4b0e      	ldr	r3, [pc, #56]	; (d40c <usbdc_set_config+0xe8>)
    d3d2:	4798      	blx	r3
    d3d4:	4603      	mov	r3, r0
    d3d6:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d3d8:	68fb      	ldr	r3, [r7, #12]
    d3da:	6939      	ldr	r1, [r7, #16]
    d3dc:	2204      	movs	r2, #4
    d3de:	4618      	mov	r0, r3
    d3e0:	4b09      	ldr	r3, [pc, #36]	; (d408 <usbdc_set_config+0xe4>)
    d3e2:	4798      	blx	r3
    d3e4:	4603      	mov	r3, r0
    d3e6:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    d3e8:	68fb      	ldr	r3, [r7, #12]
    d3ea:	2b00      	cmp	r3, #0
    d3ec:	d1cf      	bne.n	d38e <usbdc_set_config+0x6a>
	}
	return true;
    d3ee:	2301      	movs	r3, #1
}
    d3f0:	4618      	mov	r0, r3
    d3f2:	3720      	adds	r7, #32
    d3f4:	46bd      	mov	sp, r7
    d3f6:	bd80      	pop	{r7, pc}
    d3f8:	0000d2f1 	.word	0x0000d2f1
    d3fc:	20001084 	.word	0x20001084
    d400:	0000dc95 	.word	0x0000dc95
    d404:	0000ce41 	.word	0x0000ce41
    d408:	0000dbd5 	.word	0x0000dbd5
    d40c:	0000ce1d 	.word	0x0000ce1d

0000d410 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    d410:	b580      	push	{r7, lr}
    d412:	b082      	sub	sp, #8
    d414:	af00      	add	r7, sp, #0
    d416:	4603      	mov	r3, r0
    d418:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    d41a:	79fb      	ldrb	r3, [r7, #7]
    d41c:	4618      	mov	r0, r3
    d41e:	4b03      	ldr	r3, [pc, #12]	; (d42c <usbdc_set_address+0x1c>)
    d420:	4798      	blx	r3
}
    d422:	bf00      	nop
    d424:	3708      	adds	r7, #8
    d426:	46bd      	mov	sp, r7
    d428:	bd80      	pop	{r7, pc}
    d42a:	bf00      	nop
    d42c:	000038ad 	.word	0x000038ad

0000d430 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    d430:	b590      	push	{r4, r7, lr}
    d432:	b087      	sub	sp, #28
    d434:	af00      	add	r7, sp, #0
    d436:	4603      	mov	r3, r0
    d438:	460a      	mov	r2, r1
    d43a:	80fb      	strh	r3, [r7, #6]
    d43c:	4613      	mov	r3, r2
    d43e:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    d440:	2300      	movs	r3, #0
    d442:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    d444:	693b      	ldr	r3, [r7, #16]
    d446:	2b00      	cmp	r3, #0
    d448:	d10b      	bne.n	d462 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    d44a:	4b43      	ldr	r3, [pc, #268]	; (d558 <usbdc_set_interface+0x128>)
    d44c:	681b      	ldr	r3, [r3, #0]
    d44e:	6818      	ldr	r0, [r3, #0]
    d450:	4b41      	ldr	r3, [pc, #260]	; (d558 <usbdc_set_interface+0x128>)
    d452:	681b      	ldr	r3, [r3, #0]
    d454:	6859      	ldr	r1, [r3, #4]
    d456:	4b40      	ldr	r3, [pc, #256]	; (d558 <usbdc_set_interface+0x128>)
    d458:	7edb      	ldrb	r3, [r3, #27]
    d45a:	461a      	mov	r2, r3
    d45c:	4b3f      	ldr	r3, [pc, #252]	; (d55c <usbdc_set_interface+0x12c>)
    d45e:	4798      	blx	r3
    d460:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    d462:	693b      	ldr	r3, [r7, #16]
    d464:	2b00      	cmp	r3, #0
    d466:	d101      	bne.n	d46c <usbdc_set_interface+0x3c>
		return false;
    d468:	2300      	movs	r3, #0
    d46a:	e071      	b.n	d550 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    d46c:	693b      	ldr	r3, [r7, #16]
    d46e:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    d470:	6938      	ldr	r0, [r7, #16]
    d472:	4b3b      	ldr	r3, [pc, #236]	; (d560 <usbdc_set_interface+0x130>)
    d474:	4798      	blx	r3
    d476:	4603      	mov	r3, r0
    d478:	461a      	mov	r2, r3
    d47a:	693b      	ldr	r3, [r7, #16]
    d47c:	4413      	add	r3, r2
    d47e:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    d480:	68bb      	ldr	r3, [r7, #8]
    d482:	68f9      	ldr	r1, [r7, #12]
    d484:	2204      	movs	r2, #4
    d486:	4618      	mov	r0, r3
    d488:	4b36      	ldr	r3, [pc, #216]	; (d564 <usbdc_set_interface+0x134>)
    d48a:	4798      	blx	r3
    d48c:	6138      	str	r0, [r7, #16]
    d48e:	693b      	ldr	r3, [r7, #16]
    d490:	2b00      	cmp	r3, #0
    d492:	d113      	bne.n	d4bc <usbdc_set_interface+0x8c>
		return false;
    d494:	2300      	movs	r3, #0
    d496:	e05b      	b.n	d550 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    d498:	68bb      	ldr	r3, [r7, #8]
    d49a:	4618      	mov	r0, r3
    d49c:	4b32      	ldr	r3, [pc, #200]	; (d568 <usbdc_set_interface+0x138>)
    d49e:	4798      	blx	r3
    d4a0:	4603      	mov	r3, r0
    d4a2:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d4a4:	68bb      	ldr	r3, [r7, #8]
    d4a6:	68f9      	ldr	r1, [r7, #12]
    d4a8:	2204      	movs	r2, #4
    d4aa:	4618      	mov	r0, r3
    d4ac:	4b2d      	ldr	r3, [pc, #180]	; (d564 <usbdc_set_interface+0x134>)
    d4ae:	4798      	blx	r3
    d4b0:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    d4b2:	693b      	ldr	r3, [r7, #16]
    d4b4:	2b00      	cmp	r3, #0
    d4b6:	d101      	bne.n	d4bc <usbdc_set_interface+0x8c>
			return false;
    d4b8:	2300      	movs	r3, #0
    d4ba:	e049      	b.n	d550 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    d4bc:	693b      	ldr	r3, [r7, #16]
    d4be:	3302      	adds	r3, #2
    d4c0:	781b      	ldrb	r3, [r3, #0]
    d4c2:	b29b      	uxth	r3, r3
    d4c4:	88ba      	ldrh	r2, [r7, #4]
    d4c6:	429a      	cmp	r2, r3
    d4c8:	d1e6      	bne.n	d498 <usbdc_set_interface+0x68>
    d4ca:	693b      	ldr	r3, [r7, #16]
    d4cc:	3303      	adds	r3, #3
    d4ce:	781b      	ldrb	r3, [r3, #0]
    d4d0:	b29b      	uxth	r3, r3
    d4d2:	88fa      	ldrh	r2, [r7, #6]
    d4d4:	429a      	cmp	r2, r3
    d4d6:	d1df      	bne.n	d498 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    d4d8:	693b      	ldr	r3, [r7, #16]
    d4da:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    d4dc:	4b1e      	ldr	r3, [pc, #120]	; (d558 <usbdc_set_interface+0x128>)
    d4de:	691b      	ldr	r3, [r3, #16]
    d4e0:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    d4e2:	e031      	b.n	d548 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    d4e4:	697b      	ldr	r3, [r7, #20]
    d4e6:	685b      	ldr	r3, [r3, #4]
    d4e8:	f107 0208 	add.w	r2, r7, #8
    d4ec:	2101      	movs	r1, #1
    d4ee:	6978      	ldr	r0, [r7, #20]
    d4f0:	4798      	blx	r3
    d4f2:	4603      	mov	r3, r0
    d4f4:	2b00      	cmp	r3, #0
    d4f6:	d003      	beq.n	d500 <usbdc_set_interface+0xd0>
			func = func->next;
    d4f8:	697b      	ldr	r3, [r7, #20]
    d4fa:	681b      	ldr	r3, [r3, #0]
    d4fc:	617b      	str	r3, [r7, #20]
    d4fe:	e023      	b.n	d548 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    d500:	697b      	ldr	r3, [r7, #20]
    d502:	685b      	ldr	r3, [r3, #4]
    d504:	f107 0208 	add.w	r2, r7, #8
    d508:	2100      	movs	r1, #0
    d50a:	6978      	ldr	r0, [r7, #20]
    d50c:	4798      	blx	r3
    d50e:	4603      	mov	r3, r0
    d510:	2b00      	cmp	r3, #0
    d512:	d117      	bne.n	d544 <usbdc_set_interface+0x114>
			if (alt_set) {
    d514:	88fb      	ldrh	r3, [r7, #6]
    d516:	2b00      	cmp	r3, #0
    d518:	d00c      	beq.n	d534 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    d51a:	4b0f      	ldr	r3, [pc, #60]	; (d558 <usbdc_set_interface+0x128>)
    d51c:	7f5b      	ldrb	r3, [r3, #29]
    d51e:	b25a      	sxtb	r2, r3
    d520:	88bb      	ldrh	r3, [r7, #4]
    d522:	2101      	movs	r1, #1
    d524:	fa01 f303 	lsl.w	r3, r1, r3
    d528:	b25b      	sxtb	r3, r3
    d52a:	4313      	orrs	r3, r2
    d52c:	b25b      	sxtb	r3, r3
    d52e:	b2da      	uxtb	r2, r3
    d530:	4b09      	ldr	r3, [pc, #36]	; (d558 <usbdc_set_interface+0x128>)
    d532:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    d534:	2300      	movs	r3, #0
    d536:	2200      	movs	r2, #0
    d538:	2100      	movs	r1, #0
    d53a:	2000      	movs	r0, #0
    d53c:	4c0b      	ldr	r4, [pc, #44]	; (d56c <usbdc_set_interface+0x13c>)
    d53e:	47a0      	blx	r4
			return true;
    d540:	2301      	movs	r3, #1
    d542:	e005      	b.n	d550 <usbdc_set_interface+0x120>
		} else {
			return false;
    d544:	2300      	movs	r3, #0
    d546:	e003      	b.n	d550 <usbdc_set_interface+0x120>
	while (NULL != func) {
    d548:	697b      	ldr	r3, [r7, #20]
    d54a:	2b00      	cmp	r3, #0
    d54c:	d1ca      	bne.n	d4e4 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    d54e:	2300      	movs	r3, #0
}
    d550:	4618      	mov	r0, r3
    d552:	371c      	adds	r7, #28
    d554:	46bd      	mov	sp, r7
    d556:	bd90      	pop	{r4, r7, pc}
    d558:	20001084 	.word	0x20001084
    d55c:	0000dc95 	.word	0x0000dc95
    d560:	0000ce41 	.word	0x0000ce41
    d564:	0000dbd5 	.word	0x0000dbd5
    d568:	0000ce1d 	.word	0x0000ce1d
    d56c:	0000d945 	.word	0x0000d945

0000d570 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    d570:	b590      	push	{r4, r7, lr}
    d572:	b083      	sub	sp, #12
    d574:	af00      	add	r7, sp, #0
    d576:	4603      	mov	r3, r0
    d578:	6039      	str	r1, [r7, #0]
    d57a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d57c:	683b      	ldr	r3, [r7, #0]
    d57e:	785b      	ldrb	r3, [r3, #1]
    d580:	3b01      	subs	r3, #1
    d582:	2b0a      	cmp	r3, #10
    d584:	d85b      	bhi.n	d63e <usbdc_set_req+0xce>
    d586:	a201      	add	r2, pc, #4	; (adr r2, d58c <usbdc_set_req+0x1c>)
    d588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d58c:	0000d60b 	.word	0x0000d60b
    d590:	0000d63f 	.word	0x0000d63f
    d594:	0000d619 	.word	0x0000d619
    d598:	0000d63f 	.word	0x0000d63f
    d59c:	0000d5b9 	.word	0x0000d5b9
    d5a0:	0000d63f 	.word	0x0000d63f
    d5a4:	0000d63f 	.word	0x0000d63f
    d5a8:	0000d63f 	.word	0x0000d63f
    d5ac:	0000d5d3 	.word	0x0000d5d3
    d5b0:	0000d63f 	.word	0x0000d63f
    d5b4:	0000d627 	.word	0x0000d627
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d5b8:	79f8      	ldrb	r0, [r7, #7]
    d5ba:	2301      	movs	r3, #1
    d5bc:	2200      	movs	r2, #0
    d5be:	2100      	movs	r1, #0
    d5c0:	4c21      	ldr	r4, [pc, #132]	; (d648 <usbdc_set_req+0xd8>)
    d5c2:	47a0      	blx	r4
    d5c4:	4603      	mov	r3, r0
    d5c6:	2b00      	cmp	r3, #0
    d5c8:	bf0c      	ite	eq
    d5ca:	2301      	moveq	r3, #1
    d5cc:	2300      	movne	r3, #0
    d5ce:	b2db      	uxtb	r3, r3
    d5d0:	e036      	b.n	d640 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    d5d2:	683b      	ldr	r3, [r7, #0]
    d5d4:	885b      	ldrh	r3, [r3, #2]
    d5d6:	b29b      	uxth	r3, r3
    d5d8:	b2db      	uxtb	r3, r3
    d5da:	4618      	mov	r0, r3
    d5dc:	4b1b      	ldr	r3, [pc, #108]	; (d64c <usbdc_set_req+0xdc>)
    d5de:	4798      	blx	r3
    d5e0:	4603      	mov	r3, r0
    d5e2:	f083 0301 	eor.w	r3, r3, #1
    d5e6:	b2db      	uxtb	r3, r3
    d5e8:	2b00      	cmp	r3, #0
    d5ea:	d001      	beq.n	d5f0 <usbdc_set_req+0x80>
			return false;
    d5ec:	2300      	movs	r3, #0
    d5ee:	e027      	b.n	d640 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d5f0:	79f8      	ldrb	r0, [r7, #7]
    d5f2:	2301      	movs	r3, #1
    d5f4:	2200      	movs	r2, #0
    d5f6:	2100      	movs	r1, #0
    d5f8:	4c13      	ldr	r4, [pc, #76]	; (d648 <usbdc_set_req+0xd8>)
    d5fa:	47a0      	blx	r4
    d5fc:	4603      	mov	r3, r0
    d5fe:	2b00      	cmp	r3, #0
    d600:	bf0c      	ite	eq
    d602:	2301      	moveq	r3, #1
    d604:	2300      	movne	r3, #0
    d606:	b2db      	uxtb	r3, r3
    d608:	e01a      	b.n	d640 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    d60a:	79fb      	ldrb	r3, [r7, #7]
    d60c:	6839      	ldr	r1, [r7, #0]
    d60e:	4618      	mov	r0, r3
    d610:	4b0f      	ldr	r3, [pc, #60]	; (d650 <usbdc_set_req+0xe0>)
    d612:	4798      	blx	r3
    d614:	4603      	mov	r3, r0
    d616:	e013      	b.n	d640 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    d618:	79fb      	ldrb	r3, [r7, #7]
    d61a:	6839      	ldr	r1, [r7, #0]
    d61c:	4618      	mov	r0, r3
    d61e:	4b0d      	ldr	r3, [pc, #52]	; (d654 <usbdc_set_req+0xe4>)
    d620:	4798      	blx	r3
    d622:	4603      	mov	r3, r0
    d624:	e00c      	b.n	d640 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    d626:	683b      	ldr	r3, [r7, #0]
    d628:	885b      	ldrh	r3, [r3, #2]
    d62a:	b29a      	uxth	r2, r3
    d62c:	683b      	ldr	r3, [r7, #0]
    d62e:	889b      	ldrh	r3, [r3, #4]
    d630:	b29b      	uxth	r3, r3
    d632:	4619      	mov	r1, r3
    d634:	4610      	mov	r0, r2
    d636:	4b08      	ldr	r3, [pc, #32]	; (d658 <usbdc_set_req+0xe8>)
    d638:	4798      	blx	r3
    d63a:	4603      	mov	r3, r0
    d63c:	e000      	b.n	d640 <usbdc_set_req+0xd0>
	default:
		return false;
    d63e:	2300      	movs	r3, #0
	}
}
    d640:	4618      	mov	r0, r3
    d642:	370c      	adds	r7, #12
    d644:	46bd      	mov	sp, r7
    d646:	bd90      	pop	{r4, r7, pc}
    d648:	0000d945 	.word	0x0000d945
    d64c:	0000d325 	.word	0x0000d325
    d650:	0000d241 	.word	0x0000d241
    d654:	0000d299 	.word	0x0000d299
    d658:	0000d431 	.word	0x0000d431

0000d65c <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    d65c:	b580      	push	{r7, lr}
    d65e:	b082      	sub	sp, #8
    d660:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d662:	4b0a      	ldr	r3, [pc, #40]	; (d68c <usbdc_sof_notify+0x30>)
    d664:	685b      	ldr	r3, [r3, #4]
    d666:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    d668:	e009      	b.n	d67e <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    d66a:	687b      	ldr	r3, [r7, #4]
    d66c:	685b      	ldr	r3, [r3, #4]
    d66e:	2b00      	cmp	r3, #0
    d670:	d002      	beq.n	d678 <usbdc_sof_notify+0x1c>
			sof->cb();
    d672:	687b      	ldr	r3, [r7, #4]
    d674:	685b      	ldr	r3, [r3, #4]
    d676:	4798      	blx	r3
		}
		sof = sof->next;
    d678:	687b      	ldr	r3, [r7, #4]
    d67a:	681b      	ldr	r3, [r3, #0]
    d67c:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    d67e:	687b      	ldr	r3, [r7, #4]
    d680:	2b00      	cmp	r3, #0
    d682:	d1f2      	bne.n	d66a <usbdc_sof_notify+0xe>
	}
}
    d684:	bf00      	nop
    d686:	3708      	adds	r7, #8
    d688:	46bd      	mov	sp, r7
    d68a:	bd80      	pop	{r7, pc}
    d68c:	20001084 	.word	0x20001084

0000d690 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    d690:	b580      	push	{r7, lr}
    d692:	b084      	sub	sp, #16
    d694:	af00      	add	r7, sp, #0
    d696:	4603      	mov	r3, r0
    d698:	6039      	str	r1, [r7, #0]
    d69a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d69c:	4b0b      	ldr	r3, [pc, #44]	; (d6cc <usbdc_change_notify+0x3c>)
    d69e:	68db      	ldr	r3, [r3, #12]
    d6a0:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    d6a2:	e00c      	b.n	d6be <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    d6a4:	68fb      	ldr	r3, [r7, #12]
    d6a6:	685b      	ldr	r3, [r3, #4]
    d6a8:	2b00      	cmp	r3, #0
    d6aa:	d005      	beq.n	d6b8 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    d6ac:	68fb      	ldr	r3, [r7, #12]
    d6ae:	685b      	ldr	r3, [r3, #4]
    d6b0:	79fa      	ldrb	r2, [r7, #7]
    d6b2:	6839      	ldr	r1, [r7, #0]
    d6b4:	4610      	mov	r0, r2
    d6b6:	4798      	blx	r3
		}
		cg = cg->next;
    d6b8:	68fb      	ldr	r3, [r7, #12]
    d6ba:	681b      	ldr	r3, [r3, #0]
    d6bc:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    d6be:	68fb      	ldr	r3, [r7, #12]
    d6c0:	2b00      	cmp	r3, #0
    d6c2:	d1ef      	bne.n	d6a4 <usbdc_change_notify+0x14>
	}
}
    d6c4:	bf00      	nop
    d6c6:	3710      	adds	r7, #16
    d6c8:	46bd      	mov	sp, r7
    d6ca:	bd80      	pop	{r7, pc}
    d6cc:	20001084 	.word	0x20001084

0000d6d0 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d6d0:	b580      	push	{r7, lr}
    d6d2:	b084      	sub	sp, #16
    d6d4:	af00      	add	r7, sp, #0
    d6d6:	4603      	mov	r3, r0
    d6d8:	6039      	str	r1, [r7, #0]
    d6da:	71fb      	strb	r3, [r7, #7]
    d6dc:	4613      	mov	r3, r2
    d6de:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d6e0:	4b12      	ldr	r3, [pc, #72]	; (d72c <usbdc_request_handler+0x5c>)
    d6e2:	689b      	ldr	r3, [r3, #8]
    d6e4:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    d6e6:	e019      	b.n	d71c <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    d6e8:	68fb      	ldr	r3, [r7, #12]
    d6ea:	685b      	ldr	r3, [r3, #4]
    d6ec:	2b00      	cmp	r3, #0
    d6ee:	d012      	beq.n	d716 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    d6f0:	68fb      	ldr	r3, [r7, #12]
    d6f2:	685b      	ldr	r3, [r3, #4]
    d6f4:	79ba      	ldrb	r2, [r7, #6]
    d6f6:	79f8      	ldrb	r0, [r7, #7]
    d6f8:	6839      	ldr	r1, [r7, #0]
    d6fa:	4798      	blx	r3
    d6fc:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    d6fe:	68bb      	ldr	r3, [r7, #8]
    d700:	2b00      	cmp	r3, #0
    d702:	d101      	bne.n	d708 <usbdc_request_handler+0x38>
				return true;
    d704:	2301      	movs	r3, #1
    d706:	e00d      	b.n	d724 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    d708:	68bb      	ldr	r3, [r7, #8]
    d70a:	f113 0f0a 	cmn.w	r3, #10
    d70e:	d002      	beq.n	d716 <usbdc_request_handler+0x46>
				return -1;
    d710:	f04f 33ff 	mov.w	r3, #4294967295
    d714:	e006      	b.n	d724 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    d716:	68fb      	ldr	r3, [r7, #12]
    d718:	681b      	ldr	r3, [r3, #0]
    d71a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    d71c:	68fb      	ldr	r3, [r7, #12]
    d71e:	2b00      	cmp	r3, #0
    d720:	d1e2      	bne.n	d6e8 <usbdc_request_handler+0x18>
	}
	return false;
    d722:	2300      	movs	r3, #0
}
    d724:	4618      	mov	r0, r3
    d726:	3710      	adds	r7, #16
    d728:	46bd      	mov	sp, r7
    d72a:	bd80      	pop	{r7, pc}
    d72c:	20001084 	.word	0x20001084

0000d730 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d730:	b580      	push	{r7, lr}
    d732:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    d734:	4b01      	ldr	r3, [pc, #4]	; (d73c <usbd_sof_cb+0xc>)
    d736:	4798      	blx	r3
}
    d738:	bf00      	nop
    d73a:	bd80      	pop	{r7, pc}
    d73c:	0000d65d 	.word	0x0000d65d

0000d740 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    d740:	b580      	push	{r7, lr}
    d742:	b082      	sub	sp, #8
    d744:	af00      	add	r7, sp, #0
    d746:	4603      	mov	r3, r0
    d748:	6039      	str	r1, [r7, #0]
    d74a:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    d74c:	79fb      	ldrb	r3, [r7, #7]
    d74e:	2200      	movs	r2, #0
    d750:	6839      	ldr	r1, [r7, #0]
    d752:	4618      	mov	r0, r3
    d754:	4b14      	ldr	r3, [pc, #80]	; (d7a8 <usbdc_cb_ctl_req+0x68>)
    d756:	4798      	blx	r3
    d758:	4603      	mov	r3, r0
    d75a:	f1b3 3fff 	cmp.w	r3, #4294967295
    d75e:	d00b      	beq.n	d778 <usbdc_cb_ctl_req+0x38>
    d760:	2b01      	cmp	r3, #1
    d762:	d007      	beq.n	d774 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    d764:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d766:	683b      	ldr	r3, [r7, #0]
    d768:	781b      	ldrb	r3, [r3, #0]
    d76a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    d76e:	2b00      	cmp	r3, #0
    d770:	d007      	beq.n	d782 <usbdc_cb_ctl_req+0x42>
    d772:	e003      	b.n	d77c <usbdc_cb_ctl_req+0x3c>
		return true;
    d774:	2301      	movs	r3, #1
    d776:	e013      	b.n	d7a0 <usbdc_cb_ctl_req+0x60>
		return false;
    d778:	2300      	movs	r3, #0
    d77a:	e011      	b.n	d7a0 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d77c:	2b80      	cmp	r3, #128	; 0x80
    d77e:	d007      	beq.n	d790 <usbdc_cb_ctl_req+0x50>
    d780:	e00d      	b.n	d79e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    d782:	79fb      	ldrb	r3, [r7, #7]
    d784:	6839      	ldr	r1, [r7, #0]
    d786:	4618      	mov	r0, r3
    d788:	4b08      	ldr	r3, [pc, #32]	; (d7ac <usbdc_cb_ctl_req+0x6c>)
    d78a:	4798      	blx	r3
    d78c:	4603      	mov	r3, r0
    d78e:	e007      	b.n	d7a0 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    d790:	79fb      	ldrb	r3, [r7, #7]
    d792:	6839      	ldr	r1, [r7, #0]
    d794:	4618      	mov	r0, r3
    d796:	4b06      	ldr	r3, [pc, #24]	; (d7b0 <usbdc_cb_ctl_req+0x70>)
    d798:	4798      	blx	r3
    d79a:	4603      	mov	r3, r0
    d79c:	e000      	b.n	d7a0 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    d79e:	2300      	movs	r3, #0
	}
}
    d7a0:	4618      	mov	r0, r3
    d7a2:	3708      	adds	r7, #8
    d7a4:	46bd      	mov	sp, r7
    d7a6:	bd80      	pop	{r7, pc}
    d7a8:	0000d6d1 	.word	0x0000d6d1
    d7ac:	0000d571 	.word	0x0000d571
    d7b0:	0000d199 	.word	0x0000d199

0000d7b4 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    d7b4:	b580      	push	{r7, lr}
    d7b6:	b082      	sub	sp, #8
    d7b8:	af00      	add	r7, sp, #0
    d7ba:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    d7bc:	687b      	ldr	r3, [r7, #4]
    d7be:	781b      	ldrb	r3, [r3, #0]
    d7c0:	2b00      	cmp	r3, #0
    d7c2:	d135      	bne.n	d830 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    d7c4:	687b      	ldr	r3, [r7, #4]
    d7c6:	785b      	ldrb	r3, [r3, #1]
    d7c8:	2b05      	cmp	r3, #5
    d7ca:	d019      	beq.n	d800 <usbdc_ctrl_status_end+0x4c>
    d7cc:	2b09      	cmp	r3, #9
    d7ce:	d000      	beq.n	d7d2 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    d7d0:	e02f      	b.n	d832 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    d7d2:	687b      	ldr	r3, [r7, #4]
    d7d4:	885b      	ldrh	r3, [r3, #2]
    d7d6:	b29b      	uxth	r3, r3
    d7d8:	b2da      	uxtb	r2, r3
    d7da:	4b17      	ldr	r3, [pc, #92]	; (d838 <usbdc_ctrl_status_end+0x84>)
    d7dc:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d7de:	687b      	ldr	r3, [r7, #4]
    d7e0:	885b      	ldrh	r3, [r3, #2]
    d7e2:	b29b      	uxth	r3, r3
    d7e4:	2b00      	cmp	r3, #0
    d7e6:	d001      	beq.n	d7ec <usbdc_ctrl_status_end+0x38>
    d7e8:	2204      	movs	r2, #4
    d7ea:	e000      	b.n	d7ee <usbdc_ctrl_status_end+0x3a>
    d7ec:	2203      	movs	r2, #3
    d7ee:	4b12      	ldr	r3, [pc, #72]	; (d838 <usbdc_ctrl_status_end+0x84>)
    d7f0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d7f2:	4b11      	ldr	r3, [pc, #68]	; (d838 <usbdc_ctrl_status_end+0x84>)
    d7f4:	7e9b      	ldrb	r3, [r3, #26]
    d7f6:	4619      	mov	r1, r3
    d7f8:	2001      	movs	r0, #1
    d7fa:	4b10      	ldr	r3, [pc, #64]	; (d83c <usbdc_ctrl_status_end+0x88>)
    d7fc:	4798      	blx	r3
		break;
    d7fe:	e018      	b.n	d832 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    d800:	687b      	ldr	r3, [r7, #4]
    d802:	885b      	ldrh	r3, [r3, #2]
    d804:	b29b      	uxth	r3, r3
    d806:	b2db      	uxtb	r3, r3
    d808:	4618      	mov	r0, r3
    d80a:	4b0d      	ldr	r3, [pc, #52]	; (d840 <usbdc_ctrl_status_end+0x8c>)
    d80c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d80e:	687b      	ldr	r3, [r7, #4]
    d810:	885b      	ldrh	r3, [r3, #2]
    d812:	b29b      	uxth	r3, r3
    d814:	2b00      	cmp	r3, #0
    d816:	d001      	beq.n	d81c <usbdc_ctrl_status_end+0x68>
    d818:	2203      	movs	r2, #3
    d81a:	e000      	b.n	d81e <usbdc_ctrl_status_end+0x6a>
    d81c:	2202      	movs	r2, #2
    d81e:	4b06      	ldr	r3, [pc, #24]	; (d838 <usbdc_ctrl_status_end+0x84>)
    d820:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d822:	4b05      	ldr	r3, [pc, #20]	; (d838 <usbdc_ctrl_status_end+0x84>)
    d824:	7e9b      	ldrb	r3, [r3, #26]
    d826:	4619      	mov	r1, r3
    d828:	2001      	movs	r0, #1
    d82a:	4b04      	ldr	r3, [pc, #16]	; (d83c <usbdc_ctrl_status_end+0x88>)
    d82c:	4798      	blx	r3
		break;
    d82e:	e000      	b.n	d832 <usbdc_ctrl_status_end+0x7e>
		return;
    d830:	bf00      	nop
	}
}
    d832:	3708      	adds	r7, #8
    d834:	46bd      	mov	sp, r7
    d836:	bd80      	pop	{r7, pc}
    d838:	20001084 	.word	0x20001084
    d83c:	0000d691 	.word	0x0000d691
    d840:	0000d411 	.word	0x0000d411

0000d844 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    d844:	b580      	push	{r7, lr}
    d846:	b082      	sub	sp, #8
    d848:	af00      	add	r7, sp, #0
    d84a:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    d84c:	2201      	movs	r2, #1
    d84e:	6879      	ldr	r1, [r7, #4]
    d850:	2000      	movs	r0, #0
    d852:	4b03      	ldr	r3, [pc, #12]	; (d860 <usbdc_ctrl_data_end+0x1c>)
    d854:	4798      	blx	r3
	return false;
    d856:	2300      	movs	r3, #0
}
    d858:	4618      	mov	r0, r3
    d85a:	3708      	adds	r7, #8
    d85c:	46bd      	mov	sp, r7
    d85e:	bd80      	pop	{r7, pc}
    d860:	0000d6d1 	.word	0x0000d6d1

0000d864 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    d864:	b580      	push	{r7, lr}
    d866:	b082      	sub	sp, #8
    d868:	af00      	add	r7, sp, #0
    d86a:	4603      	mov	r3, r0
    d86c:	603a      	str	r2, [r7, #0]
    d86e:	71fb      	strb	r3, [r7, #7]
    d870:	460b      	mov	r3, r1
    d872:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    d874:	79bb      	ldrb	r3, [r7, #6]
    d876:	2b00      	cmp	r3, #0
    d878:	d002      	beq.n	d880 <usbdc_cb_ctl_done+0x1c>
    d87a:	2b01      	cmp	r3, #1
    d87c:	d004      	beq.n	d888 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    d87e:	e008      	b.n	d892 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    d880:	6838      	ldr	r0, [r7, #0]
    d882:	4b06      	ldr	r3, [pc, #24]	; (d89c <usbdc_cb_ctl_done+0x38>)
    d884:	4798      	blx	r3
		break;
    d886:	e004      	b.n	d892 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    d888:	6838      	ldr	r0, [r7, #0]
    d88a:	4b05      	ldr	r3, [pc, #20]	; (d8a0 <usbdc_cb_ctl_done+0x3c>)
    d88c:	4798      	blx	r3
    d88e:	4603      	mov	r3, r0
    d890:	e000      	b.n	d894 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    d892:	2300      	movs	r3, #0
}
    d894:	4618      	mov	r0, r3
    d896:	3708      	adds	r7, #8
    d898:	46bd      	mov	sp, r7
    d89a:	bd80      	pop	{r7, pc}
    d89c:	0000d7b5 	.word	0x0000d7b5
    d8a0:	0000d845 	.word	0x0000d845

0000d8a4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    d8a4:	b580      	push	{r7, lr}
    d8a6:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    d8a8:	4b10      	ldr	r3, [pc, #64]	; (d8ec <usbdc_reset+0x48>)
    d8aa:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    d8ac:	4b10      	ldr	r3, [pc, #64]	; (d8f0 <usbdc_reset+0x4c>)
    d8ae:	2202      	movs	r2, #2
    d8b0:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    d8b2:	4b0f      	ldr	r3, [pc, #60]	; (d8f0 <usbdc_reset+0x4c>)
    d8b4:	2200      	movs	r2, #0
    d8b6:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    d8b8:	4b0d      	ldr	r3, [pc, #52]	; (d8f0 <usbdc_reset+0x4c>)
    d8ba:	2200      	movs	r2, #0
    d8bc:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    d8be:	2000      	movs	r0, #0
    d8c0:	4b0c      	ldr	r3, [pc, #48]	; (d8f4 <usbdc_reset+0x50>)
    d8c2:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    d8c4:	4b0a      	ldr	r3, [pc, #40]	; (d8f0 <usbdc_reset+0x4c>)
    d8c6:	7f1b      	ldrb	r3, [r3, #28]
    d8c8:	4618      	mov	r0, r3
    d8ca:	4b0b      	ldr	r3, [pc, #44]	; (d8f8 <usbdc_reset+0x54>)
    d8cc:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    d8ce:	4a0b      	ldr	r2, [pc, #44]	; (d8fc <usbdc_reset+0x58>)
    d8d0:	2100      	movs	r1, #0
    d8d2:	2000      	movs	r0, #0
    d8d4:	4b0a      	ldr	r3, [pc, #40]	; (d900 <usbdc_reset+0x5c>)
    d8d6:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    d8d8:	4a0a      	ldr	r2, [pc, #40]	; (d904 <usbdc_reset+0x60>)
    d8da:	2102      	movs	r1, #2
    d8dc:	2000      	movs	r0, #0
    d8de:	4b08      	ldr	r3, [pc, #32]	; (d900 <usbdc_reset+0x5c>)
    d8e0:	4798      	blx	r3
	usb_d_ep_enable(0);
    d8e2:	2000      	movs	r0, #0
    d8e4:	4b08      	ldr	r3, [pc, #32]	; (d908 <usbdc_reset+0x64>)
    d8e6:	4798      	blx	r3
}
    d8e8:	bf00      	nop
    d8ea:	bd80      	pop	{r7, pc}
    d8ec:	0000d2f1 	.word	0x0000d2f1
    d8f0:	20001084 	.word	0x20001084
    d8f4:	00003991 	.word	0x00003991
    d8f8:	000038cd 	.word	0x000038cd
    d8fc:	0000d741 	.word	0x0000d741
    d900:	00003ce5 	.word	0x00003ce5
    d904:	0000d865 	.word	0x0000d865
    d908:	000039e1 	.word	0x000039e1

0000d90c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    d90c:	b580      	push	{r7, lr}
    d90e:	b082      	sub	sp, #8
    d910:	af00      	add	r7, sp, #0
    d912:	4603      	mov	r3, r0
    d914:	6039      	str	r1, [r7, #0]
    d916:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    d918:	79fb      	ldrb	r3, [r7, #7]
    d91a:	2b00      	cmp	r3, #0
    d91c:	d002      	beq.n	d924 <usbd_event_cb+0x18>
    d91e:	2b01      	cmp	r3, #1
    d920:	d005      	beq.n	d92e <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    d922:	e007      	b.n	d934 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    d924:	6839      	ldr	r1, [r7, #0]
    d926:	2000      	movs	r0, #0
    d928:	4b04      	ldr	r3, [pc, #16]	; (d93c <usbd_event_cb+0x30>)
    d92a:	4798      	blx	r3
		break;
    d92c:	e002      	b.n	d934 <usbd_event_cb+0x28>
		usbdc_reset();
    d92e:	4b04      	ldr	r3, [pc, #16]	; (d940 <usbd_event_cb+0x34>)
    d930:	4798      	blx	r3
		break;
    d932:	bf00      	nop
	}
}
    d934:	bf00      	nop
    d936:	3708      	adds	r7, #8
    d938:	46bd      	mov	sp, r7
    d93a:	bd80      	pop	{r7, pc}
    d93c:	0000d691 	.word	0x0000d691
    d940:	0000d8a5 	.word	0x0000d8a5

0000d944 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    d944:	b580      	push	{r7, lr}
    d946:	b088      	sub	sp, #32
    d948:	af00      	add	r7, sp, #0
    d94a:	60b9      	str	r1, [r7, #8]
    d94c:	607a      	str	r2, [r7, #4]
    d94e:	461a      	mov	r2, r3
    d950:	4603      	mov	r3, r0
    d952:	73fb      	strb	r3, [r7, #15]
    d954:	4613      	mov	r3, r2
    d956:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d958:	68bb      	ldr	r3, [r7, #8]
    d95a:	617b      	str	r3, [r7, #20]
    d95c:	687b      	ldr	r3, [r7, #4]
    d95e:	61bb      	str	r3, [r7, #24]
    d960:	7bfb      	ldrb	r3, [r7, #15]
    d962:	773b      	strb	r3, [r7, #28]
    d964:	7bbb      	ldrb	r3, [r7, #14]
    d966:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    d968:	f107 0314 	add.w	r3, r7, #20
    d96c:	4618      	mov	r0, r3
    d96e:	4b03      	ldr	r3, [pc, #12]	; (d97c <usbdc_xfer+0x38>)
    d970:	4798      	blx	r3
    d972:	4603      	mov	r3, r0
}
    d974:	4618      	mov	r0, r3
    d976:	3720      	adds	r7, #32
    d978:	46bd      	mov	sp, r7
    d97a:	bd80      	pop	{r7, pc}
    d97c:	00003a51 	.word	0x00003a51

0000d980 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    d980:	b580      	push	{r7, lr}
    d982:	b082      	sub	sp, #8
    d984:	af00      	add	r7, sp, #0
    d986:	4603      	mov	r3, r0
    d988:	6039      	str	r1, [r7, #0]
    d98a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    d98c:	79fb      	ldrb	r3, [r7, #7]
    d98e:	2b01      	cmp	r3, #1
    d990:	d009      	beq.n	d9a6 <usbdc_register_handler+0x26>
    d992:	2b02      	cmp	r3, #2
    d994:	d00c      	beq.n	d9b0 <usbdc_register_handler+0x30>
    d996:	2b00      	cmp	r3, #0
    d998:	d000      	beq.n	d99c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    d99a:	e00e      	b.n	d9ba <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    d99c:	6839      	ldr	r1, [r7, #0]
    d99e:	4809      	ldr	r0, [pc, #36]	; (d9c4 <usbdc_register_handler+0x44>)
    d9a0:	4b09      	ldr	r3, [pc, #36]	; (d9c8 <usbdc_register_handler+0x48>)
    d9a2:	4798      	blx	r3
		break;
    d9a4:	e009      	b.n	d9ba <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    d9a6:	6839      	ldr	r1, [r7, #0]
    d9a8:	4808      	ldr	r0, [pc, #32]	; (d9cc <usbdc_register_handler+0x4c>)
    d9aa:	4b07      	ldr	r3, [pc, #28]	; (d9c8 <usbdc_register_handler+0x48>)
    d9ac:	4798      	blx	r3
		break;
    d9ae:	e004      	b.n	d9ba <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    d9b0:	6839      	ldr	r1, [r7, #0]
    d9b2:	4807      	ldr	r0, [pc, #28]	; (d9d0 <usbdc_register_handler+0x50>)
    d9b4:	4b04      	ldr	r3, [pc, #16]	; (d9c8 <usbdc_register_handler+0x48>)
    d9b6:	4798      	blx	r3
		break;
    d9b8:	bf00      	nop
	}
}
    d9ba:	bf00      	nop
    d9bc:	3708      	adds	r7, #8
    d9be:	46bd      	mov	sp, r7
    d9c0:	bd80      	pop	{r7, pc}
    d9c2:	bf00      	nop
    d9c4:	20001088 	.word	0x20001088
    d9c8:	00003e3d 	.word	0x00003e3d
    d9cc:	2000108c 	.word	0x2000108c
    d9d0:	20001090 	.word	0x20001090

0000d9d4 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d9d4:	b580      	push	{r7, lr}
    d9d6:	b084      	sub	sp, #16
    d9d8:	af00      	add	r7, sp, #0
    d9da:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    d9dc:	687b      	ldr	r3, [r7, #4]
    d9de:	2b00      	cmp	r3, #0
    d9e0:	bf14      	ite	ne
    d9e2:	2301      	movne	r3, #1
    d9e4:	2300      	moveq	r3, #0
    d9e6:	b2db      	uxtb	r3, r3
    d9e8:	f240 3255 	movw	r2, #853	; 0x355
    d9ec:	4910      	ldr	r1, [pc, #64]	; (da30 <usbdc_init+0x5c>)
    d9ee:	4618      	mov	r0, r3
    d9f0:	4b10      	ldr	r3, [pc, #64]	; (da34 <usbdc_init+0x60>)
    d9f2:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    d9f4:	4b10      	ldr	r3, [pc, #64]	; (da38 <usbdc_init+0x64>)
    d9f6:	4798      	blx	r3
    d9f8:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    d9fa:	68fb      	ldr	r3, [r7, #12]
    d9fc:	2b00      	cmp	r3, #0
    d9fe:	da01      	bge.n	da04 <usbdc_init+0x30>
		return rc;
    da00:	68fb      	ldr	r3, [r7, #12]
    da02:	e010      	b.n	da26 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    da04:	2220      	movs	r2, #32
    da06:	2100      	movs	r1, #0
    da08:	480c      	ldr	r0, [pc, #48]	; (da3c <usbdc_init+0x68>)
    da0a:	4b0d      	ldr	r3, [pc, #52]	; (da40 <usbdc_init+0x6c>)
    da0c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    da0e:	4a0b      	ldr	r2, [pc, #44]	; (da3c <usbdc_init+0x68>)
    da10:	687b      	ldr	r3, [r7, #4]
    da12:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    da14:	490b      	ldr	r1, [pc, #44]	; (da44 <usbdc_init+0x70>)
    da16:	2000      	movs	r0, #0
    da18:	4b0b      	ldr	r3, [pc, #44]	; (da48 <usbdc_init+0x74>)
    da1a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    da1c:	490b      	ldr	r1, [pc, #44]	; (da4c <usbdc_init+0x78>)
    da1e:	2001      	movs	r0, #1
    da20:	4b09      	ldr	r3, [pc, #36]	; (da48 <usbdc_init+0x74>)
    da22:	4798      	blx	r3

	return 0;
    da24:	2300      	movs	r3, #0
}
    da26:	4618      	mov	r0, r3
    da28:	3710      	adds	r7, #16
    da2a:	46bd      	mov	sp, r7
    da2c:	bd80      	pop	{r7, pc}
    da2e:	bf00      	nop
    da30:	00010330 	.word	0x00010330
    da34:	00003d61 	.word	0x00003d61
    da38:	000037b9 	.word	0x000037b9
    da3c:	20001084 	.word	0x20001084
    da40:	0000fd79 	.word	0x0000fd79
    da44:	0000d731 	.word	0x0000d731
    da48:	00003865 	.word	0x00003865
    da4c:	0000d90d 	.word	0x0000d90d

0000da50 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    da50:	b580      	push	{r7, lr}
    da52:	b082      	sub	sp, #8
    da54:	af00      	add	r7, sp, #0
    da56:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    da58:	6879      	ldr	r1, [r7, #4]
    da5a:	4803      	ldr	r0, [pc, #12]	; (da68 <usbdc_register_function+0x18>)
    da5c:	4b03      	ldr	r3, [pc, #12]	; (da6c <usbdc_register_function+0x1c>)
    da5e:	4798      	blx	r3
}
    da60:	bf00      	nop
    da62:	3708      	adds	r7, #8
    da64:	46bd      	mov	sp, r7
    da66:	bd80      	pop	{r7, pc}
    da68:	20001094 	.word	0x20001094
    da6c:	00003e3d 	.word	0x00003e3d

0000da70 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    da70:	b580      	push	{r7, lr}
    da72:	b082      	sub	sp, #8
    da74:	af00      	add	r7, sp, #0
    da76:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    da78:	4b0f      	ldr	r3, [pc, #60]	; (dab8 <usbdc_start+0x48>)
    da7a:	7e9b      	ldrb	r3, [r3, #26]
    da7c:	2b00      	cmp	r3, #0
    da7e:	d002      	beq.n	da86 <usbdc_start+0x16>
		return ERR_BUSY;
    da80:	f06f 0303 	mvn.w	r3, #3
    da84:	e013      	b.n	daae <usbdc_start+0x3e>
	}

	if (desces) {
    da86:	687b      	ldr	r3, [r7, #4]
    da88:	2b00      	cmp	r3, #0
    da8a:	d00e      	beq.n	daaa <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    da8c:	4a0a      	ldr	r2, [pc, #40]	; (dab8 <usbdc_start+0x48>)
    da8e:	687b      	ldr	r3, [r7, #4]
    da90:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    da92:	687b      	ldr	r3, [r7, #4]
    da94:	681b      	ldr	r3, [r3, #0]
    da96:	79da      	ldrb	r2, [r3, #7]
    da98:	4b07      	ldr	r3, [pc, #28]	; (dab8 <usbdc_start+0x48>)
    da9a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    da9c:	4b06      	ldr	r3, [pc, #24]	; (dab8 <usbdc_start+0x48>)
    da9e:	2201      	movs	r2, #1
    daa0:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    daa2:	4b06      	ldr	r3, [pc, #24]	; (dabc <usbdc_start+0x4c>)
    daa4:	4798      	blx	r3
	return ERR_NONE;
    daa6:	2300      	movs	r3, #0
    daa8:	e001      	b.n	daae <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    daaa:	f06f 0308 	mvn.w	r3, #8
}
    daae:	4618      	mov	r0, r3
    dab0:	3708      	adds	r7, #8
    dab2:	46bd      	mov	sp, r7
    dab4:	bd80      	pop	{r7, pc}
    dab6:	bf00      	nop
    dab8:	20001084 	.word	0x20001084
    dabc:	00003889 	.word	0x00003889

0000dac0 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    dac0:	b580      	push	{r7, lr}
    dac2:	af00      	add	r7, sp, #0
	usb_d_attach();
    dac4:	4b01      	ldr	r3, [pc, #4]	; (dacc <usbdc_attach+0xc>)
    dac6:	4798      	blx	r3
}
    dac8:	bf00      	nop
    daca:	bd80      	pop	{r7, pc}
    dacc:	0000389d 	.word	0x0000389d

0000dad0 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    dad0:	b480      	push	{r7}
    dad2:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    dad4:	4b03      	ldr	r3, [pc, #12]	; (dae4 <usbdc_get_ctrl_buffer+0x14>)
    dad6:	695b      	ldr	r3, [r3, #20]
}
    dad8:	4618      	mov	r0, r3
    dada:	46bd      	mov	sp, r7
    dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
    dae0:	4770      	bx	lr
    dae2:	bf00      	nop
    dae4:	20001084 	.word	0x20001084

0000dae8 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    dae8:	b480      	push	{r7}
    daea:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    daec:	4b07      	ldr	r3, [pc, #28]	; (db0c <usbdc_get_state+0x24>)
    daee:	7e9b      	ldrb	r3, [r3, #26]
    daf0:	f003 0310 	and.w	r3, r3, #16
    daf4:	2b00      	cmp	r3, #0
    daf6:	d001      	beq.n	dafc <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    daf8:	2310      	movs	r3, #16
    dafa:	e001      	b.n	db00 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    dafc:	4b03      	ldr	r3, [pc, #12]	; (db0c <usbdc_get_state+0x24>)
    dafe:	7e9b      	ldrb	r3, [r3, #26]
}
    db00:	4618      	mov	r0, r3
    db02:	46bd      	mov	sp, r7
    db04:	f85d 7b04 	ldr.w	r7, [sp], #4
    db08:	4770      	bx	lr
    db0a:	bf00      	nop
    db0c:	20001084 	.word	0x20001084

0000db10 <usb_get_u16>:
{
    db10:	b480      	push	{r7}
    db12:	b083      	sub	sp, #12
    db14:	af00      	add	r7, sp, #0
    db16:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    db18:	687b      	ldr	r3, [r7, #4]
    db1a:	781b      	ldrb	r3, [r3, #0]
    db1c:	b29a      	uxth	r2, r3
    db1e:	687b      	ldr	r3, [r7, #4]
    db20:	3301      	adds	r3, #1
    db22:	781b      	ldrb	r3, [r3, #0]
    db24:	b29b      	uxth	r3, r3
    db26:	021b      	lsls	r3, r3, #8
    db28:	b29b      	uxth	r3, r3
    db2a:	4413      	add	r3, r2
    db2c:	b29b      	uxth	r3, r3
}
    db2e:	4618      	mov	r0, r3
    db30:	370c      	adds	r7, #12
    db32:	46bd      	mov	sp, r7
    db34:	f85d 7b04 	ldr.w	r7, [sp], #4
    db38:	4770      	bx	lr

0000db3a <usb_desc_len>:
{
    db3a:	b480      	push	{r7}
    db3c:	b083      	sub	sp, #12
    db3e:	af00      	add	r7, sp, #0
    db40:	6078      	str	r0, [r7, #4]
	return desc[0];
    db42:	687b      	ldr	r3, [r7, #4]
    db44:	781b      	ldrb	r3, [r3, #0]
}
    db46:	4618      	mov	r0, r3
    db48:	370c      	adds	r7, #12
    db4a:	46bd      	mov	sp, r7
    db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    db50:	4770      	bx	lr

0000db52 <usb_desc_type>:
{
    db52:	b480      	push	{r7}
    db54:	b083      	sub	sp, #12
    db56:	af00      	add	r7, sp, #0
    db58:	6078      	str	r0, [r7, #4]
	return desc[1];
    db5a:	687b      	ldr	r3, [r7, #4]
    db5c:	3301      	adds	r3, #1
    db5e:	781b      	ldrb	r3, [r3, #0]
}
    db60:	4618      	mov	r0, r3
    db62:	370c      	adds	r7, #12
    db64:	46bd      	mov	sp, r7
    db66:	f85d 7b04 	ldr.w	r7, [sp], #4
    db6a:	4770      	bx	lr

0000db6c <usb_desc_next>:
{
    db6c:	b580      	push	{r7, lr}
    db6e:	b082      	sub	sp, #8
    db70:	af00      	add	r7, sp, #0
    db72:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    db74:	6878      	ldr	r0, [r7, #4]
    db76:	4b05      	ldr	r3, [pc, #20]	; (db8c <usb_desc_next+0x20>)
    db78:	4798      	blx	r3
    db7a:	4603      	mov	r3, r0
    db7c:	461a      	mov	r2, r3
    db7e:	687b      	ldr	r3, [r7, #4]
    db80:	4413      	add	r3, r2
}
    db82:	4618      	mov	r0, r3
    db84:	3708      	adds	r7, #8
    db86:	46bd      	mov	sp, r7
    db88:	bd80      	pop	{r7, pc}
    db8a:	bf00      	nop
    db8c:	0000db3b 	.word	0x0000db3b

0000db90 <usb_cfg_desc_total_len>:
{
    db90:	b580      	push	{r7, lr}
    db92:	b082      	sub	sp, #8
    db94:	af00      	add	r7, sp, #0
    db96:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    db98:	687b      	ldr	r3, [r7, #4]
    db9a:	3302      	adds	r3, #2
    db9c:	4618      	mov	r0, r3
    db9e:	4b03      	ldr	r3, [pc, #12]	; (dbac <usb_cfg_desc_total_len+0x1c>)
    dba0:	4798      	blx	r3
    dba2:	4603      	mov	r3, r0
}
    dba4:	4618      	mov	r0, r3
    dba6:	3708      	adds	r7, #8
    dba8:	46bd      	mov	sp, r7
    dbaa:	bd80      	pop	{r7, pc}
    dbac:	0000db11 	.word	0x0000db11

0000dbb0 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    dbb0:	b580      	push	{r7, lr}
    dbb2:	b082      	sub	sp, #8
    dbb4:	af00      	add	r7, sp, #0
    dbb6:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    dbb8:	6878      	ldr	r0, [r7, #4]
    dbba:	4b05      	ldr	r3, [pc, #20]	; (dbd0 <usb_cfg_desc_next+0x20>)
    dbbc:	4798      	blx	r3
    dbbe:	4603      	mov	r3, r0
    dbc0:	461a      	mov	r2, r3
    dbc2:	687b      	ldr	r3, [r7, #4]
    dbc4:	4413      	add	r3, r2
}
    dbc6:	4618      	mov	r0, r3
    dbc8:	3708      	adds	r7, #8
    dbca:	46bd      	mov	sp, r7
    dbcc:	bd80      	pop	{r7, pc}
    dbce:	bf00      	nop
    dbd0:	0000db91 	.word	0x0000db91

0000dbd4 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    dbd4:	b580      	push	{r7, lr}
    dbd6:	b084      	sub	sp, #16
    dbd8:	af00      	add	r7, sp, #0
    dbda:	60f8      	str	r0, [r7, #12]
    dbdc:	60b9      	str	r1, [r7, #8]
    dbde:	4613      	mov	r3, r2
    dbe0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    dbe2:	e015      	b.n	dc10 <usb_find_desc+0x3c>
		_desc_len_check();
    dbe4:	68f8      	ldr	r0, [r7, #12]
    dbe6:	4b0f      	ldr	r3, [pc, #60]	; (dc24 <usb_find_desc+0x50>)
    dbe8:	4798      	blx	r3
    dbea:	4603      	mov	r3, r0
    dbec:	2b01      	cmp	r3, #1
    dbee:	d801      	bhi.n	dbf4 <usb_find_desc+0x20>
    dbf0:	2300      	movs	r3, #0
    dbf2:	e012      	b.n	dc1a <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    dbf4:	68f8      	ldr	r0, [r7, #12]
    dbf6:	4b0c      	ldr	r3, [pc, #48]	; (dc28 <usb_find_desc+0x54>)
    dbf8:	4798      	blx	r3
    dbfa:	4603      	mov	r3, r0
    dbfc:	461a      	mov	r2, r3
    dbfe:	79fb      	ldrb	r3, [r7, #7]
    dc00:	4293      	cmp	r3, r2
    dc02:	d101      	bne.n	dc08 <usb_find_desc+0x34>
			return desc;
    dc04:	68fb      	ldr	r3, [r7, #12]
    dc06:	e008      	b.n	dc1a <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    dc08:	68f8      	ldr	r0, [r7, #12]
    dc0a:	4b08      	ldr	r3, [pc, #32]	; (dc2c <usb_find_desc+0x58>)
    dc0c:	4798      	blx	r3
    dc0e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    dc10:	68fa      	ldr	r2, [r7, #12]
    dc12:	68bb      	ldr	r3, [r7, #8]
    dc14:	429a      	cmp	r2, r3
    dc16:	d3e5      	bcc.n	dbe4 <usb_find_desc+0x10>
	}
	return NULL;
    dc18:	2300      	movs	r3, #0
}
    dc1a:	4618      	mov	r0, r3
    dc1c:	3710      	adds	r7, #16
    dc1e:	46bd      	mov	sp, r7
    dc20:	bd80      	pop	{r7, pc}
    dc22:	bf00      	nop
    dc24:	0000db3b 	.word	0x0000db3b
    dc28:	0000db53 	.word	0x0000db53
    dc2c:	0000db6d 	.word	0x0000db6d

0000dc30 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    dc30:	b580      	push	{r7, lr}
    dc32:	b082      	sub	sp, #8
    dc34:	af00      	add	r7, sp, #0
    dc36:	6078      	str	r0, [r7, #4]
    dc38:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    dc3a:	e019      	b.n	dc70 <usb_find_ep_desc+0x40>
		_desc_len_check();
    dc3c:	6878      	ldr	r0, [r7, #4]
    dc3e:	4b12      	ldr	r3, [pc, #72]	; (dc88 <usb_find_ep_desc+0x58>)
    dc40:	4798      	blx	r3
    dc42:	4603      	mov	r3, r0
    dc44:	2b01      	cmp	r3, #1
    dc46:	d801      	bhi.n	dc4c <usb_find_ep_desc+0x1c>
    dc48:	2300      	movs	r3, #0
    dc4a:	e018      	b.n	dc7e <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    dc4c:	6878      	ldr	r0, [r7, #4]
    dc4e:	4b0f      	ldr	r3, [pc, #60]	; (dc8c <usb_find_ep_desc+0x5c>)
    dc50:	4798      	blx	r3
    dc52:	4603      	mov	r3, r0
    dc54:	2b04      	cmp	r3, #4
    dc56:	d010      	beq.n	dc7a <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    dc58:	6878      	ldr	r0, [r7, #4]
    dc5a:	4b0c      	ldr	r3, [pc, #48]	; (dc8c <usb_find_ep_desc+0x5c>)
    dc5c:	4798      	blx	r3
    dc5e:	4603      	mov	r3, r0
    dc60:	2b05      	cmp	r3, #5
    dc62:	d101      	bne.n	dc68 <usb_find_ep_desc+0x38>
			return desc;
    dc64:	687b      	ldr	r3, [r7, #4]
    dc66:	e00a      	b.n	dc7e <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    dc68:	6878      	ldr	r0, [r7, #4]
    dc6a:	4b09      	ldr	r3, [pc, #36]	; (dc90 <usb_find_ep_desc+0x60>)
    dc6c:	4798      	blx	r3
    dc6e:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    dc70:	687a      	ldr	r2, [r7, #4]
    dc72:	683b      	ldr	r3, [r7, #0]
    dc74:	429a      	cmp	r2, r3
    dc76:	d3e1      	bcc.n	dc3c <usb_find_ep_desc+0xc>
    dc78:	e000      	b.n	dc7c <usb_find_ep_desc+0x4c>
			break;
    dc7a:	bf00      	nop
	}
	return NULL;
    dc7c:	2300      	movs	r3, #0
}
    dc7e:	4618      	mov	r0, r3
    dc80:	3708      	adds	r7, #8
    dc82:	46bd      	mov	sp, r7
    dc84:	bd80      	pop	{r7, pc}
    dc86:	bf00      	nop
    dc88:	0000db3b 	.word	0x0000db3b
    dc8c:	0000db53 	.word	0x0000db53
    dc90:	0000db6d 	.word	0x0000db6d

0000dc94 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    dc94:	b580      	push	{r7, lr}
    dc96:	b084      	sub	sp, #16
    dc98:	af00      	add	r7, sp, #0
    dc9a:	60f8      	str	r0, [r7, #12]
    dc9c:	60b9      	str	r1, [r7, #8]
    dc9e:	4613      	mov	r3, r2
    dca0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    dca2:	2202      	movs	r2, #2
    dca4:	68b9      	ldr	r1, [r7, #8]
    dca6:	68f8      	ldr	r0, [r7, #12]
    dca8:	4b15      	ldr	r3, [pc, #84]	; (dd00 <usb_find_cfg_desc+0x6c>)
    dcaa:	4798      	blx	r3
    dcac:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    dcae:	68fb      	ldr	r3, [r7, #12]
    dcb0:	2b00      	cmp	r3, #0
    dcb2:	d11a      	bne.n	dcea <usb_find_cfg_desc+0x56>
		return NULL;
    dcb4:	2300      	movs	r3, #0
    dcb6:	e01f      	b.n	dcf8 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    dcb8:	68f8      	ldr	r0, [r7, #12]
    dcba:	4b12      	ldr	r3, [pc, #72]	; (dd04 <usb_find_cfg_desc+0x70>)
    dcbc:	4798      	blx	r3
    dcbe:	4603      	mov	r3, r0
    dcc0:	2b01      	cmp	r3, #1
    dcc2:	d801      	bhi.n	dcc8 <usb_find_cfg_desc+0x34>
    dcc4:	2300      	movs	r3, #0
    dcc6:	e017      	b.n	dcf8 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    dcc8:	68fb      	ldr	r3, [r7, #12]
    dcca:	3301      	adds	r3, #1
    dccc:	781b      	ldrb	r3, [r3, #0]
    dcce:	2b02      	cmp	r3, #2
    dcd0:	d110      	bne.n	dcf4 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    dcd2:	68fb      	ldr	r3, [r7, #12]
    dcd4:	3305      	adds	r3, #5
    dcd6:	781b      	ldrb	r3, [r3, #0]
    dcd8:	79fa      	ldrb	r2, [r7, #7]
    dcda:	429a      	cmp	r2, r3
    dcdc:	d101      	bne.n	dce2 <usb_find_cfg_desc+0x4e>
			return desc;
    dcde:	68fb      	ldr	r3, [r7, #12]
    dce0:	e00a      	b.n	dcf8 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    dce2:	68f8      	ldr	r0, [r7, #12]
    dce4:	4b08      	ldr	r3, [pc, #32]	; (dd08 <usb_find_cfg_desc+0x74>)
    dce6:	4798      	blx	r3
    dce8:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    dcea:	68fa      	ldr	r2, [r7, #12]
    dcec:	68bb      	ldr	r3, [r7, #8]
    dcee:	429a      	cmp	r2, r3
    dcf0:	d3e2      	bcc.n	dcb8 <usb_find_cfg_desc+0x24>
    dcf2:	e000      	b.n	dcf6 <usb_find_cfg_desc+0x62>
			break;
    dcf4:	bf00      	nop
	}
	return NULL;
    dcf6:	2300      	movs	r3, #0
}
    dcf8:	4618      	mov	r0, r3
    dcfa:	3710      	adds	r7, #16
    dcfc:	46bd      	mov	sp, r7
    dcfe:	bd80      	pop	{r7, pc}
    dd00:	0000dbd5 	.word	0x0000dbd5
    dd04:	0000db3b 	.word	0x0000db3b
    dd08:	0000dbb1 	.word	0x0000dbb1

0000dd0c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    dd0c:	b580      	push	{r7, lr}
    dd0e:	b086      	sub	sp, #24
    dd10:	af00      	add	r7, sp, #0
    dd12:	60f8      	str	r0, [r7, #12]
    dd14:	60b9      	str	r1, [r7, #8]
    dd16:	4613      	mov	r3, r2
    dd18:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    dd1a:	2300      	movs	r3, #0
    dd1c:	75fb      	strb	r3, [r7, #23]
    dd1e:	e020      	b.n	dd62 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    dd20:	2203      	movs	r2, #3
    dd22:	68b9      	ldr	r1, [r7, #8]
    dd24:	68f8      	ldr	r0, [r7, #12]
    dd26:	4b13      	ldr	r3, [pc, #76]	; (dd74 <usb_find_str_desc+0x68>)
    dd28:	4798      	blx	r3
    dd2a:	60f8      	str	r0, [r7, #12]
		if (desc) {
    dd2c:	68fb      	ldr	r3, [r7, #12]
    dd2e:	2b00      	cmp	r3, #0
    dd30:	d015      	beq.n	dd5e <usb_find_str_desc+0x52>
			_desc_len_check();
    dd32:	68f8      	ldr	r0, [r7, #12]
    dd34:	4b10      	ldr	r3, [pc, #64]	; (dd78 <usb_find_str_desc+0x6c>)
    dd36:	4798      	blx	r3
    dd38:	4603      	mov	r3, r0
    dd3a:	2b01      	cmp	r3, #1
    dd3c:	d801      	bhi.n	dd42 <usb_find_str_desc+0x36>
    dd3e:	2300      	movs	r3, #0
    dd40:	e014      	b.n	dd6c <usb_find_str_desc+0x60>
			if (i == str_index) {
    dd42:	7dfa      	ldrb	r2, [r7, #23]
    dd44:	79fb      	ldrb	r3, [r7, #7]
    dd46:	429a      	cmp	r2, r3
    dd48:	d101      	bne.n	dd4e <usb_find_str_desc+0x42>
				return desc;
    dd4a:	68fb      	ldr	r3, [r7, #12]
    dd4c:	e00e      	b.n	dd6c <usb_find_str_desc+0x60>
			}
			i++;
    dd4e:	7dfb      	ldrb	r3, [r7, #23]
    dd50:	3301      	adds	r3, #1
    dd52:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    dd54:	68f8      	ldr	r0, [r7, #12]
    dd56:	4b09      	ldr	r3, [pc, #36]	; (dd7c <usb_find_str_desc+0x70>)
    dd58:	4798      	blx	r3
    dd5a:	60f8      	str	r0, [r7, #12]
    dd5c:	e001      	b.n	dd62 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    dd5e:	2300      	movs	r3, #0
    dd60:	e004      	b.n	dd6c <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    dd62:	68fa      	ldr	r2, [r7, #12]
    dd64:	68bb      	ldr	r3, [r7, #8]
    dd66:	429a      	cmp	r2, r3
    dd68:	d3da      	bcc.n	dd20 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    dd6a:	2300      	movs	r3, #0
}
    dd6c:	4618      	mov	r0, r3
    dd6e:	3718      	adds	r7, #24
    dd70:	46bd      	mov	sp, r7
    dd72:	bd80      	pop	{r7, pc}
    dd74:	0000dbd5 	.word	0x0000dbd5
    dd78:	0000db3b 	.word	0x0000db3b
    dd7c:	0000db6d 	.word	0x0000db6d

0000dd80 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:

// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    dd80:	b480      	push	{r7}
    dd82:	b083      	sub	sp, #12
    dd84:	af00      	add	r7, sp, #0
    dd86:	6078      	str	r0, [r7, #4]
    dd88:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    dd8a:	687b      	ldr	r3, [r7, #4]
    dd8c:	683a      	ldr	r2, [r7, #0]
    dd8e:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    dd90:	687b      	ldr	r3, [r7, #4]
    dd92:	4618      	mov	r0, r3
    dd94:	370c      	adds	r7, #12
    dd96:	46bd      	mov	sp, r7
    dd98:	bc80      	pop	{r7}
    dd9a:	4770      	bx	lr

0000dd9c <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    dd9c:	b480      	push	{r7}
    dd9e:	b083      	sub	sp, #12
    dda0:	af00      	add	r7, sp, #0
    dda2:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    dda4:	687b      	ldr	r3, [r7, #4]
    dda6:	4618      	mov	r0, r3
    dda8:	370c      	adds	r7, #12
    ddaa:	46bd      	mov	sp, r7
    ddac:	bc80      	pop	{r7}
    ddae:	4770      	bx	lr

0000ddb0 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    ddb0:	b580      	push	{r7, lr}
    ddb2:	b084      	sub	sp, #16
    ddb4:	af00      	add	r7, sp, #0
    ddb6:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    ddb8:	687b      	ldr	r3, [r7, #4]
    ddba:	4a14      	ldr	r2, [pc, #80]	; (de0c <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    ddbc:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    ddbe:	687b      	ldr	r3, [r7, #4]
    ddc0:	4a12      	ldr	r2, [pc, #72]	; (de0c <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    ddc2:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    ddc4:	687b      	ldr	r3, [r7, #4]
    ddc6:	691a      	ldr	r2, [r3, #16]
    ddc8:	687b      	ldr	r3, [r7, #4]
    ddca:	330c      	adds	r3, #12
    ddcc:	4619      	mov	r1, r3
    ddce:	4610      	mov	r0, r2
    ddd0:	4b0f      	ldr	r3, [pc, #60]	; (de10 <_ZN14I2C_Sync_Class4InitEv+0x60>)
    ddd2:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    ddd4:	687b      	ldr	r3, [r7, #4]
    ddd6:	691b      	ldr	r3, [r3, #16]
    ddd8:	4618      	mov	r0, r3
    ddda:	4b0e      	ldr	r3, [pc, #56]	; (de14 <_ZN14I2C_Sync_Class4InitEv+0x64>)
    dddc:	4798      	blx	r3
    ddde:	4603      	mov	r3, r0
    dde0:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
    dde2:	7bfb      	ldrb	r3, [r7, #15]
    dde4:	2b00      	cmp	r3, #0
    dde6:	bf0c      	ite	eq
    dde8:	2301      	moveq	r3, #1
    ddea:	2300      	movne	r3, #0
    ddec:	b2da      	uxtb	r2, r3
    ddee:	687b      	ldr	r3, [r7, #4]
    ddf0:	725a      	strb	r2, [r3, #9]
	initiated=isOK;
    ddf2:	687b      	ldr	r3, [r7, #4]
    ddf4:	7a5b      	ldrb	r3, [r3, #9]
    ddf6:	b2da      	uxtb	r2, r3
    ddf8:	687b      	ldr	r3, [r7, #4]
    ddfa:	721a      	strb	r2, [r3, #8]
	return isOK;
    ddfc:	687b      	ldr	r3, [r7, #4]
    ddfe:	7a5b      	ldrb	r3, [r3, #9]
    de00:	b2db      	uxtb	r3, r3
	
}
    de02:	4618      	mov	r0, r3
    de04:	3710      	adds	r7, #16
    de06:	46bd      	mov	sp, r7
    de08:	bd80      	pop	{r7, pc}
    de0a:	bf00      	nop
    de0c:	200010a4 	.word	0x200010a4
    de10:	00002a9b 	.word	0x00002a9b
    de14:	00002a41 	.word	0x00002a41

0000de18 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    de18:	b580      	push	{r7, lr}
    de1a:	b082      	sub	sp, #8
    de1c:	af00      	add	r7, sp, #0
    de1e:	6078      	str	r0, [r7, #4]
    de20:	460b      	mov	r3, r1
    de22:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    de24:	687b      	ldr	r3, [r7, #4]
    de26:	691b      	ldr	r3, [r3, #16]
    de28:	78fa      	ldrb	r2, [r7, #3]
    de2a:	b211      	sxth	r1, r2
    de2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    de30:	4618      	mov	r0, r3
    de32:	4b03      	ldr	r3, [pc, #12]	; (de40 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    de34:	4798      	blx	r3
    de36:	4603      	mov	r3, r0
}
    de38:	4618      	mov	r0, r3
    de3a:	3708      	adds	r7, #8
    de3c:	46bd      	mov	sp, r7
    de3e:	bd80      	pop	{r7, pc}
    de40:	00002a61 	.word	0x00002a61

0000de44 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    de44:	b580      	push	{r7, lr}
    de46:	b086      	sub	sp, #24
    de48:	af00      	add	r7, sp, #0
    de4a:	60f8      	str	r0, [r7, #12]
    de4c:	60b9      	str	r1, [r7, #8]
    de4e:	4613      	mov	r3, r2
    de50:	80fb      	strh	r3, [r7, #6]
	//Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    de52:	68fb      	ldr	r3, [r7, #12]
    de54:	68db      	ldr	r3, [r3, #12]
    de56:	88fa      	ldrh	r2, [r7, #6]
    de58:	68b9      	ldr	r1, [r7, #8]
    de5a:	4618      	mov	r0, r3
    de5c:	4b03      	ldr	r3, [pc, #12]	; (de6c <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    de5e:	4798      	blx	r3
    de60:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    de62:	697b      	ldr	r3, [r7, #20]
}
    de64:	4618      	mov	r0, r3
    de66:	3718      	adds	r7, #24
    de68:	46bd      	mov	sp, r7
    de6a:	bd80      	pop	{r7, pc}
    de6c:	0000fb21 	.word	0x0000fb21

0000de70 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    de70:	b580      	push	{r7, lr}
    de72:	b086      	sub	sp, #24
    de74:	af00      	add	r7, sp, #0
    de76:	60f8      	str	r0, [r7, #12]
    de78:	60b9      	str	r1, [r7, #8]
    de7a:	4613      	mov	r3, r2
    de7c:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    de7e:	68fb      	ldr	r3, [r7, #12]
    de80:	68db      	ldr	r3, [r3, #12]
    de82:	88fa      	ldrh	r2, [r7, #6]
    de84:	68b9      	ldr	r1, [r7, #8]
    de86:	4618      	mov	r0, r3
    de88:	4b03      	ldr	r3, [pc, #12]	; (de98 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    de8a:	4798      	blx	r3
    de8c:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    de8e:	697b      	ldr	r3, [r7, #20]
}
    de90:	4618      	mov	r0, r3
    de92:	3718      	adds	r7, #24
    de94:	46bd      	mov	sp, r7
    de96:	bd80      	pop	{r7, pc}
    de98:	0000fb71 	.word	0x0000fb71

0000de9c <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    de9c:	b480      	push	{r7}
    de9e:	b083      	sub	sp, #12
    dea0:	af00      	add	r7, sp, #0
    dea2:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    dea4:	687b      	ldr	r3, [r7, #4]
    dea6:	4618      	mov	r0, r3
    dea8:	370c      	adds	r7, #12
    deaa:	46bd      	mov	sp, r7
    deac:	bc80      	pop	{r7}
    deae:	4770      	bx	lr

0000deb0 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    deb0:	b480      	push	{r7}
    deb2:	b083      	sub	sp, #12
    deb4:	af00      	add	r7, sp, #0
    deb6:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    deb8:	687b      	ldr	r3, [r7, #4]
    deba:	4618      	mov	r0, r3
    debc:	370c      	adds	r7, #12
    debe:	46bd      	mov	sp, r7
    dec0:	bc80      	pop	{r7}
    dec2:	4770      	bx	lr

0000dec4 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
	//i2cClass=i2c;
	isOK=i2cClass->isOK;
	return isOK;
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    dec4:	b480      	push	{r7}
    dec6:	b085      	sub	sp, #20
    dec8:	af00      	add	r7, sp, #0
    deca:	60f8      	str	r0, [r7, #12]
    decc:	460b      	mov	r3, r1
    dece:	607a      	str	r2, [r7, #4]
    ded0:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    ded2:	687b      	ldr	r3, [r7, #4]
    ded4:	681a      	ldr	r2, [r3, #0]
    ded6:	68fb      	ldr	r3, [r7, #12]
    ded8:	615a      	str	r2, [r3, #20]
	rxBuffer=i2c->rxBuffer;
    deda:	687b      	ldr	r3, [r7, #4]
    dedc:	685a      	ldr	r2, [r3, #4]
    dede:	68fb      	ldr	r3, [r7, #12]
    dee0:	619a      	str	r2, [r3, #24]
	i2cAddress=addr;
    dee2:	68fb      	ldr	r3, [r7, #12]
    dee4:	7afa      	ldrb	r2, [r7, #11]
    dee6:	731a      	strb	r2, [r3, #12]
	i2cClass=i2c;
    dee8:	68fb      	ldr	r3, [r7, #12]
    deea:	687a      	ldr	r2, [r7, #4]
    deec:	611a      	str	r2, [r3, #16]
	isOK=i2cClass->isOK;
    deee:	68fb      	ldr	r3, [r7, #12]
    def0:	691b      	ldr	r3, [r3, #16]
    def2:	7a5b      	ldrb	r3, [r3, #9]
    def4:	b2da      	uxtb	r2, r3
    def6:	68fb      	ldr	r3, [r7, #12]
    def8:	729a      	strb	r2, [r3, #10]
	return isOK;
    defa:	68fb      	ldr	r3, [r7, #12]
    defc:	7a9b      	ldrb	r3, [r3, #10]
    defe:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    df00:	4618      	mov	r0, r3
    df02:	3714      	adds	r7, #20
    df04:	46bd      	mov	sp, r7
    df06:	bc80      	pop	{r7}
    df08:	4770      	bx	lr

0000df0a <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    df0a:	b480      	push	{r7}
    df0c:	b083      	sub	sp, #12
    df0e:	af00      	add	r7, sp, #0
    df10:	6078      	str	r0, [r7, #4]
    df12:	460b      	mov	r3, r1
    df14:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    df16:	78fb      	ldrb	r3, [r7, #3]
    df18:	f003 0307 	and.w	r3, r3, #7
    df1c:	b2db      	uxtb	r3, r3
}
    df1e:	4618      	mov	r0, r3
    df20:	370c      	adds	r7, #12
    df22:	46bd      	mov	sp, r7
    df24:	bc80      	pop	{r7}
    df26:	4770      	bx	lr

0000df28 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    df28:	b480      	push	{r7}
    df2a:	b083      	sub	sp, #12
    df2c:	af00      	add	r7, sp, #0
    df2e:	6078      	str	r0, [r7, #4]
    df30:	4608      	mov	r0, r1
    df32:	4611      	mov	r1, r2
    df34:	461a      	mov	r2, r3
    df36:	4603      	mov	r3, r0
    df38:	70fb      	strb	r3, [r7, #3]
    df3a:	460b      	mov	r3, r1
    df3c:	70bb      	strb	r3, [r7, #2]
    df3e:	4613      	mov	r3, r2
    df40:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    df42:	78fb      	ldrb	r3, [r7, #3]
    df44:	2b07      	cmp	r3, #7
    df46:	dc01      	bgt.n	df4c <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    df48:	78bb      	ldrb	r3, [r7, #2]
    df4a:	e000      	b.n	df4e <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    df4c:	787b      	ldrb	r3, [r7, #1]
}
    df4e:	4618      	mov	r0, r3
    df50:	370c      	adds	r7, #12
    df52:	46bd      	mov	sp, r7
    df54:	bc80      	pop	{r7}
    df56:	4770      	bx	lr

0000df58 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    df58:	b580      	push	{r7, lr}
    df5a:	b082      	sub	sp, #8
    df5c:	af00      	add	r7, sp, #0
    df5e:	6078      	str	r0, [r7, #4]
    df60:	460b      	mov	r3, r1
    df62:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    df64:	687b      	ldr	r3, [r7, #4]
    df66:	691a      	ldr	r2, [r3, #16]
    df68:	687b      	ldr	r3, [r7, #4]
    df6a:	7b1b      	ldrb	r3, [r3, #12]
    df6c:	4619      	mov	r1, r3
    df6e:	4610      	mov	r0, r2
    df70:	4b0b      	ldr	r3, [pc, #44]	; (dfa0 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    df72:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    df74:	687b      	ldr	r3, [r7, #4]
    df76:	691b      	ldr	r3, [r3, #16]
    df78:	1cf9      	adds	r1, r7, #3
    df7a:	2201      	movs	r2, #1
    df7c:	4618      	mov	r0, r3
    df7e:	4b09      	ldr	r3, [pc, #36]	; (dfa4 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    df80:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    df82:	687b      	ldr	r3, [r7, #4]
    df84:	6918      	ldr	r0, [r3, #16]
    df86:	687b      	ldr	r3, [r7, #4]
    df88:	3304      	adds	r3, #4
    df8a:	2201      	movs	r2, #1
    df8c:	4619      	mov	r1, r3
    df8e:	4b06      	ldr	r3, [pc, #24]	; (dfa8 <_ZN14MCP23008_Class12readRegisterEh+0x50>)
    df90:	4798      	blx	r3

	return registerValue;
    df92:	687b      	ldr	r3, [r7, #4]
    df94:	791b      	ldrb	r3, [r3, #4]
}
    df96:	4618      	mov	r0, r3
    df98:	3708      	adds	r7, #8
    df9a:	46bd      	mov	sp, r7
    df9c:	bd80      	pop	{r7, pc}
    df9e:	bf00      	nop
    dfa0:	0000de19 	.word	0x0000de19
    dfa4:	0000de45 	.word	0x0000de45
    dfa8:	0000de71 	.word	0x0000de71

0000dfac <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    dfac:	b580      	push	{r7, lr}
    dfae:	b082      	sub	sp, #8
    dfb0:	af00      	add	r7, sp, #0
    dfb2:	6078      	str	r0, [r7, #4]
	i2cClass->SetSlaveAddress(i2cAddress);
    dfb4:	687b      	ldr	r3, [r7, #4]
    dfb6:	691a      	ldr	r2, [r3, #16]
    dfb8:	687b      	ldr	r3, [r7, #4]
    dfba:	7b1b      	ldrb	r3, [r3, #12]
    dfbc:	4619      	mov	r1, r3
    dfbe:	4610      	mov	r0, r2
    dfc0:	4b05      	ldr	r3, [pc, #20]	; (dfd8 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x2c>)
    dfc2:	4798      	blx	r3
	return readRegister(MCP23008_GPIOA);
    dfc4:	2109      	movs	r1, #9
    dfc6:	6878      	ldr	r0, [r7, #4]
    dfc8:	4b04      	ldr	r3, [pc, #16]	; (dfdc <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    dfca:	4798      	blx	r3
    dfcc:	4603      	mov	r3, r0
}
    dfce:	4618      	mov	r0, r3
    dfd0:	3708      	adds	r7, #8
    dfd2:	46bd      	mov	sp, r7
    dfd4:	bd80      	pop	{r7, pc}
    dfd6:	bf00      	nop
    dfd8:	0000de19 	.word	0x0000de19
    dfdc:	0000df59 	.word	0x0000df59

0000dfe0 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    dfe0:	b580      	push	{r7, lr}
    dfe2:	b084      	sub	sp, #16
    dfe4:	af00      	add	r7, sp, #0
    dfe6:	6078      	str	r0, [r7, #4]
    dfe8:	460b      	mov	r3, r1
    dfea:	70fb      	strb	r3, [r7, #3]
    dfec:	4613      	mov	r3, r2
    dfee:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    dff0:	687b      	ldr	r3, [r7, #4]
    dff2:	691a      	ldr	r2, [r3, #16]
    dff4:	687b      	ldr	r3, [r7, #4]
    dff6:	7b1b      	ldrb	r3, [r3, #12]
    dff8:	4619      	mov	r1, r3
    dffa:	4610      	mov	r0, r2
    dffc:	4b09      	ldr	r3, [pc, #36]	; (e024 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    dffe:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    e000:	78fb      	ldrb	r3, [r7, #3]
    e002:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    e004:	78bb      	ldrb	r3, [r7, #2]
    e006:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    e008:	687b      	ldr	r3, [r7, #4]
    e00a:	691b      	ldr	r3, [r3, #16]
    e00c:	f107 010c 	add.w	r1, r7, #12
    e010:	2202      	movs	r2, #2
    e012:	4618      	mov	r0, r3
    e014:	4b04      	ldr	r3, [pc, #16]	; (e028 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    e016:	4798      	blx	r3
    e018:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    e01a:	4618      	mov	r0, r3
    e01c:	3710      	adds	r7, #16
    e01e:	46bd      	mov	sp, r7
    e020:	bd80      	pop	{r7, pc}
    e022:	bf00      	nop
    e024:	0000de19 	.word	0x0000de19
    e028:	0000de45 	.word	0x0000de45

0000e02c <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
    e02c:	b580      	push	{r7, lr}
    e02e:	b082      	sub	sp, #8
    e030:	af00      	add	r7, sp, #0
    e032:	6078      	str	r0, [r7, #4]
    e034:	460b      	mov	r3, r1
    e036:	70fb      	strb	r3, [r7, #3]
	i2cClass->SetSlaveAddress(i2cAddress);
    e038:	687b      	ldr	r3, [r7, #4]
    e03a:	691a      	ldr	r2, [r3, #16]
    e03c:	687b      	ldr	r3, [r7, #4]
    e03e:	7b1b      	ldrb	r3, [r3, #12]
    e040:	4619      	mov	r1, r3
    e042:	4610      	mov	r0, r2
    e044:	4b06      	ldr	r3, [pc, #24]	; (e060 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
    e046:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
    e048:	78fb      	ldrb	r3, [r7, #3]
    e04a:	461a      	mov	r2, r3
    e04c:	2109      	movs	r1, #9
    e04e:	6878      	ldr	r0, [r7, #4]
    e050:	4b04      	ldr	r3, [pc, #16]	; (e064 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
    e052:	4798      	blx	r3
	return v;
    e054:	78fb      	ldrb	r3, [r7, #3]
}
    e056:	4618      	mov	r0, r3
    e058:	3708      	adds	r7, #8
    e05a:	46bd      	mov	sp, r7
    e05c:	bd80      	pop	{r7, pc}
    e05e:	bf00      	nop
    e060:	0000de19 	.word	0x0000de19
    e064:	0000dfe1 	.word	0x0000dfe1

0000e068 <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
    e068:	b580      	push	{r7, lr}
    e06a:	b084      	sub	sp, #16
    e06c:	af00      	add	r7, sp, #0
    e06e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    e070:	2300      	movs	r3, #0
    e072:	73fb      	strb	r3, [r7, #15]
    e074:	7bfb      	ldrb	r3, [r7, #15]
    e076:	2b07      	cmp	r3, #7
    e078:	dc0f      	bgt.n	e09a <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    e07a:	7bfb      	ldrb	r3, [r7, #15]
    e07c:	2201      	movs	r2, #1
    e07e:	4619      	mov	r1, r3
    e080:	6878      	ldr	r0, [r7, #4]
    e082:	4b08      	ldr	r3, [pc, #32]	; (e0a4 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    e084:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    e086:	7bfb      	ldrb	r3, [r7, #15]
    e088:	2201      	movs	r2, #1
    e08a:	4619      	mov	r1, r3
    e08c:	6878      	ldr	r0, [r7, #4]
    e08e:	4b06      	ldr	r3, [pc, #24]	; (e0a8 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    e090:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    e092:	7bfb      	ldrb	r3, [r7, #15]
    e094:	3301      	adds	r3, #1
    e096:	73fb      	strb	r3, [r7, #15]
    e098:	e7ec      	b.n	e074 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    e09a:	bf00      	nop
    e09c:	3710      	adds	r7, #16
    e09e:	46bd      	mov	sp, r7
    e0a0:	bd80      	pop	{r7, pc}
    e0a2:	bf00      	nop
    e0a4:	0000e1e1 	.word	0x0000e1e1
    e0a8:	0000e2c5 	.word	0x0000e2c5

0000e0ac <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
    e0ac:	b580      	push	{r7, lr}
    e0ae:	b084      	sub	sp, #16
    e0b0:	af00      	add	r7, sp, #0
    e0b2:	6078      	str	r0, [r7, #4]
    e0b4:	460b      	mov	r3, r1
    e0b6:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
    e0b8:	78fb      	ldrb	r3, [r7, #3]
    e0ba:	2b00      	cmp	r3, #0
    e0bc:	dd23      	ble.n	e106 <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
    e0be:	2300      	movs	r3, #0
    e0c0:	73fb      	strb	r3, [r7, #15]
    e0c2:	7bfb      	ldrb	r3, [r7, #15]
    e0c4:	2b07      	cmp	r3, #7
    e0c6:	dc21      	bgt.n	e10c <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
    e0c8:	78fa      	ldrb	r2, [r7, #3]
    e0ca:	7bfb      	ldrb	r3, [r7, #15]
    e0cc:	fa42 f303 	asr.w	r3, r2, r3
    e0d0:	f003 0301 	and.w	r3, r3, #1
    e0d4:	2b00      	cmp	r3, #0
    e0d6:	d00c      	beq.n	e0f2 <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
    e0d8:	7bfb      	ldrb	r3, [r7, #15]
    e0da:	2201      	movs	r2, #1
    e0dc:	4619      	mov	r1, r3
    e0de:	6878      	ldr	r0, [r7, #4]
    e0e0:	4b0c      	ldr	r3, [pc, #48]	; (e114 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    e0e2:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
    e0e4:	7bfb      	ldrb	r3, [r7, #15]
    e0e6:	2201      	movs	r2, #1
    e0e8:	4619      	mov	r1, r3
    e0ea:	6878      	ldr	r0, [r7, #4]
    e0ec:	4b0a      	ldr	r3, [pc, #40]	; (e118 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
    e0ee:	4798      	blx	r3
    e0f0:	e005      	b.n	e0fe <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
    e0f2:	7bfb      	ldrb	r3, [r7, #15]
    e0f4:	2200      	movs	r2, #0
    e0f6:	4619      	mov	r1, r3
    e0f8:	6878      	ldr	r0, [r7, #4]
    e0fa:	4b06      	ldr	r3, [pc, #24]	; (e114 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    e0fc:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
    e0fe:	7bfb      	ldrb	r3, [r7, #15]
    e100:	3301      	adds	r3, #1
    e102:	73fb      	strb	r3, [r7, #15]
    e104:	e7dd      	b.n	e0c2 <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
    e106:	6878      	ldr	r0, [r7, #4]
    e108:	4b04      	ldr	r3, [pc, #16]	; (e11c <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
    e10a:	4798      	blx	r3
	}
	
}
    e10c:	bf00      	nop
    e10e:	3710      	adds	r7, #16
    e110:	46bd      	mov	sp, r7
    e112:	bd80      	pop	{r7, pc}
    e114:	0000e1e1 	.word	0x0000e1e1
    e118:	0000e2c5 	.word	0x0000e2c5
    e11c:	0000e121 	.word	0x0000e121

0000e120 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
    e120:	b580      	push	{r7, lr}
    e122:	b084      	sub	sp, #16
    e124:	af00      	add	r7, sp, #0
    e126:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    e128:	2300      	movs	r3, #0
    e12a:	73fb      	strb	r3, [r7, #15]
    e12c:	7bfb      	ldrb	r3, [r7, #15]
    e12e:	2b07      	cmp	r3, #7
    e130:	dc09      	bgt.n	e146 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    e132:	7bfb      	ldrb	r3, [r7, #15]
    e134:	2200      	movs	r2, #0
    e136:	4619      	mov	r1, r3
    e138:	6878      	ldr	r0, [r7, #4]
    e13a:	4b05      	ldr	r3, [pc, #20]	; (e150 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    e13c:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    e13e:	7bfb      	ldrb	r3, [r7, #15]
    e140:	3301      	adds	r3, #1
    e142:	73fb      	strb	r3, [r7, #15]
    e144:	e7f2      	b.n	e12c <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    e146:	bf00      	nop
    e148:	3710      	adds	r7, #16
    e14a:	46bd      	mov	sp, r7
    e14c:	bd80      	pop	{r7, pc}
    e14e:	bf00      	nop
    e150:	0000e1e1 	.word	0x0000e1e1

0000e154 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    e154:	b580      	push	{r7, lr}
    e156:	b084      	sub	sp, #16
    e158:	af00      	add	r7, sp, #0
    e15a:	6078      	str	r0, [r7, #4]
    e15c:	4608      	mov	r0, r1
    e15e:	4611      	mov	r1, r2
    e160:	461a      	mov	r2, r3
    e162:	4603      	mov	r3, r0
    e164:	70fb      	strb	r3, [r7, #3]
    e166:	460b      	mov	r3, r1
    e168:	70bb      	strb	r3, [r7, #2]
    e16a:	4613      	mov	r3, r2
    e16c:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    e16e:	787b      	ldrb	r3, [r7, #1]
    e170:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    e172:	78fb      	ldrb	r3, [r7, #3]
    e174:	4619      	mov	r1, r3
    e176:	6878      	ldr	r0, [r7, #4]
    e178:	4b16      	ldr	r3, [pc, #88]	; (e1d4 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    e17a:	4798      	blx	r3
    e17c:	4603      	mov	r3, r0
    e17e:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    e180:	7bfb      	ldrb	r3, [r7, #15]
    e182:	4619      	mov	r1, r3
    e184:	6878      	ldr	r0, [r7, #4]
    e186:	4b14      	ldr	r3, [pc, #80]	; (e1d8 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    e188:	4798      	blx	r3
    e18a:	4603      	mov	r3, r0
    e18c:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    e18e:	78bb      	ldrb	r3, [r7, #2]
    e190:	2b00      	cmp	r3, #0
    e192:	d009      	beq.n	e1a8 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    e194:	7bba      	ldrb	r2, [r7, #14]
    e196:	7b7b      	ldrb	r3, [r7, #13]
    e198:	4619      	mov	r1, r3
    e19a:	2301      	movs	r3, #1
    e19c:	408b      	lsls	r3, r1
    e19e:	b2db      	uxtb	r3, r3
    e1a0:	4313      	orrs	r3, r2
    e1a2:	b2db      	uxtb	r3, r3
    e1a4:	73bb      	strb	r3, [r7, #14]
    e1a6:	e00a      	b.n	e1be <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    e1a8:	7bba      	ldrb	r2, [r7, #14]
    e1aa:	7b7b      	ldrb	r3, [r7, #13]
    e1ac:	4619      	mov	r1, r3
    e1ae:	2301      	movs	r3, #1
    e1b0:	408b      	lsls	r3, r1
    e1b2:	b2db      	uxtb	r3, r3
    e1b4:	43db      	mvns	r3, r3
    e1b6:	b2db      	uxtb	r3, r3
    e1b8:	4013      	ands	r3, r2
    e1ba:	b2db      	uxtb	r3, r3
    e1bc:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    e1be:	7bba      	ldrb	r2, [r7, #14]
    e1c0:	7bfb      	ldrb	r3, [r7, #15]
    e1c2:	4619      	mov	r1, r3
    e1c4:	6878      	ldr	r0, [r7, #4]
    e1c6:	4b05      	ldr	r3, [pc, #20]	; (e1dc <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    e1c8:	4798      	blx	r3
}
    e1ca:	bf00      	nop
    e1cc:	3710      	adds	r7, #16
    e1ce:	46bd      	mov	sp, r7
    e1d0:	bd80      	pop	{r7, pc}
    e1d2:	bf00      	nop
    e1d4:	0000df0b 	.word	0x0000df0b
    e1d8:	0000df59 	.word	0x0000df59
    e1dc:	0000dfe1 	.word	0x0000dfe1

0000e1e0 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    e1e0:	b590      	push	{r4, r7, lr}
    e1e2:	b085      	sub	sp, #20
    e1e4:	af02      	add	r7, sp, #8
    e1e6:	6078      	str	r0, [r7, #4]
    e1e8:	460b      	mov	r3, r1
    e1ea:	70fb      	strb	r3, [r7, #3]
    e1ec:	4613      	mov	r3, r2
    e1ee:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    e1f0:	78bb      	ldrb	r3, [r7, #2]
    e1f2:	2b01      	cmp	r3, #1
    e1f4:	bf0c      	ite	eq
    e1f6:	2301      	moveq	r3, #1
    e1f8:	2300      	movne	r3, #0
    e1fa:	b2db      	uxtb	r3, r3
    e1fc:	461a      	mov	r2, r3
    e1fe:	78f9      	ldrb	r1, [r7, #3]
    e200:	2300      	movs	r3, #0
    e202:	9300      	str	r3, [sp, #0]
    e204:	2300      	movs	r3, #0
    e206:	6878      	ldr	r0, [r7, #4]
    e208:	4c02      	ldr	r4, [pc, #8]	; (e214 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    e20a:	47a0      	blx	r4
}
    e20c:	bf00      	nop
    e20e:	370c      	adds	r7, #12
    e210:	46bd      	mov	sp, r7
    e212:	bd90      	pop	{r4, r7, pc}
    e214:	0000e155 	.word	0x0000e155

0000e218 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
    e218:	b590      	push	{r4, r7, lr}
    e21a:	b085      	sub	sp, #20
    e21c:	af00      	add	r7, sp, #0
    e21e:	6078      	str	r0, [r7, #4]
    e220:	460b      	mov	r3, r1
    e222:	70fb      	strb	r3, [r7, #3]
    e224:	4613      	mov	r3, r2
    e226:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
    e228:	78fb      	ldrb	r3, [r7, #3]
    e22a:	4619      	mov	r1, r3
    e22c:	6878      	ldr	r0, [r7, #4]
    e22e:	4b21      	ldr	r3, [pc, #132]	; (e2b4 <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
    e230:	4798      	blx	r3
    e232:	4603      	mov	r3, r0
    e234:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
    e236:	78f9      	ldrb	r1, [r7, #3]
    e238:	230a      	movs	r3, #10
    e23a:	220a      	movs	r2, #10
    e23c:	6878      	ldr	r0, [r7, #4]
    e23e:	4c1e      	ldr	r4, [pc, #120]	; (e2b8 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    e240:	47a0      	blx	r4
    e242:	4603      	mov	r3, r0
    e244:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
    e246:	7bfb      	ldrb	r3, [r7, #15]
    e248:	4619      	mov	r1, r3
    e24a:	6878      	ldr	r0, [r7, #4]
    e24c:	4b1b      	ldr	r3, [pc, #108]	; (e2bc <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
    e24e:	4798      	blx	r3
    e250:	4603      	mov	r3, r0
    e252:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
    e254:	78bb      	ldrb	r3, [r7, #2]
    e256:	2b00      	cmp	r3, #0
    e258:	d009      	beq.n	e26e <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
    e25a:	7bba      	ldrb	r2, [r7, #14]
    e25c:	7b7b      	ldrb	r3, [r7, #13]
    e25e:	4619      	mov	r1, r3
    e260:	2301      	movs	r3, #1
    e262:	408b      	lsls	r3, r1
    e264:	b2db      	uxtb	r3, r3
    e266:	4313      	orrs	r3, r2
    e268:	b2db      	uxtb	r3, r3
    e26a:	73bb      	strb	r3, [r7, #14]
    e26c:	e00a      	b.n	e284 <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
    e26e:	7bba      	ldrb	r2, [r7, #14]
    e270:	7b7b      	ldrb	r3, [r7, #13]
    e272:	4619      	mov	r1, r3
    e274:	2301      	movs	r3, #1
    e276:	408b      	lsls	r3, r1
    e278:	b2db      	uxtb	r3, r3
    e27a:	43db      	mvns	r3, r3
    e27c:	b2db      	uxtb	r3, r3
    e27e:	4013      	ands	r3, r2
    e280:	b2db      	uxtb	r3, r3
    e282:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
    e284:	78f9      	ldrb	r1, [r7, #3]
    e286:	2309      	movs	r3, #9
    e288:	2209      	movs	r2, #9
    e28a:	6878      	ldr	r0, [r7, #4]
    e28c:	4c0a      	ldr	r4, [pc, #40]	; (e2b8 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    e28e:	47a0      	blx	r4
    e290:	4603      	mov	r3, r0
    e292:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
    e294:	7bba      	ldrb	r2, [r7, #14]
    e296:	7bfb      	ldrb	r3, [r7, #15]
    e298:	4619      	mov	r1, r3
    e29a:	6878      	ldr	r0, [r7, #4]
    e29c:	4b08      	ldr	r3, [pc, #32]	; (e2c0 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
    e29e:	4798      	blx	r3
    e2a0:	4603      	mov	r3, r0
    e2a2:	2b00      	cmp	r3, #0
    e2a4:	bf0c      	ite	eq
    e2a6:	2301      	moveq	r3, #1
    e2a8:	2300      	movne	r3, #0
    e2aa:	b2db      	uxtb	r3, r3
}
    e2ac:	4618      	mov	r0, r3
    e2ae:	3714      	adds	r7, #20
    e2b0:	46bd      	mov	sp, r7
    e2b2:	bd90      	pop	{r4, r7, pc}
    e2b4:	0000df0b 	.word	0x0000df0b
    e2b8:	0000df29 	.word	0x0000df29
    e2bc:	0000df59 	.word	0x0000df59
    e2c0:	0000dfe1 	.word	0x0000dfe1

0000e2c4 <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    e2c4:	b590      	push	{r4, r7, lr}
    e2c6:	b085      	sub	sp, #20
    e2c8:	af02      	add	r7, sp, #8
    e2ca:	6078      	str	r0, [r7, #4]
    e2cc:	460b      	mov	r3, r1
    e2ce:	70fb      	strb	r3, [r7, #3]
    e2d0:	4613      	mov	r3, r2
    e2d2:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    e2d4:	78ba      	ldrb	r2, [r7, #2]
    e2d6:	78f9      	ldrb	r1, [r7, #3]
    e2d8:	2306      	movs	r3, #6
    e2da:	9300      	str	r3, [sp, #0]
    e2dc:	2306      	movs	r3, #6
    e2de:	6878      	ldr	r0, [r7, #4]
    e2e0:	4c02      	ldr	r4, [pc, #8]	; (e2ec <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    e2e2:	47a0      	blx	r4
}
    e2e4:	bf00      	nop
    e2e6:	370c      	adds	r7, #12
    e2e8:	46bd      	mov	sp, r7
    e2ea:	bd90      	pop	{r4, r7, pc}
    e2ec:	0000e155 	.word	0x0000e155

0000e2f0 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    e2f0:	b480      	push	{r7}
    e2f2:	b085      	sub	sp, #20
    e2f4:	af00      	add	r7, sp, #0
    e2f6:	60f8      	str	r0, [r7, #12]
    e2f8:	460b      	mov	r3, r1
    e2fa:	607a      	str	r2, [r7, #4]
    e2fc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    e2fe:	7afb      	ldrb	r3, [r7, #11]
    e300:	68fa      	ldr	r2, [r7, #12]
    e302:	01db      	lsls	r3, r3, #7
    e304:	4413      	add	r3, r2
    e306:	3318      	adds	r3, #24
    e308:	687a      	ldr	r2, [r7, #4]
    e30a:	601a      	str	r2, [r3, #0]
}
    e30c:	bf00      	nop
    e30e:	3714      	adds	r7, #20
    e310:	46bd      	mov	sp, r7
    e312:	bc80      	pop	{r7}
    e314:	4770      	bx	lr

0000e316 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    e316:	b480      	push	{r7}
    e318:	b085      	sub	sp, #20
    e31a:	af00      	add	r7, sp, #0
    e31c:	60f8      	str	r0, [r7, #12]
    e31e:	460b      	mov	r3, r1
    e320:	607a      	str	r2, [r7, #4]
    e322:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    e324:	7afb      	ldrb	r3, [r7, #11]
    e326:	68fa      	ldr	r2, [r7, #12]
    e328:	01db      	lsls	r3, r3, #7
    e32a:	4413      	add	r3, r2
    e32c:	3314      	adds	r3, #20
    e32e:	687a      	ldr	r2, [r7, #4]
    e330:	601a      	str	r2, [r3, #0]
}
    e332:	bf00      	nop
    e334:	3714      	adds	r7, #20
    e336:	46bd      	mov	sp, r7
    e338:	bc80      	pop	{r7}
    e33a:	4770      	bx	lr

0000e33c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    e33c:	b580      	push	{r7, lr}
    e33e:	b082      	sub	sp, #8
    e340:	af00      	add	r7, sp, #0
    e342:	4603      	mov	r3, r0
    e344:	6039      	str	r1, [r7, #0]
    e346:	71fb      	strb	r3, [r7, #7]
    e348:	4613      	mov	r3, r2
    e34a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    e34c:	79bb      	ldrb	r3, [r7, #6]
    e34e:	2b00      	cmp	r3, #0
    e350:	d006      	beq.n	e360 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    e352:	79fb      	ldrb	r3, [r7, #7]
    e354:	683a      	ldr	r2, [r7, #0]
    e356:	4619      	mov	r1, r3
    e358:	4806      	ldr	r0, [pc, #24]	; (e374 <_gpio_set_level+0x38>)
    e35a:	4b07      	ldr	r3, [pc, #28]	; (e378 <_gpio_set_level+0x3c>)
    e35c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    e35e:	e005      	b.n	e36c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    e360:	79fb      	ldrb	r3, [r7, #7]
    e362:	683a      	ldr	r2, [r7, #0]
    e364:	4619      	mov	r1, r3
    e366:	4803      	ldr	r0, [pc, #12]	; (e374 <_gpio_set_level+0x38>)
    e368:	4b04      	ldr	r3, [pc, #16]	; (e37c <_gpio_set_level+0x40>)
    e36a:	4798      	blx	r3
}
    e36c:	bf00      	nop
    e36e:	3708      	adds	r7, #8
    e370:	46bd      	mov	sp, r7
    e372:	bd80      	pop	{r7, pc}
    e374:	41008000 	.word	0x41008000
    e378:	0000e2f1 	.word	0x0000e2f1
    e37c:	0000e317 	.word	0x0000e317

0000e380 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    e380:	b580      	push	{r7, lr}
    e382:	b082      	sub	sp, #8
    e384:	af00      	add	r7, sp, #0
    e386:	4603      	mov	r3, r0
    e388:	460a      	mov	r2, r1
    e38a:	71fb      	strb	r3, [r7, #7]
    e38c:	4613      	mov	r3, r2
    e38e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    e390:	79fb      	ldrb	r3, [r7, #7]
    e392:	115b      	asrs	r3, r3, #5
    e394:	b2d8      	uxtb	r0, r3
    e396:	79fb      	ldrb	r3, [r7, #7]
    e398:	f003 031f 	and.w	r3, r3, #31
    e39c:	2201      	movs	r2, #1
    e39e:	fa02 f303 	lsl.w	r3, r2, r3
    e3a2:	79ba      	ldrb	r2, [r7, #6]
    e3a4:	4619      	mov	r1, r3
    e3a6:	4b03      	ldr	r3, [pc, #12]	; (e3b4 <gpio_set_pin_level+0x34>)
    e3a8:	4798      	blx	r3
}
    e3aa:	bf00      	nop
    e3ac:	3708      	adds	r7, #8
    e3ae:	46bd      	mov	sp, r7
    e3b0:	bd80      	pop	{r7, pc}
    e3b2:	bf00      	nop
    e3b4:	0000e33d 	.word	0x0000e33d

0000e3b8 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor>:
{
		appParameters=defaultParameters;
		spiPort=0;
		memoryMap=flashLayout;
} //FlashMemoryClass
FlashMemoryClass::FlashMemoryClass(spi_m_sync_descriptor *spi_des)
    e3b8:	b580      	push	{r7, lr}
    e3ba:	b082      	sub	sp, #8
    e3bc:	af00      	add	r7, sp, #0
    e3be:	6078      	str	r0, [r7, #4]
    e3c0:	6039      	str	r1, [r7, #0]
    e3c2:	687b      	ldr	r3, [r7, #4]
    e3c4:	3318      	adds	r3, #24
    e3c6:	4618      	mov	r0, r3
    e3c8:	4b08      	ldr	r3, [pc, #32]	; (e3ec <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x34>)
    e3ca:	4798      	blx	r3
{
	appParameters=defaultParameters;
    e3cc:	687b      	ldr	r3, [r7, #4]
    e3ce:	4a08      	ldr	r2, [pc, #32]	; (e3f0 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x38>)
    e3d0:	7812      	ldrb	r2, [r2, #0]
    e3d2:	711a      	strb	r2, [r3, #4]
	spi_descriptor=spi_des;
    e3d4:	687b      	ldr	r3, [r7, #4]
    e3d6:	683a      	ldr	r2, [r7, #0]
    e3d8:	615a      	str	r2, [r3, #20]
	memoryMap=flashLayout;
    e3da:	4b06      	ldr	r3, [pc, #24]	; (e3f4 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x3c>)
    e3dc:	681a      	ldr	r2, [r3, #0]
    e3de:	687b      	ldr	r3, [r7, #4]
    e3e0:	601a      	str	r2, [r3, #0]
} //FlashMemoryClass
    e3e2:	687b      	ldr	r3, [r7, #4]
    e3e4:	4618      	mov	r0, r3
    e3e6:	3708      	adds	r7, #8
    e3e8:	46bd      	mov	sp, r7
    e3ea:	bd80      	pop	{r7, pc}
    e3ec:	0000f88d 	.word	0x0000f88d
    e3f0:	00010348 	.word	0x00010348
    e3f4:	20001124 	.word	0x20001124

0000e3f8 <_ZN16FlashMemoryClassD1Ev>:

// default destructor
FlashMemoryClass::~FlashMemoryClass()
    e3f8:	b580      	push	{r7, lr}
    e3fa:	b082      	sub	sp, #8
    e3fc:	af00      	add	r7, sp, #0
    e3fe:	6078      	str	r0, [r7, #4]
    e400:	687b      	ldr	r3, [r7, #4]
    e402:	3318      	adds	r3, #24
    e404:	4618      	mov	r0, r3
    e406:	4b03      	ldr	r3, [pc, #12]	; (e414 <_ZN16FlashMemoryClassD1Ev+0x1c>)
    e408:	4798      	blx	r3
{
} //~FlashMemoryClass
    e40a:	687b      	ldr	r3, [r7, #4]
    e40c:	4618      	mov	r0, r3
    e40e:	3708      	adds	r7, #8
    e410:	46bd      	mov	sp, r7
    e412:	bd80      	pop	{r7, pc}
    e414:	0000f8ad 	.word	0x0000f8ad

0000e418 <_ZN16FlashMemoryClass9flashOpenEv>:
}



void FlashMemoryClass::flashOpen(void)
{
    e418:	b580      	push	{r7, lr}
    e41a:	b082      	sub	sp, #8
    e41c:	af00      	add	r7, sp, #0
    e41e:	6078      	str	r0, [r7, #4]
	garbage=spi.Enable();
    e420:	687b      	ldr	r3, [r7, #4]
    e422:	3318      	adds	r3, #24
    e424:	4618      	mov	r0, r3
    e426:	4b05      	ldr	r3, [pc, #20]	; (e43c <_ZN16FlashMemoryClass9flashOpenEv+0x24>)
    e428:	4798      	blx	r3
    e42a:	4603      	mov	r3, r0
    e42c:	461a      	mov	r2, r3
    e42e:	687b      	ldr	r3, [r7, #4]
    e430:	609a      	str	r2, [r3, #8]
	
	
}
    e432:	bf00      	nop
    e434:	3708      	adds	r7, #8
    e436:	46bd      	mov	sp, r7
    e438:	bd80      	pop	{r7, pc}
    e43a:	bf00      	nop
    e43c:	0000f8c1 	.word	0x0000f8c1

0000e440 <_ZN16FlashMemoryClass12CE_Low_FlashEv>:
	spi.Read((uint8_t *)dest, (uint16_t)size);
	CE_High_Flash();
	return (uint8_t)src;
}
void FlashMemoryClass::CE_Low_Flash(void)
{
    e440:	b580      	push	{r7, lr}
    e442:	b082      	sub	sp, #8
    e444:	af00      	add	r7, sp, #0
    e446:	6078      	str	r0, [r7, #4]
	garbage=0;
    e448:	687b      	ldr	r3, [r7, #4]
    e44a:	2200      	movs	r2, #0
    e44c:	609a      	str	r2, [r3, #8]
		gpio_set_pin_level(CS_FLASH,
		// <y> Initial level
		// <id> pad_initial_level
		// <false"> Low
		// <true"> High
		false);
    e44e:	2100      	movs	r1, #0
    e450:	200f      	movs	r0, #15
    e452:	4b05      	ldr	r3, [pc, #20]	; (e468 <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
    e454:	4798      	blx	r3
		gpio_set_pin_level(CS_FRAM,true);
    e456:	2101      	movs	r1, #1
    e458:	2013      	movs	r0, #19
    e45a:	4b03      	ldr	r3, [pc, #12]	; (e468 <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
    e45c:	4798      	blx	r3
}
    e45e:	bf00      	nop
    e460:	3708      	adds	r7, #8
    e462:	46bd      	mov	sp, r7
    e464:	bd80      	pop	{r7, pc}
    e466:	bf00      	nop
    e468:	0000e381 	.word	0x0000e381

0000e46c <_ZN16FlashMemoryClass13CE_High_FlashEv>:

void FlashMemoryClass::CE_High_Flash(void)
{
    e46c:	b580      	push	{r7, lr}
    e46e:	b082      	sub	sp, #8
    e470:	af00      	add	r7, sp, #0
    e472:	6078      	str	r0, [r7, #4]
	garbage=0;
    e474:	687b      	ldr	r3, [r7, #4]
    e476:	2200      	movs	r2, #0
    e478:	609a      	str	r2, [r3, #8]
	gpio_set_pin_level(CS_FLASH,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
    e47a:	2101      	movs	r1, #1
    e47c:	200f      	movs	r0, #15
    e47e:	4b05      	ldr	r3, [pc, #20]	; (e494 <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
    e480:	4798      	blx	r3
	gpio_set_pin_level(CS_FRAM,true);
    e482:	2101      	movs	r1, #1
    e484:	2013      	movs	r0, #19
    e486:	4b03      	ldr	r3, [pc, #12]	; (e494 <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
    e488:	4798      	blx	r3
}
    e48a:	bf00      	nop
    e48c:	3708      	adds	r7, #8
    e48e:	46bd      	mov	sp, r7
    e490:	bd80      	pop	{r7, pc}
    e492:	bf00      	nop
    e494:	0000e381 	.word	0x0000e381

0000e498 <_ZN16FlashMemoryClass9Send_ByteEh>:
uint8_t FlashMemoryClass::Send_Byte(uint8_t byte)
{
    e498:	b580      	push	{r7, lr}
    e49a:	b082      	sub	sp, #8
    e49c:	af00      	add	r7, sp, #0
    e49e:	6078      	str	r0, [r7, #4]
    e4a0:	460b      	mov	r3, r1
    e4a2:	70fb      	strb	r3, [r7, #3]
	//WaitBusy();
	spi.Write(&byte,1);
    e4a4:	687b      	ldr	r3, [r7, #4]
    e4a6:	3318      	adds	r3, #24
    e4a8:	1cf9      	adds	r1, r7, #3
    e4aa:	2201      	movs	r2, #1
    e4ac:	4618      	mov	r0, r3
    e4ae:	4b03      	ldr	r3, [pc, #12]	; (e4bc <_ZN16FlashMemoryClass9Send_ByteEh+0x24>)
    e4b0:	4798      	blx	r3
	return byte;
    e4b2:	78fb      	ldrb	r3, [r7, #3]
}
    e4b4:	4618      	mov	r0, r3
    e4b6:	3708      	adds	r7, #8
    e4b8:	46bd      	mov	sp, r7
    e4ba:	bd80      	pop	{r7, pc}
    e4bc:	0000f8fd 	.word	0x0000f8fd

0000e4c0 <_ZN16FlashMemoryClass8Get_ByteEv>:

uint8_t FlashMemoryClass::Get_Byte(void)
{
    e4c0:	b580      	push	{r7, lr}
    e4c2:	b084      	sub	sp, #16
    e4c4:	af00      	add	r7, sp, #0
    e4c6:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	//WaitBusy();
	spi.Read(&byte,1);
    e4c8:	687b      	ldr	r3, [r7, #4]
    e4ca:	3318      	adds	r3, #24
    e4cc:	f107 010f 	add.w	r1, r7, #15
    e4d0:	2201      	movs	r2, #1
    e4d2:	4618      	mov	r0, r3
    e4d4:	4b03      	ldr	r3, [pc, #12]	; (e4e4 <_ZN16FlashMemoryClass8Get_ByteEv+0x24>)
    e4d6:	4798      	blx	r3
	
	return byte;
    e4d8:	7bfb      	ldrb	r3, [r7, #15]
}
    e4da:	4618      	mov	r0, r3
    e4dc:	3710      	adds	r7, #16
    e4de:	46bd      	mov	sp, r7
    e4e0:	bd80      	pop	{r7, pc}
    e4e2:	bf00      	nop
    e4e4:	0000f941 	.word	0x0000f941

0000e4e8 <_ZN16FlashMemoryClass4WRENEv>:

void FlashMemoryClass::WREN(void)
{
    e4e8:	b580      	push	{r7, lr}
    e4ea:	b082      	sub	sp, #8
    e4ec:	af00      	add	r7, sp, #0
    e4ee:	6078      	str	r0, [r7, #4]
	do
	{
		CE_Low_Flash();			// enable device
    e4f0:	6878      	ldr	r0, [r7, #4]
    e4f2:	4b0d      	ldr	r3, [pc, #52]	; (e528 <_ZN16FlashMemoryClass4WRENEv+0x40>)
    e4f4:	4798      	blx	r3
		Send_Byte(kFlashWREnable);	// send WREN command
    e4f6:	2106      	movs	r1, #6
    e4f8:	6878      	ldr	r0, [r7, #4]
    e4fa:	4b0c      	ldr	r3, [pc, #48]	; (e52c <_ZN16FlashMemoryClass4WRENEv+0x44>)
    e4fc:	4798      	blx	r3
		//WaitBusy();
		CE_High_Flash();
    e4fe:	6878      	ldr	r0, [r7, #4]
    e500:	4b0b      	ldr	r3, [pc, #44]	; (e530 <_ZN16FlashMemoryClass4WRENEv+0x48>)
    e502:	4798      	blx	r3
		status=ReadStatusRegister();
    e504:	6878      	ldr	r0, [r7, #4]
    e506:	4b0b      	ldr	r3, [pc, #44]	; (e534 <_ZN16FlashMemoryClass4WRENEv+0x4c>)
    e508:	4798      	blx	r3
    e50a:	4603      	mov	r3, r0
    e50c:	461a      	mov	r2, r3
    e50e:	687b      	ldr	r3, [r7, #4]
    e510:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	} while ((status&&(0x02))==0);
    e514:	687b      	ldr	r3, [r7, #4]
    e516:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    e51a:	2b00      	cmp	r3, #0
    e51c:	d100      	bne.n	e520 <_ZN16FlashMemoryClass4WRENEv+0x38>
	do
    e51e:	e7e7      	b.n	e4f0 <_ZN16FlashMemoryClass4WRENEv+0x8>

}
    e520:	bf00      	nop
    e522:	3708      	adds	r7, #8
    e524:	46bd      	mov	sp, r7
    e526:	bd80      	pop	{r7, pc}
    e528:	0000e441 	.word	0x0000e441
    e52c:	0000e499 	.word	0x0000e499
    e530:	0000e46d 	.word	0x0000e46d
    e534:	0000e715 	.word	0x0000e715

0000e538 <_ZN16FlashMemoryClass4WRDIEv>:


void FlashMemoryClass::WRDI(void)
{
    e538:	b580      	push	{r7, lr}
    e53a:	b082      	sub	sp, #8
    e53c:	af00      	add	r7, sp, #0
    e53e:	6078      	str	r0, [r7, #4]
	CE_Low_Flash();			// enable device
    e540:	6878      	ldr	r0, [r7, #4]
    e542:	4b06      	ldr	r3, [pc, #24]	; (e55c <_ZN16FlashMemoryClass4WRDIEv+0x24>)
    e544:	4798      	blx	r3
	Send_Byte(kFlashWRinhibit);	// send WRDI command
    e546:	2104      	movs	r1, #4
    e548:	6878      	ldr	r0, [r7, #4]
    e54a:	4b05      	ldr	r3, [pc, #20]	; (e560 <_ZN16FlashMemoryClass4WRDIEv+0x28>)
    e54c:	4798      	blx	r3
//	WaitBusy();
	CE_High_Flash();			// disable device
    e54e:	6878      	ldr	r0, [r7, #4]
    e550:	4b04      	ldr	r3, [pc, #16]	; (e564 <_ZN16FlashMemoryClass4WRDIEv+0x2c>)
    e552:	4798      	blx	r3
	
}
    e554:	bf00      	nop
    e556:	3708      	adds	r7, #8
    e558:	46bd      	mov	sp, r7
    e55a:	bd80      	pop	{r7, pc}
    e55c:	0000e441 	.word	0x0000e441
    e560:	0000e499 	.word	0x0000e499
    e564:	0000e46d 	.word	0x0000e46d

0000e568 <_ZN16FlashMemoryClass10eraseFlashEmm>:
		return *srcPtr;

	}
	
void FlashMemoryClass::eraseFlash(uint32_t dest, uint32_t size)
	{
    e568:	b580      	push	{r7, lr}
    e56a:	b086      	sub	sp, #24
    e56c:	af00      	add	r7, sp, #0
    e56e:	60f8      	str	r0, [r7, #12]
    e570:	60b9      	str	r1, [r7, #8]
    e572:	607a      	str	r2, [r7, #4]
	uint32_t	eraseRemaining = size;
    e574:	687b      	ldr	r3, [r7, #4]
    e576:	617b      	str	r3, [r7, #20]
	uint32_t	eraseAddress = dest;
    e578:	68bb      	ldr	r3, [r7, #8]
    e57a:	613b      	str	r3, [r7, #16]
	flashOpen();
    e57c:	68f8      	ldr	r0, [r7, #12]
    e57e:	4b21      	ldr	r3, [pc, #132]	; (e604 <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>)
    e580:	4798      	blx	r3
	while (eraseRemaining > 0)
    e582:	697b      	ldr	r3, [r7, #20]
    e584:	2b00      	cmp	r3, #0
    e586:	d035      	beq.n	e5f4 <_ZN16FlashMemoryClass10eraseFlashEmm+0x8c>
	{
	WREN();
    e588:	68f8      	ldr	r0, [r7, #12]
    e58a:	4b1f      	ldr	r3, [pc, #124]	; (e608 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa0>)
    e58c:	4798      	blx	r3
	if (eraseRemaining <= 4 * 1024)
    e58e:	697b      	ldr	r3, [r7, #20]
    e590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    e594:	d806      	bhi.n	e5a4 <_ZN16FlashMemoryClass10eraseFlashEmm+0x3c>
		{
		Sector_Erase(eraseAddress);
    e596:	6939      	ldr	r1, [r7, #16]
    e598:	68f8      	ldr	r0, [r7, #12]
    e59a:	4b1c      	ldr	r3, [pc, #112]	; (e60c <_ZN16FlashMemoryClass10eraseFlashEmm+0xa4>)
    e59c:	4798      	blx	r3
		eraseRemaining = 0;
    e59e:	2300      	movs	r3, #0
    e5a0:	617b      	str	r3, [r7, #20]
    e5a2:	e020      	b.n	e5e6 <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		}
	else if (eraseRemaining < 64 * 1024)
    e5a4:	697b      	ldr	r3, [r7, #20]
    e5a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    e5aa:	d20c      	bcs.n	e5c6 <_ZN16FlashMemoryClass10eraseFlashEmm+0x5e>
		{
		Sector_Erase(eraseAddress);
    e5ac:	6939      	ldr	r1, [r7, #16]
    e5ae:	68f8      	ldr	r0, [r7, #12]
    e5b0:	4b16      	ldr	r3, [pc, #88]	; (e60c <_ZN16FlashMemoryClass10eraseFlashEmm+0xa4>)
    e5b2:	4798      	blx	r3
		eraseAddress += (4 * 1024);
    e5b4:	693b      	ldr	r3, [r7, #16]
    e5b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    e5ba:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (4 * 1024);
    e5bc:	697b      	ldr	r3, [r7, #20]
    e5be:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    e5c2:	617b      	str	r3, [r7, #20]
    e5c4:	e00f      	b.n	e5e6 <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		}

	else if (eraseRemaining >= 64 * 1024)
    e5c6:	697b      	ldr	r3, [r7, #20]
    e5c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    e5cc:	d30b      	bcc.n	e5e6 <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		{
		Block_Erase_64K(eraseAddress);
    e5ce:	6939      	ldr	r1, [r7, #16]
    e5d0:	68f8      	ldr	r0, [r7, #12]
    e5d2:	4b0f      	ldr	r3, [pc, #60]	; (e610 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa8>)
    e5d4:	4798      	blx	r3
		eraseAddress += (64 * 1024);
    e5d6:	693b      	ldr	r3, [r7, #16]
    e5d8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    e5dc:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (64 * 1024);
    e5de:	697b      	ldr	r3, [r7, #20]
    e5e0:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    e5e4:	617b      	str	r3, [r7, #20]
		Block_Erase_32K(eraseAddress);
		eraseAddress += (32 * 1024);
		eraseRemaining -= (32 * 1024);
		}
*/
	WaitBusy();
    e5e6:	68f8      	ldr	r0, [r7, #12]
    e5e8:	4b0a      	ldr	r3, [pc, #40]	; (e614 <_ZN16FlashMemoryClass10eraseFlashEmm+0xac>)
    e5ea:	4798      	blx	r3
	WRDI();
    e5ec:	68f8      	ldr	r0, [r7, #12]
    e5ee:	4b0a      	ldr	r3, [pc, #40]	; (e618 <_ZN16FlashMemoryClass10eraseFlashEmm+0xb0>)
    e5f0:	4798      	blx	r3
	while (eraseRemaining > 0)
    e5f2:	e7c6      	b.n	e582 <_ZN16FlashMemoryClass10eraseFlashEmm+0x1a>
	}
	flashClose();
    e5f4:	68f8      	ldr	r0, [r7, #12]
    e5f6:	4b09      	ldr	r3, [pc, #36]	; (e61c <_ZN16FlashMemoryClass10eraseFlashEmm+0xb4>)
    e5f8:	4798      	blx	r3
}
    e5fa:	bf00      	nop
    e5fc:	3718      	adds	r7, #24
    e5fe:	46bd      	mov	sp, r7
    e600:	bd80      	pop	{r7, pc}
    e602:	bf00      	nop
    e604:	0000e419 	.word	0x0000e419
    e608:	0000e4e9 	.word	0x0000e4e9
    e60c:	0000e7b1 	.word	0x0000e7b1
    e610:	0000e621 	.word	0x0000e621
    e614:	0000e67d 	.word	0x0000e67d
    e618:	0000e539 	.word	0x0000e539
    e61c:	0000e78d 	.word	0x0000e78d

0000e620 <_ZN16FlashMemoryClass15Block_Erase_64KEm>:
	
void	FlashMemoryClass::Block_Erase_64K(uint32_t Dst){
    e620:	b580      	push	{r7, lr}
    e622:	b082      	sub	sp, #8
    e624:	af00      	add	r7, sp, #0
    e626:	6078      	str	r0, [r7, #4]
    e628:	6039      	str	r1, [r7, #0]

		CE_Low_Flash();				// enable device
    e62a:	6878      	ldr	r0, [r7, #4]
    e62c:	4b10      	ldr	r3, [pc, #64]	; (e670 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x50>)
    e62e:	4798      	blx	r3
		Send_Byte(kFlash64KBlockErase);		// send Sector Erase command
    e630:	21d8      	movs	r1, #216	; 0xd8
    e632:	6878      	ldr	r0, [r7, #4]
    e634:	4b0f      	ldr	r3, [pc, #60]	; (e674 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    e636:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
    e638:	683b      	ldr	r3, [r7, #0]
    e63a:	0c1b      	lsrs	r3, r3, #16
    e63c:	b2db      	uxtb	r3, r3
    e63e:	4619      	mov	r1, r3
    e640:	6878      	ldr	r0, [r7, #4]
    e642:	4b0c      	ldr	r3, [pc, #48]	; (e674 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    e644:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFF) >> 8));
    e646:	683b      	ldr	r3, [r7, #0]
    e648:	0a1b      	lsrs	r3, r3, #8
    e64a:	b2db      	uxtb	r3, r3
    e64c:	4619      	mov	r1, r3
    e64e:	6878      	ldr	r0, [r7, #4]
    e650:	4b08      	ldr	r3, [pc, #32]	; (e674 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    e652:	4798      	blx	r3
		Send_Byte(Dst & 0xFF);
    e654:	683b      	ldr	r3, [r7, #0]
    e656:	b2db      	uxtb	r3, r3
    e658:	4619      	mov	r1, r3
    e65a:	6878      	ldr	r0, [r7, #4]
    e65c:	4b05      	ldr	r3, [pc, #20]	; (e674 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    e65e:	4798      	blx	r3
		CE_High_Flash();				// disable device
    e660:	6878      	ldr	r0, [r7, #4]
    e662:	4b05      	ldr	r3, [pc, #20]	; (e678 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x58>)
    e664:	4798      	blx	r3
		
}
    e666:	bf00      	nop
    e668:	3708      	adds	r7, #8
    e66a:	46bd      	mov	sp, r7
    e66c:	bd80      	pop	{r7, pc}
    e66e:	bf00      	nop
    e670:	0000e441 	.word	0x0000e441
    e674:	0000e499 	.word	0x0000e499
    e678:	0000e46d 	.word	0x0000e46d

0000e67c <_ZN16FlashMemoryClass8WaitBusyEv>:
uint8_t  FlashMemoryClass::WaitBusy(void){
    e67c:	b580      	push	{r7, lr}
    e67e:	b082      	sub	sp, #8
    e680:	af00      	add	r7, sp, #0
    e682:	6078      	str	r0, [r7, #4]
	status = ReadStatusRegister();
    e684:	6878      	ldr	r0, [r7, #4]
    e686:	4b0f      	ldr	r3, [pc, #60]	; (e6c4 <_ZN16FlashMemoryClass8WaitBusyEv+0x48>)
    e688:	4798      	blx	r3
    e68a:	4603      	mov	r3, r0
    e68c:	461a      	mov	r2, r3
    e68e:	687b      	ldr	r3, [r7, #4]
    e690:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    e694:	687b      	ldr	r3, [r7, #4]
    e696:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    e69a:	f003 0301 	and.w	r3, r3, #1
    e69e:	2b00      	cmp	r3, #0
    e6a0:	d008      	beq.n	e6b4 <_ZN16FlashMemoryClass8WaitBusyEv+0x38>
			status = ReadStatusRegister();
    e6a2:	6878      	ldr	r0, [r7, #4]
    e6a4:	4b07      	ldr	r3, [pc, #28]	; (e6c4 <_ZN16FlashMemoryClass8WaitBusyEv+0x48>)
    e6a6:	4798      	blx	r3
    e6a8:	4603      	mov	r3, r0
    e6aa:	461a      	mov	r2, r3
    e6ac:	687b      	ldr	r3, [r7, #4]
    e6ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    e6b2:	e7ef      	b.n	e694 <_ZN16FlashMemoryClass8WaitBusyEv+0x18>
		}
		
		return	status;
    e6b4:	687b      	ldr	r3, [r7, #4]
    e6b6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
    e6ba:	4618      	mov	r0, r3
    e6bc:	3708      	adds	r7, #8
    e6be:	46bd      	mov	sp, r7
    e6c0:	bd80      	pop	{r7, pc}
    e6c2:	bf00      	nop
    e6c4:	0000e715 	.word	0x0000e715

0000e6c8 <_ZN16FlashMemoryClass7IsReadyEv>:
bool  FlashMemoryClass::IsReady(void){
    e6c8:	b580      	push	{r7, lr}
    e6ca:	b082      	sub	sp, #8
    e6cc:	af00      	add	r7, sp, #0
    e6ce:	6078      	str	r0, [r7, #4]
	
	flashOpen();
    e6d0:	6878      	ldr	r0, [r7, #4]
    e6d2:	4b0d      	ldr	r3, [pc, #52]	; (e708 <_ZN16FlashMemoryClass7IsReadyEv+0x40>)
    e6d4:	4798      	blx	r3
	status = ReadStatusRegister();
    e6d6:	6878      	ldr	r0, [r7, #4]
    e6d8:	4b0c      	ldr	r3, [pc, #48]	; (e70c <_ZN16FlashMemoryClass7IsReadyEv+0x44>)
    e6da:	4798      	blx	r3
    e6dc:	4603      	mov	r3, r0
    e6de:	461a      	mov	r2, r3
    e6e0:	687b      	ldr	r3, [r7, #4]
    e6e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	flashClose();
    e6e6:	6878      	ldr	r0, [r7, #4]
    e6e8:	4b09      	ldr	r3, [pc, #36]	; (e710 <_ZN16FlashMemoryClass7IsReadyEv+0x48>)
    e6ea:	4798      	blx	r3
	return	(status&0x01)==0;
    e6ec:	687b      	ldr	r3, [r7, #4]
    e6ee:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    e6f2:	f003 0301 	and.w	r3, r3, #1
    e6f6:	2b00      	cmp	r3, #0
    e6f8:	bf0c      	ite	eq
    e6fa:	2301      	moveq	r3, #1
    e6fc:	2300      	movne	r3, #0
    e6fe:	b2db      	uxtb	r3, r3
}
    e700:	4618      	mov	r0, r3
    e702:	3708      	adds	r7, #8
    e704:	46bd      	mov	sp, r7
    e706:	bd80      	pop	{r7, pc}
    e708:	0000e419 	.word	0x0000e419
    e70c:	0000e715 	.word	0x0000e715
    e710:	0000e78d 	.word	0x0000e78d

0000e714 <_ZN16FlashMemoryClass18ReadStatusRegisterEv>:
uint8_t  FlashMemoryClass::ReadStatusRegister(void){
    e714:	b580      	push	{r7, lr}
    e716:	b082      	sub	sp, #8
    e718:	af00      	add	r7, sp, #0
    e71a:	6078      	str	r0, [r7, #4]
			status=ReadSingleRegister(kFlashReadSR);
    e71c:	2105      	movs	r1, #5
    e71e:	6878      	ldr	r0, [r7, #4]
    e720:	4b06      	ldr	r3, [pc, #24]	; (e73c <_ZN16FlashMemoryClass18ReadStatusRegisterEv+0x28>)
    e722:	4798      	blx	r3
    e724:	4603      	mov	r3, r0
    e726:	461a      	mov	r2, r3
    e728:	687b      	ldr	r3, [r7, #4]
    e72a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		return status;
    e72e:	687b      	ldr	r3, [r7, #4]
    e730:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
    e734:	4618      	mov	r0, r3
    e736:	3708      	adds	r7, #8
    e738:	46bd      	mov	sp, r7
    e73a:	bd80      	pop	{r7, pc}
    e73c:	0000e741 	.word	0x0000e741

0000e740 <_ZN16FlashMemoryClass18ReadSingleRegisterEh>:
uint8_t  FlashMemoryClass::ReadFunctionRegister(void){
			// disable device
		return ReadSingleRegister(kFlashReadFunction);
	}
	
uint8_t  FlashMemoryClass::ReadSingleRegister(uint8_t r){
    e740:	b580      	push	{r7, lr}
    e742:	b084      	sub	sp, #16
    e744:	af00      	add	r7, sp, #0
    e746:	6078      	str	r0, [r7, #4]
    e748:	460b      	mov	r3, r1
    e74a:	70fb      	strb	r3, [r7, #3]
	uint8_t b = 0;
    e74c:	2300      	movs	r3, #0
    e74e:	73fb      	strb	r3, [r7, #15]
	CE_Low_Flash();			// enable device
    e750:	6878      	ldr	r0, [r7, #4]
    e752:	4b0a      	ldr	r3, [pc, #40]	; (e77c <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x3c>)
    e754:	4798      	blx	r3
	Send_Byte(r);	// send RDSR command
    e756:	78fb      	ldrb	r3, [r7, #3]
    e758:	4619      	mov	r1, r3
    e75a:	6878      	ldr	r0, [r7, #4]
    e75c:	4b08      	ldr	r3, [pc, #32]	; (e780 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x40>)
    e75e:	4798      	blx	r3
	b = Get_Byte();		/* receive byte */
    e760:	6878      	ldr	r0, [r7, #4]
    e762:	4b08      	ldr	r3, [pc, #32]	; (e784 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x44>)
    e764:	4798      	blx	r3
    e766:	4603      	mov	r3, r0
    e768:	73fb      	strb	r3, [r7, #15]
	CE_High_Flash();			// disable device
    e76a:	6878      	ldr	r0, [r7, #4]
    e76c:	4b06      	ldr	r3, [pc, #24]	; (e788 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x48>)
    e76e:	4798      	blx	r3
	return b;
    e770:	7bfb      	ldrb	r3, [r7, #15]
}
    e772:	4618      	mov	r0, r3
    e774:	3710      	adds	r7, #16
    e776:	46bd      	mov	sp, r7
    e778:	bd80      	pop	{r7, pc}
    e77a:	bf00      	nop
    e77c:	0000e441 	.word	0x0000e441
    e780:	0000e499 	.word	0x0000e499
    e784:	0000e4c1 	.word	0x0000e4c1
    e788:	0000e46d 	.word	0x0000e46d

0000e78c <_ZN16FlashMemoryClass10flashCloseEv>:
	Send_Byte(byte);		/* receive byte */
	CE_High_Flash();			// disable device
	return byte;
}

void FlashMemoryClass::flashClose(void){
    e78c:	b580      	push	{r7, lr}
    e78e:	b082      	sub	sp, #8
    e790:	af00      	add	r7, sp, #0
    e792:	6078      	str	r0, [r7, #4]
	garbage=0;
    e794:	687b      	ldr	r3, [r7, #4]
    e796:	2200      	movs	r2, #0
    e798:	609a      	str	r2, [r3, #8]
		spi.Disable();
    e79a:	687b      	ldr	r3, [r7, #4]
    e79c:	3318      	adds	r3, #24
    e79e:	4618      	mov	r0, r3
    e7a0:	4b02      	ldr	r3, [pc, #8]	; (e7ac <_ZN16FlashMemoryClass10flashCloseEv+0x20>)
    e7a2:	4798      	blx	r3
	}
    e7a4:	bf00      	nop
    e7a6:	3708      	adds	r7, #8
    e7a8:	46bd      	mov	sp, r7
    e7aa:	bd80      	pop	{r7, pc}
    e7ac:	0000f985 	.word	0x0000f985

0000e7b0 <_ZN16FlashMemoryClass12Sector_EraseEm>:
void FlashMemoryClass::Sector_Erase(uint32_t Dst)
{
    e7b0:	b580      	push	{r7, lr}
    e7b2:	b082      	sub	sp, #8
    e7b4:	af00      	add	r7, sp, #0
    e7b6:	6078      	str	r0, [r7, #4]
    e7b8:	6039      	str	r1, [r7, #0]
	CE_Low_Flash();				// enable device
    e7ba:	6878      	ldr	r0, [r7, #4]
    e7bc:	4b10      	ldr	r3, [pc, #64]	; (e800 <_ZN16FlashMemoryClass12Sector_EraseEm+0x50>)
    e7be:	4798      	blx	r3
	Send_Byte(kFlash4KSectorErase);		// send Sector Erase command
    e7c0:	2120      	movs	r1, #32
    e7c2:	6878      	ldr	r0, [r7, #4]
    e7c4:	4b0f      	ldr	r3, [pc, #60]	; (e804 <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    e7c6:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
    e7c8:	683b      	ldr	r3, [r7, #0]
    e7ca:	0c1b      	lsrs	r3, r3, #16
    e7cc:	b2db      	uxtb	r3, r3
    e7ce:	4619      	mov	r1, r3
    e7d0:	6878      	ldr	r0, [r7, #4]
    e7d2:	4b0c      	ldr	r3, [pc, #48]	; (e804 <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    e7d4:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFF) >> 8));
    e7d6:	683b      	ldr	r3, [r7, #0]
    e7d8:	0a1b      	lsrs	r3, r3, #8
    e7da:	b2db      	uxtb	r3, r3
    e7dc:	4619      	mov	r1, r3
    e7de:	6878      	ldr	r0, [r7, #4]
    e7e0:	4b08      	ldr	r3, [pc, #32]	; (e804 <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    e7e2:	4798      	blx	r3
	Send_Byte(Dst & 0xFF);
    e7e4:	683b      	ldr	r3, [r7, #0]
    e7e6:	b2db      	uxtb	r3, r3
    e7e8:	4619      	mov	r1, r3
    e7ea:	6878      	ldr	r0, [r7, #4]
    e7ec:	4b05      	ldr	r3, [pc, #20]	; (e804 <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    e7ee:	4798      	blx	r3
	CE_High_Flash();				// disable device
    e7f0:	6878      	ldr	r0, [r7, #4]
    e7f2:	4b05      	ldr	r3, [pc, #20]	; (e808 <_ZN16FlashMemoryClass12Sector_EraseEm+0x58>)
    e7f4:	4798      	blx	r3
}
    e7f6:	bf00      	nop
    e7f8:	3708      	adds	r7, #8
    e7fa:	46bd      	mov	sp, r7
    e7fc:	bd80      	pop	{r7, pc}
    e7fe:	bf00      	nop
    e800:	0000e441 	.word	0x0000e441
    e804:	0000e499 	.word	0x0000e499
    e808:	0000e46d 	.word	0x0000e46d

0000e80c <_ZN16FlashMemoryClass12WriteAddressEPhmm>:
	delay_ms(100);
	CE_Low_Flash();
	Send_Byte(0x99);
	CE_High_Flash();				// disable device
}
uint32_t	FlashMemoryClass::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
    e80c:	b580      	push	{r7, lr}
    e80e:	b086      	sub	sp, #24
    e810:	af00      	add	r7, sp, #0
    e812:	60f8      	str	r0, [r7, #12]
    e814:	60b9      	str	r1, [r7, #8]
    e816:	607a      	str	r2, [r7, #4]
    e818:	603b      	str	r3, [r7, #0]
	uint32_t	w;
	while(!IsReady());
    e81a:	68f8      	ldr	r0, [r7, #12]
    e81c:	4b2b      	ldr	r3, [pc, #172]	; (e8cc <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc0>)
    e81e:	4798      	blx	r3
    e820:	4603      	mov	r3, r0
    e822:	f083 0301 	eor.w	r3, r3, #1
    e826:	b2db      	uxtb	r3, r3
    e828:	2b00      	cmp	r3, #0
    e82a:	d000      	beq.n	e82e <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x22>
    e82c:	e7f5      	b.n	e81a <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe>
	flashOpen();
    e82e:	68f8      	ldr	r0, [r7, #12]
    e830:	4b27      	ldr	r3, [pc, #156]	; (e8d0 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc4>)
    e832:	4798      	blx	r3
	WREN();
    e834:	68f8      	ldr	r0, [r7, #12]
    e836:	4b27      	ldr	r3, [pc, #156]	; (e8d4 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc8>)
    e838:	4798      	blx	r3
	CE_Low_Flash();
    e83a:	68f8      	ldr	r0, [r7, #12]
    e83c:	4b26      	ldr	r3, [pc, #152]	; (e8d8 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xcc>)
    e83e:	4798      	blx	r3
	localBuffer[0]=kFlashByteProgram;
    e840:	68fb      	ldr	r3, [r7, #12]
    e842:	2202      	movs	r2, #2
    e844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	localBuffer[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    e848:	687b      	ldr	r3, [r7, #4]
    e84a:	0c1b      	lsrs	r3, r3, #16
    e84c:	b2da      	uxtb	r2, r3
    e84e:	68fb      	ldr	r3, [r7, #12]
    e850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	localBuffer[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    e854:	687b      	ldr	r3, [r7, #4]
    e856:	0a1b      	lsrs	r3, r3, #8
    e858:	b2da      	uxtb	r2, r3
    e85a:	68fb      	ldr	r3, [r7, #12]
    e85c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	localBuffer[3]=(uint8_t)(addr&0xFF);
    e860:	687b      	ldr	r3, [r7, #4]
    e862:	b2da      	uxtb	r2, r3
    e864:	68fb      	ldr	r3, [r7, #12]
    e866:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	for (uint32_t i = 4; i <(size)+4; i++)
    e86a:	2304      	movs	r3, #4
    e86c:	617b      	str	r3, [r7, #20]
    e86e:	683b      	ldr	r3, [r7, #0]
    e870:	1d1a      	adds	r2, r3, #4
    e872:	697b      	ldr	r3, [r7, #20]
    e874:	429a      	cmp	r2, r3
    e876:	d90e      	bls.n	e896 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x8a>
	{
		localBuffer[i]=*p;
    e878:	68bb      	ldr	r3, [r7, #8]
    e87a:	7819      	ldrb	r1, [r3, #0]
    e87c:	68fa      	ldr	r2, [r7, #12]
    e87e:	697b      	ldr	r3, [r7, #20]
    e880:	4413      	add	r3, r2
    e882:	3334      	adds	r3, #52	; 0x34
    e884:	460a      	mov	r2, r1
    e886:	701a      	strb	r2, [r3, #0]
		p++;
    e888:	68bb      	ldr	r3, [r7, #8]
    e88a:	3301      	adds	r3, #1
    e88c:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 4; i <(size)+4; i++)
    e88e:	697b      	ldr	r3, [r7, #20]
    e890:	3301      	adds	r3, #1
    e892:	617b      	str	r3, [r7, #20]
    e894:	e7eb      	b.n	e86e <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x62>
	}


	w=spi.Write(&localBuffer[0],size+4);
    e896:	68fb      	ldr	r3, [r7, #12]
    e898:	f103 0018 	add.w	r0, r3, #24
    e89c:	68fb      	ldr	r3, [r7, #12]
    e89e:	f103 0134 	add.w	r1, r3, #52	; 0x34
    e8a2:	683b      	ldr	r3, [r7, #0]
    e8a4:	3304      	adds	r3, #4
    e8a6:	461a      	mov	r2, r3
    e8a8:	4b0c      	ldr	r3, [pc, #48]	; (e8dc <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd0>)
    e8aa:	4798      	blx	r3
    e8ac:	4603      	mov	r3, r0
    e8ae:	613b      	str	r3, [r7, #16]

	CE_High_Flash();
    e8b0:	68f8      	ldr	r0, [r7, #12]
    e8b2:	4b0b      	ldr	r3, [pc, #44]	; (e8e0 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd4>)
    e8b4:	4798      	blx	r3
	WRDI();
    e8b6:	68f8      	ldr	r0, [r7, #12]
    e8b8:	4b0a      	ldr	r3, [pc, #40]	; (e8e4 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd8>)
    e8ba:	4798      	blx	r3
	flashClose();
    e8bc:	68f8      	ldr	r0, [r7, #12]
    e8be:	4b0a      	ldr	r3, [pc, #40]	; (e8e8 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xdc>)
    e8c0:	4798      	blx	r3
	return	w;
    e8c2:	693b      	ldr	r3, [r7, #16]
	/*return (uint32_t)writeFlash(addr,(void*)p,size);*/
}
    e8c4:	4618      	mov	r0, r3
    e8c6:	3718      	adds	r7, #24
    e8c8:	46bd      	mov	sp, r7
    e8ca:	bd80      	pop	{r7, pc}
    e8cc:	0000e6c9 	.word	0x0000e6c9
    e8d0:	0000e419 	.word	0x0000e419
    e8d4:	0000e4e9 	.word	0x0000e4e9
    e8d8:	0000e441 	.word	0x0000e441
    e8dc:	0000f8fd 	.word	0x0000f8fd
    e8e0:	0000e46d 	.word	0x0000e46d
    e8e4:	0000e539 	.word	0x0000e539
    e8e8:	0000e78d 	.word	0x0000e78d

0000e8ec <_ZN16FlashMemoryClass11ReadAddressEPhmm>:
uint32_t	FlashMemoryClass::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
    e8ec:	b580      	push	{r7, lr}
    e8ee:	b086      	sub	sp, #24
    e8f0:	af00      	add	r7, sp, #0
    e8f2:	60f8      	str	r0, [r7, #12]
    e8f4:	60b9      	str	r1, [r7, #8]
    e8f6:	607a      	str	r2, [r7, #4]
    e8f8:	603b      	str	r3, [r7, #0]
	uint8_t	dummy;
	while(!IsReady());
    e8fa:	68f8      	ldr	r0, [r7, #12]
    e8fc:	4b21      	ldr	r3, [pc, #132]	; (e984 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x98>)
    e8fe:	4798      	blx	r3
    e900:	4603      	mov	r3, r0
    e902:	f083 0301 	eor.w	r3, r3, #1
    e906:	b2db      	uxtb	r3, r3
    e908:	2b00      	cmp	r3, #0
    e90a:	d000      	beq.n	e90e <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x22>
    e90c:	e7f5      	b.n	e8fa <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xe>
	flashOpen();
    e90e:	68f8      	ldr	r0, [r7, #12]
    e910:	4b1d      	ldr	r3, [pc, #116]	; (e988 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x9c>)
    e912:	4798      	blx	r3
	CE_Low_Flash();
    e914:	68f8      	ldr	r0, [r7, #12]
    e916:	4b1d      	ldr	r3, [pc, #116]	; (e98c <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa0>)
    e918:	4798      	blx	r3
	instruction[0]=kFlashRead;
    e91a:	68fb      	ldr	r3, [r7, #12]
    e91c:	2203      	movs	r2, #3
    e91e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	instruction[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    e922:	687b      	ldr	r3, [r7, #4]
    e924:	0c1b      	lsrs	r3, r3, #16
    e926:	b2da      	uxtb	r2, r3
    e928:	68fb      	ldr	r3, [r7, #12]
    e92a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	instruction[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    e92e:	687b      	ldr	r3, [r7, #4]
    e930:	0a1b      	lsrs	r3, r3, #8
    e932:	b2da      	uxtb	r2, r3
    e934:	68fb      	ldr	r3, [r7, #12]
    e936:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	instruction[3]=(uint8_t)(addr&0xFF);
    e93a:	687b      	ldr	r3, [r7, #4]
    e93c:	b2da      	uxtb	r2, r3
    e93e:	68fb      	ldr	r3, [r7, #12]
    e940:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		
	uint32_t	r=spi.Write(instruction,4);
    e944:	68fb      	ldr	r3, [r7, #12]
    e946:	f103 0018 	add.w	r0, r3, #24
    e94a:	68fb      	ldr	r3, [r7, #12]
    e94c:	3348      	adds	r3, #72	; 0x48
    e94e:	2204      	movs	r2, #4
    e950:	4619      	mov	r1, r3
    e952:	4b0f      	ldr	r3, [pc, #60]	; (e990 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa4>)
    e954:	4798      	blx	r3
    e956:	4603      	mov	r3, r0
    e958:	617b      	str	r3, [r7, #20]
	r=spi.Read(p,size);
    e95a:	68fb      	ldr	r3, [r7, #12]
    e95c:	3318      	adds	r3, #24
    e95e:	683a      	ldr	r2, [r7, #0]
    e960:	68b9      	ldr	r1, [r7, #8]
    e962:	4618      	mov	r0, r3
    e964:	4b0b      	ldr	r3, [pc, #44]	; (e994 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa8>)
    e966:	4798      	blx	r3
    e968:	4603      	mov	r3, r0
    e96a:	617b      	str	r3, [r7, #20]
	CE_High_Flash();
    e96c:	68f8      	ldr	r0, [r7, #12]
    e96e:	4b0a      	ldr	r3, [pc, #40]	; (e998 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xac>)
    e970:	4798      	blx	r3
	flashClose();
    e972:	68f8      	ldr	r0, [r7, #12]
    e974:	4b09      	ldr	r3, [pc, #36]	; (e99c <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xb0>)
    e976:	4798      	blx	r3
	
	return	r;
    e978:	697b      	ldr	r3, [r7, #20]
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
    e97a:	4618      	mov	r0, r3
    e97c:	3718      	adds	r7, #24
    e97e:	46bd      	mov	sp, r7
    e980:	bd80      	pop	{r7, pc}
    e982:	bf00      	nop
    e984:	0000e6c9 	.word	0x0000e6c9
    e988:	0000e419 	.word	0x0000e419
    e98c:	0000e441 	.word	0x0000e441
    e990:	0000f8fd 	.word	0x0000f8fd
    e994:	0000f941 	.word	0x0000f941
    e998:	0000e46d 	.word	0x0000e46d
    e99c:	0000e78d 	.word	0x0000e78d

0000e9a0 <_Z41__static_initialization_and_destruction_0ii>:
    e9a0:	b580      	push	{r7, lr}
    e9a2:	b082      	sub	sp, #8
    e9a4:	af00      	add	r7, sp, #0
    e9a6:	6078      	str	r0, [r7, #4]
    e9a8:	6039      	str	r1, [r7, #0]
    e9aa:	687b      	ldr	r3, [r7, #4]
    e9ac:	2b01      	cmp	r3, #1
    e9ae:	d10d      	bne.n	e9cc <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e9b0:	683b      	ldr	r3, [r7, #0]
    e9b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e9b6:	4293      	cmp	r3, r2
    e9b8:	d108      	bne.n	e9cc <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e9ba:	4906      	ldr	r1, [pc, #24]	; (e9d4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e9bc:	4806      	ldr	r0, [pc, #24]	; (e9d8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e9be:	4b07      	ldr	r3, [pc, #28]	; (e9dc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    e9c0:	4798      	blx	r3
    e9c2:	4a07      	ldr	r2, [pc, #28]	; (e9e0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    e9c4:	4907      	ldr	r1, [pc, #28]	; (e9e4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    e9c6:	4804      	ldr	r0, [pc, #16]	; (e9d8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e9c8:	4b07      	ldr	r3, [pc, #28]	; (e9e8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e9ca:	4798      	blx	r3
    e9cc:	bf00      	nop
    e9ce:	3708      	adds	r7, #8
    e9d0:	46bd      	mov	sp, r7
    e9d2:	bd80      	pop	{r7, pc}
    e9d4:	20001518 	.word	0x20001518
    e9d8:	20001128 	.word	0x20001128
    e9dc:	0000e3b9 	.word	0x0000e3b9
    e9e0:	20000000 	.word	0x20000000
    e9e4:	0000e3f9 	.word	0x0000e3f9
    e9e8:	0000fbc1 	.word	0x0000fbc1

0000e9ec <_GLOBAL__sub_I_flashLayout>:
    e9ec:	b580      	push	{r7, lr}
    e9ee:	af00      	add	r7, sp, #0
    e9f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e9f4:	2001      	movs	r0, #1
    e9f6:	4b01      	ldr	r3, [pc, #4]	; (e9fc <_GLOBAL__sub_I_flashLayout+0x10>)
    e9f8:	4798      	blx	r3
    e9fa:	bd80      	pop	{r7, pc}
    e9fc:	0000e9a1 	.word	0x0000e9a1

0000ea00 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    ea00:	b480      	push	{r7}
    ea02:	b083      	sub	sp, #12
    ea04:	af00      	add	r7, sp, #0
    ea06:	6078      	str	r0, [r7, #4]
    ea08:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    ea0a:	687b      	ldr	r3, [r7, #4]
    ea0c:	683a      	ldr	r2, [r7, #0]
    ea0e:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    ea10:	4a06      	ldr	r2, [pc, #24]	; (ea2c <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
    ea12:	687b      	ldr	r3, [r7, #4]
    ea14:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    ea16:	687b      	ldr	r3, [r7, #4]
    ea18:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ea1c:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    ea1e:	687b      	ldr	r3, [r7, #4]
    ea20:	4618      	mov	r0, r3
    ea22:	370c      	adds	r7, #12
    ea24:	46bd      	mov	sp, r7
    ea26:	bc80      	pop	{r7}
    ea28:	4770      	bx	lr
    ea2a:	bf00      	nop
    ea2c:	20001178 	.word	0x20001178

0000ea30 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    ea30:	b480      	push	{r7}
    ea32:	b083      	sub	sp, #12
    ea34:	af00      	add	r7, sp, #0
    ea36:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    ea38:	687b      	ldr	r3, [r7, #4]
    ea3a:	2200      	movs	r2, #0
    ea3c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    ea3e:	687b      	ldr	r3, [r7, #4]
    ea40:	4618      	mov	r0, r3
    ea42:	370c      	adds	r7, #12
    ea44:	46bd      	mov	sp, r7
    ea46:	bc80      	pop	{r7}
    ea48:	4770      	bx	lr
	...

0000ea4c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    ea4c:	b580      	push	{r7, lr}
    ea4e:	b086      	sub	sp, #24
    ea50:	af00      	add	r7, sp, #0
    ea52:	60f8      	str	r0, [r7, #12]
    ea54:	60b9      	str	r1, [r7, #8]
    ea56:	607a      	str	r2, [r7, #4]
    ea58:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    ea5a:	68f8      	ldr	r0, [r7, #12]
    ea5c:	4b0d      	ldr	r3, [pc, #52]	; (ea94 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    ea5e:	4798      	blx	r3
	task->interval = interval;
    ea60:	68fb      	ldr	r3, [r7, #12]
    ea62:	699b      	ldr	r3, [r3, #24]
    ea64:	687a      	ldr	r2, [r7, #4]
    ea66:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    ea68:	68fb      	ldr	r3, [r7, #12]
    ea6a:	699b      	ldr	r3, [r3, #24]
    ea6c:	68ba      	ldr	r2, [r7, #8]
    ea6e:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    ea70:	68fb      	ldr	r3, [r7, #12]
    ea72:	699b      	ldr	r3, [r3, #24]
    ea74:	78fa      	ldrb	r2, [r7, #3]
    ea76:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    ea78:	68fb      	ldr	r3, [r7, #12]
    ea7a:	68da      	ldr	r2, [r3, #12]
    ea7c:	68fb      	ldr	r3, [r7, #12]
    ea7e:	699b      	ldr	r3, [r3, #24]
    ea80:	4619      	mov	r1, r3
    ea82:	4610      	mov	r0, r2
    ea84:	4b04      	ldr	r3, [pc, #16]	; (ea98 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    ea86:	4798      	blx	r3
    ea88:	6178      	str	r0, [r7, #20]
	
	return status;
    ea8a:	697b      	ldr	r3, [r7, #20]
}
    ea8c:	4618      	mov	r0, r3
    ea8e:	3718      	adds	r7, #24
    ea90:	46bd      	mov	sp, r7
    ea92:	bd80      	pop	{r7, pc}
    ea94:	0000eb11 	.word	0x0000eb11
    ea98:	0000309d 	.word	0x0000309d

0000ea9c <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
    ea9c:	b580      	push	{r7, lr}
    ea9e:	b086      	sub	sp, #24
    eaa0:	af00      	add	r7, sp, #0
    eaa2:	60f8      	str	r0, [r7, #12]
    eaa4:	60b9      	str	r1, [r7, #8]
    eaa6:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
    eaa8:	687a      	ldr	r2, [r7, #4]
    eaaa:	68b9      	ldr	r1, [r7, #8]
    eaac:	68f8      	ldr	r0, [r7, #12]
    eaae:	4b0c      	ldr	r3, [pc, #48]	; (eae0 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
    eab0:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
    eab2:	68fb      	ldr	r3, [r7, #12]
    eab4:	68db      	ldr	r3, [r3, #12]
    eab6:	681b      	ldr	r3, [r3, #0]
    eab8:	699b      	ldr	r3, [r3, #24]
    eaba:	68fa      	ldr	r2, [r7, #12]
    eabc:	68d2      	ldr	r2, [r2, #12]
    eabe:	3204      	adds	r2, #4
    eac0:	4610      	mov	r0, r2
    eac2:	4798      	blx	r3
    eac4:	4603      	mov	r3, r0
    eac6:	2b00      	cmp	r3, #0
    eac8:	d105      	bne.n	ead6 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
    eaca:	68fb      	ldr	r3, [r7, #12]
    eacc:	68db      	ldr	r3, [r3, #12]
    eace:	4618      	mov	r0, r3
    ead0:	4b04      	ldr	r3, [pc, #16]	; (eae4 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
    ead2:	4798      	blx	r3
    ead4:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
    ead6:	697b      	ldr	r3, [r7, #20]
}
    ead8:	4618      	mov	r0, r3
    eada:	3718      	adds	r7, #24
    eadc:	46bd      	mov	sp, r7
    eade:	bd80      	pop	{r7, pc}
    eae0:	0000eae9 	.word	0x0000eae9
    eae4:	00002fc9 	.word	0x00002fc9

0000eae8 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    eae8:	b590      	push	{r4, r7, lr}
    eaea:	b087      	sub	sp, #28
    eaec:	af00      	add	r7, sp, #0
    eaee:	60f8      	str	r0, [r7, #12]
    eaf0:	60b9      	str	r1, [r7, #8]
    eaf2:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    eaf4:	2301      	movs	r3, #1
    eaf6:	687a      	ldr	r2, [r7, #4]
    eaf8:	68b9      	ldr	r1, [r7, #8]
    eafa:	68f8      	ldr	r0, [r7, #12]
    eafc:	4c03      	ldr	r4, [pc, #12]	; (eb0c <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    eafe:	47a0      	blx	r4
    eb00:	6178      	str	r0, [r7, #20]
		return status;
    eb02:	697b      	ldr	r3, [r7, #20]
}
    eb04:	4618      	mov	r0, r3
    eb06:	371c      	adds	r7, #28
    eb08:	46bd      	mov	sp, r7
    eb0a:	bd90      	pop	{r4, r7, pc}
    eb0c:	0000ea4d 	.word	0x0000ea4d

0000eb10 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
		status=timer_start(timer_descr);
	}
	
	return status;
}
void	Timer_Class::ChooseAvailableTimerTask(void){
    eb10:	b480      	push	{r7}
    eb12:	b085      	sub	sp, #20
    eb14:	af00      	add	r7, sp, #0
    eb16:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    eb18:	2300      	movs	r3, #0
    eb1a:	73fb      	strb	r3, [r7, #15]
    eb1c:	7bfb      	ldrb	r3, [r7, #15]
    eb1e:	2b0f      	cmp	r3, #15
    eb20:	dc1c      	bgt.n	eb5c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x4c>
	{	
				
		j=ii%TASK_NUMBER;
    eb22:	7bfb      	ldrb	r3, [r7, #15]
    eb24:	f003 030f 	and.w	r3, r3, #15
    eb28:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    eb2a:	7bba      	ldrb	r2, [r7, #14]
    eb2c:	490f      	ldr	r1, [pc, #60]	; (eb6c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    eb2e:	4613      	mov	r3, r2
    eb30:	009b      	lsls	r3, r3, #2
    eb32:	4413      	add	r3, r2
    eb34:	009b      	lsls	r3, r3, #2
    eb36:	440b      	add	r3, r1
    eb38:	330c      	adds	r3, #12
    eb3a:	681b      	ldr	r3, [r3, #0]
    eb3c:	2b00      	cmp	r3, #0
    eb3e:	d109      	bne.n	eb54 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x44>
		{
			
			task=&taskArray[j];
    eb40:	7bba      	ldrb	r2, [r7, #14]
    eb42:	4613      	mov	r3, r2
    eb44:	009b      	lsls	r3, r3, #2
    eb46:	4413      	add	r3, r2
    eb48:	009b      	lsls	r3, r3, #2
    eb4a:	4a08      	ldr	r2, [pc, #32]	; (eb6c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    eb4c:	441a      	add	r2, r3
    eb4e:	687b      	ldr	r3, [r7, #4]
    eb50:	619a      	str	r2, [r3, #24]
			return;
    eb52:	e006      	b.n	eb62 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    eb54:	7bfb      	ldrb	r3, [r7, #15]
    eb56:	3301      	adds	r3, #1
    eb58:	73fb      	strb	r3, [r7, #15]
    eb5a:	e7df      	b.n	eb1c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    eb5c:	687b      	ldr	r3, [r7, #4]
    eb5e:	4a03      	ldr	r2, [pc, #12]	; (eb6c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    eb60:	619a      	str	r2, [r3, #24]

}
    eb62:	3714      	adds	r7, #20
    eb64:	46bd      	mov	sp, r7
    eb66:	bc80      	pop	{r7}
    eb68:	4770      	bx	lr
    eb6a:	bf00      	nop
    eb6c:	2000117c 	.word	0x2000117c

0000eb70 <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
Timer_Class arincTimer(&TIMER_ARINC);
    eb70:	b580      	push	{r7, lr}
    eb72:	b082      	sub	sp, #8
    eb74:	af00      	add	r7, sp, #0
    eb76:	6078      	str	r0, [r7, #4]
    eb78:	6039      	str	r1, [r7, #0]
    eb7a:	687b      	ldr	r3, [r7, #4]
    eb7c:	2b01      	cmp	r3, #1
    eb7e:	d131      	bne.n	ebe4 <_Z41__static_initialization_and_destruction_0ii+0x74>
    eb80:	683b      	ldr	r3, [r7, #0]
    eb82:	f64f 72ff 	movw	r2, #65535	; 0xffff
    eb86:	4293      	cmp	r3, r2
    eb88:	d12c      	bne.n	ebe4 <_Z41__static_initialization_and_destruction_0ii+0x74>
Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    eb8a:	4918      	ldr	r1, [pc, #96]	; (ebec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    eb8c:	4818      	ldr	r0, [pc, #96]	; (ebf0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    eb8e:	4b19      	ldr	r3, [pc, #100]	; (ebf4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    eb90:	4798      	blx	r3
    eb92:	4a19      	ldr	r2, [pc, #100]	; (ebf8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    eb94:	4919      	ldr	r1, [pc, #100]	; (ebfc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    eb96:	4816      	ldr	r0, [pc, #88]	; (ebf0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    eb98:	4b19      	ldr	r3, [pc, #100]	; (ec00 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    eb9a:	4798      	blx	r3
Timer_Class eventTimer(&TIMER_EVENT);
    eb9c:	4919      	ldr	r1, [pc, #100]	; (ec04 <_Z41__static_initialization_and_destruction_0ii+0x94>)
    eb9e:	481a      	ldr	r0, [pc, #104]	; (ec08 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    eba0:	4b14      	ldr	r3, [pc, #80]	; (ebf4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    eba2:	4798      	blx	r3
    eba4:	4a14      	ldr	r2, [pc, #80]	; (ebf8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    eba6:	4915      	ldr	r1, [pc, #84]	; (ebfc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    eba8:	4817      	ldr	r0, [pc, #92]	; (ec08 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    ebaa:	4b15      	ldr	r3, [pc, #84]	; (ec00 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    ebac:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    ebae:	4917      	ldr	r1, [pc, #92]	; (ec0c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
    ebb0:	4817      	ldr	r0, [pc, #92]	; (ec10 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    ebb2:	4b10      	ldr	r3, [pc, #64]	; (ebf4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    ebb4:	4798      	blx	r3
    ebb6:	4a10      	ldr	r2, [pc, #64]	; (ebf8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    ebb8:	4910      	ldr	r1, [pc, #64]	; (ebfc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    ebba:	4815      	ldr	r0, [pc, #84]	; (ec10 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    ebbc:	4b10      	ldr	r3, [pc, #64]	; (ec00 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    ebbe:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
    ebc0:	4914      	ldr	r1, [pc, #80]	; (ec14 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    ebc2:	4815      	ldr	r0, [pc, #84]	; (ec18 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    ebc4:	4b0b      	ldr	r3, [pc, #44]	; (ebf4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    ebc6:	4798      	blx	r3
    ebc8:	4a0b      	ldr	r2, [pc, #44]	; (ebf8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    ebca:	490c      	ldr	r1, [pc, #48]	; (ebfc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    ebcc:	4812      	ldr	r0, [pc, #72]	; (ec18 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    ebce:	4b0c      	ldr	r3, [pc, #48]	; (ec00 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    ebd0:	4798      	blx	r3
Timer_Class arincTimer(&TIMER_ARINC);
    ebd2:	4912      	ldr	r1, [pc, #72]	; (ec1c <_Z41__static_initialization_and_destruction_0ii+0xac>)
    ebd4:	4812      	ldr	r0, [pc, #72]	; (ec20 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    ebd6:	4b07      	ldr	r3, [pc, #28]	; (ebf4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    ebd8:	4798      	blx	r3
    ebda:	4a07      	ldr	r2, [pc, #28]	; (ebf8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    ebdc:	4907      	ldr	r1, [pc, #28]	; (ebfc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    ebde:	4810      	ldr	r0, [pc, #64]	; (ec20 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    ebe0:	4b07      	ldr	r3, [pc, #28]	; (ec00 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    ebe2:	4798      	blx	r3
    ebe4:	bf00      	nop
    ebe6:	3708      	adds	r7, #8
    ebe8:	46bd      	mov	sp, r7
    ebea:	bd80      	pop	{r7, pc}
    ebec:	200014f8 	.word	0x200014f8
    ebf0:	200012c0 	.word	0x200012c0
    ebf4:	0000ea01 	.word	0x0000ea01
    ebf8:	20000000 	.word	0x20000000
    ebfc:	0000ea31 	.word	0x0000ea31
    ec00:	0000fbc1 	.word	0x0000fbc1
    ec04:	2000156c 	.word	0x2000156c
    ec08:	200012dc 	.word	0x200012dc
    ec0c:	20001670 	.word	0x20001670
    ec10:	200012f8 	.word	0x200012f8
    ec14:	2000158c 	.word	0x2000158c
    ec18:	20001314 	.word	0x20001314
    ec1c:	200015f0 	.word	0x200015f0
    ec20:	20001330 	.word	0x20001330

0000ec24 <_GLOBAL__sub_I_ptrTimerClass>:
    ec24:	b580      	push	{r7, lr}
    ec26:	af00      	add	r7, sp, #0
    ec28:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ec2c:	2001      	movs	r0, #1
    ec2e:	4b01      	ldr	r3, [pc, #4]	; (ec34 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    ec30:	4798      	blx	r3
    ec32:	bd80      	pop	{r7, pc}
    ec34:	0000eb71 	.word	0x0000eb71

0000ec38 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    ec38:	b480      	push	{r7}
    ec3a:	b083      	sub	sp, #12
    ec3c:	af00      	add	r7, sp, #0
    ec3e:	6078      	str	r0, [r7, #4]
    ec40:	4a05      	ldr	r2, [pc, #20]	; (ec58 <_ZN5PrintC1Ev+0x20>)
    ec42:	687b      	ldr	r3, [r7, #4]
    ec44:	601a      	str	r2, [r3, #0]
    ec46:	687b      	ldr	r3, [r7, #4]
    ec48:	2200      	movs	r2, #0
    ec4a:	605a      	str	r2, [r3, #4]
    ec4c:	687b      	ldr	r3, [r7, #4]
    ec4e:	4618      	mov	r0, r3
    ec50:	370c      	adds	r7, #12
    ec52:	46bd      	mov	sp, r7
    ec54:	bc80      	pop	{r7}
    ec56:	4770      	bx	lr
    ec58:	000103c8 	.word	0x000103c8

0000ec5c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    ec5c:	b480      	push	{r7}
    ec5e:	b083      	sub	sp, #12
    ec60:	af00      	add	r7, sp, #0
    ec62:	6078      	str	r0, [r7, #4]
    ec64:	2300      	movs	r3, #0
    ec66:	4618      	mov	r0, r3
    ec68:	370c      	adds	r7, #12
    ec6a:	46bd      	mov	sp, r7
    ec6c:	bc80      	pop	{r7}
    ec6e:	4770      	bx	lr

0000ec70 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    ec70:	b480      	push	{r7}
    ec72:	b083      	sub	sp, #12
    ec74:	af00      	add	r7, sp, #0
    ec76:	6078      	str	r0, [r7, #4]
    ec78:	bf00      	nop
    ec7a:	370c      	adds	r7, #12
    ec7c:	46bd      	mov	sp, r7
    ec7e:	bc80      	pop	{r7}
    ec80:	4770      	bx	lr
	...

0000ec84 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    ec84:	b580      	push	{r7, lr}
    ec86:	b082      	sub	sp, #8
    ec88:	af00      	add	r7, sp, #0
    ec8a:	6078      	str	r0, [r7, #4]
    ec8c:	687b      	ldr	r3, [r7, #4]
    ec8e:	4618      	mov	r0, r3
    ec90:	4b06      	ldr	r3, [pc, #24]	; (ecac <_ZN6StreamC1Ev+0x28>)
    ec92:	4798      	blx	r3
    ec94:	4a06      	ldr	r2, [pc, #24]	; (ecb0 <_ZN6StreamC1Ev+0x2c>)
    ec96:	687b      	ldr	r3, [r7, #4]
    ec98:	601a      	str	r2, [r3, #0]
    ec9a:	687b      	ldr	r3, [r7, #4]
    ec9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    eca0:	609a      	str	r2, [r3, #8]
    eca2:	687b      	ldr	r3, [r7, #4]
    eca4:	4618      	mov	r0, r3
    eca6:	3708      	adds	r7, #8
    eca8:	46bd      	mov	sp, r7
    ecaa:	bd80      	pop	{r7, pc}
    ecac:	0000ec39 	.word	0x0000ec39
    ecb0:	0001038c 	.word	0x0001038c

0000ecb4 <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    ecb4:	b480      	push	{r7}
    ecb6:	b083      	sub	sp, #12
    ecb8:	af00      	add	r7, sp, #0
    ecba:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    ecbc:	4b06      	ldr	r3, [pc, #24]	; (ecd8 <_ZL10USBTimeoutPK10timer_task+0x24>)
    ecbe:	681b      	ldr	r3, [r3, #0]
    ecc0:	2201      	movs	r2, #1
    ecc2:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    ecc4:	4b04      	ldr	r3, [pc, #16]	; (ecd8 <_ZL10USBTimeoutPK10timer_task+0x24>)
    ecc6:	681b      	ldr	r3, [r3, #0]
    ecc8:	2200      	movs	r2, #0
    ecca:	741a      	strb	r2, [r3, #16]
	
}
    eccc:	bf00      	nop
    ecce:	370c      	adds	r7, #12
    ecd0:	46bd      	mov	sp, r7
    ecd2:	bc80      	pop	{r7}
    ecd4:	4770      	bx	lr
    ecd6:	bf00      	nop
    ecd8:	2000134c 	.word	0x2000134c

0000ecdc <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    ecdc:	b480      	push	{r7}
    ecde:	b083      	sub	sp, #12
    ece0:	af00      	add	r7, sp, #0
    ece2:	4603      	mov	r3, r0
    ece4:	603a      	str	r2, [r7, #0]
    ece6:	71fb      	strb	r3, [r7, #7]
    ece8:	460b      	mov	r3, r1
    ecea:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    ecec:	4b08      	ldr	r3, [pc, #32]	; (ed10 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ecee:	681b      	ldr	r3, [r3, #0]
    ecf0:	2201      	movs	r2, #1
    ecf2:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    ecf4:	4b06      	ldr	r3, [pc, #24]	; (ed10 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ecf6:	681b      	ldr	r3, [r3, #0]
    ecf8:	2201      	movs	r2, #1
    ecfa:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    ecfc:	4b04      	ldr	r3, [pc, #16]	; (ed10 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ecfe:	681b      	ldr	r3, [r3, #0]
    ed00:	2201      	movs	r2, #1
    ed02:	741a      	strb	r2, [r3, #16]


	return false;
    ed04:	2300      	movs	r3, #0
}
    ed06:	4618      	mov	r0, r3
    ed08:	370c      	adds	r7, #12
    ed0a:	46bd      	mov	sp, r7
    ed0c:	bc80      	pop	{r7}
    ed0e:	4770      	bx	lr
    ed10:	2000134c 	.word	0x2000134c

0000ed14 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    ed14:	b480      	push	{r7}
    ed16:	b083      	sub	sp, #12
    ed18:	af00      	add	r7, sp, #0
    ed1a:	4603      	mov	r3, r0
    ed1c:	603a      	str	r2, [r7, #0]
    ed1e:	71fb      	strb	r3, [r7, #7]
    ed20:	460b      	mov	r3, r1
    ed22:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    ed24:	4b08      	ldr	r3, [pc, #32]	; (ed48 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    ed26:	681b      	ldr	r3, [r3, #0]
    ed28:	2201      	movs	r2, #1
    ed2a:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    ed2c:	4b06      	ldr	r3, [pc, #24]	; (ed48 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    ed2e:	681b      	ldr	r3, [r3, #0]
    ed30:	2201      	movs	r2, #1
    ed32:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    ed34:	4b04      	ldr	r3, [pc, #16]	; (ed48 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    ed36:	681b      	ldr	r3, [r3, #0]
    ed38:	2201      	movs	r2, #1
    ed3a:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    ed3c:	2300      	movs	r3, #0
}
    ed3e:	4618      	mov	r0, r3
    ed40:	370c      	adds	r7, #12
    ed42:	46bd      	mov	sp, r7
    ed44:	bc80      	pop	{r7}
    ed46:	4770      	bx	lr
    ed48:	2000134c 	.word	0x2000134c

0000ed4c <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    ed4c:	b580      	push	{r7, lr}
    ed4e:	b082      	sub	sp, #8
    ed50:	af00      	add	r7, sp, #0
    ed52:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    ed54:	793b      	ldrb	r3, [r7, #4]
    ed56:	f003 0301 	and.w	r3, r3, #1
    ed5a:	b2db      	uxtb	r3, r3
    ed5c:	2b00      	cmp	r3, #0
    ed5e:	d013      	beq.n	ed88 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    ed60:	490c      	ldr	r1, [pc, #48]	; (ed94 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    ed62:	2000      	movs	r0, #0
    ed64:	4b0c      	ldr	r3, [pc, #48]	; (ed98 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    ed66:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    ed68:	490c      	ldr	r1, [pc, #48]	; (ed9c <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    ed6a:	2001      	movs	r0, #1
    ed6c:	4b0a      	ldr	r3, [pc, #40]	; (ed98 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    ed6e:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    ed70:	4b0b      	ldr	r3, [pc, #44]	; (eda0 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    ed72:	681b      	ldr	r3, [r3, #0]
    ed74:	2201      	movs	r2, #1
    ed76:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    ed78:	4b09      	ldr	r3, [pc, #36]	; (eda0 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    ed7a:	681b      	ldr	r3, [r3, #0]
    ed7c:	2201      	movs	r2, #1
    ed7e:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    ed80:	4b07      	ldr	r3, [pc, #28]	; (eda0 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    ed82:	681b      	ldr	r3, [r3, #0]
    ed84:	2201      	movs	r2, #1
    ed86:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    ed88:	2300      	movs	r3, #0
}
    ed8a:	4618      	mov	r0, r3
    ed8c:	3708      	adds	r7, #8
    ed8e:	46bd      	mov	sp, r7
    ed90:	bd80      	pop	{r7, pc}
    ed92:	bf00      	nop
    ed94:	0000ecdd 	.word	0x0000ecdd
    ed98:	0000cd49 	.word	0x0000cd49
    ed9c:	0000ed15 	.word	0x0000ed15
    eda0:	2000134c 	.word	0x2000134c

0000eda4 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    eda4:	b580      	push	{r7, lr}
    eda6:	b082      	sub	sp, #8
    eda8:	af00      	add	r7, sp, #0
    edaa:	6078      	str	r0, [r7, #4]
    edac:	687b      	ldr	r3, [r7, #4]
    edae:	4618      	mov	r0, r3
    edb0:	4b0a      	ldr	r3, [pc, #40]	; (eddc <_ZN9CDC_ClassC1Ev+0x38>)
    edb2:	4798      	blx	r3
    edb4:	687b      	ldr	r3, [r7, #4]
    edb6:	3310      	adds	r3, #16
    edb8:	4618      	mov	r0, r3
    edba:	4b09      	ldr	r3, [pc, #36]	; (ede0 <_ZN9CDC_ClassC1Ev+0x3c>)
    edbc:	4798      	blx	r3
    edbe:	4a09      	ldr	r2, [pc, #36]	; (ede4 <_ZN9CDC_ClassC1Ev+0x40>)
    edc0:	687b      	ldr	r3, [r7, #4]
    edc2:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    edc4:	687b      	ldr	r3, [r7, #4]
    edc6:	f04f 32ff 	mov.w	r2, #4294967295
    edca:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    edcc:	4a06      	ldr	r2, [pc, #24]	; (ede8 <_ZN9CDC_ClassC1Ev+0x44>)
    edce:	687b      	ldr	r3, [r7, #4]
    edd0:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    edd2:	687b      	ldr	r3, [r7, #4]
    edd4:	4618      	mov	r0, r3
    edd6:	3708      	adds	r7, #8
    edd8:	46bd      	mov	sp, r7
    edda:	bd80      	pop	{r7, pc}
    eddc:	0000ec85 	.word	0x0000ec85
    ede0:	0000f3e9 	.word	0x0000f3e9
    ede4:	0001035c 	.word	0x0001035c
    ede8:	2000134c 	.word	0x2000134c

0000edec <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    edec:	b580      	push	{r7, lr}
    edee:	b082      	sub	sp, #8
    edf0:	af00      	add	r7, sp, #0
    edf2:	6078      	str	r0, [r7, #4]
    edf4:	4a06      	ldr	r2, [pc, #24]	; (ee10 <_ZN9CDC_ClassD1Ev+0x24>)
    edf6:	687b      	ldr	r3, [r7, #4]
    edf8:	601a      	str	r2, [r3, #0]
    edfa:	687b      	ldr	r3, [r7, #4]
    edfc:	3310      	adds	r3, #16
    edfe:	4618      	mov	r0, r3
    ee00:	4b04      	ldr	r3, [pc, #16]	; (ee14 <_ZN9CDC_ClassD1Ev+0x28>)
    ee02:	4798      	blx	r3
{
} //~CDC_Class
    ee04:	687b      	ldr	r3, [r7, #4]
    ee06:	4618      	mov	r0, r3
    ee08:	3708      	adds	r7, #8
    ee0a:	46bd      	mov	sp, r7
    ee0c:	bd80      	pop	{r7, pc}
    ee0e:	bf00      	nop
    ee10:	0001035c 	.word	0x0001035c
    ee14:	0000f409 	.word	0x0000f409

0000ee18 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    ee18:	b580      	push	{r7, lr}
    ee1a:	b082      	sub	sp, #8
    ee1c:	af00      	add	r7, sp, #0
    ee1e:	6078      	str	r0, [r7, #4]
	
	OnInit();
    ee20:	687b      	ldr	r3, [r7, #4]
    ee22:	3310      	adds	r3, #16
    ee24:	4618      	mov	r0, r3
    ee26:	4b09      	ldr	r3, [pc, #36]	; (ee4c <_ZN9CDC_Class4InitEv+0x34>)
    ee28:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    ee2a:	4909      	ldr	r1, [pc, #36]	; (ee50 <_ZN9CDC_Class4InitEv+0x38>)
    ee2c:	2003      	movs	r0, #3
    ee2e:	4b09      	ldr	r3, [pc, #36]	; (ee54 <_ZN9CDC_Class4InitEv+0x3c>)
    ee30:	4798      	blx	r3
	delay_ms(100);
    ee32:	2064      	movs	r0, #100	; 0x64
    ee34:	4b08      	ldr	r3, [pc, #32]	; (ee58 <_ZN9CDC_Class4InitEv+0x40>)
    ee36:	4798      	blx	r3
		
	if (connected)
    ee38:	687b      	ldr	r3, [r7, #4]
    ee3a:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    ee3c:	2064      	movs	r0, #100	; 0x64
    ee3e:	4b06      	ldr	r3, [pc, #24]	; (ee58 <_ZN9CDC_Class4InitEv+0x40>)
    ee40:	4798      	blx	r3

	

}
    ee42:	bf00      	nop
    ee44:	3708      	adds	r7, #8
    ee46:	46bd      	mov	sp, r7
    ee48:	bd80      	pop	{r7, pc}
    ee4a:	bf00      	nop
    ee4c:	0000f41d 	.word	0x0000f41d
    ee50:	0000ed4d 	.word	0x0000ed4d
    ee54:	0000cd49 	.word	0x0000cd49
    ee58:	00002501 	.word	0x00002501

0000ee5c <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    ee5c:	b580      	push	{r7, lr}
    ee5e:	b082      	sub	sp, #8
    ee60:	af00      	add	r7, sp, #0
    ee62:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    ee64:	4b03      	ldr	r3, [pc, #12]	; (ee74 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    ee66:	4798      	blx	r3
    ee68:	4603      	mov	r3, r0
	
}
    ee6a:	4618      	mov	r0, r3
    ee6c:	3708      	adds	r7, #8
    ee6e:	46bd      	mov	sp, r7
    ee70:	bd80      	pop	{r7, pc}
    ee72:	bf00      	nop
    ee74:	0000cdc1 	.word	0x0000cdc1

0000ee78 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    ee78:	b580      	push	{r7, lr}
    ee7a:	b084      	sub	sp, #16
    ee7c:	af00      	add	r7, sp, #0
    ee7e:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    ee80:	687b      	ldr	r3, [r7, #4]
    ee82:	699b      	ldr	r3, [r3, #24]
    ee84:	f1b3 3fff 	cmp.w	r3, #4294967295
    ee88:	bf14      	ite	ne
    ee8a:	2301      	movne	r3, #1
    ee8c:	2300      	moveq	r3, #0
    ee8e:	b2db      	uxtb	r3, r3
    ee90:	2b00      	cmp	r3, #0
    ee92:	d002      	beq.n	ee9a <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    ee94:	687b      	ldr	r3, [r7, #4]
    ee96:	699b      	ldr	r3, [r3, #24]
    ee98:	e011      	b.n	eebe <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    ee9a:	687b      	ldr	r3, [r7, #4]
    ee9c:	681b      	ldr	r3, [r3, #0]
    ee9e:	331c      	adds	r3, #28
    eea0:	681b      	ldr	r3, [r3, #0]
    eea2:	f107 010f 	add.w	r1, r7, #15
    eea6:	2201      	movs	r2, #1
    eea8:	6878      	ldr	r0, [r7, #4]
    eeaa:	4798      	blx	r3
    eeac:	4602      	mov	r2, r0
    eeae:	687b      	ldr	r3, [r7, #4]
    eeb0:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    eeb2:	7bfb      	ldrb	r3, [r7, #15]
    eeb4:	461a      	mov	r2, r3
    eeb6:	687b      	ldr	r3, [r7, #4]
    eeb8:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    eeba:	687b      	ldr	r3, [r7, #4]
    eebc:	699b      	ldr	r3, [r3, #24]
}
    eebe:	4618      	mov	r0, r3
    eec0:	3710      	adds	r7, #16
    eec2:	46bd      	mov	sp, r7
    eec4:	bd80      	pop	{r7, pc}
	...

0000eec8 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    eec8:	b580      	push	{r7, lr}
    eeca:	b086      	sub	sp, #24
    eecc:	af00      	add	r7, sp, #0
    eece:	60f8      	str	r0, [r7, #12]
    eed0:	60b9      	str	r1, [r7, #8]
    eed2:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    eed4:	68fb      	ldr	r3, [r7, #12]
    eed6:	7c1b      	ldrb	r3, [r3, #16]
    eed8:	b2db      	uxtb	r3, r3
    eeda:	2b00      	cmp	r3, #0
    eedc:	d02e      	beq.n	ef3c <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    eede:	687a      	ldr	r2, [r7, #4]
    eee0:	4613      	mov	r3, r2
    eee2:	009b      	lsls	r3, r3, #2
    eee4:	4413      	add	r3, r2
    eee6:	005b      	lsls	r3, r3, #1
    eee8:	461a      	mov	r2, r3
    eeea:	4918      	ldr	r1, [pc, #96]	; (ef4c <_ZN9CDC_Class8readDataEPvl+0x84>)
    eeec:	4818      	ldr	r0, [pc, #96]	; (ef50 <_ZN9CDC_Class8readDataEPvl+0x88>)
    eeee:	4b19      	ldr	r3, [pc, #100]	; (ef54 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    eef0:	4798      	blx	r3
		rxReady=false;
    eef2:	68fb      	ldr	r3, [r7, #12]
    eef4:	2200      	movs	r2, #0
    eef6:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    eef8:	687b      	ldr	r3, [r7, #4]
    eefa:	4619      	mov	r1, r3
    eefc:	68b8      	ldr	r0, [r7, #8]
    eefe:	4b16      	ldr	r3, [pc, #88]	; (ef58 <_ZN9CDC_Class8readDataEPvl+0x90>)
    ef00:	4798      	blx	r3
    ef02:	4603      	mov	r3, r0
    ef04:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    ef06:	68fb      	ldr	r3, [r7, #12]
    ef08:	7d5b      	ldrb	r3, [r3, #21]
    ef0a:	b2db      	uxtb	r3, r3
    ef0c:	f083 0301 	eor.w	r3, r3, #1
    ef10:	b2db      	uxtb	r3, r3
    ef12:	2b00      	cmp	r3, #0
    ef14:	d006      	beq.n	ef24 <_ZN9CDC_Class8readDataEPvl+0x5c>
    ef16:	68fb      	ldr	r3, [r7, #12]
    ef18:	7c1b      	ldrb	r3, [r3, #16]
    ef1a:	b2db      	uxtb	r3, r3
    ef1c:	2b00      	cmp	r3, #0
    ef1e:	d001      	beq.n	ef24 <_ZN9CDC_Class8readDataEPvl+0x5c>
    ef20:	2301      	movs	r3, #1
    ef22:	e000      	b.n	ef26 <_ZN9CDC_Class8readDataEPvl+0x5e>
    ef24:	2300      	movs	r3, #0
    ef26:	2b00      	cmp	r3, #0
    ef28:	d000      	beq.n	ef2c <_ZN9CDC_Class8readDataEPvl+0x64>
    ef2a:	e7ec      	b.n	ef06 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    ef2c:	4808      	ldr	r0, [pc, #32]	; (ef50 <_ZN9CDC_Class8readDataEPvl+0x88>)
    ef2e:	4b0b      	ldr	r3, [pc, #44]	; (ef5c <_ZN9CDC_Class8readDataEPvl+0x94>)
    ef30:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    ef32:	4906      	ldr	r1, [pc, #24]	; (ef4c <_ZN9CDC_Class8readDataEPvl+0x84>)
    ef34:	4806      	ldr	r0, [pc, #24]	; (ef50 <_ZN9CDC_Class8readDataEPvl+0x88>)
    ef36:	4b0a      	ldr	r3, [pc, #40]	; (ef60 <_ZN9CDC_Class8readDataEPvl+0x98>)
    ef38:	4798      	blx	r3
    ef3a:	e001      	b.n	ef40 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    ef3c:	2300      	movs	r3, #0
    ef3e:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    ef40:	7dfb      	ldrb	r3, [r7, #23]
}
    ef42:	4618      	mov	r0, r3
    ef44:	3718      	adds	r7, #24
    ef46:	46bd      	mov	sp, r7
    ef48:	bd80      	pop	{r7, pc}
    ef4a:	bf00      	nop
    ef4c:	0000ecb5 	.word	0x0000ecb5
    ef50:	20001408 	.word	0x20001408
    ef54:	0000f689 	.word	0x0000f689
    ef58:	0000cc9d 	.word	0x0000cc9d
    ef5c:	0000f5a9 	.word	0x0000f5a9
    ef60:	0000f6ed 	.word	0x0000f6ed

0000ef64 <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
    ef64:	b580      	push	{r7, lr}
    ef66:	b086      	sub	sp, #24
    ef68:	af00      	add	r7, sp, #0
    ef6a:	60f8      	str	r0, [r7, #12]
    ef6c:	60b9      	str	r1, [r7, #8]
    ef6e:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
    ef70:	68fb      	ldr	r3, [r7, #12]
    ef72:	2200      	movs	r2, #0
    ef74:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    ef76:	687b      	ldr	r3, [r7, #4]
    ef78:	4619      	mov	r1, r3
    ef7a:	68b8      	ldr	r0, [r7, #8]
    ef7c:	4b04      	ldr	r3, [pc, #16]	; (ef90 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
    ef7e:	4798      	blx	r3
    ef80:	4603      	mov	r3, r0
    ef82:	617b      	str	r3, [r7, #20]
	return r;
    ef84:	697b      	ldr	r3, [r7, #20]
}
    ef86:	4618      	mov	r0, r3
    ef88:	3718      	adds	r7, #24
    ef8a:	46bd      	mov	sp, r7
    ef8c:	bd80      	pop	{r7, pc}
    ef8e:	bf00      	nop
    ef90:	0000cc9d 	.word	0x0000cc9d

0000ef94 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    ef94:	b580      	push	{r7, lr}
    ef96:	b084      	sub	sp, #16
    ef98:	af00      	add	r7, sp, #0
    ef9a:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    ef9c:	687b      	ldr	r3, [r7, #4]
    ef9e:	2200      	movs	r2, #0
    efa0:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    efa2:	f107 030f 	add.w	r3, r7, #15
    efa6:	2101      	movs	r1, #1
    efa8:	4618      	mov	r0, r3
    efaa:	4b08      	ldr	r3, [pc, #32]	; (efcc <_ZN9CDC_Class4readEv+0x38>)
    efac:	4798      	blx	r3
	while(!rxReady);
    efae:	687b      	ldr	r3, [r7, #4]
    efb0:	7d5b      	ldrb	r3, [r3, #21]
    efb2:	b2db      	uxtb	r3, r3
    efb4:	f083 0301 	eor.w	r3, r3, #1
    efb8:	b2db      	uxtb	r3, r3
    efba:	2b00      	cmp	r3, #0
    efbc:	d000      	beq.n	efc0 <_ZN9CDC_Class4readEv+0x2c>
    efbe:	e7f6      	b.n	efae <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    efc0:	7bfb      	ldrb	r3, [r7, #15]
}
    efc2:	4618      	mov	r0, r3
    efc4:	3710      	adds	r7, #16
    efc6:	46bd      	mov	sp, r7
    efc8:	bd80      	pop	{r7, pc}
    efca:	bf00      	nop
    efcc:	0000cc9d 	.word	0x0000cc9d

0000efd0 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    efd0:	b580      	push	{r7, lr}
    efd2:	b082      	sub	sp, #8
    efd4:	af00      	add	r7, sp, #0
    efd6:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    efd8:	687b      	ldr	r3, [r7, #4]
    efda:	331c      	adds	r3, #28
    efdc:	2140      	movs	r1, #64	; 0x40
    efde:	4618      	mov	r0, r3
    efe0:	4b02      	ldr	r3, [pc, #8]	; (efec <_ZN9CDC_Class5flushEv+0x1c>)
    efe2:	4798      	blx	r3
}
    efe4:	bf00      	nop
    efe6:	3708      	adds	r7, #8
    efe8:	46bd      	mov	sp, r7
    efea:	bd80      	pop	{r7, pc}
    efec:	0000cce1 	.word	0x0000cce1

0000eff0 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    eff0:	b580      	push	{r7, lr}
    eff2:	b082      	sub	sp, #8
    eff4:	af00      	add	r7, sp, #0
    eff6:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    eff8:	4b02      	ldr	r3, [pc, #8]	; (f004 <_ZN9CDC_Class5clearEv+0x14>)
    effa:	4798      	blx	r3
}
    effc:	bf00      	nop
    effe:	3708      	adds	r7, #8
    f000:	46bd      	mov	sp, r7
    f002:	bd80      	pop	{r7, pc}
    f004:	0000cd25 	.word	0x0000cd25

0000f008 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    f008:	b580      	push	{r7, lr}
    f00a:	b082      	sub	sp, #8
    f00c:	af00      	add	r7, sp, #0
    f00e:	6078      	str	r0, [r7, #4]
    f010:	460b      	mov	r3, r1
    f012:	70fb      	strb	r3, [r7, #3]
	if (connected){
    f014:	687b      	ldr	r3, [r7, #4]
    f016:	7c1b      	ldrb	r3, [r3, #16]
    f018:	b2db      	uxtb	r3, r3
    f01a:	2b00      	cmp	r3, #0
    f01c:	d012      	beq.n	f044 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    f01e:	687b      	ldr	r3, [r7, #4]
    f020:	7d1b      	ldrb	r3, [r3, #20]
    f022:	b2db      	uxtb	r3, r3
    f024:	f083 0301 	eor.w	r3, r3, #1
    f028:	b2db      	uxtb	r3, r3
    f02a:	2b00      	cmp	r3, #0
    f02c:	d000      	beq.n	f030 <_ZN9CDC_Class5writeEh+0x28>
    f02e:	e7f6      	b.n	f01e <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    f030:	687b      	ldr	r3, [r7, #4]
    f032:	681b      	ldr	r3, [r3, #0]
    f034:	3324      	adds	r3, #36	; 0x24
    f036:	681b      	ldr	r3, [r3, #0]
    f038:	1cf9      	adds	r1, r7, #3
    f03a:	2201      	movs	r2, #1
    f03c:	6878      	ldr	r0, [r7, #4]
    f03e:	4798      	blx	r3
    f040:	4603      	mov	r3, r0
    f042:	e000      	b.n	f046 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    f044:	2300      	movs	r3, #0
	}
		
}
    f046:	4618      	mov	r0, r3
    f048:	3708      	adds	r7, #8
    f04a:	46bd      	mov	sp, r7
    f04c:	bd80      	pop	{r7, pc}
	...

0000f050 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    f050:	b580      	push	{r7, lr}
    f052:	b086      	sub	sp, #24
    f054:	af00      	add	r7, sp, #0
    f056:	60f8      	str	r0, [r7, #12]
    f058:	60b9      	str	r1, [r7, #8]
    f05a:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    f05c:	68fb      	ldr	r3, [r7, #12]
    f05e:	7c1b      	ldrb	r3, [r3, #16]
    f060:	b2db      	uxtb	r3, r3
    f062:	2b00      	cmp	r3, #0
    f064:	d02f      	beq.n	f0c6 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    f066:	687a      	ldr	r2, [r7, #4]
    f068:	4613      	mov	r3, r2
    f06a:	009b      	lsls	r3, r3, #2
    f06c:	4413      	add	r3, r2
    f06e:	005b      	lsls	r3, r3, #1
    f070:	461a      	mov	r2, r3
    f072:	4917      	ldr	r1, [pc, #92]	; (f0d0 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    f074:	4817      	ldr	r0, [pc, #92]	; (f0d4 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    f076:	4b18      	ldr	r3, [pc, #96]	; (f0d8 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    f078:	4798      	blx	r3
		txReady=false;
    f07a:	68fb      	ldr	r3, [r7, #12]
    f07c:	2200      	movs	r2, #0
    f07e:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    f080:	687b      	ldr	r3, [r7, #4]
    f082:	4619      	mov	r1, r3
    f084:	68b8      	ldr	r0, [r7, #8]
    f086:	4b15      	ldr	r3, [pc, #84]	; (f0dc <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    f088:	4798      	blx	r3
    f08a:	4603      	mov	r3, r0
    f08c:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    f08e:	68fb      	ldr	r3, [r7, #12]
    f090:	7d1b      	ldrb	r3, [r3, #20]
    f092:	b2db      	uxtb	r3, r3
    f094:	f083 0301 	eor.w	r3, r3, #1
    f098:	b2db      	uxtb	r3, r3
    f09a:	2b00      	cmp	r3, #0
    f09c:	d006      	beq.n	f0ac <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    f09e:	68fb      	ldr	r3, [r7, #12]
    f0a0:	7c1b      	ldrb	r3, [r3, #16]
    f0a2:	b2db      	uxtb	r3, r3
    f0a4:	2b00      	cmp	r3, #0
    f0a6:	d001      	beq.n	f0ac <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    f0a8:	2301      	movs	r3, #1
    f0aa:	e000      	b.n	f0ae <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    f0ac:	2300      	movs	r3, #0
    f0ae:	2b00      	cmp	r3, #0
    f0b0:	d000      	beq.n	f0b4 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    f0b2:	e7ec      	b.n	f08e <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    f0b4:	4807      	ldr	r0, [pc, #28]	; (f0d4 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    f0b6:	4b0a      	ldr	r3, [pc, #40]	; (f0e0 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    f0b8:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    f0ba:	4905      	ldr	r1, [pc, #20]	; (f0d0 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    f0bc:	4805      	ldr	r0, [pc, #20]	; (f0d4 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    f0be:	4b09      	ldr	r3, [pc, #36]	; (f0e4 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    f0c0:	4798      	blx	r3
		return r;
    f0c2:	697b      	ldr	r3, [r7, #20]
    f0c4:	e000      	b.n	f0c8 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    f0c6:	2300      	movs	r3, #0
	}
	

}
    f0c8:	4618      	mov	r0, r3
    f0ca:	3718      	adds	r7, #24
    f0cc:	46bd      	mov	sp, r7
    f0ce:	bd80      	pop	{r7, pc}
    f0d0:	0000ecb5 	.word	0x0000ecb5
    f0d4:	20001408 	.word	0x20001408
    f0d8:	0000f689 	.word	0x0000f689
    f0dc:	0000cce1 	.word	0x0000cce1
    f0e0:	0000f5a9 	.word	0x0000f5a9
    f0e4:	0000f6ed 	.word	0x0000f6ed

0000f0e8 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    f0e8:	b580      	push	{r7, lr}
    f0ea:	b086      	sub	sp, #24
    f0ec:	af00      	add	r7, sp, #0
    f0ee:	60f8      	str	r0, [r7, #12]
    f0f0:	60b9      	str	r1, [r7, #8]
    f0f2:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    f0f4:	68fb      	ldr	r3, [r7, #12]
    f0f6:	2200      	movs	r2, #0
    f0f8:	751a      	strb	r2, [r3, #20]

 	if (connected){
    f0fa:	68fb      	ldr	r3, [r7, #12]
    f0fc:	7c1b      	ldrb	r3, [r3, #16]
    f0fe:	b2db      	uxtb	r3, r3
    f100:	2b00      	cmp	r3, #0
    f102:	d02a      	beq.n	f15a <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    f104:	687a      	ldr	r2, [r7, #4]
    f106:	4613      	mov	r3, r2
    f108:	009b      	lsls	r3, r3, #2
    f10a:	4413      	add	r3, r2
    f10c:	005b      	lsls	r3, r3, #1
    f10e:	461a      	mov	r2, r3
    f110:	4915      	ldr	r1, [pc, #84]	; (f168 <_ZN9CDC_Class5writeEPKhj+0x80>)
    f112:	4816      	ldr	r0, [pc, #88]	; (f16c <_ZN9CDC_Class5writeEPKhj+0x84>)
    f114:	4b16      	ldr	r3, [pc, #88]	; (f170 <_ZN9CDC_Class5writeEPKhj+0x88>)
    f116:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    f118:	6879      	ldr	r1, [r7, #4]
    f11a:	68b8      	ldr	r0, [r7, #8]
    f11c:	4b15      	ldr	r3, [pc, #84]	; (f174 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    f11e:	4798      	blx	r3
    f120:	4603      	mov	r3, r0
    f122:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    f124:	68fb      	ldr	r3, [r7, #12]
    f126:	7d1b      	ldrb	r3, [r3, #20]
    f128:	b2db      	uxtb	r3, r3
    f12a:	f083 0301 	eor.w	r3, r3, #1
    f12e:	b2db      	uxtb	r3, r3
    f130:	2b00      	cmp	r3, #0
    f132:	d006      	beq.n	f142 <_ZN9CDC_Class5writeEPKhj+0x5a>
    f134:	68fb      	ldr	r3, [r7, #12]
    f136:	7c1b      	ldrb	r3, [r3, #16]
    f138:	b2db      	uxtb	r3, r3
    f13a:	2b00      	cmp	r3, #0
    f13c:	d001      	beq.n	f142 <_ZN9CDC_Class5writeEPKhj+0x5a>
    f13e:	2301      	movs	r3, #1
    f140:	e000      	b.n	f144 <_ZN9CDC_Class5writeEPKhj+0x5c>
    f142:	2300      	movs	r3, #0
    f144:	2b00      	cmp	r3, #0
    f146:	d000      	beq.n	f14a <_ZN9CDC_Class5writeEPKhj+0x62>
    f148:	e7ec      	b.n	f124 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    f14a:	4808      	ldr	r0, [pc, #32]	; (f16c <_ZN9CDC_Class5writeEPKhj+0x84>)
    f14c:	4b0a      	ldr	r3, [pc, #40]	; (f178 <_ZN9CDC_Class5writeEPKhj+0x90>)
    f14e:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    f150:	4905      	ldr	r1, [pc, #20]	; (f168 <_ZN9CDC_Class5writeEPKhj+0x80>)
    f152:	4806      	ldr	r0, [pc, #24]	; (f16c <_ZN9CDC_Class5writeEPKhj+0x84>)
    f154:	4b09      	ldr	r3, [pc, #36]	; (f17c <_ZN9CDC_Class5writeEPKhj+0x94>)
    f156:	4798      	blx	r3
    f158:	e001      	b.n	f15e <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    f15a:	2300      	movs	r3, #0
    f15c:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    f15e:	697b      	ldr	r3, [r7, #20]
}
    f160:	4618      	mov	r0, r3
    f162:	3718      	adds	r7, #24
    f164:	46bd      	mov	sp, r7
    f166:	bd80      	pop	{r7, pc}
    f168:	0000ecb5 	.word	0x0000ecb5
    f16c:	20001408 	.word	0x20001408
    f170:	0000f689 	.word	0x0000f689
    f174:	0000cce1 	.word	0x0000cce1
    f178:	0000f5a9 	.word	0x0000f5a9
    f17c:	0000f6ed 	.word	0x0000f6ed

0000f180 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    f180:	b480      	push	{r7}
    f182:	b083      	sub	sp, #12
    f184:	af00      	add	r7, sp, #0
    f186:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    f188:	687b      	ldr	r3, [r7, #4]
    f18a:	7d5b      	ldrb	r3, [r3, #21]
    f18c:	b2db      	uxtb	r3, r3
    f18e:	2b00      	cmp	r3, #0
    f190:	d006      	beq.n	f1a0 <_ZN9CDC_Class9availableEv+0x20>
    f192:	687b      	ldr	r3, [r7, #4]
    f194:	7d1b      	ldrb	r3, [r3, #20]
    f196:	b2db      	uxtb	r3, r3
    f198:	2b00      	cmp	r3, #0
    f19a:	d001      	beq.n	f1a0 <_ZN9CDC_Class9availableEv+0x20>
    f19c:	2301      	movs	r3, #1
    f19e:	e000      	b.n	f1a2 <_ZN9CDC_Class9availableEv+0x22>
    f1a0:	2300      	movs	r3, #0
    f1a2:	2b00      	cmp	r3, #0
    f1a4:	d001      	beq.n	f1aa <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    f1a6:	2301      	movs	r3, #1
    f1a8:	e000      	b.n	f1ac <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    f1aa:	2300      	movs	r3, #0
	}
	
}
    f1ac:	4618      	mov	r0, r3
    f1ae:	370c      	adds	r7, #12
    f1b0:	46bd      	mov	sp, r7
    f1b2:	bc80      	pop	{r7}
    f1b4:	4770      	bx	lr
	...

0000f1b8 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    f1b8:	b580      	push	{r7, lr}
    f1ba:	b082      	sub	sp, #8
    f1bc:	af00      	add	r7, sp, #0
    f1be:	6078      	str	r0, [r7, #4]
    f1c0:	6039      	str	r1, [r7, #0]
    f1c2:	687b      	ldr	r3, [r7, #4]
    f1c4:	2b01      	cmp	r3, #1
    f1c6:	d10c      	bne.n	f1e2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    f1c8:	683b      	ldr	r3, [r7, #0]
    f1ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f1ce:	4293      	cmp	r3, r2
    f1d0:	d107      	bne.n	f1e2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    f1d2:	4806      	ldr	r0, [pc, #24]	; (f1ec <_Z41__static_initialization_and_destruction_0ii+0x34>)
    f1d4:	4b06      	ldr	r3, [pc, #24]	; (f1f0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    f1d6:	4798      	blx	r3
    f1d8:	4a06      	ldr	r2, [pc, #24]	; (f1f4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    f1da:	4907      	ldr	r1, [pc, #28]	; (f1f8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    f1dc:	4803      	ldr	r0, [pc, #12]	; (f1ec <_Z41__static_initialization_and_destruction_0ii+0x34>)
    f1de:	4b07      	ldr	r3, [pc, #28]	; (f1fc <_Z41__static_initialization_and_destruction_0ii+0x44>)
    f1e0:	4798      	blx	r3
    f1e2:	bf00      	nop
    f1e4:	3708      	adds	r7, #8
    f1e6:	46bd      	mov	sp, r7
    f1e8:	bd80      	pop	{r7, pc}
    f1ea:	bf00      	nop
    f1ec:	20001350 	.word	0x20001350
    f1f0:	0000eda5 	.word	0x0000eda5
    f1f4:	20000000 	.word	0x20000000
    f1f8:	0000eded 	.word	0x0000eded
    f1fc:	0000fbc1 	.word	0x0000fbc1

0000f200 <_GLOBAL__sub_I_ptrCDCClass>:
    f200:	b580      	push	{r7, lr}
    f202:	af00      	add	r7, sp, #0
    f204:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f208:	2001      	movs	r0, #1
    f20a:	4b01      	ldr	r3, [pc, #4]	; (f210 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    f20c:	4798      	blx	r3
    f20e:	bd80      	pop	{r7, pc}
    f210:	0000f1b9 	.word	0x0000f1b9

0000f214 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    f214:	b580      	push	{r7, lr}
    f216:	b086      	sub	sp, #24
    f218:	af00      	add	r7, sp, #0
    f21a:	60f8      	str	r0, [r7, #12]
    f21c:	60b9      	str	r1, [r7, #8]
    f21e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    f220:	2300      	movs	r3, #0
    f222:	617b      	str	r3, [r7, #20]
  while (size--) {
    f224:	687b      	ldr	r3, [r7, #4]
    f226:	1e5a      	subs	r2, r3, #1
    f228:	607a      	str	r2, [r7, #4]
    f22a:	2b00      	cmp	r3, #0
    f22c:	bf14      	ite	ne
    f22e:	2301      	movne	r3, #1
    f230:	2300      	moveq	r3, #0
    f232:	b2db      	uxtb	r3, r3
    f234:	2b00      	cmp	r3, #0
    f236:	d016      	beq.n	f266 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    f238:	68fb      	ldr	r3, [r7, #12]
    f23a:	681b      	ldr	r3, [r3, #0]
    f23c:	681a      	ldr	r2, [r3, #0]
    f23e:	68bb      	ldr	r3, [r7, #8]
    f240:	1c59      	adds	r1, r3, #1
    f242:	60b9      	str	r1, [r7, #8]
    f244:	781b      	ldrb	r3, [r3, #0]
    f246:	4619      	mov	r1, r3
    f248:	68f8      	ldr	r0, [r7, #12]
    f24a:	4790      	blx	r2
    f24c:	4603      	mov	r3, r0
    f24e:	2b00      	cmp	r3, #0
    f250:	bf14      	ite	ne
    f252:	2301      	movne	r3, #1
    f254:	2300      	moveq	r3, #0
    f256:	b2db      	uxtb	r3, r3
    f258:	2b00      	cmp	r3, #0
    f25a:	d003      	beq.n	f264 <_ZN5Print5writeEPKhj+0x50>
    f25c:	697b      	ldr	r3, [r7, #20]
    f25e:	3301      	adds	r3, #1
    f260:	617b      	str	r3, [r7, #20]
  while (size--) {
    f262:	e7df      	b.n	f224 <_ZN5Print5writeEPKhj+0x10>
    else break;
    f264:	bf00      	nop
  }
  return n;
    f266:	697b      	ldr	r3, [r7, #20]
}
    f268:	4618      	mov	r0, r3
    f26a:	3718      	adds	r7, #24
    f26c:	46bd      	mov	sp, r7
    f26e:	bd80      	pop	{r7, pc}

0000f270 <hri_port_read_DIR_reg>:
{
    f270:	b480      	push	{r7}
    f272:	b083      	sub	sp, #12
    f274:	af00      	add	r7, sp, #0
    f276:	6078      	str	r0, [r7, #4]
    f278:	460b      	mov	r3, r1
    f27a:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    f27c:	78fb      	ldrb	r3, [r7, #3]
    f27e:	687a      	ldr	r2, [r7, #4]
    f280:	01db      	lsls	r3, r3, #7
    f282:	4413      	add	r3, r2
    f284:	681b      	ldr	r3, [r3, #0]
}
    f286:	4618      	mov	r0, r3
    f288:	370c      	adds	r7, #12
    f28a:	46bd      	mov	sp, r7
    f28c:	bc80      	pop	{r7}
    f28e:	4770      	bx	lr

0000f290 <hri_port_read_OUT_reg>:
{
    f290:	b480      	push	{r7}
    f292:	b083      	sub	sp, #12
    f294:	af00      	add	r7, sp, #0
    f296:	6078      	str	r0, [r7, #4]
    f298:	460b      	mov	r3, r1
    f29a:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    f29c:	78fb      	ldrb	r3, [r7, #3]
    f29e:	687a      	ldr	r2, [r7, #4]
    f2a0:	01db      	lsls	r3, r3, #7
    f2a2:	4413      	add	r3, r2
    f2a4:	3310      	adds	r3, #16
    f2a6:	681b      	ldr	r3, [r3, #0]
}
    f2a8:	4618      	mov	r0, r3
    f2aa:	370c      	adds	r7, #12
    f2ac:	46bd      	mov	sp, r7
    f2ae:	bc80      	pop	{r7}
    f2b0:	4770      	bx	lr

0000f2b2 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    f2b2:	b480      	push	{r7}
    f2b4:	b083      	sub	sp, #12
    f2b6:	af00      	add	r7, sp, #0
    f2b8:	6078      	str	r0, [r7, #4]
    f2ba:	460b      	mov	r3, r1
    f2bc:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    f2be:	78fb      	ldrb	r3, [r7, #3]
    f2c0:	687a      	ldr	r2, [r7, #4]
    f2c2:	01db      	lsls	r3, r3, #7
    f2c4:	4413      	add	r3, r2
    f2c6:	3320      	adds	r3, #32
    f2c8:	681b      	ldr	r3, [r3, #0]
}
    f2ca:	4618      	mov	r0, r3
    f2cc:	370c      	adds	r7, #12
    f2ce:	46bd      	mov	sp, r7
    f2d0:	bc80      	pop	{r7}
    f2d2:	4770      	bx	lr

0000f2d4 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    f2d4:	b580      	push	{r7, lr}
    f2d6:	b086      	sub	sp, #24
    f2d8:	af00      	add	r7, sp, #0
    f2da:	4603      	mov	r3, r0
    f2dc:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    f2de:	f107 030c 	add.w	r3, r7, #12
    f2e2:	4618      	mov	r0, r3
    f2e4:	4b13      	ldr	r3, [pc, #76]	; (f334 <_gpio_get_level+0x60>)
    f2e6:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    f2e8:	79fb      	ldrb	r3, [r7, #7]
    f2ea:	4619      	mov	r1, r3
    f2ec:	4812      	ldr	r0, [pc, #72]	; (f338 <_gpio_get_level+0x64>)
    f2ee:	4b13      	ldr	r3, [pc, #76]	; (f33c <_gpio_get_level+0x68>)
    f2f0:	4798      	blx	r3
    f2f2:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    f2f4:	79fb      	ldrb	r3, [r7, #7]
    f2f6:	4619      	mov	r1, r3
    f2f8:	480f      	ldr	r0, [pc, #60]	; (f338 <_gpio_get_level+0x64>)
    f2fa:	4b11      	ldr	r3, [pc, #68]	; (f340 <_gpio_get_level+0x6c>)
    f2fc:	4798      	blx	r3
    f2fe:	4602      	mov	r2, r0
    f300:	697b      	ldr	r3, [r7, #20]
    f302:	43db      	mvns	r3, r3
    f304:	4013      	ands	r3, r2
    f306:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    f308:	79fb      	ldrb	r3, [r7, #7]
    f30a:	4619      	mov	r1, r3
    f30c:	480a      	ldr	r0, [pc, #40]	; (f338 <_gpio_get_level+0x64>)
    f30e:	4b0d      	ldr	r3, [pc, #52]	; (f344 <_gpio_get_level+0x70>)
    f310:	4798      	blx	r3
    f312:	4602      	mov	r2, r0
    f314:	697b      	ldr	r3, [r7, #20]
    f316:	4013      	ands	r3, r2
    f318:	693a      	ldr	r2, [r7, #16]
    f31a:	4313      	orrs	r3, r2
    f31c:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    f31e:	f107 030c 	add.w	r3, r7, #12
    f322:	4618      	mov	r0, r3
    f324:	4b08      	ldr	r3, [pc, #32]	; (f348 <_gpio_get_level+0x74>)
    f326:	4798      	blx	r3

	return tmp;
    f328:	693b      	ldr	r3, [r7, #16]
}
    f32a:	4618      	mov	r0, r3
    f32c:	3718      	adds	r7, #24
    f32e:	46bd      	mov	sp, r7
    f330:	bd80      	pop	{r7, pc}
    f332:	bf00      	nop
    f334:	0000bebd 	.word	0x0000bebd
    f338:	41008000 	.word	0x41008000
    f33c:	0000f271 	.word	0x0000f271
    f340:	0000f2b3 	.word	0x0000f2b3
    f344:	0000f291 	.word	0x0000f291
    f348:	0000bee3 	.word	0x0000bee3

0000f34c <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    f34c:	b580      	push	{r7, lr}
    f34e:	b082      	sub	sp, #8
    f350:	af00      	add	r7, sp, #0
    f352:	4603      	mov	r3, r0
    f354:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    f356:	79fb      	ldrb	r3, [r7, #7]
    f358:	115b      	asrs	r3, r3, #5
    f35a:	b2db      	uxtb	r3, r3
    f35c:	4618      	mov	r0, r3
    f35e:	4b09      	ldr	r3, [pc, #36]	; (f384 <gpio_get_pin_level+0x38>)
    f360:	4798      	blx	r3
    f362:	4601      	mov	r1, r0
    f364:	79fb      	ldrb	r3, [r7, #7]
    f366:	f003 031f 	and.w	r3, r3, #31
    f36a:	2201      	movs	r2, #1
    f36c:	fa02 f303 	lsl.w	r3, r2, r3
    f370:	400b      	ands	r3, r1
    f372:	2b00      	cmp	r3, #0
    f374:	bf14      	ite	ne
    f376:	2301      	movne	r3, #1
    f378:	2300      	moveq	r3, #0
    f37a:	b2db      	uxtb	r3, r3
}
    f37c:	4618      	mov	r0, r3
    f37e:	3708      	adds	r7, #8
    f380:	46bd      	mov	sp, r7
    f382:	bd80      	pop	{r7, pc}
    f384:	0000f2d5 	.word	0x0000f2d5

0000f388 <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    f388:	b480      	push	{r7}
    f38a:	b083      	sub	sp, #12
    f38c:	af00      	add	r7, sp, #0
    f38e:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    f390:	4b06      	ldr	r3, [pc, #24]	; (f3ac <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f392:	681b      	ldr	r3, [r3, #0]
    f394:	2201      	movs	r2, #1
    f396:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    f398:	4b04      	ldr	r3, [pc, #16]	; (f3ac <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f39a:	681b      	ldr	r3, [r3, #0]
    f39c:	2200      	movs	r2, #0
    f39e:	705a      	strb	r2, [r3, #1]
}
    f3a0:	bf00      	nop
    f3a2:	370c      	adds	r7, #12
    f3a4:	46bd      	mov	sp, r7
    f3a6:	bc80      	pop	{r7}
    f3a8:	4770      	bx	lr
    f3aa:	bf00      	nop
    f3ac:	200013b0 	.word	0x200013b0

0000f3b0 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    f3b0:	b580      	push	{r7, lr}
    f3b2:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    f3b4:	2040      	movs	r0, #64	; 0x40
    f3b6:	4b0a      	ldr	r3, [pc, #40]	; (f3e0 <_ZL10USBPluggedv+0x30>)
    f3b8:	4798      	blx	r3
    f3ba:	4603      	mov	r3, r0
    f3bc:	2b00      	cmp	r3, #0
    f3be:	d004      	beq.n	f3ca <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    f3c0:	4b08      	ldr	r3, [pc, #32]	; (f3e4 <_ZL10USBPluggedv+0x34>)
    f3c2:	681b      	ldr	r3, [r3, #0]
    f3c4:	2201      	movs	r2, #1
    f3c6:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    f3c8:	e007      	b.n	f3da <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    f3ca:	4b06      	ldr	r3, [pc, #24]	; (f3e4 <_ZL10USBPluggedv+0x34>)
    f3cc:	681b      	ldr	r3, [r3, #0]
    f3ce:	2200      	movs	r2, #0
    f3d0:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    f3d2:	4b04      	ldr	r3, [pc, #16]	; (f3e4 <_ZL10USBPluggedv+0x34>)
    f3d4:	681b      	ldr	r3, [r3, #0]
    f3d6:	2200      	movs	r2, #0
    f3d8:	701a      	strb	r2, [r3, #0]
}
    f3da:	bf00      	nop
    f3dc:	bd80      	pop	{r7, pc}
    f3de:	bf00      	nop
    f3e0:	0000f34d 	.word	0x0000f34d
    f3e4:	200013b0 	.word	0x200013b0

0000f3e8 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    f3e8:	b480      	push	{r7}
    f3ea:	b083      	sub	sp, #12
    f3ec:	af00      	add	r7, sp, #0
    f3ee:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    f3f0:	4a04      	ldr	r2, [pc, #16]	; (f404 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    f3f2:	687b      	ldr	r3, [r7, #4]
    f3f4:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    f3f6:	687b      	ldr	r3, [r7, #4]
    f3f8:	4618      	mov	r0, r3
    f3fa:	370c      	adds	r7, #12
    f3fc:	46bd      	mov	sp, r7
    f3fe:	bc80      	pop	{r7}
    f400:	4770      	bx	lr
    f402:	bf00      	nop
    f404:	200013b0 	.word	0x200013b0

0000f408 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    f408:	b480      	push	{r7}
    f40a:	b083      	sub	sp, #12
    f40c:	af00      	add	r7, sp, #0
    f40e:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    f410:	687b      	ldr	r3, [r7, #4]
    f412:	4618      	mov	r0, r3
    f414:	370c      	adds	r7, #12
    f416:	46bd      	mov	sp, r7
    f418:	bc80      	pop	{r7}
    f41a:	4770      	bx	lr

0000f41c <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    f41c:	b580      	push	{r7, lr}
    f41e:	b082      	sub	sp, #8
    f420:	af00      	add	r7, sp, #0
    f422:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    f424:	491f      	ldr	r1, [pc, #124]	; (f4a4 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    f426:	2040      	movs	r0, #64	; 0x40
    f428:	4b1f      	ldr	r3, [pc, #124]	; (f4a8 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    f42a:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    f42c:	481f      	ldr	r0, [pc, #124]	; (f4ac <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f42e:	4b20      	ldr	r3, [pc, #128]	; (f4b0 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    f430:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    f432:	2040      	movs	r0, #64	; 0x40
    f434:	4b1f      	ldr	r3, [pc, #124]	; (f4b4 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    f436:	4798      	blx	r3
    f438:	4603      	mov	r3, r0
    f43a:	461a      	mov	r2, r3
    f43c:	687b      	ldr	r3, [r7, #4]
    f43e:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    f440:	687b      	ldr	r3, [r7, #4]
    f442:	78db      	ldrb	r3, [r3, #3]
    f444:	2b00      	cmp	r3, #0
    f446:	d024      	beq.n	f492 <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
    f448:	687b      	ldr	r3, [r7, #4]
    f44a:	2200      	movs	r2, #0
    f44c:	709a      	strb	r2, [r3, #2]
			plugged=true;
    f44e:	687b      	ldr	r3, [r7, #4]
    f450:	2201      	movs	r2, #1
    f452:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    f454:	f44f 7216 	mov.w	r2, #600	; 0x258
    f458:	4917      	ldr	r1, [pc, #92]	; (f4b8 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    f45a:	4814      	ldr	r0, [pc, #80]	; (f4ac <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f45c:	4b17      	ldr	r3, [pc, #92]	; (f4bc <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    f45e:	4798      	blx	r3
			usbTerminalTimer.Start();
    f460:	4812      	ldr	r0, [pc, #72]	; (f4ac <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f462:	4b17      	ldr	r3, [pc, #92]	; (f4c0 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    f464:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    f466:	4817      	ldr	r0, [pc, #92]	; (f4c4 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    f468:	4b17      	ldr	r3, [pc, #92]	; (f4c8 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
    f46a:	4798      	blx	r3
    f46c:	4603      	mov	r3, r0
    f46e:	f083 0301 	eor.w	r3, r3, #1
    f472:	b2db      	uxtb	r3, r3
    f474:	2b00      	cmp	r3, #0
    f476:	d008      	beq.n	f48a <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
    f478:	687b      	ldr	r3, [r7, #4]
    f47a:	789b      	ldrb	r3, [r3, #2]
    f47c:	b2db      	uxtb	r3, r3
    f47e:	2b00      	cmp	r3, #0
    f480:	d0f1      	beq.n	f466 <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
    f482:	687b      	ldr	r3, [r7, #4]
    f484:	2200      	movs	r2, #0
    f486:	701a      	strb	r2, [r3, #0]
					return;
    f488:	e009      	b.n	f49e <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    f48a:	4808      	ldr	r0, [pc, #32]	; (f4ac <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f48c:	4b0f      	ldr	r3, [pc, #60]	; (f4cc <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
    f48e:	4798      	blx	r3
    f490:	e005      	b.n	f49e <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
    f492:	687b      	ldr	r3, [r7, #4]
    f494:	2200      	movs	r2, #0
    f496:	701a      	strb	r2, [r3, #0]
			plugged=false;
    f498:	687b      	ldr	r3, [r7, #4]
    f49a:	2200      	movs	r2, #0
    f49c:	705a      	strb	r2, [r3, #1]
		}
		
}
    f49e:	3708      	adds	r7, #8
    f4a0:	46bd      	mov	sp, r7
    f4a2:	bd80      	pop	{r7, pc}
    f4a4:	0000f3b1 	.word	0x0000f3b1
    f4a8:	00002595 	.word	0x00002595
    f4ac:	20001408 	.word	0x20001408
    f4b0:	0000f54d 	.word	0x0000f54d
    f4b4:	0000f34d 	.word	0x0000f34d
    f4b8:	0000f389 	.word	0x0000f389
    f4bc:	0000f661 	.word	0x0000f661
    f4c0:	0000f585 	.word	0x0000f585
    f4c4:	20001350 	.word	0x20001350
    f4c8:	0000ee5d 	.word	0x0000ee5d
    f4cc:	0000f5a9 	.word	0x0000f5a9

0000f4d0 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    f4d0:	b580      	push	{r7, lr}
    f4d2:	b082      	sub	sp, #8
    f4d4:	af00      	add	r7, sp, #0
    f4d6:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    f4d8:	4b04      	ldr	r3, [pc, #16]	; (f4ec <_ZL7task_cbPK10timer_task+0x1c>)
    f4da:	681b      	ldr	r3, [r3, #0]
    f4dc:	4618      	mov	r0, r3
    f4de:	4b04      	ldr	r3, [pc, #16]	; (f4f0 <_ZL7task_cbPK10timer_task+0x20>)
    f4e0:	4798      	blx	r3
}
    f4e2:	bf00      	nop
    f4e4:	3708      	adds	r7, #8
    f4e6:	46bd      	mov	sp, r7
    f4e8:	bd80      	pop	{r7, pc}
    f4ea:	bf00      	nop
    f4ec:	200013b4 	.word	0x200013b4
    f4f0:	0000f5d1 	.word	0x0000f5d1

0000f4f4 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    f4f4:	b480      	push	{r7}
    f4f6:	b083      	sub	sp, #12
    f4f8:	af00      	add	r7, sp, #0
    f4fa:	6078      	str	r0, [r7, #4]
    f4fc:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    f4fe:	687b      	ldr	r3, [r7, #4]
    f500:	683a      	ldr	r2, [r7, #0]
    f502:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
    f504:	4a08      	ldr	r2, [pc, #32]	; (f528 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    f506:	687b      	ldr	r3, [r7, #4]
    f508:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    f50a:	687b      	ldr	r3, [r7, #4]
    f50c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f510:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
    f512:	687b      	ldr	r3, [r7, #4]
    f514:	689b      	ldr	r3, [r3, #8]
    f516:	4a05      	ldr	r2, [pc, #20]	; (f52c <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    f518:	60da      	str	r2, [r3, #12]
} //Timer_Class
    f51a:	687b      	ldr	r3, [r7, #4]
    f51c:	4618      	mov	r0, r3
    f51e:	370c      	adds	r7, #12
    f520:	46bd      	mov	sp, r7
    f522:	bc80      	pop	{r7}
    f524:	4770      	bx	lr
    f526:	bf00      	nop
    f528:	200013b4 	.word	0x200013b4
    f52c:	0000f4d1 	.word	0x0000f4d1

0000f530 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    f530:	b480      	push	{r7}
    f532:	b083      	sub	sp, #12
    f534:	af00      	add	r7, sp, #0
    f536:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    f538:	687b      	ldr	r3, [r7, #4]
    f53a:	2200      	movs	r2, #0
    f53c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    f53e:	687b      	ldr	r3, [r7, #4]
    f540:	4618      	mov	r0, r3
    f542:	370c      	adds	r7, #12
    f544:	46bd      	mov	sp, r7
    f546:	bc80      	pop	{r7}
    f548:	4770      	bx	lr
	...

0000f54c <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
    f54c:	b580      	push	{r7, lr}
    f54e:	b082      	sub	sp, #8
    f550:	af00      	add	r7, sp, #0
    f552:	6078      	str	r0, [r7, #4]
	
	ticks=0;
    f554:	687b      	ldr	r3, [r7, #4]
    f556:	2200      	movs	r2, #0
    f558:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
    f55a:	6878      	ldr	r0, [r7, #4]
    f55c:	4b08      	ldr	r3, [pc, #32]	; (f580 <_ZN17TimerSerial_Class4InitEv+0x34>)
    f55e:	4798      	blx	r3
    f560:	4603      	mov	r3, r0
    f562:	2b00      	cmp	r3, #0
    f564:	bf0c      	ite	eq
    f566:	2301      	moveq	r3, #1
    f568:	2300      	movne	r3, #0
    f56a:	b2da      	uxtb	r2, r3
    f56c:	687b      	ldr	r3, [r7, #4]
    f56e:	709a      	strb	r2, [r3, #2]
	return isOK;
    f570:	687b      	ldr	r3, [r7, #4]
    f572:	789b      	ldrb	r3, [r3, #2]
    f574:	b2db      	uxtb	r3, r3
}
    f576:	4618      	mov	r0, r3
    f578:	3708      	adds	r7, #8
    f57a:	46bd      	mov	sp, r7
    f57c:	bd80      	pop	{r7, pc}
    f57e:	bf00      	nop
    f580:	0000f585 	.word	0x0000f585

0000f584 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    f584:	b580      	push	{r7, lr}
    f586:	b084      	sub	sp, #16
    f588:	af00      	add	r7, sp, #0
    f58a:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    f58c:	687b      	ldr	r3, [r7, #4]
    f58e:	691b      	ldr	r3, [r3, #16]
    f590:	4618      	mov	r0, r3
    f592:	4b04      	ldr	r3, [pc, #16]	; (f5a4 <_ZN17TimerSerial_Class5StartEv+0x20>)
    f594:	4798      	blx	r3
    f596:	60f8      	str	r0, [r7, #12]
	return status;
    f598:	68fb      	ldr	r3, [r7, #12]
	
}
    f59a:	4618      	mov	r0, r3
    f59c:	3710      	adds	r7, #16
    f59e:	46bd      	mov	sp, r7
    f5a0:	bd80      	pop	{r7, pc}
    f5a2:	bf00      	nop
    f5a4:	00002fc9 	.word	0x00002fc9

0000f5a8 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    f5a8:	b580      	push	{r7, lr}
    f5aa:	b084      	sub	sp, #16
    f5ac:	af00      	add	r7, sp, #0
    f5ae:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    f5b0:	687b      	ldr	r3, [r7, #4]
    f5b2:	691b      	ldr	r3, [r3, #16]
    f5b4:	4618      	mov	r0, r3
    f5b6:	4b05      	ldr	r3, [pc, #20]	; (f5cc <_ZN17TimerSerial_Class4StopEv+0x24>)
    f5b8:	4798      	blx	r3
    f5ba:	60f8      	str	r0, [r7, #12]
	timeout=0;
    f5bc:	687b      	ldr	r3, [r7, #4]
    f5be:	2200      	movs	r2, #0
    f5c0:	705a      	strb	r2, [r3, #1]
	return status;
    f5c2:	68fb      	ldr	r3, [r7, #12]
}
    f5c4:	4618      	mov	r0, r3
    f5c6:	3710      	adds	r7, #16
    f5c8:	46bd      	mov	sp, r7
    f5ca:	bd80      	pop	{r7, pc}
    f5cc:	00003031 	.word	0x00003031

0000f5d0 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    f5d0:	b480      	push	{r7}
    f5d2:	b083      	sub	sp, #12
    f5d4:	af00      	add	r7, sp, #0
    f5d6:	6078      	str	r0, [r7, #4]
	timeout=1;
    f5d8:	687b      	ldr	r3, [r7, #4]
    f5da:	2201      	movs	r2, #1
    f5dc:	705a      	strb	r2, [r3, #1]
}
    f5de:	bf00      	nop
    f5e0:	370c      	adds	r7, #12
    f5e2:	46bd      	mov	sp, r7
    f5e4:	bc80      	pop	{r7}
    f5e6:	4770      	bx	lr

0000f5e8 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    f5e8:	b580      	push	{r7, lr}
    f5ea:	b086      	sub	sp, #24
    f5ec:	af00      	add	r7, sp, #0
    f5ee:	60f8      	str	r0, [r7, #12]
    f5f0:	60b9      	str	r1, [r7, #8]
    f5f2:	607a      	str	r2, [r7, #4]
    f5f4:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    f5f6:	68f8      	ldr	r0, [r7, #12]
    f5f8:	4b0d      	ldr	r3, [pc, #52]	; (f630 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    f5fa:	4798      	blx	r3
	task->interval = interval;
    f5fc:	68fb      	ldr	r3, [r7, #12]
    f5fe:	689b      	ldr	r3, [r3, #8]
    f600:	687a      	ldr	r2, [r7, #4]
    f602:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    f604:	68fb      	ldr	r3, [r7, #12]
    f606:	689b      	ldr	r3, [r3, #8]
    f608:	68ba      	ldr	r2, [r7, #8]
    f60a:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    f60c:	68fb      	ldr	r3, [r7, #12]
    f60e:	689b      	ldr	r3, [r3, #8]
    f610:	78fa      	ldrb	r2, [r7, #3]
    f612:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    f614:	68fb      	ldr	r3, [r7, #12]
    f616:	691a      	ldr	r2, [r3, #16]
    f618:	68fb      	ldr	r3, [r7, #12]
    f61a:	689b      	ldr	r3, [r3, #8]
    f61c:	4619      	mov	r1, r3
    f61e:	4610      	mov	r0, r2
    f620:	4b04      	ldr	r3, [pc, #16]	; (f634 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    f622:	4798      	blx	r3
    f624:	6178      	str	r0, [r7, #20]
	
	return status;
    f626:	697b      	ldr	r3, [r7, #20]
}
    f628:	4618      	mov	r0, r3
    f62a:	3718      	adds	r7, #24
    f62c:	46bd      	mov	sp, r7
    f62e:	bd80      	pop	{r7, pc}
    f630:	0000f745 	.word	0x0000f745
    f634:	0000309d 	.word	0x0000309d

0000f638 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    f638:	b590      	push	{r4, r7, lr}
    f63a:	b087      	sub	sp, #28
    f63c:	af00      	add	r7, sp, #0
    f63e:	60f8      	str	r0, [r7, #12]
    f640:	60b9      	str	r1, [r7, #8]
    f642:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    f644:	2301      	movs	r3, #1
    f646:	687a      	ldr	r2, [r7, #4]
    f648:	68b9      	ldr	r1, [r7, #8]
    f64a:	68f8      	ldr	r0, [r7, #12]
    f64c:	4c03      	ldr	r4, [pc, #12]	; (f65c <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm+0x24>)
    f64e:	47a0      	blx	r4
    f650:	6178      	str	r0, [r7, #20]
		return status;
    f652:	697b      	ldr	r3, [r7, #20]
}
    f654:	4618      	mov	r0, r3
    f656:	371c      	adds	r7, #28
    f658:	46bd      	mov	sp, r7
    f65a:	bd90      	pop	{r4, r7, pc}
    f65c:	0000f5e9 	.word	0x0000f5e9

0000f660 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    f660:	b590      	push	{r4, r7, lr}
    f662:	b087      	sub	sp, #28
    f664:	af00      	add	r7, sp, #0
    f666:	60f8      	str	r0, [r7, #12]
    f668:	60b9      	str	r1, [r7, #8]
    f66a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    f66c:	2300      	movs	r3, #0
    f66e:	687a      	ldr	r2, [r7, #4]
    f670:	68b9      	ldr	r1, [r7, #8]
    f672:	68f8      	ldr	r0, [r7, #12]
    f674:	4c03      	ldr	r4, [pc, #12]	; (f684 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    f676:	47a0      	blx	r4
    f678:	6178      	str	r0, [r7, #20]
	return status;
    f67a:	697b      	ldr	r3, [r7, #20]
}
    f67c:	4618      	mov	r0, r3
    f67e:	371c      	adds	r7, #28
    f680:	46bd      	mov	sp, r7
    f682:	bd90      	pop	{r4, r7, pc}
    f684:	0000f5e9 	.word	0x0000f5e9

0000f688 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    f688:	b590      	push	{r4, r7, lr}
    f68a:	b087      	sub	sp, #28
    f68c:	af00      	add	r7, sp, #0
    f68e:	60f8      	str	r0, [r7, #12]
    f690:	60b9      	str	r1, [r7, #8]
    f692:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    f694:	2300      	movs	r3, #0
    f696:	687a      	ldr	r2, [r7, #4]
    f698:	68b9      	ldr	r1, [r7, #8]
    f69a:	68f8      	ldr	r0, [r7, #12]
    f69c:	4c06      	ldr	r4, [pc, #24]	; (f6b8 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    f69e:	47a0      	blx	r4
    f6a0:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    f6a2:	68fb      	ldr	r3, [r7, #12]
    f6a4:	691b      	ldr	r3, [r3, #16]
    f6a6:	4618      	mov	r0, r3
    f6a8:	4b04      	ldr	r3, [pc, #16]	; (f6bc <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    f6aa:	4798      	blx	r3
    f6ac:	6178      	str	r0, [r7, #20]
	return status;
    f6ae:	697b      	ldr	r3, [r7, #20]
}
    f6b0:	4618      	mov	r0, r3
    f6b2:	371c      	adds	r7, #28
    f6b4:	46bd      	mov	sp, r7
    f6b6:	bd90      	pop	{r4, r7, pc}
    f6b8:	0000f5e9 	.word	0x0000f5e9
    f6bc:	00002fc9 	.word	0x00002fc9

0000f6c0 <_ZN17TimerSerial_Class11Remove_taskEv>:

void	TimerSerial_Class::Remove_task(void){
    f6c0:	b580      	push	{r7, lr}
    f6c2:	b082      	sub	sp, #8
    f6c4:	af00      	add	r7, sp, #0
    f6c6:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
    f6c8:	687b      	ldr	r3, [r7, #4]
    f6ca:	691a      	ldr	r2, [r3, #16]
    f6cc:	687b      	ldr	r3, [r7, #4]
    f6ce:	689b      	ldr	r3, [r3, #8]
    f6d0:	4619      	mov	r1, r3
    f6d2:	4610      	mov	r0, r2
    f6d4:	4b04      	ldr	r3, [pc, #16]	; (f6e8 <_ZN17TimerSerial_Class11Remove_taskEv+0x28>)
    f6d6:	4798      	blx	r3
	task->cb=NULL;
    f6d8:	687b      	ldr	r3, [r7, #4]
    f6da:	689b      	ldr	r3, [r3, #8]
    f6dc:	2200      	movs	r2, #0
    f6de:	60da      	str	r2, [r3, #12]
}
    f6e0:	bf00      	nop
    f6e2:	3708      	adds	r7, #8
    f6e4:	46bd      	mov	sp, r7
    f6e6:	bd80      	pop	{r7, pc}
    f6e8:	000031a1 	.word	0x000031a1

0000f6ec <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    f6ec:	b580      	push	{r7, lr}
    f6ee:	b082      	sub	sp, #8
    f6f0:	af00      	add	r7, sp, #0
    f6f2:	6078      	str	r0, [r7, #4]
    f6f4:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    f6f6:	6839      	ldr	r1, [r7, #0]
    f6f8:	6878      	ldr	r0, [r7, #4]
    f6fa:	4b0f      	ldr	r3, [pc, #60]	; (f738 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    f6fc:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    f6fe:	687b      	ldr	r3, [r7, #4]
    f700:	691b      	ldr	r3, [r3, #16]
    f702:	f103 0218 	add.w	r2, r3, #24
    f706:	687b      	ldr	r3, [r7, #4]
    f708:	689b      	ldr	r3, [r3, #8]
    f70a:	4619      	mov	r1, r3
    f70c:	4610      	mov	r0, r2
    f70e:	4b0b      	ldr	r3, [pc, #44]	; (f73c <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    f710:	4798      	blx	r3
    f712:	4603      	mov	r3, r0
    f714:	2b00      	cmp	r3, #0
    f716:	d007      	beq.n	f728 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    f718:	687b      	ldr	r3, [r7, #4]
    f71a:	691a      	ldr	r2, [r3, #16]
    f71c:	687b      	ldr	r3, [r7, #4]
    f71e:	689b      	ldr	r3, [r3, #8]
    f720:	4619      	mov	r1, r3
    f722:	4610      	mov	r0, r2
    f724:	4b06      	ldr	r3, [pc, #24]	; (f740 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    f726:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    f728:	687b      	ldr	r3, [r7, #4]
    f72a:	689b      	ldr	r3, [r3, #8]
    f72c:	2200      	movs	r2, #0
    f72e:	60da      	str	r2, [r3, #12]
}
    f730:	bf00      	nop
    f732:	3708      	adds	r7, #8
    f734:	46bd      	mov	sp, r7
    f736:	bd80      	pop	{r7, pc}
    f738:	0000f79d 	.word	0x0000f79d
    f73c:	00003d89 	.word	0x00003d89
    f740:	000031a1 	.word	0x000031a1

0000f744 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    f744:	b480      	push	{r7}
    f746:	b085      	sub	sp, #20
    f748:	af00      	add	r7, sp, #0
    f74a:	6078      	str	r0, [r7, #4]
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    f74c:	2300      	movs	r3, #0
    f74e:	73fb      	strb	r3, [r7, #15]
    f750:	7bfb      	ldrb	r3, [r7, #15]
    f752:	2b03      	cmp	r3, #3
    f754:	dc18      	bgt.n	f788 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x44>
	{
			if (taskArray[ii].cb==NULL)
    f756:	7bfa      	ldrb	r2, [r7, #15]
    f758:	490f      	ldr	r1, [pc, #60]	; (f798 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    f75a:	4613      	mov	r3, r2
    f75c:	009b      	lsls	r3, r3, #2
    f75e:	4413      	add	r3, r2
    f760:	009b      	lsls	r3, r3, #2
    f762:	440b      	add	r3, r1
    f764:	330c      	adds	r3, #12
    f766:	681b      	ldr	r3, [r3, #0]
    f768:	2b00      	cmp	r3, #0
    f76a:	d109      	bne.n	f780 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
			{
				
				task=&taskArray[ii];
    f76c:	7bfa      	ldrb	r2, [r7, #15]
    f76e:	4613      	mov	r3, r2
    f770:	009b      	lsls	r3, r3, #2
    f772:	4413      	add	r3, r2
    f774:	009b      	lsls	r3, r3, #2
    f776:	4a08      	ldr	r2, [pc, #32]	; (f798 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    f778:	441a      	add	r2, r3
    f77a:	687b      	ldr	r3, [r7, #4]
    f77c:	609a      	str	r2, [r3, #8]
			return;
    f77e:	e006      	b.n	f78e <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4a>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    f780:	7bfb      	ldrb	r3, [r7, #15]
    f782:	3301      	adds	r3, #1
    f784:	73fb      	strb	r3, [r7, #15]
    f786:	e7e3      	b.n	f750 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xc>
				
			}
	}
	task=&taskArray[0];
    f788:	687b      	ldr	r3, [r7, #4]
    f78a:	4a03      	ldr	r2, [pc, #12]	; (f798 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    f78c:	609a      	str	r2, [r3, #8]

}
    f78e:	3714      	adds	r7, #20
    f790:	46bd      	mov	sp, r7
    f792:	bc80      	pop	{r7}
    f794:	4770      	bx	lr
    f796:	bf00      	nop
    f798:	200013b8 	.word	0x200013b8

0000f79c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    f79c:	b480      	push	{r7}
    f79e:	b085      	sub	sp, #20
    f7a0:	af00      	add	r7, sp, #0
    f7a2:	6078      	str	r0, [r7, #4]
    f7a4:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    f7a6:	2300      	movs	r3, #0
    f7a8:	73fb      	strb	r3, [r7, #15]
    f7aa:	7bfb      	ldrb	r3, [r7, #15]
    f7ac:	2b03      	cmp	r3, #3
    f7ae:	dc19      	bgt.n	f7e4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    f7b0:	7bfa      	ldrb	r2, [r7, #15]
    f7b2:	490e      	ldr	r1, [pc, #56]	; (f7ec <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    f7b4:	4613      	mov	r3, r2
    f7b6:	009b      	lsls	r3, r3, #2
    f7b8:	4413      	add	r3, r2
    f7ba:	009b      	lsls	r3, r3, #2
    f7bc:	440b      	add	r3, r1
    f7be:	330c      	adds	r3, #12
    f7c0:	681a      	ldr	r2, [r3, #0]
    f7c2:	683b      	ldr	r3, [r7, #0]
    f7c4:	429a      	cmp	r2, r3
    f7c6:	d109      	bne.n	f7dc <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    f7c8:	7bfa      	ldrb	r2, [r7, #15]
    f7ca:	4613      	mov	r3, r2
    f7cc:	009b      	lsls	r3, r3, #2
    f7ce:	4413      	add	r3, r2
    f7d0:	009b      	lsls	r3, r3, #2
    f7d2:	4a06      	ldr	r2, [pc, #24]	; (f7ec <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    f7d4:	441a      	add	r2, r3
    f7d6:	687b      	ldr	r3, [r7, #4]
    f7d8:	609a      	str	r2, [r3, #8]
			return;
    f7da:	e003      	b.n	f7e4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    f7dc:	7bfb      	ldrb	r3, [r7, #15]
    f7de:	3301      	adds	r3, #1
    f7e0:	73fb      	strb	r3, [r7, #15]
    f7e2:	e7e2      	b.n	f7aa <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}


}
    f7e4:	3714      	adds	r7, #20
    f7e6:	46bd      	mov	sp, r7
    f7e8:	bc80      	pop	{r7}
    f7ea:	4770      	bx	lr
    f7ec:	200013b8 	.word	0x200013b8

0000f7f0 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    f7f0:	b580      	push	{r7, lr}
    f7f2:	b082      	sub	sp, #8
    f7f4:	af00      	add	r7, sp, #0
    f7f6:	6078      	str	r0, [r7, #4]
    f7f8:	6039      	str	r1, [r7, #0]
    f7fa:	687b      	ldr	r3, [r7, #4]
    f7fc:	2b01      	cmp	r3, #1
    f7fe:	d116      	bne.n	f82e <_Z41__static_initialization_and_destruction_0ii+0x3e>
    f800:	683b      	ldr	r3, [r7, #0]
    f802:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f806:	4293      	cmp	r3, r2
    f808:	d111      	bne.n	f82e <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    f80a:	490b      	ldr	r1, [pc, #44]	; (f838 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    f80c:	480b      	ldr	r0, [pc, #44]	; (f83c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    f80e:	4b0c      	ldr	r3, [pc, #48]	; (f840 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    f810:	4798      	blx	r3
    f812:	4a0c      	ldr	r2, [pc, #48]	; (f844 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    f814:	490c      	ldr	r1, [pc, #48]	; (f848 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f816:	4809      	ldr	r0, [pc, #36]	; (f83c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    f818:	4b0c      	ldr	r3, [pc, #48]	; (f84c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    f81a:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    f81c:	490c      	ldr	r1, [pc, #48]	; (f850 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    f81e:	480d      	ldr	r0, [pc, #52]	; (f854 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    f820:	4b07      	ldr	r3, [pc, #28]	; (f840 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    f822:	4798      	blx	r3
    f824:	4a07      	ldr	r2, [pc, #28]	; (f844 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    f826:	4908      	ldr	r1, [pc, #32]	; (f848 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f828:	480a      	ldr	r0, [pc, #40]	; (f854 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    f82a:	4b08      	ldr	r3, [pc, #32]	; (f84c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    f82c:	4798      	blx	r3
    f82e:	bf00      	nop
    f830:	3708      	adds	r7, #8
    f832:	46bd      	mov	sp, r7
    f834:	bd80      	pop	{r7, pc}
    f836:	bf00      	nop
    f838:	20001610 	.word	0x20001610
    f83c:	20001408 	.word	0x20001408
    f840:	0000f4f5 	.word	0x0000f4f5
    f844:	20000000 	.word	0x20000000
    f848:	0000f531 	.word	0x0000f531
    f84c:	0000fbc1 	.word	0x0000fbc1
    f850:	20001548 	.word	0x20001548
    f854:	20001428 	.word	0x20001428

0000f858 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    f858:	b580      	push	{r7, lr}
    f85a:	af00      	add	r7, sp, #0
    f85c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f860:	2001      	movs	r0, #1
    f862:	4b01      	ldr	r3, [pc, #4]	; (f868 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    f864:	4798      	blx	r3
    f866:	bd80      	pop	{r7, pc}
    f868:	0000f7f1 	.word	0x0000f7f1

0000f86c <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    f86c:	b480      	push	{r7}
    f86e:	b083      	sub	sp, #12
    f870:	af00      	add	r7, sp, #0
    f872:	6078      	str	r0, [r7, #4]
    return (void *)0;
    f874:	2300      	movs	r3, #0
	}
    f876:	4618      	mov	r0, r3
    f878:	370c      	adds	r7, #12
    f87a:	46bd      	mov	sp, r7
    f87c:	bc80      	pop	{r7}
    f87e:	4770      	bx	lr

0000f880 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    f880:	b480      	push	{r7}
    f882:	af00      	add	r7, sp, #0
		}
    f884:	bf00      	nop
    f886:	46bd      	mov	sp, r7
    f888:	bc80      	pop	{r7}
    f88a:	4770      	bx	lr

0000f88c <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
    f88c:	b480      	push	{r7}
    f88e:	b083      	sub	sp, #12
    f890:	af00      	add	r7, sp, #0
    f892:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
    f894:	4a04      	ldr	r2, [pc, #16]	; (f8a8 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
    f896:	687b      	ldr	r3, [r7, #4]
    f898:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    f89a:	687b      	ldr	r3, [r7, #4]
    f89c:	4618      	mov	r0, r3
    f89e:	370c      	adds	r7, #12
    f8a0:	46bd      	mov	sp, r7
    f8a2:	bc80      	pop	{r7}
    f8a4:	4770      	bx	lr
    f8a6:	bf00      	nop
    f8a8:	20001448 	.word	0x20001448

0000f8ac <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
    f8ac:	b480      	push	{r7}
    f8ae:	b083      	sub	sp, #12
    f8b0:	af00      	add	r7, sp, #0
    f8b2:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    f8b4:	687b      	ldr	r3, [r7, #4]
    f8b6:	4618      	mov	r0, r3
    f8b8:	370c      	adds	r7, #12
    f8ba:	46bd      	mov	sp, r7
    f8bc:	bc80      	pop	{r7}
    f8be:	4770      	bx	lr

0000f8c0 <_ZN13SPI_Syn_Class6EnableEv>:
	ptrSPISync=this;
	SPI=spiDesc;
}


int32_t SPI_Syn_Class::Enable(){
    f8c0:	b580      	push	{r7, lr}
    f8c2:	b082      	sub	sp, #8
    f8c4:	af00      	add	r7, sp, #0
    f8c6:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    f8c8:	687b      	ldr	r3, [r7, #4]
    f8ca:	68da      	ldr	r2, [r3, #12]
    f8cc:	687b      	ldr	r3, [r7, #4]
    f8ce:	3310      	adds	r3, #16
    f8d0:	4619      	mov	r1, r3
    f8d2:	4610      	mov	r0, r2
    f8d4:	4b07      	ldr	r3, [pc, #28]	; (f8f4 <_ZN13SPI_Syn_Class6EnableEv+0x34>)
    f8d6:	4798      	blx	r3
	spi_m_sync_enable(SPI);
    f8d8:	687b      	ldr	r3, [r7, #4]
    f8da:	68db      	ldr	r3, [r3, #12]
    f8dc:	4618      	mov	r0, r3
    f8de:	4b06      	ldr	r3, [pc, #24]	; (f8f8 <_ZN13SPI_Syn_Class6EnableEv+0x38>)
    f8e0:	4798      	blx	r3
	ready=true;
    f8e2:	687b      	ldr	r3, [r7, #4]
    f8e4:	2201      	movs	r2, #1
    f8e6:	701a      	strb	r2, [r3, #0]
	return 0;
    f8e8:	2300      	movs	r3, #0
}
    f8ea:	4618      	mov	r0, r3
    f8ec:	3708      	adds	r7, #8
    f8ee:	46bd      	mov	sp, r7
    f8f0:	bd80      	pop	{r7, pc}
    f8f2:	bf00      	nop
    f8f4:	00002ed9 	.word	0x00002ed9
    f8f8:	00002d4d 	.word	0x00002d4d

0000f8fc <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
    f8fc:	b580      	push	{r7, lr}
    f8fe:	b086      	sub	sp, #24
    f900:	af00      	add	r7, sp, #0
    f902:	60f8      	str	r0, [r7, #12]
    f904:	60b9      	str	r1, [r7, #8]
    f906:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
    f908:	68fb      	ldr	r3, [r7, #12]
    f90a:	2201      	movs	r2, #1
    f90c:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
    f90e:	68fb      	ldr	r3, [r7, #12]
    f910:	691b      	ldr	r3, [r3, #16]
    f912:	687a      	ldr	r2, [r7, #4]
    f914:	b292      	uxth	r2, r2
    f916:	68b9      	ldr	r1, [r7, #8]
    f918:	4618      	mov	r0, r3
    f91a:	4b08      	ldr	r3, [pc, #32]	; (f93c <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
    f91c:	4798      	blx	r3
    f91e:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
    f920:	697b      	ldr	r3, [r7, #20]
    f922:	2b00      	cmp	r3, #0
    f924:	bf14      	ite	ne
    f926:	2301      	movne	r3, #1
    f928:	2300      	moveq	r3, #0
    f92a:	b2da      	uxtb	r2, r3
    f92c:	68fb      	ldr	r3, [r7, #12]
    f92e:	761a      	strb	r2, [r3, #24]
	 return w;
    f930:	697b      	ldr	r3, [r7, #20]
	
}
    f932:	4618      	mov	r0, r3
    f934:	3718      	adds	r7, #24
    f936:	46bd      	mov	sp, r7
    f938:	bd80      	pop	{r7, pc}
    f93a:	bf00      	nop
    f93c:	0000fb21 	.word	0x0000fb21

0000f940 <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
    f940:	b580      	push	{r7, lr}
    f942:	b086      	sub	sp, #24
    f944:	af00      	add	r7, sp, #0
    f946:	60f8      	str	r0, [r7, #12]
    f948:	60b9      	str	r1, [r7, #8]
    f94a:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
    f94c:	68fb      	ldr	r3, [r7, #12]
    f94e:	2201      	movs	r2, #1
    f950:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
    f952:	68fb      	ldr	r3, [r7, #12]
    f954:	691b      	ldr	r3, [r3, #16]
    f956:	687a      	ldr	r2, [r7, #4]
    f958:	b292      	uxth	r2, r2
    f95a:	68b9      	ldr	r1, [r7, #8]
    f95c:	4618      	mov	r0, r3
    f95e:	4b08      	ldr	r3, [pc, #32]	; (f980 <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
    f960:	4798      	blx	r3
    f962:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
    f964:	697b      	ldr	r3, [r7, #20]
    f966:	2b00      	cmp	r3, #0
    f968:	bf14      	ite	ne
    f96a:	2301      	movne	r3, #1
    f96c:	2300      	moveq	r3, #0
    f96e:	b2da      	uxtb	r2, r3
    f970:	68fb      	ldr	r3, [r7, #12]
    f972:	765a      	strb	r2, [r3, #25]
	return  r;
    f974:	697b      	ldr	r3, [r7, #20]
}
    f976:	4618      	mov	r0, r3
    f978:	3718      	adds	r7, #24
    f97a:	46bd      	mov	sp, r7
    f97c:	bd80      	pop	{r7, pc}
    f97e:	bf00      	nop
    f980:	0000fb71 	.word	0x0000fb71

0000f984 <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
    f984:	b580      	push	{r7, lr}
    f986:	b082      	sub	sp, #8
    f988:	af00      	add	r7, sp, #0
    f98a:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
    f98c:	687b      	ldr	r3, [r7, #4]
    f98e:	68db      	ldr	r3, [r3, #12]
    f990:	4618      	mov	r0, r3
    f992:	4b03      	ldr	r3, [pc, #12]	; (f9a0 <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
    f994:	4798      	blx	r3
	
}
    f996:	bf00      	nop
    f998:	3708      	adds	r7, #8
    f99a:	46bd      	mov	sp, r7
    f99c:	bd80      	pop	{r7, pc}
    f99e:	bf00      	nop
    f9a0:	00002d89 	.word	0x00002d89

0000f9a4 <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
    f9a4:	b480      	push	{r7}
    f9a6:	b083      	sub	sp, #12
    f9a8:	af00      	add	r7, sp, #0
    f9aa:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
    f9ac:	4a05      	ldr	r2, [pc, #20]	; (f9c4 <_ZN18SingleHeater_ClassC1Ev+0x20>)
    f9ae:	687b      	ldr	r3, [r7, #4]
    f9b0:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
    f9b2:	687b      	ldr	r3, [r7, #4]
    f9b4:	4a04      	ldr	r2, [pc, #16]	; (f9c8 <_ZN18SingleHeater_ClassC1Ev+0x24>)
    f9b6:	619a      	str	r2, [r3, #24]
} //SingleHeater_Class
    f9b8:	687b      	ldr	r3, [r7, #4]
    f9ba:	4618      	mov	r0, r3
    f9bc:	370c      	adds	r7, #12
    f9be:	46bd      	mov	sp, r7
    f9c0:	bc80      	pop	{r7}
    f9c2:	4770      	bx	lr
    f9c4:	2000148c 	.word	0x2000148c
    f9c8:	20001490 	.word	0x20001490

0000f9cc <_ZN18SingleHeater_ClassD1Ev>:
	statusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
    f9cc:	b480      	push	{r7}
    f9ce:	b083      	sub	sp, #12
    f9d0:	af00      	add	r7, sp, #0
    f9d2:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
    f9d4:	687b      	ldr	r3, [r7, #4]
    f9d6:	4618      	mov	r0, r3
    f9d8:	370c      	adds	r7, #12
    f9da:	46bd      	mov	sp, r7
    f9dc:	bc80      	pop	{r7}
    f9de:	4770      	bx	lr

0000f9e0 <_ZN18SingleHeater_Class10ReadStatusEv>:
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
	}
	
}

uint8_t	SingleHeater_Class::ReadStatus(void){
    f9e0:	b580      	push	{r7, lr}
    f9e2:	b084      	sub	sp, #16
    f9e4:	af00      	add	r7, sp, #0
    f9e6:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
    f9e8:	687b      	ldr	r3, [r7, #4]
    f9ea:	68db      	ldr	r3, [r3, #12]
    f9ec:	4618      	mov	r0, r3
    f9ee:	4b16      	ldr	r3, [pc, #88]	; (fa48 <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
    f9f0:	4798      	blx	r3
    f9f2:	4603      	mov	r3, r0
    f9f4:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
    f9f6:	7bbb      	ldrb	r3, [r7, #14]
    f9f8:	f003 0301 	and.w	r3, r3, #1
    f9fc:	2b00      	cmp	r3, #0
    f9fe:	bf14      	ite	ne
    fa00:	2301      	movne	r3, #1
    fa02:	2300      	moveq	r3, #0
    fa04:	b2da      	uxtb	r2, r3
    fa06:	687b      	ldr	r3, [r7, #4]
    fa08:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
    fa0a:	2300      	movs	r3, #0
    fa0c:	73fb      	strb	r3, [r7, #15]
    fa0e:	7bfb      	ldrb	r3, [r7, #15]
    fa10:	2b03      	cmp	r3, #3
    fa12:	dc14      	bgt.n	fa3e <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
    fa14:	7bfb      	ldrb	r3, [r7, #15]
    fa16:	7bb9      	ldrb	r1, [r7, #14]
    fa18:	7bfa      	ldrb	r2, [r7, #15]
    fa1a:	3201      	adds	r2, #1
    fa1c:	fa41 f202 	asr.w	r2, r1, r2
    fa20:	f002 0201 	and.w	r2, r2, #1
    fa24:	2a00      	cmp	r2, #0
    fa26:	bf14      	ite	ne
    fa28:	2201      	movne	r2, #1
    fa2a:	2200      	moveq	r2, #0
    fa2c:	b2d1      	uxtb	r1, r2
    fa2e:	687a      	ldr	r2, [r7, #4]
    fa30:	4413      	add	r3, r2
    fa32:	460a      	mov	r2, r1
    fa34:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
    fa36:	7bfb      	ldrb	r3, [r7, #15]
    fa38:	3301      	adds	r3, #1
    fa3a:	73fb      	strb	r3, [r7, #15]
    fa3c:	e7e7      	b.n	fa0e <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
    fa3e:	7bbb      	ldrb	r3, [r7, #14]
}
    fa40:	4618      	mov	r0, r3
    fa42:	3710      	adds	r7, #16
    fa44:	46bd      	mov	sp, r7
    fa46:	bd80      	pop	{r7, pc}
    fa48:	0000dfad 	.word	0x0000dfad

0000fa4c <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
    fa4c:	b590      	push	{r4, r7, lr}
    fa4e:	b083      	sub	sp, #12
    fa50:	af00      	add	r7, sp, #0
    fa52:	6078      	str	r0, [r7, #4]
    fa54:	4c05      	ldr	r4, [pc, #20]	; (fa6c <__tcf_0+0x20>)
    fa56:	4b06      	ldr	r3, [pc, #24]	; (fa70 <__tcf_0+0x24>)
    fa58:	429c      	cmp	r4, r3
    fa5a:	d004      	beq.n	fa66 <__tcf_0+0x1a>
    fa5c:	3c1c      	subs	r4, #28
    fa5e:	4620      	mov	r0, r4
    fa60:	4b04      	ldr	r3, [pc, #16]	; (fa74 <__tcf_0+0x28>)
    fa62:	4798      	blx	r3
    fa64:	e7f7      	b.n	fa56 <__tcf_0+0xa>
    fa66:	370c      	adds	r7, #12
    fa68:	46bd      	mov	sp, r7
    fa6a:	bd90      	pop	{r4, r7, pc}
    fa6c:	200014dc 	.word	0x200014dc
    fa70:	200014a4 	.word	0x200014a4
    fa74:	0000deb1 	.word	0x0000deb1

0000fa78 <_Z41__static_initialization_and_destruction_0ii>:

bool SingleHeater_Class::SelfTest(void){
	return true;
}

    fa78:	b5b0      	push	{r4, r5, r7, lr}
    fa7a:	b082      	sub	sp, #8
    fa7c:	af00      	add	r7, sp, #0
    fa7e:	6078      	str	r0, [r7, #4]
    fa80:	6039      	str	r1, [r7, #0]
    fa82:	687b      	ldr	r3, [r7, #4]
    fa84:	2b01      	cmp	r3, #1
    fa86:	d125      	bne.n	fad4 <_Z41__static_initialization_and_destruction_0ii+0x5c>
    fa88:	683b      	ldr	r3, [r7, #0]
    fa8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fa8e:	4293      	cmp	r3, r2
    fa90:	d120      	bne.n	fad4 <_Z41__static_initialization_and_destruction_0ii+0x5c>
static I2C_Sync_Class	i2cSharedStatic(&I2C_EXPANDER);
    fa92:	4912      	ldr	r1, [pc, #72]	; (fadc <_Z41__static_initialization_and_destruction_0ii+0x64>)
    fa94:	4812      	ldr	r0, [pc, #72]	; (fae0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    fa96:	4b13      	ldr	r3, [pc, #76]	; (fae4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    fa98:	4798      	blx	r3
    fa9a:	4a13      	ldr	r2, [pc, #76]	; (fae8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    fa9c:	4913      	ldr	r1, [pc, #76]	; (faec <_Z41__static_initialization_and_destruction_0ii+0x74>)
    fa9e:	4810      	ldr	r0, [pc, #64]	; (fae0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    faa0:	4b13      	ldr	r3, [pc, #76]	; (faf0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    faa2:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
    faa4:	4b13      	ldr	r3, [pc, #76]	; (faf4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    faa6:	2401      	movs	r4, #1
    faa8:	461d      	mov	r5, r3
    faaa:	2c00      	cmp	r4, #0
    faac:	db05      	blt.n	faba <_Z41__static_initialization_and_destruction_0ii+0x42>
    faae:	4628      	mov	r0, r5
    fab0:	4b11      	ldr	r3, [pc, #68]	; (faf8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    fab2:	4798      	blx	r3
    fab4:	351c      	adds	r5, #28
    fab6:	3c01      	subs	r4, #1
    fab8:	e7f7      	b.n	faaa <_Z41__static_initialization_and_destruction_0ii+0x32>
    faba:	4a0b      	ldr	r2, [pc, #44]	; (fae8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    fabc:	490f      	ldr	r1, [pc, #60]	; (fafc <_Z41__static_initialization_and_destruction_0ii+0x84>)
    fabe:	2000      	movs	r0, #0
    fac0:	4b0b      	ldr	r3, [pc, #44]	; (faf0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    fac2:	4798      	blx	r3
    fac4:	480e      	ldr	r0, [pc, #56]	; (fb00 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    fac6:	4b0f      	ldr	r3, [pc, #60]	; (fb04 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    fac8:	4798      	blx	r3
    faca:	4a07      	ldr	r2, [pc, #28]	; (fae8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    facc:	490e      	ldr	r1, [pc, #56]	; (fb08 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    face:	480c      	ldr	r0, [pc, #48]	; (fb00 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    fad0:	4b07      	ldr	r3, [pc, #28]	; (faf0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    fad2:	4798      	blx	r3
    fad4:	bf00      	nop
    fad6:	3708      	adds	r7, #8
    fad8:	46bd      	mov	sp, r7
    fada:	bdb0      	pop	{r4, r5, r7, pc}
    fadc:	20001630 	.word	0x20001630
    fae0:	20001490 	.word	0x20001490
    fae4:	0000dd81 	.word	0x0000dd81
    fae8:	20000000 	.word	0x20000000
    faec:	0000dd9d 	.word	0x0000dd9d
    faf0:	0000fbc1 	.word	0x0000fbc1
    faf4:	200014a4 	.word	0x200014a4
    faf8:	0000de9d 	.word	0x0000de9d
    fafc:	0000fa4d 	.word	0x0000fa4d
    fb00:	200014dc 	.word	0x200014dc
    fb04:	0000f9a5 	.word	0x0000f9a5
    fb08:	0000f9cd 	.word	0x0000f9cd

0000fb0c <_GLOBAL__sub_I_ptrSingleHeaterClass>:
    fb0c:	b580      	push	{r7, lr}
    fb0e:	af00      	add	r7, sp, #0
    fb10:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fb14:	2001      	movs	r0, #1
    fb16:	4b01      	ldr	r3, [pc, #4]	; (fb1c <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
    fb18:	4798      	blx	r3
    fb1a:	bd80      	pop	{r7, pc}
    fb1c:	0000fa79 	.word	0x0000fa79

0000fb20 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    fb20:	b580      	push	{r7, lr}
    fb22:	b084      	sub	sp, #16
    fb24:	af00      	add	r7, sp, #0
    fb26:	60f8      	str	r0, [r7, #12]
    fb28:	60b9      	str	r1, [r7, #8]
    fb2a:	4613      	mov	r3, r2
    fb2c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    fb2e:	68fb      	ldr	r3, [r7, #12]
    fb30:	2b00      	cmp	r3, #0
    fb32:	d004      	beq.n	fb3e <io_write+0x1e>
    fb34:	68bb      	ldr	r3, [r7, #8]
    fb36:	2b00      	cmp	r3, #0
    fb38:	d001      	beq.n	fb3e <io_write+0x1e>
    fb3a:	2301      	movs	r3, #1
    fb3c:	e000      	b.n	fb40 <io_write+0x20>
    fb3e:	2300      	movs	r3, #0
    fb40:	f003 0301 	and.w	r3, r3, #1
    fb44:	b2db      	uxtb	r3, r3
    fb46:	2234      	movs	r2, #52	; 0x34
    fb48:	4907      	ldr	r1, [pc, #28]	; (fb68 <io_write+0x48>)
    fb4a:	4618      	mov	r0, r3
    fb4c:	4b07      	ldr	r3, [pc, #28]	; (fb6c <io_write+0x4c>)
    fb4e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    fb50:	68fb      	ldr	r3, [r7, #12]
    fb52:	681b      	ldr	r3, [r3, #0]
    fb54:	88fa      	ldrh	r2, [r7, #6]
    fb56:	68b9      	ldr	r1, [r7, #8]
    fb58:	68f8      	ldr	r0, [r7, #12]
    fb5a:	4798      	blx	r3
    fb5c:	4603      	mov	r3, r0
}
    fb5e:	4618      	mov	r0, r3
    fb60:	3710      	adds	r7, #16
    fb62:	46bd      	mov	sp, r7
    fb64:	bd80      	pop	{r7, pc}
    fb66:	bf00      	nop
    fb68:	000103d8 	.word	0x000103d8
    fb6c:	00003d61 	.word	0x00003d61

0000fb70 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    fb70:	b580      	push	{r7, lr}
    fb72:	b084      	sub	sp, #16
    fb74:	af00      	add	r7, sp, #0
    fb76:	60f8      	str	r0, [r7, #12]
    fb78:	60b9      	str	r1, [r7, #8]
    fb7a:	4613      	mov	r3, r2
    fb7c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    fb7e:	68fb      	ldr	r3, [r7, #12]
    fb80:	2b00      	cmp	r3, #0
    fb82:	d004      	beq.n	fb8e <io_read+0x1e>
    fb84:	68bb      	ldr	r3, [r7, #8]
    fb86:	2b00      	cmp	r3, #0
    fb88:	d001      	beq.n	fb8e <io_read+0x1e>
    fb8a:	2301      	movs	r3, #1
    fb8c:	e000      	b.n	fb90 <io_read+0x20>
    fb8e:	2300      	movs	r3, #0
    fb90:	f003 0301 	and.w	r3, r3, #1
    fb94:	b2db      	uxtb	r3, r3
    fb96:	223d      	movs	r2, #61	; 0x3d
    fb98:	4907      	ldr	r1, [pc, #28]	; (fbb8 <io_read+0x48>)
    fb9a:	4618      	mov	r0, r3
    fb9c:	4b07      	ldr	r3, [pc, #28]	; (fbbc <io_read+0x4c>)
    fb9e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    fba0:	68fb      	ldr	r3, [r7, #12]
    fba2:	685b      	ldr	r3, [r3, #4]
    fba4:	88fa      	ldrh	r2, [r7, #6]
    fba6:	68b9      	ldr	r1, [r7, #8]
    fba8:	68f8      	ldr	r0, [r7, #12]
    fbaa:	4798      	blx	r3
    fbac:	4603      	mov	r3, r0
}
    fbae:	4618      	mov	r0, r3
    fbb0:	3710      	adds	r7, #16
    fbb2:	46bd      	mov	sp, r7
    fbb4:	bd80      	pop	{r7, pc}
    fbb6:	bf00      	nop
    fbb8:	000103d8 	.word	0x000103d8
    fbbc:	00003d61 	.word	0x00003d61

0000fbc0 <__aeabi_atexit>:
    fbc0:	460b      	mov	r3, r1
    fbc2:	4601      	mov	r1, r0
    fbc4:	4618      	mov	r0, r3
    fbc6:	f000 b801 	b.w	fbcc <__cxa_atexit>
    fbca:	bf00      	nop

0000fbcc <__cxa_atexit>:
    fbcc:	4613      	mov	r3, r2
    fbce:	460a      	mov	r2, r1
    fbd0:	4601      	mov	r1, r0
    fbd2:	2002      	movs	r0, #2
    fbd4:	f000 b91e 	b.w	fe14 <__register_exitproc>

0000fbd8 <ffs>:
    fbd8:	b140      	cbz	r0, fbec <ffs+0x14>
    fbda:	2300      	movs	r3, #0
    fbdc:	fa40 f103 	asr.w	r1, r0, r3
    fbe0:	1c5a      	adds	r2, r3, #1
    fbe2:	07c9      	lsls	r1, r1, #31
    fbe4:	4613      	mov	r3, r2
    fbe6:	d5f9      	bpl.n	fbdc <ffs+0x4>
    fbe8:	4610      	mov	r0, r2
    fbea:	4770      	bx	lr
    fbec:	4602      	mov	r2, r0
    fbee:	4610      	mov	r0, r2
    fbf0:	4770      	bx	lr
    fbf2:	bf00      	nop

0000fbf4 <__libc_init_array>:
    fbf4:	b570      	push	{r4, r5, r6, lr}
    fbf6:	4e0f      	ldr	r6, [pc, #60]	; (fc34 <__libc_init_array+0x40>)
    fbf8:	4d0f      	ldr	r5, [pc, #60]	; (fc38 <__libc_init_array+0x44>)
    fbfa:	1b76      	subs	r6, r6, r5
    fbfc:	10b6      	asrs	r6, r6, #2
    fbfe:	bf18      	it	ne
    fc00:	2400      	movne	r4, #0
    fc02:	d005      	beq.n	fc10 <__libc_init_array+0x1c>
    fc04:	3401      	adds	r4, #1
    fc06:	f855 3b04 	ldr.w	r3, [r5], #4
    fc0a:	4798      	blx	r3
    fc0c:	42a6      	cmp	r6, r4
    fc0e:	d1f9      	bne.n	fc04 <__libc_init_array+0x10>
    fc10:	4e0a      	ldr	r6, [pc, #40]	; (fc3c <__libc_init_array+0x48>)
    fc12:	4d0b      	ldr	r5, [pc, #44]	; (fc40 <__libc_init_array+0x4c>)
    fc14:	1b76      	subs	r6, r6, r5
    fc16:	f000 fbeb 	bl	103f0 <_init>
    fc1a:	10b6      	asrs	r6, r6, #2
    fc1c:	bf18      	it	ne
    fc1e:	2400      	movne	r4, #0
    fc20:	d006      	beq.n	fc30 <__libc_init_array+0x3c>
    fc22:	3401      	adds	r4, #1
    fc24:	f855 3b04 	ldr.w	r3, [r5], #4
    fc28:	4798      	blx	r3
    fc2a:	42a6      	cmp	r6, r4
    fc2c:	d1f9      	bne.n	fc22 <__libc_init_array+0x2e>
    fc2e:	bd70      	pop	{r4, r5, r6, pc}
    fc30:	bd70      	pop	{r4, r5, r6, pc}
    fc32:	bf00      	nop
    fc34:	000103fc 	.word	0x000103fc
    fc38:	000103fc 	.word	0x000103fc
    fc3c:	00010424 	.word	0x00010424
    fc40:	000103fc 	.word	0x000103fc

0000fc44 <memcpy>:
    fc44:	4684      	mov	ip, r0
    fc46:	ea41 0300 	orr.w	r3, r1, r0
    fc4a:	f013 0303 	ands.w	r3, r3, #3
    fc4e:	d16d      	bne.n	fd2c <memcpy+0xe8>
    fc50:	3a40      	subs	r2, #64	; 0x40
    fc52:	d341      	bcc.n	fcd8 <memcpy+0x94>
    fc54:	f851 3b04 	ldr.w	r3, [r1], #4
    fc58:	f840 3b04 	str.w	r3, [r0], #4
    fc5c:	f851 3b04 	ldr.w	r3, [r1], #4
    fc60:	f840 3b04 	str.w	r3, [r0], #4
    fc64:	f851 3b04 	ldr.w	r3, [r1], #4
    fc68:	f840 3b04 	str.w	r3, [r0], #4
    fc6c:	f851 3b04 	ldr.w	r3, [r1], #4
    fc70:	f840 3b04 	str.w	r3, [r0], #4
    fc74:	f851 3b04 	ldr.w	r3, [r1], #4
    fc78:	f840 3b04 	str.w	r3, [r0], #4
    fc7c:	f851 3b04 	ldr.w	r3, [r1], #4
    fc80:	f840 3b04 	str.w	r3, [r0], #4
    fc84:	f851 3b04 	ldr.w	r3, [r1], #4
    fc88:	f840 3b04 	str.w	r3, [r0], #4
    fc8c:	f851 3b04 	ldr.w	r3, [r1], #4
    fc90:	f840 3b04 	str.w	r3, [r0], #4
    fc94:	f851 3b04 	ldr.w	r3, [r1], #4
    fc98:	f840 3b04 	str.w	r3, [r0], #4
    fc9c:	f851 3b04 	ldr.w	r3, [r1], #4
    fca0:	f840 3b04 	str.w	r3, [r0], #4
    fca4:	f851 3b04 	ldr.w	r3, [r1], #4
    fca8:	f840 3b04 	str.w	r3, [r0], #4
    fcac:	f851 3b04 	ldr.w	r3, [r1], #4
    fcb0:	f840 3b04 	str.w	r3, [r0], #4
    fcb4:	f851 3b04 	ldr.w	r3, [r1], #4
    fcb8:	f840 3b04 	str.w	r3, [r0], #4
    fcbc:	f851 3b04 	ldr.w	r3, [r1], #4
    fcc0:	f840 3b04 	str.w	r3, [r0], #4
    fcc4:	f851 3b04 	ldr.w	r3, [r1], #4
    fcc8:	f840 3b04 	str.w	r3, [r0], #4
    fccc:	f851 3b04 	ldr.w	r3, [r1], #4
    fcd0:	f840 3b04 	str.w	r3, [r0], #4
    fcd4:	3a40      	subs	r2, #64	; 0x40
    fcd6:	d2bd      	bcs.n	fc54 <memcpy+0x10>
    fcd8:	3230      	adds	r2, #48	; 0x30
    fcda:	d311      	bcc.n	fd00 <memcpy+0xbc>
    fcdc:	f851 3b04 	ldr.w	r3, [r1], #4
    fce0:	f840 3b04 	str.w	r3, [r0], #4
    fce4:	f851 3b04 	ldr.w	r3, [r1], #4
    fce8:	f840 3b04 	str.w	r3, [r0], #4
    fcec:	f851 3b04 	ldr.w	r3, [r1], #4
    fcf0:	f840 3b04 	str.w	r3, [r0], #4
    fcf4:	f851 3b04 	ldr.w	r3, [r1], #4
    fcf8:	f840 3b04 	str.w	r3, [r0], #4
    fcfc:	3a10      	subs	r2, #16
    fcfe:	d2ed      	bcs.n	fcdc <memcpy+0x98>
    fd00:	320c      	adds	r2, #12
    fd02:	d305      	bcc.n	fd10 <memcpy+0xcc>
    fd04:	f851 3b04 	ldr.w	r3, [r1], #4
    fd08:	f840 3b04 	str.w	r3, [r0], #4
    fd0c:	3a04      	subs	r2, #4
    fd0e:	d2f9      	bcs.n	fd04 <memcpy+0xc0>
    fd10:	3204      	adds	r2, #4
    fd12:	d008      	beq.n	fd26 <memcpy+0xe2>
    fd14:	07d2      	lsls	r2, r2, #31
    fd16:	bf1c      	itt	ne
    fd18:	f811 3b01 	ldrbne.w	r3, [r1], #1
    fd1c:	f800 3b01 	strbne.w	r3, [r0], #1
    fd20:	d301      	bcc.n	fd26 <memcpy+0xe2>
    fd22:	880b      	ldrh	r3, [r1, #0]
    fd24:	8003      	strh	r3, [r0, #0]
    fd26:	4660      	mov	r0, ip
    fd28:	4770      	bx	lr
    fd2a:	bf00      	nop
    fd2c:	2a08      	cmp	r2, #8
    fd2e:	d313      	bcc.n	fd58 <memcpy+0x114>
    fd30:	078b      	lsls	r3, r1, #30
    fd32:	d08d      	beq.n	fc50 <memcpy+0xc>
    fd34:	f010 0303 	ands.w	r3, r0, #3
    fd38:	d08a      	beq.n	fc50 <memcpy+0xc>
    fd3a:	f1c3 0304 	rsb	r3, r3, #4
    fd3e:	1ad2      	subs	r2, r2, r3
    fd40:	07db      	lsls	r3, r3, #31
    fd42:	bf1c      	itt	ne
    fd44:	f811 3b01 	ldrbne.w	r3, [r1], #1
    fd48:	f800 3b01 	strbne.w	r3, [r0], #1
    fd4c:	d380      	bcc.n	fc50 <memcpy+0xc>
    fd4e:	f831 3b02 	ldrh.w	r3, [r1], #2
    fd52:	f820 3b02 	strh.w	r3, [r0], #2
    fd56:	e77b      	b.n	fc50 <memcpy+0xc>
    fd58:	3a04      	subs	r2, #4
    fd5a:	d3d9      	bcc.n	fd10 <memcpy+0xcc>
    fd5c:	3a01      	subs	r2, #1
    fd5e:	f811 3b01 	ldrb.w	r3, [r1], #1
    fd62:	f800 3b01 	strb.w	r3, [r0], #1
    fd66:	d2f9      	bcs.n	fd5c <memcpy+0x118>
    fd68:	780b      	ldrb	r3, [r1, #0]
    fd6a:	7003      	strb	r3, [r0, #0]
    fd6c:	784b      	ldrb	r3, [r1, #1]
    fd6e:	7043      	strb	r3, [r0, #1]
    fd70:	788b      	ldrb	r3, [r1, #2]
    fd72:	7083      	strb	r3, [r0, #2]
    fd74:	4660      	mov	r0, ip
    fd76:	4770      	bx	lr

0000fd78 <memset>:
    fd78:	b470      	push	{r4, r5, r6}
    fd7a:	0786      	lsls	r6, r0, #30
    fd7c:	d046      	beq.n	fe0c <memset+0x94>
    fd7e:	1e54      	subs	r4, r2, #1
    fd80:	2a00      	cmp	r2, #0
    fd82:	d041      	beq.n	fe08 <memset+0x90>
    fd84:	b2ca      	uxtb	r2, r1
    fd86:	4603      	mov	r3, r0
    fd88:	e002      	b.n	fd90 <memset+0x18>
    fd8a:	f114 34ff 	adds.w	r4, r4, #4294967295
    fd8e:	d33b      	bcc.n	fe08 <memset+0x90>
    fd90:	f803 2b01 	strb.w	r2, [r3], #1
    fd94:	079d      	lsls	r5, r3, #30
    fd96:	d1f8      	bne.n	fd8a <memset+0x12>
    fd98:	2c03      	cmp	r4, #3
    fd9a:	d92e      	bls.n	fdfa <memset+0x82>
    fd9c:	b2cd      	uxtb	r5, r1
    fd9e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    fda2:	2c0f      	cmp	r4, #15
    fda4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    fda8:	d919      	bls.n	fdde <memset+0x66>
    fdaa:	f103 0210 	add.w	r2, r3, #16
    fdae:	4626      	mov	r6, r4
    fdb0:	3e10      	subs	r6, #16
    fdb2:	2e0f      	cmp	r6, #15
    fdb4:	f842 5c10 	str.w	r5, [r2, #-16]
    fdb8:	f842 5c0c 	str.w	r5, [r2, #-12]
    fdbc:	f842 5c08 	str.w	r5, [r2, #-8]
    fdc0:	f842 5c04 	str.w	r5, [r2, #-4]
    fdc4:	f102 0210 	add.w	r2, r2, #16
    fdc8:	d8f2      	bhi.n	fdb0 <memset+0x38>
    fdca:	f1a4 0210 	sub.w	r2, r4, #16
    fdce:	f022 020f 	bic.w	r2, r2, #15
    fdd2:	f004 040f 	and.w	r4, r4, #15
    fdd6:	3210      	adds	r2, #16
    fdd8:	2c03      	cmp	r4, #3
    fdda:	4413      	add	r3, r2
    fddc:	d90d      	bls.n	fdfa <memset+0x82>
    fdde:	461e      	mov	r6, r3
    fde0:	4622      	mov	r2, r4
    fde2:	3a04      	subs	r2, #4
    fde4:	2a03      	cmp	r2, #3
    fde6:	f846 5b04 	str.w	r5, [r6], #4
    fdea:	d8fa      	bhi.n	fde2 <memset+0x6a>
    fdec:	1f22      	subs	r2, r4, #4
    fdee:	f022 0203 	bic.w	r2, r2, #3
    fdf2:	3204      	adds	r2, #4
    fdf4:	4413      	add	r3, r2
    fdf6:	f004 0403 	and.w	r4, r4, #3
    fdfa:	b12c      	cbz	r4, fe08 <memset+0x90>
    fdfc:	b2c9      	uxtb	r1, r1
    fdfe:	441c      	add	r4, r3
    fe00:	f803 1b01 	strb.w	r1, [r3], #1
    fe04:	429c      	cmp	r4, r3
    fe06:	d1fb      	bne.n	fe00 <memset+0x88>
    fe08:	bc70      	pop	{r4, r5, r6}
    fe0a:	4770      	bx	lr
    fe0c:	4614      	mov	r4, r2
    fe0e:	4603      	mov	r3, r0
    fe10:	e7c2      	b.n	fd98 <memset+0x20>
    fe12:	bf00      	nop

0000fe14 <__register_exitproc>:
    fe14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fe18:	4d2c      	ldr	r5, [pc, #176]	; (fecc <__register_exitproc+0xb8>)
    fe1a:	4606      	mov	r6, r0
    fe1c:	6828      	ldr	r0, [r5, #0]
    fe1e:	4698      	mov	r8, r3
    fe20:	460f      	mov	r7, r1
    fe22:	4691      	mov	r9, r2
    fe24:	f000 f882 	bl	ff2c <__retarget_lock_acquire_recursive>
    fe28:	4b29      	ldr	r3, [pc, #164]	; (fed0 <__register_exitproc+0xbc>)
    fe2a:	681c      	ldr	r4, [r3, #0]
    fe2c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    fe30:	2b00      	cmp	r3, #0
    fe32:	d03e      	beq.n	feb2 <__register_exitproc+0x9e>
    fe34:	685a      	ldr	r2, [r3, #4]
    fe36:	2a1f      	cmp	r2, #31
    fe38:	dc1c      	bgt.n	fe74 <__register_exitproc+0x60>
    fe3a:	f102 0e01 	add.w	lr, r2, #1
    fe3e:	b176      	cbz	r6, fe5e <__register_exitproc+0x4a>
    fe40:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    fe44:	2401      	movs	r4, #1
    fe46:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    fe4a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    fe4e:	4094      	lsls	r4, r2
    fe50:	4320      	orrs	r0, r4
    fe52:	2e02      	cmp	r6, #2
    fe54:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    fe58:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    fe5c:	d023      	beq.n	fea6 <__register_exitproc+0x92>
    fe5e:	3202      	adds	r2, #2
    fe60:	f8c3 e004 	str.w	lr, [r3, #4]
    fe64:	6828      	ldr	r0, [r5, #0]
    fe66:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    fe6a:	f000 f861 	bl	ff30 <__retarget_lock_release_recursive>
    fe6e:	2000      	movs	r0, #0
    fe70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fe74:	4b17      	ldr	r3, [pc, #92]	; (fed4 <__register_exitproc+0xc0>)
    fe76:	b30b      	cbz	r3, febc <__register_exitproc+0xa8>
    fe78:	f44f 70c8 	mov.w	r0, #400	; 0x190
    fe7c:	f7ff fcf6 	bl	f86c <malloc>
    fe80:	4603      	mov	r3, r0
    fe82:	b1d8      	cbz	r0, febc <__register_exitproc+0xa8>
    fe84:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    fe88:	6002      	str	r2, [r0, #0]
    fe8a:	2100      	movs	r1, #0
    fe8c:	6041      	str	r1, [r0, #4]
    fe8e:	460a      	mov	r2, r1
    fe90:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    fe94:	f04f 0e01 	mov.w	lr, #1
    fe98:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    fe9c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    fea0:	2e00      	cmp	r6, #0
    fea2:	d0dc      	beq.n	fe5e <__register_exitproc+0x4a>
    fea4:	e7cc      	b.n	fe40 <__register_exitproc+0x2c>
    fea6:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    feaa:	430c      	orrs	r4, r1
    feac:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    feb0:	e7d5      	b.n	fe5e <__register_exitproc+0x4a>
    feb2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    feb6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    feba:	e7bb      	b.n	fe34 <__register_exitproc+0x20>
    febc:	6828      	ldr	r0, [r5, #0]
    febe:	f000 f837 	bl	ff30 <__retarget_lock_release_recursive>
    fec2:	f04f 30ff 	mov.w	r0, #4294967295
    fec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    feca:	bf00      	nop
    fecc:	20000608 	.word	0x20000608
    fed0:	000103ec 	.word	0x000103ec
    fed4:	0000f86d 	.word	0x0000f86d

0000fed8 <register_fini>:
    fed8:	4b02      	ldr	r3, [pc, #8]	; (fee4 <register_fini+0xc>)
    feda:	b113      	cbz	r3, fee2 <register_fini+0xa>
    fedc:	4802      	ldr	r0, [pc, #8]	; (fee8 <register_fini+0x10>)
    fede:	f000 b805 	b.w	feec <atexit>
    fee2:	4770      	bx	lr
    fee4:	00000000 	.word	0x00000000
    fee8:	0000fef9 	.word	0x0000fef9

0000feec <atexit>:
    feec:	2300      	movs	r3, #0
    feee:	4601      	mov	r1, r0
    fef0:	461a      	mov	r2, r3
    fef2:	4618      	mov	r0, r3
    fef4:	f7ff bf8e 	b.w	fe14 <__register_exitproc>

0000fef8 <__libc_fini_array>:
    fef8:	b538      	push	{r3, r4, r5, lr}
    fefa:	4c0a      	ldr	r4, [pc, #40]	; (ff24 <__libc_fini_array+0x2c>)
    fefc:	4d0a      	ldr	r5, [pc, #40]	; (ff28 <__libc_fini_array+0x30>)
    fefe:	1b64      	subs	r4, r4, r5
    ff00:	10a4      	asrs	r4, r4, #2
    ff02:	d00a      	beq.n	ff1a <__libc_fini_array+0x22>
    ff04:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    ff08:	3b01      	subs	r3, #1
    ff0a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    ff0e:	3c01      	subs	r4, #1
    ff10:	f855 3904 	ldr.w	r3, [r5], #-4
    ff14:	4798      	blx	r3
    ff16:	2c00      	cmp	r4, #0
    ff18:	d1f9      	bne.n	ff0e <__libc_fini_array+0x16>
    ff1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ff1e:	f000 ba81 	b.w	10424 <_fini>
    ff22:	bf00      	nop
    ff24:	00010434 	.word	0x00010434
    ff28:	00010430 	.word	0x00010430

0000ff2c <__retarget_lock_acquire_recursive>:
    ff2c:	4770      	bx	lr
    ff2e:	bf00      	nop

0000ff30 <__retarget_lock_release_recursive>:
    ff30:	4770      	bx	lr
    ff32:	bf00      	nop
    ff34:	682f2e2e 	.word	0x682f2e2e
    ff38:	702f6c70 	.word	0x702f6c70
    ff3c:	2f74726f 	.word	0x2f74726f
    ff40:	5f6c7068 	.word	0x5f6c7068
    ff44:	6f697067 	.word	0x6f697067
    ff48:	7361625f 	.word	0x7361625f
    ff4c:	00682e65 	.word	0x00682e65
    ff50:	682f2e2e 	.word	0x682f2e2e
    ff54:	692f6c61 	.word	0x692f6c61
    ff58:	756c636e 	.word	0x756c636e
    ff5c:	682f6564 	.word	0x682f6564
    ff60:	775f6c61 	.word	0x775f6c61
    ff64:	682e7464 	.word	0x682e7464
    ff68:	00000000 	.word	0x00000000
    ff6c:	682f2e2e 	.word	0x682f2e2e
    ff70:	732f6c61 	.word	0x732f6c61
    ff74:	682f6372 	.word	0x682f6372
    ff78:	635f6c61 	.word	0x635f6c61
    ff7c:	6e656c61 	.word	0x6e656c61
    ff80:	2e726164 	.word	0x2e726164
    ff84:	00000063 	.word	0x00000063
    ff88:	682f2e2e 	.word	0x682f2e2e
    ff8c:	732f6c61 	.word	0x732f6c61
    ff90:	682f6372 	.word	0x682f6372
    ff94:	635f6c61 	.word	0x635f6c61
    ff98:	615f6e61 	.word	0x615f6e61
    ff9c:	636e7973 	.word	0x636e7973
    ffa0:	0000632e 	.word	0x0000632e
    ffa4:	682f2e2e 	.word	0x682f2e2e
    ffa8:	732f6c61 	.word	0x732f6c61
    ffac:	682f6372 	.word	0x682f6372
    ffb0:	635f6c61 	.word	0x635f6c61
    ffb4:	735f6372 	.word	0x735f6372
    ffb8:	2e636e79 	.word	0x2e636e79
    ffbc:	00000063 	.word	0x00000063
    ffc0:	682f2e2e 	.word	0x682f2e2e
    ffc4:	732f6c61 	.word	0x732f6c61
    ffc8:	682f6372 	.word	0x682f6372
    ffcc:	695f6c61 	.word	0x695f6c61
    ffd0:	6d5f6332 	.word	0x6d5f6332
    ffd4:	7973615f 	.word	0x7973615f
    ffd8:	632e636e 	.word	0x632e636e
    ffdc:	00000000 	.word	0x00000000
    ffe0:	682f2e2e 	.word	0x682f2e2e
    ffe4:	732f6c61 	.word	0x732f6c61
    ffe8:	682f6372 	.word	0x682f6372
    ffec:	695f6c61 	.word	0x695f6c61
    fff0:	6d5f6332 	.word	0x6d5f6332
    fff4:	6e79735f 	.word	0x6e79735f
    fff8:	00632e63 	.word	0x00632e63
    fffc:	682f2e2e 	.word	0x682f2e2e
   10000:	732f6c61 	.word	0x732f6c61
   10004:	682f6372 	.word	0x682f6372
   10008:	705f6c61 	.word	0x705f6c61
   1000c:	632e6d77 	.word	0x632e6d77
   10010:	00000000 	.word	0x00000000
   10014:	682f2e2e 	.word	0x682f2e2e
   10018:	732f6c61 	.word	0x732f6c61
   1001c:	682f6372 	.word	0x682f6372
   10020:	715f6c61 	.word	0x715f6c61
   10024:	5f697073 	.word	0x5f697073
   10028:	636e7973 	.word	0x636e7973
   1002c:	0000632e 	.word	0x0000632e
   10030:	682f2e2e 	.word	0x682f2e2e
   10034:	732f6c61 	.word	0x732f6c61
   10038:	682f6372 	.word	0x682f6372
   1003c:	735f6c61 	.word	0x735f6c61
   10040:	6d5f6970 	.word	0x6d5f6970
   10044:	6e79735f 	.word	0x6e79735f
   10048:	00632e63 	.word	0x00632e63
   1004c:	682f2e2e 	.word	0x682f2e2e
   10050:	732f6c61 	.word	0x732f6c61
   10054:	682f6372 	.word	0x682f6372
   10058:	745f6c61 	.word	0x745f6c61
   1005c:	72656d69 	.word	0x72656d69
   10060:	0000632e 	.word	0x0000632e
   10064:	682f2e2e 	.word	0x682f2e2e
   10068:	752f6c61 	.word	0x752f6c61
   1006c:	736c6974 	.word	0x736c6974
   10070:	6372732f 	.word	0x6372732f
   10074:	6974752f 	.word	0x6974752f
   10078:	6c5f736c 	.word	0x6c5f736c
   1007c:	2e747369 	.word	0x2e747369
   10080:	00000063 	.word	0x00000063

00010084 <_map>:
   10084:	00000000 00000040 00000003 00000003     ....@...........
   10094:	00000004 00000004 00000005 00000005     ................
   100a4:	00000006 00000056 00000007 00000057     ....V.......W...
   100b4:	00000008 00000028 00000009 00000029     ....(.......)...
   100c4:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
   100d4:	632e6369 00000000                       ic.c....

000100dc <user_mux_confs>:
   100dc:	00020100 00000000 00000000 00000000     ................
	...

00010120 <channel_confs>:
   10120:	0660065f 00000000 00000000 00000000     _.`.............
	...

00010160 <interrupt_cfg>:
	...
   101e0:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   101f0:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   10200:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   10210:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   10220:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   10230:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   10240:	43000400 43000800 43000c00              ...C...C...C

0001024c <sercomspi_regs>:
   1024c:	0020000c 00020000 00000000 01ff0001     .. .............
   1025c:	30000c04 02000000 00000000 ff00ef00     ...0............
   1026c:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   1027c:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   1028c:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   1029c:	43001400 43001800                       ...C...C

000102a4 <_usb_ep_cfgs>:
   102a4:	20000c28 00000000 00000040 20000c68     (.. ....@...h.. 
   102b4:	20000ca8 00400040 20000ce8 20000d28     ... @.@.... (.. 
   102c4:	00400040 20000d68 20000da8 00400040     @.@.h.. ... @.@.
   102d4:	20000de8 20000e28 00400040 00000804     ... (.. @.@.....
   102e4:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   102f4:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   10304:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   10314:	7361625f 00682e65                       _base.h.

0001031c <n25q256a_interface>:
   1031c:	0000c2fd 0000c3a1 0000c4b1 0000c669     ............i...
   1032c:	0000c6f9 752f2e2e 642f6273 63697665     ....../usb/devic
   1033c:	73752f65 2e636462 00000063              e/usbdc.c...

00010348 <defaultParameters>:
   10348:	00000040                                @...

0001034c <defaultPreferences>:
   1034c:	000000fa 00000032                       ....2...

00010354 <_ZTV9CDC_Class>:
	...
   1035c:	0000f009 0000f0e9 0000ec5d 0000efd1     ........].......
   1036c:	0000f181 0000ef95 0000ee79 0000eec9     ........y.......
   1037c:	0000eff1 0000f051                       ....Q...

00010384 <_ZTV6Stream>:
	...
   1038c:	0000f881 0000f215 0000ec5d 0000ec71     ........]...q...
   1039c:	0000f881 0000f881 0000f881 2e257830     ............0x%.
   103ac:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   103bc:	0066766f                                ovf.

000103c0 <_ZTV5Print>:
	...
   103c8:	0000f881 0000f215 0000ec5d 0000ec71     ........]...q...
   103d8:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   103e8:	00632e6f                                o.c.

000103ec <_global_impure_ptr>:
   103ec:	200001e0                                ... 

000103f0 <_init>:
   103f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   103f2:	bf00      	nop
   103f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   103f6:	bc08      	pop	{r3}
   103f8:	469e      	mov	lr, r3
   103fa:	4770      	bx	lr

000103fc <__init_array_start>:
   103fc:	0000fed9 	.word	0x0000fed9

00010400 <__frame_dummy_init_array_entry>:
   10400:	00000289 00000501 00000719 00000abd     ................
   10410:	0000e9ed 0000ec25 0000f201 0000f859     ....%.......Y...
   10420:	0000fb0d                                ....

00010424 <_fini>:
   10424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10426:	bf00      	nop
   10428:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1042a:	bc08      	pop	{r3}
   1042c:	469e      	mov	lr, r3
   1042e:	4770      	bx	lr

00010430 <__fini_array_start>:
   10430:	00000265 	.word	0x00000265
