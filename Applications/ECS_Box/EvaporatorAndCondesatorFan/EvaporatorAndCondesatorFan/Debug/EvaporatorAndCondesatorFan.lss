
EvaporatorAndCondesatorFan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f778  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000f778  0000f778  0001f778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000060c  20000000  0000f780  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002060c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002060c  2**0
                  CONTENTS
  5 .bss          00000e4c  2000060c  0000fd8c  0002060c  2**2
                  ALLOC
  6 .stack        00010000  20001458  00010bd8  0002060c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002060c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002063a  2**0
                  CONTENTS, READONLY
  9 .debug_info   0006e739  00000000  00000000  00020693  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000966a  00000000  00000000  0008edcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001b3cc  00000000  00000000  00098436  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003060  00000000  00000000  000b3802  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002d70  00000000  00000000  000b6862  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004da8e  00000000  00000000  000b95d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00038f89  00000000  00000000  00107060  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013cd03  00000000  00000000  0013ffe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c9b0  00000000  00000000  0027ccec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 14 01 20 8d 03 00 00 89 03 00 00 89 03 00 00     X.. ............
      10:	89 03 00 00 89 03 00 00 89 03 00 00 00 00 00 00     ................
	...
      2c:	89 03 00 00 89 03 00 00 00 00 00 00 89 03 00 00     ................
      3c:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
      4c:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
      5c:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
      6c:	65 5d 00 00 91 4b 00 00 89 03 00 00 89 03 00 00     e]...K..........
      7c:	a1 4b 00 00 b1 4b 00 00 c1 4b 00 00 d1 4b 00 00     .K...K...K...K..
      8c:	e1 4b 00 00 f1 4b 00 00 01 4c 00 00 89 03 00 00     .K...K...L......
      9c:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
      ac:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
      bc:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
      cc:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
      dc:	89 03 00 00 89 03 00 00 89 03 00 00 00 00 00 00     ................
	...
      f4:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
     104:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
     114:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
     124:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
     134:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
     144:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
     154:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
     164:	89 03 00 00 11 72 00 00 2d 72 00 00 49 72 00 00     .....r..-r..Ir..
     174:	65 72 00 00 89 03 00 00 e5 3f 00 00 b9 b1 00 00     er.......?......
     184:	c9 b1 00 00 d9 b1 00 00 e9 b1 00 00 89 03 00 00     ................
     194:	d5 7b 00 00 89 03 00 00 89 03 00 00 89 03 00 00     .{..............
     1a4:	89 03 00 00 89 03 00 00 89 03 00 00 f1 7b 00 00     .............{..
     1b4:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
     1c4:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
     1d4:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
     1e4:	89 03 00 00 89 03 00 00 b5 88 00 00 89 03 00 00     ................
     1f4:	d1 88 00 00 89 03 00 00 ed 88 00 00 09 89 00 00     ................
     204:	25 89 00 00 41 89 00 00 89 03 00 00 89 03 00 00     %...A...........
     214:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
     224:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
     234:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
     244:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
     254:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000060c 	.word	0x2000060c
     280:	00000000 	.word	0x00000000
     284:	0000f780 	.word	0x0000f780

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000f780 	.word	0x0000f780
     2c4:	20000610 	.word	0x20000610
     2c8:	0000f780 	.word	0x0000f780
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN19CondesatorFan_ClassC1Ev>:
#include "CondesatorFan_Class.h"

// default constructor
CondesatorFan_Class::CondesatorFan_Class()
{
} //CondesatorFan_Class
     2d0:	4770      	bx	lr

000002d2 <_ZN19CondesatorFan_ClassD1Ev>:

// default destructor
CondesatorFan_Class::~CondesatorFan_Class()
{
} //~CondesatorFan_Class
     2d2:	4770      	bx	lr

000002d4 <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
	return isOK;
	
	
}

uint8_t CondesatorFan_Class::InitExpanderArray(MCP23008_Class** expandersArray){
     2d4:	1f0b      	subs	r3, r1, #4
     2d6:	300c      	adds	r0, #12
     2d8:	3118      	adds	r1, #24
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
		{
			expanders[i]=expandersArray[i];
     2da:	f853 2f04 	ldr.w	r2, [r3, #4]!
     2de:	f840 2b04 	str.w	r2, [r0], #4
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
     2e2:	428b      	cmp	r3, r1
     2e4:	d1f9      	bne.n	2da <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
		}
		return 0;
}
     2e6:	2000      	movs	r0, #0
     2e8:	4770      	bx	lr
	...

000002ec <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class>:
bool CondesatorFan_Class::InitCondesator(I2C_Sync_Class* i2cClass,MCP23008_Class** expanderArray){
     2ec:	b510      	push	{r4, lr}
     2ee:	4604      	mov	r4, r0
	i2c=i2cClass;
     2f0:	6081      	str	r1, [r0, #8]
	if (i2c->isOK)
     2f2:	7a4b      	ldrb	r3, [r1, #9]
     2f4:	b90b      	cbnz	r3, 2fa <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
}
     2f6:	78a0      	ldrb	r0, [r4, #2]
     2f8:	bd10      	pop	{r4, pc}
		InitExpanderArray(expanderArray);
     2fa:	4611      	mov	r1, r2
     2fc:	4b03      	ldr	r3, [pc, #12]	; (30c <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x20>)
     2fe:	4798      	blx	r3
		expanders[EVAPORATOR_AND_CONDESATOR_EXPANDERS-1]->SetPortOutput();
     300:	6a60      	ldr	r0, [r4, #36]	; 0x24
     302:	4b03      	ldr	r3, [pc, #12]	; (310 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x24>)
     304:	4798      	blx	r3
		isOK=SelfTest();
     306:	2301      	movs	r3, #1
     308:	70a3      	strb	r3, [r4, #2]
     30a:	e7f4      	b.n	2f6 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xa>
     30c:	000002d5 	.word	0x000002d5
     310:	0000db31 	.word	0x0000db31

00000314 <_ZN19CondesatorFan_Class10ReadStatusEv>:
	


uint8_t	CondesatorFan_Class::ReadStatus(void){
     314:	b510      	push	{r4, lr}
     316:	4604      	mov	r4, r0
	uint8_t r=expanders[0]->ReadGPIORegister();
     318:	68c0      	ldr	r0, [r0, #12]
     31a:	4b08      	ldr	r3, [pc, #32]	; (33c <_ZN19CondesatorFan_Class10ReadStatusEv+0x28>)
     31c:	4798      	blx	r3
	
	
	condesatorStatus.niAlcCdsFanExtFault=r&(0x01<<(4));
     31e:	f3c0 1100 	ubfx	r1, r0, #4, #1
     322:	78e3      	ldrb	r3, [r4, #3]
     324:	f361 0382 	bfi	r3, r1, #2, #1
	condesatorStatus.niAlcCdsFanEnableFault=r&(0x02<<(4));
     328:	f3c0 1140 	ubfx	r1, r0, #5, #1
     32c:	f361 0341 	bfi	r3, r1, #1, #1
	condesatorStatus.niAlcCdsFanPwmFault=r&(0x04<<(4));
     330:	f3c0 1280 	ubfx	r2, r0, #6, #1
     334:	f362 0300 	bfi	r3, r2, #0, #1
     338:	70e3      	strb	r3, [r4, #3]
	
	return r;
}
     33a:	bd10      	pop	{r4, pc}
     33c:	0000d9bd 	.word	0x0000d9bd

00000340 <_ZN19CondesatorFan_Class6EnableEv>:
uint8_t	CondesatorFan_Class::Enable(void){
     340:	b510      	push	{r4, lr}
     342:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(2,true);
     344:	2201      	movs	r2, #1
     346:	2102      	movs	r1, #2
     348:	68c0      	ldr	r0, [r0, #12]
     34a:	4b02      	ldr	r3, [pc, #8]	; (354 <_ZN19CondesatorFan_Class6EnableEv+0x14>)
     34c:	4798      	blx	r3
     34e:	7060      	strb	r0, [r4, #1]
	return uint8_t(enabled);
}
     350:	bd10      	pop	{r4, pc}
     352:	bf00      	nop
     354:	0000dc29 	.word	0x0000dc29

00000358 <_ZN19CondesatorFan_Class7DisableEv>:
uint8_t	CondesatorFan_Class::Disable(void){
     358:	b510      	push	{r4, lr}
     35a:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(2,false)?false:true;
     35c:	2200      	movs	r2, #0
     35e:	2102      	movs	r1, #2
     360:	68c0      	ldr	r0, [r0, #12]
     362:	4b03      	ldr	r3, [pc, #12]	; (370 <_ZN19CondesatorFan_Class7DisableEv+0x18>)
     364:	4798      	blx	r3
     366:	f080 0001 	eor.w	r0, r0, #1
     36a:	b2c0      	uxtb	r0, r0
     36c:	7060      	strb	r0, [r4, #1]
	return uint8_t(enabled);
}
     36e:	bd10      	pop	{r4, pc}
     370:	0000dc29 	.word	0x0000dc29

00000374 <_ZN19CondesatorFan_Class6SetPWMEh>:

uint8_t	CondesatorFan_Class::SetPWM(uint8_t pwm){
     374:	b510      	push	{r4, lr}
     376:	4604      	mov	r4, r0
	pwmValue= expanders[6]->WriteGPIORegister(pwm);
     378:	6a40      	ldr	r0, [r0, #36]	; 0x24
     37a:	4b02      	ldr	r3, [pc, #8]	; (384 <_ZN19CondesatorFan_Class6SetPWMEh+0x10>)
     37c:	4798      	blx	r3
     37e:	7120      	strb	r0, [r4, #4]
	return pwmValue;
}
     380:	bd10      	pop	{r4, pc}
     382:	bf00      	nop
     384:	0000da3d 	.word	0x0000da3d

00000388 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     388:	e7fe      	b.n	388 <Dummy_Handler>
	...

0000038c <Reset_Handler>:
{
     38c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     38e:	4b17      	ldr	r3, [pc, #92]	; (3ec <Reset_Handler+0x60>)
     390:	4a17      	ldr	r2, [pc, #92]	; (3f0 <Reset_Handler+0x64>)
     392:	429a      	cmp	r2, r3
     394:	d010      	beq.n	3b8 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     396:	4b17      	ldr	r3, [pc, #92]	; (3f4 <Reset_Handler+0x68>)
     398:	4a14      	ldr	r2, [pc, #80]	; (3ec <Reset_Handler+0x60>)
     39a:	429a      	cmp	r2, r3
     39c:	d20c      	bcs.n	3b8 <Reset_Handler+0x2c>
     39e:	3b01      	subs	r3, #1
     3a0:	1a9b      	subs	r3, r3, r2
     3a2:	f023 0303 	bic.w	r3, r3, #3
     3a6:	3304      	adds	r3, #4
     3a8:	4413      	add	r3, r2
     3aa:	4911      	ldr	r1, [pc, #68]	; (3f0 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     3ac:	f851 0b04 	ldr.w	r0, [r1], #4
     3b0:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     3b4:	429a      	cmp	r2, r3
     3b6:	d1f9      	bne.n	3ac <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     3b8:	4b0f      	ldr	r3, [pc, #60]	; (3f8 <Reset_Handler+0x6c>)
     3ba:	4a10      	ldr	r2, [pc, #64]	; (3fc <Reset_Handler+0x70>)
     3bc:	429a      	cmp	r2, r3
     3be:	d20a      	bcs.n	3d6 <Reset_Handler+0x4a>
     3c0:	3b01      	subs	r3, #1
     3c2:	1a9b      	subs	r3, r3, r2
     3c4:	f023 0303 	bic.w	r3, r3, #3
     3c8:	3304      	adds	r3, #4
     3ca:	4413      	add	r3, r2
                *pDest++ = 0;
     3cc:	2100      	movs	r1, #0
     3ce:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     3d2:	4293      	cmp	r3, r2
     3d4:	d1fb      	bne.n	3ce <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     3d6:	4a0a      	ldr	r2, [pc, #40]	; (400 <Reset_Handler+0x74>)
     3d8:	4b0a      	ldr	r3, [pc, #40]	; (404 <Reset_Handler+0x78>)
     3da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     3de:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     3e0:	4b09      	ldr	r3, [pc, #36]	; (408 <Reset_Handler+0x7c>)
     3e2:	4798      	blx	r3
        main();
     3e4:	4b09      	ldr	r3, [pc, #36]	; (40c <Reset_Handler+0x80>)
     3e6:	4798      	blx	r3
     3e8:	e7fe      	b.n	3e8 <Reset_Handler+0x5c>
     3ea:	bf00      	nop
     3ec:	20000000 	.word	0x20000000
     3f0:	0000f780 	.word	0x0000f780
     3f4:	2000060c 	.word	0x2000060c
     3f8:	20001458 	.word	0x20001458
     3fc:	2000060c 	.word	0x2000060c
     400:	e000ed00 	.word	0xe000ed00
     404:	00000000 	.word	0x00000000
     408:	0000ed29 	.word	0x0000ed29
     40c:	0000073d 	.word	0x0000073d

00000410 <_ZL17FansStatusChangedv>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];

EvaporatorAndCondesatorFans_Class*	ptrFansClass;
static void	FansStatusChanged(void){
	
	ptrFansClass->changed=true;
     410:	4b02      	ldr	r3, [pc, #8]	; (41c <_ZL17FansStatusChangedv+0xc>)
     412:	681b      	ldr	r3, [r3, #0]
     414:	2201      	movs	r2, #1
     416:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
     41a:	4770      	bx	lr
     41c:	20000628 	.word	0x20000628

00000420 <__tcf_1>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
     420:	b570      	push	{r4, r5, r6, lr}
     422:	4c05      	ldr	r4, [pc, #20]	; (438 <__tcf_1+0x18>)
     424:	4e05      	ldr	r6, [pc, #20]	; (43c <__tcf_1+0x1c>)
     426:	f1a4 05c4 	sub.w	r5, r4, #196	; 0xc4
     42a:	3c1c      	subs	r4, #28
     42c:	4620      	mov	r0, r4
     42e:	47b0      	blx	r6
     430:	42ac      	cmp	r4, r5
     432:	d1fa      	bne.n	42a <__tcf_1+0xa>
     434:	bd70      	pop	{r4, r5, r6, pc}
     436:	bf00      	nop
     438:	200006f0 	.word	0x200006f0
     43c:	0000d8c1 	.word	0x0000d8c1

00000440 <__tcf_0>:
static EvaporatorFan_Class	evaporatorFan[2];
     440:	b510      	push	{r4, lr}
     442:	4803      	ldr	r0, [pc, #12]	; (450 <__tcf_0+0x10>)
     444:	4c03      	ldr	r4, [pc, #12]	; (454 <__tcf_0+0x14>)
     446:	47a0      	blx	r4
     448:	4803      	ldr	r0, [pc, #12]	; (458 <__tcf_0+0x18>)
     44a:	47a0      	blx	r4
     44c:	bd10      	pop	{r4, pc}
     44e:	bf00      	nop
     450:	2000071c 	.word	0x2000071c
     454:	0000061d 	.word	0x0000061d
     458:	200006f0 	.word	0x200006f0

0000045c <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev>:


}

// default constructor
EvaporatorAndCondesatorFans_Class::EvaporatorAndCondesatorFans_Class()
     45c:	b510      	push	{r4, lr}
     45e:	4604      	mov	r4, r0
     460:	4b0a      	ldr	r3, [pc, #40]	; (48c <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x30>)
     462:	4798      	blx	r3
     464:	f104 002c 	add.w	r0, r4, #44	; 0x2c
     468:	4b09      	ldr	r3, [pc, #36]	; (490 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x34>)
     46a:	4798      	blx	r3
{
	i2c=&i2cSharedStatic;
     46c:	4b09      	ldr	r3, [pc, #36]	; (494 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x38>)
     46e:	f503 7290 	add.w	r2, r3, #288	; 0x120
     472:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	evaporator[0]=&evaporatorFan[0];
     476:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
     47a:	65e2      	str	r2, [r4, #92]	; 0x5c
	evaporator[1]=&evaporatorFan[1];
     47c:	f103 02f4 	add.w	r2, r3, #244	; 0xf4
     480:	6622      	str	r2, [r4, #96]	; 0x60
	condesator=&condesatorFan;
     482:	f503 739a 	add.w	r3, r3, #308	; 0x134
     486:	6663      	str	r3, [r4, #100]	; 0x64
	
} //EvaporatorAndCondesatorFans_Class
     488:	4620      	mov	r0, r4
     48a:	bd10      	pop	{r4, pc}
     48c:	00000605 	.word	0x00000605
     490:	000002d1 	.word	0x000002d1
     494:	20000628 	.word	0x20000628

00000498 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev>:

// default destructor
EvaporatorAndCondesatorFans_Class::~EvaporatorAndCondesatorFans_Class()
     498:	b510      	push	{r4, lr}
     49a:	4604      	mov	r4, r0
     49c:	302c      	adds	r0, #44	; 0x2c
     49e:	4b03      	ldr	r3, [pc, #12]	; (4ac <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x14>)
     4a0:	4798      	blx	r3
     4a2:	4620      	mov	r0, r4
     4a4:	4b02      	ldr	r3, [pc, #8]	; (4b0 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x18>)
     4a6:	4798      	blx	r3
{
} //~EvaporatorAndCondesatorFans_Class
     4a8:	4620      	mov	r0, r4
     4aa:	bd10      	pop	{r4, pc}
     4ac:	000002d3 	.word	0x000002d3
     4b0:	0000061d 	.word	0x0000061d

000004b4 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv>:
	{
	}
	return isOK;
	
}
uint8_t EvaporatorAndCondesatorFans_Class::InitExpanderArray(void){
     4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     4b8:	4606      	mov	r6, r0
     4ba:	4c0c      	ldr	r4, [pc, #48]	; (4ec <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x38>)
     4bc:	f100 0768 	add.w	r7, r0, #104	; 0x68
	
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
     4c0:	2500      	movs	r5, #0
	{
		expanders[i]=&expandersStatic[i];
		currentExpander=expanders[i];
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
     4c2:	f8df 802c 	ldr.w	r8, [pc, #44]	; 4f0 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x3c>
		expanders[i]=&expandersStatic[i];
     4c6:	f847 4b04 	str.w	r4, [r7], #4
		currentExpander=expanders[i];
     4ca:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
     4ce:	f045 0120 	orr.w	r1, r5, #32
     4d2:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
     4d6:	b2c9      	uxtb	r1, r1
     4d8:	4620      	mov	r0, r4
     4da:	47c0      	blx	r8
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
     4dc:	3501      	adds	r5, #1
     4de:	341c      	adds	r4, #28
     4e0:	2d07      	cmp	r5, #7
     4e2:	d1f0      	bne.n	4c6 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x12>
	}
	return 0;
}
     4e4:	2000      	movs	r0, #0
     4e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4ea:	bf00      	nop
     4ec:	2000062c 	.word	0x2000062c
     4f0:	0000d8d5 	.word	0x0000d8d5

000004f4 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv>:
bool	EvaporatorAndCondesatorFans_Class::Init(void){
     4f4:	b570      	push	{r4, r5, r6, lr}
     4f6:	4604      	mov	r4, r0
	i2c->Init();
     4f8:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
     4fc:	4b16      	ldr	r3, [pc, #88]	; (558 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x64>)
     4fe:	4798      	blx	r3
	if (i2c->isOK)
     500:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     504:	7a5b      	ldrb	r3, [r3, #9]
     506:	b913      	cbnz	r3, 50e <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x1a>
	return isOK;
     508:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
}
     50c:	bd70      	pop	{r4, r5, r6, pc}
		ext_irq_register(PIN_PA03,FUNC_PTR(FansStatusChanged));
     50e:	4913      	ldr	r1, [pc, #76]	; (55c <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x68>)
     510:	2003      	movs	r0, #3
     512:	4b13      	ldr	r3, [pc, #76]	; (560 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x6c>)
     514:	4798      	blx	r3
		InitExpanderArray();
     516:	4620      	mov	r0, r4
     518:	4b12      	ldr	r3, [pc, #72]	; (564 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x70>)
     51a:	4798      	blx	r3
		evaporator[0]->InitEvaporator(0,i2c,expanders);
     51c:	f104 0568 	add.w	r5, r4, #104	; 0x68
     520:	462b      	mov	r3, r5
     522:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
     526:	2100      	movs	r1, #0
     528:	6de0      	ldr	r0, [r4, #92]	; 0x5c
     52a:	4e0f      	ldr	r6, [pc, #60]	; (568 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x74>)
     52c:	47b0      	blx	r6
		evaporator[1]->InitEvaporator(1,i2c,expanders);
     52e:	462b      	mov	r3, r5
     530:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
     534:	2101      	movs	r1, #1
     536:	6e20      	ldr	r0, [r4, #96]	; 0x60
     538:	47b0      	blx	r6
		condesator->InitCondesator(i2c,expanders);
     53a:	462a      	mov	r2, r5
     53c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
     540:	6e60      	ldr	r0, [r4, #100]	; 0x64
     542:	4b0a      	ldr	r3, [pc, #40]	; (56c <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x78>)
     544:	4798      	blx	r3
		isOK=(evaporator[0]->isOK)&(evaporator[1]->isOK);
     546:	6de3      	ldr	r3, [r4, #92]	; 0x5c
     548:	6e22      	ldr	r2, [r4, #96]	; 0x60
     54a:	791b      	ldrb	r3, [r3, #4]
     54c:	7912      	ldrb	r2, [r2, #4]
     54e:	4013      	ands	r3, r2
     550:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     554:	e7d8      	b.n	508 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x14>
     556:	bf00      	nop
     558:	0000d7c1 	.word	0x0000d7c1
     55c:	00000411 	.word	0x00000411
     560:	00002191 	.word	0x00002191
     564:	000004b5 	.word	0x000004b5
     568:	00000645 	.word	0x00000645
     56c:	000002ed 	.word	0x000002ed

00000570 <_GLOBAL__sub_I_ptrFansClass>:
}
     570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
static I2C_Sync_Class	i2cSharedStatic(&I2C_EXPANDER);
     572:	4d17      	ldr	r5, [pc, #92]	; (5d0 <_GLOBAL__sub_I_ptrFansClass+0x60>)
     574:	f505 7490 	add.w	r4, r5, #288	; 0x120
     578:	4916      	ldr	r1, [pc, #88]	; (5d4 <_GLOBAL__sub_I_ptrFansClass+0x64>)
     57a:	4620      	mov	r0, r4
     57c:	4b16      	ldr	r3, [pc, #88]	; (5d8 <_GLOBAL__sub_I_ptrFansClass+0x68>)
     57e:	4798      	blx	r3
     580:	4e16      	ldr	r6, [pc, #88]	; (5dc <_GLOBAL__sub_I_ptrFansClass+0x6c>)
     582:	4632      	mov	r2, r6
     584:	4916      	ldr	r1, [pc, #88]	; (5e0 <_GLOBAL__sub_I_ptrFansClass+0x70>)
     586:	4620      	mov	r0, r4
     588:	4c16      	ldr	r4, [pc, #88]	; (5e4 <_GLOBAL__sub_I_ptrFansClass+0x74>)
     58a:	47a0      	blx	r4
static EvaporatorFan_Class	evaporatorFan[2];
     58c:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
     590:	4f15      	ldr	r7, [pc, #84]	; (5e8 <_GLOBAL__sub_I_ptrFansClass+0x78>)
     592:	47b8      	blx	r7
     594:	f105 00f4 	add.w	r0, r5, #244	; 0xf4
     598:	47b8      	blx	r7
     59a:	4632      	mov	r2, r6
     59c:	4913      	ldr	r1, [pc, #76]	; (5ec <_GLOBAL__sub_I_ptrFansClass+0x7c>)
     59e:	2000      	movs	r0, #0
     5a0:	47a0      	blx	r4
static CondesatorFan_Class	condesatorFan;
     5a2:	f505 779a 	add.w	r7, r5, #308	; 0x134
     5a6:	4638      	mov	r0, r7
     5a8:	4b11      	ldr	r3, [pc, #68]	; (5f0 <_GLOBAL__sub_I_ptrFansClass+0x80>)
     5aa:	4798      	blx	r3
     5ac:	4632      	mov	r2, r6
     5ae:	4911      	ldr	r1, [pc, #68]	; (5f4 <_GLOBAL__sub_I_ptrFansClass+0x84>)
     5b0:	4638      	mov	r0, r7
     5b2:	47a0      	blx	r4
     5b4:	1d2c      	adds	r4, r5, #4
     5b6:	35c8      	adds	r5, #200	; 0xc8
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
     5b8:	4e0f      	ldr	r6, [pc, #60]	; (5f8 <_GLOBAL__sub_I_ptrFansClass+0x88>)
     5ba:	4620      	mov	r0, r4
     5bc:	47b0      	blx	r6
     5be:	341c      	adds	r4, #28
     5c0:	42a5      	cmp	r5, r4
     5c2:	d1fa      	bne.n	5ba <_GLOBAL__sub_I_ptrFansClass+0x4a>
     5c4:	4a05      	ldr	r2, [pc, #20]	; (5dc <_GLOBAL__sub_I_ptrFansClass+0x6c>)
     5c6:	490d      	ldr	r1, [pc, #52]	; (5fc <_GLOBAL__sub_I_ptrFansClass+0x8c>)
     5c8:	2000      	movs	r0, #0
     5ca:	4b06      	ldr	r3, [pc, #24]	; (5e4 <_GLOBAL__sub_I_ptrFansClass+0x74>)
     5cc:	4798      	blx	r3
     5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     5d0:	20000628 	.word	0x20000628
     5d4:	200012d8 	.word	0x200012d8
     5d8:	0000d791 	.word	0x0000d791
     5dc:	20000000 	.word	0x20000000
     5e0:	0000d7ad 	.word	0x0000d7ad
     5e4:	0000ecf5 	.word	0x0000ecf5
     5e8:	00000605 	.word	0x00000605
     5ec:	00000441 	.word	0x00000441
     5f0:	000002d1 	.word	0x000002d1
     5f4:	000002d3 	.word	0x000002d3
     5f8:	0000d8ad 	.word	0x0000d8ad
     5fc:	00000421 	.word	0x00000421

00000600 <_ZN29EvaporatorFanDataStruct_ClassC1Ev>:
#include "EvaporatorFanDataStruct_Class.h"

// default constructor
EvaporatorFanDataStruct_Class::EvaporatorFanDataStruct_Class()
{
} //EvaporatorFanDataStruct_Class
     600:	4770      	bx	lr

00000602 <_ZN29EvaporatorFanDataStruct_ClassD1Ev>:

// default destructor
EvaporatorFanDataStruct_Class::~EvaporatorFanDataStruct_Class()
{
} //~EvaporatorFanDataStruct_Class
     602:	4770      	bx	lr

00000604 <_ZN19EvaporatorFan_ClassC1Ev>:




// default constructor
EvaporatorFan_Class::EvaporatorFan_Class()
     604:	b510      	push	{r4, lr}
     606:	4604      	mov	r4, r0
     608:	4b02      	ldr	r3, [pc, #8]	; (614 <_ZN19EvaporatorFan_ClassC1Ev+0x10>)
     60a:	4798      	blx	r3
{
	
	ptrEvaFanClass=this;
     60c:	4b02      	ldr	r3, [pc, #8]	; (618 <_ZN19EvaporatorFan_ClassC1Ev+0x14>)
     60e:	601c      	str	r4, [r3, #0]
	
} //EvaporatorFan_Class
     610:	4620      	mov	r0, r4
     612:	bd10      	pop	{r4, pc}
     614:	00000601 	.word	0x00000601
     618:	20000788 	.word	0x20000788

0000061c <_ZN19EvaporatorFan_ClassD1Ev>:

// default destructor
EvaporatorFan_Class::~EvaporatorFan_Class()
     61c:	b510      	push	{r4, lr}
     61e:	4604      	mov	r4, r0
     620:	4b01      	ldr	r3, [pc, #4]	; (628 <_ZN19EvaporatorFan_ClassD1Ev+0xc>)
     622:	4798      	blx	r3
{
} //~EvaporatorFan_Class
     624:	4620      	mov	r0, r4
     626:	bd10      	pop	{r4, pc}
     628:	00000603 	.word	0x00000603

0000062c <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
		}
		return isOK;
	
	
}
uint8_t EvaporatorFan_Class::InitExpanderArray(MCP23008_Class** expanArray){
     62c:	1f0b      	subs	r3, r1, #4
     62e:	300c      	adds	r0, #12
     630:	3114      	adds	r1, #20
	
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
			{
				expanders[i]=expanArray[i];
     632:	f853 2f04 	ldr.w	r2, [r3, #4]!
     636:	f840 2b04 	str.w	r2, [r0], #4
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
     63a:	428b      	cmp	r3, r1
     63c:	d1f9      	bne.n	632 <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
			}
			return 0;
}
     63e:	2000      	movs	r0, #0
     640:	4770      	bx	lr
	...

00000644 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class>:
bool EvaporatorFan_Class::InitEvaporator(uint8_t number, I2C_Sync_Class* i2cClass,MCP23008_Class** expandersArray){
     644:	b510      	push	{r4, lr}
     646:	4604      	mov	r4, r0
	i2c=i2cClass;
     648:	6082      	str	r2, [r0, #8]
	fanNumber=number;
     64a:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
		if (i2c->isOK)
     64e:	7a52      	ldrb	r2, [r2, #9]
     650:	b90a      	cbnz	r2, 656 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x12>
}
     652:	7920      	ldrb	r0, [r4, #4]
     654:	bd10      	pop	{r4, pc}
			InitExpanderArray(expandersArray);
     656:	4619      	mov	r1, r3
     658:	4b0b      	ldr	r3, [pc, #44]	; (688 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x44>)
     65a:	4798      	blx	r3
			if (fanNumber==0)
     65c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     660:	b14b      	cbz	r3, 676 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x32>
			expanders[4+fanNumber]->SetPortOutput();
     662:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     666:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     66a:	69d8      	ldr	r0, [r3, #28]
     66c:	4b07      	ldr	r3, [pc, #28]	; (68c <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x48>)
     66e:	4798      	blx	r3
			isOK=SelfTest();
     670:	2301      	movs	r3, #1
     672:	7123      	strb	r3, [r4, #4]
     674:	e7ed      	b.n	652 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
				expanders[0]->SetPortInput(0x70);
     676:	2170      	movs	r1, #112	; 0x70
     678:	68e0      	ldr	r0, [r4, #12]
     67a:	4b05      	ldr	r3, [pc, #20]	; (690 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x4c>)
     67c:	4798      	blx	r3
				expanders[1]->SetPortInput();
     67e:	6920      	ldr	r0, [r4, #16]
     680:	4b04      	ldr	r3, [pc, #16]	; (694 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x50>)
     682:	4798      	blx	r3
     684:	e7ed      	b.n	662 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x1e>
     686:	bf00      	nop
     688:	0000062d 	.word	0x0000062d
     68c:	0000db31 	.word	0x0000db31
     690:	0000dabd 	.word	0x0000dabd
     694:	0000da79 	.word	0x0000da79

00000698 <_ZN19EvaporatorFan_Class10ReadStatusEv>:

uint8_t	EvaporatorFan_Class::ReadStatus(void){
     698:	b570      	push	{r4, r5, r6, lr}
     69a:	4604      	mov	r4, r0
	uint8_t r=expanders[1]->ReadGPIORegister();
     69c:	6900      	ldr	r0, [r0, #16]
     69e:	4b0e      	ldr	r3, [pc, #56]	; (6d8 <_ZN19EvaporatorFan_Class10ReadStatusEv+0x40>)
     6a0:	4798      	blx	r3
     6a2:	4601      	mov	r1, r0
	
	
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanExtFault=r&(0x01<<(4*fanNumber));
     6a4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
     6a8:	0096      	lsls	r6, r2, #2
     6aa:	fa40 f506 	asr.w	r5, r0, r6
     6ae:	5ca3      	ldrb	r3, [r4, r2]
     6b0:	f365 0382 	bfi	r3, r5, #2, #1
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanEnableFault=r&(0x02<<(4*fanNumber));
     6b4:	2502      	movs	r5, #2
     6b6:	40b5      	lsls	r5, r6
     6b8:	4205      	tst	r5, r0
     6ba:	bf14      	ite	ne
     6bc:	2501      	movne	r5, #1
     6be:	2500      	moveq	r5, #0
     6c0:	f365 0341 	bfi	r3, r5, #1, #1
	evaporatorFansStatus.inputs[fanNumber].iAlcEvaFanPwmFault=r&(0x04<<(4*fanNumber));
     6c4:	2504      	movs	r5, #4
     6c6:	40b5      	lsls	r5, r6
     6c8:	4205      	tst	r5, r0
     6ca:	bf14      	ite	ne
     6cc:	2101      	movne	r1, #1
     6ce:	2100      	moveq	r1, #0
     6d0:	f361 0300 	bfi	r3, r1, #0, #1
     6d4:	54a3      	strb	r3, [r4, r2]
	return r;
		
}
     6d6:	bd70      	pop	{r4, r5, r6, pc}
     6d8:	0000d9bd 	.word	0x0000d9bd

000006dc <_ZN19EvaporatorFan_Class6EnableEv>:
uint8_t	EvaporatorFan_Class::Enable(void){
     6dc:	b510      	push	{r4, lr}
     6de:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(fanNumber,true);
     6e0:	2201      	movs	r2, #1
     6e2:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
     6e6:	68c0      	ldr	r0, [r0, #12]
     6e8:	4b01      	ldr	r3, [pc, #4]	; (6f0 <_ZN19EvaporatorFan_Class6EnableEv+0x14>)
     6ea:	4798      	blx	r3
     6ec:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
     6ee:	bd10      	pop	{r4, pc}
     6f0:	0000dc29 	.word	0x0000dc29

000006f4 <_ZN19EvaporatorFan_Class7DisableEv>:
uint8_t	EvaporatorFan_Class::Disable(void){
     6f4:	b510      	push	{r4, lr}
     6f6:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(fanNumber,false)?false:true;
     6f8:	2200      	movs	r2, #0
     6fa:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
     6fe:	68c0      	ldr	r0, [r0, #12]
     700:	4b03      	ldr	r3, [pc, #12]	; (710 <_ZN19EvaporatorFan_Class7DisableEv+0x1c>)
     702:	4798      	blx	r3
     704:	f080 0001 	eor.w	r0, r0, #1
     708:	b2c0      	uxtb	r0, r0
     70a:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
     70c:	bd10      	pop	{r4, pc}
     70e:	bf00      	nop
     710:	0000dc29 	.word	0x0000dc29

00000714 <_ZN19EvaporatorFan_Class6SetPWMEh>:

uint8_t	EvaporatorFan_Class::SetPWM(uint8_t pwm){
     714:	b510      	push	{r4, lr}
     716:	4604      	mov	r4, r0
	pwmValue= expanders[4+fanNumber]->WriteGPIORegister(pwm);
     718:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
     71c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     720:	69d8      	ldr	r0, [r3, #28]
     722:	4b02      	ldr	r3, [pc, #8]	; (72c <_ZN19EvaporatorFan_Class6SetPWMEh+0x18>)
     724:	4798      	blx	r3
     726:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	return pwmValue;
}
     72a:	bd10      	pop	{r4, pc}
     72c:	0000da3d 	.word	0x0000da3d

00000730 <_ZL13FirmwareAlivePK10timer_task>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     730:	2280      	movs	r2, #128	; 0x80
     732:	4b01      	ldr	r3, [pc, #4]	; (738 <_ZL13FirmwareAlivePK10timer_task+0x8>)
     734:	61da      	str	r2, [r3, #28]
     736:	4770      	bx	lr
     738:	41008000 	.word	0x41008000

0000073c <main>:
	gpio_toggle_pin_level(iAlcFwIsAlive);
}


int main(void)
{
     73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     740:	b083      	sub	sp, #12
	atmel_start_init();
     742:	4b6f      	ldr	r3, [pc, #444]	; (900 <main+0x1c4>)
     744:	4798      	blx	r3
	uint8_t status;

	usb.Init();
     746:	4c6f      	ldr	r4, [pc, #444]	; (904 <main+0x1c8>)
     748:	4620      	mov	r0, r4
     74a:	4b6f      	ldr	r3, [pc, #444]	; (908 <main+0x1cc>)
     74c:	4798      	blx	r3
	delay_ms(100);
     74e:	2064      	movs	r0, #100	; 0x64
     750:	4b6e      	ldr	r3, [pc, #440]	; (90c <main+0x1d0>)
     752:	4798      	blx	r3
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     754:	4e6e      	ldr	r6, [pc, #440]	; (910 <main+0x1d4>)
     756:	4631      	mov	r1, r6
     758:	4620      	mov	r0, r4
     75a:	4d6e      	ldr	r5, [pc, #440]	; (914 <main+0x1d8>)
     75c:	47a8      	blx	r5
     75e:	4631      	mov	r1, r6
     760:	4620      	mov	r0, r4
     762:	47a8      	blx	r5
     764:	496c      	ldr	r1, [pc, #432]	; (918 <main+0x1dc>)
     766:	4620      	mov	r0, r4
     768:	47a8      	blx	r5
     76a:	4631      	mov	r1, r6
     76c:	4620      	mov	r0, r4
     76e:	47a8      	blx	r5
     770:	496a      	ldr	r1, [pc, #424]	; (91c <main+0x1e0>)
     772:	4620      	mov	r0, r4
     774:	47a8      	blx	r5
     776:	496a      	ldr	r1, [pc, #424]	; (920 <main+0x1e4>)
     778:	4620      	mov	r0, r4
     77a:	47a8      	blx	r5
     77c:	4969      	ldr	r1, [pc, #420]	; (924 <main+0x1e8>)
     77e:	4620      	mov	r0, r4
     780:	47a8      	blx	r5
     782:	4969      	ldr	r1, [pc, #420]	; (928 <main+0x1ec>)
     784:	4620      	mov	r0, r4
     786:	47a8      	blx	r5
     788:	4631      	mov	r1, r6
     78a:	4620      	mov	r0, r4
     78c:	47a8      	blx	r5
     78e:	4631      	mov	r1, r6
     790:	4620      	mov	r0, r4
     792:	47a8      	blx	r5
	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
	pwm_enable(&LIVE_PULSE);
     794:	4865      	ldr	r0, [pc, #404]	; (92c <main+0x1f0>)
     796:	4b66      	ldr	r3, [pc, #408]	; (930 <main+0x1f4>)
     798:	4798      	blx	r3
	fans.Init();
     79a:	4866      	ldr	r0, [pc, #408]	; (934 <main+0x1f8>)
     79c:	4b66      	ldr	r3, [pc, #408]	; (938 <main+0x1fc>)
     79e:	4798      	blx	r3
	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareAlive),250);
     7a0:	22fa      	movs	r2, #250	; 0xfa
     7a2:	4966      	ldr	r1, [pc, #408]	; (93c <main+0x200>)
     7a4:	4866      	ldr	r0, [pc, #408]	; (940 <main+0x204>)
     7a6:	4b67      	ldr	r3, [pc, #412]	; (944 <main+0x208>)
     7a8:	4798      	blx	r3
	{
		for (uint8_t j = 0; j <0xff; j++)
		{
			for (uint8_t i = 0; i < 2; i++)
			{
				delay_ms(DELAY_TIME_REQUEST);
     7aa:	f8df 9160 	ldr.w	r9, [pc, #352]	; 90c <main+0x1d0>
     7ae:	46a2      	mov	sl, r4
{
     7b0:	2300      	movs	r3, #0
     7b2:	9300      	str	r3, [sp, #0]
     7b4:	4e64      	ldr	r6, [pc, #400]	; (948 <main+0x20c>)
     7b6:	4b5f      	ldr	r3, [pc, #380]	; (934 <main+0x1f8>)
     7b8:	f103 075c 	add.w	r7, r3, #92	; 0x5c
     7bc:	f04f 0800 	mov.w	r8, #0
     7c0:	fa5f fb88 	uxtb.w	fp, r8
				delay_ms(DELAY_TIME_REQUEST);
     7c4:	2064      	movs	r0, #100	; 0x64
     7c6:	47c8      	blx	r9
     7c8:	4960      	ldr	r1, [pc, #384]	; (94c <main+0x210>)
     7ca:	4650      	mov	r0, sl
     7cc:	47a8      	blx	r5
     7ce:	220a      	movs	r2, #10
     7d0:	4659      	mov	r1, fp
     7d2:	4650      	mov	r0, sl
     7d4:	47b0      	blx	r6
     7d6:	495e      	ldr	r1, [pc, #376]	; (950 <main+0x214>)
     7d8:	4650      	mov	r0, sl
     7da:	47a8      	blx	r5
     7dc:	463c      	mov	r4, r7
				usb<<"Enabling Evaporator Fan: "<<i<<" .\t";
				fans.evaporator[i]->Enable();
     7de:	6838      	ldr	r0, [r7, #0]
     7e0:	4b5c      	ldr	r3, [pc, #368]	; (954 <main+0x218>)
     7e2:	4798      	blx	r3
				delay_ms(DELAY_TIME_REQUEST);
     7e4:	2064      	movs	r0, #100	; 0x64
     7e6:	47c8      	blx	r9
				status= fans.evaporator[i]->ReadStatus();
     7e8:	6838      	ldr	r0, [r7, #0]
     7ea:	4b5b      	ldr	r3, [pc, #364]	; (958 <main+0x21c>)
     7ec:	4798      	blx	r3
     7ee:	9001      	str	r0, [sp, #4]
     7f0:	495a      	ldr	r1, [pc, #360]	; (95c <main+0x220>)
     7f2:	4650      	mov	r0, sl
     7f4:	47a8      	blx	r5
     7f6:	220a      	movs	r2, #10
     7f8:	4659      	mov	r1, fp
     7fa:	4650      	mov	r0, sl
     7fc:	47b0      	blx	r6
     7fe:	4958      	ldr	r1, [pc, #352]	; (960 <main+0x224>)
     800:	4650      	mov	r0, sl
     802:	47a8      	blx	r5
     804:	220a      	movs	r2, #10
     806:	9901      	ldr	r1, [sp, #4]
     808:	4650      	mov	r0, sl
     80a:	47b0      	blx	r6
     80c:	4950      	ldr	r1, [pc, #320]	; (950 <main+0x214>)
     80e:	4650      	mov	r0, sl
     810:	47a8      	blx	r5
				usb<<"Evaporator Fan "<<i<< " Status :"<<status<<" .\t";
				delay_ms(DELAY_TIME_REQUEST);
     812:	2064      	movs	r0, #100	; 0x64
     814:	47c8      	blx	r9
				status= fans.evaporator[i]->SetPWM(j);
     816:	9900      	ldr	r1, [sp, #0]
     818:	f857 0b04 	ldr.w	r0, [r7], #4
     81c:	4b51      	ldr	r3, [pc, #324]	; (964 <main+0x228>)
     81e:	4798      	blx	r3
     820:	9001      	str	r0, [sp, #4]
     822:	494e      	ldr	r1, [pc, #312]	; (95c <main+0x220>)
     824:	4650      	mov	r0, sl
     826:	47a8      	blx	r5
     828:	220a      	movs	r2, #10
     82a:	4659      	mov	r1, fp
     82c:	4650      	mov	r0, sl
     82e:	47b0      	blx	r6
     830:	494d      	ldr	r1, [pc, #308]	; (968 <main+0x22c>)
     832:	4650      	mov	r0, sl
     834:	47a8      	blx	r5
     836:	220a      	movs	r2, #10
     838:	9901      	ldr	r1, [sp, #4]
     83a:	4650      	mov	r0, sl
     83c:	47b0      	blx	r6
     83e:	4944      	ldr	r1, [pc, #272]	; (950 <main+0x214>)
     840:	4650      	mov	r0, sl
     842:	47a8      	blx	r5
				usb<<"Evaporator Fan "<<i<< " SetPoint :"<<status<<" .\t";
				delay_ms(DELAY_TIME_REQUEST);
     844:	2064      	movs	r0, #100	; 0x64
     846:	47c8      	blx	r9
				fans.evaporator[i]->Disable();
     848:	6820      	ldr	r0, [r4, #0]
     84a:	4b48      	ldr	r3, [pc, #288]	; (96c <main+0x230>)
     84c:	4798      	blx	r3
     84e:	4948      	ldr	r1, [pc, #288]	; (970 <main+0x234>)
     850:	4650      	mov	r0, sl
     852:	47a8      	blx	r5
     854:	220a      	movs	r2, #10
     856:	4659      	mov	r1, fp
     858:	4650      	mov	r0, sl
     85a:	47b0      	blx	r6
     85c:	4945      	ldr	r1, [pc, #276]	; (974 <main+0x238>)
     85e:	4650      	mov	r0, sl
     860:	47a8      	blx	r5
     862:	492b      	ldr	r1, [pc, #172]	; (910 <main+0x1d4>)
     864:	4650      	mov	r0, sl
     866:	47a8      	blx	r5
     868:	f108 0801 	add.w	r8, r8, #1
			for (uint8_t i = 0; i < 2; i++)
     86c:	f1b8 0f02 	cmp.w	r8, #2
     870:	d1a6      	bne.n	7c0 <main+0x84>
				usb<<" EvaporatorFan "<<i<< " Disabled"<<NEWLINE;
			
			}
			delay_ms(DELAY_TIME_REQUEST);
     872:	2064      	movs	r0, #100	; 0x64
     874:	47c8      	blx	r9
     876:	4c26      	ldr	r4, [pc, #152]	; (910 <main+0x1d4>)
     878:	4621      	mov	r1, r4
     87a:	4650      	mov	r0, sl
     87c:	47a8      	blx	r5
     87e:	493e      	ldr	r1, [pc, #248]	; (978 <main+0x23c>)
     880:	4650      	mov	r0, sl
     882:	47a8      	blx	r5
			usb<<NEWLINE<<"Enabling Condesator .\t";
			fans.condesator->Enable();
     884:	4b2b      	ldr	r3, [pc, #172]	; (934 <main+0x1f8>)
     886:	6e58      	ldr	r0, [r3, #100]	; 0x64
     888:	4b3c      	ldr	r3, [pc, #240]	; (97c <main+0x240>)
     88a:	4798      	blx	r3
			delay_ms(DELAY_TIME_REQUEST);
     88c:	2064      	movs	r0, #100	; 0x64
     88e:	47c8      	blx	r9
			status= fans.condesator->ReadStatus();
     890:	4b28      	ldr	r3, [pc, #160]	; (934 <main+0x1f8>)
     892:	6e58      	ldr	r0, [r3, #100]	; 0x64
     894:	4b3a      	ldr	r3, [pc, #232]	; (980 <main+0x244>)
     896:	4798      	blx	r3
     898:	4607      	mov	r7, r0
     89a:	493a      	ldr	r1, [pc, #232]	; (984 <main+0x248>)
     89c:	4650      	mov	r0, sl
     89e:	47a8      	blx	r5
     8a0:	220a      	movs	r2, #10
     8a2:	4639      	mov	r1, r7
     8a4:	4650      	mov	r0, sl
     8a6:	47b0      	blx	r6
     8a8:	4f29      	ldr	r7, [pc, #164]	; (950 <main+0x214>)
     8aa:	4639      	mov	r1, r7
     8ac:	4650      	mov	r0, sl
     8ae:	47a8      	blx	r5
			usb<<"Condesator  Status :"<<status<<" .\t";
			delay_ms(DELAY_TIME_REQUEST);
     8b0:	2064      	movs	r0, #100	; 0x64
     8b2:	47c8      	blx	r9
			status= fans.condesator->SetPWM(j);
     8b4:	f8dd b000 	ldr.w	fp, [sp]
     8b8:	4659      	mov	r1, fp
     8ba:	4a1e      	ldr	r2, [pc, #120]	; (934 <main+0x1f8>)
     8bc:	6e50      	ldr	r0, [r2, #100]	; 0x64
     8be:	4b32      	ldr	r3, [pc, #200]	; (988 <main+0x24c>)
     8c0:	4798      	blx	r3
     8c2:	4680      	mov	r8, r0
     8c4:	4931      	ldr	r1, [pc, #196]	; (98c <main+0x250>)
     8c6:	4650      	mov	r0, sl
     8c8:	47a8      	blx	r5
     8ca:	220a      	movs	r2, #10
     8cc:	4641      	mov	r1, r8
     8ce:	4650      	mov	r0, sl
     8d0:	47b0      	blx	r6
     8d2:	4639      	mov	r1, r7
     8d4:	4650      	mov	r0, sl
     8d6:	47a8      	blx	r5
			usb<<"Condesator SetPoint :"<<status<<" .\t";
			delay_ms(DELAY_TIME_REQUEST);
     8d8:	2064      	movs	r0, #100	; 0x64
     8da:	47c8      	blx	r9
			fans.condesator->Disable();
     8dc:	4a15      	ldr	r2, [pc, #84]	; (934 <main+0x1f8>)
     8de:	6e50      	ldr	r0, [r2, #100]	; 0x64
     8e0:	4b2b      	ldr	r3, [pc, #172]	; (990 <main+0x254>)
     8e2:	4798      	blx	r3
     8e4:	492b      	ldr	r1, [pc, #172]	; (994 <main+0x258>)
     8e6:	4650      	mov	r0, sl
     8e8:	47a8      	blx	r5
     8ea:	4621      	mov	r1, r4
     8ec:	4650      	mov	r0, sl
     8ee:	47a8      	blx	r5
		for (uint8_t j = 0; j <0xff; j++)
     8f0:	465b      	mov	r3, fp
     8f2:	3301      	adds	r3, #1
     8f4:	b2db      	uxtb	r3, r3
     8f6:	9300      	str	r3, [sp, #0]
     8f8:	2bff      	cmp	r3, #255	; 0xff
     8fa:	f43f af59 	beq.w	7b0 <main+0x74>
     8fe:	e75a      	b.n	7b6 <main+0x7a>
     900:	000009c5 	.word	0x000009c5
     904:	200010a8 	.word	0x200010a8
     908:	0000e119 	.word	0x0000e119
     90c:	000020fd 	.word	0x000020fd
     910:	0000f17c 	.word	0x0000f17c
     914:	0000e57d 	.word	0x0000e57d
     918:	0000f180 	.word	0x0000f180
     91c:	0000f1a4 	.word	0x0000f1a4
     920:	0000f1b0 	.word	0x0000f1b0
     924:	0000f1bc 	.word	0x0000f1bc
     928:	0000f1c4 	.word	0x0000f1c4
     92c:	20001254 	.word	0x20001254
     930:	0000271d 	.word	0x0000271d
     934:	2000078c 	.word	0x2000078c
     938:	000004f5 	.word	0x000004f5
     93c:	00000731 	.word	0x00000731
     940:	20001050 	.word	0x20001050
     944:	0000dd9d 	.word	0x0000dd9d
     948:	0000e59d 	.word	0x0000e59d
     94c:	0000f1d0 	.word	0x0000f1d0
     950:	0000f1ec 	.word	0x0000f1ec
     954:	000006dd 	.word	0x000006dd
     958:	00000699 	.word	0x00000699
     95c:	0000f1f0 	.word	0x0000f1f0
     960:	0000f200 	.word	0x0000f200
     964:	00000715 	.word	0x00000715
     968:	0000f20c 	.word	0x0000f20c
     96c:	000006f5 	.word	0x000006f5
     970:	0000f218 	.word	0x0000f218
     974:	0000f228 	.word	0x0000f228
     978:	0000f234 	.word	0x0000f234
     97c:	00000341 	.word	0x00000341
     980:	00000315 	.word	0x00000315
     984:	0000f24c 	.word	0x0000f24c
     988:	00000375 	.word	0x00000375
     98c:	0000f264 	.word	0x0000f264
     990:	00000359 	.word	0x00000359
     994:	0000f27c 	.word	0x0000f27c

00000998 <_GLOBAL__sub_I_main>:
		}

		

	}
}
     998:	b510      	push	{r4, lr}
static EvaporatorAndCondesatorFans_Class fans;
     99a:	4c05      	ldr	r4, [pc, #20]	; (9b0 <_GLOBAL__sub_I_main+0x18>)
     99c:	4620      	mov	r0, r4
     99e:	4b05      	ldr	r3, [pc, #20]	; (9b4 <_GLOBAL__sub_I_main+0x1c>)
     9a0:	4798      	blx	r3
     9a2:	4a05      	ldr	r2, [pc, #20]	; (9b8 <_GLOBAL__sub_I_main+0x20>)
     9a4:	4905      	ldr	r1, [pc, #20]	; (9bc <_GLOBAL__sub_I_main+0x24>)
     9a6:	4620      	mov	r0, r4
     9a8:	4b05      	ldr	r3, [pc, #20]	; (9c0 <_GLOBAL__sub_I_main+0x28>)
     9aa:	4798      	blx	r3
     9ac:	bd10      	pop	{r4, pc}
     9ae:	bf00      	nop
     9b0:	2000078c 	.word	0x2000078c
     9b4:	0000045d 	.word	0x0000045d
     9b8:	20000000 	.word	0x20000000
     9bc:	00000499 	.word	0x00000499
     9c0:	0000ecf5 	.word	0x0000ecf5

000009c4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     9c4:	b580      	push	{r7, lr}
     9c6:	af00      	add	r7, sp, #0
	system_init();
     9c8:	4b03      	ldr	r3, [pc, #12]	; (9d8 <atmel_start_init+0x14>)
     9ca:	4798      	blx	r3
	usb_init();
     9cc:	4b03      	ldr	r3, [pc, #12]	; (9dc <atmel_start_init+0x18>)
     9ce:	4798      	blx	r3
	spi_nor_flash_init();
     9d0:	4b03      	ldr	r3, [pc, #12]	; (9e0 <atmel_start_init+0x1c>)
     9d2:	4798      	blx	r3
}
     9d4:	bf00      	nop
     9d6:	bd80      	pop	{r7, pc}
     9d8:	00001d39 	.word	0x00001d39
     9dc:	0000b8bd 	.word	0x0000b8bd
     9e0:	0000b851 	.word	0x0000b851

000009e4 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     9e4:	b480      	push	{r7}
     9e6:	b085      	sub	sp, #20
     9e8:	af00      	add	r7, sp, #0
     9ea:	60f8      	str	r0, [r7, #12]
     9ec:	460b      	mov	r3, r1
     9ee:	607a      	str	r2, [r7, #4]
     9f0:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     9f2:	7afa      	ldrb	r2, [r7, #11]
     9f4:	68fb      	ldr	r3, [r7, #12]
     9f6:	3220      	adds	r2, #32
     9f8:	6879      	ldr	r1, [r7, #4]
     9fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     9fe:	bf00      	nop
     a00:	3714      	adds	r7, #20
     a02:	46bd      	mov	sp, r7
     a04:	f85d 7b04 	ldr.w	r7, [sp], #4
     a08:	4770      	bx	lr

00000a0a <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     a0a:	b480      	push	{r7}
     a0c:	b083      	sub	sp, #12
     a0e:	af00      	add	r7, sp, #0
     a10:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     a12:	687b      	ldr	r3, [r7, #4]
     a14:	691b      	ldr	r3, [r3, #16]
     a16:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     a1a:	687b      	ldr	r3, [r7, #4]
     a1c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a1e:	bf00      	nop
     a20:	370c      	adds	r7, #12
     a22:	46bd      	mov	sp, r7
     a24:	f85d 7b04 	ldr.w	r7, [sp], #4
     a28:	4770      	bx	lr

00000a2a <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     a2a:	b480      	push	{r7}
     a2c:	b083      	sub	sp, #12
     a2e:	af00      	add	r7, sp, #0
     a30:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     a32:	687b      	ldr	r3, [r7, #4]
     a34:	691b      	ldr	r3, [r3, #16]
     a36:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     a3a:	687b      	ldr	r3, [r7, #4]
     a3c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a3e:	bf00      	nop
     a40:	370c      	adds	r7, #12
     a42:	46bd      	mov	sp, r7
     a44:	f85d 7b04 	ldr.w	r7, [sp], #4
     a48:	4770      	bx	lr

00000a4a <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     a4a:	b480      	push	{r7}
     a4c:	b083      	sub	sp, #12
     a4e:	af00      	add	r7, sp, #0
     a50:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     a52:	687b      	ldr	r3, [r7, #4]
     a54:	691b      	ldr	r3, [r3, #16]
     a56:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     a5a:	687b      	ldr	r3, [r7, #4]
     a5c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a5e:	bf00      	nop
     a60:	370c      	adds	r7, #12
     a62:	46bd      	mov	sp, r7
     a64:	f85d 7b04 	ldr.w	r7, [sp], #4
     a68:	4770      	bx	lr

00000a6a <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     a6a:	b480      	push	{r7}
     a6c:	b083      	sub	sp, #12
     a6e:	af00      	add	r7, sp, #0
     a70:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     a72:	687b      	ldr	r3, [r7, #4]
     a74:	691b      	ldr	r3, [r3, #16]
     a76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     a7a:	687b      	ldr	r3, [r7, #4]
     a7c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a7e:	bf00      	nop
     a80:	370c      	adds	r7, #12
     a82:	46bd      	mov	sp, r7
     a84:	f85d 7b04 	ldr.w	r7, [sp], #4
     a88:	4770      	bx	lr

00000a8a <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     a8a:	b480      	push	{r7}
     a8c:	b083      	sub	sp, #12
     a8e:	af00      	add	r7, sp, #0
     a90:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     a92:	687b      	ldr	r3, [r7, #4]
     a94:	695b      	ldr	r3, [r3, #20]
     a96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     a9a:	687b      	ldr	r3, [r7, #4]
     a9c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a9e:	bf00      	nop
     aa0:	370c      	adds	r7, #12
     aa2:	46bd      	mov	sp, r7
     aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
     aa8:	4770      	bx	lr

00000aaa <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     aaa:	b480      	push	{r7}
     aac:	b083      	sub	sp, #12
     aae:	af00      	add	r7, sp, #0
     ab0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     ab2:	687b      	ldr	r3, [r7, #4]
     ab4:	695b      	ldr	r3, [r3, #20]
     ab6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     aba:	687b      	ldr	r3, [r7, #4]
     abc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     abe:	bf00      	nop
     ac0:	370c      	adds	r7, #12
     ac2:	46bd      	mov	sp, r7
     ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ac8:	4770      	bx	lr

00000aca <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     aca:	b480      	push	{r7}
     acc:	b083      	sub	sp, #12
     ace:	af00      	add	r7, sp, #0
     ad0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     ad2:	687b      	ldr	r3, [r7, #4]
     ad4:	695b      	ldr	r3, [r3, #20]
     ad6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     ada:	687b      	ldr	r3, [r7, #4]
     adc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ade:	bf00      	nop
     ae0:	370c      	adds	r7, #12
     ae2:	46bd      	mov	sp, r7
     ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ae8:	4770      	bx	lr

00000aea <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     aea:	b480      	push	{r7}
     aec:	b083      	sub	sp, #12
     aee:	af00      	add	r7, sp, #0
     af0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     af2:	687b      	ldr	r3, [r7, #4]
     af4:	695b      	ldr	r3, [r3, #20]
     af6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     afa:	687b      	ldr	r3, [r7, #4]
     afc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     afe:	bf00      	nop
     b00:	370c      	adds	r7, #12
     b02:	46bd      	mov	sp, r7
     b04:	f85d 7b04 	ldr.w	r7, [sp], #4
     b08:	4770      	bx	lr

00000b0a <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     b0a:	b480      	push	{r7}
     b0c:	b083      	sub	sp, #12
     b0e:	af00      	add	r7, sp, #0
     b10:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     b12:	687b      	ldr	r3, [r7, #4]
     b14:	695b      	ldr	r3, [r3, #20]
     b16:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     b1a:	687b      	ldr	r3, [r7, #4]
     b1c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b1e:	bf00      	nop
     b20:	370c      	adds	r7, #12
     b22:	46bd      	mov	sp, r7
     b24:	f85d 7b04 	ldr.w	r7, [sp], #4
     b28:	4770      	bx	lr

00000b2a <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     b2a:	b480      	push	{r7}
     b2c:	b083      	sub	sp, #12
     b2e:	af00      	add	r7, sp, #0
     b30:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     b32:	687b      	ldr	r3, [r7, #4]
     b34:	699b      	ldr	r3, [r3, #24]
     b36:	f043 0201 	orr.w	r2, r3, #1
     b3a:	687b      	ldr	r3, [r7, #4]
     b3c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b3e:	bf00      	nop
     b40:	370c      	adds	r7, #12
     b42:	46bd      	mov	sp, r7
     b44:	f85d 7b04 	ldr.w	r7, [sp], #4
     b48:	4770      	bx	lr

00000b4a <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     b4a:	b480      	push	{r7}
     b4c:	b083      	sub	sp, #12
     b4e:	af00      	add	r7, sp, #0
     b50:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     b52:	687b      	ldr	r3, [r7, #4]
     b54:	699b      	ldr	r3, [r3, #24]
     b56:	f043 0202 	orr.w	r2, r3, #2
     b5a:	687b      	ldr	r3, [r7, #4]
     b5c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b5e:	bf00      	nop
     b60:	370c      	adds	r7, #12
     b62:	46bd      	mov	sp, r7
     b64:	f85d 7b04 	ldr.w	r7, [sp], #4
     b68:	4770      	bx	lr

00000b6a <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     b6a:	b480      	push	{r7}
     b6c:	b083      	sub	sp, #12
     b6e:	af00      	add	r7, sp, #0
     b70:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     b72:	687b      	ldr	r3, [r7, #4]
     b74:	699b      	ldr	r3, [r3, #24]
     b76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     b7a:	687b      	ldr	r3, [r7, #4]
     b7c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b7e:	bf00      	nop
     b80:	370c      	adds	r7, #12
     b82:	46bd      	mov	sp, r7
     b84:	f85d 7b04 	ldr.w	r7, [sp], #4
     b88:	4770      	bx	lr

00000b8a <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     b8a:	b480      	push	{r7}
     b8c:	b083      	sub	sp, #12
     b8e:	af00      	add	r7, sp, #0
     b90:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     b92:	687b      	ldr	r3, [r7, #4]
     b94:	699b      	ldr	r3, [r3, #24]
     b96:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     b9a:	687b      	ldr	r3, [r7, #4]
     b9c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b9e:	bf00      	nop
     ba0:	370c      	adds	r7, #12
     ba2:	46bd      	mov	sp, r7
     ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ba8:	4770      	bx	lr

00000baa <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     baa:	b480      	push	{r7}
     bac:	b083      	sub	sp, #12
     bae:	af00      	add	r7, sp, #0
     bb0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     bb2:	687b      	ldr	r3, [r7, #4]
     bb4:	699b      	ldr	r3, [r3, #24]
     bb6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     bba:	687b      	ldr	r3, [r7, #4]
     bbc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bbe:	bf00      	nop
     bc0:	370c      	adds	r7, #12
     bc2:	46bd      	mov	sp, r7
     bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
     bc8:	4770      	bx	lr

00000bca <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     bca:	b480      	push	{r7}
     bcc:	b083      	sub	sp, #12
     bce:	af00      	add	r7, sp, #0
     bd0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     bd2:	687b      	ldr	r3, [r7, #4]
     bd4:	699b      	ldr	r3, [r3, #24]
     bd6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     bda:	687b      	ldr	r3, [r7, #4]
     bdc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bde:	bf00      	nop
     be0:	370c      	adds	r7, #12
     be2:	46bd      	mov	sp, r7
     be4:	f85d 7b04 	ldr.w	r7, [sp], #4
     be8:	4770      	bx	lr

00000bea <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     bea:	b480      	push	{r7}
     bec:	b083      	sub	sp, #12
     bee:	af00      	add	r7, sp, #0
     bf0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     bf2:	687b      	ldr	r3, [r7, #4]
     bf4:	69db      	ldr	r3, [r3, #28]
     bf6:	f043 0220 	orr.w	r2, r3, #32
     bfa:	687b      	ldr	r3, [r7, #4]
     bfc:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bfe:	bf00      	nop
     c00:	370c      	adds	r7, #12
     c02:	46bd      	mov	sp, r7
     c04:	f85d 7b04 	ldr.w	r7, [sp], #4
     c08:	4770      	bx	lr

00000c0a <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     c0a:	b480      	push	{r7}
     c0c:	b083      	sub	sp, #12
     c0e:	af00      	add	r7, sp, #0
     c10:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     c12:	687b      	ldr	r3, [r7, #4]
     c14:	69db      	ldr	r3, [r3, #28]
     c16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     c1a:	687b      	ldr	r3, [r7, #4]
     c1c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c1e:	bf00      	nop
     c20:	370c      	adds	r7, #12
     c22:	46bd      	mov	sp, r7
     c24:	f85d 7b04 	ldr.w	r7, [sp], #4
     c28:	4770      	bx	lr

00000c2a <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     c2a:	b480      	push	{r7}
     c2c:	b083      	sub	sp, #12
     c2e:	af00      	add	r7, sp, #0
     c30:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     c32:	687b      	ldr	r3, [r7, #4]
     c34:	69db      	ldr	r3, [r3, #28]
     c36:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     c3a:	687b      	ldr	r3, [r7, #4]
     c3c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c3e:	bf00      	nop
     c40:	370c      	adds	r7, #12
     c42:	46bd      	mov	sp, r7
     c44:	f85d 7b04 	ldr.w	r7, [sp], #4
     c48:	4770      	bx	lr

00000c4a <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     c4a:	b480      	push	{r7}
     c4c:	b083      	sub	sp, #12
     c4e:	af00      	add	r7, sp, #0
     c50:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     c52:	687b      	ldr	r3, [r7, #4]
     c54:	6a1b      	ldr	r3, [r3, #32]
     c56:	f043 0201 	orr.w	r2, r3, #1
     c5a:	687b      	ldr	r3, [r7, #4]
     c5c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c5e:	bf00      	nop
     c60:	370c      	adds	r7, #12
     c62:	46bd      	mov	sp, r7
     c64:	f85d 7b04 	ldr.w	r7, [sp], #4
     c68:	4770      	bx	lr

00000c6a <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     c6a:	b480      	push	{r7}
     c6c:	b083      	sub	sp, #12
     c6e:	af00      	add	r7, sp, #0
     c70:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     c72:	687b      	ldr	r3, [r7, #4]
     c74:	6a1b      	ldr	r3, [r3, #32]
     c76:	f043 0202 	orr.w	r2, r3, #2
     c7a:	687b      	ldr	r3, [r7, #4]
     c7c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c7e:	bf00      	nop
     c80:	370c      	adds	r7, #12
     c82:	46bd      	mov	sp, r7
     c84:	f85d 7b04 	ldr.w	r7, [sp], #4
     c88:	4770      	bx	lr

00000c8a <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     c8a:	b480      	push	{r7}
     c8c:	b083      	sub	sp, #12
     c8e:	af00      	add	r7, sp, #0
     c90:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     c92:	687b      	ldr	r3, [r7, #4]
     c94:	6a1b      	ldr	r3, [r3, #32]
     c96:	f043 0204 	orr.w	r2, r3, #4
     c9a:	687b      	ldr	r3, [r7, #4]
     c9c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c9e:	bf00      	nop
     ca0:	370c      	adds	r7, #12
     ca2:	46bd      	mov	sp, r7
     ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ca8:	4770      	bx	lr

00000caa <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     caa:	b480      	push	{r7}
     cac:	b083      	sub	sp, #12
     cae:	af00      	add	r7, sp, #0
     cb0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     cb2:	687b      	ldr	r3, [r7, #4]
     cb4:	6a1b      	ldr	r3, [r3, #32]
     cb6:	f043 0208 	orr.w	r2, r3, #8
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cbe:	bf00      	nop
     cc0:	370c      	adds	r7, #12
     cc2:	46bd      	mov	sp, r7
     cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
     cc8:	4770      	bx	lr

00000cca <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     cca:	b480      	push	{r7}
     ccc:	b083      	sub	sp, #12
     cce:	af00      	add	r7, sp, #0
     cd0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     cd2:	687b      	ldr	r3, [r7, #4]
     cd4:	6a1b      	ldr	r3, [r3, #32]
     cd6:	f043 0220 	orr.w	r2, r3, #32
     cda:	687b      	ldr	r3, [r7, #4]
     cdc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cde:	bf00      	nop
     ce0:	370c      	adds	r7, #12
     ce2:	46bd      	mov	sp, r7
     ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ce8:	4770      	bx	lr

00000cea <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     cea:	b480      	push	{r7}
     cec:	b083      	sub	sp, #12
     cee:	af00      	add	r7, sp, #0
     cf0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     cf2:	687b      	ldr	r3, [r7, #4]
     cf4:	6a1b      	ldr	r3, [r3, #32]
     cf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     cfa:	687b      	ldr	r3, [r7, #4]
     cfc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cfe:	bf00      	nop
     d00:	370c      	adds	r7, #12
     d02:	46bd      	mov	sp, r7
     d04:	f85d 7b04 	ldr.w	r7, [sp], #4
     d08:	4770      	bx	lr

00000d0a <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     d0a:	b480      	push	{r7}
     d0c:	b085      	sub	sp, #20
     d0e:	af00      	add	r7, sp, #0
     d10:	60f8      	str	r0, [r7, #12]
     d12:	460b      	mov	r3, r1
     d14:	607a      	str	r2, [r7, #4]
     d16:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d18:	7afb      	ldrb	r3, [r7, #11]
     d1a:	68fa      	ldr	r2, [r7, #12]
     d1c:	01db      	lsls	r3, r3, #7
     d1e:	4413      	add	r3, r2
     d20:	3308      	adds	r3, #8
     d22:	687a      	ldr	r2, [r7, #4]
     d24:	601a      	str	r2, [r3, #0]
}
     d26:	bf00      	nop
     d28:	3714      	adds	r7, #20
     d2a:	46bd      	mov	sp, r7
     d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
     d30:	4770      	bx	lr

00000d32 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     d32:	b480      	push	{r7}
     d34:	b085      	sub	sp, #20
     d36:	af00      	add	r7, sp, #0
     d38:	60f8      	str	r0, [r7, #12]
     d3a:	460b      	mov	r3, r1
     d3c:	607a      	str	r2, [r7, #4]
     d3e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d40:	7afb      	ldrb	r3, [r7, #11]
     d42:	68fa      	ldr	r2, [r7, #12]
     d44:	01db      	lsls	r3, r3, #7
     d46:	4413      	add	r3, r2
     d48:	3304      	adds	r3, #4
     d4a:	687a      	ldr	r2, [r7, #4]
     d4c:	601a      	str	r2, [r3, #0]
}
     d4e:	bf00      	nop
     d50:	3714      	adds	r7, #20
     d52:	46bd      	mov	sp, r7
     d54:	f85d 7b04 	ldr.w	r7, [sp], #4
     d58:	4770      	bx	lr

00000d5a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     d5a:	b480      	push	{r7}
     d5c:	b085      	sub	sp, #20
     d5e:	af00      	add	r7, sp, #0
     d60:	60f8      	str	r0, [r7, #12]
     d62:	460b      	mov	r3, r1
     d64:	607a      	str	r2, [r7, #4]
     d66:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d68:	7afb      	ldrb	r3, [r7, #11]
     d6a:	68fa      	ldr	r2, [r7, #12]
     d6c:	01db      	lsls	r3, r3, #7
     d6e:	4413      	add	r3, r2
     d70:	3318      	adds	r3, #24
     d72:	687a      	ldr	r2, [r7, #4]
     d74:	601a      	str	r2, [r3, #0]
}
     d76:	bf00      	nop
     d78:	3714      	adds	r7, #20
     d7a:	46bd      	mov	sp, r7
     d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
     d80:	4770      	bx	lr

00000d82 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     d82:	b480      	push	{r7}
     d84:	b085      	sub	sp, #20
     d86:	af00      	add	r7, sp, #0
     d88:	60f8      	str	r0, [r7, #12]
     d8a:	460b      	mov	r3, r1
     d8c:	607a      	str	r2, [r7, #4]
     d8e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d90:	7afb      	ldrb	r3, [r7, #11]
     d92:	68fa      	ldr	r2, [r7, #12]
     d94:	01db      	lsls	r3, r3, #7
     d96:	4413      	add	r3, r2
     d98:	3314      	adds	r3, #20
     d9a:	687a      	ldr	r2, [r7, #4]
     d9c:	601a      	str	r2, [r3, #0]
}
     d9e:	bf00      	nop
     da0:	3714      	adds	r7, #20
     da2:	46bd      	mov	sp, r7
     da4:	f85d 7b04 	ldr.w	r7, [sp], #4
     da8:	4770      	bx	lr

00000daa <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     daa:	b480      	push	{r7}
     dac:	b085      	sub	sp, #20
     dae:	af00      	add	r7, sp, #0
     db0:	6078      	str	r0, [r7, #4]
     db2:	4608      	mov	r0, r1
     db4:	4611      	mov	r1, r2
     db6:	461a      	mov	r2, r3
     db8:	4603      	mov	r3, r0
     dba:	70fb      	strb	r3, [r7, #3]
     dbc:	460b      	mov	r3, r1
     dbe:	70bb      	strb	r3, [r7, #2]
     dc0:	4613      	mov	r3, r2
     dc2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     dc4:	78fa      	ldrb	r2, [r7, #3]
     dc6:	78bb      	ldrb	r3, [r7, #2]
     dc8:	6879      	ldr	r1, [r7, #4]
     dca:	01d2      	lsls	r2, r2, #7
     dcc:	440a      	add	r2, r1
     dce:	4413      	add	r3, r2
     dd0:	3330      	adds	r3, #48	; 0x30
     dd2:	781b      	ldrb	r3, [r3, #0]
     dd4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     dd6:	7bfb      	ldrb	r3, [r7, #15]
     dd8:	f023 030f 	bic.w	r3, r3, #15
     ddc:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     dde:	787b      	ldrb	r3, [r7, #1]
     de0:	f003 030f 	and.w	r3, r3, #15
     de4:	b2da      	uxtb	r2, r3
     de6:	7bfb      	ldrb	r3, [r7, #15]
     de8:	4313      	orrs	r3, r2
     dea:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     dec:	78fa      	ldrb	r2, [r7, #3]
     dee:	78bb      	ldrb	r3, [r7, #2]
     df0:	6879      	ldr	r1, [r7, #4]
     df2:	01d2      	lsls	r2, r2, #7
     df4:	440a      	add	r2, r1
     df6:	4413      	add	r3, r2
     df8:	3330      	adds	r3, #48	; 0x30
     dfa:	7bfa      	ldrb	r2, [r7, #15]
     dfc:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     dfe:	bf00      	nop
     e00:	3714      	adds	r7, #20
     e02:	46bd      	mov	sp, r7
     e04:	f85d 7b04 	ldr.w	r7, [sp], #4
     e08:	4770      	bx	lr

00000e0a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     e0a:	b480      	push	{r7}
     e0c:	b085      	sub	sp, #20
     e0e:	af00      	add	r7, sp, #0
     e10:	6078      	str	r0, [r7, #4]
     e12:	4608      	mov	r0, r1
     e14:	4611      	mov	r1, r2
     e16:	461a      	mov	r2, r3
     e18:	4603      	mov	r3, r0
     e1a:	70fb      	strb	r3, [r7, #3]
     e1c:	460b      	mov	r3, r1
     e1e:	70bb      	strb	r3, [r7, #2]
     e20:	4613      	mov	r3, r2
     e22:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e24:	78fa      	ldrb	r2, [r7, #3]
     e26:	78bb      	ldrb	r3, [r7, #2]
     e28:	6879      	ldr	r1, [r7, #4]
     e2a:	01d2      	lsls	r2, r2, #7
     e2c:	440a      	add	r2, r1
     e2e:	4413      	add	r3, r2
     e30:	3330      	adds	r3, #48	; 0x30
     e32:	781b      	ldrb	r3, [r3, #0]
     e34:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     e36:	7bfb      	ldrb	r3, [r7, #15]
     e38:	f003 030f 	and.w	r3, r3, #15
     e3c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     e3e:	787b      	ldrb	r3, [r7, #1]
     e40:	011b      	lsls	r3, r3, #4
     e42:	b2da      	uxtb	r2, r3
     e44:	7bfb      	ldrb	r3, [r7, #15]
     e46:	4313      	orrs	r3, r2
     e48:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e4a:	78fa      	ldrb	r2, [r7, #3]
     e4c:	78bb      	ldrb	r3, [r7, #2]
     e4e:	6879      	ldr	r1, [r7, #4]
     e50:	01d2      	lsls	r2, r2, #7
     e52:	440a      	add	r2, r1
     e54:	4413      	add	r3, r2
     e56:	3330      	adds	r3, #48	; 0x30
     e58:	7bfa      	ldrb	r2, [r7, #15]
     e5a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     e5c:	bf00      	nop
     e5e:	3714      	adds	r7, #20
     e60:	46bd      	mov	sp, r7
     e62:	f85d 7b04 	ldr.w	r7, [sp], #4
     e66:	4770      	bx	lr

00000e68 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     e68:	b480      	push	{r7}
     e6a:	b085      	sub	sp, #20
     e6c:	af00      	add	r7, sp, #0
     e6e:	6078      	str	r0, [r7, #4]
     e70:	4608      	mov	r0, r1
     e72:	4611      	mov	r1, r2
     e74:	461a      	mov	r2, r3
     e76:	4603      	mov	r3, r0
     e78:	70fb      	strb	r3, [r7, #3]
     e7a:	460b      	mov	r3, r1
     e7c:	70bb      	strb	r3, [r7, #2]
     e7e:	4613      	mov	r3, r2
     e80:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e82:	78fa      	ldrb	r2, [r7, #3]
     e84:	78bb      	ldrb	r3, [r7, #2]
     e86:	6879      	ldr	r1, [r7, #4]
     e88:	01d2      	lsls	r2, r2, #7
     e8a:	440a      	add	r2, r1
     e8c:	4413      	add	r3, r2
     e8e:	3340      	adds	r3, #64	; 0x40
     e90:	781b      	ldrb	r3, [r3, #0]
     e92:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e94:	7bfb      	ldrb	r3, [r7, #15]
     e96:	f023 0301 	bic.w	r3, r3, #1
     e9a:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e9c:	787a      	ldrb	r2, [r7, #1]
     e9e:	7bfb      	ldrb	r3, [r7, #15]
     ea0:	4313      	orrs	r3, r2
     ea2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ea4:	78fa      	ldrb	r2, [r7, #3]
     ea6:	78bb      	ldrb	r3, [r7, #2]
     ea8:	6879      	ldr	r1, [r7, #4]
     eaa:	01d2      	lsls	r2, r2, #7
     eac:	440a      	add	r2, r1
     eae:	4413      	add	r3, r2
     eb0:	3340      	adds	r3, #64	; 0x40
     eb2:	7bfa      	ldrb	r2, [r7, #15]
     eb4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     eb6:	bf00      	nop
     eb8:	3714      	adds	r7, #20
     eba:	46bd      	mov	sp, r7
     ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
     ec0:	4770      	bx	lr

00000ec2 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     ec2:	b490      	push	{r4, r7}
     ec4:	b082      	sub	sp, #8
     ec6:	af00      	add	r7, sp, #0
     ec8:	6078      	str	r0, [r7, #4]
     eca:	460b      	mov	r3, r1
     ecc:	70fb      	strb	r3, [r7, #3]
     ece:	4613      	mov	r3, r2
     ed0:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     ed2:	78fa      	ldrb	r2, [r7, #3]
     ed4:	78bb      	ldrb	r3, [r7, #2]
     ed6:	78f8      	ldrb	r0, [r7, #3]
     ed8:	78b9      	ldrb	r1, [r7, #2]
     eda:	687c      	ldr	r4, [r7, #4]
     edc:	01c0      	lsls	r0, r0, #7
     ede:	4420      	add	r0, r4
     ee0:	4401      	add	r1, r0
     ee2:	3140      	adds	r1, #64	; 0x40
     ee4:	7809      	ldrb	r1, [r1, #0]
     ee6:	b2c9      	uxtb	r1, r1
     ee8:	f041 0104 	orr.w	r1, r1, #4
     eec:	b2c8      	uxtb	r0, r1
     eee:	6879      	ldr	r1, [r7, #4]
     ef0:	01d2      	lsls	r2, r2, #7
     ef2:	440a      	add	r2, r1
     ef4:	4413      	add	r3, r2
     ef6:	3340      	adds	r3, #64	; 0x40
     ef8:	4602      	mov	r2, r0
     efa:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     efc:	bf00      	nop
     efe:	3708      	adds	r7, #8
     f00:	46bd      	mov	sp, r7
     f02:	bc90      	pop	{r4, r7}
     f04:	4770      	bx	lr

00000f06 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     f06:	b490      	push	{r4, r7}
     f08:	b082      	sub	sp, #8
     f0a:	af00      	add	r7, sp, #0
     f0c:	6078      	str	r0, [r7, #4]
     f0e:	460b      	mov	r3, r1
     f10:	70fb      	strb	r3, [r7, #3]
     f12:	4613      	mov	r3, r2
     f14:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f16:	78fa      	ldrb	r2, [r7, #3]
     f18:	78bb      	ldrb	r3, [r7, #2]
     f1a:	78f8      	ldrb	r0, [r7, #3]
     f1c:	78b9      	ldrb	r1, [r7, #2]
     f1e:	687c      	ldr	r4, [r7, #4]
     f20:	01c0      	lsls	r0, r0, #7
     f22:	4420      	add	r0, r4
     f24:	4401      	add	r1, r0
     f26:	3140      	adds	r1, #64	; 0x40
     f28:	7809      	ldrb	r1, [r1, #0]
     f2a:	b2c9      	uxtb	r1, r1
     f2c:	f021 0104 	bic.w	r1, r1, #4
     f30:	b2c8      	uxtb	r0, r1
     f32:	6879      	ldr	r1, [r7, #4]
     f34:	01d2      	lsls	r2, r2, #7
     f36:	440a      	add	r2, r1
     f38:	4413      	add	r3, r2
     f3a:	3340      	adds	r3, #64	; 0x40
     f3c:	4602      	mov	r2, r0
     f3e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     f40:	bf00      	nop
     f42:	3708      	adds	r7, #8
     f44:	46bd      	mov	sp, r7
     f46:	bc90      	pop	{r4, r7}
     f48:	4770      	bx	lr

00000f4a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     f4a:	b480      	push	{r7}
     f4c:	b085      	sub	sp, #20
     f4e:	af00      	add	r7, sp, #0
     f50:	60f8      	str	r0, [r7, #12]
     f52:	460b      	mov	r3, r1
     f54:	607a      	str	r2, [r7, #4]
     f56:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f58:	7afb      	ldrb	r3, [r7, #11]
     f5a:	68fa      	ldr	r2, [r7, #12]
     f5c:	01db      	lsls	r3, r3, #7
     f5e:	4413      	add	r3, r2
     f60:	3328      	adds	r3, #40	; 0x28
     f62:	687a      	ldr	r2, [r7, #4]
     f64:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     f66:	bf00      	nop
     f68:	3714      	adds	r7, #20
     f6a:	46bd      	mov	sp, r7
     f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
     f70:	4770      	bx	lr
	...

00000f74 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     f74:	b580      	push	{r7, lr}
     f76:	b082      	sub	sp, #8
     f78:	af00      	add	r7, sp, #0
     f7a:	4603      	mov	r3, r0
     f7c:	6039      	str	r1, [r7, #0]
     f7e:	71fb      	strb	r3, [r7, #7]
     f80:	4613      	mov	r3, r2
     f82:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     f84:	79bb      	ldrb	r3, [r7, #6]
     f86:	2b01      	cmp	r3, #1
     f88:	d01c      	beq.n	fc4 <_gpio_set_direction+0x50>
     f8a:	2b02      	cmp	r3, #2
     f8c:	d037      	beq.n	ffe <_gpio_set_direction+0x8a>
     f8e:	2b00      	cmp	r3, #0
     f90:	d14e      	bne.n	1030 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     f92:	79fb      	ldrb	r3, [r7, #7]
     f94:	683a      	ldr	r2, [r7, #0]
     f96:	4619      	mov	r1, r3
     f98:	482a      	ldr	r0, [pc, #168]	; (1044 <_gpio_set_direction+0xd0>)
     f9a:	4b2b      	ldr	r3, [pc, #172]	; (1048 <_gpio_set_direction+0xd4>)
     f9c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     f9e:	683b      	ldr	r3, [r7, #0]
     fa0:	b29b      	uxth	r3, r3
     fa2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     fa6:	79fb      	ldrb	r3, [r7, #7]
     fa8:	4619      	mov	r1, r3
     faa:	4826      	ldr	r0, [pc, #152]	; (1044 <_gpio_set_direction+0xd0>)
     fac:	4b27      	ldr	r3, [pc, #156]	; (104c <_gpio_set_direction+0xd8>)
     fae:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     fb0:	683b      	ldr	r3, [r7, #0]
     fb2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     fb4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     fb8:	79fb      	ldrb	r3, [r7, #7]
     fba:	4619      	mov	r1, r3
     fbc:	4821      	ldr	r0, [pc, #132]	; (1044 <_gpio_set_direction+0xd0>)
     fbe:	4b23      	ldr	r3, [pc, #140]	; (104c <_gpio_set_direction+0xd8>)
     fc0:	4798      	blx	r3
		break;
     fc2:	e03a      	b.n	103a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     fc4:	79fb      	ldrb	r3, [r7, #7]
     fc6:	683a      	ldr	r2, [r7, #0]
     fc8:	4619      	mov	r1, r3
     fca:	481e      	ldr	r0, [pc, #120]	; (1044 <_gpio_set_direction+0xd0>)
     fcc:	4b1e      	ldr	r3, [pc, #120]	; (1048 <_gpio_set_direction+0xd4>)
     fce:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     fd0:	683b      	ldr	r3, [r7, #0]
     fd2:	b29b      	uxth	r3, r3
     fd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     fdc:	79f9      	ldrb	r1, [r7, #7]
     fde:	461a      	mov	r2, r3
     fe0:	4818      	ldr	r0, [pc, #96]	; (1044 <_gpio_set_direction+0xd0>)
     fe2:	4b1a      	ldr	r3, [pc, #104]	; (104c <_gpio_set_direction+0xd8>)
     fe4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     fe6:	683b      	ldr	r3, [r7, #0]
     fe8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     fea:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     ff2:	79f9      	ldrb	r1, [r7, #7]
     ff4:	461a      	mov	r2, r3
     ff6:	4813      	ldr	r0, [pc, #76]	; (1044 <_gpio_set_direction+0xd0>)
     ff8:	4b14      	ldr	r3, [pc, #80]	; (104c <_gpio_set_direction+0xd8>)
     ffa:	4798      	blx	r3
		break;
     ffc:	e01d      	b.n	103a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     ffe:	79fb      	ldrb	r3, [r7, #7]
    1000:	683a      	ldr	r2, [r7, #0]
    1002:	4619      	mov	r1, r3
    1004:	480f      	ldr	r0, [pc, #60]	; (1044 <_gpio_set_direction+0xd0>)
    1006:	4b12      	ldr	r3, [pc, #72]	; (1050 <_gpio_set_direction+0xdc>)
    1008:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    100a:	683b      	ldr	r3, [r7, #0]
    100c:	b29b      	uxth	r3, r3
    100e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1012:	79fb      	ldrb	r3, [r7, #7]
    1014:	4619      	mov	r1, r3
    1016:	480b      	ldr	r0, [pc, #44]	; (1044 <_gpio_set_direction+0xd0>)
    1018:	4b0c      	ldr	r3, [pc, #48]	; (104c <_gpio_set_direction+0xd8>)
    101a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    101c:	683b      	ldr	r3, [r7, #0]
    101e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1020:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1024:	79fb      	ldrb	r3, [r7, #7]
    1026:	4619      	mov	r1, r3
    1028:	4806      	ldr	r0, [pc, #24]	; (1044 <_gpio_set_direction+0xd0>)
    102a:	4b08      	ldr	r3, [pc, #32]	; (104c <_gpio_set_direction+0xd8>)
    102c:	4798      	blx	r3
		break;
    102e:	e004      	b.n	103a <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    1030:	2246      	movs	r2, #70	; 0x46
    1032:	4908      	ldr	r1, [pc, #32]	; (1054 <_gpio_set_direction+0xe0>)
    1034:	2000      	movs	r0, #0
    1036:	4b08      	ldr	r3, [pc, #32]	; (1058 <_gpio_set_direction+0xe4>)
    1038:	4798      	blx	r3
	}
}
    103a:	bf00      	nop
    103c:	3708      	adds	r7, #8
    103e:	46bd      	mov	sp, r7
    1040:	bd80      	pop	{r7, pc}
    1042:	bf00      	nop
    1044:	41008000 	.word	0x41008000
    1048:	00000d33 	.word	0x00000d33
    104c:	00000f4b 	.word	0x00000f4b
    1050:	00000d0b 	.word	0x00000d0b
    1054:	0000f290 	.word	0x0000f290
    1058:	0000389d 	.word	0x0000389d

0000105c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    105c:	b580      	push	{r7, lr}
    105e:	b082      	sub	sp, #8
    1060:	af00      	add	r7, sp, #0
    1062:	4603      	mov	r3, r0
    1064:	6039      	str	r1, [r7, #0]
    1066:	71fb      	strb	r3, [r7, #7]
    1068:	4613      	mov	r3, r2
    106a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    106c:	79bb      	ldrb	r3, [r7, #6]
    106e:	2b00      	cmp	r3, #0
    1070:	d006      	beq.n	1080 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    1072:	79fb      	ldrb	r3, [r7, #7]
    1074:	683a      	ldr	r2, [r7, #0]
    1076:	4619      	mov	r1, r3
    1078:	4806      	ldr	r0, [pc, #24]	; (1094 <_gpio_set_level+0x38>)
    107a:	4b07      	ldr	r3, [pc, #28]	; (1098 <_gpio_set_level+0x3c>)
    107c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    107e:	e005      	b.n	108c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1080:	79fb      	ldrb	r3, [r7, #7]
    1082:	683a      	ldr	r2, [r7, #0]
    1084:	4619      	mov	r1, r3
    1086:	4803      	ldr	r0, [pc, #12]	; (1094 <_gpio_set_level+0x38>)
    1088:	4b04      	ldr	r3, [pc, #16]	; (109c <_gpio_set_level+0x40>)
    108a:	4798      	blx	r3
}
    108c:	bf00      	nop
    108e:	3708      	adds	r7, #8
    1090:	46bd      	mov	sp, r7
    1092:	bd80      	pop	{r7, pc}
    1094:	41008000 	.word	0x41008000
    1098:	00000d5b 	.word	0x00000d5b
    109c:	00000d83 	.word	0x00000d83

000010a0 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    10a0:	b580      	push	{r7, lr}
    10a2:	b082      	sub	sp, #8
    10a4:	af00      	add	r7, sp, #0
    10a6:	4603      	mov	r3, r0
    10a8:	71fb      	strb	r3, [r7, #7]
    10aa:	460b      	mov	r3, r1
    10ac:	71bb      	strb	r3, [r7, #6]
    10ae:	4613      	mov	r3, r2
    10b0:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    10b2:	797b      	ldrb	r3, [r7, #5]
    10b4:	2b01      	cmp	r3, #1
    10b6:	d00a      	beq.n	10ce <_gpio_set_pin_pull_mode+0x2e>
    10b8:	2b02      	cmp	r3, #2
    10ba:	d01f      	beq.n	10fc <_gpio_set_pin_pull_mode+0x5c>
    10bc:	2b00      	cmp	r3, #0
    10be:	d134      	bne.n	112a <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    10c0:	79ba      	ldrb	r2, [r7, #6]
    10c2:	79fb      	ldrb	r3, [r7, #7]
    10c4:	4619      	mov	r1, r3
    10c6:	481e      	ldr	r0, [pc, #120]	; (1140 <_gpio_set_pin_pull_mode+0xa0>)
    10c8:	4b1e      	ldr	r3, [pc, #120]	; (1144 <_gpio_set_pin_pull_mode+0xa4>)
    10ca:	4798      	blx	r3
		break;
    10cc:	e033      	b.n	1136 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    10ce:	79bb      	ldrb	r3, [r7, #6]
    10d0:	2201      	movs	r2, #1
    10d2:	409a      	lsls	r2, r3
    10d4:	79fb      	ldrb	r3, [r7, #7]
    10d6:	4619      	mov	r1, r3
    10d8:	4819      	ldr	r0, [pc, #100]	; (1140 <_gpio_set_pin_pull_mode+0xa0>)
    10da:	4b1b      	ldr	r3, [pc, #108]	; (1148 <_gpio_set_pin_pull_mode+0xa8>)
    10dc:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    10de:	79ba      	ldrb	r2, [r7, #6]
    10e0:	79fb      	ldrb	r3, [r7, #7]
    10e2:	4619      	mov	r1, r3
    10e4:	4816      	ldr	r0, [pc, #88]	; (1140 <_gpio_set_pin_pull_mode+0xa0>)
    10e6:	4b19      	ldr	r3, [pc, #100]	; (114c <_gpio_set_pin_pull_mode+0xac>)
    10e8:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    10ea:	79bb      	ldrb	r3, [r7, #6]
    10ec:	2201      	movs	r2, #1
    10ee:	409a      	lsls	r2, r3
    10f0:	79fb      	ldrb	r3, [r7, #7]
    10f2:	4619      	mov	r1, r3
    10f4:	4812      	ldr	r0, [pc, #72]	; (1140 <_gpio_set_pin_pull_mode+0xa0>)
    10f6:	4b16      	ldr	r3, [pc, #88]	; (1150 <_gpio_set_pin_pull_mode+0xb0>)
    10f8:	4798      	blx	r3
		break;
    10fa:	e01c      	b.n	1136 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    10fc:	79bb      	ldrb	r3, [r7, #6]
    10fe:	2201      	movs	r2, #1
    1100:	409a      	lsls	r2, r3
    1102:	79fb      	ldrb	r3, [r7, #7]
    1104:	4619      	mov	r1, r3
    1106:	480e      	ldr	r0, [pc, #56]	; (1140 <_gpio_set_pin_pull_mode+0xa0>)
    1108:	4b0f      	ldr	r3, [pc, #60]	; (1148 <_gpio_set_pin_pull_mode+0xa8>)
    110a:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    110c:	79ba      	ldrb	r2, [r7, #6]
    110e:	79fb      	ldrb	r3, [r7, #7]
    1110:	4619      	mov	r1, r3
    1112:	480b      	ldr	r0, [pc, #44]	; (1140 <_gpio_set_pin_pull_mode+0xa0>)
    1114:	4b0d      	ldr	r3, [pc, #52]	; (114c <_gpio_set_pin_pull_mode+0xac>)
    1116:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    1118:	79bb      	ldrb	r3, [r7, #6]
    111a:	2201      	movs	r2, #1
    111c:	409a      	lsls	r2, r3
    111e:	79fb      	ldrb	r3, [r7, #7]
    1120:	4619      	mov	r1, r3
    1122:	4807      	ldr	r0, [pc, #28]	; (1140 <_gpio_set_pin_pull_mode+0xa0>)
    1124:	4b0b      	ldr	r3, [pc, #44]	; (1154 <_gpio_set_pin_pull_mode+0xb4>)
    1126:	4798      	blx	r3
		break;
    1128:	e005      	b.n	1136 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    112a:	2289      	movs	r2, #137	; 0x89
    112c:	490a      	ldr	r1, [pc, #40]	; (1158 <_gpio_set_pin_pull_mode+0xb8>)
    112e:	2000      	movs	r0, #0
    1130:	4b0a      	ldr	r3, [pc, #40]	; (115c <_gpio_set_pin_pull_mode+0xbc>)
    1132:	4798      	blx	r3
		break;
    1134:	bf00      	nop
	}
}
    1136:	bf00      	nop
    1138:	3708      	adds	r7, #8
    113a:	46bd      	mov	sp, r7
    113c:	bd80      	pop	{r7, pc}
    113e:	bf00      	nop
    1140:	41008000 	.word	0x41008000
    1144:	00000f07 	.word	0x00000f07
    1148:	00000d33 	.word	0x00000d33
    114c:	00000ec3 	.word	0x00000ec3
    1150:	00000d5b 	.word	0x00000d5b
    1154:	00000d83 	.word	0x00000d83
    1158:	0000f290 	.word	0x0000f290
    115c:	0000389d 	.word	0x0000389d

00001160 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    1160:	b590      	push	{r4, r7, lr}
    1162:	b085      	sub	sp, #20
    1164:	af00      	add	r7, sp, #0
    1166:	6078      	str	r0, [r7, #4]
    1168:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    116a:	687b      	ldr	r3, [r7, #4]
    116c:	095b      	lsrs	r3, r3, #5
    116e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    1170:	687b      	ldr	r3, [r7, #4]
    1172:	b2db      	uxtb	r3, r3
    1174:	f003 031f 	and.w	r3, r3, #31
    1178:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    117a:	683b      	ldr	r3, [r7, #0]
    117c:	f1b3 3fff 	cmp.w	r3, #4294967295
    1180:	d106      	bne.n	1190 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    1182:	7bba      	ldrb	r2, [r7, #14]
    1184:	7bf9      	ldrb	r1, [r7, #15]
    1186:	2300      	movs	r3, #0
    1188:	4812      	ldr	r0, [pc, #72]	; (11d4 <_gpio_set_pin_function+0x74>)
    118a:	4c13      	ldr	r4, [pc, #76]	; (11d8 <_gpio_set_pin_function+0x78>)
    118c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    118e:	e01d      	b.n	11cc <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    1190:	7bba      	ldrb	r2, [r7, #14]
    1192:	7bf9      	ldrb	r1, [r7, #15]
    1194:	2301      	movs	r3, #1
    1196:	480f      	ldr	r0, [pc, #60]	; (11d4 <_gpio_set_pin_function+0x74>)
    1198:	4c0f      	ldr	r4, [pc, #60]	; (11d8 <_gpio_set_pin_function+0x78>)
    119a:	47a0      	blx	r4
		if (pin & 1) {
    119c:	7bbb      	ldrb	r3, [r7, #14]
    119e:	f003 0301 	and.w	r3, r3, #1
    11a2:	2b00      	cmp	r3, #0
    11a4:	d009      	beq.n	11ba <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    11a6:	7bbb      	ldrb	r3, [r7, #14]
    11a8:	085b      	lsrs	r3, r3, #1
    11aa:	b2da      	uxtb	r2, r3
    11ac:	683b      	ldr	r3, [r7, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	7bf9      	ldrb	r1, [r7, #15]
    11b2:	4808      	ldr	r0, [pc, #32]	; (11d4 <_gpio_set_pin_function+0x74>)
    11b4:	4c09      	ldr	r4, [pc, #36]	; (11dc <_gpio_set_pin_function+0x7c>)
    11b6:	47a0      	blx	r4
}
    11b8:	e008      	b.n	11cc <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    11ba:	7bbb      	ldrb	r3, [r7, #14]
    11bc:	085b      	lsrs	r3, r3, #1
    11be:	b2da      	uxtb	r2, r3
    11c0:	683b      	ldr	r3, [r7, #0]
    11c2:	b2db      	uxtb	r3, r3
    11c4:	7bf9      	ldrb	r1, [r7, #15]
    11c6:	4803      	ldr	r0, [pc, #12]	; (11d4 <_gpio_set_pin_function+0x74>)
    11c8:	4c05      	ldr	r4, [pc, #20]	; (11e0 <_gpio_set_pin_function+0x80>)
    11ca:	47a0      	blx	r4
}
    11cc:	bf00      	nop
    11ce:	3714      	adds	r7, #20
    11d0:	46bd      	mov	sp, r7
    11d2:	bd90      	pop	{r4, r7, pc}
    11d4:	41008000 	.word	0x41008000
    11d8:	00000e69 	.word	0x00000e69
    11dc:	00000e0b 	.word	0x00000e0b
    11e0:	00000dab 	.word	0x00000dab

000011e4 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    11e4:	b580      	push	{r7, lr}
    11e6:	b082      	sub	sp, #8
    11e8:	af00      	add	r7, sp, #0
    11ea:	4603      	mov	r3, r0
    11ec:	460a      	mov	r2, r1
    11ee:	71fb      	strb	r3, [r7, #7]
    11f0:	4613      	mov	r3, r2
    11f2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    11f4:	79fb      	ldrb	r3, [r7, #7]
    11f6:	095b      	lsrs	r3, r3, #5
    11f8:	b2d8      	uxtb	r0, r3
    11fa:	79fb      	ldrb	r3, [r7, #7]
    11fc:	f003 031f 	and.w	r3, r3, #31
    1200:	b2db      	uxtb	r3, r3
    1202:	79ba      	ldrb	r2, [r7, #6]
    1204:	4619      	mov	r1, r3
    1206:	4b03      	ldr	r3, [pc, #12]	; (1214 <gpio_set_pin_pull_mode+0x30>)
    1208:	4798      	blx	r3
}
    120a:	bf00      	nop
    120c:	3708      	adds	r7, #8
    120e:	46bd      	mov	sp, r7
    1210:	bd80      	pop	{r7, pc}
    1212:	bf00      	nop
    1214:	000010a1 	.word	0x000010a1

00001218 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    1218:	b580      	push	{r7, lr}
    121a:	b082      	sub	sp, #8
    121c:	af00      	add	r7, sp, #0
    121e:	6078      	str	r0, [r7, #4]
    1220:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1222:	6839      	ldr	r1, [r7, #0]
    1224:	6878      	ldr	r0, [r7, #4]
    1226:	4b03      	ldr	r3, [pc, #12]	; (1234 <gpio_set_pin_function+0x1c>)
    1228:	4798      	blx	r3
}
    122a:	bf00      	nop
    122c:	3708      	adds	r7, #8
    122e:	46bd      	mov	sp, r7
    1230:	bd80      	pop	{r7, pc}
    1232:	bf00      	nop
    1234:	00001161 	.word	0x00001161

00001238 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    1238:	b580      	push	{r7, lr}
    123a:	b082      	sub	sp, #8
    123c:	af00      	add	r7, sp, #0
    123e:	4603      	mov	r3, r0
    1240:	460a      	mov	r2, r1
    1242:	71fb      	strb	r3, [r7, #7]
    1244:	4613      	mov	r3, r2
    1246:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1248:	79fb      	ldrb	r3, [r7, #7]
    124a:	095b      	lsrs	r3, r3, #5
    124c:	b2d8      	uxtb	r0, r3
    124e:	79fb      	ldrb	r3, [r7, #7]
    1250:	f003 031f 	and.w	r3, r3, #31
    1254:	2201      	movs	r2, #1
    1256:	fa02 f303 	lsl.w	r3, r2, r3
    125a:	79ba      	ldrb	r2, [r7, #6]
    125c:	4619      	mov	r1, r3
    125e:	4b03      	ldr	r3, [pc, #12]	; (126c <gpio_set_pin_direction+0x34>)
    1260:	4798      	blx	r3
}
    1262:	bf00      	nop
    1264:	3708      	adds	r7, #8
    1266:	46bd      	mov	sp, r7
    1268:	bd80      	pop	{r7, pc}
    126a:	bf00      	nop
    126c:	00000f75 	.word	0x00000f75

00001270 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1270:	b580      	push	{r7, lr}
    1272:	b082      	sub	sp, #8
    1274:	af00      	add	r7, sp, #0
    1276:	4603      	mov	r3, r0
    1278:	460a      	mov	r2, r1
    127a:	71fb      	strb	r3, [r7, #7]
    127c:	4613      	mov	r3, r2
    127e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1280:	79fb      	ldrb	r3, [r7, #7]
    1282:	095b      	lsrs	r3, r3, #5
    1284:	b2d8      	uxtb	r0, r3
    1286:	79fb      	ldrb	r3, [r7, #7]
    1288:	f003 031f 	and.w	r3, r3, #31
    128c:	2201      	movs	r2, #1
    128e:	fa02 f303 	lsl.w	r3, r2, r3
    1292:	79ba      	ldrb	r2, [r7, #6]
    1294:	4619      	mov	r1, r3
    1296:	4b03      	ldr	r3, [pc, #12]	; (12a4 <gpio_set_pin_level+0x34>)
    1298:	4798      	blx	r3
}
    129a:	bf00      	nop
    129c:	3708      	adds	r7, #8
    129e:	46bd      	mov	sp, r7
    12a0:	bd80      	pop	{r7, pc}
    12a2:	bf00      	nop
    12a4:	0000105d 	.word	0x0000105d

000012a8 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    12a8:	b580      	push	{r7, lr}
    12aa:	af00      	add	r7, sp, #0
	_init_chip();
    12ac:	4b01      	ldr	r3, [pc, #4]	; (12b4 <init_mcu+0xc>)
    12ae:	4798      	blx	r3
}
    12b0:	bf00      	nop
    12b2:	bd80      	pop	{r7, pc}
    12b4:	000044ad 	.word	0x000044ad

000012b8 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    12b8:	b580      	push	{r7, lr}
    12ba:	b082      	sub	sp, #8
    12bc:	af00      	add	r7, sp, #0
    12be:	6078      	str	r0, [r7, #4]
    12c0:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    12c2:	687b      	ldr	r3, [r7, #4]
    12c4:	2b00      	cmp	r3, #0
    12c6:	d004      	beq.n	12d2 <wdt_init+0x1a>
    12c8:	683b      	ldr	r3, [r7, #0]
    12ca:	2b00      	cmp	r3, #0
    12cc:	d001      	beq.n	12d2 <wdt_init+0x1a>
    12ce:	2301      	movs	r3, #1
    12d0:	e000      	b.n	12d4 <wdt_init+0x1c>
    12d2:	2300      	movs	r3, #0
    12d4:	f003 0301 	and.w	r3, r3, #1
    12d8:	b2db      	uxtb	r3, r3
    12da:	2248      	movs	r2, #72	; 0x48
    12dc:	4907      	ldr	r1, [pc, #28]	; (12fc <wdt_init+0x44>)
    12de:	4618      	mov	r0, r3
    12e0:	4b07      	ldr	r3, [pc, #28]	; (1300 <wdt_init+0x48>)
    12e2:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    12e4:	687b      	ldr	r3, [r7, #4]
    12e6:	683a      	ldr	r2, [r7, #0]
    12e8:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    12ea:	687b      	ldr	r3, [r7, #4]
    12ec:	4618      	mov	r0, r3
    12ee:	4b05      	ldr	r3, [pc, #20]	; (1304 <wdt_init+0x4c>)
    12f0:	4798      	blx	r3
    12f2:	4603      	mov	r3, r0
}
    12f4:	4618      	mov	r0, r3
    12f6:	3708      	adds	r7, #8
    12f8:	46bd      	mov	sp, r7
    12fa:	bd80      	pop	{r7, pc}
    12fc:	0000f2ac 	.word	0x0000f2ac
    1300:	0000389d 	.word	0x0000389d
    1304:	0000b2f5 	.word	0x0000b2f5

00001308 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    1308:	b580      	push	{r7, lr}
    130a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    130c:	4804      	ldr	r0, [pc, #16]	; (1320 <CRC_CALC_init+0x18>)
    130e:	4b05      	ldr	r3, [pc, #20]	; (1324 <CRC_CALC_init+0x1c>)
    1310:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    1312:	4905      	ldr	r1, [pc, #20]	; (1328 <CRC_CALC_init+0x20>)
    1314:	4805      	ldr	r0, [pc, #20]	; (132c <CRC_CALC_init+0x24>)
    1316:	4b06      	ldr	r3, [pc, #24]	; (1330 <CRC_CALC_init+0x28>)
    1318:	4798      	blx	r3
}
    131a:	bf00      	nop
    131c:	bd80      	pop	{r7, pc}
    131e:	bf00      	nop
    1320:	40000800 	.word	0x40000800
    1324:	00000b4b 	.word	0x00000b4b
    1328:	41002000 	.word	0x41002000
    132c:	2000139c 	.word	0x2000139c
    1330:	0000207d 	.word	0x0000207d

00001334 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1334:	b580      	push	{r7, lr}
    1336:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1338:	2244      	movs	r2, #68	; 0x44
    133a:	2104      	movs	r1, #4
    133c:	4838      	ldr	r0, [pc, #224]	; (1420 <EXTERNAL_IRQ_0_init+0xec>)
    133e:	4b39      	ldr	r3, [pc, #228]	; (1424 <EXTERNAL_IRQ_0_init+0xf0>)
    1340:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    1342:	4839      	ldr	r0, [pc, #228]	; (1428 <EXTERNAL_IRQ_0_init+0xf4>)
    1344:	4b39      	ldr	r3, [pc, #228]	; (142c <EXTERNAL_IRQ_0_init+0xf8>)
    1346:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1348:	2101      	movs	r1, #1
    134a:	2040      	movs	r0, #64	; 0x40
    134c:	4b38      	ldr	r3, [pc, #224]	; (1430 <EXTERNAL_IRQ_0_init+0xfc>)
    134e:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1350:	2100      	movs	r1, #0
    1352:	2040      	movs	r0, #64	; 0x40
    1354:	4b37      	ldr	r3, [pc, #220]	; (1434 <EXTERNAL_IRQ_0_init+0x100>)
    1356:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    1358:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    135c:	2040      	movs	r0, #64	; 0x40
    135e:	4b36      	ldr	r3, [pc, #216]	; (1438 <EXTERNAL_IRQ_0_init+0x104>)
    1360:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    1362:	2101      	movs	r1, #1
    1364:	2003      	movs	r0, #3
    1366:	4b32      	ldr	r3, [pc, #200]	; (1430 <EXTERNAL_IRQ_0_init+0xfc>)
    1368:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    136a:	2102      	movs	r1, #2
    136c:	2003      	movs	r0, #3
    136e:	4b31      	ldr	r3, [pc, #196]	; (1434 <EXTERNAL_IRQ_0_init+0x100>)
    1370:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    1372:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    1376:	2003      	movs	r0, #3
    1378:	4b2f      	ldr	r3, [pc, #188]	; (1438 <EXTERNAL_IRQ_0_init+0x104>)
    137a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    137c:	2101      	movs	r1, #1
    137e:	2004      	movs	r0, #4
    1380:	4b2b      	ldr	r3, [pc, #172]	; (1430 <EXTERNAL_IRQ_0_init+0xfc>)
    1382:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    1384:	2102      	movs	r1, #2
    1386:	2004      	movs	r0, #4
    1388:	4b2a      	ldr	r3, [pc, #168]	; (1434 <EXTERNAL_IRQ_0_init+0x100>)
    138a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    138c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1390:	2004      	movs	r0, #4
    1392:	4b29      	ldr	r3, [pc, #164]	; (1438 <EXTERNAL_IRQ_0_init+0x104>)
    1394:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    1396:	2101      	movs	r1, #1
    1398:	2005      	movs	r0, #5
    139a:	4b25      	ldr	r3, [pc, #148]	; (1430 <EXTERNAL_IRQ_0_init+0xfc>)
    139c:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    139e:	2102      	movs	r1, #2
    13a0:	2005      	movs	r0, #5
    13a2:	4b24      	ldr	r3, [pc, #144]	; (1434 <EXTERNAL_IRQ_0_init+0x100>)
    13a4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    13a6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    13aa:	2005      	movs	r0, #5
    13ac:	4b22      	ldr	r3, [pc, #136]	; (1438 <EXTERNAL_IRQ_0_init+0x104>)
    13ae:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    13b0:	2101      	movs	r1, #1
    13b2:	2056      	movs	r0, #86	; 0x56
    13b4:	4b1e      	ldr	r3, [pc, #120]	; (1430 <EXTERNAL_IRQ_0_init+0xfc>)
    13b6:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    13b8:	2102      	movs	r1, #2
    13ba:	2056      	movs	r0, #86	; 0x56
    13bc:	4b1d      	ldr	r3, [pc, #116]	; (1434 <EXTERNAL_IRQ_0_init+0x100>)
    13be:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    13c0:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    13c4:	2056      	movs	r0, #86	; 0x56
    13c6:	4b1c      	ldr	r3, [pc, #112]	; (1438 <EXTERNAL_IRQ_0_init+0x104>)
    13c8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    13ca:	2101      	movs	r1, #1
    13cc:	2057      	movs	r0, #87	; 0x57
    13ce:	4b18      	ldr	r3, [pc, #96]	; (1430 <EXTERNAL_IRQ_0_init+0xfc>)
    13d0:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    13d2:	2102      	movs	r1, #2
    13d4:	2057      	movs	r0, #87	; 0x57
    13d6:	4b17      	ldr	r3, [pc, #92]	; (1434 <EXTERNAL_IRQ_0_init+0x100>)
    13d8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    13da:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    13de:	2057      	movs	r0, #87	; 0x57
    13e0:	4b15      	ldr	r3, [pc, #84]	; (1438 <EXTERNAL_IRQ_0_init+0x104>)
    13e2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    13e4:	2101      	movs	r1, #1
    13e6:	2028      	movs	r0, #40	; 0x28
    13e8:	4b11      	ldr	r3, [pc, #68]	; (1430 <EXTERNAL_IRQ_0_init+0xfc>)
    13ea:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    13ec:	2100      	movs	r1, #0
    13ee:	2028      	movs	r0, #40	; 0x28
    13f0:	4b10      	ldr	r3, [pc, #64]	; (1434 <EXTERNAL_IRQ_0_init+0x100>)
    13f2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    13f4:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    13f8:	2028      	movs	r0, #40	; 0x28
    13fa:	4b0f      	ldr	r3, [pc, #60]	; (1438 <EXTERNAL_IRQ_0_init+0x104>)
    13fc:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    13fe:	2101      	movs	r1, #1
    1400:	2029      	movs	r0, #41	; 0x29
    1402:	4b0b      	ldr	r3, [pc, #44]	; (1430 <EXTERNAL_IRQ_0_init+0xfc>)
    1404:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    1406:	2100      	movs	r1, #0
    1408:	2029      	movs	r0, #41	; 0x29
    140a:	4b0a      	ldr	r3, [pc, #40]	; (1434 <EXTERNAL_IRQ_0_init+0x100>)
    140c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    140e:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1412:	2029      	movs	r0, #41	; 0x29
    1414:	4b08      	ldr	r3, [pc, #32]	; (1438 <EXTERNAL_IRQ_0_init+0x104>)
    1416:	4798      	blx	r3

	ext_irq_init();
    1418:	4b08      	ldr	r3, [pc, #32]	; (143c <EXTERNAL_IRQ_0_init+0x108>)
    141a:	4798      	blx	r3
}
    141c:	bf00      	nop
    141e:	bd80      	pop	{r7, pc}
    1420:	40001c00 	.word	0x40001c00
    1424:	000009e5 	.word	0x000009e5
    1428:	40000800 	.word	0x40000800
    142c:	00000acb 	.word	0x00000acb
    1430:	00001239 	.word	0x00001239
    1434:	000011e5 	.word	0x000011e5
    1438:	00001219 	.word	0x00001219
    143c:	00002145 	.word	0x00002145

00001440 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1440:	b580      	push	{r7, lr}
    1442:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1444:	2244      	movs	r2, #68	; 0x44
    1446:	210b      	movs	r1, #11
    1448:	4807      	ldr	r0, [pc, #28]	; (1468 <EVENT_SYSTEM_0_init+0x28>)
    144a:	4b08      	ldr	r3, [pc, #32]	; (146c <EVENT_SYSTEM_0_init+0x2c>)
    144c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    144e:	2244      	movs	r2, #68	; 0x44
    1450:	210c      	movs	r1, #12
    1452:	4805      	ldr	r0, [pc, #20]	; (1468 <EVENT_SYSTEM_0_init+0x28>)
    1454:	4b05      	ldr	r3, [pc, #20]	; (146c <EVENT_SYSTEM_0_init+0x2c>)
    1456:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1458:	4805      	ldr	r0, [pc, #20]	; (1470 <EVENT_SYSTEM_0_init+0x30>)
    145a:	4b06      	ldr	r3, [pc, #24]	; (1474 <EVENT_SYSTEM_0_init+0x34>)
    145c:	4798      	blx	r3

	event_system_init();
    145e:	4b06      	ldr	r3, [pc, #24]	; (1478 <EVENT_SYSTEM_0_init+0x38>)
    1460:	4798      	blx	r3
}
    1462:	bf00      	nop
    1464:	bd80      	pop	{r7, pc}
    1466:	bf00      	nop
    1468:	40001c00 	.word	0x40001c00
    146c:	000009e5 	.word	0x000009e5
    1470:	40000800 	.word	0x40000800
    1474:	00000b6b 	.word	0x00000b6b
    1478:	00002131 	.word	0x00002131

0000147c <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    147c:	b580      	push	{r7, lr}
    147e:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    1480:	2101      	movs	r1, #1
    1482:	202b      	movs	r0, #43	; 0x2b
    1484:	4b2b      	ldr	r3, [pc, #172]	; (1534 <QSPI_N25Q256_PORT_init+0xb8>)
    1486:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    1488:	2100      	movs	r1, #0
    148a:	202b      	movs	r0, #43	; 0x2b
    148c:	4b2a      	ldr	r3, [pc, #168]	; (1538 <QSPI_N25Q256_PORT_init+0xbc>)
    148e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    1490:	492a      	ldr	r1, [pc, #168]	; (153c <QSPI_N25Q256_PORT_init+0xc0>)
    1492:	202b      	movs	r0, #43	; 0x2b
    1494:	4b2a      	ldr	r3, [pc, #168]	; (1540 <QSPI_N25Q256_PORT_init+0xc4>)
    1496:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1498:	2102      	movs	r1, #2
    149a:	2008      	movs	r0, #8
    149c:	4b25      	ldr	r3, [pc, #148]	; (1534 <QSPI_N25Q256_PORT_init+0xb8>)
    149e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    14a0:	2100      	movs	r1, #0
    14a2:	2008      	movs	r0, #8
    14a4:	4b27      	ldr	r3, [pc, #156]	; (1544 <QSPI_N25Q256_PORT_init+0xc8>)
    14a6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    14a8:	2100      	movs	r1, #0
    14aa:	2008      	movs	r0, #8
    14ac:	4b22      	ldr	r3, [pc, #136]	; (1538 <QSPI_N25Q256_PORT_init+0xbc>)
    14ae:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    14b0:	4925      	ldr	r1, [pc, #148]	; (1548 <QSPI_N25Q256_PORT_init+0xcc>)
    14b2:	2008      	movs	r0, #8
    14b4:	4b22      	ldr	r3, [pc, #136]	; (1540 <QSPI_N25Q256_PORT_init+0xc4>)
    14b6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    14b8:	2102      	movs	r1, #2
    14ba:	2009      	movs	r0, #9
    14bc:	4b1d      	ldr	r3, [pc, #116]	; (1534 <QSPI_N25Q256_PORT_init+0xb8>)
    14be:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    14c0:	2100      	movs	r1, #0
    14c2:	2009      	movs	r0, #9
    14c4:	4b1f      	ldr	r3, [pc, #124]	; (1544 <QSPI_N25Q256_PORT_init+0xc8>)
    14c6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    14c8:	2100      	movs	r1, #0
    14ca:	2009      	movs	r0, #9
    14cc:	4b1a      	ldr	r3, [pc, #104]	; (1538 <QSPI_N25Q256_PORT_init+0xbc>)
    14ce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    14d0:	491e      	ldr	r1, [pc, #120]	; (154c <QSPI_N25Q256_PORT_init+0xd0>)
    14d2:	2009      	movs	r0, #9
    14d4:	4b1a      	ldr	r3, [pc, #104]	; (1540 <QSPI_N25Q256_PORT_init+0xc4>)
    14d6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    14d8:	2102      	movs	r1, #2
    14da:	200a      	movs	r0, #10
    14dc:	4b15      	ldr	r3, [pc, #84]	; (1534 <QSPI_N25Q256_PORT_init+0xb8>)
    14de:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    14e0:	2100      	movs	r1, #0
    14e2:	200a      	movs	r0, #10
    14e4:	4b17      	ldr	r3, [pc, #92]	; (1544 <QSPI_N25Q256_PORT_init+0xc8>)
    14e6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    14e8:	2100      	movs	r1, #0
    14ea:	200a      	movs	r0, #10
    14ec:	4b12      	ldr	r3, [pc, #72]	; (1538 <QSPI_N25Q256_PORT_init+0xbc>)
    14ee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    14f0:	4917      	ldr	r1, [pc, #92]	; (1550 <QSPI_N25Q256_PORT_init+0xd4>)
    14f2:	200a      	movs	r0, #10
    14f4:	4b12      	ldr	r3, [pc, #72]	; (1540 <QSPI_N25Q256_PORT_init+0xc4>)
    14f6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    14f8:	2102      	movs	r1, #2
    14fa:	200b      	movs	r0, #11
    14fc:	4b0d      	ldr	r3, [pc, #52]	; (1534 <QSPI_N25Q256_PORT_init+0xb8>)
    14fe:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1500:	2100      	movs	r1, #0
    1502:	200b      	movs	r0, #11
    1504:	4b0f      	ldr	r3, [pc, #60]	; (1544 <QSPI_N25Q256_PORT_init+0xc8>)
    1506:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1508:	2100      	movs	r1, #0
    150a:	200b      	movs	r0, #11
    150c:	4b0a      	ldr	r3, [pc, #40]	; (1538 <QSPI_N25Q256_PORT_init+0xbc>)
    150e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1510:	4910      	ldr	r1, [pc, #64]	; (1554 <QSPI_N25Q256_PORT_init+0xd8>)
    1512:	200b      	movs	r0, #11
    1514:	4b0a      	ldr	r3, [pc, #40]	; (1540 <QSPI_N25Q256_PORT_init+0xc4>)
    1516:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1518:	2101      	movs	r1, #1
    151a:	202a      	movs	r0, #42	; 0x2a
    151c:	4b05      	ldr	r3, [pc, #20]	; (1534 <QSPI_N25Q256_PORT_init+0xb8>)
    151e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1520:	2100      	movs	r1, #0
    1522:	202a      	movs	r0, #42	; 0x2a
    1524:	4b04      	ldr	r3, [pc, #16]	; (1538 <QSPI_N25Q256_PORT_init+0xbc>)
    1526:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1528:	490b      	ldr	r1, [pc, #44]	; (1558 <QSPI_N25Q256_PORT_init+0xdc>)
    152a:	202a      	movs	r0, #42	; 0x2a
    152c:	4b04      	ldr	r3, [pc, #16]	; (1540 <QSPI_N25Q256_PORT_init+0xc4>)
    152e:	4798      	blx	r3
}
    1530:	bf00      	nop
    1532:	bd80      	pop	{r7, pc}
    1534:	00001239 	.word	0x00001239
    1538:	000011e5 	.word	0x000011e5
    153c:	002b0007 	.word	0x002b0007
    1540:	00001219 	.word	0x00001219
    1544:	00001271 	.word	0x00001271
    1548:	00080007 	.word	0x00080007
    154c:	00090007 	.word	0x00090007
    1550:	000a0007 	.word	0x000a0007
    1554:	000b0007 	.word	0x000b0007
    1558:	002a0007 	.word	0x002a0007

0000155c <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    155c:	b580      	push	{r7, lr}
    155e:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1560:	4805      	ldr	r0, [pc, #20]	; (1578 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1562:	4b06      	ldr	r3, [pc, #24]	; (157c <QSPI_N25Q256_CLOCK_init+0x20>)
    1564:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    1566:	4804      	ldr	r0, [pc, #16]	; (1578 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1568:	4b05      	ldr	r3, [pc, #20]	; (1580 <QSPI_N25Q256_CLOCK_init+0x24>)
    156a:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    156c:	4802      	ldr	r0, [pc, #8]	; (1578 <QSPI_N25Q256_CLOCK_init+0x1c>)
    156e:	4b05      	ldr	r3, [pc, #20]	; (1584 <QSPI_N25Q256_CLOCK_init+0x28>)
    1570:	4798      	blx	r3
}
    1572:	bf00      	nop
    1574:	bd80      	pop	{r7, pc}
    1576:	bf00      	nop
    1578:	40000800 	.word	0x40000800
    157c:	00000a2b 	.word	0x00000a2b
    1580:	00000a6b 	.word	0x00000a6b
    1584:	00000c2b 	.word	0x00000c2b

00001588 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    1588:	b580      	push	{r7, lr}
    158a:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    158c:	4b04      	ldr	r3, [pc, #16]	; (15a0 <QSPI_N25Q256_init+0x18>)
    158e:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1590:	4904      	ldr	r1, [pc, #16]	; (15a4 <QSPI_N25Q256_init+0x1c>)
    1592:	4805      	ldr	r0, [pc, #20]	; (15a8 <QSPI_N25Q256_init+0x20>)
    1594:	4b05      	ldr	r3, [pc, #20]	; (15ac <QSPI_N25Q256_init+0x24>)
    1596:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1598:	4b05      	ldr	r3, [pc, #20]	; (15b0 <QSPI_N25Q256_init+0x28>)
    159a:	4798      	blx	r3
}
    159c:	bf00      	nop
    159e:	bd80      	pop	{r7, pc}
    15a0:	0000155d 	.word	0x0000155d
    15a4:	42003400 	.word	0x42003400
    15a8:	20001210 	.word	0x20001210
    15ac:	000027b9 	.word	0x000027b9
    15b0:	0000147d 	.word	0x0000147d

000015b4 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    15b4:	b580      	push	{r7, lr}
    15b6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    15b8:	4802      	ldr	r0, [pc, #8]	; (15c4 <DATETIME_CLOCK_CLOCK_init+0x10>)
    15ba:	4b03      	ldr	r3, [pc, #12]	; (15c8 <DATETIME_CLOCK_CLOCK_init+0x14>)
    15bc:	4798      	blx	r3
}
    15be:	bf00      	nop
    15c0:	bd80      	pop	{r7, pc}
    15c2:	bf00      	nop
    15c4:	40000800 	.word	0x40000800
    15c8:	00000aab 	.word	0x00000aab

000015cc <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    15cc:	b580      	push	{r7, lr}
    15ce:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    15d0:	4b03      	ldr	r3, [pc, #12]	; (15e0 <DATETIME_CLOCK_init+0x14>)
    15d2:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    15d4:	4903      	ldr	r1, [pc, #12]	; (15e4 <DATETIME_CLOCK_init+0x18>)
    15d6:	4804      	ldr	r0, [pc, #16]	; (15e8 <DATETIME_CLOCK_init+0x1c>)
    15d8:	4b04      	ldr	r3, [pc, #16]	; (15ec <DATETIME_CLOCK_init+0x20>)
    15da:	4798      	blx	r3
}
    15dc:	bf00      	nop
    15de:	bd80      	pop	{r7, pc}
    15e0:	000015b5 	.word	0x000015b5
    15e4:	40002400 	.word	0x40002400
    15e8:	20001378 	.word	0x20001378
    15ec:	00001f21 	.word	0x00001f21

000015f0 <I2C_SHARED_PORT_init>:

void I2C_SHARED_PORT_init(void)
{
    15f0:	b580      	push	{r7, lr}
    15f2:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    15f4:	2100      	movs	r1, #0
    15f6:	2010      	movs	r0, #16
    15f8:	4b07      	ldr	r3, [pc, #28]	; (1618 <I2C_SHARED_PORT_init+0x28>)
    15fa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    15fc:	4907      	ldr	r1, [pc, #28]	; (161c <I2C_SHARED_PORT_init+0x2c>)
    15fe:	2010      	movs	r0, #16
    1600:	4b07      	ldr	r3, [pc, #28]	; (1620 <I2C_SHARED_PORT_init+0x30>)
    1602:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    1604:	2100      	movs	r1, #0
    1606:	2011      	movs	r0, #17
    1608:	4b03      	ldr	r3, [pc, #12]	; (1618 <I2C_SHARED_PORT_init+0x28>)
    160a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    160c:	4905      	ldr	r1, [pc, #20]	; (1624 <I2C_SHARED_PORT_init+0x34>)
    160e:	2011      	movs	r0, #17
    1610:	4b03      	ldr	r3, [pc, #12]	; (1620 <I2C_SHARED_PORT_init+0x30>)
    1612:	4798      	blx	r3
}
    1614:	bf00      	nop
    1616:	bd80      	pop	{r7, pc}
    1618:	000011e5 	.word	0x000011e5
    161c:	00100002 	.word	0x00100002
    1620:	00001219 	.word	0x00001219
    1624:	00110002 	.word	0x00110002

00001628 <I2C_SHARED_CLOCK_init>:

void I2C_SHARED_CLOCK_init(void)
{
    1628:	b580      	push	{r7, lr}
    162a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    162c:	2245      	movs	r2, #69	; 0x45
    162e:	2108      	movs	r1, #8
    1630:	4806      	ldr	r0, [pc, #24]	; (164c <I2C_SHARED_CLOCK_init+0x24>)
    1632:	4b07      	ldr	r3, [pc, #28]	; (1650 <I2C_SHARED_CLOCK_init+0x28>)
    1634:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1636:	224a      	movs	r2, #74	; 0x4a
    1638:	2103      	movs	r1, #3
    163a:	4804      	ldr	r0, [pc, #16]	; (164c <I2C_SHARED_CLOCK_init+0x24>)
    163c:	4b04      	ldr	r3, [pc, #16]	; (1650 <I2C_SHARED_CLOCK_init+0x28>)
    163e:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1640:	4804      	ldr	r0, [pc, #16]	; (1654 <I2C_SHARED_CLOCK_init+0x2c>)
    1642:	4b05      	ldr	r3, [pc, #20]	; (1658 <I2C_SHARED_CLOCK_init+0x30>)
    1644:	4798      	blx	r3
}
    1646:	bf00      	nop
    1648:	bd80      	pop	{r7, pc}
    164a:	bf00      	nop
    164c:	40001c00 	.word	0x40001c00
    1650:	000009e5 	.word	0x000009e5
    1654:	40000800 	.word	0x40000800
    1658:	00000aeb 	.word	0x00000aeb

0000165c <I2C_SHARED_init>:

void I2C_SHARED_init(void)
{
    165c:	b580      	push	{r7, lr}
    165e:	af00      	add	r7, sp, #0
	I2C_SHARED_CLOCK_init();
    1660:	4b04      	ldr	r3, [pc, #16]	; (1674 <I2C_SHARED_init+0x18>)
    1662:	4798      	blx	r3
	i2c_m_sync_init(&I2C_SHARED, SERCOM1);
    1664:	4904      	ldr	r1, [pc, #16]	; (1678 <I2C_SHARED_init+0x1c>)
    1666:	4805      	ldr	r0, [pc, #20]	; (167c <I2C_SHARED_init+0x20>)
    1668:	4b05      	ldr	r3, [pc, #20]	; (1680 <I2C_SHARED_init+0x24>)
    166a:	4798      	blx	r3
	I2C_SHARED_PORT_init();
    166c:	4b05      	ldr	r3, [pc, #20]	; (1684 <I2C_SHARED_init+0x28>)
    166e:	4798      	blx	r3
}
    1670:	bf00      	nop
    1672:	bd80      	pop	{r7, pc}
    1674:	00001629 	.word	0x00001629
    1678:	40003400 	.word	0x40003400
    167c:	200012f8 	.word	0x200012f8
    1680:	000025dd 	.word	0x000025dd
    1684:	000015f1 	.word	0x000015f1

00001688 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1688:	b580      	push	{r7, lr}
    168a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    168c:	2100      	movs	r1, #0
    168e:	203b      	movs	r0, #59	; 0x3b
    1690:	4b11      	ldr	r3, [pc, #68]	; (16d8 <SPI_TEMP_PORT_init+0x50>)
    1692:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    1694:	2102      	movs	r1, #2
    1696:	203b      	movs	r0, #59	; 0x3b
    1698:	4b10      	ldr	r3, [pc, #64]	; (16dc <SPI_TEMP_PORT_init+0x54>)
    169a:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    169c:	4910      	ldr	r1, [pc, #64]	; (16e0 <SPI_TEMP_PORT_init+0x58>)
    169e:	203b      	movs	r0, #59	; 0x3b
    16a0:	4b10      	ldr	r3, [pc, #64]	; (16e4 <SPI_TEMP_PORT_init+0x5c>)
    16a2:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    16a4:	2100      	movs	r1, #0
    16a6:	203a      	movs	r0, #58	; 0x3a
    16a8:	4b0b      	ldr	r3, [pc, #44]	; (16d8 <SPI_TEMP_PORT_init+0x50>)
    16aa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    16ac:	2102      	movs	r1, #2
    16ae:	203a      	movs	r0, #58	; 0x3a
    16b0:	4b0a      	ldr	r3, [pc, #40]	; (16dc <SPI_TEMP_PORT_init+0x54>)
    16b2:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    16b4:	490c      	ldr	r1, [pc, #48]	; (16e8 <SPI_TEMP_PORT_init+0x60>)
    16b6:	203a      	movs	r0, #58	; 0x3a
    16b8:	4b0a      	ldr	r3, [pc, #40]	; (16e4 <SPI_TEMP_PORT_init+0x5c>)
    16ba:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    16bc:	2101      	movs	r1, #1
    16be:	203c      	movs	r0, #60	; 0x3c
    16c0:	4b06      	ldr	r3, [pc, #24]	; (16dc <SPI_TEMP_PORT_init+0x54>)
    16c2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    16c4:	2100      	movs	r1, #0
    16c6:	203c      	movs	r0, #60	; 0x3c
    16c8:	4b08      	ldr	r3, [pc, #32]	; (16ec <SPI_TEMP_PORT_init+0x64>)
    16ca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    16cc:	4908      	ldr	r1, [pc, #32]	; (16f0 <SPI_TEMP_PORT_init+0x68>)
    16ce:	203c      	movs	r0, #60	; 0x3c
    16d0:	4b04      	ldr	r3, [pc, #16]	; (16e4 <SPI_TEMP_PORT_init+0x5c>)
    16d2:	4798      	blx	r3
}
    16d4:	bf00      	nop
    16d6:	bd80      	pop	{r7, pc}
    16d8:	00001271 	.word	0x00001271
    16dc:	00001239 	.word	0x00001239
    16e0:	003b0003 	.word	0x003b0003
    16e4:	00001219 	.word	0x00001219
    16e8:	003a0003 	.word	0x003a0003
    16ec:	000011e5 	.word	0x000011e5
    16f0:	003c0003 	.word	0x003c0003

000016f4 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    16f4:	b580      	push	{r7, lr}
    16f6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    16f8:	2245      	movs	r2, #69	; 0x45
    16fa:	2122      	movs	r1, #34	; 0x22
    16fc:	4806      	ldr	r0, [pc, #24]	; (1718 <SPI_TEMP_CLOCK_init+0x24>)
    16fe:	4b07      	ldr	r3, [pc, #28]	; (171c <SPI_TEMP_CLOCK_init+0x28>)
    1700:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1702:	224a      	movs	r2, #74	; 0x4a
    1704:	2103      	movs	r1, #3
    1706:	4804      	ldr	r0, [pc, #16]	; (1718 <SPI_TEMP_CLOCK_init+0x24>)
    1708:	4b04      	ldr	r3, [pc, #16]	; (171c <SPI_TEMP_CLOCK_init+0x28>)
    170a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    170c:	4804      	ldr	r0, [pc, #16]	; (1720 <SPI_TEMP_CLOCK_init+0x2c>)
    170e:	4b05      	ldr	r3, [pc, #20]	; (1724 <SPI_TEMP_CLOCK_init+0x30>)
    1710:	4798      	blx	r3
}
    1712:	bf00      	nop
    1714:	bd80      	pop	{r7, pc}
    1716:	bf00      	nop
    1718:	40001c00 	.word	0x40001c00
    171c:	000009e5 	.word	0x000009e5
    1720:	40000800 	.word	0x40000800
    1724:	00000c4b 	.word	0x00000c4b

00001728 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1728:	b580      	push	{r7, lr}
    172a:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    172c:	4b05      	ldr	r3, [pc, #20]	; (1744 <SPI_TEMP_init+0x1c>)
    172e:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    1730:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1734:	4804      	ldr	r0, [pc, #16]	; (1748 <SPI_TEMP_init+0x20>)
    1736:	4b05      	ldr	r3, [pc, #20]	; (174c <SPI_TEMP_init+0x24>)
    1738:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    173a:	4b05      	ldr	r3, [pc, #20]	; (1750 <SPI_TEMP_init+0x28>)
    173c:	4798      	blx	r3
}
    173e:	bf00      	nop
    1740:	bd80      	pop	{r7, pc}
    1742:	bf00      	nop
    1744:	000016f5 	.word	0x000016f5
    1748:	200011d8 	.word	0x200011d8
    174c:	000028c9 	.word	0x000028c9
    1750:	00001689 	.word	0x00001689

00001754 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    1754:	b580      	push	{r7, lr}
    1756:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1758:	2100      	movs	r1, #0
    175a:	2017      	movs	r0, #23
    175c:	4b07      	ldr	r3, [pc, #28]	; (177c <I2C_EXPANDER_PORT_init+0x28>)
    175e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    1760:	4907      	ldr	r1, [pc, #28]	; (1780 <I2C_EXPANDER_PORT_init+0x2c>)
    1762:	2017      	movs	r0, #23
    1764:	4b07      	ldr	r3, [pc, #28]	; (1784 <I2C_EXPANDER_PORT_init+0x30>)
    1766:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1768:	2100      	movs	r1, #0
    176a:	2016      	movs	r0, #22
    176c:	4b03      	ldr	r3, [pc, #12]	; (177c <I2C_EXPANDER_PORT_init+0x28>)
    176e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    1770:	4905      	ldr	r1, [pc, #20]	; (1788 <I2C_EXPANDER_PORT_init+0x34>)
    1772:	2016      	movs	r0, #22
    1774:	4b03      	ldr	r3, [pc, #12]	; (1784 <I2C_EXPANDER_PORT_init+0x30>)
    1776:	4798      	blx	r3
}
    1778:	bf00      	nop
    177a:	bd80      	pop	{r7, pc}
    177c:	000011e5 	.word	0x000011e5
    1780:	00170003 	.word	0x00170003
    1784:	00001219 	.word	0x00001219
    1788:	00160003 	.word	0x00160003

0000178c <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    178c:	b580      	push	{r7, lr}
    178e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1790:	2244      	movs	r2, #68	; 0x44
    1792:	2123      	movs	r1, #35	; 0x23
    1794:	4806      	ldr	r0, [pc, #24]	; (17b0 <I2C_EXPANDER_CLOCK_init+0x24>)
    1796:	4b07      	ldr	r3, [pc, #28]	; (17b4 <I2C_EXPANDER_CLOCK_init+0x28>)
    1798:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    179a:	224a      	movs	r2, #74	; 0x4a
    179c:	2103      	movs	r1, #3
    179e:	4804      	ldr	r0, [pc, #16]	; (17b0 <I2C_EXPANDER_CLOCK_init+0x24>)
    17a0:	4b04      	ldr	r3, [pc, #16]	; (17b4 <I2C_EXPANDER_CLOCK_init+0x28>)
    17a2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    17a4:	4804      	ldr	r0, [pc, #16]	; (17b8 <I2C_EXPANDER_CLOCK_init+0x2c>)
    17a6:	4b05      	ldr	r3, [pc, #20]	; (17bc <I2C_EXPANDER_CLOCK_init+0x30>)
    17a8:	4798      	blx	r3
}
    17aa:	bf00      	nop
    17ac:	bd80      	pop	{r7, pc}
    17ae:	bf00      	nop
    17b0:	40001c00 	.word	0x40001c00
    17b4:	000009e5 	.word	0x000009e5
    17b8:	40000800 	.word	0x40000800
    17bc:	00000c6b 	.word	0x00000c6b

000017c0 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    17c0:	b580      	push	{r7, lr}
    17c2:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    17c4:	4b04      	ldr	r3, [pc, #16]	; (17d8 <I2C_EXPANDER_init+0x18>)
    17c6:	4798      	blx	r3
	i2c_m_sync_init(&I2C_EXPANDER, SERCOM5);
    17c8:	4904      	ldr	r1, [pc, #16]	; (17dc <I2C_EXPANDER_init+0x1c>)
    17ca:	4805      	ldr	r0, [pc, #20]	; (17e0 <I2C_EXPANDER_init+0x20>)
    17cc:	4b05      	ldr	r3, [pc, #20]	; (17e4 <I2C_EXPANDER_init+0x24>)
    17ce:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    17d0:	4b05      	ldr	r3, [pc, #20]	; (17e8 <I2C_EXPANDER_init+0x28>)
    17d2:	4798      	blx	r3
}
    17d4:	bf00      	nop
    17d6:	bd80      	pop	{r7, pc}
    17d8:	0000178d 	.word	0x0000178d
    17dc:	43000400 	.word	0x43000400
    17e0:	200012d8 	.word	0x200012d8
    17e4:	000025dd 	.word	0x000025dd
    17e8:	00001755 	.word	0x00001755

000017ec <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    17ec:	b580      	push	{r7, lr}
    17ee:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    17f0:	2100      	movs	r1, #0
    17f2:	2044      	movs	r0, #68	; 0x44
    17f4:	4b11      	ldr	r3, [pc, #68]	; (183c <SPI_HI3593_PORT_init+0x50>)
    17f6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    17f8:	2102      	movs	r1, #2
    17fa:	2044      	movs	r0, #68	; 0x44
    17fc:	4b10      	ldr	r3, [pc, #64]	; (1840 <SPI_HI3593_PORT_init+0x54>)
    17fe:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1800:	4910      	ldr	r1, [pc, #64]	; (1844 <SPI_HI3593_PORT_init+0x58>)
    1802:	2044      	movs	r0, #68	; 0x44
    1804:	4b10      	ldr	r3, [pc, #64]	; (1848 <SPI_HI3593_PORT_init+0x5c>)
    1806:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1808:	2100      	movs	r1, #0
    180a:	2045      	movs	r0, #69	; 0x45
    180c:	4b0b      	ldr	r3, [pc, #44]	; (183c <SPI_HI3593_PORT_init+0x50>)
    180e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1810:	2102      	movs	r1, #2
    1812:	2045      	movs	r0, #69	; 0x45
    1814:	4b0a      	ldr	r3, [pc, #40]	; (1840 <SPI_HI3593_PORT_init+0x54>)
    1816:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1818:	490c      	ldr	r1, [pc, #48]	; (184c <SPI_HI3593_PORT_init+0x60>)
    181a:	2045      	movs	r0, #69	; 0x45
    181c:	4b0a      	ldr	r3, [pc, #40]	; (1848 <SPI_HI3593_PORT_init+0x5c>)
    181e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1820:	2101      	movs	r1, #1
    1822:	2047      	movs	r0, #71	; 0x47
    1824:	4b06      	ldr	r3, [pc, #24]	; (1840 <SPI_HI3593_PORT_init+0x54>)
    1826:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1828:	2100      	movs	r1, #0
    182a:	2047      	movs	r0, #71	; 0x47
    182c:	4b08      	ldr	r3, [pc, #32]	; (1850 <SPI_HI3593_PORT_init+0x64>)
    182e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    1830:	4908      	ldr	r1, [pc, #32]	; (1854 <SPI_HI3593_PORT_init+0x68>)
    1832:	2047      	movs	r0, #71	; 0x47
    1834:	4b04      	ldr	r3, [pc, #16]	; (1848 <SPI_HI3593_PORT_init+0x5c>)
    1836:	4798      	blx	r3
}
    1838:	bf00      	nop
    183a:	bd80      	pop	{r7, pc}
    183c:	00001271 	.word	0x00001271
    1840:	00001239 	.word	0x00001239
    1844:	00440002 	.word	0x00440002
    1848:	00001219 	.word	0x00001219
    184c:	00450002 	.word	0x00450002
    1850:	000011e5 	.word	0x000011e5
    1854:	00470002 	.word	0x00470002

00001858 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1858:	b580      	push	{r7, lr}
    185a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    185c:	2242      	movs	r2, #66	; 0x42
    185e:	2124      	movs	r1, #36	; 0x24
    1860:	4806      	ldr	r0, [pc, #24]	; (187c <SPI_HI3593_CLOCK_init+0x24>)
    1862:	4b07      	ldr	r3, [pc, #28]	; (1880 <SPI_HI3593_CLOCK_init+0x28>)
    1864:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1866:	224a      	movs	r2, #74	; 0x4a
    1868:	2103      	movs	r1, #3
    186a:	4804      	ldr	r0, [pc, #16]	; (187c <SPI_HI3593_CLOCK_init+0x24>)
    186c:	4b04      	ldr	r3, [pc, #16]	; (1880 <SPI_HI3593_CLOCK_init+0x28>)
    186e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1870:	4804      	ldr	r0, [pc, #16]	; (1884 <SPI_HI3593_CLOCK_init+0x2c>)
    1872:	4b05      	ldr	r3, [pc, #20]	; (1888 <SPI_HI3593_CLOCK_init+0x30>)
    1874:	4798      	blx	r3
}
    1876:	bf00      	nop
    1878:	bd80      	pop	{r7, pc}
    187a:	bf00      	nop
    187c:	40001c00 	.word	0x40001c00
    1880:	000009e5 	.word	0x000009e5
    1884:	40000800 	.word	0x40000800
    1888:	00000c8b 	.word	0x00000c8b

0000188c <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    188c:	b580      	push	{r7, lr}
    188e:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1890:	4b04      	ldr	r3, [pc, #16]	; (18a4 <SPI_HI3593_init+0x18>)
    1892:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1894:	4904      	ldr	r1, [pc, #16]	; (18a8 <SPI_HI3593_init+0x1c>)
    1896:	4805      	ldr	r0, [pc, #20]	; (18ac <SPI_HI3593_init+0x20>)
    1898:	4b05      	ldr	r3, [pc, #20]	; (18b0 <SPI_HI3593_init+0x24>)
    189a:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    189c:	4b05      	ldr	r3, [pc, #20]	; (18b4 <SPI_HI3593_init+0x28>)
    189e:	4798      	blx	r3
}
    18a0:	bf00      	nop
    18a2:	bd80      	pop	{r7, pc}
    18a4:	00001859 	.word	0x00001859
    18a8:	43000800 	.word	0x43000800
    18ac:	200011c0 	.word	0x200011c0
    18b0:	000028c9 	.word	0x000028c9
    18b4:	000017ed 	.word	0x000017ed

000018b8 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    18b8:	b580      	push	{r7, lr}
    18ba:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    18bc:	2100      	movs	r1, #0
    18be:	2068      	movs	r0, #104	; 0x68
    18c0:	4b07      	ldr	r3, [pc, #28]	; (18e0 <I2C_EEPROM_PORT_init+0x28>)
    18c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    18c4:	4907      	ldr	r1, [pc, #28]	; (18e4 <I2C_EEPROM_PORT_init+0x2c>)
    18c6:	2068      	movs	r0, #104	; 0x68
    18c8:	4b07      	ldr	r3, [pc, #28]	; (18e8 <I2C_EEPROM_PORT_init+0x30>)
    18ca:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    18cc:	2100      	movs	r1, #0
    18ce:	2069      	movs	r0, #105	; 0x69
    18d0:	4b03      	ldr	r3, [pc, #12]	; (18e0 <I2C_EEPROM_PORT_init+0x28>)
    18d2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    18d4:	4905      	ldr	r1, [pc, #20]	; (18ec <I2C_EEPROM_PORT_init+0x34>)
    18d6:	2069      	movs	r0, #105	; 0x69
    18d8:	4b03      	ldr	r3, [pc, #12]	; (18e8 <I2C_EEPROM_PORT_init+0x30>)
    18da:	4798      	blx	r3
}
    18dc:	bf00      	nop
    18de:	bd80      	pop	{r7, pc}
    18e0:	000011e5 	.word	0x000011e5
    18e4:	00680002 	.word	0x00680002
    18e8:	00001219 	.word	0x00001219
    18ec:	00690002 	.word	0x00690002

000018f0 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    18f0:	b580      	push	{r7, lr}
    18f2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18f4:	2248      	movs	r2, #72	; 0x48
    18f6:	2125      	movs	r1, #37	; 0x25
    18f8:	4806      	ldr	r0, [pc, #24]	; (1914 <I2C_EEPROM_CLOCK_init+0x24>)
    18fa:	4b07      	ldr	r3, [pc, #28]	; (1918 <I2C_EEPROM_CLOCK_init+0x28>)
    18fc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18fe:	224a      	movs	r2, #74	; 0x4a
    1900:	2103      	movs	r1, #3
    1902:	4804      	ldr	r0, [pc, #16]	; (1914 <I2C_EEPROM_CLOCK_init+0x24>)
    1904:	4b04      	ldr	r3, [pc, #16]	; (1918 <I2C_EEPROM_CLOCK_init+0x28>)
    1906:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1908:	4804      	ldr	r0, [pc, #16]	; (191c <I2C_EEPROM_CLOCK_init+0x2c>)
    190a:	4b05      	ldr	r3, [pc, #20]	; (1920 <I2C_EEPROM_CLOCK_init+0x30>)
    190c:	4798      	blx	r3
}
    190e:	bf00      	nop
    1910:	bd80      	pop	{r7, pc}
    1912:	bf00      	nop
    1914:	40001c00 	.word	0x40001c00
    1918:	000009e5 	.word	0x000009e5
    191c:	40000800 	.word	0x40000800
    1920:	00000cab 	.word	0x00000cab

00001924 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    1924:	b580      	push	{r7, lr}
    1926:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    1928:	4b04      	ldr	r3, [pc, #16]	; (193c <I2C_EEPROM_init+0x18>)
    192a:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    192c:	4904      	ldr	r1, [pc, #16]	; (1940 <I2C_EEPROM_init+0x1c>)
    192e:	4805      	ldr	r0, [pc, #20]	; (1944 <I2C_EEPROM_init+0x20>)
    1930:	4b05      	ldr	r3, [pc, #20]	; (1948 <I2C_EEPROM_init+0x24>)
    1932:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    1934:	4b05      	ldr	r3, [pc, #20]	; (194c <I2C_EEPROM_init+0x28>)
    1936:	4798      	blx	r3
}
    1938:	bf00      	nop
    193a:	bd80      	pop	{r7, pc}
    193c:	000018f1 	.word	0x000018f1
    1940:	43000c00 	.word	0x43000c00
    1944:	20001338 	.word	0x20001338
    1948:	000024a9 	.word	0x000024a9
    194c:	000018b9 	.word	0x000018b9

00001950 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1950:	b580      	push	{r7, lr}
    1952:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1954:	4808      	ldr	r0, [pc, #32]	; (1978 <TIMER_USB_init+0x28>)
    1956:	4b09      	ldr	r3, [pc, #36]	; (197c <TIMER_USB_init+0x2c>)
    1958:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    195a:	2243      	movs	r2, #67	; 0x43
    195c:	2109      	movs	r1, #9
    195e:	4808      	ldr	r0, [pc, #32]	; (1980 <TIMER_USB_init+0x30>)
    1960:	4b08      	ldr	r3, [pc, #32]	; (1984 <TIMER_USB_init+0x34>)
    1962:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    1964:	4b08      	ldr	r3, [pc, #32]	; (1988 <TIMER_USB_init+0x38>)
    1966:	4798      	blx	r3
    1968:	4603      	mov	r3, r0
    196a:	461a      	mov	r2, r3
    196c:	4907      	ldr	r1, [pc, #28]	; (198c <TIMER_USB_init+0x3c>)
    196e:	4808      	ldr	r0, [pc, #32]	; (1990 <TIMER_USB_init+0x40>)
    1970:	4b08      	ldr	r3, [pc, #32]	; (1994 <TIMER_USB_init+0x44>)
    1972:	4798      	blx	r3
}
    1974:	bf00      	nop
    1976:	bd80      	pop	{r7, pc}
    1978:	40000800 	.word	0x40000800
    197c:	00000b0b 	.word	0x00000b0b
    1980:	40001c00 	.word	0x40001c00
    1984:	000009e5 	.word	0x000009e5
    1988:	0000878d 	.word	0x0000878d
    198c:	40003800 	.word	0x40003800
    1990:	200012b8 	.word	0x200012b8
    1994:	00002a99 	.word	0x00002a99

00001998 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1998:	b580      	push	{r7, lr}
    199a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    199c:	4808      	ldr	r0, [pc, #32]	; (19c0 <TIMER_ARINC_init+0x28>)
    199e:	4b09      	ldr	r3, [pc, #36]	; (19c4 <TIMER_ARINC_init+0x2c>)
    19a0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19a2:	2244      	movs	r2, #68	; 0x44
    19a4:	211a      	movs	r1, #26
    19a6:	4808      	ldr	r0, [pc, #32]	; (19c8 <TIMER_ARINC_init+0x30>)
    19a8:	4b08      	ldr	r3, [pc, #32]	; (19cc <TIMER_ARINC_init+0x34>)
    19aa:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    19ac:	4b08      	ldr	r3, [pc, #32]	; (19d0 <TIMER_ARINC_init+0x38>)
    19ae:	4798      	blx	r3
    19b0:	4603      	mov	r3, r0
    19b2:	461a      	mov	r2, r3
    19b4:	4907      	ldr	r1, [pc, #28]	; (19d4 <TIMER_ARINC_init+0x3c>)
    19b6:	4808      	ldr	r0, [pc, #32]	; (19d8 <TIMER_ARINC_init+0x40>)
    19b8:	4b08      	ldr	r3, [pc, #32]	; (19dc <TIMER_ARINC_init+0x44>)
    19ba:	4798      	blx	r3
}
    19bc:	bf00      	nop
    19be:	bd80      	pop	{r7, pc}
    19c0:	40000800 	.word	0x40000800
    19c4:	00000bcb 	.word	0x00000bcb
    19c8:	40001c00 	.word	0x40001c00
    19cc:	000009e5 	.word	0x000009e5
    19d0:	0000878d 	.word	0x0000878d
    19d4:	4101a000 	.word	0x4101a000
    19d8:	20001298 	.word	0x20001298
    19dc:	00002a99 	.word	0x00002a99

000019e0 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    19e0:	b580      	push	{r7, lr}
    19e2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    19e4:	4808      	ldr	r0, [pc, #32]	; (1a08 <TIMER_MAINTENANCE_init+0x28>)
    19e6:	4b09      	ldr	r3, [pc, #36]	; (1a0c <TIMER_MAINTENANCE_init+0x2c>)
    19e8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19ea:	2246      	movs	r2, #70	; 0x46
    19ec:	211e      	movs	r1, #30
    19ee:	4808      	ldr	r0, [pc, #32]	; (1a10 <TIMER_MAINTENANCE_init+0x30>)
    19f0:	4b08      	ldr	r3, [pc, #32]	; (1a14 <TIMER_MAINTENANCE_init+0x34>)
    19f2:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    19f4:	4b08      	ldr	r3, [pc, #32]	; (1a18 <TIMER_MAINTENANCE_init+0x38>)
    19f6:	4798      	blx	r3
    19f8:	4603      	mov	r3, r0
    19fa:	461a      	mov	r2, r3
    19fc:	4907      	ldr	r1, [pc, #28]	; (1a1c <TIMER_MAINTENANCE_init+0x3c>)
    19fe:	4808      	ldr	r0, [pc, #32]	; (1a20 <TIMER_MAINTENANCE_init+0x40>)
    1a00:	4b08      	ldr	r3, [pc, #32]	; (1a24 <TIMER_MAINTENANCE_init+0x44>)
    1a02:	4798      	blx	r3
}
    1a04:	bf00      	nop
    1a06:	bd80      	pop	{r7, pc}
    1a08:	40000800 	.word	0x40000800
    1a0c:	00000beb 	.word	0x00000beb
    1a10:	40001c00 	.word	0x40001c00
    1a14:	000009e5 	.word	0x000009e5
    1a18:	0000878d 	.word	0x0000878d
    1a1c:	42001400 	.word	0x42001400
    1a20:	200011f0 	.word	0x200011f0
    1a24:	00002a99 	.word	0x00002a99

00001a28 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1a28:	b580      	push	{r7, lr}
    1a2a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1a2c:	4808      	ldr	r0, [pc, #32]	; (1a50 <TIMER_INTERFACE_init+0x28>)
    1a2e:	4b09      	ldr	r3, [pc, #36]	; (1a54 <TIMER_INTERFACE_init+0x2c>)
    1a30:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a32:	2246      	movs	r2, #70	; 0x46
    1a34:	211e      	movs	r1, #30
    1a36:	4808      	ldr	r0, [pc, #32]	; (1a58 <TIMER_INTERFACE_init+0x30>)
    1a38:	4b08      	ldr	r3, [pc, #32]	; (1a5c <TIMER_INTERFACE_init+0x34>)
    1a3a:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1a3c:	4b08      	ldr	r3, [pc, #32]	; (1a60 <TIMER_INTERFACE_init+0x38>)
    1a3e:	4798      	blx	r3
    1a40:	4603      	mov	r3, r0
    1a42:	461a      	mov	r2, r3
    1a44:	4907      	ldr	r1, [pc, #28]	; (1a64 <TIMER_INTERFACE_init+0x3c>)
    1a46:	4808      	ldr	r0, [pc, #32]	; (1a68 <TIMER_INTERFACE_init+0x40>)
    1a48:	4b08      	ldr	r3, [pc, #32]	; (1a6c <TIMER_INTERFACE_init+0x44>)
    1a4a:	4798      	blx	r3
}
    1a4c:	bf00      	nop
    1a4e:	bd80      	pop	{r7, pc}
    1a50:	40000800 	.word	0x40000800
    1a54:	00000c0b 	.word	0x00000c0b
    1a58:	40001c00 	.word	0x40001c00
    1a5c:	000009e5 	.word	0x000009e5
    1a60:	0000878d 	.word	0x0000878d
    1a64:	42001800 	.word	0x42001800
    1a68:	20001234 	.word	0x20001234
    1a6c:	00002a99 	.word	0x00002a99

00001a70 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1a70:	b580      	push	{r7, lr}
    1a72:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    1a74:	4808      	ldr	r0, [pc, #32]	; (1a98 <TIMER_EVENT_init+0x28>)
    1a76:	4b09      	ldr	r3, [pc, #36]	; (1a9c <TIMER_EVENT_init+0x2c>)
    1a78:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a7a:	2246      	movs	r2, #70	; 0x46
    1a7c:	2127      	movs	r1, #39	; 0x27
    1a7e:	4808      	ldr	r0, [pc, #32]	; (1aa0 <TIMER_EVENT_init+0x30>)
    1a80:	4b08      	ldr	r3, [pc, #32]	; (1aa4 <TIMER_EVENT_init+0x34>)
    1a82:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    1a84:	4b08      	ldr	r3, [pc, #32]	; (1aa8 <TIMER_EVENT_init+0x38>)
    1a86:	4798      	blx	r3
    1a88:	4603      	mov	r3, r0
    1a8a:	461a      	mov	r2, r3
    1a8c:	4907      	ldr	r1, [pc, #28]	; (1aac <TIMER_EVENT_init+0x3c>)
    1a8e:	4808      	ldr	r0, [pc, #32]	; (1ab0 <TIMER_EVENT_init+0x40>)
    1a90:	4b08      	ldr	r3, [pc, #32]	; (1ab4 <TIMER_EVENT_init+0x44>)
    1a92:	4798      	blx	r3
}
    1a94:	bf00      	nop
    1a96:	bd80      	pop	{r7, pc}
    1a98:	40000800 	.word	0x40000800
    1a9c:	00000ccb 	.word	0x00000ccb
    1aa0:	40001c00 	.word	0x40001c00
    1aa4:	000009e5 	.word	0x000009e5
    1aa8:	0000878d 	.word	0x0000878d
    1aac:	43001400 	.word	0x43001400
    1ab0:	20001214 	.word	0x20001214
    1ab4:	00002a99 	.word	0x00002a99

00001ab8 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1ab8:	b580      	push	{r7, lr}
    1aba:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB01, PINMUX_PB01E_TC7_WO1);
    1abc:	4902      	ldr	r1, [pc, #8]	; (1ac8 <LIVE_PULSE_PORT_init+0x10>)
    1abe:	2021      	movs	r0, #33	; 0x21
    1ac0:	4b02      	ldr	r3, [pc, #8]	; (1acc <LIVE_PULSE_PORT_init+0x14>)
    1ac2:	4798      	blx	r3
}
    1ac4:	bf00      	nop
    1ac6:	bd80      	pop	{r7, pc}
    1ac8:	00210004 	.word	0x00210004
    1acc:	00001219 	.word	0x00001219

00001ad0 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1ad0:	b580      	push	{r7, lr}
    1ad2:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1ad4:	4804      	ldr	r0, [pc, #16]	; (1ae8 <LIVE_PULSE_CLOCK_init+0x18>)
    1ad6:	4b05      	ldr	r3, [pc, #20]	; (1aec <LIVE_PULSE_CLOCK_init+0x1c>)
    1ad8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ada:	2240      	movs	r2, #64	; 0x40
    1adc:	2127      	movs	r1, #39	; 0x27
    1ade:	4804      	ldr	r0, [pc, #16]	; (1af0 <LIVE_PULSE_CLOCK_init+0x20>)
    1ae0:	4b04      	ldr	r3, [pc, #16]	; (1af4 <LIVE_PULSE_CLOCK_init+0x24>)
    1ae2:	4798      	blx	r3
}
    1ae4:	bf00      	nop
    1ae6:	bd80      	pop	{r7, pc}
    1ae8:	40000800 	.word	0x40000800
    1aec:	00000ceb 	.word	0x00000ceb
    1af0:	40001c00 	.word	0x40001c00
    1af4:	000009e5 	.word	0x000009e5

00001af8 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1af8:	b580      	push	{r7, lr}
    1afa:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1afc:	4b06      	ldr	r3, [pc, #24]	; (1b18 <LIVE_PULSE_init+0x20>)
    1afe:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1b00:	4b06      	ldr	r3, [pc, #24]	; (1b1c <LIVE_PULSE_init+0x24>)
    1b02:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1b04:	4b06      	ldr	r3, [pc, #24]	; (1b20 <LIVE_PULSE_init+0x28>)
    1b06:	4798      	blx	r3
    1b08:	4603      	mov	r3, r0
    1b0a:	461a      	mov	r2, r3
    1b0c:	4905      	ldr	r1, [pc, #20]	; (1b24 <LIVE_PULSE_init+0x2c>)
    1b0e:	4806      	ldr	r0, [pc, #24]	; (1b28 <LIVE_PULSE_init+0x30>)
    1b10:	4b06      	ldr	r3, [pc, #24]	; (1b2c <LIVE_PULSE_init+0x34>)
    1b12:	4798      	blx	r3
}
    1b14:	bf00      	nop
    1b16:	bd80      	pop	{r7, pc}
    1b18:	00001ad1 	.word	0x00001ad1
    1b1c:	00001ab9 	.word	0x00001ab9
    1b20:	000087a1 	.word	0x000087a1
    1b24:	43001800 	.word	0x43001800
    1b28:	20001254 	.word	0x20001254
    1b2c:	000026b9 	.word	0x000026b9

00001b30 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    1b30:	b580      	push	{r7, lr}
    1b32:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    1b34:	4804      	ldr	r0, [pc, #16]	; (1b48 <TIMER_HVAC_CLOCK_init+0x18>)
    1b36:	4b05      	ldr	r3, [pc, #20]	; (1b4c <TIMER_HVAC_CLOCK_init+0x1c>)
    1b38:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b3a:	2244      	movs	r2, #68	; 0x44
    1b3c:	2119      	movs	r1, #25
    1b3e:	4804      	ldr	r0, [pc, #16]	; (1b50 <TIMER_HVAC_CLOCK_init+0x20>)
    1b40:	4b04      	ldr	r3, [pc, #16]	; (1b54 <TIMER_HVAC_CLOCK_init+0x24>)
    1b42:	4798      	blx	r3
}
    1b44:	bf00      	nop
    1b46:	bd80      	pop	{r7, pc}
    1b48:	40000800 	.word	0x40000800
    1b4c:	00000b8b 	.word	0x00000b8b
    1b50:	40001c00 	.word	0x40001c00
    1b54:	000009e5 	.word	0x000009e5

00001b58 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    1b58:	b580      	push	{r7, lr}
    1b5a:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    1b5c:	4b05      	ldr	r3, [pc, #20]	; (1b74 <TIMER_HVAC_init+0x1c>)
    1b5e:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    1b60:	4b05      	ldr	r3, [pc, #20]	; (1b78 <TIMER_HVAC_init+0x20>)
    1b62:	4798      	blx	r3
    1b64:	4603      	mov	r3, r0
    1b66:	461a      	mov	r2, r3
    1b68:	4904      	ldr	r1, [pc, #16]	; (1b7c <TIMER_HVAC_init+0x24>)
    1b6a:	4805      	ldr	r0, [pc, #20]	; (1b80 <TIMER_HVAC_init+0x28>)
    1b6c:	4b05      	ldr	r3, [pc, #20]	; (1b84 <TIMER_HVAC_init+0x2c>)
    1b6e:	4798      	blx	r3
}
    1b70:	bf00      	nop
    1b72:	bd80      	pop	{r7, pc}
    1b74:	00001b31 	.word	0x00001b31
    1b78:	00007b4d 	.word	0x00007b4d
    1b7c:	41016000 	.word	0x41016000
    1b80:	20001318 	.word	0x20001318
    1b84:	00002a99 	.word	0x00002a99

00001b88 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    1b88:	b580      	push	{r7, lr}
    1b8a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    1b8c:	4804      	ldr	r0, [pc, #16]	; (1ba0 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    1b8e:	4b05      	ldr	r3, [pc, #20]	; (1ba4 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    1b90:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b92:	2244      	movs	r2, #68	; 0x44
    1b94:	2119      	movs	r1, #25
    1b96:	4804      	ldr	r0, [pc, #16]	; (1ba8 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    1b98:	4b04      	ldr	r3, [pc, #16]	; (1bac <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    1b9a:	4798      	blx	r3
}
    1b9c:	bf00      	nop
    1b9e:	bd80      	pop	{r7, pc}
    1ba0:	40000800 	.word	0x40000800
    1ba4:	00000bab 	.word	0x00000bab
    1ba8:	40001c00 	.word	0x40001c00
    1bac:	000009e5 	.word	0x000009e5

00001bb0 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    1bb0:	b580      	push	{r7, lr}
    1bb2:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    1bb4:	4b05      	ldr	r3, [pc, #20]	; (1bcc <TIMER_TEMPERATURES_init+0x1c>)
    1bb6:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    1bb8:	4b05      	ldr	r3, [pc, #20]	; (1bd0 <TIMER_TEMPERATURES_init+0x20>)
    1bba:	4798      	blx	r3
    1bbc:	4603      	mov	r3, r0
    1bbe:	461a      	mov	r2, r3
    1bc0:	4904      	ldr	r1, [pc, #16]	; (1bd4 <TIMER_TEMPERATURES_init+0x24>)
    1bc2:	4805      	ldr	r0, [pc, #20]	; (1bd8 <TIMER_TEMPERATURES_init+0x28>)
    1bc4:	4b05      	ldr	r3, [pc, #20]	; (1bdc <TIMER_TEMPERATURES_init+0x2c>)
    1bc6:	4798      	blx	r3
}
    1bc8:	bf00      	nop
    1bca:	bd80      	pop	{r7, pc}
    1bcc:	00001b89 	.word	0x00001b89
    1bd0:	00007b4d 	.word	0x00007b4d
    1bd4:	41018000 	.word	0x41018000
    1bd8:	200011a0 	.word	0x200011a0
    1bdc:	00002a99 	.word	0x00002a99

00001be0 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1be0:	b580      	push	{r7, lr}
    1be2:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1be4:	2102      	movs	r1, #2
    1be6:	2018      	movs	r0, #24
    1be8:	4b0f      	ldr	r3, [pc, #60]	; (1c28 <CDCUSB_PORT_init+0x48>)
    1bea:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1bec:	2100      	movs	r1, #0
    1bee:	2018      	movs	r0, #24
    1bf0:	4b0e      	ldr	r3, [pc, #56]	; (1c2c <CDCUSB_PORT_init+0x4c>)
    1bf2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1bf4:	2100      	movs	r1, #0
    1bf6:	2018      	movs	r0, #24
    1bf8:	4b0d      	ldr	r3, [pc, #52]	; (1c30 <CDCUSB_PORT_init+0x50>)
    1bfa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1bfc:	490d      	ldr	r1, [pc, #52]	; (1c34 <CDCUSB_PORT_init+0x54>)
    1bfe:	2018      	movs	r0, #24
    1c00:	4b0d      	ldr	r3, [pc, #52]	; (1c38 <CDCUSB_PORT_init+0x58>)
    1c02:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1c04:	2102      	movs	r1, #2
    1c06:	2019      	movs	r0, #25
    1c08:	4b07      	ldr	r3, [pc, #28]	; (1c28 <CDCUSB_PORT_init+0x48>)
    1c0a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1c0c:	2100      	movs	r1, #0
    1c0e:	2019      	movs	r0, #25
    1c10:	4b06      	ldr	r3, [pc, #24]	; (1c2c <CDCUSB_PORT_init+0x4c>)
    1c12:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1c14:	2100      	movs	r1, #0
    1c16:	2019      	movs	r0, #25
    1c18:	4b05      	ldr	r3, [pc, #20]	; (1c30 <CDCUSB_PORT_init+0x50>)
    1c1a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1c1c:	4907      	ldr	r1, [pc, #28]	; (1c3c <CDCUSB_PORT_init+0x5c>)
    1c1e:	2019      	movs	r0, #25
    1c20:	4b05      	ldr	r3, [pc, #20]	; (1c38 <CDCUSB_PORT_init+0x58>)
    1c22:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1c24:	bf00      	nop
    1c26:	bd80      	pop	{r7, pc}
    1c28:	00001239 	.word	0x00001239
    1c2c:	00001271 	.word	0x00001271
    1c30:	000011e5 	.word	0x000011e5
    1c34:	00180007 	.word	0x00180007
    1c38:	00001219 	.word	0x00001219
    1c3c:	00190007 	.word	0x00190007

00001c40 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    1c40:	b580      	push	{r7, lr}
    1c42:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1c44:	2242      	movs	r2, #66	; 0x42
    1c46:	210a      	movs	r1, #10
    1c48:	4805      	ldr	r0, [pc, #20]	; (1c60 <CDCUSB_CLOCK_init+0x20>)
    1c4a:	4b06      	ldr	r3, [pc, #24]	; (1c64 <CDCUSB_CLOCK_init+0x24>)
    1c4c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    1c4e:	4806      	ldr	r0, [pc, #24]	; (1c68 <CDCUSB_CLOCK_init+0x28>)
    1c50:	4b06      	ldr	r3, [pc, #24]	; (1c6c <CDCUSB_CLOCK_init+0x2c>)
    1c52:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1c54:	4804      	ldr	r0, [pc, #16]	; (1c68 <CDCUSB_CLOCK_init+0x28>)
    1c56:	4b06      	ldr	r3, [pc, #24]	; (1c70 <CDCUSB_CLOCK_init+0x30>)
    1c58:	4798      	blx	r3
}
    1c5a:	bf00      	nop
    1c5c:	bd80      	pop	{r7, pc}
    1c5e:	bf00      	nop
    1c60:	40001c00 	.word	0x40001c00
    1c64:	000009e5 	.word	0x000009e5
    1c68:	40000800 	.word	0x40000800
    1c6c:	00000a0b 	.word	0x00000a0b
    1c70:	00000b2b 	.word	0x00000b2b

00001c74 <CDCUSB_init>:

void CDCUSB_init(void)
{
    1c74:	b580      	push	{r7, lr}
    1c76:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1c78:	4b03      	ldr	r3, [pc, #12]	; (1c88 <CDCUSB_init+0x14>)
    1c7a:	4798      	blx	r3
	usb_d_init();
    1c7c:	4b03      	ldr	r3, [pc, #12]	; (1c8c <CDCUSB_init+0x18>)
    1c7e:	4798      	blx	r3
	CDCUSB_PORT_init();
    1c80:	4b03      	ldr	r3, [pc, #12]	; (1c90 <CDCUSB_init+0x1c>)
    1c82:	4798      	blx	r3
}
    1c84:	bf00      	nop
    1c86:	bd80      	pop	{r7, pc}
    1c88:	00001c41 	.word	0x00001c41
    1c8c:	000032f5 	.word	0x000032f5
    1c90:	00001be1 	.word	0x00001be1

00001c94 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1c94:	b580      	push	{r7, lr}
    1c96:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1c98:	4802      	ldr	r0, [pc, #8]	; (1ca4 <WATCHDOG_CLOCK_init+0x10>)
    1c9a:	4b03      	ldr	r3, [pc, #12]	; (1ca8 <WATCHDOG_CLOCK_init+0x14>)
    1c9c:	4798      	blx	r3
}
    1c9e:	bf00      	nop
    1ca0:	bd80      	pop	{r7, pc}
    1ca2:	bf00      	nop
    1ca4:	40000800 	.word	0x40000800
    1ca8:	00000a8b 	.word	0x00000a8b

00001cac <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1cac:	b580      	push	{r7, lr}
    1cae:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1cb0:	4b03      	ldr	r3, [pc, #12]	; (1cc0 <WATCHDOG_init+0x14>)
    1cb2:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1cb4:	4903      	ldr	r1, [pc, #12]	; (1cc4 <WATCHDOG_init+0x18>)
    1cb6:	4804      	ldr	r0, [pc, #16]	; (1cc8 <WATCHDOG_init+0x1c>)
    1cb8:	4b04      	ldr	r3, [pc, #16]	; (1ccc <WATCHDOG_init+0x20>)
    1cba:	4798      	blx	r3
}
    1cbc:	bf00      	nop
    1cbe:	bd80      	pop	{r7, pc}
    1cc0:	00001c95 	.word	0x00001c95
    1cc4:	40002000 	.word	0x40002000
    1cc8:	20001398 	.word	0x20001398
    1ccc:	000012b9 	.word	0x000012b9

00001cd0 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1cd0:	b580      	push	{r7, lr}
    1cd2:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1cd4:	4904      	ldr	r1, [pc, #16]	; (1ce8 <CAN_CCU_PORT_init+0x18>)
    1cd6:	202d      	movs	r0, #45	; 0x2d
    1cd8:	4b04      	ldr	r3, [pc, #16]	; (1cec <CAN_CCU_PORT_init+0x1c>)
    1cda:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1cdc:	4904      	ldr	r1, [pc, #16]	; (1cf0 <CAN_CCU_PORT_init+0x20>)
    1cde:	202c      	movs	r0, #44	; 0x2c
    1ce0:	4b02      	ldr	r3, [pc, #8]	; (1cec <CAN_CCU_PORT_init+0x1c>)
    1ce2:	4798      	blx	r3
}
    1ce4:	bf00      	nop
    1ce6:	bd80      	pop	{r7, pc}
    1ce8:	002d0007 	.word	0x002d0007
    1cec:	00001219 	.word	0x00001219
    1cf0:	002c0007 	.word	0x002c0007

00001cf4 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1cf4:	b580      	push	{r7, lr}
    1cf6:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1cf8:	4807      	ldr	r0, [pc, #28]	; (1d18 <CAN_CCU_init+0x24>)
    1cfa:	4b08      	ldr	r3, [pc, #32]	; (1d1c <CAN_CCU_init+0x28>)
    1cfc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1cfe:	2243      	movs	r2, #67	; 0x43
    1d00:	211c      	movs	r1, #28
    1d02:	4807      	ldr	r0, [pc, #28]	; (1d20 <CAN_CCU_init+0x2c>)
    1d04:	4b07      	ldr	r3, [pc, #28]	; (1d24 <CAN_CCU_init+0x30>)
    1d06:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1d08:	4907      	ldr	r1, [pc, #28]	; (1d28 <CAN_CCU_init+0x34>)
    1d0a:	4808      	ldr	r0, [pc, #32]	; (1d2c <CAN_CCU_init+0x38>)
    1d0c:	4b08      	ldr	r3, [pc, #32]	; (1d30 <CAN_CCU_init+0x3c>)
    1d0e:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1d10:	4b08      	ldr	r3, [pc, #32]	; (1d34 <CAN_CCU_init+0x40>)
    1d12:	4798      	blx	r3
}
    1d14:	bf00      	nop
    1d16:	bd80      	pop	{r7, pc}
    1d18:	40000800 	.word	0x40000800
    1d1c:	00000a4b 	.word	0x00000a4b
    1d20:	40001c00 	.word	0x40001c00
    1d24:	000009e5 	.word	0x000009e5
    1d28:	42000400 	.word	0x42000400
    1d2c:	20001270 	.word	0x20001270
    1d30:	00001f91 	.word	0x00001f91
    1d34:	00001cd1 	.word	0x00001cd1

00001d38 <system_init>:

void system_init(void)
{
    1d38:	b580      	push	{r7, lr}
    1d3a:	af00      	add	r7, sp, #0
	init_mcu();
    1d3c:	4b5e      	ldr	r3, [pc, #376]	; (1eb8 <system_init+0x180>)
    1d3e:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    1d40:	2100      	movs	r1, #0
    1d42:	2007      	movs	r0, #7
    1d44:	4b5d      	ldr	r3, [pc, #372]	; (1ebc <system_init+0x184>)
    1d46:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    1d48:	2102      	movs	r1, #2
    1d4a:	2007      	movs	r0, #7
    1d4c:	4b5c      	ldr	r3, [pc, #368]	; (1ec0 <system_init+0x188>)
    1d4e:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    1d50:	f04f 31ff 	mov.w	r1, #4294967295
    1d54:	2007      	movs	r0, #7
    1d56:	4b5b      	ldr	r3, [pc, #364]	; (1ec4 <system_init+0x18c>)
    1d58:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    1d5a:	2101      	movs	r1, #1
    1d5c:	200f      	movs	r0, #15
    1d5e:	4b57      	ldr	r3, [pc, #348]	; (1ebc <system_init+0x184>)
    1d60:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1d62:	2102      	movs	r1, #2
    1d64:	200f      	movs	r0, #15
    1d66:	4b56      	ldr	r3, [pc, #344]	; (1ec0 <system_init+0x188>)
    1d68:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1d6a:	f04f 31ff 	mov.w	r1, #4294967295
    1d6e:	200f      	movs	r0, #15
    1d70:	4b54      	ldr	r3, [pc, #336]	; (1ec4 <system_init+0x18c>)
    1d72:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1d74:	2101      	movs	r1, #1
    1d76:	2013      	movs	r0, #19
    1d78:	4b50      	ldr	r3, [pc, #320]	; (1ebc <system_init+0x184>)
    1d7a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    1d7c:	2102      	movs	r1, #2
    1d7e:	2013      	movs	r0, #19
    1d80:	4b4f      	ldr	r3, [pc, #316]	; (1ec0 <system_init+0x188>)
    1d82:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1d84:	f04f 31ff 	mov.w	r1, #4294967295
    1d88:	2013      	movs	r0, #19
    1d8a:	4b4e      	ldr	r3, [pc, #312]	; (1ec4 <system_init+0x18c>)
    1d8c:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    1d8e:	2101      	movs	r1, #1
    1d90:	201b      	movs	r0, #27
    1d92:	4b4a      	ldr	r3, [pc, #296]	; (1ebc <system_init+0x184>)
    1d94:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    1d96:	2102      	movs	r1, #2
    1d98:	201b      	movs	r0, #27
    1d9a:	4b49      	ldr	r3, [pc, #292]	; (1ec0 <system_init+0x188>)
    1d9c:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    1d9e:	f04f 31ff 	mov.w	r1, #4294967295
    1da2:	201b      	movs	r0, #27
    1da4:	4b47      	ldr	r3, [pc, #284]	; (1ec4 <system_init+0x18c>)
    1da6:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    1da8:	2101      	movs	r1, #1
    1daa:	2027      	movs	r0, #39	; 0x27
    1dac:	4b44      	ldr	r3, [pc, #272]	; (1ec0 <system_init+0x188>)
    1dae:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    1db0:	2102      	movs	r1, #2
    1db2:	2027      	movs	r0, #39	; 0x27
    1db4:	4b44      	ldr	r3, [pc, #272]	; (1ec8 <system_init+0x190>)
    1db6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    1db8:	f04f 31ff 	mov.w	r1, #4294967295
    1dbc:	2027      	movs	r0, #39	; 0x27
    1dbe:	4b41      	ldr	r3, [pc, #260]	; (1ec4 <system_init+0x18c>)
    1dc0:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    1dc2:	2101      	movs	r1, #1
    1dc4:	203d      	movs	r0, #61	; 0x3d
    1dc6:	4b3d      	ldr	r3, [pc, #244]	; (1ebc <system_init+0x184>)
    1dc8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    1dca:	2102      	movs	r1, #2
    1dcc:	203d      	movs	r0, #61	; 0x3d
    1dce:	4b3c      	ldr	r3, [pc, #240]	; (1ec0 <system_init+0x188>)
    1dd0:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    1dd2:	f04f 31ff 	mov.w	r1, #4294967295
    1dd6:	203d      	movs	r0, #61	; 0x3d
    1dd8:	4b3a      	ldr	r3, [pc, #232]	; (1ec4 <system_init+0x18c>)
    1dda:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1ddc:	2101      	movs	r1, #1
    1dde:	203f      	movs	r0, #63	; 0x3f
    1de0:	4b37      	ldr	r3, [pc, #220]	; (1ec0 <system_init+0x188>)
    1de2:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1de4:	2101      	movs	r1, #1
    1de6:	203f      	movs	r0, #63	; 0x3f
    1de8:	4b37      	ldr	r3, [pc, #220]	; (1ec8 <system_init+0x190>)
    1dea:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1dec:	f04f 31ff 	mov.w	r1, #4294967295
    1df0:	203f      	movs	r0, #63	; 0x3f
    1df2:	4b34      	ldr	r3, [pc, #208]	; (1ec4 <system_init+0x18c>)
    1df4:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1df6:	2100      	movs	r1, #0
    1df8:	204d      	movs	r0, #77	; 0x4d
    1dfa:	4b30      	ldr	r3, [pc, #192]	; (1ebc <system_init+0x184>)
    1dfc:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1dfe:	2102      	movs	r1, #2
    1e00:	204d      	movs	r0, #77	; 0x4d
    1e02:	4b2f      	ldr	r3, [pc, #188]	; (1ec0 <system_init+0x188>)
    1e04:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1e06:	f04f 31ff 	mov.w	r1, #4294967295
    1e0a:	204d      	movs	r0, #77	; 0x4d
    1e0c:	4b2d      	ldr	r3, [pc, #180]	; (1ec4 <system_init+0x18c>)
    1e0e:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1e10:	2101      	movs	r1, #1
    1e12:	204e      	movs	r0, #78	; 0x4e
    1e14:	4b29      	ldr	r3, [pc, #164]	; (1ebc <system_init+0x184>)
    1e16:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    1e18:	2102      	movs	r1, #2
    1e1a:	204e      	movs	r0, #78	; 0x4e
    1e1c:	4b28      	ldr	r3, [pc, #160]	; (1ec0 <system_init+0x188>)
    1e1e:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1e20:	f04f 31ff 	mov.w	r1, #4294967295
    1e24:	204e      	movs	r0, #78	; 0x4e
    1e26:	4b27      	ldr	r3, [pc, #156]	; (1ec4 <system_init+0x18c>)
    1e28:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1e2a:	2100      	movs	r1, #0
    1e2c:	204f      	movs	r0, #79	; 0x4f
    1e2e:	4b23      	ldr	r3, [pc, #140]	; (1ebc <system_init+0x184>)
    1e30:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1e32:	2102      	movs	r1, #2
    1e34:	204f      	movs	r0, #79	; 0x4f
    1e36:	4b22      	ldr	r3, [pc, #136]	; (1ec0 <system_init+0x188>)
    1e38:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1e3a:	f04f 31ff 	mov.w	r1, #4294967295
    1e3e:	204f      	movs	r0, #79	; 0x4f
    1e40:	4b20      	ldr	r3, [pc, #128]	; (1ec4 <system_init+0x18c>)
    1e42:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    1e44:	2100      	movs	r1, #0
    1e46:	2052      	movs	r0, #82	; 0x52
    1e48:	4b1c      	ldr	r3, [pc, #112]	; (1ebc <system_init+0x184>)
    1e4a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1e4c:	2102      	movs	r1, #2
    1e4e:	2052      	movs	r0, #82	; 0x52
    1e50:	4b1b      	ldr	r3, [pc, #108]	; (1ec0 <system_init+0x188>)
    1e52:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1e54:	f04f 31ff 	mov.w	r1, #4294967295
    1e58:	2052      	movs	r0, #82	; 0x52
    1e5a:	4b1a      	ldr	r3, [pc, #104]	; (1ec4 <system_init+0x18c>)
    1e5c:	4798      	blx	r3

	CRC_CALC_init();
    1e5e:	4b1b      	ldr	r3, [pc, #108]	; (1ecc <system_init+0x194>)
    1e60:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1e62:	4b1b      	ldr	r3, [pc, #108]	; (1ed0 <system_init+0x198>)
    1e64:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1e66:	4b1b      	ldr	r3, [pc, #108]	; (1ed4 <system_init+0x19c>)
    1e68:	4798      	blx	r3

	QSPI_N25Q256_init();
    1e6a:	4b1b      	ldr	r3, [pc, #108]	; (1ed8 <system_init+0x1a0>)
    1e6c:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1e6e:	4b1b      	ldr	r3, [pc, #108]	; (1edc <system_init+0x1a4>)
    1e70:	4798      	blx	r3

	I2C_SHARED_init();
    1e72:	4b1b      	ldr	r3, [pc, #108]	; (1ee0 <system_init+0x1a8>)
    1e74:	4798      	blx	r3

	SPI_TEMP_init();
    1e76:	4b1b      	ldr	r3, [pc, #108]	; (1ee4 <system_init+0x1ac>)
    1e78:	4798      	blx	r3

	I2C_EXPANDER_init();
    1e7a:	4b1b      	ldr	r3, [pc, #108]	; (1ee8 <system_init+0x1b0>)
    1e7c:	4798      	blx	r3

	SPI_HI3593_init();
    1e7e:	4b1b      	ldr	r3, [pc, #108]	; (1eec <system_init+0x1b4>)
    1e80:	4798      	blx	r3

	I2C_EEPROM_init();
    1e82:	4b1b      	ldr	r3, [pc, #108]	; (1ef0 <system_init+0x1b8>)
    1e84:	4798      	blx	r3

	TIMER_USB_init();
    1e86:	4b1b      	ldr	r3, [pc, #108]	; (1ef4 <system_init+0x1bc>)
    1e88:	4798      	blx	r3
	TIMER_ARINC_init();
    1e8a:	4b1b      	ldr	r3, [pc, #108]	; (1ef8 <system_init+0x1c0>)
    1e8c:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    1e8e:	4b1b      	ldr	r3, [pc, #108]	; (1efc <system_init+0x1c4>)
    1e90:	4798      	blx	r3
	TIMER_INTERFACE_init();
    1e92:	4b1b      	ldr	r3, [pc, #108]	; (1f00 <system_init+0x1c8>)
    1e94:	4798      	blx	r3
	TIMER_EVENT_init();
    1e96:	4b1b      	ldr	r3, [pc, #108]	; (1f04 <system_init+0x1cc>)
    1e98:	4798      	blx	r3
	LIVE_PULSE_init();
    1e9a:	4b1b      	ldr	r3, [pc, #108]	; (1f08 <system_init+0x1d0>)
    1e9c:	4798      	blx	r3

	TIMER_HVAC_init();
    1e9e:	4b1b      	ldr	r3, [pc, #108]	; (1f0c <system_init+0x1d4>)
    1ea0:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    1ea2:	4b1b      	ldr	r3, [pc, #108]	; (1f10 <system_init+0x1d8>)
    1ea4:	4798      	blx	r3

	CDCUSB_init();
    1ea6:	4b1b      	ldr	r3, [pc, #108]	; (1f14 <system_init+0x1dc>)
    1ea8:	4798      	blx	r3

	WATCHDOG_init();
    1eaa:	4b1b      	ldr	r3, [pc, #108]	; (1f18 <system_init+0x1e0>)
    1eac:	4798      	blx	r3
	CAN_CCU_init();
    1eae:	4b1b      	ldr	r3, [pc, #108]	; (1f1c <system_init+0x1e4>)
    1eb0:	4798      	blx	r3
}
    1eb2:	bf00      	nop
    1eb4:	bd80      	pop	{r7, pc}
    1eb6:	bf00      	nop
    1eb8:	000012a9 	.word	0x000012a9
    1ebc:	00001271 	.word	0x00001271
    1ec0:	00001239 	.word	0x00001239
    1ec4:	00001219 	.word	0x00001219
    1ec8:	000011e5 	.word	0x000011e5
    1ecc:	00001309 	.word	0x00001309
    1ed0:	00001335 	.word	0x00001335
    1ed4:	00001441 	.word	0x00001441
    1ed8:	00001589 	.word	0x00001589
    1edc:	000015cd 	.word	0x000015cd
    1ee0:	0000165d 	.word	0x0000165d
    1ee4:	00001729 	.word	0x00001729
    1ee8:	000017c1 	.word	0x000017c1
    1eec:	0000188d 	.word	0x0000188d
    1ef0:	00001925 	.word	0x00001925
    1ef4:	00001951 	.word	0x00001951
    1ef8:	00001999 	.word	0x00001999
    1efc:	000019e1 	.word	0x000019e1
    1f00:	00001a29 	.word	0x00001a29
    1f04:	00001a71 	.word	0x00001a71
    1f08:	00001af9 	.word	0x00001af9
    1f0c:	00001b59 	.word	0x00001b59
    1f10:	00001bb1 	.word	0x00001bb1
    1f14:	00001c75 	.word	0x00001c75
    1f18:	00001cad 	.word	0x00001cad
    1f1c:	00001cf5 	.word	0x00001cf5

00001f20 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1f20:	b580      	push	{r7, lr}
    1f22:	b084      	sub	sp, #16
    1f24:	af00      	add	r7, sp, #0
    1f26:	6078      	str	r0, [r7, #4]
    1f28:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    1f2a:	2300      	movs	r3, #0
    1f2c:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    1f2e:	687b      	ldr	r3, [r7, #4]
    1f30:	2b00      	cmp	r3, #0
    1f32:	bf14      	ite	ne
    1f34:	2301      	movne	r3, #1
    1f36:	2300      	moveq	r3, #0
    1f38:	b2db      	uxtb	r3, r3
    1f3a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    1f3e:	4911      	ldr	r1, [pc, #68]	; (1f84 <calendar_init+0x64>)
    1f40:	4618      	mov	r0, r3
    1f42:	4b11      	ldr	r3, [pc, #68]	; (1f88 <calendar_init+0x68>)
    1f44:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    1f46:	687b      	ldr	r3, [r7, #4]
    1f48:	681a      	ldr	r2, [r3, #0]
    1f4a:	683b      	ldr	r3, [r7, #0]
    1f4c:	429a      	cmp	r2, r3
    1f4e:	d101      	bne.n	1f54 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    1f50:	2300      	movs	r3, #0
    1f52:	e013      	b.n	1f7c <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    1f54:	687b      	ldr	r3, [r7, #4]
    1f56:	681b      	ldr	r3, [r3, #0]
    1f58:	2b00      	cmp	r3, #0
    1f5a:	d002      	beq.n	1f62 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1f5c:	f06f 0311 	mvn.w	r3, #17
    1f60:	e00c      	b.n	1f7c <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    1f62:	687b      	ldr	r3, [r7, #4]
    1f64:	683a      	ldr	r2, [r7, #0]
    1f66:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    1f68:	687b      	ldr	r3, [r7, #4]
    1f6a:	4618      	mov	r0, r3
    1f6c:	4b07      	ldr	r3, [pc, #28]	; (1f8c <calendar_init+0x6c>)
    1f6e:	4798      	blx	r3
    1f70:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    1f72:	687b      	ldr	r3, [r7, #4]
    1f74:	f240 72b2 	movw	r2, #1970	; 0x7b2
    1f78:	619a      	str	r2, [r3, #24]

	return ret;
    1f7a:	68fb      	ldr	r3, [r7, #12]
}
    1f7c:	4618      	mov	r0, r3
    1f7e:	3710      	adds	r7, #16
    1f80:	46bd      	mov	sp, r7
    1f82:	bd80      	pop	{r7, pc}
    1f84:	0000f2c8 	.word	0x0000f2c8
    1f88:	0000389d 	.word	0x0000389d
    1f8c:	00005c29 	.word	0x00005c29

00001f90 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    1f90:	b580      	push	{r7, lr}
    1f92:	b084      	sub	sp, #16
    1f94:	af00      	add	r7, sp, #0
    1f96:	6078      	str	r0, [r7, #4]
    1f98:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    1f9a:	687b      	ldr	r3, [r7, #4]
    1f9c:	2b00      	cmp	r3, #0
    1f9e:	d004      	beq.n	1faa <can_async_init+0x1a>
    1fa0:	683b      	ldr	r3, [r7, #0]
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d001      	beq.n	1faa <can_async_init+0x1a>
    1fa6:	2301      	movs	r3, #1
    1fa8:	e000      	b.n	1fac <can_async_init+0x1c>
    1faa:	2300      	movs	r3, #0
    1fac:	f003 0301 	and.w	r3, r3, #1
    1fb0:	b2db      	uxtb	r3, r3
    1fb2:	2241      	movs	r2, #65	; 0x41
    1fb4:	490e      	ldr	r1, [pc, #56]	; (1ff0 <can_async_init+0x60>)
    1fb6:	4618      	mov	r0, r3
    1fb8:	4b0e      	ldr	r3, [pc, #56]	; (1ff4 <can_async_init+0x64>)
    1fba:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    1fbc:	687b      	ldr	r3, [r7, #4]
    1fbe:	6839      	ldr	r1, [r7, #0]
    1fc0:	4618      	mov	r0, r3
    1fc2:	4b0d      	ldr	r3, [pc, #52]	; (1ff8 <can_async_init+0x68>)
    1fc4:	4798      	blx	r3
    1fc6:	60f8      	str	r0, [r7, #12]
	if (rc) {
    1fc8:	68fb      	ldr	r3, [r7, #12]
    1fca:	2b00      	cmp	r3, #0
    1fcc:	d001      	beq.n	1fd2 <can_async_init+0x42>
		return rc;
    1fce:	68fb      	ldr	r3, [r7, #12]
    1fd0:	e009      	b.n	1fe6 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    1fd2:	687b      	ldr	r3, [r7, #4]
    1fd4:	4a09      	ldr	r2, [pc, #36]	; (1ffc <can_async_init+0x6c>)
    1fd6:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1fd8:	687b      	ldr	r3, [r7, #4]
    1fda:	4a09      	ldr	r2, [pc, #36]	; (2000 <can_async_init+0x70>)
    1fdc:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1fde:	687b      	ldr	r3, [r7, #4]
    1fe0:	4a08      	ldr	r2, [pc, #32]	; (2004 <can_async_init+0x74>)
    1fe2:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1fe4:	2300      	movs	r3, #0
}
    1fe6:	4618      	mov	r0, r3
    1fe8:	3710      	adds	r7, #16
    1fea:	46bd      	mov	sp, r7
    1fec:	bd80      	pop	{r7, pc}
    1fee:	bf00      	nop
    1ff0:	0000f2e4 	.word	0x0000f2e4
    1ff4:	0000389d 	.word	0x0000389d
    1ff8:	00003df9 	.word	0x00003df9
    1ffc:	00002009 	.word	0x00002009
    2000:	0000202d 	.word	0x0000202d
    2004:	00002051 	.word	0x00002051

00002008 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    2008:	b580      	push	{r7, lr}
    200a:	b084      	sub	sp, #16
    200c:	af00      	add	r7, sp, #0
    200e:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2010:	687b      	ldr	r3, [r7, #4]
    2012:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    2014:	68fb      	ldr	r3, [r7, #12]
    2016:	69db      	ldr	r3, [r3, #28]
    2018:	2b00      	cmp	r3, #0
    201a:	d003      	beq.n	2024 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    201c:	68fb      	ldr	r3, [r7, #12]
    201e:	69db      	ldr	r3, [r3, #28]
    2020:	68f8      	ldr	r0, [r7, #12]
    2022:	4798      	blx	r3
	}
}
    2024:	bf00      	nop
    2026:	3710      	adds	r7, #16
    2028:	46bd      	mov	sp, r7
    202a:	bd80      	pop	{r7, pc}

0000202c <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    202c:	b580      	push	{r7, lr}
    202e:	b084      	sub	sp, #16
    2030:	af00      	add	r7, sp, #0
    2032:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2034:	687b      	ldr	r3, [r7, #4]
    2036:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    2038:	68fb      	ldr	r3, [r7, #12]
    203a:	6a1b      	ldr	r3, [r3, #32]
    203c:	2b00      	cmp	r3, #0
    203e:	d003      	beq.n	2048 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    2040:	68fb      	ldr	r3, [r7, #12]
    2042:	6a1b      	ldr	r3, [r3, #32]
    2044:	68f8      	ldr	r0, [r7, #12]
    2046:	4798      	blx	r3
	}
}
    2048:	bf00      	nop
    204a:	3710      	adds	r7, #16
    204c:	46bd      	mov	sp, r7
    204e:	bd80      	pop	{r7, pc}

00002050 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    2050:	b580      	push	{r7, lr}
    2052:	b084      	sub	sp, #16
    2054:	af00      	add	r7, sp, #0
    2056:	6078      	str	r0, [r7, #4]
    2058:	460b      	mov	r3, r1
    205a:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    205c:	687b      	ldr	r3, [r7, #4]
    205e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    2060:	68fb      	ldr	r3, [r7, #12]
    2062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2064:	2b00      	cmp	r3, #0
    2066:	d005      	beq.n	2074 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    2068:	68fb      	ldr	r3, [r7, #12]
    206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    206c:	78fa      	ldrb	r2, [r7, #3]
    206e:	4611      	mov	r1, r2
    2070:	68f8      	ldr	r0, [r7, #12]
    2072:	4798      	blx	r3
	}
}
    2074:	bf00      	nop
    2076:	3710      	adds	r7, #16
    2078:	46bd      	mov	sp, r7
    207a:	bd80      	pop	{r7, pc}

0000207c <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    207c:	b580      	push	{r7, lr}
    207e:	b082      	sub	sp, #8
    2080:	af00      	add	r7, sp, #0
    2082:	6078      	str	r0, [r7, #4]
    2084:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    2086:	687b      	ldr	r3, [r7, #4]
    2088:	2b00      	cmp	r3, #0
    208a:	d004      	beq.n	2096 <crc_sync_init+0x1a>
    208c:	683b      	ldr	r3, [r7, #0]
    208e:	2b00      	cmp	r3, #0
    2090:	d001      	beq.n	2096 <crc_sync_init+0x1a>
    2092:	2301      	movs	r3, #1
    2094:	e000      	b.n	2098 <crc_sync_init+0x1c>
    2096:	2300      	movs	r3, #0
    2098:	f003 0301 	and.w	r3, r3, #1
    209c:	b2db      	uxtb	r3, r3
    209e:	222b      	movs	r2, #43	; 0x2b
    20a0:	4906      	ldr	r1, [pc, #24]	; (20bc <crc_sync_init+0x40>)
    20a2:	4618      	mov	r0, r3
    20a4:	4b06      	ldr	r3, [pc, #24]	; (20c0 <crc_sync_init+0x44>)
    20a6:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    20a8:	687b      	ldr	r3, [r7, #4]
    20aa:	6839      	ldr	r1, [r7, #0]
    20ac:	4618      	mov	r0, r3
    20ae:	4b05      	ldr	r3, [pc, #20]	; (20c4 <crc_sync_init+0x48>)
    20b0:	4798      	blx	r3
    20b2:	4603      	mov	r3, r0
}
    20b4:	4618      	mov	r0, r3
    20b6:	3708      	adds	r7, #8
    20b8:	46bd      	mov	sp, r7
    20ba:	bd80      	pop	{r7, pc}
    20bc:	0000f300 	.word	0x0000f300
    20c0:	0000389d 	.word	0x0000389d
    20c4:	00004501 	.word	0x00004501

000020c8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    20c8:	b590      	push	{r4, r7, lr}
    20ca:	b083      	sub	sp, #12
    20cc:	af00      	add	r7, sp, #0
    20ce:	4603      	mov	r3, r0
    20d0:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    20d2:	4b07      	ldr	r3, [pc, #28]	; (20f0 <delay_us+0x28>)
    20d4:	681c      	ldr	r4, [r3, #0]
    20d6:	88fb      	ldrh	r3, [r7, #6]
    20d8:	4618      	mov	r0, r3
    20da:	4b06      	ldr	r3, [pc, #24]	; (20f4 <delay_us+0x2c>)
    20dc:	4798      	blx	r3
    20de:	4603      	mov	r3, r0
    20e0:	4619      	mov	r1, r3
    20e2:	4620      	mov	r0, r4
    20e4:	4b04      	ldr	r3, [pc, #16]	; (20f8 <delay_us+0x30>)
    20e6:	4798      	blx	r3
}
    20e8:	bf00      	nop
    20ea:	370c      	adds	r7, #12
    20ec:	46bd      	mov	sp, r7
    20ee:	bd90      	pop	{r4, r7, pc}
    20f0:	20000818 	.word	0x20000818
    20f4:	00004251 	.word	0x00004251
    20f8:	000043e9 	.word	0x000043e9

000020fc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    20fc:	b590      	push	{r4, r7, lr}
    20fe:	b083      	sub	sp, #12
    2100:	af00      	add	r7, sp, #0
    2102:	4603      	mov	r3, r0
    2104:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2106:	4b07      	ldr	r3, [pc, #28]	; (2124 <delay_ms+0x28>)
    2108:	681c      	ldr	r4, [r3, #0]
    210a:	88fb      	ldrh	r3, [r7, #6]
    210c:	4618      	mov	r0, r3
    210e:	4b06      	ldr	r3, [pc, #24]	; (2128 <delay_ms+0x2c>)
    2110:	4798      	blx	r3
    2112:	4603      	mov	r3, r0
    2114:	4619      	mov	r1, r3
    2116:	4620      	mov	r0, r4
    2118:	4b04      	ldr	r3, [pc, #16]	; (212c <delay_ms+0x30>)
    211a:	4798      	blx	r3
}
    211c:	bf00      	nop
    211e:	370c      	adds	r7, #12
    2120:	46bd      	mov	sp, r7
    2122:	bd90      	pop	{r4, r7, pc}
    2124:	20000818 	.word	0x20000818
    2128:	000043bd 	.word	0x000043bd
    212c:	000043e9 	.word	0x000043e9

00002130 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2130:	b580      	push	{r7, lr}
    2132:	af00      	add	r7, sp, #0
	return _event_system_init();
    2134:	4b02      	ldr	r3, [pc, #8]	; (2140 <event_system_init+0x10>)
    2136:	4798      	blx	r3
    2138:	4603      	mov	r3, r0
}
    213a:	4618      	mov	r0, r3
    213c:	bd80      	pop	{r7, pc}
    213e:	bf00      	nop
    2140:	00004c9d 	.word	0x00004c9d

00002144 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    2144:	b580      	push	{r7, lr}
    2146:	b082      	sub	sp, #8
    2148:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    214a:	2300      	movs	r3, #0
    214c:	80fb      	strh	r3, [r7, #6]
    214e:	e00e      	b.n	216e <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    2150:	88fb      	ldrh	r3, [r7, #6]
    2152:	4a0c      	ldr	r2, [pc, #48]	; (2184 <ext_irq_init+0x40>)
    2154:	00db      	lsls	r3, r3, #3
    2156:	4413      	add	r3, r2
    2158:	f04f 32ff 	mov.w	r2, #4294967295
    215c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    215e:	88fb      	ldrh	r3, [r7, #6]
    2160:	4a08      	ldr	r2, [pc, #32]	; (2184 <ext_irq_init+0x40>)
    2162:	2100      	movs	r1, #0
    2164:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2168:	88fb      	ldrh	r3, [r7, #6]
    216a:	3301      	adds	r3, #1
    216c:	80fb      	strh	r3, [r7, #6]
    216e:	88fb      	ldrh	r3, [r7, #6]
    2170:	2b07      	cmp	r3, #7
    2172:	d9ed      	bls.n	2150 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    2174:	4804      	ldr	r0, [pc, #16]	; (2188 <ext_irq_init+0x44>)
    2176:	4b05      	ldr	r3, [pc, #20]	; (218c <ext_irq_init+0x48>)
    2178:	4798      	blx	r3
    217a:	4603      	mov	r3, r0
}
    217c:	4618      	mov	r0, r3
    217e:	3708      	adds	r7, #8
    2180:	46bd      	mov	sp, r7
    2182:	bd80      	pop	{r7, pc}
    2184:	2000081c 	.word	0x2000081c
    2188:	000022e9 	.word	0x000022e9
    218c:	00004841 	.word	0x00004841

00002190 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    2190:	b580      	push	{r7, lr}
    2192:	b086      	sub	sp, #24
    2194:	af00      	add	r7, sp, #0
    2196:	6078      	str	r0, [r7, #4]
    2198:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    219a:	2300      	movs	r3, #0
    219c:	75fb      	strb	r3, [r7, #23]
    219e:	2300      	movs	r3, #0
    21a0:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    21a2:	2300      	movs	r3, #0
    21a4:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    21a6:	e012      	b.n	21ce <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    21a8:	7dfb      	ldrb	r3, [r7, #23]
    21aa:	4a4d      	ldr	r2, [pc, #308]	; (22e0 <ext_irq_register+0x150>)
    21ac:	00db      	lsls	r3, r3, #3
    21ae:	4413      	add	r3, r2
    21b0:	685a      	ldr	r2, [r3, #4]
    21b2:	687b      	ldr	r3, [r7, #4]
    21b4:	429a      	cmp	r2, r3
    21b6:	d107      	bne.n	21c8 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    21b8:	7dfb      	ldrb	r3, [r7, #23]
    21ba:	4949      	ldr	r1, [pc, #292]	; (22e0 <ext_irq_register+0x150>)
    21bc:	683a      	ldr	r2, [r7, #0]
    21be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    21c2:	2301      	movs	r3, #1
    21c4:	757b      	strb	r3, [r7, #21]
			break;
    21c6:	e005      	b.n	21d4 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    21c8:	7dfb      	ldrb	r3, [r7, #23]
    21ca:	3301      	adds	r3, #1
    21cc:	75fb      	strb	r3, [r7, #23]
    21ce:	7dfb      	ldrb	r3, [r7, #23]
    21d0:	2b07      	cmp	r3, #7
    21d2:	d9e9      	bls.n	21a8 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    21d4:	683b      	ldr	r3, [r7, #0]
    21d6:	2b00      	cmp	r3, #0
    21d8:	d10e      	bne.n	21f8 <ext_irq_register+0x68>
		if (!found) {
    21da:	7d7b      	ldrb	r3, [r7, #21]
    21dc:	f083 0301 	eor.w	r3, r3, #1
    21e0:	b2db      	uxtb	r3, r3
    21e2:	2b00      	cmp	r3, #0
    21e4:	d002      	beq.n	21ec <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    21e6:	f06f 030c 	mvn.w	r3, #12
    21ea:	e074      	b.n	22d6 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    21ec:	2100      	movs	r1, #0
    21ee:	6878      	ldr	r0, [r7, #4]
    21f0:	4b3c      	ldr	r3, [pc, #240]	; (22e4 <ext_irq_register+0x154>)
    21f2:	4798      	blx	r3
    21f4:	4603      	mov	r3, r0
    21f6:	e06e      	b.n	22d6 <ext_irq_register+0x146>
	}

	if (!found) {
    21f8:	7d7b      	ldrb	r3, [r7, #21]
    21fa:	f083 0301 	eor.w	r3, r3, #1
    21fe:	b2db      	uxtb	r3, r3
    2200:	2b00      	cmp	r3, #0
    2202:	d05a      	beq.n	22ba <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2204:	2300      	movs	r3, #0
    2206:	75fb      	strb	r3, [r7, #23]
    2208:	e016      	b.n	2238 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    220a:	7dfb      	ldrb	r3, [r7, #23]
    220c:	4a34      	ldr	r2, [pc, #208]	; (22e0 <ext_irq_register+0x150>)
    220e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2212:	2b00      	cmp	r3, #0
    2214:	d10d      	bne.n	2232 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    2216:	7dfb      	ldrb	r3, [r7, #23]
    2218:	4931      	ldr	r1, [pc, #196]	; (22e0 <ext_irq_register+0x150>)
    221a:	683a      	ldr	r2, [r7, #0]
    221c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    2220:	7dfb      	ldrb	r3, [r7, #23]
    2222:	4a2f      	ldr	r2, [pc, #188]	; (22e0 <ext_irq_register+0x150>)
    2224:	00db      	lsls	r3, r3, #3
    2226:	4413      	add	r3, r2
    2228:	687a      	ldr	r2, [r7, #4]
    222a:	605a      	str	r2, [r3, #4]
				found           = true;
    222c:	2301      	movs	r3, #1
    222e:	757b      	strb	r3, [r7, #21]
				break;
    2230:	e005      	b.n	223e <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2232:	7dfb      	ldrb	r3, [r7, #23]
    2234:	3301      	adds	r3, #1
    2236:	75fb      	strb	r3, [r7, #23]
    2238:	7dfb      	ldrb	r3, [r7, #23]
    223a:	2b07      	cmp	r3, #7
    223c:	d9e5      	bls.n	220a <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    223e:	e036      	b.n	22ae <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    2240:	7dfb      	ldrb	r3, [r7, #23]
    2242:	4a27      	ldr	r2, [pc, #156]	; (22e0 <ext_irq_register+0x150>)
    2244:	00db      	lsls	r3, r3, #3
    2246:	4413      	add	r3, r2
    2248:	685a      	ldr	r2, [r3, #4]
    224a:	7dbb      	ldrb	r3, [r7, #22]
    224c:	4924      	ldr	r1, [pc, #144]	; (22e0 <ext_irq_register+0x150>)
    224e:	00db      	lsls	r3, r3, #3
    2250:	440b      	add	r3, r1
    2252:	685b      	ldr	r3, [r3, #4]
    2254:	429a      	cmp	r2, r3
    2256:	d227      	bcs.n	22a8 <ext_irq_register+0x118>
    2258:	7dbb      	ldrb	r3, [r7, #22]
    225a:	4a21      	ldr	r2, [pc, #132]	; (22e0 <ext_irq_register+0x150>)
    225c:	00db      	lsls	r3, r3, #3
    225e:	4413      	add	r3, r2
    2260:	685b      	ldr	r3, [r3, #4]
    2262:	f1b3 3fff 	cmp.w	r3, #4294967295
    2266:	d01f      	beq.n	22a8 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    2268:	7dbb      	ldrb	r3, [r7, #22]
    226a:	491d      	ldr	r1, [pc, #116]	; (22e0 <ext_irq_register+0x150>)
    226c:	f107 020c 	add.w	r2, r7, #12
    2270:	00db      	lsls	r3, r3, #3
    2272:	440b      	add	r3, r1
    2274:	e893 0003 	ldmia.w	r3, {r0, r1}
    2278:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    227c:	7dbb      	ldrb	r3, [r7, #22]
    227e:	7dfa      	ldrb	r2, [r7, #23]
    2280:	4817      	ldr	r0, [pc, #92]	; (22e0 <ext_irq_register+0x150>)
    2282:	4917      	ldr	r1, [pc, #92]	; (22e0 <ext_irq_register+0x150>)
    2284:	00db      	lsls	r3, r3, #3
    2286:	4403      	add	r3, r0
    2288:	00d2      	lsls	r2, r2, #3
    228a:	440a      	add	r2, r1
    228c:	e892 0003 	ldmia.w	r2, {r0, r1}
    2290:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    2294:	7dfb      	ldrb	r3, [r7, #23]
    2296:	4a12      	ldr	r2, [pc, #72]	; (22e0 <ext_irq_register+0x150>)
    2298:	00db      	lsls	r3, r3, #3
    229a:	4413      	add	r3, r2
    229c:	f107 020c 	add.w	r2, r7, #12
    22a0:	e892 0003 	ldmia.w	r2, {r0, r1}
    22a4:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    22a8:	7dbb      	ldrb	r3, [r7, #22]
    22aa:	3301      	adds	r3, #1
    22ac:	75bb      	strb	r3, [r7, #22]
    22ae:	7dbb      	ldrb	r3, [r7, #22]
    22b0:	2b07      	cmp	r3, #7
    22b2:	d802      	bhi.n	22ba <ext_irq_register+0x12a>
    22b4:	7dfb      	ldrb	r3, [r7, #23]
    22b6:	2b07      	cmp	r3, #7
    22b8:	d9c2      	bls.n	2240 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    22ba:	7d7b      	ldrb	r3, [r7, #21]
    22bc:	f083 0301 	eor.w	r3, r3, #1
    22c0:	b2db      	uxtb	r3, r3
    22c2:	2b00      	cmp	r3, #0
    22c4:	d002      	beq.n	22cc <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    22c6:	f06f 030c 	mvn.w	r3, #12
    22ca:	e004      	b.n	22d6 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    22cc:	2101      	movs	r1, #1
    22ce:	6878      	ldr	r0, [r7, #4]
    22d0:	4b04      	ldr	r3, [pc, #16]	; (22e4 <ext_irq_register+0x154>)
    22d2:	4798      	blx	r3
    22d4:	4603      	mov	r3, r0
}
    22d6:	4618      	mov	r0, r3
    22d8:	3718      	adds	r7, #24
    22da:	46bd      	mov	sp, r7
    22dc:	bd80      	pop	{r7, pc}
    22de:	bf00      	nop
    22e0:	2000081c 	.word	0x2000081c
    22e4:	000049c5 	.word	0x000049c5

000022e8 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    22e8:	b580      	push	{r7, lr}
    22ea:	b084      	sub	sp, #16
    22ec:	af00      	add	r7, sp, #0
    22ee:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    22f0:	2300      	movs	r3, #0
    22f2:	73fb      	strb	r3, [r7, #15]
    22f4:	2308      	movs	r3, #8
    22f6:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    22f8:	e02a      	b.n	2350 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    22fa:	7bba      	ldrb	r2, [r7, #14]
    22fc:	7bfb      	ldrb	r3, [r7, #15]
    22fe:	4413      	add	r3, r2
    2300:	105b      	asrs	r3, r3, #1
    2302:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    2304:	7b7b      	ldrb	r3, [r7, #13]
    2306:	2b07      	cmp	r3, #7
    2308:	d827      	bhi.n	235a <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    230a:	7b7b      	ldrb	r3, [r7, #13]
    230c:	4a16      	ldr	r2, [pc, #88]	; (2368 <process_ext_irq+0x80>)
    230e:	00db      	lsls	r3, r3, #3
    2310:	4413      	add	r3, r2
    2312:	685a      	ldr	r2, [r3, #4]
    2314:	687b      	ldr	r3, [r7, #4]
    2316:	429a      	cmp	r2, r3
    2318:	d10b      	bne.n	2332 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    231a:	7b7b      	ldrb	r3, [r7, #13]
    231c:	4a12      	ldr	r2, [pc, #72]	; (2368 <process_ext_irq+0x80>)
    231e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2322:	2b00      	cmp	r3, #0
    2324:	d01b      	beq.n	235e <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    2326:	7b7b      	ldrb	r3, [r7, #13]
    2328:	4a0f      	ldr	r2, [pc, #60]	; (2368 <process_ext_irq+0x80>)
    232a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    232e:	4798      	blx	r3
			}
			return;
    2330:	e015      	b.n	235e <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    2332:	7b7b      	ldrb	r3, [r7, #13]
    2334:	4a0c      	ldr	r2, [pc, #48]	; (2368 <process_ext_irq+0x80>)
    2336:	00db      	lsls	r3, r3, #3
    2338:	4413      	add	r3, r2
    233a:	685a      	ldr	r2, [r3, #4]
    233c:	687b      	ldr	r3, [r7, #4]
    233e:	429a      	cmp	r2, r3
    2340:	d203      	bcs.n	234a <process_ext_irq+0x62>
			lower = middle + 1;
    2342:	7b7b      	ldrb	r3, [r7, #13]
    2344:	3301      	adds	r3, #1
    2346:	73fb      	strb	r3, [r7, #15]
    2348:	e002      	b.n	2350 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    234a:	7b7b      	ldrb	r3, [r7, #13]
    234c:	3b01      	subs	r3, #1
    234e:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    2350:	7bba      	ldrb	r2, [r7, #14]
    2352:	7bfb      	ldrb	r3, [r7, #15]
    2354:	429a      	cmp	r2, r3
    2356:	d2d0      	bcs.n	22fa <process_ext_irq+0x12>
    2358:	e002      	b.n	2360 <process_ext_irq+0x78>
			return;
    235a:	bf00      	nop
    235c:	e000      	b.n	2360 <process_ext_irq+0x78>
			return;
    235e:	bf00      	nop
		}
	}
}
    2360:	3710      	adds	r7, #16
    2362:	46bd      	mov	sp, r7
    2364:	bd80      	pop	{r7, pc}
    2366:	bf00      	nop
    2368:	2000081c 	.word	0x2000081c

0000236c <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    236c:	b580      	push	{r7, lr}
    236e:	b084      	sub	sp, #16
    2370:	af00      	add	r7, sp, #0
    2372:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    2374:	687b      	ldr	r3, [r7, #4]
    2376:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    2378:	687b      	ldr	r3, [r7, #4]
    237a:	885b      	ldrh	r3, [r3, #2]
    237c:	b29b      	uxth	r3, r3
    237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2382:	2b00      	cmp	r3, #0
    2384:	d107      	bne.n	2396 <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    2386:	68fb      	ldr	r3, [r7, #12]
    2388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    238a:	2b00      	cmp	r3, #0
    238c:	d003      	beq.n	2396 <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    238e:	68fb      	ldr	r3, [r7, #12]
    2390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2392:	68f8      	ldr	r0, [r7, #12]
    2394:	4798      	blx	r3
		}
	}
}
    2396:	bf00      	nop
    2398:	3710      	adds	r7, #16
    239a:	46bd      	mov	sp, r7
    239c:	bd80      	pop	{r7, pc}

0000239e <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    239e:	b580      	push	{r7, lr}
    23a0:	b084      	sub	sp, #16
    23a2:	af00      	add	r7, sp, #0
    23a4:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    23a6:	687b      	ldr	r3, [r7, #4]
    23a8:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    23aa:	687b      	ldr	r3, [r7, #4]
    23ac:	885b      	ldrh	r3, [r3, #2]
    23ae:	b29b      	uxth	r3, r3
    23b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    23b4:	2b00      	cmp	r3, #0
    23b6:	d107      	bne.n	23c8 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    23b8:	68fb      	ldr	r3, [r7, #12]
    23ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    23bc:	2b00      	cmp	r3, #0
    23be:	d003      	beq.n	23c8 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    23c0:	68fb      	ldr	r3, [r7, #12]
    23c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    23c4:	68f8      	ldr	r0, [r7, #12]
    23c6:	4798      	blx	r3
		}
	}
}
    23c8:	bf00      	nop
    23ca:	3710      	adds	r7, #16
    23cc:	46bd      	mov	sp, r7
    23ce:	bd80      	pop	{r7, pc}

000023d0 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    23d0:	b580      	push	{r7, lr}
    23d2:	b084      	sub	sp, #16
    23d4:	af00      	add	r7, sp, #0
    23d6:	6078      	str	r0, [r7, #4]
    23d8:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    23da:	687b      	ldr	r3, [r7, #4]
    23dc:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    23de:	687b      	ldr	r3, [r7, #4]
    23e0:	885b      	ldrh	r3, [r3, #2]
    23e2:	b29b      	uxth	r3, r3
    23e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    23e8:	2b00      	cmp	r3, #0
    23ea:	d108      	bne.n	23fe <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    23ec:	68fb      	ldr	r3, [r7, #12]
    23ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    23f0:	2b00      	cmp	r3, #0
    23f2:	d004      	beq.n	23fe <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    23f4:	68fb      	ldr	r3, [r7, #12]
    23f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    23f8:	6839      	ldr	r1, [r7, #0]
    23fa:	68f8      	ldr	r0, [r7, #12]
    23fc:	4798      	blx	r3
		}
	}
}
    23fe:	bf00      	nop
    2400:	3710      	adds	r7, #16
    2402:	46bd      	mov	sp, r7
    2404:	bd80      	pop	{r7, pc}
	...

00002408 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    2408:	b580      	push	{r7, lr}
    240a:	b08a      	sub	sp, #40	; 0x28
    240c:	af00      	add	r7, sp, #0
    240e:	60f8      	str	r0, [r7, #12]
    2410:	60b9      	str	r1, [r7, #8]
    2412:	4613      	mov	r3, r2
    2414:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    2416:	68fb      	ldr	r3, [r7, #12]
    2418:	3b28      	subs	r3, #40	; 0x28
    241a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    241e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    2420:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2422:	88fb      	ldrh	r3, [r7, #6]
    2424:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    2426:	f248 0301 	movw	r3, #32769	; 0x8001
    242a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    242c:	68bb      	ldr	r3, [r7, #8]
    242e:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    2430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2432:	f107 0214 	add.w	r2, r7, #20
    2436:	4611      	mov	r1, r2
    2438:	4618      	mov	r0, r3
    243a:	4b06      	ldr	r3, [pc, #24]	; (2454 <i2c_m_async_read+0x4c>)
    243c:	4798      	blx	r3
    243e:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    2440:	6a3b      	ldr	r3, [r7, #32]
    2442:	2b00      	cmp	r3, #0
    2444:	d001      	beq.n	244a <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    2446:	6a3b      	ldr	r3, [r7, #32]
    2448:	e000      	b.n	244c <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    244a:	88fb      	ldrh	r3, [r7, #6]
}
    244c:	4618      	mov	r0, r3
    244e:	3728      	adds	r7, #40	; 0x28
    2450:	46bd      	mov	sp, r7
    2452:	bd80      	pop	{r7, pc}
    2454:	00006a61 	.word	0x00006a61

00002458 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    2458:	b580      	push	{r7, lr}
    245a:	b08a      	sub	sp, #40	; 0x28
    245c:	af00      	add	r7, sp, #0
    245e:	60f8      	str	r0, [r7, #12]
    2460:	60b9      	str	r1, [r7, #8]
    2462:	4613      	mov	r3, r2
    2464:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    2466:	68fb      	ldr	r3, [r7, #12]
    2468:	3b28      	subs	r3, #40	; 0x28
    246a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    246e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    2470:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2472:	88fb      	ldrh	r3, [r7, #6]
    2474:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    2476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    247a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    247c:	68bb      	ldr	r3, [r7, #8]
    247e:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    2480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2482:	f107 0214 	add.w	r2, r7, #20
    2486:	4611      	mov	r1, r2
    2488:	4618      	mov	r0, r3
    248a:	4b06      	ldr	r3, [pc, #24]	; (24a4 <i2c_m_async_write+0x4c>)
    248c:	4798      	blx	r3
    248e:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    2490:	6a3b      	ldr	r3, [r7, #32]
    2492:	2b00      	cmp	r3, #0
    2494:	d001      	beq.n	249a <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    2496:	6a3b      	ldr	r3, [r7, #32]
    2498:	e000      	b.n	249c <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    249a:	88fb      	ldrh	r3, [r7, #6]
}
    249c:	4618      	mov	r0, r3
    249e:	3728      	adds	r7, #40	; 0x28
    24a0:	46bd      	mov	sp, r7
    24a2:	bd80      	pop	{r7, pc}
    24a4:	00006a61 	.word	0x00006a61

000024a8 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    24a8:	b580      	push	{r7, lr}
    24aa:	b084      	sub	sp, #16
    24ac:	af00      	add	r7, sp, #0
    24ae:	6078      	str	r0, [r7, #4]
    24b0:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    24b2:	687b      	ldr	r3, [r7, #4]
    24b4:	2b00      	cmp	r3, #0
    24b6:	bf14      	ite	ne
    24b8:	2301      	movne	r3, #1
    24ba:	2300      	moveq	r3, #0
    24bc:	b2db      	uxtb	r3, r3
    24be:	2289      	movs	r2, #137	; 0x89
    24c0:	4915      	ldr	r1, [pc, #84]	; (2518 <i2c_m_async_init+0x70>)
    24c2:	4618      	mov	r0, r3
    24c4:	4b15      	ldr	r3, [pc, #84]	; (251c <i2c_m_async_init+0x74>)
    24c6:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    24c8:	687b      	ldr	r3, [r7, #4]
    24ca:	6839      	ldr	r1, [r7, #0]
    24cc:	4618      	mov	r0, r3
    24ce:	4b14      	ldr	r3, [pc, #80]	; (2520 <i2c_m_async_init+0x78>)
    24d0:	4798      	blx	r3
    24d2:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    24d4:	68fb      	ldr	r3, [r7, #12]
    24d6:	2b00      	cmp	r3, #0
    24d8:	d001      	beq.n	24de <i2c_m_async_init+0x36>
		return init_status;
    24da:	68fb      	ldr	r3, [r7, #12]
    24dc:	e018      	b.n	2510 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    24de:	687b      	ldr	r3, [r7, #4]
    24e0:	4a10      	ldr	r2, [pc, #64]	; (2524 <i2c_m_async_init+0x7c>)
    24e2:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    24e4:	687b      	ldr	r3, [r7, #4]
    24e6:	4a10      	ldr	r2, [pc, #64]	; (2528 <i2c_m_async_init+0x80>)
    24e8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    24ea:	687b      	ldr	r3, [r7, #4]
    24ec:	4a0f      	ldr	r2, [pc, #60]	; (252c <i2c_m_async_init+0x84>)
    24ee:	2101      	movs	r1, #1
    24f0:	4618      	mov	r0, r3
    24f2:	4b0f      	ldr	r3, [pc, #60]	; (2530 <i2c_m_async_init+0x88>)
    24f4:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    24f6:	687b      	ldr	r3, [r7, #4]
    24f8:	4a0e      	ldr	r2, [pc, #56]	; (2534 <i2c_m_async_init+0x8c>)
    24fa:	2102      	movs	r1, #2
    24fc:	4618      	mov	r0, r3
    24fe:	4b0c      	ldr	r3, [pc, #48]	; (2530 <i2c_m_async_init+0x88>)
    2500:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    2502:	687b      	ldr	r3, [r7, #4]
    2504:	4a0c      	ldr	r2, [pc, #48]	; (2538 <i2c_m_async_init+0x90>)
    2506:	2100      	movs	r1, #0
    2508:	4618      	mov	r0, r3
    250a:	4b09      	ldr	r3, [pc, #36]	; (2530 <i2c_m_async_init+0x88>)
    250c:	4798      	blx	r3

	return ERR_NONE;
    250e:	2300      	movs	r3, #0
}
    2510:	4618      	mov	r0, r3
    2512:	3710      	adds	r7, #16
    2514:	46bd      	mov	sp, r7
    2516:	bd80      	pop	{r7, pc}
    2518:	0000f31c 	.word	0x0000f31c
    251c:	0000389d 	.word	0x0000389d
    2520:	000068b1 	.word	0x000068b1
    2524:	00002409 	.word	0x00002409
    2528:	00002459 	.word	0x00002459
    252c:	0000236d 	.word	0x0000236d
    2530:	00006b35 	.word	0x00006b35
    2534:	0000239f 	.word	0x0000239f
    2538:	000023d1 	.word	0x000023d1

0000253c <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    253c:	b580      	push	{r7, lr}
    253e:	b08a      	sub	sp, #40	; 0x28
    2540:	af00      	add	r7, sp, #0
    2542:	60f8      	str	r0, [r7, #12]
    2544:	60b9      	str	r1, [r7, #8]
    2546:	4613      	mov	r3, r2
    2548:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    254a:	68fb      	ldr	r3, [r7, #12]
    254c:	3b14      	subs	r3, #20
    254e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2552:	8b9b      	ldrh	r3, [r3, #28]
    2554:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2556:	88fb      	ldrh	r3, [r7, #6]
    2558:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    255a:	f248 0301 	movw	r3, #32769	; 0x8001
    255e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2560:	68bb      	ldr	r3, [r7, #8]
    2562:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2566:	f107 0214 	add.w	r2, r7, #20
    256a:	4611      	mov	r1, r2
    256c:	4618      	mov	r0, r3
    256e:	4b06      	ldr	r3, [pc, #24]	; (2588 <i2c_m_sync_read+0x4c>)
    2570:	4798      	blx	r3
    2572:	6238      	str	r0, [r7, #32]

	if (ret) {
    2574:	6a3b      	ldr	r3, [r7, #32]
    2576:	2b00      	cmp	r3, #0
    2578:	d001      	beq.n	257e <i2c_m_sync_read+0x42>
		return ret;
    257a:	6a3b      	ldr	r3, [r7, #32]
    257c:	e000      	b.n	2580 <i2c_m_sync_read+0x44>
	}

	return n;
    257e:	88fb      	ldrh	r3, [r7, #6]
}
    2580:	4618      	mov	r0, r3
    2582:	3728      	adds	r7, #40	; 0x28
    2584:	46bd      	mov	sp, r7
    2586:	bd80      	pop	{r7, pc}
    2588:	00006d7d 	.word	0x00006d7d

0000258c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    258c:	b580      	push	{r7, lr}
    258e:	b08a      	sub	sp, #40	; 0x28
    2590:	af00      	add	r7, sp, #0
    2592:	60f8      	str	r0, [r7, #12]
    2594:	60b9      	str	r1, [r7, #8]
    2596:	4613      	mov	r3, r2
    2598:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    259a:	68fb      	ldr	r3, [r7, #12]
    259c:	3b14      	subs	r3, #20
    259e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    25a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    25a2:	8b9b      	ldrh	r3, [r3, #28]
    25a4:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    25a6:	88fb      	ldrh	r3, [r7, #6]
    25a8:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    25aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    25ae:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    25b0:	68bb      	ldr	r3, [r7, #8]
    25b2:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    25b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    25b6:	f107 0214 	add.w	r2, r7, #20
    25ba:	4611      	mov	r1, r2
    25bc:	4618      	mov	r0, r3
    25be:	4b06      	ldr	r3, [pc, #24]	; (25d8 <i2c_m_sync_write+0x4c>)
    25c0:	4798      	blx	r3
    25c2:	6238      	str	r0, [r7, #32]

	if (ret) {
    25c4:	6a3b      	ldr	r3, [r7, #32]
    25c6:	2b00      	cmp	r3, #0
    25c8:	d001      	beq.n	25ce <i2c_m_sync_write+0x42>
		return ret;
    25ca:	6a3b      	ldr	r3, [r7, #32]
    25cc:	e000      	b.n	25d0 <i2c_m_sync_write+0x44>
	}

	return n;
    25ce:	88fb      	ldrh	r3, [r7, #6]
}
    25d0:	4618      	mov	r0, r3
    25d2:	3728      	adds	r7, #40	; 0x28
    25d4:	46bd      	mov	sp, r7
    25d6:	bd80      	pop	{r7, pc}
    25d8:	00006d7d 	.word	0x00006d7d

000025dc <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    25dc:	b580      	push	{r7, lr}
    25de:	b084      	sub	sp, #16
    25e0:	af00      	add	r7, sp, #0
    25e2:	6078      	str	r0, [r7, #4]
    25e4:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    25e6:	687b      	ldr	r3, [r7, #4]
    25e8:	2b00      	cmp	r3, #0
    25ea:	bf14      	ite	ne
    25ec:	2301      	movne	r3, #1
    25ee:	2300      	moveq	r3, #0
    25f0:	b2db      	uxtb	r3, r3
    25f2:	225e      	movs	r2, #94	; 0x5e
    25f4:	490c      	ldr	r1, [pc, #48]	; (2628 <i2c_m_sync_init+0x4c>)
    25f6:	4618      	mov	r0, r3
    25f8:	4b0c      	ldr	r3, [pc, #48]	; (262c <i2c_m_sync_init+0x50>)
    25fa:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    25fc:	687b      	ldr	r3, [r7, #4]
    25fe:	6839      	ldr	r1, [r7, #0]
    2600:	4618      	mov	r0, r3
    2602:	4b0b      	ldr	r3, [pc, #44]	; (2630 <i2c_m_sync_init+0x54>)
    2604:	4798      	blx	r3
    2606:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2608:	68fb      	ldr	r3, [r7, #12]
    260a:	2b00      	cmp	r3, #0
    260c:	d001      	beq.n	2612 <i2c_m_sync_init+0x36>
		return init_status;
    260e:	68fb      	ldr	r3, [r7, #12]
    2610:	e006      	b.n	2620 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    2612:	687b      	ldr	r3, [r7, #4]
    2614:	4a07      	ldr	r2, [pc, #28]	; (2634 <i2c_m_sync_init+0x58>)
    2616:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    2618:	687b      	ldr	r3, [r7, #4]
    261a:	4a07      	ldr	r2, [pc, #28]	; (2638 <i2c_m_sync_init+0x5c>)
    261c:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    261e:	2300      	movs	r3, #0
}
    2620:	4618      	mov	r0, r3
    2622:	3710      	adds	r7, #16
    2624:	46bd      	mov	sp, r7
    2626:	bd80      	pop	{r7, pc}
    2628:	0000f33c 	.word	0x0000f33c
    262c:	0000389d 	.word	0x0000389d
    2630:	00006b79 	.word	0x00006b79
    2634:	0000253d 	.word	0x0000253d
    2638:	0000258d 	.word	0x0000258d

0000263c <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    263c:	b580      	push	{r7, lr}
    263e:	b082      	sub	sp, #8
    2640:	af00      	add	r7, sp, #0
    2642:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    2644:	687b      	ldr	r3, [r7, #4]
    2646:	4618      	mov	r0, r3
    2648:	4b03      	ldr	r3, [pc, #12]	; (2658 <i2c_m_sync_enable+0x1c>)
    264a:	4798      	blx	r3
    264c:	4603      	mov	r3, r0
}
    264e:	4618      	mov	r0, r3
    2650:	3708      	adds	r7, #8
    2652:	46bd      	mov	sp, r7
    2654:	bd80      	pop	{r7, pc}
    2656:	bf00      	nop
    2658:	00006bc1 	.word	0x00006bc1

0000265c <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    265c:	b480      	push	{r7}
    265e:	b085      	sub	sp, #20
    2660:	af00      	add	r7, sp, #0
    2662:	60f8      	str	r0, [r7, #12]
    2664:	460b      	mov	r3, r1
    2666:	607a      	str	r2, [r7, #4]
    2668:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    266a:	897b      	ldrh	r3, [r7, #10]
    266c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2670:	b21a      	sxth	r2, r3
    2672:	687b      	ldr	r3, [r7, #4]
    2674:	b21b      	sxth	r3, r3
    2676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    267a:	b21b      	sxth	r3, r3
    267c:	4313      	orrs	r3, r2
    267e:	b21b      	sxth	r3, r3
    2680:	b29a      	uxth	r2, r3
    2682:	68fb      	ldr	r3, [r7, #12]
    2684:	839a      	strh	r2, [r3, #28]
    2686:	68fb      	ldr	r3, [r7, #12]
    2688:	8b9b      	ldrh	r3, [r3, #28]
}
    268a:	4618      	mov	r0, r3
    268c:	3714      	adds	r7, #20
    268e:	46bd      	mov	sp, r7
    2690:	f85d 7b04 	ldr.w	r7, [sp], #4
    2694:	4770      	bx	lr

00002696 <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    2696:	b480      	push	{r7}
    2698:	b083      	sub	sp, #12
    269a:	af00      	add	r7, sp, #0
    269c:	6078      	str	r0, [r7, #4]
    269e:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    26a0:	687b      	ldr	r3, [r7, #4]
    26a2:	f103 0214 	add.w	r2, r3, #20
    26a6:	683b      	ldr	r3, [r7, #0]
    26a8:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    26aa:	2300      	movs	r3, #0
}
    26ac:	4618      	mov	r0, r3
    26ae:	370c      	adds	r7, #12
    26b0:	46bd      	mov	sp, r7
    26b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    26b6:	4770      	bx	lr

000026b8 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    26b8:	b580      	push	{r7, lr}
    26ba:	b084      	sub	sp, #16
    26bc:	af00      	add	r7, sp, #0
    26be:	60f8      	str	r0, [r7, #12]
    26c0:	60b9      	str	r1, [r7, #8]
    26c2:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    26c4:	68fb      	ldr	r3, [r7, #12]
    26c6:	2b00      	cmp	r3, #0
    26c8:	d004      	beq.n	26d4 <pwm_init+0x1c>
    26ca:	68bb      	ldr	r3, [r7, #8]
    26cc:	2b00      	cmp	r3, #0
    26ce:	d001      	beq.n	26d4 <pwm_init+0x1c>
    26d0:	2301      	movs	r3, #1
    26d2:	e000      	b.n	26d6 <pwm_init+0x1e>
    26d4:	2300      	movs	r3, #0
    26d6:	f003 0301 	and.w	r3, r3, #1
    26da:	b2db      	uxtb	r3, r3
    26dc:	2233      	movs	r2, #51	; 0x33
    26de:	490a      	ldr	r1, [pc, #40]	; (2708 <pwm_init+0x50>)
    26e0:	4618      	mov	r0, r3
    26e2:	4b0a      	ldr	r3, [pc, #40]	; (270c <pwm_init+0x54>)
    26e4:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    26e6:	68fb      	ldr	r3, [r7, #12]
    26e8:	68b9      	ldr	r1, [r7, #8]
    26ea:	4618      	mov	r0, r3
    26ec:	4b08      	ldr	r3, [pc, #32]	; (2710 <pwm_init+0x58>)
    26ee:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    26f0:	68fb      	ldr	r3, [r7, #12]
    26f2:	4a08      	ldr	r2, [pc, #32]	; (2714 <pwm_init+0x5c>)
    26f4:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    26f6:	68fb      	ldr	r3, [r7, #12]
    26f8:	4a07      	ldr	r2, [pc, #28]	; (2718 <pwm_init+0x60>)
    26fa:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    26fc:	2300      	movs	r3, #0
}
    26fe:	4618      	mov	r0, r3
    2700:	3710      	adds	r7, #16
    2702:	46bd      	mov	sp, r7
    2704:	bd80      	pop	{r7, pc}
    2706:	bf00      	nop
    2708:	0000f358 	.word	0x0000f358
    270c:	0000389d 	.word	0x0000389d
    2710:	0000837d 	.word	0x0000837d
    2714:	00002771 	.word	0x00002771
    2718:	00002795 	.word	0x00002795

0000271c <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    271c:	b580      	push	{r7, lr}
    271e:	b082      	sub	sp, #8
    2720:	af00      	add	r7, sp, #0
    2722:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2724:	687b      	ldr	r3, [r7, #4]
    2726:	2b00      	cmp	r3, #0
    2728:	bf14      	ite	ne
    272a:	2301      	movne	r3, #1
    272c:	2300      	moveq	r3, #0
    272e:	b2db      	uxtb	r3, r3
    2730:	224a      	movs	r2, #74	; 0x4a
    2732:	490b      	ldr	r1, [pc, #44]	; (2760 <pwm_enable+0x44>)
    2734:	4618      	mov	r0, r3
    2736:	4b0b      	ldr	r3, [pc, #44]	; (2764 <pwm_enable+0x48>)
    2738:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    273a:	687b      	ldr	r3, [r7, #4]
    273c:	4618      	mov	r0, r3
    273e:	4b0a      	ldr	r3, [pc, #40]	; (2768 <pwm_enable+0x4c>)
    2740:	4798      	blx	r3
    2742:	4603      	mov	r3, r0
    2744:	2b00      	cmp	r3, #0
    2746:	d002      	beq.n	274e <pwm_enable+0x32>
		return ERR_DENIED;
    2748:	f06f 0310 	mvn.w	r3, #16
    274c:	e004      	b.n	2758 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    274e:	687b      	ldr	r3, [r7, #4]
    2750:	4618      	mov	r0, r3
    2752:	4b06      	ldr	r3, [pc, #24]	; (276c <pwm_enable+0x50>)
    2754:	4798      	blx	r3

	return ERR_NONE;
    2756:	2300      	movs	r3, #0
}
    2758:	4618      	mov	r0, r3
    275a:	3708      	adds	r7, #8
    275c:	46bd      	mov	sp, r7
    275e:	bd80      	pop	{r7, pc}
    2760:	0000f358 	.word	0x0000f358
    2764:	0000389d 	.word	0x0000389d
    2768:	0000876d 	.word	0x0000876d
    276c:	00008629 	.word	0x00008629

00002770 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2770:	b580      	push	{r7, lr}
    2772:	b084      	sub	sp, #16
    2774:	af00      	add	r7, sp, #0
    2776:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2778:	687b      	ldr	r3, [r7, #4]
    277a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    277c:	68fb      	ldr	r3, [r7, #12]
    277e:	695b      	ldr	r3, [r3, #20]
    2780:	2b00      	cmp	r3, #0
    2782:	d003      	beq.n	278c <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2784:	68fb      	ldr	r3, [r7, #12]
    2786:	695b      	ldr	r3, [r3, #20]
    2788:	68f8      	ldr	r0, [r7, #12]
    278a:	4798      	blx	r3
	}
}
    278c:	bf00      	nop
    278e:	3710      	adds	r7, #16
    2790:	46bd      	mov	sp, r7
    2792:	bd80      	pop	{r7, pc}

00002794 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2794:	b580      	push	{r7, lr}
    2796:	b084      	sub	sp, #16
    2798:	af00      	add	r7, sp, #0
    279a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    279c:	687b      	ldr	r3, [r7, #4]
    279e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    27a0:	68fb      	ldr	r3, [r7, #12]
    27a2:	699b      	ldr	r3, [r3, #24]
    27a4:	2b00      	cmp	r3, #0
    27a6:	d003      	beq.n	27b0 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    27a8:	68fb      	ldr	r3, [r7, #12]
    27aa:	699b      	ldr	r3, [r3, #24]
    27ac:	68f8      	ldr	r0, [r7, #12]
    27ae:	4798      	blx	r3
	}
}
    27b0:	bf00      	nop
    27b2:	3710      	adds	r7, #16
    27b4:	46bd      	mov	sp, r7
    27b6:	bd80      	pop	{r7, pc}

000027b8 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    27b8:	b580      	push	{r7, lr}
    27ba:	b082      	sub	sp, #8
    27bc:	af00      	add	r7, sp, #0
    27be:	6078      	str	r0, [r7, #4]
    27c0:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    27c2:	687b      	ldr	r3, [r7, #4]
    27c4:	2b00      	cmp	r3, #0
    27c6:	d004      	beq.n	27d2 <qspi_sync_init+0x1a>
    27c8:	683b      	ldr	r3, [r7, #0]
    27ca:	2b00      	cmp	r3, #0
    27cc:	d001      	beq.n	27d2 <qspi_sync_init+0x1a>
    27ce:	2301      	movs	r3, #1
    27d0:	e000      	b.n	27d4 <qspi_sync_init+0x1c>
    27d2:	2300      	movs	r3, #0
    27d4:	f003 0301 	and.w	r3, r3, #1
    27d8:	b2db      	uxtb	r3, r3
    27da:	2231      	movs	r2, #49	; 0x31
    27dc:	4906      	ldr	r1, [pc, #24]	; (27f8 <qspi_sync_init+0x40>)
    27de:	4618      	mov	r0, r3
    27e0:	4b06      	ldr	r3, [pc, #24]	; (27fc <qspi_sync_init+0x44>)
    27e2:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    27e4:	687b      	ldr	r3, [r7, #4]
    27e6:	6839      	ldr	r1, [r7, #0]
    27e8:	4618      	mov	r0, r3
    27ea:	4b05      	ldr	r3, [pc, #20]	; (2800 <qspi_sync_init+0x48>)
    27ec:	4798      	blx	r3
    27ee:	4603      	mov	r3, r0
}
    27f0:	4618      	mov	r0, r3
    27f2:	3708      	adds	r7, #8
    27f4:	46bd      	mov	sp, r7
    27f6:	bd80      	pop	{r7, pc}
    27f8:	0000f370 	.word	0x0000f370
    27fc:	0000389d 	.word	0x0000389d
    2800:	00005865 	.word	0x00005865

00002804 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2804:	b580      	push	{r7, lr}
    2806:	b082      	sub	sp, #8
    2808:	af00      	add	r7, sp, #0
    280a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    280c:	687b      	ldr	r3, [r7, #4]
    280e:	2b00      	cmp	r3, #0
    2810:	bf14      	ite	ne
    2812:	2301      	movne	r3, #1
    2814:	2300      	moveq	r3, #0
    2816:	b2db      	uxtb	r3, r3
    2818:	223f      	movs	r2, #63	; 0x3f
    281a:	4906      	ldr	r1, [pc, #24]	; (2834 <qspi_sync_enable+0x30>)
    281c:	4618      	mov	r0, r3
    281e:	4b06      	ldr	r3, [pc, #24]	; (2838 <qspi_sync_enable+0x34>)
    2820:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2822:	687b      	ldr	r3, [r7, #4]
    2824:	4618      	mov	r0, r3
    2826:	4b05      	ldr	r3, [pc, #20]	; (283c <qspi_sync_enable+0x38>)
    2828:	4798      	blx	r3
    282a:	4603      	mov	r3, r0
}
    282c:	4618      	mov	r0, r3
    282e:	3708      	adds	r7, #8
    2830:	46bd      	mov	sp, r7
    2832:	bd80      	pop	{r7, pc}
    2834:	0000f370 	.word	0x0000f370
    2838:	0000389d 	.word	0x0000389d
    283c:	000058d9 	.word	0x000058d9

00002840 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2840:	b580      	push	{r7, lr}
    2842:	b082      	sub	sp, #8
    2844:	af00      	add	r7, sp, #0
    2846:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2848:	687b      	ldr	r3, [r7, #4]
    284a:	2b00      	cmp	r3, #0
    284c:	bf14      	ite	ne
    284e:	2301      	movne	r3, #1
    2850:	2300      	moveq	r3, #0
    2852:	b2db      	uxtb	r3, r3
    2854:	2246      	movs	r2, #70	; 0x46
    2856:	4906      	ldr	r1, [pc, #24]	; (2870 <qspi_sync_disable+0x30>)
    2858:	4618      	mov	r0, r3
    285a:	4b06      	ldr	r3, [pc, #24]	; (2874 <qspi_sync_disable+0x34>)
    285c:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    285e:	687b      	ldr	r3, [r7, #4]
    2860:	4618      	mov	r0, r3
    2862:	4b05      	ldr	r3, [pc, #20]	; (2878 <qspi_sync_disable+0x38>)
    2864:	4798      	blx	r3
    2866:	4603      	mov	r3, r0
}
    2868:	4618      	mov	r0, r3
    286a:	3708      	adds	r7, #8
    286c:	46bd      	mov	sp, r7
    286e:	bd80      	pop	{r7, pc}
    2870:	0000f370 	.word	0x0000f370
    2874:	0000389d 	.word	0x0000389d
    2878:	000058fd 	.word	0x000058fd

0000287c <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    287c:	b580      	push	{r7, lr}
    287e:	b082      	sub	sp, #8
    2880:	af00      	add	r7, sp, #0
    2882:	6078      	str	r0, [r7, #4]
    2884:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2886:	687b      	ldr	r3, [r7, #4]
    2888:	2b00      	cmp	r3, #0
    288a:	d004      	beq.n	2896 <qspi_sync_serial_run_command+0x1a>
    288c:	683b      	ldr	r3, [r7, #0]
    288e:	2b00      	cmp	r3, #0
    2890:	d001      	beq.n	2896 <qspi_sync_serial_run_command+0x1a>
    2892:	2301      	movs	r3, #1
    2894:	e000      	b.n	2898 <qspi_sync_serial_run_command+0x1c>
    2896:	2300      	movs	r3, #0
    2898:	f003 0301 	and.w	r3, r3, #1
    289c:	b2db      	uxtb	r3, r3
    289e:	224d      	movs	r2, #77	; 0x4d
    28a0:	4906      	ldr	r1, [pc, #24]	; (28bc <qspi_sync_serial_run_command+0x40>)
    28a2:	4618      	mov	r0, r3
    28a4:	4b06      	ldr	r3, [pc, #24]	; (28c0 <qspi_sync_serial_run_command+0x44>)
    28a6:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    28a8:	687b      	ldr	r3, [r7, #4]
    28aa:	6839      	ldr	r1, [r7, #0]
    28ac:	4618      	mov	r0, r3
    28ae:	4b05      	ldr	r3, [pc, #20]	; (28c4 <qspi_sync_serial_run_command+0x48>)
    28b0:	4798      	blx	r3
    28b2:	4603      	mov	r3, r0
}
    28b4:	4618      	mov	r0, r3
    28b6:	3708      	adds	r7, #8
    28b8:	46bd      	mov	sp, r7
    28ba:	bd80      	pop	{r7, pc}
    28bc:	0000f370 	.word	0x0000f370
    28c0:	0000389d 	.word	0x0000389d
    28c4:	00005a49 	.word	0x00005a49

000028c8 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    28c8:	b580      	push	{r7, lr}
    28ca:	b084      	sub	sp, #16
    28cc:	af00      	add	r7, sp, #0
    28ce:	6078      	str	r0, [r7, #4]
    28d0:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    28d2:	2300      	movs	r3, #0
    28d4:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    28d6:	687b      	ldr	r3, [r7, #4]
    28d8:	2b00      	cmp	r3, #0
    28da:	d004      	beq.n	28e6 <spi_m_sync_init+0x1e>
    28dc:	683b      	ldr	r3, [r7, #0]
    28de:	2b00      	cmp	r3, #0
    28e0:	d001      	beq.n	28e6 <spi_m_sync_init+0x1e>
    28e2:	2301      	movs	r3, #1
    28e4:	e000      	b.n	28e8 <spi_m_sync_init+0x20>
    28e6:	2300      	movs	r3, #0
    28e8:	f003 0301 	and.w	r3, r3, #1
    28ec:	b2db      	uxtb	r3, r3
    28ee:	2240      	movs	r2, #64	; 0x40
    28f0:	4910      	ldr	r1, [pc, #64]	; (2934 <spi_m_sync_init+0x6c>)
    28f2:	4618      	mov	r0, r3
    28f4:	4b10      	ldr	r3, [pc, #64]	; (2938 <spi_m_sync_init+0x70>)
    28f6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    28f8:	687b      	ldr	r3, [r7, #4]
    28fa:	683a      	ldr	r2, [r7, #0]
    28fc:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    28fe:	687b      	ldr	r3, [r7, #4]
    2900:	3304      	adds	r3, #4
    2902:	6839      	ldr	r1, [r7, #0]
    2904:	4618      	mov	r0, r3
    2906:	4b0d      	ldr	r3, [pc, #52]	; (293c <spi_m_sync_init+0x74>)
    2908:	4798      	blx	r3
    290a:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    290c:	68fb      	ldr	r3, [r7, #12]
    290e:	2b00      	cmp	r3, #0
    2910:	da01      	bge.n	2916 <spi_m_sync_init+0x4e>
		return rc;
    2912:	68fb      	ldr	r3, [r7, #12]
    2914:	e00a      	b.n	292c <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    291c:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    291e:	687b      	ldr	r3, [r7, #4]
    2920:	4a07      	ldr	r2, [pc, #28]	; (2940 <spi_m_sync_init+0x78>)
    2922:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2924:	687b      	ldr	r3, [r7, #4]
    2926:	4a07      	ldr	r2, [pc, #28]	; (2944 <spi_m_sync_init+0x7c>)
    2928:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    292a:	2300      	movs	r3, #0
}
    292c:	4618      	mov	r0, r3
    292e:	3710      	adds	r7, #16
    2930:	46bd      	mov	sp, r7
    2932:	bd80      	pop	{r7, pc}
    2934:	0000f38c 	.word	0x0000f38c
    2938:	0000389d 	.word	0x0000389d
    293c:	00007281 	.word	0x00007281
    2940:	00002949 	.word	0x00002949
    2944:	000029a1 	.word	0x000029a1

00002948 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2948:	b580      	push	{r7, lr}
    294a:	b088      	sub	sp, #32
    294c:	af00      	add	r7, sp, #0
    294e:	60f8      	str	r0, [r7, #12]
    2950:	60b9      	str	r1, [r7, #8]
    2952:	4613      	mov	r3, r2
    2954:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2956:	68fb      	ldr	r3, [r7, #12]
    2958:	2b00      	cmp	r3, #0
    295a:	bf14      	ite	ne
    295c:	2301      	movne	r3, #1
    295e:	2300      	moveq	r3, #0
    2960:	b2db      	uxtb	r3, r3
    2962:	2287      	movs	r2, #135	; 0x87
    2964:	490b      	ldr	r1, [pc, #44]	; (2994 <_spi_m_sync_io_read+0x4c>)
    2966:	4618      	mov	r0, r3
    2968:	4b0b      	ldr	r3, [pc, #44]	; (2998 <_spi_m_sync_io_read+0x50>)
    296a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    296c:	68fb      	ldr	r3, [r7, #12]
    296e:	3b0c      	subs	r3, #12
    2970:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    2972:	68bb      	ldr	r3, [r7, #8]
    2974:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    2976:	2300      	movs	r3, #0
    2978:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    297a:	88fb      	ldrh	r3, [r7, #6]
    297c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    297e:	f107 0310 	add.w	r3, r7, #16
    2982:	4619      	mov	r1, r3
    2984:	69f8      	ldr	r0, [r7, #28]
    2986:	4b05      	ldr	r3, [pc, #20]	; (299c <_spi_m_sync_io_read+0x54>)
    2988:	4798      	blx	r3
    298a:	4603      	mov	r3, r0
}
    298c:	4618      	mov	r0, r3
    298e:	3720      	adds	r7, #32
    2990:	46bd      	mov	sp, r7
    2992:	bd80      	pop	{r7, pc}
    2994:	0000f38c 	.word	0x0000f38c
    2998:	0000389d 	.word	0x0000389d
    299c:	000029f9 	.word	0x000029f9

000029a0 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    29a0:	b580      	push	{r7, lr}
    29a2:	b088      	sub	sp, #32
    29a4:	af00      	add	r7, sp, #0
    29a6:	60f8      	str	r0, [r7, #12]
    29a8:	60b9      	str	r1, [r7, #8]
    29aa:	4613      	mov	r3, r2
    29ac:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    29ae:	68fb      	ldr	r3, [r7, #12]
    29b0:	2b00      	cmp	r3, #0
    29b2:	bf14      	ite	ne
    29b4:	2301      	movne	r3, #1
    29b6:	2300      	moveq	r3, #0
    29b8:	b2db      	uxtb	r3, r3
    29ba:	22a3      	movs	r2, #163	; 0xa3
    29bc:	490b      	ldr	r1, [pc, #44]	; (29ec <_spi_m_sync_io_write+0x4c>)
    29be:	4618      	mov	r0, r3
    29c0:	4b0b      	ldr	r3, [pc, #44]	; (29f0 <_spi_m_sync_io_write+0x50>)
    29c2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    29c4:	68fb      	ldr	r3, [r7, #12]
    29c6:	3b0c      	subs	r3, #12
    29c8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    29ca:	2300      	movs	r3, #0
    29cc:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    29ce:	68bb      	ldr	r3, [r7, #8]
    29d0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    29d2:	88fb      	ldrh	r3, [r7, #6]
    29d4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    29d6:	f107 0310 	add.w	r3, r7, #16
    29da:	4619      	mov	r1, r3
    29dc:	69f8      	ldr	r0, [r7, #28]
    29de:	4b05      	ldr	r3, [pc, #20]	; (29f4 <_spi_m_sync_io_write+0x54>)
    29e0:	4798      	blx	r3
    29e2:	4603      	mov	r3, r0
}
    29e4:	4618      	mov	r0, r3
    29e6:	3720      	adds	r7, #32
    29e8:	46bd      	mov	sp, r7
    29ea:	bd80      	pop	{r7, pc}
    29ec:	0000f38c 	.word	0x0000f38c
    29f0:	0000389d 	.word	0x0000389d
    29f4:	000029f9 	.word	0x000029f9

000029f8 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    29f8:	b580      	push	{r7, lr}
    29fa:	b086      	sub	sp, #24
    29fc:	af00      	add	r7, sp, #0
    29fe:	6078      	str	r0, [r7, #4]
    2a00:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2a02:	687b      	ldr	r3, [r7, #4]
    2a04:	2b00      	cmp	r3, #0
    2a06:	d004      	beq.n	2a12 <spi_m_sync_transfer+0x1a>
    2a08:	683b      	ldr	r3, [r7, #0]
    2a0a:	2b00      	cmp	r3, #0
    2a0c:	d001      	beq.n	2a12 <spi_m_sync_transfer+0x1a>
    2a0e:	2301      	movs	r3, #1
    2a10:	e000      	b.n	2a14 <spi_m_sync_transfer+0x1c>
    2a12:	2300      	movs	r3, #0
    2a14:	f003 0301 	and.w	r3, r3, #1
    2a18:	b2db      	uxtb	r3, r3
    2a1a:	22b3      	movs	r2, #179	; 0xb3
    2a1c:	490c      	ldr	r1, [pc, #48]	; (2a50 <spi_m_sync_transfer+0x58>)
    2a1e:	4618      	mov	r0, r3
    2a20:	4b0c      	ldr	r3, [pc, #48]	; (2a54 <spi_m_sync_transfer+0x5c>)
    2a22:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2a24:	683b      	ldr	r3, [r7, #0]
    2a26:	681b      	ldr	r3, [r3, #0]
    2a28:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2a2a:	683b      	ldr	r3, [r7, #0]
    2a2c:	685b      	ldr	r3, [r3, #4]
    2a2e:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2a30:	683b      	ldr	r3, [r7, #0]
    2a32:	689b      	ldr	r3, [r3, #8]
    2a34:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2a36:	687b      	ldr	r3, [r7, #4]
    2a38:	3304      	adds	r3, #4
    2a3a:	f107 020c 	add.w	r2, r7, #12
    2a3e:	4611      	mov	r1, r2
    2a40:	4618      	mov	r0, r3
    2a42:	4b05      	ldr	r3, [pc, #20]	; (2a58 <spi_m_sync_transfer+0x60>)
    2a44:	4798      	blx	r3
    2a46:	4603      	mov	r3, r0
}
    2a48:	4618      	mov	r0, r3
    2a4a:	3718      	adds	r7, #24
    2a4c:	46bd      	mov	sp, r7
    2a4e:	bd80      	pop	{r7, pc}
    2a50:	0000f38c 	.word	0x0000f38c
    2a54:	0000389d 	.word	0x0000389d
    2a58:	000074e1 	.word	0x000074e1

00002a5c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2a5c:	b480      	push	{r7}
    2a5e:	b083      	sub	sp, #12
    2a60:	af00      	add	r7, sp, #0
    2a62:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2a64:	687b      	ldr	r3, [r7, #4]
    2a66:	681b      	ldr	r3, [r3, #0]
}
    2a68:	4618      	mov	r0, r3
    2a6a:	370c      	adds	r7, #12
    2a6c:	46bd      	mov	sp, r7
    2a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a72:	4770      	bx	lr

00002a74 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2a74:	b480      	push	{r7}
    2a76:	b083      	sub	sp, #12
    2a78:	af00      	add	r7, sp, #0
    2a7a:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2a7c:	687b      	ldr	r3, [r7, #4]
    2a7e:	2b00      	cmp	r3, #0
    2a80:	d002      	beq.n	2a88 <list_get_next_element+0x14>
    2a82:	687b      	ldr	r3, [r7, #4]
    2a84:	681b      	ldr	r3, [r3, #0]
    2a86:	e000      	b.n	2a8a <list_get_next_element+0x16>
    2a88:	2300      	movs	r3, #0
}
    2a8a:	4618      	mov	r0, r3
    2a8c:	370c      	adds	r7, #12
    2a8e:	46bd      	mov	sp, r7
    2a90:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a94:	4770      	bx	lr
	...

00002a98 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2a98:	b580      	push	{r7, lr}
    2a9a:	b084      	sub	sp, #16
    2a9c:	af00      	add	r7, sp, #0
    2a9e:	60f8      	str	r0, [r7, #12]
    2aa0:	60b9      	str	r1, [r7, #8]
    2aa2:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2aa4:	68fb      	ldr	r3, [r7, #12]
    2aa6:	2b00      	cmp	r3, #0
    2aa8:	d007      	beq.n	2aba <timer_init+0x22>
    2aaa:	68bb      	ldr	r3, [r7, #8]
    2aac:	2b00      	cmp	r3, #0
    2aae:	d004      	beq.n	2aba <timer_init+0x22>
    2ab0:	687b      	ldr	r3, [r7, #4]
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	d001      	beq.n	2aba <timer_init+0x22>
    2ab6:	2301      	movs	r3, #1
    2ab8:	e000      	b.n	2abc <timer_init+0x24>
    2aba:	2300      	movs	r3, #0
    2abc:	f003 0301 	and.w	r3, r3, #1
    2ac0:	b2db      	uxtb	r3, r3
    2ac2:	223b      	movs	r2, #59	; 0x3b
    2ac4:	490c      	ldr	r1, [pc, #48]	; (2af8 <timer_init+0x60>)
    2ac6:	4618      	mov	r0, r3
    2ac8:	4b0c      	ldr	r3, [pc, #48]	; (2afc <timer_init+0x64>)
    2aca:	4798      	blx	r3
	descr->func = func;
    2acc:	68fb      	ldr	r3, [r7, #12]
    2ace:	687a      	ldr	r2, [r7, #4]
    2ad0:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    2ad2:	68fb      	ldr	r3, [r7, #12]
    2ad4:	681b      	ldr	r3, [r3, #0]
    2ad6:	681b      	ldr	r3, [r3, #0]
    2ad8:	68fa      	ldr	r2, [r7, #12]
    2ada:	3204      	adds	r2, #4
    2adc:	68b9      	ldr	r1, [r7, #8]
    2ade:	4610      	mov	r0, r2
    2ae0:	4798      	blx	r3
	descr->time                           = 0;
    2ae2:	68fb      	ldr	r3, [r7, #12]
    2ae4:	2200      	movs	r2, #0
    2ae6:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2ae8:	68fb      	ldr	r3, [r7, #12]
    2aea:	4a05      	ldr	r2, [pc, #20]	; (2b00 <timer_init+0x68>)
    2aec:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    2aee:	2300      	movs	r3, #0
}
    2af0:	4618      	mov	r0, r3
    2af2:	3710      	adds	r7, #16
    2af4:	46bd      	mov	sp, r7
    2af6:	bd80      	pop	{r7, pc}
    2af8:	0000f3a8 	.word	0x0000f3a8
    2afc:	0000389d 	.word	0x0000389d
    2b00:	00002e89 	.word	0x00002e89

00002b04 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2b04:	b580      	push	{r7, lr}
    2b06:	b082      	sub	sp, #8
    2b08:	af00      	add	r7, sp, #0
    2b0a:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2b0c:	687b      	ldr	r3, [r7, #4]
    2b0e:	2b00      	cmp	r3, #0
    2b10:	d005      	beq.n	2b1e <timer_start+0x1a>
    2b12:	687b      	ldr	r3, [r7, #4]
    2b14:	681b      	ldr	r3, [r3, #0]
    2b16:	2b00      	cmp	r3, #0
    2b18:	d001      	beq.n	2b1e <timer_start+0x1a>
    2b1a:	2301      	movs	r3, #1
    2b1c:	e000      	b.n	2b20 <timer_start+0x1c>
    2b1e:	2300      	movs	r3, #0
    2b20:	f003 0301 	and.w	r3, r3, #1
    2b24:	b2db      	uxtb	r3, r3
    2b26:	2254      	movs	r2, #84	; 0x54
    2b28:	490e      	ldr	r1, [pc, #56]	; (2b64 <timer_start+0x60>)
    2b2a:	4618      	mov	r0, r3
    2b2c:	4b0e      	ldr	r3, [pc, #56]	; (2b68 <timer_start+0x64>)
    2b2e:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    2b30:	687b      	ldr	r3, [r7, #4]
    2b32:	681b      	ldr	r3, [r3, #0]
    2b34:	699b      	ldr	r3, [r3, #24]
    2b36:	687a      	ldr	r2, [r7, #4]
    2b38:	3204      	adds	r2, #4
    2b3a:	4610      	mov	r0, r2
    2b3c:	4798      	blx	r3
    2b3e:	4603      	mov	r3, r0
    2b40:	2b00      	cmp	r3, #0
    2b42:	d002      	beq.n	2b4a <timer_start+0x46>
		return ERR_DENIED;
    2b44:	f06f 0310 	mvn.w	r3, #16
    2b48:	e007      	b.n	2b5a <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    2b4a:	687b      	ldr	r3, [r7, #4]
    2b4c:	681b      	ldr	r3, [r3, #0]
    2b4e:	689b      	ldr	r3, [r3, #8]
    2b50:	687a      	ldr	r2, [r7, #4]
    2b52:	3204      	adds	r2, #4
    2b54:	4610      	mov	r0, r2
    2b56:	4798      	blx	r3

	return ERR_NONE;
    2b58:	2300      	movs	r3, #0
}
    2b5a:	4618      	mov	r0, r3
    2b5c:	3708      	adds	r7, #8
    2b5e:	46bd      	mov	sp, r7
    2b60:	bd80      	pop	{r7, pc}
    2b62:	bf00      	nop
    2b64:	0000f3a8 	.word	0x0000f3a8
    2b68:	0000389d 	.word	0x0000389d

00002b6c <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    2b6c:	b580      	push	{r7, lr}
    2b6e:	b082      	sub	sp, #8
    2b70:	af00      	add	r7, sp, #0
    2b72:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2b74:	687b      	ldr	r3, [r7, #4]
    2b76:	2b00      	cmp	r3, #0
    2b78:	d005      	beq.n	2b86 <timer_stop+0x1a>
    2b7a:	687b      	ldr	r3, [r7, #4]
    2b7c:	681b      	ldr	r3, [r3, #0]
    2b7e:	2b00      	cmp	r3, #0
    2b80:	d001      	beq.n	2b86 <timer_stop+0x1a>
    2b82:	2301      	movs	r3, #1
    2b84:	e000      	b.n	2b88 <timer_stop+0x1c>
    2b86:	2300      	movs	r3, #0
    2b88:	f003 0301 	and.w	r3, r3, #1
    2b8c:	b2db      	uxtb	r3, r3
    2b8e:	2262      	movs	r2, #98	; 0x62
    2b90:	490f      	ldr	r1, [pc, #60]	; (2bd0 <timer_stop+0x64>)
    2b92:	4618      	mov	r0, r3
    2b94:	4b0f      	ldr	r3, [pc, #60]	; (2bd4 <timer_stop+0x68>)
    2b96:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    2b98:	687b      	ldr	r3, [r7, #4]
    2b9a:	681b      	ldr	r3, [r3, #0]
    2b9c:	699b      	ldr	r3, [r3, #24]
    2b9e:	687a      	ldr	r2, [r7, #4]
    2ba0:	3204      	adds	r2, #4
    2ba2:	4610      	mov	r0, r2
    2ba4:	4798      	blx	r3
    2ba6:	4603      	mov	r3, r0
    2ba8:	f083 0301 	eor.w	r3, r3, #1
    2bac:	b2db      	uxtb	r3, r3
    2bae:	2b00      	cmp	r3, #0
    2bb0:	d002      	beq.n	2bb8 <timer_stop+0x4c>
		return ERR_DENIED;
    2bb2:	f06f 0310 	mvn.w	r3, #16
    2bb6:	e007      	b.n	2bc8 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    2bb8:	687b      	ldr	r3, [r7, #4]
    2bba:	681b      	ldr	r3, [r3, #0]
    2bbc:	68db      	ldr	r3, [r3, #12]
    2bbe:	687a      	ldr	r2, [r7, #4]
    2bc0:	3204      	adds	r2, #4
    2bc2:	4610      	mov	r0, r2
    2bc4:	4798      	blx	r3

	return ERR_NONE;
    2bc6:	2300      	movs	r3, #0
}
    2bc8:	4618      	mov	r0, r3
    2bca:	3708      	adds	r7, #8
    2bcc:	46bd      	mov	sp, r7
    2bce:	bd80      	pop	{r7, pc}
    2bd0:	0000f3a8 	.word	0x0000f3a8
    2bd4:	0000389d 	.word	0x0000389d

00002bd8 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    2bd8:	b580      	push	{r7, lr}
    2bda:	b084      	sub	sp, #16
    2bdc:	af00      	add	r7, sp, #0
    2bde:	6078      	str	r0, [r7, #4]
    2be0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2be2:	687b      	ldr	r3, [r7, #4]
    2be4:	2b00      	cmp	r3, #0
    2be6:	d008      	beq.n	2bfa <timer_add_task+0x22>
    2be8:	683b      	ldr	r3, [r7, #0]
    2bea:	2b00      	cmp	r3, #0
    2bec:	d005      	beq.n	2bfa <timer_add_task+0x22>
    2bee:	687b      	ldr	r3, [r7, #4]
    2bf0:	681b      	ldr	r3, [r3, #0]
    2bf2:	2b00      	cmp	r3, #0
    2bf4:	d001      	beq.n	2bfa <timer_add_task+0x22>
    2bf6:	2301      	movs	r3, #1
    2bf8:	e000      	b.n	2bfc <timer_add_task+0x24>
    2bfa:	2300      	movs	r3, #0
    2bfc:	f003 0301 	and.w	r3, r3, #1
    2c00:	b2db      	uxtb	r3, r3
    2c02:	227b      	movs	r2, #123	; 0x7b
    2c04:	492f      	ldr	r1, [pc, #188]	; (2cc4 <timer_add_task+0xec>)
    2c06:	4618      	mov	r0, r3
    2c08:	4b2f      	ldr	r3, [pc, #188]	; (2cc8 <timer_add_task+0xf0>)
    2c0a:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2c0c:	687b      	ldr	r3, [r7, #4]
    2c0e:	7f1b      	ldrb	r3, [r3, #28]
    2c10:	b2db      	uxtb	r3, r3
    2c12:	f043 0301 	orr.w	r3, r3, #1
    2c16:	b2da      	uxtb	r2, r3
    2c18:	687b      	ldr	r3, [r7, #4]
    2c1a:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    2c1c:	687b      	ldr	r3, [r7, #4]
    2c1e:	3318      	adds	r3, #24
    2c20:	6839      	ldr	r1, [r7, #0]
    2c22:	4618      	mov	r0, r3
    2c24:	4b29      	ldr	r3, [pc, #164]	; (2ccc <timer_add_task+0xf4>)
    2c26:	4798      	blx	r3
    2c28:	4603      	mov	r3, r0
    2c2a:	2b00      	cmp	r3, #0
    2c2c:	d00f      	beq.n	2c4e <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2c2e:	687b      	ldr	r3, [r7, #4]
    2c30:	7f1b      	ldrb	r3, [r3, #28]
    2c32:	b2db      	uxtb	r3, r3
    2c34:	f023 0301 	bic.w	r3, r3, #1
    2c38:	b2da      	uxtb	r2, r3
    2c3a:	687b      	ldr	r3, [r7, #4]
    2c3c:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2c3e:	2280      	movs	r2, #128	; 0x80
    2c40:	4920      	ldr	r1, [pc, #128]	; (2cc4 <timer_add_task+0xec>)
    2c42:	2000      	movs	r0, #0
    2c44:	4b20      	ldr	r3, [pc, #128]	; (2cc8 <timer_add_task+0xf0>)
    2c46:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2c48:	f06f 0311 	mvn.w	r3, #17
    2c4c:	e035      	b.n	2cba <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    2c4e:	687b      	ldr	r3, [r7, #4]
    2c50:	695a      	ldr	r2, [r3, #20]
    2c52:	683b      	ldr	r3, [r7, #0]
    2c54:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2c56:	687b      	ldr	r3, [r7, #4]
    2c58:	f103 0018 	add.w	r0, r3, #24
    2c5c:	687b      	ldr	r3, [r7, #4]
    2c5e:	695b      	ldr	r3, [r3, #20]
    2c60:	461a      	mov	r2, r3
    2c62:	6839      	ldr	r1, [r7, #0]
    2c64:	4b1a      	ldr	r3, [pc, #104]	; (2cd0 <timer_add_task+0xf8>)
    2c66:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2c68:	687b      	ldr	r3, [r7, #4]
    2c6a:	7f1b      	ldrb	r3, [r3, #28]
    2c6c:	b2db      	uxtb	r3, r3
    2c6e:	f023 0301 	bic.w	r3, r3, #1
    2c72:	b2da      	uxtb	r2, r3
    2c74:	687b      	ldr	r3, [r7, #4]
    2c76:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2c78:	687b      	ldr	r3, [r7, #4]
    2c7a:	7f1b      	ldrb	r3, [r3, #28]
    2c7c:	b2db      	uxtb	r3, r3
    2c7e:	f003 0302 	and.w	r3, r3, #2
    2c82:	2b00      	cmp	r3, #0
    2c84:	d018      	beq.n	2cb8 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    2c86:	f107 030c 	add.w	r3, r7, #12
    2c8a:	4618      	mov	r0, r3
    2c8c:	4b11      	ldr	r3, [pc, #68]	; (2cd4 <timer_add_task+0xfc>)
    2c8e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2c90:	687b      	ldr	r3, [r7, #4]
    2c92:	7f1b      	ldrb	r3, [r3, #28]
    2c94:	b2db      	uxtb	r3, r3
    2c96:	f023 0302 	bic.w	r3, r3, #2
    2c9a:	b2da      	uxtb	r2, r3
    2c9c:	687b      	ldr	r3, [r7, #4]
    2c9e:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2ca0:	687b      	ldr	r3, [r7, #4]
    2ca2:	681b      	ldr	r3, [r3, #0]
    2ca4:	69db      	ldr	r3, [r3, #28]
    2ca6:	687a      	ldr	r2, [r7, #4]
    2ca8:	3204      	adds	r2, #4
    2caa:	4610      	mov	r0, r2
    2cac:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2cae:	f107 030c 	add.w	r3, r7, #12
    2cb2:	4618      	mov	r0, r3
    2cb4:	4b08      	ldr	r3, [pc, #32]	; (2cd8 <timer_add_task+0x100>)
    2cb6:	4798      	blx	r3
	}

	return ERR_NONE;
    2cb8:	2300      	movs	r3, #0
}
    2cba:	4618      	mov	r0, r3
    2cbc:	3710      	adds	r7, #16
    2cbe:	46bd      	mov	sp, r7
    2cc0:	bd80      	pop	{r7, pc}
    2cc2:	bf00      	nop
    2cc4:	0000f3a8 	.word	0x0000f3a8
    2cc8:	0000389d 	.word	0x0000389d
    2ccc:	000038c5 	.word	0x000038c5
    2cd0:	00002dd9 	.word	0x00002dd9
    2cd4:	0000b8cd 	.word	0x0000b8cd
    2cd8:	0000b8f3 	.word	0x0000b8f3

00002cdc <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    2cdc:	b580      	push	{r7, lr}
    2cde:	b084      	sub	sp, #16
    2ce0:	af00      	add	r7, sp, #0
    2ce2:	6078      	str	r0, [r7, #4]
    2ce4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2ce6:	687b      	ldr	r3, [r7, #4]
    2ce8:	2b00      	cmp	r3, #0
    2cea:	d008      	beq.n	2cfe <timer_remove_task+0x22>
    2cec:	683b      	ldr	r3, [r7, #0]
    2cee:	2b00      	cmp	r3, #0
    2cf0:	d005      	beq.n	2cfe <timer_remove_task+0x22>
    2cf2:	687b      	ldr	r3, [r7, #4]
    2cf4:	681b      	ldr	r3, [r3, #0]
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	d001      	beq.n	2cfe <timer_remove_task+0x22>
    2cfa:	2301      	movs	r3, #1
    2cfc:	e000      	b.n	2d00 <timer_remove_task+0x24>
    2cfe:	2300      	movs	r3, #0
    2d00:	f003 0301 	and.w	r3, r3, #1
    2d04:	b2db      	uxtb	r3, r3
    2d06:	2296      	movs	r2, #150	; 0x96
    2d08:	492d      	ldr	r1, [pc, #180]	; (2dc0 <timer_remove_task+0xe4>)
    2d0a:	4618      	mov	r0, r3
    2d0c:	4b2d      	ldr	r3, [pc, #180]	; (2dc4 <timer_remove_task+0xe8>)
    2d0e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2d10:	687b      	ldr	r3, [r7, #4]
    2d12:	7f1b      	ldrb	r3, [r3, #28]
    2d14:	b2db      	uxtb	r3, r3
    2d16:	f043 0301 	orr.w	r3, r3, #1
    2d1a:	b2da      	uxtb	r2, r3
    2d1c:	687b      	ldr	r3, [r7, #4]
    2d1e:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    2d20:	687b      	ldr	r3, [r7, #4]
    2d22:	3318      	adds	r3, #24
    2d24:	6839      	ldr	r1, [r7, #0]
    2d26:	4618      	mov	r0, r3
    2d28:	4b27      	ldr	r3, [pc, #156]	; (2dc8 <timer_remove_task+0xec>)
    2d2a:	4798      	blx	r3
    2d2c:	4603      	mov	r3, r0
    2d2e:	f083 0301 	eor.w	r3, r3, #1
    2d32:	b2db      	uxtb	r3, r3
    2d34:	2b00      	cmp	r3, #0
    2d36:	d00f      	beq.n	2d58 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2d38:	687b      	ldr	r3, [r7, #4]
    2d3a:	7f1b      	ldrb	r3, [r3, #28]
    2d3c:	b2db      	uxtb	r3, r3
    2d3e:	f023 0301 	bic.w	r3, r3, #1
    2d42:	b2da      	uxtb	r2, r3
    2d44:	687b      	ldr	r3, [r7, #4]
    2d46:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2d48:	229b      	movs	r2, #155	; 0x9b
    2d4a:	491d      	ldr	r1, [pc, #116]	; (2dc0 <timer_remove_task+0xe4>)
    2d4c:	2000      	movs	r0, #0
    2d4e:	4b1d      	ldr	r3, [pc, #116]	; (2dc4 <timer_remove_task+0xe8>)
    2d50:	4798      	blx	r3
		return ERR_NOT_FOUND;
    2d52:	f06f 0309 	mvn.w	r3, #9
    2d56:	e02e      	b.n	2db6 <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    2d58:	687b      	ldr	r3, [r7, #4]
    2d5a:	3318      	adds	r3, #24
    2d5c:	6839      	ldr	r1, [r7, #0]
    2d5e:	4618      	mov	r0, r3
    2d60:	4b1a      	ldr	r3, [pc, #104]	; (2dcc <timer_remove_task+0xf0>)
    2d62:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2d64:	687b      	ldr	r3, [r7, #4]
    2d66:	7f1b      	ldrb	r3, [r3, #28]
    2d68:	b2db      	uxtb	r3, r3
    2d6a:	f023 0301 	bic.w	r3, r3, #1
    2d6e:	b2da      	uxtb	r2, r3
    2d70:	687b      	ldr	r3, [r7, #4]
    2d72:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2d74:	687b      	ldr	r3, [r7, #4]
    2d76:	7f1b      	ldrb	r3, [r3, #28]
    2d78:	b2db      	uxtb	r3, r3
    2d7a:	f003 0302 	and.w	r3, r3, #2
    2d7e:	2b00      	cmp	r3, #0
    2d80:	d018      	beq.n	2db4 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    2d82:	f107 030c 	add.w	r3, r7, #12
    2d86:	4618      	mov	r0, r3
    2d88:	4b11      	ldr	r3, [pc, #68]	; (2dd0 <timer_remove_task+0xf4>)
    2d8a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2d8c:	687b      	ldr	r3, [r7, #4]
    2d8e:	7f1b      	ldrb	r3, [r3, #28]
    2d90:	b2db      	uxtb	r3, r3
    2d92:	f023 0302 	bic.w	r3, r3, #2
    2d96:	b2da      	uxtb	r2, r3
    2d98:	687b      	ldr	r3, [r7, #4]
    2d9a:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2d9c:	687b      	ldr	r3, [r7, #4]
    2d9e:	681b      	ldr	r3, [r3, #0]
    2da0:	69db      	ldr	r3, [r3, #28]
    2da2:	687a      	ldr	r2, [r7, #4]
    2da4:	3204      	adds	r2, #4
    2da6:	4610      	mov	r0, r2
    2da8:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2daa:	f107 030c 	add.w	r3, r7, #12
    2dae:	4618      	mov	r0, r3
    2db0:	4b08      	ldr	r3, [pc, #32]	; (2dd4 <timer_remove_task+0xf8>)
    2db2:	4798      	blx	r3
	}

	return ERR_NONE;
    2db4:	2300      	movs	r3, #0
}
    2db6:	4618      	mov	r0, r3
    2db8:	3710      	adds	r7, #16
    2dba:	46bd      	mov	sp, r7
    2dbc:	bd80      	pop	{r7, pc}
    2dbe:	bf00      	nop
    2dc0:	0000f3a8 	.word	0x0000f3a8
    2dc4:	0000389d 	.word	0x0000389d
    2dc8:	000038c5 	.word	0x000038c5
    2dcc:	00003a27 	.word	0x00003a27
    2dd0:	0000b8cd 	.word	0x0000b8cd
    2dd4:	0000b8f3 	.word	0x0000b8f3

00002dd8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2dd8:	b580      	push	{r7, lr}
    2dda:	b088      	sub	sp, #32
    2ddc:	af00      	add	r7, sp, #0
    2dde:	60f8      	str	r0, [r7, #12]
    2de0:	60b9      	str	r1, [r7, #8]
    2de2:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    2de4:	2300      	movs	r3, #0
    2de6:	61bb      	str	r3, [r7, #24]
    2de8:	68f8      	ldr	r0, [r7, #12]
    2dea:	4b23      	ldr	r3, [pc, #140]	; (2e78 <timer_add_timer_task+0xa0>)
    2dec:	4798      	blx	r3
    2dee:	6138      	str	r0, [r7, #16]

	if (!head) {
    2df0:	693b      	ldr	r3, [r7, #16]
    2df2:	2b00      	cmp	r3, #0
    2df4:	d104      	bne.n	2e00 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2df6:	68b9      	ldr	r1, [r7, #8]
    2df8:	68f8      	ldr	r0, [r7, #12]
    2dfa:	4b20      	ldr	r3, [pc, #128]	; (2e7c <timer_add_timer_task+0xa4>)
    2dfc:	4798      	blx	r3
		return;
    2dfe:	e037      	b.n	2e70 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2e00:	693b      	ldr	r3, [r7, #16]
    2e02:	61fb      	str	r3, [r7, #28]
    2e04:	e022      	b.n	2e4c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    2e06:	69fb      	ldr	r3, [r7, #28]
    2e08:	685a      	ldr	r2, [r3, #4]
    2e0a:	687b      	ldr	r3, [r7, #4]
    2e0c:	429a      	cmp	r2, r3
    2e0e:	d808      	bhi.n	2e22 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2e10:	69fb      	ldr	r3, [r7, #28]
    2e12:	689a      	ldr	r2, [r3, #8]
    2e14:	69fb      	ldr	r3, [r7, #28]
    2e16:	6859      	ldr	r1, [r3, #4]
    2e18:	687b      	ldr	r3, [r7, #4]
    2e1a:	1acb      	subs	r3, r1, r3
    2e1c:	4413      	add	r3, r2
    2e1e:	617b      	str	r3, [r7, #20]
    2e20:	e009      	b.n	2e36 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2e22:	69fb      	ldr	r3, [r7, #28]
    2e24:	689a      	ldr	r2, [r3, #8]
    2e26:	69fb      	ldr	r3, [r7, #28]
    2e28:	685b      	ldr	r3, [r3, #4]
    2e2a:	441a      	add	r2, r3
    2e2c:	687b      	ldr	r3, [r7, #4]
    2e2e:	425b      	negs	r3, r3
    2e30:	4413      	add	r3, r2
    2e32:	3301      	adds	r3, #1
    2e34:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    2e36:	68bb      	ldr	r3, [r7, #8]
    2e38:	689a      	ldr	r2, [r3, #8]
    2e3a:	697b      	ldr	r3, [r7, #20]
    2e3c:	429a      	cmp	r2, r3
    2e3e:	d909      	bls.n	2e54 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2e40:	69fb      	ldr	r3, [r7, #28]
    2e42:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2e44:	69f8      	ldr	r0, [r7, #28]
    2e46:	4b0e      	ldr	r3, [pc, #56]	; (2e80 <timer_add_timer_task+0xa8>)
    2e48:	4798      	blx	r3
    2e4a:	61f8      	str	r0, [r7, #28]
    2e4c:	69fb      	ldr	r3, [r7, #28]
    2e4e:	2b00      	cmp	r3, #0
    2e50:	d1d9      	bne.n	2e06 <timer_add_timer_task+0x2e>
    2e52:	e000      	b.n	2e56 <timer_add_timer_task+0x7e>
			break;
    2e54:	bf00      	nop
	}

	if (it == head) {
    2e56:	69fa      	ldr	r2, [r7, #28]
    2e58:	693b      	ldr	r3, [r7, #16]
    2e5a:	429a      	cmp	r2, r3
    2e5c:	d104      	bne.n	2e68 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    2e5e:	68b9      	ldr	r1, [r7, #8]
    2e60:	68f8      	ldr	r0, [r7, #12]
    2e62:	4b06      	ldr	r3, [pc, #24]	; (2e7c <timer_add_timer_task+0xa4>)
    2e64:	4798      	blx	r3
    2e66:	e003      	b.n	2e70 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2e68:	68b9      	ldr	r1, [r7, #8]
    2e6a:	69b8      	ldr	r0, [r7, #24]
    2e6c:	4b05      	ldr	r3, [pc, #20]	; (2e84 <timer_add_timer_task+0xac>)
    2e6e:	4798      	blx	r3
	}
}
    2e70:	3720      	adds	r7, #32
    2e72:	46bd      	mov	sp, r7
    2e74:	bd80      	pop	{r7, pc}
    2e76:	bf00      	nop
    2e78:	00002a5d 	.word	0x00002a5d
    2e7c:	000038fd 	.word	0x000038fd
    2e80:	00002a75 	.word	0x00002a75
    2e84:	00003955 	.word	0x00003955

00002e88 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2e88:	b580      	push	{r7, lr}
    2e8a:	b086      	sub	sp, #24
    2e8c:	af00      	add	r7, sp, #0
    2e8e:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2e90:	687b      	ldr	r3, [r7, #4]
    2e92:	3b04      	subs	r3, #4
    2e94:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2e96:	693b      	ldr	r3, [r7, #16]
    2e98:	3318      	adds	r3, #24
    2e9a:	4618      	mov	r0, r3
    2e9c:	4b27      	ldr	r3, [pc, #156]	; (2f3c <timer_process_counted+0xb4>)
    2e9e:	4798      	blx	r3
    2ea0:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2ea2:	693b      	ldr	r3, [r7, #16]
    2ea4:	695b      	ldr	r3, [r3, #20]
    2ea6:	1c5a      	adds	r2, r3, #1
    2ea8:	693b      	ldr	r3, [r7, #16]
    2eaa:	615a      	str	r2, [r3, #20]
    2eac:	693b      	ldr	r3, [r7, #16]
    2eae:	695b      	ldr	r3, [r3, #20]
    2eb0:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2eb2:	693b      	ldr	r3, [r7, #16]
    2eb4:	7f1b      	ldrb	r3, [r3, #28]
    2eb6:	b2db      	uxtb	r3, r3
    2eb8:	f003 0301 	and.w	r3, r3, #1
    2ebc:	2b00      	cmp	r3, #0
    2ebe:	d106      	bne.n	2ece <timer_process_counted+0x46>
    2ec0:	693b      	ldr	r3, [r7, #16]
    2ec2:	7f1b      	ldrb	r3, [r3, #28]
    2ec4:	b2db      	uxtb	r3, r3
    2ec6:	f003 0302 	and.w	r3, r3, #2
    2eca:	2b00      	cmp	r3, #0
    2ecc:	d027      	beq.n	2f1e <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2ece:	693b      	ldr	r3, [r7, #16]
    2ed0:	7f1b      	ldrb	r3, [r3, #28]
    2ed2:	b2db      	uxtb	r3, r3
    2ed4:	f043 0302 	orr.w	r3, r3, #2
    2ed8:	b2da      	uxtb	r2, r3
    2eda:	693b      	ldr	r3, [r7, #16]
    2edc:	771a      	strb	r2, [r3, #28]
		return;
    2ede:	e029      	b.n	2f34 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2ee0:	697b      	ldr	r3, [r7, #20]
    2ee2:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    2ee4:	693b      	ldr	r3, [r7, #16]
    2ee6:	3318      	adds	r3, #24
    2ee8:	4618      	mov	r0, r3
    2eea:	4b15      	ldr	r3, [pc, #84]	; (2f40 <timer_process_counted+0xb8>)
    2eec:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2eee:	68bb      	ldr	r3, [r7, #8]
    2ef0:	7c1b      	ldrb	r3, [r3, #16]
    2ef2:	2b01      	cmp	r3, #1
    2ef4:	d109      	bne.n	2f0a <timer_process_counted+0x82>
			tmp->time_label = time;
    2ef6:	68bb      	ldr	r3, [r7, #8]
    2ef8:	68fa      	ldr	r2, [r7, #12]
    2efa:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2efc:	693b      	ldr	r3, [r7, #16]
    2efe:	3318      	adds	r3, #24
    2f00:	68fa      	ldr	r2, [r7, #12]
    2f02:	68b9      	ldr	r1, [r7, #8]
    2f04:	4618      	mov	r0, r3
    2f06:	4b0f      	ldr	r3, [pc, #60]	; (2f44 <timer_process_counted+0xbc>)
    2f08:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2f0a:	693b      	ldr	r3, [r7, #16]
    2f0c:	3318      	adds	r3, #24
    2f0e:	4618      	mov	r0, r3
    2f10:	4b0a      	ldr	r3, [pc, #40]	; (2f3c <timer_process_counted+0xb4>)
    2f12:	4798      	blx	r3
    2f14:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2f16:	68bb      	ldr	r3, [r7, #8]
    2f18:	68db      	ldr	r3, [r3, #12]
    2f1a:	68b8      	ldr	r0, [r7, #8]
    2f1c:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2f1e:	697b      	ldr	r3, [r7, #20]
    2f20:	2b00      	cmp	r3, #0
    2f22:	d007      	beq.n	2f34 <timer_process_counted+0xac>
    2f24:	697b      	ldr	r3, [r7, #20]
    2f26:	685b      	ldr	r3, [r3, #4]
    2f28:	68fa      	ldr	r2, [r7, #12]
    2f2a:	1ad2      	subs	r2, r2, r3
    2f2c:	697b      	ldr	r3, [r7, #20]
    2f2e:	689b      	ldr	r3, [r3, #8]
    2f30:	429a      	cmp	r2, r3
    2f32:	d2d5      	bcs.n	2ee0 <timer_process_counted+0x58>
	}
}
    2f34:	3718      	adds	r7, #24
    2f36:	46bd      	mov	sp, r7
    2f38:	bd80      	pop	{r7, pc}
    2f3a:	bf00      	nop
    2f3c:	00002a5d 	.word	0x00002a5d
    2f40:	000039f5 	.word	0x000039f5
    2f44:	00002dd9 	.word	0x00002dd9

00002f48 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2f48:	b480      	push	{r7}
    2f4a:	b085      	sub	sp, #20
    2f4c:	af00      	add	r7, sp, #0
    2f4e:	4603      	mov	r3, r0
    2f50:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2f52:	2300      	movs	r3, #0
    2f54:	73fb      	strb	r3, [r7, #15]
    2f56:	e029      	b.n	2fac <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2f5c:	4a19      	ldr	r2, [pc, #100]	; (2fc4 <_usb_d_find_ep+0x7c>)
    2f5e:	015b      	lsls	r3, r3, #5
    2f60:	4413      	add	r3, r2
    2f62:	3301      	adds	r3, #1
    2f64:	781b      	ldrb	r3, [r3, #0]
    2f66:	79fa      	ldrb	r2, [r7, #7]
    2f68:	429a      	cmp	r2, r3
    2f6a:	d102      	bne.n	2f72 <_usb_d_find_ep+0x2a>
			return i;
    2f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2f70:	e022      	b.n	2fb8 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2f76:	4a13      	ldr	r2, [pc, #76]	; (2fc4 <_usb_d_find_ep+0x7c>)
    2f78:	015b      	lsls	r3, r3, #5
    2f7a:	4413      	add	r3, r2
    2f7c:	781b      	ldrb	r3, [r3, #0]
    2f7e:	2b00      	cmp	r3, #0
    2f80:	d10e      	bne.n	2fa0 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2f82:	79fb      	ldrb	r3, [r7, #7]
    2f84:	f003 030f 	and.w	r3, r3, #15
    2f88:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2f8c:	490d      	ldr	r1, [pc, #52]	; (2fc4 <_usb_d_find_ep+0x7c>)
    2f8e:	0152      	lsls	r2, r2, #5
    2f90:	440a      	add	r2, r1
    2f92:	3201      	adds	r2, #1
    2f94:	7812      	ldrb	r2, [r2, #0]
    2f96:	4293      	cmp	r3, r2
    2f98:	d102      	bne.n	2fa0 <_usb_d_find_ep+0x58>
			return i;
    2f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2f9e:	e00b      	b.n	2fb8 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2fa4:	b2db      	uxtb	r3, r3
    2fa6:	3301      	adds	r3, #1
    2fa8:	b2db      	uxtb	r3, r3
    2faa:	73fb      	strb	r3, [r7, #15]
    2fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2fb0:	2b03      	cmp	r3, #3
    2fb2:	ddd1      	ble.n	2f58 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    2fb4:	f04f 33ff 	mov.w	r3, #4294967295
}
    2fb8:	4618      	mov	r0, r3
    2fba:	3714      	adds	r7, #20
    2fbc:	46bd      	mov	sp, r7
    2fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fc2:	4770      	bx	lr
    2fc4:	2000085c 	.word	0x2000085c

00002fc8 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    2fc8:	b580      	push	{r7, lr}
    2fca:	b088      	sub	sp, #32
    2fcc:	af00      	add	r7, sp, #0
    2fce:	60ba      	str	r2, [r7, #8]
    2fd0:	607b      	str	r3, [r7, #4]
    2fd2:	4603      	mov	r3, r0
    2fd4:	73fb      	strb	r3, [r7, #15]
    2fd6:	460b      	mov	r3, r1
    2fd8:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    2fda:	68bb      	ldr	r3, [r7, #8]
    2fdc:	617b      	str	r3, [r7, #20]
    2fde:	687b      	ldr	r3, [r7, #4]
    2fe0:	61bb      	str	r3, [r7, #24]
    2fe2:	7bbb      	ldrb	r3, [r7, #14]
    2fe4:	2b00      	cmp	r3, #0
    2fe6:	d004      	beq.n	2ff2 <_usb_d_trans+0x2a>
    2fe8:	7bfb      	ldrb	r3, [r7, #15]
    2fea:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2fee:	b2db      	uxtb	r3, r3
    2ff0:	e003      	b.n	2ffa <_usb_d_trans+0x32>
    2ff2:	7bfb      	ldrb	r3, [r7, #15]
    2ff4:	f003 030f 	and.w	r3, r3, #15
    2ff8:	b2db      	uxtb	r3, r3
    2ffa:	773b      	strb	r3, [r7, #28]
    2ffc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3000:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    3002:	f107 0314 	add.w	r3, r7, #20
    3006:	4618      	mov	r0, r3
    3008:	4b03      	ldr	r3, [pc, #12]	; (3018 <_usb_d_trans+0x50>)
    300a:	4798      	blx	r3
    300c:	4603      	mov	r3, r0
}
    300e:	4618      	mov	r0, r3
    3010:	3720      	adds	r7, #32
    3012:	46bd      	mov	sp, r7
    3014:	bd80      	pop	{r7, pc}
    3016:	bf00      	nop
    3018:	0000af01 	.word	0x0000af01

0000301c <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    301c:	b480      	push	{r7}
    301e:	b085      	sub	sp, #20
    3020:	af00      	add	r7, sp, #0
    3022:	60f8      	str	r0, [r7, #12]
    3024:	60b9      	str	r1, [r7, #8]
    3026:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    3028:	2300      	movs	r3, #0
}
    302a:	4618      	mov	r0, r3
    302c:	3714      	adds	r7, #20
    302e:	46bd      	mov	sp, r7
    3030:	f85d 7b04 	ldr.w	r7, [sp], #4
    3034:	4770      	bx	lr
	...

00003038 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    3038:	b580      	push	{r7, lr}
    303a:	b086      	sub	sp, #24
    303c:	af00      	add	r7, sp, #0
    303e:	4603      	mov	r3, r0
    3040:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3042:	79fb      	ldrb	r3, [r7, #7]
    3044:	4618      	mov	r0, r3
    3046:	4b2a      	ldr	r3, [pc, #168]	; (30f0 <usb_d_cb_trans_setup+0xb8>)
    3048:	4798      	blx	r3
    304a:	4603      	mov	r3, r0
    304c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    304e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3052:	015b      	lsls	r3, r3, #5
    3054:	4a27      	ldr	r2, [pc, #156]	; (30f4 <usb_d_cb_trans_setup+0xbc>)
    3056:	4413      	add	r3, r2
    3058:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    305a:	693b      	ldr	r3, [r7, #16]
    305c:	330c      	adds	r3, #12
    305e:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    3060:	79fb      	ldrb	r3, [r7, #7]
    3062:	68f9      	ldr	r1, [r7, #12]
    3064:	4618      	mov	r0, r3
    3066:	4b24      	ldr	r3, [pc, #144]	; (30f8 <usb_d_cb_trans_setup+0xc0>)
    3068:	4798      	blx	r3
    306a:	4603      	mov	r3, r0
    306c:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    306e:	7afb      	ldrb	r3, [r7, #11]
    3070:	2b08      	cmp	r3, #8
    3072:	d00d      	beq.n	3090 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3074:	79fb      	ldrb	r3, [r7, #7]
    3076:	2101      	movs	r1, #1
    3078:	4618      	mov	r0, r3
    307a:	4b20      	ldr	r3, [pc, #128]	; (30fc <usb_d_cb_trans_setup+0xc4>)
    307c:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    307e:	79fb      	ldrb	r3, [r7, #7]
    3080:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3084:	b2db      	uxtb	r3, r3
    3086:	2101      	movs	r1, #1
    3088:	4618      	mov	r0, r3
    308a:	4b1c      	ldr	r3, [pc, #112]	; (30fc <usb_d_cb_trans_setup+0xc4>)
    308c:	4798      	blx	r3
		return;
    308e:	e02b      	b.n	30e8 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3090:	79fb      	ldrb	r3, [r7, #7]
    3092:	2100      	movs	r1, #0
    3094:	4618      	mov	r0, r3
    3096:	4b19      	ldr	r3, [pc, #100]	; (30fc <usb_d_cb_trans_setup+0xc4>)
    3098:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    309a:	79fb      	ldrb	r3, [r7, #7]
    309c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    30a0:	b2db      	uxtb	r3, r3
    30a2:	2100      	movs	r1, #0
    30a4:	4618      	mov	r0, r3
    30a6:	4b15      	ldr	r3, [pc, #84]	; (30fc <usb_d_cb_trans_setup+0xc4>)
    30a8:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    30aa:	693b      	ldr	r3, [r7, #16]
    30ac:	2201      	movs	r2, #1
    30ae:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    30b0:	693b      	ldr	r3, [r7, #16]
    30b2:	695b      	ldr	r3, [r3, #20]
    30b4:	79fa      	ldrb	r2, [r7, #7]
    30b6:	68f9      	ldr	r1, [r7, #12]
    30b8:	4610      	mov	r0, r2
    30ba:	4798      	blx	r3
    30bc:	4603      	mov	r3, r0
    30be:	f083 0301 	eor.w	r3, r3, #1
    30c2:	b2db      	uxtb	r3, r3
    30c4:	2b00      	cmp	r3, #0
    30c6:	d00f      	beq.n	30e8 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    30c8:	693b      	ldr	r3, [r7, #16]
    30ca:	2205      	movs	r2, #5
    30cc:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    30ce:	79fb      	ldrb	r3, [r7, #7]
    30d0:	2101      	movs	r1, #1
    30d2:	4618      	mov	r0, r3
    30d4:	4b09      	ldr	r3, [pc, #36]	; (30fc <usb_d_cb_trans_setup+0xc4>)
    30d6:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    30d8:	79fb      	ldrb	r3, [r7, #7]
    30da:	f063 037f 	orn	r3, r3, #127	; 0x7f
    30de:	b2db      	uxtb	r3, r3
    30e0:	2101      	movs	r1, #1
    30e2:	4618      	mov	r0, r3
    30e4:	4b05      	ldr	r3, [pc, #20]	; (30fc <usb_d_cb_trans_setup+0xc4>)
    30e6:	4798      	blx	r3
	}
}
    30e8:	3718      	adds	r7, #24
    30ea:	46bd      	mov	sp, r7
    30ec:	bd80      	pop	{r7, pc}
    30ee:	bf00      	nop
    30f0:	00002f49 	.word	0x00002f49
    30f4:	2000085c 	.word	0x2000085c
    30f8:	0000ae59 	.word	0x0000ae59
    30fc:	0000acd1 	.word	0x0000acd1

00003100 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3100:	b580      	push	{r7, lr}
    3102:	b084      	sub	sp, #16
    3104:	af00      	add	r7, sp, #0
    3106:	4603      	mov	r3, r0
    3108:	6039      	str	r1, [r7, #0]
    310a:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    310c:	79fb      	ldrb	r3, [r7, #7]
    310e:	4618      	mov	r0, r3
    3110:	4b0d      	ldr	r3, [pc, #52]	; (3148 <usb_d_cb_trans_more+0x48>)
    3112:	4798      	blx	r3
    3114:	4603      	mov	r3, r0
    3116:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3118:	f997 300f 	ldrsb.w	r3, [r7, #15]
    311c:	015b      	lsls	r3, r3, #5
    311e:	4a0b      	ldr	r2, [pc, #44]	; (314c <usb_d_cb_trans_more+0x4c>)
    3120:	4413      	add	r3, r2
    3122:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    3124:	68bb      	ldr	r3, [r7, #8]
    3126:	789b      	ldrb	r3, [r3, #2]
    3128:	2b03      	cmp	r3, #3
    312a:	d107      	bne.n	313c <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    312c:	68bb      	ldr	r3, [r7, #8]
    312e:	699b      	ldr	r3, [r3, #24]
    3130:	79fa      	ldrb	r2, [r7, #7]
    3132:	6839      	ldr	r1, [r7, #0]
    3134:	4610      	mov	r0, r2
    3136:	4798      	blx	r3
    3138:	4603      	mov	r3, r0
    313a:	e000      	b.n	313e <usb_d_cb_trans_more+0x3e>
	}
	return false;
    313c:	2300      	movs	r3, #0
}
    313e:	4618      	mov	r0, r3
    3140:	3710      	adds	r7, #16
    3142:	46bd      	mov	sp, r7
    3144:	bd80      	pop	{r7, pc}
    3146:	bf00      	nop
    3148:	00002f49 	.word	0x00002f49
    314c:	2000085c 	.word	0x2000085c

00003150 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    3150:	b590      	push	{r4, r7, lr}
    3152:	b087      	sub	sp, #28
    3154:	af02      	add	r7, sp, #8
    3156:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    3158:	687b      	ldr	r3, [r7, #4]
    315a:	789b      	ldrb	r3, [r3, #2]
    315c:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    315e:	687b      	ldr	r3, [r7, #4]
    3160:	7b1b      	ldrb	r3, [r3, #12]
    3162:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3166:	2b00      	cmp	r3, #0
    3168:	bf14      	ite	ne
    316a:	2301      	movne	r3, #1
    316c:	2300      	moveq	r3, #0
    316e:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    3170:	7bfb      	ldrb	r3, [r7, #15]
    3172:	2b03      	cmp	r3, #3
    3174:	d13a      	bne.n	31ec <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    3176:	687b      	ldr	r3, [r7, #4]
    3178:	69db      	ldr	r3, [r3, #28]
    317a:	687a      	ldr	r2, [r7, #4]
    317c:	7850      	ldrb	r0, [r2, #1]
    317e:	687a      	ldr	r2, [r7, #4]
    3180:	320c      	adds	r2, #12
    3182:	2101      	movs	r1, #1
    3184:	4798      	blx	r3
    3186:	4603      	mov	r3, r0
    3188:	737b      	strb	r3, [r7, #13]
		if (err) {
    318a:	7b7b      	ldrb	r3, [r7, #13]
    318c:	2b00      	cmp	r3, #0
    318e:	d015      	beq.n	31bc <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    3190:	687b      	ldr	r3, [r7, #4]
    3192:	2205      	movs	r2, #5
    3194:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    3196:	687b      	ldr	r3, [r7, #4]
    3198:	2202      	movs	r2, #2
    319a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    319c:	7bbb      	ldrb	r3, [r7, #14]
    319e:	2b00      	cmp	r3, #0
    31a0:	d002      	beq.n	31a8 <usb_d_ctrl_trans_done+0x58>
    31a2:	687b      	ldr	r3, [r7, #4]
    31a4:	785b      	ldrb	r3, [r3, #1]
    31a6:	e004      	b.n	31b2 <usb_d_ctrl_trans_done+0x62>
    31a8:	687b      	ldr	r3, [r7, #4]
    31aa:	785b      	ldrb	r3, [r3, #1]
    31ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    31b0:	b2db      	uxtb	r3, r3
    31b2:	2101      	movs	r1, #1
    31b4:	4618      	mov	r0, r3
    31b6:	4b15      	ldr	r3, [pc, #84]	; (320c <usb_d_ctrl_trans_done+0xbc>)
    31b8:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    31ba:	e022      	b.n	3202 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    31bc:	687b      	ldr	r3, [r7, #4]
    31be:	2204      	movs	r2, #4
    31c0:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    31c2:	687b      	ldr	r3, [r7, #4]
    31c4:	7858      	ldrb	r0, [r3, #1]
    31c6:	7bbb      	ldrb	r3, [r7, #14]
    31c8:	2b00      	cmp	r3, #0
    31ca:	bf14      	ite	ne
    31cc:	2301      	movne	r3, #1
    31ce:	2300      	moveq	r3, #0
    31d0:	b2db      	uxtb	r3, r3
    31d2:	f083 0301 	eor.w	r3, r3, #1
    31d6:	b2db      	uxtb	r3, r3
    31d8:	f003 0301 	and.w	r3, r3, #1
    31dc:	b2d9      	uxtb	r1, r3
    31de:	2301      	movs	r3, #1
    31e0:	9300      	str	r3, [sp, #0]
    31e2:	2300      	movs	r3, #0
    31e4:	2200      	movs	r2, #0
    31e6:	4c0a      	ldr	r4, [pc, #40]	; (3210 <usb_d_ctrl_trans_done+0xc0>)
    31e8:	47a0      	blx	r4
}
    31ea:	e00a      	b.n	3202 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    31ec:	687b      	ldr	r3, [r7, #4]
    31ee:	69db      	ldr	r3, [r3, #28]
    31f0:	687a      	ldr	r2, [r7, #4]
    31f2:	7850      	ldrb	r0, [r2, #1]
    31f4:	687a      	ldr	r2, [r7, #4]
    31f6:	320c      	adds	r2, #12
    31f8:	2100      	movs	r1, #0
    31fa:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    31fc:	687b      	ldr	r3, [r7, #4]
    31fe:	2202      	movs	r2, #2
    3200:	709a      	strb	r2, [r3, #2]
}
    3202:	bf00      	nop
    3204:	3714      	adds	r7, #20
    3206:	46bd      	mov	sp, r7
    3208:	bd90      	pop	{r4, r7, pc}
    320a:	bf00      	nop
    320c:	0000acd1 	.word	0x0000acd1
    3210:	00002fc9 	.word	0x00002fc9

00003214 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    3214:	b580      	push	{r7, lr}
    3216:	b086      	sub	sp, #24
    3218:	af00      	add	r7, sp, #0
    321a:	4603      	mov	r3, r0
    321c:	60b9      	str	r1, [r7, #8]
    321e:	607a      	str	r2, [r7, #4]
    3220:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3222:	7bfb      	ldrb	r3, [r7, #15]
    3224:	4618      	mov	r0, r3
    3226:	4b2f      	ldr	r3, [pc, #188]	; (32e4 <_usb_d_cb_trans_done+0xd0>)
    3228:	4798      	blx	r3
    322a:	4603      	mov	r3, r0
    322c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    322e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3232:	015b      	lsls	r3, r3, #5
    3234:	4a2c      	ldr	r2, [pc, #176]	; (32e8 <_usb_d_cb_trans_done+0xd4>)
    3236:	4413      	add	r3, r2
    3238:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    323a:	68bb      	ldr	r3, [r7, #8]
    323c:	2b00      	cmp	r3, #0
    323e:	d10e      	bne.n	325e <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3240:	693b      	ldr	r3, [r7, #16]
    3242:	2200      	movs	r2, #0
    3244:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3246:	693b      	ldr	r3, [r7, #16]
    3248:	781b      	ldrb	r3, [r3, #0]
    324a:	2b00      	cmp	r3, #0
    324c:	d103      	bne.n	3256 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    324e:	6938      	ldr	r0, [r7, #16]
    3250:	4b26      	ldr	r3, [pc, #152]	; (32ec <_usb_d_cb_trans_done+0xd8>)
    3252:	4798      	blx	r3
			return;
    3254:	e043      	b.n	32de <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3256:	693b      	ldr	r3, [r7, #16]
    3258:	2201      	movs	r2, #1
    325a:	709a      	strb	r2, [r3, #2]
    325c:	e038      	b.n	32d0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    325e:	68bb      	ldr	r3, [r7, #8]
    3260:	2b01      	cmp	r3, #1
    3262:	d113      	bne.n	328c <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    3264:	693b      	ldr	r3, [r7, #16]
    3266:	2202      	movs	r2, #2
    3268:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    326a:	693b      	ldr	r3, [r7, #16]
    326c:	781b      	ldrb	r3, [r3, #0]
    326e:	2b00      	cmp	r3, #0
    3270:	d108      	bne.n	3284 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3272:	693b      	ldr	r3, [r7, #16]
    3274:	2202      	movs	r2, #2
    3276:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3278:	7bfb      	ldrb	r3, [r7, #15]
    327a:	2100      	movs	r1, #0
    327c:	4618      	mov	r0, r3
    327e:	4b1c      	ldr	r3, [pc, #112]	; (32f0 <_usb_d_cb_trans_done+0xdc>)
    3280:	4798      	blx	r3
    3282:	e025      	b.n	32d0 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    3284:	693b      	ldr	r3, [r7, #16]
    3286:	2205      	movs	r2, #5
    3288:	709a      	strb	r2, [r3, #2]
    328a:	e021      	b.n	32d0 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    328c:	68bb      	ldr	r3, [r7, #8]
    328e:	2b02      	cmp	r3, #2
    3290:	d10e      	bne.n	32b0 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    3292:	693b      	ldr	r3, [r7, #16]
    3294:	2204      	movs	r2, #4
    3296:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3298:	693b      	ldr	r3, [r7, #16]
    329a:	781b      	ldrb	r3, [r3, #0]
    329c:	2b00      	cmp	r3, #0
    329e:	d103      	bne.n	32a8 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    32a0:	693b      	ldr	r3, [r7, #16]
    32a2:	2202      	movs	r2, #2
    32a4:	709a      	strb	r2, [r3, #2]
			return;
    32a6:	e01a      	b.n	32de <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    32a8:	693b      	ldr	r3, [r7, #16]
    32aa:	2201      	movs	r2, #1
    32ac:	709a      	strb	r2, [r3, #2]
    32ae:	e00f      	b.n	32d0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    32b0:	68bb      	ldr	r3, [r7, #8]
    32b2:	2b03      	cmp	r3, #3
    32b4:	d106      	bne.n	32c4 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    32b6:	693b      	ldr	r3, [r7, #16]
    32b8:	2200      	movs	r2, #0
    32ba:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    32bc:	693b      	ldr	r3, [r7, #16]
    32be:	2205      	movs	r2, #5
    32c0:	70da      	strb	r2, [r3, #3]
    32c2:	e005      	b.n	32d0 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    32c4:	693b      	ldr	r3, [r7, #16]
    32c6:	2206      	movs	r2, #6
    32c8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    32ca:	693b      	ldr	r3, [r7, #16]
    32cc:	2206      	movs	r2, #6
    32ce:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    32d0:	693b      	ldr	r3, [r7, #16]
    32d2:	69db      	ldr	r3, [r3, #28]
    32d4:	693a      	ldr	r2, [r7, #16]
    32d6:	78d1      	ldrb	r1, [r2, #3]
    32d8:	687a      	ldr	r2, [r7, #4]
    32da:	7bf8      	ldrb	r0, [r7, #15]
    32dc:	4798      	blx	r3
}
    32de:	3718      	adds	r7, #24
    32e0:	46bd      	mov	sp, r7
    32e2:	bd80      	pop	{r7, pc}
    32e4:	00002f49 	.word	0x00002f49
    32e8:	2000085c 	.word	0x2000085c
    32ec:	00003151 	.word	0x00003151
    32f0:	0000acd1 	.word	0x0000acd1

000032f4 <usb_d_init>:

int32_t usb_d_init(void)
{
    32f4:	b580      	push	{r7, lr}
    32f6:	b082      	sub	sp, #8
    32f8:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    32fa:	4b21      	ldr	r3, [pc, #132]	; (3380 <usb_d_init+0x8c>)
    32fc:	4798      	blx	r3
    32fe:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3300:	683b      	ldr	r3, [r7, #0]
    3302:	2b00      	cmp	r3, #0
    3304:	da01      	bge.n	330a <usb_d_init+0x16>
		return rc;
    3306:	683b      	ldr	r3, [r7, #0]
    3308:	e036      	b.n	3378 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    330a:	2280      	movs	r2, #128	; 0x80
    330c:	2100      	movs	r1, #0
    330e:	481d      	ldr	r0, [pc, #116]	; (3384 <usb_d_init+0x90>)
    3310:	4b1d      	ldr	r3, [pc, #116]	; (3388 <usb_d_init+0x94>)
    3312:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3314:	2300      	movs	r3, #0
    3316:	71fb      	strb	r3, [r7, #7]
    3318:	e01e      	b.n	3358 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    331a:	79fb      	ldrb	r3, [r7, #7]
    331c:	4a19      	ldr	r2, [pc, #100]	; (3384 <usb_d_init+0x90>)
    331e:	015b      	lsls	r3, r3, #5
    3320:	4413      	add	r3, r2
    3322:	3301      	adds	r3, #1
    3324:	22ff      	movs	r2, #255	; 0xff
    3326:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    3328:	79fb      	ldrb	r3, [r7, #7]
    332a:	4a16      	ldr	r2, [pc, #88]	; (3384 <usb_d_init+0x90>)
    332c:	015b      	lsls	r3, r3, #5
    332e:	4413      	add	r3, r2
    3330:	3314      	adds	r3, #20
    3332:	4a16      	ldr	r2, [pc, #88]	; (338c <usb_d_init+0x98>)
    3334:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    3336:	79fb      	ldrb	r3, [r7, #7]
    3338:	4a12      	ldr	r2, [pc, #72]	; (3384 <usb_d_init+0x90>)
    333a:	015b      	lsls	r3, r3, #5
    333c:	4413      	add	r3, r2
    333e:	3318      	adds	r3, #24
    3340:	4a12      	ldr	r2, [pc, #72]	; (338c <usb_d_init+0x98>)
    3342:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    3344:	79fb      	ldrb	r3, [r7, #7]
    3346:	4a0f      	ldr	r2, [pc, #60]	; (3384 <usb_d_init+0x90>)
    3348:	015b      	lsls	r3, r3, #5
    334a:	4413      	add	r3, r2
    334c:	331c      	adds	r3, #28
    334e:	4a0f      	ldr	r2, [pc, #60]	; (338c <usb_d_init+0x98>)
    3350:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3352:	79fb      	ldrb	r3, [r7, #7]
    3354:	3301      	adds	r3, #1
    3356:	71fb      	strb	r3, [r7, #7]
    3358:	79fb      	ldrb	r3, [r7, #7]
    335a:	2b03      	cmp	r3, #3
    335c:	d9dd      	bls.n	331a <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    335e:	490c      	ldr	r1, [pc, #48]	; (3390 <usb_d_init+0x9c>)
    3360:	2000      	movs	r0, #0
    3362:	4b0c      	ldr	r3, [pc, #48]	; (3394 <usb_d_init+0xa0>)
    3364:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    3366:	490c      	ldr	r1, [pc, #48]	; (3398 <usb_d_init+0xa4>)
    3368:	2001      	movs	r0, #1
    336a:	4b0a      	ldr	r3, [pc, #40]	; (3394 <usb_d_init+0xa0>)
    336c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    336e:	490b      	ldr	r1, [pc, #44]	; (339c <usb_d_init+0xa8>)
    3370:	2002      	movs	r0, #2
    3372:	4b08      	ldr	r3, [pc, #32]	; (3394 <usb_d_init+0xa0>)
    3374:	4798      	blx	r3
	return ERR_NONE;
    3376:	2300      	movs	r3, #0
}
    3378:	4618      	mov	r0, r3
    337a:	3708      	adds	r7, #8
    337c:	46bd      	mov	sp, r7
    337e:	bd80      	pop	{r7, pc}
    3380:	0000a519 	.word	0x0000a519
    3384:	2000085c 	.word	0x2000085c
    3388:	0000eead 	.word	0x0000eead
    338c:	0000301d 	.word	0x0000301d
    3390:	00003039 	.word	0x00003039
    3394:	0000b161 	.word	0x0000b161
    3398:	00003101 	.word	0x00003101
    339c:	00003215 	.word	0x00003215

000033a0 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    33a0:	b580      	push	{r7, lr}
    33a2:	b082      	sub	sp, #8
    33a4:	af00      	add	r7, sp, #0
    33a6:	4603      	mov	r3, r0
    33a8:	6039      	str	r1, [r7, #0]
    33aa:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    33ac:	79fb      	ldrb	r3, [r7, #7]
    33ae:	6839      	ldr	r1, [r7, #0]
    33b0:	4618      	mov	r0, r3
    33b2:	4b03      	ldr	r3, [pc, #12]	; (33c0 <usb_d_register_callback+0x20>)
    33b4:	4798      	blx	r3
}
    33b6:	bf00      	nop
    33b8:	3708      	adds	r7, #8
    33ba:	46bd      	mov	sp, r7
    33bc:	bd80      	pop	{r7, pc}
    33be:	bf00      	nop
    33c0:	0000b119 	.word	0x0000b119

000033c4 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    33c4:	b580      	push	{r7, lr}
    33c6:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    33c8:	4b02      	ldr	r3, [pc, #8]	; (33d4 <usb_d_enable+0x10>)
    33ca:	4798      	blx	r3
    33cc:	4603      	mov	r3, r0
}
    33ce:	4618      	mov	r0, r3
    33d0:	bd80      	pop	{r7, pc}
    33d2:	bf00      	nop
    33d4:	0000a609 	.word	0x0000a609

000033d8 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    33d8:	b580      	push	{r7, lr}
    33da:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    33dc:	4b01      	ldr	r3, [pc, #4]	; (33e4 <usb_d_attach+0xc>)
    33de:	4798      	blx	r3
}
    33e0:	bf00      	nop
    33e2:	bd80      	pop	{r7, pc}
    33e4:	0000a68d 	.word	0x0000a68d

000033e8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    33e8:	b580      	push	{r7, lr}
    33ea:	b082      	sub	sp, #8
    33ec:	af00      	add	r7, sp, #0
    33ee:	4603      	mov	r3, r0
    33f0:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    33f2:	79fb      	ldrb	r3, [r7, #7]
    33f4:	4618      	mov	r0, r3
    33f6:	4b03      	ldr	r3, [pc, #12]	; (3404 <usb_d_set_address+0x1c>)
    33f8:	4798      	blx	r3
}
    33fa:	bf00      	nop
    33fc:	3708      	adds	r7, #8
    33fe:	46bd      	mov	sp, r7
    3400:	bd80      	pop	{r7, pc}
    3402:	bf00      	nop
    3404:	0000a6a1 	.word	0x0000a6a1

00003408 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3408:	b580      	push	{r7, lr}
    340a:	b082      	sub	sp, #8
    340c:	af00      	add	r7, sp, #0
    340e:	4603      	mov	r3, r0
    3410:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    3412:	79fb      	ldrb	r3, [r7, #7]
    3414:	b29b      	uxth	r3, r3
    3416:	461a      	mov	r2, r3
    3418:	2100      	movs	r1, #0
    341a:	2000      	movs	r0, #0
    341c:	4b03      	ldr	r3, [pc, #12]	; (342c <usb_d_ep0_init+0x24>)
    341e:	4798      	blx	r3
    3420:	4603      	mov	r3, r0
}
    3422:	4618      	mov	r0, r3
    3424:	3708      	adds	r7, #8
    3426:	46bd      	mov	sp, r7
    3428:	bd80      	pop	{r7, pc}
    342a:	bf00      	nop
    342c:	00003431 	.word	0x00003431

00003430 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3430:	b580      	push	{r7, lr}
    3432:	b086      	sub	sp, #24
    3434:	af00      	add	r7, sp, #0
    3436:	4603      	mov	r3, r0
    3438:	71fb      	strb	r3, [r7, #7]
    343a:	460b      	mov	r3, r1
    343c:	71bb      	strb	r3, [r7, #6]
    343e:	4613      	mov	r3, r2
    3440:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    3442:	79fb      	ldrb	r3, [r7, #7]
    3444:	4618      	mov	r0, r3
    3446:	4b1e      	ldr	r3, [pc, #120]	; (34c0 <usb_d_ep_init+0x90>)
    3448:	4798      	blx	r3
    344a:	4603      	mov	r3, r0
    344c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    344e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3452:	015b      	lsls	r3, r3, #5
    3454:	4a1b      	ldr	r2, [pc, #108]	; (34c4 <usb_d_ep_init+0x94>)
    3456:	4413      	add	r3, r2
    3458:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    345a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    345e:	2b00      	cmp	r3, #0
    3460:	db02      	blt.n	3468 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    3462:	f06f 0313 	mvn.w	r3, #19
    3466:	e027      	b.n	34b8 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    3468:	20ff      	movs	r0, #255	; 0xff
    346a:	4b15      	ldr	r3, [pc, #84]	; (34c0 <usb_d_ep_init+0x90>)
    346c:	4798      	blx	r3
    346e:	4603      	mov	r3, r0
    3470:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    3472:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3476:	2b00      	cmp	r3, #0
    3478:	da02      	bge.n	3480 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    347a:	f06f 0314 	mvn.w	r3, #20
    347e:	e01b      	b.n	34b8 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3480:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3484:	015b      	lsls	r3, r3, #5
    3486:	4a0f      	ldr	r2, [pc, #60]	; (34c4 <usb_d_ep_init+0x94>)
    3488:	4413      	add	r3, r2
    348a:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    348c:	88ba      	ldrh	r2, [r7, #4]
    348e:	79b9      	ldrb	r1, [r7, #6]
    3490:	79fb      	ldrb	r3, [r7, #7]
    3492:	4618      	mov	r0, r3
    3494:	4b0c      	ldr	r3, [pc, #48]	; (34c8 <usb_d_ep_init+0x98>)
    3496:	4798      	blx	r3
    3498:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    349a:	68fb      	ldr	r3, [r7, #12]
    349c:	2b00      	cmp	r3, #0
    349e:	da01      	bge.n	34a4 <usb_d_ep_init+0x74>
		return rc;
    34a0:	68fb      	ldr	r3, [r7, #12]
    34a2:	e009      	b.n	34b8 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    34a4:	693b      	ldr	r3, [r7, #16]
    34a6:	79fa      	ldrb	r2, [r7, #7]
    34a8:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    34aa:	79bb      	ldrb	r3, [r7, #6]
    34ac:	f003 0303 	and.w	r3, r3, #3
    34b0:	b2da      	uxtb	r2, r3
    34b2:	693b      	ldr	r3, [r7, #16]
    34b4:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    34b6:	2300      	movs	r3, #0
}
    34b8:	4618      	mov	r0, r3
    34ba:	3718      	adds	r7, #24
    34bc:	46bd      	mov	sp, r7
    34be:	bd80      	pop	{r7, pc}
    34c0:	00002f49 	.word	0x00002f49
    34c4:	2000085c 	.word	0x2000085c
    34c8:	0000a741 	.word	0x0000a741

000034cc <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    34cc:	b580      	push	{r7, lr}
    34ce:	b084      	sub	sp, #16
    34d0:	af00      	add	r7, sp, #0
    34d2:	4603      	mov	r3, r0
    34d4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    34d6:	79fb      	ldrb	r3, [r7, #7]
    34d8:	4618      	mov	r0, r3
    34da:	4b0d      	ldr	r3, [pc, #52]	; (3510 <usb_d_ep_deinit+0x44>)
    34dc:	4798      	blx	r3
    34de:	4603      	mov	r3, r0
    34e0:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    34e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    34e6:	015b      	lsls	r3, r3, #5
    34e8:	4a0a      	ldr	r2, [pc, #40]	; (3514 <usb_d_ep_deinit+0x48>)
    34ea:	4413      	add	r3, r2
    34ec:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    34ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
    34f2:	2b00      	cmp	r3, #0
    34f4:	db07      	blt.n	3506 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    34f6:	79fb      	ldrb	r3, [r7, #7]
    34f8:	4618      	mov	r0, r3
    34fa:	4b07      	ldr	r3, [pc, #28]	; (3518 <usb_d_ep_deinit+0x4c>)
    34fc:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    34fe:	68bb      	ldr	r3, [r7, #8]
    3500:	22ff      	movs	r2, #255	; 0xff
    3502:	705a      	strb	r2, [r3, #1]
    3504:	e000      	b.n	3508 <usb_d_ep_deinit+0x3c>
		return;
    3506:	bf00      	nop
}
    3508:	3710      	adds	r7, #16
    350a:	46bd      	mov	sp, r7
    350c:	bd80      	pop	{r7, pc}
    350e:	bf00      	nop
    3510:	00002f49 	.word	0x00002f49
    3514:	2000085c 	.word	0x2000085c
    3518:	0000a875 	.word	0x0000a875

0000351c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    351c:	b580      	push	{r7, lr}
    351e:	b086      	sub	sp, #24
    3520:	af00      	add	r7, sp, #0
    3522:	4603      	mov	r3, r0
    3524:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3526:	79fb      	ldrb	r3, [r7, #7]
    3528:	4618      	mov	r0, r3
    352a:	4b15      	ldr	r3, [pc, #84]	; (3580 <usb_d_ep_enable+0x64>)
    352c:	4798      	blx	r3
    352e:	4603      	mov	r3, r0
    3530:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3532:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3536:	015b      	lsls	r3, r3, #5
    3538:	4a12      	ldr	r2, [pc, #72]	; (3584 <usb_d_ep_enable+0x68>)
    353a:	4413      	add	r3, r2
    353c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    353e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3542:	2b00      	cmp	r3, #0
    3544:	da02      	bge.n	354c <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    3546:	f06f 0311 	mvn.w	r3, #17
    354a:	e014      	b.n	3576 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    354c:	693b      	ldr	r3, [r7, #16]
    354e:	781b      	ldrb	r3, [r3, #0]
    3550:	2b00      	cmp	r3, #0
    3552:	d101      	bne.n	3558 <usb_d_ep_enable+0x3c>
    3554:	2202      	movs	r2, #2
    3556:	e000      	b.n	355a <usb_d_ep_enable+0x3e>
    3558:	2201      	movs	r2, #1
    355a:	693b      	ldr	r3, [r7, #16]
    355c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    355e:	79fb      	ldrb	r3, [r7, #7]
    3560:	4618      	mov	r0, r3
    3562:	4b09      	ldr	r3, [pc, #36]	; (3588 <usb_d_ep_enable+0x6c>)
    3564:	4798      	blx	r3
    3566:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3568:	68fb      	ldr	r3, [r7, #12]
    356a:	2b00      	cmp	r3, #0
    356c:	da02      	bge.n	3574 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    356e:	693b      	ldr	r3, [r7, #16]
    3570:	2200      	movs	r2, #0
    3572:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3574:	68fb      	ldr	r3, [r7, #12]
}
    3576:	4618      	mov	r0, r3
    3578:	3718      	adds	r7, #24
    357a:	46bd      	mov	sp, r7
    357c:	bd80      	pop	{r7, pc}
    357e:	bf00      	nop
    3580:	00002f49 	.word	0x00002f49
    3584:	2000085c 	.word	0x2000085c
    3588:	0000a959 	.word	0x0000a959

0000358c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    358c:	b590      	push	{r4, r7, lr}
    358e:	b08d      	sub	sp, #52	; 0x34
    3590:	af02      	add	r7, sp, #8
    3592:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3594:	687b      	ldr	r3, [r7, #4]
    3596:	7a1b      	ldrb	r3, [r3, #8]
    3598:	4618      	mov	r0, r3
    359a:	4b51      	ldr	r3, [pc, #324]	; (36e0 <usb_d_ep_transfer+0x154>)
    359c:	4798      	blx	r3
    359e:	4603      	mov	r3, r0
    35a0:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    35a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
    35a6:	015b      	lsls	r3, r3, #5
    35a8:	4a4e      	ldr	r2, [pc, #312]	; (36e4 <usb_d_ep_transfer+0x158>)
    35aa:	4413      	add	r3, r2
    35ac:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    35ae:	687b      	ldr	r3, [r7, #4]
    35b0:	7a1b      	ldrb	r3, [r3, #8]
    35b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    35b6:	2b00      	cmp	r3, #0
    35b8:	bf14      	ite	ne
    35ba:	2301      	movne	r3, #1
    35bc:	2300      	moveq	r3, #0
    35be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    35c2:	687b      	ldr	r3, [r7, #4]
    35c4:	7a5b      	ldrb	r3, [r3, #9]
    35c6:	2b00      	cmp	r3, #0
    35c8:	bf14      	ite	ne
    35ca:	2301      	movne	r3, #1
    35cc:	2300      	moveq	r3, #0
    35ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    35d2:	687b      	ldr	r3, [r7, #4]
    35d4:	685b      	ldr	r3, [r3, #4]
    35d6:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    35d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
    35dc:	2b00      	cmp	r3, #0
    35de:	da02      	bge.n	35e6 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    35e0:	f06f 0311 	mvn.w	r3, #17
    35e4:	e077      	b.n	36d6 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    35e6:	f107 0308 	add.w	r3, r7, #8
    35ea:	4618      	mov	r0, r3
    35ec:	4b3e      	ldr	r3, [pc, #248]	; (36e8 <usb_d_ep_transfer+0x15c>)
    35ee:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    35f0:	69bb      	ldr	r3, [r7, #24]
    35f2:	789b      	ldrb	r3, [r3, #2]
    35f4:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    35f6:	7bfb      	ldrb	r3, [r7, #15]
    35f8:	b2db      	uxtb	r3, r3
    35fa:	2b01      	cmp	r3, #1
    35fc:	d10c      	bne.n	3618 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    35fe:	69bb      	ldr	r3, [r7, #24]
    3600:	2203      	movs	r2, #3
    3602:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3604:	f107 0308 	add.w	r3, r7, #8
    3608:	4618      	mov	r0, r3
    360a:	4b38      	ldr	r3, [pc, #224]	; (36ec <usb_d_ep_transfer+0x160>)
    360c:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    360e:	69bb      	ldr	r3, [r7, #24]
    3610:	781b      	ldrb	r3, [r3, #0]
    3612:	2b00      	cmp	r3, #0
    3614:	d151      	bne.n	36ba <usb_d_ep_transfer+0x12e>
    3616:	e017      	b.n	3648 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3618:	f107 0308 	add.w	r3, r7, #8
    361c:	4618      	mov	r0, r3
    361e:	4b33      	ldr	r3, [pc, #204]	; (36ec <usb_d_ep_transfer+0x160>)
    3620:	4798      	blx	r3
		switch (state) {
    3622:	7bfb      	ldrb	r3, [r7, #15]
    3624:	b2db      	uxtb	r3, r3
    3626:	2b05      	cmp	r3, #5
    3628:	d004      	beq.n	3634 <usb_d_ep_transfer+0xa8>
    362a:	2b06      	cmp	r3, #6
    362c:	d004      	beq.n	3638 <usb_d_ep_transfer+0xac>
    362e:	2b00      	cmp	r3, #0
    3630:	d005      	beq.n	363e <usb_d_ep_transfer+0xb2>
    3632:	e007      	b.n	3644 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3634:	2302      	movs	r3, #2
    3636:	e04e      	b.n	36d6 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3638:	f06f 030f 	mvn.w	r3, #15
    363c:	e04b      	b.n	36d6 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    363e:	f06f 0312 	mvn.w	r3, #18
    3642:	e048      	b.n	36d6 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3644:	2301      	movs	r3, #1
    3646:	e046      	b.n	36d6 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3648:	69bb      	ldr	r3, [r7, #24]
    364a:	7c9b      	ldrb	r3, [r3, #18]
    364c:	b29a      	uxth	r2, r3
    364e:	69bb      	ldr	r3, [r7, #24]
    3650:	7cdb      	ldrb	r3, [r3, #19]
    3652:	b29b      	uxth	r3, r3
    3654:	021b      	lsls	r3, r3, #8
    3656:	b29b      	uxth	r3, r3
    3658:	4413      	add	r3, r2
    365a:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    365c:	8afb      	ldrh	r3, [r7, #22]
    365e:	2b00      	cmp	r3, #0
    3660:	d10b      	bne.n	367a <usb_d_ep_transfer+0xee>
			dir                 = true;
    3662:	2301      	movs	r3, #1
    3664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    3668:	2300      	movs	r3, #0
    366a:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    366c:	2301      	movs	r3, #1
    366e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3672:	69bb      	ldr	r3, [r7, #24]
    3674:	2204      	movs	r2, #4
    3676:	709a      	strb	r2, [r3, #2]
    3678:	e01f      	b.n	36ba <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    367a:	69bb      	ldr	r3, [r7, #24]
    367c:	7b1b      	ldrb	r3, [r3, #12]
    367e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3682:	2b00      	cmp	r3, #0
    3684:	bf14      	ite	ne
    3686:	2301      	movne	r3, #1
    3688:	2300      	moveq	r3, #0
    368a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    368e:	8afa      	ldrh	r2, [r7, #22]
    3690:	6a3b      	ldr	r3, [r7, #32]
    3692:	429a      	cmp	r2, r3
    3694:	d201      	bcs.n	369a <usb_d_ep_transfer+0x10e>
				len = req_len;
    3696:	8afb      	ldrh	r3, [r7, #22]
    3698:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    369a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    369e:	2b00      	cmp	r3, #0
    36a0:	d008      	beq.n	36b4 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    36a2:	8afa      	ldrh	r2, [r7, #22]
    36a4:	6a3b      	ldr	r3, [r7, #32]
    36a6:	429a      	cmp	r2, r3
    36a8:	bf8c      	ite	hi
    36aa:	2301      	movhi	r3, #1
    36ac:	2300      	movls	r3, #0
    36ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    36b2:	e002      	b.n	36ba <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    36b4:	2300      	movs	r3, #0
    36b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    36ba:	687b      	ldr	r3, [r7, #4]
    36bc:	7a18      	ldrb	r0, [r3, #8]
    36be:	687b      	ldr	r3, [r7, #4]
    36c0:	681a      	ldr	r2, [r3, #0]
    36c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    36c6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    36ca:	9300      	str	r3, [sp, #0]
    36cc:	6a3b      	ldr	r3, [r7, #32]
    36ce:	4c08      	ldr	r4, [pc, #32]	; (36f0 <usb_d_ep_transfer+0x164>)
    36d0:	47a0      	blx	r4
    36d2:	6138      	str	r0, [r7, #16]
	return rc;
    36d4:	693b      	ldr	r3, [r7, #16]
}
    36d6:	4618      	mov	r0, r3
    36d8:	372c      	adds	r7, #44	; 0x2c
    36da:	46bd      	mov	sp, r7
    36dc:	bd90      	pop	{r4, r7, pc}
    36de:	bf00      	nop
    36e0:	00002f49 	.word	0x00002f49
    36e4:	2000085c 	.word	0x2000085c
    36e8:	0000b8cd 	.word	0x0000b8cd
    36ec:	0000b8f3 	.word	0x0000b8f3
    36f0:	00002fc9 	.word	0x00002fc9

000036f4 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    36f4:	b580      	push	{r7, lr}
    36f6:	b084      	sub	sp, #16
    36f8:	af00      	add	r7, sp, #0
    36fa:	4603      	mov	r3, r0
    36fc:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    36fe:	79fb      	ldrb	r3, [r7, #7]
    3700:	4618      	mov	r0, r3
    3702:	4b0e      	ldr	r3, [pc, #56]	; (373c <usb_d_ep_abort+0x48>)
    3704:	4798      	blx	r3
    3706:	4603      	mov	r3, r0
    3708:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    370a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    370e:	015b      	lsls	r3, r3, #5
    3710:	4a0b      	ldr	r2, [pc, #44]	; (3740 <usb_d_ep_abort+0x4c>)
    3712:	4413      	add	r3, r2
    3714:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3716:	f997 300f 	ldrsb.w	r3, [r7, #15]
    371a:	2b00      	cmp	r3, #0
    371c:	db0a      	blt.n	3734 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    371e:	79fb      	ldrb	r3, [r7, #7]
    3720:	4618      	mov	r0, r3
    3722:	4b08      	ldr	r3, [pc, #32]	; (3744 <usb_d_ep_abort+0x50>)
    3724:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3726:	68bb      	ldr	r3, [r7, #8]
    3728:	2201      	movs	r2, #1
    372a:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    372c:	68bb      	ldr	r3, [r7, #8]
    372e:	2204      	movs	r2, #4
    3730:	70da      	strb	r2, [r3, #3]
    3732:	e000      	b.n	3736 <usb_d_ep_abort+0x42>
		return;
    3734:	bf00      	nop
}
    3736:	3710      	adds	r7, #16
    3738:	46bd      	mov	sp, r7
    373a:	bd80      	pop	{r7, pc}
    373c:	00002f49 	.word	0x00002f49
    3740:	2000085c 	.word	0x2000085c
    3744:	0000b0c5 	.word	0x0000b0c5

00003748 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    3748:	b580      	push	{r7, lr}
    374a:	b086      	sub	sp, #24
    374c:	af00      	add	r7, sp, #0
    374e:	4603      	mov	r3, r0
    3750:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3752:	79fb      	ldrb	r3, [r7, #7]
    3754:	4618      	mov	r0, r3
    3756:	4b1a      	ldr	r3, [pc, #104]	; (37c0 <_usb_d_ep_halt_clr+0x78>)
    3758:	4798      	blx	r3
    375a:	4603      	mov	r3, r0
    375c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    375e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3762:	015b      	lsls	r3, r3, #5
    3764:	4a17      	ldr	r2, [pc, #92]	; (37c4 <_usb_d_ep_halt_clr+0x7c>)
    3766:	4413      	add	r3, r2
    3768:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    376a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    376e:	2b00      	cmp	r3, #0
    3770:	da02      	bge.n	3778 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3772:	f06f 0311 	mvn.w	r3, #17
    3776:	e01f      	b.n	37b8 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3778:	79fb      	ldrb	r3, [r7, #7]
    377a:	2102      	movs	r1, #2
    377c:	4618      	mov	r0, r3
    377e:	4b12      	ldr	r3, [pc, #72]	; (37c8 <_usb_d_ep_halt_clr+0x80>)
    3780:	4798      	blx	r3
    3782:	4603      	mov	r3, r0
    3784:	2b00      	cmp	r3, #0
    3786:	d016      	beq.n	37b6 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3788:	79fb      	ldrb	r3, [r7, #7]
    378a:	2100      	movs	r1, #0
    378c:	4618      	mov	r0, r3
    378e:	4b0e      	ldr	r3, [pc, #56]	; (37c8 <_usb_d_ep_halt_clr+0x80>)
    3790:	4798      	blx	r3
    3792:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3794:	68fb      	ldr	r3, [r7, #12]
    3796:	2b00      	cmp	r3, #0
    3798:	da01      	bge.n	379e <_usb_d_ep_halt_clr+0x56>
			return rc;
    379a:	68fb      	ldr	r3, [r7, #12]
    379c:	e00c      	b.n	37b8 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    379e:	693b      	ldr	r3, [r7, #16]
    37a0:	2201      	movs	r2, #1
    37a2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    37a4:	693b      	ldr	r3, [r7, #16]
    37a6:	2203      	movs	r2, #3
    37a8:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    37aa:	693b      	ldr	r3, [r7, #16]
    37ac:	69db      	ldr	r3, [r3, #28]
    37ae:	79f8      	ldrb	r0, [r7, #7]
    37b0:	2200      	movs	r2, #0
    37b2:	2103      	movs	r1, #3
    37b4:	4798      	blx	r3
	}
	return ERR_NONE;
    37b6:	2300      	movs	r3, #0
}
    37b8:	4618      	mov	r0, r3
    37ba:	3718      	adds	r7, #24
    37bc:	46bd      	mov	sp, r7
    37be:	bd80      	pop	{r7, pc}
    37c0:	00002f49 	.word	0x00002f49
    37c4:	2000085c 	.word	0x2000085c
    37c8:	0000acd1 	.word	0x0000acd1

000037cc <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    37cc:	b580      	push	{r7, lr}
    37ce:	b082      	sub	sp, #8
    37d0:	af00      	add	r7, sp, #0
    37d2:	4603      	mov	r3, r0
    37d4:	460a      	mov	r2, r1
    37d6:	71fb      	strb	r3, [r7, #7]
    37d8:	4613      	mov	r3, r2
    37da:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    37dc:	79bb      	ldrb	r3, [r7, #6]
    37de:	2b00      	cmp	r3, #0
    37e0:	d105      	bne.n	37ee <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    37e2:	79fb      	ldrb	r3, [r7, #7]
    37e4:	4618      	mov	r0, r3
    37e6:	4b0c      	ldr	r3, [pc, #48]	; (3818 <usb_d_ep_halt+0x4c>)
    37e8:	4798      	blx	r3
    37ea:	4603      	mov	r3, r0
    37ec:	e00f      	b.n	380e <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    37ee:	79bb      	ldrb	r3, [r7, #6]
    37f0:	2b01      	cmp	r3, #1
    37f2:	d106      	bne.n	3802 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    37f4:	79fb      	ldrb	r3, [r7, #7]
    37f6:	2101      	movs	r1, #1
    37f8:	4618      	mov	r0, r3
    37fa:	4b08      	ldr	r3, [pc, #32]	; (381c <usb_d_ep_halt+0x50>)
    37fc:	4798      	blx	r3
    37fe:	4603      	mov	r3, r0
    3800:	e005      	b.n	380e <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3802:	79fb      	ldrb	r3, [r7, #7]
    3804:	2102      	movs	r1, #2
    3806:	4618      	mov	r0, r3
    3808:	4b04      	ldr	r3, [pc, #16]	; (381c <usb_d_ep_halt+0x50>)
    380a:	4798      	blx	r3
    380c:	4603      	mov	r3, r0
	}
}
    380e:	4618      	mov	r0, r3
    3810:	3708      	adds	r7, #8
    3812:	46bd      	mov	sp, r7
    3814:	bd80      	pop	{r7, pc}
    3816:	bf00      	nop
    3818:	00003749 	.word	0x00003749
    381c:	0000acd1 	.word	0x0000acd1

00003820 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3820:	b580      	push	{r7, lr}
    3822:	b086      	sub	sp, #24
    3824:	af00      	add	r7, sp, #0
    3826:	4603      	mov	r3, r0
    3828:	603a      	str	r2, [r7, #0]
    382a:	71fb      	strb	r3, [r7, #7]
    382c:	460b      	mov	r3, r1
    382e:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3830:	79fb      	ldrb	r3, [r7, #7]
    3832:	4618      	mov	r0, r3
    3834:	4b16      	ldr	r3, [pc, #88]	; (3890 <usb_d_ep_register_callback+0x70>)
    3836:	4798      	blx	r3
    3838:	4603      	mov	r3, r0
    383a:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    383c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3840:	015b      	lsls	r3, r3, #5
    3842:	4a14      	ldr	r2, [pc, #80]	; (3894 <usb_d_ep_register_callback+0x74>)
    3844:	4413      	add	r3, r2
    3846:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3848:	683b      	ldr	r3, [r7, #0]
    384a:	2b00      	cmp	r3, #0
    384c:	d001      	beq.n	3852 <usb_d_ep_register_callback+0x32>
    384e:	683b      	ldr	r3, [r7, #0]
    3850:	e000      	b.n	3854 <usb_d_ep_register_callback+0x34>
    3852:	4b11      	ldr	r3, [pc, #68]	; (3898 <usb_d_ep_register_callback+0x78>)
    3854:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    3856:	f997 3017 	ldrsb.w	r3, [r7, #23]
    385a:	2b00      	cmp	r3, #0
    385c:	db13      	blt.n	3886 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    385e:	79bb      	ldrb	r3, [r7, #6]
    3860:	2b01      	cmp	r3, #1
    3862:	d008      	beq.n	3876 <usb_d_ep_register_callback+0x56>
    3864:	2b02      	cmp	r3, #2
    3866:	d00a      	beq.n	387e <usb_d_ep_register_callback+0x5e>
    3868:	2b00      	cmp	r3, #0
    386a:	d000      	beq.n	386e <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    386c:	e00c      	b.n	3888 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    386e:	693b      	ldr	r3, [r7, #16]
    3870:	68fa      	ldr	r2, [r7, #12]
    3872:	615a      	str	r2, [r3, #20]
		break;
    3874:	e008      	b.n	3888 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3876:	693b      	ldr	r3, [r7, #16]
    3878:	68fa      	ldr	r2, [r7, #12]
    387a:	619a      	str	r2, [r3, #24]
		break;
    387c:	e004      	b.n	3888 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    387e:	693b      	ldr	r3, [r7, #16]
    3880:	68fa      	ldr	r2, [r7, #12]
    3882:	61da      	str	r2, [r3, #28]
		break;
    3884:	e000      	b.n	3888 <usb_d_ep_register_callback+0x68>
		return;
    3886:	bf00      	nop
	}
}
    3888:	3718      	adds	r7, #24
    388a:	46bd      	mov	sp, r7
    388c:	bd80      	pop	{r7, pc}
    388e:	bf00      	nop
    3890:	00002f49 	.word	0x00002f49
    3894:	2000085c 	.word	0x2000085c
    3898:	0000301d 	.word	0x0000301d

0000389c <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    389c:	b480      	push	{r7}
    389e:	b085      	sub	sp, #20
    38a0:	af00      	add	r7, sp, #0
    38a2:	4603      	mov	r3, r0
    38a4:	60b9      	str	r1, [r7, #8]
    38a6:	607a      	str	r2, [r7, #4]
    38a8:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    38aa:	7bfb      	ldrb	r3, [r7, #15]
    38ac:	f083 0301 	eor.w	r3, r3, #1
    38b0:	b2db      	uxtb	r3, r3
    38b2:	2b00      	cmp	r3, #0
    38b4:	d000      	beq.n	38b8 <assert+0x1c>
		__asm("BKPT #0");
    38b6:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    38b8:	bf00      	nop
    38ba:	3714      	adds	r7, #20
    38bc:	46bd      	mov	sp, r7
    38be:	f85d 7b04 	ldr.w	r7, [sp], #4
    38c2:	4770      	bx	lr

000038c4 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    38c4:	b480      	push	{r7}
    38c6:	b085      	sub	sp, #20
    38c8:	af00      	add	r7, sp, #0
    38ca:	6078      	str	r0, [r7, #4]
    38cc:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    38ce:	687b      	ldr	r3, [r7, #4]
    38d0:	681b      	ldr	r3, [r3, #0]
    38d2:	60fb      	str	r3, [r7, #12]
    38d4:	e008      	b.n	38e8 <is_list_element+0x24>
		if (it == element) {
    38d6:	68fa      	ldr	r2, [r7, #12]
    38d8:	683b      	ldr	r3, [r7, #0]
    38da:	429a      	cmp	r2, r3
    38dc:	d101      	bne.n	38e2 <is_list_element+0x1e>
			return true;
    38de:	2301      	movs	r3, #1
    38e0:	e006      	b.n	38f0 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    38e2:	68fb      	ldr	r3, [r7, #12]
    38e4:	681b      	ldr	r3, [r3, #0]
    38e6:	60fb      	str	r3, [r7, #12]
    38e8:	68fb      	ldr	r3, [r7, #12]
    38ea:	2b00      	cmp	r3, #0
    38ec:	d1f3      	bne.n	38d6 <is_list_element+0x12>
		}
	}

	return false;
    38ee:	2300      	movs	r3, #0
}
    38f0:	4618      	mov	r0, r3
    38f2:	3714      	adds	r7, #20
    38f4:	46bd      	mov	sp, r7
    38f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    38fa:	4770      	bx	lr

000038fc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    38fc:	b580      	push	{r7, lr}
    38fe:	b082      	sub	sp, #8
    3900:	af00      	add	r7, sp, #0
    3902:	6078      	str	r0, [r7, #4]
    3904:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    3906:	6839      	ldr	r1, [r7, #0]
    3908:	6878      	ldr	r0, [r7, #4]
    390a:	4b0f      	ldr	r3, [pc, #60]	; (3948 <list_insert_as_head+0x4c>)
    390c:	4798      	blx	r3
    390e:	4603      	mov	r3, r0
    3910:	2b00      	cmp	r3, #0
    3912:	bf14      	ite	ne
    3914:	2301      	movne	r3, #1
    3916:	2300      	moveq	r3, #0
    3918:	b2db      	uxtb	r3, r3
    391a:	f083 0301 	eor.w	r3, r3, #1
    391e:	b2db      	uxtb	r3, r3
    3920:	f003 0301 	and.w	r3, r3, #1
    3924:	b2db      	uxtb	r3, r3
    3926:	2239      	movs	r2, #57	; 0x39
    3928:	4908      	ldr	r1, [pc, #32]	; (394c <list_insert_as_head+0x50>)
    392a:	4618      	mov	r0, r3
    392c:	4b08      	ldr	r3, [pc, #32]	; (3950 <list_insert_as_head+0x54>)
    392e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3930:	687b      	ldr	r3, [r7, #4]
    3932:	681a      	ldr	r2, [r3, #0]
    3934:	683b      	ldr	r3, [r7, #0]
    3936:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3938:	687b      	ldr	r3, [r7, #4]
    393a:	683a      	ldr	r2, [r7, #0]
    393c:	601a      	str	r2, [r3, #0]
}
    393e:	bf00      	nop
    3940:	3708      	adds	r7, #8
    3942:	46bd      	mov	sp, r7
    3944:	bd80      	pop	{r7, pc}
    3946:	bf00      	nop
    3948:	000038c5 	.word	0x000038c5
    394c:	0000f3c0 	.word	0x0000f3c0
    3950:	0000389d 	.word	0x0000389d

00003954 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3954:	b480      	push	{r7}
    3956:	b083      	sub	sp, #12
    3958:	af00      	add	r7, sp, #0
    395a:	6078      	str	r0, [r7, #4]
    395c:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    395e:	687b      	ldr	r3, [r7, #4]
    3960:	681a      	ldr	r2, [r3, #0]
    3962:	683b      	ldr	r3, [r7, #0]
    3964:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3966:	687b      	ldr	r3, [r7, #4]
    3968:	683a      	ldr	r2, [r7, #0]
    396a:	601a      	str	r2, [r3, #0]
}
    396c:	bf00      	nop
    396e:	370c      	adds	r7, #12
    3970:	46bd      	mov	sp, r7
    3972:	f85d 7b04 	ldr.w	r7, [sp], #4
    3976:	4770      	bx	lr

00003978 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3978:	b580      	push	{r7, lr}
    397a:	b084      	sub	sp, #16
    397c:	af00      	add	r7, sp, #0
    397e:	6078      	str	r0, [r7, #4]
    3980:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    3982:	687b      	ldr	r3, [r7, #4]
    3984:	681b      	ldr	r3, [r3, #0]
    3986:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3988:	6839      	ldr	r1, [r7, #0]
    398a:	6878      	ldr	r0, [r7, #4]
    398c:	4b16      	ldr	r3, [pc, #88]	; (39e8 <list_insert_at_end+0x70>)
    398e:	4798      	blx	r3
    3990:	4603      	mov	r3, r0
    3992:	2b00      	cmp	r3, #0
    3994:	bf14      	ite	ne
    3996:	2301      	movne	r3, #1
    3998:	2300      	moveq	r3, #0
    399a:	b2db      	uxtb	r3, r3
    399c:	f083 0301 	eor.w	r3, r3, #1
    39a0:	b2db      	uxtb	r3, r3
    39a2:	f003 0301 	and.w	r3, r3, #1
    39a6:	b2db      	uxtb	r3, r3
    39a8:	224f      	movs	r2, #79	; 0x4f
    39aa:	4910      	ldr	r1, [pc, #64]	; (39ec <list_insert_at_end+0x74>)
    39ac:	4618      	mov	r0, r3
    39ae:	4b10      	ldr	r3, [pc, #64]	; (39f0 <list_insert_at_end+0x78>)
    39b0:	4798      	blx	r3

	if (!list->head) {
    39b2:	687b      	ldr	r3, [r7, #4]
    39b4:	681b      	ldr	r3, [r3, #0]
    39b6:	2b00      	cmp	r3, #0
    39b8:	d109      	bne.n	39ce <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    39ba:	687b      	ldr	r3, [r7, #4]
    39bc:	683a      	ldr	r2, [r7, #0]
    39be:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    39c0:	683b      	ldr	r3, [r7, #0]
    39c2:	2200      	movs	r2, #0
    39c4:	601a      	str	r2, [r3, #0]
		return;
    39c6:	e00c      	b.n	39e2 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    39c8:	68fb      	ldr	r3, [r7, #12]
    39ca:	681b      	ldr	r3, [r3, #0]
    39cc:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    39ce:	68fb      	ldr	r3, [r7, #12]
    39d0:	681b      	ldr	r3, [r3, #0]
    39d2:	2b00      	cmp	r3, #0
    39d4:	d1f8      	bne.n	39c8 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    39d6:	68fb      	ldr	r3, [r7, #12]
    39d8:	683a      	ldr	r2, [r7, #0]
    39da:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    39dc:	683b      	ldr	r3, [r7, #0]
    39de:	2200      	movs	r2, #0
    39e0:	601a      	str	r2, [r3, #0]
}
    39e2:	3710      	adds	r7, #16
    39e4:	46bd      	mov	sp, r7
    39e6:	bd80      	pop	{r7, pc}
    39e8:	000038c5 	.word	0x000038c5
    39ec:	0000f3c0 	.word	0x0000f3c0
    39f0:	0000389d 	.word	0x0000389d

000039f4 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    39f4:	b480      	push	{r7}
    39f6:	b085      	sub	sp, #20
    39f8:	af00      	add	r7, sp, #0
    39fa:	6078      	str	r0, [r7, #4]
	if (list->head) {
    39fc:	687b      	ldr	r3, [r7, #4]
    39fe:	681b      	ldr	r3, [r3, #0]
    3a00:	2b00      	cmp	r3, #0
    3a02:	d009      	beq.n	3a18 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3a04:	687b      	ldr	r3, [r7, #4]
    3a06:	681b      	ldr	r3, [r3, #0]
    3a08:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3a0a:	687b      	ldr	r3, [r7, #4]
    3a0c:	681b      	ldr	r3, [r3, #0]
    3a0e:	681a      	ldr	r2, [r3, #0]
    3a10:	687b      	ldr	r3, [r7, #4]
    3a12:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3a14:	68fb      	ldr	r3, [r7, #12]
    3a16:	e000      	b.n	3a1a <list_remove_head+0x26>
	}

	return NULL;
    3a18:	2300      	movs	r3, #0
}
    3a1a:	4618      	mov	r0, r3
    3a1c:	3714      	adds	r7, #20
    3a1e:	46bd      	mov	sp, r7
    3a20:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a24:	4770      	bx	lr

00003a26 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3a26:	b480      	push	{r7}
    3a28:	b085      	sub	sp, #20
    3a2a:	af00      	add	r7, sp, #0
    3a2c:	6078      	str	r0, [r7, #4]
    3a2e:	6039      	str	r1, [r7, #0]
	if (!element) {
    3a30:	683b      	ldr	r3, [r7, #0]
    3a32:	2b00      	cmp	r3, #0
    3a34:	d101      	bne.n	3a3a <list_delete_element+0x14>
		return false;
    3a36:	2300      	movs	r3, #0
    3a38:	e024      	b.n	3a84 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    3a3a:	687b      	ldr	r3, [r7, #4]
    3a3c:	681a      	ldr	r2, [r3, #0]
    3a3e:	683b      	ldr	r3, [r7, #0]
    3a40:	429a      	cmp	r2, r3
    3a42:	d106      	bne.n	3a52 <list_delete_element+0x2c>
		list->head = list->head->next;
    3a44:	687b      	ldr	r3, [r7, #4]
    3a46:	681b      	ldr	r3, [r3, #0]
    3a48:	681a      	ldr	r2, [r3, #0]
    3a4a:	687b      	ldr	r3, [r7, #4]
    3a4c:	601a      	str	r2, [r3, #0]
		return true;
    3a4e:	2301      	movs	r3, #1
    3a50:	e018      	b.n	3a84 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    3a52:	687b      	ldr	r3, [r7, #4]
    3a54:	681b      	ldr	r3, [r3, #0]
    3a56:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3a58:	e002      	b.n	3a60 <list_delete_element+0x3a>
			it = it->next;
    3a5a:	68fb      	ldr	r3, [r7, #12]
    3a5c:	681b      	ldr	r3, [r3, #0]
    3a5e:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    3a60:	68fb      	ldr	r3, [r7, #12]
    3a62:	2b00      	cmp	r3, #0
    3a64:	d004      	beq.n	3a70 <list_delete_element+0x4a>
    3a66:	68fb      	ldr	r3, [r7, #12]
    3a68:	681a      	ldr	r2, [r3, #0]
    3a6a:	683b      	ldr	r3, [r7, #0]
    3a6c:	429a      	cmp	r2, r3
    3a6e:	d1f4      	bne.n	3a5a <list_delete_element+0x34>
		}
		if (it) {
    3a70:	68fb      	ldr	r3, [r7, #12]
    3a72:	2b00      	cmp	r3, #0
    3a74:	d005      	beq.n	3a82 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    3a76:	683b      	ldr	r3, [r7, #0]
    3a78:	681a      	ldr	r2, [r3, #0]
    3a7a:	68fb      	ldr	r3, [r7, #12]
    3a7c:	601a      	str	r2, [r3, #0]
			return true;
    3a7e:	2301      	movs	r3, #1
    3a80:	e000      	b.n	3a84 <list_delete_element+0x5e>
		}
	}

	return false;
    3a82:	2300      	movs	r3, #0
}
    3a84:	4618      	mov	r0, r3
    3a86:	3714      	adds	r7, #20
    3a88:	46bd      	mov	sp, r7
    3a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a8e:	4770      	bx	lr

00003a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3a90:	b480      	push	{r7}
    3a92:	b083      	sub	sp, #12
    3a94:	af00      	add	r7, sp, #0
    3a96:	4603      	mov	r3, r0
    3a98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a9e:	2b00      	cmp	r3, #0
    3aa0:	db0b      	blt.n	3aba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3aa2:	4909      	ldr	r1, [pc, #36]	; (3ac8 <__NVIC_EnableIRQ+0x38>)
    3aa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3aa8:	095b      	lsrs	r3, r3, #5
    3aaa:	88fa      	ldrh	r2, [r7, #6]
    3aac:	f002 021f 	and.w	r2, r2, #31
    3ab0:	2001      	movs	r0, #1
    3ab2:	fa00 f202 	lsl.w	r2, r0, r2
    3ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3aba:	bf00      	nop
    3abc:	370c      	adds	r7, #12
    3abe:	46bd      	mov	sp, r7
    3ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ac4:	4770      	bx	lr
    3ac6:	bf00      	nop
    3ac8:	e000e100 	.word	0xe000e100

00003acc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3acc:	b480      	push	{r7}
    3ace:	b083      	sub	sp, #12
    3ad0:	af00      	add	r7, sp, #0
    3ad2:	4603      	mov	r3, r0
    3ad4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3ada:	2b00      	cmp	r3, #0
    3adc:	db10      	blt.n	3b00 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ade:	490b      	ldr	r1, [pc, #44]	; (3b0c <__NVIC_DisableIRQ+0x40>)
    3ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3ae4:	095b      	lsrs	r3, r3, #5
    3ae6:	88fa      	ldrh	r2, [r7, #6]
    3ae8:	f002 021f 	and.w	r2, r2, #31
    3aec:	2001      	movs	r0, #1
    3aee:	fa00 f202 	lsl.w	r2, r0, r2
    3af2:	3320      	adds	r3, #32
    3af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3af8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3afc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3b00:	bf00      	nop
    3b02:	370c      	adds	r7, #12
    3b04:	46bd      	mov	sp, r7
    3b06:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b0a:	4770      	bx	lr
    3b0c:	e000e100 	.word	0xe000e100

00003b10 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3b10:	b480      	push	{r7}
    3b12:	b083      	sub	sp, #12
    3b14:	af00      	add	r7, sp, #0
    3b16:	4603      	mov	r3, r0
    3b18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b1e:	2b00      	cmp	r3, #0
    3b20:	db0c      	blt.n	3b3c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b22:	4909      	ldr	r1, [pc, #36]	; (3b48 <__NVIC_ClearPendingIRQ+0x38>)
    3b24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b28:	095b      	lsrs	r3, r3, #5
    3b2a:	88fa      	ldrh	r2, [r7, #6]
    3b2c:	f002 021f 	and.w	r2, r2, #31
    3b30:	2001      	movs	r0, #1
    3b32:	fa00 f202 	lsl.w	r2, r0, r2
    3b36:	3360      	adds	r3, #96	; 0x60
    3b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3b3c:	bf00      	nop
    3b3e:	370c      	adds	r7, #12
    3b40:	46bd      	mov	sp, r7
    3b42:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b46:	4770      	bx	lr
    3b48:	e000e100 	.word	0xe000e100

00003b4c <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3b4c:	b480      	push	{r7}
    3b4e:	b083      	sub	sp, #12
    3b50:	af00      	add	r7, sp, #0
    3b52:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3b54:	687b      	ldr	r3, [r7, #4]
    3b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3b58:	095b      	lsrs	r3, r3, #5
    3b5a:	f003 0301 	and.w	r3, r3, #1
    3b5e:	2b00      	cmp	r3, #0
    3b60:	bf14      	ite	ne
    3b62:	2301      	movne	r3, #1
    3b64:	2300      	moveq	r3, #0
    3b66:	b2db      	uxtb	r3, r3
}
    3b68:	4618      	mov	r0, r3
    3b6a:	370c      	adds	r7, #12
    3b6c:	46bd      	mov	sp, r7
    3b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b72:	4770      	bx	lr

00003b74 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3b74:	b480      	push	{r7}
    3b76:	b083      	sub	sp, #12
    3b78:	af00      	add	r7, sp, #0
    3b7a:	6078      	str	r0, [r7, #4]
    3b7c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    3b7e:	687b      	ldr	r3, [r7, #4]
    3b80:	683a      	ldr	r2, [r7, #0]
    3b82:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b84:	bf00      	nop
    3b86:	370c      	adds	r7, #12
    3b88:	46bd      	mov	sp, r7
    3b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b8e:	4770      	bx	lr

00003b90 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3b90:	b480      	push	{r7}
    3b92:	b083      	sub	sp, #12
    3b94:	af00      	add	r7, sp, #0
    3b96:	6078      	str	r0, [r7, #4]
    3b98:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3b9a:	687b      	ldr	r3, [r7, #4]
    3b9c:	683a      	ldr	r2, [r7, #0]
    3b9e:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ba0:	bf00      	nop
    3ba2:	370c      	adds	r7, #12
    3ba4:	46bd      	mov	sp, r7
    3ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3baa:	4770      	bx	lr

00003bac <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3bac:	b480      	push	{r7}
    3bae:	b083      	sub	sp, #12
    3bb0:	af00      	add	r7, sp, #0
    3bb2:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3bb4:	687b      	ldr	r3, [r7, #4]
    3bb6:	699b      	ldr	r3, [r3, #24]
    3bb8:	f043 0201 	orr.w	r2, r3, #1
    3bbc:	687b      	ldr	r3, [r7, #4]
    3bbe:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bc0:	bf00      	nop
    3bc2:	370c      	adds	r7, #12
    3bc4:	46bd      	mov	sp, r7
    3bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bca:	4770      	bx	lr

00003bcc <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3bcc:	b480      	push	{r7}
    3bce:	b085      	sub	sp, #20
    3bd0:	af00      	add	r7, sp, #0
    3bd2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3bd4:	687b      	ldr	r3, [r7, #4]
    3bd6:	699b      	ldr	r3, [r3, #24]
    3bd8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3bda:	68fb      	ldr	r3, [r7, #12]
    3bdc:	f003 0301 	and.w	r3, r3, #1
    3be0:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3be2:	68fb      	ldr	r3, [r7, #12]
    3be4:	2b00      	cmp	r3, #0
    3be6:	bf14      	ite	ne
    3be8:	2301      	movne	r3, #1
    3bea:	2300      	moveq	r3, #0
    3bec:	b2db      	uxtb	r3, r3
}
    3bee:	4618      	mov	r0, r3
    3bf0:	3714      	adds	r7, #20
    3bf2:	46bd      	mov	sp, r7
    3bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bf8:	4770      	bx	lr

00003bfa <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    3bfa:	b480      	push	{r7}
    3bfc:	b083      	sub	sp, #12
    3bfe:	af00      	add	r7, sp, #0
    3c00:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3c02:	687b      	ldr	r3, [r7, #4]
    3c04:	699b      	ldr	r3, [r3, #24]
    3c06:	f023 0201 	bic.w	r2, r3, #1
    3c0a:	687b      	ldr	r3, [r7, #4]
    3c0c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c0e:	bf00      	nop
    3c10:	370c      	adds	r7, #12
    3c12:	46bd      	mov	sp, r7
    3c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c18:	4770      	bx	lr

00003c1a <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    3c1a:	b480      	push	{r7}
    3c1c:	b083      	sub	sp, #12
    3c1e:	af00      	add	r7, sp, #0
    3c20:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3c22:	687b      	ldr	r3, [r7, #4]
    3c24:	699b      	ldr	r3, [r3, #24]
    3c26:	f043 0202 	orr.w	r2, r3, #2
    3c2a:	687b      	ldr	r3, [r7, #4]
    3c2c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c2e:	bf00      	nop
    3c30:	370c      	adds	r7, #12
    3c32:	46bd      	mov	sp, r7
    3c34:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c38:	4770      	bx	lr

00003c3a <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3c3a:	b480      	push	{r7}
    3c3c:	b083      	sub	sp, #12
    3c3e:	af00      	add	r7, sp, #0
    3c40:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3c42:	687b      	ldr	r3, [r7, #4]
    3c44:	699b      	ldr	r3, [r3, #24]
    3c46:	f023 0202 	bic.w	r2, r3, #2
    3c4a:	687b      	ldr	r3, [r7, #4]
    3c4c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c4e:	bf00      	nop
    3c50:	370c      	adds	r7, #12
    3c52:	46bd      	mov	sp, r7
    3c54:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c58:	4770      	bx	lr

00003c5a <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3c5a:	b480      	push	{r7}
    3c5c:	b083      	sub	sp, #12
    3c5e:	af00      	add	r7, sp, #0
    3c60:	6078      	str	r0, [r7, #4]
    3c62:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3c64:	687b      	ldr	r3, [r7, #4]
    3c66:	699a      	ldr	r2, [r3, #24]
    3c68:	683b      	ldr	r3, [r7, #0]
    3c6a:	431a      	orrs	r2, r3
    3c6c:	687b      	ldr	r3, [r7, #4]
    3c6e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c70:	bf00      	nop
    3c72:	370c      	adds	r7, #12
    3c74:	46bd      	mov	sp, r7
    3c76:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c7a:	4770      	bx	lr

00003c7c <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3c7c:	b480      	push	{r7}
    3c7e:	b083      	sub	sp, #12
    3c80:	af00      	add	r7, sp, #0
    3c82:	6078      	str	r0, [r7, #4]
    3c84:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3c86:	687b      	ldr	r3, [r7, #4]
    3c88:	683a      	ldr	r2, [r7, #0]
    3c8a:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c8c:	bf00      	nop
    3c8e:	370c      	adds	r7, #12
    3c90:	46bd      	mov	sp, r7
    3c92:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c96:	4770      	bx	lr

00003c98 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3c98:	b480      	push	{r7}
    3c9a:	b083      	sub	sp, #12
    3c9c:	af00      	add	r7, sp, #0
    3c9e:	6078      	str	r0, [r7, #4]
    3ca0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    3ca2:	687b      	ldr	r3, [r7, #4]
    3ca4:	683a      	ldr	r2, [r7, #0]
    3ca6:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ca8:	bf00      	nop
    3caa:	370c      	adds	r7, #12
    3cac:	46bd      	mov	sp, r7
    3cae:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cb2:	4770      	bx	lr

00003cb4 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3cb4:	b480      	push	{r7}
    3cb6:	b083      	sub	sp, #12
    3cb8:	af00      	add	r7, sp, #0
    3cba:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3cbc:	687b      	ldr	r3, [r7, #4]
    3cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    3cc0:	4618      	mov	r0, r3
    3cc2:	370c      	adds	r7, #12
    3cc4:	46bd      	mov	sp, r7
    3cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cca:	4770      	bx	lr

00003ccc <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3ccc:	b480      	push	{r7}
    3cce:	b083      	sub	sp, #12
    3cd0:	af00      	add	r7, sp, #0
    3cd2:	6078      	str	r0, [r7, #4]
    3cd4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3cd6:	687b      	ldr	r3, [r7, #4]
    3cd8:	683a      	ldr	r2, [r7, #0]
    3cda:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3cdc:	bf00      	nop
    3cde:	370c      	adds	r7, #12
    3ce0:	46bd      	mov	sp, r7
    3ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ce6:	4770      	bx	lr

00003ce8 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3ce8:	b480      	push	{r7}
    3cea:	b083      	sub	sp, #12
    3cec:	af00      	add	r7, sp, #0
    3cee:	6078      	str	r0, [r7, #4]
    3cf0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3cf2:	687b      	ldr	r3, [r7, #4]
    3cf4:	683a      	ldr	r2, [r7, #0]
    3cf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3cfa:	bf00      	nop
    3cfc:	370c      	adds	r7, #12
    3cfe:	46bd      	mov	sp, r7
    3d00:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d04:	4770      	bx	lr

00003d06 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3d06:	b480      	push	{r7}
    3d08:	b083      	sub	sp, #12
    3d0a:	af00      	add	r7, sp, #0
    3d0c:	6078      	str	r0, [r7, #4]
    3d0e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    3d10:	687b      	ldr	r3, [r7, #4]
    3d12:	683a      	ldr	r2, [r7, #0]
    3d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d18:	bf00      	nop
    3d1a:	370c      	adds	r7, #12
    3d1c:	46bd      	mov	sp, r7
    3d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d22:	4770      	bx	lr

00003d24 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3d24:	b480      	push	{r7}
    3d26:	b083      	sub	sp, #12
    3d28:	af00      	add	r7, sp, #0
    3d2a:	6078      	str	r0, [r7, #4]
    3d2c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    3d2e:	687b      	ldr	r3, [r7, #4]
    3d30:	683a      	ldr	r2, [r7, #0]
    3d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d36:	bf00      	nop
    3d38:	370c      	adds	r7, #12
    3d3a:	46bd      	mov	sp, r7
    3d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d40:	4770      	bx	lr

00003d42 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    3d42:	b480      	push	{r7}
    3d44:	b083      	sub	sp, #12
    3d46:	af00      	add	r7, sp, #0
    3d48:	6078      	str	r0, [r7, #4]
    3d4a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    3d4c:	687b      	ldr	r3, [r7, #4]
    3d4e:	683a      	ldr	r2, [r7, #0]
    3d50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d54:	bf00      	nop
    3d56:	370c      	adds	r7, #12
    3d58:	46bd      	mov	sp, r7
    3d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d5e:	4770      	bx	lr

00003d60 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    3d60:	b480      	push	{r7}
    3d62:	b083      	sub	sp, #12
    3d64:	af00      	add	r7, sp, #0
    3d66:	6078      	str	r0, [r7, #4]
    3d68:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3d6a:	687b      	ldr	r3, [r7, #4]
    3d6c:	683a      	ldr	r2, [r7, #0]
    3d6e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d72:	bf00      	nop
    3d74:	370c      	adds	r7, #12
    3d76:	46bd      	mov	sp, r7
    3d78:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d7c:	4770      	bx	lr

00003d7e <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    3d7e:	b480      	push	{r7}
    3d80:	b083      	sub	sp, #12
    3d82:	af00      	add	r7, sp, #0
    3d84:	6078      	str	r0, [r7, #4]
    3d86:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3d88:	687b      	ldr	r3, [r7, #4]
    3d8a:	683a      	ldr	r2, [r7, #0]
    3d8c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d90:	bf00      	nop
    3d92:	370c      	adds	r7, #12
    3d94:	46bd      	mov	sp, r7
    3d96:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d9a:	4770      	bx	lr

00003d9c <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3d9c:	b480      	push	{r7}
    3d9e:	b083      	sub	sp, #12
    3da0:	af00      	add	r7, sp, #0
    3da2:	6078      	str	r0, [r7, #4]
    3da4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3da6:	687b      	ldr	r3, [r7, #4]
    3da8:	683a      	ldr	r2, [r7, #0]
    3daa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3dae:	bf00      	nop
    3db0:	370c      	adds	r7, #12
    3db2:	46bd      	mov	sp, r7
    3db4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3db8:	4770      	bx	lr

00003dba <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    3dba:	b480      	push	{r7}
    3dbc:	b083      	sub	sp, #12
    3dbe:	af00      	add	r7, sp, #0
    3dc0:	6078      	str	r0, [r7, #4]
    3dc2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3dc4:	687b      	ldr	r3, [r7, #4]
    3dc6:	683a      	ldr	r2, [r7, #0]
    3dc8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3dcc:	bf00      	nop
    3dce:	370c      	adds	r7, #12
    3dd0:	46bd      	mov	sp, r7
    3dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dd6:	4770      	bx	lr

00003dd8 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    3dd8:	b480      	push	{r7}
    3dda:	b083      	sub	sp, #12
    3ddc:	af00      	add	r7, sp, #0
    3dde:	6078      	str	r0, [r7, #4]
    3de0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    3de2:	687b      	ldr	r3, [r7, #4]
    3de4:	683a      	ldr	r2, [r7, #0]
    3de6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3dea:	bf00      	nop
    3dec:	370c      	adds	r7, #12
    3dee:	46bd      	mov	sp, r7
    3df0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3df4:	4770      	bx	lr
	...

00003df8 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    3df8:	b580      	push	{r7, lr}
    3dfa:	b082      	sub	sp, #8
    3dfc:	af00      	add	r7, sp, #0
    3dfe:	6078      	str	r0, [r7, #4]
    3e00:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    3e02:	687b      	ldr	r3, [r7, #4]
    3e04:	683a      	ldr	r2, [r7, #0]
    3e06:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    3e08:	687b      	ldr	r3, [r7, #4]
    3e0a:	681b      	ldr	r3, [r3, #0]
    3e0c:	4618      	mov	r0, r3
    3e0e:	4b55      	ldr	r3, [pc, #340]	; (3f64 <_can_async_init+0x16c>)
    3e10:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3e12:	bf00      	nop
    3e14:	687b      	ldr	r3, [r7, #4]
    3e16:	681b      	ldr	r3, [r3, #0]
    3e18:	4618      	mov	r0, r3
    3e1a:	4b53      	ldr	r3, [pc, #332]	; (3f68 <_can_async_init+0x170>)
    3e1c:	4798      	blx	r3
    3e1e:	4603      	mov	r3, r0
    3e20:	f083 0301 	eor.w	r3, r3, #1
    3e24:	b2db      	uxtb	r3, r3
    3e26:	2b00      	cmp	r3, #0
    3e28:	d1f4      	bne.n	3e14 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    3e2a:	687b      	ldr	r3, [r7, #4]
    3e2c:	681b      	ldr	r3, [r3, #0]
    3e2e:	4618      	mov	r0, r3
    3e30:	4b4e      	ldr	r3, [pc, #312]	; (3f6c <_can_async_init+0x174>)
    3e32:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3e34:	683b      	ldr	r3, [r7, #0]
    3e36:	4a4e      	ldr	r2, [pc, #312]	; (3f70 <_can_async_init+0x178>)
    3e38:	4293      	cmp	r3, r2
    3e3a:	d17a      	bne.n	3f32 <_can_async_init+0x13a>
		_can1_dev    = dev;
    3e3c:	4a4d      	ldr	r2, [pc, #308]	; (3f74 <_can_async_init+0x17c>)
    3e3e:	687b      	ldr	r3, [r7, #4]
    3e40:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3e42:	687b      	ldr	r3, [r7, #4]
    3e44:	4a4c      	ldr	r2, [pc, #304]	; (3f78 <_can_async_init+0x180>)
    3e46:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3e48:	687b      	ldr	r3, [r7, #4]
    3e4a:	681b      	ldr	r3, [r3, #0]
    3e4c:	f44f 7140 	mov.w	r1, #768	; 0x300
    3e50:	4618      	mov	r0, r3
    3e52:	4b4a      	ldr	r3, [pc, #296]	; (3f7c <_can_async_init+0x184>)
    3e54:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3e56:	687b      	ldr	r3, [r7, #4]
    3e58:	681b      	ldr	r3, [r3, #0]
    3e5a:	2102      	movs	r1, #2
    3e5c:	4618      	mov	r0, r3
    3e5e:	4b48      	ldr	r3, [pc, #288]	; (3f80 <_can_async_init+0x188>)
    3e60:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3e62:	687b      	ldr	r3, [r7, #4]
    3e64:	681b      	ldr	r3, [r3, #0]
    3e66:	4947      	ldr	r1, [pc, #284]	; (3f84 <_can_async_init+0x18c>)
    3e68:	4618      	mov	r0, r3
    3e6a:	4b47      	ldr	r3, [pc, #284]	; (3f88 <_can_async_init+0x190>)
    3e6c:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    3e6e:	687b      	ldr	r3, [r7, #4]
    3e70:	681b      	ldr	r3, [r3, #0]
    3e72:	4946      	ldr	r1, [pc, #280]	; (3f8c <_can_async_init+0x194>)
    3e74:	4618      	mov	r0, r3
    3e76:	4b46      	ldr	r3, [pc, #280]	; (3f90 <_can_async_init+0x198>)
    3e78:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    3e7a:	687b      	ldr	r3, [r7, #4]
    3e7c:	681a      	ldr	r2, [r3, #0]
    3e7e:	4b45      	ldr	r3, [pc, #276]	; (3f94 <_can_async_init+0x19c>)
    3e80:	b29b      	uxth	r3, r3
    3e82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3e8a:	4619      	mov	r1, r3
    3e8c:	4610      	mov	r0, r2
    3e8e:	4b42      	ldr	r3, [pc, #264]	; (3f98 <_can_async_init+0x1a0>)
    3e90:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3e92:	687b      	ldr	r3, [r7, #4]
    3e94:	681b      	ldr	r3, [r3, #0]
    3e96:	2107      	movs	r1, #7
    3e98:	4618      	mov	r0, r3
    3e9a:	4b40      	ldr	r3, [pc, #256]	; (3f9c <_can_async_init+0x1a4>)
    3e9c:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    3e9e:	687b      	ldr	r3, [r7, #4]
    3ea0:	681b      	ldr	r3, [r3, #0]
    3ea2:	2107      	movs	r1, #7
    3ea4:	4618      	mov	r0, r3
    3ea6:	4b3e      	ldr	r3, [pc, #248]	; (3fa0 <_can_async_init+0x1a8>)
    3ea8:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    3eaa:	687b      	ldr	r3, [r7, #4]
    3eac:	681a      	ldr	r2, [r3, #0]
    3eae:	4b3d      	ldr	r3, [pc, #244]	; (3fa4 <_can_async_init+0x1ac>)
    3eb0:	b29b      	uxth	r3, r3
    3eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3eb6:	4619      	mov	r1, r3
    3eb8:	4610      	mov	r0, r2
    3eba:	4b3b      	ldr	r3, [pc, #236]	; (3fa8 <_can_async_init+0x1b0>)
    3ebc:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    3ebe:	687b      	ldr	r3, [r7, #4]
    3ec0:	681a      	ldr	r2, [r3, #0]
    3ec2:	4b3a      	ldr	r3, [pc, #232]	; (3fac <_can_async_init+0x1b4>)
    3ec4:	b29b      	uxth	r3, r3
    3ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3eca:	4619      	mov	r1, r3
    3ecc:	4610      	mov	r0, r2
    3ece:	4b38      	ldr	r3, [pc, #224]	; (3fb0 <_can_async_init+0x1b8>)
    3ed0:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    3ed2:	687b      	ldr	r3, [r7, #4]
    3ed4:	681b      	ldr	r3, [r3, #0]
    3ed6:	2108      	movs	r1, #8
    3ed8:	4618      	mov	r0, r3
    3eda:	4b36      	ldr	r3, [pc, #216]	; (3fb4 <_can_async_init+0x1bc>)
    3edc:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    3ede:	687b      	ldr	r3, [r7, #4]
    3ee0:	681a      	ldr	r2, [r3, #0]
    3ee2:	4b35      	ldr	r3, [pc, #212]	; (3fb8 <_can_async_init+0x1c0>)
    3ee4:	b29b      	uxth	r3, r3
    3ee6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    3eea:	4619      	mov	r1, r3
    3eec:	4610      	mov	r0, r2
    3eee:	4b33      	ldr	r3, [pc, #204]	; (3fbc <_can_async_init+0x1c4>)
    3ef0:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3ef2:	687b      	ldr	r3, [r7, #4]
    3ef4:	681a      	ldr	r2, [r3, #0]
    3ef6:	4b32      	ldr	r3, [pc, #200]	; (3fc0 <_can_async_init+0x1c8>)
    3ef8:	b29b      	uxth	r3, r3
    3efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3efe:	4619      	mov	r1, r3
    3f00:	4610      	mov	r0, r2
    3f02:	4b30      	ldr	r3, [pc, #192]	; (3fc4 <_can_async_init+0x1cc>)
    3f04:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3f06:	687b      	ldr	r3, [r7, #4]
    3f08:	681b      	ldr	r3, [r3, #0]
    3f0a:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    3f0e:	4618      	mov	r0, r3
    3f10:	4b2d      	ldr	r3, [pc, #180]	; (3fc8 <_can_async_init+0x1d0>)
    3f12:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3f14:	204f      	movs	r0, #79	; 0x4f
    3f16:	4b2d      	ldr	r3, [pc, #180]	; (3fcc <_can_async_init+0x1d4>)
    3f18:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    3f1a:	204f      	movs	r0, #79	; 0x4f
    3f1c:	4b2c      	ldr	r3, [pc, #176]	; (3fd0 <_can_async_init+0x1d8>)
    3f1e:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3f20:	204f      	movs	r0, #79	; 0x4f
    3f22:	4b2c      	ldr	r3, [pc, #176]	; (3fd4 <_can_async_init+0x1dc>)
    3f24:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3f26:	687b      	ldr	r3, [r7, #4]
    3f28:	681b      	ldr	r3, [r3, #0]
    3f2a:	2101      	movs	r1, #1
    3f2c:	4618      	mov	r0, r3
    3f2e:	4b2a      	ldr	r3, [pc, #168]	; (3fd8 <_can_async_init+0x1e0>)
    3f30:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3f32:	687b      	ldr	r3, [r7, #4]
    3f34:	681b      	ldr	r3, [r3, #0]
    3f36:	4618      	mov	r0, r3
    3f38:	4b28      	ldr	r3, [pc, #160]	; (3fdc <_can_async_init+0x1e4>)
    3f3a:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3f3c:	687b      	ldr	r3, [r7, #4]
    3f3e:	681b      	ldr	r3, [r3, #0]
    3f40:	4618      	mov	r0, r3
    3f42:	4b27      	ldr	r3, [pc, #156]	; (3fe0 <_can_async_init+0x1e8>)
    3f44:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3f46:	bf00      	nop
    3f48:	687b      	ldr	r3, [r7, #4]
    3f4a:	681b      	ldr	r3, [r3, #0]
    3f4c:	4618      	mov	r0, r3
    3f4e:	4b06      	ldr	r3, [pc, #24]	; (3f68 <_can_async_init+0x170>)
    3f50:	4798      	blx	r3
    3f52:	4603      	mov	r3, r0
    3f54:	2b00      	cmp	r3, #0
    3f56:	d1f7      	bne.n	3f48 <_can_async_init+0x150>
	};

	return ERR_NONE;
    3f58:	2300      	movs	r3, #0
}
    3f5a:	4618      	mov	r0, r3
    3f5c:	3708      	adds	r7, #8
    3f5e:	46bd      	mov	sp, r7
    3f60:	bd80      	pop	{r7, pc}
    3f62:	bf00      	nop
    3f64:	00003bad 	.word	0x00003bad
    3f68:	00003bcd 	.word	0x00003bcd
    3f6c:	00003c1b 	.word	0x00003c1b
    3f70:	42000400 	.word	0x42000400
    3f74:	2000097c 	.word	0x2000097c
    3f78:	20000004 	.word	0x20000004
    3f7c:	00003c5b 	.word	0x00003c5b
    3f80:	00003b75 	.word	0x00003b75
    3f84:	00010c01 	.word	0x00010c01
    3f88:	00003c7d 	.word	0x00003c7d
    3f8c:	00010c10 	.word	0x00010c10
    3f90:	00003b91 	.word	0x00003b91
    3f94:	200013e8 	.word	0x200013e8
    3f98:	00003d61 	.word	0x00003d61
    3f9c:	00003d7f 	.word	0x00003d7f
    3fa0:	00003dbb 	.word	0x00003dbb
    3fa4:	200013a0 	.word	0x200013a0
    3fa8:	00003d9d 	.word	0x00003d9d
    3fac:	200008dc 	.word	0x200008dc
    3fb0:	00003dd9 	.word	0x00003dd9
    3fb4:	00003ce9 	.word	0x00003ce9
    3fb8:	200008ec 	.word	0x200008ec
    3fbc:	00003d07 	.word	0x00003d07
    3fc0:	2000096c 	.word	0x2000096c
    3fc4:	00003d25 	.word	0x00003d25
    3fc8:	00003d43 	.word	0x00003d43
    3fcc:	00003acd 	.word	0x00003acd
    3fd0:	00003b11 	.word	0x00003b11
    3fd4:	00003a91 	.word	0x00003a91
    3fd8:	00003ccd 	.word	0x00003ccd
    3fdc:	00003c3b 	.word	0x00003c3b
    3fe0:	00003bfb 	.word	0x00003bfb

00003fe4 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    3fe4:	b590      	push	{r4, r7, lr}
    3fe6:	b083      	sub	sp, #12
    3fe8:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    3fea:	4b2c      	ldr	r3, [pc, #176]	; (409c <CAN1_Handler+0xb8>)
    3fec:	681b      	ldr	r3, [r3, #0]
    3fee:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    3ff0:	687b      	ldr	r3, [r7, #4]
    3ff2:	681b      	ldr	r3, [r3, #0]
    3ff4:	4618      	mov	r0, r3
    3ff6:	4b2a      	ldr	r3, [pc, #168]	; (40a0 <CAN1_Handler+0xbc>)
    3ff8:	4798      	blx	r3
    3ffa:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    3ffc:	683b      	ldr	r3, [r7, #0]
    3ffe:	f003 0301 	and.w	r3, r3, #1
    4002:	2b00      	cmp	r3, #0
    4004:	d003      	beq.n	400e <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    4006:	687b      	ldr	r3, [r7, #4]
    4008:	689b      	ldr	r3, [r3, #8]
    400a:	6878      	ldr	r0, [r7, #4]
    400c:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    400e:	683b      	ldr	r3, [r7, #0]
    4010:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4014:	2b00      	cmp	r3, #0
    4016:	d003      	beq.n	4020 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    4018:	687b      	ldr	r3, [r7, #4]
    401a:	685b      	ldr	r3, [r3, #4]
    401c:	6878      	ldr	r0, [r7, #4]
    401e:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    4020:	683b      	ldr	r3, [r7, #0]
    4022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    4026:	2b00      	cmp	r3, #0
    4028:	d004      	beq.n	4034 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    402a:	687b      	ldr	r3, [r7, #4]
    402c:	68db      	ldr	r3, [r3, #12]
    402e:	2103      	movs	r1, #3
    4030:	6878      	ldr	r0, [r7, #4]
    4032:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    4034:	683b      	ldr	r3, [r7, #0]
    4036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    403a:	2b00      	cmp	r3, #0
    403c:	d004      	beq.n	4048 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    403e:	687b      	ldr	r3, [r7, #4]
    4040:	68db      	ldr	r3, [r3, #12]
    4042:	2100      	movs	r1, #0
    4044:	6878      	ldr	r0, [r7, #4]
    4046:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    4048:	683b      	ldr	r3, [r7, #0]
    404a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    404e:	2b00      	cmp	r3, #0
    4050:	d00f      	beq.n	4072 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    4052:	687b      	ldr	r3, [r7, #4]
    4054:	68dc      	ldr	r4, [r3, #12]
    4056:	687b      	ldr	r3, [r7, #4]
    4058:	681b      	ldr	r3, [r3, #0]
    405a:	4618      	mov	r0, r3
    405c:	4b11      	ldr	r3, [pc, #68]	; (40a4 <CAN1_Handler+0xc0>)
    405e:	4798      	blx	r3
    4060:	4603      	mov	r3, r0
    4062:	2b00      	cmp	r3, #0
    4064:	d001      	beq.n	406a <CAN1_Handler+0x86>
    4066:	2302      	movs	r3, #2
    4068:	e000      	b.n	406c <CAN1_Handler+0x88>
    406a:	2301      	movs	r3, #1
    406c:	4619      	mov	r1, r3
    406e:	6878      	ldr	r0, [r7, #4]
    4070:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    4072:	683b      	ldr	r3, [r7, #0]
    4074:	f003 0308 	and.w	r3, r3, #8
    4078:	2b00      	cmp	r3, #0
    407a:	d004      	beq.n	4086 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    407c:	687b      	ldr	r3, [r7, #4]
    407e:	68db      	ldr	r3, [r3, #12]
    4080:	2104      	movs	r1, #4
    4082:	6878      	ldr	r0, [r7, #4]
    4084:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    4086:	687b      	ldr	r3, [r7, #4]
    4088:	681b      	ldr	r3, [r3, #0]
    408a:	6839      	ldr	r1, [r7, #0]
    408c:	4618      	mov	r0, r3
    408e:	4b06      	ldr	r3, [pc, #24]	; (40a8 <CAN1_Handler+0xc4>)
    4090:	4798      	blx	r3
}
    4092:	bf00      	nop
    4094:	370c      	adds	r7, #12
    4096:	46bd      	mov	sp, r7
    4098:	bd90      	pop	{r4, r7, pc}
    409a:	bf00      	nop
    409c:	2000097c 	.word	0x2000097c
    40a0:	00003cb5 	.word	0x00003cb5
    40a4:	00003b4d 	.word	0x00003b4d
    40a8:	00003c99 	.word	0x00003c99

000040ac <__NVIC_SetPendingIRQ>:
{
    40ac:	b480      	push	{r7}
    40ae:	b083      	sub	sp, #12
    40b0:	af00      	add	r7, sp, #0
    40b2:	4603      	mov	r3, r0
    40b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    40b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40ba:	2b00      	cmp	r3, #0
    40bc:	db0c      	blt.n	40d8 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    40be:	4909      	ldr	r1, [pc, #36]	; (40e4 <__NVIC_SetPendingIRQ+0x38>)
    40c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40c4:	095b      	lsrs	r3, r3, #5
    40c6:	88fa      	ldrh	r2, [r7, #6]
    40c8:	f002 021f 	and.w	r2, r2, #31
    40cc:	2001      	movs	r0, #1
    40ce:	fa00 f202 	lsl.w	r2, r0, r2
    40d2:	3340      	adds	r3, #64	; 0x40
    40d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    40d8:	bf00      	nop
    40da:	370c      	adds	r7, #12
    40dc:	46bd      	mov	sp, r7
    40de:	f85d 7b04 	ldr.w	r7, [sp], #4
    40e2:	4770      	bx	lr
    40e4:	e000e100 	.word	0xe000e100

000040e8 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    40e8:	b580      	push	{r7, lr}
    40ea:	b082      	sub	sp, #8
    40ec:	af00      	add	r7, sp, #0
    40ee:	4603      	mov	r3, r0
    40f0:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    40f2:	79fb      	ldrb	r3, [r7, #7]
    40f4:	b21b      	sxth	r3, r3
    40f6:	4618      	mov	r0, r3
    40f8:	4b02      	ldr	r3, [pc, #8]	; (4104 <_irq_set+0x1c>)
    40fa:	4798      	blx	r3
}
    40fc:	bf00      	nop
    40fe:	3708      	adds	r7, #8
    4100:	46bd      	mov	sp, r7
    4102:	bd80      	pop	{r7, pc}
    4104:	000040ad 	.word	0x000040ad

00004108 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    4108:	b480      	push	{r7}
    410a:	b083      	sub	sp, #12
    410c:	af00      	add	r7, sp, #0
    410e:	4603      	mov	r3, r0
    4110:	6039      	str	r1, [r7, #0]
    4112:	80fb      	strh	r3, [r7, #6]
    4114:	4613      	mov	r3, r2
    4116:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4118:	797b      	ldrb	r3, [r7, #5]
    411a:	3b04      	subs	r3, #4
    411c:	2b05      	cmp	r3, #5
    411e:	d86b      	bhi.n	41f8 <_get_cycles_for_us_internal+0xf0>
    4120:	a201      	add	r2, pc, #4	; (adr r2, 4128 <_get_cycles_for_us_internal+0x20>)
    4122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4126:	bf00      	nop
    4128:	000041d7 	.word	0x000041d7
    412c:	000041b7 	.word	0x000041b7
    4130:	00004199 	.word	0x00004199
    4134:	0000417b 	.word	0x0000417b
    4138:	0000415d 	.word	0x0000415d
    413c:	00004141 	.word	0x00004141
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    4140:	88fb      	ldrh	r3, [r7, #6]
    4142:	683a      	ldr	r2, [r7, #0]
    4144:	4935      	ldr	r1, [pc, #212]	; (421c <_get_cycles_for_us_internal+0x114>)
    4146:	fba1 1202 	umull	r1, r2, r1, r2
    414a:	0c92      	lsrs	r2, r2, #18
    414c:	fb02 f303 	mul.w	r3, r2, r3
    4150:	3302      	adds	r3, #2
    4152:	4a33      	ldr	r2, [pc, #204]	; (4220 <_get_cycles_for_us_internal+0x118>)
    4154:	fba2 2303 	umull	r2, r3, r2, r3
    4158:	085b      	lsrs	r3, r3, #1
    415a:	e059      	b.n	4210 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    415c:	88fb      	ldrh	r3, [r7, #6]
    415e:	683a      	ldr	r2, [r7, #0]
    4160:	0952      	lsrs	r2, r2, #5
    4162:	4930      	ldr	r1, [pc, #192]	; (4224 <_get_cycles_for_us_internal+0x11c>)
    4164:	fba1 1202 	umull	r1, r2, r1, r2
    4168:	09d2      	lsrs	r2, r2, #7
    416a:	fb02 f303 	mul.w	r3, r2, r3
    416e:	331d      	adds	r3, #29
    4170:	4a2d      	ldr	r2, [pc, #180]	; (4228 <_get_cycles_for_us_internal+0x120>)
    4172:	fba2 2303 	umull	r2, r3, r2, r3
    4176:	091b      	lsrs	r3, r3, #4
    4178:	e04a      	b.n	4210 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    417a:	88fb      	ldrh	r3, [r7, #6]
    417c:	683a      	ldr	r2, [r7, #0]
    417e:	492b      	ldr	r1, [pc, #172]	; (422c <_get_cycles_for_us_internal+0x124>)
    4180:	fba1 1202 	umull	r1, r2, r1, r2
    4184:	0b52      	lsrs	r2, r2, #13
    4186:	fb02 f303 	mul.w	r3, r2, r3
    418a:	f203 132b 	addw	r3, r3, #299	; 0x12b
    418e:	4a28      	ldr	r2, [pc, #160]	; (4230 <_get_cycles_for_us_internal+0x128>)
    4190:	fba2 2303 	umull	r2, r3, r2, r3
    4194:	095b      	lsrs	r3, r3, #5
    4196:	e03b      	b.n	4210 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    4198:	88fb      	ldrh	r3, [r7, #6]
    419a:	683a      	ldr	r2, [r7, #0]
    419c:	4925      	ldr	r1, [pc, #148]	; (4234 <_get_cycles_for_us_internal+0x12c>)
    419e:	fba1 1202 	umull	r1, r2, r1, r2
    41a2:	0992      	lsrs	r2, r2, #6
    41a4:	fb02 f303 	mul.w	r3, r2, r3
    41a8:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    41ac:	4a22      	ldr	r2, [pc, #136]	; (4238 <_get_cycles_for_us_internal+0x130>)
    41ae:	fba2 2303 	umull	r2, r3, r2, r3
    41b2:	099b      	lsrs	r3, r3, #6
    41b4:	e02c      	b.n	4210 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    41b6:	88fb      	ldrh	r3, [r7, #6]
    41b8:	683a      	ldr	r2, [r7, #0]
    41ba:	4920      	ldr	r1, [pc, #128]	; (423c <_get_cycles_for_us_internal+0x134>)
    41bc:	fba1 1202 	umull	r1, r2, r1, r2
    41c0:	0952      	lsrs	r2, r2, #5
    41c2:	fb02 f303 	mul.w	r3, r2, r3
    41c6:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    41ca:	332f      	adds	r3, #47	; 0x2f
    41cc:	4a1c      	ldr	r2, [pc, #112]	; (4240 <_get_cycles_for_us_internal+0x138>)
    41ce:	fba2 2303 	umull	r2, r3, r2, r3
    41d2:	0b5b      	lsrs	r3, r3, #13
    41d4:	e01c      	b.n	4210 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    41d6:	88fb      	ldrh	r3, [r7, #6]
    41d8:	683a      	ldr	r2, [r7, #0]
    41da:	491a      	ldr	r1, [pc, #104]	; (4244 <_get_cycles_for_us_internal+0x13c>)
    41dc:	fba1 1202 	umull	r1, r2, r1, r2
    41e0:	08d2      	lsrs	r2, r2, #3
    41e2:	fb02 f303 	mul.w	r3, r2, r3
    41e6:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    41ea:	f203 33df 	addw	r3, r3, #991	; 0x3df
    41ee:	4a16      	ldr	r2, [pc, #88]	; (4248 <_get_cycles_for_us_internal+0x140>)
    41f0:	fba2 2303 	umull	r2, r3, r2, r3
    41f4:	0c5b      	lsrs	r3, r3, #17
    41f6:	e00b      	b.n	4210 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    41f8:	88fb      	ldrh	r3, [r7, #6]
    41fa:	683a      	ldr	r2, [r7, #0]
    41fc:	fb02 f303 	mul.w	r3, r2, r3
    4200:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    4204:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    4208:	4a10      	ldr	r2, [pc, #64]	; (424c <_get_cycles_for_us_internal+0x144>)
    420a:	fba2 2303 	umull	r2, r3, r2, r3
    420e:	0c9b      	lsrs	r3, r3, #18
	}
}
    4210:	4618      	mov	r0, r3
    4212:	370c      	adds	r7, #12
    4214:	46bd      	mov	sp, r7
    4216:	f85d 7b04 	ldr.w	r7, [sp], #4
    421a:	4770      	bx	lr
    421c:	431bde83 	.word	0x431bde83
    4220:	aaaaaaab 	.word	0xaaaaaaab
    4224:	0a7c5ac5 	.word	0x0a7c5ac5
    4228:	88888889 	.word	0x88888889
    422c:	d1b71759 	.word	0xd1b71759
    4230:	1b4e81b5 	.word	0x1b4e81b5
    4234:	10624dd3 	.word	0x10624dd3
    4238:	057619f1 	.word	0x057619f1
    423c:	51eb851f 	.word	0x51eb851f
    4240:	45e7b273 	.word	0x45e7b273
    4244:	cccccccd 	.word	0xcccccccd
    4248:	6fd91d85 	.word	0x6fd91d85
    424c:	165e9f81 	.word	0x165e9f81

00004250 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    4250:	b580      	push	{r7, lr}
    4252:	b082      	sub	sp, #8
    4254:	af00      	add	r7, sp, #0
    4256:	4603      	mov	r3, r0
    4258:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    425a:	88fb      	ldrh	r3, [r7, #6]
    425c:	2209      	movs	r2, #9
    425e:	4904      	ldr	r1, [pc, #16]	; (4270 <_get_cycles_for_us+0x20>)
    4260:	4618      	mov	r0, r3
    4262:	4b04      	ldr	r3, [pc, #16]	; (4274 <_get_cycles_for_us+0x24>)
    4264:	4798      	blx	r3
    4266:	4603      	mov	r3, r0
}
    4268:	4618      	mov	r0, r3
    426a:	3708      	adds	r7, #8
    426c:	46bd      	mov	sp, r7
    426e:	bd80      	pop	{r7, pc}
    4270:	07270e00 	.word	0x07270e00
    4274:	00004109 	.word	0x00004109

00004278 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    4278:	b480      	push	{r7}
    427a:	b083      	sub	sp, #12
    427c:	af00      	add	r7, sp, #0
    427e:	4603      	mov	r3, r0
    4280:	6039      	str	r1, [r7, #0]
    4282:	80fb      	strh	r3, [r7, #6]
    4284:	4613      	mov	r3, r2
    4286:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4288:	797b      	ldrb	r3, [r7, #5]
    428a:	3b04      	subs	r3, #4
    428c:	2b05      	cmp	r3, #5
    428e:	d870      	bhi.n	4372 <_get_cycles_for_ms_internal+0xfa>
    4290:	a201      	add	r2, pc, #4	; (adr r2, 4298 <_get_cycles_for_ms_internal+0x20>)
    4292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4296:	bf00      	nop
    4298:	00004355 	.word	0x00004355
    429c:	00004339 	.word	0x00004339
    42a0:	0000431d 	.word	0x0000431d
    42a4:	000042f9 	.word	0x000042f9
    42a8:	000042d5 	.word	0x000042d5
    42ac:	000042b1 	.word	0x000042b1
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    42b0:	88fb      	ldrh	r3, [r7, #6]
    42b2:	683a      	ldr	r2, [r7, #0]
    42b4:	4937      	ldr	r1, [pc, #220]	; (4394 <_get_cycles_for_ms_internal+0x11c>)
    42b6:	fba1 1202 	umull	r1, r2, r1, r2
    42ba:	0c92      	lsrs	r2, r2, #18
    42bc:	fb02 f303 	mul.w	r3, r2, r3
    42c0:	3302      	adds	r3, #2
    42c2:	4a35      	ldr	r2, [pc, #212]	; (4398 <_get_cycles_for_ms_internal+0x120>)
    42c4:	fba2 2303 	umull	r2, r3, r2, r3
    42c8:	085b      	lsrs	r3, r3, #1
    42ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    42ce:	fb02 f303 	mul.w	r3, r2, r3
    42d2:	e058      	b.n	4386 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    42d4:	88fb      	ldrh	r3, [r7, #6]
    42d6:	683a      	ldr	r2, [r7, #0]
    42d8:	0952      	lsrs	r2, r2, #5
    42da:	4930      	ldr	r1, [pc, #192]	; (439c <_get_cycles_for_ms_internal+0x124>)
    42dc:	fba1 1202 	umull	r1, r2, r1, r2
    42e0:	09d2      	lsrs	r2, r2, #7
    42e2:	fb02 f303 	mul.w	r3, r2, r3
    42e6:	3302      	adds	r3, #2
    42e8:	4a2b      	ldr	r2, [pc, #172]	; (4398 <_get_cycles_for_ms_internal+0x120>)
    42ea:	fba2 2303 	umull	r2, r3, r2, r3
    42ee:	085b      	lsrs	r3, r3, #1
    42f0:	2264      	movs	r2, #100	; 0x64
    42f2:	fb02 f303 	mul.w	r3, r2, r3
    42f6:	e046      	b.n	4386 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    42f8:	88fb      	ldrh	r3, [r7, #6]
    42fa:	683a      	ldr	r2, [r7, #0]
    42fc:	4928      	ldr	r1, [pc, #160]	; (43a0 <_get_cycles_for_ms_internal+0x128>)
    42fe:	fba1 1202 	umull	r1, r2, r1, r2
    4302:	0b52      	lsrs	r2, r2, #13
    4304:	fb02 f303 	mul.w	r3, r2, r3
    4308:	3302      	adds	r3, #2
    430a:	4a23      	ldr	r2, [pc, #140]	; (4398 <_get_cycles_for_ms_internal+0x120>)
    430c:	fba2 2303 	umull	r2, r3, r2, r3
    4310:	085a      	lsrs	r2, r3, #1
    4312:	4613      	mov	r3, r2
    4314:	009b      	lsls	r3, r3, #2
    4316:	4413      	add	r3, r2
    4318:	005b      	lsls	r3, r3, #1
    431a:	e034      	b.n	4386 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    431c:	88fb      	ldrh	r3, [r7, #6]
    431e:	683a      	ldr	r2, [r7, #0]
    4320:	4920      	ldr	r1, [pc, #128]	; (43a4 <_get_cycles_for_ms_internal+0x12c>)
    4322:	fba1 1202 	umull	r1, r2, r1, r2
    4326:	0992      	lsrs	r2, r2, #6
    4328:	fb02 f303 	mul.w	r3, r2, r3
    432c:	3302      	adds	r3, #2
    432e:	4a1a      	ldr	r2, [pc, #104]	; (4398 <_get_cycles_for_ms_internal+0x120>)
    4330:	fba2 2303 	umull	r2, r3, r2, r3
    4334:	085b      	lsrs	r3, r3, #1
    4336:	e026      	b.n	4386 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    4338:	88fb      	ldrh	r3, [r7, #6]
    433a:	683a      	ldr	r2, [r7, #0]
    433c:	491a      	ldr	r1, [pc, #104]	; (43a8 <_get_cycles_for_ms_internal+0x130>)
    433e:	fba1 1202 	umull	r1, r2, r1, r2
    4342:	0952      	lsrs	r2, r2, #5
    4344:	fb02 f303 	mul.w	r3, r2, r3
    4348:	331d      	adds	r3, #29
    434a:	4a18      	ldr	r2, [pc, #96]	; (43ac <_get_cycles_for_ms_internal+0x134>)
    434c:	fba2 2303 	umull	r2, r3, r2, r3
    4350:	091b      	lsrs	r3, r3, #4
    4352:	e018      	b.n	4386 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    4354:	88fb      	ldrh	r3, [r7, #6]
    4356:	683a      	ldr	r2, [r7, #0]
    4358:	4915      	ldr	r1, [pc, #84]	; (43b0 <_get_cycles_for_ms_internal+0x138>)
    435a:	fba1 1202 	umull	r1, r2, r1, r2
    435e:	08d2      	lsrs	r2, r2, #3
    4360:	fb02 f303 	mul.w	r3, r2, r3
    4364:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4368:	4a12      	ldr	r2, [pc, #72]	; (43b4 <_get_cycles_for_ms_internal+0x13c>)
    436a:	fba2 2303 	umull	r2, r3, r2, r3
    436e:	095b      	lsrs	r3, r3, #5
    4370:	e009      	b.n	4386 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    4372:	88fb      	ldrh	r3, [r7, #6]
    4374:	683a      	ldr	r2, [r7, #0]
    4376:	fb02 f303 	mul.w	r3, r2, r3
    437a:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    437e:	4a0e      	ldr	r2, [pc, #56]	; (43b8 <_get_cycles_for_ms_internal+0x140>)
    4380:	fba2 2303 	umull	r2, r3, r2, r3
    4384:	099b      	lsrs	r3, r3, #6
	}
}
    4386:	4618      	mov	r0, r3
    4388:	370c      	adds	r7, #12
    438a:	46bd      	mov	sp, r7
    438c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4390:	4770      	bx	lr
    4392:	bf00      	nop
    4394:	431bde83 	.word	0x431bde83
    4398:	aaaaaaab 	.word	0xaaaaaaab
    439c:	0a7c5ac5 	.word	0x0a7c5ac5
    43a0:	d1b71759 	.word	0xd1b71759
    43a4:	10624dd3 	.word	0x10624dd3
    43a8:	51eb851f 	.word	0x51eb851f
    43ac:	88888889 	.word	0x88888889
    43b0:	cccccccd 	.word	0xcccccccd
    43b4:	1b4e81b5 	.word	0x1b4e81b5
    43b8:	057619f1 	.word	0x057619f1

000043bc <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    43bc:	b580      	push	{r7, lr}
    43be:	b082      	sub	sp, #8
    43c0:	af00      	add	r7, sp, #0
    43c2:	4603      	mov	r3, r0
    43c4:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    43c6:	88fb      	ldrh	r3, [r7, #6]
    43c8:	2209      	movs	r2, #9
    43ca:	4904      	ldr	r1, [pc, #16]	; (43dc <_get_cycles_for_ms+0x20>)
    43cc:	4618      	mov	r0, r3
    43ce:	4b04      	ldr	r3, [pc, #16]	; (43e0 <_get_cycles_for_ms+0x24>)
    43d0:	4798      	blx	r3
    43d2:	4603      	mov	r3, r0
}
    43d4:	4618      	mov	r0, r3
    43d6:	3708      	adds	r7, #8
    43d8:	46bd      	mov	sp, r7
    43da:	bd80      	pop	{r7, pc}
    43dc:	07270e00 	.word	0x07270e00
    43e0:	00004279 	.word	0x00004279
    43e4:	00000000 	.word	0x00000000

000043e8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    43e8:	b480      	push	{r7}
    43ea:	b083      	sub	sp, #12
    43ec:	af00      	add	r7, sp, #0
    43ee:	6078      	str	r0, [r7, #4]
    43f0:	6039      	str	r1, [r7, #0]
    43f2:	bf00      	nop
    43f4:	f3af 8000 	nop.w

000043f8 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    43f8:	3901      	subs	r1, #1
    43fa:	d8fd      	bhi.n	43f8 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    43fc:	bf00      	nop
    43fe:	370c      	adds	r7, #12
    4400:	46bd      	mov	sp, r7
    4402:	f85d 7b04 	ldr.w	r7, [sp], #4
    4406:	4770      	bx	lr

00004408 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4408:	b480      	push	{r7}
    440a:	b083      	sub	sp, #12
    440c:	af00      	add	r7, sp, #0
    440e:	6078      	str	r0, [r7, #4]
    4410:	460b      	mov	r3, r1
    4412:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    4414:	687b      	ldr	r3, [r7, #4]
    4416:	881b      	ldrh	r3, [r3, #0]
    4418:	b29a      	uxth	r2, r3
    441a:	887b      	ldrh	r3, [r7, #2]
    441c:	021b      	lsls	r3, r3, #8
    441e:	b29b      	uxth	r3, r3
    4420:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    4424:	b29b      	uxth	r3, r3
    4426:	4313      	orrs	r3, r2
    4428:	b29a      	uxth	r2, r3
    442a:	687b      	ldr	r3, [r7, #4]
    442c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    442e:	bf00      	nop
    4430:	370c      	adds	r7, #12
    4432:	46bd      	mov	sp, r7
    4434:	f85d 7b04 	ldr.w	r7, [sp], #4
    4438:	4770      	bx	lr

0000443a <hri_port_set_EVCTRL_reg>:
{
    443a:	b480      	push	{r7}
    443c:	b085      	sub	sp, #20
    443e:	af00      	add	r7, sp, #0
    4440:	60f8      	str	r0, [r7, #12]
    4442:	460b      	mov	r3, r1
    4444:	607a      	str	r2, [r7, #4]
    4446:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4448:	7afb      	ldrb	r3, [r7, #11]
    444a:	7afa      	ldrb	r2, [r7, #11]
    444c:	68f9      	ldr	r1, [r7, #12]
    444e:	01d2      	lsls	r2, r2, #7
    4450:	440a      	add	r2, r1
    4452:	322c      	adds	r2, #44	; 0x2c
    4454:	6811      	ldr	r1, [r2, #0]
    4456:	687a      	ldr	r2, [r7, #4]
    4458:	430a      	orrs	r2, r1
    445a:	68f9      	ldr	r1, [r7, #12]
    445c:	01db      	lsls	r3, r3, #7
    445e:	440b      	add	r3, r1
    4460:	332c      	adds	r3, #44	; 0x2c
    4462:	601a      	str	r2, [r3, #0]
}
    4464:	bf00      	nop
    4466:	3714      	adds	r7, #20
    4468:	46bd      	mov	sp, r7
    446a:	f85d 7b04 	ldr.w	r7, [sp], #4
    446e:	4770      	bx	lr

00004470 <_port_event_init>:

static inline void _port_event_init()
{
    4470:	b580      	push	{r7, lr}
    4472:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    4474:	2200      	movs	r2, #0
    4476:	2100      	movs	r1, #0
    4478:	480a      	ldr	r0, [pc, #40]	; (44a4 <_port_event_init+0x34>)
    447a:	4b0b      	ldr	r3, [pc, #44]	; (44a8 <_port_event_init+0x38>)
    447c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    447e:	2200      	movs	r2, #0
    4480:	2101      	movs	r1, #1
    4482:	4808      	ldr	r0, [pc, #32]	; (44a4 <_port_event_init+0x34>)
    4484:	4b08      	ldr	r3, [pc, #32]	; (44a8 <_port_event_init+0x38>)
    4486:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4488:	f64e 72ef 	movw	r2, #61423	; 0xefef
    448c:	2102      	movs	r1, #2
    448e:	4805      	ldr	r0, [pc, #20]	; (44a4 <_port_event_init+0x34>)
    4490:	4b05      	ldr	r3, [pc, #20]	; (44a8 <_port_event_init+0x38>)
    4492:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    4494:	2200      	movs	r2, #0
    4496:	2103      	movs	r1, #3
    4498:	4802      	ldr	r0, [pc, #8]	; (44a4 <_port_event_init+0x34>)
    449a:	4b03      	ldr	r3, [pc, #12]	; (44a8 <_port_event_init+0x38>)
    449c:	4798      	blx	r3
}
    449e:	bf00      	nop
    44a0:	bd80      	pop	{r7, pc}
    44a2:	bf00      	nop
    44a4:	41008000 	.word	0x41008000
    44a8:	0000443b 	.word	0x0000443b

000044ac <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    44ac:	b580      	push	{r7, lr}
    44ae:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    44b0:	2104      	movs	r1, #4
    44b2:	480b      	ldr	r0, [pc, #44]	; (44e0 <_init_chip+0x34>)
    44b4:	4b0b      	ldr	r3, [pc, #44]	; (44e4 <_init_chip+0x38>)
    44b6:	4798      	blx	r3

	_osc32kctrl_init_sources();
    44b8:	4b0b      	ldr	r3, [pc, #44]	; (44e8 <_init_chip+0x3c>)
    44ba:	4798      	blx	r3
	_oscctrl_init_sources();
    44bc:	4b0b      	ldr	r3, [pc, #44]	; (44ec <_init_chip+0x40>)
    44be:	4798      	blx	r3
	_mclk_init();
    44c0:	4b0b      	ldr	r3, [pc, #44]	; (44f0 <_init_chip+0x44>)
    44c2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    44c4:	f44f 6084 	mov.w	r0, #1056	; 0x420
    44c8:	4b0a      	ldr	r3, [pc, #40]	; (44f4 <_init_chip+0x48>)
    44ca:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    44cc:	4b0a      	ldr	r3, [pc, #40]	; (44f8 <_init_chip+0x4c>)
    44ce:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    44d0:	f640 30df 	movw	r0, #3039	; 0xbdf
    44d4:	4b07      	ldr	r3, [pc, #28]	; (44f4 <_init_chip+0x48>)
    44d6:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    44d8:	4b08      	ldr	r3, [pc, #32]	; (44fc <_init_chip+0x50>)
    44da:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    44dc:	bf00      	nop
    44de:	bd80      	pop	{r7, pc}
    44e0:	41004000 	.word	0x41004000
    44e4:	00004409 	.word	0x00004409
    44e8:	00004f9d 	.word	0x00004f9d
    44ec:	00005465 	.word	0x00005465
    44f0:	00004ebd 	.word	0x00004ebd
    44f4:	00004d7d 	.word	0x00004d7d
    44f8:	000054a5 	.word	0x000054a5
    44fc:	00004471 	.word	0x00004471

00004500 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4500:	b480      	push	{r7}
    4502:	b083      	sub	sp, #12
    4504:	af00      	add	r7, sp, #0
    4506:	6078      	str	r0, [r7, #4]
    4508:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    450a:	687b      	ldr	r3, [r7, #4]
    450c:	683a      	ldr	r2, [r7, #0]
    450e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4510:	2300      	movs	r3, #0
}
    4512:	4618      	mov	r0, r3
    4514:	370c      	adds	r7, #12
    4516:	46bd      	mov	sp, r7
    4518:	f85d 7b04 	ldr.w	r7, [sp], #4
    451c:	4770      	bx	lr
	...

00004520 <__NVIC_EnableIRQ>:
{
    4520:	b480      	push	{r7}
    4522:	b083      	sub	sp, #12
    4524:	af00      	add	r7, sp, #0
    4526:	4603      	mov	r3, r0
    4528:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    452a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    452e:	2b00      	cmp	r3, #0
    4530:	db0b      	blt.n	454a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4532:	4909      	ldr	r1, [pc, #36]	; (4558 <__NVIC_EnableIRQ+0x38>)
    4534:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4538:	095b      	lsrs	r3, r3, #5
    453a:	88fa      	ldrh	r2, [r7, #6]
    453c:	f002 021f 	and.w	r2, r2, #31
    4540:	2001      	movs	r0, #1
    4542:	fa00 f202 	lsl.w	r2, r0, r2
    4546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    454a:	bf00      	nop
    454c:	370c      	adds	r7, #12
    454e:	46bd      	mov	sp, r7
    4550:	f85d 7b04 	ldr.w	r7, [sp], #4
    4554:	4770      	bx	lr
    4556:	bf00      	nop
    4558:	e000e100 	.word	0xe000e100

0000455c <__NVIC_DisableIRQ>:
{
    455c:	b480      	push	{r7}
    455e:	b083      	sub	sp, #12
    4560:	af00      	add	r7, sp, #0
    4562:	4603      	mov	r3, r0
    4564:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    456a:	2b00      	cmp	r3, #0
    456c:	db10      	blt.n	4590 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    456e:	490b      	ldr	r1, [pc, #44]	; (459c <__NVIC_DisableIRQ+0x40>)
    4570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4574:	095b      	lsrs	r3, r3, #5
    4576:	88fa      	ldrh	r2, [r7, #6]
    4578:	f002 021f 	and.w	r2, r2, #31
    457c:	2001      	movs	r0, #1
    457e:	fa00 f202 	lsl.w	r2, r0, r2
    4582:	3320      	adds	r3, #32
    4584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4588:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    458c:	f3bf 8f6f 	isb	sy
}
    4590:	bf00      	nop
    4592:	370c      	adds	r7, #12
    4594:	46bd      	mov	sp, r7
    4596:	f85d 7b04 	ldr.w	r7, [sp], #4
    459a:	4770      	bx	lr
    459c:	e000e100 	.word	0xe000e100

000045a0 <__NVIC_ClearPendingIRQ>:
{
    45a0:	b480      	push	{r7}
    45a2:	b083      	sub	sp, #12
    45a4:	af00      	add	r7, sp, #0
    45a6:	4603      	mov	r3, r0
    45a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    45aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    45ae:	2b00      	cmp	r3, #0
    45b0:	db0c      	blt.n	45cc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    45b2:	4909      	ldr	r1, [pc, #36]	; (45d8 <__NVIC_ClearPendingIRQ+0x38>)
    45b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    45b8:	095b      	lsrs	r3, r3, #5
    45ba:	88fa      	ldrh	r2, [r7, #6]
    45bc:	f002 021f 	and.w	r2, r2, #31
    45c0:	2001      	movs	r0, #1
    45c2:	fa00 f202 	lsl.w	r2, r0, r2
    45c6:	3360      	adds	r3, #96	; 0x60
    45c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    45cc:	bf00      	nop
    45ce:	370c      	adds	r7, #12
    45d0:	46bd      	mov	sp, r7
    45d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    45d6:	4770      	bx	lr
    45d8:	e000e100 	.word	0xe000e100

000045dc <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    45dc:	b480      	push	{r7}
    45de:	b083      	sub	sp, #12
    45e0:	af00      	add	r7, sp, #0
    45e2:	6078      	str	r0, [r7, #4]
    45e4:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    45e6:	bf00      	nop
    45e8:	687b      	ldr	r3, [r7, #4]
    45ea:	685a      	ldr	r2, [r3, #4]
    45ec:	683b      	ldr	r3, [r7, #0]
    45ee:	4013      	ands	r3, r2
    45f0:	2b00      	cmp	r3, #0
    45f2:	d1f9      	bne.n	45e8 <hri_eic_wait_for_sync+0xc>
	};
}
    45f4:	bf00      	nop
    45f6:	370c      	adds	r7, #12
    45f8:	46bd      	mov	sp, r7
    45fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    45fe:	4770      	bx	lr

00004600 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4600:	b480      	push	{r7}
    4602:	b083      	sub	sp, #12
    4604:	af00      	add	r7, sp, #0
    4606:	6078      	str	r0, [r7, #4]
    4608:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    460a:	687b      	ldr	r3, [r7, #4]
    460c:	685a      	ldr	r2, [r3, #4]
    460e:	683b      	ldr	r3, [r7, #0]
    4610:	4013      	ands	r3, r2
    4612:	2b00      	cmp	r3, #0
    4614:	bf14      	ite	ne
    4616:	2301      	movne	r3, #1
    4618:	2300      	moveq	r3, #0
    461a:	b2db      	uxtb	r3, r3
}
    461c:	4618      	mov	r0, r3
    461e:	370c      	adds	r7, #12
    4620:	46bd      	mov	sp, r7
    4622:	f85d 7b04 	ldr.w	r7, [sp], #4
    4626:	4770      	bx	lr

00004628 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4628:	b480      	push	{r7}
    462a:	b083      	sub	sp, #12
    462c:	af00      	add	r7, sp, #0
    462e:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4630:	687b      	ldr	r3, [r7, #4]
    4632:	695b      	ldr	r3, [r3, #20]
}
    4634:	4618      	mov	r0, r3
    4636:	370c      	adds	r7, #12
    4638:	46bd      	mov	sp, r7
    463a:	f85d 7b04 	ldr.w	r7, [sp], #4
    463e:	4770      	bx	lr

00004640 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4640:	b480      	push	{r7}
    4642:	b083      	sub	sp, #12
    4644:	af00      	add	r7, sp, #0
    4646:	6078      	str	r0, [r7, #4]
    4648:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    464a:	687b      	ldr	r3, [r7, #4]
    464c:	683a      	ldr	r2, [r7, #0]
    464e:	615a      	str	r2, [r3, #20]
}
    4650:	bf00      	nop
    4652:	370c      	adds	r7, #12
    4654:	46bd      	mov	sp, r7
    4656:	f85d 7b04 	ldr.w	r7, [sp], #4
    465a:	4770      	bx	lr

0000465c <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    465c:	b480      	push	{r7}
    465e:	b083      	sub	sp, #12
    4660:	af00      	add	r7, sp, #0
    4662:	6078      	str	r0, [r7, #4]
    4664:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    4666:	687b      	ldr	r3, [r7, #4]
    4668:	683a      	ldr	r2, [r7, #0]
    466a:	611a      	str	r2, [r3, #16]
}
    466c:	bf00      	nop
    466e:	370c      	adds	r7, #12
    4670:	46bd      	mov	sp, r7
    4672:	f85d 7b04 	ldr.w	r7, [sp], #4
    4676:	4770      	bx	lr

00004678 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4678:	b480      	push	{r7}
    467a:	b083      	sub	sp, #12
    467c:	af00      	add	r7, sp, #0
    467e:	6078      	str	r0, [r7, #4]
    4680:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    4682:	687b      	ldr	r3, [r7, #4]
    4684:	683a      	ldr	r2, [r7, #0]
    4686:	60da      	str	r2, [r3, #12]
}
    4688:	bf00      	nop
    468a:	370c      	adds	r7, #12
    468c:	46bd      	mov	sp, r7
    468e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4692:	4770      	bx	lr

00004694 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4694:	b580      	push	{r7, lr}
    4696:	b082      	sub	sp, #8
    4698:	af00      	add	r7, sp, #0
    469a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    469c:	687b      	ldr	r3, [r7, #4]
    469e:	781b      	ldrb	r3, [r3, #0]
    46a0:	b2db      	uxtb	r3, r3
    46a2:	f043 0302 	orr.w	r3, r3, #2
    46a6:	b2da      	uxtb	r2, r3
    46a8:	687b      	ldr	r3, [r7, #4]
    46aa:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    46ac:	2103      	movs	r1, #3
    46ae:	6878      	ldr	r0, [r7, #4]
    46b0:	4b02      	ldr	r3, [pc, #8]	; (46bc <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    46b2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    46b4:	bf00      	nop
    46b6:	3708      	adds	r7, #8
    46b8:	46bd      	mov	sp, r7
    46ba:	bd80      	pop	{r7, pc}
    46bc:	000045dd 	.word	0x000045dd

000046c0 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    46c0:	b580      	push	{r7, lr}
    46c2:	b082      	sub	sp, #8
    46c4:	af00      	add	r7, sp, #0
    46c6:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    46c8:	687b      	ldr	r3, [r7, #4]
    46ca:	781b      	ldrb	r3, [r3, #0]
    46cc:	b2db      	uxtb	r3, r3
    46ce:	f023 0302 	bic.w	r3, r3, #2
    46d2:	b2da      	uxtb	r2, r3
    46d4:	687b      	ldr	r3, [r7, #4]
    46d6:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    46d8:	2103      	movs	r1, #3
    46da:	6878      	ldr	r0, [r7, #4]
    46dc:	4b02      	ldr	r3, [pc, #8]	; (46e8 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    46de:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    46e0:	bf00      	nop
    46e2:	3708      	adds	r7, #8
    46e4:	46bd      	mov	sp, r7
    46e6:	bd80      	pop	{r7, pc}
    46e8:	000045dd 	.word	0x000045dd

000046ec <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    46ec:	b580      	push	{r7, lr}
    46ee:	b084      	sub	sp, #16
    46f0:	af00      	add	r7, sp, #0
    46f2:	6078      	str	r0, [r7, #4]
    46f4:	460b      	mov	r3, r1
    46f6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    46f8:	687b      	ldr	r3, [r7, #4]
    46fa:	781b      	ldrb	r3, [r3, #0]
    46fc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    46fe:	7bfb      	ldrb	r3, [r7, #15]
    4700:	f023 0310 	bic.w	r3, r3, #16
    4704:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    4706:	78fb      	ldrb	r3, [r7, #3]
    4708:	011b      	lsls	r3, r3, #4
    470a:	b25a      	sxtb	r2, r3
    470c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4710:	4313      	orrs	r3, r2
    4712:	b25b      	sxtb	r3, r3
    4714:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    4716:	687b      	ldr	r3, [r7, #4]
    4718:	7bfa      	ldrb	r2, [r7, #15]
    471a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    471c:	2103      	movs	r1, #3
    471e:	6878      	ldr	r0, [r7, #4]
    4720:	4b02      	ldr	r3, [pc, #8]	; (472c <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4722:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4724:	bf00      	nop
    4726:	3710      	adds	r7, #16
    4728:	46bd      	mov	sp, r7
    472a:	bd80      	pop	{r7, pc}
    472c:	000045dd 	.word	0x000045dd

00004730 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4730:	b580      	push	{r7, lr}
    4732:	b084      	sub	sp, #16
    4734:	af00      	add	r7, sp, #0
    4736:	6078      	str	r0, [r7, #4]
    4738:	460b      	mov	r3, r1
    473a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    473c:	2103      	movs	r1, #3
    473e:	6878      	ldr	r0, [r7, #4]
    4740:	4b06      	ldr	r3, [pc, #24]	; (475c <hri_eic_get_CTRLA_reg+0x2c>)
    4742:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4744:	687b      	ldr	r3, [r7, #4]
    4746:	781b      	ldrb	r3, [r3, #0]
    4748:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    474a:	7bfa      	ldrb	r2, [r7, #15]
    474c:	78fb      	ldrb	r3, [r7, #3]
    474e:	4013      	ands	r3, r2
    4750:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4752:	7bfb      	ldrb	r3, [r7, #15]
}
    4754:	4618      	mov	r0, r3
    4756:	3710      	adds	r7, #16
    4758:	46bd      	mov	sp, r7
    475a:	bd80      	pop	{r7, pc}
    475c:	000045dd 	.word	0x000045dd

00004760 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4760:	b580      	push	{r7, lr}
    4762:	b082      	sub	sp, #8
    4764:	af00      	add	r7, sp, #0
    4766:	6078      	str	r0, [r7, #4]
    4768:	460b      	mov	r3, r1
    476a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    476c:	687b      	ldr	r3, [r7, #4]
    476e:	78fa      	ldrb	r2, [r7, #3]
    4770:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4772:	2103      	movs	r1, #3
    4774:	6878      	ldr	r0, [r7, #4]
    4776:	4b03      	ldr	r3, [pc, #12]	; (4784 <hri_eic_write_CTRLA_reg+0x24>)
    4778:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    477a:	bf00      	nop
    477c:	3708      	adds	r7, #8
    477e:	46bd      	mov	sp, r7
    4780:	bd80      	pop	{r7, pc}
    4782:	bf00      	nop
    4784:	000045dd 	.word	0x000045dd

00004788 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4788:	b480      	push	{r7}
    478a:	b083      	sub	sp, #12
    478c:	af00      	add	r7, sp, #0
    478e:	6078      	str	r0, [r7, #4]
    4790:	460b      	mov	r3, r1
    4792:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4794:	687b      	ldr	r3, [r7, #4]
    4796:	78fa      	ldrb	r2, [r7, #3]
    4798:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    479a:	bf00      	nop
    479c:	370c      	adds	r7, #12
    479e:	46bd      	mov	sp, r7
    47a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    47a4:	4770      	bx	lr

000047a6 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    47a6:	b480      	push	{r7}
    47a8:	b083      	sub	sp, #12
    47aa:	af00      	add	r7, sp, #0
    47ac:	6078      	str	r0, [r7, #4]
    47ae:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    47b0:	687b      	ldr	r3, [r7, #4]
    47b2:	683a      	ldr	r2, [r7, #0]
    47b4:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    47b6:	bf00      	nop
    47b8:	370c      	adds	r7, #12
    47ba:	46bd      	mov	sp, r7
    47bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    47c0:	4770      	bx	lr

000047c2 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    47c2:	b480      	push	{r7}
    47c4:	b083      	sub	sp, #12
    47c6:	af00      	add	r7, sp, #0
    47c8:	6078      	str	r0, [r7, #4]
    47ca:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    47cc:	687b      	ldr	r3, [r7, #4]
    47ce:	683a      	ldr	r2, [r7, #0]
    47d0:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    47d2:	bf00      	nop
    47d4:	370c      	adds	r7, #12
    47d6:	46bd      	mov	sp, r7
    47d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    47dc:	4770      	bx	lr

000047de <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    47de:	b480      	push	{r7}
    47e0:	b085      	sub	sp, #20
    47e2:	af00      	add	r7, sp, #0
    47e4:	60f8      	str	r0, [r7, #12]
    47e6:	460b      	mov	r3, r1
    47e8:	607a      	str	r2, [r7, #4]
    47ea:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    47ec:	7afb      	ldrb	r3, [r7, #11]
    47ee:	68fa      	ldr	r2, [r7, #12]
    47f0:	3306      	adds	r3, #6
    47f2:	009b      	lsls	r3, r3, #2
    47f4:	4413      	add	r3, r2
    47f6:	687a      	ldr	r2, [r7, #4]
    47f8:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    47fa:	bf00      	nop
    47fc:	3714      	adds	r7, #20
    47fe:	46bd      	mov	sp, r7
    4800:	f85d 7b04 	ldr.w	r7, [sp], #4
    4804:	4770      	bx	lr

00004806 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    4806:	b480      	push	{r7}
    4808:	b083      	sub	sp, #12
    480a:	af00      	add	r7, sp, #0
    480c:	6078      	str	r0, [r7, #4]
    480e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4810:	687b      	ldr	r3, [r7, #4]
    4812:	683a      	ldr	r2, [r7, #0]
    4814:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    4816:	bf00      	nop
    4818:	370c      	adds	r7, #12
    481a:	46bd      	mov	sp, r7
    481c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4820:	4770      	bx	lr

00004822 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4822:	b480      	push	{r7}
    4824:	b083      	sub	sp, #12
    4826:	af00      	add	r7, sp, #0
    4828:	6078      	str	r0, [r7, #4]
    482a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    482c:	687b      	ldr	r3, [r7, #4]
    482e:	683a      	ldr	r2, [r7, #0]
    4830:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4832:	bf00      	nop
    4834:	370c      	adds	r7, #12
    4836:	46bd      	mov	sp, r7
    4838:	f85d 7b04 	ldr.w	r7, [sp], #4
    483c:	4770      	bx	lr
	...

00004840 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4840:	b580      	push	{r7, lr}
    4842:	b082      	sub	sp, #8
    4844:	af00      	add	r7, sp, #0
    4846:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4848:	2101      	movs	r1, #1
    484a:	484b      	ldr	r0, [pc, #300]	; (4978 <_ext_irq_init+0x138>)
    484c:	4b4b      	ldr	r3, [pc, #300]	; (497c <_ext_irq_init+0x13c>)
    484e:	4798      	blx	r3
    4850:	4603      	mov	r3, r0
    4852:	f083 0301 	eor.w	r3, r3, #1
    4856:	b2db      	uxtb	r3, r3
    4858:	2b00      	cmp	r3, #0
    485a:	d011      	beq.n	4880 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    485c:	2102      	movs	r1, #2
    485e:	4846      	ldr	r0, [pc, #280]	; (4978 <_ext_irq_init+0x138>)
    4860:	4b47      	ldr	r3, [pc, #284]	; (4980 <_ext_irq_init+0x140>)
    4862:	4798      	blx	r3
    4864:	4603      	mov	r3, r0
    4866:	2b00      	cmp	r3, #0
    4868:	d006      	beq.n	4878 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    486a:	4843      	ldr	r0, [pc, #268]	; (4978 <_ext_irq_init+0x138>)
    486c:	4b45      	ldr	r3, [pc, #276]	; (4984 <_ext_irq_init+0x144>)
    486e:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4870:	2102      	movs	r1, #2
    4872:	4841      	ldr	r0, [pc, #260]	; (4978 <_ext_irq_init+0x138>)
    4874:	4b44      	ldr	r3, [pc, #272]	; (4988 <_ext_irq_init+0x148>)
    4876:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4878:	2101      	movs	r1, #1
    487a:	483f      	ldr	r0, [pc, #252]	; (4978 <_ext_irq_init+0x138>)
    487c:	4b43      	ldr	r3, [pc, #268]	; (498c <_ext_irq_init+0x14c>)
    487e:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4880:	2101      	movs	r1, #1
    4882:	483d      	ldr	r0, [pc, #244]	; (4978 <_ext_irq_init+0x138>)
    4884:	4b40      	ldr	r3, [pc, #256]	; (4988 <_ext_irq_init+0x148>)
    4886:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4888:	2100      	movs	r1, #0
    488a:	483b      	ldr	r0, [pc, #236]	; (4978 <_ext_irq_init+0x138>)
    488c:	4b40      	ldr	r3, [pc, #256]	; (4990 <_ext_irq_init+0x150>)
    488e:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4890:	2100      	movs	r1, #0
    4892:	4839      	ldr	r0, [pc, #228]	; (4978 <_ext_irq_init+0x138>)
    4894:	4b3f      	ldr	r3, [pc, #252]	; (4994 <_ext_irq_init+0x154>)
    4896:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4898:	2100      	movs	r1, #0
    489a:	4837      	ldr	r0, [pc, #220]	; (4978 <_ext_irq_init+0x138>)
    489c:	4b3e      	ldr	r3, [pc, #248]	; (4998 <_ext_irq_init+0x158>)
    489e:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    48a0:	f240 31b9 	movw	r1, #953	; 0x3b9
    48a4:	4834      	ldr	r0, [pc, #208]	; (4978 <_ext_irq_init+0x138>)
    48a6:	4b3d      	ldr	r3, [pc, #244]	; (499c <_ext_irq_init+0x15c>)
    48a8:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    48aa:	f240 3139 	movw	r1, #825	; 0x339
    48ae:	4832      	ldr	r0, [pc, #200]	; (4978 <_ext_irq_init+0x138>)
    48b0:	4b3b      	ldr	r3, [pc, #236]	; (49a0 <_ext_irq_init+0x160>)
    48b2:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    48b4:	2100      	movs	r1, #0
    48b6:	4830      	ldr	r0, [pc, #192]	; (4978 <_ext_irq_init+0x138>)
    48b8:	4b3a      	ldr	r3, [pc, #232]	; (49a4 <_ext_irq_init+0x164>)
    48ba:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    48bc:	4a3a      	ldr	r2, [pc, #232]	; (49a8 <_ext_irq_init+0x168>)
    48be:	2100      	movs	r1, #0
    48c0:	482d      	ldr	r0, [pc, #180]	; (4978 <_ext_irq_init+0x138>)
    48c2:	4b3a      	ldr	r3, [pc, #232]	; (49ac <_ext_irq_init+0x16c>)
    48c4:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    48c6:	2211      	movs	r2, #17
    48c8:	2101      	movs	r1, #1
    48ca:	482b      	ldr	r0, [pc, #172]	; (4978 <_ext_irq_init+0x138>)
    48cc:	4b37      	ldr	r3, [pc, #220]	; (49ac <_ext_irq_init+0x16c>)
    48ce:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    48d0:	4829      	ldr	r0, [pc, #164]	; (4978 <_ext_irq_init+0x138>)
    48d2:	4b37      	ldr	r3, [pc, #220]	; (49b0 <_ext_irq_init+0x170>)
    48d4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    48d6:	200c      	movs	r0, #12
    48d8:	4b36      	ldr	r3, [pc, #216]	; (49b4 <_ext_irq_init+0x174>)
    48da:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    48dc:	200c      	movs	r0, #12
    48de:	4b36      	ldr	r3, [pc, #216]	; (49b8 <_ext_irq_init+0x178>)
    48e0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    48e2:	200c      	movs	r0, #12
    48e4:	4b35      	ldr	r3, [pc, #212]	; (49bc <_ext_irq_init+0x17c>)
    48e6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    48e8:	200f      	movs	r0, #15
    48ea:	4b32      	ldr	r3, [pc, #200]	; (49b4 <_ext_irq_init+0x174>)
    48ec:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    48ee:	200f      	movs	r0, #15
    48f0:	4b31      	ldr	r3, [pc, #196]	; (49b8 <_ext_irq_init+0x178>)
    48f2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    48f4:	200f      	movs	r0, #15
    48f6:	4b31      	ldr	r3, [pc, #196]	; (49bc <_ext_irq_init+0x17c>)
    48f8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    48fa:	2010      	movs	r0, #16
    48fc:	4b2d      	ldr	r3, [pc, #180]	; (49b4 <_ext_irq_init+0x174>)
    48fe:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    4900:	2010      	movs	r0, #16
    4902:	4b2d      	ldr	r3, [pc, #180]	; (49b8 <_ext_irq_init+0x178>)
    4904:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4906:	2010      	movs	r0, #16
    4908:	4b2c      	ldr	r3, [pc, #176]	; (49bc <_ext_irq_init+0x17c>)
    490a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    490c:	2011      	movs	r0, #17
    490e:	4b29      	ldr	r3, [pc, #164]	; (49b4 <_ext_irq_init+0x174>)
    4910:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4912:	2011      	movs	r0, #17
    4914:	4b28      	ldr	r3, [pc, #160]	; (49b8 <_ext_irq_init+0x178>)
    4916:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4918:	2011      	movs	r0, #17
    491a:	4b28      	ldr	r3, [pc, #160]	; (49bc <_ext_irq_init+0x17c>)
    491c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    491e:	2012      	movs	r0, #18
    4920:	4b24      	ldr	r3, [pc, #144]	; (49b4 <_ext_irq_init+0x174>)
    4922:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4924:	2012      	movs	r0, #18
    4926:	4b24      	ldr	r3, [pc, #144]	; (49b8 <_ext_irq_init+0x178>)
    4928:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    492a:	2012      	movs	r0, #18
    492c:	4b23      	ldr	r3, [pc, #140]	; (49bc <_ext_irq_init+0x17c>)
    492e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    4930:	2013      	movs	r0, #19
    4932:	4b20      	ldr	r3, [pc, #128]	; (49b4 <_ext_irq_init+0x174>)
    4934:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4936:	2013      	movs	r0, #19
    4938:	4b1f      	ldr	r3, [pc, #124]	; (49b8 <_ext_irq_init+0x178>)
    493a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    493c:	2013      	movs	r0, #19
    493e:	4b1f      	ldr	r3, [pc, #124]	; (49bc <_ext_irq_init+0x17c>)
    4940:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    4942:	2014      	movs	r0, #20
    4944:	4b1b      	ldr	r3, [pc, #108]	; (49b4 <_ext_irq_init+0x174>)
    4946:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    4948:	2014      	movs	r0, #20
    494a:	4b1b      	ldr	r3, [pc, #108]	; (49b8 <_ext_irq_init+0x178>)
    494c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    494e:	2014      	movs	r0, #20
    4950:	4b1a      	ldr	r3, [pc, #104]	; (49bc <_ext_irq_init+0x17c>)
    4952:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    4954:	2015      	movs	r0, #21
    4956:	4b17      	ldr	r3, [pc, #92]	; (49b4 <_ext_irq_init+0x174>)
    4958:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    495a:	2015      	movs	r0, #21
    495c:	4b16      	ldr	r3, [pc, #88]	; (49b8 <_ext_irq_init+0x178>)
    495e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    4960:	2015      	movs	r0, #21
    4962:	4b16      	ldr	r3, [pc, #88]	; (49bc <_ext_irq_init+0x17c>)
    4964:	4798      	blx	r3

	callback = cb;
    4966:	4a16      	ldr	r2, [pc, #88]	; (49c0 <_ext_irq_init+0x180>)
    4968:	687b      	ldr	r3, [r7, #4]
    496a:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    496c:	2300      	movs	r3, #0
}
    496e:	4618      	mov	r0, r3
    4970:	3708      	adds	r7, #8
    4972:	46bd      	mov	sp, r7
    4974:	bd80      	pop	{r7, pc}
    4976:	bf00      	nop
    4978:	40002800 	.word	0x40002800
    497c:	00004601 	.word	0x00004601
    4980:	00004731 	.word	0x00004731
    4984:	000046c1 	.word	0x000046c1
    4988:	000045dd 	.word	0x000045dd
    498c:	00004761 	.word	0x00004761
    4990:	000046ed 	.word	0x000046ed
    4994:	00004789 	.word	0x00004789
    4998:	000047a7 	.word	0x000047a7
    499c:	000047c3 	.word	0x000047c3
    49a0:	00004807 	.word	0x00004807
    49a4:	00004823 	.word	0x00004823
    49a8:	90999003 	.word	0x90999003
    49ac:	000047df 	.word	0x000047df
    49b0:	00004695 	.word	0x00004695
    49b4:	0000455d 	.word	0x0000455d
    49b8:	000045a1 	.word	0x000045a1
    49bc:	00004521 	.word	0x00004521
    49c0:	20000980 	.word	0x20000980

000049c4 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    49c4:	b580      	push	{r7, lr}
    49c6:	b084      	sub	sp, #16
    49c8:	af00      	add	r7, sp, #0
    49ca:	6078      	str	r0, [r7, #4]
    49cc:	460b      	mov	r3, r1
    49ce:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    49d0:	23ff      	movs	r3, #255	; 0xff
    49d2:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    49d4:	2300      	movs	r3, #0
    49d6:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    49d8:	e010      	b.n	49fc <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    49da:	7bbb      	ldrb	r3, [r7, #14]
    49dc:	4a1c      	ldr	r2, [pc, #112]	; (4a50 <_ext_irq_enable+0x8c>)
    49de:	00db      	lsls	r3, r3, #3
    49e0:	4413      	add	r3, r2
    49e2:	685a      	ldr	r2, [r3, #4]
    49e4:	687b      	ldr	r3, [r7, #4]
    49e6:	429a      	cmp	r2, r3
    49e8:	d105      	bne.n	49f6 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    49ea:	7bbb      	ldrb	r3, [r7, #14]
    49ec:	4a18      	ldr	r2, [pc, #96]	; (4a50 <_ext_irq_enable+0x8c>)
    49ee:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    49f2:	73fb      	strb	r3, [r7, #15]
			break;
    49f4:	e005      	b.n	4a02 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    49f6:	7bbb      	ldrb	r3, [r7, #14]
    49f8:	3301      	adds	r3, #1
    49fa:	73bb      	strb	r3, [r7, #14]
    49fc:	7bbb      	ldrb	r3, [r7, #14]
    49fe:	2b07      	cmp	r3, #7
    4a00:	d9eb      	bls.n	49da <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    4a02:	7bfb      	ldrb	r3, [r7, #15]
    4a04:	2bff      	cmp	r3, #255	; 0xff
    4a06:	d102      	bne.n	4a0e <_ext_irq_enable+0x4a>
		return -1;
    4a08:	f04f 33ff 	mov.w	r3, #4294967295
    4a0c:	e01c      	b.n	4a48 <_ext_irq_enable+0x84>
	}

	if (enable) {
    4a0e:	78fb      	ldrb	r3, [r7, #3]
    4a10:	2b00      	cmp	r3, #0
    4a12:	d008      	beq.n	4a26 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    4a14:	7bfb      	ldrb	r3, [r7, #15]
    4a16:	2201      	movs	r2, #1
    4a18:	fa02 f303 	lsl.w	r3, r2, r3
    4a1c:	4619      	mov	r1, r3
    4a1e:	480d      	ldr	r0, [pc, #52]	; (4a54 <_ext_irq_enable+0x90>)
    4a20:	4b0d      	ldr	r3, [pc, #52]	; (4a58 <_ext_irq_enable+0x94>)
    4a22:	4798      	blx	r3
    4a24:	e00f      	b.n	4a46 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    4a26:	7bfb      	ldrb	r3, [r7, #15]
    4a28:	2201      	movs	r2, #1
    4a2a:	fa02 f303 	lsl.w	r3, r2, r3
    4a2e:	4619      	mov	r1, r3
    4a30:	4808      	ldr	r0, [pc, #32]	; (4a54 <_ext_irq_enable+0x90>)
    4a32:	4b0a      	ldr	r3, [pc, #40]	; (4a5c <_ext_irq_enable+0x98>)
    4a34:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    4a36:	7bfb      	ldrb	r3, [r7, #15]
    4a38:	2201      	movs	r2, #1
    4a3a:	fa02 f303 	lsl.w	r3, r2, r3
    4a3e:	4619      	mov	r1, r3
    4a40:	4804      	ldr	r0, [pc, #16]	; (4a54 <_ext_irq_enable+0x90>)
    4a42:	4b07      	ldr	r3, [pc, #28]	; (4a60 <_ext_irq_enable+0x9c>)
    4a44:	4798      	blx	r3
	}

	return ERR_NONE;
    4a46:	2300      	movs	r3, #0
}
    4a48:	4618      	mov	r0, r3
    4a4a:	3710      	adds	r7, #16
    4a4c:	46bd      	mov	sp, r7
    4a4e:	bd80      	pop	{r7, pc}
    4a50:	0000f3e0 	.word	0x0000f3e0
    4a54:	40002800 	.word	0x40002800
    4a58:	0000465d 	.word	0x0000465d
    4a5c:	00004679 	.word	0x00004679
    4a60:	00004641 	.word	0x00004641

00004a64 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4a64:	b580      	push	{r7, lr}
    4a66:	b084      	sub	sp, #16
    4a68:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    4a6a:	4841      	ldr	r0, [pc, #260]	; (4b70 <_ext_irq_handler+0x10c>)
    4a6c:	4b41      	ldr	r3, [pc, #260]	; (4b74 <_ext_irq_handler+0x110>)
    4a6e:	4798      	blx	r3
    4a70:	4603      	mov	r3, r0
    4a72:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4a74:	f04f 33ff 	mov.w	r3, #4294967295
    4a78:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4a7a:	683b      	ldr	r3, [r7, #0]
    4a7c:	4619      	mov	r1, r3
    4a7e:	483c      	ldr	r0, [pc, #240]	; (4b70 <_ext_irq_handler+0x10c>)
    4a80:	4b3d      	ldr	r3, [pc, #244]	; (4b78 <_ext_irq_handler+0x114>)
    4a82:	4798      	blx	r3

	ASSERT(callback);
    4a84:	4b3d      	ldr	r3, [pc, #244]	; (4b7c <_ext_irq_handler+0x118>)
    4a86:	681b      	ldr	r3, [r3, #0]
    4a88:	2b00      	cmp	r3, #0
    4a8a:	bf14      	ite	ne
    4a8c:	2301      	movne	r3, #1
    4a8e:	2300      	moveq	r3, #0
    4a90:	b2db      	uxtb	r3, r3
    4a92:	f44f 7282 	mov.w	r2, #260	; 0x104
    4a96:	493a      	ldr	r1, [pc, #232]	; (4b80 <_ext_irq_handler+0x11c>)
    4a98:	4618      	mov	r0, r3
    4a9a:	4b3a      	ldr	r3, [pc, #232]	; (4b84 <_ext_irq_handler+0x120>)
    4a9c:	4798      	blx	r3

	while (flags) {
    4a9e:	e060      	b.n	4b62 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    4aa0:	683b      	ldr	r3, [r7, #0]
    4aa2:	4618      	mov	r0, r3
    4aa4:	4b38      	ldr	r3, [pc, #224]	; (4b88 <_ext_irq_handler+0x124>)
    4aa6:	4798      	blx	r3
    4aa8:	4603      	mov	r3, r0
    4aaa:	b2db      	uxtb	r3, r3
    4aac:	3b01      	subs	r3, #1
    4aae:	b2db      	uxtb	r3, r3
    4ab0:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4ab2:	e047      	b.n	4b44 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4ab4:	2300      	movs	r3, #0
    4ab6:	71fb      	strb	r3, [r7, #7]
    4ab8:	2308      	movs	r3, #8
    4aba:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    4abc:	e024      	b.n	4b08 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    4abe:	79ba      	ldrb	r2, [r7, #6]
    4ac0:	79fb      	ldrb	r3, [r7, #7]
    4ac2:	4413      	add	r3, r2
    4ac4:	105b      	asrs	r3, r3, #1
    4ac6:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4ac8:	797b      	ldrb	r3, [r7, #5]
    4aca:	4a30      	ldr	r2, [pc, #192]	; (4b8c <_ext_irq_handler+0x128>)
    4acc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4ad0:	461a      	mov	r2, r3
    4ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4ad6:	429a      	cmp	r2, r3
    4ad8:	d106      	bne.n	4ae8 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    4ada:	797b      	ldrb	r3, [r7, #5]
    4adc:	4a2b      	ldr	r2, [pc, #172]	; (4b8c <_ext_irq_handler+0x128>)
    4ade:	00db      	lsls	r3, r3, #3
    4ae0:	4413      	add	r3, r2
    4ae2:	685b      	ldr	r3, [r3, #4]
    4ae4:	60bb      	str	r3, [r7, #8]
					break;
    4ae6:	e013      	b.n	4b10 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    4ae8:	797b      	ldrb	r3, [r7, #5]
    4aea:	4a28      	ldr	r2, [pc, #160]	; (4b8c <_ext_irq_handler+0x128>)
    4aec:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4af0:	461a      	mov	r2, r3
    4af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4af6:	429a      	cmp	r2, r3
    4af8:	da03      	bge.n	4b02 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    4afa:	797b      	ldrb	r3, [r7, #5]
    4afc:	3301      	adds	r3, #1
    4afe:	71fb      	strb	r3, [r7, #7]
    4b00:	e002      	b.n	4b08 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    4b02:	797b      	ldrb	r3, [r7, #5]
    4b04:	3b01      	subs	r3, #1
    4b06:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4b08:	79ba      	ldrb	r2, [r7, #6]
    4b0a:	79fb      	ldrb	r3, [r7, #7]
    4b0c:	429a      	cmp	r2, r3
    4b0e:	d2d6      	bcs.n	4abe <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4b10:	68bb      	ldr	r3, [r7, #8]
    4b12:	f1b3 3fff 	cmp.w	r3, #4294967295
    4b16:	d003      	beq.n	4b20 <_ext_irq_handler+0xbc>
				callback(pin);
    4b18:	4b18      	ldr	r3, [pc, #96]	; (4b7c <_ext_irq_handler+0x118>)
    4b1a:	681b      	ldr	r3, [r3, #0]
    4b1c:	68b8      	ldr	r0, [r7, #8]
    4b1e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4b24:	2201      	movs	r2, #1
    4b26:	fa02 f303 	lsl.w	r3, r2, r3
    4b2a:	43da      	mvns	r2, r3
    4b2c:	683b      	ldr	r3, [r7, #0]
    4b2e:	4013      	ands	r3, r2
    4b30:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    4b32:	683b      	ldr	r3, [r7, #0]
    4b34:	4618      	mov	r0, r3
    4b36:	4b14      	ldr	r3, [pc, #80]	; (4b88 <_ext_irq_handler+0x124>)
    4b38:	4798      	blx	r3
    4b3a:	4603      	mov	r3, r0
    4b3c:	b2db      	uxtb	r3, r3
    4b3e:	3b01      	subs	r3, #1
    4b40:	b2db      	uxtb	r3, r3
    4b42:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4b48:	f1b3 3fff 	cmp.w	r3, #4294967295
    4b4c:	d1b2      	bne.n	4ab4 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4b4e:	4808      	ldr	r0, [pc, #32]	; (4b70 <_ext_irq_handler+0x10c>)
    4b50:	4b08      	ldr	r3, [pc, #32]	; (4b74 <_ext_irq_handler+0x110>)
    4b52:	4798      	blx	r3
    4b54:	4603      	mov	r3, r0
    4b56:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4b58:	683b      	ldr	r3, [r7, #0]
    4b5a:	4619      	mov	r1, r3
    4b5c:	4804      	ldr	r0, [pc, #16]	; (4b70 <_ext_irq_handler+0x10c>)
    4b5e:	4b06      	ldr	r3, [pc, #24]	; (4b78 <_ext_irq_handler+0x114>)
    4b60:	4798      	blx	r3
	while (flags) {
    4b62:	683b      	ldr	r3, [r7, #0]
    4b64:	2b00      	cmp	r3, #0
    4b66:	d19b      	bne.n	4aa0 <_ext_irq_handler+0x3c>
	}
}
    4b68:	bf00      	nop
    4b6a:	3710      	adds	r7, #16
    4b6c:	46bd      	mov	sp, r7
    4b6e:	bd80      	pop	{r7, pc}
    4b70:	40002800 	.word	0x40002800
    4b74:	00004629 	.word	0x00004629
    4b78:	00004641 	.word	0x00004641
    4b7c:	20000980 	.word	0x20000980
    4b80:	0000f420 	.word	0x0000f420
    4b84:	0000389d 	.word	0x0000389d
    4b88:	0000ed0d 	.word	0x0000ed0d
    4b8c:	0000f3e0 	.word	0x0000f3e0

00004b90 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    4b90:	b580      	push	{r7, lr}
    4b92:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4b94:	4b01      	ldr	r3, [pc, #4]	; (4b9c <EIC_0_Handler+0xc>)
    4b96:	4798      	blx	r3
} /**
    4b98:	bf00      	nop
    4b9a:	bd80      	pop	{r7, pc}
    4b9c:	00004a65 	.word	0x00004a65

00004ba0 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    4ba0:	b580      	push	{r7, lr}
    4ba2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4ba4:	4b01      	ldr	r3, [pc, #4]	; (4bac <EIC_3_Handler+0xc>)
    4ba6:	4798      	blx	r3
} /**
    4ba8:	bf00      	nop
    4baa:	bd80      	pop	{r7, pc}
    4bac:	00004a65 	.word	0x00004a65

00004bb0 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    4bb0:	b580      	push	{r7, lr}
    4bb2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4bb4:	4b01      	ldr	r3, [pc, #4]	; (4bbc <EIC_4_Handler+0xc>)
    4bb6:	4798      	blx	r3
} /**
    4bb8:	bf00      	nop
    4bba:	bd80      	pop	{r7, pc}
    4bbc:	00004a65 	.word	0x00004a65

00004bc0 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4bc0:	b580      	push	{r7, lr}
    4bc2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4bc4:	4b01      	ldr	r3, [pc, #4]	; (4bcc <EIC_5_Handler+0xc>)
    4bc6:	4798      	blx	r3
} /**
    4bc8:	bf00      	nop
    4bca:	bd80      	pop	{r7, pc}
    4bcc:	00004a65 	.word	0x00004a65

00004bd0 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4bd0:	b580      	push	{r7, lr}
    4bd2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4bd4:	4b01      	ldr	r3, [pc, #4]	; (4bdc <EIC_6_Handler+0xc>)
    4bd6:	4798      	blx	r3
} /**
    4bd8:	bf00      	nop
    4bda:	bd80      	pop	{r7, pc}
    4bdc:	00004a65 	.word	0x00004a65

00004be0 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4be0:	b580      	push	{r7, lr}
    4be2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4be4:	4b01      	ldr	r3, [pc, #4]	; (4bec <EIC_7_Handler+0xc>)
    4be6:	4798      	blx	r3
} /**
    4be8:	bf00      	nop
    4bea:	bd80      	pop	{r7, pc}
    4bec:	00004a65 	.word	0x00004a65

00004bf0 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    4bf0:	b580      	push	{r7, lr}
    4bf2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4bf4:	4b01      	ldr	r3, [pc, #4]	; (4bfc <EIC_8_Handler+0xc>)
    4bf6:	4798      	blx	r3
} /**
    4bf8:	bf00      	nop
    4bfa:	bd80      	pop	{r7, pc}
    4bfc:	00004a65 	.word	0x00004a65

00004c00 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    4c00:	b580      	push	{r7, lr}
    4c02:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4c04:	4b01      	ldr	r3, [pc, #4]	; (4c0c <EIC_9_Handler+0xc>)
    4c06:	4798      	blx	r3
}
    4c08:	bf00      	nop
    4c0a:	bd80      	pop	{r7, pc}
    4c0c:	00004a65 	.word	0x00004a65

00004c10 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4c10:	b480      	push	{r7}
    4c12:	b085      	sub	sp, #20
    4c14:	af00      	add	r7, sp, #0
    4c16:	60f8      	str	r0, [r7, #12]
    4c18:	460b      	mov	r3, r1
    4c1a:	607a      	str	r2, [r7, #4]
    4c1c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4c1e:	7afa      	ldrb	r2, [r7, #11]
    4c20:	68fb      	ldr	r3, [r7, #12]
    4c22:	3248      	adds	r2, #72	; 0x48
    4c24:	6879      	ldr	r1, [r7, #4]
    4c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4c2a:	bf00      	nop
    4c2c:	3714      	adds	r7, #20
    4c2e:	46bd      	mov	sp, r7
    4c30:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c34:	4770      	bx	lr

00004c36 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    4c36:	b480      	push	{r7}
    4c38:	b083      	sub	sp, #12
    4c3a:	af00      	add	r7, sp, #0
    4c3c:	6078      	str	r0, [r7, #4]
    4c3e:	460b      	mov	r3, r1
    4c40:	70fb      	strb	r3, [r7, #3]
    4c42:	4613      	mov	r3, r2
    4c44:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    4c46:	78fb      	ldrb	r3, [r7, #3]
    4c48:	687a      	ldr	r2, [r7, #4]
    4c4a:	3304      	adds	r3, #4
    4c4c:	00db      	lsls	r3, r3, #3
    4c4e:	4413      	add	r3, r2
    4c50:	78ba      	ldrb	r2, [r7, #2]
    4c52:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4c54:	78fb      	ldrb	r3, [r7, #3]
    4c56:	78ba      	ldrb	r2, [r7, #2]
    4c58:	43d2      	mvns	r2, r2
    4c5a:	b2d1      	uxtb	r1, r2
    4c5c:	687a      	ldr	r2, [r7, #4]
    4c5e:	3304      	adds	r3, #4
    4c60:	00db      	lsls	r3, r3, #3
    4c62:	4413      	add	r3, r2
    4c64:	460a      	mov	r2, r1
    4c66:	711a      	strb	r2, [r3, #4]
}
    4c68:	bf00      	nop
    4c6a:	370c      	adds	r7, #12
    4c6c:	46bd      	mov	sp, r7
    4c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c72:	4770      	bx	lr

00004c74 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4c74:	b480      	push	{r7}
    4c76:	b085      	sub	sp, #20
    4c78:	af00      	add	r7, sp, #0
    4c7a:	60f8      	str	r0, [r7, #12]
    4c7c:	460b      	mov	r3, r1
    4c7e:	607a      	str	r2, [r7, #4]
    4c80:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    4c82:	7afa      	ldrb	r2, [r7, #11]
    4c84:	68fb      	ldr	r3, [r7, #12]
    4c86:	3204      	adds	r2, #4
    4c88:	6879      	ldr	r1, [r7, #4]
    4c8a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4c8e:	bf00      	nop
    4c90:	3714      	adds	r7, #20
    4c92:	46bd      	mov	sp, r7
    4c94:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c98:	4770      	bx	lr
	...

00004c9c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4c9c:	b580      	push	{r7, lr}
    4c9e:	b082      	sub	sp, #8
    4ca0:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    4ca2:	2300      	movs	r3, #0
    4ca4:	71fb      	strb	r3, [r7, #7]
    4ca6:	e00b      	b.n	4cc0 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4ca8:	79fb      	ldrb	r3, [r7, #7]
    4caa:	4a18      	ldr	r2, [pc, #96]	; (4d0c <_event_system_init+0x70>)
    4cac:	5cd3      	ldrb	r3, [r2, r3]
    4cae:	461a      	mov	r2, r3
    4cb0:	79fb      	ldrb	r3, [r7, #7]
    4cb2:	4619      	mov	r1, r3
    4cb4:	4816      	ldr	r0, [pc, #88]	; (4d10 <_event_system_init+0x74>)
    4cb6:	4b17      	ldr	r3, [pc, #92]	; (4d14 <_event_system_init+0x78>)
    4cb8:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4cba:	79fb      	ldrb	r3, [r7, #7]
    4cbc:	3301      	adds	r3, #1
    4cbe:	71fb      	strb	r3, [r7, #7]
    4cc0:	79fb      	ldrb	r3, [r7, #7]
    4cc2:	2b42      	cmp	r3, #66	; 0x42
    4cc4:	d9f0      	bls.n	4ca8 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4cc6:	2300      	movs	r3, #0
    4cc8:	71fb      	strb	r3, [r7, #7]
    4cca:	e016      	b.n	4cfa <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4ccc:	79fb      	ldrb	r3, [r7, #7]
    4cce:	4a12      	ldr	r2, [pc, #72]	; (4d18 <_event_system_init+0x7c>)
    4cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4cd4:	461a      	mov	r2, r3
    4cd6:	79fb      	ldrb	r3, [r7, #7]
    4cd8:	4619      	mov	r1, r3
    4cda:	480d      	ldr	r0, [pc, #52]	; (4d10 <_event_system_init+0x74>)
    4cdc:	4b0f      	ldr	r3, [pc, #60]	; (4d1c <_event_system_init+0x80>)
    4cde:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4ce0:	79fb      	ldrb	r3, [r7, #7]
    4ce2:	4a0f      	ldr	r2, [pc, #60]	; (4d20 <_event_system_init+0x84>)
    4ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4ce8:	b2da      	uxtb	r2, r3
    4cea:	79fb      	ldrb	r3, [r7, #7]
    4cec:	4619      	mov	r1, r3
    4cee:	4808      	ldr	r0, [pc, #32]	; (4d10 <_event_system_init+0x74>)
    4cf0:	4b0c      	ldr	r3, [pc, #48]	; (4d24 <_event_system_init+0x88>)
    4cf2:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4cf4:	79fb      	ldrb	r3, [r7, #7]
    4cf6:	3301      	adds	r3, #1
    4cf8:	71fb      	strb	r3, [r7, #7]
    4cfa:	79fb      	ldrb	r3, [r7, #7]
    4cfc:	2b1f      	cmp	r3, #31
    4cfe:	d9e5      	bls.n	4ccc <_event_system_init+0x30>
	}

	return ERR_NONE;
    4d00:	2300      	movs	r3, #0
}
    4d02:	4618      	mov	r0, r3
    4d04:	3708      	adds	r7, #8
    4d06:	46bd      	mov	sp, r7
    4d08:	bd80      	pop	{r7, pc}
    4d0a:	bf00      	nop
    4d0c:	0000f438 	.word	0x0000f438
    4d10:	4100e000 	.word	0x4100e000
    4d14:	00004c11 	.word	0x00004c11
    4d18:	0000f47c 	.word	0x0000f47c
    4d1c:	00004c75 	.word	0x00004c75
    4d20:	0000f4bc 	.word	0x0000f4bc
    4d24:	00004c37 	.word	0x00004c37

00004d28 <hri_gclk_wait_for_sync>:
{
    4d28:	b480      	push	{r7}
    4d2a:	b083      	sub	sp, #12
    4d2c:	af00      	add	r7, sp, #0
    4d2e:	6078      	str	r0, [r7, #4]
    4d30:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4d32:	bf00      	nop
    4d34:	687b      	ldr	r3, [r7, #4]
    4d36:	685a      	ldr	r2, [r3, #4]
    4d38:	683b      	ldr	r3, [r7, #0]
    4d3a:	4013      	ands	r3, r2
    4d3c:	2b00      	cmp	r3, #0
    4d3e:	d1f9      	bne.n	4d34 <hri_gclk_wait_for_sync+0xc>
}
    4d40:	bf00      	nop
    4d42:	370c      	adds	r7, #12
    4d44:	46bd      	mov	sp, r7
    4d46:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d4a:	4770      	bx	lr

00004d4c <hri_gclk_write_GENCTRL_reg>:
{
    4d4c:	b580      	push	{r7, lr}
    4d4e:	b084      	sub	sp, #16
    4d50:	af00      	add	r7, sp, #0
    4d52:	60f8      	str	r0, [r7, #12]
    4d54:	460b      	mov	r3, r1
    4d56:	607a      	str	r2, [r7, #4]
    4d58:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4d5a:	7afa      	ldrb	r2, [r7, #11]
    4d5c:	68fb      	ldr	r3, [r7, #12]
    4d5e:	3208      	adds	r2, #8
    4d60:	6879      	ldr	r1, [r7, #4]
    4d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4d66:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4d6a:	68f8      	ldr	r0, [r7, #12]
    4d6c:	4b02      	ldr	r3, [pc, #8]	; (4d78 <hri_gclk_write_GENCTRL_reg+0x2c>)
    4d6e:	4798      	blx	r3
}
    4d70:	bf00      	nop
    4d72:	3710      	adds	r7, #16
    4d74:	46bd      	mov	sp, r7
    4d76:	bd80      	pop	{r7, pc}
    4d78:	00004d29 	.word	0x00004d29

00004d7c <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    4d7c:	b580      	push	{r7, lr}
    4d7e:	b082      	sub	sp, #8
    4d80:	af00      	add	r7, sp, #0
    4d82:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    4d84:	687b      	ldr	r3, [r7, #4]
    4d86:	f003 0301 	and.w	r3, r3, #1
    4d8a:	2b00      	cmp	r3, #0
    4d8c:	d004      	beq.n	4d98 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    4d8e:	4a36      	ldr	r2, [pc, #216]	; (4e68 <_gclk_init_generators_by_fref+0xec>)
    4d90:	2100      	movs	r1, #0
    4d92:	4836      	ldr	r0, [pc, #216]	; (4e6c <_gclk_init_generators_by_fref+0xf0>)
    4d94:	4b36      	ldr	r3, [pc, #216]	; (4e70 <_gclk_init_generators_by_fref+0xf4>)
    4d96:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4d98:	687b      	ldr	r3, [r7, #4]
    4d9a:	f003 0302 	and.w	r3, r3, #2
    4d9e:	2b00      	cmp	r3, #0
    4da0:	d004      	beq.n	4dac <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    4da2:	4a34      	ldr	r2, [pc, #208]	; (4e74 <_gclk_init_generators_by_fref+0xf8>)
    4da4:	2101      	movs	r1, #1
    4da6:	4831      	ldr	r0, [pc, #196]	; (4e6c <_gclk_init_generators_by_fref+0xf0>)
    4da8:	4b31      	ldr	r3, [pc, #196]	; (4e70 <_gclk_init_generators_by_fref+0xf4>)
    4daa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4dac:	687b      	ldr	r3, [r7, #4]
    4dae:	f003 0304 	and.w	r3, r3, #4
    4db2:	2b00      	cmp	r3, #0
    4db4:	d004      	beq.n	4dc0 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    4db6:	4a30      	ldr	r2, [pc, #192]	; (4e78 <_gclk_init_generators_by_fref+0xfc>)
    4db8:	2102      	movs	r1, #2
    4dba:	482c      	ldr	r0, [pc, #176]	; (4e6c <_gclk_init_generators_by_fref+0xf0>)
    4dbc:	4b2c      	ldr	r3, [pc, #176]	; (4e70 <_gclk_init_generators_by_fref+0xf4>)
    4dbe:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4dc0:	687b      	ldr	r3, [r7, #4]
    4dc2:	f003 0308 	and.w	r3, r3, #8
    4dc6:	2b00      	cmp	r3, #0
    4dc8:	d004      	beq.n	4dd4 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    4dca:	4a2c      	ldr	r2, [pc, #176]	; (4e7c <_gclk_init_generators_by_fref+0x100>)
    4dcc:	2103      	movs	r1, #3
    4dce:	4827      	ldr	r0, [pc, #156]	; (4e6c <_gclk_init_generators_by_fref+0xf0>)
    4dd0:	4b27      	ldr	r3, [pc, #156]	; (4e70 <_gclk_init_generators_by_fref+0xf4>)
    4dd2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4dd4:	687b      	ldr	r3, [r7, #4]
    4dd6:	f003 0310 	and.w	r3, r3, #16
    4dda:	2b00      	cmp	r3, #0
    4ddc:	d004      	beq.n	4de8 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4dde:	4a28      	ldr	r2, [pc, #160]	; (4e80 <_gclk_init_generators_by_fref+0x104>)
    4de0:	2104      	movs	r1, #4
    4de2:	4822      	ldr	r0, [pc, #136]	; (4e6c <_gclk_init_generators_by_fref+0xf0>)
    4de4:	4b22      	ldr	r3, [pc, #136]	; (4e70 <_gclk_init_generators_by_fref+0xf4>)
    4de6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4de8:	687b      	ldr	r3, [r7, #4]
    4dea:	f003 0320 	and.w	r3, r3, #32
    4dee:	2b00      	cmp	r3, #0
    4df0:	d004      	beq.n	4dfc <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    4df2:	4a24      	ldr	r2, [pc, #144]	; (4e84 <_gclk_init_generators_by_fref+0x108>)
    4df4:	2105      	movs	r1, #5
    4df6:	481d      	ldr	r0, [pc, #116]	; (4e6c <_gclk_init_generators_by_fref+0xf0>)
    4df8:	4b1d      	ldr	r3, [pc, #116]	; (4e70 <_gclk_init_generators_by_fref+0xf4>)
    4dfa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    4dfc:	687b      	ldr	r3, [r7, #4]
    4dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4e02:	2b00      	cmp	r3, #0
    4e04:	d004      	beq.n	4e10 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    4e06:	4a20      	ldr	r2, [pc, #128]	; (4e88 <_gclk_init_generators_by_fref+0x10c>)
    4e08:	2106      	movs	r1, #6
    4e0a:	4818      	ldr	r0, [pc, #96]	; (4e6c <_gclk_init_generators_by_fref+0xf0>)
    4e0c:	4b18      	ldr	r3, [pc, #96]	; (4e70 <_gclk_init_generators_by_fref+0xf4>)
    4e0e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    4e10:	687b      	ldr	r3, [r7, #4]
    4e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4e16:	2b00      	cmp	r3, #0
    4e18:	d004      	beq.n	4e24 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    4e1a:	4a1c      	ldr	r2, [pc, #112]	; (4e8c <_gclk_init_generators_by_fref+0x110>)
    4e1c:	2107      	movs	r1, #7
    4e1e:	4813      	ldr	r0, [pc, #76]	; (4e6c <_gclk_init_generators_by_fref+0xf0>)
    4e20:	4b13      	ldr	r3, [pc, #76]	; (4e70 <_gclk_init_generators_by_fref+0xf4>)
    4e22:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    4e24:	687b      	ldr	r3, [r7, #4]
    4e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4e2a:	2b00      	cmp	r3, #0
    4e2c:	d004      	beq.n	4e38 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    4e2e:	4a18      	ldr	r2, [pc, #96]	; (4e90 <_gclk_init_generators_by_fref+0x114>)
    4e30:	2108      	movs	r1, #8
    4e32:	480e      	ldr	r0, [pc, #56]	; (4e6c <_gclk_init_generators_by_fref+0xf0>)
    4e34:	4b0e      	ldr	r3, [pc, #56]	; (4e70 <_gclk_init_generators_by_fref+0xf4>)
    4e36:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4e38:	687b      	ldr	r3, [r7, #4]
    4e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4e3e:	2b00      	cmp	r3, #0
    4e40:	d004      	beq.n	4e4c <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    4e42:	4a14      	ldr	r2, [pc, #80]	; (4e94 <_gclk_init_generators_by_fref+0x118>)
    4e44:	210a      	movs	r1, #10
    4e46:	4809      	ldr	r0, [pc, #36]	; (4e6c <_gclk_init_generators_by_fref+0xf0>)
    4e48:	4b09      	ldr	r3, [pc, #36]	; (4e70 <_gclk_init_generators_by_fref+0xf4>)
    4e4a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4e4c:	687b      	ldr	r3, [r7, #4]
    4e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    4e52:	2b00      	cmp	r3, #0
    4e54:	d004      	beq.n	4e60 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    4e56:	4a10      	ldr	r2, [pc, #64]	; (4e98 <_gclk_init_generators_by_fref+0x11c>)
    4e58:	210b      	movs	r1, #11
    4e5a:	4804      	ldr	r0, [pc, #16]	; (4e6c <_gclk_init_generators_by_fref+0xf0>)
    4e5c:	4b04      	ldr	r3, [pc, #16]	; (4e70 <_gclk_init_generators_by_fref+0xf4>)
    4e5e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4e60:	bf00      	nop
    4e62:	3708      	adds	r7, #8
    4e64:	46bd      	mov	sp, r7
    4e66:	bd80      	pop	{r7, pc}
    4e68:	00010107 	.word	0x00010107
    4e6c:	40001c00 	.word	0x40001c00
    4e70:	00004d4d 	.word	0x00004d4d
    4e74:	00010907 	.word	0x00010907
    4e78:	00010906 	.word	0x00010906
    4e7c:	00020908 	.word	0x00020908
    4e80:	00010901 	.word	0x00010901
    4e84:	00062901 	.word	0x00062901
    4e88:	000c2901 	.word	0x000c2901
    4e8c:	00082908 	.word	0x00082908
    4e90:	00032901 	.word	0x00032901
    4e94:	00010905 	.word	0x00010905
    4e98:	00041905 	.word	0x00041905

00004e9c <hri_mclk_write_CPUDIV_reg>:
{
    4e9c:	b480      	push	{r7}
    4e9e:	b083      	sub	sp, #12
    4ea0:	af00      	add	r7, sp, #0
    4ea2:	6078      	str	r0, [r7, #4]
    4ea4:	460b      	mov	r3, r1
    4ea6:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    4ea8:	687b      	ldr	r3, [r7, #4]
    4eaa:	78fa      	ldrb	r2, [r7, #3]
    4eac:	715a      	strb	r2, [r3, #5]
}
    4eae:	bf00      	nop
    4eb0:	370c      	adds	r7, #12
    4eb2:	46bd      	mov	sp, r7
    4eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4eb8:	4770      	bx	lr
	...

00004ebc <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    4ebc:	b580      	push	{r7, lr}
    4ebe:	b082      	sub	sp, #8
    4ec0:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    4ec2:	4b05      	ldr	r3, [pc, #20]	; (4ed8 <_mclk_init+0x1c>)
    4ec4:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    4ec6:	2101      	movs	r1, #1
    4ec8:	6878      	ldr	r0, [r7, #4]
    4eca:	4b04      	ldr	r3, [pc, #16]	; (4edc <_mclk_init+0x20>)
    4ecc:	4798      	blx	r3
}
    4ece:	bf00      	nop
    4ed0:	3708      	adds	r7, #8
    4ed2:	46bd      	mov	sp, r7
    4ed4:	bd80      	pop	{r7, pc}
    4ed6:	bf00      	nop
    4ed8:	40000800 	.word	0x40000800
    4edc:	00004e9d 	.word	0x00004e9d

00004ee0 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4ee0:	b480      	push	{r7}
    4ee2:	b083      	sub	sp, #12
    4ee4:	af00      	add	r7, sp, #0
    4ee6:	6078      	str	r0, [r7, #4]
    4ee8:	460b      	mov	r3, r1
    4eea:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4eec:	687b      	ldr	r3, [r7, #4]
    4eee:	78fa      	ldrb	r2, [r7, #3]
    4ef0:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4ef2:	bf00      	nop
    4ef4:	370c      	adds	r7, #12
    4ef6:	46bd      	mov	sp, r7
    4ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4efc:	4770      	bx	lr

00004efe <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4efe:	b480      	push	{r7}
    4f00:	b083      	sub	sp, #12
    4f02:	af00      	add	r7, sp, #0
    4f04:	6078      	str	r0, [r7, #4]
    4f06:	460b      	mov	r3, r1
    4f08:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4f0a:	687b      	ldr	r3, [r7, #4]
    4f0c:	887a      	ldrh	r2, [r7, #2]
    4f0e:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4f10:	bf00      	nop
    4f12:	370c      	adds	r7, #12
    4f14:	46bd      	mov	sp, r7
    4f16:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f1a:	4770      	bx	lr

00004f1c <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4f1c:	b480      	push	{r7}
    4f1e:	b083      	sub	sp, #12
    4f20:	af00      	add	r7, sp, #0
    4f22:	6078      	str	r0, [r7, #4]
    4f24:	460b      	mov	r3, r1
    4f26:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4f28:	687b      	ldr	r3, [r7, #4]
    4f2a:	78fa      	ldrb	r2, [r7, #3]
    4f2c:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4f2e:	bf00      	nop
    4f30:	370c      	adds	r7, #12
    4f32:	46bd      	mov	sp, r7
    4f34:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f38:	4770      	bx	lr

00004f3a <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4f3a:	b480      	push	{r7}
    4f3c:	b083      	sub	sp, #12
    4f3e:	af00      	add	r7, sp, #0
    4f40:	6078      	str	r0, [r7, #4]
    4f42:	460b      	mov	r3, r1
    4f44:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    4f46:	687b      	ldr	r3, [r7, #4]
    4f48:	78fa      	ldrb	r2, [r7, #3]
    4f4a:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4f4c:	bf00      	nop
    4f4e:	370c      	adds	r7, #12
    4f50:	46bd      	mov	sp, r7
    4f52:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f56:	4770      	bx	lr

00004f58 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    4f58:	b480      	push	{r7}
    4f5a:	b085      	sub	sp, #20
    4f5c:	af00      	add	r7, sp, #0
    4f5e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4f60:	687b      	ldr	r3, [r7, #4]
    4f62:	69db      	ldr	r3, [r3, #28]
    4f64:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    4f66:	68fb      	ldr	r3, [r7, #12]
    4f68:	0a1b      	lsrs	r3, r3, #8
    4f6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4f6e:	60fb      	str	r3, [r7, #12]
	return tmp;
    4f70:	68fb      	ldr	r3, [r7, #12]
}
    4f72:	4618      	mov	r0, r3
    4f74:	3714      	adds	r7, #20
    4f76:	46bd      	mov	sp, r7
    4f78:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f7c:	4770      	bx	lr

00004f7e <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    4f7e:	b480      	push	{r7}
    4f80:	b083      	sub	sp, #12
    4f82:	af00      	add	r7, sp, #0
    4f84:	6078      	str	r0, [r7, #4]
    4f86:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    4f88:	687b      	ldr	r3, [r7, #4]
    4f8a:	683a      	ldr	r2, [r7, #0]
    4f8c:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4f8e:	bf00      	nop
    4f90:	370c      	adds	r7, #12
    4f92:	46bd      	mov	sp, r7
    4f94:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f98:	4770      	bx	lr
	...

00004f9c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    4f9c:	b580      	push	{r7, lr}
    4f9e:	b082      	sub	sp, #8
    4fa0:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    4fa2:	4b13      	ldr	r3, [pc, #76]	; (4ff0 <_osc32kctrl_init_sources+0x54>)
    4fa4:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    4fa6:	2300      	movs	r3, #0
    4fa8:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    4faa:	f242 018e 	movw	r1, #8334	; 0x208e
    4fae:	6878      	ldr	r0, [r7, #4]
    4fb0:	4b10      	ldr	r3, [pc, #64]	; (4ff4 <_osc32kctrl_init_sources+0x58>)
    4fb2:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    4fb4:	2100      	movs	r1, #0
    4fb6:	6878      	ldr	r0, [r7, #4]
    4fb8:	4b0f      	ldr	r3, [pc, #60]	; (4ff8 <_osc32kctrl_init_sources+0x5c>)
    4fba:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    4fbc:	2100      	movs	r1, #0
    4fbe:	6878      	ldr	r0, [r7, #4]
    4fc0:	4b0e      	ldr	r3, [pc, #56]	; (4ffc <_osc32kctrl_init_sources+0x60>)
    4fc2:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    4fc4:	6878      	ldr	r0, [r7, #4]
    4fc6:	4b0e      	ldr	r3, [pc, #56]	; (5000 <_osc32kctrl_init_sources+0x64>)
    4fc8:	4798      	blx	r3
    4fca:	4603      	mov	r3, r0
    4fcc:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    4fce:	887b      	ldrh	r3, [r7, #2]
    4fd0:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    4fd2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    4fd6:	4619      	mov	r1, r3
    4fd8:	6878      	ldr	r0, [r7, #4]
    4fda:	4b0a      	ldr	r3, [pc, #40]	; (5004 <_osc32kctrl_init_sources+0x68>)
    4fdc:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4fde:	2100      	movs	r1, #0
    4fe0:	6878      	ldr	r0, [r7, #4]
    4fe2:	4b09      	ldr	r3, [pc, #36]	; (5008 <_osc32kctrl_init_sources+0x6c>)
    4fe4:	4798      	blx	r3
	(void)calib;
}
    4fe6:	bf00      	nop
    4fe8:	3708      	adds	r7, #8
    4fea:	46bd      	mov	sp, r7
    4fec:	bd80      	pop	{r7, pc}
    4fee:	bf00      	nop
    4ff0:	40001400 	.word	0x40001400
    4ff4:	00004eff 	.word	0x00004eff
    4ff8:	00004f1d 	.word	0x00004f1d
    4ffc:	00004f3b 	.word	0x00004f3b
    5000:	00004f59 	.word	0x00004f59
    5004:	00004f7f 	.word	0x00004f7f
    5008:	00004ee1 	.word	0x00004ee1

0000500c <hri_gclk_wait_for_sync>:
{
    500c:	b480      	push	{r7}
    500e:	b083      	sub	sp, #12
    5010:	af00      	add	r7, sp, #0
    5012:	6078      	str	r0, [r7, #4]
    5014:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5016:	bf00      	nop
    5018:	687b      	ldr	r3, [r7, #4]
    501a:	685a      	ldr	r2, [r3, #4]
    501c:	683b      	ldr	r3, [r7, #0]
    501e:	4013      	ands	r3, r2
    5020:	2b00      	cmp	r3, #0
    5022:	d1f9      	bne.n	5018 <hri_gclk_wait_for_sync+0xc>
}
    5024:	bf00      	nop
    5026:	370c      	adds	r7, #12
    5028:	46bd      	mov	sp, r7
    502a:	f85d 7b04 	ldr.w	r7, [sp], #4
    502e:	4770      	bx	lr

00005030 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    5030:	b480      	push	{r7}
    5032:	b083      	sub	sp, #12
    5034:	af00      	add	r7, sp, #0
    5036:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    5038:	687b      	ldr	r3, [r7, #4]
    503a:	685b      	ldr	r3, [r3, #4]
    503c:	089b      	lsrs	r3, r3, #2
    503e:	f003 0301 	and.w	r3, r3, #1
    5042:	2b00      	cmp	r3, #0
    5044:	bf14      	ite	ne
    5046:	2301      	movne	r3, #1
    5048:	2300      	moveq	r3, #0
    504a:	b2db      	uxtb	r3, r3
}
    504c:	4618      	mov	r0, r3
    504e:	370c      	adds	r7, #12
    5050:	46bd      	mov	sp, r7
    5052:	f85d 7b04 	ldr.w	r7, [sp], #4
    5056:	4770      	bx	lr

00005058 <hri_gclk_read_SYNCBUSY_reg>:
{
    5058:	b480      	push	{r7}
    505a:	b083      	sub	sp, #12
    505c:	af00      	add	r7, sp, #0
    505e:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    5060:	687b      	ldr	r3, [r7, #4]
    5062:	685b      	ldr	r3, [r3, #4]
}
    5064:	4618      	mov	r0, r3
    5066:	370c      	adds	r7, #12
    5068:	46bd      	mov	sp, r7
    506a:	f85d 7b04 	ldr.w	r7, [sp], #4
    506e:	4770      	bx	lr

00005070 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    5070:	b580      	push	{r7, lr}
    5072:	b086      	sub	sp, #24
    5074:	af00      	add	r7, sp, #0
    5076:	60f8      	str	r0, [r7, #12]
    5078:	460b      	mov	r3, r1
    507a:	607a      	str	r2, [r7, #4]
    507c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    507e:	7afa      	ldrb	r2, [r7, #11]
    5080:	68fb      	ldr	r3, [r7, #12]
    5082:	3208      	adds	r2, #8
    5084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5088:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    508a:	697b      	ldr	r3, [r7, #20]
    508c:	f023 030f 	bic.w	r3, r3, #15
    5090:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    5092:	687b      	ldr	r3, [r7, #4]
    5094:	f003 030f 	and.w	r3, r3, #15
    5098:	697a      	ldr	r2, [r7, #20]
    509a:	4313      	orrs	r3, r2
    509c:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    509e:	7afa      	ldrb	r2, [r7, #11]
    50a0:	68fb      	ldr	r3, [r7, #12]
    50a2:	3208      	adds	r2, #8
    50a4:	6979      	ldr	r1, [r7, #20]
    50a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    50aa:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    50ae:	68f8      	ldr	r0, [r7, #12]
    50b0:	4b02      	ldr	r3, [pc, #8]	; (50bc <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    50b2:	4798      	blx	r3
}
    50b4:	bf00      	nop
    50b6:	3718      	adds	r7, #24
    50b8:	46bd      	mov	sp, r7
    50ba:	bd80      	pop	{r7, pc}
    50bc:	0000500d 	.word	0x0000500d

000050c0 <hri_gclk_write_PCHCTRL_reg>:
{
    50c0:	b480      	push	{r7}
    50c2:	b085      	sub	sp, #20
    50c4:	af00      	add	r7, sp, #0
    50c6:	60f8      	str	r0, [r7, #12]
    50c8:	460b      	mov	r3, r1
    50ca:	607a      	str	r2, [r7, #4]
    50cc:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    50ce:	7afa      	ldrb	r2, [r7, #11]
    50d0:	68fb      	ldr	r3, [r7, #12]
    50d2:	3220      	adds	r2, #32
    50d4:	6879      	ldr	r1, [r7, #4]
    50d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    50da:	bf00      	nop
    50dc:	3714      	adds	r7, #20
    50de:	46bd      	mov	sp, r7
    50e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    50e4:	4770      	bx	lr

000050e6 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    50e6:	b480      	push	{r7}
    50e8:	b085      	sub	sp, #20
    50ea:	af00      	add	r7, sp, #0
    50ec:	60f8      	str	r0, [r7, #12]
    50ee:	460b      	mov	r3, r1
    50f0:	607a      	str	r2, [r7, #4]
    50f2:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    50f4:	bf00      	nop
    50f6:	7afa      	ldrb	r2, [r7, #11]
    50f8:	68f9      	ldr	r1, [r7, #12]
    50fa:	4613      	mov	r3, r2
    50fc:	009b      	lsls	r3, r3, #2
    50fe:	4413      	add	r3, r2
    5100:	009b      	lsls	r3, r3, #2
    5102:	440b      	add	r3, r1
    5104:	333c      	adds	r3, #60	; 0x3c
    5106:	681a      	ldr	r2, [r3, #0]
    5108:	687b      	ldr	r3, [r7, #4]
    510a:	4013      	ands	r3, r2
    510c:	2b00      	cmp	r3, #0
    510e:	d1f2      	bne.n	50f6 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    5110:	bf00      	nop
    5112:	3714      	adds	r7, #20
    5114:	46bd      	mov	sp, r7
    5116:	f85d 7b04 	ldr.w	r7, [sp], #4
    511a:	4770      	bx	lr

0000511c <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    511c:	b480      	push	{r7}
    511e:	b083      	sub	sp, #12
    5120:	af00      	add	r7, sp, #0
    5122:	6078      	str	r0, [r7, #4]
    5124:	460b      	mov	r3, r1
    5126:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    5128:	78fa      	ldrb	r2, [r7, #3]
    512a:	6879      	ldr	r1, [r7, #4]
    512c:	4613      	mov	r3, r2
    512e:	009b      	lsls	r3, r3, #2
    5130:	4413      	add	r3, r2
    5132:	009b      	lsls	r3, r3, #2
    5134:	440b      	add	r3, r1
    5136:	3340      	adds	r3, #64	; 0x40
    5138:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    513a:	f003 0301 	and.w	r3, r3, #1
    513e:	2b00      	cmp	r3, #0
    5140:	bf14      	ite	ne
    5142:	2301      	movne	r3, #1
    5144:	2300      	moveq	r3, #0
    5146:	b2db      	uxtb	r3, r3
}
    5148:	4618      	mov	r0, r3
    514a:	370c      	adds	r7, #12
    514c:	46bd      	mov	sp, r7
    514e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5152:	4770      	bx	lr

00005154 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    5154:	b480      	push	{r7}
    5156:	b083      	sub	sp, #12
    5158:	af00      	add	r7, sp, #0
    515a:	6078      	str	r0, [r7, #4]
    515c:	460b      	mov	r3, r1
    515e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5160:	78fa      	ldrb	r2, [r7, #3]
    5162:	6879      	ldr	r1, [r7, #4]
    5164:	4613      	mov	r3, r2
    5166:	009b      	lsls	r3, r3, #2
    5168:	4413      	add	r3, r2
    516a:	009b      	lsls	r3, r3, #2
    516c:	440b      	add	r3, r1
    516e:	3340      	adds	r3, #64	; 0x40
    5170:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    5172:	085b      	lsrs	r3, r3, #1
    5174:	f003 0301 	and.w	r3, r3, #1
    5178:	2b00      	cmp	r3, #0
    517a:	bf14      	ite	ne
    517c:	2301      	movne	r3, #1
    517e:	2300      	moveq	r3, #0
    5180:	b2db      	uxtb	r3, r3
}
    5182:	4618      	mov	r0, r3
    5184:	370c      	adds	r7, #12
    5186:	46bd      	mov	sp, r7
    5188:	f85d 7b04 	ldr.w	r7, [sp], #4
    518c:	4770      	bx	lr
	...

00005190 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    5190:	b580      	push	{r7, lr}
    5192:	b082      	sub	sp, #8
    5194:	af00      	add	r7, sp, #0
    5196:	6078      	str	r0, [r7, #4]
    5198:	460b      	mov	r3, r1
    519a:	70fb      	strb	r3, [r7, #3]
    519c:	4613      	mov	r3, r2
    519e:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    51a0:	78fa      	ldrb	r2, [r7, #3]
    51a2:	6879      	ldr	r1, [r7, #4]
    51a4:	4613      	mov	r3, r2
    51a6:	009b      	lsls	r3, r3, #2
    51a8:	4413      	add	r3, r2
    51aa:	009b      	lsls	r3, r3, #2
    51ac:	440b      	add	r3, r1
    51ae:	3330      	adds	r3, #48	; 0x30
    51b0:	78ba      	ldrb	r2, [r7, #2]
    51b2:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    51b4:	78fb      	ldrb	r3, [r7, #3]
    51b6:	2202      	movs	r2, #2
    51b8:	4619      	mov	r1, r3
    51ba:	6878      	ldr	r0, [r7, #4]
    51bc:	4b02      	ldr	r3, [pc, #8]	; (51c8 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    51be:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    51c0:	bf00      	nop
    51c2:	3708      	adds	r7, #8
    51c4:	46bd      	mov	sp, r7
    51c6:	bd80      	pop	{r7, pc}
    51c8:	000050e7 	.word	0x000050e7

000051cc <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    51cc:	b580      	push	{r7, lr}
    51ce:	b084      	sub	sp, #16
    51d0:	af00      	add	r7, sp, #0
    51d2:	60f8      	str	r0, [r7, #12]
    51d4:	460b      	mov	r3, r1
    51d6:	607a      	str	r2, [r7, #4]
    51d8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    51da:	7afa      	ldrb	r2, [r7, #11]
    51dc:	68f9      	ldr	r1, [r7, #12]
    51de:	4613      	mov	r3, r2
    51e0:	009b      	lsls	r3, r3, #2
    51e2:	4413      	add	r3, r2
    51e4:	009b      	lsls	r3, r3, #2
    51e6:	440b      	add	r3, r1
    51e8:	3334      	adds	r3, #52	; 0x34
    51ea:	687a      	ldr	r2, [r7, #4]
    51ec:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    51ee:	7afb      	ldrb	r3, [r7, #11]
    51f0:	2206      	movs	r2, #6
    51f2:	4619      	mov	r1, r3
    51f4:	68f8      	ldr	r0, [r7, #12]
    51f6:	4b03      	ldr	r3, [pc, #12]	; (5204 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    51f8:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    51fa:	bf00      	nop
    51fc:	3710      	adds	r7, #16
    51fe:	46bd      	mov	sp, r7
    5200:	bd80      	pop	{r7, pc}
    5202:	bf00      	nop
    5204:	000050e7 	.word	0x000050e7

00005208 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    5208:	b480      	push	{r7}
    520a:	b085      	sub	sp, #20
    520c:	af00      	add	r7, sp, #0
    520e:	60f8      	str	r0, [r7, #12]
    5210:	460b      	mov	r3, r1
    5212:	607a      	str	r2, [r7, #4]
    5214:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    5216:	7afa      	ldrb	r2, [r7, #11]
    5218:	68f9      	ldr	r1, [r7, #12]
    521a:	4613      	mov	r3, r2
    521c:	009b      	lsls	r3, r3, #2
    521e:	4413      	add	r3, r2
    5220:	009b      	lsls	r3, r3, #2
    5222:	440b      	add	r3, r1
    5224:	3338      	adds	r3, #56	; 0x38
    5226:	687a      	ldr	r2, [r7, #4]
    5228:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    522a:	bf00      	nop
    522c:	3714      	adds	r7, #20
    522e:	46bd      	mov	sp, r7
    5230:	f85d 7b04 	ldr.w	r7, [sp], #4
    5234:	4770      	bx	lr

00005236 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    5236:	b480      	push	{r7}
    5238:	b083      	sub	sp, #12
    523a:	af00      	add	r7, sp, #0
    523c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    523e:	687b      	ldr	r3, [r7, #4]
    5240:	691b      	ldr	r3, [r3, #16]
    5242:	085b      	lsrs	r3, r3, #1
    5244:	f003 0301 	and.w	r3, r3, #1
    5248:	2b00      	cmp	r3, #0
    524a:	bf14      	ite	ne
    524c:	2301      	movne	r3, #1
    524e:	2300      	moveq	r3, #0
    5250:	b2db      	uxtb	r3, r3
}
    5252:	4618      	mov	r0, r3
    5254:	370c      	adds	r7, #12
    5256:	46bd      	mov	sp, r7
    5258:	f85d 7b04 	ldr.w	r7, [sp], #4
    525c:	4770      	bx	lr

0000525e <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    525e:	b480      	push	{r7}
    5260:	b083      	sub	sp, #12
    5262:	af00      	add	r7, sp, #0
    5264:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    5266:	687b      	ldr	r3, [r7, #4]
    5268:	691b      	ldr	r3, [r3, #16]
    526a:	0a1b      	lsrs	r3, r3, #8
    526c:	f003 0301 	and.w	r3, r3, #1
    5270:	2b00      	cmp	r3, #0
    5272:	bf14      	ite	ne
    5274:	2301      	movne	r3, #1
    5276:	2300      	moveq	r3, #0
    5278:	b2db      	uxtb	r3, r3
}
    527a:	4618      	mov	r0, r3
    527c:	370c      	adds	r7, #12
    527e:	46bd      	mov	sp, r7
    5280:	f85d 7b04 	ldr.w	r7, [sp], #4
    5284:	4770      	bx	lr

00005286 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    5286:	b480      	push	{r7}
    5288:	b085      	sub	sp, #20
    528a:	af00      	add	r7, sp, #0
    528c:	6078      	str	r0, [r7, #4]
    528e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5290:	687b      	ldr	r3, [r7, #4]
    5292:	691b      	ldr	r3, [r3, #16]
    5294:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5296:	68fa      	ldr	r2, [r7, #12]
    5298:	683b      	ldr	r3, [r7, #0]
    529a:	4013      	ands	r3, r2
    529c:	60fb      	str	r3, [r7, #12]
	return tmp;
    529e:	68fb      	ldr	r3, [r7, #12]
}
    52a0:	4618      	mov	r0, r3
    52a2:	3714      	adds	r7, #20
    52a4:	46bd      	mov	sp, r7
    52a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    52aa:	4770      	bx	lr

000052ac <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    52ac:	b480      	push	{r7}
    52ae:	b085      	sub	sp, #20
    52b0:	af00      	add	r7, sp, #0
    52b2:	60f8      	str	r0, [r7, #12]
    52b4:	460b      	mov	r3, r1
    52b6:	607a      	str	r2, [r7, #4]
    52b8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    52ba:	7afb      	ldrb	r3, [r7, #11]
    52bc:	68fa      	ldr	r2, [r7, #12]
    52be:	3304      	adds	r3, #4
    52c0:	009b      	lsls	r3, r3, #2
    52c2:	4413      	add	r3, r2
    52c4:	687a      	ldr	r2, [r7, #4]
    52c6:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    52c8:	bf00      	nop
    52ca:	3714      	adds	r7, #20
    52cc:	46bd      	mov	sp, r7
    52ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    52d2:	4770      	bx	lr

000052d4 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    52d4:	b480      	push	{r7}
    52d6:	b083      	sub	sp, #12
    52d8:	af00      	add	r7, sp, #0
    52da:	6078      	str	r0, [r7, #4]
    52dc:	460b      	mov	r3, r1
    52de:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    52e0:	687b      	ldr	r3, [r7, #4]
    52e2:	78fa      	ldrb	r2, [r7, #3]
    52e4:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    52e6:	bf00      	nop
    52e8:	370c      	adds	r7, #12
    52ea:	46bd      	mov	sp, r7
    52ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    52f0:	4770      	bx	lr

000052f2 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    52f2:	b480      	push	{r7}
    52f4:	b085      	sub	sp, #20
    52f6:	af00      	add	r7, sp, #0
    52f8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    52fa:	687b      	ldr	r3, [r7, #4]
    52fc:	f893 3020 	ldrb.w	r3, [r3, #32]
    5300:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    5302:	7bfb      	ldrb	r3, [r7, #15]
    5304:	f003 0301 	and.w	r3, r3, #1
    5308:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    530a:	7bfb      	ldrb	r3, [r7, #15]
    530c:	2b00      	cmp	r3, #0
    530e:	bf14      	ite	ne
    5310:	2301      	movne	r3, #1
    5312:	2300      	moveq	r3, #0
    5314:	b2db      	uxtb	r3, r3
}
    5316:	4618      	mov	r0, r3
    5318:	3714      	adds	r7, #20
    531a:	46bd      	mov	sp, r7
    531c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5320:	4770      	bx	lr

00005322 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    5322:	b480      	push	{r7}
    5324:	b083      	sub	sp, #12
    5326:	af00      	add	r7, sp, #0
    5328:	6078      	str	r0, [r7, #4]
    532a:	460b      	mov	r3, r1
    532c:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    532e:	687b      	ldr	r3, [r7, #4]
    5330:	78fa      	ldrb	r2, [r7, #3]
    5332:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5336:	bf00      	nop
    5338:	370c      	adds	r7, #12
    533a:	46bd      	mov	sp, r7
    533c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5340:	4770      	bx	lr

00005342 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    5342:	b480      	push	{r7}
    5344:	b083      	sub	sp, #12
    5346:	af00      	add	r7, sp, #0
    5348:	6078      	str	r0, [r7, #4]
    534a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    534c:	687b      	ldr	r3, [r7, #4]
    534e:	683a      	ldr	r2, [r7, #0]
    5350:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5352:	bf00      	nop
    5354:	370c      	adds	r7, #12
    5356:	46bd      	mov	sp, r7
    5358:	f85d 7b04 	ldr.w	r7, [sp], #4
    535c:	4770      	bx	lr

0000535e <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    535e:	b480      	push	{r7}
    5360:	b083      	sub	sp, #12
    5362:	af00      	add	r7, sp, #0
    5364:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    5366:	687b      	ldr	r3, [r7, #4]
    5368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    536a:	4618      	mov	r0, r3
    536c:	370c      	adds	r7, #12
    536e:	46bd      	mov	sp, r7
    5370:	f85d 7b04 	ldr.w	r7, [sp], #4
    5374:	4770      	bx	lr

00005376 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    5376:	b480      	push	{r7}
    5378:	b083      	sub	sp, #12
    537a:	af00      	add	r7, sp, #0
    537c:	6078      	str	r0, [r7, #4]
    537e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5380:	687b      	ldr	r3, [r7, #4]
    5382:	683a      	ldr	r2, [r7, #0]
    5384:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5386:	bf00      	nop
    5388:	370c      	adds	r7, #12
    538a:	46bd      	mov	sp, r7
    538c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5390:	4770      	bx	lr

00005392 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    5392:	b480      	push	{r7}
    5394:	b085      	sub	sp, #20
    5396:	af00      	add	r7, sp, #0
    5398:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    539a:	687b      	ldr	r3, [r7, #4]
    539c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    53a0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    53a2:	7bfb      	ldrb	r3, [r7, #15]
    53a4:	085b      	lsrs	r3, r3, #1
    53a6:	b2db      	uxtb	r3, r3
    53a8:	f003 0301 	and.w	r3, r3, #1
    53ac:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    53ae:	7bfb      	ldrb	r3, [r7, #15]
    53b0:	2b00      	cmp	r3, #0
    53b2:	bf14      	ite	ne
    53b4:	2301      	movne	r3, #1
    53b6:	2300      	moveq	r3, #0
    53b8:	b2db      	uxtb	r3, r3
}
    53ba:	4618      	mov	r0, r3
    53bc:	3714      	adds	r7, #20
    53be:	46bd      	mov	sp, r7
    53c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    53c4:	4770      	bx	lr

000053c6 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    53c6:	b480      	push	{r7}
    53c8:	b085      	sub	sp, #20
    53ca:	af00      	add	r7, sp, #0
    53cc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    53ce:	687b      	ldr	r3, [r7, #4]
    53d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    53d4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    53d6:	7bfb      	ldrb	r3, [r7, #15]
    53d8:	089b      	lsrs	r3, r3, #2
    53da:	b2db      	uxtb	r3, r3
    53dc:	f003 0301 	and.w	r3, r3, #1
    53e0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    53e2:	7bfb      	ldrb	r3, [r7, #15]
    53e4:	2b00      	cmp	r3, #0
    53e6:	bf14      	ite	ne
    53e8:	2301      	movne	r3, #1
    53ea:	2300      	moveq	r3, #0
    53ec:	b2db      	uxtb	r3, r3
}
    53ee:	4618      	mov	r0, r3
    53f0:	3714      	adds	r7, #20
    53f2:	46bd      	mov	sp, r7
    53f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    53f8:	4770      	bx	lr

000053fa <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    53fa:	b480      	push	{r7}
    53fc:	b085      	sub	sp, #20
    53fe:	af00      	add	r7, sp, #0
    5400:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5402:	687b      	ldr	r3, [r7, #4]
    5404:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5408:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    540a:	7bfb      	ldrb	r3, [r7, #15]
    540c:	08db      	lsrs	r3, r3, #3
    540e:	b2db      	uxtb	r3, r3
    5410:	f003 0301 	and.w	r3, r3, #1
    5414:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5416:	7bfb      	ldrb	r3, [r7, #15]
    5418:	2b00      	cmp	r3, #0
    541a:	bf14      	ite	ne
    541c:	2301      	movne	r3, #1
    541e:	2300      	moveq	r3, #0
    5420:	b2db      	uxtb	r3, r3
}
    5422:	4618      	mov	r0, r3
    5424:	3714      	adds	r7, #20
    5426:	46bd      	mov	sp, r7
    5428:	f85d 7b04 	ldr.w	r7, [sp], #4
    542c:	4770      	bx	lr

0000542e <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    542e:	b480      	push	{r7}
    5430:	b085      	sub	sp, #20
    5432:	af00      	add	r7, sp, #0
    5434:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5436:	687b      	ldr	r3, [r7, #4]
    5438:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    543c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    543e:	7bfb      	ldrb	r3, [r7, #15]
    5440:	091b      	lsrs	r3, r3, #4
    5442:	b2db      	uxtb	r3, r3
    5444:	f003 0301 	and.w	r3, r3, #1
    5448:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    544a:	7bfb      	ldrb	r3, [r7, #15]
    544c:	2b00      	cmp	r3, #0
    544e:	bf14      	ite	ne
    5450:	2301      	movne	r3, #1
    5452:	2300      	moveq	r3, #0
    5454:	b2db      	uxtb	r3, r3
}
    5456:	4618      	mov	r0, r3
    5458:	3714      	adds	r7, #20
    545a:	46bd      	mov	sp, r7
    545c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5460:	4770      	bx	lr
	...

00005464 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5464:	b580      	push	{r7, lr}
    5466:	b082      	sub	sp, #8
    5468:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    546a:	4b0a      	ldr	r3, [pc, #40]	; (5494 <_oscctrl_init_sources+0x30>)
    546c:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    546e:	4a0a      	ldr	r2, [pc, #40]	; (5498 <_oscctrl_init_sources+0x34>)
    5470:	2101      	movs	r1, #1
    5472:	6878      	ldr	r0, [r7, #4]
    5474:	4b09      	ldr	r3, [pc, #36]	; (549c <_oscctrl_init_sources+0x38>)
    5476:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5478:	bf00      	nop
    547a:	6878      	ldr	r0, [r7, #4]
    547c:	4b08      	ldr	r3, [pc, #32]	; (54a0 <_oscctrl_init_sources+0x3c>)
    547e:	4798      	blx	r3
    5480:	4603      	mov	r3, r0
    5482:	f083 0301 	eor.w	r3, r3, #1
    5486:	b2db      	uxtb	r3, r3
    5488:	2b00      	cmp	r3, #0
    548a:	d1f6      	bne.n	547a <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    548c:	bf00      	nop
    548e:	3708      	adds	r7, #8
    5490:	46bd      	mov	sp, r7
    5492:	bd80      	pop	{r7, pc}
    5494:	40001000 	.word	0x40001000
    5498:	03002646 	.word	0x03002646
    549c:	000052ad 	.word	0x000052ad
    54a0:	00005237 	.word	0x00005237

000054a4 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    54a4:	b580      	push	{r7, lr}
    54a6:	b084      	sub	sp, #16
    54a8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    54aa:	4b6b      	ldr	r3, [pc, #428]	; (5658 <_oscctrl_init_referenced_generators+0x1b4>)
    54ac:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    54ae:	2204      	movs	r2, #4
    54b0:	2100      	movs	r1, #0
    54b2:	486a      	ldr	r0, [pc, #424]	; (565c <_oscctrl_init_referenced_generators+0x1b8>)
    54b4:	4b6a      	ldr	r3, [pc, #424]	; (5660 <_oscctrl_init_referenced_generators+0x1bc>)
    54b6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    54b8:	bf00      	nop
    54ba:	4868      	ldr	r0, [pc, #416]	; (565c <_oscctrl_init_referenced_generators+0x1b8>)
    54bc:	4b69      	ldr	r3, [pc, #420]	; (5664 <_oscctrl_init_referenced_generators+0x1c0>)
    54be:	4798      	blx	r3
    54c0:	4603      	mov	r3, r0
    54c2:	2b00      	cmp	r3, #0
    54c4:	d1f9      	bne.n	54ba <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    54c6:	2100      	movs	r1, #0
    54c8:	68f8      	ldr	r0, [r7, #12]
    54ca:	4b67      	ldr	r3, [pc, #412]	; (5668 <_oscctrl_init_referenced_generators+0x1c4>)
    54cc:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    54ce:	4967      	ldr	r1, [pc, #412]	; (566c <_oscctrl_init_referenced_generators+0x1c8>)
    54d0:	68f8      	ldr	r0, [r7, #12]
    54d2:	4b67      	ldr	r3, [pc, #412]	; (5670 <_oscctrl_init_referenced_generators+0x1cc>)
    54d4:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    54d6:	bf00      	nop
    54d8:	68f8      	ldr	r0, [r7, #12]
    54da:	4b66      	ldr	r3, [pc, #408]	; (5674 <_oscctrl_init_referenced_generators+0x1d0>)
    54dc:	4798      	blx	r3
    54de:	4603      	mov	r3, r0
    54e0:	2b00      	cmp	r3, #0
    54e2:	d1f9      	bne.n	54d8 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    54e4:	2100      	movs	r1, #0
    54e6:	68f8      	ldr	r0, [r7, #12]
    54e8:	4b63      	ldr	r3, [pc, #396]	; (5678 <_oscctrl_init_referenced_generators+0x1d4>)
    54ea:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    54ec:	bf00      	nop
    54ee:	68f8      	ldr	r0, [r7, #12]
    54f0:	4b62      	ldr	r3, [pc, #392]	; (567c <_oscctrl_init_referenced_generators+0x1d8>)
    54f2:	4798      	blx	r3
    54f4:	4603      	mov	r3, r0
    54f6:	2b00      	cmp	r3, #0
    54f8:	d1f9      	bne.n	54ee <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    54fa:	2302      	movs	r3, #2
    54fc:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    54fe:	7afb      	ldrb	r3, [r7, #11]
    5500:	4619      	mov	r1, r3
    5502:	68f8      	ldr	r0, [r7, #12]
    5504:	4b58      	ldr	r3, [pc, #352]	; (5668 <_oscctrl_init_referenced_generators+0x1c4>)
    5506:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5508:	bf00      	nop
    550a:	68f8      	ldr	r0, [r7, #12]
    550c:	4b5c      	ldr	r3, [pc, #368]	; (5680 <_oscctrl_init_referenced_generators+0x1dc>)
    550e:	4798      	blx	r3
    5510:	4603      	mov	r3, r0
    5512:	2b00      	cmp	r3, #0
    5514:	d1f9      	bne.n	550a <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    5516:	68f8      	ldr	r0, [r7, #12]
    5518:	4b5a      	ldr	r3, [pc, #360]	; (5684 <_oscctrl_init_referenced_generators+0x1e0>)
    551a:	4798      	blx	r3
    551c:	4603      	mov	r3, r0
    551e:	4619      	mov	r1, r3
    5520:	68f8      	ldr	r0, [r7, #12]
    5522:	4b59      	ldr	r3, [pc, #356]	; (5688 <_oscctrl_init_referenced_generators+0x1e4>)
    5524:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5526:	bf00      	nop
    5528:	68f8      	ldr	r0, [r7, #12]
    552a:	4b58      	ldr	r3, [pc, #352]	; (568c <_oscctrl_init_referenced_generators+0x1e8>)
    552c:	4798      	blx	r3
    552e:	4603      	mov	r3, r0
    5530:	2b00      	cmp	r3, #0
    5532:	d1f9      	bne.n	5528 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5534:	2319      	movs	r3, #25
    5536:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5538:	7afb      	ldrb	r3, [r7, #11]
    553a:	4619      	mov	r1, r3
    553c:	68f8      	ldr	r0, [r7, #12]
    553e:	4b4e      	ldr	r3, [pc, #312]	; (5678 <_oscctrl_init_referenced_generators+0x1d4>)
    5540:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5542:	bf00      	nop
    5544:	68f8      	ldr	r0, [r7, #12]
    5546:	4b4d      	ldr	r3, [pc, #308]	; (567c <_oscctrl_init_referenced_generators+0x1d8>)
    5548:	4798      	blx	r3
    554a:	4603      	mov	r3, r0
    554c:	2b00      	cmp	r3, #0
    554e:	d1f9      	bne.n	5544 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5550:	2245      	movs	r2, #69	; 0x45
    5552:	2101      	movs	r1, #1
    5554:	4841      	ldr	r0, [pc, #260]	; (565c <_oscctrl_init_referenced_generators+0x1b8>)
    5556:	4b4e      	ldr	r3, [pc, #312]	; (5690 <_oscctrl_init_referenced_generators+0x1ec>)
    5558:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    555a:	223b      	movs	r2, #59	; 0x3b
    555c:	2100      	movs	r1, #0
    555e:	68f8      	ldr	r0, [r7, #12]
    5560:	4b4c      	ldr	r3, [pc, #304]	; (5694 <_oscctrl_init_referenced_generators+0x1f0>)
    5562:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5564:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5568:	2100      	movs	r1, #0
    556a:	68f8      	ldr	r0, [r7, #12]
    556c:	4b4a      	ldr	r3, [pc, #296]	; (5698 <_oscctrl_init_referenced_generators+0x1f4>)
    556e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5570:	2242      	movs	r2, #66	; 0x42
    5572:	2100      	movs	r1, #0
    5574:	68f8      	ldr	r0, [r7, #12]
    5576:	4b49      	ldr	r3, [pc, #292]	; (569c <_oscctrl_init_referenced_generators+0x1f8>)
    5578:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    557a:	4a49      	ldr	r2, [pc, #292]	; (56a0 <_oscctrl_init_referenced_generators+0x1fc>)
    557c:	2101      	movs	r1, #1
    557e:	68f8      	ldr	r0, [r7, #12]
    5580:	4b44      	ldr	r3, [pc, #272]	; (5694 <_oscctrl_init_referenced_generators+0x1f0>)
    5582:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5584:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5588:	2101      	movs	r1, #1
    558a:	68f8      	ldr	r0, [r7, #12]
    558c:	4b42      	ldr	r3, [pc, #264]	; (5698 <_oscctrl_init_referenced_generators+0x1f4>)
    558e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5590:	2202      	movs	r2, #2
    5592:	2101      	movs	r1, #1
    5594:	68f8      	ldr	r0, [r7, #12]
    5596:	4b41      	ldr	r3, [pc, #260]	; (569c <_oscctrl_init_referenced_generators+0x1f8>)
    5598:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    559a:	68f8      	ldr	r0, [r7, #12]
    559c:	4b41      	ldr	r3, [pc, #260]	; (56a4 <_oscctrl_init_referenced_generators+0x200>)
    559e:	4798      	blx	r3
    55a0:	4603      	mov	r3, r0
    55a2:	2b00      	cmp	r3, #0
    55a4:	d00c      	beq.n	55c0 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    55a6:	f44f 6310 	mov.w	r3, #2304	; 0x900
    55aa:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    55ac:	bf00      	nop
    55ae:	6879      	ldr	r1, [r7, #4]
    55b0:	68f8      	ldr	r0, [r7, #12]
    55b2:	4b3d      	ldr	r3, [pc, #244]	; (56a8 <_oscctrl_init_referenced_generators+0x204>)
    55b4:	4798      	blx	r3
    55b6:	4602      	mov	r2, r0
    55b8:	687b      	ldr	r3, [r7, #4]
    55ba:	429a      	cmp	r2, r3
    55bc:	d1f7      	bne.n	55ae <_oscctrl_init_referenced_generators+0x10a>
    55be:	e009      	b.n	55d4 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    55c0:	bf00      	nop
    55c2:	68f8      	ldr	r0, [r7, #12]
    55c4:	4b39      	ldr	r3, [pc, #228]	; (56ac <_oscctrl_init_referenced_generators+0x208>)
    55c6:	4798      	blx	r3
    55c8:	4603      	mov	r3, r0
    55ca:	f083 0301 	eor.w	r3, r3, #1
    55ce:	b2db      	uxtb	r3, r3
    55d0:	2b00      	cmp	r3, #0
    55d2:	d1f6      	bne.n	55c2 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    55d4:	bf00      	nop
    55d6:	2100      	movs	r1, #0
    55d8:	68f8      	ldr	r0, [r7, #12]
    55da:	4b35      	ldr	r3, [pc, #212]	; (56b0 <_oscctrl_init_referenced_generators+0x20c>)
    55dc:	4798      	blx	r3
    55de:	4603      	mov	r3, r0
    55e0:	f083 0301 	eor.w	r3, r3, #1
    55e4:	b2db      	uxtb	r3, r3
    55e6:	2b00      	cmp	r3, #0
    55e8:	d009      	beq.n	55fe <_oscctrl_init_referenced_generators+0x15a>
    55ea:	2100      	movs	r1, #0
    55ec:	68f8      	ldr	r0, [r7, #12]
    55ee:	4b31      	ldr	r3, [pc, #196]	; (56b4 <_oscctrl_init_referenced_generators+0x210>)
    55f0:	4798      	blx	r3
    55f2:	4603      	mov	r3, r0
    55f4:	f083 0301 	eor.w	r3, r3, #1
    55f8:	b2db      	uxtb	r3, r3
    55fa:	2b00      	cmp	r3, #0
    55fc:	d1eb      	bne.n	55d6 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    55fe:	bf00      	nop
    5600:	2101      	movs	r1, #1
    5602:	68f8      	ldr	r0, [r7, #12]
    5604:	4b2a      	ldr	r3, [pc, #168]	; (56b0 <_oscctrl_init_referenced_generators+0x20c>)
    5606:	4798      	blx	r3
    5608:	4603      	mov	r3, r0
    560a:	f083 0301 	eor.w	r3, r3, #1
    560e:	b2db      	uxtb	r3, r3
    5610:	2b00      	cmp	r3, #0
    5612:	d009      	beq.n	5628 <_oscctrl_init_referenced_generators+0x184>
    5614:	2101      	movs	r1, #1
    5616:	68f8      	ldr	r0, [r7, #12]
    5618:	4b26      	ldr	r3, [pc, #152]	; (56b4 <_oscctrl_init_referenced_generators+0x210>)
    561a:	4798      	blx	r3
    561c:	4603      	mov	r3, r0
    561e:	f083 0301 	eor.w	r3, r3, #1
    5622:	b2db      	uxtb	r3, r3
    5624:	2b00      	cmp	r3, #0
    5626:	d1eb      	bne.n	5600 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5628:	bf00      	nop
    562a:	480c      	ldr	r0, [pc, #48]	; (565c <_oscctrl_init_referenced_generators+0x1b8>)
    562c:	4b22      	ldr	r3, [pc, #136]	; (56b8 <_oscctrl_init_referenced_generators+0x214>)
    562e:	4798      	blx	r3
    5630:	4603      	mov	r3, r0
    5632:	2b00      	cmp	r3, #0
    5634:	d1f9      	bne.n	562a <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5636:	2207      	movs	r2, #7
    5638:	2100      	movs	r1, #0
    563a:	4808      	ldr	r0, [pc, #32]	; (565c <_oscctrl_init_referenced_generators+0x1b8>)
    563c:	4b08      	ldr	r3, [pc, #32]	; (5660 <_oscctrl_init_referenced_generators+0x1bc>)
    563e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5640:	bf00      	nop
    5642:	4806      	ldr	r0, [pc, #24]	; (565c <_oscctrl_init_referenced_generators+0x1b8>)
    5644:	4b07      	ldr	r3, [pc, #28]	; (5664 <_oscctrl_init_referenced_generators+0x1c0>)
    5646:	4798      	blx	r3
    5648:	4603      	mov	r3, r0
    564a:	2b00      	cmp	r3, #0
    564c:	d1f9      	bne.n	5642 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    564e:	bf00      	nop
    5650:	3710      	adds	r7, #16
    5652:	46bd      	mov	sp, r7
    5654:	bd80      	pop	{r7, pc}
    5656:	bf00      	nop
    5658:	40001000 	.word	0x40001000
    565c:	40001c00 	.word	0x40001c00
    5660:	00005071 	.word	0x00005071
    5664:	00005031 	.word	0x00005031
    5668:	000052d5 	.word	0x000052d5
    566c:	0401bb80 	.word	0x0401bb80
    5670:	00005377 	.word	0x00005377
    5674:	0000542f 	.word	0x0000542f
    5678:	00005323 	.word	0x00005323
    567c:	000053c7 	.word	0x000053c7
    5680:	00005393 	.word	0x00005393
    5684:	0000535f 	.word	0x0000535f
    5688:	00005343 	.word	0x00005343
    568c:	000053fb 	.word	0x000053fb
    5690:	000050c1 	.word	0x000050c1
    5694:	000051cd 	.word	0x000051cd
    5698:	00005209 	.word	0x00005209
    569c:	00005191 	.word	0x00005191
    56a0:	000407a0 	.word	0x000407a0
    56a4:	000052f3 	.word	0x000052f3
    56a8:	00005287 	.word	0x00005287
    56ac:	0000525f 	.word	0x0000525f
    56b0:	0000511d 	.word	0x0000511d
    56b4:	00005155 	.word	0x00005155
    56b8:	00005059 	.word	0x00005059

000056bc <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    56bc:	b480      	push	{r7}
    56be:	b083      	sub	sp, #12
    56c0:	af00      	add	r7, sp, #0
    56c2:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    56c4:	687b      	ldr	r3, [r7, #4]
    56c6:	69db      	ldr	r3, [r3, #28]
    56c8:	0a9b      	lsrs	r3, r3, #10
    56ca:	f003 0301 	and.w	r3, r3, #1
    56ce:	2b00      	cmp	r3, #0
    56d0:	bf14      	ite	ne
    56d2:	2301      	movne	r3, #1
    56d4:	2300      	moveq	r3, #0
    56d6:	b2db      	uxtb	r3, r3
}
    56d8:	4618      	mov	r0, r3
    56da:	370c      	adds	r7, #12
    56dc:	46bd      	mov	sp, r7
    56de:	f85d 7b04 	ldr.w	r7, [sp], #4
    56e2:	4770      	bx	lr

000056e4 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    56e4:	b480      	push	{r7}
    56e6:	b083      	sub	sp, #12
    56e8:	af00      	add	r7, sp, #0
    56ea:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    56ec:	687b      	ldr	r3, [r7, #4]
    56ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    56f2:	61da      	str	r2, [r3, #28]
}
    56f4:	bf00      	nop
    56f6:	370c      	adds	r7, #12
    56f8:	46bd      	mov	sp, r7
    56fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    56fe:	4770      	bx	lr

00005700 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5700:	b480      	push	{r7}
    5702:	b083      	sub	sp, #12
    5704:	af00      	add	r7, sp, #0
    5706:	6078      	str	r0, [r7, #4]
    5708:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    570a:	687b      	ldr	r3, [r7, #4]
    570c:	683a      	ldr	r2, [r7, #0]
    570e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5710:	bf00      	nop
    5712:	370c      	adds	r7, #12
    5714:	46bd      	mov	sp, r7
    5716:	f85d 7b04 	ldr.w	r7, [sp], #4
    571a:	4770      	bx	lr

0000571c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    571c:	b480      	push	{r7}
    571e:	b083      	sub	sp, #12
    5720:	af00      	add	r7, sp, #0
    5722:	6078      	str	r0, [r7, #4]
    5724:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5726:	687b      	ldr	r3, [r7, #4]
    5728:	683a      	ldr	r2, [r7, #0]
    572a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    572c:	bf00      	nop
    572e:	370c      	adds	r7, #12
    5730:	46bd      	mov	sp, r7
    5732:	f85d 7b04 	ldr.w	r7, [sp], #4
    5736:	4770      	bx	lr

00005738 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5738:	b480      	push	{r7}
    573a:	b083      	sub	sp, #12
    573c:	af00      	add	r7, sp, #0
    573e:	6078      	str	r0, [r7, #4]
    5740:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5742:	687b      	ldr	r3, [r7, #4]
    5744:	683a      	ldr	r2, [r7, #0]
    5746:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5748:	bf00      	nop
    574a:	370c      	adds	r7, #12
    574c:	46bd      	mov	sp, r7
    574e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5752:	4770      	bx	lr

00005754 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5754:	b480      	push	{r7}
    5756:	b083      	sub	sp, #12
    5758:	af00      	add	r7, sp, #0
    575a:	6078      	str	r0, [r7, #4]
    575c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    575e:	687b      	ldr	r3, [r7, #4]
    5760:	683a      	ldr	r2, [r7, #0]
    5762:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5764:	bf00      	nop
    5766:	370c      	adds	r7, #12
    5768:	46bd      	mov	sp, r7
    576a:	f85d 7b04 	ldr.w	r7, [sp], #4
    576e:	4770      	bx	lr

00005770 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5770:	b480      	push	{r7}
    5772:	b085      	sub	sp, #20
    5774:	af00      	add	r7, sp, #0
    5776:	6078      	str	r0, [r7, #4]
    5778:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    577a:	687b      	ldr	r3, [r7, #4]
    577c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    577e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5780:	68fb      	ldr	r3, [r7, #12]
    5782:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5786:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5788:	683b      	ldr	r3, [r7, #0]
    578a:	b2db      	uxtb	r3, r3
    578c:	68fa      	ldr	r2, [r7, #12]
    578e:	4313      	orrs	r3, r2
    5790:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5792:	687b      	ldr	r3, [r7, #4]
    5794:	68fa      	ldr	r2, [r7, #12]
    5796:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5798:	bf00      	nop
    579a:	3714      	adds	r7, #20
    579c:	46bd      	mov	sp, r7
    579e:	f85d 7b04 	ldr.w	r7, [sp], #4
    57a2:	4770      	bx	lr

000057a4 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    57a4:	b480      	push	{r7}
    57a6:	b085      	sub	sp, #20
    57a8:	af00      	add	r7, sp, #0
    57aa:	6078      	str	r0, [r7, #4]
    57ac:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    57ae:	687b      	ldr	r3, [r7, #4]
    57b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    57b2:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    57b4:	68fb      	ldr	r3, [r7, #12]
    57b6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    57ba:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    57bc:	683b      	ldr	r3, [r7, #0]
    57be:	041b      	lsls	r3, r3, #16
    57c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    57c4:	68fa      	ldr	r2, [r7, #12]
    57c6:	4313      	orrs	r3, r2
    57c8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    57ca:	687b      	ldr	r3, [r7, #4]
    57cc:	68fa      	ldr	r2, [r7, #12]
    57ce:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    57d0:	bf00      	nop
    57d2:	3714      	adds	r7, #20
    57d4:	46bd      	mov	sp, r7
    57d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    57da:	4770      	bx	lr

000057dc <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    57dc:	b480      	push	{r7}
    57de:	b083      	sub	sp, #12
    57e0:	af00      	add	r7, sp, #0
    57e2:	6078      	str	r0, [r7, #4]
    57e4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    57e6:	687b      	ldr	r3, [r7, #4]
    57e8:	683a      	ldr	r2, [r7, #0]
    57ea:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    57ec:	bf00      	nop
    57ee:	370c      	adds	r7, #12
    57f0:	46bd      	mov	sp, r7
    57f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    57f6:	4770      	bx	lr

000057f8 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    57f8:	b480      	push	{r7}
    57fa:	b083      	sub	sp, #12
    57fc:	af00      	add	r7, sp, #0
    57fe:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5800:	687b      	ldr	r3, [r7, #4]
    5802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5804:	4618      	mov	r0, r3
    5806:	370c      	adds	r7, #12
    5808:	46bd      	mov	sp, r7
    580a:	f85d 7b04 	ldr.w	r7, [sp], #4
    580e:	4770      	bx	lr

00005810 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5810:	b480      	push	{r7}
    5812:	b085      	sub	sp, #20
    5814:	af00      	add	r7, sp, #0
    5816:	60f8      	str	r0, [r7, #12]
    5818:	60b9      	str	r1, [r7, #8]
    581a:	607a      	str	r2, [r7, #4]
	while (count--) {
    581c:	e007      	b.n	582e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    581e:	68fb      	ldr	r3, [r7, #12]
    5820:	1c5a      	adds	r2, r3, #1
    5822:	60fa      	str	r2, [r7, #12]
    5824:	68ba      	ldr	r2, [r7, #8]
    5826:	1c51      	adds	r1, r2, #1
    5828:	60b9      	str	r1, [r7, #8]
    582a:	7812      	ldrb	r2, [r2, #0]
    582c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    582e:	687b      	ldr	r3, [r7, #4]
    5830:	1e5a      	subs	r2, r3, #1
    5832:	607a      	str	r2, [r7, #4]
    5834:	2b00      	cmp	r3, #0
    5836:	d1f2      	bne.n	581e <_qspi_memcpy+0xe>
	}
}
    5838:	bf00      	nop
    583a:	3714      	adds	r7, #20
    583c:	46bd      	mov	sp, r7
    583e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5842:	4770      	bx	lr

00005844 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5844:	b580      	push	{r7, lr}
    5846:	b082      	sub	sp, #8
    5848:	af00      	add	r7, sp, #0
    584a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    584c:	4903      	ldr	r1, [pc, #12]	; (585c <_qspi_end_transfer+0x18>)
    584e:	6878      	ldr	r0, [r7, #4]
    5850:	4b03      	ldr	r3, [pc, #12]	; (5860 <_qspi_end_transfer+0x1c>)
    5852:	4798      	blx	r3
}
    5854:	bf00      	nop
    5856:	3708      	adds	r7, #8
    5858:	46bd      	mov	sp, r7
    585a:	bd80      	pop	{r7, pc}
    585c:	01000002 	.word	0x01000002
    5860:	00005701 	.word	0x00005701

00005864 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5864:	b580      	push	{r7, lr}
    5866:	b082      	sub	sp, #8
    5868:	af00      	add	r7, sp, #0
    586a:	6078      	str	r0, [r7, #4]
    586c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    586e:	687b      	ldr	r3, [r7, #4]
    5870:	2b00      	cmp	r3, #0
    5872:	d004      	beq.n	587e <_qspi_sync_init+0x1a>
    5874:	683b      	ldr	r3, [r7, #0]
    5876:	2b00      	cmp	r3, #0
    5878:	d001      	beq.n	587e <_qspi_sync_init+0x1a>
    587a:	2301      	movs	r3, #1
    587c:	e000      	b.n	5880 <_qspi_sync_init+0x1c>
    587e:	2300      	movs	r3, #0
    5880:	f003 0301 	and.w	r3, r3, #1
    5884:	b2db      	uxtb	r3, r3
    5886:	2240      	movs	r2, #64	; 0x40
    5888:	490c      	ldr	r1, [pc, #48]	; (58bc <_qspi_sync_init+0x58>)
    588a:	4618      	mov	r0, r3
    588c:	4b0c      	ldr	r3, [pc, #48]	; (58c0 <_qspi_sync_init+0x5c>)
    588e:	4798      	blx	r3
	dev->prvt = hw;
    5890:	687b      	ldr	r3, [r7, #4]
    5892:	683a      	ldr	r2, [r7, #0]
    5894:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    5896:	687b      	ldr	r3, [r7, #4]
    5898:	681b      	ldr	r3, [r3, #0]
    589a:	2101      	movs	r1, #1
    589c:	4618      	mov	r0, r3
    589e:	4b09      	ldr	r3, [pc, #36]	; (58c4 <_qspi_sync_init+0x60>)
    58a0:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    58a2:	4909      	ldr	r1, [pc, #36]	; (58c8 <_qspi_sync_init+0x64>)
    58a4:	6838      	ldr	r0, [r7, #0]
    58a6:	4b09      	ldr	r3, [pc, #36]	; (58cc <_qspi_sync_init+0x68>)
    58a8:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    58aa:	4909      	ldr	r1, [pc, #36]	; (58d0 <_qspi_sync_init+0x6c>)
    58ac:	6838      	ldr	r0, [r7, #0]
    58ae:	4b09      	ldr	r3, [pc, #36]	; (58d4 <_qspi_sync_init+0x70>)
    58b0:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    58b2:	2300      	movs	r3, #0
}
    58b4:	4618      	mov	r0, r3
    58b6:	3708      	adds	r7, #8
    58b8:	46bd      	mov	sp, r7
    58ba:	bd80      	pop	{r7, pc}
    58bc:	0000f53c 	.word	0x0000f53c
    58c0:	0000389d 	.word	0x0000389d
    58c4:	00005701 	.word	0x00005701
    58c8:	06000011 	.word	0x06000011
    58cc:	0000571d 	.word	0x0000571d
    58d0:	00241300 	.word	0x00241300
    58d4:	00005739 	.word	0x00005739

000058d8 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    58d8:	b580      	push	{r7, lr}
    58da:	b082      	sub	sp, #8
    58dc:	af00      	add	r7, sp, #0
    58de:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    58e0:	687b      	ldr	r3, [r7, #4]
    58e2:	681b      	ldr	r3, [r3, #0]
    58e4:	2102      	movs	r1, #2
    58e6:	4618      	mov	r0, r3
    58e8:	4b03      	ldr	r3, [pc, #12]	; (58f8 <_qspi_sync_enable+0x20>)
    58ea:	4798      	blx	r3
	return ERR_NONE;
    58ec:	2300      	movs	r3, #0
}
    58ee:	4618      	mov	r0, r3
    58f0:	3708      	adds	r7, #8
    58f2:	46bd      	mov	sp, r7
    58f4:	bd80      	pop	{r7, pc}
    58f6:	bf00      	nop
    58f8:	00005701 	.word	0x00005701

000058fc <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    58fc:	b580      	push	{r7, lr}
    58fe:	b082      	sub	sp, #8
    5900:	af00      	add	r7, sp, #0
    5902:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5904:	687b      	ldr	r3, [r7, #4]
    5906:	681b      	ldr	r3, [r3, #0]
    5908:	2100      	movs	r1, #0
    590a:	4618      	mov	r0, r3
    590c:	4b03      	ldr	r3, [pc, #12]	; (591c <_qspi_sync_disable+0x20>)
    590e:	4798      	blx	r3
	return ERR_NONE;
    5910:	2300      	movs	r3, #0
}
    5912:	4618      	mov	r0, r3
    5914:	3708      	adds	r7, #8
    5916:	46bd      	mov	sp, r7
    5918:	bd80      	pop	{r7, pc}
    591a:	bf00      	nop
    591c:	00005701 	.word	0x00005701

00005920 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5920:	b580      	push	{r7, lr}
    5922:	b084      	sub	sp, #16
    5924:	af00      	add	r7, sp, #0
    5926:	6078      	str	r0, [r7, #4]
    5928:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    592a:	687b      	ldr	r3, [r7, #4]
    592c:	681b      	ldr	r3, [r3, #0]
    592e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5930:	683b      	ldr	r3, [r7, #0]
    5932:	781b      	ldrb	r3, [r3, #0]
    5934:	f003 0320 	and.w	r3, r3, #32
    5938:	b2db      	uxtb	r3, r3
    593a:	2b00      	cmp	r3, #0
    593c:	d005      	beq.n	594a <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    593e:	683b      	ldr	r3, [r7, #0]
    5940:	689b      	ldr	r3, [r3, #8]
    5942:	4619      	mov	r1, r3
    5944:	68f8      	ldr	r0, [r7, #12]
    5946:	4b13      	ldr	r3, [pc, #76]	; (5994 <_qspi_sync_command_set_ifr+0x74>)
    5948:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    594a:	683b      	ldr	r3, [r7, #0]
    594c:	781b      	ldrb	r3, [r3, #0]
    594e:	f003 0310 	and.w	r3, r3, #16
    5952:	b2db      	uxtb	r3, r3
    5954:	2b00      	cmp	r3, #0
    5956:	d005      	beq.n	5964 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5958:	683b      	ldr	r3, [r7, #0]
    595a:	791b      	ldrb	r3, [r3, #4]
    595c:	4619      	mov	r1, r3
    595e:	68f8      	ldr	r0, [r7, #12]
    5960:	4b0d      	ldr	r3, [pc, #52]	; (5998 <_qspi_sync_command_set_ifr+0x78>)
    5962:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5964:	683b      	ldr	r3, [r7, #0]
    5966:	781b      	ldrb	r3, [r3, #0]
    5968:	f003 0340 	and.w	r3, r3, #64	; 0x40
    596c:	b2db      	uxtb	r3, r3
    596e:	2b00      	cmp	r3, #0
    5970:	d005      	beq.n	597e <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5972:	683b      	ldr	r3, [r7, #0]
    5974:	795b      	ldrb	r3, [r3, #5]
    5976:	4619      	mov	r1, r3
    5978:	68f8      	ldr	r0, [r7, #12]
    597a:	4b08      	ldr	r3, [pc, #32]	; (599c <_qspi_sync_command_set_ifr+0x7c>)
    597c:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    597e:	683b      	ldr	r3, [r7, #0]
    5980:	681b      	ldr	r3, [r3, #0]
    5982:	4619      	mov	r1, r3
    5984:	68f8      	ldr	r0, [r7, #12]
    5986:	4b06      	ldr	r3, [pc, #24]	; (59a0 <_qspi_sync_command_set_ifr+0x80>)
    5988:	4798      	blx	r3
}
    598a:	bf00      	nop
    598c:	3710      	adds	r7, #16
    598e:	46bd      	mov	sp, r7
    5990:	bd80      	pop	{r7, pc}
    5992:	bf00      	nop
    5994:	00005755 	.word	0x00005755
    5998:	00005771 	.word	0x00005771
    599c:	000057a5 	.word	0x000057a5
    59a0:	000057dd 	.word	0x000057dd

000059a4 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    59a4:	b580      	push	{r7, lr}
    59a6:	b084      	sub	sp, #16
    59a8:	af00      	add	r7, sp, #0
    59aa:	6078      	str	r0, [r7, #4]
    59ac:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    59ae:	687b      	ldr	r3, [r7, #4]
    59b0:	681b      	ldr	r3, [r3, #0]
    59b2:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    59b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    59b8:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    59ba:	683b      	ldr	r3, [r7, #0]
    59bc:	781b      	ldrb	r3, [r3, #0]
    59be:	f003 0320 	and.w	r3, r3, #32
    59c2:	b2db      	uxtb	r3, r3
    59c4:	2b00      	cmp	r3, #0
    59c6:	d004      	beq.n	59d2 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    59c8:	683b      	ldr	r3, [r7, #0]
    59ca:	689b      	ldr	r3, [r3, #8]
    59cc:	68fa      	ldr	r2, [r7, #12]
    59ce:	4413      	add	r3, r2
    59d0:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    59d2:	68b8      	ldr	r0, [r7, #8]
    59d4:	4b18      	ldr	r3, [pc, #96]	; (5a38 <_qspi_sync_run_transfer+0x94>)
    59d6:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    59d8:	683b      	ldr	r3, [r7, #0]
    59da:	691b      	ldr	r3, [r3, #16]
    59dc:	2b00      	cmp	r3, #0
    59de:	d103      	bne.n	59e8 <_qspi_sync_run_transfer+0x44>
    59e0:	683b      	ldr	r3, [r7, #0]
    59e2:	695b      	ldr	r3, [r3, #20]
    59e4:	2b00      	cmp	r3, #0
    59e6:	d001      	beq.n	59ec <_qspi_sync_run_transfer+0x48>
    59e8:	2301      	movs	r3, #1
    59ea:	e000      	b.n	59ee <_qspi_sync_run_transfer+0x4a>
    59ec:	2300      	movs	r3, #0
    59ee:	f003 0301 	and.w	r3, r3, #1
    59f2:	b2db      	uxtb	r3, r3
    59f4:	2282      	movs	r2, #130	; 0x82
    59f6:	4911      	ldr	r1, [pc, #68]	; (5a3c <_qspi_sync_run_transfer+0x98>)
    59f8:	4618      	mov	r0, r3
    59fa:	4b11      	ldr	r3, [pc, #68]	; (5a40 <_qspi_sync_run_transfer+0x9c>)
    59fc:	4798      	blx	r3

	if (cmd->tx_buf) {
    59fe:	683b      	ldr	r3, [r7, #0]
    5a00:	691b      	ldr	r3, [r3, #16]
    5a02:	2b00      	cmp	r3, #0
    5a04:	d008      	beq.n	5a18 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5a06:	683b      	ldr	r3, [r7, #0]
    5a08:	6919      	ldr	r1, [r3, #16]
    5a0a:	683b      	ldr	r3, [r7, #0]
    5a0c:	68db      	ldr	r3, [r3, #12]
    5a0e:	461a      	mov	r2, r3
    5a10:	68f8      	ldr	r0, [r7, #12]
    5a12:	4b0c      	ldr	r3, [pc, #48]	; (5a44 <_qspi_sync_run_transfer+0xa0>)
    5a14:	4798      	blx	r3
    5a16:	e007      	b.n	5a28 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5a18:	683b      	ldr	r3, [r7, #0]
    5a1a:	6958      	ldr	r0, [r3, #20]
    5a1c:	683b      	ldr	r3, [r7, #0]
    5a1e:	68db      	ldr	r3, [r3, #12]
    5a20:	461a      	mov	r2, r3
    5a22:	68f9      	ldr	r1, [r7, #12]
    5a24:	4b07      	ldr	r3, [pc, #28]	; (5a44 <_qspi_sync_run_transfer+0xa0>)
    5a26:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5a28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5a2c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5a30:	bf00      	nop
    5a32:	3710      	adds	r7, #16
    5a34:	46bd      	mov	sp, r7
    5a36:	bd80      	pop	{r7, pc}
    5a38:	000057f9 	.word	0x000057f9
    5a3c:	0000f53c 	.word	0x0000f53c
    5a40:	0000389d 	.word	0x0000389d
    5a44:	00005811 	.word	0x00005811

00005a48 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5a48:	b580      	push	{r7, lr}
    5a4a:	b082      	sub	sp, #8
    5a4c:	af00      	add	r7, sp, #0
    5a4e:	6078      	str	r0, [r7, #4]
    5a50:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5a52:	6839      	ldr	r1, [r7, #0]
    5a54:	6878      	ldr	r0, [r7, #4]
    5a56:	4b14      	ldr	r3, [pc, #80]	; (5aa8 <_qspi_sync_serial_run_command+0x60>)
    5a58:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    5a5a:	683b      	ldr	r3, [r7, #0]
    5a5c:	781b      	ldrb	r3, [r3, #0]
    5a5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5a62:	b2db      	uxtb	r3, r3
    5a64:	2b00      	cmp	r3, #0
    5a66:	d003      	beq.n	5a70 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5a68:	6839      	ldr	r1, [r7, #0]
    5a6a:	6878      	ldr	r0, [r7, #4]
    5a6c:	4b0f      	ldr	r3, [pc, #60]	; (5aac <_qspi_sync_serial_run_command+0x64>)
    5a6e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5a70:	687b      	ldr	r3, [r7, #4]
    5a72:	681b      	ldr	r3, [r3, #0]
    5a74:	4618      	mov	r0, r3
    5a76:	4b0e      	ldr	r3, [pc, #56]	; (5ab0 <_qspi_sync_serial_run_command+0x68>)
    5a78:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    5a7a:	bf00      	nop
    5a7c:	687b      	ldr	r3, [r7, #4]
    5a7e:	681b      	ldr	r3, [r3, #0]
    5a80:	4618      	mov	r0, r3
    5a82:	4b0c      	ldr	r3, [pc, #48]	; (5ab4 <_qspi_sync_serial_run_command+0x6c>)
    5a84:	4798      	blx	r3
    5a86:	4603      	mov	r3, r0
    5a88:	f083 0301 	eor.w	r3, r3, #1
    5a8c:	b2db      	uxtb	r3, r3
    5a8e:	2b00      	cmp	r3, #0
    5a90:	d1f4      	bne.n	5a7c <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    5a92:	687b      	ldr	r3, [r7, #4]
    5a94:	681b      	ldr	r3, [r3, #0]
    5a96:	4618      	mov	r0, r3
    5a98:	4b07      	ldr	r3, [pc, #28]	; (5ab8 <_qspi_sync_serial_run_command+0x70>)
    5a9a:	4798      	blx	r3
	return ERR_NONE;
    5a9c:	2300      	movs	r3, #0
}
    5a9e:	4618      	mov	r0, r3
    5aa0:	3708      	adds	r7, #8
    5aa2:	46bd      	mov	sp, r7
    5aa4:	bd80      	pop	{r7, pc}
    5aa6:	bf00      	nop
    5aa8:	00005921 	.word	0x00005921
    5aac:	000059a5 	.word	0x000059a5
    5ab0:	00005845 	.word	0x00005845
    5ab4:	000056bd 	.word	0x000056bd
    5ab8:	000056e5 	.word	0x000056e5

00005abc <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    5abc:	b480      	push	{r7}
    5abe:	b083      	sub	sp, #12
    5ac0:	af00      	add	r7, sp, #0
    5ac2:	6078      	str	r0, [r7, #4]
    5ac4:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5ac6:	bf00      	nop
    5ac8:	687b      	ldr	r3, [r7, #4]
    5aca:	691a      	ldr	r2, [r3, #16]
    5acc:	683b      	ldr	r3, [r7, #0]
    5ace:	4013      	ands	r3, r2
    5ad0:	2b00      	cmp	r3, #0
    5ad2:	d1f9      	bne.n	5ac8 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5ad4:	bf00      	nop
    5ad6:	370c      	adds	r7, #12
    5ad8:	46bd      	mov	sp, r7
    5ada:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ade:	4770      	bx	lr

00005ae0 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5ae0:	b480      	push	{r7}
    5ae2:	b083      	sub	sp, #12
    5ae4:	af00      	add	r7, sp, #0
    5ae6:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5ae8:	687b      	ldr	r3, [r7, #4]
    5aea:	f44f 7280 	mov.w	r2, #256	; 0x100
    5aee:	819a      	strh	r2, [r3, #12]
}
    5af0:	bf00      	nop
    5af2:	370c      	adds	r7, #12
    5af4:	46bd      	mov	sp, r7
    5af6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5afa:	4770      	bx	lr

00005afc <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5afc:	b480      	push	{r7}
    5afe:	b083      	sub	sp, #12
    5b00:	af00      	add	r7, sp, #0
    5b02:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5b04:	687b      	ldr	r3, [r7, #4]
    5b06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5b0a:	819a      	strh	r2, [r3, #12]
}
    5b0c:	bf00      	nop
    5b0e:	370c      	adds	r7, #12
    5b10:	46bd      	mov	sp, r7
    5b12:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b16:	4770      	bx	lr

00005b18 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5b18:	b480      	push	{r7}
    5b1a:	b083      	sub	sp, #12
    5b1c:	af00      	add	r7, sp, #0
    5b1e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5b20:	687b      	ldr	r3, [r7, #4]
    5b22:	899b      	ldrh	r3, [r3, #12]
    5b24:	b29b      	uxth	r3, r3
}
    5b26:	4618      	mov	r0, r3
    5b28:	370c      	adds	r7, #12
    5b2a:	46bd      	mov	sp, r7
    5b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b30:	4770      	bx	lr

00005b32 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    5b32:	b480      	push	{r7}
    5b34:	b083      	sub	sp, #12
    5b36:	af00      	add	r7, sp, #0
    5b38:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    5b3a:	687b      	ldr	r3, [r7, #4]
    5b3c:	895b      	ldrh	r3, [r3, #10]
    5b3e:	b29b      	uxth	r3, r3
}
    5b40:	4618      	mov	r0, r3
    5b42:	370c      	adds	r7, #12
    5b44:	46bd      	mov	sp, r7
    5b46:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b4a:	4770      	bx	lr

00005b4c <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    5b4c:	b580      	push	{r7, lr}
    5b4e:	b082      	sub	sp, #8
    5b50:	af00      	add	r7, sp, #0
    5b52:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5b54:	687b      	ldr	r3, [r7, #4]
    5b56:	881b      	ldrh	r3, [r3, #0]
    5b58:	b29b      	uxth	r3, r3
    5b5a:	f043 0301 	orr.w	r3, r3, #1
    5b5e:	b29a      	uxth	r2, r3
    5b60:	687b      	ldr	r3, [r7, #4]
    5b62:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5b64:	2101      	movs	r1, #1
    5b66:	6878      	ldr	r0, [r7, #4]
    5b68:	4b02      	ldr	r3, [pc, #8]	; (5b74 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    5b6a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5b6c:	bf00      	nop
    5b6e:	3708      	adds	r7, #8
    5b70:	46bd      	mov	sp, r7
    5b72:	bd80      	pop	{r7, pc}
    5b74:	00005abd 	.word	0x00005abd

00005b78 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5b78:	b580      	push	{r7, lr}
    5b7a:	b084      	sub	sp, #16
    5b7c:	af00      	add	r7, sp, #0
    5b7e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5b80:	f248 0103 	movw	r1, #32771	; 0x8003
    5b84:	6878      	ldr	r0, [r7, #4]
    5b86:	4b0a      	ldr	r3, [pc, #40]	; (5bb0 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5b88:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5b8a:	687b      	ldr	r3, [r7, #4]
    5b8c:	881b      	ldrh	r3, [r3, #0]
    5b8e:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5b90:	89fb      	ldrh	r3, [r7, #14]
    5b92:	085b      	lsrs	r3, r3, #1
    5b94:	b29b      	uxth	r3, r3
    5b96:	f003 0301 	and.w	r3, r3, #1
    5b9a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    5b9c:	89fb      	ldrh	r3, [r7, #14]
    5b9e:	2b00      	cmp	r3, #0
    5ba0:	bf14      	ite	ne
    5ba2:	2301      	movne	r3, #1
    5ba4:	2300      	moveq	r3, #0
    5ba6:	b2db      	uxtb	r3, r3
}
    5ba8:	4618      	mov	r0, r3
    5baa:	3710      	adds	r7, #16
    5bac:	46bd      	mov	sp, r7
    5bae:	bd80      	pop	{r7, pc}
    5bb0:	00005abd 	.word	0x00005abd

00005bb4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5bb4:	b580      	push	{r7, lr}
    5bb6:	b082      	sub	sp, #8
    5bb8:	af00      	add	r7, sp, #0
    5bba:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5bbc:	687b      	ldr	r3, [r7, #4]
    5bbe:	881b      	ldrh	r3, [r3, #0]
    5bc0:	b29b      	uxth	r3, r3
    5bc2:	f023 0302 	bic.w	r3, r3, #2
    5bc6:	b29a      	uxth	r2, r3
    5bc8:	687b      	ldr	r3, [r7, #4]
    5bca:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5bcc:	f248 0103 	movw	r1, #32771	; 0x8003
    5bd0:	6878      	ldr	r0, [r7, #4]
    5bd2:	4b03      	ldr	r3, [pc, #12]	; (5be0 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5bd4:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5bd6:	bf00      	nop
    5bd8:	3708      	adds	r7, #8
    5bda:	46bd      	mov	sp, r7
    5bdc:	bd80      	pop	{r7, pc}
    5bde:	bf00      	nop
    5be0:	00005abd 	.word	0x00005abd

00005be4 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5be4:	b580      	push	{r7, lr}
    5be6:	b082      	sub	sp, #8
    5be8:	af00      	add	r7, sp, #0
    5bea:	6078      	str	r0, [r7, #4]
    5bec:	460b      	mov	r3, r1
    5bee:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5bf0:	687b      	ldr	r3, [r7, #4]
    5bf2:	887a      	ldrh	r2, [r7, #2]
    5bf4:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5bf6:	f248 0103 	movw	r1, #32771	; 0x8003
    5bfa:	6878      	ldr	r0, [r7, #4]
    5bfc:	4b02      	ldr	r3, [pc, #8]	; (5c08 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5bfe:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5c00:	bf00      	nop
    5c02:	3708      	adds	r7, #8
    5c04:	46bd      	mov	sp, r7
    5c06:	bd80      	pop	{r7, pc}
    5c08:	00005abd 	.word	0x00005abd

00005c0c <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5c0c:	b480      	push	{r7}
    5c0e:	b083      	sub	sp, #12
    5c10:	af00      	add	r7, sp, #0
    5c12:	6078      	str	r0, [r7, #4]
    5c14:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5c16:	687b      	ldr	r3, [r7, #4]
    5c18:	683a      	ldr	r2, [r7, #0]
    5c1a:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5c1c:	bf00      	nop
    5c1e:	370c      	adds	r7, #12
    5c20:	46bd      	mov	sp, r7
    5c22:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c26:	4770      	bx	lr

00005c28 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5c28:	b580      	push	{r7, lr}
    5c2a:	b082      	sub	sp, #8
    5c2c:	af00      	add	r7, sp, #0
    5c2e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5c30:	687b      	ldr	r3, [r7, #4]
    5c32:	2b00      	cmp	r3, #0
    5c34:	d005      	beq.n	5c42 <_calendar_init+0x1a>
    5c36:	687b      	ldr	r3, [r7, #4]
    5c38:	681b      	ldr	r3, [r3, #0]
    5c3a:	2b00      	cmp	r3, #0
    5c3c:	d001      	beq.n	5c42 <_calendar_init+0x1a>
    5c3e:	2301      	movs	r3, #1
    5c40:	e000      	b.n	5c44 <_calendar_init+0x1c>
    5c42:	2300      	movs	r3, #0
    5c44:	f003 0301 	and.w	r3, r3, #1
    5c48:	b2db      	uxtb	r3, r3
    5c4a:	222f      	movs	r2, #47	; 0x2f
    5c4c:	491b      	ldr	r1, [pc, #108]	; (5cbc <_calendar_init+0x94>)
    5c4e:	4618      	mov	r0, r3
    5c50:	4b1b      	ldr	r3, [pc, #108]	; (5cc0 <_calendar_init+0x98>)
    5c52:	4798      	blx	r3

	_rtc_dev = dev;
    5c54:	4a1b      	ldr	r2, [pc, #108]	; (5cc4 <_calendar_init+0x9c>)
    5c56:	687b      	ldr	r3, [r7, #4]
    5c58:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    5c5a:	687b      	ldr	r3, [r7, #4]
    5c5c:	681b      	ldr	r3, [r3, #0]
    5c5e:	4618      	mov	r0, r3
    5c60:	4b19      	ldr	r3, [pc, #100]	; (5cc8 <_calendar_init+0xa0>)
    5c62:	4798      	blx	r3
    5c64:	4603      	mov	r3, r0
    5c66:	2b00      	cmp	r3, #0
    5c68:	d00a      	beq.n	5c80 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5c6a:	687b      	ldr	r3, [r7, #4]
    5c6c:	681b      	ldr	r3, [r3, #0]
    5c6e:	4618      	mov	r0, r3
    5c70:	4b16      	ldr	r3, [pc, #88]	; (5ccc <_calendar_init+0xa4>)
    5c72:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    5c74:	687b      	ldr	r3, [r7, #4]
    5c76:	681b      	ldr	r3, [r3, #0]
    5c78:	2102      	movs	r1, #2
    5c7a:	4618      	mov	r0, r3
    5c7c:	4b14      	ldr	r3, [pc, #80]	; (5cd0 <_calendar_init+0xa8>)
    5c7e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5c80:	687b      	ldr	r3, [r7, #4]
    5c82:	681b      	ldr	r3, [r3, #0]
    5c84:	4618      	mov	r0, r3
    5c86:	4b13      	ldr	r3, [pc, #76]	; (5cd4 <_calendar_init+0xac>)
    5c88:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5c8a:	687b      	ldr	r3, [r7, #4]
    5c8c:	681b      	ldr	r3, [r3, #0]
    5c8e:	2101      	movs	r1, #1
    5c90:	4618      	mov	r0, r3
    5c92:	4b0f      	ldr	r3, [pc, #60]	; (5cd0 <_calendar_init+0xa8>)
    5c94:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    5c96:	687b      	ldr	r3, [r7, #4]
    5c98:	681b      	ldr	r3, [r3, #0]
    5c9a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    5c9e:	4618      	mov	r0, r3
    5ca0:	4b0d      	ldr	r3, [pc, #52]	; (5cd8 <_calendar_init+0xb0>)
    5ca2:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    5ca4:	687b      	ldr	r3, [r7, #4]
    5ca6:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5ca8:	2100      	movs	r1, #0
    5caa:	4618      	mov	r0, r3
    5cac:	4b0b      	ldr	r3, [pc, #44]	; (5cdc <_calendar_init+0xb4>)
    5cae:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5cb0:	2300      	movs	r3, #0
}
    5cb2:	4618      	mov	r0, r3
    5cb4:	3708      	adds	r7, #8
    5cb6:	46bd      	mov	sp, r7
    5cb8:	bd80      	pop	{r7, pc}
    5cba:	bf00      	nop
    5cbc:	0000f554 	.word	0x0000f554
    5cc0:	0000389d 	.word	0x0000389d
    5cc4:	20000984 	.word	0x20000984
    5cc8:	00005b79 	.word	0x00005b79
    5ccc:	00005bb5 	.word	0x00005bb5
    5cd0:	00005abd 	.word	0x00005abd
    5cd4:	00005b4d 	.word	0x00005b4d
    5cd8:	00005be5 	.word	0x00005be5
    5cdc:	00005c0d 	.word	0x00005c0d

00005ce0 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5ce0:	b580      	push	{r7, lr}
    5ce2:	b084      	sub	sp, #16
    5ce4:	af00      	add	r7, sp, #0
    5ce6:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5ce8:	687b      	ldr	r3, [r7, #4]
    5cea:	681b      	ldr	r3, [r3, #0]
    5cec:	4618      	mov	r0, r3
    5cee:	4b19      	ldr	r3, [pc, #100]	; (5d54 <_rtc_interrupt_handler+0x74>)
    5cf0:	4798      	blx	r3
    5cf2:	4603      	mov	r3, r0
    5cf4:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5cf6:	687b      	ldr	r3, [r7, #4]
    5cf8:	681b      	ldr	r3, [r3, #0]
    5cfa:	4618      	mov	r0, r3
    5cfc:	4b16      	ldr	r3, [pc, #88]	; (5d58 <_rtc_interrupt_handler+0x78>)
    5cfe:	4798      	blx	r3
    5d00:	4603      	mov	r3, r0
    5d02:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5d04:	89fa      	ldrh	r2, [r7, #14]
    5d06:	89bb      	ldrh	r3, [r7, #12]
    5d08:	4013      	ands	r3, r2
    5d0a:	b29b      	uxth	r3, r3
    5d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5d10:	2b00      	cmp	r3, #0
    5d12:	d009      	beq.n	5d28 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5d14:	687b      	ldr	r3, [r7, #4]
    5d16:	685b      	ldr	r3, [r3, #4]
    5d18:	6878      	ldr	r0, [r7, #4]
    5d1a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    5d1c:	687b      	ldr	r3, [r7, #4]
    5d1e:	681b      	ldr	r3, [r3, #0]
    5d20:	4618      	mov	r0, r3
    5d22:	4b0e      	ldr	r3, [pc, #56]	; (5d5c <_rtc_interrupt_handler+0x7c>)
    5d24:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    5d26:	e010      	b.n	5d4a <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5d28:	89fa      	ldrh	r2, [r7, #14]
    5d2a:	89bb      	ldrh	r3, [r7, #12]
    5d2c:	4013      	ands	r3, r2
    5d2e:	b29b      	uxth	r3, r3
    5d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5d34:	2b00      	cmp	r3, #0
    5d36:	d008      	beq.n	5d4a <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5d38:	687b      	ldr	r3, [r7, #4]
    5d3a:	689b      	ldr	r3, [r3, #8]
    5d3c:	6878      	ldr	r0, [r7, #4]
    5d3e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5d40:	687b      	ldr	r3, [r7, #4]
    5d42:	681b      	ldr	r3, [r3, #0]
    5d44:	4618      	mov	r0, r3
    5d46:	4b06      	ldr	r3, [pc, #24]	; (5d60 <_rtc_interrupt_handler+0x80>)
    5d48:	4798      	blx	r3
}
    5d4a:	bf00      	nop
    5d4c:	3710      	adds	r7, #16
    5d4e:	46bd      	mov	sp, r7
    5d50:	bd80      	pop	{r7, pc}
    5d52:	bf00      	nop
    5d54:	00005b19 	.word	0x00005b19
    5d58:	00005b33 	.word	0x00005b33
    5d5c:	00005ae1 	.word	0x00005ae1
    5d60:	00005afd 	.word	0x00005afd

00005d64 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5d64:	b580      	push	{r7, lr}
    5d66:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5d68:	4b03      	ldr	r3, [pc, #12]	; (5d78 <RTC_Handler+0x14>)
    5d6a:	681b      	ldr	r3, [r3, #0]
    5d6c:	4618      	mov	r0, r3
    5d6e:	4b03      	ldr	r3, [pc, #12]	; (5d7c <RTC_Handler+0x18>)
    5d70:	4798      	blx	r3
}
    5d72:	bf00      	nop
    5d74:	bd80      	pop	{r7, pc}
    5d76:	bf00      	nop
    5d78:	20000984 	.word	0x20000984
    5d7c:	00005ce1 	.word	0x00005ce1

00005d80 <__NVIC_EnableIRQ>:
{
    5d80:	b480      	push	{r7}
    5d82:	b083      	sub	sp, #12
    5d84:	af00      	add	r7, sp, #0
    5d86:	4603      	mov	r3, r0
    5d88:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5d8e:	2b00      	cmp	r3, #0
    5d90:	db0b      	blt.n	5daa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d92:	4909      	ldr	r1, [pc, #36]	; (5db8 <__NVIC_EnableIRQ+0x38>)
    5d94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5d98:	095b      	lsrs	r3, r3, #5
    5d9a:	88fa      	ldrh	r2, [r7, #6]
    5d9c:	f002 021f 	and.w	r2, r2, #31
    5da0:	2001      	movs	r0, #1
    5da2:	fa00 f202 	lsl.w	r2, r0, r2
    5da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5daa:	bf00      	nop
    5dac:	370c      	adds	r7, #12
    5dae:	46bd      	mov	sp, r7
    5db0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5db4:	4770      	bx	lr
    5db6:	bf00      	nop
    5db8:	e000e100 	.word	0xe000e100

00005dbc <__NVIC_DisableIRQ>:
{
    5dbc:	b480      	push	{r7}
    5dbe:	b083      	sub	sp, #12
    5dc0:	af00      	add	r7, sp, #0
    5dc2:	4603      	mov	r3, r0
    5dc4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5dca:	2b00      	cmp	r3, #0
    5dcc:	db10      	blt.n	5df0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5dce:	490b      	ldr	r1, [pc, #44]	; (5dfc <__NVIC_DisableIRQ+0x40>)
    5dd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5dd4:	095b      	lsrs	r3, r3, #5
    5dd6:	88fa      	ldrh	r2, [r7, #6]
    5dd8:	f002 021f 	and.w	r2, r2, #31
    5ddc:	2001      	movs	r0, #1
    5dde:	fa00 f202 	lsl.w	r2, r0, r2
    5de2:	3320      	adds	r3, #32
    5de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5de8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5dec:	f3bf 8f6f 	isb	sy
}
    5df0:	bf00      	nop
    5df2:	370c      	adds	r7, #12
    5df4:	46bd      	mov	sp, r7
    5df6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dfa:	4770      	bx	lr
    5dfc:	e000e100 	.word	0xe000e100

00005e00 <__NVIC_ClearPendingIRQ>:
{
    5e00:	b480      	push	{r7}
    5e02:	b083      	sub	sp, #12
    5e04:	af00      	add	r7, sp, #0
    5e06:	4603      	mov	r3, r0
    5e08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5e0e:	2b00      	cmp	r3, #0
    5e10:	db0c      	blt.n	5e2c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5e12:	4909      	ldr	r1, [pc, #36]	; (5e38 <__NVIC_ClearPendingIRQ+0x38>)
    5e14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5e18:	095b      	lsrs	r3, r3, #5
    5e1a:	88fa      	ldrh	r2, [r7, #6]
    5e1c:	f002 021f 	and.w	r2, r2, #31
    5e20:	2001      	movs	r0, #1
    5e22:	fa00 f202 	lsl.w	r2, r0, r2
    5e26:	3360      	adds	r3, #96	; 0x60
    5e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5e2c:	bf00      	nop
    5e2e:	370c      	adds	r7, #12
    5e30:	46bd      	mov	sp, r7
    5e32:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e36:	4770      	bx	lr
    5e38:	e000e100 	.word	0xe000e100

00005e3c <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5e3c:	b480      	push	{r7}
    5e3e:	b083      	sub	sp, #12
    5e40:	af00      	add	r7, sp, #0
    5e42:	6078      	str	r0, [r7, #4]
    5e44:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5e46:	bf00      	nop
    5e48:	687b      	ldr	r3, [r7, #4]
    5e4a:	69da      	ldr	r2, [r3, #28]
    5e4c:	683b      	ldr	r3, [r7, #0]
    5e4e:	4013      	ands	r3, r2
    5e50:	2b00      	cmp	r3, #0
    5e52:	d1f9      	bne.n	5e48 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5e54:	bf00      	nop
    5e56:	370c      	adds	r7, #12
    5e58:	46bd      	mov	sp, r7
    5e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e5e:	4770      	bx	lr

00005e60 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5e60:	b480      	push	{r7}
    5e62:	b083      	sub	sp, #12
    5e64:	af00      	add	r7, sp, #0
    5e66:	6078      	str	r0, [r7, #4]
    5e68:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    5e6a:	687b      	ldr	r3, [r7, #4]
    5e6c:	69da      	ldr	r2, [r3, #28]
    5e6e:	683b      	ldr	r3, [r7, #0]
    5e70:	4013      	ands	r3, r2
    5e72:	2b00      	cmp	r3, #0
    5e74:	bf14      	ite	ne
    5e76:	2301      	movne	r3, #1
    5e78:	2300      	moveq	r3, #0
    5e7a:	b2db      	uxtb	r3, r3
}
    5e7c:	4618      	mov	r0, r3
    5e7e:	370c      	adds	r7, #12
    5e80:	46bd      	mov	sp, r7
    5e82:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e86:	4770      	bx	lr

00005e88 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5e88:	b480      	push	{r7}
    5e8a:	b083      	sub	sp, #12
    5e8c:	af00      	add	r7, sp, #0
    5e8e:	6078      	str	r0, [r7, #4]
    5e90:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5e92:	bf00      	nop
    5e94:	687b      	ldr	r3, [r7, #4]
    5e96:	69da      	ldr	r2, [r3, #28]
    5e98:	683b      	ldr	r3, [r7, #0]
    5e9a:	4013      	ands	r3, r2
    5e9c:	2b00      	cmp	r3, #0
    5e9e:	d1f9      	bne.n	5e94 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5ea0:	bf00      	nop
    5ea2:	370c      	adds	r7, #12
    5ea4:	46bd      	mov	sp, r7
    5ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eaa:	4770      	bx	lr

00005eac <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5eac:	b480      	push	{r7}
    5eae:	b083      	sub	sp, #12
    5eb0:	af00      	add	r7, sp, #0
    5eb2:	6078      	str	r0, [r7, #4]
    5eb4:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5eb6:	687b      	ldr	r3, [r7, #4]
    5eb8:	69da      	ldr	r2, [r3, #28]
    5eba:	683b      	ldr	r3, [r7, #0]
    5ebc:	4013      	ands	r3, r2
    5ebe:	2b00      	cmp	r3, #0
    5ec0:	bf14      	ite	ne
    5ec2:	2301      	movne	r3, #1
    5ec4:	2300      	moveq	r3, #0
    5ec6:	b2db      	uxtb	r3, r3
}
    5ec8:	4618      	mov	r0, r3
    5eca:	370c      	adds	r7, #12
    5ecc:	46bd      	mov	sp, r7
    5ece:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ed2:	4770      	bx	lr

00005ed4 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5ed4:	b480      	push	{r7}
    5ed6:	b083      	sub	sp, #12
    5ed8:	af00      	add	r7, sp, #0
    5eda:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5edc:	687b      	ldr	r3, [r7, #4]
    5ede:	2201      	movs	r2, #1
    5ee0:	761a      	strb	r2, [r3, #24]
}
    5ee2:	bf00      	nop
    5ee4:	370c      	adds	r7, #12
    5ee6:	46bd      	mov	sp, r7
    5ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eec:	4770      	bx	lr

00005eee <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5eee:	b480      	push	{r7}
    5ef0:	b083      	sub	sp, #12
    5ef2:	af00      	add	r7, sp, #0
    5ef4:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5ef6:	687b      	ldr	r3, [r7, #4]
    5ef8:	2202      	movs	r2, #2
    5efa:	761a      	strb	r2, [r3, #24]
}
    5efc:	bf00      	nop
    5efe:	370c      	adds	r7, #12
    5f00:	46bd      	mov	sp, r7
    5f02:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f06:	4770      	bx	lr

00005f08 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5f08:	b480      	push	{r7}
    5f0a:	b083      	sub	sp, #12
    5f0c:	af00      	add	r7, sp, #0
    5f0e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5f10:	687b      	ldr	r3, [r7, #4]
    5f12:	7e1b      	ldrb	r3, [r3, #24]
    5f14:	b2db      	uxtb	r3, r3
}
    5f16:	4618      	mov	r0, r3
    5f18:	370c      	adds	r7, #12
    5f1a:	46bd      	mov	sp, r7
    5f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f20:	4770      	bx	lr

00005f22 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    5f22:	b480      	push	{r7}
    5f24:	b083      	sub	sp, #12
    5f26:	af00      	add	r7, sp, #0
    5f28:	6078      	str	r0, [r7, #4]
    5f2a:	460b      	mov	r3, r1
    5f2c:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    5f2e:	687b      	ldr	r3, [r7, #4]
    5f30:	78fa      	ldrb	r2, [r7, #3]
    5f32:	761a      	strb	r2, [r3, #24]
}
    5f34:	bf00      	nop
    5f36:	370c      	adds	r7, #12
    5f38:	46bd      	mov	sp, r7
    5f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f3e:	4770      	bx	lr

00005f40 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    5f40:	b480      	push	{r7}
    5f42:	b085      	sub	sp, #20
    5f44:	af00      	add	r7, sp, #0
    5f46:	6078      	str	r0, [r7, #4]
    5f48:	460b      	mov	r3, r1
    5f4a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    5f4c:	687b      	ldr	r3, [r7, #4]
    5f4e:	7e1b      	ldrb	r3, [r3, #24]
    5f50:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5f52:	7bfa      	ldrb	r2, [r7, #15]
    5f54:	78fb      	ldrb	r3, [r7, #3]
    5f56:	4013      	ands	r3, r2
    5f58:	73fb      	strb	r3, [r7, #15]
	return tmp;
    5f5a:	7bfb      	ldrb	r3, [r7, #15]
}
    5f5c:	4618      	mov	r0, r3
    5f5e:	3714      	adds	r7, #20
    5f60:	46bd      	mov	sp, r7
    5f62:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f66:	4770      	bx	lr

00005f68 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    5f68:	b480      	push	{r7}
    5f6a:	b083      	sub	sp, #12
    5f6c:	af00      	add	r7, sp, #0
    5f6e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    5f70:	687b      	ldr	r3, [r7, #4]
    5f72:	7e1b      	ldrb	r3, [r3, #24]
    5f74:	b2db      	uxtb	r3, r3
}
    5f76:	4618      	mov	r0, r3
    5f78:	370c      	adds	r7, #12
    5f7a:	46bd      	mov	sp, r7
    5f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f80:	4770      	bx	lr

00005f82 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    5f82:	b480      	push	{r7}
    5f84:	b083      	sub	sp, #12
    5f86:	af00      	add	r7, sp, #0
    5f88:	6078      	str	r0, [r7, #4]
    5f8a:	460b      	mov	r3, r1
    5f8c:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    5f8e:	687b      	ldr	r3, [r7, #4]
    5f90:	78fa      	ldrb	r2, [r7, #3]
    5f92:	761a      	strb	r2, [r3, #24]
}
    5f94:	bf00      	nop
    5f96:	370c      	adds	r7, #12
    5f98:	46bd      	mov	sp, r7
    5f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f9e:	4770      	bx	lr

00005fa0 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5fa0:	b580      	push	{r7, lr}
    5fa2:	b082      	sub	sp, #8
    5fa4:	af00      	add	r7, sp, #0
    5fa6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    5fa8:	687b      	ldr	r3, [r7, #4]
    5faa:	681b      	ldr	r3, [r3, #0]
    5fac:	f043 0202 	orr.w	r2, r3, #2
    5fb0:	687b      	ldr	r3, [r7, #4]
    5fb2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5fb4:	2103      	movs	r1, #3
    5fb6:	6878      	ldr	r0, [r7, #4]
    5fb8:	4b02      	ldr	r3, [pc, #8]	; (5fc4 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    5fba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5fbc:	bf00      	nop
    5fbe:	3708      	adds	r7, #8
    5fc0:	46bd      	mov	sp, r7
    5fc2:	bd80      	pop	{r7, pc}
    5fc4:	00005e3d 	.word	0x00005e3d

00005fc8 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5fc8:	b580      	push	{r7, lr}
    5fca:	b082      	sub	sp, #8
    5fcc:	af00      	add	r7, sp, #0
    5fce:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5fd0:	687b      	ldr	r3, [r7, #4]
    5fd2:	681b      	ldr	r3, [r3, #0]
    5fd4:	f023 0202 	bic.w	r2, r3, #2
    5fd8:	687b      	ldr	r3, [r7, #4]
    5fda:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5fdc:	2103      	movs	r1, #3
    5fde:	6878      	ldr	r0, [r7, #4]
    5fe0:	4b02      	ldr	r3, [pc, #8]	; (5fec <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5fe2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5fe4:	bf00      	nop
    5fe6:	3708      	adds	r7, #8
    5fe8:	46bd      	mov	sp, r7
    5fea:	bd80      	pop	{r7, pc}
    5fec:	00005e3d 	.word	0x00005e3d

00005ff0 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5ff0:	b480      	push	{r7}
    5ff2:	b085      	sub	sp, #20
    5ff4:	af00      	add	r7, sp, #0
    5ff6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5ff8:	687b      	ldr	r3, [r7, #4]
    5ffa:	681b      	ldr	r3, [r3, #0]
    5ffc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    5ffe:	68fb      	ldr	r3, [r7, #12]
    6000:	0edb      	lsrs	r3, r3, #27
    6002:	f003 0301 	and.w	r3, r3, #1
    6006:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6008:	68fb      	ldr	r3, [r7, #12]
    600a:	2b00      	cmp	r3, #0
    600c:	bf14      	ite	ne
    600e:	2301      	movne	r3, #1
    6010:	2300      	moveq	r3, #0
    6012:	b2db      	uxtb	r3, r3
}
    6014:	4618      	mov	r0, r3
    6016:	3714      	adds	r7, #20
    6018:	46bd      	mov	sp, r7
    601a:	f85d 7b04 	ldr.w	r7, [sp], #4
    601e:	4770      	bx	lr

00006020 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    6020:	b580      	push	{r7, lr}
    6022:	b084      	sub	sp, #16
    6024:	af00      	add	r7, sp, #0
    6026:	6078      	str	r0, [r7, #4]
    6028:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    602a:	2103      	movs	r1, #3
    602c:	6878      	ldr	r0, [r7, #4]
    602e:	4b07      	ldr	r3, [pc, #28]	; (604c <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    6030:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6032:	687b      	ldr	r3, [r7, #4]
    6034:	681b      	ldr	r3, [r3, #0]
    6036:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6038:	68fa      	ldr	r2, [r7, #12]
    603a:	683b      	ldr	r3, [r7, #0]
    603c:	4013      	ands	r3, r2
    603e:	60fb      	str	r3, [r7, #12]
	return tmp;
    6040:	68fb      	ldr	r3, [r7, #12]
}
    6042:	4618      	mov	r0, r3
    6044:	3710      	adds	r7, #16
    6046:	46bd      	mov	sp, r7
    6048:	bd80      	pop	{r7, pc}
    604a:	bf00      	nop
    604c:	00005e3d 	.word	0x00005e3d

00006050 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    6050:	b580      	push	{r7, lr}
    6052:	b082      	sub	sp, #8
    6054:	af00      	add	r7, sp, #0
    6056:	6078      	str	r0, [r7, #4]
    6058:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    605a:	687b      	ldr	r3, [r7, #4]
    605c:	683a      	ldr	r2, [r7, #0]
    605e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6060:	2103      	movs	r1, #3
    6062:	6878      	ldr	r0, [r7, #4]
    6064:	4b02      	ldr	r3, [pc, #8]	; (6070 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    6066:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6068:	bf00      	nop
    606a:	3708      	adds	r7, #8
    606c:	46bd      	mov	sp, r7
    606e:	bd80      	pop	{r7, pc}
    6070:	00005e3d 	.word	0x00005e3d

00006074 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6074:	b580      	push	{r7, lr}
    6076:	b084      	sub	sp, #16
    6078:	af00      	add	r7, sp, #0
    607a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    607c:	2103      	movs	r1, #3
    607e:	6878      	ldr	r0, [r7, #4]
    6080:	4b09      	ldr	r3, [pc, #36]	; (60a8 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    6082:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6084:	687b      	ldr	r3, [r7, #4]
    6086:	681b      	ldr	r3, [r3, #0]
    6088:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    608a:	68fb      	ldr	r3, [r7, #12]
    608c:	085b      	lsrs	r3, r3, #1
    608e:	f003 0301 	and.w	r3, r3, #1
    6092:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6094:	68fb      	ldr	r3, [r7, #12]
    6096:	2b00      	cmp	r3, #0
    6098:	bf14      	ite	ne
    609a:	2301      	movne	r3, #1
    609c:	2300      	moveq	r3, #0
    609e:	b2db      	uxtb	r3, r3
}
    60a0:	4618      	mov	r0, r3
    60a2:	3710      	adds	r7, #16
    60a4:	46bd      	mov	sp, r7
    60a6:	bd80      	pop	{r7, pc}
    60a8:	00005e89 	.word	0x00005e89

000060ac <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    60ac:	b580      	push	{r7, lr}
    60ae:	b082      	sub	sp, #8
    60b0:	af00      	add	r7, sp, #0
    60b2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    60b4:	687b      	ldr	r3, [r7, #4]
    60b6:	681b      	ldr	r3, [r3, #0]
    60b8:	f023 0202 	bic.w	r2, r3, #2
    60bc:	687b      	ldr	r3, [r7, #4]
    60be:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    60c0:	2103      	movs	r1, #3
    60c2:	6878      	ldr	r0, [r7, #4]
    60c4:	4b02      	ldr	r3, [pc, #8]	; (60d0 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    60c6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    60c8:	bf00      	nop
    60ca:	3708      	adds	r7, #8
    60cc:	46bd      	mov	sp, r7
    60ce:	bd80      	pop	{r7, pc}
    60d0:	00005e89 	.word	0x00005e89

000060d4 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    60d4:	b580      	push	{r7, lr}
    60d6:	b084      	sub	sp, #16
    60d8:	af00      	add	r7, sp, #0
    60da:	6078      	str	r0, [r7, #4]
    60dc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    60de:	2103      	movs	r1, #3
    60e0:	6878      	ldr	r0, [r7, #4]
    60e2:	4b07      	ldr	r3, [pc, #28]	; (6100 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    60e4:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    60e6:	687b      	ldr	r3, [r7, #4]
    60e8:	681b      	ldr	r3, [r3, #0]
    60ea:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    60ec:	68fa      	ldr	r2, [r7, #12]
    60ee:	683b      	ldr	r3, [r7, #0]
    60f0:	4013      	ands	r3, r2
    60f2:	60fb      	str	r3, [r7, #12]
	return tmp;
    60f4:	68fb      	ldr	r3, [r7, #12]
}
    60f6:	4618      	mov	r0, r3
    60f8:	3710      	adds	r7, #16
    60fa:	46bd      	mov	sp, r7
    60fc:	bd80      	pop	{r7, pc}
    60fe:	bf00      	nop
    6100:	00005e89 	.word	0x00005e89

00006104 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    6104:	b580      	push	{r7, lr}
    6106:	b082      	sub	sp, #8
    6108:	af00      	add	r7, sp, #0
    610a:	6078      	str	r0, [r7, #4]
    610c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    610e:	687b      	ldr	r3, [r7, #4]
    6110:	683a      	ldr	r2, [r7, #0]
    6112:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6114:	2103      	movs	r1, #3
    6116:	6878      	ldr	r0, [r7, #4]
    6118:	4b02      	ldr	r3, [pc, #8]	; (6124 <hri_sercomspi_write_CTRLA_reg+0x20>)
    611a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    611c:	bf00      	nop
    611e:	3708      	adds	r7, #8
    6120:	46bd      	mov	sp, r7
    6122:	bd80      	pop	{r7, pc}
    6124:	00005e89 	.word	0x00005e89

00006128 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    6128:	b580      	push	{r7, lr}
    612a:	b082      	sub	sp, #8
    612c:	af00      	add	r7, sp, #0
    612e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    6130:	687b      	ldr	r3, [r7, #4]
    6132:	685b      	ldr	r3, [r3, #4]
    6134:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6138:	687b      	ldr	r3, [r7, #4]
    613a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    613c:	2104      	movs	r1, #4
    613e:	6878      	ldr	r0, [r7, #4]
    6140:	4b02      	ldr	r3, [pc, #8]	; (614c <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    6142:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6144:	bf00      	nop
    6146:	3708      	adds	r7, #8
    6148:	46bd      	mov	sp, r7
    614a:	bd80      	pop	{r7, pc}
    614c:	00005e3d 	.word	0x00005e3d

00006150 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    6150:	b580      	push	{r7, lr}
    6152:	b082      	sub	sp, #8
    6154:	af00      	add	r7, sp, #0
    6156:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6158:	687b      	ldr	r3, [r7, #4]
    615a:	685b      	ldr	r3, [r3, #4]
    615c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    6160:	687b      	ldr	r3, [r7, #4]
    6162:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6164:	2104      	movs	r1, #4
    6166:	6878      	ldr	r0, [r7, #4]
    6168:	4b02      	ldr	r3, [pc, #8]	; (6174 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    616a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    616c:	bf00      	nop
    616e:	3708      	adds	r7, #8
    6170:	46bd      	mov	sp, r7
    6172:	bd80      	pop	{r7, pc}
    6174:	00005e3d 	.word	0x00005e3d

00006178 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    6178:	b580      	push	{r7, lr}
    617a:	b082      	sub	sp, #8
    617c:	af00      	add	r7, sp, #0
    617e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6180:	687b      	ldr	r3, [r7, #4]
    6182:	685b      	ldr	r3, [r3, #4]
    6184:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    6188:	687b      	ldr	r3, [r7, #4]
    618a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    618c:	2104      	movs	r1, #4
    618e:	6878      	ldr	r0, [r7, #4]
    6190:	4b02      	ldr	r3, [pc, #8]	; (619c <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    6192:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6194:	bf00      	nop
    6196:	3708      	adds	r7, #8
    6198:	46bd      	mov	sp, r7
    619a:	bd80      	pop	{r7, pc}
    619c:	00005e3d 	.word	0x00005e3d

000061a0 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    61a0:	b580      	push	{r7, lr}
    61a2:	b082      	sub	sp, #8
    61a4:	af00      	add	r7, sp, #0
    61a6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    61a8:	687b      	ldr	r3, [r7, #4]
    61aa:	685b      	ldr	r3, [r3, #4]
    61ac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    61b0:	687b      	ldr	r3, [r7, #4]
    61b2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    61b4:	2104      	movs	r1, #4
    61b6:	6878      	ldr	r0, [r7, #4]
    61b8:	4b02      	ldr	r3, [pc, #8]	; (61c4 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    61ba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61bc:	bf00      	nop
    61be:	3708      	adds	r7, #8
    61c0:	46bd      	mov	sp, r7
    61c2:	bd80      	pop	{r7, pc}
    61c4:	00005e3d 	.word	0x00005e3d

000061c8 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    61c8:	b580      	push	{r7, lr}
    61ca:	b082      	sub	sp, #8
    61cc:	af00      	add	r7, sp, #0
    61ce:	6078      	str	r0, [r7, #4]
    61d0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    61d2:	687b      	ldr	r3, [r7, #4]
    61d4:	685a      	ldr	r2, [r3, #4]
    61d6:	683b      	ldr	r3, [r7, #0]
    61d8:	041b      	lsls	r3, r3, #16
    61da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    61de:	431a      	orrs	r2, r3
    61e0:	687b      	ldr	r3, [r7, #4]
    61e2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    61e4:	2104      	movs	r1, #4
    61e6:	6878      	ldr	r0, [r7, #4]
    61e8:	4b02      	ldr	r3, [pc, #8]	; (61f4 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    61ea:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61ec:	bf00      	nop
    61ee:	3708      	adds	r7, #8
    61f0:	46bd      	mov	sp, r7
    61f2:	bd80      	pop	{r7, pc}
    61f4:	00005e3d 	.word	0x00005e3d

000061f8 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    61f8:	b580      	push	{r7, lr}
    61fa:	b082      	sub	sp, #8
    61fc:	af00      	add	r7, sp, #0
    61fe:	6078      	str	r0, [r7, #4]
    6200:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    6202:	687b      	ldr	r3, [r7, #4]
    6204:	683a      	ldr	r2, [r7, #0]
    6206:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6208:	2104      	movs	r1, #4
    620a:	6878      	ldr	r0, [r7, #4]
    620c:	4b02      	ldr	r3, [pc, #8]	; (6218 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    620e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6210:	bf00      	nop
    6212:	3708      	adds	r7, #8
    6214:	46bd      	mov	sp, r7
    6216:	bd80      	pop	{r7, pc}
    6218:	00005e3d 	.word	0x00005e3d

0000621c <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    621c:	b580      	push	{r7, lr}
    621e:	b082      	sub	sp, #8
    6220:	af00      	add	r7, sp, #0
    6222:	6078      	str	r0, [r7, #4]
    6224:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    6226:	687b      	ldr	r3, [r7, #4]
    6228:	683a      	ldr	r2, [r7, #0]
    622a:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    622c:	2117      	movs	r1, #23
    622e:	6878      	ldr	r0, [r7, #4]
    6230:	4b02      	ldr	r3, [pc, #8]	; (623c <hri_sercomspi_write_CTRLB_reg+0x20>)
    6232:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6234:	bf00      	nop
    6236:	3708      	adds	r7, #8
    6238:	46bd      	mov	sp, r7
    623a:	bd80      	pop	{r7, pc}
    623c:	00005e89 	.word	0x00005e89

00006240 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    6240:	b480      	push	{r7}
    6242:	b083      	sub	sp, #12
    6244:	af00      	add	r7, sp, #0
    6246:	6078      	str	r0, [r7, #4]
    6248:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    624a:	687b      	ldr	r3, [r7, #4]
    624c:	683a      	ldr	r2, [r7, #0]
    624e:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6250:	bf00      	nop
    6252:	370c      	adds	r7, #12
    6254:	46bd      	mov	sp, r7
    6256:	f85d 7b04 	ldr.w	r7, [sp], #4
    625a:	4770      	bx	lr

0000625c <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    625c:	b480      	push	{r7}
    625e:	b083      	sub	sp, #12
    6260:	af00      	add	r7, sp, #0
    6262:	6078      	str	r0, [r7, #4]
    6264:	460b      	mov	r3, r1
    6266:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6268:	687b      	ldr	r3, [r7, #4]
    626a:	78fa      	ldrb	r2, [r7, #3]
    626c:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    626e:	bf00      	nop
    6270:	370c      	adds	r7, #12
    6272:	46bd      	mov	sp, r7
    6274:	f85d 7b04 	ldr.w	r7, [sp], #4
    6278:	4770      	bx	lr
	...

0000627c <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    627c:	b580      	push	{r7, lr}
    627e:	b084      	sub	sp, #16
    6280:	af00      	add	r7, sp, #0
    6282:	6078      	str	r0, [r7, #4]
    6284:	460b      	mov	r3, r1
    6286:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6288:	687b      	ldr	r3, [r7, #4]
    628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    628c:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    628e:	68fb      	ldr	r3, [r7, #12]
    6290:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    6294:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    6296:	78fb      	ldrb	r3, [r7, #3]
    6298:	039b      	lsls	r3, r3, #14
    629a:	461a      	mov	r2, r3
    629c:	68fb      	ldr	r3, [r7, #12]
    629e:	4313      	orrs	r3, r2
    62a0:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    62a2:	687b      	ldr	r3, [r7, #4]
    62a4:	68fa      	ldr	r2, [r7, #12]
    62a6:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    62a8:	2104      	movs	r1, #4
    62aa:	6878      	ldr	r0, [r7, #4]
    62ac:	4b02      	ldr	r3, [pc, #8]	; (62b8 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    62ae:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62b0:	bf00      	nop
    62b2:	3710      	adds	r7, #16
    62b4:	46bd      	mov	sp, r7
    62b6:	bd80      	pop	{r7, pc}
    62b8:	00005e3d 	.word	0x00005e3d

000062bc <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    62bc:	b580      	push	{r7, lr}
    62be:	b082      	sub	sp, #8
    62c0:	af00      	add	r7, sp, #0
    62c2:	6078      	str	r0, [r7, #4]
    62c4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    62c6:	687b      	ldr	r3, [r7, #4]
    62c8:	683a      	ldr	r2, [r7, #0]
    62ca:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    62cc:	2104      	movs	r1, #4
    62ce:	6878      	ldr	r0, [r7, #4]
    62d0:	4b02      	ldr	r3, [pc, #8]	; (62dc <hri_sercomi2cm_write_ADDR_reg+0x20>)
    62d2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62d4:	bf00      	nop
    62d6:	3708      	adds	r7, #8
    62d8:	46bd      	mov	sp, r7
    62da:	bd80      	pop	{r7, pc}
    62dc:	00005e3d 	.word	0x00005e3d

000062e0 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    62e0:	b580      	push	{r7, lr}
    62e2:	b082      	sub	sp, #8
    62e4:	af00      	add	r7, sp, #0
    62e6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    62e8:	2104      	movs	r1, #4
    62ea:	6878      	ldr	r0, [r7, #4]
    62ec:	4b03      	ldr	r3, [pc, #12]	; (62fc <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    62ee:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    62f0:	687b      	ldr	r3, [r7, #4]
    62f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    62f4:	4618      	mov	r0, r3
    62f6:	3708      	adds	r7, #8
    62f8:	46bd      	mov	sp, r7
    62fa:	bd80      	pop	{r7, pc}
    62fc:	00005e3d 	.word	0x00005e3d

00006300 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    6300:	b480      	push	{r7}
    6302:	b083      	sub	sp, #12
    6304:	af00      	add	r7, sp, #0
    6306:	6078      	str	r0, [r7, #4]
    6308:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    630a:	687b      	ldr	r3, [r7, #4]
    630c:	683a      	ldr	r2, [r7, #0]
    630e:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6310:	bf00      	nop
    6312:	370c      	adds	r7, #12
    6314:	46bd      	mov	sp, r7
    6316:	f85d 7b04 	ldr.w	r7, [sp], #4
    631a:	4770      	bx	lr

0000631c <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    631c:	b580      	push	{r7, lr}
    631e:	b082      	sub	sp, #8
    6320:	af00      	add	r7, sp, #0
    6322:	6078      	str	r0, [r7, #4]
    6324:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6326:	687b      	ldr	r3, [r7, #4]
    6328:	683a      	ldr	r2, [r7, #0]
    632a:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    632c:	2104      	movs	r1, #4
    632e:	6878      	ldr	r0, [r7, #4]
    6330:	4b02      	ldr	r3, [pc, #8]	; (633c <hri_sercomi2cm_write_DATA_reg+0x20>)
    6332:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6334:	bf00      	nop
    6336:	3708      	adds	r7, #8
    6338:	46bd      	mov	sp, r7
    633a:	bd80      	pop	{r7, pc}
    633c:	00005e3d 	.word	0x00005e3d

00006340 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6340:	b580      	push	{r7, lr}
    6342:	b082      	sub	sp, #8
    6344:	af00      	add	r7, sp, #0
    6346:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6348:	2104      	movs	r1, #4
    634a:	6878      	ldr	r0, [r7, #4]
    634c:	4b03      	ldr	r3, [pc, #12]	; (635c <hri_sercomi2cm_read_DATA_reg+0x1c>)
    634e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6350:	687b      	ldr	r3, [r7, #4]
    6352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6354:	4618      	mov	r0, r3
    6356:	3708      	adds	r7, #8
    6358:	46bd      	mov	sp, r7
    635a:	bd80      	pop	{r7, pc}
    635c:	00005e3d 	.word	0x00005e3d

00006360 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6360:	b480      	push	{r7}
    6362:	b083      	sub	sp, #12
    6364:	af00      	add	r7, sp, #0
    6366:	6078      	str	r0, [r7, #4]
    6368:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    636a:	687b      	ldr	r3, [r7, #4]
    636c:	683a      	ldr	r2, [r7, #0]
    636e:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6370:	bf00      	nop
    6372:	370c      	adds	r7, #12
    6374:	46bd      	mov	sp, r7
    6376:	f85d 7b04 	ldr.w	r7, [sp], #4
    637a:	4770      	bx	lr

0000637c <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    637c:	b480      	push	{r7}
    637e:	b083      	sub	sp, #12
    6380:	af00      	add	r7, sp, #0
    6382:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    6384:	687b      	ldr	r3, [r7, #4]
    6386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6388:	4618      	mov	r0, r3
    638a:	370c      	adds	r7, #12
    638c:	46bd      	mov	sp, r7
    638e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6392:	4770      	bx	lr

00006394 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    6394:	b480      	push	{r7}
    6396:	b083      	sub	sp, #12
    6398:	af00      	add	r7, sp, #0
    639a:	6078      	str	r0, [r7, #4]
    639c:	460b      	mov	r3, r1
    639e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    63a0:	687b      	ldr	r3, [r7, #4]
    63a2:	78fa      	ldrb	r2, [r7, #3]
    63a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    63a8:	bf00      	nop
    63aa:	370c      	adds	r7, #12
    63ac:	46bd      	mov	sp, r7
    63ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    63b2:	4770      	bx	lr

000063b4 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    63b4:	b480      	push	{r7}
    63b6:	b083      	sub	sp, #12
    63b8:	af00      	add	r7, sp, #0
    63ba:	6078      	str	r0, [r7, #4]
    63bc:	460b      	mov	r3, r1
    63be:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    63c0:	687b      	ldr	r3, [r7, #4]
    63c2:	887a      	ldrh	r2, [r7, #2]
    63c4:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    63c6:	bf00      	nop
    63c8:	370c      	adds	r7, #12
    63ca:	46bd      	mov	sp, r7
    63cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    63d0:	4770      	bx	lr
	...

000063d4 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    63d4:	b580      	push	{r7, lr}
    63d6:	b082      	sub	sp, #8
    63d8:	af00      	add	r7, sp, #0
    63da:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    63dc:	2104      	movs	r1, #4
    63de:	6878      	ldr	r0, [r7, #4]
    63e0:	4b06      	ldr	r3, [pc, #24]	; (63fc <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    63e2:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    63e4:	687b      	ldr	r3, [r7, #4]
    63e6:	8b5b      	ldrh	r3, [r3, #26]
    63e8:	b29b      	uxth	r3, r3
    63ea:	091b      	lsrs	r3, r3, #4
    63ec:	b29b      	uxth	r3, r3
    63ee:	f003 0303 	and.w	r3, r3, #3
    63f2:	b29b      	uxth	r3, r3
}
    63f4:	4618      	mov	r0, r3
    63f6:	3708      	adds	r7, #8
    63f8:	46bd      	mov	sp, r7
    63fa:	bd80      	pop	{r7, pc}
    63fc:	00005e3d 	.word	0x00005e3d

00006400 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6400:	b580      	push	{r7, lr}
    6402:	b082      	sub	sp, #8
    6404:	af00      	add	r7, sp, #0
    6406:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6408:	2104      	movs	r1, #4
    640a:	6878      	ldr	r0, [r7, #4]
    640c:	4b04      	ldr	r3, [pc, #16]	; (6420 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    640e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6410:	687b      	ldr	r3, [r7, #4]
    6412:	8b5b      	ldrh	r3, [r3, #26]
    6414:	b29b      	uxth	r3, r3
}
    6416:	4618      	mov	r0, r3
    6418:	3708      	adds	r7, #8
    641a:	46bd      	mov	sp, r7
    641c:	bd80      	pop	{r7, pc}
    641e:	bf00      	nop
    6420:	00005e3d 	.word	0x00005e3d

00006424 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    6424:	b580      	push	{r7, lr}
    6426:	b082      	sub	sp, #8
    6428:	af00      	add	r7, sp, #0
    642a:	6078      	str	r0, [r7, #4]
    642c:	460b      	mov	r3, r1
    642e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    6430:	687b      	ldr	r3, [r7, #4]
    6432:	887a      	ldrh	r2, [r7, #2]
    6434:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6436:	2104      	movs	r1, #4
    6438:	6878      	ldr	r0, [r7, #4]
    643a:	4b03      	ldr	r3, [pc, #12]	; (6448 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    643c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    643e:	bf00      	nop
    6440:	3708      	adds	r7, #8
    6442:	46bd      	mov	sp, r7
    6444:	bd80      	pop	{r7, pc}
    6446:	bf00      	nop
    6448:	00005e3d 	.word	0x00005e3d

0000644c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    644c:	b4b0      	push	{r4, r5, r7}
    644e:	b08d      	sub	sp, #52	; 0x34
    6450:	af00      	add	r7, sp, #0
    6452:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6454:	4b13      	ldr	r3, [pc, #76]	; (64a4 <_sercom_get_hardware_index+0x58>)
    6456:	f107 040c 	add.w	r4, r7, #12
    645a:	461d      	mov	r5, r3
    645c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    645e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6460:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6464:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6468:	2300      	movs	r3, #0
    646a:	62fb      	str	r3, [r7, #44]	; 0x2c
    646c:	e010      	b.n	6490 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    646e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6470:	009b      	lsls	r3, r3, #2
    6472:	f107 0230 	add.w	r2, r7, #48	; 0x30
    6476:	4413      	add	r3, r2
    6478:	f853 3c24 	ldr.w	r3, [r3, #-36]
    647c:	461a      	mov	r2, r3
    647e:	687b      	ldr	r3, [r7, #4]
    6480:	429a      	cmp	r2, r3
    6482:	d102      	bne.n	648a <_sercom_get_hardware_index+0x3e>
			return i;
    6484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6486:	b2db      	uxtb	r3, r3
    6488:	e006      	b.n	6498 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    648a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    648c:	3301      	adds	r3, #1
    648e:	62fb      	str	r3, [r7, #44]	; 0x2c
    6490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6492:	2b07      	cmp	r3, #7
    6494:	d9eb      	bls.n	646e <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    6496:	2300      	movs	r3, #0
}
    6498:	4618      	mov	r0, r3
    649a:	3734      	adds	r7, #52	; 0x34
    649c:	46bd      	mov	sp, r7
    649e:	bcb0      	pop	{r4, r5, r7}
    64a0:	4770      	bx	lr
    64a2:	bf00      	nop
    64a4:	0000f588 	.word	0x0000f588

000064a8 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    64a8:	b480      	push	{r7}
    64aa:	b083      	sub	sp, #12
    64ac:	af00      	add	r7, sp, #0
    64ae:	6078      	str	r0, [r7, #4]
    64b0:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM7) {
    64b2:	687b      	ldr	r3, [r7, #4]
    64b4:	4a05      	ldr	r2, [pc, #20]	; (64cc <_sercom_init_irq_param+0x24>)
    64b6:	4293      	cmp	r3, r2
    64b8:	d102      	bne.n	64c0 <_sercom_init_irq_param+0x18>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    64ba:	4a05      	ldr	r2, [pc, #20]	; (64d0 <_sercom_init_irq_param+0x28>)
    64bc:	683b      	ldr	r3, [r7, #0]
    64be:	6013      	str	r3, [r2, #0]
	}
}
    64c0:	bf00      	nop
    64c2:	370c      	adds	r7, #12
    64c4:	46bd      	mov	sp, r7
    64c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    64ca:	4770      	bx	lr
    64cc:	43000c00 	.word	0x43000c00
    64d0:	200009a0 	.word	0x200009a0

000064d4 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    64d4:	b580      	push	{r7, lr}
    64d6:	b084      	sub	sp, #16
    64d8:	af00      	add	r7, sp, #0
    64da:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    64dc:	6878      	ldr	r0, [r7, #4]
    64de:	4b13      	ldr	r3, [pc, #76]	; (652c <_get_i2cm_index+0x58>)
    64e0:	4798      	blx	r3
    64e2:	4603      	mov	r3, r0
    64e4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    64e6:	2300      	movs	r3, #0
    64e8:	73fb      	strb	r3, [r7, #15]
    64ea:	e010      	b.n	650e <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    64ec:	7bfa      	ldrb	r2, [r7, #15]
    64ee:	4910      	ldr	r1, [pc, #64]	; (6530 <_get_i2cm_index+0x5c>)
    64f0:	4613      	mov	r3, r2
    64f2:	005b      	lsls	r3, r3, #1
    64f4:	4413      	add	r3, r2
    64f6:	00db      	lsls	r3, r3, #3
    64f8:	440b      	add	r3, r1
    64fa:	781b      	ldrb	r3, [r3, #0]
    64fc:	7bba      	ldrb	r2, [r7, #14]
    64fe:	429a      	cmp	r2, r3
    6500:	d102      	bne.n	6508 <_get_i2cm_index+0x34>
			return i;
    6502:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6506:	e00d      	b.n	6524 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6508:	7bfb      	ldrb	r3, [r7, #15]
    650a:	3301      	adds	r3, #1
    650c:	73fb      	strb	r3, [r7, #15]
    650e:	7bfb      	ldrb	r3, [r7, #15]
    6510:	2b02      	cmp	r3, #2
    6512:	d9eb      	bls.n	64ec <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6514:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    6518:	4906      	ldr	r1, [pc, #24]	; (6534 <_get_i2cm_index+0x60>)
    651a:	2000      	movs	r0, #0
    651c:	4b06      	ldr	r3, [pc, #24]	; (6538 <_get_i2cm_index+0x64>)
    651e:	4798      	blx	r3
	return -1;
    6520:	f04f 33ff 	mov.w	r3, #4294967295
}
    6524:	4618      	mov	r0, r3
    6526:	3710      	adds	r7, #16
    6528:	46bd      	mov	sp, r7
    652a:	bd80      	pop	{r7, pc}
    652c:	0000644d 	.word	0x0000644d
    6530:	20000018 	.word	0x20000018
    6534:	0000f56c 	.word	0x0000f56c
    6538:	0000389d 	.word	0x0000389d

0000653c <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    653c:	b580      	push	{r7, lr}
    653e:	b082      	sub	sp, #8
    6540:	af00      	add	r7, sp, #0
    6542:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    6544:	2103      	movs	r1, #3
    6546:	6878      	ldr	r0, [r7, #4]
    6548:	4b02      	ldr	r3, [pc, #8]	; (6554 <_sercom_i2c_send_stop+0x18>)
    654a:	4798      	blx	r3
}
    654c:	bf00      	nop
    654e:	3708      	adds	r7, #8
    6550:	46bd      	mov	sp, r7
    6552:	bd80      	pop	{r7, pc}
    6554:	000061c9 	.word	0x000061c9

00006558 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    6558:	b590      	push	{r4, r7, lr}
    655a:	b087      	sub	sp, #28
    655c:	af00      	add	r7, sp, #0
    655e:	60f8      	str	r0, [r7, #12]
    6560:	60b9      	str	r1, [r7, #8]
    6562:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6564:	68f8      	ldr	r0, [r7, #12]
    6566:	4b7d      	ldr	r3, [pc, #500]	; (675c <_sercom_i2c_sync_analyse_flags+0x204>)
    6568:	4798      	blx	r3
    656a:	4603      	mov	r3, r0
    656c:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    656e:	68f8      	ldr	r0, [r7, #12]
    6570:	4b7b      	ldr	r3, [pc, #492]	; (6760 <_sercom_i2c_sync_analyse_flags+0x208>)
    6572:	4798      	blx	r3
    6574:	4603      	mov	r3, r0
    6576:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    6578:	68bb      	ldr	r3, [r7, #8]
    657a:	f003 0301 	and.w	r3, r3, #1
    657e:	2b00      	cmp	r3, #0
    6580:	f000 8095 	beq.w	66ae <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6584:	8a7b      	ldrh	r3, [r7, #18]
    6586:	f003 0302 	and.w	r3, r3, #2
    658a:	2b00      	cmp	r3, #0
    658c:	d01d      	beq.n	65ca <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    658e:	68f8      	ldr	r0, [r7, #12]
    6590:	4b74      	ldr	r3, [pc, #464]	; (6764 <_sercom_i2c_sync_analyse_flags+0x20c>)
    6592:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6594:	687b      	ldr	r3, [r7, #4]
    6596:	885b      	ldrh	r3, [r3, #2]
    6598:	b29b      	uxth	r3, r3
    659a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    659e:	b29a      	uxth	r2, r3
    65a0:	687b      	ldr	r3, [r7, #4]
    65a2:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    65a4:	687b      	ldr	r3, [r7, #4]
    65a6:	885b      	ldrh	r3, [r3, #2]
    65a8:	b29b      	uxth	r3, r3
    65aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    65ae:	b29a      	uxth	r2, r3
    65b0:	687b      	ldr	r3, [r7, #4]
    65b2:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    65b4:	8a7b      	ldrh	r3, [r7, #18]
    65b6:	f003 0301 	and.w	r3, r3, #1
    65ba:	2b00      	cmp	r3, #0
    65bc:	d002      	beq.n	65c4 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    65be:	f06f 0304 	mvn.w	r3, #4
    65c2:	e0c6      	b.n	6752 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    65c4:	f06f 0303 	mvn.w	r3, #3
    65c8:	e0c3      	b.n	6752 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    65ca:	8a7b      	ldrh	r3, [r7, #18]
    65cc:	f003 0304 	and.w	r3, r3, #4
    65d0:	2b00      	cmp	r3, #0
    65d2:	d01f      	beq.n	6614 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    65d4:	687b      	ldr	r3, [r7, #4]
    65d6:	685b      	ldr	r3, [r3, #4]
    65d8:	2b00      	cmp	r3, #0
    65da:	dd07      	ble.n	65ec <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    65dc:	687b      	ldr	r3, [r7, #4]
    65de:	885b      	ldrh	r3, [r3, #2]
    65e0:	b29b      	uxth	r3, r3
    65e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    65e6:	b29a      	uxth	r2, r3
    65e8:	687b      	ldr	r3, [r7, #4]
    65ea:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    65ec:	687b      	ldr	r3, [r7, #4]
    65ee:	885b      	ldrh	r3, [r3, #2]
    65f0:	b29b      	uxth	r3, r3
    65f2:	b21b      	sxth	r3, r3
    65f4:	2b00      	cmp	r3, #0
    65f6:	da02      	bge.n	65fe <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    65f8:	68f8      	ldr	r0, [r7, #12]
    65fa:	4b5b      	ldr	r3, [pc, #364]	; (6768 <_sercom_i2c_sync_analyse_flags+0x210>)
    65fc:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    65fe:	687b      	ldr	r3, [r7, #4]
    6600:	885b      	ldrh	r3, [r3, #2]
    6602:	b29b      	uxth	r3, r3
    6604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6608:	b29a      	uxth	r2, r3
    660a:	687b      	ldr	r3, [r7, #4]
    660c:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    660e:	f06f 0301 	mvn.w	r3, #1
    6612:	e09e      	b.n	6752 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6614:	687b      	ldr	r3, [r7, #4]
    6616:	885b      	ldrh	r3, [r3, #2]
    6618:	b29b      	uxth	r3, r3
    661a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    661e:	2b00      	cmp	r3, #0
    6620:	d01c      	beq.n	665c <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6622:	687b      	ldr	r3, [r7, #4]
    6624:	881b      	ldrh	r3, [r3, #0]
    6626:	121b      	asrs	r3, r3, #8
    6628:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    662a:	f003 0406 	and.w	r4, r3, #6
    662e:	68f8      	ldr	r0, [r7, #12]
    6630:	4b4e      	ldr	r3, [pc, #312]	; (676c <_sercom_i2c_sync_analyse_flags+0x214>)
    6632:	4798      	blx	r3
    6634:	4603      	mov	r3, r0
    6636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    663a:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    663c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6640:	4619      	mov	r1, r3
    6642:	68f8      	ldr	r0, [r7, #12]
    6644:	4b4a      	ldr	r3, [pc, #296]	; (6770 <_sercom_i2c_sync_analyse_flags+0x218>)
    6646:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6648:	687b      	ldr	r3, [r7, #4]
    664a:	885b      	ldrh	r3, [r3, #2]
    664c:	b29b      	uxth	r3, r3
    664e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6652:	b29a      	uxth	r2, r3
    6654:	687b      	ldr	r3, [r7, #4]
    6656:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6658:	2300      	movs	r3, #0
    665a:	e07a      	b.n	6752 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    665c:	687b      	ldr	r3, [r7, #4]
    665e:	685b      	ldr	r3, [r3, #4]
    6660:	2b00      	cmp	r3, #0
    6662:	d111      	bne.n	6688 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6664:	687b      	ldr	r3, [r7, #4]
    6666:	885b      	ldrh	r3, [r3, #2]
    6668:	b29b      	uxth	r3, r3
    666a:	b21b      	sxth	r3, r3
    666c:	2b00      	cmp	r3, #0
    666e:	da02      	bge.n	6676 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    6670:	68f8      	ldr	r0, [r7, #12]
    6672:	4b3d      	ldr	r3, [pc, #244]	; (6768 <_sercom_i2c_sync_analyse_flags+0x210>)
    6674:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6676:	687b      	ldr	r3, [r7, #4]
    6678:	885b      	ldrh	r3, [r3, #2]
    667a:	b29b      	uxth	r3, r3
    667c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6680:	b29a      	uxth	r2, r3
    6682:	687b      	ldr	r3, [r7, #4]
    6684:	805a      	strh	r2, [r3, #2]
    6686:	e010      	b.n	66aa <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6688:	687b      	ldr	r3, [r7, #4]
    668a:	689b      	ldr	r3, [r3, #8]
    668c:	781b      	ldrb	r3, [r3, #0]
    668e:	4619      	mov	r1, r3
    6690:	68f8      	ldr	r0, [r7, #12]
    6692:	4b38      	ldr	r3, [pc, #224]	; (6774 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6694:	4798      	blx	r3
				msg->buffer++;
    6696:	687b      	ldr	r3, [r7, #4]
    6698:	689b      	ldr	r3, [r3, #8]
    669a:	1c5a      	adds	r2, r3, #1
    669c:	687b      	ldr	r3, [r7, #4]
    669e:	609a      	str	r2, [r3, #8]
				msg->len--;
    66a0:	687b      	ldr	r3, [r7, #4]
    66a2:	685b      	ldr	r3, [r3, #4]
    66a4:	1e5a      	subs	r2, r3, #1
    66a6:	687b      	ldr	r3, [r7, #4]
    66a8:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    66aa:	2300      	movs	r3, #0
    66ac:	e051      	b.n	6752 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    66ae:	68bb      	ldr	r3, [r7, #8]
    66b0:	f003 0302 	and.w	r3, r3, #2
    66b4:	2b00      	cmp	r3, #0
    66b6:	d04b      	beq.n	6750 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    66b8:	687b      	ldr	r3, [r7, #4]
    66ba:	685b      	ldr	r3, [r3, #4]
    66bc:	2b00      	cmp	r3, #0
    66be:	d041      	beq.n	6744 <_sercom_i2c_sync_analyse_flags+0x1ec>
    66c0:	8a7b      	ldrh	r3, [r7, #18]
    66c2:	f003 0304 	and.w	r3, r3, #4
    66c6:	2b00      	cmp	r3, #0
    66c8:	d13c      	bne.n	6744 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    66ca:	687b      	ldr	r3, [r7, #4]
    66cc:	685b      	ldr	r3, [r3, #4]
    66ce:	1e5a      	subs	r2, r3, #1
    66d0:	687b      	ldr	r3, [r7, #4]
    66d2:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    66d4:	687b      	ldr	r3, [r7, #4]
    66d6:	685b      	ldr	r3, [r3, #4]
    66d8:	2b00      	cmp	r3, #0
    66da:	d102      	bne.n	66e2 <_sercom_i2c_sync_analyse_flags+0x18a>
    66dc:	697b      	ldr	r3, [r7, #20]
    66de:	2b00      	cmp	r3, #0
    66e0:	d006      	beq.n	66f0 <_sercom_i2c_sync_analyse_flags+0x198>
    66e2:	687b      	ldr	r3, [r7, #4]
    66e4:	685b      	ldr	r3, [r3, #4]
    66e6:	2b01      	cmp	r3, #1
    66e8:	d105      	bne.n	66f6 <_sercom_i2c_sync_analyse_flags+0x19e>
    66ea:	697b      	ldr	r3, [r7, #20]
    66ec:	2b00      	cmp	r3, #0
    66ee:	d002      	beq.n	66f6 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    66f0:	68f8      	ldr	r0, [r7, #12]
    66f2:	4b21      	ldr	r3, [pc, #132]	; (6778 <_sercom_i2c_sync_analyse_flags+0x220>)
    66f4:	4798      	blx	r3
			}

			if (msg->len == 0) {
    66f6:	687b      	ldr	r3, [r7, #4]
    66f8:	685b      	ldr	r3, [r3, #4]
    66fa:	2b00      	cmp	r3, #0
    66fc:	d113      	bne.n	6726 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    66fe:	687b      	ldr	r3, [r7, #4]
    6700:	885b      	ldrh	r3, [r3, #2]
    6702:	b29b      	uxth	r3, r3
    6704:	b21b      	sxth	r3, r3
    6706:	2b00      	cmp	r3, #0
    6708:	da05      	bge.n	6716 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    670a:	68f8      	ldr	r0, [r7, #12]
    670c:	4b1b      	ldr	r3, [pc, #108]	; (677c <_sercom_i2c_sync_analyse_flags+0x224>)
    670e:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6710:	68f8      	ldr	r0, [r7, #12]
    6712:	4b15      	ldr	r3, [pc, #84]	; (6768 <_sercom_i2c_sync_analyse_flags+0x210>)
    6714:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6716:	687b      	ldr	r3, [r7, #4]
    6718:	885b      	ldrh	r3, [r3, #2]
    671a:	b29b      	uxth	r3, r3
    671c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6720:	b29a      	uxth	r2, r3
    6722:	687b      	ldr	r3, [r7, #4]
    6724:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6726:	687b      	ldr	r3, [r7, #4]
    6728:	689c      	ldr	r4, [r3, #8]
    672a:	1c62      	adds	r2, r4, #1
    672c:	687b      	ldr	r3, [r7, #4]
    672e:	609a      	str	r2, [r3, #8]
    6730:	68f8      	ldr	r0, [r7, #12]
    6732:	4b13      	ldr	r3, [pc, #76]	; (6780 <_sercom_i2c_sync_analyse_flags+0x228>)
    6734:	4798      	blx	r3
    6736:	4603      	mov	r3, r0
    6738:	b2db      	uxtb	r3, r3
    673a:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    673c:	68f8      	ldr	r0, [r7, #12]
    673e:	4b11      	ldr	r3, [pc, #68]	; (6784 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6740:	4798      	blx	r3
    6742:	e005      	b.n	6750 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6744:	68f8      	ldr	r0, [r7, #12]
    6746:	4b0f      	ldr	r3, [pc, #60]	; (6784 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6748:	4798      	blx	r3
			return I2C_NACK;
    674a:	f06f 0301 	mvn.w	r3, #1
    674e:	e000      	b.n	6752 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    6750:	2300      	movs	r3, #0
}
    6752:	4618      	mov	r0, r3
    6754:	371c      	adds	r7, #28
    6756:	46bd      	mov	sp, r7
    6758:	bd90      	pop	{r4, r7, pc}
    675a:	bf00      	nop
    675c:	00005ff1 	.word	0x00005ff1
    6760:	00006401 	.word	0x00006401
    6764:	00005ed5 	.word	0x00005ed5
    6768:	0000653d 	.word	0x0000653d
    676c:	000062e1 	.word	0x000062e1
    6770:	000062bd 	.word	0x000062bd
    6774:	0000631d 	.word	0x0000631d
    6778:	00006179 	.word	0x00006179
    677c:	00006151 	.word	0x00006151
    6780:	00006341 	.word	0x00006341
    6784:	00005eef 	.word	0x00005eef

00006788 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    6788:	b580      	push	{r7, lr}
    678a:	b086      	sub	sp, #24
    678c:	af00      	add	r7, sp, #0
    678e:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    6790:	687b      	ldr	r3, [r7, #4]
    6792:	691b      	ldr	r3, [r3, #16]
    6794:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6796:	6938      	ldr	r0, [r7, #16]
    6798:	4b37      	ldr	r3, [pc, #220]	; (6878 <_sercom_i2c_m_irq_handler+0xf0>)
    679a:	4798      	blx	r3
    679c:	4603      	mov	r3, r0
    679e:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    67a0:	2300      	movs	r3, #0
    67a2:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    67a4:	687b      	ldr	r3, [r7, #4]
    67a6:	2b00      	cmp	r3, #0
    67a8:	bf14      	ite	ne
    67aa:	2301      	movne	r3, #1
    67ac:	2300      	moveq	r3, #0
    67ae:	b2db      	uxtb	r3, r3
    67b0:	f240 421e 	movw	r2, #1054	; 0x41e
    67b4:	4931      	ldr	r1, [pc, #196]	; (687c <_sercom_i2c_m_irq_handler+0xf4>)
    67b6:	4618      	mov	r0, r3
    67b8:	4b31      	ldr	r3, [pc, #196]	; (6880 <_sercom_i2c_m_irq_handler+0xf8>)
    67ba:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    67bc:	687b      	ldr	r3, [r7, #4]
    67be:	691b      	ldr	r3, [r3, #16]
    67c0:	2b00      	cmp	r3, #0
    67c2:	bf14      	ite	ne
    67c4:	2301      	movne	r3, #1
    67c6:	2300      	moveq	r3, #0
    67c8:	b2db      	uxtb	r3, r3
    67ca:	f240 421f 	movw	r2, #1055	; 0x41f
    67ce:	492b      	ldr	r1, [pc, #172]	; (687c <_sercom_i2c_m_irq_handler+0xf4>)
    67d0:	4618      	mov	r0, r3
    67d2:	4b2b      	ldr	r3, [pc, #172]	; (6880 <_sercom_i2c_m_irq_handler+0xf8>)
    67d4:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    67d6:	bf00      	nop
    67d8:	68fb      	ldr	r3, [r7, #12]
    67da:	f003 0380 	and.w	r3, r3, #128	; 0x80
    67de:	2b00      	cmp	r3, #0
    67e0:	d126      	bne.n	6830 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    67e2:	687b      	ldr	r3, [r7, #4]
    67e4:	461a      	mov	r2, r3
    67e6:	68f9      	ldr	r1, [r7, #12]
    67e8:	6938      	ldr	r0, [r7, #16]
    67ea:	4b26      	ldr	r3, [pc, #152]	; (6884 <_sercom_i2c_m_irq_handler+0xfc>)
    67ec:	4798      	blx	r3
    67ee:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    67f0:	697b      	ldr	r3, [r7, #20]
    67f2:	2b00      	cmp	r3, #0
    67f4:	d11b      	bne.n	682e <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    67f6:	68fb      	ldr	r3, [r7, #12]
    67f8:	f003 0301 	and.w	r3, r3, #1
    67fc:	2b00      	cmp	r3, #0
    67fe:	d008      	beq.n	6812 <_sercom_i2c_m_irq_handler+0x8a>
    6800:	687b      	ldr	r3, [r7, #4]
    6802:	699b      	ldr	r3, [r3, #24]
    6804:	2b00      	cmp	r3, #0
    6806:	d004      	beq.n	6812 <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    6808:	687b      	ldr	r3, [r7, #4]
    680a:	699b      	ldr	r3, [r3, #24]
    680c:	6878      	ldr	r0, [r7, #4]
    680e:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    6810:	e02e      	b.n	6870 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6812:	68fb      	ldr	r3, [r7, #12]
    6814:	f003 0302 	and.w	r3, r3, #2
    6818:	2b00      	cmp	r3, #0
    681a:	d029      	beq.n	6870 <_sercom_i2c_m_irq_handler+0xe8>
    681c:	687b      	ldr	r3, [r7, #4]
    681e:	69db      	ldr	r3, [r3, #28]
    6820:	2b00      	cmp	r3, #0
    6822:	d025      	beq.n	6870 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    6824:	687b      	ldr	r3, [r7, #4]
    6826:	69db      	ldr	r3, [r3, #28]
    6828:	6878      	ldr	r0, [r7, #4]
    682a:	4798      	blx	r3
		return;
    682c:	e020      	b.n	6870 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    682e:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6830:	687b      	ldr	r3, [r7, #4]
    6832:	885b      	ldrh	r3, [r3, #2]
    6834:	b29b      	uxth	r3, r3
    6836:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    683a:	b29a      	uxth	r2, r3
    683c:	687b      	ldr	r3, [r7, #4]
    683e:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    6840:	687b      	ldr	r3, [r7, #4]
    6842:	695b      	ldr	r3, [r3, #20]
    6844:	2b00      	cmp	r3, #0
    6846:	d014      	beq.n	6872 <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    6848:	697b      	ldr	r3, [r7, #20]
    684a:	2b00      	cmp	r3, #0
    684c:	d005      	beq.n	685a <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    684e:	687b      	ldr	r3, [r7, #4]
    6850:	695b      	ldr	r3, [r3, #20]
    6852:	6979      	ldr	r1, [r7, #20]
    6854:	6878      	ldr	r0, [r7, #4]
    6856:	4798      	blx	r3
    6858:	e005      	b.n	6866 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    685a:	687b      	ldr	r3, [r7, #4]
    685c:	695b      	ldr	r3, [r3, #20]
    685e:	f06f 0104 	mvn.w	r1, #4
    6862:	6878      	ldr	r0, [r7, #4]
    6864:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    6866:	2180      	movs	r1, #128	; 0x80
    6868:	6938      	ldr	r0, [r7, #16]
    686a:	4b07      	ldr	r3, [pc, #28]	; (6888 <_sercom_i2c_m_irq_handler+0x100>)
    686c:	4798      	blx	r3
    686e:	e000      	b.n	6872 <_sercom_i2c_m_irq_handler+0xea>
		return;
    6870:	bf00      	nop
	}
}
    6872:	3718      	adds	r7, #24
    6874:	46bd      	mov	sp, r7
    6876:	bd80      	pop	{r7, pc}
    6878:	00005f09 	.word	0x00005f09
    687c:	0000f56c 	.word	0x0000f56c
    6880:	0000389d 	.word	0x0000389d
    6884:	00006559 	.word	0x00006559
    6888:	00005f23 	.word	0x00005f23

0000688c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    688c:	b580      	push	{r7, lr}
    688e:	b082      	sub	sp, #8
    6890:	af00      	add	r7, sp, #0
    6892:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    6894:	6878      	ldr	r0, [r7, #4]
    6896:	4b05      	ldr	r3, [pc, #20]	; (68ac <_sercom_get_irq_num+0x20>)
    6898:	4798      	blx	r3
    689a:	4603      	mov	r3, r0
    689c:	009b      	lsls	r3, r3, #2
    689e:	b2db      	uxtb	r3, r3
    68a0:	332e      	adds	r3, #46	; 0x2e
    68a2:	b2db      	uxtb	r3, r3
}
    68a4:	4618      	mov	r0, r3
    68a6:	3708      	adds	r7, #8
    68a8:	46bd      	mov	sp, r7
    68aa:	bd80      	pop	{r7, pc}
    68ac:	0000644d 	.word	0x0000644d

000068b0 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    68b0:	b580      	push	{r7, lr}
    68b2:	b086      	sub	sp, #24
    68b4:	af00      	add	r7, sp, #0
    68b6:	6078      	str	r0, [r7, #4]
    68b8:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    68ba:	687b      	ldr	r3, [r7, #4]
    68bc:	2b00      	cmp	r3, #0
    68be:	bf14      	ite	ne
    68c0:	2301      	movne	r3, #1
    68c2:	2300      	moveq	r3, #0
    68c4:	b2db      	uxtb	r3, r3
    68c6:	f240 4292 	movw	r2, #1170	; 0x492
    68ca:	491d      	ldr	r1, [pc, #116]	; (6940 <_i2c_m_async_init+0x90>)
    68cc:	4618      	mov	r0, r3
    68ce:	4b1d      	ldr	r3, [pc, #116]	; (6944 <_i2c_m_async_init+0x94>)
    68d0:	4798      	blx	r3

	i2c_dev->hw = hw;
    68d2:	687b      	ldr	r3, [r7, #4]
    68d4:	683a      	ldr	r2, [r7, #0]
    68d6:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    68d8:	687b      	ldr	r3, [r7, #4]
    68da:	6839      	ldr	r1, [r7, #0]
    68dc:	4618      	mov	r0, r3
    68de:	4b1a      	ldr	r3, [pc, #104]	; (6948 <_i2c_m_async_init+0x98>)
    68e0:	4798      	blx	r3
    68e2:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    68e4:	68fb      	ldr	r3, [r7, #12]
    68e6:	2b00      	cmp	r3, #0
    68e8:	d001      	beq.n	68ee <_i2c_m_async_init+0x3e>
		return init_status;
    68ea:	68fb      	ldr	r3, [r7, #12]
    68ec:	e024      	b.n	6938 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    68ee:	6879      	ldr	r1, [r7, #4]
    68f0:	6838      	ldr	r0, [r7, #0]
    68f2:	4b16      	ldr	r3, [pc, #88]	; (694c <_i2c_m_async_init+0x9c>)
    68f4:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    68f6:	6838      	ldr	r0, [r7, #0]
    68f8:	4b15      	ldr	r3, [pc, #84]	; (6950 <_i2c_m_async_init+0xa0>)
    68fa:	4798      	blx	r3
    68fc:	4603      	mov	r3, r0
    68fe:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6900:	2300      	movs	r3, #0
    6902:	613b      	str	r3, [r7, #16]
    6904:	e014      	b.n	6930 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    6906:	7dfb      	ldrb	r3, [r7, #23]
    6908:	b21b      	sxth	r3, r3
    690a:	4618      	mov	r0, r3
    690c:	4b11      	ldr	r3, [pc, #68]	; (6954 <_i2c_m_async_init+0xa4>)
    690e:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    6910:	7dfb      	ldrb	r3, [r7, #23]
    6912:	b21b      	sxth	r3, r3
    6914:	4618      	mov	r0, r3
    6916:	4b10      	ldr	r3, [pc, #64]	; (6958 <_i2c_m_async_init+0xa8>)
    6918:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    691a:	7dfb      	ldrb	r3, [r7, #23]
    691c:	b21b      	sxth	r3, r3
    691e:	4618      	mov	r0, r3
    6920:	4b0e      	ldr	r3, [pc, #56]	; (695c <_i2c_m_async_init+0xac>)
    6922:	4798      	blx	r3
		irq++;
    6924:	7dfb      	ldrb	r3, [r7, #23]
    6926:	3301      	adds	r3, #1
    6928:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    692a:	693b      	ldr	r3, [r7, #16]
    692c:	3301      	adds	r3, #1
    692e:	613b      	str	r3, [r7, #16]
    6930:	693b      	ldr	r3, [r7, #16]
    6932:	2b03      	cmp	r3, #3
    6934:	d9e7      	bls.n	6906 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    6936:	2300      	movs	r3, #0
}
    6938:	4618      	mov	r0, r3
    693a:	3718      	adds	r7, #24
    693c:	46bd      	mov	sp, r7
    693e:	bd80      	pop	{r7, pc}
    6940:	0000f56c 	.word	0x0000f56c
    6944:	0000389d 	.word	0x0000389d
    6948:	00006f35 	.word	0x00006f35
    694c:	000064a9 	.word	0x000064a9
    6950:	0000688d 	.word	0x0000688d
    6954:	00005dbd 	.word	0x00005dbd
    6958:	00005e01 	.word	0x00005e01
    695c:	00005d81 	.word	0x00005d81

00006960 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    6960:	b590      	push	{r4, r7, lr}
    6962:	b087      	sub	sp, #28
    6964:	af00      	add	r7, sp, #0
    6966:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6968:	687b      	ldr	r3, [r7, #4]
    696a:	691b      	ldr	r3, [r3, #16]
    696c:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    696e:	687b      	ldr	r3, [r7, #4]
    6970:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6972:	6978      	ldr	r0, [r7, #20]
    6974:	4b33      	ldr	r3, [pc, #204]	; (6a44 <_sercom_i2c_send_address+0xe4>)
    6976:	4798      	blx	r3
    6978:	4603      	mov	r3, r0
    697a:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    697c:	687b      	ldr	r3, [r7, #4]
    697e:	2b00      	cmp	r3, #0
    6980:	bf14      	ite	ne
    6982:	2301      	movne	r3, #1
    6984:	2300      	moveq	r3, #0
    6986:	b2db      	uxtb	r3, r3
    6988:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
    698c:	492e      	ldr	r1, [pc, #184]	; (6a48 <_sercom_i2c_send_address+0xe8>)
    698e:	4618      	mov	r0, r3
    6990:	4b2e      	ldr	r3, [pc, #184]	; (6a4c <_sercom_i2c_send_address+0xec>)
    6992:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6994:	693b      	ldr	r3, [r7, #16]
    6996:	685b      	ldr	r3, [r3, #4]
    6998:	2b01      	cmp	r3, #1
    699a:	d106      	bne.n	69aa <_sercom_i2c_send_address+0x4a>
    699c:	68fb      	ldr	r3, [r7, #12]
    699e:	2b00      	cmp	r3, #0
    69a0:	d003      	beq.n	69aa <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    69a2:	6978      	ldr	r0, [r7, #20]
    69a4:	4b2a      	ldr	r3, [pc, #168]	; (6a50 <_sercom_i2c_send_address+0xf0>)
    69a6:	4798      	blx	r3
    69a8:	e002      	b.n	69b0 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    69aa:	6978      	ldr	r0, [r7, #20]
    69ac:	4b29      	ldr	r3, [pc, #164]	; (6a54 <_sercom_i2c_send_address+0xf4>)
    69ae:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    69b0:	693b      	ldr	r3, [r7, #16]
    69b2:	881b      	ldrh	r3, [r3, #0]
    69b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    69b8:	2b00      	cmp	r3, #0
    69ba:	d022      	beq.n	6a02 <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    69bc:	693b      	ldr	r3, [r7, #16]
    69be:	885b      	ldrh	r3, [r3, #2]
    69c0:	b29b      	uxth	r3, r3
    69c2:	f003 0301 	and.w	r3, r3, #1
    69c6:	2b00      	cmp	r3, #0
    69c8:	d007      	beq.n	69da <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    69ca:	693b      	ldr	r3, [r7, #16]
    69cc:	885b      	ldrh	r3, [r3, #2]
    69ce:	b29b      	uxth	r3, r3
    69d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    69d4:	b29a      	uxth	r2, r3
    69d6:	693b      	ldr	r3, [r7, #16]
    69d8:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    69da:	693b      	ldr	r3, [r7, #16]
    69dc:	881b      	ldrh	r3, [r3, #0]
    69de:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    69e0:	f240 74fe 	movw	r4, #2046	; 0x7fe
    69e4:	401c      	ands	r4, r3
    69e6:	6978      	ldr	r0, [r7, #20]
    69e8:	4b1b      	ldr	r3, [pc, #108]	; (6a58 <_sercom_i2c_send_address+0xf8>)
    69ea:	4798      	blx	r3
    69ec:	4603      	mov	r3, r0
    69ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    69f2:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    69f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    69f8:	4619      	mov	r1, r3
    69fa:	6978      	ldr	r0, [r7, #20]
    69fc:	4b17      	ldr	r3, [pc, #92]	; (6a5c <_sercom_i2c_send_address+0xfc>)
    69fe:	4798      	blx	r3
    6a00:	e01a      	b.n	6a38 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6a02:	693b      	ldr	r3, [r7, #16]
    6a04:	881b      	ldrh	r3, [r3, #0]
    6a06:	005b      	lsls	r3, r3, #1
    6a08:	b2db      	uxtb	r3, r3
    6a0a:	693a      	ldr	r2, [r7, #16]
    6a0c:	8852      	ldrh	r2, [r2, #2]
    6a0e:	b292      	uxth	r2, r2
    6a10:	f002 0201 	and.w	r2, r2, #1
    6a14:	2a00      	cmp	r2, #0
    6a16:	bf14      	ite	ne
    6a18:	2201      	movne	r2, #1
    6a1a:	2200      	moveq	r2, #0
    6a1c:	b2d2      	uxtb	r2, r2
    6a1e:	4313      	orrs	r3, r2
    6a20:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6a22:	6978      	ldr	r0, [r7, #20]
    6a24:	4b0c      	ldr	r3, [pc, #48]	; (6a58 <_sercom_i2c_send_address+0xf8>)
    6a26:	4798      	blx	r3
    6a28:	4603      	mov	r3, r0
    6a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6a2e:	4323      	orrs	r3, r4
    6a30:	4619      	mov	r1, r3
    6a32:	6978      	ldr	r0, [r7, #20]
    6a34:	4b09      	ldr	r3, [pc, #36]	; (6a5c <_sercom_i2c_send_address+0xfc>)
    6a36:	4798      	blx	r3
	}

	return ERR_NONE;
    6a38:	2300      	movs	r3, #0
}
    6a3a:	4618      	mov	r0, r3
    6a3c:	371c      	adds	r7, #28
    6a3e:	46bd      	mov	sp, r7
    6a40:	bd90      	pop	{r4, r7, pc}
    6a42:	bf00      	nop
    6a44:	00005ff1 	.word	0x00005ff1
    6a48:	0000f56c 	.word	0x0000f56c
    6a4c:	0000389d 	.word	0x0000389d
    6a50:	00006179 	.word	0x00006179
    6a54:	000061a1 	.word	0x000061a1
    6a58:	000062e1 	.word	0x000062e1
    6a5c:	000062bd 	.word	0x000062bd

00006a60 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    6a60:	b580      	push	{r7, lr}
    6a62:	b084      	sub	sp, #16
    6a64:	af00      	add	r7, sp, #0
    6a66:	6078      	str	r0, [r7, #4]
    6a68:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    6a6a:	687b      	ldr	r3, [r7, #4]
    6a6c:	2b00      	cmp	r3, #0
    6a6e:	bf14      	ite	ne
    6a70:	2301      	movne	r3, #1
    6a72:	2300      	moveq	r3, #0
    6a74:	b2db      	uxtb	r3, r3
    6a76:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
    6a7a:	492a      	ldr	r1, [pc, #168]	; (6b24 <_i2c_m_async_transfer+0xc4>)
    6a7c:	4618      	mov	r0, r3
    6a7e:	4b2a      	ldr	r3, [pc, #168]	; (6b28 <_i2c_m_async_transfer+0xc8>)
    6a80:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6a82:	687b      	ldr	r3, [r7, #4]
    6a84:	691b      	ldr	r3, [r3, #16]
    6a86:	2b00      	cmp	r3, #0
    6a88:	bf14      	ite	ne
    6a8a:	2301      	movne	r3, #1
    6a8c:	2300      	moveq	r3, #0
    6a8e:	b2db      	uxtb	r3, r3
    6a90:	f240 42e9 	movw	r2, #1257	; 0x4e9
    6a94:	4923      	ldr	r1, [pc, #140]	; (6b24 <_i2c_m_async_transfer+0xc4>)
    6a96:	4618      	mov	r0, r3
    6a98:	4b23      	ldr	r3, [pc, #140]	; (6b28 <_i2c_m_async_transfer+0xc8>)
    6a9a:	4798      	blx	r3
	ASSERT(msg);
    6a9c:	683b      	ldr	r3, [r7, #0]
    6a9e:	2b00      	cmp	r3, #0
    6aa0:	bf14      	ite	ne
    6aa2:	2301      	movne	r3, #1
    6aa4:	2300      	moveq	r3, #0
    6aa6:	b2db      	uxtb	r3, r3
    6aa8:	f240 42ea 	movw	r2, #1258	; 0x4ea
    6aac:	491d      	ldr	r1, [pc, #116]	; (6b24 <_i2c_m_async_transfer+0xc4>)
    6aae:	4618      	mov	r0, r3
    6ab0:	4b1d      	ldr	r3, [pc, #116]	; (6b28 <_i2c_m_async_transfer+0xc8>)
    6ab2:	4798      	blx	r3

	if (msg->len == 0) {
    6ab4:	683b      	ldr	r3, [r7, #0]
    6ab6:	685b      	ldr	r3, [r3, #4]
    6ab8:	2b00      	cmp	r3, #0
    6aba:	d101      	bne.n	6ac0 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    6abc:	2300      	movs	r3, #0
    6abe:	e02d      	b.n	6b1c <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6ac0:	687b      	ldr	r3, [r7, #4]
    6ac2:	885b      	ldrh	r3, [r3, #2]
    6ac4:	b29b      	uxth	r3, r3
    6ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6aca:	2b00      	cmp	r3, #0
    6acc:	d002      	beq.n	6ad4 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    6ace:	f06f 0303 	mvn.w	r3, #3
    6ad2:	e023      	b.n	6b1c <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    6ad4:	683b      	ldr	r3, [r7, #0]
    6ad6:	885b      	ldrh	r3, [r3, #2]
    6ad8:	b29b      	uxth	r3, r3
    6ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6ade:	b29a      	uxth	r2, r3
    6ae0:	683b      	ldr	r3, [r7, #0]
    6ae2:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6ae4:	687b      	ldr	r3, [r7, #4]
    6ae6:	683a      	ldr	r2, [r7, #0]
    6ae8:	ca07      	ldmia	r2, {r0, r1, r2}
    6aea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    6aee:	687b      	ldr	r3, [r7, #4]
    6af0:	691b      	ldr	r3, [r3, #16]
    6af2:	4618      	mov	r0, r3
    6af4:	4b0d      	ldr	r3, [pc, #52]	; (6b2c <_i2c_m_async_transfer+0xcc>)
    6af6:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    6af8:	6878      	ldr	r0, [r7, #4]
    6afa:	4b0d      	ldr	r3, [pc, #52]	; (6b30 <_i2c_m_async_transfer+0xd0>)
    6afc:	4798      	blx	r3
    6afe:	60f8      	str	r0, [r7, #12]

	if (ret) {
    6b00:	68fb      	ldr	r3, [r7, #12]
    6b02:	2b00      	cmp	r3, #0
    6b04:	d009      	beq.n	6b1a <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6b06:	687b      	ldr	r3, [r7, #4]
    6b08:	885b      	ldrh	r3, [r3, #2]
    6b0a:	b29b      	uxth	r3, r3
    6b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6b10:	b29a      	uxth	r2, r3
    6b12:	687b      	ldr	r3, [r7, #4]
    6b14:	805a      	strh	r2, [r3, #2]

		return ret;
    6b16:	68fb      	ldr	r3, [r7, #12]
    6b18:	e000      	b.n	6b1c <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    6b1a:	2300      	movs	r3, #0
}
    6b1c:	4618      	mov	r0, r3
    6b1e:	3710      	adds	r7, #16
    6b20:	46bd      	mov	sp, r7
    6b22:	bd80      	pop	{r7, pc}
    6b24:	0000f56c 	.word	0x0000f56c
    6b28:	0000389d 	.word	0x0000389d
    6b2c:	00006129 	.word	0x00006129
    6b30:	00006961 	.word	0x00006961

00006b34 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    6b34:	b480      	push	{r7}
    6b36:	b085      	sub	sp, #20
    6b38:	af00      	add	r7, sp, #0
    6b3a:	60f8      	str	r0, [r7, #12]
    6b3c:	460b      	mov	r3, r1
    6b3e:	607a      	str	r2, [r7, #4]
    6b40:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    6b42:	7afb      	ldrb	r3, [r7, #11]
    6b44:	2b01      	cmp	r3, #1
    6b46:	d008      	beq.n	6b5a <_i2c_m_async_register_callback+0x26>
    6b48:	2b02      	cmp	r3, #2
    6b4a:	d00a      	beq.n	6b62 <_i2c_m_async_register_callback+0x2e>
    6b4c:	2b00      	cmp	r3, #0
    6b4e:	d000      	beq.n	6b52 <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    6b50:	e00b      	b.n	6b6a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    6b52:	68fb      	ldr	r3, [r7, #12]
    6b54:	687a      	ldr	r2, [r7, #4]
    6b56:	615a      	str	r2, [r3, #20]
		break;
    6b58:	e007      	b.n	6b6a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    6b5a:	68fb      	ldr	r3, [r7, #12]
    6b5c:	687a      	ldr	r2, [r7, #4]
    6b5e:	619a      	str	r2, [r3, #24]
		break;
    6b60:	e003      	b.n	6b6a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    6b62:	68fb      	ldr	r3, [r7, #12]
    6b64:	687a      	ldr	r2, [r7, #4]
    6b66:	61da      	str	r2, [r3, #28]
		break;
    6b68:	bf00      	nop
	}

	return ERR_NONE;
    6b6a:	2300      	movs	r3, #0
}
    6b6c:	4618      	mov	r0, r3
    6b6e:	3714      	adds	r7, #20
    6b70:	46bd      	mov	sp, r7
    6b72:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b76:	4770      	bx	lr

00006b78 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    6b78:	b580      	push	{r7, lr}
    6b7a:	b082      	sub	sp, #8
    6b7c:	af00      	add	r7, sp, #0
    6b7e:	6078      	str	r0, [r7, #4]
    6b80:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    6b82:	687b      	ldr	r3, [r7, #4]
    6b84:	2b00      	cmp	r3, #0
    6b86:	bf14      	ite	ne
    6b88:	2301      	movne	r3, #1
    6b8a:	2300      	moveq	r3, #0
    6b8c:	b2db      	uxtb	r3, r3
    6b8e:	f44f 62a9 	mov.w	r2, #1352	; 0x548
    6b92:	4908      	ldr	r1, [pc, #32]	; (6bb4 <_i2c_m_sync_init+0x3c>)
    6b94:	4618      	mov	r0, r3
    6b96:	4b08      	ldr	r3, [pc, #32]	; (6bb8 <_i2c_m_sync_init+0x40>)
    6b98:	4798      	blx	r3

	i2c_dev->hw = hw;
    6b9a:	687b      	ldr	r3, [r7, #4]
    6b9c:	683a      	ldr	r2, [r7, #0]
    6b9e:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6ba0:	687b      	ldr	r3, [r7, #4]
    6ba2:	6839      	ldr	r1, [r7, #0]
    6ba4:	4618      	mov	r0, r3
    6ba6:	4b05      	ldr	r3, [pc, #20]	; (6bbc <_i2c_m_sync_init+0x44>)
    6ba8:	4798      	blx	r3
    6baa:	4603      	mov	r3, r0
}
    6bac:	4618      	mov	r0, r3
    6bae:	3708      	adds	r7, #8
    6bb0:	46bd      	mov	sp, r7
    6bb2:	bd80      	pop	{r7, pc}
    6bb4:	0000f56c 	.word	0x0000f56c
    6bb8:	0000389d 	.word	0x0000389d
    6bbc:	00006f35 	.word	0x00006f35

00006bc0 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    6bc0:	b580      	push	{r7, lr}
    6bc2:	b082      	sub	sp, #8
    6bc4:	af00      	add	r7, sp, #0
    6bc6:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    6bc8:	687b      	ldr	r3, [r7, #4]
    6bca:	2b00      	cmp	r3, #0
    6bcc:	bf14      	ite	ne
    6bce:	2301      	movne	r3, #1
    6bd0:	2300      	moveq	r3, #0
    6bd2:	b2db      	uxtb	r3, r3
    6bd4:	f240 5265 	movw	r2, #1381	; 0x565
    6bd8:	4906      	ldr	r1, [pc, #24]	; (6bf4 <_i2c_m_sync_enable+0x34>)
    6bda:	4618      	mov	r0, r3
    6bdc:	4b06      	ldr	r3, [pc, #24]	; (6bf8 <_i2c_m_sync_enable+0x38>)
    6bde:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    6be0:	687b      	ldr	r3, [r7, #4]
    6be2:	691b      	ldr	r3, [r3, #16]
    6be4:	4618      	mov	r0, r3
    6be6:	4b05      	ldr	r3, [pc, #20]	; (6bfc <_i2c_m_sync_enable+0x3c>)
    6be8:	4798      	blx	r3
    6bea:	4603      	mov	r3, r0
}
    6bec:	4618      	mov	r0, r3
    6bee:	3708      	adds	r7, #8
    6bf0:	46bd      	mov	sp, r7
    6bf2:	bd80      	pop	{r7, pc}
    6bf4:	0000f56c 	.word	0x0000f56c
    6bf8:	0000389d 	.word	0x0000389d
    6bfc:	00006ea9 	.word	0x00006ea9

00006c00 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    6c00:	b580      	push	{r7, lr}
    6c02:	b084      	sub	sp, #16
    6c04:	af00      	add	r7, sp, #0
    6c06:	6078      	str	r0, [r7, #4]
    6c08:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    6c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6c0e:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    6c10:	687b      	ldr	r3, [r7, #4]
    6c12:	691b      	ldr	r3, [r3, #16]
    6c14:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6c16:	68b8      	ldr	r0, [r7, #8]
    6c18:	4b0f      	ldr	r3, [pc, #60]	; (6c58 <_sercom_i2c_sync_wait_bus+0x58>)
    6c1a:	4798      	blx	r3
    6c1c:	4603      	mov	r3, r0
    6c1e:	461a      	mov	r2, r3
    6c20:	683b      	ldr	r3, [r7, #0]
    6c22:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    6c24:	68fb      	ldr	r3, [r7, #12]
    6c26:	1e5a      	subs	r2, r3, #1
    6c28:	60fa      	str	r2, [r7, #12]
    6c2a:	2b00      	cmp	r3, #0
    6c2c:	d102      	bne.n	6c34 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    6c2e:	f06f 0304 	mvn.w	r3, #4
    6c32:	e00c      	b.n	6c4e <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    6c34:	683b      	ldr	r3, [r7, #0]
    6c36:	681b      	ldr	r3, [r3, #0]
    6c38:	f003 0301 	and.w	r3, r3, #1
    6c3c:	2b00      	cmp	r3, #0
    6c3e:	d105      	bne.n	6c4c <_sercom_i2c_sync_wait_bus+0x4c>
    6c40:	683b      	ldr	r3, [r7, #0]
    6c42:	681b      	ldr	r3, [r3, #0]
    6c44:	f003 0302 	and.w	r3, r3, #2
    6c48:	2b00      	cmp	r3, #0
    6c4a:	d0e4      	beq.n	6c16 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    6c4c:	2300      	movs	r3, #0
}
    6c4e:	4618      	mov	r0, r3
    6c50:	3710      	adds	r7, #16
    6c52:	46bd      	mov	sp, r7
    6c54:	bd80      	pop	{r7, pc}
    6c56:	bf00      	nop
    6c58:	00005f09 	.word	0x00005f09

00006c5c <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    6c5c:	b590      	push	{r4, r7, lr}
    6c5e:	b087      	sub	sp, #28
    6c60:	af00      	add	r7, sp, #0
    6c62:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6c64:	687b      	ldr	r3, [r7, #4]
    6c66:	691b      	ldr	r3, [r3, #16]
    6c68:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6c6a:	687b      	ldr	r3, [r7, #4]
    6c6c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6c6e:	6978      	ldr	r0, [r7, #20]
    6c70:	4b39      	ldr	r3, [pc, #228]	; (6d58 <_sercom_i2c_sync_send_address+0xfc>)
    6c72:	4798      	blx	r3
    6c74:	4603      	mov	r3, r0
    6c76:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    6c78:	687b      	ldr	r3, [r7, #4]
    6c7a:	2b00      	cmp	r3, #0
    6c7c:	bf14      	ite	ne
    6c7e:	2301      	movne	r3, #1
    6c80:	2300      	moveq	r3, #0
    6c82:	b2db      	uxtb	r3, r3
    6c84:	f240 52d5 	movw	r2, #1493	; 0x5d5
    6c88:	4934      	ldr	r1, [pc, #208]	; (6d5c <_sercom_i2c_sync_send_address+0x100>)
    6c8a:	4618      	mov	r0, r3
    6c8c:	4b34      	ldr	r3, [pc, #208]	; (6d60 <_sercom_i2c_sync_send_address+0x104>)
    6c8e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6c90:	693b      	ldr	r3, [r7, #16]
    6c92:	685b      	ldr	r3, [r3, #4]
    6c94:	2b01      	cmp	r3, #1
    6c96:	d106      	bne.n	6ca6 <_sercom_i2c_sync_send_address+0x4a>
    6c98:	68fb      	ldr	r3, [r7, #12]
    6c9a:	2b00      	cmp	r3, #0
    6c9c:	d003      	beq.n	6ca6 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6c9e:	6978      	ldr	r0, [r7, #20]
    6ca0:	4b30      	ldr	r3, [pc, #192]	; (6d64 <_sercom_i2c_sync_send_address+0x108>)
    6ca2:	4798      	blx	r3
    6ca4:	e002      	b.n	6cac <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6ca6:	6978      	ldr	r0, [r7, #20]
    6ca8:	4b2f      	ldr	r3, [pc, #188]	; (6d68 <_sercom_i2c_sync_send_address+0x10c>)
    6caa:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6cac:	693b      	ldr	r3, [r7, #16]
    6cae:	881b      	ldrh	r3, [r3, #0]
    6cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6cb4:	2b00      	cmp	r3, #0
    6cb6:	d022      	beq.n	6cfe <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6cb8:	693b      	ldr	r3, [r7, #16]
    6cba:	885b      	ldrh	r3, [r3, #2]
    6cbc:	b29b      	uxth	r3, r3
    6cbe:	f003 0301 	and.w	r3, r3, #1
    6cc2:	2b00      	cmp	r3, #0
    6cc4:	d007      	beq.n	6cd6 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6cc6:	693b      	ldr	r3, [r7, #16]
    6cc8:	885b      	ldrh	r3, [r3, #2]
    6cca:	b29b      	uxth	r3, r3
    6ccc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6cd0:	b29a      	uxth	r2, r3
    6cd2:	693b      	ldr	r3, [r7, #16]
    6cd4:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    6cd6:	693b      	ldr	r3, [r7, #16]
    6cd8:	881b      	ldrh	r3, [r3, #0]
    6cda:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6cdc:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6ce0:	401c      	ands	r4, r3
    6ce2:	6978      	ldr	r0, [r7, #20]
    6ce4:	4b21      	ldr	r3, [pc, #132]	; (6d6c <_sercom_i2c_sync_send_address+0x110>)
    6ce6:	4798      	blx	r3
    6ce8:	4603      	mov	r3, r0
    6cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6cee:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6cf4:	4619      	mov	r1, r3
    6cf6:	6978      	ldr	r0, [r7, #20]
    6cf8:	4b1d      	ldr	r3, [pc, #116]	; (6d70 <_sercom_i2c_sync_send_address+0x114>)
    6cfa:	4798      	blx	r3
    6cfc:	e01a      	b.n	6d34 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6cfe:	693b      	ldr	r3, [r7, #16]
    6d00:	881b      	ldrh	r3, [r3, #0]
    6d02:	005b      	lsls	r3, r3, #1
    6d04:	b2db      	uxtb	r3, r3
    6d06:	693a      	ldr	r2, [r7, #16]
    6d08:	8852      	ldrh	r2, [r2, #2]
    6d0a:	b292      	uxth	r2, r2
    6d0c:	f002 0201 	and.w	r2, r2, #1
    6d10:	2a00      	cmp	r2, #0
    6d12:	bf14      	ite	ne
    6d14:	2201      	movne	r2, #1
    6d16:	2200      	moveq	r2, #0
    6d18:	b2d2      	uxtb	r2, r2
    6d1a:	4313      	orrs	r3, r2
    6d1c:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6d1e:	6978      	ldr	r0, [r7, #20]
    6d20:	4b12      	ldr	r3, [pc, #72]	; (6d6c <_sercom_i2c_sync_send_address+0x110>)
    6d22:	4798      	blx	r3
    6d24:	4603      	mov	r3, r0
    6d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6d2a:	4323      	orrs	r3, r4
    6d2c:	4619      	mov	r1, r3
    6d2e:	6978      	ldr	r0, [r7, #20]
    6d30:	4b0f      	ldr	r3, [pc, #60]	; (6d70 <_sercom_i2c_sync_send_address+0x114>)
    6d32:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6d34:	f107 0308 	add.w	r3, r7, #8
    6d38:	4619      	mov	r1, r3
    6d3a:	6878      	ldr	r0, [r7, #4]
    6d3c:	4b0d      	ldr	r3, [pc, #52]	; (6d74 <_sercom_i2c_sync_send_address+0x118>)
    6d3e:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    6d40:	68bb      	ldr	r3, [r7, #8]
    6d42:	693a      	ldr	r2, [r7, #16]
    6d44:	4619      	mov	r1, r3
    6d46:	6978      	ldr	r0, [r7, #20]
    6d48:	4b0b      	ldr	r3, [pc, #44]	; (6d78 <_sercom_i2c_sync_send_address+0x11c>)
    6d4a:	4798      	blx	r3
    6d4c:	4603      	mov	r3, r0
}
    6d4e:	4618      	mov	r0, r3
    6d50:	371c      	adds	r7, #28
    6d52:	46bd      	mov	sp, r7
    6d54:	bd90      	pop	{r4, r7, pc}
    6d56:	bf00      	nop
    6d58:	00005ff1 	.word	0x00005ff1
    6d5c:	0000f56c 	.word	0x0000f56c
    6d60:	0000389d 	.word	0x0000389d
    6d64:	00006179 	.word	0x00006179
    6d68:	000061a1 	.word	0x000061a1
    6d6c:	000062e1 	.word	0x000062e1
    6d70:	000062bd 	.word	0x000062bd
    6d74:	00006c01 	.word	0x00006c01
    6d78:	00006559 	.word	0x00006559

00006d7c <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    6d7c:	b580      	push	{r7, lr}
    6d7e:	b086      	sub	sp, #24
    6d80:	af00      	add	r7, sp, #0
    6d82:	6078      	str	r0, [r7, #4]
    6d84:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    6d86:	687b      	ldr	r3, [r7, #4]
    6d88:	691b      	ldr	r3, [r3, #16]
    6d8a:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    6d8c:	687b      	ldr	r3, [r7, #4]
    6d8e:	2b00      	cmp	r3, #0
    6d90:	bf14      	ite	ne
    6d92:	2301      	movne	r3, #1
    6d94:	2300      	moveq	r3, #0
    6d96:	b2db      	uxtb	r3, r3
    6d98:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    6d9c:	493b      	ldr	r1, [pc, #236]	; (6e8c <_i2c_m_sync_transfer+0x110>)
    6d9e:	4618      	mov	r0, r3
    6da0:	4b3b      	ldr	r3, [pc, #236]	; (6e90 <_i2c_m_sync_transfer+0x114>)
    6da2:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6da4:	687b      	ldr	r3, [r7, #4]
    6da6:	691b      	ldr	r3, [r3, #16]
    6da8:	2b00      	cmp	r3, #0
    6daa:	bf14      	ite	ne
    6dac:	2301      	movne	r3, #1
    6dae:	2300      	moveq	r3, #0
    6db0:	b2db      	uxtb	r3, r3
    6db2:	f240 6201 	movw	r2, #1537	; 0x601
    6db6:	4935      	ldr	r1, [pc, #212]	; (6e8c <_i2c_m_sync_transfer+0x110>)
    6db8:	4618      	mov	r0, r3
    6dba:	4b35      	ldr	r3, [pc, #212]	; (6e90 <_i2c_m_sync_transfer+0x114>)
    6dbc:	4798      	blx	r3
	ASSERT(msg);
    6dbe:	683b      	ldr	r3, [r7, #0]
    6dc0:	2b00      	cmp	r3, #0
    6dc2:	bf14      	ite	ne
    6dc4:	2301      	movne	r3, #1
    6dc6:	2300      	moveq	r3, #0
    6dc8:	b2db      	uxtb	r3, r3
    6dca:	f240 6202 	movw	r2, #1538	; 0x602
    6dce:	492f      	ldr	r1, [pc, #188]	; (6e8c <_i2c_m_sync_transfer+0x110>)
    6dd0:	4618      	mov	r0, r3
    6dd2:	4b2f      	ldr	r3, [pc, #188]	; (6e90 <_i2c_m_sync_transfer+0x114>)
    6dd4:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6dd6:	687b      	ldr	r3, [r7, #4]
    6dd8:	885b      	ldrh	r3, [r3, #2]
    6dda:	b29b      	uxth	r3, r3
    6ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6de0:	2b00      	cmp	r3, #0
    6de2:	d002      	beq.n	6dea <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    6de4:	f06f 0305 	mvn.w	r3, #5
    6de8:	e04c      	b.n	6e84 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    6dea:	683b      	ldr	r3, [r7, #0]
    6dec:	885b      	ldrh	r3, [r3, #2]
    6dee:	b29b      	uxth	r3, r3
    6df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6df4:	b29a      	uxth	r2, r3
    6df6:	683b      	ldr	r3, [r7, #0]
    6df8:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6dfa:	687b      	ldr	r3, [r7, #4]
    6dfc:	683a      	ldr	r2, [r7, #0]
    6dfe:	ca07      	ldmia	r2, {r0, r1, r2}
    6e00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    6e04:	6938      	ldr	r0, [r7, #16]
    6e06:	4b23      	ldr	r3, [pc, #140]	; (6e94 <_i2c_m_sync_transfer+0x118>)
    6e08:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    6e0a:	6878      	ldr	r0, [r7, #4]
    6e0c:	4b22      	ldr	r3, [pc, #136]	; (6e98 <_i2c_m_sync_transfer+0x11c>)
    6e0e:	4798      	blx	r3
    6e10:	6178      	str	r0, [r7, #20]

	if (ret) {
    6e12:	697b      	ldr	r3, [r7, #20]
    6e14:	2b00      	cmp	r3, #0
    6e16:	d02d      	beq.n	6e74 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6e18:	687b      	ldr	r3, [r7, #4]
    6e1a:	885b      	ldrh	r3, [r3, #2]
    6e1c:	b29b      	uxth	r3, r3
    6e1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6e22:	b29a      	uxth	r2, r3
    6e24:	687b      	ldr	r3, [r7, #4]
    6e26:	805a      	strh	r2, [r3, #2]

		return ret;
    6e28:	697b      	ldr	r3, [r7, #20]
    6e2a:	e02b      	b.n	6e84 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6e2c:	f107 030c 	add.w	r3, r7, #12
    6e30:	4619      	mov	r1, r3
    6e32:	6878      	ldr	r0, [r7, #4]
    6e34:	4b19      	ldr	r3, [pc, #100]	; (6e9c <_i2c_m_sync_transfer+0x120>)
    6e36:	4798      	blx	r3
    6e38:	6178      	str	r0, [r7, #20]

		if (ret) {
    6e3a:	697b      	ldr	r3, [r7, #20]
    6e3c:	2b00      	cmp	r3, #0
    6e3e:	d012      	beq.n	6e66 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    6e40:	683b      	ldr	r3, [r7, #0]
    6e42:	885b      	ldrh	r3, [r3, #2]
    6e44:	b29b      	uxth	r3, r3
    6e46:	b21b      	sxth	r3, r3
    6e48:	2b00      	cmp	r3, #0
    6e4a:	da02      	bge.n	6e52 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    6e4c:	6938      	ldr	r0, [r7, #16]
    6e4e:	4b14      	ldr	r3, [pc, #80]	; (6ea0 <_i2c_m_sync_transfer+0x124>)
    6e50:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6e52:	687b      	ldr	r3, [r7, #4]
    6e54:	885b      	ldrh	r3, [r3, #2]
    6e56:	b29b      	uxth	r3, r3
    6e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6e5c:	b29a      	uxth	r2, r3
    6e5e:	687b      	ldr	r3, [r7, #4]
    6e60:	805a      	strh	r2, [r3, #2]

			return ret;
    6e62:	697b      	ldr	r3, [r7, #20]
    6e64:	e00e      	b.n	6e84 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6e66:	68fb      	ldr	r3, [r7, #12]
    6e68:	687a      	ldr	r2, [r7, #4]
    6e6a:	4619      	mov	r1, r3
    6e6c:	6938      	ldr	r0, [r7, #16]
    6e6e:	4b0d      	ldr	r3, [pc, #52]	; (6ea4 <_i2c_m_sync_transfer+0x128>)
    6e70:	4798      	blx	r3
    6e72:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6e74:	687b      	ldr	r3, [r7, #4]
    6e76:	885b      	ldrh	r3, [r3, #2]
    6e78:	b29b      	uxth	r3, r3
    6e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6e7e:	2b00      	cmp	r3, #0
    6e80:	d1d4      	bne.n	6e2c <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    6e82:	697b      	ldr	r3, [r7, #20]
}
    6e84:	4618      	mov	r0, r3
    6e86:	3718      	adds	r7, #24
    6e88:	46bd      	mov	sp, r7
    6e8a:	bd80      	pop	{r7, pc}
    6e8c:	0000f56c 	.word	0x0000f56c
    6e90:	0000389d 	.word	0x0000389d
    6e94:	00006129 	.word	0x00006129
    6e98:	00006c5d 	.word	0x00006c5d
    6e9c:	00006c01 	.word	0x00006c01
    6ea0:	0000653d 	.word	0x0000653d
    6ea4:	00006559 	.word	0x00006559

00006ea8 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    6ea8:	b580      	push	{r7, lr}
    6eaa:	b084      	sub	sp, #16
    6eac:	af00      	add	r7, sp, #0
    6eae:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    6eb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6eb4:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    6eb6:	2304      	movs	r3, #4
    6eb8:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    6eba:	687b      	ldr	r3, [r7, #4]
    6ebc:	2b00      	cmp	r3, #0
    6ebe:	bf14      	ite	ne
    6ec0:	2301      	movne	r3, #1
    6ec2:	2300      	moveq	r3, #0
    6ec4:	b2db      	uxtb	r3, r3
    6ec6:	f240 6235 	movw	r2, #1589	; 0x635
    6eca:	4915      	ldr	r1, [pc, #84]	; (6f20 <_i2c_m_enable_implementation+0x78>)
    6ecc:	4618      	mov	r0, r3
    6ece:	4b15      	ldr	r3, [pc, #84]	; (6f24 <_i2c_m_enable_implementation+0x7c>)
    6ed0:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    6ed2:	6878      	ldr	r0, [r7, #4]
    6ed4:	4b14      	ldr	r3, [pc, #80]	; (6f28 <_i2c_m_enable_implementation+0x80>)
    6ed6:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6ed8:	e016      	b.n	6f08 <_i2c_m_enable_implementation+0x60>
		timeout--;
    6eda:	68fb      	ldr	r3, [r7, #12]
    6edc:	3b01      	subs	r3, #1
    6ede:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    6ee0:	68fb      	ldr	r3, [r7, #12]
    6ee2:	2b00      	cmp	r3, #0
    6ee4:	dc10      	bgt.n	6f08 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    6ee6:	68bb      	ldr	r3, [r7, #8]
    6ee8:	3b01      	subs	r3, #1
    6eea:	60bb      	str	r3, [r7, #8]
    6eec:	68bb      	ldr	r3, [r7, #8]
    6eee:	2b00      	cmp	r3, #0
    6ef0:	d007      	beq.n	6f02 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    6ef2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6ef6:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    6ef8:	2110      	movs	r1, #16
    6efa:	6878      	ldr	r0, [r7, #4]
    6efc:	4b0b      	ldr	r3, [pc, #44]	; (6f2c <_i2c_m_enable_implementation+0x84>)
    6efe:	4798      	blx	r3
    6f00:	e002      	b.n	6f08 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    6f02:	f06f 0305 	mvn.w	r3, #5
    6f06:	e006      	b.n	6f16 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6f08:	6878      	ldr	r0, [r7, #4]
    6f0a:	4b09      	ldr	r3, [pc, #36]	; (6f30 <_i2c_m_enable_implementation+0x88>)
    6f0c:	4798      	blx	r3
    6f0e:	4603      	mov	r3, r0
    6f10:	2b01      	cmp	r3, #1
    6f12:	d1e2      	bne.n	6eda <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    6f14:	2300      	movs	r3, #0
}
    6f16:	4618      	mov	r0, r3
    6f18:	3710      	adds	r7, #16
    6f1a:	46bd      	mov	sp, r7
    6f1c:	bd80      	pop	{r7, pc}
    6f1e:	bf00      	nop
    6f20:	0000f56c 	.word	0x0000f56c
    6f24:	0000389d 	.word	0x0000389d
    6f28:	00005fa1 	.word	0x00005fa1
    6f2c:	00006425 	.word	0x00006425
    6f30:	000063d5 	.word	0x000063d5

00006f34 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6f34:	b580      	push	{r7, lr}
    6f36:	b084      	sub	sp, #16
    6f38:	af00      	add	r7, sp, #0
    6f3a:	6078      	str	r0, [r7, #4]
    6f3c:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    6f3e:	6838      	ldr	r0, [r7, #0]
    6f40:	4b42      	ldr	r3, [pc, #264]	; (704c <_i2c_m_sync_init_impl+0x118>)
    6f42:	4798      	blx	r3
    6f44:	4603      	mov	r3, r0
    6f46:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6f48:	2101      	movs	r1, #1
    6f4a:	6838      	ldr	r0, [r7, #0]
    6f4c:	4b40      	ldr	r3, [pc, #256]	; (7050 <_i2c_m_sync_init_impl+0x11c>)
    6f4e:	4798      	blx	r3
    6f50:	4603      	mov	r3, r0
    6f52:	f083 0301 	eor.w	r3, r3, #1
    6f56:	b2db      	uxtb	r3, r3
    6f58:	2b00      	cmp	r3, #0
    6f5a:	d020      	beq.n	6f9e <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6f5c:	7bfa      	ldrb	r2, [r7, #15]
    6f5e:	493d      	ldr	r1, [pc, #244]	; (7054 <_i2c_m_sync_init_impl+0x120>)
    6f60:	4613      	mov	r3, r2
    6f62:	005b      	lsls	r3, r3, #1
    6f64:	4413      	add	r3, r2
    6f66:	00db      	lsls	r3, r3, #3
    6f68:	440b      	add	r3, r1
    6f6a:	3304      	adds	r3, #4
    6f6c:	681b      	ldr	r3, [r3, #0]
    6f6e:	f003 031c 	and.w	r3, r3, #28
    6f72:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6f74:	2102      	movs	r1, #2
    6f76:	6838      	ldr	r0, [r7, #0]
    6f78:	4b37      	ldr	r3, [pc, #220]	; (7058 <_i2c_m_sync_init_impl+0x124>)
    6f7a:	4798      	blx	r3
    6f7c:	4603      	mov	r3, r0
    6f7e:	2b00      	cmp	r3, #0
    6f80:	d006      	beq.n	6f90 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    6f82:	6838      	ldr	r0, [r7, #0]
    6f84:	4b35      	ldr	r3, [pc, #212]	; (705c <_i2c_m_sync_init_impl+0x128>)
    6f86:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    6f88:	2102      	movs	r1, #2
    6f8a:	6838      	ldr	r0, [r7, #0]
    6f8c:	4b34      	ldr	r3, [pc, #208]	; (7060 <_i2c_m_sync_init_impl+0x12c>)
    6f8e:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6f90:	68bb      	ldr	r3, [r7, #8]
    6f92:	f043 0301 	orr.w	r3, r3, #1
    6f96:	4619      	mov	r1, r3
    6f98:	6838      	ldr	r0, [r7, #0]
    6f9a:	4b32      	ldr	r3, [pc, #200]	; (7064 <_i2c_m_sync_init_impl+0x130>)
    6f9c:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    6f9e:	2101      	movs	r1, #1
    6fa0:	6838      	ldr	r0, [r7, #0]
    6fa2:	4b2f      	ldr	r3, [pc, #188]	; (7060 <_i2c_m_sync_init_impl+0x12c>)
    6fa4:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6fa6:	7bfa      	ldrb	r2, [r7, #15]
    6fa8:	492a      	ldr	r1, [pc, #168]	; (7054 <_i2c_m_sync_init_impl+0x120>)
    6faa:	4613      	mov	r3, r2
    6fac:	005b      	lsls	r3, r3, #1
    6fae:	4413      	add	r3, r2
    6fb0:	00db      	lsls	r3, r3, #3
    6fb2:	440b      	add	r3, r1
    6fb4:	3304      	adds	r3, #4
    6fb6:	681b      	ldr	r3, [r3, #0]
    6fb8:	4619      	mov	r1, r3
    6fba:	6838      	ldr	r0, [r7, #0]
    6fbc:	4b29      	ldr	r3, [pc, #164]	; (7064 <_i2c_m_sync_init_impl+0x130>)
    6fbe:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6fc0:	7bfa      	ldrb	r2, [r7, #15]
    6fc2:	4924      	ldr	r1, [pc, #144]	; (7054 <_i2c_m_sync_init_impl+0x120>)
    6fc4:	4613      	mov	r3, r2
    6fc6:	005b      	lsls	r3, r3, #1
    6fc8:	4413      	add	r3, r2
    6fca:	00db      	lsls	r3, r3, #3
    6fcc:	440b      	add	r3, r1
    6fce:	3308      	adds	r3, #8
    6fd0:	681b      	ldr	r3, [r3, #0]
    6fd2:	4619      	mov	r1, r3
    6fd4:	6838      	ldr	r0, [r7, #0]
    6fd6:	4b24      	ldr	r3, [pc, #144]	; (7068 <_i2c_m_sync_init_impl+0x134>)
    6fd8:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6fda:	7bfa      	ldrb	r2, [r7, #15]
    6fdc:	491d      	ldr	r1, [pc, #116]	; (7054 <_i2c_m_sync_init_impl+0x120>)
    6fde:	4613      	mov	r3, r2
    6fe0:	005b      	lsls	r3, r3, #1
    6fe2:	4413      	add	r3, r2
    6fe4:	00db      	lsls	r3, r3, #3
    6fe6:	440b      	add	r3, r1
    6fe8:	330c      	adds	r3, #12
    6fea:	681b      	ldr	r3, [r3, #0]
    6fec:	4619      	mov	r1, r3
    6fee:	6838      	ldr	r0, [r7, #0]
    6ff0:	4b1e      	ldr	r3, [pc, #120]	; (706c <_i2c_m_sync_init_impl+0x138>)
    6ff2:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6ff4:	7bfa      	ldrb	r2, [r7, #15]
    6ff6:	4917      	ldr	r1, [pc, #92]	; (7054 <_i2c_m_sync_init_impl+0x120>)
    6ff8:	4613      	mov	r3, r2
    6ffa:	005b      	lsls	r3, r3, #1
    6ffc:	4413      	add	r3, r2
    6ffe:	00db      	lsls	r3, r3, #3
    7000:	440b      	add	r3, r1
    7002:	3304      	adds	r3, #4
    7004:	681b      	ldr	r3, [r3, #0]
    7006:	0e1b      	lsrs	r3, r3, #24
    7008:	b29b      	uxth	r3, r3
    700a:	f003 0303 	and.w	r3, r3, #3
    700e:	b29a      	uxth	r2, r3
    7010:	687b      	ldr	r3, [r7, #4]
    7012:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    7014:	687b      	ldr	r3, [r7, #4]
    7016:	899b      	ldrh	r3, [r3, #12]
    7018:	2b01      	cmp	r3, #1
    701a:	bf8c      	ite	hi
    701c:	2301      	movhi	r3, #1
    701e:	2300      	movls	r3, #0
    7020:	b2db      	uxtb	r3, r3
    7022:	4619      	mov	r1, r3
    7024:	6838      	ldr	r0, [r7, #0]
    7026:	4b12      	ldr	r3, [pc, #72]	; (7070 <_i2c_m_sync_init_impl+0x13c>)
    7028:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    702a:	7bfa      	ldrb	r2, [r7, #15]
    702c:	4909      	ldr	r1, [pc, #36]	; (7054 <_i2c_m_sync_init_impl+0x120>)
    702e:	4613      	mov	r3, r2
    7030:	005b      	lsls	r3, r3, #1
    7032:	4413      	add	r3, r2
    7034:	00db      	lsls	r3, r3, #3
    7036:	440b      	add	r3, r1
    7038:	3312      	adds	r3, #18
    703a:	881a      	ldrh	r2, [r3, #0]
    703c:	687b      	ldr	r3, [r7, #4]
    703e:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    7040:	2300      	movs	r3, #0
}
    7042:	4618      	mov	r0, r3
    7044:	3710      	adds	r7, #16
    7046:	46bd      	mov	sp, r7
    7048:	bd80      	pop	{r7, pc}
    704a:	bf00      	nop
    704c:	000064d5 	.word	0x000064d5
    7050:	00005e61 	.word	0x00005e61
    7054:	20000018 	.word	0x20000018
    7058:	00006021 	.word	0x00006021
    705c:	00005fc9 	.word	0x00005fc9
    7060:	00005e3d 	.word	0x00005e3d
    7064:	00006051 	.word	0x00006051
    7068:	000061f9 	.word	0x000061f9
    706c:	00006241 	.word	0x00006241
    7070:	0000627d 	.word	0x0000627d

00007074 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    7074:	b580      	push	{r7, lr}
    7076:	b082      	sub	sp, #8
    7078:	af00      	add	r7, sp, #0
    707a:	6078      	str	r0, [r7, #4]
    707c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    707e:	687b      	ldr	r3, [r7, #4]
    7080:	2b00      	cmp	r3, #0
    7082:	d004      	beq.n	708e <_spi_load_regs_master+0x1a>
    7084:	683b      	ldr	r3, [r7, #0]
    7086:	2b00      	cmp	r3, #0
    7088:	d001      	beq.n	708e <_spi_load_regs_master+0x1a>
    708a:	2301      	movs	r3, #1
    708c:	e000      	b.n	7090 <_spi_load_regs_master+0x1c>
    708e:	2300      	movs	r3, #0
    7090:	f003 0301 	and.w	r3, r3, #1
    7094:	b2db      	uxtb	r3, r3
    7096:	f640 1239 	movw	r2, #2361	; 0x939
    709a:	4915      	ldr	r1, [pc, #84]	; (70f0 <_spi_load_regs_master+0x7c>)
    709c:	4618      	mov	r0, r3
    709e:	4b15      	ldr	r3, [pc, #84]	; (70f4 <_spi_load_regs_master+0x80>)
    70a0:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    70a2:	683b      	ldr	r3, [r7, #0]
    70a4:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    70a6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    70aa:	f023 0301 	bic.w	r3, r3, #1
    70ae:	4619      	mov	r1, r3
    70b0:	6878      	ldr	r0, [r7, #4]
    70b2:	4b11      	ldr	r3, [pc, #68]	; (70f8 <_spi_load_regs_master+0x84>)
    70b4:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    70b6:	683b      	ldr	r3, [r7, #0]
    70b8:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    70ba:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    70be:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    70c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    70c6:	4619      	mov	r1, r3
    70c8:	6878      	ldr	r0, [r7, #4]
    70ca:	4b0c      	ldr	r3, [pc, #48]	; (70fc <_spi_load_regs_master+0x88>)
    70cc:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    70ce:	683b      	ldr	r3, [r7, #0]
    70d0:	7b1b      	ldrb	r3, [r3, #12]
    70d2:	4619      	mov	r1, r3
    70d4:	6878      	ldr	r0, [r7, #4]
    70d6:	4b0a      	ldr	r3, [pc, #40]	; (7100 <_spi_load_regs_master+0x8c>)
    70d8:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    70da:	683b      	ldr	r3, [r7, #0]
    70dc:	7b5b      	ldrb	r3, [r3, #13]
    70de:	4619      	mov	r1, r3
    70e0:	6878      	ldr	r0, [r7, #4]
    70e2:	4b08      	ldr	r3, [pc, #32]	; (7104 <_spi_load_regs_master+0x90>)
    70e4:	4798      	blx	r3
}
    70e6:	bf00      	nop
    70e8:	3708      	adds	r7, #8
    70ea:	46bd      	mov	sp, r7
    70ec:	bd80      	pop	{r7, pc}
    70ee:	bf00      	nop
    70f0:	0000f56c 	.word	0x0000f56c
    70f4:	0000389d 	.word	0x0000389d
    70f8:	00006105 	.word	0x00006105
    70fc:	0000621d 	.word	0x0000621d
    7100:	0000625d 	.word	0x0000625d
    7104:	00006395 	.word	0x00006395

00007108 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    7108:	b580      	push	{r7, lr}
    710a:	b082      	sub	sp, #8
    710c:	af00      	add	r7, sp, #0
    710e:	6078      	str	r0, [r7, #4]
    7110:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    7112:	687b      	ldr	r3, [r7, #4]
    7114:	2b00      	cmp	r3, #0
    7116:	d004      	beq.n	7122 <_spi_load_regs_slave+0x1a>
    7118:	683b      	ldr	r3, [r7, #0]
    711a:	2b00      	cmp	r3, #0
    711c:	d001      	beq.n	7122 <_spi_load_regs_slave+0x1a>
    711e:	2301      	movs	r3, #1
    7120:	e000      	b.n	7124 <_spi_load_regs_slave+0x1c>
    7122:	2300      	movs	r3, #0
    7124:	f003 0301 	and.w	r3, r3, #1
    7128:	b2db      	uxtb	r3, r3
    712a:	f640 124d 	movw	r2, #2381	; 0x94d
    712e:	491a      	ldr	r1, [pc, #104]	; (7198 <_spi_load_regs_slave+0x90>)
    7130:	4618      	mov	r0, r3
    7132:	4b1a      	ldr	r3, [pc, #104]	; (719c <_spi_load_regs_slave+0x94>)
    7134:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7136:	683b      	ldr	r3, [r7, #0]
    7138:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    713a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    713e:	f023 0301 	bic.w	r3, r3, #1
    7142:	4619      	mov	r1, r3
    7144:	6878      	ldr	r0, [r7, #4]
    7146:	4b16      	ldr	r3, [pc, #88]	; (71a0 <_spi_load_regs_slave+0x98>)
    7148:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    714a:	683b      	ldr	r3, [r7, #0]
    714c:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    714e:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    7152:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    7156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    715a:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    715e:	4619      	mov	r1, r3
    7160:	6878      	ldr	r0, [r7, #4]
    7162:	4b10      	ldr	r3, [pc, #64]	; (71a4 <_spi_load_regs_slave+0x9c>)
    7164:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    7166:	683b      	ldr	r3, [r7, #0]
    7168:	689b      	ldr	r3, [r3, #8]
    716a:	4619      	mov	r1, r3
    716c:	6878      	ldr	r0, [r7, #4]
    716e:	4b0e      	ldr	r3, [pc, #56]	; (71a8 <_spi_load_regs_slave+0xa0>)
    7170:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7172:	683b      	ldr	r3, [r7, #0]
    7174:	7b5b      	ldrb	r3, [r3, #13]
    7176:	4619      	mov	r1, r3
    7178:	6878      	ldr	r0, [r7, #4]
    717a:	4b0c      	ldr	r3, [pc, #48]	; (71ac <_spi_load_regs_slave+0xa4>)
    717c:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    717e:	bf00      	nop
    7180:	f04f 31ff 	mov.w	r1, #4294967295
    7184:	6878      	ldr	r0, [r7, #4]
    7186:	4b0a      	ldr	r3, [pc, #40]	; (71b0 <_spi_load_regs_slave+0xa8>)
    7188:	4798      	blx	r3
    718a:	4603      	mov	r3, r0
    718c:	2b00      	cmp	r3, #0
    718e:	d1f7      	bne.n	7180 <_spi_load_regs_slave+0x78>
		;
}
    7190:	bf00      	nop
    7192:	3708      	adds	r7, #8
    7194:	46bd      	mov	sp, r7
    7196:	bd80      	pop	{r7, pc}
    7198:	0000f56c 	.word	0x0000f56c
    719c:	0000389d 	.word	0x0000389d
    71a0:	00006105 	.word	0x00006105
    71a4:	0000621d 	.word	0x0000621d
    71a8:	00006301 	.word	0x00006301
    71ac:	00006395 	.word	0x00006395
    71b0:	00005ead 	.word	0x00005ead

000071b4 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    71b4:	b580      	push	{r7, lr}
    71b6:	b084      	sub	sp, #16
    71b8:	af00      	add	r7, sp, #0
    71ba:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    71bc:	687b      	ldr	r3, [r7, #4]
    71be:	4618      	mov	r0, r3
    71c0:	4b11      	ldr	r3, [pc, #68]	; (7208 <_spi_get_regs+0x54>)
    71c2:	4798      	blx	r3
    71c4:	4603      	mov	r3, r0
    71c6:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    71c8:	2300      	movs	r3, #0
    71ca:	73fb      	strb	r3, [r7, #15]
    71cc:	e014      	b.n	71f8 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    71ce:	7bfa      	ldrb	r2, [r7, #15]
    71d0:	490e      	ldr	r1, [pc, #56]	; (720c <_spi_get_regs+0x58>)
    71d2:	4613      	mov	r3, r2
    71d4:	011b      	lsls	r3, r3, #4
    71d6:	4413      	add	r3, r2
    71d8:	440b      	add	r3, r1
    71da:	3310      	adds	r3, #16
    71dc:	781b      	ldrb	r3, [r3, #0]
    71de:	7bba      	ldrb	r2, [r7, #14]
    71e0:	429a      	cmp	r2, r3
    71e2:	d106      	bne.n	71f2 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    71e4:	7bfa      	ldrb	r2, [r7, #15]
    71e6:	4613      	mov	r3, r2
    71e8:	011b      	lsls	r3, r3, #4
    71ea:	4413      	add	r3, r2
    71ec:	4a07      	ldr	r2, [pc, #28]	; (720c <_spi_get_regs+0x58>)
    71ee:	4413      	add	r3, r2
    71f0:	e006      	b.n	7200 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    71f2:	7bfb      	ldrb	r3, [r7, #15]
    71f4:	3301      	adds	r3, #1
    71f6:	73fb      	strb	r3, [r7, #15]
    71f8:	7bfb      	ldrb	r3, [r7, #15]
    71fa:	2b01      	cmp	r3, #1
    71fc:	d9e7      	bls.n	71ce <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    71fe:	2300      	movs	r3, #0
}
    7200:	4618      	mov	r0, r3
    7202:	3710      	adds	r7, #16
    7204:	46bd      	mov	sp, r7
    7206:	bd80      	pop	{r7, pc}
    7208:	0000644d 	.word	0x0000644d
    720c:	0000f5a8 	.word	0x0000f5a8

00007210 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    7210:	b580      	push	{r7, lr}
    7212:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    7214:	4b03      	ldr	r3, [pc, #12]	; (7224 <SERCOM7_0_Handler+0x14>)
    7216:	681b      	ldr	r3, [r3, #0]
    7218:	4618      	mov	r0, r3
    721a:	4b03      	ldr	r3, [pc, #12]	; (7228 <SERCOM7_0_Handler+0x18>)
    721c:	4798      	blx	r3
}
    721e:	bf00      	nop
    7220:	bd80      	pop	{r7, pc}
    7222:	bf00      	nop
    7224:	200009a0 	.word	0x200009a0
    7228:	00006789 	.word	0x00006789

0000722c <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    722c:	b580      	push	{r7, lr}
    722e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    7230:	4b03      	ldr	r3, [pc, #12]	; (7240 <SERCOM7_1_Handler+0x14>)
    7232:	681b      	ldr	r3, [r3, #0]
    7234:	4618      	mov	r0, r3
    7236:	4b03      	ldr	r3, [pc, #12]	; (7244 <SERCOM7_1_Handler+0x18>)
    7238:	4798      	blx	r3
}
    723a:	bf00      	nop
    723c:	bd80      	pop	{r7, pc}
    723e:	bf00      	nop
    7240:	200009a0 	.word	0x200009a0
    7244:	00006789 	.word	0x00006789

00007248 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    7248:	b580      	push	{r7, lr}
    724a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    724c:	4b03      	ldr	r3, [pc, #12]	; (725c <SERCOM7_2_Handler+0x14>)
    724e:	681b      	ldr	r3, [r3, #0]
    7250:	4618      	mov	r0, r3
    7252:	4b03      	ldr	r3, [pc, #12]	; (7260 <SERCOM7_2_Handler+0x18>)
    7254:	4798      	blx	r3
}
    7256:	bf00      	nop
    7258:	bd80      	pop	{r7, pc}
    725a:	bf00      	nop
    725c:	200009a0 	.word	0x200009a0
    7260:	00006789 	.word	0x00006789

00007264 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    7264:	b580      	push	{r7, lr}
    7266:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    7268:	4b03      	ldr	r3, [pc, #12]	; (7278 <SERCOM7_3_Handler+0x14>)
    726a:	681b      	ldr	r3, [r3, #0]
    726c:	4618      	mov	r0, r3
    726e:	4b03      	ldr	r3, [pc, #12]	; (727c <SERCOM7_3_Handler+0x18>)
    7270:	4798      	blx	r3
}
    7272:	bf00      	nop
    7274:	bd80      	pop	{r7, pc}
    7276:	bf00      	nop
    7278:	200009a0 	.word	0x200009a0
    727c:	00006789 	.word	0x00006789

00007280 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    7280:	b580      	push	{r7, lr}
    7282:	b084      	sub	sp, #16
    7284:	af00      	add	r7, sp, #0
    7286:	6078      	str	r0, [r7, #4]
    7288:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    728a:	683b      	ldr	r3, [r7, #0]
    728c:	4618      	mov	r0, r3
    728e:	4b35      	ldr	r3, [pc, #212]	; (7364 <_spi_m_sync_init+0xe4>)
    7290:	4798      	blx	r3
    7292:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    7294:	687b      	ldr	r3, [r7, #4]
    7296:	2b00      	cmp	r3, #0
    7298:	d004      	beq.n	72a4 <_spi_m_sync_init+0x24>
    729a:	683b      	ldr	r3, [r7, #0]
    729c:	2b00      	cmp	r3, #0
    729e:	d001      	beq.n	72a4 <_spi_m_sync_init+0x24>
    72a0:	2301      	movs	r3, #1
    72a2:	e000      	b.n	72a6 <_spi_m_sync_init+0x26>
    72a4:	2300      	movs	r3, #0
    72a6:	f003 0301 	and.w	r3, r3, #1
    72aa:	b2db      	uxtb	r3, r3
    72ac:	f640 128c 	movw	r2, #2444	; 0x98c
    72b0:	492d      	ldr	r1, [pc, #180]	; (7368 <_spi_m_sync_init+0xe8>)
    72b2:	4618      	mov	r0, r3
    72b4:	4b2d      	ldr	r3, [pc, #180]	; (736c <_spi_m_sync_init+0xec>)
    72b6:	4798      	blx	r3

	if (regs == NULL) {
    72b8:	68fb      	ldr	r3, [r7, #12]
    72ba:	2b00      	cmp	r3, #0
    72bc:	d102      	bne.n	72c4 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    72be:	f06f 030c 	mvn.w	r3, #12
    72c2:	e04a      	b.n	735a <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    72c4:	2101      	movs	r1, #1
    72c6:	6838      	ldr	r0, [r7, #0]
    72c8:	4b29      	ldr	r3, [pc, #164]	; (7370 <_spi_m_sync_init+0xf0>)
    72ca:	4798      	blx	r3
    72cc:	4603      	mov	r3, r0
    72ce:	f083 0301 	eor.w	r3, r3, #1
    72d2:	b2db      	uxtb	r3, r3
    72d4:	2b00      	cmp	r3, #0
    72d6:	d019      	beq.n	730c <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    72d8:	68fb      	ldr	r3, [r7, #12]
    72da:	681b      	ldr	r3, [r3, #0]
    72dc:	f003 031c 	and.w	r3, r3, #28
    72e0:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    72e2:	2102      	movs	r1, #2
    72e4:	6838      	ldr	r0, [r7, #0]
    72e6:	4b23      	ldr	r3, [pc, #140]	; (7374 <_spi_m_sync_init+0xf4>)
    72e8:	4798      	blx	r3
    72ea:	4603      	mov	r3, r0
    72ec:	2b00      	cmp	r3, #0
    72ee:	d006      	beq.n	72fe <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    72f0:	6838      	ldr	r0, [r7, #0]
    72f2:	4b21      	ldr	r3, [pc, #132]	; (7378 <_spi_m_sync_init+0xf8>)
    72f4:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    72f6:	2102      	movs	r1, #2
    72f8:	6838      	ldr	r0, [r7, #0]
    72fa:	4b20      	ldr	r3, [pc, #128]	; (737c <_spi_m_sync_init+0xfc>)
    72fc:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    72fe:	68bb      	ldr	r3, [r7, #8]
    7300:	f043 0301 	orr.w	r3, r3, #1
    7304:	4619      	mov	r1, r3
    7306:	6838      	ldr	r0, [r7, #0]
    7308:	4b1d      	ldr	r3, [pc, #116]	; (7380 <_spi_m_sync_init+0x100>)
    730a:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    730c:	2101      	movs	r1, #1
    730e:	6838      	ldr	r0, [r7, #0]
    7310:	4b1a      	ldr	r3, [pc, #104]	; (737c <_spi_m_sync_init+0xfc>)
    7312:	4798      	blx	r3

	dev->prvt = hw;
    7314:	687b      	ldr	r3, [r7, #4]
    7316:	683a      	ldr	r2, [r7, #0]
    7318:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    731a:	68fb      	ldr	r3, [r7, #12]
    731c:	681b      	ldr	r3, [r3, #0]
    731e:	f003 031c 	and.w	r3, r3, #28
    7322:	2b08      	cmp	r3, #8
    7324:	d104      	bne.n	7330 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    7326:	68f9      	ldr	r1, [r7, #12]
    7328:	6838      	ldr	r0, [r7, #0]
    732a:	4b16      	ldr	r3, [pc, #88]	; (7384 <_spi_m_sync_init+0x104>)
    732c:	4798      	blx	r3
    732e:	e003      	b.n	7338 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    7330:	68f9      	ldr	r1, [r7, #12]
    7332:	6838      	ldr	r0, [r7, #0]
    7334:	4b14      	ldr	r3, [pc, #80]	; (7388 <_spi_m_sync_init+0x108>)
    7336:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    7338:	68fb      	ldr	r3, [r7, #12]
    733a:	685b      	ldr	r3, [r3, #4]
    733c:	f003 0307 	and.w	r3, r3, #7
    7340:	2b00      	cmp	r3, #0
    7342:	d101      	bne.n	7348 <_spi_m_sync_init+0xc8>
    7344:	2201      	movs	r2, #1
    7346:	e000      	b.n	734a <_spi_m_sync_init+0xca>
    7348:	2202      	movs	r2, #2
    734a:	687b      	ldr	r3, [r7, #4]
    734c:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    734e:	68fb      	ldr	r3, [r7, #12]
    7350:	89db      	ldrh	r3, [r3, #14]
    7352:	b29a      	uxth	r2, r3
    7354:	687b      	ldr	r3, [r7, #4]
    7356:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    7358:	2300      	movs	r3, #0
}
    735a:	4618      	mov	r0, r3
    735c:	3710      	adds	r7, #16
    735e:	46bd      	mov	sp, r7
    7360:	bd80      	pop	{r7, pc}
    7362:	bf00      	nop
    7364:	000071b5 	.word	0x000071b5
    7368:	0000f56c 	.word	0x0000f56c
    736c:	0000389d 	.word	0x0000389d
    7370:	00005ead 	.word	0x00005ead
    7374:	000060d5 	.word	0x000060d5
    7378:	000060ad 	.word	0x000060ad
    737c:	00005e89 	.word	0x00005e89
    7380:	00006105 	.word	0x00006105
    7384:	00007109 	.word	0x00007109
    7388:	00007075 	.word	0x00007075

0000738c <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    738c:	b580      	push	{r7, lr}
    738e:	b082      	sub	sp, #8
    7390:	af00      	add	r7, sp, #0
    7392:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    7394:	bf00      	nop
    7396:	2103      	movs	r1, #3
    7398:	6878      	ldr	r0, [r7, #4]
    739a:	4b06      	ldr	r3, [pc, #24]	; (73b4 <_spi_wait_bus_idle+0x28>)
    739c:	4798      	blx	r3
    739e:	4603      	mov	r3, r0
    73a0:	2b00      	cmp	r3, #0
    73a2:	d0f8      	beq.n	7396 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    73a4:	2103      	movs	r1, #3
    73a6:	6878      	ldr	r0, [r7, #4]
    73a8:	4b03      	ldr	r3, [pc, #12]	; (73b8 <_spi_wait_bus_idle+0x2c>)
    73aa:	4798      	blx	r3
}
    73ac:	bf00      	nop
    73ae:	3708      	adds	r7, #8
    73b0:	46bd      	mov	sp, r7
    73b2:	bd80      	pop	{r7, pc}
    73b4:	00005f41 	.word	0x00005f41
    73b8:	00005f83 	.word	0x00005f83

000073bc <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    73bc:	b580      	push	{r7, lr}
    73be:	b086      	sub	sp, #24
    73c0:	af00      	add	r7, sp, #0
    73c2:	60f8      	str	r0, [r7, #12]
    73c4:	60b9      	str	r1, [r7, #8]
    73c6:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    73c8:	68bb      	ldr	r3, [r7, #8]
    73ca:	f003 0304 	and.w	r3, r3, #4
    73ce:	2b00      	cmp	r3, #0
    73d0:	d101      	bne.n	73d6 <_spi_rx_check_and_receive+0x1a>
		return false;
    73d2:	2300      	movs	r3, #0
    73d4:	e022      	b.n	741c <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    73d6:	68f8      	ldr	r0, [r7, #12]
    73d8:	4b12      	ldr	r3, [pc, #72]	; (7424 <_spi_rx_check_and_receive+0x68>)
    73da:	4798      	blx	r3
    73dc:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    73de:	687b      	ldr	r3, [r7, #4]
    73e0:	685b      	ldr	r3, [r3, #4]
    73e2:	2b00      	cmp	r3, #0
    73e4:	d014      	beq.n	7410 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    73e6:	687b      	ldr	r3, [r7, #4]
    73e8:	685b      	ldr	r3, [r3, #4]
    73ea:	1c59      	adds	r1, r3, #1
    73ec:	687a      	ldr	r2, [r7, #4]
    73ee:	6051      	str	r1, [r2, #4]
    73f0:	697a      	ldr	r2, [r7, #20]
    73f2:	b2d2      	uxtb	r2, r2
    73f4:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    73f6:	687b      	ldr	r3, [r7, #4]
    73f8:	7c1b      	ldrb	r3, [r3, #16]
    73fa:	2b01      	cmp	r3, #1
    73fc:	d908      	bls.n	7410 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    73fe:	687b      	ldr	r3, [r7, #4]
    7400:	685b      	ldr	r3, [r3, #4]
    7402:	1c59      	adds	r1, r3, #1
    7404:	687a      	ldr	r2, [r7, #4]
    7406:	6051      	str	r1, [r2, #4]
    7408:	697a      	ldr	r2, [r7, #20]
    740a:	0a12      	lsrs	r2, r2, #8
    740c:	b2d2      	uxtb	r2, r2
    740e:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    7410:	687b      	ldr	r3, [r7, #4]
    7412:	68db      	ldr	r3, [r3, #12]
    7414:	1c5a      	adds	r2, r3, #1
    7416:	687b      	ldr	r3, [r7, #4]
    7418:	60da      	str	r2, [r3, #12]

	return true;
    741a:	2301      	movs	r3, #1
}
    741c:	4618      	mov	r0, r3
    741e:	3718      	adds	r7, #24
    7420:	46bd      	mov	sp, r7
    7422:	bd80      	pop	{r7, pc}
    7424:	0000637d 	.word	0x0000637d

00007428 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    7428:	b580      	push	{r7, lr}
    742a:	b086      	sub	sp, #24
    742c:	af00      	add	r7, sp, #0
    742e:	60f8      	str	r0, [r7, #12]
    7430:	60b9      	str	r1, [r7, #8]
    7432:	607a      	str	r2, [r7, #4]
    7434:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    7436:	68bb      	ldr	r3, [r7, #8]
    7438:	f003 0301 	and.w	r3, r3, #1
    743c:	2b00      	cmp	r3, #0
    743e:	d028      	beq.n	7492 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    7440:	687b      	ldr	r3, [r7, #4]
    7442:	681b      	ldr	r3, [r3, #0]
    7444:	2b00      	cmp	r3, #0
    7446:	d018      	beq.n	747a <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    7448:	687b      	ldr	r3, [r7, #4]
    744a:	681b      	ldr	r3, [r3, #0]
    744c:	1c59      	adds	r1, r3, #1
    744e:	687a      	ldr	r2, [r7, #4]
    7450:	6011      	str	r1, [r2, #0]
    7452:	781b      	ldrb	r3, [r3, #0]
    7454:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    7456:	687b      	ldr	r3, [r7, #4]
    7458:	7c1b      	ldrb	r3, [r3, #16]
    745a:	2b01      	cmp	r3, #1
    745c:	d90f      	bls.n	747e <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    745e:	687b      	ldr	r3, [r7, #4]
    7460:	681b      	ldr	r3, [r3, #0]
    7462:	781b      	ldrb	r3, [r3, #0]
    7464:	021b      	lsls	r3, r3, #8
    7466:	461a      	mov	r2, r3
    7468:	697b      	ldr	r3, [r7, #20]
    746a:	4313      	orrs	r3, r2
    746c:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    746e:	687b      	ldr	r3, [r7, #4]
    7470:	681b      	ldr	r3, [r3, #0]
    7472:	1c5a      	adds	r2, r3, #1
    7474:	687b      	ldr	r3, [r7, #4]
    7476:	601a      	str	r2, [r3, #0]
    7478:	e001      	b.n	747e <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    747a:	887b      	ldrh	r3, [r7, #2]
    747c:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    747e:	687b      	ldr	r3, [r7, #4]
    7480:	689b      	ldr	r3, [r3, #8]
    7482:	1c5a      	adds	r2, r3, #1
    7484:	687b      	ldr	r3, [r7, #4]
    7486:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    7488:	6979      	ldr	r1, [r7, #20]
    748a:	68f8      	ldr	r0, [r7, #12]
    748c:	4b03      	ldr	r3, [pc, #12]	; (749c <_spi_tx_check_and_send+0x74>)
    748e:	4798      	blx	r3
    7490:	e000      	b.n	7494 <_spi_tx_check_and_send+0x6c>
		return;
    7492:	bf00      	nop
}
    7494:	3718      	adds	r7, #24
    7496:	46bd      	mov	sp, r7
    7498:	bd80      	pop	{r7, pc}
    749a:	bf00      	nop
    749c:	00006361 	.word	0x00006361

000074a0 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    74a0:	b580      	push	{r7, lr}
    74a2:	b082      	sub	sp, #8
    74a4:	af00      	add	r7, sp, #0
    74a6:	6078      	str	r0, [r7, #4]
    74a8:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    74aa:	687b      	ldr	r3, [r7, #4]
    74ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
    74b0:	2b00      	cmp	r3, #0
    74b2:	d00b      	beq.n	74cc <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    74b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    74b8:	6838      	ldr	r0, [r7, #0]
    74ba:	4b07      	ldr	r3, [pc, #28]	; (74d8 <_spi_err_check+0x38>)
    74bc:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    74be:	2180      	movs	r1, #128	; 0x80
    74c0:	6838      	ldr	r0, [r7, #0]
    74c2:	4b06      	ldr	r3, [pc, #24]	; (74dc <_spi_err_check+0x3c>)
    74c4:	4798      	blx	r3
		return ERR_OVERFLOW;
    74c6:	f06f 0312 	mvn.w	r3, #18
    74ca:	e000      	b.n	74ce <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    74cc:	2300      	movs	r3, #0
}
    74ce:	4618      	mov	r0, r3
    74d0:	3708      	adds	r7, #8
    74d2:	46bd      	mov	sp, r7
    74d4:	bd80      	pop	{r7, pc}
    74d6:	bf00      	nop
    74d8:	000063b5 	.word	0x000063b5
    74dc:	00005f83 	.word	0x00005f83

000074e0 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    74e0:	b590      	push	{r4, r7, lr}
    74e2:	b08b      	sub	sp, #44	; 0x2c
    74e4:	af00      	add	r7, sp, #0
    74e6:	6078      	str	r0, [r7, #4]
    74e8:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    74ea:	687b      	ldr	r3, [r7, #4]
    74ec:	681b      	ldr	r3, [r3, #0]
    74ee:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    74f0:	2300      	movs	r3, #0
    74f2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    74f4:	683b      	ldr	r3, [r7, #0]
    74f6:	681b      	ldr	r3, [r3, #0]
    74f8:	60bb      	str	r3, [r7, #8]
    74fa:	683b      	ldr	r3, [r7, #0]
    74fc:	685b      	ldr	r3, [r3, #4]
    74fe:	60fb      	str	r3, [r7, #12]
    7500:	2300      	movs	r3, #0
    7502:	613b      	str	r3, [r7, #16]
    7504:	2300      	movs	r3, #0
    7506:	617b      	str	r3, [r7, #20]
    7508:	687b      	ldr	r3, [r7, #4]
    750a:	791b      	ldrb	r3, [r3, #4]
    750c:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    750e:	687b      	ldr	r3, [r7, #4]
    7510:	2b00      	cmp	r3, #0
    7512:	d004      	beq.n	751e <_spi_m_sync_trans+0x3e>
    7514:	6a3b      	ldr	r3, [r7, #32]
    7516:	2b00      	cmp	r3, #0
    7518:	d001      	beq.n	751e <_spi_m_sync_trans+0x3e>
    751a:	2301      	movs	r3, #1
    751c:	e000      	b.n	7520 <_spi_m_sync_trans+0x40>
    751e:	2300      	movs	r3, #0
    7520:	f003 0301 	and.w	r3, r3, #1
    7524:	b2db      	uxtb	r3, r3
    7526:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
    752a:	492b      	ldr	r1, [pc, #172]	; (75d8 <_spi_m_sync_trans+0xf8>)
    752c:	4618      	mov	r0, r3
    752e:	4b2b      	ldr	r3, [pc, #172]	; (75dc <_spi_m_sync_trans+0xfc>)
    7530:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    7532:	2107      	movs	r1, #7
    7534:	6a38      	ldr	r0, [r7, #32]
    7536:	4b2a      	ldr	r3, [pc, #168]	; (75e0 <_spi_m_sync_trans+0x100>)
    7538:	4798      	blx	r3
    753a:	4603      	mov	r3, r0
    753c:	2b00      	cmp	r3, #0
    753e:	d002      	beq.n	7546 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    7540:	f06f 0303 	mvn.w	r3, #3
    7544:	e043      	b.n	75ce <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    7546:	6a38      	ldr	r0, [r7, #32]
    7548:	4b26      	ldr	r3, [pc, #152]	; (75e4 <_spi_m_sync_trans+0x104>)
    754a:	4798      	blx	r3
    754c:	4603      	mov	r3, r0
    754e:	f083 0301 	eor.w	r3, r3, #1
    7552:	b2db      	uxtb	r3, r3
    7554:	2b00      	cmp	r3, #0
    7556:	d002      	beq.n	755e <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    7558:	f06f 0313 	mvn.w	r3, #19
    755c:	e037      	b.n	75ce <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    755e:	6a38      	ldr	r0, [r7, #32]
    7560:	4b21      	ldr	r3, [pc, #132]	; (75e8 <_spi_m_sync_trans+0x108>)
    7562:	4798      	blx	r3
    7564:	4603      	mov	r3, r0
    7566:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    7568:	f107 0308 	add.w	r3, r7, #8
    756c:	461a      	mov	r2, r3
    756e:	69f9      	ldr	r1, [r7, #28]
    7570:	6a38      	ldr	r0, [r7, #32]
    7572:	4b1e      	ldr	r3, [pc, #120]	; (75ec <_spi_m_sync_trans+0x10c>)
    7574:	4798      	blx	r3
    7576:	4603      	mov	r3, r0
    7578:	f083 0301 	eor.w	r3, r3, #1
    757c:	b2db      	uxtb	r3, r3
    757e:	2b00      	cmp	r3, #0
    7580:	d00b      	beq.n	759a <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    7582:	697a      	ldr	r2, [r7, #20]
    7584:	693b      	ldr	r3, [r7, #16]
    7586:	429a      	cmp	r2, r3
    7588:	d307      	bcc.n	759a <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    758a:	687b      	ldr	r3, [r7, #4]
    758c:	88db      	ldrh	r3, [r3, #6]
    758e:	f107 0208 	add.w	r2, r7, #8
    7592:	69f9      	ldr	r1, [r7, #28]
    7594:	6a38      	ldr	r0, [r7, #32]
    7596:	4c16      	ldr	r4, [pc, #88]	; (75f0 <_spi_m_sync_trans+0x110>)
    7598:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    759a:	6a39      	ldr	r1, [r7, #32]
    759c:	69f8      	ldr	r0, [r7, #28]
    759e:	4b15      	ldr	r3, [pc, #84]	; (75f4 <_spi_m_sync_trans+0x114>)
    75a0:	4798      	blx	r3
    75a2:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    75a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    75a6:	2b00      	cmp	r3, #0
    75a8:	db0c      	blt.n	75c4 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    75aa:	693a      	ldr	r2, [r7, #16]
    75ac:	683b      	ldr	r3, [r7, #0]
    75ae:	689b      	ldr	r3, [r3, #8]
    75b0:	429a      	cmp	r2, r3
    75b2:	d3d4      	bcc.n	755e <_spi_m_sync_trans+0x7e>
    75b4:	697a      	ldr	r2, [r7, #20]
    75b6:	683b      	ldr	r3, [r7, #0]
    75b8:	689b      	ldr	r3, [r3, #8]
    75ba:	429a      	cmp	r2, r3
    75bc:	d3cf      	bcc.n	755e <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    75be:	693b      	ldr	r3, [r7, #16]
    75c0:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    75c2:	e000      	b.n	75c6 <_spi_m_sync_trans+0xe6>
			break;
    75c4:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    75c6:	6a38      	ldr	r0, [r7, #32]
    75c8:	4b0b      	ldr	r3, [pc, #44]	; (75f8 <_spi_m_sync_trans+0x118>)
    75ca:	4798      	blx	r3

	return rc;
    75cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    75ce:	4618      	mov	r0, r3
    75d0:	372c      	adds	r7, #44	; 0x2c
    75d2:	46bd      	mov	sp, r7
    75d4:	bd90      	pop	{r4, r7, pc}
    75d6:	bf00      	nop
    75d8:	0000f56c 	.word	0x0000f56c
    75dc:	0000389d 	.word	0x0000389d
    75e0:	00005ead 	.word	0x00005ead
    75e4:	00006075 	.word	0x00006075
    75e8:	00005f69 	.word	0x00005f69
    75ec:	000073bd 	.word	0x000073bd
    75f0:	00007429 	.word	0x00007429
    75f4:	000074a1 	.word	0x000074a1
    75f8:	0000738d 	.word	0x0000738d

000075fc <__NVIC_EnableIRQ>:
{
    75fc:	b480      	push	{r7}
    75fe:	b083      	sub	sp, #12
    7600:	af00      	add	r7, sp, #0
    7602:	4603      	mov	r3, r0
    7604:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    760a:	2b00      	cmp	r3, #0
    760c:	db0b      	blt.n	7626 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    760e:	4909      	ldr	r1, [pc, #36]	; (7634 <__NVIC_EnableIRQ+0x38>)
    7610:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7614:	095b      	lsrs	r3, r3, #5
    7616:	88fa      	ldrh	r2, [r7, #6]
    7618:	f002 021f 	and.w	r2, r2, #31
    761c:	2001      	movs	r0, #1
    761e:	fa00 f202 	lsl.w	r2, r0, r2
    7622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7626:	bf00      	nop
    7628:	370c      	adds	r7, #12
    762a:	46bd      	mov	sp, r7
    762c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7630:	4770      	bx	lr
    7632:	bf00      	nop
    7634:	e000e100 	.word	0xe000e100

00007638 <__NVIC_DisableIRQ>:
{
    7638:	b480      	push	{r7}
    763a:	b083      	sub	sp, #12
    763c:	af00      	add	r7, sp, #0
    763e:	4603      	mov	r3, r0
    7640:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7646:	2b00      	cmp	r3, #0
    7648:	db10      	blt.n	766c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    764a:	490b      	ldr	r1, [pc, #44]	; (7678 <__NVIC_DisableIRQ+0x40>)
    764c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7650:	095b      	lsrs	r3, r3, #5
    7652:	88fa      	ldrh	r2, [r7, #6]
    7654:	f002 021f 	and.w	r2, r2, #31
    7658:	2001      	movs	r0, #1
    765a:	fa00 f202 	lsl.w	r2, r0, r2
    765e:	3320      	adds	r3, #32
    7660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7664:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7668:	f3bf 8f6f 	isb	sy
}
    766c:	bf00      	nop
    766e:	370c      	adds	r7, #12
    7670:	46bd      	mov	sp, r7
    7672:	f85d 7b04 	ldr.w	r7, [sp], #4
    7676:	4770      	bx	lr
    7678:	e000e100 	.word	0xe000e100

0000767c <__NVIC_ClearPendingIRQ>:
{
    767c:	b480      	push	{r7}
    767e:	b083      	sub	sp, #12
    7680:	af00      	add	r7, sp, #0
    7682:	4603      	mov	r3, r0
    7684:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    768a:	2b00      	cmp	r3, #0
    768c:	db0c      	blt.n	76a8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    768e:	4909      	ldr	r1, [pc, #36]	; (76b4 <__NVIC_ClearPendingIRQ+0x38>)
    7690:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7694:	095b      	lsrs	r3, r3, #5
    7696:	88fa      	ldrh	r2, [r7, #6]
    7698:	f002 021f 	and.w	r2, r2, #31
    769c:	2001      	movs	r0, #1
    769e:	fa00 f202 	lsl.w	r2, r0, r2
    76a2:	3360      	adds	r3, #96	; 0x60
    76a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    76a8:	bf00      	nop
    76aa:	370c      	adds	r7, #12
    76ac:	46bd      	mov	sp, r7
    76ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    76b2:	4770      	bx	lr
    76b4:	e000e100 	.word	0xe000e100

000076b8 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    76b8:	b480      	push	{r7}
    76ba:	b083      	sub	sp, #12
    76bc:	af00      	add	r7, sp, #0
    76be:	6078      	str	r0, [r7, #4]
    76c0:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    76c2:	bf00      	nop
    76c4:	687b      	ldr	r3, [r7, #4]
    76c6:	689a      	ldr	r2, [r3, #8]
    76c8:	683b      	ldr	r3, [r7, #0]
    76ca:	4013      	ands	r3, r2
    76cc:	2b00      	cmp	r3, #0
    76ce:	d1f9      	bne.n	76c4 <hri_tcc_wait_for_sync+0xc>
	};
}
    76d0:	bf00      	nop
    76d2:	370c      	adds	r7, #12
    76d4:	46bd      	mov	sp, r7
    76d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    76da:	4770      	bx	lr

000076dc <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    76dc:	b480      	push	{r7}
    76de:	b083      	sub	sp, #12
    76e0:	af00      	add	r7, sp, #0
    76e2:	6078      	str	r0, [r7, #4]
    76e4:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    76e6:	687b      	ldr	r3, [r7, #4]
    76e8:	689a      	ldr	r2, [r3, #8]
    76ea:	683b      	ldr	r3, [r7, #0]
    76ec:	4013      	ands	r3, r2
    76ee:	2b00      	cmp	r3, #0
    76f0:	bf14      	ite	ne
    76f2:	2301      	movne	r3, #1
    76f4:	2300      	moveq	r3, #0
    76f6:	b2db      	uxtb	r3, r3
}
    76f8:	4618      	mov	r0, r3
    76fa:	370c      	adds	r7, #12
    76fc:	46bd      	mov	sp, r7
    76fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7702:	4770      	bx	lr

00007704 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7704:	b480      	push	{r7}
    7706:	b083      	sub	sp, #12
    7708:	af00      	add	r7, sp, #0
    770a:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    770c:	687b      	ldr	r3, [r7, #4]
    770e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7710:	f003 0301 	and.w	r3, r3, #1
    7714:	2b00      	cmp	r3, #0
    7716:	bf14      	ite	ne
    7718:	2301      	movne	r3, #1
    771a:	2300      	moveq	r3, #0
    771c:	b2db      	uxtb	r3, r3
}
    771e:	4618      	mov	r0, r3
    7720:	370c      	adds	r7, #12
    7722:	46bd      	mov	sp, r7
    7724:	f85d 7b04 	ldr.w	r7, [sp], #4
    7728:	4770      	bx	lr

0000772a <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    772a:	b480      	push	{r7}
    772c:	b083      	sub	sp, #12
    772e:	af00      	add	r7, sp, #0
    7730:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    7732:	687b      	ldr	r3, [r7, #4]
    7734:	2201      	movs	r2, #1
    7736:	62da      	str	r2, [r3, #44]	; 0x2c
}
    7738:	bf00      	nop
    773a:	370c      	adds	r7, #12
    773c:	46bd      	mov	sp, r7
    773e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7742:	4770      	bx	lr

00007744 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    7744:	b480      	push	{r7}
    7746:	b083      	sub	sp, #12
    7748:	af00      	add	r7, sp, #0
    774a:	6078      	str	r0, [r7, #4]
    774c:	460b      	mov	r3, r1
    774e:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    7750:	687b      	ldr	r3, [r7, #4]
    7752:	78fa      	ldrb	r2, [r7, #3]
    7754:	715a      	strb	r2, [r3, #5]
}
    7756:	bf00      	nop
    7758:	370c      	adds	r7, #12
    775a:	46bd      	mov	sp, r7
    775c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7760:	4770      	bx	lr

00007762 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    7762:	b480      	push	{r7}
    7764:	b083      	sub	sp, #12
    7766:	af00      	add	r7, sp, #0
    7768:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    776a:	687b      	ldr	r3, [r7, #4]
    776c:	2201      	movs	r2, #1
    776e:	629a      	str	r2, [r3, #40]	; 0x28
}
    7770:	bf00      	nop
    7772:	370c      	adds	r7, #12
    7774:	46bd      	mov	sp, r7
    7776:	f85d 7b04 	ldr.w	r7, [sp], #4
    777a:	4770      	bx	lr

0000777c <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    777c:	b580      	push	{r7, lr}
    777e:	b082      	sub	sp, #8
    7780:	af00      	add	r7, sp, #0
    7782:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    7784:	687b      	ldr	r3, [r7, #4]
    7786:	681b      	ldr	r3, [r3, #0]
    7788:	f043 0201 	orr.w	r2, r3, #1
    778c:	687b      	ldr	r3, [r7, #4]
    778e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7790:	2101      	movs	r1, #1
    7792:	6878      	ldr	r0, [r7, #4]
    7794:	4b02      	ldr	r3, [pc, #8]	; (77a0 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    7796:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7798:	bf00      	nop
    779a:	3708      	adds	r7, #8
    779c:	46bd      	mov	sp, r7
    779e:	bd80      	pop	{r7, pc}
    77a0:	000076b9 	.word	0x000076b9

000077a4 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    77a4:	b580      	push	{r7, lr}
    77a6:	b082      	sub	sp, #8
    77a8:	af00      	add	r7, sp, #0
    77aa:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    77ac:	687b      	ldr	r3, [r7, #4]
    77ae:	681b      	ldr	r3, [r3, #0]
    77b0:	f043 0202 	orr.w	r2, r3, #2
    77b4:	687b      	ldr	r3, [r7, #4]
    77b6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    77b8:	2103      	movs	r1, #3
    77ba:	6878      	ldr	r0, [r7, #4]
    77bc:	4b02      	ldr	r3, [pc, #8]	; (77c8 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    77be:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    77c0:	bf00      	nop
    77c2:	3708      	adds	r7, #8
    77c4:	46bd      	mov	sp, r7
    77c6:	bd80      	pop	{r7, pc}
    77c8:	000076b9 	.word	0x000076b9

000077cc <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    77cc:	b580      	push	{r7, lr}
    77ce:	b084      	sub	sp, #16
    77d0:	af00      	add	r7, sp, #0
    77d2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    77d4:	2103      	movs	r1, #3
    77d6:	6878      	ldr	r0, [r7, #4]
    77d8:	4b09      	ldr	r3, [pc, #36]	; (7800 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    77da:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    77dc:	687b      	ldr	r3, [r7, #4]
    77de:	681b      	ldr	r3, [r3, #0]
    77e0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    77e2:	68fb      	ldr	r3, [r7, #12]
    77e4:	085b      	lsrs	r3, r3, #1
    77e6:	f003 0301 	and.w	r3, r3, #1
    77ea:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    77ec:	68fb      	ldr	r3, [r7, #12]
    77ee:	2b00      	cmp	r3, #0
    77f0:	bf14      	ite	ne
    77f2:	2301      	movne	r3, #1
    77f4:	2300      	moveq	r3, #0
    77f6:	b2db      	uxtb	r3, r3
}
    77f8:	4618      	mov	r0, r3
    77fa:	3710      	adds	r7, #16
    77fc:	46bd      	mov	sp, r7
    77fe:	bd80      	pop	{r7, pc}
    7800:	000076b9 	.word	0x000076b9

00007804 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7804:	b580      	push	{r7, lr}
    7806:	b082      	sub	sp, #8
    7808:	af00      	add	r7, sp, #0
    780a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    780c:	687b      	ldr	r3, [r7, #4]
    780e:	681b      	ldr	r3, [r3, #0]
    7810:	f023 0202 	bic.w	r2, r3, #2
    7814:	687b      	ldr	r3, [r7, #4]
    7816:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7818:	2103      	movs	r1, #3
    781a:	6878      	ldr	r0, [r7, #4]
    781c:	4b02      	ldr	r3, [pc, #8]	; (7828 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    781e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7820:	bf00      	nop
    7822:	3708      	adds	r7, #8
    7824:	46bd      	mov	sp, r7
    7826:	bd80      	pop	{r7, pc}
    7828:	000076b9 	.word	0x000076b9

0000782c <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    782c:	b580      	push	{r7, lr}
    782e:	b084      	sub	sp, #16
    7830:	af00      	add	r7, sp, #0
    7832:	6078      	str	r0, [r7, #4]
    7834:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7836:	2103      	movs	r1, #3
    7838:	6878      	ldr	r0, [r7, #4]
    783a:	4b07      	ldr	r3, [pc, #28]	; (7858 <hri_tcc_get_CTRLA_reg+0x2c>)
    783c:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    783e:	687b      	ldr	r3, [r7, #4]
    7840:	681b      	ldr	r3, [r3, #0]
    7842:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7844:	68fa      	ldr	r2, [r7, #12]
    7846:	683b      	ldr	r3, [r7, #0]
    7848:	4013      	ands	r3, r2
    784a:	60fb      	str	r3, [r7, #12]
	return tmp;
    784c:	68fb      	ldr	r3, [r7, #12]
}
    784e:	4618      	mov	r0, r3
    7850:	3710      	adds	r7, #16
    7852:	46bd      	mov	sp, r7
    7854:	bd80      	pop	{r7, pc}
    7856:	bf00      	nop
    7858:	000076b9 	.word	0x000076b9

0000785c <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    785c:	b580      	push	{r7, lr}
    785e:	b082      	sub	sp, #8
    7860:	af00      	add	r7, sp, #0
    7862:	6078      	str	r0, [r7, #4]
    7864:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    7866:	687b      	ldr	r3, [r7, #4]
    7868:	683a      	ldr	r2, [r7, #0]
    786a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    786c:	2103      	movs	r1, #3
    786e:	6878      	ldr	r0, [r7, #4]
    7870:	4b02      	ldr	r3, [pc, #8]	; (787c <hri_tcc_write_CTRLA_reg+0x20>)
    7872:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7874:	bf00      	nop
    7876:	3708      	adds	r7, #8
    7878:	46bd      	mov	sp, r7
    787a:	bd80      	pop	{r7, pc}
    787c:	000076b9 	.word	0x000076b9

00007880 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    7880:	b480      	push	{r7}
    7882:	b083      	sub	sp, #12
    7884:	af00      	add	r7, sp, #0
    7886:	6078      	str	r0, [r7, #4]
    7888:	460b      	mov	r3, r1
    788a:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    788c:	687b      	ldr	r3, [r7, #4]
    788e:	78fa      	ldrb	r2, [r7, #3]
    7890:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7892:	bf00      	nop
    7894:	370c      	adds	r7, #12
    7896:	46bd      	mov	sp, r7
    7898:	f85d 7b04 	ldr.w	r7, [sp], #4
    789c:	4770      	bx	lr

0000789e <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    789e:	b480      	push	{r7}
    78a0:	b083      	sub	sp, #12
    78a2:	af00      	add	r7, sp, #0
    78a4:	6078      	str	r0, [r7, #4]
    78a6:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    78a8:	687b      	ldr	r3, [r7, #4]
    78aa:	683a      	ldr	r2, [r7, #0]
    78ac:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    78ae:	bf00      	nop
    78b0:	370c      	adds	r7, #12
    78b2:	46bd      	mov	sp, r7
    78b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    78b8:	4770      	bx	lr
	...

000078bc <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    78bc:	b580      	push	{r7, lr}
    78be:	b082      	sub	sp, #8
    78c0:	af00      	add	r7, sp, #0
    78c2:	6078      	str	r0, [r7, #4]
    78c4:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    78c6:	687b      	ldr	r3, [r7, #4]
    78c8:	683a      	ldr	r2, [r7, #0]
    78ca:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    78cc:	2180      	movs	r1, #128	; 0x80
    78ce:	6878      	ldr	r0, [r7, #4]
    78d0:	4b02      	ldr	r3, [pc, #8]	; (78dc <hri_tcc_write_PER_reg+0x20>)
    78d2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    78d4:	bf00      	nop
    78d6:	3708      	adds	r7, #8
    78d8:	46bd      	mov	sp, r7
    78da:	bd80      	pop	{r7, pc}
    78dc:	000076b9 	.word	0x000076b9

000078e0 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    78e0:	b580      	push	{r7, lr}
    78e2:	b082      	sub	sp, #8
    78e4:	af00      	add	r7, sp, #0
    78e6:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    78e8:	2180      	movs	r1, #128	; 0x80
    78ea:	6878      	ldr	r0, [r7, #4]
    78ec:	4b03      	ldr	r3, [pc, #12]	; (78fc <hri_tcc_read_PER_reg+0x1c>)
    78ee:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    78f0:	687b      	ldr	r3, [r7, #4]
    78f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    78f4:	4618      	mov	r0, r3
    78f6:	3708      	adds	r7, #8
    78f8:	46bd      	mov	sp, r7
    78fa:	bd80      	pop	{r7, pc}
    78fc:	000076b9 	.word	0x000076b9

00007900 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7900:	b480      	push	{r7}
    7902:	b083      	sub	sp, #12
    7904:	af00      	add	r7, sp, #0
    7906:	6078      	str	r0, [r7, #4]
    7908:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    790a:	687b      	ldr	r3, [r7, #4]
    790c:	4a09      	ldr	r2, [pc, #36]	; (7934 <_tcc_init_irq_param+0x34>)
    790e:	4293      	cmp	r3, r2
    7910:	d102      	bne.n	7918 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    7912:	4a09      	ldr	r2, [pc, #36]	; (7938 <_tcc_init_irq_param+0x38>)
    7914:	683b      	ldr	r3, [r7, #0]
    7916:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7918:	687b      	ldr	r3, [r7, #4]
    791a:	4a08      	ldr	r2, [pc, #32]	; (793c <_tcc_init_irq_param+0x3c>)
    791c:	4293      	cmp	r3, r2
    791e:	d102      	bne.n	7926 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    7920:	4a07      	ldr	r2, [pc, #28]	; (7940 <_tcc_init_irq_param+0x40>)
    7922:	683b      	ldr	r3, [r7, #0]
    7924:	6013      	str	r3, [r2, #0]
	}
}
    7926:	bf00      	nop
    7928:	370c      	adds	r7, #12
    792a:	46bd      	mov	sp, r7
    792c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7930:	4770      	bx	lr
    7932:	bf00      	nop
    7934:	41016000 	.word	0x41016000
    7938:	200009b4 	.word	0x200009b4
    793c:	41018000 	.word	0x41018000
    7940:	200009b8 	.word	0x200009b8

00007944 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    7944:	b580      	push	{r7, lr}
    7946:	b084      	sub	sp, #16
    7948:	af00      	add	r7, sp, #0
    794a:	6078      	str	r0, [r7, #4]
    794c:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    794e:	6838      	ldr	r0, [r7, #0]
    7950:	4b33      	ldr	r3, [pc, #204]	; (7a20 <_tcc_timer_init+0xdc>)
    7952:	4798      	blx	r3
    7954:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    7956:	68fb      	ldr	r3, [r7, #12]
    7958:	2b00      	cmp	r3, #0
    795a:	d102      	bne.n	7962 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    795c:	f06f 0309 	mvn.w	r3, #9
    7960:	e05a      	b.n	7a18 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    7962:	687b      	ldr	r3, [r7, #4]
    7964:	683a      	ldr	r2, [r7, #0]
    7966:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    7968:	2101      	movs	r1, #1
    796a:	6838      	ldr	r0, [r7, #0]
    796c:	4b2d      	ldr	r3, [pc, #180]	; (7a24 <_tcc_timer_init+0xe0>)
    796e:	4798      	blx	r3
    7970:	4603      	mov	r3, r0
    7972:	f083 0301 	eor.w	r3, r3, #1
    7976:	b2db      	uxtb	r3, r3
    7978:	2b00      	cmp	r3, #0
    797a:	d011      	beq.n	79a0 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    797c:	2102      	movs	r1, #2
    797e:	6838      	ldr	r0, [r7, #0]
    7980:	4b29      	ldr	r3, [pc, #164]	; (7a28 <_tcc_timer_init+0xe4>)
    7982:	4798      	blx	r3
    7984:	4603      	mov	r3, r0
    7986:	2b00      	cmp	r3, #0
    7988:	d006      	beq.n	7998 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    798a:	6838      	ldr	r0, [r7, #0]
    798c:	4b27      	ldr	r3, [pc, #156]	; (7a2c <_tcc_timer_init+0xe8>)
    798e:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    7990:	2102      	movs	r1, #2
    7992:	6838      	ldr	r0, [r7, #0]
    7994:	4b26      	ldr	r3, [pc, #152]	; (7a30 <_tcc_timer_init+0xec>)
    7996:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    7998:	2101      	movs	r1, #1
    799a:	6838      	ldr	r0, [r7, #0]
    799c:	4b25      	ldr	r3, [pc, #148]	; (7a34 <_tcc_timer_init+0xf0>)
    799e:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    79a0:	2101      	movs	r1, #1
    79a2:	6838      	ldr	r0, [r7, #0]
    79a4:	4b22      	ldr	r3, [pc, #136]	; (7a30 <_tcc_timer_init+0xec>)
    79a6:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    79a8:	68fb      	ldr	r3, [r7, #12]
    79aa:	689b      	ldr	r3, [r3, #8]
    79ac:	4619      	mov	r1, r3
    79ae:	6838      	ldr	r0, [r7, #0]
    79b0:	4b20      	ldr	r3, [pc, #128]	; (7a34 <_tcc_timer_init+0xf0>)
    79b2:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    79b4:	68fb      	ldr	r3, [r7, #12]
    79b6:	7b1b      	ldrb	r3, [r3, #12]
    79b8:	4619      	mov	r1, r3
    79ba:	6838      	ldr	r0, [r7, #0]
    79bc:	4b1e      	ldr	r3, [pc, #120]	; (7a38 <_tcc_timer_init+0xf4>)
    79be:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    79c0:	68fb      	ldr	r3, [r7, #12]
    79c2:	7b5b      	ldrb	r3, [r3, #13]
    79c4:	4619      	mov	r1, r3
    79c6:	6838      	ldr	r0, [r7, #0]
    79c8:	4b1c      	ldr	r3, [pc, #112]	; (7a3c <_tcc_timer_init+0xf8>)
    79ca:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    79cc:	68fb      	ldr	r3, [r7, #12]
    79ce:	691b      	ldr	r3, [r3, #16]
    79d0:	4619      	mov	r1, r3
    79d2:	6838      	ldr	r0, [r7, #0]
    79d4:	4b1a      	ldr	r3, [pc, #104]	; (7a40 <_tcc_timer_init+0xfc>)
    79d6:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    79d8:	68fb      	ldr	r3, [r7, #12]
    79da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    79dc:	4619      	mov	r1, r3
    79de:	6838      	ldr	r0, [r7, #0]
    79e0:	4b18      	ldr	r3, [pc, #96]	; (7a44 <_tcc_timer_init+0x100>)
    79e2:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    79e4:	6838      	ldr	r0, [r7, #0]
    79e6:	4b18      	ldr	r3, [pc, #96]	; (7a48 <_tcc_timer_init+0x104>)
    79e8:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    79ea:	6879      	ldr	r1, [r7, #4]
    79ec:	6838      	ldr	r0, [r7, #0]
    79ee:	4b17      	ldr	r3, [pc, #92]	; (7a4c <_tcc_timer_init+0x108>)
    79f0:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    79f2:	68fb      	ldr	r3, [r7, #12]
    79f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    79f8:	4618      	mov	r0, r3
    79fa:	4b15      	ldr	r3, [pc, #84]	; (7a50 <_tcc_timer_init+0x10c>)
    79fc:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    79fe:	68fb      	ldr	r3, [r7, #12]
    7a00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7a04:	4618      	mov	r0, r3
    7a06:	4b13      	ldr	r3, [pc, #76]	; (7a54 <_tcc_timer_init+0x110>)
    7a08:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    7a0a:	68fb      	ldr	r3, [r7, #12]
    7a0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7a10:	4618      	mov	r0, r3
    7a12:	4b11      	ldr	r3, [pc, #68]	; (7a58 <_tcc_timer_init+0x114>)
    7a14:	4798      	blx	r3

	return ERR_NONE;
    7a16:	2300      	movs	r3, #0
}
    7a18:	4618      	mov	r0, r3
    7a1a:	3710      	adds	r7, #16
    7a1c:	46bd      	mov	sp, r7
    7a1e:	bd80      	pop	{r7, pc}
    7a20:	00007c0d 	.word	0x00007c0d
    7a24:	000076dd 	.word	0x000076dd
    7a28:	0000782d 	.word	0x0000782d
    7a2c:	00007805 	.word	0x00007805
    7a30:	000076b9 	.word	0x000076b9
    7a34:	0000785d 	.word	0x0000785d
    7a38:	00007745 	.word	0x00007745
    7a3c:	00007881 	.word	0x00007881
    7a40:	0000789f 	.word	0x0000789f
    7a44:	000078bd 	.word	0x000078bd
    7a48:	00007763 	.word	0x00007763
    7a4c:	00007901 	.word	0x00007901
    7a50:	00007639 	.word	0x00007639
    7a54:	0000767d 	.word	0x0000767d
    7a58:	000075fd 	.word	0x000075fd

00007a5c <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    7a5c:	b580      	push	{r7, lr}
    7a5e:	b084      	sub	sp, #16
    7a60:	af00      	add	r7, sp, #0
    7a62:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7a64:	687b      	ldr	r3, [r7, #4]
    7a66:	68db      	ldr	r3, [r3, #12]
    7a68:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7a6a:	68f8      	ldr	r0, [r7, #12]
    7a6c:	4b0a      	ldr	r3, [pc, #40]	; (7a98 <_tcc_timer_deinit+0x3c>)
    7a6e:	4798      	blx	r3
    7a70:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7a72:	68bb      	ldr	r3, [r7, #8]
    7a74:	2b00      	cmp	r3, #0
    7a76:	d00b      	beq.n	7a90 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7a78:	68bb      	ldr	r3, [r7, #8]
    7a7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7a7e:	4618      	mov	r0, r3
    7a80:	4b06      	ldr	r3, [pc, #24]	; (7a9c <_tcc_timer_deinit+0x40>)
    7a82:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7a84:	68f8      	ldr	r0, [r7, #12]
    7a86:	4b06      	ldr	r3, [pc, #24]	; (7aa0 <_tcc_timer_deinit+0x44>)
    7a88:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    7a8a:	68f8      	ldr	r0, [r7, #12]
    7a8c:	4b05      	ldr	r3, [pc, #20]	; (7aa4 <_tcc_timer_deinit+0x48>)
    7a8e:	4798      	blx	r3
	}
}
    7a90:	bf00      	nop
    7a92:	3710      	adds	r7, #16
    7a94:	46bd      	mov	sp, r7
    7a96:	bd80      	pop	{r7, pc}
    7a98:	00007c0d 	.word	0x00007c0d
    7a9c:	00007639 	.word	0x00007639
    7aa0:	00007805 	.word	0x00007805
    7aa4:	0000777d 	.word	0x0000777d

00007aa8 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    7aa8:	b580      	push	{r7, lr}
    7aaa:	b082      	sub	sp, #8
    7aac:	af00      	add	r7, sp, #0
    7aae:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    7ab0:	687b      	ldr	r3, [r7, #4]
    7ab2:	68db      	ldr	r3, [r3, #12]
    7ab4:	4618      	mov	r0, r3
    7ab6:	4b03      	ldr	r3, [pc, #12]	; (7ac4 <_tcc_timer_start+0x1c>)
    7ab8:	4798      	blx	r3
}
    7aba:	bf00      	nop
    7abc:	3708      	adds	r7, #8
    7abe:	46bd      	mov	sp, r7
    7ac0:	bd80      	pop	{r7, pc}
    7ac2:	bf00      	nop
    7ac4:	000077a5 	.word	0x000077a5

00007ac8 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    7ac8:	b580      	push	{r7, lr}
    7aca:	b082      	sub	sp, #8
    7acc:	af00      	add	r7, sp, #0
    7ace:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    7ad0:	687b      	ldr	r3, [r7, #4]
    7ad2:	68db      	ldr	r3, [r3, #12]
    7ad4:	4618      	mov	r0, r3
    7ad6:	4b03      	ldr	r3, [pc, #12]	; (7ae4 <_tcc_timer_stop+0x1c>)
    7ad8:	4798      	blx	r3
}
    7ada:	bf00      	nop
    7adc:	3708      	adds	r7, #8
    7ade:	46bd      	mov	sp, r7
    7ae0:	bd80      	pop	{r7, pc}
    7ae2:	bf00      	nop
    7ae4:	00007805 	.word	0x00007805

00007ae8 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7ae8:	b580      	push	{r7, lr}
    7aea:	b082      	sub	sp, #8
    7aec:	af00      	add	r7, sp, #0
    7aee:	6078      	str	r0, [r7, #4]
    7af0:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    7af2:	687b      	ldr	r3, [r7, #4]
    7af4:	68db      	ldr	r3, [r3, #12]
    7af6:	6839      	ldr	r1, [r7, #0]
    7af8:	4618      	mov	r0, r3
    7afa:	4b03      	ldr	r3, [pc, #12]	; (7b08 <_tcc_timer_set_period+0x20>)
    7afc:	4798      	blx	r3
}
    7afe:	bf00      	nop
    7b00:	3708      	adds	r7, #8
    7b02:	46bd      	mov	sp, r7
    7b04:	bd80      	pop	{r7, pc}
    7b06:	bf00      	nop
    7b08:	000078bd 	.word	0x000078bd

00007b0c <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    7b0c:	b580      	push	{r7, lr}
    7b0e:	b082      	sub	sp, #8
    7b10:	af00      	add	r7, sp, #0
    7b12:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    7b14:	687b      	ldr	r3, [r7, #4]
    7b16:	68db      	ldr	r3, [r3, #12]
    7b18:	4618      	mov	r0, r3
    7b1a:	4b03      	ldr	r3, [pc, #12]	; (7b28 <_tcc_timer_get_period+0x1c>)
    7b1c:	4798      	blx	r3
    7b1e:	4603      	mov	r3, r0
}
    7b20:	4618      	mov	r0, r3
    7b22:	3708      	adds	r7, #8
    7b24:	46bd      	mov	sp, r7
    7b26:	bd80      	pop	{r7, pc}
    7b28:	000078e1 	.word	0x000078e1

00007b2c <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    7b2c:	b580      	push	{r7, lr}
    7b2e:	b082      	sub	sp, #8
    7b30:	af00      	add	r7, sp, #0
    7b32:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    7b34:	687b      	ldr	r3, [r7, #4]
    7b36:	68db      	ldr	r3, [r3, #12]
    7b38:	4618      	mov	r0, r3
    7b3a:	4b03      	ldr	r3, [pc, #12]	; (7b48 <_tcc_timer_is_started+0x1c>)
    7b3c:	4798      	blx	r3
    7b3e:	4603      	mov	r3, r0
}
    7b40:	4618      	mov	r0, r3
    7b42:	3708      	adds	r7, #8
    7b44:	46bd      	mov	sp, r7
    7b46:	bd80      	pop	{r7, pc}
    7b48:	000077cd 	.word	0x000077cd

00007b4c <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    7b4c:	b480      	push	{r7}
    7b4e:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    7b50:	4b02      	ldr	r3, [pc, #8]	; (7b5c <_tcc_get_timer+0x10>)
}
    7b52:	4618      	mov	r0, r3
    7b54:	46bd      	mov	sp, r7
    7b56:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b5a:	4770      	bx	lr
    7b5c:	200000c0 	.word	0x200000c0

00007b60 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    7b60:	b580      	push	{r7, lr}
    7b62:	b084      	sub	sp, #16
    7b64:	af00      	add	r7, sp, #0
    7b66:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7b68:	687b      	ldr	r3, [r7, #4]
    7b6a:	68db      	ldr	r3, [r3, #12]
    7b6c:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7b6e:	68f8      	ldr	r0, [r7, #12]
    7b70:	4b08      	ldr	r3, [pc, #32]	; (7b94 <_tcc_timer_set_irq+0x34>)
    7b72:	4798      	blx	r3
    7b74:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7b76:	68bb      	ldr	r3, [r7, #8]
    7b78:	2b00      	cmp	r3, #0
    7b7a:	d006      	beq.n	7b8a <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    7b7c:	68bb      	ldr	r3, [r7, #8]
    7b7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7b82:	b2db      	uxtb	r3, r3
    7b84:	4618      	mov	r0, r3
    7b86:	4b04      	ldr	r3, [pc, #16]	; (7b98 <_tcc_timer_set_irq+0x38>)
    7b88:	4798      	blx	r3
	}
}
    7b8a:	bf00      	nop
    7b8c:	3710      	adds	r7, #16
    7b8e:	46bd      	mov	sp, r7
    7b90:	bd80      	pop	{r7, pc}
    7b92:	bf00      	nop
    7b94:	00007c0d 	.word	0x00007c0d
    7b98:	000040e9 	.word	0x000040e9

00007b9c <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    7b9c:	b580      	push	{r7, lr}
    7b9e:	b084      	sub	sp, #16
    7ba0:	af00      	add	r7, sp, #0
    7ba2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7ba4:	687b      	ldr	r3, [r7, #4]
    7ba6:	68db      	ldr	r3, [r3, #12]
    7ba8:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    7baa:	68f8      	ldr	r0, [r7, #12]
    7bac:	4b07      	ldr	r3, [pc, #28]	; (7bcc <tcc_interrupt_handler+0x30>)
    7bae:	4798      	blx	r3
    7bb0:	4603      	mov	r3, r0
    7bb2:	2b00      	cmp	r3, #0
    7bb4:	d006      	beq.n	7bc4 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    7bb6:	68f8      	ldr	r0, [r7, #12]
    7bb8:	4b05      	ldr	r3, [pc, #20]	; (7bd0 <tcc_interrupt_handler+0x34>)
    7bba:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7bbc:	687b      	ldr	r3, [r7, #4]
    7bbe:	681b      	ldr	r3, [r3, #0]
    7bc0:	6878      	ldr	r0, [r7, #4]
    7bc2:	4798      	blx	r3
	}
}
    7bc4:	bf00      	nop
    7bc6:	3710      	adds	r7, #16
    7bc8:	46bd      	mov	sp, r7
    7bca:	bd80      	pop	{r7, pc}
    7bcc:	00007705 	.word	0x00007705
    7bd0:	0000772b 	.word	0x0000772b

00007bd4 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    7bd4:	b580      	push	{r7, lr}
    7bd6:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    7bd8:	4b03      	ldr	r3, [pc, #12]	; (7be8 <TCC0_0_Handler+0x14>)
    7bda:	681b      	ldr	r3, [r3, #0]
    7bdc:	4618      	mov	r0, r3
    7bde:	4b03      	ldr	r3, [pc, #12]	; (7bec <TCC0_0_Handler+0x18>)
    7be0:	4798      	blx	r3
}
    7be2:	bf00      	nop
    7be4:	bd80      	pop	{r7, pc}
    7be6:	bf00      	nop
    7be8:	200009b4 	.word	0x200009b4
    7bec:	00007b9d 	.word	0x00007b9d

00007bf0 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    7bf0:	b580      	push	{r7, lr}
    7bf2:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    7bf4:	4b03      	ldr	r3, [pc, #12]	; (7c04 <TCC1_0_Handler+0x14>)
    7bf6:	681b      	ldr	r3, [r3, #0]
    7bf8:	4618      	mov	r0, r3
    7bfa:	4b03      	ldr	r3, [pc, #12]	; (7c08 <TCC1_0_Handler+0x18>)
    7bfc:	4798      	blx	r3
}
    7bfe:	bf00      	nop
    7c00:	bd80      	pop	{r7, pc}
    7c02:	bf00      	nop
    7c04:	200009b8 	.word	0x200009b8
    7c08:	00007b9d 	.word	0x00007b9d

00007c0c <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    7c0c:	b480      	push	{r7}
    7c0e:	b085      	sub	sp, #20
    7c10:	af00      	add	r7, sp, #0
    7c12:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7c14:	2300      	movs	r3, #0
    7c16:	73fb      	strb	r3, [r7, #15]
    7c18:	e015      	b.n	7c46 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    7c1a:	7bfa      	ldrb	r2, [r7, #15]
    7c1c:	490f      	ldr	r1, [pc, #60]	; (7c5c <_get_tcc_cfg+0x50>)
    7c1e:	4613      	mov	r3, r2
    7c20:	005b      	lsls	r3, r3, #1
    7c22:	4413      	add	r3, r2
    7c24:	011b      	lsls	r3, r3, #4
    7c26:	440b      	add	r3, r1
    7c28:	681a      	ldr	r2, [r3, #0]
    7c2a:	687b      	ldr	r3, [r7, #4]
    7c2c:	429a      	cmp	r2, r3
    7c2e:	d107      	bne.n	7c40 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    7c30:	7bfa      	ldrb	r2, [r7, #15]
    7c32:	4613      	mov	r3, r2
    7c34:	005b      	lsls	r3, r3, #1
    7c36:	4413      	add	r3, r2
    7c38:	011b      	lsls	r3, r3, #4
    7c3a:	4a08      	ldr	r2, [pc, #32]	; (7c5c <_get_tcc_cfg+0x50>)
    7c3c:	4413      	add	r3, r2
    7c3e:	e006      	b.n	7c4e <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7c40:	7bfb      	ldrb	r3, [r7, #15]
    7c42:	3301      	adds	r3, #1
    7c44:	73fb      	strb	r3, [r7, #15]
    7c46:	7bfb      	ldrb	r3, [r7, #15]
    7c48:	2b01      	cmp	r3, #1
    7c4a:	d9e6      	bls.n	7c1a <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    7c4c:	2300      	movs	r3, #0
}
    7c4e:	4618      	mov	r0, r3
    7c50:	3714      	adds	r7, #20
    7c52:	46bd      	mov	sp, r7
    7c54:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c58:	4770      	bx	lr
    7c5a:	bf00      	nop
    7c5c:	20000060 	.word	0x20000060

00007c60 <__NVIC_EnableIRQ>:
{
    7c60:	b480      	push	{r7}
    7c62:	b083      	sub	sp, #12
    7c64:	af00      	add	r7, sp, #0
    7c66:	4603      	mov	r3, r0
    7c68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7c6e:	2b00      	cmp	r3, #0
    7c70:	db0b      	blt.n	7c8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7c72:	4909      	ldr	r1, [pc, #36]	; (7c98 <__NVIC_EnableIRQ+0x38>)
    7c74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7c78:	095b      	lsrs	r3, r3, #5
    7c7a:	88fa      	ldrh	r2, [r7, #6]
    7c7c:	f002 021f 	and.w	r2, r2, #31
    7c80:	2001      	movs	r0, #1
    7c82:	fa00 f202 	lsl.w	r2, r0, r2
    7c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7c8a:	bf00      	nop
    7c8c:	370c      	adds	r7, #12
    7c8e:	46bd      	mov	sp, r7
    7c90:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c94:	4770      	bx	lr
    7c96:	bf00      	nop
    7c98:	e000e100 	.word	0xe000e100

00007c9c <__NVIC_DisableIRQ>:
{
    7c9c:	b480      	push	{r7}
    7c9e:	b083      	sub	sp, #12
    7ca0:	af00      	add	r7, sp, #0
    7ca2:	4603      	mov	r3, r0
    7ca4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7caa:	2b00      	cmp	r3, #0
    7cac:	db10      	blt.n	7cd0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7cae:	490b      	ldr	r1, [pc, #44]	; (7cdc <__NVIC_DisableIRQ+0x40>)
    7cb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7cb4:	095b      	lsrs	r3, r3, #5
    7cb6:	88fa      	ldrh	r2, [r7, #6]
    7cb8:	f002 021f 	and.w	r2, r2, #31
    7cbc:	2001      	movs	r0, #1
    7cbe:	fa00 f202 	lsl.w	r2, r0, r2
    7cc2:	3320      	adds	r3, #32
    7cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7cc8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7ccc:	f3bf 8f6f 	isb	sy
}
    7cd0:	bf00      	nop
    7cd2:	370c      	adds	r7, #12
    7cd4:	46bd      	mov	sp, r7
    7cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cda:	4770      	bx	lr
    7cdc:	e000e100 	.word	0xe000e100

00007ce0 <__NVIC_ClearPendingIRQ>:
{
    7ce0:	b480      	push	{r7}
    7ce2:	b083      	sub	sp, #12
    7ce4:	af00      	add	r7, sp, #0
    7ce6:	4603      	mov	r3, r0
    7ce8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7cee:	2b00      	cmp	r3, #0
    7cf0:	db0c      	blt.n	7d0c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7cf2:	4909      	ldr	r1, [pc, #36]	; (7d18 <__NVIC_ClearPendingIRQ+0x38>)
    7cf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7cf8:	095b      	lsrs	r3, r3, #5
    7cfa:	88fa      	ldrh	r2, [r7, #6]
    7cfc:	f002 021f 	and.w	r2, r2, #31
    7d00:	2001      	movs	r0, #1
    7d02:	fa00 f202 	lsl.w	r2, r0, r2
    7d06:	3360      	adds	r3, #96	; 0x60
    7d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7d0c:	bf00      	nop
    7d0e:	370c      	adds	r7, #12
    7d10:	46bd      	mov	sp, r7
    7d12:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d16:	4770      	bx	lr
    7d18:	e000e100 	.word	0xe000e100

00007d1c <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7d1c:	b480      	push	{r7}
    7d1e:	b083      	sub	sp, #12
    7d20:	af00      	add	r7, sp, #0
    7d22:	6078      	str	r0, [r7, #4]
    7d24:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7d26:	bf00      	nop
    7d28:	687b      	ldr	r3, [r7, #4]
    7d2a:	691a      	ldr	r2, [r3, #16]
    7d2c:	683b      	ldr	r3, [r7, #0]
    7d2e:	4013      	ands	r3, r2
    7d30:	2b00      	cmp	r3, #0
    7d32:	d1f9      	bne.n	7d28 <hri_tc_wait_for_sync+0xc>
	};
}
    7d34:	bf00      	nop
    7d36:	370c      	adds	r7, #12
    7d38:	46bd      	mov	sp, r7
    7d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d3e:	4770      	bx	lr

00007d40 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7d40:	b480      	push	{r7}
    7d42:	b083      	sub	sp, #12
    7d44:	af00      	add	r7, sp, #0
    7d46:	6078      	str	r0, [r7, #4]
    7d48:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    7d4a:	687b      	ldr	r3, [r7, #4]
    7d4c:	691a      	ldr	r2, [r3, #16]
    7d4e:	683b      	ldr	r3, [r7, #0]
    7d50:	4013      	ands	r3, r2
    7d52:	2b00      	cmp	r3, #0
    7d54:	bf14      	ite	ne
    7d56:	2301      	movne	r3, #1
    7d58:	2300      	moveq	r3, #0
    7d5a:	b2db      	uxtb	r3, r3
}
    7d5c:	4618      	mov	r0, r3
    7d5e:	370c      	adds	r7, #12
    7d60:	46bd      	mov	sp, r7
    7d62:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d66:	4770      	bx	lr

00007d68 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    7d68:	b480      	push	{r7}
    7d6a:	b083      	sub	sp, #12
    7d6c:	af00      	add	r7, sp, #0
    7d6e:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7d70:	687b      	ldr	r3, [r7, #4]
    7d72:	7a9b      	ldrb	r3, [r3, #10]
    7d74:	b2db      	uxtb	r3, r3
    7d76:	f003 0301 	and.w	r3, r3, #1
    7d7a:	2b00      	cmp	r3, #0
    7d7c:	bf14      	ite	ne
    7d7e:	2301      	movne	r3, #1
    7d80:	2300      	moveq	r3, #0
    7d82:	b2db      	uxtb	r3, r3
}
    7d84:	4618      	mov	r0, r3
    7d86:	370c      	adds	r7, #12
    7d88:	46bd      	mov	sp, r7
    7d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d8e:	4770      	bx	lr

00007d90 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    7d90:	b480      	push	{r7}
    7d92:	b083      	sub	sp, #12
    7d94:	af00      	add	r7, sp, #0
    7d96:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7d98:	687b      	ldr	r3, [r7, #4]
    7d9a:	2201      	movs	r2, #1
    7d9c:	729a      	strb	r2, [r3, #10]
}
    7d9e:	bf00      	nop
    7da0:	370c      	adds	r7, #12
    7da2:	46bd      	mov	sp, r7
    7da4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7da8:	4770      	bx	lr

00007daa <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    7daa:	b480      	push	{r7}
    7dac:	b083      	sub	sp, #12
    7dae:	af00      	add	r7, sp, #0
    7db0:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    7db2:	687b      	ldr	r3, [r7, #4]
    7db4:	2202      	movs	r2, #2
    7db6:	729a      	strb	r2, [r3, #10]
}
    7db8:	bf00      	nop
    7dba:	370c      	adds	r7, #12
    7dbc:	46bd      	mov	sp, r7
    7dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dc2:	4770      	bx	lr

00007dc4 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    7dc4:	b480      	push	{r7}
    7dc6:	b083      	sub	sp, #12
    7dc8:	af00      	add	r7, sp, #0
    7dca:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7dcc:	687b      	ldr	r3, [r7, #4]
    7dce:	2201      	movs	r2, #1
    7dd0:	725a      	strb	r2, [r3, #9]
}
    7dd2:	bf00      	nop
    7dd4:	370c      	adds	r7, #12
    7dd6:	46bd      	mov	sp, r7
    7dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ddc:	4770      	bx	lr

00007dde <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    7dde:	b480      	push	{r7}
    7de0:	b083      	sub	sp, #12
    7de2:	af00      	add	r7, sp, #0
    7de4:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    7de6:	687b      	ldr	r3, [r7, #4]
    7de8:	7a5b      	ldrb	r3, [r3, #9]
    7dea:	b2db      	uxtb	r3, r3
    7dec:	085b      	lsrs	r3, r3, #1
    7dee:	f003 0301 	and.w	r3, r3, #1
    7df2:	2b00      	cmp	r3, #0
    7df4:	bf14      	ite	ne
    7df6:	2301      	movne	r3, #1
    7df8:	2300      	moveq	r3, #0
    7dfa:	b2db      	uxtb	r3, r3
}
    7dfc:	4618      	mov	r0, r3
    7dfe:	370c      	adds	r7, #12
    7e00:	46bd      	mov	sp, r7
    7e02:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e06:	4770      	bx	lr

00007e08 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7e08:	b580      	push	{r7, lr}
    7e0a:	b082      	sub	sp, #8
    7e0c:	af00      	add	r7, sp, #0
    7e0e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    7e10:	687b      	ldr	r3, [r7, #4]
    7e12:	681b      	ldr	r3, [r3, #0]
    7e14:	f043 0201 	orr.w	r2, r3, #1
    7e18:	687b      	ldr	r3, [r7, #4]
    7e1a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7e1c:	2101      	movs	r1, #1
    7e1e:	6878      	ldr	r0, [r7, #4]
    7e20:	4b02      	ldr	r3, [pc, #8]	; (7e2c <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    7e22:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7e24:	bf00      	nop
    7e26:	3708      	adds	r7, #8
    7e28:	46bd      	mov	sp, r7
    7e2a:	bd80      	pop	{r7, pc}
    7e2c:	00007d1d 	.word	0x00007d1d

00007e30 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7e30:	b580      	push	{r7, lr}
    7e32:	b082      	sub	sp, #8
    7e34:	af00      	add	r7, sp, #0
    7e36:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7e38:	687b      	ldr	r3, [r7, #4]
    7e3a:	681b      	ldr	r3, [r3, #0]
    7e3c:	f043 0202 	orr.w	r2, r3, #2
    7e40:	687b      	ldr	r3, [r7, #4]
    7e42:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7e44:	2103      	movs	r1, #3
    7e46:	6878      	ldr	r0, [r7, #4]
    7e48:	4b02      	ldr	r3, [pc, #8]	; (7e54 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    7e4a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7e4c:	bf00      	nop
    7e4e:	3708      	adds	r7, #8
    7e50:	46bd      	mov	sp, r7
    7e52:	bd80      	pop	{r7, pc}
    7e54:	00007d1d 	.word	0x00007d1d

00007e58 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7e58:	b580      	push	{r7, lr}
    7e5a:	b084      	sub	sp, #16
    7e5c:	af00      	add	r7, sp, #0
    7e5e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7e60:	2103      	movs	r1, #3
    7e62:	6878      	ldr	r0, [r7, #4]
    7e64:	4b09      	ldr	r3, [pc, #36]	; (7e8c <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    7e66:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7e68:	687b      	ldr	r3, [r7, #4]
    7e6a:	681b      	ldr	r3, [r3, #0]
    7e6c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    7e6e:	68fb      	ldr	r3, [r7, #12]
    7e70:	085b      	lsrs	r3, r3, #1
    7e72:	f003 0301 	and.w	r3, r3, #1
    7e76:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7e78:	68fb      	ldr	r3, [r7, #12]
    7e7a:	2b00      	cmp	r3, #0
    7e7c:	bf14      	ite	ne
    7e7e:	2301      	movne	r3, #1
    7e80:	2300      	moveq	r3, #0
    7e82:	b2db      	uxtb	r3, r3
}
    7e84:	4618      	mov	r0, r3
    7e86:	3710      	adds	r7, #16
    7e88:	46bd      	mov	sp, r7
    7e8a:	bd80      	pop	{r7, pc}
    7e8c:	00007d1d 	.word	0x00007d1d

00007e90 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7e90:	b580      	push	{r7, lr}
    7e92:	b082      	sub	sp, #8
    7e94:	af00      	add	r7, sp, #0
    7e96:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7e98:	687b      	ldr	r3, [r7, #4]
    7e9a:	681b      	ldr	r3, [r3, #0]
    7e9c:	f023 0202 	bic.w	r2, r3, #2
    7ea0:	687b      	ldr	r3, [r7, #4]
    7ea2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7ea4:	2103      	movs	r1, #3
    7ea6:	6878      	ldr	r0, [r7, #4]
    7ea8:	4b02      	ldr	r3, [pc, #8]	; (7eb4 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    7eaa:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7eac:	bf00      	nop
    7eae:	3708      	adds	r7, #8
    7eb0:	46bd      	mov	sp, r7
    7eb2:	bd80      	pop	{r7, pc}
    7eb4:	00007d1d 	.word	0x00007d1d

00007eb8 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    7eb8:	b480      	push	{r7}
    7eba:	b085      	sub	sp, #20
    7ebc:	af00      	add	r7, sp, #0
    7ebe:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7ec0:	687b      	ldr	r3, [r7, #4]
    7ec2:	681b      	ldr	r3, [r3, #0]
    7ec4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7ec6:	68fb      	ldr	r3, [r7, #12]
    7ec8:	089b      	lsrs	r3, r3, #2
    7eca:	f003 0303 	and.w	r3, r3, #3
    7ece:	60fb      	str	r3, [r7, #12]
	return tmp;
    7ed0:	68fb      	ldr	r3, [r7, #12]
}
    7ed2:	4618      	mov	r0, r3
    7ed4:	3714      	adds	r7, #20
    7ed6:	46bd      	mov	sp, r7
    7ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7edc:	4770      	bx	lr
	...

00007ee0 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    7ee0:	b580      	push	{r7, lr}
    7ee2:	b084      	sub	sp, #16
    7ee4:	af00      	add	r7, sp, #0
    7ee6:	6078      	str	r0, [r7, #4]
    7ee8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7eea:	2103      	movs	r1, #3
    7eec:	6878      	ldr	r0, [r7, #4]
    7eee:	4b07      	ldr	r3, [pc, #28]	; (7f0c <hri_tc_get_CTRLA_reg+0x2c>)
    7ef0:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7ef2:	687b      	ldr	r3, [r7, #4]
    7ef4:	681b      	ldr	r3, [r3, #0]
    7ef6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7ef8:	68fa      	ldr	r2, [r7, #12]
    7efa:	683b      	ldr	r3, [r7, #0]
    7efc:	4013      	ands	r3, r2
    7efe:	60fb      	str	r3, [r7, #12]
	return tmp;
    7f00:	68fb      	ldr	r3, [r7, #12]
}
    7f02:	4618      	mov	r0, r3
    7f04:	3710      	adds	r7, #16
    7f06:	46bd      	mov	sp, r7
    7f08:	bd80      	pop	{r7, pc}
    7f0a:	bf00      	nop
    7f0c:	00007d1d 	.word	0x00007d1d

00007f10 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    7f10:	b580      	push	{r7, lr}
    7f12:	b082      	sub	sp, #8
    7f14:	af00      	add	r7, sp, #0
    7f16:	6078      	str	r0, [r7, #4]
    7f18:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7f1a:	687b      	ldr	r3, [r7, #4]
    7f1c:	683a      	ldr	r2, [r7, #0]
    7f1e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7f20:	2103      	movs	r1, #3
    7f22:	6878      	ldr	r0, [r7, #4]
    7f24:	4b02      	ldr	r3, [pc, #8]	; (7f30 <hri_tc_write_CTRLA_reg+0x20>)
    7f26:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7f28:	bf00      	nop
    7f2a:	3708      	adds	r7, #8
    7f2c:	46bd      	mov	sp, r7
    7f2e:	bd80      	pop	{r7, pc}
    7f30:	00007d1d 	.word	0x00007d1d

00007f34 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    7f34:	b480      	push	{r7}
    7f36:	b083      	sub	sp, #12
    7f38:	af00      	add	r7, sp, #0
    7f3a:	6078      	str	r0, [r7, #4]
    7f3c:	460b      	mov	r3, r1
    7f3e:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7f40:	687b      	ldr	r3, [r7, #4]
    7f42:	887a      	ldrh	r2, [r7, #2]
    7f44:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    7f46:	bf00      	nop
    7f48:	370c      	adds	r7, #12
    7f4a:	46bd      	mov	sp, r7
    7f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f50:	4770      	bx	lr

00007f52 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    7f52:	b480      	push	{r7}
    7f54:	b083      	sub	sp, #12
    7f56:	af00      	add	r7, sp, #0
    7f58:	6078      	str	r0, [r7, #4]
    7f5a:	460b      	mov	r3, r1
    7f5c:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    7f5e:	687b      	ldr	r3, [r7, #4]
    7f60:	78fa      	ldrb	r2, [r7, #3]
    7f62:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    7f64:	bf00      	nop
    7f66:	370c      	adds	r7, #12
    7f68:	46bd      	mov	sp, r7
    7f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f6e:	4770      	bx	lr

00007f70 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    7f70:	b480      	push	{r7}
    7f72:	b083      	sub	sp, #12
    7f74:	af00      	add	r7, sp, #0
    7f76:	6078      	str	r0, [r7, #4]
    7f78:	460b      	mov	r3, r1
    7f7a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7f7c:	687b      	ldr	r3, [r7, #4]
    7f7e:	78fa      	ldrb	r2, [r7, #3]
    7f80:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    7f82:	bf00      	nop
    7f84:	370c      	adds	r7, #12
    7f86:	46bd      	mov	sp, r7
    7f88:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f8c:	4770      	bx	lr
	...

00007f90 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    7f90:	b580      	push	{r7, lr}
    7f92:	b082      	sub	sp, #8
    7f94:	af00      	add	r7, sp, #0
    7f96:	6078      	str	r0, [r7, #4]
    7f98:	460b      	mov	r3, r1
    7f9a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    7f9c:	687b      	ldr	r3, [r7, #4]
    7f9e:	78fa      	ldrb	r2, [r7, #3]
    7fa0:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7fa2:	2120      	movs	r1, #32
    7fa4:	6878      	ldr	r0, [r7, #4]
    7fa6:	4b03      	ldr	r3, [pc, #12]	; (7fb4 <hri_tccount8_write_PER_reg+0x24>)
    7fa8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7faa:	bf00      	nop
    7fac:	3708      	adds	r7, #8
    7fae:	46bd      	mov	sp, r7
    7fb0:	bd80      	pop	{r7, pc}
    7fb2:	bf00      	nop
    7fb4:	00007d1d 	.word	0x00007d1d

00007fb8 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    7fb8:	b580      	push	{r7, lr}
    7fba:	b082      	sub	sp, #8
    7fbc:	af00      	add	r7, sp, #0
    7fbe:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7fc0:	2120      	movs	r1, #32
    7fc2:	6878      	ldr	r0, [r7, #4]
    7fc4:	4b04      	ldr	r3, [pc, #16]	; (7fd8 <hri_tccount8_read_PER_reg+0x20>)
    7fc6:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    7fc8:	687b      	ldr	r3, [r7, #4]
    7fca:	7edb      	ldrb	r3, [r3, #27]
    7fcc:	b2db      	uxtb	r3, r3
}
    7fce:	4618      	mov	r0, r3
    7fd0:	3708      	adds	r7, #8
    7fd2:	46bd      	mov	sp, r7
    7fd4:	bd80      	pop	{r7, pc}
    7fd6:	bf00      	nop
    7fd8:	00007d1d 	.word	0x00007d1d

00007fdc <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    7fdc:	b580      	push	{r7, lr}
    7fde:	b082      	sub	sp, #8
    7fe0:	af00      	add	r7, sp, #0
    7fe2:	6078      	str	r0, [r7, #4]
    7fe4:	460b      	mov	r3, r1
    7fe6:	70fb      	strb	r3, [r7, #3]
    7fe8:	4613      	mov	r3, r2
    7fea:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7fec:	78fb      	ldrb	r3, [r7, #3]
    7fee:	687a      	ldr	r2, [r7, #4]
    7ff0:	4413      	add	r3, r2
    7ff2:	78ba      	ldrb	r2, [r7, #2]
    7ff4:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7ff6:	21c0      	movs	r1, #192	; 0xc0
    7ff8:	6878      	ldr	r0, [r7, #4]
    7ffa:	4b03      	ldr	r3, [pc, #12]	; (8008 <hri_tccount8_write_CC_reg+0x2c>)
    7ffc:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7ffe:	bf00      	nop
    8000:	3708      	adds	r7, #8
    8002:	46bd      	mov	sp, r7
    8004:	bd80      	pop	{r7, pc}
    8006:	bf00      	nop
    8008:	00007d1d 	.word	0x00007d1d

0000800c <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    800c:	b580      	push	{r7, lr}
    800e:	b082      	sub	sp, #8
    8010:	af00      	add	r7, sp, #0
    8012:	6078      	str	r0, [r7, #4]
    8014:	460b      	mov	r3, r1
    8016:	70fb      	strb	r3, [r7, #3]
    8018:	4613      	mov	r3, r2
    801a:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    801c:	78fb      	ldrb	r3, [r7, #3]
    801e:	687a      	ldr	r2, [r7, #4]
    8020:	330c      	adds	r3, #12
    8022:	005b      	lsls	r3, r3, #1
    8024:	4413      	add	r3, r2
    8026:	883a      	ldrh	r2, [r7, #0]
    8028:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    802a:	21c0      	movs	r1, #192	; 0xc0
    802c:	6878      	ldr	r0, [r7, #4]
    802e:	4b03      	ldr	r3, [pc, #12]	; (803c <hri_tccount16_write_CC_reg+0x30>)
    8030:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8032:	bf00      	nop
    8034:	3708      	adds	r7, #8
    8036:	46bd      	mov	sp, r7
    8038:	bd80      	pop	{r7, pc}
    803a:	bf00      	nop
    803c:	00007d1d 	.word	0x00007d1d

00008040 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    8040:	b580      	push	{r7, lr}
    8042:	b082      	sub	sp, #8
    8044:	af00      	add	r7, sp, #0
    8046:	6078      	str	r0, [r7, #4]
    8048:	460b      	mov	r3, r1
    804a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    804c:	21c0      	movs	r1, #192	; 0xc0
    804e:	6878      	ldr	r0, [r7, #4]
    8050:	4b06      	ldr	r3, [pc, #24]	; (806c <hri_tccount16_read_CC_reg+0x2c>)
    8052:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    8054:	78fb      	ldrb	r3, [r7, #3]
    8056:	687a      	ldr	r2, [r7, #4]
    8058:	330c      	adds	r3, #12
    805a:	005b      	lsls	r3, r3, #1
    805c:	4413      	add	r3, r2
    805e:	889b      	ldrh	r3, [r3, #4]
    8060:	b29b      	uxth	r3, r3
}
    8062:	4618      	mov	r0, r3
    8064:	3708      	adds	r7, #8
    8066:	46bd      	mov	sp, r7
    8068:	bd80      	pop	{r7, pc}
    806a:	bf00      	nop
    806c:	00007d1d 	.word	0x00007d1d

00008070 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    8070:	b580      	push	{r7, lr}
    8072:	b084      	sub	sp, #16
    8074:	af00      	add	r7, sp, #0
    8076:	60f8      	str	r0, [r7, #12]
    8078:	460b      	mov	r3, r1
    807a:	607a      	str	r2, [r7, #4]
    807c:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    807e:	7afb      	ldrb	r3, [r7, #11]
    8080:	68fa      	ldr	r2, [r7, #12]
    8082:	3306      	adds	r3, #6
    8084:	009b      	lsls	r3, r3, #2
    8086:	4413      	add	r3, r2
    8088:	687a      	ldr	r2, [r7, #4]
    808a:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    808c:	21c0      	movs	r1, #192	; 0xc0
    808e:	68f8      	ldr	r0, [r7, #12]
    8090:	4b02      	ldr	r3, [pc, #8]	; (809c <hri_tccount32_write_CC_reg+0x2c>)
    8092:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8094:	bf00      	nop
    8096:	3710      	adds	r7, #16
    8098:	46bd      	mov	sp, r7
    809a:	bd80      	pop	{r7, pc}
    809c:	00007d1d 	.word	0x00007d1d

000080a0 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    80a0:	b580      	push	{r7, lr}
    80a2:	b082      	sub	sp, #8
    80a4:	af00      	add	r7, sp, #0
    80a6:	6078      	str	r0, [r7, #4]
    80a8:	460b      	mov	r3, r1
    80aa:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    80ac:	21c0      	movs	r1, #192	; 0xc0
    80ae:	6878      	ldr	r0, [r7, #4]
    80b0:	4b05      	ldr	r3, [pc, #20]	; (80c8 <hri_tccount32_read_CC_reg+0x28>)
    80b2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    80b4:	78fb      	ldrb	r3, [r7, #3]
    80b6:	687a      	ldr	r2, [r7, #4]
    80b8:	3306      	adds	r3, #6
    80ba:	009b      	lsls	r3, r3, #2
    80bc:	4413      	add	r3, r2
    80be:	685b      	ldr	r3, [r3, #4]
}
    80c0:	4618      	mov	r0, r3
    80c2:	3708      	adds	r7, #8
    80c4:	46bd      	mov	sp, r7
    80c6:	bd80      	pop	{r7, pc}
    80c8:	00007d1d 	.word	0x00007d1d

000080cc <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    80cc:	b580      	push	{r7, lr}
    80ce:	b084      	sub	sp, #16
    80d0:	af00      	add	r7, sp, #0
    80d2:	6078      	str	r0, [r7, #4]
    80d4:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    80d6:	6838      	ldr	r0, [r7, #0]
    80d8:	4b93      	ldr	r3, [pc, #588]	; (8328 <_tc_timer_init+0x25c>)
    80da:	4798      	blx	r3
    80dc:	4603      	mov	r3, r0
    80de:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    80e0:	687b      	ldr	r3, [r7, #4]
    80e2:	683a      	ldr	r2, [r7, #0]
    80e4:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    80e6:	22a4      	movs	r2, #164	; 0xa4
    80e8:	4990      	ldr	r1, [pc, #576]	; (832c <_tc_timer_init+0x260>)
    80ea:	2001      	movs	r0, #1
    80ec:	4b90      	ldr	r3, [pc, #576]	; (8330 <_tc_timer_init+0x264>)
    80ee:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    80f0:	2101      	movs	r1, #1
    80f2:	6838      	ldr	r0, [r7, #0]
    80f4:	4b8f      	ldr	r3, [pc, #572]	; (8334 <_tc_timer_init+0x268>)
    80f6:	4798      	blx	r3
    80f8:	4603      	mov	r3, r0
    80fa:	f083 0301 	eor.w	r3, r3, #1
    80fe:	b2db      	uxtb	r3, r3
    8100:	2b00      	cmp	r3, #0
    8102:	d011      	beq.n	8128 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8104:	2102      	movs	r1, #2
    8106:	6838      	ldr	r0, [r7, #0]
    8108:	4b8b      	ldr	r3, [pc, #556]	; (8338 <_tc_timer_init+0x26c>)
    810a:	4798      	blx	r3
    810c:	4603      	mov	r3, r0
    810e:	2b00      	cmp	r3, #0
    8110:	d006      	beq.n	8120 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8112:	6838      	ldr	r0, [r7, #0]
    8114:	4b89      	ldr	r3, [pc, #548]	; (833c <_tc_timer_init+0x270>)
    8116:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    8118:	2102      	movs	r1, #2
    811a:	6838      	ldr	r0, [r7, #0]
    811c:	4b88      	ldr	r3, [pc, #544]	; (8340 <_tc_timer_init+0x274>)
    811e:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    8120:	2101      	movs	r1, #1
    8122:	6838      	ldr	r0, [r7, #0]
    8124:	4b87      	ldr	r3, [pc, #540]	; (8344 <_tc_timer_init+0x278>)
    8126:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8128:	2101      	movs	r1, #1
    812a:	6838      	ldr	r0, [r7, #0]
    812c:	4b84      	ldr	r3, [pc, #528]	; (8340 <_tc_timer_init+0x274>)
    812e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8130:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8134:	4984      	ldr	r1, [pc, #528]	; (8348 <_tc_timer_init+0x27c>)
    8136:	4613      	mov	r3, r2
    8138:	009b      	lsls	r3, r3, #2
    813a:	4413      	add	r3, r2
    813c:	009b      	lsls	r3, r3, #2
    813e:	440b      	add	r3, r1
    8140:	3304      	adds	r3, #4
    8142:	681b      	ldr	r3, [r3, #0]
    8144:	4619      	mov	r1, r3
    8146:	6838      	ldr	r0, [r7, #0]
    8148:	4b7e      	ldr	r3, [pc, #504]	; (8344 <_tc_timer_init+0x278>)
    814a:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    814c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8150:	497d      	ldr	r1, [pc, #500]	; (8348 <_tc_timer_init+0x27c>)
    8152:	4613      	mov	r3, r2
    8154:	009b      	lsls	r3, r3, #2
    8156:	4413      	add	r3, r2
    8158:	009b      	lsls	r3, r3, #2
    815a:	440b      	add	r3, r1
    815c:	330a      	adds	r3, #10
    815e:	781b      	ldrb	r3, [r3, #0]
    8160:	4619      	mov	r1, r3
    8162:	6838      	ldr	r0, [r7, #0]
    8164:	4b79      	ldr	r3, [pc, #484]	; (834c <_tc_timer_init+0x280>)
    8166:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8168:	f997 200f 	ldrsb.w	r2, [r7, #15]
    816c:	4976      	ldr	r1, [pc, #472]	; (8348 <_tc_timer_init+0x27c>)
    816e:	4613      	mov	r3, r2
    8170:	009b      	lsls	r3, r3, #2
    8172:	4413      	add	r3, r2
    8174:	009b      	lsls	r3, r3, #2
    8176:	440b      	add	r3, r1
    8178:	3308      	adds	r3, #8
    817a:	881b      	ldrh	r3, [r3, #0]
    817c:	4619      	mov	r1, r3
    817e:	6838      	ldr	r0, [r7, #0]
    8180:	4b73      	ldr	r3, [pc, #460]	; (8350 <_tc_timer_init+0x284>)
    8182:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    8184:	2101      	movs	r1, #1
    8186:	6838      	ldr	r0, [r7, #0]
    8188:	4b72      	ldr	r3, [pc, #456]	; (8354 <_tc_timer_init+0x288>)
    818a:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    818c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8190:	496d      	ldr	r1, [pc, #436]	; (8348 <_tc_timer_init+0x27c>)
    8192:	4613      	mov	r3, r2
    8194:	009b      	lsls	r3, r3, #2
    8196:	4413      	add	r3, r2
    8198:	009b      	lsls	r3, r3, #2
    819a:	440b      	add	r3, r1
    819c:	3304      	adds	r3, #4
    819e:	681b      	ldr	r3, [r3, #0]
    81a0:	f003 030c 	and.w	r3, r3, #12
    81a4:	2b08      	cmp	r3, #8
    81a6:	d11e      	bne.n	81e6 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    81a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    81ac:	4966      	ldr	r1, [pc, #408]	; (8348 <_tc_timer_init+0x27c>)
    81ae:	4613      	mov	r3, r2
    81b0:	009b      	lsls	r3, r3, #2
    81b2:	4413      	add	r3, r2
    81b4:	009b      	lsls	r3, r3, #2
    81b6:	440b      	add	r3, r1
    81b8:	330c      	adds	r3, #12
    81ba:	681b      	ldr	r3, [r3, #0]
    81bc:	461a      	mov	r2, r3
    81be:	2100      	movs	r1, #0
    81c0:	6838      	ldr	r0, [r7, #0]
    81c2:	4b65      	ldr	r3, [pc, #404]	; (8358 <_tc_timer_init+0x28c>)
    81c4:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    81c6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    81ca:	495f      	ldr	r1, [pc, #380]	; (8348 <_tc_timer_init+0x27c>)
    81cc:	4613      	mov	r3, r2
    81ce:	009b      	lsls	r3, r3, #2
    81d0:	4413      	add	r3, r2
    81d2:	009b      	lsls	r3, r3, #2
    81d4:	440b      	add	r3, r1
    81d6:	3310      	adds	r3, #16
    81d8:	681b      	ldr	r3, [r3, #0]
    81da:	461a      	mov	r2, r3
    81dc:	2101      	movs	r1, #1
    81de:	6838      	ldr	r0, [r7, #0]
    81e0:	4b5d      	ldr	r3, [pc, #372]	; (8358 <_tc_timer_init+0x28c>)
    81e2:	4798      	blx	r3
    81e4:	e06a      	b.n	82bc <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    81e6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    81ea:	4957      	ldr	r1, [pc, #348]	; (8348 <_tc_timer_init+0x27c>)
    81ec:	4613      	mov	r3, r2
    81ee:	009b      	lsls	r3, r3, #2
    81f0:	4413      	add	r3, r2
    81f2:	009b      	lsls	r3, r3, #2
    81f4:	440b      	add	r3, r1
    81f6:	3304      	adds	r3, #4
    81f8:	681b      	ldr	r3, [r3, #0]
    81fa:	f003 030c 	and.w	r3, r3, #12
    81fe:	2b00      	cmp	r3, #0
    8200:	d120      	bne.n	8244 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8202:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8206:	4950      	ldr	r1, [pc, #320]	; (8348 <_tc_timer_init+0x27c>)
    8208:	4613      	mov	r3, r2
    820a:	009b      	lsls	r3, r3, #2
    820c:	4413      	add	r3, r2
    820e:	009b      	lsls	r3, r3, #2
    8210:	440b      	add	r3, r1
    8212:	330c      	adds	r3, #12
    8214:	681b      	ldr	r3, [r3, #0]
    8216:	b29b      	uxth	r3, r3
    8218:	461a      	mov	r2, r3
    821a:	2100      	movs	r1, #0
    821c:	6838      	ldr	r0, [r7, #0]
    821e:	4b4f      	ldr	r3, [pc, #316]	; (835c <_tc_timer_init+0x290>)
    8220:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8222:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8226:	4948      	ldr	r1, [pc, #288]	; (8348 <_tc_timer_init+0x27c>)
    8228:	4613      	mov	r3, r2
    822a:	009b      	lsls	r3, r3, #2
    822c:	4413      	add	r3, r2
    822e:	009b      	lsls	r3, r3, #2
    8230:	440b      	add	r3, r1
    8232:	3310      	adds	r3, #16
    8234:	681b      	ldr	r3, [r3, #0]
    8236:	b29b      	uxth	r3, r3
    8238:	461a      	mov	r2, r3
    823a:	2101      	movs	r1, #1
    823c:	6838      	ldr	r0, [r7, #0]
    823e:	4b47      	ldr	r3, [pc, #284]	; (835c <_tc_timer_init+0x290>)
    8240:	4798      	blx	r3
    8242:	e03b      	b.n	82bc <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    8244:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8248:	493f      	ldr	r1, [pc, #252]	; (8348 <_tc_timer_init+0x27c>)
    824a:	4613      	mov	r3, r2
    824c:	009b      	lsls	r3, r3, #2
    824e:	4413      	add	r3, r2
    8250:	009b      	lsls	r3, r3, #2
    8252:	440b      	add	r3, r1
    8254:	3304      	adds	r3, #4
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f003 030c 	and.w	r3, r3, #12
    825c:	2b04      	cmp	r3, #4
    825e:	d12d      	bne.n	82bc <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    8260:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8264:	4938      	ldr	r1, [pc, #224]	; (8348 <_tc_timer_init+0x27c>)
    8266:	4613      	mov	r3, r2
    8268:	009b      	lsls	r3, r3, #2
    826a:	4413      	add	r3, r2
    826c:	009b      	lsls	r3, r3, #2
    826e:	440b      	add	r3, r1
    8270:	330c      	adds	r3, #12
    8272:	681b      	ldr	r3, [r3, #0]
    8274:	b2db      	uxtb	r3, r3
    8276:	461a      	mov	r2, r3
    8278:	2100      	movs	r1, #0
    827a:	6838      	ldr	r0, [r7, #0]
    827c:	4b38      	ldr	r3, [pc, #224]	; (8360 <_tc_timer_init+0x294>)
    827e:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    8280:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8284:	4930      	ldr	r1, [pc, #192]	; (8348 <_tc_timer_init+0x27c>)
    8286:	4613      	mov	r3, r2
    8288:	009b      	lsls	r3, r3, #2
    828a:	4413      	add	r3, r2
    828c:	009b      	lsls	r3, r3, #2
    828e:	440b      	add	r3, r1
    8290:	3310      	adds	r3, #16
    8292:	681b      	ldr	r3, [r3, #0]
    8294:	b2db      	uxtb	r3, r3
    8296:	461a      	mov	r2, r3
    8298:	2101      	movs	r1, #1
    829a:	6838      	ldr	r0, [r7, #0]
    829c:	4b30      	ldr	r3, [pc, #192]	; (8360 <_tc_timer_init+0x294>)
    829e:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    82a0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    82a4:	4928      	ldr	r1, [pc, #160]	; (8348 <_tc_timer_init+0x27c>)
    82a6:	4613      	mov	r3, r2
    82a8:	009b      	lsls	r3, r3, #2
    82aa:	4413      	add	r3, r2
    82ac:	009b      	lsls	r3, r3, #2
    82ae:	440b      	add	r3, r1
    82b0:	330b      	adds	r3, #11
    82b2:	781b      	ldrb	r3, [r3, #0]
    82b4:	4619      	mov	r1, r3
    82b6:	6838      	ldr	r0, [r7, #0]
    82b8:	4b2a      	ldr	r3, [pc, #168]	; (8364 <_tc_timer_init+0x298>)
    82ba:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    82bc:	6838      	ldr	r0, [r7, #0]
    82be:	4b2a      	ldr	r3, [pc, #168]	; (8368 <_tc_timer_init+0x29c>)
    82c0:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    82c2:	6879      	ldr	r1, [r7, #4]
    82c4:	6838      	ldr	r0, [r7, #0]
    82c6:	4b29      	ldr	r3, [pc, #164]	; (836c <_tc_timer_init+0x2a0>)
    82c8:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    82ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
    82ce:	491e      	ldr	r1, [pc, #120]	; (8348 <_tc_timer_init+0x27c>)
    82d0:	4613      	mov	r3, r2
    82d2:	009b      	lsls	r3, r3, #2
    82d4:	4413      	add	r3, r2
    82d6:	009b      	lsls	r3, r3, #2
    82d8:	440b      	add	r3, r1
    82da:	3302      	adds	r3, #2
    82dc:	f9b3 3000 	ldrsh.w	r3, [r3]
    82e0:	4618      	mov	r0, r3
    82e2:	4b23      	ldr	r3, [pc, #140]	; (8370 <_tc_timer_init+0x2a4>)
    82e4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    82e6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    82ea:	4917      	ldr	r1, [pc, #92]	; (8348 <_tc_timer_init+0x27c>)
    82ec:	4613      	mov	r3, r2
    82ee:	009b      	lsls	r3, r3, #2
    82f0:	4413      	add	r3, r2
    82f2:	009b      	lsls	r3, r3, #2
    82f4:	440b      	add	r3, r1
    82f6:	3302      	adds	r3, #2
    82f8:	f9b3 3000 	ldrsh.w	r3, [r3]
    82fc:	4618      	mov	r0, r3
    82fe:	4b1d      	ldr	r3, [pc, #116]	; (8374 <_tc_timer_init+0x2a8>)
    8300:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8302:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8306:	4910      	ldr	r1, [pc, #64]	; (8348 <_tc_timer_init+0x27c>)
    8308:	4613      	mov	r3, r2
    830a:	009b      	lsls	r3, r3, #2
    830c:	4413      	add	r3, r2
    830e:	009b      	lsls	r3, r3, #2
    8310:	440b      	add	r3, r1
    8312:	3302      	adds	r3, #2
    8314:	f9b3 3000 	ldrsh.w	r3, [r3]
    8318:	4618      	mov	r0, r3
    831a:	4b17      	ldr	r3, [pc, #92]	; (8378 <_tc_timer_init+0x2ac>)
    831c:	4798      	blx	r3

	return ERR_NONE;
    831e:	2300      	movs	r3, #0
}
    8320:	4618      	mov	r0, r3
    8322:	3710      	adds	r7, #16
    8324:	46bd      	mov	sp, r7
    8326:	bd80      	pop	{r7, pc}
    8328:	0000895d 	.word	0x0000895d
    832c:	0000f5cc 	.word	0x0000f5cc
    8330:	0000389d 	.word	0x0000389d
    8334:	00007d41 	.word	0x00007d41
    8338:	00007ee1 	.word	0x00007ee1
    833c:	00007e91 	.word	0x00007e91
    8340:	00007d1d 	.word	0x00007d1d
    8344:	00007f11 	.word	0x00007f11
    8348:	200000e0 	.word	0x200000e0
    834c:	00007f71 	.word	0x00007f71
    8350:	00007f35 	.word	0x00007f35
    8354:	00007f53 	.word	0x00007f53
    8358:	00008071 	.word	0x00008071
    835c:	0000800d 	.word	0x0000800d
    8360:	00007fdd 	.word	0x00007fdd
    8364:	00007f91 	.word	0x00007f91
    8368:	00007dc5 	.word	0x00007dc5
    836c:	000089c5 	.word	0x000089c5
    8370:	00007c9d 	.word	0x00007c9d
    8374:	00007ce1 	.word	0x00007ce1
    8378:	00007c61 	.word	0x00007c61

0000837c <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    837c:	b580      	push	{r7, lr}
    837e:	b084      	sub	sp, #16
    8380:	af00      	add	r7, sp, #0
    8382:	6078      	str	r0, [r7, #4]
    8384:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    8386:	6838      	ldr	r0, [r7, #0]
    8388:	4b73      	ldr	r3, [pc, #460]	; (8558 <_pwm_init+0x1dc>)
    838a:	4798      	blx	r3
    838c:	4603      	mov	r3, r0
    838e:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    8390:	687b      	ldr	r3, [r7, #4]
    8392:	683a      	ldr	r2, [r7, #0]
    8394:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8396:	2101      	movs	r1, #1
    8398:	6838      	ldr	r0, [r7, #0]
    839a:	4b70      	ldr	r3, [pc, #448]	; (855c <_pwm_init+0x1e0>)
    839c:	4798      	blx	r3
    839e:	4603      	mov	r3, r0
    83a0:	f083 0301 	eor.w	r3, r3, #1
    83a4:	b2db      	uxtb	r3, r3
    83a6:	2b00      	cmp	r3, #0
    83a8:	d011      	beq.n	83ce <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    83aa:	2102      	movs	r1, #2
    83ac:	6838      	ldr	r0, [r7, #0]
    83ae:	4b6c      	ldr	r3, [pc, #432]	; (8560 <_pwm_init+0x1e4>)
    83b0:	4798      	blx	r3
    83b2:	4603      	mov	r3, r0
    83b4:	2b00      	cmp	r3, #0
    83b6:	d006      	beq.n	83c6 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    83b8:	6838      	ldr	r0, [r7, #0]
    83ba:	4b6a      	ldr	r3, [pc, #424]	; (8564 <_pwm_init+0x1e8>)
    83bc:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    83be:	2102      	movs	r1, #2
    83c0:	6838      	ldr	r0, [r7, #0]
    83c2:	4b69      	ldr	r3, [pc, #420]	; (8568 <_pwm_init+0x1ec>)
    83c4:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    83c6:	2101      	movs	r1, #1
    83c8:	6838      	ldr	r0, [r7, #0]
    83ca:	4b68      	ldr	r3, [pc, #416]	; (856c <_pwm_init+0x1f0>)
    83cc:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    83ce:	2101      	movs	r1, #1
    83d0:	6838      	ldr	r0, [r7, #0]
    83d2:	4b65      	ldr	r3, [pc, #404]	; (8568 <_pwm_init+0x1ec>)
    83d4:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    83d6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    83da:	4965      	ldr	r1, [pc, #404]	; (8570 <_pwm_init+0x1f4>)
    83dc:	4613      	mov	r3, r2
    83de:	009b      	lsls	r3, r3, #2
    83e0:	4413      	add	r3, r2
    83e2:	009b      	lsls	r3, r3, #2
    83e4:	440b      	add	r3, r1
    83e6:	3304      	adds	r3, #4
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	4619      	mov	r1, r3
    83ec:	6838      	ldr	r0, [r7, #0]
    83ee:	4b5f      	ldr	r3, [pc, #380]	; (856c <_pwm_init+0x1f0>)
    83f0:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    83f2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    83f6:	495e      	ldr	r1, [pc, #376]	; (8570 <_pwm_init+0x1f4>)
    83f8:	4613      	mov	r3, r2
    83fa:	009b      	lsls	r3, r3, #2
    83fc:	4413      	add	r3, r2
    83fe:	009b      	lsls	r3, r3, #2
    8400:	440b      	add	r3, r1
    8402:	330a      	adds	r3, #10
    8404:	781b      	ldrb	r3, [r3, #0]
    8406:	4619      	mov	r1, r3
    8408:	6838      	ldr	r0, [r7, #0]
    840a:	4b5a      	ldr	r3, [pc, #360]	; (8574 <_pwm_init+0x1f8>)
    840c:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    840e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8412:	4957      	ldr	r1, [pc, #348]	; (8570 <_pwm_init+0x1f4>)
    8414:	4613      	mov	r3, r2
    8416:	009b      	lsls	r3, r3, #2
    8418:	4413      	add	r3, r2
    841a:	009b      	lsls	r3, r3, #2
    841c:	440b      	add	r3, r1
    841e:	3308      	adds	r3, #8
    8420:	881b      	ldrh	r3, [r3, #0]
    8422:	4619      	mov	r1, r3
    8424:	6838      	ldr	r0, [r7, #0]
    8426:	4b54      	ldr	r3, [pc, #336]	; (8578 <_pwm_init+0x1fc>)
    8428:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    842a:	2103      	movs	r1, #3
    842c:	6838      	ldr	r0, [r7, #0]
    842e:	4b53      	ldr	r3, [pc, #332]	; (857c <_pwm_init+0x200>)
    8430:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8432:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8436:	494e      	ldr	r1, [pc, #312]	; (8570 <_pwm_init+0x1f4>)
    8438:	4613      	mov	r3, r2
    843a:	009b      	lsls	r3, r3, #2
    843c:	4413      	add	r3, r2
    843e:	009b      	lsls	r3, r3, #2
    8440:	440b      	add	r3, r1
    8442:	3304      	adds	r3, #4
    8444:	681b      	ldr	r3, [r3, #0]
    8446:	f003 030c 	and.w	r3, r3, #12
    844a:	2b08      	cmp	r3, #8
    844c:	d11e      	bne.n	848c <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    844e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8452:	4947      	ldr	r1, [pc, #284]	; (8570 <_pwm_init+0x1f4>)
    8454:	4613      	mov	r3, r2
    8456:	009b      	lsls	r3, r3, #2
    8458:	4413      	add	r3, r2
    845a:	009b      	lsls	r3, r3, #2
    845c:	440b      	add	r3, r1
    845e:	330c      	adds	r3, #12
    8460:	681b      	ldr	r3, [r3, #0]
    8462:	461a      	mov	r2, r3
    8464:	2100      	movs	r1, #0
    8466:	6838      	ldr	r0, [r7, #0]
    8468:	4b45      	ldr	r3, [pc, #276]	; (8580 <_pwm_init+0x204>)
    846a:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    846c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8470:	493f      	ldr	r1, [pc, #252]	; (8570 <_pwm_init+0x1f4>)
    8472:	4613      	mov	r3, r2
    8474:	009b      	lsls	r3, r3, #2
    8476:	4413      	add	r3, r2
    8478:	009b      	lsls	r3, r3, #2
    847a:	440b      	add	r3, r1
    847c:	3310      	adds	r3, #16
    847e:	681b      	ldr	r3, [r3, #0]
    8480:	461a      	mov	r2, r3
    8482:	2101      	movs	r1, #1
    8484:	6838      	ldr	r0, [r7, #0]
    8486:	4b3e      	ldr	r3, [pc, #248]	; (8580 <_pwm_init+0x204>)
    8488:	4798      	blx	r3
    848a:	e031      	b.n	84f0 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    848c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8490:	4937      	ldr	r1, [pc, #220]	; (8570 <_pwm_init+0x1f4>)
    8492:	4613      	mov	r3, r2
    8494:	009b      	lsls	r3, r3, #2
    8496:	4413      	add	r3, r2
    8498:	009b      	lsls	r3, r3, #2
    849a:	440b      	add	r3, r1
    849c:	3304      	adds	r3, #4
    849e:	681b      	ldr	r3, [r3, #0]
    84a0:	f003 030c 	and.w	r3, r3, #12
    84a4:	2b00      	cmp	r3, #0
    84a6:	d120      	bne.n	84ea <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    84a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    84ac:	4930      	ldr	r1, [pc, #192]	; (8570 <_pwm_init+0x1f4>)
    84ae:	4613      	mov	r3, r2
    84b0:	009b      	lsls	r3, r3, #2
    84b2:	4413      	add	r3, r2
    84b4:	009b      	lsls	r3, r3, #2
    84b6:	440b      	add	r3, r1
    84b8:	330c      	adds	r3, #12
    84ba:	681b      	ldr	r3, [r3, #0]
    84bc:	b29b      	uxth	r3, r3
    84be:	461a      	mov	r2, r3
    84c0:	2100      	movs	r1, #0
    84c2:	6838      	ldr	r0, [r7, #0]
    84c4:	4b2f      	ldr	r3, [pc, #188]	; (8584 <_pwm_init+0x208>)
    84c6:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    84c8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    84cc:	4928      	ldr	r1, [pc, #160]	; (8570 <_pwm_init+0x1f4>)
    84ce:	4613      	mov	r3, r2
    84d0:	009b      	lsls	r3, r3, #2
    84d2:	4413      	add	r3, r2
    84d4:	009b      	lsls	r3, r3, #2
    84d6:	440b      	add	r3, r1
    84d8:	3310      	adds	r3, #16
    84da:	681b      	ldr	r3, [r3, #0]
    84dc:	b29b      	uxth	r3, r3
    84de:	461a      	mov	r2, r3
    84e0:	2101      	movs	r1, #1
    84e2:	6838      	ldr	r0, [r7, #0]
    84e4:	4b27      	ldr	r3, [pc, #156]	; (8584 <_pwm_init+0x208>)
    84e6:	4798      	blx	r3
    84e8:	e002      	b.n	84f0 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    84ea:	f04f 33ff 	mov.w	r3, #4294967295
    84ee:	e02e      	b.n	854e <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    84f0:	6879      	ldr	r1, [r7, #4]
    84f2:	6838      	ldr	r0, [r7, #0]
    84f4:	4b24      	ldr	r3, [pc, #144]	; (8588 <_pwm_init+0x20c>)
    84f6:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    84f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    84fc:	491c      	ldr	r1, [pc, #112]	; (8570 <_pwm_init+0x1f4>)
    84fe:	4613      	mov	r3, r2
    8500:	009b      	lsls	r3, r3, #2
    8502:	4413      	add	r3, r2
    8504:	009b      	lsls	r3, r3, #2
    8506:	440b      	add	r3, r1
    8508:	3302      	adds	r3, #2
    850a:	f9b3 3000 	ldrsh.w	r3, [r3]
    850e:	4618      	mov	r0, r3
    8510:	4b1e      	ldr	r3, [pc, #120]	; (858c <_pwm_init+0x210>)
    8512:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8514:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8518:	4915      	ldr	r1, [pc, #84]	; (8570 <_pwm_init+0x1f4>)
    851a:	4613      	mov	r3, r2
    851c:	009b      	lsls	r3, r3, #2
    851e:	4413      	add	r3, r2
    8520:	009b      	lsls	r3, r3, #2
    8522:	440b      	add	r3, r1
    8524:	3302      	adds	r3, #2
    8526:	f9b3 3000 	ldrsh.w	r3, [r3]
    852a:	4618      	mov	r0, r3
    852c:	4b18      	ldr	r3, [pc, #96]	; (8590 <_pwm_init+0x214>)
    852e:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8530:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8534:	490e      	ldr	r1, [pc, #56]	; (8570 <_pwm_init+0x1f4>)
    8536:	4613      	mov	r3, r2
    8538:	009b      	lsls	r3, r3, #2
    853a:	4413      	add	r3, r2
    853c:	009b      	lsls	r3, r3, #2
    853e:	440b      	add	r3, r1
    8540:	3302      	adds	r3, #2
    8542:	f9b3 3000 	ldrsh.w	r3, [r3]
    8546:	4618      	mov	r0, r3
    8548:	4b12      	ldr	r3, [pc, #72]	; (8594 <_pwm_init+0x218>)
    854a:	4798      	blx	r3

	return 0;
    854c:	2300      	movs	r3, #0
}
    854e:	4618      	mov	r0, r3
    8550:	3710      	adds	r7, #16
    8552:	46bd      	mov	sp, r7
    8554:	bd80      	pop	{r7, pc}
    8556:	bf00      	nop
    8558:	0000895d 	.word	0x0000895d
    855c:	00007d41 	.word	0x00007d41
    8560:	00007ee1 	.word	0x00007ee1
    8564:	00007e91 	.word	0x00007e91
    8568:	00007d1d 	.word	0x00007d1d
    856c:	00007f11 	.word	0x00007f11
    8570:	200000e0 	.word	0x200000e0
    8574:	00007f71 	.word	0x00007f71
    8578:	00007f35 	.word	0x00007f35
    857c:	00007f53 	.word	0x00007f53
    8580:	00008071 	.word	0x00008071
    8584:	0000800d 	.word	0x0000800d
    8588:	000089c5 	.word	0x000089c5
    858c:	00007c9d 	.word	0x00007c9d
    8590:	00007ce1 	.word	0x00007ce1
    8594:	00007c61 	.word	0x00007c61

00008598 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    8598:	b580      	push	{r7, lr}
    859a:	b084      	sub	sp, #16
    859c:	af00      	add	r7, sp, #0
    859e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    85a0:	687b      	ldr	r3, [r7, #4]
    85a2:	68db      	ldr	r3, [r3, #12]
    85a4:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    85a6:	68f8      	ldr	r0, [r7, #12]
    85a8:	4b10      	ldr	r3, [pc, #64]	; (85ec <_tc_timer_deinit+0x54>)
    85aa:	4798      	blx	r3
    85ac:	4603      	mov	r3, r0
    85ae:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    85b0:	22f9      	movs	r2, #249	; 0xf9
    85b2:	490f      	ldr	r1, [pc, #60]	; (85f0 <_tc_timer_deinit+0x58>)
    85b4:	2001      	movs	r0, #1
    85b6:	4b0f      	ldr	r3, [pc, #60]	; (85f4 <_tc_timer_deinit+0x5c>)
    85b8:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    85ba:	f997 200b 	ldrsb.w	r2, [r7, #11]
    85be:	490e      	ldr	r1, [pc, #56]	; (85f8 <_tc_timer_deinit+0x60>)
    85c0:	4613      	mov	r3, r2
    85c2:	009b      	lsls	r3, r3, #2
    85c4:	4413      	add	r3, r2
    85c6:	009b      	lsls	r3, r3, #2
    85c8:	440b      	add	r3, r1
    85ca:	3302      	adds	r3, #2
    85cc:	f9b3 3000 	ldrsh.w	r3, [r3]
    85d0:	4618      	mov	r0, r3
    85d2:	4b0a      	ldr	r3, [pc, #40]	; (85fc <_tc_timer_deinit+0x64>)
    85d4:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    85d6:	68f8      	ldr	r0, [r7, #12]
    85d8:	4b09      	ldr	r3, [pc, #36]	; (8600 <_tc_timer_deinit+0x68>)
    85da:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    85dc:	68f8      	ldr	r0, [r7, #12]
    85de:	4b09      	ldr	r3, [pc, #36]	; (8604 <_tc_timer_deinit+0x6c>)
    85e0:	4798      	blx	r3
}
    85e2:	bf00      	nop
    85e4:	3710      	adds	r7, #16
    85e6:	46bd      	mov	sp, r7
    85e8:	bd80      	pop	{r7, pc}
    85ea:	bf00      	nop
    85ec:	0000895d 	.word	0x0000895d
    85f0:	0000f5cc 	.word	0x0000f5cc
    85f4:	0000389d 	.word	0x0000389d
    85f8:	200000e0 	.word	0x200000e0
    85fc:	00007c9d 	.word	0x00007c9d
    8600:	00007e91 	.word	0x00007e91
    8604:	00007e09 	.word	0x00007e09

00008608 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    8608:	b580      	push	{r7, lr}
    860a:	b082      	sub	sp, #8
    860c:	af00      	add	r7, sp, #0
    860e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8610:	687b      	ldr	r3, [r7, #4]
    8612:	68db      	ldr	r3, [r3, #12]
    8614:	4618      	mov	r0, r3
    8616:	4b03      	ldr	r3, [pc, #12]	; (8624 <_tc_timer_start+0x1c>)
    8618:	4798      	blx	r3
}
    861a:	bf00      	nop
    861c:	3708      	adds	r7, #8
    861e:	46bd      	mov	sp, r7
    8620:	bd80      	pop	{r7, pc}
    8622:	bf00      	nop
    8624:	00007e31 	.word	0x00007e31

00008628 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    8628:	b580      	push	{r7, lr}
    862a:	b082      	sub	sp, #8
    862c:	af00      	add	r7, sp, #0
    862e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8630:	687b      	ldr	r3, [r7, #4]
    8632:	691b      	ldr	r3, [r3, #16]
    8634:	4618      	mov	r0, r3
    8636:	4b03      	ldr	r3, [pc, #12]	; (8644 <_pwm_enable+0x1c>)
    8638:	4798      	blx	r3
}
    863a:	bf00      	nop
    863c:	3708      	adds	r7, #8
    863e:	46bd      	mov	sp, r7
    8640:	bd80      	pop	{r7, pc}
    8642:	bf00      	nop
    8644:	00007e31 	.word	0x00007e31

00008648 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    8648:	b580      	push	{r7, lr}
    864a:	b082      	sub	sp, #8
    864c:	af00      	add	r7, sp, #0
    864e:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8650:	687b      	ldr	r3, [r7, #4]
    8652:	68db      	ldr	r3, [r3, #12]
    8654:	4618      	mov	r0, r3
    8656:	4b03      	ldr	r3, [pc, #12]	; (8664 <_tc_timer_stop+0x1c>)
    8658:	4798      	blx	r3
}
    865a:	bf00      	nop
    865c:	3708      	adds	r7, #8
    865e:	46bd      	mov	sp, r7
    8660:	bd80      	pop	{r7, pc}
    8662:	bf00      	nop
    8664:	00007e91 	.word	0x00007e91

00008668 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    8668:	b580      	push	{r7, lr}
    866a:	b084      	sub	sp, #16
    866c:	af00      	add	r7, sp, #0
    866e:	6078      	str	r0, [r7, #4]
    8670:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    8672:	687b      	ldr	r3, [r7, #4]
    8674:	68db      	ldr	r3, [r3, #12]
    8676:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8678:	68f8      	ldr	r0, [r7, #12]
    867a:	4b14      	ldr	r3, [pc, #80]	; (86cc <_tc_timer_set_period+0x64>)
    867c:	4798      	blx	r3
    867e:	4603      	mov	r3, r0
    8680:	2b02      	cmp	r3, #2
    8682:	d105      	bne.n	8690 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    8684:	683a      	ldr	r2, [r7, #0]
    8686:	2100      	movs	r1, #0
    8688:	68f8      	ldr	r0, [r7, #12]
    868a:	4b11      	ldr	r3, [pc, #68]	; (86d0 <_tc_timer_set_period+0x68>)
    868c:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    868e:	e019      	b.n	86c4 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8690:	68f8      	ldr	r0, [r7, #12]
    8692:	4b0e      	ldr	r3, [pc, #56]	; (86cc <_tc_timer_set_period+0x64>)
    8694:	4798      	blx	r3
    8696:	4603      	mov	r3, r0
    8698:	2b00      	cmp	r3, #0
    869a:	d107      	bne.n	86ac <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    869c:	683b      	ldr	r3, [r7, #0]
    869e:	b29b      	uxth	r3, r3
    86a0:	461a      	mov	r2, r3
    86a2:	2100      	movs	r1, #0
    86a4:	68f8      	ldr	r0, [r7, #12]
    86a6:	4b0b      	ldr	r3, [pc, #44]	; (86d4 <_tc_timer_set_period+0x6c>)
    86a8:	4798      	blx	r3
}
    86aa:	e00b      	b.n	86c4 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    86ac:	68f8      	ldr	r0, [r7, #12]
    86ae:	4b07      	ldr	r3, [pc, #28]	; (86cc <_tc_timer_set_period+0x64>)
    86b0:	4798      	blx	r3
    86b2:	4603      	mov	r3, r0
    86b4:	2b01      	cmp	r3, #1
    86b6:	d105      	bne.n	86c4 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    86b8:	683b      	ldr	r3, [r7, #0]
    86ba:	b2db      	uxtb	r3, r3
    86bc:	4619      	mov	r1, r3
    86be:	68f8      	ldr	r0, [r7, #12]
    86c0:	4b05      	ldr	r3, [pc, #20]	; (86d8 <_tc_timer_set_period+0x70>)
    86c2:	4798      	blx	r3
}
    86c4:	bf00      	nop
    86c6:	3710      	adds	r7, #16
    86c8:	46bd      	mov	sp, r7
    86ca:	bd80      	pop	{r7, pc}
    86cc:	00007eb9 	.word	0x00007eb9
    86d0:	00008071 	.word	0x00008071
    86d4:	0000800d 	.word	0x0000800d
    86d8:	00007f91 	.word	0x00007f91

000086dc <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    86dc:	b580      	push	{r7, lr}
    86de:	b084      	sub	sp, #16
    86e0:	af00      	add	r7, sp, #0
    86e2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    86e4:	687b      	ldr	r3, [r7, #4]
    86e6:	68db      	ldr	r3, [r3, #12]
    86e8:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    86ea:	68f8      	ldr	r0, [r7, #12]
    86ec:	4b13      	ldr	r3, [pc, #76]	; (873c <_tc_timer_get_period+0x60>)
    86ee:	4798      	blx	r3
    86f0:	4603      	mov	r3, r0
    86f2:	2b02      	cmp	r3, #2
    86f4:	d105      	bne.n	8702 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    86f6:	2100      	movs	r1, #0
    86f8:	68f8      	ldr	r0, [r7, #12]
    86fa:	4b11      	ldr	r3, [pc, #68]	; (8740 <_tc_timer_get_period+0x64>)
    86fc:	4798      	blx	r3
    86fe:	4603      	mov	r3, r0
    8700:	e017      	b.n	8732 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8702:	68f8      	ldr	r0, [r7, #12]
    8704:	4b0d      	ldr	r3, [pc, #52]	; (873c <_tc_timer_get_period+0x60>)
    8706:	4798      	blx	r3
    8708:	4603      	mov	r3, r0
    870a:	2b00      	cmp	r3, #0
    870c:	d105      	bne.n	871a <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    870e:	2100      	movs	r1, #0
    8710:	68f8      	ldr	r0, [r7, #12]
    8712:	4b0c      	ldr	r3, [pc, #48]	; (8744 <_tc_timer_get_period+0x68>)
    8714:	4798      	blx	r3
    8716:	4603      	mov	r3, r0
    8718:	e00b      	b.n	8732 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    871a:	68f8      	ldr	r0, [r7, #12]
    871c:	4b07      	ldr	r3, [pc, #28]	; (873c <_tc_timer_get_period+0x60>)
    871e:	4798      	blx	r3
    8720:	4603      	mov	r3, r0
    8722:	2b01      	cmp	r3, #1
    8724:	d104      	bne.n	8730 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    8726:	68f8      	ldr	r0, [r7, #12]
    8728:	4b07      	ldr	r3, [pc, #28]	; (8748 <_tc_timer_get_period+0x6c>)
    872a:	4798      	blx	r3
    872c:	4603      	mov	r3, r0
    872e:	e000      	b.n	8732 <_tc_timer_get_period+0x56>
	}

	return 0;
    8730:	2300      	movs	r3, #0
}
    8732:	4618      	mov	r0, r3
    8734:	3710      	adds	r7, #16
    8736:	46bd      	mov	sp, r7
    8738:	bd80      	pop	{r7, pc}
    873a:	bf00      	nop
    873c:	00007eb9 	.word	0x00007eb9
    8740:	000080a1 	.word	0x000080a1
    8744:	00008041 	.word	0x00008041
    8748:	00007fb9 	.word	0x00007fb9

0000874c <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    874c:	b580      	push	{r7, lr}
    874e:	b082      	sub	sp, #8
    8750:	af00      	add	r7, sp, #0
    8752:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8754:	687b      	ldr	r3, [r7, #4]
    8756:	68db      	ldr	r3, [r3, #12]
    8758:	4618      	mov	r0, r3
    875a:	4b03      	ldr	r3, [pc, #12]	; (8768 <_tc_timer_is_started+0x1c>)
    875c:	4798      	blx	r3
    875e:	4603      	mov	r3, r0
}
    8760:	4618      	mov	r0, r3
    8762:	3708      	adds	r7, #8
    8764:	46bd      	mov	sp, r7
    8766:	bd80      	pop	{r7, pc}
    8768:	00007e59 	.word	0x00007e59

0000876c <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    876c:	b580      	push	{r7, lr}
    876e:	b082      	sub	sp, #8
    8770:	af00      	add	r7, sp, #0
    8772:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8774:	687b      	ldr	r3, [r7, #4]
    8776:	691b      	ldr	r3, [r3, #16]
    8778:	4618      	mov	r0, r3
    877a:	4b03      	ldr	r3, [pc, #12]	; (8788 <_pwm_is_enabled+0x1c>)
    877c:	4798      	blx	r3
    877e:	4603      	mov	r3, r0
}
    8780:	4618      	mov	r0, r3
    8782:	3708      	adds	r7, #8
    8784:	46bd      	mov	sp, r7
    8786:	bd80      	pop	{r7, pc}
    8788:	00007e59 	.word	0x00007e59

0000878c <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    878c:	b480      	push	{r7}
    878e:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    8790:	4b02      	ldr	r3, [pc, #8]	; (879c <_tc_get_timer+0x10>)
}
    8792:	4618      	mov	r0, r3
    8794:	46bd      	mov	sp, r7
    8796:	f85d 7b04 	ldr.w	r7, [sp], #4
    879a:	4770      	bx	lr
    879c:	20000158 	.word	0x20000158

000087a0 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    87a0:	b480      	push	{r7}
    87a2:	af00      	add	r7, sp, #0
	return NULL;
    87a4:	2300      	movs	r3, #0
}
    87a6:	4618      	mov	r0, r3
    87a8:	46bd      	mov	sp, r7
    87aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    87ae:	4770      	bx	lr

000087b0 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    87b0:	b580      	push	{r7, lr}
    87b2:	b084      	sub	sp, #16
    87b4:	af00      	add	r7, sp, #0
    87b6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    87b8:	687b      	ldr	r3, [r7, #4]
    87ba:	68db      	ldr	r3, [r3, #12]
    87bc:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    87be:	68f8      	ldr	r0, [r7, #12]
    87c0:	4b0e      	ldr	r3, [pc, #56]	; (87fc <_tc_timer_set_irq+0x4c>)
    87c2:	4798      	blx	r3
    87c4:	4603      	mov	r3, r0
    87c6:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    87c8:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    87cc:	490c      	ldr	r1, [pc, #48]	; (8800 <_tc_timer_set_irq+0x50>)
    87ce:	2001      	movs	r0, #1
    87d0:	4b0c      	ldr	r3, [pc, #48]	; (8804 <_tc_timer_set_irq+0x54>)
    87d2:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    87d4:	f997 200b 	ldrsb.w	r2, [r7, #11]
    87d8:	490b      	ldr	r1, [pc, #44]	; (8808 <_tc_timer_set_irq+0x58>)
    87da:	4613      	mov	r3, r2
    87dc:	009b      	lsls	r3, r3, #2
    87de:	4413      	add	r3, r2
    87e0:	009b      	lsls	r3, r3, #2
    87e2:	440b      	add	r3, r1
    87e4:	3302      	adds	r3, #2
    87e6:	f9b3 3000 	ldrsh.w	r3, [r3]
    87ea:	b2db      	uxtb	r3, r3
    87ec:	4618      	mov	r0, r3
    87ee:	4b07      	ldr	r3, [pc, #28]	; (880c <_tc_timer_set_irq+0x5c>)
    87f0:	4798      	blx	r3
}
    87f2:	bf00      	nop
    87f4:	3710      	adds	r7, #16
    87f6:	46bd      	mov	sp, r7
    87f8:	bd80      	pop	{r7, pc}
    87fa:	bf00      	nop
    87fc:	0000895d 	.word	0x0000895d
    8800:	0000f5cc 	.word	0x0000f5cc
    8804:	0000389d 	.word	0x0000389d
    8808:	200000e0 	.word	0x200000e0
    880c:	000040e9 	.word	0x000040e9

00008810 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8810:	b580      	push	{r7, lr}
    8812:	b084      	sub	sp, #16
    8814:	af00      	add	r7, sp, #0
    8816:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8818:	687b      	ldr	r3, [r7, #4]
    881a:	68db      	ldr	r3, [r3, #12]
    881c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    881e:	68f8      	ldr	r0, [r7, #12]
    8820:	4b07      	ldr	r3, [pc, #28]	; (8840 <tc_interrupt_handler+0x30>)
    8822:	4798      	blx	r3
    8824:	4603      	mov	r3, r0
    8826:	2b00      	cmp	r3, #0
    8828:	d006      	beq.n	8838 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    882a:	68f8      	ldr	r0, [r7, #12]
    882c:	4b05      	ldr	r3, [pc, #20]	; (8844 <tc_interrupt_handler+0x34>)
    882e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8830:	687b      	ldr	r3, [r7, #4]
    8832:	681b      	ldr	r3, [r3, #0]
    8834:	6878      	ldr	r0, [r7, #4]
    8836:	4798      	blx	r3
	}
}
    8838:	bf00      	nop
    883a:	3710      	adds	r7, #16
    883c:	46bd      	mov	sp, r7
    883e:	bd80      	pop	{r7, pc}
    8840:	00007d69 	.word	0x00007d69
    8844:	00007d91 	.word	0x00007d91

00008848 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8848:	b580      	push	{r7, lr}
    884a:	b084      	sub	sp, #16
    884c:	af00      	add	r7, sp, #0
    884e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8850:	687b      	ldr	r3, [r7, #4]
    8852:	691b      	ldr	r3, [r3, #16]
    8854:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8856:	68f8      	ldr	r0, [r7, #12]
    8858:	4b12      	ldr	r3, [pc, #72]	; (88a4 <tc_pwm_interrupt_handler+0x5c>)
    885a:	4798      	blx	r3
    885c:	4603      	mov	r3, r0
    885e:	2b00      	cmp	r3, #0
    8860:	d00a      	beq.n	8878 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8862:	68f8      	ldr	r0, [r7, #12]
    8864:	4b10      	ldr	r3, [pc, #64]	; (88a8 <tc_pwm_interrupt_handler+0x60>)
    8866:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8868:	687b      	ldr	r3, [r7, #4]
    886a:	681b      	ldr	r3, [r3, #0]
    886c:	2b00      	cmp	r3, #0
    886e:	d003      	beq.n	8878 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8870:	687b      	ldr	r3, [r7, #4]
    8872:	681b      	ldr	r3, [r3, #0]
    8874:	6878      	ldr	r0, [r7, #4]
    8876:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    8878:	68f8      	ldr	r0, [r7, #12]
    887a:	4b0c      	ldr	r3, [pc, #48]	; (88ac <tc_pwm_interrupt_handler+0x64>)
    887c:	4798      	blx	r3
    887e:	4603      	mov	r3, r0
    8880:	2b00      	cmp	r3, #0
    8882:	d00a      	beq.n	889a <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    8884:	68f8      	ldr	r0, [r7, #12]
    8886:	4b0a      	ldr	r3, [pc, #40]	; (88b0 <tc_pwm_interrupt_handler+0x68>)
    8888:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    888a:	687b      	ldr	r3, [r7, #4]
    888c:	685b      	ldr	r3, [r3, #4]
    888e:	2b00      	cmp	r3, #0
    8890:	d003      	beq.n	889a <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    8892:	687b      	ldr	r3, [r7, #4]
    8894:	685b      	ldr	r3, [r3, #4]
    8896:	6878      	ldr	r0, [r7, #4]
    8898:	4798      	blx	r3
		}
	}
}
    889a:	bf00      	nop
    889c:	3710      	adds	r7, #16
    889e:	46bd      	mov	sp, r7
    88a0:	bd80      	pop	{r7, pc}
    88a2:	bf00      	nop
    88a4:	00007d69 	.word	0x00007d69
    88a8:	00007d91 	.word	0x00007d91
    88ac:	00007ddf 	.word	0x00007ddf
    88b0:	00007dab 	.word	0x00007dab

000088b4 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    88b4:	b580      	push	{r7, lr}
    88b6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    88b8:	4b03      	ldr	r3, [pc, #12]	; (88c8 <TC0_Handler+0x14>)
    88ba:	681b      	ldr	r3, [r3, #0]
    88bc:	4618      	mov	r0, r3
    88be:	4b03      	ldr	r3, [pc, #12]	; (88cc <TC0_Handler+0x18>)
    88c0:	4798      	blx	r3
}
    88c2:	bf00      	nop
    88c4:	bd80      	pop	{r7, pc}
    88c6:	bf00      	nop
    88c8:	200009bc 	.word	0x200009bc
    88cc:	00008811 	.word	0x00008811

000088d0 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    88d0:	b580      	push	{r7, lr}
    88d2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    88d4:	4b03      	ldr	r3, [pc, #12]	; (88e4 <TC2_Handler+0x14>)
    88d6:	681b      	ldr	r3, [r3, #0]
    88d8:	4618      	mov	r0, r3
    88da:	4b03      	ldr	r3, [pc, #12]	; (88e8 <TC2_Handler+0x18>)
    88dc:	4798      	blx	r3
}
    88de:	bf00      	nop
    88e0:	bd80      	pop	{r7, pc}
    88e2:	bf00      	nop
    88e4:	200009c0 	.word	0x200009c0
    88e8:	00008811 	.word	0x00008811

000088ec <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    88ec:	b580      	push	{r7, lr}
    88ee:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    88f0:	4b03      	ldr	r3, [pc, #12]	; (8900 <TC4_Handler+0x14>)
    88f2:	681b      	ldr	r3, [r3, #0]
    88f4:	4618      	mov	r0, r3
    88f6:	4b03      	ldr	r3, [pc, #12]	; (8904 <TC4_Handler+0x18>)
    88f8:	4798      	blx	r3
}
    88fa:	bf00      	nop
    88fc:	bd80      	pop	{r7, pc}
    88fe:	bf00      	nop
    8900:	200009c4 	.word	0x200009c4
    8904:	00008811 	.word	0x00008811

00008908 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8908:	b580      	push	{r7, lr}
    890a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    890c:	4b03      	ldr	r3, [pc, #12]	; (891c <TC5_Handler+0x14>)
    890e:	681b      	ldr	r3, [r3, #0]
    8910:	4618      	mov	r0, r3
    8912:	4b03      	ldr	r3, [pc, #12]	; (8920 <TC5_Handler+0x18>)
    8914:	4798      	blx	r3
}
    8916:	bf00      	nop
    8918:	bd80      	pop	{r7, pc}
    891a:	bf00      	nop
    891c:	200009c8 	.word	0x200009c8
    8920:	00008811 	.word	0x00008811

00008924 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    8924:	b580      	push	{r7, lr}
    8926:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8928:	4b03      	ldr	r3, [pc, #12]	; (8938 <TC6_Handler+0x14>)
    892a:	681b      	ldr	r3, [r3, #0]
    892c:	4618      	mov	r0, r3
    892e:	4b03      	ldr	r3, [pc, #12]	; (893c <TC6_Handler+0x18>)
    8930:	4798      	blx	r3
}
    8932:	bf00      	nop
    8934:	bd80      	pop	{r7, pc}
    8936:	bf00      	nop
    8938:	200009cc 	.word	0x200009cc
    893c:	00008811 	.word	0x00008811

00008940 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8940:	b580      	push	{r7, lr}
    8942:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    8944:	4b03      	ldr	r3, [pc, #12]	; (8954 <TC7_Handler+0x14>)
    8946:	681b      	ldr	r3, [r3, #0]
    8948:	4618      	mov	r0, r3
    894a:	4b03      	ldr	r3, [pc, #12]	; (8958 <TC7_Handler+0x18>)
    894c:	4798      	blx	r3
}
    894e:	bf00      	nop
    8950:	bd80      	pop	{r7, pc}
    8952:	bf00      	nop
    8954:	200009d0 	.word	0x200009d0
    8958:	00008849 	.word	0x00008849

0000895c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    895c:	b580      	push	{r7, lr}
    895e:	b084      	sub	sp, #16
    8960:	af00      	add	r7, sp, #0
    8962:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    8964:	6878      	ldr	r0, [r7, #4]
    8966:	4b13      	ldr	r3, [pc, #76]	; (89b4 <get_tc_index+0x58>)
    8968:	4798      	blx	r3
    896a:	4603      	mov	r3, r0
    896c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    896e:	2300      	movs	r3, #0
    8970:	73fb      	strb	r3, [r7, #15]
    8972:	e010      	b.n	8996 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    8974:	7bfa      	ldrb	r2, [r7, #15]
    8976:	4910      	ldr	r1, [pc, #64]	; (89b8 <get_tc_index+0x5c>)
    8978:	4613      	mov	r3, r2
    897a:	009b      	lsls	r3, r3, #2
    897c:	4413      	add	r3, r2
    897e:	009b      	lsls	r3, r3, #2
    8980:	440b      	add	r3, r1
    8982:	781b      	ldrb	r3, [r3, #0]
    8984:	7bba      	ldrb	r2, [r7, #14]
    8986:	429a      	cmp	r2, r3
    8988:	d102      	bne.n	8990 <get_tc_index+0x34>
			return i;
    898a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    898e:	e00d      	b.n	89ac <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8990:	7bfb      	ldrb	r3, [r7, #15]
    8992:	3301      	adds	r3, #1
    8994:	73fb      	strb	r3, [r7, #15]
    8996:	7bfb      	ldrb	r3, [r7, #15]
    8998:	2b05      	cmp	r3, #5
    899a:	d9eb      	bls.n	8974 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    899c:	f240 221d 	movw	r2, #541	; 0x21d
    89a0:	4906      	ldr	r1, [pc, #24]	; (89bc <get_tc_index+0x60>)
    89a2:	2000      	movs	r0, #0
    89a4:	4b06      	ldr	r3, [pc, #24]	; (89c0 <get_tc_index+0x64>)
    89a6:	4798      	blx	r3
	return -1;
    89a8:	f04f 33ff 	mov.w	r3, #4294967295
}
    89ac:	4618      	mov	r0, r3
    89ae:	3710      	adds	r7, #16
    89b0:	46bd      	mov	sp, r7
    89b2:	bd80      	pop	{r7, pc}
    89b4:	00008a61 	.word	0x00008a61
    89b8:	200000e0 	.word	0x200000e0
    89bc:	0000f5cc 	.word	0x0000f5cc
    89c0:	0000389d 	.word	0x0000389d

000089c4 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    89c4:	b480      	push	{r7}
    89c6:	b083      	sub	sp, #12
    89c8:	af00      	add	r7, sp, #0
    89ca:	6078      	str	r0, [r7, #4]
    89cc:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    89ce:	687b      	ldr	r3, [r7, #4]
    89d0:	4a17      	ldr	r2, [pc, #92]	; (8a30 <_tc_init_irq_param+0x6c>)
    89d2:	4293      	cmp	r3, r2
    89d4:	d102      	bne.n	89dc <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    89d6:	4a17      	ldr	r2, [pc, #92]	; (8a34 <_tc_init_irq_param+0x70>)
    89d8:	683b      	ldr	r3, [r7, #0]
    89da:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    89dc:	687b      	ldr	r3, [r7, #4]
    89de:	4a16      	ldr	r2, [pc, #88]	; (8a38 <_tc_init_irq_param+0x74>)
    89e0:	4293      	cmp	r3, r2
    89e2:	d102      	bne.n	89ea <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    89e4:	4a15      	ldr	r2, [pc, #84]	; (8a3c <_tc_init_irq_param+0x78>)
    89e6:	683b      	ldr	r3, [r7, #0]
    89e8:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    89ea:	687b      	ldr	r3, [r7, #4]
    89ec:	4a14      	ldr	r2, [pc, #80]	; (8a40 <_tc_init_irq_param+0x7c>)
    89ee:	4293      	cmp	r3, r2
    89f0:	d102      	bne.n	89f8 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    89f2:	4a14      	ldr	r2, [pc, #80]	; (8a44 <_tc_init_irq_param+0x80>)
    89f4:	683b      	ldr	r3, [r7, #0]
    89f6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    89f8:	687b      	ldr	r3, [r7, #4]
    89fa:	4a13      	ldr	r2, [pc, #76]	; (8a48 <_tc_init_irq_param+0x84>)
    89fc:	4293      	cmp	r3, r2
    89fe:	d102      	bne.n	8a06 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8a00:	4a12      	ldr	r2, [pc, #72]	; (8a4c <_tc_init_irq_param+0x88>)
    8a02:	683b      	ldr	r3, [r7, #0]
    8a04:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    8a06:	687b      	ldr	r3, [r7, #4]
    8a08:	4a11      	ldr	r2, [pc, #68]	; (8a50 <_tc_init_irq_param+0x8c>)
    8a0a:	4293      	cmp	r3, r2
    8a0c:	d102      	bne.n	8a14 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    8a0e:	4a11      	ldr	r2, [pc, #68]	; (8a54 <_tc_init_irq_param+0x90>)
    8a10:	683b      	ldr	r3, [r7, #0]
    8a12:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    8a14:	687b      	ldr	r3, [r7, #4]
    8a16:	4a10      	ldr	r2, [pc, #64]	; (8a58 <_tc_init_irq_param+0x94>)
    8a18:	4293      	cmp	r3, r2
    8a1a:	d102      	bne.n	8a22 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    8a1c:	4a0f      	ldr	r2, [pc, #60]	; (8a5c <_tc_init_irq_param+0x98>)
    8a1e:	683b      	ldr	r3, [r7, #0]
    8a20:	6013      	str	r3, [r2, #0]
	}
}
    8a22:	bf00      	nop
    8a24:	370c      	adds	r7, #12
    8a26:	46bd      	mov	sp, r7
    8a28:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a2c:	4770      	bx	lr
    8a2e:	bf00      	nop
    8a30:	40003800 	.word	0x40003800
    8a34:	200009bc 	.word	0x200009bc
    8a38:	4101a000 	.word	0x4101a000
    8a3c:	200009c0 	.word	0x200009c0
    8a40:	42001400 	.word	0x42001400
    8a44:	200009c4 	.word	0x200009c4
    8a48:	42001800 	.word	0x42001800
    8a4c:	200009c8 	.word	0x200009c8
    8a50:	43001400 	.word	0x43001400
    8a54:	200009cc 	.word	0x200009cc
    8a58:	43001800 	.word	0x43001800
    8a5c:	200009d0 	.word	0x200009d0

00008a60 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    8a60:	b4b0      	push	{r4, r5, r7}
    8a62:	b08d      	sub	sp, #52	; 0x34
    8a64:	af00      	add	r7, sp, #0
    8a66:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8a68:	4b13      	ldr	r3, [pc, #76]	; (8ab8 <_get_hardware_offset+0x58>)
    8a6a:	f107 040c 	add.w	r4, r7, #12
    8a6e:	461d      	mov	r5, r3
    8a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8a74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8a78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8a7c:	2300      	movs	r3, #0
    8a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    8a80:	e010      	b.n	8aa4 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    8a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8a84:	009b      	lsls	r3, r3, #2
    8a86:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8a8a:	4413      	add	r3, r2
    8a8c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8a90:	461a      	mov	r2, r3
    8a92:	687b      	ldr	r3, [r7, #4]
    8a94:	429a      	cmp	r2, r3
    8a96:	d102      	bne.n	8a9e <_get_hardware_offset+0x3e>
			return i;
    8a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8a9a:	b2db      	uxtb	r3, r3
    8a9c:	e006      	b.n	8aac <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8aa0:	3301      	adds	r3, #1
    8aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    8aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8aa6:	2b07      	cmp	r3, #7
    8aa8:	d9eb      	bls.n	8a82 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    8aaa:	2300      	movs	r3, #0
}
    8aac:	4618      	mov	r0, r3
    8aae:	3734      	adds	r7, #52	; 0x34
    8ab0:	46bd      	mov	sp, r7
    8ab2:	bcb0      	pop	{r4, r5, r7}
    8ab4:	4770      	bx	lr
    8ab6:	bf00      	nop
    8ab8:	0000f5e0 	.word	0x0000f5e0

00008abc <__NVIC_EnableIRQ>:
{
    8abc:	b480      	push	{r7}
    8abe:	b083      	sub	sp, #12
    8ac0:	af00      	add	r7, sp, #0
    8ac2:	4603      	mov	r3, r0
    8ac4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8aca:	2b00      	cmp	r3, #0
    8acc:	db0b      	blt.n	8ae6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8ace:	4909      	ldr	r1, [pc, #36]	; (8af4 <__NVIC_EnableIRQ+0x38>)
    8ad0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8ad4:	095b      	lsrs	r3, r3, #5
    8ad6:	88fa      	ldrh	r2, [r7, #6]
    8ad8:	f002 021f 	and.w	r2, r2, #31
    8adc:	2001      	movs	r0, #1
    8ade:	fa00 f202 	lsl.w	r2, r0, r2
    8ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8ae6:	bf00      	nop
    8ae8:	370c      	adds	r7, #12
    8aea:	46bd      	mov	sp, r7
    8aec:	f85d 7b04 	ldr.w	r7, [sp], #4
    8af0:	4770      	bx	lr
    8af2:	bf00      	nop
    8af4:	e000e100 	.word	0xe000e100

00008af8 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8af8:	b480      	push	{r7}
    8afa:	b087      	sub	sp, #28
    8afc:	af00      	add	r7, sp, #0
    8afe:	60f8      	str	r0, [r7, #12]
    8b00:	460b      	mov	r3, r1
    8b02:	607a      	str	r2, [r7, #4]
    8b04:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    8b06:	7afa      	ldrb	r2, [r7, #11]
    8b08:	68f9      	ldr	r1, [r7, #12]
    8b0a:	4613      	mov	r3, r2
    8b0c:	009b      	lsls	r3, r3, #2
    8b0e:	4413      	add	r3, r2
    8b10:	009b      	lsls	r3, r3, #2
    8b12:	440b      	add	r3, r1
    8b14:	3340      	adds	r3, #64	; 0x40
    8b16:	681b      	ldr	r3, [r3, #0]
    8b18:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    8b1a:	697a      	ldr	r2, [r7, #20]
    8b1c:	687b      	ldr	r3, [r7, #4]
    8b1e:	4013      	ands	r3, r2
    8b20:	617b      	str	r3, [r7, #20]
	return tmp;
    8b22:	697b      	ldr	r3, [r7, #20]
}
    8b24:	4618      	mov	r0, r3
    8b26:	371c      	adds	r7, #28
    8b28:	46bd      	mov	sp, r7
    8b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b2e:	4770      	bx	lr

00008b30 <hri_oscctrl_get_STATUS_reg>:
{
    8b30:	b480      	push	{r7}
    8b32:	b085      	sub	sp, #20
    8b34:	af00      	add	r7, sp, #0
    8b36:	6078      	str	r0, [r7, #4]
    8b38:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8b3a:	687b      	ldr	r3, [r7, #4]
    8b3c:	691b      	ldr	r3, [r3, #16]
    8b3e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8b40:	68fa      	ldr	r2, [r7, #12]
    8b42:	683b      	ldr	r3, [r7, #0]
    8b44:	4013      	ands	r3, r2
    8b46:	60fb      	str	r3, [r7, #12]
	return tmp;
    8b48:	68fb      	ldr	r3, [r7, #12]
}
    8b4a:	4618      	mov	r0, r3
    8b4c:	3714      	adds	r7, #20
    8b4e:	46bd      	mov	sp, r7
    8b50:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b54:	4770      	bx	lr

00008b56 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    8b56:	b480      	push	{r7}
    8b58:	b085      	sub	sp, #20
    8b5a:	af00      	add	r7, sp, #0
    8b5c:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8b5e:	687b      	ldr	r3, [r7, #4]
    8b60:	f893 3020 	ldrb.w	r3, [r3, #32]
    8b64:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    8b66:	7bfb      	ldrb	r3, [r7, #15]
    8b68:	f003 0301 	and.w	r3, r3, #1
    8b6c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8b6e:	7bfb      	ldrb	r3, [r7, #15]
    8b70:	2b00      	cmp	r3, #0
    8b72:	bf14      	ite	ne
    8b74:	2301      	movne	r3, #1
    8b76:	2300      	moveq	r3, #0
    8b78:	b2db      	uxtb	r3, r3
}
    8b7a:	4618      	mov	r0, r3
    8b7c:	3714      	adds	r7, #20
    8b7e:	46bd      	mov	sp, r7
    8b80:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b84:	4770      	bx	lr

00008b86 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8b86:	b480      	push	{r7}
    8b88:	b083      	sub	sp, #12
    8b8a:	af00      	add	r7, sp, #0
    8b8c:	6078      	str	r0, [r7, #4]
    8b8e:	460b      	mov	r3, r1
    8b90:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8b92:	bf00      	nop
    8b94:	687b      	ldr	r3, [r7, #4]
    8b96:	789b      	ldrb	r3, [r3, #2]
    8b98:	b2da      	uxtb	r2, r3
    8b9a:	78fb      	ldrb	r3, [r7, #3]
    8b9c:	4013      	ands	r3, r2
    8b9e:	b2db      	uxtb	r3, r3
    8ba0:	2b00      	cmp	r3, #0
    8ba2:	d1f7      	bne.n	8b94 <hri_usb_wait_for_sync+0xe>
	};
}
    8ba4:	bf00      	nop
    8ba6:	370c      	adds	r7, #12
    8ba8:	46bd      	mov	sp, r7
    8baa:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bae:	4770      	bx	lr

00008bb0 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8bb0:	b480      	push	{r7}
    8bb2:	b083      	sub	sp, #12
    8bb4:	af00      	add	r7, sp, #0
    8bb6:	6078      	str	r0, [r7, #4]
    8bb8:	460b      	mov	r3, r1
    8bba:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8bbc:	687b      	ldr	r3, [r7, #4]
    8bbe:	789b      	ldrb	r3, [r3, #2]
    8bc0:	b2da      	uxtb	r2, r3
    8bc2:	78fb      	ldrb	r3, [r7, #3]
    8bc4:	4013      	ands	r3, r2
    8bc6:	b2db      	uxtb	r3, r3
    8bc8:	2b00      	cmp	r3, #0
    8bca:	bf14      	ite	ne
    8bcc:	2301      	movne	r3, #1
    8bce:	2300      	moveq	r3, #0
    8bd0:	b2db      	uxtb	r3, r3
}
    8bd2:	4618      	mov	r0, r3
    8bd4:	370c      	adds	r7, #12
    8bd6:	46bd      	mov	sp, r7
    8bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bdc:	4770      	bx	lr

00008bde <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    8bde:	b480      	push	{r7}
    8be0:	b085      	sub	sp, #20
    8be2:	af00      	add	r7, sp, #0
    8be4:	6078      	str	r0, [r7, #4]
    8be6:	460b      	mov	r3, r1
    8be8:	70fb      	strb	r3, [r7, #3]
    8bea:	4613      	mov	r3, r2
    8bec:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8bee:	78fb      	ldrb	r3, [r7, #3]
    8bf0:	687a      	ldr	r2, [r7, #4]
    8bf2:	3308      	adds	r3, #8
    8bf4:	015b      	lsls	r3, r3, #5
    8bf6:	4413      	add	r3, r2
    8bf8:	3307      	adds	r3, #7
    8bfa:	781b      	ldrb	r3, [r3, #0]
    8bfc:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8bfe:	7bfa      	ldrb	r2, [r7, #15]
    8c00:	78bb      	ldrb	r3, [r7, #2]
    8c02:	4013      	ands	r3, r2
    8c04:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8c06:	7bfb      	ldrb	r3, [r7, #15]
}
    8c08:	4618      	mov	r0, r3
    8c0a:	3714      	adds	r7, #20
    8c0c:	46bd      	mov	sp, r7
    8c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c12:	4770      	bx	lr

00008c14 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    8c14:	b480      	push	{r7}
    8c16:	b083      	sub	sp, #12
    8c18:	af00      	add	r7, sp, #0
    8c1a:	6078      	str	r0, [r7, #4]
    8c1c:	460b      	mov	r3, r1
    8c1e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8c20:	78fb      	ldrb	r3, [r7, #3]
    8c22:	687a      	ldr	r2, [r7, #4]
    8c24:	3308      	adds	r3, #8
    8c26:	015b      	lsls	r3, r3, #5
    8c28:	4413      	add	r3, r2
    8c2a:	3307      	adds	r3, #7
    8c2c:	781b      	ldrb	r3, [r3, #0]
    8c2e:	b2db      	uxtb	r3, r3
}
    8c30:	4618      	mov	r0, r3
    8c32:	370c      	adds	r7, #12
    8c34:	46bd      	mov	sp, r7
    8c36:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c3a:	4770      	bx	lr

00008c3c <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    8c3c:	b480      	push	{r7}
    8c3e:	b083      	sub	sp, #12
    8c40:	af00      	add	r7, sp, #0
    8c42:	6078      	str	r0, [r7, #4]
    8c44:	460b      	mov	r3, r1
    8c46:	70fb      	strb	r3, [r7, #3]
    8c48:	4613      	mov	r3, r2
    8c4a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8c4c:	78fb      	ldrb	r3, [r7, #3]
    8c4e:	687a      	ldr	r2, [r7, #4]
    8c50:	3308      	adds	r3, #8
    8c52:	015b      	lsls	r3, r3, #5
    8c54:	4413      	add	r3, r2
    8c56:	3307      	adds	r3, #7
    8c58:	78ba      	ldrb	r2, [r7, #2]
    8c5a:	701a      	strb	r2, [r3, #0]
}
    8c5c:	bf00      	nop
    8c5e:	370c      	adds	r7, #12
    8c60:	46bd      	mov	sp, r7
    8c62:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c66:	4770      	bx	lr

00008c68 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    8c68:	b480      	push	{r7}
    8c6a:	b083      	sub	sp, #12
    8c6c:	af00      	add	r7, sp, #0
    8c6e:	6078      	str	r0, [r7, #4]
    8c70:	460b      	mov	r3, r1
    8c72:	70fb      	strb	r3, [r7, #3]
    8c74:	4613      	mov	r3, r2
    8c76:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8c78:	78fb      	ldrb	r3, [r7, #3]
    8c7a:	687a      	ldr	r2, [r7, #4]
    8c7c:	3308      	adds	r3, #8
    8c7e:	015b      	lsls	r3, r3, #5
    8c80:	4413      	add	r3, r2
    8c82:	3305      	adds	r3, #5
    8c84:	78ba      	ldrb	r2, [r7, #2]
    8c86:	701a      	strb	r2, [r3, #0]
}
    8c88:	bf00      	nop
    8c8a:	370c      	adds	r7, #12
    8c8c:	46bd      	mov	sp, r7
    8c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c92:	4770      	bx	lr

00008c94 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    8c94:	b480      	push	{r7}
    8c96:	b083      	sub	sp, #12
    8c98:	af00      	add	r7, sp, #0
    8c9a:	6078      	str	r0, [r7, #4]
    8c9c:	460b      	mov	r3, r1
    8c9e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8ca0:	78fb      	ldrb	r3, [r7, #3]
    8ca2:	687a      	ldr	r2, [r7, #4]
    8ca4:	3308      	adds	r3, #8
    8ca6:	015b      	lsls	r3, r3, #5
    8ca8:	4413      	add	r3, r2
    8caa:	3306      	adds	r3, #6
    8cac:	781b      	ldrb	r3, [r3, #0]
    8cae:	b2db      	uxtb	r3, r3
}
    8cb0:	4618      	mov	r0, r3
    8cb2:	370c      	adds	r7, #12
    8cb4:	46bd      	mov	sp, r7
    8cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cba:	4770      	bx	lr

00008cbc <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    8cbc:	b480      	push	{r7}
    8cbe:	b083      	sub	sp, #12
    8cc0:	af00      	add	r7, sp, #0
    8cc2:	6078      	str	r0, [r7, #4]
    8cc4:	460b      	mov	r3, r1
    8cc6:	70fb      	strb	r3, [r7, #3]
    8cc8:	4613      	mov	r3, r2
    8cca:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8ccc:	78fb      	ldrb	r3, [r7, #3]
    8cce:	687a      	ldr	r2, [r7, #4]
    8cd0:	3308      	adds	r3, #8
    8cd2:	015b      	lsls	r3, r3, #5
    8cd4:	4413      	add	r3, r2
    8cd6:	3304      	adds	r3, #4
    8cd8:	78ba      	ldrb	r2, [r7, #2]
    8cda:	701a      	strb	r2, [r3, #0]
}
    8cdc:	bf00      	nop
    8cde:	370c      	adds	r7, #12
    8ce0:	46bd      	mov	sp, r7
    8ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ce6:	4770      	bx	lr

00008ce8 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    8ce8:	b480      	push	{r7}
    8cea:	b083      	sub	sp, #12
    8cec:	af00      	add	r7, sp, #0
    8cee:	6078      	str	r0, [r7, #4]
    8cf0:	460b      	mov	r3, r1
    8cf2:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8cf4:	78fb      	ldrb	r3, [r7, #3]
    8cf6:	687a      	ldr	r2, [r7, #4]
    8cf8:	015b      	lsls	r3, r3, #5
    8cfa:	4413      	add	r3, r2
    8cfc:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8d00:	2210      	movs	r2, #16
    8d02:	701a      	strb	r2, [r3, #0]
}
    8d04:	bf00      	nop
    8d06:	370c      	adds	r7, #12
    8d08:	46bd      	mov	sp, r7
    8d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d0e:	4770      	bx	lr

00008d10 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    8d10:	b480      	push	{r7}
    8d12:	b083      	sub	sp, #12
    8d14:	af00      	add	r7, sp, #0
    8d16:	6078      	str	r0, [r7, #4]
    8d18:	460b      	mov	r3, r1
    8d1a:	70fb      	strb	r3, [r7, #3]
    8d1c:	4613      	mov	r3, r2
    8d1e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8d20:	78fb      	ldrb	r3, [r7, #3]
    8d22:	687a      	ldr	r2, [r7, #4]
    8d24:	015b      	lsls	r3, r3, #5
    8d26:	4413      	add	r3, r2
    8d28:	f203 1309 	addw	r3, r3, #265	; 0x109
    8d2c:	78ba      	ldrb	r2, [r7, #2]
    8d2e:	701a      	strb	r2, [r3, #0]
}
    8d30:	bf00      	nop
    8d32:	370c      	adds	r7, #12
    8d34:	46bd      	mov	sp, r7
    8d36:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d3a:	4770      	bx	lr

00008d3c <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    8d3c:	b480      	push	{r7}
    8d3e:	b083      	sub	sp, #12
    8d40:	af00      	add	r7, sp, #0
    8d42:	6078      	str	r0, [r7, #4]
    8d44:	460b      	mov	r3, r1
    8d46:	70fb      	strb	r3, [r7, #3]
    8d48:	4613      	mov	r3, r2
    8d4a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8d4c:	78fb      	ldrb	r3, [r7, #3]
    8d4e:	687a      	ldr	r2, [r7, #4]
    8d50:	015b      	lsls	r3, r3, #5
    8d52:	4413      	add	r3, r2
    8d54:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8d58:	78ba      	ldrb	r2, [r7, #2]
    8d5a:	701a      	strb	r2, [r3, #0]
}
    8d5c:	bf00      	nop
    8d5e:	370c      	adds	r7, #12
    8d60:	46bd      	mov	sp, r7
    8d62:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d66:	4770      	bx	lr

00008d68 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8d68:	b480      	push	{r7}
    8d6a:	b085      	sub	sp, #20
    8d6c:	af00      	add	r7, sp, #0
    8d6e:	6078      	str	r0, [r7, #4]
    8d70:	460b      	mov	r3, r1
    8d72:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8d74:	78fb      	ldrb	r3, [r7, #3]
    8d76:	687a      	ldr	r2, [r7, #4]
    8d78:	3308      	adds	r3, #8
    8d7a:	015b      	lsls	r3, r3, #5
    8d7c:	4413      	add	r3, r2
    8d7e:	781b      	ldrb	r3, [r3, #0]
    8d80:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    8d82:	7bfb      	ldrb	r3, [r7, #15]
    8d84:	f003 0307 	and.w	r3, r3, #7
    8d88:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8d8a:	7bfb      	ldrb	r3, [r7, #15]
}
    8d8c:	4618      	mov	r0, r3
    8d8e:	3714      	adds	r7, #20
    8d90:	46bd      	mov	sp, r7
    8d92:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d96:	4770      	bx	lr

00008d98 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8d98:	b480      	push	{r7}
    8d9a:	b085      	sub	sp, #20
    8d9c:	af00      	add	r7, sp, #0
    8d9e:	6078      	str	r0, [r7, #4]
    8da0:	460b      	mov	r3, r1
    8da2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8da4:	78fb      	ldrb	r3, [r7, #3]
    8da6:	687a      	ldr	r2, [r7, #4]
    8da8:	3308      	adds	r3, #8
    8daa:	015b      	lsls	r3, r3, #5
    8dac:	4413      	add	r3, r2
    8dae:	781b      	ldrb	r3, [r3, #0]
    8db0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    8db2:	7bfb      	ldrb	r3, [r7, #15]
    8db4:	091b      	lsrs	r3, r3, #4
    8db6:	b2db      	uxtb	r3, r3
    8db8:	f003 0307 	and.w	r3, r3, #7
    8dbc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8dbe:	7bfb      	ldrb	r3, [r7, #15]
}
    8dc0:	4618      	mov	r0, r3
    8dc2:	3714      	adds	r7, #20
    8dc4:	46bd      	mov	sp, r7
    8dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dca:	4770      	bx	lr

00008dcc <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    8dcc:	b480      	push	{r7}
    8dce:	b083      	sub	sp, #12
    8dd0:	af00      	add	r7, sp, #0
    8dd2:	6078      	str	r0, [r7, #4]
    8dd4:	460b      	mov	r3, r1
    8dd6:	70fb      	strb	r3, [r7, #3]
    8dd8:	4613      	mov	r3, r2
    8dda:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8ddc:	78fb      	ldrb	r3, [r7, #3]
    8dde:	687a      	ldr	r2, [r7, #4]
    8de0:	3308      	adds	r3, #8
    8de2:	015b      	lsls	r3, r3, #5
    8de4:	4413      	add	r3, r2
    8de6:	78ba      	ldrb	r2, [r7, #2]
    8de8:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    8dea:	bf00      	nop
    8dec:	370c      	adds	r7, #12
    8dee:	46bd      	mov	sp, r7
    8df0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8df4:	4770      	bx	lr

00008df6 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    8df6:	b480      	push	{r7}
    8df8:	b083      	sub	sp, #12
    8dfa:	af00      	add	r7, sp, #0
    8dfc:	6078      	str	r0, [r7, #4]
    8dfe:	460b      	mov	r3, r1
    8e00:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8e02:	78fb      	ldrb	r3, [r7, #3]
    8e04:	687a      	ldr	r2, [r7, #4]
    8e06:	3308      	adds	r3, #8
    8e08:	015b      	lsls	r3, r3, #5
    8e0a:	4413      	add	r3, r2
    8e0c:	781b      	ldrb	r3, [r3, #0]
    8e0e:	b2db      	uxtb	r3, r3
}
    8e10:	4618      	mov	r0, r3
    8e12:	370c      	adds	r7, #12
    8e14:	46bd      	mov	sp, r7
    8e16:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e1a:	4770      	bx	lr

00008e1c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    8e1c:	b480      	push	{r7}
    8e1e:	b083      	sub	sp, #12
    8e20:	af00      	add	r7, sp, #0
    8e22:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8e24:	687b      	ldr	r3, [r7, #4]
    8e26:	8b9b      	ldrh	r3, [r3, #28]
    8e28:	b29b      	uxth	r3, r3
}
    8e2a:	4618      	mov	r0, r3
    8e2c:	370c      	adds	r7, #12
    8e2e:	46bd      	mov	sp, r7
    8e30:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e34:	4770      	bx	lr

00008e36 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    8e36:	b480      	push	{r7}
    8e38:	b083      	sub	sp, #12
    8e3a:	af00      	add	r7, sp, #0
    8e3c:	6078      	str	r0, [r7, #4]
    8e3e:	460b      	mov	r3, r1
    8e40:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8e42:	687b      	ldr	r3, [r7, #4]
    8e44:	887a      	ldrh	r2, [r7, #2]
    8e46:	839a      	strh	r2, [r3, #28]
}
    8e48:	bf00      	nop
    8e4a:	370c      	adds	r7, #12
    8e4c:	46bd      	mov	sp, r7
    8e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e52:	4770      	bx	lr

00008e54 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8e54:	b480      	push	{r7}
    8e56:	b083      	sub	sp, #12
    8e58:	af00      	add	r7, sp, #0
    8e5a:	6078      	str	r0, [r7, #4]
    8e5c:	460b      	mov	r3, r1
    8e5e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8e60:	687b      	ldr	r3, [r7, #4]
    8e62:	887a      	ldrh	r2, [r7, #2]
    8e64:	831a      	strh	r2, [r3, #24]
}
    8e66:	bf00      	nop
    8e68:	370c      	adds	r7, #12
    8e6a:	46bd      	mov	sp, r7
    8e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e70:	4770      	bx	lr

00008e72 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    8e72:	b480      	push	{r7}
    8e74:	b083      	sub	sp, #12
    8e76:	af00      	add	r7, sp, #0
    8e78:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8e7a:	687b      	ldr	r3, [r7, #4]
    8e7c:	8b1b      	ldrh	r3, [r3, #24]
    8e7e:	b29b      	uxth	r3, r3
}
    8e80:	4618      	mov	r0, r3
    8e82:	370c      	adds	r7, #12
    8e84:	46bd      	mov	sp, r7
    8e86:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e8a:	4770      	bx	lr

00008e8c <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8e8c:	b480      	push	{r7}
    8e8e:	b083      	sub	sp, #12
    8e90:	af00      	add	r7, sp, #0
    8e92:	6078      	str	r0, [r7, #4]
    8e94:	460b      	mov	r3, r1
    8e96:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8e98:	687b      	ldr	r3, [r7, #4]
    8e9a:	887a      	ldrh	r2, [r7, #2]
    8e9c:	829a      	strh	r2, [r3, #20]
}
    8e9e:	bf00      	nop
    8ea0:	370c      	adds	r7, #12
    8ea2:	46bd      	mov	sp, r7
    8ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ea8:	4770      	bx	lr

00008eaa <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    8eaa:	b480      	push	{r7}
    8eac:	b085      	sub	sp, #20
    8eae:	af00      	add	r7, sp, #0
    8eb0:	6078      	str	r0, [r7, #4]
    8eb2:	460b      	mov	r3, r1
    8eb4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    8eb6:	687b      	ldr	r3, [r7, #4]
    8eb8:	789b      	ldrb	r3, [r3, #2]
    8eba:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8ebc:	7bfa      	ldrb	r2, [r7, #15]
    8ebe:	78fb      	ldrb	r3, [r7, #3]
    8ec0:	4013      	ands	r3, r2
    8ec2:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8ec4:	7bfb      	ldrb	r3, [r7, #15]
}
    8ec6:	4618      	mov	r0, r3
    8ec8:	3714      	adds	r7, #20
    8eca:	46bd      	mov	sp, r7
    8ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ed0:	4770      	bx	lr
	...

00008ed4 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8ed4:	b580      	push	{r7, lr}
    8ed6:	b082      	sub	sp, #8
    8ed8:	af00      	add	r7, sp, #0
    8eda:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8edc:	687b      	ldr	r3, [r7, #4]
    8ede:	781b      	ldrb	r3, [r3, #0]
    8ee0:	b2db      	uxtb	r3, r3
    8ee2:	f023 0302 	bic.w	r3, r3, #2
    8ee6:	b2da      	uxtb	r2, r3
    8ee8:	687b      	ldr	r3, [r7, #4]
    8eea:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    8eec:	2103      	movs	r1, #3
    8eee:	6878      	ldr	r0, [r7, #4]
    8ef0:	4b02      	ldr	r3, [pc, #8]	; (8efc <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    8ef2:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8ef4:	bf00      	nop
    8ef6:	3708      	adds	r7, #8
    8ef8:	46bd      	mov	sp, r7
    8efa:	bd80      	pop	{r7, pc}
    8efc:	00008b87 	.word	0x00008b87

00008f00 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    8f00:	b580      	push	{r7, lr}
    8f02:	b084      	sub	sp, #16
    8f04:	af00      	add	r7, sp, #0
    8f06:	6078      	str	r0, [r7, #4]
    8f08:	460b      	mov	r3, r1
    8f0a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8f0c:	2103      	movs	r1, #3
    8f0e:	6878      	ldr	r0, [r7, #4]
    8f10:	4b06      	ldr	r3, [pc, #24]	; (8f2c <hri_usb_get_CTRLA_reg+0x2c>)
    8f12:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8f14:	687b      	ldr	r3, [r7, #4]
    8f16:	781b      	ldrb	r3, [r3, #0]
    8f18:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8f1a:	7bfa      	ldrb	r2, [r7, #15]
    8f1c:	78fb      	ldrb	r3, [r7, #3]
    8f1e:	4013      	ands	r3, r2
    8f20:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8f22:	7bfb      	ldrb	r3, [r7, #15]
}
    8f24:	4618      	mov	r0, r3
    8f26:	3710      	adds	r7, #16
    8f28:	46bd      	mov	sp, r7
    8f2a:	bd80      	pop	{r7, pc}
    8f2c:	00008b87 	.word	0x00008b87

00008f30 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    8f30:	b580      	push	{r7, lr}
    8f32:	b082      	sub	sp, #8
    8f34:	af00      	add	r7, sp, #0
    8f36:	6078      	str	r0, [r7, #4]
    8f38:	460b      	mov	r3, r1
    8f3a:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8f3c:	687b      	ldr	r3, [r7, #4]
    8f3e:	78fa      	ldrb	r2, [r7, #3]
    8f40:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8f42:	2103      	movs	r1, #3
    8f44:	6878      	ldr	r0, [r7, #4]
    8f46:	4b03      	ldr	r3, [pc, #12]	; (8f54 <hri_usb_write_CTRLA_reg+0x24>)
    8f48:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8f4a:	bf00      	nop
    8f4c:	3708      	adds	r7, #8
    8f4e:	46bd      	mov	sp, r7
    8f50:	bd80      	pop	{r7, pc}
    8f52:	bf00      	nop
    8f54:	00008b87 	.word	0x00008b87

00008f58 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    8f58:	b580      	push	{r7, lr}
    8f5a:	b082      	sub	sp, #8
    8f5c:	af00      	add	r7, sp, #0
    8f5e:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8f60:	2103      	movs	r1, #3
    8f62:	6878      	ldr	r0, [r7, #4]
    8f64:	4b04      	ldr	r3, [pc, #16]	; (8f78 <hri_usb_read_CTRLA_reg+0x20>)
    8f66:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8f68:	687b      	ldr	r3, [r7, #4]
    8f6a:	781b      	ldrb	r3, [r3, #0]
    8f6c:	b2db      	uxtb	r3, r3
}
    8f6e:	4618      	mov	r0, r3
    8f70:	3708      	adds	r7, #8
    8f72:	46bd      	mov	sp, r7
    8f74:	bd80      	pop	{r7, pc}
    8f76:	bf00      	nop
    8f78:	00008b87 	.word	0x00008b87

00008f7c <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    8f7c:	b480      	push	{r7}
    8f7e:	b083      	sub	sp, #12
    8f80:	af00      	add	r7, sp, #0
    8f82:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8f84:	687b      	ldr	r3, [r7, #4]
    8f86:	891b      	ldrh	r3, [r3, #8]
    8f88:	b29b      	uxth	r3, r3
    8f8a:	f023 0301 	bic.w	r3, r3, #1
    8f8e:	b29a      	uxth	r2, r3
    8f90:	687b      	ldr	r3, [r7, #4]
    8f92:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8f94:	bf00      	nop
    8f96:	370c      	adds	r7, #12
    8f98:	46bd      	mov	sp, r7
    8f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f9e:	4770      	bx	lr

00008fa0 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    8fa0:	b480      	push	{r7}
    8fa2:	b083      	sub	sp, #12
    8fa4:	af00      	add	r7, sp, #0
    8fa6:	6078      	str	r0, [r7, #4]
    8fa8:	460b      	mov	r3, r1
    8faa:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8fac:	687b      	ldr	r3, [r7, #4]
    8fae:	887a      	ldrh	r2, [r7, #2]
    8fb0:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8fb2:	bf00      	nop
    8fb4:	370c      	adds	r7, #12
    8fb6:	46bd      	mov	sp, r7
    8fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fbc:	4770      	bx	lr

00008fbe <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    8fbe:	b480      	push	{r7}
    8fc0:	b083      	sub	sp, #12
    8fc2:	af00      	add	r7, sp, #0
    8fc4:	6078      	str	r0, [r7, #4]
    8fc6:	460b      	mov	r3, r1
    8fc8:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8fca:	687b      	ldr	r3, [r7, #4]
    8fcc:	78fa      	ldrb	r2, [r7, #3]
    8fce:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    8fd0:	bf00      	nop
    8fd2:	370c      	adds	r7, #12
    8fd4:	46bd      	mov	sp, r7
    8fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fda:	4770      	bx	lr

00008fdc <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    8fdc:	b480      	push	{r7}
    8fde:	b083      	sub	sp, #12
    8fe0:	af00      	add	r7, sp, #0
    8fe2:	6078      	str	r0, [r7, #4]
    8fe4:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    8fe6:	687b      	ldr	r3, [r7, #4]
    8fe8:	683a      	ldr	r2, [r7, #0]
    8fea:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    8fec:	bf00      	nop
    8fee:	370c      	adds	r7, #12
    8ff0:	46bd      	mov	sp, r7
    8ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ff6:	4770      	bx	lr

00008ff8 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    8ff8:	b480      	push	{r7}
    8ffa:	b083      	sub	sp, #12
    8ffc:	af00      	add	r7, sp, #0
    8ffe:	6078      	str	r0, [r7, #4]
    9000:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    9002:	2300      	movs	r3, #0
}
    9004:	4618      	mov	r0, r3
    9006:	370c      	adds	r7, #12
    9008:	46bd      	mov	sp, r7
    900a:	f85d 7b04 	ldr.w	r7, [sp], #4
    900e:	4770      	bx	lr

00009010 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    9010:	b480      	push	{r7}
    9012:	b085      	sub	sp, #20
    9014:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    9016:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    901a:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    901c:	4b28      	ldr	r3, [pc, #160]	; (90c0 <_usb_load_calib+0xb0>)
    901e:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    9020:	f003 031f 	and.w	r3, r3, #31
    9024:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    9026:	4b26      	ldr	r3, [pc, #152]	; (90c0 <_usb_load_calib+0xb0>)
    9028:	681b      	ldr	r3, [r3, #0]
    902a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    902c:	f003 031f 	and.w	r3, r3, #31
    9030:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    9032:	4b23      	ldr	r3, [pc, #140]	; (90c0 <_usb_load_calib+0xb0>)
    9034:	681b      	ldr	r3, [r3, #0]
    9036:	0a9b      	lsrs	r3, r3, #10
    9038:	f003 0307 	and.w	r3, r3, #7
    903c:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    903e:	68fb      	ldr	r3, [r7, #12]
    9040:	2b00      	cmp	r3, #0
    9042:	d002      	beq.n	904a <_usb_load_calib+0x3a>
    9044:	68fb      	ldr	r3, [r7, #12]
    9046:	2b1f      	cmp	r3, #31
    9048:	d101      	bne.n	904e <_usb_load_calib+0x3e>
		pad_transn = 9;
    904a:	2309      	movs	r3, #9
    904c:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    904e:	68bb      	ldr	r3, [r7, #8]
    9050:	2b00      	cmp	r3, #0
    9052:	d002      	beq.n	905a <_usb_load_calib+0x4a>
    9054:	68bb      	ldr	r3, [r7, #8]
    9056:	2b1f      	cmp	r3, #31
    9058:	d101      	bne.n	905e <_usb_load_calib+0x4e>
		pad_transp = 25;
    905a:	2319      	movs	r3, #25
    905c:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    905e:	687b      	ldr	r3, [r7, #4]
    9060:	2b00      	cmp	r3, #0
    9062:	d002      	beq.n	906a <_usb_load_calib+0x5a>
    9064:	687b      	ldr	r3, [r7, #4]
    9066:	2b07      	cmp	r3, #7
    9068:	d101      	bne.n	906e <_usb_load_calib+0x5e>
		pad_trim = 6;
    906a:	2306      	movs	r3, #6
    906c:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    906e:	68fb      	ldr	r3, [r7, #12]
    9070:	b29b      	uxth	r3, r3
    9072:	019b      	lsls	r3, r3, #6
    9074:	b29b      	uxth	r3, r3
    9076:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    907a:	b29a      	uxth	r2, r3
    907c:	68bb      	ldr	r3, [r7, #8]
    907e:	b29b      	uxth	r3, r3
    9080:	f003 031f 	and.w	r3, r3, #31
    9084:	b29b      	uxth	r3, r3
    9086:	4313      	orrs	r3, r2
    9088:	b29a      	uxth	r2, r3
    908a:	687b      	ldr	r3, [r7, #4]
    908c:	b29b      	uxth	r3, r3
    908e:	031b      	lsls	r3, r3, #12
    9090:	b29b      	uxth	r3, r3
    9092:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    9096:	b29b      	uxth	r3, r3
    9098:	4313      	orrs	r3, r2
    909a:	b29a      	uxth	r2, r3
    909c:	683b      	ldr	r3, [r7, #0]
    909e:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    90a0:	683a      	ldr	r2, [r7, #0]
    90a2:	78d3      	ldrb	r3, [r2, #3]
    90a4:	f043 0303 	orr.w	r3, r3, #3
    90a8:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    90aa:	683a      	ldr	r2, [r7, #0]
    90ac:	78d3      	ldrb	r3, [r2, #3]
    90ae:	f043 030c 	orr.w	r3, r3, #12
    90b2:	70d3      	strb	r3, [r2, #3]
}
    90b4:	bf00      	nop
    90b6:	3714      	adds	r7, #20
    90b8:	46bd      	mov	sp, r7
    90ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    90be:	4770      	bx	lr
    90c0:	00800084 	.word	0x00800084

000090c4 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    90c4:	b580      	push	{r7, lr}
    90c6:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    90c8:	bf00      	nop
    90ca:	2203      	movs	r2, #3
    90cc:	2100      	movs	r1, #0
    90ce:	4804      	ldr	r0, [pc, #16]	; (90e0 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    90d0:	4b04      	ldr	r3, [pc, #16]	; (90e4 <_usb_d_dev_wait_dpll_rdy+0x20>)
    90d2:	4798      	blx	r3
    90d4:	4603      	mov	r3, r0
    90d6:	2b03      	cmp	r3, #3
    90d8:	d1f7      	bne.n	90ca <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    90da:	bf00      	nop
    90dc:	bd80      	pop	{r7, pc}
    90de:	bf00      	nop
    90e0:	40001000 	.word	0x40001000
    90e4:	00008af9 	.word	0x00008af9

000090e8 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    90e8:	b580      	push	{r7, lr}
    90ea:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    90ec:	480e      	ldr	r0, [pc, #56]	; (9128 <_usb_d_dev_wait_dfll_rdy+0x40>)
    90ee:	4b0f      	ldr	r3, [pc, #60]	; (912c <_usb_d_dev_wait_dfll_rdy+0x44>)
    90f0:	4798      	blx	r3
    90f2:	4603      	mov	r3, r0
    90f4:	2b00      	cmp	r3, #0
    90f6:	d00a      	beq.n	910e <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    90f8:	bf00      	nop
    90fa:	f44f 6110 	mov.w	r1, #2304	; 0x900
    90fe:	480a      	ldr	r0, [pc, #40]	; (9128 <_usb_d_dev_wait_dfll_rdy+0x40>)
    9100:	4b0b      	ldr	r3, [pc, #44]	; (9130 <_usb_d_dev_wait_dfll_rdy+0x48>)
    9102:	4798      	blx	r3
    9104:	4603      	mov	r3, r0
    9106:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    910a:	d1f6      	bne.n	90fa <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    910c:	e009      	b.n	9122 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    910e:	bf00      	nop
    9110:	f44f 7180 	mov.w	r1, #256	; 0x100
    9114:	4804      	ldr	r0, [pc, #16]	; (9128 <_usb_d_dev_wait_dfll_rdy+0x40>)
    9116:	4b06      	ldr	r3, [pc, #24]	; (9130 <_usb_d_dev_wait_dfll_rdy+0x48>)
    9118:	4798      	blx	r3
    911a:	4603      	mov	r3, r0
    911c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9120:	d1f6      	bne.n	9110 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    9122:	bf00      	nop
    9124:	bd80      	pop	{r7, pc}
    9126:	bf00      	nop
    9128:	40001000 	.word	0x40001000
    912c:	00008b57 	.word	0x00008b57
    9130:	00008b31 	.word	0x00008b31

00009134 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    9134:	b580      	push	{r7, lr}
    9136:	b082      	sub	sp, #8
    9138:	af00      	add	r7, sp, #0
    913a:	4603      	mov	r3, r0
    913c:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    913e:	79fb      	ldrb	r3, [r7, #7]
    9140:	2b00      	cmp	r3, #0
    9142:	d102      	bne.n	914a <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    9144:	4b05      	ldr	r3, [pc, #20]	; (915c <_usb_d_dev_wait_clk_rdy+0x28>)
    9146:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    9148:	e004      	b.n	9154 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    914a:	79fb      	ldrb	r3, [r7, #7]
    914c:	2b01      	cmp	r3, #1
    914e:	d101      	bne.n	9154 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    9150:	4b03      	ldr	r3, [pc, #12]	; (9160 <_usb_d_dev_wait_clk_rdy+0x2c>)
    9152:	4798      	blx	r3
}
    9154:	bf00      	nop
    9156:	3708      	adds	r7, #8
    9158:	46bd      	mov	sp, r7
    915a:	bd80      	pop	{r7, pc}
    915c:	000090e9 	.word	0x000090e9
    9160:	000090c5 	.word	0x000090c5

00009164 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    9164:	b580      	push	{r7, lr}
    9166:	b082      	sub	sp, #8
    9168:	af00      	add	r7, sp, #0
    916a:	4603      	mov	r3, r0
    916c:	6039      	str	r1, [r7, #0]
    916e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    9170:	683b      	ldr	r3, [r7, #0]
    9172:	b2da      	uxtb	r2, r3
    9174:	79fb      	ldrb	r3, [r7, #7]
    9176:	4619      	mov	r1, r3
    9178:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    917c:	4b02      	ldr	r3, [pc, #8]	; (9188 <_usbd_ep_int_ack+0x24>)
    917e:	4798      	blx	r3
}
    9180:	bf00      	nop
    9182:	3708      	adds	r7, #8
    9184:	46bd      	mov	sp, r7
    9186:	bd80      	pop	{r7, pc}
    9188:	00008c3d 	.word	0x00008c3d

0000918c <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    918c:	b580      	push	{r7, lr}
    918e:	b082      	sub	sp, #8
    9190:	af00      	add	r7, sp, #0
    9192:	4603      	mov	r3, r0
    9194:	6039      	str	r1, [r7, #0]
    9196:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    9198:	683b      	ldr	r3, [r7, #0]
    919a:	b2da      	uxtb	r2, r3
    919c:	79fb      	ldrb	r3, [r7, #7]
    919e:	4619      	mov	r1, r3
    91a0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91a4:	4b02      	ldr	r3, [pc, #8]	; (91b0 <_usbd_ep_int_en+0x24>)
    91a6:	4798      	blx	r3
}
    91a8:	bf00      	nop
    91aa:	3708      	adds	r7, #8
    91ac:	46bd      	mov	sp, r7
    91ae:	bd80      	pop	{r7, pc}
    91b0:	00008d11 	.word	0x00008d11

000091b4 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    91b4:	b580      	push	{r7, lr}
    91b6:	b082      	sub	sp, #8
    91b8:	af00      	add	r7, sp, #0
    91ba:	4603      	mov	r3, r0
    91bc:	6039      	str	r1, [r7, #0]
    91be:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    91c0:	683b      	ldr	r3, [r7, #0]
    91c2:	b2da      	uxtb	r2, r3
    91c4:	79fb      	ldrb	r3, [r7, #7]
    91c6:	4619      	mov	r1, r3
    91c8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91cc:	4b02      	ldr	r3, [pc, #8]	; (91d8 <_usbd_ep_int_dis+0x24>)
    91ce:	4798      	blx	r3
}
    91d0:	bf00      	nop
    91d2:	3708      	adds	r7, #8
    91d4:	46bd      	mov	sp, r7
    91d6:	bd80      	pop	{r7, pc}
    91d8:	00008d3d 	.word	0x00008d3d

000091dc <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    91dc:	b580      	push	{r7, lr}
    91de:	b082      	sub	sp, #8
    91e0:	af00      	add	r7, sp, #0
    91e2:	4603      	mov	r3, r0
    91e4:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    91e6:	79fb      	ldrb	r3, [r7, #7]
    91e8:	4619      	mov	r1, r3
    91ea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91ee:	4b06      	ldr	r3, [pc, #24]	; (9208 <_usbd_ep_is_ctrl+0x2c>)
    91f0:	4798      	blx	r3
    91f2:	4603      	mov	r3, r0
    91f4:	2b11      	cmp	r3, #17
    91f6:	bf0c      	ite	eq
    91f8:	2301      	moveq	r3, #1
    91fa:	2300      	movne	r3, #0
    91fc:	b2db      	uxtb	r3, r3
}
    91fe:	4618      	mov	r0, r3
    9200:	3708      	adds	r7, #8
    9202:	46bd      	mov	sp, r7
    9204:	bd80      	pop	{r7, pc}
    9206:	bf00      	nop
    9208:	00008df7 	.word	0x00008df7

0000920c <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    920c:	b580      	push	{r7, lr}
    920e:	b082      	sub	sp, #8
    9210:	af00      	add	r7, sp, #0
    9212:	4603      	mov	r3, r0
    9214:	71fb      	strb	r3, [r7, #7]
    9216:	460b      	mov	r3, r1
    9218:	71bb      	strb	r3, [r7, #6]
    921a:	4613      	mov	r3, r2
    921c:	717b      	strb	r3, [r7, #5]
	if (st) {
    921e:	797b      	ldrb	r3, [r7, #5]
    9220:	2b00      	cmp	r3, #0
    9222:	d00b      	beq.n	923c <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9224:	79bb      	ldrb	r3, [r7, #6]
    9226:	2210      	movs	r2, #16
    9228:	fa02 f303 	lsl.w	r3, r2, r3
    922c:	b2da      	uxtb	r2, r3
    922e:	79fb      	ldrb	r3, [r7, #7]
    9230:	4619      	mov	r1, r3
    9232:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9236:	4b09      	ldr	r3, [pc, #36]	; (925c <_usbd_ep_set_stall+0x50>)
    9238:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    923a:	e00a      	b.n	9252 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    923c:	79bb      	ldrb	r3, [r7, #6]
    923e:	2210      	movs	r2, #16
    9240:	fa02 f303 	lsl.w	r3, r2, r3
    9244:	b2da      	uxtb	r2, r3
    9246:	79fb      	ldrb	r3, [r7, #7]
    9248:	4619      	mov	r1, r3
    924a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    924e:	4b04      	ldr	r3, [pc, #16]	; (9260 <_usbd_ep_set_stall+0x54>)
    9250:	4798      	blx	r3
}
    9252:	bf00      	nop
    9254:	3708      	adds	r7, #8
    9256:	46bd      	mov	sp, r7
    9258:	bd80      	pop	{r7, pc}
    925a:	bf00      	nop
    925c:	00008c69 	.word	0x00008c69
    9260:	00008cbd 	.word	0x00008cbd

00009264 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    9264:	b580      	push	{r7, lr}
    9266:	b084      	sub	sp, #16
    9268:	af00      	add	r7, sp, #0
    926a:	4603      	mov	r3, r0
    926c:	460a      	mov	r2, r1
    926e:	71fb      	strb	r3, [r7, #7]
    9270:	4613      	mov	r3, r2
    9272:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    9274:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9278:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    927a:	79fb      	ldrb	r3, [r7, #7]
    927c:	4619      	mov	r1, r3
    927e:	68f8      	ldr	r0, [r7, #12]
    9280:	4b08      	ldr	r3, [pc, #32]	; (92a4 <_usbd_ep_is_stalled+0x40>)
    9282:	4798      	blx	r3
    9284:	4603      	mov	r3, r0
    9286:	4619      	mov	r1, r3
    9288:	79bb      	ldrb	r3, [r7, #6]
    928a:	2210      	movs	r2, #16
    928c:	fa02 f303 	lsl.w	r3, r2, r3
    9290:	400b      	ands	r3, r1
    9292:	2b00      	cmp	r3, #0
    9294:	bf14      	ite	ne
    9296:	2301      	movne	r3, #1
    9298:	2300      	moveq	r3, #0
    929a:	b2db      	uxtb	r3, r3
}
    929c:	4618      	mov	r0, r3
    929e:	3710      	adds	r7, #16
    92a0:	46bd      	mov	sp, r7
    92a2:	bd80      	pop	{r7, pc}
    92a4:	00008c95 	.word	0x00008c95

000092a8 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    92a8:	b580      	push	{r7, lr}
    92aa:	b084      	sub	sp, #16
    92ac:	af00      	add	r7, sp, #0
    92ae:	4603      	mov	r3, r0
    92b0:	460a      	mov	r2, r1
    92b2:	71fb      	strb	r3, [r7, #7]
    92b4:	4613      	mov	r3, r2
    92b6:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    92b8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    92bc:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    92be:	79fb      	ldrb	r3, [r7, #7]
    92c0:	4619      	mov	r1, r3
    92c2:	68f8      	ldr	r0, [r7, #12]
    92c4:	4b08      	ldr	r3, [pc, #32]	; (92e8 <_usbd_ep_is_stall_sent+0x40>)
    92c6:	4798      	blx	r3
    92c8:	4603      	mov	r3, r0
    92ca:	4619      	mov	r1, r3
    92cc:	79bb      	ldrb	r3, [r7, #6]
    92ce:	2220      	movs	r2, #32
    92d0:	fa02 f303 	lsl.w	r3, r2, r3
    92d4:	400b      	ands	r3, r1
    92d6:	2b00      	cmp	r3, #0
    92d8:	bf14      	ite	ne
    92da:	2301      	movne	r3, #1
    92dc:	2300      	moveq	r3, #0
    92de:	b2db      	uxtb	r3, r3
}
    92e0:	4618      	mov	r0, r3
    92e2:	3710      	adds	r7, #16
    92e4:	46bd      	mov	sp, r7
    92e6:	bd80      	pop	{r7, pc}
    92e8:	00008c15 	.word	0x00008c15

000092ec <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    92ec:	b580      	push	{r7, lr}
    92ee:	b082      	sub	sp, #8
    92f0:	af00      	add	r7, sp, #0
    92f2:	4603      	mov	r3, r0
    92f4:	460a      	mov	r2, r1
    92f6:	71fb      	strb	r3, [r7, #7]
    92f8:	4613      	mov	r3, r2
    92fa:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    92fc:	79bb      	ldrb	r3, [r7, #6]
    92fe:	2220      	movs	r2, #32
    9300:	409a      	lsls	r2, r3
    9302:	79fb      	ldrb	r3, [r7, #7]
    9304:	4611      	mov	r1, r2
    9306:	4618      	mov	r0, r3
    9308:	4b02      	ldr	r3, [pc, #8]	; (9314 <_usbd_ep_ack_stall+0x28>)
    930a:	4798      	blx	r3
}
    930c:	bf00      	nop
    930e:	3708      	adds	r7, #8
    9310:	46bd      	mov	sp, r7
    9312:	bd80      	pop	{r7, pc}
    9314:	00009165 	.word	0x00009165

00009318 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    9318:	b580      	push	{r7, lr}
    931a:	b082      	sub	sp, #8
    931c:	af00      	add	r7, sp, #0
    931e:	4603      	mov	r3, r0
    9320:	71fb      	strb	r3, [r7, #7]
    9322:	460b      	mov	r3, r1
    9324:	71bb      	strb	r3, [r7, #6]
    9326:	4613      	mov	r3, r2
    9328:	717b      	strb	r3, [r7, #5]
	if (en) {
    932a:	797b      	ldrb	r3, [r7, #5]
    932c:	2b00      	cmp	r3, #0
    932e:	d008      	beq.n	9342 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9330:	79bb      	ldrb	r3, [r7, #6]
    9332:	2220      	movs	r2, #32
    9334:	409a      	lsls	r2, r3
    9336:	79fb      	ldrb	r3, [r7, #7]
    9338:	4611      	mov	r1, r2
    933a:	4618      	mov	r0, r3
    933c:	4b07      	ldr	r3, [pc, #28]	; (935c <_usbd_ep_int_stall_en+0x44>)
    933e:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    9340:	e007      	b.n	9352 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9342:	79bb      	ldrb	r3, [r7, #6]
    9344:	2220      	movs	r2, #32
    9346:	409a      	lsls	r2, r3
    9348:	79fb      	ldrb	r3, [r7, #7]
    934a:	4611      	mov	r1, r2
    934c:	4618      	mov	r0, r3
    934e:	4b04      	ldr	r3, [pc, #16]	; (9360 <_usbd_ep_int_stall_en+0x48>)
    9350:	4798      	blx	r3
}
    9352:	bf00      	nop
    9354:	3708      	adds	r7, #8
    9356:	46bd      	mov	sp, r7
    9358:	bd80      	pop	{r7, pc}
    935a:	bf00      	nop
    935c:	0000918d 	.word	0x0000918d
    9360:	000091b5 	.word	0x000091b5

00009364 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    9364:	b580      	push	{r7, lr}
    9366:	b082      	sub	sp, #8
    9368:	af00      	add	r7, sp, #0
    936a:	4603      	mov	r3, r0
    936c:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    936e:	79fb      	ldrb	r3, [r7, #7]
    9370:	4619      	mov	r1, r3
    9372:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9376:	4b03      	ldr	r3, [pc, #12]	; (9384 <_usbd_ep_stop_setup+0x20>)
    9378:	4798      	blx	r3
}
    937a:	bf00      	nop
    937c:	3708      	adds	r7, #8
    937e:	46bd      	mov	sp, r7
    9380:	bd80      	pop	{r7, pc}
    9382:	bf00      	nop
    9384:	00008ce9 	.word	0x00008ce9

00009388 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    9388:	b580      	push	{r7, lr}
    938a:	b082      	sub	sp, #8
    938c:	af00      	add	r7, sp, #0
    938e:	4603      	mov	r3, r0
    9390:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    9392:	79fb      	ldrb	r3, [r7, #7]
    9394:	2210      	movs	r2, #16
    9396:	4619      	mov	r1, r3
    9398:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    939c:	4b05      	ldr	r3, [pc, #20]	; (93b4 <_usbd_ep_is_setup+0x2c>)
    939e:	4798      	blx	r3
    93a0:	4603      	mov	r3, r0
    93a2:	2b00      	cmp	r3, #0
    93a4:	bf14      	ite	ne
    93a6:	2301      	movne	r3, #1
    93a8:	2300      	moveq	r3, #0
    93aa:	b2db      	uxtb	r3, r3
}
    93ac:	4618      	mov	r0, r3
    93ae:	3708      	adds	r7, #8
    93b0:	46bd      	mov	sp, r7
    93b2:	bd80      	pop	{r7, pc}
    93b4:	00008bdf 	.word	0x00008bdf

000093b8 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    93b8:	b580      	push	{r7, lr}
    93ba:	b082      	sub	sp, #8
    93bc:	af00      	add	r7, sp, #0
    93be:	4603      	mov	r3, r0
    93c0:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    93c2:	79fb      	ldrb	r3, [r7, #7]
    93c4:	2110      	movs	r1, #16
    93c6:	4618      	mov	r0, r3
    93c8:	4b02      	ldr	r3, [pc, #8]	; (93d4 <_usbd_ep_ack_setup+0x1c>)
    93ca:	4798      	blx	r3
}
    93cc:	bf00      	nop
    93ce:	3708      	adds	r7, #8
    93d0:	46bd      	mov	sp, r7
    93d2:	bd80      	pop	{r7, pc}
    93d4:	00009165 	.word	0x00009165

000093d8 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    93d8:	b580      	push	{r7, lr}
    93da:	b082      	sub	sp, #8
    93dc:	af00      	add	r7, sp, #0
    93de:	4603      	mov	r3, r0
    93e0:	71fb      	strb	r3, [r7, #7]
    93e2:	460b      	mov	r3, r1
    93e4:	71bb      	strb	r3, [r7, #6]
    93e6:	4613      	mov	r3, r2
    93e8:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    93ea:	797b      	ldrb	r3, [r7, #5]
    93ec:	2b00      	cmp	r3, #0
    93ee:	d00b      	beq.n	9408 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    93f0:	79bb      	ldrb	r3, [r7, #6]
    93f2:	2201      	movs	r2, #1
    93f4:	fa02 f303 	lsl.w	r3, r2, r3
    93f8:	b2da      	uxtb	r2, r3
    93fa:	79fb      	ldrb	r3, [r7, #7]
    93fc:	4619      	mov	r1, r3
    93fe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9402:	4b09      	ldr	r3, [pc, #36]	; (9428 <_usbd_ep_set_toggle+0x50>)
    9404:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    9406:	e00a      	b.n	941e <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9408:	79bb      	ldrb	r3, [r7, #6]
    940a:	2201      	movs	r2, #1
    940c:	fa02 f303 	lsl.w	r3, r2, r3
    9410:	b2da      	uxtb	r2, r3
    9412:	79fb      	ldrb	r3, [r7, #7]
    9414:	4619      	mov	r1, r3
    9416:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    941a:	4b04      	ldr	r3, [pc, #16]	; (942c <_usbd_ep_set_toggle+0x54>)
    941c:	4798      	blx	r3
}
    941e:	bf00      	nop
    9420:	3708      	adds	r7, #8
    9422:	46bd      	mov	sp, r7
    9424:	bd80      	pop	{r7, pc}
    9426:	bf00      	nop
    9428:	00008c69 	.word	0x00008c69
    942c:	00008cbd 	.word	0x00008cbd

00009430 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    9430:	b580      	push	{r7, lr}
    9432:	b082      	sub	sp, #8
    9434:	af00      	add	r7, sp, #0
    9436:	4603      	mov	r3, r0
    9438:	460a      	mov	r2, r1
    943a:	71fb      	strb	r3, [r7, #7]
    943c:	4613      	mov	r3, r2
    943e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    9440:	79bb      	ldrb	r3, [r7, #6]
    9442:	2201      	movs	r2, #1
    9444:	409a      	lsls	r2, r3
    9446:	79fb      	ldrb	r3, [r7, #7]
    9448:	4611      	mov	r1, r2
    944a:	4618      	mov	r0, r3
    944c:	4b02      	ldr	r3, [pc, #8]	; (9458 <_usbd_ep_ack_io_cpt+0x28>)
    944e:	4798      	blx	r3
}
    9450:	bf00      	nop
    9452:	3708      	adds	r7, #8
    9454:	46bd      	mov	sp, r7
    9456:	bd80      	pop	{r7, pc}
    9458:	00009165 	.word	0x00009165

0000945c <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    945c:	b480      	push	{r7}
    945e:	b085      	sub	sp, #20
    9460:	af00      	add	r7, sp, #0
    9462:	4603      	mov	r3, r0
    9464:	603a      	str	r2, [r7, #0]
    9466:	71fb      	strb	r3, [r7, #7]
    9468:	460b      	mov	r3, r1
    946a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    946c:	79fa      	ldrb	r2, [r7, #7]
    946e:	79bb      	ldrb	r3, [r7, #6]
    9470:	0052      	lsls	r2, r2, #1
    9472:	4413      	add	r3, r2
    9474:	011b      	lsls	r3, r3, #4
    9476:	4a06      	ldr	r2, [pc, #24]	; (9490 <_usbd_ep_set_buf+0x34>)
    9478:	4413      	add	r3, r2
    947a:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    947c:	68fb      	ldr	r3, [r7, #12]
    947e:	683a      	ldr	r2, [r7, #0]
    9480:	601a      	str	r2, [r3, #0]
}
    9482:	bf00      	nop
    9484:	3714      	adds	r7, #20
    9486:	46bd      	mov	sp, r7
    9488:	f85d 7b04 	ldr.w	r7, [sp], #4
    948c:	4770      	bx	lr
    948e:	bf00      	nop
    9490:	20000cdc 	.word	0x20000cdc

00009494 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9494:	b480      	push	{r7}
    9496:	b085      	sub	sp, #20
    9498:	af00      	add	r7, sp, #0
    949a:	4603      	mov	r3, r0
    949c:	71fb      	strb	r3, [r7, #7]
    949e:	460b      	mov	r3, r1
    94a0:	71bb      	strb	r3, [r7, #6]
    94a2:	4613      	mov	r3, r2
    94a4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    94a6:	79fa      	ldrb	r2, [r7, #7]
    94a8:	79bb      	ldrb	r3, [r7, #6]
    94aa:	0052      	lsls	r2, r2, #1
    94ac:	4413      	add	r3, r2
    94ae:	011b      	lsls	r3, r3, #4
    94b0:	4a08      	ldr	r2, [pc, #32]	; (94d4 <_usbd_ep_set_in_count+0x40>)
    94b2:	4413      	add	r3, r2
    94b4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    94b6:	88bb      	ldrh	r3, [r7, #4]
    94b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    94bc:	b299      	uxth	r1, r3
    94be:	68fa      	ldr	r2, [r7, #12]
    94c0:	6853      	ldr	r3, [r2, #4]
    94c2:	f361 339b 	bfi	r3, r1, #14, #14
    94c6:	6053      	str	r3, [r2, #4]
}
    94c8:	bf00      	nop
    94ca:	3714      	adds	r7, #20
    94cc:	46bd      	mov	sp, r7
    94ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    94d2:	4770      	bx	lr
    94d4:	20000cdc 	.word	0x20000cdc

000094d8 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    94d8:	b480      	push	{r7}
    94da:	b085      	sub	sp, #20
    94dc:	af00      	add	r7, sp, #0
    94de:	4603      	mov	r3, r0
    94e0:	71fb      	strb	r3, [r7, #7]
    94e2:	460b      	mov	r3, r1
    94e4:	71bb      	strb	r3, [r7, #6]
    94e6:	4613      	mov	r3, r2
    94e8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    94ea:	79fa      	ldrb	r2, [r7, #7]
    94ec:	79bb      	ldrb	r3, [r7, #6]
    94ee:	0052      	lsls	r2, r2, #1
    94f0:	4413      	add	r3, r2
    94f2:	011b      	lsls	r3, r3, #4
    94f4:	4a08      	ldr	r2, [pc, #32]	; (9518 <_usbd_ep_set_in_size+0x40>)
    94f6:	4413      	add	r3, r2
    94f8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    94fa:	88bb      	ldrh	r3, [r7, #4]
    94fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9500:	b299      	uxth	r1, r3
    9502:	68fa      	ldr	r2, [r7, #12]
    9504:	6853      	ldr	r3, [r2, #4]
    9506:	f361 030d 	bfi	r3, r1, #0, #14
    950a:	6053      	str	r3, [r2, #4]
}
    950c:	bf00      	nop
    950e:	3714      	adds	r7, #20
    9510:	46bd      	mov	sp, r7
    9512:	f85d 7b04 	ldr.w	r7, [sp], #4
    9516:	4770      	bx	lr
    9518:	20000cdc 	.word	0x20000cdc

0000951c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    951c:	b480      	push	{r7}
    951e:	b085      	sub	sp, #20
    9520:	af00      	add	r7, sp, #0
    9522:	4603      	mov	r3, r0
    9524:	71fb      	strb	r3, [r7, #7]
    9526:	460b      	mov	r3, r1
    9528:	71bb      	strb	r3, [r7, #6]
    952a:	4613      	mov	r3, r2
    952c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    952e:	79fa      	ldrb	r2, [r7, #7]
    9530:	79bb      	ldrb	r3, [r7, #6]
    9532:	0052      	lsls	r2, r2, #1
    9534:	4413      	add	r3, r2
    9536:	011b      	lsls	r3, r3, #4
    9538:	4a08      	ldr	r2, [pc, #32]	; (955c <_usbd_ep_set_out_count+0x40>)
    953a:	4413      	add	r3, r2
    953c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    953e:	88bb      	ldrh	r3, [r7, #4]
    9540:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9544:	b299      	uxth	r1, r3
    9546:	68fa      	ldr	r2, [r7, #12]
    9548:	6853      	ldr	r3, [r2, #4]
    954a:	f361 030d 	bfi	r3, r1, #0, #14
    954e:	6053      	str	r3, [r2, #4]
}
    9550:	bf00      	nop
    9552:	3714      	adds	r7, #20
    9554:	46bd      	mov	sp, r7
    9556:	f85d 7b04 	ldr.w	r7, [sp], #4
    955a:	4770      	bx	lr
    955c:	20000cdc 	.word	0x20000cdc

00009560 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9560:	b480      	push	{r7}
    9562:	b085      	sub	sp, #20
    9564:	af00      	add	r7, sp, #0
    9566:	4603      	mov	r3, r0
    9568:	71fb      	strb	r3, [r7, #7]
    956a:	460b      	mov	r3, r1
    956c:	71bb      	strb	r3, [r7, #6]
    956e:	4613      	mov	r3, r2
    9570:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9572:	79fa      	ldrb	r2, [r7, #7]
    9574:	79bb      	ldrb	r3, [r7, #6]
    9576:	0052      	lsls	r2, r2, #1
    9578:	4413      	add	r3, r2
    957a:	011b      	lsls	r3, r3, #4
    957c:	4a08      	ldr	r2, [pc, #32]	; (95a0 <_usbd_ep_set_out_size+0x40>)
    957e:	4413      	add	r3, r2
    9580:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    9582:	88bb      	ldrh	r3, [r7, #4]
    9584:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9588:	b299      	uxth	r1, r3
    958a:	68fa      	ldr	r2, [r7, #12]
    958c:	6853      	ldr	r3, [r2, #4]
    958e:	f361 339b 	bfi	r3, r1, #14, #14
    9592:	6053      	str	r3, [r2, #4]
}
    9594:	bf00      	nop
    9596:	3714      	adds	r7, #20
    9598:	46bd      	mov	sp, r7
    959a:	f85d 7b04 	ldr.w	r7, [sp], #4
    959e:	4770      	bx	lr
    95a0:	20000cdc 	.word	0x20000cdc

000095a4 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    95a4:	b580      	push	{r7, lr}
    95a6:	b084      	sub	sp, #16
    95a8:	af00      	add	r7, sp, #0
    95aa:	60ba      	str	r2, [r7, #8]
    95ac:	607b      	str	r3, [r7, #4]
    95ae:	4603      	mov	r3, r0
    95b0:	73fb      	strb	r3, [r7, #15]
    95b2:	460b      	mov	r3, r1
    95b4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    95b6:	68bb      	ldr	r3, [r7, #8]
    95b8:	b29a      	uxth	r2, r3
    95ba:	7bb9      	ldrb	r1, [r7, #14]
    95bc:	7bfb      	ldrb	r3, [r7, #15]
    95be:	4618      	mov	r0, r3
    95c0:	4b06      	ldr	r3, [pc, #24]	; (95dc <_usbd_ep_set_in_trans+0x38>)
    95c2:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    95c4:	687b      	ldr	r3, [r7, #4]
    95c6:	b29a      	uxth	r2, r3
    95c8:	7bb9      	ldrb	r1, [r7, #14]
    95ca:	7bfb      	ldrb	r3, [r7, #15]
    95cc:	4618      	mov	r0, r3
    95ce:	4b04      	ldr	r3, [pc, #16]	; (95e0 <_usbd_ep_set_in_trans+0x3c>)
    95d0:	4798      	blx	r3
}
    95d2:	bf00      	nop
    95d4:	3710      	adds	r7, #16
    95d6:	46bd      	mov	sp, r7
    95d8:	bd80      	pop	{r7, pc}
    95da:	bf00      	nop
    95dc:	000094d9 	.word	0x000094d9
    95e0:	00009495 	.word	0x00009495

000095e4 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    95e4:	b580      	push	{r7, lr}
    95e6:	b084      	sub	sp, #16
    95e8:	af00      	add	r7, sp, #0
    95ea:	60ba      	str	r2, [r7, #8]
    95ec:	607b      	str	r3, [r7, #4]
    95ee:	4603      	mov	r3, r0
    95f0:	73fb      	strb	r3, [r7, #15]
    95f2:	460b      	mov	r3, r1
    95f4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    95f6:	68bb      	ldr	r3, [r7, #8]
    95f8:	b29a      	uxth	r2, r3
    95fa:	7bb9      	ldrb	r1, [r7, #14]
    95fc:	7bfb      	ldrb	r3, [r7, #15]
    95fe:	4618      	mov	r0, r3
    9600:	4b06      	ldr	r3, [pc, #24]	; (961c <_usbd_ep_set_out_trans+0x38>)
    9602:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    9604:	687b      	ldr	r3, [r7, #4]
    9606:	b29a      	uxth	r2, r3
    9608:	7bb9      	ldrb	r1, [r7, #14]
    960a:	7bfb      	ldrb	r3, [r7, #15]
    960c:	4618      	mov	r0, r3
    960e:	4b04      	ldr	r3, [pc, #16]	; (9620 <_usbd_ep_set_out_trans+0x3c>)
    9610:	4798      	blx	r3
}
    9612:	bf00      	nop
    9614:	3710      	adds	r7, #16
    9616:	46bd      	mov	sp, r7
    9618:	bd80      	pop	{r7, pc}
    961a:	bf00      	nop
    961c:	00009561 	.word	0x00009561
    9620:	0000951d 	.word	0x0000951d

00009624 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    9624:	b480      	push	{r7}
    9626:	b085      	sub	sp, #20
    9628:	af00      	add	r7, sp, #0
    962a:	4603      	mov	r3, r0
    962c:	460a      	mov	r2, r1
    962e:	71fb      	strb	r3, [r7, #7]
    9630:	4613      	mov	r3, r2
    9632:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9634:	79fa      	ldrb	r2, [r7, #7]
    9636:	79bb      	ldrb	r3, [r7, #6]
    9638:	0052      	lsls	r2, r2, #1
    963a:	4413      	add	r3, r2
    963c:	011b      	lsls	r3, r3, #4
    963e:	4a06      	ldr	r2, [pc, #24]	; (9658 <_usbd_ep_clear_bank_status+0x34>)
    9640:	4413      	add	r3, r2
    9642:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    9644:	68fb      	ldr	r3, [r7, #12]
    9646:	2200      	movs	r2, #0
    9648:	729a      	strb	r2, [r3, #10]
}
    964a:	bf00      	nop
    964c:	3714      	adds	r7, #20
    964e:	46bd      	mov	sp, r7
    9650:	f85d 7b04 	ldr.w	r7, [sp], #4
    9654:	4770      	bx	lr
    9656:	bf00      	nop
    9658:	20000cdc 	.word	0x20000cdc

0000965c <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    965c:	b580      	push	{r7, lr}
    965e:	b082      	sub	sp, #8
    9660:	af00      	add	r7, sp, #0
    9662:	4603      	mov	r3, r0
    9664:	71fb      	strb	r3, [r7, #7]
    9666:	460b      	mov	r3, r1
    9668:	71bb      	strb	r3, [r7, #6]
    966a:	4613      	mov	r3, r2
    966c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    966e:	797b      	ldrb	r3, [r7, #5]
    9670:	2b00      	cmp	r3, #0
    9672:	d00b      	beq.n	968c <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9674:	79bb      	ldrb	r3, [r7, #6]
    9676:	2240      	movs	r2, #64	; 0x40
    9678:	fa02 f303 	lsl.w	r3, r2, r3
    967c:	b2da      	uxtb	r2, r3
    967e:	79fb      	ldrb	r3, [r7, #7]
    9680:	4619      	mov	r1, r3
    9682:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9686:	4b09      	ldr	r3, [pc, #36]	; (96ac <_usbd_ep_set_in_rdy+0x50>)
    9688:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    968a:	e00a      	b.n	96a2 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    968c:	79bb      	ldrb	r3, [r7, #6]
    968e:	2240      	movs	r2, #64	; 0x40
    9690:	fa02 f303 	lsl.w	r3, r2, r3
    9694:	b2da      	uxtb	r2, r3
    9696:	79fb      	ldrb	r3, [r7, #7]
    9698:	4619      	mov	r1, r3
    969a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    969e:	4b04      	ldr	r3, [pc, #16]	; (96b0 <_usbd_ep_set_in_rdy+0x54>)
    96a0:	4798      	blx	r3
}
    96a2:	bf00      	nop
    96a4:	3708      	adds	r7, #8
    96a6:	46bd      	mov	sp, r7
    96a8:	bd80      	pop	{r7, pc}
    96aa:	bf00      	nop
    96ac:	00008c69 	.word	0x00008c69
    96b0:	00008cbd 	.word	0x00008cbd

000096b4 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    96b4:	b580      	push	{r7, lr}
    96b6:	b082      	sub	sp, #8
    96b8:	af00      	add	r7, sp, #0
    96ba:	4603      	mov	r3, r0
    96bc:	71fb      	strb	r3, [r7, #7]
    96be:	460b      	mov	r3, r1
    96c0:	71bb      	strb	r3, [r7, #6]
    96c2:	4613      	mov	r3, r2
    96c4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    96c6:	797b      	ldrb	r3, [r7, #5]
    96c8:	2b00      	cmp	r3, #0
    96ca:	d00b      	beq.n	96e4 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    96cc:	79bb      	ldrb	r3, [r7, #6]
    96ce:	2240      	movs	r2, #64	; 0x40
    96d0:	fa02 f303 	lsl.w	r3, r2, r3
    96d4:	b2da      	uxtb	r2, r3
    96d6:	79fb      	ldrb	r3, [r7, #7]
    96d8:	4619      	mov	r1, r3
    96da:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    96de:	4b09      	ldr	r3, [pc, #36]	; (9704 <_usbd_ep_set_out_rdy+0x50>)
    96e0:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    96e2:	e00a      	b.n	96fa <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    96e4:	79bb      	ldrb	r3, [r7, #6]
    96e6:	2240      	movs	r2, #64	; 0x40
    96e8:	fa02 f303 	lsl.w	r3, r2, r3
    96ec:	b2da      	uxtb	r2, r3
    96ee:	79fb      	ldrb	r3, [r7, #7]
    96f0:	4619      	mov	r1, r3
    96f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    96f6:	4b04      	ldr	r3, [pc, #16]	; (9708 <_usbd_ep_set_out_rdy+0x54>)
    96f8:	4798      	blx	r3
}
    96fa:	bf00      	nop
    96fc:	3708      	adds	r7, #8
    96fe:	46bd      	mov	sp, r7
    9700:	bd80      	pop	{r7, pc}
    9702:	bf00      	nop
    9704:	00008cbd 	.word	0x00008cbd
    9708:	00008c69 	.word	0x00008c69

0000970c <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    970c:	b480      	push	{r7}
    970e:	b083      	sub	sp, #12
    9710:	af00      	add	r7, sp, #0
    9712:	4603      	mov	r3, r0
    9714:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9716:	88fb      	ldrh	r3, [r7, #6]
    9718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    971c:	d820      	bhi.n	9760 <_usbd_ep_pcksize_size+0x54>
    971e:	88fb      	ldrh	r3, [r7, #6]
    9720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9724:	d81a      	bhi.n	975c <_usbd_ep_pcksize_size+0x50>
    9726:	88fb      	ldrh	r3, [r7, #6]
    9728:	2b80      	cmp	r3, #128	; 0x80
    972a:	d815      	bhi.n	9758 <_usbd_ep_pcksize_size+0x4c>
    972c:	88fb      	ldrh	r3, [r7, #6]
    972e:	2b40      	cmp	r3, #64	; 0x40
    9730:	d810      	bhi.n	9754 <_usbd_ep_pcksize_size+0x48>
    9732:	88fb      	ldrh	r3, [r7, #6]
    9734:	2b20      	cmp	r3, #32
    9736:	d80b      	bhi.n	9750 <_usbd_ep_pcksize_size+0x44>
    9738:	88fb      	ldrh	r3, [r7, #6]
    973a:	2b10      	cmp	r3, #16
    973c:	d806      	bhi.n	974c <_usbd_ep_pcksize_size+0x40>
    973e:	88fb      	ldrh	r3, [r7, #6]
    9740:	2b08      	cmp	r3, #8
    9742:	bf8c      	ite	hi
    9744:	2301      	movhi	r3, #1
    9746:	2300      	movls	r3, #0
    9748:	b2db      	uxtb	r3, r3
    974a:	e00a      	b.n	9762 <_usbd_ep_pcksize_size+0x56>
    974c:	2302      	movs	r3, #2
    974e:	e008      	b.n	9762 <_usbd_ep_pcksize_size+0x56>
    9750:	2303      	movs	r3, #3
    9752:	e006      	b.n	9762 <_usbd_ep_pcksize_size+0x56>
    9754:	2304      	movs	r3, #4
    9756:	e004      	b.n	9762 <_usbd_ep_pcksize_size+0x56>
    9758:	2305      	movs	r3, #5
    975a:	e002      	b.n	9762 <_usbd_ep_pcksize_size+0x56>
    975c:	2306      	movs	r3, #6
    975e:	e000      	b.n	9762 <_usbd_ep_pcksize_size+0x56>
    9760:	2307      	movs	r3, #7
}
    9762:	4618      	mov	r0, r3
    9764:	370c      	adds	r7, #12
    9766:	46bd      	mov	sp, r7
    9768:	f85d 7b04 	ldr.w	r7, [sp], #4
    976c:	4770      	bx	lr
	...

00009770 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9770:	b480      	push	{r7}
    9772:	b085      	sub	sp, #20
    9774:	af00      	add	r7, sp, #0
    9776:	4603      	mov	r3, r0
    9778:	460a      	mov	r2, r1
    977a:	71fb      	strb	r3, [r7, #7]
    977c:	4613      	mov	r3, r2
    977e:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9780:	79fb      	ldrb	r3, [r7, #7]
    9782:	2b00      	cmp	r3, #0
    9784:	d008      	beq.n	9798 <_usb_d_dev_ept+0x28>
    9786:	79bb      	ldrb	r3, [r7, #6]
    9788:	2b00      	cmp	r3, #0
    978a:	d003      	beq.n	9794 <_usb_d_dev_ept+0x24>
    978c:	79fb      	ldrb	r3, [r7, #7]
    978e:	3304      	adds	r3, #4
    9790:	b2db      	uxtb	r3, r3
    9792:	e002      	b.n	979a <_usb_d_dev_ept+0x2a>
    9794:	79fb      	ldrb	r3, [r7, #7]
    9796:	e000      	b.n	979a <_usb_d_dev_ept+0x2a>
    9798:	2300      	movs	r3, #0
    979a:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    979c:	7bfa      	ldrb	r2, [r7, #15]
    979e:	4613      	mov	r3, r2
    97a0:	009b      	lsls	r3, r3, #2
    97a2:	4413      	add	r3, r2
    97a4:	009b      	lsls	r3, r3, #2
    97a6:	3310      	adds	r3, #16
    97a8:	4a04      	ldr	r2, [pc, #16]	; (97bc <_usb_d_dev_ept+0x4c>)
    97aa:	4413      	add	r3, r2
    97ac:	3304      	adds	r3, #4
}
    97ae:	4618      	mov	r0, r3
    97b0:	3714      	adds	r7, #20
    97b2:	46bd      	mov	sp, r7
    97b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    97b8:	4770      	bx	lr
    97ba:	bf00      	nop
    97bc:	20000c14 	.word	0x20000c14

000097c0 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    97c0:	b580      	push	{r7, lr}
    97c2:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    97c4:	2104      	movs	r1, #4
    97c6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97ca:	4b03      	ldr	r3, [pc, #12]	; (97d8 <_usb_d_dev_sof+0x18>)
    97cc:	4798      	blx	r3
	dev_inst.callbacks.sof();
    97ce:	4b03      	ldr	r3, [pc, #12]	; (97dc <_usb_d_dev_sof+0x1c>)
    97d0:	681b      	ldr	r3, [r3, #0]
    97d2:	4798      	blx	r3
}
    97d4:	bf00      	nop
    97d6:	bd80      	pop	{r7, pc}
    97d8:	00008e37 	.word	0x00008e37
    97dc:	20000c14 	.word	0x20000c14

000097e0 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    97e0:	b580      	push	{r7, lr}
    97e2:	b084      	sub	sp, #16
    97e4:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    97e6:	2300      	movs	r3, #0
    97e8:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    97ea:	f240 2101 	movw	r1, #513	; 0x201
    97ee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97f2:	4b1a      	ldr	r3, [pc, #104]	; (985c <_usb_d_dev_lpmsusp+0x7c>)
    97f4:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    97f6:	f240 2101 	movw	r1, #513	; 0x201
    97fa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97fe:	4b18      	ldr	r3, [pc, #96]	; (9860 <_usb_d_dev_lpmsusp+0x80>)
    9800:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9802:	2170      	movs	r1, #112	; 0x70
    9804:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9808:	4b16      	ldr	r3, [pc, #88]	; (9864 <_usb_d_dev_lpmsusp+0x84>)
    980a:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    980c:	2300      	movs	r3, #0
    980e:	73fb      	strb	r3, [r7, #15]
    9810:	e018      	b.n	9844 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9812:	7bfb      	ldrb	r3, [r7, #15]
    9814:	015b      	lsls	r3, r3, #5
    9816:	4a14      	ldr	r2, [pc, #80]	; (9868 <_usb_d_dev_lpmsusp+0x88>)
    9818:	4413      	add	r3, r2
    981a:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    981c:	687b      	ldr	r3, [r7, #4]
    981e:	891b      	ldrh	r3, [r3, #8]
    9820:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9824:	b2db      	uxtb	r3, r3
    9826:	2b03      	cmp	r3, #3
    9828:	d109      	bne.n	983e <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    982a:	687b      	ldr	r3, [r7, #4]
    982c:	891b      	ldrh	r3, [r3, #8]
    982e:	f3c3 130a 	ubfx	r3, r3, #4, #11
    9832:	b29b      	uxth	r3, r3
    9834:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    9836:	687b      	ldr	r3, [r7, #4]
    9838:	2200      	movs	r2, #0
    983a:	811a      	strh	r2, [r3, #8]
			break;
    983c:	e005      	b.n	984a <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    983e:	7bfb      	ldrb	r3, [r7, #15]
    9840:	3301      	adds	r3, #1
    9842:	73fb      	strb	r3, [r7, #15]
    9844:	7bfb      	ldrb	r3, [r7, #15]
    9846:	2b03      	cmp	r3, #3
    9848:	d9e3      	bls.n	9812 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    984a:	4b08      	ldr	r3, [pc, #32]	; (986c <_usb_d_dev_lpmsusp+0x8c>)
    984c:	685b      	ldr	r3, [r3, #4]
    984e:	68b9      	ldr	r1, [r7, #8]
    9850:	2003      	movs	r0, #3
    9852:	4798      	blx	r3
}
    9854:	bf00      	nop
    9856:	3710      	adds	r7, #16
    9858:	46bd      	mov	sp, r7
    985a:	bd80      	pop	{r7, pc}
    985c:	00008e37 	.word	0x00008e37
    9860:	00008e8d 	.word	0x00008e8d
    9864:	00008e55 	.word	0x00008e55
    9868:	20000cdc 	.word	0x20000cdc
    986c:	20000c14 	.word	0x20000c14

00009870 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9870:	b580      	push	{r7, lr}
    9872:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    9874:	2180      	movs	r1, #128	; 0x80
    9876:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    987a:	4b04      	ldr	r3, [pc, #16]	; (988c <_usb_d_dev_ramerr+0x1c>)
    987c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    987e:	4b04      	ldr	r3, [pc, #16]	; (9890 <_usb_d_dev_ramerr+0x20>)
    9880:	685b      	ldr	r3, [r3, #4]
    9882:	2100      	movs	r1, #0
    9884:	2005      	movs	r0, #5
    9886:	4798      	blx	r3
}
    9888:	bf00      	nop
    988a:	bd80      	pop	{r7, pc}
    988c:	00008e37 	.word	0x00008e37
    9890:	20000c14 	.word	0x20000c14

00009894 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    9894:	b580      	push	{r7, lr}
    9896:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9898:	2170      	movs	r1, #112	; 0x70
    989a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    989e:	4b0b      	ldr	r3, [pc, #44]	; (98cc <_usb_d_dev_wakeup+0x38>)
    98a0:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    98a2:	2170      	movs	r1, #112	; 0x70
    98a4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    98a8:	4b09      	ldr	r3, [pc, #36]	; (98d0 <_usb_d_dev_wakeup+0x3c>)
    98aa:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    98ac:	f240 2101 	movw	r1, #513	; 0x201
    98b0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    98b4:	4b07      	ldr	r3, [pc, #28]	; (98d4 <_usb_d_dev_wakeup+0x40>)
    98b6:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    98b8:	2000      	movs	r0, #0
    98ba:	4b07      	ldr	r3, [pc, #28]	; (98d8 <_usb_d_dev_wakeup+0x44>)
    98bc:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    98be:	4b07      	ldr	r3, [pc, #28]	; (98dc <_usb_d_dev_wakeup+0x48>)
    98c0:	685b      	ldr	r3, [r3, #4]
    98c2:	2100      	movs	r1, #0
    98c4:	2002      	movs	r0, #2
    98c6:	4798      	blx	r3
}
    98c8:	bf00      	nop
    98ca:	bd80      	pop	{r7, pc}
    98cc:	00008e37 	.word	0x00008e37
    98d0:	00008e8d 	.word	0x00008e8d
    98d4:	00008e55 	.word	0x00008e55
    98d8:	00009135 	.word	0x00009135
    98dc:	20000c14 	.word	0x20000c14

000098e0 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    98e0:	b580      	push	{r7, lr}
    98e2:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    98e4:	2200      	movs	r2, #0
    98e6:	2100      	movs	r1, #0
    98e8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    98ec:	4b0d      	ldr	r3, [pc, #52]	; (9924 <_usb_d_dev_reset+0x44>)
    98ee:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    98f0:	2108      	movs	r1, #8
    98f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    98f6:	4b0c      	ldr	r3, [pc, #48]	; (9928 <_usb_d_dev_reset+0x48>)
    98f8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    98fa:	2170      	movs	r1, #112	; 0x70
    98fc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9900:	4b0a      	ldr	r3, [pc, #40]	; (992c <_usb_d_dev_reset+0x4c>)
    9902:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9904:	f240 2101 	movw	r1, #513	; 0x201
    9908:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    990c:	4b08      	ldr	r3, [pc, #32]	; (9930 <_usb_d_dev_reset+0x50>)
    990e:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9910:	4b08      	ldr	r3, [pc, #32]	; (9934 <_usb_d_dev_reset+0x54>)
    9912:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9914:	4b08      	ldr	r3, [pc, #32]	; (9938 <_usb_d_dev_reset+0x58>)
    9916:	685b      	ldr	r3, [r3, #4]
    9918:	2100      	movs	r1, #0
    991a:	2001      	movs	r0, #1
    991c:	4798      	blx	r3
}
    991e:	bf00      	nop
    9920:	bd80      	pop	{r7, pc}
    9922:	bf00      	nop
    9924:	00008dcd 	.word	0x00008dcd
    9928:	00008e37 	.word	0x00008e37
    992c:	00008e8d 	.word	0x00008e8d
    9930:	00008e55 	.word	0x00008e55
    9934:	0000a49d 	.word	0x0000a49d
    9938:	20000c14 	.word	0x20000c14

0000993c <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    993c:	b580      	push	{r7, lr}
    993e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9940:	f240 2101 	movw	r1, #513	; 0x201
    9944:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9948:	4b09      	ldr	r3, [pc, #36]	; (9970 <_usb_d_dev_suspend+0x34>)
    994a:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    994c:	f240 2101 	movw	r1, #513	; 0x201
    9950:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9954:	4b07      	ldr	r3, [pc, #28]	; (9974 <_usb_d_dev_suspend+0x38>)
    9956:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9958:	2170      	movs	r1, #112	; 0x70
    995a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    995e:	4b06      	ldr	r3, [pc, #24]	; (9978 <_usb_d_dev_suspend+0x3c>)
    9960:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    9962:	4b06      	ldr	r3, [pc, #24]	; (997c <_usb_d_dev_suspend+0x40>)
    9964:	685b      	ldr	r3, [r3, #4]
    9966:	2100      	movs	r1, #0
    9968:	2004      	movs	r0, #4
    996a:	4798      	blx	r3
}
    996c:	bf00      	nop
    996e:	bd80      	pop	{r7, pc}
    9970:	00008e37 	.word	0x00008e37
    9974:	00008e8d 	.word	0x00008e8d
    9978:	00008e55 	.word	0x00008e55
    997c:	20000c14 	.word	0x20000c14

00009980 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    9980:	b580      	push	{r7, lr}
    9982:	b082      	sub	sp, #8
    9984:	af00      	add	r7, sp, #0
	bool     rc    = true;
    9986:	2301      	movs	r3, #1
    9988:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    998a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    998e:	4b22      	ldr	r3, [pc, #136]	; (9a18 <_usb_d_dev_handle_nep+0x98>)
    9990:	4798      	blx	r3
    9992:	4603      	mov	r3, r0
    9994:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    9996:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    999a:	4b20      	ldr	r3, [pc, #128]	; (9a1c <_usb_d_dev_handle_nep+0x9c>)
    999c:	4798      	blx	r3
    999e:	4603      	mov	r3, r0
    99a0:	461a      	mov	r2, r3
    99a2:	88bb      	ldrh	r3, [r7, #4]
    99a4:	4013      	ands	r3, r2
    99a6:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    99a8:	88bb      	ldrh	r3, [r7, #4]
    99aa:	f003 0304 	and.w	r3, r3, #4
    99ae:	2b00      	cmp	r3, #0
    99b0:	d003      	beq.n	99ba <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    99b2:	4b1b      	ldr	r3, [pc, #108]	; (9a20 <_usb_d_dev_handle_nep+0xa0>)
    99b4:	4798      	blx	r3
		return true;
    99b6:	2301      	movs	r3, #1
    99b8:	e02a      	b.n	9a10 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    99ba:	88bb      	ldrh	r3, [r7, #4]
    99bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
    99c0:	2b00      	cmp	r3, #0
    99c2:	d002      	beq.n	99ca <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    99c4:	4b17      	ldr	r3, [pc, #92]	; (9a24 <_usb_d_dev_handle_nep+0xa4>)
    99c6:	4798      	blx	r3
    99c8:	e021      	b.n	9a0e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    99ca:	88bb      	ldrh	r3, [r7, #4]
    99cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    99d0:	2b00      	cmp	r3, #0
    99d2:	d002      	beq.n	99da <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    99d4:	4b14      	ldr	r3, [pc, #80]	; (9a28 <_usb_d_dev_handle_nep+0xa8>)
    99d6:	4798      	blx	r3
    99d8:	e019      	b.n	9a0e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    99da:	88bb      	ldrh	r3, [r7, #4]
    99dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    99e0:	2b00      	cmp	r3, #0
    99e2:	d002      	beq.n	99ea <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    99e4:	4b11      	ldr	r3, [pc, #68]	; (9a2c <_usb_d_dev_handle_nep+0xac>)
    99e6:	4798      	blx	r3
    99e8:	e011      	b.n	9a0e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    99ea:	88bb      	ldrh	r3, [r7, #4]
    99ec:	f003 0308 	and.w	r3, r3, #8
    99f0:	2b00      	cmp	r3, #0
    99f2:	d002      	beq.n	99fa <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    99f4:	4b0e      	ldr	r3, [pc, #56]	; (9a30 <_usb_d_dev_handle_nep+0xb0>)
    99f6:	4798      	blx	r3
    99f8:	e009      	b.n	9a0e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    99fa:	88bb      	ldrh	r3, [r7, #4]
    99fc:	f003 0301 	and.w	r3, r3, #1
    9a00:	2b00      	cmp	r3, #0
    9a02:	d002      	beq.n	9a0a <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    9a04:	4b0b      	ldr	r3, [pc, #44]	; (9a34 <_usb_d_dev_handle_nep+0xb4>)
    9a06:	4798      	blx	r3
    9a08:	e001      	b.n	9a0e <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    9a0a:	2300      	movs	r3, #0
    9a0c:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    9a0e:	79fb      	ldrb	r3, [r7, #7]
}
    9a10:	4618      	mov	r0, r3
    9a12:	3708      	adds	r7, #8
    9a14:	46bd      	mov	sp, r7
    9a16:	bd80      	pop	{r7, pc}
    9a18:	00008e1d 	.word	0x00008e1d
    9a1c:	00008e73 	.word	0x00008e73
    9a20:	000097c1 	.word	0x000097c1
    9a24:	000097e1 	.word	0x000097e1
    9a28:	00009871 	.word	0x00009871
    9a2c:	00009895 	.word	0x00009895
    9a30:	000098e1 	.word	0x000098e1
    9a34:	0000993d 	.word	0x0000993d

00009a38 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9a38:	b590      	push	{r4, r7, lr}
    9a3a:	b089      	sub	sp, #36	; 0x24
    9a3c:	af00      	add	r7, sp, #0
    9a3e:	6078      	str	r0, [r7, #4]
    9a40:	460b      	mov	r3, r1
    9a42:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    9a44:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9a48:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9a4a:	687b      	ldr	r3, [r7, #4]
    9a4c:	7c9b      	ldrb	r3, [r3, #18]
    9a4e:	f003 030f 	and.w	r3, r3, #15
    9a52:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9a54:	7dfb      	ldrb	r3, [r7, #23]
    9a56:	015b      	lsls	r3, r3, #5
    9a58:	4a73      	ldr	r2, [pc, #460]	; (9c28 <_usb_d_dev_in_next+0x1f0>)
    9a5a:	4413      	add	r3, r2
    9a5c:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9a5e:	78fb      	ldrb	r3, [r7, #3]
    9a60:	2b00      	cmp	r3, #0
    9a62:	d006      	beq.n	9a72 <_usb_d_dev_in_next+0x3a>
    9a64:	693b      	ldr	r3, [r7, #16]
    9a66:	3310      	adds	r3, #16
    9a68:	685b      	ldr	r3, [r3, #4]
    9a6a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9a6e:	b29b      	uxth	r3, r3
    9a70:	e000      	b.n	9a74 <_usb_d_dev_in_next+0x3c>
    9a72:	2300      	movs	r3, #0
    9a74:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    9a76:	687b      	ldr	r3, [r7, #4]
    9a78:	8a1b      	ldrh	r3, [r3, #16]
    9a7a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9a7e:	4293      	cmp	r3, r2
    9a80:	d103      	bne.n	9a8a <_usb_d_dev_in_next+0x52>
    9a82:	687b      	ldr	r3, [r7, #4]
    9a84:	8a1b      	ldrh	r3, [r3, #16]
    9a86:	b21b      	sxth	r3, r3
    9a88:	e004      	b.n	9a94 <_usb_d_dev_in_next+0x5c>
    9a8a:	687b      	ldr	r3, [r7, #4]
    9a8c:	8a1b      	ldrh	r3, [r3, #16]
    9a8e:	3b01      	subs	r3, #1
    9a90:	b29b      	uxth	r3, r3
    9a92:	b21b      	sxth	r3, r3
    9a94:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9a98:	4013      	ands	r3, r2
    9a9a:	b21b      	sxth	r3, r3
    9a9c:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    9a9e:	2300      	movs	r3, #0
    9aa0:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    9aa2:	687b      	ldr	r3, [r7, #4]
    9aa4:	7cdb      	ldrb	r3, [r3, #19]
    9aa6:	f003 0307 	and.w	r3, r3, #7
    9aaa:	b2db      	uxtb	r3, r3
    9aac:	2b01      	cmp	r3, #1
    9aae:	bf0c      	ite	eq
    9ab0:	2301      	moveq	r3, #1
    9ab2:	2300      	movne	r3, #0
    9ab4:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    9ab6:	78fb      	ldrb	r3, [r7, #3]
    9ab8:	2b00      	cmp	r3, #0
    9aba:	d004      	beq.n	9ac6 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    9abc:	7dfb      	ldrb	r3, [r7, #23]
    9abe:	2101      	movs	r1, #1
    9ac0:	4618      	mov	r0, r3
    9ac2:	4b5a      	ldr	r3, [pc, #360]	; (9c2c <_usb_d_dev_in_next+0x1f4>)
    9ac4:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    9ac6:	687b      	ldr	r3, [r7, #4]
    9ac8:	689a      	ldr	r2, [r3, #8]
    9aca:	89fb      	ldrh	r3, [r7, #14]
    9acc:	441a      	add	r2, r3
    9ace:	687b      	ldr	r3, [r7, #4]
    9ad0:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    9ad2:	687b      	ldr	r3, [r7, #4]
    9ad4:	689a      	ldr	r2, [r3, #8]
    9ad6:	687b      	ldr	r3, [r7, #4]
    9ad8:	685b      	ldr	r3, [r3, #4]
    9ada:	429a      	cmp	r2, r3
    9adc:	d243      	bcs.n	9b66 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    9ade:	687b      	ldr	r3, [r7, #4]
    9ae0:	685b      	ldr	r3, [r3, #4]
    9ae2:	b29a      	uxth	r2, r3
    9ae4:	687b      	ldr	r3, [r7, #4]
    9ae6:	689b      	ldr	r3, [r3, #8]
    9ae8:	b29b      	uxth	r3, r3
    9aea:	1ad3      	subs	r3, r2, r3
    9aec:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    9aee:	687b      	ldr	r3, [r7, #4]
    9af0:	7cdb      	ldrb	r3, [r3, #19]
    9af2:	f003 0320 	and.w	r3, r3, #32
    9af6:	b2db      	uxtb	r3, r3
    9af8:	2b00      	cmp	r3, #0
    9afa:	d01b      	beq.n	9b34 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    9afc:	687b      	ldr	r3, [r7, #4]
    9afe:	8a1b      	ldrh	r3, [r3, #16]
    9b00:	8bfa      	ldrh	r2, [r7, #30]
    9b02:	429a      	cmp	r2, r3
    9b04:	d902      	bls.n	9b0c <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    9b06:	687b      	ldr	r3, [r7, #4]
    9b08:	8a1b      	ldrh	r3, [r3, #16]
    9b0a:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    9b0c:	687b      	ldr	r3, [r7, #4]
    9b0e:	68d8      	ldr	r0, [r3, #12]
    9b10:	687b      	ldr	r3, [r7, #4]
    9b12:	681a      	ldr	r2, [r3, #0]
    9b14:	687b      	ldr	r3, [r7, #4]
    9b16:	689b      	ldr	r3, [r3, #8]
    9b18:	4413      	add	r3, r2
    9b1a:	8bfa      	ldrh	r2, [r7, #30]
    9b1c:	4619      	mov	r1, r3
    9b1e:	4b44      	ldr	r3, [pc, #272]	; (9c30 <_usb_d_dev_in_next+0x1f8>)
    9b20:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    9b22:	687b      	ldr	r3, [r7, #4]
    9b24:	68db      	ldr	r3, [r3, #12]
    9b26:	461a      	mov	r2, r3
    9b28:	7dfb      	ldrb	r3, [r7, #23]
    9b2a:	2101      	movs	r1, #1
    9b2c:	4618      	mov	r0, r3
    9b2e:	4b41      	ldr	r3, [pc, #260]	; (9c34 <_usb_d_dev_in_next+0x1fc>)
    9b30:	4798      	blx	r3
    9b32:	e011      	b.n	9b58 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    9b34:	8bfb      	ldrh	r3, [r7, #30]
    9b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9b3a:	d902      	bls.n	9b42 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    9b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9b40:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9b42:	687b      	ldr	r3, [r7, #4]
    9b44:	681a      	ldr	r2, [r3, #0]
    9b46:	687b      	ldr	r3, [r7, #4]
    9b48:	689b      	ldr	r3, [r3, #8]
    9b4a:	4413      	add	r3, r2
    9b4c:	461a      	mov	r2, r3
    9b4e:	7dfb      	ldrb	r3, [r7, #23]
    9b50:	2101      	movs	r1, #1
    9b52:	4618      	mov	r0, r3
    9b54:	4b37      	ldr	r3, [pc, #220]	; (9c34 <_usb_d_dev_in_next+0x1fc>)
    9b56:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9b58:	8bfa      	ldrh	r2, [r7, #30]
    9b5a:	7df8      	ldrb	r0, [r7, #23]
    9b5c:	2300      	movs	r3, #0
    9b5e:	2101      	movs	r1, #1
    9b60:	4c35      	ldr	r4, [pc, #212]	; (9c38 <_usb_d_dev_in_next+0x200>)
    9b62:	47a0      	blx	r4
		goto _in_tx_exec;
    9b64:	e041      	b.n	9bea <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    9b66:	687b      	ldr	r3, [r7, #4]
    9b68:	7cdb      	ldrb	r3, [r3, #19]
    9b6a:	f003 0310 	and.w	r3, r3, #16
    9b6e:	b2db      	uxtb	r3, r3
    9b70:	2b00      	cmp	r3, #0
    9b72:	d00b      	beq.n	9b8c <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    9b74:	687a      	ldr	r2, [r7, #4]
    9b76:	7cd3      	ldrb	r3, [r2, #19]
    9b78:	f36f 1304 	bfc	r3, #4, #1
    9b7c:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    9b7e:	7df8      	ldrb	r0, [r7, #23]
    9b80:	2300      	movs	r3, #0
    9b82:	2200      	movs	r2, #0
    9b84:	2101      	movs	r1, #1
    9b86:	4c2c      	ldr	r4, [pc, #176]	; (9c38 <_usb_d_dev_in_next+0x200>)
    9b88:	47a0      	blx	r4
		goto _in_tx_exec;
    9b8a:	e02e      	b.n	9bea <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    9b8c:	7afb      	ldrb	r3, [r7, #11]
    9b8e:	2b00      	cmp	r3, #0
    9b90:	d006      	beq.n	9ba0 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    9b92:	7dfb      	ldrb	r3, [r7, #23]
    9b94:	224b      	movs	r2, #75	; 0x4b
    9b96:	4619      	mov	r1, r3
    9b98:	69b8      	ldr	r0, [r7, #24]
    9b9a:	4b28      	ldr	r3, [pc, #160]	; (9c3c <_usb_d_dev_in_next+0x204>)
    9b9c:	4798      	blx	r3
    9b9e:	e005      	b.n	9bac <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    9ba0:	7dfb      	ldrb	r3, [r7, #23]
    9ba2:	224a      	movs	r2, #74	; 0x4a
    9ba4:	4619      	mov	r1, r3
    9ba6:	69b8      	ldr	r0, [r7, #24]
    9ba8:	4b24      	ldr	r3, [pc, #144]	; (9c3c <_usb_d_dev_in_next+0x204>)
    9baa:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    9bac:	687b      	ldr	r3, [r7, #4]
    9bae:	8a1b      	ldrh	r3, [r3, #16]
    9bb0:	89ba      	ldrh	r2, [r7, #12]
    9bb2:	429a      	cmp	r2, r3
    9bb4:	d114      	bne.n	9be0 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    9bb6:	687a      	ldr	r2, [r7, #4]
    9bb8:	7cd3      	ldrb	r3, [r2, #19]
    9bba:	f36f 1386 	bfc	r3, #6, #1
    9bbe:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    9bc0:	4b1f      	ldr	r3, [pc, #124]	; (9c40 <_usb_d_dev_in_next+0x208>)
    9bc2:	68db      	ldr	r3, [r3, #12]
    9bc4:	687a      	ldr	r2, [r7, #4]
    9bc6:	7c90      	ldrb	r0, [r2, #18]
    9bc8:	687a      	ldr	r2, [r7, #4]
    9bca:	6892      	ldr	r2, [r2, #8]
    9bcc:	4611      	mov	r1, r2
    9bce:	4798      	blx	r3
    9bd0:	4603      	mov	r3, r0
    9bd2:	2b00      	cmp	r3, #0
    9bd4:	d124      	bne.n	9c20 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    9bd6:	687a      	ldr	r2, [r7, #4]
    9bd8:	7cd3      	ldrb	r3, [r2, #19]
    9bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9bde:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9be0:	2100      	movs	r1, #0
    9be2:	6878      	ldr	r0, [r7, #4]
    9be4:	4b17      	ldr	r3, [pc, #92]	; (9c44 <_usb_d_dev_in_next+0x20c>)
    9be6:	4798      	blx	r3
	return;
    9be8:	e01b      	b.n	9c22 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    9bea:	78fb      	ldrb	r3, [r7, #3]
    9bec:	f083 0301 	eor.w	r3, r3, #1
    9bf0:	b2db      	uxtb	r3, r3
    9bf2:	2b00      	cmp	r3, #0
    9bf4:	d00d      	beq.n	9c12 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    9bf6:	7afb      	ldrb	r3, [r7, #11]
    9bf8:	2b00      	cmp	r3, #0
    9bfa:	d002      	beq.n	9c02 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    9bfc:	234e      	movs	r3, #78	; 0x4e
    9bfe:	777b      	strb	r3, [r7, #29]
    9c00:	e001      	b.n	9c06 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    9c02:	234a      	movs	r3, #74	; 0x4a
    9c04:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9c06:	7f7a      	ldrb	r2, [r7, #29]
    9c08:	7dfb      	ldrb	r3, [r7, #23]
    9c0a:	4619      	mov	r1, r3
    9c0c:	69b8      	ldr	r0, [r7, #24]
    9c0e:	4b0e      	ldr	r3, [pc, #56]	; (9c48 <_usb_d_dev_in_next+0x210>)
    9c10:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    9c12:	7dfb      	ldrb	r3, [r7, #23]
    9c14:	2201      	movs	r2, #1
    9c16:	2101      	movs	r1, #1
    9c18:	4618      	mov	r0, r3
    9c1a:	4b0c      	ldr	r3, [pc, #48]	; (9c4c <_usb_d_dev_in_next+0x214>)
    9c1c:	4798      	blx	r3
    9c1e:	e000      	b.n	9c22 <_usb_d_dev_in_next+0x1ea>
			return;
    9c20:	bf00      	nop
}
    9c22:	3724      	adds	r7, #36	; 0x24
    9c24:	46bd      	mov	sp, r7
    9c26:	bd90      	pop	{r4, r7, pc}
    9c28:	20000cdc 	.word	0x20000cdc
    9c2c:	00009431 	.word	0x00009431
    9c30:	0000ed79 	.word	0x0000ed79
    9c34:	0000945d 	.word	0x0000945d
    9c38:	000095a5 	.word	0x000095a5
    9c3c:	00008d3d 	.word	0x00008d3d
    9c40:	20000c14 	.word	0x20000c14
    9c44:	0000ad61 	.word	0x0000ad61
    9c48:	00008d11 	.word	0x00008d11
    9c4c:	0000965d 	.word	0x0000965d

00009c50 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9c50:	b590      	push	{r4, r7, lr}
    9c52:	b08b      	sub	sp, #44	; 0x2c
    9c54:	af00      	add	r7, sp, #0
    9c56:	6078      	str	r0, [r7, #4]
    9c58:	460b      	mov	r3, r1
    9c5a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    9c5c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9c60:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    9c62:	687b      	ldr	r3, [r7, #4]
    9c64:	7c9b      	ldrb	r3, [r3, #18]
    9c66:	f003 030f 	and.w	r3, r3, #15
    9c6a:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9c6c:	7ffb      	ldrb	r3, [r7, #31]
    9c6e:	015b      	lsls	r3, r3, #5
    9c70:	4a94      	ldr	r2, [pc, #592]	; (9ec4 <_usb_d_dev_out_next+0x274>)
    9c72:	4413      	add	r3, r2
    9c74:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    9c76:	78fb      	ldrb	r3, [r7, #3]
    9c78:	2b00      	cmp	r3, #0
    9c7a:	d005      	beq.n	9c88 <_usb_d_dev_out_next+0x38>
    9c7c:	69bb      	ldr	r3, [r7, #24]
    9c7e:	685b      	ldr	r3, [r3, #4]
    9c80:	f3c3 338d 	ubfx	r3, r3, #14, #14
    9c84:	b29b      	uxth	r3, r3
    9c86:	e000      	b.n	9c8a <_usb_d_dev_out_next+0x3a>
    9c88:	2300      	movs	r3, #0
    9c8a:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    9c8c:	78fb      	ldrb	r3, [r7, #3]
    9c8e:	2b00      	cmp	r3, #0
    9c90:	d005      	beq.n	9c9e <_usb_d_dev_out_next+0x4e>
    9c92:	69bb      	ldr	r3, [r7, #24]
    9c94:	685b      	ldr	r3, [r3, #4]
    9c96:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9c9a:	b29b      	uxth	r3, r3
    9c9c:	e000      	b.n	9ca0 <_usb_d_dev_out_next+0x50>
    9c9e:	2300      	movs	r3, #0
    9ca0:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9ca2:	687b      	ldr	r3, [r7, #4]
    9ca4:	8a1b      	ldrh	r3, [r3, #16]
    9ca6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9caa:	4293      	cmp	r3, r2
    9cac:	d004      	beq.n	9cb8 <_usb_d_dev_out_next+0x68>
    9cae:	687b      	ldr	r3, [r7, #4]
    9cb0:	8a1b      	ldrh	r3, [r3, #16]
    9cb2:	3b01      	subs	r3, #1
    9cb4:	b29b      	uxth	r3, r3
    9cb6:	e001      	b.n	9cbc <_usb_d_dev_out_next+0x6c>
    9cb8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9cbc:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    9cbe:	8aba      	ldrh	r2, [r7, #20]
    9cc0:	8a7b      	ldrh	r3, [r7, #18]
    9cc2:	4013      	ands	r3, r2
    9cc4:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9cc6:	687b      	ldr	r3, [r7, #4]
    9cc8:	7cdb      	ldrb	r3, [r3, #19]
    9cca:	f003 0307 	and.w	r3, r3, #7
    9cce:	b2db      	uxtb	r3, r3
    9cd0:	2b01      	cmp	r3, #1
    9cd2:	bf0c      	ite	eq
    9cd4:	2301      	moveq	r3, #1
    9cd6:	2300      	movne	r3, #0
    9cd8:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    9cda:	78fb      	ldrb	r3, [r7, #3]
    9cdc:	2b00      	cmp	r3, #0
    9cde:	d004      	beq.n	9cea <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    9ce0:	7ffb      	ldrb	r3, [r7, #31]
    9ce2:	2100      	movs	r1, #0
    9ce4:	4618      	mov	r0, r3
    9ce6:	4b78      	ldr	r3, [pc, #480]	; (9ec8 <_usb_d_dev_out_next+0x278>)
    9ce8:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    9cea:	687b      	ldr	r3, [r7, #4]
    9cec:	7cdb      	ldrb	r3, [r3, #19]
    9cee:	f003 0320 	and.w	r3, r3, #32
    9cf2:	b2db      	uxtb	r3, r3
    9cf4:	2b00      	cmp	r3, #0
    9cf6:	d01c      	beq.n	9d32 <_usb_d_dev_out_next+0xe2>
    9cf8:	687b      	ldr	r3, [r7, #4]
    9cfa:	685b      	ldr	r3, [r3, #4]
    9cfc:	2b00      	cmp	r3, #0
    9cfe:	d018      	beq.n	9d32 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    9d00:	687b      	ldr	r3, [r7, #4]
    9d02:	685b      	ldr	r3, [r3, #4]
    9d04:	b29a      	uxth	r2, r3
    9d06:	687b      	ldr	r3, [r7, #4]
    9d08:	689b      	ldr	r3, [r3, #8]
    9d0a:	b29b      	uxth	r3, r3
    9d0c:	1ad3      	subs	r3, r2, r3
    9d0e:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    9d10:	687b      	ldr	r3, [r7, #4]
    9d12:	681a      	ldr	r2, [r3, #0]
    9d14:	687b      	ldr	r3, [r7, #4]
    9d16:	689b      	ldr	r3, [r3, #8]
    9d18:	18d0      	adds	r0, r2, r3
    9d1a:	687b      	ldr	r3, [r7, #4]
    9d1c:	68d9      	ldr	r1, [r3, #12]
    9d1e:	89ba      	ldrh	r2, [r7, #12]
    9d20:	8a3b      	ldrh	r3, [r7, #16]
    9d22:	429a      	cmp	r2, r3
    9d24:	d901      	bls.n	9d2a <_usb_d_dev_out_next+0xda>
    9d26:	8a3b      	ldrh	r3, [r7, #16]
    9d28:	e000      	b.n	9d2c <_usb_d_dev_out_next+0xdc>
    9d2a:	89bb      	ldrh	r3, [r7, #12]
    9d2c:	461a      	mov	r2, r3
    9d2e:	4b67      	ldr	r3, [pc, #412]	; (9ecc <_usb_d_dev_out_next+0x27c>)
    9d30:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    9d32:	687b      	ldr	r3, [r7, #4]
    9d34:	685b      	ldr	r3, [r3, #4]
    9d36:	2b00      	cmp	r3, #0
    9d38:	d121      	bne.n	9d7e <_usb_d_dev_out_next+0x12e>
    9d3a:	687b      	ldr	r3, [r7, #4]
    9d3c:	7cdb      	ldrb	r3, [r3, #19]
    9d3e:	f003 0310 	and.w	r3, r3, #16
    9d42:	b2db      	uxtb	r3, r3
    9d44:	2b00      	cmp	r3, #0
    9d46:	d01a      	beq.n	9d7e <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    9d48:	687a      	ldr	r2, [r7, #4]
    9d4a:	7cd3      	ldrb	r3, [r2, #19]
    9d4c:	f36f 1304 	bfc	r3, #4, #1
    9d50:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    9d52:	687a      	ldr	r2, [r7, #4]
    9d54:	7cd3      	ldrb	r3, [r2, #19]
    9d56:	f043 0320 	orr.w	r3, r3, #32
    9d5a:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9d5c:	687b      	ldr	r3, [r7, #4]
    9d5e:	68db      	ldr	r3, [r3, #12]
    9d60:	461a      	mov	r2, r3
    9d62:	7ffb      	ldrb	r3, [r7, #31]
    9d64:	2100      	movs	r1, #0
    9d66:	4618      	mov	r0, r3
    9d68:	4b59      	ldr	r3, [pc, #356]	; (9ed0 <_usb_d_dev_out_next+0x280>)
    9d6a:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9d6c:	687b      	ldr	r3, [r7, #4]
    9d6e:	8a1b      	ldrh	r3, [r3, #16]
    9d70:	461a      	mov	r2, r3
    9d72:	7ff8      	ldrb	r0, [r7, #31]
    9d74:	2300      	movs	r3, #0
    9d76:	2100      	movs	r1, #0
    9d78:	4c56      	ldr	r4, [pc, #344]	; (9ed4 <_usb_d_dev_out_next+0x284>)
    9d7a:	47a0      	blx	r4
		goto _out_rx_exec;
    9d7c:	e090      	b.n	9ea0 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    9d7e:	78fb      	ldrb	r3, [r7, #3]
    9d80:	2b00      	cmp	r3, #0
    9d82:	d010      	beq.n	9da6 <_usb_d_dev_out_next+0x156>
    9d84:	687b      	ldr	r3, [r7, #4]
    9d86:	8a1b      	ldrh	r3, [r3, #16]
    9d88:	8a3a      	ldrh	r2, [r7, #16]
    9d8a:	429a      	cmp	r2, r3
    9d8c:	d20b      	bcs.n	9da6 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    9d8e:	687a      	ldr	r2, [r7, #4]
    9d90:	7cd3      	ldrb	r3, [r2, #19]
    9d92:	f36f 1304 	bfc	r3, #4, #1
    9d96:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    9d98:	687b      	ldr	r3, [r7, #4]
    9d9a:	689a      	ldr	r2, [r3, #8]
    9d9c:	8abb      	ldrh	r3, [r7, #20]
    9d9e:	441a      	add	r2, r3
    9da0:	687b      	ldr	r3, [r7, #4]
    9da2:	609a      	str	r2, [r3, #8]
    9da4:	e05c      	b.n	9e60 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    9da6:	687b      	ldr	r3, [r7, #4]
    9da8:	689a      	ldr	r2, [r3, #8]
    9daa:	8afb      	ldrh	r3, [r7, #22]
    9dac:	441a      	add	r2, r3
    9dae:	687b      	ldr	r3, [r7, #4]
    9db0:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    9db2:	687b      	ldr	r3, [r7, #4]
    9db4:	689a      	ldr	r2, [r3, #8]
    9db6:	687b      	ldr	r3, [r7, #4]
    9db8:	685b      	ldr	r3, [r3, #4]
    9dba:	429a      	cmp	r2, r3
    9dbc:	d250      	bcs.n	9e60 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    9dbe:	687b      	ldr	r3, [r7, #4]
    9dc0:	685b      	ldr	r3, [r3, #4]
    9dc2:	b29a      	uxth	r2, r3
    9dc4:	687b      	ldr	r3, [r7, #4]
    9dc6:	689b      	ldr	r3, [r3, #8]
    9dc8:	b29b      	uxth	r3, r3
    9dca:	1ad3      	subs	r3, r2, r3
    9dcc:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    9dce:	687b      	ldr	r3, [r7, #4]
    9dd0:	7cdb      	ldrb	r3, [r3, #19]
    9dd2:	f003 0320 	and.w	r3, r3, #32
    9dd6:	b2db      	uxtb	r3, r3
    9dd8:	2b00      	cmp	r3, #0
    9dda:	d010      	beq.n	9dfe <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    9ddc:	687b      	ldr	r3, [r7, #4]
    9dde:	8a1b      	ldrh	r3, [r3, #16]
    9de0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9de2:	429a      	cmp	r2, r3
    9de4:	d902      	bls.n	9dec <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    9de6:	687b      	ldr	r3, [r7, #4]
    9de8:	8a1b      	ldrh	r3, [r3, #16]
    9dea:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9dec:	687b      	ldr	r3, [r7, #4]
    9dee:	68db      	ldr	r3, [r3, #12]
    9df0:	461a      	mov	r2, r3
    9df2:	7ffb      	ldrb	r3, [r7, #31]
    9df4:	2100      	movs	r1, #0
    9df6:	4618      	mov	r0, r3
    9df8:	4b35      	ldr	r3, [pc, #212]	; (9ed0 <_usb_d_dev_out_next+0x280>)
    9dfa:	4798      	blx	r3
    9dfc:	e029      	b.n	9e52 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    9dfe:	687b      	ldr	r3, [r7, #4]
    9e00:	8a1b      	ldrh	r3, [r3, #16]
    9e02:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9e04:	429a      	cmp	r2, r3
    9e06:	d90f      	bls.n	9e28 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    9e08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    9e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9e0e:	d903      	bls.n	9e18 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    9e10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9e14:	84fb      	strh	r3, [r7, #38]	; 0x26
    9e16:	e011      	b.n	9e3c <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    9e18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9e1a:	8a7b      	ldrh	r3, [r7, #18]
    9e1c:	4013      	ands	r3, r2
    9e1e:	b29b      	uxth	r3, r3
    9e20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9e22:	1ad3      	subs	r3, r2, r3
    9e24:	84fb      	strh	r3, [r7, #38]	; 0x26
    9e26:	e009      	b.n	9e3c <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    9e28:	687b      	ldr	r3, [r7, #4]
    9e2a:	8a1b      	ldrh	r3, [r3, #16]
    9e2c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9e2e:	429a      	cmp	r2, r3
    9e30:	d204      	bcs.n	9e3c <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    9e32:	687a      	ldr	r2, [r7, #4]
    9e34:	7cd3      	ldrb	r3, [r2, #19]
    9e36:	f043 0320 	orr.w	r3, r3, #32
    9e3a:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9e3c:	687b      	ldr	r3, [r7, #4]
    9e3e:	681a      	ldr	r2, [r3, #0]
    9e40:	687b      	ldr	r3, [r7, #4]
    9e42:	689b      	ldr	r3, [r3, #8]
    9e44:	4413      	add	r3, r2
    9e46:	461a      	mov	r2, r3
    9e48:	7ffb      	ldrb	r3, [r7, #31]
    9e4a:	2100      	movs	r1, #0
    9e4c:	4618      	mov	r0, r3
    9e4e:	4b20      	ldr	r3, [pc, #128]	; (9ed0 <_usb_d_dev_out_next+0x280>)
    9e50:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    9e52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9e54:	7ff8      	ldrb	r0, [r7, #31]
    9e56:	2300      	movs	r3, #0
    9e58:	2100      	movs	r1, #0
    9e5a:	4c1e      	ldr	r4, [pc, #120]	; (9ed4 <_usb_d_dev_out_next+0x284>)
    9e5c:	47a0      	blx	r4
			goto _out_rx_exec;
    9e5e:	e01f      	b.n	9ea0 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    9e60:	7bfb      	ldrb	r3, [r7, #15]
    9e62:	2b00      	cmp	r3, #0
    9e64:	d006      	beq.n	9e74 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    9e66:	7ffb      	ldrb	r3, [r7, #31]
    9e68:	222d      	movs	r2, #45	; 0x2d
    9e6a:	4619      	mov	r1, r3
    9e6c:	6a38      	ldr	r0, [r7, #32]
    9e6e:	4b1a      	ldr	r3, [pc, #104]	; (9ed8 <_usb_d_dev_out_next+0x288>)
    9e70:	4798      	blx	r3
    9e72:	e005      	b.n	9e80 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    9e74:	7ffb      	ldrb	r3, [r7, #31]
    9e76:	2225      	movs	r2, #37	; 0x25
    9e78:	4619      	mov	r1, r3
    9e7a:	6a38      	ldr	r0, [r7, #32]
    9e7c:	4b16      	ldr	r3, [pc, #88]	; (9ed8 <_usb_d_dev_out_next+0x288>)
    9e7e:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    9e80:	7ffb      	ldrb	r3, [r7, #31]
    9e82:	2b00      	cmp	r3, #0
    9e84:	d107      	bne.n	9e96 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9e86:	687b      	ldr	r3, [r7, #4]
    9e88:	68db      	ldr	r3, [r3, #12]
    9e8a:	461a      	mov	r2, r3
    9e8c:	7ffb      	ldrb	r3, [r7, #31]
    9e8e:	2100      	movs	r1, #0
    9e90:	4618      	mov	r0, r3
    9e92:	4b0f      	ldr	r3, [pc, #60]	; (9ed0 <_usb_d_dev_out_next+0x280>)
    9e94:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9e96:	2100      	movs	r1, #0
    9e98:	6878      	ldr	r0, [r7, #4]
    9e9a:	4b10      	ldr	r3, [pc, #64]	; (9edc <_usb_d_dev_out_next+0x28c>)
    9e9c:	4798      	blx	r3
	return;
    9e9e:	e031      	b.n	9f04 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    9ea0:	78fb      	ldrb	r3, [r7, #3]
    9ea2:	f083 0301 	eor.w	r3, r3, #1
    9ea6:	b2db      	uxtb	r3, r3
    9ea8:	2b00      	cmp	r3, #0
    9eaa:	d025      	beq.n	9ef8 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    9eac:	7bfb      	ldrb	r3, [r7, #15]
    9eae:	2b00      	cmp	r3, #0
    9eb0:	d018      	beq.n	9ee4 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    9eb2:	7ffb      	ldrb	r3, [r7, #31]
    9eb4:	2101      	movs	r1, #1
    9eb6:	4618      	mov	r0, r3
    9eb8:	4b09      	ldr	r3, [pc, #36]	; (9ee0 <_usb_d_dev_out_next+0x290>)
    9eba:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9ebc:	232d      	movs	r3, #45	; 0x2d
    9ebe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    9ec2:	e012      	b.n	9eea <_usb_d_dev_out_next+0x29a>
    9ec4:	20000cdc 	.word	0x20000cdc
    9ec8:	00009431 	.word	0x00009431
    9ecc:	0000ed79 	.word	0x0000ed79
    9ed0:	0000945d 	.word	0x0000945d
    9ed4:	000095e5 	.word	0x000095e5
    9ed8:	00008d3d 	.word	0x00008d3d
    9edc:	0000ad61 	.word	0x0000ad61
    9ee0:	00009625 	.word	0x00009625
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    9ee4:	2325      	movs	r3, #37	; 0x25
    9ee6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9eea:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    9eee:	7ffb      	ldrb	r3, [r7, #31]
    9ef0:	4619      	mov	r1, r3
    9ef2:	6a38      	ldr	r0, [r7, #32]
    9ef4:	4b05      	ldr	r3, [pc, #20]	; (9f0c <_usb_d_dev_out_next+0x2bc>)
    9ef6:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    9ef8:	7ffb      	ldrb	r3, [r7, #31]
    9efa:	2201      	movs	r2, #1
    9efc:	2100      	movs	r1, #0
    9efe:	4618      	mov	r0, r3
    9f00:	4b03      	ldr	r3, [pc, #12]	; (9f10 <_usb_d_dev_out_next+0x2c0>)
    9f02:	4798      	blx	r3
}
    9f04:	372c      	adds	r7, #44	; 0x2c
    9f06:	46bd      	mov	sp, r7
    9f08:	bd90      	pop	{r4, r7, pc}
    9f0a:	bf00      	nop
    9f0c:	00008d11 	.word	0x00008d11
    9f10:	000096b5 	.word	0x000096b5

00009f14 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    9f14:	b580      	push	{r7, lr}
    9f16:	b084      	sub	sp, #16
    9f18:	af00      	add	r7, sp, #0
    9f1a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    9f1c:	687b      	ldr	r3, [r7, #4]
    9f1e:	7c9b      	ldrb	r3, [r3, #18]
    9f20:	f003 030f 	and.w	r3, r3, #15
    9f24:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9f26:	687b      	ldr	r3, [r7, #4]
    9f28:	7cdb      	ldrb	r3, [r3, #19]
    9f2a:	f003 0307 	and.w	r3, r3, #7
    9f2e:	b2db      	uxtb	r3, r3
    9f30:	2b01      	cmp	r3, #1
    9f32:	bf0c      	ite	eq
    9f34:	2301      	moveq	r3, #1
    9f36:	2300      	movne	r3, #0
    9f38:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    9f3a:	7bbb      	ldrb	r3, [r7, #14]
    9f3c:	f083 0301 	eor.w	r3, r3, #1
    9f40:	b2db      	uxtb	r3, r3
    9f42:	2b00      	cmp	r3, #0
    9f44:	d008      	beq.n	9f58 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    9f46:	7bfb      	ldrb	r3, [r7, #15]
    9f48:	4618      	mov	r0, r3
    9f4a:	4b20      	ldr	r3, [pc, #128]	; (9fcc <_usb_d_dev_handle_setup+0xb8>)
    9f4c:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    9f4e:	7bfb      	ldrb	r3, [r7, #15]
    9f50:	4618      	mov	r0, r3
    9f52:	4b1f      	ldr	r3, [pc, #124]	; (9fd0 <_usb_d_dev_handle_setup+0xbc>)
    9f54:	4798      	blx	r3
		return;
    9f56:	e036      	b.n	9fc6 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9f58:	687b      	ldr	r3, [r7, #4]
    9f5a:	7cdb      	ldrb	r3, [r3, #19]
    9f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9f60:	b2db      	uxtb	r3, r3
    9f62:	2b00      	cmp	r3, #0
    9f64:	d010      	beq.n	9f88 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    9f66:	687a      	ldr	r2, [r7, #4]
    9f68:	7cd3      	ldrb	r3, [r2, #19]
    9f6a:	f36f 1386 	bfc	r3, #6, #1
    9f6e:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9f70:	7bfb      	ldrb	r3, [r7, #15]
    9f72:	2200      	movs	r2, #0
    9f74:	2101      	movs	r1, #1
    9f76:	4618      	mov	r0, r3
    9f78:	4b16      	ldr	r3, [pc, #88]	; (9fd4 <_usb_d_dev_handle_setup+0xc0>)
    9f7a:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    9f7c:	7bfb      	ldrb	r3, [r7, #15]
    9f7e:	2200      	movs	r2, #0
    9f80:	2100      	movs	r1, #0
    9f82:	4618      	mov	r0, r3
    9f84:	4b14      	ldr	r3, [pc, #80]	; (9fd8 <_usb_d_dev_handle_setup+0xc4>)
    9f86:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    9f88:	687a      	ldr	r2, [r7, #4]
    9f8a:	7cd3      	ldrb	r3, [r2, #19]
    9f8c:	f36f 03c3 	bfc	r3, #3, #1
    9f90:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    9f92:	7bfb      	ldrb	r3, [r7, #15]
    9f94:	2100      	movs	r1, #0
    9f96:	4618      	mov	r0, r3
    9f98:	4b10      	ldr	r3, [pc, #64]	; (9fdc <_usb_d_dev_handle_setup+0xc8>)
    9f9a:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    9f9c:	7bfb      	ldrb	r3, [r7, #15]
    9f9e:	2101      	movs	r1, #1
    9fa0:	4618      	mov	r0, r3
    9fa2:	4b0e      	ldr	r3, [pc, #56]	; (9fdc <_usb_d_dev_handle_setup+0xc8>)
    9fa4:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9fa6:	7bfb      	ldrb	r3, [r7, #15]
    9fa8:	216f      	movs	r1, #111	; 0x6f
    9faa:	4618      	mov	r0, r3
    9fac:	4b0c      	ldr	r3, [pc, #48]	; (9fe0 <_usb_d_dev_handle_setup+0xcc>)
    9fae:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9fb0:	7bfb      	ldrb	r3, [r7, #15]
    9fb2:	216f      	movs	r1, #111	; 0x6f
    9fb4:	4618      	mov	r0, r3
    9fb6:	4b0b      	ldr	r3, [pc, #44]	; (9fe4 <_usb_d_dev_handle_setup+0xd0>)
    9fb8:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    9fba:	4b0b      	ldr	r3, [pc, #44]	; (9fe8 <_usb_d_dev_handle_setup+0xd4>)
    9fbc:	689b      	ldr	r3, [r3, #8]
    9fbe:	687a      	ldr	r2, [r7, #4]
    9fc0:	7c92      	ldrb	r2, [r2, #18]
    9fc2:	4610      	mov	r0, r2
    9fc4:	4798      	blx	r3
}
    9fc6:	3710      	adds	r7, #16
    9fc8:	46bd      	mov	sp, r7
    9fca:	bd80      	pop	{r7, pc}
    9fcc:	000093b9 	.word	0x000093b9
    9fd0:	00009365 	.word	0x00009365
    9fd4:	0000965d 	.word	0x0000965d
    9fd8:	000096b5 	.word	0x000096b5
    9fdc:	00009625 	.word	0x00009625
    9fe0:	00009165 	.word	0x00009165
    9fe4:	000091b5 	.word	0x000091b5
    9fe8:	20000c14 	.word	0x20000c14

00009fec <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9fec:	b580      	push	{r7, lr}
    9fee:	b084      	sub	sp, #16
    9ff0:	af00      	add	r7, sp, #0
    9ff2:	6078      	str	r0, [r7, #4]
    9ff4:	460b      	mov	r3, r1
    9ff6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9ff8:	687b      	ldr	r3, [r7, #4]
    9ffa:	7c9b      	ldrb	r3, [r3, #18]
    9ffc:	f003 030f 	and.w	r3, r3, #15
    a000:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    a002:	78f9      	ldrb	r1, [r7, #3]
    a004:	7bfb      	ldrb	r3, [r7, #15]
    a006:	2200      	movs	r2, #0
    a008:	4618      	mov	r0, r3
    a00a:	4b07      	ldr	r3, [pc, #28]	; (a028 <_usb_d_dev_handle_stall+0x3c>)
    a00c:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    a00e:	4b07      	ldr	r3, [pc, #28]	; (a02c <_usb_d_dev_handle_stall+0x40>)
    a010:	691b      	ldr	r3, [r3, #16]
    a012:	687a      	ldr	r2, [r7, #4]
    a014:	7c90      	ldrb	r0, [r2, #18]
    a016:	687a      	ldr	r2, [r7, #4]
    a018:	6892      	ldr	r2, [r2, #8]
    a01a:	2101      	movs	r1, #1
    a01c:	4798      	blx	r3
}
    a01e:	bf00      	nop
    a020:	3710      	adds	r7, #16
    a022:	46bd      	mov	sp, r7
    a024:	bd80      	pop	{r7, pc}
    a026:	bf00      	nop
    a028:	00009319 	.word	0x00009319
    a02c:	20000c14 	.word	0x20000c14

0000a030 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a030:	b580      	push	{r7, lr}
    a032:	b088      	sub	sp, #32
    a034:	af00      	add	r7, sp, #0
    a036:	6078      	str	r0, [r7, #4]
    a038:	460b      	mov	r3, r1
    a03a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    a03c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a040:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    a042:	687b      	ldr	r3, [r7, #4]
    a044:	7c9b      	ldrb	r3, [r3, #18]
    a046:	f003 030f 	and.w	r3, r3, #15
    a04a:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    a04c:	4b61      	ldr	r3, [pc, #388]	; (a1d4 <_usb_d_dev_handle_trfail+0x1a4>)
    a04e:	881b      	ldrh	r3, [r3, #0]
    a050:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    a052:	7efb      	ldrb	r3, [r7, #27]
    a054:	015b      	lsls	r3, r3, #5
    a056:	4a60      	ldr	r2, [pc, #384]	; (a1d8 <_usb_d_dev_handle_trfail+0x1a8>)
    a058:	4413      	add	r3, r2
    a05a:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    a05c:	78fb      	ldrb	r3, [r7, #3]
    a05e:	2b00      	cmp	r3, #0
    a060:	d006      	beq.n	a070 <_usb_d_dev_handle_trfail+0x40>
    a062:	7efb      	ldrb	r3, [r7, #27]
    a064:	4619      	mov	r1, r3
    a066:	69f8      	ldr	r0, [r7, #28]
    a068:	4b5c      	ldr	r3, [pc, #368]	; (a1dc <_usb_d_dev_handle_trfail+0x1ac>)
    a06a:	4798      	blx	r3
    a06c:	4603      	mov	r3, r0
    a06e:	e005      	b.n	a07c <_usb_d_dev_handle_trfail+0x4c>
    a070:	7efb      	ldrb	r3, [r7, #27]
    a072:	4619      	mov	r1, r3
    a074:	69f8      	ldr	r0, [r7, #28]
    a076:	4b5a      	ldr	r3, [pc, #360]	; (a1e0 <_usb_d_dev_handle_trfail+0x1b0>)
    a078:	4798      	blx	r3
    a07a:	4603      	mov	r3, r0
    a07c:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a07e:	687b      	ldr	r3, [r7, #4]
    a080:	7cdb      	ldrb	r3, [r3, #19]
    a082:	f003 0307 	and.w	r3, r3, #7
    a086:	b2db      	uxtb	r3, r3
    a088:	2b01      	cmp	r3, #1
    a08a:	bf0c      	ite	eq
    a08c:	2301      	moveq	r3, #1
    a08e:	2300      	movne	r3, #0
    a090:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    a092:	78fb      	ldrb	r3, [r7, #3]
    a094:	011b      	lsls	r3, r3, #4
    a096:	697a      	ldr	r2, [r7, #20]
    a098:	4413      	add	r3, r2
    a09a:	7a9b      	ldrb	r3, [r3, #10]
    a09c:	b2db      	uxtb	r3, r3
    a09e:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    a0a0:	7cfb      	ldrb	r3, [r7, #19]
    a0a2:	2b02      	cmp	r3, #2
    a0a4:	d12f      	bne.n	a106 <_usb_d_dev_handle_trfail+0xd6>
    a0a6:	7b3b      	ldrb	r3, [r7, #12]
    a0a8:	f003 0301 	and.w	r3, r3, #1
    a0ac:	b2db      	uxtb	r3, r3
    a0ae:	2b00      	cmp	r3, #0
    a0b0:	d029      	beq.n	a106 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    a0b2:	78fb      	ldrb	r3, [r7, #3]
    a0b4:	011b      	lsls	r3, r3, #4
    a0b6:	697a      	ldr	r2, [r7, #20]
    a0b8:	441a      	add	r2, r3
    a0ba:	7a93      	ldrb	r3, [r2, #10]
    a0bc:	f36f 0300 	bfc	r3, #0, #1
    a0c0:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a0c2:	78fb      	ldrb	r3, [r7, #3]
    a0c4:	f107 0220 	add.w	r2, r7, #32
    a0c8:	4413      	add	r3, r2
    a0ca:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a0ce:	7efb      	ldrb	r3, [r7, #27]
    a0d0:	4619      	mov	r1, r3
    a0d2:	69f8      	ldr	r0, [r7, #28]
    a0d4:	4b43      	ldr	r3, [pc, #268]	; (a1e4 <_usb_d_dev_handle_trfail+0x1b4>)
    a0d6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a0d8:	78fb      	ldrb	r3, [r7, #3]
    a0da:	f107 0220 	add.w	r2, r7, #32
    a0de:	4413      	add	r3, r2
    a0e0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a0e4:	7efb      	ldrb	r3, [r7, #27]
    a0e6:	4619      	mov	r1, r3
    a0e8:	69f8      	ldr	r0, [r7, #28]
    a0ea:	4b3f      	ldr	r3, [pc, #252]	; (a1e8 <_usb_d_dev_handle_trfail+0x1b8>)
    a0ec:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    a0ee:	78fb      	ldrb	r3, [r7, #3]
    a0f0:	2b00      	cmp	r3, #0
    a0f2:	bf14      	ite	ne
    a0f4:	2301      	movne	r3, #1
    a0f6:	2300      	moveq	r3, #0
    a0f8:	b2db      	uxtb	r3, r3
    a0fa:	2204      	movs	r2, #4
    a0fc:	4619      	mov	r1, r3
    a0fe:	6878      	ldr	r0, [r7, #4]
    a100:	4b3a      	ldr	r3, [pc, #232]	; (a1ec <_usb_d_dev_handle_trfail+0x1bc>)
    a102:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    a104:	e062      	b.n	a1cc <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    a106:	7b3b      	ldrb	r3, [r7, #12]
    a108:	f003 0302 	and.w	r3, r3, #2
    a10c:	b2db      	uxtb	r3, r3
    a10e:	2b00      	cmp	r3, #0
    a110:	d040      	beq.n	a194 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    a112:	78fb      	ldrb	r3, [r7, #3]
    a114:	011b      	lsls	r3, r3, #4
    a116:	697a      	ldr	r2, [r7, #20]
    a118:	441a      	add	r2, r3
    a11a:	7a93      	ldrb	r3, [r2, #10]
    a11c:	f36f 0341 	bfc	r3, #1, #1
    a120:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a122:	78fb      	ldrb	r3, [r7, #3]
    a124:	f107 0220 	add.w	r2, r7, #32
    a128:	4413      	add	r3, r2
    a12a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a12e:	7efb      	ldrb	r3, [r7, #27]
    a130:	4619      	mov	r1, r3
    a132:	69f8      	ldr	r0, [r7, #28]
    a134:	4b2b      	ldr	r3, [pc, #172]	; (a1e4 <_usb_d_dev_handle_trfail+0x1b4>)
    a136:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a138:	78fb      	ldrb	r3, [r7, #3]
    a13a:	f107 0220 	add.w	r2, r7, #32
    a13e:	4413      	add	r3, r2
    a140:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a144:	7efb      	ldrb	r3, [r7, #27]
    a146:	4619      	mov	r1, r3
    a148:	69f8      	ldr	r0, [r7, #28]
    a14a:	4b27      	ldr	r3, [pc, #156]	; (a1e8 <_usb_d_dev_handle_trfail+0x1b8>)
    a14c:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    a14e:	7cbb      	ldrb	r3, [r7, #18]
    a150:	2b00      	cmp	r3, #0
    a152:	d03b      	beq.n	a1cc <_usb_d_dev_handle_trfail+0x19c>
    a154:	687b      	ldr	r3, [r7, #4]
    a156:	7cdb      	ldrb	r3, [r3, #19]
    a158:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a15c:	b2db      	uxtb	r3, r3
    a15e:	2b00      	cmp	r3, #0
    a160:	d034      	beq.n	a1cc <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    a162:	687b      	ldr	r3, [r7, #4]
    a164:	7cdb      	ldrb	r3, [r3, #19]
    a166:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a16a:	b2db      	uxtb	r3, r3
    a16c:	461a      	mov	r2, r3
    a16e:	78fb      	ldrb	r3, [r7, #3]
    a170:	4293      	cmp	r3, r2
    a172:	d02b      	beq.n	a1cc <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    a174:	687b      	ldr	r3, [r7, #4]
    a176:	7cdb      	ldrb	r3, [r3, #19]
    a178:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a17c:	b2db      	uxtb	r3, r3
    a17e:	2b00      	cmp	r3, #0
    a180:	bf14      	ite	ne
    a182:	2301      	movne	r3, #1
    a184:	2300      	moveq	r3, #0
    a186:	b2db      	uxtb	r3, r3
    a188:	2200      	movs	r2, #0
    a18a:	4619      	mov	r1, r3
    a18c:	6878      	ldr	r0, [r7, #4]
    a18e:	4b17      	ldr	r3, [pc, #92]	; (a1ec <_usb_d_dev_handle_trfail+0x1bc>)
    a190:	4798      	blx	r3
}
    a192:	e01b      	b.n	a1cc <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    a194:	78fa      	ldrb	r2, [r7, #3]
    a196:	7efb      	ldrb	r3, [r7, #27]
    a198:	4611      	mov	r1, r2
    a19a:	4618      	mov	r0, r3
    a19c:	4b14      	ldr	r3, [pc, #80]	; (a1f0 <_usb_d_dev_handle_trfail+0x1c0>)
    a19e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a1a0:	78fb      	ldrb	r3, [r7, #3]
    a1a2:	f107 0220 	add.w	r2, r7, #32
    a1a6:	4413      	add	r3, r2
    a1a8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a1ac:	7efb      	ldrb	r3, [r7, #27]
    a1ae:	4619      	mov	r1, r3
    a1b0:	69f8      	ldr	r0, [r7, #28]
    a1b2:	4b0c      	ldr	r3, [pc, #48]	; (a1e4 <_usb_d_dev_handle_trfail+0x1b4>)
    a1b4:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a1b6:	78fb      	ldrb	r3, [r7, #3]
    a1b8:	f107 0220 	add.w	r2, r7, #32
    a1bc:	4413      	add	r3, r2
    a1be:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a1c2:	7efb      	ldrb	r3, [r7, #27]
    a1c4:	4619      	mov	r1, r3
    a1c6:	69f8      	ldr	r0, [r7, #28]
    a1c8:	4b07      	ldr	r3, [pc, #28]	; (a1e8 <_usb_d_dev_handle_trfail+0x1b8>)
    a1ca:	4798      	blx	r3
}
    a1cc:	bf00      	nop
    a1ce:	3720      	adds	r7, #32
    a1d0:	46bd      	mov	sp, r7
    a1d2:	bd80      	pop	{r7, pc}
    a1d4:	0000f63c 	.word	0x0000f63c
    a1d8:	20000cdc 	.word	0x20000cdc
    a1dc:	00008d99 	.word	0x00008d99
    a1e0:	00008d69 	.word	0x00008d69
    a1e4:	00008c3d 	.word	0x00008c3d
    a1e8:	00008d3d 	.word	0x00008d3d
    a1ec:	0000ada9 	.word	0x0000ada9
    a1f0:	00009625 	.word	0x00009625

0000a1f4 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a1f4:	b580      	push	{r7, lr}
    a1f6:	b082      	sub	sp, #8
    a1f8:	af00      	add	r7, sp, #0
    a1fa:	6078      	str	r0, [r7, #4]
    a1fc:	460b      	mov	r3, r1
    a1fe:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a200:	78fb      	ldrb	r3, [r7, #3]
    a202:	f003 0310 	and.w	r3, r3, #16
    a206:	2b00      	cmp	r3, #0
    a208:	d003      	beq.n	a212 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    a20a:	6878      	ldr	r0, [r7, #4]
    a20c:	4b0c      	ldr	r3, [pc, #48]	; (a240 <_usb_d_dev_trans_setup_isr+0x4c>)
    a20e:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    a210:	e012      	b.n	a238 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a212:	78fb      	ldrb	r3, [r7, #3]
    a214:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a218:	2b00      	cmp	r3, #0
    a21a:	d004      	beq.n	a226 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    a21c:	2101      	movs	r1, #1
    a21e:	6878      	ldr	r0, [r7, #4]
    a220:	4b08      	ldr	r3, [pc, #32]	; (a244 <_usb_d_dev_trans_setup_isr+0x50>)
    a222:	4798      	blx	r3
}
    a224:	e008      	b.n	a238 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a226:	78fb      	ldrb	r3, [r7, #3]
    a228:	f003 0320 	and.w	r3, r3, #32
    a22c:	2b00      	cmp	r3, #0
    a22e:	d003      	beq.n	a238 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    a230:	2100      	movs	r1, #0
    a232:	6878      	ldr	r0, [r7, #4]
    a234:	4b03      	ldr	r3, [pc, #12]	; (a244 <_usb_d_dev_trans_setup_isr+0x50>)
    a236:	4798      	blx	r3
}
    a238:	bf00      	nop
    a23a:	3708      	adds	r7, #8
    a23c:	46bd      	mov	sp, r7
    a23e:	bd80      	pop	{r7, pc}
    a240:	00009f15 	.word	0x00009f15
    a244:	00009fed 	.word	0x00009fed

0000a248 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a248:	b580      	push	{r7, lr}
    a24a:	b082      	sub	sp, #8
    a24c:	af00      	add	r7, sp, #0
    a24e:	6078      	str	r0, [r7, #4]
    a250:	460b      	mov	r3, r1
    a252:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a254:	78fb      	ldrb	r3, [r7, #3]
    a256:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a25a:	2b00      	cmp	r3, #0
    a25c:	d004      	beq.n	a268 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    a25e:	2101      	movs	r1, #1
    a260:	6878      	ldr	r0, [r7, #4]
    a262:	4b1a      	ldr	r3, [pc, #104]	; (a2cc <_usb_d_dev_trans_in_isr+0x84>)
    a264:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a266:	e02c      	b.n	a2c2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a268:	78fb      	ldrb	r3, [r7, #3]
    a26a:	f003 0308 	and.w	r3, r3, #8
    a26e:	2b00      	cmp	r3, #0
    a270:	d004      	beq.n	a27c <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    a272:	2101      	movs	r1, #1
    a274:	6878      	ldr	r0, [r7, #4]
    a276:	4b16      	ldr	r3, [pc, #88]	; (a2d0 <_usb_d_dev_trans_in_isr+0x88>)
    a278:	4798      	blx	r3
}
    a27a:	e022      	b.n	a2c2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a27c:	78fb      	ldrb	r3, [r7, #3]
    a27e:	f003 0302 	and.w	r3, r3, #2
    a282:	2b00      	cmp	r3, #0
    a284:	d004      	beq.n	a290 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    a286:	2101      	movs	r1, #1
    a288:	6878      	ldr	r0, [r7, #4]
    a28a:	4b12      	ldr	r3, [pc, #72]	; (a2d4 <_usb_d_dev_trans_in_isr+0x8c>)
    a28c:	4798      	blx	r3
}
    a28e:	e018      	b.n	a2c2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a290:	687b      	ldr	r3, [r7, #4]
    a292:	7cdb      	ldrb	r3, [r3, #19]
    a294:	f003 0307 	and.w	r3, r3, #7
    a298:	b2db      	uxtb	r3, r3
    a29a:	2b01      	cmp	r3, #1
    a29c:	d111      	bne.n	a2c2 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a29e:	78fb      	ldrb	r3, [r7, #3]
    a2a0:	f003 0304 	and.w	r3, r3, #4
    a2a4:	2b00      	cmp	r3, #0
    a2a6:	d004      	beq.n	a2b2 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    a2a8:	2100      	movs	r1, #0
    a2aa:	6878      	ldr	r0, [r7, #4]
    a2ac:	4b08      	ldr	r3, [pc, #32]	; (a2d0 <_usb_d_dev_trans_in_isr+0x88>)
    a2ae:	4798      	blx	r3
}
    a2b0:	e007      	b.n	a2c2 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a2b2:	78fb      	ldrb	r3, [r7, #3]
    a2b4:	f003 0310 	and.w	r3, r3, #16
    a2b8:	2b00      	cmp	r3, #0
    a2ba:	d002      	beq.n	a2c2 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a2bc:	6878      	ldr	r0, [r7, #4]
    a2be:	4b06      	ldr	r3, [pc, #24]	; (a2d8 <_usb_d_dev_trans_in_isr+0x90>)
    a2c0:	4798      	blx	r3
}
    a2c2:	bf00      	nop
    a2c4:	3708      	adds	r7, #8
    a2c6:	46bd      	mov	sp, r7
    a2c8:	bd80      	pop	{r7, pc}
    a2ca:	bf00      	nop
    a2cc:	00009fed 	.word	0x00009fed
    a2d0:	0000a031 	.word	0x0000a031
    a2d4:	00009a39 	.word	0x00009a39
    a2d8:	00009f15 	.word	0x00009f15

0000a2dc <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a2dc:	b580      	push	{r7, lr}
    a2de:	b082      	sub	sp, #8
    a2e0:	af00      	add	r7, sp, #0
    a2e2:	6078      	str	r0, [r7, #4]
    a2e4:	460b      	mov	r3, r1
    a2e6:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a2e8:	78fb      	ldrb	r3, [r7, #3]
    a2ea:	f003 0320 	and.w	r3, r3, #32
    a2ee:	2b00      	cmp	r3, #0
    a2f0:	d004      	beq.n	a2fc <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    a2f2:	2100      	movs	r1, #0
    a2f4:	6878      	ldr	r0, [r7, #4]
    a2f6:	4b1a      	ldr	r3, [pc, #104]	; (a360 <_usb_d_dev_trans_out_isr+0x84>)
    a2f8:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a2fa:	e02c      	b.n	a356 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a2fc:	78fb      	ldrb	r3, [r7, #3]
    a2fe:	f003 0304 	and.w	r3, r3, #4
    a302:	2b00      	cmp	r3, #0
    a304:	d004      	beq.n	a310 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    a306:	2100      	movs	r1, #0
    a308:	6878      	ldr	r0, [r7, #4]
    a30a:	4b16      	ldr	r3, [pc, #88]	; (a364 <_usb_d_dev_trans_out_isr+0x88>)
    a30c:	4798      	blx	r3
}
    a30e:	e022      	b.n	a356 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    a310:	78fb      	ldrb	r3, [r7, #3]
    a312:	f003 0301 	and.w	r3, r3, #1
    a316:	2b00      	cmp	r3, #0
    a318:	d004      	beq.n	a324 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    a31a:	2101      	movs	r1, #1
    a31c:	6878      	ldr	r0, [r7, #4]
    a31e:	4b12      	ldr	r3, [pc, #72]	; (a368 <_usb_d_dev_trans_out_isr+0x8c>)
    a320:	4798      	blx	r3
}
    a322:	e018      	b.n	a356 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a324:	687b      	ldr	r3, [r7, #4]
    a326:	7cdb      	ldrb	r3, [r3, #19]
    a328:	f003 0307 	and.w	r3, r3, #7
    a32c:	b2db      	uxtb	r3, r3
    a32e:	2b01      	cmp	r3, #1
    a330:	d111      	bne.n	a356 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a332:	78fb      	ldrb	r3, [r7, #3]
    a334:	f003 0308 	and.w	r3, r3, #8
    a338:	2b00      	cmp	r3, #0
    a33a:	d004      	beq.n	a346 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    a33c:	2101      	movs	r1, #1
    a33e:	6878      	ldr	r0, [r7, #4]
    a340:	4b08      	ldr	r3, [pc, #32]	; (a364 <_usb_d_dev_trans_out_isr+0x88>)
    a342:	4798      	blx	r3
}
    a344:	e007      	b.n	a356 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a346:	78fb      	ldrb	r3, [r7, #3]
    a348:	f003 0310 	and.w	r3, r3, #16
    a34c:	2b00      	cmp	r3, #0
    a34e:	d002      	beq.n	a356 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a350:	6878      	ldr	r0, [r7, #4]
    a352:	4b06      	ldr	r3, [pc, #24]	; (a36c <_usb_d_dev_trans_out_isr+0x90>)
    a354:	4798      	blx	r3
}
    a356:	bf00      	nop
    a358:	3708      	adds	r7, #8
    a35a:	46bd      	mov	sp, r7
    a35c:	bd80      	pop	{r7, pc}
    a35e:	bf00      	nop
    a360:	00009fed 	.word	0x00009fed
    a364:	0000a031 	.word	0x0000a031
    a368:	00009c51 	.word	0x00009c51
    a36c:	00009f15 	.word	0x00009f15

0000a370 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    a370:	b580      	push	{r7, lr}
    a372:	b084      	sub	sp, #16
    a374:	af00      	add	r7, sp, #0
    a376:	6078      	str	r0, [r7, #4]
    a378:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    a37a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a37e:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a380:	683b      	ldr	r3, [r7, #0]
    a382:	7c9b      	ldrb	r3, [r3, #18]
    a384:	f003 030f 	and.w	r3, r3, #15
    a388:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    a38a:	7afb      	ldrb	r3, [r7, #11]
    a38c:	2201      	movs	r2, #1
    a38e:	409a      	lsls	r2, r3
    a390:	687b      	ldr	r3, [r7, #4]
    a392:	4013      	ands	r3, r2
    a394:	2b00      	cmp	r3, #0
    a396:	d03d      	beq.n	a414 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    a398:	7afb      	ldrb	r3, [r7, #11]
    a39a:	68fa      	ldr	r2, [r7, #12]
    a39c:	3308      	adds	r3, #8
    a39e:	015b      	lsls	r3, r3, #5
    a3a0:	4413      	add	r3, r2
    a3a2:	3307      	adds	r3, #7
    a3a4:	781b      	ldrb	r3, [r3, #0]
    a3a6:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    a3a8:	7afb      	ldrb	r3, [r7, #11]
    a3aa:	68fa      	ldr	r2, [r7, #12]
    a3ac:	015b      	lsls	r3, r3, #5
    a3ae:	4413      	add	r3, r2
    a3b0:	f203 1309 	addw	r3, r3, #265	; 0x109
    a3b4:	781b      	ldrb	r3, [r3, #0]
    a3b6:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    a3b8:	7aba      	ldrb	r2, [r7, #10]
    a3ba:	7a7b      	ldrb	r3, [r7, #9]
    a3bc:	4013      	ands	r3, r2
    a3be:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    a3c0:	7abb      	ldrb	r3, [r7, #10]
    a3c2:	2b00      	cmp	r3, #0
    a3c4:	d027      	beq.n	a416 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    a3c6:	683b      	ldr	r3, [r7, #0]
    a3c8:	7cdb      	ldrb	r3, [r3, #19]
    a3ca:	f003 0307 	and.w	r3, r3, #7
    a3ce:	b2db      	uxtb	r3, r3
    a3d0:	2b01      	cmp	r3, #1
    a3d2:	d10c      	bne.n	a3ee <_usb_d_dev_handle_eps+0x7e>
    a3d4:	683b      	ldr	r3, [r7, #0]
    a3d6:	7cdb      	ldrb	r3, [r3, #19]
    a3d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a3dc:	b2db      	uxtb	r3, r3
    a3de:	2b00      	cmp	r3, #0
    a3e0:	d105      	bne.n	a3ee <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    a3e2:	7abb      	ldrb	r3, [r7, #10]
    a3e4:	4619      	mov	r1, r3
    a3e6:	6838      	ldr	r0, [r7, #0]
    a3e8:	4b0c      	ldr	r3, [pc, #48]	; (a41c <_usb_d_dev_handle_eps+0xac>)
    a3ea:	4798      	blx	r3
    a3ec:	e013      	b.n	a416 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    a3ee:	683b      	ldr	r3, [r7, #0]
    a3f0:	7cdb      	ldrb	r3, [r3, #19]
    a3f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a3f6:	b2db      	uxtb	r3, r3
    a3f8:	2b00      	cmp	r3, #0
    a3fa:	d005      	beq.n	a408 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    a3fc:	7abb      	ldrb	r3, [r7, #10]
    a3fe:	4619      	mov	r1, r3
    a400:	6838      	ldr	r0, [r7, #0]
    a402:	4b07      	ldr	r3, [pc, #28]	; (a420 <_usb_d_dev_handle_eps+0xb0>)
    a404:	4798      	blx	r3
    a406:	e006      	b.n	a416 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    a408:	7abb      	ldrb	r3, [r7, #10]
    a40a:	4619      	mov	r1, r3
    a40c:	6838      	ldr	r0, [r7, #0]
    a40e:	4b05      	ldr	r3, [pc, #20]	; (a424 <_usb_d_dev_handle_eps+0xb4>)
    a410:	4798      	blx	r3
    a412:	e000      	b.n	a416 <_usb_d_dev_handle_eps+0xa6>
		return;
    a414:	bf00      	nop
		}
	}
}
    a416:	3710      	adds	r7, #16
    a418:	46bd      	mov	sp, r7
    a41a:	bd80      	pop	{r7, pc}
    a41c:	0000a1f5 	.word	0x0000a1f5
    a420:	0000a249 	.word	0x0000a249
    a424:	0000a2dd 	.word	0x0000a2dd

0000a428 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    a428:	b580      	push	{r7, lr}
    a42a:	b084      	sub	sp, #16
    a42c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a42e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a432:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    a434:	68bb      	ldr	r3, [r7, #8]
    a436:	8c1b      	ldrh	r3, [r3, #32]
    a438:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    a43a:	88fb      	ldrh	r3, [r7, #6]
    a43c:	2b00      	cmp	r3, #0
    a43e:	d104      	bne.n	a44a <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    a440:	4b13      	ldr	r3, [pc, #76]	; (a490 <_usb_d_dev_handler+0x68>)
    a442:	4798      	blx	r3
    a444:	4603      	mov	r3, r0
    a446:	2b00      	cmp	r3, #0
    a448:	d11e      	bne.n	a488 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    a44a:	2300      	movs	r3, #0
    a44c:	73fb      	strb	r3, [r7, #15]
    a44e:	e017      	b.n	a480 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    a450:	7bfa      	ldrb	r2, [r7, #15]
    a452:	4613      	mov	r3, r2
    a454:	009b      	lsls	r3, r3, #2
    a456:	4413      	add	r3, r2
    a458:	009b      	lsls	r3, r3, #2
    a45a:	3310      	adds	r3, #16
    a45c:	4a0d      	ldr	r2, [pc, #52]	; (a494 <_usb_d_dev_handler+0x6c>)
    a45e:	4413      	add	r3, r2
    a460:	3304      	adds	r3, #4
    a462:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    a464:	683b      	ldr	r3, [r7, #0]
    a466:	7c9b      	ldrb	r3, [r3, #18]
    a468:	2bff      	cmp	r3, #255	; 0xff
    a46a:	d005      	beq.n	a478 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    a46c:	88fb      	ldrh	r3, [r7, #6]
    a46e:	6839      	ldr	r1, [r7, #0]
    a470:	4618      	mov	r0, r3
    a472:	4b09      	ldr	r3, [pc, #36]	; (a498 <_usb_d_dev_handler+0x70>)
    a474:	4798      	blx	r3
    a476:	e000      	b.n	a47a <_usb_d_dev_handler+0x52>
			continue;
    a478:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    a47a:	7bfb      	ldrb	r3, [r7, #15]
    a47c:	3301      	adds	r3, #1
    a47e:	73fb      	strb	r3, [r7, #15]
    a480:	7bfb      	ldrb	r3, [r7, #15]
    a482:	2b08      	cmp	r3, #8
    a484:	d9e4      	bls.n	a450 <_usb_d_dev_handler+0x28>
    a486:	e000      	b.n	a48a <_usb_d_dev_handler+0x62>
			return;
    a488:	bf00      	nop
	}
}
    a48a:	3710      	adds	r7, #16
    a48c:	46bd      	mov	sp, r7
    a48e:	bd80      	pop	{r7, pc}
    a490:	00009981 	.word	0x00009981
    a494:	20000c14 	.word	0x20000c14
    a498:	0000a371 	.word	0x0000a371

0000a49c <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    a49c:	b580      	push	{r7, lr}
    a49e:	b082      	sub	sp, #8
    a4a0:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    a4a2:	2300      	movs	r3, #0
    a4a4:	71fb      	strb	r3, [r7, #7]
    a4a6:	e023      	b.n	a4f0 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    a4a8:	79fa      	ldrb	r2, [r7, #7]
    a4aa:	4613      	mov	r3, r2
    a4ac:	009b      	lsls	r3, r3, #2
    a4ae:	4413      	add	r3, r2
    a4b0:	009b      	lsls	r3, r3, #2
    a4b2:	3310      	adds	r3, #16
    a4b4:	4a14      	ldr	r2, [pc, #80]	; (a508 <_usb_d_dev_reset_epts+0x6c>)
    a4b6:	4413      	add	r3, r2
    a4b8:	3304      	adds	r3, #4
    a4ba:	2103      	movs	r1, #3
    a4bc:	4618      	mov	r0, r3
    a4be:	4b13      	ldr	r3, [pc, #76]	; (a50c <_usb_d_dev_reset_epts+0x70>)
    a4c0:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    a4c2:	79fa      	ldrb	r2, [r7, #7]
    a4c4:	4910      	ldr	r1, [pc, #64]	; (a508 <_usb_d_dev_reset_epts+0x6c>)
    a4c6:	4613      	mov	r3, r2
    a4c8:	009b      	lsls	r3, r3, #2
    a4ca:	4413      	add	r3, r2
    a4cc:	009b      	lsls	r3, r3, #2
    a4ce:	440b      	add	r3, r1
    a4d0:	3326      	adds	r3, #38	; 0x26
    a4d2:	22ff      	movs	r2, #255	; 0xff
    a4d4:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    a4d6:	79fa      	ldrb	r2, [r7, #7]
    a4d8:	490b      	ldr	r1, [pc, #44]	; (a508 <_usb_d_dev_reset_epts+0x6c>)
    a4da:	4613      	mov	r3, r2
    a4dc:	009b      	lsls	r3, r3, #2
    a4de:	4413      	add	r3, r2
    a4e0:	009b      	lsls	r3, r3, #2
    a4e2:	440b      	add	r3, r1
    a4e4:	3327      	adds	r3, #39	; 0x27
    a4e6:	2200      	movs	r2, #0
    a4e8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    a4ea:	79fb      	ldrb	r3, [r7, #7]
    a4ec:	3301      	adds	r3, #1
    a4ee:	71fb      	strb	r3, [r7, #7]
    a4f0:	79fb      	ldrb	r3, [r7, #7]
    a4f2:	2b08      	cmp	r3, #8
    a4f4:	d9d8      	bls.n	a4a8 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    a4f6:	22a0      	movs	r2, #160	; 0xa0
    a4f8:	2100      	movs	r1, #0
    a4fa:	4805      	ldr	r0, [pc, #20]	; (a510 <_usb_d_dev_reset_epts+0x74>)
    a4fc:	4b05      	ldr	r3, [pc, #20]	; (a514 <_usb_d_dev_reset_epts+0x78>)
    a4fe:	4798      	blx	r3
}
    a500:	bf00      	nop
    a502:	3708      	adds	r7, #8
    a504:	46bd      	mov	sp, r7
    a506:	bd80      	pop	{r7, pc}
    a508:	20000c14 	.word	0x20000c14
    a50c:	0000ad61 	.word	0x0000ad61
    a510:	20000cdc 	.word	0x20000cdc
    a514:	0000eead 	.word	0x0000eead

0000a518 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    a518:	b580      	push	{r7, lr}
    a51a:	b084      	sub	sp, #16
    a51c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    a51e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a522:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    a524:	2301      	movs	r3, #1
    a526:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    a528:	2304      	movs	r3, #4
    a52a:	713b      	strb	r3, [r7, #4]
    a52c:	2300      	movs	r3, #0
    a52e:	717b      	strb	r3, [r7, #5]
    a530:	2300      	movs	r3, #0
    a532:	71bb      	strb	r3, [r7, #6]
    a534:	2300      	movs	r3, #0
    a536:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    a538:	2101      	movs	r1, #1
    a53a:	68f8      	ldr	r0, [r7, #12]
    a53c:	4b26      	ldr	r3, [pc, #152]	; (a5d8 <_usb_d_dev_init+0xc0>)
    a53e:	4798      	blx	r3
    a540:	4603      	mov	r3, r0
    a542:	f083 0301 	eor.w	r3, r3, #1
    a546:	b2db      	uxtb	r3, r3
    a548:	2b00      	cmp	r3, #0
    a54a:	d011      	beq.n	a570 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    a54c:	2102      	movs	r1, #2
    a54e:	68f8      	ldr	r0, [r7, #12]
    a550:	4b22      	ldr	r3, [pc, #136]	; (a5dc <_usb_d_dev_init+0xc4>)
    a552:	4798      	blx	r3
    a554:	4603      	mov	r3, r0
    a556:	2b00      	cmp	r3, #0
    a558:	d006      	beq.n	a568 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    a55a:	68f8      	ldr	r0, [r7, #12]
    a55c:	4b20      	ldr	r3, [pc, #128]	; (a5e0 <_usb_d_dev_init+0xc8>)
    a55e:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    a560:	2102      	movs	r1, #2
    a562:	68f8      	ldr	r0, [r7, #12]
    a564:	4b1f      	ldr	r3, [pc, #124]	; (a5e4 <_usb_d_dev_init+0xcc>)
    a566:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    a568:	2101      	movs	r1, #1
    a56a:	68f8      	ldr	r0, [r7, #12]
    a56c:	4b1e      	ldr	r3, [pc, #120]	; (a5e8 <_usb_d_dev_init+0xd0>)
    a56e:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    a570:	2101      	movs	r1, #1
    a572:	68f8      	ldr	r0, [r7, #12]
    a574:	4b1b      	ldr	r3, [pc, #108]	; (a5e4 <_usb_d_dev_init+0xcc>)
    a576:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    a578:	4b1c      	ldr	r3, [pc, #112]	; (a5ec <_usb_d_dev_init+0xd4>)
    a57a:	4a1d      	ldr	r2, [pc, #116]	; (a5f0 <_usb_d_dev_init+0xd8>)
    a57c:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    a57e:	4b1b      	ldr	r3, [pc, #108]	; (a5ec <_usb_d_dev_init+0xd4>)
    a580:	4a1b      	ldr	r2, [pc, #108]	; (a5f0 <_usb_d_dev_init+0xd8>)
    a582:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    a584:	4b19      	ldr	r3, [pc, #100]	; (a5ec <_usb_d_dev_init+0xd4>)
    a586:	4a1a      	ldr	r2, [pc, #104]	; (a5f0 <_usb_d_dev_init+0xd8>)
    a588:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    a58a:	4b18      	ldr	r3, [pc, #96]	; (a5ec <_usb_d_dev_init+0xd4>)
    a58c:	4a18      	ldr	r2, [pc, #96]	; (a5f0 <_usb_d_dev_init+0xd8>)
    a58e:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    a590:	4b16      	ldr	r3, [pc, #88]	; (a5ec <_usb_d_dev_init+0xd4>)
    a592:	4a17      	ldr	r2, [pc, #92]	; (a5f0 <_usb_d_dev_init+0xd8>)
    a594:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    a596:	4b17      	ldr	r3, [pc, #92]	; (a5f4 <_usb_d_dev_init+0xdc>)
    a598:	4798      	blx	r3

	_usb_load_calib();
    a59a:	4b17      	ldr	r3, [pc, #92]	; (a5f8 <_usb_d_dev_init+0xe0>)
    a59c:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    a59e:	2104      	movs	r1, #4
    a5a0:	68f8      	ldr	r0, [r7, #12]
    a5a2:	4b11      	ldr	r3, [pc, #68]	; (a5e8 <_usb_d_dev_init+0xd0>)
    a5a4:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    a5a6:	4b15      	ldr	r3, [pc, #84]	; (a5fc <_usb_d_dev_init+0xe4>)
    a5a8:	4619      	mov	r1, r3
    a5aa:	68f8      	ldr	r0, [r7, #12]
    a5ac:	4b14      	ldr	r3, [pc, #80]	; (a600 <_usb_d_dev_init+0xe8>)
    a5ae:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    a5b0:	7afb      	ldrb	r3, [r7, #11]
    a5b2:	f107 0210 	add.w	r2, r7, #16
    a5b6:	4413      	add	r3, r2
    a5b8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    a5bc:	f043 0301 	orr.w	r3, r3, #1
    a5c0:	b2db      	uxtb	r3, r3
    a5c2:	b29b      	uxth	r3, r3
    a5c4:	4619      	mov	r1, r3
    a5c6:	68f8      	ldr	r0, [r7, #12]
    a5c8:	4b0e      	ldr	r3, [pc, #56]	; (a604 <_usb_d_dev_init+0xec>)
    a5ca:	4798      	blx	r3

	return ERR_NONE;
    a5cc:	2300      	movs	r3, #0
}
    a5ce:	4618      	mov	r0, r3
    a5d0:	3710      	adds	r7, #16
    a5d2:	46bd      	mov	sp, r7
    a5d4:	bd80      	pop	{r7, pc}
    a5d6:	bf00      	nop
    a5d8:	00008bb1 	.word	0x00008bb1
    a5dc:	00008f01 	.word	0x00008f01
    a5e0:	00008ed5 	.word	0x00008ed5
    a5e4:	00008b87 	.word	0x00008b87
    a5e8:	00008f31 	.word	0x00008f31
    a5ec:	20000c14 	.word	0x20000c14
    a5f0:	00008ff9 	.word	0x00008ff9
    a5f4:	0000a49d 	.word	0x0000a49d
    a5f8:	00009011 	.word	0x00009011
    a5fc:	20000cdc 	.word	0x20000cdc
    a600:	00008fdd 	.word	0x00008fdd
    a604:	00008fa1 	.word	0x00008fa1

0000a608 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    a608:	b580      	push	{r7, lr}
    a60a:	b082      	sub	sp, #8
    a60c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a60e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a612:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    a614:	2103      	movs	r1, #3
    a616:	6878      	ldr	r0, [r7, #4]
    a618:	4b17      	ldr	r3, [pc, #92]	; (a678 <_usb_d_dev_enable+0x70>)
    a61a:	4798      	blx	r3
    a61c:	4603      	mov	r3, r0
    a61e:	2b00      	cmp	r3, #0
    a620:	d002      	beq.n	a628 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    a622:	f06f 0310 	mvn.w	r3, #16
    a626:	e023      	b.n	a670 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    a628:	6878      	ldr	r0, [r7, #4]
    a62a:	4b14      	ldr	r3, [pc, #80]	; (a67c <_usb_d_dev_enable+0x74>)
    a62c:	4798      	blx	r3
    a62e:	4603      	mov	r3, r0
    a630:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    a632:	78fb      	ldrb	r3, [r7, #3]
    a634:	f003 0302 	and.w	r3, r3, #2
    a638:	2b00      	cmp	r3, #0
    a63a:	d107      	bne.n	a64c <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    a63c:	78fb      	ldrb	r3, [r7, #3]
    a63e:	f043 0302 	orr.w	r3, r3, #2
    a642:	b2db      	uxtb	r3, r3
    a644:	4619      	mov	r1, r3
    a646:	6878      	ldr	r0, [r7, #4]
    a648:	4b0d      	ldr	r3, [pc, #52]	; (a680 <_usb_d_dev_enable+0x78>)
    a64a:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    a64c:	2050      	movs	r0, #80	; 0x50
    a64e:	4b0d      	ldr	r3, [pc, #52]	; (a684 <_usb_d_dev_enable+0x7c>)
    a650:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    a652:	2051      	movs	r0, #81	; 0x51
    a654:	4b0b      	ldr	r3, [pc, #44]	; (a684 <_usb_d_dev_enable+0x7c>)
    a656:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    a658:	2052      	movs	r0, #82	; 0x52
    a65a:	4b0a      	ldr	r3, [pc, #40]	; (a684 <_usb_d_dev_enable+0x7c>)
    a65c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    a65e:	2053      	movs	r0, #83	; 0x53
    a660:	4b08      	ldr	r3, [pc, #32]	; (a684 <_usb_d_dev_enable+0x7c>)
    a662:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    a664:	f240 218d 	movw	r1, #653	; 0x28d
    a668:	6878      	ldr	r0, [r7, #4]
    a66a:	4b07      	ldr	r3, [pc, #28]	; (a688 <_usb_d_dev_enable+0x80>)
    a66c:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    a66e:	2300      	movs	r3, #0
}
    a670:	4618      	mov	r0, r3
    a672:	3708      	adds	r7, #8
    a674:	46bd      	mov	sp, r7
    a676:	bd80      	pop	{r7, pc}
    a678:	00008eab 	.word	0x00008eab
    a67c:	00008f59 	.word	0x00008f59
    a680:	00008f31 	.word	0x00008f31
    a684:	00008abd 	.word	0x00008abd
    a688:	00008e55 	.word	0x00008e55

0000a68c <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    a68c:	b580      	push	{r7, lr}
    a68e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    a690:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a694:	4b01      	ldr	r3, [pc, #4]	; (a69c <_usb_d_dev_attach+0x10>)
    a696:	4798      	blx	r3
}
    a698:	bf00      	nop
    a69a:	bd80      	pop	{r7, pc}
    a69c:	00008f7d 	.word	0x00008f7d

0000a6a0 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    a6a0:	b580      	push	{r7, lr}
    a6a2:	b082      	sub	sp, #8
    a6a4:	af00      	add	r7, sp, #0
    a6a6:	4603      	mov	r3, r0
    a6a8:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    a6aa:	79fb      	ldrb	r3, [r7, #7]
    a6ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a6b0:	b2db      	uxtb	r3, r3
    a6b2:	4619      	mov	r1, r3
    a6b4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a6b8:	4b02      	ldr	r3, [pc, #8]	; (a6c4 <_usb_d_dev_set_address+0x24>)
    a6ba:	4798      	blx	r3
}
    a6bc:	bf00      	nop
    a6be:	3708      	adds	r7, #8
    a6c0:	46bd      	mov	sp, r7
    a6c2:	bd80      	pop	{r7, pc}
    a6c4:	00008fbf 	.word	0x00008fbf

0000a6c8 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    a6c8:	b590      	push	{r4, r7, lr}
    a6ca:	b085      	sub	sp, #20
    a6cc:	af00      	add	r7, sp, #0
    a6ce:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    a6d0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a6d4:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a6d6:	687b      	ldr	r3, [r7, #4]
    a6d8:	7c9b      	ldrb	r3, [r3, #18]
    a6da:	f003 030f 	and.w	r3, r3, #15
    a6de:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a6e0:	687b      	ldr	r3, [r7, #4]
    a6e2:	68db      	ldr	r3, [r3, #12]
    a6e4:	461a      	mov	r2, r3
    a6e6:	7afb      	ldrb	r3, [r7, #11]
    a6e8:	2100      	movs	r1, #0
    a6ea:	4618      	mov	r0, r3
    a6ec:	4b0f      	ldr	r3, [pc, #60]	; (a72c <_usb_d_dev_trans_setup+0x64>)
    a6ee:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a6f0:	687b      	ldr	r3, [r7, #4]
    a6f2:	8a1b      	ldrh	r3, [r3, #16]
    a6f4:	461a      	mov	r2, r3
    a6f6:	7af8      	ldrb	r0, [r7, #11]
    a6f8:	2300      	movs	r3, #0
    a6fa:	2100      	movs	r1, #0
    a6fc:	4c0c      	ldr	r4, [pc, #48]	; (a730 <_usb_d_dev_trans_setup+0x68>)
    a6fe:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    a700:	7afb      	ldrb	r3, [r7, #11]
    a702:	22b0      	movs	r2, #176	; 0xb0
    a704:	4619      	mov	r1, r3
    a706:	68f8      	ldr	r0, [r7, #12]
    a708:	4b0a      	ldr	r3, [pc, #40]	; (a734 <_usb_d_dev_trans_setup+0x6c>)
    a70a:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    a70c:	7afb      	ldrb	r3, [r7, #11]
    a70e:	2200      	movs	r2, #0
    a710:	2100      	movs	r1, #0
    a712:	4618      	mov	r0, r3
    a714:	4b08      	ldr	r3, [pc, #32]	; (a738 <_usb_d_dev_trans_setup+0x70>)
    a716:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    a718:	7afb      	ldrb	r3, [r7, #11]
    a71a:	2210      	movs	r2, #16
    a71c:	4619      	mov	r1, r3
    a71e:	68f8      	ldr	r0, [r7, #12]
    a720:	4b06      	ldr	r3, [pc, #24]	; (a73c <_usb_d_dev_trans_setup+0x74>)
    a722:	4798      	blx	r3
}
    a724:	bf00      	nop
    a726:	3714      	adds	r7, #20
    a728:	46bd      	mov	sp, r7
    a72a:	bd90      	pop	{r4, r7, pc}
    a72c:	0000945d 	.word	0x0000945d
    a730:	000095e5 	.word	0x000095e5
    a734:	00008cbd 	.word	0x00008cbd
    a738:	000096b5 	.word	0x000096b5
    a73c:	00008d11 	.word	0x00008d11

0000a740 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    a740:	b580      	push	{r7, lr}
    a742:	b088      	sub	sp, #32
    a744:	af00      	add	r7, sp, #0
    a746:	4603      	mov	r3, r0
    a748:	71fb      	strb	r3, [r7, #7]
    a74a:	460b      	mov	r3, r1
    a74c:	71bb      	strb	r3, [r7, #6]
    a74e:	4613      	mov	r3, r2
    a750:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    a752:	79fb      	ldrb	r3, [r7, #7]
    a754:	f003 030f 	and.w	r3, r3, #15
    a758:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    a75a:	79fb      	ldrb	r3, [r7, #7]
    a75c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a760:	2b00      	cmp	r3, #0
    a762:	bf14      	ite	ne
    a764:	2301      	movne	r3, #1
    a766:	2300      	moveq	r3, #0
    a768:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a76a:	7fba      	ldrb	r2, [r7, #30]
    a76c:	7ffb      	ldrb	r3, [r7, #31]
    a76e:	4611      	mov	r1, r2
    a770:	4618      	mov	r0, r3
    a772:	4b3e      	ldr	r3, [pc, #248]	; (a86c <_usb_d_dev_ep_init+0x12c>)
    a774:	4798      	blx	r3
    a776:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a778:	79bb      	ldrb	r3, [r7, #6]
    a77a:	f003 0303 	and.w	r3, r3, #3
    a77e:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a780:	7ffa      	ldrb	r2, [r7, #31]
    a782:	4613      	mov	r3, r2
    a784:	005b      	lsls	r3, r3, #1
    a786:	4413      	add	r3, r2
    a788:	009b      	lsls	r3, r3, #2
    a78a:	4a39      	ldr	r2, [pc, #228]	; (a870 <_usb_d_dev_ep_init+0x130>)
    a78c:	4413      	add	r3, r2
    a78e:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    a790:	7ffb      	ldrb	r3, [r7, #31]
    a792:	2b04      	cmp	r3, #4
    a794:	d902      	bls.n	a79c <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    a796:	f06f 0311 	mvn.w	r3, #17
    a79a:	e063      	b.n	a864 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    a79c:	69bb      	ldr	r3, [r7, #24]
    a79e:	7c9b      	ldrb	r3, [r3, #18]
    a7a0:	2bff      	cmp	r3, #255	; 0xff
    a7a2:	d002      	beq.n	a7aa <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    a7a4:	f06f 0313 	mvn.w	r3, #19
    a7a8:	e05c      	b.n	a864 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    a7aa:	7dfb      	ldrb	r3, [r7, #23]
    a7ac:	2b00      	cmp	r3, #0
    a7ae:	d11f      	bne.n	a7f0 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    a7b0:	7fbb      	ldrb	r3, [r7, #30]
    a7b2:	2b00      	cmp	r3, #0
    a7b4:	bf14      	ite	ne
    a7b6:	2301      	movne	r3, #1
    a7b8:	2300      	moveq	r3, #0
    a7ba:	b2db      	uxtb	r3, r3
    a7bc:	f083 0301 	eor.w	r3, r3, #1
    a7c0:	b2db      	uxtb	r3, r3
    a7c2:	f003 0301 	and.w	r3, r3, #1
    a7c6:	b2da      	uxtb	r2, r3
    a7c8:	7ffb      	ldrb	r3, [r7, #31]
    a7ca:	4611      	mov	r1, r2
    a7cc:	4618      	mov	r0, r3
    a7ce:	4b27      	ldr	r3, [pc, #156]	; (a86c <_usb_d_dev_ep_init+0x12c>)
    a7d0:	4798      	blx	r3
    a7d2:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    a7d4:	68fb      	ldr	r3, [r7, #12]
    a7d6:	7c9b      	ldrb	r3, [r3, #18]
    a7d8:	2bff      	cmp	r3, #255	; 0xff
    a7da:	d002      	beq.n	a7e2 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    a7dc:	f06f 0313 	mvn.w	r3, #19
    a7e0:	e040      	b.n	a864 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    a7e2:	693b      	ldr	r3, [r7, #16]
    a7e4:	681b      	ldr	r3, [r3, #0]
    a7e6:	2b00      	cmp	r3, #0
    a7e8:	d102      	bne.n	a7f0 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    a7ea:	f06f 0312 	mvn.w	r3, #18
    a7ee:	e039      	b.n	a864 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a7f0:	7fbb      	ldrb	r3, [r7, #30]
    a7f2:	2b00      	cmp	r3, #0
    a7f4:	d007      	beq.n	a806 <_usb_d_dev_ep_init+0xc6>
    a7f6:	693b      	ldr	r3, [r7, #16]
    a7f8:	685b      	ldr	r3, [r3, #4]
    a7fa:	2b00      	cmp	r3, #0
    a7fc:	bf14      	ite	ne
    a7fe:	2301      	movne	r3, #1
    a800:	2300      	moveq	r3, #0
    a802:	b2db      	uxtb	r3, r3
    a804:	e006      	b.n	a814 <_usb_d_dev_ep_init+0xd4>
    a806:	693b      	ldr	r3, [r7, #16]
    a808:	681b      	ldr	r3, [r3, #0]
    a80a:	2b00      	cmp	r3, #0
    a80c:	bf14      	ite	ne
    a80e:	2301      	movne	r3, #1
    a810:	2300      	moveq	r3, #0
    a812:	b2db      	uxtb	r3, r3
    a814:	2b00      	cmp	r3, #0
    a816:	d00f      	beq.n	a838 <_usb_d_dev_ep_init+0xf8>
    a818:	7fbb      	ldrb	r3, [r7, #30]
    a81a:	2b00      	cmp	r3, #0
    a81c:	d003      	beq.n	a826 <_usb_d_dev_ep_init+0xe6>
    a81e:	693b      	ldr	r3, [r7, #16]
    a820:	895b      	ldrh	r3, [r3, #10]
    a822:	461a      	mov	r2, r3
    a824:	e002      	b.n	a82c <_usb_d_dev_ep_init+0xec>
    a826:	693b      	ldr	r3, [r7, #16]
    a828:	891b      	ldrh	r3, [r3, #8]
    a82a:	461a      	mov	r2, r3
    a82c:	88bb      	ldrh	r3, [r7, #4]
    a82e:	429a      	cmp	r2, r3
    a830:	da02      	bge.n	a838 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    a832:	f06f 0312 	mvn.w	r3, #18
    a836:	e015      	b.n	a864 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a838:	7fbb      	ldrb	r3, [r7, #30]
    a83a:	2b00      	cmp	r3, #0
    a83c:	d002      	beq.n	a844 <_usb_d_dev_ep_init+0x104>
    a83e:	693b      	ldr	r3, [r7, #16]
    a840:	685b      	ldr	r3, [r3, #4]
    a842:	e001      	b.n	a848 <_usb_d_dev_ep_init+0x108>
    a844:	693b      	ldr	r3, [r7, #16]
    a846:	681b      	ldr	r3, [r3, #0]
    a848:	69ba      	ldr	r2, [r7, #24]
    a84a:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    a84c:	69bb      	ldr	r3, [r7, #24]
    a84e:	88ba      	ldrh	r2, [r7, #4]
    a850:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    a852:	7dfb      	ldrb	r3, [r7, #23]
    a854:	3301      	adds	r3, #1
    a856:	b2da      	uxtb	r2, r3
    a858:	69bb      	ldr	r3, [r7, #24]
    a85a:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    a85c:	69bb      	ldr	r3, [r7, #24]
    a85e:	79fa      	ldrb	r2, [r7, #7]
    a860:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    a862:	2300      	movs	r3, #0
}
    a864:	4618      	mov	r0, r3
    a866:	3720      	adds	r7, #32
    a868:	46bd      	mov	sp, r7
    a86a:	bd80      	pop	{r7, pc}
    a86c:	00009771 	.word	0x00009771
    a870:	0000f600 	.word	0x0000f600

0000a874 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    a874:	b580      	push	{r7, lr}
    a876:	b086      	sub	sp, #24
    a878:	af00      	add	r7, sp, #0
    a87a:	4603      	mov	r3, r0
    a87c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    a87e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a882:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    a884:	79fb      	ldrb	r3, [r7, #7]
    a886:	f003 030f 	and.w	r3, r3, #15
    a88a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a88c:	79fb      	ldrb	r3, [r7, #7]
    a88e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a892:	2b00      	cmp	r3, #0
    a894:	bf14      	ite	ne
    a896:	2301      	movne	r3, #1
    a898:	2300      	moveq	r3, #0
    a89a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a89c:	7cba      	ldrb	r2, [r7, #18]
    a89e:	7cfb      	ldrb	r3, [r7, #19]
    a8a0:	4611      	mov	r1, r2
    a8a2:	4618      	mov	r0, r3
    a8a4:	4b2a      	ldr	r3, [pc, #168]	; (a950 <_usb_d_dev_ep_deinit+0xdc>)
    a8a6:	4798      	blx	r3
    a8a8:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a8aa:	7cfb      	ldrb	r3, [r7, #19]
    a8ac:	2b04      	cmp	r3, #4
    a8ae:	d84a      	bhi.n	a946 <_usb_d_dev_ep_deinit+0xd2>
    a8b0:	68fb      	ldr	r3, [r7, #12]
    a8b2:	7c9b      	ldrb	r3, [r3, #18]
    a8b4:	2bff      	cmp	r3, #255	; 0xff
    a8b6:	d046      	beq.n	a946 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a8b8:	7cbb      	ldrb	r3, [r7, #18]
    a8ba:	2203      	movs	r2, #3
    a8bc:	4619      	mov	r1, r3
    a8be:	68f8      	ldr	r0, [r7, #12]
    a8c0:	4b24      	ldr	r3, [pc, #144]	; (a954 <_usb_d_dev_ep_deinit+0xe0>)
    a8c2:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a8c4:	68fb      	ldr	r3, [r7, #12]
    a8c6:	7cdb      	ldrb	r3, [r3, #19]
    a8c8:	f003 0307 	and.w	r3, r3, #7
    a8cc:	b2db      	uxtb	r3, r3
    a8ce:	2b01      	cmp	r3, #1
    a8d0:	d107      	bne.n	a8e2 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a8d2:	79fb      	ldrb	r3, [r7, #7]
    a8d4:	697a      	ldr	r2, [r7, #20]
    a8d6:	3308      	adds	r3, #8
    a8d8:	015b      	lsls	r3, r3, #5
    a8da:	4413      	add	r3, r2
    a8dc:	2200      	movs	r2, #0
    a8de:	701a      	strb	r2, [r3, #0]
    a8e0:	e02a      	b.n	a938 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    a8e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a8e6:	2b00      	cmp	r3, #0
    a8e8:	da15      	bge.n	a916 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a8ea:	79fb      	ldrb	r3, [r7, #7]
    a8ec:	f003 030f 	and.w	r3, r3, #15
    a8f0:	79fa      	ldrb	r2, [r7, #7]
    a8f2:	f002 020f 	and.w	r2, r2, #15
    a8f6:	6979      	ldr	r1, [r7, #20]
    a8f8:	3208      	adds	r2, #8
    a8fa:	0152      	lsls	r2, r2, #5
    a8fc:	440a      	add	r2, r1
    a8fe:	7812      	ldrb	r2, [r2, #0]
    a900:	b2d2      	uxtb	r2, r2
    a902:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    a906:	b2d1      	uxtb	r1, r2
    a908:	697a      	ldr	r2, [r7, #20]
    a90a:	3308      	adds	r3, #8
    a90c:	015b      	lsls	r3, r3, #5
    a90e:	4413      	add	r3, r2
    a910:	460a      	mov	r2, r1
    a912:	701a      	strb	r2, [r3, #0]
    a914:	e010      	b.n	a938 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    a916:	79fb      	ldrb	r3, [r7, #7]
    a918:	79fa      	ldrb	r2, [r7, #7]
    a91a:	6979      	ldr	r1, [r7, #20]
    a91c:	3208      	adds	r2, #8
    a91e:	0152      	lsls	r2, r2, #5
    a920:	440a      	add	r2, r1
    a922:	7812      	ldrb	r2, [r2, #0]
    a924:	b2d2      	uxtb	r2, r2
    a926:	f022 0207 	bic.w	r2, r2, #7
    a92a:	b2d1      	uxtb	r1, r2
    a92c:	697a      	ldr	r2, [r7, #20]
    a92e:	3308      	adds	r3, #8
    a930:	015b      	lsls	r3, r3, #5
    a932:	4413      	add	r3, r2
    a934:	460a      	mov	r2, r1
    a936:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    a938:	68fb      	ldr	r3, [r7, #12]
    a93a:	2200      	movs	r2, #0
    a93c:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    a93e:	68fb      	ldr	r3, [r7, #12]
    a940:	22ff      	movs	r2, #255	; 0xff
    a942:	749a      	strb	r2, [r3, #18]
    a944:	e000      	b.n	a948 <_usb_d_dev_ep_deinit+0xd4>
		return;
    a946:	bf00      	nop
}
    a948:	3718      	adds	r7, #24
    a94a:	46bd      	mov	sp, r7
    a94c:	bd80      	pop	{r7, pc}
    a94e:	bf00      	nop
    a950:	00009771 	.word	0x00009771
    a954:	0000ada9 	.word	0x0000ada9

0000a958 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    a958:	b5b0      	push	{r4, r5, r7, lr}
    a95a:	b088      	sub	sp, #32
    a95c:	af00      	add	r7, sp, #0
    a95e:	4603      	mov	r3, r0
    a960:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    a962:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a966:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    a968:	79fb      	ldrb	r3, [r7, #7]
    a96a:	f003 030f 	and.w	r3, r3, #15
    a96e:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    a970:	79fb      	ldrb	r3, [r7, #7]
    a972:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a976:	2b00      	cmp	r3, #0
    a978:	bf14      	ite	ne
    a97a:	2301      	movne	r3, #1
    a97c:	2300      	moveq	r3, #0
    a97e:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    a980:	7eba      	ldrb	r2, [r7, #26]
    a982:	7efb      	ldrb	r3, [r7, #27]
    a984:	4611      	mov	r1, r2
    a986:	4618      	mov	r0, r3
    a988:	4b70      	ldr	r3, [pc, #448]	; (ab4c <_usb_d_dev_ep_enable+0x1f4>)
    a98a:	4798      	blx	r3
    a98c:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    a98e:	7efb      	ldrb	r3, [r7, #27]
    a990:	4619      	mov	r1, r3
    a992:	69f8      	ldr	r0, [r7, #28]
    a994:	4b6e      	ldr	r3, [pc, #440]	; (ab50 <_usb_d_dev_ep_enable+0x1f8>)
    a996:	4798      	blx	r3
    a998:	4603      	mov	r3, r0
    a99a:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a99c:	7efb      	ldrb	r3, [r7, #27]
    a99e:	2b04      	cmp	r3, #4
    a9a0:	d803      	bhi.n	a9aa <_usb_d_dev_ep_enable+0x52>
    a9a2:	697b      	ldr	r3, [r7, #20]
    a9a4:	7c9b      	ldrb	r3, [r3, #18]
    a9a6:	2bff      	cmp	r3, #255	; 0xff
    a9a8:	d102      	bne.n	a9b0 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    a9aa:	f06f 0311 	mvn.w	r3, #17
    a9ae:	e0c8      	b.n	ab42 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    a9b0:	7efb      	ldrb	r3, [r7, #27]
    a9b2:	015b      	lsls	r3, r3, #5
    a9b4:	4a67      	ldr	r2, [pc, #412]	; (ab54 <_usb_d_dev_ep_enable+0x1fc>)
    a9b6:	4413      	add	r3, r2
    a9b8:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    a9ba:	697b      	ldr	r3, [r7, #20]
    a9bc:	7cdb      	ldrb	r3, [r3, #19]
    a9be:	f003 0307 	and.w	r3, r3, #7
    a9c2:	b2db      	uxtb	r3, r3
    a9c4:	2b01      	cmp	r3, #1
    a9c6:	d14b      	bne.n	aa60 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a9c8:	7cfb      	ldrb	r3, [r7, #19]
    a9ca:	f003 0377 	and.w	r3, r3, #119	; 0x77
    a9ce:	2b00      	cmp	r3, #0
    a9d0:	d002      	beq.n	a9d8 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    a9d2:	f06f 0313 	mvn.w	r3, #19
    a9d6:	e0b4      	b.n	ab42 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    a9d8:	7efb      	ldrb	r3, [r7, #27]
    a9da:	2211      	movs	r2, #17
    a9dc:	4619      	mov	r1, r3
    a9de:	69f8      	ldr	r0, [r7, #28]
    a9e0:	4b5d      	ldr	r3, [pc, #372]	; (ab58 <_usb_d_dev_ep_enable+0x200>)
    a9e2:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a9e4:	697b      	ldr	r3, [r7, #20]
    a9e6:	8a1b      	ldrh	r3, [r3, #16]
    a9e8:	039b      	lsls	r3, r3, #14
    a9ea:	4c5c      	ldr	r4, [pc, #368]	; (ab5c <_usb_d_dev_ep_enable+0x204>)
    a9ec:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a9ee:	697b      	ldr	r3, [r7, #20]
    a9f0:	8a1b      	ldrh	r3, [r3, #16]
    a9f2:	4618      	mov	r0, r3
    a9f4:	4b5a      	ldr	r3, [pc, #360]	; (ab60 <_usb_d_dev_ep_enable+0x208>)
    a9f6:	4798      	blx	r3
    a9f8:	4603      	mov	r3, r0
    a9fa:	071b      	lsls	r3, r3, #28
    a9fc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    aa00:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    aa04:	68fb      	ldr	r3, [r7, #12]
    aa06:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    aa08:	68fb      	ldr	r3, [r7, #12]
    aa0a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    aa0e:	697b      	ldr	r3, [r7, #20]
    aa10:	8a1b      	ldrh	r3, [r3, #16]
    aa12:	f3c3 050d 	ubfx	r5, r3, #0, #14
    aa16:	697b      	ldr	r3, [r7, #20]
    aa18:	8a1b      	ldrh	r3, [r3, #16]
    aa1a:	4618      	mov	r0, r3
    aa1c:	4b50      	ldr	r3, [pc, #320]	; (ab60 <_usb_d_dev_ep_enable+0x208>)
    aa1e:	4798      	blx	r3
    aa20:	4603      	mov	r3, r0
    aa22:	071b      	lsls	r3, r3, #28
    aa24:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    aa28:	432b      	orrs	r3, r5
    aa2a:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    aa2c:	7efb      	ldrb	r3, [r7, #27]
    aa2e:	2200      	movs	r2, #0
    aa30:	2100      	movs	r1, #0
    aa32:	4618      	mov	r0, r3
    aa34:	4b4b      	ldr	r3, [pc, #300]	; (ab64 <_usb_d_dev_ep_enable+0x20c>)
    aa36:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    aa38:	7efb      	ldrb	r3, [r7, #27]
    aa3a:	2200      	movs	r2, #0
    aa3c:	2101      	movs	r1, #1
    aa3e:	4618      	mov	r0, r3
    aa40:	4b49      	ldr	r3, [pc, #292]	; (ab68 <_usb_d_dev_ep_enable+0x210>)
    aa42:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    aa44:	7efb      	ldrb	r3, [r7, #27]
    aa46:	2100      	movs	r1, #0
    aa48:	4618      	mov	r0, r3
    aa4a:	4b48      	ldr	r3, [pc, #288]	; (ab6c <_usb_d_dev_ep_enable+0x214>)
    aa4c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    aa4e:	7efb      	ldrb	r3, [r7, #27]
    aa50:	2101      	movs	r1, #1
    aa52:	4618      	mov	r0, r3
    aa54:	4b45      	ldr	r3, [pc, #276]	; (ab6c <_usb_d_dev_ep_enable+0x214>)
    aa56:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    aa58:	6978      	ldr	r0, [r7, #20]
    aa5a:	4b45      	ldr	r3, [pc, #276]	; (ab70 <_usb_d_dev_ep_enable+0x218>)
    aa5c:	4798      	blx	r3
    aa5e:	e06f      	b.n	ab40 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    aa60:	7ebb      	ldrb	r3, [r7, #26]
    aa62:	2b00      	cmp	r3, #0
    aa64:	d038      	beq.n	aad8 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    aa66:	7cfb      	ldrb	r3, [r7, #19]
    aa68:	f003 0370 	and.w	r3, r3, #112	; 0x70
    aa6c:	2b00      	cmp	r3, #0
    aa6e:	d002      	beq.n	aa76 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    aa70:	f06f 0313 	mvn.w	r3, #19
    aa74:	e065      	b.n	ab42 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    aa76:	697b      	ldr	r3, [r7, #20]
    aa78:	7cdb      	ldrb	r3, [r3, #19]
    aa7a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    aa7e:	b2db      	uxtb	r3, r3
    aa80:	011b      	lsls	r3, r3, #4
    aa82:	b2db      	uxtb	r3, r3
    aa84:	f003 0370 	and.w	r3, r3, #112	; 0x70
    aa88:	b2da      	uxtb	r2, r3
    aa8a:	7cfb      	ldrb	r3, [r7, #19]
    aa8c:	4313      	orrs	r3, r2
    aa8e:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    aa90:	7cfa      	ldrb	r2, [r7, #19]
    aa92:	7efb      	ldrb	r3, [r7, #27]
    aa94:	4619      	mov	r1, r3
    aa96:	69f8      	ldr	r0, [r7, #28]
    aa98:	4b2f      	ldr	r3, [pc, #188]	; (ab58 <_usb_d_dev_ep_enable+0x200>)
    aa9a:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    aa9c:	68fb      	ldr	r3, [r7, #12]
    aa9e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    aaa2:	697b      	ldr	r3, [r7, #20]
    aaa4:	8a1b      	ldrh	r3, [r3, #16]
    aaa6:	f3c3 050d 	ubfx	r5, r3, #0, #14
    aaaa:	697b      	ldr	r3, [r7, #20]
    aaac:	8a1b      	ldrh	r3, [r3, #16]
    aaae:	4618      	mov	r0, r3
    aab0:	4b2b      	ldr	r3, [pc, #172]	; (ab60 <_usb_d_dev_ep_enable+0x208>)
    aab2:	4798      	blx	r3
    aab4:	4603      	mov	r3, r0
    aab6:	071b      	lsls	r3, r3, #28
    aab8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    aabc:	432b      	orrs	r3, r5
    aabe:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    aac0:	7efb      	ldrb	r3, [r7, #27]
    aac2:	2200      	movs	r2, #0
    aac4:	2101      	movs	r1, #1
    aac6:	4618      	mov	r0, r3
    aac8:	4b27      	ldr	r3, [pc, #156]	; (ab68 <_usb_d_dev_ep_enable+0x210>)
    aaca:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    aacc:	7efb      	ldrb	r3, [r7, #27]
    aace:	2101      	movs	r1, #1
    aad0:	4618      	mov	r0, r3
    aad2:	4b26      	ldr	r3, [pc, #152]	; (ab6c <_usb_d_dev_ep_enable+0x214>)
    aad4:	4798      	blx	r3
    aad6:	e033      	b.n	ab40 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    aad8:	7cfb      	ldrb	r3, [r7, #19]
    aada:	f003 0307 	and.w	r3, r3, #7
    aade:	2b00      	cmp	r3, #0
    aae0:	d002      	beq.n	aae8 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    aae2:	f06f 0313 	mvn.w	r3, #19
    aae6:	e02c      	b.n	ab42 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    aae8:	697b      	ldr	r3, [r7, #20]
    aaea:	7cdb      	ldrb	r3, [r3, #19]
    aaec:	f3c3 0302 	ubfx	r3, r3, #0, #3
    aaf0:	b2db      	uxtb	r3, r3
    aaf2:	461a      	mov	r2, r3
    aaf4:	7cfb      	ldrb	r3, [r7, #19]
    aaf6:	4313      	orrs	r3, r2
    aaf8:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    aafa:	7cfa      	ldrb	r2, [r7, #19]
    aafc:	7efb      	ldrb	r3, [r7, #27]
    aafe:	4619      	mov	r1, r3
    ab00:	69f8      	ldr	r0, [r7, #28]
    ab02:	4b15      	ldr	r3, [pc, #84]	; (ab58 <_usb_d_dev_ep_enable+0x200>)
    ab04:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ab06:	697b      	ldr	r3, [r7, #20]
    ab08:	8a1b      	ldrh	r3, [r3, #16]
    ab0a:	039b      	lsls	r3, r3, #14
    ab0c:	4c13      	ldr	r4, [pc, #76]	; (ab5c <_usb_d_dev_ep_enable+0x204>)
    ab0e:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ab10:	697b      	ldr	r3, [r7, #20]
    ab12:	8a1b      	ldrh	r3, [r3, #16]
    ab14:	4618      	mov	r0, r3
    ab16:	4b12      	ldr	r3, [pc, #72]	; (ab60 <_usb_d_dev_ep_enable+0x208>)
    ab18:	4798      	blx	r3
    ab1a:	4603      	mov	r3, r0
    ab1c:	071b      	lsls	r3, r3, #28
    ab1e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ab22:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ab26:	68fb      	ldr	r3, [r7, #12]
    ab28:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    ab2a:	7efb      	ldrb	r3, [r7, #27]
    ab2c:	2200      	movs	r2, #0
    ab2e:	2100      	movs	r1, #0
    ab30:	4618      	mov	r0, r3
    ab32:	4b0c      	ldr	r3, [pc, #48]	; (ab64 <_usb_d_dev_ep_enable+0x20c>)
    ab34:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    ab36:	7efb      	ldrb	r3, [r7, #27]
    ab38:	2100      	movs	r1, #0
    ab3a:	4618      	mov	r0, r3
    ab3c:	4b0b      	ldr	r3, [pc, #44]	; (ab6c <_usb_d_dev_ep_enable+0x214>)
    ab3e:	4798      	blx	r3
	}

	return USB_OK;
    ab40:	2300      	movs	r3, #0
}
    ab42:	4618      	mov	r0, r3
    ab44:	3720      	adds	r7, #32
    ab46:	46bd      	mov	sp, r7
    ab48:	bdb0      	pop	{r4, r5, r7, pc}
    ab4a:	bf00      	nop
    ab4c:	00009771 	.word	0x00009771
    ab50:	00008df7 	.word	0x00008df7
    ab54:	20000cdc 	.word	0x20000cdc
    ab58:	00008dcd 	.word	0x00008dcd
    ab5c:	0fffc000 	.word	0x0fffc000
    ab60:	0000970d 	.word	0x0000970d
    ab64:	000096b5 	.word	0x000096b5
    ab68:	0000965d 	.word	0x0000965d
    ab6c:	00009625 	.word	0x00009625
    ab70:	0000a6c9 	.word	0x0000a6c9

0000ab74 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    ab74:	b580      	push	{r7, lr}
    ab76:	b084      	sub	sp, #16
    ab78:	af00      	add	r7, sp, #0
    ab7a:	6078      	str	r0, [r7, #4]
    ab7c:	460b      	mov	r3, r1
    ab7e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ab80:	687b      	ldr	r3, [r7, #4]
    ab82:	7c9b      	ldrb	r3, [r3, #18]
    ab84:	f003 030f 	and.w	r3, r3, #15
    ab88:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    ab8a:	78fa      	ldrb	r2, [r7, #3]
    ab8c:	7bfb      	ldrb	r3, [r7, #15]
    ab8e:	4611      	mov	r1, r2
    ab90:	4618      	mov	r0, r3
    ab92:	4b03      	ldr	r3, [pc, #12]	; (aba0 <_usb_d_dev_ep_stall_get+0x2c>)
    ab94:	4798      	blx	r3
    ab96:	4603      	mov	r3, r0
}
    ab98:	4618      	mov	r0, r3
    ab9a:	3710      	adds	r7, #16
    ab9c:	46bd      	mov	sp, r7
    ab9e:	bd80      	pop	{r7, pc}
    aba0:	00009265 	.word	0x00009265

0000aba4 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    aba4:	b580      	push	{r7, lr}
    aba6:	b084      	sub	sp, #16
    aba8:	af00      	add	r7, sp, #0
    abaa:	6078      	str	r0, [r7, #4]
    abac:	460b      	mov	r3, r1
    abae:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    abb0:	687b      	ldr	r3, [r7, #4]
    abb2:	7c9b      	ldrb	r3, [r3, #18]
    abb4:	f003 030f 	and.w	r3, r3, #15
    abb8:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    abba:	78f9      	ldrb	r1, [r7, #3]
    abbc:	7bfb      	ldrb	r3, [r7, #15]
    abbe:	2201      	movs	r2, #1
    abc0:	4618      	mov	r0, r3
    abc2:	4b0a      	ldr	r3, [pc, #40]	; (abec <_usb_d_dev_ep_stall_set+0x48>)
    abc4:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    abc6:	78fb      	ldrb	r3, [r7, #3]
    abc8:	2220      	movs	r2, #32
    abca:	409a      	lsls	r2, r3
    abcc:	7bfb      	ldrb	r3, [r7, #15]
    abce:	4611      	mov	r1, r2
    abd0:	4618      	mov	r0, r3
    abd2:	4b07      	ldr	r3, [pc, #28]	; (abf0 <_usb_d_dev_ep_stall_set+0x4c>)
    abd4:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    abd6:	687a      	ldr	r2, [r7, #4]
    abd8:	7cd3      	ldrb	r3, [r2, #19]
    abda:	f043 0308 	orr.w	r3, r3, #8
    abde:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    abe0:	2300      	movs	r3, #0
}
    abe2:	4618      	mov	r0, r3
    abe4:	3710      	adds	r7, #16
    abe6:	46bd      	mov	sp, r7
    abe8:	bd80      	pop	{r7, pc}
    abea:	bf00      	nop
    abec:	0000920d 	.word	0x0000920d
    abf0:	0000918d 	.word	0x0000918d

0000abf4 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    abf4:	b580      	push	{r7, lr}
    abf6:	b084      	sub	sp, #16
    abf8:	af00      	add	r7, sp, #0
    abfa:	6078      	str	r0, [r7, #4]
    abfc:	460b      	mov	r3, r1
    abfe:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    ac00:	687b      	ldr	r3, [r7, #4]
    ac02:	7c9b      	ldrb	r3, [r3, #18]
    ac04:	f003 030f 	and.w	r3, r3, #15
    ac08:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    ac0a:	78fa      	ldrb	r2, [r7, #3]
    ac0c:	7bfb      	ldrb	r3, [r7, #15]
    ac0e:	4611      	mov	r1, r2
    ac10:	4618      	mov	r0, r3
    ac12:	4b28      	ldr	r3, [pc, #160]	; (acb4 <_usb_d_dev_ep_stall_clr+0xc0>)
    ac14:	4798      	blx	r3
    ac16:	4603      	mov	r3, r0
    ac18:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    ac1a:	7bbb      	ldrb	r3, [r7, #14]
    ac1c:	f083 0301 	eor.w	r3, r3, #1
    ac20:	b2db      	uxtb	r3, r3
    ac22:	2b00      	cmp	r3, #0
    ac24:	d001      	beq.n	ac2a <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    ac26:	2300      	movs	r3, #0
    ac28:	e040      	b.n	acac <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    ac2a:	78f9      	ldrb	r1, [r7, #3]
    ac2c:	7bfb      	ldrb	r3, [r7, #15]
    ac2e:	2200      	movs	r2, #0
    ac30:	4618      	mov	r0, r3
    ac32:	4b21      	ldr	r3, [pc, #132]	; (acb8 <_usb_d_dev_ep_stall_clr+0xc4>)
    ac34:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    ac36:	78fb      	ldrb	r3, [r7, #3]
    ac38:	2220      	movs	r2, #32
    ac3a:	409a      	lsls	r2, r3
    ac3c:	7bfb      	ldrb	r3, [r7, #15]
    ac3e:	4611      	mov	r1, r2
    ac40:	4618      	mov	r0, r3
    ac42:	4b1e      	ldr	r3, [pc, #120]	; (acbc <_usb_d_dev_ep_stall_clr+0xc8>)
    ac44:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    ac46:	78fa      	ldrb	r2, [r7, #3]
    ac48:	7bfb      	ldrb	r3, [r7, #15]
    ac4a:	4611      	mov	r1, r2
    ac4c:	4618      	mov	r0, r3
    ac4e:	4b1c      	ldr	r3, [pc, #112]	; (acc0 <_usb_d_dev_ep_stall_clr+0xcc>)
    ac50:	4798      	blx	r3
    ac52:	4603      	mov	r3, r0
    ac54:	2b00      	cmp	r3, #0
    ac56:	d00b      	beq.n	ac70 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    ac58:	78fa      	ldrb	r2, [r7, #3]
    ac5a:	7bfb      	ldrb	r3, [r7, #15]
    ac5c:	4611      	mov	r1, r2
    ac5e:	4618      	mov	r0, r3
    ac60:	4b18      	ldr	r3, [pc, #96]	; (acc4 <_usb_d_dev_ep_stall_clr+0xd0>)
    ac62:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    ac64:	78f9      	ldrb	r1, [r7, #3]
    ac66:	7bfb      	ldrb	r3, [r7, #15]
    ac68:	2200      	movs	r2, #0
    ac6a:	4618      	mov	r0, r3
    ac6c:	4b16      	ldr	r3, [pc, #88]	; (acc8 <_usb_d_dev_ep_stall_clr+0xd4>)
    ac6e:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    ac70:	687b      	ldr	r3, [r7, #4]
    ac72:	7cdb      	ldrb	r3, [r3, #19]
    ac74:	f003 0307 	and.w	r3, r3, #7
    ac78:	b2db      	uxtb	r3, r3
    ac7a:	2b01      	cmp	r3, #1
    ac7c:	d110      	bne.n	aca0 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    ac7e:	7bfb      	ldrb	r3, [r7, #15]
    ac80:	4619      	mov	r1, r3
    ac82:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ac86:	4b11      	ldr	r3, [pc, #68]	; (accc <_usb_d_dev_ep_stall_clr+0xd8>)
    ac88:	4798      	blx	r3
    ac8a:	4603      	mov	r3, r0
    ac8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
    ac90:	2b00      	cmp	r3, #0
    ac92:	d10a      	bne.n	acaa <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    ac94:	687a      	ldr	r2, [r7, #4]
    ac96:	7cd3      	ldrb	r3, [r2, #19]
    ac98:	f36f 03c3 	bfc	r3, #3, #1
    ac9c:	74d3      	strb	r3, [r2, #19]
    ac9e:	e004      	b.n	acaa <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    aca0:	687a      	ldr	r2, [r7, #4]
    aca2:	7cd3      	ldrb	r3, [r2, #19]
    aca4:	f36f 03c3 	bfc	r3, #3, #1
    aca8:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    acaa:	2300      	movs	r3, #0
}
    acac:	4618      	mov	r0, r3
    acae:	3710      	adds	r7, #16
    acb0:	46bd      	mov	sp, r7
    acb2:	bd80      	pop	{r7, pc}
    acb4:	00009265 	.word	0x00009265
    acb8:	0000920d 	.word	0x0000920d
    acbc:	000091b5 	.word	0x000091b5
    acc0:	000092a9 	.word	0x000092a9
    acc4:	000092ed 	.word	0x000092ed
    acc8:	000093d9 	.word	0x000093d9
    accc:	00008c95 	.word	0x00008c95

0000acd0 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    acd0:	b580      	push	{r7, lr}
    acd2:	b086      	sub	sp, #24
    acd4:	af00      	add	r7, sp, #0
    acd6:	4603      	mov	r3, r0
    acd8:	460a      	mov	r2, r1
    acda:	71fb      	strb	r3, [r7, #7]
    acdc:	4613      	mov	r3, r2
    acde:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    ace0:	79fb      	ldrb	r3, [r7, #7]
    ace2:	f003 030f 	and.w	r3, r3, #15
    ace6:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    ace8:	79fb      	ldrb	r3, [r7, #7]
    acea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    acee:	2b00      	cmp	r3, #0
    acf0:	bf14      	ite	ne
    acf2:	2301      	movne	r3, #1
    acf4:	2300      	moveq	r3, #0
    acf6:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    acf8:	7cba      	ldrb	r2, [r7, #18]
    acfa:	7cfb      	ldrb	r3, [r7, #19]
    acfc:	4611      	mov	r1, r2
    acfe:	4618      	mov	r0, r3
    ad00:	4b13      	ldr	r3, [pc, #76]	; (ad50 <_usb_d_dev_ep_stall+0x80>)
    ad02:	4798      	blx	r3
    ad04:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    ad06:	7cfb      	ldrb	r3, [r7, #19]
    ad08:	2b04      	cmp	r3, #4
    ad0a:	d902      	bls.n	ad12 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    ad0c:	f06f 0311 	mvn.w	r3, #17
    ad10:	e01a      	b.n	ad48 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    ad12:	79bb      	ldrb	r3, [r7, #6]
    ad14:	2b01      	cmp	r3, #1
    ad16:	d106      	bne.n	ad26 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    ad18:	7cbb      	ldrb	r3, [r7, #18]
    ad1a:	4619      	mov	r1, r3
    ad1c:	68f8      	ldr	r0, [r7, #12]
    ad1e:	4b0d      	ldr	r3, [pc, #52]	; (ad54 <_usb_d_dev_ep_stall+0x84>)
    ad20:	4798      	blx	r3
    ad22:	6178      	str	r0, [r7, #20]
    ad24:	e00f      	b.n	ad46 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    ad26:	79bb      	ldrb	r3, [r7, #6]
    ad28:	2b00      	cmp	r3, #0
    ad2a:	d106      	bne.n	ad3a <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    ad2c:	7cbb      	ldrb	r3, [r7, #18]
    ad2e:	4619      	mov	r1, r3
    ad30:	68f8      	ldr	r0, [r7, #12]
    ad32:	4b09      	ldr	r3, [pc, #36]	; (ad58 <_usb_d_dev_ep_stall+0x88>)
    ad34:	4798      	blx	r3
    ad36:	6178      	str	r0, [r7, #20]
    ad38:	e005      	b.n	ad46 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    ad3a:	7cbb      	ldrb	r3, [r7, #18]
    ad3c:	4619      	mov	r1, r3
    ad3e:	68f8      	ldr	r0, [r7, #12]
    ad40:	4b06      	ldr	r3, [pc, #24]	; (ad5c <_usb_d_dev_ep_stall+0x8c>)
    ad42:	4798      	blx	r3
    ad44:	6178      	str	r0, [r7, #20]
	}
	return rc;
    ad46:	697b      	ldr	r3, [r7, #20]
}
    ad48:	4618      	mov	r0, r3
    ad4a:	3718      	adds	r7, #24
    ad4c:	46bd      	mov	sp, r7
    ad4e:	bd80      	pop	{r7, pc}
    ad50:	00009771 	.word	0x00009771
    ad54:	0000aba5 	.word	0x0000aba5
    ad58:	0000abf5 	.word	0x0000abf5
    ad5c:	0000ab75 	.word	0x0000ab75

0000ad60 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    ad60:	b580      	push	{r7, lr}
    ad62:	b082      	sub	sp, #8
    ad64:	af00      	add	r7, sp, #0
    ad66:	6078      	str	r0, [r7, #4]
    ad68:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    ad6a:	687b      	ldr	r3, [r7, #4]
    ad6c:	7c9b      	ldrb	r3, [r3, #18]
    ad6e:	2bff      	cmp	r3, #255	; 0xff
    ad70:	d014      	beq.n	ad9c <_usb_d_dev_trans_done+0x3c>
    ad72:	687b      	ldr	r3, [r7, #4]
    ad74:	7cdb      	ldrb	r3, [r3, #19]
    ad76:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ad7a:	b2db      	uxtb	r3, r3
    ad7c:	2b00      	cmp	r3, #0
    ad7e:	d00d      	beq.n	ad9c <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    ad80:	687a      	ldr	r2, [r7, #4]
    ad82:	7cd3      	ldrb	r3, [r2, #19]
    ad84:	f36f 1386 	bfc	r3, #6, #1
    ad88:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    ad8a:	4b06      	ldr	r3, [pc, #24]	; (ada4 <_usb_d_dev_trans_done+0x44>)
    ad8c:	691b      	ldr	r3, [r3, #16]
    ad8e:	687a      	ldr	r2, [r7, #4]
    ad90:	7c90      	ldrb	r0, [r2, #18]
    ad92:	687a      	ldr	r2, [r7, #4]
    ad94:	6892      	ldr	r2, [r2, #8]
    ad96:	6839      	ldr	r1, [r7, #0]
    ad98:	4798      	blx	r3
    ad9a:	e000      	b.n	ad9e <_usb_d_dev_trans_done+0x3e>
		return;
    ad9c:	bf00      	nop
}
    ad9e:	3708      	adds	r7, #8
    ada0:	46bd      	mov	sp, r7
    ada2:	bd80      	pop	{r7, pc}
    ada4:	20000c14 	.word	0x20000c14

0000ada8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    ada8:	b580      	push	{r7, lr}
    adaa:	b086      	sub	sp, #24
    adac:	af00      	add	r7, sp, #0
    adae:	60f8      	str	r0, [r7, #12]
    adb0:	460b      	mov	r3, r1
    adb2:	607a      	str	r2, [r7, #4]
    adb4:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    adb6:	68fb      	ldr	r3, [r7, #12]
    adb8:	7c9b      	ldrb	r3, [r3, #18]
    adba:	f003 030f 	and.w	r3, r3, #15
    adbe:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    adc0:	4b1f      	ldr	r3, [pc, #124]	; (ae40 <_usb_d_dev_trans_stop+0x98>)
    adc2:	881b      	ldrh	r3, [r3, #0]
    adc4:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    adc6:	68fb      	ldr	r3, [r7, #12]
    adc8:	7c9b      	ldrb	r3, [r3, #18]
    adca:	2bff      	cmp	r3, #255	; 0xff
    adcc:	d033      	beq.n	ae36 <_usb_d_dev_trans_stop+0x8e>
    adce:	68fb      	ldr	r3, [r7, #12]
    add0:	7cdb      	ldrb	r3, [r3, #19]
    add2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    add6:	b2db      	uxtb	r3, r3
    add8:	2b00      	cmp	r3, #0
    adda:	d02c      	beq.n	ae36 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    addc:	7afb      	ldrb	r3, [r7, #11]
    adde:	2b00      	cmp	r3, #0
    ade0:	d006      	beq.n	adf0 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    ade2:	7dfb      	ldrb	r3, [r7, #23]
    ade4:	2200      	movs	r2, #0
    ade6:	2101      	movs	r1, #1
    ade8:	4618      	mov	r0, r3
    adea:	4b16      	ldr	r3, [pc, #88]	; (ae44 <_usb_d_dev_trans_stop+0x9c>)
    adec:	4798      	blx	r3
    adee:	e005      	b.n	adfc <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    adf0:	7dfb      	ldrb	r3, [r7, #23]
    adf2:	2200      	movs	r2, #0
    adf4:	2100      	movs	r1, #0
    adf6:	4618      	mov	r0, r3
    adf8:	4b13      	ldr	r3, [pc, #76]	; (ae48 <_usb_d_dev_trans_stop+0xa0>)
    adfa:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    adfc:	7afb      	ldrb	r3, [r7, #11]
    adfe:	f107 0218 	add.w	r2, r7, #24
    ae02:	4413      	add	r3, r2
    ae04:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    ae08:	461a      	mov	r2, r3
    ae0a:	7dfb      	ldrb	r3, [r7, #23]
    ae0c:	4611      	mov	r1, r2
    ae0e:	4618      	mov	r0, r3
    ae10:	4b0e      	ldr	r3, [pc, #56]	; (ae4c <_usb_d_dev_trans_stop+0xa4>)
    ae12:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    ae14:	7afb      	ldrb	r3, [r7, #11]
    ae16:	f107 0218 	add.w	r2, r7, #24
    ae1a:	4413      	add	r3, r2
    ae1c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    ae20:	461a      	mov	r2, r3
    ae22:	7dfb      	ldrb	r3, [r7, #23]
    ae24:	4611      	mov	r1, r2
    ae26:	4618      	mov	r0, r3
    ae28:	4b09      	ldr	r3, [pc, #36]	; (ae50 <_usb_d_dev_trans_stop+0xa8>)
    ae2a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    ae2c:	6879      	ldr	r1, [r7, #4]
    ae2e:	68f8      	ldr	r0, [r7, #12]
    ae30:	4b08      	ldr	r3, [pc, #32]	; (ae54 <_usb_d_dev_trans_stop+0xac>)
    ae32:	4798      	blx	r3
    ae34:	e000      	b.n	ae38 <_usb_d_dev_trans_stop+0x90>
		return;
    ae36:	bf00      	nop
}
    ae38:	3718      	adds	r7, #24
    ae3a:	46bd      	mov	sp, r7
    ae3c:	bd80      	pop	{r7, pc}
    ae3e:	bf00      	nop
    ae40:	0000f640 	.word	0x0000f640
    ae44:	0000965d 	.word	0x0000965d
    ae48:	000096b5 	.word	0x000096b5
    ae4c:	00009165 	.word	0x00009165
    ae50:	000091b5 	.word	0x000091b5
    ae54:	0000ad61 	.word	0x0000ad61

0000ae58 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    ae58:	b580      	push	{r7, lr}
    ae5a:	b086      	sub	sp, #24
    ae5c:	af00      	add	r7, sp, #0
    ae5e:	4603      	mov	r3, r0
    ae60:	6039      	str	r1, [r7, #0]
    ae62:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    ae64:	79fb      	ldrb	r3, [r7, #7]
    ae66:	f003 030f 	and.w	r3, r3, #15
    ae6a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    ae6c:	7dfb      	ldrb	r3, [r7, #23]
    ae6e:	015b      	lsls	r3, r3, #5
    ae70:	4a1e      	ldr	r2, [pc, #120]	; (aeec <_usb_d_dev_ep_read_req+0x94>)
    ae72:	4413      	add	r3, r2
    ae74:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    ae76:	693b      	ldr	r3, [r7, #16]
    ae78:	681b      	ldr	r3, [r3, #0]
    ae7a:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    ae7c:	693b      	ldr	r3, [r7, #16]
    ae7e:	685b      	ldr	r3, [r3, #4]
    ae80:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ae84:	b29b      	uxth	r3, r3
    ae86:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    ae88:	7dfb      	ldrb	r3, [r7, #23]
    ae8a:	2b04      	cmp	r3, #4
    ae8c:	d802      	bhi.n	ae94 <_usb_d_dev_ep_read_req+0x3c>
    ae8e:	683b      	ldr	r3, [r7, #0]
    ae90:	2b00      	cmp	r3, #0
    ae92:	d102      	bne.n	ae9a <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    ae94:	f06f 0311 	mvn.w	r3, #17
    ae98:	e023      	b.n	aee2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    ae9a:	7dfb      	ldrb	r3, [r7, #23]
    ae9c:	4618      	mov	r0, r3
    ae9e:	4b14      	ldr	r3, [pc, #80]	; (aef0 <_usb_d_dev_ep_read_req+0x98>)
    aea0:	4798      	blx	r3
    aea2:	4603      	mov	r3, r0
    aea4:	f083 0301 	eor.w	r3, r3, #1
    aea8:	b2db      	uxtb	r3, r3
    aeaa:	2b00      	cmp	r3, #0
    aeac:	d002      	beq.n	aeb4 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    aeae:	f06f 0312 	mvn.w	r3, #18
    aeb2:	e016      	b.n	aee2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    aeb4:	7dfb      	ldrb	r3, [r7, #23]
    aeb6:	4618      	mov	r0, r3
    aeb8:	4b0e      	ldr	r3, [pc, #56]	; (aef4 <_usb_d_dev_ep_read_req+0x9c>)
    aeba:	4798      	blx	r3
    aebc:	4603      	mov	r3, r0
    aebe:	f083 0301 	eor.w	r3, r3, #1
    aec2:	b2db      	uxtb	r3, r3
    aec4:	2b00      	cmp	r3, #0
    aec6:	d001      	beq.n	aecc <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    aec8:	2300      	movs	r3, #0
    aeca:	e00a      	b.n	aee2 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    aecc:	68fb      	ldr	r3, [r7, #12]
    aece:	2208      	movs	r2, #8
    aed0:	4619      	mov	r1, r3
    aed2:	6838      	ldr	r0, [r7, #0]
    aed4:	4b08      	ldr	r3, [pc, #32]	; (aef8 <_usb_d_dev_ep_read_req+0xa0>)
    aed6:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    aed8:	7dfb      	ldrb	r3, [r7, #23]
    aeda:	4618      	mov	r0, r3
    aedc:	4b07      	ldr	r3, [pc, #28]	; (aefc <_usb_d_dev_ep_read_req+0xa4>)
    aede:	4798      	blx	r3

	return bytes;
    aee0:	897b      	ldrh	r3, [r7, #10]
}
    aee2:	4618      	mov	r0, r3
    aee4:	3718      	adds	r7, #24
    aee6:	46bd      	mov	sp, r7
    aee8:	bd80      	pop	{r7, pc}
    aeea:	bf00      	nop
    aeec:	20000cdc 	.word	0x20000cdc
    aef0:	000091dd 	.word	0x000091dd
    aef4:	00009389 	.word	0x00009389
    aef8:	0000ed79 	.word	0x0000ed79
    aefc:	000093b9 	.word	0x000093b9

0000af00 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    af00:	b580      	push	{r7, lr}
    af02:	b086      	sub	sp, #24
    af04:	af00      	add	r7, sp, #0
    af06:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    af08:	687b      	ldr	r3, [r7, #4]
    af0a:	7a1b      	ldrb	r3, [r3, #8]
    af0c:	f003 030f 	and.w	r3, r3, #15
    af10:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    af12:	687b      	ldr	r3, [r7, #4]
    af14:	7a1b      	ldrb	r3, [r3, #8]
    af16:	f003 0380 	and.w	r3, r3, #128	; 0x80
    af1a:	2b00      	cmp	r3, #0
    af1c:	bf14      	ite	ne
    af1e:	2301      	movne	r3, #1
    af20:	2300      	moveq	r3, #0
    af22:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    af24:	7d7a      	ldrb	r2, [r7, #21]
    af26:	7dbb      	ldrb	r3, [r7, #22]
    af28:	4611      	mov	r1, r2
    af2a:	4618      	mov	r0, r3
    af2c:	4b5f      	ldr	r3, [pc, #380]	; (b0ac <_usb_d_dev_ep_trans+0x1ac>)
    af2e:	4798      	blx	r3
    af30:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    af32:	693b      	ldr	r3, [r7, #16]
    af34:	8a1b      	ldrh	r3, [r3, #16]
    af36:	f240 32ff 	movw	r2, #1023	; 0x3ff
    af3a:	4293      	cmp	r3, r2
    af3c:	d004      	beq.n	af48 <_usb_d_dev_ep_trans+0x48>
    af3e:	693b      	ldr	r3, [r7, #16]
    af40:	8a1b      	ldrh	r3, [r3, #16]
    af42:	3b01      	subs	r3, #1
    af44:	b29b      	uxth	r3, r3
    af46:	e001      	b.n	af4c <_usb_d_dev_ep_trans+0x4c>
    af48:	f240 33ff 	movw	r3, #1023	; 0x3ff
    af4c:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    af4e:	687b      	ldr	r3, [r7, #4]
    af50:	685a      	ldr	r2, [r3, #4]
    af52:	89fb      	ldrh	r3, [r7, #14]
    af54:	4013      	ands	r3, r2
    af56:	2b00      	cmp	r3, #0
    af58:	bf14      	ite	ne
    af5a:	2301      	movne	r3, #1
    af5c:	2300      	moveq	r3, #0
    af5e:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    af60:	2300      	movs	r3, #0
    af62:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    af64:	7dbb      	ldrb	r3, [r7, #22]
    af66:	2b04      	cmp	r3, #4
    af68:	d902      	bls.n	af70 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    af6a:	f06f 0311 	mvn.w	r3, #17
    af6e:	e098      	b.n	b0a2 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    af70:	687b      	ldr	r3, [r7, #4]
    af72:	681b      	ldr	r3, [r3, #0]
    af74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    af78:	d31a      	bcc.n	afb0 <_usb_d_dev_ep_trans+0xb0>
    af7a:	687b      	ldr	r3, [r7, #4]
    af7c:	681b      	ldr	r3, [r3, #0]
    af7e:	461a      	mov	r2, r3
    af80:	687b      	ldr	r3, [r7, #4]
    af82:	685b      	ldr	r3, [r3, #4]
    af84:	4413      	add	r3, r2
    af86:	4a4a      	ldr	r2, [pc, #296]	; (b0b0 <_usb_d_dev_ep_trans+0x1b0>)
    af88:	4293      	cmp	r3, r2
    af8a:	d811      	bhi.n	afb0 <_usb_d_dev_ep_trans+0xb0>
    af8c:	687b      	ldr	r3, [r7, #4]
    af8e:	681b      	ldr	r3, [r3, #0]
    af90:	f003 0303 	and.w	r3, r3, #3
    af94:	2b00      	cmp	r3, #0
    af96:	d10b      	bne.n	afb0 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    af98:	7d7b      	ldrb	r3, [r7, #21]
    af9a:	f083 0301 	eor.w	r3, r3, #1
    af9e:	b2db      	uxtb	r3, r3
    afa0:	2b00      	cmp	r3, #0
    afa2:	d00e      	beq.n	afc2 <_usb_d_dev_ep_trans+0xc2>
    afa4:	687b      	ldr	r3, [r7, #4]
    afa6:	685b      	ldr	r3, [r3, #4]
    afa8:	693a      	ldr	r2, [r7, #16]
    afaa:	8a12      	ldrh	r2, [r2, #16]
    afac:	4293      	cmp	r3, r2
    afae:	d208      	bcs.n	afc2 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    afb0:	693b      	ldr	r3, [r7, #16]
    afb2:	68db      	ldr	r3, [r3, #12]
    afb4:	2b00      	cmp	r3, #0
    afb6:	d102      	bne.n	afbe <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    afb8:	f06f 0312 	mvn.w	r3, #18
    afbc:	e071      	b.n	b0a2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    afbe:	2301      	movs	r3, #1
    afc0:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    afc2:	7d7b      	ldrb	r3, [r7, #21]
    afc4:	f083 0301 	eor.w	r3, r3, #1
    afc8:	b2db      	uxtb	r3, r3
    afca:	2b00      	cmp	r3, #0
    afcc:	d009      	beq.n	afe2 <_usb_d_dev_ep_trans+0xe2>
    afce:	7b7b      	ldrb	r3, [r7, #13]
    afd0:	2b00      	cmp	r3, #0
    afd2:	d006      	beq.n	afe2 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    afd4:	693b      	ldr	r3, [r7, #16]
    afd6:	68db      	ldr	r3, [r3, #12]
    afd8:	2b00      	cmp	r3, #0
    afda:	d102      	bne.n	afe2 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    afdc:	f06f 0311 	mvn.w	r3, #17
    afe0:	e05f      	b.n	b0a2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    afe2:	693b      	ldr	r3, [r7, #16]
    afe4:	7cdb      	ldrb	r3, [r3, #19]
    afe6:	f003 0308 	and.w	r3, r3, #8
    afea:	b2db      	uxtb	r3, r3
    afec:	2b00      	cmp	r3, #0
    afee:	d001      	beq.n	aff4 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    aff0:	2302      	movs	r3, #2
    aff2:	e056      	b.n	b0a2 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    aff4:	f107 0308 	add.w	r3, r7, #8
    aff8:	4618      	mov	r0, r3
    affa:	4b2e      	ldr	r3, [pc, #184]	; (b0b4 <_usb_d_dev_ep_trans+0x1b4>)
    affc:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    affe:	693b      	ldr	r3, [r7, #16]
    b000:	7cdb      	ldrb	r3, [r3, #19]
    b002:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b006:	b2db      	uxtb	r3, r3
    b008:	2b00      	cmp	r3, #0
    b00a:	d006      	beq.n	b01a <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    b00c:	f107 0308 	add.w	r3, r7, #8
    b010:	4618      	mov	r0, r3
    b012:	4b29      	ldr	r3, [pc, #164]	; (b0b8 <_usb_d_dev_ep_trans+0x1b8>)
    b014:	4798      	blx	r3
		return USB_BUSY;
    b016:	2301      	movs	r3, #1
    b018:	e043      	b.n	b0a2 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    b01a:	693a      	ldr	r2, [r7, #16]
    b01c:	7cd3      	ldrb	r3, [r2, #19]
    b01e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b022:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    b024:	f107 0308 	add.w	r3, r7, #8
    b028:	4618      	mov	r0, r3
    b02a:	4b23      	ldr	r3, [pc, #140]	; (b0b8 <_usb_d_dev_ep_trans+0x1b8>)
    b02c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    b02e:	687b      	ldr	r3, [r7, #4]
    b030:	681a      	ldr	r2, [r3, #0]
    b032:	693b      	ldr	r3, [r7, #16]
    b034:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    b036:	687b      	ldr	r3, [r7, #4]
    b038:	685a      	ldr	r2, [r3, #4]
    b03a:	693b      	ldr	r3, [r7, #16]
    b03c:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    b03e:	693b      	ldr	r3, [r7, #16]
    b040:	2200      	movs	r2, #0
    b042:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    b044:	693a      	ldr	r2, [r7, #16]
    b046:	7cd3      	ldrb	r3, [r2, #19]
    b048:	7d79      	ldrb	r1, [r7, #21]
    b04a:	f361 13c7 	bfi	r3, r1, #7, #1
    b04e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    b050:	693a      	ldr	r2, [r7, #16]
    b052:	7cd3      	ldrb	r3, [r2, #19]
    b054:	7df9      	ldrb	r1, [r7, #23]
    b056:	f361 1345 	bfi	r3, r1, #5, #1
    b05a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    b05c:	687b      	ldr	r3, [r7, #4]
    b05e:	7a5b      	ldrb	r3, [r3, #9]
    b060:	2b00      	cmp	r3, #0
    b062:	d007      	beq.n	b074 <_usb_d_dev_ep_trans+0x174>
    b064:	7b7b      	ldrb	r3, [r7, #13]
    b066:	f083 0301 	eor.w	r3, r3, #1
    b06a:	b2db      	uxtb	r3, r3
    b06c:	2b00      	cmp	r3, #0
    b06e:	d001      	beq.n	b074 <_usb_d_dev_ep_trans+0x174>
    b070:	2301      	movs	r3, #1
    b072:	e000      	b.n	b076 <_usb_d_dev_ep_trans+0x176>
    b074:	2300      	movs	r3, #0
    b076:	b2db      	uxtb	r3, r3
    b078:	f003 0301 	and.w	r3, r3, #1
    b07c:	b2d9      	uxtb	r1, r3
    b07e:	693a      	ldr	r2, [r7, #16]
    b080:	7cd3      	ldrb	r3, [r2, #19]
    b082:	f361 1304 	bfi	r3, r1, #4, #1
    b086:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    b088:	7d7b      	ldrb	r3, [r7, #21]
    b08a:	2b00      	cmp	r3, #0
    b08c:	d004      	beq.n	b098 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    b08e:	2100      	movs	r1, #0
    b090:	6938      	ldr	r0, [r7, #16]
    b092:	4b0a      	ldr	r3, [pc, #40]	; (b0bc <_usb_d_dev_ep_trans+0x1bc>)
    b094:	4798      	blx	r3
    b096:	e003      	b.n	b0a0 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    b098:	2100      	movs	r1, #0
    b09a:	6938      	ldr	r0, [r7, #16]
    b09c:	4b08      	ldr	r3, [pc, #32]	; (b0c0 <_usb_d_dev_ep_trans+0x1c0>)
    b09e:	4798      	blx	r3
	}

	return ERR_NONE;
    b0a0:	2300      	movs	r3, #0
}
    b0a2:	4618      	mov	r0, r3
    b0a4:	3718      	adds	r7, #24
    b0a6:	46bd      	mov	sp, r7
    b0a8:	bd80      	pop	{r7, pc}
    b0aa:	bf00      	nop
    b0ac:	00009771 	.word	0x00009771
    b0b0:	20041fff 	.word	0x20041fff
    b0b4:	0000b8cd 	.word	0x0000b8cd
    b0b8:	0000b8f3 	.word	0x0000b8f3
    b0bc:	00009a39 	.word	0x00009a39
    b0c0:	00009c51 	.word	0x00009c51

0000b0c4 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    b0c4:	b580      	push	{r7, lr}
    b0c6:	b084      	sub	sp, #16
    b0c8:	af00      	add	r7, sp, #0
    b0ca:	4603      	mov	r3, r0
    b0cc:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    b0ce:	79fb      	ldrb	r3, [r7, #7]
    b0d0:	f003 030f 	and.w	r3, r3, #15
    b0d4:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    b0d6:	79fb      	ldrb	r3, [r7, #7]
    b0d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b0dc:	2b00      	cmp	r3, #0
    b0de:	bf14      	ite	ne
    b0e0:	2301      	movne	r3, #1
    b0e2:	2300      	moveq	r3, #0
    b0e4:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b0e6:	7bba      	ldrb	r2, [r7, #14]
    b0e8:	7bfb      	ldrb	r3, [r7, #15]
    b0ea:	4611      	mov	r1, r2
    b0ec:	4618      	mov	r0, r3
    b0ee:	4b08      	ldr	r3, [pc, #32]	; (b110 <_usb_d_dev_ep_abort+0x4c>)
    b0f0:	4798      	blx	r3
    b0f2:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    b0f4:	7bfb      	ldrb	r3, [r7, #15]
    b0f6:	2b04      	cmp	r3, #4
    b0f8:	d806      	bhi.n	b108 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    b0fa:	7bbb      	ldrb	r3, [r7, #14]
    b0fc:	2202      	movs	r2, #2
    b0fe:	4619      	mov	r1, r3
    b100:	68b8      	ldr	r0, [r7, #8]
    b102:	4b04      	ldr	r3, [pc, #16]	; (b114 <_usb_d_dev_ep_abort+0x50>)
    b104:	4798      	blx	r3
    b106:	e000      	b.n	b10a <_usb_d_dev_ep_abort+0x46>
		return;
    b108:	bf00      	nop
}
    b10a:	3710      	adds	r7, #16
    b10c:	46bd      	mov	sp, r7
    b10e:	bd80      	pop	{r7, pc}
    b110:	00009771 	.word	0x00009771
    b114:	0000ada9 	.word	0x0000ada9

0000b118 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    b118:	b480      	push	{r7}
    b11a:	b085      	sub	sp, #20
    b11c:	af00      	add	r7, sp, #0
    b11e:	4603      	mov	r3, r0
    b120:	6039      	str	r1, [r7, #0]
    b122:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b124:	683b      	ldr	r3, [r7, #0]
    b126:	2b00      	cmp	r3, #0
    b128:	d001      	beq.n	b12e <_usb_d_dev_register_callback+0x16>
    b12a:	683b      	ldr	r3, [r7, #0]
    b12c:	e000      	b.n	b130 <_usb_d_dev_register_callback+0x18>
    b12e:	4b0a      	ldr	r3, [pc, #40]	; (b158 <_usb_d_dev_register_callback+0x40>)
    b130:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    b132:	79fb      	ldrb	r3, [r7, #7]
    b134:	2b01      	cmp	r3, #1
    b136:	d103      	bne.n	b140 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    b138:	4a08      	ldr	r2, [pc, #32]	; (b15c <_usb_d_dev_register_callback+0x44>)
    b13a:	68fb      	ldr	r3, [r7, #12]
    b13c:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    b13e:	e005      	b.n	b14c <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    b140:	79fb      	ldrb	r3, [r7, #7]
    b142:	2b00      	cmp	r3, #0
    b144:	d102      	bne.n	b14c <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    b146:	4a05      	ldr	r2, [pc, #20]	; (b15c <_usb_d_dev_register_callback+0x44>)
    b148:	68fb      	ldr	r3, [r7, #12]
    b14a:	6013      	str	r3, [r2, #0]
}
    b14c:	bf00      	nop
    b14e:	3714      	adds	r7, #20
    b150:	46bd      	mov	sp, r7
    b152:	f85d 7b04 	ldr.w	r7, [sp], #4
    b156:	4770      	bx	lr
    b158:	00008ff9 	.word	0x00008ff9
    b15c:	20000c14 	.word	0x20000c14

0000b160 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    b160:	b480      	push	{r7}
    b162:	b085      	sub	sp, #20
    b164:	af00      	add	r7, sp, #0
    b166:	4603      	mov	r3, r0
    b168:	6039      	str	r1, [r7, #0]
    b16a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b16c:	683b      	ldr	r3, [r7, #0]
    b16e:	2b00      	cmp	r3, #0
    b170:	d001      	beq.n	b176 <_usb_d_dev_register_ep_callback+0x16>
    b172:	683b      	ldr	r3, [r7, #0]
    b174:	e000      	b.n	b178 <_usb_d_dev_register_ep_callback+0x18>
    b176:	4b0e      	ldr	r3, [pc, #56]	; (b1b0 <_usb_d_dev_register_ep_callback+0x50>)
    b178:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    b17a:	79fb      	ldrb	r3, [r7, #7]
    b17c:	2b00      	cmp	r3, #0
    b17e:	d103      	bne.n	b188 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    b180:	4a0c      	ldr	r2, [pc, #48]	; (b1b4 <_usb_d_dev_register_ep_callback+0x54>)
    b182:	68fb      	ldr	r3, [r7, #12]
    b184:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    b186:	e00c      	b.n	b1a2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    b188:	79fb      	ldrb	r3, [r7, #7]
    b18a:	2b01      	cmp	r3, #1
    b18c:	d103      	bne.n	b196 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    b18e:	4a09      	ldr	r2, [pc, #36]	; (b1b4 <_usb_d_dev_register_ep_callback+0x54>)
    b190:	68fb      	ldr	r3, [r7, #12]
    b192:	60d3      	str	r3, [r2, #12]
}
    b194:	e005      	b.n	b1a2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    b196:	79fb      	ldrb	r3, [r7, #7]
    b198:	2b02      	cmp	r3, #2
    b19a:	d102      	bne.n	b1a2 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    b19c:	4a05      	ldr	r2, [pc, #20]	; (b1b4 <_usb_d_dev_register_ep_callback+0x54>)
    b19e:	68fb      	ldr	r3, [r7, #12]
    b1a0:	6113      	str	r3, [r2, #16]
}
    b1a2:	bf00      	nop
    b1a4:	3714      	adds	r7, #20
    b1a6:	46bd      	mov	sp, r7
    b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1ac:	4770      	bx	lr
    b1ae:	bf00      	nop
    b1b0:	00008ff9 	.word	0x00008ff9
    b1b4:	20000c14 	.word	0x20000c14

0000b1b8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    b1b8:	b580      	push	{r7, lr}
    b1ba:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b1bc:	4b01      	ldr	r3, [pc, #4]	; (b1c4 <USB_0_Handler+0xc>)
    b1be:	4798      	blx	r3
}
    b1c0:	bf00      	nop
    b1c2:	bd80      	pop	{r7, pc}
    b1c4:	0000a429 	.word	0x0000a429

0000b1c8 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    b1c8:	b580      	push	{r7, lr}
    b1ca:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b1cc:	4b01      	ldr	r3, [pc, #4]	; (b1d4 <USB_1_Handler+0xc>)
    b1ce:	4798      	blx	r3
}
    b1d0:	bf00      	nop
    b1d2:	bd80      	pop	{r7, pc}
    b1d4:	0000a429 	.word	0x0000a429

0000b1d8 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    b1d8:	b580      	push	{r7, lr}
    b1da:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b1dc:	4b01      	ldr	r3, [pc, #4]	; (b1e4 <USB_2_Handler+0xc>)
    b1de:	4798      	blx	r3
}
    b1e0:	bf00      	nop
    b1e2:	bd80      	pop	{r7, pc}
    b1e4:	0000a429 	.word	0x0000a429

0000b1e8 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    b1e8:	b580      	push	{r7, lr}
    b1ea:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b1ec:	4b01      	ldr	r3, [pc, #4]	; (b1f4 <USB_3_Handler+0xc>)
    b1ee:	4798      	blx	r3
}
    b1f0:	bf00      	nop
    b1f2:	bd80      	pop	{r7, pc}
    b1f4:	0000a429 	.word	0x0000a429

0000b1f8 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    b1f8:	b480      	push	{r7}
    b1fa:	b083      	sub	sp, #12
    b1fc:	af00      	add	r7, sp, #0
    b1fe:	6078      	str	r0, [r7, #4]
    b200:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b202:	bf00      	nop
    b204:	687b      	ldr	r3, [r7, #4]
    b206:	689a      	ldr	r2, [r3, #8]
    b208:	683b      	ldr	r3, [r7, #0]
    b20a:	4013      	ands	r3, r2
    b20c:	2b00      	cmp	r3, #0
    b20e:	d1f9      	bne.n	b204 <hri_wdt_wait_for_sync+0xc>
	};
}
    b210:	bf00      	nop
    b212:	370c      	adds	r7, #12
    b214:	46bd      	mov	sp, r7
    b216:	f85d 7b04 	ldr.w	r7, [sp], #4
    b21a:	4770      	bx	lr

0000b21c <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b21c:	b580      	push	{r7, lr}
    b21e:	b084      	sub	sp, #16
    b220:	af00      	add	r7, sp, #0
    b222:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b224:	210e      	movs	r1, #14
    b226:	6878      	ldr	r0, [r7, #4]
    b228:	4b0a      	ldr	r3, [pc, #40]	; (b254 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    b22a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b22c:	687b      	ldr	r3, [r7, #4]
    b22e:	781b      	ldrb	r3, [r3, #0]
    b230:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    b232:	7bfb      	ldrb	r3, [r7, #15]
    b234:	085b      	lsrs	r3, r3, #1
    b236:	b2db      	uxtb	r3, r3
    b238:	f003 0301 	and.w	r3, r3, #1
    b23c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b23e:	7bfb      	ldrb	r3, [r7, #15]
    b240:	2b00      	cmp	r3, #0
    b242:	bf14      	ite	ne
    b244:	2301      	movne	r3, #1
    b246:	2300      	moveq	r3, #0
    b248:	b2db      	uxtb	r3, r3
}
    b24a:	4618      	mov	r0, r3
    b24c:	3710      	adds	r7, #16
    b24e:	46bd      	mov	sp, r7
    b250:	bd80      	pop	{r7, pc}
    b252:	bf00      	nop
    b254:	0000b1f9 	.word	0x0000b1f9

0000b258 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    b258:	b580      	push	{r7, lr}
    b25a:	b082      	sub	sp, #8
    b25c:	af00      	add	r7, sp, #0
    b25e:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    b260:	687b      	ldr	r3, [r7, #4]
    b262:	781b      	ldrb	r3, [r3, #0]
    b264:	b2db      	uxtb	r3, r3
    b266:	f023 0304 	bic.w	r3, r3, #4
    b26a:	b2da      	uxtb	r2, r3
    b26c:	687b      	ldr	r3, [r7, #4]
    b26e:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b270:	210e      	movs	r1, #14
    b272:	6878      	ldr	r0, [r7, #4]
    b274:	4b02      	ldr	r3, [pc, #8]	; (b280 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    b276:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    b278:	bf00      	nop
    b27a:	3708      	adds	r7, #8
    b27c:	46bd      	mov	sp, r7
    b27e:	bd80      	pop	{r7, pc}
    b280:	0000b1f9 	.word	0x0000b1f9

0000b284 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    b284:	b580      	push	{r7, lr}
    b286:	b084      	sub	sp, #16
    b288:	af00      	add	r7, sp, #0
    b28a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b28c:	210e      	movs	r1, #14
    b28e:	6878      	ldr	r0, [r7, #4]
    b290:	4b08      	ldr	r3, [pc, #32]	; (b2b4 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    b292:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b294:	687b      	ldr	r3, [r7, #4]
    b296:	781b      	ldrb	r3, [r3, #0]
    b298:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    b29a:	7bfb      	ldrb	r3, [r7, #15]
    b29c:	09db      	lsrs	r3, r3, #7
    b29e:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b2a0:	7bfb      	ldrb	r3, [r7, #15]
    b2a2:	2b00      	cmp	r3, #0
    b2a4:	bf14      	ite	ne
    b2a6:	2301      	movne	r3, #1
    b2a8:	2300      	moveq	r3, #0
    b2aa:	b2db      	uxtb	r3, r3
}
    b2ac:	4618      	mov	r0, r3
    b2ae:	3710      	adds	r7, #16
    b2b0:	46bd      	mov	sp, r7
    b2b2:	bd80      	pop	{r7, pc}
    b2b4:	0000b1f9 	.word	0x0000b1f9

0000b2b8 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    b2b8:	b480      	push	{r7}
    b2ba:	b085      	sub	sp, #20
    b2bc:	af00      	add	r7, sp, #0
    b2be:	6078      	str	r0, [r7, #4]
    b2c0:	460b      	mov	r3, r1
    b2c2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    b2c4:	687b      	ldr	r3, [r7, #4]
    b2c6:	785b      	ldrb	r3, [r3, #1]
    b2c8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    b2ca:	7bfb      	ldrb	r3, [r7, #15]
    b2cc:	f023 030f 	bic.w	r3, r3, #15
    b2d0:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    b2d2:	78fb      	ldrb	r3, [r7, #3]
    b2d4:	f003 030f 	and.w	r3, r3, #15
    b2d8:	b2da      	uxtb	r2, r3
    b2da:	7bfb      	ldrb	r3, [r7, #15]
    b2dc:	4313      	orrs	r3, r2
    b2de:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    b2e0:	687b      	ldr	r3, [r7, #4]
    b2e2:	7bfa      	ldrb	r2, [r7, #15]
    b2e4:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    b2e6:	bf00      	nop
    b2e8:	3714      	adds	r7, #20
    b2ea:	46bd      	mov	sp, r7
    b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2f0:	4770      	bx	lr
	...

0000b2f4 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    b2f4:	b580      	push	{r7, lr}
    b2f6:	b082      	sub	sp, #8
    b2f8:	af00      	add	r7, sp, #0
    b2fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    b2fc:	687b      	ldr	r3, [r7, #4]
    b2fe:	2b00      	cmp	r3, #0
    b300:	d005      	beq.n	b30e <_wdt_init+0x1a>
    b302:	687b      	ldr	r3, [r7, #4]
    b304:	681b      	ldr	r3, [r3, #0]
    b306:	2b00      	cmp	r3, #0
    b308:	d001      	beq.n	b30e <_wdt_init+0x1a>
    b30a:	2301      	movs	r3, #1
    b30c:	e000      	b.n	b310 <_wdt_init+0x1c>
    b30e:	2300      	movs	r3, #0
    b310:	f003 0301 	and.w	r3, r3, #1
    b314:	b2db      	uxtb	r3, r3
    b316:	2250      	movs	r2, #80	; 0x50
    b318:	4913      	ldr	r1, [pc, #76]	; (b368 <_wdt_init+0x74>)
    b31a:	4618      	mov	r0, r3
    b31c:	4b13      	ldr	r3, [pc, #76]	; (b36c <_wdt_init+0x78>)
    b31e:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    b320:	687b      	ldr	r3, [r7, #4]
    b322:	681b      	ldr	r3, [r3, #0]
    b324:	4618      	mov	r0, r3
    b326:	4b12      	ldr	r3, [pc, #72]	; (b370 <_wdt_init+0x7c>)
    b328:	4798      	blx	r3
    b32a:	4603      	mov	r3, r0
    b32c:	2b00      	cmp	r3, #0
    b32e:	d107      	bne.n	b340 <_wdt_init+0x4c>
    b330:	687b      	ldr	r3, [r7, #4]
    b332:	681b      	ldr	r3, [r3, #0]
    b334:	4618      	mov	r0, r3
    b336:	4b0f      	ldr	r3, [pc, #60]	; (b374 <_wdt_init+0x80>)
    b338:	4798      	blx	r3
    b33a:	4603      	mov	r3, r0
    b33c:	2b00      	cmp	r3, #0
    b33e:	d002      	beq.n	b346 <_wdt_init+0x52>
		return ERR_DENIED;
    b340:	f06f 0310 	mvn.w	r3, #16
    b344:	e00b      	b.n	b35e <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    b346:	687b      	ldr	r3, [r7, #4]
    b348:	681b      	ldr	r3, [r3, #0]
    b34a:	4618      	mov	r0, r3
    b34c:	4b0a      	ldr	r3, [pc, #40]	; (b378 <_wdt_init+0x84>)
    b34e:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    b350:	687b      	ldr	r3, [r7, #4]
    b352:	681b      	ldr	r3, [r3, #0]
    b354:	210b      	movs	r1, #11
    b356:	4618      	mov	r0, r3
    b358:	4b08      	ldr	r3, [pc, #32]	; (b37c <_wdt_init+0x88>)
    b35a:	4798      	blx	r3
	}

	return ERR_NONE;
    b35c:	2300      	movs	r3, #0
}
    b35e:	4618      	mov	r0, r3
    b360:	3708      	adds	r7, #8
    b362:	46bd      	mov	sp, r7
    b364:	bd80      	pop	{r7, pc}
    b366:	bf00      	nop
    b368:	0000f644 	.word	0x0000f644
    b36c:	0000389d 	.word	0x0000389d
    b370:	0000b285 	.word	0x0000b285
    b374:	0000b21d 	.word	0x0000b21d
    b378:	0000b259 	.word	0x0000b259
    b37c:	0000b2b9 	.word	0x0000b2b9

0000b380 <hri_port_set_DIR_reg>:
{
    b380:	b480      	push	{r7}
    b382:	b085      	sub	sp, #20
    b384:	af00      	add	r7, sp, #0
    b386:	60f8      	str	r0, [r7, #12]
    b388:	460b      	mov	r3, r1
    b38a:	607a      	str	r2, [r7, #4]
    b38c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    b38e:	7afb      	ldrb	r3, [r7, #11]
    b390:	68fa      	ldr	r2, [r7, #12]
    b392:	01db      	lsls	r3, r3, #7
    b394:	4413      	add	r3, r2
    b396:	3308      	adds	r3, #8
    b398:	687a      	ldr	r2, [r7, #4]
    b39a:	601a      	str	r2, [r3, #0]
}
    b39c:	bf00      	nop
    b39e:	3714      	adds	r7, #20
    b3a0:	46bd      	mov	sp, r7
    b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3a6:	4770      	bx	lr

0000b3a8 <hri_port_clear_DIR_reg>:
{
    b3a8:	b480      	push	{r7}
    b3aa:	b085      	sub	sp, #20
    b3ac:	af00      	add	r7, sp, #0
    b3ae:	60f8      	str	r0, [r7, #12]
    b3b0:	460b      	mov	r3, r1
    b3b2:	607a      	str	r2, [r7, #4]
    b3b4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    b3b6:	7afb      	ldrb	r3, [r7, #11]
    b3b8:	68fa      	ldr	r2, [r7, #12]
    b3ba:	01db      	lsls	r3, r3, #7
    b3bc:	4413      	add	r3, r2
    b3be:	3304      	adds	r3, #4
    b3c0:	687a      	ldr	r2, [r7, #4]
    b3c2:	601a      	str	r2, [r3, #0]
}
    b3c4:	bf00      	nop
    b3c6:	3714      	adds	r7, #20
    b3c8:	46bd      	mov	sp, r7
    b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3ce:	4770      	bx	lr

0000b3d0 <hri_port_set_OUT_reg>:
{
    b3d0:	b480      	push	{r7}
    b3d2:	b085      	sub	sp, #20
    b3d4:	af00      	add	r7, sp, #0
    b3d6:	60f8      	str	r0, [r7, #12]
    b3d8:	460b      	mov	r3, r1
    b3da:	607a      	str	r2, [r7, #4]
    b3dc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b3de:	7afb      	ldrb	r3, [r7, #11]
    b3e0:	68fa      	ldr	r2, [r7, #12]
    b3e2:	01db      	lsls	r3, r3, #7
    b3e4:	4413      	add	r3, r2
    b3e6:	3318      	adds	r3, #24
    b3e8:	687a      	ldr	r2, [r7, #4]
    b3ea:	601a      	str	r2, [r3, #0]
}
    b3ec:	bf00      	nop
    b3ee:	3714      	adds	r7, #20
    b3f0:	46bd      	mov	sp, r7
    b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3f6:	4770      	bx	lr

0000b3f8 <hri_port_clear_OUT_reg>:
{
    b3f8:	b480      	push	{r7}
    b3fa:	b085      	sub	sp, #20
    b3fc:	af00      	add	r7, sp, #0
    b3fe:	60f8      	str	r0, [r7, #12]
    b400:	460b      	mov	r3, r1
    b402:	607a      	str	r2, [r7, #4]
    b404:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b406:	7afb      	ldrb	r3, [r7, #11]
    b408:	68fa      	ldr	r2, [r7, #12]
    b40a:	01db      	lsls	r3, r3, #7
    b40c:	4413      	add	r3, r2
    b40e:	3314      	adds	r3, #20
    b410:	687a      	ldr	r2, [r7, #4]
    b412:	601a      	str	r2, [r3, #0]
}
    b414:	bf00      	nop
    b416:	3714      	adds	r7, #20
    b418:	46bd      	mov	sp, r7
    b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b41e:	4770      	bx	lr

0000b420 <hri_port_write_PMUX_PMUXE_bf>:
{
    b420:	b480      	push	{r7}
    b422:	b085      	sub	sp, #20
    b424:	af00      	add	r7, sp, #0
    b426:	6078      	str	r0, [r7, #4]
    b428:	4608      	mov	r0, r1
    b42a:	4611      	mov	r1, r2
    b42c:	461a      	mov	r2, r3
    b42e:	4603      	mov	r3, r0
    b430:	70fb      	strb	r3, [r7, #3]
    b432:	460b      	mov	r3, r1
    b434:	70bb      	strb	r3, [r7, #2]
    b436:	4613      	mov	r3, r2
    b438:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b43a:	78fa      	ldrb	r2, [r7, #3]
    b43c:	78bb      	ldrb	r3, [r7, #2]
    b43e:	6879      	ldr	r1, [r7, #4]
    b440:	01d2      	lsls	r2, r2, #7
    b442:	440a      	add	r2, r1
    b444:	4413      	add	r3, r2
    b446:	3330      	adds	r3, #48	; 0x30
    b448:	781b      	ldrb	r3, [r3, #0]
    b44a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    b44c:	7bfb      	ldrb	r3, [r7, #15]
    b44e:	f023 030f 	bic.w	r3, r3, #15
    b452:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    b454:	787b      	ldrb	r3, [r7, #1]
    b456:	f003 030f 	and.w	r3, r3, #15
    b45a:	b2da      	uxtb	r2, r3
    b45c:	7bfb      	ldrb	r3, [r7, #15]
    b45e:	4313      	orrs	r3, r2
    b460:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b462:	78fa      	ldrb	r2, [r7, #3]
    b464:	78bb      	ldrb	r3, [r7, #2]
    b466:	6879      	ldr	r1, [r7, #4]
    b468:	01d2      	lsls	r2, r2, #7
    b46a:	440a      	add	r2, r1
    b46c:	4413      	add	r3, r2
    b46e:	3330      	adds	r3, #48	; 0x30
    b470:	7bfa      	ldrb	r2, [r7, #15]
    b472:	701a      	strb	r2, [r3, #0]
}
    b474:	bf00      	nop
    b476:	3714      	adds	r7, #20
    b478:	46bd      	mov	sp, r7
    b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b47e:	4770      	bx	lr

0000b480 <hri_port_write_PMUX_PMUXO_bf>:
{
    b480:	b480      	push	{r7}
    b482:	b085      	sub	sp, #20
    b484:	af00      	add	r7, sp, #0
    b486:	6078      	str	r0, [r7, #4]
    b488:	4608      	mov	r0, r1
    b48a:	4611      	mov	r1, r2
    b48c:	461a      	mov	r2, r3
    b48e:	4603      	mov	r3, r0
    b490:	70fb      	strb	r3, [r7, #3]
    b492:	460b      	mov	r3, r1
    b494:	70bb      	strb	r3, [r7, #2]
    b496:	4613      	mov	r3, r2
    b498:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b49a:	78fa      	ldrb	r2, [r7, #3]
    b49c:	78bb      	ldrb	r3, [r7, #2]
    b49e:	6879      	ldr	r1, [r7, #4]
    b4a0:	01d2      	lsls	r2, r2, #7
    b4a2:	440a      	add	r2, r1
    b4a4:	4413      	add	r3, r2
    b4a6:	3330      	adds	r3, #48	; 0x30
    b4a8:	781b      	ldrb	r3, [r3, #0]
    b4aa:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    b4ac:	7bfb      	ldrb	r3, [r7, #15]
    b4ae:	f003 030f 	and.w	r3, r3, #15
    b4b2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    b4b4:	787b      	ldrb	r3, [r7, #1]
    b4b6:	011b      	lsls	r3, r3, #4
    b4b8:	b2da      	uxtb	r2, r3
    b4ba:	7bfb      	ldrb	r3, [r7, #15]
    b4bc:	4313      	orrs	r3, r2
    b4be:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b4c0:	78fa      	ldrb	r2, [r7, #3]
    b4c2:	78bb      	ldrb	r3, [r7, #2]
    b4c4:	6879      	ldr	r1, [r7, #4]
    b4c6:	01d2      	lsls	r2, r2, #7
    b4c8:	440a      	add	r2, r1
    b4ca:	4413      	add	r3, r2
    b4cc:	3330      	adds	r3, #48	; 0x30
    b4ce:	7bfa      	ldrb	r2, [r7, #15]
    b4d0:	701a      	strb	r2, [r3, #0]
}
    b4d2:	bf00      	nop
    b4d4:	3714      	adds	r7, #20
    b4d6:	46bd      	mov	sp, r7
    b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4dc:	4770      	bx	lr

0000b4de <hri_port_write_PINCFG_PMUXEN_bit>:
{
    b4de:	b480      	push	{r7}
    b4e0:	b085      	sub	sp, #20
    b4e2:	af00      	add	r7, sp, #0
    b4e4:	6078      	str	r0, [r7, #4]
    b4e6:	4608      	mov	r0, r1
    b4e8:	4611      	mov	r1, r2
    b4ea:	461a      	mov	r2, r3
    b4ec:	4603      	mov	r3, r0
    b4ee:	70fb      	strb	r3, [r7, #3]
    b4f0:	460b      	mov	r3, r1
    b4f2:	70bb      	strb	r3, [r7, #2]
    b4f4:	4613      	mov	r3, r2
    b4f6:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    b4f8:	78fa      	ldrb	r2, [r7, #3]
    b4fa:	78bb      	ldrb	r3, [r7, #2]
    b4fc:	6879      	ldr	r1, [r7, #4]
    b4fe:	01d2      	lsls	r2, r2, #7
    b500:	440a      	add	r2, r1
    b502:	4413      	add	r3, r2
    b504:	3340      	adds	r3, #64	; 0x40
    b506:	781b      	ldrb	r3, [r3, #0]
    b508:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    b50a:	7bfb      	ldrb	r3, [r7, #15]
    b50c:	f023 0301 	bic.w	r3, r3, #1
    b510:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    b512:	787a      	ldrb	r2, [r7, #1]
    b514:	7bfb      	ldrb	r3, [r7, #15]
    b516:	4313      	orrs	r3, r2
    b518:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    b51a:	78fa      	ldrb	r2, [r7, #3]
    b51c:	78bb      	ldrb	r3, [r7, #2]
    b51e:	6879      	ldr	r1, [r7, #4]
    b520:	01d2      	lsls	r2, r2, #7
    b522:	440a      	add	r2, r1
    b524:	4413      	add	r3, r2
    b526:	3340      	adds	r3, #64	; 0x40
    b528:	7bfa      	ldrb	r2, [r7, #15]
    b52a:	701a      	strb	r2, [r3, #0]
}
    b52c:	bf00      	nop
    b52e:	3714      	adds	r7, #20
    b530:	46bd      	mov	sp, r7
    b532:	f85d 7b04 	ldr.w	r7, [sp], #4
    b536:	4770      	bx	lr

0000b538 <hri_port_write_WRCONFIG_reg>:
{
    b538:	b480      	push	{r7}
    b53a:	b085      	sub	sp, #20
    b53c:	af00      	add	r7, sp, #0
    b53e:	60f8      	str	r0, [r7, #12]
    b540:	460b      	mov	r3, r1
    b542:	607a      	str	r2, [r7, #4]
    b544:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    b546:	7afb      	ldrb	r3, [r7, #11]
    b548:	68fa      	ldr	r2, [r7, #12]
    b54a:	01db      	lsls	r3, r3, #7
    b54c:	4413      	add	r3, r2
    b54e:	3328      	adds	r3, #40	; 0x28
    b550:	687a      	ldr	r2, [r7, #4]
    b552:	601a      	str	r2, [r3, #0]
}
    b554:	bf00      	nop
    b556:	3714      	adds	r7, #20
    b558:	46bd      	mov	sp, r7
    b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b55e:	4770      	bx	lr

0000b560 <_gpio_set_direction>:
{
    b560:	b580      	push	{r7, lr}
    b562:	b082      	sub	sp, #8
    b564:	af00      	add	r7, sp, #0
    b566:	4603      	mov	r3, r0
    b568:	6039      	str	r1, [r7, #0]
    b56a:	71fb      	strb	r3, [r7, #7]
    b56c:	4613      	mov	r3, r2
    b56e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    b570:	79bb      	ldrb	r3, [r7, #6]
    b572:	2b01      	cmp	r3, #1
    b574:	d01c      	beq.n	b5b0 <_gpio_set_direction+0x50>
    b576:	2b02      	cmp	r3, #2
    b578:	d037      	beq.n	b5ea <_gpio_set_direction+0x8a>
    b57a:	2b00      	cmp	r3, #0
    b57c:	d14e      	bne.n	b61c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b57e:	79fb      	ldrb	r3, [r7, #7]
    b580:	683a      	ldr	r2, [r7, #0]
    b582:	4619      	mov	r1, r3
    b584:	482a      	ldr	r0, [pc, #168]	; (b630 <_gpio_set_direction+0xd0>)
    b586:	4b2b      	ldr	r3, [pc, #172]	; (b634 <_gpio_set_direction+0xd4>)
    b588:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b58a:	683b      	ldr	r3, [r7, #0]
    b58c:	b29b      	uxth	r3, r3
    b58e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b592:	79fb      	ldrb	r3, [r7, #7]
    b594:	4619      	mov	r1, r3
    b596:	4826      	ldr	r0, [pc, #152]	; (b630 <_gpio_set_direction+0xd0>)
    b598:	4b27      	ldr	r3, [pc, #156]	; (b638 <_gpio_set_direction+0xd8>)
    b59a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b59c:	683b      	ldr	r3, [r7, #0]
    b59e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b5a0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b5a4:	79fb      	ldrb	r3, [r7, #7]
    b5a6:	4619      	mov	r1, r3
    b5a8:	4821      	ldr	r0, [pc, #132]	; (b630 <_gpio_set_direction+0xd0>)
    b5aa:	4b23      	ldr	r3, [pc, #140]	; (b638 <_gpio_set_direction+0xd8>)
    b5ac:	4798      	blx	r3
		break;
    b5ae:	e03a      	b.n	b626 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b5b0:	79fb      	ldrb	r3, [r7, #7]
    b5b2:	683a      	ldr	r2, [r7, #0]
    b5b4:	4619      	mov	r1, r3
    b5b6:	481e      	ldr	r0, [pc, #120]	; (b630 <_gpio_set_direction+0xd0>)
    b5b8:	4b1e      	ldr	r3, [pc, #120]	; (b634 <_gpio_set_direction+0xd4>)
    b5ba:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    b5bc:	683b      	ldr	r3, [r7, #0]
    b5be:	b29b      	uxth	r3, r3
    b5c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b5c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b5c8:	79f9      	ldrb	r1, [r7, #7]
    b5ca:	461a      	mov	r2, r3
    b5cc:	4818      	ldr	r0, [pc, #96]	; (b630 <_gpio_set_direction+0xd0>)
    b5ce:	4b1a      	ldr	r3, [pc, #104]	; (b638 <_gpio_set_direction+0xd8>)
    b5d0:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    b5d2:	683b      	ldr	r3, [r7, #0]
    b5d4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    b5d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    b5da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b5de:	79f9      	ldrb	r1, [r7, #7]
    b5e0:	461a      	mov	r2, r3
    b5e2:	4813      	ldr	r0, [pc, #76]	; (b630 <_gpio_set_direction+0xd0>)
    b5e4:	4b14      	ldr	r3, [pc, #80]	; (b638 <_gpio_set_direction+0xd8>)
    b5e6:	4798      	blx	r3
		break;
    b5e8:	e01d      	b.n	b626 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    b5ea:	79fb      	ldrb	r3, [r7, #7]
    b5ec:	683a      	ldr	r2, [r7, #0]
    b5ee:	4619      	mov	r1, r3
    b5f0:	480f      	ldr	r0, [pc, #60]	; (b630 <_gpio_set_direction+0xd0>)
    b5f2:	4b12      	ldr	r3, [pc, #72]	; (b63c <_gpio_set_direction+0xdc>)
    b5f4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b5f6:	683b      	ldr	r3, [r7, #0]
    b5f8:	b29b      	uxth	r3, r3
    b5fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b5fe:	79fb      	ldrb	r3, [r7, #7]
    b600:	4619      	mov	r1, r3
    b602:	480b      	ldr	r0, [pc, #44]	; (b630 <_gpio_set_direction+0xd0>)
    b604:	4b0c      	ldr	r3, [pc, #48]	; (b638 <_gpio_set_direction+0xd8>)
    b606:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b608:	683b      	ldr	r3, [r7, #0]
    b60a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b60c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b610:	79fb      	ldrb	r3, [r7, #7]
    b612:	4619      	mov	r1, r3
    b614:	4806      	ldr	r0, [pc, #24]	; (b630 <_gpio_set_direction+0xd0>)
    b616:	4b08      	ldr	r3, [pc, #32]	; (b638 <_gpio_set_direction+0xd8>)
    b618:	4798      	blx	r3
		break;
    b61a:	e004      	b.n	b626 <_gpio_set_direction+0xc6>
		ASSERT(false);
    b61c:	2246      	movs	r2, #70	; 0x46
    b61e:	4908      	ldr	r1, [pc, #32]	; (b640 <_gpio_set_direction+0xe0>)
    b620:	2000      	movs	r0, #0
    b622:	4b08      	ldr	r3, [pc, #32]	; (b644 <_gpio_set_direction+0xe4>)
    b624:	4798      	blx	r3
}
    b626:	bf00      	nop
    b628:	3708      	adds	r7, #8
    b62a:	46bd      	mov	sp, r7
    b62c:	bd80      	pop	{r7, pc}
    b62e:	bf00      	nop
    b630:	41008000 	.word	0x41008000
    b634:	0000b3a9 	.word	0x0000b3a9
    b638:	0000b539 	.word	0x0000b539
    b63c:	0000b381 	.word	0x0000b381
    b640:	0000f65c 	.word	0x0000f65c
    b644:	0000389d 	.word	0x0000389d

0000b648 <_gpio_set_level>:
{
    b648:	b580      	push	{r7, lr}
    b64a:	b082      	sub	sp, #8
    b64c:	af00      	add	r7, sp, #0
    b64e:	4603      	mov	r3, r0
    b650:	6039      	str	r1, [r7, #0]
    b652:	71fb      	strb	r3, [r7, #7]
    b654:	4613      	mov	r3, r2
    b656:	71bb      	strb	r3, [r7, #6]
	if (level) {
    b658:	79bb      	ldrb	r3, [r7, #6]
    b65a:	2b00      	cmp	r3, #0
    b65c:	d006      	beq.n	b66c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    b65e:	79fb      	ldrb	r3, [r7, #7]
    b660:	683a      	ldr	r2, [r7, #0]
    b662:	4619      	mov	r1, r3
    b664:	4806      	ldr	r0, [pc, #24]	; (b680 <_gpio_set_level+0x38>)
    b666:	4b07      	ldr	r3, [pc, #28]	; (b684 <_gpio_set_level+0x3c>)
    b668:	4798      	blx	r3
}
    b66a:	e005      	b.n	b678 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    b66c:	79fb      	ldrb	r3, [r7, #7]
    b66e:	683a      	ldr	r2, [r7, #0]
    b670:	4619      	mov	r1, r3
    b672:	4803      	ldr	r0, [pc, #12]	; (b680 <_gpio_set_level+0x38>)
    b674:	4b04      	ldr	r3, [pc, #16]	; (b688 <_gpio_set_level+0x40>)
    b676:	4798      	blx	r3
}
    b678:	bf00      	nop
    b67a:	3708      	adds	r7, #8
    b67c:	46bd      	mov	sp, r7
    b67e:	bd80      	pop	{r7, pc}
    b680:	41008000 	.word	0x41008000
    b684:	0000b3d1 	.word	0x0000b3d1
    b688:	0000b3f9 	.word	0x0000b3f9

0000b68c <_gpio_set_pin_function>:
{
    b68c:	b590      	push	{r4, r7, lr}
    b68e:	b085      	sub	sp, #20
    b690:	af00      	add	r7, sp, #0
    b692:	6078      	str	r0, [r7, #4]
    b694:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    b696:	687b      	ldr	r3, [r7, #4]
    b698:	095b      	lsrs	r3, r3, #5
    b69a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    b69c:	687b      	ldr	r3, [r7, #4]
    b69e:	b2db      	uxtb	r3, r3
    b6a0:	f003 031f 	and.w	r3, r3, #31
    b6a4:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    b6a6:	683b      	ldr	r3, [r7, #0]
    b6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
    b6ac:	d106      	bne.n	b6bc <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    b6ae:	7bba      	ldrb	r2, [r7, #14]
    b6b0:	7bf9      	ldrb	r1, [r7, #15]
    b6b2:	2300      	movs	r3, #0
    b6b4:	4812      	ldr	r0, [pc, #72]	; (b700 <_gpio_set_pin_function+0x74>)
    b6b6:	4c13      	ldr	r4, [pc, #76]	; (b704 <_gpio_set_pin_function+0x78>)
    b6b8:	47a0      	blx	r4
}
    b6ba:	e01d      	b.n	b6f8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    b6bc:	7bba      	ldrb	r2, [r7, #14]
    b6be:	7bf9      	ldrb	r1, [r7, #15]
    b6c0:	2301      	movs	r3, #1
    b6c2:	480f      	ldr	r0, [pc, #60]	; (b700 <_gpio_set_pin_function+0x74>)
    b6c4:	4c0f      	ldr	r4, [pc, #60]	; (b704 <_gpio_set_pin_function+0x78>)
    b6c6:	47a0      	blx	r4
		if (pin & 1) {
    b6c8:	7bbb      	ldrb	r3, [r7, #14]
    b6ca:	f003 0301 	and.w	r3, r3, #1
    b6ce:	2b00      	cmp	r3, #0
    b6d0:	d009      	beq.n	b6e6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    b6d2:	7bbb      	ldrb	r3, [r7, #14]
    b6d4:	085b      	lsrs	r3, r3, #1
    b6d6:	b2da      	uxtb	r2, r3
    b6d8:	683b      	ldr	r3, [r7, #0]
    b6da:	b2db      	uxtb	r3, r3
    b6dc:	7bf9      	ldrb	r1, [r7, #15]
    b6de:	4808      	ldr	r0, [pc, #32]	; (b700 <_gpio_set_pin_function+0x74>)
    b6e0:	4c09      	ldr	r4, [pc, #36]	; (b708 <_gpio_set_pin_function+0x7c>)
    b6e2:	47a0      	blx	r4
}
    b6e4:	e008      	b.n	b6f8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    b6e6:	7bbb      	ldrb	r3, [r7, #14]
    b6e8:	085b      	lsrs	r3, r3, #1
    b6ea:	b2da      	uxtb	r2, r3
    b6ec:	683b      	ldr	r3, [r7, #0]
    b6ee:	b2db      	uxtb	r3, r3
    b6f0:	7bf9      	ldrb	r1, [r7, #15]
    b6f2:	4803      	ldr	r0, [pc, #12]	; (b700 <_gpio_set_pin_function+0x74>)
    b6f4:	4c05      	ldr	r4, [pc, #20]	; (b70c <_gpio_set_pin_function+0x80>)
    b6f6:	47a0      	blx	r4
}
    b6f8:	bf00      	nop
    b6fa:	3714      	adds	r7, #20
    b6fc:	46bd      	mov	sp, r7
    b6fe:	bd90      	pop	{r4, r7, pc}
    b700:	41008000 	.word	0x41008000
    b704:	0000b4df 	.word	0x0000b4df
    b708:	0000b481 	.word	0x0000b481
    b70c:	0000b421 	.word	0x0000b421

0000b710 <gpio_set_pin_function>:
{
    b710:	b580      	push	{r7, lr}
    b712:	b082      	sub	sp, #8
    b714:	af00      	add	r7, sp, #0
    b716:	6078      	str	r0, [r7, #4]
    b718:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    b71a:	6839      	ldr	r1, [r7, #0]
    b71c:	6878      	ldr	r0, [r7, #4]
    b71e:	4b03      	ldr	r3, [pc, #12]	; (b72c <gpio_set_pin_function+0x1c>)
    b720:	4798      	blx	r3
}
    b722:	bf00      	nop
    b724:	3708      	adds	r7, #8
    b726:	46bd      	mov	sp, r7
    b728:	bd80      	pop	{r7, pc}
    b72a:	bf00      	nop
    b72c:	0000b68d 	.word	0x0000b68d

0000b730 <gpio_set_pin_direction>:
{
    b730:	b580      	push	{r7, lr}
    b732:	b082      	sub	sp, #8
    b734:	af00      	add	r7, sp, #0
    b736:	4603      	mov	r3, r0
    b738:	460a      	mov	r2, r1
    b73a:	71fb      	strb	r3, [r7, #7]
    b73c:	4613      	mov	r3, r2
    b73e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    b740:	79fb      	ldrb	r3, [r7, #7]
    b742:	095b      	lsrs	r3, r3, #5
    b744:	b2d8      	uxtb	r0, r3
    b746:	79fb      	ldrb	r3, [r7, #7]
    b748:	f003 031f 	and.w	r3, r3, #31
    b74c:	2201      	movs	r2, #1
    b74e:	fa02 f303 	lsl.w	r3, r2, r3
    b752:	79ba      	ldrb	r2, [r7, #6]
    b754:	4619      	mov	r1, r3
    b756:	4b03      	ldr	r3, [pc, #12]	; (b764 <gpio_set_pin_direction+0x34>)
    b758:	4798      	blx	r3
}
    b75a:	bf00      	nop
    b75c:	3708      	adds	r7, #8
    b75e:	46bd      	mov	sp, r7
    b760:	bd80      	pop	{r7, pc}
    b762:	bf00      	nop
    b764:	0000b561 	.word	0x0000b561

0000b768 <gpio_set_pin_level>:
{
    b768:	b580      	push	{r7, lr}
    b76a:	b082      	sub	sp, #8
    b76c:	af00      	add	r7, sp, #0
    b76e:	4603      	mov	r3, r0
    b770:	460a      	mov	r2, r1
    b772:	71fb      	strb	r3, [r7, #7]
    b774:	4613      	mov	r3, r2
    b776:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    b778:	79fb      	ldrb	r3, [r7, #7]
    b77a:	095b      	lsrs	r3, r3, #5
    b77c:	b2d8      	uxtb	r0, r3
    b77e:	79fb      	ldrb	r3, [r7, #7]
    b780:	f003 031f 	and.w	r3, r3, #31
    b784:	2201      	movs	r2, #1
    b786:	fa02 f303 	lsl.w	r3, r2, r3
    b78a:	79ba      	ldrb	r2, [r7, #6]
    b78c:	4619      	mov	r1, r3
    b78e:	4b03      	ldr	r3, [pc, #12]	; (b79c <gpio_set_pin_level+0x34>)
    b790:	4798      	blx	r3
}
    b792:	bf00      	nop
    b794:	3708      	adds	r7, #8
    b796:	46bd      	mov	sp, r7
    b798:	bd80      	pop	{r7, pc}
    b79a:	bf00      	nop
    b79c:	0000b649 	.word	0x0000b649

0000b7a0 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    b7a0:	b580      	push	{r7, lr}
    b7a2:	b082      	sub	sp, #8
    b7a4:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    b7a6:	2100      	movs	r1, #0
    b7a8:	2008      	movs	r0, #8
    b7aa:	4b24      	ldr	r3, [pc, #144]	; (b83c <QSPI_N25Q256_exit_xip+0x9c>)
    b7ac:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    b7ae:	2100      	movs	r1, #0
    b7b0:	202b      	movs	r0, #43	; 0x2b
    b7b2:	4b22      	ldr	r3, [pc, #136]	; (b83c <QSPI_N25Q256_exit_xip+0x9c>)
    b7b4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    b7b6:	2100      	movs	r1, #0
    b7b8:	202a      	movs	r0, #42	; 0x2a
    b7ba:	4b20      	ldr	r3, [pc, #128]	; (b83c <QSPI_N25Q256_exit_xip+0x9c>)
    b7bc:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    b7be:	2102      	movs	r1, #2
    b7c0:	2008      	movs	r0, #8
    b7c2:	4b1f      	ldr	r3, [pc, #124]	; (b840 <QSPI_N25Q256_exit_xip+0xa0>)
    b7c4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    b7c6:	2102      	movs	r1, #2
    b7c8:	202b      	movs	r0, #43	; 0x2b
    b7ca:	4b1d      	ldr	r3, [pc, #116]	; (b840 <QSPI_N25Q256_exit_xip+0xa0>)
    b7cc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    b7ce:	2102      	movs	r1, #2
    b7d0:	202a      	movs	r0, #42	; 0x2a
    b7d2:	4b1b      	ldr	r3, [pc, #108]	; (b840 <QSPI_N25Q256_exit_xip+0xa0>)
    b7d4:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    b7d6:	2101      	movs	r1, #1
    b7d8:	2008      	movs	r0, #8
    b7da:	4b1a      	ldr	r3, [pc, #104]	; (b844 <QSPI_N25Q256_exit_xip+0xa4>)
    b7dc:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    b7de:	2100      	movs	r1, #0
    b7e0:	202b      	movs	r0, #43	; 0x2b
    b7e2:	4b18      	ldr	r3, [pc, #96]	; (b844 <QSPI_N25Q256_exit_xip+0xa4>)
    b7e4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    b7e6:	2100      	movs	r1, #0
    b7e8:	202a      	movs	r0, #42	; 0x2a
    b7ea:	4b16      	ldr	r3, [pc, #88]	; (b844 <QSPI_N25Q256_exit_xip+0xa4>)
    b7ec:	4798      	blx	r3

	delay_us(1);
    b7ee:	2001      	movs	r0, #1
    b7f0:	4b15      	ldr	r3, [pc, #84]	; (b848 <QSPI_N25Q256_exit_xip+0xa8>)
    b7f2:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    b7f4:	2300      	movs	r3, #0
    b7f6:	607b      	str	r3, [r7, #4]
    b7f8:	e010      	b.n	b81c <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    b7fa:	2101      	movs	r1, #1
    b7fc:	202a      	movs	r0, #42	; 0x2a
    b7fe:	4b11      	ldr	r3, [pc, #68]	; (b844 <QSPI_N25Q256_exit_xip+0xa4>)
    b800:	4798      	blx	r3
		delay_us(1);
    b802:	2001      	movs	r0, #1
    b804:	4b10      	ldr	r3, [pc, #64]	; (b848 <QSPI_N25Q256_exit_xip+0xa8>)
    b806:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    b808:	2100      	movs	r1, #0
    b80a:	202a      	movs	r0, #42	; 0x2a
    b80c:	4b0d      	ldr	r3, [pc, #52]	; (b844 <QSPI_N25Q256_exit_xip+0xa4>)
    b80e:	4798      	blx	r3
		delay_us(1);
    b810:	2001      	movs	r0, #1
    b812:	4b0d      	ldr	r3, [pc, #52]	; (b848 <QSPI_N25Q256_exit_xip+0xa8>)
    b814:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    b816:	687b      	ldr	r3, [r7, #4]
    b818:	3301      	adds	r3, #1
    b81a:	607b      	str	r3, [r7, #4]
    b81c:	687b      	ldr	r3, [r7, #4]
    b81e:	2b06      	cmp	r3, #6
    b820:	ddeb      	ble.n	b7fa <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    b822:	2101      	movs	r1, #1
    b824:	202b      	movs	r0, #43	; 0x2b
    b826:	4b07      	ldr	r3, [pc, #28]	; (b844 <QSPI_N25Q256_exit_xip+0xa4>)
    b828:	4798      	blx	r3
	delay_us(1);
    b82a:	2001      	movs	r0, #1
    b82c:	4b06      	ldr	r3, [pc, #24]	; (b848 <QSPI_N25Q256_exit_xip+0xa8>)
    b82e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    b830:	4b06      	ldr	r3, [pc, #24]	; (b84c <QSPI_N25Q256_exit_xip+0xac>)
    b832:	4798      	blx	r3
}
    b834:	bf00      	nop
    b836:	3708      	adds	r7, #8
    b838:	46bd      	mov	sp, r7
    b83a:	bd80      	pop	{r7, pc}
    b83c:	0000b711 	.word	0x0000b711
    b840:	0000b731 	.word	0x0000b731
    b844:	0000b769 	.word	0x0000b769
    b848:	000020c9 	.word	0x000020c9
    b84c:	0000147d 	.word	0x0000147d

0000b850 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    b850:	b598      	push	{r3, r4, r7, lr}
    b852:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    b854:	4806      	ldr	r0, [pc, #24]	; (b870 <spi_nor_flash_init+0x20>)
    b856:	4b07      	ldr	r3, [pc, #28]	; (b874 <spi_nor_flash_init+0x24>)
    b858:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    b85a:	2300      	movs	r3, #0
    b85c:	4a06      	ldr	r2, [pc, #24]	; (b878 <spi_nor_flash_init+0x28>)
    b85e:	4904      	ldr	r1, [pc, #16]	; (b870 <spi_nor_flash_init+0x20>)
    b860:	4806      	ldr	r0, [pc, #24]	; (b87c <spi_nor_flash_init+0x2c>)
    b862:	4c07      	ldr	r4, [pc, #28]	; (b880 <spi_nor_flash_init+0x30>)
    b864:	47a0      	blx	r4
    b866:	4602      	mov	r2, r0
    b868:	4b06      	ldr	r3, [pc, #24]	; (b884 <spi_nor_flash_init+0x34>)
    b86a:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    b86c:	bf00      	nop
    b86e:	bd98      	pop	{r3, r4, r7, pc}
    b870:	20001210 	.word	0x20001210
    b874:	00002805 	.word	0x00002805
    b878:	0000b7a1 	.word	0x0000b7a1
    b87c:	20000d7c 	.word	0x20000d7c
    b880:	0000bcbd 	.word	0x0000bcbd
    b884:	20001430 	.word	0x20001430

0000b888 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b888:	b580      	push	{r7, lr}
    b88a:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b88c:	4805      	ldr	r0, [pc, #20]	; (b8a4 <cdc_device_acm_init+0x1c>)
    b88e:	4b06      	ldr	r3, [pc, #24]	; (b8a8 <cdc_device_acm_init+0x20>)
    b890:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b892:	4b06      	ldr	r3, [pc, #24]	; (b8ac <cdc_device_acm_init+0x24>)
    b894:	4798      	blx	r3

	usbdc_start(single_desc);
    b896:	4806      	ldr	r0, [pc, #24]	; (b8b0 <cdc_device_acm_init+0x28>)
    b898:	4b06      	ldr	r3, [pc, #24]	; (b8b4 <cdc_device_acm_init+0x2c>)
    b89a:	4798      	blx	r3
	usbdc_attach();
    b89c:	4b06      	ldr	r3, [pc, #24]	; (b8b8 <cdc_device_acm_init+0x30>)
    b89e:	4798      	blx	r3
}
    b8a0:	bf00      	nop
    b8a2:	bd80      	pop	{r7, pc}
    b8a4:	20000dcc 	.word	0x20000dcc
    b8a8:	0000d3e5 	.word	0x0000d3e5
    b8ac:	0000c65d 	.word	0x0000c65d
    b8b0:	200001d0 	.word	0x200001d0
    b8b4:	0000d481 	.word	0x0000d481
    b8b8:	0000d4d1 	.word	0x0000d4d1

0000b8bc <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    b8bc:	b580      	push	{r7, lr}
    b8be:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b8c0:	4b01      	ldr	r3, [pc, #4]	; (b8c8 <usb_init+0xc>)
    b8c2:	4798      	blx	r3
}
    b8c4:	bf00      	nop
    b8c6:	bd80      	pop	{r7, pc}
    b8c8:	0000b889 	.word	0x0000b889

0000b8cc <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    b8cc:	b480      	push	{r7}
    b8ce:	b085      	sub	sp, #20
    b8d0:	af00      	add	r7, sp, #0
    b8d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b8d4:	f3ef 8310 	mrs	r3, PRIMASK
    b8d8:	60fb      	str	r3, [r7, #12]
  return(result);
    b8da:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    b8dc:	687b      	ldr	r3, [r7, #4]
    b8de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    b8e0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    b8e2:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    b8e6:	bf00      	nop
    b8e8:	3714      	adds	r7, #20
    b8ea:	46bd      	mov	sp, r7
    b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8f0:	4770      	bx	lr

0000b8f2 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    b8f2:	b480      	push	{r7}
    b8f4:	b085      	sub	sp, #20
    b8f6:	af00      	add	r7, sp, #0
    b8f8:	6078      	str	r0, [r7, #4]
    b8fa:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    b8fe:	687b      	ldr	r3, [r7, #4]
    b900:	681b      	ldr	r3, [r3, #0]
    b902:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    b904:	68fb      	ldr	r3, [r7, #12]
    b906:	f383 8810 	msr	PRIMASK, r3
}
    b90a:	bf00      	nop
    b90c:	3714      	adds	r7, #20
    b90e:	46bd      	mov	sp, r7
    b910:	f85d 7b04 	ldr.w	r7, [sp], #4
    b914:	4770      	bx	lr
	...

0000b918 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    b918:	b580      	push	{r7, lr}
    b91a:	b08c      	sub	sp, #48	; 0x30
    b91c:	af00      	add	r7, sp, #0
    b91e:	6078      	str	r0, [r7, #4]
    b920:	460b      	mov	r3, r1
    b922:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b924:	687b      	ldr	r3, [r7, #4]
    b926:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b928:	687b      	ldr	r3, [r7, #4]
    b92a:	681b      	ldr	r3, [r3, #0]
    b92c:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    b92e:	f107 030c 	add.w	r3, r7, #12
    b932:	2200      	movs	r2, #0
    b934:	601a      	str	r2, [r3, #0]
    b936:	605a      	str	r2, [r3, #4]
    b938:	609a      	str	r2, [r3, #8]
    b93a:	60da      	str	r2, [r3, #12]
    b93c:	611a      	str	r2, [r3, #16]
    b93e:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b942:	7b1b      	ldrb	r3, [r3, #12]
    b944:	2b00      	cmp	r3, #0
    b946:	d001      	beq.n	b94c <n25q256a_xip_confirm+0x34>
    b948:	2206      	movs	r2, #6
    b94a:	e000      	b.n	b94e <n25q256a_xip_confirm+0x36>
    b94c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b94e:	7b3b      	ldrb	r3, [r7, #12]
    b950:	f362 0302 	bfi	r3, r2, #0, #3
    b954:	733b      	strb	r3, [r7, #12]
    b956:	7b3b      	ldrb	r3, [r7, #12]
    b958:	f043 0310 	orr.w	r3, r3, #16
    b95c:	733b      	strb	r3, [r7, #12]
    b95e:	7b3b      	ldrb	r3, [r7, #12]
    b960:	f043 0320 	orr.w	r3, r3, #32
    b964:	733b      	strb	r3, [r7, #12]
    b966:	7b3b      	ldrb	r3, [r7, #12]
    b968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b96c:	733b      	strb	r3, [r7, #12]
    b96e:	7b3b      	ldrb	r3, [r7, #12]
    b970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b974:	733b      	strb	r3, [r7, #12]
    b976:	7b7b      	ldrb	r3, [r7, #13]
    b978:	f043 0303 	orr.w	r3, r3, #3
    b97c:	737b      	strb	r3, [r7, #13]
    b97e:	7b7b      	ldrb	r3, [r7, #13]
    b980:	2201      	movs	r2, #1
    b982:	f362 1305 	bfi	r3, r2, #4, #2
    b986:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    b988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b98a:	7b1b      	ldrb	r3, [r3, #12]
    b98c:	2b00      	cmp	r3, #0
    b98e:	d001      	beq.n	b994 <n25q256a_xip_confirm+0x7c>
    b990:	2208      	movs	r2, #8
    b992:	e000      	b.n	b996 <n25q256a_xip_confirm+0x7e>
    b994:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b996:	7bbb      	ldrb	r3, [r7, #14]
    b998:	f362 0304 	bfi	r3, r2, #0, #5
    b99c:	73bb      	strb	r3, [r7, #14]
    b99e:	230b      	movs	r3, #11
    b9a0:	743b      	strb	r3, [r7, #16]
    b9a2:	78fb      	ldrb	r3, [r7, #3]
    b9a4:	2b00      	cmp	r3, #0
    b9a6:	d001      	beq.n	b9ac <n25q256a_xip_confirm+0x94>
    b9a8:	2300      	movs	r3, #0
    b9aa:	e000      	b.n	b9ae <n25q256a_xip_confirm+0x96>
    b9ac:	23ff      	movs	r3, #255	; 0xff
    b9ae:	747b      	strb	r3, [r7, #17]
    b9b0:	2301      	movs	r3, #1
    b9b2:	61bb      	str	r3, [r7, #24]
    b9b4:	f107 0327 	add.w	r3, r7, #39	; 0x27
    b9b8:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    b9ba:	f107 030c 	add.w	r3, r7, #12
    b9be:	4619      	mov	r1, r3
    b9c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b9c2:	4b07      	ldr	r3, [pc, #28]	; (b9e0 <n25q256a_xip_confirm+0xc8>)
    b9c4:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    b9c6:	78fb      	ldrb	r3, [r7, #3]
    b9c8:	2b00      	cmp	r3, #0
    b9ca:	d001      	beq.n	b9d0 <n25q256a_xip_confirm+0xb8>
    b9cc:	2202      	movs	r2, #2
    b9ce:	e000      	b.n	b9d2 <n25q256a_xip_confirm+0xba>
    b9d0:	2201      	movs	r2, #1
    b9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b9d4:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b9d6:	2300      	movs	r3, #0
}
    b9d8:	4618      	mov	r0, r3
    b9da:	3730      	adds	r7, #48	; 0x30
    b9dc:	46bd      	mov	sp, r7
    b9de:	bd80      	pop	{r7, pc}
    b9e0:	0000287d 	.word	0x0000287d

0000b9e4 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    b9e4:	b580      	push	{r7, lr}
    b9e6:	b08c      	sub	sp, #48	; 0x30
    b9e8:	af00      	add	r7, sp, #0
    b9ea:	6078      	str	r0, [r7, #4]
    b9ec:	460b      	mov	r3, r1
    b9ee:	70fb      	strb	r3, [r7, #3]
    b9f0:	4613      	mov	r3, r2
    b9f2:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    b9f4:	2300      	movs	r3, #0
    b9f6:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    b9f8:	687b      	ldr	r3, [r7, #4]
    b9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    b9fc:	687b      	ldr	r3, [r7, #4]
    b9fe:	681b      	ldr	r3, [r3, #0]
    ba00:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    ba02:	f107 030c 	add.w	r3, r7, #12
    ba06:	2200      	movs	r2, #0
    ba08:	601a      	str	r2, [r3, #0]
    ba0a:	605a      	str	r2, [r3, #4]
    ba0c:	609a      	str	r2, [r3, #8]
    ba0e:	60da      	str	r2, [r3, #12]
    ba10:	611a      	str	r2, [r3, #16]
    ba12:	615a      	str	r2, [r3, #20]
    ba14:	78fb      	ldrb	r3, [r7, #3]
    ba16:	f003 0307 	and.w	r3, r3, #7
    ba1a:	b2da      	uxtb	r2, r3
    ba1c:	7b3b      	ldrb	r3, [r7, #12]
    ba1e:	f362 0302 	bfi	r3, r2, #0, #3
    ba22:	733b      	strb	r3, [r7, #12]
    ba24:	7b3b      	ldrb	r3, [r7, #12]
    ba26:	f043 0310 	orr.w	r3, r3, #16
    ba2a:	733b      	strb	r3, [r7, #12]
    ba2c:	7b3b      	ldrb	r3, [r7, #12]
    ba2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ba32:	733b      	strb	r3, [r7, #12]
    ba34:	78bb      	ldrb	r3, [r7, #2]
    ba36:	743b      	strb	r3, [r7, #16]
    ba38:	2301      	movs	r3, #1
    ba3a:	61bb      	str	r3, [r7, #24]
    ba3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    ba40:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    ba42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba44:	7b5b      	ldrb	r3, [r3, #13]
    ba46:	2b00      	cmp	r3, #0
    ba48:	d003      	beq.n	ba52 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    ba4a:	2100      	movs	r1, #0
    ba4c:	6878      	ldr	r0, [r7, #4]
    ba4e:	4b0a      	ldr	r3, [pc, #40]	; (ba78 <n25q256a_read_reg+0x94>)
    ba50:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    ba52:	f107 030c 	add.w	r3, r7, #12
    ba56:	4619      	mov	r1, r3
    ba58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ba5a:	4b08      	ldr	r3, [pc, #32]	; (ba7c <n25q256a_read_reg+0x98>)
    ba5c:	4798      	blx	r3
	if (n25q->xip_mode) {
    ba5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba60:	7b5b      	ldrb	r3, [r3, #13]
    ba62:	2b00      	cmp	r3, #0
    ba64:	d003      	beq.n	ba6e <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    ba66:	2101      	movs	r1, #1
    ba68:	6878      	ldr	r0, [r7, #4]
    ba6a:	4b03      	ldr	r3, [pc, #12]	; (ba78 <n25q256a_read_reg+0x94>)
    ba6c:	4798      	blx	r3
	}
	return status;
    ba6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    ba70:	4618      	mov	r0, r3
    ba72:	3730      	adds	r7, #48	; 0x30
    ba74:	46bd      	mov	sp, r7
    ba76:	bd80      	pop	{r7, pc}
    ba78:	0000b919 	.word	0x0000b919
    ba7c:	0000287d 	.word	0x0000287d

0000ba80 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    ba80:	b580      	push	{r7, lr}
    ba82:	b08c      	sub	sp, #48	; 0x30
    ba84:	af00      	add	r7, sp, #0
    ba86:	60f8      	str	r0, [r7, #12]
    ba88:	607b      	str	r3, [r7, #4]
    ba8a:	460b      	mov	r3, r1
    ba8c:	72fb      	strb	r3, [r7, #11]
    ba8e:	4613      	mov	r3, r2
    ba90:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ba92:	68fb      	ldr	r3, [r7, #12]
    ba94:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ba96:	68fb      	ldr	r3, [r7, #12]
    ba98:	681b      	ldr	r3, [r3, #0]
    ba9a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    ba9c:	f107 0310 	add.w	r3, r7, #16
    baa0:	2200      	movs	r2, #0
    baa2:	601a      	str	r2, [r3, #0]
    baa4:	605a      	str	r2, [r3, #4]
    baa6:	609a      	str	r2, [r3, #8]
    baa8:	60da      	str	r2, [r3, #12]
    baaa:	611a      	str	r2, [r3, #16]
    baac:	615a      	str	r2, [r3, #20]
    baae:	7afb      	ldrb	r3, [r7, #11]
    bab0:	f003 0307 	and.w	r3, r3, #7
    bab4:	b2da      	uxtb	r2, r3
    bab6:	7c3b      	ldrb	r3, [r7, #16]
    bab8:	f362 0302 	bfi	r3, r2, #0, #3
    babc:	743b      	strb	r3, [r7, #16]
    babe:	7c3b      	ldrb	r3, [r7, #16]
    bac0:	f043 0310 	orr.w	r3, r3, #16
    bac4:	743b      	strb	r3, [r7, #16]
    bac6:	7c3b      	ldrb	r3, [r7, #16]
    bac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bacc:	743b      	strb	r3, [r7, #16]
    bace:	7c7b      	ldrb	r3, [r7, #17]
    bad0:	2202      	movs	r2, #2
    bad2:	f362 1305 	bfi	r3, r2, #4, #2
    bad6:	747b      	strb	r3, [r7, #17]
    bad8:	7abb      	ldrb	r3, [r7, #10]
    bada:	753b      	strb	r3, [r7, #20]
    badc:	2301      	movs	r3, #1
    bade:	61fb      	str	r3, [r7, #28]
    bae0:	1d3b      	adds	r3, r7, #4
    bae2:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    bae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bae6:	7b5b      	ldrb	r3, [r3, #13]
    bae8:	2b00      	cmp	r3, #0
    baea:	d003      	beq.n	baf4 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    baec:	2100      	movs	r1, #0
    baee:	68f8      	ldr	r0, [r7, #12]
    baf0:	4b09      	ldr	r3, [pc, #36]	; (bb18 <n25q256a_write_reg+0x98>)
    baf2:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    baf4:	f107 0310 	add.w	r3, r7, #16
    baf8:	4619      	mov	r1, r3
    bafa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bafc:	4b07      	ldr	r3, [pc, #28]	; (bb1c <n25q256a_write_reg+0x9c>)
    bafe:	4798      	blx	r3
	if (n25q->xip_mode) {
    bb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb02:	7b5b      	ldrb	r3, [r3, #13]
    bb04:	2b00      	cmp	r3, #0
    bb06:	d003      	beq.n	bb10 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    bb08:	2101      	movs	r1, #1
    bb0a:	68f8      	ldr	r0, [r7, #12]
    bb0c:	4b02      	ldr	r3, [pc, #8]	; (bb18 <n25q256a_write_reg+0x98>)
    bb0e:	4798      	blx	r3
	}
}
    bb10:	bf00      	nop
    bb12:	3730      	adds	r7, #48	; 0x30
    bb14:	46bd      	mov	sp, r7
    bb16:	bd80      	pop	{r7, pc}
    bb18:	0000b919 	.word	0x0000b919
    bb1c:	0000287d 	.word	0x0000287d

0000bb20 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    bb20:	b580      	push	{r7, lr}
    bb22:	b090      	sub	sp, #64	; 0x40
    bb24:	af00      	add	r7, sp, #0
    bb26:	6078      	str	r0, [r7, #4]
    bb28:	460b      	mov	r3, r1
    bb2a:	70fb      	strb	r3, [r7, #3]
    bb2c:	4613      	mov	r3, r2
    bb2e:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bb30:	687b      	ldr	r3, [r7, #4]
    bb32:	681b      	ldr	r3, [r3, #0]
    bb34:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    bb36:	78bb      	ldrb	r3, [r7, #2]
    bb38:	2b00      	cmp	r3, #0
    bb3a:	d001      	beq.n	bb40 <n25q256a_write_enable+0x20>
    bb3c:	2306      	movs	r3, #6
    bb3e:	e000      	b.n	bb42 <n25q256a_write_enable+0x22>
    bb40:	2304      	movs	r3, #4
    bb42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    bb46:	f107 0320 	add.w	r3, r7, #32
    bb4a:	2200      	movs	r2, #0
    bb4c:	601a      	str	r2, [r3, #0]
    bb4e:	605a      	str	r2, [r3, #4]
    bb50:	609a      	str	r2, [r3, #8]
    bb52:	60da      	str	r2, [r3, #12]
    bb54:	611a      	str	r2, [r3, #16]
    bb56:	615a      	str	r2, [r3, #20]
    bb58:	78fb      	ldrb	r3, [r7, #3]
    bb5a:	f003 0307 	and.w	r3, r3, #7
    bb5e:	b2da      	uxtb	r2, r3
    bb60:	f897 3020 	ldrb.w	r3, [r7, #32]
    bb64:	f362 0302 	bfi	r3, r2, #0, #3
    bb68:	f887 3020 	strb.w	r3, [r7, #32]
    bb6c:	f897 3020 	ldrb.w	r3, [r7, #32]
    bb70:	f043 0310 	orr.w	r3, r3, #16
    bb74:	f887 3020 	strb.w	r3, [r7, #32]
    bb78:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    bb7c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    bb80:	f107 0308 	add.w	r3, r7, #8
    bb84:	2200      	movs	r2, #0
    bb86:	601a      	str	r2, [r3, #0]
    bb88:	605a      	str	r2, [r3, #4]
    bb8a:	609a      	str	r2, [r3, #8]
    bb8c:	60da      	str	r2, [r3, #12]
    bb8e:	611a      	str	r2, [r3, #16]
    bb90:	615a      	str	r2, [r3, #20]
    bb92:	78fb      	ldrb	r3, [r7, #3]
    bb94:	f003 0307 	and.w	r3, r3, #7
    bb98:	b2da      	uxtb	r2, r3
    bb9a:	7a3b      	ldrb	r3, [r7, #8]
    bb9c:	f362 0302 	bfi	r3, r2, #0, #3
    bba0:	723b      	strb	r3, [r7, #8]
    bba2:	7a3b      	ldrb	r3, [r7, #8]
    bba4:	f043 0310 	orr.w	r3, r3, #16
    bba8:	723b      	strb	r3, [r7, #8]
    bbaa:	7a3b      	ldrb	r3, [r7, #8]
    bbac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bbb0:	723b      	strb	r3, [r7, #8]
    bbb2:	2305      	movs	r3, #5
    bbb4:	733b      	strb	r3, [r7, #12]
    bbb6:	2301      	movs	r3, #1
    bbb8:	617b      	str	r3, [r7, #20]
    bbba:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    bbbe:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    bbc0:	f107 0320 	add.w	r3, r7, #32
    bbc4:	4619      	mov	r1, r3
    bbc6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    bbc8:	4b08      	ldr	r3, [pc, #32]	; (bbec <n25q256a_write_enable+0xcc>)
    bbca:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    bbcc:	f107 0308 	add.w	r3, r7, #8
    bbd0:	4619      	mov	r1, r3
    bbd2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    bbd4:	4b05      	ldr	r3, [pc, #20]	; (bbec <n25q256a_write_enable+0xcc>)
    bbd6:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    bbd8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    bbdc:	f003 0302 	and.w	r3, r3, #2
    bbe0:	2b00      	cmp	r3, #0
    bbe2:	d0ed      	beq.n	bbc0 <n25q256a_write_enable+0xa0>
}
    bbe4:	bf00      	nop
    bbe6:	3740      	adds	r7, #64	; 0x40
    bbe8:	46bd      	mov	sp, r7
    bbea:	bd80      	pop	{r7, pc}
    bbec:	0000287d 	.word	0x0000287d

0000bbf0 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    bbf0:	b590      	push	{r4, r7, lr}
    bbf2:	b087      	sub	sp, #28
    bbf4:	af00      	add	r7, sp, #0
    bbf6:	6078      	str	r0, [r7, #4]
    bbf8:	460b      	mov	r3, r1
    bbfa:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    bbfc:	687b      	ldr	r3, [r7, #4]
    bbfe:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bc00:	68fb      	ldr	r3, [r7, #12]
    bc02:	7b1b      	ldrb	r3, [r3, #12]
    bc04:	2b00      	cmp	r3, #0
    bc06:	d001      	beq.n	bc0c <n25q256a_switch_mode+0x1c>
    bc08:	2306      	movs	r3, #6
    bc0a:	e000      	b.n	bc0e <n25q256a_switch_mode+0x1e>
    bc0c:	2300      	movs	r3, #0
    bc0e:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    bc10:	7afb      	ldrb	r3, [r7, #11]
    bc12:	2265      	movs	r2, #101	; 0x65
    bc14:	4619      	mov	r1, r3
    bc16:	6878      	ldr	r0, [r7, #4]
    bc18:	4b25      	ldr	r3, [pc, #148]	; (bcb0 <n25q256a_switch_mode+0xc0>)
    bc1a:	4798      	blx	r3
    bc1c:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    bc1e:	2300      	movs	r3, #0
    bc20:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    bc22:	68fb      	ldr	r3, [r7, #12]
    bc24:	7b1b      	ldrb	r3, [r3, #12]
    bc26:	78fa      	ldrb	r2, [r7, #3]
    bc28:	429a      	cmp	r2, r3
    bc2a:	d03d      	beq.n	bca8 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    bc2c:	78fb      	ldrb	r3, [r7, #3]
    bc2e:	2b00      	cmp	r3, #0
    bc30:	d00b      	beq.n	bc4a <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    bc32:	697b      	ldr	r3, [r7, #20]
    bc34:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bc38:	2b00      	cmp	r3, #0
    bc3a:	d011      	beq.n	bc60 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    bc3c:	697b      	ldr	r3, [r7, #20]
    bc3e:	f003 031f 	and.w	r3, r3, #31
    bc42:	617b      	str	r3, [r7, #20]
			modify = 1;
    bc44:	2301      	movs	r3, #1
    bc46:	74fb      	strb	r3, [r7, #19]
    bc48:	e00a      	b.n	bc60 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    bc4a:	697b      	ldr	r3, [r7, #20]
    bc4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bc50:	2b00      	cmp	r3, #0
    bc52:	d105      	bne.n	bc60 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    bc54:	697b      	ldr	r3, [r7, #20]
    bc56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    bc5a:	617b      	str	r3, [r7, #20]
			modify = 1;
    bc5c:	2301      	movs	r3, #1
    bc5e:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    bc60:	7cfb      	ldrb	r3, [r7, #19]
    bc62:	2b00      	cmp	r3, #0
    bc64:	d021      	beq.n	bcaa <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    bc66:	68fb      	ldr	r3, [r7, #12]
    bc68:	78fa      	ldrb	r2, [r7, #3]
    bc6a:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    bc6c:	7afb      	ldrb	r3, [r7, #11]
    bc6e:	2201      	movs	r2, #1
    bc70:	4619      	mov	r1, r3
    bc72:	6878      	ldr	r0, [r7, #4]
    bc74:	4b0f      	ldr	r3, [pc, #60]	; (bcb4 <n25q256a_switch_mode+0xc4>)
    bc76:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    bc78:	7af9      	ldrb	r1, [r7, #11]
    bc7a:	697b      	ldr	r3, [r7, #20]
    bc7c:	2261      	movs	r2, #97	; 0x61
    bc7e:	6878      	ldr	r0, [r7, #4]
    bc80:	4c0d      	ldr	r4, [pc, #52]	; (bcb8 <n25q256a_switch_mode+0xc8>)
    bc82:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bc84:	78fb      	ldrb	r3, [r7, #3]
    bc86:	2b00      	cmp	r3, #0
    bc88:	d001      	beq.n	bc8e <n25q256a_switch_mode+0x9e>
    bc8a:	2306      	movs	r3, #6
    bc8c:	e000      	b.n	bc90 <n25q256a_switch_mode+0xa0>
    bc8e:	2300      	movs	r3, #0
    bc90:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    bc92:	7afb      	ldrb	r3, [r7, #11]
    bc94:	2265      	movs	r2, #101	; 0x65
    bc96:	4619      	mov	r1, r3
    bc98:	6878      	ldr	r0, [r7, #4]
    bc9a:	4b05      	ldr	r3, [pc, #20]	; (bcb0 <n25q256a_switch_mode+0xc0>)
    bc9c:	4798      	blx	r3
    bc9e:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    bca0:	68fb      	ldr	r3, [r7, #12]
    bca2:	78fa      	ldrb	r2, [r7, #3]
    bca4:	731a      	strb	r2, [r3, #12]
    bca6:	e000      	b.n	bcaa <n25q256a_switch_mode+0xba>
		return;
    bca8:	bf00      	nop
	}
}
    bcaa:	371c      	adds	r7, #28
    bcac:	46bd      	mov	sp, r7
    bcae:	bd90      	pop	{r4, r7, pc}
    bcb0:	0000b9e5 	.word	0x0000b9e5
    bcb4:	0000bb21 	.word	0x0000bb21
    bcb8:	0000ba81 	.word	0x0000ba81

0000bcbc <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    bcbc:	b580      	push	{r7, lr}
    bcbe:	b086      	sub	sp, #24
    bcc0:	af00      	add	r7, sp, #0
    bcc2:	60f8      	str	r0, [r7, #12]
    bcc4:	60b9      	str	r1, [r7, #8]
    bcc6:	607a      	str	r2, [r7, #4]
    bcc8:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    bcca:	68fb      	ldr	r3, [r7, #12]
    bccc:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    bcce:	4a0c      	ldr	r2, [pc, #48]	; (bd00 <n25q256a_construct+0x44>)
    bcd0:	68b9      	ldr	r1, [r7, #8]
    bcd2:	68f8      	ldr	r0, [r7, #12]
    bcd4:	4b0b      	ldr	r3, [pc, #44]	; (bd04 <n25q256a_construct+0x48>)
    bcd6:	4798      	blx	r3
	n25q->quad_mode    = 0;
    bcd8:	697b      	ldr	r3, [r7, #20]
    bcda:	2200      	movs	r2, #0
    bcdc:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    bcde:	697b      	ldr	r3, [r7, #20]
    bce0:	2200      	movs	r2, #0
    bce2:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    bce4:	697b      	ldr	r3, [r7, #20]
    bce6:	687a      	ldr	r2, [r7, #4]
    bce8:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    bcea:	78fb      	ldrb	r3, [r7, #3]
    bcec:	4619      	mov	r1, r3
    bcee:	68f8      	ldr	r0, [r7, #12]
    bcf0:	4b05      	ldr	r3, [pc, #20]	; (bd08 <n25q256a_construct+0x4c>)
    bcf2:	4798      	blx	r3
	return me;
    bcf4:	68fb      	ldr	r3, [r7, #12]
}
    bcf6:	4618      	mov	r0, r3
    bcf8:	3718      	adds	r7, #24
    bcfa:	46bd      	mov	sp, r7
    bcfc:	bd80      	pop	{r7, pc}
    bcfe:	bf00      	nop
    bd00:	0000f678 	.word	0x0000f678
    bd04:	0000c199 	.word	0x0000c199
    bd08:	0000bbf1 	.word	0x0000bbf1

0000bd0c <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    bd0c:	b580      	push	{r7, lr}
    bd0e:	b08c      	sub	sp, #48	; 0x30
    bd10:	af00      	add	r7, sp, #0
    bd12:	60f8      	str	r0, [r7, #12]
    bd14:	60b9      	str	r1, [r7, #8]
    bd16:	607a      	str	r2, [r7, #4]
    bd18:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bd1a:	68fb      	ldr	r3, [r7, #12]
    bd1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bd1e:	68fb      	ldr	r3, [r7, #12]
    bd20:	681b      	ldr	r3, [r3, #0]
    bd22:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    bd24:	f107 0310 	add.w	r3, r7, #16
    bd28:	2200      	movs	r2, #0
    bd2a:	601a      	str	r2, [r3, #0]
    bd2c:	605a      	str	r2, [r3, #4]
    bd2e:	609a      	str	r2, [r3, #8]
    bd30:	60da      	str	r2, [r3, #12]
    bd32:	611a      	str	r2, [r3, #16]
    bd34:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd38:	7b1b      	ldrb	r3, [r3, #12]
    bd3a:	2b00      	cmp	r3, #0
    bd3c:	d001      	beq.n	bd42 <n25q256a_read+0x36>
    bd3e:	2206      	movs	r2, #6
    bd40:	e000      	b.n	bd44 <n25q256a_read+0x38>
    bd42:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    bd44:	7c3b      	ldrb	r3, [r7, #16]
    bd46:	f362 0302 	bfi	r3, r2, #0, #3
    bd4a:	743b      	strb	r3, [r7, #16]
    bd4c:	7c3b      	ldrb	r3, [r7, #16]
    bd4e:	f043 0310 	orr.w	r3, r3, #16
    bd52:	743b      	strb	r3, [r7, #16]
    bd54:	7c3b      	ldrb	r3, [r7, #16]
    bd56:	f043 0320 	orr.w	r3, r3, #32
    bd5a:	743b      	strb	r3, [r7, #16]
    bd5c:	7c3b      	ldrb	r3, [r7, #16]
    bd5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bd62:	743b      	strb	r3, [r7, #16]
    bd64:	7c7b      	ldrb	r3, [r7, #17]
    bd66:	2201      	movs	r2, #1
    bd68:	f362 1305 	bfi	r3, r2, #4, #2
    bd6c:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    bd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd70:	7b1b      	ldrb	r3, [r3, #12]
    bd72:	2b00      	cmp	r3, #0
    bd74:	d001      	beq.n	bd7a <n25q256a_read+0x6e>
    bd76:	220a      	movs	r2, #10
    bd78:	e000      	b.n	bd7c <n25q256a_read+0x70>
    bd7a:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    bd7c:	7cbb      	ldrb	r3, [r7, #18]
    bd7e:	f362 0304 	bfi	r3, r2, #0, #5
    bd82:	74bb      	strb	r3, [r7, #18]
    bd84:	230b      	movs	r3, #11
    bd86:	753b      	strb	r3, [r7, #20]
    bd88:	687b      	ldr	r3, [r7, #4]
    bd8a:	61bb      	str	r3, [r7, #24]
    bd8c:	683b      	ldr	r3, [r7, #0]
    bd8e:	61fb      	str	r3, [r7, #28]
    bd90:	68bb      	ldr	r3, [r7, #8]
    bd92:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    bd94:	f107 0310 	add.w	r3, r7, #16
    bd98:	4619      	mov	r1, r3
    bd9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bd9c:	4b03      	ldr	r3, [pc, #12]	; (bdac <n25q256a_read+0xa0>)
    bd9e:	4798      	blx	r3
	return ERR_NONE;
    bda0:	2300      	movs	r3, #0
}
    bda2:	4618      	mov	r0, r3
    bda4:	3730      	adds	r7, #48	; 0x30
    bda6:	46bd      	mov	sp, r7
    bda8:	bd80      	pop	{r7, pc}
    bdaa:	bf00      	nop
    bdac:	0000287d 	.word	0x0000287d

0000bdb0 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    bdb0:	b580      	push	{r7, lr}
    bdb2:	b08c      	sub	sp, #48	; 0x30
    bdb4:	af00      	add	r7, sp, #0
    bdb6:	60f8      	str	r0, [r7, #12]
    bdb8:	60b9      	str	r1, [r7, #8]
    bdba:	607a      	str	r2, [r7, #4]
    bdbc:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bdbe:	68fb      	ldr	r3, [r7, #12]
    bdc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bdc2:	68fb      	ldr	r3, [r7, #12]
    bdc4:	681b      	ldr	r3, [r3, #0]
    bdc6:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    bdc8:	f107 0310 	add.w	r3, r7, #16
    bdcc:	2200      	movs	r2, #0
    bdce:	601a      	str	r2, [r3, #0]
    bdd0:	605a      	str	r2, [r3, #4]
    bdd2:	609a      	str	r2, [r3, #8]
    bdd4:	60da      	str	r2, [r3, #12]
    bdd6:	611a      	str	r2, [r3, #16]
    bdd8:	615a      	str	r2, [r3, #20]
    bdda:	7c3b      	ldrb	r3, [r7, #16]
    bddc:	f043 0310 	orr.w	r3, r3, #16
    bde0:	743b      	strb	r3, [r7, #16]
    bde2:	7c3b      	ldrb	r3, [r7, #16]
    bde4:	f043 0320 	orr.w	r3, r3, #32
    bde8:	743b      	strb	r3, [r7, #16]
    bdea:	7c3b      	ldrb	r3, [r7, #16]
    bdec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bdf0:	743b      	strb	r3, [r7, #16]
    bdf2:	7c7b      	ldrb	r3, [r7, #17]
    bdf4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    bdf8:	747b      	strb	r3, [r7, #17]
    bdfa:	2302      	movs	r3, #2
    bdfc:	753b      	strb	r3, [r7, #20]
    bdfe:	687b      	ldr	r3, [r7, #4]
    be00:	61bb      	str	r3, [r7, #24]
    be02:	683b      	ldr	r3, [r7, #0]
    be04:	61fb      	str	r3, [r7, #28]
    be06:	68bb      	ldr	r3, [r7, #8]
    be08:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    be0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be0c:	7b1b      	ldrb	r3, [r3, #12]
    be0e:	2b00      	cmp	r3, #0
    be10:	d001      	beq.n	be16 <n25q256a_write+0x66>
    be12:	2206      	movs	r2, #6
    be14:	e000      	b.n	be18 <n25q256a_write+0x68>
    be16:	2200      	movs	r2, #0
    be18:	7c3b      	ldrb	r3, [r7, #16]
    be1a:	f362 0302 	bfi	r3, r2, #0, #3
    be1e:	743b      	strb	r3, [r7, #16]
	while (length) {
    be20:	e035      	b.n	be8e <n25q256a_write+0xde>
		cmd.address = address;
    be22:	687b      	ldr	r3, [r7, #4]
    be24:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    be26:	683b      	ldr	r3, [r7, #0]
    be28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    be2c:	d802      	bhi.n	be34 <n25q256a_write+0x84>
			cmd.buf_len = length;
    be2e:	683b      	ldr	r3, [r7, #0]
    be30:	61fb      	str	r3, [r7, #28]
    be32:	e002      	b.n	be3a <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    be34:	f44f 7380 	mov.w	r3, #256	; 0x100
    be38:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    be3a:	7c3b      	ldrb	r3, [r7, #16]
    be3c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    be40:	b2db      	uxtb	r3, r3
    be42:	2201      	movs	r2, #1
    be44:	4619      	mov	r1, r3
    be46:	68f8      	ldr	r0, [r7, #12]
    be48:	4b19      	ldr	r3, [pc, #100]	; (beb0 <n25q256a_write+0x100>)
    be4a:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    be4c:	f107 0310 	add.w	r3, r7, #16
    be50:	4619      	mov	r1, r3
    be52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    be54:	4b17      	ldr	r3, [pc, #92]	; (beb4 <n25q256a_write+0x104>)
    be56:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    be58:	bf00      	nop
    be5a:	7c3b      	ldrb	r3, [r7, #16]
    be5c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    be60:	b2db      	uxtb	r3, r3
    be62:	2270      	movs	r2, #112	; 0x70
    be64:	4619      	mov	r1, r3
    be66:	68f8      	ldr	r0, [r7, #12]
    be68:	4b13      	ldr	r3, [pc, #76]	; (beb8 <n25q256a_write+0x108>)
    be6a:	4798      	blx	r3
    be6c:	4603      	mov	r3, r0
    be6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    be72:	2b00      	cmp	r3, #0
    be74:	d0f1      	beq.n	be5a <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    be76:	6a3a      	ldr	r2, [r7, #32]
    be78:	69fb      	ldr	r3, [r7, #28]
    be7a:	4413      	add	r3, r2
    be7c:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    be7e:	69fb      	ldr	r3, [r7, #28]
    be80:	683a      	ldr	r2, [r7, #0]
    be82:	1ad3      	subs	r3, r2, r3
    be84:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    be86:	69fb      	ldr	r3, [r7, #28]
    be88:	687a      	ldr	r2, [r7, #4]
    be8a:	4413      	add	r3, r2
    be8c:	607b      	str	r3, [r7, #4]
	while (length) {
    be8e:	683b      	ldr	r3, [r7, #0]
    be90:	2b00      	cmp	r3, #0
    be92:	d1c6      	bne.n	be22 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    be94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be96:	7b5b      	ldrb	r3, [r3, #13]
    be98:	2b00      	cmp	r3, #0
    be9a:	d003      	beq.n	bea4 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    be9c:	2101      	movs	r1, #1
    be9e:	68f8      	ldr	r0, [r7, #12]
    bea0:	4b06      	ldr	r3, [pc, #24]	; (bebc <n25q256a_write+0x10c>)
    bea2:	4798      	blx	r3
	}
	return ERR_NONE;
    bea4:	2300      	movs	r3, #0
}
    bea6:	4618      	mov	r0, r3
    bea8:	3730      	adds	r7, #48	; 0x30
    beaa:	46bd      	mov	sp, r7
    beac:	bd80      	pop	{r7, pc}
    beae:	bf00      	nop
    beb0:	0000bb21 	.word	0x0000bb21
    beb4:	0000287d 	.word	0x0000287d
    beb8:	0000b9e5 	.word	0x0000b9e5
    bebc:	0000b919 	.word	0x0000b919

0000bec0 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    bec0:	b580      	push	{r7, lr}
    bec2:	b090      	sub	sp, #64	; 0x40
    bec4:	af00      	add	r7, sp, #0
    bec6:	60f8      	str	r0, [r7, #12]
    bec8:	60b9      	str	r1, [r7, #8]
    beca:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    becc:	68fb      	ldr	r3, [r7, #12]
    bece:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bed0:	68fb      	ldr	r3, [r7, #12]
    bed2:	681b      	ldr	r3, [r3, #0]
    bed4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    bed6:	f107 0314 	add.w	r3, r7, #20
    beda:	2200      	movs	r2, #0
    bedc:	601a      	str	r2, [r3, #0]
    bede:	605a      	str	r2, [r3, #4]
    bee0:	609a      	str	r2, [r3, #8]
    bee2:	60da      	str	r2, [r3, #12]
    bee4:	611a      	str	r2, [r3, #16]
    bee6:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    beea:	7b1b      	ldrb	r3, [r3, #12]
    beec:	2b00      	cmp	r3, #0
    beee:	d001      	beq.n	bef4 <n25q256a_erase+0x34>
    bef0:	2206      	movs	r2, #6
    bef2:	e000      	b.n	bef6 <n25q256a_erase+0x36>
    bef4:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    bef6:	7d3b      	ldrb	r3, [r7, #20]
    bef8:	f362 0302 	bfi	r3, r2, #0, #3
    befc:	753b      	strb	r3, [r7, #20]
    befe:	7d3b      	ldrb	r3, [r7, #20]
    bf00:	f043 0310 	orr.w	r3, r3, #16
    bf04:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    bf06:	687b      	ldr	r3, [r7, #4]
    bf08:	4a56      	ldr	r2, [pc, #344]	; (c064 <n25q256a_erase+0x1a4>)
    bf0a:	4293      	cmp	r3, r2
    bf0c:	bf94      	ite	ls
    bf0e:	2301      	movls	r3, #1
    bf10:	2300      	movhi	r3, #0
    bf12:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    bf14:	7d3b      	ldrb	r3, [r7, #20]
    bf16:	f362 1345 	bfi	r3, r2, #5, #1
    bf1a:	753b      	strb	r3, [r7, #20]
    bf1c:	7d7b      	ldrb	r3, [r7, #21]
    bf1e:	2202      	movs	r2, #2
    bf20:	f362 1305 	bfi	r3, r2, #4, #2
    bf24:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    bf26:	68bb      	ldr	r3, [r7, #8]
    bf28:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    bf2a:	687b      	ldr	r3, [r7, #4]
    bf2c:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    bf2e:	2300      	movs	r3, #0
    bf30:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    bf32:	687b      	ldr	r3, [r7, #4]
    bf34:	f3c3 030b 	ubfx	r3, r3, #0, #12
    bf38:	2b00      	cmp	r3, #0
    bf3a:	d104      	bne.n	bf46 <n25q256a_erase+0x86>
    bf3c:	68bb      	ldr	r3, [r7, #8]
    bf3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    bf42:	2b00      	cmp	r3, #0
    bf44:	d002      	beq.n	bf4c <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    bf46:	f06f 030c 	mvn.w	r3, #12
    bf4a:	e087      	b.n	c05c <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    bf4c:	687b      	ldr	r3, [r7, #4]
    bf4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    bf52:	d368      	bcc.n	c026 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    bf54:	23c7      	movs	r3, #199	; 0xc7
    bf56:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bf58:	7d3b      	ldrb	r3, [r7, #20]
    bf5a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bf5e:	b2db      	uxtb	r3, r3
    bf60:	2201      	movs	r2, #1
    bf62:	4619      	mov	r1, r3
    bf64:	68f8      	ldr	r0, [r7, #12]
    bf66:	4b40      	ldr	r3, [pc, #256]	; (c068 <n25q256a_erase+0x1a8>)
    bf68:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    bf6a:	f107 0314 	add.w	r3, r7, #20
    bf6e:	4619      	mov	r1, r3
    bf70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bf72:	4b3e      	ldr	r3, [pc, #248]	; (c06c <n25q256a_erase+0x1ac>)
    bf74:	4798      	blx	r3
    bf76:	e059      	b.n	c02c <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    bf78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bf7a:	b29b      	uxth	r3, r3
    bf7c:	2b00      	cmp	r3, #0
    bf7e:	d11f      	bne.n	bfc0 <n25q256a_erase+0x100>
    bf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bf82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    bf86:	d31b      	bcc.n	bfc0 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    bf88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bf8a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    bf8c:	23d8      	movs	r3, #216	; 0xd8
    bf8e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bf90:	7d3b      	ldrb	r3, [r7, #20]
    bf92:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bf96:	b2db      	uxtb	r3, r3
    bf98:	2201      	movs	r2, #1
    bf9a:	4619      	mov	r1, r3
    bf9c:	68f8      	ldr	r0, [r7, #12]
    bf9e:	4b32      	ldr	r3, [pc, #200]	; (c068 <n25q256a_erase+0x1a8>)
    bfa0:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    bfa2:	f107 0314 	add.w	r3, r7, #20
    bfa6:	4619      	mov	r1, r3
    bfa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bfaa:	4b30      	ldr	r3, [pc, #192]	; (c06c <n25q256a_erase+0x1ac>)
    bfac:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    bfae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bfb0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    bfb4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    bfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bfb8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    bfbc:	63bb      	str	r3, [r7, #56]	; 0x38
    bfbe:	e023      	b.n	c008 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    bfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bfc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    bfc6:	d31b      	bcc.n	c000 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    bfc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bfca:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    bfcc:	2320      	movs	r3, #32
    bfce:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bfd0:	7d3b      	ldrb	r3, [r7, #20]
    bfd2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bfd6:	b2db      	uxtb	r3, r3
    bfd8:	2201      	movs	r2, #1
    bfda:	4619      	mov	r1, r3
    bfdc:	68f8      	ldr	r0, [r7, #12]
    bfde:	4b22      	ldr	r3, [pc, #136]	; (c068 <n25q256a_erase+0x1a8>)
    bfe0:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    bfe2:	f107 0314 	add.w	r3, r7, #20
    bfe6:	4619      	mov	r1, r3
    bfe8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bfea:	4b20      	ldr	r3, [pc, #128]	; (c06c <n25q256a_erase+0x1ac>)
    bfec:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    bfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    bff4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    bff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bff8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    bffc:	63bb      	str	r3, [r7, #56]	; 0x38
    bffe:	e003      	b.n	c008 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    c000:	f06f 030c 	mvn.w	r3, #12
    c004:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    c006:	e011      	b.n	c02c <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c008:	bf00      	nop
    c00a:	7d3b      	ldrb	r3, [r7, #20]
    c00c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c010:	b2db      	uxtb	r3, r3
    c012:	2270      	movs	r2, #112	; 0x70
    c014:	4619      	mov	r1, r3
    c016:	68f8      	ldr	r0, [r7, #12]
    c018:	4b15      	ldr	r3, [pc, #84]	; (c070 <n25q256a_erase+0x1b0>)
    c01a:	4798      	blx	r3
    c01c:	4603      	mov	r3, r0
    c01e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c022:	2b00      	cmp	r3, #0
    c024:	d0f1      	beq.n	c00a <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    c026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c028:	2b00      	cmp	r3, #0
    c02a:	d1a5      	bne.n	bf78 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c02c:	bf00      	nop
    c02e:	7d3b      	ldrb	r3, [r7, #20]
    c030:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c034:	b2db      	uxtb	r3, r3
    c036:	2270      	movs	r2, #112	; 0x70
    c038:	4619      	mov	r1, r3
    c03a:	68f8      	ldr	r0, [r7, #12]
    c03c:	4b0c      	ldr	r3, [pc, #48]	; (c070 <n25q256a_erase+0x1b0>)
    c03e:	4798      	blx	r3
    c040:	4603      	mov	r3, r0
    c042:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c046:	2b00      	cmp	r3, #0
    c048:	d0f1      	beq.n	c02e <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    c04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c04c:	7b5b      	ldrb	r3, [r3, #13]
    c04e:	2b00      	cmp	r3, #0
    c050:	d003      	beq.n	c05a <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    c052:	2101      	movs	r1, #1
    c054:	68f8      	ldr	r0, [r7, #12]
    c056:	4b07      	ldr	r3, [pc, #28]	; (c074 <n25q256a_erase+0x1b4>)
    c058:	4798      	blx	r3
	}
	return rc;
    c05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    c05c:	4618      	mov	r0, r3
    c05e:	3740      	adds	r7, #64	; 0x40
    c060:	46bd      	mov	sp, r7
    c062:	bd80      	pop	{r7, pc}
    c064:	001fffff 	.word	0x001fffff
    c068:	0000bb21 	.word	0x0000bb21
    c06c:	0000287d 	.word	0x0000287d
    c070:	0000b9e5 	.word	0x0000b9e5
    c074:	0000b919 	.word	0x0000b919

0000c078 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    c078:	b590      	push	{r4, r7, lr}
    c07a:	b085      	sub	sp, #20
    c07c:	af00      	add	r7, sp, #0
    c07e:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    c080:	687b      	ldr	r3, [r7, #4]
    c082:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c084:	68fb      	ldr	r3, [r7, #12]
    c086:	7b1b      	ldrb	r3, [r3, #12]
    c088:	2b00      	cmp	r3, #0
    c08a:	d001      	beq.n	c090 <n25q256a_enable_xip+0x18>
    c08c:	2306      	movs	r3, #6
    c08e:	e000      	b.n	c092 <n25q256a_enable_xip+0x1a>
    c090:	2300      	movs	r3, #0
    c092:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    c094:	68fb      	ldr	r3, [r7, #12]
    c096:	7b5b      	ldrb	r3, [r3, #13]
    c098:	2b00      	cmp	r3, #0
    c09a:	d129      	bne.n	c0f0 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c09c:	7afb      	ldrb	r3, [r7, #11]
    c09e:	2285      	movs	r2, #133	; 0x85
    c0a0:	4619      	mov	r1, r3
    c0a2:	6878      	ldr	r0, [r7, #4]
    c0a4:	4b15      	ldr	r3, [pc, #84]	; (c0fc <n25q256a_enable_xip+0x84>)
    c0a6:	4798      	blx	r3
    c0a8:	4603      	mov	r3, r0
    c0aa:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    c0ac:	7abb      	ldrb	r3, [r7, #10]
    c0ae:	f003 0308 	and.w	r3, r3, #8
    c0b2:	2b00      	cmp	r3, #0
    c0b4:	d015      	beq.n	c0e2 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    c0b6:	7abb      	ldrb	r3, [r7, #10]
    c0b8:	f023 0308 	bic.w	r3, r3, #8
    c0bc:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    c0be:	7abb      	ldrb	r3, [r7, #10]
    c0c0:	7af9      	ldrb	r1, [r7, #11]
    c0c2:	2281      	movs	r2, #129	; 0x81
    c0c4:	6878      	ldr	r0, [r7, #4]
    c0c6:	4c0e      	ldr	r4, [pc, #56]	; (c100 <n25q256a_enable_xip+0x88>)
    c0c8:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c0ca:	bf00      	nop
    c0cc:	7afb      	ldrb	r3, [r7, #11]
    c0ce:	2270      	movs	r2, #112	; 0x70
    c0d0:	4619      	mov	r1, r3
    c0d2:	6878      	ldr	r0, [r7, #4]
    c0d4:	4b09      	ldr	r3, [pc, #36]	; (c0fc <n25q256a_enable_xip+0x84>)
    c0d6:	4798      	blx	r3
    c0d8:	4603      	mov	r3, r0
    c0da:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c0de:	2b00      	cmp	r3, #0
    c0e0:	d0f4      	beq.n	c0cc <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    c0e2:	68fb      	ldr	r3, [r7, #12]
    c0e4:	2201      	movs	r2, #1
    c0e6:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    c0e8:	2101      	movs	r1, #1
    c0ea:	6878      	ldr	r0, [r7, #4]
    c0ec:	4b05      	ldr	r3, [pc, #20]	; (c104 <n25q256a_enable_xip+0x8c>)
    c0ee:	4798      	blx	r3
	}
	return ERR_NONE;
    c0f0:	2300      	movs	r3, #0
}
    c0f2:	4618      	mov	r0, r3
    c0f4:	3714      	adds	r7, #20
    c0f6:	46bd      	mov	sp, r7
    c0f8:	bd90      	pop	{r4, r7, pc}
    c0fa:	bf00      	nop
    c0fc:	0000b9e5 	.word	0x0000b9e5
    c100:	0000ba81 	.word	0x0000ba81
    c104:	0000b919 	.word	0x0000b919

0000c108 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    c108:	b580      	push	{r7, lr}
    c10a:	b086      	sub	sp, #24
    c10c:	af00      	add	r7, sp, #0
    c10e:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c110:	687b      	ldr	r3, [r7, #4]
    c112:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c114:	687b      	ldr	r3, [r7, #4]
    c116:	681b      	ldr	r3, [r3, #0]
    c118:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c11a:	697b      	ldr	r3, [r7, #20]
    c11c:	7b1b      	ldrb	r3, [r3, #12]
    c11e:	2b00      	cmp	r3, #0
    c120:	d001      	beq.n	c126 <n25q256a_disable_xip+0x1e>
    c122:	2306      	movs	r3, #6
    c124:	e000      	b.n	c128 <n25q256a_disable_xip+0x20>
    c126:	2300      	movs	r3, #0
    c128:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    c12a:	2100      	movs	r1, #0
    c12c:	6878      	ldr	r0, [r7, #4]
    c12e:	4b15      	ldr	r3, [pc, #84]	; (c184 <n25q256a_disable_xip+0x7c>)
    c130:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c132:	7bfb      	ldrb	r3, [r7, #15]
    c134:	2285      	movs	r2, #133	; 0x85
    c136:	4619      	mov	r1, r3
    c138:	6878      	ldr	r0, [r7, #4]
    c13a:	4b13      	ldr	r3, [pc, #76]	; (c188 <n25q256a_disable_xip+0x80>)
    c13c:	4798      	blx	r3
    c13e:	4603      	mov	r3, r0
    c140:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    c142:	7bbb      	ldrb	r3, [r7, #14]
    c144:	f003 0308 	and.w	r3, r3, #8
    c148:	2b00      	cmp	r3, #0
    c14a:	d113      	bne.n	c174 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    c14c:	697b      	ldr	r3, [r7, #20]
    c14e:	689b      	ldr	r3, [r3, #8]
    c150:	2b00      	cmp	r3, #0
    c152:	d00f      	beq.n	c174 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    c154:	693b      	ldr	r3, [r7, #16]
    c156:	681b      	ldr	r3, [r3, #0]
    c158:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    c15a:	6938      	ldr	r0, [r7, #16]
    c15c:	4b0b      	ldr	r3, [pc, #44]	; (c18c <n25q256a_disable_xip+0x84>)
    c15e:	4798      	blx	r3
			n25q->pin_exit_xip();
    c160:	697b      	ldr	r3, [r7, #20]
    c162:	689b      	ldr	r3, [r3, #8]
    c164:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    c166:	68b9      	ldr	r1, [r7, #8]
    c168:	6938      	ldr	r0, [r7, #16]
    c16a:	4b09      	ldr	r3, [pc, #36]	; (c190 <n25q256a_disable_xip+0x88>)
    c16c:	4798      	blx	r3
			qspi_sync_enable(descr);
    c16e:	6938      	ldr	r0, [r7, #16]
    c170:	4b08      	ldr	r3, [pc, #32]	; (c194 <n25q256a_disable_xip+0x8c>)
    c172:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    c174:	697b      	ldr	r3, [r7, #20]
    c176:	2200      	movs	r2, #0
    c178:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c17a:	2300      	movs	r3, #0
}
    c17c:	4618      	mov	r0, r3
    c17e:	3718      	adds	r7, #24
    c180:	46bd      	mov	sp, r7
    c182:	bd80      	pop	{r7, pc}
    c184:	0000b919 	.word	0x0000b919
    c188:	0000b9e5 	.word	0x0000b9e5
    c18c:	00002841 	.word	0x00002841
    c190:	000027b9 	.word	0x000027b9
    c194:	00002805 	.word	0x00002805

0000c198 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    c198:	b480      	push	{r7}
    c19a:	b085      	sub	sp, #20
    c19c:	af00      	add	r7, sp, #0
    c19e:	60f8      	str	r0, [r7, #12]
    c1a0:	60b9      	str	r1, [r7, #8]
    c1a2:	607a      	str	r2, [r7, #4]
	me->io        = io;
    c1a4:	68fb      	ldr	r3, [r7, #12]
    c1a6:	68ba      	ldr	r2, [r7, #8]
    c1a8:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    c1aa:	68fb      	ldr	r3, [r7, #12]
    c1ac:	687a      	ldr	r2, [r7, #4]
    c1ae:	605a      	str	r2, [r3, #4]

	return me;
    c1b0:	68fb      	ldr	r3, [r7, #12]
}
    c1b2:	4618      	mov	r0, r3
    c1b4:	3714      	adds	r7, #20
    c1b6:	46bd      	mov	sp, r7
    c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1bc:	4770      	bx	lr

0000c1be <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    c1be:	b480      	push	{r7}
    c1c0:	b083      	sub	sp, #12
    c1c2:	af00      	add	r7, sp, #0
    c1c4:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c1c6:	687b      	ldr	r3, [r7, #4]
    c1c8:	781b      	ldrb	r3, [r3, #0]
    c1ca:	b29a      	uxth	r2, r3
    c1cc:	687b      	ldr	r3, [r7, #4]
    c1ce:	3301      	adds	r3, #1
    c1d0:	781b      	ldrb	r3, [r3, #0]
    c1d2:	b29b      	uxth	r3, r3
    c1d4:	021b      	lsls	r3, r3, #8
    c1d6:	b29b      	uxth	r3, r3
    c1d8:	4413      	add	r3, r2
    c1da:	b29b      	uxth	r3, r3
}
    c1dc:	4618      	mov	r0, r3
    c1de:	370c      	adds	r7, #12
    c1e0:	46bd      	mov	sp, r7
    c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1e6:	4770      	bx	lr

0000c1e8 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    c1e8:	b480      	push	{r7}
    c1ea:	b083      	sub	sp, #12
    c1ec:	af00      	add	r7, sp, #0
    c1ee:	6078      	str	r0, [r7, #4]
	return desc[0];
    c1f0:	687b      	ldr	r3, [r7, #4]
    c1f2:	781b      	ldrb	r3, [r3, #0]
}
    c1f4:	4618      	mov	r0, r3
    c1f6:	370c      	adds	r7, #12
    c1f8:	46bd      	mov	sp, r7
    c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1fe:	4770      	bx	lr

0000c200 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    c200:	b580      	push	{r7, lr}
    c202:	b082      	sub	sp, #8
    c204:	af00      	add	r7, sp, #0
    c206:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c208:	6878      	ldr	r0, [r7, #4]
    c20a:	4b05      	ldr	r3, [pc, #20]	; (c220 <usb_desc_next+0x20>)
    c20c:	4798      	blx	r3
    c20e:	4603      	mov	r3, r0
    c210:	461a      	mov	r2, r3
    c212:	687b      	ldr	r3, [r7, #4]
    c214:	4413      	add	r3, r2
}
    c216:	4618      	mov	r0, r3
    c218:	3708      	adds	r7, #8
    c21a:	46bd      	mov	sp, r7
    c21c:	bd80      	pop	{r7, pc}
    c21e:	bf00      	nop
    c220:	0000c1e9 	.word	0x0000c1e9

0000c224 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c224:	b580      	push	{r7, lr}
    c226:	b08c      	sub	sp, #48	; 0x30
    c228:	af00      	add	r7, sp, #0
    c22a:	6078      	str	r0, [r7, #4]
    c22c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c22e:	687b      	ldr	r3, [r7, #4]
    c230:	689b      	ldr	r3, [r3, #8]
    c232:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    c234:	683b      	ldr	r3, [r7, #0]
    c236:	681b      	ldr	r3, [r3, #0]
    c238:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c23a:	2300      	movs	r3, #0
    c23c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c240:	e08f      	b.n	c362 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    c242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c244:	2b00      	cmp	r3, #0
    c246:	d102      	bne.n	c24e <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    c248:	f06f 0309 	mvn.w	r3, #9
    c24c:	e092      	b.n	c374 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    c24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c250:	789b      	ldrb	r3, [r3, #2]
    c252:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    c254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c256:	795b      	ldrb	r3, [r3, #5]
    c258:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c25a:	7c7b      	ldrb	r3, [r7, #17]
    c25c:	2b02      	cmp	r3, #2
    c25e:	d002      	beq.n	c266 <cdcdf_acm_enable+0x42>
    c260:	7c7b      	ldrb	r3, [r7, #17]
    c262:	2b0a      	cmp	r3, #10
    c264:	d121      	bne.n	c2aa <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c26a:	6a3a      	ldr	r2, [r7, #32]
    c26c:	5cd2      	ldrb	r2, [r2, r3]
    c26e:	7bbb      	ldrb	r3, [r7, #14]
    c270:	429a      	cmp	r2, r3
    c272:	d102      	bne.n	c27a <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    c274:	f06f 0311 	mvn.w	r3, #17
    c278:	e07c      	b.n	c374 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c27a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c27e:	6a3a      	ldr	r2, [r7, #32]
    c280:	5cd3      	ldrb	r3, [r2, r3]
    c282:	2bff      	cmp	r3, #255	; 0xff
    c284:	d002      	beq.n	c28c <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    c286:	f06f 031b 	mvn.w	r3, #27
    c28a:	e073      	b.n	c374 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c28c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c290:	7bb9      	ldrb	r1, [r7, #14]
    c292:	6a3a      	ldr	r2, [r7, #32]
    c294:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c296:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c298:	683b      	ldr	r3, [r7, #0]
    c29a:	685b      	ldr	r3, [r3, #4]
    c29c:	2205      	movs	r2, #5
    c29e:	4619      	mov	r1, r3
    c2a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c2a2:	4b36      	ldr	r3, [pc, #216]	; (c37c <cdcdf_acm_enable+0x158>)
    c2a4:	4798      	blx	r3
    c2a6:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c2a8:	e047      	b.n	c33a <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    c2aa:	f06f 0309 	mvn.w	r3, #9
    c2ae:	e061      	b.n	c374 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    c2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c2b2:	789b      	ldrb	r3, [r3, #2]
    c2b4:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    c2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c2b8:	78db      	ldrb	r3, [r3, #3]
    c2ba:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    c2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c2be:	3304      	adds	r3, #4
    c2c0:	4618      	mov	r0, r3
    c2c2:	4b2f      	ldr	r3, [pc, #188]	; (c380 <cdcdf_acm_enable+0x15c>)
    c2c4:	4798      	blx	r3
    c2c6:	4603      	mov	r3, r0
    c2c8:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c2ca:	7ebb      	ldrb	r3, [r7, #26]
    c2cc:	7ef9      	ldrb	r1, [r7, #27]
    c2ce:	8bba      	ldrh	r2, [r7, #28]
    c2d0:	4618      	mov	r0, r3
    c2d2:	4b2c      	ldr	r3, [pc, #176]	; (c384 <cdcdf_acm_enable+0x160>)
    c2d4:	4798      	blx	r3
    c2d6:	4603      	mov	r3, r0
    c2d8:	2b00      	cmp	r3, #0
    c2da:	d002      	beq.n	c2e2 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    c2dc:	f06f 0313 	mvn.w	r3, #19
    c2e0:	e048      	b.n	c374 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c2e2:	7ebb      	ldrb	r3, [r7, #26]
    c2e4:	b25b      	sxtb	r3, r3
    c2e6:	2b00      	cmp	r3, #0
    c2e8:	da0f      	bge.n	c30a <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c2ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c2ee:	7eb9      	ldrb	r1, [r7, #26]
    c2f0:	6a3a      	ldr	r2, [r7, #32]
    c2f2:	4413      	add	r3, r2
    c2f4:	460a      	mov	r2, r1
    c2f6:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    c2f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c2fc:	6a3a      	ldr	r2, [r7, #32]
    c2fe:	4413      	add	r3, r2
    c300:	789b      	ldrb	r3, [r3, #2]
    c302:	4618      	mov	r0, r3
    c304:	4b20      	ldr	r3, [pc, #128]	; (c388 <cdcdf_acm_enable+0x164>)
    c306:	4798      	blx	r3
    c308:	e007      	b.n	c31a <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c30a:	7eba      	ldrb	r2, [r7, #26]
    c30c:	6a3b      	ldr	r3, [r7, #32]
    c30e:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c310:	6a3b      	ldr	r3, [r7, #32]
    c312:	791b      	ldrb	r3, [r3, #4]
    c314:	4618      	mov	r0, r3
    c316:	4b1c      	ldr	r3, [pc, #112]	; (c388 <cdcdf_acm_enable+0x164>)
    c318:	4798      	blx	r3
			}
			desc->sod = ep;
    c31a:	683b      	ldr	r3, [r7, #0]
    c31c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c31e:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c320:	683b      	ldr	r3, [r7, #0]
    c322:	681b      	ldr	r3, [r3, #0]
    c324:	4618      	mov	r0, r3
    c326:	4b19      	ldr	r3, [pc, #100]	; (c38c <cdcdf_acm_enable+0x168>)
    c328:	4798      	blx	r3
    c32a:	4602      	mov	r2, r0
    c32c:	683b      	ldr	r3, [r7, #0]
    c32e:	685b      	ldr	r3, [r3, #4]
    c330:	4619      	mov	r1, r3
    c332:	4610      	mov	r0, r2
    c334:	4b16      	ldr	r3, [pc, #88]	; (c390 <cdcdf_acm_enable+0x16c>)
    c336:	4798      	blx	r3
    c338:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c33c:	2b00      	cmp	r3, #0
    c33e:	d1b7      	bne.n	c2b0 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c340:	683b      	ldr	r3, [r7, #0]
    c342:	681b      	ldr	r3, [r3, #0]
    c344:	4618      	mov	r0, r3
    c346:	4b11      	ldr	r3, [pc, #68]	; (c38c <cdcdf_acm_enable+0x168>)
    c348:	4798      	blx	r3
    c34a:	683b      	ldr	r3, [r7, #0]
    c34c:	685b      	ldr	r3, [r3, #4]
    c34e:	2204      	movs	r2, #4
    c350:	4619      	mov	r1, r3
    c352:	4b0a      	ldr	r3, [pc, #40]	; (c37c <cdcdf_acm_enable+0x158>)
    c354:	4798      	blx	r3
    c356:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c35c:	3301      	adds	r3, #1
    c35e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c366:	2b01      	cmp	r3, #1
    c368:	f67f af6b 	bls.w	c242 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    c36c:	4b09      	ldr	r3, [pc, #36]	; (c394 <cdcdf_acm_enable+0x170>)
    c36e:	2201      	movs	r2, #1
    c370:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c372:	2300      	movs	r3, #0
}
    c374:	4618      	mov	r0, r3
    c376:	3730      	adds	r7, #48	; 0x30
    c378:	46bd      	mov	sp, r7
    c37a:	bd80      	pop	{r7, pc}
    c37c:	0000d5e5 	.word	0x0000d5e5
    c380:	0000c1bf 	.word	0x0000c1bf
    c384:	00003431 	.word	0x00003431
    c388:	0000351d 	.word	0x0000351d
    c38c:	0000c201 	.word	0x0000c201
    c390:	0000d641 	.word	0x0000d641
    c394:	20000e18 	.word	0x20000e18

0000c398 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c398:	b580      	push	{r7, lr}
    c39a:	b088      	sub	sp, #32
    c39c:	af00      	add	r7, sp, #0
    c39e:	6078      	str	r0, [r7, #4]
    c3a0:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c3a2:	687b      	ldr	r3, [r7, #4]
    c3a4:	689b      	ldr	r3, [r3, #8]
    c3a6:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    c3a8:	683b      	ldr	r3, [r7, #0]
    c3aa:	2b00      	cmp	r3, #0
    c3ac:	d00c      	beq.n	c3c8 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c3ae:	683b      	ldr	r3, [r7, #0]
    c3b0:	681b      	ldr	r3, [r3, #0]
    c3b2:	795b      	ldrb	r3, [r3, #5]
    c3b4:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c3b6:	7c7b      	ldrb	r3, [r7, #17]
    c3b8:	2b02      	cmp	r3, #2
    c3ba:	d005      	beq.n	c3c8 <cdcdf_acm_disable+0x30>
    c3bc:	7c7b      	ldrb	r3, [r7, #17]
    c3be:	2b0a      	cmp	r3, #10
    c3c0:	d002      	beq.n	c3c8 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    c3c2:	f06f 0309 	mvn.w	r3, #9
    c3c6:	e035      	b.n	c434 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    c3c8:	2300      	movs	r3, #0
    c3ca:	77fb      	strb	r3, [r7, #31]
    c3cc:	e01f      	b.n	c40e <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    c3ce:	7ffb      	ldrb	r3, [r7, #31]
    c3d0:	69ba      	ldr	r2, [r7, #24]
    c3d2:	5cd3      	ldrb	r3, [r2, r3]
    c3d4:	2bff      	cmp	r3, #255	; 0xff
    c3d6:	d016      	beq.n	c406 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    c3d8:	7ffb      	ldrb	r3, [r7, #31]
    c3da:	69ba      	ldr	r2, [r7, #24]
    c3dc:	21ff      	movs	r1, #255	; 0xff
    c3de:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    c3e0:	7ffb      	ldrb	r3, [r7, #31]
    c3e2:	69ba      	ldr	r2, [r7, #24]
    c3e4:	4413      	add	r3, r2
    c3e6:	789b      	ldrb	r3, [r3, #2]
    c3e8:	2bff      	cmp	r3, #255	; 0xff
    c3ea:	d00d      	beq.n	c408 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c3ec:	7ffb      	ldrb	r3, [r7, #31]
    c3ee:	69ba      	ldr	r2, [r7, #24]
    c3f0:	4413      	add	r3, r2
    c3f2:	789b      	ldrb	r3, [r3, #2]
    c3f4:	4618      	mov	r0, r3
    c3f6:	4b11      	ldr	r3, [pc, #68]	; (c43c <cdcdf_acm_disable+0xa4>)
    c3f8:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    c3fa:	7ffb      	ldrb	r3, [r7, #31]
    c3fc:	69ba      	ldr	r2, [r7, #24]
    c3fe:	4413      	add	r3, r2
    c400:	22ff      	movs	r2, #255	; 0xff
    c402:	709a      	strb	r2, [r3, #2]
    c404:	e000      	b.n	c408 <cdcdf_acm_disable+0x70>
			continue;
    c406:	bf00      	nop
	for (i = 0; i < 2; i++) {
    c408:	7ffb      	ldrb	r3, [r7, #31]
    c40a:	3301      	adds	r3, #1
    c40c:	77fb      	strb	r3, [r7, #31]
    c40e:	7ffb      	ldrb	r3, [r7, #31]
    c410:	2b01      	cmp	r3, #1
    c412:	d9dc      	bls.n	c3ce <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    c414:	69bb      	ldr	r3, [r7, #24]
    c416:	791b      	ldrb	r3, [r3, #4]
    c418:	2bff      	cmp	r3, #255	; 0xff
    c41a:	d007      	beq.n	c42c <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    c41c:	69bb      	ldr	r3, [r7, #24]
    c41e:	791b      	ldrb	r3, [r3, #4]
    c420:	4618      	mov	r0, r3
    c422:	4b06      	ldr	r3, [pc, #24]	; (c43c <cdcdf_acm_disable+0xa4>)
    c424:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    c426:	69bb      	ldr	r3, [r7, #24]
    c428:	22ff      	movs	r2, #255	; 0xff
    c42a:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    c42c:	4b04      	ldr	r3, [pc, #16]	; (c440 <cdcdf_acm_disable+0xa8>)
    c42e:	2200      	movs	r2, #0
    c430:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c432:	2300      	movs	r3, #0
}
    c434:	4618      	mov	r0, r3
    c436:	3720      	adds	r7, #32
    c438:	46bd      	mov	sp, r7
    c43a:	bd80      	pop	{r7, pc}
    c43c:	000034cd 	.word	0x000034cd
    c440:	20000e18 	.word	0x20000e18

0000c444 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    c444:	b580      	push	{r7, lr}
    c446:	b084      	sub	sp, #16
    c448:	af00      	add	r7, sp, #0
    c44a:	60f8      	str	r0, [r7, #12]
    c44c:	460b      	mov	r3, r1
    c44e:	607a      	str	r2, [r7, #4]
    c450:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    c452:	7afb      	ldrb	r3, [r7, #11]
    c454:	2b01      	cmp	r3, #1
    c456:	d009      	beq.n	c46c <cdcdf_acm_ctrl+0x28>
    c458:	2b02      	cmp	r3, #2
    c45a:	d00d      	beq.n	c478 <cdcdf_acm_ctrl+0x34>
    c45c:	2b00      	cmp	r3, #0
    c45e:	d10e      	bne.n	c47e <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    c460:	6879      	ldr	r1, [r7, #4]
    c462:	68f8      	ldr	r0, [r7, #12]
    c464:	4b09      	ldr	r3, [pc, #36]	; (c48c <cdcdf_acm_ctrl+0x48>)
    c466:	4798      	blx	r3
    c468:	4603      	mov	r3, r0
    c46a:	e00a      	b.n	c482 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    c46c:	6879      	ldr	r1, [r7, #4]
    c46e:	68f8      	ldr	r0, [r7, #12]
    c470:	4b07      	ldr	r3, [pc, #28]	; (c490 <cdcdf_acm_ctrl+0x4c>)
    c472:	4798      	blx	r3
    c474:	4603      	mov	r3, r0
    c476:	e004      	b.n	c482 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    c478:	f06f 031a 	mvn.w	r3, #26
    c47c:	e001      	b.n	c482 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    c47e:	f06f 030c 	mvn.w	r3, #12
	}
}
    c482:	4618      	mov	r0, r3
    c484:	3710      	adds	r7, #16
    c486:	46bd      	mov	sp, r7
    c488:	bd80      	pop	{r7, pc}
    c48a:	bf00      	nop
    c48c:	0000c225 	.word	0x0000c225
    c490:	0000c399 	.word	0x0000c399

0000c494 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c494:	b590      	push	{r4, r7, lr}
    c496:	b087      	sub	sp, #28
    c498:	af00      	add	r7, sp, #0
    c49a:	4603      	mov	r3, r0
    c49c:	6039      	str	r1, [r7, #0]
    c49e:	71fb      	strb	r3, [r7, #7]
    c4a0:	4613      	mov	r3, r2
    c4a2:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    c4a4:	683b      	ldr	r3, [r7, #0]
    c4a6:	799a      	ldrb	r2, [r3, #6]
    c4a8:	79db      	ldrb	r3, [r3, #7]
    c4aa:	021b      	lsls	r3, r3, #8
    c4ac:	4313      	orrs	r3, r2
    c4ae:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c4b0:	4b2b      	ldr	r3, [pc, #172]	; (c560 <cdcdf_acm_set_req+0xcc>)
    c4b2:	4798      	blx	r3
    c4b4:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    c4b6:	683b      	ldr	r3, [r7, #0]
    c4b8:	785b      	ldrb	r3, [r3, #1]
    c4ba:	2b20      	cmp	r3, #32
    c4bc:	d002      	beq.n	c4c4 <cdcdf_acm_set_req+0x30>
    c4be:	2b22      	cmp	r3, #34	; 0x22
    c4c0:	d034      	beq.n	c52c <cdcdf_acm_set_req+0x98>
    c4c2:	e046      	b.n	c552 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c4c4:	8afb      	ldrh	r3, [r7, #22]
    c4c6:	2b07      	cmp	r3, #7
    c4c8:	d002      	beq.n	c4d0 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    c4ca:	f04f 33ff 	mov.w	r3, #4294967295
    c4ce:	e042      	b.n	c556 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    c4d0:	79bb      	ldrb	r3, [r7, #6]
    c4d2:	2b00      	cmp	r3, #0
    c4d4:	d107      	bne.n	c4e6 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c4d6:	8afa      	ldrh	r2, [r7, #22]
    c4d8:	79f8      	ldrb	r0, [r7, #7]
    c4da:	2300      	movs	r3, #0
    c4dc:	6939      	ldr	r1, [r7, #16]
    c4de:	4c21      	ldr	r4, [pc, #132]	; (c564 <cdcdf_acm_set_req+0xd0>)
    c4e0:	47a0      	blx	r4
    c4e2:	4603      	mov	r3, r0
    c4e4:	e037      	b.n	c556 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c4e6:	693a      	ldr	r2, [r7, #16]
    c4e8:	f107 0308 	add.w	r3, r7, #8
    c4ec:	6810      	ldr	r0, [r2, #0]
    c4ee:	6018      	str	r0, [r3, #0]
    c4f0:	8891      	ldrh	r1, [r2, #4]
    c4f2:	7992      	ldrb	r2, [r2, #6]
    c4f4:	8099      	strh	r1, [r3, #4]
    c4f6:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c4f8:	4b1b      	ldr	r3, [pc, #108]	; (c568 <cdcdf_acm_set_req+0xd4>)
    c4fa:	681b      	ldr	r3, [r3, #0]
    c4fc:	2b00      	cmp	r3, #0
    c4fe:	d008      	beq.n	c512 <cdcdf_acm_set_req+0x7e>
    c500:	4b19      	ldr	r3, [pc, #100]	; (c568 <cdcdf_acm_set_req+0xd4>)
    c502:	681b      	ldr	r3, [r3, #0]
    c504:	f107 0208 	add.w	r2, r7, #8
    c508:	4610      	mov	r0, r2
    c50a:	4798      	blx	r3
    c50c:	4603      	mov	r3, r0
    c50e:	2b00      	cmp	r3, #0
    c510:	d00a      	beq.n	c528 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c512:	4b16      	ldr	r3, [pc, #88]	; (c56c <cdcdf_acm_set_req+0xd8>)
    c514:	f107 0208 	add.w	r2, r7, #8
    c518:	e892 0003 	ldmia.w	r2, {r0, r1}
    c51c:	6018      	str	r0, [r3, #0]
    c51e:	3304      	adds	r3, #4
    c520:	8019      	strh	r1, [r3, #0]
    c522:	3302      	adds	r3, #2
    c524:	0c0a      	lsrs	r2, r1, #16
    c526:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    c528:	2300      	movs	r3, #0
    c52a:	e014      	b.n	c556 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    c52c:	2300      	movs	r3, #0
    c52e:	2200      	movs	r2, #0
    c530:	2100      	movs	r1, #0
    c532:	2000      	movs	r0, #0
    c534:	4c0b      	ldr	r4, [pc, #44]	; (c564 <cdcdf_acm_set_req+0xd0>)
    c536:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    c538:	4b0d      	ldr	r3, [pc, #52]	; (c570 <cdcdf_acm_set_req+0xdc>)
    c53a:	681b      	ldr	r3, [r3, #0]
    c53c:	2b00      	cmp	r3, #0
    c53e:	d006      	beq.n	c54e <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    c540:	4b0b      	ldr	r3, [pc, #44]	; (c570 <cdcdf_acm_set_req+0xdc>)
    c542:	681b      	ldr	r3, [r3, #0]
    c544:	683a      	ldr	r2, [r7, #0]
    c546:	8852      	ldrh	r2, [r2, #2]
    c548:	b292      	uxth	r2, r2
    c54a:	4610      	mov	r0, r2
    c54c:	4798      	blx	r3
		}
		return ERR_NONE;
    c54e:	2300      	movs	r3, #0
    c550:	e001      	b.n	c556 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    c552:	f06f 030c 	mvn.w	r3, #12
	}
}
    c556:	4618      	mov	r0, r3
    c558:	371c      	adds	r7, #28
    c55a:	46bd      	mov	sp, r7
    c55c:	bd90      	pop	{r4, r7, pc}
    c55e:	bf00      	nop
    c560:	0000d4e1 	.word	0x0000d4e1
    c564:	0000d355 	.word	0x0000d355
    c568:	20000e2c 	.word	0x20000e2c
    c56c:	20000e20 	.word	0x20000e20
    c570:	20000e28 	.word	0x20000e28

0000c574 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c574:	b590      	push	{r4, r7, lr}
    c576:	b085      	sub	sp, #20
    c578:	af00      	add	r7, sp, #0
    c57a:	4603      	mov	r3, r0
    c57c:	6039      	str	r1, [r7, #0]
    c57e:	71fb      	strb	r3, [r7, #7]
    c580:	4613      	mov	r3, r2
    c582:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    c584:	683b      	ldr	r3, [r7, #0]
    c586:	799a      	ldrb	r2, [r3, #6]
    c588:	79db      	ldrb	r3, [r3, #7]
    c58a:	021b      	lsls	r3, r3, #8
    c58c:	4313      	orrs	r3, r2
    c58e:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    c590:	79bb      	ldrb	r3, [r7, #6]
    c592:	2b01      	cmp	r3, #1
    c594:	d101      	bne.n	c59a <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    c596:	2300      	movs	r3, #0
    c598:	e013      	b.n	c5c2 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    c59a:	683b      	ldr	r3, [r7, #0]
    c59c:	785b      	ldrb	r3, [r3, #1]
    c59e:	2b21      	cmp	r3, #33	; 0x21
    c5a0:	d10d      	bne.n	c5be <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c5a2:	89fb      	ldrh	r3, [r7, #14]
    c5a4:	2b07      	cmp	r3, #7
    c5a6:	d002      	beq.n	c5ae <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    c5a8:	f04f 33ff 	mov.w	r3, #4294967295
    c5ac:	e009      	b.n	c5c2 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c5ae:	89fa      	ldrh	r2, [r7, #14]
    c5b0:	79f8      	ldrb	r0, [r7, #7]
    c5b2:	2300      	movs	r3, #0
    c5b4:	4905      	ldr	r1, [pc, #20]	; (c5cc <cdcdf_acm_get_req+0x58>)
    c5b6:	4c06      	ldr	r4, [pc, #24]	; (c5d0 <cdcdf_acm_get_req+0x5c>)
    c5b8:	47a0      	blx	r4
    c5ba:	4603      	mov	r3, r0
    c5bc:	e001      	b.n	c5c2 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    c5be:	f06f 030c 	mvn.w	r3, #12
	}
}
    c5c2:	4618      	mov	r0, r3
    c5c4:	3714      	adds	r7, #20
    c5c6:	46bd      	mov	sp, r7
    c5c8:	bd90      	pop	{r4, r7, pc}
    c5ca:	bf00      	nop
    c5cc:	20000e20 	.word	0x20000e20
    c5d0:	0000d355 	.word	0x0000d355

0000c5d4 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c5d4:	b580      	push	{r7, lr}
    c5d6:	b082      	sub	sp, #8
    c5d8:	af00      	add	r7, sp, #0
    c5da:	4603      	mov	r3, r0
    c5dc:	6039      	str	r1, [r7, #0]
    c5de:	71fb      	strb	r3, [r7, #7]
    c5e0:	4613      	mov	r3, r2
    c5e2:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c5e4:	683b      	ldr	r3, [r7, #0]
    c5e6:	781b      	ldrb	r3, [r3, #0]
    c5e8:	095b      	lsrs	r3, r3, #5
    c5ea:	b2db      	uxtb	r3, r3
    c5ec:	f003 0303 	and.w	r3, r3, #3
    c5f0:	2b01      	cmp	r3, #1
    c5f2:	d002      	beq.n	c5fa <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    c5f4:	f06f 0309 	mvn.w	r3, #9
    c5f8:	e026      	b.n	c648 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c5fa:	683b      	ldr	r3, [r7, #0]
    c5fc:	889b      	ldrh	r3, [r3, #4]
    c5fe:	b29a      	uxth	r2, r3
    c600:	4b13      	ldr	r3, [pc, #76]	; (c650 <cdcdf_acm_req+0x7c>)
    c602:	781b      	ldrb	r3, [r3, #0]
    c604:	b29b      	uxth	r3, r3
    c606:	429a      	cmp	r2, r3
    c608:	d007      	beq.n	c61a <cdcdf_acm_req+0x46>
    c60a:	683b      	ldr	r3, [r7, #0]
    c60c:	889b      	ldrh	r3, [r3, #4]
    c60e:	b29a      	uxth	r2, r3
    c610:	4b0f      	ldr	r3, [pc, #60]	; (c650 <cdcdf_acm_req+0x7c>)
    c612:	785b      	ldrb	r3, [r3, #1]
    c614:	b29b      	uxth	r3, r3
    c616:	429a      	cmp	r2, r3
    c618:	d114      	bne.n	c644 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c61a:	683b      	ldr	r3, [r7, #0]
    c61c:	781b      	ldrb	r3, [r3, #0]
    c61e:	b25b      	sxtb	r3, r3
    c620:	2b00      	cmp	r3, #0
    c622:	da07      	bge.n	c634 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    c624:	79ba      	ldrb	r2, [r7, #6]
    c626:	79fb      	ldrb	r3, [r7, #7]
    c628:	6839      	ldr	r1, [r7, #0]
    c62a:	4618      	mov	r0, r3
    c62c:	4b09      	ldr	r3, [pc, #36]	; (c654 <cdcdf_acm_req+0x80>)
    c62e:	4798      	blx	r3
    c630:	4603      	mov	r3, r0
    c632:	e009      	b.n	c648 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    c634:	79ba      	ldrb	r2, [r7, #6]
    c636:	79fb      	ldrb	r3, [r7, #7]
    c638:	6839      	ldr	r1, [r7, #0]
    c63a:	4618      	mov	r0, r3
    c63c:	4b06      	ldr	r3, [pc, #24]	; (c658 <cdcdf_acm_req+0x84>)
    c63e:	4798      	blx	r3
    c640:	4603      	mov	r3, r0
    c642:	e001      	b.n	c648 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    c644:	f06f 0309 	mvn.w	r3, #9
	}
}
    c648:	4618      	mov	r0, r3
    c64a:	3708      	adds	r7, #8
    c64c:	46bd      	mov	sp, r7
    c64e:	bd80      	pop	{r7, pc}
    c650:	20000e18 	.word	0x20000e18
    c654:	0000c575 	.word	0x0000c575
    c658:	0000c495 	.word	0x0000c495

0000c65c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c65c:	b580      	push	{r7, lr}
    c65e:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    c660:	4b0b      	ldr	r3, [pc, #44]	; (c690 <cdcdf_acm_init+0x34>)
    c662:	4798      	blx	r3
    c664:	4603      	mov	r3, r0
    c666:	2b01      	cmp	r3, #1
    c668:	d902      	bls.n	c670 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    c66a:	f06f 0310 	mvn.w	r3, #16
    c66e:	e00d      	b.n	c68c <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c670:	4b08      	ldr	r3, [pc, #32]	; (c694 <cdcdf_acm_init+0x38>)
    c672:	4a09      	ldr	r2, [pc, #36]	; (c698 <cdcdf_acm_init+0x3c>)
    c674:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c676:	4b07      	ldr	r3, [pc, #28]	; (c694 <cdcdf_acm_init+0x38>)
    c678:	4a08      	ldr	r2, [pc, #32]	; (c69c <cdcdf_acm_init+0x40>)
    c67a:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    c67c:	4805      	ldr	r0, [pc, #20]	; (c694 <cdcdf_acm_init+0x38>)
    c67e:	4b08      	ldr	r3, [pc, #32]	; (c6a0 <cdcdf_acm_init+0x44>)
    c680:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c682:	4908      	ldr	r1, [pc, #32]	; (c6a4 <cdcdf_acm_init+0x48>)
    c684:	2001      	movs	r0, #1
    c686:	4b08      	ldr	r3, [pc, #32]	; (c6a8 <cdcdf_acm_init+0x4c>)
    c688:	4798      	blx	r3
	return ERR_NONE;
    c68a:	2300      	movs	r3, #0
}
    c68c:	4618      	mov	r0, r3
    c68e:	bd80      	pop	{r7, pc}
    c690:	0000d4f9 	.word	0x0000d4f9
    c694:	20000e0c 	.word	0x20000e0c
    c698:	0000c445 	.word	0x0000c445
    c69c:	20000e18 	.word	0x20000e18
    c6a0:	0000d461 	.word	0x0000d461
    c6a4:	200001d8 	.word	0x200001d8
    c6a8:	0000d391 	.word	0x0000d391

0000c6ac <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    c6ac:	b590      	push	{r4, r7, lr}
    c6ae:	b083      	sub	sp, #12
    c6b0:	af00      	add	r7, sp, #0
    c6b2:	6078      	str	r0, [r7, #4]
    c6b4:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c6b6:	4b0b      	ldr	r3, [pc, #44]	; (c6e4 <cdcdf_acm_read+0x38>)
    c6b8:	4798      	blx	r3
    c6ba:	4603      	mov	r3, r0
    c6bc:	f083 0301 	eor.w	r3, r3, #1
    c6c0:	b2db      	uxtb	r3, r3
    c6c2:	2b00      	cmp	r3, #0
    c6c4:	d002      	beq.n	c6cc <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    c6c6:	f06f 0310 	mvn.w	r3, #16
    c6ca:	e007      	b.n	c6dc <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c6cc:	4b06      	ldr	r3, [pc, #24]	; (c6e8 <cdcdf_acm_read+0x3c>)
    c6ce:	7918      	ldrb	r0, [r3, #4]
    c6d0:	2300      	movs	r3, #0
    c6d2:	683a      	ldr	r2, [r7, #0]
    c6d4:	6879      	ldr	r1, [r7, #4]
    c6d6:	4c05      	ldr	r4, [pc, #20]	; (c6ec <cdcdf_acm_read+0x40>)
    c6d8:	47a0      	blx	r4
    c6da:	4603      	mov	r3, r0
}
    c6dc:	4618      	mov	r0, r3
    c6de:	370c      	adds	r7, #12
    c6e0:	46bd      	mov	sp, r7
    c6e2:	bd90      	pop	{r4, r7, pc}
    c6e4:	0000c7d1 	.word	0x0000c7d1
    c6e8:	20000e18 	.word	0x20000e18
    c6ec:	0000d355 	.word	0x0000d355

0000c6f0 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    c6f0:	b590      	push	{r4, r7, lr}
    c6f2:	b083      	sub	sp, #12
    c6f4:	af00      	add	r7, sp, #0
    c6f6:	6078      	str	r0, [r7, #4]
    c6f8:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c6fa:	4b0b      	ldr	r3, [pc, #44]	; (c728 <cdcdf_acm_write+0x38>)
    c6fc:	4798      	blx	r3
    c6fe:	4603      	mov	r3, r0
    c700:	f083 0301 	eor.w	r3, r3, #1
    c704:	b2db      	uxtb	r3, r3
    c706:	2b00      	cmp	r3, #0
    c708:	d002      	beq.n	c710 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    c70a:	f06f 0310 	mvn.w	r3, #16
    c70e:	e007      	b.n	c720 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c710:	4b06      	ldr	r3, [pc, #24]	; (c72c <cdcdf_acm_write+0x3c>)
    c712:	78d8      	ldrb	r0, [r3, #3]
    c714:	2301      	movs	r3, #1
    c716:	683a      	ldr	r2, [r7, #0]
    c718:	6879      	ldr	r1, [r7, #4]
    c71a:	4c05      	ldr	r4, [pc, #20]	; (c730 <cdcdf_acm_write+0x40>)
    c71c:	47a0      	blx	r4
    c71e:	4603      	mov	r3, r0
}
    c720:	4618      	mov	r0, r3
    c722:	370c      	adds	r7, #12
    c724:	46bd      	mov	sp, r7
    c726:	bd90      	pop	{r4, r7, pc}
    c728:	0000c7d1 	.word	0x0000c7d1
    c72c:	20000e18 	.word	0x20000e18
    c730:	0000d355 	.word	0x0000d355

0000c734 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    c734:	b580      	push	{r7, lr}
    c736:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c738:	4b05      	ldr	r3, [pc, #20]	; (c750 <cdcdf_acm_stop_xfer+0x1c>)
    c73a:	78db      	ldrb	r3, [r3, #3]
    c73c:	4618      	mov	r0, r3
    c73e:	4b05      	ldr	r3, [pc, #20]	; (c754 <cdcdf_acm_stop_xfer+0x20>)
    c740:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c742:	4b03      	ldr	r3, [pc, #12]	; (c750 <cdcdf_acm_stop_xfer+0x1c>)
    c744:	791b      	ldrb	r3, [r3, #4]
    c746:	4618      	mov	r0, r3
    c748:	4b02      	ldr	r3, [pc, #8]	; (c754 <cdcdf_acm_stop_xfer+0x20>)
    c74a:	4798      	blx	r3
}
    c74c:	bf00      	nop
    c74e:	bd80      	pop	{r7, pc}
    c750:	20000e18 	.word	0x20000e18
    c754:	000036f5 	.word	0x000036f5

0000c758 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    c758:	b580      	push	{r7, lr}
    c75a:	b082      	sub	sp, #8
    c75c:	af00      	add	r7, sp, #0
    c75e:	4603      	mov	r3, r0
    c760:	6039      	str	r1, [r7, #0]
    c762:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    c764:	79fb      	ldrb	r3, [r7, #7]
    c766:	2b03      	cmp	r3, #3
    c768:	d822      	bhi.n	c7b0 <cdcdf_acm_register_callback+0x58>
    c76a:	a201      	add	r2, pc, #4	; (adr r2, c770 <cdcdf_acm_register_callback+0x18>)
    c76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c770:	0000c781 	.word	0x0000c781
    c774:	0000c791 	.word	0x0000c791
    c778:	0000c7a1 	.word	0x0000c7a1
    c77c:	0000c7a9 	.word	0x0000c7a9
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c780:	4b0f      	ldr	r3, [pc, #60]	; (c7c0 <cdcdf_acm_register_callback+0x68>)
    c782:	791b      	ldrb	r3, [r3, #4]
    c784:	683a      	ldr	r2, [r7, #0]
    c786:	2102      	movs	r1, #2
    c788:	4618      	mov	r0, r3
    c78a:	4b0e      	ldr	r3, [pc, #56]	; (c7c4 <cdcdf_acm_register_callback+0x6c>)
    c78c:	4798      	blx	r3
		break;
    c78e:	e012      	b.n	c7b6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c790:	4b0b      	ldr	r3, [pc, #44]	; (c7c0 <cdcdf_acm_register_callback+0x68>)
    c792:	78db      	ldrb	r3, [r3, #3]
    c794:	683a      	ldr	r2, [r7, #0]
    c796:	2102      	movs	r1, #2
    c798:	4618      	mov	r0, r3
    c79a:	4b0a      	ldr	r3, [pc, #40]	; (c7c4 <cdcdf_acm_register_callback+0x6c>)
    c79c:	4798      	blx	r3
		break;
    c79e:	e00a      	b.n	c7b6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c7a0:	4a09      	ldr	r2, [pc, #36]	; (c7c8 <cdcdf_acm_register_callback+0x70>)
    c7a2:	683b      	ldr	r3, [r7, #0]
    c7a4:	6013      	str	r3, [r2, #0]
		break;
    c7a6:	e006      	b.n	c7b6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c7a8:	4a08      	ldr	r2, [pc, #32]	; (c7cc <cdcdf_acm_register_callback+0x74>)
    c7aa:	683b      	ldr	r3, [r7, #0]
    c7ac:	6013      	str	r3, [r2, #0]
		break;
    c7ae:	e002      	b.n	c7b6 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    c7b0:	f06f 030c 	mvn.w	r3, #12
    c7b4:	e000      	b.n	c7b8 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    c7b6:	2300      	movs	r3, #0
}
    c7b8:	4618      	mov	r0, r3
    c7ba:	3708      	adds	r7, #8
    c7bc:	46bd      	mov	sp, r7
    c7be:	bd80      	pop	{r7, pc}
    c7c0:	20000e18 	.word	0x20000e18
    c7c4:	00003821 	.word	0x00003821
    c7c8:	20000e2c 	.word	0x20000e2c
    c7cc:	20000e28 	.word	0x20000e28

0000c7d0 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    c7d0:	b480      	push	{r7}
    c7d2:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    c7d4:	4b03      	ldr	r3, [pc, #12]	; (c7e4 <cdcdf_acm_is_enabled+0x14>)
    c7d6:	795b      	ldrb	r3, [r3, #5]
}
    c7d8:	4618      	mov	r0, r3
    c7da:	46bd      	mov	sp, r7
    c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7e0:	4770      	bx	lr
    c7e2:	bf00      	nop
    c7e4:	20000e18 	.word	0x20000e18

0000c7e8 <usb_get_u16>:
{
    c7e8:	b480      	push	{r7}
    c7ea:	b083      	sub	sp, #12
    c7ec:	af00      	add	r7, sp, #0
    c7ee:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c7f0:	687b      	ldr	r3, [r7, #4]
    c7f2:	781b      	ldrb	r3, [r3, #0]
    c7f4:	b29a      	uxth	r2, r3
    c7f6:	687b      	ldr	r3, [r7, #4]
    c7f8:	3301      	adds	r3, #1
    c7fa:	781b      	ldrb	r3, [r3, #0]
    c7fc:	b29b      	uxth	r3, r3
    c7fe:	021b      	lsls	r3, r3, #8
    c800:	b29b      	uxth	r3, r3
    c802:	4413      	add	r3, r2
    c804:	b29b      	uxth	r3, r3
}
    c806:	4618      	mov	r0, r3
    c808:	370c      	adds	r7, #12
    c80a:	46bd      	mov	sp, r7
    c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c810:	4770      	bx	lr

0000c812 <usb_desc_len>:
{
    c812:	b480      	push	{r7}
    c814:	b083      	sub	sp, #12
    c816:	af00      	add	r7, sp, #0
    c818:	6078      	str	r0, [r7, #4]
	return desc[0];
    c81a:	687b      	ldr	r3, [r7, #4]
    c81c:	781b      	ldrb	r3, [r3, #0]
}
    c81e:	4618      	mov	r0, r3
    c820:	370c      	adds	r7, #12
    c822:	46bd      	mov	sp, r7
    c824:	f85d 7b04 	ldr.w	r7, [sp], #4
    c828:	4770      	bx	lr
	...

0000c82c <usb_desc_next>:
{
    c82c:	b580      	push	{r7, lr}
    c82e:	b082      	sub	sp, #8
    c830:	af00      	add	r7, sp, #0
    c832:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c834:	6878      	ldr	r0, [r7, #4]
    c836:	4b05      	ldr	r3, [pc, #20]	; (c84c <usb_desc_next+0x20>)
    c838:	4798      	blx	r3
    c83a:	4603      	mov	r3, r0
    c83c:	461a      	mov	r2, r3
    c83e:	687b      	ldr	r3, [r7, #4]
    c840:	4413      	add	r3, r2
}
    c842:	4618      	mov	r0, r3
    c844:	3708      	adds	r7, #8
    c846:	46bd      	mov	sp, r7
    c848:	bd80      	pop	{r7, pc}
    c84a:	bf00      	nop
    c84c:	0000c813 	.word	0x0000c813

0000c850 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    c850:	b580      	push	{r7, lr}
    c852:	b082      	sub	sp, #8
    c854:	af00      	add	r7, sp, #0
    c856:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c858:	687b      	ldr	r3, [r7, #4]
    c85a:	3302      	adds	r3, #2
    c85c:	4618      	mov	r0, r3
    c85e:	4b03      	ldr	r3, [pc, #12]	; (c86c <usb_cfg_desc_total_len+0x1c>)
    c860:	4798      	blx	r3
    c862:	4603      	mov	r3, r0
}
    c864:	4618      	mov	r0, r3
    c866:	3708      	adds	r7, #8
    c868:	46bd      	mov	sp, r7
    c86a:	bd80      	pop	{r7, pc}
    c86c:	0000c7e9 	.word	0x0000c7e9

0000c870 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    c870:	b590      	push	{r4, r7, lr}
    c872:	b085      	sub	sp, #20
    c874:	af00      	add	r7, sp, #0
    c876:	4603      	mov	r3, r0
    c878:	6039      	str	r1, [r7, #0]
    c87a:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    c87c:	2300      	movs	r3, #0
    c87e:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    c880:	683b      	ldr	r3, [r7, #0]
    c882:	799a      	ldrb	r2, [r3, #6]
    c884:	79db      	ldrb	r3, [r3, #7]
    c886:	021b      	lsls	r3, r3, #8
    c888:	4313      	orrs	r3, r2
    c88a:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    c88c:	897b      	ldrh	r3, [r7, #10]
    c88e:	2b12      	cmp	r3, #18
    c890:	d901      	bls.n	c896 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    c892:	2312      	movs	r3, #18
    c894:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    c896:	68fb      	ldr	r3, [r7, #12]
    c898:	2b00      	cmp	r3, #0
    c89a:	d10a      	bne.n	c8b2 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c89c:	4b0f      	ldr	r3, [pc, #60]	; (c8dc <usbdc_get_dev_desc+0x6c>)
    c89e:	681b      	ldr	r3, [r3, #0]
    c8a0:	6818      	ldr	r0, [r3, #0]
    c8a2:	4b0e      	ldr	r3, [pc, #56]	; (c8dc <usbdc_get_dev_desc+0x6c>)
    c8a4:	681b      	ldr	r3, [r3, #0]
    c8a6:	685b      	ldr	r3, [r3, #4]
    c8a8:	2201      	movs	r2, #1
    c8aa:	4619      	mov	r1, r3
    c8ac:	4b0c      	ldr	r3, [pc, #48]	; (c8e0 <usbdc_get_dev_desc+0x70>)
    c8ae:	4798      	blx	r3
    c8b0:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    c8b2:	68fb      	ldr	r3, [r7, #12]
    c8b4:	2b00      	cmp	r3, #0
    c8b6:	d101      	bne.n	c8bc <usbdc_get_dev_desc+0x4c>
		return false;
    c8b8:	2300      	movs	r3, #0
    c8ba:	e00b      	b.n	c8d4 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c8bc:	897a      	ldrh	r2, [r7, #10]
    c8be:	79f8      	ldrb	r0, [r7, #7]
    c8c0:	2300      	movs	r3, #0
    c8c2:	68f9      	ldr	r1, [r7, #12]
    c8c4:	4c07      	ldr	r4, [pc, #28]	; (c8e4 <usbdc_get_dev_desc+0x74>)
    c8c6:	47a0      	blx	r4
    c8c8:	4603      	mov	r3, r0
    c8ca:	2b00      	cmp	r3, #0
    c8cc:	d001      	beq.n	c8d2 <usbdc_get_dev_desc+0x62>
		return false;
    c8ce:	2300      	movs	r3, #0
    c8d0:	e000      	b.n	c8d4 <usbdc_get_dev_desc+0x64>
	}
	return true;
    c8d2:	2301      	movs	r3, #1
}
    c8d4:	4618      	mov	r0, r3
    c8d6:	3714      	adds	r7, #20
    c8d8:	46bd      	mov	sp, r7
    c8da:	bd90      	pop	{r4, r7, pc}
    c8dc:	20000e30 	.word	0x20000e30
    c8e0:	0000d5e5 	.word	0x0000d5e5
    c8e4:	0000d355 	.word	0x0000d355

0000c8e8 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    c8e8:	b590      	push	{r4, r7, lr}
    c8ea:	b087      	sub	sp, #28
    c8ec:	af00      	add	r7, sp, #0
    c8ee:	4603      	mov	r3, r0
    c8f0:	6039      	str	r1, [r7, #0]
    c8f2:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    c8f4:	2300      	movs	r3, #0
    c8f6:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    c8f8:	683b      	ldr	r3, [r7, #0]
    c8fa:	799a      	ldrb	r2, [r3, #6]
    c8fc:	79db      	ldrb	r3, [r3, #7]
    c8fe:	021b      	lsls	r3, r3, #8
    c900:	4313      	orrs	r3, r2
    c902:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    c904:	683b      	ldr	r3, [r7, #0]
    c906:	885b      	ldrh	r3, [r3, #2]
    c908:	b29b      	uxth	r3, r3
    c90a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c90c:	8a7a      	ldrh	r2, [r7, #18]
    c90e:	4b1e      	ldr	r3, [pc, #120]	; (c988 <usbdc_get_cfg_desc+0xa0>)
    c910:	7f1b      	ldrb	r3, [r3, #28]
    c912:	3b01      	subs	r3, #1
    c914:	4013      	ands	r3, r2
    c916:	2b00      	cmp	r3, #0
    c918:	bf0c      	ite	eq
    c91a:	2301      	moveq	r3, #1
    c91c:	2300      	movne	r3, #0
    c91e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c920:	697b      	ldr	r3, [r7, #20]
    c922:	2b00      	cmp	r3, #0
    c924:	d10c      	bne.n	c940 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c926:	4b18      	ldr	r3, [pc, #96]	; (c988 <usbdc_get_cfg_desc+0xa0>)
    c928:	681b      	ldr	r3, [r3, #0]
    c92a:	6818      	ldr	r0, [r3, #0]
    c92c:	4b16      	ldr	r3, [pc, #88]	; (c988 <usbdc_get_cfg_desc+0xa0>)
    c92e:	681b      	ldr	r3, [r3, #0]
    c930:	6859      	ldr	r1, [r3, #4]
    c932:	7c3b      	ldrb	r3, [r7, #16]
    c934:	3301      	adds	r3, #1
    c936:	b2db      	uxtb	r3, r3
    c938:	461a      	mov	r2, r3
    c93a:	4b14      	ldr	r3, [pc, #80]	; (c98c <usbdc_get_cfg_desc+0xa4>)
    c93c:	4798      	blx	r3
    c93e:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    c940:	697b      	ldr	r3, [r7, #20]
    c942:	2b00      	cmp	r3, #0
    c944:	d101      	bne.n	c94a <usbdc_get_cfg_desc+0x62>
		return false;
    c946:	2300      	movs	r3, #0
    c948:	e019      	b.n	c97e <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    c94a:	6978      	ldr	r0, [r7, #20]
    c94c:	4b10      	ldr	r3, [pc, #64]	; (c990 <usbdc_get_cfg_desc+0xa8>)
    c94e:	4798      	blx	r3
    c950:	4603      	mov	r3, r0
    c952:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    c954:	8a7a      	ldrh	r2, [r7, #18]
    c956:	89fb      	ldrh	r3, [r7, #14]
    c958:	429a      	cmp	r2, r3
    c95a:	d802      	bhi.n	c962 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    c95c:	2300      	movs	r3, #0
    c95e:	747b      	strb	r3, [r7, #17]
    c960:	e001      	b.n	c966 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    c962:	89fb      	ldrh	r3, [r7, #14]
    c964:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c966:	8a7a      	ldrh	r2, [r7, #18]
    c968:	7c7b      	ldrb	r3, [r7, #17]
    c96a:	79f8      	ldrb	r0, [r7, #7]
    c96c:	6979      	ldr	r1, [r7, #20]
    c96e:	4c09      	ldr	r4, [pc, #36]	; (c994 <usbdc_get_cfg_desc+0xac>)
    c970:	47a0      	blx	r4
    c972:	4603      	mov	r3, r0
    c974:	2b00      	cmp	r3, #0
    c976:	d001      	beq.n	c97c <usbdc_get_cfg_desc+0x94>
		return false;
    c978:	2300      	movs	r3, #0
    c97a:	e000      	b.n	c97e <usbdc_get_cfg_desc+0x96>
	}
	return true;
    c97c:	2301      	movs	r3, #1
}
    c97e:	4618      	mov	r0, r3
    c980:	371c      	adds	r7, #28
    c982:	46bd      	mov	sp, r7
    c984:	bd90      	pop	{r4, r7, pc}
    c986:	bf00      	nop
    c988:	20000e30 	.word	0x20000e30
    c98c:	0000d6a5 	.word	0x0000d6a5
    c990:	0000c851 	.word	0x0000c851
    c994:	0000d355 	.word	0x0000d355

0000c998 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    c998:	b590      	push	{r4, r7, lr}
    c99a:	b085      	sub	sp, #20
    c99c:	af00      	add	r7, sp, #0
    c99e:	4603      	mov	r3, r0
    c9a0:	6039      	str	r1, [r7, #0]
    c9a2:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    c9a4:	683b      	ldr	r3, [r7, #0]
    c9a6:	799a      	ldrb	r2, [r3, #6]
    c9a8:	79db      	ldrb	r3, [r3, #7]
    c9aa:	021b      	lsls	r3, r3, #8
    c9ac:	4313      	orrs	r3, r2
    c9ae:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    c9b0:	683b      	ldr	r3, [r7, #0]
    c9b2:	885b      	ldrh	r3, [r3, #2]
    c9b4:	b29b      	uxth	r3, r3
    c9b6:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c9b8:	89fa      	ldrh	r2, [r7, #14]
    c9ba:	4b1a      	ldr	r3, [pc, #104]	; (ca24 <usbdc_get_str_desc+0x8c>)
    c9bc:	7f1b      	ldrb	r3, [r3, #28]
    c9be:	3b01      	subs	r3, #1
    c9c0:	4013      	ands	r3, r2
    c9c2:	2b00      	cmp	r3, #0
    c9c4:	bf0c      	ite	eq
    c9c6:	2301      	moveq	r3, #1
    c9c8:	2300      	movne	r3, #0
    c9ca:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c9cc:	4b15      	ldr	r3, [pc, #84]	; (ca24 <usbdc_get_str_desc+0x8c>)
    c9ce:	681b      	ldr	r3, [r3, #0]
    c9d0:	6818      	ldr	r0, [r3, #0]
    c9d2:	4b14      	ldr	r3, [pc, #80]	; (ca24 <usbdc_get_str_desc+0x8c>)
    c9d4:	681b      	ldr	r3, [r3, #0]
    c9d6:	685b      	ldr	r3, [r3, #4]
    c9d8:	7b3a      	ldrb	r2, [r7, #12]
    c9da:	4619      	mov	r1, r3
    c9dc:	4b12      	ldr	r3, [pc, #72]	; (ca28 <usbdc_get_str_desc+0x90>)
    c9de:	4798      	blx	r3
    c9e0:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    c9e2:	68bb      	ldr	r3, [r7, #8]
    c9e4:	2b00      	cmp	r3, #0
    c9e6:	d101      	bne.n	c9ec <usbdc_get_str_desc+0x54>
		return false;
    c9e8:	2300      	movs	r3, #0
    c9ea:	e017      	b.n	ca1c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    c9ec:	68bb      	ldr	r3, [r7, #8]
    c9ee:	781b      	ldrb	r3, [r3, #0]
    c9f0:	b29b      	uxth	r3, r3
    c9f2:	89fa      	ldrh	r2, [r7, #14]
    c9f4:	429a      	cmp	r2, r3
    c9f6:	d802      	bhi.n	c9fe <usbdc_get_str_desc+0x66>
		need_zlp = false;
    c9f8:	2300      	movs	r3, #0
    c9fa:	737b      	strb	r3, [r7, #13]
    c9fc:	e002      	b.n	ca04 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    c9fe:	68bb      	ldr	r3, [r7, #8]
    ca00:	781b      	ldrb	r3, [r3, #0]
    ca02:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    ca04:	89fa      	ldrh	r2, [r7, #14]
    ca06:	7b7b      	ldrb	r3, [r7, #13]
    ca08:	79f8      	ldrb	r0, [r7, #7]
    ca0a:	68b9      	ldr	r1, [r7, #8]
    ca0c:	4c07      	ldr	r4, [pc, #28]	; (ca2c <usbdc_get_str_desc+0x94>)
    ca0e:	47a0      	blx	r4
    ca10:	4603      	mov	r3, r0
    ca12:	2b00      	cmp	r3, #0
    ca14:	d001      	beq.n	ca1a <usbdc_get_str_desc+0x82>
		return false;
    ca16:	2300      	movs	r3, #0
    ca18:	e000      	b.n	ca1c <usbdc_get_str_desc+0x84>
	}
	return true;
    ca1a:	2301      	movs	r3, #1
}
    ca1c:	4618      	mov	r0, r3
    ca1e:	3714      	adds	r7, #20
    ca20:	46bd      	mov	sp, r7
    ca22:	bd90      	pop	{r4, r7, pc}
    ca24:	20000e30 	.word	0x20000e30
    ca28:	0000d71d 	.word	0x0000d71d
    ca2c:	0000d355 	.word	0x0000d355

0000ca30 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    ca30:	b580      	push	{r7, lr}
    ca32:	b084      	sub	sp, #16
    ca34:	af00      	add	r7, sp, #0
    ca36:	4603      	mov	r3, r0
    ca38:	6039      	str	r1, [r7, #0]
    ca3a:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    ca3c:	683b      	ldr	r3, [r7, #0]
    ca3e:	885b      	ldrh	r3, [r3, #2]
    ca40:	b29b      	uxth	r3, r3
    ca42:	0a1b      	lsrs	r3, r3, #8
    ca44:	b29b      	uxth	r3, r3
    ca46:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    ca48:	7bfb      	ldrb	r3, [r7, #15]
    ca4a:	2b02      	cmp	r3, #2
    ca4c:	d00d      	beq.n	ca6a <usbdc_get_desc_req+0x3a>
    ca4e:	2b03      	cmp	r3, #3
    ca50:	d012      	beq.n	ca78 <usbdc_get_desc_req+0x48>
    ca52:	2b01      	cmp	r3, #1
    ca54:	d002      	beq.n	ca5c <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    ca56:	bf00      	nop
	}
	return false;
    ca58:	2300      	movs	r3, #0
    ca5a:	e013      	b.n	ca84 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    ca5c:	79fb      	ldrb	r3, [r7, #7]
    ca5e:	6839      	ldr	r1, [r7, #0]
    ca60:	4618      	mov	r0, r3
    ca62:	4b0a      	ldr	r3, [pc, #40]	; (ca8c <usbdc_get_desc_req+0x5c>)
    ca64:	4798      	blx	r3
    ca66:	4603      	mov	r3, r0
    ca68:	e00c      	b.n	ca84 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    ca6a:	79fb      	ldrb	r3, [r7, #7]
    ca6c:	6839      	ldr	r1, [r7, #0]
    ca6e:	4618      	mov	r0, r3
    ca70:	4b07      	ldr	r3, [pc, #28]	; (ca90 <usbdc_get_desc_req+0x60>)
    ca72:	4798      	blx	r3
    ca74:	4603      	mov	r3, r0
    ca76:	e005      	b.n	ca84 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    ca78:	79fb      	ldrb	r3, [r7, #7]
    ca7a:	6839      	ldr	r1, [r7, #0]
    ca7c:	4618      	mov	r0, r3
    ca7e:	4b05      	ldr	r3, [pc, #20]	; (ca94 <usbdc_get_desc_req+0x64>)
    ca80:	4798      	blx	r3
    ca82:	4603      	mov	r3, r0
}
    ca84:	4618      	mov	r0, r3
    ca86:	3710      	adds	r7, #16
    ca88:	46bd      	mov	sp, r7
    ca8a:	bd80      	pop	{r7, pc}
    ca8c:	0000c871 	.word	0x0000c871
    ca90:	0000c8e9 	.word	0x0000c8e9
    ca94:	0000c999 	.word	0x0000c999

0000ca98 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    ca98:	b590      	push	{r4, r7, lr}
    ca9a:	b085      	sub	sp, #20
    ca9c:	af00      	add	r7, sp, #0
    ca9e:	4603      	mov	r3, r0
    caa0:	6039      	str	r1, [r7, #0]
    caa2:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    caa4:	683b      	ldr	r3, [r7, #0]
    caa6:	781b      	ldrb	r3, [r3, #0]
    caa8:	f003 031f 	and.w	r3, r3, #31
    caac:	2b00      	cmp	r3, #0
    caae:	db1b      	blt.n	cae8 <usbdc_get_status_req+0x50>
    cab0:	2b01      	cmp	r3, #1
    cab2:	dd02      	ble.n	caba <usbdc_get_status_req+0x22>
    cab4:	2b02      	cmp	r3, #2
    cab6:	d003      	beq.n	cac0 <usbdc_get_status_req+0x28>
    cab8:	e016      	b.n	cae8 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    caba:	2300      	movs	r3, #0
    cabc:	60fb      	str	r3, [r7, #12]
		break;
    cabe:	e015      	b.n	caec <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    cac0:	683b      	ldr	r3, [r7, #0]
    cac2:	889b      	ldrh	r3, [r3, #4]
    cac4:	b29b      	uxth	r3, r3
    cac6:	b2db      	uxtb	r3, r3
    cac8:	2102      	movs	r1, #2
    caca:	4618      	mov	r0, r3
    cacc:	4b0f      	ldr	r3, [pc, #60]	; (cb0c <usbdc_get_status_req+0x74>)
    cace:	4798      	blx	r3
    cad0:	4603      	mov	r3, r0
    cad2:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    cad4:	68fb      	ldr	r3, [r7, #12]
    cad6:	2b00      	cmp	r3, #0
    cad8:	da01      	bge.n	cade <usbdc_get_status_req+0x46>
			return false;
    cada:	2300      	movs	r3, #0
    cadc:	e012      	b.n	cb04 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    cade:	68fb      	ldr	r3, [r7, #12]
    cae0:	f003 0301 	and.w	r3, r3, #1
    cae4:	60fb      	str	r3, [r7, #12]
		break;
    cae6:	e001      	b.n	caec <usbdc_get_status_req+0x54>
	default:
		return false;
    cae8:	2300      	movs	r3, #0
    caea:	e00b      	b.n	cb04 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    caec:	4b08      	ldr	r3, [pc, #32]	; (cb10 <usbdc_get_status_req+0x78>)
    caee:	695b      	ldr	r3, [r3, #20]
    caf0:	89ba      	ldrh	r2, [r7, #12]
    caf2:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    caf4:	4b06      	ldr	r3, [pc, #24]	; (cb10 <usbdc_get_status_req+0x78>)
    caf6:	6959      	ldr	r1, [r3, #20]
    caf8:	79f8      	ldrb	r0, [r7, #7]
    cafa:	2300      	movs	r3, #0
    cafc:	2202      	movs	r2, #2
    cafe:	4c05      	ldr	r4, [pc, #20]	; (cb14 <usbdc_get_status_req+0x7c>)
    cb00:	47a0      	blx	r4
	return true;
    cb02:	2301      	movs	r3, #1
}
    cb04:	4618      	mov	r0, r3
    cb06:	3714      	adds	r7, #20
    cb08:	46bd      	mov	sp, r7
    cb0a:	bd90      	pop	{r4, r7, pc}
    cb0c:	000037cd 	.word	0x000037cd
    cb10:	20000e30 	.word	0x20000e30
    cb14:	0000d355 	.word	0x0000d355

0000cb18 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    cb18:	b590      	push	{r4, r7, lr}
    cb1a:	b085      	sub	sp, #20
    cb1c:	af00      	add	r7, sp, #0
    cb1e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    cb20:	4b1f      	ldr	r3, [pc, #124]	; (cba0 <usbdc_get_interface+0x88>)
    cb22:	691b      	ldr	r3, [r3, #16]
    cb24:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    cb26:	4b1e      	ldr	r3, [pc, #120]	; (cba0 <usbdc_get_interface+0x88>)
    cb28:	7f5b      	ldrb	r3, [r3, #29]
    cb2a:	461a      	mov	r2, r3
    cb2c:	687b      	ldr	r3, [r7, #4]
    cb2e:	889b      	ldrh	r3, [r3, #4]
    cb30:	b29b      	uxth	r3, r3
    cb32:	fa42 f303 	asr.w	r3, r2, r3
    cb36:	f003 0301 	and.w	r3, r3, #1
    cb3a:	2b00      	cmp	r3, #0
    cb3c:	d128      	bne.n	cb90 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    cb3e:	4b18      	ldr	r3, [pc, #96]	; (cba0 <usbdc_get_interface+0x88>)
    cb40:	695b      	ldr	r3, [r3, #20]
    cb42:	2200      	movs	r2, #0
    cb44:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    cb46:	4b16      	ldr	r3, [pc, #88]	; (cba0 <usbdc_get_interface+0x88>)
    cb48:	6959      	ldr	r1, [r3, #20]
    cb4a:	2300      	movs	r3, #0
    cb4c:	2201      	movs	r2, #1
    cb4e:	2000      	movs	r0, #0
    cb50:	4c14      	ldr	r4, [pc, #80]	; (cba4 <usbdc_get_interface+0x8c>)
    cb52:	47a0      	blx	r4
		return true;
    cb54:	2301      	movs	r3, #1
    cb56:	e01f      	b.n	cb98 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    cb58:	68fb      	ldr	r3, [r7, #12]
    cb5a:	685b      	ldr	r3, [r3, #4]
    cb5c:	687a      	ldr	r2, [r7, #4]
    cb5e:	2102      	movs	r1, #2
    cb60:	68f8      	ldr	r0, [r7, #12]
    cb62:	4798      	blx	r3
    cb64:	60b8      	str	r0, [r7, #8]
    cb66:	68bb      	ldr	r3, [r7, #8]
    cb68:	2b00      	cmp	r3, #0
    cb6a:	da03      	bge.n	cb74 <usbdc_get_interface+0x5c>
			func = func->next;
    cb6c:	68fb      	ldr	r3, [r7, #12]
    cb6e:	681b      	ldr	r3, [r3, #0]
    cb70:	60fb      	str	r3, [r7, #12]
    cb72:	e00d      	b.n	cb90 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    cb74:	4b0a      	ldr	r3, [pc, #40]	; (cba0 <usbdc_get_interface+0x88>)
    cb76:	695b      	ldr	r3, [r3, #20]
    cb78:	68ba      	ldr	r2, [r7, #8]
    cb7a:	b2d2      	uxtb	r2, r2
    cb7c:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    cb7e:	4b08      	ldr	r3, [pc, #32]	; (cba0 <usbdc_get_interface+0x88>)
    cb80:	6959      	ldr	r1, [r3, #20]
    cb82:	2300      	movs	r3, #0
    cb84:	2201      	movs	r2, #1
    cb86:	2000      	movs	r0, #0
    cb88:	4c06      	ldr	r4, [pc, #24]	; (cba4 <usbdc_get_interface+0x8c>)
    cb8a:	47a0      	blx	r4
			return true;
    cb8c:	2301      	movs	r3, #1
    cb8e:	e003      	b.n	cb98 <usbdc_get_interface+0x80>
	while (NULL != func) {
    cb90:	68fb      	ldr	r3, [r7, #12]
    cb92:	2b00      	cmp	r3, #0
    cb94:	d1e0      	bne.n	cb58 <usbdc_get_interface+0x40>
		}
	}
	return false;
    cb96:	2300      	movs	r3, #0
}
    cb98:	4618      	mov	r0, r3
    cb9a:	3714      	adds	r7, #20
    cb9c:	46bd      	mov	sp, r7
    cb9e:	bd90      	pop	{r4, r7, pc}
    cba0:	20000e30 	.word	0x20000e30
    cba4:	0000d355 	.word	0x0000d355

0000cba8 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    cba8:	b590      	push	{r4, r7, lr}
    cbaa:	b083      	sub	sp, #12
    cbac:	af00      	add	r7, sp, #0
    cbae:	4603      	mov	r3, r0
    cbb0:	6039      	str	r1, [r7, #0]
    cbb2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    cbb4:	683b      	ldr	r3, [r7, #0]
    cbb6:	785b      	ldrb	r3, [r3, #1]
    cbb8:	2b0a      	cmp	r3, #10
    cbba:	d83a      	bhi.n	cc32 <usbdc_get_req+0x8a>
    cbbc:	a201      	add	r2, pc, #4	; (adr r2, cbc4 <usbdc_get_req+0x1c>)
    cbbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cbc2:	bf00      	nop
    cbc4:	0000cc1b 	.word	0x0000cc1b
    cbc8:	0000cc33 	.word	0x0000cc33
    cbcc:	0000cc33 	.word	0x0000cc33
    cbd0:	0000cc33 	.word	0x0000cc33
    cbd4:	0000cc33 	.word	0x0000cc33
    cbd8:	0000cc33 	.word	0x0000cc33
    cbdc:	0000cbf1 	.word	0x0000cbf1
    cbe0:	0000cc33 	.word	0x0000cc33
    cbe4:	0000cbff 	.word	0x0000cbff
    cbe8:	0000cc33 	.word	0x0000cc33
    cbec:	0000cc29 	.word	0x0000cc29
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    cbf0:	79fb      	ldrb	r3, [r7, #7]
    cbf2:	6839      	ldr	r1, [r7, #0]
    cbf4:	4618      	mov	r0, r3
    cbf6:	4b11      	ldr	r3, [pc, #68]	; (cc3c <usbdc_get_req+0x94>)
    cbf8:	4798      	blx	r3
    cbfa:	4603      	mov	r3, r0
    cbfc:	e01a      	b.n	cc34 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    cbfe:	4b10      	ldr	r3, [pc, #64]	; (cc40 <usbdc_get_req+0x98>)
    cc00:	695b      	ldr	r3, [r3, #20]
    cc02:	4a0f      	ldr	r2, [pc, #60]	; (cc40 <usbdc_get_req+0x98>)
    cc04:	7ed2      	ldrb	r2, [r2, #27]
    cc06:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    cc08:	4b0d      	ldr	r3, [pc, #52]	; (cc40 <usbdc_get_req+0x98>)
    cc0a:	6959      	ldr	r1, [r3, #20]
    cc0c:	79f8      	ldrb	r0, [r7, #7]
    cc0e:	2300      	movs	r3, #0
    cc10:	2201      	movs	r2, #1
    cc12:	4c0c      	ldr	r4, [pc, #48]	; (cc44 <usbdc_get_req+0x9c>)
    cc14:	47a0      	blx	r4
		return true;
    cc16:	2301      	movs	r3, #1
    cc18:	e00c      	b.n	cc34 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    cc1a:	79fb      	ldrb	r3, [r7, #7]
    cc1c:	6839      	ldr	r1, [r7, #0]
    cc1e:	4618      	mov	r0, r3
    cc20:	4b09      	ldr	r3, [pc, #36]	; (cc48 <usbdc_get_req+0xa0>)
    cc22:	4798      	blx	r3
    cc24:	4603      	mov	r3, r0
    cc26:	e005      	b.n	cc34 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    cc28:	6838      	ldr	r0, [r7, #0]
    cc2a:	4b08      	ldr	r3, [pc, #32]	; (cc4c <usbdc_get_req+0xa4>)
    cc2c:	4798      	blx	r3
    cc2e:	4603      	mov	r3, r0
    cc30:	e000      	b.n	cc34 <usbdc_get_req+0x8c>
	default:
		return false;
    cc32:	2300      	movs	r3, #0
	}
}
    cc34:	4618      	mov	r0, r3
    cc36:	370c      	adds	r7, #12
    cc38:	46bd      	mov	sp, r7
    cc3a:	bd90      	pop	{r4, r7, pc}
    cc3c:	0000ca31 	.word	0x0000ca31
    cc40:	20000e30 	.word	0x20000e30
    cc44:	0000d355 	.word	0x0000d355
    cc48:	0000ca99 	.word	0x0000ca99
    cc4c:	0000cb19 	.word	0x0000cb19

0000cc50 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    cc50:	b590      	push	{r4, r7, lr}
    cc52:	b083      	sub	sp, #12
    cc54:	af00      	add	r7, sp, #0
    cc56:	4603      	mov	r3, r0
    cc58:	6039      	str	r1, [r7, #0]
    cc5a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    cc5c:	683b      	ldr	r3, [r7, #0]
    cc5e:	781b      	ldrb	r3, [r3, #0]
    cc60:	f003 031f 	and.w	r3, r3, #31
    cc64:	2b02      	cmp	r3, #2
    cc66:	d116      	bne.n	cc96 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    cc68:	683b      	ldr	r3, [r7, #0]
    cc6a:	88db      	ldrh	r3, [r3, #6]
    cc6c:	b29b      	uxth	r3, r3
    cc6e:	2b00      	cmp	r3, #0
    cc70:	d001      	beq.n	cc76 <usbdc_clear_ftr_req+0x26>
			return false;
    cc72:	2300      	movs	r3, #0
    cc74:	e010      	b.n	cc98 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    cc76:	683b      	ldr	r3, [r7, #0]
    cc78:	889b      	ldrh	r3, [r3, #4]
    cc7a:	b29b      	uxth	r3, r3
    cc7c:	b2db      	uxtb	r3, r3
    cc7e:	2100      	movs	r1, #0
    cc80:	4618      	mov	r0, r3
    cc82:	4b07      	ldr	r3, [pc, #28]	; (cca0 <usbdc_clear_ftr_req+0x50>)
    cc84:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    cc86:	79f8      	ldrb	r0, [r7, #7]
    cc88:	2301      	movs	r3, #1
    cc8a:	2200      	movs	r2, #0
    cc8c:	2100      	movs	r1, #0
    cc8e:	4c05      	ldr	r4, [pc, #20]	; (cca4 <usbdc_clear_ftr_req+0x54>)
    cc90:	47a0      	blx	r4
		return true;
    cc92:	2301      	movs	r3, #1
    cc94:	e000      	b.n	cc98 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    cc96:	2300      	movs	r3, #0
	}
}
    cc98:	4618      	mov	r0, r3
    cc9a:	370c      	adds	r7, #12
    cc9c:	46bd      	mov	sp, r7
    cc9e:	bd90      	pop	{r4, r7, pc}
    cca0:	000037cd 	.word	0x000037cd
    cca4:	0000d355 	.word	0x0000d355

0000cca8 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    cca8:	b590      	push	{r4, r7, lr}
    ccaa:	b083      	sub	sp, #12
    ccac:	af00      	add	r7, sp, #0
    ccae:	4603      	mov	r3, r0
    ccb0:	6039      	str	r1, [r7, #0]
    ccb2:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ccb4:	683b      	ldr	r3, [r7, #0]
    ccb6:	781b      	ldrb	r3, [r3, #0]
    ccb8:	f003 031f 	and.w	r3, r3, #31
    ccbc:	2b02      	cmp	r3, #2
    ccbe:	d116      	bne.n	ccee <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    ccc0:	683b      	ldr	r3, [r7, #0]
    ccc2:	88db      	ldrh	r3, [r3, #6]
    ccc4:	b29b      	uxth	r3, r3
    ccc6:	2b00      	cmp	r3, #0
    ccc8:	d001      	beq.n	ccce <usbdc_set_ftr_req+0x26>
			return false;
    ccca:	2300      	movs	r3, #0
    cccc:	e010      	b.n	ccf0 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    ccce:	683b      	ldr	r3, [r7, #0]
    ccd0:	889b      	ldrh	r3, [r3, #4]
    ccd2:	b29b      	uxth	r3, r3
    ccd4:	b2db      	uxtb	r3, r3
    ccd6:	2101      	movs	r1, #1
    ccd8:	4618      	mov	r0, r3
    ccda:	4b07      	ldr	r3, [pc, #28]	; (ccf8 <usbdc_set_ftr_req+0x50>)
    ccdc:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    ccde:	79f8      	ldrb	r0, [r7, #7]
    cce0:	2301      	movs	r3, #1
    cce2:	2200      	movs	r2, #0
    cce4:	2100      	movs	r1, #0
    cce6:	4c05      	ldr	r4, [pc, #20]	; (ccfc <usbdc_set_ftr_req+0x54>)
    cce8:	47a0      	blx	r4
		return true;
    ccea:	2301      	movs	r3, #1
    ccec:	e000      	b.n	ccf0 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    ccee:	2300      	movs	r3, #0
	}
}
    ccf0:	4618      	mov	r0, r3
    ccf2:	370c      	adds	r7, #12
    ccf4:	46bd      	mov	sp, r7
    ccf6:	bd90      	pop	{r4, r7, pc}
    ccf8:	000037cd 	.word	0x000037cd
    ccfc:	0000d355 	.word	0x0000d355

0000cd00 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    cd00:	b580      	push	{r7, lr}
    cd02:	b082      	sub	sp, #8
    cd04:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    cd06:	4b0a      	ldr	r3, [pc, #40]	; (cd30 <usbdc_unconfig+0x30>)
    cd08:	691b      	ldr	r3, [r3, #16]
    cd0a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    cd0c:	e008      	b.n	cd20 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    cd0e:	687b      	ldr	r3, [r7, #4]
    cd10:	685b      	ldr	r3, [r3, #4]
    cd12:	2200      	movs	r2, #0
    cd14:	2101      	movs	r1, #1
    cd16:	6878      	ldr	r0, [r7, #4]
    cd18:	4798      	blx	r3
		func = func->next;
    cd1a:	687b      	ldr	r3, [r7, #4]
    cd1c:	681b      	ldr	r3, [r3, #0]
    cd1e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    cd20:	687b      	ldr	r3, [r7, #4]
    cd22:	2b00      	cmp	r3, #0
    cd24:	d1f3      	bne.n	cd0e <usbdc_unconfig+0xe>
	}
}
    cd26:	bf00      	nop
    cd28:	3708      	adds	r7, #8
    cd2a:	46bd      	mov	sp, r7
    cd2c:	bd80      	pop	{r7, pc}
    cd2e:	bf00      	nop
    cd30:	20000e30 	.word	0x20000e30

0000cd34 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    cd34:	b580      	push	{r7, lr}
    cd36:	b088      	sub	sp, #32
    cd38:	af00      	add	r7, sp, #0
    cd3a:	4603      	mov	r3, r0
    cd3c:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    cd3e:	2300      	movs	r3, #0
    cd40:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    cd42:	23ff      	movs	r3, #255	; 0xff
    cd44:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    cd46:	79fb      	ldrb	r3, [r7, #7]
    cd48:	2b00      	cmp	r3, #0
    cd4a:	d103      	bne.n	cd54 <usbdc_set_config+0x20>
		usbdc_unconfig();
    cd4c:	4b2e      	ldr	r3, [pc, #184]	; (ce08 <usbdc_set_config+0xd4>)
    cd4e:	4798      	blx	r3
		return true;
    cd50:	2301      	movs	r3, #1
    cd52:	e055      	b.n	ce00 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    cd54:	69bb      	ldr	r3, [r7, #24]
    cd56:	2b00      	cmp	r3, #0
    cd58:	d10a      	bne.n	cd70 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    cd5a:	4b2c      	ldr	r3, [pc, #176]	; (ce0c <usbdc_set_config+0xd8>)
    cd5c:	681b      	ldr	r3, [r3, #0]
    cd5e:	6818      	ldr	r0, [r3, #0]
    cd60:	4b2a      	ldr	r3, [pc, #168]	; (ce0c <usbdc_set_config+0xd8>)
    cd62:	681b      	ldr	r3, [r3, #0]
    cd64:	685b      	ldr	r3, [r3, #4]
    cd66:	79fa      	ldrb	r2, [r7, #7]
    cd68:	4619      	mov	r1, r3
    cd6a:	4b29      	ldr	r3, [pc, #164]	; (ce10 <usbdc_set_config+0xdc>)
    cd6c:	4798      	blx	r3
    cd6e:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    cd70:	69bb      	ldr	r3, [r7, #24]
    cd72:	2b00      	cmp	r3, #0
    cd74:	d101      	bne.n	cd7a <usbdc_set_config+0x46>
		return false;
    cd76:	2300      	movs	r3, #0
    cd78:	e042      	b.n	ce00 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    cd7a:	69b8      	ldr	r0, [r7, #24]
    cd7c:	4b25      	ldr	r3, [pc, #148]	; (ce14 <usbdc_set_config+0xe0>)
    cd7e:	4798      	blx	r3
    cd80:	4603      	mov	r3, r0
    cd82:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    cd84:	8abb      	ldrh	r3, [r7, #20]
    cd86:	69ba      	ldr	r2, [r7, #24]
    cd88:	4413      	add	r3, r2
    cd8a:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    cd8c:	693b      	ldr	r3, [r7, #16]
    cd8e:	2204      	movs	r2, #4
    cd90:	4619      	mov	r1, r3
    cd92:	69b8      	ldr	r0, [r7, #24]
    cd94:	4b20      	ldr	r3, [pc, #128]	; (ce18 <usbdc_set_config+0xe4>)
    cd96:	4798      	blx	r3
    cd98:	4603      	mov	r3, r0
    cd9a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    cd9c:	e02c      	b.n	cdf8 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    cd9e:	68fb      	ldr	r3, [r7, #12]
    cda0:	3302      	adds	r3, #2
    cda2:	781b      	ldrb	r3, [r3, #0]
    cda4:	7dfa      	ldrb	r2, [r7, #23]
    cda6:	429a      	cmp	r2, r3
    cda8:	d018      	beq.n	cddc <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    cdaa:	68fb      	ldr	r3, [r7, #12]
    cdac:	789b      	ldrb	r3, [r3, #2]
    cdae:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    cdb0:	4b16      	ldr	r3, [pc, #88]	; (ce0c <usbdc_set_config+0xd8>)
    cdb2:	691b      	ldr	r3, [r3, #16]
    cdb4:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    cdb6:	e00c      	b.n	cdd2 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    cdb8:	69fb      	ldr	r3, [r7, #28]
    cdba:	685b      	ldr	r3, [r3, #4]
    cdbc:	f107 020c 	add.w	r2, r7, #12
    cdc0:	2100      	movs	r1, #0
    cdc2:	69f8      	ldr	r0, [r7, #28]
    cdc4:	4798      	blx	r3
    cdc6:	4603      	mov	r3, r0
    cdc8:	2b00      	cmp	r3, #0
    cdca:	d006      	beq.n	cdda <usbdc_set_config+0xa6>
					func = func->next;
    cdcc:	69fb      	ldr	r3, [r7, #28]
    cdce:	681b      	ldr	r3, [r3, #0]
    cdd0:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    cdd2:	69fb      	ldr	r3, [r7, #28]
    cdd4:	2b00      	cmp	r3, #0
    cdd6:	d1ef      	bne.n	cdb8 <usbdc_set_config+0x84>
    cdd8:	e000      	b.n	cddc <usbdc_set_config+0xa8>
				} else {
					break;
    cdda:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    cddc:	68fb      	ldr	r3, [r7, #12]
    cdde:	4618      	mov	r0, r3
    cde0:	4b0e      	ldr	r3, [pc, #56]	; (ce1c <usbdc_set_config+0xe8>)
    cde2:	4798      	blx	r3
    cde4:	4603      	mov	r3, r0
    cde6:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    cde8:	68fb      	ldr	r3, [r7, #12]
    cdea:	6939      	ldr	r1, [r7, #16]
    cdec:	2204      	movs	r2, #4
    cdee:	4618      	mov	r0, r3
    cdf0:	4b09      	ldr	r3, [pc, #36]	; (ce18 <usbdc_set_config+0xe4>)
    cdf2:	4798      	blx	r3
    cdf4:	4603      	mov	r3, r0
    cdf6:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    cdf8:	68fb      	ldr	r3, [r7, #12]
    cdfa:	2b00      	cmp	r3, #0
    cdfc:	d1cf      	bne.n	cd9e <usbdc_set_config+0x6a>
	}
	return true;
    cdfe:	2301      	movs	r3, #1
}
    ce00:	4618      	mov	r0, r3
    ce02:	3720      	adds	r7, #32
    ce04:	46bd      	mov	sp, r7
    ce06:	bd80      	pop	{r7, pc}
    ce08:	0000cd01 	.word	0x0000cd01
    ce0c:	20000e30 	.word	0x20000e30
    ce10:	0000d6a5 	.word	0x0000d6a5
    ce14:	0000c851 	.word	0x0000c851
    ce18:	0000d5e5 	.word	0x0000d5e5
    ce1c:	0000c82d 	.word	0x0000c82d

0000ce20 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    ce20:	b580      	push	{r7, lr}
    ce22:	b082      	sub	sp, #8
    ce24:	af00      	add	r7, sp, #0
    ce26:	4603      	mov	r3, r0
    ce28:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    ce2a:	79fb      	ldrb	r3, [r7, #7]
    ce2c:	4618      	mov	r0, r3
    ce2e:	4b03      	ldr	r3, [pc, #12]	; (ce3c <usbdc_set_address+0x1c>)
    ce30:	4798      	blx	r3
}
    ce32:	bf00      	nop
    ce34:	3708      	adds	r7, #8
    ce36:	46bd      	mov	sp, r7
    ce38:	bd80      	pop	{r7, pc}
    ce3a:	bf00      	nop
    ce3c:	000033e9 	.word	0x000033e9

0000ce40 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    ce40:	b590      	push	{r4, r7, lr}
    ce42:	b087      	sub	sp, #28
    ce44:	af00      	add	r7, sp, #0
    ce46:	4603      	mov	r3, r0
    ce48:	460a      	mov	r2, r1
    ce4a:	80fb      	strh	r3, [r7, #6]
    ce4c:	4613      	mov	r3, r2
    ce4e:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    ce50:	2300      	movs	r3, #0
    ce52:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    ce54:	693b      	ldr	r3, [r7, #16]
    ce56:	2b00      	cmp	r3, #0
    ce58:	d10b      	bne.n	ce72 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    ce5a:	4b43      	ldr	r3, [pc, #268]	; (cf68 <usbdc_set_interface+0x128>)
    ce5c:	681b      	ldr	r3, [r3, #0]
    ce5e:	6818      	ldr	r0, [r3, #0]
    ce60:	4b41      	ldr	r3, [pc, #260]	; (cf68 <usbdc_set_interface+0x128>)
    ce62:	681b      	ldr	r3, [r3, #0]
    ce64:	6859      	ldr	r1, [r3, #4]
    ce66:	4b40      	ldr	r3, [pc, #256]	; (cf68 <usbdc_set_interface+0x128>)
    ce68:	7edb      	ldrb	r3, [r3, #27]
    ce6a:	461a      	mov	r2, r3
    ce6c:	4b3f      	ldr	r3, [pc, #252]	; (cf6c <usbdc_set_interface+0x12c>)
    ce6e:	4798      	blx	r3
    ce70:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    ce72:	693b      	ldr	r3, [r7, #16]
    ce74:	2b00      	cmp	r3, #0
    ce76:	d101      	bne.n	ce7c <usbdc_set_interface+0x3c>
		return false;
    ce78:	2300      	movs	r3, #0
    ce7a:	e071      	b.n	cf60 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    ce7c:	693b      	ldr	r3, [r7, #16]
    ce7e:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    ce80:	6938      	ldr	r0, [r7, #16]
    ce82:	4b3b      	ldr	r3, [pc, #236]	; (cf70 <usbdc_set_interface+0x130>)
    ce84:	4798      	blx	r3
    ce86:	4603      	mov	r3, r0
    ce88:	461a      	mov	r2, r3
    ce8a:	693b      	ldr	r3, [r7, #16]
    ce8c:	4413      	add	r3, r2
    ce8e:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    ce90:	68bb      	ldr	r3, [r7, #8]
    ce92:	68f9      	ldr	r1, [r7, #12]
    ce94:	2204      	movs	r2, #4
    ce96:	4618      	mov	r0, r3
    ce98:	4b36      	ldr	r3, [pc, #216]	; (cf74 <usbdc_set_interface+0x134>)
    ce9a:	4798      	blx	r3
    ce9c:	6138      	str	r0, [r7, #16]
    ce9e:	693b      	ldr	r3, [r7, #16]
    cea0:	2b00      	cmp	r3, #0
    cea2:	d113      	bne.n	cecc <usbdc_set_interface+0x8c>
		return false;
    cea4:	2300      	movs	r3, #0
    cea6:	e05b      	b.n	cf60 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    cea8:	68bb      	ldr	r3, [r7, #8]
    ceaa:	4618      	mov	r0, r3
    ceac:	4b32      	ldr	r3, [pc, #200]	; (cf78 <usbdc_set_interface+0x138>)
    ceae:	4798      	blx	r3
    ceb0:	4603      	mov	r3, r0
    ceb2:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ceb4:	68bb      	ldr	r3, [r7, #8]
    ceb6:	68f9      	ldr	r1, [r7, #12]
    ceb8:	2204      	movs	r2, #4
    ceba:	4618      	mov	r0, r3
    cebc:	4b2d      	ldr	r3, [pc, #180]	; (cf74 <usbdc_set_interface+0x134>)
    cebe:	4798      	blx	r3
    cec0:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    cec2:	693b      	ldr	r3, [r7, #16]
    cec4:	2b00      	cmp	r3, #0
    cec6:	d101      	bne.n	cecc <usbdc_set_interface+0x8c>
			return false;
    cec8:	2300      	movs	r3, #0
    ceca:	e049      	b.n	cf60 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    cecc:	693b      	ldr	r3, [r7, #16]
    cece:	3302      	adds	r3, #2
    ced0:	781b      	ldrb	r3, [r3, #0]
    ced2:	b29b      	uxth	r3, r3
    ced4:	88ba      	ldrh	r2, [r7, #4]
    ced6:	429a      	cmp	r2, r3
    ced8:	d1e6      	bne.n	cea8 <usbdc_set_interface+0x68>
    ceda:	693b      	ldr	r3, [r7, #16]
    cedc:	3303      	adds	r3, #3
    cede:	781b      	ldrb	r3, [r3, #0]
    cee0:	b29b      	uxth	r3, r3
    cee2:	88fa      	ldrh	r2, [r7, #6]
    cee4:	429a      	cmp	r2, r3
    cee6:	d1df      	bne.n	cea8 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    cee8:	693b      	ldr	r3, [r7, #16]
    ceea:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    ceec:	4b1e      	ldr	r3, [pc, #120]	; (cf68 <usbdc_set_interface+0x128>)
    ceee:	691b      	ldr	r3, [r3, #16]
    cef0:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    cef2:	e031      	b.n	cf58 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    cef4:	697b      	ldr	r3, [r7, #20]
    cef6:	685b      	ldr	r3, [r3, #4]
    cef8:	f107 0208 	add.w	r2, r7, #8
    cefc:	2101      	movs	r1, #1
    cefe:	6978      	ldr	r0, [r7, #20]
    cf00:	4798      	blx	r3
    cf02:	4603      	mov	r3, r0
    cf04:	2b00      	cmp	r3, #0
    cf06:	d003      	beq.n	cf10 <usbdc_set_interface+0xd0>
			func = func->next;
    cf08:	697b      	ldr	r3, [r7, #20]
    cf0a:	681b      	ldr	r3, [r3, #0]
    cf0c:	617b      	str	r3, [r7, #20]
    cf0e:	e023      	b.n	cf58 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    cf10:	697b      	ldr	r3, [r7, #20]
    cf12:	685b      	ldr	r3, [r3, #4]
    cf14:	f107 0208 	add.w	r2, r7, #8
    cf18:	2100      	movs	r1, #0
    cf1a:	6978      	ldr	r0, [r7, #20]
    cf1c:	4798      	blx	r3
    cf1e:	4603      	mov	r3, r0
    cf20:	2b00      	cmp	r3, #0
    cf22:	d117      	bne.n	cf54 <usbdc_set_interface+0x114>
			if (alt_set) {
    cf24:	88fb      	ldrh	r3, [r7, #6]
    cf26:	2b00      	cmp	r3, #0
    cf28:	d00c      	beq.n	cf44 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    cf2a:	4b0f      	ldr	r3, [pc, #60]	; (cf68 <usbdc_set_interface+0x128>)
    cf2c:	7f5b      	ldrb	r3, [r3, #29]
    cf2e:	b25a      	sxtb	r2, r3
    cf30:	88bb      	ldrh	r3, [r7, #4]
    cf32:	2101      	movs	r1, #1
    cf34:	fa01 f303 	lsl.w	r3, r1, r3
    cf38:	b25b      	sxtb	r3, r3
    cf3a:	4313      	orrs	r3, r2
    cf3c:	b25b      	sxtb	r3, r3
    cf3e:	b2da      	uxtb	r2, r3
    cf40:	4b09      	ldr	r3, [pc, #36]	; (cf68 <usbdc_set_interface+0x128>)
    cf42:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    cf44:	2300      	movs	r3, #0
    cf46:	2200      	movs	r2, #0
    cf48:	2100      	movs	r1, #0
    cf4a:	2000      	movs	r0, #0
    cf4c:	4c0b      	ldr	r4, [pc, #44]	; (cf7c <usbdc_set_interface+0x13c>)
    cf4e:	47a0      	blx	r4
			return true;
    cf50:	2301      	movs	r3, #1
    cf52:	e005      	b.n	cf60 <usbdc_set_interface+0x120>
		} else {
			return false;
    cf54:	2300      	movs	r3, #0
    cf56:	e003      	b.n	cf60 <usbdc_set_interface+0x120>
	while (NULL != func) {
    cf58:	697b      	ldr	r3, [r7, #20]
    cf5a:	2b00      	cmp	r3, #0
    cf5c:	d1ca      	bne.n	cef4 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    cf5e:	2300      	movs	r3, #0
}
    cf60:	4618      	mov	r0, r3
    cf62:	371c      	adds	r7, #28
    cf64:	46bd      	mov	sp, r7
    cf66:	bd90      	pop	{r4, r7, pc}
    cf68:	20000e30 	.word	0x20000e30
    cf6c:	0000d6a5 	.word	0x0000d6a5
    cf70:	0000c851 	.word	0x0000c851
    cf74:	0000d5e5 	.word	0x0000d5e5
    cf78:	0000c82d 	.word	0x0000c82d
    cf7c:	0000d355 	.word	0x0000d355

0000cf80 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    cf80:	b590      	push	{r4, r7, lr}
    cf82:	b083      	sub	sp, #12
    cf84:	af00      	add	r7, sp, #0
    cf86:	4603      	mov	r3, r0
    cf88:	6039      	str	r1, [r7, #0]
    cf8a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    cf8c:	683b      	ldr	r3, [r7, #0]
    cf8e:	785b      	ldrb	r3, [r3, #1]
    cf90:	3b01      	subs	r3, #1
    cf92:	2b0a      	cmp	r3, #10
    cf94:	d85b      	bhi.n	d04e <usbdc_set_req+0xce>
    cf96:	a201      	add	r2, pc, #4	; (adr r2, cf9c <usbdc_set_req+0x1c>)
    cf98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cf9c:	0000d01b 	.word	0x0000d01b
    cfa0:	0000d04f 	.word	0x0000d04f
    cfa4:	0000d029 	.word	0x0000d029
    cfa8:	0000d04f 	.word	0x0000d04f
    cfac:	0000cfc9 	.word	0x0000cfc9
    cfb0:	0000d04f 	.word	0x0000d04f
    cfb4:	0000d04f 	.word	0x0000d04f
    cfb8:	0000d04f 	.word	0x0000d04f
    cfbc:	0000cfe3 	.word	0x0000cfe3
    cfc0:	0000d04f 	.word	0x0000d04f
    cfc4:	0000d037 	.word	0x0000d037
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cfc8:	79f8      	ldrb	r0, [r7, #7]
    cfca:	2301      	movs	r3, #1
    cfcc:	2200      	movs	r2, #0
    cfce:	2100      	movs	r1, #0
    cfd0:	4c21      	ldr	r4, [pc, #132]	; (d058 <usbdc_set_req+0xd8>)
    cfd2:	47a0      	blx	r4
    cfd4:	4603      	mov	r3, r0
    cfd6:	2b00      	cmp	r3, #0
    cfd8:	bf0c      	ite	eq
    cfda:	2301      	moveq	r3, #1
    cfdc:	2300      	movne	r3, #0
    cfde:	b2db      	uxtb	r3, r3
    cfe0:	e036      	b.n	d050 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    cfe2:	683b      	ldr	r3, [r7, #0]
    cfe4:	885b      	ldrh	r3, [r3, #2]
    cfe6:	b29b      	uxth	r3, r3
    cfe8:	b2db      	uxtb	r3, r3
    cfea:	4618      	mov	r0, r3
    cfec:	4b1b      	ldr	r3, [pc, #108]	; (d05c <usbdc_set_req+0xdc>)
    cfee:	4798      	blx	r3
    cff0:	4603      	mov	r3, r0
    cff2:	f083 0301 	eor.w	r3, r3, #1
    cff6:	b2db      	uxtb	r3, r3
    cff8:	2b00      	cmp	r3, #0
    cffa:	d001      	beq.n	d000 <usbdc_set_req+0x80>
			return false;
    cffc:	2300      	movs	r3, #0
    cffe:	e027      	b.n	d050 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d000:	79f8      	ldrb	r0, [r7, #7]
    d002:	2301      	movs	r3, #1
    d004:	2200      	movs	r2, #0
    d006:	2100      	movs	r1, #0
    d008:	4c13      	ldr	r4, [pc, #76]	; (d058 <usbdc_set_req+0xd8>)
    d00a:	47a0      	blx	r4
    d00c:	4603      	mov	r3, r0
    d00e:	2b00      	cmp	r3, #0
    d010:	bf0c      	ite	eq
    d012:	2301      	moveq	r3, #1
    d014:	2300      	movne	r3, #0
    d016:	b2db      	uxtb	r3, r3
    d018:	e01a      	b.n	d050 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    d01a:	79fb      	ldrb	r3, [r7, #7]
    d01c:	6839      	ldr	r1, [r7, #0]
    d01e:	4618      	mov	r0, r3
    d020:	4b0f      	ldr	r3, [pc, #60]	; (d060 <usbdc_set_req+0xe0>)
    d022:	4798      	blx	r3
    d024:	4603      	mov	r3, r0
    d026:	e013      	b.n	d050 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    d028:	79fb      	ldrb	r3, [r7, #7]
    d02a:	6839      	ldr	r1, [r7, #0]
    d02c:	4618      	mov	r0, r3
    d02e:	4b0d      	ldr	r3, [pc, #52]	; (d064 <usbdc_set_req+0xe4>)
    d030:	4798      	blx	r3
    d032:	4603      	mov	r3, r0
    d034:	e00c      	b.n	d050 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    d036:	683b      	ldr	r3, [r7, #0]
    d038:	885b      	ldrh	r3, [r3, #2]
    d03a:	b29a      	uxth	r2, r3
    d03c:	683b      	ldr	r3, [r7, #0]
    d03e:	889b      	ldrh	r3, [r3, #4]
    d040:	b29b      	uxth	r3, r3
    d042:	4619      	mov	r1, r3
    d044:	4610      	mov	r0, r2
    d046:	4b08      	ldr	r3, [pc, #32]	; (d068 <usbdc_set_req+0xe8>)
    d048:	4798      	blx	r3
    d04a:	4603      	mov	r3, r0
    d04c:	e000      	b.n	d050 <usbdc_set_req+0xd0>
	default:
		return false;
    d04e:	2300      	movs	r3, #0
	}
}
    d050:	4618      	mov	r0, r3
    d052:	370c      	adds	r7, #12
    d054:	46bd      	mov	sp, r7
    d056:	bd90      	pop	{r4, r7, pc}
    d058:	0000d355 	.word	0x0000d355
    d05c:	0000cd35 	.word	0x0000cd35
    d060:	0000cc51 	.word	0x0000cc51
    d064:	0000cca9 	.word	0x0000cca9
    d068:	0000ce41 	.word	0x0000ce41

0000d06c <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    d06c:	b580      	push	{r7, lr}
    d06e:	b082      	sub	sp, #8
    d070:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d072:	4b0a      	ldr	r3, [pc, #40]	; (d09c <usbdc_sof_notify+0x30>)
    d074:	685b      	ldr	r3, [r3, #4]
    d076:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    d078:	e009      	b.n	d08e <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    d07a:	687b      	ldr	r3, [r7, #4]
    d07c:	685b      	ldr	r3, [r3, #4]
    d07e:	2b00      	cmp	r3, #0
    d080:	d002      	beq.n	d088 <usbdc_sof_notify+0x1c>
			sof->cb();
    d082:	687b      	ldr	r3, [r7, #4]
    d084:	685b      	ldr	r3, [r3, #4]
    d086:	4798      	blx	r3
		}
		sof = sof->next;
    d088:	687b      	ldr	r3, [r7, #4]
    d08a:	681b      	ldr	r3, [r3, #0]
    d08c:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    d08e:	687b      	ldr	r3, [r7, #4]
    d090:	2b00      	cmp	r3, #0
    d092:	d1f2      	bne.n	d07a <usbdc_sof_notify+0xe>
	}
}
    d094:	bf00      	nop
    d096:	3708      	adds	r7, #8
    d098:	46bd      	mov	sp, r7
    d09a:	bd80      	pop	{r7, pc}
    d09c:	20000e30 	.word	0x20000e30

0000d0a0 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    d0a0:	b580      	push	{r7, lr}
    d0a2:	b084      	sub	sp, #16
    d0a4:	af00      	add	r7, sp, #0
    d0a6:	4603      	mov	r3, r0
    d0a8:	6039      	str	r1, [r7, #0]
    d0aa:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d0ac:	4b0b      	ldr	r3, [pc, #44]	; (d0dc <usbdc_change_notify+0x3c>)
    d0ae:	68db      	ldr	r3, [r3, #12]
    d0b0:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    d0b2:	e00c      	b.n	d0ce <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    d0b4:	68fb      	ldr	r3, [r7, #12]
    d0b6:	685b      	ldr	r3, [r3, #4]
    d0b8:	2b00      	cmp	r3, #0
    d0ba:	d005      	beq.n	d0c8 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    d0bc:	68fb      	ldr	r3, [r7, #12]
    d0be:	685b      	ldr	r3, [r3, #4]
    d0c0:	79fa      	ldrb	r2, [r7, #7]
    d0c2:	6839      	ldr	r1, [r7, #0]
    d0c4:	4610      	mov	r0, r2
    d0c6:	4798      	blx	r3
		}
		cg = cg->next;
    d0c8:	68fb      	ldr	r3, [r7, #12]
    d0ca:	681b      	ldr	r3, [r3, #0]
    d0cc:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    d0ce:	68fb      	ldr	r3, [r7, #12]
    d0d0:	2b00      	cmp	r3, #0
    d0d2:	d1ef      	bne.n	d0b4 <usbdc_change_notify+0x14>
	}
}
    d0d4:	bf00      	nop
    d0d6:	3710      	adds	r7, #16
    d0d8:	46bd      	mov	sp, r7
    d0da:	bd80      	pop	{r7, pc}
    d0dc:	20000e30 	.word	0x20000e30

0000d0e0 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d0e0:	b580      	push	{r7, lr}
    d0e2:	b084      	sub	sp, #16
    d0e4:	af00      	add	r7, sp, #0
    d0e6:	4603      	mov	r3, r0
    d0e8:	6039      	str	r1, [r7, #0]
    d0ea:	71fb      	strb	r3, [r7, #7]
    d0ec:	4613      	mov	r3, r2
    d0ee:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d0f0:	4b12      	ldr	r3, [pc, #72]	; (d13c <usbdc_request_handler+0x5c>)
    d0f2:	689b      	ldr	r3, [r3, #8]
    d0f4:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    d0f6:	e019      	b.n	d12c <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    d0f8:	68fb      	ldr	r3, [r7, #12]
    d0fa:	685b      	ldr	r3, [r3, #4]
    d0fc:	2b00      	cmp	r3, #0
    d0fe:	d012      	beq.n	d126 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    d100:	68fb      	ldr	r3, [r7, #12]
    d102:	685b      	ldr	r3, [r3, #4]
    d104:	79ba      	ldrb	r2, [r7, #6]
    d106:	79f8      	ldrb	r0, [r7, #7]
    d108:	6839      	ldr	r1, [r7, #0]
    d10a:	4798      	blx	r3
    d10c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    d10e:	68bb      	ldr	r3, [r7, #8]
    d110:	2b00      	cmp	r3, #0
    d112:	d101      	bne.n	d118 <usbdc_request_handler+0x38>
				return true;
    d114:	2301      	movs	r3, #1
    d116:	e00d      	b.n	d134 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    d118:	68bb      	ldr	r3, [r7, #8]
    d11a:	f113 0f0a 	cmn.w	r3, #10
    d11e:	d002      	beq.n	d126 <usbdc_request_handler+0x46>
				return -1;
    d120:	f04f 33ff 	mov.w	r3, #4294967295
    d124:	e006      	b.n	d134 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    d126:	68fb      	ldr	r3, [r7, #12]
    d128:	681b      	ldr	r3, [r3, #0]
    d12a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    d12c:	68fb      	ldr	r3, [r7, #12]
    d12e:	2b00      	cmp	r3, #0
    d130:	d1e2      	bne.n	d0f8 <usbdc_request_handler+0x18>
	}
	return false;
    d132:	2300      	movs	r3, #0
}
    d134:	4618      	mov	r0, r3
    d136:	3710      	adds	r7, #16
    d138:	46bd      	mov	sp, r7
    d13a:	bd80      	pop	{r7, pc}
    d13c:	20000e30 	.word	0x20000e30

0000d140 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d140:	b580      	push	{r7, lr}
    d142:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    d144:	4b01      	ldr	r3, [pc, #4]	; (d14c <usbd_sof_cb+0xc>)
    d146:	4798      	blx	r3
}
    d148:	bf00      	nop
    d14a:	bd80      	pop	{r7, pc}
    d14c:	0000d06d 	.word	0x0000d06d

0000d150 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    d150:	b580      	push	{r7, lr}
    d152:	b082      	sub	sp, #8
    d154:	af00      	add	r7, sp, #0
    d156:	4603      	mov	r3, r0
    d158:	6039      	str	r1, [r7, #0]
    d15a:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    d15c:	79fb      	ldrb	r3, [r7, #7]
    d15e:	2200      	movs	r2, #0
    d160:	6839      	ldr	r1, [r7, #0]
    d162:	4618      	mov	r0, r3
    d164:	4b14      	ldr	r3, [pc, #80]	; (d1b8 <usbdc_cb_ctl_req+0x68>)
    d166:	4798      	blx	r3
    d168:	4603      	mov	r3, r0
    d16a:	f1b3 3fff 	cmp.w	r3, #4294967295
    d16e:	d00b      	beq.n	d188 <usbdc_cb_ctl_req+0x38>
    d170:	2b01      	cmp	r3, #1
    d172:	d007      	beq.n	d184 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    d174:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d176:	683b      	ldr	r3, [r7, #0]
    d178:	781b      	ldrb	r3, [r3, #0]
    d17a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    d17e:	2b00      	cmp	r3, #0
    d180:	d007      	beq.n	d192 <usbdc_cb_ctl_req+0x42>
    d182:	e003      	b.n	d18c <usbdc_cb_ctl_req+0x3c>
		return true;
    d184:	2301      	movs	r3, #1
    d186:	e013      	b.n	d1b0 <usbdc_cb_ctl_req+0x60>
		return false;
    d188:	2300      	movs	r3, #0
    d18a:	e011      	b.n	d1b0 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d18c:	2b80      	cmp	r3, #128	; 0x80
    d18e:	d007      	beq.n	d1a0 <usbdc_cb_ctl_req+0x50>
    d190:	e00d      	b.n	d1ae <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    d192:	79fb      	ldrb	r3, [r7, #7]
    d194:	6839      	ldr	r1, [r7, #0]
    d196:	4618      	mov	r0, r3
    d198:	4b08      	ldr	r3, [pc, #32]	; (d1bc <usbdc_cb_ctl_req+0x6c>)
    d19a:	4798      	blx	r3
    d19c:	4603      	mov	r3, r0
    d19e:	e007      	b.n	d1b0 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    d1a0:	79fb      	ldrb	r3, [r7, #7]
    d1a2:	6839      	ldr	r1, [r7, #0]
    d1a4:	4618      	mov	r0, r3
    d1a6:	4b06      	ldr	r3, [pc, #24]	; (d1c0 <usbdc_cb_ctl_req+0x70>)
    d1a8:	4798      	blx	r3
    d1aa:	4603      	mov	r3, r0
    d1ac:	e000      	b.n	d1b0 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    d1ae:	2300      	movs	r3, #0
	}
}
    d1b0:	4618      	mov	r0, r3
    d1b2:	3708      	adds	r7, #8
    d1b4:	46bd      	mov	sp, r7
    d1b6:	bd80      	pop	{r7, pc}
    d1b8:	0000d0e1 	.word	0x0000d0e1
    d1bc:	0000cf81 	.word	0x0000cf81
    d1c0:	0000cba9 	.word	0x0000cba9

0000d1c4 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    d1c4:	b580      	push	{r7, lr}
    d1c6:	b082      	sub	sp, #8
    d1c8:	af00      	add	r7, sp, #0
    d1ca:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    d1cc:	687b      	ldr	r3, [r7, #4]
    d1ce:	781b      	ldrb	r3, [r3, #0]
    d1d0:	2b00      	cmp	r3, #0
    d1d2:	d135      	bne.n	d240 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    d1d4:	687b      	ldr	r3, [r7, #4]
    d1d6:	785b      	ldrb	r3, [r3, #1]
    d1d8:	2b05      	cmp	r3, #5
    d1da:	d019      	beq.n	d210 <usbdc_ctrl_status_end+0x4c>
    d1dc:	2b09      	cmp	r3, #9
    d1de:	d000      	beq.n	d1e2 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    d1e0:	e02f      	b.n	d242 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    d1e2:	687b      	ldr	r3, [r7, #4]
    d1e4:	885b      	ldrh	r3, [r3, #2]
    d1e6:	b29b      	uxth	r3, r3
    d1e8:	b2da      	uxtb	r2, r3
    d1ea:	4b17      	ldr	r3, [pc, #92]	; (d248 <usbdc_ctrl_status_end+0x84>)
    d1ec:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d1ee:	687b      	ldr	r3, [r7, #4]
    d1f0:	885b      	ldrh	r3, [r3, #2]
    d1f2:	b29b      	uxth	r3, r3
    d1f4:	2b00      	cmp	r3, #0
    d1f6:	d001      	beq.n	d1fc <usbdc_ctrl_status_end+0x38>
    d1f8:	2204      	movs	r2, #4
    d1fa:	e000      	b.n	d1fe <usbdc_ctrl_status_end+0x3a>
    d1fc:	2203      	movs	r2, #3
    d1fe:	4b12      	ldr	r3, [pc, #72]	; (d248 <usbdc_ctrl_status_end+0x84>)
    d200:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d202:	4b11      	ldr	r3, [pc, #68]	; (d248 <usbdc_ctrl_status_end+0x84>)
    d204:	7e9b      	ldrb	r3, [r3, #26]
    d206:	4619      	mov	r1, r3
    d208:	2001      	movs	r0, #1
    d20a:	4b10      	ldr	r3, [pc, #64]	; (d24c <usbdc_ctrl_status_end+0x88>)
    d20c:	4798      	blx	r3
		break;
    d20e:	e018      	b.n	d242 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    d210:	687b      	ldr	r3, [r7, #4]
    d212:	885b      	ldrh	r3, [r3, #2]
    d214:	b29b      	uxth	r3, r3
    d216:	b2db      	uxtb	r3, r3
    d218:	4618      	mov	r0, r3
    d21a:	4b0d      	ldr	r3, [pc, #52]	; (d250 <usbdc_ctrl_status_end+0x8c>)
    d21c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d21e:	687b      	ldr	r3, [r7, #4]
    d220:	885b      	ldrh	r3, [r3, #2]
    d222:	b29b      	uxth	r3, r3
    d224:	2b00      	cmp	r3, #0
    d226:	d001      	beq.n	d22c <usbdc_ctrl_status_end+0x68>
    d228:	2203      	movs	r2, #3
    d22a:	e000      	b.n	d22e <usbdc_ctrl_status_end+0x6a>
    d22c:	2202      	movs	r2, #2
    d22e:	4b06      	ldr	r3, [pc, #24]	; (d248 <usbdc_ctrl_status_end+0x84>)
    d230:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d232:	4b05      	ldr	r3, [pc, #20]	; (d248 <usbdc_ctrl_status_end+0x84>)
    d234:	7e9b      	ldrb	r3, [r3, #26]
    d236:	4619      	mov	r1, r3
    d238:	2001      	movs	r0, #1
    d23a:	4b04      	ldr	r3, [pc, #16]	; (d24c <usbdc_ctrl_status_end+0x88>)
    d23c:	4798      	blx	r3
		break;
    d23e:	e000      	b.n	d242 <usbdc_ctrl_status_end+0x7e>
		return;
    d240:	bf00      	nop
	}
}
    d242:	3708      	adds	r7, #8
    d244:	46bd      	mov	sp, r7
    d246:	bd80      	pop	{r7, pc}
    d248:	20000e30 	.word	0x20000e30
    d24c:	0000d0a1 	.word	0x0000d0a1
    d250:	0000ce21 	.word	0x0000ce21

0000d254 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    d254:	b580      	push	{r7, lr}
    d256:	b082      	sub	sp, #8
    d258:	af00      	add	r7, sp, #0
    d25a:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    d25c:	2201      	movs	r2, #1
    d25e:	6879      	ldr	r1, [r7, #4]
    d260:	2000      	movs	r0, #0
    d262:	4b03      	ldr	r3, [pc, #12]	; (d270 <usbdc_ctrl_data_end+0x1c>)
    d264:	4798      	blx	r3
	return false;
    d266:	2300      	movs	r3, #0
}
    d268:	4618      	mov	r0, r3
    d26a:	3708      	adds	r7, #8
    d26c:	46bd      	mov	sp, r7
    d26e:	bd80      	pop	{r7, pc}
    d270:	0000d0e1 	.word	0x0000d0e1

0000d274 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    d274:	b580      	push	{r7, lr}
    d276:	b082      	sub	sp, #8
    d278:	af00      	add	r7, sp, #0
    d27a:	4603      	mov	r3, r0
    d27c:	603a      	str	r2, [r7, #0]
    d27e:	71fb      	strb	r3, [r7, #7]
    d280:	460b      	mov	r3, r1
    d282:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    d284:	79bb      	ldrb	r3, [r7, #6]
    d286:	2b00      	cmp	r3, #0
    d288:	d002      	beq.n	d290 <usbdc_cb_ctl_done+0x1c>
    d28a:	2b01      	cmp	r3, #1
    d28c:	d004      	beq.n	d298 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    d28e:	e008      	b.n	d2a2 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    d290:	6838      	ldr	r0, [r7, #0]
    d292:	4b06      	ldr	r3, [pc, #24]	; (d2ac <usbdc_cb_ctl_done+0x38>)
    d294:	4798      	blx	r3
		break;
    d296:	e004      	b.n	d2a2 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    d298:	6838      	ldr	r0, [r7, #0]
    d29a:	4b05      	ldr	r3, [pc, #20]	; (d2b0 <usbdc_cb_ctl_done+0x3c>)
    d29c:	4798      	blx	r3
    d29e:	4603      	mov	r3, r0
    d2a0:	e000      	b.n	d2a4 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    d2a2:	2300      	movs	r3, #0
}
    d2a4:	4618      	mov	r0, r3
    d2a6:	3708      	adds	r7, #8
    d2a8:	46bd      	mov	sp, r7
    d2aa:	bd80      	pop	{r7, pc}
    d2ac:	0000d1c5 	.word	0x0000d1c5
    d2b0:	0000d255 	.word	0x0000d255

0000d2b4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    d2b4:	b580      	push	{r7, lr}
    d2b6:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    d2b8:	4b10      	ldr	r3, [pc, #64]	; (d2fc <usbdc_reset+0x48>)
    d2ba:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    d2bc:	4b10      	ldr	r3, [pc, #64]	; (d300 <usbdc_reset+0x4c>)
    d2be:	2202      	movs	r2, #2
    d2c0:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    d2c2:	4b0f      	ldr	r3, [pc, #60]	; (d300 <usbdc_reset+0x4c>)
    d2c4:	2200      	movs	r2, #0
    d2c6:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    d2c8:	4b0d      	ldr	r3, [pc, #52]	; (d300 <usbdc_reset+0x4c>)
    d2ca:	2200      	movs	r2, #0
    d2cc:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    d2ce:	2000      	movs	r0, #0
    d2d0:	4b0c      	ldr	r3, [pc, #48]	; (d304 <usbdc_reset+0x50>)
    d2d2:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    d2d4:	4b0a      	ldr	r3, [pc, #40]	; (d300 <usbdc_reset+0x4c>)
    d2d6:	7f1b      	ldrb	r3, [r3, #28]
    d2d8:	4618      	mov	r0, r3
    d2da:	4b0b      	ldr	r3, [pc, #44]	; (d308 <usbdc_reset+0x54>)
    d2dc:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    d2de:	4a0b      	ldr	r2, [pc, #44]	; (d30c <usbdc_reset+0x58>)
    d2e0:	2100      	movs	r1, #0
    d2e2:	2000      	movs	r0, #0
    d2e4:	4b0a      	ldr	r3, [pc, #40]	; (d310 <usbdc_reset+0x5c>)
    d2e6:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    d2e8:	4a0a      	ldr	r2, [pc, #40]	; (d314 <usbdc_reset+0x60>)
    d2ea:	2102      	movs	r1, #2
    d2ec:	2000      	movs	r0, #0
    d2ee:	4b08      	ldr	r3, [pc, #32]	; (d310 <usbdc_reset+0x5c>)
    d2f0:	4798      	blx	r3
	usb_d_ep_enable(0);
    d2f2:	2000      	movs	r0, #0
    d2f4:	4b08      	ldr	r3, [pc, #32]	; (d318 <usbdc_reset+0x64>)
    d2f6:	4798      	blx	r3
}
    d2f8:	bf00      	nop
    d2fa:	bd80      	pop	{r7, pc}
    d2fc:	0000cd01 	.word	0x0000cd01
    d300:	20000e30 	.word	0x20000e30
    d304:	000034cd 	.word	0x000034cd
    d308:	00003409 	.word	0x00003409
    d30c:	0000d151 	.word	0x0000d151
    d310:	00003821 	.word	0x00003821
    d314:	0000d275 	.word	0x0000d275
    d318:	0000351d 	.word	0x0000351d

0000d31c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    d31c:	b580      	push	{r7, lr}
    d31e:	b082      	sub	sp, #8
    d320:	af00      	add	r7, sp, #0
    d322:	4603      	mov	r3, r0
    d324:	6039      	str	r1, [r7, #0]
    d326:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    d328:	79fb      	ldrb	r3, [r7, #7]
    d32a:	2b00      	cmp	r3, #0
    d32c:	d002      	beq.n	d334 <usbd_event_cb+0x18>
    d32e:	2b01      	cmp	r3, #1
    d330:	d005      	beq.n	d33e <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    d332:	e007      	b.n	d344 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    d334:	6839      	ldr	r1, [r7, #0]
    d336:	2000      	movs	r0, #0
    d338:	4b04      	ldr	r3, [pc, #16]	; (d34c <usbd_event_cb+0x30>)
    d33a:	4798      	blx	r3
		break;
    d33c:	e002      	b.n	d344 <usbd_event_cb+0x28>
		usbdc_reset();
    d33e:	4b04      	ldr	r3, [pc, #16]	; (d350 <usbd_event_cb+0x34>)
    d340:	4798      	blx	r3
		break;
    d342:	bf00      	nop
	}
}
    d344:	bf00      	nop
    d346:	3708      	adds	r7, #8
    d348:	46bd      	mov	sp, r7
    d34a:	bd80      	pop	{r7, pc}
    d34c:	0000d0a1 	.word	0x0000d0a1
    d350:	0000d2b5 	.word	0x0000d2b5

0000d354 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    d354:	b580      	push	{r7, lr}
    d356:	b088      	sub	sp, #32
    d358:	af00      	add	r7, sp, #0
    d35a:	60b9      	str	r1, [r7, #8]
    d35c:	607a      	str	r2, [r7, #4]
    d35e:	461a      	mov	r2, r3
    d360:	4603      	mov	r3, r0
    d362:	73fb      	strb	r3, [r7, #15]
    d364:	4613      	mov	r3, r2
    d366:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d368:	68bb      	ldr	r3, [r7, #8]
    d36a:	617b      	str	r3, [r7, #20]
    d36c:	687b      	ldr	r3, [r7, #4]
    d36e:	61bb      	str	r3, [r7, #24]
    d370:	7bfb      	ldrb	r3, [r7, #15]
    d372:	773b      	strb	r3, [r7, #28]
    d374:	7bbb      	ldrb	r3, [r7, #14]
    d376:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    d378:	f107 0314 	add.w	r3, r7, #20
    d37c:	4618      	mov	r0, r3
    d37e:	4b03      	ldr	r3, [pc, #12]	; (d38c <usbdc_xfer+0x38>)
    d380:	4798      	blx	r3
    d382:	4603      	mov	r3, r0
}
    d384:	4618      	mov	r0, r3
    d386:	3720      	adds	r7, #32
    d388:	46bd      	mov	sp, r7
    d38a:	bd80      	pop	{r7, pc}
    d38c:	0000358d 	.word	0x0000358d

0000d390 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    d390:	b580      	push	{r7, lr}
    d392:	b082      	sub	sp, #8
    d394:	af00      	add	r7, sp, #0
    d396:	4603      	mov	r3, r0
    d398:	6039      	str	r1, [r7, #0]
    d39a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    d39c:	79fb      	ldrb	r3, [r7, #7]
    d39e:	2b01      	cmp	r3, #1
    d3a0:	d009      	beq.n	d3b6 <usbdc_register_handler+0x26>
    d3a2:	2b02      	cmp	r3, #2
    d3a4:	d00c      	beq.n	d3c0 <usbdc_register_handler+0x30>
    d3a6:	2b00      	cmp	r3, #0
    d3a8:	d000      	beq.n	d3ac <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    d3aa:	e00e      	b.n	d3ca <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    d3ac:	6839      	ldr	r1, [r7, #0]
    d3ae:	4809      	ldr	r0, [pc, #36]	; (d3d4 <usbdc_register_handler+0x44>)
    d3b0:	4b09      	ldr	r3, [pc, #36]	; (d3d8 <usbdc_register_handler+0x48>)
    d3b2:	4798      	blx	r3
		break;
    d3b4:	e009      	b.n	d3ca <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    d3b6:	6839      	ldr	r1, [r7, #0]
    d3b8:	4808      	ldr	r0, [pc, #32]	; (d3dc <usbdc_register_handler+0x4c>)
    d3ba:	4b07      	ldr	r3, [pc, #28]	; (d3d8 <usbdc_register_handler+0x48>)
    d3bc:	4798      	blx	r3
		break;
    d3be:	e004      	b.n	d3ca <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    d3c0:	6839      	ldr	r1, [r7, #0]
    d3c2:	4807      	ldr	r0, [pc, #28]	; (d3e0 <usbdc_register_handler+0x50>)
    d3c4:	4b04      	ldr	r3, [pc, #16]	; (d3d8 <usbdc_register_handler+0x48>)
    d3c6:	4798      	blx	r3
		break;
    d3c8:	bf00      	nop
	}
}
    d3ca:	bf00      	nop
    d3cc:	3708      	adds	r7, #8
    d3ce:	46bd      	mov	sp, r7
    d3d0:	bd80      	pop	{r7, pc}
    d3d2:	bf00      	nop
    d3d4:	20000e34 	.word	0x20000e34
    d3d8:	00003979 	.word	0x00003979
    d3dc:	20000e38 	.word	0x20000e38
    d3e0:	20000e3c 	.word	0x20000e3c

0000d3e4 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d3e4:	b580      	push	{r7, lr}
    d3e6:	b084      	sub	sp, #16
    d3e8:	af00      	add	r7, sp, #0
    d3ea:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    d3ec:	687b      	ldr	r3, [r7, #4]
    d3ee:	2b00      	cmp	r3, #0
    d3f0:	bf14      	ite	ne
    d3f2:	2301      	movne	r3, #1
    d3f4:	2300      	moveq	r3, #0
    d3f6:	b2db      	uxtb	r3, r3
    d3f8:	f240 3255 	movw	r2, #853	; 0x355
    d3fc:	4910      	ldr	r1, [pc, #64]	; (d440 <usbdc_init+0x5c>)
    d3fe:	4618      	mov	r0, r3
    d400:	4b10      	ldr	r3, [pc, #64]	; (d444 <usbdc_init+0x60>)
    d402:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    d404:	4b10      	ldr	r3, [pc, #64]	; (d448 <usbdc_init+0x64>)
    d406:	4798      	blx	r3
    d408:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    d40a:	68fb      	ldr	r3, [r7, #12]
    d40c:	2b00      	cmp	r3, #0
    d40e:	da01      	bge.n	d414 <usbdc_init+0x30>
		return rc;
    d410:	68fb      	ldr	r3, [r7, #12]
    d412:	e010      	b.n	d436 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d414:	2220      	movs	r2, #32
    d416:	2100      	movs	r1, #0
    d418:	480c      	ldr	r0, [pc, #48]	; (d44c <usbdc_init+0x68>)
    d41a:	4b0d      	ldr	r3, [pc, #52]	; (d450 <usbdc_init+0x6c>)
    d41c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    d41e:	4a0b      	ldr	r2, [pc, #44]	; (d44c <usbdc_init+0x68>)
    d420:	687b      	ldr	r3, [r7, #4]
    d422:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d424:	490b      	ldr	r1, [pc, #44]	; (d454 <usbdc_init+0x70>)
    d426:	2000      	movs	r0, #0
    d428:	4b0b      	ldr	r3, [pc, #44]	; (d458 <usbdc_init+0x74>)
    d42a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d42c:	490b      	ldr	r1, [pc, #44]	; (d45c <usbdc_init+0x78>)
    d42e:	2001      	movs	r0, #1
    d430:	4b09      	ldr	r3, [pc, #36]	; (d458 <usbdc_init+0x74>)
    d432:	4798      	blx	r3

	return 0;
    d434:	2300      	movs	r3, #0
}
    d436:	4618      	mov	r0, r3
    d438:	3710      	adds	r7, #16
    d43a:	46bd      	mov	sp, r7
    d43c:	bd80      	pop	{r7, pc}
    d43e:	bf00      	nop
    d440:	0000f68c 	.word	0x0000f68c
    d444:	0000389d 	.word	0x0000389d
    d448:	000032f5 	.word	0x000032f5
    d44c:	20000e30 	.word	0x20000e30
    d450:	0000eead 	.word	0x0000eead
    d454:	0000d141 	.word	0x0000d141
    d458:	000033a1 	.word	0x000033a1
    d45c:	0000d31d 	.word	0x0000d31d

0000d460 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    d460:	b580      	push	{r7, lr}
    d462:	b082      	sub	sp, #8
    d464:	af00      	add	r7, sp, #0
    d466:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    d468:	6879      	ldr	r1, [r7, #4]
    d46a:	4803      	ldr	r0, [pc, #12]	; (d478 <usbdc_register_function+0x18>)
    d46c:	4b03      	ldr	r3, [pc, #12]	; (d47c <usbdc_register_function+0x1c>)
    d46e:	4798      	blx	r3
}
    d470:	bf00      	nop
    d472:	3708      	adds	r7, #8
    d474:	46bd      	mov	sp, r7
    d476:	bd80      	pop	{r7, pc}
    d478:	20000e40 	.word	0x20000e40
    d47c:	00003979 	.word	0x00003979

0000d480 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d480:	b580      	push	{r7, lr}
    d482:	b082      	sub	sp, #8
    d484:	af00      	add	r7, sp, #0
    d486:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    d488:	4b0f      	ldr	r3, [pc, #60]	; (d4c8 <usbdc_start+0x48>)
    d48a:	7e9b      	ldrb	r3, [r3, #26]
    d48c:	2b00      	cmp	r3, #0
    d48e:	d002      	beq.n	d496 <usbdc_start+0x16>
		return ERR_BUSY;
    d490:	f06f 0303 	mvn.w	r3, #3
    d494:	e013      	b.n	d4be <usbdc_start+0x3e>
	}

	if (desces) {
    d496:	687b      	ldr	r3, [r7, #4]
    d498:	2b00      	cmp	r3, #0
    d49a:	d00e      	beq.n	d4ba <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    d49c:	4a0a      	ldr	r2, [pc, #40]	; (d4c8 <usbdc_start+0x48>)
    d49e:	687b      	ldr	r3, [r7, #4]
    d4a0:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d4a2:	687b      	ldr	r3, [r7, #4]
    d4a4:	681b      	ldr	r3, [r3, #0]
    d4a6:	79da      	ldrb	r2, [r3, #7]
    d4a8:	4b07      	ldr	r3, [pc, #28]	; (d4c8 <usbdc_start+0x48>)
    d4aa:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d4ac:	4b06      	ldr	r3, [pc, #24]	; (d4c8 <usbdc_start+0x48>)
    d4ae:	2201      	movs	r2, #1
    d4b0:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d4b2:	4b06      	ldr	r3, [pc, #24]	; (d4cc <usbdc_start+0x4c>)
    d4b4:	4798      	blx	r3
	return ERR_NONE;
    d4b6:	2300      	movs	r3, #0
    d4b8:	e001      	b.n	d4be <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    d4ba:	f06f 0308 	mvn.w	r3, #8
}
    d4be:	4618      	mov	r0, r3
    d4c0:	3708      	adds	r7, #8
    d4c2:	46bd      	mov	sp, r7
    d4c4:	bd80      	pop	{r7, pc}
    d4c6:	bf00      	nop
    d4c8:	20000e30 	.word	0x20000e30
    d4cc:	000033c5 	.word	0x000033c5

0000d4d0 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    d4d0:	b580      	push	{r7, lr}
    d4d2:	af00      	add	r7, sp, #0
	usb_d_attach();
    d4d4:	4b01      	ldr	r3, [pc, #4]	; (d4dc <usbdc_attach+0xc>)
    d4d6:	4798      	blx	r3
}
    d4d8:	bf00      	nop
    d4da:	bd80      	pop	{r7, pc}
    d4dc:	000033d9 	.word	0x000033d9

0000d4e0 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    d4e0:	b480      	push	{r7}
    d4e2:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    d4e4:	4b03      	ldr	r3, [pc, #12]	; (d4f4 <usbdc_get_ctrl_buffer+0x14>)
    d4e6:	695b      	ldr	r3, [r3, #20]
}
    d4e8:	4618      	mov	r0, r3
    d4ea:	46bd      	mov	sp, r7
    d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    d4f0:	4770      	bx	lr
    d4f2:	bf00      	nop
    d4f4:	20000e30 	.word	0x20000e30

0000d4f8 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    d4f8:	b480      	push	{r7}
    d4fa:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    d4fc:	4b07      	ldr	r3, [pc, #28]	; (d51c <usbdc_get_state+0x24>)
    d4fe:	7e9b      	ldrb	r3, [r3, #26]
    d500:	f003 0310 	and.w	r3, r3, #16
    d504:	2b00      	cmp	r3, #0
    d506:	d001      	beq.n	d50c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    d508:	2310      	movs	r3, #16
    d50a:	e001      	b.n	d510 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    d50c:	4b03      	ldr	r3, [pc, #12]	; (d51c <usbdc_get_state+0x24>)
    d50e:	7e9b      	ldrb	r3, [r3, #26]
}
    d510:	4618      	mov	r0, r3
    d512:	46bd      	mov	sp, r7
    d514:	f85d 7b04 	ldr.w	r7, [sp], #4
    d518:	4770      	bx	lr
    d51a:	bf00      	nop
    d51c:	20000e30 	.word	0x20000e30

0000d520 <usb_get_u16>:
{
    d520:	b480      	push	{r7}
    d522:	b083      	sub	sp, #12
    d524:	af00      	add	r7, sp, #0
    d526:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d528:	687b      	ldr	r3, [r7, #4]
    d52a:	781b      	ldrb	r3, [r3, #0]
    d52c:	b29a      	uxth	r2, r3
    d52e:	687b      	ldr	r3, [r7, #4]
    d530:	3301      	adds	r3, #1
    d532:	781b      	ldrb	r3, [r3, #0]
    d534:	b29b      	uxth	r3, r3
    d536:	021b      	lsls	r3, r3, #8
    d538:	b29b      	uxth	r3, r3
    d53a:	4413      	add	r3, r2
    d53c:	b29b      	uxth	r3, r3
}
    d53e:	4618      	mov	r0, r3
    d540:	370c      	adds	r7, #12
    d542:	46bd      	mov	sp, r7
    d544:	f85d 7b04 	ldr.w	r7, [sp], #4
    d548:	4770      	bx	lr

0000d54a <usb_desc_len>:
{
    d54a:	b480      	push	{r7}
    d54c:	b083      	sub	sp, #12
    d54e:	af00      	add	r7, sp, #0
    d550:	6078      	str	r0, [r7, #4]
	return desc[0];
    d552:	687b      	ldr	r3, [r7, #4]
    d554:	781b      	ldrb	r3, [r3, #0]
}
    d556:	4618      	mov	r0, r3
    d558:	370c      	adds	r7, #12
    d55a:	46bd      	mov	sp, r7
    d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d560:	4770      	bx	lr

0000d562 <usb_desc_type>:
{
    d562:	b480      	push	{r7}
    d564:	b083      	sub	sp, #12
    d566:	af00      	add	r7, sp, #0
    d568:	6078      	str	r0, [r7, #4]
	return desc[1];
    d56a:	687b      	ldr	r3, [r7, #4]
    d56c:	3301      	adds	r3, #1
    d56e:	781b      	ldrb	r3, [r3, #0]
}
    d570:	4618      	mov	r0, r3
    d572:	370c      	adds	r7, #12
    d574:	46bd      	mov	sp, r7
    d576:	f85d 7b04 	ldr.w	r7, [sp], #4
    d57a:	4770      	bx	lr

0000d57c <usb_desc_next>:
{
    d57c:	b580      	push	{r7, lr}
    d57e:	b082      	sub	sp, #8
    d580:	af00      	add	r7, sp, #0
    d582:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d584:	6878      	ldr	r0, [r7, #4]
    d586:	4b05      	ldr	r3, [pc, #20]	; (d59c <usb_desc_next+0x20>)
    d588:	4798      	blx	r3
    d58a:	4603      	mov	r3, r0
    d58c:	461a      	mov	r2, r3
    d58e:	687b      	ldr	r3, [r7, #4]
    d590:	4413      	add	r3, r2
}
    d592:	4618      	mov	r0, r3
    d594:	3708      	adds	r7, #8
    d596:	46bd      	mov	sp, r7
    d598:	bd80      	pop	{r7, pc}
    d59a:	bf00      	nop
    d59c:	0000d54b 	.word	0x0000d54b

0000d5a0 <usb_cfg_desc_total_len>:
{
    d5a0:	b580      	push	{r7, lr}
    d5a2:	b082      	sub	sp, #8
    d5a4:	af00      	add	r7, sp, #0
    d5a6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d5a8:	687b      	ldr	r3, [r7, #4]
    d5aa:	3302      	adds	r3, #2
    d5ac:	4618      	mov	r0, r3
    d5ae:	4b03      	ldr	r3, [pc, #12]	; (d5bc <usb_cfg_desc_total_len+0x1c>)
    d5b0:	4798      	blx	r3
    d5b2:	4603      	mov	r3, r0
}
    d5b4:	4618      	mov	r0, r3
    d5b6:	3708      	adds	r7, #8
    d5b8:	46bd      	mov	sp, r7
    d5ba:	bd80      	pop	{r7, pc}
    d5bc:	0000d521 	.word	0x0000d521

0000d5c0 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    d5c0:	b580      	push	{r7, lr}
    d5c2:	b082      	sub	sp, #8
    d5c4:	af00      	add	r7, sp, #0
    d5c6:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d5c8:	6878      	ldr	r0, [r7, #4]
    d5ca:	4b05      	ldr	r3, [pc, #20]	; (d5e0 <usb_cfg_desc_next+0x20>)
    d5cc:	4798      	blx	r3
    d5ce:	4603      	mov	r3, r0
    d5d0:	461a      	mov	r2, r3
    d5d2:	687b      	ldr	r3, [r7, #4]
    d5d4:	4413      	add	r3, r2
}
    d5d6:	4618      	mov	r0, r3
    d5d8:	3708      	adds	r7, #8
    d5da:	46bd      	mov	sp, r7
    d5dc:	bd80      	pop	{r7, pc}
    d5de:	bf00      	nop
    d5e0:	0000d5a1 	.word	0x0000d5a1

0000d5e4 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    d5e4:	b580      	push	{r7, lr}
    d5e6:	b084      	sub	sp, #16
    d5e8:	af00      	add	r7, sp, #0
    d5ea:	60f8      	str	r0, [r7, #12]
    d5ec:	60b9      	str	r1, [r7, #8]
    d5ee:	4613      	mov	r3, r2
    d5f0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d5f2:	e015      	b.n	d620 <usb_find_desc+0x3c>
		_desc_len_check();
    d5f4:	68f8      	ldr	r0, [r7, #12]
    d5f6:	4b0f      	ldr	r3, [pc, #60]	; (d634 <usb_find_desc+0x50>)
    d5f8:	4798      	blx	r3
    d5fa:	4603      	mov	r3, r0
    d5fc:	2b01      	cmp	r3, #1
    d5fe:	d801      	bhi.n	d604 <usb_find_desc+0x20>
    d600:	2300      	movs	r3, #0
    d602:	e012      	b.n	d62a <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    d604:	68f8      	ldr	r0, [r7, #12]
    d606:	4b0c      	ldr	r3, [pc, #48]	; (d638 <usb_find_desc+0x54>)
    d608:	4798      	blx	r3
    d60a:	4603      	mov	r3, r0
    d60c:	461a      	mov	r2, r3
    d60e:	79fb      	ldrb	r3, [r7, #7]
    d610:	4293      	cmp	r3, r2
    d612:	d101      	bne.n	d618 <usb_find_desc+0x34>
			return desc;
    d614:	68fb      	ldr	r3, [r7, #12]
    d616:	e008      	b.n	d62a <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    d618:	68f8      	ldr	r0, [r7, #12]
    d61a:	4b08      	ldr	r3, [pc, #32]	; (d63c <usb_find_desc+0x58>)
    d61c:	4798      	blx	r3
    d61e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d620:	68fa      	ldr	r2, [r7, #12]
    d622:	68bb      	ldr	r3, [r7, #8]
    d624:	429a      	cmp	r2, r3
    d626:	d3e5      	bcc.n	d5f4 <usb_find_desc+0x10>
	}
	return NULL;
    d628:	2300      	movs	r3, #0
}
    d62a:	4618      	mov	r0, r3
    d62c:	3710      	adds	r7, #16
    d62e:	46bd      	mov	sp, r7
    d630:	bd80      	pop	{r7, pc}
    d632:	bf00      	nop
    d634:	0000d54b 	.word	0x0000d54b
    d638:	0000d563 	.word	0x0000d563
    d63c:	0000d57d 	.word	0x0000d57d

0000d640 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    d640:	b580      	push	{r7, lr}
    d642:	b082      	sub	sp, #8
    d644:	af00      	add	r7, sp, #0
    d646:	6078      	str	r0, [r7, #4]
    d648:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d64a:	e019      	b.n	d680 <usb_find_ep_desc+0x40>
		_desc_len_check();
    d64c:	6878      	ldr	r0, [r7, #4]
    d64e:	4b12      	ldr	r3, [pc, #72]	; (d698 <usb_find_ep_desc+0x58>)
    d650:	4798      	blx	r3
    d652:	4603      	mov	r3, r0
    d654:	2b01      	cmp	r3, #1
    d656:	d801      	bhi.n	d65c <usb_find_ep_desc+0x1c>
    d658:	2300      	movs	r3, #0
    d65a:	e018      	b.n	d68e <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d65c:	6878      	ldr	r0, [r7, #4]
    d65e:	4b0f      	ldr	r3, [pc, #60]	; (d69c <usb_find_ep_desc+0x5c>)
    d660:	4798      	blx	r3
    d662:	4603      	mov	r3, r0
    d664:	2b04      	cmp	r3, #4
    d666:	d010      	beq.n	d68a <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d668:	6878      	ldr	r0, [r7, #4]
    d66a:	4b0c      	ldr	r3, [pc, #48]	; (d69c <usb_find_ep_desc+0x5c>)
    d66c:	4798      	blx	r3
    d66e:	4603      	mov	r3, r0
    d670:	2b05      	cmp	r3, #5
    d672:	d101      	bne.n	d678 <usb_find_ep_desc+0x38>
			return desc;
    d674:	687b      	ldr	r3, [r7, #4]
    d676:	e00a      	b.n	d68e <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    d678:	6878      	ldr	r0, [r7, #4]
    d67a:	4b09      	ldr	r3, [pc, #36]	; (d6a0 <usb_find_ep_desc+0x60>)
    d67c:	4798      	blx	r3
    d67e:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    d680:	687a      	ldr	r2, [r7, #4]
    d682:	683b      	ldr	r3, [r7, #0]
    d684:	429a      	cmp	r2, r3
    d686:	d3e1      	bcc.n	d64c <usb_find_ep_desc+0xc>
    d688:	e000      	b.n	d68c <usb_find_ep_desc+0x4c>
			break;
    d68a:	bf00      	nop
	}
	return NULL;
    d68c:	2300      	movs	r3, #0
}
    d68e:	4618      	mov	r0, r3
    d690:	3708      	adds	r7, #8
    d692:	46bd      	mov	sp, r7
    d694:	bd80      	pop	{r7, pc}
    d696:	bf00      	nop
    d698:	0000d54b 	.word	0x0000d54b
    d69c:	0000d563 	.word	0x0000d563
    d6a0:	0000d57d 	.word	0x0000d57d

0000d6a4 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d6a4:	b580      	push	{r7, lr}
    d6a6:	b084      	sub	sp, #16
    d6a8:	af00      	add	r7, sp, #0
    d6aa:	60f8      	str	r0, [r7, #12]
    d6ac:	60b9      	str	r1, [r7, #8]
    d6ae:	4613      	mov	r3, r2
    d6b0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    d6b2:	2202      	movs	r2, #2
    d6b4:	68b9      	ldr	r1, [r7, #8]
    d6b6:	68f8      	ldr	r0, [r7, #12]
    d6b8:	4b15      	ldr	r3, [pc, #84]	; (d710 <usb_find_cfg_desc+0x6c>)
    d6ba:	4798      	blx	r3
    d6bc:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    d6be:	68fb      	ldr	r3, [r7, #12]
    d6c0:	2b00      	cmp	r3, #0
    d6c2:	d11a      	bne.n	d6fa <usb_find_cfg_desc+0x56>
		return NULL;
    d6c4:	2300      	movs	r3, #0
    d6c6:	e01f      	b.n	d708 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    d6c8:	68f8      	ldr	r0, [r7, #12]
    d6ca:	4b12      	ldr	r3, [pc, #72]	; (d714 <usb_find_cfg_desc+0x70>)
    d6cc:	4798      	blx	r3
    d6ce:	4603      	mov	r3, r0
    d6d0:	2b01      	cmp	r3, #1
    d6d2:	d801      	bhi.n	d6d8 <usb_find_cfg_desc+0x34>
    d6d4:	2300      	movs	r3, #0
    d6d6:	e017      	b.n	d708 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    d6d8:	68fb      	ldr	r3, [r7, #12]
    d6da:	3301      	adds	r3, #1
    d6dc:	781b      	ldrb	r3, [r3, #0]
    d6de:	2b02      	cmp	r3, #2
    d6e0:	d110      	bne.n	d704 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    d6e2:	68fb      	ldr	r3, [r7, #12]
    d6e4:	3305      	adds	r3, #5
    d6e6:	781b      	ldrb	r3, [r3, #0]
    d6e8:	79fa      	ldrb	r2, [r7, #7]
    d6ea:	429a      	cmp	r2, r3
    d6ec:	d101      	bne.n	d6f2 <usb_find_cfg_desc+0x4e>
			return desc;
    d6ee:	68fb      	ldr	r3, [r7, #12]
    d6f0:	e00a      	b.n	d708 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    d6f2:	68f8      	ldr	r0, [r7, #12]
    d6f4:	4b08      	ldr	r3, [pc, #32]	; (d718 <usb_find_cfg_desc+0x74>)
    d6f6:	4798      	blx	r3
    d6f8:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d6fa:	68fa      	ldr	r2, [r7, #12]
    d6fc:	68bb      	ldr	r3, [r7, #8]
    d6fe:	429a      	cmp	r2, r3
    d700:	d3e2      	bcc.n	d6c8 <usb_find_cfg_desc+0x24>
    d702:	e000      	b.n	d706 <usb_find_cfg_desc+0x62>
			break;
    d704:	bf00      	nop
	}
	return NULL;
    d706:	2300      	movs	r3, #0
}
    d708:	4618      	mov	r0, r3
    d70a:	3710      	adds	r7, #16
    d70c:	46bd      	mov	sp, r7
    d70e:	bd80      	pop	{r7, pc}
    d710:	0000d5e5 	.word	0x0000d5e5
    d714:	0000d54b 	.word	0x0000d54b
    d718:	0000d5c1 	.word	0x0000d5c1

0000d71c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    d71c:	b580      	push	{r7, lr}
    d71e:	b086      	sub	sp, #24
    d720:	af00      	add	r7, sp, #0
    d722:	60f8      	str	r0, [r7, #12]
    d724:	60b9      	str	r1, [r7, #8]
    d726:	4613      	mov	r3, r2
    d728:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d72a:	2300      	movs	r3, #0
    d72c:	75fb      	strb	r3, [r7, #23]
    d72e:	e020      	b.n	d772 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    d730:	2203      	movs	r2, #3
    d732:	68b9      	ldr	r1, [r7, #8]
    d734:	68f8      	ldr	r0, [r7, #12]
    d736:	4b13      	ldr	r3, [pc, #76]	; (d784 <usb_find_str_desc+0x68>)
    d738:	4798      	blx	r3
    d73a:	60f8      	str	r0, [r7, #12]
		if (desc) {
    d73c:	68fb      	ldr	r3, [r7, #12]
    d73e:	2b00      	cmp	r3, #0
    d740:	d015      	beq.n	d76e <usb_find_str_desc+0x52>
			_desc_len_check();
    d742:	68f8      	ldr	r0, [r7, #12]
    d744:	4b10      	ldr	r3, [pc, #64]	; (d788 <usb_find_str_desc+0x6c>)
    d746:	4798      	blx	r3
    d748:	4603      	mov	r3, r0
    d74a:	2b01      	cmp	r3, #1
    d74c:	d801      	bhi.n	d752 <usb_find_str_desc+0x36>
    d74e:	2300      	movs	r3, #0
    d750:	e014      	b.n	d77c <usb_find_str_desc+0x60>
			if (i == str_index) {
    d752:	7dfa      	ldrb	r2, [r7, #23]
    d754:	79fb      	ldrb	r3, [r7, #7]
    d756:	429a      	cmp	r2, r3
    d758:	d101      	bne.n	d75e <usb_find_str_desc+0x42>
				return desc;
    d75a:	68fb      	ldr	r3, [r7, #12]
    d75c:	e00e      	b.n	d77c <usb_find_str_desc+0x60>
			}
			i++;
    d75e:	7dfb      	ldrb	r3, [r7, #23]
    d760:	3301      	adds	r3, #1
    d762:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    d764:	68f8      	ldr	r0, [r7, #12]
    d766:	4b09      	ldr	r3, [pc, #36]	; (d78c <usb_find_str_desc+0x70>)
    d768:	4798      	blx	r3
    d76a:	60f8      	str	r0, [r7, #12]
    d76c:	e001      	b.n	d772 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    d76e:	2300      	movs	r3, #0
    d770:	e004      	b.n	d77c <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    d772:	68fa      	ldr	r2, [r7, #12]
    d774:	68bb      	ldr	r3, [r7, #8]
    d776:	429a      	cmp	r2, r3
    d778:	d3da      	bcc.n	d730 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    d77a:	2300      	movs	r3, #0
}
    d77c:	4618      	mov	r0, r3
    d77e:	3718      	adds	r7, #24
    d780:	46bd      	mov	sp, r7
    d782:	bd80      	pop	{r7, pc}
    d784:	0000d5e5 	.word	0x0000d5e5
    d788:	0000d54b 	.word	0x0000d54b
    d78c:	0000d57d 	.word	0x0000d57d

0000d790 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:

// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    d790:	b480      	push	{r7}
    d792:	b083      	sub	sp, #12
    d794:	af00      	add	r7, sp, #0
    d796:	6078      	str	r0, [r7, #4]
    d798:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    d79a:	687b      	ldr	r3, [r7, #4]
    d79c:	683a      	ldr	r2, [r7, #0]
    d79e:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    d7a0:	687b      	ldr	r3, [r7, #4]
    d7a2:	4618      	mov	r0, r3
    d7a4:	370c      	adds	r7, #12
    d7a6:	46bd      	mov	sp, r7
    d7a8:	bc80      	pop	{r7}
    d7aa:	4770      	bx	lr

0000d7ac <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    d7ac:	b480      	push	{r7}
    d7ae:	b083      	sub	sp, #12
    d7b0:	af00      	add	r7, sp, #0
    d7b2:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    d7b4:	687b      	ldr	r3, [r7, #4]
    d7b6:	4618      	mov	r0, r3
    d7b8:	370c      	adds	r7, #12
    d7ba:	46bd      	mov	sp, r7
    d7bc:	bc80      	pop	{r7}
    d7be:	4770      	bx	lr

0000d7c0 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    d7c0:	b580      	push	{r7, lr}
    d7c2:	b084      	sub	sp, #16
    d7c4:	af00      	add	r7, sp, #0
    d7c6:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    d7c8:	687b      	ldr	r3, [r7, #4]
    d7ca:	4a14      	ldr	r2, [pc, #80]	; (d81c <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    d7cc:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    d7ce:	687b      	ldr	r3, [r7, #4]
    d7d0:	4a12      	ldr	r2, [pc, #72]	; (d81c <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    d7d2:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    d7d4:	687b      	ldr	r3, [r7, #4]
    d7d6:	691a      	ldr	r2, [r3, #16]
    d7d8:	687b      	ldr	r3, [r7, #4]
    d7da:	330c      	adds	r3, #12
    d7dc:	4619      	mov	r1, r3
    d7de:	4610      	mov	r0, r2
    d7e0:	4b0f      	ldr	r3, [pc, #60]	; (d820 <_ZN14I2C_Sync_Class4InitEv+0x60>)
    d7e2:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    d7e4:	687b      	ldr	r3, [r7, #4]
    d7e6:	691b      	ldr	r3, [r3, #16]
    d7e8:	4618      	mov	r0, r3
    d7ea:	4b0e      	ldr	r3, [pc, #56]	; (d824 <_ZN14I2C_Sync_Class4InitEv+0x64>)
    d7ec:	4798      	blx	r3
    d7ee:	4603      	mov	r3, r0
    d7f0:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
    d7f2:	7bfb      	ldrb	r3, [r7, #15]
    d7f4:	2b00      	cmp	r3, #0
    d7f6:	bf0c      	ite	eq
    d7f8:	2301      	moveq	r3, #1
    d7fa:	2300      	movne	r3, #0
    d7fc:	b2da      	uxtb	r2, r3
    d7fe:	687b      	ldr	r3, [r7, #4]
    d800:	725a      	strb	r2, [r3, #9]
	initiated=isOK;
    d802:	687b      	ldr	r3, [r7, #4]
    d804:	7a5b      	ldrb	r3, [r3, #9]
    d806:	b2da      	uxtb	r2, r3
    d808:	687b      	ldr	r3, [r7, #4]
    d80a:	721a      	strb	r2, [r3, #8]
	return isOK;
    d80c:	687b      	ldr	r3, [r7, #4]
    d80e:	7a5b      	ldrb	r3, [r3, #9]
    d810:	b2db      	uxtb	r3, r3
	
}
    d812:	4618      	mov	r0, r3
    d814:	3710      	adds	r7, #16
    d816:	46bd      	mov	sp, r7
    d818:	bd80      	pop	{r7, pc}
    d81a:	bf00      	nop
    d81c:	20000e50 	.word	0x20000e50
    d820:	00002697 	.word	0x00002697
    d824:	0000263d 	.word	0x0000263d

0000d828 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    d828:	b580      	push	{r7, lr}
    d82a:	b082      	sub	sp, #8
    d82c:	af00      	add	r7, sp, #0
    d82e:	6078      	str	r0, [r7, #4]
    d830:	460b      	mov	r3, r1
    d832:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    d834:	687b      	ldr	r3, [r7, #4]
    d836:	691b      	ldr	r3, [r3, #16]
    d838:	78fa      	ldrb	r2, [r7, #3]
    d83a:	b211      	sxth	r1, r2
    d83c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    d840:	4618      	mov	r0, r3
    d842:	4b03      	ldr	r3, [pc, #12]	; (d850 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    d844:	4798      	blx	r3
    d846:	4603      	mov	r3, r0
}
    d848:	4618      	mov	r0, r3
    d84a:	3708      	adds	r7, #8
    d84c:	46bd      	mov	sp, r7
    d84e:	bd80      	pop	{r7, pc}
    d850:	0000265d 	.word	0x0000265d

0000d854 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    d854:	b580      	push	{r7, lr}
    d856:	b086      	sub	sp, #24
    d858:	af00      	add	r7, sp, #0
    d85a:	60f8      	str	r0, [r7, #12]
    d85c:	60b9      	str	r1, [r7, #8]
    d85e:	4613      	mov	r3, r2
    d860:	80fb      	strh	r3, [r7, #6]
	//Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    d862:	68fb      	ldr	r3, [r7, #12]
    d864:	68db      	ldr	r3, [r3, #12]
    d866:	88fa      	ldrh	r2, [r7, #6]
    d868:	68b9      	ldr	r1, [r7, #8]
    d86a:	4618      	mov	r0, r3
    d86c:	4b03      	ldr	r3, [pc, #12]	; (d87c <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    d86e:	4798      	blx	r3
    d870:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    d872:	697b      	ldr	r3, [r7, #20]
}
    d874:	4618      	mov	r0, r3
    d876:	3718      	adds	r7, #24
    d878:	46bd      	mov	sp, r7
    d87a:	bd80      	pop	{r7, pc}
    d87c:	0000ec55 	.word	0x0000ec55

0000d880 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    d880:	b580      	push	{r7, lr}
    d882:	b086      	sub	sp, #24
    d884:	af00      	add	r7, sp, #0
    d886:	60f8      	str	r0, [r7, #12]
    d888:	60b9      	str	r1, [r7, #8]
    d88a:	4613      	mov	r3, r2
    d88c:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    d88e:	68fb      	ldr	r3, [r7, #12]
    d890:	68db      	ldr	r3, [r3, #12]
    d892:	88fa      	ldrh	r2, [r7, #6]
    d894:	68b9      	ldr	r1, [r7, #8]
    d896:	4618      	mov	r0, r3
    d898:	4b03      	ldr	r3, [pc, #12]	; (d8a8 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    d89a:	4798      	blx	r3
    d89c:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    d89e:	697b      	ldr	r3, [r7, #20]
}
    d8a0:	4618      	mov	r0, r3
    d8a2:	3718      	adds	r7, #24
    d8a4:	46bd      	mov	sp, r7
    d8a6:	bd80      	pop	{r7, pc}
    d8a8:	0000eca5 	.word	0x0000eca5

0000d8ac <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    d8ac:	b480      	push	{r7}
    d8ae:	b083      	sub	sp, #12
    d8b0:	af00      	add	r7, sp, #0
    d8b2:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    d8b4:	687b      	ldr	r3, [r7, #4]
    d8b6:	4618      	mov	r0, r3
    d8b8:	370c      	adds	r7, #12
    d8ba:	46bd      	mov	sp, r7
    d8bc:	bc80      	pop	{r7}
    d8be:	4770      	bx	lr

0000d8c0 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    d8c0:	b480      	push	{r7}
    d8c2:	b083      	sub	sp, #12
    d8c4:	af00      	add	r7, sp, #0
    d8c6:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    d8c8:	687b      	ldr	r3, [r7, #4]
    d8ca:	4618      	mov	r0, r3
    d8cc:	370c      	adds	r7, #12
    d8ce:	46bd      	mov	sp, r7
    d8d0:	bc80      	pop	{r7}
    d8d2:	4770      	bx	lr

0000d8d4 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
	//i2cClass=i2c;
	isOK=i2cClass->isOK;
	return isOK;
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    d8d4:	b480      	push	{r7}
    d8d6:	b085      	sub	sp, #20
    d8d8:	af00      	add	r7, sp, #0
    d8da:	60f8      	str	r0, [r7, #12]
    d8dc:	460b      	mov	r3, r1
    d8de:	607a      	str	r2, [r7, #4]
    d8e0:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    d8e2:	687b      	ldr	r3, [r7, #4]
    d8e4:	681a      	ldr	r2, [r3, #0]
    d8e6:	68fb      	ldr	r3, [r7, #12]
    d8e8:	615a      	str	r2, [r3, #20]
	rxBuffer=i2c->rxBuffer;
    d8ea:	687b      	ldr	r3, [r7, #4]
    d8ec:	685a      	ldr	r2, [r3, #4]
    d8ee:	68fb      	ldr	r3, [r7, #12]
    d8f0:	619a      	str	r2, [r3, #24]
	i2cAddress=addr;
    d8f2:	68fb      	ldr	r3, [r7, #12]
    d8f4:	7afa      	ldrb	r2, [r7, #11]
    d8f6:	731a      	strb	r2, [r3, #12]
	i2cClass=i2c;
    d8f8:	68fb      	ldr	r3, [r7, #12]
    d8fa:	687a      	ldr	r2, [r7, #4]
    d8fc:	611a      	str	r2, [r3, #16]
	isOK=i2cClass->isOK;
    d8fe:	68fb      	ldr	r3, [r7, #12]
    d900:	691b      	ldr	r3, [r3, #16]
    d902:	7a5b      	ldrb	r3, [r3, #9]
    d904:	b2da      	uxtb	r2, r3
    d906:	68fb      	ldr	r3, [r7, #12]
    d908:	729a      	strb	r2, [r3, #10]
	return isOK;
    d90a:	68fb      	ldr	r3, [r7, #12]
    d90c:	7a9b      	ldrb	r3, [r3, #10]
    d90e:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    d910:	4618      	mov	r0, r3
    d912:	3714      	adds	r7, #20
    d914:	46bd      	mov	sp, r7
    d916:	bc80      	pop	{r7}
    d918:	4770      	bx	lr

0000d91a <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    d91a:	b480      	push	{r7}
    d91c:	b083      	sub	sp, #12
    d91e:	af00      	add	r7, sp, #0
    d920:	6078      	str	r0, [r7, #4]
    d922:	460b      	mov	r3, r1
    d924:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    d926:	78fb      	ldrb	r3, [r7, #3]
    d928:	f003 0307 	and.w	r3, r3, #7
    d92c:	b2db      	uxtb	r3, r3
}
    d92e:	4618      	mov	r0, r3
    d930:	370c      	adds	r7, #12
    d932:	46bd      	mov	sp, r7
    d934:	bc80      	pop	{r7}
    d936:	4770      	bx	lr

0000d938 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    d938:	b480      	push	{r7}
    d93a:	b083      	sub	sp, #12
    d93c:	af00      	add	r7, sp, #0
    d93e:	6078      	str	r0, [r7, #4]
    d940:	4608      	mov	r0, r1
    d942:	4611      	mov	r1, r2
    d944:	461a      	mov	r2, r3
    d946:	4603      	mov	r3, r0
    d948:	70fb      	strb	r3, [r7, #3]
    d94a:	460b      	mov	r3, r1
    d94c:	70bb      	strb	r3, [r7, #2]
    d94e:	4613      	mov	r3, r2
    d950:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    d952:	78fb      	ldrb	r3, [r7, #3]
    d954:	2b07      	cmp	r3, #7
    d956:	dc01      	bgt.n	d95c <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    d958:	78bb      	ldrb	r3, [r7, #2]
    d95a:	e000      	b.n	d95e <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    d95c:	787b      	ldrb	r3, [r7, #1]
}
    d95e:	4618      	mov	r0, r3
    d960:	370c      	adds	r7, #12
    d962:	46bd      	mov	sp, r7
    d964:	bc80      	pop	{r7}
    d966:	4770      	bx	lr

0000d968 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    d968:	b580      	push	{r7, lr}
    d96a:	b082      	sub	sp, #8
    d96c:	af00      	add	r7, sp, #0
    d96e:	6078      	str	r0, [r7, #4]
    d970:	460b      	mov	r3, r1
    d972:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    d974:	687b      	ldr	r3, [r7, #4]
    d976:	691a      	ldr	r2, [r3, #16]
    d978:	687b      	ldr	r3, [r7, #4]
    d97a:	7b1b      	ldrb	r3, [r3, #12]
    d97c:	4619      	mov	r1, r3
    d97e:	4610      	mov	r0, r2
    d980:	4b0b      	ldr	r3, [pc, #44]	; (d9b0 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    d982:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    d984:	687b      	ldr	r3, [r7, #4]
    d986:	691b      	ldr	r3, [r3, #16]
    d988:	1cf9      	adds	r1, r7, #3
    d98a:	2201      	movs	r2, #1
    d98c:	4618      	mov	r0, r3
    d98e:	4b09      	ldr	r3, [pc, #36]	; (d9b4 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    d990:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    d992:	687b      	ldr	r3, [r7, #4]
    d994:	6918      	ldr	r0, [r3, #16]
    d996:	687b      	ldr	r3, [r7, #4]
    d998:	3304      	adds	r3, #4
    d99a:	2201      	movs	r2, #1
    d99c:	4619      	mov	r1, r3
    d99e:	4b06      	ldr	r3, [pc, #24]	; (d9b8 <_ZN14MCP23008_Class12readRegisterEh+0x50>)
    d9a0:	4798      	blx	r3

	return registerValue;
    d9a2:	687b      	ldr	r3, [r7, #4]
    d9a4:	791b      	ldrb	r3, [r3, #4]
}
    d9a6:	4618      	mov	r0, r3
    d9a8:	3708      	adds	r7, #8
    d9aa:	46bd      	mov	sp, r7
    d9ac:	bd80      	pop	{r7, pc}
    d9ae:	bf00      	nop
    d9b0:	0000d829 	.word	0x0000d829
    d9b4:	0000d855 	.word	0x0000d855
    d9b8:	0000d881 	.word	0x0000d881

0000d9bc <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    d9bc:	b580      	push	{r7, lr}
    d9be:	b082      	sub	sp, #8
    d9c0:	af00      	add	r7, sp, #0
    d9c2:	6078      	str	r0, [r7, #4]
	i2cClass->SetSlaveAddress(i2cAddress);
    d9c4:	687b      	ldr	r3, [r7, #4]
    d9c6:	691a      	ldr	r2, [r3, #16]
    d9c8:	687b      	ldr	r3, [r7, #4]
    d9ca:	7b1b      	ldrb	r3, [r3, #12]
    d9cc:	4619      	mov	r1, r3
    d9ce:	4610      	mov	r0, r2
    d9d0:	4b05      	ldr	r3, [pc, #20]	; (d9e8 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x2c>)
    d9d2:	4798      	blx	r3
	return readRegister(MCP23008_GPIOA);
    d9d4:	2109      	movs	r1, #9
    d9d6:	6878      	ldr	r0, [r7, #4]
    d9d8:	4b04      	ldr	r3, [pc, #16]	; (d9ec <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    d9da:	4798      	blx	r3
    d9dc:	4603      	mov	r3, r0
}
    d9de:	4618      	mov	r0, r3
    d9e0:	3708      	adds	r7, #8
    d9e2:	46bd      	mov	sp, r7
    d9e4:	bd80      	pop	{r7, pc}
    d9e6:	bf00      	nop
    d9e8:	0000d829 	.word	0x0000d829
    d9ec:	0000d969 	.word	0x0000d969

0000d9f0 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    d9f0:	b580      	push	{r7, lr}
    d9f2:	b084      	sub	sp, #16
    d9f4:	af00      	add	r7, sp, #0
    d9f6:	6078      	str	r0, [r7, #4]
    d9f8:	460b      	mov	r3, r1
    d9fa:	70fb      	strb	r3, [r7, #3]
    d9fc:	4613      	mov	r3, r2
    d9fe:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    da00:	687b      	ldr	r3, [r7, #4]
    da02:	691a      	ldr	r2, [r3, #16]
    da04:	687b      	ldr	r3, [r7, #4]
    da06:	7b1b      	ldrb	r3, [r3, #12]
    da08:	4619      	mov	r1, r3
    da0a:	4610      	mov	r0, r2
    da0c:	4b09      	ldr	r3, [pc, #36]	; (da34 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    da0e:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    da10:	78fb      	ldrb	r3, [r7, #3]
    da12:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    da14:	78bb      	ldrb	r3, [r7, #2]
    da16:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    da18:	687b      	ldr	r3, [r7, #4]
    da1a:	691b      	ldr	r3, [r3, #16]
    da1c:	f107 010c 	add.w	r1, r7, #12
    da20:	2202      	movs	r2, #2
    da22:	4618      	mov	r0, r3
    da24:	4b04      	ldr	r3, [pc, #16]	; (da38 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    da26:	4798      	blx	r3
    da28:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    da2a:	4618      	mov	r0, r3
    da2c:	3710      	adds	r7, #16
    da2e:	46bd      	mov	sp, r7
    da30:	bd80      	pop	{r7, pc}
    da32:	bf00      	nop
    da34:	0000d829 	.word	0x0000d829
    da38:	0000d855 	.word	0x0000d855

0000da3c <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
    da3c:	b580      	push	{r7, lr}
    da3e:	b082      	sub	sp, #8
    da40:	af00      	add	r7, sp, #0
    da42:	6078      	str	r0, [r7, #4]
    da44:	460b      	mov	r3, r1
    da46:	70fb      	strb	r3, [r7, #3]
	i2cClass->SetSlaveAddress(i2cAddress);
    da48:	687b      	ldr	r3, [r7, #4]
    da4a:	691a      	ldr	r2, [r3, #16]
    da4c:	687b      	ldr	r3, [r7, #4]
    da4e:	7b1b      	ldrb	r3, [r3, #12]
    da50:	4619      	mov	r1, r3
    da52:	4610      	mov	r0, r2
    da54:	4b06      	ldr	r3, [pc, #24]	; (da70 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
    da56:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
    da58:	78fb      	ldrb	r3, [r7, #3]
    da5a:	461a      	mov	r2, r3
    da5c:	2109      	movs	r1, #9
    da5e:	6878      	ldr	r0, [r7, #4]
    da60:	4b04      	ldr	r3, [pc, #16]	; (da74 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
    da62:	4798      	blx	r3
	return v;
    da64:	78fb      	ldrb	r3, [r7, #3]
}
    da66:	4618      	mov	r0, r3
    da68:	3708      	adds	r7, #8
    da6a:	46bd      	mov	sp, r7
    da6c:	bd80      	pop	{r7, pc}
    da6e:	bf00      	nop
    da70:	0000d829 	.word	0x0000d829
    da74:	0000d9f1 	.word	0x0000d9f1

0000da78 <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
    da78:	b580      	push	{r7, lr}
    da7a:	b084      	sub	sp, #16
    da7c:	af00      	add	r7, sp, #0
    da7e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    da80:	2300      	movs	r3, #0
    da82:	73fb      	strb	r3, [r7, #15]
    da84:	7bfb      	ldrb	r3, [r7, #15]
    da86:	2b07      	cmp	r3, #7
    da88:	dc0f      	bgt.n	daaa <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    da8a:	7bfb      	ldrb	r3, [r7, #15]
    da8c:	2201      	movs	r2, #1
    da8e:	4619      	mov	r1, r3
    da90:	6878      	ldr	r0, [r7, #4]
    da92:	4b08      	ldr	r3, [pc, #32]	; (dab4 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    da94:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    da96:	7bfb      	ldrb	r3, [r7, #15]
    da98:	2201      	movs	r2, #1
    da9a:	4619      	mov	r1, r3
    da9c:	6878      	ldr	r0, [r7, #4]
    da9e:	4b06      	ldr	r3, [pc, #24]	; (dab8 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    daa0:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    daa2:	7bfb      	ldrb	r3, [r7, #15]
    daa4:	3301      	adds	r3, #1
    daa6:	73fb      	strb	r3, [r7, #15]
    daa8:	e7ec      	b.n	da84 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    daaa:	bf00      	nop
    daac:	3710      	adds	r7, #16
    daae:	46bd      	mov	sp, r7
    dab0:	bd80      	pop	{r7, pc}
    dab2:	bf00      	nop
    dab4:	0000dbf1 	.word	0x0000dbf1
    dab8:	0000dcd5 	.word	0x0000dcd5

0000dabc <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
    dabc:	b580      	push	{r7, lr}
    dabe:	b084      	sub	sp, #16
    dac0:	af00      	add	r7, sp, #0
    dac2:	6078      	str	r0, [r7, #4]
    dac4:	460b      	mov	r3, r1
    dac6:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
    dac8:	78fb      	ldrb	r3, [r7, #3]
    daca:	2b00      	cmp	r3, #0
    dacc:	dd23      	ble.n	db16 <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
    dace:	2300      	movs	r3, #0
    dad0:	73fb      	strb	r3, [r7, #15]
    dad2:	7bfb      	ldrb	r3, [r7, #15]
    dad4:	2b07      	cmp	r3, #7
    dad6:	dc21      	bgt.n	db1c <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
    dad8:	78fa      	ldrb	r2, [r7, #3]
    dada:	7bfb      	ldrb	r3, [r7, #15]
    dadc:	fa42 f303 	asr.w	r3, r2, r3
    dae0:	f003 0301 	and.w	r3, r3, #1
    dae4:	2b00      	cmp	r3, #0
    dae6:	d00c      	beq.n	db02 <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
    dae8:	7bfb      	ldrb	r3, [r7, #15]
    daea:	2201      	movs	r2, #1
    daec:	4619      	mov	r1, r3
    daee:	6878      	ldr	r0, [r7, #4]
    daf0:	4b0c      	ldr	r3, [pc, #48]	; (db24 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    daf2:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
    daf4:	7bfb      	ldrb	r3, [r7, #15]
    daf6:	2201      	movs	r2, #1
    daf8:	4619      	mov	r1, r3
    dafa:	6878      	ldr	r0, [r7, #4]
    dafc:	4b0a      	ldr	r3, [pc, #40]	; (db28 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
    dafe:	4798      	blx	r3
    db00:	e005      	b.n	db0e <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
    db02:	7bfb      	ldrb	r3, [r7, #15]
    db04:	2200      	movs	r2, #0
    db06:	4619      	mov	r1, r3
    db08:	6878      	ldr	r0, [r7, #4]
    db0a:	4b06      	ldr	r3, [pc, #24]	; (db24 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    db0c:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
    db0e:	7bfb      	ldrb	r3, [r7, #15]
    db10:	3301      	adds	r3, #1
    db12:	73fb      	strb	r3, [r7, #15]
    db14:	e7dd      	b.n	dad2 <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
    db16:	6878      	ldr	r0, [r7, #4]
    db18:	4b04      	ldr	r3, [pc, #16]	; (db2c <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
    db1a:	4798      	blx	r3
	}
	
}
    db1c:	bf00      	nop
    db1e:	3710      	adds	r7, #16
    db20:	46bd      	mov	sp, r7
    db22:	bd80      	pop	{r7, pc}
    db24:	0000dbf1 	.word	0x0000dbf1
    db28:	0000dcd5 	.word	0x0000dcd5
    db2c:	0000db31 	.word	0x0000db31

0000db30 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
    db30:	b580      	push	{r7, lr}
    db32:	b084      	sub	sp, #16
    db34:	af00      	add	r7, sp, #0
    db36:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    db38:	2300      	movs	r3, #0
    db3a:	73fb      	strb	r3, [r7, #15]
    db3c:	7bfb      	ldrb	r3, [r7, #15]
    db3e:	2b07      	cmp	r3, #7
    db40:	dc09      	bgt.n	db56 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    db42:	7bfb      	ldrb	r3, [r7, #15]
    db44:	2200      	movs	r2, #0
    db46:	4619      	mov	r1, r3
    db48:	6878      	ldr	r0, [r7, #4]
    db4a:	4b05      	ldr	r3, [pc, #20]	; (db60 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    db4c:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    db4e:	7bfb      	ldrb	r3, [r7, #15]
    db50:	3301      	adds	r3, #1
    db52:	73fb      	strb	r3, [r7, #15]
    db54:	e7f2      	b.n	db3c <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    db56:	bf00      	nop
    db58:	3710      	adds	r7, #16
    db5a:	46bd      	mov	sp, r7
    db5c:	bd80      	pop	{r7, pc}
    db5e:	bf00      	nop
    db60:	0000dbf1 	.word	0x0000dbf1

0000db64 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    db64:	b580      	push	{r7, lr}
    db66:	b084      	sub	sp, #16
    db68:	af00      	add	r7, sp, #0
    db6a:	6078      	str	r0, [r7, #4]
    db6c:	4608      	mov	r0, r1
    db6e:	4611      	mov	r1, r2
    db70:	461a      	mov	r2, r3
    db72:	4603      	mov	r3, r0
    db74:	70fb      	strb	r3, [r7, #3]
    db76:	460b      	mov	r3, r1
    db78:	70bb      	strb	r3, [r7, #2]
    db7a:	4613      	mov	r3, r2
    db7c:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    db7e:	787b      	ldrb	r3, [r7, #1]
    db80:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    db82:	78fb      	ldrb	r3, [r7, #3]
    db84:	4619      	mov	r1, r3
    db86:	6878      	ldr	r0, [r7, #4]
    db88:	4b16      	ldr	r3, [pc, #88]	; (dbe4 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    db8a:	4798      	blx	r3
    db8c:	4603      	mov	r3, r0
    db8e:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    db90:	7bfb      	ldrb	r3, [r7, #15]
    db92:	4619      	mov	r1, r3
    db94:	6878      	ldr	r0, [r7, #4]
    db96:	4b14      	ldr	r3, [pc, #80]	; (dbe8 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    db98:	4798      	blx	r3
    db9a:	4603      	mov	r3, r0
    db9c:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    db9e:	78bb      	ldrb	r3, [r7, #2]
    dba0:	2b00      	cmp	r3, #0
    dba2:	d009      	beq.n	dbb8 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    dba4:	7bba      	ldrb	r2, [r7, #14]
    dba6:	7b7b      	ldrb	r3, [r7, #13]
    dba8:	4619      	mov	r1, r3
    dbaa:	2301      	movs	r3, #1
    dbac:	408b      	lsls	r3, r1
    dbae:	b2db      	uxtb	r3, r3
    dbb0:	4313      	orrs	r3, r2
    dbb2:	b2db      	uxtb	r3, r3
    dbb4:	73bb      	strb	r3, [r7, #14]
    dbb6:	e00a      	b.n	dbce <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    dbb8:	7bba      	ldrb	r2, [r7, #14]
    dbba:	7b7b      	ldrb	r3, [r7, #13]
    dbbc:	4619      	mov	r1, r3
    dbbe:	2301      	movs	r3, #1
    dbc0:	408b      	lsls	r3, r1
    dbc2:	b2db      	uxtb	r3, r3
    dbc4:	43db      	mvns	r3, r3
    dbc6:	b2db      	uxtb	r3, r3
    dbc8:	4013      	ands	r3, r2
    dbca:	b2db      	uxtb	r3, r3
    dbcc:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    dbce:	7bba      	ldrb	r2, [r7, #14]
    dbd0:	7bfb      	ldrb	r3, [r7, #15]
    dbd2:	4619      	mov	r1, r3
    dbd4:	6878      	ldr	r0, [r7, #4]
    dbd6:	4b05      	ldr	r3, [pc, #20]	; (dbec <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    dbd8:	4798      	blx	r3
}
    dbda:	bf00      	nop
    dbdc:	3710      	adds	r7, #16
    dbde:	46bd      	mov	sp, r7
    dbe0:	bd80      	pop	{r7, pc}
    dbe2:	bf00      	nop
    dbe4:	0000d91b 	.word	0x0000d91b
    dbe8:	0000d969 	.word	0x0000d969
    dbec:	0000d9f1 	.word	0x0000d9f1

0000dbf0 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    dbf0:	b590      	push	{r4, r7, lr}
    dbf2:	b085      	sub	sp, #20
    dbf4:	af02      	add	r7, sp, #8
    dbf6:	6078      	str	r0, [r7, #4]
    dbf8:	460b      	mov	r3, r1
    dbfa:	70fb      	strb	r3, [r7, #3]
    dbfc:	4613      	mov	r3, r2
    dbfe:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    dc00:	78bb      	ldrb	r3, [r7, #2]
    dc02:	2b01      	cmp	r3, #1
    dc04:	bf0c      	ite	eq
    dc06:	2301      	moveq	r3, #1
    dc08:	2300      	movne	r3, #0
    dc0a:	b2db      	uxtb	r3, r3
    dc0c:	461a      	mov	r2, r3
    dc0e:	78f9      	ldrb	r1, [r7, #3]
    dc10:	2300      	movs	r3, #0
    dc12:	9300      	str	r3, [sp, #0]
    dc14:	2300      	movs	r3, #0
    dc16:	6878      	ldr	r0, [r7, #4]
    dc18:	4c02      	ldr	r4, [pc, #8]	; (dc24 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    dc1a:	47a0      	blx	r4
}
    dc1c:	bf00      	nop
    dc1e:	370c      	adds	r7, #12
    dc20:	46bd      	mov	sp, r7
    dc22:	bd90      	pop	{r4, r7, pc}
    dc24:	0000db65 	.word	0x0000db65

0000dc28 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
    dc28:	b590      	push	{r4, r7, lr}
    dc2a:	b085      	sub	sp, #20
    dc2c:	af00      	add	r7, sp, #0
    dc2e:	6078      	str	r0, [r7, #4]
    dc30:	460b      	mov	r3, r1
    dc32:	70fb      	strb	r3, [r7, #3]
    dc34:	4613      	mov	r3, r2
    dc36:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
    dc38:	78fb      	ldrb	r3, [r7, #3]
    dc3a:	4619      	mov	r1, r3
    dc3c:	6878      	ldr	r0, [r7, #4]
    dc3e:	4b21      	ldr	r3, [pc, #132]	; (dcc4 <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
    dc40:	4798      	blx	r3
    dc42:	4603      	mov	r3, r0
    dc44:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
    dc46:	78f9      	ldrb	r1, [r7, #3]
    dc48:	230a      	movs	r3, #10
    dc4a:	220a      	movs	r2, #10
    dc4c:	6878      	ldr	r0, [r7, #4]
    dc4e:	4c1e      	ldr	r4, [pc, #120]	; (dcc8 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    dc50:	47a0      	blx	r4
    dc52:	4603      	mov	r3, r0
    dc54:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
    dc56:	7bfb      	ldrb	r3, [r7, #15]
    dc58:	4619      	mov	r1, r3
    dc5a:	6878      	ldr	r0, [r7, #4]
    dc5c:	4b1b      	ldr	r3, [pc, #108]	; (dccc <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
    dc5e:	4798      	blx	r3
    dc60:	4603      	mov	r3, r0
    dc62:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
    dc64:	78bb      	ldrb	r3, [r7, #2]
    dc66:	2b00      	cmp	r3, #0
    dc68:	d009      	beq.n	dc7e <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
    dc6a:	7bba      	ldrb	r2, [r7, #14]
    dc6c:	7b7b      	ldrb	r3, [r7, #13]
    dc6e:	4619      	mov	r1, r3
    dc70:	2301      	movs	r3, #1
    dc72:	408b      	lsls	r3, r1
    dc74:	b2db      	uxtb	r3, r3
    dc76:	4313      	orrs	r3, r2
    dc78:	b2db      	uxtb	r3, r3
    dc7a:	73bb      	strb	r3, [r7, #14]
    dc7c:	e00a      	b.n	dc94 <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
    dc7e:	7bba      	ldrb	r2, [r7, #14]
    dc80:	7b7b      	ldrb	r3, [r7, #13]
    dc82:	4619      	mov	r1, r3
    dc84:	2301      	movs	r3, #1
    dc86:	408b      	lsls	r3, r1
    dc88:	b2db      	uxtb	r3, r3
    dc8a:	43db      	mvns	r3, r3
    dc8c:	b2db      	uxtb	r3, r3
    dc8e:	4013      	ands	r3, r2
    dc90:	b2db      	uxtb	r3, r3
    dc92:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
    dc94:	78f9      	ldrb	r1, [r7, #3]
    dc96:	2309      	movs	r3, #9
    dc98:	2209      	movs	r2, #9
    dc9a:	6878      	ldr	r0, [r7, #4]
    dc9c:	4c0a      	ldr	r4, [pc, #40]	; (dcc8 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    dc9e:	47a0      	blx	r4
    dca0:	4603      	mov	r3, r0
    dca2:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
    dca4:	7bba      	ldrb	r2, [r7, #14]
    dca6:	7bfb      	ldrb	r3, [r7, #15]
    dca8:	4619      	mov	r1, r3
    dcaa:	6878      	ldr	r0, [r7, #4]
    dcac:	4b08      	ldr	r3, [pc, #32]	; (dcd0 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
    dcae:	4798      	blx	r3
    dcb0:	4603      	mov	r3, r0
    dcb2:	2b00      	cmp	r3, #0
    dcb4:	bf0c      	ite	eq
    dcb6:	2301      	moveq	r3, #1
    dcb8:	2300      	movne	r3, #0
    dcba:	b2db      	uxtb	r3, r3
}
    dcbc:	4618      	mov	r0, r3
    dcbe:	3714      	adds	r7, #20
    dcc0:	46bd      	mov	sp, r7
    dcc2:	bd90      	pop	{r4, r7, pc}
    dcc4:	0000d91b 	.word	0x0000d91b
    dcc8:	0000d939 	.word	0x0000d939
    dccc:	0000d969 	.word	0x0000d969
    dcd0:	0000d9f1 	.word	0x0000d9f1

0000dcd4 <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    dcd4:	b590      	push	{r4, r7, lr}
    dcd6:	b085      	sub	sp, #20
    dcd8:	af02      	add	r7, sp, #8
    dcda:	6078      	str	r0, [r7, #4]
    dcdc:	460b      	mov	r3, r1
    dcde:	70fb      	strb	r3, [r7, #3]
    dce0:	4613      	mov	r3, r2
    dce2:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    dce4:	78ba      	ldrb	r2, [r7, #2]
    dce6:	78f9      	ldrb	r1, [r7, #3]
    dce8:	2306      	movs	r3, #6
    dcea:	9300      	str	r3, [sp, #0]
    dcec:	2306      	movs	r3, #6
    dcee:	6878      	ldr	r0, [r7, #4]
    dcf0:	4c02      	ldr	r4, [pc, #8]	; (dcfc <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    dcf2:	47a0      	blx	r4
}
    dcf4:	bf00      	nop
    dcf6:	370c      	adds	r7, #12
    dcf8:	46bd      	mov	sp, r7
    dcfa:	bd90      	pop	{r4, r7, pc}
    dcfc:	0000db65 	.word	0x0000db65

0000dd00 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    dd00:	b480      	push	{r7}
    dd02:	b083      	sub	sp, #12
    dd04:	af00      	add	r7, sp, #0
    dd06:	6078      	str	r0, [r7, #4]
    dd08:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    dd0a:	687b      	ldr	r3, [r7, #4]
    dd0c:	683a      	ldr	r2, [r7, #0]
    dd0e:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    dd10:	4a06      	ldr	r2, [pc, #24]	; (dd2c <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
    dd12:	687b      	ldr	r3, [r7, #4]
    dd14:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    dd16:	687b      	ldr	r3, [r7, #4]
    dd18:	f44f 6280 	mov.w	r2, #1024	; 0x400
    dd1c:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    dd1e:	687b      	ldr	r3, [r7, #4]
    dd20:	4618      	mov	r0, r3
    dd22:	370c      	adds	r7, #12
    dd24:	46bd      	mov	sp, r7
    dd26:	bc80      	pop	{r7}
    dd28:	4770      	bx	lr
    dd2a:	bf00      	nop
    dd2c:	20000ed0 	.word	0x20000ed0

0000dd30 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    dd30:	b480      	push	{r7}
    dd32:	b083      	sub	sp, #12
    dd34:	af00      	add	r7, sp, #0
    dd36:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    dd38:	687b      	ldr	r3, [r7, #4]
    dd3a:	2200      	movs	r2, #0
    dd3c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    dd3e:	687b      	ldr	r3, [r7, #4]
    dd40:	4618      	mov	r0, r3
    dd42:	370c      	adds	r7, #12
    dd44:	46bd      	mov	sp, r7
    dd46:	bc80      	pop	{r7}
    dd48:	4770      	bx	lr
	...

0000dd4c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    dd4c:	b580      	push	{r7, lr}
    dd4e:	b086      	sub	sp, #24
    dd50:	af00      	add	r7, sp, #0
    dd52:	60f8      	str	r0, [r7, #12]
    dd54:	60b9      	str	r1, [r7, #8]
    dd56:	607a      	str	r2, [r7, #4]
    dd58:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    dd5a:	68f8      	ldr	r0, [r7, #12]
    dd5c:	4b0d      	ldr	r3, [pc, #52]	; (dd94 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    dd5e:	4798      	blx	r3
	task->interval = interval;
    dd60:	68fb      	ldr	r3, [r7, #12]
    dd62:	699b      	ldr	r3, [r3, #24]
    dd64:	687a      	ldr	r2, [r7, #4]
    dd66:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    dd68:	68fb      	ldr	r3, [r7, #12]
    dd6a:	699b      	ldr	r3, [r3, #24]
    dd6c:	68ba      	ldr	r2, [r7, #8]
    dd6e:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    dd70:	68fb      	ldr	r3, [r7, #12]
    dd72:	699b      	ldr	r3, [r3, #24]
    dd74:	78fa      	ldrb	r2, [r7, #3]
    dd76:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    dd78:	68fb      	ldr	r3, [r7, #12]
    dd7a:	68da      	ldr	r2, [r3, #12]
    dd7c:	68fb      	ldr	r3, [r7, #12]
    dd7e:	699b      	ldr	r3, [r3, #24]
    dd80:	4619      	mov	r1, r3
    dd82:	4610      	mov	r0, r2
    dd84:	4b04      	ldr	r3, [pc, #16]	; (dd98 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    dd86:	4798      	blx	r3
    dd88:	6178      	str	r0, [r7, #20]
	
	return status;
    dd8a:	697b      	ldr	r3, [r7, #20]
}
    dd8c:	4618      	mov	r0, r3
    dd8e:	3718      	adds	r7, #24
    dd90:	46bd      	mov	sp, r7
    dd92:	bd80      	pop	{r7, pc}
    dd94:	0000de11 	.word	0x0000de11
    dd98:	00002bd9 	.word	0x00002bd9

0000dd9c <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
    dd9c:	b580      	push	{r7, lr}
    dd9e:	b086      	sub	sp, #24
    dda0:	af00      	add	r7, sp, #0
    dda2:	60f8      	str	r0, [r7, #12]
    dda4:	60b9      	str	r1, [r7, #8]
    dda6:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
    dda8:	687a      	ldr	r2, [r7, #4]
    ddaa:	68b9      	ldr	r1, [r7, #8]
    ddac:	68f8      	ldr	r0, [r7, #12]
    ddae:	4b0c      	ldr	r3, [pc, #48]	; (dde0 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
    ddb0:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
    ddb2:	68fb      	ldr	r3, [r7, #12]
    ddb4:	68db      	ldr	r3, [r3, #12]
    ddb6:	681b      	ldr	r3, [r3, #0]
    ddb8:	699b      	ldr	r3, [r3, #24]
    ddba:	68fa      	ldr	r2, [r7, #12]
    ddbc:	68d2      	ldr	r2, [r2, #12]
    ddbe:	3204      	adds	r2, #4
    ddc0:	4610      	mov	r0, r2
    ddc2:	4798      	blx	r3
    ddc4:	4603      	mov	r3, r0
    ddc6:	2b00      	cmp	r3, #0
    ddc8:	d105      	bne.n	ddd6 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
    ddca:	68fb      	ldr	r3, [r7, #12]
    ddcc:	68db      	ldr	r3, [r3, #12]
    ddce:	4618      	mov	r0, r3
    ddd0:	4b04      	ldr	r3, [pc, #16]	; (dde4 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
    ddd2:	4798      	blx	r3
    ddd4:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
    ddd6:	697b      	ldr	r3, [r7, #20]
}
    ddd8:	4618      	mov	r0, r3
    ddda:	3718      	adds	r7, #24
    dddc:	46bd      	mov	sp, r7
    ddde:	bd80      	pop	{r7, pc}
    dde0:	0000dde9 	.word	0x0000dde9
    dde4:	00002b05 	.word	0x00002b05

0000dde8 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    dde8:	b590      	push	{r4, r7, lr}
    ddea:	b087      	sub	sp, #28
    ddec:	af00      	add	r7, sp, #0
    ddee:	60f8      	str	r0, [r7, #12]
    ddf0:	60b9      	str	r1, [r7, #8]
    ddf2:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    ddf4:	2301      	movs	r3, #1
    ddf6:	687a      	ldr	r2, [r7, #4]
    ddf8:	68b9      	ldr	r1, [r7, #8]
    ddfa:	68f8      	ldr	r0, [r7, #12]
    ddfc:	4c03      	ldr	r4, [pc, #12]	; (de0c <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    ddfe:	47a0      	blx	r4
    de00:	6178      	str	r0, [r7, #20]
		return status;
    de02:	697b      	ldr	r3, [r7, #20]
}
    de04:	4618      	mov	r0, r3
    de06:	371c      	adds	r7, #28
    de08:	46bd      	mov	sp, r7
    de0a:	bd90      	pop	{r4, r7, pc}
    de0c:	0000dd4d 	.word	0x0000dd4d

0000de10 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
		status=timer_start(timer_descr);
	}
	
	return status;
}
void	Timer_Class::ChooseAvailableTimerTask(void){
    de10:	b480      	push	{r7}
    de12:	b085      	sub	sp, #20
    de14:	af00      	add	r7, sp, #0
    de16:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    de18:	2300      	movs	r3, #0
    de1a:	73fb      	strb	r3, [r7, #15]
    de1c:	7bfb      	ldrb	r3, [r7, #15]
    de1e:	2b0f      	cmp	r3, #15
    de20:	dc1c      	bgt.n	de5c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x4c>
	{	
				
		j=ii%TASK_NUMBER;
    de22:	7bfb      	ldrb	r3, [r7, #15]
    de24:	f003 030f 	and.w	r3, r3, #15
    de28:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    de2a:	7bba      	ldrb	r2, [r7, #14]
    de2c:	490f      	ldr	r1, [pc, #60]	; (de6c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    de2e:	4613      	mov	r3, r2
    de30:	009b      	lsls	r3, r3, #2
    de32:	4413      	add	r3, r2
    de34:	009b      	lsls	r3, r3, #2
    de36:	440b      	add	r3, r1
    de38:	330c      	adds	r3, #12
    de3a:	681b      	ldr	r3, [r3, #0]
    de3c:	2b00      	cmp	r3, #0
    de3e:	d109      	bne.n	de54 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x44>
		{
			
			task=&taskArray[j];
    de40:	7bba      	ldrb	r2, [r7, #14]
    de42:	4613      	mov	r3, r2
    de44:	009b      	lsls	r3, r3, #2
    de46:	4413      	add	r3, r2
    de48:	009b      	lsls	r3, r3, #2
    de4a:	4a08      	ldr	r2, [pc, #32]	; (de6c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    de4c:	441a      	add	r2, r3
    de4e:	687b      	ldr	r3, [r7, #4]
    de50:	619a      	str	r2, [r3, #24]
			return;
    de52:	e006      	b.n	de62 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    de54:	7bfb      	ldrb	r3, [r7, #15]
    de56:	3301      	adds	r3, #1
    de58:	73fb      	strb	r3, [r7, #15]
    de5a:	e7df      	b.n	de1c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    de5c:	687b      	ldr	r3, [r7, #4]
    de5e:	4a03      	ldr	r2, [pc, #12]	; (de6c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    de60:	619a      	str	r2, [r3, #24]

}
    de62:	3714      	adds	r7, #20
    de64:	46bd      	mov	sp, r7
    de66:	bc80      	pop	{r7}
    de68:	4770      	bx	lr
    de6a:	bf00      	nop
    de6c:	20000ed4 	.word	0x20000ed4

0000de70 <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
Timer_Class arincTimer(&TIMER_ARINC);
    de70:	b580      	push	{r7, lr}
    de72:	b082      	sub	sp, #8
    de74:	af00      	add	r7, sp, #0
    de76:	6078      	str	r0, [r7, #4]
    de78:	6039      	str	r1, [r7, #0]
    de7a:	687b      	ldr	r3, [r7, #4]
    de7c:	2b01      	cmp	r3, #1
    de7e:	d131      	bne.n	dee4 <_Z41__static_initialization_and_destruction_0ii+0x74>
    de80:	683b      	ldr	r3, [r7, #0]
    de82:	f64f 72ff 	movw	r2, #65535	; 0xffff
    de86:	4293      	cmp	r3, r2
    de88:	d12c      	bne.n	dee4 <_Z41__static_initialization_and_destruction_0ii+0x74>
Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    de8a:	4918      	ldr	r1, [pc, #96]	; (deec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    de8c:	4818      	ldr	r0, [pc, #96]	; (def0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    de8e:	4b19      	ldr	r3, [pc, #100]	; (def4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    de90:	4798      	blx	r3
    de92:	4a19      	ldr	r2, [pc, #100]	; (def8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    de94:	4919      	ldr	r1, [pc, #100]	; (defc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    de96:	4816      	ldr	r0, [pc, #88]	; (def0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    de98:	4b19      	ldr	r3, [pc, #100]	; (df00 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    de9a:	4798      	blx	r3
Timer_Class eventTimer(&TIMER_EVENT);
    de9c:	4919      	ldr	r1, [pc, #100]	; (df04 <_Z41__static_initialization_and_destruction_0ii+0x94>)
    de9e:	481a      	ldr	r0, [pc, #104]	; (df08 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    dea0:	4b14      	ldr	r3, [pc, #80]	; (def4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    dea2:	4798      	blx	r3
    dea4:	4a14      	ldr	r2, [pc, #80]	; (def8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    dea6:	4915      	ldr	r1, [pc, #84]	; (defc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    dea8:	4817      	ldr	r0, [pc, #92]	; (df08 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    deaa:	4b15      	ldr	r3, [pc, #84]	; (df00 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    deac:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    deae:	4917      	ldr	r1, [pc, #92]	; (df0c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
    deb0:	4817      	ldr	r0, [pc, #92]	; (df10 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    deb2:	4b10      	ldr	r3, [pc, #64]	; (def4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    deb4:	4798      	blx	r3
    deb6:	4a10      	ldr	r2, [pc, #64]	; (def8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    deb8:	4910      	ldr	r1, [pc, #64]	; (defc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    deba:	4815      	ldr	r0, [pc, #84]	; (df10 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    debc:	4b10      	ldr	r3, [pc, #64]	; (df00 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    debe:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
    dec0:	4914      	ldr	r1, [pc, #80]	; (df14 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    dec2:	4815      	ldr	r0, [pc, #84]	; (df18 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    dec4:	4b0b      	ldr	r3, [pc, #44]	; (def4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    dec6:	4798      	blx	r3
    dec8:	4a0b      	ldr	r2, [pc, #44]	; (def8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    deca:	490c      	ldr	r1, [pc, #48]	; (defc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    decc:	4812      	ldr	r0, [pc, #72]	; (df18 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    dece:	4b0c      	ldr	r3, [pc, #48]	; (df00 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    ded0:	4798      	blx	r3
Timer_Class arincTimer(&TIMER_ARINC);
    ded2:	4912      	ldr	r1, [pc, #72]	; (df1c <_Z41__static_initialization_and_destruction_0ii+0xac>)
    ded4:	4812      	ldr	r0, [pc, #72]	; (df20 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    ded6:	4b07      	ldr	r3, [pc, #28]	; (def4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    ded8:	4798      	blx	r3
    deda:	4a07      	ldr	r2, [pc, #28]	; (def8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    dedc:	4907      	ldr	r1, [pc, #28]	; (defc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    dede:	4810      	ldr	r0, [pc, #64]	; (df20 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    dee0:	4b07      	ldr	r3, [pc, #28]	; (df00 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    dee2:	4798      	blx	r3
    dee4:	bf00      	nop
    dee6:	3708      	adds	r7, #8
    dee8:	46bd      	mov	sp, r7
    deea:	bd80      	pop	{r7, pc}
    deec:	200011a0 	.word	0x200011a0
    def0:	20001018 	.word	0x20001018
    def4:	0000dd01 	.word	0x0000dd01
    def8:	20000000 	.word	0x20000000
    defc:	0000dd31 	.word	0x0000dd31
    df00:	0000ecf5 	.word	0x0000ecf5
    df04:	20001214 	.word	0x20001214
    df08:	20001034 	.word	0x20001034
    df0c:	20001318 	.word	0x20001318
    df10:	20001050 	.word	0x20001050
    df14:	20001234 	.word	0x20001234
    df18:	2000106c 	.word	0x2000106c
    df1c:	20001298 	.word	0x20001298
    df20:	20001088 	.word	0x20001088

0000df24 <_GLOBAL__sub_I_ptrTimerClass>:
    df24:	b580      	push	{r7, lr}
    df26:	af00      	add	r7, sp, #0
    df28:	f64f 71ff 	movw	r1, #65535	; 0xffff
    df2c:	2001      	movs	r0, #1
    df2e:	4b01      	ldr	r3, [pc, #4]	; (df34 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    df30:	4798      	blx	r3
    df32:	bd80      	pop	{r7, pc}
    df34:	0000de71 	.word	0x0000de71

0000df38 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    df38:	b480      	push	{r7}
    df3a:	b083      	sub	sp, #12
    df3c:	af00      	add	r7, sp, #0
    df3e:	6078      	str	r0, [r7, #4]
    df40:	4a05      	ldr	r2, [pc, #20]	; (df58 <_ZN5PrintC1Ev+0x20>)
    df42:	687b      	ldr	r3, [r7, #4]
    df44:	601a      	str	r2, [r3, #0]
    df46:	687b      	ldr	r3, [r7, #4]
    df48:	2200      	movs	r2, #0
    df4a:	605a      	str	r2, [r3, #4]
    df4c:	687b      	ldr	r3, [r7, #4]
    df4e:	4618      	mov	r0, r3
    df50:	370c      	adds	r7, #12
    df52:	46bd      	mov	sp, r7
    df54:	bc80      	pop	{r7}
    df56:	4770      	bx	lr
    df58:	0000f718 	.word	0x0000f718

0000df5c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    df5c:	b480      	push	{r7}
    df5e:	b083      	sub	sp, #12
    df60:	af00      	add	r7, sp, #0
    df62:	6078      	str	r0, [r7, #4]
    df64:	2300      	movs	r3, #0
    df66:	4618      	mov	r0, r3
    df68:	370c      	adds	r7, #12
    df6a:	46bd      	mov	sp, r7
    df6c:	bc80      	pop	{r7}
    df6e:	4770      	bx	lr

0000df70 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    df70:	b480      	push	{r7}
    df72:	b083      	sub	sp, #12
    df74:	af00      	add	r7, sp, #0
    df76:	6078      	str	r0, [r7, #4]
    df78:	bf00      	nop
    df7a:	370c      	adds	r7, #12
    df7c:	46bd      	mov	sp, r7
    df7e:	bc80      	pop	{r7}
    df80:	4770      	bx	lr
	...

0000df84 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    df84:	b580      	push	{r7, lr}
    df86:	b082      	sub	sp, #8
    df88:	af00      	add	r7, sp, #0
    df8a:	6078      	str	r0, [r7, #4]
    df8c:	687b      	ldr	r3, [r7, #4]
    df8e:	4618      	mov	r0, r3
    df90:	4b06      	ldr	r3, [pc, #24]	; (dfac <_ZN6StreamC1Ev+0x28>)
    df92:	4798      	blx	r3
    df94:	4a06      	ldr	r2, [pc, #24]	; (dfb0 <_ZN6StreamC1Ev+0x2c>)
    df96:	687b      	ldr	r3, [r7, #4]
    df98:	601a      	str	r2, [r3, #0]
    df9a:	687b      	ldr	r3, [r7, #4]
    df9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    dfa0:	609a      	str	r2, [r3, #8]
    dfa2:	687b      	ldr	r3, [r7, #4]
    dfa4:	4618      	mov	r0, r3
    dfa6:	3708      	adds	r7, #8
    dfa8:	46bd      	mov	sp, r7
    dfaa:	bd80      	pop	{r7, pc}
    dfac:	0000df39 	.word	0x0000df39
    dfb0:	0000f6dc 	.word	0x0000f6dc

0000dfb4 <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    dfb4:	b480      	push	{r7}
    dfb6:	b083      	sub	sp, #12
    dfb8:	af00      	add	r7, sp, #0
    dfba:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    dfbc:	4b06      	ldr	r3, [pc, #24]	; (dfd8 <_ZL10USBTimeoutPK10timer_task+0x24>)
    dfbe:	681b      	ldr	r3, [r3, #0]
    dfc0:	2201      	movs	r2, #1
    dfc2:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    dfc4:	4b04      	ldr	r3, [pc, #16]	; (dfd8 <_ZL10USBTimeoutPK10timer_task+0x24>)
    dfc6:	681b      	ldr	r3, [r3, #0]
    dfc8:	2200      	movs	r2, #0
    dfca:	741a      	strb	r2, [r3, #16]
	
}
    dfcc:	bf00      	nop
    dfce:	370c      	adds	r7, #12
    dfd0:	46bd      	mov	sp, r7
    dfd2:	bc80      	pop	{r7}
    dfd4:	4770      	bx	lr
    dfd6:	bf00      	nop
    dfd8:	200010a4 	.word	0x200010a4

0000dfdc <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    dfdc:	b480      	push	{r7}
    dfde:	b083      	sub	sp, #12
    dfe0:	af00      	add	r7, sp, #0
    dfe2:	4603      	mov	r3, r0
    dfe4:	603a      	str	r2, [r7, #0]
    dfe6:	71fb      	strb	r3, [r7, #7]
    dfe8:	460b      	mov	r3, r1
    dfea:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    dfec:	4b08      	ldr	r3, [pc, #32]	; (e010 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    dfee:	681b      	ldr	r3, [r3, #0]
    dff0:	2201      	movs	r2, #1
    dff2:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    dff4:	4b06      	ldr	r3, [pc, #24]	; (e010 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    dff6:	681b      	ldr	r3, [r3, #0]
    dff8:	2201      	movs	r2, #1
    dffa:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    dffc:	4b04      	ldr	r3, [pc, #16]	; (e010 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    dffe:	681b      	ldr	r3, [r3, #0]
    e000:	2201      	movs	r2, #1
    e002:	741a      	strb	r2, [r3, #16]


	return false;
    e004:	2300      	movs	r3, #0
}
    e006:	4618      	mov	r0, r3
    e008:	370c      	adds	r7, #12
    e00a:	46bd      	mov	sp, r7
    e00c:	bc80      	pop	{r7}
    e00e:	4770      	bx	lr
    e010:	200010a4 	.word	0x200010a4

0000e014 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    e014:	b480      	push	{r7}
    e016:	b083      	sub	sp, #12
    e018:	af00      	add	r7, sp, #0
    e01a:	4603      	mov	r3, r0
    e01c:	603a      	str	r2, [r7, #0]
    e01e:	71fb      	strb	r3, [r7, #7]
    e020:	460b      	mov	r3, r1
    e022:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    e024:	4b08      	ldr	r3, [pc, #32]	; (e048 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e026:	681b      	ldr	r3, [r3, #0]
    e028:	2201      	movs	r2, #1
    e02a:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    e02c:	4b06      	ldr	r3, [pc, #24]	; (e048 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e02e:	681b      	ldr	r3, [r3, #0]
    e030:	2201      	movs	r2, #1
    e032:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    e034:	4b04      	ldr	r3, [pc, #16]	; (e048 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e036:	681b      	ldr	r3, [r3, #0]
    e038:	2201      	movs	r2, #1
    e03a:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    e03c:	2300      	movs	r3, #0
}
    e03e:	4618      	mov	r0, r3
    e040:	370c      	adds	r7, #12
    e042:	46bd      	mov	sp, r7
    e044:	bc80      	pop	{r7}
    e046:	4770      	bx	lr
    e048:	200010a4 	.word	0x200010a4

0000e04c <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    e04c:	b580      	push	{r7, lr}
    e04e:	b082      	sub	sp, #8
    e050:	af00      	add	r7, sp, #0
    e052:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    e054:	793b      	ldrb	r3, [r7, #4]
    e056:	f003 0301 	and.w	r3, r3, #1
    e05a:	b2db      	uxtb	r3, r3
    e05c:	2b00      	cmp	r3, #0
    e05e:	d013      	beq.n	e088 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    e060:	490c      	ldr	r1, [pc, #48]	; (e094 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    e062:	2000      	movs	r0, #0
    e064:	4b0c      	ldr	r3, [pc, #48]	; (e098 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    e066:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    e068:	490c      	ldr	r1, [pc, #48]	; (e09c <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    e06a:	2001      	movs	r0, #1
    e06c:	4b0a      	ldr	r3, [pc, #40]	; (e098 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    e06e:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    e070:	4b0b      	ldr	r3, [pc, #44]	; (e0a0 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e072:	681b      	ldr	r3, [r3, #0]
    e074:	2201      	movs	r2, #1
    e076:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    e078:	4b09      	ldr	r3, [pc, #36]	; (e0a0 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e07a:	681b      	ldr	r3, [r3, #0]
    e07c:	2201      	movs	r2, #1
    e07e:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    e080:	4b07      	ldr	r3, [pc, #28]	; (e0a0 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e082:	681b      	ldr	r3, [r3, #0]
    e084:	2201      	movs	r2, #1
    e086:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    e088:	2300      	movs	r3, #0
}
    e08a:	4618      	mov	r0, r3
    e08c:	3708      	adds	r7, #8
    e08e:	46bd      	mov	sp, r7
    e090:	bd80      	pop	{r7, pc}
    e092:	bf00      	nop
    e094:	0000dfdd 	.word	0x0000dfdd
    e098:	0000c759 	.word	0x0000c759
    e09c:	0000e015 	.word	0x0000e015
    e0a0:	200010a4 	.word	0x200010a4

0000e0a4 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    e0a4:	b580      	push	{r7, lr}
    e0a6:	b082      	sub	sp, #8
    e0a8:	af00      	add	r7, sp, #0
    e0aa:	6078      	str	r0, [r7, #4]
    e0ac:	687b      	ldr	r3, [r7, #4]
    e0ae:	4618      	mov	r0, r3
    e0b0:	4b0a      	ldr	r3, [pc, #40]	; (e0dc <_ZN9CDC_ClassC1Ev+0x38>)
    e0b2:	4798      	blx	r3
    e0b4:	687b      	ldr	r3, [r7, #4]
    e0b6:	3310      	adds	r3, #16
    e0b8:	4618      	mov	r0, r3
    e0ba:	4b09      	ldr	r3, [pc, #36]	; (e0e0 <_ZN9CDC_ClassC1Ev+0x3c>)
    e0bc:	4798      	blx	r3
    e0be:	4a09      	ldr	r2, [pc, #36]	; (e0e4 <_ZN9CDC_ClassC1Ev+0x40>)
    e0c0:	687b      	ldr	r3, [r7, #4]
    e0c2:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    e0c4:	687b      	ldr	r3, [r7, #4]
    e0c6:	f04f 32ff 	mov.w	r2, #4294967295
    e0ca:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    e0cc:	4a06      	ldr	r2, [pc, #24]	; (e0e8 <_ZN9CDC_ClassC1Ev+0x44>)
    e0ce:	687b      	ldr	r3, [r7, #4]
    e0d0:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    e0d2:	687b      	ldr	r3, [r7, #4]
    e0d4:	4618      	mov	r0, r3
    e0d6:	3708      	adds	r7, #8
    e0d8:	46bd      	mov	sp, r7
    e0da:	bd80      	pop	{r7, pc}
    e0dc:	0000df85 	.word	0x0000df85
    e0e0:	0000e805 	.word	0x0000e805
    e0e4:	0000f6ac 	.word	0x0000f6ac
    e0e8:	200010a4 	.word	0x200010a4

0000e0ec <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    e0ec:	b580      	push	{r7, lr}
    e0ee:	b082      	sub	sp, #8
    e0f0:	af00      	add	r7, sp, #0
    e0f2:	6078      	str	r0, [r7, #4]
    e0f4:	4a06      	ldr	r2, [pc, #24]	; (e110 <_ZN9CDC_ClassD1Ev+0x24>)
    e0f6:	687b      	ldr	r3, [r7, #4]
    e0f8:	601a      	str	r2, [r3, #0]
    e0fa:	687b      	ldr	r3, [r7, #4]
    e0fc:	3310      	adds	r3, #16
    e0fe:	4618      	mov	r0, r3
    e100:	4b04      	ldr	r3, [pc, #16]	; (e114 <_ZN9CDC_ClassD1Ev+0x28>)
    e102:	4798      	blx	r3
{
} //~CDC_Class
    e104:	687b      	ldr	r3, [r7, #4]
    e106:	4618      	mov	r0, r3
    e108:	3708      	adds	r7, #8
    e10a:	46bd      	mov	sp, r7
    e10c:	bd80      	pop	{r7, pc}
    e10e:	bf00      	nop
    e110:	0000f6ac 	.word	0x0000f6ac
    e114:	0000e825 	.word	0x0000e825

0000e118 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    e118:	b580      	push	{r7, lr}
    e11a:	b082      	sub	sp, #8
    e11c:	af00      	add	r7, sp, #0
    e11e:	6078      	str	r0, [r7, #4]
	
	OnInit();
    e120:	687b      	ldr	r3, [r7, #4]
    e122:	3310      	adds	r3, #16
    e124:	4618      	mov	r0, r3
    e126:	4b09      	ldr	r3, [pc, #36]	; (e14c <_ZN9CDC_Class4InitEv+0x34>)
    e128:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    e12a:	4909      	ldr	r1, [pc, #36]	; (e150 <_ZN9CDC_Class4InitEv+0x38>)
    e12c:	2003      	movs	r0, #3
    e12e:	4b09      	ldr	r3, [pc, #36]	; (e154 <_ZN9CDC_Class4InitEv+0x3c>)
    e130:	4798      	blx	r3
	delay_ms(100);
    e132:	2064      	movs	r0, #100	; 0x64
    e134:	4b08      	ldr	r3, [pc, #32]	; (e158 <_ZN9CDC_Class4InitEv+0x40>)
    e136:	4798      	blx	r3
		
	if (connected)
    e138:	687b      	ldr	r3, [r7, #4]
    e13a:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    e13c:	2064      	movs	r0, #100	; 0x64
    e13e:	4b06      	ldr	r3, [pc, #24]	; (e158 <_ZN9CDC_Class4InitEv+0x40>)
    e140:	4798      	blx	r3

	

}
    e142:	bf00      	nop
    e144:	3708      	adds	r7, #8
    e146:	46bd      	mov	sp, r7
    e148:	bd80      	pop	{r7, pc}
    e14a:	bf00      	nop
    e14c:	0000e839 	.word	0x0000e839
    e150:	0000e04d 	.word	0x0000e04d
    e154:	0000c759 	.word	0x0000c759
    e158:	000020fd 	.word	0x000020fd

0000e15c <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    e15c:	b580      	push	{r7, lr}
    e15e:	b082      	sub	sp, #8
    e160:	af00      	add	r7, sp, #0
    e162:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    e164:	4b03      	ldr	r3, [pc, #12]	; (e174 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    e166:	4798      	blx	r3
    e168:	4603      	mov	r3, r0
	
}
    e16a:	4618      	mov	r0, r3
    e16c:	3708      	adds	r7, #8
    e16e:	46bd      	mov	sp, r7
    e170:	bd80      	pop	{r7, pc}
    e172:	bf00      	nop
    e174:	0000c7d1 	.word	0x0000c7d1

0000e178 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    e178:	b580      	push	{r7, lr}
    e17a:	b084      	sub	sp, #16
    e17c:	af00      	add	r7, sp, #0
    e17e:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    e180:	687b      	ldr	r3, [r7, #4]
    e182:	699b      	ldr	r3, [r3, #24]
    e184:	f1b3 3fff 	cmp.w	r3, #4294967295
    e188:	bf14      	ite	ne
    e18a:	2301      	movne	r3, #1
    e18c:	2300      	moveq	r3, #0
    e18e:	b2db      	uxtb	r3, r3
    e190:	2b00      	cmp	r3, #0
    e192:	d002      	beq.n	e19a <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    e194:	687b      	ldr	r3, [r7, #4]
    e196:	699b      	ldr	r3, [r3, #24]
    e198:	e011      	b.n	e1be <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    e19a:	687b      	ldr	r3, [r7, #4]
    e19c:	681b      	ldr	r3, [r3, #0]
    e19e:	331c      	adds	r3, #28
    e1a0:	681b      	ldr	r3, [r3, #0]
    e1a2:	f107 010f 	add.w	r1, r7, #15
    e1a6:	2201      	movs	r2, #1
    e1a8:	6878      	ldr	r0, [r7, #4]
    e1aa:	4798      	blx	r3
    e1ac:	4602      	mov	r2, r0
    e1ae:	687b      	ldr	r3, [r7, #4]
    e1b0:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    e1b2:	7bfb      	ldrb	r3, [r7, #15]
    e1b4:	461a      	mov	r2, r3
    e1b6:	687b      	ldr	r3, [r7, #4]
    e1b8:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    e1ba:	687b      	ldr	r3, [r7, #4]
    e1bc:	699b      	ldr	r3, [r3, #24]
}
    e1be:	4618      	mov	r0, r3
    e1c0:	3710      	adds	r7, #16
    e1c2:	46bd      	mov	sp, r7
    e1c4:	bd80      	pop	{r7, pc}
	...

0000e1c8 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    e1c8:	b580      	push	{r7, lr}
    e1ca:	b086      	sub	sp, #24
    e1cc:	af00      	add	r7, sp, #0
    e1ce:	60f8      	str	r0, [r7, #12]
    e1d0:	60b9      	str	r1, [r7, #8]
    e1d2:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    e1d4:	68fb      	ldr	r3, [r7, #12]
    e1d6:	7c1b      	ldrb	r3, [r3, #16]
    e1d8:	b2db      	uxtb	r3, r3
    e1da:	2b00      	cmp	r3, #0
    e1dc:	d02e      	beq.n	e23c <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e1de:	687a      	ldr	r2, [r7, #4]
    e1e0:	4613      	mov	r3, r2
    e1e2:	009b      	lsls	r3, r3, #2
    e1e4:	4413      	add	r3, r2
    e1e6:	005b      	lsls	r3, r3, #1
    e1e8:	461a      	mov	r2, r3
    e1ea:	4918      	ldr	r1, [pc, #96]	; (e24c <_ZN9CDC_Class8readDataEPvl+0x84>)
    e1ec:	4818      	ldr	r0, [pc, #96]	; (e250 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e1ee:	4b19      	ldr	r3, [pc, #100]	; (e254 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    e1f0:	4798      	blx	r3
		rxReady=false;
    e1f2:	68fb      	ldr	r3, [r7, #12]
    e1f4:	2200      	movs	r2, #0
    e1f6:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    e1f8:	687b      	ldr	r3, [r7, #4]
    e1fa:	4619      	mov	r1, r3
    e1fc:	68b8      	ldr	r0, [r7, #8]
    e1fe:	4b16      	ldr	r3, [pc, #88]	; (e258 <_ZN9CDC_Class8readDataEPvl+0x90>)
    e200:	4798      	blx	r3
    e202:	4603      	mov	r3, r0
    e204:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    e206:	68fb      	ldr	r3, [r7, #12]
    e208:	7d5b      	ldrb	r3, [r3, #21]
    e20a:	b2db      	uxtb	r3, r3
    e20c:	f083 0301 	eor.w	r3, r3, #1
    e210:	b2db      	uxtb	r3, r3
    e212:	2b00      	cmp	r3, #0
    e214:	d006      	beq.n	e224 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e216:	68fb      	ldr	r3, [r7, #12]
    e218:	7c1b      	ldrb	r3, [r3, #16]
    e21a:	b2db      	uxtb	r3, r3
    e21c:	2b00      	cmp	r3, #0
    e21e:	d001      	beq.n	e224 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e220:	2301      	movs	r3, #1
    e222:	e000      	b.n	e226 <_ZN9CDC_Class8readDataEPvl+0x5e>
    e224:	2300      	movs	r3, #0
    e226:	2b00      	cmp	r3, #0
    e228:	d000      	beq.n	e22c <_ZN9CDC_Class8readDataEPvl+0x64>
    e22a:	e7ec      	b.n	e206 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    e22c:	4808      	ldr	r0, [pc, #32]	; (e250 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e22e:	4b0b      	ldr	r3, [pc, #44]	; (e25c <_ZN9CDC_Class8readDataEPvl+0x94>)
    e230:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e232:	4906      	ldr	r1, [pc, #24]	; (e24c <_ZN9CDC_Class8readDataEPvl+0x84>)
    e234:	4806      	ldr	r0, [pc, #24]	; (e250 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e236:	4b0a      	ldr	r3, [pc, #40]	; (e260 <_ZN9CDC_Class8readDataEPvl+0x98>)
    e238:	4798      	blx	r3
    e23a:	e001      	b.n	e240 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    e23c:	2300      	movs	r3, #0
    e23e:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    e240:	7dfb      	ldrb	r3, [r7, #23]
}
    e242:	4618      	mov	r0, r3
    e244:	3718      	adds	r7, #24
    e246:	46bd      	mov	sp, r7
    e248:	bd80      	pop	{r7, pc}
    e24a:	bf00      	nop
    e24c:	0000dfb5 	.word	0x0000dfb5
    e250:	20001160 	.word	0x20001160
    e254:	0000ea7d 	.word	0x0000ea7d
    e258:	0000c6ad 	.word	0x0000c6ad
    e25c:	0000e9c5 	.word	0x0000e9c5
    e260:	0000eab5 	.word	0x0000eab5

0000e264 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    e264:	b580      	push	{r7, lr}
    e266:	b084      	sub	sp, #16
    e268:	af00      	add	r7, sp, #0
    e26a:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    e26c:	687b      	ldr	r3, [r7, #4]
    e26e:	2200      	movs	r2, #0
    e270:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    e272:	f107 030f 	add.w	r3, r7, #15
    e276:	2101      	movs	r1, #1
    e278:	4618      	mov	r0, r3
    e27a:	4b08      	ldr	r3, [pc, #32]	; (e29c <_ZN9CDC_Class4readEv+0x38>)
    e27c:	4798      	blx	r3
	while(!rxReady);
    e27e:	687b      	ldr	r3, [r7, #4]
    e280:	7d5b      	ldrb	r3, [r3, #21]
    e282:	b2db      	uxtb	r3, r3
    e284:	f083 0301 	eor.w	r3, r3, #1
    e288:	b2db      	uxtb	r3, r3
    e28a:	2b00      	cmp	r3, #0
    e28c:	d000      	beq.n	e290 <_ZN9CDC_Class4readEv+0x2c>
    e28e:	e7f6      	b.n	e27e <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    e290:	7bfb      	ldrb	r3, [r7, #15]
}
    e292:	4618      	mov	r0, r3
    e294:	3710      	adds	r7, #16
    e296:	46bd      	mov	sp, r7
    e298:	bd80      	pop	{r7, pc}
    e29a:	bf00      	nop
    e29c:	0000c6ad 	.word	0x0000c6ad

0000e2a0 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    e2a0:	b580      	push	{r7, lr}
    e2a2:	b082      	sub	sp, #8
    e2a4:	af00      	add	r7, sp, #0
    e2a6:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    e2a8:	687b      	ldr	r3, [r7, #4]
    e2aa:	331c      	adds	r3, #28
    e2ac:	2140      	movs	r1, #64	; 0x40
    e2ae:	4618      	mov	r0, r3
    e2b0:	4b02      	ldr	r3, [pc, #8]	; (e2bc <_ZN9CDC_Class5flushEv+0x1c>)
    e2b2:	4798      	blx	r3
}
    e2b4:	bf00      	nop
    e2b6:	3708      	adds	r7, #8
    e2b8:	46bd      	mov	sp, r7
    e2ba:	bd80      	pop	{r7, pc}
    e2bc:	0000c6f1 	.word	0x0000c6f1

0000e2c0 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    e2c0:	b580      	push	{r7, lr}
    e2c2:	b082      	sub	sp, #8
    e2c4:	af00      	add	r7, sp, #0
    e2c6:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    e2c8:	4b02      	ldr	r3, [pc, #8]	; (e2d4 <_ZN9CDC_Class5clearEv+0x14>)
    e2ca:	4798      	blx	r3
}
    e2cc:	bf00      	nop
    e2ce:	3708      	adds	r7, #8
    e2d0:	46bd      	mov	sp, r7
    e2d2:	bd80      	pop	{r7, pc}
    e2d4:	0000c735 	.word	0x0000c735

0000e2d8 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    e2d8:	b580      	push	{r7, lr}
    e2da:	b082      	sub	sp, #8
    e2dc:	af00      	add	r7, sp, #0
    e2de:	6078      	str	r0, [r7, #4]
    e2e0:	460b      	mov	r3, r1
    e2e2:	70fb      	strb	r3, [r7, #3]
	if (connected){
    e2e4:	687b      	ldr	r3, [r7, #4]
    e2e6:	7c1b      	ldrb	r3, [r3, #16]
    e2e8:	b2db      	uxtb	r3, r3
    e2ea:	2b00      	cmp	r3, #0
    e2ec:	d012      	beq.n	e314 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    e2ee:	687b      	ldr	r3, [r7, #4]
    e2f0:	7d1b      	ldrb	r3, [r3, #20]
    e2f2:	b2db      	uxtb	r3, r3
    e2f4:	f083 0301 	eor.w	r3, r3, #1
    e2f8:	b2db      	uxtb	r3, r3
    e2fa:	2b00      	cmp	r3, #0
    e2fc:	d000      	beq.n	e300 <_ZN9CDC_Class5writeEh+0x28>
    e2fe:	e7f6      	b.n	e2ee <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    e300:	687b      	ldr	r3, [r7, #4]
    e302:	681b      	ldr	r3, [r3, #0]
    e304:	3324      	adds	r3, #36	; 0x24
    e306:	681b      	ldr	r3, [r3, #0]
    e308:	1cf9      	adds	r1, r7, #3
    e30a:	2201      	movs	r2, #1
    e30c:	6878      	ldr	r0, [r7, #4]
    e30e:	4798      	blx	r3
    e310:	4603      	mov	r3, r0
    e312:	e000      	b.n	e316 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    e314:	2300      	movs	r3, #0
	}
		
}
    e316:	4618      	mov	r0, r3
    e318:	3708      	adds	r7, #8
    e31a:	46bd      	mov	sp, r7
    e31c:	bd80      	pop	{r7, pc}
	...

0000e320 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    e320:	b580      	push	{r7, lr}
    e322:	b086      	sub	sp, #24
    e324:	af00      	add	r7, sp, #0
    e326:	60f8      	str	r0, [r7, #12]
    e328:	60b9      	str	r1, [r7, #8]
    e32a:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    e32c:	68fb      	ldr	r3, [r7, #12]
    e32e:	7c1b      	ldrb	r3, [r3, #16]
    e330:	b2db      	uxtb	r3, r3
    e332:	2b00      	cmp	r3, #0
    e334:	d02f      	beq.n	e396 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e336:	687a      	ldr	r2, [r7, #4]
    e338:	4613      	mov	r3, r2
    e33a:	009b      	lsls	r3, r3, #2
    e33c:	4413      	add	r3, r2
    e33e:	005b      	lsls	r3, r3, #1
    e340:	461a      	mov	r2, r3
    e342:	4917      	ldr	r1, [pc, #92]	; (e3a0 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e344:	4817      	ldr	r0, [pc, #92]	; (e3a4 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e346:	4b18      	ldr	r3, [pc, #96]	; (e3a8 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    e348:	4798      	blx	r3
		txReady=false;
    e34a:	68fb      	ldr	r3, [r7, #12]
    e34c:	2200      	movs	r2, #0
    e34e:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e350:	687b      	ldr	r3, [r7, #4]
    e352:	4619      	mov	r1, r3
    e354:	68b8      	ldr	r0, [r7, #8]
    e356:	4b15      	ldr	r3, [pc, #84]	; (e3ac <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    e358:	4798      	blx	r3
    e35a:	4603      	mov	r3, r0
    e35c:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    e35e:	68fb      	ldr	r3, [r7, #12]
    e360:	7d1b      	ldrb	r3, [r3, #20]
    e362:	b2db      	uxtb	r3, r3
    e364:	f083 0301 	eor.w	r3, r3, #1
    e368:	b2db      	uxtb	r3, r3
    e36a:	2b00      	cmp	r3, #0
    e36c:	d006      	beq.n	e37c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e36e:	68fb      	ldr	r3, [r7, #12]
    e370:	7c1b      	ldrb	r3, [r3, #16]
    e372:	b2db      	uxtb	r3, r3
    e374:	2b00      	cmp	r3, #0
    e376:	d001      	beq.n	e37c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e378:	2301      	movs	r3, #1
    e37a:	e000      	b.n	e37e <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    e37c:	2300      	movs	r3, #0
    e37e:	2b00      	cmp	r3, #0
    e380:	d000      	beq.n	e384 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    e382:	e7ec      	b.n	e35e <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    e384:	4807      	ldr	r0, [pc, #28]	; (e3a4 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e386:	4b0a      	ldr	r3, [pc, #40]	; (e3b0 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    e388:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e38a:	4905      	ldr	r1, [pc, #20]	; (e3a0 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e38c:	4805      	ldr	r0, [pc, #20]	; (e3a4 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e38e:	4b09      	ldr	r3, [pc, #36]	; (e3b4 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    e390:	4798      	blx	r3
		return r;
    e392:	697b      	ldr	r3, [r7, #20]
    e394:	e000      	b.n	e398 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    e396:	2300      	movs	r3, #0
	}
	

}
    e398:	4618      	mov	r0, r3
    e39a:	3718      	adds	r7, #24
    e39c:	46bd      	mov	sp, r7
    e39e:	bd80      	pop	{r7, pc}
    e3a0:	0000dfb5 	.word	0x0000dfb5
    e3a4:	20001160 	.word	0x20001160
    e3a8:	0000ea7d 	.word	0x0000ea7d
    e3ac:	0000c6f1 	.word	0x0000c6f1
    e3b0:	0000e9c5 	.word	0x0000e9c5
    e3b4:	0000eab5 	.word	0x0000eab5

0000e3b8 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    e3b8:	b580      	push	{r7, lr}
    e3ba:	b086      	sub	sp, #24
    e3bc:	af00      	add	r7, sp, #0
    e3be:	60f8      	str	r0, [r7, #12]
    e3c0:	60b9      	str	r1, [r7, #8]
    e3c2:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    e3c4:	68fb      	ldr	r3, [r7, #12]
    e3c6:	2200      	movs	r2, #0
    e3c8:	751a      	strb	r2, [r3, #20]

 	if (connected){
    e3ca:	68fb      	ldr	r3, [r7, #12]
    e3cc:	7c1b      	ldrb	r3, [r3, #16]
    e3ce:	b2db      	uxtb	r3, r3
    e3d0:	2b00      	cmp	r3, #0
    e3d2:	d02a      	beq.n	e42a <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e3d4:	687a      	ldr	r2, [r7, #4]
    e3d6:	4613      	mov	r3, r2
    e3d8:	009b      	lsls	r3, r3, #2
    e3da:	4413      	add	r3, r2
    e3dc:	005b      	lsls	r3, r3, #1
    e3de:	461a      	mov	r2, r3
    e3e0:	4915      	ldr	r1, [pc, #84]	; (e438 <_ZN9CDC_Class5writeEPKhj+0x80>)
    e3e2:	4816      	ldr	r0, [pc, #88]	; (e43c <_ZN9CDC_Class5writeEPKhj+0x84>)
    e3e4:	4b16      	ldr	r3, [pc, #88]	; (e440 <_ZN9CDC_Class5writeEPKhj+0x88>)
    e3e6:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e3e8:	6879      	ldr	r1, [r7, #4]
    e3ea:	68b8      	ldr	r0, [r7, #8]
    e3ec:	4b15      	ldr	r3, [pc, #84]	; (e444 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    e3ee:	4798      	blx	r3
    e3f0:	4603      	mov	r3, r0
    e3f2:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    e3f4:	68fb      	ldr	r3, [r7, #12]
    e3f6:	7d1b      	ldrb	r3, [r3, #20]
    e3f8:	b2db      	uxtb	r3, r3
    e3fa:	f083 0301 	eor.w	r3, r3, #1
    e3fe:	b2db      	uxtb	r3, r3
    e400:	2b00      	cmp	r3, #0
    e402:	d006      	beq.n	e412 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e404:	68fb      	ldr	r3, [r7, #12]
    e406:	7c1b      	ldrb	r3, [r3, #16]
    e408:	b2db      	uxtb	r3, r3
    e40a:	2b00      	cmp	r3, #0
    e40c:	d001      	beq.n	e412 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e40e:	2301      	movs	r3, #1
    e410:	e000      	b.n	e414 <_ZN9CDC_Class5writeEPKhj+0x5c>
    e412:	2300      	movs	r3, #0
    e414:	2b00      	cmp	r3, #0
    e416:	d000      	beq.n	e41a <_ZN9CDC_Class5writeEPKhj+0x62>
    e418:	e7ec      	b.n	e3f4 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    e41a:	4808      	ldr	r0, [pc, #32]	; (e43c <_ZN9CDC_Class5writeEPKhj+0x84>)
    e41c:	4b0a      	ldr	r3, [pc, #40]	; (e448 <_ZN9CDC_Class5writeEPKhj+0x90>)
    e41e:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e420:	4905      	ldr	r1, [pc, #20]	; (e438 <_ZN9CDC_Class5writeEPKhj+0x80>)
    e422:	4806      	ldr	r0, [pc, #24]	; (e43c <_ZN9CDC_Class5writeEPKhj+0x84>)
    e424:	4b09      	ldr	r3, [pc, #36]	; (e44c <_ZN9CDC_Class5writeEPKhj+0x94>)
    e426:	4798      	blx	r3
    e428:	e001      	b.n	e42e <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    e42a:	2300      	movs	r3, #0
    e42c:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    e42e:	697b      	ldr	r3, [r7, #20]
}
    e430:	4618      	mov	r0, r3
    e432:	3718      	adds	r7, #24
    e434:	46bd      	mov	sp, r7
    e436:	bd80      	pop	{r7, pc}
    e438:	0000dfb5 	.word	0x0000dfb5
    e43c:	20001160 	.word	0x20001160
    e440:	0000ea7d 	.word	0x0000ea7d
    e444:	0000c6f1 	.word	0x0000c6f1
    e448:	0000e9c5 	.word	0x0000e9c5
    e44c:	0000eab5 	.word	0x0000eab5

0000e450 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    e450:	b480      	push	{r7}
    e452:	b083      	sub	sp, #12
    e454:	af00      	add	r7, sp, #0
    e456:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    e458:	687b      	ldr	r3, [r7, #4]
    e45a:	7d5b      	ldrb	r3, [r3, #21]
    e45c:	b2db      	uxtb	r3, r3
    e45e:	2b00      	cmp	r3, #0
    e460:	d006      	beq.n	e470 <_ZN9CDC_Class9availableEv+0x20>
    e462:	687b      	ldr	r3, [r7, #4]
    e464:	7d1b      	ldrb	r3, [r3, #20]
    e466:	b2db      	uxtb	r3, r3
    e468:	2b00      	cmp	r3, #0
    e46a:	d001      	beq.n	e470 <_ZN9CDC_Class9availableEv+0x20>
    e46c:	2301      	movs	r3, #1
    e46e:	e000      	b.n	e472 <_ZN9CDC_Class9availableEv+0x22>
    e470:	2300      	movs	r3, #0
    e472:	2b00      	cmp	r3, #0
    e474:	d001      	beq.n	e47a <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    e476:	2301      	movs	r3, #1
    e478:	e000      	b.n	e47c <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    e47a:	2300      	movs	r3, #0
	}
	
}
    e47c:	4618      	mov	r0, r3
    e47e:	370c      	adds	r7, #12
    e480:	46bd      	mov	sp, r7
    e482:	bc80      	pop	{r7}
    e484:	4770      	bx	lr
	...

0000e488 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    e488:	b580      	push	{r7, lr}
    e48a:	b082      	sub	sp, #8
    e48c:	af00      	add	r7, sp, #0
    e48e:	6078      	str	r0, [r7, #4]
    e490:	6039      	str	r1, [r7, #0]
    e492:	687b      	ldr	r3, [r7, #4]
    e494:	2b01      	cmp	r3, #1
    e496:	d10c      	bne.n	e4b2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    e498:	683b      	ldr	r3, [r7, #0]
    e49a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e49e:	4293      	cmp	r3, r2
    e4a0:	d107      	bne.n	e4b2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    e4a2:	4806      	ldr	r0, [pc, #24]	; (e4bc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e4a4:	4b06      	ldr	r3, [pc, #24]	; (e4c0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e4a6:	4798      	blx	r3
    e4a8:	4a06      	ldr	r2, [pc, #24]	; (e4c4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    e4aa:	4907      	ldr	r1, [pc, #28]	; (e4c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    e4ac:	4803      	ldr	r0, [pc, #12]	; (e4bc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e4ae:	4b07      	ldr	r3, [pc, #28]	; (e4cc <_Z41__static_initialization_and_destruction_0ii+0x44>)
    e4b0:	4798      	blx	r3
    e4b2:	bf00      	nop
    e4b4:	3708      	adds	r7, #8
    e4b6:	46bd      	mov	sp, r7
    e4b8:	bd80      	pop	{r7, pc}
    e4ba:	bf00      	nop
    e4bc:	200010a8 	.word	0x200010a8
    e4c0:	0000e0a5 	.word	0x0000e0a5
    e4c4:	20000000 	.word	0x20000000
    e4c8:	0000e0ed 	.word	0x0000e0ed
    e4cc:	0000ecf5 	.word	0x0000ecf5

0000e4d0 <_GLOBAL__sub_I_ptrCDCClass>:
    e4d0:	b580      	push	{r7, lr}
    e4d2:	af00      	add	r7, sp, #0
    e4d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e4d8:	2001      	movs	r0, #1
    e4da:	4b01      	ldr	r3, [pc, #4]	; (e4e0 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    e4dc:	4798      	blx	r3
    e4de:	bd80      	pop	{r7, pc}
    e4e0:	0000e489 	.word	0x0000e489

0000e4e4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    e4e4:	b590      	push	{r4, r7, lr}
    e4e6:	b083      	sub	sp, #12
    e4e8:	af00      	add	r7, sp, #0
    e4ea:	6078      	str	r0, [r7, #4]
    e4ec:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    e4ee:	683b      	ldr	r3, [r7, #0]
    e4f0:	2b00      	cmp	r3, #0
    e4f2:	d101      	bne.n	e4f8 <_ZN5Print5writeEPKc+0x14>
    e4f4:	2300      	movs	r3, #0
    e4f6:	e00c      	b.n	e512 <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    e4f8:	687b      	ldr	r3, [r7, #4]
    e4fa:	681b      	ldr	r3, [r3, #0]
    e4fc:	3304      	adds	r3, #4
    e4fe:	681c      	ldr	r4, [r3, #0]
    e500:	6838      	ldr	r0, [r7, #0]
    e502:	4b06      	ldr	r3, [pc, #24]	; (e51c <_ZN5Print5writeEPKc+0x38>)
    e504:	4798      	blx	r3
    e506:	4603      	mov	r3, r0
    e508:	461a      	mov	r2, r3
    e50a:	6839      	ldr	r1, [r7, #0]
    e50c:	6878      	ldr	r0, [r7, #4]
    e50e:	47a0      	blx	r4
    e510:	4603      	mov	r3, r0
    }
    e512:	4618      	mov	r0, r3
    e514:	370c      	adds	r7, #12
    e516:	46bd      	mov	sp, r7
    e518:	bd90      	pop	{r4, r7, pc}
    e51a:	bf00      	nop
    e51c:	0000ef81 	.word	0x0000ef81

0000e520 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    e520:	b580      	push	{r7, lr}
    e522:	b086      	sub	sp, #24
    e524:	af00      	add	r7, sp, #0
    e526:	60f8      	str	r0, [r7, #12]
    e528:	60b9      	str	r1, [r7, #8]
    e52a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    e52c:	2300      	movs	r3, #0
    e52e:	617b      	str	r3, [r7, #20]
  while (size--) {
    e530:	687b      	ldr	r3, [r7, #4]
    e532:	1e5a      	subs	r2, r3, #1
    e534:	607a      	str	r2, [r7, #4]
    e536:	2b00      	cmp	r3, #0
    e538:	bf14      	ite	ne
    e53a:	2301      	movne	r3, #1
    e53c:	2300      	moveq	r3, #0
    e53e:	b2db      	uxtb	r3, r3
    e540:	2b00      	cmp	r3, #0
    e542:	d016      	beq.n	e572 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    e544:	68fb      	ldr	r3, [r7, #12]
    e546:	681b      	ldr	r3, [r3, #0]
    e548:	681a      	ldr	r2, [r3, #0]
    e54a:	68bb      	ldr	r3, [r7, #8]
    e54c:	1c59      	adds	r1, r3, #1
    e54e:	60b9      	str	r1, [r7, #8]
    e550:	781b      	ldrb	r3, [r3, #0]
    e552:	4619      	mov	r1, r3
    e554:	68f8      	ldr	r0, [r7, #12]
    e556:	4790      	blx	r2
    e558:	4603      	mov	r3, r0
    e55a:	2b00      	cmp	r3, #0
    e55c:	bf14      	ite	ne
    e55e:	2301      	movne	r3, #1
    e560:	2300      	moveq	r3, #0
    e562:	b2db      	uxtb	r3, r3
    e564:	2b00      	cmp	r3, #0
    e566:	d003      	beq.n	e570 <_ZN5Print5writeEPKhj+0x50>
    e568:	697b      	ldr	r3, [r7, #20]
    e56a:	3301      	adds	r3, #1
    e56c:	617b      	str	r3, [r7, #20]
  while (size--) {
    e56e:	e7df      	b.n	e530 <_ZN5Print5writeEPKhj+0x10>
    else break;
    e570:	bf00      	nop
  }
  return n;
    e572:	697b      	ldr	r3, [r7, #20]
}
    e574:	4618      	mov	r0, r3
    e576:	3718      	adds	r7, #24
    e578:	46bd      	mov	sp, r7
    e57a:	bd80      	pop	{r7, pc}

0000e57c <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    e57c:	b580      	push	{r7, lr}
    e57e:	b082      	sub	sp, #8
    e580:	af00      	add	r7, sp, #0
    e582:	6078      	str	r0, [r7, #4]
    e584:	6039      	str	r1, [r7, #0]
  return write(str);
    e586:	6839      	ldr	r1, [r7, #0]
    e588:	6878      	ldr	r0, [r7, #4]
    e58a:	4b03      	ldr	r3, [pc, #12]	; (e598 <_ZN5Print5printEPKc+0x1c>)
    e58c:	4798      	blx	r3
    e58e:	4603      	mov	r3, r0
}
    e590:	4618      	mov	r0, r3
    e592:	3708      	adds	r7, #8
    e594:	46bd      	mov	sp, r7
    e596:	bd80      	pop	{r7, pc}
    e598:	0000e4e5 	.word	0x0000e4e5

0000e59c <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
    e59c:	b580      	push	{r7, lr}
    e59e:	b084      	sub	sp, #16
    e5a0:	af00      	add	r7, sp, #0
    e5a2:	60f8      	str	r0, [r7, #12]
    e5a4:	460b      	mov	r3, r1
    e5a6:	607a      	str	r2, [r7, #4]
    e5a8:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
    e5aa:	7afb      	ldrb	r3, [r7, #11]
    e5ac:	687a      	ldr	r2, [r7, #4]
    e5ae:	4619      	mov	r1, r3
    e5b0:	68f8      	ldr	r0, [r7, #12]
    e5b2:	4b03      	ldr	r3, [pc, #12]	; (e5c0 <_ZN5Print5printEhi+0x24>)
    e5b4:	4798      	blx	r3
    e5b6:	4603      	mov	r3, r0
}
    e5b8:	4618      	mov	r0, r3
    e5ba:	3710      	adds	r7, #16
    e5bc:	46bd      	mov	sp, r7
    e5be:	bd80      	pop	{r7, pc}
    e5c0:	0000e5c5 	.word	0x0000e5c5

0000e5c4 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
    e5c4:	b580      	push	{r7, lr}
    e5c6:	b084      	sub	sp, #16
    e5c8:	af00      	add	r7, sp, #0
    e5ca:	60f8      	str	r0, [r7, #12]
    e5cc:	60b9      	str	r1, [r7, #8]
    e5ce:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    e5d0:	687b      	ldr	r3, [r7, #4]
    e5d2:	2b00      	cmp	r3, #0
    e5d4:	d109      	bne.n	e5ea <_ZN5Print5printEmi+0x26>
    e5d6:	68fb      	ldr	r3, [r7, #12]
    e5d8:	681b      	ldr	r3, [r3, #0]
    e5da:	681b      	ldr	r3, [r3, #0]
    e5dc:	68ba      	ldr	r2, [r7, #8]
    e5de:	b2d2      	uxtb	r2, r2
    e5e0:	4611      	mov	r1, r2
    e5e2:	68f8      	ldr	r0, [r7, #12]
    e5e4:	4798      	blx	r3
    e5e6:	4603      	mov	r3, r0
    e5e8:	e007      	b.n	e5fa <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    e5ea:	687b      	ldr	r3, [r7, #4]
    e5ec:	b2db      	uxtb	r3, r3
    e5ee:	461a      	mov	r2, r3
    e5f0:	68b9      	ldr	r1, [r7, #8]
    e5f2:	68f8      	ldr	r0, [r7, #12]
    e5f4:	4b03      	ldr	r3, [pc, #12]	; (e604 <_ZN5Print5printEmi+0x40>)
    e5f6:	4798      	blx	r3
    e5f8:	4603      	mov	r3, r0
}
    e5fa:	4618      	mov	r0, r3
    e5fc:	3710      	adds	r7, #16
    e5fe:	46bd      	mov	sp, r7
    e600:	bd80      	pop	{r7, pc}
    e602:	bf00      	nop
    e604:	0000e609 	.word	0x0000e609

0000e608 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    e608:	b580      	push	{r7, lr}
    e60a:	b08e      	sub	sp, #56	; 0x38
    e60c:	af00      	add	r7, sp, #0
    e60e:	60f8      	str	r0, [r7, #12]
    e610:	60b9      	str	r1, [r7, #8]
    e612:	4613      	mov	r3, r2
    e614:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    e616:	f107 0310 	add.w	r3, r7, #16
    e61a:	3320      	adds	r3, #32
    e61c:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    e61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e620:	2200      	movs	r2, #0
    e622:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    e624:	79fb      	ldrb	r3, [r7, #7]
    e626:	2b01      	cmp	r3, #1
    e628:	dc01      	bgt.n	e62e <_ZN5Print11printNumberEmh+0x26>
    e62a:	230a      	movs	r3, #10
    e62c:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
    e62e:	79fa      	ldrb	r2, [r7, #7]
    e630:	68bb      	ldr	r3, [r7, #8]
    e632:	fbb3 f1f2 	udiv	r1, r3, r2
    e636:	fb02 f201 	mul.w	r2, r2, r1
    e63a:	1a9b      	subs	r3, r3, r2
    e63c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
    e640:	79fb      	ldrb	r3, [r7, #7]
    e642:	68ba      	ldr	r2, [r7, #8]
    e644:	fbb2 f3f3 	udiv	r3, r2, r3
    e648:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    e64a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e64c:	3b01      	subs	r3, #1
    e64e:	637b      	str	r3, [r7, #52]	; 0x34
    e650:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e654:	2b09      	cmp	r3, #9
    e656:	dc04      	bgt.n	e662 <_ZN5Print11printNumberEmh+0x5a>
    e658:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e65c:	3330      	adds	r3, #48	; 0x30
    e65e:	b2db      	uxtb	r3, r3
    e660:	e003      	b.n	e66a <_ZN5Print11printNumberEmh+0x62>
    e662:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e666:	3337      	adds	r3, #55	; 0x37
    e668:	b2db      	uxtb	r3, r3
    e66a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e66c:	7013      	strb	r3, [r2, #0]
  } while(n);
    e66e:	68bb      	ldr	r3, [r7, #8]
    e670:	2b00      	cmp	r3, #0
    e672:	d000      	beq.n	e676 <_ZN5Print11printNumberEmh+0x6e>
  do {
    e674:	e7db      	b.n	e62e <_ZN5Print11printNumberEmh+0x26>

  return write(str);
    e676:	6b79      	ldr	r1, [r7, #52]	; 0x34
    e678:	68f8      	ldr	r0, [r7, #12]
    e67a:	4b03      	ldr	r3, [pc, #12]	; (e688 <_ZN5Print11printNumberEmh+0x80>)
    e67c:	4798      	blx	r3
    e67e:	4603      	mov	r3, r0
}
    e680:	4618      	mov	r0, r3
    e682:	3738      	adds	r7, #56	; 0x38
    e684:	46bd      	mov	sp, r7
    e686:	bd80      	pop	{r7, pc}
    e688:	0000e4e5 	.word	0x0000e4e5

0000e68c <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    e68c:	b480      	push	{r7}
    e68e:	b083      	sub	sp, #12
    e690:	af00      	add	r7, sp, #0
    e692:	6078      	str	r0, [r7, #4]
    e694:	460b      	mov	r3, r1
    e696:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    e698:	78fb      	ldrb	r3, [r7, #3]
    e69a:	687a      	ldr	r2, [r7, #4]
    e69c:	01db      	lsls	r3, r3, #7
    e69e:	4413      	add	r3, r2
    e6a0:	681b      	ldr	r3, [r3, #0]
}
    e6a2:	4618      	mov	r0, r3
    e6a4:	370c      	adds	r7, #12
    e6a6:	46bd      	mov	sp, r7
    e6a8:	bc80      	pop	{r7}
    e6aa:	4770      	bx	lr

0000e6ac <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    e6ac:	b480      	push	{r7}
    e6ae:	b083      	sub	sp, #12
    e6b0:	af00      	add	r7, sp, #0
    e6b2:	6078      	str	r0, [r7, #4]
    e6b4:	460b      	mov	r3, r1
    e6b6:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    e6b8:	78fb      	ldrb	r3, [r7, #3]
    e6ba:	687a      	ldr	r2, [r7, #4]
    e6bc:	01db      	lsls	r3, r3, #7
    e6be:	4413      	add	r3, r2
    e6c0:	3310      	adds	r3, #16
    e6c2:	681b      	ldr	r3, [r3, #0]
}
    e6c4:	4618      	mov	r0, r3
    e6c6:	370c      	adds	r7, #12
    e6c8:	46bd      	mov	sp, r7
    e6ca:	bc80      	pop	{r7}
    e6cc:	4770      	bx	lr

0000e6ce <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    e6ce:	b480      	push	{r7}
    e6d0:	b083      	sub	sp, #12
    e6d2:	af00      	add	r7, sp, #0
    e6d4:	6078      	str	r0, [r7, #4]
    e6d6:	460b      	mov	r3, r1
    e6d8:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    e6da:	78fb      	ldrb	r3, [r7, #3]
    e6dc:	687a      	ldr	r2, [r7, #4]
    e6de:	01db      	lsls	r3, r3, #7
    e6e0:	4413      	add	r3, r2
    e6e2:	3320      	adds	r3, #32
    e6e4:	681b      	ldr	r3, [r3, #0]
}
    e6e6:	4618      	mov	r0, r3
    e6e8:	370c      	adds	r7, #12
    e6ea:	46bd      	mov	sp, r7
    e6ec:	bc80      	pop	{r7}
    e6ee:	4770      	bx	lr

0000e6f0 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    e6f0:	b580      	push	{r7, lr}
    e6f2:	b086      	sub	sp, #24
    e6f4:	af00      	add	r7, sp, #0
    e6f6:	4603      	mov	r3, r0
    e6f8:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    e6fa:	f107 030c 	add.w	r3, r7, #12
    e6fe:	4618      	mov	r0, r3
    e700:	4b13      	ldr	r3, [pc, #76]	; (e750 <_gpio_get_level+0x60>)
    e702:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    e704:	79fb      	ldrb	r3, [r7, #7]
    e706:	4619      	mov	r1, r3
    e708:	4812      	ldr	r0, [pc, #72]	; (e754 <_gpio_get_level+0x64>)
    e70a:	4b13      	ldr	r3, [pc, #76]	; (e758 <_gpio_get_level+0x68>)
    e70c:	4798      	blx	r3
    e70e:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    e710:	79fb      	ldrb	r3, [r7, #7]
    e712:	4619      	mov	r1, r3
    e714:	480f      	ldr	r0, [pc, #60]	; (e754 <_gpio_get_level+0x64>)
    e716:	4b11      	ldr	r3, [pc, #68]	; (e75c <_gpio_get_level+0x6c>)
    e718:	4798      	blx	r3
    e71a:	4602      	mov	r2, r0
    e71c:	697b      	ldr	r3, [r7, #20]
    e71e:	43db      	mvns	r3, r3
    e720:	4013      	ands	r3, r2
    e722:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    e724:	79fb      	ldrb	r3, [r7, #7]
    e726:	4619      	mov	r1, r3
    e728:	480a      	ldr	r0, [pc, #40]	; (e754 <_gpio_get_level+0x64>)
    e72a:	4b0d      	ldr	r3, [pc, #52]	; (e760 <_gpio_get_level+0x70>)
    e72c:	4798      	blx	r3
    e72e:	4602      	mov	r2, r0
    e730:	697b      	ldr	r3, [r7, #20]
    e732:	4013      	ands	r3, r2
    e734:	693a      	ldr	r2, [r7, #16]
    e736:	4313      	orrs	r3, r2
    e738:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    e73a:	f107 030c 	add.w	r3, r7, #12
    e73e:	4618      	mov	r0, r3
    e740:	4b08      	ldr	r3, [pc, #32]	; (e764 <_gpio_get_level+0x74>)
    e742:	4798      	blx	r3

	return tmp;
    e744:	693b      	ldr	r3, [r7, #16]
}
    e746:	4618      	mov	r0, r3
    e748:	3718      	adds	r7, #24
    e74a:	46bd      	mov	sp, r7
    e74c:	bd80      	pop	{r7, pc}
    e74e:	bf00      	nop
    e750:	0000b8cd 	.word	0x0000b8cd
    e754:	41008000 	.word	0x41008000
    e758:	0000e68d 	.word	0x0000e68d
    e75c:	0000e6cf 	.word	0x0000e6cf
    e760:	0000e6ad 	.word	0x0000e6ad
    e764:	0000b8f3 	.word	0x0000b8f3

0000e768 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    e768:	b580      	push	{r7, lr}
    e76a:	b082      	sub	sp, #8
    e76c:	af00      	add	r7, sp, #0
    e76e:	4603      	mov	r3, r0
    e770:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    e772:	79fb      	ldrb	r3, [r7, #7]
    e774:	115b      	asrs	r3, r3, #5
    e776:	b2db      	uxtb	r3, r3
    e778:	4618      	mov	r0, r3
    e77a:	4b09      	ldr	r3, [pc, #36]	; (e7a0 <gpio_get_pin_level+0x38>)
    e77c:	4798      	blx	r3
    e77e:	4601      	mov	r1, r0
    e780:	79fb      	ldrb	r3, [r7, #7]
    e782:	f003 031f 	and.w	r3, r3, #31
    e786:	2201      	movs	r2, #1
    e788:	fa02 f303 	lsl.w	r3, r2, r3
    e78c:	400b      	ands	r3, r1
    e78e:	2b00      	cmp	r3, #0
    e790:	bf14      	ite	ne
    e792:	2301      	movne	r3, #1
    e794:	2300      	moveq	r3, #0
    e796:	b2db      	uxtb	r3, r3
}
    e798:	4618      	mov	r0, r3
    e79a:	3708      	adds	r7, #8
    e79c:	46bd      	mov	sp, r7
    e79e:	bd80      	pop	{r7, pc}
    e7a0:	0000e6f1 	.word	0x0000e6f1

0000e7a4 <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    e7a4:	b480      	push	{r7}
    e7a6:	b083      	sub	sp, #12
    e7a8:	af00      	add	r7, sp, #0
    e7aa:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    e7ac:	4b06      	ldr	r3, [pc, #24]	; (e7c8 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e7ae:	681b      	ldr	r3, [r3, #0]
    e7b0:	2201      	movs	r2, #1
    e7b2:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    e7b4:	4b04      	ldr	r3, [pc, #16]	; (e7c8 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e7b6:	681b      	ldr	r3, [r3, #0]
    e7b8:	2200      	movs	r2, #0
    e7ba:	705a      	strb	r2, [r3, #1]
}
    e7bc:	bf00      	nop
    e7be:	370c      	adds	r7, #12
    e7c0:	46bd      	mov	sp, r7
    e7c2:	bc80      	pop	{r7}
    e7c4:	4770      	bx	lr
    e7c6:	bf00      	nop
    e7c8:	20001108 	.word	0x20001108

0000e7cc <_ZL10USBPluggedv>:

static void USBPlugged(void){
    e7cc:	b580      	push	{r7, lr}
    e7ce:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    e7d0:	2040      	movs	r0, #64	; 0x40
    e7d2:	4b0a      	ldr	r3, [pc, #40]	; (e7fc <_ZL10USBPluggedv+0x30>)
    e7d4:	4798      	blx	r3
    e7d6:	4603      	mov	r3, r0
    e7d8:	2b00      	cmp	r3, #0
    e7da:	d004      	beq.n	e7e6 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    e7dc:	4b08      	ldr	r3, [pc, #32]	; (e800 <_ZL10USBPluggedv+0x34>)
    e7de:	681b      	ldr	r3, [r3, #0]
    e7e0:	2201      	movs	r2, #1
    e7e2:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    e7e4:	e007      	b.n	e7f6 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    e7e6:	4b06      	ldr	r3, [pc, #24]	; (e800 <_ZL10USBPluggedv+0x34>)
    e7e8:	681b      	ldr	r3, [r3, #0]
    e7ea:	2200      	movs	r2, #0
    e7ec:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    e7ee:	4b04      	ldr	r3, [pc, #16]	; (e800 <_ZL10USBPluggedv+0x34>)
    e7f0:	681b      	ldr	r3, [r3, #0]
    e7f2:	2200      	movs	r2, #0
    e7f4:	701a      	strb	r2, [r3, #0]
}
    e7f6:	bf00      	nop
    e7f8:	bd80      	pop	{r7, pc}
    e7fa:	bf00      	nop
    e7fc:	0000e769 	.word	0x0000e769
    e800:	20001108 	.word	0x20001108

0000e804 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    e804:	b480      	push	{r7}
    e806:	b083      	sub	sp, #12
    e808:	af00      	add	r7, sp, #0
    e80a:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    e80c:	4a04      	ldr	r2, [pc, #16]	; (e820 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    e80e:	687b      	ldr	r3, [r7, #4]
    e810:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    e812:	687b      	ldr	r3, [r7, #4]
    e814:	4618      	mov	r0, r3
    e816:	370c      	adds	r7, #12
    e818:	46bd      	mov	sp, r7
    e81a:	bc80      	pop	{r7}
    e81c:	4770      	bx	lr
    e81e:	bf00      	nop
    e820:	20001108 	.word	0x20001108

0000e824 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    e824:	b480      	push	{r7}
    e826:	b083      	sub	sp, #12
    e828:	af00      	add	r7, sp, #0
    e82a:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    e82c:	687b      	ldr	r3, [r7, #4]
    e82e:	4618      	mov	r0, r3
    e830:	370c      	adds	r7, #12
    e832:	46bd      	mov	sp, r7
    e834:	bc80      	pop	{r7}
    e836:	4770      	bx	lr

0000e838 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    e838:	b580      	push	{r7, lr}
    e83a:	b082      	sub	sp, #8
    e83c:	af00      	add	r7, sp, #0
    e83e:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    e840:	491f      	ldr	r1, [pc, #124]	; (e8c0 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    e842:	2040      	movs	r0, #64	; 0x40
    e844:	4b1f      	ldr	r3, [pc, #124]	; (e8c4 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e846:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    e848:	481f      	ldr	r0, [pc, #124]	; (e8c8 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e84a:	4b20      	ldr	r3, [pc, #128]	; (e8cc <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    e84c:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    e84e:	2040      	movs	r0, #64	; 0x40
    e850:	4b1f      	ldr	r3, [pc, #124]	; (e8d0 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    e852:	4798      	blx	r3
    e854:	4603      	mov	r3, r0
    e856:	461a      	mov	r2, r3
    e858:	687b      	ldr	r3, [r7, #4]
    e85a:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    e85c:	687b      	ldr	r3, [r7, #4]
    e85e:	78db      	ldrb	r3, [r3, #3]
    e860:	2b00      	cmp	r3, #0
    e862:	d024      	beq.n	e8ae <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
    e864:	687b      	ldr	r3, [r7, #4]
    e866:	2200      	movs	r2, #0
    e868:	709a      	strb	r2, [r3, #2]
			plugged=true;
    e86a:	687b      	ldr	r3, [r7, #4]
    e86c:	2201      	movs	r2, #1
    e86e:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    e870:	f44f 7216 	mov.w	r2, #600	; 0x258
    e874:	4917      	ldr	r1, [pc, #92]	; (e8d4 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    e876:	4814      	ldr	r0, [pc, #80]	; (e8c8 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e878:	4b17      	ldr	r3, [pc, #92]	; (e8d8 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    e87a:	4798      	blx	r3
			usbTerminalTimer.Start();
    e87c:	4812      	ldr	r0, [pc, #72]	; (e8c8 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e87e:	4b17      	ldr	r3, [pc, #92]	; (e8dc <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    e880:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    e882:	4817      	ldr	r0, [pc, #92]	; (e8e0 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    e884:	4b17      	ldr	r3, [pc, #92]	; (e8e4 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
    e886:	4798      	blx	r3
    e888:	4603      	mov	r3, r0
    e88a:	f083 0301 	eor.w	r3, r3, #1
    e88e:	b2db      	uxtb	r3, r3
    e890:	2b00      	cmp	r3, #0
    e892:	d008      	beq.n	e8a6 <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
    e894:	687b      	ldr	r3, [r7, #4]
    e896:	789b      	ldrb	r3, [r3, #2]
    e898:	b2db      	uxtb	r3, r3
    e89a:	2b00      	cmp	r3, #0
    e89c:	d0f1      	beq.n	e882 <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
    e89e:	687b      	ldr	r3, [r7, #4]
    e8a0:	2200      	movs	r2, #0
    e8a2:	701a      	strb	r2, [r3, #0]
					return;
    e8a4:	e009      	b.n	e8ba <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    e8a6:	4808      	ldr	r0, [pc, #32]	; (e8c8 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e8a8:	4b0f      	ldr	r3, [pc, #60]	; (e8e8 <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
    e8aa:	4798      	blx	r3
    e8ac:	e005      	b.n	e8ba <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
    e8ae:	687b      	ldr	r3, [r7, #4]
    e8b0:	2200      	movs	r2, #0
    e8b2:	701a      	strb	r2, [r3, #0]
			plugged=false;
    e8b4:	687b      	ldr	r3, [r7, #4]
    e8b6:	2200      	movs	r2, #0
    e8b8:	705a      	strb	r2, [r3, #1]
		}
		
}
    e8ba:	3708      	adds	r7, #8
    e8bc:	46bd      	mov	sp, r7
    e8be:	bd80      	pop	{r7, pc}
    e8c0:	0000e7cd 	.word	0x0000e7cd
    e8c4:	00002191 	.word	0x00002191
    e8c8:	20001160 	.word	0x20001160
    e8cc:	0000e969 	.word	0x0000e969
    e8d0:	0000e769 	.word	0x0000e769
    e8d4:	0000e7a5 	.word	0x0000e7a5
    e8d8:	0000ea55 	.word	0x0000ea55
    e8dc:	0000e9a1 	.word	0x0000e9a1
    e8e0:	200010a8 	.word	0x200010a8
    e8e4:	0000e15d 	.word	0x0000e15d
    e8e8:	0000e9c5 	.word	0x0000e9c5

0000e8ec <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    e8ec:	b580      	push	{r7, lr}
    e8ee:	b082      	sub	sp, #8
    e8f0:	af00      	add	r7, sp, #0
    e8f2:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    e8f4:	4b04      	ldr	r3, [pc, #16]	; (e908 <_ZL7task_cbPK10timer_task+0x1c>)
    e8f6:	681b      	ldr	r3, [r3, #0]
    e8f8:	4618      	mov	r0, r3
    e8fa:	4b04      	ldr	r3, [pc, #16]	; (e90c <_ZL7task_cbPK10timer_task+0x20>)
    e8fc:	4798      	blx	r3
}
    e8fe:	bf00      	nop
    e900:	3708      	adds	r7, #8
    e902:	46bd      	mov	sp, r7
    e904:	bd80      	pop	{r7, pc}
    e906:	bf00      	nop
    e908:	2000110c 	.word	0x2000110c
    e90c:	0000e9ed 	.word	0x0000e9ed

0000e910 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    e910:	b480      	push	{r7}
    e912:	b083      	sub	sp, #12
    e914:	af00      	add	r7, sp, #0
    e916:	6078      	str	r0, [r7, #4]
    e918:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    e91a:	687b      	ldr	r3, [r7, #4]
    e91c:	683a      	ldr	r2, [r7, #0]
    e91e:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
    e920:	4a08      	ldr	r2, [pc, #32]	; (e944 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    e922:	687b      	ldr	r3, [r7, #4]
    e924:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    e926:	687b      	ldr	r3, [r7, #4]
    e928:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e92c:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
    e92e:	687b      	ldr	r3, [r7, #4]
    e930:	689b      	ldr	r3, [r3, #8]
    e932:	4a05      	ldr	r2, [pc, #20]	; (e948 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    e934:	60da      	str	r2, [r3, #12]
} //Timer_Class
    e936:	687b      	ldr	r3, [r7, #4]
    e938:	4618      	mov	r0, r3
    e93a:	370c      	adds	r7, #12
    e93c:	46bd      	mov	sp, r7
    e93e:	bc80      	pop	{r7}
    e940:	4770      	bx	lr
    e942:	bf00      	nop
    e944:	2000110c 	.word	0x2000110c
    e948:	0000e8ed 	.word	0x0000e8ed

0000e94c <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    e94c:	b480      	push	{r7}
    e94e:	b083      	sub	sp, #12
    e950:	af00      	add	r7, sp, #0
    e952:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    e954:	687b      	ldr	r3, [r7, #4]
    e956:	2200      	movs	r2, #0
    e958:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    e95a:	687b      	ldr	r3, [r7, #4]
    e95c:	4618      	mov	r0, r3
    e95e:	370c      	adds	r7, #12
    e960:	46bd      	mov	sp, r7
    e962:	bc80      	pop	{r7}
    e964:	4770      	bx	lr
	...

0000e968 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
    e968:	b580      	push	{r7, lr}
    e96a:	b082      	sub	sp, #8
    e96c:	af00      	add	r7, sp, #0
    e96e:	6078      	str	r0, [r7, #4]
	
	ticks=0;
    e970:	687b      	ldr	r3, [r7, #4]
    e972:	2200      	movs	r2, #0
    e974:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
    e976:	6878      	ldr	r0, [r7, #4]
    e978:	4b08      	ldr	r3, [pc, #32]	; (e99c <_ZN17TimerSerial_Class4InitEv+0x34>)
    e97a:	4798      	blx	r3
    e97c:	4603      	mov	r3, r0
    e97e:	2b00      	cmp	r3, #0
    e980:	bf0c      	ite	eq
    e982:	2301      	moveq	r3, #1
    e984:	2300      	movne	r3, #0
    e986:	b2da      	uxtb	r2, r3
    e988:	687b      	ldr	r3, [r7, #4]
    e98a:	709a      	strb	r2, [r3, #2]
	return isOK;
    e98c:	687b      	ldr	r3, [r7, #4]
    e98e:	789b      	ldrb	r3, [r3, #2]
    e990:	b2db      	uxtb	r3, r3
}
    e992:	4618      	mov	r0, r3
    e994:	3708      	adds	r7, #8
    e996:	46bd      	mov	sp, r7
    e998:	bd80      	pop	{r7, pc}
    e99a:	bf00      	nop
    e99c:	0000e9a1 	.word	0x0000e9a1

0000e9a0 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    e9a0:	b580      	push	{r7, lr}
    e9a2:	b084      	sub	sp, #16
    e9a4:	af00      	add	r7, sp, #0
    e9a6:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    e9a8:	687b      	ldr	r3, [r7, #4]
    e9aa:	691b      	ldr	r3, [r3, #16]
    e9ac:	4618      	mov	r0, r3
    e9ae:	4b04      	ldr	r3, [pc, #16]	; (e9c0 <_ZN17TimerSerial_Class5StartEv+0x20>)
    e9b0:	4798      	blx	r3
    e9b2:	60f8      	str	r0, [r7, #12]
	return status;
    e9b4:	68fb      	ldr	r3, [r7, #12]
	
}
    e9b6:	4618      	mov	r0, r3
    e9b8:	3710      	adds	r7, #16
    e9ba:	46bd      	mov	sp, r7
    e9bc:	bd80      	pop	{r7, pc}
    e9be:	bf00      	nop
    e9c0:	00002b05 	.word	0x00002b05

0000e9c4 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    e9c4:	b580      	push	{r7, lr}
    e9c6:	b084      	sub	sp, #16
    e9c8:	af00      	add	r7, sp, #0
    e9ca:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    e9cc:	687b      	ldr	r3, [r7, #4]
    e9ce:	691b      	ldr	r3, [r3, #16]
    e9d0:	4618      	mov	r0, r3
    e9d2:	4b05      	ldr	r3, [pc, #20]	; (e9e8 <_ZN17TimerSerial_Class4StopEv+0x24>)
    e9d4:	4798      	blx	r3
    e9d6:	60f8      	str	r0, [r7, #12]
	timeout=0;
    e9d8:	687b      	ldr	r3, [r7, #4]
    e9da:	2200      	movs	r2, #0
    e9dc:	705a      	strb	r2, [r3, #1]
	return status;
    e9de:	68fb      	ldr	r3, [r7, #12]
}
    e9e0:	4618      	mov	r0, r3
    e9e2:	3710      	adds	r7, #16
    e9e4:	46bd      	mov	sp, r7
    e9e6:	bd80      	pop	{r7, pc}
    e9e8:	00002b6d 	.word	0x00002b6d

0000e9ec <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    e9ec:	b480      	push	{r7}
    e9ee:	b083      	sub	sp, #12
    e9f0:	af00      	add	r7, sp, #0
    e9f2:	6078      	str	r0, [r7, #4]
	timeout=1;
    e9f4:	687b      	ldr	r3, [r7, #4]
    e9f6:	2201      	movs	r2, #1
    e9f8:	705a      	strb	r2, [r3, #1]
}
    e9fa:	bf00      	nop
    e9fc:	370c      	adds	r7, #12
    e9fe:	46bd      	mov	sp, r7
    ea00:	bc80      	pop	{r7}
    ea02:	4770      	bx	lr

0000ea04 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    ea04:	b580      	push	{r7, lr}
    ea06:	b086      	sub	sp, #24
    ea08:	af00      	add	r7, sp, #0
    ea0a:	60f8      	str	r0, [r7, #12]
    ea0c:	60b9      	str	r1, [r7, #8]
    ea0e:	607a      	str	r2, [r7, #4]
    ea10:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    ea12:	68f8      	ldr	r0, [r7, #12]
    ea14:	4b0d      	ldr	r3, [pc, #52]	; (ea4c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    ea16:	4798      	blx	r3
	task->interval = interval;
    ea18:	68fb      	ldr	r3, [r7, #12]
    ea1a:	689b      	ldr	r3, [r3, #8]
    ea1c:	687a      	ldr	r2, [r7, #4]
    ea1e:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    ea20:	68fb      	ldr	r3, [r7, #12]
    ea22:	689b      	ldr	r3, [r3, #8]
    ea24:	68ba      	ldr	r2, [r7, #8]
    ea26:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    ea28:	68fb      	ldr	r3, [r7, #12]
    ea2a:	689b      	ldr	r3, [r3, #8]
    ea2c:	78fa      	ldrb	r2, [r7, #3]
    ea2e:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    ea30:	68fb      	ldr	r3, [r7, #12]
    ea32:	691a      	ldr	r2, [r3, #16]
    ea34:	68fb      	ldr	r3, [r7, #12]
    ea36:	689b      	ldr	r3, [r3, #8]
    ea38:	4619      	mov	r1, r3
    ea3a:	4610      	mov	r0, r2
    ea3c:	4b04      	ldr	r3, [pc, #16]	; (ea50 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    ea3e:	4798      	blx	r3
    ea40:	6178      	str	r0, [r7, #20]
	
	return status;
    ea42:	697b      	ldr	r3, [r7, #20]
}
    ea44:	4618      	mov	r0, r3
    ea46:	3718      	adds	r7, #24
    ea48:	46bd      	mov	sp, r7
    ea4a:	bd80      	pop	{r7, pc}
    ea4c:	0000eb0d 	.word	0x0000eb0d
    ea50:	00002bd9 	.word	0x00002bd9

0000ea54 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    ea54:	b590      	push	{r4, r7, lr}
    ea56:	b087      	sub	sp, #28
    ea58:	af00      	add	r7, sp, #0
    ea5a:	60f8      	str	r0, [r7, #12]
    ea5c:	60b9      	str	r1, [r7, #8]
    ea5e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    ea60:	2300      	movs	r3, #0
    ea62:	687a      	ldr	r2, [r7, #4]
    ea64:	68b9      	ldr	r1, [r7, #8]
    ea66:	68f8      	ldr	r0, [r7, #12]
    ea68:	4c03      	ldr	r4, [pc, #12]	; (ea78 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    ea6a:	47a0      	blx	r4
    ea6c:	6178      	str	r0, [r7, #20]
	return status;
    ea6e:	697b      	ldr	r3, [r7, #20]
}
    ea70:	4618      	mov	r0, r3
    ea72:	371c      	adds	r7, #28
    ea74:	46bd      	mov	sp, r7
    ea76:	bd90      	pop	{r4, r7, pc}
    ea78:	0000ea05 	.word	0x0000ea05

0000ea7c <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    ea7c:	b590      	push	{r4, r7, lr}
    ea7e:	b087      	sub	sp, #28
    ea80:	af00      	add	r7, sp, #0
    ea82:	60f8      	str	r0, [r7, #12]
    ea84:	60b9      	str	r1, [r7, #8]
    ea86:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    ea88:	2300      	movs	r3, #0
    ea8a:	687a      	ldr	r2, [r7, #4]
    ea8c:	68b9      	ldr	r1, [r7, #8]
    ea8e:	68f8      	ldr	r0, [r7, #12]
    ea90:	4c06      	ldr	r4, [pc, #24]	; (eaac <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    ea92:	47a0      	blx	r4
    ea94:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    ea96:	68fb      	ldr	r3, [r7, #12]
    ea98:	691b      	ldr	r3, [r3, #16]
    ea9a:	4618      	mov	r0, r3
    ea9c:	4b04      	ldr	r3, [pc, #16]	; (eab0 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    ea9e:	4798      	blx	r3
    eaa0:	6178      	str	r0, [r7, #20]
	return status;
    eaa2:	697b      	ldr	r3, [r7, #20]
}
    eaa4:	4618      	mov	r0, r3
    eaa6:	371c      	adds	r7, #28
    eaa8:	46bd      	mov	sp, r7
    eaaa:	bd90      	pop	{r4, r7, pc}
    eaac:	0000ea05 	.word	0x0000ea05
    eab0:	00002b05 	.word	0x00002b05

0000eab4 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    eab4:	b580      	push	{r7, lr}
    eab6:	b082      	sub	sp, #8
    eab8:	af00      	add	r7, sp, #0
    eaba:	6078      	str	r0, [r7, #4]
    eabc:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    eabe:	6839      	ldr	r1, [r7, #0]
    eac0:	6878      	ldr	r0, [r7, #4]
    eac2:	4b0f      	ldr	r3, [pc, #60]	; (eb00 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    eac4:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    eac6:	687b      	ldr	r3, [r7, #4]
    eac8:	691b      	ldr	r3, [r3, #16]
    eaca:	f103 0218 	add.w	r2, r3, #24
    eace:	687b      	ldr	r3, [r7, #4]
    ead0:	689b      	ldr	r3, [r3, #8]
    ead2:	4619      	mov	r1, r3
    ead4:	4610      	mov	r0, r2
    ead6:	4b0b      	ldr	r3, [pc, #44]	; (eb04 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    ead8:	4798      	blx	r3
    eada:	4603      	mov	r3, r0
    eadc:	2b00      	cmp	r3, #0
    eade:	d007      	beq.n	eaf0 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    eae0:	687b      	ldr	r3, [r7, #4]
    eae2:	691a      	ldr	r2, [r3, #16]
    eae4:	687b      	ldr	r3, [r7, #4]
    eae6:	689b      	ldr	r3, [r3, #8]
    eae8:	4619      	mov	r1, r3
    eaea:	4610      	mov	r0, r2
    eaec:	4b06      	ldr	r3, [pc, #24]	; (eb08 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    eaee:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    eaf0:	687b      	ldr	r3, [r7, #4]
    eaf2:	689b      	ldr	r3, [r3, #8]
    eaf4:	2200      	movs	r2, #0
    eaf6:	60da      	str	r2, [r3, #12]
}
    eaf8:	bf00      	nop
    eafa:	3708      	adds	r7, #8
    eafc:	46bd      	mov	sp, r7
    eafe:	bd80      	pop	{r7, pc}
    eb00:	0000eb65 	.word	0x0000eb65
    eb04:	000038c5 	.word	0x000038c5
    eb08:	00002cdd 	.word	0x00002cdd

0000eb0c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    eb0c:	b480      	push	{r7}
    eb0e:	b085      	sub	sp, #20
    eb10:	af00      	add	r7, sp, #0
    eb12:	6078      	str	r0, [r7, #4]
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    eb14:	2300      	movs	r3, #0
    eb16:	73fb      	strb	r3, [r7, #15]
    eb18:	7bfb      	ldrb	r3, [r7, #15]
    eb1a:	2b03      	cmp	r3, #3
    eb1c:	dc18      	bgt.n	eb50 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x44>
	{
			if (taskArray[ii].cb==NULL)
    eb1e:	7bfa      	ldrb	r2, [r7, #15]
    eb20:	490f      	ldr	r1, [pc, #60]	; (eb60 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    eb22:	4613      	mov	r3, r2
    eb24:	009b      	lsls	r3, r3, #2
    eb26:	4413      	add	r3, r2
    eb28:	009b      	lsls	r3, r3, #2
    eb2a:	440b      	add	r3, r1
    eb2c:	330c      	adds	r3, #12
    eb2e:	681b      	ldr	r3, [r3, #0]
    eb30:	2b00      	cmp	r3, #0
    eb32:	d109      	bne.n	eb48 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
			{
				
				task=&taskArray[ii];
    eb34:	7bfa      	ldrb	r2, [r7, #15]
    eb36:	4613      	mov	r3, r2
    eb38:	009b      	lsls	r3, r3, #2
    eb3a:	4413      	add	r3, r2
    eb3c:	009b      	lsls	r3, r3, #2
    eb3e:	4a08      	ldr	r2, [pc, #32]	; (eb60 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    eb40:	441a      	add	r2, r3
    eb42:	687b      	ldr	r3, [r7, #4]
    eb44:	609a      	str	r2, [r3, #8]
			return;
    eb46:	e006      	b.n	eb56 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4a>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    eb48:	7bfb      	ldrb	r3, [r7, #15]
    eb4a:	3301      	adds	r3, #1
    eb4c:	73fb      	strb	r3, [r7, #15]
    eb4e:	e7e3      	b.n	eb18 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xc>
				
			}
	}
	task=&taskArray[0];
    eb50:	687b      	ldr	r3, [r7, #4]
    eb52:	4a03      	ldr	r2, [pc, #12]	; (eb60 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    eb54:	609a      	str	r2, [r3, #8]

}
    eb56:	3714      	adds	r7, #20
    eb58:	46bd      	mov	sp, r7
    eb5a:	bc80      	pop	{r7}
    eb5c:	4770      	bx	lr
    eb5e:	bf00      	nop
    eb60:	20001110 	.word	0x20001110

0000eb64 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    eb64:	b480      	push	{r7}
    eb66:	b085      	sub	sp, #20
    eb68:	af00      	add	r7, sp, #0
    eb6a:	6078      	str	r0, [r7, #4]
    eb6c:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    eb6e:	2300      	movs	r3, #0
    eb70:	73fb      	strb	r3, [r7, #15]
    eb72:	7bfb      	ldrb	r3, [r7, #15]
    eb74:	2b03      	cmp	r3, #3
    eb76:	dc19      	bgt.n	ebac <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    eb78:	7bfa      	ldrb	r2, [r7, #15]
    eb7a:	490e      	ldr	r1, [pc, #56]	; (ebb4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    eb7c:	4613      	mov	r3, r2
    eb7e:	009b      	lsls	r3, r3, #2
    eb80:	4413      	add	r3, r2
    eb82:	009b      	lsls	r3, r3, #2
    eb84:	440b      	add	r3, r1
    eb86:	330c      	adds	r3, #12
    eb88:	681a      	ldr	r2, [r3, #0]
    eb8a:	683b      	ldr	r3, [r7, #0]
    eb8c:	429a      	cmp	r2, r3
    eb8e:	d109      	bne.n	eba4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    eb90:	7bfa      	ldrb	r2, [r7, #15]
    eb92:	4613      	mov	r3, r2
    eb94:	009b      	lsls	r3, r3, #2
    eb96:	4413      	add	r3, r2
    eb98:	009b      	lsls	r3, r3, #2
    eb9a:	4a06      	ldr	r2, [pc, #24]	; (ebb4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    eb9c:	441a      	add	r2, r3
    eb9e:	687b      	ldr	r3, [r7, #4]
    eba0:	609a      	str	r2, [r3, #8]
			return;
    eba2:	e003      	b.n	ebac <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    eba4:	7bfb      	ldrb	r3, [r7, #15]
    eba6:	3301      	adds	r3, #1
    eba8:	73fb      	strb	r3, [r7, #15]
    ebaa:	e7e2      	b.n	eb72 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}


}
    ebac:	3714      	adds	r7, #20
    ebae:	46bd      	mov	sp, r7
    ebb0:	bc80      	pop	{r7}
    ebb2:	4770      	bx	lr
    ebb4:	20001110 	.word	0x20001110

0000ebb8 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    ebb8:	b580      	push	{r7, lr}
    ebba:	b082      	sub	sp, #8
    ebbc:	af00      	add	r7, sp, #0
    ebbe:	6078      	str	r0, [r7, #4]
    ebc0:	6039      	str	r1, [r7, #0]
    ebc2:	687b      	ldr	r3, [r7, #4]
    ebc4:	2b01      	cmp	r3, #1
    ebc6:	d116      	bne.n	ebf6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
    ebc8:	683b      	ldr	r3, [r7, #0]
    ebca:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ebce:	4293      	cmp	r3, r2
    ebd0:	d111      	bne.n	ebf6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    ebd2:	490b      	ldr	r1, [pc, #44]	; (ec00 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    ebd4:	480b      	ldr	r0, [pc, #44]	; (ec04 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    ebd6:	4b0c      	ldr	r3, [pc, #48]	; (ec08 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    ebd8:	4798      	blx	r3
    ebda:	4a0c      	ldr	r2, [pc, #48]	; (ec0c <_Z41__static_initialization_and_destruction_0ii+0x54>)
    ebdc:	490c      	ldr	r1, [pc, #48]	; (ec10 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    ebde:	4809      	ldr	r0, [pc, #36]	; (ec04 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    ebe0:	4b0c      	ldr	r3, [pc, #48]	; (ec14 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    ebe2:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    ebe4:	490c      	ldr	r1, [pc, #48]	; (ec18 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    ebe6:	480d      	ldr	r0, [pc, #52]	; (ec1c <_Z41__static_initialization_and_destruction_0ii+0x64>)
    ebe8:	4b07      	ldr	r3, [pc, #28]	; (ec08 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    ebea:	4798      	blx	r3
    ebec:	4a07      	ldr	r2, [pc, #28]	; (ec0c <_Z41__static_initialization_and_destruction_0ii+0x54>)
    ebee:	4908      	ldr	r1, [pc, #32]	; (ec10 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    ebf0:	480a      	ldr	r0, [pc, #40]	; (ec1c <_Z41__static_initialization_and_destruction_0ii+0x64>)
    ebf2:	4b08      	ldr	r3, [pc, #32]	; (ec14 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    ebf4:	4798      	blx	r3
    ebf6:	bf00      	nop
    ebf8:	3708      	adds	r7, #8
    ebfa:	46bd      	mov	sp, r7
    ebfc:	bd80      	pop	{r7, pc}
    ebfe:	bf00      	nop
    ec00:	200012b8 	.word	0x200012b8
    ec04:	20001160 	.word	0x20001160
    ec08:	0000e911 	.word	0x0000e911
    ec0c:	20000000 	.word	0x20000000
    ec10:	0000e94d 	.word	0x0000e94d
    ec14:	0000ecf5 	.word	0x0000ecf5
    ec18:	200011f0 	.word	0x200011f0
    ec1c:	20001180 	.word	0x20001180

0000ec20 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    ec20:	b580      	push	{r7, lr}
    ec22:	af00      	add	r7, sp, #0
    ec24:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ec28:	2001      	movs	r0, #1
    ec2a:	4b01      	ldr	r3, [pc, #4]	; (ec30 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    ec2c:	4798      	blx	r3
    ec2e:	bd80      	pop	{r7, pc}
    ec30:	0000ebb9 	.word	0x0000ebb9

0000ec34 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    ec34:	b480      	push	{r7}
    ec36:	b083      	sub	sp, #12
    ec38:	af00      	add	r7, sp, #0
    ec3a:	6078      	str	r0, [r7, #4]
    return (void *)0;
    ec3c:	2300      	movs	r3, #0
	}
    ec3e:	4618      	mov	r0, r3
    ec40:	370c      	adds	r7, #12
    ec42:	46bd      	mov	sp, r7
    ec44:	bc80      	pop	{r7}
    ec46:	4770      	bx	lr

0000ec48 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    ec48:	b480      	push	{r7}
    ec4a:	af00      	add	r7, sp, #0
		}
    ec4c:	bf00      	nop
    ec4e:	46bd      	mov	sp, r7
    ec50:	bc80      	pop	{r7}
    ec52:	4770      	bx	lr

0000ec54 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    ec54:	b580      	push	{r7, lr}
    ec56:	b084      	sub	sp, #16
    ec58:	af00      	add	r7, sp, #0
    ec5a:	60f8      	str	r0, [r7, #12]
    ec5c:	60b9      	str	r1, [r7, #8]
    ec5e:	4613      	mov	r3, r2
    ec60:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    ec62:	68fb      	ldr	r3, [r7, #12]
    ec64:	2b00      	cmp	r3, #0
    ec66:	d004      	beq.n	ec72 <io_write+0x1e>
    ec68:	68bb      	ldr	r3, [r7, #8]
    ec6a:	2b00      	cmp	r3, #0
    ec6c:	d001      	beq.n	ec72 <io_write+0x1e>
    ec6e:	2301      	movs	r3, #1
    ec70:	e000      	b.n	ec74 <io_write+0x20>
    ec72:	2300      	movs	r3, #0
    ec74:	f003 0301 	and.w	r3, r3, #1
    ec78:	b2db      	uxtb	r3, r3
    ec7a:	2234      	movs	r2, #52	; 0x34
    ec7c:	4907      	ldr	r1, [pc, #28]	; (ec9c <io_write+0x48>)
    ec7e:	4618      	mov	r0, r3
    ec80:	4b07      	ldr	r3, [pc, #28]	; (eca0 <io_write+0x4c>)
    ec82:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    ec84:	68fb      	ldr	r3, [r7, #12]
    ec86:	681b      	ldr	r3, [r3, #0]
    ec88:	88fa      	ldrh	r2, [r7, #6]
    ec8a:	68b9      	ldr	r1, [r7, #8]
    ec8c:	68f8      	ldr	r0, [r7, #12]
    ec8e:	4798      	blx	r3
    ec90:	4603      	mov	r3, r0
}
    ec92:	4618      	mov	r0, r3
    ec94:	3710      	adds	r7, #16
    ec96:	46bd      	mov	sp, r7
    ec98:	bd80      	pop	{r7, pc}
    ec9a:	bf00      	nop
    ec9c:	0000f728 	.word	0x0000f728
    eca0:	0000389d 	.word	0x0000389d

0000eca4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    eca4:	b580      	push	{r7, lr}
    eca6:	b084      	sub	sp, #16
    eca8:	af00      	add	r7, sp, #0
    ecaa:	60f8      	str	r0, [r7, #12]
    ecac:	60b9      	str	r1, [r7, #8]
    ecae:	4613      	mov	r3, r2
    ecb0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    ecb2:	68fb      	ldr	r3, [r7, #12]
    ecb4:	2b00      	cmp	r3, #0
    ecb6:	d004      	beq.n	ecc2 <io_read+0x1e>
    ecb8:	68bb      	ldr	r3, [r7, #8]
    ecba:	2b00      	cmp	r3, #0
    ecbc:	d001      	beq.n	ecc2 <io_read+0x1e>
    ecbe:	2301      	movs	r3, #1
    ecc0:	e000      	b.n	ecc4 <io_read+0x20>
    ecc2:	2300      	movs	r3, #0
    ecc4:	f003 0301 	and.w	r3, r3, #1
    ecc8:	b2db      	uxtb	r3, r3
    ecca:	223d      	movs	r2, #61	; 0x3d
    eccc:	4907      	ldr	r1, [pc, #28]	; (ecec <io_read+0x48>)
    ecce:	4618      	mov	r0, r3
    ecd0:	4b07      	ldr	r3, [pc, #28]	; (ecf0 <io_read+0x4c>)
    ecd2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    ecd4:	68fb      	ldr	r3, [r7, #12]
    ecd6:	685b      	ldr	r3, [r3, #4]
    ecd8:	88fa      	ldrh	r2, [r7, #6]
    ecda:	68b9      	ldr	r1, [r7, #8]
    ecdc:	68f8      	ldr	r0, [r7, #12]
    ecde:	4798      	blx	r3
    ece0:	4603      	mov	r3, r0
}
    ece2:	4618      	mov	r0, r3
    ece4:	3710      	adds	r7, #16
    ece6:	46bd      	mov	sp, r7
    ece8:	bd80      	pop	{r7, pc}
    ecea:	bf00      	nop
    ecec:	0000f728 	.word	0x0000f728
    ecf0:	0000389d 	.word	0x0000389d

0000ecf4 <__aeabi_atexit>:
    ecf4:	460b      	mov	r3, r1
    ecf6:	4601      	mov	r1, r0
    ecf8:	4618      	mov	r0, r3
    ecfa:	f000 b801 	b.w	ed00 <__cxa_atexit>
    ecfe:	bf00      	nop

0000ed00 <__cxa_atexit>:
    ed00:	4613      	mov	r3, r2
    ed02:	460a      	mov	r2, r1
    ed04:	4601      	mov	r1, r0
    ed06:	2002      	movs	r0, #2
    ed08:	f000 b9a8 	b.w	f05c <__register_exitproc>

0000ed0c <ffs>:
    ed0c:	b140      	cbz	r0, ed20 <ffs+0x14>
    ed0e:	2300      	movs	r3, #0
    ed10:	fa40 f103 	asr.w	r1, r0, r3
    ed14:	1c5a      	adds	r2, r3, #1
    ed16:	07c9      	lsls	r1, r1, #31
    ed18:	4613      	mov	r3, r2
    ed1a:	d5f9      	bpl.n	ed10 <ffs+0x4>
    ed1c:	4610      	mov	r0, r2
    ed1e:	4770      	bx	lr
    ed20:	4602      	mov	r2, r0
    ed22:	4610      	mov	r0, r2
    ed24:	4770      	bx	lr
    ed26:	bf00      	nop

0000ed28 <__libc_init_array>:
    ed28:	b570      	push	{r4, r5, r6, lr}
    ed2a:	4e0f      	ldr	r6, [pc, #60]	; (ed68 <__libc_init_array+0x40>)
    ed2c:	4d0f      	ldr	r5, [pc, #60]	; (ed6c <__libc_init_array+0x44>)
    ed2e:	1b76      	subs	r6, r6, r5
    ed30:	10b6      	asrs	r6, r6, #2
    ed32:	bf18      	it	ne
    ed34:	2400      	movne	r4, #0
    ed36:	d005      	beq.n	ed44 <__libc_init_array+0x1c>
    ed38:	3401      	adds	r4, #1
    ed3a:	f855 3b04 	ldr.w	r3, [r5], #4
    ed3e:	4798      	blx	r3
    ed40:	42a6      	cmp	r6, r4
    ed42:	d1f9      	bne.n	ed38 <__libc_init_array+0x10>
    ed44:	4e0a      	ldr	r6, [pc, #40]	; (ed70 <__libc_init_array+0x48>)
    ed46:	4d0b      	ldr	r5, [pc, #44]	; (ed74 <__libc_init_array+0x4c>)
    ed48:	1b76      	subs	r6, r6, r5
    ed4a:	f000 fcf9 	bl	f740 <_init>
    ed4e:	10b6      	asrs	r6, r6, #2
    ed50:	bf18      	it	ne
    ed52:	2400      	movne	r4, #0
    ed54:	d006      	beq.n	ed64 <__libc_init_array+0x3c>
    ed56:	3401      	adds	r4, #1
    ed58:	f855 3b04 	ldr.w	r3, [r5], #4
    ed5c:	4798      	blx	r3
    ed5e:	42a6      	cmp	r6, r4
    ed60:	d1f9      	bne.n	ed56 <__libc_init_array+0x2e>
    ed62:	bd70      	pop	{r4, r5, r6, pc}
    ed64:	bd70      	pop	{r4, r5, r6, pc}
    ed66:	bf00      	nop
    ed68:	0000f74c 	.word	0x0000f74c
    ed6c:	0000f74c 	.word	0x0000f74c
    ed70:	0000f768 	.word	0x0000f768
    ed74:	0000f74c 	.word	0x0000f74c

0000ed78 <memcpy>:
    ed78:	4684      	mov	ip, r0
    ed7a:	ea41 0300 	orr.w	r3, r1, r0
    ed7e:	f013 0303 	ands.w	r3, r3, #3
    ed82:	d16d      	bne.n	ee60 <memcpy+0xe8>
    ed84:	3a40      	subs	r2, #64	; 0x40
    ed86:	d341      	bcc.n	ee0c <memcpy+0x94>
    ed88:	f851 3b04 	ldr.w	r3, [r1], #4
    ed8c:	f840 3b04 	str.w	r3, [r0], #4
    ed90:	f851 3b04 	ldr.w	r3, [r1], #4
    ed94:	f840 3b04 	str.w	r3, [r0], #4
    ed98:	f851 3b04 	ldr.w	r3, [r1], #4
    ed9c:	f840 3b04 	str.w	r3, [r0], #4
    eda0:	f851 3b04 	ldr.w	r3, [r1], #4
    eda4:	f840 3b04 	str.w	r3, [r0], #4
    eda8:	f851 3b04 	ldr.w	r3, [r1], #4
    edac:	f840 3b04 	str.w	r3, [r0], #4
    edb0:	f851 3b04 	ldr.w	r3, [r1], #4
    edb4:	f840 3b04 	str.w	r3, [r0], #4
    edb8:	f851 3b04 	ldr.w	r3, [r1], #4
    edbc:	f840 3b04 	str.w	r3, [r0], #4
    edc0:	f851 3b04 	ldr.w	r3, [r1], #4
    edc4:	f840 3b04 	str.w	r3, [r0], #4
    edc8:	f851 3b04 	ldr.w	r3, [r1], #4
    edcc:	f840 3b04 	str.w	r3, [r0], #4
    edd0:	f851 3b04 	ldr.w	r3, [r1], #4
    edd4:	f840 3b04 	str.w	r3, [r0], #4
    edd8:	f851 3b04 	ldr.w	r3, [r1], #4
    eddc:	f840 3b04 	str.w	r3, [r0], #4
    ede0:	f851 3b04 	ldr.w	r3, [r1], #4
    ede4:	f840 3b04 	str.w	r3, [r0], #4
    ede8:	f851 3b04 	ldr.w	r3, [r1], #4
    edec:	f840 3b04 	str.w	r3, [r0], #4
    edf0:	f851 3b04 	ldr.w	r3, [r1], #4
    edf4:	f840 3b04 	str.w	r3, [r0], #4
    edf8:	f851 3b04 	ldr.w	r3, [r1], #4
    edfc:	f840 3b04 	str.w	r3, [r0], #4
    ee00:	f851 3b04 	ldr.w	r3, [r1], #4
    ee04:	f840 3b04 	str.w	r3, [r0], #4
    ee08:	3a40      	subs	r2, #64	; 0x40
    ee0a:	d2bd      	bcs.n	ed88 <memcpy+0x10>
    ee0c:	3230      	adds	r2, #48	; 0x30
    ee0e:	d311      	bcc.n	ee34 <memcpy+0xbc>
    ee10:	f851 3b04 	ldr.w	r3, [r1], #4
    ee14:	f840 3b04 	str.w	r3, [r0], #4
    ee18:	f851 3b04 	ldr.w	r3, [r1], #4
    ee1c:	f840 3b04 	str.w	r3, [r0], #4
    ee20:	f851 3b04 	ldr.w	r3, [r1], #4
    ee24:	f840 3b04 	str.w	r3, [r0], #4
    ee28:	f851 3b04 	ldr.w	r3, [r1], #4
    ee2c:	f840 3b04 	str.w	r3, [r0], #4
    ee30:	3a10      	subs	r2, #16
    ee32:	d2ed      	bcs.n	ee10 <memcpy+0x98>
    ee34:	320c      	adds	r2, #12
    ee36:	d305      	bcc.n	ee44 <memcpy+0xcc>
    ee38:	f851 3b04 	ldr.w	r3, [r1], #4
    ee3c:	f840 3b04 	str.w	r3, [r0], #4
    ee40:	3a04      	subs	r2, #4
    ee42:	d2f9      	bcs.n	ee38 <memcpy+0xc0>
    ee44:	3204      	adds	r2, #4
    ee46:	d008      	beq.n	ee5a <memcpy+0xe2>
    ee48:	07d2      	lsls	r2, r2, #31
    ee4a:	bf1c      	itt	ne
    ee4c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    ee50:	f800 3b01 	strbne.w	r3, [r0], #1
    ee54:	d301      	bcc.n	ee5a <memcpy+0xe2>
    ee56:	880b      	ldrh	r3, [r1, #0]
    ee58:	8003      	strh	r3, [r0, #0]
    ee5a:	4660      	mov	r0, ip
    ee5c:	4770      	bx	lr
    ee5e:	bf00      	nop
    ee60:	2a08      	cmp	r2, #8
    ee62:	d313      	bcc.n	ee8c <memcpy+0x114>
    ee64:	078b      	lsls	r3, r1, #30
    ee66:	d08d      	beq.n	ed84 <memcpy+0xc>
    ee68:	f010 0303 	ands.w	r3, r0, #3
    ee6c:	d08a      	beq.n	ed84 <memcpy+0xc>
    ee6e:	f1c3 0304 	rsb	r3, r3, #4
    ee72:	1ad2      	subs	r2, r2, r3
    ee74:	07db      	lsls	r3, r3, #31
    ee76:	bf1c      	itt	ne
    ee78:	f811 3b01 	ldrbne.w	r3, [r1], #1
    ee7c:	f800 3b01 	strbne.w	r3, [r0], #1
    ee80:	d380      	bcc.n	ed84 <memcpy+0xc>
    ee82:	f831 3b02 	ldrh.w	r3, [r1], #2
    ee86:	f820 3b02 	strh.w	r3, [r0], #2
    ee8a:	e77b      	b.n	ed84 <memcpy+0xc>
    ee8c:	3a04      	subs	r2, #4
    ee8e:	d3d9      	bcc.n	ee44 <memcpy+0xcc>
    ee90:	3a01      	subs	r2, #1
    ee92:	f811 3b01 	ldrb.w	r3, [r1], #1
    ee96:	f800 3b01 	strb.w	r3, [r0], #1
    ee9a:	d2f9      	bcs.n	ee90 <memcpy+0x118>
    ee9c:	780b      	ldrb	r3, [r1, #0]
    ee9e:	7003      	strb	r3, [r0, #0]
    eea0:	784b      	ldrb	r3, [r1, #1]
    eea2:	7043      	strb	r3, [r0, #1]
    eea4:	788b      	ldrb	r3, [r1, #2]
    eea6:	7083      	strb	r3, [r0, #2]
    eea8:	4660      	mov	r0, ip
    eeaa:	4770      	bx	lr

0000eeac <memset>:
    eeac:	b470      	push	{r4, r5, r6}
    eeae:	0786      	lsls	r6, r0, #30
    eeb0:	d046      	beq.n	ef40 <memset+0x94>
    eeb2:	1e54      	subs	r4, r2, #1
    eeb4:	2a00      	cmp	r2, #0
    eeb6:	d041      	beq.n	ef3c <memset+0x90>
    eeb8:	b2ca      	uxtb	r2, r1
    eeba:	4603      	mov	r3, r0
    eebc:	e002      	b.n	eec4 <memset+0x18>
    eebe:	f114 34ff 	adds.w	r4, r4, #4294967295
    eec2:	d33b      	bcc.n	ef3c <memset+0x90>
    eec4:	f803 2b01 	strb.w	r2, [r3], #1
    eec8:	079d      	lsls	r5, r3, #30
    eeca:	d1f8      	bne.n	eebe <memset+0x12>
    eecc:	2c03      	cmp	r4, #3
    eece:	d92e      	bls.n	ef2e <memset+0x82>
    eed0:	b2cd      	uxtb	r5, r1
    eed2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    eed6:	2c0f      	cmp	r4, #15
    eed8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    eedc:	d919      	bls.n	ef12 <memset+0x66>
    eede:	f103 0210 	add.w	r2, r3, #16
    eee2:	4626      	mov	r6, r4
    eee4:	3e10      	subs	r6, #16
    eee6:	2e0f      	cmp	r6, #15
    eee8:	f842 5c10 	str.w	r5, [r2, #-16]
    eeec:	f842 5c0c 	str.w	r5, [r2, #-12]
    eef0:	f842 5c08 	str.w	r5, [r2, #-8]
    eef4:	f842 5c04 	str.w	r5, [r2, #-4]
    eef8:	f102 0210 	add.w	r2, r2, #16
    eefc:	d8f2      	bhi.n	eee4 <memset+0x38>
    eefe:	f1a4 0210 	sub.w	r2, r4, #16
    ef02:	f022 020f 	bic.w	r2, r2, #15
    ef06:	f004 040f 	and.w	r4, r4, #15
    ef0a:	3210      	adds	r2, #16
    ef0c:	2c03      	cmp	r4, #3
    ef0e:	4413      	add	r3, r2
    ef10:	d90d      	bls.n	ef2e <memset+0x82>
    ef12:	461e      	mov	r6, r3
    ef14:	4622      	mov	r2, r4
    ef16:	3a04      	subs	r2, #4
    ef18:	2a03      	cmp	r2, #3
    ef1a:	f846 5b04 	str.w	r5, [r6], #4
    ef1e:	d8fa      	bhi.n	ef16 <memset+0x6a>
    ef20:	1f22      	subs	r2, r4, #4
    ef22:	f022 0203 	bic.w	r2, r2, #3
    ef26:	3204      	adds	r2, #4
    ef28:	4413      	add	r3, r2
    ef2a:	f004 0403 	and.w	r4, r4, #3
    ef2e:	b12c      	cbz	r4, ef3c <memset+0x90>
    ef30:	b2c9      	uxtb	r1, r1
    ef32:	441c      	add	r4, r3
    ef34:	f803 1b01 	strb.w	r1, [r3], #1
    ef38:	429c      	cmp	r4, r3
    ef3a:	d1fb      	bne.n	ef34 <memset+0x88>
    ef3c:	bc70      	pop	{r4, r5, r6}
    ef3e:	4770      	bx	lr
    ef40:	4614      	mov	r4, r2
    ef42:	4603      	mov	r3, r0
    ef44:	e7c2      	b.n	eecc <memset+0x20>
    ef46:	bf00      	nop
	...

0000ef80 <strlen>:
    ef80:	f890 f000 	pld	[r0]
    ef84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    ef88:	f020 0107 	bic.w	r1, r0, #7
    ef8c:	f06f 0c00 	mvn.w	ip, #0
    ef90:	f010 0407 	ands.w	r4, r0, #7
    ef94:	f891 f020 	pld	[r1, #32]
    ef98:	f040 8049 	bne.w	f02e <strlen+0xae>
    ef9c:	f04f 0400 	mov.w	r4, #0
    efa0:	f06f 0007 	mvn.w	r0, #7
    efa4:	e9d1 2300 	ldrd	r2, r3, [r1]
    efa8:	f891 f040 	pld	[r1, #64]	; 0x40
    efac:	f100 0008 	add.w	r0, r0, #8
    efb0:	fa82 f24c 	uadd8	r2, r2, ip
    efb4:	faa4 f28c 	sel	r2, r4, ip
    efb8:	fa83 f34c 	uadd8	r3, r3, ip
    efbc:	faa2 f38c 	sel	r3, r2, ip
    efc0:	bb4b      	cbnz	r3, f016 <strlen+0x96>
    efc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    efc6:	fa82 f24c 	uadd8	r2, r2, ip
    efca:	f100 0008 	add.w	r0, r0, #8
    efce:	faa4 f28c 	sel	r2, r4, ip
    efd2:	fa83 f34c 	uadd8	r3, r3, ip
    efd6:	faa2 f38c 	sel	r3, r2, ip
    efda:	b9e3      	cbnz	r3, f016 <strlen+0x96>
    efdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    efe0:	fa82 f24c 	uadd8	r2, r2, ip
    efe4:	f100 0008 	add.w	r0, r0, #8
    efe8:	faa4 f28c 	sel	r2, r4, ip
    efec:	fa83 f34c 	uadd8	r3, r3, ip
    eff0:	faa2 f38c 	sel	r3, r2, ip
    eff4:	b97b      	cbnz	r3, f016 <strlen+0x96>
    eff6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    effa:	f101 0120 	add.w	r1, r1, #32
    effe:	fa82 f24c 	uadd8	r2, r2, ip
    f002:	f100 0008 	add.w	r0, r0, #8
    f006:	faa4 f28c 	sel	r2, r4, ip
    f00a:	fa83 f34c 	uadd8	r3, r3, ip
    f00e:	faa2 f38c 	sel	r3, r2, ip
    f012:	2b00      	cmp	r3, #0
    f014:	d0c6      	beq.n	efa4 <strlen+0x24>
    f016:	2a00      	cmp	r2, #0
    f018:	bf04      	itt	eq
    f01a:	3004      	addeq	r0, #4
    f01c:	461a      	moveq	r2, r3
    f01e:	ba12      	rev	r2, r2
    f020:	fab2 f282 	clz	r2, r2
    f024:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    f028:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    f02c:	4770      	bx	lr
    f02e:	e9d1 2300 	ldrd	r2, r3, [r1]
    f032:	f004 0503 	and.w	r5, r4, #3
    f036:	f1c4 0000 	rsb	r0, r4, #0
    f03a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    f03e:	f014 0f04 	tst.w	r4, #4
    f042:	f891 f040 	pld	[r1, #64]	; 0x40
    f046:	fa0c f505 	lsl.w	r5, ip, r5
    f04a:	ea62 0205 	orn	r2, r2, r5
    f04e:	bf1c      	itt	ne
    f050:	ea63 0305 	ornne	r3, r3, r5
    f054:	4662      	movne	r2, ip
    f056:	f04f 0400 	mov.w	r4, #0
    f05a:	e7a9      	b.n	efb0 <strlen+0x30>

0000f05c <__register_exitproc>:
    f05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f060:	4d2c      	ldr	r5, [pc, #176]	; (f114 <__register_exitproc+0xb8>)
    f062:	4606      	mov	r6, r0
    f064:	6828      	ldr	r0, [r5, #0]
    f066:	4698      	mov	r8, r3
    f068:	460f      	mov	r7, r1
    f06a:	4691      	mov	r9, r2
    f06c:	f000 f882 	bl	f174 <__retarget_lock_acquire_recursive>
    f070:	4b29      	ldr	r3, [pc, #164]	; (f118 <__register_exitproc+0xbc>)
    f072:	681c      	ldr	r4, [r3, #0]
    f074:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    f078:	2b00      	cmp	r3, #0
    f07a:	d03e      	beq.n	f0fa <__register_exitproc+0x9e>
    f07c:	685a      	ldr	r2, [r3, #4]
    f07e:	2a1f      	cmp	r2, #31
    f080:	dc1c      	bgt.n	f0bc <__register_exitproc+0x60>
    f082:	f102 0e01 	add.w	lr, r2, #1
    f086:	b176      	cbz	r6, f0a6 <__register_exitproc+0x4a>
    f088:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    f08c:	2401      	movs	r4, #1
    f08e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    f092:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    f096:	4094      	lsls	r4, r2
    f098:	4320      	orrs	r0, r4
    f09a:	2e02      	cmp	r6, #2
    f09c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    f0a0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    f0a4:	d023      	beq.n	f0ee <__register_exitproc+0x92>
    f0a6:	3202      	adds	r2, #2
    f0a8:	f8c3 e004 	str.w	lr, [r3, #4]
    f0ac:	6828      	ldr	r0, [r5, #0]
    f0ae:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    f0b2:	f000 f861 	bl	f178 <__retarget_lock_release_recursive>
    f0b6:	2000      	movs	r0, #0
    f0b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f0bc:	4b17      	ldr	r3, [pc, #92]	; (f11c <__register_exitproc+0xc0>)
    f0be:	b30b      	cbz	r3, f104 <__register_exitproc+0xa8>
    f0c0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    f0c4:	f7ff fdb6 	bl	ec34 <malloc>
    f0c8:	4603      	mov	r3, r0
    f0ca:	b1d8      	cbz	r0, f104 <__register_exitproc+0xa8>
    f0cc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    f0d0:	6002      	str	r2, [r0, #0]
    f0d2:	2100      	movs	r1, #0
    f0d4:	6041      	str	r1, [r0, #4]
    f0d6:	460a      	mov	r2, r1
    f0d8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    f0dc:	f04f 0e01 	mov.w	lr, #1
    f0e0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    f0e4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    f0e8:	2e00      	cmp	r6, #0
    f0ea:	d0dc      	beq.n	f0a6 <__register_exitproc+0x4a>
    f0ec:	e7cc      	b.n	f088 <__register_exitproc+0x2c>
    f0ee:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    f0f2:	430c      	orrs	r4, r1
    f0f4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    f0f8:	e7d5      	b.n	f0a6 <__register_exitproc+0x4a>
    f0fa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    f0fe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    f102:	e7bb      	b.n	f07c <__register_exitproc+0x20>
    f104:	6828      	ldr	r0, [r5, #0]
    f106:	f000 f837 	bl	f178 <__retarget_lock_release_recursive>
    f10a:	f04f 30ff 	mov.w	r0, #4294967295
    f10e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f112:	bf00      	nop
    f114:	20000608 	.word	0x20000608
    f118:	0000f73c 	.word	0x0000f73c
    f11c:	0000ec35 	.word	0x0000ec35

0000f120 <register_fini>:
    f120:	4b02      	ldr	r3, [pc, #8]	; (f12c <register_fini+0xc>)
    f122:	b113      	cbz	r3, f12a <register_fini+0xa>
    f124:	4802      	ldr	r0, [pc, #8]	; (f130 <register_fini+0x10>)
    f126:	f000 b805 	b.w	f134 <atexit>
    f12a:	4770      	bx	lr
    f12c:	00000000 	.word	0x00000000
    f130:	0000f141 	.word	0x0000f141

0000f134 <atexit>:
    f134:	2300      	movs	r3, #0
    f136:	4601      	mov	r1, r0
    f138:	461a      	mov	r2, r3
    f13a:	4618      	mov	r0, r3
    f13c:	f7ff bf8e 	b.w	f05c <__register_exitproc>

0000f140 <__libc_fini_array>:
    f140:	b538      	push	{r3, r4, r5, lr}
    f142:	4c0a      	ldr	r4, [pc, #40]	; (f16c <__libc_fini_array+0x2c>)
    f144:	4d0a      	ldr	r5, [pc, #40]	; (f170 <__libc_fini_array+0x30>)
    f146:	1b64      	subs	r4, r4, r5
    f148:	10a4      	asrs	r4, r4, #2
    f14a:	d00a      	beq.n	f162 <__libc_fini_array+0x22>
    f14c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    f150:	3b01      	subs	r3, #1
    f152:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    f156:	3c01      	subs	r4, #1
    f158:	f855 3904 	ldr.w	r3, [r5], #-4
    f15c:	4798      	blx	r3
    f15e:	2c00      	cmp	r4, #0
    f160:	d1f9      	bne.n	f156 <__libc_fini_array+0x16>
    f162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f166:	f000 baff 	b.w	f768 <_fini>
    f16a:	bf00      	nop
    f16c:	0000f778 	.word	0x0000f778
    f170:	0000f774 	.word	0x0000f774

0000f174 <__retarget_lock_acquire_recursive>:
    f174:	4770      	bx	lr
    f176:	bf00      	nop

0000f178 <__retarget_lock_release_recursive>:
    f178:	4770      	bx	lr
    f17a:	bf00      	nop
    f17c:	00000a0d 	.word	0x00000a0d
    f180:	202a2a2a 	.word	0x202a2a2a
    f184:	72617453 	.word	0x72617453
    f188:	20705574 	.word	0x20705574
    f18c:	6f676c41 	.word	0x6f676c41
    f190:	68746972 	.word	0x68746972
    f194:	206e656d 	.word	0x206e656d
    f198:	74736554 	.word	0x74736554
    f19c:	2a2a2a20 	.word	0x2a2a2a20
    f1a0:	00000000 	.word	0x00000000
    f1a4:	202a2a2a 	.word	0x202a2a2a
    f1a8:	65746144 	.word	0x65746144
    f1ac:	0020203a 	.word	0x0020203a
    f1b0:	2074634f 	.word	0x2074634f
    f1b4:	32203632 	.word	0x32203632
    f1b8:	00303230 	.word	0x00303230
    f1bc:	6d695420 	.word	0x6d695420
    f1c0:	00203a65 	.word	0x00203a65
    f1c4:	323a3731 	.word	0x323a3731
    f1c8:	35353a30 	.word	0x35353a30
    f1cc:	00000000 	.word	0x00000000
    f1d0:	62616e45 	.word	0x62616e45
    f1d4:	676e696c 	.word	0x676e696c
    f1d8:	61764520 	.word	0x61764520
    f1dc:	61726f70 	.word	0x61726f70
    f1e0:	20726f74 	.word	0x20726f74
    f1e4:	3a6e6146 	.word	0x3a6e6146
    f1e8:	00000020 	.word	0x00000020
    f1ec:	00092e20 	.word	0x00092e20
    f1f0:	70617645 	.word	0x70617645
    f1f4:	7461726f 	.word	0x7461726f
    f1f8:	4620726f 	.word	0x4620726f
    f1fc:	00206e61 	.word	0x00206e61
    f200:	61745320 	.word	0x61745320
    f204:	20737574 	.word	0x20737574
    f208:	0000003a 	.word	0x0000003a
    f20c:	74655320 	.word	0x74655320
    f210:	6e696f50 	.word	0x6e696f50
    f214:	003a2074 	.word	0x003a2074
    f218:	61764520 	.word	0x61764520
    f21c:	61726f70 	.word	0x61726f70
    f220:	46726f74 	.word	0x46726f74
    f224:	00206e61 	.word	0x00206e61
    f228:	73694420 	.word	0x73694420
    f22c:	656c6261 	.word	0x656c6261
    f230:	00000064 	.word	0x00000064
    f234:	62616e45 	.word	0x62616e45
    f238:	676e696c 	.word	0x676e696c
    f23c:	6e6f4320 	.word	0x6e6f4320
    f240:	61736564 	.word	0x61736564
    f244:	20726f74 	.word	0x20726f74
    f248:	0000092e 	.word	0x0000092e
    f24c:	646e6f43 	.word	0x646e6f43
    f250:	74617365 	.word	0x74617365
    f254:	2020726f 	.word	0x2020726f
    f258:	74617453 	.word	0x74617453
    f25c:	3a207375 	.word	0x3a207375
    f260:	00000000 	.word	0x00000000
    f264:	646e6f43 	.word	0x646e6f43
    f268:	74617365 	.word	0x74617365
    f26c:	5320726f 	.word	0x5320726f
    f270:	6f507465 	.word	0x6f507465
    f274:	20746e69 	.word	0x20746e69
    f278:	0000003a 	.word	0x0000003a
    f27c:	646e6f43 	.word	0x646e6f43
    f280:	74617365 	.word	0x74617365
    f284:	4420726f 	.word	0x4420726f
    f288:	62617369 	.word	0x62617369
    f28c:	0064656c 	.word	0x0064656c
    f290:	682f2e2e 	.word	0x682f2e2e
    f294:	702f6c70 	.word	0x702f6c70
    f298:	2f74726f 	.word	0x2f74726f
    f29c:	5f6c7068 	.word	0x5f6c7068
    f2a0:	6f697067 	.word	0x6f697067
    f2a4:	7361625f 	.word	0x7361625f
    f2a8:	00682e65 	.word	0x00682e65
    f2ac:	682f2e2e 	.word	0x682f2e2e
    f2b0:	692f6c61 	.word	0x692f6c61
    f2b4:	756c636e 	.word	0x756c636e
    f2b8:	682f6564 	.word	0x682f6564
    f2bc:	775f6c61 	.word	0x775f6c61
    f2c0:	682e7464 	.word	0x682e7464
    f2c4:	00000000 	.word	0x00000000
    f2c8:	682f2e2e 	.word	0x682f2e2e
    f2cc:	732f6c61 	.word	0x732f6c61
    f2d0:	682f6372 	.word	0x682f6372
    f2d4:	635f6c61 	.word	0x635f6c61
    f2d8:	6e656c61 	.word	0x6e656c61
    f2dc:	2e726164 	.word	0x2e726164
    f2e0:	00000063 	.word	0x00000063
    f2e4:	682f2e2e 	.word	0x682f2e2e
    f2e8:	732f6c61 	.word	0x732f6c61
    f2ec:	682f6372 	.word	0x682f6372
    f2f0:	635f6c61 	.word	0x635f6c61
    f2f4:	615f6e61 	.word	0x615f6e61
    f2f8:	636e7973 	.word	0x636e7973
    f2fc:	0000632e 	.word	0x0000632e
    f300:	682f2e2e 	.word	0x682f2e2e
    f304:	732f6c61 	.word	0x732f6c61
    f308:	682f6372 	.word	0x682f6372
    f30c:	635f6c61 	.word	0x635f6c61
    f310:	735f6372 	.word	0x735f6372
    f314:	2e636e79 	.word	0x2e636e79
    f318:	00000063 	.word	0x00000063
    f31c:	682f2e2e 	.word	0x682f2e2e
    f320:	732f6c61 	.word	0x732f6c61
    f324:	682f6372 	.word	0x682f6372
    f328:	695f6c61 	.word	0x695f6c61
    f32c:	6d5f6332 	.word	0x6d5f6332
    f330:	7973615f 	.word	0x7973615f
    f334:	632e636e 	.word	0x632e636e
    f338:	00000000 	.word	0x00000000
    f33c:	682f2e2e 	.word	0x682f2e2e
    f340:	732f6c61 	.word	0x732f6c61
    f344:	682f6372 	.word	0x682f6372
    f348:	695f6c61 	.word	0x695f6c61
    f34c:	6d5f6332 	.word	0x6d5f6332
    f350:	6e79735f 	.word	0x6e79735f
    f354:	00632e63 	.word	0x00632e63
    f358:	682f2e2e 	.word	0x682f2e2e
    f35c:	732f6c61 	.word	0x732f6c61
    f360:	682f6372 	.word	0x682f6372
    f364:	705f6c61 	.word	0x705f6c61
    f368:	632e6d77 	.word	0x632e6d77
    f36c:	00000000 	.word	0x00000000
    f370:	682f2e2e 	.word	0x682f2e2e
    f374:	732f6c61 	.word	0x732f6c61
    f378:	682f6372 	.word	0x682f6372
    f37c:	715f6c61 	.word	0x715f6c61
    f380:	5f697073 	.word	0x5f697073
    f384:	636e7973 	.word	0x636e7973
    f388:	0000632e 	.word	0x0000632e
    f38c:	682f2e2e 	.word	0x682f2e2e
    f390:	732f6c61 	.word	0x732f6c61
    f394:	682f6372 	.word	0x682f6372
    f398:	735f6c61 	.word	0x735f6c61
    f39c:	6d5f6970 	.word	0x6d5f6970
    f3a0:	6e79735f 	.word	0x6e79735f
    f3a4:	00632e63 	.word	0x00632e63
    f3a8:	682f2e2e 	.word	0x682f2e2e
    f3ac:	732f6c61 	.word	0x732f6c61
    f3b0:	682f6372 	.word	0x682f6372
    f3b4:	745f6c61 	.word	0x745f6c61
    f3b8:	72656d69 	.word	0x72656d69
    f3bc:	0000632e 	.word	0x0000632e
    f3c0:	682f2e2e 	.word	0x682f2e2e
    f3c4:	752f6c61 	.word	0x752f6c61
    f3c8:	736c6974 	.word	0x736c6974
    f3cc:	6372732f 	.word	0x6372732f
    f3d0:	6974752f 	.word	0x6974752f
    f3d4:	6c5f736c 	.word	0x6c5f736c
    f3d8:	2e747369 	.word	0x2e747369
    f3dc:	00000063 	.word	0x00000063

0000f3e0 <_map>:
    f3e0:	00000000 00000040 00000003 00000003     ....@...........
    f3f0:	00000004 00000004 00000005 00000005     ................
    f400:	00000006 00000056 00000007 00000057     ....V.......W...
    f410:	00000008 00000028 00000009 00000029     ....(.......)...
    f420:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    f430:	632e6369 00000000                       ic.c....

0000f438 <user_mux_confs>:
    f438:	00020100 00000000 00000000 00000000     ................
	...

0000f47c <channel_confs>:
    f47c:	0660065f 00000000 00000000 00000000     _.`.............
	...

0000f4bc <interrupt_cfg>:
	...
    f53c:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    f54c:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    f55c:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    f56c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    f57c:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    f58c:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    f59c:	43000400 43000800 43000c00              ...C...C...C

0000f5a8 <sercomspi_regs>:
    f5a8:	0020000c 00020000 00000000 01ff0001     .. .............
    f5b8:	30000c04 02000000 00000000 ff00ef00     ...0............
    f5c8:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    f5d8:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
    f5e8:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
    f5f8:	43001400 43001800                       ...C...C

0000f600 <_usb_ep_cfgs>:
    f600:	200009d4 00000000 00000040 20000a14     ... ....@...... 
    f610:	20000a54 00400040 20000a94 20000ad4     T.. @.@.... ... 
    f620:	00400040 20000b14 20000b54 00400040     @.@.... T.. @.@.
    f630:	20000b94 20000bd4 00400040 00000804     ... ... @.@.....
    f640:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
    f650:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
    f660:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
    f670:	7361625f 00682e65                       _base.h.

0000f678 <n25q256a_interface>:
    f678:	0000bd0d 0000bdb1 0000bec1 0000c079     ............y...
    f688:	0000c109 752f2e2e 642f6273 63697665     ....../usb/devic
    f698:	73752f65 2e636462 00000063              e/usbdc.c...

0000f6a4 <_ZTV9CDC_Class>:
	...
    f6ac:	0000e2d9 0000e3b9 0000df5d 0000e2a1     ........].......
    f6bc:	0000e451 0000e265 0000e179 0000e1c9     Q...e...y.......
    f6cc:	0000e2c1 0000e321                       ....!...

0000f6d4 <_ZTV6Stream>:
	...
    f6dc:	0000ec49 0000e521 0000df5d 0000df71     I...!...]...q...
    f6ec:	0000ec49 0000ec49 0000ec49 2e257830     I...I...I...0x%.
    f6fc:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
    f70c:	0066766f                                ovf.

0000f710 <_ZTV5Print>:
	...
    f718:	0000ec49 0000e521 0000df5d 0000df71     I...!...]...q...
    f728:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    f738:	00632e6f                                o.c.

0000f73c <_global_impure_ptr>:
    f73c:	200001e0                                ... 

0000f740 <_init>:
    f740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f742:	bf00      	nop
    f744:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f746:	bc08      	pop	{r3}
    f748:	469e      	mov	lr, r3
    f74a:	4770      	bx	lr

0000f74c <__init_array_start>:
    f74c:	0000f121 	.word	0x0000f121

0000f750 <__frame_dummy_init_array_entry>:
    f750:	00000289 00000571 00000999 0000df25     ....q.......%...
    f760:	0000e4d1 0000ec21                       ....!...

0000f768 <_fini>:
    f768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f76a:	bf00      	nop
    f76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f76e:	bc08      	pop	{r3}
    f770:	469e      	mov	lr, r3
    f772:	4770      	bx	lr

0000f774 <__fini_array_start>:
    f774:	00000265 	.word	0x00000265
